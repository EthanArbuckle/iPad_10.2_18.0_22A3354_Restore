void CLMicroLocationProto::AnchorValueStatisticsConfiguration::CheckTypeAndMergeFrom(CLMicroLocationProto::AnchorValueStatisticsConfiguration *this, const wireless_diagnostics::google::protobuf::MessageLite *lpsrc)
{
  uint64_t v4;
  uint64_t v5;

  CLMicroLocationProto::AnchorValueStatisticsConfiguration::MergeFrom(this, lpsrc);
}

void CLMicroLocationProto::AnchorValueStatisticsConfiguration::CopyFrom(CLMicroLocationProto::AnchorValueStatisticsConfiguration *this, const CLMicroLocationProto::AnchorValueStatisticsConfiguration *a2)
{
  if (a2 != this)
  {
    (*(void (**)(CLMicroLocationProto::AnchorValueStatisticsConfiguration *))(*(_QWORD *)this + 32))(this);
    CLMicroLocationProto::AnchorValueStatisticsConfiguration::MergeFrom(this, a2);
  }
}

uint64_t CLMicroLocationProto::AnchorValueStatisticsConfiguration::IsInitialized(CLMicroLocationProto::AnchorValueStatisticsConfiguration *this)
{
  return 1;
}

_QWORD *CLMicroLocationProto::AnchorValueStatisticsConfiguration::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CLMicroLocationProto.AnchorValueStatisticsConfiguration");
}

CLMicroLocationProto::Configuration *CLMicroLocationProto::Configuration::Configuration(CLMicroLocationProto::Configuration *this, const CLMicroLocationProto::Configuration *a2)
{
  *(_QWORD *)this = &off_2511D8798;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 36) = 0u;
  CLMicroLocationProto::Configuration::MergeFrom(this, a2);
  return this;
}

void sub_241ADBD80(_Unwind_Exception *a1)
{
  wireless_diagnostics::google::protobuf::MessageLite *v1;

  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(v1);
  _Unwind_Resume(a1);
}

void CLMicroLocationProto::Configuration::MergeFrom(CLMicroLocationProto::Configuration *this, const CLMicroLocationProto::Configuration *a2)
{
  CLMicroLocationProto::Configuration *v3;
  int v4;
  unsigned int v5;
  uint64_t v6;
  CLMicroLocationProto::WifiHistogram *v7;
  const CLMicroLocationProto::WifiHistogram *v8;
  CLMicroLocationProto::AnchorAppearanceConfiguration *v9;
  const CLMicroLocationProto::AnchorAppearanceConfiguration *v10;
  CLMicroLocationProto::AnchorValueStatisticsConfiguration *v11;
  const CLMicroLocationProto::AnchorValueStatisticsConfiguration *v12;
  _BYTE v13[48];

  v3 = this;
  if (a2 == this)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v13);
  }
  LOBYTE(v4) = *((_BYTE *)a2 + 48);
  if (!(_BYTE)v4)
    return;
  if ((*((_BYTE *)a2 + 48) & 1) != 0)
  {
    v5 = *((_DWORD *)a2 + 10);
    if (v5 >= 3)
      CLMicroLocationProto::Configuration::MergeFrom();
    *((_DWORD *)v3 + 12) |= 1u;
    *((_DWORD *)v3 + 10) = v5;
    v4 = *((_DWORD *)a2 + 12);
  }
  if ((v4 & 2) == 0)
  {
    if ((v4 & 4) == 0)
      goto LABEL_9;
LABEL_13:
    *((_DWORD *)v3 + 12) |= 4u;
    v7 = (CLMicroLocationProto::WifiHistogram *)*((_QWORD *)v3 + 2);
    if (!v7)
    {
      this = (CLMicroLocationProto::Configuration *)operator new();
      v7 = this;
      *((_QWORD *)this + 1) = 0;
      *((_QWORD *)this + 2) = 0;
      *(_QWORD *)this = &off_2511D8630;
      *((_DWORD *)this + 6) = 0;
      *((_QWORD *)this + 4) = 0;
      *((_DWORD *)this + 10) = 0;
      *((_QWORD *)v3 + 2) = this;
    }
    v8 = (const CLMicroLocationProto::WifiHistogram *)*((_QWORD *)a2 + 2);
    if (!v8)
    {
      CLMicroLocationProto::protobuf_AddDesc_microlocation_2eproto(this);
      v8 = *(const CLMicroLocationProto::WifiHistogram **)(CLMicroLocationProto::Configuration::default_instance_ + 16);
    }
    CLMicroLocationProto::WifiHistogram::MergeFrom(v7, v8);
    v4 = *((_DWORD *)a2 + 12);
    if ((v4 & 8) == 0)
    {
LABEL_10:
      if ((v4 & 0x10) == 0)
        return;
      goto LABEL_23;
    }
    goto LABEL_18;
  }
  v6 = *((_QWORD *)a2 + 1);
  *((_DWORD *)v3 + 12) |= 2u;
  *((_QWORD *)v3 + 1) = v6;
  v4 = *((_DWORD *)a2 + 12);
  if ((v4 & 4) != 0)
    goto LABEL_13;
LABEL_9:
  if ((v4 & 8) == 0)
    goto LABEL_10;
LABEL_18:
  *((_DWORD *)v3 + 12) |= 8u;
  v9 = (CLMicroLocationProto::AnchorAppearanceConfiguration *)*((_QWORD *)v3 + 3);
  if (!v9)
  {
    this = (CLMicroLocationProto::Configuration *)operator new();
    v9 = this;
    *((_QWORD *)this + 2) = 1;
    *(_QWORD *)this = &off_2511D86A8;
    *((_QWORD *)this + 1) = 0;
    *((_DWORD *)this + 6) = 0;
    *((_QWORD *)v3 + 3) = this;
  }
  v10 = (const CLMicroLocationProto::AnchorAppearanceConfiguration *)*((_QWORD *)a2 + 3);
  if (!v10)
  {
    CLMicroLocationProto::protobuf_AddDesc_microlocation_2eproto(this);
    v10 = *(const CLMicroLocationProto::AnchorAppearanceConfiguration **)(CLMicroLocationProto::Configuration::default_instance_
                                                                        + 24);
  }
  CLMicroLocationProto::AnchorAppearanceConfiguration::MergeFrom(v9, v10);
  if ((*((_DWORD *)a2 + 12) & 0x10) != 0)
  {
LABEL_23:
    *((_DWORD *)v3 + 12) |= 0x10u;
    v11 = (CLMicroLocationProto::AnchorValueStatisticsConfiguration *)*((_QWORD *)v3 + 4);
    if (!v11)
    {
      this = (CLMicroLocationProto::Configuration *)operator new();
      v11 = this;
      *((_QWORD *)this + 3) = 2;
      *(_QWORD *)this = &off_2511D8720;
      *((_QWORD *)this + 1) = 0;
      *((_QWORD *)this + 2) = MEMORY[0x24BEDD958];
      *((_DWORD *)this + 8) = 0;
      *((_QWORD *)v3 + 4) = this;
    }
    v12 = (const CLMicroLocationProto::AnchorValueStatisticsConfiguration *)*((_QWORD *)a2 + 4);
    if (!v12)
    {
      CLMicroLocationProto::protobuf_AddDesc_microlocation_2eproto(this);
      v12 = *(const CLMicroLocationProto::AnchorValueStatisticsConfiguration **)(CLMicroLocationProto::Configuration::default_instance_
                                                                               + 32);
    }
    CLMicroLocationProto::AnchorValueStatisticsConfiguration::MergeFrom(v11, v12);
  }
}

void sub_241ADBFD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void CLMicroLocationProto::Configuration::~Configuration(CLMicroLocationProto::Configuration *this)
{
  *(_QWORD *)this = &off_2511D8798;
  CLMicroLocationProto::Configuration::SharedDtor(this);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

{
  CLMicroLocationProto::Configuration::~Configuration(this);
  JUMPOUT(0x2426A04D4);
}

void CLMicroLocationProto::Configuration::SharedDtor(CLMicroLocationProto::Configuration *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  CLMicroLocationProto::protobuf_AddDesc_microlocation_2eproto(this);
  if ((CLMicroLocationProto::Configuration *)CLMicroLocationProto::Configuration::default_instance_ != this)
  {
    v2 = *((_QWORD *)this + 2);
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
    v3 = *((_QWORD *)this + 3);
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    v4 = *((_QWORD *)this + 4);
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  }
}

uint64_t CLMicroLocationProto::Configuration::default_instance(CLMicroLocationProto::Configuration *this)
{
  CLMicroLocationProto::protobuf_AddDesc_microlocation_2eproto(this);
  return CLMicroLocationProto::Configuration::default_instance_;
}

double CLMicroLocationProto::Configuration::New(CLMicroLocationProto::Configuration *this)
{
  uint64_t v1;
  double result;

  v1 = operator new();
  *(_QWORD *)v1 = &off_2511D8798;
  result = 0.0;
  *(_OWORD *)(v1 + 8) = 0u;
  *(_OWORD *)(v1 + 24) = 0u;
  *(_OWORD *)(v1 + 36) = 0u;
  return result;
}

uint64_t CLMicroLocationProto::Configuration::Clear(uint64_t this)
{
  uint64_t v1;
  int v2;

  v1 = this;
  LOBYTE(v2) = *(_BYTE *)(this + 48);
  if ((_BYTE)v2)
  {
    *(_DWORD *)(this + 40) = 0;
    *(_QWORD *)(this + 8) = 0;
    if ((v2 & 4) != 0)
    {
      this = *(_QWORD *)(this + 16);
      if (this)
      {
        this = CLMicroLocationProto::WifiHistogram::Clear(this);
        v2 = *(_DWORD *)(v1 + 48);
      }
    }
    if ((v2 & 8) != 0)
    {
      this = *(_QWORD *)(v1 + 24);
      if (this)
      {
        this = CLMicroLocationProto::AnchorAppearanceConfiguration::Clear(this);
        v2 = *(_DWORD *)(v1 + 48);
      }
    }
    if ((v2 & 0x10) != 0)
    {
      this = *(_QWORD *)(v1 + 32);
      if (this)
        this = CLMicroLocationProto::AnchorValueStatisticsConfiguration::Clear(this);
    }
  }
  *(_DWORD *)(v1 + 48) = 0;
  return this;
}

uint64_t CLMicroLocationProto::Configuration::MergePartialFromCodedStream(CLMicroLocationProto::Configuration *this, wireless_diagnostics::google::protobuf::io::CodedInputStream *a2)
{
  uint64_t v4;
  char *v5;
  uint64_t TagFallback;
  int v7;
  char *v8;
  unsigned int v9;
  int v10;
  uint64_t result;
  _BYTE *v12;
  _BYTE *v13;
  uint64_t v14;
  char *v15;
  int v16;
  int v17;
  int v18;
  BOOL v19;
  int v20;
  _BYTE *v21;
  uint64_t v22;
  char *v23;
  int v24;
  int v25;
  int v26;
  int v27;
  _BYTE *v28;
  uint64_t v29;
  char *v30;
  int v31;
  int v32;
  int v33;
  int v34;
  unsigned int v35[2];

  v4 = MEMORY[0x24BEDD958];
  while (1)
  {
    v5 = (char *)*((_QWORD *)a2 + 1);
    if ((unint64_t)v5 < *((_QWORD *)a2 + 2) && (*v5 & 0x80000000) == 0)
    {
      TagFallback = *v5;
      *((_DWORD *)a2 + 8) = TagFallback;
      *((_QWORD *)a2 + 1) = v5 + 1;
      if (!(_DWORD)TagFallback)
        return 1;
      goto LABEL_7;
    }
    TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(a2);
    *((_DWORD *)a2 + 8) = TagFallback;
    if (!(_DWORD)TagFallback)
      return 1;
LABEL_7:
    switch(TagFallback >> 3)
    {
      case 1u:
        v7 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_20;
        v35[0] = 0;
        v8 = (char *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v8 >= *((_QWORD *)a2 + 2) || *v8 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v35);
          if (!(_DWORD)result)
            return result;
          v9 = v35[0];
        }
        else
        {
          v9 = *v8;
          *((_QWORD *)a2 + 1) = v8 + 1;
        }
        if (v9 <= 2)
        {
          *((_DWORD *)this + 12) |= 1u;
          *((_DWORD *)this + 10) = v9;
        }
        v12 = (_BYTE *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v12 < *((_QWORD *)a2 + 2) && *v12 == 17)
        {
          *((_QWORD *)a2 + 1) = v12 + 1;
          goto LABEL_30;
        }
        continue;
      case 2u:
        v7 = TagFallback & 7;
        if (v7 != 1)
          goto LABEL_20;
LABEL_30:
        *(_QWORD *)v35 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(a2, (unint64_t *)v35) & 1) == 0)return 0;
        *((_QWORD *)this + 1) = *(_QWORD *)v35;
        v10 = *((_DWORD *)this + 12) | 2;
        *((_DWORD *)this + 12) = v10;
        v13 = (_BYTE *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v13 >= *((_QWORD *)a2 + 2) || *v13 != 34)
          continue;
        *((_QWORD *)a2 + 1) = v13 + 1;
LABEL_34:
        *((_DWORD *)this + 12) = v10 | 4;
        v14 = *((_QWORD *)this + 2);
        if (!v14)
        {
          v14 = operator new();
          *(_QWORD *)(v14 + 8) = 0;
          *(_QWORD *)(v14 + 16) = 0;
          *(_QWORD *)v14 = &off_2511D8630;
          *(_DWORD *)(v14 + 24) = 0;
          *(_QWORD *)(v14 + 32) = 0;
          *(_DWORD *)(v14 + 40) = 0;
          *((_QWORD *)this + 2) = v14;
        }
        v35[0] = 0;
        v15 = (char *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v15 >= *((_QWORD *)a2 + 2) || *v15 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v35))return 0;
        }
        else
        {
          v35[0] = *v15;
          *((_QWORD *)a2 + 1) = v15 + 1;
        }
        v16 = *((_DWORD *)a2 + 14);
        v17 = *((_DWORD *)a2 + 15);
        *((_DWORD *)a2 + 14) = v16 + 1;
        if (v16 >= v17)
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(a2);
        if (!CLMicroLocationProto::WifiHistogram::MergePartialFromCodedStream((CLMicroLocationProto::WifiHistogram *)v14, a2)|| !*((_BYTE *)a2 + 36))
        {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(a2);
        v18 = *((_DWORD *)a2 + 14);
        v19 = __OFSUB__(v18, 1);
        v20 = v18 - 1;
        if (v20 < 0 == v19)
          *((_DWORD *)a2 + 14) = v20;
        v21 = (_BYTE *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v21 >= *((_QWORD *)a2 + 2) || *v21 != 42)
          continue;
        *((_QWORD *)a2 + 1) = v21 + 1;
LABEL_48:
        *((_DWORD *)this + 12) |= 8u;
        v22 = *((_QWORD *)this + 3);
        if (!v22)
        {
          v22 = operator new();
          *(_QWORD *)(v22 + 16) = 1;
          *(_QWORD *)v22 = &off_2511D86A8;
          *(_QWORD *)(v22 + 8) = 0;
          *(_DWORD *)(v22 + 24) = 0;
          *((_QWORD *)this + 3) = v22;
        }
        v35[0] = 0;
        v23 = (char *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v23 >= *((_QWORD *)a2 + 2) || *v23 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v35))return 0;
        }
        else
        {
          v35[0] = *v23;
          *((_QWORD *)a2 + 1) = v23 + 1;
        }
        v24 = *((_DWORD *)a2 + 14);
        v25 = *((_DWORD *)a2 + 15);
        *((_DWORD *)a2 + 14) = v24 + 1;
        if (v24 >= v25)
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(a2);
        if (!CLMicroLocationProto::AnchorAppearanceConfiguration::MergePartialFromCodedStream((CLMicroLocationProto::AnchorAppearanceConfiguration *)v22, a2)|| !*((_BYTE *)a2 + 36))
        {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(a2);
        v26 = *((_DWORD *)a2 + 14);
        v19 = __OFSUB__(v26, 1);
        v27 = v26 - 1;
        if (v27 < 0 == v19)
          *((_DWORD *)a2 + 14) = v27;
        v28 = (_BYTE *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v28 >= *((_QWORD *)a2 + 2) || *v28 != 50)
          continue;
        *((_QWORD *)a2 + 1) = v28 + 1;
LABEL_62:
        *((_DWORD *)this + 12) |= 0x10u;
        v29 = *((_QWORD *)this + 4);
        if (!v29)
        {
          v29 = operator new();
          *(_QWORD *)(v29 + 24) = 2;
          *(_QWORD *)v29 = &off_2511D8720;
          *(_QWORD *)(v29 + 8) = 0;
          *(_QWORD *)(v29 + 16) = v4;
          *(_DWORD *)(v29 + 32) = 0;
          *((_QWORD *)this + 4) = v29;
        }
        v35[0] = 0;
        v30 = (char *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v30 >= *((_QWORD *)a2 + 2) || *v30 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v35))return 0;
        }
        else
        {
          v35[0] = *v30;
          *((_QWORD *)a2 + 1) = v30 + 1;
        }
        v31 = *((_DWORD *)a2 + 14);
        v32 = *((_DWORD *)a2 + 15);
        *((_DWORD *)a2 + 14) = v31 + 1;
        if (v31 >= v32)
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(a2);
        if (!CLMicroLocationProto::AnchorValueStatisticsConfiguration::MergePartialFromCodedStream((CLMicroLocationProto::AnchorValueStatisticsConfiguration *)v29, a2)|| !*((_BYTE *)a2 + 36))
        {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(a2);
        v33 = *((_DWORD *)a2 + 14);
        v19 = __OFSUB__(v33, 1);
        v34 = v33 - 1;
        if (v34 < 0 == v19)
          *((_DWORD *)a2 + 14) = v34;
        if (*((_QWORD *)a2 + 1) == *((_QWORD *)a2 + 2)
          && (*((_DWORD *)a2 + 11) || *((_DWORD *)a2 + 6) == *((_DWORD *)a2 + 10)))
        {
          *((_DWORD *)a2 + 8) = 0;
          result = 1;
          *((_BYTE *)a2 + 36) = 1;
          return result;
        }
        break;
      case 4u:
        v7 = TagFallback & 7;
        if (v7 != 2)
          goto LABEL_20;
        v10 = *((_DWORD *)this + 12);
        goto LABEL_34;
      case 5u:
        v7 = TagFallback & 7;
        if (v7 == 2)
          goto LABEL_48;
        goto LABEL_20;
      case 6u:
        v7 = TagFallback & 7;
        if (v7 != 2)
          goto LABEL_20;
        goto LABEL_62;
      default:
        v7 = TagFallback & 7;
LABEL_20:
        if (v7 == 4)
          return 1;
        if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(a2, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback) & 1) == 0)return 0;
        continue;
    }
  }
}

unsigned int *CLMicroLocationProto::Configuration::SerializeWithCachedSizes(unsigned int *this, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a2, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  unsigned int *v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v5 = this;
  v6 = this[12];
  if ((v6 & 1) != 0)
  {
    this = (unsigned int *)wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, this[10], (uint64_t)a2, a4);
    v6 = v5[12];
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0)
        goto LABEL_4;
      goto LABEL_9;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  this = (unsigned int *)wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, (uint64_t)a2, *((double *)v5 + 1), a3);
  v6 = v5[12];
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0)
      goto LABEL_5;
    goto LABEL_12;
  }
LABEL_9:
  v7 = *((_QWORD *)v5 + 2);
  if (!v7)
  {
    CLMicroLocationProto::protobuf_AddDesc_microlocation_2eproto((CLMicroLocationProto *)this);
    v7 = *(_QWORD *)(CLMicroLocationProto::Configuration::default_instance_ + 16);
  }
  this = (unsigned int *)wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4, v7, a2, a4);
  v6 = v5[12];
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0)
      return this;
    goto LABEL_15;
  }
LABEL_12:
  v8 = *((_QWORD *)v5 + 3);
  if (!v8)
  {
    CLMicroLocationProto::protobuf_AddDesc_microlocation_2eproto((CLMicroLocationProto *)this);
    v8 = *(_QWORD *)(CLMicroLocationProto::Configuration::default_instance_ + 24);
  }
  this = (unsigned int *)wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5, v8, a2, a4);
  if ((v5[12] & 0x10) != 0)
  {
LABEL_15:
    v9 = *((_QWORD *)v5 + 4);
    if (!v9)
    {
      CLMicroLocationProto::protobuf_AddDesc_microlocation_2eproto((CLMicroLocationProto *)this);
      v9 = *(_QWORD *)(CLMicroLocationProto::Configuration::default_instance_ + 32);
    }
    return (unsigned int *)wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)6, v9, a2, a4);
  }
  return this;
}

uint64_t CLMicroLocationProto::Configuration::ByteSize(CLMicroLocationProto::Configuration *this)
{
  int v2;
  unsigned int v3;
  uint64_t v4;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v5;
  CLMicroLocationProto::WifiHistogram *v6;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v7;
  int v8;
  int v9;
  CLMicroLocationProto::AnchorAppearanceConfiguration *v10;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v11;
  int v12;
  int v13;
  CLMicroLocationProto::AnchorValueStatisticsConfiguration *v14;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v15;
  int v16;
  int v17;

  LOBYTE(v2) = *((_BYTE *)this + 48);
  if (!(_BYTE)v2)
  {
    v4 = 0;
    goto LABEL_35;
  }
  if ((*((_BYTE *)this + 48) & 1) != 0)
  {
    v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 10);
    if ((v5 & 0x80000000) != 0)
    {
      v3 = 11;
    }
    else if (v5 >= 0x80)
    {
      v3 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v5) + 1;
      v2 = *((_DWORD *)this + 12);
    }
    else
    {
      v3 = 2;
    }
  }
  else
  {
    v3 = 0;
  }
  if ((v2 & 2) != 0)
    v4 = v3 + 9;
  else
    v4 = v3;
  if ((v2 & 4) != 0)
  {
    v6 = (CLMicroLocationProto::WifiHistogram *)*((_QWORD *)this + 2);
    if (!v6)
    {
      CLMicroLocationProto::protobuf_AddDesc_microlocation_2eproto(0);
      v6 = *(CLMicroLocationProto::WifiHistogram **)(CLMicroLocationProto::Configuration::default_instance_ + 16);
    }
    v7 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)CLMicroLocationProto::WifiHistogram::ByteSize(v6);
    v8 = (int)v7;
    if (v7 >= 0x80)
      v9 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v7);
    else
      v9 = 1;
    v4 = (v4 + v8 + v9 + 1);
    v2 = *((_DWORD *)this + 12);
    if ((v2 & 8) == 0)
    {
LABEL_15:
      if ((v2 & 0x10) == 0)
        goto LABEL_35;
      goto LABEL_29;
    }
  }
  else if ((v2 & 8) == 0)
  {
    goto LABEL_15;
  }
  v10 = (CLMicroLocationProto::AnchorAppearanceConfiguration *)*((_QWORD *)this + 3);
  if (!v10)
  {
    CLMicroLocationProto::protobuf_AddDesc_microlocation_2eproto(0);
    v10 = *(CLMicroLocationProto::AnchorAppearanceConfiguration **)(CLMicroLocationProto::Configuration::default_instance_
                                                                  + 24);
  }
  v11 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)CLMicroLocationProto::AnchorAppearanceConfiguration::ByteSize(v10);
  v12 = (int)v11;
  if (v11 >= 0x80)
    v13 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v11);
  else
    v13 = 1;
  v4 = (v4 + v12 + v13 + 1);
  if ((*((_DWORD *)this + 12) & 0x10) != 0)
  {
LABEL_29:
    v14 = (CLMicroLocationProto::AnchorValueStatisticsConfiguration *)*((_QWORD *)this + 4);
    if (!v14)
    {
      CLMicroLocationProto::protobuf_AddDesc_microlocation_2eproto(0);
      v14 = *(CLMicroLocationProto::AnchorValueStatisticsConfiguration **)(CLMicroLocationProto::Configuration::default_instance_
                                                                         + 32);
    }
    v15 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)CLMicroLocationProto::AnchorValueStatisticsConfiguration::ByteSize(v14);
    v16 = (int)v15;
    if (v15 >= 0x80)
      v17 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v15);
    else
      v17 = 1;
    v4 = (v4 + v16 + v17 + 1);
  }
LABEL_35:
  *((_DWORD *)this + 11) = v4;
  return v4;
}

void CLMicroLocationProto::Configuration::CheckTypeAndMergeFrom(CLMicroLocationProto::Configuration *this, const wireless_diagnostics::google::protobuf::MessageLite *lpsrc)
{
  uint64_t v4;
  uint64_t v5;

  CLMicroLocationProto::Configuration::MergeFrom(this, lpsrc);
}

void CLMicroLocationProto::Configuration::CopyFrom(CLMicroLocationProto::Configuration *this, const CLMicroLocationProto::Configuration *a2)
{
  if (a2 != this)
  {
    (*(void (**)(CLMicroLocationProto::Configuration *))(*(_QWORD *)this + 32))(this);
    CLMicroLocationProto::Configuration::MergeFrom(this, a2);
  }
}

uint64_t CLMicroLocationProto::Configuration::IsInitialized(CLMicroLocationProto::Configuration *this)
{
  return 1;
}

_QWORD *CLMicroLocationProto::Configuration::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CLMicroLocationProto.Configuration");
}

CLMicroLocationProto::RapportDevice *CLMicroLocationProto::RapportDevice::RapportDevice(CLMicroLocationProto::RapportDevice *this, const CLMicroLocationProto::RapportDevice *a2)
{
  uint64_t v3;

  v3 = MEMORY[0x24BEDD958];
  *(_QWORD *)this = &off_2511D8810;
  *((_QWORD *)this + 1) = v3;
  *((_QWORD *)this + 2) = v3;
  *((_QWORD *)this + 3) = 0;
  CLMicroLocationProto::RapportDevice::MergeFrom(this, a2);
  return this;
}

void sub_241ADC9D0(_Unwind_Exception *a1)
{
  wireless_diagnostics::google::protobuf::MessageLite *v1;

  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(v1);
  _Unwind_Resume(a1);
}

void CLMicroLocationProto::RapportDevice::MergeFrom(CLMicroLocationProto::RapportDevice *this, const CLMicroLocationProto::RapportDevice *a2)
{
  int v4;
  std::string *v5;
  const std::string *v6;
  std::string *v7;
  const std::string *v8;
  std::string *v9;
  _BYTE v10[48];

  if (a2 == this)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v10);
  }
  LOBYTE(v4) = *((_BYTE *)a2 + 28);
  if ((_BYTE)v4)
  {
    v5 = (std::string *)MEMORY[0x24BEDD958];
    if ((*((_BYTE *)a2 + 28) & 1) != 0)
    {
      v6 = (const std::string *)*((_QWORD *)a2 + 1);
      *((_DWORD *)this + 7) |= 1u;
      v7 = (std::string *)*((_QWORD *)this + 1);
      if (v7 == v5)
      {
        v7 = (std::string *)operator new();
        v7->__r_.__value_.__l.__size_ = 0;
        v7->__r_.__value_.__r.__words[2] = 0;
        v7->__r_.__value_.__r.__words[0] = 0;
        *((_QWORD *)this + 1) = v7;
      }
      std::string::operator=(v7, v6);
      v4 = *((_DWORD *)a2 + 7);
    }
    if ((v4 & 2) != 0)
    {
      v8 = (const std::string *)*((_QWORD *)a2 + 2);
      *((_DWORD *)this + 7) |= 2u;
      v9 = (std::string *)*((_QWORD *)this + 2);
      if (v9 == v5)
      {
        v9 = (std::string *)operator new();
        v9->__r_.__value_.__l.__size_ = 0;
        v9->__r_.__value_.__r.__words[2] = 0;
        v9->__r_.__value_.__r.__words[0] = 0;
        *((_QWORD *)this + 2) = v9;
      }
      std::string::operator=(v9, v8);
    }
  }
}

void sub_241ADCB04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void CLMicroLocationProto::RapportDevice::~RapportDevice(CLMicroLocationProto::RapportDevice *this)
{
  *(_QWORD *)this = &off_2511D8810;
  CLMicroLocationProto::ServiceDelete::SharedDtor(this);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

{
  CLMicroLocationProto::RapportDevice::~RapportDevice(this);
  JUMPOUT(0x2426A04D4);
}

_QWORD *CLMicroLocationProto::RapportDevice::New(CLMicroLocationProto::RapportDevice *this)
{
  _QWORD *result;
  uint64_t v2;

  result = (_QWORD *)operator new();
  v2 = MEMORY[0x24BEDD958];
  *result = &off_2511D8810;
  result[1] = v2;
  result[2] = v2;
  result[3] = 0;
  return result;
}

uint64_t CLMicroLocationProto::RapportDevice::Clear(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  if (*(_BYTE *)(this + 28))
  {
    v1 = MEMORY[0x24BEDD958];
    if ((*(_BYTE *)(this + 28) & 1) != 0)
    {
      v2 = *(_QWORD *)(this + 8);
      if (v2 != MEMORY[0x24BEDD958])
      {
        if (*(char *)(v2 + 23) < 0)
        {
          **(_BYTE **)v2 = 0;
          *(_QWORD *)(v2 + 8) = 0;
        }
        else
        {
          *(_BYTE *)v2 = 0;
          *(_BYTE *)(v2 + 23) = 0;
        }
      }
    }
    if ((*(_BYTE *)(this + 28) & 2) != 0)
    {
      v3 = *(_QWORD *)(this + 16);
      if (v3 != v1)
      {
        if (*(char *)(v3 + 23) < 0)
        {
          **(_BYTE **)v3 = 0;
          *(_QWORD *)(v3 + 8) = 0;
        }
        else
        {
          *(_BYTE *)v3 = 0;
          *(_BYTE *)(v3 + 23) = 0;
        }
      }
    }
  }
  *(_DWORD *)(this + 28) = 0;
  return this;
}

uint64_t CLMicroLocationProto::RapportDevice::MergePartialFromCodedStream(CLMicroLocationProto::RapportDevice *this, wireless_diagnostics::google::protobuf::io::CodedInputStream *a2)
{
  uint64_t v4;
  char *v5;
  uint64_t TagFallback;
  int v7;
  _QWORD *v8;
  uint64_t result;
  _BYTE *v10;
  _QWORD *v11;

  v4 = MEMORY[0x24BEDD958];
  do
  {
    while (1)
    {
      while (1)
      {
        v5 = (char *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v5 >= *((_QWORD *)a2 + 2) || *v5 < 0)
        {
          TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(a2);
          *((_DWORD *)a2 + 8) = TagFallback;
          if (!(_DWORD)TagFallback)
            return 1;
        }
        else
        {
          TagFallback = *v5;
          *((_DWORD *)a2 + 8) = TagFallback;
          *((_QWORD *)a2 + 1) = v5 + 1;
          if (!(_DWORD)TagFallback)
            return 1;
        }
        if (TagFallback >> 3 != 1)
          break;
        v7 = TagFallback & 7;
        if (v7 != 2)
          goto LABEL_26;
        *((_DWORD *)this + 7) |= 1u;
        if (*((_QWORD *)this + 1) == v4)
        {
          v8 = (_QWORD *)operator new();
          v8[1] = 0;
          v8[2] = 0;
          *v8 = 0;
          *((_QWORD *)this + 1) = v8;
        }
        result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadBytes();
        if (!(_DWORD)result)
          return result;
        v10 = (_BYTE *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v10 < *((_QWORD *)a2 + 2) && *v10 == 18)
        {
          *((_QWORD *)a2 + 1) = v10 + 1;
          goto LABEL_18;
        }
      }
      if (TagFallback >> 3 != 2)
      {
        v7 = TagFallback & 7;
        goto LABEL_26;
      }
      v7 = TagFallback & 7;
      if (v7 == 2)
        break;
LABEL_26:
      if (v7 == 4)
        return 1;
      if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(a2, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback) & 1) == 0)return 0;
    }
LABEL_18:
    *((_DWORD *)this + 7) |= 2u;
    if (*((_QWORD *)this + 2) == v4)
    {
      v11 = (_QWORD *)operator new();
      v11[1] = 0;
      v11[2] = 0;
      *v11 = 0;
      *((_QWORD *)this + 2) = v11;
    }
    result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString();
    if (!(_DWORD)result)
      return result;
  }
  while (*((_QWORD *)a2 + 1) != *((_QWORD *)a2 + 2)
       || !*((_DWORD *)a2 + 11) && *((_DWORD *)a2 + 6) != *((_DWORD *)a2 + 10));
  *((_DWORD *)a2 + 8) = 0;
  result = 1;
  *((_BYTE *)a2 + 36) = 1;
  return result;
}

uint64_t CLMicroLocationProto::RapportDevice::SerializeWithCachedSizes(uint64_t this, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a2)
{
  uint64_t v2;
  int v3;

  v2 = this;
  v3 = *(_DWORD *)(this + 28);
  if ((v3 & 1) != 0)
  {
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBytes();
    v3 = *(_DWORD *)(v2 + 28);
  }
  if ((v3 & 2) != 0)
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString();
  return this;
}

uint64_t CLMicroLocationProto::RapportDevice::ByteSize(CLMicroLocationProto::RapportDevice *this)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  char v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  int v10;
  uint64_t v11;
  int v12;
  char v13;
  uint64_t v14;
  unint64_t v15;
  int v16;

  LOBYTE(v2) = *((_BYTE *)this + 28);
  if (!(_BYTE)v2)
  {
    v3 = 0;
    goto LABEL_24;
  }
  if ((*((_BYTE *)this + 28) & 1) == 0)
  {
    v3 = 0;
    if ((*((_BYTE *)this + 28) & 2) == 0)
      goto LABEL_24;
    goto LABEL_15;
  }
  v4 = *((_QWORD *)this + 1);
  v5 = *(unsigned __int8 *)(v4 + 23);
  v6 = v5;
  v7 = *(_QWORD *)(v4 + 8);
  if ((v5 & 0x80u) == 0)
    v8 = *(unsigned __int8 *)(v4 + 23);
  else
    v8 = v7;
  if (v8 >= 0x80)
  {
    v10 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v8);
    v5 = *(unsigned __int8 *)(v4 + 23);
    v7 = *(_QWORD *)(v4 + 8);
    v9 = v10 + 1;
    v2 = *((_DWORD *)this + 7);
    v6 = *(_BYTE *)(v4 + 23);
  }
  else
  {
    v9 = 2;
  }
  if (v6 < 0)
    v5 = v7;
  v3 = (v9 + v5);
  if ((v2 & 2) != 0)
  {
LABEL_15:
    v11 = *((_QWORD *)this + 2);
    v12 = *(unsigned __int8 *)(v11 + 23);
    v13 = v12;
    v14 = *(_QWORD *)(v11 + 8);
    if ((v12 & 0x80u) == 0)
      v15 = *(unsigned __int8 *)(v11 + 23);
    else
      v15 = v14;
    if (v15 >= 0x80)
    {
      v16 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v15);
      v12 = *(unsigned __int8 *)(v11 + 23);
      v14 = *(_QWORD *)(v11 + 8);
      v13 = *(_BYTE *)(v11 + 23);
    }
    else
    {
      v16 = 1;
    }
    if (v13 < 0)
      v12 = v14;
    v3 = (v3 + v16 + v12 + 1);
  }
LABEL_24:
  *((_DWORD *)this + 6) = v3;
  return v3;
}

void CLMicroLocationProto::RapportDevice::CheckTypeAndMergeFrom(CLMicroLocationProto::RapportDevice *this, const wireless_diagnostics::google::protobuf::MessageLite *lpsrc)
{
  uint64_t v4;
  uint64_t v5;

  CLMicroLocationProto::RapportDevice::MergeFrom(this, lpsrc);
}

void CLMicroLocationProto::RapportDevice::CopyFrom(CLMicroLocationProto::RapportDevice *this, const CLMicroLocationProto::RapportDevice *a2)
{
  if (a2 != this)
  {
    (*(void (**)(CLMicroLocationProto::RapportDevice *))(*(_QWORD *)this + 32))(this);
    CLMicroLocationProto::RapportDevice::MergeFrom(this, a2);
  }
}

uint64_t CLMicroLocationProto::RapportDevice::IsInitialized(CLMicroLocationProto::RapportDevice *this)
{
  return 1;
}

_QWORD *CLMicroLocationProto::RapportDevice::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CLMicroLocationProto.RapportDevice");
}

uint64_t CLMicroLocationProto::BleLeechedBeacons::GetCachedSize(CLMicroLocationProto::BleLeechedBeacons *this)
{
  return *((unsigned int *)this + 15);
}

uint64_t CLMicroLocationProto::WiFiRssi::GetCachedSize(CLMicroLocationProto::WiFiRssi *this)
{
  return *((unsigned int *)this + 9);
}

uint64_t CLMicroLocationProto::Direction::GetCachedSize(CLMicroLocationProto::Direction *this)
{
  return *((unsigned int *)this + 5);
}

uint64_t CLMicroLocationProto::UwbRange::GetCachedSize(CLMicroLocationProto::UwbRange *this)
{
  return *((unsigned int *)this + 13);
}

uint64_t CLMicroLocationProto::WiFiRange::GetCachedSize(CLMicroLocationProto::WiFiRange *this)
{
  return *((unsigned int *)this + 9);
}

uint64_t CLMicroLocationProto::ATVAirplayBluetoothRssi::GetCachedSize(CLMicroLocationProto::ATVAirplayBluetoothRssi *this)
{
  return *((unsigned int *)this + 10);
}

uint64_t CLMicroLocationProto::HomeKitBluetoothRssi::GetCachedSize(CLMicroLocationProto::HomeKitBluetoothRssi *this)
{
  return *((unsigned int *)this + 10);
}

uint64_t CLMicroLocationProto::Measurement::GetCachedSize(CLMicroLocationProto::Measurement *this)
{
  return *((unsigned int *)this + 17);
}

uint64_t CLMicroLocationProto::DeviceId::GetCachedSize(CLMicroLocationProto::DeviceId *this)
{
  return *((unsigned int *)this + 6);
}

uint64_t CLMicroLocationProto::FingerprintMeasurement::GetCachedSize(CLMicroLocationProto::FingerprintMeasurement *this)
{
  return *((unsigned int *)this + 8);
}

uint64_t CLMicroLocationProto::Fingerprint::GetCachedSize(CLMicroLocationProto::Fingerprint *this)
{
  return *((unsigned int *)this + 25);
}

uint64_t CLMicroLocationProto::ClusterRecordings::GetCachedSize(CLMicroLocationProto::ClusterRecordings *this)
{
  return *((unsigned int *)this + 10);
}

uint64_t CLMicroLocationProto::AnchorMetadata::GetCachedSize(CLMicroLocationProto::AnchorMetadata *this)
{
  return *((unsigned int *)this + 11);
}

uint64_t CLMicroLocationProto::AnchorAppearance::GetCachedSize(CLMicroLocationProto::AnchorAppearance *this)
{
  return *((unsigned int *)this + 9);
}

uint64_t CLMicroLocationProto::anchorAppearancesVector::GetCachedSize(CLMicroLocationProto::anchorAppearancesVector *this)
{
  return *((unsigned int *)this + 8);
}

uint64_t CLMicroLocationProto::AnchorValueStatistics::GetCachedSize(CLMicroLocationProto::AnchorValueStatistics *this)
{
  return *((unsigned int *)this + 8);
}

uint64_t CLMicroLocationProto::ClusterAnchorValueStatistics::GetCachedSize(CLMicroLocationProto::ClusterAnchorValueStatistics *this)
{
  return *((unsigned int *)this + 10);
}

uint64_t CLMicroLocationProto::ClusterAnchorValueStatisticsVector::GetCachedSize(CLMicroLocationProto::ClusterAnchorValueStatisticsVector *this)
{
  return *((unsigned int *)this + 8);
}

uint64_t CLMicroLocationProto::LocationSimilarityListElement::GetCachedSize(CLMicroLocationProto::LocationSimilarityListElement *this)
{
  return *((unsigned int *)this + 8);
}

uint64_t CLMicroLocationProto::LocationSimilarityListData::GetCachedSize(CLMicroLocationProto::LocationSimilarityListData *this)
{
  return *((unsigned int *)this + 18);
}

uint64_t CLMicroLocationProto::BlueAtlasData::GetCachedSize(CLMicroLocationProto::BlueAtlasData *this)
{
  return *((unsigned int *)this + 14);
}

uint64_t CLMicroLocationProto::Model::GetCachedSize(CLMicroLocationProto::Model *this)
{
  return *((unsigned int *)this + 49);
}

uint64_t CLMicroLocationProto::BundleIdFeatures::GetCachedSize(CLMicroLocationProto::BundleIdFeatures *this)
{
  return *((unsigned int *)this + 3);
}

uint64_t CLMicroLocationProto::ReceivedEventAction::GetCachedSize(CLMicroLocationProto::ReceivedEventAction *this)
{
  return *((unsigned int *)this + 10);
}

uint64_t CLMicroLocationProto::RecordingRequest::GetCachedSize(CLMicroLocationProto::RecordingRequest *this)
{
  return *((unsigned int *)this + 10);
}

uint64_t CLMicroLocationProto::AppLaunch::GetCachedSize(CLMicroLocationProto::AppLaunch *this)
{
  return *((unsigned int *)this + 9);
}

uint64_t CLMicroLocationProto::BacklightOn::GetCachedSize(CLMicroLocationProto::BacklightOn *this)
{
  return *((unsigned int *)this + 5);
}

uint64_t CLMicroLocationProto::BatteryChargerConnected::GetCachedSize(CLMicroLocationProto::BatteryChargerConnected *this)
{
  return *((unsigned int *)this + 3);
}

uint64_t CLMicroLocationProto::TruthLabelDonation::GetCachedSize(CLMicroLocationProto::TruthLabelDonation *this)
{
  return *((unsigned int *)this + 9);
}

uint64_t CLMicroLocationProto::ForcedRecording::GetCachedSize(CLMicroLocationProto::ForcedRecording *this)
{
  return *((unsigned int *)this + 3);
}

uint64_t CLMicroLocationProto::HomeKitAccessory::GetCachedSize(CLMicroLocationProto::HomeKitAccessory *this)
{
  return *((unsigned int *)this + 28);
}

uint64_t CLMicroLocationProto::HomeKitScene::GetCachedSize(CLMicroLocationProto::HomeKitScene *this)
{
  return *((unsigned int *)this + 20);
}

uint64_t CLMicroLocationProto::NowPlayingOutputDevice::GetCachedSize(CLMicroLocationProto::NowPlayingOutputDevice *this)
{
  return *((unsigned int *)this + 6);
}

uint64_t CLMicroLocationProto::NowPlaying::GetCachedSize(CLMicroLocationProto::NowPlaying *this)
{
  return *((unsigned int *)this + 16);
}

uint64_t CLMicroLocationProto::LearnModel::GetCachedSize(CLMicroLocationProto::LearnModel *this)
{
  return *((unsigned int *)this + 3);
}

uint64_t CLMicroLocationProto::LearnCompleted::GetCachedSize(CLMicroLocationProto::LearnCompleted *this)
{
  return *((unsigned int *)this + 3);
}

uint64_t CLMicroLocationProto::SensorsScanComplete::GetCachedSize(CLMicroLocationProto::SensorsScanComplete *this)
{
  return *((unsigned int *)this + 3);
}

uint64_t CLMicroLocationProto::StartSpectating::GetCachedSize(CLMicroLocationProto::StartSpectating *this)
{
  return *((unsigned int *)this + 3);
}

uint64_t CLMicroLocationProto::StopSpectating::GetCachedSize(CLMicroLocationProto::StopSpectating *this)
{
  return *((unsigned int *)this + 3);
}

uint64_t CLMicroLocationProto::ServiceCreate::GetCachedSize(CLMicroLocationProto::ServiceCreate *this)
{
  return *((unsigned int *)this + 7);
}

uint64_t CLMicroLocationProto::ServiceDelete::GetCachedSize(CLMicroLocationProto::ServiceDelete *this)
{
  return *((unsigned int *)this + 7);
}

uint64_t CLMicroLocationProto::ServiceConnect::GetCachedSize(CLMicroLocationProto::ServiceConnect *this)
{
  return *((unsigned int *)this + 7);
}

uint64_t CLMicroLocationProto::ServiceDisconnect::GetCachedSize(CLMicroLocationProto::ServiceDisconnect *this)
{
  return *((unsigned int *)this + 7);
}

uint64_t CLMicroLocationProto::ServiceStartUpdating::GetCachedSize(CLMicroLocationProto::ServiceStartUpdating *this)
{
  return *((unsigned int *)this + 8);
}

uint64_t CLMicroLocationProto::ServiceStopUpdating::GetCachedSize(CLMicroLocationProto::ServiceStopUpdating *this)
{
  return *((unsigned int *)this + 7);
}

uint64_t CLMicroLocationProto::RequestObservation::GetCachedSize(CLMicroLocationProto::RequestObservation *this)
{
  return *((unsigned int *)this + 11);
}

uint64_t CLMicroLocationProto::RequestPrediction::GetCachedSize(CLMicroLocationProto::RequestPrediction *this)
{
  return *((unsigned int *)this + 9);
}

uint64_t CLMicroLocationProto::MiloInit::GetCachedSize(CLMicroLocationProto::MiloInit *this)
{
  return *((unsigned int *)this + 5);
}

uint64_t CLMicroLocationProto::MotionEvent::GetCachedSize(CLMicroLocationProto::MotionEvent *this)
{
  return *((unsigned int *)this + 10);
}

uint64_t CLMicroLocationProto::LegacyThrottle::GetCachedSize(CLMicroLocationProto::LegacyThrottle *this)
{
  return *((unsigned int *)this + 5);
}

uint64_t CLMicroLocationProto::RetrievedLoi::GetCachedSize(CLMicroLocationProto::RetrievedLoi *this)
{
  return *((unsigned int *)this + 11);
}

uint64_t CLMicroLocationProto::ReceivedEvent::GetCachedSize(CLMicroLocationProto::ReceivedEvent *this)
{
  return *((unsigned int *)this + 72);
}

uint64_t CLMicroLocationProto::AssociatedAccessPointInfo::GetCachedSize(CLMicroLocationProto::AssociatedAccessPointInfo *this)
{
  return *((unsigned int *)this + 5);
}

uint64_t CLMicroLocationProto::RecordingEvent::GetCachedSize(CLMicroLocationProto::RecordingEvent *this)
{
  return *((unsigned int *)this + 34);
}

uint64_t CLMicroLocationProto::TriggerEvent::GetCachedSize(CLMicroLocationProto::TriggerEvent *this)
{
  return *((unsigned int *)this + 20);
}

uint64_t CLMicroLocationProto::LegacyClientStatusUpdate::GetCachedSize(CLMicroLocationProto::LegacyClientStatusUpdate *this)
{
  return *((unsigned int *)this + 5);
}

uint64_t CLMicroLocationProto::SpectatingMotionUpdate::GetCachedSize(CLMicroLocationProto::SpectatingMotionUpdate *this)
{
  return *((unsigned int *)this + 4);
}

uint64_t CLMicroLocationProto::EnabledStateUpdate::GetCachedSize(CLMicroLocationProto::EnabledStateUpdate *this)
{
  return *((unsigned int *)this + 5);
}

uint64_t CLMicroLocationProto::ScreenStateUpdate::GetCachedSize(CLMicroLocationProto::ScreenStateUpdate *this)
{
  return *((unsigned int *)this + 4);
}

uint64_t CLMicroLocationProto::CloudBackupExport::GetCachedSize(CLMicroLocationProto::CloudBackupExport *this)
{
  return *((unsigned int *)this + 3);
}

uint64_t CLMicroLocationProto::CloudBackupImport::GetCachedSize(CLMicroLocationProto::CloudBackupImport *this)
{
  return *((unsigned int *)this + 3);
}

uint64_t CLMicroLocationProto::DataMigration::GetCachedSize(CLMicroLocationProto::DataMigration *this)
{
  return *((unsigned int *)this + 3);
}

uint64_t CLMicroLocationProto::ChannelAndCount::GetCachedSize(CLMicroLocationProto::ChannelAndCount *this)
{
  return *((unsigned int *)this + 5);
}

uint64_t CLMicroLocationProto::WifiHistogram::GetCachedSize(CLMicroLocationProto::WifiHistogram *this)
{
  return *((unsigned int *)this + 9);
}

uint64_t CLMicroLocationProto::AnchorAppearanceConfiguration::GetCachedSize(CLMicroLocationProto::AnchorAppearanceConfiguration *this)
{
  return *((unsigned int *)this + 5);
}

uint64_t CLMicroLocationProto::AnchorValueStatisticsConfiguration::GetCachedSize(CLMicroLocationProto::AnchorValueStatisticsConfiguration *this)
{
  return *((unsigned int *)this + 7);
}

uint64_t CLMicroLocationProto::Configuration::GetCachedSize(CLMicroLocationProto::Configuration *this)
{
  return *((unsigned int *)this + 11);
}

uint64_t CLMicroLocationProto::RapportDevice::GetCachedSize(CLMicroLocationProto::RapportDevice *this)
{
  return *((unsigned int *)this + 6);
}

uint64_t wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Clear<wireless_diagnostics::google::protobuf::RepeatedPtrField<std::string>::TypeHandler>(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;

  if (*(int *)(result + 8) >= 1)
  {
    v1 = 0;
    do
    {
      v2 = *(_QWORD *)(*(_QWORD *)result + 8 * v1);
      if (*(char *)(v2 + 23) < 0)
      {
        **(_BYTE **)v2 = 0;
        *(_QWORD *)(v2 + 8) = 0;
      }
      else
      {
        *(_BYTE *)v2 = 0;
        *(_BYTE *)(v2 + 23) = 0;
      }
      ++v1;
    }
    while (v1 < *(int *)(result + 8));
  }
  *(_DWORD *)(result + 8) = 0;
  return result;
}

uint64_t wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Destroy<wireless_diagnostics::google::protobuf::RepeatedPtrField<CLMicroLocationProto::Measurement>::TypeHandler>(uint64_t *a1)
{
  int v2;
  uint64_t i;
  uint64_t v4;
  uint64_t result;

  v2 = *((_DWORD *)a1 + 3);
  if (v2 >= 1)
  {
    for (i = 0; i < v2; ++i)
    {
      v4 = *(_QWORD *)(*a1 + 8 * i);
      if (v4)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
        v2 = *((_DWORD *)a1 + 3);
      }
    }
  }
  result = *a1;
  if (*a1)
    JUMPOUT(0x2426A04BCLL);
  return result;
}

uint64_t wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Destroy<wireless_diagnostics::google::protobuf::RepeatedPtrField<std::string>::TypeHandler>(int *a1)
{
  uint64_t v2;
  uint64_t result;

  if (a1[3] >= 1)
  {
    v2 = 0;
    do
    {
      wireless_diagnostics::google::protobuf::internal::StringTypeHandlerBase::Delete();
      ++v2;
    }
    while (v2 < a1[3]);
  }
  result = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
    JUMPOUT(0x2426A04BCLL);
  return result;
}

void wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<wireless_diagnostics::google::protobuf::RepeatedPtrField<CLMicroLocationProto::Fingerprint>::TypeHandler>(int *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  const CLMicroLocationProto::Fingerprint *v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)a1);
  if (*(int *)(a2 + 8) >= 1)
  {
    v4 = 0;
    v5 = MEMORY[0x24BEDD958];
    do
    {
      v6 = *(const CLMicroLocationProto::Fingerprint **)(*(_QWORD *)a2 + 8 * v4);
      v7 = a1[3];
      v8 = a1[2];
      if ((int)v8 >= v7)
      {
        if (v7 == a1[4])
        {
          wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)a1);
          v7 = a1[3];
        }
        a1[3] = v7 + 1;
        v10 = operator new();
        *(_QWORD *)(v10 + 8) = 0;
        *(_QWORD *)(v10 + 16) = 0;
        *(_QWORD *)v10 = &off_2511D6D58;
        *(_DWORD *)(v10 + 24) = 0;
        *(_QWORD *)(v10 + 72) = 0;
        *(_QWORD *)(v10 + 80) = 0;
        *(_DWORD *)(v10 + 88) = 0;
        *(_QWORD *)(v10 + 32) = 0;
        *(_QWORD *)(v10 + 40) = 0;
        *(_QWORD *)(v10 + 48) = 0;
        *(_QWORD *)(v10 + 56) = v5;
        *(_QWORD *)(v10 + 64) = v5;
        *(_WORD *)(v10 + 96) = 0;
        *(_DWORD *)(v10 + 100) = 0;
        *(_DWORD *)(v10 + 104) = 0;
        v11 = *(_QWORD *)a1;
        v12 = a1[2];
        a1[2] = v12 + 1;
        *(_QWORD *)(v11 + 8 * v12) = v10;
      }
      else
      {
        v9 = *(_QWORD *)a1;
        a1[2] = v8 + 1;
        v10 = *(_QWORD *)(v9 + 8 * v8);
      }
      CLMicroLocationProto::Fingerprint::MergeFrom((CLMicroLocationProto::Fingerprint *)v10, v6);
      ++v4;
    }
    while (v4 < *(int *)(a2 + 8));
  }
}

void wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<wireless_diagnostics::google::protobuf::RepeatedPtrField<CLMicroLocationProto::AnchorMetadata>::TypeHandler>(int *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  const CLMicroLocationProto::AnchorMetadata *v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)a1);
  if (*(int *)(a2 + 8) >= 1)
  {
    v4 = 0;
    v5 = MEMORY[0x24BEDD958];
    do
    {
      v6 = *(const CLMicroLocationProto::AnchorMetadata **)(*(_QWORD *)a2 + 8 * v4);
      v7 = a1[3];
      v8 = a1[2];
      if ((int)v8 >= v7)
      {
        if (v7 == a1[4])
        {
          wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)a1);
          v7 = a1[3];
        }
        a1[3] = v7 + 1;
        v10 = operator new();
        *(_QWORD *)(v10 + 8) = 0;
        *(_QWORD *)(v10 + 16) = 0;
        *(_QWORD *)v10 = &off_2511D6E48;
        *(_DWORD *)(v10 + 24) = 1;
        *(_WORD *)(v10 + 28) = 0;
        *(_QWORD *)(v10 + 40) = 1;
        *(_QWORD *)(v10 + 32) = v5;
        *(_DWORD *)(v10 + 48) = 0;
        v11 = *(_QWORD *)a1;
        v12 = a1[2];
        a1[2] = v12 + 1;
        *(_QWORD *)(v11 + 8 * v12) = v10;
      }
      else
      {
        v9 = *(_QWORD *)a1;
        a1[2] = v8 + 1;
        v10 = *(_QWORD *)(v9 + 8 * v8);
      }
      CLMicroLocationProto::AnchorMetadata::MergeFrom((CLMicroLocationProto::AnchorMetadata *)v10, v6);
      ++v4;
    }
    while (v4 < *(int *)(a2 + 8));
  }
}

void OUTLINED_FUNCTION_0_2(const char *a1, const char *a2, uint64_t a3, const char *a4)
{
  __assert_rtn(a1, a2, 348, a4);
}

void sub_241ADD63C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

uint64_t ULDBUtils::insertEntries<CLMiLoHomeSlamAnalyticEventTable,ULHomeSlamAnalyticEventMO>(void *a1, uint64_t a2)
{
  id v3;
  void *v4;
  id v5;
  uint64_t v6;
  _QWORD v8[4];
  id v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  char v15;

  v3 = a1;
  v12 = 0;
  v13 = &v12;
  v14 = 0x2020000000;
  v15 = 0;
  objc_msgSend(v3, "managedObjectContext");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v8[0] = MEMORY[0x24BDAC760];
  v8[1] = 3221225472;
  v8[2] = ___ZN9ULDBUtils13insertEntriesI32CLMiLoHomeSlamAnalyticEventTable25ULHomeSlamAnalyticEventMOEEbP7ULStoreRKNSt3__16vectorINT_5EntryENS5_9allocatorIS8_EEEE_block_invoke;
  v8[3] = &unk_2511D22D0;
  v11 = a2;
  v5 = v3;
  v9 = v5;
  v10 = &v12;
  objc_msgSend(v4, "performBlockAndWait:", v8);

  v6 = *((unsigned __int8 *)v13 + 24);
  _Block_object_dispose(&v12, 8);

  return v6;
}

void sub_241ADD760(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, uint64_t a8, uint64_t a9, ...)
{
  void *v9;
  void *v10;
  va_list va;

  va_start(va, a9);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void ULDBUtils::fetchEntries<CLMiLoHomeSlamAnalyticEventTable,ULHomeSlamAnalyticEventMO>(void *a1@<X0>, void *a2@<X1>, void *a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  id v9;
  id v10;
  id v11;
  void *v12;
  id v13;
  id v14;
  id v15;
  uint64_t *v16;
  _QWORD v17[4];
  id v18;
  id v19;
  id v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  __n128 (*v26)(__n128 *, __n128 *);
  void (*v27)(uint64_t);
  void *v28;
  void *__p;
  void *v30;
  uint64_t v31;

  v9 = a1;
  v10 = a2;
  v11 = a3;
  v23 = 0;
  v24 = &v23;
  v25 = 0x4812000000;
  v26 = __Block_byref_object_copy__11;
  v27 = __Block_byref_object_dispose__11;
  v28 = &unk_241BEBD1D;
  __p = 0;
  v30 = 0;
  v31 = 0;
  objc_msgSend(v9, "managedObjectContext");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  v17[0] = MEMORY[0x24BDAC760];
  v17[1] = 3221225472;
  v17[2] = ___ZN9ULDBUtils12fetchEntriesI32CLMiLoHomeSlamAnalyticEventTable25ULHomeSlamAnalyticEventMOEENSt3__16vectorINT_5EntryENS3_9allocatorIS6_EEEEP7ULStoreP7NSArrayIP11NSPredicateEPSC_IP16NSSortDescriptorEm_block_invoke;
  v17[3] = &unk_2511D22F8;
  v13 = v10;
  v18 = v13;
  v14 = v11;
  v19 = v14;
  v22 = a4;
  v15 = v9;
  v20 = v15;
  v21 = &v23;
  objc_msgSend(v12, "performBlockAndWait:", v17);

  v16 = v24;
  a5[1] = 0;
  a5[2] = 0;
  *a5 = 0;
  std::vector<CLMiLoHomeSlamAnalyticEventTable::Entry>::__init_with_size[abi:ne180100]<CLMiLoHomeSlamAnalyticEventTable::Entry*,CLMiLoHomeSlamAnalyticEventTable::Entry*>(a5, (const void *)v16[6], v16[7], (v16[7] - v16[6]) >> 4);

  _Block_object_dispose(&v23, 8);
  if (__p)
  {
    v30 = __p;
    operator delete(__p);
  }

}

void sub_241ADD914(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14, void *a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25)
{
  void *v25;
  void *v26;
  void *v27;

  _Block_object_dispose(&a18, 8);
  if (__p)
  {
    a25 = (uint64_t)__p;
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void ULDBUtils::fetchAllWithLimit<CLMiLoHomeSlamAnalyticEventTable,ULHomeSlamAnalyticEventMO>(void *a1@<X0>, unsigned int a2@<W1>, _QWORD *a3@<X8>)
{
  id v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  _QWORD v10[2];

  v10[1] = *MEMORY[0x24BDAC8D0];
  v5 = a1;
  v6 = (void *)MEMORY[0x24BDD17C0];
  objc_msgSend((id)objc_opt_class(), "defaultSortProperty");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "sortDescriptorWithKey:ascending:", v7, 0);
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  v10[0] = v8;
  objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", v10, 1);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  ULDBUtils::fetchEntries<CLMiLoHomeSlamAnalyticEventTable,ULHomeSlamAnalyticEventMO>(v5, 0, v9, a2, a3);

}

void sub_241ADDA78(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_241ADDC20(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_241ADDE80(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_241ADDFF4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void ___ZN9ULDBUtils13insertEntriesI32CLMiLoHomeSlamAnalyticEventTable25ULHomeSlamAnalyticEventMOEEbP7ULStoreRKNSt3__16vectorINT_5EntryENS5_9allocatorIS8_EEEE_block_invoke(uint64_t a1)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;
  NSObject *v7;
  void *v8;
  void *v9;
  NSObject *v10;
  void *v11;
  void *v12;
  void *v13;
  int v14;
  int v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  void *v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  v2 = *(uint64_t **)(a1 + 48);
  v3 = *v2;
  v4 = v2[1];
  if (*v2 == v4)
  {
LABEL_4:
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = objc_msgSend(*(id *)(a1 + 32), "commitChangesToStore");
    objc_msgSend(*(id *)(a1 + 32), "deleteOldestRecordsIfFull");
  }
  else
  {
    while (1)
    {
      objc_msgSend(*(id *)(a1 + 32), "managedObjectContext");
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      +[ULHomeSlamAnalyticEventMO createFromEntry:inManagedObjectContext:](ULHomeSlamAnalyticEventMO, "createFromEntry:inManagedObjectContext:", v3, v5);
      v6 = (void *)objc_claimAutoreleasedReturnValue();

      if (!v6)
        break;

      v3 += 16;
      if (v3 == v4)
        goto LABEL_4;
    }
    if (onceToken_MicroLocation_Default != -1)
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_65);
    v7 = (id)logObject_MicroLocation_Default;
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      +[ULHomeSlamAnalyticEventMO entity](ULHomeSlamAnalyticEventMO, "entity");
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v8, "name");
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      v14 = 68289283;
      v15 = 0;
      v16 = 2082;
      v17 = "";
      v18 = 2113;
      v19 = v9;
      _os_log_impl(&dword_2419D9000, v7, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"Failed to create entry from MO\", \"MO\":%{private, location:escape_only}@}", (uint8_t *)&v14, 0x1Cu);

    }
    if (onceToken_MicroLocation_Default != -1)
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_65);
    v10 = (id)logObject_MicroLocation_Default;
    if (os_signpost_enabled(v10))
    {
      +[ULHomeSlamAnalyticEventMO entity](ULHomeSlamAnalyticEventMO, "entity");
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v11, "name");
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      v14 = 68289283;
      v15 = 0;
      v16 = 2082;
      v17 = "";
      v18 = 2113;
      v19 = v12;
      _os_signpost_emit_with_name_impl(&dword_2419D9000, v10, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Failed to create entry from MO", "{\"msg%{public}.0s\":\"Failed to create entry from MO\", \"MO\":%{private, location:escape_only}@}", (uint8_t *)&v14, 0x1Cu);

    }
    objc_msgSend(*(id *)(a1 + 32), "managedObjectContext");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v13, "reset");

  }
}

void sub_241ADE2D0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void ___ZL45_CLLogObjectForCategory_MicroLocation_Defaultv_block_invoke_55()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.MicroLocation", "MicroLocation");
  v1 = (void *)logObject_MicroLocation_Default;
  logObject_MicroLocation_Default = (uint64_t)v0;

}

__n128 __Block_byref_object_copy__11(__n128 *a1, __n128 *a2)
{
  __n128 result;

  a1[3].n128_u64[0] = 0;
  a1[3].n128_u64[1] = 0;
  a1[4].n128_u64[0] = 0;
  result = a2[3];
  a1[3] = result;
  a1[4].n128_u64[0] = a2[4].n128_u64[0];
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = 0;
  a2[4].n128_u64[0] = 0;
  return result;
}

void __Block_byref_object_dispose__11(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(_QWORD *)(a1 + 56) = v2;
    operator delete(v2);
  }
}

void ___ZN9ULDBUtils12fetchEntriesI32CLMiLoHomeSlamAnalyticEventTable25ULHomeSlamAnalyticEventMOEENSt3__16vectorINT_5EntryENS3_9allocatorIS6_EEEEP7ULStoreP7NSArrayIP11NSPredicateEPSC_IP16NSSortDescriptorEm_block_invoke(uint64_t a1)
{
  void *v2;
  objc_class *v3;
  void *v4;
  void *v5;
  _QWORD *v6;
  void *v7;
  void *v8;
  __int128 v9;
  uint64_t v10;

  v2 = *(void **)(a1 + 48);
  v3 = (objc_class *)objc_opt_class();
  NSStringFromClass(v3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "fetchManagedObjectsWithEntityName:byAndPredicates:sortDescriptors:andLimit:", v4, *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 64));
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  ULDBUtils::convertManagedObjectsToEntries<CLMiLoHomeSlamAnalyticEventTable,ULHomeSlamAnalyticEventMO>(v5, (uint64_t)&v9);
  v6 = *(_QWORD **)(*(_QWORD *)(a1 + 56) + 8);
  v7 = (void *)v6[6];
  if (v7)
  {
    v6[7] = v7;
    operator delete(v7);
    v6[6] = 0;
    v6[7] = 0;
    v6[8] = 0;
  }
  *((_OWORD *)v6 + 3) = v9;
  v6[8] = v10;
  objc_msgSend(*(id *)(a1 + 48), "managedObjectContext");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "reset");

}

void sub_241ADE454(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void ULDBUtils::convertManagedObjectsToEntries<CLMiLoHomeSlamAnalyticEventTable,ULHomeSlamAnalyticEventMO>(void *a1@<X0>, uint64_t a2@<X8>)
{
  id v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  id v8;
  void *v9;
  unint64_t v10;
  _OWORD *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  uint64_t v21;
  __int16 v22;
  _OWORD *v23;
  NSObject *v24;
  void *v25;
  void *v26;
  NSObject *v27;
  void *v28;
  void *v29;
  id v30;
  __int128 v31;
  char v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  uint8_t buf[4];
  int v38;
  __int16 v39;
  const char *v40;
  __int16 v41;
  void *v42;
  _BYTE v43[128];
  uint64_t v44;

  v44 = *MEMORY[0x24BDAC8D0];
  v3 = a1;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  std::vector<CLMiLoHomeSlamAnalyticEventTable::Entry>::reserve((char **)a2, objc_msgSend(v3, "count"));
  v35 = 0u;
  v36 = 0u;
  v33 = 0u;
  v34 = 0u;
  v4 = v3;
  v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v33, v43, 16);
  if (v5)
  {
    v30 = v3;
    v6 = *(_QWORD *)v34;
    while (2)
    {
      for (i = 0; i != v5; ++i)
      {
        if (*(_QWORD *)v34 != v6)
          objc_enumerationMutation(v4);
        v8 = *(id *)(*((_QWORD *)&v33 + 1) + 8 * i);
        v9 = v8;
        if (!v8 || (objc_msgSend(v8, "convertToEntry", v30), !v32))
        {
          if (onceToken_MicroLocation_Default != -1)
            dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_65);
          v24 = (id)logObject_MicroLocation_Default;
          if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
          {
            objc_msgSend(v9, "entity");
            v25 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v25, "name");
            v26 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 68289283;
            v38 = 0;
            v39 = 2082;
            v40 = "";
            v41 = 2113;
            v42 = v26;
            _os_log_impl(&dword_2419D9000, v24, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"Failed to convert MO to entry\", \"MO\":%{private, location:escape_only}@}", buf, 0x1Cu);

          }
          if (onceToken_MicroLocation_Default != -1)
            dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_65);
          v27 = (id)logObject_MicroLocation_Default;
          if (os_signpost_enabled(v27))
          {
            objc_msgSend(v9, "entity");
            v28 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v28, "name");
            v29 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 68289283;
            v38 = 0;
            v39 = 2082;
            v40 = "";
            v41 = 2113;
            v42 = v29;
            _os_signpost_emit_with_name_impl(&dword_2419D9000, v27, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Failed to convert MO to entry", "{\"msg%{public}.0s\":\"Failed to convert MO to entry\", \"MO\":%{private, location:escape_only}@}", buf, 0x1Cu);

          }
          *(_QWORD *)(a2 + 8) = *(_QWORD *)a2;
          goto LABEL_38;
        }
        v11 = *(_OWORD **)(a2 + 8);
        v10 = *(_QWORD *)(a2 + 16);
        if ((unint64_t)v11 >= v10)
        {
          v12 = ((uint64_t)v11 - *(_QWORD *)a2) >> 4;
          v13 = v12 + 1;
          if ((unint64_t)(v12 + 1) >> 60)
            std::vector<CLMicroLocationProto::ConfidenceReason>::__throw_length_error[abi:ne180100]();
          v14 = v10 - *(_QWORD *)a2;
          if (v14 >> 3 > v13)
            v13 = v14 >> 3;
          if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF0)
            v15 = 0xFFFFFFFFFFFFFFFLL;
          else
            v15 = v13;
          if (v15)
            v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<boost::uuids::uuid>>(a2 + 16, v15);
          else
            v16 = 0;
          v17 = &v16[16 * v12];
          *(_OWORD *)v17 = v31;
          v19 = *(char **)a2;
          v18 = *(char **)(a2 + 8);
          v20 = v17;
          if (v18 != *(char **)a2)
          {
            do
            {
              v21 = *((_QWORD *)v18 - 2);
              v18 -= 16;
              v22 = *((_WORD *)v18 + 4);
              *((_QWORD *)v20 - 2) = v21;
              v20 -= 16;
              *((_WORD *)v20 + 4) = v22;
            }
            while (v18 != v19);
            v18 = *(char **)a2;
          }
          v23 = v17 + 16;
          *(_QWORD *)a2 = v20;
          *(_QWORD *)(a2 + 8) = v17 + 16;
          *(_QWORD *)(a2 + 16) = &v16[16 * v15];
          if (v18)
            operator delete(v18);
          *(_QWORD *)(a2 + 8) = v23;
        }
        else
        {
          *v11 = v31;
          *(_QWORD *)(a2 + 8) = v11 + 1;
        }

      }
      v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v33, v43, 16);
      if (v5)
        continue;
      break;
    }
  }

LABEL_38:
}

void sub_241ADE840(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  uint64_t v9;
  void *v10;
  void *v12;

  v12 = *(void **)v9;
  if (*(_QWORD *)v9)
  {
    *(_QWORD *)(v9 + 8) = v12;
    operator delete(v12);
  }

  _Unwind_Resume(a1);
}

void std::vector<CLMiLoHomeSlamAnalyticEventTable::Entry>::reserve(char **a1, unint64_t a2)
{
  uint64_t v3;
  char *v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;
  __int16 v14;

  v4 = a1[2];
  v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - *a1) >> 4)
  {
    if (a2 >> 60)
      std::vector<CLMicroLocationProto::ConfidenceReason>::__throw_length_error[abi:ne180100]();
    v5 = a1[1] - *a1;
    v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<boost::uuids::uuid>>(v3, a2);
    v7 = &v6[v5];
    v9 = &v6[16 * v8];
    v11 = *a1;
    v10 = a1[1];
    v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        v13 = *((_QWORD *)v10 - 2);
        v10 -= 16;
        v14 = *((_WORD *)v10 + 4);
        *((_QWORD *)v12 - 2) = v13;
        v12 -= 16;
        *((_WORD *)v12 + 4) = v14;
      }
      while (v10 != v11);
      v10 = *a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
      operator delete(v10);
  }
}

uint64_t CLMicroLocationBinaryRoiNullSpaceAlgorithm::localize@<X0>(CLMicroLocationModel *this@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, const CLMicroLocationLocalizationSettings *a4@<X4>, char **a5@<X8>)
{
  _QWORD *v10;
  _QWORD *i;
  uint64_t **v12;
  uint64_t v13;
  int v14;
  char *v15;
  uint64_t v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  __int128 v21;
  double v22;
  _QWORD *v23;
  long double v24;
  uint64_t *j;
  char *v27;
  uint64_t **v28;
  CLMicroLocationAlgorithms *v29;
  NSDictionary *v30;
  double *k;
  double v32;
  NSObject *v33;
  _OWORD *v34;
  void *p_p;
  uint64_t v36;
  uint64_t v37;
  double *v38;
  double v39;
  double *v40;
  double v41;
  uint64_t v43;
  uint64_t v44;
  double v45;
  double v46;
  char *v47;
  char *v48;
  char *v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t v53;
  char *v54;
  uint64_t v55;
  char *v56;
  char *v57;
  char *v58;
  char *v59;
  __int128 v60;
  uint64_t v61;
  int v63;
  void *__p;
  __int128 v65;
  uint64_t v66;
  __int128 v67;
  __int128 v68;
  int v69;
  _BYTE v70[16];
  double *v71;
  _OWORD v72[2];
  int v73;
  _BYTE v74[16];
  _QWORD *v75;
  __int128 v76;
  __int128 v77;
  int v78;
  uint8_t buf[8];
  __int16 v80;
  const char *v81;
  __int16 v82;
  void *v83;
  __int16 v84;
  uint64_t v85;
  __int16 v86;
  double v87;
  __int16 v88;
  uint64_t v89;
  uint64_t v90;

  v90 = *MEMORY[0x24BDAC8D0];
  if (!CLMicroLocationModel::isValid(this))
  {
    CLMicroLocationBinaryRoiNullSpaceAlgorithm::localize();
    goto LABEL_67;
  }
  if (!*(_BYTE *)(a3 + 32))
  {
    CLMicroLocationBinaryRoiNullSpaceAlgorithm::localize();
LABEL_67:
    __break(1u);
  }
  v76 = 0u;
  v77 = 0u;
  v78 = 1065353216;
  v10 = (_QWORD *)*((_QWORD *)this + 41);
  for (i = (_QWORD *)*((_QWORD *)this + 42); v10 != i; v10 += 4)
  {
    *(_QWORD *)buf = v10 + 2;
    v12 = (uint64_t **)std::__hash_table<std::__hash_value_type<boost::uuids::uuid,std::multiset<double>>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::multiset<double>>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::multiset<double>>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,std::multiset<double>>>>::__emplace_unique_key_args<boost::uuids::uuid,std::piecewise_construct_t const&,std::tuple<boost::uuids::uuid const&>,std::tuple<>>((uint64_t)&v76, v10 + 2, (uint64_t)&std::piecewise_construct, (_OWORD **)buf);
    v13 = *(_QWORD *)(a3 + 24);
    if (!v13)
      std::__throw_bad_function_call[abi:ne180100]();
    *(_QWORD *)buf = (*(double (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v13 + 48))(v13, *v10, a2);
    std::__tree<double>::__emplace_multi<double>(v12 + 4, (double *)buf);
  }
  CLMicroLocationModel::getIdentifiers(this, (uint64_t)v74);
  v14 = *(_DWORD *)(a2 + 160);
  *a5 = 0;
  a5[1] = 0;
  a5[2] = 0;
  *((_DWORD *)a5 + 6) = 3;
  *((_BYTE *)a5 + 80) = 0;
  a5[5] = 0;
  a5[6] = 0;
  a5[4] = 0;
  *((_BYTE *)a5 + 56) = 0;
  v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CLMicroLocationResultInternal>>((uint64_t)(a5 + 2), 1uLL);
  v17 = &v15[32 * v16];
  *(_QWORD *)v15 = 0;
  *((_QWORD *)v15 + 1) = 0;
  *((_QWORD *)v15 + 2) = 0;
  v63 = v14;
  *((_DWORD *)v15 + 6) = v14;
  v18 = v15 + 32;
  v20 = *a5;
  v19 = a5[1];
  if (v19 != *a5)
  {
    do
    {
      v21 = *((_OWORD *)v19 - 2);
      *(_OWORD *)(v15 - 20) = *(_OWORD *)(v19 - 20);
      *((_OWORD *)v15 - 2) = v21;
      v15 -= 32;
      v19 -= 32;
    }
    while (v19 != v20);
    v19 = *a5;
  }
  *a5 = v15;
  a5[1] = v18;
  a5[2] = v17;
  if (v19)
    operator delete(v19);
  a5[1] = v18;
  CLMicroLocationBinaryRoiNullSpaceAlgorithm::getAdjustmentPowerForBinaryRoiDetectionThreshold((CLMicroLocationBinaryRoiNullSpaceAlgorithm *)v15, a4);
  v23 = v75;
  if (v75)
  {
    v24 = v22;
    do
    {
      if ((v23[2] & v23[3]) != -1)
      {
        memset(v72, 0, sizeof(v72));
        v73 = 1065353216;
        for (j = (uint64_t *)v77; j; j = (uint64_t *)*j)
        {
          if (j[2] == v23[2] && j[3] == v23[3])
          {
            *(_QWORD *)buf = j + 2;
            v28 = (uint64_t **)std::__hash_table<std::__hash_value_type<boost::uuids::uuid,std::multiset<double>>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::multiset<double>>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::multiset<double>>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,std::multiset<double>>>>::__emplace_unique_key_args<boost::uuids::uuid,std::piecewise_construct_t const&,std::tuple<boost::uuids::uuid const&>,std::tuple<>>((uint64_t)v72, j + 2, (uint64_t)&std::piecewise_construct, (_OWORD **)buf);
            if (j != (uint64_t *)v28)
              std::__tree<double>::__assign_multi<std::__tree_const_iterator<double,std::__tree_node<double,void *> *,long>>(v28 + 4, (_QWORD *)j[4], j + 5);
          }
          else
          {
            *(_QWORD *)buf = CL::kNegMicroLocation;
            v27 = (char *)std::__hash_table<std::__hash_value_type<boost::uuids::uuid,std::multiset<double>>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::multiset<double>>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::multiset<double>>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,std::multiset<double>>>>::__emplace_unique_key_args<boost::uuids::uuid,std::piecewise_construct_t const&,std::tuple<boost::uuids::uuid const&>,std::tuple<>>((uint64_t)v72, CL::kNegMicroLocation, (uint64_t)&std::piecewise_construct, (_OWORD **)buf);
            std::multiset<double>::insert[abi:ne180100]<std::__tree_const_iterator<double,std::__tree_node<double,void *> *,long>>(v27 + 32, (_QWORD *)j[4], j + 5);
          }
        }
        CLMicroLocationBinaryRoiNullSpaceAlgorithm::createReducedDistancesMap((CLMacAddress *)a4, (unint64_t)v72, (uint64_t)v70);
        v67 = 0u;
        v68 = 0u;
        v69 = 1065353216;
        CLMicroLocationLocalizationSettings::getKernelFuncSettings((id *)a4);
        v29 = (CLMicroLocationAlgorithms *)objc_claimAutoreleasedReturnValue();
        CLMicroLocationAlgorithms::createKernelFunction(v29, v30);

        for (k = v71; k; k = *(double **)k)
        {
          v32 = (*(double (**)(uint64_t, double))(*(_QWORD *)v66 + 24))(v66, k[4]);
          if (v32 >= 0.0)
          {
            *(_QWORD *)buf = k + 2;
            *((double *)std::__hash_table<std::__hash_value_type<boost::uuids::uuid,double>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,double>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,double>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,double>>>::__emplace_unique_key_args<boost::uuids::uuid,std::piecewise_construct_t const&,std::tuple<boost::uuids::uuid const&>,std::tuple<>>((uint64_t)&v67, (_QWORD *)k + 2, (uint64_t)&std::piecewise_construct, (_OWORD **)buf)+ 4) = v32 / (1.0 - v32);
            if (onceToken_MicroLocation_Default != -1)
              dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_66);
            v33 = (id)logObject_MicroLocation_Default;
            if (os_log_type_enabled(v33, OS_LOG_TYPE_DEBUG))
            {
              v34 = operator new(0x28uLL);
              __p = v34;
              v65 = xmmword_241BB2320;
              *v34 = 0u;
              v34[1] = 0u;
              *(_QWORD *)((char *)v34 + 29) = 0;
              boost::uuids::to_chars<char *>((uint64_t)(k + 2), v34);
              p_p = &__p;
              if (v65 < 0)
                p_p = __p;
              v37 = *((_QWORD *)k + 4);
              v36 = *((_QWORD *)k + 5);
              *(_QWORD *)buf = 68290051;
              v80 = 2082;
              v81 = "";
              v82 = 2081;
              v83 = p_p;
              v84 = 2049;
              v85 = v36;
              v86 = 2049;
              v87 = v32;
              v88 = 2049;
              v89 = v37;
              _os_log_impl(&dword_2419D9000, v33, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"nullspace\", \"identifier\":%{private, location:escape_only}s, \"weight\":\"%{private}f\", \"phat\":\"%{private}f\", \"reducedDistance\":\"%{private}f\"}", buf, 0x3Au);
              if (SHIBYTE(v65) < 0)
                operator delete(__p);
            }

          }
        }
        v38 = (double *)v68;
        if ((_QWORD)v68)
        {
          v39 = 1.0;
          v40 = (double *)v68;
          do
          {
            v39 = v39 + v40[4];
            v40 = *(double **)v40;
          }
          while (v40);
          v41 = 1.0 / v39;
          do
          {
            if (*((_QWORD *)v38 + 2) == v23[2] && *((_QWORD *)v38 + 3) == v23[3])
            {
              v44 = *((_QWORD *)v38 + 2);
              v43 = *((_QWORD *)v38 + 3);
              v45 = pow(v41 * v38[4], v24);
              v46 = v45;
              v47 = a5[1];
              v48 = a5[2];
              if (v47 >= v48)
              {
                v50 = (v47 - *a5) >> 5;
                v51 = v50 + 1;
                if ((unint64_t)(v50 + 1) >> 59)
                  std::vector<CLMicroLocationProto::ConfidenceReason>::__throw_length_error[abi:ne180100]();
                v52 = v48 - *a5;
                if (v52 >> 4 > v51)
                  v51 = v52 >> 4;
                if ((unint64_t)v52 >= 0x7FFFFFFFFFFFFFE0)
                  v53 = 0x7FFFFFFFFFFFFFFLL;
                else
                  v53 = v51;
                v54 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CLMicroLocationResultInternal>>((uint64_t)(a5 + 2), v53);
                v56 = &v54[32 * v50];
                *(_QWORD *)v56 = v44;
                *((_QWORD *)v56 + 1) = v43;
                *((double *)v56 + 2) = v46;
                *((_DWORD *)v56 + 6) = v63;
                v58 = *a5;
                v57 = a5[1];
                v59 = v56;
                if (v57 != *a5)
                {
                  do
                  {
                    v60 = *((_OWORD *)v57 - 2);
                    *(_OWORD *)(v59 - 20) = *(_OWORD *)(v57 - 20);
                    *((_OWORD *)v59 - 2) = v60;
                    v59 -= 32;
                    v57 -= 32;
                  }
                  while (v57 != v58);
                  v57 = *a5;
                }
                v49 = v56 + 32;
                *a5 = v59;
                a5[1] = v56 + 32;
                a5[2] = &v54[32 * v55];
                if (v57)
                  operator delete(v57);
              }
              else
              {
                *(_QWORD *)v47 = v44;
                *((_QWORD *)v47 + 1) = v43;
                *((double *)v47 + 2) = v45;
                v49 = v47 + 32;
                *((_DWORD *)v47 + 6) = v63;
              }
              a5[1] = v49;
            }
            v38 = *(double **)v38;
          }
          while (v38);
        }
        v61 = v66;
        v66 = 0;
        if (v61)
          (*(void (**)(uint64_t))(*(_QWORD *)v61 + 8))(v61);
        std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>>>::~__hash_table((uint64_t)&v67);
        std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>>>::~__hash_table((uint64_t)v70);
        std::__hash_table<std::__hash_value_type<boost::uuids::uuid,std::multiset<double>>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::multiset<double>>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::multiset<double>>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,std::multiset<double>>>>::~__hash_table((uint64_t)v72);
      }
      v23 = (_QWORD *)*v23;
    }
    while (v23);
  }
  std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>>>::~__hash_table((uint64_t)v74);
  return std::__hash_table<std::__hash_value_type<boost::uuids::uuid,std::multiset<double>>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::multiset<double>>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::multiset<double>>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,std::multiset<double>>>>::~__hash_table((uint64_t)&v76);
}

void sub_241ADEF60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41)
{
  CLMicroLocationAlgorithms::LocalizerResults *v41;

  CLMicroLocationAlgorithms::LocalizerResults::~LocalizerResults(v41);
  std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>>>::~__hash_table((uint64_t)&a36);
  std::__hash_table<std::__hash_value_type<boost::uuids::uuid,std::multiset<double>>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::multiset<double>>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::multiset<double>>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,std::multiset<double>>>>::~__hash_table((uint64_t)&a41);
  _Unwind_Resume(a1);
}

void CLMicroLocationBinaryRoiNullSpaceAlgorithm::getAdjustmentPowerForBinaryRoiDetectionThreshold(CLMicroLocationBinaryRoiNullSpaceAlgorithm *this, const CLMicroLocationLocalizationSettings *a2)
{
  double v2;
  char v3;
  int AdjustmentPowerForBinaryRoiDetectionThreshold;
  int v6;
  CLMacAddress *v7;

  v2 = COERCE_DOUBLE(CLMicroLocationLocalizationSettings::getDetectionThresholdForBinaryROI(a2));
  if (v3)
  {
    if (v2 > 0.0 && v2 < 1.0)
    {
      log(v2);
    }
    else
    {
      AdjustmentPowerForBinaryRoiDetectionThreshold = CLMicroLocationBinaryRoiNullSpaceAlgorithm::getAdjustmentPowerForBinaryRoiDetectionThreshold();
      CLMicroLocationBinaryRoiNullSpaceAlgorithm::createReducedDistancesMap(AdjustmentPowerForBinaryRoiDetectionThreshold, v6, v7);
    }
  }
}

uint64_t *CLMicroLocationBinaryRoiNullSpaceAlgorithm::createReducedDistancesMap@<X0>(CLMacAddress *this@<X2>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t *v6;
  int v7;
  double v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  int v12;
  int v13;
  double v14;
  uint64_t *result;
  double v16;
  uint64_t *i;
  double v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  _Unwind_Exception *ReducedDistancesMap;
  _OWORD *v23;

  v6 = *(uint64_t **)(a2 + 16);
  if (v6)
  {
    v7 = 0;
    do
    {
      v7 += *((_DWORD *)v6 + 12);
      v6 = (uint64_t *)*v6;
    }
    while (v6);
    v8 = (double)v7;
  }
  else
  {
    v8 = 0.0;
  }
  v9 = CLMacAddress::newFromUint64(this, a2);
  v10 = *(uint64_t **)(v9 + 8);
  if (v10)
  {
    v3 = v9;
    v11 = *(uint64_t **)(v9 + 8);
    do
    {
      v12 = *((_DWORD *)v11 + 8);
      if (v12 <= 2)
      {
        if (v12 == 2)
          goto LABEL_15;
        ++v11;
      }
      v11 = (uint64_t *)*v11;
    }
    while (v11);
  }
  CLMicroLocationBinaryRoiNullSpaceAlgorithm::createReducedDistancesMap();
  do
  {
    ++v10;
    do
    {
      v10 = (uint64_t *)*v10;
      if (!v10)
      {
        ReducedDistancesMap = (_Unwind_Exception *)CLMicroLocationBinaryRoiNullSpaceAlgorithm::createReducedDistancesMap();
        std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>>>::~__hash_table(a3);
        _Unwind_Resume(ReducedDistancesMap);
      }
LABEL_15:
      v13 = *((_DWORD *)v10 + 8);
    }
    while (v13 > 3);
  }
  while (v13 != 3);
  LODWORD(v23) = 2;
  v14 = *(double *)std::map<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,double>::at(v3, (int *)&v23);
  LODWORD(v23) = 3;
  result = std::map<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,double>::at(v3, (int *)&v23);
  v16 = *(double *)result;
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_DWORD *)(a3 + 32) = 1065353216;
  for (i = *(uint64_t **)(a2 + 16); i; i = (uint64_t *)*i)
  {
    if (~*((_OWORD *)i + 1) == 0)
      v18 = v16;
    else
      v18 = v14;
    CLReducerFunction<std::multiset<double>,double>::parametrizedPercentileSorted((_QWORD **)i + 4, v18);
    v20 = v19;
    v21 = i[6];
    v23 = i + 2;
    result = std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationNullSpaceAlgorithm::ReducedDistanceAndWeight>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationNullSpaceAlgorithm::ReducedDistanceAndWeight>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationNullSpaceAlgorithm::ReducedDistanceAndWeight>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationNullSpaceAlgorithm::ReducedDistanceAndWeight>>>::__emplace_unique_key_args<boost::uuids::uuid,std::piecewise_construct_t const&,std::tuple<boost::uuids::uuid const&>,std::tuple<>>(a3, i + 2, (uint64_t)&std::piecewise_construct, &v23);
    result[4] = v20;
    *((double *)result + 5) = (double)v21 / v8;
  }
  return result;
}

_QWORD **CLReducerFunction<std::multiset<double>,double>::parametrizedPercentileSorted(_QWORD **result, double a2)
{
  _QWORD *v2;
  BOOL v4;
  _QWORD *v5;
  _QWORD *v6;
  double v7;
  double v8;
  double v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;

  v2 = result[2];
  if (!v2)
    CLReducerFunction<std::multiset<double>,double>::parametrizedPercentileSorted();
  if (a2 < 0.0 || a2 > 1.0)
    CLReducerFunction<std::multiset<double>,double>::parametrizedPercentileSorted();
  v4 = a2 == 0.0 || v2 == (_QWORD *)1;
  if (!v4)
  {
    if (a2 == 1.0)
    {
      v6 = result[1];
      ++result;
      v5 = v6;
      if (v6)
      {
        do
          v5 = (_QWORD *)v5[1];
        while (v5);
      }
      else
      {
        do
        {
          v4 = *result[2] == (_QWORD)result;
          result = (_QWORD **)result[2];
        }
        while (v4);
      }
    }
    else
    {
      v7 = (double)((unint64_t)v2 - 1);
      v8 = v7 * a2;
      if (v8 < 0.0)
        v8 = 0.0;
      if (v8 <= v7)
        v9 = v8;
      else
        v9 = (double)((unint64_t)v2 - 1);
      v10 = llround(floor(v9));
      if (v10 < 0 || v10 > (int)v2 - 2)
        CLReducerFunction<std::multiset<double>,double>::parametrizedPercentileSorted();
      v13 = *result;
      result = std::__advance[abi:ne180100]<std::__tree_const_iterator<double,std::__tree_node<double,void *> *,long>>(&v13, v10);
      v11 = v13;
      v12 = (_QWORD *)v13[1];
      if (v12)
      {
        do
          v12 = (_QWORD *)*v12;
        while (v12);
      }
      else
      {
        do
        {
          v4 = *(_QWORD *)v11[2] == (_QWORD)v11;
          v11 = (_QWORD *)v11[2];
        }
        while (!v4);
      }
    }
  }
  return result;
}

void CLMicroLocationBinaryRoiNullSpaceAlgorithm::~CLMicroLocationBinaryRoiNullSpaceAlgorithm(CLMicroLocationBinaryRoiNullSpaceAlgorithm *this)
{
  JUMPOUT(0x2426A04D4);
}

void ___ZL45_CLLogObjectForCategory_MicroLocation_Defaultv_block_invoke_56()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.MicroLocation", "MicroLocation");
  v1 = (void *)logObject_MicroLocation_Default;
  logObject_MicroLocation_Default = (uint64_t)v0;

}

uint64_t **std::__tree<double>::__assign_multi<std::__tree_const_iterator<double,std::__tree_node<double,void *> *,long>>(uint64_t **result, _QWORD *a2, _QWORD *a3)
{
  uint64_t **v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  _QWORD *v9;
  _QWORD *v10;
  BOOL v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t **v14;
  uint64_t *v15;
  uint64_t *v16;

  v5 = result;
  if (result[2])
  {
    v6 = *result;
    v7 = result[1];
    *result = (uint64_t *)(result + 1);
    v7[2] = 0;
    result[1] = 0;
    result[2] = 0;
    if (v6[1])
      v8 = (uint64_t *)v6[1];
    else
      v8 = v6;
    v14 = result;
    v15 = v8;
    v16 = v8;
    if (v8)
    {
      v15 = std::__tree<double>::_DetachedTreeCache::__detach_next((uint64_t)v8);
      if (a2 != a3)
      {
        v9 = a2;
        do
        {
          v8[4] = v9[4];
          std::__tree<double>::__node_insert_multi(v5, (uint64_t)v8);
          v8 = v15;
          v16 = v15;
          if (v15)
            v15 = std::__tree<double>::_DetachedTreeCache::__detach_next((uint64_t)v15);
          v10 = (_QWORD *)v9[1];
          if (v10)
          {
            do
            {
              a2 = v10;
              v10 = (_QWORD *)*v10;
            }
            while (v10);
          }
          else
          {
            do
            {
              a2 = (_QWORD *)v9[2];
              v11 = *a2 == (_QWORD)v9;
              v9 = a2;
            }
            while (!v11);
          }
          if (!v8)
            break;
          v9 = a2;
        }
        while (a2 != a3);
      }
    }
    result = (uint64_t **)std::__tree<double>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)&v14);
  }
  if (a2 != a3)
  {
    do
    {
      result = (uint64_t **)std::__tree<double>::__emplace_multi<double>(v5, (double *)a2 + 4);
      v12 = (_QWORD *)a2[1];
      if (v12)
      {
        do
        {
          v13 = v12;
          v12 = (_QWORD *)*v12;
        }
        while (v12);
      }
      else
      {
        do
        {
          v13 = (_QWORD *)a2[2];
          v11 = *v13 == (_QWORD)a2;
          a2 = v13;
        }
        while (!v11);
      }
      a2 = v13;
    }
    while (v13 != a3);
  }
  return result;
}

void sub_241ADF4F4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__tree<double>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::__tree<double>::__node_insert_multi(uint64_t **a1, uint64_t a2)
{
  uint64_t **v3;
  uint64_t *v4;
  uint64_t **v5;

  v3 = a1 + 1;
  v4 = a1[1];
  if (v4)
  {
    do
    {
      while (1)
      {
        v3 = (uint64_t **)v4;
        if (*(double *)(a2 + 32) >= *((double *)v4 + 4))
          break;
        v4 = (uint64_t *)*v4;
        v5 = v3;
        if (!*v3)
          goto LABEL_8;
      }
      v4 = (uint64_t *)v4[1];
    }
    while (v4);
    v5 = v3 + 1;
  }
  else
  {
    v5 = a1 + 1;
  }
LABEL_8:
  std::__tree<CLMicroLocationRecordingCompletionMetaInformation::RecordingError>::__insert_node_at(a1, (uint64_t)v3, v5, (uint64_t *)a2);
  return a2;
}

_QWORD *std::__tree<double>::_DetachedTreeCache::__detach_next(uint64_t a1)
{
  _QWORD *result;
  _QWORD *v3;
  _QWORD *v4;

  result = *(_QWORD **)(a1 + 16);
  if (result)
  {
    v3 = (_QWORD *)*result;
    if (*result == a1)
    {
      *result = 0;
      while (1)
      {
        v4 = (_QWORD *)result[1];
        if (!v4)
          break;
        do
        {
          result = v4;
          v4 = (_QWORD *)*v4;
        }
        while (v4);
      }
    }
    else
    {
      for (result[1] = 0; v3; v3 = (_QWORD *)result[1])
      {
        do
        {
          result = v3;
          v3 = (_QWORD *)*v3;
        }
        while (v3);
      }
    }
  }
  return result;
}

uint64_t std::__tree<double>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100](uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;

  std::__tree<std::__value_type<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,double>,std::__map_value_compare<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,std::__value_type<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,double>,std::less<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes>,true>,std::allocator<std::__value_type<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,double>>>::destroy(*(_QWORD *)a1, *(_QWORD **)(a1 + 16));
  v2 = *(_QWORD **)(a1 + 8);
  if (v2)
  {
    v3 = (_QWORD *)v2[2];
    if (v3)
    {
      do
      {
        v2 = v3;
        v3 = (_QWORD *)v3[2];
      }
      while (v3);
      *(_QWORD *)(a1 + 8) = v2;
    }
    std::__tree<std::__value_type<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,double>,std::__map_value_compare<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,std::__value_type<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,double>,std::less<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes>,true>,std::allocator<std::__value_type<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,double>>>::destroy(*(_QWORD *)a1, v2);
  }
  return a1;
}

uint64_t sub_241ADF63C()
{
  void *v0;

  return 0;
}

void sub_241ADFB3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_241ADFF10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  va_list va;

  va_start(va, a16);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__12(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__12(uint64_t a1)
{

}

ULWiFiScanStrategy *ULWiFiStrategyBuilder::buildScanStartegy(int a1, _QWORD *a2, unsigned int **a3, uint64_t a4)
{
  void *v8;
  std::vector<int>::pointer begin;
  unint64_t v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  unsigned int v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  unsigned int v20;
  ULWiFiScanStrategy *v21;
  unsigned int v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  char v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  char v32;
  char v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  int v38;
  void *v39;
  void *v40;
  void *v41;
  void *v42;
  int v43;
  int v44;
  unsigned int *v45;
  unsigned int *i;
  ULWiFiScanChannel *v47;
  uint64_t v48;
  ULWiFiScanChannel *v49;
  uint64_t v50;
  uint64_t v51;
  ULWiFiScanChannel *v52;
  uint64_t v53;
  ULWiFiScanChannel *v54;
  uint64_t v55;
  void *v56;
  void *v57;
  void *v58;
  void *v59;
  int v60;
  int v61;
  ULWiFiScanStrategy *v62;
  void *v63;
  uint64_t v65;
  uint64_t v66;
  std::vector<int> v67;
  std::vector<int> v68;

  objc_msgSend(MEMORY[0x24BDBCEB8], "array");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  if (a1 == 2)
  {
    v66 = a4;
    +[ULDefaultsSingleton shared](ULDefaultsSingleton, "shared");
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v16, "defaultsDictionary");
    v17 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "ULRecording80211ScanType");
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v17, "objectForKey:", v18);
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    if (v19 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
      v20 = objc_msgSend(v19, "unsignedIntValue");
    else
      v20 = objc_msgSend(&unk_2511EDB40, "unsignedIntValue");
    v22 = v20;

    +[ULDefaultsSingleton shared](ULDefaultsSingleton, "shared");
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v23, "defaultsDictionary");
    v24 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "ULRecordingScanLowPriority");
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v24, "objectForKey:", v25);
    v26 = (void *)objc_claimAutoreleasedReturnValue();
    if (v26 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
      v27 = objc_msgSend(v26, "BOOLValue");
    else
      v27 = objc_msgSend(MEMORY[0x24BDBD1C0], "BOOLValue");
    v33 = v27;

    +[ULDefaultsSingleton shared](ULDefaultsSingleton, "shared");
    v34 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v34, "defaultsDictionary");
    v35 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "ULRecordingWifiMaxAgeFirstScan");
    v36 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v35, "objectForKey:", v36);
    v37 = (void *)objc_claimAutoreleasedReturnValue();
    if (v37 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
      v38 = objc_msgSend(v37, "intValue");
    else
      v38 = objc_msgSend(&unk_2511EDB28, "intValue");
    v44 = v38;

    v45 = *a3;
    for (i = a3[1]; v45 != i; v45 += 2)
    {
      v47 = [ULWiFiScanChannel alloc];
      if (*v45 <= 0xDuLL)
        v48 = 1;
      else
        v48 = 2;
      v49 = -[ULWiFiScanChannel initWithBand:andChannelNumber:](v47, "initWithBand:andChannelNumber:", v48);
      objc_msgSend(v8, "addObject:", v49);

    }
  }
  else
  {
    if (a1 != 1)
    {
      v21 = 0;
      goto LABEL_53;
    }
    ULSettings::get<ULSettings::LocalizingTopChannels>(&v68);
    begin = v68.__begin_;
    v10 = (uint64_t)(a2[1] - *a2) >> 3;
    if (v10 > v68.__end_ - v68.__begin_)
    {
      ULSettings::get<ULSettings::LocalizingTopChannels>(&v67);
      v10 = v67.__end_ - v67.__begin_;
      if (v67.__begin_)
        operator delete(v67.__begin_);
    }
    v66 = a4;
    if (begin)
      operator delete(begin);
    +[ULDefaultsSingleton shared](ULDefaultsSingleton, "shared");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "defaultsDictionary");
    v12 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "ULLocalizing80211ScanType");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v12, "objectForKey:", v13);
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    if (v14 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
      v15 = objc_msgSend(v14, "unsignedIntValue");
    else
      v15 = objc_msgSend(&unk_2511EDB40, "unsignedIntValue");
    v22 = v15;

    +[ULDefaultsSingleton shared](ULDefaultsSingleton, "shared");
    v28 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v28, "defaultsDictionary");
    v29 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "ULLocalizingScanLowPriority");
    v30 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v29, "objectForKey:", v30);
    v31 = (void *)objc_claimAutoreleasedReturnValue();
    if (v31 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
      v32 = objc_msgSend(v31, "BOOLValue");
    else
      v32 = objc_msgSend(MEMORY[0x24BDBD1C0], "BOOLValue");
    v33 = v32;

    +[ULDefaultsSingleton shared](ULDefaultsSingleton, "shared");
    v39 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v39, "defaultsDictionary");
    v40 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "ULLocalizingWifiMaxAgeFirstScan");
    v41 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v40, "objectForKey:", v41);
    v42 = (void *)objc_claimAutoreleasedReturnValue();
    if (v42 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
      v43 = objc_msgSend(v42, "intValue");
    else
      v43 = objc_msgSend(&unk_2511EDB28, "intValue");
    v44 = v43;

    if (v10)
    {
      v50 = 0;
      do
      {
        v51 = *(unsigned int *)(*a2 + v50);
        v52 = [ULWiFiScanChannel alloc];
        if (v51 <= 0xD)
          v53 = 1;
        else
          v53 = 2;
        v54 = -[ULWiFiScanChannel initWithBand:andChannelNumber:](v52, "initWithBand:andChannelNumber:", v53, v51);
        objc_msgSend(v8, "addObject:", v54);

        v50 += 8;
        --v10;
      }
      while (v10);
    }
  }
  if (v22)
    v55 = 110;
  else
    v55 = 50;
  +[ULDefaultsSingleton shared](ULDefaultsSingleton, "shared");
  v56 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v56, "defaultsDictionary");
  v57 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "ULWifiMaxAgeNextScan");
  v58 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v57, "objectForKey:", v58);
  v59 = (void *)objc_claimAutoreleasedReturnValue();
  if (v59 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
    v60 = objc_msgSend(v59, "intValue");
  else
    v60 = objc_msgSend(&unk_2511EDB28, "intValue");
  v61 = v60;

  v62 = [ULWiFiScanStrategy alloc];
  objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithArray:", v8);
  v63 = (void *)objc_claimAutoreleasedReturnValue();
  *(_WORD *)((char *)&v65 + 1) = 0;
  LOBYTE(v65) = v33;
  v21 = -[ULWiFiScanStrategy initWithChannels:scanType:numberOfScans:scanIterations:restTime:dwellTime:acceptableCacheAge:maximumAge:isLowPriority:isLowLatency:doAbortOngoingScan:](v62, "initWithChannels:scanType:numberOfScans:scanIterations:restTime:dwellTime:acceptableCacheAge:maximumAge:isLowPriority:isLowLatency:doAbortOngoingScan:", v63, v22, 1, v66, 40, v55, 1000 * v61, 1000 * v44, v65);

LABEL_53:
  return v21;
}

void sub_241AE0870(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void ULSettings::get<ULSettings::LocalizingTopChannels>(std::vector<int> *a1@<X8>)
{
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t i;
  int v7;
  int v8;
  std::vector<int>::pointer end;
  int *v10;
  std::vector<int>::pointer begin;
  int64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  char *v16;
  int *v17;
  int v18;
  int *v19;
  std::vector<int>::pointer v20;
  int v21;
  std::vector<int>::pointer v22;
  uint64_t v23;
  unint64_t v24;
  int64_t v25;
  unint64_t v26;
  char *v27;
  int *v28;
  int *v29;
  int v30;
  int *value;
  id v32;
  void *v33;
  void *v34;
  void *v35;
  std::vector<int> v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  std::vector<int> v41;
  uint64_t v42;

  v42 = *MEMORY[0x24BDAC8D0];
  +[ULDefaultsSingleton shared](ULDefaultsSingleton, "shared");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "defaultsDictionary");
  v35 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "ULLocalizingTopChannels");
  v33 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v35, "objectForKey:");
  v34 = (void *)objc_claimAutoreleasedReturnValue();
  if (v34 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
  {
    memset(&v36, 0, sizeof(v36));
    v32 = v34;
    std::vector<CLMicroLocationProto::ConfidenceLevel>::reserve(&v36, objc_msgSend(v32, "count"));
    v39 = 0u;
    v40 = 0u;
    v37 = 0u;
    v38 = 0u;
    v3 = v32;
    v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v37, &v41, 16);
    if (v4)
    {
      v5 = *(_QWORD *)v38;
      do
      {
        for (i = 0; i != v4; ++i)
        {
          if (*(_QWORD *)v38 != v5)
            objc_enumerationMutation(v3);
          v7 = objc_msgSend(*(id *)(*((_QWORD *)&v37 + 1) + 8 * i), "intValue");
          v8 = v7;
          end = v36.__end_;
          if (v36.__end_ >= v36.__end_cap_.__value_)
          {
            begin = v36.__begin_;
            v12 = v36.__end_ - v36.__begin_;
            v13 = v12 + 1;
            if ((unint64_t)(v12 + 1) >> 62)
              std::vector<CLMicroLocationProto::ConfidenceReason>::__throw_length_error[abi:ne180100]();
            v14 = (char *)v36.__end_cap_.__value_ - (char *)v36.__begin_;
            if (((char *)v36.__end_cap_.__value_ - (char *)v36.__begin_) >> 1 > v13)
              v13 = v14 >> 1;
            if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFFCLL)
              v15 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v15 = v13;
            if (v15)
            {
              v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CLMicroLocationProto::ConfidenceReason>>((uint64_t)&v36.__end_cap_, v15);
              begin = v36.__begin_;
              end = v36.__end_;
            }
            else
            {
              v16 = 0;
            }
            v17 = (int *)&v16[4 * v12];
            *v17 = v8;
            v10 = v17 + 1;
            while (end != begin)
            {
              v18 = *--end;
              *--v17 = v18;
            }
            v36.__begin_ = v17;
            v36.__end_ = v10;
            v36.__end_cap_.__value_ = (int *)&v16[4 * v15];
            if (begin)
              operator delete(begin);
          }
          else
          {
            *v36.__end_ = v7;
            v10 = end + 1;
          }
          v36.__end_ = v10;
        }
        v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v37, &v41, 16);
      }
      while (v4);
    }

    *a1 = v36;
  }
  else
  {
    memset(&v41, 0, sizeof(v41));
    std::vector<CLMicroLocationProto::ConfidenceLevel>::reserve(&v41, 5uLL);
    v19 = &_ZGRN10ULSettings14SettingsTraitsINS_21LocalizingTopChannelsEE12defaultValueE_;
    v20 = v41.__end_;
    do
    {
      v21 = *v19;
      if (v20 >= v41.__end_cap_.__value_)
      {
        v22 = v41.__begin_;
        v23 = v20 - v41.__begin_;
        v24 = v23 + 1;
        if ((unint64_t)(v23 + 1) >> 62)
          std::vector<CLMicroLocationProto::ConfidenceReason>::__throw_length_error[abi:ne180100]();
        v25 = (char *)v41.__end_cap_.__value_ - (char *)v41.__begin_;
        if (((char *)v41.__end_cap_.__value_ - (char *)v41.__begin_) >> 1 > v24)
          v24 = v25 >> 1;
        if ((unint64_t)v25 >= 0x7FFFFFFFFFFFFFFCLL)
          v26 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v26 = v24;
        if (v26)
        {
          v27 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CLMicroLocationProto::ConfidenceReason>>((uint64_t)&v41.__end_cap_, v26);
          v22 = v41.__begin_;
          v20 = v41.__end_;
        }
        else
        {
          v27 = 0;
        }
        v28 = (int *)&v27[4 * v23];
        *v28 = v21;
        v29 = v28 + 1;
        while (v20 != v22)
        {
          v30 = *--v20;
          *--v28 = v30;
        }
        v41.__begin_ = v28;
        v41.__end_ = v29;
        v41.__end_cap_.__value_ = (int *)&v27[4 * v26];
        if (v22)
          operator delete(v22);
        v20 = v29;
      }
      else
      {
        *v20++ = v21;
      }
      v41.__end_ = v20;
      ++v19;
    }
    while (v19 != (int *)&unk_241BB7EDC);
    value = v41.__end_cap_.__value_;
    a1->__begin_ = v41.__begin_;
    a1->__end_ = v20;
    a1->__end_cap_.__value_ = value;
  }

}

void sub_241AE0D98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, void *a10, void *a11, void *a12, void *__p, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26)
{
  void *v26;

  if (__p)
    operator delete(__p);

  _Unwind_Resume(a1);
}

uint64_t ULWiFiStrategyBuilder::expectedScanDuration(ULWiFiStrategyBuilder *this, const ULWiFiScanStrategy *a2)
{
  ULWiFiStrategyBuilder *v2;
  ULWiFiStrategyBuilder *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = this;
  v3 = v2;
  if (v2)
  {
    -[ULWiFiStrategyBuilder channels](v2, "channels");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    v5 = objc_msgSend(v4, "count");
    v6 = -[ULWiFiStrategyBuilder numberOfScans](v3, "numberOfScans");

    v7 = -[ULWiFiStrategyBuilder dwellTimeMilliSeconds](v3, "dwellTimeMilliSeconds");
    v8 = v6
       * v5
       * (uint64_t)(double)(unint64_t)(-[ULWiFiStrategyBuilder restTimeInMilliSeconds](v3, "restTimeInMilliSeconds")+ v7);
  }
  else
  {
    v8 = 0;
  }

  return v8;
}

void sub_241AE0ED0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_241AE0F90(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_241AE12AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  void *v15;
  void *v16;
  void *v17;

  _Unwind_Resume(a1);
}

void sub_241AE1414(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_241AE15CC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_241AE1724(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_241AE18CC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_241AE193C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_241AE1A20(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_241AE1BD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16)
{
  void *v16;
  void *v17;

  CLMicroLocationProto::WiFiRssi::~WiFiRssi((CLMicroLocationProto::WiFiRssi *)&a16);
  _Unwind_Resume(a1);
}

void sub_241AE1D70(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_241AE1E04(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_241AE1E9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_241AE22F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,void **a21)
{
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;

  a21 = (void **)&a18;
  std::vector<CLMiLoProtobufWrapper::WiFiRssi>::__destroy_vector::operator()[abi:ne180100](&a21);

  _Unwind_Resume(a1);
}

uint64_t std::vector<CLMiLoProtobufWrapper::WiFiRssi>::reserve(uint64_t *a1, unint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[5];

  v4 = a1[2];
  result = (uint64_t)(a1 + 2);
  if (0x6DB6DB6DB6DB6DB7 * ((v4 - *a1) >> 3) < a2)
  {
    if (a2 >= 0x492492492492493)
      std::vector<CLMicroLocationProto::ConfidenceReason>::__throw_length_error[abi:ne180100]();
    v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = std::__allocate_at_least[abi:ne180100]<std::allocator<CLMiLoProtobufWrapper::WiFiRssi>>(result, a2);
    v7[1] = v7[0] + v5;
    v7[2] = v7[0] + v5;
    v7[3] = v7[0] + 56 * v6;
    std::vector<CLMiLoProtobufWrapper::WiFiRssi>::__swap_out_circular_buffer(a1, v7);
    return std::__split_buffer<CLMiLoProtobufWrapper::WiFiRssi>::~__split_buffer((uint64_t)v7);
  }
  return result;
}

void sub_241AE2454(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<CLMiLoProtobufWrapper::WiFiRssi>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_241AE2530(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_241AE2650(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void ___ZL45_CLLogObjectForCategory_MicroLocation_Defaultv_block_invoke_57()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.MicroLocation", "MicroLocation");
  v1 = (void *)logObject_MicroLocation_Default;
  logObject_MicroLocation_Default = (uint64_t)v0;

}

void std::vector<CLMiLoProtobufWrapper::WiFiRssi>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = v2;
    if (v4 != v2)
    {
      do
        CLMicroLocationProto::WiFiRssi::~WiFiRssi((CLMicroLocationProto::WiFiRssi *)(v4 - 56));
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t std::vector<CLMiLoProtobufWrapper::WiFiRssi>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<CLMiLoProtobufWrapper::WiFiRssi>,std::reverse_iterator<CLMiLoProtobufWrapper::WiFiRssi*>,std::reverse_iterator<CLMiLoProtobufWrapper::WiFiRssi*>,std::reverse_iterator<CLMiLoProtobufWrapper::WiFiRssi*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<CLMiLoProtobufWrapper::WiFiRssi>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x492492492492493)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(56 * a2);
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<CLMiLoProtobufWrapper::WiFiRssi>,std::reverse_iterator<CLMiLoProtobufWrapper::WiFiRssi*>,std::reverse_iterator<CLMiLoProtobufWrapper::WiFiRssi*>,std::reverse_iterator<CLMiLoProtobufWrapper::WiFiRssi*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v11;

  if (a3 != a5)
  {
    v11 = 0;
    do
    {
      CLMicroLocationProto::WiFiRssi::WiFiRssi((CLMicroLocationProto::WiFiRssi *)(a7 + v11 - 56), (const CLMicroLocationProto::WiFiRssi *)(a3 + v11 - 56));
      *(_DWORD *)(a7 + v11 - 8) = *(_DWORD *)(a3 + v11 - 8);
      v11 -= 56;
    }
    while (a3 + v11 != a5);
  }
  return a6;
}

void sub_241AE2860(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;

  for (; v2; v2 += 56)
    CLMicroLocationProto::WiFiRssi::~WiFiRssi((CLMicroLocationProto::WiFiRssi *)(v1 + v2));
  _Unwind_Resume(exception_object);
}

uint64_t std::__split_buffer<CLMiLoProtobufWrapper::WiFiRssi>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 56;
    CLMicroLocationProto::WiFiRssi::~WiFiRssi((CLMicroLocationProto::WiFiRssi *)(i - 56));
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t std::vector<CLMiLoProtobufWrapper::WiFiRssi>::__emplace_back_slow_path<CLMiLoProtobufWrapper::WiFiRssi>(uint64_t *a1, const CLMicroLocationProto::WiFiRssi *a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  char *v13;
  CLMicroLocationProto::WiFiRssi *v14;
  CLMicroLocationProto::WiFiRssi *v15;
  char *v16;
  uint64_t *v17;

  v3 = *a1;
  v4 = 0x6DB6DB6DB6DB6DB7 * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) > 0x492492492492492)
    std::vector<CLMicroLocationProto::ConfidenceReason>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0x6DB6DB6DB6DB6DB7 * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x249249249249249)
    v9 = 0x492492492492492;
  else
    v9 = v5;
  v17 = a1 + 2;
  if (v9)
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CLMiLoProtobufWrapper::WiFiRssi>>(v7, v9);
  else
    v10 = 0;
  v13 = v10;
  v14 = (CLMicroLocationProto::WiFiRssi *)&v10[56 * v4];
  v15 = v14;
  v16 = &v10[56 * v9];
  CLMicroLocationProto::WiFiRssi::WiFiRssi(v14, a2);
  *((_DWORD *)v14 + 12) = *((_DWORD *)a2 + 12);
  v15 = (CLMicroLocationProto::WiFiRssi *)((char *)v15 + 56);
  std::vector<CLMiLoProtobufWrapper::WiFiRssi>::__swap_out_circular_buffer(a1, &v13);
  v11 = a1[1];
  std::__split_buffer<CLMiLoProtobufWrapper::WiFiRssi>::~__split_buffer((uint64_t)&v13);
  return v11;
}

void sub_241AE29E4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<CLMiLoProtobufWrapper::WiFiRssi>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL CLMicroLocationFingerprintVector::Iterator::operator!=(_QWORD *a1, _QWORD *a2)
{
  return *a1 != *a2 || a1[1] != a2[1];
}

uint64_t CLMicroLocationFingerprintVector::Iterator::operator*(_QWORD *a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*a1 + 24))(*a1, a1[1]);
}

uint64_t CLMicroLocationFingerprintVector::Iterator::operator++(uint64_t result)
{
  ++*(_QWORD *)(result + 8);
  return result;
}

_QWORD *CLMicroLocationFingerprintVector::CLMicroLocationFingerprintVector(_QWORD *result, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  *a2 = 0;
  *result = v2;
  return result;
}

uint64_t CLMicroLocationFingerprintVector::operator[](_QWORD *a1, unint64_t a2)
{
  CLMicroLocationFingerprintVector *v5;

  if ((*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 16))(*a1) > a2)
    return (*(uint64_t (**)(_QWORD, unint64_t))(*(_QWORD *)*a1 + 24))(*a1, a2);
  v5 = (CLMicroLocationFingerprintVector *)CLMicroLocationFingerprintVector::operator[]();
  return CLMicroLocationFingerprintVector::size(v5);
}

uint64_t CLMicroLocationFingerprintVector::size(CLMicroLocationFingerprintVector *this)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)this + 16))(*(_QWORD *)this);
}

BOOL CLMicroLocationFingerprintVector::empty(CLMicroLocationFingerprintVector *this)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)this + 16))(*(_QWORD *)this) == 0;
}

uint64_t CLMicroLocationFingerprintVector::begin(CLMicroLocationFingerprintVector *this)
{
  return *(_QWORD *)this;
}

uint64_t CLMicroLocationFingerprintVector::end(CLMicroLocationFingerprintVector *this)
{
  uint64_t v1;

  v1 = *(_QWORD *)this;
  (*(void (**)(_QWORD))(**(_QWORD **)this + 16))(*(_QWORD *)this);
  return v1;
}

void ___ZL45_CLLogObjectForCategory_MicroLocation_Defaultv_block_invoke_58()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.MicroLocation", "MicroLocation");
  v1 = (void *)logObject_MicroLocation_Default;
  logObject_MicroLocation_Default = (uint64_t)v0;

}

uint64_t CLMicroLocationMeasurementTable::Entry::Entry(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, CLMicroLocationProto::Measurement *a5, uint64_t a6, double a7)
{
  int v9;

  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = a3;
  *(double *)(a1 + 16) = a7;
  *(_QWORD *)(a1 + 24) = a4;
  CLMicroLocationProto::Measurement::Measurement((CLMicroLocationProto::Measurement *)(a1 + 32), a5);
  if ((a6 & 0xFF00000000) != 0)
    v9 = a6;
  else
    v9 = 0;
  *(_DWORD *)(a1 + 112) = v9;
  return a1;
}

uint64_t CLMicroLocationMeasurementTable::Entry::Entry(uint64_t a1, uint64_t a2)
{
  CLMicroLocationProto::Measurement *v4;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  CLMicroLocationProto::Measurement::Measurement((CLMicroLocationProto::Measurement *)(a1 + 32));
  *(_DWORD *)(a1 + 112) = *(_DWORD *)(a2 + 112);
  CLMicroLocationProto::Measurement::Swap(v4, (CLMicroLocationProto::Measurement *)(a2 + 32));
  return a1;
}

void sub_241AE2C68(_Unwind_Exception *a1)
{
  CLMicroLocationProto::Measurement *v1;

  CLMicroLocationProto::Measurement::~Measurement(v1);
  _Unwind_Resume(a1);
}

uint64_t CLMicroLocationMeasurementTable::Entry::operator=(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 112) = *(_DWORD *)(a2 + 112);
  CLMicroLocationProto::Measurement::Swap((CLMicroLocationProto::Measurement *)(a1 + 32), (CLMicroLocationProto::Measurement *)(a2 + 32));
  return a1;
}

void sub_241AE31F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void *CLMicroLocationSensorsLogic::State::isAssociatedToWifi(CLMicroLocationSensorsLogic::State *this)
{
  void *result;

  result = (void *)*((_QWORD *)this + 22);
  if (result)
    return (void *)objc_msgSend(result, "isAssociated");
  return result;
}

id CLMicroLocationSensorsLogic::State::currentAssociatedWiFiAPInfo(id *this)
{
  return this[22];
}

void CLMicroLocationSensorsLogic::State::setBleSpyscanSessionRunning(CLMicroLocationSensorsLogic::State *this, int a2)
{
  NSObject *v4;
  const char *v5;
  int v6;
  const char *v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  if (onceToken_MicroLocation_Default != -1)
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_72);
  v4 = logObject_MicroLocation_Default;
  if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
  {
    v5 = "not running";
    if (a2)
      v5 = "running";
    v6 = 136446210;
    v7 = v5;
    _os_log_impl(&dword_2419D9000, v4, OS_LOG_TYPE_DEFAULT, "BLE spyscan session set to %{public}s", (uint8_t *)&v6, 0xCu);
  }
  *((_BYTE *)this + 169) = a2;
}

void CLMicroLocationSensorsLogic::State::setRangingSessionRunning(CLMicroLocationSensorsLogic::State *this, int a2)
{
  NSObject *v4;
  const char *v5;
  int v6;
  const char *v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  if (onceToken_MicroLocation_Default != -1)
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_72);
  v4 = logObject_MicroLocation_Default;
  if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
  {
    v5 = "stopped";
    if (a2)
      v5 = "running";
    v6 = 136446210;
    v7 = v5;
    _os_log_impl(&dword_2419D9000, v4, OS_LOG_TYPE_DEFAULT, "Ranging session set to %{public}s", (uint8_t *)&v6, 0xCu);
  }
  *((_BYTE *)this + 170) = a2;
}

uint64_t CLMicroLocationSensorsLogic::State::receivedWiFiScanError(CLMicroLocationSensorsLogic::State *this)
{
  return *((unsigned __int8 *)this + 184);
}

BOOL CLMicroLocationSensorsLogic::State::isNiSessionStateResumedForRequiredPeriod(uint64_t a1, double a2)
{
  int v4;
  CFAbsoluteTime v5;
  double v6;
  double v7;
  uint64_t v8;
  const char *v9;
  NSObject *v10;
  uint32_t v11;
  uint64_t v12;
  int v15;
  int v16;
  __int16 v17;
  double v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v4 = *(_DWORD *)(a1 + 192);
  v5 = cl::chrono::CFAbsoluteTimeClock::now();
  v6 = *(double *)(a1 + 200);
  v7 = v5 - v6;
  if (v6 == -1.79769313e308)
  {
    if (onceToken_MicroLocation_Default != -1)
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_72);
    v12 = logObject_MicroLocation_Default;
    if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEBUG))
    {
      v15 = 67240192;
      v16 = v4;
      v9 = "Ni Session is in state %{public}d since start";
      v10 = v12;
      v11 = 8;
      goto LABEL_10;
    }
  }
  else
  {
    if (onceToken_MicroLocation_Default != -1)
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_72);
    v8 = logObject_MicroLocation_Default;
    if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEBUG))
    {
      v15 = 67240448;
      v16 = v4;
      v17 = 2050;
      v18 = v7;
      v9 = "Ni Session is in state %{public}d for the last %{public}0.3Lfs";
      v10 = v8;
      v11 = 18;
LABEL_10:
      _os_log_impl(&dword_2419D9000, v10, OS_LOG_TYPE_DEBUG, v9, (uint8_t *)&v15, v11);
    }
  }
  return v7 >= a2 && v4 == 1;
}

void CLMicroLocationSensorsLogic::State::setMotionSessionState(CLMicroLocationSensorsLogic::State *this, int a2)
{
  NSObject *v4;
  const char *v5;
  int v6;
  const char *v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  if (onceToken_MicroLocation_Default != -1)
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_72);
  v4 = logObject_MicroLocation_Default;
  if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
  {
    v5 = "stopped";
    if (a2)
      v5 = "running";
    v6 = 136446210;
    v7 = v5;
    _os_log_impl(&dword_2419D9000, v4, OS_LOG_TYPE_DEFAULT, "Motion fence set to %{public}s", (uint8_t *)&v6, 0xCu);
  }
  *((_BYTE *)this + 171) = a2;
}

void CLMicroLocationSensorsLogic::State::setOdometryMonitoringRunning(CLMicroLocationSensorsLogic::State *this, int a2)
{
  NSObject *v4;
  const char *v5;
  int v6;
  const char *v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  if (onceToken_MicroLocation_Default != -1)
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_72);
  v4 = logObject_MicroLocation_Default;
  if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
  {
    v5 = "stopped";
    if (a2)
      v5 = "running";
    v6 = 136446210;
    v7 = v5;
    _os_log_impl(&dword_2419D9000, v4, OS_LOG_TYPE_DEFAULT, "Odometery monitoring set to %{public}s", (uint8_t *)&v6, 0xCu);
  }
  *((_BYTE *)this + 172) = a2;
}

void CLMicroLocationSensorsLogic::CLMicroLocationSensorsLogic(CLMicroLocationSensorsLogic *this, CLMicroLocationLogic *a2, ULDatabase *a3)
{
  double v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  int v11;
  int v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  unsigned int v29;
  unsigned int v30;
  std::string __str;
  std::string __p;

  *(_QWORD *)this = &off_2511D9080;
  v6 = CLMicroLocationProto::RecordingEvent::RecordingEvent((CLMicroLocationSensorsLogic *)((char *)this + 8));
  *((_BYTE *)this + 153) = 2;
  *((_BYTE *)this + 160) = 0;
  *((_BYTE *)this + 168) = 0;
  *((_QWORD *)this + 23) = 0;
  *((_WORD *)this + 96) = 0;
  *((_DWORD *)this + 50) = 0;
  *((_DWORD *)this + 44) = 0;
  *((_BYTE *)this + 180) = 0;
  *((_QWORD *)this + 26) = 0xFFEFFFFFFFFFFFFFLL;
  *((_BYTE *)this + 216) = 0;
  *((_QWORD *)this + 28) = a2;
  *((_QWORD *)this + 29) = a3;
  CLMicroLocationSensorsDriver::CLMicroLocationSensorsDriver((char *)this + 240, this, v6);
  *((_DWORD *)this + 114) = 0;
  *((_BYTE *)this + 460) = 0;
  *((_QWORD *)this + 58) = this;
  +[ULDefaultsSingleton shared](ULDefaultsSingleton, "shared");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "defaultsDictionary");
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "ULWifiTimestampJitterThreshold");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "objectForKey:", v9);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  if (v10 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
    v11 = objc_msgSend(v10, "intValue");
  else
    v11 = objc_msgSend(&unk_2511EDC48, "intValue");
  v12 = v11;

  CLMicroLocationScanBuffer::CLMicroLocationScanBuffer((uint64_t)this + 472, (double)v12 / 1000.0);
  +[ULDefaultsSingleton shared](ULDefaultsSingleton, "shared");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v13, "defaultsDictionary");
  v14 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "ULBleScanBufferSize");
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v14, "objectForKey:", v15);
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  if (v16 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
    v17 = objc_msgSend(v16, "unsignedLongValue");
  else
    v17 = objc_msgSend(&unk_2511EDB88, "unsignedLongValue");
  v18 = v17;

  std::string::basic_string[abi:ne180100]<0>(&__p, "Microlocation Ble rssi buffer");
  CLEventsBuffer<CLMicroLocationProto::Measurement,double,ProtoMeasurementGetTime>::CLEventsBuffer((uint64_t)this + 512, v18, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  +[ULDefaultsSingleton shared](ULDefaultsSingleton, "shared");
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v19, "defaultsDictionary");
  v20 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "ULUwbRangeBufferSize");
  v21 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v20, "objectForKey:", v21);
  v22 = (void *)objc_claimAutoreleasedReturnValue();
  if (v22 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
    v23 = objc_msgSend(v22, "unsignedLongValue");
  else
    v23 = objc_msgSend(&unk_2511EDBA0, "unsignedLongValue");
  v24 = v23;

  std::string::basic_string[abi:ne180100]<0>(&__str, "Microlocation Uwb range buffer");
  CLEventsBuffer<CLMicroLocationProto::Measurement,double,ProtoMeasurementGetTime>::CLEventsBuffer((uint64_t)this + 576, v24, &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  *((_WORD *)this + 328) = 0;
  *((_OWORD *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 664) = 0u;
  *(_OWORD *)((char *)this + 680) = 0u;
  *(_OWORD *)((char *)this + 696) = 0u;
  *((_DWORD *)this + 178) = 1065353216;
  +[ULDefaultsSingleton shared](ULDefaultsSingleton, "shared");
  v25 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v25, "defaultsDictionary");
  v26 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "ULMaxBleIdentityNumber");
  v27 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v26, "objectForKey:", v27);
  v28 = (void *)objc_claimAutoreleasedReturnValue();
  if (v28 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
    v29 = objc_msgSend(v28, "unsignedIntValue");
  else
    v29 = objc_msgSend(&unk_2511EDBA0, "unsignedIntValue");
  v30 = v29;

  *((_QWORD *)this + 90) = v30;
  *(_OWORD *)((char *)this + 728) = 0u;
  *((_DWORD *)this + 186) = 0;
}

void sub_241AE4654(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CLMicroLocationSensorsDriver *a10, CLMicroLocationProto::RecordingEvent *a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24)
{
  id *v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  void *v28;
  void *v29;

  std::__hash_table<CLMicroLocationUtils::BleIdentityItem,CLMicroLocationUtils::BleIdentityItem::HashItem,CLMicroLocationUtils::BleIdentityItem::PredicateItem,std::allocator<CLMicroLocationUtils::BleIdentityItem>>::~__hash_table((uint64_t)(v24 + 85));
  CLEventsBuffer<CLMicroLocationProto::Measurement,double,ProtoMeasurementGetTime>::~CLEventsBuffer(v26);
  CLEventsBuffer<CLMicroLocationProto::Measurement,double,ProtoMeasurementGetTime>::~CLEventsBuffer(v25);
  std::vector<CLMiLoProtobufWrapper::WiFiRssi>::__destroy_vector::operator()[abi:ne180100]((void ***)&a24);
  CLMicroLocationSensorsDriver::~CLMicroLocationSensorsDriver(a10);

  CLMicroLocationProto::RecordingEvent::~RecordingEvent(a11);
  _Unwind_Resume(a1);
}

void sub_241AE47D4()
{
  JUMPOUT(0x241AE47A8);
}

void sub_241AE47DC()
{
  JUMPOUT(0x241AE47B4);
}

uint64_t CLEventsBuffer<CLMicroLocationProto::Measurement,double,ProtoMeasurementGetTime>::~CLEventsBuffer(uint64_t a1)
{
  if (*(char *)(a1 + 55) < 0)
    operator delete(*(void **)(a1 + 32));
  std::__tree<CLMicroLocationProto::Measurement,CLEventsBuffer<CLMicroLocationProto::Measurement,double,ProtoMeasurementGetTime>::EventsComparator,std::allocator<CLMicroLocationProto::Measurement>>::destroy(a1 + 8, *(_QWORD **)(a1 + 16));
  return a1;
}

void CLMicroLocationSensorsLogic::~CLMicroLocationSensorsLogic(CLMicroLocationSensorsLogic *this)
{
  NSObject *v2;
  uint8_t v3[8];
  void **v4;

  *(_QWORD *)this = &off_2511D9080;
  if (*((_BYTE *)this + 656) == 1 || *((_BYTE *)this + 657) == 1)
  {
    CLMicroLocationSensorsDriver::stopBleRssiSession((CLMicroLocationSensorsLogic *)((char *)this + 240));
    *((_WORD *)this + 328) = 0;
    objc_msgSend(*((id *)this + 83), "invalidate");
  }
  if (onceToken_MicroLocation_Default != -1)
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_72);
  v2 = logObject_MicroLocation_Default;
  if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v3 = 0;
    _os_log_impl(&dword_2419D9000, v2, OS_LOG_TYPE_DEFAULT, "CLMicroLocationSensorsLogic: DTOR", v3, 2u);
  }
  std::__hash_table<CLMicroLocationUtils::BleIdentityItem,CLMicroLocationUtils::BleIdentityItem::HashItem,CLMicroLocationUtils::BleIdentityItem::PredicateItem,std::allocator<CLMicroLocationUtils::BleIdentityItem>>::~__hash_table((uint64_t)this + 680);

  if (*((char *)this + 631) < 0)
    operator delete(*((void **)this + 76));
  std::__tree<CLMicroLocationProto::Measurement,CLEventsBuffer<CLMicroLocationProto::Measurement,double,ProtoMeasurementGetTime>::EventsComparator,std::allocator<CLMicroLocationProto::Measurement>>::destroy((uint64_t)this + 584, *((_QWORD **)this + 74));
  if (*((char *)this + 567) < 0)
    operator delete(*((void **)this + 68));
  std::__tree<CLMicroLocationProto::Measurement,CLEventsBuffer<CLMicroLocationProto::Measurement,double,ProtoMeasurementGetTime>::EventsComparator,std::allocator<CLMicroLocationProto::Measurement>>::destroy((uint64_t)this + 520, *((_QWORD **)this + 66));
  v4 = (void **)((char *)this + 472);
  std::vector<CLMiLoProtobufWrapper::WiFiRssi>::__destroy_vector::operator()[abi:ne180100](&v4);
  CLMicroLocationSensorsDriver::~CLMicroLocationSensorsDriver((CLMicroLocationSensorsLogic *)((char *)this + 240));

  CLMicroLocationProto::RecordingEvent::~RecordingEvent((CLMicroLocationSensorsLogic *)((char *)this + 8));
}

{
  CLMicroLocationSensorsLogic::~CLMicroLocationSensorsLogic(this);
  JUMPOUT(0x2426A04D4);
}

uint64_t CLMicroLocationSensorsLogic::onRecordingOrLocalizingInterrupted(CLMicroLocationSensorsLogic *this)
{
  NSObject *v2;
  int v3;
  uint64_t result;
  uint8_t v5[16];

  if (onceToken_MicroLocation_Default != -1)
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_72);
  v2 = logObject_MicroLocation_Default;
  if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v5 = 0;
    _os_log_impl(&dword_2419D9000, v2, OS_LOG_TYPE_DEFAULT, "Cancel a requested scan", v5, 2u);
  }
  if (*((_BYTE *)this + 657) == 1)
  {
    v3 = *((unsigned __int8 *)this + 656);
    CLMicroLocationSensorsDriver::stopBleRssiSession((CLMicroLocationSensorsLogic *)((char *)this + 240));
    *((_WORD *)this + 328) = 0;
    objc_msgSend(*((id *)this + 83), "invalidate");
    if (v3 == 2)
      CLMicroLocationSensorsLogic::onStartBackgroundSession(this);
  }
  result = CLMicroLocationSensorsDriver::cancelWifiScan((CLMicroLocationSensorsLogic *)((char *)this + 240));
  if (*((_BYTE *)this + 216))
  {
    result = CLMicroLocationSensorsDriver::resetRangingRate((CLMicroLocationSensorsLogic *)((char *)this + 240));
    *((_BYTE *)this + 216) = 0;
  }
  return result;
}

void CLMicroLocationSensorsLogic::onStartBackgroundSession(CLMicroLocationSensorsLogic *this)
{
  _BOOL8 v2;
  uint64_t v3;
  _QWORD v4[3];
  _BYTE v5[16];
  id v6;
  uint64_t v7;
  void **v8;

  if (objc_msgSend(*((id *)this + 81), "count"))
    v2 = *((_BYTE *)this + 179) != 0;
  else
    v2 = 0;
  v3 = *((_QWORD *)this + 81);
  memset(v4, 0, sizeof(v4));
  CLMicroLocationUtils::BleScanConfiguration::BleScanConfiguration(v5, 0, 1, v2, v3, v4, 0.0);
  v8 = (void **)v4;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v8);
  CLMicroLocationSensorsLogic::startBleRssiSession(this, (const CLMicroLocationUtils::BleScanConfiguration *)v5);
  v8 = (void **)&v7;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v8);

}

void sub_241AE4B1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  CLMicroLocationUtils::BleScanConfiguration::~BleScanConfiguration((id *)va);
  _Unwind_Resume(a1);
}

void CLMicroLocationSensorsLogic::updateTriggerMetrics(id *this, NSMutableDictionary *a2, uint64_t a3)
{
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  NSMutableDictionary *v9;

  v9 = a2;
  if (v9)
  {
    objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedInteger:", objc_msgSend(this[81], "count"));
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    -[NSMutableDictionary setObject:forKeyedSubscript:](v9, "setObject:forKeyedSubscript:", v5, CFSTR("BleIdentitiesFamilyCount"));

    objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedLong:", this[88]);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    -[NSMutableDictionary setObject:forKeyedSubscript:](v9, "setObject:forKeyedSubscript:", v6, CFSTR("BleIdentitiesSameAccountCount"));

    objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedLong:", (char *)this[88] + objc_msgSend(this[81], "count"));
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    -[NSMutableDictionary setObject:forKeyedSubscript:](v9, "setObject:forKeyedSubscript:", v7, CFSTR("BleIdentitiesTotal"));

    objc_msgSend(MEMORY[0x24BDD16E0], "numberWithBool:", a3);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    -[NSMutableDictionary setObject:forKeyedSubscript:](v9, "setObject:forKeyedSubscript:", v8, CFSTR("BleIsScanRequested"));

  }
}

void sub_241AE4C54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void CLMicroLocationSensorsLogic::updateBtScanPowerMetrics(uint64_t a1, _QWORD *a2)
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  int v7;
  int v8;

  *(_QWORD *)(a1 + 736) = *a2;
  +[ULDefaultsSingleton shared](ULDefaultsSingleton, "shared");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "defaultsDictionary");
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "ULBleActiveScanRate");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "objectForKey:", v5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  if (v6 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
    v7 = objc_msgSend(v6, "intValue");
  else
    v7 = objc_msgSend(&unk_2511EDC18, "intValue");
  v8 = v7;

  *(_DWORD *)(a1 + 744) = v8;
}

void sub_241AE4D5C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

double CLMicroLocationSensorsLogic::updateWifiScanPowerMetrics(CLMicroLocationSensorsLogic *this, const ULWiFiScanStrategy *a2)
{
  double result;

  result = *((double *)this + 91)
         + (double)CLMicroLocationSensorsDriver::getWiFiScanExpectedDuration((ULWiFiStrategyBuilder **)this + 30, a2)
         / 1000.0;
  *((double *)this + 91) = result;
  return result;
}

void CLMicroLocationSensorsLogic::startRecordingOrLocalizing(_BYTE *a1, const CLMicroLocationProto::RecordingEvent *a2, uint64_t a3, uint64_t *a4, void *a5)
{
  uint64_t v9;
  NSObject *v10;
  void **v11;
  uint64_t v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  int v17;
  int v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  double v23;
  double v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  int v29;
  int v30;
  NSObject *v31;
  uint64_t v32;
  void *v33;
  _QWORD *v34;
  char *v35;
  void *v36;
  void *v37;
  void *v38;
  void *v39;
  double v40;
  double v41;
  _BOOL8 v42;
  uint64_t v43;
  int v44;
  void *v45;
  void *v46;
  void *v47;
  void *v48;
  int v49;
  int v50;
  uint64_t v51;
  NSObject *v52;
  int v53;
  __int128 *v54;
  __int128 *v55;
  uint64_t v56;
  uint64_t v57;
  NSMutableDictionary *v58;
  std::string v59;
  void *__p[2];
  id v61;
  uint64_t v62;
  __int128 *v63;
  __int128 *v64;
  uint64_t v65;
  _QWORD v66[5];
  std::vector<std::string> *i;
  uint8_t buf[8];
  _BYTE v69[32];
  __int16 v70;
  uint64_t v71;
  __int16 v72;
  uint64_t v73;
  uint64_t v74;

  v74 = *MEMORY[0x24BDAC8D0];
  v58 = a5;
  CLMicroLocationProto::RecordingEvent::CopyFrom((CLMicroLocationProto::RecordingEvent *)(a1 + 8), a2);
  a1[152] = a3;
  v9 = *a4;
  if (!a1[168])
    a1[168] = 1;
  *((_QWORD *)a1 + 20) = v9;
  if (onceToken_MicroLocation_Default != -1)
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_72);
  v10 = (id)logObject_MicroLocation_Default;
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    CLMicroLocationUtils::scanActivityToString(a3, __p);
    if (!a1[168])
      std::__throw_bad_optional_access[abi:ne180100]();
    v11 = __p;
    if (SHIBYTE(v61) < 0)
      v11 = (void **)__p[0];
    v12 = *((_QWORD *)a1 + 20);
    *(_DWORD *)buf = 68289538;
    *(_DWORD *)&buf[4] = 0;
    *(_WORD *)v69 = 2082;
    *(_QWORD *)&v69[2] = "";
    *(_WORD *)&v69[10] = 2082;
    *(_QWORD *)&v69[12] = v11;
    *(_WORD *)&v69[20] = 2050;
    *(_QWORD *)&v69[22] = v12;
    _os_log_impl(&dword_2419D9000, v10, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"SensorsLogic, started activity\", \"ActivityType\":%{public, location:escape_only}s, \"recOrLocStartTime_s\":\"%{public}.09f\"}", buf, 0x26u);
    if (SHIBYTE(v61) < 0)
      operator delete(__p[0]);
  }

  a1[153] = 0;
  +[ULDefaultsSingleton shared](ULDefaultsSingleton, "shared");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v13, "defaultsDictionary");
  v14 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "ULUwbRangeRequestedUpdateRateEnabled");
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v14, "objectForKey:", v15);
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  if (v16 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
    v17 = objc_msgSend(v16, "BOOLValue");
  else
    v17 = objc_msgSend(MEMORY[0x24BDBD1C8], "BOOLValue");
  v18 = v17;

  if (v18 && !(*(unsigned int (**)(_BYTE *))(*(_QWORD *)a1 + 168))(a1))
  {
    +[ULDefaultsSingleton shared](ULDefaultsSingleton, "shared");
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v19, "defaultsDictionary");
    v20 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "ULUwbRangeRequestedUpdateDuration");
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v20, "objectForKey:", v21);
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    if (v22 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
      objc_msgSend(v22, "doubleValue");
    else
      objc_msgSend(&unk_2511ECF28, "doubleValue");
    v24 = v23;

    +[ULDefaultsSingleton shared](ULDefaultsSingleton, "shared");
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v25, "defaultsDictionary");
    v26 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "ULUwbRangeRequestedUpdateRate");
    v27 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v26, "objectForKey:", v27);
    v28 = (void *)objc_claimAutoreleasedReturnValue();
    if (v28 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
      v29 = objc_msgSend(v28, "integerValue");
    else
      v29 = objc_msgSend(&unk_2511EDBB8, "integerValue");
    v30 = v29;

    if (onceToken_MicroLocation_Default != -1)
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_72);
    v31 = logObject_MicroLocation_Default;
    if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 68289538;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)v69 = 2082;
      *(_QWORD *)&v69[2] = "";
      *(_WORD *)&v69[10] = 1026;
      *(_DWORD *)&v69[12] = v30;
      *(_WORD *)&v69[16] = 2050;
      *(double *)&v69[18] = v24;
      _os_log_impl(&dword_2419D9000, v31, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLMicroLocationSensorsLogic, uwb, set ranging rate\", \"rate\":%{public}d, \"duration\":\"%{public}f\"}", buf, 0x22u);
    }
    if (CLMicroLocationSensorsDriver::setRangingRate((uint64_t)(a1 + 240)))
    {
      v66[0] = MEMORY[0x24BDAC760];
      v66[1] = 3221225472;
      v66[2] = ___ZN27CLMicroLocationSensorsLogic26startRecordingOrLocalizingERKN20CLMicroLocationProto14RecordingEventEN20CLMicroLocationUtils12ScanActivityERKNSt3__16chrono10time_pointIN2cl6chrono19CFAbsoluteTimeClockENS7_8durationIeNS6_5ratioILl1ELl1EEEEEEEP19NSMutableDictionary_block_invoke;
      v66[3] = &__block_descriptor_40_e5_v8__0l;
      v66[4] = a1;
      +[ULTimerFactory timerOnPrimaryQueueWithInterval:repeats:block:](ULTimerFactory, "timerOnPrimaryQueueWithInterval:repeats:block:", 0, v66, v24);
      v32 = objc_claimAutoreleasedReturnValue();
      v33 = (void *)*((_QWORD *)a1 + 84);
      *((_QWORD *)a1 + 84) = v32;

    }
    a1[216] = 1;
  }
  v63 = 0;
  v64 = 0;
  v65 = 0;
  v34 = (_QWORD *)*((_QWORD *)a1 + 87);
  for (i = (std::vector<std::string> *)&v63; v34; v34 = (_QWORD *)*v34)
  {
    v35 = (char *)operator new(0x28uLL);
    *(_QWORD *)buf = v35;
    *(_OWORD *)v69 = xmmword_241BB2320;
    *(_OWORD *)v35 = 0u;
    *((_OWORD *)v35 + 1) = 0u;
    *(_QWORD *)(v35 + 29) = 0;
    boost::uuids::to_chars<char *>((uint64_t)(v34 + 2), v35);
    std::back_insert_iterator<std::vector<std::string>>::operator=[abi:ne180100](&i, (__int128 *)buf);
    if ((v69[15] & 0x80000000) != 0)
      operator delete(*(void **)buf);
  }
  +[ULDefaultsSingleton shared](ULDefaultsSingleton, "shared");
  v36 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v36, "defaultsDictionary");
  v37 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "ULBleRequestedScanLength");
  v38 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v37, "objectForKey:", v38);
  v39 = (void *)objc_claimAutoreleasedReturnValue();
  if (v39 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
    objc_msgSend(v39, "doubleValue");
  else
    objc_msgSend(&unk_2511ECF08, "doubleValue");
  v41 = v40;

  if (objc_msgSend(*((id *)a1 + 81), "count"))
    v42 = a1[179] != 0;
  else
    v42 = 0;
  v43 = *((_QWORD *)a1 + 81);
  memset(&v59, 0, sizeof(v59));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v59, v63, v64, 0xAAAAAAAAAAAAAAABLL * (((char *)v64 - (char *)v63) >> 3));
  CLMicroLocationUtils::BleScanConfiguration::BleScanConfiguration(__p, a3, 0, v42, v43, &v59, v41);
  *(_QWORD *)buf = &v59;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  v44 = a1[656];
  +[ULDefaultsSingleton shared](ULDefaultsSingleton, "shared");
  v45 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v45, "defaultsDictionary");
  v46 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "ULBleRequestedScanEnabled");
  v47 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v46, "objectForKey:", v47);
  v48 = (void *)objc_claimAutoreleasedReturnValue();
  if (v48 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
    v49 = objc_msgSend(v48, "BOOLValue");
  else
    v49 = objc_msgSend(MEMORY[0x24BDBD1C8], "BOOLValue");
  v50 = v49;

  v51 = v50
     && (objc_msgSend(*((id *)a1 + 81), "count") && a1[179] || v63 != v64)
     && (*(unsigned int (**)(_BYTE *))(*(_QWORD *)a1 + 168))(a1) == 0;
  if (onceToken_MicroLocation_Default != -1)
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_72);
  v52 = (id)logObject_MicroLocation_Default;
  if (os_log_type_enabled(v52, OS_LOG_TYPE_DEFAULT))
  {
    if (objc_msgSend(*((id *)a1 + 81), "count"))
      v53 = a1[179];
    else
      v53 = 0;
    v55 = v63;
    v54 = v64;
    v56 = objc_msgSend(*((id *)a1 + 81), "count");
    v57 = a1[179];
    *(_DWORD *)buf = 68290306;
    *(_DWORD *)&buf[4] = 0;
    *(_WORD *)v69 = 2082;
    *(_QWORD *)&v69[2] = "";
    *(_WORD *)&v69[10] = 1026;
    *(_DWORD *)&v69[12] = v51;
    *(_WORD *)&v69[16] = 1026;
    *(_DWORD *)&v69[18] = v53;
    *(_WORD *)&v69[22] = 2050;
    *(_QWORD *)&v69[24] = 0xAAAAAAAAAAAAAAABLL * (((char *)v54 - (char *)v55) >> 3);
    v70 = 2050;
    v71 = v56;
    v72 = 2050;
    v73 = v57;
    _os_log_impl(&dword_2419D9000, v52, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"SensorsLogic, should request short duration BLE scan\", \"should scan?\":%{public}hhd, \"should scan nearbyInfoV2 ?\":%{public}hhd, \"num of same account ble identifiers\":%{public}lu, \"num of entries in oObkey\":%{public}lu, \"is motion session running?\":%{public}lu}", buf, 0x3Cu);
  }

  if ((_DWORD)v51)
  {
    CLMicroLocationSensorsDriver::stopBleRssiSession((CLMicroLocationSensorsDriver *)(a1 + 240));
    *((_WORD *)a1 + 328) = 0;
    objc_msgSend(*((id *)a1 + 83), "invalidate");
    CLMicroLocationSensorsLogic::pauseBackgroundBleSessionIfNeeded((CLMicroLocationSensorsLogic *)a1, v44 == 1);
    CLMicroLocationSensorsLogic::startBleRssiSession((CLMicroLocationSensorsLogic *)a1, (const CLMicroLocationUtils::BleScanConfiguration *)__p);
  }
  else
  {
    CLMicroLocationSensorsLogic::pauseBackgroundBleSessionIfNeeded((CLMicroLocationSensorsLogic *)a1, v44 == 1);
    a1[657] = 1;
    CLMicroLocationSensorsLogic::onBLEScanRequestTimeout((CLMicroLocationSensorsLogic *)a1);
  }
  CLMicroLocationSensorsLogic::updateTriggerMetrics((id *)a1, v58, v51);
  *(_QWORD *)buf = &v62;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);

  *(_QWORD *)buf = &v63;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);

}

void sub_241AE5654(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,int a36,__int16 a37,char a38,char a39)
{
  void *v39;
  void *v40;
  void *v41;

  _Unwind_Resume(a1);
}

void ___ZN27CLMicroLocationSensorsLogic26startRecordingOrLocalizingERKN20CLMicroLocationProto14RecordingEventEN20CLMicroLocationUtils12ScanActivityERKNSt3__16chrono10time_pointIN2cl6chrono19CFAbsoluteTimeClockENS7_8durationIeNS6_5ratioILl1ELl1EEEEEEEP19NSMutableDictionary_block_invoke(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  uint8_t v3[16];

  v1 = *(_QWORD *)(a1 + 32);
  if (onceToken_MicroLocation_Default != -1)
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_72);
  v2 = logObject_MicroLocation_Default;
  if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v3 = 0;
    _os_log_impl(&dword_2419D9000, v2, OS_LOG_TYPE_DEFAULT, "CLMicroLocationSensorsLogic: custom range timer expired", v3, 2u);
  }
  if (*(_BYTE *)(v1 + 216))
  {
    CLMicroLocationSensorsDriver::resetRangingRate((CLMicroLocationSensorsDriver *)(v1 + 240));
    *(_BYTE *)(v1 + 216) = 0;
  }
}

void CLMicroLocationSensorsLogic::pauseBackgroundBleSessionIfNeeded(CLMicroLocationSensorsLogic *this, int a2)
{
  NSObject *v3;
  uint8_t v4[16];

  if (a2)
  {
    if (onceToken_MicroLocation_Default != -1)
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_72);
    v3 = logObject_MicroLocation_Default;
    if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v4 = 0;
      _os_log_impl(&dword_2419D9000, v3, OS_LOG_TYPE_DEFAULT, "setting BLE background-scan session status to paused", v4, 2u);
    }
    *((_BYTE *)this + 656) = 2;
  }
}

void CLMicroLocationSensorsLogic::startBleRssiSession(CLMicroLocationSensorsLogic *this, const CLMicroLocationUtils::BleScanConfiguration *a2)
{
  NSObject *v4;
  NSObject *v5;
  double v6;
  double v7;
  NSObject *v8;
  uint64_t v9;
  void *v10;
  _QWORD v11[5];
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  double v17;
  __int16 v18;
  uint64_t v19;
  __int16 v20;
  double v21;
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  if (*((_BYTE *)a2 + 9))
  {
    if (onceToken_MicroLocation_Default != -1)
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_72);
    v4 = logObject_MicroLocation_Default;
    if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_2419D9000, v4, OS_LOG_TYPE_DEFAULT, "Register for BLE background-scan session", buf, 2u);
    }
    *((_BYTE *)this + 656) = 1;
  }
  else
  {
    CLMicroLocationSensorsLogic::updateBtScanPowerMetrics((uint64_t)this, a2);
    if (onceToken_MicroLocation_Default != -1)
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_72);
    v5 = logObject_MicroLocation_Default;
    if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_2419D9000, v5, OS_LOG_TYPE_DEFAULT, "Register for BLE initiated-scan session", buf, 2u);
    }
    *((_BYTE *)this + 657) = 1;
  }
  CLMicroLocationSensorsDriver::startBleRssiSession((CLMicroLocationSensorsLogic *)((char *)this + 240), a2);
  if (!*((_BYTE *)a2 + 9))
  {
    v6 = *(double *)a2;
    v7 = cl::chrono::CFAbsoluteTimeClock::now();
    if (onceToken_MicroLocation_Default != -1)
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_72);
    v8 = logObject_MicroLocation_Default;
    if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289794;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2050;
      v17 = v7;
      v18 = 2050;
      v19 = (int)v6;
      v20 = 2050;
      v21 = v6 + v7;
      _os_log_impl(&dword_2419D9000, v8, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CBDiscovery, Starting BLE scan timer\", \"now\":\"%{public}.3f\", \"durationInSec\":%{public}lld, \"expected end time\":\"%{public}.3f\"}", buf, 0x30u);
    }
    v11[0] = MEMORY[0x24BDAC760];
    v11[1] = 3221225472;
    v11[2] = ___ZN27CLMicroLocationSensorsLogic19startBleRssiSessionERKN20CLMicroLocationUtils20BleScanConfigurationE_block_invoke;
    v11[3] = &__block_descriptor_40_e5_v8__0l;
    v11[4] = this;
    +[ULTimerFactory timerOnPrimaryQueueWithInterval:repeats:block:](ULTimerFactory, "timerOnPrimaryQueueWithInterval:repeats:block:", 0, v11, v6);
    v9 = objc_claimAutoreleasedReturnValue();
    v10 = (void *)*((_QWORD *)this + 83);
    *((_QWORD *)this + 83) = v9;

  }
}

void CLMicroLocationSensorsLogic::onBLEScanRequestTimeout(CLMicroLocationSensorsLogic *this)
{
  NSObject *v2;
  int v3;
  NSObject *v4;
  int v5;
  _BOOL4 v6;
  int v7;
  int v8;
  __int16 v9;
  const char *v10;
  __int16 v11;
  int v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  if (*((_BYTE *)this + 657) != 1)
  {
    if (onceToken_MicroLocation_Default != -1)
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_72);
    v2 = logObject_MicroLocation_Default;
    if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_ERROR))
    {
      v3 = *((unsigned __int8 *)this + 657);
      v7 = 68289282;
      v8 = 0;
      v9 = 2082;
      v10 = "";
      v11 = 1026;
      v12 = v3;
      _os_log_impl(&dword_2419D9000, v2, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"Ble requested scan timeout but the session state is not running\", \"fBleSessionStatusRequested\":%{public}u}", (uint8_t *)&v7, 0x18u);
    }
    if (onceToken_MicroLocation_Default != -1)
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_72);
    v4 = logObject_MicroLocation_Default;
    if (os_signpost_enabled((os_log_t)logObject_MicroLocation_Default))
    {
      v5 = *((unsigned __int8 *)this + 657);
      v7 = 68289282;
      v8 = 0;
      v9 = 2082;
      v10 = "";
      v11 = 1026;
      v12 = v5;
      _os_signpost_emit_with_name_impl(&dword_2419D9000, v4, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Ble requested scan timeout but the session state is not running", "{\"msg%{public}.0s\":\"Ble requested scan timeout but the session state is not running\", \"fBleSessionStatusRequested\":%{public}u}", (uint8_t *)&v7, 0x18u);
    }
  }
  v6 = *((unsigned __int8 *)this + 656) == 2;
  CLMicroLocationSensorsDriver::stopBleRssiSession((CLMicroLocationSensorsLogic *)((char *)this + 240));
  *((_BYTE *)this + 656) = 0;
  *((_BYTE *)this + 657) = 0;
  objc_msgSend(*((id *)this + 83), "invalidate");
  if (v6)
    CLMicroLocationSensorsLogic::onStartBackgroundSession(this);
  CLMicroLocationSensorsLogic::requestWiFiScan(this);
}

void CLMicroLocationUtils::BleScanConfiguration::~BleScanConfiguration(id *this)
{
  void **v2;

  v2 = this + 3;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);

}

void CLMicroLocationSensorsLogic::onRecordingOrLocalizationStop(CLMicroLocationSensorsLogic *this)
{
  void **v2[3];
  CLMicroLocationProto::Measurement *v3[3];
  void ***v4;

  if (*((_BYTE *)this + 216))
  {
    CLMicroLocationSensorsDriver::resetRangingRate((CLMicroLocationSensorsLogic *)((char *)this + 240));
    *((_BYTE *)this + 216) = 0;
  }
  CLMicroLocationSensorsLogic::getBleMeasurements(this, (uint64_t *)v3);
  CLMicroLocationLogic::onAvailableMeasurements(*((CLMicroLocationProto::Measurement **)this + 28), v3);
  CLMicroLocationSensorsLogic::getUwbMeasurements(this, (uint64_t *)v2);
  CLMicroLocationLogic::onAvailableMeasurements(*((CLMicroLocationProto::Measurement **)this + 28), (CLMicroLocationProto::Measurement **)v2);
  if (*((_BYTE *)this + 168))
    *((_BYTE *)this + 168) = 0;
  v4 = v2;
  std::vector<CLMiLoProtobufWrapper::Measurement>::__destroy_vector::operator()[abi:ne180100]((void ***)&v4);
  v2[0] = (void **)v3;
  std::vector<CLMiLoProtobufWrapper::Measurement>::__destroy_vector::operator()[abi:ne180100](v2);
}

void sub_241AE5E98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, uint64_t a12, char a13)
{
  uint64_t v13;
  uint64_t v14;

  *(_QWORD *)(v14 - 24) = v13;
  std::vector<CLMiLoProtobufWrapper::Measurement>::__destroy_vector::operator()[abi:ne180100]((void ***)(v14 - 24));
  a10 = (void **)&a13;
  std::vector<CLMiLoProtobufWrapper::Measurement>::__destroy_vector::operator()[abi:ne180100](&a10);
  _Unwind_Resume(a1);
}

void CLMicroLocationSensorsLogic::getBleMeasurements(CLMicroLocationSensorsLogic *this@<X0>, uint64_t *a2@<X8>)
{
  double v4;
  double v5;
  double v6;
  double v7;
  __objc2_class *v8;
  __objc2_class *v9;
  double v10;
  NSObject *v11;
  unint64_t v12;
  double v13;
  NSObject *v14;
  NSObject *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  double v20;
  double v21;
  size_t LatestEvents;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  double v26;
  CLMicroLocationProto::Measurement *v27;
  float v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint8x8_t v35;
  unint64_t v36;
  _QWORD *v37;
  _QWORD *v38;
  unint64_t v39;
  uint64_t v40;
  double v41;
  uint64_t v42;
  uint64_t v43;
  float v44;
  uint64_t v45;
  uint64_t v46;
  unsigned __int8 *v47;
  uint64_t v48;
  unsigned __int8 *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  unsigned __int8 *v54;
  size_t v55;
  float v56;
  _BOOL4 v57;
  unint64_t v58;
  unint64_t v59;
  size_t v60;
  void *v61;
  uint64_t v62;
  _QWORD **v63;
  size_t v64;
  uint8x8_t v65;
  uint8x8_t v66;
  uint64_t v67;
  CLMicroLocationProto::Measurement *v68;
  _QWORD *i;
  size_t v70;
  _QWORD *v71;
  size_t *v72;
  unint64_t v73;
  _QWORD *v74;
  uint64_t *v75;
  CLMicroLocationProto::Measurement *v76;
  const CLMicroLocationProto::Measurement *v77;
  NSObject *v78;
  uint64_t v79;
  NSObject *v80;
  _BOOL4 v81;
  const CLMicroLocationProto::Measurement *v82;
  const CLMicroLocationProto::Measurement *v83;
  CLMicroLocationProto::Measurement *v84;
  uint64_t v85;
  NSObject *v86;
  uint64_t v87;
  uint64_t v88;
  float v89;
  int v90;
  _OWORD *v91;
  const char *v92;
  uint64_t v93;
  uint64_t *v94;
  void *v96;
  __int128 v97;
  void *__p[2];
  __int128 v99;
  float v100;
  uint64_t v101;
  uint64_t v102;
  char v103;
  double v104;
  uint8_t v105[4];
  int v106;
  __int16 v107;
  const char *v108;
  __int16 v109;
  int v110;
  __int16 v111;
  const char *v112;
  __int16 v113;
  uint64_t *v114;
  __int16 v115;
  uint64_t v116;
  _BYTE v117[16];
  unsigned __int8 v118;
  _BYTE buf[28];
  __int16 v120;
  double v121;
  uint64_t v122;
  uint64_t v123;

  v123 = *MEMORY[0x24BDAC8D0];
  if (!*((_BYTE *)this + 168))
  {
    if (onceToken_MicroLocation_Default != -1)
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_72);
    v14 = logObject_MicroLocation_Default;
    if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 68289026;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)&buf[8] = 2082;
      *(_QWORD *)&buf[10] = "";
      _os_log_impl(&dword_2419D9000, v14, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"CLMicroLocationSensorsLogic::getBleMeasurements, fState.fStartTime is nullopt!\"}", buf, 0x12u);
    }
    if (onceToken_MicroLocation_Default != -1)
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_72);
    v15 = logObject_MicroLocation_Default;
    if (os_signpost_enabled((os_log_t)logObject_MicroLocation_Default))
    {
      *(_DWORD *)buf = 68289026;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)&buf[8] = 2082;
      *(_QWORD *)&buf[10] = "";
      _os_signpost_emit_with_name_impl(&dword_2419D9000, v15, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "CLMicroLocationSensorsLogic::getBleMeasurements, fState.fStartTime is nullopt!", "{\"msg%{public}.0s\":\"CLMicroLocationSensorsLogic::getBleMeasurements, fState.fStartTime is nullopt!\"}", buf, 0x12u);
    }
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
    return;
  }
  v4 = cl::chrono::CFAbsoluteTimeClock::now();
  if (!*((_BYTE *)this + 168))
    std::__throw_bad_optional_access[abi:ne180100]();
  v5 = v4;
  v6 = v4 - *((double *)this + 20);
  v7 = ULSettings::get<ULSettings::ScanDurationThreshold>();
  v104 = 0.0;
  v8 = ULRapportMonitor;
  v9 = ULRapportMonitor;
  if (v6 < v7)
  {
    if (onceToken_MicroLocation_Default != -1)
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_72);
    v12 = (unint64_t)(id)logObject_MicroLocation_Default;
    if (os_log_type_enabled((os_log_t)v12, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 68289282;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)&buf[8] = 2082;
      *(_QWORD *)&buf[10] = "";
      *(_WORD *)&buf[18] = 2050;
      *(double *)&buf[20] = v6;
      _os_log_impl(&dword_2419D9000, (os_log_t)v12, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"BLE Scan duration\", \"duration\":\"%{public}.5f\"}", buf, 0x1Cu);
    }

    if (!*((_BYTE *)this + 168))
      std::__throw_bad_optional_access[abi:ne180100]();
    +[ULDefaultsSingleton shared](ULDefaultsSingleton, "shared");
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v16, "defaultsDictionary");
    v17 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "ULBleScanMaximalAgeForValidityFromScanStart");
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v17, "objectForKey:", v18);
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    if (v19 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
      objc_msgSend(v19, "doubleValue");
    else
      objc_msgSend(&unk_2511EDB58, "doubleValue");
    v21 = v20;

    v13 = *((double *)this + 20) - v21;
  }
  else
  {
    v10 = v7;
    if (onceToken_MicroLocation_Default != -1)
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_72);
    v11 = (id)logObject_MicroLocation_Default;
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 68289538;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)&buf[8] = 2082;
      *(_QWORD *)&buf[10] = "";
      *(_WORD *)&buf[18] = 2050;
      *(double *)&buf[20] = v6;
      v120 = 2050;
      v121 = v10;
      _os_log_impl(&dword_2419D9000, v11, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"Scan duration is exceeded threshold\", \"duration\":\"%{public}.5f\", \"threshold\":\"%{public}.5f\"}", buf, 0x26u);
    }

    if (onceToken_MicroLocation_Default != -1)
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_72);
    v12 = (unint64_t)(id)logObject_MicroLocation_Default;
    if (os_signpost_enabled((os_log_t)v12))
    {
      *(_DWORD *)buf = 68289538;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)&buf[8] = 2082;
      *(_QWORD *)&buf[10] = "";
      *(_WORD *)&buf[18] = 2050;
      *(double *)&buf[20] = v6;
      v120 = 2050;
      v121 = v10;
      _os_signpost_emit_with_name_impl(&dword_2419D9000, (os_log_t)v12, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Scan duration is exceeded threshold", "{\"msg%{public}.0s\":\"Scan duration is exceeded threshold\", \"duration\":\"%{public}.5f\", \"threshold\":\"%{public}.5f\"}", buf, 0x26u);
    }

    v13 = v5 - v10;
  }
  v104 = v13;
  v103 = 0;
  LatestEvents = (size_t)CLEventsBuffer<CLMicroLocationProto::Measurement,double,ProtoMeasurementGetTime>::getLatestEvents((uint64_t)this + 512, &v104, &v103, (CLMicroLocationProto::Measurement *)&v101);
  *(_OWORD *)__p = 0u;
  v99 = 0u;
  v100 = 1.0;
  v23 = v101;
  v24 = v102;
  if (v101 == v102)
  {
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
    goto LABEL_164;
  }
  do
  {
    if ((*(_BYTE *)(v23 + 72) & 0x40) == 0)
      goto LABEL_145;
    v25 = *(_QWORD *)(v23 + 48);
    if (v25)
    {
      v26 = *(double *)(v25 + 8);
LABEL_37:
      v28 = *(float *)(v25 + 20);
      goto LABEL_38;
    }
    v27 = (CLMicroLocationProto::Measurement *)CLMicroLocationProto::Measurement::default_instance((CLMicroLocationProto::Measurement *)LatestEvents);
    v25 = *(_QWORD *)(v23 + 48);
    v26 = *(double *)(*((_QWORD *)v27 + 6) + 8);
    if (v25)
      goto LABEL_37;
    v68 = (CLMicroLocationProto::Measurement *)CLMicroLocationProto::Measurement::default_instance(v27);
    v25 = *(_QWORD *)(v23 + 48);
    v28 = *(float *)(*((_QWORD *)v68 + 6) + 20);
    if (!v25)
      v25 = *(_QWORD *)(CLMicroLocationProto::Measurement::default_instance(v68) + 48);
LABEL_38:
    LatestEvents = boost::hash<std::string>::operator()((uint64_t)v105, *(char **)(v25 + 48));
    v29 = 0xC6A4A7935BD1E995 * *(_QWORD *)&v26;
    if (v26 == 0.0)
      v29 = 0;
    v30 = 0x35A98F4D286A90B9 * (v29 ^ (v29 >> 47)) + 3864292196u;
    v31 = 0xC6A4A7935BD1E995 * LODWORD(v28);
    if (v28 == 0.0)
      v31 = 0;
    v32 = (0xC6A4A7935BD1E995 * (v30 ^ (0xC6A4A7935BD1E995 * (v31 ^ (v31 >> 47)))) + 3864292196u) ^ (0xC6A4A7935BD1E995 * ((0xC6A4A7935BD1E995 * LatestEvents) ^ ((0xC6A4A7935BD1E995 * LatestEvents) >> 47)));
    v33 = 0xC6A4A7935BD1E995 * v32 + 3864292196u;
    v34 = (unint64_t)__p[1];
    if (__p[1])
    {
      v35 = (uint8x8_t)vcnt_s8((int8x8_t)__p[1]);
      v35.i16[0] = vaddlv_u8(v35);
      v36 = v35.u32[0];
      if (v35.u32[0] > 1uLL)
      {
        v12 = 0xC6A4A7935BD1E995 * v32 + 3864292196u;
        if ((void *)v33 >= __p[1])
          v12 = v33 % (unint64_t)__p[1];
      }
      else
      {
        v12 = ((unint64_t)__p[1] - 1) & v33;
      }
      v37 = (_QWORD *)*((_QWORD *)__p[0] + v12);
      if (v37)
      {
        v38 = (_QWORD *)*v37;
        if (*v37)
        {
          do
          {
            v39 = v38[1];
            if (v39 == v33)
            {
              v40 = *(_QWORD *)(v38[2] + 48);
              if (!v40)
              {
                LatestEvents = CLMicroLocationProto::Measurement::default_instance((CLMicroLocationProto::Measurement *)LatestEvents);
                v40 = *(_QWORD *)(LatestEvents + 48);
              }
              v41 = *(double *)(v40 + 8);
              v42 = *(_QWORD *)(v23 + 48);
              if (!v42)
              {
                LatestEvents = CLMicroLocationProto::Measurement::default_instance((CLMicroLocationProto::Measurement *)LatestEvents);
                v42 = *(_QWORD *)(LatestEvents + 48);
              }
              if (v41 == *(double *)(v42 + 8))
              {
                v43 = *(_QWORD *)(v38[2] + 48);
                if (!v43)
                {
                  LatestEvents = CLMicroLocationProto::Measurement::default_instance((CLMicroLocationProto::Measurement *)LatestEvents);
                  v43 = *(_QWORD *)(LatestEvents + 48);
                }
                v44 = *(float *)(v43 + 20);
                v45 = *(_QWORD *)(v23 + 48);
                if (!v45)
                {
                  LatestEvents = CLMicroLocationProto::Measurement::default_instance((CLMicroLocationProto::Measurement *)LatestEvents);
                  v45 = *(_QWORD *)(LatestEvents + 48);
                }
                if (v44 == *(float *)(v45 + 20))
                {
                  v46 = *(_QWORD *)(v38[2] + 48);
                  if (!v46)
                  {
                    LatestEvents = CLMicroLocationProto::Measurement::default_instance((CLMicroLocationProto::Measurement *)LatestEvents);
                    v46 = *(_QWORD *)(LatestEvents + 48);
                  }
                  v47 = *(unsigned __int8 **)(v46 + 48);
                  v48 = *(_QWORD *)(v23 + 48);
                  if (!v48)
                  {
                    LatestEvents = CLMicroLocationProto::Measurement::default_instance((CLMicroLocationProto::Measurement *)LatestEvents);
                    v48 = *(_QWORD *)(LatestEvents + 48);
                  }
                  v49 = *(unsigned __int8 **)(v48 + 48);
                  v50 = v47[23];
                  if ((v50 & 0x80u) == 0)
                    v51 = v47[23];
                  else
                    v51 = *((_QWORD *)v47 + 1);
                  v52 = v49[23];
                  v53 = (char)v52;
                  if ((v52 & 0x80u) != 0)
                    v52 = *((_QWORD *)v49 + 1);
                  if (v51 == v52)
                  {
                    if (v53 >= 0)
                      v54 = v49;
                    else
                      v54 = *(unsigned __int8 **)v49;
                    if ((v50 & 0x80) != 0)
                    {
                      LatestEvents = memcmp(*(const void **)v47, v54, *((_QWORD *)v47 + 1));
                      if (!(_DWORD)LatestEvents)
                        goto LABEL_145;
                    }
                    else
                    {
                      if (!v47[23])
                        goto LABEL_145;
                      while (*v47 == *v54)
                      {
                        ++v47;
                        ++v54;
                        if (!--v50)
                          goto LABEL_145;
                      }
                    }
                  }
                }
              }
            }
            else
            {
              if (v36 > 1)
              {
                if ((void *)v39 >= __p[1])
                  v39 %= (unint64_t)__p[1];
              }
              else
              {
                v39 &= (unint64_t)__p[1] - 1;
              }
              if (v39 != v12)
                break;
            }
            v38 = (_QWORD *)*v38;
          }
          while (v38);
        }
      }
    }
    LatestEvents = (size_t)operator new(0x18uLL);
    v55 = LatestEvents;
    *(_QWORD *)LatestEvents = 0;
    *(_QWORD *)(LatestEvents + 8) = v33;
    *(_QWORD *)(LatestEvents + 16) = v23;
    v56 = (float)(unint64_t)(*((_QWORD *)&v99 + 1) + 1);
    if (!v34 || (float)(v100 * (float)v34) < v56)
    {
      v57 = (v34 & (v34 - 1)) == 0;
      if (v34 < 3)
        v57 = 0;
      v58 = (2 * v34) | !v57;
      v59 = vcvtps_u32_f32(v56 / v100);
      if (v58 <= v59)
        v60 = v59;
      else
        v60 = v58;
      if (v60 == 1)
      {
        v60 = 2;
      }
      else if ((v60 & (v60 - 1)) != 0)
      {
        LatestEvents = std::__next_prime(v60);
        v60 = LatestEvents;
      }
      v34 = (unint64_t)__p[1];
      if ((void *)v60 > __p[1])
        goto LABEL_99;
      if ((void *)v60 < __p[1])
      {
        LatestEvents = vcvtps_u32_f32((float)*((unint64_t *)&v99 + 1) / v100);
        if (__p[1] < (void *)3
          || (v66 = (uint8x8_t)vcnt_s8((int8x8_t)__p[1]), v66.i16[0] = vaddlv_u8(v66), v66.u32[0] > 1uLL))
        {
          LatestEvents = std::__next_prime(LatestEvents);
        }
        else
        {
          v67 = 1 << -(char)__clz(LatestEvents - 1);
          if (LatestEvents >= 2)
            LatestEvents = v67;
        }
        if (v60 <= LatestEvents)
          v60 = LatestEvents;
        if ((void *)v60 >= __p[1])
        {
          v34 = (unint64_t)__p[1];
        }
        else
        {
          if (v60)
          {
LABEL_99:
            if (v60 >> 61)
              std::__throw_bad_array_new_length[abi:ne180100]();
            v61 = operator new(8 * v60);
            LatestEvents = (size_t)__p[0];
            __p[0] = v61;
            if (LatestEvents)
              operator delete((void *)LatestEvents);
            v62 = 0;
            __p[1] = (void *)v60;
            do
              *((_QWORD *)__p[0] + v62++) = 0;
            while (v60 != v62);
            v63 = (_QWORD **)v99;
            if ((_QWORD)v99)
            {
              v64 = *(_QWORD *)(v99 + 8);
              v65 = (uint8x8_t)vcnt_s8((int8x8_t)v60);
              v65.i16[0] = vaddlv_u8(v65);
              if (v65.u32[0] > 1uLL)
              {
                if (v64 >= v60)
                  v64 %= v60;
              }
              else
              {
                v64 &= v60 - 1;
              }
              *((_QWORD *)__p[0] + v64) = &v99;
              for (i = *v63; i; v64 = v70)
              {
                v70 = i[1];
                if (v65.u32[0] > 1uLL)
                {
                  if (v70 >= v60)
                    v70 %= v60;
                }
                else
                {
                  v70 &= v60 - 1;
                }
                if (v70 != v64)
                {
                  if (!*((_QWORD *)__p[0] + v70))
                  {
                    *((_QWORD *)__p[0] + v70) = v63;
                    goto LABEL_126;
                  }
                  *v63 = (_QWORD *)*i;
                  *i = **((_QWORD **)__p[0] + v70);
                  **((_QWORD **)__p[0] + v70) = i;
                  i = v63;
                }
                v70 = v64;
LABEL_126:
                v63 = (_QWORD **)i;
                i = (_QWORD *)*i;
              }
            }
            v34 = v60;
            goto LABEL_130;
          }
          LatestEvents = (size_t)__p[0];
          __p[0] = 0;
          if (LatestEvents)
            operator delete((void *)LatestEvents);
          v34 = 0;
          __p[1] = 0;
        }
      }
LABEL_130:
      if ((v34 & (v34 - 1)) != 0)
      {
        if (v33 >= v34)
          v12 = v33 % v34;
        else
          v12 = v33;
      }
      else
      {
        v12 = (v34 - 1) & v33;
      }
    }
    v71 = __p[0];
    v72 = (size_t *)*((_QWORD *)__p[0] + v12);
    if (v72)
    {
      *(_QWORD *)v55 = *v72;
LABEL_143:
      *v72 = v55;
      goto LABEL_144;
    }
    *(_QWORD *)v55 = v99;
    *(_QWORD *)&v99 = v55;
    v71[v12] = &v99;
    if (*(_QWORD *)v55)
    {
      v73 = *(_QWORD *)(*(_QWORD *)v55 + 8);
      if ((v34 & (v34 - 1)) != 0)
      {
        if (v73 >= v34)
          v73 %= v34;
      }
      else
      {
        v73 &= v34 - 1;
      }
      v72 = (size_t *)((char *)__p[0] + 8 * v73);
      goto LABEL_143;
    }
LABEL_144:
    ++*((_QWORD *)&v99 + 1);
LABEL_145:
    v23 += 80;
  }
  while (v23 != v24);
  v74 = (_QWORD *)v99;
  v75 = a2;
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  v9 = ULRapportMonitor;
  v8 = ULRapportMonitor;
  if (v74)
  {
    v76 = 0;
    do
    {
      v77 = (const CLMicroLocationProto::Measurement *)v74[2];
      if ((unint64_t)v76 >= v75[2])
      {
        v76 = (CLMicroLocationProto::Measurement *)std::vector<CLMiLoProtobufWrapper::Measurement>::__emplace_back_slow_path<CLMicroLocationProto::Measurement const>(v75, v77);
        v75 = a2;
      }
      else
      {
        CLMicroLocationProto::Measurement::Measurement(v76, v77);
        *((_DWORD *)v76 + 20) = 0;
        v76 = (CLMicroLocationProto::Measurement *)((char *)v76 + 88);
        v75 = a2;
        a2[1] = (uint64_t)v76;
      }
      v75[1] = (uint64_t)v76;
      v74 = (_QWORD *)*v74;
    }
    while (v74);
  }
LABEL_164:
  if (v8[97].isa != (__objc2_class *)-1)
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_72);
  v78 = v9[96].vtable;
  if (os_log_type_enabled(v78, OS_LOG_TYPE_DEFAULT))
  {
    v79 = 0x2E8BA2E8BA2E8BA3 * ((a2[1] - *a2) >> 3);
    *(_DWORD *)buf = 134218240;
    *(_QWORD *)&buf[4] = 0xCCCCCCCCCCCCCCCDLL * ((v102 - v101) >> 4);
    *(_WORD *)&buf[12] = 2048;
    *(_QWORD *)&buf[14] = v79;
    _os_log_impl(&dword_2419D9000, v78, OS_LOG_TYPE_DEFAULT, "Read BLE spyscan buffer in Logic!. read %lu measurements (%lu unique)", buf, 0x16u);
  }

  if (v8[97].isa != (__objc2_class *)-1)
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_72);
  v80 = v9[96].vtable;
  v81 = os_log_type_enabled(v80, OS_LOG_TYPE_DEBUG);

  if (v81)
  {
    v82 = (const CLMicroLocationProto::Measurement *)*a2;
    v83 = (const CLMicroLocationProto::Measurement *)a2[1];
    if ((const CLMicroLocationProto::Measurement *)*a2 != v83)
    {
      do
      {
        v84 = (CLMicroLocationProto::Measurement *)CLMicroLocationProto::Measurement::Measurement((CLMicroLocationProto::Measurement *)buf, v82);
        v85 = v122;
        if (!v122)
          v85 = *(_QWORD *)(CLMicroLocationProto::Measurement::default_instance(v84) + 48);
        CLMicroLocationProtobufHelper::uuidFromProtobuf(*(uint64_t ***)(v85 + 48), v117);
        if (onceToken_MicroLocationQE_Default != -1)
          dispatch_once(&onceToken_MicroLocationQE_Default, &__block_literal_global_276);
        v86 = (id)logObject_MicroLocationQE_Default;
        v87 = os_log_type_enabled(v86, OS_LOG_TYPE_DEBUG);
        if ((_DWORD)v87)
        {
          v88 = v122;
          if (!v122)
          {
            v87 = CLMicroLocationProto::Measurement::default_instance((CLMicroLocationProto::Measurement *)v87);
            v88 = *(_QWORD *)(v87 + 48);
          }
          v89 = *(float *)(v88 + 20);
          v90 = v118;
          if (v118)
          {
            v91 = operator new(0x28uLL);
            v96 = v91;
            v97 = xmmword_241BB2320;
            *v91 = 0u;
            v91[1] = 0u;
            *(_QWORD *)((char *)v91 + 29) = 0;
            v87 = (uint64_t)boost::uuids::to_chars<char *>((uint64_t)v117, v91);
            if (v97 >= 0)
              v92 = (const char *)&v96;
            else
              v92 = (const char *)v96;
          }
          else
          {
            v92 = "not available";
          }
          v93 = v122;
          if (!v122)
            v93 = *(_QWORD *)(CLMicroLocationProto::Measurement::default_instance((CLMicroLocationProto::Measurement *)v87)
                            + 48);
          v94 = *(uint64_t **)(v93 + 40);
          if (*((char *)v94 + 23) < 0)
            v94 = (uint64_t *)*v94;
          *(_DWORD *)v105 = 68290051;
          v106 = 0;
          v107 = 2082;
          v108 = "";
          v109 = 1025;
          v110 = (int)v89;
          v111 = 2081;
          v112 = v92;
          v113 = 2081;
          v114 = v94;
          v115 = 2050;
          v116 = *(_QWORD *)&buf[8];
          _os_log_impl(&dword_2419D9000, v86, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"BLE cached scan\", \"rssi\":%{private}d, \"uuid\":%{private, location:escape_only}s, \"model\":%{private, location:escape_only}s, \"time_s\":\"%{public}.09f\"}", v105, 0x36u);
          if (v90 && SHIBYTE(v97) < 0)
            operator delete(v96);
        }

        CLMicroLocationProto::Measurement::~Measurement((CLMicroLocationProto::Measurement *)buf);
        v82 = (const CLMicroLocationProto::Measurement *)((char *)v82 + 88);
      }
      while (v82 != v83);
    }
  }
  if (v103)
  {
    std::string::basic_string[abi:ne180100]<0>(buf, "BLE spyscan buffer overflow");
    CLMicroLocationErrorHandling::reportError((uint64_t *)buf);
    if ((buf[23] & 0x80000000) != 0)
      operator delete(*(void **)buf);
  }
  std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>>>::~__hash_table((uint64_t)__p);
  *(_QWORD *)buf = &v101;
  std::vector<CLMicroLocationProto::Measurement>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
}

void sub_241AE6C9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,void *__p,uint64_t a41,int a42,__int16 a43,char a44,char a45)
{
  void *v45;
  void *v46;
  void *v47;

  _Unwind_Resume(a1);
}

void CLMicroLocationSensorsLogic::getUwbMeasurements(CLMicroLocationSensorsLogic *this@<X0>, uint64_t *a2@<X8>)
{
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  NSObject *v9;
  NSObject *v10;
  double v11;
  NSObject *v12;
  NSObject *v13;
  NSObject *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  double v19;
  double v20;
  NSObject *v21;
  _BOOL8 v22;
  const CLMicroLocationProto::Measurement *v23;
  const CLMicroLocationProto::Measurement *v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  NSObject *v28;
  CLMicroLocationProto::Measurement *v29;
  int v30;
  _OWORD *v31;
  const char *p_p;
  uint64_t v33;
  float v34;
  CFAbsoluteTime v35;
  uint64_t *v36;
  void *__p;
  __int128 v38;
  const CLMicroLocationProto::Measurement *v39;
  const CLMicroLocationProto::Measurement *v40;
  char v41;
  double v42;
  uint64_t *v43;
  _BYTE v44[16];
  unsigned __int8 v45;
  _BYTE buf[42];
  int v47;
  uint64_t v48;

  v48 = *MEMORY[0x24BDAC8D0];
  if (*((_BYTE *)this + 168))
  {
    v4 = cl::chrono::CFAbsoluteTimeClock::now();
    if (!*((_BYTE *)this + 168))
      std::__throw_bad_optional_access[abi:ne180100]();
    v5 = v4;
    v6 = v4 - *((double *)this + 20);
    v7 = ULSettings::get<ULSettings::ScanDurationThreshold>();
    v42 = 0.0;
    v36 = a2;
    if (v6 < v7)
    {
      if (onceToken_MicroLocation_Default != -1)
        dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_72);
      v14 = logObject_MicroLocation_Default;
      if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 68289282;
        *(_DWORD *)&buf[4] = 0;
        *(_WORD *)&buf[8] = 2082;
        *(_QWORD *)&buf[10] = "";
        *(_WORD *)&buf[18] = 2050;
        *(double *)&buf[20] = v6;
        _os_log_impl(&dword_2419D9000, v14, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"UWB Scan duration\", \"duration\":\"%{public}.5f\"}", buf, 0x1Cu);
      }
      if (!*((_BYTE *)this + 168))
        std::__throw_bad_optional_access[abi:ne180100]();
      +[ULDefaultsSingleton shared](ULDefaultsSingleton, "shared");
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v15, "defaultsDictionary");
      v16 = (void *)objc_claimAutoreleasedReturnValue();

      objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "ULUwbRangeMaximalAgeForValidityFromScanStart");
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v16, "objectForKey:", v17);
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      if (v18 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
        objc_msgSend(v18, "doubleValue");
      else
        objc_msgSend(&unk_2511ECF18, "doubleValue");
      v20 = v19;

      v11 = *((double *)this + 20) - v20;
    }
    else
    {
      v8 = v7;
      if (onceToken_MicroLocation_Default != -1)
        dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_72);
      v9 = logObject_MicroLocation_Default;
      if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 68289538;
        *(_DWORD *)&buf[4] = 0;
        *(_WORD *)&buf[8] = 2082;
        *(_QWORD *)&buf[10] = "";
        *(_WORD *)&buf[18] = 2050;
        *(double *)&buf[20] = v6;
        *(_WORD *)&buf[28] = 2050;
        *(double *)&buf[30] = v8;
        _os_log_impl(&dword_2419D9000, v9, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"Scan duration is exceeded threshold\", \"duration\":\"%{public}.5f\", \"threshold\":\"%{public}.5f\"}", buf, 0x26u);
      }
      if (onceToken_MicroLocation_Default != -1)
        dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_72);
      v10 = logObject_MicroLocation_Default;
      if (os_signpost_enabled((os_log_t)logObject_MicroLocation_Default))
      {
        *(_DWORD *)buf = 68289538;
        *(_DWORD *)&buf[4] = 0;
        *(_WORD *)&buf[8] = 2082;
        *(_QWORD *)&buf[10] = "";
        *(_WORD *)&buf[18] = 2050;
        *(double *)&buf[20] = v6;
        *(_WORD *)&buf[28] = 2050;
        *(double *)&buf[30] = v8;
        _os_signpost_emit_with_name_impl(&dword_2419D9000, v10, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Scan duration is exceeded threshold", "{\"msg%{public}.0s\":\"Scan duration is exceeded threshold\", \"duration\":\"%{public}.5f\", \"threshold\":\"%{public}.5f\"}", buf, 0x26u);
      }
      v11 = v5 - v8;
    }
    v42 = v11;
    v41 = 0;
    CLEventsBuffer<CLMicroLocationProto::Measurement,double,ProtoMeasurementGetTime>::getLatestEvents((uint64_t)this + 576, &v42, &v41, (CLMicroLocationProto::Measurement *)&v39);
    if (v41)
    {
      std::string::basic_string[abi:ne180100]<0>(buf, "UWB range buffer overflow");
      CLMicroLocationErrorHandling::reportError((uint64_t *)buf);
      if ((buf[23] & 0x80000000) != 0)
        operator delete(*(void **)buf);
    }
    if (onceToken_MicroLocation_Default != -1)
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_72);
    v21 = logObject_MicroLocation_Default;
    if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 134349056;
      *(_QWORD *)&buf[4] = 0xCCCCCCCCCCCCCCCDLL * ((v40 - v39) >> 4);
      _os_log_impl(&dword_2419D9000, v21, OS_LOG_TYPE_DEBUG, "uwb cached scan, read %{public}lu measurements", buf, 0xCu);
    }
    if (onceToken_MicroLocation_Default != -1)
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_72);
    v22 = os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEBUG);
    v24 = v39;
    v23 = v40;
    if (v22)
    {
      if (v40 == v39)
      {
        *v36 = 0;
        v36[1] = 0;
        v36[2] = 0;
LABEL_64:
        *(_QWORD *)buf = &v39;
        std::vector<CLMicroLocationProto::Measurement>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
        return;
      }
      v25 = 0;
      v26 = 0;
      do
      {
        v27 = *(_QWORD *)((char *)v24 + v25 + 56);
        if (!v27)
          v27 = *(_QWORD *)(CLMicroLocationProto::Measurement::default_instance((CLMicroLocationProto::Measurement *)v22)
                          + 56);
        CLMicroLocationProtobufHelper::uuidFromProtobuf(*(uint64_t ***)(v27 + 32), v44);
        if (onceToken_MicroLocationQE_Default != -1)
          dispatch_once(&onceToken_MicroLocationQE_Default, &__block_literal_global_276);
        v28 = (id)logObject_MicroLocationQE_Default;
        v29 = (CLMicroLocationProto::Measurement *)os_log_type_enabled(v28, OS_LOG_TYPE_DEBUG);
        if ((_DWORD)v29)
        {
          v30 = v45;
          if (v45)
          {
            v31 = operator new(0x28uLL);
            __p = v31;
            v38 = xmmword_241BB2320;
            *v31 = 0u;
            v31[1] = 0u;
            *(_QWORD *)((char *)v31 + 29) = 0;
            v29 = (CLMicroLocationProto::Measurement *)boost::uuids::to_chars<char *>((uint64_t)v44, v31);
            if (v38 >= 0)
              p_p = (const char *)&__p;
            else
              p_p = (const char *)__p;
          }
          else
          {
            p_p = "not available";
          }
          v33 = *(_QWORD *)((char *)v39 + v25 + 56);
          if (!v33)
            v33 = *(_QWORD *)(CLMicroLocationProto::Measurement::default_instance(v29) + 56);
          v34 = *(float *)(v33 + 20);
          v35 = CFAbsoluteTimeGetCurrent() - *(double *)((char *)v39 + v25 + 8);
          *(_DWORD *)buf = 134218755;
          *(_QWORD *)&buf[4] = v26;
          *(_WORD *)&buf[12] = 2081;
          *(_QWORD *)&buf[14] = p_p;
          *(_WORD *)&buf[22] = 2049;
          *(double *)&buf[24] = v34;
          *(_WORD *)&buf[32] = 2050;
          *(CFAbsoluteTime *)&buf[34] = v35;
          _os_log_impl(&dword_2419D9000, v28, OS_LOG_TYPE_DEBUG, "meas index: %zu, deviceId: %{private}s, range: %{private}f, age: %{public}f", buf, 0x2Au);
          if (v30 && SHIBYTE(v38) < 0)
            operator delete(__p);
        }

        ++v26;
        v24 = v39;
        v23 = v40;
        v25 += 80;
      }
      while (v26 < 0xCCCCCCCCCCCCCCCDLL * ((v40 - v39) >> 4));
    }
    *v36 = 0;
    v36[1] = 0;
    v36[2] = 0;
    v43 = v36;
    while (v24 != v23)
    {
      CLMicroLocationProto::Measurement::Measurement((CLMicroLocationProto::Measurement *)buf, v24);
      v47 = 0;
      std::back_insert_iterator<std::vector<CLMiLoProtobufWrapper::Measurement>>::operator=[abi:ne180100](&v43, (CLMicroLocationProto::Measurement *)buf);
      CLMicroLocationProto::Measurement::~Measurement((CLMicroLocationProto::Measurement *)buf);
      v24 = (const CLMicroLocationProto::Measurement *)((char *)v24 + 80);
    }
    goto LABEL_64;
  }
  if (onceToken_MicroLocation_Default != -1)
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_72);
  v12 = logObject_MicroLocation_Default;
  if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 68289026;
    *(_DWORD *)&buf[4] = 0;
    *(_WORD *)&buf[8] = 2082;
    *(_QWORD *)&buf[10] = "";
    _os_log_impl(&dword_2419D9000, v12, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"CLMicroLocationSensorsLogic::getUwbMeasurements, fState.fStartTime is nullopt!\"}", buf, 0x12u);
  }
  if (onceToken_MicroLocation_Default != -1)
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_72);
  v13 = logObject_MicroLocation_Default;
  if (os_signpost_enabled((os_log_t)logObject_MicroLocation_Default))
  {
    *(_DWORD *)buf = 68289026;
    *(_DWORD *)&buf[4] = 0;
    *(_WORD *)&buf[8] = 2082;
    *(_QWORD *)&buf[10] = "";
    _os_signpost_emit_with_name_impl(&dword_2419D9000, v13, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "CLMicroLocationSensorsLogic::getUwbMeasurements, fState.fStartTime is nullopt!", "{\"msg%{public}.0s\":\"CLMicroLocationSensorsLogic::getUwbMeasurements, fState.fStartTime is nullopt!\"}", buf, 0x12u);
  }
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
}

void sub_241AE7528(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  void *v35;
  void *v36;
  void *v37;

  _Unwind_Resume(a1);
}

double ULSettings::get<ULSettings::ScanDurationThreshold>()
{
  void *v0;
  void *v1;
  void *v2;
  void *v3;
  double v4;
  double v5;

  +[ULDefaultsSingleton shared](ULDefaultsSingleton, "shared");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "defaultsDictionary");
  v1 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "ULScanDurationThreshold");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "objectForKey:", v2);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  if (v3 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
    objc_msgSend(v3, "doubleValue");
  else
    objc_msgSend(&unk_2511EDC00, "doubleValue");
  v5 = v4;

  return v5;
}

void sub_241AE76C4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

CLMicroLocationProto::Measurement *CLEventsBuffer<CLMicroLocationProto::Measurement,double,ProtoMeasurementGetTime>::getLatestEvents@<X0>(uint64_t a1@<X0>, double *a2@<X1>, _BYTE *a3@<X2>, CLMicroLocationProto::Measurement *a4@<X8>)
{
  double *v7;
  double *v8;
  _BYTE v10[2];
  _BYTE *v11;

  *a3 = 0;
  v7 = *(double **)(a1 + 8);
  v11 = v10;
  v10[1] = 0;
  v8 = std::__lower_bound[abi:ne180100]<std::_ClassicAlgPolicy,std::__tree_const_iterator<CLMicroLocationProto::Measurement,std::__tree_node<CLMicroLocationProto::Measurement,void *> *,long>,std::__tree_const_iterator<CLMicroLocationProto::Measurement,std::__tree_node<CLMicroLocationProto::Measurement,void *> *,long>,double,std::__identity,CLEventsBuffer<CLMicroLocationProto::Measurement,double,ProtoMeasurementGetTime>::getLatestEvents(double const&,BOOL &)::{lambda(std::_ClassicAlgPolicy const&,double const&)#1}>(v7, (double *)(a1 + 16), a2);
  if (*(double **)(a1 + 8) == v8 && *(_BYTE *)(a1 + 56))
    *a3 = 1;
  return std::vector<CLMicroLocationProto::Measurement>::vector<std::__tree_const_iterator<CLMicroLocationProto::Measurement,std::__tree_node<CLMicroLocationProto::Measurement,void *> *,long>,0>(a4, v8, (_QWORD *)(a1 + 16));
}

void CLMicroLocationSensorsLogic::onScanActivityCompleted(CLMicroLocationSensorsLogic *this)
{
  unint64_t v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  unint64_t v8;
  NSObject *v9;
  _DWORD v10[2];
  __int16 v11;
  const char *v12;
  __int16 v13;
  uint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  *((_BYTE *)this + 153) = 2;
  if (*((_BYTE *)this + 192) && *((_BYTE *)this + 193))
  {
    v2 = CLMicroLocationScanBuffer::numberOfUniqueWifiAccessPoints((CLMicroLocationSensorsLogic *)((char *)this + 472));
    +[ULDefaultsSingleton shared](ULDefaultsSingleton, "shared");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "defaultsDictionary");
    v4 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "ULMinimumWiFiNumberOfMeasurementsForScanExtension");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "objectForKey:", v5);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    if (!v6)
      goto LABEL_6;
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
      v7 = objc_msgSend(v6, "unsignedLongValue");
    else
LABEL_6:
      v7 = objc_msgSend(&unk_2511EDB70, "unsignedLongValue");
    v8 = v7;

    if (v2 >= v8)
    {
      if (onceToken_MicroLocation_Default != -1)
        dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_72);
      v9 = (id)logObject_MicroLocation_Default;
      if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
      {
        v10[0] = 68289282;
        v10[1] = 0;
        v11 = 2082;
        v12 = "";
        v13 = 2050;
        v14 = CLMicroLocationScanBuffer::numberOfUniqueWifiAccessPoints((CLMicroLocationSensorsLogic *)((char *)this + 472));
        _os_log_impl(&dword_2419D9000, v9, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Received valid scan results, clearing WiFi scan error state\", \"number of APs in scan buffer\":%{public}llu}", (uint8_t *)v10, 0x1Cu);
      }

      *((_BYTE *)this + 192) = 0;
    }
  }
  CLMicroLocationLogic::onScanActivityCompleted(*((NSObject **)this + 28), (void **)this + 1);
  *((_WORD *)this + 96) = 0;
}

void sub_241AE7978(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t CLMicroLocationSensorsLogic::extendWifiScanIfAppropriate(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;

  v3 = *(_QWORD *)(a1 + 224);
  v4 = CLMicroLocationScanBuffer::numberOfUniqueWifiAccessPoints((CLMicroLocationScanBuffer *)(a1 + 472));
  return CLMicroLocationLogic::requestWifiScanExtension(v3, a2, v4);
}

void CLMicroLocationSensorsLogic::startSpectatingSensors(id *this)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  int v6;
  int v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  int v12;
  int v13;

  +[ULDefaultsSingleton shared](ULDefaultsSingleton, "shared");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "defaultsDictionary");
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "ULScanBleLeechedBeaconsRSSIEnabled");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "objectForKey:", v4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  if (v5 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
    v6 = objc_msgSend(v5, "BOOLValue");
  else
    v6 = objc_msgSend(MEMORY[0x24BDBD1C8], "BOOLValue");
  v7 = v6;

  if (v7)
    CLMicroLocationSensorsLogic::startBleSpyscanSessionIfStopped(this);
  else
    CLMicroLocationSensorsLogic::stopBleSpyscanSessionIfRunning((CLMicroLocationSensorsLogic *)this);
  +[ULDefaultsSingleton shared](ULDefaultsSingleton, "shared");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "defaultsDictionary");
  v9 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "ULScanUWBRangeEnabled");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "objectForKey:", v10);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  if (v11 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
    v12 = objc_msgSend(v11, "BOOLValue");
  else
    v12 = objc_msgSend(MEMORY[0x24BDBD1C8], "BOOLValue");
  v13 = v12;

  if (v13)
    CLMicroLocationSensorsLogic::startRangingSessionIfStopped((CLMicroLocationSensorsLogic *)this);
  else
    CLMicroLocationSensorsLogic::stopRangingSessionIfRunning((CLMicroLocationSensorsLogic *)this);
}

void sub_241AE7B88(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void CLMicroLocationSensorsLogic::startBleSpyscanSessionIfStopped(id *this)
{
  NSObject *v1;
  NSObject *v3;
  _BOOL8 v4;
  id v5;
  _QWORD v6[3];
  uint8_t buf[16];
  id v8;
  uint64_t v9;
  void **v10;

  if (*((_BYTE *)this + 177))
  {
    if (onceToken_MicroLocation_Default != -1)
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_72);
    v1 = logObject_MicroLocation_Default;
    if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_2419D9000, v1, OS_LOG_TYPE_DEFAULT, "BLE spyscan session already running", buf, 2u);
    }
  }
  else
  {
    if (onceToken_MicroLocation_Default != -1)
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_72);
    v3 = logObject_MicroLocation_Default;
    if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_2419D9000, v3, OS_LOG_TYPE_DEFAULT, "Start BLE spyscan session", buf, 2u);
    }
    CLMicroLocationSensorsLogic::loadBleIdentitiesFromDb((CLMicroLocationSensorsLogic *)this);
    if (objc_msgSend(this[81], "count"))
      v4 = *((_BYTE *)this + 179) != 0;
    else
      v4 = 0;
    v5 = this[81];
    memset(v6, 0, sizeof(v6));
    CLMicroLocationUtils::BleScanConfiguration::BleScanConfiguration(buf, 0, 1, v4, v5, v6, 0.0);
    v10 = (void **)v6;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v10);
    CLMicroLocationSensorsLogic::startBleRssiSession((CLMicroLocationSensorsLogic *)this, (const CLMicroLocationUtils::BleScanConfiguration *)buf);
    CLMicroLocationSensorsLogic::State::setBleSpyscanSessionRunning((CLMicroLocationSensorsLogic::State *)(this + 1), 1);
    v10 = (void **)&v9;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v10);

  }
}

void sub_241AE7D64(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 - 24) = v1;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v2 - 24));
  _Unwind_Resume(a1);
}

void CLMicroLocationSensorsLogic::stopBleSpyscanSessionIfRunning(CLMicroLocationSensorsLogic *this)
{
  CLMicroLocationSensorsLogic::State *v2;
  NSObject *v3;
  NSObject *v4;
  uint8_t v5[16];
  uint8_t buf[16];

  if (*((_BYTE *)this + 177))
  {
    v2 = (CLMicroLocationSensorsLogic *)((char *)this + 8);
    if (onceToken_MicroLocation_Default != -1)
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_72);
    v3 = logObject_MicroLocation_Default;
    if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_2419D9000, v3, OS_LOG_TYPE_DEFAULT, "Stopping BLE spyscan session", buf, 2u);
    }
    CLMicroLocationSensorsDriver::stopBleRssiSession((CLMicroLocationSensorsLogic *)((char *)this + 240));
    *((_WORD *)this + 328) = 0;
    objc_msgSend(*((id *)this + 83), "invalidate");
    std::__tree<CLMicroLocationProto::Measurement,CLEventsBuffer<CLMicroLocationProto::Measurement,double,ProtoMeasurementGetTime>::EventsComparator,std::allocator<CLMicroLocationProto::Measurement>>::destroy((uint64_t)this + 520, *((_QWORD **)this + 66));
    *((_QWORD *)this + 65) = (char *)this + 528;
    *((_QWORD *)this + 67) = 0;
    *((_QWORD *)this + 66) = 0;
    CLMicroLocationSensorsLogic::backupBleIdentities(this);
    std::__hash_table<CLMicroLocationUtils::BleIdentityItem,CLMicroLocationUtils::BleIdentityItem::HashItem,CLMicroLocationUtils::BleIdentityItem::PredicateItem,std::allocator<CLMicroLocationUtils::BleIdentityItem>>::clear((uint64_t)this + 680);
    CLMicroLocationSensorsLogic::State::setBleSpyscanSessionRunning(v2, 0);
  }
  else
  {
    if (onceToken_MicroLocation_Default != -1)
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_72);
    v4 = logObject_MicroLocation_Default;
    if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v5 = 0;
      _os_log_impl(&dword_2419D9000, v4, OS_LOG_TYPE_DEFAULT, "BLE spyscan session already stopped", v5, 2u);
    }
  }
}

void CLMicroLocationSensorsLogic::startRangingSessionIfStopped(CLMicroLocationSensorsLogic *this)
{
  NSObject *v1;
  CLMicroLocationSensorsLogic::State *v3;
  NSObject *v4;
  uint8_t v5[16];
  uint8_t buf[16];

  if (*((_BYTE *)this + 178))
  {
    if (onceToken_MicroLocation_Default != -1)
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_72);
    v1 = logObject_MicroLocation_Default;
    if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_2419D9000, v1, OS_LOG_TYPE_DEFAULT, "ranging session already running", buf, 2u);
    }
  }
  else
  {
    v3 = (CLMicroLocationSensorsLogic *)((char *)this + 8);
    if (onceToken_MicroLocation_Default != -1)
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_72);
    v4 = logObject_MicroLocation_Default;
    if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v5 = 0;
      _os_log_impl(&dword_2419D9000, v4, OS_LOG_TYPE_DEFAULT, "start a ranging session", v5, 2u);
    }
    CLMicroLocationSensorsDriver::startRanging((CLMicroLocationSensorsLogic *)((char *)this + 240));
    CLMicroLocationSensorsLogic::State::setRangingSessionRunning(v3, 1);
  }
}

void CLMicroLocationSensorsLogic::stopRangingSessionIfRunning(CLMicroLocationSensorsLogic *this)
{
  CLMicroLocationSensorsLogic::State *v2;
  NSObject *v3;
  NSObject *v4;
  uint8_t v5[16];
  uint8_t buf[16];

  if (*((_BYTE *)this + 178))
  {
    v2 = (CLMicroLocationSensorsLogic *)((char *)this + 8);
    if (onceToken_MicroLocation_Default != -1)
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_72);
    v3 = logObject_MicroLocation_Default;
    if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_2419D9000, v3, OS_LOG_TYPE_DEFAULT, "stop a ranging session", buf, 2u);
    }
    CLMicroLocationSensorsDriver::stopRanging((CLMicroLocationSensorsLogic *)((char *)this + 240));
    std::__tree<CLMicroLocationProto::Measurement,CLEventsBuffer<CLMicroLocationProto::Measurement,double,ProtoMeasurementGetTime>::EventsComparator,std::allocator<CLMicroLocationProto::Measurement>>::destroy((uint64_t)this + 584, *((_QWORD **)this + 74));
    *((_QWORD *)this + 73) = (char *)this + 592;
    *((_QWORD *)this + 75) = 0;
    *((_QWORD *)this + 74) = 0;
    CLMicroLocationSensorsLogic::State::setRangingSessionRunning(v2, 0);
  }
  else
  {
    if (onceToken_MicroLocation_Default != -1)
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_72);
    v4 = logObject_MicroLocation_Default;
    if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v5 = 0;
      _os_log_impl(&dword_2419D9000, v4, OS_LOG_TYPE_DEFAULT, "ranging session already stopped", v5, 2u);
    }
  }
}

void CLMicroLocationSensorsLogic::stopSpectatingSensors(CLMicroLocationSensorsLogic *this)
{
  CLMicroLocationSensorsLogic::stopBleSpyscanSessionIfRunning(this);
  CLMicroLocationSensorsLogic::stopRangingSessionIfRunning(this);
}

void CLMicroLocationSensorsLogic::loadBleIdentitiesFromDb(CLMicroLocationSensorsLogic *this)
{
  double v2;
  CLMicroLocationTimeUtils *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  int v8;
  int v9;
  double v10;
  double v11;
  id v12;
  void *v13;
  uint64_t v14;
  uint64_t i;
  const std::string::value_type **v16;
  __int128 v17;
  std::string::size_type v18;
  char v19;
  const std::string::value_type **v20;
  __int128 v21;
  std::string::size_type v22;
  char v23;
  NSObject *v24;
  uint64_t v25;
  std::string __p;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _BYTE v31[28];
  __int16 v32;
  uint64_t v33;
  uint64_t v34;

  v34 = *MEMORY[0x24BDAC8D0];
  v2 = cl::chrono::CFAbsoluteTimeClock::now();
  objc_msgSend(MEMORY[0x24BDBCE60], "date");
  v3 = (CLMicroLocationTimeUtils *)objc_claimAutoreleasedReturnValue();
  +[ULDefaultsSingleton shared](ULDefaultsSingleton, "shared");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "defaultsDictionary");
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "ULNumberDaysToUseBtIdentities");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "objectForKey:", v6);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  if (v7 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
    v8 = objc_msgSend(v7, "intValue");
  else
    v8 = objc_msgSend(&unk_2511EDC30, "intValue");
  v9 = v8;

  CLMicroLocationTimeUtils::getTimeDeltaDaysAgo(v3, (NSDate *)~v9);
  v11 = v10;
  v12 = *(id *)(*((_QWORD *)this + 29) + 24);
  v13 = v12;
  if (v12)
  {
    objc_msgSend(v12, "fetchBtIdentityEntriesBetweenTimes:toTime:", v11, v2 + 86400.0);
  }
  else
  {
    v28 = 0;
    v29 = 0;
    v30 = 0;
  }

  v14 = v28;
  for (i = v29; v14 != i; v14 += 72)
  {
    v16 = (const std::string::value_type **)(v14 + 16);
    if (*(char *)(v14 + 39) < 0)
    {
      v18 = *(_QWORD *)(v14 + 24);
      if (v18)
      {
        std::string::__init_copy_ctor_external((std::string *)v31, *v16, v18);
        goto LABEL_14;
      }
    }
    else if (*(_BYTE *)(v14 + 39))
    {
      v17 = *(_OWORD *)v16;
      *(_QWORD *)&v31[16] = *(_QWORD *)(v14 + 32);
      *(_OWORD *)v31 = v17;
LABEL_14:
      v19 = 1;
      goto LABEL_16;
    }
    v19 = 0;
    v31[0] = 0;
LABEL_16:
    v31[24] = v19;
    v20 = (const std::string::value_type **)(v14 + 40);
    if (*(char *)(v14 + 63) < 0)
    {
      v22 = *(_QWORD *)(v14 + 48);
      if (v22)
      {
        std::string::__init_copy_ctor_external(&__p, *v20, v22);
        goto LABEL_21;
      }
    }
    else if (*(_BYTE *)(v14 + 63))
    {
      v21 = *(_OWORD *)v20;
      __p.__r_.__value_.__r.__words[2] = *(_QWORD *)(v14 + 56);
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v21;
LABEL_21:
      v23 = 1;
      goto LABEL_23;
    }
    v23 = 0;
    __p.__r_.__value_.__s.__data_[0] = 0;
LABEL_23:
    v27 = v23;
    std::__hash_table<CLMicroLocationUtils::BleIdentityItem,CLMicroLocationUtils::BleIdentityItem::HashItem,CLMicroLocationUtils::BleIdentityItem::PredicateItem,std::allocator<CLMicroLocationUtils::BleIdentityItem>>::__emplace_unique_impl<boost::uuids::uuid const&,std::optional<std::string> &,std::optional<std::string> &,std::nullopt_t const&,std::chrono::time_point<cl::chrono::CFAbsoluteTimeClock,std::chrono::duration<long double,std::ratio<1l,1l>>> const&>((_QWORD *)this + 85, (_OWORD *)v14, (__int128 *)v31, (__int128 *)&__p, (uint64_t)&std::nullopt, (_QWORD *)(v14 + 64));
    if (v27 && SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (v31[24] && (v31[23] & 0x80000000) != 0)
      operator delete(*(void **)v31);
  }
  if (onceToken_MicroLocation_Default != -1)
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_72);
  v24 = logObject_MicroLocation_Default;
  if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
  {
    v25 = *((_QWORD *)this + 88);
    *(_QWORD *)v31 = 68289538;
    *(_WORD *)&v31[8] = 2082;
    *(_QWORD *)&v31[10] = "";
    *(_WORD *)&v31[18] = 2050;
    *(_QWORD *)&v31[20] = 0x8E38E38E38E38E39 * ((v29 - v28) >> 3);
    v32 = 2050;
    v33 = v25;
    _os_log_impl(&dword_2419D9000, v24, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"SensorsLogic, loadBleIdentitiesFromDb\", \"num of entries loaded\":%{public}lu, \"Total number of identities in memory\":%{public}lu}", v31, 0x26u);
  }
  *(_QWORD *)v31 = &v28;
  std::vector<CLMicroLocationBluetoothIdentityTable::Entry>::__destroy_vector::operator()[abi:ne180100]((void ***)v31);

}

void sub_241AE8498(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,char a26)
{
  void *v26;
  void *v27;
  void *v28;
  void *v29;

  _Unwind_Resume(a1);
}

void CLMicroLocationSensorsLogic::backupBleIdentities(CLMicroLocationSensorsLogic *this)
{
  uint64_t *v1;
  unint64_t v3;
  uint64_t v4;
  NSObject *v5;
  std::string __p;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  _BYTE v10[28];
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  v7 = 0;
  v8 = 0;
  v9 = 0;
  v1 = (uint64_t *)*((_QWORD *)this + 87);
  if (v1)
  {
    do
    {
      if (*((_BYTE *)v1 + 56))
      {
        if (*((char *)v1 + 55) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)v10, (const std::string::value_type *)v1[4], v1[5]);
        }
        else
        {
          *(_OWORD *)v10 = *((_OWORD *)v1 + 2);
          *(_QWORD *)&v10[16] = v1[6];
        }
      }
      else
      {
        memset(v10, 0, 24);
      }
      if (*((_BYTE *)v1 + 88))
      {
        if (*((char *)v1 + 87) < 0)
          std::string::__init_copy_ctor_external(&__p, (const std::string::value_type *)v1[8], v1[9]);
        else
          __p = *(std::string *)(v1 + 8);
      }
      else
      {
        memset(&__p, 0, sizeof(__p));
      }
      v3 = v8;
      if (v8 >= v9)
      {
        v4 = std::vector<CLMicroLocationBluetoothIdentityTable::Entry>::__emplace_back_slow_path<boost::uuids::uuid const&,std::string &,std::string &,std::chrono::time_point<cl::chrono::CFAbsoluteTimeClock,std::chrono::duration<long double,std::ratio<1l,1l>>> const&>(&v7, v1 + 2, (uint64_t)v10, (uint64_t)&__p, (double *)v1 + 16);
      }
      else
      {
        std::allocator<CLMicroLocationBluetoothIdentityTable::Entry>::construct[abi:ne180100]<CLMicroLocationBluetoothIdentityTable::Entry,boost::uuids::uuid const&,std::string &,std::string &,std::chrono::time_point<cl::chrono::CFAbsoluteTimeClock,std::chrono::duration<long double,std::ratio<1l,1l>>> const&>((uint64_t)&v9, v8, v1 + 2, (uint64_t)v10, (uint64_t)&__p, (double *)v1 + 16);
        v4 = v3 + 72;
      }
      v8 = v4;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if ((v10[23] & 0x80000000) != 0)
        operator delete(*(void **)v10);
      v1 = (uint64_t *)*v1;
    }
    while (v1);
    if (v8 != v7)
    {
      if (onceToken_MicroLocation_Default != -1)
        dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_72);
      v5 = logObject_MicroLocation_Default;
      if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
      {
        *(_QWORD *)v10 = 68289282;
        *(_WORD *)&v10[8] = 2082;
        *(_QWORD *)&v10[10] = "";
        *(_WORD *)&v10[18] = 2050;
        *(_QWORD *)&v10[20] = 0x8E38E38E38E38E39 * ((uint64_t)(v8 - v7) >> 3);
        _os_log_impl(&dword_2419D9000, v5, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"SensorsLogic, back up BT identities data to DB\", \"Num Entries\":%{public}lu}", v10, 0x1Cu);
      }
      objc_msgSend(*(id *)(*((_QWORD *)this + 29) + 24), "insertEntries:", &v7, *(_OWORD *)&__p.__r_.__value_.__l.__data_, __p.__r_.__value_.__r.__words[2]);
    }
  }
  *(_QWORD *)v10 = &v7;
  std::vector<CLMicroLocationBluetoothIdentityTable::Entry>::__destroy_vector::operator()[abi:ne180100]((void ***)v10);
}

void sub_241AE8798(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, char *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  __p = &a15;
  std::vector<CLMicroLocationBluetoothIdentityTable::Entry>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

void CLMicroLocationSensorsLogic::startOdometryMonitoringIfStopped(id *this)
{
  NSObject *v1;
  CLMicroLocationSensorsLogic::State *v3;
  NSObject *v4;
  void *v5;
  uint8_t v6[16];
  uint8_t buf[16];

  if (*((_BYTE *)this + 180))
  {
    if (onceToken_MicroLocation_Default != -1)
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_72);
    v1 = logObject_MicroLocation_Default;
    if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_2419D9000, v1, OS_LOG_TYPE_DEFAULT, "odometry monitoring already running", buf, 2u);
    }
  }
  else
  {
    v3 = (CLMicroLocationSensorsLogic::State *)(this + 1);
    if (onceToken_MicroLocation_Default != -1)
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_72);
    v4 = logObject_MicroLocation_Default;
    if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v6 = 0;
      _os_log_impl(&dword_2419D9000, v4, OS_LOG_TYPE_DEFAULT, "start odometry monitoring", v6, 2u);
    }
    CLMicroLocationSensorsDriver::startOdometryBackgroundUpdates(this + 30);
    CLMicroLocationSensorsLogic::State::setOdometryMonitoringRunning(v3, 1);
    +[ULHomeSlamAnalytics shared](ULHomeSlamAnalytics, "shared");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "logEventOdometryStartedAtTimestamp:", cl::chrono::CFAbsoluteTimeClock::now());

  }
}

void sub_241AE8930(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void CLMicroLocationSensorsLogic::stopOdometryMonitoringIfRunning(id *this)
{
  CLMicroLocationSensorsLogic::State *v2;
  NSObject *v3;
  void *v4;
  NSObject *v5;
  uint8_t v6[16];
  uint8_t buf[16];

  if (*((_BYTE *)this + 180))
  {
    v2 = (CLMicroLocationSensorsLogic::State *)(this + 1);
    if (onceToken_MicroLocation_Default != -1)
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_72);
    v3 = logObject_MicroLocation_Default;
    if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_2419D9000, v3, OS_LOG_TYPE_DEFAULT, "stop odometry monitoring", buf, 2u);
    }
    CLMicroLocationSensorsDriver::stopOdometryBackgroundUpdates(this + 30);
    CLMicroLocationSensorsLogic::State::setOdometryMonitoringRunning(v2, 0);
    +[ULHomeSlamAnalytics shared](ULHomeSlamAnalytics, "shared");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "logEventOdometryStoppedAtTimestamp:", cl::chrono::CFAbsoluteTimeClock::now());

  }
  else
  {
    if (onceToken_MicroLocation_Default != -1)
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_72);
    v5 = logObject_MicroLocation_Default;
    if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v6 = 0;
      _os_log_impl(&dword_2419D9000, v5, OS_LOG_TYPE_DEFAULT, "odometry monitoring already stopped", v6, 2u);
    }
  }
}

void sub_241AE8A7C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t CLMicroLocationSensorsLogic::startCustomLoiRecordingFence(CLMicroLocationSensorsLogic *this)
{
  return CLMicroLocationSensorsDriver::startCustomLoiRecordingFence((CLMicroLocationSensorsLogic *)((char *)this + 240));
}

uint64_t CLMicroLocationSensorsLogic::teardownCustomLoiRecordingFence(CLMicroLocationSensorsLogic *this)
{
  return CLMicroLocationSensorsDriver::teardownCustomLoiRecordingFence((CLMicroLocationSensorsLogic *)((char *)this + 240));
}

void CLMicroLocationSensorsLogic::stopMotionSM(CLMicroLocationSensorsLogic *this)
{
  NSObject *v2;
  uint8_t v3[16];

  if (onceToken_MicroLocation_Default != -1)
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_72);
  v2 = logObject_MicroLocation_Default;
  if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v3 = 0;
    _os_log_impl(&dword_2419D9000, v2, OS_LOG_TYPE_DEFAULT, "stop a motion state-machine", v3, 2u);
  }
  CLMicroLocationSensorsLogic::MotionSM::transitionLogic((uint64_t)this + 456, 5);
}

void CLMicroLocationSensorsLogic::setFence(CLMicroLocationSensorsLogic *this, int a2)
{
  char *v2;
  NSObject *v3;
  uint8_t v4[16];

  if (!a2 || !*((_DWORD *)this + 114))
  {
    v2 = (char *)this + 456;
    if (onceToken_MicroLocation_Default != -1)
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_72);
    v3 = logObject_MicroLocation_Default;
    if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v4 = 0;
      _os_log_impl(&dword_2419D9000, v3, OS_LOG_TYPE_DEFAULT, "start motion state-machine geofence", v4, 2u);
    }
    CLMicroLocationSensorsLogic::MotionSM::transitionLogic((uint64_t)v2, 0);
  }
}

uint64_t CLMicroLocationSensorsLogic::setDeviceIsInCustomLoi(uint64_t this, char a2)
{
  *(_BYTE *)(this + 176) = a2;
  return this;
}

void CLMicroLocationSensorsLogic::startSpectatingMotion(CLMicroLocationSensorsLogic *this)
{
  uint64_t v2;
  double v3;
  int v4;
  int v5[3];
  char v6;
  int v7;
  __int128 v8;
  _BYTE v9[32];
  _QWORD v10[39];

  v10[38] = *MEMORY[0x24BDAC8D0];
  if (!*((_BYTE *)this + 179))
  {
    CLMicroLocationProto::SpectatingMotionUpdate::SpectatingMotionUpdate((uint64_t)v5);
    v7 |= 2u;
    v6 = 1;
    v4 = 0;
    boost::uuids::detail::random_provider_base::random_provider_base((boost::uuids::detail::random_provider_base *)&v4);
    *(_QWORD *)&v8 = boost::uuids::random_generator_pure::operator()((uint64_t)&v4);
    *((_QWORD *)&v8 + 1) = v2;
    v3 = cl::chrono::CFAbsoluteTimeClock::now();
    CLMicroLocationProtobufHelper::createLoggedEvent<CLMicroLocationProto::SpectatingMotionUpdate>(&v8, v5, (uint64_t)v9, v3);
    (*(void (**)(CLMicroLocationSensorsLogic *, _BYTE *))(*(_QWORD *)this + 144))(this, v9);
    CLMicroLocationProto::ReceivedEvent::~ReceivedEvent((CLMicroLocationProto::ReceivedEvent *)v10);
    boost::uuids::detail::random_provider_base::destroy((boost::uuids::detail::random_provider_base *)&v4);
    CLMicroLocationSensorsDriver::startMotionSession((CLMicroLocationSensorsLogic *)((char *)this + 240));
    CLMicroLocationSensorsLogic::State::setMotionSessionState((CLMicroLocationSensorsLogic *)((char *)this + 8), 1);
    CLMicroLocationProto::SpectatingMotionUpdate::~SpectatingMotionUpdate((CLMicroLocationProto::SpectatingMotionUpdate *)v5);
  }
}

void sub_241AE8CCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, char a11, __int16 a12, char a13)
{
  uint64_t v13;

  CLMicroLocationProto::ReceivedEvent::~ReceivedEvent((CLMicroLocationProto::ReceivedEvent *)(v13 + 32));
  boost::uuids::detail::random_provider_base::destroy((boost::uuids::detail::random_provider_base *)&a11);
  CLMicroLocationProto::SpectatingMotionUpdate::~SpectatingMotionUpdate((CLMicroLocationProto::SpectatingMotionUpdate *)&a13);
  _Unwind_Resume(a1);
}

void CLMicroLocationProtobufHelper::createLoggedEvent<CLMicroLocationProto::SpectatingMotionUpdate>(_OWORD *a1@<X0>, int *a2@<X1>, uint64_t a3@<X8>, double a4@<D0>)
{
  const CLMicroLocationProto::SpectatingMotionUpdate *v8;
  _BYTE v9[304];

  CLMicroLocationProto::ReceivedEvent::ReceivedEvent((CLMicroLocationProto::ReceivedEvent *)v9);
  CLMicroLocationProtobufHelper::setSpecificLoggedEvent((CLMicroLocationProtobufHelper *)v9, (CLMicroLocationProto::ReceivedEvent *)a2, v8);
  CLMicroLocationLoggedEventsTable::Entry::Entry(a3, a1, a2[2], (CLMicroLocationProto::ReceivedEvent *)v9, a4);
  CLMicroLocationProto::ReceivedEvent::~ReceivedEvent((CLMicroLocationProto::ReceivedEvent *)v9);
}

void sub_241AE8D80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  CLMicroLocationProto::ReceivedEvent::~ReceivedEvent((CLMicroLocationProto::ReceivedEvent *)&a9);
  _Unwind_Resume(a1);
}

void CLMicroLocationSensorsLogic::stopSpectatingMotion(CLMicroLocationSensorsLogic *this)
{
  uint64_t v2;
  double v3;
  int v4;
  int v5[3];
  char v6;
  int v7;
  __int128 v8;
  _BYTE v9[32];
  _QWORD v10[39];

  v10[38] = *MEMORY[0x24BDAC8D0];
  if (*((_BYTE *)this + 179))
  {
    CLMicroLocationProto::SpectatingMotionUpdate::SpectatingMotionUpdate((uint64_t)v5);
    v7 |= 2u;
    v6 = 0;
    v4 = 0;
    boost::uuids::detail::random_provider_base::random_provider_base((boost::uuids::detail::random_provider_base *)&v4);
    *(_QWORD *)&v8 = boost::uuids::random_generator_pure::operator()((uint64_t)&v4);
    *((_QWORD *)&v8 + 1) = v2;
    v3 = cl::chrono::CFAbsoluteTimeClock::now();
    CLMicroLocationProtobufHelper::createLoggedEvent<CLMicroLocationProto::SpectatingMotionUpdate>(&v8, v5, (uint64_t)v9, v3);
    (*(void (**)(CLMicroLocationSensorsLogic *, _BYTE *))(*(_QWORD *)this + 144))(this, v9);
    CLMicroLocationProto::ReceivedEvent::~ReceivedEvent((CLMicroLocationProto::ReceivedEvent *)v10);
    boost::uuids::detail::random_provider_base::destroy((boost::uuids::detail::random_provider_base *)&v4);
    CLMicroLocationSensorsDriver::stopMotionSession((CLMicroLocationSensorsLogic *)((char *)this + 240));
    CLMicroLocationSensorsLogic::State::setMotionSessionState((CLMicroLocationSensorsLogic *)((char *)this + 8), 0);
    CLMicroLocationProto::SpectatingMotionUpdate::~SpectatingMotionUpdate((CLMicroLocationProto::SpectatingMotionUpdate *)v5);
  }
}

void sub_241AE8E7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, char a11, __int16 a12, char a13)
{
  uint64_t v13;

  CLMicroLocationProto::ReceivedEvent::~ReceivedEvent((CLMicroLocationProto::ReceivedEvent *)(v13 + 32));
  boost::uuids::detail::random_provider_base::destroy((boost::uuids::detail::random_provider_base *)&a11);
  CLMicroLocationProto::SpectatingMotionUpdate::~SpectatingMotionUpdate((CLMicroLocationProto::SpectatingMotionUpdate *)&a13);
  _Unwind_Resume(a1);
}

void CLMicroLocationSensorsLogic::onWifiAPs(uint64_t a1, uint64_t a2)
{
  _BOOL8 v3;
  unint64_t v4;
  CLMicroLocationProto::Measurement *v5;
  CLMicroLocationProto::Measurement *i;
  uint64_t v7;
  NSObject *v8;
  float v9;
  std::string *p_p;
  int v11;
  int isInvalidWiFiRssi;
  int isOffChannelWiFiRssi;
  CLMicroLocationProto::Measurement *v14;
  CLMicroLocationProto::Measurement *v15;
  uint64_t v16[3];
  std::string __p;
  CLMacAddress v18;
  uint8_t buf[8];
  __int16 v20;
  const char *v21;
  __int16 v22;
  int v23;
  __int16 v24;
  std::string *v25;
  __int16 v26;
  int v27;
  __int16 v28;
  int v29;
  __int16 v30;
  int v31;
  uint64_t v32;

  v32 = *MEMORY[0x24BDAC8D0];
  if (*(_QWORD *)a2 != *(_QWORD *)(a2 + 8))
  {
    *(_BYTE *)(a1 + 193) = 1;
    CLMicroLocationScanBuffer::ingestAps(a1 + 472, (int **)a2, v16);
    CLMiLoProtobufWrapper::measurementWrappersFromWiFiRssiWrappers(v16, (uint64_t *)&v14);
    if (onceToken_MicroLocation_Default != -1)
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_72);
    v3 = os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEBUG);
    if (v3)
    {
      v5 = v14;
      for (i = v15; v5 != i; v5 = (CLMicroLocationProto::Measurement *)((char *)v5 + 88))
      {
        v7 = *((_QWORD *)v5 + 2);
        if (!v7)
          v7 = *(_QWORD *)(CLMicroLocationProto::Measurement::default_instance((CLMicroLocationProto::Measurement *)v3)
                         + 16);
        v18.var0 = CLMacAddress::newFromUint64(*(CLMacAddress **)(v7 + 24), v4);
        if (onceToken_MicroLocationQE_Default != -1)
          dispatch_once(&onceToken_MicroLocationQE_Default, &__block_literal_global_276);
        v8 = (id)logObject_MicroLocationQE_Default;
        if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
        {
          v9 = *(float *)(v7 + 20);
          CLMacAddress::toPrettyStr(&v18, &__p);
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            p_p = &__p;
          else
            p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
          v11 = *(_DWORD *)(v7 + 32);
          isInvalidWiFiRssi = CLMiLoProtobufWrapper::Measurement::isInvalidWiFiRssi(v5);
          isOffChannelWiFiRssi = CLMiLoProtobufWrapper::Measurement::isOffChannelWiFiRssi(v5);
          *(_DWORD *)buf = 68290307;
          *(_DWORD *)&buf[4] = 0;
          v20 = 2082;
          v21 = "";
          v22 = 1025;
          v23 = (int)v9;
          v24 = 2081;
          v25 = p_p;
          v26 = 1025;
          v27 = v11;
          v28 = 1025;
          v29 = isInvalidWiFiRssi;
          v30 = 1025;
          v31 = isOffChannelWiFiRssi;
          _os_log_impl(&dword_2419D9000, v8, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Wifi AP received\", \"rssi\":%{private}d, \"mac\":%{private, location:escape_only}s, \"channel\":%{private}d, \"isRssiInvalid\":%{private}d, \"isRssiOffChannel\":%{private}d}", buf, 0x34u);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
        }

      }
    }
    CLMicroLocationLogic::onAvailableMeasurements(*(CLMicroLocationProto::Measurement **)(a1 + 224), &v14);
    *(_QWORD *)buf = &v14;
    std::vector<CLMiLoProtobufWrapper::Measurement>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
    *(_QWORD *)buf = v16;
    std::vector<CLMiLoProtobufWrapper::WiFiRssi>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  }
}

void sub_241AE9118(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,char *a24)
{
  a24 = &a11;
  std::vector<CLMiLoProtobufWrapper::Measurement>::__destroy_vector::operator()[abi:ne180100]((void ***)&a24);
  a24 = &a14;
  std::vector<CLMiLoProtobufWrapper::WiFiRssi>::__destroy_vector::operator()[abi:ne180100]((void ***)&a24);
  _Unwind_Resume(a1);
}

void CLMicroLocationSensorsLogic::onWifiScanError(CLMicroLocationSensorsLogic *this)
{
  NSObject *v2;
  _DWORD v3[2];
  __int16 v4;
  const char *v5;
  uint64_t v6;

  v6 = *MEMORY[0x24BDAC8D0];
  if (onceToken_MicroLocation_Default != -1)
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_72);
  v2 = logObject_MicroLocation_Default;
  if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
  {
    v3[0] = 68289026;
    v3[1] = 0;
    v4 = 2082;
    v5 = "";
    _os_log_impl(&dword_2419D9000, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"sensorLogic, received wifi scan error\"}", (uint8_t *)v3, 0x12u);
  }
  *((_BYTE *)this + 192) = 1;
}

void CLMicroLocationSensorsLogic::onWifiScanErrorBusy(CLMicroLocationSensorsLogic *this)
{
  NSObject *v2;
  _DWORD v3[2];
  __int16 v4;
  const char *v5;
  uint64_t v6;

  v6 = *MEMORY[0x24BDAC8D0];
  if (onceToken_MicroLocation_Default != -1)
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_72);
  v2 = logObject_MicroLocation_Default;
  if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
  {
    v3[0] = 68289026;
    v3[1] = 0;
    v4 = 2082;
    v5 = "";
    _os_log_impl(&dword_2419D9000, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"sensorLogic, received wifi scan error busy\"}", (uint8_t *)v3, 0x12u);
  }
  *((_BYTE *)this + 192) = 1;
}

void CLMicroLocationSensorsLogic::onWiFiAssociatedState(CLMicroLocationSensorsLogic *this, ULWiFiAssociatedState *a2)
{
  ULWiFiAssociatedState *v3;
  NSObject *v4;
  void *v5;
  ULWiFiAssociatedState *v6;
  int v7;
  ULWiFiAssociatedState *v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v3 = a2;
  if (onceToken_MicroLocation_Default != -1)
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_72);
  v4 = logObject_MicroLocation_Default;
  if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
  {
    v7 = 138412290;
    v8 = v3;
    _os_log_impl(&dword_2419D9000, v4, OS_LOG_TYPE_DEFAULT, "sensorLogic, onWiFiAssociatedState: %@", (uint8_t *)&v7, 0xCu);
  }
  v5 = (void *)*((_QWORD *)this + 23);
  *((_QWORD *)this + 23) = v3;
  v6 = v3;

  CLMicroLocationLogic::onAssociatedState(*((CLMicroLocationLogic **)this + 28), v6);
}

void sub_241AE9434(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void CLMicroLocationSensorsLogic::requestWiFiScan(CLMicroLocationSensorsLogic *this)
{
  double v2;
  NSObject *v3;
  NSObject *v4;
  double v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  double v10;
  double v11;
  int v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  unsigned int v17;
  uint64_t v18;
  unsigned int v19;
  NSObject *v20;
  CLMicroLocationProto::Measurement *v21[3];
  _QWORD v22[3];
  uint64_t v23[3];
  uint8_t buf[8];
  _BYTE v25[10];
  __int16 v26;
  _BYTE v27[12];
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  if (*((_BYTE *)this + 168))
  {
    v2 = *((double *)this + 20);
  }
  else
  {
    if (onceToken_MicroLocation_Default != -1)
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_72);
    v3 = logObject_MicroLocation_Default;
    if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 68289026;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)v25 = 2082;
      *(_QWORD *)&v25[2] = "";
      _os_log_impl(&dword_2419D9000, v3, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"CLMicroLocationSensorsLogic::requestWiFiScan, fState.fStartTime is nullopt!\"}", buf, 0x12u);
    }
    if (onceToken_MicroLocation_Default != -1)
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_72);
    v4 = logObject_MicroLocation_Default;
    if (os_signpost_enabled((os_log_t)logObject_MicroLocation_Default))
    {
      *(_DWORD *)buf = 68289026;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)v25 = 2082;
      *(_QWORD *)&v25[2] = "";
      _os_signpost_emit_with_name_impl(&dword_2419D9000, v4, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "CLMicroLocationSensorsLogic::requestWiFiScan, fState.fStartTime is nullopt!", "{\"msg%{public}.0s\":\"CLMicroLocationSensorsLogic::requestWiFiScan, fState.fStartTime is nullopt!\"}", buf, 0x12u);
    }
    v5 = cl::chrono::CFAbsoluteTimeClock::now();
    v2 = v5;
    if (!*((_BYTE *)this + 168))
      *((_BYTE *)this + 168) = 1;
    *((double *)this + 20) = v5;
  }
  +[ULDefaultsSingleton shared](ULDefaultsSingleton, "shared");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "defaultsDictionary");
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "ULMaximumAgeForValidity");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "objectForKey:", v8);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  if (v9 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
    objc_msgSend(v9, "doubleValue");
  else
    objc_msgSend(&unk_2511EDB58, "doubleValue");
  v11 = v10;

  CLMicroLocationScanBuffer::pruneAps((uint64_t)this + 472, v23, v2, v11);
  *(_QWORD *)buf = v23;
  std::vector<CLMiLoProtobufWrapper::WiFiRssi>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  memset(v22, 0, sizeof(v22));
  std::vector<CLMiLoProtobufWrapper::WiFiRssi>::__init_with_size[abi:ne180100]<CLMiLoProtobufWrapper::WiFiRssi*,CLMiLoProtobufWrapper::WiFiRssi*>(v22, *((_QWORD *)this + 59), *((_QWORD *)this + 60), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*((_QWORD *)this + 60) - *((_QWORD *)this + 59)) >> 3));
  CLMiLoProtobufWrapper::measurementWrappersFromWiFiRssiWrappers(v22, (uint64_t *)v21);
  v12 = *((unsigned __int8 *)this + 176);
  if (v12 == 1 && *((_BYTE *)this + 152) == 1)
  {
    +[ULDefaultsSingleton shared](ULDefaultsSingleton, "shared");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v13, "defaultsDictionary");
    v14 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "ULLocalizationScanIterationsInCustomLoi");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v14, "objectForKey:", v15);
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    if (v16 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
      v17 = objc_msgSend(v16, "unsignedIntValue");
    else
      v17 = objc_msgSend(&unk_2511EDB70, "unsignedIntValue");
    v19 = v17;

    v18 = v19;
  }
  else
  {
    v18 = 1;
  }
  buf[0] = *((_BYTE *)this + 152);
  *(_QWORD *)v25 = 0;
  v25[8] = v12 == 1;
  *(_QWORD *)&v27[4] = v18;
  CLMicroLocationSensorsDriver::requestWifiScan((uint64_t)this + 240, buf);
  *((_BYTE *)this + 153) = 1;
  if (onceToken_MicroLocation_Default != -1)
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_72);
  v20 = logObject_MicroLocation_Default;
  if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 68289282;
    *(_DWORD *)&buf[4] = 0;
    *(_WORD *)v25 = 2082;
    *(_QWORD *)&v25[2] = "";
    v26 = 2050;
    *(_QWORD *)v27 = 0x2E8BA2E8BA2E8BA3 * ((v21[1] - v21[0]) >> 3);
    _os_log_impl(&dword_2419D9000, v20, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"SensorsLogic, WiFi scan starts\", \"Num Valid Buffered WiFi APs\":%{public}lu}", buf, 0x1Cu);
  }
  CLMicroLocationLogic::onAvailableMeasurements(*((CLMicroLocationProto::Measurement **)this + 28), v21);
  *(_QWORD *)buf = v21;
  std::vector<CLMiLoProtobufWrapper::Measurement>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  *(_QWORD *)buf = v22;
  std::vector<CLMiLoProtobufWrapper::WiFiRssi>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
}

void sub_241AE98C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void **a19)
{
  void *v19;
  void *v20;
  void *v21;

  a19 = (void **)&a10;
  std::vector<CLMiLoProtobufWrapper::Measurement>::__destroy_vector::operator()[abi:ne180100](&a19);
  a19 = (void **)&a13;
  std::vector<CLMiLoProtobufWrapper::WiFiRssi>::__destroy_vector::operator()[abi:ne180100](&a19);
  _Unwind_Resume(a1);
}

void CLMicroLocationSensorsLogic::onOdometryUpdate(CLMicroLocationSensorsLogic *this, Entry a2)
{
  uint64_t v2;
  CLMicroLocationLogic *v3;
  void *v4;
  __int128 v5;
  uint64_t v6;
  id v7;
  Entry v8;

  v2 = *(_QWORD *)a2.var0.var0;
  v3 = (CLMicroLocationLogic *)*((_QWORD *)this + 28);
  v5 = *(_OWORD *)*(_QWORD *)a2.var0.var0;
  v4 = *(void **)(*(_QWORD *)a2.var0.var0 + 24);
  v6 = *(_QWORD *)(*(_QWORD *)a2.var0.var0 + 16);
  v7 = v4;
  *(_QWORD *)v8.var0.var0 = &v5;
  CLMicroLocationLogic::onOdometryUpdate(v3, v8);

}

void sub_241AE99C4(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Unwind_Resume(a1);
}

void CLMicroLocationSensorsLogic::onOdometryError(CLMicroLocationSensorsLogic *this, Entry a2)
{
  uint64_t v2;
  CLMicroLocationLogic *v3;
  void *v4;
  __int128 v5;
  uint64_t v6;
  id v7;
  Entry v8;

  v2 = *(_QWORD *)a2.var0.var0;
  v3 = (CLMicroLocationLogic *)*((_QWORD *)this + 28);
  v5 = *(_OWORD *)*(_QWORD *)a2.var0.var0;
  v4 = *(void **)(*(_QWORD *)a2.var0.var0 + 24);
  v6 = *(_QWORD *)(*(_QWORD *)a2.var0.var0 + 16);
  v7 = v4;
  *(_QWORD *)v8.var0.var0 = &v5;
  CLMicroLocationLogic::onOdometryError(v3, v8);

}

void sub_241AE9A2C(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Unwind_Resume(a1);
}

void CLMicroLocationSensorsLogic::onBleRssiMeasurement(uint64_t a1, CLMicroLocationProto::Measurement *a2, uint64_t a3)
{
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  std::locale::__imp **AnchorDeviceModelAllowedList;
  _BYTE v13[80];
  char v14;
  uint64_t v15;

  +[ULDefaultsSingleton shared](ULDefaultsSingleton, "shared");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "defaultsDictionary");
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "ULBleScanMaximalAgeForValidity");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "objectForKey:", v8);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  if (v9 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
    objc_msgSend(v9, "doubleValue");
  else
    objc_msgSend(&unk_2511EDB58, "doubleValue");
  v11 = v10;

  v15 = v11;
  CLMicroLocationProtobufHelper::measurementFromSourceData<CLMicroLocationProto::BleLeechedBeacons const&,true>(a3, (CLMicroLocationProto::Measurement *)v13);
  if (v14)
  {
    AnchorDeviceModelAllowedList = (std::locale::__imp **)CLMicroLocationLogic::getAnchorDeviceModelAllowedList(*(CLMicroLocationLogic **)(a1 + 224));
    if (CLMicroLocationsMeasurementFilters::isMeasurementGood(a2, (uint64_t)v13, (double *)&v15, AnchorDeviceModelAllowedList))
    {
      if (!v14)
        std::__throw_bad_optional_access[abi:ne180100]();
      std::__tree<CLMicroLocationProto::Measurement,CLEventsBuffer<CLMicroLocationProto::Measurement,double,ProtoMeasurementGetTime>::EventsComparator,std::allocator<CLMicroLocationProto::Measurement>>::__emplace_multi<CLMicroLocationProto::Measurement const&>(a1 + 520, (const CLMicroLocationProto::Measurement *)v13);
      CLEventsBuffer<CLMicroLocationProto::Measurement,double,ProtoMeasurementGetTime>::truncateBuffer((uint64_t *)(a1 + 512));
    }
    if (v14)
      CLMicroLocationProto::Measurement::~Measurement((CLMicroLocationProto::Measurement *)v13);
  }
}

void sub_241AE9B8C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_241AE9BC8(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  if (a19)
    CLMicroLocationProto::Measurement::~Measurement((CLMicroLocationProto::Measurement *)&a9);
  JUMPOUT(0x241AE9BC0);
}

void CLMicroLocationProtobufHelper::measurementFromSourceData<CLMicroLocationProto::BleLeechedBeacons const&,true>(uint64_t a1@<X0>, CLMicroLocationProto::Measurement *a2@<X8>)
{
  unsigned int v4;
  const CLMicroLocationProto::BleLeechedBeacons *v5;
  uint64_t v6;
  _QWORD v7[8];
  unsigned int v8;
  int v9;

  CLMicroLocationProto::Measurement::Measurement((CLMicroLocationProto::Measurement *)v7);
  v4 = *(_DWORD *)(a1 + 16);
  if (!CLMicroLocationProto::DataType_IsValid((CLMicroLocationProto *)v4))
    __assert_rtn("set_datatype", "microlocation.pb.h", 10718, "::CLMicroLocationProto::DataType_IsValid(value)");
  v6 = *(_QWORD *)(a1 + 8);
  v8 = v4;
  v9 |= 3u;
  v7[1] = v6;
  CLMicroLocationProtobufHelper::measurementFromSourceImpl((CLMicroLocationProtobufHelper *)v7, (CLMicroLocationProto::Measurement *)a1, v5);
  CLMicroLocationProto::Measurement::Measurement(a2, (const CLMicroLocationProto::Measurement *)v7);
  *((_BYTE *)a2 + 80) = 1;
  CLMicroLocationProto::Measurement::~Measurement((CLMicroLocationProto::Measurement *)v7);
}

void sub_241AE9C8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  CLMicroLocationProto::Measurement::~Measurement((CLMicroLocationProto::Measurement *)&a9);
  _Unwind_Resume(a1);
}

void CLMicroLocationSensorsLogic::onBleIdentityItem(CLMicroLocationSensorsLogic *this, const CLMicroLocationUtils::BleIdentityItem *a2)
{
  char *v4;
  std::locale::__imp **AnchorDeviceModelAllowedList;
  char v6;
  NSObject *v7;
  char *v8;
  const char *v9;
  const char *v10;
  const char *v11;
  const char *v12;
  char *v13;
  uint64_t v14;
  NSObject *v15;
  char *v16;
  NSObject *v17;
  char *v18;
  int v19;
  int v20;
  __int16 v21;
  const char *v22;
  __int16 v23;
  char *v24;
  __int16 v25;
  const char *v26;
  __int16 v27;
  const char *v28;
  __int16 v29;
  char *v30;
  __int16 v31;
  uint64_t v32;
  uint64_t v33;

  v33 = *MEMORY[0x24BDAC8D0];
  if (*((_QWORD *)this + 88) >= *((_QWORD *)this + 90))
  {
    if (onceToken_MicroLocation_Default != -1)
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_72);
    v15 = logObject_MicroLocation_Default;
    if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_ERROR))
    {
      v16 = (char *)*((_QWORD *)this + 88);
      v19 = 68289283;
      v20 = 0;
      v21 = 2082;
      v22 = "";
      v23 = 2049;
      v24 = v16;
      _os_log_impl(&dword_2419D9000, v15, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"fSameAccountBleIdentities exceeded max entries\", \"Size\":%{private}lu}", (uint8_t *)&v19, 0x1Cu);
    }
    if (onceToken_MicroLocation_Default != -1)
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_72);
    v17 = logObject_MicroLocation_Default;
    if (os_signpost_enabled((os_log_t)logObject_MicroLocation_Default))
    {
      v18 = (char *)*((_QWORD *)this + 88);
      v19 = 68289283;
      v20 = 0;
      v21 = 2082;
      v22 = "";
      v23 = 2049;
      v24 = v18;
      _os_signpost_emit_with_name_impl(&dword_2419D9000, v17, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "fSameAccountBleIdentities exceeded max entries", "{\"msg%{public}.0s\":\"fSameAccountBleIdentities exceeded max entries\", \"Size\":%{private}lu}", (uint8_t *)&v19, 0x1Cu);
    }
  }
  else if (*((_BYTE *)a2 + 104))
  {
    v4 = (char *)a2 + 80;
    AnchorDeviceModelAllowedList = (std::locale::__imp **)CLMicroLocationLogic::getAnchorDeviceModelAllowedList(*((CLMicroLocationLogic **)this + 28));
    if (CLMicroLocationsMeasurementFilters::isAnchorModelValid((uint64_t)a2 + 80, AnchorDeviceModelAllowedList))
    {
      std::__hash_table<CLMicroLocationUtils::BleIdentityItem,CLMicroLocationUtils::BleIdentityItem::HashItem,CLMicroLocationUtils::BleIdentityItem::PredicateItem,std::allocator<CLMicroLocationUtils::BleIdentityItem>>::__emplace_unique_key_args<CLMicroLocationUtils::BleIdentityItem,CLMicroLocationUtils::BleIdentityItem const&>((uint64_t)this + 680, (uint64_t)a2, (uint64_t)a2);
      if ((v6 & 1) != 0)
      {
        if (onceToken_MicroLocation_Default != -1)
          dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_72);
        v7 = (id)logObject_MicroLocation_Default;
        if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
        {
          v8 = (char *)operator new(0x28uLL);
          *(_QWORD *)(v8 + 29) = 0;
          *(_OWORD *)v8 = 0u;
          *((_OWORD *)v8 + 1) = 0u;
          boost::uuids::to_chars<char *>((uint64_t)a2, v8);
          if (!*((_BYTE *)a2 + 104))
            std::__throw_bad_optional_access[abi:ne180100]();
          v11 = (const char *)*((_QWORD *)a2 + 6);
          v10 = (char *)a2 + 48;
          v9 = v11;
          if (v10[23] >= 0)
            v9 = v10;
          if (*(v10 - 9) >= 0)
            v12 = v10 - 32;
          else
            v12 = (const char *)*((_QWORD *)v10 - 4);
          if (!*(v10 - 8))
            v12 = "";
          if (!v10[24])
            v9 = "";
          if (v10[55] >= 0)
            v13 = v4;
          else
            v13 = (char *)*((_QWORD *)v10 + 4);
          v14 = *((_QWORD *)v10 + 8);
          v19 = 68290307;
          v20 = 0;
          v21 = 2082;
          v22 = "";
          v23 = 2081;
          v24 = v8;
          v25 = 2081;
          v26 = v12;
          v27 = 2081;
          v28 = v9;
          v29 = 2081;
          v30 = v13;
          v31 = 2050;
          v32 = v14;
          _os_log_impl(&dword_2419D9000, v7, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"buffered a same icloud account BT identity\", \"BT uuid\":%{private, location:escape_only}s, \"Device name\":%{private, location:escape_only}s, \"Stable identifier\":%{private, location:escape_only}s, \"device model\":%{private, location:escape_only}s, \"Time stamp_s\":\"%{public}.09f\"}", (uint8_t *)&v19, 0x44u);
          operator delete(v8);
        }

      }
    }
  }
}

void sub_241AE9FC8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  operator delete(v2);

  _Unwind_Resume(a1);
}

void CLMicroLocationSensorsLogic::onUwbRangeMeasurements(uint64_t *a1, uint64_t *a2, double a3)
{
  uint64_t *v4;
  uint64_t v5;
  const CLMicroLocationProto::Measurement *i;
  uint64_t v7;
  _OWORD *v8;
  NSObject *v9;
  _BOOL8 v10;
  uint64_t v11;
  double v12;
  void *p_p;
  void *__p;
  __int128 v15;
  uint64_t v16;
  const CLMicroLocationProto::Measurement *v17;
  double v18;
  uint8_t buf[8];
  _BYTE v20[20];
  __int16 v21;
  void *v22;
  double v23[2];
  char v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v18 = a3;
  CLMicroLocationProtobufHelper::measurementsFromSourceData<CLMicroLocationProto::UwbRange>(a2, (uint64_t)&v16);
  v23[0] = 1.79769313e308;
  *(_QWORD *)buf = 0;
  *(_QWORD *)v20 = 0;
  *(_QWORD *)&v20[8] = 0;
  CLMicroLocationsMeasurementFilters::filterMeasurements((CLMicroLocationProto::Measurement *)&v18, (uint64_t)&v16, v23, (std::locale::__imp **)buf);
  __p = buf;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::__wrap_iter<CLMicroLocationProto::Measurement const*>,std::__wrap_iter<CLMicroLocationProto::Measurement const*>,std::insert_iterator<std::multiset<CLMicroLocationProto::Measurement,CLEventsBuffer<CLMicroLocationProto::Measurement,double,ProtoMeasurementGetTime>::EventsComparator,std::allocator<CLMicroLocationProto::Measurement>>>,0>(v16, v17, (const CLMicroLocationProto::Measurement *)(a1 + 73), (const CLMicroLocationProto::Measurement *)(a1 + 74), (const CLMicroLocationProto::Measurement **)buf);
  v4 = CLEventsBuffer<CLMicroLocationProto::Measurement,double,ProtoMeasurementGetTime>::truncateBuffer(a1 + 72);
  v5 = v16;
  for (i = v17; (const CLMicroLocationProto::Measurement *)v5 != i; v5 += 80)
  {
    v7 = *(_QWORD *)(v5 + 56);
    if (!v7)
      v7 = *(_QWORD *)(CLMicroLocationProto::Measurement::default_instance((CLMicroLocationProto::Measurement *)v4) + 56);
    CLMicroLocationProtobufHelper::uuidFromProtobuf(*(uint64_t ***)(v7 + 32), v23);
    if (v24)
    {
      v8 = operator new(0x28uLL);
      __p = v8;
      v15 = xmmword_241BB2320;
      *v8 = 0u;
      v8[1] = 0u;
      *(_QWORD *)((char *)v8 + 29) = 0;
      boost::uuids::to_chars<char *>((uint64_t)v23, v8);
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(&__p, "");
    }
    if (onceToken_MicroLocationQE_Default != -1)
      dispatch_once(&onceToken_MicroLocationQE_Default, &__block_literal_global_276);
    v9 = (id)logObject_MicroLocationQE_Default;
    v10 = os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG);
    if (v10)
    {
      v11 = *(_QWORD *)(v5 + 56);
      if (!v11)
        v11 = *(_QWORD *)(CLMicroLocationProto::Measurement::default_instance((CLMicroLocationProto::Measurement *)v10)
                        + 56);
      v12 = *(float *)(v11 + 20);
      p_p = &__p;
      if (v15 < 0)
        p_p = __p;
      *(_DWORD *)buf = 68289539;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)v20 = 2082;
      *(_QWORD *)&v20[2] = "";
      *(_WORD *)&v20[10] = 2050;
      *(double *)&v20[12] = v12;
      v21 = 2081;
      v22 = p_p;
      _os_log_impl(&dword_2419D9000, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Ingested UWB range measurement\", \"range\":\"%{public}.3f\", \"device ID\":%{private, location:escape_only}s}", buf, 0x26u);
    }

    if (SHIBYTE(v15) < 0)
      operator delete(__p);
  }
  *(_QWORD *)buf = &v16;
  std::vector<CLMicroLocationProto::Measurement>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
}

void sub_241AEA254(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20)
{
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  __p = &a20;
  std::vector<CLMicroLocationProto::Measurement>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

void CLMicroLocationProtobufHelper::measurementsFromSourceData<CLMicroLocationProto::UwbRange>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void **v8[10];
  char v9;
  __int128 v10;
  unint64_t v11;

  v10 = 0uLL;
  v11 = 0;
  std::vector<CLMicroLocationProto::Measurement>::reserve((uint64_t *)&v10, (a1[1] - *a1) >> 6);
  v4 = *a1;
  v5 = a1[1];
  while (v4 != v5)
  {
    CLMicroLocationProtobufHelper::measurementFromSourceData<CLMicroLocationProto::UwbRange const&,true>(v4, (CLMicroLocationProto::Measurement *)v8);
    if (v9)
    {
      v6 = *((_QWORD *)&v10 + 1);
      if (*((_QWORD *)&v10 + 1) >= v11)
      {
        v7 = std::vector<CLMicroLocationProto::Measurement>::__push_back_slow_path<CLMicroLocationProto::Measurement const&>((uint64_t *)&v10, (const CLMicroLocationProto::Measurement *)v8);
      }
      else
      {
        CLMicroLocationProto::Measurement::Measurement(*((CLMicroLocationProto::Measurement **)&v10 + 1), (const CLMicroLocationProto::Measurement *)v8);
        v7 = v6 + 80;
      }
      *((_QWORD *)&v10 + 1) = v7;
      if (v9)
        CLMicroLocationProto::Measurement::~Measurement((CLMicroLocationProto::Measurement *)v8);
    }
    v4 += 64;
  }
  *(_OWORD *)a2 = v10;
  *(_QWORD *)(a2 + 16) = v11;
  v11 = 0;
  v10 = 0uLL;
  v8[0] = (void **)&v10;
  std::vector<CLMicroLocationProto::Measurement>::__destroy_vector::operator()[abi:ne180100](v8);
}

void sub_241AEA398(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  uint64_t v10;

  a10 = (void **)(v10 - 64);
  std::vector<CLMicroLocationProto::Measurement>::__destroy_vector::operator()[abi:ne180100](&a10);
  _Unwind_Resume(a1);
}

void CLMicroLocationSensorsLogic::onMotionMeasurements(uint64_t a1)
{
  CLMicroLocationSensorsLogic::MotionSM::transitionLogic(a1 + 456, 3);
}

void CLMicroLocationSensorsLogic::onFailureToReceiveGeofenceStatusReports(CLMicroLocationSensorsLogic *this)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  double v6;
  double v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  double v12;
  double v13;
  std::string *v14;
  __int128 v15;
  std::string *v16;
  __int128 v17;
  std::string *p_p;
  std::string::size_type size;
  std::string *v20;
  __int128 v21;
  void **v22;
  std::string::size_type v23;
  std::string *v24;
  void *v25;
  char v26;
  NSObject *v27;
  void *v28;
  std::string __p;
  std::string v30;
  void *v31[2];
  int64_t v32;
  void *v33[2];
  char v34;
  void *v35;
  _BYTE v36[15];
  char v37;
  std::string v38;
  std::string v39;
  uint64_t v40;

  v40 = *MEMORY[0x24BDAC8D0];
  std::string::basic_string[abi:ne180100]<0>(&v35, "onFailureToReceiveGeofenceStatusReports: ");
  std::string::basic_string[abi:ne180100]<0>(v33, "");
  if (*((_DWORD *)this + 114) == 1)
  {
    MEMORY[0x2426A02C4](v33, "Restarting Geofence. ");
    CLMicroLocationSensorsLogic::MotionSM::transitionLogic((uint64_t)this + 456, 0);
  }
  else
  {
    MEMORY[0x2426A02C4](v33, "Ignoring failure. ");
  }
  +[ULDefaultsSingleton shared](ULDefaultsSingleton, "shared");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "defaultsDictionary");
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "ULMaxTimeAllowedWithoutFenceStatusReport");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "objectForKey:", v4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  if (v5 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
    objc_msgSend(v5, "doubleValue");
  else
    objc_msgSend(&unk_2511EDC60, "doubleValue");
  v7 = v6;

  +[ULDefaultsSingleton shared](ULDefaultsSingleton, "shared");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "defaultsDictionary");
  v9 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "ULMaxDelayAfterFenceStatusReportTimerFires");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "objectForKey:", v10);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  if (v11 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
    objc_msgSend(v11, "doubleValue");
  else
    objc_msgSend(&unk_2511EDBD0, "doubleValue");
  v13 = v12;

  std::to_string(&v30, v7);
  v14 = std::string::insert(&v30, 0, " Running with FenceStatusTimeout: ");
  v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  v38.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v15;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  v16 = std::string::append(&v38, "and RaceDelayTimeout: ");
  v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
  v39.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v39.__r_.__value_.__l.__data_ = v17;
  v16->__r_.__value_.__l.__size_ = 0;
  v16->__r_.__value_.__r.__words[2] = 0;
  v16->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&__p, v13);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    size = __p.__r_.__value_.__l.__size_;
  v20 = std::string::append(&v39, (const std::string::value_type *)p_p, size);
  v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
  v32 = v20->__r_.__value_.__r.__words[2];
  *(_OWORD *)v31 = v21;
  v20->__r_.__value_.__l.__size_ = 0;
  v20->__r_.__value_.__r.__words[2] = 0;
  v20->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v39.__r_.__value_.__l.__data_);
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v38.__r_.__value_.__l.__data_);
  if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v30.__r_.__value_.__l.__data_);
  std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)&v35, (const void **)v33, (uint64_t)&v39);
  if (v32 >= 0)
    v22 = v31;
  else
    v22 = (void **)v31[0];
  if (v32 >= 0)
    v23 = HIBYTE(v32);
  else
    v23 = (std::string::size_type)v31[1];
  v24 = std::string::append(&v39, (const std::string::value_type *)v22, v23);
  v25 = (void *)v24->__r_.__value_.__r.__words[0];
  v38.__r_.__value_.__r.__words[0] = v24->__r_.__value_.__l.__size_;
  *(std::string::size_type *)((char *)v38.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v24->__r_.__value_.__r.__words[1] + 7);
  v26 = HIBYTE(v24->__r_.__value_.__r.__words[2]);
  v24->__r_.__value_.__l.__size_ = 0;
  v24->__r_.__value_.__r.__words[2] = 0;
  v24->__r_.__value_.__r.__words[0] = 0;
  if (v37 < 0)
    operator delete(v35);
  v35 = v25;
  *(_QWORD *)v36 = v38.__r_.__value_.__r.__words[0];
  *(_QWORD *)&v36[7] = *(std::string::size_type *)((char *)v38.__r_.__value_.__r.__words + 7);
  v37 = v26;
  if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v39.__r_.__value_.__l.__data_);
  if (onceToken_MicroLocation_Default != -1)
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_72);
  v27 = logObject_MicroLocation_Default;
  if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_ERROR))
  {
    v28 = &v35;
    if (v37 < 0)
      v28 = v35;
    LODWORD(v39.__r_.__value_.__l.__data_) = 136315138;
    *(std::string::size_type *)((char *)v39.__r_.__value_.__r.__words + 4) = (std::string::size_type)v28;
    _os_log_impl(&dword_2419D9000, v27, OS_LOG_TYPE_ERROR, "%s", (uint8_t *)&v39, 0xCu);
  }
  CLMicroLocationErrorHandling::reportError((uint64_t *)&v35);
  if (SHIBYTE(v32) < 0)
    operator delete(v31[0]);
  if (v34 < 0)
    operator delete(v33[0]);
  if (v37 < 0)
    operator delete(v35);
}

void sub_241AEA810(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45)
{
  void *v45;
  void *v46;
  void *v47;

  if (a33 < 0)
    operator delete(__p);
  if (a39 < 0)
    operator delete(a34);
  _Unwind_Resume(a1);
}

uint64_t std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>@<X0>(const void **a1@<X0>, const void **a2@<X1>, uint64_t a3@<X8>)
{
  size_t v5;
  size_t v6;
  uint64_t result;
  char *v8;
  const void *v9;
  char *v10;
  const void *v11;

  if (*((char *)a1 + 23) >= 0)
    v5 = *((unsigned __int8 *)a1 + 23);
  else
    v5 = (size_t)a1[1];
  if (*((char *)a2 + 23) >= 0)
    v6 = *((unsigned __int8 *)a2 + 23);
  else
    v6 = (size_t)a2[1];
  result = std::string::basic_string[abi:ne180100](a3, v6 + v5);
  if (*(char *)(result + 23) >= 0)
    v8 = (char *)result;
  else
    v8 = *(char **)result;
  if (v5)
  {
    if (*((char *)a1 + 23) >= 0)
      v9 = a1;
    else
      v9 = *a1;
    result = (uint64_t)memmove(v8, v9, v5);
  }
  v10 = &v8[v5];
  if (v6)
  {
    if (*((char *)a2 + 23) >= 0)
      v11 = a2;
    else
      v11 = *a2;
    result = (uint64_t)memmove(v10, v11, v6);
  }
  v10[v6] = 0;
  return result;
}

void CLMicroLocationSensorsLogic::onStopMotionMeasurements(uint64_t a1)
{
  CLMicroLocationSensorsLogic::MotionSM::transitionLogic(a1 + 456, 4);
}

void CLMicroLocationSensorsLogic::onCustomLoiRecordingFenceBreach(CLMiLoCustomLoiRecordingManager ***this)
{
  CLMicroLocationLogic::onCustomLoiRecordingFenceBreach(this[28]);
}

uint64_t CLMicroLocationSensorsLogic::onNiSessionStatus(uint64_t result, int a2, double a3)
{
  *(double *)(result + 208) = a3;
  *(_DWORD *)(result + 200) = a2;
  return result;
}

void CLMicroLocationSensorsLogic::reloadWifiChannelHistogram(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  void *__p;
  void *v4;
  uint64_t v5;

  v2 = a1 + 240;
  __p = 0;
  v4 = 0;
  v5 = 0;
  std::vector<CLMicroLocationWiFiChannelHistogram>::__init_with_size[abi:ne180100]<CLMicroLocationWiFiChannelHistogram*,CLMicroLocationWiFiChannelHistogram*>(&__p, *(const void **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3);
  CLMicroLocationSensorsDriver::setCurrentWifiChannelHistogram(v2, (uint64_t)&__p);
  if (__p)
  {
    v4 = __p;
    operator delete(__p);
  }
}

void sub_241AEAAA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL CLMicroLocationSensorsLogic::isNiSessionNotResumedForPeriod(uint64_t a1, uint64_t a2)
{
  return !CLMicroLocationSensorsLogic::State::isNiSessionStateResumedForRequiredPeriod(a1 + 8, (double)a2 / 1000.0);
}

_QWORD *CLMicroLocationSensorsLogic::setWifiLink(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *result;
  uint64_t v4;
  _BYTE v5[24];
  _BYTE *v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v2 = a1 + 240;
  std::__function::__value_func<ULWiFiScanProvider * ()(objc_object  {objcproto26ULWiFiScanProviderDelegate}*)>::__value_func[abi:ne180100]((uint64_t)v5, a2);
  CLMicroLocationSensorsDriver::setWifiLink(v2, (uint64_t)v5);
  result = v6;
  if (v6 == v5)
  {
    v4 = 4;
    result = v5;
  }
  else
  {
    if (!v6)
      return result;
    v4 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v4))();
}

void sub_241AEAB7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t CLMicroLocationSensorsLogic::setBleLink(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  CLMicroLocationSensorsDriver *v4;
  uint64_t v5;
  uint64_t v7;

  v3 = *(_QWORD *)(a2 + 24);
  if (!v3)
    std::__throw_bad_function_call[abi:ne180100]();
  v4 = (CLMicroLocationSensorsDriver *)(a1 + 240);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v3 + 48))(&v7, v3, a1 + 240);
  CLMicroLocationSensorsDriver::setBleLink((uint64_t)v4, &v7);
  v5 = v7;
  v7 = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  return CLMicroLocationSensorsDriver::activateBleScannersIfNeeded(v4);
}

void sub_241AEAC28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

_QWORD *CLMicroLocationSensorsLogic::setOdometryLink(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *result;
  uint64_t v4;
  _BYTE v5[24];
  _BYTE *v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v2 = a1 + 240;
  std::__function::__value_func<ULOdometryProvider * ()(objc_object  {objcproto26ULOdometryProviderDelegate}*)>::__value_func[abi:ne180100]((uint64_t)v5, a2);
  CLMicroLocationSensorsDriver::setOdometryLink(v2, (uint64_t)v5);
  result = v6;
  if (v6 == v5)
  {
    v4 = 4;
    result = v5;
  }
  else
  {
    if (!v6)
      return result;
    v4 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v4))();
}

void sub_241AEACE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t CLMicroLocationSensorsLogic::setUwbLink(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;

  v3 = *(_QWORD *)(a2 + 24);
  if (!v3)
    std::__throw_bad_function_call[abi:ne180100]();
  v4 = a1 + 240;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v3 + 48))(&v6, v3, a1 + 240);
  CLMicroLocationSensorsDriver::setUwbLink(v4, &v6);
  result = v6;
  v6 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_241AEAD84(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

uint64_t CLMicroLocationSensorsLogic::setMotionLink(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;

  v3 = *(_QWORD *)(a2 + 24);
  if (!v3)
    std::__throw_bad_function_call[abi:ne180100]();
  v4 = a1 + 240;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v3 + 48))(&v6, v3, a1 + 240);
  CLMicroLocationSensorsDriver::setMotionLink(v4, &v6);
  result = v6;
  v6 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_241AEAE14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

uint64_t CLMicroLocationSensorsLogic::setStopMotionLink(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;

  v3 = *(_QWORD *)(a2 + 24);
  if (!v3)
    std::__throw_bad_function_call[abi:ne180100]();
  v4 = a1 + 240;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v3 + 48))(&v6, v3, a1 + 240);
  CLMicroLocationSensorsDriver::setStopMotionLink(v4, &v6);
  result = v6;
  v6 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_241AEAEA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

uint64_t CLMicroLocationSensorsLogic::setCustomLoiRecordingFenceLink(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;

  v3 = *(_QWORD *)(a2 + 24);
  if (!v3)
    std::__throw_bad_function_call[abi:ne180100]();
  v4 = a1 + 240;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v3 + 48))(&v6, v3, a1 + 240);
  CLMicroLocationSensorsDriver::setCustomLoiRecordingFenceLink(v4, &v6);
  result = v6;
  v6 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_241AEAF34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

void CLMicroLocationSensorsLogic::onDisplayStateChange(uint64_t a1, int a2, _QWORD *a3)
{
  int v3;

  if (a2)
  {
    *(_QWORD *)(a1 + 640) = *a3;
    v3 = 1;
  }
  else
  {
    v3 = 2;
  }
  CLMicroLocationSensorsLogic::MotionSM::transitionLogic(a1 + 456, v3);
}

uint64_t CLMicroLocationSensorsLogic::getExtensionDurationForUwbScanCompletion(CLMicroLocationSensorsLogic *this)
{
  double v2;
  double v3;
  double v4;

  v2 = cl::chrono::CFAbsoluteTimeClock::now();
  if (*((_BYTE *)this + 178)
    && (v3 = v2,
        v4 = v2 - *((double *)this + 80),
        v4 * 1000.0 < (double)ULSettings::get<ULSettings::LocalizingBacklightOnInitialScanDelay>()))
  {
    return (uint64_t)((double)ULSettings::get<ULSettings::LocalizingBacklightOnInitialScanDelay>()
                   + (v3 - *((double *)this + 80)) * -1000.0);
  }
  else
  {
    return 0;
  }
}

uint64_t ULSettings::get<ULSettings::LocalizingBacklightOnInitialScanDelay>()
{
  void *v0;
  void *v1;
  void *v2;
  void *v3;
  int v4;
  uint64_t v5;

  +[ULDefaultsSingleton shared](ULDefaultsSingleton, "shared");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "defaultsDictionary");
  v1 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "ULLocalizingBacklightOnInitialScanDelay");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "objectForKey:", v2);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  if (v3 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
    v4 = objc_msgSend(v3, "intValue");
  else
    v4 = objc_msgSend(&unk_2511EDBE8, "intValue");
  v5 = v4;

  return v5;
}

void sub_241AEB0BC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void CLMicroLocationSensorsLogic::updateBleOobKeys(uint64_t a1, void *a2)
{
  objc_storeStrong((id *)(a1 + 648), a2);
}

void ___ZN27CLMicroLocationSensorsLogic19startBleRssiSessionERKN20CLMicroLocationUtils20BleScanConfigurationE_block_invoke(uint64_t a1)
{
  CLMicroLocationSensorsLogic::onBLEScanRequestTimeout(*(CLMicroLocationSensorsLogic **)(a1 + 32));
}

uint64_t CLMicroLocationSensorsLogic::logEvent(CLMicroLocationSensorsLogic *this, const Entry *a2)
{
  return (*(uint64_t (**)(_QWORD, const Entry *))(**((_QWORD **)this + 28) + 120))(*((_QWORD *)this + 28), a2);
}

__n128 CLMicroLocationSensorsLogic::getPowerMetrics@<Q0>(CLMicroLocationSensorsLogic *this@<X0>, __n128 *a2@<X8>)
{
  __n128 result;

  a2[1].n128_u64[0] = *((_QWORD *)this + 93);
  result = *(__n128 *)((char *)this + 728);
  *a2 = result;
  return result;
}

double CLMicroLocationSensorsLogic::clrPowerMetrics(CLMicroLocationSensorsLogic *this)
{
  double result;

  *((_DWORD *)this + 186) = 0;
  result = 0.0;
  *(_OWORD *)((char *)this + 728) = 0u;
  return result;
}

uint64_t CLMicroLocationSensorsLogic::getScanScenario(CLMicroLocationSensorsLogic *this)
{
  return *((unsigned __int8 *)this + 176);
}

void CLMicroLocationSensorsLogic::MotionSM::transitionLogic(uint64_t a1, int a2)
{
  BOOL v2;
  int v3;
  int v4;
  char v5;
  unsigned int v8;
  unsigned int v9;
  NSObject *v10;

  switch(*(_DWORD *)a1)
  {
    case 0:
      CLMicroLocationSensorsLogic::MotionSM::transitionLogicIdle(a1, a2);
      v5 = 0;
      LOBYTE(v4) = 0;
      LOBYTE(v3) = 0;
      v2 = 0;
      break;
    case 1:
      v8 = CLMicroLocationSensorsLogic::MotionSM::transitionLogicGeofence(a1, a2);
      goto LABEL_5;
    case 2:
      v8 = CLMicroLocationSensorsLogic::MotionSM::transitionLogicStopDetection(a1, a2);
LABEL_5:
      v2 = 0;
      v5 = v8 & 1;
      v4 = (v8 >> 8) & 1;
      LOBYTE(v3) = (v8 & 0xFFFF0000) != 0;
      break;
    case 3:
      v9 = CLMicroLocationSensorsLogic::MotionSM::transitionLogicPendingResumeStopDetection(a1, a2);
      v5 = v9 & 1;
      v4 = (v9 >> 8) & 1;
      v3 = HIWORD(v9) & 1;
      v2 = (v9 & 0xFF000000) != 0;
      break;
    default:
      break;
  }
  if (onceToken_MicroLocation_Default != -1)
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_72);
  v10 = (id)logObject_MicroLocation_Default;
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    __asm { BR              X10 }

  if ((v5 & 1) != 0)
    CLMicroLocationLogic::onInMotion(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 224), 0);
  if ((v4 & 1) != 0)
    CLMicroLocationLogic::onInMotion(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 224), 1u);
  if ((v3 & 1) != 0)
    CLMicroLocationLogic::onStopMotion(*(CLMicroLocationLogic **)(*(_QWORD *)(a1 + 8) + 224));
  if (v2)
    CLMicroLocationLogic::onInMotion(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 224), 2u);
}

void sub_241AEB4D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  void *v21;
  void *v22;
  int v23;

  if (v23 < 0)
    operator delete(v22);
  if (a21 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

uint64_t CLMicroLocationSensorsLogic::MotionSM::transitionLogicIdle(uint64_t a1, int a2)
{
  NSObject *v3;
  NSObject *v4;
  const char *v5;
  const char *v6;
  NSObject *v7;
  int v9;
  int v10;
  __int16 v11;
  const char *v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  switch(a2)
  {
    case 0:
      CLMicroLocationSensorsDriver::setMotionFence((CLMicroLocationSensorsDriver *)(*(_QWORD *)(a1 + 8) + 240));
      *(_DWORD *)a1 = 1;
      break;
    case 1:
      *(_BYTE *)(a1 + 4) = 1;
      break;
    case 2:
      *(_BYTE *)(a1 + 4) = 0;
      break;
    case 3:
      if (onceToken_MicroLocation_Default != -1)
        dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_72);
      v3 = logObject_MicroLocation_Default;
      if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_ERROR))
      {
        v9 = 68289026;
        v10 = 0;
        v11 = 2082;
        v12 = "";
        _os_log_impl(&dword_2419D9000, v3, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"MotionSM::transitionLogicIdle, shouldn't receive FenceCross at Idle state\"}", (uint8_t *)&v9, 0x12u);
      }
      if (onceToken_MicroLocation_Default != -1)
        dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_72);
      v4 = logObject_MicroLocation_Default;
      if (os_signpost_enabled((os_log_t)logObject_MicroLocation_Default))
      {
        v9 = 68289026;
        v10 = 0;
        v11 = 2082;
        v12 = "";
        v5 = "MotionSM::transitionLogicIdle, shouldn't receive FenceCross at Idle state";
        v6 = "{\"msg%{public}.0s\":\"MotionSM::transitionLogicIdle, shouldn't receive FenceCross at Idle state\"}";
        goto LABEL_21;
      }
      break;
    case 4:
      if (onceToken_MicroLocation_Default != -1)
        dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_72);
      v7 = logObject_MicroLocation_Default;
      if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_ERROR))
      {
        v9 = 68289026;
        v10 = 0;
        v11 = 2082;
        v12 = "";
        _os_log_impl(&dword_2419D9000, v7, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"MotionSM::transitionLogicIdle, shouldn't receive StopMotion at Idle state\"}", (uint8_t *)&v9, 0x12u);
      }
      if (onceToken_MicroLocation_Default != -1)
        dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_72);
      v4 = logObject_MicroLocation_Default;
      if (os_signpost_enabled((os_log_t)logObject_MicroLocation_Default))
      {
        v9 = 68289026;
        v10 = 0;
        v11 = 2082;
        v12 = "";
        v5 = "MotionSM::transitionLogicIdle, shouldn't receive StopMotion at Idle state";
        v6 = "{\"msg%{public}.0s\":\"MotionSM::transitionLogicIdle, shouldn't receive StopMotion at Idle state\"}";
LABEL_21:
        _os_signpost_emit_with_name_impl(&dword_2419D9000, v4, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, v5, v6, (uint8_t *)&v9, 0x12u);
      }
      break;
    default:
      return 0;
  }
  return 0;
}

uint64_t CLMicroLocationSensorsLogic::MotionSM::transitionLogicGeofence(uint64_t a1, int a2)
{
  int v3;
  int v4;
  int v5;
  NSObject *v6;
  NSObject *v7;
  int v9;
  int v10;
  __int16 v11;
  const char *v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  switch(a2)
  {
    case 0:
      CLMicroLocationSensorsDriver::clearMotionFence((CLMicroLocationSensorsDriver *)(*(_QWORD *)(a1 + 8) + 240));
      CLMicroLocationSensorsDriver::setMotionFence((CLMicroLocationSensorsDriver *)(*(_QWORD *)(a1 + 8) + 240));
      v3 = 0;
      v4 = 0;
      *(_DWORD *)a1 = 1;
      return v3 & 0x10000 | v4;
    case 1:
      v3 = 0;
      v4 = 0;
      *(_BYTE *)(a1 + 4) = 1;
      return v3 & 0x10000 | v4;
    case 2:
      v3 = 0;
      v4 = 0;
      *(_BYTE *)(a1 + 4) = 0;
      return v3 & 0x10000 | v4;
    case 3:
      if (!*(_BYTE *)(a1 + 4))
        goto LABEL_19;
      if ((ULSettings::get<ULSettings::MotionStopDetectionModuleEnable>() & 1) != 0)
      {
        v3 = 0;
        v4 = 1;
        v5 = 2;
        goto LABEL_22;
      }
      if (*(_BYTE *)(a1 + 4))
        goto LABEL_21;
LABEL_19:
      if ((ULSettings::get<ULSettings::MotionStopDetectionModuleEnable>() & 1) != 0)
      {
        v4 = 0;
        v3 = 0x10000;
        v5 = 3;
      }
      else
      {
LABEL_21:
        v5 = 0;
        v4 = 0;
        v3 = 0x10000;
      }
LABEL_22:
      CLMicroLocationSensorsLogic::MotionSM::changeState(a1, 1, v5);
      return v3 & 0x10000 | v4;
    case 4:
      if (onceToken_MicroLocation_Default != -1)
        dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_72);
      v6 = logObject_MicroLocation_Default;
      if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_ERROR))
      {
        v9 = 68289026;
        v10 = 0;
        v11 = 2082;
        v12 = "";
        _os_log_impl(&dword_2419D9000, v6, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"MotionSM::transitionLogicGeofence, shouldn't receive StopMotion at Geofence state\"}", (uint8_t *)&v9, 0x12u);
      }
      if (onceToken_MicroLocation_Default != -1)
        dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_72);
      v7 = logObject_MicroLocation_Default;
      if (os_signpost_enabled((os_log_t)logObject_MicroLocation_Default))
      {
        v9 = 68289026;
        v10 = 0;
        v11 = 2082;
        v12 = "";
        _os_signpost_emit_with_name_impl(&dword_2419D9000, v7, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "MotionSM::transitionLogicGeofence, shouldn't receive StopMotion at Geofence state", "{\"msg%{public}.0s\":\"MotionSM::transitionLogicGeofence, shouldn't receive StopMotion at Geofence state\"}", (uint8_t *)&v9, 0x12u);
      }
      goto LABEL_16;
    case 5:
      CLMicroLocationSensorsDriver::clearMotionFence((CLMicroLocationSensorsDriver *)(*(_QWORD *)(a1 + 8) + 240));
      v3 = 0;
      v4 = 0;
      *(_DWORD *)a1 = 0;
      return v3 & 0x10000 | v4;
    default:
LABEL_16:
      v3 = 0;
      v4 = 0;
      return v3 & 0x10000 | v4;
  }
}

uint64_t CLMicroLocationSensorsLogic::MotionSM::transitionLogicStopDetection(uint64_t a1, int a2)
{
  NSObject *v3;
  NSObject *v4;
  uint64_t result;
  NSObject *v6;
  NSObject *v7;
  int v8;
  int v9;
  __int16 v10;
  const char *v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  switch(a2)
  {
    case 0:
      if (onceToken_MicroLocation_Default != -1)
        dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_72);
      v3 = logObject_MicroLocation_Default;
      if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_ERROR))
      {
        v8 = 68289026;
        v9 = 0;
        v10 = 2082;
        v11 = "";
        _os_log_impl(&dword_2419D9000, v3, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"MotionSM::transitionLogicStopDetection, shouldn't receive SetFence at StopDetection state\"}", (uint8_t *)&v8, 0x12u);
      }
      if (onceToken_MicroLocation_Default != -1)
        dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_72);
      v4 = logObject_MicroLocation_Default;
      result = os_signpost_enabled((os_log_t)logObject_MicroLocation_Default);
      if ((_DWORD)result)
      {
        v8 = 68289026;
        v9 = 0;
        v10 = 2082;
        v11 = "";
        _os_signpost_emit_with_name_impl(&dword_2419D9000, v4, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "MotionSM::transitionLogicStopDetection, shouldn't receive SetFence at StopDetection state", "{\"msg%{public}.0s\":\"MotionSM::transitionLogicStopDetection, shouldn't receive SetFence at StopDetection state\"}", (uint8_t *)&v8, 0x12u);
        goto LABEL_10;
      }
      break;
    case 1:
      if (onceToken_MicroLocation_Default != -1)
        dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_72);
      v6 = logObject_MicroLocation_Default;
      if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_ERROR))
      {
        v8 = 68289026;
        v9 = 0;
        v10 = 2082;
        v11 = "";
        _os_log_impl(&dword_2419D9000, v6, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"MotionSM::transitionLogicStopDetection, shouldn't receive ScreenOn at StopDetection state\"}", (uint8_t *)&v8, 0x12u);
      }
      if (onceToken_MicroLocation_Default != -1)
        dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_72);
      v7 = logObject_MicroLocation_Default;
      if (os_signpost_enabled((os_log_t)logObject_MicroLocation_Default))
      {
        v8 = 68289026;
        v9 = 0;
        v10 = 2082;
        v11 = "";
        _os_signpost_emit_with_name_impl(&dword_2419D9000, v7, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "MotionSM::transitionLogicStopDetection, shouldn't receive ScreenOn at StopDetection state", "{\"msg%{public}.0s\":\"MotionSM::transitionLogicStopDetection, shouldn't receive ScreenOn at StopDetection state\"}", (uint8_t *)&v8, 0x12u);
      }
      result = 0;
      *(_BYTE *)(a1 + 4) = 1;
      break;
    case 2:
      *(_BYTE *)(a1 + 4) = 0;
      CLMicroLocationSensorsDriver::clearStopDetection((CLMicroLocationSensorsDriver *)(*(_QWORD *)(a1 + 8) + 240));
      *(_DWORD *)a1 = 3;
      goto LABEL_23;
    case 3:
      result = 256;
      break;
    case 4:
      CLMicroLocationSensorsDriver::clearStopDetection((CLMicroLocationSensorsDriver *)(*(_QWORD *)(a1 + 8) + 240));
      *(_DWORD *)a1 = 0;
LABEL_23:
      result = 0x10000;
      break;
    case 5:
      CLMicroLocationSensorsDriver::clearStopDetection((CLMicroLocationSensorsDriver *)(*(_QWORD *)(a1 + 8) + 240));
      result = 0;
      *(_DWORD *)a1 = 0;
      break;
    default:
LABEL_10:
      result = 0;
      break;
  }
  return result;
}

uint64_t CLMicroLocationSensorsLogic::MotionSM::transitionLogicPendingResumeStopDetection(uint64_t a1, int a2)
{
  NSObject *v3;
  NSObject *v4;
  uint64_t result;
  const char *v6;
  const char *v7;
  NSObject *v8;
  NSObject *v9;
  NSObject *v10;
  int v11;
  int v12;
  __int16 v13;
  const char *v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  switch(a2)
  {
    case 0:
      if (onceToken_MicroLocation_Default != -1)
        dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_72);
      v3 = logObject_MicroLocation_Default;
      if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_ERROR))
      {
        v11 = 68289026;
        v12 = 0;
        v13 = 2082;
        v14 = "";
        _os_log_impl(&dword_2419D9000, v3, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"MotionSM::transitionPendingResumeLogicStopDetection, shouldn't receive SetFence at PendingResumeStopDetection state\"}", (uint8_t *)&v11, 0x12u);
      }
      if (onceToken_MicroLocation_Default != -1)
        dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_72);
      v4 = logObject_MicroLocation_Default;
      result = os_signpost_enabled((os_log_t)logObject_MicroLocation_Default);
      if ((_DWORD)result)
      {
        v11 = 68289026;
        v12 = 0;
        v13 = 2082;
        v14 = "";
        v6 = "MotionSM::transitionPendingResumeLogicStopDetection, shouldn't receive SetFence at PendingResumeStopDetection state";
        v7 = "{\"msg%{public}.0s\":\"MotionSM::transitionPendingResumeLogicStopDetection, shouldn't receive SetFence at P"
             "endingResumeStopDetection state\"}";
        goto LABEL_35;
      }
      break;
    case 1:
      *(_BYTE *)(a1 + 4) = 1;
      CLMicroLocationSensorsDriver::setStopDetection((CLMicroLocationSensorsDriver *)(*(_QWORD *)(a1 + 8) + 240));
      *(_DWORD *)a1 = 2;
      result = 0x1000000;
      break;
    case 2:
      *(_BYTE *)(a1 + 4) = 0;
      if (onceToken_MicroLocation_Default != -1)
        dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_72);
      v8 = logObject_MicroLocation_Default;
      if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_ERROR))
      {
        v11 = 68289026;
        v12 = 0;
        v13 = 2082;
        v14 = "";
        _os_log_impl(&dword_2419D9000, v8, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"MotionSM::transitionPendingResumeLogicStopDetection, shouldn't receive ScreenOff at PendingResumeStopDetection state\"}", (uint8_t *)&v11, 0x12u);
      }
      if (onceToken_MicroLocation_Default != -1)
        dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_72);
      v4 = logObject_MicroLocation_Default;
      result = os_signpost_enabled((os_log_t)logObject_MicroLocation_Default);
      if ((_DWORD)result)
      {
        v11 = 68289026;
        v12 = 0;
        v13 = 2082;
        v14 = "";
        v6 = "MotionSM::transitionPendingResumeLogicStopDetection, shouldn't receive ScreenOff at PendingResumeStopDetection state";
        v7 = "{\"msg%{public}.0s\":\"MotionSM::transitionPendingResumeLogicStopDetection, shouldn't receive ScreenOff at "
             "PendingResumeStopDetection state\"}";
        goto LABEL_35;
      }
      break;
    case 3:
      if (onceToken_MicroLocation_Default != -1)
        dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_72);
      v9 = logObject_MicroLocation_Default;
      if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_ERROR))
      {
        v11 = 68289026;
        v12 = 0;
        v13 = 2082;
        v14 = "";
        _os_log_impl(&dword_2419D9000, v9, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"MotionSM::transitionPendingResumeLogicStopDetection, shouldn't receive FenceCross at PendingResumeStopDetection state\"}", (uint8_t *)&v11, 0x12u);
      }
      if (onceToken_MicroLocation_Default != -1)
        dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_72);
      v4 = logObject_MicroLocation_Default;
      result = os_signpost_enabled((os_log_t)logObject_MicroLocation_Default);
      if ((_DWORD)result)
      {
        v11 = 68289026;
        v12 = 0;
        v13 = 2082;
        v14 = "";
        v6 = "MotionSM::transitionPendingResumeLogicStopDetection, shouldn't receive FenceCross at PendingResumeStopDetection state";
        v7 = "{\"msg%{public}.0s\":\"MotionSM::transitionPendingResumeLogicStopDetection, shouldn't receive FenceCross at"
             " PendingResumeStopDetection state\"}";
        goto LABEL_35;
      }
      break;
    case 4:
      if (onceToken_MicroLocation_Default != -1)
        dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_72);
      v10 = logObject_MicroLocation_Default;
      if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_ERROR))
      {
        v11 = 68289026;
        v12 = 0;
        v13 = 2082;
        v14 = "";
        _os_log_impl(&dword_2419D9000, v10, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"MotionSM::transitionPendingResumeLogicStopDetection, shouldn't receive StopMotion at PendingResumeStopDetection state\"}", (uint8_t *)&v11, 0x12u);
      }
      if (onceToken_MicroLocation_Default != -1)
        dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_72);
      v4 = logObject_MicroLocation_Default;
      result = os_signpost_enabled((os_log_t)logObject_MicroLocation_Default);
      if ((_DWORD)result)
      {
        v11 = 68289026;
        v12 = 0;
        v13 = 2082;
        v14 = "";
        v6 = "MotionSM::transitionPendingResumeLogicStopDetection, shouldn't receive StopMotion at PendingResumeStopDetection state";
        v7 = "{\"msg%{public}.0s\":\"MotionSM::transitionPendingResumeLogicStopDetection, shouldn't receive StopMotion at"
             " PendingResumeStopDetection state\"}";
LABEL_35:
        _os_signpost_emit_with_name_impl(&dword_2419D9000, v4, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, v6, v7, (uint8_t *)&v11, 0x12u);
        goto LABEL_36;
      }
      break;
    case 5:
      result = 0;
      *(_DWORD *)a1 = 0;
      break;
    default:
LABEL_36:
      result = 0;
      break;
  }
  return result;
}

void CLMicroLocationSensorsLogic::MotionSM::stateToStr(int a1)
{
  __asm { BR              X10 }
}

void sub_241AEC2B4()
{
  char *v0;

  v0[23] = 4;
  strcpy(v0, "Idle");
}

uint64_t CLMicroLocationSensorsLogic::MotionSM::changeState(uint64_t result, int a2, int a3)
{
  uint64_t v4;

  v4 = result;
  if (a2 == 2)
  {
    result = CLMicroLocationSensorsDriver::clearStopDetection((CLMicroLocationSensorsDriver *)(*(_QWORD *)(result + 8)
                                                                                             + 240));
  }
  else if (a2 == 1)
  {
    result = CLMicroLocationSensorsDriver::clearMotionFence((CLMicroLocationSensorsDriver *)(*(_QWORD *)(result + 8)
                                                                                           + 240));
  }
  if (a3 == 2)
  {
    result = CLMicroLocationSensorsDriver::setStopDetection((CLMicroLocationSensorsDriver *)(*(_QWORD *)(v4 + 8) + 240));
  }
  else if (a3 == 1)
  {
    result = CLMicroLocationSensorsDriver::setMotionFence((CLMicroLocationSensorsDriver *)(*(_QWORD *)(v4 + 8) + 240));
  }
  *(_DWORD *)v4 = a3;
  return result;
}

uint64_t ULSettings::get<ULSettings::MotionStopDetectionModuleEnable>()
{
  void *v0;
  void *v1;
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;

  +[ULDefaultsSingleton shared](ULDefaultsSingleton, "shared");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "defaultsDictionary");
  v1 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "ULMotionStopDetectionModuleEnable");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "objectForKey:", v2);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  if (v3 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
    v4 = objc_msgSend(v3, "BOOLValue");
  else
    v4 = objc_msgSend(MEMORY[0x24BDBD1C8], "BOOLValue");
  v5 = v4;

  return v5;
}

void sub_241AEC498(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void ___ZL45_CLLogObjectForCategory_MicroLocation_Defaultv_block_invoke_59()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.MicroLocation", "MicroLocation");
  v1 = (void *)logObject_MicroLocation_Default;
  logObject_MicroLocation_Default = (uint64_t)v0;

}

void std::__tree<CLMicroLocationProto::Measurement,CLEventsBuffer<CLMicroLocationProto::Measurement,double,ProtoMeasurementGetTime>::EventsComparator,std::allocator<CLMicroLocationProto::Measurement>>::destroy(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    std::__tree<CLMicroLocationProto::Measurement,CLEventsBuffer<CLMicroLocationProto::Measurement,double,ProtoMeasurementGetTime>::EventsComparator,std::allocator<CLMicroLocationProto::Measurement>>::destroy(a1, *a2);
    std::__tree<CLMicroLocationProto::Measurement,CLEventsBuffer<CLMicroLocationProto::Measurement,double,ProtoMeasurementGetTime>::EventsComparator,std::allocator<CLMicroLocationProto::Measurement>>::destroy(a1, a2[1]);
    (*(void (**)(_QWORD *))a2[4])(a2 + 4);
    operator delete(a2);
  }
}

void ___ZL47_CLLogObjectForCategory_MicroLocationQE_Defaultv_block_invoke_1()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.MicroLocation", "MicroLocationQE");
  v1 = (void *)logObject_MicroLocationQE_Default;
  logObject_MicroLocationQE_Default = (uint64_t)v0;

}

uint64_t std::vector<CLMicroLocationProto::Measurement>::reserve(uint64_t *a1, unint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[5];

  v4 = a1[2];
  result = (uint64_t)(a1 + 2);
  if (0xCCCCCCCCCCCCCCCDLL * ((v4 - *a1) >> 4) < a2)
  {
    if (a2 >= 0x333333333333334)
      std::vector<CLMicroLocationProto::ConfidenceReason>::__throw_length_error[abi:ne180100]();
    v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = std::__allocate_at_least[abi:ne180100]<std::allocator<CLMicroLocationRapportMonitor::Item>>(result, a2);
    v7[1] = v7[0] + v5;
    v7[2] = v7[0] + v5;
    v7[3] = v7[0] + 80 * v6;
    std::vector<CLMicroLocationProto::Measurement>::__swap_out_circular_buffer(a1, v7);
    return std::__split_buffer<CLMicroLocationProto::Measurement>::~__split_buffer((uint64_t)v7);
  }
  return result;
}

void sub_241AEC620(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<CLMicroLocationProto::Measurement>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void CLMicroLocationProtobufHelper::measurementFromSourceData<CLMicroLocationProto::UwbRange const&,true>(uint64_t a1@<X0>, CLMicroLocationProto::Measurement *a2@<X8>)
{
  unsigned int v4;
  const CLMicroLocationProto::UwbRange *v5;
  uint64_t v6;
  _QWORD v7[8];
  unsigned int v8;
  int v9;

  CLMicroLocationProto::Measurement::Measurement((CLMicroLocationProto::Measurement *)v7);
  v4 = *(_DWORD *)(a1 + 16);
  if (!CLMicroLocationProto::DataType_IsValid((CLMicroLocationProto *)v4))
    __assert_rtn("set_datatype", "microlocation.pb.h", 10718, "::CLMicroLocationProto::DataType_IsValid(value)");
  v6 = *(_QWORD *)(a1 + 8);
  v8 = v4;
  v9 |= 3u;
  v7[1] = v6;
  CLMicroLocationProtobufHelper::measurementFromSourceImpl((CLMicroLocationProtobufHelper *)v7, (CLMicroLocationProto::Measurement *)a1, v5);
  CLMicroLocationProto::Measurement::Measurement(a2, (const CLMicroLocationProto::Measurement *)v7);
  *((_BYTE *)a2 + 80) = 1;
  CLMicroLocationProto::Measurement::~Measurement((CLMicroLocationProto::Measurement *)v7);
}

void sub_241AEC6E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  CLMicroLocationProto::Measurement::~Measurement((CLMicroLocationProto::Measurement *)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::vector<CLMicroLocationProto::Measurement>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<CLMicroLocationProto::Measurement>,std::reverse_iterator<CLMicroLocationProto::Measurement*>,std::reverse_iterator<CLMicroLocationProto::Measurement*>,std::reverse_iterator<CLMicroLocationProto::Measurement*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<CLMicroLocationProto::Measurement>,std::reverse_iterator<CLMicroLocationProto::Measurement*>,std::reverse_iterator<CLMicroLocationProto::Measurement*>,std::reverse_iterator<CLMicroLocationProto::Measurement*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v10;
  uint64_t v11;
  CLMicroLocationProto::Measurement *v12;

  v10 = 0;
  v11 = a7 - 80;
  while (a3 + v10 != a5)
  {
    v12 = (CLMicroLocationProto::Measurement *)(v11 + v10);
    v10 -= 80;
    CLMicroLocationProto::Measurement::Measurement(v12, (const CLMicroLocationProto::Measurement *)(v10 + a3));
  }
  return a6;
}

uint64_t std::__split_buffer<CLMicroLocationProto::Measurement>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;
  void (**v4)(void);

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    v4 = *(void (***)(void))(i - 80);
    *(_QWORD *)(a1 + 16) = i - 80;
    (*v4)();
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t std::vector<CLMicroLocationProto::Measurement>::__push_back_slow_path<CLMicroLocationProto::Measurement const&>(uint64_t *a1, const CLMicroLocationProto::Measurement *a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  char *v13;
  CLMicroLocationProto::Measurement *v14;
  char *v15;
  char *v16;
  uint64_t *v17;

  v3 = *a1;
  v4 = 0xCCCCCCCCCCCCCCCDLL * ((a1[1] - *a1) >> 4);
  v5 = v4 + 1;
  if (v4 + 1 > 0x333333333333333)
    std::vector<CLMicroLocationProto::ConfidenceReason>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xCCCCCCCCCCCCCCCDLL * ((a1[2] - v3) >> 4);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x199999999999999)
    v9 = 0x333333333333333;
  else
    v9 = v5;
  v17 = a1 + 2;
  if (v9)
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CLMicroLocationRapportMonitor::Item>>(v7, v9);
  else
    v10 = 0;
  v13 = v10;
  v14 = (CLMicroLocationProto::Measurement *)&v10[80 * v4];
  v16 = &v10[80 * v9];
  CLMicroLocationProto::Measurement::Measurement(v14, a2);
  v15 = (char *)v14 + 80;
  std::vector<CLMicroLocationProto::Measurement>::__swap_out_circular_buffer(a1, &v13);
  v11 = a1[1];
  std::__split_buffer<CLMicroLocationProto::Measurement>::~__split_buffer((uint64_t)&v13);
  return v11;
}

void sub_241AEC940(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<CLMicroLocationProto::Measurement>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t CLEventsBuffer<CLMicroLocationProto::Measurement,double,ProtoMeasurementGetTime>::CLEventsBuffer(uint64_t a1, uint64_t a2, std::string *__str)
{
  _QWORD *v4;
  NSObject *v5;
  int v7;
  _QWORD *v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 8) = a1 + 16;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  v4 = (_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_BYTE *)(a1 + 56) = 0;
  std::string::operator=((std::string *)(a1 + 32), __str);
  if (onceToken_MicroLocation_Default != -1)
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_72);
  v5 = logObject_MicroLocation_Default;
  if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
  {
    if (*(char *)(a1 + 55) < 0)
      v4 = (_QWORD *)*v4;
    v7 = 136315138;
    v8 = v4;
    _os_log_impl(&dword_2419D9000, v5, OS_LOG_TYPE_DEFAULT, "Initialize EventsBuffer %s", (uint8_t *)&v7, 0xCu);
  }
  return a1;
}

void sub_241AECA6C(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  uint64_t v3;
  _QWORD **v4;

  if (*(char *)(v1 + 55) < 0)
    operator delete(*v2);
  std::__tree<CLMicroLocationProto::Measurement,CLEventsBuffer<CLMicroLocationProto::Measurement,double,ProtoMeasurementGetTime>::EventsComparator,std::allocator<CLMicroLocationProto::Measurement>>::destroy(v3, *v4);
  _Unwind_Resume(a1);
}

uint64_t std::__hash_table<CLMicroLocationUtils::BleIdentityItem,CLMicroLocationUtils::BleIdentityItem::HashItem,CLMicroLocationUtils::BleIdentityItem::PredicateItem,std::allocator<CLMicroLocationUtils::BleIdentityItem>>::~__hash_table(uint64_t a1)
{
  void *v2;

  std::__hash_table<CLMicroLocationUtils::BleIdentityItem,CLMicroLocationUtils::BleIdentityItem::HashItem,CLMicroLocationUtils::BleIdentityItem::PredicateItem,std::allocator<CLMicroLocationUtils::BleIdentityItem>>::__deallocate_node(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void std::__hash_table<CLMicroLocationUtils::BleIdentityItem,CLMicroLocationUtils::BleIdentityItem::HashItem,CLMicroLocationUtils::BleIdentityItem::PredicateItem,std::allocator<CLMicroLocationUtils::BleIdentityItem>>::__deallocate_node(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = (_QWORD *)*v2;
      std::__destroy_at[abi:ne180100]<CLMicroLocationUtils::BleIdentityItem,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

void std::__destroy_at[abi:ne180100]<CLMicroLocationUtils::BleIdentityItem,0>(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 104) && *(char *)(a1 + 103) < 0)
    operator delete(*(void **)(a1 + 80));
  if (*(_BYTE *)(a1 + 72) && *(char *)(a1 + 71) < 0)
    operator delete(*(void **)(a1 + 48));
  if (*(_BYTE *)(a1 + 40))
  {
    if (*(char *)(a1 + 39) < 0)
      operator delete(*(void **)(a1 + 16));
  }
}

std::string *std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(std::string *result, __int128 *a2, __int128 *a3, unint64_t a4)
{
  std::string *v6;

  if (a4)
  {
    v6 = result;
    std::vector<std::string>::__vallocate[abi:ne180100](result, a4);
    result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string*,std::string*,std::string*>((uint64_t)&v6->__r_.__value_.__r.__words[2], a2, a3, (std::string *)v6->__r_.__value_.__l.__size_);
    v6->__r_.__value_.__l.__size_ = (std::string::size_type)result;
  }
  return result;
}

void sub_241AECBD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

char *std::vector<std::string>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0xAAAAAAAAAAAAAABLL)
    std::vector<CLMicroLocationProto::ConfidenceReason>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[24 * v4];
  return result;
}

std::string *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string*,std::string*,std::string*>(uint64_t a1, __int128 *a2, __int128 *a3, std::string *this)
{
  std::string *v4;
  __int128 *v6;
  __int128 v7;
  _QWORD v9[3];
  char v10;
  std::string *v11;
  std::string *v12;

  v4 = this;
  v11 = this;
  v12 = this;
  v9[0] = a1;
  v9[1] = &v11;
  v9[2] = &v12;
  v10 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      if (*((char *)v6 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)v6, *((_QWORD *)v6 + 1));
        v4 = v12;
      }
      else
      {
        v7 = *v6;
        v4->__r_.__value_.__r.__words[2] = *((_QWORD *)v6 + 2);
        *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v7;
      }
      v6 = (__int128 *)((char *)v6 + 24);
      v12 = ++v4;
    }
    while (v6 != a3);
  }
  v10 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v9);
  return v4;
}

void sub_241AECCF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = **(_QWORD **)(a1 + 16);
  v2 = **(_QWORD **)(a1 + 8);
  while (v1 != v2)
  {
    if (*(char *)(v1 - 1) < 0)
      operator delete(*(void **)(v1 - 24));
    v1 -= 24;
  }
}

double *std::__lower_bound[abi:ne180100]<std::_ClassicAlgPolicy,std::__tree_const_iterator<CLMicroLocationProto::Measurement,std::__tree_node<CLMicroLocationProto::Measurement,void *> *,long>,std::__tree_const_iterator<CLMicroLocationProto::Measurement,std::__tree_node<CLMicroLocationProto::Measurement,void *> *,long>,double,std::__identity,CLEventsBuffer<CLMicroLocationProto::Measurement,double,ProtoMeasurementGetTime>::getLatestEvents(double const&,BOOL &)::{lambda(std::_ClassicAlgPolicy const&,double const&)#1}>(double *a1, double *a2, double *a3)
{
  double *v3;
  unint64_t v5;
  double *v6;
  double *v7;
  double *v8;
  BOOL v9;
  unint64_t v10;
  double *v11;
  double *v12;
  double *v14;

  v3 = a1;
  if (a1 != a2)
  {
    v5 = 0;
    v6 = a1;
    do
    {
      v7 = (double *)*((_QWORD *)v6 + 1);
      if (v7)
      {
        do
        {
          v8 = v7;
          v7 = *(double **)v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (double *)*((_QWORD *)v6 + 2);
          v9 = *(_QWORD *)v8 == (_QWORD)v6;
          v6 = v8;
        }
        while (!v9);
      }
      ++v5;
      v6 = v8;
    }
    while (v8 != a2);
    do
    {
      v10 = v5 >> 1;
      v14 = v3;
      std::__advance[abi:ne180100]<std::__tree_const_iterator<double,std::__tree_node<double,void *> *,long>>((_QWORD **)&v14, v5 >> 1);
      v11 = v14;
      if (v14[5] < *a3)
      {
        v12 = (double *)*((_QWORD *)v14 + 1);
        if (v12)
        {
          do
          {
            v3 = v12;
            v12 = *(double **)v12;
          }
          while (v12);
        }
        else
        {
          do
          {
            v3 = (double *)*((_QWORD *)v11 + 2);
            v9 = *(_QWORD *)v3 == (_QWORD)v11;
            v11 = v3;
          }
          while (!v9);
        }
        v10 = v5 + ~v10;
      }
      v5 = v10;
    }
    while (v10);
  }
  return v3;
}

CLMicroLocationProto::Measurement *std::vector<CLMicroLocationProto::Measurement>::vector<std::__tree_const_iterator<CLMicroLocationProto::Measurement,std::__tree_node<CLMicroLocationProto::Measurement,void *> *,long>,0>(CLMicroLocationProto::Measurement *a1, _QWORD *a2, _QWORD *a3)
{
  unint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  BOOL v8;

  *(_QWORD *)a1 = 0;
  *((_QWORD *)a1 + 1) = 0;
  *((_QWORD *)a1 + 2) = 0;
  if (a2 == a3)
  {
    v4 = 0;
  }
  else
  {
    v4 = 0;
    v5 = a2;
    do
    {
      v6 = (_QWORD *)v5[1];
      if (v6)
      {
        do
        {
          v7 = v6;
          v6 = (_QWORD *)*v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          v7 = (_QWORD *)v5[2];
          v8 = *v7 == (_QWORD)v5;
          v5 = v7;
        }
        while (!v8);
      }
      ++v4;
      v5 = v7;
    }
    while (v7 != a3);
  }
  std::vector<CLMicroLocationProto::Measurement>::__init_with_size[abi:ne180100]<std::__tree_const_iterator<CLMicroLocationProto::Measurement,std::__tree_node<CLMicroLocationProto::Measurement,void *> *,long>,std::__tree_const_iterator<CLMicroLocationProto::Measurement,std::__tree_node<CLMicroLocationProto::Measurement,void *> *,long>>(a1, a2, a3, v4);
  return a1;
}

CLMicroLocationProto::Measurement *std::vector<CLMicroLocationProto::Measurement>::__init_with_size[abi:ne180100]<std::__tree_const_iterator<CLMicroLocationProto::Measurement,std::__tree_node<CLMicroLocationProto::Measurement,void *> *,long>,std::__tree_const_iterator<CLMicroLocationProto::Measurement,std::__tree_node<CLMicroLocationProto::Measurement,void *> *,long>>(CLMicroLocationProto::Measurement *result, _QWORD *a2, _QWORD *a3, unint64_t a4)
{
  CLMicroLocationProto::Measurement *v6;

  if (a4)
  {
    v6 = result;
    std::vector<CLMicroLocationRapportMonitor::Item>::__vallocate[abi:ne180100](result, a4);
    result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<CLMicroLocationProto::Measurement>,std::__tree_const_iterator<CLMicroLocationProto::Measurement,std::__tree_node<CLMicroLocationProto::Measurement,void *> *,long>,std::__tree_const_iterator<CLMicroLocationProto::Measurement,std::__tree_node<CLMicroLocationProto::Measurement,void *> *,long>,CLMicroLocationProto::Measurement*>((int)v6 + 16, a2, a3, *((CLMicroLocationProto::Measurement **)v6 + 1));
    *((_QWORD *)v6 + 1) = result;
  }
  return result;
}

void sub_241AECF48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  std::vector<CLMicroLocationProto::Measurement>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

CLMicroLocationProto::Measurement *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<CLMicroLocationProto::Measurement>,std::__tree_const_iterator<CLMicroLocationProto::Measurement,std::__tree_node<CLMicroLocationProto::Measurement,void *> *,long>,std::__tree_const_iterator<CLMicroLocationProto::Measurement,std::__tree_node<CLMicroLocationProto::Measurement,void *> *,long>,CLMicroLocationProto::Measurement*>(int a1, _QWORD *a2, _QWORD *a3, CLMicroLocationProto::Measurement *this)
{
  _QWORD *v5;
  uint64_t v6;
  CLMicroLocationProto::Measurement *v7;
  _QWORD *v8;
  _QWORD *v9;
  BOOL v10;

  if (a2 == a3)
    return this;
  v5 = a2;
  v6 = 0;
  v7 = this;
  do
  {
    CLMicroLocationProto::Measurement::Measurement(v7, (const CLMicroLocationProto::Measurement *)(v5 + 4));
    v8 = (_QWORD *)v5[1];
    if (v8)
    {
      do
      {
        v9 = v8;
        v8 = (_QWORD *)*v8;
      }
      while (v8);
    }
    else
    {
      do
      {
        v9 = (_QWORD *)v5[2];
        v10 = *v9 == (_QWORD)v5;
        v5 = v9;
      }
      while (!v10);
    }
    v7 = (CLMicroLocationProto::Measurement *)((char *)v7 + 80);
    v6 += 80;
    v5 = v9;
  }
  while (v9 != a3);
  return v7;
}

void std::vector<CLMicroLocationProto::Measurement>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  char *v6;
  char *v7;
  void (**v8)(char *);
  BOOL v9;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      v6 = v4 - 80;
      v7 = v4 - 80;
      do
      {
        v8 = *(void (***)(char *))v7;
        v7 -= 80;
        (*v8)(v6);
        v9 = v6 == v2;
        v6 = v7;
      }
      while (!v9);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

unint64_t boost::hash<std::string>::operator()(uint64_t a1, char *a2)
{
  uint64_t v2;
  char *v3;
  unint64_t result;
  uint64_t v5;

  v2 = a2[23];
  if ((v2 & 0x80u) == 0)
    v3 = a2;
  else
    v3 = *(char **)a2;
  result = 0;
  if ((v2 & 0x80u) != 0)
    v2 = *((_QWORD *)a2 + 1);
  for (; v2; --v2)
  {
    v5 = *v3++;
    result = 3864292196u
           - 0x395B586CA42E166BLL
           * ((0xC6A4A7935BD1E995 * ((0xC6A4A7935BD1E995 * v5) ^ ((0xC6A4A7935BD1E995 * v5) >> 47))) ^ result);
  }
  return result;
}

uint64_t std::vector<CLMiLoProtobufWrapper::Measurement>::__emplace_back_slow_path<CLMicroLocationProto::Measurement const>(uint64_t *a1, const CLMicroLocationProto::Measurement *a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  char *v13;
  CLMicroLocationProto::Measurement *v14;
  CLMicroLocationProto::Measurement *v15;
  char *v16;
  uint64_t *v17;

  v3 = *a1;
  v4 = 0x2E8BA2E8BA2E8BA3 * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) > 0x2E8BA2E8BA2E8BALL)
    std::vector<CLMicroLocationProto::ConfidenceReason>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0x2E8BA2E8BA2E8BA3 * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x1745D1745D1745DLL)
    v9 = 0x2E8BA2E8BA2E8BALL;
  else
    v9 = v5;
  v17 = a1 + 2;
  if (v9)
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CLMiLoServiceTable::Entry>>(v7, v9);
  else
    v10 = 0;
  v13 = v10;
  v14 = (CLMicroLocationProto::Measurement *)&v10[88 * v4];
  v15 = v14;
  v16 = &v10[88 * v9];
  CLMicroLocationProto::Measurement::Measurement(v14, a2);
  *((_DWORD *)v14 + 20) = 0;
  v15 = (CLMicroLocationProto::Measurement *)((char *)v15 + 88);
  std::vector<CLMiLoProtobufWrapper::Measurement>::__swap_out_circular_buffer(a1, &v13);
  v11 = a1[1];
  std::__split_buffer<CLMiLoProtobufWrapper::Measurement>::~__split_buffer((uint64_t)&v13);
  return v11;
}

void sub_241AED230(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<CLMiLoProtobufWrapper::Measurement>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<CLMiLoProtobufWrapper::Measurement>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<CLMiLoProtobufWrapper::Measurement>,std::reverse_iterator<CLMiLoProtobufWrapper::Measurement*>,std::reverse_iterator<CLMiLoProtobufWrapper::Measurement*>,std::reverse_iterator<CLMiLoProtobufWrapper::Measurement*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t **std::back_insert_iterator<std::vector<CLMiLoProtobufWrapper::Measurement>>::operator=[abi:ne180100](uint64_t **a1, CLMicroLocationProto::Measurement *a2)
{
  uint64_t *v4;
  unint64_t v5;
  uint64_t v6;

  v4 = *a1;
  v5 = (*a1)[1];
  if (v5 >= (*a1)[2])
  {
    v6 = std::vector<CLMiLoProtobufWrapper::Measurement>::__push_back_slow_path<CLMiLoProtobufWrapper::Measurement>(*a1, a2);
  }
  else
  {
    CLMicroLocationProto::Measurement::Measurement((CLMicroLocationProto::Measurement *)(*a1)[1], a2);
    *(_DWORD *)(v5 + 80) = *((_DWORD *)a2 + 20);
    v6 = v5 + 88;
    v4[1] = v5 + 88;
  }
  v4[1] = v6;
  return a1;
}

void sub_241AED324(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<CLMiLoProtobufWrapper::Measurement>::__push_back_slow_path<CLMiLoProtobufWrapper::Measurement>(uint64_t *a1, const CLMicroLocationProto::Measurement *a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  char *v13;
  CLMicroLocationProto::Measurement *v14;
  CLMicroLocationProto::Measurement *v15;
  char *v16;
  uint64_t *v17;

  v3 = *a1;
  v4 = 0x2E8BA2E8BA2E8BA3 * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) > 0x2E8BA2E8BA2E8BALL)
    std::vector<CLMicroLocationProto::ConfidenceReason>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0x2E8BA2E8BA2E8BA3 * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x1745D1745D1745DLL)
    v9 = 0x2E8BA2E8BA2E8BALL;
  else
    v9 = v5;
  v17 = a1 + 2;
  if (v9)
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CLMiLoServiceTable::Entry>>(v7, v9);
  else
    v10 = 0;
  v13 = v10;
  v14 = (CLMicroLocationProto::Measurement *)&v10[88 * v4];
  v15 = v14;
  v16 = &v10[88 * v9];
  CLMicroLocationProto::Measurement::Measurement(v14, a2);
  *((_DWORD *)v14 + 20) = *((_DWORD *)a2 + 20);
  v15 = (CLMicroLocationProto::Measurement *)((char *)v15 + 88);
  std::vector<CLMiLoProtobufWrapper::Measurement>::__swap_out_circular_buffer(a1, &v13);
  v11 = a1[1];
  std::__split_buffer<CLMiLoProtobufWrapper::Measurement>::~__split_buffer((uint64_t)&v13);
  return v11;
}

void sub_241AED444(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<CLMiLoProtobufWrapper::Measurement>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *CLEventsBuffer<CLMicroLocationProto::Measurement,double,ProtoMeasurementGetTime>::truncateBuffer(uint64_t *result)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t **v3;
  uint64_t *v4;

  v1 = result[3];
  v2 = v1 - *result;
  if (v1 > *result)
  {
    *((_BYTE *)result + 56) = 1;
    v3 = (uint64_t **)(result + 1);
    v4 = (uint64_t *)result[1];
    std::__advance[abi:ne180100]<std::__tree_const_iterator<double,std::__tree_node<double,void *> *,long>>(&v4, v2);
    return std::__tree<CLMicroLocationProto::Measurement,CLEventsBuffer<CLMicroLocationProto::Measurement,double,ProtoMeasurementGetTime>::EventsComparator,std::allocator<CLMicroLocationProto::Measurement>>::erase(v3, *v3, v4);
  }
  return result;
}

double *std::__tree<CLMicroLocationProto::Measurement,CLEventsBuffer<CLMicroLocationProto::Measurement,double,ProtoMeasurementGetTime>::EventsComparator,std::allocator<CLMicroLocationProto::Measurement>>::__emplace_multi<CLMicroLocationProto::Measurement const&>(uint64_t a1, const CLMicroLocationProto::Measurement *a2)
{
  uint64_t **v3;
  uint64_t *v4;
  uint64_t **v5;
  double *v7;

  std::__tree<CLMicroLocationProto::Measurement,CLEventsBuffer<CLMicroLocationProto::Measurement,double,ProtoMeasurementGetTime>::EventsComparator,std::allocator<CLMicroLocationProto::Measurement>>::__construct_node<CLMicroLocationProto::Measurement const&>(a1, a2, (uint64_t)&v7);
  v3 = (uint64_t **)(a1 + 8);
  v4 = *(uint64_t **)(a1 + 8);
  if (v4)
  {
    do
    {
      while (1)
      {
        v3 = (uint64_t **)v4;
        if (v7[5] >= *((double *)v4 + 5))
          break;
        v4 = (uint64_t *)*v4;
        v5 = v3;
        if (!*v3)
          goto LABEL_8;
      }
      v4 = (uint64_t *)v4[1];
    }
    while (v4);
    v5 = v3 + 1;
  }
  else
  {
    v5 = (uint64_t **)(a1 + 8);
  }
LABEL_8:
  std::__tree<CLMicroLocationRecordingCompletionMetaInformation::RecordingError>::__insert_node_at((uint64_t **)a1, (uint64_t)v3, v5, (uint64_t *)v7);
  return v7;
}

uint64_t std::__tree<CLMicroLocationProto::Measurement,CLEventsBuffer<CLMicroLocationProto::Measurement,double,ProtoMeasurementGetTime>::EventsComparator,std::allocator<CLMicroLocationProto::Measurement>>::__construct_node<CLMicroLocationProto::Measurement const&>@<X0>(uint64_t a1@<X0>, const CLMicroLocationProto::Measurement *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  char *v6;
  uint64_t result;

  v5 = a1 + 8;
  v6 = (char *)operator new(0x70uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  result = CLMicroLocationProto::Measurement::Measurement((CLMicroLocationProto::Measurement *)(v6 + 32), a2);
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_241AED584(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__tree_node<CLMicroLocationProto::Measurement,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<CLMicroLocationProto::Measurement,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__tree_node<CLMicroLocationProto::Measurement,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<CLMicroLocationProto::Measurement,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void (***v2)(_QWORD);

  v2 = *(void (****)(_QWORD))a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      (*v2[4])(v2 + 4);
    operator delete(v2);
  }
}

uint64_t *std::__tree<CLMicroLocationProto::Measurement,CLEventsBuffer<CLMicroLocationProto::Measurement,double,ProtoMeasurementGetTime>::EventsComparator,std::allocator<CLMicroLocationProto::Measurement>>::erase(uint64_t **a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t *v4;
  uint64_t *v6;

  if (a2 != a3)
  {
    v4 = a2;
    do
    {
      v6 = std::__tree<std::__value_type<unsigned long,unsigned long>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,unsigned long>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,unsigned long>>>::__remove_node_pointer(a1, v4);
      (*(void (**)(uint64_t *))v4[4])(v4 + 4);
      operator delete(v4);
      v4 = v6;
    }
    while (v6 != a3);
  }
  return a3;
}

_QWORD *std::__hash_table<CLMicroLocationUtils::BleIdentityItem,CLMicroLocationUtils::BleIdentityItem::HashItem,CLMicroLocationUtils::BleIdentityItem::PredicateItem,std::allocator<CLMicroLocationUtils::BleIdentityItem>>::__emplace_unique_key_args<CLMicroLocationUtils::BleIdentityItem,CLMicroLocationUtils::BleIdentityItem const&>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  unint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  unint64_t v15;
  float v16;
  float v17;
  _BOOL8 v18;
  unint64_t v19;
  unint64_t v20;
  size_t v21;
  _QWORD *v22;
  unint64_t v23;
  _QWORD v25[3];

  v7 = (_QWORD *)(a1 + 24);
  v8 = CLMicroLocationUtils::BleIdentityItem::HashItem::operator()(a1 + 24, a2);
  v9 = v8;
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      v3 = v8;
      if (v8 >= v10)
        v3 = v8 % v10;
    }
    else
    {
      v3 = (v10 - 1) & v8;
    }
    v13 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
    if (v13)
    {
      v14 = (_QWORD *)*v13;
      if (*v13)
      {
        do
        {
          v15 = v14[1];
          if (v15 == v9)
          {
            if ((CLMicroLocationUtils::BleIdentityItem::PredicateItem::operator()(a1 + 32, (uint64_t)(v14 + 2), a2) & 1) != 0)
              return v14;
          }
          else
          {
            if (v12 > 1)
            {
              if (v15 >= v10)
                v15 %= v10;
            }
            else
            {
              v15 &= v10 - 1;
            }
            if (v15 != v3)
              break;
          }
          v14 = (_QWORD *)*v14;
        }
        while (v14);
      }
    }
  }
  std::__hash_table<CLMicroLocationUtils::BleIdentityItem,CLMicroLocationUtils::BleIdentityItem::HashItem,CLMicroLocationUtils::BleIdentityItem::PredicateItem,std::allocator<CLMicroLocationUtils::BleIdentityItem>>::__construct_node_hash<CLMicroLocationUtils::BleIdentityItem const&>(a1, v9, a3, (uint64_t)v25);
  v16 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v17 = *(float *)(a1 + 32);
  if (!v10 || (float)(v17 * (float)v10) < v16)
  {
    v18 = 1;
    if (v10 >= 3)
      v18 = (v10 & (v10 - 1)) != 0;
    v19 = v18 | (2 * v10);
    v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20)
      v21 = v20;
    else
      v21 = v19;
    std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>>>::__rehash<true>(a1, v21);
    v10 = *(_QWORD *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
        v3 = v9 % v10;
      else
        v3 = v9;
    }
    else
    {
      v3 = (v10 - 1) & v9;
    }
  }
  v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v22)
  {
    *(_QWORD *)v25[0] = *v22;
    *v22 = v25[0];
  }
  else
  {
    *(_QWORD *)v25[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v25[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = a1 + 16;
    if (*(_QWORD *)v25[0])
    {
      v23 = *(_QWORD *)(*(_QWORD *)v25[0] + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v23 >= v10)
          v23 %= v10;
      }
      else
      {
        v23 &= v10 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v23) = v25[0];
    }
  }
  v14 = (_QWORD *)v25[0];
  v25[0] = 0;
  ++*v7;
  std::unique_ptr<std::__hash_node<CLMicroLocationUtils::BleIdentityItem,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<CLMicroLocationUtils::BleIdentityItem,void *>>>>::reset[abi:ne180100]((uint64_t)v25, 0);
  return v14;
}

void sub_241AED8BC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<CLMicroLocationUtils::BleIdentityItem,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<CLMicroLocationUtils::BleIdentityItem,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

std::string *std::__hash_table<CLMicroLocationUtils::BleIdentityItem,CLMicroLocationUtils::BleIdentityItem::HashItem,CLMicroLocationUtils::BleIdentityItem::PredicateItem,std::allocator<CLMicroLocationUtils::BleIdentityItem>>::__construct_node_hash<CLMicroLocationUtils::BleIdentityItem const&>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  _QWORD *v8;
  std::string *result;

  v7 = a1 + 16;
  v8 = operator new(0x88uLL);
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  *v8 = 0;
  v8[1] = a2;
  result = std::allocator<std::__hash_node<CLMicroLocationUtils::BleIdentityItem,void *>>::construct[abi:ne180100]<CLMicroLocationUtils::BleIdentityItem,CLMicroLocationUtils::BleIdentityItem const&>(v7, (uint64_t)(v8 + 2), a3);
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

void sub_241AED930(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__hash_node<CLMicroLocationUtils::BleIdentityItem,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<CLMicroLocationUtils::BleIdentityItem,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

std::string *std::allocator<std::__hash_node<CLMicroLocationUtils::BleIdentityItem,void *>>::construct[abi:ne180100]<CLMicroLocationUtils::BleIdentityItem,CLMicroLocationUtils::BleIdentityItem const&>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  std::string *result;

  *(_OWORD *)a2 = *(_OWORD *)a3;
  std::__optional_copy_base<std::string,false>::__optional_copy_base[abi:ne180100]((std::string *)(a2 + 16), (__int128 *)(a3 + 16));
  std::__optional_copy_base<std::string,false>::__optional_copy_base[abi:ne180100]((std::string *)(a2 + 48), (__int128 *)(a3 + 48));
  result = std::__optional_copy_base<std::string,false>::__optional_copy_base[abi:ne180100]((std::string *)(a2 + 80), (__int128 *)(a3 + 80));
  *(_QWORD *)(a2 + 112) = *(_QWORD *)(a3 + 112);
  return result;
}

void sub_241AED9AC(_Unwind_Exception *exception_object)
{
  char *v1;
  void **v2;
  void **v3;

  if (v1[72] && v1[71] < 0)
    operator delete(*v3);
  if (v1[40])
  {
    if (v1[39] < 0)
      operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

void std::unique_ptr<std::__hash_node<CLMicroLocationUtils::BleIdentityItem,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<CLMicroLocationUtils::BleIdentityItem,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<CLMicroLocationUtils::BleIdentityItem,0>((uint64_t)v2 + 16);
    operator delete(v2);
  }
}

uint64_t std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::__wrap_iter<CLMicroLocationProto::Measurement const*>,std::__wrap_iter<CLMicroLocationProto::Measurement const*>,std::insert_iterator<std::multiset<CLMicroLocationProto::Measurement,CLEventsBuffer<CLMicroLocationProto::Measurement,double,ProtoMeasurementGetTime>::EventsComparator,std::allocator<CLMicroLocationProto::Measurement>>>,0>@<X0>(uint64_t result@<X0>, const CLMicroLocationProto::Measurement *a2@<X1>, const CLMicroLocationProto::Measurement *a3@<X2>, const CLMicroLocationProto::Measurement *a4@<X3>, const CLMicroLocationProto::Measurement **a5@<X8>)
{
  const CLMicroLocationProto::Measurement *v5;
  const CLMicroLocationProto::Measurement *v8;
  const CLMicroLocationProto::Measurement *v9;

  v5 = (const CLMicroLocationProto::Measurement *)result;
  v8 = a3;
  v9 = a4;
  if ((const CLMicroLocationProto::Measurement *)result != a2)
  {
    do
    {
      result = std::insert_iterator<std::multiset<CLMicroLocationProto::Measurement,CLEventsBuffer<CLMicroLocationProto::Measurement,double,ProtoMeasurementGetTime>::EventsComparator,std::allocator<CLMicroLocationProto::Measurement>>>::operator=[abi:ne180100]((uint64_t)&v8, v5);
      v5 = (const CLMicroLocationProto::Measurement *)((char *)v5 + 80);
    }
    while (v5 != a2);
    a3 = v8;
    a4 = v9;
    v5 = a2;
  }
  *a5 = v5;
  a5[1] = a3;
  a5[2] = a4;
  return result;
}

uint64_t std::insert_iterator<std::multiset<CLMicroLocationProto::Measurement,CLEventsBuffer<CLMicroLocationProto::Measurement,double,ProtoMeasurementGetTime>::EventsComparator,std::allocator<CLMicroLocationProto::Measurement>>>::operator=[abi:ne180100](uint64_t a1, const CLMicroLocationProto::Measurement *a2)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t *v5;
  BOOL v6;

  v3 = std::__tree<CLMicroLocationProto::Measurement,CLEventsBuffer<CLMicroLocationProto::Measurement,double,ProtoMeasurementGetTime>::EventsComparator,std::allocator<CLMicroLocationProto::Measurement>>::__emplace_hint_multi<CLMicroLocationProto::Measurement const&>(*(uint64_t ***)a1, *(double **)(a1 + 8), a2);
  *(_QWORD *)(a1 + 8) = v3;
  v4 = (uint64_t *)v3[1];
  if (v4)
  {
    do
    {
      v5 = v4;
      v4 = (uint64_t *)*v4;
    }
    while (v4);
  }
  else
  {
    do
    {
      v5 = (uint64_t *)v3[2];
      v6 = *v5 == (_QWORD)v3;
      v3 = v5;
    }
    while (!v6);
  }
  *(_QWORD *)(a1 + 8) = v5;
  return a1;
}

uint64_t *std::__tree<CLMicroLocationProto::Measurement,CLEventsBuffer<CLMicroLocationProto::Measurement,double,ProtoMeasurementGetTime>::EventsComparator,std::allocator<CLMicroLocationProto::Measurement>>::__emplace_hint_multi<CLMicroLocationProto::Measurement const&>(uint64_t **a1, double *a2, const CLMicroLocationProto::Measurement *a3)
{
  double *leaf;
  double *v7;
  uint64_t *v8;

  std::__tree<CLMicroLocationProto::Measurement,CLEventsBuffer<CLMicroLocationProto::Measurement,double,ProtoMeasurementGetTime>::EventsComparator,std::allocator<CLMicroLocationProto::Measurement>>::__construct_node<CLMicroLocationProto::Measurement const&>((uint64_t)a1, a3, (uint64_t)&v8);
  leaf = std::__tree<CLMicroLocationProto::Measurement,CLEventsBuffer<CLMicroLocationProto::Measurement,double,ProtoMeasurementGetTime>::EventsComparator,std::allocator<CLMicroLocationProto::Measurement>>::__find_leaf(a1, a2, &v7, (uint64_t)(v8 + 4));
  std::__tree<CLMicroLocationRecordingCompletionMetaInformation::RecordingError>::__insert_node_at(a1, (uint64_t)v7, (uint64_t **)leaf, v8);
  return v8;
}

void sub_241AEDB60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char *__p)
{
  char *v11;

  v11 = __p;
  __p = 0;
  if (v11)
    std::__tree<CLMicroLocationProto::Measurement,CLEventsBuffer<CLMicroLocationProto::Measurement,double,ProtoMeasurementGetTime>::EventsComparator,std::allocator<CLMicroLocationProto::Measurement>>::__emplace_hint_multi<CLMicroLocationProto::Measurement const&>((uint64_t)&__p, v11);
  _Unwind_Resume(exception_object);
}

double *std::__tree<CLMicroLocationProto::Measurement,CLEventsBuffer<CLMicroLocationProto::Measurement,double,ProtoMeasurementGetTime>::EventsComparator,std::allocator<CLMicroLocationProto::Measurement>>::__find_leaf(_QWORD *a1, double *a2, double **a3, uint64_t a4)
{
  double *v4;
  double v5;
  uint64_t v6;
  double v7;
  double v8;
  double *v9;
  double *v10;
  BOOL v11;
  double v12;
  uint64_t v13;

  v4 = (double *)(a1 + 1);
  if (a1 + 1 != (_QWORD *)a2)
  {
    v5 = *(double *)(a4 + 8);
    if (a2[5] < v5)
    {
      while (1)
      {
        v6 = *(_QWORD *)v4;
        a2 = v4;
        if (!*(_QWORD *)v4)
          break;
        while (1)
        {
          v4 = (double *)v6;
          if (*(double *)(v6 + 40) >= v5)
            break;
          v6 = *(_QWORD *)(v6 + 8);
          if (!v6)
            goto LABEL_19;
        }
      }
LABEL_20:
      *a3 = v4;
      return a2;
    }
  }
  v7 = *a2;
  if ((double *)*a1 == a2)
  {
    v9 = a2;
  }
  else
  {
    if (v7 == 0.0)
    {
      v10 = a2;
      do
      {
        v9 = (double *)*((_QWORD *)v10 + 2);
        v11 = *(_QWORD *)v9 == (_QWORD)v10;
        v10 = v9;
      }
      while (v11);
    }
    else
    {
      v8 = *a2;
      do
      {
        v9 = *(double **)&v8;
        v8 = *(double *)(*(_QWORD *)&v8 + 8);
      }
      while (v8 != 0.0);
    }
    v12 = *(double *)(a4 + 8);
    if (v12 < v9[5])
    {
      while (1)
      {
        v13 = *(_QWORD *)v4;
        a2 = v4;
        if (!*(_QWORD *)v4)
          goto LABEL_20;
        while (1)
        {
          v4 = (double *)v13;
          if (v12 < *(double *)(v13 + 40))
            break;
          v13 = *(_QWORD *)(v13 + 8);
          if (!v13)
          {
LABEL_19:
            a2 = v4 + 1;
            goto LABEL_20;
          }
        }
      }
    }
  }
  if (v7 == 0.0)
  {
    *a3 = a2;
  }
  else
  {
    *a3 = v9;
    return v9 + 1;
  }
  return a2;
}

_QWORD *std::vector<CLMiLoProtobufWrapper::WiFiRssi>::__init_with_size[abi:ne180100]<CLMiLoProtobufWrapper::WiFiRssi*,CLMiLoProtobufWrapper::WiFiRssi*>(_QWORD *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;

  if (a4)
  {
    v6 = result;
    std::vector<CLMiLoProtobufWrapper::WiFiRssi>::__vallocate[abi:ne180100](result, a4);
    result = (_QWORD *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<CLMiLoProtobufWrapper::WiFiRssi>,CLMiLoProtobufWrapper::WiFiRssi*,CLMiLoProtobufWrapper::WiFiRssi*,CLMiLoProtobufWrapper::WiFiRssi*>((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_241AEDCCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  std::vector<CLMiLoProtobufWrapper::WiFiRssi>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

char *std::vector<CLMiLoProtobufWrapper::WiFiRssi>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0x492492492492493)
    std::vector<CLMicroLocationProto::ConfidenceReason>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CLMiLoProtobufWrapper::WiFiRssi>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[56 * v4];
  return result;
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<CLMiLoProtobufWrapper::WiFiRssi>,CLMiLoProtobufWrapper::WiFiRssi*,CLMiLoProtobufWrapper::WiFiRssi*,CLMiLoProtobufWrapper::WiFiRssi*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;

  if (a2 != a3)
  {
    v7 = 0;
    do
    {
      *(_DWORD *)(CLMicroLocationProto::WiFiRssi::WiFiRssi((CLMicroLocationProto::WiFiRssi *)(a4 + v7), (const CLMicroLocationProto::WiFiRssi *)(a2 + v7))+ 48) = *(_DWORD *)(a2 + v7 + 48);
      v7 += 56;
    }
    while (a2 + v7 != a3);
    a4 += v7;
  }
  return a4;
}

void sub_241AEDDB0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  if (v2)
  {
    v4 = v1 - 56;
    do
    {
      CLMicroLocationProto::WiFiRssi::~WiFiRssi((CLMicroLocationProto::WiFiRssi *)(v4 + v2));
      v2 -= 56;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<CLMicroLocationBluetoothIdentityTable::Entry>::__emplace_back_slow_path<boost::uuids::uuid const&,std::string &,std::string &,std::chrono::time_point<cl::chrono::CFAbsoluteTimeClock,std::chrono::duration<long double,std::ratio<1l,1l>>> const&>(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4, double *a5)
{
  unint64_t v6;
  unint64_t v7;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  void *v16;
  char *v17;
  char *v18;
  char *v19;
  uint64_t *v20;

  v6 = 0x8E38E38E38E38E39 * ((a1[1] - *a1) >> 3);
  v7 = v6 + 1;
  if (v6 + 1 > 0x38E38E38E38E38ELL)
    std::vector<CLMicroLocationProto::ConfidenceReason>::__throw_length_error[abi:ne180100]();
  if (0x1C71C71C71C71C72 * ((a1[2] - *a1) >> 3) > v7)
    v7 = 0x1C71C71C71C71C72 * ((a1[2] - *a1) >> 3);
  if (0x8E38E38E38E38E39 * ((a1[2] - *a1) >> 3) >= 0x1C71C71C71C71C7)
    v12 = 0x38E38E38E38E38ELL;
  else
    v12 = v7;
  v20 = a1 + 2;
  if (v12)
    v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CLMicroLocationAssociatedStateTable::Entry>>((uint64_t)(a1 + 2), v12);
  else
    v13 = 0;
  v16 = v13;
  v17 = &v13[72 * v6];
  v19 = &v13[72 * v12];
  std::allocator<CLMicroLocationBluetoothIdentityTable::Entry>::construct[abi:ne180100]<CLMicroLocationBluetoothIdentityTable::Entry,boost::uuids::uuid const&,std::string &,std::string &,std::chrono::time_point<cl::chrono::CFAbsoluteTimeClock,std::chrono::duration<long double,std::ratio<1l,1l>>> const&>((uint64_t)(a1 + 2), (uint64_t)v17, a2, a3, a4, a5);
  v18 = v17 + 72;
  std::vector<CLMicroLocationBluetoothIdentityTable::Entry>::__swap_out_circular_buffer(a1, &v16);
  v14 = a1[1];
  std::__split_buffer<CLMicroLocationBluetoothIdentityTable::Entry>::~__split_buffer(&v16);
  return v14;
}

void sub_241AEDF0C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<CLMicroLocationBluetoothIdentityTable::Entry>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

void std::allocator<CLMicroLocationBluetoothIdentityTable::Entry>::construct[abi:ne180100]<CLMicroLocationBluetoothIdentityTable::Entry,boost::uuids::uuid const&,std::string &,std::string &,std::chrono::time_point<cl::chrono::CFAbsoluteTimeClock,std::chrono::duration<long double,std::ratio<1l,1l>>> const&>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, double *a6)
{
  uint64_t v9;
  uint64_t v10;
  std::string __p;
  std::string v12;

  v9 = *a3;
  v10 = a3[1];
  if (*(char *)(a4 + 23) < 0)
    std::string::__init_copy_ctor_external(&v12, *(const std::string::value_type **)a4, *(_QWORD *)(a4 + 8));
  else
    v12 = *(std::string *)a4;
  if (*(char *)(a5 + 23) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a5, *(_QWORD *)(a5 + 8));
  else
    __p = *(std::string *)a5;
  CLMicroLocationBluetoothIdentityTable::Entry::Entry(a2, v9, v10, &v12, &__p, *a6);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v12.__r_.__value_.__l.__data_);
}

void sub_241AEDFEC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::__hash_table<CLMicroLocationUtils::BleIdentityItem,CLMicroLocationUtils::BleIdentityItem::HashItem,CLMicroLocationUtils::BleIdentityItem::PredicateItem,std::allocator<CLMicroLocationUtils::BleIdentityItem>>::clear(uint64_t a1)
{
  uint64_t v2;
  uint64_t i;

  if (*(_QWORD *)(a1 + 24))
  {
    std::__hash_table<CLMicroLocationUtils::BleIdentityItem,CLMicroLocationUtils::BleIdentityItem::HashItem,CLMicroLocationUtils::BleIdentityItem::PredicateItem,std::allocator<CLMicroLocationUtils::BleIdentityItem>>::__deallocate_node(a1, *(_QWORD **)(a1 + 16));
    *(_QWORD *)(a1 + 16) = 0;
    v2 = *(_QWORD *)(a1 + 8);
    if (v2)
    {
      for (i = 0; i != v2; ++i)
        *(_QWORD *)(*(_QWORD *)a1 + 8 * i) = 0;
    }
    *(_QWORD *)(a1 + 24) = 0;
  }
}

_QWORD *std::__hash_table<CLMicroLocationUtils::BleIdentityItem,CLMicroLocationUtils::BleIdentityItem::HashItem,CLMicroLocationUtils::BleIdentityItem::PredicateItem,std::allocator<CLMicroLocationUtils::BleIdentityItem>>::__emplace_unique_impl<boost::uuids::uuid const&,std::optional<std::string> &,std::optional<std::string> &,std::nullopt_t const&,std::chrono::time_point<cl::chrono::CFAbsoluteTimeClock,std::chrono::duration<long double,std::ratio<1l,1l>>> const&>(_QWORD *a1, _OWORD *a2, __int128 *a3, __int128 *a4, uint64_t a5, _QWORD *a6)
{
  _QWORD *inserted;
  char v8;
  _QWORD *v10[3];

  std::__hash_table<CLMicroLocationUtils::BleIdentityItem,CLMicroLocationUtils::BleIdentityItem::HashItem,CLMicroLocationUtils::BleIdentityItem::PredicateItem,std::allocator<CLMicroLocationUtils::BleIdentityItem>>::__construct_node<boost::uuids::uuid const&,std::optional<std::string> &,std::optional<std::string> &,std::nullopt_t const&,std::chrono::time_point<cl::chrono::CFAbsoluteTimeClock,std::chrono::duration<long double,std::ratio<1l,1l>>> const&>((uint64_t)a1, a2, a3, a4, a5, a6, (uint64_t)v10);
  inserted = std::__hash_table<CLMicroLocationUtils::BleIdentityItem,CLMicroLocationUtils::BleIdentityItem::HashItem,CLMicroLocationUtils::BleIdentityItem::PredicateItem,std::allocator<CLMicroLocationUtils::BleIdentityItem>>::__node_insert_unique(a1, v10[0]);
  if ((v8 & 1) != 0)
    v10[0] = 0;
  std::unique_ptr<std::__hash_node<CLMicroLocationUtils::BleIdentityItem,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<CLMicroLocationUtils::BleIdentityItem,void *>>>>::reset[abi:ne180100]((uint64_t)v10, 0);
  return inserted;
}

void sub_241AEE0D0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<CLMicroLocationUtils::BleIdentityItem,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<CLMicroLocationUtils::BleIdentityItem,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

unint64_t std::__hash_table<CLMicroLocationUtils::BleIdentityItem,CLMicroLocationUtils::BleIdentityItem::HashItem,CLMicroLocationUtils::BleIdentityItem::PredicateItem,std::allocator<CLMicroLocationUtils::BleIdentityItem>>::__construct_node<boost::uuids::uuid const&,std::optional<std::string> &,std::optional<std::string> &,std::nullopt_t const&,std::chrono::time_point<cl::chrono::CFAbsoluteTimeClock,std::chrono::duration<long double,std::ratio<1l,1l>>> const&>@<X0>(uint64_t a1@<X0>, _OWORD *a2@<X1>, __int128 *a3@<X2>, __int128 *a4@<X3>, uint64_t a5@<X4>, _QWORD *a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v14;
  _QWORD *v15;
  unint64_t result;

  v14 = a1 + 16;
  v15 = operator new(0x88uLL);
  *(_QWORD *)a7 = v15;
  *(_QWORD *)(a7 + 8) = v14;
  *(_BYTE *)(a7 + 16) = 0;
  *v15 = 0;
  v15[1] = 0;
  std::allocator<std::__hash_node<CLMicroLocationUtils::BleIdentityItem,void *>>::construct[abi:ne180100]<CLMicroLocationUtils::BleIdentityItem,boost::uuids::uuid const&,std::optional<std::string> &,std::optional<std::string> &,std::nullopt_t const&,std::chrono::time_point<cl::chrono::CFAbsoluteTimeClock,std::chrono::duration<long double,std::ratio<1l,1l>>> const&>(v14, (uint64_t)(v15 + 2), a2, a3, a4, a5, a6);
  *(_BYTE *)(a7 + 16) = 1;
  result = CLMicroLocationUtils::BleIdentityItem::HashItem::operator()(a1 + 24, (uint64_t)(v15 + 2));
  v15[1] = result;
  return result;
}

void sub_241AEE194(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__hash_node<CLMicroLocationUtils::BleIdentityItem,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<CLMicroLocationUtils::BleIdentityItem,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<CLMicroLocationUtils::BleIdentityItem,CLMicroLocationUtils::BleIdentityItem::HashItem,CLMicroLocationUtils::BleIdentityItem::PredicateItem,std::allocator<CLMicroLocationUtils::BleIdentityItem>>::__node_insert_unique(_QWORD *a1, _QWORD *a2)
{
  _QWORD *v2;
  uint64_t v4;
  unint64_t v5;
  _QWORD *v6;

  v2 = a2;
  v4 = (uint64_t)(a2 + 2);
  v5 = CLMicroLocationUtils::BleIdentityItem::HashItem::operator()((uint64_t)(a1 + 3), (uint64_t)(a2 + 2));
  v2[1] = v5;
  v6 = std::__hash_table<CLMicroLocationUtils::BleIdentityItem,CLMicroLocationUtils::BleIdentityItem::HashItem,CLMicroLocationUtils::BleIdentityItem::PredicateItem,std::allocator<CLMicroLocationUtils::BleIdentityItem>>::__node_insert_unique_prepare[abi:ne180100]((uint64_t)a1, v5, v4);
  if (v6)
    return v6;
  std::__hash_table<CLMicroLocationUtils::BleIdentityItem,CLMicroLocationUtils::BleIdentityItem::HashItem,CLMicroLocationUtils::BleIdentityItem::PredicateItem,std::allocator<CLMicroLocationUtils::BleIdentityItem>>::__node_insert_unique_perform[abi:ne180100](a1, v2);
  return v2;
}

void std::allocator<std::__hash_node<CLMicroLocationUtils::BleIdentityItem,void *>>::construct[abi:ne180100]<CLMicroLocationUtils::BleIdentityItem,boost::uuids::uuid const&,std::optional<std::string> &,std::optional<std::string> &,std::nullopt_t const&,std::chrono::time_point<cl::chrono::CFAbsoluteTimeClock,std::chrono::duration<long double,std::ratio<1l,1l>>> const&>(uint64_t a1, uint64_t a2, _OWORD *a3, __int128 *a4, __int128 *a5, uint64_t a6, _QWORD *a7)
{
  __int128 __p;
  char v8;
  char v9;

  LOBYTE(__p) = 0;
  v9 = 0;
  CLMicroLocationUtils::BleIdentityItem::BleIdentityItem(a2, a3, a4, a5, &__p, a7);
  if (v9)
  {
    if (v8 < 0)
      operator delete((void *)__p);
  }
}

void sub_241AEE27C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a15)
  {
    if (a14 < 0)
      operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t CLMicroLocationUtils::BleIdentityItem::BleIdentityItem(uint64_t a1, _OWORD *a2, __int128 *a3, __int128 *a4, __int128 *a5, _QWORD *a6)
{
  *(_OWORD *)a1 = *a2;
  std::__optional_copy_base<std::string,false>::__optional_copy_base[abi:ne180100]((std::string *)(a1 + 16), a3);
  std::__optional_copy_base<std::string,false>::__optional_copy_base[abi:ne180100]((std::string *)(a1 + 48), a4);
  std::__optional_copy_base<std::string,false>::__optional_copy_base[abi:ne180100]((std::string *)(a1 + 80), a5);
  *(_QWORD *)(a1 + 112) = *a6;
  return a1;
}

void sub_241AEE318(_Unwind_Exception *exception_object)
{
  char *v1;
  void **v2;
  void **v3;

  if (v1[72] && v1[71] < 0)
    operator delete(*v3);
  if (v1[40])
  {
    if (v1[39] < 0)
      operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *std::__hash_table<CLMicroLocationUtils::BleIdentityItem,CLMicroLocationUtils::BleIdentityItem::HashItem,CLMicroLocationUtils::BleIdentityItem::PredicateItem,std::allocator<CLMicroLocationUtils::BleIdentityItem>>::__node_insert_unique_prepare[abi:ne180100](uint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint8x8_t v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  unint64_t v12;
  float v13;
  float v14;
  _BOOL8 v15;
  unint64_t v16;
  unint64_t v17;
  size_t v18;

  v4 = *(_QWORD *)(a1 + 8);
  if (v4)
  {
    v7 = (uint8x8_t)vcnt_s8((int8x8_t)v4);
    v7.i16[0] = vaddlv_u8(v7);
    v8 = v7.u32[0];
    if (v7.u32[0] > 1uLL)
      v9 = v4 <= a2 ? a2 % v4 : a2;
    else
      v9 = (v4 - 1) & a2;
    v10 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v9);
    if (v10)
    {
      v11 = (_QWORD *)*v10;
      if (*v10)
      {
        do
        {
          v12 = v11[1];
          if (v12 == a2)
          {
            if ((CLMicroLocationUtils::BleIdentityItem::PredicateItem::operator()(a1 + 32, (uint64_t)(v11 + 2), a3) & 1) != 0)
              return v11;
          }
          else
          {
            if (v8 > 1)
            {
              if (v12 >= v4)
                v12 %= v4;
            }
            else
            {
              v12 &= v4 - 1;
            }
            if (v12 != v9)
              break;
          }
          v11 = (_QWORD *)*v11;
        }
        while (v11);
      }
    }
  }
  v13 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v14 = *(float *)(a1 + 32);
  if (!v4 || (float)(v14 * (float)v4) < v13)
  {
    v15 = 1;
    if (v4 >= 3)
      v15 = (v4 & (v4 - 1)) != 0;
    v16 = v15 | (2 * v4);
    v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17)
      v18 = v17;
    else
      v18 = v16;
    std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>>>::__rehash<true>(a1, v18);
  }
  return 0;
}

_QWORD *std::__hash_table<CLMicroLocationUtils::BleIdentityItem,CLMicroLocationUtils::BleIdentityItem::HashItem,CLMicroLocationUtils::BleIdentityItem::PredicateItem,std::allocator<CLMicroLocationUtils::BleIdentityItem>>::__node_insert_unique_perform[abi:ne180100](_QWORD *result, _QWORD *a2)
{
  int8x8_t v2;
  unint64_t v3;
  uint8x8_t v4;
  _QWORD *v5;
  unint64_t v6;

  v2 = (int8x8_t)result[1];
  v3 = a2[1];
  v4 = (uint8x8_t)vcnt_s8(v2);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    if (v3 >= *(_QWORD *)&v2)
      v3 %= *(_QWORD *)&v2;
  }
  else
  {
    v3 &= *(_QWORD *)&v2 - 1;
  }
  v5 = *(_QWORD **)(*result + 8 * v3);
  if (v5)
  {
    *a2 = *v5;
LABEL_13:
    *v5 = a2;
    goto LABEL_14;
  }
  *a2 = result[2];
  result[2] = a2;
  *(_QWORD *)(*result + 8 * v3) = result + 2;
  if (*a2)
  {
    v6 = *(_QWORD *)(*a2 + 8);
    if (v4.u32[0] > 1uLL)
    {
      if (v6 >= *(_QWORD *)&v2)
        v6 %= *(_QWORD *)&v2;
    }
    else
    {
      v6 &= *(_QWORD *)&v2 - 1;
    }
    v5 = (_QWORD *)(*result + 8 * v6);
    goto LABEL_13;
  }
LABEL_14:
  ++result[3];
  return result;
}

double CLMicroLocationTriggerManager::CLMicroLocationTriggerManager(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)a1 = off_2511D91A8;
  *(_WORD *)(a1 + 8) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_DWORD *)(a1 + 48) = 1065353216;
  *(_WORD *)(a1 + 151) = 0;
  *(_WORD *)(a1 + 168) = 0;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_QWORD *)(a1 + 102) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_DWORD *)(a1 + 185) = 0;
  *(_QWORD *)(a1 + 192) = a2;
  return result;
}

_QWORD *CLMicroLocationTriggerManager::setupCustomLoiRecordingManager(_QWORD *this, CLMiLoCustomLoiRecordingManager *a2)
{
  if (a2)
  {
    this[25] = a2;
  }
  else
  {
    CLMicroLocationTriggerManager::setupCustomLoiRecordingManager();
    return _CLLogObjectForCategory_MicroLocation_Default();
  }
  return this;
}

uint64_t CLMicroLocationTriggerManager::requestLocalization(uint64_t a1, const CLMicroLocationProto::RecordingEvent *a2, int a3, int a4, unsigned int a5)
{
  NSObject *v9;
  NSObject *v10;
  uint64_t v11;
  int shouldReject;
  const CLMicroLocationProto::RecordingEvent *v13;
  char v14;
  unsigned int v15;
  const CLMicroLocationProto::RecordingEvent *v16;
  _BOOL4 isMotionRequest;
  const CLMicroLocationProto::RecordingEvent *v18;
  _BOOL4 v19;
  NSObject *v20;
  int v21;
  uint64_t v22;
  NSObject *v23;
  uint64_t v24;
  void *v25;
  double v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t *v32;
  NSObject *v33;
  double v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  double v39;
  double v40;
  NSObject *v41;
  uint64_t v42;
  NSObject *v43;
  uint64_t v44;
  NSObject *v45;
  uint64_t v46;
  double v47;
  NSObject *v48;
  void *v49;
  int v51;
  int v52[8];
  uint64_t v53;
  double EventReceivedTS;
  unsigned int v55;
  void *__p[2];
  char v57;
  void *buf;
  __int16 v59;
  const char *v60;
  __int16 v61;
  _BYTE v62[10];
  _QWORD v63[42];

  *(_QWORD *)((char *)&v63[39] + 2) = *MEMORY[0x24BDAC8D0];
  if (onceToken_MicroLocation_Default != -1)
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_73);
  v9 = logObject_MicroLocation_Default;
  if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
  {
    buf = (void *)68289794;
    v59 = 2082;
    v60 = "";
    v61 = 1026;
    *(_DWORD *)v62 = a3;
    *(_WORD *)&v62[4] = 1026;
    *(_DWORD *)&v62[6] = a4;
    LOWORD(v63[0]) = 2050;
    *(_QWORD *)((char *)v63 + 2) = a5;
    _os_log_impl(&dword_2419D9000, v9, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLMicroLocationTriggerManager: requestLocalization\", \"isForce\":%{public}hhd, \"isInMotionTrigger\":%{public}hhd, \"TriggerReason\":%{public}lu}", (uint8_t *)&buf, 0x28u);
  }
  if (*(_BYTE *)(a1 + 133))
  {
    if (onceToken_MicroLocation_Default != -1)
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_73);
    v10 = logObject_MicroLocation_Default;
    if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
    {
      buf = (void *)68289026;
      v59 = 2082;
      v60 = "";
      _os_log_impl(&dword_2419D9000, v10, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLMicroLocationTriggerManager: requestLocalization -- denying localization  because we are running recording session\"}", (uint8_t *)&buf, 0x12u);
    }
    return 5;
  }
  shouldReject = CLMicroLocationTriggerManager::shouldReject((CLMicroLocationTriggerManager *)a1, a2);
  v14 = shouldReject;
  if (shouldReject)
    v15 = 5;
  else
    v15 = 0;
  v55 = v15;
  EventReceivedTS = CLMicroLocationProtobufHelper::getEventReceivedTS(a2, v13);
  isMotionRequest = CLMicroLocationTriggerManager::isMotionRequest(a2, v16);
  v19 = CLMicroLocationTriggerManager::isMotionRequest(a2, v18);
  objc_msgSend(MEMORY[0x24BDBCED8], "dictionary");
  v49 = (void *)objc_claimAutoreleasedReturnValue();
  if ((v14 & 1) != 0)
  {
    v15 = 5;
    goto LABEL_29;
  }
  if (*(_BYTE *)(a1 + 132))
  {
    (*(void (**)(_QWORD, const CLMicroLocationProto::RecordingEvent *))(**(_QWORD **)(a1 + 192) + 32))(*(_QWORD *)(a1 + 192), a2);
    if (onceToken_MicroLocation_Default != -1)
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_73);
    v20 = logObject_MicroLocation_Default;
    if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(buf) = 0;
      _os_log_impl(&dword_2419D9000, v20, OS_LOG_TYPE_DEFAULT, "CLMicroLocationTriggerManager: Got localization trigger while waiting for rescheduled localization timer", (uint8_t *)&buf, 2u);
    }
LABEL_27:
    v15 = 1;
LABEL_28:
    v55 = v15;
    goto LABEL_29;
  }
  v21 = *(unsigned __int8 *)(a1 + 8);
  if (v21 == 1)
  {
    v22 = v19 & (a4 ^ 1u);
    if (onceToken_MicroLocation_Default != -1)
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_73);
    v23 = logObject_MicroLocation_Default;
    if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(buf) = 0;
      _os_log_impl(&dword_2419D9000, v23, OS_LOG_TYPE_DEFAULT, "CLMicroLocationTriggerManager: Got localization trigger while localizing - AcceptedOngoing", (uint8_t *)&buf, 2u);
    }
    (*(void (**)(_QWORD, const CLMicroLocationProto::RecordingEvent *, uint64_t))(**(_QWORD **)(a1 + 192)
                                                                                          + 24))(*(_QWORD *)(a1 + 192), a2, v22);
    goto LABEL_27;
  }
  if (*(_DWORD *)(a1 + 104) == 1)
  {
    v32 = *(uint64_t **)(a1 + 32);
    if (v32)
    {
      while (*((_DWORD *)v32 + 8) != 1)
      {
        v32 = (uint64_t *)*v32;
        if (!v32)
          goto LABEL_52;
      }
      if (ULSettings::get<ULSettings::PedestrianFenceEnabled>() && !a3)
      {
        _CLLogObjectForCategory_MicroLocation_Default();
        v33 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT))
        {
          LOWORD(buf) = 0;
          _os_log_impl(&dword_2419D9000, v33, OS_LOG_TYPE_DEFAULT, "CLMicroLocationTriggerManager: Got unforced localization trigger in low latency - ReturnCache", (uint8_t *)&buf, 2u);
        }

        v15 = 4;
        goto LABEL_28;
      }
      v21 = *(unsigned __int8 *)(a1 + 8);
    }
  }
LABEL_52:
  if (v21 == 2)
    (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 192) + 40))(*(_QWORD *)(a1 + 192), 2);
  v34 = *(double *)(a1 + 112);
  +[ULDefaultsSingleton shared](ULDefaultsSingleton, "shared", v49);
  v35 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v35, "defaultsDictionary");
  v36 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "ULMinDurationBetweenTriggers");
  v37 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v36, "objectForKey:", v37);
  v38 = (void *)objc_claimAutoreleasedReturnValue();
  if (v38 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
    objc_msgSend(v38, "doubleValue");
  else
    objc_msgSend(&unk_2511EDC90, "doubleValue");
  v40 = v39;

  if (EventReceivedTS - v34 < v40)
  {
    if (EventReceivedTS < *(double *)(a1 + 112))
    {
      _CLLogObjectForCategory_MicroLocation_Default();
      v41 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v41, OS_LOG_TYPE_ERROR))
      {
        v42 = *(_QWORD *)(a1 + 112);
        buf = (void *)68289538;
        v59 = 2082;
        v60 = "";
        v61 = 2050;
        *(double *)v62 = EventReceivedTS;
        *(_WORD *)&v62[8] = 2050;
        v63[0] = v42;
        _os_log_impl(&dword_2419D9000, v41, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"fLastTrigger is in the past\", \"triggerTS\":\"%{public}.3f\", \"fLastTriggerTS\":\"%{public}.3f\"}", (uint8_t *)&buf, 0x26u);
      }

      _CLLogObjectForCategory_MicroLocation_Default();
      v43 = objc_claimAutoreleasedReturnValue();
      if (os_signpost_enabled(v43))
      {
        v44 = *(_QWORD *)(a1 + 112);
        buf = (void *)68289538;
        v59 = 2082;
        v60 = "";
        v61 = 2050;
        *(double *)v62 = EventReceivedTS;
        *(_WORD *)&v62[8] = 2050;
        v63[0] = v44;
        _os_signpost_emit_with_name_impl(&dword_2419D9000, v43, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "fLastTrigger is in the past", "{\"msg%{public}.0s\":\"fLastTrigger is in the past\", \"triggerTS\":\"%{public}.3f\", \"fLastTriggerTS\":\"%{public}.3f\"}", (uint8_t *)&buf, 0x26u);
      }

      *(double *)(a1 + 112) = EventReceivedTS;
    }
    _CLLogObjectForCategory_MicroLocation_Default();
    v45 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v45, OS_LOG_TYPE_DEFAULT))
    {
      v46 = *(_QWORD *)(a1 + 112);
      buf = (void *)68289538;
      v59 = 2082;
      v60 = "";
      v61 = 2050;
      *(double *)v62 = EventReceivedTS;
      *(_WORD *)&v62[8] = 2050;
      v63[0] = v46;
      _os_log_impl(&dword_2419D9000, v45, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLMicroLocationTriggerManager: Reschedule trigger\", \"triggerTS\":\"%{public}.3f\", \"fLastTriggerTS\":\"%{public}.3f\"}", (uint8_t *)&buf, 0x26u);
    }

    std::vector<CLMicroLocationProto::RecordingEvent>::emplace_back<CLMicroLocationProto::RecordingEvent const&>((uint64_t *)(a1 + 80), a2);
    v55 = 3;
    v47 = ULSettings::get<ULSettings::LocalizationRescheduleDelay>();
    (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 192) + 88))(*(_QWORD *)(a1 + 192), (uint64_t)((v47 - (EventReceivedTS - *(double *)(a1 + 112))) * 1000.0));
    *(_BYTE *)(a1 + 132) = 1;
    if (!*(_BYTE *)(a1 + 185))
      CLMicroLocationTriggerManager::setRescheduledTriggerLocalizationUUID((CLMicroLocationTriggerManager *)a1, a2);
    v15 = 3;
    goto LABEL_29;
  }
  if (((*(uint64_t (**)(_QWORD, double))(**(_QWORD **)(a1 + 192) + 104))(*(_QWORD *)(a1 + 192), EventReceivedTS - v34) & 1) == 0)
  {
    std::vector<CLMicroLocationProto::RecordingEvent>::emplace_back<CLMicroLocationProto::RecordingEvent const&>((uint64_t *)(a1 + 80), a2);
    _CLLogObjectForCategory_MicroLocation_Default();
    v48 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v48, OS_LOG_TYPE_DEFAULT))
    {
      buf = (void *)68289026;
      v59 = 2082;
      v60 = "";
      _os_log_impl(&dword_2419D9000, v48, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLMicroLocationTriggerManager: Wait For Display On\"}", (uint8_t *)&buf, 0x12u);
    }

    v15 = 2;
    goto LABEL_28;
  }
  CLMicroLocationTriggerManager::startTrigger(a1, a2, 1, &EventReceivedTS, v49, isMotionRequest & a4);
LABEL_29:
  CLMicroLocationTriggerManager::createTriggerEvent(a1, (uint64_t)a2, 0, (CLMicroLocationProto *)a5, v15, (uint64_t)v52);
  v24 = *(_QWORD *)(a1 + 192);
  v51 = 0;
  boost::uuids::detail::random_provider_base::random_provider_base((boost::uuids::detail::random_provider_base *)&v51);
  __p[0] = (void *)boost::uuids::random_generator_pure::operator()((uint64_t)&v51);
  __p[1] = v25;
  v26 = cl::chrono::CFAbsoluteTimeClock::now();
  CLMicroLocationProtobufHelper::createLoggedEvent<CLMicroLocationProto::TriggerEvent>(__p, v52, (uint64_t)&buf, v26);
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v24 + 112))(v24, &buf);
  CLMicroLocationProto::ReceivedEvent::~ReceivedEvent((CLMicroLocationProto::ReceivedEvent *)((char *)v63 + 2));
  boost::uuids::detail::random_provider_base::destroy((boost::uuids::detail::random_provider_base *)&v51);
  v51 = 0;
  CLMicroLocationProtobufHelper::convertRequestTypeToString(&v51, &buf);
  v27 = v53;
  CLMicroLocationProtobufHelper::convertRequestStatusToString((int *)&v55, __p);
  v28 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 192) + 104))(*(_QWORD *)(a1 + 192));
  if (*(_DWORD *)(a1 + 104) == 1 && (v29 = *(uint64_t **)(a1 + 32)) != 0)
  {
    while (*((_DWORD *)v29 + 8) != 1)
    {
      v29 = (uint64_t *)*v29;
      if (!v29)
        goto LABEL_33;
    }
    v30 = ULSettings::get<ULSettings::PedestrianFenceEnabled>();
  }
  else
  {
LABEL_33:
    v30 = 0;
  }
  CLMicroLocationCoreAnalyticsPublishHelper::sendCommonTriggerEvent((uint64_t)a2, (uint64_t)&buf, v27, (uint64_t)__p, v28, v30, v49);
  if (v57 < 0)
    operator delete(__p[0]);
  if ((v62[3] & 0x80000000) != 0)
    operator delete(buf);
  v11 = v55;
  CLMicroLocationProto::TriggerEvent::~TriggerEvent((CLMicroLocationProto::TriggerEvent *)v52);

  return v11;
}

void sub_241AEEEBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, int a10, char a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32,char a33,uint64_t a34,int a35,__int16 a36,char a37,char a38)
{
  void *v38;
  void *v39;
  void *v40;

  _Unwind_Resume(a1);
}

BOOL CLMicroLocationTriggerManager::isMotionRequest(CLMicroLocationTriggerManager *this, const CLMicroLocationProto::RecordingEvent *a2)
{
  uint64_t v2;
  uint64_t *v3;
  int v4;
  uint64_t *v5;
  uint64_t v6;
  int v7;

  if ((*((_BYTE *)this + 140) & 4) == 0)
    return 0;
  v2 = *((_QWORD *)this + 2);
  if (!v2)
    v2 = *(_QWORD *)(CLMicroLocationProto::RecordingEvent::default_instance(this) + 16);
  v3 = *(uint64_t **)(v2 + 16);
  v4 = *((char *)v3 + 23);
  if (v4 < 0)
  {
    if (v3[1] != 20)
      return 0;
    v3 = (uint64_t *)*v3;
  }
  else if (v4 != 20)
  {
    return 0;
  }
  v5 = (uint64_t *)*v3;
  v6 = v3[1];
  v7 = *((_DWORD *)v3 + 4);
  return v5 == (uint64_t *)0x6C616E7265746E49 && v6 == 0x6F4D746E65696C43 && v7 == 1852795252;
}

uint64_t ULSettings::get<ULSettings::PedestrianFenceEnabled>()
{
  void *v0;
  void *v1;
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;

  +[ULDefaultsSingleton shared](ULDefaultsSingleton, "shared");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "defaultsDictionary");
  v1 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "ULPedestrianFenceEnabled");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "objectForKey:", v2);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  if (v3 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
    v4 = objc_msgSend(v3, "BOOLValue");
  else
    v4 = objc_msgSend(MEMORY[0x24BDBD1C8], "BOOLValue");
  v5 = v4;

  return v5;
}

void sub_241AEF0E0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

uint64_t std::vector<CLMicroLocationProto::RecordingEvent>::emplace_back<CLMicroLocationProto::RecordingEvent const&>(uint64_t *a1, const CLMicroLocationProto::RecordingEvent *a2)
{
  unint64_t v3;
  uint64_t v4;

  v3 = a1[1];
  if (v3 >= a1[2])
  {
    v4 = std::vector<CLMicroLocationProto::RecordingEvent>::__emplace_back_slow_path<CLMicroLocationProto::RecordingEvent const&>(a1, a2);
  }
  else
  {
    CLMicroLocationProto::RecordingEvent::RecordingEvent((CLMicroLocationProto::RecordingEvent *)a1[1], a2);
    v4 = v3 + 144;
    a1[1] = v3 + 144;
  }
  a1[1] = v4;
  return v4 - 144;
}

void sub_241AEF168(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

double ULSettings::get<ULSettings::LocalizationRescheduleDelay>()
{
  void *v0;
  void *v1;
  void *v2;
  void *v3;
  double v4;
  double v5;

  +[ULDefaultsSingleton shared](ULDefaultsSingleton, "shared");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "defaultsDictionary");
  v1 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "ULLocalizationRescheduleDelay");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "objectForKey:", v2);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  if (v3 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
    objc_msgSend(v3, "doubleValue");
  else
    objc_msgSend(&unk_2511EDC78, "doubleValue");
  v5 = v4;

  return v5;
}

void sub_241AEF238(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

_BYTE *CLMicroLocationTriggerManager::expectRescheduledTrigger(_BYTE *this, const CLMicroLocationProto::RecordingEvent *a2, int a3)
{
  _BYTE *v5;
  unint64_t v6;

  v5 = this;
  this[132] = 1;
  if (this[185])
  {
    if (!a3)
      return this;
  }
  else
  {
    this = (_BYTE *)CLMicroLocationTriggerManager::setRescheduledTriggerLocalizationUUID((CLMicroLocationTriggerManager *)this, a2);
    if (!a3)
      return this;
  }
  v6 = *((_QWORD *)v5 + 11);
  if (v6 >= *((_QWORD *)v5 + 12))
  {
    this = (_BYTE *)std::vector<CLMicroLocationProto::RecordingEvent>::__emplace_back_slow_path<CLMicroLocationProto::RecordingEvent const&>((uint64_t *)v5 + 10, a2);
  }
  else
  {
    CLMicroLocationProto::RecordingEvent::RecordingEvent(*((CLMicroLocationProto::RecordingEvent **)v5 + 11), a2);
    this = (_BYTE *)(v6 + 144);
    *((_QWORD *)v5 + 11) = v6 + 144;
  }
  *((_QWORD *)v5 + 11) = this;
  return this;
}

void sub_241AEF2FC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 88) = v2;
  _Unwind_Resume(a1);
}

void CLMicroLocationTriggerManager::startTrigger(uint64_t a1, const CLMicroLocationProto::RecordingEvent *a2, uint64_t a3, _QWORD *a4, void *a5, int a6)
{
  id v11;
  NSObject *v12;
  int v13;
  _OWORD *v14;
  const char *v15;
  void *p_p;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  int v21;
  NSObject *v22;
  uint64_t v23;
  _DWORD *v24;
  _DWORD *v25;
  void *__p;
  void *v27;
  _DWORD *v28;
  void *v29;
  __int128 v30;
  uint8_t buf[8];
  _BYTE v32[20];
  __int16 v33;
  void *v34;
  __int16 v35;
  int v36;
  _BYTE v37[16];
  unsigned __int8 v38;
  uint64_t v39;

  v39 = *MEMORY[0x24BDAC8D0];
  v11 = a5;
  CLMicroLocationProtobufHelper::getTriggerUuidFromEvent((uint64_t)a2, v37);
  if (onceToken_MicroLocation_Default != -1)
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_73);
  v12 = (id)logObject_MicroLocation_Default;
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
  {
    v13 = v38;
    if (v38)
    {
      v14 = operator new(0x28uLL);
      v29 = v14;
      v30 = xmmword_241BB2320;
      *v14 = 0u;
      v14[1] = 0u;
      *(_QWORD *)((char *)v14 + 29) = 0;
      boost::uuids::to_chars<char *>((uint64_t)v37, v14);
      if (v30 >= 0)
        v15 = (const char *)&v29;
      else
        v15 = (const char *)v29;
    }
    else
    {
      v15 = "";
    }
    CLMicroLocationUtils::scanActivityToString(a3, &__p);
    if (SHIBYTE(v28) >= 0)
      p_p = &__p;
    else
      p_p = __p;
    *(_DWORD *)buf = 68289794;
    *(_DWORD *)&buf[4] = 0;
    *(_WORD *)v32 = 2082;
    *(_QWORD *)&v32[2] = "";
    *(_WORD *)&v32[10] = 2082;
    *(_QWORD *)&v32[12] = v15;
    v33 = 2082;
    v34 = p_p;
    v35 = 1026;
    v36 = a6;
    _os_log_impl(&dword_2419D9000, v12, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLMicroLocationTriggerManager::startTrigger\", \"TriggerUUID\":%{public, location:escape_only}s, \"ScanActivity\":%{public, location:escape_only}s, \"isInMotionTrigger\":%{public}hhd}", buf, 0x2Cu);
    if (SHIBYTE(v28) < 0)
      operator delete(__p);
    if (v13 && SHIBYTE(v30) < 0)
      operator delete(v29);
  }

  *(_BYTE *)(a1 + 8) = a3;
  *(_QWORD *)(a1 + 112) = *a4;
  if ((_DWORD)a3 == 1)
    *(_QWORD *)(a1 + 120) = *a4;
  *(_WORD *)(a1 + 187) = a6 | 0x100;
  CLMicroLocationTriggerManager::setCurrentLocalizationUUID((CLMicroLocationTriggerManager *)a1, a2);
  CLMicroLocationProtobufHelper::getTriggerUuidFromEvent((uint64_t)a2, buf);
  LODWORD(__p) = 0;
  boost::uuids::detail::random_provider_base::random_provider_base((boost::uuids::detail::random_provider_base *)&__p);
  v17 = boost::uuids::random_generator_pure::operator()((uint64_t)&__p);
  v20 = *(void **)buf;
  v19 = *(_QWORD *)v32;
  if (!v32[8])
  {
    v19 = v18;
    v20 = (void *)v17;
  }
  v21 = *(unsigned __int8 *)(a1 + 168);
  *(_QWORD *)(a1 + 152) = v20;
  *(_QWORD *)(a1 + 160) = v19;
  if (!v21)
    *(_BYTE *)(a1 + 168) = 1;
  boost::uuids::detail::random_provider_base::destroy((boost::uuids::detail::random_provider_base *)&__p);
  (*(void (**)(_QWORD, const CLMicroLocationProto::RecordingEvent *, uint64_t, _QWORD *, id))(**(_QWORD **)(a1 + 192) + 16))(*(_QWORD *)(a1 + 192), a2, a3, a4, v11);
  if (*(_BYTE *)(a1 + 8) == 1 && *(_BYTE *)(a1 + 186))
  {
    if (onceToken_MicroLocation_Default != -1)
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_73);
    v22 = logObject_MicroLocation_Default;
    if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 68289026;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)v32 = 2082;
      *(_QWORD *)&v32[2] = "";
      _os_log_impl(&dword_2419D9000, v22, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLMicroLocationTriggerManager::startTrigger, setting medium confidence due to motion\"}", buf, 0x12u);
    }
    v23 = *(_QWORD *)(a1 + 192);
    v24 = operator new(4uLL);
    *(_QWORD *)buf = v24;
    *v24 = 2;
    *(_QWORD *)v32 = v24 + 1;
    *(_QWORD *)&v32[8] = v24 + 1;
    v25 = operator new(4uLL);
    __p = v25;
    *v25 = 1;
    v27 = v25 + 1;
    v28 = v25 + 1;
    (*(void (**)(uint64_t, uint8_t *, void **))(*(_QWORD *)v23 + 96))(v23, buf, &__p);
    if (__p)
    {
      v27 = __p;
      operator delete(__p);
    }
    if (*(_QWORD *)buf)
    {
      *(_QWORD *)v32 = *(_QWORD *)buf;
      operator delete(*(void **)buf);
    }
  }

}

void sub_241AEF694(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21)
{
  void *v21;

  if (__p)
    operator delete(__p);
  if (a20)
    operator delete(a20);

  _Unwind_Resume(a1);
}

void CLMicroLocationTriggerManager::createTriggerEvent(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned int a3@<W2>, CLMicroLocationProto *a4@<X3>, unsigned int a5@<W4>, uint64_t a6@<X8>)
{
  CLMicroLocationProto::RecordingEvent *v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  std::string *v15;
  std::string *v16;
  unsigned int v17;
  std::string *v18;
  std::string *v19;
  char v20;
  unsigned int v21;
  std::string *v22;
  char v23;
  std::string *v24;
  CLMicroLocationProto *v25;
  const char *v26;
  int v27;
  const char *v28;
  const char *v29;
  int v30;
  const char *v31;
  std::string __p;
  std::string __str;
  unsigned int v34;
  unsigned int v35;
  std::string v36;
  _BYTE v37[17];
  uint64_t v38;

  v38 = *MEMORY[0x24BDAC8D0];
  v34 = a5;
  v35 = a3;
  CLMicroLocationProto::TriggerEvent::TriggerEvent(a6);
  v10 = (CLMicroLocationProto::RecordingEvent *)std::string::basic_string[abi:ne180100]<0>(&__str, "");
  v11 = *(_DWORD *)(a2 + 140);
  if ((v11 & 4) != 0)
  {
    v12 = *(_QWORD *)(a2 + 16);
    if (!v12)
    {
      v10 = (CLMicroLocationProto::RecordingEvent *)CLMicroLocationProto::RecordingEvent::default_instance(v10);
      v12 = *((_QWORD *)v10 + 2);
    }
    if ((*(_BYTE *)(v12 + 44) & 4) != 0)
    {
      v14 = *(_QWORD *)(a2 + 16);
      if (!v14)
        v14 = *(_QWORD *)(CLMicroLocationProto::RecordingEvent::default_instance(v10) + 16);
      goto LABEL_15;
    }
    v11 = *(_DWORD *)(a2 + 140);
  }
  if ((v11 & 0x400) == 0)
    goto LABEL_10;
  v13 = *(_QWORD *)(a2 + 88);
  if (!v13)
  {
    v10 = (CLMicroLocationProto::RecordingEvent *)CLMicroLocationProto::RecordingEvent::default_instance(v10);
    v13 = *((_QWORD *)v10 + 11);
  }
  if ((*(_BYTE *)(v13 + 44) & 4) == 0)
  {
LABEL_10:
    MEMORY[0x2426A02C4](&__str, "");
    goto LABEL_16;
  }
  v14 = *(_QWORD *)(a2 + 88);
  if (!v14)
    v14 = *(_QWORD *)(CLMicroLocationProto::RecordingEvent::default_instance(v10) + 88);
LABEL_15:
  std::string::operator=(&__str, *(const std::string **)(v14 + 16));
LABEL_16:
  *(_DWORD *)(a6 + 84) |= 0x10u;
  v15 = *(std::string **)(a6 + 32);
  v16 = (std::string *)MEMORY[0x24BEDD958];
  if (v15 == (std::string *)MEMORY[0x24BEDD958])
  {
    v15 = (std::string *)operator new();
    v15->__r_.__value_.__r.__words[0] = 0;
    v15->__r_.__value_.__l.__size_ = 0;
    v15->__r_.__value_.__r.__words[2] = 0;
    *(_QWORD *)(a6 + 32) = v15;
  }
  std::string::operator=(v15, &__str);
  v17 = v35;
  if (!CLMicroLocationProto::TriggerRequestType_IsValid((CLMicroLocationProto *)v35))
  {
    v26 = "::CLMicroLocationProto::TriggerRequestType_IsValid(value)";
    v27 = 21189;
    v28 = "set_requesttype";
    goto LABEL_49;
  }
  *(_DWORD *)(a6 + 84) |= 0x100u;
  *(_DWORD *)(a6 + 56) = v17;
  if (!CLMicroLocationProto::TriggerReason_IsValid(a4))
  {
    v26 = "::CLMicroLocationProto::TriggerReason_IsValid(value)";
    v27 = 21235;
    v28 = "set_reason";
LABEL_49:
    __assert_rtn(v28, "microlocation.pb.h", v27, v26);
  }
  *(_DWORD *)(a6 + 84) |= 0x400u;
  *(_DWORD *)(a6 + 72) = (_DWORD)a4;
  CLMicroLocationProtobufHelper::convertRequestTypeToString(&v35, &v36);
  *(_DWORD *)(a6 + 84) |= 8u;
  v18 = *(std::string **)(a6 + 16);
  if (v18 == v16)
  {
    v18 = (std::string *)operator new();
    v18->__r_.__value_.__r.__words[0] = 0;
    v18->__r_.__value_.__l.__size_ = 0;
    v18->__r_.__value_.__r.__words[2] = 0;
    *(_QWORD *)(a6 + 16) = v18;
  }
  std::string::operator=(v18, &v36);
  if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v36.__r_.__value_.__l.__data_);
  CLMicroLocationProtobufHelper::getTriggerUuidFromEvent(a2, v37);
  if (v37[16])
  {
    memset(&__p, 0, sizeof(__p));
    if ((boost::conversion::detail::try_lexical_convert<std::string,boost::uuids::uuid>((uint64_t)v37, &__p) & 1) == 0)
    {
      std::bad_cast::bad_cast((std::bad_cast *)&v36);
      v36.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_2511D2C18;
      boost::throw_exception<boost::bad_lexical_cast>((uint64_t)&v36);
    }
    *(_DWORD *)(a6 + 84) |= 0x40u;
    v19 = *(std::string **)(a6 + 48);
    if (v19 == v16)
    {
      v19 = (std::string *)operator new();
      v19->__r_.__value_.__r.__words[0] = 0;
      v19->__r_.__value_.__l.__size_ = 0;
      v19->__r_.__value_.__r.__words[2] = 0;
      *(_QWORD *)(a6 + 48) = v19;
    }
    std::string::operator=(v19, &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  v20 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 192) + 104))(*(_QWORD *)(a1 + 192));
  *(_DWORD *)(a6 + 84) |= 4u;
  *(_BYTE *)(a6 + 28) = v20;
  v21 = v34;
  if (!CLMicroLocationProto::TriggerReason_IsValid((CLMicroLocationProto *)v34))
  {
    v29 = "::CLMicroLocationProto::TriggerRequestStatus_IsValid(value)";
    v30 = 21212;
    v31 = "set_requeststatus";
    goto LABEL_52;
  }
  *(_DWORD *)(a6 + 84) |= 0x200u;
  *(_DWORD *)(a6 + 60) = v21;
  CLMicroLocationProtobufHelper::convertRequestStatusToString((int *)&v34, &v36);
  *(_DWORD *)(a6 + 84) |= 0x20u;
  v22 = *(std::string **)(a6 + 40);
  if (v22 == v16)
  {
    v22 = (std::string *)operator new();
    v22->__r_.__value_.__r.__words[0] = 0;
    v22->__r_.__value_.__l.__size_ = 0;
    v22->__r_.__value_.__r.__words[2] = 0;
    *(_QWORD *)(a6 + 40) = v22;
  }
  std::string::operator=(v22, &v36);
  if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v36.__r_.__value_.__l.__data_);
  v23 = *(_BYTE *)(a1 + 132);
  *(_DWORD *)(a6 + 84) |= 0x80u;
  *(_BYTE *)(a6 + 29) = v23;
  if (*(_BYTE *)(a1 + 168))
  {
    memset(&__p, 0, sizeof(__p));
    if ((boost::conversion::detail::try_lexical_convert<std::string,boost::uuids::uuid>(a1 + 152, &__p) & 1) == 0)
    {
      std::bad_cast::bad_cast((std::bad_cast *)&v36);
      v36.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_2511D2C18;
      boost::throw_exception<boost::bad_lexical_cast>((uint64_t)&v36);
    }
    *(_DWORD *)(a6 + 84) |= 0x800u;
    v24 = *(std::string **)(a6 + 64);
    if (v24 == v16)
    {
      v24 = (std::string *)operator new();
      v24->__r_.__value_.__r.__words[0] = 0;
      v24->__r_.__value_.__l.__size_ = 0;
      v24->__r_.__value_.__r.__words[2] = 0;
      *(_QWORD *)(a6 + 64) = v24;
    }
    std::string::operator=(v24, &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  if ((*(_BYTE *)(a2 + 142) & 2) != 0)
  {
    v25 = (CLMicroLocationProto *)*(unsigned int *)(a2 + 124);
    if (CLMicroLocationProto::MotionState_IsValid(v25))
    {
      *(_DWORD *)(a6 + 84) |= 0x1000u;
      *(_DWORD *)(a6 + 76) = (_DWORD)v25;
      goto LABEL_44;
    }
    v29 = "::CLMicroLocationProto::MotionState_IsValid(value)";
    v30 = 21328;
    v31 = "set_motionstate";
LABEL_52:
    __assert_rtn(v31, "microlocation.pb.h", v30, v29);
  }
LABEL_44:
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
}

void sub_241AEFBFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,std::exception a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  CLMicroLocationProto::TriggerEvent *v27;

  std::exception::~exception(&a22);
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  CLMicroLocationProto::TriggerEvent::~TriggerEvent(v27);
  _Unwind_Resume(a1);
}

void CLMicroLocationProtobufHelper::createLoggedEvent<CLMicroLocationProto::TriggerEvent>(_OWORD *a1@<X0>, int *a2@<X1>, uint64_t a3@<X8>, double a4@<D0>)
{
  const CLMicroLocationProto::TriggerEvent *v8;
  _BYTE v9[304];

  CLMicroLocationProto::ReceivedEvent::ReceivedEvent((CLMicroLocationProto::ReceivedEvent *)v9);
  CLMicroLocationProtobufHelper::setSpecificLoggedEvent((CLMicroLocationProtobufHelper *)v9, (CLMicroLocationProto::ReceivedEvent *)a2, v8);
  CLMicroLocationLoggedEventsTable::Entry::Entry(a3, a1, a2[6], (CLMicroLocationProto::ReceivedEvent *)v9, a4);
  CLMicroLocationProto::ReceivedEvent::~ReceivedEvent((CLMicroLocationProto::ReceivedEvent *)v9);
}

void sub_241AEFCF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  CLMicroLocationProto::ReceivedEvent::~ReceivedEvent((CLMicroLocationProto::ReceivedEvent *)&a9);
  _Unwind_Resume(a1);
}

uint64_t CLMicroLocationTriggerManager::requestRecording(CLMicroLocationTriggerManager *this, const CLMicroLocationProto::RecordingEvent *a2)
{
  NSObject *v4;
  unsigned int v5;
  _QWORD *v6;
  const CLMicroLocationProto::RecordingEvent *v7;
  void *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  __int128 *v16;
  __int128 v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  double v22;
  uint64_t v23;
  void *__p[2];
  char v26;
  int v27;
  unsigned int v28;
  std::string buf;
  uint64_t v30;
  __int128 v31;
  char v32;
  uint64_t v33;

  v33 = *MEMORY[0x24BDAC8D0];
  if (onceToken_MicroLocation_Default != -1)
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_73);
  v4 = logObject_MicroLocation_Default;
  if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(buf.__r_.__value_.__l.__data_) = 0;
    _os_log_impl(&dword_2419D9000, v4, OS_LOG_TYPE_DEFAULT, "CLMicroLocationTriggerManager: requestRecording", (uint8_t *)&buf, 2u);
  }
  v28 = 0;
  if (CLMicroLocationTriggerManager::shouldReject(this, a2))
    v5 = 5;
  else
    v5 = 0;
  v28 = v5;
  objc_msgSend(MEMORY[0x24BDBCED8], "dictionary");
  v6 = (_QWORD *)objc_claimAutoreleasedReturnValue();
  v8 = v6;
  if (v28 == 5)
    goto LABEL_12;
  v9 = *((unsigned __int8 *)this + 8);
  if (v9 == 1)
    goto LABEL_34;
  if (v9 == 2)
  {
    v6 = (_QWORD *)(*(uint64_t (**)(_QWORD, const CLMicroLocationProto::RecordingEvent *, _QWORD))(**((_QWORD **)this + 24) + 24))(*((_QWORD *)this + 24), a2, 0);
    v28 = 1;
    goto LABEL_12;
  }
  if (*((_BYTE *)this + 186))
  {
LABEL_34:
    v18 = *((_QWORD *)this + 8);
    if (v18 >= *((_QWORD *)this + 9))
    {
      v19 = std::vector<CLMicroLocationProto::RecordingEvent>::__emplace_back_slow_path<CLMicroLocationProto::RecordingEvent const&>((uint64_t *)this + 7, a2);
    }
    else
    {
      CLMicroLocationProto::RecordingEvent::RecordingEvent(*((CLMicroLocationProto::RecordingEvent **)this + 8), a2);
      v19 = v18 + 144;
      *((_QWORD *)this + 8) = v18 + 144;
    }
    *((_QWORD *)this + 8) = v19;
    v14 = 2;
    v28 = 2;
    goto LABEL_38;
  }
  buf.__r_.__value_.__r.__words[0] = CLMicroLocationProtobufHelper::getEventReceivedTS(a2, v7);
  CLMicroLocationTriggerManager::startTrigger((uint64_t)this, a2, 2, &buf, v8, 0);
  if ((*((_BYTE *)a2 + 141) & 4) == 0)
    goto LABEL_16;
LABEL_12:
  v10 = *((_QWORD *)a2 + 11);
  if (!v10)
  {
    v6 = (_QWORD *)CLMicroLocationProto::RecordingEvent::default_instance((CLMicroLocationProto::RecordingEvent *)v6);
    v10 = v6[11];
  }
  if ((*(_BYTE *)(v10 + 44) & 4) != 0)
  {
    v15 = *((_QWORD *)a2 + 11);
    if (!v15)
      v15 = *(_QWORD *)(CLMicroLocationProto::RecordingEvent::default_instance((CLMicroLocationProto::RecordingEvent *)v6)
                      + 88);
    v16 = *(__int128 **)(v15 + 16);
    if (*((char *)v16 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&buf, *(const std::string::value_type **)v16, *((_QWORD *)v16 + 1));
    }
    else
    {
      v17 = *v16;
      buf.__r_.__value_.__r.__words[2] = *((_QWORD *)v16 + 2);
      *(_OWORD *)&buf.__r_.__value_.__l.__data_ = v17;
    }
  }
  else
  {
LABEL_16:
    std::string::basic_string[abi:ne180100]<0>(&buf, "");
  }
  v27 = 1;
  CLMicroLocationProtobufHelper::convertRequestTypeToString(&v27, __p);
  CLMicroLocationProtobufHelper::convertRequestStatusToString((int *)&v28, &v31);
  v11 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 24) + 104))(*((_QWORD *)this + 24));
  if (*((_DWORD *)this + 26) == 1 && (v12 = (uint64_t *)*((_QWORD *)this + 4)) != 0)
  {
    while (*((_DWORD *)v12 + 8) != 1)
    {
      v12 = (uint64_t *)*v12;
      if (!v12)
        goto LABEL_21;
    }
    v13 = ULSettings::get<ULSettings::PedestrianFenceEnabled>();
  }
  else
  {
LABEL_21:
    v13 = 0;
  }
  CLMicroLocationCoreAnalyticsPublishHelper::sendCommonTriggerEvent((uint64_t)a2, (uint64_t)__p, (uint64_t)&buf, (uint64_t)&v31, v11, v13, v8);
  if (v32 < 0)
    operator delete((void *)v31);
  if (v26 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
    operator delete(buf.__r_.__value_.__l.__data_);
  v14 = v28;
LABEL_38:
  CLMicroLocationTriggerManager::createTriggerEvent((uint64_t)this, (uint64_t)a2, 1u, 0, v14, (uint64_t)__p);
  v20 = *((_QWORD *)this + 24);
  v27 = 0;
  boost::uuids::detail::random_provider_base::random_provider_base((boost::uuids::detail::random_provider_base *)&v27);
  *(_QWORD *)&v31 = boost::uuids::random_generator_pure::operator()((uint64_t)&v27);
  *((_QWORD *)&v31 + 1) = v21;
  v22 = cl::chrono::CFAbsoluteTimeClock::now();
  CLMicroLocationProtobufHelper::createLoggedEvent<CLMicroLocationProto::TriggerEvent>(&v31, (int *)__p, (uint64_t)&buf, v22);
  (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v20 + 112))(v20, &buf);
  CLMicroLocationProto::ReceivedEvent::~ReceivedEvent((CLMicroLocationProto::ReceivedEvent *)&v30);
  boost::uuids::detail::random_provider_base::destroy((boost::uuids::detail::random_provider_base *)&v27);
  v23 = v28;
  CLMicroLocationProto::TriggerEvent::~TriggerEvent((CLMicroLocationProto::TriggerEvent *)__p);

  return v23;
}

void sub_241AF0080(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  void *v29;

  _Unwind_Resume(a1);
}

uint64_t CLMicroLocationTriggerManager::requestMotion(CLMicroLocationTriggerManager *this, uint64_t a2)
{
  uint64_t *v4;
  NSObject *v5;
  uint64_t v7;
  char v8;
  NSObject *v9;
  uint64_t *i;
  int v11;
  void *__p;
  __int16 v13;
  char v14;
  uint8_t buf[4];
  int v16;
  __int16 v17;
  const char *v18;
  __int16 v19;
  void **p_p;
  __int16 v21;
  _BOOL4 v22;
  __int16 v23;
  int v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  if (*((_DWORD *)this + 26) == 1)
  {
    v4 = (uint64_t *)*((_QWORD *)this + 4);
    if (v4)
    {
      while (*((_DWORD *)v4 + 8) != 1)
      {
        v4 = (uint64_t *)*v4;
        if (!v4)
          goto LABEL_5;
      }
      goto LABEL_6;
    }
  }
LABEL_5:
  if (ULSettings::get<ULSettings::PedestrianFenceWhenSpectatingEnabled>())
  {
LABEL_6:
    if (onceToken_MicroLocation_Default != -1)
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_73);
    v5 = logObject_MicroLocation_Default;
    if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 68289282;
      v16 = 0;
      v17 = 2082;
      v18 = "";
      v19 = 1026;
      LODWORD(p_p) = a2;
      _os_log_impl(&dword_2419D9000, v5, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLMicroLocationTriggerManager::requestMotion - setting fence\", \"onlyIfNotRunning\":%{public}hhd}", buf, 0x18u);
    }
    (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)this + 24) + 48))(*((_QWORD *)this + 24), a2);
    return 1;
  }
  if (*((_DWORD *)this + 26))
  {
    v13 = 31075;
    __p = *(void **)"LowLatency";
    v7 = 10;
    v8 = 10;
  }
  else
  {
    qmemcpy(&__p, "Legacy", 6);
    v7 = 6;
    v8 = 6;
  }
  *((_BYTE *)&__p + v7) = 0;
  v14 = v8;
  if (onceToken_MicroLocation_Default != -1)
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_73);
  v9 = (id)logObject_MicroLocation_Default;
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    for (i = (uint64_t *)*((_QWORD *)this + 4); i; i = (uint64_t *)*i)
    {
      if (*((_DWORD *)i + 8) == 1)
        break;
    }
    v11 = ULSettings::get<ULSettings::PedestrianFenceWhenSpectatingEnabled>();
    *(_DWORD *)buf = 68289794;
    v16 = 0;
    v17 = 2082;
    v18 = "";
    v19 = 2082;
    p_p = &__p;
    v21 = 1026;
    v22 = i != 0;
    v23 = 1026;
    v24 = v11;
    _os_log_impl(&dword_2419D9000, v9, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLMicroLocationTriggerManager::requestMotion, denied requestMotion\", \"Mode\":%{public, location:escape_only}s, \"isLowLatencyPolicyAvailable\":%{public}hhd, \"PedestrianFenceWhenSpectatingEnabled\":%{public}hhd}", buf, 0x28u);
  }

  *((_BYTE *)this + 186) = 0;
  if (v14 < 0)
    operator delete(__p);
  return 0;
}

void sub_241AF03A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;

  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_241AF0490(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void CLMicroLocationTriggerManager::onInMotion(CLMicroLocationTriggerManager *this)
{
  uint64_t v1;
  _DWORD *v2;
  _DWORD *v3;
  void *__p;
  void *v5;
  _DWORD *v6;
  void *v7;
  void *v8;
  _DWORD *v9;

  *((_BYTE *)this + 186) = 1;
  if (*((_BYTE *)this + 8) == 1)
  {
    v1 = *((_QWORD *)this + 24);
    v2 = operator new(4uLL);
    v7 = v2;
    *v2 = 2;
    v8 = v2 + 1;
    v9 = v2 + 1;
    v3 = operator new(4uLL);
    __p = v3;
    *v3 = 1;
    v5 = v3 + 1;
    v6 = v3 + 1;
    (*(void (**)(uint64_t, void **, void **))(*(_QWORD *)v1 + 96))(v1, &v7, &__p);
    if (__p)
    {
      v5 = __p;
      operator delete(__p);
    }
    if (v7)
    {
      v8 = v7;
      operator delete(v7);
    }
  }
}

void sub_241AF056C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  if (a12)
    operator delete(a12);
  _Unwind_Resume(exception_object);
}

uint64_t CLMicroLocationTriggerManager::onStopMotion(uint64_t this)
{
  *(_BYTE *)(this + 186) = 0;
  return this;
}

uint64_t CLMicroLocationTriggerManager::stopTrigger(uint64_t a1, int a2, CLMicroLocationProto *a3)
{
  int v3;
  NSObject *v7;
  void (***v8)(_QWORD);
  void (***v9)(_QWORD);
  void (***v10)(_QWORD);
  void (***v11)(_QWORD);
  void (**v12)(_QWORD);
  BOOL v13;
  uint64_t v14;
  void **v16[3];
  void ***v17;
  _BYTE buf[24];
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v3 = *(unsigned __int8 *)(a1 + 8);
  if (!*(_BYTE *)(a1 + 8))
    return 0;
  if (v3 == 1
    && *(_DWORD *)(a1 + 104) == 1
    && !*(_BYTE *)(a1 + 186)
    && (*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 192) + 104))(*(_QWORD *)(a1 + 192)))
  {
    (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 192) + 48))(*(_QWORD *)(a1 + 192), 0);
  }
  if (onceToken_MicroLocation_Default != -1)
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_73);
  v7 = logObject_MicroLocation_Default;
  if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 68289282;
    *(_DWORD *)&buf[4] = 0;
    *(_WORD *)&buf[8] = 2082;
    *(_QWORD *)&buf[10] = "";
    *(_WORD *)&buf[18] = 1026;
    *(_DWORD *)&buf[20] = (_DWORD)a3;
    _os_log_impl(&dword_2419D9000, v7, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"CLMicroLocationTriggerManager: stopTrigger\", \"Reason\":%{public}d}", buf, 0x18u);
  }
  *(_OWORD *)buf = *(_OWORD *)(a1 + 56);
  *(_QWORD *)&buf[16] = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  std::vector<CLMicroLocationProto::RecordingEvent>::__vdeallocate((void **)(a1 + 56));
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  memset(v16, 0, sizeof(v16));
  v17 = v16;
  std::vector<CLMicroLocationProto::RecordingEvent>::__destroy_vector::operator()[abi:ne180100]((void ***)&v17);
  *(_BYTE *)(a1 + 8) = 0;
  v9 = *(void (****)(_QWORD))(a1 + 56);
  v8 = *(void (****)(_QWORD))(a1 + 64);
  if (v8 != v9)
  {
    v10 = v8 - 18;
    v11 = v8 - 18;
    do
    {
      v12 = *v11;
      v11 -= 18;
      (*v12)(v10);
      v13 = v10 == v9;
      v10 = v11;
    }
    while (!v13);
  }
  *(_QWORD *)(a1 + 64) = v9;
  if (*(_BYTE *)(a1 + 188))
    *(_BYTE *)(a1 + 188) = 0;
  if (*(_BYTE *)(a1 + 151))
    *(_BYTE *)(a1 + 151) = 0;
  if (*(_BYTE *)(a1 + 168))
    *(_BYTE *)(a1 + 168) = 0;
  if (v3 == 2 && *(_BYTE *)(a1 + 133))
    (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 200) + 24))(*(_QWORD *)(a1 + 200));
  if (a2)
    v14 = CLMicroLocationTriggerManager::handleQueuedRecordingsIfNoRescheduledLocalization(a1, (const CLMicroLocationProto::RecordingEvent **)buf, a3);
  else
    v14 = 0;
  v16[0] = (void **)buf;
  std::vector<CLMicroLocationProto::RecordingEvent>::__destroy_vector::operator()[abi:ne180100](v16);
  return v14;
}

void sub_241AF07F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  a9 = (void **)&a13;
  std::vector<CLMicroLocationProto::RecordingEvent>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t CLMicroLocationTriggerManager::handleQueuedRecordingsIfNoRescheduledLocalization(uint64_t a1, const CLMicroLocationProto::RecordingEvent **a2, CLMicroLocationProto *a3)
{
  const CLMicroLocationProto::RecordingEvent *v3;
  CLMicroLocationProto::RecordingEvent *v4;
  uint64_t v6;
  char v9;
  uint64_t v10;
  uint64_t v11;
  double v12;
  boost::uuids::detail::random_provider_base *v13;
  uint64_t v14;
  uint64_t v15;
  double v16;
  int v17;
  int v18[22];
  CFAbsoluteTime v19;
  __int128 v20;
  _BYTE v21[32];
  _QWORD v22[39];

  v22[38] = *MEMORY[0x24BDAC8D0];
  v3 = *a2;
  v4 = a2[1];
  if (*a2 != v4)
  {
    if (!*(_BYTE *)(a1 + 9))
      return 0;
    if (*(_BYTE *)(a1 + 132) || *(_BYTE *)(a1 + 186))
    {
      v6 = a1 + 56;
      if ((const CLMicroLocationProto::RecordingEvent **)(a1 + 56) != a2)
        std::vector<CLMicroLocationProto::RecordingEvent>::__assign_with_size[abi:ne180100]<CLMicroLocationProto::RecordingEvent*,CLMicroLocationProto::RecordingEvent*>(v6, *a2, v4, 0x8E38E38E38E38E39 * ((v4 - v3) >> 4));
      return 0;
    }
    v9 = 1;
    do
    {
      if ((v9 & 1) != 0)
      {
        v19 = cl::chrono::CFAbsoluteTimeClock::now();
        CLMicroLocationTriggerManager::startTrigger(a1, v3, 2, &v19, 0, 0);
        CLMicroLocationTriggerManager::createTriggerEvent(a1, (uint64_t)v3, 1u, a3, 0, (uint64_t)v18);
        v10 = *(_QWORD *)(a1 + 192);
        v17 = 0;
        boost::uuids::detail::random_provider_base::random_provider_base((boost::uuids::detail::random_provider_base *)&v17);
        *(_QWORD *)&v20 = boost::uuids::random_generator_pure::operator()((uint64_t)&v17);
        *((_QWORD *)&v20 + 1) = v11;
        v12 = cl::chrono::CFAbsoluteTimeClock::now();
        CLMicroLocationProtobufHelper::createLoggedEvent<CLMicroLocationProto::TriggerEvent>(&v20, v18, (uint64_t)v21, v12);
        (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v10 + 112))(v10, v21);
        CLMicroLocationProto::ReceivedEvent::~ReceivedEvent((CLMicroLocationProto::ReceivedEvent *)v22);
        v13 = (boost::uuids::detail::random_provider_base *)&v17;
      }
      else
      {
        (*(void (**)(_QWORD, const CLMicroLocationProto::RecordingEvent *, _QWORD))(**(_QWORD **)(a1 + 192)
                                                                                             + 24))(*(_QWORD *)(a1 + 192), v3, 0);
        CLMicroLocationTriggerManager::createTriggerEvent(a1, (uint64_t)v3, 1u, a3, 1u, (uint64_t)v18);
        v14 = *(_QWORD *)(a1 + 192);
        LODWORD(v19) = 0;
        boost::uuids::detail::random_provider_base::random_provider_base((boost::uuids::detail::random_provider_base *)&v19);
        *(_QWORD *)&v20 = boost::uuids::random_generator_pure::operator()((uint64_t)&v19);
        *((_QWORD *)&v20 + 1) = v15;
        v16 = cl::chrono::CFAbsoluteTimeClock::now();
        CLMicroLocationProtobufHelper::createLoggedEvent<CLMicroLocationProto::TriggerEvent>(&v20, v18, (uint64_t)v21, v16);
        (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v14 + 112))(v14, v21);
        CLMicroLocationProto::ReceivedEvent::~ReceivedEvent((CLMicroLocationProto::ReceivedEvent *)v22);
        v13 = (boost::uuids::detail::random_provider_base *)&v19;
      }
      boost::uuids::detail::random_provider_base::destroy(v13);
      CLMicroLocationProto::TriggerEvent::~TriggerEvent((CLMicroLocationProto::TriggerEvent *)v18);
      v9 = 0;
      v3 = (const CLMicroLocationProto::RecordingEvent *)((char *)v3 + 144);
    }
    while (v3 != v4);
  }
  return 1;
}

void sub_241AF0A2C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  CLMicroLocationProto::TriggerEvent::~TriggerEvent((CLMicroLocationProto::TriggerEvent *)va);
  _Unwind_Resume(a1);
}

void CLMicroLocationTriggerManager::setSpectatingEnabled(CLMicroLocationTriggerManager *this, int a2)
{
  NSObject *v4;
  const char *v5;
  void (***v6)(_QWORD);
  void (***v7)(_QWORD);
  void (***v8)(_QWORD);
  void (***v9)(_QWORD);
  void (**v10)(_QWORD);
  BOOL v11;
  void (***v12)(_QWORD);
  void (***v13)(_QWORD);
  void (***v14)(_QWORD);
  void (***v15)(_QWORD);
  void (**v16)(_QWORD);
  _DWORD v17[2];
  __int16 v18;
  const char *v19;
  __int16 v20;
  const char *v21;
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  if (onceToken_MicroLocation_Default != -1)
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_73);
  v4 = logObject_MicroLocation_Default;
  if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
  {
    v5 = "No";
    v17[0] = 68289282;
    v17[1] = 0;
    v18 = 2082;
    v19 = "";
    if (a2)
      v5 = "Yes";
    v20 = 2082;
    v21 = v5;
    _os_log_impl(&dword_2419D9000, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLMicroLocationTriggerManager: setSpectatingEnabled\", \"spectatingEnabled\":%{public, location:escape_only}s}", (uint8_t *)v17, 0x1Cu);
  }
  *((_BYTE *)this + 9) = a2;
  if ((a2 & 1) != 0)
  {
    CLMicroLocationTriggerManager::startMotionIfNecessary((uint64_t)this);
  }
  else
  {
    if (*((_DWORD *)this + 26) == 1)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)this + 24) + 64))(*((_QWORD *)this + 24));
      (*(void (**)(_QWORD))(**((_QWORD **)this + 24) + 80))(*((_QWORD *)this + 24));
      *((_DWORD *)this + 26) = 0;
    }
    *((_BYTE *)this + 8) = 0;
    v7 = (void (***)(_QWORD))*((_QWORD *)this + 7);
    v6 = (void (***)(_QWORD))*((_QWORD *)this + 8);
    if (v6 != v7)
    {
      v8 = v6 - 18;
      v9 = v6 - 18;
      do
      {
        v10 = *v9;
        v9 -= 18;
        (*v10)(v8);
        v11 = v8 == v7;
        v8 = v9;
      }
      while (!v11);
    }
    *((_QWORD *)this + 8) = v7;
    if (*((_BYTE *)this + 188))
      *((_BYTE *)this + 188) = 0;
    *((_BYTE *)this + 132) = 0;
    if (*((_BYTE *)this + 185))
      *((_BYTE *)this + 185) = 0;
    v13 = (void (***)(_QWORD))*((_QWORD *)this + 10);
    v12 = (void (***)(_QWORD))*((_QWORD *)this + 11);
    if (v12 != v13)
    {
      v14 = v12 - 18;
      v15 = v12 - 18;
      do
      {
        v16 = *v15;
        v15 -= 18;
        (*v16)(v14);
        v11 = v14 == v13;
        v14 = v15;
      }
      while (!v11);
    }
    *((_QWORD *)this + 11) = v13;
    if (*((_BYTE *)this + 133))
      CLMiLoCustomLoiRecordingManager::stopRecordingSession(*((CLMiLoCustomLoiRecordingManager **)this + 25));
  }
}

uint64_t CLMicroLocationTriggerManager::startMotionIfNecessary(uint64_t this)
{
  uint64_t v1;
  uint64_t *v2;

  if (!*(_DWORD *)(this + 104))
  {
    v1 = this;
    v2 = *(uint64_t **)(this + 32);
    if (v2)
    {
      while (*((_DWORD *)v2 + 8) != 1)
      {
        v2 = (uint64_t *)*v2;
        if (!v2)
          return this;
      }
      this = ULSettings::get<ULSettings::PedestrianFenceEnabled>();
      if ((_DWORD)this)
      {
        *(_DWORD *)(v1 + 104) = 1;
        (*(void (**)(_QWORD))(**(_QWORD **)(v1 + 192) + 56))(*(_QWORD *)(v1 + 192));
        return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v1 + 192) + 72))(*(_QWORD *)(v1 + 192));
      }
    }
  }
  return this;
}

BOOL CLMicroLocationTriggerManager::isCurrentTriggerMotionTrigger(CLMicroLocationTriggerManager *this)
{
  return *((_BYTE *)this + 188) && *((_BYTE *)this + 187) != 0;
}

uint64_t CLMicroLocationTriggerManager::isCurrentlyInMotion(CLMicroLocationTriggerManager *this)
{
  return *((unsigned __int8 *)this + 186);
}

uint64_t CLMicroLocationTriggerManager::addPolicy(uint64_t a1, _QWORD *a2, _DWORD *a3)
{
  uint64_t v6;
  _OWORD *v8;

  v6 = a1 + 16;
  if (std::__hash_table<std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>>>::find<boost::uuids::uuid>((_QWORD *)(a1 + 16), a2))
  {
    return 0;
  }
  v8 = a2;
  *((_DWORD *)std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>>>::__emplace_unique_key_args<boost::uuids::uuid,std::piecewise_construct_t const&,std::tuple<boost::uuids::uuid const&>,std::tuple<>>(v6, a2, (uint64_t)&std::piecewise_construct, &v8)+ 8) = *a3;
  if (*(_BYTE *)(a1 + 133))
    return 0;
  CLMicroLocationTriggerManager::startMotionIfNecessary(a1);
  return 1;
}

BOOL CLMicroLocationTriggerManager::removePolicy(CLMicroLocationTriggerManager *this, uuid *a2)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t *v6;
  NSObject *v7;
  uint8_t v9[16];

  v4 = (_QWORD *)((char *)this + 16);
  v5 = std::__hash_table<std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>>>::find<boost::uuids::uuid>((_QWORD *)this + 2, a2);
  if (v5)
  {
    std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>>>::__erase_unique<boost::uuids::uuid>(v4, a2);
    if (*((_DWORD *)this + 26) == 1)
    {
      v6 = (uint64_t *)*((_QWORD *)this + 4);
      if (v6)
      {
        while (*((_DWORD *)v6 + 8) != 1)
        {
          v6 = (uint64_t *)*v6;
          if (!v6)
            goto LABEL_6;
        }
      }
      else
      {
LABEL_6:
        if ((ULSettings::get<ULSettings::PedestrianFenceWhenSpectatingEnabled>() & 1) == 0)
        {
          *((_DWORD *)this + 26) = 0;
          if (onceToken_MicroLocation_Default != -1)
            dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_73);
          v7 = logObject_MicroLocation_Default;
          if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEBUG))
          {
            *(_WORD *)v9 = 0;
            _os_log_impl(&dword_2419D9000, v7, OS_LOG_TYPE_DEBUG, "Stopping motion based triggers", v9, 2u);
          }
          (*(void (**)(_QWORD))(**((_QWORD **)this + 24) + 64))(*((_QWORD *)this + 24));
          (*(void (**)(_QWORD))(**((_QWORD **)this + 24) + 80))(*((_QWORD *)this + 24));
        }
      }
    }
    if (!*((_QWORD *)this + 5) && *((_BYTE *)this + 8))
      (*(void (**)(_QWORD))(**((_QWORD **)this + 24) + 40))(*((_QWORD *)this + 24));
  }
  return v5 != 0;
}

BOOL CLMicroLocationTriggerManager::isLowLatencyMode(CLMicroLocationTriggerManager *this)
{
  return *((_DWORD *)this + 26) == 1;
}

uint64_t CLMicroLocationTriggerManager::setMacAcPower(uint64_t this, char a2)
{
  *(_BYTE *)(this + 108) = a2;
  return this;
}

uint64_t CLMicroLocationTriggerManager::setMacExternalDisplay(uint64_t this, char a2)
{
  *(_BYTE *)(this + 109) = a2;
  return this;
}

uint64_t CLMicroLocationTriggerManager::setRescheduledTriggerLocalizationUUID(CLMicroLocationTriggerManager *this, const CLMicroLocationProto::RecordingEvent *a2)
{
  NSObject *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint8_t v10[16];
  _QWORD v11[2];
  char v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  CLMicroLocationProtobufHelper::getTriggerUuidFromEvent((uint64_t)a2, v11);
  if (!v12)
  {
    if (onceToken_MicroLocation_Default != -1)
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_73);
    v3 = logObject_MicroLocation_Default;
    if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v10 = 0;
      _os_log_impl(&dword_2419D9000, v3, OS_LOG_TYPE_ERROR, "Localization trigger does not have a valid trigger UUID", v10, 2u);
    }
  }
  *(_DWORD *)v10 = 0;
  boost::uuids::detail::random_provider_base::random_provider_base((boost::uuids::detail::random_provider_base *)v10);
  v4 = boost::uuids::random_generator_pure::operator()((uint64_t)v10);
  v7 = v11[0];
  v6 = v11[1];
  if (!v12)
  {
    v6 = v5;
    v7 = v4;
  }
  v8 = *((unsigned __int8 *)this + 185);
  *(_QWORD *)((char *)this + 169) = v7;
  *(_QWORD *)((char *)this + 177) = v6;
  if (!v8)
    *((_BYTE *)this + 185) = 1;
  return boost::uuids::detail::random_provider_base::destroy((boost::uuids::detail::random_provider_base *)v10);
}

void sub_241AF1004(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  boost::uuids::detail::random_provider_base::destroy((boost::uuids::detail::random_provider_base *)&a9);
  _Unwind_Resume(a1);
}

uint64_t CLMicroLocationTriggerManager::enumerateClientIdToTriggerType(uint64_t a1)
{
  unint64_t v1;
  _BYTE *v2;
  unint64_t v3;
  _BYTE *v4;
  _BYTE *v5;
  _BYTE *v6;
  uint64_t v7;
  int v8;
  int v9;
  _BYTE *v11;
  uint64_t v12;
  _BYTE *v13;
  _BYTE *v14;
  _BYTE *v15;
  uint64_t v16;
  int v17;
  int v18;
  uint64_t v19;
  _BYTE *v20;
  _BYTE *v21;
  _BYTE *v22;
  uint64_t v23;
  int v24;
  int v25;
  uint64_t v26;
  _BYTE *v27;
  _BYTE *v28;
  _BYTE *v29;
  uint64_t v30;
  int v31;
  int v32;
  uint64_t v33;
  _BYTE *v34;
  _BYTE *v35;
  _BYTE *v36;
  uint64_t v37;
  int v38;
  int v39;
  uint64_t v40;
  _BYTE *v41;
  _BYTE *v42;
  _BYTE *v43;
  uint64_t v44;
  int v45;
  int v46;
  uint64_t v47;
  _BYTE *v48;
  _BYTE *v49;
  _BYTE *v50;
  uint64_t v51;
  int v52;
  int v53;

  v1 = *(unsigned __int8 *)(a1 + 23);
  if ((*(char *)(a1 + 23) & 0x80000000) == 0)
  {
    if (*(_BYTE *)(a1 + 23))
    {
      v2 = (_BYTE *)a1;
      v3 = *(unsigned __int8 *)(a1 + 23);
      goto LABEL_6;
    }
    return 255;
  }
  v3 = *(_QWORD *)(a1 + 8);
  if (!v3)
    return 255;
  v2 = *(_BYTE **)a1;
LABEL_6:
  if (v3 >= 0x2D)
    v3 = 45;
  v4 = &v2[v3];
  v5 = v2;
  v6 = v4;
  do
  {
    if (*v5 == 109)
    {
      v7 = 1u;
      while (v7 != 45)
      {
        if (&v5[v7] == v4)
          goto LABEL_18;
        v8 = v5[v7];
        v9 = aMiloInternalLe[v7++];
        if (v8 != v9)
          goto LABEL_10;
      }
      v6 = v5;
    }
LABEL_10:
    ++v5;
  }
  while (v5 != v4);
LABEL_18:
  if (v6 != v4 && v6 == v2)
    return 0;
  if ((v1 & 0x80u) == 0)
    v11 = (_BYTE *)a1;
  else
    v11 = *(_BYTE **)a1;
  if ((v1 & 0x80u) != 0)
    v1 = *(_QWORD *)(a1 + 8);
  v12 = 20;
  if (v1 < 0x14)
    v12 = v1;
  if (v12)
  {
    v13 = &v11[v12];
    v14 = v11;
    v15 = v13;
    do
    {
      if (*v14 == 73)
      {
        v16 = 1u;
        while (v16 != 20)
        {
          if (&v14[v16] == v13)
            goto LABEL_40;
          v17 = v14[v16];
          v18 = kMotionInternalClientBundleId[v16++];
          if (v17 != v18)
            goto LABEL_32;
        }
        v15 = v14;
      }
LABEL_32:
      ++v14;
    }
    while (v14 != v13);
LABEL_40:
    if (v15 != v13 && v15 == v11)
      return 1;
  }
  v19 = 17;
  if (v1 < 0x11)
    v19 = v1;
  if (v19)
  {
    v20 = &v11[v19];
    v21 = v11;
    v22 = v20;
    do
    {
      if (*v21 == 73)
      {
        v23 = 1u;
        while (v23 != 17)
        {
          if (&v21[v23] == v20)
            goto LABEL_56;
          v24 = v21[v23];
          v25 = kMacInternalClientBundleId[v23++];
          if (v24 != v25)
            goto LABEL_48;
        }
        v22 = v21;
      }
LABEL_48:
      ++v21;
    }
    while (v21 != v20);
LABEL_56:
    if (v22 != v20 && v22 == v11)
      return 2;
  }
  v26 = 19;
  if (v1 < 0x13)
    v26 = v1;
  if (v26)
  {
    v27 = &v11[v26];
    v28 = v11;
    v29 = v27;
    do
    {
      if (*v28 == 73)
      {
        v30 = 1u;
        while (v30 != 19)
        {
          if (&v28[v30] == v27)
            goto LABEL_71;
          v31 = v28[v30];
          v32 = kLogicInternalClientBundleId[v30++];
          if (v31 != v32)
            goto LABEL_63;
        }
        v29 = v28;
      }
LABEL_63:
      ++v28;
    }
    while (v28 != v27);
LABEL_71:
    if (v29 != v27 && v29 == v11)
      return 3;
  }
  v33 = 30;
  if (v1 < 0x1E)
    v33 = v1;
  if (v33)
  {
    v34 = &v11[v33];
    v35 = v11;
    v36 = v34;
    do
    {
      if (*v35 == 73)
      {
        v37 = 1u;
        while (v37 != 30)
        {
          if (&v35[v37] == v34)
            goto LABEL_87;
          v38 = v35[v37];
          v39 = kScreenOnFallBackInternalClientBundleId[v37++];
          if (v38 != v39)
            goto LABEL_79;
        }
        v36 = v35;
      }
LABEL_79:
      ++v35;
    }
    while (v35 != v34);
LABEL_87:
    if (v36 != v34 && v36 == v11)
      return 2;
  }
  v40 = 26;
  if (v1 < 0x1A)
    v40 = v1;
  if (!v40)
    goto LABEL_105;
  v41 = &v11[v40];
  v42 = v11;
  v43 = v41;
  do
  {
    if (*v42 == 73)
    {
      v44 = 1u;
      while (v44 != 26)
      {
        if (&v42[v44] == v41)
          goto LABEL_102;
        v45 = v42[v44];
        v46 = kScreenUnlockInternalClientBundleId[v44++];
        if (v45 != v46)
          goto LABEL_94;
      }
      v43 = v42;
    }
LABEL_94:
    ++v42;
  }
  while (v42 != v41);
LABEL_102:
  if (v43 != v41 && v43 == v11)
    return 2;
LABEL_105:
  v47 = 10;
  if (v1 < 0xA)
    v47 = v1;
  v48 = &v11[v47];
  if (v47)
  {
    v49 = v11;
    v50 = &v11[v47];
    do
    {
      if (*v49 == 102)
      {
        v51 = 1u;
        while (v51 != 10)
        {
          if (&v49[v51] == v48)
            goto LABEL_119;
          v52 = v49[v51];
          v53 = aFocusMode[v51++];
          if (v52 != v53)
            goto LABEL_110;
        }
        v50 = v49;
      }
LABEL_110:
      ++v49;
    }
    while (v49 != v48);
  }
  else
  {
    v50 = v11;
  }
LABEL_119:
  if (v50 != v11 || v50 == v48)
    return 4;
  else
    return 0;
}

void CLMicroLocationTriggerManager::startRecording(CLMicroLocationTriggerManager *this)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  double v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  uint64_t *v11;
  uint64_t v12;
  unint64_t v13;
  NSObject *v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  CLMacAddress v19;
  _DWORD v20[32];
  uint64_t v21;
  int v22;
  _BYTE v23[12];
  int v24;
  _QWORD *v25;
  _QWORD *v26;
  int v27;
  uint8_t buf[8];
  __int16 v29;
  const char *v30;
  __int16 v31;
  uint64_t v32;
  __int16 v33;
  double v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  v37 = *MEMORY[0x24BDAC8D0];
  CLMicroLocationProto::RecordingRequest::RecordingRequest((CLMicroLocationProto::RecordingRequest *)v23);
  v27 |= 4u;
  v2 = (_QWORD *)MEMORY[0x24BEDD958];
  if (v25 == (_QWORD *)MEMORY[0x24BEDD958])
  {
    v3 = (_QWORD *)operator new();
    *v3 = 0;
    v3[1] = 0;
    v3[2] = 0;
    v25 = v3;
  }
  MEMORY[0x2426A02C4]();
  if (!CLMicroLocationProto::RecordingRequestType_IsValid((CLMicroLocationProto *)1))
    __assert_rtn("set_recordingrequesttype", "microlocation.pb.h", 13554, "::CLMicroLocationProto::RecordingRequestType_IsValid(value)");
  v27 |= 2u;
  v24 = 1;
  v35 = 0;
  v36 = 0;
  v20[0] = 0;
  boost::uuids::detail::random_provider_base::random_provider_base((boost::uuids::detail::random_provider_base *)v20);
  v35 = boost::uuids::random_generator_pure::operator()((uint64_t)v20);
  v36 = v4;
  boost::uuids::detail::random_provider_base::destroy((boost::uuids::detail::random_provider_base *)v20);
  v27 |= 8u;
  if (v26 == v2)
  {
    v5 = (_QWORD *)operator new();
    *v5 = 0;
    v5[1] = 0;
    v5[2] = 0;
    v26 = v5;
  }
  MEMORY[0x2426A02D0]();
  v6 = cl::chrono::CFAbsoluteTimeClock::now();
  CLMicroLocationProtobufHelper::createRecordingEvent<CLMicroLocationProto::RecordingRequest>((CLMicroLocationProto::RecordingEvent *)v23, 0, 0, 0, (CLMicroLocationProto *)3, (uint64_t)v20, v6);
  if (*((_BYTE *)this + 133))
  {
    if ((*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 24) + 160))(*((_QWORD *)this + 24)))
    {
      (*(void (**)(_QWORD))(**((_QWORD **)this + 24) + 168))(*((_QWORD *)this + 24));
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      v22 |= 0x10000u;
      v8 = v21;
      if (!v21)
      {
        v8 = operator new();
        CLMicroLocationProto::AssociatedAccessPointInfo::AssociatedAccessPointInfo(v8);
        v21 = v8;
      }
      v9 = objc_msgSend(v7, "RSSI");
      *(_DWORD *)(v8 + 24) |= 2u;
      *(float *)(v8 + 16) = (float)v9;
      objc_msgSend(v7, "BSSID");
      v10 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
      v11 = std::string::basic_string[abi:ne180100]<0>(buf, (char *)objc_msgSend(v10, "UTF8String"));
      v19.var0 = CLMacAddress::newFromCLStr(v11);
      if (SBYTE3(v32) < 0)
        operator delete(*(void **)buf);

      v22 |= 0x10000u;
      v12 = v21;
      if (!v21)
      {
        v12 = operator new();
        CLMicroLocationProto::AssociatedAccessPointInfo::AssociatedAccessPointInfo(v12);
        v21 = v12;
      }
      v13 = CLMacAddress::toUint64(&v19);
      *(_DWORD *)(v12 + 24) |= 1u;
      *(_QWORD *)(v12 + 8) = v13;
      if (onceToken_MicroLocation_Default != -1)
        dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_73);
      v14 = (id)logObject_MicroLocation_Default;
      if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
      {
        objc_msgSend(v7, "BSSID");
        v15 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
        v16 = objc_msgSend(v15, "UTF8String");
        v17 = objc_msgSend(v7, "RSSI");
        *(_QWORD *)buf = 68289539;
        v29 = 2082;
        v30 = "";
        v31 = 2081;
        v32 = v16;
        v33 = 2050;
        v34 = (float)v17;
        _os_log_impl(&dword_2419D9000, v14, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLMicroLocationTriggerManager, set associated AP for a recording event\", \"MAC Address\":%{private, location:escape_only}s, \"Rssi\":\"%{public}f\"}", buf, 0x26u);

      }
    }
    else
    {
      if (onceToken_MicroLocation_Default != -1)
        dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_73);
      v18 = logObject_MicroLocation_Default;
      if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
      {
        *(_QWORD *)buf = 68289026;
        v29 = 2082;
        v30 = "";
        _os_log_impl(&dword_2419D9000, v18, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLMicroLocationTriggerManager, set associated AP for a recording event failed, not associated\"}", buf, 0x12u);
      }
    }
  }
  CLMicroLocationTriggerManager::requestRecording(this, (const CLMicroLocationProto::RecordingEvent *)v20);
  CLMicroLocationProto::RecordingEvent::~RecordingEvent((CLMicroLocationProto::RecordingEvent *)v20);
  CLMicroLocationProto::RecordingRequest::~RecordingRequest((CLMicroLocationProto::RecordingRequest *)v23);
}

void sub_241AF1870(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  void *v29;
  uint64_t v30;

  MEMORY[0x2426A04D4](v30, 0x1081C40DCAC275BLL);

  CLMicroLocationProto::RecordingEvent::~RecordingEvent((CLMicroLocationProto::RecordingEvent *)&a11);
  CLMicroLocationProto::RecordingRequest::~RecordingRequest((CLMicroLocationProto::RecordingRequest *)&a29);
  _Unwind_Resume(a1);
}

uint64_t CLMicroLocationTriggerManager::setRecordingFence(CLMicroLocationTriggerManager *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 24) + 136))(*((_QWORD *)this + 24));
}

uint64_t CLMicroLocationTriggerManager::clearRecordingFence(CLMicroLocationTriggerManager *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 24) + 144))(*((_QWORD *)this + 24));
}

uint64_t CLMicroLocationTriggerManager::exitCustomLoiRecordingSession(CLMicroLocationTriggerManager *this)
{
  *((_BYTE *)this + 133) = 0;
  (*(void (**)(_QWORD))(**((_QWORD **)this + 24) + 128))(*((_QWORD *)this + 24));
  (*(void (**)(_QWORD))(**((_QWORD **)this + 24) + 152))(*((_QWORD *)this + 24));
  CLMicroLocationTriggerManager::startMotionIfNecessary((uint64_t)this);
  if (*((_BYTE *)this + 134))
    CLMicroLocationTriggerManager::handleDisplayOn(this);
  return *((unsigned __int8 *)this + 133);
}

uint64_t CLMicroLocationTriggerManager::setCurrentLocalizationUUID(CLMicroLocationTriggerManager *this, const CLMicroLocationProto::RecordingEvent *a2)
{
  NSObject *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint8_t v10[16];
  _QWORD v11[2];
  char v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  CLMicroLocationProtobufHelper::getTriggerUuidFromEvent((uint64_t)a2, v11);
  if (!v12)
  {
    if (onceToken_MicroLocation_Default != -1)
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_73);
    v3 = logObject_MicroLocation_Default;
    if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v10 = 0;
      _os_log_impl(&dword_2419D9000, v3, OS_LOG_TYPE_ERROR, "Localization trigger does not have a valid trigger UUID", v10, 2u);
    }
  }
  *(_DWORD *)v10 = 0;
  boost::uuids::detail::random_provider_base::random_provider_base((boost::uuids::detail::random_provider_base *)v10);
  v4 = boost::uuids::random_generator_pure::operator()((uint64_t)v10);
  v7 = v11[0];
  v6 = v11[1];
  if (!v12)
  {
    v6 = v5;
    v7 = v4;
  }
  v8 = *((unsigned __int8 *)this + 151);
  *(_QWORD *)((char *)this + 135) = v7;
  *(_QWORD *)((char *)this + 143) = v6;
  if (!v8)
    *((_BYTE *)this + 151) = 1;
  return boost::uuids::detail::random_provider_base::destroy((boost::uuids::detail::random_provider_base *)v10);
}

void sub_241AF1AC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  boost::uuids::detail::random_provider_base::destroy((boost::uuids::detail::random_provider_base *)&a9);
  _Unwind_Resume(a1);
}

uint64_t CLMicroLocationTriggerManager::startCustomLoiRecordingSession(CLMicroLocationTriggerManager *this)
{
  *((_BYTE *)this + 133) = 1;
  if (*((_DWORD *)this + 26) == 1)
  {
    (*(void (**)(_QWORD))(**((_QWORD **)this + 24) + 64))(*((_QWORD *)this + 24));
    (*(void (**)(_QWORD))(**((_QWORD **)this + 24) + 80))(*((_QWORD *)this + 24));
    *((_DWORD *)this + 26) = 0;
  }
  if (*((_BYTE *)this + 8) == 1)
    (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)this + 24) + 40))(*((_QWORD *)this + 24), 1);
  (*(void (**)(_QWORD))(**((_QWORD **)this + 24) + 120))(*((_QWORD *)this + 24));
  (*(void (**)(_QWORD))(**((_QWORD **)this + 25) + 16))(*((_QWORD *)this + 25));
  CLMiLoCustomLoiRecordingManager::deviceScreenState(*((CLMiLoCustomLoiRecordingManager **)this + 25), *((_BYTE *)this + 134));
  return *((unsigned __int8 *)this + 133);
}

uint64_t CLMicroLocationTriggerManager::handleQueuedLocalizations(uint64_t a1, _QWORD *a2, int a3)
{
  int v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v10;
  void (***v11)(_QWORD);
  void (***v12)(_QWORD);
  void (***v13)(_QWORD);
  void (***v14)(_QWORD);
  void (**v15)(_QWORD);
  BOOL v16;
  uint64_t v17;
  unsigned int v18;
  _QWORD *v19;
  int v20;
  uint64_t v21;
  uint8_t buf[4];
  int v23;
  __int16 v24;
  const char *v25;
  uint64_t v26;

  v26 = *MEMORY[0x24BDAC8D0];
  if (*a2 != a2[1])
  {
    if (!*(_BYTE *)(a1 + 9))
      return 0;
    v19 = a2;
    v20 = a3;
    v21 = a1;
    v5 = *(unsigned __int8 *)(a1 + 8);
    if (*(_BYTE *)(a1 + 8))
    {
      if (v5 != 2)
      {
        if (v5 == 1)
        {
          if (onceToken_MicroLocation_Default != -1)
            dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_73);
          v6 = logObject_MicroLocation_Default;
          if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 68289026;
            v23 = 0;
            v24 = 2082;
            v25 = "";
            _os_log_impl(&dword_2419D9000, v6, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"handeling rescheduled localizations while localizing, shouldn't happen\"}", buf, 0x12u);
          }
          v8 = *a2;
          v7 = a2[1];
          while (v8 != v7)
          {
            (*(void (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)(a1 + 192) + 24))(*(_QWORD *)(a1 + 192), v8, 0);
            v8 += 144;
          }
        }
        return 1;
      }
      if (onceToken_MicroLocation_Default != -1)
        dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_73);
      v10 = logObject_MicroLocation_Default;
      if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 68289026;
        v23 = 0;
        v24 = 2082;
        v25 = "";
        _os_log_impl(&dword_2419D9000, v10, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"handeling rescheduled localizations while recording, shouldn't happen\"}", buf, 0x12u);
      }
      v12 = *(void (****)(_QWORD))(a1 + 56);
      v11 = *(void (****)(_QWORD))(a1 + 64);
      if (v11 != v12)
      {
        v13 = v11 - 18;
        v14 = v11 - 18;
        do
        {
          v15 = *v14;
          v14 -= 18;
          (*v15)(v13);
          v16 = v13 == v12;
          v13 = v14;
        }
        while (!v16);
      }
      v18 = *(unsigned __int8 *)(a1 + 8);
      v17 = a1 + 8;
      *(_QWORD *)(v17 + 56) = v12;
      (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(v17 + 184) + 40))(*(_QWORD *)(v17 + 184), v18);
      *(_BYTE *)v17 = 0;
    }
    CLMicroLocationTriggerManager::handleQueuedLocalizations(std::vector<CLMicroLocationProto::RecordingEvent> &,CLMicroLocationProto::TriggerReason)::$_0::operator()((uint64_t)&v19);
  }
  return 1;
}

void CLMicroLocationTriggerManager::handleQueuedLocalizations(std::vector<CLMicroLocationProto::RecordingEvent> &,CLMicroLocationProto::TriggerReason)::$_0::operator()(uint64_t a1)
{
  const CLMicroLocationProto::RecordingEvent *v1;
  const CLMicroLocationProto::RecordingEvent *v2;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  double v8;
  int v9;
  int v10[22];
  __int128 v11;
  _QWORD v12[4];
  _QWORD v13[39];

  v13[38] = *MEMORY[0x24BDAC8D0];
  v1 = **(const CLMicroLocationProto::RecordingEvent ***)a1;
  v2 = *(const CLMicroLocationProto::RecordingEvent **)(*(_QWORD *)a1 + 8);
  if (v1 != v2)
  {
    v4 = *(_QWORD *)(a1 + 16);
    v5 = 1;
    do
    {
      if ((v5 & 1) != 0)
      {
        v12[0] = cl::chrono::CFAbsoluteTimeClock::now();
        CLMicroLocationTriggerManager::startTrigger(v4, v1, 1, v12, 0, 0);
        CLMicroLocationTriggerManager::createTriggerEvent(v4, (uint64_t)v1, 0, (CLMicroLocationProto *)*(unsigned int *)(a1 + 8), 0, (uint64_t)v10);
      }
      else
      {
        (*(void (**)(_QWORD, const CLMicroLocationProto::RecordingEvent *, _QWORD))(**(_QWORD **)(v4 + 192)
                                                                                             + 24))(*(_QWORD *)(v4 + 192), v1, 0);
        CLMicroLocationTriggerManager::createTriggerEvent(v4, (uint64_t)v1, 0, (CLMicroLocationProto *)*(unsigned int *)(a1 + 8), 1u, (uint64_t)v10);
      }
      v6 = *(_QWORD *)(v4 + 192);
      v9 = 0;
      boost::uuids::detail::random_provider_base::random_provider_base((boost::uuids::detail::random_provider_base *)&v9);
      *(_QWORD *)&v11 = boost::uuids::random_generator_pure::operator()((uint64_t)&v9);
      *((_QWORD *)&v11 + 1) = v7;
      v8 = cl::chrono::CFAbsoluteTimeClock::now();
      CLMicroLocationProtobufHelper::createLoggedEvent<CLMicroLocationProto::TriggerEvent>(&v11, v10, (uint64_t)v12, v8);
      (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v6 + 112))(v6, v12);
      CLMicroLocationProto::ReceivedEvent::~ReceivedEvent((CLMicroLocationProto::ReceivedEvent *)v13);
      boost::uuids::detail::random_provider_base::destroy((boost::uuids::detail::random_provider_base *)&v9);
      CLMicroLocationProto::TriggerEvent::~TriggerEvent((CLMicroLocationProto::TriggerEvent *)v10);
      v5 = 0;
      v1 = (const CLMicroLocationProto::RecordingEvent *)((char *)v1 + 144);
    }
    while (v1 != v2);
  }
}

void sub_241AF1F70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, char a11, __int16 a12, char a13, char a14)
{
  CLMicroLocationProto::ReceivedEvent *v14;

  CLMicroLocationProto::ReceivedEvent::~ReceivedEvent(v14);
  boost::uuids::detail::random_provider_base::destroy((boost::uuids::detail::random_provider_base *)&a11);
  CLMicroLocationProto::TriggerEvent::~TriggerEvent((CLMicroLocationProto::TriggerEvent *)&a13);
  _Unwind_Resume(a1);
}

void CLMicroLocationTriggerManager::triggerFallbackLocalizationEvent(CLMicroLocationTriggerManager *this, const CLMicroLocationProto::RecordingEvent *a2)
{
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  int v8;
  int v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  double v14;
  double v15;
  const CLMicroLocationProto::RecordingEvent *v16;
  double EventReceivedTS;
  double v18;
  NSObject *v19;
  double v20;
  NSObject *v21;
  double v22;
  NSObject *v23;
  double v24;
  int v25;
  int v26;
  __int16 v27;
  const char *v28;
  __int16 v29;
  double v30;
  __int16 v31;
  double v32;
  uint64_t v33;

  v33 = *MEMORY[0x24BDAC8D0];
  +[ULDefaultsSingleton shared](ULDefaultsSingleton, "shared");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "defaultsDictionary");
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "ULEnableInternalFallbackLocalization");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "objectForKey:", v6);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  if (v7 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
    v8 = objc_msgSend(v7, "BOOLValue");
  else
    v8 = objc_msgSend(MEMORY[0x24BDBD1C8], "BOOLValue");
  v9 = v8;

  if (v9 && *((_DWORD *)this + 26) == 1)
  {
    +[ULDefaultsSingleton shared](ULDefaultsSingleton, "shared");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "defaultsDictionary");
    v11 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "ULMaxDurationBetweenLocalizationTriggers");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "objectForKey:", v12);
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    if (v13 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
      objc_msgSend(v13, "doubleValue");
    else
      objc_msgSend(&unk_2511EDCA8, "doubleValue");
    v15 = v14;

    EventReceivedTS = CLMicroLocationProtobufHelper::getEventReceivedTS(a2, v16);
    v18 = *((double *)this + 15);
    if (EventReceivedTS >= v18)
    {
      if (EventReceivedTS - v18 < v15)
        return;
    }
    else
    {
      if (onceToken_MicroLocation_Default != -1)
        dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_73);
      v19 = logObject_MicroLocation_Default;
      if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_ERROR))
      {
        v20 = *((double *)this + 15);
        v25 = 68289538;
        v26 = 0;
        v27 = 2082;
        v28 = "";
        v29 = 2050;
        v30 = EventReceivedTS;
        v31 = 2050;
        v32 = v20;
        _os_log_impl(&dword_2419D9000, v19, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"triggerFallbackLocalizationEvent: fLastTrigger is in the past\", \"triggerTS\":\"%{public}.3f\", \"fLastLocalizationTriggerTS\":\"%{public}.3f\"}", (uint8_t *)&v25, 0x26u);
      }
      if (onceToken_MicroLocation_Default != -1)
        dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_73);
      v21 = logObject_MicroLocation_Default;
      if (os_signpost_enabled((os_log_t)logObject_MicroLocation_Default))
      {
        v22 = *((double *)this + 15);
        v25 = 68289538;
        v26 = 0;
        v27 = 2082;
        v28 = "";
        v29 = 2050;
        v30 = EventReceivedTS;
        v31 = 2050;
        v32 = v22;
        _os_signpost_emit_with_name_impl(&dword_2419D9000, v21, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "triggerFallbackLocalizationEvent: fLastTrigger is in the past", "{\"msg%{public}.0s\":\"triggerFallbackLocalizationEvent: fLastTrigger is in the past\", \"triggerTS\":\"%{public}.3f\", \"fLastLocalizationTriggerTS\":\"%{public}.3f\"}", (uint8_t *)&v25, 0x26u);
      }
    }
    if (onceToken_MicroLocation_Default != -1)
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_73);
    v23 = logObject_MicroLocation_Default;
    if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
    {
      v24 = EventReceivedTS - *((double *)this + 15);
      v25 = 68289538;
      v26 = 0;
      v27 = 2082;
      v28 = "";
      v29 = 2050;
      v30 = v15;
      v31 = 2050;
      v32 = v24;
      _os_log_impl(&dword_2419D9000, v23, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"triggerFallbackLocalizationEvent: requesting localization on screen on because we haven't localized for more than \", \"Max time between localizations\":\"%{public}f\", \"Time since last_s\":\"%{public}.09f\"}", (uint8_t *)&v25, 0x26u);
    }
    CLMicroLocationTriggerManager::requestLocalization((uint64_t)this, a2, 1, 0, 0);
  }
}

void sub_241AF2390(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_241AF23E4()
{
  JUMPOUT(0x241AF23DCLL);
}

uint64_t CLMicroLocationTriggerManager::triggerScreenUnlockLocalizationIfNeeded(CLMicroLocationTriggerManager *this, const CLMicroLocationProto::RecordingEvent *a2)
{
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  int v8;
  int v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  double v14;
  double v15;
  const CLMicroLocationProto::RecordingEvent *v16;
  double EventReceivedTS;
  double v18;
  NSObject *v19;
  double v20;
  NSObject *v21;
  double v22;
  NSObject *v23;
  double v24;
  NSObject *v26;
  double v27;
  int v28;
  int v29;
  __int16 v30;
  const char *v31;
  __int16 v32;
  double v33;
  __int16 v34;
  double v35;
  uint64_t v36;

  v36 = *MEMORY[0x24BDAC8D0];
  +[ULDefaultsSingleton shared](ULDefaultsSingleton, "shared");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "defaultsDictionary");
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "ULEnableScreenUnlockLocalization");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "objectForKey:", v6);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  if (v7 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
    v8 = objc_msgSend(v7, "BOOLValue");
  else
    v8 = objc_msgSend(MEMORY[0x24BDBD1C8], "BOOLValue");
  v9 = v8;

  if (!v9 || !*((_BYTE *)this + 9) || *((_DWORD *)this + 26) != 1)
    return 5;
  +[ULDefaultsSingleton shared](ULDefaultsSingleton, "shared");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "defaultsDictionary");
  v11 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "ULMinDurationForScreenUnlockSinceLastLocalization");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v11, "objectForKey:", v12);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  if (v13 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
    objc_msgSend(v13, "doubleValue");
  else
    objc_msgSend(&unk_2511EDC78, "doubleValue");
  v15 = v14;

  EventReceivedTS = CLMicroLocationProtobufHelper::getEventReceivedTS(a2, v16);
  v18 = *((double *)this + 15);
  if (EventReceivedTS < v18)
  {
    if (onceToken_MicroLocation_Default != -1)
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_73);
    v19 = logObject_MicroLocation_Default;
    if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_ERROR))
    {
      v20 = *((double *)this + 15);
      v28 = 68289538;
      v29 = 0;
      v30 = 2082;
      v31 = "";
      v32 = 2050;
      v33 = EventReceivedTS;
      v34 = 2050;
      v35 = v20;
      _os_log_impl(&dword_2419D9000, v19, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"triggerScreenUnlockLocalizationIfNeeded, fLastTrigger is in the past\", \"triggerTS\":\"%{public}.3f\", \"fLastLocalizationTriggerTS\":\"%{public}.3f\"}", (uint8_t *)&v28, 0x26u);
    }
    if (onceToken_MicroLocation_Default != -1)
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_73);
    v21 = logObject_MicroLocation_Default;
    if (os_signpost_enabled((os_log_t)logObject_MicroLocation_Default))
    {
      v22 = *((double *)this + 15);
      v28 = 68289538;
      v29 = 0;
      v30 = 2082;
      v31 = "";
      v32 = 2050;
      v33 = EventReceivedTS;
      v34 = 2050;
      v35 = v22;
      _os_signpost_emit_with_name_impl(&dword_2419D9000, v21, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "triggerScreenUnlockLocalizationIfNeeded, fLastTrigger is in the past", "{\"msg%{public}.0s\":\"triggerScreenUnlockLocalizationIfNeeded, fLastTrigger is in the past\", \"triggerTS\":\"%{public}.3f\", \"fLastLocalizationTriggerTS\":\"%{public}.3f\"}", (uint8_t *)&v28, 0x26u);
    }
    goto LABEL_22;
  }
  if (EventReceivedTS - v18 < v15)
  {
    if (onceToken_MicroLocation_Default != -1)
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_73);
    v26 = logObject_MicroLocation_Default;
    if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_INFO))
    {
      v27 = EventReceivedTS - *((double *)this + 15);
      v28 = 68289282;
      v29 = 0;
      v30 = 2082;
      v31 = "";
      v32 = 2050;
      v33 = v27;
      _os_log_impl(&dword_2419D9000, v26, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"triggerScreenUnlockLocalizationIfNeeded, will not localize because too close to last localization\", \"Time since last_s\":\"%{public}.09f\"}", (uint8_t *)&v28, 0x1Cu);
    }
    return 5;
  }
LABEL_22:
  if (onceToken_MicroLocation_Default != -1)
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_73);
  v23 = logObject_MicroLocation_Default;
  if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
  {
    v24 = EventReceivedTS - *((double *)this + 15);
    v28 = 68289538;
    v29 = 0;
    v30 = 2082;
    v31 = "";
    v32 = 2050;
    v33 = v15;
    v34 = 2050;
    v35 = v24;
    _os_log_impl(&dword_2419D9000, v23, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"triggerScreenUnlockLocalizationIfNeeded, requesting localization on screen unlock\", \"Minimum duration since last localization\":\"%{public}f\", \"Time since last_s\":\"%{public}.09f\"}", (uint8_t *)&v28, 0x26u);
  }
  return CLMicroLocationTriggerManager::requestLocalization((uint64_t)this, a2, 1, 0, 0);
}

void sub_241AF2878(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_241AF28CC()
{
  JUMPOUT(0x241AF28C4);
}

void CLMicroLocationTriggerManager::onDisplayState(CLMicroLocationTriggerManager *this, int a2)
{
  *((_BYTE *)this + 134) = a2;
  if (*((_BYTE *)this + 133))
  {
    CLMiLoCustomLoiRecordingManager::deviceScreenState(*((CLMiLoCustomLoiRecordingManager **)this + 25), a2);
  }
  else if (a2)
  {
    CLMicroLocationTriggerManager::handleDisplayOn(this);
  }
}

uint64_t CLMicroLocationTriggerManager::handleDisplayOn(CLMicroLocationTriggerManager *this)
{
  if (!*((_BYTE *)this + 132))
    CLMicroLocationTriggerManager::onDelayedLocalizationTrigger((uint64_t)this, 1);
  return CLMicroLocationTriggerManager::requestMotion(this, 1);
}

void CLMicroLocationTriggerManager::onDeviceStaticState(CLMiLoCustomLoiRecordingManager **this, char a2)
{
  if (*((_BYTE *)this + 133))
    CLMiLoCustomLoiRecordingManager::deviceStaticState(this[25], a2);
}

void CLMicroLocationTriggerManager::onDelayedLocalizationTrigger(uint64_t a1, int a2)
{
  NSObject *v4;
  void **v5[3];
  void ***v6;
  _BYTE buf[24];
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  *(_BYTE *)(a1 + 132) = 0;
  if (*(_BYTE *)(a1 + 185))
    *(_BYTE *)(a1 + 185) = 0;
  if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 192) + 104))(*(_QWORD *)(a1 + 192)) & 1) != 0)
  {
    *(_OWORD *)buf = *(_OWORD *)(a1 + 80);
    *(_QWORD *)&buf[16] = *(_QWORD *)(a1 + 96);
    *(_QWORD *)(a1 + 88) = 0;
    *(_QWORD *)(a1 + 96) = 0;
    *(_QWORD *)(a1 + 80) = 0;
    std::vector<CLMicroLocationProto::RecordingEvent>::__vdeallocate((void **)(a1 + 80));
    *(_QWORD *)(a1 + 80) = 0;
    *(_QWORD *)(a1 + 88) = 0;
    *(_QWORD *)(a1 + 96) = 0;
    memset(v5, 0, sizeof(v5));
    v6 = v5;
    std::vector<CLMicroLocationProto::RecordingEvent>::__destroy_vector::operator()[abi:ne180100]((void ***)&v6);
    CLMicroLocationTriggerManager::handleQueuedLocalizations(a1, buf, a2);
    v5[0] = (void **)buf;
    std::vector<CLMicroLocationProto::RecordingEvent>::__destroy_vector::operator()[abi:ne180100](v5);
  }
  else
  {
    if (onceToken_MicroLocation_Default != -1)
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_73);
    v4 = logObject_MicroLocation_Default;
    if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 68289026;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)&buf[8] = 2082;
      *(_QWORD *)&buf[10] = "";
      _os_log_impl(&dword_2419D9000, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLMicroLocationTriggerManager: get delayed trigger timeout, awaiting display on\"}", buf, 0x12u);
    }
  }
}

void sub_241AF2AB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<CLMicroLocationProto::RecordingEvent>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

__n128 CLMicroLocationTriggerManager::getCurrentLocalizationUUID@<Q0>(CLMicroLocationTriggerManager *this@<X0>, __n128 *a2@<X8>)
{
  __n128 result;

  result = *(__n128 *)((char *)this + 135);
  *a2 = result;
  a2[1].n128_u8[0] = *((_BYTE *)this + 151);
  return result;
}

__n128 CLMicroLocationTriggerManager::getRescheduledLocalizationUUID@<Q0>(CLMicroLocationTriggerManager *this@<X0>, __n128 *a2@<X8>)
{
  __n128 result;

  result = *(__n128 *)((char *)this + 169);
  *a2 = result;
  a2[1].n128_u8[0] = *((_BYTE *)this + 185);
  return result;
}

BOOL CLMicroLocationTriggerManager::isMacInternalTrigger(CLMicroLocationTriggerManager *this, const CLMicroLocationProto::RecordingEvent *a2)
{
  uint64_t v2;
  uint64_t *v3;
  int v4;
  uint64_t *v5;
  uint64_t v6;
  int v7;

  if ((*((_BYTE *)this + 141) & 4) == 0)
    return 0;
  v2 = *((_QWORD *)this + 11);
  if (!v2)
    v2 = *(_QWORD *)(CLMicroLocationProto::RecordingEvent::default_instance(this) + 88);
  v3 = *(uint64_t **)(v2 + 16);
  v4 = *((char *)v3 + 23);
  if (v4 < 0)
  {
    if (v3[1] != 17)
      return 0;
    v3 = (uint64_t *)*v3;
  }
  else if (v4 != 17)
  {
    return 0;
  }
  v5 = (uint64_t *)*v3;
  v6 = v3[1];
  v7 = *((unsigned __int8 *)v3 + 16);
  return v5 == (uint64_t *)0x6C616E7265746E49 && v6 == 0x614D746E65696C43 && v7 == 99;
}

uint64_t CLMicroLocationTriggerManager::shouldReject(CLMicroLocationTriggerManager *this, const CLMicroLocationProto::RecordingEvent *a2)
{
  int v3;
  _BOOL4 v4;
  uint64_t v5;
  NSObject *v6;
  int v7;
  _DWORD v9[2];
  __int16 v10;
  const char *v11;
  __int16 v12;
  int v13;
  __int16 v14;
  int v15;
  __int16 v16;
  _BOOL4 v17;
  __int16 v18;
  int v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  if (*((_BYTE *)this + 132))
    v3 = (*((_DWORD *)a2 + 35) >> 10) & 1;
  else
    v3 = 0;
  v4 = CLMicroLocationTriggerManager::isMacInternalTrigger(a2, a2) && *((_BYTE *)this + 109) != 0;
  if (*((_BYTE *)this + 9))
    v5 = v3 | v4;
  else
    v5 = 1;
  if (onceToken_MicroLocation_Default != -1)
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_73);
  v6 = logObject_MicroLocation_Default;
  if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
  {
    v7 = *((unsigned __int8 *)this + 9);
    v9[0] = 68290050;
    v9[1] = 0;
    v10 = 2082;
    v11 = "";
    v12 = 1026;
    v13 = v7;
    v14 = 1026;
    v15 = v3;
    v16 = 1026;
    v17 = v4;
    v18 = 1026;
    v19 = v5;
    _os_log_impl(&dword_2419D9000, v6, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLMicroLocationTriggerManager: shouldReject\", \"spectating\":%{public}hhd, \"isRecordingRequestDuringWaitForRescheduledTrigger\":%{public}hhd, \"macTriggerThrottle\":%{public}hhd, \"result\":%{public}hhd}", (uint8_t *)v9, 0x2Au);
  }
  return v5;
}

std::string *CLMicroLocationTriggerManager::getClientTypeStr@<X0>(const CLMicroLocationProto::RecordingEvent *a1@<X1>, std::string *a2@<X8>)
{
  std::string *result;
  int v6;
  std::string::size_type v7;
  std::string::size_type v8;
  uint64_t v9;

  result = (std::string *)std::string::basic_string[abi:ne180100]<0>(a2, "");
  v6 = *((_DWORD *)a1 + 35);
  if ((v6 & 4) != 0)
  {
    v7 = *((_QWORD *)a1 + 2);
    if (!v7)
    {
      result = (std::string *)CLMicroLocationProto::RecordingEvent::default_instance((CLMicroLocationProto::RecordingEvent *)result);
      v7 = result->__r_.__value_.__r.__words[2];
    }
    if ((*(_BYTE *)(v7 + 44) & 4) != 0)
    {
      v9 = *((_QWORD *)a1 + 2);
      if (!v9)
        v9 = *(_QWORD *)(CLMicroLocationProto::RecordingEvent::default_instance((CLMicroLocationProto::RecordingEvent *)result)
                       + 16);
      return std::string::operator=(a2, *(const std::string **)(v9 + 16));
    }
    v6 = *((_DWORD *)a1 + 35);
  }
  if ((v6 & 0x400) != 0)
  {
    v8 = *((_QWORD *)a1 + 11);
    if (!v8)
    {
      result = (std::string *)CLMicroLocationProto::RecordingEvent::default_instance((CLMicroLocationProto::RecordingEvent *)result);
      v8 = result[3].__r_.__value_.__r.__words[2];
    }
    if ((*(_BYTE *)(v8 + 44) & 4) != 0)
    {
      v9 = *((_QWORD *)a1 + 11);
      if (!v9)
        v9 = *(_QWORD *)(CLMicroLocationProto::RecordingEvent::default_instance((CLMicroLocationProto::RecordingEvent *)result)
                       + 88);
      return std::string::operator=(a2, *(const std::string **)(v9 + 16));
    }
  }
  return result;
}

void sub_241AF2D7C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void ___ZL45_CLLogObjectForCategory_MicroLocation_Defaultv_block_invoke_60()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.MicroLocation", "MicroLocation");
  v1 = (void *)logObject_MicroLocation_Default;
  logObject_MicroLocation_Default = (uint64_t)v0;

}

uint64_t std::vector<CLMicroLocationProto::RecordingEvent>::__emplace_back_slow_path<CLMicroLocationProto::RecordingEvent const&>(uint64_t *a1, const CLMicroLocationProto::RecordingEvent *a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  char *v13;
  CLMicroLocationProto::RecordingEvent *v14;
  char *v15;
  char *v16;
  uint64_t *v17;

  v3 = *a1;
  v4 = 0x8E38E38E38E38E39 * ((a1[1] - *a1) >> 4);
  v5 = v4 + 1;
  if (v4 + 1 > 0x1C71C71C71C71C7)
    std::vector<CLMicroLocationProto::ConfidenceReason>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0x8E38E38E38E38E39 * ((a1[2] - v3) >> 4);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0xE38E38E38E38E3)
    v9 = 0x1C71C71C71C71C7;
  else
    v9 = v5;
  v17 = a1 + 2;
  if (v9)
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CLMicroLocationProto::RecordingEvent>>(v7, v9);
  else
    v10 = 0;
  v13 = v10;
  v14 = (CLMicroLocationProto::RecordingEvent *)&v10[144 * v4];
  v16 = &v10[144 * v9];
  CLMicroLocationProto::RecordingEvent::RecordingEvent(v14, a2);
  v15 = (char *)v14 + 144;
  std::vector<CLMicroLocationProto::RecordingEvent>::__swap_out_circular_buffer(a1, &v13);
  v11 = a1[1];
  std::__split_buffer<CLMicroLocationProto::RecordingEvent>::~__split_buffer((uint64_t)&v13);
  return v11;
}

void sub_241AF2F44(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<CLMicroLocationProto::RecordingEvent>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<CLMicroLocationProto::RecordingEvent>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<CLMicroLocationProto::RecordingEvent>,std::reverse_iterator<CLMicroLocationProto::RecordingEvent*>,std::reverse_iterator<CLMicroLocationProto::RecordingEvent*>,std::reverse_iterator<CLMicroLocationProto::RecordingEvent*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<CLMicroLocationProto::RecordingEvent>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x1C71C71C71C71C8)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(144 * a2);
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<CLMicroLocationProto::RecordingEvent>,std::reverse_iterator<CLMicroLocationProto::RecordingEvent*>,std::reverse_iterator<CLMicroLocationProto::RecordingEvent*>,std::reverse_iterator<CLMicroLocationProto::RecordingEvent*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v10;
  uint64_t v11;
  CLMicroLocationProto::RecordingEvent *v12;

  v10 = 0;
  v11 = a7 - 144;
  while (a3 + v10 != a5)
  {
    v12 = (CLMicroLocationProto::RecordingEvent *)(v11 + v10);
    v10 -= 144;
    CLMicroLocationProto::RecordingEvent::RecordingEvent(v12, (const CLMicroLocationProto::RecordingEvent *)(v10 + a3));
  }
  return a6;
}

uint64_t std::__split_buffer<CLMicroLocationProto::RecordingEvent>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;
  void (**v4)(void);

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    v4 = *(void (***)(void))(i - 144);
    *(_QWORD *)(a1 + 16) = i - 144;
    (*v4)();
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void std::vector<CLMicroLocationProto::RecordingEvent>::__vdeallocate(void **a1)
{
  char *v1;
  char *v3;
  void *v4;
  char *v5;
  char *v6;
  void (**v7)(char *);
  BOOL v8;

  v1 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = *a1;
    if (v3 != v1)
    {
      v5 = v3 - 144;
      v6 = v3 - 144;
      do
      {
        v7 = *(void (***)(char *))v6;
        v6 -= 144;
        (*v7)(v5);
        v8 = v5 == v1;
        v5 = v6;
      }
      while (!v8);
      v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

_QWORD *std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>>>::__emplace_unique_key_args<boost::uuids::uuid,std::piecewise_construct_t const&,std::tuple<boost::uuids::uuid const&>,std::tuple<>>(uint64_t a1, _QWORD *a2, uint64_t a3, _OWORD **a4)
{
  unint64_t v4;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  void **v11;
  _QWORD *v12;
  unint64_t v13;
  float v15;
  float v16;
  _BOOL8 v17;
  unint64_t v18;
  unint64_t v19;
  size_t v20;
  uint64_t v21;
  _QWORD *v22;
  unint64_t v23;

  v7 = 0;
  v8 = 0;
  do
    v8 ^= (v8 << 6) + (v8 >> 2) + 2654435769u + *((unsigned __int8 *)a2 + v7++);
  while (v7 != 16);
  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      v4 = v8;
      if (v8 >= v9)
        v4 = v8 % v9;
    }
    else
    {
      v4 = (v9 - 1) & v8;
    }
    v11 = *(void ***)(*(_QWORD *)a1 + 8 * v4);
    if (v11)
    {
      v12 = *v11;
      if (*v11)
      {
        do
        {
          v13 = v12[1];
          if (v13 == v8)
          {
            if (v12[2] == *a2 && v12[3] == a2[1])
              return v12;
          }
          else
          {
            if (v10.u32[0] > 1uLL)
            {
              if (v13 >= v9)
                v13 %= v9;
            }
            else
            {
              v13 &= v9 - 1;
            }
            if (v13 != v4)
              break;
          }
          v12 = (_QWORD *)*v12;
        }
        while (v12);
      }
    }
  }
  v12 = operator new(0x28uLL);
  *v12 = 0;
  v12[1] = v8;
  *((_OWORD *)v12 + 1) = **a4;
  *((_DWORD *)v12 + 8) = 0;
  v15 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v16 = *(float *)(a1 + 32);
  if (!v9 || (float)(v16 * (float)v9) < v15)
  {
    v17 = 1;
    if (v9 >= 3)
      v17 = (v9 & (v9 - 1)) != 0;
    v18 = v17 | (2 * v9);
    v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19)
      v20 = v19;
    else
      v20 = v18;
    std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>>>::__rehash<true>(a1, v20);
    v9 = *(_QWORD *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9)
        v4 = v8 % v9;
      else
        v4 = v8;
    }
    else
    {
      v4 = (v9 - 1) & v8;
    }
  }
  v21 = *(_QWORD *)a1;
  v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v22)
  {
    *v12 = *v22;
LABEL_44:
    *v22 = v12;
    goto LABEL_45;
  }
  *v12 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v12;
  *(_QWORD *)(v21 + 8 * v4) = a1 + 16;
  if (*v12)
  {
    v23 = *(_QWORD *)(*v12 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v23 >= v9)
        v23 %= v9;
    }
    else
    {
      v23 &= v9 - 1;
    }
    v22 = (_QWORD *)(*(_QWORD *)a1 + 8 * v23);
    goto LABEL_44;
  }
LABEL_45:
  ++*(_QWORD *)(a1 + 24);
  return v12;
}

void sub_241AF33B4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t *std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>>>::__erase_unique<boost::uuids::uuid>(_QWORD *a1, _QWORD *a2)
{
  uint64_t *result;

  result = std::__hash_table<std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>>>::find<boost::uuids::uuid>(a1, a2);
  if (result)
  {
    std::__hash_table<boost::uuids::uuid,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,std::allocator<boost::uuids::uuid>>::erase(a1, result);
    return (uint64_t *)1;
  }
  return result;
}

uint64_t std::vector<CLMicroLocationProto::RecordingEvent>::__assign_with_size[abi:ne180100]<CLMicroLocationProto::RecordingEvent*,CLMicroLocationProto::RecordingEvent*>(uint64_t a1, CLMicroLocationProto::RecordingEvent *a2, CLMicroLocationProto::RecordingEvent *a3, unint64_t a4)
{
  uint64_t v8;
  CLMicroLocationProto::RecordingEvent *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t result;
  CLMicroLocationProto::RecordingEvent *v13;
  uint64_t (***v14)(_QWORD);
  uint64_t (***v15)(_QWORD);
  uint64_t (***v16)(_QWORD);
  uint64_t (***v17)(_QWORD);
  uint64_t (***v18)(_QWORD);
  uint64_t (**v19)(_QWORD);
  BOOL v20;

  v8 = a1 + 16;
  v9 = *(CLMicroLocationProto::RecordingEvent **)a1;
  if (0x8E38E38E38E38E39 * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 4) < a4)
  {
    std::vector<CLMicroLocationProto::RecordingEvent>::__vdeallocate((void **)a1);
    if (a4 > 0x1C71C71C71C71C7)
      std::vector<CLMicroLocationProto::ConfidenceReason>::__throw_length_error[abi:ne180100]();
    v10 = 0x1C71C71C71C71C72 * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 4);
    if (v10 <= a4)
      v10 = a4;
    if (0x8E38E38E38E38E39 * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 4) >= 0xE38E38E38E38E3)
      v11 = 0x1C71C71C71C71C7;
    else
      v11 = v10;
    std::vector<CLMicroLocationProto::RecordingEvent>::__vallocate[abi:ne180100]((_QWORD *)a1, v11);
    result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<CLMicroLocationProto::RecordingEvent>,CLMicroLocationProto::RecordingEvent*,CLMicroLocationProto::RecordingEvent*,CLMicroLocationProto::RecordingEvent*>(v8, (uint64_t)a2, (uint64_t)a3, *(_QWORD *)(a1 + 8));
    goto LABEL_11;
  }
  if (0x8E38E38E38E38E39 * ((uint64_t)(*(_QWORD *)(a1 + 8) - (_QWORD)v9) >> 4) < a4)
  {
    v13 = (CLMicroLocationProto::RecordingEvent *)((char *)a2 + 16 * ((uint64_t)(*(_QWORD *)(a1 + 8) - (_QWORD)v9) >> 4));
    std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,CLMicroLocationProto::RecordingEvent *,CLMicroLocationProto::RecordingEvent *,CLMicroLocationProto::RecordingEvent *,0>(a2, v13, v9);
    result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<CLMicroLocationProto::RecordingEvent>,CLMicroLocationProto::RecordingEvent*,CLMicroLocationProto::RecordingEvent*,CLMicroLocationProto::RecordingEvent*>(v8, (uint64_t)v13, (uint64_t)a3, *(_QWORD *)(a1 + 8));
LABEL_11:
    *(_QWORD *)(a1 + 8) = result;
    return result;
  }
  result = (uint64_t)std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,CLMicroLocationProto::RecordingEvent *,CLMicroLocationProto::RecordingEvent *,CLMicroLocationProto::RecordingEvent *,0>(a2, a3, v9);
  v15 = v14;
  v16 = *(uint64_t (****)(_QWORD))(a1 + 8);
  if (v16 != v14)
  {
    v17 = v16 - 18;
    v18 = v16 - 18;
    do
    {
      v19 = *v18;
      v18 -= 18;
      result = (*v19)(v17);
      v20 = v17 == v15;
      v17 = v18;
    }
    while (!v20);
  }
  *(_QWORD *)(a1 + 8) = v15;
  return result;
}

void sub_241AF3588(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_241AF3590(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

char *std::vector<CLMicroLocationProto::RecordingEvent>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0x1C71C71C71C71C8)
    std::vector<CLMicroLocationProto::ConfidenceReason>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CLMicroLocationProto::RecordingEvent>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[144 * v4];
  return result;
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<CLMicroLocationProto::RecordingEvent>,CLMicroLocationProto::RecordingEvent*,CLMicroLocationProto::RecordingEvent*,CLMicroLocationProto::RecordingEvent*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;

  if (a2 != a3)
  {
    v7 = 0;
    do
    {
      CLMicroLocationProto::RecordingEvent::RecordingEvent((CLMicroLocationProto::RecordingEvent *)(a4 + v7), (const CLMicroLocationProto::RecordingEvent *)(a2 + v7));
      v7 += 144;
    }
    while (a2 + v7 != a3);
    a4 += v7;
  }
  return a4;
}

void sub_241AF3648(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  if (v2)
  {
    v4 = v1 - 144;
    do
    {
      (**(void (***)(uint64_t))(v4 + v2))(v4 + v2);
      v2 -= 144;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

CLMicroLocationProto::RecordingEvent *std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,CLMicroLocationProto::RecordingEvent *,CLMicroLocationProto::RecordingEvent *,CLMicroLocationProto::RecordingEvent *,0>(CLMicroLocationProto::RecordingEvent *a1, CLMicroLocationProto::RecordingEvent *a2, CLMicroLocationProto::RecordingEvent *this)
{
  const CLMicroLocationProto::RecordingEvent *v4;

  v4 = a1;
  if (a1 != a2)
  {
    do
    {
      CLMicroLocationProto::RecordingEvent::CopyFrom(this, v4);
      v4 = (const CLMicroLocationProto::RecordingEvent *)((char *)v4 + 144);
      this = (CLMicroLocationProto::RecordingEvent *)((char *)this + 144);
    }
    while (v4 != a2);
    return a2;
  }
  return v4;
}

uint64_t CLMicroLocationScanBuffer::CLMicroLocationScanBuffer(uint64_t result, double a2)
{
  *(_OWORD *)result = 0u;
  *(_OWORD *)(result + 16) = 0u;
  *(double *)(result + 32) = a2;
  return result;
}

void CLMicroLocationScanBuffer::ingestAps(uint64_t a1@<X0>, int **a2@<X1>, uint64_t *a3@<X8>)
{
  int *v5;
  int *v6;
  double v7;
  const CLMicroLocationProto::WiFiRssi *v8;
  const CLMicroLocationProto::WiFiRssi *v9;
  double v10;
  NSObject *v11;
  unint64_t v12;
  std::string *p_p;
  int *v14;
  unint64_t v15;
  int v16;
  uint64_t v17;
  unint64_t v18;
  int v19;
  uint64_t v20;
  NSObject *v21;
  uint64_t v22;
  uint64_t v23;
  CLMacAddress *v24;
  uint64_t v25;
  CLMacAddress v26;
  std::string __p;
  char v28[8];
  double v29;
  float v30;
  CLMacAddress *v31;
  int v32;
  uint8_t buf[4];
  int v34;
  __int16 v35;
  const char *v36;
  __int16 v37;
  std::string *v38;
  uint8_t v39[4];
  _BYTE v40[20];
  CLMacAddress *v41;
  _DWORD v42[4];
  uint64_t v43;

  v43 = *MEMORY[0x24BDAC8D0];
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v5 = *a2;
  v6 = a2[1];
  if (*a2 == v6)
  {
    v24 = 0;
    v25 = 0;
  }
  else
  {
    v24 = 0;
    v25 = 0;
    do
    {
      CLMicroLocationProto::WiFiRssi::WiFiRssi((CLMicroLocationProto::WiFiRssi *)v39, (const CLMicroLocationProto::WiFiRssi *)v5);
      v7 = *(double *)&v40[4];
      if (*(double *)&v40[4] >= *(double *)(a1 + 24))
      {
        v9 = *(const CLMicroLocationProto::WiFiRssi **)a1;
        v8 = *(const CLMicroLocationProto::WiFiRssi **)(a1 + 8);
        while (v9 != v8)
        {
          CLMicroLocationProto::WiFiRssi::WiFiRssi((CLMicroLocationProto::WiFiRssi *)v28, v9);
          if (v31 == v41)
          {
            v10 = v29 - v7;
            if (v29 - v7 < 0.0)
              v10 = -(v29 - v7);
            if (v10 < *(double *)(a1 + 32))
            {
              if (v32 == v42[0] && v30 == *(float *)&v40[16] && *((_DWORD *)v9 + 12) == v5[12])
              {
                v24 = (CLMacAddress *)((char *)v24 + 1);
                CLMicroLocationProto::WiFiRssi::~WiFiRssi((CLMicroLocationProto::WiFiRssi *)v28);
                goto LABEL_30;
              }
              if (onceToken_MicroLocation_Default != -1)
                dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_74);
              v11 = (id)logObject_MicroLocation_Default;
              if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
              {
                v26.var0 = CLMacAddress::newFromUint64(v41, v12);
                CLMacAddress::toCLStr(&v26, &__p);
                p_p = &__p;
                if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                  p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
                *(_DWORD *)buf = 68289282;
                v34 = 0;
                v35 = 2082;
                v36 = "";
                v37 = 2082;
                v38 = p_p;
                _os_log_impl(&dword_2419D9000, v11, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#Warning AP matches timestamp and mac in buffer, but values are not same\", \"mac address\":%{public, location:escape_only}s}", buf, 0x1Cu);
                if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(__p.__r_.__value_.__l.__data_);
              }

            }
          }
          CLMicroLocationProto::WiFiRssi::~WiFiRssi((CLMicroLocationProto::WiFiRssi *)v28);
          v9 = (const CLMicroLocationProto::WiFiRssi *)((char *)v9 + 56);
        }
        v14 = v5 + 12;
        v15 = a3[1];
        if (v15 >= a3[2])
        {
          v17 = std::vector<CLMiLoProtobufWrapper::WiFiRssi>::__emplace_back_slow_path<CLMicroLocationProto::WiFiRssi &,unsigned int const&>(a3, (const CLMicroLocationProto::WiFiRssi *)v39, v5 + 12);
        }
        else
        {
          v16 = *v14;
          CLMicroLocationProto::WiFiRssi::WiFiRssi((CLMicroLocationProto::WiFiRssi *)a3[1], (const CLMicroLocationProto::WiFiRssi *)v39);
          *(_DWORD *)(v15 + 48) = v16;
          v17 = v15 + 56;
          a3[1] = v15 + 56;
        }
        a3[1] = v17;
        v18 = *(_QWORD *)(a1 + 8);
        if (v18 >= *(_QWORD *)(a1 + 16))
        {
          v20 = std::vector<CLMiLoProtobufWrapper::WiFiRssi>::__emplace_back_slow_path<CLMicroLocationProto::WiFiRssi &,unsigned int const&>((uint64_t *)a1, (const CLMicroLocationProto::WiFiRssi *)v39, v5 + 12);
        }
        else
        {
          v19 = *v14;
          CLMicroLocationProto::WiFiRssi::WiFiRssi(*(CLMicroLocationProto::WiFiRssi **)(a1 + 8), (const CLMicroLocationProto::WiFiRssi *)v39);
          *(_DWORD *)(v18 + 48) = v19;
          v20 = v18 + 56;
          *(_QWORD *)(a1 + 8) = v18 + 56;
        }
        *(_QWORD *)(a1 + 8) = v20;
      }
      else
      {
        ++v25;
      }
LABEL_30:
      CLMicroLocationProto::WiFiRssi::~WiFiRssi((CLMicroLocationProto::WiFiRssi *)v39);
      v5 += 14;
    }
    while (v5 != v6);
  }
  if (onceToken_MicroLocation_Default != -1)
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_74);
  v21 = logObject_MicroLocation_Default;
  if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
  {
    v22 = 0x6DB6DB6DB6DB6DB7 * ((a3[1] - *a3) >> 3);
    v23 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 3);
    *(_DWORD *)v39 = 134349824;
    *(_QWORD *)v40 = v22;
    *(_WORD *)&v40[8] = 2050;
    *(_QWORD *)&v40[10] = v25;
    *(_WORD *)&v40[18] = 2050;
    v41 = v24;
    LOWORD(v42[0]) = 2050;
    *(_QWORD *)((char *)v42 + 2) = v23;
    _os_log_impl(&dword_2419D9000, v21, OS_LOG_TYPE_DEFAULT, "Ingested %{public}ld new AP measurements, too old %{public}ld, dupe %{public}ld, buffer size %{public}ld", v39, 0x2Au);
  }
}

void sub_241AF3A7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void **a27)
{
  uint64_t v27;
  uint64_t v28;

  *(_QWORD *)(v27 + 8) = v28;
  CLMicroLocationProto::WiFiRssi::~WiFiRssi((CLMicroLocationProto::WiFiRssi *)&a27);
  std::vector<CLMiLoProtobufWrapper::WiFiRssi>::__destroy_vector::operator()[abi:ne180100](&a27);
  _Unwind_Resume(a1);
}

void CLMicroLocationScanBuffer::pruneAps(uint64_t a1@<X0>, uint64_t *a2@<X8>, double a3@<D0>, double a4@<D1>)
{
  CLMicroLocationProto::WiFiRssi *v6;
  CLMicroLocationProto::WiFiRssi *v7;
  double v8;
  CLMicroLocationProto::WiFiRssi *v9;
  NSObject *v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  __int16 v15;
  uint64_t v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  *(double *)(a1 + 24) = a3 - a4;
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  std::vector<CLMiLoProtobufWrapper::WiFiRssi>::reserve(a2, 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 3));
  v6 = *(CLMicroLocationProto::WiFiRssi **)a1;
  v7 = *(CLMicroLocationProto::WiFiRssi **)(a1 + 8);
  if (*(CLMicroLocationProto::WiFiRssi **)a1 == v7)
  {
    v7 = *(CLMicroLocationProto::WiFiRssi **)a1;
  }
  else
  {
    v8 = *(double *)(a1 + 24);
    while (*((double *)v6 + 1) >= v8)
    {
      v6 = (CLMicroLocationProto::WiFiRssi *)((char *)v6 + 56);
      if (v6 == v7)
      {
        v6 = *(CLMicroLocationProto::WiFiRssi **)(a1 + 8);
        goto LABEL_13;
      }
    }
    if (v6 != v7)
    {
      v9 = (CLMicroLocationProto::WiFiRssi *)((char *)v6 + 56);
      if ((CLMicroLocationProto::WiFiRssi *)((char *)v6 + 56) != v7)
      {
        do
        {
          if (*((double *)v9 + 1) >= v8)
          {
            CLMicroLocationProto::WiFiRssi::CopyFrom(v6, v9);
            *((_DWORD *)v6 + 12) = *((_DWORD *)v9 + 12);
            v6 = (CLMicroLocationProto::WiFiRssi *)((char *)v6 + 56);
          }
          v9 = (CLMicroLocationProto::WiFiRssi *)((char *)v9 + 56);
        }
        while (v9 != v7);
        v7 = *(CLMicroLocationProto::WiFiRssi **)(a1 + 8);
      }
    }
  }
LABEL_13:
  std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::__wrap_iter<CLMiLoProtobufWrapper::WiFiRssi *>,std::__wrap_iter<CLMiLoProtobufWrapper::WiFiRssi *>,std::back_insert_iterator<std::vector<CLMiLoProtobufWrapper::WiFiRssi>>,0>(v6, v7, a2);
  std::vector<CLMiLoProtobufWrapper::WiFiRssi>::erase(a1, v6, *(CLMicroLocationProto::WiFiRssi **)(a1 + 8));
  if (onceToken_MicroLocation_Default != -1)
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_74);
  v10 = logObject_MicroLocation_Default;
  if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
  {
    v11 = 0x6DB6DB6DB6DB6DB7 * ((a2[1] - *a2) >> 3);
    v12 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 3);
    v13 = 134349312;
    v14 = v11;
    v15 = 2050;
    v16 = v12;
    _os_log_impl(&dword_2419D9000, v10, OS_LOG_TYPE_DEFAULT, "Pruned %{public}ld AP measurements, buffer size %{public}ld", (uint8_t *)&v13, 0x16u);
  }
}

void sub_241AF3CD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<CLMiLoProtobufWrapper::WiFiRssi>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t CLMicroLocationScanBuffer::numberOfUniqueWifiAccessPoints(CLMicroLocationScanBuffer *this)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;

  v7 = 0;
  v8 = 0;
  v6 = (uint64_t *)&v7;
  v1 = *(_QWORD *)this;
  v2 = *((_QWORD *)this + 1);
  if (*(_QWORD *)this == v2)
  {
    v3 = 0;
    v4 = 0;
  }
  else
  {
    do
    {
      v9 = *(_QWORD *)(v1 + 24);
      std::__tree<unsigned long long>::__emplace_unique_key_args<unsigned long long,unsigned long long>(&v6, (unint64_t *)&v9, &v9);
      v1 += 56;
    }
    while (v1 != v2);
    v3 = v7;
    v4 = v8;
  }
  std::__tree<std::__value_type<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,double>,std::__map_value_compare<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,std::__value_type<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,double>,std::less<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes>,true>,std::allocator<std::__value_type<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,double>>>::destroy((uint64_t)&v6, v3);
  return v4;
}

void sub_241AF3D70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, _QWORD *a10)
{
  std::__tree<std::__value_type<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,double>,std::__map_value_compare<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,std::__value_type<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,double>,std::less<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes>,true>,std::allocator<std::__value_type<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,double>>>::destroy((uint64_t)&a9, a10);
  _Unwind_Resume(a1);
}

void ___ZL45_CLLogObjectForCategory_MicroLocation_Defaultv_block_invoke_61()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.MicroLocation", "MicroLocation");
  v1 = (void *)logObject_MicroLocation_Default;
  logObject_MicroLocation_Default = (uint64_t)v0;

}

uint64_t std::vector<CLMiLoProtobufWrapper::WiFiRssi>::__emplace_back_slow_path<CLMicroLocationProto::WiFiRssi &,unsigned int const&>(uint64_t *a1, const CLMicroLocationProto::WiFiRssi *a2, int *a3)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  int v13;
  uint64_t v14;
  char *v16;
  CLMicroLocationProto::WiFiRssi *v17;
  CLMicroLocationProto::WiFiRssi *v18;
  char *v19;
  uint64_t *v20;

  v4 = *a1;
  v5 = 0x6DB6DB6DB6DB6DB7 * ((a1[1] - *a1) >> 3);
  v6 = v5 + 1;
  if ((unint64_t)(v5 + 1) > 0x492492492492492)
    std::vector<CLMicroLocationProto::ConfidenceReason>::__throw_length_error[abi:ne180100]();
  v9 = (uint64_t)(a1 + 2);
  v10 = 0x6DB6DB6DB6DB6DB7 * ((a1[2] - v4) >> 3);
  if (2 * v10 > v6)
    v6 = 2 * v10;
  if (v10 >= 0x249249249249249)
    v11 = 0x492492492492492;
  else
    v11 = v6;
  v20 = a1 + 2;
  if (v11)
    v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CLMiLoProtobufWrapper::WiFiRssi>>(v9, v11);
  else
    v12 = 0;
  v16 = v12;
  v17 = (CLMicroLocationProto::WiFiRssi *)&v12[56 * v5];
  v18 = v17;
  v19 = &v12[56 * v11];
  v13 = *a3;
  CLMicroLocationProto::WiFiRssi::WiFiRssi(v17, a2);
  *((_DWORD *)v17 + 12) = v13;
  v18 = (CLMicroLocationProto::WiFiRssi *)((char *)v18 + 56);
  std::vector<CLMiLoProtobufWrapper::WiFiRssi>::__swap_out_circular_buffer(a1, &v16);
  v14 = a1[1];
  std::__split_buffer<CLMiLoProtobufWrapper::WiFiRssi>::~__split_buffer((uint64_t)&v16);
  return v14;
}

void sub_241AF3EDC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<CLMiLoProtobufWrapper::WiFiRssi>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

CLMicroLocationProto::WiFiRssi *std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::__wrap_iter<CLMiLoProtobufWrapper::WiFiRssi *>,std::__wrap_iter<CLMiLoProtobufWrapper::WiFiRssi *>,std::back_insert_iterator<std::vector<CLMiLoProtobufWrapper::WiFiRssi>>,0>(CLMicroLocationProto::WiFiRssi *a1, CLMicroLocationProto::WiFiRssi *a2, uint64_t *a3)
{
  CLMicroLocationProto::WiFiRssi *v3;
  CLMicroLocationProto::WiFiRssi *v4;
  uint64_t *v6;

  v3 = a1;
  v6 = a3;
  if (a1 == a2)
    return a1;
  v4 = a2;
  do
  {
    std::back_insert_iterator<std::vector<CLMiLoProtobufWrapper::WiFiRssi>>::operator=[abi:ne180100](&v6, v3);
    v3 = (CLMicroLocationProto::WiFiRssi *)((char *)v3 + 56);
  }
  while (v3 != v4);
  return v4;
}

uint64_t **std::back_insert_iterator<std::vector<CLMiLoProtobufWrapper::WiFiRssi>>::operator=[abi:ne180100](uint64_t **a1, CLMicroLocationProto::WiFiRssi *a2)
{
  uint64_t *v4;
  unint64_t v5;
  uint64_t v6;

  v4 = *a1;
  v5 = (*a1)[1];
  if (v5 >= (*a1)[2])
  {
    v6 = std::vector<CLMiLoProtobufWrapper::WiFiRssi>::__push_back_slow_path<CLMiLoProtobufWrapper::WiFiRssi const&>(*a1, a2);
  }
  else
  {
    CLMicroLocationProto::WiFiRssi::WiFiRssi((CLMicroLocationProto::WiFiRssi *)(*a1)[1], a2);
    *(_DWORD *)(v5 + 48) = *((_DWORD *)a2 + 12);
    v6 = v5 + 56;
    v4[1] = v5 + 56;
  }
  v4[1] = v6;
  return a1;
}

void sub_241AF3FBC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<CLMiLoProtobufWrapper::WiFiRssi>::__push_back_slow_path<CLMiLoProtobufWrapper::WiFiRssi const&>(uint64_t *a1, const CLMicroLocationProto::WiFiRssi *a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  char *v13;
  CLMicroLocationProto::WiFiRssi *v14;
  CLMicroLocationProto::WiFiRssi *v15;
  char *v16;
  uint64_t *v17;

  v3 = *a1;
  v4 = 0x6DB6DB6DB6DB6DB7 * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) > 0x492492492492492)
    std::vector<CLMicroLocationProto::ConfidenceReason>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0x6DB6DB6DB6DB6DB7 * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x249249249249249)
    v9 = 0x492492492492492;
  else
    v9 = v5;
  v17 = a1 + 2;
  if (v9)
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CLMiLoProtobufWrapper::WiFiRssi>>(v7, v9);
  else
    v10 = 0;
  v13 = v10;
  v14 = (CLMicroLocationProto::WiFiRssi *)&v10[56 * v4];
  v15 = v14;
  v16 = &v10[56 * v9];
  CLMicroLocationProto::WiFiRssi::WiFiRssi(v14, a2);
  *((_DWORD *)v14 + 12) = *((_DWORD *)a2 + 12);
  v15 = (CLMicroLocationProto::WiFiRssi *)((char *)v15 + 56);
  std::vector<CLMiLoProtobufWrapper::WiFiRssi>::__swap_out_circular_buffer(a1, &v13);
  v11 = a1[1];
  std::__split_buffer<CLMiLoProtobufWrapper::WiFiRssi>::~__split_buffer((uint64_t)&v13);
  return v11;
}

void sub_241AF40DC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<CLMiLoProtobufWrapper::WiFiRssi>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<unsigned long long>::__emplace_unique_key_args<unsigned long long,unsigned long long>(uint64_t **a1, unint64_t *a2, uint64_t *a3)
{
  uint64_t *v5;
  uint64_t **v6;
  unint64_t v7;
  uint64_t **v8;
  unint64_t v9;
  uint64_t *v10;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    v7 = *a2;
    while (1)
    {
      while (1)
      {
        v8 = (uint64_t **)v5;
        v9 = v5[4];
        if (v7 >= v9)
          break;
        v5 = *v8;
        v6 = v8;
        if (!*v8)
          goto LABEL_10;
      }
      if (v9 >= v7)
        break;
      v5 = v8[1];
      if (!v5)
      {
        v6 = v8 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v8 = a1 + 1;
LABEL_10:
    v10 = (uint64_t *)operator new(0x28uLL);
    v10[4] = *a3;
    std::__tree<CLMicroLocationRecordingCompletionMetaInformation::RecordingError>::__insert_node_at(a1, (uint64_t)v8, v6, v10);
    return v10;
  }
  return (uint64_t *)v8;
}

__n128 CLMiLoService::ServiceDescriptor::ServiceDescriptor(__n128 *a1, __n128 *a2, unint64_t a3, unint64_t a4)
{
  __n128 result;

  result = *a2;
  *a1 = *a2;
  a1[1].n128_u64[0] = a3;
  a1[1].n128_u64[1] = a4;
  return result;
}

uint64_t CLMiLoService::ServiceDescriptor::ServiceDescriptor(uint64_t this)
{
  *(_QWORD *)(this + 24) = 0;
  return this;
}

_QWORD *CLMiLoService::settingsString@<X0>(CLMiLoService *this@<X0>, _QWORD *a2@<X8>)
{
  unint64_t v2;

  v2 = *((_QWORD *)this + 3) - 1;
  if (v2 < 4)
    return std::string::basic_string[abi:ne180100]<0>(a2, off_2511D9280[v2]);
  CLMiLoService::settingsString();
  return _CLLogObjectForCategory_MicroLocation_Default();
}

uint64_t CLMiLoService::CLMiLoService(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, __int128 *a7, __int128 *a8, uint64_t a9)
{
  __int128 v11;
  std::string *v12;
  __int128 v13;

  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = a3;
  *(_QWORD *)(a1 + 16) = a4;
  *(_QWORD *)(a1 + 24) = a5;
  *(_QWORD *)(a1 + 32) = a6;
  if (*((char *)a7 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 40), *(const std::string::value_type **)a7, *((_QWORD *)a7 + 1));
  }
  else
  {
    v11 = *a7;
    *(_QWORD *)(a1 + 56) = *((_QWORD *)a7 + 2);
    *(_OWORD *)(a1 + 40) = v11;
  }
  v12 = (std::string *)(a1 + 64);
  if (*((char *)a8 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v12, *(const std::string::value_type **)a8, *((_QWORD *)a8 + 1));
  }
  else
  {
    v13 = *a8;
    *(_QWORD *)(a1 + 80) = *((_QWORD *)a8 + 2);
    *(_OWORD *)&v12->__r_.__value_.__l.__data_ = v13;
  }
  *(_BYTE *)(a1 + 296) = 0;
  *(_BYTE *)(a1 + 368) = 0;
  *(_BYTE *)(a1 + 440) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_BYTE *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_BYTE *)(a1 + 352) = 0;
  *(_BYTE *)(a1 + 424) = 0;
  *(_OWORD *)(a1 + 376) = 0u;
  *(_OWORD *)(a1 + 392) = 0u;
  *(_OWORD *)(a1 + 408) = 0u;
  *(_QWORD *)(a1 + 448) = a9;
  *(_WORD *)(a1 + 456) = 0;
  *(_BYTE *)(a1 + 458) = 0;
  *(_QWORD *)(a1 + 88) = 1;
  std::shared_ptr<CLMiLoService::ModelAndConf>::reset[abi:ne180100]((_QWORD *)(a1 + 96));
  return a1;
}

void sub_241AF4318(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 63) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

void std::shared_ptr<CLMiLoService::ModelAndConf>::reset[abi:ne180100](_QWORD *a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = (std::__shared_weak_count *)a1[1];
  *a1 = 0;
  a1[1] = 0;
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

unint64_t CLMiLoService::uint64ToLocationTypesBitset(unint64_t this)
{
  uint64_t v1;

  if (HIDWORD(this))
  {
    v1 = CLMiLoService::uint64ToLocationTypesBitset();
    return CLMiLoService::CLMiLoService(v1);
  }
  return this;
}

uint64_t CLMiLoService::CLMiLoService(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  std::string v13;
  std::string v14;

  v9 = *(_QWORD *)(a3 + 8);
  v8 = *(_QWORD *)(a3 + 16);
  v10 = *(_QWORD *)a3;
  v11 = *(_QWORD *)(a3 + 56);
  CLMiLoService::uint64ToLocationTypesBitset(v11);
  if (*(char *)(a3 + 55) < 0)
    std::string::__init_copy_ctor_external(&v14, *(const std::string::value_type **)(a3 + 32), *(_QWORD *)(a3 + 40));
  else
    v14 = *(std::string *)(a3 + 32);
  if (*(char *)(a3 + 87) < 0)
    std::string::__init_copy_ctor_external(&v13, *(const std::string::value_type **)(a3 + 64), *(_QWORD *)(a3 + 72));
  else
    v13 = *(std::string *)(a3 + 64);
  CLMiLoService::CLMiLoService(a1, a2, v9, v8, v10, v11, (__int128 *)&v14, (__int128 *)&v13, a4);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v13.__r_.__value_.__l.__data_);
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v14.__r_.__value_.__l.__data_);
  return a1;
}

void sub_241AF44A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t CLMiLoService::uuid(CLMiLoService *this)
{
  return *((_QWORD *)this + 1);
}

uint64_t CLMiLoService::clientId(CLMiLoService *this)
{
  return (uint64_t)this + 40;
}

uint64_t CLMiLoService::userId(CLMiLoService *this)
{
  return (uint64_t)this + 64;
}

void CLMiLoService::modelClientIdentifierStringForServiceTypeAndClientId(uint64_t a1@<X0>, uint64_t a2@<X1>, std::string *a3@<X8>)
{
  if (a1 == 1)
  {
    std::string::basic_string[abi:ne180100]<0>(a3, "kMiLoClientIdentifierUnsupervisedShared");
  }
  else if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(a3, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)&a3->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
    a3->__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 16);
  }
}

void CLMiLoService::modelClientIdentifierString(CLMiLoService *this@<X0>, std::string *a2@<X8>)
{
  CLMiLoService::modelClientIdentifierStringForServiceTypeAndClientId(*((_QWORD *)this + 3), (uint64_t)this + 40, a2);
}

uint64_t CLMiLoService::serviceType(CLMiLoService *this)
{
  return *((_QWORD *)this + 3);
}

uint64_t CLMiLoService::locationTypes(CLMiLoService *this)
{
  return *((_QWORD *)this + 4);
}

uint64_t CLMiLoService::isLocationTypeEnabled(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x20)
    std::__throw_out_of_range[abi:ne180100]("bitset test argument out of range");
  return (*(_QWORD *)(a1 + 32) >> a2) & 1;
}

uint64_t CLMiLoService::enableInLocationType(uint64_t result, unint64_t a2)
{
  if (a2 >= 0x20)
    std::__throw_out_of_range[abi:ne180100]("bitset set argument out of range");
  *(_QWORD *)(result + 32) |= 1 << a2;
  return result;
}

uint64_t CLMiLoService::disableInLocationType(uint64_t result, unint64_t a2)
{
  if (a2 >= 0x20)
    std::__throw_out_of_range[abi:ne180100]("bitset set argument out of range");
  *(_QWORD *)(result + 32) &= ~(1 << a2);
  return result;
}

void CLMiLoService::sendCachedResults(CLMiLoService *this, const uuid *a2)
{
  _QWORD *v4;
  int v5;
  NSObject *v6;
  _OWORD *v7;
  char *p_p;
  char *v9;
  char *v10;
  uint64_t v11;
  NSObject *v12;
  _OWORD *v13;
  char *v14;
  _QWORD *v15;
  _OWORD *v16;
  char *v17;
  NSObject *v18;
  char *v19;
  _QWORD *v20;
  char *v21;
  void *v22;
  __int128 v23;
  void *__p;
  __int128 v25;
  _BYTE buf[18];
  __int16 v27;
  char *v28;
  __int16 v29;
  _QWORD *v30;
  __int16 v31;
  char *v32;
  __int16 v33;
  char *v34;
  __int16 v35;
  int v36;
  uint64_t v37;

  v37 = *MEMORY[0x24BDAC8D0];
  if (*((_BYTE *)this + 296))
  {
    v4 = (_QWORD *)((char *)this + 40);
    v5 = (*(uint64_t (**)(void))(**(_QWORD **)this + 96))();
    if (onceToken_MicroLocation_Default != -1)
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_75);
    v6 = (id)logObject_MicroLocation_Default;
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      v7 = operator new(0x28uLL);
      __p = v7;
      v25 = xmmword_241BB2320;
      *v7 = 0u;
      v7[1] = 0u;
      *(_QWORD *)((char *)v7 + 29) = 0;
      boost::uuids::to_chars<char *>((uint64_t)this + 8, v7);
      if (v25 >= 0)
        p_p = (char *)&__p;
      else
        p_p = (char *)__p;
      if (*((char *)this + 63) < 0)
        v4 = (_QWORD *)*v4;
      if (!*((_BYTE *)this + 296))
        std::__throw_bad_optional_access[abi:ne180100]();
      v9 = (char *)operator new(0x28uLL);
      *(_QWORD *)(v9 + 29) = 0;
      *(_OWORD *)v9 = 0u;
      *((_OWORD *)v9 + 1) = 0u;
      boost::uuids::to_chars<char *>((uint64_t)this + 280, v9);
      v10 = (char *)operator new(0x28uLL);
      *(_QWORD *)(v10 + 29) = 0;
      *(_OWORD *)v10 = 0u;
      *((_OWORD *)v10 + 1) = 0u;
      boost::uuids::to_chars<char *>((uint64_t)a2, v10);
      *(_DWORD *)buf = 68290306;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)&buf[8] = 2082;
      *(_QWORD *)&buf[10] = "";
      v27 = 2082;
      v28 = p_p;
      v29 = 2082;
      v30 = v4;
      v31 = 2082;
      v32 = v9;
      v33 = 2082;
      v34 = v10;
      v35 = 1026;
      v36 = v5;
      _os_log_impl(&dword_2419D9000, v6, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLMiLoService sending cached results to client: \", \"ServiceId\":%{public, location:escape_only}s, \"ClientId\":%{public, location:escape_only}s, \"Cached LocalizationId\":%{public, location:escape_only}s, \"RequestId\":%{public, location:escape_only}s, \"Succeeded to save trigger\":%{public}hhd}", buf, 0x40u);
      operator delete(v10);
      operator delete(v9);
      if (SHIBYTE(v25) < 0)
        operator delete(__p);
    }

    v11 = *(_QWORD *)this;
    *(uuid *)buf = *a2;
    buf[16] = 1;
    if (!*((_BYTE *)this + 296))
      std::__throw_bad_optional_access[abi:ne180100]();
    (*(void (**)(uint64_t, char *, _BYTE *, char *))(*(_QWORD *)v11 + 32))(v11, (char *)this + 8, buf, (char *)this + 112);
  }
  else
  {
    if (onceToken_MicroLocation_Default != -1)
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_75);
    v12 = (id)logObject_MicroLocation_Default;
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      v13 = operator new(0x28uLL);
      __p = v13;
      v25 = xmmword_241BB2320;
      *v13 = 0u;
      v13[1] = 0u;
      *(_QWORD *)((char *)v13 + 29) = 0;
      boost::uuids::to_chars<char *>((uint64_t)this + 8, v13);
      if (v25 >= 0)
        v14 = (char *)&__p;
      else
        v14 = (char *)__p;
      v15 = (_QWORD *)((char *)this + 40);
      if (*((char *)this + 63) < 0)
        v15 = (_QWORD *)*v15;
      v16 = operator new(0x28uLL);
      v22 = v16;
      v23 = xmmword_241BB2320;
      *v16 = 0u;
      v16[1] = 0u;
      *(_QWORD *)((char *)v16 + 29) = 0;
      boost::uuids::to_chars<char *>((uint64_t)a2, v16);
      v17 = (char *)&v22;
      if (v23 < 0)
        v17 = (char *)v22;
      *(_DWORD *)buf = 68289794;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)&buf[8] = 2082;
      *(_QWORD *)&buf[10] = "";
      v27 = 2082;
      v28 = v14;
      v29 = 2082;
      v30 = v15;
      v31 = 2082;
      v32 = v17;
      _os_log_impl(&dword_2419D9000, v12, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"CLMiLoService tried to send cached results to client but no cache available:\", \"ServiceId\":%{public, location:escape_only}s, \"ClientId\":%{public, location:escape_only}s, \"RequestId\":%{public, location:escape_only}s}", buf, 0x30u);
      if (SHIBYTE(v23) < 0)
        operator delete(v22);
      if (SHIBYTE(v25) < 0)
        operator delete(__p);
    }

    if (onceToken_MicroLocation_Default != -1)
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_75);
    v18 = (id)logObject_MicroLocation_Default;
    if (os_signpost_enabled(v18))
    {
      v19 = (char *)operator new(0x28uLL);
      *(_QWORD *)(v19 + 29) = 0;
      *(_OWORD *)v19 = 0u;
      *((_OWORD *)v19 + 1) = 0u;
      boost::uuids::to_chars<char *>((uint64_t)this + 8, v19);
      v20 = (_QWORD *)((char *)this + 40);
      if (*((char *)this + 63) < 0)
        v20 = (_QWORD *)*v20;
      v21 = (char *)operator new(0x28uLL);
      *(_QWORD *)(v21 + 29) = 0;
      *(_OWORD *)v21 = 0u;
      *((_OWORD *)v21 + 1) = 0u;
      boost::uuids::to_chars<char *>((uint64_t)a2, v21);
      *(_DWORD *)buf = 68289794;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)&buf[8] = 2082;
      *(_QWORD *)&buf[10] = "";
      v27 = 2082;
      v28 = v19;
      v29 = 2082;
      v30 = v20;
      v31 = 2082;
      v32 = v21;
      _os_signpost_emit_with_name_impl(&dword_2419D9000, v18, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "CLMiLoService tried to send cached results to client but no cache available:", "{\"msg%{public}.0s\":\"CLMiLoService tried to send cached results to client but no cache available:\", \"ServiceId\":%{public, location:escape_only}s, \"ClientId\":%{public, location:escape_only}s, \"RequestId\":%{public, location:escape_only}s}", buf, 0x30u);
      operator delete(v21);
      operator delete(v19);
    }

  }
}

void sub_241AF4AE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  void *v19;
  void *v20;
  void *v21;

  operator delete(v19);
  operator delete(v21);

  _Unwind_Resume(a1);
}

void CLMiLoService::ingestLocalizationResults(int64x2_t *this, CLMicroLocationResultToPublish *a2, unsigned __int8 a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  __int128 v8;
  BOOL v9;
  NSObject *v10;
  _OWORD *v11;
  char *v12;
  _OWORD *v13;
  char *v14;
  uint64_t v15;
  NSObject *v16;
  _OWORD *v17;
  char *v18;
  _OWORD *v19;
  char *v20;
  _OWORD *v21;
  char *v22;
  NSObject *v23;
  char *v24;
  char *v25;
  char *v26;
  NSObject *v27;
  _OWORD *v28;
  char *v29;
  _OWORD *v30;
  char *v31;
  _OWORD *v32;
  char *v33;
  uint64_t v34;
  int64x2_t *v35;
  void *v36;
  __int128 v37;
  void *v38;
  __int128 v39;
  void *v40;
  __int128 v41;
  void *v42[9];
  char v43;
  char v44;
  _BYTE v45[56];
  void *v46;
  void *v47;
  __int128 v48;
  _BYTE buf[18];
  __int16 v50;
  char *v51;
  __int16 v52;
  char *v53;
  __int16 v54;
  char *v55;
  void *v56;
  char v57;
  char v58;
  _BYTE v59[56];
  void *__p;
  void *v61;
  __int128 v62;
  __int128 v63;
  uint64_t v64;

  v64 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)&v63 = a4;
  *((_QWORD *)&v63 + 1) = a5;
  if (!this[5].i64[1])
  {
    v7 = a3;
    if (a3
      && (!this[28].i8[9]
       || !this[28].i8[8]
       || (ULSettings::get<ULSettings::ForcePredictionForLowLatencyServiceEnabled>() & 1) == 0))
    {
      CLMicroLocationResultToPublish::CLMicroLocationResultToPublish((CLMicroLocationResultToPublish *)v42, a2);
      v8 = v63;
      CLMicroLocationResultToPublish::CLMicroLocationResultToPublish((CLMicroLocationResultToPublish *)buf, (const CLMicroLocationResultToPublish *)v42);
      v62 = v8;
      std::optional<CachedPrediction>::operator=[abi:ne180100]<CachedPrediction,void>((uint64_t)this[7].i64, (uint64_t)buf);
      if (__p)
      {
        v61 = __p;
        operator delete(__p);
      }
      if (v59[40])
        std::__hash_table<std::__hash_value_type<std::string,AnchorValueStatistics>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AnchorValueStatistics>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AnchorValueStatistics>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,AnchorValueStatistics>>>::~__hash_table((uint64_t)v59);
      if (v58 && v57 < 0)
        operator delete(v56);
      if (*(_QWORD *)buf)
      {
        *(_QWORD *)&buf[8] = *(_QWORD *)buf;
        operator delete(*(void **)buf);
      }
      if (v46)
      {
        v47 = v46;
        operator delete(v46);
      }
      if (v45[40])
        std::__hash_table<std::__hash_value_type<std::string,AnchorValueStatistics>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AnchorValueStatistics>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AnchorValueStatistics>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,AnchorValueStatistics>>>::~__hash_table((uint64_t)v45);
      if (v44 && v43 < 0)
        operator delete(v42[7]);
      if (v42[0])
      {
        v42[1] = v42[0];
        operator delete(v42[0]);
      }
    }
    v35 = this + 22;
    if (this[23].i8[0]
      && (this[22].i64[0] == (_QWORD)v63 ? (v9 = this[22].i64[1] == *((_QWORD *)&v63 + 1)) : (v9 = 0), v9))
    {
      this[23].i8[0] = 0;
      if (v7)
      {
        while (this[21].i64[1])
        {
          v48 = *(_OWORD *)(*(_QWORD *)(this[19].i64[1] + 8 * (this[21].i64[0] / 0x78uLL))
                          + 34 * (this[21].i64[0] % 0x78uLL));
          if (onceToken_MicroLocation_Default != -1)
            dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_75);
          v27 = (id)logObject_MicroLocation_Default;
          if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
          {
            v28 = operator new(0x28uLL);
            v40 = v28;
            v41 = xmmword_241BB2320;
            *v28 = 0u;
            v28[1] = 0u;
            *(_QWORD *)((char *)v28 + 29) = 0;
            boost::uuids::to_chars<char *>((uint64_t)&this->i64[1], v28);
            if (v41 >= 0)
              v29 = (char *)&v40;
            else
              v29 = (char *)v40;
            v30 = operator new(0x28uLL);
            v38 = v30;
            v39 = xmmword_241BB2320;
            *v30 = 0u;
            v30[1] = 0u;
            *(_QWORD *)((char *)v30 + 29) = 0;
            boost::uuids::to_chars<char *>((uint64_t)&v63, v30);
            if (v39 >= 0)
              v31 = (char *)&v38;
            else
              v31 = (char *)v38;
            v32 = operator new(0x28uLL);
            v36 = v32;
            v37 = xmmword_241BB2320;
            *v32 = 0u;
            v32[1] = 0u;
            *(_QWORD *)((char *)v32 + 29) = 0;
            boost::uuids::to_chars<char *>((uint64_t)&v48, v32);
            v33 = (char *)&v36;
            if (v37 < 0)
              v33 = (char *)v36;
            *(_DWORD *)buf = 68289794;
            *(_DWORD *)&buf[4] = 0;
            *(_WORD *)&buf[8] = 2082;
            *(_QWORD *)&buf[10] = "";
            v50 = 2082;
            v51 = v29;
            v52 = 2082;
            v53 = v31;
            v54 = 2082;
            v55 = v33;
            _os_log_impl(&dword_2419D9000, v27, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLMiLoService received localization results, sending results to client: \", \"ServiceId\":%{public, location:escape_only}s, \"LocalizationId\":%{public, location:escape_only}s, \"RequestId\":%{public, location:escape_only}s}", buf, 0x30u);
            if (SHIBYTE(v37) < 0)
              operator delete(v36);
            if (SHIBYTE(v39) < 0)
              operator delete(v38);
            if (SHIBYTE(v41) < 0)
              operator delete(v40);
          }

          v34 = this->i64[0];
          *(_OWORD *)buf = v48;
          buf[16] = 1;
          (*(void (**)(uint64_t, __int8 *, _BYTE *, CLMicroLocationResultToPublish *))(*(_QWORD *)v34 + 32))(v34, &this->i8[8], buf, a2);
          this[21] = vaddq_s64(this[21], (int64x2_t)xmmword_241BB4160);
          std::deque<CLMiLoService::OutstandingRequest>::__maybe_remove_front_spare[abi:ne180100]((uint64_t)this[19].i64, 1);
        }
      }
      else
      {
        CLMiLoService::releaseOutstandingPredictionRequests(this, 3);
      }
    }
    else if (v7 && this[28].i8[9])
    {
      if (onceToken_MicroLocation_Default != -1)
        dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_75);
      v10 = (id)logObject_MicroLocation_Default;
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
      {
        v11 = operator new(0x28uLL);
        v40 = v11;
        v41 = xmmword_241BB2320;
        *v11 = 0u;
        v11[1] = 0u;
        *(_QWORD *)((char *)v11 + 29) = 0;
        boost::uuids::to_chars<char *>((uint64_t)&this->i64[1], v11);
        if (v41 >= 0)
          v12 = (char *)&v40;
        else
          v12 = (char *)v40;
        v13 = operator new(0x28uLL);
        v38 = v13;
        v39 = xmmword_241BB2320;
        *v13 = 0u;
        v13[1] = 0u;
        *(_QWORD *)((char *)v13 + 29) = 0;
        boost::uuids::to_chars<char *>((uint64_t)&v63, v13);
        v14 = (char *)&v38;
        if (v39 < 0)
          v14 = (char *)v38;
        *(_DWORD *)buf = 68289538;
        *(_DWORD *)&buf[4] = 0;
        *(_WORD *)&buf[8] = 2082;
        *(_QWORD *)&buf[10] = "";
        v50 = 2082;
        v51 = v12;
        v52 = 2082;
        v53 = v14;
        _os_log_impl(&dword_2419D9000, v10, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLMiLoService received localization results, reporting to client with service updating params\", \"ServiceId\":%{public, location:escape_only}s, \"LocalizationId\":%{public, location:escape_only}s}", buf, 0x26u);
        if (SHIBYTE(v39) < 0)
          operator delete(v38);
        if (SHIBYTE(v41) < 0)
          operator delete(v40);
      }

      v15 = this->i64[0];
      *(_OWORD *)buf = v63;
      buf[16] = 1;
      (*(void (**)(uint64_t, __int8 *, _BYTE *, CLMicroLocationResultToPublish *))(*(_QWORD *)v15 + 32))(v15, &this->i8[8], buf, a2);
    }
    if (this[23].i8[0])
    {
      if (onceToken_MicroLocation_Default != -1)
        dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_75);
      v16 = (id)logObject_MicroLocation_Default;
      if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
      {
        v17 = operator new(0x28uLL);
        v40 = v17;
        v41 = xmmword_241BB2320;
        *v17 = 0u;
        v17[1] = 0u;
        *(_QWORD *)((char *)v17 + 29) = 0;
        boost::uuids::to_chars<char *>((uint64_t)&this->i64[1], v17);
        if (v41 >= 0)
          v18 = (char *)&v40;
        else
          v18 = (char *)v40;
        if (!this[23].i8[0])
          std::__throw_bad_optional_access[abi:ne180100]();
        v19 = operator new(0x28uLL);
        v38 = v19;
        v39 = xmmword_241BB2320;
        *v19 = 0u;
        v19[1] = 0u;
        *(_QWORD *)((char *)v19 + 29) = 0;
        boost::uuids::to_chars<char *>((uint64_t)v35, v19);
        if (v39 >= 0)
          v20 = (char *)&v38;
        else
          v20 = (char *)v38;
        v21 = operator new(0x28uLL);
        v36 = v21;
        v37 = xmmword_241BB2320;
        *v21 = 0u;
        v21[1] = 0u;
        *(_QWORD *)((char *)v21 + 29) = 0;
        boost::uuids::to_chars<char *>((uint64_t)&v63, v21);
        v22 = (char *)&v36;
        if (v37 < 0)
          v22 = (char *)v36;
        *(_DWORD *)buf = 68289794;
        *(_DWORD *)&buf[4] = 0;
        *(_WORD *)&buf[8] = 2082;
        *(_QWORD *)&buf[10] = "";
        v50 = 2082;
        v51 = v18;
        v52 = 2082;
        v53 = v20;
        v54 = 2082;
        v55 = v22;
        _os_log_impl(&dword_2419D9000, v16, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"CLMiLoService received localization results with unexpected / unmatching ID\", \"ServiceId\":%{public, location:escape_only}s, \"Expected localization ID\":%{public, location:escape_only}s, \"Received trigger ID\":%{public, location:escape_only}s}", buf, 0x30u);
        if (SHIBYTE(v37) < 0)
          operator delete(v36);
        if (SHIBYTE(v39) < 0)
          operator delete(v38);
        if (SHIBYTE(v41) < 0)
          operator delete(v40);
      }

      if (onceToken_MicroLocation_Default != -1)
        dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_75);
      v23 = (id)logObject_MicroLocation_Default;
      if (os_signpost_enabled(v23))
      {
        v24 = (char *)operator new(0x28uLL);
        *(_QWORD *)(v24 + 29) = 0;
        *(_OWORD *)v24 = 0u;
        *((_OWORD *)v24 + 1) = 0u;
        boost::uuids::to_chars<char *>((uint64_t)&this->i64[1], v24);
        if (!this[23].i8[0])
          std::__throw_bad_optional_access[abi:ne180100]();
        v25 = (char *)operator new(0x28uLL);
        *(_QWORD *)(v25 + 29) = 0;
        *(_OWORD *)v25 = 0u;
        *((_OWORD *)v25 + 1) = 0u;
        boost::uuids::to_chars<char *>((uint64_t)v35, v25);
        v26 = (char *)operator new(0x28uLL);
        *(_QWORD *)(v26 + 29) = 0;
        *(_OWORD *)v26 = 0u;
        *((_OWORD *)v26 + 1) = 0u;
        boost::uuids::to_chars<char *>((uint64_t)&v63, v26);
        *(_DWORD *)buf = 68289794;
        *(_DWORD *)&buf[4] = 0;
        *(_WORD *)&buf[8] = 2082;
        *(_QWORD *)&buf[10] = "";
        v50 = 2082;
        v51 = v24;
        v52 = 2082;
        v53 = v25;
        v54 = 2082;
        v55 = v26;
        _os_signpost_emit_with_name_impl(&dword_2419D9000, v23, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "CLMiLoService received localization results with unexpected / unmatching ID", "{\"msg%{public}.0s\":\"CLMiLoService received localization results with unexpected / unmatching ID\", \"ServiceId\":%{public, location:escape_only}s, \"Expected localization ID\":%{public, location:escape_only}s, \"Received trigger ID\":%{public, location:escape_only}s}", buf, 0x30u);
        operator delete(v26);
        operator delete(v25);
        operator delete(v24);
      }

      if (this[23].i8[0])
        this[23].i8[0] = 0;
      CLMiLoService::releaseOutstandingPredictionRequests(this, 3);
    }
    CLMiLoService::applyRecentChangesToModel((CLMiLoService *)this);
  }
}

void sub_241AF5484(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,char a55)
{
  void *v55;
  void *v56;

  operator delete(v56);
  if (a31 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

uint64_t ULSettings::get<ULSettings::ForcePredictionForLowLatencyServiceEnabled>()
{
  void *v0;
  void *v1;
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;

  +[ULDefaultsSingleton shared](ULDefaultsSingleton, "shared");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "defaultsDictionary");
  v1 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "ULForcePredictionForLowLatencyServiceEnabled");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "objectForKey:", v2);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  if (v3 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
    v4 = objc_msgSend(v3, "BOOLValue");
  else
    v4 = objc_msgSend(MEMORY[0x24BDBD1C8], "BOOLValue");
  v5 = v4;

  return v5;
}

void sub_241AF56BC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

uint64_t std::optional<CachedPrediction>::operator=[abi:ne180100]<CachedPrediction,void>(uint64_t a1, uint64_t a2)
{
  __int128 v4;

  if (*(_BYTE *)(a1 + 184))
  {
    std::vector<CLMicroLocationResultInternal>::__move_assign(a1, (__n128 *)a2);
    v4 = *(_OWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 33) = *(_OWORD *)(a2 + 33);
    *(_OWORD *)(a1 + 24) = v4;
    std::__optional_storage_base<std::string,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::string,false>>(a1 + 56, (__n128 *)(a2 + 56));
    std::__optional_storage_base<std::unordered_map<std::string,AnchorValueStatistics>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::unordered_map<std::string,AnchorValueStatistics>,false>>(a1 + 88, a2 + 88);
    *(_DWORD *)(a1 + 136) = *(_DWORD *)(a2 + 136);
    std::vector<CLMicroLocationResultInternal>::__move_assign(a1 + 144, (__n128 *)(a2 + 144));
    *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
  }
  else
  {
    std::__construct_at[abi:ne180100]<CachedPrediction,CachedPrediction,CachedPrediction*>(a1, a2);
    *(_BYTE *)(a1 + 184) = 1;
  }
  return a1;
}

void CLMiLoService::releaseOutstandingPredictionRequests(int64x2_t *a1, int a2)
{
  uint64_t v4;
  NSObject *v5;
  char *v6;
  _BYTE *v7;
  _BOOL4 v8;
  uint64_t v9;
  int v10;
  _DWORD *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uuid *v16;
  const uuid *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  void *v21;
  uint64_t v22;
  __int128 v23;
  char v24;
  char v25;
  __int128 v26;
  uint64_t v27;
  void *v28;
  void *v29;
  uint64_t v30;
  _BYTE __p[24];
  char v32;
  uint8_t buf[8];
  _BYTE v34[10];
  __int16 v35;
  _BYTE *v36;
  __int16 v37;
  _BOOL4 v38;
  __int16 v39;
  _BOOL4 v40;
  void *v41;
  char v42;
  char v43;
  _BYTE v44[56];
  void *v45;
  void *v46;
  uint64_t v47;

  v47 = *MEMORY[0x24BDAC8D0];
  v4 = 29;
  if (!a2)
    v4 = -1;
  v19 = v4;
  if (a1[21].i64[1])
  {
    if (onceToken_MicroLocation_Default != -1)
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_75);
    v5 = (id)logObject_MicroLocation_Default;
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      v6 = (char *)operator new(0x28uLL);
      *(_QWORD *)__p = v6;
      *(_OWORD *)&__p[8] = xmmword_241BB2320;
      *(_OWORD *)v6 = 0u;
      *((_OWORD *)v6 + 1) = 0u;
      *(_QWORD *)(v6 + 29) = 0;
      boost::uuids::to_chars<char *>((uint64_t)&a1->i64[1], v6);
      v7 = __p;
      if (__p[23] < 0)
        v7 = *(_BYTE **)__p;
      v8 = a1[21].i64[1] != 0;
      *(_DWORD *)buf = 68289794;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)v34 = 2082;
      *(_QWORD *)&v34[2] = "";
      v35 = 2082;
      v36 = v7;
      v37 = 1026;
      v38 = v8;
      v39 = 1026;
      v40 = a2 == 0;
      _os_log_impl(&dword_2419D9000, v5, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLMiLoService releasing prediction requsts: \", \"ServiceId\":%{public, location:escape_only}s, \"NumRequests\":%{public}hhd, \"Success\":%{public}hhd}", buf, 0x28u);
      if ((__p[23] & 0x80000000) != 0)
        operator delete(*(void **)__p);
    }

  }
  if ((CLMicroLocationUtils::stopReasonToConfidenceReason(a2) & 0xFF00000000) != 0)
  {
    v9 = CLMicroLocationUtils::stopReasonToConfidenceReason(a2);
    v10 = v9;
    if ((v9 & 0xFF00000000) == 0)
      std::__throw_bad_optional_access[abi:ne180100]();
    v11 = operator new(4uLL);
    *v11 = v10;
    v12 = (uint64_t)(v11 + 1);
  }
  else
  {
    v12 = 0;
    v11 = 0;
  }
  while (a1[21].i64[1])
  {
    v13 = a1[21].u64[0];
    v14 = *(_QWORD *)(a1[19].i64[1] + 8 * (v13 / 0x78));
    v15 = v13 % 0x78;
    v16 = (uuid *)(v14 + 34 * v15);
    if (!a2)
    {
      v17 = (const uuid *)(v14 + 34 * v15);
      if (v17[2].var0[0])
        CLMiLoService::addNewTruthLabelToModelIfAppropriate((CLMiLoService *)a1, v16, v17 + 1);
    }
    (*(void (**)(uint64_t, uint64_t *, uuid *, uint64_t))(*(_QWORD *)a1->i64[0] + 40))(a1->i64[0], &a1->i64[1], v16, v19);
    v29 = 0;
    v30 = 0;
    v27 = 0;
    v28 = 0;
    v26 = 0uLL;
    LOBYTE(v23) = 0;
    v25 = 0;
    __p[0] = 0;
    v32 = 0;
    v21 = 0;
    v22 = 0;
    v20 = 0;
    std::vector<CLMicroLocationProto::ConfidenceReason>::__init_with_size[abi:ne180100]<CLMicroLocationProto::ConfidenceReason*,CLMicroLocationProto::ConfidenceReason*>(&v20, v11, v12, (v12 - (uint64_t)v11) >> 2);
    CLMicroLocationResultToPublish::CLMicroLocationResultToPublish((uint64_t)buf, (uint64_t)&v28, &v26, 0, &v23, (uint64_t)__p, 0, (uint64_t)&v20);
    if (v20)
    {
      v21 = v20;
      operator delete(v20);
    }
    if (v32)
      std::__hash_table<std::__hash_value_type<std::string,AnchorValueStatistics>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AnchorValueStatistics>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AnchorValueStatistics>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,AnchorValueStatistics>>>::~__hash_table((uint64_t)__p);
    if (v25 && v24 < 0)
      operator delete((void *)v23);
    if (v28)
    {
      v29 = v28;
      operator delete(v28);
    }
    v18 = a1->i64[0];
    *(uuid *)__p = *v16;
    __p[16] = 1;
    (*(void (**)(uint64_t, uint64_t *, _BYTE *, uint8_t *))(*(_QWORD *)v18 + 32))(v18, &a1->i64[1], __p, buf);
    a1[21] = vaddq_s64(a1[21], (int64x2_t)xmmword_241BB4160);
    std::deque<CLMiLoService::OutstandingRequest>::__maybe_remove_front_spare[abi:ne180100]((uint64_t)a1[19].i64, 1);
    if (v45)
    {
      v46 = v45;
      operator delete(v45);
    }
    if (v44[40])
      std::__hash_table<std::__hash_value_type<std::string,AnchorValueStatistics>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AnchorValueStatistics>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AnchorValueStatistics>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,AnchorValueStatistics>>>::~__hash_table((uint64_t)v44);
    if (v43 && v42 < 0)
      operator delete(v41);
    if (*(_QWORD *)buf)
    {
      *(_QWORD *)v34 = *(_QWORD *)buf;
      operator delete(*(void **)buf);
    }
  }
  if (v11)
    operator delete(v11);
}

void sub_241AF5B64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,int a34,__int16 a35,char a36,char a37)
{
  void *v37;
  void *v38;

  operator delete(v38);

  _Unwind_Resume(a1);
}

void CLMiLoService::applyRecentChangesToModel(CLMiLoService *this)
{
  unint64_t v1;
  NSObject *v2;
  NSObject *v3;
  NSObject *v4;
  NSObject *v6;
  char *v7;
  uint64_t v8;
  NSObject *v9;
  int v10;
  int v11;
  __int16 v12;
  const char *v13;
  __int16 v14;
  char *v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  v1 = *((_QWORD *)this + 3);
  if (v1 >= 4)
  {
    if (v1 == 4)
    {
      if (onceToken_MicroLocation_Default != -1)
        dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_75);
      v6 = (id)logObject_MicroLocation_Default;
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
      {
        v7 = (char *)operator new(0x28uLL);
        *(_QWORD *)(v7 + 29) = 0;
        *(_OWORD *)v7 = 0u;
        *((_OWORD *)v7 + 1) = 0u;
        boost::uuids::to_chars<char *>((uint64_t)this + 8, v7);
        v10 = 68289283;
        v11 = 0;
        v12 = 2082;
        v13 = "";
        v14 = 2081;
        v15 = v7;
        _os_log_impl(&dword_2419D9000, v6, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"applying model with recent changes\", \"ServiceUUID\":%{private, location:escape_only}s}", (uint8_t *)&v10, 0x1Cu);
        operator delete(v7);
      }

      v8 = *((_QWORD *)this + 12);
      if (v8)
      {
        if (*(_BYTE *)(v8 + 192))
        {
          CLMiLoService::applyRecentLabelsToLSL(this);
        }
        else if (*(_BYTE *)(v8 + 288))
        {
          CLMiLoService::applyRecentLabelsToBlueAtlasModel(this);
        }
        else
        {
          _CLLogObjectForCategory_MicroLocation_Default();
          v9 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
          {
            LOWORD(v10) = 0;
            _os_log_impl(&dword_2419D9000, v9, OS_LOG_TYPE_ERROR, "applyRecentChangesToModel, model has no LSL or Blue Atlas data", (uint8_t *)&v10, 2u);
          }

        }
      }
    }
    else if (v1 == 5)
    {
      if (onceToken_MicroLocation_Default != -1)
        dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_75);
      v3 = logObject_MicroLocation_Default;
      if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_FAULT))
      {
        v10 = 68289026;
        v11 = 0;
        v12 = 2082;
        v13 = "";
        _os_log_impl(&dword_2419D9000, v3, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"applyRecentChangesToModel, received invalid serviceType = ULServiceTypeMax\"}", (uint8_t *)&v10, 0x12u);
      }
      if (onceToken_MicroLocation_Default != -1)
        dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_75);
      v4 = logObject_MicroLocation_Default;
      if (os_signpost_enabled((os_log_t)logObject_MicroLocation_Default))
      {
        v10 = 68289026;
        v11 = 0;
        v12 = 2082;
        v13 = "";
        _os_signpost_emit_with_name_impl(&dword_2419D9000, v4, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "applyRecentChangesToModel, received invalid serviceType = ULServiceTypeMax", "{\"msg%{public}.0s\":\"applyRecentChangesToModel, received invalid serviceType = ULServiceTypeMax\"}", (uint8_t *)&v10, 0x12u);
      }
    }
  }
  else
  {
    if (onceToken_MicroLocation_Default != -1)
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_75);
    v2 = logObject_MicroLocation_Default;
    if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEBUG))
    {
      v10 = 68289282;
      v11 = 0;
      v12 = 2082;
      v13 = "";
      v14 = 2050;
      v15 = (char *)v1;
      _os_log_impl(&dword_2419D9000, v2, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"applying model with recent changes is not applicable\", \"Service Type\":%{public}lu}", (uint8_t *)&v10, 0x1Cu);
    }
  }
}

void sub_241AF5F54(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  operator delete(v2);

  _Unwind_Resume(a1);
}

void CLMiLoService::invalidateCachedPrediction(CLMiLoService *this)
{
  std::__optional_destruct_base<CachedPrediction,false>::reset[abi:ne180100]((uint64_t)this + 112);
}

void CLMiLoService::notifyInvalidConfidence(uint64_t *a1, int a2)
{
  NSObject *v4;
  _OWORD *v5;
  void *p_p;
  _QWORD *v7;
  _DWORD *v8;
  uint64_t v9;
  void *v10;
  void *v11;
  _DWORD *v12;
  __int128 v13;
  char v14;
  char v15;
  __int128 v16;
  uint64_t v17;
  void *v18;
  void *v19;
  uint64_t v20;
  void *__p;
  __int128 v22;
  char v23;
  uint8_t buf[8];
  _BYTE v25[10];
  __int16 v26;
  void *v27;
  __int16 v28;
  _QWORD *v29;
  void *v30;
  char v31;
  char v32;
  _BYTE v33[56];
  void *v34;
  void *v35;
  uint64_t v36;

  v36 = *MEMORY[0x24BDAC8D0];
  if (!a1[11] && *((_BYTE *)a1 + 457))
  {
    if (onceToken_MicroLocation_Default != -1)
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_75);
    v4 = (id)logObject_MicroLocation_Default;
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      v5 = operator new(0x28uLL);
      __p = v5;
      v22 = xmmword_241BB2320;
      *v5 = 0u;
      v5[1] = 0u;
      *(_QWORD *)((char *)v5 + 29) = 0;
      boost::uuids::to_chars<char *>((uint64_t)(a1 + 1), v5);
      p_p = __p;
      if (v22 >= 0)
        p_p = &__p;
      v7 = a1 + 5;
      if (*((char *)a1 + 63) < 0)
        v7 = (_QWORD *)*v7;
      *(_DWORD *)buf = 68289538;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)v25 = 2082;
      *(_QWORD *)&v25[2] = "";
      v26 = 2082;
      v27 = p_p;
      v28 = 2082;
      v29 = v7;
      _os_log_impl(&dword_2419D9000, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLMiLoService sending invalid confidence empty results to client: \", \"ServiceId\":%{public, location:escape_only}s, \"ClientId\":%{public, location:escape_only}s}", buf, 0x26u);
      if (SHIBYTE(v22) < 0)
        operator delete(__p);
    }

    v19 = 0;
    v20 = 0;
    v17 = 0;
    v18 = 0;
    v16 = 0uLL;
    LOBYTE(v13) = 0;
    v15 = 0;
    LOBYTE(__p) = 0;
    v23 = 0;
    v8 = operator new(4uLL);
    v10 = v8;
    *v8 = a2;
    v11 = v8 + 1;
    v12 = v8 + 1;
    CLMicroLocationResultToPublish::CLMicroLocationResultToPublish((uint64_t)buf, (uint64_t)&v18, &v16, 0, &v13, (uint64_t)&__p, 0, (uint64_t)&v10);
    if (v10)
    {
      v11 = v10;
      operator delete(v10);
    }
    if (v23)
      std::__hash_table<std::__hash_value_type<std::string,AnchorValueStatistics>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AnchorValueStatistics>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AnchorValueStatistics>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,AnchorValueStatistics>>>::~__hash_table((uint64_t)&__p);
    if (v15 && v14 < 0)
      operator delete((void *)v13);
    if (v18)
    {
      v19 = v18;
      operator delete(v18);
    }
    v9 = *a1;
    __p = 0;
    *(_QWORD *)&v22 = 0;
    BYTE8(v22) = 1;
    (*(void (**)(uint64_t, uint64_t *, void **, uint8_t *))(*(_QWORD *)v9 + 32))(v9, a1 + 1, &__p, buf);
    if (v34)
    {
      v35 = v34;
      operator delete(v34);
    }
    if (v33[40])
      std::__hash_table<std::__hash_value_type<std::string,AnchorValueStatistics>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AnchorValueStatistics>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AnchorValueStatistics>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,AnchorValueStatistics>>>::~__hash_table((uint64_t)v33);
    if (v32 && v31 < 0)
      operator delete(v30);
    if (*(_QWORD *)buf)
    {
      *(_QWORD *)v25 = *(_QWORD *)buf;
      operator delete(*(void **)buf);
    }
  }
}

void sub_241AF6218(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  void *v29;
  void *v30;

  operator delete(v30);

  _Unwind_Resume(a1);
}

void CLMiLoService::sendInitialBlueAtlasPrediction(CLMiLoService *this)
{
  uint64_t v2;
  NSObject *v3;
  char *v4;
  _BYTE *v5;
  _QWORD *v6;
  char *v7;
  _BYTE *v8;
  uint64_t v9;
  char v10;
  char v11;
  NSObject *v12;
  char *v13;
  NSObject *v14;
  char *v15;
  uint64_t v16;
  void *v17;
  void *v18;
  uint64_t v19;
  __int128 v20;
  char v21;
  char v22;
  __int128 v23;
  uint64_t v24;
  void *v25;
  void *v26;
  uint64_t v27;
  _BYTE __p[28];
  char v29;
  uint8_t buf[8];
  _BYTE v31[10];
  __int16 v32;
  _BYTE *v33;
  __int16 v34;
  _QWORD *v35;
  __int16 v36;
  _BYTE *v37;
  void *v38;
  char v39;
  char v40;
  _BYTE v41[56];
  void *v42;
  void *v43;
  _BYTE v44[24];
  __int128 v45;
  uint64_t v46;

  v46 = *MEMORY[0x24BDAC8D0];
  if (*((_QWORD *)this + 11))
    return;
  v45 = 0uLL;
  *(_DWORD *)buf = 0;
  boost::uuids::detail::random_provider_base::random_provider_base((boost::uuids::detail::random_provider_base *)buf);
  *(_QWORD *)&v45 = boost::uuids::random_generator_pure::operator()((uint64_t)buf);
  *((_QWORD *)&v45 + 1) = v2;
  boost::uuids::detail::random_provider_base::destroy((boost::uuids::detail::random_provider_base *)buf);
  if (onceToken_MicroLocation_Default != -1)
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_75);
  v3 = (id)logObject_MicroLocation_Default;
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    v4 = (char *)operator new(0x28uLL);
    *(_QWORD *)__p = v4;
    *(_OWORD *)&__p[8] = xmmword_241BB2320;
    *(_OWORD *)v4 = 0u;
    *((_OWORD *)v4 + 1) = 0u;
    *(_QWORD *)(v4 + 29) = 0;
    boost::uuids::to_chars<char *>((uint64_t)this + 8, v4);
    if (__p[23] >= 0)
      v5 = __p;
    else
      v5 = *(_BYTE **)__p;
    v6 = (_QWORD *)((char *)this + 40);
    if (*((char *)this + 63) < 0)
      v6 = (_QWORD *)*v6;
    v7 = (char *)operator new(0x28uLL);
    *(_QWORD *)v44 = v7;
    *(_OWORD *)&v44[8] = xmmword_241BB2320;
    *(_OWORD *)v7 = 0u;
    *((_OWORD *)v7 + 1) = 0u;
    *(_QWORD *)(v7 + 29) = 0;
    boost::uuids::to_chars<char *>((uint64_t)&v45, v7);
    v8 = v44;
    if (v44[23] < 0)
      v8 = *(_BYTE **)v44;
    *(_DWORD *)buf = 68289794;
    *(_DWORD *)&buf[4] = 0;
    *(_WORD *)v31 = 2082;
    *(_QWORD *)&v31[2] = "";
    v32 = 2082;
    v33 = v5;
    v34 = 2082;
    v35 = v6;
    v36 = 2082;
    v37 = v8;
    _os_log_impl(&dword_2419D9000, v3, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLMiLoService sending initial empty prediction to BlueAtlas client: \", \"ServiceId\":%{public, location:escape_only}s, \"ClientId\":%{public, location:escape_only}s, \"Trigger UUID\":%{public, location:escape_only}s}", buf, 0x30u);
    if ((v44[23] & 0x80000000) != 0)
      operator delete(*(void **)v44);
    if ((__p[23] & 0x80000000) != 0)
      operator delete(*(void **)__p);
  }

  v26 = 0;
  v27 = 0;
  v24 = 0;
  v25 = 0;
  v23 = 0uLL;
  LOBYTE(v20) = 0;
  v22 = 0;
  __p[0] = 0;
  v29 = 0;
  v18 = 0;
  v19 = 0;
  v17 = 0;
  CLMicroLocationResultToPublish::CLMicroLocationResultToPublish((uint64_t)buf, (uint64_t)&v25, &v23, 0, &v20, (uint64_t)__p, 1, (uint64_t)&v17);
  if (v17)
  {
    v18 = v17;
    operator delete(v17);
  }
  if (v29)
    std::__hash_table<std::__hash_value_type<std::string,AnchorValueStatistics>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AnchorValueStatistics>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AnchorValueStatistics>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,AnchorValueStatistics>>>::~__hash_table((uint64_t)__p);
  if (v22 && v21 < 0)
    operator delete((void *)v20);
  if (v25)
  {
    v26 = v25;
    operator delete(v25);
  }
  v9 = *(_QWORD *)this;
  *(_OWORD *)v44 = *(_OWORD *)((char *)this + 8);
  CLMicroLocationClientUtils::getClientIdAndServiceUuid((const void **)this + 5, (uint64_t)v44, (std::string *)__p);
  v10 = (*(uint64_t (**)(uint64_t, _BYTE *, __int128 *))(*(_QWORD *)v9 + 104))(v9, __p, &v45);
  v11 = v10;
  if ((__p[23] & 0x80000000) == 0)
  {
    if ((v10 & 1) != 0)
      goto LABEL_38;
LABEL_29:
    if (onceToken_MicroLocation_Default != -1)
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_75);
    v12 = (id)logObject_MicroLocation_Default;
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      v13 = (char *)operator new(0x28uLL);
      *(_QWORD *)(v13 + 29) = 0;
      *(_OWORD *)v13 = 0u;
      *((_OWORD *)v13 + 1) = 0u;
      boost::uuids::to_chars<char *>((uint64_t)&v45, v13);
      *(_QWORD *)__p = 68289282;
      *(_WORD *)&__p[8] = 2082;
      *(_QWORD *)&__p[10] = "";
      *(_WORD *)&__p[18] = 2082;
      *(_QWORD *)&__p[20] = v13;
      _os_log_impl(&dword_2419D9000, v12, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"CLMiLoService failed to add trigger for future labeling: \", \"Trigger UUID\":%{public, location:escape_only}s}", __p, 0x1Cu);
      operator delete(v13);
    }

    if (onceToken_MicroLocation_Default != -1)
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_75);
    v14 = (id)logObject_MicroLocation_Default;
    if (os_signpost_enabled(v14))
    {
      v15 = (char *)operator new(0x28uLL);
      *(_QWORD *)(v15 + 29) = 0;
      *(_OWORD *)v15 = 0u;
      *((_OWORD *)v15 + 1) = 0u;
      boost::uuids::to_chars<char *>((uint64_t)&v45, v15);
      *(_QWORD *)__p = 68289282;
      *(_WORD *)&__p[8] = 2082;
      *(_QWORD *)&__p[10] = "";
      *(_WORD *)&__p[18] = 2082;
      *(_QWORD *)&__p[20] = v15;
      _os_signpost_emit_with_name_impl(&dword_2419D9000, v14, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "CLMiLoService failed to add trigger for future labeling: ", "{\"msg%{public}.0s\":\"CLMiLoService failed to add trigger for future labeling: \", \"Trigger UUID\":%{public, location:escape_only}s}", __p, 0x1Cu);
      operator delete(v15);
    }

    goto LABEL_38;
  }
  operator delete(*(void **)__p);
  if ((v11 & 1) == 0)
    goto LABEL_29;
LABEL_38:
  v16 = *(_QWORD *)this;
  *(_OWORD *)__p = v45;
  __p[16] = 1;
  (*(void (**)(uint64_t, char *, _BYTE *, uint8_t *))(*(_QWORD *)v16 + 32))(v16, (char *)this + 8, __p, buf);
  if (v42)
  {
    v43 = v42;
    operator delete(v42);
  }
  if (v41[40])
    std::__hash_table<std::__hash_value_type<std::string,AnchorValueStatistics>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AnchorValueStatistics>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AnchorValueStatistics>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,AnchorValueStatistics>>>::~__hash_table((uint64_t)v41);
  if (v40 && v39 < 0)
    operator delete(v38);
  if (*(_QWORD *)buf)
  {
    *(_QWORD *)v31 = *(_QWORD *)buf;
    operator delete(*(void **)buf);
  }
}

void sub_241AF6744(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34)
{
  void *v34;
  void *v35;

  operator delete(v35);

  CLMicroLocationResultToPublish::~CLMicroLocationResultToPublish((CLMicroLocationResultToPublish *)&a34);
  _Unwind_Resume(a1);
}

void CLMiLoService::getClientIdAndServiceUuid(CLMiLoService *this@<X0>, std::string *a2@<X8>)
{
  __int128 v2;
  uint64_t v3;

  v3 = *MEMORY[0x24BDAC8D0];
  v2 = *(_OWORD *)((char *)this + 8);
  CLMicroLocationClientUtils::getClientIdAndServiceUuid((const void **)this + 5, (uint64_t)&v2, a2);
}

uint64_t CLMiLoService::getModelPtr@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(this + 104);
  *a2 = *(_QWORD *)(this + 96);
  a2[1] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return this;
}

uint64_t CLMiLoService::getModel(CLMiLoService *this)
{
  return *((_QWORD *)this + 12);
}

void CLMiLoService::updateModel(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t *v3;
  NSObject *v4;
  char *v5;
  uint64_t v6;
  char *v7;
  _DWORD v8[2];
  __int16 v9;
  const char *v10;
  __int16 v11;
  char *v12;
  __int16 v13;
  char *v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  if (*a2)
  {
    v3 = a2;
    v2 = a1;
    if (onceToken_MicroLocation_Default == -1)
      goto LABEL_3;
  }
  else
  {
    CLMiLoService::updateModel();
    __break(1u);
  }
  dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_75);
LABEL_3:
  v4 = (id)logObject_MicroLocation_Default;
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    v5 = (char *)operator new(0x28uLL);
    *(_QWORD *)(v5 + 29) = 0;
    *(_OWORD *)v5 = 0u;
    *((_OWORD *)v5 + 1) = 0u;
    boost::uuids::to_chars<char *>(v2 + 8, v5);
    v6 = *v3;
    v7 = (char *)operator new(0x28uLL);
    *(_QWORD *)(v7 + 29) = 0;
    *(_OWORD *)v7 = 0u;
    *((_OWORD *)v7 + 1) = 0u;
    boost::uuids::to_chars<char *>(v6 + 448, v7);
    v8[0] = 68289538;
    v8[1] = 0;
    v9 = 2082;
    v10 = "";
    v11 = 2082;
    v12 = v5;
    v13 = 2082;
    v14 = v7;
    _os_log_impl(&dword_2419D9000, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Model updated: \", \"ServiceId\":%{public, location:escape_only}s, \"ModelId\":%{public, location:escape_only}s}", (uint8_t *)v8, 0x26u);
    operator delete(v7);
    operator delete(v5);
  }

  std::shared_ptr<CLMiLoService::ModelAndConf>::operator=[abi:ne180100]((_QWORD *)(v2 + 96), v3);
  CLMiLoService::applyRecentChangesToModel((CLMiLoService *)v2);
  CLMiLoService::loadAnchorValueStatistics((_QWORD *)v2);
  CLMiLoService::updateState((int64x2_t *)v2);
  if (*(_BYTE *)(v2 + 457))
    CLMiLoService::updateServiceUpdatingParametersIfAppropriate((CLMiLoService *)v2, *(unsigned __int8 *)(v2 + 456));
}

void sub_241AF6A3C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  operator delete(v3);
  operator delete(v2);

  _Unwind_Resume(a1);
}

_QWORD *std::shared_ptr<CLMiLoService::ModelAndConf>::operator=[abi:ne180100](_QWORD *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v4 = *a2;
  v3 = a2[1];
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = (std::__shared_weak_count *)a1[1];
  *a1 = v4;
  a1[1] = v3;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  return a1;
}

_QWORD *CLMiLoService::loadAnchorValueStatistics(_QWORD *this)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  CLMicroLocationProto::Configuration *v4;
  NSObject *v5;
  NSObject *v6;
  char *v7;
  uint64_t v8;
  CLMicroLocationProto::ClusterAnchorValueStatisticsVector *v9;
  char *v10;
  int v11;
  int v12;
  __int16 v13;
  const char *v14;
  __int16 v15;
  char *v16;
  _QWORD v17[11];
  uint64_t v18;
  char v19;
  char v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  v1 = this[12];
  if (v1)
  {
    v2 = this;
    v3 = v1 + 448;
    v4 = (CLMicroLocationProto::Configuration *)(*(_QWORD *(**)(_QWORD *__return_ptr, _QWORD, uint64_t))(*(_QWORD *)*this + 136))(v17, *this, v1 + 448);
    if (v20)
    {
      if ((v19 & 0x10) == 0)
      {
        if (onceToken_MicroLocation_Default != -1)
          dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_75);
        v5 = logObject_MicroLocation_Default;
        if (!os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_ERROR))
          return (_QWORD *)std::__optional_destruct_base<CLMicroLocationConfigurationTable::Entry,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)v17);
        LOWORD(v11) = 0;
        goto LABEL_20;
      }
      v8 = v18;
      if (!v18)
      {
        v4 = (CLMicroLocationProto::Configuration *)CLMicroLocationProto::Configuration::default_instance(v4);
        v8 = *((_QWORD *)v4 + 4);
      }
      if ((*(_BYTE *)(v8 + 32) & 2) == 0)
      {
        if (onceToken_MicroLocation_Default != -1)
          dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_75);
        v5 = logObject_MicroLocation_Default;
        if (!os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_ERROR))
          return (_QWORD *)std::__optional_destruct_base<CLMicroLocationConfigurationTable::Entry,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)v17);
        LOWORD(v11) = 0;
LABEL_20:
        _os_log_impl(&dword_2419D9000, v5, OS_LOG_TYPE_ERROR, "ClusterAnchorValueStatistics has no data", (uint8_t *)&v11, 2u);
        return (_QWORD *)std::__optional_destruct_base<CLMicroLocationConfigurationTable::Entry,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)v17);
      }
      v9 = *(CLMicroLocationProto::ClusterAnchorValueStatisticsVector **)(v8 + 8);
      if (!v9)
        v9 = *(CLMicroLocationProto::ClusterAnchorValueStatisticsVector **)(CLMicroLocationProto::AnchorValueStatisticsConfiguration::default_instance(v4)
                                                                          + 8);
      std::optional<CLMicroLocationAnchorValueStatisticsMap>::emplace[abi:ne180100]<CLMicroLocationProto::ClusterAnchorValueStatisticsVector const&,void>((CLMicroLocationAnchorValueStatisticsMap *)(v2[12] + 600), v9);
      if (onceToken_MicroLocation_Default != -1)
        dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_75);
      v6 = (id)logObject_MicroLocation_Default;
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
      {
        v10 = (char *)operator new(0x28uLL);
        *(_QWORD *)(v10 + 29) = 0;
        *(_OWORD *)v10 = 0u;
        *((_OWORD *)v10 + 1) = 0u;
        boost::uuids::to_chars<char *>(v3, v10);
        v11 = 68289282;
        v12 = 0;
        v13 = 2082;
        v14 = "";
        v15 = 2082;
        v16 = v10;
        _os_log_impl(&dword_2419D9000, v6, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"ClusterAnchorValueStatistics loaded for model\", \"ModelUUID\":%{public, location:escape_only}s}", (uint8_t *)&v11, 0x1Cu);
        operator delete(v10);
      }
    }
    else
    {
      if (onceToken_MicroLocation_Default != -1)
        dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_75);
      v6 = (id)logObject_MicroLocation_Default;
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
      {
        v7 = (char *)operator new(0x28uLL);
        *(_QWORD *)(v7 + 29) = 0;
        *(_OWORD *)v7 = 0u;
        *((_OWORD *)v7 + 1) = 0u;
        boost::uuids::to_chars<char *>(v3, v7);
        v11 = 68289282;
        v12 = 0;
        v13 = 2082;
        v14 = "";
        v15 = 2082;
        v16 = v7;
        _os_log_impl(&dword_2419D9000, v6, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"no AnchorValueStatistics for model\", \"ModelUUID\":%{public, location:escape_only}s}", (uint8_t *)&v11, 0x1Cu);
        operator delete(v7);
      }
    }

    return (_QWORD *)std::__optional_destruct_base<CLMicroLocationConfigurationTable::Entry,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)v17);
  }
  return this;
}

void sub_241AF6E08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  void *v13;
  void *v14;

  operator delete(v14);

  std::__optional_destruct_base<CLMicroLocationConfigurationTable::Entry,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&a13);
  _Unwind_Resume(a1);
}

void CLMiLoService::updateState(int64x2_t *this)
{
  CLMicroLocationModel *v2;
  uint64_t v3;

  v3 = this[5].i64[1];
  v2 = (CLMicroLocationModel *)this[6].i64[0];
  if (v2 && CLMicroLocationModel::isValid(v2) && *(_BYTE *)this[28].i64[0])
  {
    this[5].i64[1] = 0;
    if (v3)
      CLMiLoService::didStateChangeToRunning((uint64_t)this, v3);
  }
  else
  {
    this[5].i64[1] = 1;
    if (v3 != 1)
      CLMiLoService::didStateChangeToSuspended(this, v3);
  }
}

void CLMiLoService::updateServiceUpdatingParametersIfAppropriate(CLMiLoService *this, int a2)
{
  char *v2;
  NSObject *v3;
  char *v4;
  const char *v5;
  char *v6;
  int v7;
  int v8;
  __int16 v9;
  const char *v10;
  __int16 v11;
  char *v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  if (*((_BYTE *)this + 457))
  {
    if (a2 && !*((_QWORD *)this + 11))
    {
      v6 = (char *)this + 8;
      (*(void (**)(_QWORD, char *))(**(_QWORD **)this + 144))(*(_QWORD *)this, (char *)this + 8);
      if (onceToken_MicroLocation_Default != -1)
        dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_75);
      v3 = (id)logObject_MicroLocation_Default;
      if (!os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
        goto LABEL_9;
      v4 = (char *)operator new(0x28uLL);
      *(_QWORD *)(v4 + 29) = 0;
      *(_OWORD *)v4 = 0u;
      *((_OWORD *)v4 + 1) = 0u;
      boost::uuids::to_chars<char *>((uint64_t)v6, v4);
      v7 = 68289283;
      v8 = 0;
      v9 = 2082;
      v10 = "";
      v11 = 2081;
      v12 = v4;
      v5 = "{\"msg%{public}.0s\":\"Enabling Low Latency updates for Service:\", \"ServiceId\":%{private, location:escape_only}s}";
    }
    else
    {
      v2 = (char *)this + 8;
      (*(void (**)(_QWORD, char *))(**(_QWORD **)this + 152))(*(_QWORD *)this, (char *)this + 8);
      if (onceToken_MicroLocation_Default != -1)
        dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_75);
      v3 = (id)logObject_MicroLocation_Default;
      if (!os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
        goto LABEL_9;
      v4 = (char *)operator new(0x28uLL);
      *(_QWORD *)(v4 + 29) = 0;
      *(_OWORD *)v4 = 0u;
      *((_OWORD *)v4 + 1) = 0u;
      boost::uuids::to_chars<char *>((uint64_t)v2, v4);
      v7 = 68289283;
      v8 = 0;
      v9 = 2082;
      v10 = "";
      v11 = 2081;
      v12 = v4;
      v5 = "{\"msg%{public}.0s\":\"Enabling Legacy updates for Service:\", \"ServiceId\":%{private, location:escape_only}s}";
    }
    _os_log_impl(&dword_2419D9000, v3, OS_LOG_TYPE_INFO, v5, (uint8_t *)&v7, 0x1Cu);
    operator delete(v4);
LABEL_9:

  }
}

void sub_241AF70E0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  operator delete(v2);

  _Unwind_Resume(a1);
}

void CLMiLoService::releaseModel(int64x2_t *this)
{
  std::shared_ptr<CLMiLoService::ModelAndConf>::reset[abi:ne180100]((int64x2_t *)this[6].i64);
  CLMiLoService::updateState(this);
  if (this[28].i8[9])
    CLMiLoService::updateServiceUpdatingParametersIfAppropriate((CLMiLoService *)this, 0);
}

void CLMiLoService::applyRecentLabelsToLSL(CLMiLoService *this)
{
  uint64_t v1;
  uint64_t v2;
  double v3;
  uint64_t v4;
  double v5;
  uint64_t v6;
  NSObject *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  NSObject *v15;
  char *v16;
  _BYTE *v17;
  _OWORD *v18;
  char *p_p;
  NSObject *v20;
  char *v21;
  _BYTE *v22;
  _OWORD *v23;
  char *v24;
  char *v25;
  char *v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char *v31;
  char *v32;
  char *v33;
  char *v34;
  char *v35;
  char *v36;
  char *v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  char *v42;
  char *v43;
  char *v44;
  char *v45;
  char *v46;
  NSObject *v47;
  NSObject *v48;
  const char *v49;
  const char *v50;
  NSObject *v51;
  uint64_t i;
  NSObject *v53;
  char *v54;
  char *v55;
  _BYTE *v56;
  _OWORD *v57;
  void *v58;
  uint64_t v59;
  _OWORD *v60;
  void *v61;
  void *v62;
  void *v63;
  void *v64;
  void *v65;
  unsigned int v66;
  NSObject *v67;
  unsigned int v68;
  char *v69;
  uint64_t v70;
  unsigned int v71;
  unsigned int v72;
  _QWORD *v73;
  _QWORD *v74;
  char *v75;
  NSObject *v76;
  char *v77;
  _BYTE *v78;
  _OWORD *v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  _OWORD *v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  unint64_t v88;
  char *v89;
  char *v90;
  char *v91;
  char *v92;
  char *v93;
  NSObject *v94;
  _QWORD *v95;
  char *v96;
  NSObject *v97;
  uint64_t v98;
  uint64_t v100;
  void *v101;
  __int128 v102;
  void *v103;
  __int128 v104;
  void *__p;
  __int128 v106;
  void *v107;
  char *v108;
  char *v109;
  void *v110;
  char *v111;
  char *v112;
  uint64_t v113;
  uint64_t v114;
  _BYTE v115[24];
  _BYTE buf[18];
  __int16 v117;
  uint64_t v118;
  __int16 v119;
  char *v120;
  __int16 v121;
  void *v122;
  __int16 v123;
  void *v124;
  _BYTE v125[24];
  uint64_t v126;

  v126 = *MEMORY[0x24BDAC8D0];
  v1 = *((_QWORD *)this + 12);
  if (!v1)
  {
    if (onceToken_MicroLocation_Default != -1)
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_75);
    v47 = logObject_MicroLocation_Default;
    if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_ERROR))
    {
      *(_QWORD *)buf = 68289026;
      *(_WORD *)&buf[8] = 2082;
      *(_QWORD *)&buf[10] = "";
      _os_log_impl(&dword_2419D9000, v47, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"applyRecentLabelsToLSL, no current model\"}", buf, 0x12u);
    }
    if (onceToken_MicroLocation_Default != -1)
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_75);
    v48 = logObject_MicroLocation_Default;
    if (!os_signpost_enabled((os_log_t)logObject_MicroLocation_Default))
      return;
    *(_QWORD *)buf = 68289026;
    *(_WORD *)&buf[8] = 2082;
    *(_QWORD *)&buf[10] = "";
    v49 = "applyRecentLabelsToLSL, no current model";
    v50 = "{\"msg%{public}.0s\":\"applyRecentLabelsToLSL, no current model\"}";
LABEL_99:
    _os_signpost_emit_with_name_impl(&dword_2419D9000, v48, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, v49, v50, buf, 0x12u);
    return;
  }
  if (!*(_BYTE *)(v1 + 192))
  {
    if (onceToken_MicroLocation_Default != -1)
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_75);
    v51 = logObject_MicroLocation_Default;
    if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_ERROR))
    {
      *(_QWORD *)buf = 68289026;
      *(_WORD *)&buf[8] = 2082;
      *(_QWORD *)&buf[10] = "";
      _os_log_impl(&dword_2419D9000, v51, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"applyRecentLabelsToLSL, model has no location similarity list\"}", buf, 0x12u);
    }
    if (onceToken_MicroLocation_Default != -1)
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_75);
    v48 = logObject_MicroLocation_Default;
    if (!os_signpost_enabled((os_log_t)logObject_MicroLocation_Default))
      return;
    *(_QWORD *)buf = 68289026;
    *(_WORD *)&buf[8] = 2082;
    *(_QWORD *)&buf[10] = "";
    v49 = "applyRecentLabelsToLSL, model has no location similarity list";
    v50 = "{\"msg%{public}.0s\":\"applyRecentLabelsToLSL, model has no location similarity list\"}";
    goto LABEL_99;
  }
  v2 = 176;
  if (!*(_BYTE *)(v1 + 184))
    v2 = 592;
  v3 = *(double *)(v1 + v2);
  v4 = *(_QWORD *)this;
  *(_OWORD *)buf = *(_OWORD *)((char *)this + 8);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, _BYTE *, double))(*(_QWORD *)v4 + 128))(&v113, v4, buf, v3);
  if (v113 == v114)
  {
    if (onceToken_MicroLocation_Default != -1)
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_75);
    v67 = logObject_MicroLocation_Default;
    if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
    {
      *(_QWORD *)buf = 68289026;
      *(_WORD *)&buf[8] = 2082;
      *(_QWORD *)&buf[10] = "";
      _os_log_impl(&dword_2419D9000, v67, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"applyRecentLabelsToLSL, no label entries for model\"}", buf, 0x12u);
    }
  }
  else
  {
    v5 = cl::chrono::CFAbsoluteTimeClock::now();
    v6 = *((_QWORD *)this + 12);
    if (!*(_BYTE *)(v6 + 184))
      *(_BYTE *)(v6 + 184) = 1;
    *(double *)(v6 + 176) = v5;
    v100 = *((_QWORD *)this + 12);
    if (onceToken_MicroLocation_Default != -1)
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_75);
    v7 = (id)logObject_MicroLocation_Default;
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      v8 = (uint64_t)(*(_QWORD *)(v100 + 104) - *(_QWORD *)(v100 + 96)) >> 4;
      *(_QWORD *)buf = 68289282;
      *(_WORD *)&buf[8] = 2082;
      *(_QWORD *)&buf[10] = "";
      v117 = 2050;
      v118 = v8;
      _os_log_impl(&dword_2419D9000, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"applyRecentLabelsToLSL, number of LSL items\", \"before update\":%{public}lu}", buf, 0x1Cu);
    }

    v110 = 0;
    v111 = 0;
    v112 = 0;
    v107 = 0;
    v108 = 0;
    v109 = 0;
    v9 = v113;
    v10 = v114;
    if (v113 != v114)
    {
      do
      {
        v12 = *(_QWORD **)(v100 + 96);
        v11 = *(_QWORD **)(v100 + 104);
        v13 = (_QWORD *)(v9 + 40);
        if (v12 != v11)
        {
          while (*v12 != *v13 || v12[1] != *(_QWORD *)(v9 + 48))
          {
            v12 += 2;
            if (v12 == v11)
            {
              v12 = *(_QWORD **)(v100 + 104);
              break;
            }
          }
        }
        if (v12 == v11)
        {
          v25 = v111;
          if (v111 >= v112)
          {
            v27 = (v111 - (_BYTE *)v110) >> 4;
            v28 = v27 + 1;
            if ((unint64_t)(v27 + 1) >> 60)
              goto LABEL_184;
            v29 = v112 - (_BYTE *)v110;
            if ((v112 - (_BYTE *)v110) >> 3 > v28)
              v28 = v29 >> 3;
            if ((unint64_t)v29 >= 0x7FFFFFFFFFFFFFF0)
              v30 = 0xFFFFFFFFFFFFFFFLL;
            else
              v30 = v28;
            if (v30)
              v31 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<boost::uuids::uuid>>((uint64_t)&v112, v30);
            else
              v31 = 0;
            v32 = &v31[16 * v27];
            *(_OWORD *)v32 = *(_OWORD *)v13;
            v34 = (char *)v110;
            v33 = v111;
            v35 = v32;
            if (v111 != v110)
            {
              do
              {
                *((_OWORD *)v35 - 1) = *((_OWORD *)v33 - 1);
                v35 -= 16;
                v33 -= 16;
              }
              while (v33 != v34);
              v33 = (char *)v110;
            }
            v26 = v32 + 16;
            v110 = v35;
            v111 = v32 + 16;
            v112 = &v31[16 * v30];
            if (v33)
              operator delete(v33);
          }
          else
          {
            *(_OWORD *)v111 = *(_OWORD *)v13;
            v26 = v25 + 16;
          }
          v111 = v26;
          v36 = v108;
          if (v108 >= v109)
          {
            v38 = (v108 - (_BYTE *)v107) >> 4;
            v39 = v38 + 1;
            if ((unint64_t)(v38 + 1) >> 60)
LABEL_184:
              std::vector<CLMicroLocationProto::ConfidenceReason>::__throw_length_error[abi:ne180100]();
            v40 = v109 - (_BYTE *)v107;
            if ((v109 - (_BYTE *)v107) >> 3 > v39)
              v39 = v40 >> 3;
            if ((unint64_t)v40 >= 0x7FFFFFFFFFFFFFF0)
              v41 = 0xFFFFFFFFFFFFFFFLL;
            else
              v41 = v39;
            if (v41)
              v42 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<boost::uuids::uuid>>((uint64_t)&v109, v41);
            else
              v42 = 0;
            v43 = &v42[16 * v38];
            *(_OWORD *)v43 = *(_OWORD *)v9;
            v45 = (char *)v107;
            v44 = v108;
            v46 = v43;
            if (v108 != v107)
            {
              do
              {
                *((_OWORD *)v46 - 1) = *((_OWORD *)v44 - 1);
                v46 -= 16;
                v44 -= 16;
              }
              while (v44 != v45);
              v44 = (char *)v107;
            }
            v37 = v43 + 16;
            v107 = v46;
            v108 = v43 + 16;
            v109 = &v42[16 * v41];
            if (v44)
              operator delete(v44);
          }
          else
          {
            *(_OWORD *)v108 = *(_OWORD *)v9;
            v37 = v36 + 16;
          }
          v108 = v37;
        }
        else
        {
          if (onceToken_MicroLocation_Default != -1)
            dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_75);
          v15 = (id)logObject_MicroLocation_Default;
          if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
          {
            v16 = (char *)operator new(0x28uLL);
            *(_QWORD *)v125 = v16;
            *(_OWORD *)&v125[8] = xmmword_241BB2320;
            *(_OWORD *)v16 = 0u;
            *((_OWORD *)v16 + 1) = 0u;
            *(_QWORD *)(v16 + 29) = 0;
            boost::uuids::to_chars<char *>(v9 + 40, v16);
            if (v125[23] >= 0)
              v17 = v125;
            else
              v17 = *(_BYTE **)v125;
            v18 = operator new(0x28uLL);
            __p = v18;
            v106 = xmmword_241BB2320;
            *v18 = 0u;
            v18[1] = 0u;
            *(_QWORD *)((char *)v18 + 29) = 0;
            boost::uuids::to_chars<char *>(v9, v18);
            if (v106 >= 0)
              p_p = (char *)&__p;
            else
              p_p = (char *)__p;
            *(_QWORD *)buf = 68289538;
            *(_WORD *)&buf[8] = 2082;
            *(_QWORD *)&buf[10] = "";
            v117 = 2082;
            v118 = (uint64_t)v17;
            v119 = 2082;
            v120 = p_p;
            _os_log_impl(&dword_2419D9000, v15, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"CLMiLoService::applyRecentLabelsToLSL, tried to apply a label which is already in the LSL\", \"LabelUUID\":%{public, location:escape_only}s, \"TriggerUUID\":%{public, location:escape_only}s}", buf, 0x26u);
            if (SHIBYTE(v106) < 0)
              operator delete(__p);
            if ((v125[23] & 0x80000000) != 0)
              operator delete(*(void **)v125);
          }

          if (onceToken_MicroLocation_Default != -1)
            dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_75);
          v20 = (id)logObject_MicroLocation_Default;
          if (os_signpost_enabled(v20))
          {
            v21 = (char *)operator new(0x28uLL);
            *(_QWORD *)v125 = v21;
            *(_OWORD *)&v125[8] = xmmword_241BB2320;
            *(_OWORD *)v21 = 0u;
            *((_OWORD *)v21 + 1) = 0u;
            *(_QWORD *)(v21 + 29) = 0;
            boost::uuids::to_chars<char *>(v9 + 40, v21);
            if (v125[23] >= 0)
              v22 = v125;
            else
              v22 = *(_BYTE **)v125;
            v23 = operator new(0x28uLL);
            __p = v23;
            v106 = xmmword_241BB2320;
            *v23 = 0u;
            v23[1] = 0u;
            *(_QWORD *)((char *)v23 + 29) = 0;
            boost::uuids::to_chars<char *>(v9, v23);
            if (v106 >= 0)
              v24 = (char *)&__p;
            else
              v24 = (char *)__p;
            *(_QWORD *)buf = 68289538;
            *(_WORD *)&buf[8] = 2082;
            *(_QWORD *)&buf[10] = "";
            v117 = 2082;
            v118 = (uint64_t)v22;
            v119 = 2082;
            v120 = v24;
            _os_signpost_emit_with_name_impl(&dword_2419D9000, v20, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "CLMiLoService::applyRecentLabelsToLSL, tried to apply a label which is already in the LSL", "{\"msg%{public}.0s\":\"CLMiLoService::applyRecentLabelsToLSL, tried to apply a label which is already in the LSL\", \"LabelUUID\":%{public, location:escape_only}s, \"TriggerUUID\":%{public, location:escape_only}s}", buf, 0x26u);
            if (SHIBYTE(v106) < 0)
              operator delete(__p);
            if ((v125[23] & 0x80000000) != 0)
              operator delete(*(void **)v125);
          }

        }
        v9 += 64;
      }
      while (v9 != v10);
      v9 = v113;
      for (i = v114; i != v9; i -= 64)
      {
        if (*(char *)(i - 25) < 0)
          operator delete(*(void **)(i - 48));
      }
    }
    v114 = v9;
    std::vector<CLMicroLocationRecordingLabelsTable::Entry>::shrink_to_fit(&v113);
    if (v111 == v110)
    {
      if (onceToken_MicroLocation_Default != -1)
        dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_75);
      v94 = (id)logObject_MicroLocation_Default;
      if (os_log_type_enabled(v94, OS_LOG_TYPE_DEFAULT))
      {
        v95 = (_QWORD *)((char *)this + 40);
        if (*((char *)this + 63) < 0)
          v95 = (_QWORD *)*v95;
        *(_OWORD *)v125 = *(_OWORD *)((char *)this + 8);
        v96 = (char *)operator new(0x28uLL);
        *(_QWORD *)(v96 + 29) = 0;
        *(_OWORD *)v96 = 0u;
        *((_OWORD *)v96 + 1) = 0u;
        boost::uuids::to_chars<char *>((uint64_t)v125, v96);
        *(_QWORD *)buf = 68289539;
        *(_WORD *)&buf[8] = 2082;
        *(_QWORD *)&buf[10] = "";
        v117 = 2081;
        v118 = (uint64_t)v95;
        v119 = 2081;
        v120 = v96;
        _os_log_impl(&dword_2419D9000, v94, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"applyRecentLabelsToLSL, no labels from database to apply to LSL\", \"ClientID\":%{private, location:escape_only}s, \"ClientUUID\":%{private, location:escape_only}s}", buf, 0x26u);
        operator delete(v96);
      }

    }
    else
    {
      (*(void (**)(_BYTE *__return_ptr, _QWORD, void **))(**(_QWORD **)this + 120))(v125, *(_QWORD *)this, &v107);
      if (onceToken_MicroLocation_Default != -1)
        dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_75);
      v53 = (id)logObject_MicroLocation_Default;
      if (os_log_type_enabled(v53, OS_LOG_TYPE_DEFAULT))
      {
        v54 = (char *)this + 40;
        if (*((char *)this + 63) < 0)
          v54 = *(char **)v54;
        v56 = v110;
        v55 = v111;
        *(_OWORD *)v115 = *(_OWORD *)((char *)this + 8);
        v57 = operator new(0x28uLL);
        __p = v57;
        v106 = xmmword_241BB2320;
        *v57 = 0u;
        v57[1] = 0u;
        *(_QWORD *)((char *)v57 + 29) = 0;
        boost::uuids::to_chars<char *>((uint64_t)v115, v57);
        if (v106 >= 0)
          v58 = &__p;
        else
          v58 = __p;
        v59 = *((_QWORD *)this + 12);
        v60 = operator new(0x28uLL);
        v103 = v60;
        v104 = xmmword_241BB2320;
        *v60 = 0u;
        v60[1] = 0u;
        *(_QWORD *)((char *)v60 + 29) = 0;
        boost::uuids::to_chars<char *>(v59 + 448, v60);
        v61 = &v103;
        if (v104 < 0)
          v61 = v103;
        *(_DWORD *)buf = 68290051;
        *(_DWORD *)&buf[4] = 0;
        *(_WORD *)&buf[8] = 2082;
        *(_QWORD *)&buf[10] = "";
        v117 = 2050;
        v118 = (v55 - v56) >> 4;
        v119 = 2081;
        v120 = v54;
        v121 = 2081;
        v122 = v58;
        v123 = 2081;
        v124 = v61;
        _os_log_impl(&dword_2419D9000, v53, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"applyRecentLabelsToLSL, found labels from database to apply to LSL\", \"NumLabels\":%{public}lu, \"ClientID\":%{private, location:escape_only}s, \"ClientUUID\":%{private, location:escape_only}s, \"ModelUUID\":%{private, location:escape_only}s}", buf, 0x3Au);
        if (SHIBYTE(v104) < 0)
          operator delete(v103);
        if (SHIBYTE(v106) < 0)
          operator delete(__p);
      }

      __p = 0;
      v106 = 0uLL;
      v103 = 0;
      v104 = 0uLL;
      +[ULDefaultsSingleton shared](ULDefaultsSingleton, "shared");
      v62 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v62, "defaultsDictionary");
      v63 = (void *)objc_claimAutoreleasedReturnValue();

      objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "ULSimilarityListMaxNumberOfItems");
      v64 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v63, "objectForKey:", v64);
      v65 = (void *)objc_claimAutoreleasedReturnValue();
      if (v65 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
        v66 = objc_msgSend(v65, "intValue");
      else
        v66 = objc_msgSend(&unk_2511EDCC0, "intValue");
      v68 = v66;

      v69 = (char *)v110;
      if (v111 != v110)
      {
        v70 = 0;
        v71 = 0;
        v72 = 0;
        do
        {
          v73 = (char *)v107 + 16 * v70;
          v74 = std::__hash_table<std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>>>::find<boost::uuids::uuid>(v125, v73);
          if (onceToken_MicroLocation_Default != -1)
            dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_75);
          v75 = &v69[16 * v70];
          v76 = (id)logObject_MicroLocation_Default;
          if (os_log_type_enabled(v76, OS_LOG_TYPE_DEFAULT))
          {
            v77 = (char *)operator new(0x28uLL);
            *(_QWORD *)v115 = v77;
            *(_OWORD *)&v115[8] = xmmword_241BB2320;
            *(_OWORD *)v77 = 0u;
            *((_OWORD *)v77 + 1) = 0u;
            *(_QWORD *)(v77 + 29) = 0;
            boost::uuids::to_chars<char *>((uint64_t)v75, v77);
            if (v115[23] >= 0)
              v78 = v115;
            else
              v78 = *(_BYTE **)v115;
            v79 = operator new(0x28uLL);
            v101 = v79;
            v102 = xmmword_241BB2320;
            *v79 = 0u;
            v79[1] = 0u;
            *(_QWORD *)((char *)v79 + 29) = 0;
            boost::uuids::to_chars<char *>((uint64_t)v73, v79);
            v80 = (char *)&v101;
            if (v102 < 0)
              v80 = (char *)v101;
            *(_QWORD *)buf = 68289795;
            *(_WORD *)&buf[8] = 2082;
            *(_QWORD *)&buf[10] = "";
            v117 = 2081;
            v118 = (uint64_t)v78;
            v119 = 2081;
            v120 = v80;
            v121 = 1026;
            LODWORD(v122) = v74 != 0;
            _os_log_impl(&dword_2419D9000, v76, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"applyRecentLabelsToLSL, per label info\", \"LabelUUID\":%{private, location:escape_only}s, \"TriggerUUID\":%{private, location:escape_only}s, \"validFingerprint\":%{public}hhd}", buf, 0x2Cu);
            if (SHIBYTE(v102) < 0)
              operator delete(v101);
            if ((v115[23] & 0x80000000) != 0)
              operator delete(*(void **)v115);
          }

          if (v74)
          {
            v81 = v106;
            if ((unint64_t)v106 >= *((_QWORD *)&v106 + 1))
            {
              v82 = std::vector<CLMicroLocationFingerprint>::__push_back_slow_path<CLMicroLocationFingerprint const&>((uint64_t *)&__p, (uint64_t)(v74 + 4));
            }
            else
            {
              std::allocator<CLMicroLocationFingerprint>::construct[abi:ne180100]<CLMicroLocationFingerprint,CLMicroLocationFingerprint const&>((uint64_t)&v106 + 8, v106, (uint64_t)(v74 + 4));
              v82 = v81 + 192;
            }
            *(_QWORD *)&v106 = v82;
            v83 = v104;
            if ((unint64_t)v104 >= *((_QWORD *)&v104 + 1))
            {
              v85 = (uint64_t)(v104 - (_QWORD)v103) >> 4;
              v86 = v85 + 1;
              if ((unint64_t)(v85 + 1) >> 60)
                std::vector<CLMicroLocationProto::ConfidenceReason>::__throw_length_error[abi:ne180100]();
              v87 = *((_QWORD *)&v104 + 1) - (_QWORD)v103;
              if ((uint64_t)(*((_QWORD *)&v104 + 1) - (_QWORD)v103) >> 3 > v86)
                v86 = v87 >> 3;
              if ((unint64_t)v87 >= 0x7FFFFFFFFFFFFFF0)
                v88 = 0xFFFFFFFFFFFFFFFLL;
              else
                v88 = v86;
              if (v88)
                v89 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<boost::uuids::uuid>>((uint64_t)&v104 + 8, v88);
              else
                v89 = 0;
              v90 = &v89[16 * v85];
              *(_OWORD *)v90 = *(_OWORD *)v75;
              v92 = (char *)v103;
              v91 = (char *)v104;
              v93 = v90;
              if ((void *)v104 != v103)
              {
                do
                {
                  *((_OWORD *)v93 - 1) = *((_OWORD *)v91 - 1);
                  v93 -= 16;
                  v91 -= 16;
                }
                while (v91 != v92);
                v91 = (char *)v103;
              }
              v84 = v90 + 16;
              v103 = v93;
              *(_QWORD *)&v104 = v90 + 16;
              *((_QWORD *)&v104 + 1) = &v89[16 * v88];
              if (v91)
                operator delete(v91);
            }
            else
            {
              *(_OWORD *)v104 = *(_OWORD *)v75;
              v84 = (_OWORD *)(v83 + 16);
            }
            *(_QWORD *)&v104 = v84;
            ++v71;
          }
          if (v71 >= v68)
            break;
          v69 = (char *)v110;
          v70 = ++v72;
        }
        while (v72 < (unint64_t)((v111 - (_BYTE *)v110) >> 4));
      }
      CLMicroLocationModel::SimilarityListData::appendNewEvents(*((_QWORD *)this + 12) + 72, *((_QWORD *)this + 12), &__p, (uint64_t *)&v103);
      if (v103)
      {
        *(_QWORD *)&v104 = v103;
        operator delete(v103);
      }
      *(_QWORD *)buf = &__p;
      std::vector<CLMicroLocationFingerprint>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
      std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationFingerprint>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationFingerprint>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationFingerprint>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationFingerprint>>>::~__hash_table((uint64_t)v125);
    }
    if (onceToken_MicroLocation_Default != -1)
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_75);
    v97 = (id)logObject_MicroLocation_Default;
    if (os_log_type_enabled(v97, OS_LOG_TYPE_DEFAULT))
    {
      v98 = (uint64_t)(*(_QWORD *)(v100 + 104) - *(_QWORD *)(v100 + 96)) >> 4;
      *(_QWORD *)buf = 68289282;
      *(_WORD *)&buf[8] = 2082;
      *(_QWORD *)&buf[10] = "";
      v117 = 2050;
      v118 = v98;
      _os_log_impl(&dword_2419D9000, v97, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"applyRecentLabelsToLSL, number of LSL items\", \"after update\":%{public}lu}", buf, 0x1Cu);
    }

    if (v107)
    {
      v108 = (char *)v107;
      operator delete(v107);
    }
    if (v110)
    {
      v111 = (char *)v110;
      operator delete(v110);
    }
  }
  *(_QWORD *)buf = &v113;
  std::vector<CLMicroLocationRecordingLabelsTable::Entry>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
}

void sub_241AF8234(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *__p,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45)
{
  void *v45;
  void *v46;
  uint64_t v47;

  operator delete(v46);

  if (__p)
    operator delete(__p);
  if (a34)
    operator delete(a34);
  *(_QWORD *)(v47 - 208) = &a37;
  std::vector<CLMicroLocationRecordingLabelsTable::Entry>::__destroy_vector::operator()[abi:ne180100]((void ***)(v47 - 208));
  _Unwind_Resume(a1);
}

void CLMiLoService::applyRecentLabelsToBlueAtlasModel(CLMiLoService *this)
{
  uint64_t v1;
  uint64_t v3;
  double v4;
  uint64_t v5;
  double v6;
  uint64_t v7;
  _QWORD *v8;
  NSObject *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _OWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  NSObject *v18;
  _OWORD *v19;
  void *v20;
  _OWORD *v21;
  void *p_p;
  NSObject *v23;
  _OWORD *v24;
  void *v25;
  _OWORD *v26;
  void *v27;
  _OWORD *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  char *v33;
  char *v34;
  char *v35;
  char *v36;
  char *v37;
  NSObject *v38;
  NSObject *v39;
  const char *v40;
  const char *v41;
  uint64_t v42;
  uint64_t v43;
  const char *v44;
  NSObject *v45;
  uint32_t v46;
  NSObject *v47;
  uint64_t v48;
  _QWORD *v49;
  void *__p;
  __int128 v51;
  void *v52;
  __int128 v53;
  uint64_t v54;
  uint64_t v55;
  _BYTE buf[18];
  __int16 v57;
  uint64_t v58;
  __int16 v59;
  void *v60;
  uint64_t v61;

  v61 = *MEMORY[0x24BDAC8D0];
  v1 = *((_QWORD *)this + 12);
  if (v1)
  {
    if (*(_BYTE *)(v1 + 288))
    {
      v3 = 248;
      if (!*(_BYTE *)(v1 + 256))
        v3 = 592;
      v4 = *(double *)(v1 + v3);
      v5 = *(_QWORD *)this;
      *(_OWORD *)buf = *(_OWORD *)((char *)this + 8);
      (*(void (**)(uint64_t *__return_ptr, uint64_t, _BYTE *, double))(*(_QWORD *)v5 + 128))(&v54, v5, buf, v4);
      if (v54 == v55)
      {
        if (onceToken_MicroLocation_Default != -1)
          dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_75);
        v48 = logObject_MicroLocation_Default;
        if (!os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
          goto LABEL_92;
        *(_DWORD *)buf = 68289026;
        *(_DWORD *)&buf[4] = 0;
        *(_WORD *)&buf[8] = 2082;
        *(_QWORD *)&buf[10] = "";
        v44 = "{\"msg%{public}.0s\":\"applyRecentLabelsToBlueAtlasModel, no label entries for model\"}";
        v45 = v48;
        v46 = 18;
      }
      else
      {
        v6 = cl::chrono::CFAbsoluteTimeClock::now();
        v7 = *((_QWORD *)this + 12);
        if (!*(_BYTE *)(v7 + 256))
          *(_BYTE *)(v7 + 256) = 1;
        *(double *)(v7 + 248) = v6;
        v8 = (_QWORD *)*((_QWORD *)this + 12);
        if (onceToken_MicroLocation_Default != -1)
          dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_75);
        v9 = logObject_MicroLocation_Default;
        if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
        {
          v10 = (uint64_t)(v8[26] - v8[25]) >> 4;
          *(_DWORD *)buf = 68289282;
          *(_DWORD *)&buf[4] = 0;
          *(_WORD *)&buf[8] = 2082;
          *(_QWORD *)&buf[10] = "";
          v57 = 2050;
          v58 = v10;
          _os_log_impl(&dword_2419D9000, v9, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"applyRecentLabelsToBlueAtlasModel, number of labels\", \"before update\":%{public}lu}", buf, 0x1Cu);
        }
        v11 = v54;
        v12 = v55;
        if (v54 != v55)
        {
          v49 = v8 + 27;
          do
          {
            v13 = (_QWORD *)v8[25];
            v14 = (_OWORD *)v8[26];
            v15 = (_QWORD *)(v11 + 40);
            v16 = v13;
            if (v13 != (_QWORD *)v14)
            {
              while (*v16 != *v15 || v16[1] != *(_QWORD *)(v11 + 48))
              {
                v16 += 2;
                if (v16 == (_QWORD *)v14)
                {
                  v16 = (_QWORD *)v8[26];
                  break;
                }
              }
            }
            if (v16 == (_QWORD *)v14)
            {
              if ((unint64_t)v14 >= *v49)
              {
                v29 = ((char *)v14 - (char *)v13) >> 4;
                v30 = v29 + 1;
                if ((unint64_t)(v29 + 1) >> 60)
                  std::vector<CLMicroLocationProto::ConfidenceReason>::__throw_length_error[abi:ne180100]();
                v31 = *v49 - (_QWORD)v13;
                if (v31 >> 3 > v30)
                  v30 = v31 >> 3;
                if ((unint64_t)v31 >= 0x7FFFFFFFFFFFFFF0)
                  v32 = 0xFFFFFFFFFFFFFFFLL;
                else
                  v32 = v30;
                if (v32)
                  v33 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<boost::uuids::uuid>>((uint64_t)v49, v32);
                else
                  v33 = 0;
                v34 = &v33[16 * v29];
                *(_OWORD *)v34 = *(_OWORD *)v15;
                v36 = (char *)v8[25];
                v35 = (char *)v8[26];
                v37 = v34;
                if (v35 != v36)
                {
                  do
                  {
                    *((_OWORD *)v37 - 1) = *((_OWORD *)v35 - 1);
                    v37 -= 16;
                    v35 -= 16;
                  }
                  while (v35 != v36);
                  v35 = (char *)v8[25];
                }
                v28 = v34 + 16;
                v8[25] = v37;
                v8[26] = v34 + 16;
                v8[27] = &v33[16 * v32];
                if (v35)
                  operator delete(v35);
              }
              else
              {
                *v14 = *(_OWORD *)v15;
                v28 = v14 + 1;
              }
              v8[26] = v28;
            }
            else
            {
              if (onceToken_MicroLocation_Default != -1)
                dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_75);
              v18 = (id)logObject_MicroLocation_Default;
              if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
              {
                v19 = operator new(0x28uLL);
                v52 = v19;
                v53 = xmmword_241BB2320;
                *v19 = 0u;
                v19[1] = 0u;
                *(_QWORD *)((char *)v19 + 29) = 0;
                boost::uuids::to_chars<char *>(v11 + 40, v19);
                if (v53 >= 0)
                  v20 = &v52;
                else
                  v20 = v52;
                v21 = operator new(0x28uLL);
                __p = v21;
                v51 = xmmword_241BB2320;
                *v21 = 0u;
                v21[1] = 0u;
                *(_QWORD *)((char *)v21 + 29) = 0;
                boost::uuids::to_chars<char *>(v11, v21);
                p_p = &__p;
                if (v51 < 0)
                  p_p = __p;
                *(_DWORD *)buf = 68289538;
                *(_DWORD *)&buf[4] = 0;
                *(_WORD *)&buf[8] = 2082;
                *(_QWORD *)&buf[10] = "";
                v57 = 2082;
                v58 = (uint64_t)v20;
                v59 = 2082;
                v60 = p_p;
                _os_log_impl(&dword_2419D9000, v18, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"applyRecentLabelsToBlueAtlasModel, tried to apply a label which is already in the LSL\", \"LabelUUID\":%{public, location:escape_only}s, \"TriggerUUID\":%{public, location:escape_only}s}", buf, 0x26u);
                if (SHIBYTE(v51) < 0)
                  operator delete(__p);
                if (SHIBYTE(v53) < 0)
                  operator delete(v52);
              }

              if (onceToken_MicroLocation_Default != -1)
                dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_75);
              v23 = (id)logObject_MicroLocation_Default;
              if (os_signpost_enabled(v23))
              {
                v24 = operator new(0x28uLL);
                v52 = v24;
                v53 = xmmword_241BB2320;
                *v24 = 0u;
                v24[1] = 0u;
                *(_QWORD *)((char *)v24 + 29) = 0;
                boost::uuids::to_chars<char *>(v11 + 40, v24);
                if (v53 >= 0)
                  v25 = &v52;
                else
                  v25 = v52;
                v26 = operator new(0x28uLL);
                __p = v26;
                v51 = xmmword_241BB2320;
                *v26 = 0u;
                v26[1] = 0u;
                *(_QWORD *)((char *)v26 + 29) = 0;
                boost::uuids::to_chars<char *>(v11, v26);
                v27 = &__p;
                if (v51 < 0)
                  v27 = __p;
                *(_DWORD *)buf = 68289538;
                *(_DWORD *)&buf[4] = 0;
                *(_WORD *)&buf[8] = 2082;
                *(_QWORD *)&buf[10] = "";
                v57 = 2082;
                v58 = (uint64_t)v25;
                v59 = 2082;
                v60 = v27;
                _os_signpost_emit_with_name_impl(&dword_2419D9000, v23, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "applyRecentLabelsToBlueAtlasModel, tried to apply a label which is already in the LSL", "{\"msg%{public}.0s\":\"applyRecentLabelsToBlueAtlasModel, tried to apply a label which is already in the LSL\", \"LabelUUID\":%{public, location:escape_only}s, \"TriggerUUID\":%{public, location:escape_only}s}", buf, 0x26u);
                if (SHIBYTE(v51) < 0)
                  operator delete(__p);
                if (SHIBYTE(v53) < 0)
                  operator delete(v52);
              }

            }
            v11 += 64;
          }
          while (v11 != v12);
        }
        if (onceToken_MicroLocation_Default != -1)
          dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_75);
        v42 = logObject_MicroLocation_Default;
        if (!os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
          goto LABEL_92;
        v43 = (uint64_t)(v8[26] - v8[25]) >> 4;
        *(_DWORD *)buf = 68289282;
        *(_DWORD *)&buf[4] = 0;
        *(_WORD *)&buf[8] = 2082;
        *(_QWORD *)&buf[10] = "";
        v57 = 2050;
        v58 = v43;
        v44 = "{\"msg%{public}.0s\":\"applyRecentLabelsToBlueAtlasModel, number of labels\", \"after update\":%{public}lu}";
        v45 = v42;
        v46 = 28;
      }
      _os_log_impl(&dword_2419D9000, v45, OS_LOG_TYPE_DEFAULT, v44, buf, v46);
LABEL_92:
      *(_QWORD *)buf = &v54;
      std::vector<CLMicroLocationRecordingLabelsTable::Entry>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
      return;
    }
    if (onceToken_MicroLocation_Default != -1)
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_75);
    v47 = logObject_MicroLocation_Default;
    if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 68289026;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)&buf[8] = 2082;
      *(_QWORD *)&buf[10] = "";
      _os_log_impl(&dword_2419D9000, v47, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"applyRecentLabelsToBlueAtlasModel, model has no Blue Atlas data\"}", buf, 0x12u);
    }
    if (onceToken_MicroLocation_Default != -1)
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_75);
    v39 = logObject_MicroLocation_Default;
    if (os_signpost_enabled((os_log_t)logObject_MicroLocation_Default))
    {
      *(_DWORD *)buf = 68289026;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)&buf[8] = 2082;
      *(_QWORD *)&buf[10] = "";
      v40 = "applyRecentLabelsToBlueAtlasModel, model has no Blue Atlas data";
      v41 = "{\"msg%{public}.0s\":\"applyRecentLabelsToBlueAtlasModel, model has no Blue Atlas data\"}";
      goto LABEL_86;
    }
  }
  else
  {
    if (onceToken_MicroLocation_Default != -1)
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_75);
    v38 = logObject_MicroLocation_Default;
    if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 68289026;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)&buf[8] = 2082;
      *(_QWORD *)&buf[10] = "";
      _os_log_impl(&dword_2419D9000, v38, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"applyRecentLabelsToBlueAtlasModel, no current model\"}", buf, 0x12u);
    }
    if (onceToken_MicroLocation_Default != -1)
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_75);
    v39 = logObject_MicroLocation_Default;
    if (os_signpost_enabled((os_log_t)logObject_MicroLocation_Default))
    {
      *(_DWORD *)buf = 68289026;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)&buf[8] = 2082;
      *(_QWORD *)&buf[10] = "";
      v40 = "applyRecentLabelsToBlueAtlasModel, no current model";
      v41 = "{\"msg%{public}.0s\":\"applyRecentLabelsToBlueAtlasModel, no current model\"}";
LABEL_86:
      _os_signpost_emit_with_name_impl(&dword_2419D9000, v39, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, v40, v41, buf, 0x12u);
    }
  }
}

void sub_241AF8CC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,char a25,uint64_t a26,uint64_t a27,char *a28)
{
  a28 = &a25;
  std::vector<CLMicroLocationRecordingLabelsTable::Entry>::__destroy_vector::operator()[abi:ne180100]((void ***)&a28);
  _Unwind_Resume(a1);
}

uint64_t CLMiLoService::internalToExternalServiceQuality(int a1, int a2)
{
  NSObject *v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  NSObject *v9;
  _DWORD v10[2];
  __int16 v11;
  const char *v12;
  __int16 v13;
  int v14;
  __int16 v15;
  int v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  if (onceToken_MicroLocation_Default != -1)
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_75);
  v4 = logObject_MicroLocation_Default;
  if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
  {
    v10[0] = 68289538;
    v10[1] = 0;
    v11 = 2082;
    v12 = "";
    v13 = 1026;
    v14 = a1;
    v15 = 1026;
    v16 = a2;
    _os_log_impl(&dword_2419D9000, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"internalToExternalServiceQuality\", \"qualityLevel\":%{public}d, \"candidateQualityLevel\":%{public}d}", (uint8_t *)v10, 0x1Eu);
  }
  if (a1 == 3)
  {
    v5 = 29;
    if (a2 != 3)
      v5 = 30;
    v6 = a2 == 1;
    v7 = 28;
    goto LABEL_13;
  }
  if (a1 == 1)
  {
    v5 = 9;
    if (a2 != 3)
      v5 = 10;
    v6 = a2 == 1;
    v7 = 8;
LABEL_13:
    if (v6)
      return v7;
    else
      return v5;
  }
  if (onceToken_MicroLocation_Default != -1)
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_75);
  v9 = logObject_MicroLocation_Default;
  if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_ERROR))
  {
    LOWORD(v10[0]) = 0;
    _os_log_impl(&dword_2419D9000, v9, OS_LOG_TYPE_ERROR, "Service Quality is invalid", (uint8_t *)v10, 2u);
  }
  return 0;
}

CLMicroLocationAnchorValueStatisticsMap *std::optional<CLMicroLocationAnchorValueStatisticsMap>::emplace[abi:ne180100]<CLMicroLocationProto::ClusterAnchorValueStatisticsVector const&,void>(CLMicroLocationAnchorValueStatisticsMap *a1, CLMicroLocationProto::ClusterAnchorValueStatisticsVector *a2)
{
  CLMicroLocationAnchorValueStatisticsMap *result;

  if (*((_BYTE *)a1 + 40))
  {
    a1 = (CLMicroLocationAnchorValueStatisticsMap *)std::__hash_table<std::__hash_value_type<boost::uuids::uuid,std::unordered_map<std::string,AnchorValueStatistics>>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::unordered_map<std::string,AnchorValueStatistics>>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::unordered_map<std::string,AnchorValueStatistics>>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,std::unordered_map<std::string,AnchorValueStatistics>>>>::~__hash_table((uint64_t)a1);
    *((_BYTE *)a1 + 40) = 0;
  }
  result = CLMicroLocationAnchorValueStatisticsMap::CLMicroLocationAnchorValueStatisticsMap(a1, a2);
  *((_BYTE *)result + 40) = 1;
  return result;
}

uint64_t CLMiLoService::modelTypeByServiceAndLocationType(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  if ((unint64_t)(a1 - 2) < 2)
    return 1;
  if (a1 == 1)
    return 0;
  if (a1 == 4)
  {
    if (a2 == 2)
      return 3;
    else
      return 2;
  }
  else
  {
    v3 = CLMiLoService::modelTypeByServiceAndLocationType();
    return CLMiLoService::generationAlgorithmByServiceAndLocationType(v3);
  }
}

uint64_t CLMiLoService::generationAlgorithmByServiceAndLocationType(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;
  int v4;
  NSObject *v5;
  uint8_t *v6;
  NSObject *v7;
  int v8;
  int v9;
  uint8_t v10[16];
  __int16 v11;
  uint8_t buf[2];
  __int16 v13;

  v2 = a1 - 1;
  result = 4;
  switch(v2)
  {
    case 0:
      v4 = ULSettings::get<ULSettings::LearnerAlgorithm>();
      if (v4 == 1)
        return 2;
      if (!v4)
        return 1;
      if (onceToken_MicroLocation_Default != -1)
        dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_75);
      v5 = logObject_MicroLocation_Default;
      if (!os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_ERROR))
        return 1;
      v11 = 0;
      v6 = (uint8_t *)&v11;
      goto LABEL_27;
    case 1:
      return result;
    case 2:
      return 3;
    case 3:
      if (a2 == 2)
        return 5;
      v9 = ULSettings::get<ULSettings::LearnerAlgorithm>();
      if (v9 == 1)
        return 2;
      if (v9)
      {
        if (onceToken_MicroLocation_Default != -1)
          dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_75);
        v5 = logObject_MicroLocation_Default;
        if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)buf = 0;
          v6 = buf;
LABEL_27:
          _os_log_impl(&dword_2419D9000, v5, OS_LOG_TYPE_ERROR, "Get generation algorithm: Unknown learner type", v6, 2u);
        }
      }
      return 1;
    default:
      if (onceToken_MicroLocation_Default != -1)
        dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_75);
      v7 = logObject_MicroLocation_Default;
      if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)v10 = 0;
        _os_log_impl(&dword_2419D9000, v7, OS_LOG_TYPE_ERROR, "Get generation algorithm: Unknown service type", v10, 2u);
      }
      v8 = ULSettings::get<ULSettings::LearnerAlgorithm>();
      if (v8 == 1)
        return 2;
      if (!v8)
        return 1;
      if (onceToken_MicroLocation_Default != -1)
        dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_75);
      v5 = logObject_MicroLocation_Default;
      if (!os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_ERROR))
        return 1;
      v13 = 0;
      v6 = (uint8_t *)&v13;
      goto LABEL_27;
  }
}

uint64_t ULSettings::get<ULSettings::LearnerAlgorithm>()
{
  void *v0;
  void *v1;
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;

  +[ULDefaultsSingleton shared](ULDefaultsSingleton, "shared");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "defaultsDictionary");
  v1 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "ULLearnerAlgorithm");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "objectForKey:", v2);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  if (v3 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
    v4 = objc_msgSend(v3, "unsignedIntValue");
  else
    v4 = objc_msgSend(&unk_2511EDCD8, "unsignedIntValue");
  v5 = v4;

  return v5;
}

void sub_241AF9294(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

BOOL CLMiLoService::doAllowObservation(CLMiLoService *this)
{
  return *((_QWORD *)this + 12) && **((_BYTE **)this + 56) != 0;
}

void CLMiLoService::didStateChangeToRunning(uint64_t a1, int a2)
{
  NSObject *v4;
  char *v5;
  _DWORD v6[2];
  __int16 v7;
  const char *v8;
  __int16 v9;
  char *v10;
  __int16 v11;
  int v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  if (onceToken_MicroLocation_Default != -1)
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_75);
  v4 = (id)logObject_MicroLocation_Default;
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    v5 = (char *)operator new(0x28uLL);
    *(_QWORD *)(v5 + 29) = 0;
    *(_OWORD *)v5 = 0u;
    *((_OWORD *)v5 + 1) = 0u;
    boost::uuids::to_chars<char *>(a1 + 8, v5);
    v6[0] = 68289538;
    v6[1] = 0;
    v7 = 2082;
    v8 = "";
    v9 = 2082;
    v10 = v5;
    v11 = 1026;
    v12 = a2;
    _os_log_impl(&dword_2419D9000, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLMiLoService state changed to running: \", \"ServiceId\":%{public, location:escape_only}s, \"Previous state\":%{public}u}", (uint8_t *)v6, 0x22u);
    operator delete(v5);
  }

  *(_QWORD *)(a1 + 88) = 0;
}

void sub_241AF9424(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  operator delete(v2);

  _Unwind_Resume(a1);
}

void CLMiLoService::didStateChangeToSuspended(int64x2_t *a1, int a2)
{
  NSObject *v4;
  char *v5;
  int v6;
  _DWORD v7[2];
  __int16 v8;
  const char *v9;
  __int16 v10;
  char *v11;
  __int16 v12;
  int v13;
  __int16 v14;
  int v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  if (onceToken_MicroLocation_Default != -1)
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_75);
  v4 = (id)logObject_MicroLocation_Default;
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    v5 = (char *)operator new(0x28uLL);
    *(_QWORD *)(v5 + 29) = 0;
    *(_OWORD *)v5 = 0u;
    *((_OWORD *)v5 + 1) = 0u;
    boost::uuids::to_chars<char *>((uint64_t)&a1->i64[1], v5);
    v6 = a1[23].u8[0];
    v7[0] = 68289794;
    v7[1] = 0;
    v8 = 2082;
    v9 = "";
    v10 = 2082;
    v11 = v5;
    v12 = 1026;
    v13 = a2;
    v14 = 1026;
    v15 = v6;
    _os_log_impl(&dword_2419D9000, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLMiLoService state changed to suspended: \", \"ServiceId\":%{public, location:escape_only}s, \"Previous state\":%{public}u, \"localization interrupted?\":%{public}hhd}", (uint8_t *)v7, 0x28u);
    operator delete(v5);
  }

  if (a1[23].i8[0])
    a1[23].i8[0] = 0;
  CLMiLoService::releaseAllOutstandingRequestsAsFailed(a1);
}

void sub_241AF9598(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  operator delete(v2);

  _Unwind_Resume(a1);
}

void CLMiLoService::releaseAllOutstandingRequestsAsFailed(int64x2_t *this)
{
  int v2;
  _QWORD v3[3];
  uint64_t *v4;
  _QWORD *v5[2];
  int v6;

  CLMiLoService::releaseOutstandingPredictionRequests(this, 1);
  v5[0] = 0;
  v5[1] = 0;
  memset(v3, 0, sizeof(v3));
  v4 = (uint64_t *)v5;
  v6 = 2;
  v2 = 2;
  std::__tree<CLMicroLocationRecordingCompletionMetaInformation::RecordingError>::__emplace_unique_key_args<CLMicroLocationRecordingCompletionMetaInformation::RecordingError,CLMicroLocationRecordingCompletionMetaInformation::RecordingError>(&v4, &v2, &v2);
  CLMiLoService::releaseOutstandingObservationRequests(this, (uint64_t)v3);
  std::__tree<std::__value_type<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,double>,std::__map_value_compare<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,std::__value_type<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,double>,std::less<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes>,true>,std::allocator<std::__value_type<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,double>>>::destroy((uint64_t)&v4, v5[0]);
}

void sub_241AF9638(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, _QWORD *a14)
{
  uint64_t v14;

  std::__tree<std::__value_type<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,double>,std::__map_value_compare<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,std::__value_type<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,double>,std::less<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes>,true>,std::allocator<std::__value_type<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,double>>>::destroy(v14, a14);
  _Unwind_Resume(a1);
}

void CLMiLoService::addNewTruthLabelToModelIfAppropriate(CLMiLoService *this, uuid *a2, const uuid *a3)
{
  unint64_t v4;
  NSObject *v5;
  char *v6;
  NSObject *v7;
  NSObject *v8;
  NSObject *v11;
  char *v12;
  char *v13;
  uint64_t v14;
  NSObject *v15;
  int v16;
  int v17;
  __int16 v18;
  const char *v19;
  __int16 v20;
  char *v21;
  __int16 v22;
  char *v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v4 = *((_QWORD *)this + 3);
  if (v4 >= 4)
  {
    if (v4 == 4)
    {
      if (onceToken_MicroLocation_Default != -1)
        dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_75);
      v11 = (id)logObject_MicroLocation_Default;
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
      {
        v12 = (char *)operator new(0x28uLL);
        *(_QWORD *)(v12 + 29) = 0;
        *(_OWORD *)v12 = 0u;
        *((_OWORD *)v12 + 1) = 0u;
        boost::uuids::to_chars<char *>((uint64_t)a2, v12);
        v13 = (char *)operator new(0x28uLL);
        *(_QWORD *)(v13 + 29) = 0;
        *(_OWORD *)v13 = 0u;
        *((_OWORD *)v13 + 1) = 0u;
        boost::uuids::to_chars<char *>((uint64_t)a3, v13);
        v16 = 68289538;
        v17 = 0;
        v18 = 2082;
        v19 = "";
        v20 = 2082;
        v21 = v12;
        v22 = 2082;
        v23 = v13;
        _os_log_impl(&dword_2419D9000, v11, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"adding a label to the LSL out of learning flow\", \"Trigger UUID\":%{public, location:escape_only}s, \"Label UUID\":%{public, location:escape_only}s}", (uint8_t *)&v16, 0x26u);
        operator delete(v13);
        operator delete(v12);
      }

      v14 = *((_QWORD *)this + 12);
      if (v14)
      {
        if (*(_BYTE *)(v14 + 192))
        {
          CLMiLoService::addNewTruthLabelToLSL(this, a2, a3);
        }
        else if (*(_BYTE *)(v14 + 288))
        {
          CLMiLoService::addNewTruthLabelToBlueAtlasModel(this, a3);
        }
        else
        {
          _CLLogObjectForCategory_MicroLocation_Default();
          v15 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
          {
            LOWORD(v16) = 0;
            _os_log_impl(&dword_2419D9000, v15, OS_LOG_TYPE_ERROR, "addNewTruthLabelToModelIfAppropriate: model has no LSL or Blue Atlas data", (uint8_t *)&v16, 2u);
          }

        }
      }
    }
    else if (v4 == 5)
    {
      if (onceToken_MicroLocation_Default != -1)
        dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_75);
      v7 = logObject_MicroLocation_Default;
      if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_ERROR))
      {
        v16 = 68289026;
        v17 = 0;
        v18 = 2082;
        v19 = "";
        _os_log_impl(&dword_2419D9000, v7, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"should not call addNewTruthLabelToModelIfAppropriate with ULServiceTypeMax\"}", (uint8_t *)&v16, 0x12u);
      }
      if (onceToken_MicroLocation_Default != -1)
        dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_75);
      v8 = logObject_MicroLocation_Default;
      if (os_signpost_enabled((os_log_t)logObject_MicroLocation_Default))
      {
        v16 = 68289026;
        v17 = 0;
        v18 = 2082;
        v19 = "";
        _os_signpost_emit_with_name_impl(&dword_2419D9000, v8, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "should not call addNewTruthLabelToModelIfAppropriate with ULServiceTypeMax", "{\"msg%{public}.0s\":\"should not call addNewTruthLabelToModelIfAppropriate with ULServiceTypeMax\"}", (uint8_t *)&v16, 0x12u);
      }
    }
  }
  else
  {
    if (onceToken_MicroLocation_Default != -1)
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_75);
    v5 = logObject_MicroLocation_Default;
    if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEBUG))
    {
      v6 = (char *)*((unsigned int *)this + 6);
      v16 = 68289282;
      v17 = 0;
      v18 = 2082;
      v19 = "";
      v20 = 2050;
      v21 = v6;
      _os_log_impl(&dword_2419D9000, v5, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"not adding new truth label out of learning flow\", \"ServiceType\":%{public}lu}", (uint8_t *)&v16, 0x1Cu);
    }
  }
}

void sub_241AF9A04(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  operator delete(v3);
  operator delete(v2);

  _Unwind_Resume(a1);
}

void CLMiLoService::releaseOutstandingObservationRequests(_QWORD *a1, uint64_t a2)
{
  int v2;
  uint64_t v3;
  NSObject *v6;
  _OWORD *v7;
  void *p_p;
  _BOOL4 v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uuid *v13;
  const uuid *v14;
  NSObject *v15;
  _OWORD *v16;
  void *v17;
  NSObject *v18;
  const char *v19;
  _OWORD *v20;
  void *v21;
  uint64_t v22;
  void *__p;
  __int128 v24;
  uint8_t buf[4];
  int v26;
  __int16 v27;
  const char *v28;
  __int16 v29;
  void *v30;
  __int16 v31;
  _BOOL4 v32;
  __int16 v33;
  _BOOL4 v34;
  uint64_t v35;

  v35 = *MEMORY[0x24BDAC8D0];
  v2 = *(_DWORD *)(a2 + 48);
  v3 = 12;
  if (!v2)
    v3 = -1;
  v22 = v3;
  if (a1[52])
  {
    if (onceToken_MicroLocation_Default != -1)
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_75);
    v6 = (id)logObject_MicroLocation_Default;
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      v7 = operator new(0x28uLL);
      __p = v7;
      v24 = xmmword_241BB2320;
      *v7 = 0u;
      v7[1] = 0u;
      *(_QWORD *)((char *)v7 + 29) = 0;
      boost::uuids::to_chars<char *>((uint64_t)(a1 + 1), v7);
      p_p = &__p;
      if (v24 < 0)
        p_p = __p;
      v9 = a1[52] != 0;
      *(_DWORD *)buf = 68289794;
      v26 = 0;
      v27 = 2082;
      v28 = "";
      v29 = 2082;
      v30 = p_p;
      v31 = 1026;
      v32 = v9;
      v33 = 1026;
      v34 = v2 == 0;
      _os_log_impl(&dword_2419D9000, v6, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLMiLoService releasing observation requsts: \", \"ServiceId\":%{public, location:escape_only}s, \"NumRequests\":%{public}hhd, \"Success\":%{public}hhd}", buf, 0x28u);
      if (SHIBYTE(v24) < 0)
        operator delete(__p);
    }

    while (a1[52])
    {
      v10 = a1[51];
      v11 = *(_QWORD *)(a1[48] + 8 * (v10 / 0x78));
      v12 = v10 % 0x78;
      v13 = (uuid *)(v11 + 34 * (v10 % 0x78));
      if (!v2)
      {
        v14 = (const uuid *)(v11 + 34 * v12);
        if (v14[2].var0[0])
          CLMiLoService::addNewTruthLabelToModelIfAppropriate((CLMiLoService *)a1, v13, v14 + 1);
      }
      if (*(_BYTE *)(v11 + 34 * v12 + 33))
      {
        if (onceToken_MicroLocation_Default != -1)
          dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_75);
        v15 = (id)logObject_MicroLocation_Default;
        if (!os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
          goto LABEL_30;
        v16 = operator new(0x28uLL);
        __p = v16;
        v24 = xmmword_241BB2320;
        *v16 = 0u;
        v16[1] = 0u;
        *(_QWORD *)((char *)v16 + 29) = 0;
        boost::uuids::to_chars<char *>((uint64_t)v13, v16);
        v17 = &__p;
        if (v24 < 0)
          v17 = __p;
        *(_DWORD *)buf = 68289282;
        v26 = 0;
        v27 = 2082;
        v28 = "";
        v29 = 2082;
        v30 = v17;
        v18 = v15;
        v19 = "{\"msg%{public}.0s\":\"Response to client was not sent since the observation request is internal \", \"Req"
              "uestId\":%{public, location:escape_only}s}";
      }
      else
      {
        (*(void (**)(_QWORD, _QWORD *, uuid *, uint64_t))(*(_QWORD *)*a1 + 40))(*a1, a1 + 1, v13, v22);
        if (onceToken_MicroLocation_Default != -1)
          dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_75);
        v15 = (id)logObject_MicroLocation_Default;
        if (!os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
          goto LABEL_30;
        v20 = operator new(0x28uLL);
        __p = v20;
        v24 = xmmword_241BB2320;
        *v20 = 0u;
        v20[1] = 0u;
        *(_QWORD *)((char *)v20 + 29) = 0;
        boost::uuids::to_chars<char *>((uint64_t)v13, v20);
        v21 = &__p;
        if (v24 < 0)
          v21 = __p;
        *(_DWORD *)buf = 68289282;
        v26 = 0;
        v27 = 2082;
        v28 = "";
        v29 = 2082;
        v30 = v21;
        v18 = v15;
        v19 = "{\"msg%{public}.0s\":\"CLMiLoService sent response to client with: \", \"RequestId\":%{public, location:escape_only}s}";
      }
      _os_log_impl(&dword_2419D9000, v18, OS_LOG_TYPE_DEFAULT, v19, buf, 0x1Cu);
      if (SHIBYTE(v24) < 0)
        operator delete(__p);
LABEL_30:

      (*(void (**)(_QWORD, _QWORD *, uuid *, uint64_t))(*(_QWORD *)*a1 + 48))(*a1, a1 + 1, v13, a2);
      *(int64x2_t *)(a1 + 51) = vaddq_s64(*(int64x2_t *)(a1 + 51), (int64x2_t)xmmword_241BB4160);
      std::deque<CLMiLoService::OutstandingRequest>::__maybe_remove_front_spare[abi:ne180100]((uint64_t)(a1 + 47), 1);
    }
  }
}

void sub_241AF9E8C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  operator delete(v2);

  _Unwind_Resume(a1);
}

uint64_t CLMiLoService::predictionRequest(uint64_t *a1, const uuid *a2, uint64_t a3, int a4)
{
  _BOOL8 v8;
  int v9;
  NSObject *v10;
  char *v11;
  const char *v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  NSObject *v16;
  char *v17;
  char *v18;
  int v19;
  char *v20;
  int v21;
  int v22;
  int v23;
  _BYTE v25[18];
  __int16 v26;
  const char *v27;
  __int16 v28;
  char *v29;
  __int16 v30;
  char *v31;
  __int16 v32;
  int v33;
  __int16 v34;
  _BOOL4 v35;
  __int16 v36;
  int v37;
  __int16 v38;
  int v39;
  __int16 v40;
  int v41;
  __int16 v42;
  int v43;
  _BYTE __p[24];
  uint64_t v45;

  v45 = *MEMORY[0x24BDAC8D0];
  v8 = (a4 & 1) != 0 || *((_BYTE *)a1 + 296) == 0;
  if (ULSettings::get<ULSettings::ForcePredictionForLowLatencyServiceEnabled>())
  {
    v9 = *((unsigned __int8 *)a1 + 457);
    if (*((_BYTE *)a1 + 457))
      v9 = *((unsigned __int8 *)a1 + 456);
    v8 |= v9;
  }
  if (a1[11])
    goto LABEL_27;
  if (*((_BYTE *)a1 + 368))
  {
    if (onceToken_MicroLocation_Default != -1)
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_75);
    v10 = (id)logObject_MicroLocation_Default;
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      if (*((_BYTE *)a1 + 368))
      {
        v11 = (char *)operator new(0x28uLL);
        *(_QWORD *)__p = v11;
        *(_OWORD *)&__p[8] = xmmword_241BB2320;
        *(_OWORD *)v11 = 0u;
        *((_OWORD *)v11 + 1) = 0u;
        *(_QWORD *)(v11 + 29) = 0;
        boost::uuids::to_chars<char *>((uint64_t)(a1 + 44), v11);
        v12 = __p;
        if (__p[23] < 0)
          v12 = *(const char **)__p;
        *(_QWORD *)v25 = 68289282;
        *(_WORD *)&v25[8] = 2082;
        *(_QWORD *)&v25[10] = "";
        v26 = 2082;
        v27 = v12;
        _os_log_impl(&dword_2419D9000, v10, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLMiLoService reject prediction request because other request in progress\", \"LocalizationId\":%{public, location:escape_only}s}", v25, 0x1Cu);
        if ((__p[23] & 0x80000000) != 0)
          operator delete(*(void **)__p);
      }
      else
      {
        *(_QWORD *)v25 = 68289282;
        *(_WORD *)&v25[8] = 2082;
        *(_QWORD *)&v25[10] = "";
        v26 = 2082;
        v27 = "None";
        _os_log_impl(&dword_2419D9000, v10, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLMiLoService reject prediction request because other request in progress\", \"LocalizationId\":%{public, location:escape_only}s}", v25, 0x1Cu);
      }
    }

    goto LABEL_27;
  }
  v13 = *a1;
  v25[0] = 0;
  v25[16] = 0;
  (*(void (**)(_BYTE *__return_ptr, uint64_t, uint64_t *, const uuid *, _BYTE *, uint64_t, _BOOL8))(*(_QWORD *)v13 + 16))(__p, v13, a1 + 5, a2, v25, a3, v8);
  if (__p[17])
  {
    CLMiLoService::sendCachedResults((CLMiLoService *)a1, a2);
LABEL_24:
    v15 = 1;
    goto LABEL_28;
  }
  if (__p[16])
  {
    v14 = *((unsigned __int8 *)a1 + 368);
    *((_OWORD *)a1 + 22) = *(_OWORD *)__p;
    if (!v14)
      *((_BYTE *)a1 + 368) = 1;
    *(uuid *)v25 = *a2;
    v25[16] = 0;
    WORD1(v29) = 0;
    std::deque<CLMiLoService::OutstandingRequest>::push_back(a1 + 38, (uint64_t)v25);
    goto LABEL_24;
  }
LABEL_27:
  v15 = 0;
LABEL_28:
  if (onceToken_MicroLocation_Default != -1)
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_75);
  v16 = (id)logObject_MicroLocation_Default;
  if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
  {
    v17 = (char *)operator new(0x28uLL);
    *(_QWORD *)(v17 + 29) = 0;
    *(_OWORD *)v17 = 0u;
    *((_OWORD *)v17 + 1) = 0u;
    boost::uuids::to_chars<char *>((uint64_t)(a1 + 1), v17);
    v18 = (char *)operator new(0x28uLL);
    *(_QWORD *)(v18 + 29) = 0;
    *(_OWORD *)v18 = 0u;
    *((_OWORD *)v18 + 1) = 0u;
    boost::uuids::to_chars<char *>((uint64_t)a2, v18);
    v19 = *((unsigned __int8 *)a1 + 368);
    if (*((_BYTE *)a1 + 368))
    {
      v20 = (char *)operator new(0x28uLL);
      *(_QWORD *)(v20 + 29) = 0;
      *(_OWORD *)v20 = 0u;
      *((_OWORD *)v20 + 1) = 0u;
      boost::uuids::to_chars<char *>((uint64_t)(a1 + 44), v20);
    }
    else
    {
      v20 = "None";
    }
    v21 = *((_DWORD *)a1 + 22);
    v22 = *((unsigned __int8 *)a1 + 457);
    if (*((_BYTE *)a1 + 457))
      v22 = *((unsigned __int8 *)a1 + 456);
    v23 = *((unsigned __int8 *)a1 + 296);
    *(_QWORD *)v25 = 68291330;
    *(_WORD *)&v25[8] = 2082;
    *(_QWORD *)&v25[10] = "";
    v26 = 2082;
    v27 = v17;
    v28 = 2082;
    v29 = v18;
    v30 = 2082;
    v31 = v20;
    v32 = 1026;
    v33 = v21;
    v34 = 1026;
    v35 = v8;
    v36 = 1026;
    v37 = a4;
    v38 = 1026;
    v39 = v22;
    v40 = 1026;
    v41 = v23;
    v42 = 1026;
    v43 = v15;
    _os_log_impl(&dword_2419D9000, v16, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLMiLoService received prediction request: \", \"ServiceId\":%{public, location:escape_only}s, \"RequestId\":%{public, location:escape_only}s, \"LocalizationId\":%{public, location:escape_only}s, \"State\":%{public}u, \"force verdict\":%{public}hhd, \"isForcedRequest\":%{public}hhd, \"Is low latency\":%{public}hhd, \"Has valid cache\":%{public}hhd, \"Success\":%{public}hhd}", v25, 0x54u);
    if (v19)
      operator delete(v20);
    operator delete(v18);
    operator delete(v17);
  }

  return v15;
}

void sub_241AFA320(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  operator delete(v2);

  _Unwind_Resume(a1);
}

uint64_t CLMiLoService::observationRequest(uint64_t *a1, _OWORD *a2, uint64_t a3, uint64_t a4, char a5)
{
  const void *v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  NSObject *v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE __p[38];
  __int16 v22;
  const char *v23;
  __int16 v24;
  int v25;
  __int16 v26;
  int v27;
  __int128 v28;
  uint64_t v29;

  v29 = *MEMORY[0x24BDAC8D0];
  if (!a1[12] || !*(_BYTE *)a1[56])
  {
    v12 = 0;
    goto LABEL_9;
  }
  v10 = (const void *)*a1;
  v28 = *(_OWORD *)(a1 + 1);
  CLMicroLocationClientUtils::getClientIdAndServiceUuid((const void **)a1 + 5, (uint64_t)&v28, (std::string *)__p);
  v11 = (*(uint64_t (**)(const void *, _BYTE *, _OWORD *, uint64_t, uint64_t))(*(_QWORD *)v10 + 24))(v10, __p, a2, a3, a4);
  v12 = v11;
  if ((__p[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)__p);
    if (!(_DWORD)v12)
      goto LABEL_9;
    goto LABEL_8;
  }
  if ((_DWORD)v11)
  {
LABEL_8:
    v13 = *(_OWORD *)a3;
    *(_OWORD *)__p = *a2;
    *(_OWORD *)&__p[16] = v13;
    __p[32] = *(_BYTE *)(a3 + 16);
    __p[33] = a5;
    std::deque<CLMiLoService::OutstandingRequest>::push_back(a1 + 47, (uint64_t)__p);
    v12 = 1;
  }
LABEL_9:
  if (onceToken_MicroLocation_Default != -1)
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_75);
  v14 = (id)logObject_MicroLocation_Default;
  if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
  {
    v15 = (char *)operator new(0x28uLL);
    *(_QWORD *)(v15 + 29) = 0;
    *(_OWORD *)v15 = 0u;
    *((_OWORD *)v15 + 1) = 0u;
    boost::uuids::to_chars<char *>((uint64_t)(a1 + 1), v15);
    v16 = (char *)operator new(0x28uLL);
    *(_QWORD *)(v16 + 29) = 0;
    *(_OWORD *)v16 = 0u;
    *((_OWORD *)v16 + 1) = 0u;
    boost::uuids::to_chars<char *>((uint64_t)a2, v16);
    if (*(_BYTE *)(a3 + 16))
    {
      v17 = (char *)operator new(0x28uLL);
      *(_QWORD *)(v17 + 29) = 0;
      *(_OWORD *)v17 = 0u;
      *((_OWORD *)v17 + 1) = 0u;
      boost::uuids::to_chars<char *>(a3, v17);
      v18 = a1[11];
      *(_QWORD *)__p = 68290306;
      *(_WORD *)&__p[8] = 2082;
      *(_QWORD *)&__p[10] = "";
      *(_WORD *)&__p[18] = 2082;
      *(_QWORD *)&__p[20] = v15;
      *(_WORD *)&__p[28] = 2082;
      *(_QWORD *)&__p[30] = v16;
      v22 = 2082;
      v23 = v17;
      v24 = 1026;
      v25 = v18;
      v26 = 1026;
      v27 = v12;
      _os_log_impl(&dword_2419D9000, v14, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLMiLoService received observation request: \", \"ServiceId\":%{public, location:escape_only}s, \"RequestId\":%{public, location:escape_only}s, \"PlaceId\":%{public, location:escape_only}s, \"State\":%{public}u, \"Success\":%{public}hhd}", __p, 0x3Cu);
      operator delete(v17);
    }
    else
    {
      v19 = a1[11];
      *(_QWORD *)__p = 68290306;
      *(_WORD *)&__p[8] = 2082;
      *(_QWORD *)&__p[10] = "";
      *(_WORD *)&__p[18] = 2082;
      *(_QWORD *)&__p[20] = v15;
      *(_WORD *)&__p[28] = 2082;
      *(_QWORD *)&__p[30] = v16;
      v22 = 2082;
      v23 = "None";
      v24 = 1026;
      v25 = v19;
      v26 = 1026;
      v27 = v12;
      _os_log_impl(&dword_2419D9000, v14, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLMiLoService received observation request: \", \"ServiceId\":%{public, location:escape_only}s, \"RequestId\":%{public, location:escape_only}s, \"PlaceId\":%{public, location:escape_only}s, \"State\":%{public}u, \"Success\":%{public}hhd}", __p, 0x3Cu);
    }
    operator delete(v16);
    operator delete(v15);
  }

  return v12;
}

void sub_241AFA678(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  void *v14;
  void *v15;
  void *v16;
  void *v17;

  operator delete(v16);
  operator delete(v17);
  operator delete(v15);

  _Unwind_Resume(a1);
}

void CLMiLoService::didRecordingStop(_QWORD *a1, uint64_t a2)
{
  NSObject *v4;
  char *v5;
  _BOOL4 v6;
  _DWORD v7[2];
  __int16 v8;
  const char *v9;
  __int16 v10;
  char *v11;
  __int16 v12;
  _BOOL4 v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  if (onceToken_MicroLocation_Default != -1)
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_75);
  v4 = (id)logObject_MicroLocation_Default;
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    v5 = (char *)operator new(0x28uLL);
    *(_QWORD *)(v5 + 29) = 0;
    *(_OWORD *)v5 = 0u;
    *((_OWORD *)v5 + 1) = 0u;
    boost::uuids::to_chars<char *>((uint64_t)(a1 + 1), v5);
    v6 = *(_DWORD *)(a2 + 48) == 0;
    v7[0] = 68289538;
    v7[1] = 0;
    v8 = 2082;
    v9 = "";
    v10 = 2082;
    v11 = v5;
    v12 = 1026;
    v13 = v6;
    _os_log_impl(&dword_2419D9000, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLMiLoService received recording stop: \", \"ServiceId\":%{public, location:escape_only}s, \"Success\":%{public}hhd}", (uint8_t *)v7, 0x22u);
    operator delete(v5);
  }

  CLMiLoService::releaseOutstandingObservationRequests(a1, a2);
}

void sub_241AFA824(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  operator delete(v2);

  _Unwind_Resume(a1);
}

uint64_t CLMiLoService::getCurrentStatus@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  char *QualityIndicator;
  char *v7;
  _QWORD *v8;
  void *v9;
  CLMicroLocationModel *v10;
  unint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char *v29;
  int v30;
  _QWORD *v31;
  _QWORD *v32;
  _QWORD *v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  char *v41;
  char *v42;
  char *v43;
  uint64_t v44;
  _BYTE *v45;
  _QWORD *v46;
  _QWORD *v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  char *v52;
  char *v53;
  char *v54;
  uint64_t v55;
  _QWORD *v56;
  _QWORD *v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  unint64_t v61;
  char *v62;
  char *v63;
  char *v64;
  uint64_t v65;
  _QWORD *v66;
  _QWORD *v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  unint64_t v71;
  char *v72;
  char *v73;
  char *v74;
  uint64_t v75;
  char *v76;
  char *v77;
  uint64_t v78;
  _QWORD *v79;
  _QWORD *v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  unint64_t v84;
  char *v85;
  char *v86;
  char *v87;
  uint64_t v88;
  _QWORD *v89;
  _QWORD *v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t v93;
  unint64_t v94;
  char *v95;
  char *v96;
  char *v97;
  uint64_t v98;
  _QWORD *v99;
  _QWORD *v100;
  uint64_t v101;
  unint64_t v102;
  uint64_t v103;
  unint64_t v104;
  char *v105;
  char *v106;
  char *v107;
  uint64_t v108;
  _OWORD *v109;
  void *p_p;
  uint64_t v111;
  unsigned __int8 *v112;
  int v113;
  int v114;
  int v115;
  int v116;
  int v117;
  int v118;
  NSObject *v119;
  NSObject *v120;
  NSObject *v121;
  __int128 v122;
  CLMicroLocationModel *v123;
  int CandidateQualityIndicator;
  unint64_t v125;
  unint64_t v126;
  _QWORD *v127;
  _QWORD *v128;
  uint64_t v129;
  unint64_t v130;
  uint64_t v131;
  unint64_t v132;
  char *v133;
  char *v134;
  char *v135;
  uint64_t v136;
  _QWORD *CandidateQualityReasons;
  uint64_t v138;
  char *v139;
  uint64_t v140;
  void *v141;
  CLMicroLocationModel *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t i;
  const char *v146;
  size_t v147;
  _QWORD *v148;
  uint64_t v149;
  uint64_t v150;
  void *v151;
  _QWORD *v152;
  int v153;
  char *v154;
  char *v155;
  NSObject *v156;
  _OWORD *v157;
  void *v158;
  _QWORD *v159;
  int v160;
  id v161;
  uint64_t v162;
  void *v163;
  id v164;
  uint64_t v165;
  void *v166;
  void *v167;
  void **v168;
  void **v169;
  int v170;
  int v171;
  int v172;
  int v173;
  int v174;
  int v175;
  int v176;
  int v177;
  int v178;
  int v179;
  void *v180;
  uint64_t v181;
  void *v182;
  uint64_t v183;
  uint64_t result;
  NSObject *v185;
  NSObject *v186;
  void *v187;
  __int128 v188;
  void *v189[2];
  char v190;
  void *v191[2];
  char v192;
  void *v193;
  __int128 v194;
  void *v195;
  char v196;
  void *__p;
  __int128 v198;
  uint64_t v199;
  void *v200;
  char v201;
  uint64_t v202;
  void *v203;
  char v204;
  uint8_t v205[4];
  int v206;
  __int16 v207;
  const char *v208;
  __int16 v209;
  void *v210;
  __int16 v211;
  _QWORD *v212;
  __int16 v213;
  int v214;
  __int16 v215;
  uint64_t v216;
  __int16 v217;
  void *v218;
  __int16 v219;
  uint64_t v220;
  __int16 v221;
  void *v222;
  __int16 v223;
  void *v224;
  __int16 v225;
  void **v226;
  __int16 v227;
  void **v228;
  __int16 v229;
  int v230;
  __int16 v231;
  int v232;
  __int16 v233;
  int v234;
  __int16 v235;
  int v236;
  __int16 v237;
  int v238;
  __int16 v239;
  int v240;
  __int16 v241;
  int v242;
  __int16 v243;
  int v244;
  __int16 v245;
  int v246;
  __int16 v247;
  int v248;
  uint8_t buf[40];
  __int16 v250;
  int v251;
  __int16 v252;
  int v253;
  __int16 v254;
  int v255;
  __int16 v256;
  int v257;
  __int16 v258;
  int v259;
  __int16 v260;
  int v261;
  __int16 v262;
  int v263;
  __int16 v264;
  int v265;
  void *v266;
  char v267;
  _QWORD v268[22];

  v268[19] = *MEMORY[0x24BDAC8D0];
  a3[1] = 0;
  QualityIndicator = (char *)(a3 + 1);
  a3[2] = 0;
  a3[3] = 0;
  a3[7] = 0;
  *((_BYTE *)a3 + 64) = 0;
  *((_BYTE *)a3 + 68) = 0;
  *((_OWORD *)a3 + 5) = 0u;
  v7 = (char *)(a3 + 10);
  *((_BYTE *)a3 + 152) = 0;
  *((_OWORD *)a3 + 6) = 0u;
  *((_OWORD *)a3 + 7) = 0u;
  *((_BYTE *)a3 + 128) = 0;
  *((_OWORD *)a3 + 10) = 0u;
  *((_OWORD *)a3 + 11) = 0u;
  a3[24] = 0;
  *a3 = *(_QWORD *)(a1 + 88);
  if (!*(_BYTE *)(a2 + 24))
    goto LABEL_11;
  if (*(_QWORD *)a2 >= 0x20uLL)
    std::__throw_out_of_range[abi:ne180100]("bitset test argument out of range");
  if (((*(_QWORD *)(a1 + 32) >> *(_QWORD *)a2) & 1) == 0)
  {
LABEL_11:
    v14 = std::__allocate_at_least[abi:ne180100]<std::allocator<CLMicroLocationWiFiChannelHistogram>>((uint64_t)(a3 + 3), 1uLL);
    v15 = (_QWORD *)a3[1];
    v16 = (_QWORD *)a3[2];
    v18 = &v14[v17];
    *v14 = 0;
    v13 = v14 + 1;
    while (v16 != v15)
    {
      v19 = *--v16;
      *--v14 = v19;
    }
    a3[1] = (uint64_t)v14;
    a3[2] = (uint64_t)v13;
    a3[3] = (uint64_t)v18;
    if (!v15)
      goto LABEL_16;
    goto LABEL_15;
  }
  v8 = *(_QWORD **)(a1 + 96);
  if (!v8)
  {
    v30 = *(unsigned __int8 *)(a1 + 458);
    v31 = std::__allocate_at_least[abi:ne180100]<std::allocator<CLMicroLocationWiFiChannelHistogram>>((uint64_t)(a3 + 3), 1uLL);
    v32 = (_QWORD *)a3[1];
    v33 = (_QWORD *)a3[2];
    v35 = &v31[v34];
    *v31 = 4 * (v30 != 0);
    v13 = v31 + 1;
    while (v33 != v32)
    {
      v36 = *--v33;
      *--v31 = v36;
    }
    a3[1] = (uint64_t)v31;
    a3[2] = (uint64_t)v13;
    a3[3] = (uint64_t)v35;
    if (!v32)
      goto LABEL_16;
    v15 = v32;
    goto LABEL_15;
  }
  CLMicroLocationModel::getPredictionClasses(v8, (uint64_t)buf);
  v9 = (void *)a3[13];
  if (v9)
  {
    a3[14] = (uint64_t)v9;
    operator delete(v9);
    a3[13] = 0;
    a3[14] = 0;
    a3[15] = 0;
  }
  *(_OWORD *)(a3 + 13) = *(_OWORD *)buf;
  a3[15] = *(_QWORD *)&buf[16];
  v10 = *(CLMicroLocationModel **)(a1 + 96);
  if (!v10 || !CLMicroLocationModel::isValid(v10))
  {
    v11 = a3[3];
    v12 = (_QWORD *)a3[2];
    if ((unint64_t)v12 < v11)
    {
      *v12 = 1;
      v13 = v12 + 1;
LABEL_16:
      a3[2] = (uint64_t)v13;
      goto LABEL_17;
    }
    v15 = *(_QWORD **)QualityIndicator;
    v37 = ((uint64_t)v12 - *(_QWORD *)QualityIndicator) >> 3;
    v38 = v37 + 1;
    if ((unint64_t)(v37 + 1) >> 61)
      std::vector<CLMicroLocationProto::ConfidenceReason>::__throw_length_error[abi:ne180100]();
    v39 = v11 - (_QWORD)v15;
    if (v39 >> 2 > v38)
      v38 = v39 >> 2;
    if ((unint64_t)v39 >= 0x7FFFFFFFFFFFFFF8)
      v40 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v40 = v38;
    if (v40)
    {
      v41 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CLMicroLocationWiFiChannelHistogram>>((uint64_t)(a3 + 3), v40);
      v15 = (_QWORD *)a3[1];
      v12 = (_QWORD *)a3[2];
    }
    else
    {
      v41 = 0;
    }
    v73 = &v41[8 * v37];
    v74 = &v41[8 * v40];
    *(_QWORD *)v73 = 1;
    v13 = v73 + 8;
    while (v12 != v15)
    {
      v75 = *--v12;
      *((_QWORD *)v73 - 1) = v75;
      v73 -= 8;
    }
    a3[1] = (uint64_t)v73;
    a3[2] = (uint64_t)v13;
    a3[3] = (uint64_t)v74;
    if (!v15)
      goto LABEL_16;
LABEL_15:
    operator delete(v15);
    goto LABEL_16;
  }
LABEL_17:
  if (!**(_BYTE **)(a1 + 448))
  {
    v21 = a3 + 3;
    v20 = a3[3];
    v22 = (_QWORD *)a3[2];
    if ((unint64_t)v22 >= v20)
    {
      v24 = *(_QWORD **)QualityIndicator;
      v25 = ((uint64_t)v22 - *(_QWORD *)QualityIndicator) >> 3;
      v26 = v25 + 1;
      if ((unint64_t)(v25 + 1) >> 61)
        std::vector<CLMicroLocationProto::ConfidenceReason>::__throw_length_error[abi:ne180100]();
      v27 = v20 - (_QWORD)v24;
      if (v27 >> 2 > v26)
        v26 = v27 >> 2;
      if ((unint64_t)v27 >= 0x7FFFFFFFFFFFFFF8)
        v28 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v28 = v26;
      if (v28)
      {
        v29 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CLMicroLocationWiFiChannelHistogram>>((uint64_t)(a3 + 3), v28);
        v24 = (_QWORD *)a3[1];
        v22 = (_QWORD *)a3[2];
      }
      else
      {
        v29 = 0;
      }
      v42 = &v29[8 * v25];
      v43 = &v29[8 * v28];
      *(_QWORD *)v42 = 4;
      v23 = v42 + 8;
      while (v22 != v24)
      {
        v44 = *--v22;
        *((_QWORD *)v42 - 1) = v44;
        v42 -= 8;
      }
      a3[1] = (uint64_t)v42;
      a3[2] = (uint64_t)v23;
      a3[3] = (uint64_t)v43;
      if (v24)
        operator delete(v24);
    }
    else
    {
      *v22 = 4;
      v23 = v22 + 1;
    }
    a3[2] = (uint64_t)v23;
    v45 = *(_BYTE **)(a1 + 448);
    if (v45[1])
    {
      if ((unint64_t)v23 >= *v21)
      {
        v47 = *(_QWORD **)QualityIndicator;
        v48 = ((uint64_t)v23 - *(_QWORD *)QualityIndicator) >> 3;
        v49 = v48 + 1;
        if ((unint64_t)(v48 + 1) >> 61)
          std::vector<CLMicroLocationProto::ConfidenceReason>::__throw_length_error[abi:ne180100]();
        v50 = *v21 - (_QWORD)v47;
        if (v50 >> 2 > v49)
          v49 = v50 >> 2;
        if ((unint64_t)v50 >= 0x7FFFFFFFFFFFFFF8)
          v51 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v51 = v49;
        if (v51)
        {
          v52 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CLMicroLocationWiFiChannelHistogram>>((uint64_t)(a3 + 3), v51);
          v47 = (_QWORD *)a3[1];
          v23 = (_QWORD *)a3[2];
        }
        else
        {
          v52 = 0;
        }
        v53 = &v52[8 * v48];
        v54 = &v52[8 * v51];
        *(_QWORD *)v53 = 2;
        v46 = v53 + 8;
        while (v23 != v47)
        {
          v55 = *--v23;
          *((_QWORD *)v53 - 1) = v55;
          v53 -= 8;
        }
        a3[1] = (uint64_t)v53;
        a3[2] = (uint64_t)v46;
        a3[3] = (uint64_t)v54;
        if (v47)
          operator delete(v47);
      }
      else
      {
        *v23 = 2;
        v46 = v23 + 1;
      }
      a3[2] = (uint64_t)v46;
      v45 = *(_BYTE **)(a1 + 448);
      v23 = v46;
    }
    if (v45[2])
    {
      if ((unint64_t)v23 >= *v21)
      {
        v57 = *(_QWORD **)QualityIndicator;
        v58 = ((uint64_t)v23 - *(_QWORD *)QualityIndicator) >> 3;
        v59 = v58 + 1;
        if ((unint64_t)(v58 + 1) >> 61)
          std::vector<CLMicroLocationProto::ConfidenceReason>::__throw_length_error[abi:ne180100]();
        v60 = *v21 - (_QWORD)v57;
        if (v60 >> 2 > v59)
          v59 = v60 >> 2;
        if ((unint64_t)v60 >= 0x7FFFFFFFFFFFFFF8)
          v61 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v61 = v59;
        if (v61)
        {
          v62 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CLMicroLocationWiFiChannelHistogram>>((uint64_t)(a3 + 3), v61);
          v57 = (_QWORD *)a3[1];
          v23 = (_QWORD *)a3[2];
        }
        else
        {
          v62 = 0;
        }
        v63 = &v62[8 * v58];
        v64 = &v62[8 * v61];
        *(_QWORD *)v63 = 3;
        v56 = v63 + 8;
        while (v23 != v57)
        {
          v65 = *--v23;
          *((_QWORD *)v63 - 1) = v65;
          v63 -= 8;
        }
        a3[1] = (uint64_t)v63;
        a3[2] = (uint64_t)v56;
        a3[3] = (uint64_t)v64;
        if (v57)
          operator delete(v57);
      }
      else
      {
        *v23 = 3;
        v56 = v23 + 1;
      }
      a3[2] = (uint64_t)v56;
      v45 = *(_BYTE **)(a1 + 448);
      v23 = v56;
    }
    if (!v45[3])
    {
      if ((unint64_t)v23 >= *v21)
      {
        v67 = *(_QWORD **)QualityIndicator;
        v68 = ((uint64_t)v23 - *(_QWORD *)QualityIndicator) >> 3;
        v69 = v68 + 1;
        if ((unint64_t)(v68 + 1) >> 61)
          std::vector<CLMicroLocationProto::ConfidenceReason>::__throw_length_error[abi:ne180100]();
        v70 = *v21 - (_QWORD)v67;
        if (v70 >> 2 > v69)
          v69 = v70 >> 2;
        if ((unint64_t)v70 >= 0x7FFFFFFFFFFFFFF8)
          v71 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v71 = v69;
        if (v71)
        {
          v72 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CLMicroLocationWiFiChannelHistogram>>((uint64_t)(a3 + 3), v71);
          v67 = (_QWORD *)a3[1];
          v23 = (_QWORD *)a3[2];
        }
        else
        {
          v72 = 0;
        }
        v76 = &v72[8 * v68];
        v77 = &v72[8 * v71];
        *(_QWORD *)v76 = 5;
        v66 = v76 + 8;
        while (v23 != v67)
        {
          v78 = *--v23;
          *((_QWORD *)v76 - 1) = v78;
          v76 -= 8;
        }
        a3[1] = (uint64_t)v76;
        a3[2] = (uint64_t)v66;
        a3[3] = (uint64_t)v77;
        if (v67)
          operator delete(v67);
      }
      else
      {
        *v23 = 5;
        v66 = v23 + 1;
      }
      a3[2] = (uint64_t)v66;
      v45 = *(_BYTE **)(a1 + 448);
      v23 = v66;
    }
    if (!v45[4])
    {
      if ((unint64_t)v23 >= *v21)
      {
        v80 = *(_QWORD **)QualityIndicator;
        v81 = ((uint64_t)v23 - *(_QWORD *)QualityIndicator) >> 3;
        v82 = v81 + 1;
        if ((unint64_t)(v81 + 1) >> 61)
          std::vector<CLMicroLocationProto::ConfidenceReason>::__throw_length_error[abi:ne180100]();
        v83 = *v21 - (_QWORD)v80;
        if (v83 >> 2 > v82)
          v82 = v83 >> 2;
        if ((unint64_t)v83 >= 0x7FFFFFFFFFFFFFF8)
          v84 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v84 = v82;
        if (v84)
        {
          v85 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CLMicroLocationWiFiChannelHistogram>>((uint64_t)(a3 + 3), v84);
          v80 = (_QWORD *)a3[1];
          v23 = (_QWORD *)a3[2];
        }
        else
        {
          v85 = 0;
        }
        v86 = &v85[8 * v81];
        v87 = &v85[8 * v84];
        *(_QWORD *)v86 = 6;
        v79 = v86 + 8;
        while (v23 != v80)
        {
          v88 = *--v23;
          *((_QWORD *)v86 - 1) = v88;
          v86 -= 8;
        }
        a3[1] = (uint64_t)v86;
        a3[2] = (uint64_t)v79;
        a3[3] = (uint64_t)v87;
        if (v80)
          operator delete(v80);
      }
      else
      {
        *v23 = 6;
        v79 = v23 + 1;
      }
      a3[2] = (uint64_t)v79;
      v45 = *(_BYTE **)(a1 + 448);
      v23 = v79;
    }
    if (!v45[5])
    {
      if ((unint64_t)v23 >= *v21)
      {
        v90 = *(_QWORD **)QualityIndicator;
        v91 = ((uint64_t)v23 - *(_QWORD *)QualityIndicator) >> 3;
        v92 = v91 + 1;
        if ((unint64_t)(v91 + 1) >> 61)
          std::vector<CLMicroLocationProto::ConfidenceReason>::__throw_length_error[abi:ne180100]();
        v93 = *v21 - (_QWORD)v90;
        if (v93 >> 2 > v92)
          v92 = v93 >> 2;
        if ((unint64_t)v93 >= 0x7FFFFFFFFFFFFFF8)
          v94 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v94 = v92;
        if (v94)
        {
          v95 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CLMicroLocationWiFiChannelHistogram>>((uint64_t)(a3 + 3), v94);
          v90 = (_QWORD *)a3[1];
          v23 = (_QWORD *)a3[2];
        }
        else
        {
          v95 = 0;
        }
        v96 = &v95[8 * v91];
        v97 = &v95[8 * v94];
        *(_QWORD *)v96 = 8;
        v89 = v96 + 8;
        while (v23 != v90)
        {
          v98 = *--v23;
          *((_QWORD *)v96 - 1) = v98;
          v96 -= 8;
        }
        a3[1] = (uint64_t)v96;
        a3[2] = (uint64_t)v89;
        a3[3] = (uint64_t)v97;
        if (v90)
          operator delete(v90);
      }
      else
      {
        *v23 = 8;
        v89 = v23 + 1;
      }
      a3[2] = (uint64_t)v89;
      v45 = *(_BYTE **)(a1 + 448);
      v23 = v89;
    }
    if (!v45[6])
    {
      if ((unint64_t)v23 >= *v21)
      {
        v100 = *(_QWORD **)QualityIndicator;
        v101 = ((uint64_t)v23 - *(_QWORD *)QualityIndicator) >> 3;
        v102 = v101 + 1;
        if ((unint64_t)(v101 + 1) >> 61)
          std::vector<CLMicroLocationProto::ConfidenceReason>::__throw_length_error[abi:ne180100]();
        v103 = *v21 - (_QWORD)v100;
        if (v103 >> 2 > v102)
          v102 = v103 >> 2;
        if ((unint64_t)v103 >= 0x7FFFFFFFFFFFFFF8)
          v104 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v104 = v102;
        if (v104)
        {
          v105 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CLMicroLocationWiFiChannelHistogram>>((uint64_t)(a3 + 3), v104);
          v100 = (_QWORD *)a3[1];
          v23 = (_QWORD *)a3[2];
        }
        else
        {
          v105 = 0;
        }
        v106 = &v105[8 * v101];
        v107 = &v105[8 * v104];
        *(_QWORD *)v106 = 7;
        v99 = v106 + 8;
        while (v23 != v100)
        {
          v108 = *--v23;
          *((_QWORD *)v106 - 1) = v108;
          v106 -= 8;
        }
        a3[1] = (uint64_t)v106;
        a3[2] = (uint64_t)v99;
        a3[3] = (uint64_t)v107;
        if (v100)
          operator delete(v100);
      }
      else
      {
        *v23 = 7;
        v99 = v23 + 1;
      }
      a3[2] = (uint64_t)v99;
    }
    if (onceToken_MicroLocation_Default != -1)
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_75);
    QualityIndicator = (char *)(id)logObject_MicroLocation_Default;
    if (os_log_type_enabled((os_log_t)QualityIndicator, OS_LOG_TYPE_DEFAULT))
    {
      v109 = operator new(0x28uLL);
      __p = v109;
      v198 = xmmword_241BB2320;
      *v109 = 0u;
      v109[1] = 0u;
      *(_QWORD *)((char *)v109 + 29) = 0;
      boost::uuids::to_chars<char *>(a1 + 8, v109);
      p_p = &__p;
      if (v198 < 0)
        p_p = __p;
      v111 = *a3;
      v112 = *(unsigned __int8 **)(a1 + 448);
      v113 = *v112;
      v114 = v112[1];
      v115 = v112[2];
      v116 = v112[3];
      v117 = v112[4];
      v118 = v112[5];
      LODWORD(v112) = v112[6];
      *(_DWORD *)buf = 68292098;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)&buf[8] = 2082;
      *(_QWORD *)&buf[10] = "";
      *(_WORD *)&buf[18] = 2082;
      *(_QWORD *)&buf[20] = p_p;
      *(_WORD *)&buf[28] = 1026;
      *(_DWORD *)&buf[30] = v111;
      *(_WORD *)&buf[34] = 1026;
      *(_DWORD *)&buf[36] = v113;
      v250 = 1026;
      v251 = v114;
      v252 = 1026;
      v253 = v115;
      v254 = 1026;
      v255 = v116;
      v256 = 1026;
      v257 = v117;
      v258 = 1026;
      v259 = v118;
      v260 = 1026;
      v261 = v116;
      v262 = 1026;
      v263 = v117;
      v264 = 1026;
      v265 = v118;
      LOWORD(v266) = 1026;
      *(_DWORD *)((char *)&v266 + 2) = (_DWORD)v112;
      _os_log_impl(&dword_2419D9000, (os_log_t)QualityIndicator, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLMiLoService send status to client, MiLo Unavailable: \", \"ServiceId\":%{public, location:escape_only}s, \"State\":%{public}u, \"isMiLoEnabled\":%{public}hhd, \"isLowPowerMode\":%{public}hhd, \"isAirplaneMode\":%{public}hhd, \"isLocationServicesEnabled\":%{public}hhd, \"isSignificantLocationsEnabled\":%{public}hhd, \"isPlatformSupported\":%{public}hhd, \"isLocationServicesEnabled\":%{public}hhd, \"isSignificantLocationsEnabled\":%{public}hhd, \"isPlatformSupported\":%{public}hhd, \"isBuddyComplete\":%{public}hhd}", buf, 0x5Eu);
      if (SHIBYTE(v198) < 0)
        operator delete(__p);
    }

  }
  if (*a3)
  {
    if (*a3 == 1 && a3[1] == a3[2])
    {
      _CLLogObjectForCategory_MicroLocation_Default();
      v119 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v119, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)buf = 68289539;
        *(_DWORD *)&buf[4] = 0;
        *(_WORD *)&buf[8] = 2082;
        *(_QWORD *)&buf[10] = "";
        *(_WORD *)&buf[18] = 2082;
        *(_QWORD *)&buf[20] = "assert";
        *(_WORD *)&buf[28] = 2081;
        *(_QWORD *)&buf[30] = "status.state != ULServiceState::ULServiceStateSuspended || !status.suspendReasons.empty()";
        _os_log_impl(&dword_2419D9000, v119, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"If run state is suspended then suspend reason cannot be empty\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      }

      _CLLogObjectForCategory_MicroLocation_Default();
      v120 = objc_claimAutoreleasedReturnValue();
      if (os_signpost_enabled(v120))
      {
        *(_DWORD *)buf = 68289539;
        *(_DWORD *)&buf[4] = 0;
        *(_WORD *)&buf[8] = 2082;
        *(_QWORD *)&buf[10] = "";
        *(_WORD *)&buf[18] = 2082;
        *(_QWORD *)&buf[20] = "assert";
        *(_WORD *)&buf[28] = 2081;
        *(_QWORD *)&buf[30] = "status.state != ULServiceState::ULServiceStateSuspended || !status.suspendReasons.empty()";
        _os_signpost_emit_with_name_impl(&dword_2419D9000, v120, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "If run state is suspended then suspend reason cannot be empty", "{\"msg%{public}.0s\":\"If run state is suspended then suspend reason cannot be empty\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      }

      _CLLogObjectForCategory_MicroLocation_Default();
      v121 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v121, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 68289539;
        *(_DWORD *)&buf[4] = 0;
        *(_WORD *)&buf[8] = 2082;
        *(_QWORD *)&buf[10] = "";
        *(_WORD *)&buf[18] = 2082;
        *(_QWORD *)&buf[20] = "assert";
        *(_WORD *)&buf[28] = 2081;
        *(_QWORD *)&buf[30] = "status.state != ULServiceState::ULServiceStateSuspended || !status.suspendReasons.empty()";
        _os_log_impl(&dword_2419D9000, v121, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"If run state is suspended then suspend reason cannot be empty\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      }
LABEL_266:

      result = abort_report_np();
      __break(1u);
      return result;
    }
  }
  else if (a3[1] != a3[2])
  {
    _CLLogObjectForCategory_MicroLocation_Default();
    v185 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v185, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 68289539;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)&buf[8] = 2082;
      *(_QWORD *)&buf[10] = "";
      *(_WORD *)&buf[18] = 2082;
      *(_QWORD *)&buf[20] = "assert";
      *(_WORD *)&buf[28] = 2081;
      *(_QWORD *)&buf[30] = "status.state != ULServiceState::ULServiceStateRunning || status.suspendReasons.empty()";
      _os_log_impl(&dword_2419D9000, v185, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"If run state is running then suspend reason must be empty\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }

    _CLLogObjectForCategory_MicroLocation_Default();
    v186 = objc_claimAutoreleasedReturnValue();
    if (os_signpost_enabled(v186))
    {
      *(_DWORD *)buf = 68289539;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)&buf[8] = 2082;
      *(_QWORD *)&buf[10] = "";
      *(_WORD *)&buf[18] = 2082;
      *(_QWORD *)&buf[20] = "assert";
      *(_WORD *)&buf[28] = 2081;
      *(_QWORD *)&buf[30] = "status.state != ULServiceState::ULServiceStateRunning || status.suspendReasons.empty()";
      _os_signpost_emit_with_name_impl(&dword_2419D9000, v186, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "If run state is running then suspend reason must be empty", "{\"msg%{public}.0s\":\"If run state is running then suspend reason must be empty\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }

    _CLLogObjectForCategory_MicroLocation_Default();
    v121 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v121, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 68289539;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)&buf[8] = 2082;
      *(_QWORD *)&buf[10] = "";
      *(_WORD *)&buf[18] = 2082;
      *(_QWORD *)&buf[20] = "assert";
      *(_WORD *)&buf[28] = 2081;
      *(_QWORD *)&buf[30] = "status.state != ULServiceState::ULServiceStateRunning || status.suspendReasons.empty()";
      _os_log_impl(&dword_2419D9000, v121, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"If run state is running then suspend reason must be empty\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    goto LABEL_266;
  }
  v122 = *(_OWORD *)(a1 + 24);
  *((_OWORD *)a3 + 2) = *(_OWORD *)(a1 + 8);
  *((_OWORD *)a3 + 3) = v122;
  a3[9] = 0;
  std::vector<CLMicroLocationWiFiChannelHistogram>::__assign_with_size[abi:ne180100]<CLMicroLocationWiFiChannelHistogram const*,CLMicroLocationWiFiChannelHistogram const*>(v7, 0, 0, 0);
  v123 = *(CLMicroLocationModel **)(a1 + 96);
  if (v123)
  {
    QualityIndicator = (char *)CLMicroLocationModel::getQualityIndicator(v123);
    CandidateQualityIndicator = CLMicroLocationModel::getCandidateQualityIndicator(*(CLMicroLocationModel **)(a1 + 96));
    v125 = CLMiLoService::internalToExternalServiceQuality((int)QualityIndicator, CandidateQualityIndicator);
    a3[9] = v125;
    if (v125 <= 0xA)
    {
      v126 = a3[12];
      v127 = (_QWORD *)a3[11];
      if ((unint64_t)v127 >= v126)
      {
        v128 = *(_QWORD **)v7;
        v129 = ((uint64_t)v127 - *(_QWORD *)v7) >> 3;
        v130 = v129 + 1;
        if ((unint64_t)(v129 + 1) >> 61)
          std::vector<CLMicroLocationProto::ConfidenceReason>::__throw_length_error[abi:ne180100]();
        v131 = v126 - (_QWORD)v128;
        if (v131 >> 2 > v130)
          v130 = v131 >> 2;
        if ((unint64_t)v131 >= 0x7FFFFFFFFFFFFFF8)
          v132 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v132 = v130;
        if (v132)
        {
          v133 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CLMicroLocationWiFiChannelHistogram>>((uint64_t)(a3 + 12), v132);
          v128 = (_QWORD *)a3[10];
          v127 = (_QWORD *)a3[11];
        }
        else
        {
          v133 = 0;
        }
        v134 = &v133[8 * v129];
        v135 = &v133[8 * v132];
        *(_QWORD *)v134 = 3;
        QualityIndicator = v134 + 8;
        while (v127 != v128)
        {
          v136 = *--v127;
          *((_QWORD *)v134 - 1) = v136;
          v134 -= 8;
        }
        a3[10] = (uint64_t)v134;
        a3[11] = (uint64_t)QualityIndicator;
        a3[12] = (uint64_t)v135;
        if (v128)
          operator delete(v128);
      }
      else
      {
        *v127 = 3;
        QualityIndicator = (char *)(v127 + 1);
      }
      a3[11] = (uint64_t)QualityIndicator;
      CandidateQualityReasons = (_QWORD *)CLMicroLocationModel::getCandidateQualityReasons(*(CLMicroLocationModel **)(a1 + 96));
      if (CandidateQualityReasons[1] != *CandidateQualityReasons)
      {
        v138 = CLMicroLocationModel::getCandidateQualityReasons(*(CLMicroLocationModel **)(a1 + 96));
        QualityIndicator = *(char **)v138;
        v139 = *(char **)(v138 + 8);
        *(_QWORD *)buf = v7;
        while (QualityIndicator != v139)
        {
          v140 = (*(_DWORD *)QualityIndicator - 1);
          if (v140 < 8)
            v141 = (void *)(v140 + 1);
          else
            v141 = 0;
          __p = v141;
          std::back_insert_iterator<std::vector<ULServiceQualityReasonEnum>>::operator=[abi:ne180100]((uint64_t *)buf, &__p);
          QualityIndicator += 4;
        }
      }
    }
    *((_DWORD *)a3 + 40) = CLMicroLocationModel::numClusters(*(CLMicroLocationModel **)(a1 + 96));
    v142 = *(CLMicroLocationModel **)(a1 + 96);
    *((_DWORD *)a3 + 42) = *((_DWORD *)v142 + 75);
    *((_DWORD *)a3 + 45) = CLMicroLocationModel::numRecordingsBeforePruning(v142);
    v143 = *(_QWORD *)(a1 + 96);
    *((_DWORD *)a3 + 46) = (*(_QWORD *)(v143 + 336) - *(_QWORD *)(v143 + 328)) >> 5;
    *(uint64_t *)((char *)a3 + 188) = *(_QWORD *)(v143 + 312);
    *((_DWORD *)a3 + 49) = *(_DWORD *)(v143 + 320);
    *((_DWORD *)a3 + 41) = *(_DWORD *)(v143 + 296);
    *(uint64_t *)((char *)a3 + 172) = *(_QWORD *)(v143 + 304);
  }
  *((_OWORD *)a3 + 8) = *(_OWORD *)a2;
  *(_OWORD *)((char *)a3 + 137) = *(_OWORD *)(a2 + 9);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)buf);
  v144 = a3[1];
  for (i = a3[2]; v144 != i; v144 += 8)
  {
    ULServiceSuspendReasonToString();
    QualityIndicator = (char *)objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
    v146 = (const char *)objc_msgSend(QualityIndicator, "UTF8String");
    v147 = strlen(v146);
    v148 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&buf[16], (uint64_t)v146, v147);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v148, (uint64_t)" ", 1);

  }
  std::stringbuf::str();
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&__p);
  v149 = a3[10];
  v150 = a3[11];
  if (v149 != v150)
  {
    QualityIndicator = " ";
    do
    {
      ULServiceQualityReasonToString();
      v151 = (void *)objc_claimAutoreleasedReturnValue();
      v152 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v152, (uint64_t)" ", 1);

      v149 += 8;
    }
    while (v149 != v150);
  }
  std::stringbuf::str();
  if (*((_BYTE *)a3 + 152))
  {
    QualityIndicator = (char *)operator new(0x28uLL);
    v193 = QualityIndicator;
    v194 = xmmword_241BB2320;
    *(_OWORD *)QualityIndicator = 0u;
    *((_OWORD *)QualityIndicator + 1) = 0u;
    *(_QWORD *)(QualityIndicator + 29) = 0;
    boost::uuids::to_chars<char *>((uint64_t)(a3 + 17), QualityIndicator);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&v193, "None");
  }
  v153 = *((unsigned __int8 *)a3 + 152);
  if (*((_BYTE *)a3 + 152))
  {
    ULLocationTypeToString();
    QualityIndicator = (char *)objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
    v154 = (char *)objc_msgSend(QualityIndicator, "UTF8String");
  }
  else
  {
    v154 = "None";
  }
  std::string::basic_string[abi:ne180100]<0>(v191, v154);
  if (v153)

  if (*(_BYTE *)(a1 + 457))
  {
    if (*(_BYTE *)(a1 + 456))
      v155 = "low latency";
    else
      v155 = "not low latency";
  }
  else
  {
    v155 = "stopped";
  }
  std::string::basic_string[abi:ne180100]<0>(v189, v155);
  if (onceToken_MicroLocationQE_Default != -1)
    dispatch_once(&onceToken_MicroLocationQE_Default, &__block_literal_global_264);
  v156 = (id)logObject_MicroLocationQE_Default;
  if (os_log_type_enabled(v156, OS_LOG_TYPE_DEFAULT))
  {
    v157 = operator new(0x28uLL);
    v187 = v157;
    v188 = xmmword_241BB2320;
    *v157 = 0u;
    v157[1] = 0u;
    *(_QWORD *)((char *)v157 + 29) = 0;
    boost::uuids::to_chars<char *>(a1 + 8, v157);
    if (v188 >= 0)
      v158 = &v187;
    else
      v158 = v187;
    v159 = (_QWORD *)(a1 + 40);
    if (*(char *)(a1 + 63) < 0)
      v159 = (_QWORD *)*v159;
    v160 = *(_DWORD *)(a1 + 24);
    ULServiceStateToString();
    v161 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
    v162 = objc_msgSend(v161, "UTF8String");
    if (v204 >= 0)
      v163 = &v203;
    else
      v163 = v203;
    ULServiceQualityToString();
    v164 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
    v165 = objc_msgSend(v164, "UTF8String");
    v166 = &v195;
    if (v196 < 0)
      v166 = v195;
    v167 = &v193;
    if (v194 < 0)
      v167 = v193;
    v168 = v191;
    if (v192 < 0)
      v168 = (void **)v191[0];
    v169 = v189;
    if (v190 < 0)
      v169 = (void **)v189[0];
    v170 = *((_DWORD *)a3 + 40);
    v171 = *((_DWORD *)a3 + 41);
    v172 = *((_DWORD *)a3 + 42);
    v173 = *((_DWORD *)a3 + 43);
    v174 = *((_DWORD *)a3 + 44);
    v175 = *((_DWORD *)a3 + 45);
    v176 = *((_DWORD *)a3 + 46);
    v177 = *((_DWORD *)a3 + 47);
    v178 = *((_DWORD *)a3 + 48);
    v179 = *((_DWORD *)a3 + 49);
    *(_DWORD *)v205 = 68294147;
    v206 = 0;
    v207 = 2082;
    v208 = "";
    v209 = 2082;
    v210 = v158;
    v211 = 2082;
    v212 = v159;
    v213 = 1026;
    v214 = v160;
    v215 = 2082;
    v216 = v162;
    v217 = 2082;
    v218 = v163;
    v219 = 2082;
    v220 = v165;
    v221 = 2082;
    v222 = v166;
    v223 = 2081;
    v224 = v167;
    v225 = 2081;
    v226 = v168;
    v227 = 2082;
    v228 = v169;
    v229 = 1026;
    v230 = v170;
    v231 = 1026;
    v232 = v171;
    v233 = 1026;
    v234 = v172;
    v235 = 1026;
    v236 = v174;
    v237 = 1026;
    v238 = v173;
    v239 = 1026;
    v240 = v175;
    v241 = 1026;
    v242 = v176;
    v243 = 1026;
    v244 = v177;
    v245 = 1026;
    v246 = v178;
    v247 = 1026;
    v248 = v179;
    _os_log_impl(&dword_2419D9000, v156, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLMiLoService send status to client: \", \"ServiceId\":%{public, location:escape_only}s, \"ClientId\":%{public, location:escape_only}s, \"Service Type\":%{public}u, \"State\":%{public, location:escape_only}s, \"Suspend Reasons\":%{public, location:escape_only}s, \"Quality\":%{public, location:escape_only}s, \"Quality Reasons\":%{public, location:escape_only}s, \"Current LOI ID\":%{private, location:escape_only}s, \"Current LOI Type\":%{private, location:escape_only}s, \"Updates Status:\":%{public, location:escape_only}s, \"Number of clusters learned in model\":%{public}u, \"Number of Recording triggers at current LOI\":%{public}u, \"Number of Input Valid Fingerprints\":%{public}u, \"Number of Input Valid Fingerprints Labeled\":%{public}u, \"Number of Input Valid Fingerprints Unlabeled\":%{public}u, \"Number of Fingerprints Before Pruning\":%{public}u, \"Number of Fingerprints After Pruning\":%{public}u, \"Number of WiFi Access Points\":%{public}u, \"Number of Ble Sources\":%{public}u, \"Number of Uwb Sources\":%{public}u}", v205, 0xAEu);

    if (SHIBYTE(v188) < 0)
      operator delete(v187);
  }

  if (v190 < 0)
    operator delete(v189[0]);
  if (v192 < 0)
    operator delete(v191[0]);
  if (SHIBYTE(v194) < 0)
    operator delete(v193);
  if (v196 < 0)
    operator delete(v195);
  v180 = (void *)*MEMORY[0x24BEDB7F0];
  __p = v180;
  v182 = *(void **)(MEMORY[0x24BEDB7F0] + 64);
  v181 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(void **)((char *)&__p + *((_QWORD *)v180 - 3)) = v182;
  v183 = MEMORY[0x24BEDB848];
  *((_QWORD *)&v198 + 1) = v181;
  v199 = MEMORY[0x24BEDB848] + 16;
  if (v201 < 0)
    operator delete(v200);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x2426A0444](&v202);
  if (v204 < 0)
    operator delete(v203);
  *(_QWORD *)buf = v180;
  *(_QWORD *)&buf[*((_QWORD *)v180 - 3)] = v182;
  *(_QWORD *)&buf[16] = v181;
  *(_QWORD *)&buf[24] = v183 + 16;
  if (v267 < 0)
    operator delete(v266);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x2426A0444](v268);
}

void sub_241AFBC50(_Unwind_Exception *a1)
{
  CLMiLoService::ServiceStatus *v1;

  CLMiLoService::ServiceStatus::~ServiceStatus(v1);
  _Unwind_Resume(a1);
}

void CLMiLoService::ServiceStatus::~ServiceStatus(CLMiLoService::ServiceStatus *this)
{
  void *v2;
  void *v3;
  void *v4;

  v2 = (void *)*((_QWORD *)this + 13);
  if (v2)
  {
    *((_QWORD *)this + 14) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 10);
  if (v3)
  {
    *((_QWORD *)this + 11) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 1);
  if (v4)
  {
    *((_QWORD *)this + 2) = v4;
    operator delete(v4);
  }
}

void CLMiLoService::sendStatus(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *__p;
  void *v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  CLMiLoService::getCurrentStatus((uint64_t)a1, a2, &v3);
  (*(void (**)(_QWORD, uint64_t *))(*(_QWORD *)*a1 + 72))(*a1, &v3);
  if (__p)
  {
    v9 = __p;
    operator delete(__p);
  }
  if (v6)
  {
    v7 = v6;
    operator delete(v6);
  }
  if (v4)
  {
    v5 = v4;
    operator delete(v4);
  }
}

void sub_241AFBED0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  CLMiLoService::ServiceStatus::~ServiceStatus((CLMiLoService::ServiceStatus *)&a9);
  _Unwind_Resume(a1);
}

uint64_t CLMiLoService::labelObservation(CLMiLoService *this, uuid *a2, const uuid *a3)
{
  const void *v6;
  int v7;
  int v8;
  uint64_t v9;
  int v10;
  NSObject *v11;
  char *v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  CFAbsoluteTime v18;
  void *__p;
  __int16 v20;
  const char *v21;
  __int16 v22;
  char *v23;
  __int16 v24;
  char *v25;
  __int16 v26;
  char *v27;
  __int16 v28;
  int v29;
  __int16 v30;
  int v31;
  __int128 v32;
  uint64_t v33;

  v33 = *MEMORY[0x24BDAC8D0];
  if ((unint64_t)(*((_QWORD *)this + 3) - 2) <= 2 && *((_QWORD *)this + 12) && **((_BYTE **)this + 56))
  {
    v6 = *(const void **)this;
    v32 = *(_OWORD *)((char *)this + 8);
    CLMicroLocationClientUtils::getClientIdAndServiceUuid((const void **)this + 5, (uint64_t)&v32, (std::string *)&__p);
    v7 = (*(uint64_t (**)(const void *, void **, _QWORD, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v6 + 80))(v6, &__p, *(_QWORD *)a2->var0, *(_QWORD *)&a2->var0[8], *(_QWORD *)a3->var0, *(_QWORD *)&a3->var0[8]);
    v8 = v7;
    if (SBYTE3(v23) < 0)
    {
      operator delete(__p);
      if (v8)
        goto LABEL_6;
    }
    else if (v7)
    {
LABEL_6:
      CLMiLoService::addNewTruthLabelToModelIfAppropriate(this, a2, a3);
      LODWORD(__p) = 0;
      boost::uuids::detail::random_provider_base::random_provider_base((boost::uuids::detail::random_provider_base *)&__p);
      *(_QWORD *)&v32 = boost::uuids::random_generator_pure::operator()((uint64_t)&__p);
      *((_QWORD *)&v32 + 1) = v9;
      boost::uuids::detail::random_provider_base::destroy((boost::uuids::detail::random_provider_base *)&__p);
      LOBYTE(__p) = 0;
      BYTE6(v21) = 0;
      v18 = cl::chrono::CFAbsoluteTimeClock::now();
      CLMiLoService::observationRequest((uint64_t *)this, &v32, (uint64_t)&__p, (uint64_t)&v18, 1);
      v10 = 1;
      goto LABEL_9;
    }
  }
  v10 = 0;
LABEL_9:
  if (onceToken_MicroLocation_Default != -1)
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_75);
  v11 = (id)logObject_MicroLocation_Default;
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    v12 = (char *)operator new(0x28uLL);
    *(_QWORD *)(v12 + 29) = 0;
    *(_OWORD *)v12 = 0u;
    *((_OWORD *)v12 + 1) = 0u;
    boost::uuids::to_chars<char *>((uint64_t)this + 8, v12);
    v13 = (char *)operator new(0x28uLL);
    *(_QWORD *)(v13 + 29) = 0;
    *(_OWORD *)v13 = 0u;
    *((_OWORD *)v13 + 1) = 0u;
    boost::uuids::to_chars<char *>((uint64_t)a2, v13);
    v14 = (char *)operator new(0x28uLL);
    *(_QWORD *)(v14 + 29) = 0;
    *(_OWORD *)v14 = 0u;
    *((_OWORD *)v14 + 1) = 0u;
    boost::uuids::to_chars<char *>((uint64_t)a3, v14);
    v15 = *((_QWORD *)this + 11);
    __p = (void *)68290306;
    v20 = 2082;
    v21 = "";
    v22 = 2082;
    v23 = v12;
    v24 = 2082;
    v25 = v13;
    v26 = 2082;
    v27 = v14;
    v28 = 1026;
    v29 = v15;
    v30 = 1026;
    v31 = v10;
    _os_log_impl(&dword_2419D9000, v11, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLMiLoService label observation request: \", \"ServiceId\":%{public, location:escape_only}s, \"RequestId\":%{public, location:escape_only}s, \"PlaceId\":%{public, location:escape_only}s, \"State\":%{public}u, \"Success\":%{public}hhd}", (uint8_t *)&__p, 0x3Cu);
    operator delete(v14);
    operator delete(v13);
    operator delete(v12);
  }
  if (v10)
    v16 = -1;
  else
    v16 = 13;

  return (*(uint64_t (**)(_QWORD, char *, uuid *, uint64_t))(**(_QWORD **)this + 40))(*(_QWORD *)this, (char *)this + 8, a2, v16);
}

void sub_241AFC1A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  boost::uuids::detail::random_provider_base::destroy((boost::uuids::detail::random_provider_base *)&__p);
  _Unwind_Resume(a1);
}

void CLMiLoService::addNewTruthLabelToLSL(CLMiLoService *this, uuid *a2, const uuid *a3)
{
  NSObject *v7;
  _OWORD *v8;
  void *p_p;
  uint64_t v10;
  NSObject *v11;
  _OWORD *v12;
  void *v13;
  _OWORD *v14;
  char *v15;
  _OWORD *v16;
  void *v17;
  uint64_t v18;
  uuid *v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  uuid *v23;
  NSObject *v24;
  NSObject *v25;
  NSObject *v26;
  char *v27;
  uint64_t v28;
  char *v29;
  NSObject *v30;
  char *v31;
  uint64_t v32;
  char *v33;
  NSObject *v34;
  char *v35;
  char *v36;
  char *v37;
  void *__p;
  __int128 v39;
  void *v40;
  __int128 v41;
  void *v42;
  __int128 v43;
  uint8_t buf[8];
  _BYTE v45[20];
  __int16 v46;
  char *v47;
  __int16 v48;
  __int128 v49;
  uint64_t v50;
  _BYTE v51[40];
  _BYTE v52[56];
  int v53;
  void *v54;
  void *v55;
  uint64_t v56;
  _QWORD v57[2];

  v57[1] = *MEMORY[0x24BDAC8D0];
  if (*((_BYTE *)this + 368))
  {
    if (*((_QWORD *)this + 44) == *(_QWORD *)a2->var0 && *((_QWORD *)this + 45) == *(_QWORD *)&a2->var0[8])
    {
      if (onceToken_MicroLocation_Default != -1)
        dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_75);
      v7 = (id)logObject_MicroLocation_Default;
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
      {
        v8 = operator new(0x28uLL);
        __p = v8;
        v39 = xmmword_241BB2320;
        *v8 = 0u;
        v8[1] = 0u;
        *(_QWORD *)((char *)v8 + 29) = 0;
        boost::uuids::to_chars<char *>((uint64_t)a2, v8);
        p_p = &__p;
        if (v39 < 0)
          p_p = __p;
        *(_DWORD *)buf = 68289282;
        *(_DWORD *)&buf[4] = 0;
        *(_WORD *)v45 = 2082;
        *(_QWORD *)&v45[2] = "";
        *(_WORD *)&v45[10] = 2082;
        *(_QWORD *)&v45[12] = p_p;
        _os_log_impl(&dword_2419D9000, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Attempting to apply truth label for a currently running localization\", \"TriggerUUID\":%{public, location:escape_only}s}", buf, 0x1Cu);
        if (SHIBYTE(v39) < 0)
          operator delete(__p);
      }

    }
  }
  v10 = *((_QWORD *)this + 12);
  if (v10)
  {
    if (*(_BYTE *)(v10 + 192))
    {
      if (onceToken_MicroLocation_Default != -1)
        dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_75);
      v11 = (id)logObject_MicroLocation_Default;
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
      {
        v12 = operator new(0x28uLL);
        __p = v12;
        v39 = xmmword_241BB2320;
        *v12 = 0u;
        v12[1] = 0u;
        *(_QWORD *)((char *)v12 + 29) = 0;
        boost::uuids::to_chars<char *>((uint64_t)this + 8, v12);
        if (v39 >= 0)
          v13 = &__p;
        else
          v13 = __p;
        v14 = operator new(0x28uLL);
        v42 = v14;
        v43 = xmmword_241BB2320;
        *v14 = 0u;
        v14[1] = 0u;
        *(_QWORD *)((char *)v14 + 29) = 0;
        boost::uuids::to_chars<char *>((uint64_t)a2, v14);
        if (v43 >= 0)
          v15 = (char *)&v42;
        else
          v15 = (char *)v42;
        v16 = operator new(0x28uLL);
        v40 = v16;
        v41 = xmmword_241BB2320;
        *v16 = 0u;
        v16[1] = 0u;
        *(_QWORD *)((char *)v16 + 29) = 0;
        boost::uuids::to_chars<char *>((uint64_t)a3, v16);
        v17 = &v40;
        if (v41 < 0)
          v17 = v40;
        *(_DWORD *)buf = 68289795;
        *(_DWORD *)&buf[4] = 0;
        *(_WORD *)v45 = 2082;
        *(_QWORD *)&v45[2] = "";
        *(_WORD *)&v45[10] = 2081;
        *(_QWORD *)&v45[12] = v13;
        v46 = 2082;
        v47 = v15;
        v48 = 2082;
        *(_QWORD *)&v49 = v17;
        _os_log_impl(&dword_2419D9000, v11, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"service is appending an event to similarity list\", \"ServiceUUID\":%{private, location:escape_only}s, \"TriggerUUID\":%{public, location:escape_only}s, \"LabelUUID\":%{public, location:escape_only}s}", buf, 0x30u);
        if (SHIBYTE(v41) < 0)
          operator delete(v40);
        if (SHIBYTE(v43) < 0)
          operator delete(v42);
        if (SHIBYTE(v39) < 0)
          operator delete(__p);
      }

      v18 = *(_QWORD *)this;
      v19 = (uuid *)operator new(0x10uLL);
      *(_QWORD *)buf = v19;
      *(_QWORD *)&v45[8] = v19 + 1;
      *v19 = *a2;
      *(_QWORD *)v45 = v19 + 1;
      (*(void (**)(void **__return_ptr, uint64_t, uint8_t *))(*(_QWORD *)v18 + 120))(&__p, v18, buf);
      if (*(_QWORD *)buf)
      {
        *(_QWORD *)v45 = *(_QWORD *)buf;
        operator delete(*(void **)buf);
      }
      v20 = std::__hash_table<std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>>>::find<boost::uuids::uuid>(&__p, a2);
      v21 = v20;
      if (v20)
      {
        v22 = *((_QWORD *)this + 12);
        std::unordered_set<CLMicroLocationFingerprint::Measurement,CLMicroLocationFingerprint::Measurement::HashMeasurement,CLMicroLocationFingerprint::Measurement::PredicateMeasurement,std::allocator<CLMicroLocationFingerprint::Measurement>>::unordered_set((uint64_t)buf, (uint64_t)(v20 + 4));
        v49 = *(_OWORD *)(v21 + 9);
        v50 = v21[11];
        std::unordered_set<CLMicroLocationProto::DataType>::unordered_set((uint64_t)v51, (uint64_t)(v21 + 12));
        std::unordered_map<CLMicroLocationProto::DataType,CLMicroLocationFingerprint::StartAndEndTimestamps>::unordered_map((uint64_t)v52, (uint64_t)(v21 + 17));
        *(_OWORD *)&v52[40] = *((_OWORD *)v21 + 11);
        v53 = *((_DWORD *)v21 + 48);
        v55 = 0;
        v56 = 0;
        v54 = 0;
        std::vector<CLMicroLocationProto::ConfidenceReason>::__init_with_size[abi:ne180100]<CLMicroLocationProto::ConfidenceReason*,CLMicroLocationProto::ConfidenceReason*>(&v54, (const void *)v21[25], v21[26], (uint64_t)(v21[26] - v21[25]) >> 2);
        v42 = 0;
        v43 = 0uLL;
        v40 = &v42;
        LOBYTE(v41) = 0;
        v42 = operator new(0xC0uLL);
        *(_QWORD *)&v43 = v42;
        *((_QWORD *)&v43 + 1) = (char *)v42 + 192;
        *(_QWORD *)&v43 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<CLMicroLocationFingerprint>,CLMicroLocationFingerprint const*,CLMicroLocationFingerprint const*,CLMicroLocationFingerprint*>((uint64_t)&v43 + 8, (uint64_t)buf, (uint64_t)v57, (uint64_t)v42);
        v23 = (uuid *)operator new(0x10uLL);
        *(_QWORD *)&v41 = v23 + 1;
        *((_QWORD *)&v41 + 1) = v23 + 1;
        *v23 = *a3;
        v40 = v23;
        CLMicroLocationModel::SimilarityListData::appendNewEvents(v22 + 72, v22, &v42, (uint64_t *)&v40);
        if (v40)
        {
          *(_QWORD *)&v41 = v40;
          operator delete(v40);
        }
        v40 = &v42;
        std::vector<CLMicroLocationFingerprint>::__destroy_vector::operator()[abi:ne180100]((void ***)&v40);
        if (v54)
        {
          v55 = v54;
          operator delete(v54);
        }
        std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>>>::~__hash_table((uint64_t)v52);
        std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>>>::~__hash_table((uint64_t)v51);
        std::__hash_table<CLMicroLocationFingerprint::Measurement,CLMicroLocationFingerprint::Measurement::HashMeasurement,CLMicroLocationFingerprint::Measurement::PredicateMeasurement,std::allocator<CLMicroLocationFingerprint::Measurement>>::~__hash_table((uint64_t)buf);
      }
      else
      {
        if (onceToken_MicroLocation_Default != -1)
          dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_75);
        v34 = (id)logObject_MicroLocation_Default;
        if (os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT))
        {
          v35 = (char *)operator new(0x28uLL);
          *(_QWORD *)(v35 + 29) = 0;
          *(_OWORD *)v35 = 0u;
          *((_OWORD *)v35 + 1) = 0u;
          boost::uuids::to_chars<char *>((uint64_t)this + 8, v35);
          v36 = (char *)operator new(0x28uLL);
          *(_QWORD *)(v36 + 29) = 0;
          *(_OWORD *)v36 = 0u;
          *((_OWORD *)v36 + 1) = 0u;
          boost::uuids::to_chars<char *>((uint64_t)a2, v36);
          v37 = (char *)operator new(0x28uLL);
          *(_QWORD *)(v37 + 29) = 0;
          *(_OWORD *)v37 = 0u;
          *((_OWORD *)v37 + 1) = 0u;
          boost::uuids::to_chars<char *>((uint64_t)a3, v37);
          *(_DWORD *)buf = 68289795;
          *(_DWORD *)&buf[4] = 0;
          *(_WORD *)v45 = 2082;
          *(_QWORD *)&v45[2] = "";
          *(_WORD *)&v45[10] = 2081;
          *(_QWORD *)&v45[12] = v35;
          v46 = 2082;
          v47 = v36;
          v48 = 2082;
          *(_QWORD *)&v49 = v37;
          _os_log_impl(&dword_2419D9000, v34, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"event not appended to similarity list, fingerprint not created!\", \"ServiceUUID\":%{private, location:escape_only}s, \"TriggerUUID\":%{public, location:escape_only}s, \"LabelUUID\":%{public, location:escape_only}s}", buf, 0x30u);
          operator delete(v37);
          operator delete(v36);
          operator delete(v35);
        }

      }
      std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationFingerprint>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationFingerprint>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationFingerprint>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationFingerprint>>>::~__hash_table((uint64_t)&__p);
    }
    else
    {
      if (onceToken_MicroLocation_Default != -1)
        dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_75);
      v26 = (id)logObject_MicroLocation_Default;
      if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
      {
        v27 = (char *)operator new(0x28uLL);
        *(_QWORD *)(v27 + 29) = 0;
        *(_OWORD *)v27 = 0u;
        *((_OWORD *)v27 + 1) = 0u;
        boost::uuids::to_chars<char *>((uint64_t)this + 8, v27);
        v28 = *((_QWORD *)this + 12);
        v29 = (char *)operator new(0x28uLL);
        *(_QWORD *)(v29 + 29) = 0;
        *(_OWORD *)v29 = 0u;
        *((_OWORD *)v29 + 1) = 0u;
        boost::uuids::to_chars<char *>(v28 + 448, v29);
        *(_DWORD *)buf = 68289539;
        *(_DWORD *)&buf[4] = 0;
        *(_WORD *)v45 = 2082;
        *(_QWORD *)&v45[2] = "";
        *(_WORD *)&v45[10] = 2081;
        *(_QWORD *)&v45[12] = v27;
        v46 = 2081;
        v47 = v29;
        _os_log_impl(&dword_2419D9000, v26, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"when appending event to similarity list, model has no similarity list!\", \"ServiceUUID\":%{private, location:escape_only}s, \"ModelUUID\":%{private, location:escape_only}s}", buf, 0x26u);
        operator delete(v29);
        operator delete(v27);
      }

      if (onceToken_MicroLocation_Default != -1)
        dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_75);
      v30 = (id)logObject_MicroLocation_Default;
      if (os_signpost_enabled(v30))
      {
        v31 = (char *)operator new(0x28uLL);
        *(_QWORD *)(v31 + 29) = 0;
        *(_OWORD *)v31 = 0u;
        *((_OWORD *)v31 + 1) = 0u;
        boost::uuids::to_chars<char *>((uint64_t)this + 8, v31);
        v32 = *((_QWORD *)this + 12);
        v33 = (char *)operator new(0x28uLL);
        *(_QWORD *)(v33 + 29) = 0;
        *(_OWORD *)v33 = 0u;
        *((_OWORD *)v33 + 1) = 0u;
        boost::uuids::to_chars<char *>(v32 + 448, v33);
        *(_DWORD *)buf = 68289539;
        *(_DWORD *)&buf[4] = 0;
        *(_WORD *)v45 = 2082;
        *(_QWORD *)&v45[2] = "";
        *(_WORD *)&v45[10] = 2081;
        *(_QWORD *)&v45[12] = v31;
        v46 = 2081;
        v47 = v33;
        _os_signpost_emit_with_name_impl(&dword_2419D9000, v30, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "when appending event to similarity list, model has no similarity list!", "{\"msg%{public}.0s\":\"when appending event to similarity list, model has no similarity list!\", \"ServiceUUID\":%{private, location:escape_only}s, \"ModelUUID\":%{private, location:escape_only}s}", buf, 0x26u);
        operator delete(v33);
        operator delete(v31);
      }

    }
  }
  else
  {
    if (onceToken_MicroLocation_Default != -1)
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_75);
    v24 = logObject_MicroLocation_Default;
    if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 68289026;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)v45 = 2082;
      *(_QWORD *)&v45[2] = "";
      _os_log_impl(&dword_2419D9000, v24, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"when appending event to similarity list, service has no current model!\"}", buf, 0x12u);
    }
    if (onceToken_MicroLocation_Default != -1)
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_75);
    v25 = logObject_MicroLocation_Default;
    if (os_signpost_enabled((os_log_t)logObject_MicroLocation_Default))
    {
      *(_DWORD *)buf = 68289026;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)v45 = 2082;
      *(_QWORD *)&v45[2] = "";
      _os_signpost_emit_with_name_impl(&dword_2419D9000, v25, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "when appending event to similarity list, service has no current model!", "{\"msg%{public}.0s\":\"when appending event to similarity list, service has no current model!\"}", buf, 0x12u);
    }
  }
}

void sub_241AFCB4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30)
{
  void *v30;
  void *v31;
  void *v32;
  void *v33;

  operator delete(v30);
  operator delete(v33);
  operator delete(v32);

  std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationFingerprint>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationFingerprint>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationFingerprint>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationFingerprint>>>::~__hash_table((uint64_t)&a12);
  _Unwind_Resume(a1);
}

void CLMiLoService::addNewTruthLabelToBlueAtlasModel(CLMiLoService *this, const uuid *a2)
{
  uint64_t v2;
  NSObject *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  uuid *v10;
  uuid *v11;
  NSObject *v12;
  NSObject *v13;
  NSObject *v14;
  char *v15;
  uint64_t v16;
  char *v17;
  NSObject *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char *v27;
  uuid *v28;
  char *v29;
  uuid *v30;
  uuid *v31;
  int v32;
  int v33;
  __int16 v34;
  const char *v35;
  __int16 v36;
  char *v37;
  __int16 v38;
  char *v39;
  uint64_t v40;

  v40 = *MEMORY[0x24BDAC8D0];
  v2 = *((_QWORD *)this + 12);
  if (v2)
  {
    if (*(_BYTE *)(v2 + 288))
    {
      if (onceToken_MicroLocation_Default != -1)
        dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_75);
      v5 = (id)logObject_MicroLocation_Default;
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
      {
        v6 = (char *)operator new(0x28uLL);
        *(_QWORD *)(v6 + 29) = 0;
        *(_OWORD *)v6 = 0u;
        *((_OWORD *)v6 + 1) = 0u;
        boost::uuids::to_chars<char *>((uint64_t)this + 8, v6);
        v7 = (char *)operator new(0x28uLL);
        *(_QWORD *)(v7 + 29) = 0;
        *(_OWORD *)v7 = 0u;
        *((_OWORD *)v7 + 1) = 0u;
        boost::uuids::to_chars<char *>((uint64_t)a2, v7);
        v32 = 68289539;
        v33 = 0;
        v34 = 2082;
        v35 = "";
        v36 = 2081;
        v37 = v6;
        v38 = 2082;
        v39 = v7;
        _os_log_impl(&dword_2419D9000, v5, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"service is appending a label to Blue Atlas model\", \"ServiceUUID\":%{private, location:escape_only}s, \"LabelUUID\":%{public, location:escape_only}s}", (uint8_t *)&v32, 0x26u);
        operator delete(v7);
        operator delete(v6);
      }

      v8 = *((_QWORD *)this + 12);
      if (!*(_BYTE *)(v8 + 288))
        std::__throw_bad_optional_access[abi:ne180100]();
      v9 = *(_QWORD *)(v8 + 216);
      v10 = *(uuid **)(v8 + 208);
      if ((unint64_t)v10 >= v9)
      {
        v22 = *(_QWORD *)(v8 + 200);
        v23 = ((uint64_t)v10 - v22) >> 4;
        v24 = v23 + 1;
        if ((unint64_t)(v23 + 1) >> 60)
          std::vector<CLMicroLocationProto::ConfidenceReason>::__throw_length_error[abi:ne180100]();
        v25 = v9 - v22;
        if (v25 >> 3 > v24)
          v24 = v25 >> 3;
        if ((unint64_t)v25 >= 0x7FFFFFFFFFFFFFF0)
          v26 = 0xFFFFFFFFFFFFFFFLL;
        else
          v26 = v24;
        if (v26)
          v27 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<boost::uuids::uuid>>(v8 + 216, v26);
        else
          v27 = 0;
        v28 = (uuid *)&v27[16 * v23];
        v29 = &v27[16 * v26];
        *v28 = *a2;
        v11 = v28 + 1;
        v31 = *(uuid **)(v8 + 200);
        v30 = *(uuid **)(v8 + 208);
        if (v30 != v31)
        {
          do
          {
            v28[-1] = v30[-1];
            --v28;
            --v30;
          }
          while (v30 != v31);
          v30 = *(uuid **)(v8 + 200);
        }
        *(_QWORD *)(v8 + 200) = v28;
        *(_QWORD *)(v8 + 208) = v11;
        *(_QWORD *)(v8 + 216) = v29;
        if (v30)
          operator delete(v30);
      }
      else
      {
        *v10 = *a2;
        v11 = v10 + 1;
      }
      *(_QWORD *)(v8 + 208) = v11;
    }
    else
    {
      if (onceToken_MicroLocation_Default != -1)
        dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_75);
      v14 = (id)logObject_MicroLocation_Default;
      if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
      {
        v15 = (char *)operator new(0x28uLL);
        *(_QWORD *)(v15 + 29) = 0;
        *(_OWORD *)v15 = 0u;
        *((_OWORD *)v15 + 1) = 0u;
        boost::uuids::to_chars<char *>((uint64_t)this + 8, v15);
        v16 = *((_QWORD *)this + 12);
        v17 = (char *)operator new(0x28uLL);
        *(_QWORD *)(v17 + 29) = 0;
        *(_OWORD *)v17 = 0u;
        *((_OWORD *)v17 + 1) = 0u;
        boost::uuids::to_chars<char *>(v16 + 448, v17);
        v32 = 68289539;
        v33 = 0;
        v34 = 2082;
        v35 = "";
        v36 = 2081;
        v37 = v15;
        v38 = 2081;
        v39 = v17;
        _os_log_impl(&dword_2419D9000, v14, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"when appending label to Blue Atlas model, model has no Blue Atlas data\", \"ServiceUUID\":%{private, location:escape_only}s, \"ModelUUID\":%{private, location:escape_only}s}", (uint8_t *)&v32, 0x26u);
        operator delete(v17);
        operator delete(v15);
      }

      if (onceToken_MicroLocation_Default != -1)
        dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_75);
      v18 = (id)logObject_MicroLocation_Default;
      if (os_signpost_enabled(v18))
      {
        v19 = (char *)operator new(0x28uLL);
        *(_QWORD *)(v19 + 29) = 0;
        *(_OWORD *)v19 = 0u;
        *((_OWORD *)v19 + 1) = 0u;
        boost::uuids::to_chars<char *>((uint64_t)this + 8, v19);
        v20 = *((_QWORD *)this + 12);
        v21 = (char *)operator new(0x28uLL);
        *(_QWORD *)(v21 + 29) = 0;
        *(_OWORD *)v21 = 0u;
        *((_OWORD *)v21 + 1) = 0u;
        boost::uuids::to_chars<char *>(v20 + 448, v21);
        v32 = 68289539;
        v33 = 0;
        v34 = 2082;
        v35 = "";
        v36 = 2081;
        v37 = v19;
        v38 = 2081;
        v39 = v21;
        _os_signpost_emit_with_name_impl(&dword_2419D9000, v18, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "when appending label to Blue Atlas model, model has no Blue Atlas data", "{\"msg%{public}.0s\":\"when appending label to Blue Atlas model, model has no Blue Atlas data\", \"ServiceUUID\":%{private, location:escape_only}s, \"ModelUUID\":%{private, location:escape_only}s}", (uint8_t *)&v32, 0x26u);
        operator delete(v21);
        operator delete(v19);
      }

    }
  }
  else
  {
    if (onceToken_MicroLocation_Default != -1)
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_75);
    v12 = logObject_MicroLocation_Default;
    if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_ERROR))
    {
      v32 = 68289026;
      v33 = 0;
      v34 = 2082;
      v35 = "";
      _os_log_impl(&dword_2419D9000, v12, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"when appending label to Blue Atlas model, service has no current model!\"}", (uint8_t *)&v32, 0x12u);
    }
    if (onceToken_MicroLocation_Default != -1)
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_75);
    v13 = logObject_MicroLocation_Default;
    if (os_signpost_enabled((os_log_t)logObject_MicroLocation_Default))
    {
      v32 = 68289026;
      v33 = 0;
      v34 = 2082;
      v35 = "";
      _os_signpost_emit_with_name_impl(&dword_2419D9000, v13, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "when appending label to Blue Atlas model, service has no current model!", "{\"msg%{public}.0s\":\"when appending label to Blue Atlas model, service has no current model!\"}", (uint8_t *)&v32, 0x12u);
    }
  }
}

void sub_241AFD29C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  operator delete(v3);
  operator delete(v2);

  _Unwind_Resume(a1);
}

void CLMiLoService::labelObservationsBetweenDates(CLMiLoService *this, const uuid *a2, const uuid *a3, NSDate *a4, NSDate *a5)
{
  NSDate *v9;
  NSDate *v10;
  uint64_t v11;
  BOOL v12;
  int v13;
  uint64_t v14;
  NSObject *v15;
  char *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  NSDate *v22;
  NSDate *v23;
  uint8_t buf[8];
  __int16 v25;
  const char *v26;
  __int16 v27;
  char *v28;
  __int16 v29;
  uint64_t v30;
  __int16 v31;
  char *v32;
  __int16 v33;
  char *v34;
  __int16 v35;
  int v36;
  __int16 v37;
  int v38;
  __int128 v39;
  uint64_t v40;

  v40 = *MEMORY[0x24BDAC8D0];
  v9 = a4;
  v10 = a5;
  v11 = *((_QWORD *)this + 3);
  if ((unint64_t)(v11 - 2) > 2
    || !*((_QWORD *)this + 12)
    || ((v11 & 0xFFFFFFFFFFFFFFFELL) == 2 ? (v12 = **((_BYTE **)this + 56) == 0) : (v12 = 1), v12))
  {
    v13 = 0;
    v14 = 14;
  }
  else
  {
    v21 = *(_QWORD *)this;
    v39 = *(_OWORD *)((char *)this + 8);
    CLMicroLocationClientUtils::getClientIdAndServiceUuid((const void **)this + 5, (uint64_t)&v39, (std::string *)buf);
    v13 = (*(uint64_t (**)(uint64_t, uint8_t *, const uuid *, NSDate *, NSDate *))(*(_QWORD *)v21 + 88))(v21, buf, a3, v9, v10);
    if (SBYTE3(v28) < 0)
      operator delete(*(void **)buf);
    if (v13)
      v14 = -1;
    else
      v14 = 14;
  }
  if (onceToken_MicroLocation_Default != -1)
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_75);
  v15 = (id)logObject_MicroLocation_Default;
  if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
  {
    v22 = v10;
    v23 = v9;
    v16 = (char *)operator new(0x28uLL);
    *(_QWORD *)(v16 + 29) = 0;
    *(_OWORD *)v16 = 0u;
    *((_OWORD *)v16 + 1) = 0u;
    boost::uuids::to_chars<char *>((uint64_t)this + 8, v16);
    v17 = *((unsigned int *)this + 6);
    v18 = (char *)operator new(0x28uLL);
    *(_QWORD *)(v18 + 29) = 0;
    *(_OWORD *)v18 = 0u;
    *((_OWORD *)v18 + 1) = 0u;
    boost::uuids::to_chars<char *>((uint64_t)a2, v18);
    v19 = (char *)operator new(0x28uLL);
    *(_QWORD *)(v19 + 29) = 0;
    *(_OWORD *)v19 = 0u;
    *((_OWORD *)v19 + 1) = 0u;
    boost::uuids::to_chars<char *>((uint64_t)a3, v19);
    v20 = *((_QWORD *)this + 11);
    *(_DWORD *)buf = 68290562;
    *(_DWORD *)&buf[4] = 0;
    v25 = 2082;
    v26 = "";
    v27 = 2082;
    v28 = v16;
    v29 = 2050;
    v30 = v17;
    v31 = 2082;
    v32 = v18;
    v33 = 2082;
    v34 = v19;
    v35 = 1026;
    v36 = v20;
    v37 = 1026;
    v38 = v13;
    _os_log_impl(&dword_2419D9000, v15, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLMiLoService label observation request Between dates: \", \"ServiceId\":%{public, location:escape_only}s, \"ServiceType\":%{public}lu, \"RequestId\":%{public, location:escape_only}s, \"PlaceId\":%{public, location:escape_only}s, \"State\":%{public}u, \"Success\":%{public}hhd}", buf, 0x46u);
    operator delete(v19);
    operator delete(v18);
    operator delete(v16);
    v10 = v22;
    v9 = v23;
  }

  (*(void (**)(_QWORD, char *, const uuid *, uint64_t))(**(_QWORD **)this + 40))(*(_QWORD *)this, (char *)this + 8, a2, v14);
}

void sub_241AFD5DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  void *v16;
  void *v17;

  if (a16 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void CLMiLoService::startUpdating(CLMiLoService *this, int a2)
{
  if (!*((_BYTE *)this + 457))
    *((_BYTE *)this + 457) = 1;
  *((_BYTE *)this + 456) = a2;
  CLMiLoService::updateServiceUpdatingParametersIfAppropriate(this, a2);
}

void CLMiLoService::stopUpdating(CLMiLoService *this)
{
  char *v2;
  NSObject *v3;
  char *v4;
  _DWORD v5[2];
  __int16 v6;
  const char *v7;
  __int16 v8;
  char *v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  v2 = (char *)this + 8;
  (*(void (**)(_QWORD, char *))(**(_QWORD **)this + 152))(*(_QWORD *)this, (char *)this + 8);
  if (onceToken_MicroLocation_Default != -1)
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_75);
  v3 = (id)logObject_MicroLocation_Default;
  if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
  {
    v4 = (char *)operator new(0x28uLL);
    *(_QWORD *)(v4 + 29) = 0;
    *(_OWORD *)v4 = 0u;
    *((_OWORD *)v4 + 1) = 0u;
    boost::uuids::to_chars<char *>((uint64_t)v2, v4);
    v5[0] = 68289283;
    v5[1] = 0;
    v6 = 2082;
    v7 = "";
    v8 = 2081;
    v9 = v4;
    _os_log_impl(&dword_2419D9000, v3, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Disabling Low Latency updates if exist for Service:\", \"ServiceId\":%{private, location:escape_only}s}", (uint8_t *)v5, 0x1Cu);
    operator delete(v4);
  }

  if (*((_BYTE *)this + 457))
    *((_BYTE *)this + 457) = 0;
}

void sub_241AFD7B8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  operator delete(v2);

  _Unwind_Resume(a1);
}

uint64_t CLMiLoService::locationTypesBitsetFromVector(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t result;

  v1 = *(_QWORD **)a1;
  v2 = *(_QWORD **)(a1 + 8);
  if (*(_QWORD **)a1 == v2)
    return 0;
  result = 0;
  do
  {
    if (*v1 >= 0x20uLL)
      std::__throw_out_of_range[abi:ne180100]("bitset set argument out of range");
    result |= 1 << *v1++;
  }
  while (v1 != v2);
  return result;
}

BOOL CLMiLoService::requestMicroLocationLearning(CLMiLoService *this, const uuid *a2)
{
  _BOOL8 v4;
  unint64_t v5;
  NSObject *v6;
  char *v7;
  uint64_t v8;
  _DWORD v10[2];
  __int16 v11;
  const char *v12;
  __int16 v13;
  char *v14;
  __int16 v15;
  _BOOL4 v16;
  __int16 v17;
  int v18;
  __int16 v19;
  uint64_t v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  if (*((_BYTE *)this + 440))
  {
    (*(void (**)(_QWORD, char *, const uuid *, uint64_t))(**(_QWORD **)this + 40))(*(_QWORD *)this, (char *)this + 8, a2, 31);
    return 0;
  }
  else
  {
    v5 = *((_QWORD *)this + 11);
    v4 = v5 < 2;
    if (v5 <= 1)
    {
      *(uuid *)((char *)this + 424) = *a2;
      *((_BYTE *)this + 440) = 1;
      (*(void (**)(void))(**(_QWORD **)this + 112))();
    }
    if (onceToken_MicroLocation_Default != -1)
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_75);
    v6 = (id)logObject_MicroLocation_Default;
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      v7 = (char *)operator new(0x28uLL);
      *(_QWORD *)(v7 + 29) = 0;
      *(_OWORD *)v7 = 0u;
      *((_OWORD *)v7 + 1) = 0u;
      boost::uuids::to_chars<char *>((uint64_t)a2, v7);
      v8 = *((_QWORD *)this + 11);
      v10[0] = 68290050;
      v10[1] = 0;
      v11 = 2082;
      v12 = "";
      v13 = 2082;
      v14 = v7;
      v15 = 1026;
      v16 = v5 < 2;
      v17 = 1026;
      v18 = v8;
      v19 = 2050;
      v20 = -1;
      _os_log_impl(&dword_2419D9000, v6, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLMiLoService::requestMicroLocationLearning\", \"RequestId\":%{public, location:escape_only}s, \"Will Start\":%{public}hhd, \"State\":%{public}u, \"Error Code\":%{public}ld}", (uint8_t *)v10, 0x32u);
      operator delete(v7);
    }

  }
  return v4;
}

void sub_241AFD9FC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  operator delete(v2);

  _Unwind_Resume(a1);
}

void CLMiLoService::onLearningBegin(int64x2_t *a1, uint64_t a2)
{
  NSObject *v4;
  _DWORD v5[2];
  __int16 v6;
  const char *v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  CLMiLoService::updateState(a1);
  if (a1[28].i8[10])
  {
    if (onceToken_MicroLocation_Default != -1)
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_75);
    v4 = logObject_MicroLocation_Default;
    if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
    {
      v5[0] = 68289026;
      v5[1] = 0;
      v6 = 2082;
      v7 = "";
      _os_log_impl(&dword_2419D9000, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#warning, fIsLearning is already set before start learning, possibly last learning got cancelled\"}", (uint8_t *)v5, 0x12u);
    }
  }
  a1[28].i8[10] = 1;
  CLMiLoService::sendStatus(a1, a2);
}

_BYTE *CLMiLoService::onLearningCompleted(_BYTE *this)
{
  _BYTE *v1;
  uint64_t v2;
  NSObject *v3;
  char *v4;
  _DWORD v5[2];
  __int16 v6;
  const char *v7;
  __int16 v8;
  char *v9;
  __int16 v10;
  uint64_t v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  this[458] = 0;
  if (this[440])
  {
    v1 = this;
    v2 = (uint64_t)(this + 424);
    if (onceToken_MicroLocation_Default != -1)
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_75);
    v3 = (id)logObject_MicroLocation_Default;
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      if (!v1[440])
        std::__throw_bad_optional_access[abi:ne180100]();
      v4 = (char *)operator new(0x28uLL);
      *(_QWORD *)(v4 + 29) = 0;
      *(_OWORD *)v4 = 0u;
      *((_OWORD *)v4 + 1) = 0u;
      boost::uuids::to_chars<char *>(v2, v4);
      v5[0] = 68289538;
      v5[1] = 0;
      v6 = 2082;
      v7 = "";
      v8 = 2082;
      v9 = v4;
      v10 = 2050;
      v11 = -1;
      _os_log_impl(&dword_2419D9000, v3, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLMiLoService::onLearningCompleted send completion to client\", \"RequestId\":%{public, location:escape_only}s, \"Error Code\":%{public}ld}", (uint8_t *)v5, 0x26u);
      operator delete(v4);
    }

    if (!v1[440])
      std::__throw_bad_optional_access[abi:ne180100]();
    this = (_BYTE *)(*(uint64_t (**)(_QWORD, _BYTE *, uint64_t, uint64_t))(**(_QWORD **)v1 + 40))(*(_QWORD *)v1, v1 + 8, v2, -1);
    if (v1[440])
      v1[440] = 0;
  }
  return this;
}

void sub_241AFDCAC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  operator delete(v2);

  _Unwind_Resume(a1);
}

void CLMiLoService::onLocalizationStart(CLMiLoService *this, uuid a2)
{
  NSObject *v3;
  uint64_t v4;
  _OWORD *v5;
  void *__p;
  __int128 v7;
  uuid v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v8 = a2;
  if (onceToken_MicroLocation_Default != -1)
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_75);
  v3 = logObject_MicroLocation_Default;
  if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
  {
    __p = (void *)68289026;
    LOWORD(v7) = 2082;
    *(_QWORD *)((char *)&v7 + 2) = "";
    _os_log_impl(&dword_2419D9000, v3, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLMiLoService::onLocalizationStart send event to client\"}", (uint8_t *)&__p, 0x12u);
  }
  v4 = *(_QWORD *)this;
  v5 = operator new(0x28uLL);
  __p = v5;
  v7 = xmmword_241BB2320;
  *v5 = 0u;
  v5[1] = 0u;
  *(_QWORD *)((char *)v5 + 29) = 0;
  boost::uuids::to_chars<char *>((uint64_t)&v8, v5);
  (*(void (**)(uint64_t, char *, _QWORD, void **))(*(_QWORD *)v4 + 64))(v4, (char *)this + 8, 0, &__p);
  if (SHIBYTE(v7) < 0)
    operator delete(__p);
}

void sub_241AFDE1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<CLMicroLocationRecordingLabelsTable::Entry>::shrink_to_fit(uint64_t *a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  v3 = a1[2];
  result = (uint64_t)(a1 + 2);
  v4 = *a1;
  v5 = a1[1];
  v6 = (v5 - *a1) >> 6;
  if (v6 < (v3 - *a1) >> 6)
  {
    v13 = result;
    if (v5 == v4)
    {
      v7 = 0;
      v8 = 0;
    }
    else
    {
      v7 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CLMicroLocationRecordingLabelsTable::Entry>>(result, v6);
    }
    v9 = v7;
    v10 = &v7[64 * v6];
    v11 = v10;
    v12 = &v7[64 * v8];
    std::vector<CLMicroLocationRecordingLabelsTable::Entry>::__swap_out_circular_buffer(a1, &v9);
    return std::__split_buffer<CLMicroLocationRecordingLabelsTable::Entry>::~__split_buffer((uint64_t)&v9);
  }
  return result;
}

void sub_241AFDED0(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x241AFDEC0);
}

void ___ZL45_CLLogObjectForCategory_MicroLocation_Defaultv_block_invoke_62()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.MicroLocation", "MicroLocation");
  v1 = (void *)logObject_MicroLocation_Default;
  logObject_MicroLocation_Default = (uint64_t)v0;

}

void ___ZL47_CLLogObjectForCategory_MicroLocationQE_Defaultv_block_invoke_2()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.MicroLocation", "MicroLocationQE");
  v1 = (void *)logObject_MicroLocationQE_Default;
  logObject_MicroLocationQE_Default = (uint64_t)v0;

}

__n128 std::__optional_storage_base<std::string,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::string,false>>(uint64_t a1, __n128 *a2)
{
  __n128 result;

  if (*(unsigned __int8 *)(a1 + 24) == a2[1].n128_u8[8])
  {
    if (*(_BYTE *)(a1 + 24))
    {
      if (*(char *)(a1 + 23) < 0)
        operator delete(*(void **)a1);
      result = *a2;
      *(_QWORD *)(a1 + 16) = a2[1].n128_u64[0];
      *(__n128 *)a1 = result;
      a2[1].n128_u8[7] = 0;
      a2->n128_u8[0] = 0;
    }
  }
  else if (*(_BYTE *)(a1 + 24))
  {
    if (*(char *)(a1 + 23) < 0)
      operator delete(*(void **)a1);
    *(_BYTE *)(a1 + 24) = 0;
  }
  else
  {
    result = *a2;
    *(_QWORD *)(a1 + 16) = a2[1].n128_u64[0];
    *(__n128 *)a1 = result;
    a2->n128_u64[1] = 0;
    a2[1].n128_u64[0] = 0;
    a2->n128_u64[0] = 0;
    *(_BYTE *)(a1 + 24) = 1;
  }
  return result;
}

uint64_t std::deque<CLMiLoService::OutstandingRequest>::__maybe_remove_front_spare[abi:ne180100](uint64_t a1, int a2)
{
  unint64_t v2;
  int v4;

  v2 = *(_QWORD *)(a1 + 32);
  if (v2 < 0x78)
    a2 = 1;
  if (v2 < 0xF0)
    v4 = a2;
  else
    v4 = 0;
  if ((v4 & 1) == 0)
  {
    operator delete(**(void ***)(a1 + 8));
    *(_QWORD *)(a1 + 8) += 8;
    *(_QWORD *)(a1 + 32) -= 120;
  }
  return v4 ^ 1u;
}

void std::__optional_destruct_base<CachedPrediction,false>::reset[abi:ne180100](uint64_t a1)
{
  void *v2;
  void *v3;

  if (*(_BYTE *)(a1 + 184))
  {
    v2 = *(void **)(a1 + 144);
    if (v2)
    {
      *(_QWORD *)(a1 + 152) = v2;
      operator delete(v2);
    }
    if (*(_BYTE *)(a1 + 128))
      std::__hash_table<std::__hash_value_type<std::string,AnchorValueStatistics>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AnchorValueStatistics>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AnchorValueStatistics>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,AnchorValueStatistics>>>::~__hash_table(a1 + 88);
    if (*(_BYTE *)(a1 + 80) && *(char *)(a1 + 79) < 0)
      operator delete(*(void **)(a1 + 56));
    v3 = *(void **)a1;
    if (*(_QWORD *)a1)
    {
      *(_QWORD *)(a1 + 8) = v3;
      operator delete(v3);
    }
    *(_BYTE *)(a1 + 184) = 0;
  }
}

__n128 std::deque<CLMiLoService::OutstandingRequest>::push_back(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  __n128 result;
  __int128 v10;

  v4 = a1[2];
  v5 = a1[1];
  v6 = 120 * ((v4 - v5) >> 3) - 1;
  if (v4 == v5)
    v6 = 0;
  v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    std::deque<CLMiLoService::OutstandingRequest>::__add_back_capacity(a1);
    v5 = a1[1];
    v7 = a1[5] + a1[4];
  }
  v8 = *(_QWORD *)(v5 + 8 * (v7 / 0x78)) + 34 * (v7 % 0x78);
  result = *(__n128 *)a2;
  v10 = *(_OWORD *)(a2 + 16);
  *(_WORD *)(v8 + 32) = *(_WORD *)(a2 + 32);
  *(__n128 *)v8 = result;
  *(_OWORD *)(v8 + 16) = v10;
  ++a1[5];
  return result;
}

void std::deque<CLMiLoService::OutstandingRequest>::__add_back_capacity(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void *v53;
  __int128 v54;
  __int128 v55;
  _QWORD *v56;

  v2 = a1[4];
  v3 = v2 >= 0x78;
  v4 = v2 - 120;
  if (v3)
  {
    v5 = (uint64_t)(a1 + 3);
    v6 = (char *)a1[3];
    a1[4] = v4;
    v7 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v11 = *v7;
    v9 = (char *)(v7 + 1);
    v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(_QWORD *)v8 = v10;
      a1[2] += 8;
      return;
    }
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v33 = 1;
      else
        v33 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CLMicroLocationWiFiChannelHistogram>>(v5, v33);
      v35 = &v34[8 * (v33 >> 2)];
      v37 = &v34[8 * v36];
      v38 = (uint64_t *)a1[1];
      v8 = v35;
      v39 = a1[2] - (_QWORD)v38;
      if (v39)
      {
        v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        v40 = 8 * (v39 >> 3);
        v41 = &v34[8 * (v33 >> 2)];
        do
        {
          v42 = *v38++;
          *(_QWORD *)v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    v13 = v12 >> 3;
    v14 = v12 >> 3 < -1;
    v15 = (v12 >> 3) + 2;
    if (v14)
      v16 = v15;
    else
      v16 = v13 + 1;
    v17 = -(v16 >> 1);
    v18 = v16 >> 1;
    v19 = &v9[-8 * v18];
    v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      v9 = (char *)a1[1];
    }
    v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  v21 = a1[2];
  v22 = (v21 - a1[1]) >> 3;
  v23 = a1[3];
  v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(_QWORD *)&v54 = operator new(0xFF0uLL);
      std::__split_buffer<CLMiLoServiceManager::OutstandingEnableCustomLoiRequest *>::push_back(a1, &v54);
      return;
    }
    *(_QWORD *)&v54 = operator new(0xFF0uLL);
    std::__split_buffer<CLMiLoServiceManager::OutstandingEnableCustomLoiRequest *>::push_front((uint64_t)a1, &v54);
    v44 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v45 = *v44;
    v9 = (char *)(v44 + 1);
    v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3])
      goto LABEL_33;
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v46 = 1;
      else
        v46 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CLMicroLocationWiFiChannelHistogram>>((uint64_t)(a1 + 3), v46);
      v35 = &v34[8 * (v46 >> 2)];
      v37 = &v34[8 * v47];
      v48 = (uint64_t *)a1[1];
      v8 = v35;
      v49 = a1[2] - (_QWORD)v48;
      if (v49)
      {
        v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        v50 = 8 * (v49 >> 3);
        v51 = &v34[8 * (v46 >> 2)];
        do
        {
          v52 = *v48++;
          *(_QWORD *)v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1)
    v25 = 1;
  else
    v25 = v24 >> 2;
  v56 = a1 + 3;
  *(_QWORD *)&v54 = std::__allocate_at_least[abi:ne180100]<std::allocator<CLMicroLocationWiFiChannelHistogram>>((uint64_t)(a1 + 3), v25);
  *((_QWORD *)&v54 + 1) = v54 + 8 * v22;
  *(_QWORD *)&v55 = *((_QWORD *)&v54 + 1);
  *((_QWORD *)&v55 + 1) = v54 + 8 * v26;
  v53 = operator new(0xFF0uLL);
  std::__split_buffer<CLMiLoServiceManager::OutstandingEnableCustomLoiRequest *>::push_back(&v54, &v53);
  v27 = (_QWORD *)a1[2];
  v28 = -7 - (_QWORD)v27;
  while (v27 != (_QWORD *)a1[1])
  {
    --v27;
    v28 += 8;
    std::__split_buffer<CLMiLoServiceManager::OutstandingEnableCustomLoiRequest *>::push_front((uint64_t)&v54, v27);
  }
  v29 = (char *)*a1;
  v30 = v54;
  v31 = v55;
  *(_QWORD *)&v54 = *a1;
  *((_QWORD *)&v54 + 1) = v27;
  v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  v55 = v32;
  if (v27 != (_QWORD *)v32)
    *(_QWORD *)&v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  if (v29)
    operator delete(v29);
}

void sub_241AFE434(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  void *v13;

  operator delete(v13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t *std::back_insert_iterator<std::vector<ULServiceQualityReasonEnum>>::operator=[abi:ne180100](uint64_t *a1, _QWORD *a2)
{
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  uint64_t v16;

  v4 = *a1;
  v5 = *(_QWORD **)(*a1 + 8);
  v6 = (_QWORD *)(*a1 + 16);
  if ((unint64_t)v5 >= *v6)
  {
    v8 = *(_QWORD **)v4;
    v9 = ((uint64_t)v5 - *(_QWORD *)v4) >> 3;
    v10 = v9 + 1;
    if ((unint64_t)(v9 + 1) >> 61)
      std::vector<CLMicroLocationProto::ConfidenceReason>::__throw_length_error[abi:ne180100]();
    v11 = *v6 - (_QWORD)v8;
    if (v11 >> 2 > v10)
      v10 = v11 >> 2;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
      v12 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v12 = v10;
    if (v12)
    {
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CLMicroLocationWiFiChannelHistogram>>((uint64_t)v6, v12);
      v8 = *(_QWORD **)v4;
      v5 = *(_QWORD **)(v4 + 8);
    }
    else
    {
      v13 = 0;
    }
    v14 = &v13[8 * v9];
    v15 = &v13[8 * v12];
    *(_QWORD *)v14 = *a2;
    v7 = v14 + 8;
    while (v5 != v8)
    {
      v16 = *--v5;
      *((_QWORD *)v14 - 1) = v16;
      v14 -= 8;
    }
    *(_QWORD *)v4 = v14;
    *(_QWORD *)(v4 + 8) = v7;
    *(_QWORD *)(v4 + 16) = v15;
    if (v8)
      operator delete(v8);
  }
  else
  {
    *v5 = *a2;
    v7 = v5 + 1;
  }
  *(_QWORD *)(v4 + 8) = v7;
  return a1;
}

uint64_t std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationFingerprint>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationFingerprint>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationFingerprint>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationFingerprint>>>::~__hash_table(uint64_t a1)
{
  void *v2;

  std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationFingerprint>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationFingerprint>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationFingerprint>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationFingerprint>>>::__deallocate_node(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationFingerprint>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationFingerprint>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationFingerprint>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationFingerprint>>>::__deallocate_node(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = (_QWORD *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<boost::uuids::uuid const,CLMicroLocationFingerprint>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

uint64_t std::__destroy_at[abi:ne180100]<std::pair<boost::uuids::uuid const,CLMicroLocationFingerprint>,0>(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 184);
  if (v2)
  {
    *(_QWORD *)(a1 + 192) = v2;
    operator delete(v2);
  }
  std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>>>::~__hash_table(a1 + 120);
  std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>>>::~__hash_table(a1 + 80);
  return std::__hash_table<CLMicroLocationFingerprint::Measurement,CLMicroLocationFingerprint::Measurement::HashMeasurement,CLMicroLocationFingerprint::Measurement::PredicateMeasurement,std::allocator<CLMicroLocationFingerprint::Measurement>>::~__hash_table(a1 + 16);
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<CLMicroLocationFingerprint>,CLMicroLocationFingerprint const*,CLMicroLocationFingerprint const*,CLMicroLocationFingerprint*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  _QWORD v9[3];
  char v10;
  uint64_t v11;
  uint64_t v12;

  v4 = a4;
  v11 = a4;
  v12 = a4;
  v9[0] = a1;
  v9[1] = &v11;
  v9[2] = &v12;
  v10 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      std::allocator<CLMicroLocationFingerprint>::construct[abi:ne180100]<CLMicroLocationFingerprint,CLMicroLocationFingerprint const&>(a1, v4, v6);
      v6 += 192;
      v4 = v12 + 192;
      v12 += 192;
    }
    while (v6 != a3);
  }
  v10 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<CLMicroLocationFingerprint>,CLMicroLocationFingerprint*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v9);
  return v4;
}

void sub_241AFE6B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<CLMicroLocationFingerprint>,CLMicroLocationFingerprint*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void OUTLINED_FUNCTION_6_2(void *a1, int a2, int a3, int a4, const char *a5, const char *a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint8_t buf)
{
  NSObject *v13;

  _os_signpost_emit_with_name_impl(a1, v13, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, a5, a6, &buf, 0x2Cu);
}

void OUTLINED_FUNCTION_8_1(void *a1, int a2, int a3, const char *a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint8_t buf)
{
  NSObject *v13;

  _os_log_impl(a1, v13, OS_LOG_TYPE_INFO, a4, &buf, 0x2Cu);
}

void OUTLINED_FUNCTION_9_0(void *a1, int a2, int a3, const char *a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint8_t buf)
{
  NSObject *v13;

  _os_log_impl(a1, v13, OS_LOG_TYPE_FAULT, a4, &buf, 0x2Cu);
}

void sub_241AFE7D4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

uint64_t ULDBUtils::insertEntries<CLMicroLocationLoggedEventsTable,ULLoggedEventMO>(void *a1, uint64_t a2)
{
  id v3;
  void *v4;
  id v5;
  uint64_t v6;
  _QWORD v8[4];
  id v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  char v15;

  v3 = a1;
  v12 = 0;
  v13 = &v12;
  v14 = 0x2020000000;
  v15 = 0;
  objc_msgSend(v3, "managedObjectContext");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v8[0] = MEMORY[0x24BDAC760];
  v8[1] = 3221225472;
  v8[2] = ___ZN9ULDBUtils13insertEntriesI32CLMicroLocationLoggedEventsTable15ULLoggedEventMOEEbP7ULStoreRKNSt3__16vectorINT_5EntryENS5_9allocatorIS8_EEEE_block_invoke;
  v8[3] = &unk_2511D22D0;
  v11 = a2;
  v5 = v3;
  v9 = v5;
  v10 = &v12;
  objc_msgSend(v4, "performBlockAndWait:", v8);

  v6 = *((unsigned __int8 *)v13 + 24);
  _Block_object_dispose(&v12, 8);

  return v6;
}

void sub_241AFE8F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, uint64_t a8, uint64_t a9, ...)
{
  void *v9;
  void *v10;
  va_list va;

  va_start(va, a9);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void ULDBUtils::fetchEntries<CLMicroLocationLoggedEventsTable,ULLoggedEventMO>(void *a1@<X0>, void *a2@<X1>, void *a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  id v9;
  id v10;
  id v11;
  void *v12;
  id v13;
  id v14;
  id v15;
  uint64_t *v16;
  _QWORD v17[4];
  id v18;
  id v19;
  id v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  __n128 (*v26)(__n128 *, __n128 *);
  void (*v27)(uint64_t);
  void *v28;
  _QWORD v29[3];
  void **v30;

  v9 = a1;
  v10 = a2;
  v11 = a3;
  v23 = 0;
  v24 = &v23;
  v25 = 0x4812000000;
  v26 = __Block_byref_object_copy__13;
  v27 = __Block_byref_object_dispose__13;
  v28 = &unk_241BEBD1D;
  memset(v29, 0, sizeof(v29));
  objc_msgSend(v9, "managedObjectContext");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  v17[0] = MEMORY[0x24BDAC760];
  v17[1] = 3221225472;
  v17[2] = ___ZN9ULDBUtils12fetchEntriesI32CLMicroLocationLoggedEventsTable15ULLoggedEventMOEENSt3__16vectorINT_5EntryENS3_9allocatorIS6_EEEEP7ULStoreP7NSArrayIP11NSPredicateEPSC_IP16NSSortDescriptorEm_block_invoke;
  v17[3] = &unk_2511D22F8;
  v13 = v10;
  v18 = v13;
  v14 = v11;
  v19 = v14;
  v22 = a4;
  v15 = v9;
  v20 = v15;
  v21 = &v23;
  objc_msgSend(v12, "performBlockAndWait:", v17);

  v16 = v24;
  a5[1] = 0;
  a5[2] = 0;
  *a5 = 0;
  std::vector<CLMicroLocationLoggedEventsTable::Entry>::__init_with_size[abi:ne180100]<CLMicroLocationLoggedEventsTable::Entry*,CLMicroLocationLoggedEventsTable::Entry*>(a5, v16[6], v16[7], 0xCF3CF3CF3CF3CF3DLL * ((v16[7] - v16[6]) >> 4));

  _Block_object_dispose(&v23, 8);
  v30 = (void **)v29;
  std::vector<CLMicroLocationLoggedEventsTable::Entry>::__destroy_vector::operator()[abi:ne180100](&v30);

}

void sub_241AFEAC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, void *a7, void *a8, uint64_t a9, uint64_t a10, ...)
{
  void *v10;
  void *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  va_list va;

  va_start(va, a10);

  _Block_object_dispose(va, 8);
  *(_QWORD *)(v14 - 96) = v13;
  std::vector<CLMicroLocationLoggedEventsTable::Entry>::__destroy_vector::operator()[abi:ne180100]((void ***)(v14 - 96));

  _Unwind_Resume(a1);
}

void ULDBUtils::fetchAllWithLimit<CLMicroLocationLoggedEventsTable,ULLoggedEventMO>(void *a1@<X0>, unsigned int a2@<W1>, _QWORD *a3@<X8>)
{
  id v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  _QWORD v10[2];

  v10[1] = *MEMORY[0x24BDAC8D0];
  v5 = a1;
  v6 = (void *)MEMORY[0x24BDD17C0];
  objc_msgSend((id)objc_opt_class(), "defaultSortProperty");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "sortDescriptorWithKey:ascending:", v7, 0);
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  v10[0] = v8;
  objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", v10, 1);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  ULDBUtils::fetchEntries<CLMicroLocationLoggedEventsTable,ULLoggedEventMO>(v5, 0, v9, a2, a3);

}

void sub_241AFEC20(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_241AFEF04(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_241AFF064(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, char *__p, uint64_t a10, uint64_t a11, char a12)
{
  __p = &a12;
  std::vector<CLMicroLocationLoggedEventsTable::Entry>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

void sub_241AFF124(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<CLMicroLocationLoggedEventsTable::Entry>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

void ___ZN9ULDBUtils13insertEntriesI32CLMicroLocationLoggedEventsTable15ULLoggedEventMOEEbP7ULStoreRKNSt3__16vectorINT_5EntryENS5_9allocatorIS8_EEEE_block_invoke(uint64_t a1)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;
  NSObject *v7;
  void *v8;
  void *v9;
  NSObject *v10;
  void *v11;
  void *v12;
  void *v13;
  int v14;
  int v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  void *v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  v2 = *(uint64_t **)(a1 + 48);
  v3 = *v2;
  v4 = v2[1];
  if (*v2 == v4)
  {
LABEL_4:
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = objc_msgSend(*(id *)(a1 + 32), "commitChangesToStore");
    objc_msgSend(*(id *)(a1 + 32), "deleteOldestRecordsIfFull");
  }
  else
  {
    while (1)
    {
      objc_msgSend(*(id *)(a1 + 32), "managedObjectContext");
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      +[ULLoggedEventMO createFromEntry:inManagedObjectContext:](ULLoggedEventMO, "createFromEntry:inManagedObjectContext:", v3, v5);
      v6 = (void *)objc_claimAutoreleasedReturnValue();

      if (!v6)
        break;

      v3 += 336;
      if (v3 == v4)
        goto LABEL_4;
    }
    if (onceToken_MicroLocation_Default != -1)
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_76);
    v7 = (id)logObject_MicroLocation_Default;
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      +[ULLoggedEventMO entity](ULLoggedEventMO, "entity");
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v8, "name");
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      v14 = 68289283;
      v15 = 0;
      v16 = 2082;
      v17 = "";
      v18 = 2113;
      v19 = v9;
      _os_log_impl(&dword_2419D9000, v7, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"Failed to create entry from MO\", \"MO\":%{private, location:escape_only}@}", (uint8_t *)&v14, 0x1Cu);

    }
    if (onceToken_MicroLocation_Default != -1)
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_76);
    v10 = (id)logObject_MicroLocation_Default;
    if (os_signpost_enabled(v10))
    {
      +[ULLoggedEventMO entity](ULLoggedEventMO, "entity");
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v11, "name");
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      v14 = 68289283;
      v15 = 0;
      v16 = 2082;
      v17 = "";
      v18 = 2113;
      v19 = v12;
      _os_signpost_emit_with_name_impl(&dword_2419D9000, v10, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Failed to create entry from MO", "{\"msg%{public}.0s\":\"Failed to create entry from MO\", \"MO\":%{private, location:escape_only}@}", (uint8_t *)&v14, 0x1Cu);

    }
    objc_msgSend(*(id *)(a1 + 32), "managedObjectContext");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v13, "reset");

  }
}

void sub_241AFF3EC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void ___ZL45_CLLogObjectForCategory_MicroLocation_Defaultv_block_invoke_63()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.MicroLocation", "MicroLocation");
  v1 = (void *)logObject_MicroLocation_Default;
  logObject_MicroLocation_Default = (uint64_t)v0;

}

__n128 __Block_byref_object_copy__13(__n128 *a1, __n128 *a2)
{
  __n128 result;

  a1[3].n128_u64[0] = 0;
  a1[3].n128_u64[1] = 0;
  a1[4].n128_u64[0] = 0;
  result = a2[3];
  a1[3] = result;
  a1[4].n128_u64[0] = a2[4].n128_u64[0];
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = 0;
  a2[4].n128_u64[0] = 0;
  return result;
}

void __Block_byref_object_dispose__13(uint64_t a1)
{
  void **v1;

  v1 = (void **)(a1 + 48);
  std::vector<CLMicroLocationLoggedEventsTable::Entry>::__destroy_vector::operator()[abi:ne180100](&v1);
}

void ___ZN9ULDBUtils12fetchEntriesI32CLMicroLocationLoggedEventsTable15ULLoggedEventMOEENSt3__16vectorINT_5EntryENS3_9allocatorIS6_EEEEP7ULStoreP7NSArrayIP11NSPredicateEPSC_IP16NSSortDescriptorEm_block_invoke(uint64_t a1)
{
  void *v2;
  objc_class *v3;
  void *v4;
  void *v5;
  uint64_t v6;
  void *v7;
  __int128 v8;
  uint64_t v9;
  void **v10;

  v2 = *(void **)(a1 + 48);
  v3 = (objc_class *)objc_opt_class();
  NSStringFromClass(v3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "fetchManagedObjectsWithEntityName:byAndPredicates:sortDescriptors:andLimit:", v4, *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 64));
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  ULDBUtils::convertManagedObjectsToEntries<CLMicroLocationLoggedEventsTable,ULLoggedEventMO>(v5, (uint64_t *)&v8);
  v6 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
  std::vector<CLMicroLocationLoggedEventsTable::Entry>::__vdeallocate((void **)(v6 + 48));
  *(_OWORD *)(v6 + 48) = v8;
  *(_QWORD *)(v6 + 64) = v9;
  v9 = 0;
  v8 = 0uLL;
  v10 = (void **)&v8;
  std::vector<CLMicroLocationLoggedEventsTable::Entry>::__destroy_vector::operator()[abi:ne180100](&v10);
  objc_msgSend(*(id *)(a1 + 48), "managedObjectContext");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "reset");

}

void sub_241AFF584(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void ULDBUtils::convertManagedObjectsToEntries<CLMicroLocationLoggedEventsTable,ULLoggedEventMO>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  id v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  void *v9;
  __int128 *v10;
  __int128 v11;
  uint64_t v12;
  NSObject *v13;
  void *v14;
  void *v15;
  NSObject *v16;
  void *v17;
  void *v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  id obj;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint8_t buf[4];
  int v29;
  __int16 v30;
  const char *v31;
  __int16 v32;
  void *v33;
  __int128 v34[2];
  _OWORD v35[19];
  uint64_t v36;
  _BYTE v37[128];
  uint64_t v38;

  v38 = *MEMORY[0x24BDAC8D0];
  v3 = a1;
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  std::vector<CLMicroLocationLoggedEventsTable::Entry>::reserve(a2, objc_msgSend(v3, "count"));
  v26 = 0u;
  v27 = 0u;
  v24 = 0u;
  v25 = 0u;
  obj = v3;
  v4 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v24, v37, 16);
  if (!v4)
  {

    goto LABEL_32;
  }
  v5 = 0;
  v6 = *(_QWORD *)v25;
  do
  {
    v7 = 0;
    do
    {
      if (*(_QWORD *)v25 != v6)
        objc_enumerationMutation(obj);
      v8 = *(id *)(*((_QWORD *)&v24 + 1) + 8 * v7);
      v9 = v8;
      if (v8)
      {
        objc_msgSend(v8, "convertToEntry");
        if ((_BYTE)v36)
        {
          v10 = (__int128 *)a2[1];
          if ((unint64_t)v10 >= a2[2])
          {
            v12 = std::vector<CLMicroLocationLoggedEventsTable::Entry>::__push_back_slow_path<CLMicroLocationLoggedEventsTable::Entry>(a2, v34);
          }
          else
          {
            v11 = v34[0];
            *(__int128 *)((char *)v10 + 12) = *(__int128 *)((char *)v34 + 12);
            *v10 = v11;
            CLMicroLocationProto::ReceivedEvent::ReceivedEvent((CLMicroLocationProto::ReceivedEvent *)(v10 + 2), (const CLMicroLocationProto::ReceivedEvent *)v35);
            v12 = (uint64_t)(v10 + 21);
            a2[1] = (uint64_t)(v10 + 21);
          }
          v19 = 0;
          a2[1] = v12;
          goto LABEL_22;
        }
      }
      else
      {
        v36 = 0;
        memset(v35, 0, sizeof(v35));
        memset(v34, 0, sizeof(v34));
      }
      if (onceToken_MicroLocation_Default != -1)
        dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_76);
      v13 = (id)logObject_MicroLocation_Default;
      if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
      {
        objc_msgSend(v9, "entity");
        v14 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v14, "name");
        v15 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 68289283;
        v29 = 0;
        v30 = 2082;
        v31 = "";
        v32 = 2113;
        v33 = v15;
        _os_log_impl(&dword_2419D9000, v13, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"Failed to convert MO to entry\", \"MO\":%{private, location:escape_only}@}", buf, 0x1Cu);

      }
      if (onceToken_MicroLocation_Default != -1)
        dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_76);
      v16 = (id)logObject_MicroLocation_Default;
      if (os_signpost_enabled(v16))
      {
        objc_msgSend(v9, "entity");
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v17, "name");
        v18 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 68289283;
        v29 = 0;
        v30 = 2082;
        v31 = "";
        v32 = 2113;
        v33 = v18;
        _os_signpost_emit_with_name_impl(&dword_2419D9000, v16, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Failed to convert MO to entry", "{\"msg%{public}.0s\":\"Failed to convert MO to entry\", \"MO\":%{private, location:escape_only}@}", buf, 0x1Cu);

      }
      v19 = 1;
      v5 = 1;
LABEL_22:
      if ((_BYTE)v36)
        CLMicroLocationProto::ReceivedEvent::~ReceivedEvent((CLMicroLocationProto::ReceivedEvent *)v35);

      if ((v19 & 1) != 0)
        goto LABEL_27;
      ++v7;
    }
    while (v4 != v7);
    v4 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v24, v37, 16);
  }
  while (v4);
LABEL_27:

  if ((v5 & 1) != 0)
  {
    v21 = *a2;
    v20 = a2[1];
    if (v20 != *a2)
    {
      do
      {
        v22 = v20 - 336;
        CLMicroLocationProto::ReceivedEvent::~ReceivedEvent((CLMicroLocationProto::ReceivedEvent *)(v20 - 304));
        v20 = v22;
      }
      while (v22 != v21);
    }
    a2[1] = v21;
  }
LABEL_32:

}

void sub_241AFF96C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void **a27)
{

  std::vector<CLMicroLocationLoggedEventsTable::Entry>::__destroy_vector::operator()[abi:ne180100](&a27);
  _Unwind_Resume(a1);
}

uint64_t std::vector<CLMicroLocationLoggedEventsTable::Entry>::reserve(uint64_t *a1, unint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[5];

  v4 = a1[2];
  result = (uint64_t)(a1 + 2);
  if (0xCF3CF3CF3CF3CF3DLL * ((v4 - *a1) >> 4) < a2)
  {
    if (a2 >= 0xC30C30C30C30C4)
      std::vector<CLMicroLocationProto::ConfidenceReason>::__throw_length_error[abi:ne180100]();
    v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = std::__allocate_at_least[abi:ne180100]<std::allocator<CLMicroLocationLoggedEventsTable::Entry>>(result, a2);
    v7[1] = v7[0] + v5;
    v7[2] = v7[0] + v5;
    v7[3] = v7[0] + 336 * v6;
    std::vector<CLMicroLocationLoggedEventsTable::Entry>::__swap_out_circular_buffer(a1, v7);
    return std::__split_buffer<CLMicroLocationLoggedEventsTable::Entry>::~__split_buffer((uint64_t)v7);
  }
  return result;
}

void sub_241AFFABC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<CLMicroLocationLoggedEventsTable::Entry>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<CLMicroLocationLoggedEventsTable::Entry>::__push_back_slow_path<CLMicroLocationLoggedEventsTable::Entry>(uint64_t *a1, __int128 *a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  __int128 v12;
  uint64_t v13;
  _QWORD v15[2];
  char *v16;
  char *v17;
  uint64_t *v18;

  v3 = *a1;
  v4 = 0xCF3CF3CF3CF3CF3DLL * ((a1[1] - *a1) >> 4);
  v5 = v4 + 1;
  if (v4 + 1 > 0xC30C30C30C30C3)
    std::vector<CLMicroLocationProto::ConfidenceReason>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xCF3CF3CF3CF3CF3DLL * ((a1[2] - v3) >> 4);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x61861861861861)
    v9 = 0xC30C30C30C30C3;
  else
    v9 = v5;
  v18 = a1 + 2;
  if (v9)
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CLMicroLocationLoggedEventsTable::Entry>>(v7, v9);
  else
    v10 = 0;
  v11 = &v10[336 * v4];
  v15[0] = v10;
  v15[1] = v11;
  v16 = v11;
  v17 = &v10[336 * v9];
  v12 = *a2;
  *(_OWORD *)(v11 + 12) = *(__int128 *)((char *)a2 + 12);
  *(_OWORD *)v11 = v12;
  CLMicroLocationProto::ReceivedEvent::ReceivedEvent((CLMicroLocationProto::ReceivedEvent *)(v11 + 32), (const CLMicroLocationProto::ReceivedEvent *)(a2 + 2));
  v16 += 336;
  std::vector<CLMicroLocationLoggedEventsTable::Entry>::__swap_out_circular_buffer(a1, v15);
  v13 = a1[1];
  std::__split_buffer<CLMicroLocationLoggedEventsTable::Entry>::~__split_buffer((uint64_t)v15);
  return v13;
}

void sub_241AFFBE8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<CLMicroLocationLoggedEventsTable::Entry>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::vector<CLMicroLocationLoggedEventsTable::Entry>::__vdeallocate(void **a1)
{
  char *v1;
  char *v3;
  void *v4;
  char *v5;

  v1 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = *a1;
    if (v3 != v1)
    {
      do
      {
        v5 = v3 - 336;
        CLMicroLocationProto::ReceivedEvent::~ReceivedEvent((CLMicroLocationProto::ReceivedEvent *)(v3 - 304));
        v3 = v5;
      }
      while (v5 != v1);
      v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

void sub_241AFFD74(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_241B00080(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_241B00134(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, objc_super a9)
{
  void *v9;
  void *v10;

  v10 = v9;

  a9.super_class = (Class)CLMicroLocationLoiBridge;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_241B003D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, id location)
{
  id *v19;
  void *v20;
  id *v21;
  void *v22;
  void *v23;
  void *v24;

  objc_destroyWeak(v21);
  objc_destroyWeak(v19);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_241B004B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;

  v12 = v11;

  _Unwind_Resume(a1);
}

void sub_241B0055C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  v13 = v12;

  _Unwind_Resume(a1);
}

void sub_241B00914(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,id location)
{
  void *v25;
  void *v26;

  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_241B00B14(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_241B00C8C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_241B00DC8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_241B00EBC(_Unwind_Exception *a1)
{
  void *v1;
  uint64_t v2;

  objc_destroyWeak((id *)(v2 - 40));

  _Unwind_Resume(a1);
}

void sub_241B00F50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_241B010FC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_241B01184(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

void sub_241B01258(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;
  void *v15;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_241B01490(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_241B01500(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_241B01644(_Unwind_Exception *a1)
{
  void *v1;
  id *v2;
  uint64_t v3;

  objc_destroyWeak(v2);

  objc_destroyWeak((id *)(v3 - 56));
  _Unwind_Resume(a1);
}

void sub_241B016D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_241B019A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12)
{
  void *v12;

  _Unwind_Resume(a1);
}

void sub_241B01C1C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  uint64_t v3;

  objc_destroyWeak((id *)(v3 - 96));
  _Unwind_Resume(a1);
}

void sub_241B01CC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_241B01E10(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_241B01E90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_241B02098(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id location)
{
  void *v21;
  void *v22;

  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_241B0213C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_241B02240(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_241B023D4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_241B02738(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_241B028C8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  uint64_t v3;

  objc_destroyWeak((id *)(v3 - 40));

  _Unwind_Resume(a1);
}

void sub_241B02934(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_241B02CB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  void *v12;

  _Unwind_Resume(a1);
}

double ULSettings::get<ULSettings::CustomLoiGeofenceRadius>()
{
  void *v0;
  void *v1;
  void *v2;
  void *v3;
  double v4;
  double v5;

  +[ULDefaultsSingleton shared](ULDefaultsSingleton, "shared");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "defaultsDictionary");
  v1 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "ULCustomLoiGeofenceRadius");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "objectForKey:", v2);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  if (v3 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
    objc_msgSend(v3, "doubleValue");
  else
    objc_msgSend(&unk_2511ECF38, "doubleValue");
  v5 = v4;

  return v5;
}

void sub_241B02E20(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_241B03000(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_241B03090(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_241B0340C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, id location)
{
  void *v19;
  void *v20;
  void *v21;
  void *v22;

  _Unwind_Resume(a1);
}

void sub_241B034D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_241B03614(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_241B03690(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_241B037E4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_241B03938(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_241B03B84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

void sub_241B03C0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_241B03FF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id location)
{
  void *v21;
  void *v22;
  void *v23;

  _Unwind_Resume(a1);
}

void sub_241B040CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void ___ZL45_CLLogObjectForCategory_MicroLocation_Defaultv_block_invoke_64()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.MicroLocation", "MicroLocation");
  v1 = (void *)logObject_MicroLocation_Default;
  logObject_MicroLocation_Default = (uint64_t)v0;

}

void sub_241B0453C(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 72));
  _Unwind_Resume(a1);
}

void sub_241B04D0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__14(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__14(uint64_t a1)
{

}

void sub_241B04EFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_241B05A88(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void sub_241B06098(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v7;
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v7 - 80), 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__15(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__15(uint64_t a1)
{

}

void sub_241B06310(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

uint64_t ULDBUtils::insertEntries<CLMicroLocationBluetoothIdentityTable,ULBluetoothIdentityMO>(void *a1, uint64_t a2)
{
  id v3;
  void *v4;
  id v5;
  uint64_t v6;
  _QWORD v8[4];
  id v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  char v15;

  v3 = a1;
  v12 = 0;
  v13 = &v12;
  v14 = 0x2020000000;
  v15 = 0;
  objc_msgSend(v3, "managedObjectContext");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v8[0] = MEMORY[0x24BDAC760];
  v8[1] = 3221225472;
  v8[2] = ___ZN9ULDBUtils13insertEntriesI37CLMicroLocationBluetoothIdentityTable21ULBluetoothIdentityMOEEbP7ULStoreRKNSt3__16vectorINT_5EntryENS5_9allocatorIS8_EEEE_block_invoke;
  v8[3] = &unk_2511D22D0;
  v11 = a2;
  v5 = v3;
  v9 = v5;
  v10 = &v12;
  objc_msgSend(v4, "performBlockAndWait:", v8);

  v6 = *((unsigned __int8 *)v13 + 24);
  _Block_object_dispose(&v12, 8);

  return v6;
}

void sub_241B06434(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, uint64_t a8, uint64_t a9, ...)
{
  void *v9;
  void *v10;
  va_list va;

  va_start(va, a9);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void ULDBUtils::fetchEntries<CLMicroLocationBluetoothIdentityTable,ULBluetoothIdentityMO>(void *a1@<X0>, void *a2@<X1>, void *a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  id v9;
  id v10;
  id v11;
  void *v12;
  id v13;
  id v14;
  id v15;
  uint64_t *v16;
  _QWORD v17[4];
  id v18;
  id v19;
  id v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  __n128 (*v26)(__n128 *, __n128 *);
  void (*v27)(uint64_t);
  void *v28;
  _QWORD v29[3];
  void **v30;

  v9 = a1;
  v10 = a2;
  v11 = a3;
  v23 = 0;
  v24 = &v23;
  v25 = 0x4812000000;
  v26 = __Block_byref_object_copy__16;
  v27 = __Block_byref_object_dispose__16;
  v28 = &unk_241BEBD1D;
  memset(v29, 0, sizeof(v29));
  objc_msgSend(v9, "managedObjectContext");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  v17[0] = MEMORY[0x24BDAC760];
  v17[1] = 3221225472;
  v17[2] = ___ZN9ULDBUtils12fetchEntriesI37CLMicroLocationBluetoothIdentityTable21ULBluetoothIdentityMOEENSt3__16vectorINT_5EntryENS3_9allocatorIS6_EEEEP7ULStoreP7NSArrayIP11NSPredicateEPSC_IP16NSSortDescriptorEm_block_invoke;
  v17[3] = &unk_2511D22F8;
  v13 = v10;
  v18 = v13;
  v14 = v11;
  v19 = v14;
  v22 = a4;
  v15 = v9;
  v20 = v15;
  v21 = &v23;
  objc_msgSend(v12, "performBlockAndWait:", v17);

  v16 = v24;
  a5[1] = 0;
  a5[2] = 0;
  *a5 = 0;
  std::vector<CLMicroLocationBluetoothIdentityTable::Entry>::__init_with_size[abi:ne180100]<CLMicroLocationBluetoothIdentityTable::Entry*,CLMicroLocationBluetoothIdentityTable::Entry*>(a5, v16[6], v16[7], 0x8E38E38E38E38E39 * ((v16[7] - v16[6]) >> 3));

  _Block_object_dispose(&v23, 8);
  v30 = (void **)v29;
  std::vector<CLMicroLocationBluetoothIdentityTable::Entry>::__destroy_vector::operator()[abi:ne180100](&v30);

}

void sub_241B065FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, void *a7, void *a8, uint64_t a9, uint64_t a10, ...)
{
  void *v10;
  void *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  va_list va;

  va_start(va, a10);

  _Block_object_dispose(va, 8);
  *(_QWORD *)(v14 - 96) = v13;
  std::vector<CLMicroLocationBluetoothIdentityTable::Entry>::__destroy_vector::operator()[abi:ne180100]((void ***)(v14 - 96));

  _Unwind_Resume(a1);
}

void ULDBUtils::fetchAllWithLimit<CLMicroLocationBluetoothIdentityTable,ULBluetoothIdentityMO>(void *a1@<X0>, unsigned int a2@<W1>, _QWORD *a3@<X8>)
{
  id v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  _QWORD v10[2];

  v10[1] = *MEMORY[0x24BDAC8D0];
  v5 = a1;
  v6 = (void *)MEMORY[0x24BDD17C0];
  objc_msgSend((id)objc_opt_class(), "defaultSortProperty");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "sortDescriptorWithKey:ascending:", v7, 0);
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  v10[0] = v8;
  objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", v10, 1);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  ULDBUtils::fetchEntries<CLMicroLocationBluetoothIdentityTable,ULBluetoothIdentityMO>(v5, 0, v9, a2, a3);

}

void sub_241B0675C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_241B069D4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void ___ZN9ULDBUtils13insertEntriesI37CLMicroLocationBluetoothIdentityTable21ULBluetoothIdentityMOEEbP7ULStoreRKNSt3__16vectorINT_5EntryENS5_9allocatorIS8_EEEE_block_invoke(uint64_t a1)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;
  NSObject *v7;
  void *v8;
  void *v9;
  NSObject *v10;
  void *v11;
  void *v12;
  void *v13;
  int v14;
  int v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  void *v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  v2 = *(uint64_t **)(a1 + 48);
  v3 = *v2;
  v4 = v2[1];
  if (*v2 == v4)
  {
LABEL_4:
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = objc_msgSend(*(id *)(a1 + 32), "commitChangesToStore");
    objc_msgSend(*(id *)(a1 + 32), "deleteOldestRecordsIfFull");
  }
  else
  {
    while (1)
    {
      objc_msgSend(*(id *)(a1 + 32), "managedObjectContext");
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      +[ULBluetoothIdentityMO createFromEntry:inManagedObjectContext:](ULBluetoothIdentityMO, "createFromEntry:inManagedObjectContext:", v3, v5);
      v6 = (void *)objc_claimAutoreleasedReturnValue();

      if (!v6)
        break;

      v3 += 72;
      if (v3 == v4)
        goto LABEL_4;
    }
    if (onceToken_MicroLocation_Default != -1)
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_81);
    v7 = (id)logObject_MicroLocation_Default;
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      +[ULBluetoothIdentityMO entity](ULBluetoothIdentityMO, "entity");
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v8, "name");
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      v14 = 68289283;
      v15 = 0;
      v16 = 2082;
      v17 = "";
      v18 = 2113;
      v19 = v9;
      _os_log_impl(&dword_2419D9000, v7, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"Failed to create entry from MO\", \"MO\":%{private, location:escape_only}@}", (uint8_t *)&v14, 0x1Cu);

    }
    if (onceToken_MicroLocation_Default != -1)
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_81);
    v10 = (id)logObject_MicroLocation_Default;
    if (os_signpost_enabled(v10))
    {
      +[ULBluetoothIdentityMO entity](ULBluetoothIdentityMO, "entity");
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v11, "name");
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      v14 = 68289283;
      v15 = 0;
      v16 = 2082;
      v17 = "";
      v18 = 2113;
      v19 = v12;
      _os_signpost_emit_with_name_impl(&dword_2419D9000, v10, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Failed to create entry from MO", "{\"msg%{public}.0s\":\"Failed to create entry from MO\", \"MO\":%{private, location:escape_only}@}", (uint8_t *)&v14, 0x1Cu);

    }
    objc_msgSend(*(id *)(a1 + 32), "managedObjectContext");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v13, "reset");

  }
}

void sub_241B06D10(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void ___ZL45_CLLogObjectForCategory_MicroLocation_Defaultv_block_invoke_65()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.MicroLocation", "MicroLocation");
  v1 = (void *)logObject_MicroLocation_Default;
  logObject_MicroLocation_Default = (uint64_t)v0;

}

__n128 __Block_byref_object_copy__16(__n128 *a1, __n128 *a2)
{
  __n128 result;

  a1[3].n128_u64[0] = 0;
  a1[3].n128_u64[1] = 0;
  a1[4].n128_u64[0] = 0;
  result = a2[3];
  a1[3] = result;
  a1[4].n128_u64[0] = a2[4].n128_u64[0];
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = 0;
  a2[4].n128_u64[0] = 0;
  return result;
}

void __Block_byref_object_dispose__16(uint64_t a1)
{
  void **v1;

  v1 = (void **)(a1 + 48);
  std::vector<CLMicroLocationBluetoothIdentityTable::Entry>::__destroy_vector::operator()[abi:ne180100](&v1);
}

void ___ZN9ULDBUtils12fetchEntriesI37CLMicroLocationBluetoothIdentityTable21ULBluetoothIdentityMOEENSt3__16vectorINT_5EntryENS3_9allocatorIS6_EEEEP7ULStoreP7NSArrayIP11NSPredicateEPSC_IP16NSSortDescriptorEm_block_invoke(uint64_t a1)
{
  void *v2;
  objc_class *v3;
  void *v4;
  void *v5;
  uint64_t v6;
  void *v7;
  __int128 v8;
  uint64_t v9;
  void **v10;

  v2 = *(void **)(a1 + 48);
  v3 = (objc_class *)objc_opt_class();
  NSStringFromClass(v3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "fetchManagedObjectsWithEntityName:byAndPredicates:sortDescriptors:andLimit:", v4, *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 64));
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  ULDBUtils::convertManagedObjectsToEntries<CLMicroLocationBluetoothIdentityTable,ULBluetoothIdentityMO>(v5, (uint64_t *)&v8);
  v6 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
  std::vector<CLMicroLocationBluetoothIdentityTable::Entry>::__vdeallocate((void **)(v6 + 48));
  *(_OWORD *)(v6 + 48) = v8;
  *(_QWORD *)(v6 + 64) = v9;
  v9 = 0;
  v8 = 0uLL;
  v10 = (void **)&v8;
  std::vector<CLMicroLocationBluetoothIdentityTable::Entry>::__destroy_vector::operator()[abi:ne180100](&v10);
  objc_msgSend(*(id *)(a1 + 48), "managedObjectContext");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "reset");

}

void sub_241B06EA8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void ULDBUtils::convertManagedObjectsToEntries<CLMicroLocationBluetoothIdentityTable,ULBluetoothIdentityMO>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  id v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  id v8;
  void *v9;
  NSObject *v10;
  void *v11;
  void *v12;
  NSObject *v13;
  void *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint8_t buf[4];
  int v23;
  __int16 v24;
  const char *v25;
  __int16 v26;
  void *v27;
  _OWORD v28[4];
  __int128 v29;
  _BYTE v30[128];
  uint64_t v31;

  v31 = *MEMORY[0x24BDAC8D0];
  v3 = a1;
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  std::vector<CLMicroLocationBluetoothIdentityTable::Entry>::reserve(a2, objc_msgSend(v3, "count"));
  v20 = 0u;
  v21 = 0u;
  v18 = 0u;
  v19 = 0u;
  v4 = v3;
  v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v18, v30, 16);
  if (v5)
  {
    v6 = *(_QWORD *)v19;
    while (2)
    {
      for (i = 0; i != v5; ++i)
      {
        if (*(_QWORD *)v19 != v6)
          objc_enumerationMutation(v4);
        v8 = *(id *)(*((_QWORD *)&v18 + 1) + 8 * i);
        v9 = v8;
        if (!v8)
        {
          v29 = 0u;
          memset(v28, 0, sizeof(v28));
LABEL_13:
          if (onceToken_MicroLocation_Default != -1)
            dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_81);
          v10 = (id)logObject_MicroLocation_Default;
          if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
          {
            objc_msgSend(v9, "entity");
            v11 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v11, "name");
            v12 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 68289283;
            v23 = 0;
            v24 = 2082;
            v25 = "";
            v26 = 2113;
            v27 = v12;
            _os_log_impl(&dword_2419D9000, v10, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"Failed to convert MO to entry\", \"MO\":%{private, location:escape_only}@}", buf, 0x1Cu);

          }
          if (onceToken_MicroLocation_Default != -1)
            dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_81);
          v13 = (id)logObject_MicroLocation_Default;
          if (os_signpost_enabled(v13))
          {
            objc_msgSend(v9, "entity");
            v14 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v14, "name");
            v15 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 68289283;
            v23 = 0;
            v24 = 2082;
            v25 = "";
            v26 = 2113;
            v27 = v15;
            _os_signpost_emit_with_name_impl(&dword_2419D9000, v13, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Failed to convert MO to entry", "{\"msg%{public}.0s\":\"Failed to convert MO to entry\", \"MO\":%{private, location:escape_only}@}", buf, 0x1Cu);

          }
          std::__optional_destruct_base<CLMicroLocationBluetoothIdentityTable::Entry,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)v28);

          v17 = *a2;
          v16 = a2[1];
          if (v16 != *a2)
          {
            do
            {
              v16 -= 72;
              std::allocator<CLMicroLocationRapportMonitor::Item>::destroy[abi:ne180100]((uint64_t)(a2 + 2), v16);
            }
            while (v16 != v17);
          }
          a2[1] = v17;
          goto LABEL_24;
        }
        objc_msgSend(v8, "convertToEntry", (_QWORD)v18);
        if (!BYTE8(v29))
          goto LABEL_13;
        std::vector<CLMicroLocationBluetoothIdentityTable::Entry>::push_back[abi:ne180100](a2, (uint64_t)v28);
        std::__optional_destruct_base<CLMicroLocationBluetoothIdentityTable::Entry,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)v28);

      }
      v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v18, v30, 16);
      if (v5)
        continue;
      break;
    }
  }

LABEL_24:
}

void sub_241B07204(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  va_list va;

  va_start(va, a13);
  v18 = v16;

  std::__optional_destruct_base<CLMicroLocationBluetoothIdentityTable::Entry,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)va);
  std::vector<CLMicroLocationBluetoothIdentityTable::Entry>::__destroy_vector::operator()[abi:ne180100]((void ***)va);

  _Unwind_Resume(a1);
}

void **std::vector<CLMicroLocationBluetoothIdentityTable::Entry>::reserve(uint64_t *a1, unint64_t a2)
{
  void **result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7[5];

  v4 = a1[2];
  result = (void **)(a1 + 2);
  if (0x8E38E38E38E38E39 * ((v4 - *a1) >> 3) < a2)
  {
    if (a2 >= 0x38E38E38E38E38FLL)
      std::vector<CLMicroLocationProto::ConfidenceReason>::__throw_length_error[abi:ne180100]();
    v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = std::__allocate_at_least[abi:ne180100]<std::allocator<CLMicroLocationAssociatedStateTable::Entry>>((uint64_t)result, a2);
    v7[1] = (char *)v7[0] + v5;
    v7[2] = (char *)v7[0] + v5;
    v7[3] = (char *)v7[0] + 72 * v6;
    std::vector<CLMicroLocationBluetoothIdentityTable::Entry>::__swap_out_circular_buffer(a1, v7);
    return std::__split_buffer<CLMicroLocationBluetoothIdentityTable::Entry>::~__split_buffer(v7);
  }
  return result;
}

void sub_241B07338(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<CLMicroLocationBluetoothIdentityTable::Entry>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

void **std::vector<CLMicroLocationBluetoothIdentityTable::Entry>::push_back[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  void **result;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  void *v20[5];

  v6 = a1[2];
  result = (void **)(a1 + 2);
  v5 = v6;
  v7 = (unint64_t)*(result - 1);
  if (v7 >= v6)
  {
    v11 = 0x8E38E38E38E38E39 * ((uint64_t)(v7 - *a1) >> 3);
    v12 = v11 + 1;
    if (v11 + 1 > 0x38E38E38E38E38ELL)
      std::vector<CLMicroLocationProto::ConfidenceReason>::__throw_length_error[abi:ne180100]();
    v13 = 0x8E38E38E38E38E39 * ((uint64_t)(v5 - *a1) >> 3);
    if (2 * v13 > v12)
      v12 = 2 * v13;
    if (v13 >= 0x1C71C71C71C71C7)
      v14 = 0x38E38E38E38E38ELL;
    else
      v14 = v12;
    v20[4] = result;
    v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CLMicroLocationAssociatedStateTable::Entry>>((uint64_t)result, v14);
    v16 = &v15[72 * v11];
    v20[0] = v15;
    v20[1] = v16;
    v20[3] = &v15[72 * v17];
    *(_OWORD *)v16 = *(_OWORD *)a2;
    v18 = *(_QWORD *)(a2 + 32);
    *((_OWORD *)v16 + 1) = *(_OWORD *)(a2 + 16);
    *((_QWORD *)v16 + 4) = v18;
    *(_QWORD *)(a2 + 24) = 0;
    *(_QWORD *)(a2 + 32) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    v19 = *(_OWORD *)(a2 + 40);
    *((_QWORD *)v16 + 7) = *(_QWORD *)(a2 + 56);
    *(_OWORD *)(v16 + 40) = v19;
    *(_QWORD *)(a2 + 40) = 0;
    *(_QWORD *)(a2 + 48) = 0;
    *(_QWORD *)(a2 + 56) = 0;
    *((_QWORD *)v16 + 8) = *(_QWORD *)(a2 + 64);
    v20[2] = v16 + 72;
    std::vector<CLMicroLocationBluetoothIdentityTable::Entry>::__swap_out_circular_buffer(a1, v20);
    v10 = a1[1];
    result = std::__split_buffer<CLMicroLocationBluetoothIdentityTable::Entry>::~__split_buffer(v20);
  }
  else
  {
    *(_OWORD *)v7 = *(_OWORD *)a2;
    v8 = *(_OWORD *)(a2 + 16);
    *(_QWORD *)(v7 + 32) = *(_QWORD *)(a2 + 32);
    *(_OWORD *)(v7 + 16) = v8;
    *(_QWORD *)(a2 + 24) = 0;
    *(_QWORD *)(a2 + 32) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    v9 = *(_OWORD *)(a2 + 40);
    *(_QWORD *)(v7 + 56) = *(_QWORD *)(a2 + 56);
    *(_OWORD *)(v7 + 40) = v9;
    *(_QWORD *)(a2 + 48) = 0;
    *(_QWORD *)(a2 + 56) = 0;
    *(_QWORD *)(a2 + 40) = 0;
    *(_QWORD *)(v7 + 64) = *(_QWORD *)(a2 + 64);
    v10 = v7 + 72;
    a1[1] = v7 + 72;
  }
  a1[1] = v10;
  return result;
}

void sub_241B074CC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<CLMicroLocationBluetoothIdentityTable::Entry>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t std::__optional_destruct_base<CLMicroLocationBluetoothIdentityTable::Entry,false>::~__optional_destruct_base[abi:ne180100](uint64_t a1)
{
  if (*(_BYTE *)(a1 + 72))
  {
    if (*(char *)(a1 + 63) < 0)
      operator delete(*(void **)(a1 + 40));
    if (*(char *)(a1 + 39) < 0)
      operator delete(*(void **)(a1 + 16));
  }
  return a1;
}

void std::vector<CLMicroLocationBluetoothIdentityTable::Entry>::__vdeallocate(void **a1)
{
  void *v1;
  uint64_t v3;
  void *v4;

  v1 = *a1;
  if (*a1)
  {
    v3 = (uint64_t)a1[1];
    v4 = *a1;
    if ((void *)v3 != v1)
    {
      do
      {
        v3 -= 72;
        std::allocator<CLMicroLocationRapportMonitor::Item>::destroy[abi:ne180100]((uint64_t)(a1 + 2), v3);
      }
      while ((void *)v3 != v1);
      v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

_QWORD *std::vector<CLMicroLocationBluetoothIdentityTable::Entry>::__init_with_size[abi:ne180100]<CLMicroLocationBluetoothIdentityTable::Entry*,CLMicroLocationBluetoothIdentityTable::Entry*>(_QWORD *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;

  if (a4)
  {
    v6 = result;
    std::vector<CLMicroLocationBluetoothIdentityTable::Entry>::__vallocate[abi:ne180100](result, a4);
    result = (_QWORD *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<CLMicroLocationBluetoothIdentityTable::Entry>,CLMicroLocationBluetoothIdentityTable::Entry*,CLMicroLocationBluetoothIdentityTable::Entry*,CLMicroLocationBluetoothIdentityTable::Entry*>((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_241B075F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  std::vector<CLMicroLocationBluetoothIdentityTable::Entry>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

char *std::vector<CLMicroLocationBluetoothIdentityTable::Entry>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0x38E38E38E38E38FLL)
    std::vector<CLMicroLocationProto::ConfidenceReason>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CLMicroLocationAssociatedStateTable::Entry>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[72 * v4];
  return result;
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<CLMicroLocationBluetoothIdentityTable::Entry>,CLMicroLocationBluetoothIdentityTable::Entry*,CLMicroLocationBluetoothIdentityTable::Entry*,CLMicroLocationBluetoothIdentityTable::Entry*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  _QWORD v9[3];
  char v10;
  uint64_t v11;
  uint64_t v12;

  v4 = a4;
  v11 = a4;
  v12 = a4;
  v9[0] = a1;
  v9[1] = &v11;
  v9[2] = &v12;
  v10 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      std::allocator<CLMicroLocationBluetoothIdentityTable::Entry>::construct[abi:ne180100]<CLMicroLocationBluetoothIdentityTable::Entry,CLMicroLocationBluetoothIdentityTable::Entry&>(a1, v4, v6);
      v6 += 72;
      v4 = v12 + 72;
      v12 += 72;
    }
    while (v6 != a3);
  }
  v10 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<CLMicroLocationBluetoothIdentityTable::Entry>,CLMicroLocationBluetoothIdentityTable::Entry*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v9);
  return v4;
}

void sub_241B07700(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<CLMicroLocationBluetoothIdentityTable::Entry>,CLMicroLocationBluetoothIdentityTable::Entry*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void std::allocator<CLMicroLocationBluetoothIdentityTable::Entry>::construct[abi:ne180100]<CLMicroLocationBluetoothIdentityTable::Entry,CLMicroLocationBluetoothIdentityTable::Entry&>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  std::string *v5;
  __int128 v6;
  std::string *v7;
  __int128 v8;

  *(_OWORD *)a2 = *(_OWORD *)a3;
  v5 = (std::string *)(a2 + 16);
  if (*(char *)(a3 + 39) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)(a3 + 16), *(_QWORD *)(a3 + 24));
  }
  else
  {
    v6 = *(_OWORD *)(a3 + 16);
    *(_QWORD *)(a2 + 32) = *(_QWORD *)(a3 + 32);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  v7 = (std::string *)(a2 + 40);
  if (*(char *)(a3 + 63) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)(a3 + 40), *(_QWORD *)(a3 + 48));
  }
  else
  {
    v8 = *(_OWORD *)(a3 + 40);
    *(_QWORD *)(a2 + 56) = *(_QWORD *)(a3 + 56);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v8;
  }
  *(_QWORD *)(a2 + 64) = *(_QWORD *)(a3 + 64);
}

void sub_241B077A8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 39) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<CLMicroLocationBluetoothIdentityTable::Entry>,CLMicroLocationBluetoothIdentityTable::Entry*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<CLMicroLocationBluetoothIdentityTable::Entry>,CLMicroLocationBluetoothIdentityTable::Entry*>::operator()[abi:ne180100]((uint64_t *)a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<CLMicroLocationBluetoothIdentityTable::Entry>,CLMicroLocationBluetoothIdentityTable::Entry*>::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = (uint64_t *)a1[1];
  v1 = (uint64_t *)a1[2];
  v3 = *v1;
  v4 = *v2;
  if (*v1 != *v2)
  {
    v5 = *a1;
    do
    {
      v3 -= 72;
      std::allocator<CLMicroLocationRapportMonitor::Item>::destroy[abi:ne180100](v5, v3);
    }
    while (v3 != v4);
  }
}

void std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<CLMicroLocationBluetoothIdentityTable::Entry *&,CLMicroLocationBluetoothIdentityTable::Entry *&>(__int128 **a1, uint64_t *a2)
{
  __int128 *v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  void **v7;
  char v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  _BYTE v12[15];
  _BYTE v13[15];
  __int128 v14;

  v2 = *a1;
  v3 = *a2;
  v14 = **a1;
  v4 = *((_QWORD *)*a1 + 2);
  *(_QWORD *)v13 = *((_QWORD *)*a1 + 3);
  *(_QWORD *)&v13[7] = *(_QWORD *)((char *)*a1 + 31);
  v5 = *((_BYTE *)*a1 + 39);
  *((_QWORD *)v2 + 3) = 0;
  *((_QWORD *)v2 + 4) = 0;
  *((_QWORD *)v2 + 2) = 0;
  v7 = (void **)v2 + 5;
  v6 = *((_QWORD *)v2 + 5);
  *(_QWORD *)v12 = *((_QWORD *)v2 + 6);
  *(_QWORD *)&v12[7] = *(_QWORD *)((char *)v2 + 55);
  v8 = *((_BYTE *)v2 + 63);
  *((_QWORD *)v2 + 5) = 0;
  *((_QWORD *)v2 + 6) = 0;
  *((_QWORD *)v2 + 7) = 0;
  v9 = *((_QWORD *)v2 + 8);
  *v2 = *(_OWORD *)v3;
  v10 = *(_OWORD *)(v3 + 16);
  *((_QWORD *)v2 + 4) = *(_QWORD *)(v3 + 32);
  v2[1] = v10;
  *(_BYTE *)(v3 + 39) = 0;
  *(_BYTE *)(v3 + 16) = 0;
  if (*((char *)v2 + 63) < 0)
    operator delete(*v7);
  v11 = *(_OWORD *)(v3 + 40);
  *((_QWORD *)v2 + 7) = *(_QWORD *)(v3 + 56);
  *(_OWORD *)v7 = v11;
  *(_BYTE *)(v3 + 63) = 0;
  *(_BYTE *)(v3 + 40) = 0;
  *((_QWORD *)v2 + 8) = *(_QWORD *)(v3 + 64);
  *(_OWORD *)v3 = v14;
  if (*(char *)(v3 + 39) < 0)
    operator delete(*(void **)(v3 + 16));
  *(_QWORD *)(v3 + 16) = v4;
  *(_QWORD *)(v3 + 24) = *(_QWORD *)v13;
  *(_QWORD *)(v3 + 31) = *(_QWORD *)&v13[7];
  *(_BYTE *)(v3 + 39) = v5;
  if (*(char *)(v3 + 63) < 0)
    operator delete(*(void **)(v3 + 40));
  *(_QWORD *)(v3 + 40) = v6;
  *(_QWORD *)(v3 + 48) = *(_QWORD *)v12;
  *(_QWORD *)(v3 + 55) = *(_QWORD *)&v12[7];
  *(_BYTE *)(v3 + 63) = v8;
  *(_QWORD *)(v3 + 64) = v9;
}

void std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,-[ULBluetoothIdentityStore fetchBtIdentityEntriesBetweenTimes:toTime:]::$_0 &,CLMicroLocationBluetoothIdentityTable::Entry *>(double *a1, double *a2, uint64_t a3)
{
  double v3;
  double v4;
  double **v5;
  uint64_t *v6;
  uint64_t v7;
  double *v8;
  double *v9;

  v9 = a1;
  v7 = a3;
  v8 = a2;
  v3 = a2[8];
  v4 = *(double *)(a3 + 64);
  if (v3 < a1[8])
  {
    v5 = &v9;
    if (v4 >= v3)
    {
      std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<CLMicroLocationBluetoothIdentityTable::Entry *&,CLMicroLocationBluetoothIdentityTable::Entry *&>((__int128 **)&v9, (uint64_t *)&v8);
      if (*(double *)(v7 + 64) >= v8[8])
        return;
      v5 = &v8;
    }
    v6 = &v7;
    goto LABEL_9;
  }
  if (v4 < v3)
  {
    std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<CLMicroLocationBluetoothIdentityTable::Entry *&,CLMicroLocationBluetoothIdentityTable::Entry *&>((__int128 **)&v8, &v7);
    if (v8[8] < v9[8])
    {
      v5 = &v9;
      v6 = (uint64_t *)&v8;
LABEL_9:
      std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<CLMicroLocationBluetoothIdentityTable::Entry *&,CLMicroLocationBluetoothIdentityTable::Entry *&>((__int128 **)v5, v6);
    }
  }
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,-[ULBluetoothIdentityStore fetchBtIdentityEntriesBetweenTimes:toTime:]::$_0 &,CLMicroLocationBluetoothIdentityTable::Entry *>(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  _BOOL8 result;
  __int128 **v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  double v12;
  uint64_t v13;
  char v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  double *v30;
  _OWORD v31[2];
  _BYTE v32[15];
  __int128 v33;
  uint64_t v34;

  v34 = *MEMORY[0x24BDAC8D0];
  v28 = a1;
  v4 = 0x8E38E38E38E38E39 * ((a2 - a1) >> 3);
  result = 1;
  switch(v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      v27 = a2 - 72;
      if (*(double *)(a2 - 8) < *(double *)(a1 + 64))
      {
        v6 = (__int128 **)&v28;
        v7 = &v27;
        goto LABEL_4;
      }
      return result;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,-[ULBluetoothIdentityStore fetchBtIdentityEntriesBetweenTimes:toTime:]::$_0 &,CLMicroLocationBluetoothIdentityTable::Entry *>((double *)a1, (double *)(a1 + 72), a2 - 72);
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,-[ULBluetoothIdentityStore fetchBtIdentityEntriesBetweenTimes:toTime:]::$_0 &,CLMicroLocationBluetoothIdentityTable::Entry *>(a1, (double *)(a1 + 72), a1 + 144, a2 - 72);
      return 1;
    case 5uLL:
      *(_QWORD *)&v33 = a1 + 72;
      *(_QWORD *)v32 = a1 + 144;
      v30 = (double *)(a1 + 216);
      *(_QWORD *)&v31[0] = a1;
      v29 = a2 - 72;
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,-[ULBluetoothIdentityStore fetchBtIdentityEntriesBetweenTimes:toTime:]::$_0 &,CLMicroLocationBluetoothIdentityTable::Entry *>(a1, (double *)(a1 + 72), a1 + 144, a1 + 216);
      if (*(double *)(a2 - 8) < *(double *)(a1 + 280))
      {
        std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<CLMicroLocationBluetoothIdentityTable::Entry *&,CLMicroLocationBluetoothIdentityTable::Entry *&>((__int128 **)&v30, &v29);
        if (v30[8] < *(double *)(a1 + 208))
        {
          std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<CLMicroLocationBluetoothIdentityTable::Entry *&,CLMicroLocationBluetoothIdentityTable::Entry *&>((__int128 **)v32, (uint64_t *)&v30);
          if (*(double *)(*(_QWORD *)v32 + 64) < *(double *)(a1 + 136))
          {
            std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<CLMicroLocationBluetoothIdentityTable::Entry *&,CLMicroLocationBluetoothIdentityTable::Entry *&>((__int128 **)&v33, (uint64_t *)v32);
            if (*(double *)(v33 + 64) < *(double *)(a1 + 64))
            {
              v6 = (__int128 **)v31;
              v7 = (uint64_t *)&v33;
LABEL_4:
              std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<CLMicroLocationBluetoothIdentityTable::Entry *&,CLMicroLocationBluetoothIdentityTable::Entry *&>(v6, v7);
            }
          }
        }
      }
      return 1;
    default:
      v8 = a1 + 144;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,-[ULBluetoothIdentityStore fetchBtIdentityEntriesBetweenTimes:toTime:]::$_0 &,CLMicroLocationBluetoothIdentityTable::Entry *>((double *)a1, (double *)(a1 + 72), a1 + 144);
      v9 = a1 + 216;
      if (a1 + 216 == a2)
        return 1;
      v10 = 0;
      v11 = 0;
      break;
  }
  while (1)
  {
    v12 = *(double *)(v9 + 64);
    if (v12 < *(double *)(v8 + 64))
    {
      v33 = *(_OWORD *)v9;
      v13 = *(_QWORD *)(v9 + 16);
      *(_QWORD *)v32 = *(_QWORD *)(v9 + 24);
      *(_QWORD *)&v32[7] = *(_QWORD *)(v9 + 31);
      v14 = *(_BYTE *)(v9 + 39);
      *(_QWORD *)(v9 + 16) = 0;
      *(_QWORD *)(v9 + 24) = 0;
      v15 = *(_BYTE *)(v9 + 40);
      v31[0] = *(_OWORD *)(v9 + 41);
      *(_QWORD *)((char *)v31 + 14) = *(_QWORD *)(v9 + 55);
      v25 = *(_BYTE *)(v9 + 63);
      v26 = v15;
      *(_QWORD *)(v9 + 32) = 0;
      *(_QWORD *)(v9 + 40) = 0;
      v16 = v10;
      *(_QWORD *)(v9 + 48) = 0;
      *(_QWORD *)(v9 + 56) = 0;
      while (1)
      {
        v17 = v16;
        v18 = a1 + v16;
        *(_OWORD *)(a1 + v16 + 216) = *(_OWORD *)(a1 + v16 + 144);
        v19 = a1 + v16 + 232;
        if (*(char *)(a1 + v16 + 255) < 0)
          operator delete(*(void **)v19);
        *(_OWORD *)v19 = *(_OWORD *)(v18 + 160);
        *(_QWORD *)(v19 + 16) = *(_QWORD *)(v18 + 176);
        *(_BYTE *)(v18 + 183) = 0;
        *(_BYTE *)(v18 + 160) = 0;
        v20 = v18 + 256;
        if (*(char *)(v18 + 279) < 0)
          operator delete(*(void **)v20);
        v21 = a1 + v17;
        *(_OWORD *)v20 = *(_OWORD *)(a1 + v17 + 184);
        v22 = *(_QWORD *)(a1 + v17 + 208);
        *(_QWORD *)(v20 + 16) = *(_QWORD *)(a1 + v17 + 200);
        *(_BYTE *)(v21 + 207) = 0;
        *(_BYTE *)(v21 + 184) = 0;
        *(_QWORD *)(v21 + 280) = v22;
        if (v17 == -144)
          break;
        v16 = v17 - 72;
        if (v12 >= *(double *)(v21 + 136))
        {
          v23 = a1 + v16 + 216;
          goto LABEL_17;
        }
      }
      v23 = a1;
LABEL_17:
      *(_OWORD *)v23 = v33;
      if (*(char *)(v23 + 39) < 0)
        operator delete(*(void **)(v21 + 160));
      *(_QWORD *)(v21 + 160) = v13;
      v24 = a1 + v17;
      *(_QWORD *)(v24 + 168) = *(_QWORD *)v32;
      *(_QWORD *)(v24 + 175) = *(_QWORD *)&v32[7];
      *(_BYTE *)(v21 + 183) = v14;
      if (*(char *)(v23 + 63) < 0)
        operator delete(*(void **)(v21 + 184));
      *(_BYTE *)(v21 + 184) = v26;
      *(_OWORD *)(v24 + 185) = v31[0];
      *(_QWORD *)(v24 + 199) = *(_QWORD *)((char *)v31 + 14);
      *(_BYTE *)(v21 + 207) = v25;
      *(double *)(v23 + 64) = v12;
      if (++v11 == 8)
        return v9 + 72 == a2;
    }
    v8 = v9;
    v10 += 72;
    v9 += 72;
    if (v9 == a2)
      return 1;
  }
}

void std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,-[ULBluetoothIdentityStore fetchBtIdentityEntriesBetweenTimes:toTime:]::$_0 &,CLMicroLocationBluetoothIdentityTable::Entry *>(uint64_t a1, double *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  double *v9;
  double *v10;
  __int128 *v11;

  v10 = a2;
  v11 = (__int128 *)a1;
  v8 = a4;
  v9 = (double *)a3;
  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,-[ULBluetoothIdentityStore fetchBtIdentityEntriesBetweenTimes:toTime:]::$_0 &,CLMicroLocationBluetoothIdentityTable::Entry *>((double *)a1, a2, a3);
  if (*(double *)(a4 + 64) < *(double *)(a3 + 64))
  {
    std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<CLMicroLocationBluetoothIdentityTable::Entry *&,CLMicroLocationBluetoothIdentityTable::Entry *&>((__int128 **)&v9, &v8);
    if (v9[8] < a2[8])
    {
      std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<CLMicroLocationBluetoothIdentityTable::Entry *&,CLMicroLocationBluetoothIdentityTable::Entry *&>((__int128 **)&v10, (uint64_t *)&v9);
      if (v10[8] < *(double *)(a1 + 64))
        std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<CLMicroLocationBluetoothIdentityTable::Entry *&,CLMicroLocationBluetoothIdentityTable::Entry *&>(&v11, (uint64_t *)&v10);
    }
  }
}

void ULDatabase::ULDatabase(ULDatabase *this)
{
  void *v2;
  id var18;

  this->var0 = (void **)&off_2511D9578;
  this->var18 = 0;
  *(_OWORD *)&this->var1 = 0u;
  *(_OWORD *)&this->var3 = 0u;
  *(_OWORD *)&this->var5 = 0u;
  *(_OWORD *)&this->var7 = 0u;
  *(_OWORD *)&this->var9 = 0u;
  *(_OWORD *)&this->var11 = 0u;
  *(_OWORD *)&this->var13 = 0u;
  *(_OWORD *)&this->var15 = 0u;
  this->var17 = 1;
  objc_msgSend(MEMORY[0x24BDBCEB8], "array");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  var18 = this->var18;
  this->var18 = v2;

}

void sub_241B08F24(_Unwind_Exception *a1)
{
  id *v1;

  _Unwind_Resume(a1);
}

void ULDatabase::~ULDatabase(ULDatabase *this)
{
  id var1;
  id v3;

  this->var0 = (void **)&off_2511D9578;
  var1 = this->var1;
  if (var1)
  {
    objc_msgSend(var1, "disconnectFromStore");
    v3 = this->var1;
    this->var1 = 0;

  }
}

{
  ULDatabase::~ULDatabase(this);
  JUMPOUT(0x2426A04D4);
}

void ULDatabase::initDataStores(ULDatabase *this)
{
  ULAssociatedStateStore *v2;
  id var2;
  ULBluetoothIdentityStore *v4;
  id var3;
  ULConfigurationStore *v6;
  id var4;
  ULLabelStore *v8;
  id var5;
  ULLoggedEventStore *v10;
  id var6;
  ULLoiStore *v12;
  id var7;
  ULMeasurementStore *v14;
  id var8;
  ULModelStore *v16;
  id var9;
  ULRapportStore *v18;
  id var10;
  ULRecordingEventStore *v20;
  id var11;
  ULServiceStore *v22;
  id var12;
  ULCustomLoiStore *v24;
  id var13;
  ULMigrationStore *v26;
  id var14;
  ULOdometryStore *v28;
  id var15;
  ULHomeSlamAnalyticEventStore *v30;
  id var16;

  v2 = -[ULStore initWithDb:]([ULAssociatedStateStore alloc], "initWithDb:", this);
  var2 = this->var2;
  this->var2 = v2;

  v4 = -[ULStore initWithDb:]([ULBluetoothIdentityStore alloc], "initWithDb:", this);
  var3 = this->var3;
  this->var3 = v4;

  v6 = -[ULStore initWithDb:]([ULConfigurationStore alloc], "initWithDb:", this);
  var4 = this->var4;
  this->var4 = v6;

  v8 = -[ULStore initWithDb:]([ULLabelStore alloc], "initWithDb:", this);
  var5 = this->var5;
  this->var5 = v8;

  v10 = -[ULStore initWithDb:]([ULLoggedEventStore alloc], "initWithDb:", this);
  var6 = this->var6;
  this->var6 = v10;

  v12 = -[ULStore initWithDb:]([ULLoiStore alloc], "initWithDb:", this);
  var7 = this->var7;
  this->var7 = v12;

  v14 = -[ULStore initWithDb:]([ULMeasurementStore alloc], "initWithDb:", this);
  var8 = this->var8;
  this->var8 = v14;

  v16 = -[ULStore initWithDb:]([ULModelStore alloc], "initWithDb:", this);
  var9 = this->var9;
  this->var9 = v16;

  v18 = -[ULStore initWithDb:]([ULRapportStore alloc], "initWithDb:", this);
  var10 = this->var10;
  this->var10 = v18;

  v20 = -[ULStore initWithDb:]([ULRecordingEventStore alloc], "initWithDb:", this);
  var11 = this->var11;
  this->var11 = v20;

  v22 = -[ULStore initWithDb:]([ULServiceStore alloc], "initWithDb:", this);
  var12 = this->var12;
  this->var12 = v22;

  v24 = -[ULStore initWithDb:]([ULCustomLoiStore alloc], "initWithDb:", this);
  var13 = this->var13;
  this->var13 = v24;

  v26 = -[ULStore initWithDb:]([ULMigrationStore alloc], "initWithDb:", this);
  var14 = this->var14;
  this->var14 = v26;

  v28 = -[ULStore initWithDb:]([ULOdometryStore alloc], "initWithDb:", this);
  var15 = this->var15;
  this->var15 = v28;

  v30 = -[ULStore initWithDb:]([ULHomeSlamAnalyticEventStore alloc], "initWithDb:", this);
  var16 = this->var16;
  this->var16 = v30;

}

uint64_t ULDatabase::dropTables(ULDatabase *this)
{
  NSObject *v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  uint64_t v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  uint64_t v16;
  NSObject *v17;
  int v19;
  int v20;
  std::string *v21;
  std::string *v22;
  _QWORD v23[2];
  char v24;
  uint8_t buf[24];
  _QWORD v26[3];
  __int128 v27;

  *((_QWORD *)&v27 + 1) = *MEMORY[0x24BDAC8D0];
  if ((objc_msgSend(this->var1, "isStoreConnected") & 1) != 0)
  {
    if (onceToken_MicroLocation_Default != -1)
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_82);
    v2 = logObject_MicroLocation_Default;
    if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_2419D9000, v2, OS_LOG_TYPE_DEBUG, "dropping MiLo database tables", buf, 2u);
    }
    v3 = objc_msgSend(this->var8, "deleteAllRecords");
    v4 = objc_msgSend(this->var11, "deleteAllRecords");
    v5 = objc_msgSend(this->var9, "deleteAllRecords");
    v20 = objc_msgSend(this->var4, "deleteAllRecords");
    v19 = objc_msgSend(this->var10, "deleteAllRecords");
    v6 = objc_msgSend(this->var5, "deleteAllRecords");
    v7 = objc_msgSend(this->var6, "deleteAllRecords");
    v8 = objc_msgSend(this->var15, "deleteAllRecords");
    v9 = objc_msgSend(this->var16, "deleteAllRecords");
    std::string::basic_string[abi:ne180100]<0>(buf, "milo-internal-legacy-client-name-unsupervised");
    std::string::basic_string[abi:ne180100]<0>(v26, "focus-mode");
    v21 = 0;
    v22 = 0;
    v23[0] = 0;
    v23[1] = &v21;
    v24 = 0;
    v21 = (std::string *)operator new(0x30uLL);
    v22 = v21;
    v23[0] = v21 + 2;
    v10 = 0;
    v11 = v3 & v4 & v5 & v20 & v19 & v6 & v7 & v8 & v9;
    v22 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)v23, (__int128 *)buf, &v27, v21);
    do
    {
      if (SHIBYTE(v26[v10 + 2]) < 0)
        operator delete(*(void **)&buf[v10 * 8 + 24]);
      v10 -= 3;
    }
    while (v10 != -6);
    v12 = objc_msgSend(this->var12, "deleteAllServicesWithExceptions:", &v21);
    v13 = objc_msgSend(this->var2, "deleteAllRecords");
    v14 = objc_msgSend(this->var3, "deleteAllRecords");
    v15 = objc_msgSend(this->var7, "deleteAllRecords");
    v16 = v11 & v12 & v13 & v14 & v15 & objc_msgSend(this->var13, "deleteAllRecords");
    *(_QWORD *)buf = &v21;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  }
  else
  {
    if (onceToken_MicroLocation_Default != -1)
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_82);
    v17 = logObject_MicroLocation_Default;
    if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_2419D9000, v17, OS_LOG_TYPE_DEBUG, "#Warning Attempt to drop tables without a backing database", buf, 2u);
    }
    return 0;
  }
  return v16;
}

void sub_241B0957C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void **a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  uint64_t v27;

  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a13);
  v27 = 0;
  while (1)
  {
    if (*(&a26 + v27) < 0)
      operator delete(*(void **)((char *)&a21 + v27));
    v27 -= 24;
    if (v27 == -48)
      _Unwind_Resume(a1);
  }
}

uint64_t ULDatabase::isDatabaseConnected(ULDatabase *this)
{
  return objc_msgSend(this->var1, "isStoreConnected");
}

uint64_t ULDatabase::deleteDataOlderThan(id *a1, uint64_t a2, uint64_t a3, char a4)
{
  double v8;
  double v9;
  double v10;
  double v11;
  NSObject *v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  NSObject *v19;
  double v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  uint64_t result;
  NSObject *v29;
  _BOOL4 v30;
  int v31;
  double v32;
  uint64_t v33;

  v33 = *MEMORY[0x24BDAC8D0];
  if ((objc_msgSend(a1[1], "isStoreConnected") & 1) != 0)
  {
    v8 = cl::chrono::CFAbsoluteTimeClock::now();
    v9 = (double)a2;
    if (onceToken_MicroLocation_Default != -1)
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_82);
    v10 = v8 + (double)a2 * -60.0;
    v11 = v8 + 30.0;
    v12 = logObject_MicroLocation_Default;
    if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
    {
      v31 = 134217984;
      v32 = v9 / 1440.0;
      _os_log_impl(&dword_2419D9000, v12, OS_LOG_TYPE_DEFAULT, "Deleting microlocation data older than %.3Lf days", (uint8_t *)&v31, 0xCu);
    }
    v13 = objc_msgSend(a1[8], "deleteRecordsOlderThan:orNewerThan:", v10, v11);
    v14 = objc_msgSend(a1[11], "deleteRecordsOlderThan:orNewerThan:", v10, v11);
    v15 = objc_msgSend(a1[9], "deleteRecordsOlderThan:orNewerThan:", v10, v11);
    v16 = objc_msgSend(a1[4], "deleteRecordsOlderThan:orNewerThan:", v10, v11);
    v17 = objc_msgSend(a1[10], "deleteRecordsOlderThan:orNewerThan:", v10, v11);
    v18 = v13 & v14 & v15 & v16 & v17 & objc_msgSend(a1[5], "deleteRecordsOlderThan:orNewerThan:", v10, v11);
    if (a4)
    {
      if (onceToken_MicroLocation_Default != -1)
        dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_82);
      v19 = logObject_MicroLocation_Default;
      v20 = (double)a3;
      if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
      {
        v31 = 134217984;
        v32 = v20 / 1440.0;
        _os_log_impl(&dword_2419D9000, v19, OS_LOG_TYPE_DEFAULT, "Deleting similarity list labels older than %.3Lf days", (uint8_t *)&v31, 0xCu);
      }
      v18 &= objc_msgSend(a1[5], "deleteSimilarityListLabelsOlderThan:orNewerThan:", v8 + v20 * -60.0, v11);
    }
    v21 = objc_msgSend(a1[6], "deleteRecordsOlderThan:orNewerThan:", v10, v11);
    v22 = objc_msgSend(a1[12], "deleteRecordsOlderThan:orNewerThan:", v10, v11);
    v23 = objc_msgSend(a1[2], "deleteRecordsOlderThan:orNewerThan:", v10, v11);
    v24 = objc_msgSend(a1[7], "deleteRecordsOlderThan:orNewerThan:", v10, v11);
    v25 = objc_msgSend(a1[3], "deleteRecordsOlderThan:orNewerThan:", v10, v11);
    v26 = objc_msgSend(a1[13], "deleteRecordsOlderThan:orNewerThan:", v10, v11);
    v27 = objc_msgSend(a1[15], "deleteRecordsOlderThan:orNewerThan:", v10, v11);
    return v18 & v21 & v22 & v23 & v24 & v25 & v26 & v27 & objc_msgSend(a1[16], "deleteRecordsOlderThan:orNewerThan:", v10, v11);
  }
  else
  {
    if (onceToken_MicroLocation_Default != -1)
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_82);
    v29 = logObject_MicroLocation_Default;
    v30 = os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT);
    result = 0;
    if (v30)
    {
      LOWORD(v31) = 0;
      _os_log_impl(&dword_2419D9000, v29, OS_LOG_TYPE_DEFAULT, "#Warning Attempt to deleteDataOlderThan without a backing database", (uint8_t *)&v31, 2u);
      return 0;
    }
  }
  return result;
}

void ULDatabase::connectIfNecessary(ULDatabase *this)
{
  NSObject *v2;
  uint8_t v3[16];

  if ((objc_msgSend(this->var1, "isStoreConnected") & 1) == 0)
    ULDatabase::initDb(this);
  if ((objc_msgSend(this->var1, "isStoreConnected") & 1) == 0)
  {
    if (onceToken_MicroLocation_Default != -1)
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_82);
    v2 = logObject_MicroLocation_Default;
    if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v3 = 0;
      _os_log_impl(&dword_2419D9000, v2, OS_LOG_TYPE_DEFAULT, "#Warning Failed to connect to database", v3, 2u);
    }
  }
}

uint64_t ULDatabase::initDb(ULDatabase *this)
{
  ULPersistenceManager *v2;
  id var1;

  if (!this->var1)
  {
    v2 = objc_alloc_init(ULPersistenceManager);
    var1 = this->var1;
    this->var1 = v2;

  }
  return ULDatabase::connectToStore(this);
}

uint64_t ULDatabase::connectToStore(ULDatabase *this)
{
  uint64_t v2;
  NSObject *v3;
  NSObject *v4;
  uint8_t v6[16];
  uint8_t buf[16];

  v2 = objc_msgSend(this->var1, "connectToStore");
  if ((_DWORD)v2)
  {
    if (onceToken_MicroLocation_Default != -1)
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_82);
    v3 = logObject_MicroLocation_Default;
    if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_2419D9000, v3, OS_LOG_TYPE_DEFAULT, "Successfully connected to store", buf, 2u);
    }
    ULDatabase::initDataStores(this);
    ULDatabase::notifyClientsOnDatabaseValid(this);
  }
  else
  {
    if (onceToken_MicroLocation_Default != -1)
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_82);
    v4 = logObject_MicroLocation_Default;
    if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v6 = 0;
      _os_log_impl(&dword_2419D9000, v4, OS_LOG_TYPE_ERROR, "Failed to connect to store", v6, 2u);
    }
  }
  return v2;
}

uint64_t ULDatabase::notifyClientsOnDatabaseValid(ULDatabase *this)
{
  uint64_t result;
  NSObject *v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  uint8_t buf[8];
  _BYTE v13[128];
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  result = (*((uint64_t (**)(ULDatabase *))this->var0 + 2))(this);
  if ((_DWORD)result)
  {
    if (onceToken_MicroLocation_Default != -1)
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_82);
    v3 = logObject_MicroLocation_Default;
    if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_2419D9000, v3, OS_LOG_TYPE_DEFAULT, "Sending database valid notification to registered modules", buf, 2u);
    }
    v10 = 0u;
    v11 = 0u;
    v8 = 0u;
    v9 = 0u;
    v4 = this->var18;
    v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v8, v13, 16);
    if (v5)
    {
      v6 = *(_QWORD *)v9;
      do
      {
        for (i = 0; i != v5; ++i)
        {
          if (*(_QWORD *)v9 != v6)
            objc_enumerationMutation(v4);
          (*(void (**)(_QWORD))(*(_QWORD *)(*((_QWORD *)&v8 + 1) + 8 * i) + 16))(*(_QWORD *)(*((_QWORD *)&v8 + 1) + 8 * i));
        }
        v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v8, v13, 16);
      }
      while (v5);
    }

    return objc_msgSend(this->var18, "removeAllObjects", (_QWORD)v8);
  }
  return result;
}

void sub_241B09D1C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t ULDatabase::initWithModelsDirectoryAndStoresDirectory(ULDatabase *this, NSURL *a2, NSURL *a3, uint64_t a4)
{
  NSURL *v7;
  NSURL *v8;
  ULPersistenceManager *v9;
  id var1;
  uint64_t v11;

  v7 = a2;
  v8 = a3;
  v9 = -[ULPersistenceManager initWithModelsDirectory:storesDirectory:useWal:]([ULPersistenceManager alloc], "initWithModelsDirectory:storesDirectory:useWal:", v7, v8, a4);
  var1 = this->var1;
  this->var1 = v9;

  v11 = ULDatabase::connectToStore(this);
  return v11;
}

void sub_241B09DB8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t ULDatabase::destroyStore(ULDatabase *this)
{
  return objc_msgSend(this->var1, "destroyStore");
}

uint64_t ULDatabase::freeDatabaseSpace(ULDatabase *this)
{
  int v2;
  int v3;
  id var9;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  uint64_t v9;
  NSObject *v10;
  _BOOL4 v11;
  uint64_t result;
  uint64_t v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  uint8_t buf[16];

  if ((objc_msgSend(this->var1, "isStoreConnected") & 1) != 0)
  {
    v2 = objc_msgSend(this->var8, "deleteOldestRecordsIfFull");
    v3 = objc_msgSend(this->var11, "deleteOldestRecordsIfFull");
    var9 = this->var9;
    +[ULDefaultsSingleton shared](ULDefaultsSingleton, "shared");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "defaultsDictionary");
    v6 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "ULNumModelsToKeepForNonLSL");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v33 = v2;
    objc_msgSend(v6, "objectForKey:", v7);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    if (v8 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
      v9 = objc_msgSend(v8, "unsignedIntValue");
    else
      v9 = objc_msgSend(&unk_2511EDDC8, "unsignedIntValue");
    v13 = v9;

    +[ULDefaultsSingleton shared](ULDefaultsSingleton, "shared");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v14, "defaultsDictionary");
    v15 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "ULNumLSLModelsToKeep");
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v15, "objectForKey:", v16);
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    if (v17 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
      v18 = objc_msgSend(v17, "unsignedIntValue");
    else
      v18 = objc_msgSend(&unk_2511EDDB0, "unsignedIntValue");
    v19 = v18;

    v20 = objc_msgSend(var9, "deleteUnneededModelsWithNumNonLslsModeltoKeep:numLSLModelsToKeep:", v13, v19);
    v21 = v33 & v3 & v20 & objc_msgSend(this->var9, "deleteOldestRecordsIfFull");
    v22 = objc_msgSend(this->var4, "deleteOldestRecordsIfFull");
    v23 = v22 & objc_msgSend(this->var10, "deleteOldestRecordsIfFull");
    v24 = v21 & v23 & objc_msgSend(this->var5, "deleteOldestRecordsIfFull");
    v25 = objc_msgSend(this->var6, "deleteOldestRecordsIfFull");
    v26 = v25 & objc_msgSend(this->var2, "deleteOldestRecordsIfFull");
    v27 = v26 & objc_msgSend(this->var12, "deleteOldestsServicesPerClientAboveMaxCount");
    v28 = v24 & v27 & objc_msgSend(this->var3, "deleteOldestRecordsIfFull");
    v29 = objc_msgSend(this->var15, "deleteOldestRecordsIfFull");
    v30 = v29 & objc_msgSend(this->var16, "deleteOldestRecordsIfFull");
    v31 = v30 & objc_msgSend(this->var9, "deleteAllModelsOfDeletedServices");
    v32 = v31 & objc_msgSend(this->var5, "deleteAllLabelsOfDeletedServices");
    return v28 & v32 & objc_msgSend(this->var13, "deleteAllCustomLoiOfDeletedServices");
  }
  else
  {
    if (onceToken_MicroLocation_Default != -1)
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_82);
    v10 = logObject_MicroLocation_Default;
    v11 = os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT);
    result = 0;
    if (v11)
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_2419D9000, v10, OS_LOG_TYPE_DEFAULT, "#Warning Attempt to freeDatabaseSpace() without a backing database", buf, 2u);
      return 0;
    }
  }
  return result;
}

void sub_241B0A0B4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

uint64_t ULDatabase::isDatabaseValid(ULDatabase *this)
{
  unsigned int v2;
  uint64_t result;

  v2 = ULDatabase::getMigrationStatus(this, 0) - 3;
  LODWORD(result) = objc_msgSend(this->var1, "isStoreConnected");
  if (v2 < 0xFFFFFFFE)
    return result;
  else
    return 0;
}

uint64_t ULDatabase::getMigrationStatus(ULDatabase *this, int a2)
{
  uint64_t result;
  NSObject *v5;
  void **v6;
  void *__p[2];
  char v8;
  uint8_t buf[4];
  int v10;
  __int16 v11;
  const char *v12;
  __int16 v13;
  void **v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  result = this->var17;
  if ((_DWORD)result == 1 || a2 != 0)
  {
    this->var17 = ULDatabase::checkMigrationStatus(this);
    if (onceToken_MicroLocation_Default != -1)
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_82);
    v5 = (id)logObject_MicroLocation_Default;
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      ULDatabase::migrationStatusAsString(this->var17, __p);
      if (v8 >= 0)
        v6 = __p;
      else
        v6 = (void **)__p[0];
      *(_DWORD *)buf = 68289282;
      v10 = 0;
      v11 = 2082;
      v12 = "";
      v13 = 2082;
      v14 = v6;
      _os_log_impl(&dword_2419D9000, v5, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"migration status\", \"status\":%{public, location:escape_only}s}", buf, 0x1Cu);
      if (v8 < 0)
        operator delete(__p[0]);
    }

    return this->var17;
  }
  return result;
}

void sub_241B0A288(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t ULDatabase::isMainDatabase(ULDatabase *this)
{
  return objc_msgSend(this->var1, "isMainDatabase");
}

id ULDatabase::exportDatabase(ULDatabase *this)
{
  NSObject *v2;
  uint64_t v3;
  void *v4;
  NSObject *v5;
  char v7;
  id v8;
  id v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t i;
  void *v23;
  void *v24;
  int v25;
  void *v26;
  char v27;
  void *v28;
  id v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  char v35;
  NSObject *v36;
  void *v37;
  id v38;
  id v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  void *v44;
  int v45;
  void *v46;
  char v47;
  id v48;
  NSObject *v49;
  NSObject *v50;
  void *v51;
  NSObject *v52;
  NSObject *v53;
  void *v54;
  void *v55;
  void *v56;
  void *v57;
  void *v58;
  void *v59;
  void *v60;
  id obj;
  void *v62;
  void *v63;
  id v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  id v69;
  id v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  id v75;
  uint8_t v76[128];
  uint8_t buf[4];
  id v78;
  __int16 v79;
  id v80;
  _BYTE v81[128];
  uint64_t v82;
  _QWORD v83[4];

  v83[1] = *MEMORY[0x24BDAC8D0];
  if (onceToken_MicroLocation_Default != -1)
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_82);
  v2 = logObject_MicroLocation_Default;
  if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_2419D9000, v2, OS_LOG_TYPE_DEFAULT, "Exporting milo database", buf, 2u);
  }
  if ((objc_msgSend(this->var1, "isStoreConnected") & 1) != 0)
  {
    objc_msgSend(MEMORY[0x24BDD1580], "userLibraryDirectoryPath");
    v59 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD1580], "defaultManager");
    v63 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v59, "stringByAppendingPathComponent:", CFSTR("/Logs/milod/miloexport"));
    v3 = objc_claimAutoreleasedReturnValue();
    v82 = *MEMORY[0x24BDD0CC8];
    v83[0] = &unk_2511EDD68;
    v57 = (void *)v3;
    objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", v83, &v82, 1);
    v62 = (void *)objc_claimAutoreleasedReturnValue();
    if ((objc_msgSend(v63, "fileExistsAtPath:isDirectory:", v3, 0) & 1) != 0)
    {
      v4 = 0;
    }
    else
    {
      v75 = 0;
      v7 = objc_msgSend(v63, "createDirectoryAtPath:withIntermediateDirectories:attributes:error:", v3, 1, v62, &v75);
      v8 = v75;
      v9 = v8;
      if ((v7 & 1) == 0)
      {
        if (onceToken_MicroLocation_Default != -1)
          dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_82);
        v52 = logObject_MicroLocation_Default;
        if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 138412290;
          v78 = v9;
          _os_log_impl(&dword_2419D9000, v52, OS_LOG_TYPE_ERROR, "failed to create directory for export with error: %@", buf, 0xCu);
        }
        v38 = 0;
LABEL_62:

        return v38;
      }
      v4 = v8;
      v3 = (uint64_t)v57;
    }
    v10 = (void *)MEMORY[0x24BDBCF48];
    v11 = (void *)MEMORY[0x24BDD17C8];
    +[ULPersistenceManager defaultLocalStoreFilename](ULPersistenceManager, "defaultLocalStoreFilename");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "stringWithFormat:", CFSTR("%@/%@"), v3, v12);
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "fileURLWithPath:isDirectory:", v13, 0);
    v60 = (void *)objc_claimAutoreleasedReturnValue();

    v14 = (void *)MEMORY[0x24BDBCF48];
    objc_msgSend(v60, "path");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v15, "stringByAppendingString:", CFSTR("-wal"));
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v14, "fileURLWithPath:isDirectory:", v16, 0);
    v56 = (void *)objc_claimAutoreleasedReturnValue();

    v17 = (void *)MEMORY[0x24BDBCF48];
    objc_msgSend(v60, "path");
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v18, "stringByAppendingString:", CFSTR("-shm"));
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v17, "fileURLWithPath:isDirectory:", v19, 0);
    v58 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:", v60, v56, v58, 0);
    v74 = 0u;
    v72 = 0u;
    v73 = 0u;
    v71 = 0u;
    obj = (id)objc_claimAutoreleasedReturnValue();
    v20 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v71, v81, 16);
    if (v20)
    {
      v21 = *(_QWORD *)v72;
      while (2)
      {
        for (i = 0; i != v20; ++i)
        {
          if (*(_QWORD *)v72 != v21)
            objc_enumerationMutation(obj);
          v23 = *(void **)(*((_QWORD *)&v71 + 1) + 8 * i);
          objc_msgSend(v23, "path");
          v24 = (void *)objc_claimAutoreleasedReturnValue();
          v25 = objc_msgSend(v63, "fileExistsAtPath:", v24);

          if (v25)
          {
            objc_msgSend(v23, "path");
            v26 = (void *)objc_claimAutoreleasedReturnValue();
            v70 = v4;
            v27 = objc_msgSend(v63, "removeItemAtPath:error:", v26, &v70);
            v9 = v70;

            if ((v27 & 1) == 0)
            {
              if (onceToken_MicroLocation_Default != -1)
                dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_82);
              v50 = logObject_MicroLocation_Default;
              if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = 138412546;
                v78 = v23;
                v79 = 2112;
                v80 = v9;
                _os_log_impl(&dword_2419D9000, v50, OS_LOG_TYPE_ERROR, "failed to remove existing exported file: %@ with error: %@", buf, 0x16u);
              }
              v38 = 0;
              v51 = obj;
              goto LABEL_61;
            }
            v4 = v9;
          }
        }
        v20 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v71, v81, 16);
        if (v20)
          continue;
        break;
      }
    }

    objc_msgSend(this->var1, "persistenceStore");
    v28 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v28, "storeDescription");
    v54 = (void *)objc_claimAutoreleasedReturnValue();

    v29 = objc_alloc(MEMORY[0x24BDBB738]);
    objc_msgSend(this->var1, "managedObjectModel");
    v30 = (void *)objc_claimAutoreleasedReturnValue();
    v55 = (void *)objc_msgSend(v29, "initWithManagedObjectModel:", v30);

    objc_msgSend(v54, "options");
    v31 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v54, "URL");
    v32 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v54, "options");
    v33 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v54, "type");
    v34 = (void *)objc_claimAutoreleasedReturnValue();
    v69 = v4;
    v35 = objc_msgSend(v55, "replacePersistentStoreAtURL:destinationOptions:withPersistentStoreFromURL:sourceOptions:storeType:error:", v60, v31, v32, v33, v34, &v69);
    v9 = v69;

    if ((v35 & 1) != 0)
    {
      if (onceToken_MicroLocation_Default != -1)
        dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_82);
      v36 = (id)logObject_MicroLocation_Default;
      if (os_log_type_enabled(v36, OS_LOG_TYPE_DEFAULT))
      {
        objc_msgSend(v60, "path");
        v37 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138412290;
        v78 = v37;
        _os_log_impl(&dword_2419D9000, v36, OS_LOG_TYPE_DEFAULT, "Successfully exported milo database to: %@", buf, 0xCu);

      }
      v38 = objc_alloc_init(MEMORY[0x24BDBCEB8]);
      v67 = 0u;
      v68 = 0u;
      v65 = 0u;
      v66 = 0u;
      v39 = obj;
      v40 = objc_msgSend(v39, "countByEnumeratingWithState:objects:count:", &v65, v76, 16);
      if (v40)
      {
        v41 = *(_QWORD *)v66;
        do
        {
          v42 = 0;
          do
          {
            if (*(_QWORD *)v66 != v41)
              objc_enumerationMutation(v39);
            v43 = *(void **)(*((_QWORD *)&v65 + 1) + 8 * v42);
            objc_msgSend(v43, "path");
            v44 = (void *)objc_claimAutoreleasedReturnValue();
            v45 = objc_msgSend(v63, "fileExistsAtPath:", v44);

            if (v45)
            {
              objc_msgSend(v43, "path");
              v46 = (void *)objc_claimAutoreleasedReturnValue();
              v64 = v9;
              v47 = objc_msgSend(v63, "setAttributes:ofItemAtPath:error:", v62, v46, &v64);
              v48 = v64;

              v9 = v48;
              if ((v47 & 1) == 0)
              {
                if (onceToken_MicroLocation_Default != -1)
                  dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_82);
                v49 = logObject_MicroLocation_Default;
                if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)buf = 138412546;
                  v78 = v43;
                  v79 = 2112;
                  v80 = v48;
                  _os_log_impl(&dword_2419D9000, v49, OS_LOG_TYPE_ERROR, "failed to change access attributes for URL: %@ with error: %@", buf, 0x16u);
                }
              }
              objc_msgSend(v38, "addObject:", v43);
            }
            ++v42;
          }
          while (v40 != v42);
          v40 = objc_msgSend(v39, "countByEnumeratingWithState:objects:count:", &v65, v76, 16);
        }
        while (v40);
      }

    }
    else
    {
      if (onceToken_MicroLocation_Default != -1)
        dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_82);
      v53 = logObject_MicroLocation_Default;
      if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138412290;
        v78 = v9;
        _os_log_impl(&dword_2419D9000, v53, OS_LOG_TYPE_ERROR, "failed to export database with error: %@", buf, 0xCu);
      }
      v38 = 0;
    }

    v51 = v54;
LABEL_61:

    goto LABEL_62;
  }
  if (onceToken_MicroLocation_Default != -1)
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_82);
  v5 = logObject_MicroLocation_Default;
  if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_2419D9000, v5, OS_LOG_TYPE_DEFAULT, "#Warning Attempt to exportDatabase() while not connected to database", buf, 2u);
  }
  return 0;
}

void sub_241B0ABBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13, void *a14, void *a15, void *a16, void *a17, void *a18, uint64_t a19, uint64_t a20,void *a21,void *a22,void *a23)
{
  void *v23;
  void *v24;

  _Unwind_Resume(a1);
}

void ULDatabase::migrationStatusAsString(unsigned int a1@<W0>, _QWORD *a2@<X8>)
{
  NSObject *v2;
  uint8_t v3[16];

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  if (a1 >= 5)
  {
    if (onceToken_MicroLocation_Default != -1)
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_82);
    v2 = logObject_MicroLocation_Default;
    if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v3 = 0;
      _os_log_impl(&dword_2419D9000, v2, OS_LOG_TYPE_ERROR, "migrationStatus value not handled in conversion to string", v3, 2u);
    }
  }
  else
  {
    MEMORY[0x2426A02C4](a2, off_2511D95C0[a1]);
  }
}

void sub_241B0AE38(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t ULDatabase::checkMigrationStatus(ULDatabase *this)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  char v6;
  char v7;
  id var14;
  _DWORD *v9;
  _DWORD *v10;
  NSObject *v11;
  uint64_t v12;
  const char *v13;
  NSObject *v14;
  _DWORD *v16;
  unint64_t v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  unsigned int v22;
  unsigned int v23;
  void *__p;
  _DWORD *v25;

  +[ULDefaultsSingleton shared](ULDefaultsSingleton, "shared");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "defaultsDictionary");
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "ULEnableLocationdDataMigration");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "objectForKey:", v4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  if (v5 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
    v6 = objc_msgSend(v5, "BOOLValue");
  else
    v6 = objc_msgSend(MEMORY[0x24BDBD1C8], "BOOLValue");
  v7 = v6;

  if ((v7 & 1) == 0)
  {
    if (onceToken_MicroLocation_Default != -1)
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_82);
    v11 = logObject_MicroLocation_Default;
    v12 = 0;
    if (!os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
      return v12;
    LOWORD(__p) = 0;
    v13 = "Migration from locationd disabled in settings";
LABEL_28:
    _os_log_impl(&dword_2419D9000, v11, OS_LOG_TYPE_DEFAULT, v13, (uint8_t *)&__p, 2u);
    return 0;
  }
  if (objc_msgSend(MEMORY[0x24BE669E0], "isMac")
    && (objc_msgSend(MEMORY[0x24BE669E0], "isMacBook") & 1) == 0)
  {
    if (onceToken_MicroLocation_Default != -1)
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_82);
    v11 = logObject_MicroLocation_Default;
    v12 = 0;
    if (!os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
      return v12;
    LOWORD(__p) = 0;
    v13 = "Migration is disabled on stationary Macs";
    goto LABEL_28;
  }
  if ((objc_msgSend(this->var1, "isStoreConnected") & 1) != 0)
  {
    var14 = this->var14;
    if (var14)
    {
      objc_msgSend(var14, "fetchAllRecordsWithLimit:", 0);
      v9 = __p;
      if (__p == v25)
      {
        v12 = 2;
        v9 = v25;
      }
      else
      {
        v10 = __p;
        while (v10[2] != 2)
        {
          v10 += 4;
          if (v10 == v25)
            goto LABEL_34;
        }
        if (v10 != v25)
        {
          v12 = 4;
          goto LABEL_52;
        }
LABEL_34:
        v16 = __p;
        while (v16[2] != 1)
        {
          v16 += 4;
          if (v16 == v25)
            goto LABEL_40;
        }
        if (v16 != v25)
        {
          v12 = 3;
          goto LABEL_52;
        }
LABEL_40:
        v17 = 0;
        do
        {
          if (v9[2] == 3)
            ++v17;
          v9 += 4;
        }
        while (v9 != v25);
        +[ULDefaultsSingleton shared](ULDefaultsSingleton, "shared");
        v18 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v18, "defaultsDictionary");
        v19 = (void *)objc_claimAutoreleasedReturnValue();

        objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "ULDataMigrationMaxAttempts");
        v20 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v19, "objectForKey:", v20);
        v21 = (void *)objc_claimAutoreleasedReturnValue();
        if (v21 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
          v22 = objc_msgSend(v21, "unsignedIntValue");
        else
          v22 = objc_msgSend(&unk_2511EDD80, "unsignedIntValue");
        v23 = v22;

        if (v17 < v23)
          v12 = 2;
        else
          v12 = 3;
        v9 = __p;
      }
LABEL_52:
      if (v9)
      {
        v25 = v9;
        operator delete(v9);
      }
    }
    else
    {
      return 2;
    }
  }
  else
  {
    if (onceToken_MicroLocation_Default != -1)
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_82);
    v14 = logObject_MicroLocation_Default;
    if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(__p) = 0;
      _os_log_impl(&dword_2419D9000, v14, OS_LOG_TYPE_DEFAULT, "failed to check migration status: local milo database is not connected", (uint8_t *)&__p, 2u);
    }
    return 1;
  }
  return v12;
}

void sub_241B0B1FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  void *v10;
  void *v11;
  void *v12;

  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void ULDatabase::registerDatabaseValidCallback(_QWORD *a1, void *a2)
{
  void *v3;
  void *v4;
  void (**v5)(void);

  v5 = a2;
  if ((*(unsigned int (**)(_QWORD *))(*a1 + 16))(a1))
  {
    v5[2]();
  }
  else
  {
    v3 = (void *)a1[18];
    v4 = (void *)MEMORY[0x2426A0A38](v5);
    objc_msgSend(v3, "addObject:", v4);

  }
}

void sub_241B0B300(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void ___ZL45_CLLogObjectForCategory_MicroLocation_Defaultv_block_invoke_66()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.MicroLocation", "MicroLocation");
  v1 = (void *)logObject_MicroLocation_Default;
  logObject_MicroLocation_Default = (uint64_t)v0;

}

std::string *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>(uint64_t a1, __int128 *a2, __int128 *a3, std::string *this)
{
  std::string *v4;
  __int128 *v6;
  __int128 v7;
  _QWORD v9[3];
  char v10;
  std::string *v11;
  std::string *v12;

  v4 = this;
  v11 = this;
  v12 = this;
  v9[0] = a1;
  v9[1] = &v11;
  v9[2] = &v12;
  v10 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      if (*((char *)v6 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)v6, *((_QWORD *)v6 + 1));
        v4 = v12;
      }
      else
      {
        v7 = *v6;
        v4->__r_.__value_.__r.__words[2] = *((_QWORD *)v6 + 2);
        *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v7;
      }
      v6 = (__int128 *)((char *)v6 + 24);
      v12 = ++v4;
    }
    while (v6 != a3);
  }
  v10 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v9);
  return v4;
}

void sub_241B0B3F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_241B0B44C()
{
  void *v0;

  return 0;
}

void sub_241B0B6A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  id *v15;

  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void CLSqliteStatement::~CLSqliteStatement(CLSqliteDatabase **this)
{
  *this = (CLSqliteDatabase *)&off_2511D9618;
  CLSqliteDatabase::unlock(this[1]);
}

{
  CLSqliteStatement::~CLSqliteStatement(this);
  JUMPOUT(0x2426A04D4);
}

uint64_t CLSqliteStatement::getStatement(CLSqliteStatement *this)
{
  return *((_QWORD *)this + 2);
}

void CLSqliteFinalizingStatement::CLSqliteFinalizingStatement(CLSqliteFinalizingStatement *this, CLSqliteDatabase *a2, sqlite3_stmt *a3)
{
  *(_QWORD *)this = &off_2511D9618;
  *((_QWORD *)this + 1) = a2;
  *((_QWORD *)this + 2) = a3;
  CLSqliteDatabase::lock(a2);
  *(_QWORD *)this = &off_2511D9638;
}

void CLSqliteFinalizingStatement::~CLSqliteFinalizingStatement(CLSqliteFinalizingStatement *this)
{
  int v2;

  *(_QWORD *)this = &off_2511D9638;
  v2 = sqlite3_finalize(*((sqlite3_stmt **)this + 2));
  *((_QWORD *)this + 2) = 0;
  if (v2)
  {
    CLSqliteDatabase::displaySqlResult(*((CLSqliteDatabase **)this + 1), "sqlite3_finalize()", v2, 0);
    CLSqliteDatabase::handleSqlError(*((CLSqliteDatabase **)this + 1), v2);
  }
  CLSqliteStatement::~CLSqliteStatement((CLSqliteDatabase **)this);
}

{
  CLSqliteFinalizingStatement::~CLSqliteFinalizingStatement(this);
  JUMPOUT(0x2426A04D4);
}

void sub_241B0BECC(_Unwind_Exception *a1)
{
  id *v1;
  id *v2;
  id *v3;
  id *v4;
  id *v5;
  uint64_t v6;

  objc_destroyWeak(v3);
  objc_destroyWeak(v5);
  objc_destroyWeak(v4);
  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v6 - 104));
  _Unwind_Resume(a1);
}

std::string *CLMicroLocationAssociatedStateTable::Entry::Entry(std::string *this, __int128 *a2, _OWORD *a3, std::string::size_type *a4, std::string::value_type a5, std::string::size_type *a6, int a7, int a8)
{
  __int128 v15;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v15 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v15;
  }
  *(_OWORD *)&this[1].__r_.__value_.__l.__data_ = *a3;
  this[1].__r_.__value_.__r.__words[2] = *a4;
  this[2].__r_.__value_.__s.__data_[0] = a5;
  this[2].__r_.__value_.__l.__size_ = *a6;
  LODWORD(this[2].__r_.__value_.__r.__words[2]) = a7;
  HIDWORD(this[2].__r_.__value_.__r.__words[2]) = a8;
  return this;
}

uint64_t CLMiLoServiceTable::Entry::Entry(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, __int128 *a5, uint64_t a6, __int128 *a7, double a8)
{
  __int128 v11;
  std::string *v12;
  __int128 v13;

  *(_QWORD *)a1 = a4;
  *(_QWORD *)(a1 + 8) = a2;
  *(_QWORD *)(a1 + 16) = a3;
  *(double *)(a1 + 24) = a8;
  if (*((char *)a5 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 32), *(const std::string::value_type **)a5, *((_QWORD *)a5 + 1));
  }
  else
  {
    v11 = *a5;
    *(_QWORD *)(a1 + 48) = *((_QWORD *)a5 + 2);
    *(_OWORD *)(a1 + 32) = v11;
  }
  *(_QWORD *)(a1 + 56) = a6;
  v12 = (std::string *)(a1 + 64);
  if (*((char *)a7 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v12, *(const std::string::value_type **)a7, *((_QWORD *)a7 + 1));
  }
  else
  {
    v13 = *a7;
    *(_QWORD *)(a1 + 80) = *((_QWORD *)a7 + 2);
    *(_OWORD *)&v12->__r_.__value_.__l.__data_ = v13;
  }
  return a1;
}

void sub_241B0CA0C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 55) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

_QWORD *CLMicroLocationMotionBridge::CLMicroLocationMotionBridge(_QWORD *a1, uint64_t a2, void *a3)
{
  id v5;
  CLMicroLocationMotionBridge *v6;
  float FenceRadius;
  uint64_t v8;
  CLMicroLocationMotionBridge *v9;
  void *v10;
  CLMicroLocationMotionBridge *v11;
  void *v12;
  CLMicroLocationMotionBridge *v13;
  void *v14;
  ULCMPDRFenceProvider *v15;
  double v16;
  void *v17;
  uint64_t v18;
  void *v19;
  _QWORD v21[4];
  CLMicroLocationMotionBridge *v22;
  __CFString *v23;
  _QWORD *v24;
  _QWORD v25[4];
  CLMicroLocationMotionBridge *v26;
  _QWORD *v27;
  _QWORD v28[4];
  CLMicroLocationMotionBridge *v29;
  _QWORD *v30;

  v5 = a3;
  *a1 = &off_2511D96A0;
  a1[1] = a2;
  a1[3] = 0;
  a1[4] = 0;
  a1[2] = 0;
  v6 = (CLMicroLocationMotionBridge *)v5;
  a1[6] = v6;
  FenceRadius = CLMicroLocationMotionBridge::getFenceRadius(v6);
  v8 = MEMORY[0x24BDAC760];
  v28[0] = MEMORY[0x24BDAC760];
  v28[1] = 3221225472;
  v28[2] = ___ZN27CLMicroLocationMotionBridgeC2ERN27CLMicroLocationMotionClient21IMotionClientDelegateEPU28objcproto17OS_dispatch_queue8NSObject_block_invoke;
  v28[3] = &unk_2511D96D8;
  v30 = a1;
  v9 = v6;
  v29 = v9;
  v10 = (void *)MEMORY[0x2426A0A38](v28);
  v25[0] = v8;
  v25[1] = 3221225472;
  v25[2] = ___ZN27CLMicroLocationMotionBridgeC2ERN27CLMicroLocationMotionClient21IMotionClientDelegateEPU28objcproto17OS_dispatch_queue8NSObject_block_invoke_2;
  v25[3] = &unk_2511D9700;
  v27 = a1;
  v11 = v9;
  v26 = v11;
  v12 = (void *)MEMORY[0x2426A0A38](v25);
  v21[0] = v8;
  v21[1] = 3221225472;
  v21[2] = ___ZN27CLMicroLocationMotionBridgeC2ERN27CLMicroLocationMotionClient21IMotionClientDelegateEPU28objcproto17OS_dispatch_queue8NSObject_block_invoke_3;
  v21[3] = &unk_2511D9728;
  v24 = a1;
  v13 = v11;
  v22 = v13;
  v23 = CFSTR("ULMiLoPDRFence");
  v14 = (void *)MEMORY[0x2426A0A38](v21);
  v15 = [ULCMPDRFenceProvider alloc];
  *(float *)&v16 = FenceRadius;
  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithFloat:", v16);
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  v18 = -[ULCMPDRFenceProvider initWithFenceIdentifier:queue:radiusInMeters:callback:statusCallback:errorCallback:](v15, "initWithFenceIdentifier:queue:radiusInMeters:callback:statusCallback:errorCallback:", CFSTR("ULMiLoPDRFence"), v13, v17, v10, v14, v12);
  v19 = (void *)a1[2];
  a1[2] = v18;

  return a1;
}

void sub_241B0CBF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27)
{
  id *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;

  _Unwind_Resume(a1);
}

float CLMicroLocationMotionBridge::getFenceRadius(CLMicroLocationMotionBridge *this)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  float v5;
  float v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  float v11;
  NSObject *v12;
  _DWORD v14[2];
  __int16 v15;
  const char *v16;
  __int16 v17;
  double v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  +[ULDefaultsSingleton shared](ULDefaultsSingleton, "shared");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "defaultsDictionary");
  v2 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "ULPedestrianFenceRadiusInMeters");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "objectForKey:", v3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  if (v4 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
    objc_msgSend(v4, "floatValue");
  else
    objc_msgSend(&unk_2511ECF68, "floatValue");
  v6 = v5;

  if (objc_msgSend(MEMORY[0x24BE669E0], "isIpad"))
  {
    +[ULDefaultsSingleton shared](ULDefaultsSingleton, "shared");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "defaultsDictionary");
    v8 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "ULPedestrianFenceRadiusForIpadInMeters");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "objectForKey:", v9);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    if (v10 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
      objc_msgSend(v10, "floatValue");
    else
      objc_msgSend(&unk_2511ECF68, "floatValue");
    v6 = v11;

  }
  if (onceToken_MicroLocation_Default != -1)
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_244);
  v12 = logObject_MicroLocation_Default;
  if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
  {
    v14[0] = 68289282;
    v14[1] = 0;
    v15 = 2082;
    v16 = "";
    v17 = 2050;
    v18 = v6;
    _os_log_impl(&dword_2419D9000, v12, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#Motion Bridge, getFenceRadius\", \"fence size in m\":\"%{public}.2f\"}", (uint8_t *)v14, 0x1Cu);
  }
  return v6;
}

void sub_241B0CEA8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_241B0CEFC()
{
  JUMPOUT(0x241B0CEF4);
}

void ___ZN27CLMicroLocationMotionBridgeC2ERN27CLMicroLocationMotionClient21IMotionClientDelegateEPU28objcproto17OS_dispatch_queue8NSObject_block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  uint64_t v7;
  double v8;
  double v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int v15[11];
  int v16;
  __int128 v17;
  void *__p[2];
  char v19;
  _QWORD v20[39];

  v20[38] = *MEMORY[0x24BDAC8D0];
  v5 = a2;
  v6 = a3;
  v7 = *(_QWORD *)(a1 + 40);
  dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 32));
  objc_msgSend(v5, "timeIntervalSinceReferenceDate");
  v9 = v8;
  CLMicroLocationMotionBridge::stopAllStatusTimers((id *)v7);
  v10 = *(_QWORD *)(v7 + 8);
  v11 = objc_retainAutorelease(v6);
  std::string::basic_string[abi:ne180100]<0>(__p, (char *)objc_msgSend(v11, "UTF8String"));
  (*(void (**)(uint64_t, void **, double))(*(_QWORD *)v10 + 16))(v10, __p, v9);
  if (v19 < 0)
    operator delete(__p[0]);
  CLMicroLocationProto::MotionEvent::MotionEvent((CLMicroLocationProto::MotionEvent *)v15);
  if (!CLMicroLocationProto::MotionEvent_Status_IsValid((CLMicroLocationProto *)4))
    __assert_rtn("set_status", "microlocation.pb.h", 18149, "::CLMicroLocationProto::MotionEvent_Status_IsValid(value)");
  v16 |= 4u;
  v15[5] = 4;
  v12 = *(_QWORD *)(v7 + 8);
  v14 = 0;
  boost::uuids::detail::random_provider_base::random_provider_base((boost::uuids::detail::random_provider_base *)&v14);
  *(_QWORD *)&v17 = boost::uuids::random_generator_pure::operator()((uint64_t)&v14);
  *((_QWORD *)&v17 + 1) = v13;
  CLMicroLocationProtobufHelper::createLoggedEvent<CLMicroLocationProto::MotionEvent>(&v17, v15, (uint64_t)__p, v9);
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v12 + 32))(v12, __p);
  CLMicroLocationProto::ReceivedEvent::~ReceivedEvent((CLMicroLocationProto::ReceivedEvent *)v20);
  boost::uuids::detail::random_provider_base::destroy((boost::uuids::detail::random_provider_base *)&v14);
  CLMicroLocationProto::MotionEvent::~MotionEvent((CLMicroLocationProto::MotionEvent *)v15);

}

void sub_241B0D098(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, char a10, __int16 a11, char a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  void *v26;
  void *v27;
  uint64_t v28;

  CLMicroLocationProto::ReceivedEvent::~ReceivedEvent((CLMicroLocationProto::ReceivedEvent *)(v28 + 32));
  boost::uuids::detail::random_provider_base::destroy((boost::uuids::detail::random_provider_base *)&a10);
  CLMicroLocationProto::MotionEvent::~MotionEvent((CLMicroLocationProto::MotionEvent *)&a12);

  _Unwind_Resume(a1);
}

uint64_t CLMicroLocationMotionBridge::stopAllStatusTimers(id *this)
{
  NSObject *v2;
  uint8_t v4[16];

  if (onceToken_MicroLocation_Default != -1)
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_244);
  v2 = logObject_MicroLocation_Default;
  if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v4 = 0;
    _os_log_impl(&dword_2419D9000, v2, OS_LOG_TYPE_DEFAULT, "stopAllStatusTimers", v4, 2u);
  }
  objc_msgSend(this[3], "invalidate");
  return objc_msgSend(this[4], "invalidate");
}

void ___ZN27CLMicroLocationMotionBridgeC2ERN27CLMicroLocationMotionClient21IMotionClientDelegateEPU28objcproto17OS_dispatch_queue8NSObject_block_invoke_2(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  double v14;
  double v15;
  double v16;
  uint64_t v17;
  id v18;
  int v19;
  int v20[11];
  int v21;
  __int128 v22;
  void *__p[2];
  char v24;
  _QWORD v25[39];

  v25[38] = *MEMORY[0x24BDAC8D0];
  v7 = a2;
  v8 = a3;
  v9 = a4;
  v10 = *(_QWORD *)(a1 + 40);
  dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 32));
  CLMicroLocationProto::MotionEvent::MotionEvent((CLMicroLocationProto::MotionEvent *)v20);
  if (!CLMicroLocationProto::MotionEvent_Status_IsValid((CLMicroLocationProto *)0xA))
    __assert_rtn("set_status", "microlocation.pb.h", 18149, "::CLMicroLocationProto::MotionEvent_Status_IsValid(value)");
  v21 |= 4u;
  v20[5] = 10;
  v11 = objc_msgSend(v7, "code");
  v21 |= 0x20u;
  v20[9] = v11;
  v12 = *(_QWORD *)(v10 + 8);
  v19 = 0;
  boost::uuids::detail::random_provider_base::random_provider_base((boost::uuids::detail::random_provider_base *)&v19);
  *(_QWORD *)&v22 = boost::uuids::random_generator_pure::operator()((uint64_t)&v19);
  *((_QWORD *)&v22 + 1) = v13;
  v14 = cl::chrono::CFAbsoluteTimeClock::now();
  CLMicroLocationProtobufHelper::createLoggedEvent<CLMicroLocationProto::MotionEvent>(&v22, v20, (uint64_t)__p, v14);
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v12 + 32))(v12, __p);
  CLMicroLocationProto::ReceivedEvent::~ReceivedEvent((CLMicroLocationProto::ReceivedEvent *)v25);
  boost::uuids::detail::random_provider_base::destroy((boost::uuids::detail::random_provider_base *)&v19);
  objc_msgSend(v8, "timeIntervalSinceReferenceDate");
  v16 = v15;
  v17 = *(_QWORD *)(v10 + 8);
  v18 = objc_retainAutorelease(v9);
  std::string::basic_string[abi:ne180100]<0>(__p, (char *)objc_msgSend(v18, "UTF8String"));
  (*(void (**)(uint64_t, void **, double))(*(_QWORD *)v17 + 16))(v17, __p, v16);
  if (v24 < 0)
    operator delete(__p[0]);
  CLMicroLocationProto::MotionEvent::~MotionEvent((CLMicroLocationProto::MotionEvent *)v20);

}

void sub_241B0D368(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, char a10, __int16 a11, char a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  void *v26;
  void *v27;
  void *v28;

  if (a26 < 0)
    operator delete(__p);
  CLMicroLocationProto::MotionEvent::~MotionEvent((CLMicroLocationProto::MotionEvent *)&a12);

  _Unwind_Resume(a1);
}

void ___ZN27CLMicroLocationMotionBridgeC2ERN27CLMicroLocationMotionClient21IMotionClientDelegateEPU28objcproto17OS_dispatch_queue8NSObject_block_invoke_3(uint64_t a1, void *a2)
{
  id v3;
  id *v4;
  void *v5;
  NSObject *v6;
  NSObject *v7;
  NSObject *v8;
  int v9;
  int v10;
  __int16 v11;
  const char *v12;
  __int16 v13;
  id v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v3 = a2;
  v4 = *(id **)(a1 + 48);
  dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 32));
  objc_msgSend(v3, "objectForKey:", *(_QWORD *)(a1 + 40));
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  if (v5)
  {
    if (onceToken_MicroLocation_Default != -1)
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_244);
    v6 = logObject_MicroLocation_Default;
    if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
    {
      v9 = 68289282;
      v10 = 0;
      v11 = 2082;
      v12 = "";
      v13 = 2114;
      v14 = v3;
      _os_log_impl(&dword_2419D9000, v6, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Received status report for active fence\", \"Status report\":%{public, location:escape_only}@}", (uint8_t *)&v9, 0x1Cu);
    }
    CLMicroLocationMotionBridge::stopAllStatusTimersAndStartFenceStatusTimer(v4);
  }
  else
  {
    if (onceToken_MicroLocation_Default != -1)
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_244);
    v7 = logObject_MicroLocation_Default;
    if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_ERROR))
    {
      v9 = 68289282;
      v10 = 0;
      v11 = 2082;
      v12 = "";
      v13 = 2114;
      v14 = v3;
      _os_log_impl(&dword_2419D9000, v7, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"Did not receive status report for active fence\", \"Status report\":%{public, location:escape_only}@}", (uint8_t *)&v9, 0x1Cu);
    }
    if (onceToken_MicroLocation_Default != -1)
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_244);
    v8 = logObject_MicroLocation_Default;
    if (os_signpost_enabled((os_log_t)logObject_MicroLocation_Default))
    {
      v9 = 68289282;
      v10 = 0;
      v11 = 2082;
      v12 = "";
      v13 = 2114;
      v14 = v3;
      _os_signpost_emit_with_name_impl(&dword_2419D9000, v8, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Did not receive status report for active fence", "{\"msg%{public}.0s\":\"Did not receive status report for active fence\", \"Status report\":%{public, location:escape_only}@}", (uint8_t *)&v9, 0x1Cu);
    }
  }

}

void sub_241B0D630(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void CLMicroLocationMotionBridge::stopAllStatusTimersAndStartFenceStatusTimer(id *this)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  double v6;
  double v7;
  NSObject *v8;
  uint64_t v9;
  id v10;
  _QWORD v11[5];
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  double v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  CLMicroLocationMotionBridge::stopAllStatusTimers(this);
  +[ULDefaultsSingleton shared](ULDefaultsSingleton, "shared");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "defaultsDictionary");
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "ULMaxTimeAllowedWithoutFenceStatusReport");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "objectForKey:", v4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  if (v5 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
    objc_msgSend(v5, "doubleValue");
  else
    objc_msgSend(&unk_2511EDE10, "doubleValue");
  v7 = v6;

  if (onceToken_MicroLocation_Default != -1)
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_244);
  v8 = logObject_MicroLocation_Default;
  if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 68289282;
    v13 = 0;
    v14 = 2082;
    v15 = "";
    v16 = 2050;
    v17 = v7;
    _os_log_impl(&dword_2419D9000, v8, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"stopAllStatusTimersAndStartFenceStatusTimer: setting fence status timer to fire in the future\", \"Delay to next fire\":\"%{public}f\"}", buf, 0x1Cu);
  }
  v11[0] = MEMORY[0x24BDAC760];
  v11[1] = 3221225472;
  v11[2] = ___ZN27CLMicroLocationMotionBridge43stopAllStatusTimersAndStartFenceStatusTimerEv_block_invoke;
  v11[3] = &__block_descriptor_40_e5_v8__0l;
  v11[4] = this;
  +[ULTimerFactory timerOnPrimaryQueueWithInterval:repeats:block:](ULTimerFactory, "timerOnPrimaryQueueWithInterval:repeats:block:", 0, v11, v7);
  v9 = objc_claimAutoreleasedReturnValue();
  v10 = this[3];
  this[3] = (id)v9;

}

void sub_241B0D834(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void CLMicroLocationMotionBridge::~CLMicroLocationMotionBridge(id *this)
{
  id v2;
  id v3;

  *this = &off_2511D96A0;
  objc_msgSend(this[3], "invalidate");
  v2 = this[3];
  this[3] = 0;

  objc_msgSend(this[4], "invalidate");
  v3 = this[4];
  this[4] = 0;

}

{
  CLMicroLocationMotionBridge::~CLMicroLocationMotionBridge(this);
  JUMPOUT(0x2426A04D4);
}

void ___ZN27CLMicroLocationMotionBridge43stopAllStatusTimersAndStartFenceStatusTimerEv_block_invoke(uint64_t a1)
{
  CLMicroLocationMotionBridge::handleFenceStatusTimerFire(*(id **)(a1 + 32));
}

void CLMicroLocationMotionBridge::handleFenceStatusTimerFire(id *this)
{
  NSObject *v2;
  uint8_t v3[16];

  if (onceToken_MicroLocation_Default != -1)
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_244);
  v2 = logObject_MicroLocation_Default;
  if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v3 = 0;
    _os_log_impl(&dword_2419D9000, v2, OS_LOG_TYPE_DEFAULT, "handleFenceStatusTimerFire", v3, 2u);
  }
  CLMicroLocationMotionBridge::stopAllStatusTimersAndStartRaceDelayTimer(this);
}

void CLMicroLocationMotionBridge::stopAllStatusTimersAndStartRaceDelayTimer(id *this)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  double v6;
  double v7;
  NSObject *v8;
  uint64_t v9;
  id v10;
  _QWORD v11[5];
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  double v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  CLMicroLocationMotionBridge::stopAllStatusTimers(this);
  +[ULDefaultsSingleton shared](ULDefaultsSingleton, "shared");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "defaultsDictionary");
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "ULMaxDelayAfterFenceStatusReportTimerFires");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "objectForKey:", v4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  if (v5 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
    objc_msgSend(v5, "doubleValue");
  else
    objc_msgSend(&unk_2511EDDE0, "doubleValue");
  v7 = v6;

  if (onceToken_MicroLocation_Default != -1)
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_244);
  v8 = logObject_MicroLocation_Default;
  if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 68289282;
    v13 = 0;
    v14 = 2082;
    v15 = "";
    v16 = 2050;
    v17 = v7;
    _os_log_impl(&dword_2419D9000, v8, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"stopAllStatusTimersAndStartRaceDelayTimer: setting race delay timer to fire in the future\", \"Delay to next fire\":\"%{public}f\"}", buf, 0x1Cu);
  }
  objc_msgSend(this[4], "invalidate");
  v11[0] = MEMORY[0x24BDAC760];
  v11[1] = 3221225472;
  v11[2] = ___ZN27CLMicroLocationMotionBridge41stopAllStatusTimersAndStartRaceDelayTimerEv_block_invoke;
  v11[3] = &__block_descriptor_40_e5_v8__0l;
  v11[4] = this;
  +[ULTimerFactory timerOnPrimaryQueueWithInterval:repeats:block:](ULTimerFactory, "timerOnPrimaryQueueWithInterval:repeats:block:", 0, v11, v7);
  v9 = objc_claimAutoreleasedReturnValue();
  v10 = this[4];
  this[4] = (id)v9;

}

void sub_241B0DBB0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

uint64_t ___ZN27CLMicroLocationMotionBridge41stopAllStatusTimersAndStartRaceDelayTimerEv_block_invoke(uint64_t a1)
{
  return CLMicroLocationMotionBridge::handleRaceDelayTimerFire(*(id **)(a1 + 32));
}

uint64_t CLMicroLocationMotionBridge::handleRaceDelayTimerFire(id *this)
{
  NSObject *v2;
  uint8_t v4[16];

  if (onceToken_MicroLocation_Default != -1)
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_244);
  v2 = logObject_MicroLocation_Default;
  if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v4 = 0;
    _os_log_impl(&dword_2419D9000, v2, OS_LOG_TYPE_DEFAULT, "handleRaceDelayTimerFire", v4, 2u);
  }
  CLMicroLocationMotionBridge::stopAllStatusTimers(this);
  return (*(uint64_t (**)(id))(*(_QWORD *)this[1] + 24))(this[1]);
}

void CLMicroLocationMotionBridge::setMotionFence(CLMicroLocationMotionBridge *this)
{
  uint64_t v2;
  uint64_t v3;
  double v4;
  int v5;
  int v6[11];
  int v7;
  __int128 v8;
  _BYTE v9[32];
  _QWORD v10[39];

  v10[38] = *MEMORY[0x24BDAC8D0];
  CLMicroLocationProto::MotionEvent::MotionEvent((CLMicroLocationProto::MotionEvent *)v6);
  if (!CLMicroLocationProto::MotionEvent_Status_IsValid((CLMicroLocationProto *)8))
    __assert_rtn("set_status", "microlocation.pb.h", 18149, "::CLMicroLocationProto::MotionEvent_Status_IsValid(value)");
  v7 |= 4u;
  v6[5] = 8;
  v2 = *((_QWORD *)this + 1);
  v5 = 0;
  boost::uuids::detail::random_provider_base::random_provider_base((boost::uuids::detail::random_provider_base *)&v5);
  *(_QWORD *)&v8 = boost::uuids::random_generator_pure::operator()((uint64_t)&v5);
  *((_QWORD *)&v8 + 1) = v3;
  v4 = cl::chrono::CFAbsoluteTimeClock::now();
  CLMicroLocationProtobufHelper::createLoggedEvent<CLMicroLocationProto::MotionEvent>(&v8, v6, (uint64_t)v9, v4);
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v2 + 32))(v2, v9);
  CLMicroLocationProto::ReceivedEvent::~ReceivedEvent((CLMicroLocationProto::ReceivedEvent *)v10);
  boost::uuids::detail::random_provider_base::destroy((boost::uuids::detail::random_provider_base *)&v5);
  objc_msgSend(*((id *)this + 2), "setFence");
  CLMicroLocationMotionBridge::stopAllStatusTimersAndStartFenceStatusTimer((id *)this);
  CLMicroLocationProto::MotionEvent::~MotionEvent((CLMicroLocationProto::MotionEvent *)v6);
}

void sub_241B0DDB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, char a10, __int16 a11, char a12)
{
  uint64_t v12;

  CLMicroLocationProto::ReceivedEvent::~ReceivedEvent((CLMicroLocationProto::ReceivedEvent *)(v12 + 32));
  boost::uuids::detail::random_provider_base::destroy((boost::uuids::detail::random_provider_base *)&a10);
  CLMicroLocationProto::MotionEvent::~MotionEvent((CLMicroLocationProto::MotionEvent *)&a12);
  _Unwind_Resume(a1);
}

void CLMicroLocationMotionBridge::clearMotionFence(CLMicroLocationMotionBridge *this)
{
  uint64_t v2;
  uint64_t v3;
  double v4;
  int v5;
  int v6[11];
  int v7;
  __int128 v8;
  _BYTE v9[32];
  _QWORD v10[39];

  v10[38] = *MEMORY[0x24BDAC8D0];
  CLMicroLocationProto::MotionEvent::MotionEvent((CLMicroLocationProto::MotionEvent *)v6);
  if (!CLMicroLocationProto::MotionEvent_Status_IsValid((CLMicroLocationProto *)9))
    __assert_rtn("set_status", "microlocation.pb.h", 18149, "::CLMicroLocationProto::MotionEvent_Status_IsValid(value)");
  v7 |= 4u;
  v6[5] = 9;
  v2 = *((_QWORD *)this + 1);
  v5 = 0;
  boost::uuids::detail::random_provider_base::random_provider_base((boost::uuids::detail::random_provider_base *)&v5);
  *(_QWORD *)&v8 = boost::uuids::random_generator_pure::operator()((uint64_t)&v5);
  *((_QWORD *)&v8 + 1) = v3;
  v4 = cl::chrono::CFAbsoluteTimeClock::now();
  CLMicroLocationProtobufHelper::createLoggedEvent<CLMicroLocationProto::MotionEvent>(&v8, v6, (uint64_t)v9, v4);
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v2 + 32))(v2, v9);
  CLMicroLocationProto::ReceivedEvent::~ReceivedEvent((CLMicroLocationProto::ReceivedEvent *)v10);
  boost::uuids::detail::random_provider_base::destroy((boost::uuids::detail::random_provider_base *)&v5);
  objc_msgSend(*((id *)this + 2), "clearFence");
  CLMicroLocationMotionBridge::stopAllStatusTimers((id *)this);
  CLMicroLocationProto::MotionEvent::~MotionEvent((CLMicroLocationProto::MotionEvent *)v6);
}

void sub_241B0DF08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, char a10, __int16 a11, char a12)
{
  uint64_t v12;

  CLMicroLocationProto::ReceivedEvent::~ReceivedEvent((CLMicroLocationProto::ReceivedEvent *)(v12 + 32));
  boost::uuids::detail::random_provider_base::destroy((boost::uuids::detail::random_provider_base *)&a10);
  CLMicroLocationProto::MotionEvent::~MotionEvent((CLMicroLocationProto::MotionEvent *)&a12);
  _Unwind_Resume(a1);
}

uint64_t CLMicroLocationMotionBridge::startMotionSession(id *this)
{
  NSObject *v2;
  _DWORD v4[2];
  __int16 v5;
  const char *v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  if (onceToken_MicroLocation_Default != -1)
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_244);
  v2 = logObject_MicroLocation_Default;
  if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
  {
    v4[0] = 68289026;
    v4[1] = 0;
    v5 = 2082;
    v6 = "";
    _os_log_impl(&dword_2419D9000, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLMicroLocationMotionBridge::startMotionSession\"}", (uint8_t *)v4, 0x12u);
  }
  return objc_msgSend(this[2], "startSession");
}

uint64_t CLMicroLocationMotionBridge::stopMotionSession(id *this)
{
  NSObject *v2;
  _DWORD v4[2];
  __int16 v5;
  const char *v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  if (onceToken_MicroLocation_Default != -1)
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_244);
  v2 = logObject_MicroLocation_Default;
  if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
  {
    v4[0] = 68289026;
    v4[1] = 0;
    v5 = 2082;
    v6 = "";
    _os_log_impl(&dword_2419D9000, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLMicroLocationMotionBridge::stopMotionSession\"}", (uint8_t *)v4, 0x12u);
  }
  return objc_msgSend(this[2], "endSession");
}

uint64_t CLMicroLocationStopMotionDetectionBridge::CLMicroLocationStopMotionDetectionBridge(uint64_t a1, uint64_t a2, void *a3)
{
  id v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  int v10;
  int v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  NSObject *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  uint64_t v36;
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  uint64_t v41;
  id v42;
  id v43;
  id v44;
  int64x2_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  _QWORD *v50;
  ULCMPDRFenceProvider *v51;
  std::string *p_p;
  void *v53;
  void *v54;
  NSObject *v55;
  NSObject *v56;
  uint64_t v58;
  int64x2_t v59;
  int64x2_t v60;
  id v61;
  uint64_t v62;
  void *v63;
  void *v64;
  int64x2_t v65;
  void *v66;
  uint64_t v67;
  __int128 v68;
  void *v69;
  char v70;
  char v71;
  ULCMPDRFenceProvider *v72;
  std::string __p;
  _QWORD v74[4];
  id v75;
  _QWORD v76[4];
  id v77;
  uint64_t v78;
  _QWORD v79[4];
  id v80;
  uint64_t v81;
  __int128 v82;
  std::string *v83;
  _BYTE buf[24];
  __int16 v85;
  uint64_t v86;
  __int16 v87;
  uint64_t v88;
  id v89;
  id v90;
  uint64_t v91;

  v91 = *MEMORY[0x24BDAC8D0];
  v5 = a3;
  *(_QWORD *)a1 = &off_2511D9758;
  *(_QWORD *)(a1 + 8) = a2;
  *(_BYTE *)(a1 + 16) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  v67 = a1 + 24;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_DWORD *)(a1 + 56) = 1065353216;
  *(_BYTE *)(a1 + 64) = 0;
  *(_BYTE *)(a1 + 128) = 0;
  v61 = v5;
  v62 = a1;
  *(_QWORD *)(a1 + 136) = v61;
  +[ULDefaultsSingleton shared](ULDefaultsSingleton, "shared");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "defaultsDictionary");
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "ULMotionStopDetectionModuleEnable");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "objectForKey:", v8);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  if (v9 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
    v10 = objc_msgSend(v9, "BOOLValue");
  else
    v10 = objc_msgSend(MEMORY[0x24BDBD1C8], "BOOLValue");
  v11 = v10;

  if (v11)
  {
    v58 = a1 + 64;
    +[ULDefaultsSingleton shared](ULDefaultsSingleton, "shared");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v12, "defaultsDictionary");
    v13 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "ULMotionStopDetectionModuleRadiuses");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v13, "objectForKey:", v14);
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    if (v15 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
      ULSettings::convert<NSArray<NSNumber *> * {__strong},std::vector<double>>(v15, (uint64_t)buf);
    else
      ULSettings::convert<std::initializer_list<double>,std::vector<double>>((uint64_t *)&_ZGRN10ULSettings14SettingsTraitsINS_33MotionStopDetectionModuleRadiusesEE12defaultValueE_, 2uLL, (uint64_t)buf);
    v60 = *(int64x2_t *)buf;

    +[ULDefaultsSingleton shared](ULDefaultsSingleton, "shared");
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v17, "defaultsDictionary");
    v18 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "ULMotionStopDetectionModuleOngoingTimerTimeout");
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v18, "objectForKey:", v19);
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    if (v20 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
      objc_msgSend(v20, "doubleValue");
    else
      objc_msgSend(&unk_2511ECF48, "doubleValue");
    v22 = v21;

    +[ULDefaultsSingleton shared](ULDefaultsSingleton, "shared");
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v23, "defaultsDictionary");
    v24 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "ULMotionStopDetectionModuleTimeouts");
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v24, "objectForKey:", v25);
    v26 = (void *)objc_claimAutoreleasedReturnValue();
    if (v26 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
      ULSettings::convert<NSArray<NSNumber *> * {__strong},std::vector<double>>(v26, (uint64_t)buf);
    else
      ULSettings::convert<std::initializer_list<double>,std::vector<double>>((uint64_t *)&_ZGRN10ULSettings14SettingsTraitsINS_33MotionStopDetectionModuleTimeoutsEE12defaultValueE_, 2uLL, (uint64_t)buf);
    v65 = *(int64x2_t *)buf;

    v27 = (void *)v60.i64[0];
    if (objc_msgSend(MEMORY[0x24BE669E0], "isIpad"))
    {
      +[ULDefaultsSingleton shared](ULDefaultsSingleton, "shared");
      v28 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v28, "defaultsDictionary");
      v29 = (void *)objc_claimAutoreleasedReturnValue();

      objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "ULMotionStopDetectionModuleIpadRadii");
      v30 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v29, "objectForKey:", v30);
      v31 = (void *)objc_claimAutoreleasedReturnValue();
      if (v31 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
        ULSettings::convert<NSArray<NSNumber *> * {__strong},std::vector<double>>(v31, (uint64_t)buf);
      else
        ULSettings::convert<std::initializer_list<double>,std::vector<double>>((uint64_t *)&_ZGRN10ULSettings14SettingsTraitsINS_34MotionStopDetectionModuleIpadRadiiEE12defaultValueE_, 2uLL, (uint64_t)buf);
      v60 = *(int64x2_t *)buf;

      if (v27)
        operator delete(v27);
      +[ULDefaultsSingleton shared](ULDefaultsSingleton, "shared");
      v32 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v32, "defaultsDictionary");
      v33 = (void *)objc_claimAutoreleasedReturnValue();

      objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "ULMotionStopDetectionModuleIpadOngoingTimerTimeout");
      v34 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v33, "objectForKey:", v34);
      v35 = (void *)objc_claimAutoreleasedReturnValue();
      if (v35 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
        objc_msgSend(v35, "doubleValue");
      else
        objc_msgSend(&unk_2511ECF58, "doubleValue");
      v22 = v36;

      +[ULDefaultsSingleton shared](ULDefaultsSingleton, "shared");
      v37 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v37, "defaultsDictionary");
      v38 = (void *)objc_claimAutoreleasedReturnValue();

      objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "ULMotionStopDetectionModuleIpadTimeouts");
      v39 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v38, "objectForKey:", v39);
      v40 = (void *)objc_claimAutoreleasedReturnValue();
      if (v40 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
        ULSettings::convert<NSArray<NSNumber *> * {__strong},std::vector<double>>(v40, (uint64_t)buf);
      else
        ULSettings::convert<std::initializer_list<double>,std::vector<double>>((uint64_t *)&_ZGRN10ULSettings14SettingsTraitsINS_37MotionStopDetectionModuleIpadTimeoutsEE12defaultValueE_, 2uLL, (uint64_t)buf);
      v59 = *(int64x2_t *)buf;

      if (v65.i64[0])
        operator delete((void *)v65.i64[0]);
    }
    else
    {
      v59 = v65;
    }
    v41 = MEMORY[0x24BDAC760];
    v79[0] = MEMORY[0x24BDAC760];
    v79[1] = 3221225472;
    v79[2] = ___ZN40CLMicroLocationStopMotionDetectionBridgeC2ERN31CLMicroLocationStopMotionClient19IStopMotionDelegateEPU28objcproto17OS_dispatch_queue8NSObject_block_invoke;
    v79[3] = &unk_2511D96D8;
    v81 = v62;
    v42 = v61;
    v80 = v42;
    v63 = (void *)MEMORY[0x2426A0A38](v79);
    v76[0] = v41;
    v76[1] = 3221225472;
    v76[2] = ___ZN40CLMicroLocationStopMotionDetectionBridgeC2ERN31CLMicroLocationStopMotionClient19IStopMotionDelegateEPU28objcproto17OS_dispatch_queue8NSObject_block_invoke_2;
    v76[3] = &unk_2511D9700;
    v78 = v62;
    v43 = v42;
    v77 = v43;
    v64 = (void *)MEMORY[0x2426A0A38](v76);
    v74[0] = v41;
    v74[1] = 3221225472;
    v74[2] = ___ZN40CLMicroLocationStopMotionDetectionBridgeC2ERN31CLMicroLocationStopMotionClient19IStopMotionDelegateEPU28objcproto17OS_dispatch_queue8NSObject_block_invoke_3;
    v74[3] = &unk_2511D9790;
    v44 = v43;
    v75 = v44;
    v66 = (void *)MEMORY[0x2426A0A38](v74);
    v45 = vshrq_n_s64(vsubq_s64(vzip2q_s64(v60, v59), vzip1q_s64(v60, v59)), 3uLL);
    v46 = v45.i64[1];
    v47 = v45.i64[0];
    if (v45.i64[0] == v45.i64[1])
    {
      if ((vmovn_s64(vceqq_s64(vdupq_laneq_s64(v60, 1), v60)).u8[0] & 1) == 0)
      {
        if (v45.i64[0] <= 1uLL)
          v48 = 1;
        else
          v48 = v45.i64[0];
        v49 = (_QWORD *)v59.i64[0];
        v50 = (_QWORD *)v60.i64[0];
        do
        {
          *(_QWORD *)buf = *v50;
          *(_QWORD *)&buf[8] = *v49;
          buf[16] = 0;
          BYTE4(v88) = 0;
          CLMicroLocationStopMotionDetectionBridge::Config::toStr((CLMicroLocationStopMotionDetectionBridge::Config *)buf, &__p);
          v51 = [ULCMPDRFenceProvider alloc];
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            p_p = &__p;
          else
            p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
          objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", p_p);
          v53 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(MEMORY[0x24BDD16E0], "numberWithDouble:", *(double *)buf);
          v54 = (void *)objc_claimAutoreleasedReturnValue();
          v72 = -[ULCMPDRFenceProvider initWithFenceIdentifier:queue:radiusInMeters:callback:statusCallback:errorCallback:](v51, "initWithFenceIdentifier:queue:radiusInMeters:callback:statusCallback:errorCallback:", v53, v44, v54, v63, v66, v64);

          *(_QWORD *)&v82 = buf;
          *((_QWORD *)&v82 + 1) = &v72;
          v83 = &__p;
          std::__hash_table<std::__hash_value_type<std::string,CLMicroLocationStopMotionDetectionBridge::Element>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,CLMicroLocationStopMotionDetectionBridge::Element>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,CLMicroLocationStopMotionDetectionBridge::Element>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,CLMicroLocationStopMotionDetectionBridge::Element>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<CLMicroLocationStopMotionDetectionBridge::Config &,ULCMPDRFenceProvider * {__strong}&>>(v67, (unsigned __int8 *)&__p, (uint64_t)&std::piecewise_construct, (__int128 **)&v83, &v82);

          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          if (BYTE4(v88) && SBYTE3(v88) < 0)
            operator delete(*(void **)&buf[16]);
          ++v50;
          ++v49;
          --v48;
        }
        while (v48);
      }
      *(_QWORD *)&v68 = nan("");
      *((_QWORD *)&v68 + 1) = v22;
      std::string::basic_string[abi:ne180100]<0>(&v69, "ongoingTimer");
      v71 = 1;
      CLMicroLocationStopMotionDetectionBridge::Element::Element((uint64_t)buf, &v68, 0);
      std::optional<CLMicroLocationStopMotionDetectionBridge::Element>::operator=[abi:ne180100]<CLMicroLocationStopMotionDetectionBridge::Element,void>(v58, (uint64_t)buf);

      if (BYTE4(v88) && SBYTE3(v88) < 0)
        operator delete(*(void **)&buf[16]);
      if (v71 && v70 < 0)
        operator delete(v69);
    }
    else
    {
      if (onceToken_MicroLocation_Default != -1)
        dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_244);
      v55 = logObject_MicroLocation_Default;
      if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_ERROR))
      {
        *(_QWORD *)buf = 68289794;
        *(_WORD *)&buf[8] = 2082;
        *(_QWORD *)&buf[10] = "";
        *(_WORD *)&buf[18] = 1026;
        *(_DWORD *)&buf[20] = 1;
        v85 = 2050;
        v86 = v47;
        v87 = 2050;
        v88 = v46;
        _os_log_impl(&dword_2419D9000, v55, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"CLMicroLocationStopMotionDetectionBridge CTOR, wrong configuration, object did not initialize\", \"Stop detection enabled\":%{public}hhd, \"Num Radiuses\":%{public}lu, \"Num Timeouts\":%{public}lu}", buf, 0x2Cu);
      }
      if (onceToken_MicroLocation_Default != -1)
        dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_244);
      v56 = logObject_MicroLocation_Default;
      if (os_signpost_enabled((os_log_t)logObject_MicroLocation_Default))
      {
        *(_QWORD *)buf = 68289794;
        *(_WORD *)&buf[8] = 2082;
        *(_QWORD *)&buf[10] = "";
        *(_WORD *)&buf[18] = 1026;
        *(_DWORD *)&buf[20] = 1;
        v85 = 2050;
        v86 = v47;
        v87 = 2050;
        v88 = v46;
        _os_signpost_emit_with_name_impl(&dword_2419D9000, v56, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "CLMicroLocationStopMotionDetectionBridge CTOR, wrong configuration, object did not initialize", "{\"msg%{public}.0s\":\"CLMicroLocationStopMotionDetectionBridge CTOR, wrong configuration, object did not initialize\", \"Stop detection enabled\":%{public}hhd, \"Num Radiuses\":%{public}lu, \"Num Timeouts\":%{public}lu}", buf, 0x2Cu);
      }
    }

    if (v59.i64[0])
      operator delete((void *)v59.i64[0]);
    if (v60.i64[0])
      operator delete((void *)v60.i64[0]);
  }
  else
  {
    if (onceToken_MicroLocation_Default != -1)
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_244);
    v16 = logObject_MicroLocation_Default;
    if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
    {
      *(_QWORD *)buf = 68289282;
      *(_WORD *)&buf[8] = 2082;
      *(_QWORD *)&buf[10] = "";
      *(_WORD *)&buf[18] = 1026;
      *(_DWORD *)&buf[20] = 0;
      _os_log_impl(&dword_2419D9000, v16, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLMicroLocationStopMotionDetectionBridge CTOR, setting is off so object did not initialize\", \"Stop detection enabled\":%{public}hhd}", buf, 0x18u);
    }
  }

  return v62;
}

void sub_241B0EB80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, _Unwind_Exception *exception_object, uint64_t a10, __int128 a11, __int128 a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, __int128 a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48)
{
  void *v48;
  void *v49;
  void *v50;
  void *v51;

  if ((_QWORD)a17)
    operator delete((void *)a17);
  if (v51)
    operator delete(v51);

  std::__optional_destruct_base<CLMicroLocationStopMotionDetectionBridge::Element,false>::~__optional_destruct_base[abi:ne180100](a10);
  std::__hash_table<std::__hash_value_type<std::string,CLMicroLocationStopMotionDetectionBridge::Element>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,CLMicroLocationStopMotionDetectionBridge::Element>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,CLMicroLocationStopMotionDetectionBridge::Element>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,CLMicroLocationStopMotionDetectionBridge::Element>>>::~__hash_table(a19);

  _Unwind_Resume(a1);
}

void sub_241B0EDB4(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  uint64_t v35;

  if (a35 < 0)
    operator delete(__p);
  if (*(_BYTE *)(v35 - 152))
  {
    if (*(char *)(v35 - 153) < 0)
      JUMPOUT(0x241B0EE0CLL);
  }
  JUMPOUT(0x241B0EE10);
}

void ___ZN40CLMicroLocationStopMotionDetectionBridgeC2ERN31CLMicroLocationStopMotionClient19IStopMotionDelegateEPU28objcproto17OS_dispatch_queue8NSObject_block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  uint64_t v7;
  double v8;
  double v9;
  id v10;
  std::string __p;

  v5 = a2;
  v6 = a3;
  v7 = *(_QWORD *)(a1 + 40);
  dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 32));
  objc_msgSend(v5, "timeIntervalSinceReferenceDate");
  v9 = v8;
  v10 = objc_retainAutorelease(v6);
  std::string::basic_string[abi:ne180100]<0>(&__p, (char *)objc_msgSend(v10, "UTF8String"));
  CLMicroLocationStopMotionDetectionBridge::onMotionMeasurements(v7, &__p, v9);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);

}

void sub_241B0EEF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  void *v16;

  if (a15 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void CLMicroLocationStopMotionDetectionBridge::onMotionMeasurements(uint64_t a1, std::string *a2, double a3)
{
  NSObject *v6;
  std::string *v7;
  unsigned __int8 *v8;
  unsigned __int8 *v9;
  NSObject *v10;
  std::string *v11;
  NSObject *v12;
  std::string *v13;
  double v14;
  uint64_t v15;
  void *v16;
  std::string *v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  int v21[6];
  std::string *v22;
  int v23;
  _QWORD v24[5];
  std::string __p;
  __int128 v26;
  _BYTE buf[28];
  _QWORD v28[40];

  v28[39] = *MEMORY[0x24BDAC8D0];
  if (onceToken_MicroLocation_Default != -1)
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_244);
  v6 = logObject_MicroLocation_Default;
  if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
  {
    if ((a2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v7 = a2;
    else
      v7 = (std::string *)a2->__r_.__value_.__r.__words[0];
    *(_DWORD *)buf = 68289282;
    *(_DWORD *)&buf[4] = 0;
    *(_WORD *)&buf[8] = 2082;
    *(_QWORD *)&buf[10] = "";
    *(_WORD *)&buf[18] = 2082;
    *(_QWORD *)&buf[20] = v7;
    _os_log_impl(&dword_2419D9000, v6, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"StopMotionDetectionBridge::onMotionMeasurements\", \"fenceId\":%{public, location:escape_only}s}", buf, 0x1Cu);
  }
  v8 = std::__hash_table<std::__hash_value_type<std::string,CLMicroLocationStopMotionDetectionBridge::Element>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,CLMicroLocationStopMotionDetectionBridge::Element>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,CLMicroLocationStopMotionDetectionBridge::Element>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,CLMicroLocationStopMotionDetectionBridge::Element>>>::find<std::string>((_QWORD *)(a1 + 24), (unsigned __int8 *)a2);
  v9 = v8;
  if (v8)
  {
    objc_msgSend(*((id *)v8 + 11), "setFence");
    objc_msgSend(*((id *)v9 + 12), "invalidate");
    if (SHIBYTE(a2->__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)buf, a2->__r_.__value_.__l.__data_, a2->__r_.__value_.__l.__size_);
    }
    else
    {
      *(_OWORD *)buf = *(_OWORD *)&a2->__r_.__value_.__l.__data_;
      *(_QWORD *)&buf[16] = *((_QWORD *)&a2->__r_.__value_.__l + 2);
    }
    v14 = *((double *)v9 + 6);
    v24[0] = MEMORY[0x24BDAC760];
    v24[1] = 3321888768;
    v24[2] = ___ZN40CLMicroLocationStopMotionDetectionBridge20onMotionMeasurementsENSt3__16chrono10time_pointIN2cl6chrono19CFAbsoluteTimeClockENS1_8durationIeNS0_5ratioILl1ELl1EEEEEEERKNS0_12basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE_block_invoke;
    v24[3] = &__block_descriptor_64_ea8_40c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE_e5_v8__0l;
    v24[4] = a1;
    if ((buf[23] & 0x80000000) != 0)
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)buf, *(std::string::size_type *)&buf[8]);
    else
      __p = *(std::string *)buf;
    +[ULTimerFactory timerOnPrimaryQueueWithInterval:repeats:block:](ULTimerFactory, "timerOnPrimaryQueueWithInterval:repeats:block:", 0, v24, v14);
    v15 = objc_claimAutoreleasedReturnValue();
    v16 = (void *)*((_QWORD *)v9 + 12);
    *((_QWORD *)v9 + 12) = v15;

    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if ((buf[23] & 0x80000000) != 0)
      operator delete(*(void **)buf);
  }
  else
  {
    if (onceToken_MicroLocation_Default != -1)
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_244);
    v10 = logObject_MicroLocation_Default;
    if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_ERROR))
    {
      if ((a2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v11 = a2;
      else
        v11 = (std::string *)a2->__r_.__value_.__r.__words[0];
      *(_DWORD *)buf = 68289282;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)&buf[8] = 2082;
      *(_QWORD *)&buf[10] = "";
      *(_WORD *)&buf[18] = 2082;
      *(_QWORD *)&buf[20] = v11;
      _os_log_impl(&dword_2419D9000, v10, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"onMotionMeasurements, couldn't find StopMotionDetection element\", \"fenceIdStr\":%{public, location:escape_only}s}", buf, 0x1Cu);
    }
    if (onceToken_MicroLocation_Default != -1)
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_244);
    v12 = logObject_MicroLocation_Default;
    if (os_signpost_enabled((os_log_t)logObject_MicroLocation_Default))
    {
      if ((a2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v13 = a2;
      else
        v13 = (std::string *)a2->__r_.__value_.__r.__words[0];
      *(_DWORD *)buf = 68289282;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)&buf[8] = 2082;
      *(_QWORD *)&buf[10] = "";
      *(_WORD *)&buf[18] = 2082;
      *(_QWORD *)&buf[20] = v13;
      _os_signpost_emit_with_name_impl(&dword_2419D9000, v12, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "onMotionMeasurements, couldn't find StopMotionDetection element", "{\"msg%{public}.0s\":\"onMotionMeasurements, couldn't find StopMotionDetection element\", \"fenceIdStr\":%{public, location:escape_only}s}", buf, 0x1Cu);
    }
  }
  CLMicroLocationProto::MotionEvent::MotionEvent((CLMicroLocationProto::MotionEvent *)v21);
  if (!CLMicroLocationProto::MotionEvent_Status_IsValid((CLMicroLocationProto *)5))
    __assert_rtn("set_status", "microlocation.pb.h", 18149, "::CLMicroLocationProto::MotionEvent_Status_IsValid(value)");
  v21[5] = 5;
  v23 |= 0xCu;
  v17 = v22;
  if (v22 == (std::string *)MEMORY[0x24BEDD958])
  {
    v17 = (std::string *)operator new();
    v17->__r_.__value_.__r.__words[0] = 0;
    v17->__r_.__value_.__l.__size_ = 0;
    v17->__r_.__value_.__r.__words[2] = 0;
    v22 = v17;
  }
  std::string::operator=(v17, a2);
  v18 = *(_QWORD *)(a1 + 8);
  v20 = 0;
  boost::uuids::detail::random_provider_base::random_provider_base((boost::uuids::detail::random_provider_base *)&v20);
  *(_QWORD *)&v26 = boost::uuids::random_generator_pure::operator()((uint64_t)&v20);
  *((_QWORD *)&v26 + 1) = v19;
  CLMicroLocationProtobufHelper::createLoggedEvent<CLMicroLocationProto::MotionEvent>(&v26, v21, (uint64_t)buf, a3);
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v18 + 32))(v18, buf);
  CLMicroLocationProto::ReceivedEvent::~ReceivedEvent((CLMicroLocationProto::ReceivedEvent *)v28);
  boost::uuids::detail::random_provider_base::destroy((boost::uuids::detail::random_provider_base *)&v20);
  CLMicroLocationProto::MotionEvent::~MotionEvent((CLMicroLocationProto::MotionEvent *)v21);
}

void sub_241B0F364(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, char a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,int a35,__int16 a36,char a37,char a38)
{
  void **v38;

  if (a38 < 0)
    operator delete(*v38);
  _Unwind_Resume(exception_object);
}

void ___ZN40CLMicroLocationStopMotionDetectionBridgeC2ERN31CLMicroLocationStopMotionClient19IStopMotionDelegateEPU28objcproto17OS_dispatch_queue8NSObject_block_invoke_2(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  double v14;
  double v15;
  double v16;
  id v17;
  int v18;
  int v19[11];
  int v20;
  __int128 v21;
  std::string __p;
  _QWORD v23[39];

  v23[38] = *MEMORY[0x24BDAC8D0];
  v7 = a2;
  v8 = a3;
  v9 = a4;
  v10 = *(_QWORD *)(a1 + 40);
  dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 32));
  CLMicroLocationProto::MotionEvent::MotionEvent((CLMicroLocationProto::MotionEvent *)v19);
  if (!CLMicroLocationProto::MotionEvent_Status_IsValid((CLMicroLocationProto *)0xA))
    __assert_rtn("set_status", "microlocation.pb.h", 18149, "::CLMicroLocationProto::MotionEvent_Status_IsValid(value)");
  v20 |= 4u;
  v19[5] = 10;
  v11 = objc_msgSend(v7, "code");
  v20 |= 0x20u;
  v19[9] = v11;
  v12 = *(_QWORD *)(v10 + 8);
  v18 = 0;
  boost::uuids::detail::random_provider_base::random_provider_base((boost::uuids::detail::random_provider_base *)&v18);
  *(_QWORD *)&v21 = boost::uuids::random_generator_pure::operator()((uint64_t)&v18);
  *((_QWORD *)&v21 + 1) = v13;
  v14 = cl::chrono::CFAbsoluteTimeClock::now();
  CLMicroLocationProtobufHelper::createLoggedEvent<CLMicroLocationProto::MotionEvent>(&v21, v19, (uint64_t)&__p, v14);
  (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v12 + 32))(v12, &__p);
  CLMicroLocationProto::ReceivedEvent::~ReceivedEvent((CLMicroLocationProto::ReceivedEvent *)v23);
  boost::uuids::detail::random_provider_base::destroy((boost::uuids::detail::random_provider_base *)&v18);
  objc_msgSend(v8, "timeIntervalSinceReferenceDate");
  v16 = v15;
  v17 = objc_retainAutorelease(v9);
  std::string::basic_string[abi:ne180100]<0>(&__p, (char *)objc_msgSend(v17, "UTF8String"));
  CLMicroLocationStopMotionDetectionBridge::onMotionMeasurements(v10, &__p, v16);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  CLMicroLocationProto::MotionEvent::~MotionEvent((CLMicroLocationProto::MotionEvent *)v19);

}

void sub_241B0F584(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, char a10, __int16 a11, char a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  void *v26;
  void *v27;
  void *v28;

  if (a26 < 0)
    operator delete(__p);
  CLMicroLocationProto::MotionEvent::~MotionEvent((CLMicroLocationProto::MotionEvent *)&a12);

  _Unwind_Resume(a1);
}

void ___ZN40CLMicroLocationStopMotionDetectionBridgeC2ERN31CLMicroLocationStopMotionClient19IStopMotionDelegateEPU28objcproto17OS_dispatch_queue8NSObject_block_invoke_3(uint64_t a1)
{
  dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 32));
}

void CLMicroLocationStopMotionDetectionBridge::Config::toStr(CLMicroLocationStopMotionDetectionBridge::Config *this@<X0>, std::string *a2@<X8>)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD v6[2];
  _QWORD v7[11];
  char v8;
  uint64_t v9;

  if (*((_BYTE *)this + 40))
  {
    if (*((char *)this + 39) < 0)
    {
      std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 2), *((_QWORD *)this + 3));
    }
    else
    {
      *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *((_OWORD *)this + 1);
      a2->__r_.__value_.__r.__words[2] = *((_QWORD *)this + 4);
    }
  }
  else
  {
    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v6);
    v2 = v7[0];
    *(_DWORD *)((char *)&v7[1] + *(_QWORD *)(v7[0] - 24)) = *(_DWORD *)((_BYTE *)&v7[1] + *(_QWORD *)(v7[0] - 24)) & 0xFFFFFEFB | 4;
    *(_QWORD *)((char *)&v7[2] + *(_QWORD *)(v2 - 24)) = 2;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"MiLoStopMotionDetectionFence:radius:", 36);
    v3 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"m:timeout:", 10);
    v4 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"sec", 3);
    std::stringbuf::str();
    v6[0] = *MEMORY[0x24BEDB7F0];
    v5 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
    *(_QWORD *)((char *)v6 + *(_QWORD *)(v6[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
    v7[0] = v5;
    v7[1] = MEMORY[0x24BEDB848] + 16;
    if (v8 < 0)
      operator delete((void *)v7[9]);
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x2426A0444](&v9);
  }
}

void sub_241B0F764(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::optional<CLMicroLocationStopMotionDetectionBridge::Element>::operator=[abi:ne180100]<CLMicroLocationStopMotionDetectionBridge::Element,void>(uint64_t a1, uint64_t a2)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  void *v9;
  __int128 v10;
  __int128 v11;

  v4 = *(unsigned __int8 *)(a1 + 64);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  v5 = a1 + 16;
  if (v4)
  {
    std::__optional_storage_base<std::string,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::string,false>>(v5, (__n128 *)(a2 + 16));
    v6 = *(_QWORD *)(a2 + 48);
    *(_QWORD *)(a2 + 48) = 0;
    v7 = *(void **)(a1 + 48);
    *(_QWORD *)(a1 + 48) = v6;

    v8 = *(_QWORD *)(a2 + 56);
    *(_QWORD *)(a2 + 56) = 0;
    v9 = *(void **)(a1 + 56);
    *(_QWORD *)(a1 + 56) = v8;

  }
  else
  {
    *(_BYTE *)(a1 + 16) = 0;
    *(_BYTE *)(a1 + 40) = 0;
    if (*(_BYTE *)(a2 + 40))
    {
      v10 = *(_OWORD *)(a2 + 16);
      *(_QWORD *)(v5 + 16) = *(_QWORD *)(a2 + 32);
      *(_OWORD *)v5 = v10;
      *(_QWORD *)(a2 + 24) = 0;
      *(_QWORD *)(a2 + 32) = 0;
      *(_QWORD *)(a2 + 16) = 0;
      *(_BYTE *)(a1 + 40) = 1;
    }
    v11 = *(_OWORD *)(a2 + 48);
    *(_QWORD *)(a2 + 48) = 0;
    *(_QWORD *)(a2 + 56) = 0;
    *(_OWORD *)(a1 + 48) = v11;
    *(_BYTE *)(a1 + 64) = 1;
  }
  return a1;
}

void CLMicroLocationStopMotionDetectionBridge::Element::~Element(id *this)
{

  if (*((_BYTE *)this + 40))
  {
    if (*((char *)this + 39) < 0)
      operator delete(this[2]);
  }
}

void CLMicroLocationStopMotionDetectionBridge::~CLMicroLocationStopMotionDetectionBridge(CLMicroLocationStopMotionDetectionBridge *this)
{
  uint64_t **i;
  uint64_t *v3;
  uint64_t *v4;
  void *v5;

  *(_QWORD *)this = &off_2511D9758;
  for (i = (uint64_t **)*((_QWORD *)this + 5); i; i = (uint64_t **)*i)
  {
    v3 = i[11];
    i[11] = 0;

    objc_msgSend(i[12], "invalidate");
    v4 = i[12];
    i[12] = 0;

  }
  if (*((_BYTE *)this + 128))
  {
    objc_msgSend(*((id *)this + 15), "invalidate");
    v5 = (void *)*((_QWORD *)this + 15);
    *((_QWORD *)this + 15) = 0;

  }
  std::__optional_destruct_base<CLMicroLocationStopMotionDetectionBridge::Element,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)this + 64);
  std::__hash_table<std::__hash_value_type<std::string,CLMicroLocationStopMotionDetectionBridge::Element>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,CLMicroLocationStopMotionDetectionBridge::Element>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,CLMicroLocationStopMotionDetectionBridge::Element>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,CLMicroLocationStopMotionDetectionBridge::Element>>>::~__hash_table((uint64_t)this + 24);
}

{
  CLMicroLocationStopMotionDetectionBridge::~CLMicroLocationStopMotionDetectionBridge(this);
  JUMPOUT(0x2426A04D4);
}

uint64_t CLMicroLocationStopMotionDetectionBridge::setToIdle(uint64_t this, __n128 a2)
{
  uint64_t v2;
  uint64_t *v3;
  NSObject *v4;
  std::string *v5;
  NSObject *v6;
  std::string *p_p;
  __n128 v8;
  std::string __p;
  uint8_t buf[4];
  int v11;
  __int16 v12;
  const char *v13;
  __int16 v14;
  std::string *v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(this + 16))
  {
    v2 = this;
    v3 = *(uint64_t **)(this + 40);
    if (v3)
    {
      a2.n128_u64[0] = 68289282;
      v8 = a2;
      do
      {
        if (onceToken_MicroLocation_Default != -1)
          dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_244);
        v4 = logObject_MicroLocation_Default;
        if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
        {
          v5 = (std::string *)(v3 + 2);
          if (*((char *)v3 + 39) < 0)
            v5 = (std::string *)v5->__r_.__value_.__r.__words[0];
          *(_DWORD *)buf = v8.n128_u32[0];
          v11 = 0;
          v12 = 2082;
          v13 = "";
          v14 = 2082;
          v15 = v5;
          _os_log_impl(&dword_2419D9000, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"setting stopDetection element to Idle (clear fence and timer)\", \"Element ID\":%{public, location:escape_only}s}", buf, 0x1Cu);
        }
        objc_msgSend((id)v3[11], "clearFence", *(_OWORD *)&v8);
        this = objc_msgSend((id)v3[12], "invalidate");
        v3 = (uint64_t *)*v3;
      }
      while (v3);
    }
    if (*(_BYTE *)(v2 + 128))
    {
      if (onceToken_MicroLocation_Default != -1)
        dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_244);
      v6 = (id)logObject_MicroLocation_Default;
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
      {
        CLMicroLocationStopMotionDetectionBridge::Config::toStr((CLMicroLocationStopMotionDetectionBridge::Config *)(v2 + 64), &__p);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          p_p = &__p;
        else
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        *(_DWORD *)buf = 68289282;
        v11 = 0;
        v12 = 2082;
        v13 = "";
        v14 = 2082;
        v15 = p_p;
        _os_log_impl(&dword_2419D9000, v6, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"setting stopDetection ongoing timer to Idle (clear fence)\", \"Element ID\":%{public, location:escape_only}s}", buf, 0x1Cu);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
      }

      this = objc_msgSend(*(id *)(v2 + 120), "invalidate");
    }
    *(_BYTE *)(v2 + 16) = 0;
  }
  return this;
}

void sub_241B0FB70(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void CLMicroLocationStopMotionDetectionBridge::startStopDetection(CLMicroLocationStopMotionDetectionBridge *this, __n128 a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t *v5;
  NSObject *v6;
  uint64_t *v7;
  double v8;
  uint64_t v9;
  void *v10;
  __n128 v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t);
  void *v15;
  CLMicroLocationStopMotionDetectionBridge *v16;
  std::string __p;
  _BYTE buf[28];
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  *((_BYTE *)this + 16) = 1;
  v3 = (uint64_t *)*((_QWORD *)this + 5);
  if (v3)
  {
    a2.n128_u64[0] = 68289282;
    v11 = a2;
    v4 = MEMORY[0x24BDAC760];
    do
    {
      if (onceToken_MicroLocation_Default != -1)
        dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_244);
      v5 = v3 + 2;
      v6 = logObject_MicroLocation_Default;
      if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
      {
        v7 = v3 + 2;
        if (*((char *)v3 + 39) < 0)
          v7 = (uint64_t *)*v5;
        *(_DWORD *)buf = v11.n128_u32[0];
        *(_DWORD *)&buf[4] = 0;
        *(_WORD *)&buf[8] = 2082;
        *(_QWORD *)&buf[10] = "";
        *(_WORD *)&buf[18] = 2082;
        *(_QWORD *)&buf[20] = v7;
        _os_log_impl(&dword_2419D9000, v6, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"starting stopDetection in element (set fence and timer)\", \"Element ID\":%{public, location:escape_only}s}", buf, 0x1Cu);
      }
      if (*((char *)v3 + 39) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)buf, (const std::string::value_type *)v3[2], v3[3]);
      }
      else
      {
        *(_OWORD *)buf = *(_OWORD *)v5;
        *(_QWORD *)&buf[16] = v3[4];
      }
      objc_msgSend((id)v3[11], "setFence", *(_OWORD *)&v11, v12, v13, v14, v15, v16);
      objc_msgSend((id)v3[12], "invalidate");
      v8 = *((double *)v3 + 6);
      v12 = v4;
      v13 = 3321888768;
      v14 = ___ZN40CLMicroLocationStopMotionDetectionBridge18startStopDetectionEv_block_invoke;
      v15 = &__block_descriptor_64_ea8_40c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE_e5_v8__0l;
      v16 = this;
      if ((buf[23] & 0x80000000) != 0)
        std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)buf, *(std::string::size_type *)&buf[8]);
      else
        __p = *(std::string *)buf;
      +[ULTimerFactory timerOnPrimaryQueueWithInterval:repeats:block:](ULTimerFactory, "timerOnPrimaryQueueWithInterval:repeats:block:", 0, &v12, v8);
      v9 = objc_claimAutoreleasedReturnValue();
      v10 = (void *)v3[12];
      v3[12] = v9;

      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if ((buf[23] & 0x80000000) != 0)
        operator delete(*(void **)buf);
      v3 = (uint64_t *)*v3;
    }
    while (v3);
  }
  CLMicroLocationStopMotionDetectionBridge::setOngoingTimer((id *)this);
}

void sub_241B0FDB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a21 < 0)
    operator delete(__p);
  if (a27 < 0)
    operator delete(a22);
  _Unwind_Resume(exception_object);
}

void ___ZN40CLMicroLocationStopMotionDetectionBridge18startStopDetectionEv_block_invoke(uint64_t a1)
{
  _QWORD *v2;
  double v3;

  v2 = *(_QWORD **)(a1 + 32);
  v3 = cl::chrono::CFAbsoluteTimeClock::now();
  CLMicroLocationStopMotionDetectionBridge::onTimerTimeout(v2, (const std::string *)(a1 + 40), v3);
}

void CLMicroLocationStopMotionDetectionBridge::onTimerTimeout(_QWORD *a1, const std::string *a2, double a3)
{
  NSObject *v6;
  const std::string *v7;
  std::string *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v12[6];
  std::string *v13;
  int v14;
  __int128 v15;
  uint8_t buf[4];
  int v17;
  __int16 v18;
  const char *v19;
  __int16 v20;
  const std::string *v21;
  _QWORD v22[40];

  v22[39] = *MEMORY[0x24BDAC8D0];
  if (onceToken_MicroLocation_Default != -1)
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_244);
  v6 = logObject_MicroLocation_Default;
  if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
  {
    if ((a2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v7 = a2;
    else
      v7 = (const std::string *)a2->__r_.__value_.__r.__words[0];
    *(_DWORD *)buf = 68289282;
    v17 = 0;
    v18 = 2082;
    v19 = "";
    v20 = 2082;
    v21 = v7;
    _os_log_impl(&dword_2419D9000, v6, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"StopMotionDetectionBridge::onTimerTimeout\", \"fenceIdStr\":%{public, location:escape_only}s}", buf, 0x1Cu);
  }
  (*(void (**)(_QWORD *))(*a1 + 16))(a1);
  CLMicroLocationProto::MotionEvent::MotionEvent((CLMicroLocationProto::MotionEvent *)v12);
  if (!CLMicroLocationProto::MotionEvent_Status_IsValid((CLMicroLocationProto *)6))
    __assert_rtn("set_status", "microlocation.pb.h", 18149, "::CLMicroLocationProto::MotionEvent_Status_IsValid(value)");
  v12[5] = 6;
  v14 |= 0xCu;
  v8 = v13;
  if (v13 == (std::string *)MEMORY[0x24BEDD958])
  {
    v8 = (std::string *)operator new();
    v8->__r_.__value_.__r.__words[0] = 0;
    v8->__r_.__value_.__l.__size_ = 0;
    v8->__r_.__value_.__r.__words[2] = 0;
    v13 = v8;
  }
  std::string::operator=(v8, a2);
  v9 = a1[1];
  v11 = 0;
  boost::uuids::detail::random_provider_base::random_provider_base((boost::uuids::detail::random_provider_base *)&v11);
  *(_QWORD *)&v15 = boost::uuids::random_generator_pure::operator()((uint64_t)&v11);
  *((_QWORD *)&v15 + 1) = v10;
  CLMicroLocationProtobufHelper::createLoggedEvent<CLMicroLocationProto::MotionEvent>(&v15, v12, (uint64_t)buf, a3);
  (*(void (**)(uint64_t, uint8_t *))(*(_QWORD *)v9 + 32))(v9, buf);
  CLMicroLocationProto::ReceivedEvent::~ReceivedEvent((CLMicroLocationProto::ReceivedEvent *)v22);
  boost::uuids::detail::random_provider_base::destroy((boost::uuids::detail::random_provider_base *)&v11);
  (*(void (**)(_QWORD, double))(*(_QWORD *)a1[1] + 16))(a1[1], a3);
  CLMicroLocationProto::MotionEvent::~MotionEvent((CLMicroLocationProto::MotionEvent *)v12);
}

void sub_241B10038(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, char a11, __int16 a12, char a13)
{
  uint64_t v13;

  CLMicroLocationProto::ReceivedEvent::~ReceivedEvent((CLMicroLocationProto::ReceivedEvent *)(v13 + 32));
  boost::uuids::detail::random_provider_base::destroy((boost::uuids::detail::random_provider_base *)&a11);
  CLMicroLocationProto::MotionEvent::~MotionEvent((CLMicroLocationProto::MotionEvent *)&a13);
  _Unwind_Resume(a1);
}

void __copy_helper_block_ea8_40c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE(uint64_t a1, uint64_t a2)
{
  std::string *v2;
  __int128 v3;

  v2 = (std::string *)(a1 + 40);
  if (*(char *)(a2 + 63) < 0)
  {
    std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)(a2 + 40), *(_QWORD *)(a2 + 48));
  }
  else
  {
    v3 = *(_OWORD *)(a2 + 40);
    v2->__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 56);
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = v3;
  }
}

void __destroy_helper_block_ea8_40c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE(uint64_t a1)
{
  if (*(char *)(a1 + 63) < 0)
    operator delete(*(void **)(a1 + 40));
}

void CLMicroLocationStopMotionDetectionBridge::setOngoingTimer(id *this)
{
  NSObject *v2;
  std::string *p_p;
  double v4;
  uint64_t v5;
  id v6;
  _QWORD v7[5];
  std::string __p;
  uint8_t buf[4];
  int v10;
  __int16 v11;
  const char *v12;
  __int16 v13;
  std::string *v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  if (*((_BYTE *)this + 128))
  {
    CLMicroLocationStopMotionDetectionBridge::Config::toStr((CLMicroLocationStopMotionDetectionBridge::Config *)(this + 8), &__p);
    if (onceToken_MicroLocation_Default != -1)
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_244);
    v2 = logObject_MicroLocation_Default;
    if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
    {
      p_p = &__p;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      *(_DWORD *)buf = 68289282;
      v10 = 0;
      v11 = 2082;
      v12 = "";
      v13 = 2082;
      v14 = p_p;
      _os_log_impl(&dword_2419D9000, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"setting ongoing timer\", \"Element ID\":%{public, location:escape_only}s}", buf, 0x1Cu);
    }
    objc_msgSend(this[15], "invalidate");
    v4 = *((double *)this + 9);
    v7[0] = MEMORY[0x24BDAC760];
    v7[1] = 3221225472;
    v7[2] = ___ZN40CLMicroLocationStopMotionDetectionBridge15setOngoingTimerEv_block_invoke;
    v7[3] = &__block_descriptor_40_e5_v8__0l;
    v7[4] = this;
    +[ULTimerFactory timerOnPrimaryQueueWithInterval:repeats:block:](ULTimerFactory, "timerOnPrimaryQueueWithInterval:repeats:block:", 0, v7, v4);
    v5 = objc_claimAutoreleasedReturnValue();
    v6 = this[15];
    this[15] = (id)v5;

    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_241B10234(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t CLMicroLocationStopMotionDetectionBridge::startMotionSession(uint64_t this, __n128 a2)
{
  uint64_t *v2;
  NSObject *v3;
  _QWORD *v4;
  __n128 v5;
  uint8_t buf[4];
  int v7;
  __int16 v8;
  const char *v9;
  __int16 v10;
  _QWORD *v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v2 = *(uint64_t **)(this + 40);
  if (v2)
  {
    a2.n128_u64[0] = 68289282;
    v5 = a2;
    do
    {
      if (onceToken_MicroLocation_Default != -1)
        dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_244);
      v3 = logObject_MicroLocation_Default;
      if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
      {
        v4 = v2 + 2;
        if (*((char *)v2 + 39) < 0)
          v4 = (_QWORD *)*v4;
        *(_DWORD *)buf = v5.n128_u32[0];
        v7 = 0;
        v8 = 2082;
        v9 = "";
        v10 = 2082;
        v11 = v4;
        _os_log_impl(&dword_2419D9000, v3, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"starting session for stopDetection element\", \"Element ID\":%{public, location:escape_only}s}", buf, 0x1Cu);
      }
      this = objc_msgSend((id)v2[11], "startSession", *(_OWORD *)&v5);
      v2 = (uint64_t *)*v2;
    }
    while (v2);
  }
  return this;
}

uint64_t CLMicroLocationStopMotionDetectionBridge::stopMotionSession(uint64_t this, __n128 a2)
{
  uint64_t *v2;
  NSObject *v3;
  _QWORD *v4;
  __n128 v5;
  uint8_t buf[4];
  int v7;
  __int16 v8;
  const char *v9;
  __int16 v10;
  _QWORD *v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v2 = *(uint64_t **)(this + 40);
  if (v2)
  {
    a2.n128_u64[0] = 68289282;
    v5 = a2;
    do
    {
      if (onceToken_MicroLocation_Default != -1)
        dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_244);
      v3 = logObject_MicroLocation_Default;
      if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
      {
        v4 = v2 + 2;
        if (*((char *)v2 + 39) < 0)
          v4 = (_QWORD *)*v4;
        *(_DWORD *)buf = v5.n128_u32[0];
        v7 = 0;
        v8 = 2082;
        v9 = "";
        v10 = 2082;
        v11 = v4;
        _os_log_impl(&dword_2419D9000, v3, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"stopping session for stopDetection element\", \"Element ID\":%{public, location:escape_only}s}", buf, 0x1Cu);
      }
      this = objc_msgSend((id)v2[11], "endSession", *(_OWORD *)&v5);
      v2 = (uint64_t *)*v2;
    }
    while (v2);
  }
  return this;
}

void ___ZN40CLMicroLocationStopMotionDetectionBridge15setOngoingTimerEv_block_invoke(uint64_t a1)
{
  CLMicroLocationStopMotionDetectionBridge *v1;
  double v2;

  v1 = *(CLMicroLocationStopMotionDetectionBridge **)(a1 + 32);
  v2 = cl::chrono::CFAbsoluteTimeClock::now();
  CLMicroLocationStopMotionDetectionBridge::ongoingTimerTimeout(v1, v2);
}

void CLMicroLocationStopMotionDetectionBridge::ongoingTimerTimeout(CLMicroLocationStopMotionDetectionBridge *a1, double a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8[11];
  int v9;
  __int128 v10;
  uint8_t buf[4];
  int v12;
  __int16 v13;
  const char *v14;
  _QWORD v15[40];

  v15[39] = *MEMORY[0x24BDAC8D0];
  if (onceToken_MicroLocation_Default != -1)
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_244);
  v4 = logObject_MicroLocation_Default;
  if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 68289026;
    v12 = 0;
    v13 = 2082;
    v14 = "";
    _os_log_impl(&dword_2419D9000, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"StopMotionDetectionBridge::ongoingTimerTimeout\"}", buf, 0x12u);
  }
  CLMicroLocationProto::MotionEvent::MotionEvent((CLMicroLocationProto::MotionEvent *)v8);
  if (!CLMicroLocationProto::MotionEvent_Status_IsValid((CLMicroLocationProto *)7))
    __assert_rtn("set_status", "microlocation.pb.h", 18149, "::CLMicroLocationProto::MotionEvent_Status_IsValid(value)");
  v9 |= 4u;
  v8[5] = 7;
  v5 = *((_QWORD *)a1 + 1);
  v7 = 0;
  boost::uuids::detail::random_provider_base::random_provider_base((boost::uuids::detail::random_provider_base *)&v7);
  *(_QWORD *)&v10 = boost::uuids::random_generator_pure::operator()((uint64_t)&v7);
  *((_QWORD *)&v10 + 1) = v6;
  CLMicroLocationProtobufHelper::createLoggedEvent<CLMicroLocationProto::MotionEvent>(&v10, v8, (uint64_t)buf, a2);
  (*(void (**)(uint64_t, uint8_t *))(*(_QWORD *)v5 + 32))(v5, buf);
  CLMicroLocationProto::ReceivedEvent::~ReceivedEvent((CLMicroLocationProto::ReceivedEvent *)v15);
  boost::uuids::detail::random_provider_base::destroy((boost::uuids::detail::random_provider_base *)&v7);
  (*(void (**)(_QWORD, double))(**((_QWORD **)a1 + 1) + 24))(*((_QWORD *)a1 + 1), a2);
  CLMicroLocationStopMotionDetectionBridge::setOngoingTimer(a1);
  CLMicroLocationProto::MotionEvent::~MotionEvent((CLMicroLocationProto::MotionEvent *)v8);
}

void sub_241B106B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, char a11, __int16 a12, char a13)
{
  uint64_t v13;

  CLMicroLocationProto::ReceivedEvent::~ReceivedEvent((CLMicroLocationProto::ReceivedEvent *)(v13 + 32));
  boost::uuids::detail::random_provider_base::destroy((boost::uuids::detail::random_provider_base *)&a11);
  CLMicroLocationProto::MotionEvent::~MotionEvent((CLMicroLocationProto::MotionEvent *)&a13);
  _Unwind_Resume(a1);
}

void ___ZN40CLMicroLocationStopMotionDetectionBridge20onMotionMeasurementsENSt3__16chrono10time_pointIN2cl6chrono19CFAbsoluteTimeClockENS1_8durationIeNS0_5ratioILl1ELl1EEEEEEERKNS0_12basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE_block_invoke(uint64_t a1)
{
  _QWORD *v2;
  double v3;

  v2 = *(_QWORD **)(a1 + 32);
  v3 = cl::chrono::CFAbsoluteTimeClock::now();
  CLMicroLocationStopMotionDetectionBridge::onTimerTimeout(v2, (const std::string *)(a1 + 40), v3);
}

_QWORD *CLMicroLocationCustomLoiRecordingBridge::CLMicroLocationCustomLoiRecordingBridge(_QWORD *a1, uint64_t a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  int v11;
  int v12;
  uint64_t v13;
  id v14;
  void *v15;
  id v16;
  void *v17;
  ULCMPDRFenceProvider *v18;
  double v19;
  void *v20;
  uint64_t v21;
  void *v22;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(uint64_t, uint64_t, void *);
  void *v27;
  id v28;
  _QWORD *v29;
  _QWORD v30[4];
  id v31;
  _QWORD *v32;

  v5 = a3;
  *a1 = &off_2511D97F0;
  a1[1] = a2;
  a1[2] = 0;
  v6 = v5;
  a1[3] = v6;
  +[ULDefaultsSingleton shared](ULDefaultsSingleton, "shared");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "defaultsDictionary");
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "ULCustomLoiRecordingFenceRadiusInMeters");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "objectForKey:", v9);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  if (v10 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
    objc_msgSend(v10, "floatValue");
  else
    objc_msgSend(&unk_2511EDDF8, "floatValue");
  v12 = v11;

  v13 = MEMORY[0x24BDAC760];
  v30[0] = MEMORY[0x24BDAC760];
  v30[1] = 3221225472;
  v30[2] = ___ZN39CLMicroLocationCustomLoiRecordingBridgeC2ERN45CLMicroLocationCustomLoiRecordingMotionClient32ICustomLoiRecordingFenceDelegateEPU28objcproto17OS_dispatch_queue8NSObject_block_invoke;
  v30[3] = &unk_2511D96D8;
  v32 = a1;
  v14 = v6;
  v31 = v14;
  v15 = (void *)MEMORY[0x2426A0A38](v30);
  v24 = v13;
  v25 = 3221225472;
  v26 = ___ZN39CLMicroLocationCustomLoiRecordingBridgeC2ERN45CLMicroLocationCustomLoiRecordingMotionClient32ICustomLoiRecordingFenceDelegateEPU28objcproto17OS_dispatch_queue8NSObject_block_invoke_2;
  v27 = &unk_2511D9700;
  v29 = a1;
  v16 = v14;
  v28 = v16;
  v17 = (void *)MEMORY[0x2426A0A38](&v24);
  v18 = [ULCMPDRFenceProvider alloc];
  LODWORD(v19) = v12;
  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithFloat:", v19, v24, v25, v26, v27);
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  v21 = -[ULCMPDRFenceProvider initWithFenceIdentifier:queue:radiusInMeters:callback:statusCallback:errorCallback:](v18, "initWithFenceIdentifier:queue:radiusInMeters:callback:statusCallback:errorCallback:", CFSTR("ULCustomLoiRecordingFence"), v16, v20, v15, &__block_literal_global_85, v17);
  v22 = (void *)a1[2];
  a1[2] = v21;

  return a1;
}

void sub_241B1091C(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void ___ZN39CLMicroLocationCustomLoiRecordingBridgeC2ERN45CLMicroLocationCustomLoiRecordingMotionClient32ICustomLoiRecordingFenceDelegateEPU28objcproto17OS_dispatch_queue8NSObject_block_invoke(uint64_t a1, void *a2)
{
  uint64_t v3;
  id v4;

  v4 = a2;
  v3 = *(_QWORD *)(a1 + 40);
  dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 32));
  objc_msgSend(v4, "timeIntervalSinceReferenceDate");
  (*(void (**)(_QWORD))(**(_QWORD **)(v3 + 8) + 16))(*(_QWORD *)(v3 + 8));

}

void sub_241B109F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void ___ZN39CLMicroLocationCustomLoiRecordingBridgeC2ERN45CLMicroLocationCustomLoiRecordingMotionClient32ICustomLoiRecordingFenceDelegateEPU28objcproto17OS_dispatch_queue8NSObject_block_invoke_2(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4;
  id v5;

  v5 = a3;
  v4 = *(_QWORD *)(a1 + 40);
  dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 32));
  objc_msgSend(v5, "timeIntervalSinceReferenceDate");
  (*(void (**)(_QWORD))(**(_QWORD **)(v4 + 8) + 16))(*(_QWORD *)(v4 + 8));

}

void sub_241B10A60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void CLMicroLocationCustomLoiRecordingBridge::~CLMicroLocationCustomLoiRecordingBridge(id *this)
{

}

{

  JUMPOUT(0x2426A04D4);
}

uint64_t CLMicroLocationCustomLoiRecordingBridge::startCustomLoiRecordingFence(id *this)
{
  NSObject *v2;
  _DWORD v4[2];
  __int16 v5;
  const char *v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  if (onceToken_MicroLocation_Default != -1)
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_244);
  v2 = logObject_MicroLocation_Default;
  if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
  {
    v4[0] = 68289026;
    v4[1] = 0;
    v5 = 2082;
    v6 = "";
    _os_log_impl(&dword_2419D9000, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLMicroLocationCustomLoiRecordingBridge::startCustomLoiRecordingFence\"}", (uint8_t *)v4, 0x12u);
  }
  objc_msgSend(this[2], "startSession");
  return objc_msgSend(this[2], "setFence");
}

uint64_t CLMicroLocationCustomLoiRecordingBridge::teardownCustomLoiRecordingFence(id *this)
{
  NSObject *v2;
  _DWORD v4[2];
  __int16 v5;
  const char *v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  if (onceToken_MicroLocation_Default != -1)
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_244);
  v2 = logObject_MicroLocation_Default;
  if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
  {
    v4[0] = 68289026;
    v4[1] = 0;
    v5 = 2082;
    v6 = "";
    _os_log_impl(&dword_2419D9000, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLMicroLocationCustomLoiRecordingBridge::teardownCustomLoiRecordingFence\"}", (uint8_t *)v4, 0x12u);
  }
  objc_msgSend(this[2], "clearFence");
  return objc_msgSend(this[2], "endSession");
}

void ___ZL45_CLLogObjectForCategory_MicroLocation_Defaultv_block_invoke_67()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.MicroLocation", "MicroLocation");
  v1 = (void *)logObject_MicroLocation_Default;
  logObject_MicroLocation_Default = (uint64_t)v0;

}

void sub_241B10ED0(_Unwind_Exception *a1)
{
  void *v1;
  uint64_t v2;
  void *v3;
  void *v5;

  v5 = *(void **)v2;
  if (*(_QWORD *)v2)
  {
    *(_QWORD *)(v2 + 8) = v5;
    operator delete(v5);
  }

  _Unwind_Resume(a1);
}

void sub_241B1103C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t CLMicroLocationStopMotionDetectionBridge::Element::Element(uint64_t a1, _OWORD *a2, void *a3)
{
  id v5;

  v5 = a3;
  *(_OWORD *)a1 = *a2;
  std::__optional_copy_base<std::string,false>::__optional_copy_base[abi:ne180100]((std::string *)(a1 + 16), a2 + 1);
  *(_QWORD *)(a1 + 48) = v5;
  *(_QWORD *)(a1 + 56) = 0;
  return a1;
}

void sub_241B110AC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t std::__optional_destruct_base<CLMicroLocationStopMotionDetectionBridge::Element,false>::~__optional_destruct_base[abi:ne180100](uint64_t a1)
{
  if (*(_BYTE *)(a1 + 64))
  {

    if (*(_BYTE *)(a1 + 40))
    {
      if (*(char *)(a1 + 39) < 0)
        operator delete(*(void **)(a1 + 16));
    }
  }
  return a1;
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,CLMicroLocationStopMotionDetectionBridge::Element>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,CLMicroLocationStopMotionDetectionBridge::Element>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,CLMicroLocationStopMotionDetectionBridge::Element>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,CLMicroLocationStopMotionDetectionBridge::Element>>>::~__hash_table(uint64_t a1)
{
  void *v2;

  std::__hash_table<std::__hash_value_type<std::string,CLMicroLocationStopMotionDetectionBridge::Element>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,CLMicroLocationStopMotionDetectionBridge::Element>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,CLMicroLocationStopMotionDetectionBridge::Element>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,CLMicroLocationStopMotionDetectionBridge::Element>>>::__deallocate_node(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void std::__hash_table<std::__hash_value_type<std::string,CLMicroLocationStopMotionDetectionBridge::Element>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,CLMicroLocationStopMotionDetectionBridge::Element>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,CLMicroLocationStopMotionDetectionBridge::Element>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,CLMicroLocationStopMotionDetectionBridge::Element>>>::__deallocate_node(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = (_QWORD *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,CLMicroLocationStopMotionDetectionBridge::Element>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,CLMicroLocationStopMotionDetectionBridge::Element>,0>(uint64_t a1)
{

  if (*(_BYTE *)(a1 + 64) && *(char *)(a1 + 63) < 0)
    operator delete(*(void **)(a1 + 40));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,CLMicroLocationStopMotionDetectionBridge::Element>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,CLMicroLocationStopMotionDetectionBridge::Element>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,CLMicroLocationStopMotionDetectionBridge::Element>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,CLMicroLocationStopMotionDetectionBridge::Element>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<CLMicroLocationStopMotionDetectionBridge::Config &,ULCMPDRFenceProvider * {__strong}&>>(uint64_t a1, unsigned __int8 *a2, uint64_t a3, __int128 **a4, __int128 *a5)
{
  unint64_t v5;
  _QWORD *v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint8x8_t v14;
  unint64_t v15;
  unsigned __int8 **v16;
  unsigned __int8 *i;
  unint64_t v18;
  float v19;
  float v20;
  _BOOL8 v21;
  unint64_t v22;
  unint64_t v23;
  size_t v24;
  _QWORD *v25;
  unint64_t v26;
  _QWORD v28[3];

  v10 = (_QWORD *)(a1 + 24);
  v11 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  v12 = v11;
  v13 = *(_QWORD *)(a1 + 8);
  if (v13)
  {
    v14 = (uint8x8_t)vcnt_s8((int8x8_t)v13);
    v14.i16[0] = vaddlv_u8(v14);
    v15 = v14.u32[0];
    if (v14.u32[0] > 1uLL)
    {
      v5 = v11;
      if (v11 >= v13)
        v5 = v11 % v13;
    }
    else
    {
      v5 = (v13 - 1) & v11;
    }
    v16 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v5);
    if (v16)
    {
      for (i = *v16; i; i = *(unsigned __int8 **)i)
      {
        v18 = *((_QWORD *)i + 1);
        if (v18 == v12)
        {
          if ((std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2) & 1) != 0)
            return i;
        }
        else
        {
          if (v15 > 1)
          {
            if (v18 >= v13)
              v18 %= v13;
          }
          else
          {
            v18 &= v13 - 1;
          }
          if (v18 != v5)
            break;
        }
      }
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,CLMicroLocationStopMotionDetectionBridge::Element>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,CLMicroLocationStopMotionDetectionBridge::Element>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,CLMicroLocationStopMotionDetectionBridge::Element>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,CLMicroLocationStopMotionDetectionBridge::Element>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<CLMicroLocationStopMotionDetectionBridge::Config &,ULCMPDRFenceProvider * {__strong}&>>(a1, v12, a4, a5, (uint64_t)v28);
  v19 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v20 = *(float *)(a1 + 32);
  if (!v13 || (float)(v20 * (float)v13) < v19)
  {
    v21 = 1;
    if (v13 >= 3)
      v21 = (v13 & (v13 - 1)) != 0;
    v22 = v21 | (2 * v13);
    v23 = vcvtps_u32_f32(v19 / v20);
    if (v22 <= v23)
      v24 = v23;
    else
      v24 = v22;
    std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>>>::__rehash<true>(a1, v24);
    v13 = *(_QWORD *)(a1 + 8);
    if ((v13 & (v13 - 1)) != 0)
    {
      if (v12 >= v13)
        v5 = v12 % v13;
      else
        v5 = v12;
    }
    else
    {
      v5 = (v13 - 1) & v12;
    }
  }
  v25 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v5);
  if (v25)
  {
    *(_QWORD *)v28[0] = *v25;
    *v25 = v28[0];
  }
  else
  {
    *(_QWORD *)v28[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v28[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v5) = a1 + 16;
    if (*(_QWORD *)v28[0])
    {
      v26 = *(_QWORD *)(*(_QWORD *)v28[0] + 8);
      if ((v13 & (v13 - 1)) != 0)
      {
        if (v26 >= v13)
          v26 %= v13;
      }
      else
      {
        v26 &= v13 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v26) = v28[0];
    }
  }
  i = (unsigned __int8 *)v28[0];
  v28[0] = 0;
  ++*v10;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,CLMicroLocationStopMotionDetectionBridge::Element>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,CLMicroLocationStopMotionDetectionBridge::Element>,void *>>>>::reset[abi:ne180100]((uint64_t)v28, 0);
  return i;
}

void sub_241B1145C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,CLMicroLocationStopMotionDetectionBridge::Element>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,CLMicroLocationStopMotionDetectionBridge::Element>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

std::string *std::__hash_table<std::__hash_value_type<std::string,CLMicroLocationStopMotionDetectionBridge::Element>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,CLMicroLocationStopMotionDetectionBridge::Element>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,CLMicroLocationStopMotionDetectionBridge::Element>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,CLMicroLocationStopMotionDetectionBridge::Element>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<CLMicroLocationStopMotionDetectionBridge::Config &,ULCMPDRFenceProvider * {__strong}&>>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, __int128 **a3@<X3>, __int128 *a4@<X4>, uint64_t a5@<X8>)
{
  uint64_t v9;
  char *v10;
  std::string *result;
  __int128 v12;
  __int128 *v13;

  v9 = a1 + 16;
  v10 = (char *)operator new(0x68uLL);
  *(_QWORD *)a5 = v10;
  *(_QWORD *)(a5 + 8) = v9;
  *(_BYTE *)(a5 + 16) = 0;
  *(_QWORD *)v10 = 0;
  *((_QWORD *)v10 + 1) = a2;
  v13 = *a3;
  v12 = *a4;
  result = std::pair<std::string const,CLMicroLocationStopMotionDetectionBridge::Element>::pair[abi:ne180100]<std::string const&,CLMicroLocationStopMotionDetectionBridge::Config &,ULCMPDRFenceProvider * {__strong}&,0ul,0ul,1ul>((std::string *)(v10 + 16), &v13, (__int128 **)&v12);
  *(_BYTE *)(a5 + 16) = 1;
  return result;
}

void sub_241B114F0(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,CLMicroLocationStopMotionDetectionBridge::Element>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,CLMicroLocationStopMotionDetectionBridge::Element>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

std::string *std::pair<std::string const,CLMicroLocationStopMotionDetectionBridge::Element>::pair[abi:ne180100]<std::string const&,CLMicroLocationStopMotionDetectionBridge::Config &,ULCMPDRFenceProvider * {__strong}&,0ul,0ul,1ul>(std::string *this, __int128 **a2, __int128 **a3)
{
  __int128 *v5;
  __int128 v6;
  __int128 *v7;
  __int128 v9;
  std::string __p;
  char v11;

  v5 = *a2;
  if (*((char *)*a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)v5, *((_QWORD *)v5 + 1));
  }
  else
  {
    v6 = *v5;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)v5 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v6;
  }
  v7 = *a3;
  v9 = **a3;
  std::__optional_copy_base<std::string,false>::__optional_copy_base[abi:ne180100](&__p, v7 + 1);
  CLMicroLocationStopMotionDetectionBridge::Element::Element((uint64_t)&this[1], &v9, *(void **)a3[1]);
  if (v11 && SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return this;
}

void sub_241B115A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  uint64_t v17;

  if (a17 && a16 < 0)
    operator delete(__p);
  if (*(char *)(v17 + 23) < 0)
    operator delete(*(void **)v17);
  _Unwind_Resume(exception_object);
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,CLMicroLocationStopMotionDetectionBridge::Element>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,CLMicroLocationStopMotionDetectionBridge::Element>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,CLMicroLocationStopMotionDetectionBridge::Element>,0>((uint64_t)v2 + 16);
    operator delete(v2);
  }
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,CLMicroLocationStopMotionDetectionBridge::Element>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,CLMicroLocationStopMotionDetectionBridge::Element>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,CLMicroLocationStopMotionDetectionBridge::Element>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,CLMicroLocationStopMotionDetectionBridge::Element>>>::find<std::string>(_QWORD *a1, unsigned __int8 *a2)
{
  unint64_t v4;
  int8x8_t v5;
  unint64_t v6;
  uint8x8_t v7;
  unint64_t v8;
  unint64_t v9;
  unsigned __int8 **v10;
  unsigned __int8 *v11;
  uint64_t v12;
  unint64_t v13;

  v4 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)(a1 + 3), (uint64_t)a2);
  v5 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v5)
    return 0;
  v6 = v4;
  v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    v9 = v4;
    if (v4 >= *(_QWORD *)&v5)
      v9 = v4 % *(_QWORD *)&v5;
  }
  else
  {
    v9 = (*(_QWORD *)&v5 - 1) & v4;
  }
  v10 = *(unsigned __int8 ***)(*a1 + 8 * v9);
  if (!v10)
    return 0;
  v11 = *v10;
  if (*v10)
  {
    v12 = (uint64_t)(a1 + 4);
    do
    {
      v13 = *((_QWORD *)v11 + 1);
      if (v13 == v6)
      {
        if ((std::equal_to<std::string>::operator()[abi:ne180100](v12, v11 + 16, a2) & 1) != 0)
          return v11;
      }
      else
      {
        if (v8 > 1)
        {
          if (v13 >= *(_QWORD *)&v5)
            v13 %= *(_QWORD *)&v5;
        }
        else
        {
          v13 &= *(_QWORD *)&v5 - 1;
        }
        if (v13 != v9)
          return 0;
      }
      v11 = *(unsigned __int8 **)v11;
    }
    while (v11);
  }
  return v11;
}

uint64_t CLMicroLocationLegacyThrottle::getParameters(CLMicroLocationLegacyThrottle *this, const CLMicroLocationProto::RecordingEvent *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  CLMicroLocationProto::RecordingEvent *v11;
  int v12;
  CLMicroLocationProto::RecordingEvent *v13;

  v2 = 0;
  v4 = 0;
  switch(*((_DWORD *)a2 + 18))
  {
    case 1:
      if ((*((_BYTE *)a2 + 140) & 4) == 0)
        goto LABEL_2;
      v5 = *((_QWORD *)a2 + 2);
      if (!v5)
      {
        this = (CLMicroLocationLegacyThrottle *)CLMicroLocationProto::RecordingEvent::default_instance(this);
        v5 = *((_QWORD *)this + 2);
      }
      if ((*(_BYTE *)(v5 + 44) & 2) == 0)
        goto LABEL_2;
      v6 = *((_QWORD *)a2 + 2);
      if (!v6)
        v6 = *(_QWORD *)(CLMicroLocationProto::RecordingEvent::default_instance(this) + 16);
      v4 = 0;
      if (*(_DWORD *)(v6 + 12) == 3)
        v2 = 1;
      else
        v2 = 2;
      break;
    case 2:
      v2 = 0;
      v4 = 0x300000000;
      break;
    case 3:
    case 6:
    case 8:
    case 0xB:
      return v4 | v2;
    case 4:
      v4 = 0;
      v2 = 3;
      break;
    case 5:
    case 0xC:
LABEL_2:
      v4 = 0;
      v2 = 2;
      break;
    case 7:
      v2 = 0;
      v4 = 0x100000000;
      break;
    case 9:
      v7 = *((_QWORD *)a2 + 7);
      if (v7)
      {
        v2 = 2 * *(unsigned __int8 *)(v7 + 68);
      }
      else
      {
        v11 = (CLMicroLocationProto::RecordingEvent *)CLMicroLocationProto::RecordingEvent::default_instance(this);
        v7 = *((_QWORD *)a2 + 7);
        v2 = 2 * *(unsigned __int8 *)(*((_QWORD *)v11 + 7) + 68);
        if (!v7)
          v7 = *(_QWORD *)(CLMicroLocationProto::RecordingEvent::default_instance(v11) + 56);
      }
      v12 = *(unsigned __int8 *)(v7 + 69);
      goto LABEL_31;
    case 0xA:
      v8 = *((_QWORD *)a2 + 8);
      if (v8)
      {
        v2 = 2 * *(unsigned __int8 *)(v8 + 52);
      }
      else
      {
        v13 = (CLMicroLocationProto::RecordingEvent *)CLMicroLocationProto::RecordingEvent::default_instance(this);
        v8 = *((_QWORD *)a2 + 8);
        v2 = 2 * *(unsigned __int8 *)(*((_QWORD *)v13 + 8) + 52);
        if (!v8)
          v8 = *(_QWORD *)(CLMicroLocationProto::RecordingEvent::default_instance(v13) + 64);
      }
      v12 = *(unsigned __int8 *)(v8 + 53);
LABEL_31:
      v10 = v12 == 0;
      v4 = 0x300000000;
      if (v10)
        v4 = 0;
      break;
    case 0xD:
      v9 = *((_QWORD *)a2 + 11);
      if (!v9)
        v9 = *(_QWORD *)(CLMicroLocationProto::RecordingEvent::default_instance(this) + 88);
      v2 = 0;
      v10 = *(_DWORD *)(v9 + 12) == 2;
      v4 = 0x300000000;
      if (v10)
        v4 = 0x200000000;
      break;
    default:
      v4 = 0;
      break;
  }
  return v4 | v2;
}

uint64_t CLMicroLocationLegacyThrottle::isThrottle(double a1, double a2, uint64_t a3, int a4, uint64_t a5, char a6)
{
  uint64_t result;
  double v8;
  NSObject *v9;
  void *v10;
  void *v11;
  int v12;
  void *v13;
  __int16 v14;
  void *v15;
  uint64_t v16;

  result = 0;
  v16 = *MEMORY[0x24BDAC8D0];
  if (a4 == 3 && a6)
  {
    v8 = a1 - *(double *)&a5;
    if (a1 - *(double *)&a5 >= a2)
    {
      return 0;
    }
    else
    {
      if (onceToken_MicroLocation_Default != -1)
        dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_86);
      v9 = (id)logObject_MicroLocation_Default;
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
      {
        objc_msgSend(MEMORY[0x24BDD16E0], "numberWithDouble:", v8);
        v10 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(MEMORY[0x24BDD16E0], "numberWithDouble:", a2);
        v11 = (void *)objc_claimAutoreleasedReturnValue();
        v12 = 138412546;
        v13 = v10;
        v14 = 2112;
        v15 = v11;
        _os_log_impl(&dword_2419D9000, v9, OS_LOG_TYPE_DEFAULT, "Request throttled, time since last allowed timestamp(sec): %@, throttle duration(sec): %@", (uint8_t *)&v12, 0x16u);

      }
      return 1;
    }
  }
  return result;
}

void sub_241B119F0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t CLMicroLocationLegacyThrottle::setLocalizationTime(uint64_t result, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  if (!*(_BYTE *)(result + 8))
    *(_BYTE *)(result + 8) = 1;
  *(_QWORD *)result = v2;
  return result;
}

uint64_t CLMicroLocationLegacyThrottle::setRecordingTime(uint64_t result, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  if (!*(_BYTE *)(result + 24))
    *(_BYTE *)(result + 24) = 1;
  *(_QWORD *)(result + 16) = v2;
  return result;
}

uint64_t CLMicroLocationLegacyThrottle::getLocalizationTime(CLMicroLocationLegacyThrottle *this)
{
  return *(_QWORD *)this;
}

uint64_t CLMicroLocationLegacyThrottle::getRecordingTime(CLMicroLocationLegacyThrottle *this)
{
  return *((_QWORD *)this + 2);
}

void ___ZL45_CLLogObjectForCategory_MicroLocation_Defaultv_block_invoke_68()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.MicroLocation", "MicroLocation");
  v1 = (void *)logObject_MicroLocation_Default;
  logObject_MicroLocation_Default = (uint64_t)v0;

}

void sub_241B121A0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

uint64_t ULDBUtils::insertEntries<CLMiLoCustomLoiTable,ULCustomLoiMO>(void *a1, uint64_t a2)
{
  id v3;
  void *v4;
  id v5;
  uint64_t v6;
  _QWORD v8[4];
  id v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  char v15;

  v3 = a1;
  v12 = 0;
  v13 = &v12;
  v14 = 0x2020000000;
  v15 = 0;
  objc_msgSend(v3, "managedObjectContext");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v8[0] = MEMORY[0x24BDAC760];
  v8[1] = 3221225472;
  v8[2] = ___ZN9ULDBUtils13insertEntriesI20CLMiLoCustomLoiTable13ULCustomLoiMOEEbP7ULStoreRKNSt3__16vectorINT_5EntryENS5_9allocatorIS8_EEEE_block_invoke;
  v8[3] = &unk_2511D22D0;
  v11 = a2;
  v5 = v3;
  v9 = v5;
  v10 = &v12;
  objc_msgSend(v4, "performBlockAndWait:", v8);

  v6 = *((unsigned __int8 *)v13 + 24);
  _Block_object_dispose(&v12, 8);

  return v6;
}

void sub_241B122C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, uint64_t a8, uint64_t a9, ...)
{
  void *v9;
  void *v10;
  va_list va;

  va_start(va, a9);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void ULDBUtils::fetchEntries<CLMiLoCustomLoiTable,ULCustomLoiMO>(void *a1@<X0>, void *a2@<X1>, void *a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  id v9;
  id v10;
  id v11;
  void *v12;
  id v13;
  id v14;
  id v15;
  uint64_t *v16;
  _QWORD v17[4];
  id v18;
  id v19;
  id v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  __n128 (*v26)(__n128 *, __n128 *);
  void (*v27)(uint64_t);
  void *v28;
  void *__p;
  void *v30;
  uint64_t v31;

  v9 = a1;
  v10 = a2;
  v11 = a3;
  v23 = 0;
  v24 = &v23;
  v25 = 0x4812000000;
  v26 = __Block_byref_object_copy__17;
  v27 = __Block_byref_object_dispose__17;
  v28 = &unk_241BEBD1D;
  __p = 0;
  v30 = 0;
  v31 = 0;
  objc_msgSend(v9, "managedObjectContext");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  v17[0] = MEMORY[0x24BDAC760];
  v17[1] = 3221225472;
  v17[2] = ___ZN9ULDBUtils12fetchEntriesI20CLMiLoCustomLoiTable13ULCustomLoiMOEENSt3__16vectorINT_5EntryENS3_9allocatorIS6_EEEEP7ULStoreP7NSArrayIP11NSPredicateEPSC_IP16NSSortDescriptorEm_block_invoke;
  v17[3] = &unk_2511D22F8;
  v13 = v10;
  v18 = v13;
  v14 = v11;
  v19 = v14;
  v22 = a4;
  v15 = v9;
  v20 = v15;
  v21 = &v23;
  objc_msgSend(v12, "performBlockAndWait:", v17);

  v16 = v24;
  a5[1] = 0;
  a5[2] = 0;
  *a5 = 0;
  std::vector<CLMiLoCustomLoiTable::Entry>::__init_with_size[abi:ne180100]<CLMiLoCustomLoiTable::Entry*,CLMiLoCustomLoiTable::Entry*>(a5, (const void *)v16[6], v16[7], 0xCCCCCCCCCCCCCCCDLL * ((v16[7] - v16[6]) >> 3));

  _Block_object_dispose(&v23, 8);
  if (__p)
  {
    v30 = __p;
    operator delete(__p);
  }

}

void sub_241B12484(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14, void *a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25)
{
  void *v25;
  void *v26;
  void *v27;

  _Block_object_dispose(&a18, 8);
  if (__p)
  {
    a25 = (uint64_t)__p;
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void ULDBUtils::fetchAllWithLimit<CLMiLoCustomLoiTable,ULCustomLoiMO>(void *a1@<X0>, unsigned int a2@<W1>, _QWORD *a3@<X8>)
{
  id v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  _QWORD v10[2];

  v10[1] = *MEMORY[0x24BDAC8D0];
  v5 = a1;
  v6 = (void *)MEMORY[0x24BDD17C0];
  objc_msgSend((id)objc_opt_class(), "defaultSortProperty");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "sortDescriptorWithKey:ascending:", v7, 0);
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  v10[0] = v8;
  objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", v10, 1);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  ULDBUtils::fetchEntries<CLMiLoCustomLoiTable,ULCustomLoiMO>(v5, 0, v9, a2, a3);

}

void sub_241B125E8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_241B12774(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_241B12984(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_241B12AAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12)
{
  void *v12;
  void *v13;

  _Unwind_Resume(a1);
}

void sub_241B12C00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12)
{
  void *v12;
  void *v13;

  _Unwind_Resume(a1);
}

void sub_241B12D58(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_241B12E54(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_241B12FD8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_241B13180(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void ___ZL45_CLLogObjectForCategory_MicroLocation_Defaultv_block_invoke_69()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.MicroLocation", "MicroLocation");
  v1 = (void *)logObject_MicroLocation_Default;
  logObject_MicroLocation_Default = (uint64_t)v0;

}

void ___ZN9ULDBUtils13insertEntriesI20CLMiLoCustomLoiTable13ULCustomLoiMOEEbP7ULStoreRKNSt3__16vectorINT_5EntryENS5_9allocatorIS8_EEEE_block_invoke(uint64_t a1)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;
  NSObject *v7;
  void *v8;
  void *v9;
  NSObject *v10;
  void *v11;
  void *v12;
  void *v13;
  int v14;
  int v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  void *v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  v2 = *(uint64_t **)(a1 + 48);
  v3 = *v2;
  v4 = v2[1];
  if (*v2 == v4)
  {
LABEL_4:
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = objc_msgSend(*(id *)(a1 + 32), "commitChangesToStore");
    objc_msgSend(*(id *)(a1 + 32), "deleteOldestRecordsIfFull");
  }
  else
  {
    while (1)
    {
      objc_msgSend(*(id *)(a1 + 32), "managedObjectContext");
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      +[ULCustomLoiMO createFromEntry:inManagedObjectContext:](ULCustomLoiMO, "createFromEntry:inManagedObjectContext:", v3, v5);
      v6 = (void *)objc_claimAutoreleasedReturnValue();

      if (!v6)
        break;

      v3 += 40;
      if (v3 == v4)
        goto LABEL_4;
    }
    if (onceToken_MicroLocation_Default != -1)
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_88);
    v7 = (id)logObject_MicroLocation_Default;
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      +[ULCustomLoiMO entity](ULCustomLoiMO, "entity");
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v8, "name");
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      v14 = 68289283;
      v15 = 0;
      v16 = 2082;
      v17 = "";
      v18 = 2113;
      v19 = v9;
      _os_log_impl(&dword_2419D9000, v7, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"Failed to create entry from MO\", \"MO\":%{private, location:escape_only}@}", (uint8_t *)&v14, 0x1Cu);

    }
    if (onceToken_MicroLocation_Default != -1)
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_88);
    v10 = (id)logObject_MicroLocation_Default;
    if (os_signpost_enabled(v10))
    {
      +[ULCustomLoiMO entity](ULCustomLoiMO, "entity");
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v11, "name");
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      v14 = 68289283;
      v15 = 0;
      v16 = 2082;
      v17 = "";
      v18 = 2113;
      v19 = v12;
      _os_signpost_emit_with_name_impl(&dword_2419D9000, v10, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Failed to create entry from MO", "{\"msg%{public}.0s\":\"Failed to create entry from MO\", \"MO\":%{private, location:escape_only}@}", (uint8_t *)&v14, 0x1Cu);

    }
    objc_msgSend(*(id *)(a1 + 32), "managedObjectContext");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v13, "reset");

  }
}

void sub_241B1348C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy__17(__n128 *a1, __n128 *a2)
{
  __n128 result;

  a1[3].n128_u64[0] = 0;
  a1[3].n128_u64[1] = 0;
  a1[4].n128_u64[0] = 0;
  result = a2[3];
  a1[3] = result;
  a1[4].n128_u64[0] = a2[4].n128_u64[0];
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = 0;
  a2[4].n128_u64[0] = 0;
  return result;
}

void __Block_byref_object_dispose__17(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(_QWORD *)(a1 + 56) = v2;
    operator delete(v2);
  }
}

void ___ZN9ULDBUtils12fetchEntriesI20CLMiLoCustomLoiTable13ULCustomLoiMOEENSt3__16vectorINT_5EntryENS3_9allocatorIS6_EEEEP7ULStoreP7NSArrayIP11NSPredicateEPSC_IP16NSSortDescriptorEm_block_invoke(uint64_t a1)
{
  void *v2;
  objc_class *v3;
  void *v4;
  void *v5;
  _QWORD *v6;
  void *v7;
  void *v8;
  __int128 v9;
  uint64_t v10;

  v2 = *(void **)(a1 + 48);
  v3 = (objc_class *)objc_opt_class();
  NSStringFromClass(v3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "fetchManagedObjectsWithEntityName:byAndPredicates:sortDescriptors:andLimit:", v4, *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 64));
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  ULDBUtils::convertManagedObjectsToEntries<CLMiLoCustomLoiTable,ULCustomLoiMO>(v5, (uint64_t)&v9);
  v6 = *(_QWORD **)(*(_QWORD *)(a1 + 56) + 8);
  v7 = (void *)v6[6];
  if (v7)
  {
    v6[7] = v7;
    operator delete(v7);
    v6[6] = 0;
    v6[7] = 0;
    v6[8] = 0;
  }
  *((_OWORD *)v6 + 3) = v9;
  v6[8] = v10;
  objc_msgSend(*(id *)(a1 + 48), "managedObjectContext");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "reset");

}

void sub_241B135E0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void ULDBUtils::convertManagedObjectsToEntries<CLMiLoCustomLoiTable,ULCustomLoiMO>(void *a1@<X0>, uint64_t a2@<X8>)
{
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t i;
  id v7;
  void *v8;
  unint64_t v9;
  _OWORD *v10;
  __int128 v11;
  __int128 v12;
  _OWORD *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  char *v18;
  char *v19;
  __int128 v20;
  __int128 v21;
  char *v22;
  __int128 v23;
  __int128 v24;
  char *v25;
  char *v26;
  NSObject *v27;
  void *v28;
  void *v29;
  NSObject *v30;
  void *v31;
  void *v32;
  id v33;
  id obj;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  uint8_t buf[4];
  int v40;
  __int16 v41;
  const char *v42;
  __int16 v43;
  void *v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  _BYTE v48[128];
  uint64_t v49;

  v49 = *MEMORY[0x24BDAC8D0];
  v3 = a1;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  std::vector<CLMiLoCustomLoiTable::Entry>::reserve((void **)a2, objc_msgSend(v3, "count"));
  v37 = 0u;
  v38 = 0u;
  v35 = 0u;
  v36 = 0u;
  obj = v3;
  v4 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v35, v48, 16);
  if (v4)
  {
    v33 = v3;
    v5 = *(_QWORD *)v36;
    while (2)
    {
      for (i = 0; i != v4; ++i)
      {
        if (*(_QWORD *)v36 != v5)
          objc_enumerationMutation(obj);
        v7 = *(id *)(*((_QWORD *)&v35 + 1) + 8 * i);
        v8 = v7;
        if (!v7)
        {
          v46 = 0u;
          v47 = 0u;
          v45 = 0u;
LABEL_32:
          if (onceToken_MicroLocation_Default != -1)
            dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_88);
          v27 = (id)logObject_MicroLocation_Default;
          if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
          {
            objc_msgSend(v8, "entity");
            v28 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v28, "name");
            v29 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 68289283;
            v40 = 0;
            v41 = 2082;
            v42 = "";
            v43 = 2113;
            v44 = v29;
            _os_log_impl(&dword_2419D9000, v27, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"Failed to convert MO to entry\", \"MO\":%{private, location:escape_only}@}", buf, 0x1Cu);

          }
          if (onceToken_MicroLocation_Default != -1)
            dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_88);
          v30 = (id)logObject_MicroLocation_Default;
          if (os_signpost_enabled(v30))
          {
            objc_msgSend(v8, "entity");
            v31 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v31, "name");
            v32 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 68289283;
            v40 = 0;
            v41 = 2082;
            v42 = "";
            v43 = 2113;
            v44 = v32;
            _os_signpost_emit_with_name_impl(&dword_2419D9000, v30, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Failed to convert MO to entry", "{\"msg%{public}.0s\":\"Failed to convert MO to entry\", \"MO\":%{private, location:escape_only}@}", buf, 0x1Cu);

          }
          *(_QWORD *)(a2 + 8) = *(_QWORD *)a2;
          goto LABEL_41;
        }
        objc_msgSend(v7, "convertToEntry", v33);
        if (!BYTE8(v47))
          goto LABEL_32;
        v10 = *(_OWORD **)(a2 + 8);
        v9 = *(_QWORD *)(a2 + 16);
        if ((unint64_t)v10 >= v9)
        {
          v13 = *(_OWORD **)a2;
          v14 = 0xCCCCCCCCCCCCCCCDLL * (((uint64_t)v10 - *(_QWORD *)a2) >> 3);
          v15 = v14 + 1;
          if (v14 + 1 > 0x666666666666666)
            std::vector<CLMicroLocationProto::ConfidenceReason>::__throw_length_error[abi:ne180100]();
          v16 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v9 - (_QWORD)v13) >> 3);
          if (2 * v16 > v15)
            v15 = 2 * v16;
          if (v16 >= 0x333333333333333)
            v17 = 0x666666666666666;
          else
            v17 = v15;
          if (v17)
          {
            v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CLMiLoCustomLoiTable::Entry>>(a2 + 16, v17);
            v13 = *(_OWORD **)a2;
            v10 = *(_OWORD **)(a2 + 8);
          }
          else
          {
            v18 = 0;
          }
          v19 = &v18[40 * v14];
          v20 = v45;
          v21 = v46;
          *((_QWORD *)v19 + 4) = v47;
          *(_OWORD *)v19 = v20;
          *((_OWORD *)v19 + 1) = v21;
          if (v10 == v13)
          {
            v25 = &v18[40 * v14];
          }
          else
          {
            v22 = &v18[40 * v14];
            do
            {
              v23 = *(_OWORD *)((char *)v10 - 40);
              v24 = *(_OWORD *)((char *)v10 - 24);
              v25 = v22 - 40;
              *((_QWORD *)v22 - 1) = *((_QWORD *)v10 - 1);
              *(_OWORD *)(v22 - 24) = v24;
              *(_OWORD *)(v22 - 40) = v23;
              v10 = (_OWORD *)((char *)v10 - 40);
              v22 -= 40;
            }
            while (v10 != v13);
          }
          v26 = v19 + 40;
          *(_QWORD *)a2 = v25;
          *(_QWORD *)(a2 + 8) = v19 + 40;
          *(_QWORD *)(a2 + 16) = &v18[40 * v17];
          if (v13)
            operator delete(v13);
          *(_QWORD *)(a2 + 8) = v26;
        }
        else
        {
          v12 = v45;
          v11 = v46;
          *((_QWORD *)v10 + 4) = v47;
          *v10 = v12;
          v10[1] = v11;
          *(_QWORD *)(a2 + 8) = (char *)v10 + 40;
        }

      }
      v4 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v35, v48, 16);
      if (v4)
        continue;
      break;
    }
  }

LABEL_41:
}

void sub_241B13A2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10)
{
  uint64_t v10;
  void *v12;

  v12 = *(void **)v10;
  if (*(_QWORD *)v10)
  {
    *(_QWORD *)(v10 + 8) = v12;
    operator delete(v12);
  }

  _Unwind_Resume(a1);
}

void std::vector<CLMiLoCustomLoiTable::Entry>::reserve(void **a1, unint64_t a2)
{
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  __int128 v13;
  __int128 v14;

  v4 = a1[2];
  v3 = (uint64_t)(a1 + 2);
  if (0xCCCCCCCCCCCCCCCDLL * ((v4 - (_BYTE *)*a1) >> 3) < a2)
  {
    if (a2 >= 0x666666666666667)
      std::vector<CLMicroLocationProto::ConfidenceReason>::__throw_length_error[abi:ne180100]();
    v5 = ((_BYTE *)a1[1] - (_BYTE *)*a1) / 40;
    v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CLMiLoCustomLoiTable::Entry>>(v3, a2);
    v7 = &v6[40 * v5];
    v9 = &v6[40 * v8];
    v11 = (char *)*a1;
    v10 = (char *)a1[1];
    v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        v13 = *(_OWORD *)(v10 - 40);
        v14 = *(_OWORD *)(v10 - 24);
        *((_QWORD *)v12 - 1) = *((_QWORD *)v10 - 1);
        *(_OWORD *)(v12 - 24) = v14;
        *(_OWORD *)(v12 - 40) = v13;
        v12 -= 40;
        v10 -= 40;
      }
      while (v10 != v11);
      v10 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
      operator delete(v10);
  }
}

_QWORD *std::vector<CLMiLoCustomLoiTable::Entry>::__init_with_size[abi:ne180100]<CLMiLoCustomLoiTable::Entry*,CLMiLoCustomLoiTable::Entry*>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<CLMiLoCustomLoiTable::Entry>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_241B13BFC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<CLMiLoCustomLoiTable::Entry>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0x666666666666667)
    std::vector<CLMicroLocationProto::ConfidenceReason>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CLMiLoCustomLoiTable::Entry>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[40 * v4];
  return result;
}

_QWORD *CLMicroLocationBLERssiBridge::CLMicroLocationBLERssiBridge(_QWORD *a1, void *a2, uint64_t a3)
{
  id v5;

  v5 = a2;
  *a1 = &off_2511D9978;
  a1[1] = 0;
  a1[2] = 0;
  a1[3] = v5;
  a1[4] = a3;
  return a1;
}

void CLMicroLocationBLERssiBridge::~CLMicroLocationBLERssiBridge(id *this)
{
  id v2;
  id v3;

  *this = &off_2511D9978;
  objc_msgSend(this[1], "invalidate");
  v2 = this[1];
  this[1] = 0;

  if (this[2] && ULSettings::get<ULSettings::BleNonLeechingScannerEnabled>())
  {
    objc_msgSend(this[2], "invalidate");
    v3 = this[2];
    this[2] = 0;

  }
}

{
  CLMicroLocationBLERssiBridge::~CLMicroLocationBLERssiBridge(this);
  JUMPOUT(0x2426A04D4);
}

uint64_t ULSettings::get<ULSettings::BleNonLeechingScannerEnabled>()
{
  void *v0;
  void *v1;
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;

  +[ULDefaultsSingleton shared](ULDefaultsSingleton, "shared");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "defaultsDictionary");
  v1 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "ULBleNonLeechingScannerEnabled");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "objectForKey:", v2);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  if (v3 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
    v4 = objc_msgSend(v3, "BOOLValue");
  else
    v4 = objc_msgSend(MEMORY[0x24BDBD1C8], "BOOLValue");
  v5 = v4;

  return v5;
}

void sub_241B13DF8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void CLMicroLocationBLERssiBridge::startBleRssiSession(id *this, const CLMicroLocationUtils::BleScanConfiguration *a2)
{
  (*((void (**)(id *))*this + 4))(this);
  CLMicroLocationBLERssiBridge::startDiscovery(this, a2);
}

void CLMicroLocationBLERssiBridge::startDiscovery(id *this, const CLMicroLocationUtils::BleScanConfiguration *a2)
{
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  int v8;
  int v9;

  CLMicroLocationBLERssiBridge::startLeechingScanner(this, a2);
  if (this[2] && ULSettings::get<ULSettings::BleNonLeechingScannerEnabled>())
  {
    if (*((_BYTE *)a2 + 10))
      goto LABEL_9;
    +[ULDefaultsSingleton shared](ULDefaultsSingleton, "shared");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "defaultsDictionary");
    v5 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "ULBleForceScanNearbyInfoV2");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "objectForKey:", v6);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    if (!v7)
      goto LABEL_7;
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
      v8 = objc_msgSend(v7, "BOOLValue");
    else
LABEL_7:
      v8 = objc_msgSend(MEMORY[0x24BDBD1C0], "BOOLValue");
    v9 = v8;

    if (v9)
LABEL_9:
      CLMicroLocationBLERssiBridge::startNonLeechingScanner(this, a2);
  }
}

void sub_241B13F98(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

uint64_t CLMicroLocationBLERssiBridge::stopBleRssiSession(id *this)
{
  NSObject *v2;
  uint8_t v4[16];

  if (onceToken_MicroLocation_Default != -1)
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_246);
  v2 = logObject_MicroLocation_Default;
  if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v4 = 0;
    _os_log_impl(&dword_2419D9000, v2, OS_LOG_TYPE_DEFAULT, "Unregister all BLE scan sessions", v4, 2u);
  }
  return CLMicroLocationBLERssiBridge::stopDiscovery(this);
}

uint64_t CLMicroLocationBLERssiBridge::stopDiscovery(id *this)
{
  uint64_t result;

  objc_msgSend(this[1], "removeAllDiscoveryTypes");
  objc_msgSend(this[1], "setDiscoveryFlags:", 0);
  objc_msgSend(this[1], "setDeviceFilter:", 0);
  result = ULSettings::get<ULSettings::BleNonLeechingScannerEnabled>();
  if ((_DWORD)result)
  {
    objc_msgSend(this[2], "removeAllDiscoveryTypes");
    objc_msgSend(this[2], "setDiscoveryFlags:", 0);
    objc_msgSend(this[2], "setDeviceFilter:", 0);
    return objc_msgSend(this[2], "setOobKeys:", 0);
  }
  return result;
}

void CLMicroLocationBLERssiBridge::onBleBeaconReceived(uint64_t a1, void *a2)
{
  id v3;
  __int16 v4;
  char v5;
  int v6;
  unsigned __int8 v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  NSObject *v11;
  uint64_t v12;
  id v13;
  uint64_t v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  void *v19;
  BOOL v20;
  char v22;
  id v23;
  void *v24;
  id v25;
  void *v26;
  id v27;
  void *v28;
  id v29;
  uint64_t v30;
  id v31;
  CFAbsoluteTime v32;
  void *v33[2];
  uint64_t v34;
  char v35;
  void *v36[2];
  uint64_t v37;
  char v38;
  void *v39[2];
  uint64_t v40;
  char v41;
  _BYTE v42[72];
  char v43;
  id v44;
  CFAbsoluteTime v45;
  _BYTE buf[28];
  __int16 v47;
  uint64_t v48;
  __int16 v49;
  uint64_t v50;
  void *v51;
  int v52;
  __int16 v53;
  int v54;
  __int16 v55;
  uint64_t v56;
  __int16 v57;
  _BYTE v58[10];
  char v59;
  char v60;
  __int128 v61;
  char v62;
  uint64_t v63;

  v63 = *MEMORY[0x24BDAC8D0];
  v3 = a2;
  dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 24));
  v4 = objc_msgSend(v3, "deviceFlags");
  v5 = objc_msgSend(v3, "nearbyInfoV2DecryptedFlags");
  if ((v4 & 0x180) != 0 || (v5 & 4) != 0)
  {
    v6 = objc_msgSend(v3, "discoveryFlags");
    v7 = objc_msgSend(v3, "deviceFlags");
    v8 = objc_msgSend(v3, "deviceFlags");
    if (onceToken_MicroLocationQE_Default != -1)
      dispatch_once(&onceToken_MicroLocationQE_Default, &__block_literal_global_249);
    v9 = *(_QWORD *)&v6 & 0x80040;
    v10 = v7 & 0x80;
    v11 = (id)logObject_MicroLocationQE_Default;
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
    {
      objc_msgSend(v3, "idsDeviceID");
      v31 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
      v12 = objc_msgSend(v31, "UTF8String");
      objc_msgSend(v3, "identifier");
      v30 = a1;
      v13 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
      v14 = objc_msgSend(v13, "UTF8String");
      objc_msgSend(v3, "model");
      v15 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
      v16 = objc_msgSend(v15, "UTF8String");
      objc_msgSend(v3, "bleAdvertisementTimestamp");
      *(_DWORD *)buf = 68291075;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)&buf[8] = 2082;
      *(_QWORD *)&buf[10] = "";
      *(_WORD *)&buf[18] = 2081;
      *(_QWORD *)&buf[20] = v12;
      v47 = 2081;
      v48 = v14;
      v49 = 2081;
      v50 = v16;
      v10 = v7 & 0x80;
      LOWORD(v51) = 1025;
      *(_DWORD *)((char *)&v51 + 2) = v9 != 0;
      HIWORD(v51) = 1025;
      v52 = v10 >> 7;
      v53 = 1025;
      v54 = (v8 >> 15) & 1;
      v55 = 2050;
      v56 = v17;
      v57 = 1026;
      *(_DWORD *)v58 = objc_msgSend(v3, "rssi");
      _os_log_impl(&dword_2419D9000, v11, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Ble Beacon Received\", \"IDS ID\":%{private, location:escape_only}s, \"BT identifier\":%{private, location:escape_only}s, \"Model\":%{private, location:escape_only}s, \"is device nearbyInfo or nearbyAction type?\":%{private}hhd, \"is device same account?\":%{private}hhd, \"is device cloud paired?\":%{private}hhd, \"AdvertisementTimestamp\":\"%{public}.3f\", \"RSSI\":%{public}d}", buf, 0x52u);

      a1 = v30;
    }

    v45 = cl::chrono::CFAbsoluteTimeClock::now();
    v18 = v3;
    v44 = v18;
    CLMicroLocationProtobufHelper::protobufFromNative(&v44, (CLMicroLocationProto::BleLeechedBeacons *)v42);
    if (v43)
      (*(void (**)(_QWORD, CFAbsoluteTime *, _BYTE *))(**(_QWORD **)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), &v45, v42);
    objc_msgSend(v18, "identifier", v30);
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    if (v19)
      v20 = v9 == 0;
    else
      v20 = 1;
    v22 = v20 || v10 == 0;

    if (!(v22 & 1 | ((v8 & 0x8000) == 0)))
    {
      objc_msgSend(v18, "identifier");
      v23 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
      std::string::basic_string[abi:ne180100]<0>(buf, (char *)objc_msgSend(v23, "UTF8String"));
      CLMicroLocationProtobufHelper::uuidFromStdString((uint64_t)buf, (uint64_t)&v61);
      if ((buf[23] & 0x80000000) != 0)
        operator delete(*(void **)buf);

      if (v62)
      {
        objc_msgSend(v18, "name");
        v24 = (void *)objc_claimAutoreleasedReturnValue();
        if (v24)
        {
          objc_msgSend(v18, "name");
          v25 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
          std::string::basic_string[abi:ne180100]<0>(buf, (char *)objc_msgSend(v25, "UTF8String"));
          *(_OWORD *)v39 = *(_OWORD *)buf;
          v40 = *(_QWORD *)&buf[16];
          memset(buf, 0, 24);
          v41 = 1;

        }
        else
        {
          LOBYTE(v39[0]) = 0;
          v41 = 0;
        }

        objc_msgSend(v18, "stableIdentifier");
        v26 = (void *)objc_claimAutoreleasedReturnValue();
        if (v26)
        {
          objc_msgSend(v18, "stableIdentifier");
          v27 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
          std::string::basic_string[abi:ne180100]<0>(buf, (char *)objc_msgSend(v27, "UTF8String"));
          *(_OWORD *)v36 = *(_OWORD *)buf;
          v37 = *(_QWORD *)&buf[16];
          memset(buf, 0, 24);
          v38 = 1;

        }
        else
        {
          LOBYTE(v36[0]) = 0;
          v38 = 0;
        }

        objc_msgSend(v18, "model");
        v28 = (void *)objc_claimAutoreleasedReturnValue();
        if (v28)
        {
          objc_msgSend(v18, "model");
          v29 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
          std::string::basic_string[abi:ne180100]<0>(buf, (char *)objc_msgSend(v29, "UTF8String"));
          *(_OWORD *)v33 = *(_OWORD *)buf;
          v34 = *(_QWORD *)&buf[16];
          memset(buf, 0, 24);
          v35 = 1;

        }
        else
        {
          LOBYTE(v33[0]) = 0;
          v35 = 0;
        }

        v32 = cl::chrono::CFAbsoluteTimeClock::now();
        CLMicroLocationUtils::BleIdentityItem::BleIdentityItem((uint64_t)buf, &v61, (__int128 *)v39, (__int128 *)v36, (__int128 *)v33, &v32);
        (*(void (**)(_QWORD, _BYTE *))(**(_QWORD **)(a1 + 32) + 24))(*(_QWORD *)(a1 + 32), buf);
        if (v60 && v59 < 0)
          operator delete(*(void **)&v58[2]);
        if (BYTE4(v56) && SBYTE3(v56) < 0)
          operator delete(v51);
        if ((_BYTE)v50 && SHIBYTE(v49) < 0)
          operator delete(*(void **)&buf[16]);
        if (v35 && SHIBYTE(v34) < 0)
          operator delete(v33[0]);
        if (v38 && SHIBYTE(v37) < 0)
          operator delete(v36[0]);
        if (v41 && SHIBYTE(v40) < 0)
          operator delete(v39[0]);
      }
    }
    if (v43)
      CLMicroLocationProto::BleLeechedBeacons::~BleLeechedBeacons((CLMicroLocationProto::BleLeechedBeacons *)v42);

  }
}

void sub_241B14630(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,char a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,char a46,void *a47,uint64_t a48,void *a49,uint64_t a50,int a51,__int16 a52,char a53,char a54)
{
  void *v54;
  void *v55;

  if (a26 && a25 < 0)
    operator delete(__p);
  if (a33 && a32 < 0)
    operator delete(a27);
  if (a46)
    CLMicroLocationProto::BleLeechedBeacons::~BleLeechedBeacons((CLMicroLocationProto::BleLeechedBeacons *)&a35);

  _Unwind_Resume(a1);
}

void CLMicroLocationUtils::BleIdentityItem::~BleIdentityItem(void **this)
{
  if (*((_BYTE *)this + 104) && *((char *)this + 103) < 0)
    operator delete(this[10]);
  if (*((_BYTE *)this + 72) && *((char *)this + 71) < 0)
    operator delete(this[6]);
  if (*((_BYTE *)this + 40))
  {
    if (*((char *)this + 39) < 0)
      operator delete(this[2]);
  }
}

void CLMicroLocationBLERssiBridge::startLeechingScanner(id *this, const CLMicroLocationUtils::BleScanConfiguration *a2)
{
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  char v8;
  char v9;
  int v10;
  uint64_t v11;
  id v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  int v17;
  int v18;
  void *v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t *v22;
  void *v23;
  NSObject *v24;
  NSObject *v25;
  NSObject *v26;
  NSObject *v27;
  int v28;
  int v29;
  __int16 v30;
  const char *v31;
  __int16 v32;
  void *v33;
  uint64_t v34;

  v34 = *MEMORY[0x24BDAC8D0];
  if (*((_BYTE *)a2 + 9) || *((_QWORD *)a2 + 3) != *((_QWORD *)a2 + 4))
    goto LABEL_8;
  +[ULDefaultsSingleton shared](ULDefaultsSingleton, "shared");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "defaultsDictionary");
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "ULBleForceRequestedType15Type16ScanWhenDeviceFilterIsEmpty");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "objectForKey:", v6);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v7)
    goto LABEL_6;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v8 = objc_msgSend(v7, "BOOLValue");
  else
LABEL_6:
    v8 = objc_msgSend(MEMORY[0x24BDBD1C0], "BOOLValue");
  v9 = v8;

  if ((v9 & 1) != 0)
  {
LABEL_8:
    objc_msgSend(this[1], "setDiscoveryFlags:", 524352);
    objc_msgSend(this[1], "setLabel:", CFSTR("CLMiLoLeeching"));
    v10 = *((unsigned __int8 *)a2 + 9);
    v11 = objc_msgSend(this[1], "discoveryFlags");
    v12 = this[1];
    if (v10)
    {
      objc_msgSend(v12, "setDiscoveryFlags:", v11 | 0x100200000000);
      objc_msgSend(this[1], "setUseCase:", 524291);
    }
    else
    {
      objc_msgSend(v12, "setDiscoveryFlags:", v11 | 0x1000000000);
      objc_msgSend(this[1], "setUseCase:", 524290);
      +[ULDefaultsSingleton shared](ULDefaultsSingleton, "shared");
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v13, "defaultsDictionary");
      v14 = (void *)objc_claimAutoreleasedReturnValue();

      objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "ULBleType15andType16DeviceFilterIsSet");
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v14, "objectForKey:", v15);
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      if (v16 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
        v17 = objc_msgSend(v16, "BOOLValue");
      else
        v17 = objc_msgSend(MEMORY[0x24BDBD1C8], "BOOLValue");
      v18 = v17;

      if (v18)
      {
        if (*((_QWORD *)a2 + 3) == *((_QWORD *)a2 + 4))
        {
          if (onceToken_MicroLocation_Default != -1)
            dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_246);
          v26 = logObject_MicroLocation_Default;
          if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_ERROR))
          {
            v28 = 68289026;
            v29 = 0;
            v30 = 2082;
            v31 = "";
            _os_log_impl(&dword_2419D9000, v26, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"scanner type 15, 16 deviceFilter is empty for initiated scan\"}", (uint8_t *)&v28, 0x12u);
          }
          if (onceToken_MicroLocation_Default != -1)
            dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_246);
          v27 = logObject_MicroLocation_Default;
          if (os_signpost_enabled((os_log_t)logObject_MicroLocation_Default))
          {
            v28 = 68289026;
            v29 = 0;
            v30 = 2082;
            v31 = "";
            _os_signpost_emit_with_name_impl(&dword_2419D9000, v27, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "scanner type 15, 16 deviceFilter is empty for initiated scan", "{\"msg%{public}.0s\":\"scanner type 15, 16 deviceFilter is empty for initiated scan\"}", (uint8_t *)&v28, 0x12u);
          }
        }
        else
        {
          objc_msgSend(MEMORY[0x24BDBCEB8], "array");
          v19 = (void *)objc_claimAutoreleasedReturnValue();
          v20 = (uint64_t *)*((_QWORD *)a2 + 3);
          v21 = (uint64_t *)*((_QWORD *)a2 + 4);
          while (v20 != v21)
          {
            v22 = v20;
            if (*((char *)v20 + 23) < 0)
              v22 = (uint64_t *)*v20;
            objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", v22);
            v23 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v19, "addObject:", v23);

            v20 += 3;
          }
          if (onceToken_MicroLocation_Default != -1)
            dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_246);
          v24 = logObject_MicroLocation_Default;
          if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
          {
            v28 = 68289282;
            v29 = 0;
            v30 = 2082;
            v31 = "";
            v32 = 2114;
            v33 = v19;
            _os_log_impl(&dword_2419D9000, v24, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"scanner type 15, 16 deviceFilter is\", \"deviceFilter\":%{public, location:escape_only}@}", (uint8_t *)&v28, 0x1Cu);
          }
          objc_msgSend(this[1], "setDeviceFilter:", v19);

        }
      }
      if (ULSettings::get<ULSettings::BleScanFlagRssiIsSet>())
        objc_msgSend(this[1], "setDiscoveryFlags:", objc_msgSend(this[1], "discoveryFlags") | 0x200000000);
      objc_msgSend(this[1], "setBleScanRate:", ULSettings::get<ULSettings::BleActiveScanRate>());
    }
  }
  else
  {
    if (onceToken_MicroLocation_Default != -1)
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_246);
    v25 = logObject_MicroLocation_Default;
    if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
    {
      v28 = 68289026;
      v29 = 0;
      v30 = 2082;
      v31 = "";
      _os_log_impl(&dword_2419D9000, v25, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"will not conduct nearbyAction, nearbyInfo requested scan because device filter is empty\"}", (uint8_t *)&v28, 0x12u);
    }
  }
}

void sub_241B14D4C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

uint64_t CLMicroLocationBLERssiBridge::startNonLeechingScanner(id *this, const CLMicroLocationUtils::BleScanConfiguration *a2)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  char v6;
  char v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  _BYTE *v18;
  id v19;
  const char *v20;
  void *v21;
  NSObject *v22;
  uint64_t v23;
  NSObject *v24;
  NSObject *v25;
  NSObject *v26;
  id v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  uint64_t v32;
  NSObject *v33;
  uint64_t v35;
  id obj;
  void *v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  _BYTE v44[128];
  uint64_t buf;
  __int16 v46;
  const char *v47;
  __int16 v48;
  uint64_t v49;
  uint64_t v50;

  v50 = *MEMORY[0x24BDAC8D0];
  if (!*((_BYTE *)a2 + 9))
    goto LABEL_56;
  +[ULDefaultsSingleton shared](ULDefaultsSingleton, "shared");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "defaultsDictionary");
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "ULBleNonLeechingBackgroundScanEnabled");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "objectForKey:", v4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v5)
    goto LABEL_5;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v6 = objc_msgSend(v5, "BOOLValue");
  else
LABEL_5:
    v6 = objc_msgSend(MEMORY[0x24BDBD1C0], "BOOLValue");
  v7 = v6;

  if ((v7 & 1) == 0)
  {
    if (onceToken_MicroLocation_Default != -1)
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_246);
    v33 = logObject_MicroLocation_Default;
    if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
    {
      buf = 68289026;
      v46 = 2082;
      v47 = "";
      _os_log_impl(&dword_2419D9000, v33, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"BleNonLeechingBackgroundScanEnabled is disabled\"}", (uint8_t *)&buf, 0x12u);
    }
    objc_msgSend(this[2], "removeAllDiscoveryTypes");
    objc_msgSend(this[2], "setDiscoveryFlags:", 0);
    objc_msgSend(this[2], "setDeviceFilter:", 0);
    return objc_msgSend(this[2], "setOobKeys:", 0);
  }
  else
  {
LABEL_56:
    if (ULSettings::get<ULSettings::BleScanFlagRssiIsSet>())
      objc_msgSend(this[2], "setDiscoveryFlags:", 0x200000000);
    objc_msgSend(this[2], "addDiscoveryType:", 19);
    +[ULDefaultsSingleton shared](ULDefaultsSingleton, "shared");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "defaultsDictionary");
    v9 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "ULBleType22DeviceFilterIsSet");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "objectForKey:", v10);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    if (v11 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
      v12 = objc_msgSend(v11, "BOOLValue");
    else
      v12 = objc_msgSend(MEMORY[0x24BDBD1C8], "BOOLValue");
    v13 = v12;

    if (v13)
    {
      objc_msgSend(MEMORY[0x24BDBCEB8], "array");
      v39 = (void *)objc_claimAutoreleasedReturnValue();
      v42 = 0u;
      v43 = 0u;
      v40 = 0u;
      v41 = 0u;
      obj = *((id *)a2 + 2);
      v14 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v40, v44, 16);
      if (v14)
      {
        v15 = *(_QWORD *)v41;
        do
        {
          v16 = 0;
          do
          {
            if (*(_QWORD *)v41 != v15)
              objc_enumerationMutation(obj);
            objc_msgSend(*(id *)(*((_QWORD *)&v40 + 1) + 8 * v16), "btAddressData");
            v17 = (id)objc_claimAutoreleasedReturnValue();
            if (objc_msgSend(v17, "length") == 7)
            {
              v18 = (_BYTE *)objc_msgSend(objc_retainAutorelease(v17), "bytes");
              v19 = objc_alloc(MEMORY[0x24BDD17C8]);
              v20 = "Random";
              if ((*v18 & 1) == 0)
                v20 = "Public";
              v21 = (void *)objc_msgSend(v19, "initWithFormat:", CFSTR("%s %02X:%02X:%02X:%02X:%02X:%02X"), v20, v18[1], v18[2], v18[3], v18[4], v18[5], v18[6]);
              if (onceToken_MicroLocation_Default != -1)
                dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_246);
              v22 = (id)logObject_MicroLocation_Default;
              if (os_log_type_enabled(v22, OS_LOG_TYPE_DEBUG))
              {
                v23 = objc_msgSend(objc_retainAutorelease(v21), "UTF8String");
                buf = 68289282;
                v46 = 2082;
                v47 = "";
                v48 = 2082;
                v49 = v23;
                _os_log_impl(&dword_2419D9000, v22, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"_nsDataToBTAddressString\", \"address\":%{public, location:escape_only}s}", (uint8_t *)&buf, 0x1Cu);
              }

            }
            else
            {
              if (onceToken_MicroLocation_Default != -1)
                dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_246);
              v24 = logObject_MicroLocation_Default;
              if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_ERROR))
              {
                buf = 68289282;
                v46 = 2082;
                v47 = "";
                v48 = 2114;
                v49 = (uint64_t)v17;
                _os_log_impl(&dword_2419D9000, v24, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"Invalid Address data\", \"address\":%{public, location:escape_only}@}", (uint8_t *)&buf, 0x1Cu);
                if (onceToken_MicroLocation_Default != -1)
                  dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_246);
              }
              v25 = logObject_MicroLocation_Default;
              if (os_signpost_enabled((os_log_t)logObject_MicroLocation_Default))
              {
                buf = 68289282;
                v46 = 2082;
                v47 = "";
                v48 = 2114;
                v49 = (uint64_t)v17;
                _os_signpost_emit_with_name_impl(&dword_2419D9000, v25, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Invalid Address data", "{\"msg%{public}.0s\":\"Invalid Address data\", \"address\":%{public, location:escape_only}@}", (uint8_t *)&buf, 0x1Cu);
              }
              v21 = 0;
            }

            objc_msgSend(v39, "addObject:", v21);
            ++v16;
          }
          while (v14 != v16);
          v14 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v40, v44, 16);
        }
        while (v14);
      }

      objc_msgSend(this[2], "setOobKeys:", *((_QWORD *)a2 + 2));
      objc_msgSend(this[2], "setDeviceFilter:", v39);
      if (onceToken_MicroLocation_Default != -1)
        dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_246);
      v26 = logObject_MicroLocation_Default;
      if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
      {
        buf = 68289282;
        v46 = 2082;
        v47 = "";
        v48 = 2114;
        v49 = (uint64_t)v39;
        _os_log_impl(&dword_2419D9000, v26, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"scanner type 22 deviceFilter is\", \"deviceFilter\":%{public, location:escape_only}@}", (uint8_t *)&buf, 0x1Cu);
      }

    }
    objc_msgSend(this[2], "setLabel:", CFSTR("CLMiLoNonLeeching"));
    v27 = this[2];
    if (*((_BYTE *)a2 + 9))
    {
      +[ULDefaultsSingleton shared](ULDefaultsSingleton, "shared");
      v28 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v28, "defaultsDictionary");
      v29 = (void *)objc_claimAutoreleasedReturnValue();

      objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "ULBleBackgroundScanRate");
      v30 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v29, "objectForKey:", v30);
      v31 = (void *)objc_claimAutoreleasedReturnValue();
      if (v31 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
        v32 = objc_msgSend(v31, "intValue");
      else
        v32 = objc_msgSend(&unk_2511EDE70, "intValue");
      v35 = v32;

      return objc_msgSend(v27, "setBleScanRate:", v35);
    }
    else
    {
      return objc_msgSend(v27, "setBleScanRate:", ULSettings::get<ULSettings::BleActiveScanRate>());
    }
  }
}

void sub_241B15544(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

uint64_t CLMicroLocationBLERssiBridge::activateDiscoveriesIfNeeded(uint64_t this)
{
  uint64_t v1;
  id v2;
  void *v3;
  uint64_t v4;
  void *v5;
  id v6;
  void *v7;
  uint64_t v8;
  void *v9;
  _QWORD v10[5];
  _QWORD v11[5];
  _QWORD v12[5];
  _QWORD v13[5];

  v1 = this;
  if (!*(_QWORD *)(this + 8))
  {
    v2 = objc_alloc_init(MEMORY[0x24BDBB250]);
    v3 = *(void **)(v1 + 8);
    *(_QWORD *)(v1 + 8) = v2;

    objc_msgSend(*(id *)(v1 + 8), "setDispatchQueue:", *(_QWORD *)(v1 + 24));
    objc_msgSend(*(id *)(v1 + 8), "setDiscoveryFlags:", 0);
    v4 = MEMORY[0x24BDAC760];
    v13[0] = MEMORY[0x24BDAC760];
    v13[1] = 3221225472;
    v13[2] = ___ZN28CLMicroLocationBLERssiBridge27activateDiscoveriesIfNeededEv_block_invoke;
    v13[3] = &__block_descriptor_40_e18_v16__0__CBDevice_8l;
    v13[4] = v1;
    objc_msgSend(*(id *)(v1 + 8), "setDeviceFoundHandler:", v13);
    objc_msgSend(*(id *)(v1 + 8), "setDeviceLostHandler:", &__block_literal_global_89);
    v5 = *(void **)(v1 + 8);
    v12[0] = v4;
    v12[1] = 3221225472;
    v12[2] = ___ZN28CLMicroLocationBLERssiBridge27activateDiscoveriesIfNeededEv_block_invoke_5;
    v12[3] = &__block_descriptor_40_e17_v16__0__NSError_8l;
    v12[4] = v1;
    this = objc_msgSend(v5, "activateWithCompletion:", v12);
  }
  if (!*(_QWORD *)(v1 + 16))
  {
    this = ULSettings::get<ULSettings::BleNonLeechingScannerEnabled>();
    if ((_DWORD)this)
    {
      v6 = objc_alloc_init(MEMORY[0x24BDBB250]);
      v7 = *(void **)(v1 + 16);
      *(_QWORD *)(v1 + 16) = v6;

      objc_msgSend(*(id *)(v1 + 16), "setDispatchQueue:", *(_QWORD *)(v1 + 24));
      objc_msgSend(*(id *)(v1 + 16), "setDiscoveryFlags:", 0);
      objc_msgSend(*(id *)(v1 + 16), "setUseCase:", 524290);
      v8 = MEMORY[0x24BDAC760];
      v11[0] = MEMORY[0x24BDAC760];
      v11[1] = 3221225472;
      v11[2] = ___ZN28CLMicroLocationBLERssiBridge27activateDiscoveriesIfNeededEv_block_invoke_12;
      v11[3] = &__block_descriptor_40_e18_v16__0__CBDevice_8l;
      v11[4] = v1;
      objc_msgSend(*(id *)(v1 + 16), "setDeviceFoundHandler:", v11);
      objc_msgSend(*(id *)(v1 + 16), "setDeviceLostHandler:", &__block_literal_global_14);
      v9 = *(void **)(v1 + 16);
      v10[0] = v8;
      v10[1] = 3221225472;
      v10[2] = ___ZN28CLMicroLocationBLERssiBridge27activateDiscoveriesIfNeededEv_block_invoke_15;
      v10[3] = &__block_descriptor_40_e17_v16__0__NSError_8l;
      v10[4] = v1;
      return objc_msgSend(v9, "activateWithCompletion:", v10);
    }
  }
  return this;
}

void ___ZN28CLMicroLocationBLERssiBridge27activateDiscoveriesIfNeededEv_block_invoke(uint64_t a1, void *a2)
{
  uint64_t v3;
  id v4;

  v4 = a2;
  v3 = *(_QWORD *)(a1 + 32);
  if (*(_QWORD *)(v3 + 8))
    CLMicroLocationBLERssiBridge::onBleBeaconReceived(v3, v4);

}

void sub_241B15824(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void ___ZN28CLMicroLocationBLERssiBridge27activateDiscoveriesIfNeededEv_block_invoke_2(uint64_t a1, void *a2)
{
  id v2;
  NSObject *v3;
  _DWORD v4[2];
  __int16 v5;
  const char *v6;
  __int16 v7;
  id v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v2 = a2;
  if (onceToken_MicroLocation_Default != -1)
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_246);
  v3 = logObject_MicroLocation_Default;
  if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEBUG))
  {
    v4[0] = 68289282;
    v4[1] = 0;
    v5 = 2082;
    v6 = "";
    v7 = 2114;
    v8 = v2;
    _os_log_impl(&dword_2419D9000, v3, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Device lost\", \"device:\":%{public, location:escape_only}@}", (uint8_t *)v4, 0x1Cu);
  }

}

void ___ZN28CLMicroLocationBLERssiBridge27activateDiscoveriesIfNeededEv_block_invoke_5(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  void *v5;
  CLMicroLocationErrorHandling *v6;
  NSString *v7;
  NSObject *v8;
  uint8_t buf[4];
  int v10;
  __int16 v11;
  const char *v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v3 = a2;
  if (v3)
  {
    v4 = *(_QWORD *)(a1 + 32);
    objc_msgSend(*(id *)(v4 + 8), "invalidate");
    v5 = *(void **)(v4 + 8);
    *(_QWORD *)(v4 + 8) = 0;

    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("%@ %@"), CFSTR("CBDiscovery activation error:"), v3);
    v6 = (CLMicroLocationErrorHandling *)objc_claimAutoreleasedReturnValue();
    CLMicroLocationErrorHandling::reportError(v6, v7);

  }
  else
  {
    if (onceToken_MicroLocation_Default != -1)
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_246);
    v8 = logObject_MicroLocation_Default;
    if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 68289026;
      v10 = 0;
      v11 = 2082;
      v12 = "";
      _os_log_impl(&dword_2419D9000, v8, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"CBDiscovery leeching supported activated successfully\"}", buf, 0x12u);
    }
  }

}

void sub_241B15A5C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  v3 = v2;

  _Unwind_Resume(a1);
}

void ___ZN28CLMicroLocationBLERssiBridge27activateDiscoveriesIfNeededEv_block_invoke_12(uint64_t a1, void *a2)
{
  uint64_t v3;
  id v4;

  v4 = a2;
  v3 = *(_QWORD *)(a1 + 32);
  if (*(_QWORD *)(v3 + 16))
    CLMicroLocationBLERssiBridge::onBleBeaconReceived(v3, v4);

}

void sub_241B15ACC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void ___ZN28CLMicroLocationBLERssiBridge27activateDiscoveriesIfNeededEv_block_invoke_2_13(uint64_t a1, void *a2)
{
  id v2;
  NSObject *v3;
  _DWORD v4[2];
  __int16 v5;
  const char *v6;
  __int16 v7;
  id v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v2 = a2;
  if (onceToken_MicroLocation_Default != -1)
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_246);
  v3 = logObject_MicroLocation_Default;
  if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEBUG))
  {
    v4[0] = 68289282;
    v4[1] = 0;
    v5 = 2082;
    v6 = "";
    v7 = 2114;
    v8 = v2;
    _os_log_impl(&dword_2419D9000, v3, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Device lost\", \"device:\":%{public, location:escape_only}@}", (uint8_t *)v4, 0x1Cu);
  }

}

void ___ZN28CLMicroLocationBLERssiBridge27activateDiscoveriesIfNeededEv_block_invoke_15(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  void *v5;
  CLMicroLocationErrorHandling *v6;
  NSString *v7;
  NSObject *v8;
  uint8_t buf[4];
  int v10;
  __int16 v11;
  const char *v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v3 = a2;
  if (v3)
  {
    v4 = *(_QWORD *)(a1 + 32);
    objc_msgSend(*(id *)(v4 + 16), "invalidate");
    v5 = *(void **)(v4 + 16);
    *(_QWORD *)(v4 + 16) = 0;

    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("%@ %@"), CFSTR("CBDiscovery activation error:"), v3);
    v6 = (CLMicroLocationErrorHandling *)objc_claimAutoreleasedReturnValue();
    CLMicroLocationErrorHandling::reportError(v6, v7);

  }
  else
  {
    if (onceToken_MicroLocation_Default != -1)
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_246);
    v8 = logObject_MicroLocation_Default;
    if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289026;
      v10 = 0;
      v11 = 2082;
      v12 = "";
      _os_log_impl(&dword_2419D9000, v8, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CBDiscovery leeching not supported activated successfully\"}", buf, 0x12u);
    }
  }

}

void sub_241B15D04(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  v3 = v2;

  _Unwind_Resume(a1);
}

uint64_t ULSettings::get<ULSettings::BleScanFlagRssiIsSet>()
{
  void *v0;
  void *v1;
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;

  +[ULDefaultsSingleton shared](ULDefaultsSingleton, "shared");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "defaultsDictionary");
  v1 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "ULBleScanFlagRssiIsSet");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "objectForKey:", v2);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  if (v3 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
    v4 = objc_msgSend(v3, "BOOLValue");
  else
    v4 = objc_msgSend(MEMORY[0x24BDBD1C8], "BOOLValue");
  v5 = v4;

  return v5;
}

void sub_241B15DF0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

uint64_t ULSettings::get<ULSettings::BleActiveScanRate>()
{
  void *v0;
  void *v1;
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;

  +[ULDefaultsSingleton shared](ULDefaultsSingleton, "shared");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "defaultsDictionary");
  v1 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "ULBleActiveScanRate");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "objectForKey:", v2);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  if (v3 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
    v4 = objc_msgSend(v3, "intValue");
  else
    v4 = objc_msgSend(&unk_2511EDE58, "intValue");
  v5 = v4;

  return v5;
}

void sub_241B15EEC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void ___ZL45_CLLogObjectForCategory_MicroLocation_Defaultv_block_invoke_70()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.MicroLocation", "MicroLocation");
  v1 = (void *)logObject_MicroLocation_Default;
  logObject_MicroLocation_Default = (uint64_t)v0;

}

void ___ZL47_CLLogObjectForCategory_MicroLocationQE_Defaultv_block_invoke_3()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.MicroLocation", "MicroLocationQE");
  v1 = (void *)logObject_MicroLocationQE_Default;
  logObject_MicroLocationQE_Default = (uint64_t)v0;

}

void CLMicroLocationClientUtils::getClientIdAndServiceUuid(const void **a1@<X0>, uint64_t a2@<X1>, std::string *a3@<X8>)
{
  size_t v6;
  std::string *p_p;
  const void *v8;
  char *v9;
  std::string *v10;
  std::string __p;

  if (*((char *)a1 + 23) >= 0)
    v6 = *((unsigned __int8 *)a1 + 23);
  else
    v6 = (size_t)a1[1];
  p_p = &__p;
  std::string::basic_string[abi:ne180100]((uint64_t)&__p, v6 + 2);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if (v6)
  {
    if (*((char *)a1 + 23) >= 0)
      v8 = a1;
    else
      v8 = *a1;
    memmove(p_p, v8, v6);
  }
  strcpy((char *)p_p + v6, "--");
  v9 = (char *)operator new(0x28uLL);
  *(_QWORD *)(v9 + 29) = 0;
  *(_OWORD *)v9 = 0u;
  *((_OWORD *)v9 + 1) = 0u;
  boost::uuids::to_chars<char *>(a2, v9);
  v10 = std::string::append(&__p, v9, 0x24uLL);
  *a3 = *v10;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  operator delete(v9);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_241B16090(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  void *v14;

  operator delete(v14);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void CLMicroLocationClientUtils::getBoostServiceUuidFromClientIdAndServiceUuid(const std::string *a1@<X0>, _BYTE *a2@<X8>)
{
  char *size;
  std::string::size_type v5;
  void **v6;
  int64_t v7;
  int64_t v8;
  char *v9;
  int v10;
  void *v11;
  char *v12;
  char *v13;
  char *v14;
  std::string v15;
  std::string __p;
  void *v17[2];
  unsigned __int8 v18;
  char v19;

  std::string::basic_string[abi:ne180100]<0>(v17, "--");
  size = (char *)HIBYTE(a1->__r_.__value_.__r.__words[2]);
  if ((char)size >= 0)
    v5 = (std::string::size_type)a1;
  else
    v5 = a1->__r_.__value_.__r.__words[0];
  if ((v18 & 0x80u) == 0)
    v6 = v17;
  else
    v6 = (void **)v17[0];
  if ((v18 & 0x80u) == 0)
    v7 = v18;
  else
    v7 = (int64_t)v17[1];
  if (v7)
  {
    if ((char)size < 0)
      size = (char *)a1->__r_.__value_.__l.__size_;
    if ((uint64_t)size >= v7)
    {
      v9 = &size[v5];
      v10 = *(char *)v6;
      v11 = (void *)v5;
      do
      {
        v12 = &size[-v7];
        if (v12 == (char *)-1)
          break;
        v13 = (char *)memchr(v11, v10, (size_t)(v12 + 1));
        if (!v13)
          break;
        v14 = v13;
        if (!memcmp(v13, v6, v7))
        {
          if (v14 != v9)
          {
            v8 = (int64_t)&v14[-v5];
            if (&v14[-v5] != (char *)-1)
              goto LABEL_16;
          }
          break;
        }
        v11 = v14 + 1;
        size = (char *)(v9 - (v14 + 1));
      }
      while ((uint64_t)size >= v7);
    }
    *a2 = 0;
    a2[16] = 0;
  }
  else
  {
    v8 = 0;
LABEL_16:
    std::string::basic_string(&v15, a1, v8 + v7, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v19);
    __p = v15;
    CLMicroLocationProtobufHelper::uuidFromStdString((uint64_t)&__p, (uint64_t)a2);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  if ((char)v18 < 0)
    operator delete(v17[0]);
}

void sub_241B16224(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a18 < 0)
    operator delete(__p);
  if (a25 < 0)
    operator delete(a20);
  _Unwind_Resume(exception_object);
}

id CLMicroLocationClientUtils::getNSServiceUUIDFromClientIdAndServiceUUID(CLMicroLocationClientUtils *this, NSString *a2)
{
  CLMicroLocationClientUtils *v2;
  void *v3;
  void *v4;
  id v5;
  void *v6;
  void *v7;

  v2 = this;
  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "--");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  -[CLMicroLocationClientUtils componentsSeparatedByString:](v2, "componentsSeparatedByString:", v3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  if ((unint64_t)objc_msgSend(v4, "count") < 2)
  {
    v7 = 0;
  }
  else
  {
    v5 = objc_alloc(MEMORY[0x24BDD1880]);
    objc_msgSend(v4, "lastObject");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v7 = (void *)objc_msgSend(v5, "initWithUUIDString:", v6);

  }
  return v7;
}

void sub_241B1630C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void CLMicroLocationClientUtils::getClientIdFromClientIdAndServiceUuid(const std::string *a1@<X0>, std::string *a2@<X8>)
{
  void **v4;
  char *size;
  std::string::size_type v6;
  int64_t v7;
  std::string::size_type v8;
  char *v9;
  int v10;
  void *v11;
  char *v12;
  char *v13;
  char *v14;
  std::string v15;
  void *__p[2];
  unsigned __int8 v17;
  char v18;

  v4 = __p;
  std::string::basic_string[abi:ne180100]<0>(__p, "--");
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  size = (char *)HIBYTE(a1->__r_.__value_.__r.__words[2]);
  if ((char)size >= 0)
    v6 = (std::string::size_type)a1;
  else
    v6 = a1->__r_.__value_.__r.__words[0];
  if ((v17 & 0x80u) == 0)
  {
    v7 = v17;
  }
  else
  {
    v4 = (void **)__p[0];
    v7 = (int64_t)__p[1];
  }
  if (v7)
  {
    if ((char)size < 0)
      size = (char *)a1->__r_.__value_.__l.__size_;
    if ((uint64_t)size >= v7)
    {
      v9 = &size[v6];
      v10 = *(char *)v4;
      v11 = (void *)v6;
      do
      {
        v12 = &size[-v7];
        if (v12 == (char *)-1)
          break;
        v13 = (char *)memchr(v11, v10, (size_t)(v12 + 1));
        if (!v13)
          break;
        v14 = v13;
        if (!memcmp(v13, v4, v7))
        {
          if (v14 != v9)
          {
            v8 = (std::string::size_type)&v14[-v6];
            if (&v14[-v6] != (char *)-1)
              goto LABEL_13;
          }
          break;
        }
        v11 = v14 + 1;
        size = (char *)(v9 - (v14 + 1));
      }
      while ((uint64_t)size >= v7);
    }
    std::string::operator=(a2, a1);
  }
  else
  {
    v8 = 0;
LABEL_13:
    std::string::basic_string(&v15, a1, 0, v8, (std::allocator<char> *)&v18);
    *a2 = v15;
  }
  if ((char)v17 < 0)
    operator delete(__p[0]);
}

void sub_241B16494(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void CLMicroLocationClientUtils::requireFingerprintsForTriggerUuids(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  id v4;
  void *v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  NSObject *v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  __int128 *v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  NSObject *v30;
  _OWORD *v31;
  void *v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  __int128 v36;
  void *v39;
  __int128 v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void **v46;
  char v47;
  _BYTE buf[40];
  uint64_t v49;
  _OWORD v50[2];
  _BYTE v51[40];
  uint64_t v52;
  void *v53;
  void *v54;
  __int128 v55;
  char v56;
  __int128 v57;
  __int128 *v58;
  _QWORD v59[3];
  _QWORD *v60;
  _QWORD v61[3];
  _QWORD *v62;
  char v63;
  uint64_t v64;

  v64 = *MEMORY[0x24BDAC8D0];
  v4 = *(id *)(a1 + 88);
  v5 = v4;
  if (v4)
  {
    objc_msgSend(v4, "fetchRecordingEventsFromTriggerUUIDs:", a2);
  }
  else
  {
    v43 = 0;
    v44 = 0;
    v45 = 0;
  }

  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_DWORD *)(a3 + 32) = 1065353216;
  if (onceToken_MicroLocation_Default != -1)
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_90);
  v6 = logObject_MicroLocation_Default;
  if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
  {
    v7 = (uint64_t)(a2[1] - *a2) >> 4;
    *(_DWORD *)buf = 68289538;
    *(_DWORD *)&buf[4] = 0;
    *(_WORD *)&buf[8] = 2082;
    *(_QWORD *)&buf[10] = "";
    *(_WORD *)&buf[18] = 2050;
    *(_QWORD *)&buf[20] = v7;
    *(_WORD *)&buf[28] = 2050;
    *(_QWORD *)&buf[30] = 0xEF7BDEF7BDEF7BDFLL * ((v44 - v43) >> 3);
    _os_log_impl(&dword_2419D9000, v6, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLMicroLocationClientUtils, requireFingerprintsForTriggerUuids, recording entries found for trigger uuids\", \"NumTriggerUUID\":%{public}lu, \"NumEntries\":%{public}lu}", buf, 0x26u);
  }
  v8 = v44;
  if (v43 != v44)
  {
    v9 = v43 + 224;
    *((_QWORD *)&v10 + 1) = 0x8000000000000028;
    *(_QWORD *)&v10 = 68289282;
    v36 = v10;
    while (1)
    {
      if (!*(_BYTE *)(v9 + 16))
      {
        if (onceToken_MicroLocation_Default != -1)
          dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_90);
        v18 = logObject_MicroLocation_Default;
        if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_2419D9000, v18, OS_LOG_TYPE_ERROR, "Error: recording entry does not have trigger UUID", buf, 2u);
        }
        goto LABEL_64;
      }
      v61[0] = &off_2511D63B8;
      v61[1] = CLMicroLocationFingerprintConfiguration::getRecordingConfigurationFromSettings;
      v62 = v61;
      v63 = 1;
      if (*(_DWORD *)(v9 - 152) == 1)
        std::function<CLMicroLocationFingerprintConfiguration ()(void)>::operator=<CLMicroLocationFingerprintConfiguration (&)(void),void>(v61, (uint64_t)CLMicroLocationFingerprintConfiguration::getLocalizingConfigurationFromSettings);
      +[ULDefaultsSingleton shared](ULDefaultsSingleton, "shared", v36);
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v11, "defaultsDictionary");
      v12 = (void *)objc_claimAutoreleasedReturnValue();

      objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "ULFingerprintDataSource");
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v12, "objectForKey:", v13);
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      if (v14 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
        v15 = objc_msgSend(v14, "unsignedIntValue");
      else
        v15 = objc_msgSend(&unk_2511EDEA0, "unsignedIntValue");
      v16 = v15;

      v59[0] = &off_2511D9AD8;
      v60 = v59;
      if (!v63)
        std::__throw_bad_optional_access[abi:ne180100]();
      v17 = (uint64_t)v62;
      if (!v62)
        goto LABEL_21;
      if (v62 != v61)
        break;
      v58 = &v57;
      (*(void (**)(uint64_t, _QWORD *))(v61[0] + 24))((uint64_t)v61, &v57);
LABEL_27:
      v19 = *(_OWORD *)(v9 - 224);
      *(_QWORD *)&buf[16] = *(_QWORD *)(v9 - 208);
      *(_OWORD *)buf = v19;
      if (*(char *)(v9 - 177) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)&buf[24], *(const std::string::value_type **)(v9 - 200), *(_QWORD *)(v9 - 192));
      }
      else
      {
        v20 = *(_OWORD *)(v9 - 200);
        v49 = *(_QWORD *)(v9 - 184);
        *(_OWORD *)&buf[24] = v20;
      }
      v21 = *(_OWORD *)(v9 - 176);
      *(_OWORD *)((char *)v50 + 12) = *(_OWORD *)(v9 - 164);
      v50[0] = v21;
      CLMicroLocationProto::RecordingEvent::RecordingEvent((CLMicroLocationProto::RecordingEvent *)v51, (const CLMicroLocationProto::RecordingEvent *)(v9 - 144));
      v22 = *(_OWORD *)v9;
      v56 = *(_BYTE *)(v9 + 16);
      v55 = v22;
      v40 = 0uLL;
      v39 = 0;
      v46 = &v39;
      v47 = 0;
      v39 = operator new(0xF8uLL);
      *(_QWORD *)&v40 = v39;
      *((_QWORD *)&v40 + 1) = (char *)v39 + 248;
      *(_QWORD *)&v40 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<CLMicroLocationRecordingEventsTable::Entry>,CLMicroLocationRecordingEventsTable::Entry const*,CLMicroLocationRecordingEventsTable::Entry const*,CLMicroLocationRecordingEventsTable::Entry*>((uint64_t)&v40 + 8, (__int128 *)buf, &v57, (uint64_t)v39);
      CLMicroLocationFingerprintDataSources::create(v16, (uint64_t)v59, (uint64_t)&v57, (uint64_t)&v39, a1, &v41);
      CLMicroLocationFingerprintVector::CLMicroLocationFingerprintVector(&v42, &v41);
      v23 = v41;
      v41 = 0;
      if (v23)
        (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
      v46 = &v39;
      std::vector<CLMicroLocationRecordingEventsTable::Entry>::__destroy_vector::operator()[abi:ne180100](&v46);
      CLMicroLocationProto::RecordingEvent::~RecordingEvent((CLMicroLocationProto::RecordingEvent *)v51);
      if (SHIBYTE(v49) < 0)
        operator delete(*(void **)&buf[24]);
      v24 = v58;
      if (v58 == &v57)
      {
        v24 = &v57;
        v25 = 4;
      }
      else
      {
        if (!v58)
          goto LABEL_39;
        v25 = 5;
      }
      (*(void (**)(void))(*(_QWORD *)v24 + 8 * v25))();
LABEL_39:
      v26 = v60;
      if (v60 == v59)
      {
        v26 = v59;
        v27 = 4;
      }
      else
      {
        if (!v60)
          goto LABEL_44;
        v27 = 5;
      }
      (*(void (**)(void))(*v26 + 8 * v27))();
LABEL_44:
      if (CLMicroLocationFingerprintVector::size((CLMicroLocationFingerprintVector *)&v42) == 1)
      {
        v39 = (void *)CLMicroLocationFingerprintVector::begin((CLMicroLocationFingerprintVector *)&v42);
        *(_QWORD *)&v40 = v28;
        v29 = CLMicroLocationFingerprintVector::Iterator::operator*(&v39);
        std::pair<boost::uuids::uuid const,CLMicroLocationFingerprint>::pair[abi:ne180100]<true,0>((uint64_t)buf, (_OWORD *)v9, v29);
        std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationFingerprint>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationFingerprint>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationFingerprint>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationFingerprint>>>::__emplace_unique_key_args<boost::uuids::uuid,std::pair<boost::uuids::uuid const,CLMicroLocationFingerprint>>(a3, buf, (uint64_t)buf);
        if (v53)
        {
          v54 = v53;
          operator delete(v53);
        }
        std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>>>::~__hash_table((uint64_t)&v52);
        std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>>>::~__hash_table((uint64_t)v51);
        std::__hash_table<CLMicroLocationFingerprint::Measurement,CLMicroLocationFingerprint::Measurement::HashMeasurement,CLMicroLocationFingerprint::Measurement::PredicateMeasurement,std::allocator<CLMicroLocationFingerprint::Measurement>>::~__hash_table((uint64_t)&buf[16]);
      }
      else
      {
        if (onceToken_MicroLocation_Default != -1)
          dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_90);
        v30 = (id)logObject_MicroLocation_Default;
        if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
        {
          v31 = operator new(0x28uLL);
          v39 = v31;
          v40 = xmmword_241BB2320;
          *v31 = 0u;
          v31[1] = 0u;
          *(_QWORD *)((char *)v31 + 29) = 0;
          boost::uuids::to_chars<char *>(v9, v31);
          v32 = &v39;
          if (v40 < 0)
            v32 = v39;
          *(_DWORD *)buf = v36;
          *(_DWORD *)&buf[4] = 0;
          *(_WORD *)&buf[8] = 2082;
          *(_QWORD *)&buf[10] = "";
          *(_WORD *)&buf[18] = 2082;
          *(_QWORD *)&buf[20] = v32;
          _os_log_impl(&dword_2419D9000, v30, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLMicroLocationClientUtils, requireFingerprintsForTriggerUuids, no fingerprint created for TriggerUUID\", \"TriggerUUID\":%{public, location:escape_only}s}", buf, 0x1Cu);
          if (SHIBYTE(v40) < 0)
            operator delete(v39);
        }

      }
      v33 = v42;
      v42 = 0;
      if (v33)
        (*(void (**)(uint64_t))(*(_QWORD *)v33 + 8))(v33);
      if (!v63)
        goto LABEL_64;
      v34 = v62;
      if (v62 == v61)
      {
        v34 = v61;
        v35 = 4;
        goto LABEL_63;
      }
      if (v62)
      {
        v35 = 5;
LABEL_63:
        (*(void (**)(void))(*v34 + 8 * v35))();
      }
LABEL_64:
      v9 += 248;
      if (v9 - 224 == v8)
        goto LABEL_65;
    }
    v17 = (*(uint64_t (**)(_QWORD *))(*v62 + 16))(v62);
LABEL_21:
    v58 = (__int128 *)v17;
    goto LABEL_27;
  }
LABEL_65:
  *(_QWORD *)buf = &v43;
  std::vector<CLMicroLocationRecordingEventsTable::Entry>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
}

void sub_241B16BA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *__p,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  void *v37;

  _Unwind_Resume(a1);
}

uint64_t std::pair<boost::uuids::uuid const,CLMicroLocationFingerprint>::~pair(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 184);
  if (v2)
  {
    *(_QWORD *)(a1 + 192) = v2;
    operator delete(v2);
  }
  std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>>>::~__hash_table(a1 + 120);
  std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>>>::~__hash_table(a1 + 80);
  std::__hash_table<CLMicroLocationFingerprint::Measurement,CLMicroLocationFingerprint::Measurement::HashMeasurement,CLMicroLocationFingerprint::Measurement::PredicateMeasurement,std::allocator<CLMicroLocationFingerprint::Measurement>>::~__hash_table(a1 + 16);
  return a1;
}

void CLMicroLocationClientUtils::requireServiceLabelEntries(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>, double a5@<D0>)
{
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  void *v16;
  NSObject *v17;
  uint8_t v18[8];
  double v19;

  v19 = a5;
  if (*(_BYTE *)(a3 + 24))
  {
    +[ULDefaultsSingleton shared](ULDefaultsSingleton, "shared");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "defaultsDictionary");
    v10 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "ULDatabaseSelectionLimit");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "objectForKey:", v11);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    if (v12 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
      v13 = objc_msgSend(v12, "unsignedIntValue");
    else
      v13 = objc_msgSend(&unk_2511EDE88, "unsignedIntValue");
    v14 = v13;

    v15 = *(id *)(a1 + 40);
    v16 = v15;
    if (!*(_BYTE *)(a3 + 24))
      std::__throw_bad_optional_access[abi:ne180100]();
    if (v15)
    {
      objc_msgSend(v15, "fetchRecordingLabelsForServiceUuid:atLoiGroupID:fromTime:limit:", a2, a3 + 8, &v19, v14);
    }
    else
    {
      *a4 = 0;
      a4[1] = 0;
      a4[2] = 0;
    }

  }
  else
  {
    if (onceToken_MicroLocation_Default != -1)
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_90);
    v17 = logObject_MicroLocation_Default;
    if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v18 = 0;
      _os_log_impl(&dword_2419D9000, v17, OS_LOG_TYPE_ERROR, "CLMicroLocationClientUtils, requireServiceLabelEntries, cannot load label entries for unknown LOI", v18, 2u);
    }
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
  }
}

void sub_241B16F74(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void ___ZL45_CLLogObjectForCategory_MicroLocation_Defaultv_block_invoke_71()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.MicroLocation", "MicroLocation");
  v1 = (void *)logObject_MicroLocation_Default;
  logObject_MicroLocation_Default = (uint64_t)v0;

}

uint64_t std::pair<boost::uuids::uuid const,CLMicroLocationFingerprint>::pair[abi:ne180100]<true,0>(uint64_t a1, _OWORD *a2, uint64_t a3)
{
  __int128 v5;
  __int128 v6;
  int v7;

  *(_OWORD *)a1 = *a2;
  std::unordered_set<CLMicroLocationFingerprint::Measurement,CLMicroLocationFingerprint::Measurement::HashMeasurement,CLMicroLocationFingerprint::Measurement::PredicateMeasurement,std::allocator<CLMicroLocationFingerprint::Measurement>>::unordered_set(a1 + 16, a3);
  v5 = *(_OWORD *)(a3 + 40);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a3 + 56);
  *(_OWORD *)(a1 + 56) = v5;
  std::unordered_set<CLMicroLocationProto::DataType>::unordered_set(a1 + 80, a3 + 64);
  std::unordered_map<CLMicroLocationProto::DataType,CLMicroLocationFingerprint::StartAndEndTimestamps>::unordered_map(a1 + 120, a3 + 104);
  v6 = *(_OWORD *)(a3 + 144);
  v7 = *(_DWORD *)(a3 + 160);
  *(_QWORD *)(a1 + 184) = 0;
  *(_DWORD *)(a1 + 176) = v7;
  *(_OWORD *)(a1 + 160) = v6;
  *(_QWORD *)(a1 + 192) = 0;
  *(_QWORD *)(a1 + 200) = 0;
  std::vector<CLMicroLocationProto::ConfidenceReason>::__init_with_size[abi:ne180100]<CLMicroLocationProto::ConfidenceReason*,CLMicroLocationProto::ConfidenceReason*>((_QWORD *)(a1 + 184), *(const void **)(a3 + 168), *(_QWORD *)(a3 + 176), (uint64_t)(*(_QWORD *)(a3 + 176) - *(_QWORD *)(a3 + 168)) >> 2);
  return a1;
}

void sub_241B1708C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>>>::~__hash_table(v3);
  std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>>>::~__hash_table(v2);
  std::__hash_table<CLMicroLocationFingerprint::Measurement,CLMicroLocationFingerprint::Measurement::HashMeasurement,CLMicroLocationFingerprint::Measurement::PredicateMeasurement,std::allocator<CLMicroLocationFingerprint::Measurement>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::function<CLMicroLocationFingerprintConfiguration ()(void)>::operator=<CLMicroLocationFingerprintConfiguration (&)(void),void>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  v6[0] = &off_2511D63B8;
  v6[1] = a2;
  v7 = v6;
  std::__function::__value_func<CLMicroLocationFingerprintConfiguration ()(void)>::swap[abi:ne180100](v6, a1);
  v3 = v7;
  if (v7 == v6)
  {
    v4 = 4;
    v3 = v6;
    goto LABEL_5;
  }
  if (v7)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

_QWORD *std::__function::__value_func<CLMicroLocationFingerprintConfiguration ()(void)>::swap[abi:ne180100](_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD v6[4];

  v6[3] = *MEMORY[0x24BDAC8D0];
  if (a2 != result)
  {
    v3 = result;
    v4 = (_QWORD *)result[3];
    v5 = (_QWORD *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, v6);
        (*(void (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(_QWORD *, _QWORD *))(v6[0] + 24))(v6, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, result);
      result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_241B172C8(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void std::__function::__func<CLMicroLocationClientUtils::requireFingerprintsForTriggerUuids(ULDatabase &,std::vector<boost::uuids::uuid> const&)::$_0,std::allocator<CLMicroLocationClientUtils::requireFingerprintsForTriggerUuids(ULDatabase &,std::vector<boost::uuids::uuid> const&)::$_0>,BOOL ()(void)>::~__func()
{
  JUMPOUT(0x2426A04D4);
}

_QWORD *std::__function::__func<CLMicroLocationClientUtils::requireFingerprintsForTriggerUuids(ULDatabase &,std::vector<boost::uuids::uuid> const&)::$_0,std::allocator<CLMicroLocationClientUtils::requireFingerprintsForTriggerUuids(ULDatabase &,std::vector<boost::uuids::uuid> const&)::$_0>,BOOL ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_2511D9AD8;
  return result;
}

void std::__function::__func<CLMicroLocationClientUtils::requireFingerprintsForTriggerUuids(ULDatabase &,std::vector<boost::uuids::uuid> const&)::$_0,std::allocator<CLMicroLocationClientUtils::requireFingerprintsForTriggerUuids(ULDatabase &,std::vector<boost::uuids::uuid> const&)::$_0>,BOOL ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_2511D9AD8;
}

uint64_t std::__function::__func<CLMicroLocationClientUtils::requireFingerprintsForTriggerUuids(ULDatabase &,std::vector<boost::uuids::uuid> const&)::$_0,std::allocator<CLMicroLocationClientUtils::requireFingerprintsForTriggerUuids(ULDatabase &,std::vector<boost::uuids::uuid> const&)::$_0>,BOOL ()(void)>::operator()()
{
  return 0;
}

uint64_t std::__function::__func<CLMicroLocationClientUtils::requireFingerprintsForTriggerUuids(ULDatabase &,std::vector<boost::uuids::uuid> const&)::$_0,std::allocator<CLMicroLocationClientUtils::requireFingerprintsForTriggerUuids(ULDatabase &,std::vector<boost::uuids::uuid> const&)::$_0>,BOOL ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<CLMicroLocationClientUtils::requireFingerprintsForTriggerUuids(ULDatabase &,std::vector<boost::uuids::uuid> const&)::$_0,std::allocator<CLMicroLocationClientUtils::requireFingerprintsForTriggerUuids(ULDatabase &,std::vector<boost::uuids::uuid> const&)::$_0>,BOOL ()(void)>::target_type()
{
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<CLMicroLocationRecordingEventsTable::Entry>,CLMicroLocationRecordingEventsTable::Entry const*,CLMicroLocationRecordingEventsTable::Entry const*,CLMicroLocationRecordingEventsTable::Entry*>(uint64_t a1, __int128 *a2, __int128 *a3, uint64_t a4)
{
  uint64_t v4;
  __int128 *v6;
  _QWORD v9[3];
  char v10;
  uint64_t v11;
  uint64_t v12;

  v4 = a4;
  v11 = a4;
  v12 = a4;
  v9[0] = a1;
  v9[1] = &v11;
  v9[2] = &v12;
  v10 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      std::allocator<CLMicroLocationRecordingEventsTable::Entry>::construct[abi:ne180100]<CLMicroLocationRecordingEventsTable::Entry,CLMicroLocationRecordingEventsTable::Entry const&>(a1, v4, v6);
      v6 = (__int128 *)((char *)v6 + 248);
      v4 = v12 + 248;
      v12 += 248;
    }
    while (v6 != a3);
  }
  v10 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<CLMicroLocationRecordingEventsTable::Entry>,CLMicroLocationRecordingEventsTable::Entry*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v9);
  return v4;
}

void sub_241B1740C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<CLMicroLocationRecordingEventsTable::Entry>,CLMicroLocationRecordingEventsTable::Entry*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationFingerprint>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationFingerprint>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationFingerprint>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationFingerprint>>>::__emplace_unique_key_args<boost::uuids::uuid,std::pair<boost::uuids::uuid const,CLMicroLocationFingerprint>>(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  unint64_t v3;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  _QWORD *v10;
  _QWORD *v11;
  unint64_t v12;
  uint64_t v14;
  _QWORD *v15;
  float v16;
  float v17;
  _BOOL8 v18;
  unint64_t v19;
  unint64_t v20;
  size_t v21;
  _QWORD *v22;
  unint64_t v23;
  _QWORD v25[2];
  char v26;

  v6 = 0;
  v7 = 0;
  do
    v7 ^= (v7 << 6) + (v7 >> 2) + 2654435769u + *((unsigned __int8 *)a2 + v6++);
  while (v6 != 16);
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v3 = v7;
      if (v7 >= v8)
        v3 = v7 % v8;
    }
    else
    {
      v3 = (v8 - 1) & v7;
    }
    v10 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
    if (v10)
    {
      v11 = (_QWORD *)*v10;
      if (*v10)
      {
        do
        {
          v12 = v11[1];
          if (v12 == v7)
          {
            if (v11[2] == *a2 && v11[3] == a2[1])
              return v11;
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8)
                v12 %= v8;
            }
            else
            {
              v12 &= v8 - 1;
            }
            if (v12 != v3)
              break;
          }
          v11 = (_QWORD *)*v11;
        }
        while (v11);
      }
    }
  }
  v14 = a1 + 16;
  v15 = operator new(0xE0uLL);
  v25[0] = v15;
  v25[1] = a1 + 16;
  *v15 = 0;
  v15[1] = v7;
  std::pair<boost::uuids::uuid const,CLMicroLocationFingerprint>::pair[abi:ne180100]((uint64_t)(v15 + 2), a3);
  v26 = 1;
  v16 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v17 = *(float *)(a1 + 32);
  if (!v8 || (float)(v17 * (float)v8) < v16)
  {
    v18 = 1;
    if (v8 >= 3)
      v18 = (v8 & (v8 - 1)) != 0;
    v19 = v18 | (2 * v8);
    v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20)
      v21 = v20;
    else
      v21 = v19;
    std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>>>::__rehash<true>(a1, v21);
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8)
        v3 = v7 % v8;
      else
        v3 = v7;
    }
    else
    {
      v3 = (v8 - 1) & v7;
    }
  }
  v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v22)
  {
    *(_QWORD *)v25[0] = *v22;
    *v22 = v25[0];
  }
  else
  {
    *(_QWORD *)v25[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v25[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = v14;
    if (*(_QWORD *)v25[0])
    {
      v23 = *(_QWORD *)(*(_QWORD *)v25[0] + 8);
      if ((v8 & (v8 - 1)) != 0)
      {
        if (v23 >= v8)
          v23 %= v8;
      }
      else
      {
        v23 &= v8 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v23) = v25[0];
    }
  }
  v11 = (_QWORD *)v25[0];
  v25[0] = 0;
  ++*(_QWORD *)(a1 + 24);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationFingerprint>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationFingerprint>,void *>>>>::reset[abi:ne180100]((uint64_t)v25, 0);
  return v11;
}

void sub_241B17694(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationFingerprint>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationFingerprint>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

uint64_t std::pair<boost::uuids::uuid const,CLMicroLocationFingerprint>::pair[abi:ne180100](uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  std::__hash_table<CLMicroLocationFingerprint::Measurement,CLMicroLocationFingerprint::Measurement::HashMeasurement,CLMicroLocationFingerprint::Measurement::PredicateMeasurement,std::allocator<CLMicroLocationFingerprint::Measurement>>::__hash_table(a1 + 16, (uint64_t *)(a2 + 16));
  v4 = *(_OWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 56) = v4;
  std::__hash_table<CLMicroLocationFingerprint::Measurement,CLMicroLocationFingerprint::Measurement::HashMeasurement,CLMicroLocationFingerprint::Measurement::PredicateMeasurement,std::allocator<CLMicroLocationFingerprint::Measurement>>::__hash_table(a1 + 80, (uint64_t *)(a2 + 80));
  std::__hash_table<CLMicroLocationFingerprint::Measurement,CLMicroLocationFingerprint::Measurement::HashMeasurement,CLMicroLocationFingerprint::Measurement::PredicateMeasurement,std::allocator<CLMicroLocationFingerprint::Measurement>>::__hash_table(a1 + 120, (uint64_t *)(a2 + 120));
  v5 = *(_OWORD *)(a2 + 160);
  *(_DWORD *)(a1 + 176) = *(_DWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 160) = v5;
  *(_QWORD *)(a1 + 192) = 0;
  *(_QWORD *)(a1 + 200) = 0;
  *(_QWORD *)(a1 + 184) = 0;
  *(_OWORD *)(a1 + 184) = *(_OWORD *)(a2 + 184);
  *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);
  *(_QWORD *)(a2 + 184) = 0;
  *(_QWORD *)(a2 + 192) = 0;
  *(_QWORD *)(a2 + 200) = 0;
  return a1;
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationFingerprint>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationFingerprint>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<boost::uuids::uuid const,CLMicroLocationFingerprint>,0>((uint64_t)v2 + 16);
    operator delete(v2);
  }
}

id ULDBUtils::NSStringArrayFromBoostUUIDs(uint64_t *a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;

  objc_msgSend(MEMORY[0x24BDBCEB8], "arrayWithCapacity:", (a1[1] - *a1) >> 4);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = *a1;
  v4 = a1[1];
  if (*a1 != v4)
  {
    do
    {
      v5 = (void *)objc_msgSend(objc_alloc(MEMORY[0x24BDD1880]), "initWithUUIDBytes:", v3);
      objc_msgSend(v5, "UUIDString");
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v2, "addObject:", v6);

      v3 += 16;
    }
    while (v3 != v4);
  }
  return v2;
}

void sub_241B17818(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void ULDBUtils::boostUUIDsFromNSStringArray(void *a1@<X0>, _QWORD *a2@<X8>)
{
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t i;
  char *v7;
  int64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  void *v17;
  NSObject *v18;
  id v19;
  void *__p[2];
  char v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  void *v26[2];
  char *v27;
  __int128 v28;
  char v29;
  _BYTE v30[128];
  uint64_t v31;

  v31 = *MEMORY[0x24BDAC8D0];
  v26[0] = 0;
  v26[1] = 0;
  v27 = 0;
  v19 = a1;
  std::vector<boost::uuids::uuid>::reserve(v26, objc_msgSend(v19, "count"));
  v24 = 0u;
  v25 = 0u;
  v22 = 0u;
  v23 = 0u;
  v3 = v19;
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v22, v30, 16);
  if (v4)
  {
    v5 = *(_QWORD *)v23;
    while (2)
    {
      for (i = 0; i != v4; ++i)
      {
        if (*(_QWORD *)v23 != v5)
          objc_enumerationMutation(v3);
        std::string::basic_string[abi:ne180100]<0>(__p, (char *)objc_msgSend(objc_retainAutorelease(*(id *)(*((_QWORD *)&v22 + 1) + 8 * i)), "UTF8String"));
        CLMicroLocationProtobufHelper::uuidFromStdString((uint64_t)__p, (uint64_t)&v28);
        if (v21 < 0)
          operator delete(__p[0]);
        if (!v29)
        {
          if (onceToken_MicroLocation_Default != -1)
            dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_91);
          v18 = logObject_MicroLocation_Default;
          if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_ERROR))
          {
            LOWORD(__p[0]) = 0;
            _os_log_impl(&dword_2419D9000, v18, OS_LOG_TYPE_ERROR, "Failed to convert NSUUID to boost UUID", (uint8_t *)__p, 2u);
          }
          *a2 = 0;
          a2[1] = 0;
          a2[2] = 0;

          if (v26[0])
          {
            v26[1] = v26[0];
            operator delete(v26[0]);
          }
          goto LABEL_35;
        }
        v7 = (char *)v26[1];
        if (v26[1] >= v27)
        {
          v8 = ((char *)v26[1] - (char *)v26[0]) >> 4;
          v9 = v8 + 1;
          if ((unint64_t)(v8 + 1) >> 60)
            std::vector<CLMicroLocationProto::ConfidenceReason>::__throw_length_error[abi:ne180100]();
          v10 = v27 - (char *)v26[0];
          if ((v27 - (char *)v26[0]) >> 3 > v9)
            v9 = v10 >> 3;
          if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF0)
            v11 = 0xFFFFFFFFFFFFFFFLL;
          else
            v11 = v9;
          if (v11)
            v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<boost::uuids::uuid>>((uint64_t)&v27, v11);
          else
            v12 = 0;
          v13 = &v12[16 * v8];
          *(_OWORD *)v13 = v28;
          v15 = (char *)v26[0];
          v14 = (char *)v26[1];
          v16 = v13;
          if (v26[1] != v26[0])
          {
            do
            {
              *((_OWORD *)v16 - 1) = *((_OWORD *)v14 - 1);
              v16 -= 16;
              v14 -= 16;
            }
            while (v14 != v15);
            v14 = (char *)v26[0];
          }
          v17 = v13 + 16;
          v26[0] = v16;
          v26[1] = v13 + 16;
          v27 = &v12[16 * v11];
          if (v14)
            operator delete(v14);
          v26[1] = v17;
        }
        else
        {
          *(_OWORD *)v26[1] = v28;
          v26[1] = v7 + 16;
        }
      }
      v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v22, v30, 16);
      if (v4)
        continue;
      break;
    }
  }

  *(_OWORD *)a2 = *(_OWORD *)v26;
  a2[2] = v27;
LABEL_35:

}

void sub_241B17B0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27)
{
  void *v27;

  if (__p)
    operator delete(__p);

  _Unwind_Resume(a1);
}

id ULDBUtils::eventTypesToNSArray(unsigned int **a1)
{
  void *v2;
  unsigned int *v3;
  unsigned int *v4;
  void *v5;

  objc_msgSend(MEMORY[0x24BDBCEB8], "array");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = *a1;
  v4 = a1[1];
  if (*a1 != v4)
  {
    do
    {
      objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedInt:", *v3);
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v2, "addObject:", v5);

      ++v3;
    }
    while (v3 != v4);
  }
  return v2;
}

void sub_241B17BF4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

id ULDBUtils::getPropertyAsArray(ULDBUtils *this, NSArray *a2, NSString *a3)
{
  ULDBUtils *v4;
  NSArray *v5;
  void *v6;
  ULDBUtils *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  BOOL v13;
  NSObject *v14;
  uint64_t v15;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  uint8_t buf[4];
  uint64_t v22;
  _BYTE v23[128];
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v4 = this;
  v5 = a2;
  objc_msgSend(MEMORY[0x24BDBCEB8], "arrayWithCapacity:", -[ULDBUtils count](v4, "count"));
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v19 = 0u;
  v20 = 0u;
  v17 = 0u;
  v18 = 0u;
  v7 = v4;
  v8 = -[ULDBUtils countByEnumeratingWithState:objects:count:](v7, "countByEnumeratingWithState:objects:count:", &v17, v23, 16);
  if (v8)
  {
    v9 = *(_QWORD *)v18;
    do
    {
      v10 = 0;
      do
      {
        if (*(_QWORD *)v18 != v9)
          objc_enumerationMutation(v7);
        v11 = *(void **)(*((_QWORD *)&v17 + 1) + 8 * v10);
        objc_msgSend(v11, "objectForKeyedSubscript:", v5);
        v12 = (void *)objc_claimAutoreleasedReturnValue();
        v13 = v12 == 0;

        if (v13)
        {
          if (onceToken_MicroLocation_Default != -1)
            dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_91);
          v14 = (id)logObject_MicroLocation_Default;
          if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
          {
            v15 = -[NSArray UTF8String](objc_retainAutorelease(v5), "UTF8String");
            *(_DWORD *)buf = 136315138;
            v22 = v15;
            _os_log_impl(&dword_2419D9000, v14, OS_LOG_TYPE_ERROR, "got nil value in dict array for property %s", buf, 0xCu);
          }
        }
        else
        {
          objc_msgSend(v11, "objectForKeyedSubscript:", v5);
          v14 = objc_claimAutoreleasedReturnValue();
          objc_msgSend(v6, "addObject:", v14);
        }

        ++v10;
      }
      while (v8 != v10);
      v8 = -[ULDBUtils countByEnumeratingWithState:objects:count:](v7, "countByEnumeratingWithState:objects:count:", &v17, v23, 16);
    }
    while (v8);
  }

  return v6;
}

void sub_241B17E20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

void ___ZL45_CLLogObjectForCategory_MicroLocation_Defaultv_block_invoke_72()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.MicroLocation", "MicroLocation");
  v1 = (void *)logObject_MicroLocation_Default;
  logObject_MicroLocation_Default = (uint64_t)v0;

}

void sub_241B17F60(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

uint64_t ULDBUtils::insertEntries<CLMicroLocationRapportTable,ULRapportMO>(void *a1, uint64_t a2)
{
  id v3;
  void *v4;
  id v5;
  uint64_t v6;
  _QWORD v8[4];
  id v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  char v15;

  v3 = a1;
  v12 = 0;
  v13 = &v12;
  v14 = 0x2020000000;
  v15 = 0;
  objc_msgSend(v3, "managedObjectContext");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v8[0] = MEMORY[0x24BDAC760];
  v8[1] = 3221225472;
  v8[2] = ___ZN9ULDBUtils13insertEntriesI27CLMicroLocationRapportTable11ULRapportMOEEbP7ULStoreRKNSt3__16vectorINT_5EntryENS5_9allocatorIS8_EEEE_block_invoke;
  v8[3] = &unk_2511D22D0;
  v11 = a2;
  v5 = v3;
  v9 = v5;
  v10 = &v12;
  objc_msgSend(v4, "performBlockAndWait:", v8);

  v6 = *((unsigned __int8 *)v13 + 24);
  _Block_object_dispose(&v12, 8);

  return v6;
}

void sub_241B18084(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, uint64_t a8, uint64_t a9, ...)
{
  void *v9;
  void *v10;
  va_list va;

  va_start(va, a9);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void ULDBUtils::fetchEntries<CLMicroLocationRapportTable,ULRapportMO>(void *a1@<X0>, void *a2@<X1>, void *a3@<X2>, uint64_t a4@<X3>, __n128 *a5@<X8>)
{
  id v9;
  id v10;
  id v11;
  void *v12;
  id v13;
  id v14;
  id v15;
  uint64_t *v16;
  _QWORD v17[4];
  id v18;
  id v19;
  id v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  __n128 (*v26)(__n128 *, __n128 *);
  void (*v27)(uint64_t);
  void *v28;
  _QWORD v29[3];
  void **v30;

  v9 = a1;
  v10 = a2;
  v11 = a3;
  v23 = 0;
  v24 = &v23;
  v25 = 0x4812000000;
  v26 = __Block_byref_object_copy__18;
  v27 = __Block_byref_object_dispose__18;
  v28 = &unk_241BEBD1D;
  memset(v29, 0, sizeof(v29));
  objc_msgSend(v9, "managedObjectContext");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  v17[0] = MEMORY[0x24BDAC760];
  v17[1] = 3221225472;
  v17[2] = ___ZN9ULDBUtils12fetchEntriesI27CLMicroLocationRapportTable11ULRapportMOEENSt3__16vectorINT_5EntryENS3_9allocatorIS6_EEEEP7ULStoreP7NSArrayIP11NSPredicateEPSC_IP16NSSortDescriptorEm_block_invoke;
  v17[3] = &unk_2511D22F8;
  v13 = v10;
  v18 = v13;
  v14 = v11;
  v19 = v14;
  v22 = a4;
  v15 = v9;
  v20 = v15;
  v21 = &v23;
  objc_msgSend(v12, "performBlockAndWait:", v17);

  v16 = v24;
  a5->n128_u64[1] = 0;
  a5[1].n128_u64[0] = 0;
  a5->n128_u64[0] = 0;
  std::vector<CLMicroLocationRapportTable::Entry>::__init_with_size[abi:ne180100]<CLMicroLocationRapportTable::Entry*,CLMicroLocationRapportTable::Entry*>(a5, v16[6], v16[7], 0xCCCCCCCCCCCCCCCDLL * ((v16[7] - v16[6]) >> 4));

  _Block_object_dispose(&v23, 8);
  v30 = (void **)v29;
  std::vector<CLMicroLocationRapportTable::Entry>::__destroy_vector::operator()[abi:ne180100](&v30);

}

void sub_241B18244(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, void *a7, void *a8, uint64_t a9, uint64_t a10, ...)
{
  void *v10;
  void *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  va_list va;

  va_start(va, a10);

  _Block_object_dispose(va, 8);
  *(_QWORD *)(v14 - 96) = v13;
  std::vector<CLMicroLocationRapportTable::Entry>::__destroy_vector::operator()[abi:ne180100]((void ***)(v14 - 96));

  _Unwind_Resume(a1);
}

void ULDBUtils::fetchAllWithLimit<CLMicroLocationRapportTable,ULRapportMO>(void *a1@<X0>, unsigned int a2@<W1>, __n128 *a3@<X8>)
{
  id v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  _QWORD v10[2];

  v10[1] = *MEMORY[0x24BDAC8D0];
  v5 = a1;
  v6 = (void *)MEMORY[0x24BDD17C0];
  objc_msgSend((id)objc_opt_class(), "defaultSortProperty");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "sortDescriptorWithKey:ascending:", v7, 0);
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  v10[0] = v8;
  objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", v10, 1);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  ULDBUtils::fetchEntries<CLMicroLocationRapportTable,ULRapportMO>(v5, 0, v9, a2, a3);

}

void sub_241B183A4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_241B186D0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void ___ZN9ULDBUtils13insertEntriesI27CLMicroLocationRapportTable11ULRapportMOEEbP7ULStoreRKNSt3__16vectorINT_5EntryENS5_9allocatorIS8_EEEE_block_invoke(uint64_t a1)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;
  NSObject *v7;
  void *v8;
  void *v9;
  NSObject *v10;
  void *v11;
  void *v12;
  void *v13;
  int v14;
  int v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  void *v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  v2 = *(uint64_t **)(a1 + 48);
  v3 = *v2;
  v4 = v2[1];
  if (*v2 == v4)
  {
LABEL_4:
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = objc_msgSend(*(id *)(a1 + 32), "commitChangesToStore");
    objc_msgSend(*(id *)(a1 + 32), "deleteOldestRecordsIfFull");
  }
  else
  {
    while (1)
    {
      objc_msgSend(*(id *)(a1 + 32), "managedObjectContext");
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      +[ULRapportMO createFromEntry:inManagedObjectContext:](ULRapportMO, "createFromEntry:inManagedObjectContext:", v3, v5);
      v6 = (void *)objc_claimAutoreleasedReturnValue();

      if (!v6)
        break;

      v3 += 80;
      if (v3 == v4)
        goto LABEL_4;
    }
    if (onceToken_MicroLocation_Default != -1)
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_92);
    v7 = (id)logObject_MicroLocation_Default;
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      +[ULRapportMO entity](ULRapportMO, "entity");
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v8, "name");
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      v14 = 68289283;
      v15 = 0;
      v16 = 2082;
      v17 = "";
      v18 = 2113;
      v19 = v9;
      _os_log_impl(&dword_2419D9000, v7, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"Failed to create entry from MO\", \"MO\":%{private, location:escape_only}@}", (uint8_t *)&v14, 0x1Cu);

    }
    if (onceToken_MicroLocation_Default != -1)
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_92);
    v10 = (id)logObject_MicroLocation_Default;
    if (os_signpost_enabled(v10))
    {
      +[ULRapportMO entity](ULRapportMO, "entity");
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v11, "name");
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      v14 = 68289283;
      v15 = 0;
      v16 = 2082;
      v17 = "";
      v18 = 2113;
      v19 = v12;
      _os_signpost_emit_with_name_impl(&dword_2419D9000, v10, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Failed to create entry from MO", "{\"msg%{public}.0s\":\"Failed to create entry from MO\", \"MO\":%{private, location:escape_only}@}", (uint8_t *)&v14, 0x1Cu);

    }
    objc_msgSend(*(id *)(a1 + 32), "managedObjectContext");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v13, "reset");

  }
}

void sub_241B18A34(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void ___ZL45_CLLogObjectForCategory_MicroLocation_Defaultv_block_invoke_73()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.MicroLocation", "MicroLocation");
  v1 = (void *)logObject_MicroLocation_Default;
  logObject_MicroLocation_Default = (uint64_t)v0;

}

__n128 __Block_byref_object_copy__18(__n128 *a1, __n128 *a2)
{
  __n128 result;

  a1[3].n128_u64[0] = 0;
  a1[3].n128_u64[1] = 0;
  a1[4].n128_u64[0] = 0;
  result = a2[3];
  a1[3] = result;
  a1[4].n128_u64[0] = a2[4].n128_u64[0];
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = 0;
  a2[4].n128_u64[0] = 0;
  return result;
}

void __Block_byref_object_dispose__18(uint64_t a1)
{
  void **v1;

  v1 = (void **)(a1 + 48);
  std::vector<CLMicroLocationRapportTable::Entry>::__destroy_vector::operator()[abi:ne180100](&v1);
}

void ___ZN9ULDBUtils12fetchEntriesI27CLMicroLocationRapportTable11ULRapportMOEENSt3__16vectorINT_5EntryENS3_9allocatorIS6_EEEEP7ULStoreP7NSArrayIP11NSPredicateEPSC_IP16NSSortDescriptorEm_block_invoke(uint64_t a1)
{
  void *v2;
  objc_class *v3;
  void *v4;
  void *v5;
  uint64_t v6;
  void *v7;
  __int128 v8;
  uint64_t v9;
  void **v10;

  v2 = *(void **)(a1 + 48);
  v3 = (objc_class *)objc_opt_class();
  NSStringFromClass(v3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "fetchManagedObjectsWithEntityName:byAndPredicates:sortDescriptors:andLimit:", v4, *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 64));
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  ULDBUtils::convertManagedObjectsToEntries<CLMicroLocationRapportTable,ULRapportMO>(v5, (uint64_t *)&v8);
  v6 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
  std::vector<CLMicroLocationRapportTable::Entry>::__vdeallocate((void **)(v6 + 48));
  *(_OWORD *)(v6 + 48) = v8;
  *(_QWORD *)(v6 + 64) = v9;
  v9 = 0;
  v8 = 0uLL;
  v10 = (void **)&v8;
  std::vector<CLMicroLocationRapportTable::Entry>::__destroy_vector::operator()[abi:ne180100](&v10);
  objc_msgSend(*(id *)(a1 + 48), "managedObjectContext");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "reset");

}

void sub_241B18BCC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void ULDBUtils::convertManagedObjectsToEntries<CLMicroLocationRapportTable,ULRapportMO>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  id v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  id v8;
  void *v9;
  unint64_t v10;
  uint64_t v11;
  NSObject *v12;
  void *v13;
  void *v14;
  NSObject *v15;
  void *v16;
  void *v17;
  uint64_t j;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint8_t buf[4];
  int v25;
  __int16 v26;
  const char *v27;
  __int16 v28;
  void *v29;
  _OWORD v30[5];
  uint64_t v31;
  _BYTE v32[128];
  uint64_t v33;

  v33 = *MEMORY[0x24BDAC8D0];
  v3 = a1;
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  std::vector<CLMicroLocationRapportTable::Entry>::reserve(a2, objc_msgSend(v3, "count"));
  v22 = 0u;
  v23 = 0u;
  v20 = 0u;
  v21 = 0u;
  v4 = v3;
  v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v20, v32, 16);
  if (v5)
  {
    v6 = *(_QWORD *)v21;
    while (2)
    {
      for (i = 0; i != v5; ++i)
      {
        if (*(_QWORD *)v21 != v6)
          objc_enumerationMutation(v4);
        v8 = *(id *)(*((_QWORD *)&v20 + 1) + 8 * i);
        v9 = v8;
        if (!v8)
        {
          v31 = 0;
          memset(v30, 0, sizeof(v30));
LABEL_16:
          if (onceToken_MicroLocation_Default != -1)
            dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_92);
          v12 = (id)logObject_MicroLocation_Default;
          if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
          {
            objc_msgSend(v9, "entity");
            v13 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v13, "name");
            v14 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 68289283;
            v25 = 0;
            v26 = 2082;
            v27 = "";
            v28 = 2113;
            v29 = v14;
            _os_log_impl(&dword_2419D9000, v12, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"Failed to convert MO to entry\", \"MO\":%{private, location:escape_only}@}", buf, 0x1Cu);

          }
          if (onceToken_MicroLocation_Default != -1)
            dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_92);
          v15 = (id)logObject_MicroLocation_Default;
          if (os_signpost_enabled(v15))
          {
            objc_msgSend(v9, "entity");
            v16 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v16, "name");
            v17 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 68289283;
            v25 = 0;
            v26 = 2082;
            v27 = "";
            v28 = 2113;
            v29 = v17;
            _os_signpost_emit_with_name_impl(&dword_2419D9000, v15, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Failed to convert MO to entry", "{\"msg%{public}.0s\":\"Failed to convert MO to entry\", \"MO\":%{private, location:escape_only}@}", buf, 0x1Cu);

          }
          std::__optional_destruct_base<CLMicroLocationRapportTable::Entry,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)v30);

          v19 = *a2;
          for (j = a2[1];
                j != v19;
                std::allocator<CLMicroLocationRapportTable::Entry>::destroy[abi:ne180100]((uint64_t)(a2 + 2), j))
          {
            j -= 80;
          }
          a2[1] = v19;
          goto LABEL_28;
        }
        objc_msgSend(v8, "convertToEntry", (_QWORD)v20);
        if (!(_BYTE)v31)
          goto LABEL_16;
        v10 = a2[1];
        if (v10 >= a2[2])
        {
          v11 = std::vector<CLMicroLocationRapportTable::Entry>::__push_back_slow_path<CLMicroLocationRapportTable::Entry>(a2, (uint64_t)v30);
        }
        else
        {
          std::allocator<CLMicroLocationRapportTable::Entry>::construct[abi:ne180100]<CLMicroLocationRapportTable::Entry,CLMicroLocationRapportTable::Entry>((uint64_t)(a2 + 2), a2[1], (uint64_t)v30);
          v11 = v10 + 80;
          a2[1] = v10 + 80;
        }
        a2[1] = v11;
        std::__optional_destruct_base<CLMicroLocationRapportTable::Entry,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)v30);

      }
      v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v20, v32, 16);
      if (v5)
        continue;
      break;
    }
  }

LABEL_28:
}

void sub_241B18F54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  va_list va;

  va_start(va, a13);

  std::__optional_destruct_base<CLMicroLocationRapportTable::Entry,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)va);
  std::vector<CLMicroLocationRapportTable::Entry>::__destroy_vector::operator()[abi:ne180100]((void ***)va);

  _Unwind_Resume(a1);
}

void **std::vector<CLMicroLocationRapportTable::Entry>::reserve(uint64_t *a1, unint64_t a2)
{
  void **result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7[5];

  v4 = a1[2];
  result = (void **)(a1 + 2);
  if (0xCCCCCCCCCCCCCCCDLL * ((v4 - *a1) >> 4) < a2)
  {
    if (a2 >= 0x333333333333334)
      std::vector<CLMicroLocationProto::ConfidenceReason>::__throw_length_error[abi:ne180100]();
    v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = std::__allocate_at_least[abi:ne180100]<std::allocator<CLMicroLocationRapportMonitor::Item>>((uint64_t)result, a2);
    v7[1] = (char *)v7[0] + v5;
    v7[2] = (char *)v7[0] + v5;
    v7[3] = (char *)v7[0] + 80 * v6;
    std::vector<CLMicroLocationRapportTable::Entry>::__swap_out_circular_buffer(a1, v7);
    return std::__split_buffer<CLMicroLocationRapportTable::Entry>::~__split_buffer(v7);
  }
  return result;
}

void sub_241B19080(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<CLMicroLocationRapportTable::Entry>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<CLMicroLocationRapportTable::Entry>::__push_back_slow_path<CLMicroLocationRapportTable::Entry>(uint64_t *a1, uint64_t a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  void *v10;
  char *v11;
  char *v12;
  char *v13;
  uint64_t *v14;

  v3 = 0xCCCCCCCCCCCCCCCDLL * ((a1[1] - *a1) >> 4);
  v4 = v3 + 1;
  if (v3 + 1 > 0x333333333333333)
    std::vector<CLMicroLocationProto::ConfidenceReason>::__throw_length_error[abi:ne180100]();
  if (0x999999999999999ALL * ((a1[2] - *a1) >> 4) > v4)
    v4 = 0x999999999999999ALL * ((a1[2] - *a1) >> 4);
  if (0xCCCCCCCCCCCCCCCDLL * ((a1[2] - *a1) >> 4) >= 0x199999999999999)
    v6 = 0x333333333333333;
  else
    v6 = v4;
  v14 = a1 + 2;
  if (v6)
    v7 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CLMicroLocationRapportMonitor::Item>>((uint64_t)(a1 + 2), v6);
  else
    v7 = 0;
  v10 = v7;
  v11 = &v7[80 * v3];
  v13 = &v7[80 * v6];
  std::allocator<CLMicroLocationRapportTable::Entry>::construct[abi:ne180100]<CLMicroLocationRapportTable::Entry,CLMicroLocationRapportTable::Entry>((uint64_t)(a1 + 2), (uint64_t)v11, a2);
  v12 = v11 + 80;
  std::vector<CLMicroLocationRapportTable::Entry>::__swap_out_circular_buffer(a1, &v10);
  v8 = a1[1];
  std::__split_buffer<CLMicroLocationRapportTable::Entry>::~__split_buffer(&v10);
  return v8;
}

void sub_241B1918C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<CLMicroLocationRapportTable::Entry>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

__n128 std::allocator<CLMicroLocationRapportTable::Entry>::construct[abi:ne180100]<CLMicroLocationRapportTable::Entry,CLMicroLocationRapportTable::Entry>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v5;
  __n128 result;

  *(_QWORD *)a2 = *(_QWORD *)a3;
  v5 = *(_OWORD *)(a3 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a3 + 24);
  *(_OWORD *)(a2 + 8) = v5;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)(a3 + 24) = 0;
  *(_QWORD *)(a3 + 8) = 0;
  CLMicroLocationProto::RapportDevice::RapportDevice((CLMicroLocationProto::RapportDevice *)(a2 + 32), (const CLMicroLocationProto::RapportDevice *)(a3 + 32));
  result = *(__n128 *)(a3 + 64);
  *(__n128 *)(a2 + 64) = result;
  return result;
}

void sub_241B19200(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 31) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

uint64_t std::__optional_destruct_base<CLMicroLocationRapportTable::Entry,false>::~__optional_destruct_base[abi:ne180100](uint64_t a1)
{
  if (*(_BYTE *)(a1 + 80))
  {
    CLMicroLocationProto::RapportDevice::~RapportDevice((CLMicroLocationProto::RapportDevice *)(a1 + 32));
    if (*(char *)(a1 + 31) < 0)
      operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

void std::vector<CLMicroLocationRapportTable::Entry>::__vdeallocate(void **a1)
{
  void *v1;
  uint64_t v3;
  void *v4;

  v1 = *a1;
  if (*a1)
  {
    v3 = (uint64_t)a1[1];
    v4 = *a1;
    if ((void *)v3 != v1)
    {
      do
      {
        v3 -= 80;
        std::allocator<CLMicroLocationRapportTable::Entry>::destroy[abi:ne180100]((uint64_t)(a1 + 2), v3);
      }
      while ((void *)v3 != v1);
      v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

__n128 *std::vector<CLMicroLocationRapportTable::Entry>::__init_with_size[abi:ne180100]<CLMicroLocationRapportTable::Entry*,CLMicroLocationRapportTable::Entry*>(__n128 *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  __n128 *v6;

  if (a4)
  {
    v6 = result;
    std::vector<CLMicroLocationRapportMonitor::Item>::__vallocate[abi:ne180100](result, a4);
    result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<CLMicroLocationRapportTable::Entry>,CLMicroLocationRapportTable::Entry*,CLMicroLocationRapportTable::Entry*,CLMicroLocationRapportTable::Entry*>((uint64_t)&v6[1], a2, a3, (__n128 *)v6->n128_u64[1]);
    v6->n128_u64[1] = (unint64_t)result;
  }
  return result;
}

void sub_241B1932C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  std::vector<CLMicroLocationRapportTable::Entry>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

__n128 *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<CLMicroLocationRapportTable::Entry>,CLMicroLocationRapportTable::Entry*,CLMicroLocationRapportTable::Entry*,CLMicroLocationRapportTable::Entry*>(uint64_t a1, uint64_t a2, uint64_t a3, __n128 *a4)
{
  __n128 *v4;
  uint64_t v6;
  _QWORD v9[3];
  char v10;
  __n128 *v11;
  __n128 *v12;

  v4 = a4;
  v11 = a4;
  v12 = a4;
  v9[0] = a1;
  v9[1] = &v11;
  v9[2] = &v12;
  v10 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      std::allocator<CLMicroLocationRapportTable::Entry>::construct[abi:ne180100]<CLMicroLocationRapportTable::Entry,CLMicroLocationRapportTable::Entry&>(a1, v4, v6);
      v6 += 80;
      v4 = v12 + 5;
      v12 += 5;
    }
    while (v6 != a3);
  }
  v10 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<CLMicroLocationRapportTable::Entry>,CLMicroLocationRapportTable::Entry*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v9);
  return v4;
}

void sub_241B193E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<CLMicroLocationRapportTable::Entry>,CLMicroLocationRapportTable::Entry*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

__n128 std::allocator<CLMicroLocationRapportTable::Entry>::construct[abi:ne180100]<CLMicroLocationRapportTable::Entry,CLMicroLocationRapportTable::Entry&>(uint64_t a1, __n128 *a2, uint64_t a3)
{
  std::string *v5;
  __int128 v6;
  __n128 result;

  a2->n128_u64[0] = *(_QWORD *)a3;
  v5 = (std::string *)&a2->n128_i8[8];
  if (*(char *)(a3 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)(a3 + 8), *(_QWORD *)(a3 + 16));
  }
  else
  {
    v6 = *(_OWORD *)(a3 + 8);
    a2[1].n128_u64[1] = *(_QWORD *)(a3 + 24);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  CLMicroLocationProto::RapportDevice::RapportDevice((CLMicroLocationProto::RapportDevice *)&a2[2], (const CLMicroLocationProto::RapportDevice *)(a3 + 32));
  result = *(__n128 *)(a3 + 64);
  a2[4] = result;
  return result;
}

void sub_241B19468(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 31) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<CLMicroLocationRapportTable::Entry>,CLMicroLocationRapportTable::Entry*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<CLMicroLocationRapportTable::Entry>,CLMicroLocationRapportTable::Entry*>::operator()[abi:ne180100]((uint64_t *)a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<CLMicroLocationRapportTable::Entry>,CLMicroLocationRapportTable::Entry*>::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = (uint64_t *)a1[1];
  v1 = (uint64_t *)a1[2];
  v3 = *v1;
  v4 = *v2;
  if (*v1 != *v2)
  {
    v5 = *a1;
    do
    {
      v3 -= 80;
      std::allocator<CLMicroLocationRapportTable::Entry>::destroy[abi:ne180100](v5, v3);
    }
    while (v3 != v4);
  }
}

_QWORD *CLMicroLocationProtobufHelper::convertRequestTypeToString@<X0>(_DWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  char *v2;

  if (*a1)
    v2 = "recording";
  else
    v2 = "localization";
  return std::string::basic_string[abi:ne180100]<0>(a2, v2);
}

_QWORD *CLMicroLocationProtobufHelper::convertRequestStatusToString@<X0>(int *a1@<X0>, _QWORD *a2@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a2, off_2511D9BB8[*a1]);
}

_QWORD *CLMicroLocationProtobufHelper::convertChangedLoiReasonToMessage@<X0>(int a1@<W0>, _QWORD *a2@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a2, off_2511D9BE8[a1 - 1]);
}

uint64_t CLMicroLocationProtobufHelper::uuidFromStdString@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  unsigned __int8 *v4;
  uint64_t result;
  uint64_t v6;
  char v7;

  v3 = *(unsigned __int8 *)(a1 + 23);
  if ((v3 & 0x80u) == 0)
    v4 = (unsigned __int8 *)a1;
  else
    v4 = *(unsigned __int8 **)a1;
  if ((v3 & 0x80u) != 0)
    v3 = *(_QWORD *)(a1 + 8);
  result = boost::uuids::string_generator::operator()<std::__wrap_iter<char const*>>((boost::uuids::string_generator *)&v7, v4, &v4[v3]);
  *(_QWORD *)a2 = result;
  *(_QWORD *)(a2 + 8) = v6;
  *(_BYTE *)(a2 + 16) = 1;
  return result;
}

uint64_t **CLMicroLocationProtobufHelper::uuidFromProtobuf@<X0>(uint64_t **result@<X0>, _BYTE *a2@<X8>)
{
  int v2;
  char v3;

  v2 = *((char *)result + 23);
  if (v2 < 0)
  {
    if (result[1] != (uint64_t *)16)
    {
LABEL_7:
      v3 = 0;
      *a2 = 0;
      goto LABEL_8;
    }
    result = (uint64_t **)*result;
  }
  else if (v2 != 16)
  {
    goto LABEL_7;
  }
  *(_OWORD *)a2 = *(_OWORD *)result;
  v3 = 1;
LABEL_8:
  a2[16] = v3;
  return result;
}

void CLMicroLocationProtobufHelper::boostUuidFromNSUUID(CLMicroLocationProtobufHelper *this@<X0>, uint64_t a2@<X8>)
{
  CLMicroLocationProtobufHelper *v4;
  CLMicroLocationProtobufHelper *v5;
  __int128 v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v4 = this;
  v5 = v4;
  if (v4)
  {
    v6 = 0uLL;
    -[CLMicroLocationProtobufHelper getUUIDBytes:](v4, "getUUIDBytes:", &v6);
    *(_OWORD *)a2 = v6;
    *(_BYTE *)(a2 + 16) = 1;
  }
  else
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 16) = 0;
  }

}

void sub_241B196A0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void CLMicroLocationProtobufHelper::protobufFromNative(id *a1@<X0>, CLMicroLocationProto::BleLeechedBeacons *a2@<X8>)
{
  void *v4;
  _BOOL4 v5;
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  id v10;
  _QWORD *v11;
  _QWORD *v12;
  void *v13;
  BOOL v14;
  id v15;
  _QWORD *v16;
  NSObject *v17;
  _QWORD *v18;
  void *__p[2];
  char v20;
  char v21[8];
  uint64_t v22;
  float v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  int v27;
  int v28;
  _BYTE v29[17];
  uint64_t v30;

  v30 = *MEMORY[0x24BDAC8D0];
  CLMicroLocationProto::BleLeechedBeacons::BleLeechedBeacons((uint64_t)v21);
  if (!*a1
    || (objc_msgSend(*a1, "idsDeviceID"),
        v4 = (void *)objc_claimAutoreleasedReturnValue(),
        v5 = v4 == 0,
        v4,
        v5))
  {
LABEL_16:
    *(_BYTE *)a2 = 0;
    *((_BYTE *)a2 + 72) = 0;
    goto LABEL_21;
  }
  objc_msgSend(*a1, "bleAdvertisementTimestamp");
  v28 |= 2u;
  v22 = v6;
  v7 = objc_msgSend(*a1, "bleRSSI");
  v28 |= 4u;
  v23 = (float)v7;
  v8 = objc_msgSend(*a1, "bleChannel");
  v28 |= 0x10u;
  v27 = v8;
  v9 = objc_msgSend(*a1, "discoveryFlags");
  v28 |= 0x20u;
  v24 = v9;
  objc_msgSend(*a1, "idsDeviceID");
  v10 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
  std::string::basic_string[abi:ne180100]<0>(__p, (char *)objc_msgSend(v10, "UTF8String"));
  CLMicroLocationProtobufHelper::uuidFromStdString((uint64_t)__p, (uint64_t)v29);
  if (v20 < 0)
    operator delete(__p[0]);

  if (!v29[16])
  {
    if (onceToken_MicroLocation_Default != -1)
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_93);
    v17 = logObject_MicroLocation_Default;
    if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_ERROR))
    {
      LOWORD(__p[0]) = 0;
      _os_log_impl(&dword_2419D9000, v17, OS_LOG_TYPE_ERROR, "Invalid CBDevice IDS UUID", (uint8_t *)__p, 2u);
    }
    goto LABEL_16;
  }
  v28 |= 0x80u;
  v11 = (_QWORD *)MEMORY[0x24BEDD958];
  if (v26 == (_QWORD *)MEMORY[0x24BEDD958])
  {
    v12 = (_QWORD *)operator new();
    *v12 = 0;
    v12[1] = 0;
    v12[2] = 0;
    v26 = v12;
  }
  MEMORY[0x2426A02D0]();
  objc_msgSend(*a1, "model");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  v14 = v13 == 0;

  if (v14)
  {
    v28 |= 0x40u;
    if (v25 == v11)
    {
      v18 = (_QWORD *)operator new();
      *v18 = 0;
      v18[1] = 0;
      v18[2] = 0;
      v25 = v18;
    }
    MEMORY[0x2426A02C4]();
  }
  else
  {
    objc_msgSend(*a1, "model");
    v15 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
    objc_msgSend(v15, "UTF8String");
    v28 |= 0x40u;
    if (v25 == v11)
    {
      v16 = (_QWORD *)operator new();
      *v16 = 0;
      v16[1] = 0;
      v16[2] = 0;
      v25 = v16;
    }
    MEMORY[0x2426A02C4]();

  }
  CLMicroLocationProto::BleLeechedBeacons::BleLeechedBeacons(a2, (const CLMicroLocationProto::BleLeechedBeacons *)v21);
  *((_BYTE *)a2 + 72) = 1;
LABEL_21:
  CLMicroLocationProto::BleLeechedBeacons::~BleLeechedBeacons((CLMicroLocationProto::BleLeechedBeacons *)v21);
}

void sub_241B19998(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  void *v15;

  CLMicroLocationProto::BleLeechedBeacons::~BleLeechedBeacons((CLMicroLocationProto::BleLeechedBeacons *)&a15);
  _Unwind_Resume(a1);
}

void CLMicroLocationProtobufHelper::protobufFromNative(CLMicroLocationProtobufHelper *this@<X0>, CLMicroLocationProto::UwbRange *a2@<X8>)
{
  int v5;
  _QWORD *v6;
  _DWORD *v7;
  int v8;
  int v9;
  int v10;
  int v11;
  char v12;
  NSObject *v13;
  std::string __p;
  _BYTE v15[8];
  uint64_t v16;
  int v17;
  _DWORD *v18;
  _QWORD *v19;
  int v20;
  uint64_t v21;
  int v22;
  _BYTE v23[17];
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  if (*((_BYTE *)this + 68) == 1)
  {
    CLMicroLocationProto::UwbRange::UwbRange((uint64_t)v15);
    v16 = *(_QWORD *)this;
    v5 = *((_DWORD *)this + 2);
    v22 |= 6u;
    v17 = v5;
    if (*((char *)this + 55) < 0)
      std::string::__init_copy_ctor_external(&__p, *((const std::string::value_type **)this + 4), *((_QWORD *)this + 5));
    else
      __p = *(std::string *)((char *)this + 32);
    CLMicroLocationProtobufHelper::uuidFromStdString((uint64_t)&__p, (uint64_t)v23);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (v23[16])
    {
      v22 |= 0x10u;
      if (v19 == (_QWORD *)MEMORY[0x24BEDD958])
      {
        v6 = (_QWORD *)operator new();
        *v6 = 0;
        v6[1] = 0;
        v6[2] = 0;
        v19 = v6;
      }
      MEMORY[0x2426A02D0]();
      v22 |= 8u;
      v7 = v18;
      if (!v18)
      {
        v7 = (_DWORD *)operator new();
        CLMicroLocationProto::Direction::Direction((uint64_t)v7);
        v18 = v7;
      }
      v8 = *((_DWORD *)this + 4);
      v7[6] |= 1u;
      v7[2] = v8;
      v22 |= 8u;
      v9 = *((_DWORD *)this + 5);
      v7[6] |= 2u;
      v7[3] = v9;
      v22 |= 8u;
      v10 = *((_DWORD *)this + 6);
      v7[6] |= 4u;
      v7[4] = v10;
      v11 = *((unsigned __int8 *)this + 56);
      if (!CLMicroLocationProto::RecordingRequestType_IsValid((CLMicroLocationProto *)*((unsigned __int8 *)this + 56)))
        __assert_rtn("set_devicetype", "microlocation.pb.h", 10112, "::CLMicroLocationProto::UwbRange_DeviceType_IsValid(value)");
      v20 = v11;
      v22 |= 0xE0u;
      v21 = *(_QWORD *)((char *)this + 60);
      CLMicroLocationProto::UwbRange::UwbRange(a2, (const CLMicroLocationProto::UwbRange *)v15);
      v12 = 1;
    }
    else
    {
      if (onceToken_MicroLocation_Default != -1)
        dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_93);
      v13 = logObject_MicroLocation_Default;
      if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_ERROR))
      {
        LOWORD(__p.__r_.__value_.__l.__data_) = 0;
        _os_log_impl(&dword_2419D9000, v13, OS_LOG_TYPE_ERROR, "Invalid UwbRange IDS UUID", (uint8_t *)&__p, 2u);
      }
      v12 = 0;
      *(_BYTE *)a2 = 0;
    }
    *((_BYTE *)a2 + 64) = v12;
    CLMicroLocationProto::UwbRange::~UwbRange((CLMicroLocationProto::UwbRange *)v15);
  }
  else
  {
    *(_BYTE *)a2 = 0;
    *((_BYTE *)a2 + 64) = 0;
  }
}

void sub_241B19C8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16)
{
  uint64_t v16;

  MEMORY[0x2426A04D4](v16, 0x1081C40DCAC275BLL);
  CLMicroLocationProto::UwbRange::~UwbRange((CLMicroLocationProto::UwbRange *)&a16);
  _Unwind_Resume(a1);
}

void CLMicroLocationProtobufHelper::measurementFromSourceImpl(CLMicroLocationProtobufHelper *this, CLMicroLocationProto::Measurement *a2, const CLMicroLocationProto::WiFiRssi *a3)
{
  CLMicroLocationProto::WiFiRssi *v4;

  *((_DWORD *)this + 18) |= 4u;
  v4 = (CLMicroLocationProto::WiFiRssi *)*((_QWORD *)this + 2);
  if (!v4)
  {
    v4 = (CLMicroLocationProto::WiFiRssi *)operator new();
    CLMicroLocationProto::WiFiRssi::WiFiRssi((uint64_t)v4);
    *((_QWORD *)this + 2) = v4;
  }
  CLMicroLocationProto::WiFiRssi::CopyFrom(v4, a2);
}

void sub_241B19D4C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2426A04D4](v1, 0x1081C408C76C282);
  _Unwind_Resume(a1);
}

void CLMicroLocationProtobufHelper::measurementFromSourceImpl(CLMicroLocationProtobufHelper *this, CLMicroLocationProto::Measurement *a2, const CLMicroLocationProto::BleLeechedBeacons *a3)
{
  CLMicroLocationProto::BleLeechedBeacons *v4;

  *((_DWORD *)this + 18) |= 0x40u;
  v4 = (CLMicroLocationProto::BleLeechedBeacons *)*((_QWORD *)this + 6);
  if (!v4)
  {
    v4 = (CLMicroLocationProto::BleLeechedBeacons *)operator new();
    CLMicroLocationProto::BleLeechedBeacons::BleLeechedBeacons((uint64_t)v4);
    *((_QWORD *)this + 6) = v4;
  }
  CLMicroLocationProto::BleLeechedBeacons::CopyFrom(v4, a2);
}

void sub_241B19DD8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2426A04D4](v1, 0x10A1C40B0912749);
  _Unwind_Resume(a1);
}

float CLMicroLocationProtobufHelper::measurementFromSourceImpl(CLMicroLocationProtobufHelper *this, CLMicroLocationProto::Measurement *a2, const CLMicroLocationProto::UwbRange *a3)
{
  CLMicroLocationProto::UwbRange *v4;

  *((_DWORD *)this + 18) |= 0x80u;
  v4 = (CLMicroLocationProto::UwbRange *)*((_QWORD *)this + 7);
  if (!v4)
  {
    v4 = (CLMicroLocationProto::UwbRange *)operator new();
    CLMicroLocationProto::UwbRange::UwbRange((uint64_t)v4);
    *((_QWORD *)this + 7) = v4;
  }
  return CLMicroLocationProto::UwbRange::CopyFrom(v4, a2);
}

void sub_241B19E64(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2426A04D4](v1, 0x10A1C4088FE0471);
  _Unwind_Resume(a1);
}

void CLMicroLocationProtobufHelper::setSpecificRecordingEvent(CLMicroLocationProtobufHelper *this, CLMicroLocationProto::RecordingEvent *a2, const CLMicroLocationProto::AppLaunch *a3)
{
  CLMicroLocationProto::AppLaunch *v4;

  *((_DWORD *)this + 35) |= 8u;
  v4 = (CLMicroLocationProto::AppLaunch *)*((_QWORD *)this + 3);
  if (!v4)
  {
    v4 = (CLMicroLocationProto::AppLaunch *)operator new();
    CLMicroLocationProto::AppLaunch::AppLaunch(v4);
    *((_QWORD *)this + 3) = v4;
  }
  CLMicroLocationProto::AppLaunch::CopyFrom(v4, a2);
}

void sub_241B19EF0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2426A04D4](v1, 0x10A1C406601F8D4);
  _Unwind_Resume(a1);
}

void CLMicroLocationProtobufHelper::setSpecificRecordingEvent(CLMicroLocationProtobufHelper *this, CLMicroLocationProto::RecordingEvent *a2, const CLMicroLocationProto::BatteryChargerConnected *a3)
{
  CLMicroLocationProto::BatteryChargerConnected *v4;

  *((_DWORD *)this + 35) |= 0x20u;
  v4 = (CLMicroLocationProto::BatteryChargerConnected *)*((_QWORD *)this + 5);
  if (!v4)
  {
    v4 = (CLMicroLocationProto::BatteryChargerConnected *)operator new();
    CLMicroLocationProto::BatteryChargerConnected::BatteryChargerConnected(v4);
    *((_QWORD *)this + 5) = v4;
  }
  CLMicroLocationProto::BatteryChargerConnected::CopyFrom(v4, a2);
}

void sub_241B19F7C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2426A04D4](v1, 0x1081C40A085CBA5);
  _Unwind_Resume(a1);
}

void CLMicroLocationProtobufHelper::setSpecificRecordingEvent(CLMicroLocationProtobufHelper *this, CLMicroLocationProto::RecordingEvent *a2, const CLMicroLocationProto::ReceivedEventAction *a3)
{
  CLMicroLocationProto::ReceivedEventAction *v4;

  *((_DWORD *)this + 35) |= 4u;
  v4 = (CLMicroLocationProto::ReceivedEventAction *)*((_QWORD *)this + 2);
  if (!v4)
  {
    v4 = (CLMicroLocationProto::ReceivedEventAction *)operator new();
    CLMicroLocationProto::ReceivedEventAction::ReceivedEventAction(v4);
    *((_QWORD *)this + 2) = v4;
  }
  CLMicroLocationProto::ReceivedEventAction::CopyFrom(v4, a2);
}

void sub_241B1A008(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2426A04D4](v1, 0x10A1C40D3419C06);
  _Unwind_Resume(a1);
}

void CLMicroLocationProtobufHelper::setSpecificRecordingEvent(CLMicroLocationProtobufHelper *this, CLMicroLocationProto::RecordingEvent *a2, const CLMicroLocationProto::ForcedRecording *a3)
{
  CLMicroLocationProto::ForcedRecording *v4;

  *((_DWORD *)this + 35) |= 0x40u;
  v4 = (CLMicroLocationProto::ForcedRecording *)*((_QWORD *)this + 6);
  if (!v4)
  {
    v4 = (CLMicroLocationProto::ForcedRecording *)operator new();
    CLMicroLocationProto::ForcedRecording::ForcedRecording(v4);
    *((_QWORD *)this + 6) = v4;
  }
  CLMicroLocationProto::ForcedRecording::CopyFrom(v4, a2);
}

void sub_241B1A094(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2426A04D4](v1, 0x1081C40A085CBA5);
  _Unwind_Resume(a1);
}

void CLMicroLocationProtobufHelper::setSpecificRecordingEvent(CLMicroLocationProtobufHelper *this, CLMicroLocationProto::RecordingEvent *a2, const CLMicroLocationProto::HomeKitAccessory *a3)
{
  CLMicroLocationProto::HomeKitAccessory *v4;

  *((_DWORD *)this + 35) |= 0x80u;
  v4 = (CLMicroLocationProto::HomeKitAccessory *)*((_QWORD *)this + 7);
  if (!v4)
  {
    v4 = (CLMicroLocationProto::HomeKitAccessory *)operator new();
    CLMicroLocationProto::HomeKitAccessory::HomeKitAccessory((uint64_t)v4);
    *((_QWORD *)this + 7) = v4;
  }
  CLMicroLocationProto::HomeKitAccessory::CopyFrom(v4, a2);
}

void sub_241B1A120(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2426A04D4](v1, 0x10A1C406EC470D0);
  _Unwind_Resume(a1);
}

void CLMicroLocationProtobufHelper::setSpecificRecordingEvent(CLMicroLocationProtobufHelper *this, CLMicroLocationProto::RecordingEvent *a2, const CLMicroLocationProto::HomeKitScene *a3)
{
  CLMicroLocationProto::HomeKitScene *v4;

  *((_DWORD *)this + 35) |= 0x100u;
  v4 = (CLMicroLocationProto::HomeKitScene *)*((_QWORD *)this + 8);
  if (!v4)
  {
    v4 = (CLMicroLocationProto::HomeKitScene *)operator new();
    CLMicroLocationProto::HomeKitScene::HomeKitScene((uint64_t)v4);
    *((_QWORD *)this + 8) = v4;
  }
  CLMicroLocationProto::HomeKitScene::CopyFrom(v4, a2);
}

void sub_241B1A1AC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2426A04D4](v1, 0x10A1C40E994B4B5);
  _Unwind_Resume(a1);
}

void CLMicroLocationProtobufHelper::setSpecificConfiguration(CLMicroLocationProtobufHelper *this, CLMicroLocationProto::Configuration *a2, const CLMicroLocationProto::WifiHistogram *a3)
{
  CLMicroLocationProto::WifiHistogram *v4;

  *((_DWORD *)this + 12) |= 4u;
  v4 = (CLMicroLocationProto::WifiHistogram *)*((_QWORD *)this + 2);
  if (!v4)
  {
    v4 = (CLMicroLocationProto::WifiHistogram *)operator new();
    CLMicroLocationProto::WifiHistogram::WifiHistogram((uint64_t)v4);
    *((_QWORD *)this + 2) = v4;
  }
  CLMicroLocationProto::WifiHistogram::CopyFrom(v4, a2);
}

void sub_241B1A238(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2426A04D4](v1, 0x1081C40845F3030);
  _Unwind_Resume(a1);
}

void CLMicroLocationProtobufHelper::setSpecificConfiguration(CLMicroLocationProtobufHelper *this, CLMicroLocationProto::Configuration *a2, const CLMicroLocationProto::AnchorAppearanceConfiguration *a3)
{
  CLMicroLocationProto::AnchorAppearanceConfiguration *v4;

  *((_DWORD *)this + 12) |= 8u;
  v4 = (CLMicroLocationProto::AnchorAppearanceConfiguration *)*((_QWORD *)this + 3);
  if (!v4)
  {
    v4 = (CLMicroLocationProto::AnchorAppearanceConfiguration *)operator new();
    CLMicroLocationProto::AnchorAppearanceConfiguration::AnchorAppearanceConfiguration(v4);
    *((_QWORD *)this + 3) = v4;
  }
  CLMicroLocationProto::AnchorAppearanceConfiguration::CopyFrom(v4, a2);
}

void sub_241B1A2C4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2426A04D4](v1, 0x10A1C40F536243ELL);
  _Unwind_Resume(a1);
}

void CLMicroLocationProtobufHelper::setSpecificConfiguration(CLMicroLocationProtobufHelper *this, CLMicroLocationProto::Configuration *a2, const CLMicroLocationProto::AnchorValueStatisticsConfiguration *a3)
{
  CLMicroLocationProto::AnchorValueStatisticsConfiguration *v4;

  *((_DWORD *)this + 12) |= 0x10u;
  v4 = (CLMicroLocationProto::AnchorValueStatisticsConfiguration *)*((_QWORD *)this + 4);
  if (!v4)
  {
    v4 = (CLMicroLocationProto::AnchorValueStatisticsConfiguration *)operator new();
    CLMicroLocationProto::AnchorValueStatisticsConfiguration::AnchorValueStatisticsConfiguration(v4);
    *((_QWORD *)this + 4) = v4;
  }
  CLMicroLocationProto::AnchorValueStatisticsConfiguration::CopyFrom(v4, a2);
}

void sub_241B1A350(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2426A04D4](v1, 0x10A1C40BEA49330);
  _Unwind_Resume(a1);
}

void CLMicroLocationProtobufHelper::setSpecificRecordingEvent(CLMicroLocationProtobufHelper *this, CLMicroLocationProto::RecordingEvent *a2, const CLMicroLocationProto::BacklightOn *a3)
{
  CLMicroLocationProto::BacklightOn *v4;

  *((_DWORD *)this + 35) |= 0x10u;
  v4 = (CLMicroLocationProto::BacklightOn *)*((_QWORD *)this + 4);
  if (!v4)
  {
    v4 = (CLMicroLocationProto::BacklightOn *)operator new();
    CLMicroLocationProto::BacklightOn::BacklightOn(v4);
    *((_QWORD *)this + 4) = v4;
  }
  CLMicroLocationProto::BacklightOn::CopyFrom(v4, a2);
}

void sub_241B1A3DC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2426A04D4](v1, 0x10A1C40F536243ELL);
  _Unwind_Resume(a1);
}

void CLMicroLocationProtobufHelper::setSpecificRecordingEvent(CLMicroLocationProtobufHelper *this, CLMicroLocationProto::RecordingEvent *a2, const CLMicroLocationProto::RecordingRequest *a3)
{
  CLMicroLocationProto::RecordingRequest *v4;

  *((_DWORD *)this + 35) |= 0x400u;
  v4 = (CLMicroLocationProto::RecordingRequest *)*((_QWORD *)this + 11);
  if (!v4)
  {
    v4 = (CLMicroLocationProto::RecordingRequest *)operator new();
    CLMicroLocationProto::RecordingRequest::RecordingRequest(v4);
    *((_QWORD *)this + 11) = v4;
  }
  CLMicroLocationProto::RecordingRequest::CopyFrom(v4, a2);
}

void sub_241B1A468(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2426A04D4](v1, 0x10A1C40D3419C06);
  _Unwind_Resume(a1);
}

void CLMicroLocationProtobufHelper::setSpecificRecordingEvent(CLMicroLocationProtobufHelper *this, CLMicroLocationProto::RecordingEvent *a2, const CLMicroLocationProto::TruthLabelDonation *a3)
{
  CLMicroLocationProto::TruthLabelDonation *v4;

  *((_DWORD *)this + 35) |= 0x1000u;
  v4 = (CLMicroLocationProto::TruthLabelDonation *)*((_QWORD *)this + 12);
  if (!v4)
  {
    v4 = (CLMicroLocationProto::TruthLabelDonation *)operator new();
    CLMicroLocationProto::TruthLabelDonation::TruthLabelDonation(v4);
    *((_QWORD *)this + 12) = v4;
  }
  CLMicroLocationProto::TruthLabelDonation::CopyFrom(v4, a2);
}

void sub_241B1A4F4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2426A04D4](v1, 0x10A1C406601F8D4);
  _Unwind_Resume(a1);
}

void CLMicroLocationProtobufHelper::setSpecificLoggedEvent(CLMicroLocationProtobufHelper *this, CLMicroLocationProto::ReceivedEvent *a2, const CLMicroLocationProto::BatteryChargerConnected *a3)
{
  CLMicroLocationProto::BatteryChargerConnected *v4;

  *((_DWORD *)this + 73) |= 8u;
  v4 = (CLMicroLocationProto::BatteryChargerConnected *)*((_QWORD *)this + 4);
  if (!v4)
  {
    v4 = (CLMicroLocationProto::BatteryChargerConnected *)operator new();
    CLMicroLocationProto::BatteryChargerConnected::BatteryChargerConnected(v4);
    *((_QWORD *)this + 4) = v4;
  }
  CLMicroLocationProto::BatteryChargerConnected::CopyFrom(v4, a2);
}

void sub_241B1A580(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2426A04D4](v1, 0x1081C40A085CBA5);
  _Unwind_Resume(a1);
}

void CLMicroLocationProtobufHelper::setSpecificLoggedEvent(CLMicroLocationProtobufHelper *this, CLMicroLocationProto::ReceivedEvent *a2, const CLMicroLocationProto::ReceivedEventAction *a3)
{
  CLMicroLocationProto::ReceivedEventAction *v4;

  *((_DWORD *)this + 73) |= 1u;
  v4 = (CLMicroLocationProto::ReceivedEventAction *)*((_QWORD *)this + 1);
  if (!v4)
  {
    v4 = (CLMicroLocationProto::ReceivedEventAction *)operator new();
    CLMicroLocationProto::ReceivedEventAction::ReceivedEventAction(v4);
    *((_QWORD *)this + 1) = v4;
  }
  CLMicroLocationProto::ReceivedEventAction::CopyFrom(v4, a2);
}

void sub_241B1A60C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2426A04D4](v1, 0x10A1C40D3419C06);
  _Unwind_Resume(a1);
}

void CLMicroLocationProtobufHelper::setSpecificLoggedEvent(CLMicroLocationProtobufHelper *this, CLMicroLocationProto::ReceivedEvent *a2, const CLMicroLocationProto::ForcedRecording *a3)
{
  CLMicroLocationProto::ForcedRecording *v4;

  *((_DWORD *)this + 73) |= 0x10u;
  v4 = (CLMicroLocationProto::ForcedRecording *)*((_QWORD *)this + 5);
  if (!v4)
  {
    v4 = (CLMicroLocationProto::ForcedRecording *)operator new();
    CLMicroLocationProto::ForcedRecording::ForcedRecording(v4);
    *((_QWORD *)this + 5) = v4;
  }
  CLMicroLocationProto::ForcedRecording::CopyFrom(v4, a2);
}

void sub_241B1A698(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2426A04D4](v1, 0x1081C40A085CBA5);
  _Unwind_Resume(a1);
}

void CLMicroLocationProtobufHelper::setSpecificLoggedEvent(CLMicroLocationProtobufHelper *this, CLMicroLocationProto::ReceivedEvent *a2, const CLMicroLocationProto::HomeKitAccessory *a3)
{
  CLMicroLocationProto::HomeKitAccessory *v4;

  *((_DWORD *)this + 73) |= 0x20u;
  v4 = (CLMicroLocationProto::HomeKitAccessory *)*((_QWORD *)this + 6);
  if (!v4)
  {
    v4 = (CLMicroLocationProto::HomeKitAccessory *)operator new();
    CLMicroLocationProto::HomeKitAccessory::HomeKitAccessory((uint64_t)v4);
    *((_QWORD *)this + 6) = v4;
  }
  CLMicroLocationProto::HomeKitAccessory::CopyFrom(v4, a2);
}

void sub_241B1A724(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2426A04D4](v1, 0x10A1C406EC470D0);
  _Unwind_Resume(a1);
}

void CLMicroLocationProtobufHelper::setSpecificLoggedEvent(CLMicroLocationProtobufHelper *this, CLMicroLocationProto::ReceivedEvent *a2, const CLMicroLocationProto::HomeKitScene *a3)
{
  CLMicroLocationProto::HomeKitScene *v4;

  *((_DWORD *)this + 73) |= 0x40u;
  v4 = (CLMicroLocationProto::HomeKitScene *)*((_QWORD *)this + 7);
  if (!v4)
  {
    v4 = (CLMicroLocationProto::HomeKitScene *)operator new();
    CLMicroLocationProto::HomeKitScene::HomeKitScene((uint64_t)v4);
    *((_QWORD *)this + 7) = v4;
  }
  CLMicroLocationProto::HomeKitScene::CopyFrom(v4, a2);
}

void sub_241B1A7B0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2426A04D4](v1, 0x10A1C40E994B4B5);
  _Unwind_Resume(a1);
}

void CLMicroLocationProtobufHelper::setSpecificLoggedEvent(CLMicroLocationProtobufHelper *this, CLMicroLocationProto::ReceivedEvent *a2, const CLMicroLocationProto::BacklightOn *a3)
{
  CLMicroLocationProto::BacklightOn *v4;

  *((_DWORD *)this + 73) |= 4u;
  v4 = (CLMicroLocationProto::BacklightOn *)*((_QWORD *)this + 3);
  if (!v4)
  {
    v4 = (CLMicroLocationProto::BacklightOn *)operator new();
    CLMicroLocationProto::BacklightOn::BacklightOn(v4);
    *((_QWORD *)this + 3) = v4;
  }
  CLMicroLocationProto::BacklightOn::CopyFrom(v4, a2);
}

void sub_241B1A83C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2426A04D4](v1, 0x10A1C40F536243ELL);
  _Unwind_Resume(a1);
}

void CLMicroLocationProtobufHelper::setSpecificLoggedEvent(CLMicroLocationProtobufHelper *this, CLMicroLocationProto::ReceivedEvent *a2, const CLMicroLocationProto::RecordingRequest *a3)
{
  CLMicroLocationProto::RecordingRequest *v4;

  *((_DWORD *)this + 73) |= 0x100u;
  v4 = (CLMicroLocationProto::RecordingRequest *)*((_QWORD *)this + 9);
  if (!v4)
  {
    v4 = (CLMicroLocationProto::RecordingRequest *)operator new();
    CLMicroLocationProto::RecordingRequest::RecordingRequest(v4);
    *((_QWORD *)this + 9) = v4;
  }
  CLMicroLocationProto::RecordingRequest::CopyFrom(v4, a2);
}

void sub_241B1A8C8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2426A04D4](v1, 0x10A1C40D3419C06);
  _Unwind_Resume(a1);
}

void CLMicroLocationProtobufHelper::setSpecificLoggedEvent(CLMicroLocationProtobufHelper *this, CLMicroLocationProto::ReceivedEvent *a2, const CLMicroLocationProto::LearnModel *a3)
{
  CLMicroLocationProto::LearnModel *v4;

  *((_DWORD *)this + 73) |= 0x400u;
  v4 = (CLMicroLocationProto::LearnModel *)*((_QWORD *)this + 11);
  if (!v4)
  {
    v4 = (CLMicroLocationProto::LearnModel *)operator new();
    CLMicroLocationProto::LearnModel::LearnModel(v4);
    *((_QWORD *)this + 11) = v4;
  }
  CLMicroLocationProto::LearnModel::CopyFrom(v4, a2);
}

void sub_241B1A954(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2426A04D4](v1, 0x1081C40A085CBA5);
  _Unwind_Resume(a1);
}

void CLMicroLocationProtobufHelper::setSpecificLoggedEvent(CLMicroLocationProtobufHelper *this, CLMicroLocationProto::ReceivedEvent *a2, const CLMicroLocationProto::LearnCompleted *a3)
{
  CLMicroLocationProto::LearnCompleted *v4;

  *((_DWORD *)this + 73) |= 0x800u;
  v4 = (CLMicroLocationProto::LearnCompleted *)*((_QWORD *)this + 12);
  if (!v4)
  {
    v4 = (CLMicroLocationProto::LearnCompleted *)operator new();
    CLMicroLocationProto::LearnCompleted::LearnCompleted(v4);
    *((_QWORD *)this + 12) = v4;
  }
  CLMicroLocationProto::LearnCompleted::CopyFrom(v4, a2);
}

void sub_241B1A9E0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2426A04D4](v1, 0x1081C40A085CBA5);
  _Unwind_Resume(a1);
}

void CLMicroLocationProtobufHelper::setSpecificLoggedEvent(CLMicroLocationProtobufHelper *this, CLMicroLocationProto::ReceivedEvent *a2, const CLMicroLocationProto::SensorsScanComplete *a3)
{
  CLMicroLocationProto::SensorsScanComplete *v4;

  *((_DWORD *)this + 73) |= 0x1000u;
  v4 = (CLMicroLocationProto::SensorsScanComplete *)*((_QWORD *)this + 13);
  if (!v4)
  {
    v4 = (CLMicroLocationProto::SensorsScanComplete *)operator new();
    CLMicroLocationProto::SensorsScanComplete::SensorsScanComplete(v4);
    *((_QWORD *)this + 13) = v4;
  }
  CLMicroLocationProto::SensorsScanComplete::CopyFrom(v4, a2);
}

void sub_241B1AA6C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2426A04D4](v1, 0x1081C40A085CBA5);
  _Unwind_Resume(a1);
}

void CLMicroLocationProtobufHelper::setSpecificLoggedEvent(CLMicroLocationProtobufHelper *this, CLMicroLocationProto::ReceivedEvent *a2, const CLMicroLocationProto::StartSpectating *a3)
{
  CLMicroLocationProto::StartSpectating *v4;

  *((_DWORD *)this + 73) |= 0x2000u;
  v4 = (CLMicroLocationProto::StartSpectating *)*((_QWORD *)this + 14);
  if (!v4)
  {
    v4 = (CLMicroLocationProto::StartSpectating *)operator new();
    CLMicroLocationProto::StartSpectating::StartSpectating(v4);
    *((_QWORD *)this + 14) = v4;
  }
  CLMicroLocationProto::StartSpectating::CopyFrom(v4, a2);
}

void sub_241B1AAF8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2426A04D4](v1, 0x1081C40A085CBA5);
  _Unwind_Resume(a1);
}

void CLMicroLocationProtobufHelper::setSpecificLoggedEvent(CLMicroLocationProtobufHelper *this, CLMicroLocationProto::ReceivedEvent *a2, const CLMicroLocationProto::StopSpectating *a3)
{
  CLMicroLocationProto::StopSpectating *v4;

  *((_DWORD *)this + 73) |= 0x4000u;
  v4 = (CLMicroLocationProto::StopSpectating *)*((_QWORD *)this + 15);
  if (!v4)
  {
    v4 = (CLMicroLocationProto::StopSpectating *)operator new();
    CLMicroLocationProto::StopSpectating::StopSpectating(v4);
    *((_QWORD *)this + 15) = v4;
  }
  CLMicroLocationProto::StopSpectating::CopyFrom(v4, a2);
}

void sub_241B1AB84(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2426A04D4](v1, 0x1081C40A085CBA5);
  _Unwind_Resume(a1);
}

void CLMicroLocationProtobufHelper::setSpecificLoggedEvent(CLMicroLocationProtobufHelper *this, CLMicroLocationProto::ReceivedEvent *a2, const CLMicroLocationProto::ServiceDelete *a3)
{
  CLMicroLocationProto::ServiceDelete *v4;

  *((_DWORD *)this + 73) |= 0x10000u;
  v4 = (CLMicroLocationProto::ServiceDelete *)*((_QWORD *)this + 17);
  if (!v4)
  {
    v4 = (CLMicroLocationProto::ServiceDelete *)operator new();
    CLMicroLocationProto::ServiceDelete::ServiceDelete(v4);
    *((_QWORD *)this + 17) = v4;
  }
  CLMicroLocationProto::ServiceDelete::CopyFrom(v4, a2);
}

void sub_241B1AC10(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2426A04D4](v1, 0x10A1C40BEA49330);
  _Unwind_Resume(a1);
}

void CLMicroLocationProtobufHelper::setSpecificLoggedEvent(CLMicroLocationProtobufHelper *this, CLMicroLocationProto::ReceivedEvent *a2, const CLMicroLocationProto::ServiceConnect *a3)
{
  CLMicroLocationProto::ServiceConnect *v4;

  *((_DWORD *)this + 73) |= 0x20000u;
  v4 = (CLMicroLocationProto::ServiceConnect *)*((_QWORD *)this + 18);
  if (!v4)
  {
    v4 = (CLMicroLocationProto::ServiceConnect *)operator new();
    CLMicroLocationProto::ServiceConnect::ServiceConnect(v4);
    *((_QWORD *)this + 18) = v4;
  }
  CLMicroLocationProto::ServiceConnect::CopyFrom(v4, a2);
}

void sub_241B1AC9C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2426A04D4](v1, 0x10A1C40BEA49330);
  _Unwind_Resume(a1);
}

void CLMicroLocationProtobufHelper::setSpecificLoggedEvent(CLMicroLocationProtobufHelper *this, CLMicroLocationProto::ReceivedEvent *a2, const CLMicroLocationProto::ServiceDisconnect *a3)
{
  CLMicroLocationProto::ServiceDisconnect *v4;

  *((_DWORD *)this + 73) |= 0x40000u;
  v4 = (CLMicroLocationProto::ServiceDisconnect *)*((_QWORD *)this + 19);
  if (!v4)
  {
    v4 = (CLMicroLocationProto::ServiceDisconnect *)operator new();
    CLMicroLocationProto::ServiceDisconnect::ServiceDisconnect(v4);
    *((_QWORD *)this + 19) = v4;
  }
  CLMicroLocationProto::ServiceDisconnect::CopyFrom(v4, a2);
}

void sub_241B1AD28(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2426A04D4](v1, 0x10A1C40BEA49330);
  _Unwind_Resume(a1);
}

void CLMicroLocationProtobufHelper::setSpecificLoggedEvent(CLMicroLocationProtobufHelper *this, CLMicroLocationProto::ReceivedEvent *a2, const CLMicroLocationProto::ServiceStartUpdating *a3)
{
  CLMicroLocationProto::ServiceStartUpdating *v4;

  *((_DWORD *)this + 73) |= 0x80000u;
  v4 = (CLMicroLocationProto::ServiceStartUpdating *)*((_QWORD *)this + 20);
  if (!v4)
  {
    v4 = (CLMicroLocationProto::ServiceStartUpdating *)operator new();
    CLMicroLocationProto::ServiceStartUpdating::ServiceStartUpdating((uint64_t)v4);
    *((_QWORD *)this + 20) = v4;
  }
  CLMicroLocationProto::ServiceStartUpdating::CopyFrom(v4, a2);
}

void sub_241B1ADB4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2426A04D4](v1, 0x10A1C40A5BE3A87);
  _Unwind_Resume(a1);
}

void CLMicroLocationProtobufHelper::setSpecificLoggedEvent(CLMicroLocationProtobufHelper *this, CLMicroLocationProto::ReceivedEvent *a2, const CLMicroLocationProto::ServiceStopUpdating *a3)
{
  CLMicroLocationProto::ServiceStopUpdating *v4;

  *((_DWORD *)this + 73) |= 0x100000u;
  v4 = (CLMicroLocationProto::ServiceStopUpdating *)*((_QWORD *)this + 21);
  if (!v4)
  {
    v4 = (CLMicroLocationProto::ServiceStopUpdating *)operator new();
    CLMicroLocationProto::ServiceStopUpdating::ServiceStopUpdating(v4);
    *((_QWORD *)this + 21) = v4;
  }
  CLMicroLocationProto::ServiceStopUpdating::CopyFrom(v4, a2);
}

void sub_241B1AE40(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2426A04D4](v1, 0x10A1C40BEA49330);
  _Unwind_Resume(a1);
}

void CLMicroLocationProtobufHelper::setSpecificLoggedEvent(CLMicroLocationProtobufHelper *this, CLMicroLocationProto::ReceivedEvent *a2, const CLMicroLocationProto::RequestObservation *a3)
{
  CLMicroLocationProto::RequestObservation *v4;

  *((_DWORD *)this + 73) |= 0x200000u;
  v4 = (CLMicroLocationProto::RequestObservation *)*((_QWORD *)this + 22);
  if (!v4)
  {
    v4 = (CLMicroLocationProto::RequestObservation *)operator new();
    CLMicroLocationProto::RequestObservation::RequestObservation(v4);
    *((_QWORD *)this + 22) = v4;
  }
  CLMicroLocationProto::RequestObservation::CopyFrom(v4, a2);
}

void sub_241B1AECC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2426A04D4](v1, 0x10A1C40082A98A3);
  _Unwind_Resume(a1);
}

void CLMicroLocationProtobufHelper::setSpecificLoggedEvent(CLMicroLocationProtobufHelper *this, CLMicroLocationProto::ReceivedEvent *a2, const CLMicroLocationProto::RequestPrediction *a3)
{
  CLMicroLocationProto::RequestPrediction *v4;

  *((_DWORD *)this + 73) |= 0x400000u;
  v4 = (CLMicroLocationProto::RequestPrediction *)*((_QWORD *)this + 23);
  if (!v4)
  {
    v4 = (CLMicroLocationProto::RequestPrediction *)operator new();
    CLMicroLocationProto::RequestPrediction::RequestPrediction(v4);
    *((_QWORD *)this + 23) = v4;
  }
  CLMicroLocationProto::RequestPrediction::CopyFrom(v4, a2);
}

void sub_241B1AF58(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2426A04D4](v1, 0x10A1C406601F8D4);
  _Unwind_Resume(a1);
}

void CLMicroLocationProtobufHelper::setSpecificLoggedEvent(CLMicroLocationProtobufHelper *this, CLMicroLocationProto::ReceivedEvent *a2, const CLMicroLocationProto::MiloInit *a3)
{
  CLMicroLocationProto::MiloInit *v4;

  *((_DWORD *)this + 73) |= 0x800000u;
  v4 = (CLMicroLocationProto::MiloInit *)*((_QWORD *)this + 24);
  if (!v4)
  {
    v4 = (CLMicroLocationProto::MiloInit *)operator new();
    CLMicroLocationProto::MiloInit::MiloInit(v4);
    *((_QWORD *)this + 24) = v4;
  }
  CLMicroLocationProto::MiloInit::CopyFrom(v4, a2);
}

void sub_241B1AFE4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2426A04D4](v1, 0x10A1C40F536243ELL);
  _Unwind_Resume(a1);
}

void CLMicroLocationProtobufHelper::setSpecificLoggedEvent(CLMicroLocationProtobufHelper *this, CLMicroLocationProto::ReceivedEvent *a2, const CLMicroLocationProto::MotionEvent *a3)
{
  CLMicroLocationProto::MotionEvent *v4;

  *((_DWORD *)this + 73) |= 0x1000000u;
  v4 = (CLMicroLocationProto::MotionEvent *)*((_QWORD *)this + 25);
  if (!v4)
  {
    v4 = (CLMicroLocationProto::MotionEvent *)operator new();
    CLMicroLocationProto::MotionEvent::MotionEvent(v4);
    *((_QWORD *)this + 25) = v4;
  }
  CLMicroLocationProto::MotionEvent::CopyFrom(v4, a2);
}

void sub_241B1B070(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2426A04D4](v1, 0x10A1C40FBBAD689);
  _Unwind_Resume(a1);
}

void CLMicroLocationProtobufHelper::setSpecificLoggedEvent(CLMicroLocationProtobufHelper *this, CLMicroLocationProto::ReceivedEvent *a2, const CLMicroLocationProto::LegacyThrottle *a3)
{
  CLMicroLocationProto::LegacyThrottle *v4;

  *((_DWORD *)this + 73) |= 0x2000000u;
  v4 = (CLMicroLocationProto::LegacyThrottle *)*((_QWORD *)this + 26);
  if (!v4)
  {
    v4 = (CLMicroLocationProto::LegacyThrottle *)operator new();
    CLMicroLocationProto::LegacyThrottle::LegacyThrottle(v4);
    *((_QWORD *)this + 26) = v4;
  }
  CLMicroLocationProto::LegacyThrottle::CopyFrom(v4, a2);
}

void sub_241B1B0FC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2426A04D4](v1, 0x10A1C40F536243ELL);
  _Unwind_Resume(a1);
}

void CLMicroLocationProtobufHelper::setSpecificLoggedEvent(CLMicroLocationProtobufHelper *this, CLMicroLocationProto::ReceivedEvent *a2, const CLMicroLocationProto::RetrievedLoi *a3)
{
  CLMicroLocationProto::RetrievedLoi *v4;

  *((_DWORD *)this + 73) |= 0x4000000u;
  v4 = (CLMicroLocationProto::RetrievedLoi *)*((_QWORD *)this + 27);
  if (!v4)
  {
    v4 = (CLMicroLocationProto::RetrievedLoi *)operator new();
    CLMicroLocationProto::RetrievedLoi::RetrievedLoi(v4);
    *((_QWORD *)this + 27) = v4;
  }
  CLMicroLocationProto::RetrievedLoi::CopyFrom(v4, a2);
}

void sub_241B1B188(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2426A04D4](v1, 0x10A1C40A8383B57);
  _Unwind_Resume(a1);
}

void CLMicroLocationProtobufHelper::setSpecificLoggedEvent(CLMicroLocationProtobufHelper *this, CLMicroLocationProto::ReceivedEvent *a2, const CLMicroLocationProto::TriggerEvent *a3)
{
  CLMicroLocationProto::TriggerEvent *v4;

  *((_DWORD *)this + 73) |= 0x8000000u;
  v4 = (CLMicroLocationProto::TriggerEvent *)*((_QWORD *)this + 28);
  if (!v4)
  {
    v4 = (CLMicroLocationProto::TriggerEvent *)operator new();
    CLMicroLocationProto::TriggerEvent::TriggerEvent((uint64_t)v4);
    *((_QWORD *)this + 28) = v4;
  }
  CLMicroLocationProto::TriggerEvent::CopyFrom(v4, a2);
}

void sub_241B1B214(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2426A04D4](v1, 0x10A1C40640848C1);
  _Unwind_Resume(a1);
}

void CLMicroLocationProtobufHelper::setSpecificLoggedEvent(CLMicroLocationProtobufHelper *this, CLMicroLocationProto::ReceivedEvent *a2, const CLMicroLocationProto::LegacyClientStatusUpdate *a3)
{
  CLMicroLocationProto::LegacyClientStatusUpdate *v4;

  *((_DWORD *)this + 73) |= 0x10000000u;
  v4 = (CLMicroLocationProto::LegacyClientStatusUpdate *)*((_QWORD *)this + 29);
  if (!v4)
  {
    v4 = (CLMicroLocationProto::LegacyClientStatusUpdate *)operator new();
    CLMicroLocationProto::LegacyClientStatusUpdate::LegacyClientStatusUpdate(v4);
    *((_QWORD *)this + 29) = v4;
  }
  CLMicroLocationProto::LegacyClientStatusUpdate::CopyFrom(v4, a2);
}

void sub_241B1B2A0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2426A04D4](v1, 0x1081C40DCAC275BLL);
  _Unwind_Resume(a1);
}

void CLMicroLocationProtobufHelper::setSpecificLoggedEvent(CLMicroLocationProtobufHelper *this, CLMicroLocationProto::ReceivedEvent *a2, const CLMicroLocationProto::SpectatingMotionUpdate *a3)
{
  CLMicroLocationProto::SpectatingMotionUpdate *v4;

  *((_DWORD *)this + 73) |= 0x20000000u;
  v4 = (CLMicroLocationProto::SpectatingMotionUpdate *)*((_QWORD *)this + 30);
  if (!v4)
  {
    v4 = (CLMicroLocationProto::SpectatingMotionUpdate *)operator new();
    CLMicroLocationProto::SpectatingMotionUpdate::SpectatingMotionUpdate((uint64_t)v4);
    *((_QWORD *)this + 30) = v4;
  }
  CLMicroLocationProto::SpectatingMotionUpdate::CopyFrom(v4, a2);
}

void sub_241B1B32C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2426A04D4](v1, 0x1081C40AEC5023ALL);
  _Unwind_Resume(a1);
}

void CLMicroLocationProtobufHelper::setSpecificLoggedEvent(CLMicroLocationProtobufHelper *this, CLMicroLocationProto::ReceivedEvent *a2, const CLMicroLocationProto::EnabledStateUpdate *a3)
{
  CLMicroLocationProto::EnabledStateUpdate *v4;

  *((_DWORD *)this + 73) |= 0x40000000u;
  v4 = (CLMicroLocationProto::EnabledStateUpdate *)*((_QWORD *)this + 31);
  if (!v4)
  {
    v4 = (CLMicroLocationProto::EnabledStateUpdate *)operator new();
    CLMicroLocationProto::EnabledStateUpdate::EnabledStateUpdate((uint64_t)v4);
    *((_QWORD *)this + 31) = v4;
  }
  CLMicroLocationProto::EnabledStateUpdate::CopyFrom(v4, a2);
}

void sub_241B1B3B8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2426A04D4](v1, 0x1081C40DCAC275BLL);
  _Unwind_Resume(a1);
}

void CLMicroLocationProtobufHelper::setSpecificLoggedEvent(CLMicroLocationProtobufHelper *this, CLMicroLocationProto::ReceivedEvent *a2, const CLMicroLocationProto::ScreenStateUpdate *a3)
{
  CLMicroLocationProto::ScreenStateUpdate *v4;

  *((_DWORD *)this + 73) |= 0x80000000;
  v4 = (CLMicroLocationProto::ScreenStateUpdate *)*((_QWORD *)this + 32);
  if (!v4)
  {
    v4 = (CLMicroLocationProto::ScreenStateUpdate *)operator new();
    CLMicroLocationProto::ScreenStateUpdate::ScreenStateUpdate((uint64_t)v4);
    *((_QWORD *)this + 32) = v4;
  }
  CLMicroLocationProto::ScreenStateUpdate::CopyFrom(v4, a2);
}

void sub_241B1B444(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2426A04D4](v1, 0x1081C40AEC5023ALL);
  _Unwind_Resume(a1);
}

void CLMicroLocationProtobufHelper::setSpecificLoggedEvent(CLMicroLocationProtobufHelper *this, CLMicroLocationProto::ReceivedEvent *a2, const CLMicroLocationProto::CloudBackupExport *a3)
{
  CLMicroLocationProto::CloudBackupExport *v4;

  *((_DWORD *)this + 74) |= 1u;
  v4 = (CLMicroLocationProto::CloudBackupExport *)*((_QWORD *)this + 33);
  if (!v4)
  {
    v4 = (CLMicroLocationProto::CloudBackupExport *)operator new();
    CLMicroLocationProto::CloudBackupExport::CloudBackupExport(v4);
    *((_QWORD *)this + 33) = v4;
  }
  CLMicroLocationProto::CloudBackupExport::CopyFrom(v4, a2);
}

void sub_241B1B4D0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2426A04D4](v1, 0x1081C40A085CBA5);
  _Unwind_Resume(a1);
}

void CLMicroLocationProtobufHelper::setSpecificLoggedEvent(CLMicroLocationProtobufHelper *this, CLMicroLocationProto::ReceivedEvent *a2, const CLMicroLocationProto::CloudBackupImport *a3)
{
  CLMicroLocationProto::CloudBackupImport *v4;

  *((_DWORD *)this + 74) |= 2u;
  v4 = (CLMicroLocationProto::CloudBackupImport *)*((_QWORD *)this + 34);
  if (!v4)
  {
    v4 = (CLMicroLocationProto::CloudBackupImport *)operator new();
    CLMicroLocationProto::CloudBackupImport::CloudBackupImport(v4);
    *((_QWORD *)this + 34) = v4;
  }
  CLMicroLocationProto::CloudBackupImport::CopyFrom(v4, a2);
}

void sub_241B1B55C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2426A04D4](v1, 0x1081C40A085CBA5);
  _Unwind_Resume(a1);
}

void CLMicroLocationProtobufHelper::setSpecificLoggedEvent(CLMicroLocationProtobufHelper *this, CLMicroLocationProto::ReceivedEvent *a2, const CLMicroLocationProto::DataMigration *a3)
{
  CLMicroLocationProto::DataMigration *v4;

  *((_DWORD *)this + 74) |= 4u;
  v4 = (CLMicroLocationProto::DataMigration *)*((_QWORD *)this + 35);
  if (!v4)
  {
    v4 = (CLMicroLocationProto::DataMigration *)operator new();
    CLMicroLocationProto::DataMigration::DataMigration(v4);
    *((_QWORD *)this + 35) = v4;
  }
  CLMicroLocationProto::DataMigration::CopyFrom(v4, a2);
}

void sub_241B1B5E8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2426A04D4](v1, 0x1081C40A085CBA5);
  _Unwind_Resume(a1);
}

void CLMicroLocationProtobufHelper::getClientRecordingRequest(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  id v3;
  id v6;
  std::string *v7;
  std::string *v8;
  void *v9;
  int v10;
  uint64_t v11;
  void *v12;
  void *v13;
  _QWORD *v14;
  void *v15;
  void *v16;
  void *v17;
  BOOL v18;
  _QWORD *v19;
  NSObject *v20;
  const char *v21;
  const char *v22;
  const char *v23;
  const char *v24;
  uint8_t buf[8];
  _BYTE v26[10];
  __int16 v27;
  const char *v28;
  __int16 v29;
  const char *v30;
  __int16 v31;
  const char *v32;
  __int16 v33;
  const char *v34;
  uint64_t v35;

  v35 = *MEMORY[0x24BDAC8D0];
  v6 = a2;
  CLMicroLocationProto::RecordingRequest::RecordingRequest((CLMicroLocationProto::RecordingRequest *)a3);
  v7 = (std::string *)MEMORY[0x24BEDD958];
  if (*(_BYTE *)(a1 + 24))
  {
    v24 = (const char *)a1;
    if (*(char *)(a1 + 23) < 0)
      v24 = *(const char **)a1;
    *(_DWORD *)(a3 + 44) |= 4u;
    v8 = *(std::string **)(a3 + 16);
    if (v8 == v7)
    {
      v8 = (std::string *)operator new();
      v8->__r_.__value_.__r.__words[0] = 0;
      v8->__r_.__value_.__l.__size_ = 0;
      v8->__r_.__value_.__r.__words[2] = 0;
      *(_QWORD *)(a3 + 16) = v8;
    }
    std::string::operator=(v8, (const std::string *)a1);
    if (v6)
      goto LABEL_7;
LABEL_15:
    v15 = 0;
    v16 = 0;
    v11 = 1;
    goto LABEL_22;
  }
  v24 = "";
  if (!v6)
    goto LABEL_15;
LABEL_7:
  objc_msgSend(v6, "objectForKey:", CFSTR("private.MicroLocation.forced.recordingRequest"));
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = objc_msgSend(v9, "BOOLValue");

  if (v10)
    v11 = 2;
  else
    v11 = 1;
  objc_msgSend(v6, "objectForKey:", CFSTR("private.MicroLocation.truthtag.identifier"));
  v12 = (void *)objc_claimAutoreleasedReturnValue();

  if (v12)
  {
    objc_msgSend(v6, "objectForKeyedSubscript:", CFSTR("private.MicroLocation.truthtag.identifier"));
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    *(_QWORD *)buf = 0;
    *(_QWORD *)v26 = 0;
    objc_msgSend(v13, "getUUIDBytes:", buf);
    *(_DWORD *)(a3 + 44) |= 0x10u;
    if (*(std::string **)(a3 + 32) == v7)
    {
      v14 = (_QWORD *)operator new();
      *v14 = 0;
      v14[1] = 0;
      v14[2] = 0;
      *(_QWORD *)(a3 + 32) = v14;
    }
    MEMORY[0x2426A02D0]();
    v15 = v13;
  }
  else
  {
    v15 = 0;
  }
  objc_msgSend(v6, "objectForKey:", CFSTR("private.MicroLocation.recordingTriggerUUID"));
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  v18 = v17 == 0;

  if (v18)
  {
    v16 = 0;
  }
  else
  {
    objc_msgSend(v6, "objectForKeyedSubscript:", CFSTR("private.MicroLocation.recordingTriggerUUID"));
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    *(_QWORD *)buf = 0;
    *(_QWORD *)v26 = 0;
    objc_msgSend(v16, "getUUIDBytes:", buf);
    *(_DWORD *)(a3 + 44) |= 8u;
    if (*(std::string **)(a3 + 24) == v7)
    {
      v19 = (_QWORD *)operator new();
      *v19 = 0;
      v19[1] = 0;
      v19[2] = 0;
      *(_QWORD *)(a3 + 24) = v19;
    }
    MEMORY[0x2426A02D0]();
  }
LABEL_22:
  if (!CLMicroLocationProto::RecordingRequestType_IsValid((CLMicroLocationProto *)v11))
    __assert_rtn("set_recordingrequesttype", "microlocation.pb.h", 13554, "::CLMicroLocationProto::RecordingRequestType_IsValid(value)");
  *(_DWORD *)(a3 + 44) |= 2u;
  *(_DWORD *)(a3 + 12) = v11;
  if (onceToken_MicroLocation_Default != -1)
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_93);
  v20 = (id)logObject_MicroLocation_Default;
  if (os_log_type_enabled(v20, OS_LOG_TYPE_DEBUG))
  {
    if ((_DWORD)v11 == 2)
      v21 = "YES";
    else
      v21 = "NO";
    if (v15)
    {
      objc_msgSend(v15, "UUIDString");
      v7 = (std::string *)objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
      v22 = (const char *)unk_257180BF8(v7, "UTF8String");
    }
    else
    {
      v22 = "";
    }
    if (v16)
    {
      objc_msgSend(v16, "UUIDString");
      v3 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
      v23 = (const char *)objc_msgSend(v3, "UTF8String");
    }
    else
    {
      v23 = "";
    }
    *(_DWORD *)buf = 68290051;
    *(_DWORD *)&buf[4] = 0;
    *(_WORD *)v26 = 2082;
    *(_QWORD *)&v26[2] = "";
    v27 = 2082;
    v28 = v24;
    v29 = 2082;
    v30 = v21;
    v31 = 2081;
    v32 = v22;
    v33 = 2082;
    v34 = v23;
    _os_log_impl(&dword_2419D9000, v20, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"client request, recording scan\", \"client\":%{public, location:escape_only}s, \"forced?\":%{public, location:escape_only}s, \"truth label\":%{private, location:escape_only}s, \"recording trigger UUID\":%{public, location:escape_only}s}", buf, 0x3Au);
    if (v16)

    if (v15)
  }

}

void sub_241B1BA20(_Unwind_Exception *a1)
{
  void *v1;
  CLMicroLocationProto::RecordingRequest *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  if (v3)
  CLMicroLocationProto::RecordingRequest::~RecordingRequest(v2);

  _Unwind_Resume(a1);
}

id CLMicroLocationProtobufHelper::createRecordingRequestDictionary(int a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void *v6;
  id v7;
  void *v8;
  id v9;
  uint64_t v10;
  void *v11;
  id v12;
  uint64_t v13;
  _QWORD v15[3];

  v15[2] = *MEMORY[0x24BDAC8D0];
  v15[0] = a2;
  v15[1] = a3;
  v6 = (void *)objc_msgSend(objc_alloc(MEMORY[0x24BDD1880]), "initWithUUIDBytes:", v15);
  if (*(_BYTE *)(a4 + 16))
  {
    v7 = objc_alloc(MEMORY[0x24BDD1880]);
    if (!*(_BYTE *)(a4 + 16))
      std::__throw_bad_optional_access[abi:ne180100]();
    v8 = (void *)objc_msgSend(v7, "initWithUUIDBytes:", a4);
    v9 = objc_alloc(MEMORY[0x24BDBCE70]);
    if (a1)
      v10 = MEMORY[0x24BDBD1C8];
    else
      v10 = MEMORY[0x24BDBD1C0];
    v11 = (void *)objc_msgSend(v9, "initWithObjectsAndKeys:", v10, CFSTR("private.MicroLocation.forced.recordingRequest"), v6, CFSTR("private.MicroLocation.recordingTriggerUUID"), v8, CFSTR("private.MicroLocation.truthtag.identifier"), 0);

  }
  else
  {
    v12 = objc_alloc(MEMORY[0x24BDBCE70]);
    if (a1)
      v13 = MEMORY[0x24BDBD1C8];
    else
      v13 = MEMORY[0x24BDBD1C0];
    v11 = (void *)objc_msgSend(v12, "initWithObjectsAndKeys:", v13, CFSTR("private.MicroLocation.forced.recordingRequest"), v6, CFSTR("private.MicroLocation.recordingTriggerUUID"), 0);
  }

  return v11;
}

void sub_241B1BC24(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t CLMicroLocationProtobufHelper::getTriggerUuidFromEvent@<X0>(uint64_t this@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t **v9;
  int v10;
  char v11;

  v3 = this;
  v5 = *(_DWORD *)(this + 140);
  if ((v5 & 4) != 0)
  {
    v6 = *(_QWORD *)(this + 16);
    if (!v6)
    {
      this = CLMicroLocationProto::RecordingEvent::default_instance((CLMicroLocationProto::RecordingEvent *)this);
      v6 = *(_QWORD *)(this + 16);
    }
    if ((*(_BYTE *)(v6 + 44) & 8) != 0)
    {
      v8 = *(_QWORD *)(v3 + 16);
      if (!v8)
      {
        this = CLMicroLocationProto::RecordingEvent::default_instance((CLMicroLocationProto::RecordingEvent *)this);
        v8 = *(_QWORD *)(this + 16);
      }
      goto LABEL_14;
    }
    v5 = *(_DWORD *)(v3 + 140);
  }
  if ((v5 & 0x400) == 0)
    goto LABEL_20;
  v7 = *(_QWORD *)(v3 + 88);
  if (!v7)
  {
    this = CLMicroLocationProto::RecordingEvent::default_instance((CLMicroLocationProto::RecordingEvent *)this);
    v7 = *(_QWORD *)(this + 88);
  }
  if ((*(_BYTE *)(v7 + 44) & 8) == 0)
    goto LABEL_20;
  v8 = *(_QWORD *)(v3 + 88);
  if (!v8)
  {
    this = CLMicroLocationProto::RecordingEvent::default_instance((CLMicroLocationProto::RecordingEvent *)this);
    v8 = *(_QWORD *)(this + 88);
  }
LABEL_14:
  v9 = *(uint64_t ***)(v8 + 24);
  v10 = *((char *)v9 + 23);
  if (v10 < 0)
  {
    if (v9[1] != (uint64_t *)16)
    {
LABEL_20:
      v11 = 0;
      *a2 = 0;
      goto LABEL_21;
    }
    v9 = (uint64_t **)*v9;
  }
  else if (v10 != 16)
  {
    goto LABEL_20;
  }
  *(_OWORD *)a2 = *(_OWORD *)v9;
  v11 = 1;
LABEL_21:
  a2[16] = v11;
  return this;
}

CFAbsoluteTime CLMicroLocationProtobufHelper::getEventReceivedTS(CLMicroLocationProtobufHelper *this, const CLMicroLocationProto::RecordingEvent *a2)
{
  NSObject *v2;
  uint8_t v4[16];

  if ((*((_BYTE *)this + 140) & 2) != 0)
    return *((double *)this + 1);
  if (onceToken_MicroLocation_Default != -1)
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_93);
  v2 = logObject_MicroLocation_Default;
  if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)v4 = 0;
    _os_log_impl(&dword_2419D9000, v2, OS_LOG_TYPE_ERROR, "Event Received without Timestamp!", v4, 2u);
  }
  return cl::chrono::CFAbsoluteTimeClock::now();
}

void CLMicroLocationProtobufHelper::measurementFromSourceData<CLMicroLocationProto::WiFiRssi &,true>(uint64_t a1@<X0>, CLMicroLocationProto::Measurement *a2@<X8>)
{
  unsigned int v4;
  const CLMicroLocationProto::WiFiRssi *v5;
  uint64_t v6;
  _QWORD v7[8];
  unsigned int v8;
  int v9;

  CLMicroLocationProto::Measurement::Measurement((CLMicroLocationProto::Measurement *)v7);
  v4 = *(_DWORD *)(a1 + 16);
  if (!CLMicroLocationProto::DataType_IsValid((CLMicroLocationProto *)v4))
    __assert_rtn("set_datatype", "microlocation.pb.h", 10718, "::CLMicroLocationProto::DataType_IsValid(value)");
  v6 = *(_QWORD *)(a1 + 8);
  v8 = v4;
  v9 |= 3u;
  v7[1] = v6;
  CLMicroLocationProtobufHelper::measurementFromSourceImpl((CLMicroLocationProtobufHelper *)v7, (CLMicroLocationProto::Measurement *)a1, v5);
  CLMicroLocationProto::Measurement::Measurement(a2, (const CLMicroLocationProto::Measurement *)v7);
  *((_BYTE *)a2 + 80) = 1;
  CLMicroLocationProto::Measurement::~Measurement((CLMicroLocationProto::Measurement *)v7);
}

void sub_241B1BE5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  CLMicroLocationProto::Measurement::~Measurement((CLMicroLocationProto::Measurement *)&a9);
  _Unwind_Resume(a1);
}

double CLMicroLocationProtobufHelper::getMeasurementValue(CLMicroLocationProtobufHelper *this, const CLMicroLocationProto::Measurement *a2)
{
  uint64_t v2;
  double result;

  switch(*((_DWORD *)this + 16))
  {
    case 1:
      v2 = *((_QWORD *)this + 2);
      if (!v2)
        v2 = *(_QWORD *)(CLMicroLocationProto::Measurement::default_instance(this) + 16);
      goto LABEL_14;
    case 2:
      v2 = *((_QWORD *)this + 3);
      if (!v2)
        v2 = *(_QWORD *)(CLMicroLocationProto::Measurement::default_instance(this) + 24);
      goto LABEL_14;
    case 3:
      v2 = *((_QWORD *)this + 4);
      if (!v2)
        v2 = *(_QWORD *)(CLMicroLocationProto::Measurement::default_instance(this) + 32);
      goto LABEL_14;
    case 4:
      v2 = *((_QWORD *)this + 5);
      if (!v2)
        v2 = *(_QWORD *)(CLMicroLocationProto::Measurement::default_instance(this) + 40);
      goto LABEL_14;
    case 5:
      v2 = *((_QWORD *)this + 6);
      if (!v2)
        v2 = *(_QWORD *)(CLMicroLocationProto::Measurement::default_instance(this) + 48);
      goto LABEL_14;
    case 6:
      v2 = *((_QWORD *)this + 7);
      if (!v2)
        v2 = *(_QWORD *)(CLMicroLocationProto::Measurement::default_instance(this) + 56);
LABEL_14:
      result = *(float *)(v2 + 20);
      break;
    default:
      return result;
  }
  return result;
}

uint64_t *CLMicroLocationProtobufHelper::convertToHumanReadableString@<X0>(CLMacAddress *this@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  CLMacAddress v5;

  v5.var0 = CLMacAddress::newFromUint64(this, a2);
  return CLMacAddress::str(a3, &v5);
}

_BYTE *CLMicroLocationProtobufHelper::convertToHumanReadableString@<X0>(CLMicroLocationProtobufHelper *this@<X0>, uint64_t a2@<X8>)
{
  char *v5;

  v5 = (char *)operator new(0x28uLL);
  *(_QWORD *)a2 = v5;
  *(_OWORD *)(a2 + 8) = xmmword_241BB2320;
  *(_OWORD *)v5 = 0u;
  *((_OWORD *)v5 + 1) = 0u;
  *(_QWORD *)(v5 + 29) = 0;
  return boost::uuids::to_chars<char *>((uint64_t)this, v5);
}

void sub_241B1BFBC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *CLMicroLocationProtobufHelper::ModelTypeToDomain@<X0>(int a1@<W0>, _QWORD *a2@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a2, off_2511D9C48[a1]);
}

_QWORD *CLMicroLocationProtobufHelper::modelTypeToString@<X0>(int a1@<W0>, _QWORD *a2@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a2, off_2511D9C68[a1]);
}

const __CFString *CLMicroLocationProtobufHelper::getRecordingTriggerString(CLMicroLocationProtobufHelper *this, const CLMicroLocationProto::RecordingEvent *a2)
{
  int v2;
  const __CFString *result;

  v2 = *((_DWORD *)this + 18);
  result = CFSTR("receivedEventAction");
  switch(v2)
  {
    case 1:
      return result;
    case 2:
      result = CFSTR("appLaunch");
      break;
    case 3:
    case 6:
    case 8:
    case 11:
      goto LABEL_6;
    case 4:
      result = CFSTR("backlightOn");
      break;
    case 5:
      result = CFSTR("batteryChargerConnected");
      break;
    case 7:
      result = CFSTR("forcedRecording");
      break;
    case 9:
      result = CFSTR("homekitAccessory");
      break;
    case 10:
      result = CFSTR("homekitScene");
      break;
    case 12:
      result = CFSTR("nowPlaying");
      break;
    case 13:
      result = CFSTR("recordingRequest");
      break;
    case 14:
      result = CFSTR("truthLabelDonation");
      break;
    default:
      if (v2 == 42)
      {
        result = CFSTR("RequestObservation");
      }
      else if (v2 == 43)
      {
        result = CFSTR("RequestPrediction");
      }
      else
      {
LABEL_6:
        result = CFSTR("triggerInvalid");
      }
      break;
  }
  return result;
}

_QWORD *CLMicroLocationProtobufHelper::serviceQualityReasonToString@<X0>(int a1@<W0>, _QWORD *a2@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a2, off_2511D9C88[a1]);
}

uint64_t CLMiLoProtobufWrapper::Measurement::isInvalidWiFiRssi(CLMiLoProtobufWrapper::Measurement *this)
{
  if (*((_DWORD *)this + 16) == 1)
    return (*((unsigned __int8 *)this + 81) >> 4) & 1;
  else
    return 0;
}

uint64_t CLMiLoProtobufWrapper::Measurement::isOffChannelWiFiRssi(CLMiLoProtobufWrapper::Measurement *this)
{
  if (*((_DWORD *)this + 16) == 1)
    return *((unsigned __int8 *)this + 81) >> 7;
  else
    return 0;
}

void CLMiLoProtobufWrapper::measurementWrappersFromWiFiRssiWrappers(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  int *v4;
  int *v5;
  unint64_t v6;
  uint64_t v7;
  int *v8;
  _BYTE v9[80];
  char v10;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  std::vector<CLMiLoProtobufWrapper::Measurement>::reserve(a2, 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(a1[1] - *a1) >> 3));
  v4 = (int *)a1[1];
  if ((int *)*a1 != v4)
  {
    v5 = (int *)(*a1 + 48);
    do
    {
      CLMicroLocationProtobufHelper::measurementFromSourceData<CLMicroLocationProto::WiFiRssi &,true>((uint64_t)(v5 - 12), (CLMicroLocationProto::Measurement *)v9);
      if (v10)
      {
        v6 = a2[1];
        if (v6 >= a2[2])
        {
          v7 = std::vector<CLMiLoProtobufWrapper::Measurement>::__emplace_back_slow_path<CLMicroLocationProto::Measurement,unsigned int &>(a2, (CLMicroLocationProto::Measurement *)v9, v5);
        }
        else
        {
          CLMiLoProtobufWrapper::Measurement::Measurement((CLMicroLocationProto::Measurement *)a2[1], (CLMicroLocationProto::Measurement *)v9, *v5);
          v7 = v6 + 88;
          a2[1] = v6 + 88;
        }
        a2[1] = v7;
        if (v10)
          CLMicroLocationProto::Measurement::~Measurement((CLMicroLocationProto::Measurement *)v9);
      }
      v8 = v5 + 2;
      v5 += 14;
    }
    while (v8 != v4);
  }
}

void sub_241B1C1FC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::vector<CLMiLoProtobufWrapper::Measurement>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<CLMiLoProtobufWrapper::Measurement>::reserve(uint64_t *a1, unint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[5];

  v4 = a1[2];
  result = (uint64_t)(a1 + 2);
  if (0x2E8BA2E8BA2E8BA3 * ((v4 - *a1) >> 3) < a2)
  {
    if (a2 >= 0x2E8BA2E8BA2E8BBLL)
      std::vector<CLMicroLocationProto::ConfidenceReason>::__throw_length_error[abi:ne180100]();
    v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = std::__allocate_at_least[abi:ne180100]<std::allocator<CLMiLoServiceTable::Entry>>(result, a2);
    v7[1] = v7[0] + v5;
    v7[2] = v7[0] + v5;
    v7[3] = v7[0] + 88 * v6;
    std::vector<CLMiLoProtobufWrapper::Measurement>::__swap_out_circular_buffer(a1, v7);
    return std::__split_buffer<CLMiLoProtobufWrapper::Measurement>::~__split_buffer((uint64_t)v7);
  }
  return result;
}

void sub_241B1C2E4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<CLMiLoProtobufWrapper::Measurement>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void ___ZL45_CLLogObjectForCategory_MicroLocation_Defaultv_block_invoke_74()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.MicroLocation", "MicroLocation");
  v1 = (void *)logObject_MicroLocation_Default;
  logObject_MicroLocation_Default = (uint64_t)v0;

}

uint64_t std::vector<CLMiLoProtobufWrapper::Measurement>::__emplace_back_slow_path<CLMicroLocationProto::Measurement,unsigned int &>(uint64_t *a1, CLMicroLocationProto::Measurement *a2, int *a3)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  uint64_t v13;
  char *v15;
  CLMicroLocationProto::Measurement *v16;
  CLMicroLocationProto::Measurement *v17;
  char *v18;
  uint64_t *v19;

  v4 = *a1;
  v5 = 0x2E8BA2E8BA2E8BA3 * ((a1[1] - *a1) >> 3);
  v6 = v5 + 1;
  if ((unint64_t)(v5 + 1) > 0x2E8BA2E8BA2E8BALL)
    std::vector<CLMicroLocationProto::ConfidenceReason>::__throw_length_error[abi:ne180100]();
  v9 = (uint64_t)(a1 + 2);
  v10 = 0x2E8BA2E8BA2E8BA3 * ((a1[2] - v4) >> 3);
  if (2 * v10 > v6)
    v6 = 2 * v10;
  if (v10 >= 0x1745D1745D1745DLL)
    v11 = 0x2E8BA2E8BA2E8BALL;
  else
    v11 = v6;
  v19 = a1 + 2;
  if (v11)
    v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CLMiLoServiceTable::Entry>>(v9, v11);
  else
    v12 = 0;
  v15 = v12;
  v16 = (CLMicroLocationProto::Measurement *)&v12[88 * v5];
  v17 = v16;
  v18 = &v12[88 * v11];
  CLMiLoProtobufWrapper::Measurement::Measurement(v16, a2, *a3);
  v17 = (CLMicroLocationProto::Measurement *)((char *)v16 + 88);
  std::vector<CLMiLoProtobufWrapper::Measurement>::__swap_out_circular_buffer(a1, &v15);
  v13 = a1[1];
  std::__split_buffer<CLMiLoProtobufWrapper::Measurement>::~__split_buffer((uint64_t)&v15);
  return v13;
}

void sub_241B1C438(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<CLMiLoProtobufWrapper::Measurement>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

CLMicroLocationProto::Measurement *CLMiLoProtobufWrapper::Measurement::Measurement(CLMicroLocationProto::Measurement *a1, CLMicroLocationProto::Measurement *a2, int a3)
{
  CLMicroLocationProto::Measurement *v6;

  CLMicroLocationProto::Measurement::Measurement(a1);
  *((_DWORD *)v6 + 20) = a3;
  CLMicroLocationProto::Measurement::Swap(v6, a2);
  return a1;
}

void sub_241B1C48C(_Unwind_Exception *a1)
{
  CLMicroLocationProto::Measurement *v1;

  CLMicroLocationProto::Measurement::~Measurement(v1);
  _Unwind_Resume(a1);
}

void CLMicroLocationLegacyEventRecordingRequest::handleEvent(uint64_t a1@<X1>, void *a2@<X2>, double *a3@<X3>, char *a4@<X8>)
{
  id v7;
  _BYTE v8[144];
  char v9;
  _BYTE v10[144];
  std::string v11;
  char v12;
  _BYTE v13[48];

  v7 = a2;
  if (*(char *)(a1 + 23) < 0)
    std::string::__init_copy_ctor_external(&v11, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
  else
    v11 = *(std::string *)a1;
  v12 = 1;
  CLMicroLocationProtobufHelper::getClientRecordingRequest((uint64_t)&v11, v7, (uint64_t)v13);
  if (v12 && SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
  CLMicroLocationProtobufHelper::createRecordingEvent<CLMicroLocationProto::RecordingRequest>((CLMicroLocationProto::RecordingEvent *)v13, 0, 0, 0, (CLMicroLocationProto *)3, (uint64_t)v8, *a3);
  v9 = 1;
  CLMicroLocationProto::RecordingEvent::RecordingEvent((CLMicroLocationProto::RecordingEvent *)v10, (const CLMicroLocationProto::RecordingEvent *)v8);
  *a4 = v9;
  CLMicroLocationProto::RecordingEvent::RecordingEvent((CLMicroLocationProto::RecordingEvent *)(a4 + 8), (const CLMicroLocationProto::RecordingEvent *)v10);
  CLMicroLocationProto::RecordingEvent::~RecordingEvent((CLMicroLocationProto::RecordingEvent *)v10);
  CLMicroLocationProto::RecordingEvent::~RecordingEvent((CLMicroLocationProto::RecordingEvent *)v8);
  CLMicroLocationProto::RecordingRequest::~RecordingRequest((CLMicroLocationProto::RecordingRequest *)v13);

}

void sub_241B1C5A8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_241B1C5E8()
{
  uint64_t v0;

  if (*(_BYTE *)(v0 - 104))
  {
    if (*(char *)(v0 - 105) < 0)
      operator delete(*(void **)(v0 - 128));
  }
  JUMPOUT(0x241B1C5DCLL);
}

uint64_t sub_241B1C648()
{
  void *v0;

  return 0;
}

void sub_241B1C8A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  id *v15;

  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_241B1D0F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id location)
{
  id *v20;
  id *v21;

  objc_destroyWeak(v21);
  objc_destroyWeak(v20);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

uint64_t CLMicroLocationModelTable::Entry::Entry(uint64_t a1, uint64_t a2, uint64_t a3, CLMicroLocationProto::Model *a4, uint64_t a5, __int128 *a6, uint64_t a7, uint64_t a8, double a9)
{
  __int128 v15;
  CLMicroLocationProto::Model *v16;

  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = a3;
  *(double *)(a1 + 16) = a9;
  *(_DWORD *)(a1 + 24) = *((_DWORD *)a4 + 13);
  CLMicroLocationProto::Model::Model((CLMicroLocationProto::Model *)(a1 + 32));
  *(_BYTE *)(a1 + 240) = 0;
  *(_BYTE *)(a1 + 264) = 0;
  v15 = *a6;
  *(_BYTE *)(a1 + 288) = *((_BYTE *)a6 + 16);
  *(_OWORD *)(a1 + 272) = v15;
  *(_QWORD *)(a1 + 289) = a7;
  *(_QWORD *)(a1 + 297) = a8;
  CLMicroLocationProto::Model::Swap(v16, a4);
  if (!*(_BYTE *)(a5 + 24))
    goto LABEL_4;
  if (*(char *)(a5 + 23) < 0)
  {
    if (*(_QWORD *)(a5 + 8))
      goto LABEL_4;
  }
  else if (*(_BYTE *)(a5 + 23))
  {
LABEL_4:
    std::__optional_storage_base<std::string,false>::__assign_from[abi:ne180100]<std::__optional_copy_assign_base<std::string,false> const&>((std::string *)(a1 + 240), (const std::string *)a5);
    return a1;
  }
  if (*(_BYTE *)(a1 + 264))
  {
    if (*(char *)(a1 + 263) < 0)
      operator delete(*(void **)(a1 + 240));
    *(_BYTE *)(a1 + 264) = 0;
  }
  return a1;
}

void sub_241B1FC30(_Unwind_Exception *a1)
{
  uint64_t v1;
  CLMicroLocationProto::Model *v2;
  void **v3;

  if (*(_BYTE *)(v1 + 264))
  {
    if (*(char *)(v1 + 263) < 0)
      operator delete(*v3);
  }
  CLMicroLocationProto::Model::~Model(v2);
  _Unwind_Resume(a1);
}

uint64_t CLMicroLocationModelTable::Entry::Entry(uint64_t a1, uint64_t a2)
{
  CLMicroLocationProto::Model *v4;
  CLMicroLocationProto::Model *v5;
  __int128 v6;
  __int128 v7;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v4 = (CLMicroLocationProto::Model *)(a2 + 32);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 84);
  v5 = (CLMicroLocationProto::Model *)(a1 + 32);
  CLMicroLocationProto::Model::Model((CLMicroLocationProto::Model *)(a1 + 32));
  *(_BYTE *)(a1 + 240) = 0;
  *(_BYTE *)(a1 + 264) = 0;
  if (*(_BYTE *)(a2 + 264))
  {
    v6 = *(_OWORD *)(a2 + 240);
    *(_QWORD *)(a1 + 256) = *(_QWORD *)(a2 + 256);
    *(_OWORD *)(a1 + 240) = v6;
    *(_QWORD *)(a2 + 248) = 0;
    *(_QWORD *)(a2 + 256) = 0;
    *(_QWORD *)(a2 + 240) = 0;
    *(_BYTE *)(a1 + 264) = 1;
  }
  v7 = *(_OWORD *)(a2 + 272);
  *(_BYTE *)(a1 + 288) = *(_BYTE *)(a2 + 288);
  *(_OWORD *)(a1 + 272) = v7;
  *(_OWORD *)(a1 + 289) = *(_OWORD *)(a2 + 289);
  CLMicroLocationProto::Model::Swap(v5, v4);
  return a1;
}

void sub_241B1FD1C(_Unwind_Exception *a1)
{
  CLMicroLocationProto::Model *v1;
  uint64_t v2;
  void **v3;

  if (*(_BYTE *)(v2 + 264))
  {
    if (*(char *)(v2 + 263) < 0)
      operator delete(*v3);
  }
  CLMicroLocationProto::Model::~Model(v1);
  _Unwind_Resume(a1);
}

uint64_t CLMicroLocationModelTable::Entry::operator=(uint64_t a1, uint64_t a2)
{
  __int128 v4;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 84);
  std::__optional_storage_base<std::string,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::string,false>>(a1 + 240, (__n128 *)(a2 + 240));
  v4 = *(_OWORD *)(a2 + 272);
  *(_BYTE *)(a1 + 288) = *(_BYTE *)(a2 + 288);
  *(_OWORD *)(a1 + 272) = v4;
  *(_OWORD *)(a1 + 289) = *(_OWORD *)(a2 + 289);
  CLMicroLocationProto::Model::Swap((CLMicroLocationProto::Model *)(a1 + 32), (CLMicroLocationProto::Model *)(a2 + 32));
  return a1;
}

void std::__optional_storage_base<std::string,false>::__assign_from[abi:ne180100]<std::__optional_copy_assign_base<std::string,false> const&>(std::string *this, const std::string *a2)
{
  __int128 v3;

  if (this[1].__r_.__value_.__s.__data_[0] == a2[1].__r_.__value_.__s.__data_[0])
  {
    if (this[1].__r_.__value_.__s.__data_[0])
      std::string::operator=(this, a2);
  }
  else if (this[1].__r_.__value_.__s.__data_[0])
  {
    if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
      operator delete(this->__r_.__value_.__l.__data_);
    this[1].__r_.__value_.__s.__data_[0] = 0;
  }
  else
  {
    if (SHIBYTE(a2->__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external(this, a2->__r_.__value_.__l.__data_, a2->__r_.__value_.__l.__size_);
    }
    else
    {
      v3 = *(_OWORD *)&a2->__r_.__value_.__l.__data_;
      this->__r_.__value_.__r.__words[2] = a2->__r_.__value_.__r.__words[2];
      *(_OWORD *)&this->__r_.__value_.__l.__data_ = v3;
    }
    this[1].__r_.__value_.__s.__data_[0] = 1;
  }
}

_QWORD *CLMicroLocationAnalytics::CLMicroLocationAnalytics(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  char *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD v9[4];
  _QWORD v10[4];
  _QWORD v11[4];
  _QWORD v12[3];
  _QWORD *v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  *a1 = a2;
  a1[1] = a3;
  v9[0] = &off_2511D9E68;
  v9[1] = a1;
  v9[3] = v9;
  v10[0] = &off_2511D9EE8;
  v10[1] = a1;
  v10[3] = v10;
  v11[0] = &off_2511D9F68;
  v11[1] = a1;
  v11[3] = v11;
  v12[0] = &off_2511D9FE8;
  v12[1] = a1;
  v13 = v12;
  a1[3] = 0;
  a1[4] = 0;
  a1[2] = 0;
  v4 = (char *)operator new(0x80uLL);
  a1[4] = v4 + 128;
  a1[2] = v4;
  a1[3] = v4;
  v5 = 0;
  a1[3] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::function<void ()(std::function<BOOL ()(void)>)>>,std::function<void ()(std::function<BOOL ()(void)>)> const*,std::function<void ()(std::function<BOOL ()(void)>)> const*,std::function<void ()(std::function<BOOL ()(void)>)>*>((uint64_t)(a1 + 4), (uint64_t)v9, (uint64_t)&v14, (uint64_t)v4);
  do
  {
    v6 = (&v13)[v5];
    if (&v12[v5] == v6)
    {
      v6 = &v12[v5];
      v7 = 4;
    }
    else
    {
      if (!v6)
        goto LABEL_7;
      v7 = 5;
    }
    (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_7:
    v5 -= 4;
  }
  while (v5 != -16);
  return a1;
}

void sub_241B1FF90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, char a12)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  char *v17;
  uint64_t v18;

  v14 = v13;
  *(_QWORD *)(v12 + 24) = v14;
  std::vector<std::function<void ()(std::function<BOOL ()(void)>)>>::__destroy_vector::operator()[abi:ne180100](&a10);
  v16 = 0;
  while (1)
  {
    v17 = *(char **)(&a12 + v16 + 120);
    if (&a12 + v16 + 96 == v17)
      break;
    if (v17)
    {
      v18 = 5;
LABEL_6:
      (*(void (**)(void))(*(_QWORD *)v17 + 8 * v18))();
    }
    v16 -= 32;
    if (v16 == -128)
      _Unwind_Resume(a1);
  }
  v17 = &a12 + v16 + 96;
  v18 = 4;
  goto LABEL_6;
}

_QWORD *CLMicroLocationAnalytics::executeWorkItems(_QWORD *result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  _BYTE v7[24];
  _BYTE *v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v2 = result[2];
  v3 = result[3];
  if (v2 != v3)
  {
    while (1)
    {
      std::__function::__value_func<double ()(CLMicroLocationFingerprint const&,CLMicroLocationFingerprint const&)>::__value_func[abi:ne180100]((uint64_t)v7, a2);
      v5 = *(_QWORD *)(v2 + 24);
      if (!v5)
        std::__throw_bad_function_call[abi:ne180100]();
      (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v5 + 48))(v5, v7);
      result = v8;
      if (v8 == v7)
        break;
      if (v8)
      {
        v6 = 5;
LABEL_7:
        result = (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v6))();
      }
      v2 += 32;
      if (v2 == v3)
        return result;
    }
    result = v7;
    v6 = 4;
    goto LABEL_7;
  }
  return result;
}

void sub_241B200CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  _Unwind_Resume(exception_object);
}

void CLMicroLocationAnalytics::analyzeAssociationState(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  NSObject *v6;
  NSObject *v7;
  BOOL v8;
  id *v9;
  id *v10;
  id v11;
  id *v12;
  id *v13;
  uint8_t buf[8];
  __int16 v15;
  const char *v16;
  __int16 v17;
  uint64_t v18;
  _BYTE v19[24];
  _BYTE *v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  if ((ULSettings::get<ULSettings::AnalyticsSendEventEnabled>() & 1) != 0)
  {
    std::__function::__value_func<double ()(CLMicroLocationFingerprint const&,CLMicroLocationFingerprint const&)>::__value_func[abi:ne180100]((uint64_t)v19, a2);
    CLMicroLocationAnalytics::analyzeAssociationStateInternal(a1, (uint64_t)v19, (uint64_t)&v12);
    v4 = v20;
    if (v20 == v19)
    {
      v5 = 4;
      v4 = v19;
    }
    else
    {
      if (!v20)
      {
LABEL_11:
        if (onceToken_MicroLocation_Default != -1)
          dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_96);
        v7 = logObject_MicroLocation_Default;
        v8 = os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT);
        v9 = v12;
        v10 = v13;
        if (v8)
        {
          *(_DWORD *)buf = 68289282;
          *(_DWORD *)&buf[4] = 0;
          v15 = 2082;
          v16 = "";
          v17 = 2050;
          v18 = v13 - v12;
          _os_log_impl(&dword_2419D9000, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"sending CoreAnalytics com.apple.MicroLocation.AssociatedState\", \"num events\":%{public}lu}", buf, 0x1Cu);
        }
        for (; v9 != v10; ++v9)
        {
          v11 = *v9;
          AnalyticsSendEvent();

        }
        *(_QWORD *)buf = &v12;
        std::vector<NSMutableDictionary * {__strong}>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
        return;
      }
      v5 = 5;
    }
    (*(void (**)(void))(*v4 + 8 * v5))();
    goto LABEL_11;
  }
  if (onceToken_MicroLocation_Default != -1)
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_96);
  v6 = logObject_MicroLocation_Default;
  if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 68289026;
    *(_DWORD *)&buf[4] = 0;
    v15 = 2082;
    v16 = "";
    _os_log_impl(&dword_2419D9000, v6, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"not analyzing associated state, since sending to core-analytics is disabled\"}", buf, 0x12u);
  }
}

void sub_241B20344(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,char *a21)
{
  char *v21;
  char *v23;
  uint64_t v24;

  v23 = a21;
  if (a21 == v21)
  {
    v24 = 4;
    v23 = &a18;
  }
  else
  {
    if (!a21)
      goto LABEL_6;
    v24 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v23 + 8 * v24))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void sub_241B20460(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void CLMicroLocationAnalytics::analyzeAssociationStateInternal(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  NSObject *v5;
  id v6;
  void *v7;
  NSObject *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  int v13;
  int v14;
  CLMicroLocationTimeUtils *v15;
  const void **v16;
  const void **v17;
  const void **v18;
  const void **v19;
  uint64_t *v20;
  int v21;
  uint64_t v22;
  double v23;
  double v24;
  double v25;
  double v26;
  id v27;
  void *v28;
  const void **v29;
  const void **v30;
  BOOL v31;
  const void **v32;
  const void **v33;
  BOOL v34;
  _OWORD *v35;
  char *v36;
  _QWORD *v37;
  _OWORD *v38;
  char *v39;
  _QWORD *v40;
  unsigned __int8 *v41;
  unsigned __int8 *v42;
  uint64_t v43;
  _QWORD *v44;
  unsigned __int8 *v45;
  unsigned __int8 *v46;
  unsigned __int8 *v47;
  unsigned __int8 *v48;
  NSObject *v49;
  uint64_t *v51;
  void *v52[2];
  char v53;
  void *v54[2];
  char v55;
  void *v56;
  __int128 v57;
  void *__p[2];
  char v59;
  id v60;
  unsigned __int8 *v61;
  unsigned __int8 *v62;
  uint64_t v63;
  unsigned __int8 *v64;
  unsigned __int8 *v65;
  uint64_t v66;
  uint8_t *v67;
  char *v68[2];
  char **v69;
  char *v70[2];
  __int128 v71;
  uint64_t v72;
  uint64_t *v73;
  uint64_t *v74;
  uint64_t v75;
  unsigned __int8 **v76;
  uint8_t buf[8];
  _BYTE v78[24];
  uint64_t v79;
  uint64_t v80;
  char v81;
  uint64_t v82;

  v82 = *MEMORY[0x24BDAC8D0];
  if (onceToken_MicroLocation_Default != -1)
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_96);
  v5 = logObject_MicroLocation_Default;
  if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
  {
    *(_QWORD *)buf = 68289026;
    *(_WORD *)v78 = 2082;
    *(_QWORD *)&v78[2] = "";
    _os_log_impl(&dword_2419D9000, v5, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"analyzing associated state\"}", buf, 0x12u);
  }
  v6 = *(id *)(*(_QWORD *)(a1 + 8) + 16);
  v7 = v6;
  if (v6)
  {
    objc_msgSend(v6, "getAllDistinctAssociatedStateLoiIds");
  }
  else
  {
    v73 = 0;
    v74 = 0;
    v75 = 0;
  }

  if (v73 == v74)
  {
    if (onceToken_MicroLocation_Default != -1)
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_96);
    v8 = logObject_MicroLocation_Default;
    if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
    {
      *(_QWORD *)buf = 68289026;
      *(_WORD *)v78 = 2082;
      *(_QWORD *)&v78[2] = "";
      _os_log_impl(&dword_2419D9000, v8, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"analyzeAssociationState, no LOI IDs found\"}", buf, 0x12u);
    }
  }
  +[ULDefaultsSingleton shared](ULDefaultsSingleton, "shared");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "defaultsDictionary");
  v10 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "ULNumberDaysToAnalyzeAssociationState");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "objectForKey:", v11);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  if (v12 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
    v13 = objc_msgSend(v12, "intValue");
  else
    v13 = objc_msgSend(&unk_2511EDF48, "intValue");
  v14 = v13;

  objc_msgSend(MEMORY[0x24BDBCE60], "date");
  v15 = (CLMicroLocationTimeUtils *)objc_claimAutoreleasedReturnValue();
  v71 = 0uLL;
  v72 = 0;
  v70[0] = 0;
  v70[1] = 0;
  v69 = v70;
  ULSettings::get<ULSettings::AssociatedStateCALoiTypes>((std::vector<std::string> *)buf);
  v17 = *(const void ***)buf;
  v16 = *(const void ***)v78;
  while (v17 != v16)
  {
    LOBYTE(v67) = 0;
    std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::__emplace_unique_key_args<std::string,std::string const&,BOOL>((uint64_t **)&v69, v17, (uint64_t)v17, (char *)&v67);
    v17 += 3;
  }
  v67 = buf;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v67);
  v68[0] = 0;
  v68[1] = 0;
  v67 = (uint8_t *)v68;
  ULSettings::get<ULSettings::AssociatedStateCALoiTypes>((std::vector<std::string> *)buf);
  v19 = *(const void ***)buf;
  v18 = *(const void ***)v78;
  while (v19 != v18)
  {
    LOBYTE(v64) = 0;
    std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::__emplace_unique_key_args<std::string,std::string const&,BOOL>((uint64_t **)&v67, v19, (uint64_t)v19, (char *)&v64);
    v19 += 3;
  }
  v64 = buf;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v64);
  v20 = v73;
  v51 = v74;
  if (v73 == v74)
  {
LABEL_76:
    v65 = 0;
    v66 = 0;
    v64 = (unsigned __int8 *)&v65;
    *(_DWORD *)buf = 2;
    std::__tree<std::__value_type<int,std::map<std::string,BOOL>>,std::__map_value_compare<int,std::__value_type<int,std::map<std::string,BOOL>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::map<std::string,BOOL>>>>::__emplace_unique_key_args<int,int,std::map<std::string,BOOL>&>((uint64_t)&v64, (int *)buf, buf, (const void ***)&v69);
    *(_DWORD *)buf = 5;
    std::__tree<std::__value_type<int,std::map<std::string,BOOL>>,std::__map_value_compare<int,std::__value_type<int,std::map<std::string,BOOL>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::map<std::string,BOOL>>>>::__emplace_unique_key_args<int,int,std::map<std::string,BOOL>&>((uint64_t)&v64, (int *)buf, buf, (const void ***)&v67);
    v41 = v64;
    if (v64 != (unsigned __int8 *)&v65)
    {
      do
      {
        std::string::basic_string[abi:ne180100]<0>(buf, "");
        v79 = 0;
        v80 = 0;
        *(_QWORD *)&v78[16] = 0;
        v42 = (unsigned __int8 *)*((_QWORD *)v41 + 5);
        if (v42 != v41 + 48)
        {
          do
          {
            if (!v42[56])
            {
              std::string::operator=((std::string *)buf, (const std::string *)(v42 + 32));
              v43 = *((unsigned int *)v41 + 8);
              v44 = std::string::basic_string[abi:ne180100]<0>(v52, "");
              CLMicroLocationAnalytics::createMetricDicts((uint64_t)v44, (uint64_t *)buf, v43, (uint64_t *)v52);
              v61 = (unsigned __int8 *)objc_claimAutoreleasedReturnValue();
              if (v53 < 0)
                operator delete(v52[0]);
              std::vector<NSMutableDictionary * {__strong}>::push_back[abi:ne180100]((char **)&v71, (id *)&v61);

            }
            v45 = (unsigned __int8 *)*((_QWORD *)v42 + 1);
            if (v45)
            {
              do
              {
                v46 = v45;
                v45 = *(unsigned __int8 **)v45;
              }
              while (v45);
            }
            else
            {
              do
              {
                v46 = (unsigned __int8 *)*((_QWORD *)v42 + 2);
                v31 = *(_QWORD *)v46 == (_QWORD)v42;
                v42 = v46;
              }
              while (!v31);
            }
            v42 = v46;
          }
          while (v46 != v41 + 48);
        }
        if ((v78[15] & 0x80000000) != 0)
          operator delete(*(void **)buf);
        v47 = (unsigned __int8 *)*((_QWORD *)v41 + 1);
        if (v47)
        {
          do
          {
            v48 = v47;
            v47 = *(unsigned __int8 **)v47;
          }
          while (v47);
        }
        else
        {
          do
          {
            v48 = (unsigned __int8 *)*((_QWORD *)v41 + 2);
            v31 = *(_QWORD *)v48 == (_QWORD)v41;
            v41 = v48;
          }
          while (!v31);
        }
        v41 = v48;
      }
      while (v48 != (unsigned __int8 *)&v65);
    }
    *(_OWORD *)a3 = v71;
    *(_QWORD *)(a3 + 16) = v72;
    v72 = 0;
    v71 = 0uLL;
    std::__tree<std::__value_type<int,std::map<std::string,BOOL>>,std::__map_value_compare<int,std::__value_type<int,std::map<std::string,BOOL>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::map<std::string,BOOL>>>>::destroy((uint64_t)&v64, v65);
  }
  else
  {
    while (1)
    {
      v64 = 0;
      v65 = 0;
      v66 = 0;
      v61 = 0;
      v62 = 0;
      v63 = 0;
      if (v14 >= 1)
        break;
      v76 = (unsigned __int8 **)v20;
LABEL_63:
      if (v62 != v61)
      {
        CLMicroLocationAnalytics::analyzeAssociationStateInternal(std::function<BOOL ()(void)>)::$_2::operator()((uint64_t)&v76, &v61, (uint64_t **)&v67, (uint64_t)buf);
        if (v81)
        {
          v38 = operator new(0x28uLL);
          v56 = v38;
          v57 = xmmword_241BB2320;
          *v38 = 0u;
          v38[1] = 0u;
          *(_QWORD *)((char *)v38 + 29) = 0;
          boost::uuids::to_chars<char *>((uint64_t)v20, v38);
          if (v57 >= 0)
            v39 = (char *)&v56;
          else
            v39 = (char *)v56;
          v40 = std::string::basic_string[abi:ne180100]<0>(v54, v39);
          CLMicroLocationAnalytics::createMetricDicts((uint64_t)v40, (uint64_t *)buf, 5, (uint64_t *)v54);
          v60 = (id)objc_claimAutoreleasedReturnValue();
          if (v55 < 0)
            operator delete(v54[0]);
          if (SHIBYTE(v57) < 0)
            operator delete(v56);
          std::vector<NSMutableDictionary * {__strong}>::push_back[abi:ne180100]((char **)&v71, &v60);

          if (v81 && (v78[15] & 0x80000000) != 0)
            operator delete(*(void **)buf);
        }
      }
      *(_QWORD *)buf = &v61;
      std::vector<CLMicroLocationAssociatedStateTable::Entry>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
      *(_QWORD *)buf = &v64;
      std::vector<CLMicroLocationAssociatedStateTable::Entry>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
      v20 += 2;
      if (v20 == v51)
        goto LABEL_76;
    }
    v21 = 0;
    while (1)
    {
      v22 = *(_QWORD *)(a2 + 24);
      if (!v22)
        std::__throw_bad_function_call[abi:ne180100]();
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v22 + 48))(v22))
        break;
      CLMicroLocationTimeUtils::getTimeDeltaDaysAgo(v15, (NSDate *)~v21);
      v24 = v23;
      CLMicroLocationTimeUtils::getTimeDeltaDaysAgo(v15, (NSDate *)-v21);
      v26 = v25;
      v27 = *(id *)(*(_QWORD *)(a1 + 8) + 16);
      v28 = v27;
      if (v27)
      {
        objc_msgSend(v27, "fetchAllAssociatedStateBetweenTimes:toTime:atLoiGroupId:", v20, v24, v26);
      }
      else
      {
        *(_QWORD *)buf = 0;
        *(_QWORD *)v78 = 0;
        *(_QWORD *)&v78[8] = 0;
      }

      v30 = *(const void ***)buf;
      v29 = *(const void ***)v78;
      if (*(_QWORD *)buf != *(_QWORD *)v78)
      {
        v76 = &v64;
        do
        {
          if (*((_BYTE *)v30 + 48))
            v31 = *((_DWORD *)v30 + 16) == 2;
          else
            v31 = 0;
          if (v31)
            std::back_insert_iterator<std::vector<CLMicroLocationAssociatedStateTable::Entry>>::operator=[abi:ne180100]((uint64_t **)&v76, (__int128 *)v30);
          v30 += 9;
        }
        while (v30 != v29);
        v33 = *(const void ***)buf;
        v32 = *(const void ***)v78;
        v76 = &v61;
        while (v33 != v32)
        {
          if (*((_BYTE *)v33 + 48))
            v34 = *((_DWORD *)v33 + 16) == 5;
          else
            v34 = 0;
          if (v34)
            std::back_insert_iterator<std::vector<CLMicroLocationAssociatedStateTable::Entry>>::operator=[abi:ne180100]((uint64_t **)&v76, (__int128 *)v33);
          v33 += 9;
        }
      }
      v56 = buf;
      std::vector<CLMicroLocationAssociatedStateTable::Entry>::__destroy_vector::operator()[abi:ne180100]((void ***)&v56);
      if (++v21 == v14)
      {
        v76 = (unsigned __int8 **)v20;
        if (v65 != v64)
        {
          CLMicroLocationAnalytics::analyzeAssociationStateInternal(std::function<BOOL ()(void)>)::$_2::operator()((uint64_t)&v76, &v64, (uint64_t **)&v69, (uint64_t)buf);
          if (v81)
          {
            v35 = operator new(0x28uLL);
            v56 = v35;
            v57 = xmmword_241BB2320;
            *v35 = 0u;
            v35[1] = 0u;
            *(_QWORD *)((char *)v35 + 29) = 0;
            boost::uuids::to_chars<char *>((uint64_t)v20, v35);
            if (v57 >= 0)
              v36 = (char *)&v56;
            else
              v36 = (char *)v56;
            v37 = std::string::basic_string[abi:ne180100]<0>(__p, v36);
            CLMicroLocationAnalytics::createMetricDicts((uint64_t)v37, (uint64_t *)buf, 2, (uint64_t *)__p);
            v60 = (id)objc_claimAutoreleasedReturnValue();
            if (v59 < 0)
              operator delete(__p[0]);
            if (SHIBYTE(v57) < 0)
              operator delete(v56);
            std::vector<NSMutableDictionary * {__strong}>::push_back[abi:ne180100]((char **)&v71, &v60);

            if (v81 && (v78[15] & 0x80000000) != 0)
              operator delete(*(void **)buf);
          }
        }
        goto LABEL_63;
      }
    }
    if (onceToken_MicroLocation_Default != -1)
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_96);
    v49 = logObject_MicroLocation_Default;
    if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
    {
      *(_QWORD *)buf = 68289282;
      *(_WORD *)v78 = 2082;
      *(_QWORD *)&v78[2] = "";
      *(_WORD *)&v78[10] = 2082;
      *(_QWORD *)&v78[12] = "MicroLocationAnalytics";
      _os_log_impl(&dword_2419D9000, v49, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"analyzeAssociationState cancelled\", \"Activity\":%{public, location:escape_only}s}", buf, 0x1Cu);
    }
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
    *(_QWORD *)buf = &v61;
    std::vector<CLMicroLocationAssociatedStateTable::Entry>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
    *(_QWORD *)buf = &v64;
    std::vector<CLMicroLocationAssociatedStateTable::Entry>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  }
  std::__tree<std::string>::destroy((uint64_t)&v67, v68[0]);
  std::__tree<std::string>::destroy((uint64_t)&v69, v70[0]);
  *(_QWORD *)buf = &v71;
  std::vector<NSMutableDictionary * {__strong}>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);

  if (v73)
  {
    v74 = v73;
    operator delete(v73);
  }
}

void sub_241B20D98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *__p,uint64_t a33,int a34,__int16 a35,char a36,char a37,void *a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,char *a46,uint64_t a47,char *a48,char *a49,uint64_t a50,char a51)
{
  void *v51;
  uint64_t v52;
  void *v54;

  if (*(_BYTE *)(v52 - 128) && *(char *)(v52 - 153) < 0)
    operator delete(*(void **)(v52 - 176));
  *(_QWORD *)(v52 - 176) = &a39;
  std::vector<CLMicroLocationAssociatedStateTable::Entry>::__destroy_vector::operator()[abi:ne180100]((void ***)(v52 - 176));
  *(_QWORD *)(v52 - 176) = &a42;
  std::vector<CLMicroLocationAssociatedStateTable::Entry>::__destroy_vector::operator()[abi:ne180100]((void ***)(v52 - 176));
  std::__tree<std::string>::destroy((uint64_t)&a45, a46);
  std::__tree<std::string>::destroy((uint64_t)&a48, a49);
  a48 = &a51;
  std::vector<NSMutableDictionary * {__strong}>::__destroy_vector::operator()[abi:ne180100]((void ***)&a48);

  v54 = *(void **)(v52 - 208);
  if (v54)
  {
    *(_QWORD *)(v52 - 200) = v54;
    operator delete(v54);
  }
  _Unwind_Resume(a1);
}

void ULSettings::get<ULSettings::AssociatedStateCALoiTypes>(std::vector<std::string> *a1@<X8>)
{
  void *v1;
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t i;
  std::vector<std::string>::pointer end;
  __int128 v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  std::string *v11;
  std::string *v12;
  __int128 v13;
  std::string *v14;
  uint64_t j;
  std::vector<std::string>::pointer v16;
  __int128 v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  std::string *v21;
  std::string *v22;
  __int128 v23;
  std::string *v24;
  id v25;
  void *v27;
  void *v28;
  void *v29;
  std::vector<std::string> v30;
  std::vector<std::string> __p;
  void *v32[2];
  __int128 v33;
  __int128 v34;
  __int128 v35;
  std::__split_buffer<std::string> __v;
  std::__split_buffer<std::string> v37;
  uint64_t v38;

  v38 = *MEMORY[0x24BDAC8D0];
  +[ULDefaultsSingleton shared](ULDefaultsSingleton, "shared");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "defaultsDictionary");
  v29 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "ULAssociatedStateCALoiTypes");
  v27 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v29, "objectForKey:");
  v28 = (void *)objc_claimAutoreleasedReturnValue();
  if (v28 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
  {
    memset(&v30, 0, sizeof(v30));
    v25 = v28;
    std::vector<std::string>::reserve(&v30, objc_msgSend(v25, "count"));
    v34 = 0u;
    v35 = 0u;
    *(_OWORD *)v32 = 0u;
    v33 = 0u;
    v2 = v25;
    v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", v32, &v37, 16);
    if (v3)
    {
      v4 = *(_QWORD *)v33;
      do
      {
        for (i = 0; i != v3; ++i)
        {
          if (*(_QWORD *)v33 != v4)
            objc_enumerationMutation(v2);
          std::string::basic_string[abi:ne180100]<0>(&__p, (char *)objc_msgSend(objc_retainAutorelease(*((id *)v32[1] + i)), "UTF8String"));
          end = v30.__end_;
          if (v30.__end_ >= v30.__end_cap_.__value_)
          {
            v8 = 0xAAAAAAAAAAAAAAABLL * (((char *)v30.__end_ - (char *)v30.__begin_) >> 3);
            v9 = v8 + 1;
            if (v8 + 1 > 0xAAAAAAAAAAAAAAALL)
              std::vector<CLMicroLocationProto::ConfidenceReason>::__throw_length_error[abi:ne180100]();
            if (0x5555555555555556 * (((char *)v30.__end_cap_.__value_ - (char *)v30.__begin_) >> 3) > v9)
              v9 = 0x5555555555555556 * (((char *)v30.__end_cap_.__value_ - (char *)v30.__begin_) >> 3);
            if (0xAAAAAAAAAAAAAAABLL * (((char *)v30.__end_cap_.__value_ - (char *)v30.__begin_) >> 3) >= 0x555555555555555)
              v10 = 0xAAAAAAAAAAAAAAALL;
            else
              v10 = v9;
            __v.__end_cap_.__value_ = (std::allocator<std::string> *)&v30.__end_cap_;
            if (v10)
              v11 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)&v30.__end_cap_, v10);
            else
              v11 = 0;
            v12 = v11 + v8;
            __v.__first_ = v11;
            __v.__begin_ = v12;
            __v.__end_cap_.__value_ = &v11[v10];
            v13 = *(_OWORD *)&__p.__begin_;
            v12->__r_.__value_.__r.__words[2] = (std::string::size_type)__p.__end_cap_.__value_;
            *(_OWORD *)&v12->__r_.__value_.__l.__data_ = v13;
            memset(&__p, 0, sizeof(__p));
            __v.__end_ = v12 + 1;
            std::vector<std::string>::__swap_out_circular_buffer(&v30, &__v);
            v14 = v30.__end_;
            std::__split_buffer<std::string>::~__split_buffer(&__v);
            v30.__end_ = v14;
            if (SHIBYTE(__p.__end_cap_.__value_) < 0)
              operator delete(__p.__begin_);
          }
          else
          {
            v7 = *(_OWORD *)&__p.__begin_;
            v30.__end_->__r_.__value_.__r.__words[2] = (std::string::size_type)__p.__end_cap_.__value_;
            *(_OWORD *)&end->__r_.__value_.__l.__data_ = v7;
            v30.__end_ = end + 1;
          }
        }
        v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", v32, &v37, 16);
      }
      while (v3);
    }

    *a1 = v30;
    memset(&v30, 0, sizeof(v30));
    v37.__first_ = (std::__split_buffer<std::string>::pointer)&v30;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v37);

  }
  else
  {
    memset(&__v, 0, 24);
    memset(&__p, 0, sizeof(__p));
    std::vector<std::string>::reserve(&__p, 8uLL);
    for (j = 0; j != 8; ++j)
    {
      std::string::basic_string[abi:ne180100]<0>(v32, _ZGRN10ULSettings14SettingsTraitsINS_25AssociatedStateCALoiTypesEE12defaultValueE_[j]);
      v16 = __p.__end_;
      if (__p.__end_ >= __p.__end_cap_.__value_)
      {
        v18 = 0xAAAAAAAAAAAAAAABLL * (((char *)__p.__end_ - (char *)__p.__begin_) >> 3);
        v19 = v18 + 1;
        if (v18 + 1 > 0xAAAAAAAAAAAAAAALL)
          std::vector<CLMicroLocationProto::ConfidenceReason>::__throw_length_error[abi:ne180100]();
        if (0x5555555555555556 * (((char *)__p.__end_cap_.__value_ - (char *)__p.__begin_) >> 3) > v19)
          v19 = 0x5555555555555556 * (((char *)__p.__end_cap_.__value_ - (char *)__p.__begin_) >> 3);
        if (0xAAAAAAAAAAAAAAABLL * (((char *)__p.__end_cap_.__value_ - (char *)__p.__begin_) >> 3) >= 0x555555555555555)
          v20 = 0xAAAAAAAAAAAAAAALL;
        else
          v20 = v19;
        v37.__end_cap_.__value_ = (std::allocator<std::string> *)&__p.__end_cap_;
        if (v20)
          v21 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)&__p.__end_cap_, v20);
        else
          v21 = 0;
        v22 = v21 + v18;
        v37.__first_ = v21;
        v37.__begin_ = v22;
        v37.__end_cap_.__value_ = &v21[v20];
        v23 = *(_OWORD *)v32;
        v22->__r_.__value_.__r.__words[2] = v33;
        *(_OWORD *)&v22->__r_.__value_.__l.__data_ = v23;
        v32[1] = 0;
        *(_QWORD *)&v33 = 0;
        v32[0] = 0;
        v37.__end_ = v22 + 1;
        std::vector<std::string>::__swap_out_circular_buffer(&__p, &v37);
        v24 = __p.__end_;
        std::__split_buffer<std::string>::~__split_buffer(&v37);
        __p.__end_ = v24;
        if (SBYTE7(v33) < 0)
          operator delete(v32[0]);
      }
      else
      {
        v17 = *(_OWORD *)v32;
        __p.__end_->__r_.__value_.__r.__words[2] = v33;
        *(_OWORD *)&v16->__r_.__value_.__l.__data_ = v17;
        __p.__end_ = v16 + 1;
      }
    }
    std::vector<std::string>::__vdeallocate((std::vector<std::string> *)&__v);
    *(_OWORD *)&__v.__first_ = *(_OWORD *)&__p.__begin_;
    __v.__end_ = __p.__end_cap_.__value_;
    memset(&__p, 0, sizeof(__p));
    v37.__first_ = (std::__split_buffer<std::string>::pointer)&__p;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v37);
    *(_OWORD *)&a1->__begin_ = *(_OWORD *)&__v.__first_;
    a1->__end_cap_.__value_ = __v.__end_;
    memset(&__v, 0, 24);
    v37.__first_ = (std::__split_buffer<std::string>::pointer)&__v;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v37);
  }

}

void sub_241B2146C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12, void *a13, void *a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,void **p_p,uint64_t a23,uint64_t a24,uint64_t a25,std::__split_buffer<std::string> *__pa,uint64_t a27,std::__split_buffer<std::string> *a28)
{
  void *v28;

  p_p = &__p;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&p_p);

  _Unwind_Resume(a1);
}

uint64_t CLMicroLocationAnalytics::analyzeAssociationStateInternal(std::function<BOOL ()(void)>)::$_2::operator()@<X0>(uint64_t result@<X0>, unsigned __int8 **a2@<X1>, uint64_t **a3@<X2>, uint64_t a4@<X8>)
{
  unsigned __int8 *v5;
  unsigned __int8 *v6;
  uint64_t *v8;
  CLMacAddress *v9;
  uint64_t **v10;
  NSObject *v11;
  uint64_t v12;
  char *v13;
  std::string *p_p;
  NSObject *v15;
  uint64_t v16;
  char *v17;
  std::string *v18;
  _QWORD *v19;
  uint64_t v20;
  std::string::size_type v21;
  std::string::size_type v22;
  std::string __p;
  __int128 v24;
  __int128 v25;
  int v26;
  __int128 v27;
  __int128 v28;
  int v29;
  __int128 v30;
  __int128 v31;
  int v32;
  std::string buf[2];
  uint64_t v34;

  v34 = *MEMORY[0x24BDAC8D0];
  v5 = *a2;
  v6 = a2[1];
  if (v6 == *a2)
  {
    *(_BYTE *)a4 = 0;
    *(_BYTE *)(a4 + 48) = 0;
  }
  else
  {
    v8 = (uint64_t *)result;
    v30 = 0u;
    v31 = 0u;
    v32 = 1065353216;
    v27 = 0u;
    v28 = 0u;
    v29 = 1065353216;
    v24 = 0u;
    v25 = 0u;
    v26 = 1065353216;
    do
    {
      std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)&v30, v5, (uint64_t)v5);
      v9 = (CLMacAddress *)(v5 + 56);
      __p.__r_.__value_.__r.__words[0] = CLMacAddress::toUint64(v9);
      buf[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
      v10 = (uint64_t **)std::__hash_table<std::__hash_value_type<unsigned long long,std::set<int>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::set<int>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::set<int>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::set<int>>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long &&>,std::tuple<>>((uint64_t)&v24, (unint64_t *)&__p, (uint64_t)&std::piecewise_construct, (uint64_t **)buf);
      v9 = (CLMacAddress *)((char *)v9 + 12);
      std::__tree<CLMicroLocationRecordingCompletionMetaInformation::RecordingError>::__emplace_unique_key_args<CLMicroLocationRecordingCompletionMetaInformation::RecordingError,CLMicroLocationRecordingCompletionMetaInformation::RecordingError>(v10 + 3, (int *)v9, v9);
      std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::__emplace_unique_key_args<int,int const&>((uint64_t)&v27, (int *)v9, v9);
      v5 = (unsigned __int8 *)&v9->var0 + 4;
    }
    while (v5 != v6);
    if (*((_QWORD *)&v31 + 1) <= 1uLL)
    {
      if (*(char *)(v31 + 39) < 0)
        std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(v31 + 16), *(_QWORD *)(v31 + 24));
      else
        __p = *(std::string *)(v31 + 16);
      buf[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
      *((_BYTE *)std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a3, (const void **)&__p.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (__int128 **)buf)+ 56) = 1;
      v19 = (_QWORD *)v25;
      if ((_QWORD)v25)
      {
        v20 = 0;
        do
        {
          if (v19[5] > 1uLL)
            ++v20;
          v19 = (_QWORD *)*v19;
        }
        while (v19);
      }
      else
      {
        v20 = 0;
      }
      v21 = *((_QWORD *)&v25 + 1);
      v22 = *((_QWORD *)&v28 + 1);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(buf, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
      else
        buf[0] = __p;
      buf[1].__r_.__value_.__r.__words[0] = v21;
      buf[1].__r_.__value_.__l.__size_ = v22;
      *(std::string *)a4 = buf[0];
      *(_QWORD *)(a4 + 40) = v20;
      *(_OWORD *)(a4 + 24) = *(_OWORD *)&buf[1].__r_.__value_.__l.__data_;
      *(_BYTE *)(a4 + 48) = 1;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
    }
    else
    {
      if (onceToken_MicroLocation_Default != -1)
        dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_96);
      v11 = (id)logObject_MicroLocation_Default;
      if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      {
        v12 = *v8;
        v13 = (char *)operator new(0x28uLL);
        *(_QWORD *)(v13 + 29) = 0;
        *(_OWORD *)v13 = 0u;
        *((_OWORD *)v13 + 1) = 0u;
        boost::uuids::to_chars<char *>(v12, v13);
        boost::algorithm::join<std::unordered_set<std::string>,char [2]>((uint64_t)&v30, ",", (uint64_t)&__p);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          p_p = &__p;
        else
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        buf[0].__r_.__value_.__r.__words[0] = 68289538;
        LOWORD(buf[0].__r_.__value_.__r.__words[1]) = 2082;
        *(std::string::size_type *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"";
        WORD1(buf[0].__r_.__value_.__r.__words[2]) = 2082;
        *(std::string::size_type *)((char *)&buf[0].__r_.__value_.__r.__words[2] + 4) = (std::string::size_type)v13;
        WORD2(buf[1].__r_.__value_.__r.__words[0]) = 2082;
        *(std::string::size_type *)((char *)buf[1].__r_.__value_.__r.__words + 6) = (std::string::size_type)p_p;
        _os_log_impl(&dword_2419D9000, v11, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"analyzeAssociationState, loiGroupId without unique rtLoiType\", \"LoiGroupId\":%{public, location:escape_only}s, \"LoiTypes\":%{public, location:escape_only}s}", (uint8_t *)buf, 0x26u);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        operator delete(v13);
      }

      if (onceToken_MicroLocation_Default != -1)
        dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_96);
      v15 = (id)logObject_MicroLocation_Default;
      if (os_signpost_enabled(v15))
      {
        v16 = *v8;
        v17 = (char *)operator new(0x28uLL);
        *(_QWORD *)(v17 + 29) = 0;
        *(_OWORD *)v17 = 0u;
        *((_OWORD *)v17 + 1) = 0u;
        boost::uuids::to_chars<char *>(v16, v17);
        boost::algorithm::join<std::unordered_set<std::string>,char [2]>((uint64_t)&v30, ",", (uint64_t)&__p);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v18 = &__p;
        else
          v18 = (std::string *)__p.__r_.__value_.__r.__words[0];
        buf[0].__r_.__value_.__r.__words[0] = 68289538;
        LOWORD(buf[0].__r_.__value_.__r.__words[1]) = 2082;
        *(std::string::size_type *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"";
        WORD1(buf[0].__r_.__value_.__r.__words[2]) = 2082;
        *(std::string::size_type *)((char *)&buf[0].__r_.__value_.__r.__words[2] + 4) = (std::string::size_type)v17;
        WORD2(buf[1].__r_.__value_.__r.__words[0]) = 2082;
        *(std::string::size_type *)((char *)buf[1].__r_.__value_.__r.__words + 6) = (std::string::size_type)v18;
        _os_signpost_emit_with_name_impl(&dword_2419D9000, v15, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "analyzeAssociationState, loiGroupId without unique rtLoiType", "{\"msg%{public}.0s\":\"analyzeAssociationState, loiGroupId without unique rtLoiType\", \"LoiGroupId\":%{public, location:escape_only}s, \"LoiTypes\":%{public, location:escape_only}s}", (uint8_t *)buf, 0x26u);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        operator delete(v17);
      }

      *(_BYTE *)a4 = 0;
      *(_BYTE *)(a4 + 48) = 0;
    }
    std::__hash_table<std::__hash_value_type<unsigned long long,std::set<int>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::set<int>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::set<int>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::set<int>>>>::~__hash_table((uint64_t)&v24);
    std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>>>::~__hash_table((uint64_t)&v27);
    return std::__hash_table<std::__hash_value_type<std::string,AnchorValueStatistics>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AnchorValueStatistics>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AnchorValueStatistics>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,AnchorValueStatistics>>>::~__hash_table((uint64_t)&v30);
  }
  return result;
}

void sub_241B219D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  if (a14 < 0)
    operator delete(__p);
  std::__hash_table<std::__hash_value_type<unsigned long long,std::set<int>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::set<int>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::set<int>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::set<int>>>>::~__hash_table((uint64_t)&a16);
  std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>>>::~__hash_table((uint64_t)&a22);
  std::__hash_table<std::__hash_value_type<std::string,AnchorValueStatistics>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AnchorValueStatistics>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AnchorValueStatistics>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,AnchorValueStatistics>>>::~__hash_table((uint64_t)&a28);
  _Unwind_Resume(a1);
}

id CLMicroLocationAnalytics::createMetricDicts(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t *a4)
{
  id v7;
  void *v8;
  uint64_t *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  NSObject *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _DWORD v20[2];
  __int16 v21;
  const char *v22;
  __int16 v23;
  uint64_t *v24;
  __int16 v25;
  uint64_t *v26;
  __int16 v27;
  int v28;
  __int16 v29;
  uint64_t v30;
  __int16 v31;
  uint64_t v32;
  __int16 v33;
  uint64_t v34;
  uint64_t v35;

  v35 = *MEMORY[0x24BDAC8D0];
  v7 = objc_alloc_init(MEMORY[0x24BDBCED8]);
  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithInt:", a3);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "setObject:forKeyedSubscript:", v8, CFSTR("Band"));

  if (*((char *)a2 + 23) >= 0)
    v9 = a2;
  else
    v9 = (uint64_t *)*a2;
  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", v9);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "setObject:forKeyedSubscript:", v10, CFSTR("rtLoiType"));

  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedLong:", a2[3]);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "setObject:forKeyedSubscript:", v11, CFSTR("NumberOfMacAddresses"));

  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedLong:", a2[4]);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "setObject:forKeyedSubscript:", v12, CFSTR("NumberOfChannels"));

  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedLong:", a2[5]);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "setObject:forKeyedSubscript:", v13, CFSTR("NumberOfMacAddressAppearingOnMultipleChannels"));

  if (onceToken_MicroLocation_Default != -1)
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_96);
  v14 = logObject_MicroLocation_Default;
  if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
  {
    if (*((char *)a4 + 23) < 0)
      a4 = (uint64_t *)*a4;
    if (*((char *)a2 + 23) >= 0)
      v15 = a2;
    else
      v15 = (uint64_t *)*a2;
    v16 = a2[3];
    v17 = a2[4];
    v18 = a2[5];
    v20[0] = 68290563;
    v20[1] = 0;
    v21 = 2082;
    v22 = "";
    v23 = 2081;
    v24 = a4;
    v25 = 2082;
    v26 = v15;
    v27 = 1026;
    v28 = a3;
    v29 = 2050;
    v30 = v16;
    v31 = 2050;
    v32 = v17;
    v33 = 2050;
    v34 = v18;
    _os_log_impl(&dword_2419D9000, v14, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLMicroLocationAnalytics, analyzeAssociationState\", \"rtGroupLoiId\":%{private, location:escape_only}s, \"rtLoiType\":%{public, location:escape_only}s, \"Band\":%{public}d, \"numberOfMacAddresses\":%{public}llu, \"NumberOfChannels\":%{public}llu, \"NumberOfMacAddressAppearingOnMultipleChannels\":%{public}llu}", (uint8_t *)v20, 0x4Au);
  }
  return v7;
}

void sub_241B21CBC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

id std::vector<NSMutableDictionary * {__strong}>::push_back[abi:ne180100](char **a1, id *a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  char *v7;
  id result;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;
  int64x2_t v20;
  char *v21;
  uint64_t v22;
  int64x2_t v23;
  char *v24;
  uint64_t v25;

  v6 = (unint64_t)a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(char **)(v4 - 8);
  if ((unint64_t)v7 >= v6)
  {
    v10 = (v7 - *a1) >> 3;
    if ((unint64_t)(v10 + 1) >> 61)
      std::vector<CLMicroLocationProto::ConfidenceReason>::__throw_length_error[abi:ne180100]();
    v11 = v5 - (_QWORD)*a1;
    v12 = v11 >> 2;
    if (v11 >> 2 <= (unint64_t)(v10 + 1))
      v12 = v10 + 1;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
      v13 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v13 = v12;
    v25 = v4;
    if (v13)
      v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CLMicroLocationWiFiChannelHistogram>>(v4, v13);
    else
      v14 = 0;
    v15 = &v14[8 * v10];
    v16 = &v14[8 * v13];
    v24 = v16;
    *(_QWORD *)v15 = *a2;
    v9 = v15 + 8;
    v23.i64[1] = (uint64_t)(v15 + 8);
    v18 = *a1;
    v17 = a1[1];
    if (v17 == *a1)
    {
      v20 = vdupq_n_s64((unint64_t)v17);
    }
    else
    {
      do
      {
        v19 = *((_QWORD *)v17 - 1);
        v17 -= 8;
        *(_QWORD *)v17 = 0;
        *((_QWORD *)v15 - 1) = v19;
        v15 -= 8;
      }
      while (v17 != v18);
      v20 = *(int64x2_t *)a1;
      v9 = (char *)v23.i64[1];
      v16 = v24;
    }
    *a1 = v15;
    a1[1] = v9;
    v23 = v20;
    v21 = a1[2];
    a1[2] = v16;
    v24 = v21;
    v22 = v20.i64[0];
    result = (id)std::__split_buffer<NSMutableDictionary * {__strong}>::~__split_buffer((uint64_t)&v22);
  }
  else
  {
    result = *a2;
    *(_QWORD *)v7 = result;
    v9 = v7 + 8;
  }
  a1[1] = v9;
  return result;
}

void CLMicroLocationAnalytics::analyzeLocationOfInterestUsage(CLMicroLocationAnalytics *a1, uint64_t a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  const char *v7;
  NSObject *v8;
  uint32_t v9;
  uint64_t v10;
  NSObject *v11;
  uint64_t v12;
  id v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  id v19;
  void *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char *v26;
  char *v27;
  char *v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  int64x2_t v32;
  uint64_t v33;
  NSObject *v34;
  uint64_t v35;
  uint64_t i;
  NSObject *v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int64x2_t v42;
  _QWORD v43[2];
  uint8_t buf[8];
  _BYTE v45[32];
  uint64_t v46;

  v46 = *MEMORY[0x24BDAC8D0];
  if (onceToken_MicroLocation_Default != -1)
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_96);
  v4 = logObject_MicroLocation_Default;
  if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 68289026;
    *(_DWORD *)&buf[4] = 0;
    *(_WORD *)v45 = 2082;
    *(_QWORD *)&v45[2] = "";
    _os_log_impl(&dword_2419D9000, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"analyzing LOI usage\"}", buf, 0x12u);
  }
  if ((ULSettings::get<ULSettings::AnalyticsSendEventEnabled>() & 1) != 0)
  {
    v5 = *(_QWORD *)(a2 + 24);
    if (!v5)
      std::__throw_bad_function_call[abi:ne180100]();
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v5 + 48))(v5))
    {
      if (onceToken_MicroLocation_Default != -1)
        dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_96);
      v6 = logObject_MicroLocation_Default;
      if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 68289282;
        *(_DWORD *)&buf[4] = 0;
        *(_WORD *)v45 = 2082;
        *(_QWORD *)&v45[2] = "";
        *(_WORD *)&v45[10] = 2082;
        *(_QWORD *)&v45[12] = "MicroLocationAnalytics";
        v7 = "{\"msg%{public}.0s\":\"LOI usage analytics canceled\", \"Activity\":%{public, location:escape_only}s}";
        v8 = v6;
        v9 = 28;
LABEL_16:
        _os_log_impl(&dword_2419D9000, v8, OS_LOG_TYPE_DEFAULT, v7, buf, v9);
      }
    }
    else
    {
      CLMicroLocationAnalytics::createLoiVisitsEvent(a1);
      v38 = (void *)objc_claimAutoreleasedReturnValue();
      if (v38)
      {
        if (onceToken_MicroLocation_Default != -1)
          dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_96);
        v11 = (id)logObject_MicroLocation_Default;
        if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
        {
          v12 = objc_msgSend(CFSTR("com.apple.MicroLocation.Visit"), "UTF8String");
          *(_DWORD *)buf = 68289282;
          *(_DWORD *)&buf[4] = 0;
          *(_WORD *)v45 = 2082;
          *(_QWORD *)&v45[2] = "";
          *(_WORD *)&v45[10] = 2082;
          *(_QWORD *)&v45[12] = v12;
          _os_log_impl(&dword_2419D9000, v11, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Sending analytics event.\", \"Event name\":%{public, location:escape_only}s}", buf, 0x1Cu);
        }

        AnalyticsSendEvent();
      }
      v42 = 0uLL;
      v43[0] = 0;
      v13 = *(id *)(*((_QWORD *)a1 + 1) + 56);
      v14 = v13;
      if (v13)
      {
        objc_msgSend(v13, "fetchAllDistinctLoiGroups");
      }
      else
      {
        v39 = 0;
        v40 = 0;
        v41 = 0;
      }

      v15 = v39;
      v16 = v40;
      if (v39 == v40)
      {
LABEL_48:
        if (onceToken_MicroLocation_Default != -1)
          dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_96);
        v34 = (id)logObject_MicroLocation_Default;
        if (os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT))
        {
          v35 = objc_msgSend(CFSTR("com.apple.MicroLocation.Location"), "UTF8String");
          *(_DWORD *)buf = 68289538;
          *(_DWORD *)&buf[4] = 0;
          *(_WORD *)v45 = 2082;
          *(_QWORD *)&v45[2] = "";
          *(_WORD *)&v45[10] = 2082;
          *(_QWORD *)&v45[12] = v35;
          *(_WORD *)&v45[20] = 2050;
          *(_QWORD *)&v45[22] = (v42.i64[1] - v42.i64[0]) >> 3;
          _os_log_impl(&dword_2419D9000, v34, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Sending analytics events.\", \"Event name\":%{public, location:escape_only}s, \"Number of events\":%{public}lu}", buf, 0x26u);
        }

        for (i = v42.i64[0]; i != v42.i64[1]; i += 8)
          AnalyticsSendEvent();
      }
      else
      {
        while (1)
        {
          v17 = *(_QWORD *)(a2 + 24);
          if (!v17)
            std::__throw_bad_function_call[abi:ne180100]();
          if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v17 + 48))(v17))
            break;
          CLMicroLocationAnalytics::createLoiInformationEvent(a1, (const uuid *)(v15 + 24));
          v18 = (void *)objc_claimAutoreleasedReturnValue();
          if (v18)
          {
            v19 = v18;
            v20 = v19;
            v21 = v42.i64[1];
            if (v42.i64[1] >= v43[0])
            {
              v23 = (v42.i64[1] - v42.i64[0]) >> 3;
              if ((unint64_t)(v23 + 1) >> 61)
                std::vector<CLMicroLocationProto::ConfidenceReason>::__throw_length_error[abi:ne180100]();
              v24 = (v43[0] - v42.i64[0]) >> 2;
              if (v24 <= v23 + 1)
                v24 = v23 + 1;
              if (v43[0] - v42.i64[0] >= 0x7FFFFFFFFFFFFFF8uLL)
                v25 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v25 = v24;
              *(_QWORD *)&v45[24] = v43;
              if (v25)
                v26 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CLMicroLocationWiFiChannelHistogram>>((uint64_t)v43, v25);
              else
                v26 = 0;
              v27 = &v26[8 * v23];
              v28 = &v26[8 * v25];
              *(_QWORD *)&v45[16] = v28;
              *(_QWORD *)v27 = v20;
              v22 = v27 + 8;
              *(_QWORD *)&v45[8] = v27 + 8;
              v29 = (_QWORD *)v42.i64[1];
              v30 = (_QWORD *)v42.i64[0];
              if (v42.i64[1] == v42.i64[0])
              {
                v32 = vdupq_n_s64(v42.u64[1]);
              }
              else
              {
                do
                {
                  v31 = *--v29;
                  *v29 = 0;
                  *((_QWORD *)v27 - 1) = v31;
                  v27 -= 8;
                }
                while (v29 != v30);
                v32 = v42;
                v22 = *(_QWORD **)&v45[8];
                v28 = *(char **)&v45[16];
              }
              v42.i64[0] = (uint64_t)v27;
              v42.i64[1] = (uint64_t)v22;
              *(int64x2_t *)v45 = v32;
              v33 = v43[0];
              v43[0] = v28;
              *(_QWORD *)&v45[16] = v33;
              *(_QWORD *)buf = v32.i64[0];
              std::__split_buffer<NSMutableDictionary * {__strong}>::~__split_buffer((uint64_t)buf);
            }
            else
            {
              *(_QWORD *)v42.i64[1] = v19;
              v22 = (_QWORD *)(v21 + 8);
            }
            v42.i64[1] = (uint64_t)v22;

          }
          v15 += 64;
          if (v15 == v16)
            goto LABEL_48;
        }
        if (onceToken_MicroLocation_Default != -1)
          dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_96);
        v37 = logObject_MicroLocation_Default;
        if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 68289282;
          *(_DWORD *)&buf[4] = 0;
          *(_WORD *)v45 = 2082;
          *(_QWORD *)&v45[2] = "";
          *(_WORD *)&v45[10] = 2082;
          *(_QWORD *)&v45[12] = "MicroLocationAnalytics";
          _os_log_impl(&dword_2419D9000, v37, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"LOI usage analytics canceled\", \"Activity\":%{public, location:escape_only}s}", buf, 0x1Cu);
        }
      }
      *(_QWORD *)buf = &v39;
      std::vector<CLMiLoLoiTable::Entry>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
      *(_QWORD *)buf = &v42;
      std::vector<NSMutableDictionary * {__strong}>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);

    }
  }
  else
  {
    if (onceToken_MicroLocation_Default != -1)
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_96);
    v10 = logObject_MicroLocation_Default;
    if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 68289026;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)v45 = 2082;
      *(_QWORD *)&v45[2] = "";
      v7 = "{\"msg%{public}.0s\":\"not analyzing Locations of Interest usage, since sending to core-analytics is disabled\"}";
      v8 = v10;
      v9 = 18;
      goto LABEL_16;
    }
  }
}

void sub_241B22414(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  void *v9;

  _Unwind_Resume(a1);
}

id CLMicroLocationAnalytics::createLoiVisitsEvent(CLMicroLocationAnalytics *this)
{
  NSObject *v2;
  id v3;
  void *v4;
  __int128 *v5;
  __int128 *v6;
  __int128 *v7;
  _BOOL8 v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  void **v14;
  __int128 v15;
  __int128 *v16;
  __int128 *v17;
  unsigned __int8 *v18;
  __int128 *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  int v24;
  int v25;
  void *v26;
  uint64_t v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  void *__p[2];
  char v37;
  __int128 *v38;
  __int128 *v39;
  uint64_t v40;
  void **v41;
  uint8_t buf[32];
  int v43;
  uint64_t v44;

  v44 = *MEMORY[0x24BDAC8D0];
  if (onceToken_MicroLocation_Default != -1)
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_96);
  v2 = (id)logObject_MicroLocation_Default;
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 68289282;
    *(_DWORD *)&buf[4] = 0;
    *(_WORD *)&buf[8] = 2082;
    *(_QWORD *)&buf[10] = "";
    *(_WORD *)&buf[18] = 2082;
    *(_QWORD *)&buf[20] = objc_msgSend(CFSTR("com.apple.MicroLocation.Visit"), "UTF8String");
    _os_log_impl(&dword_2419D9000, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Creating analytics event.\", \"Event name\":%{public, location:escape_only}s}", buf, 0x1Cu);
  }

  v3 = *(id *)(*((_QWORD *)this + 1) + 56);
  v4 = v3;
  if (v3)
  {
    objc_msgSend(v3, "fetchAllDistinctLoiGroups");
  }
  else
  {
    v38 = 0;
    v39 = 0;
    v40 = 0;
  }

  v5 = v38;
  v6 = v39;
  if (v38 == v39)
  {
    v8 = 0;
    v10 = (uint64_t)v38;
  }
  else
  {
    v7 = v38 + 4;
    do
    {
      v8 = *(__int128 *)((char *)v7 - 40) == 0;
      v9 = *(__int128 *)((char *)v7 - 40) == 0 || v7 == v39;
      v7 += 4;
    }
    while (!v9);
    v10 = (uint64_t)v38;
    while (*(_OWORD *)(v10 + 24) != 0)
    {
      v10 += 64;
      if ((__int128 *)v10 == v39)
      {
        v5 = v39;
        v10 = (uint64_t)v39;
        goto LABEL_29;
      }
    }
    if ((__int128 *)v10 == v39 || (v11 = v10 + 64, (__int128 *)(v10 + 64) == v39))
    {
      v5 = v39;
    }
    else
    {
      do
      {
        *(_QWORD *)buf = 0;
        *(_QWORD *)&buf[8] = 0;
        if (*(_OWORD *)(v11 + 24) != 0)
        {
          v12 = *(_OWORD *)v11;
          v13 = *(_OWORD *)(v11 + 16);
          *(_QWORD *)(v10 + 32) = *(_QWORD *)(v11 + 32);
          *(_OWORD *)v10 = v12;
          *(_OWORD *)(v10 + 16) = v13;
          v14 = (void **)(v10 + 40);
          if (*(char *)(v10 + 63) < 0)
            operator delete(*v14);
          v15 = *(_OWORD *)(v11 + 40);
          *(_QWORD *)(v10 + 56) = *(_QWORD *)(v11 + 56);
          *(_OWORD *)v14 = v15;
          *(_BYTE *)(v11 + 63) = 0;
          *(_BYTE *)(v11 + 40) = 0;
          v10 += 64;
        }
        v11 += 64;
      }
      while ((__int128 *)v11 != v6);
      v5 = v39;
    }
  }
LABEL_29:
  std::vector<CLMiLoLoiTable::Entry>::erase((uint64_t)&v38, v10, v5);
  memset(buf, 0, sizeof(buf));
  v43 = 1065353216;
  v17 = v38;
  v16 = v39;
  if (v38 == v39)
  {
    v19 = v38;
  }
  else
  {
    do
    {
      __p[0] = (char *)v17 + 40;
      v18 = std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)buf, (unsigned __int8 *)v17 + 40, (uint64_t)&std::piecewise_construct, (__int128 **)__p);
      ++*((_QWORD *)v18 + 5);
      v17 += 4;
    }
    while (v17 != v16);
    v17 = v38;
    v19 = v39;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "home");
  v41 = __p;
  v20 = *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)buf, (unsigned __int8 *)__p, (uint64_t)&std::piecewise_construct, (__int128 **)&v41)+ 5);
  if (v37 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "work");
  v41 = __p;
  v21 = *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)buf, (unsigned __int8 *)__p, (uint64_t)&std::piecewise_construct, (__int128 **)&v41)+ 5);
  if (v37 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "airplay");
  v41 = __p;
  v22 = *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)buf, (unsigned __int8 *)__p, (uint64_t)&std::piecewise_construct, (__int128 **)&v41)+ 5);
  if (v37 < 0)
    operator delete(__p[0]);
  v23 = *(id *)(*((_QWORD *)this + 1) + 56);
  v24 = objc_msgSend(v23, "count");
  v25 = objc_msgSend(*(id *)(*((_QWORD *)this + 1) + 56), "countDistinctLoiGroups");

  objc_msgSend(MEMORY[0x24BDBCED8], "dictionary");
  v26 = (void *)objc_claimAutoreleasedReturnValue();
  v27 = ((char *)v19 - (char *)v17) >> 6;
  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedLong:", v27);
  v28 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v26, "setObject:forKeyedSubscript:", v28, CFSTR("loiCount"));

  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedLong:", v20);
  v29 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v26, "setObject:forKeyedSubscript:", v29, CFSTR("loiHomeCount"));

  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedLong:", v21);
  v30 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v26, "setObject:forKeyedSubscript:", v30, CFSTR("loiWorkCount"));

  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedLong:", v22);
  v31 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v26, "setObject:forKeyedSubscript:", v31, CFSTR("loiAirplayCount"));

  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedLong:", v27 - v20);
  v32 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v26, "setObject:forKeyedSubscript:", v32, CFSTR("loiNotHomeCount"));

  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithBool:", v8);
  v33 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v26, "setObject:forKeyedSubscript:", v33, CFSTR("hasLegacy"));

  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedInt:", (v24 - v25));
  v34 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v26, "setObject:forKeyedSubscript:", v34, CFSTR("deduplicatedLoiCount"));

  std::__hash_table<std::__hash_value_type<std::string,AnchorValueStatistics>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AnchorValueStatistics>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AnchorValueStatistics>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,AnchorValueStatistics>>>::~__hash_table((uint64_t)buf);
  *(_QWORD *)buf = &v38;
  std::vector<CLMiLoLoiTable::Entry>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  return v26;
}

void sub_241B229A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  void *v20;

  _Unwind_Resume(a1);
}

id CLMicroLocationAnalytics::createLoiInformationEvent(CLMicroLocationAnalytics *this, const uuid *a2)
{
  NSObject *v4;
  std::bad_cast_vtbl *v5;
  std::bad_cast_vtbl *v6;
  id v7;
  void *v8;
  _QWORD *v9;
  _QWORD *v10;
  NSObject *v11;
  int v12;
  std::string::size_type v13;
  std::bad_cast_vtbl *v14;
  std::bad_cast_vtbl *v15;
  id v16;
  void *v17;
  NSObject *v18;
  std::bad_cast_vtbl *v19;
  NSObject *v20;
  std::bad_cast_vtbl *v21;
  void *v22;
  double v23;
  uint64_t *v24;
  uint64_t *v25;
  double *v26;
  double *v27;
  double v29;
  double *v30;
  double v31;
  double v32;
  double v33;
  id v34;
  void *v35;
  _BOOL8 v36;
  unint64_t v37;
  unint64_t v38;
  void *v39;
  void *v40;
  void *v41;
  void *v42;
  void *v43;
  void *v44;
  void *v45;
  void *v47;
  char *v48;
  uint64_t v49;
  std::string v50;
  _QWORD *v51;
  _QWORD *v52;
  uint64_t v53;
  std::string v54;
  uint64_t v55;
  void **v56;
  __int128 v57;
  char v58;
  std::bad_cast buf[6];
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  void *__p[2];
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  uint64_t v93;

  v93 = *MEMORY[0x24BDAC8D0];
  memset(&v54, 0, sizeof(v54));
  if ((boost::conversion::detail::try_lexical_convert<std::string,boost::uuids::uuid>((uint64_t)a2, &v54) & 1) == 0)
  {
    std::bad_cast::bad_cast(buf);
    buf[0].__vftable = (std::bad_cast_vtbl *)&unk_2511D2C18;
    boost::throw_exception<boost::bad_lexical_cast>((uint64_t)buf);
  }
  if (onceToken_MicroLocation_Default != -1)
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_96);
  v4 = (id)logObject_MicroLocation_Default;
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    v5 = (std::bad_cast_vtbl *)objc_msgSend(CFSTR("com.apple.MicroLocation.Location"), "UTF8String");
    v6 = (std::bad_cast_vtbl *)&v54;
    if ((v54.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v6 = (std::bad_cast_vtbl *)v54.__r_.__value_.__r.__words[0];
    buf[0].__vftable = (std::bad_cast_vtbl *)68289538;
    LOWORD(buf[1].__vftable) = 2082;
    *(std::bad_cast_vtbl **)((char *)&buf[1].__vftable + 2) = (std::bad_cast_vtbl *)"";
    WORD1(buf[2].__vftable) = 2082;
    *(std::bad_cast_vtbl **)((char *)&buf[2].__vftable + 4) = v5;
    WORD2(buf[3].__vftable) = 2082;
    *(std::bad_cast_vtbl **)((char *)&buf[3].__vftable + 6) = v6;
    _os_log_impl(&dword_2419D9000, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Creating analytics event.\", \"Event name\":%{public, location:escape_only}s, \"LOI Group ID\":%{public, location:escape_only}s}", (uint8_t *)buf, 0x26u);
  }

  v7 = *(id *)(*((_QWORD *)this + 1) + 56);
  v8 = v7;
  if (v7)
  {
    objc_msgSend(v7, "fetchLoiIdEntriesInLoiGroupId:", a2);
  }
  else
  {
    v51 = 0;
    v52 = 0;
    v53 = 0;
  }

  v10 = v51;
  v9 = v52;
  if (v52 == v51)
  {
    if (onceToken_MicroLocation_Default != -1)
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_96);
    v18 = (id)logObject_MicroLocation_Default;
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
    {
      memset(&v50, 0, sizeof(v50));
      if ((boost::conversion::detail::try_lexical_convert<std::string,boost::uuids::uuid>((uint64_t)a2, &v50) & 1) == 0)
      {
        std::bad_cast::bad_cast((std::bad_cast *)__p);
        __p[0] = &unk_2511D2C18;
        boost::throw_exception<boost::bad_lexical_cast>((uint64_t)__p);
      }
      v19 = (std::bad_cast_vtbl *)&v50;
      if ((v50.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v19 = (std::bad_cast_vtbl *)v50.__r_.__value_.__r.__words[0];
      buf[0].__vftable = (std::bad_cast_vtbl *)68289282;
      LOWORD(buf[1].__vftable) = 2082;
      *(std::bad_cast_vtbl **)((char *)&buf[1].__vftable + 2) = (std::bad_cast_vtbl *)"";
      WORD1(buf[2].__vftable) = 2082;
      *(std::bad_cast_vtbl **)((char *)&buf[2].__vftable + 4) = v19;
      _os_log_impl(&dword_2419D9000, v18, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"No LOI entries for specified LOI Group ID\", \"LOIGroupId\":%{public, location:escape_only}s}", (uint8_t *)buf, 0x1Cu);
      if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v50.__r_.__value_.__l.__data_);
    }

    if (onceToken_MicroLocation_Default != -1)
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_96);
    v20 = (id)logObject_MicroLocation_Default;
    if (os_signpost_enabled(v20))
    {
      memset(&v50, 0, sizeof(v50));
      if ((boost::conversion::detail::try_lexical_convert<std::string,boost::uuids::uuid>((uint64_t)a2, &v50) & 1) == 0)
      {
        std::bad_cast::bad_cast((std::bad_cast *)__p);
        __p[0] = &unk_2511D2C18;
        boost::throw_exception<boost::bad_lexical_cast>((uint64_t)__p);
      }
      v21 = (std::bad_cast_vtbl *)&v50;
      if ((v50.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v21 = (std::bad_cast_vtbl *)v50.__r_.__value_.__r.__words[0];
      buf[0].__vftable = (std::bad_cast_vtbl *)68289282;
      LOWORD(buf[1].__vftable) = 2082;
      *(std::bad_cast_vtbl **)((char *)&buf[1].__vftable + 2) = (std::bad_cast_vtbl *)"";
      WORD1(buf[2].__vftable) = 2082;
      *(std::bad_cast_vtbl **)((char *)&buf[2].__vftable + 4) = v21;
      _os_signpost_emit_with_name_impl(&dword_2419D9000, v20, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "No LOI entries for specified LOI Group ID", "{\"msg%{public}.0s\":\"No LOI entries for specified LOI Group ID\", \"LOIGroupId\":%{public, location:escape_only}s}", (uint8_t *)buf, 0x1Cu);
      if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v50.__r_.__value_.__l.__data_);
    }

    v22 = 0;
  }
  else
  {
    memset(&v50, 0, sizeof(v50));
    v47 = &v50;
    do
    {
      __p[0] = 0;
      __p[1] = 0;
      *(_QWORD *)&v78 = 0;
      if ((boost::conversion::detail::try_lexical_convert<std::string,boost::uuids::uuid>((uint64_t)(v10 + 1), (std::string *)__p) & 1) == 0)
      {
        std::bad_cast::bad_cast(buf);
        buf[0].__vftable = (std::bad_cast_vtbl *)&unk_2511D2C18;
        boost::throw_exception<boost::bad_lexical_cast>((uint64_t)buf);
      }
      std::back_insert_iterator<std::vector<std::string>>::operator=[abi:ne180100]((std::vector<std::string> **)&v47, (__int128 *)__p);
      if (SBYTE7(v78) < 0)
        operator delete(__p[0]);
      v10 += 8;
    }
    while (v10 != v9);
    if (onceToken_MicroLocation_Default != -1)
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_96);
    v11 = (id)logObject_MicroLocation_Default;
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
    {
      v12 = SHIBYTE(v54.__r_.__value_.__r.__words[2]);
      v13 = v54.__r_.__value_.__r.__words[0];
      boost::algorithm::join<std::vector<std::string>,char [2]>(",", (uint64_t *)&v50, (uint64_t)__p);
      v14 = (std::bad_cast_vtbl *)&v54;
      if (v12 < 0)
        v14 = (std::bad_cast_vtbl *)v13;
      if ((SBYTE7(v78) & 0x80u) == 0)
        v15 = (std::bad_cast_vtbl *)__p;
      else
        v15 = (std::bad_cast_vtbl *)__p[0];
      buf[0].__vftable = (std::bad_cast_vtbl *)68289538;
      LOWORD(buf[1].__vftable) = 2082;
      *(std::bad_cast_vtbl **)((char *)&buf[1].__vftable + 2) = (std::bad_cast_vtbl *)"";
      WORD1(buf[2].__vftable) = 2082;
      *(std::bad_cast_vtbl **)((char *)&buf[2].__vftable + 4) = v14;
      WORD2(buf[3].__vftable) = 2082;
      *(std::bad_cast_vtbl **)((char *)&buf[3].__vftable + 6) = v15;
      _os_log_impl(&dword_2419D9000, v11, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"LOIs for LOI Group Id\", \"LOI Group ID\":%{public, location:escape_only}s, \"LOI IDs\":%{public, location:escape_only}s}", (uint8_t *)buf, 0x26u);
      if (SBYTE7(v78) < 0)
        operator delete(__p[0]);
    }

    v16 = *(id *)(*((_QWORD *)this + 1) + 88);
    v17 = v16;
    if (v16)
    {
      objc_msgSend(v16, "fetchMostRecentRecordingForLoiGroupId:", a2, v47);
    }
    else
    {
      v91 = 0u;
      v92 = 0u;
      v89 = 0u;
      v90 = 0u;
      v87 = 0u;
      v88 = 0u;
      v85 = 0u;
      v86 = 0u;
      v83 = 0u;
      v84 = 0u;
      v81 = 0u;
      v82 = 0u;
      v79 = 0u;
      v80 = 0u;
      *(_OWORD *)__p = 0u;
      v78 = 0u;
    }

    if (BYTE8(v92))
      v23 = *(double *)&v78;
    else
      v23 = -1.79769313e308;
    v47 = 0;
    v48 = 0;
    v49 = 0;
    v24 = v51;
    v25 = v52;
    v56 = &v47;
    if (v51 == v52)
    {
      v26 = 0;
    }
    else
    {
      do
      {
        v55 = *v24;
        std::back_insert_iterator<std::vector<ULServiceQualityReasonEnum>>::operator=[abi:ne180100]((uint64_t *)&v56, &v55);
        v24 += 8;
      }
      while (v24 != v25);
      v26 = (double *)v47;
      v27 = (double *)((char *)v47 + 8);
      if (v47 != v48 && v27 != (double *)v48)
      {
        v29 = *(double *)v47;
        v30 = (double *)((char *)v47 + 8);
        do
        {
          v31 = *v30++;
          v32 = v31;
          if (v29 < v31)
          {
            v29 = v32;
            v26 = v27;
          }
          v27 = v30;
        }
        while (v30 != (double *)v48);
      }
    }
    v33 = cl::chrono::CFAbsoluteTimeClock::now();
    v34 = *(id *)(*((_QWORD *)this + 1) + 72);
    v35 = v34;
    v57 = (__int128)*a2;
    v58 = 1;
    if (v34)
    {
      objc_msgSend(v34, "fetchMostRecentModelOfModelType:atLoiGroupId:", 0, &v57);
    }
    else
    {
      v75 = 0u;
      v76 = 0u;
      v73 = 0u;
      v74 = 0u;
      v71 = 0u;
      v72 = 0u;
      v69 = 0u;
      v70 = 0u;
      v67 = 0u;
      v68 = 0u;
      v65 = 0u;
      v66 = 0u;
      v63 = 0u;
      v64 = 0u;
      v61 = 0u;
      v62 = 0u;
      v60 = 0u;
      memset(buf, 0, sizeof(buf));
    }

    objc_msgSend(MEMORY[0x24BDBCED8], "dictionary");
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    if (a2->var0[0])
    {
      v36 = 0;
    }
    else
    {
      v37 = 0;
      do
      {
        v38 = v37;
        if (v37 == 15)
          break;
        ++v37;
      }
      while (!a2->var0[v38 + 1]);
      v36 = v38 > 0xE;
    }
    objc_msgSend(MEMORY[0x24BDD16E0], "numberWithBool:", v36, v47);
    v39 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v22, "setObject:forKeyedSubscript:", v39, CFSTR("isLoiLegacy"));

    objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedLong:", (((char *)v52 - (char *)v51) >> 6) - 1);
    v40 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v22, "setObject:forKeyedSubscript:", v40, CFSTR("deduplicatedLoiCount"));

    if (v26 != (double *)v48)
    {
      objc_msgSend(MEMORY[0x24BDD16E0], "numberWithDouble:", v33 - *v26);
      v41 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v22, "setObject:forKeyedSubscript:", v41, CFSTR("lastSeenAge"));

    }
    objc_msgSend(MEMORY[0x24BDD16E0], "numberWithBool:", BYTE8(v92));
    v42 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v22, "setObject:forKeyedSubscript:", v42, CFSTR("hasRecordings"));

    if (BYTE8(v92))
    {
      objc_msgSend(MEMORY[0x24BDD16E0], "numberWithDouble:", v33 - v23);
      v43 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v22, "setObject:forKeyedSubscript:", v43, CFSTR("lastRecordingAge"));

    }
    objc_msgSend(MEMORY[0x24BDD16E0], "numberWithBool:", BYTE8(v76));
    v44 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v22, "setObject:forKeyedSubscript:", v44, CFSTR("isModelExists"));

    if (BYTE8(v76))
    {
      objc_msgSend(MEMORY[0x24BDD16E0], "numberWithBool:", BYTE8(v65));
      v45 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v22, "setObject:forKeyedSubscript:", v45, CFSTR("isModelStable"));

    }
    std::__optional_destruct_base<CLMicroLocationModelTable::Entry,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)buf);
    if (v47)
    {
      v48 = (char *)v47;
      operator delete(v47);
    }
    std::__optional_destruct_base<CLMicroLocationRecordingEventsTable::Entry,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)__p);
    buf[0].__vftable = (std::bad_cast_vtbl *)&v50;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  }
  buf[0].__vftable = (std::bad_cast_vtbl *)&v51;
  std::vector<CLMiLoLoiTable::Entry>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v54.__r_.__value_.__l.__data_);
  return v22;
}

void sub_241B23338(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,std::exception a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  std::exception a72;
  void *v72;

  std::exception::~exception(&a72);
  if (a17 < 0)
    operator delete(__p);

  a33.__vftable = (std::exception_vtbl *)&a18;
  std::vector<CLMiLoLoiTable::Entry>::__destroy_vector::operator()[abi:ne180100]((void ***)&a33);
  if (a26 < 0)
    operator delete(a21);
  _Unwind_Resume(a1);
}

void CLMicroLocationAnalytics::analyzeTriggerTypes(CLMicroLocationAnalytics *a1, uint64_t a2)
{
  NSObject *v4;
  void *v5;
  _QWORD *v6;
  uint64_t v7;
  NSObject *v8;
  uint64_t v9;
  NSObject *v10;
  const char *v11;
  NSObject *v12;
  uint64_t v13;
  int v14;
  int v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  uint64_t v19;
  __int16 v20;
  void *v21;
  _BYTE v22[24];
  _BYTE *v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  if ((ULSettings::get<ULSettings::AnalyticsSendEventEnabled>() & 1) != 0)
  {
    if (onceToken_MicroLocation_Default != -1)
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_96);
    v4 = logObject_MicroLocation_Default;
    if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
    {
      v14 = 68289026;
      v15 = 0;
      v16 = 2082;
      v17 = "";
      _os_log_impl(&dword_2419D9000, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"analyzing daily trigger usage\"}", (uint8_t *)&v14, 0x12u);
    }
    std::__function::__value_func<double ()(CLMicroLocationFingerprint const&,CLMicroLocationFingerprint const&)>::__value_func[abi:ne180100]((uint64_t)v22, a2);
    CLMicroLocationAnalytics::analyzeTriggerTypesInternal(a1, (uint64_t)v22);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = v23;
    if (v23 == v22)
    {
      v7 = 4;
      v6 = v22;
    }
    else
    {
      if (!v23)
        goto LABEL_15;
      v7 = 5;
    }
    (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_15:
    if (v5)
    {
      v9 = *(_QWORD *)(a2 + 24);
      if (!v9)
        std::__throw_bad_function_call[abi:ne180100]();
      if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v9 + 48))(v9))
      {
        if (onceToken_MicroLocation_Default != -1)
          dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_96);
        v12 = (id)logObject_MicroLocation_Default;
        if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
        {
          v13 = objc_msgSend(CFSTR("com.apple.microlocation.triggers.daily"), "UTF8String");
          v14 = 68289539;
          v15 = 0;
          v16 = 2082;
          v17 = "";
          v18 = 2082;
          v19 = v13;
          v20 = 2113;
          v21 = v5;
          _os_log_impl(&dword_2419D9000, v12, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Sending analytics event\", \"Event name\":%{public, location:escape_only}s, \"event\":%{private, location:escape_only}@}", (uint8_t *)&v14, 0x26u);
        }

        AnalyticsSendEvent();
        goto LABEL_32;
      }
      if (onceToken_MicroLocation_Default != -1)
        dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_96);
      v10 = logObject_MicroLocation_Default;
      if (!os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
      {
LABEL_32:

        return;
      }
      v14 = 68289026;
      v15 = 0;
      v16 = 2082;
      v17 = "";
      v11 = "{\"msg%{public}.0s\":\"Trigger types analytics canceled\"}";
    }
    else
    {
      if (onceToken_MicroLocation_Default != -1)
        dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_96);
      v10 = logObject_MicroLocation_Default;
      if (!os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
        goto LABEL_32;
      v14 = 68289026;
      v15 = 0;
      v16 = 2082;
      v17 = "";
      v11 = "{\"msg%{public}.0s\":\"daily trigger analytics event was not created.\"}";
    }
    _os_log_impl(&dword_2419D9000, v10, OS_LOG_TYPE_DEFAULT, v11, (uint8_t *)&v14, 0x12u);
    goto LABEL_32;
  }
  if (onceToken_MicroLocation_Default != -1)
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_96);
  v8 = logObject_MicroLocation_Default;
  if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
  {
    v14 = 68289026;
    v15 = 0;
    v16 = 2082;
    v17 = "";
    _os_log_impl(&dword_2419D9000, v8, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"not analyzing trigger types, since sending to core-analytics is disabled\"}", (uint8_t *)&v14, 0x12u);
  }
}

void sub_241B2386C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  v3 = v2;

  _Unwind_Resume(a1);
}

NSMutableDictionary *CLMicroLocationAnalytics::analyzeTriggerTypesInternal(CLMicroLocationAnalytics *a1, uint64_t a2)
{
  double v4;
  double v5;
  double v6;
  double v7;
  uint64_t v8;
  NSObject *v9;
  NSMutableDictionary *v10;
  id v11;
  _DWORD *v12;
  CLMicroLocationProto::ReceivedEvent *v13;
  uint64_t v14;
  uint64_t v15;
  CLMicroLocationProto::TriggerEvent *v16;
  const CLMicroLocationProto::TriggerEvent *v17;
  unint64_t LegacyLocalizationsCount;
  uint64_t LocalizationsCausedByWithTypeMotionState;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t RecordingsCountWithType;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  void *v42;
  void *v43;
  void *v44;
  unsigned int v45;
  unsigned int v46;
  NSObject *v47;
  double v48;
  void *v49;
  void *v50;
  void *v51;
  void *v52;
  void *v53;
  unint64_t v55;
  unint64_t NewLocalizationsCount;
  unint64_t MotionLocalizationsCount;
  unint64_t LocalizationsCausedByWithType;
  CLMicroLocationTimeUtils *v59;
  double v60;
  uint64_t v61;
  CLMicroLocationProto::TriggerEvent *v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint8_t v67[8];
  __int16 v68;
  _BYTE v69[10];
  unsigned int v70;
  __int16 v71;
  unint64_t v72;
  __int16 v73;
  unint64_t v74;
  __int16 v75;
  unint64_t v76;
  uint8_t buf[8];
  __int128 v78;
  uint64_t v79;
  _QWORD v80[4];

  v80[2] = *MEMORY[0x24BDAC8D0];
  objc_msgSend(MEMORY[0x24BDBCE60], "date");
  v59 = (CLMicroLocationTimeUtils *)objc_claimAutoreleasedReturnValue();
  CLMicroLocationTimeUtils::getTimeDeltaDaysAgo(v59, (NSDate *)0xFFFFFFFFLL);
  v5 = v4;
  CLMicroLocationTimeUtils::getTimeDeltaDaysAgo(v59, 0);
  v7 = v6;
  (*(void (**)(_QWORD))(**(_QWORD **)a1 + 16))(*(_QWORD *)a1);
  v8 = *(_QWORD *)(a2 + 24);
  if (!v8)
    std::__throw_bad_function_call[abi:ne180100]();
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v8 + 48))(v8))
  {
    if (onceToken_MicroLocation_Default != -1)
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_96);
    v9 = logObject_MicroLocation_Default;
    if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 68289026;
      *(_DWORD *)&buf[4] = 0;
      LOWORD(v78) = 2082;
      *(_QWORD *)((char *)&v78 + 2) = "";
      _os_log_impl(&dword_2419D9000, v9, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Trigger types analytics canceled\"}", buf, 0x12u);
    }
    v10 = 0;
    goto LABEL_51;
  }
  v11 = *(id *)(*((_QWORD *)a1 + 1) + 48);
  v12 = operator new(4uLL);
  *v12 = 48;
  *(_QWORD *)&v78 = v12 + 1;
  *((_QWORD *)&v78 + 1) = v12 + 1;
  *(_QWORD *)buf = v12;
  if (v11)
  {
    objc_msgSend(v11, "fetchLoggedEventsForTypes:fromTime:toTime:limit:", buf, *(_QWORD *)&v5, 1, *(_QWORD *)&v7, 1, 0);
    v12 = *(_DWORD **)buf;
    if (!*(_QWORD *)buf)
      goto LABEL_13;
  }
  else
  {
    v64 = 0;
    v65 = 0;
    v66 = 0;
  }
  *(_QWORD *)&v78 = v12;
  operator delete(v12);
LABEL_13:

  v61 = 0;
  v62 = 0;
  v63 = 0;
  v15 = v64;
  v14 = v65;
  if (v64 != v65)
  {
    v16 = 0;
    do
    {
      if (*(_DWORD *)(v15 + 24) == 48 && (*(_BYTE *)(v15 + 327) & 8) != 0)
      {
        v17 = *(const CLMicroLocationProto::TriggerEvent **)(v15 + 256);
        if (!v17)
        {
          v17 = *(const CLMicroLocationProto::TriggerEvent **)(CLMicroLocationProto::ReceivedEvent::default_instance(v13)
                                                             + 224);
          v16 = v62;
        }
        if ((unint64_t)v16 >= v63)
        {
          v13 = (CLMicroLocationProto::ReceivedEvent *)std::vector<CLMicroLocationProto::TriggerEvent>::__push_back_slow_path<CLMicroLocationProto::TriggerEvent const&>(&v61, v17);
          v16 = v13;
        }
        else
        {
          v13 = (CLMicroLocationProto::ReceivedEvent *)CLMicroLocationProto::TriggerEvent::TriggerEvent(v16, v17);
          v16 = (CLMicroLocationProto::TriggerEvent *)((char *)v16 + 88);
        }
        v62 = v16;
        v14 = v65;
      }
      v15 += 336;
    }
    while (v15 != v14);
  }
  CLMicroLocationTriggerCounters::CLMicroLocationTriggerCounters(buf, &v61);
  LegacyLocalizationsCount = CLMicroLocationTriggerCounters::getLegacyLocalizationsCount((CLMicroLocationTriggerCounters *)buf);
  MotionLocalizationsCount = CLMicroLocationTriggerCounters::getMotionLocalizationsCount((CLMicroLocationTriggerCounters *)buf);
  NewLocalizationsCount = CLMicroLocationTriggerCounters::getNewLocalizationsCount((CLMicroLocationTriggerCounters *)buf);
  LocalizationsCausedByWithType = CLMicroLocationTriggerCounters::getLocalizationsCausedByWithType((uint64_t)buf, 1u, 1);
  v55 = CLMicroLocationTriggerCounters::getLocalizationsCausedByWithType((uint64_t)buf, 0, 1);
  LocalizationsCausedByWithTypeMotionState = CLMicroLocationTriggerCounters::getLocalizationsCausedByWithTypeMotionState((uint64_t)buf, 0, 1, 0);
  v20 = CLMicroLocationTriggerCounters::getLocalizationsCausedByWithTypeMotionState((uint64_t)buf, 0, 1, 1);
  v21 = CLMicroLocationTriggerCounters::getLocalizationsCausedByWithTypeMotionState((uint64_t)buf, 0, 1, 3);
  v22 = CLMicroLocationTriggerCounters::getLocalizationsCausedByWithType((uint64_t)buf, 0, 2);
  RecordingsCountWithType = CLMicroLocationTriggerCounters::getRecordingsCountWithType((uint64_t)buf, 2u);
  v10 = (NSMutableDictionary *)objc_alloc_init(MEMORY[0x24BDBCED8]);
  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedLong:", CLMicroLocationTriggerCounters::getRecordingsCount((CLMicroLocationTriggerCounters *)buf));
  v24 = (void *)objc_claimAutoreleasedReturnValue();
  -[NSMutableDictionary setObject:forKeyedSubscript:](v10, "setObject:forKeyedSubscript:", v24, CFSTR("TotalRecordings"));

  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedLong:", CLMicroLocationTriggerCounters::getLocalizationCount((CLMicroLocationTriggerCounters *)buf));
  v25 = (void *)objc_claimAutoreleasedReturnValue();
  -[NSMutableDictionary setObject:forKeyedSubscript:](v10, "setObject:forKeyedSubscript:", v25, CFSTR("TotalLocalizations"));

  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedLong:", LegacyLocalizationsCount);
  v26 = (void *)objc_claimAutoreleasedReturnValue();
  -[NSMutableDictionary setObject:forKeyedSubscript:](v10, "setObject:forKeyedSubscript:", v26, CFSTR("TotalLegacyLocalizations"));

  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedLong:", CLMicroLocationTriggerCounters::getCachedLegacyLocalizationsCount((CLMicroLocationTriggerCounters *)buf));
  v27 = (void *)objc_claimAutoreleasedReturnValue();
  -[NSMutableDictionary setObject:forKeyedSubscript:](v10, "setObject:forKeyedSubscript:", v27, CFSTR("TotalCachedLegacyLocalizations"));

  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedLong:", CLMicroLocationTriggerCounters::getNonCachedLegacyLocalizationsCount((CLMicroLocationTriggerCounters *)buf));
  v28 = (void *)objc_claimAutoreleasedReturnValue();
  -[NSMutableDictionary setObject:forKeyedSubscript:](v10, "setObject:forKeyedSubscript:", v28, CFSTR("TotalNonCachedLegacyLocalizations"));

  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedLong:", MotionLocalizationsCount);
  v29 = (void *)objc_claimAutoreleasedReturnValue();
  -[NSMutableDictionary setObject:forKeyedSubscript:](v10, "setObject:forKeyedSubscript:", v29, CFSTR("TotalMotionLocalizations"));

  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedLong:", v55);
  v30 = (void *)objc_claimAutoreleasedReturnValue();
  -[NSMutableDictionary setObject:forKeyedSubscript:](v10, "setObject:forKeyedSubscript:", v30, CFSTR("TotalMotionLocalizationsWhileDisplayOn"));

  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedLong:", LocalizationsCausedByWithTypeMotionState);
  v31 = (void *)objc_claimAutoreleasedReturnValue();
  -[NSMutableDictionary setObject:forKeyedSubscript:](v10, "setObject:forKeyedSubscript:", v31, CFSTR("TotalStartMotionLocalizationsWhileDisplayOn"));

  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedLong:", v20);
  v32 = (void *)objc_claimAutoreleasedReturnValue();
  -[NSMutableDictionary setObject:forKeyedSubscript:](v10, "setObject:forKeyedSubscript:", v32, CFSTR("TotalInMotionLocalizationsWhileDisplayOn"));

  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedLong:", v21);
  v33 = (void *)objc_claimAutoreleasedReturnValue();
  -[NSMutableDictionary setObject:forKeyedSubscript:](v10, "setObject:forKeyedSubscript:", v33, CFSTR("TotalStopMotionLocalizationsWhileDisplayOn"));

  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedLong:", RecordingsCountWithType);
  v34 = (void *)objc_claimAutoreleasedReturnValue();
  -[NSMutableDictionary setObject:forKeyedSubscript:](v10, "setObject:forKeyedSubscript:", v34, CFSTR("TotalRecordingSystemTriggers"));

  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedLong:", v22);
  v35 = (void *)objc_claimAutoreleasedReturnValue();
  -[NSMutableDictionary setObject:forKeyedSubscript:](v10, "setObject:forKeyedSubscript:", v35, CFSTR("TotalLocalizationSystemTriggers"));

  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedLong:", LocalizationsCausedByWithType);
  v36 = (void *)objc_claimAutoreleasedReturnValue();
  -[NSMutableDictionary setObject:forKeyedSubscript:](v10, "setObject:forKeyedSubscript:", v36, CFSTR("TotalMotionLocalizationsWhenDisplayTurnedOn"));

  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedLong:", CLMicroLocationTriggerCounters::getLocalizationsCausedByWithType((uint64_t)buf, 2u, 1));
  v37 = (void *)objc_claimAutoreleasedReturnValue();
  -[NSMutableDictionary setObject:forKeyedSubscript:](v10, "setObject:forKeyedSubscript:", v37, CFSTR("TotalMotionLocalizationsWhenRescheduled"));

  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedLong:", NewLocalizationsCount);
  v38 = (void *)objc_claimAutoreleasedReturnValue();
  -[NSMutableDictionary setObject:forKeyedSubscript:](v10, "setObject:forKeyedSubscript:", v38, CFSTR("TotalNewLocalizations"));

  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedLong:", CLMicroLocationTriggerCounters::getLocalizationsCausedBy((uint64_t)buf, 1u));
  v39 = (void *)objc_claimAutoreleasedReturnValue();
  -[NSMutableDictionary setObject:forKeyedSubscript:](v10, "setObject:forKeyedSubscript:", v39, CFSTR("TotalLocalizationsWhenDisplayTurnedOn"));

  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedLong:", CLMicroLocationTriggerCounters::getLocalizationsCausedBy((uint64_t)buf, 2u));
  v40 = (void *)objc_claimAutoreleasedReturnValue();
  -[NSMutableDictionary setObject:forKeyedSubscript:](v10, "setObject:forKeyedSubscript:", v40, CFSTR("TotalLocalizationsWhenRescheduled"));

  CLMicroLocationAnalytics::addSpectatingDurationMetrics(a1, v10, v5, v7);
  CLMicroLocationAnalytics::addMotionSpectatingDurationMetrics(a1, v10, v5, v7);
  +[ULDefaultsSingleton shared](ULDefaultsSingleton, "shared");
  v41 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v41, "defaultsDictionary");
  v42 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "ULAnalyticsTriggerCountThreshold");
  v43 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v42, "objectForKey:", v43);
  v44 = (void *)objc_claimAutoreleasedReturnValue();
  if (v44 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
    v45 = objc_msgSend(v44, "unsignedIntValue");
  else
    v45 = objc_msgSend(&unk_2511EDF18, "unsignedIntValue", v55);
  v46 = v45;

  if (onceToken_MicroLocation_Default != -1)
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_96);
  v47 = logObject_MicroLocation_Default;
  if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)v67 = 68290050;
    v68 = 2082;
    *(_DWORD *)&v67[4] = 0;
    *(_QWORD *)v69 = "";
    *(_WORD *)&v69[8] = 1026;
    v70 = v46;
    v71 = 2050;
    v72 = LegacyLocalizationsCount;
    v73 = 2050;
    v74 = MotionLocalizationsCount;
    v75 = 2050;
    v76 = NewLocalizationsCount;
    _os_log_impl(&dword_2419D9000, v47, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Adding ratios to trigger analytics if appropriate\", \"TriggerThreshold\":%{public}d, \"TotalLegacyLocalizations\":%{public}lu, \"TotalMotionLocalizations\":%{public}lu, \"TotalNewLocalizations\":%{public}lu}", v67, 0x36u);
  }
  if (LegacyLocalizationsCount)
  {
    if (MotionLocalizationsCount >= v46 && LegacyLocalizationsCount >= v46)
    {
      *(float *)&v48 = (float)MotionLocalizationsCount / (float)LegacyLocalizationsCount;
      objc_msgSend(MEMORY[0x24BDD16E0], "numberWithFloat:", v48);
      v49 = (void *)objc_claimAutoreleasedReturnValue();
      -[NSMutableDictionary setObject:forKeyedSubscript:](v10, "setObject:forKeyedSubscript:", v49, CFSTR("MotionLocalizationAndLegacyLocalizationsRatio"));

    }
    if (NewLocalizationsCount >= v46 && LegacyLocalizationsCount >= v46)
    {
      *(float *)&v48 = (float)NewLocalizationsCount / (float)LegacyLocalizationsCount;
      objc_msgSend(MEMORY[0x24BDD16E0], "numberWithFloat:", v48);
      v50 = (void *)objc_claimAutoreleasedReturnValue();
      -[NSMutableDictionary setObject:forKeyedSubscript:](v10, "setObject:forKeyedSubscript:", v50, CFSTR("NewLocalizationAndLegacyLocalizationsRatio"));

    }
  }
  if (LocalizationsCausedByWithType && v55 >= v46 && LocalizationsCausedByWithType >= v46)
  {
    *(float *)&v48 = (float)v55 / (float)LocalizationsCausedByWithType;
    objc_msgSend(MEMORY[0x24BDD16E0], "numberWithFloat:", v48);
    v51 = (void *)objc_claimAutoreleasedReturnValue();
    -[NSMutableDictionary setObject:forKeyedSubscript:](v10, "setObject:forKeyedSubscript:", v51, CFSTR("MotionWhileDisplayOnAndWhenDisplayTurnedOnRatio"));

  }
  v60 = v7;
  CLMicroLocationAnalytics::getLegacyClientStatusUpdate((uint64_t)a1, &v60, (CLMicroLocationProto::LegacyClientStatusUpdate *)v67);
  if (BYTE6(v72))
  {
    objc_msgSend(MEMORY[0x24BDD16E0], "numberWithBool:", *(_DWORD *)&v69[2] == 1);
    v52 = (void *)objc_claimAutoreleasedReturnValue();
    -[NSMutableDictionary setObject:forKeyedSubscript:](v10, "setObject:forKeyedSubscript:", v52, CFSTR("isLowObservationLegacyClient"));

    if (!BYTE6(v72))
      std::__throw_bad_optional_access[abi:ne180100]();
    objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedInt:", *(unsigned int *)&v69[6]);
    v53 = (void *)objc_claimAutoreleasedReturnValue();
    -[NSMutableDictionary setObject:forKeyedSubscript:](v10, "setObject:forKeyedSubscript:", v53, CFSTR("ModelQuality"));

  }
  if (BYTE6(v72))
    CLMicroLocationProto::LegacyClientStatusUpdate::~LegacyClientStatusUpdate((CLMicroLocationProto::LegacyClientStatusUpdate *)v67);
  boost::uuids::detail::random_provider_base::destroy((boost::uuids::detail::random_provider_base *)v80);
  *(_QWORD *)v67 = &v79;
  std::vector<CLMicroLocationProto::TriggerEvent>::__destroy_vector::operator()[abi:ne180100]((void ***)v67);
  if (*(_QWORD *)buf)
  {
    *(_QWORD *)&v78 = *(_QWORD *)buf;
    operator delete(*(void **)buf);
  }
  *(_QWORD *)buf = &v61;
  std::vector<CLMicroLocationProto::TriggerEvent>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  *(_QWORD *)buf = &v64;
  std::vector<CLMicroLocationLoggedEventsTable::Entry>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
LABEL_51:

  return v10;
}

void sub_241B242C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,char *__p,uint64_t a30)
{
  void *v30;
  void *v31;

  CLMicroLocationTriggerCounters::~CLMicroLocationTriggerCounters((CLMicroLocationTriggerCounters *)&__p);
  __p = &a15;
  std::vector<CLMicroLocationProto::TriggerEvent>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  __p = &a18;
  std::vector<CLMicroLocationLoggedEventsTable::Entry>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);

  _Unwind_Resume(a1);
}

uint64_t CLMicroLocationAnalytics::getMiLoSpectatingDuration(uint64_t a1, double *a2, double *a3, uint64_t a4, uint64_t a5)
{
  double v5;
  double v6;
  NSObject *v7;
  uint64_t v8;
  id v14;
  void *v15;
  uint64_t v16;
  int v17;
  char v18;
  double v19;
  id v20;
  void *v21;
  uint64_t v22;
  double v23;
  uint64_t v24;
  BOOL v25;
  double v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void **v31;
  uint8_t buf[16];
  __int128 v33;
  _OWORD v34[19];
  uint64_t v35;
  uint64_t v36;

  v36 = *MEMORY[0x24BDAC8D0];
  v5 = *a3;
  v6 = *a2;
  if (*a3 >= *a2)
  {
    v14 = *(id *)(*(_QWORD *)(a1 + 8) + 48);
    v15 = v14;
    if (v14)
    {
      objc_msgSend(v14, "fetchMostRecentLoggedEventForTypes:BeforeTime:", a4, v6);
    }
    else
    {
      v35 = 0;
      v33 = 0u;
      memset(v34, 0, sizeof(v34));
      *(_OWORD *)buf = 0u;
    }

    if ((_BYTE)v35)
    {
      v16 = *(_QWORD *)(a5 + 24);
      if (!v16)
        std::__throw_bad_function_call[abi:ne180100]();
      v17 = (*(uint64_t (**)(uint64_t, uint8_t *))(*(_QWORD *)v16 + 48))(v16, buf);
      v18 = v17;
      if (v17)
        v19 = *a2;
      else
        v19 = 0.0;
    }
    else
    {
      v18 = 0;
      v19 = 0.0;
    }
    v20 = *(id *)(*(_QWORD *)(a1 + 8) + 48);
    v21 = v20;
    if (v20)
    {
      objc_msgSend(v20, "fetchLoggedEventsForTypes:fromTime:toTime:limit:", a4, *(_QWORD *)&v6, 1, *(_QWORD *)&v5, 1, 0);
    }
    else
    {
      v28 = 0;
      v29 = 0;
      v30 = 0;
    }

    if (v29 == v28)
    {
      v23 = 0.0;
    }
    else
    {
      v22 = v29 - 336;
      v23 = 0.0;
      do
      {
        v24 = *(_QWORD *)(a5 + 24);
        if (!v24)
          std::__throw_bad_function_call[abi:ne180100]();
        if ((*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)v24 + 48))(v24, v22))
        {
          if (!v18)
          {
            v19 = *(double *)(v22 + 16);
            v18 = 1;
          }
        }
        else if (v18)
        {
          v18 = 0;
          v23 = v23 + *(double *)(v22 + 16) - v19;
        }
        else
        {
          v18 = 0;
        }
        v25 = v22 == v28;
        v22 -= 336;
      }
      while (!v25);
    }
    v26 = *a3 - v19;
    if (!v18)
      v26 = -0.0;
    v8 = (uint64_t)(v23 + v26);
    v31 = (void **)&v28;
    std::vector<CLMicroLocationLoggedEventsTable::Entry>::__destroy_vector::operator()[abi:ne180100](&v31);
    if ((_BYTE)v35)
      CLMicroLocationProto::ReceivedEvent::~ReceivedEvent((CLMicroLocationProto::ReceivedEvent *)v34);
  }
  else
  {
    if (onceToken_MicroLocation_Default != -1)
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_96);
    v7 = logObject_MicroLocation_Default;
    if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_2419D9000, v7, OS_LOG_TYPE_ERROR, "got start time bigger than end time while calculating milo spectating duration", buf, 2u);
    }
    return 0;
  }
  return v8;
}

void sub_241B247B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,char a55)
{
  void *v55;

  if (a55)
    CLMicroLocationProto::ReceivedEvent::~ReceivedEvent((CLMicroLocationProto::ReceivedEvent *)&a17);
  _Unwind_Resume(a1);
}

void CLMicroLocationAnalytics::addPerHoursFields(uint64_t a1, void *a2, void *a3, void *a4, double *a5)
{
  id v8;
  id v9;
  id v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  void *v16;
  void *v17;
  double v18;
  double v19;
  double v20;
  NSObject *v21;
  double v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  NSObject *v26;
  void *v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  uint8_t buf[4];
  uint64_t v33;
  __int16 v34;
  uint64_t v35;
  _BYTE v36[128];
  uint64_t v37;

  v37 = *MEMORY[0x24BDAC8D0];
  v8 = a2;
  v9 = a3;
  v10 = a4;
  v27 = v9;
  if (*a5 <= 0.0)
  {
    if (onceToken_MicroLocation_Default != -1)
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_96);
    v26 = logObject_MicroLocation_Default;
    if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_2419D9000, v26, OS_LOG_TYPE_ERROR, "Tried to add count per hour fields with duration equals 0.", buf, 2u);
    }
  }
  else
  {
    v30 = 0u;
    v31 = 0u;
    v28 = 0u;
    v29 = 0u;
    v11 = v9;
    v12 = objc_msgSend(v11, "countByEnumeratingWithState:objects:count:", &v28, v36, 16);
    if (v12)
    {
      v13 = *(_QWORD *)v29;
      do
      {
        v14 = 0;
        do
        {
          if (*(_QWORD *)v29 != v13)
            objc_enumerationMutation(v11);
          v15 = *(void **)(*((_QWORD *)&v28 + 1) + 8 * v14);
          objc_msgSend(v8, "objectForKey:", v15);
          v16 = (void *)objc_claimAutoreleasedReturnValue();
          v17 = v16;
          if (v16)
          {
            objc_msgSend(v16, "doubleValue");
            v19 = v18;
            v20 = *a5;
            objc_msgSend(v15, "stringByAppendingString:", v10);
            v21 = objc_claimAutoreleasedReturnValue();
            v22 = v19 / v20;
            *(float *)&v22 = v19 / v20;
            objc_msgSend(MEMORY[0x24BDD16E0], "numberWithFloat:", v22);
            v23 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v8, "setObject:forKeyedSubscript:", v23, v21);

          }
          else
          {
            if (onceToken_MicroLocation_Default != -1)
              dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_96);
            v21 = (id)logObject_MicroLocation_Default;
            if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
            {
              v24 = objc_msgSend(objc_retainAutorelease(v15), "UTF8String");
              v25 = objc_msgSend(CFSTR("com.apple.microlocation.triggers.daily"), "UTF8String");
              *(_DWORD *)buf = 136315394;
              v33 = v24;
              v34 = 2080;
              v35 = v25;
              _os_log_impl(&dword_2419D9000, v21, OS_LOG_TYPE_ERROR, "no value found for key %s in %s CA event. Skipping it.", buf, 0x16u);
            }
          }

          ++v14;
        }
        while (v12 != v14);
        v12 = objc_msgSend(v11, "countByEnumeratingWithState:objects:count:", &v28, v36, 16);
      }
      while (v12);
    }

  }
}

void sub_241B24AD8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void CLMicroLocationAnalytics::getLegacyClientStatusUpdate(uint64_t a1@<X0>, double *a2@<X1>, CLMicroLocationProto::LegacyClientStatusUpdate *a3@<X8>)
{
  double v4;
  id v5;
  _DWORD *v6;
  NSObject *v7;
  uint64_t v8;
  uint64_t i;
  uint64_t v10;
  int v11;
  NSObject *v12;
  char v13;
  NSObject *v14;
  _BOOL8 v15;
  const CLMicroLocationProto::LegacyClientStatusUpdate *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE buf[24];
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  v4 = *a2;
  v5 = *(id *)(*(_QWORD *)(a1 + 8) + 48);
  v6 = operator new(4uLL);
  *v6 = 49;
  *(_QWORD *)&buf[8] = v6 + 1;
  *(_QWORD *)&buf[16] = v6 + 1;
  *(_QWORD *)buf = v6;
  if (v5)
  {
    objc_msgSend(v5, "fetchLoggedEventsForTypes:fromTime:toTime:limit:", buf, v4 + -172800.0, 1, *(_QWORD *)&v4, 1, 0);
    v6 = *(_DWORD **)buf;
    if (!*(_QWORD *)buf)
      goto LABEL_6;
  }
  else
  {
    v17 = 0;
    v18 = 0;
    v19 = 0;
  }
  *(_QWORD *)&buf[8] = v6;
  operator delete(v6);
LABEL_6:

  if (onceToken_MicroLocation_Default != -1)
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_96);
  v7 = logObject_MicroLocation_Default;
  v8 = os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEBUG);
  if ((_DWORD)v8)
  {
    *(_DWORD *)buf = 134217984;
    *(_QWORD *)&buf[4] = 0xCF3CF3CF3CF3CF3DLL * ((v18 - v17) >> 4);
    _os_log_impl(&dword_2419D9000, v7, OS_LOG_TYPE_DEBUG, "Selected %lu Legacy status updates", buf, 0xCu);
  }
  for (i = v17; i != v18; i += 336)
  {
    v10 = *(_QWORD *)(i + 264);
    if (!v10)
    {
      v8 = CLMicroLocationProto::ReceivedEvent::default_instance((CLMicroLocationProto::ReceivedEvent *)v8);
      v10 = *(_QWORD *)(v8 + 232);
    }
    v11 = *(_DWORD *)(v10 + 12);
    if (v11 != 255)
    {
      if (onceToken_MicroLocation_Default != -1)
        dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_96);
      v14 = logObject_MicroLocation_Default;
      v15 = os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT);
      if (v15)
      {
        *(_DWORD *)buf = 68289282;
        *(_DWORD *)&buf[4] = 0;
        *(_WORD *)&buf[8] = 2082;
        *(_QWORD *)&buf[10] = "";
        *(_WORD *)&buf[18] = 1026;
        *(_DWORD *)&buf[20] = v11 != 0;
        _os_log_impl(&dword_2419D9000, v14, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"legacy client low number of observation status found\", \"number of observation status\":%{public}hhd}", buf, 0x18u);
      }
      v16 = *(const CLMicroLocationProto::LegacyClientStatusUpdate **)(i + 264);
      if (!v16)
        v16 = *(const CLMicroLocationProto::LegacyClientStatusUpdate **)(CLMicroLocationProto::ReceivedEvent::default_instance((CLMicroLocationProto::ReceivedEvent *)v15)
                                                                       + 232);
      CLMicroLocationProto::LegacyClientStatusUpdate::LegacyClientStatusUpdate(a3, v16);
      v13 = 1;
      goto LABEL_28;
    }
  }
  if (onceToken_MicroLocation_Default != -1)
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_96);
  v12 = logObject_MicroLocation_Default;
  if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_2419D9000, v12, OS_LOG_TYPE_DEFAULT, "Could not determine legacy client low number of observation status.", buf, 2u);
  }
  v13 = 0;
  *(_BYTE *)a3 = 0;
LABEL_28:
  *((_BYTE *)a3 + 32) = v13;
  *(_QWORD *)buf = &v17;
  std::vector<CLMicroLocationLoggedEventsTable::Entry>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
}

void sub_241B24E20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *__p, uint64_t a14)
{
  __p = &a10;
  std::vector<CLMicroLocationLoggedEventsTable::Entry>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

void CLMicroLocationAnalytics::addSpectatingDurationMetrics(CLMicroLocationAnalytics *this, NSMutableDictionary *a2, double a3, double a4)
{
  NSMutableDictionary *v7;
  _DWORD *v8;
  uint64_t MiLoSpectatingDuration;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  int v14;
  int v15;
  double v16;
  void *v17;
  NSObject *v18;
  int v19;
  std::string::size_type v20;
  std::string *v21;
  std::string *v22;
  float v23;
  double v24;
  void *v25;
  uint64_t v26;
  void *v27;
  _QWORD *v28;
  uint64_t v29;
  std::string v30;
  std::string v31;
  void *__p;
  _BYTE v33[20];
  __int16 v34;
  std::string *v35;
  __int16 v36;
  double v37;
  _QWORD v38[3];
  _QWORD *v39;
  uint64_t v40;

  v40 = *MEMORY[0x24BDAC8D0];
  v7 = a2;
  v38[0] = &off_2511DA068;
  v39 = v38;
  *(double *)&v31.__r_.__value_.__l.__data_ = a3;
  *(double *)&v30.__r_.__value_.__l.__data_ = a4;
  v8 = operator new(0xCuLL);
  *(_QWORD *)v33 = v8 + 3;
  *(_QWORD *)&v33[8] = v8 + 3;
  *(_QWORD *)v8 = 0x220000002CLL;
  v8[2] = 35;
  __p = v8;
  MiLoSpectatingDuration = CLMicroLocationAnalytics::getMiLoSpectatingDuration((uint64_t)this, (double *)&v31, (double *)&v30, (uint64_t)&__p, (uint64_t)v38);
  if (*(double *)&__p != 0.0)
  {
    *(_QWORD *)v33 = __p;
    operator delete(__p);
  }
  +[ULDefaultsSingleton shared](ULDefaultsSingleton, "shared", v30.__r_.__value_.__r.__words[0]);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "defaultsDictionary");
  v11 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "ULAnalyticsTriggerMinimumSpectatingDuration");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v11, "objectForKey:", v12);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  if (v13 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
    v14 = objc_msgSend(v13, "intValue");
  else
    v14 = objc_msgSend(&unk_2511EDEE8, "intValue");
  v15 = v14;

  v16 = (double)MiLoSpectatingDuration / 3600.0;
  if (v16 >= (double)v15)
  {
    -[NSMutableDictionary allKeys](v7, "allKeys");
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    *(double *)&__p = (double)MiLoSpectatingDuration / 3600.0;
    CLMicroLocationAnalytics::addPerHoursFields((uint64_t)v17, v7, v17, CFSTR("PerHour"), (double *)&__p);

  }
  if (onceToken_MicroLocation_Default != -1)
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_96);
  v18 = (id)logObject_MicroLocation_Default;
  if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
  {
    std::to_string(&v31, a3);
    v19 = SHIBYTE(v31.__r_.__value_.__r.__words[2]);
    v20 = v31.__r_.__value_.__r.__words[0];
    std::to_string(&v30, a4);
    v21 = &v31;
    if (v19 < 0)
      v21 = (std::string *)v20;
    if ((v30.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v22 = &v30;
    else
      v22 = (std::string *)v30.__r_.__value_.__r.__words[0];
    v23 = v16;
    __p = (void *)68289795;
    *(_WORD *)v33 = 2082;
    *(_QWORD *)&v33[2] = "";
    *(_WORD *)&v33[10] = 2082;
    *(_QWORD *)&v33[12] = v21;
    v34 = 2082;
    v35 = v22;
    v36 = 2049;
    v37 = v23;
    _os_log_impl(&dword_2419D9000, v18, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Calculated microLocation spectating duration\", \"startTime\":%{public, location:escape_only}s, \"stopTime\":%{public, location:escape_only}s, \"duration (hours)\":\"%{private}5f\"}", (uint8_t *)&__p, 0x30u);
    if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v30.__r_.__value_.__l.__data_);
    if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v31.__r_.__value_.__l.__data_);
  }
  else
  {
    v23 = v16;
  }

  *(float *)&v24 = v23;
  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithFloat:", v24);
  v25 = (void *)objc_claimAutoreleasedReturnValue();
  -[NSMutableDictionary setObject:forKeyedSubscript:](v7, "setObject:forKeyedSubscript:", v25, CFSTR("Duration"));

  LODWORD(v26) = vcvtmd_s64_f64(v16);
  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithInt:", v26);
  v27 = (void *)objc_claimAutoreleasedReturnValue();
  -[NSMutableDictionary setObject:forKeyedSubscript:](v7, "setObject:forKeyedSubscript:", v27, CFSTR("DurationBounded"));

  v28 = v39;
  if (v39 == v38)
  {
    v29 = 4;
    v28 = v38;
    goto LABEL_26;
  }
  if (v39)
  {
    v29 = 5;
LABEL_26:
    (*(void (**)(void))(*v28 + 8 * v29))();
  }

}

void sub_241B251F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,char *a28)
{
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  char *v33;
  uint64_t v34;

  v33 = a28;
  if (a28 == &a25)
  {
    v34 = 4;
    v33 = &a25;
  }
  else
  {
    if (!a28)
      goto LABEL_6;
    v34 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v33 + 8 * v34))();
LABEL_6:

  _Unwind_Resume(a1);
}

void CLMicroLocationAnalytics::addMotionSpectatingDurationMetrics(CLMicroLocationAnalytics *this, NSMutableDictionary *a2, double a3, double a4)
{
  NSMutableDictionary *v7;
  _QWORD *v8;
  uint64_t MiLoSpectatingDuration;
  double v10;
  NSObject *v11;
  int v12;
  std::string::size_type v13;
  std::string *v14;
  std::string *v15;
  float v16;
  double v17;
  void *v18;
  uint64_t v19;
  void *v20;
  _QWORD *v21;
  uint64_t v22;
  std::string v23;
  std::string v24;
  void *__p;
  _BYTE v26[20];
  __int16 v27;
  std::string *v28;
  __int16 v29;
  double v30;
  _QWORD v31[3];
  _QWORD *v32;
  uint64_t v33;

  v33 = *MEMORY[0x24BDAC8D0];
  v7 = a2;
  v31[0] = &off_2511DA0F8;
  v32 = v31;
  *(double *)&v24.__r_.__value_.__l.__data_ = a3;
  *(double *)&v23.__r_.__value_.__l.__data_ = a4;
  v8 = operator new(8uLL);
  __p = v8;
  *v8 = 0x320000002CLL;
  *(_QWORD *)v26 = v8 + 1;
  *(_QWORD *)&v26[8] = v8 + 1;
  MiLoSpectatingDuration = CLMicroLocationAnalytics::getMiLoSpectatingDuration((uint64_t)this, (double *)&v24, (double *)&v23, (uint64_t)&__p, (uint64_t)v31);
  if (__p)
  {
    *(_QWORD *)v26 = __p;
    operator delete(__p);
  }
  if (onceToken_MicroLocation_Default != -1)
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_96);
  v10 = (double)MiLoSpectatingDuration / 3600.0;
  v11 = (id)logObject_MicroLocation_Default;
  if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
  {
    std::to_string(&v24, a3);
    v12 = SHIBYTE(v24.__r_.__value_.__r.__words[2]);
    v13 = v24.__r_.__value_.__r.__words[0];
    std::to_string(&v23, a4);
    v14 = &v24;
    if (v12 < 0)
      v14 = (std::string *)v13;
    if ((v23.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v15 = &v23;
    else
      v15 = (std::string *)v23.__r_.__value_.__r.__words[0];
    v16 = v10;
    __p = (void *)68289795;
    *(_WORD *)v26 = 2082;
    *(_QWORD *)&v26[2] = "";
    *(_WORD *)&v26[10] = 2082;
    *(_QWORD *)&v26[12] = v14;
    v27 = 2082;
    v28 = v15;
    v29 = 2049;
    v30 = v16;
    _os_log_impl(&dword_2419D9000, v11, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Calculated microLocation motion spectating duration\", \"startTime\":%{public, location:escape_only}s, \"stopTime\":%{public, location:escape_only}s, \"duration (hours)\":\"%{private}5f\"}", (uint8_t *)&__p, 0x30u);
    if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v23.__r_.__value_.__l.__data_);
    if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v24.__r_.__value_.__l.__data_);
  }
  else
  {
    v16 = v10;
  }

  *(float *)&v17 = v16;
  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithFloat:", v17);
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  -[NSMutableDictionary setObject:forKeyedSubscript:](v7, "setObject:forKeyedSubscript:", v18, CFSTR("MotionDuration"));

  LODWORD(v19) = vcvtmd_s64_f64(v10);
  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithInt:", v19);
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  -[NSMutableDictionary setObject:forKeyedSubscript:](v7, "setObject:forKeyedSubscript:", v20, CFSTR("MotionDurationBounded"));

  v21 = v32;
  if (v32 == v31)
  {
    v22 = 4;
    v21 = v31;
    goto LABEL_20;
  }
  if (v32)
  {
    v22 = 5;
LABEL_20:
    (*(void (**)(void))(*v21 + 8 * v22))();
  }

}

void sub_241B2557C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,char *a28)
{
  void *v28;
  void *v29;
  char *v31;
  uint64_t v32;

  if (a17 < 0)
    operator delete(__p);

  v31 = a28;
  if (a28 == &a25)
  {
    v32 = 4;
    v31 = &a25;
  }
  else
  {
    if (!a28)
      goto LABEL_8;
    v32 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v31 + 8 * v32))();
LABEL_8:

  _Unwind_Resume(a1);
}

void CLMicroLocationTriggerCounters::~CLMicroLocationTriggerCounters(CLMicroLocationTriggerCounters *this)
{
  void *v2;
  void **v3;

  boost::uuids::detail::random_provider_base::destroy((CLMicroLocationTriggerCounters *)((char *)this + 48));
  v3 = (void **)((char *)this + 24);
  std::vector<CLMicroLocationProto::TriggerEvent>::__destroy_vector::operator()[abi:ne180100](&v3);
  v2 = *(void **)this;
  if (*(_QWORD *)this)
  {
    *((_QWORD *)this + 1) = v2;
    operator delete(v2);
  }
}

uint64_t CLMicroLocationAnalytics::generateWiFiChannelHistogramForBlueAtlas@<X0>(CLMicroLocationAnalytics *this@<X0>, uuid a2@<0:X1, 8:X2>, uint64_t a3@<X8>)
{
  id *v4;
  NSObject *v6;
  _OWORD *v7;
  void **v8;
  id v9;
  void *v10;
  CLMacAddress *v11;
  CLMacAddress *v12;
  id v13;
  void *v14;
  NSObject *v15;
  char *v16;
  NSObject *v17;
  char *v18;
  _OWORD *v19;
  _OWORD *v20;
  id v21;
  _OWORD *var0;
  CLMicroLocationProto::Measurement *v23;
  uint64_t v24;
  uint64_t v25;
  const CLMicroLocationProto::WiFiRssi *v26;
  _QWORD *v27;
  _QWORD **v28;
  _QWORD *v29;
  _QWORD **v30;
  unint64_t v31;
  _QWORD *v32;
  CLMicroLocationProto::WiFiRssi *v33;
  CLMicroLocationProto::WiFiRssi *v34;
  NSObject *v35;
  char *v36;
  int *v37;
  int *v38;
  int v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  int v44;
  uint64_t v45;
  double v46;
  unint64_t v47;
  uint64_t v48;
  NSObject *v49;
  _OWORD *v50;
  void *v51;
  char v52;
  NSObject *v53;
  char *v54;
  void *v56;
  __int128 v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  void *v62;
  int *v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  _OWORD *v67;
  _OWORD *v68;
  uint64_t v69;
  void *v70[3];
  uint64_t v71;
  CLMicroLocationProto::WiFiRssi *v72;
  unint64_t v73;
  uint64_t *v74;
  _QWORD *v75[2];
  _BYTE v76[32];
  int v77;
  uint8_t v78[4];
  int v79;
  __int16 v80;
  const char *v81;
  __int16 v82;
  _BYTE v83[14];
  CLMacAddress v84[8];
  _OWORD v85[2];
  int v86;
  uint8_t buf[4];
  int v88;
  __int16 v89;
  const char *v90;
  __int16 v91;
  void **v92;
  uint64_t v93;
  _QWORD v94[11];
  char v95;
  uint64_t v96;
  uint64_t v97;
  void *v98;
  void *v99;
  void *v100;
  char v101;
  __int128 v102;
  char v103;
  void *__p[4];
  const CLMicroLocationProto::Fingerprint **v105[34];
  __int128 v106;
  __int128 v107;
  uint64_t v108;

  v4 = *(id **)&a2.var0[8];
  v108 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)&v107 = this;
  *((_QWORD *)&v107 + 1) = *(_QWORD *)a2.var0;
  if (onceToken_MicroLocation_Default != -1)
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_96);
  v6 = (id)logObject_MicroLocation_Default;
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
  {
    v7 = operator new(0x28uLL);
    __p[0] = v7;
    *(_OWORD *)&__p[1] = xmmword_241BB2320;
    *v7 = 0u;
    v7[1] = 0u;
    *(_QWORD *)((char *)v7 + 29) = 0;
    boost::uuids::to_chars<char *>((uint64_t)&v107, v7);
    v8 = __p;
    if (SHIBYTE(__p[2]) < 0)
      v8 = (void **)__p[0];
    *(_DWORD *)buf = 68289282;
    v88 = 0;
    v89 = 2082;
    v90 = "";
    v91 = 2082;
    v92 = v8;
    _os_log_impl(&dword_2419D9000, v6, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"analyzing WiFi channels for custom LOI\", \"LoiGroupId\":%{public, location:escape_only}s}", buf, 0x1Cu);
    if (SHIBYTE(__p[2]) < 0)
      operator delete(__p[0]);
  }

  memset(v76, 0, sizeof(v76));
  v77 = 1065353216;
  v9 = v4[9];
  v10 = v9;
  v102 = v107;
  v103 = 1;
  if (v9)
  {
    objc_msgSend(v9, "fetchMostRecentModelOfModelType:atLoiGroupId:", 3, &v102);
  }
  else
  {
    v106 = 0u;
    memset(v105, 0, sizeof(v105));
    memset(__p, 0, sizeof(__p));
  }

  if (BYTE8(v106))
  {
    CLMicroLocationModel::fromProtobuf(v105, (const CLMicroLocationProto::Model *)v76, (uint64_t)buf);
    if (v95)
    {
      v75[0] = 0;
      v75[1] = 0;
      v74 = (uint64_t *)v75;
      v11 = (CLMacAddress *)v94[3];
      v12 = (CLMacAddress *)v94[4];
      while (v11 != v12)
      {
        v84[0] = (CLMacAddress)v11->var0;
        v58 = CLMacAddress::toUint64(v84);
        std::__tree<unsigned long long>::__emplace_unique_key_args<unsigned long long,unsigned long long>(&v74, &v58, (uint64_t *)&v58);
        ++v11;
      }
      v71 = 0;
      v72 = 0;
      v73 = 0;
      ULSettings::getRecordingEventsForModelType((char **)v70);
      v13 = v4[11];
      v14 = v13;
      *(_OWORD *)&v84[0].var0 = v107;
      LOBYTE(v84[2].var0) = 1;
      if (v13)
      {
        objc_msgSend(v13, "fetchRecordingEventTriggersForLearningMeasurements:atLoiGroupId:", v70, v84);
      }
      else
      {
        v67 = 0;
        v68 = 0;
        v69 = 0;
      }

      v19 = v67;
      v20 = v68;
      if (v67 != v68)
      {
        while (1)
        {
          v21 = v4[8];
          v85[0] = *v19;
          var0 = operator new(0x10uLL);
          v84[1].var0 = (unint64_t)(var0 + 1);
          v84[2].var0 = (unint64_t)(var0 + 1);
          *var0 = v85[0];
          v84[0].var0 = (unint64_t)var0;
          if (!v21)
            break;
          objc_msgSend(v21, "fetchMeasurementsForRecordingUUIDs:", v84);
          var0 = (_OWORD *)v84[0].var0;
          if (v84[0].var0)
            goto LABEL_34;
LABEL_35:

          v24 = v58;
          v25 = v59;
          while (v24 != v25)
          {
            if (*(_DWORD *)(v24 + 96) == 1)
            {
              v26 = *(const CLMicroLocationProto::WiFiRssi **)(v24 + 48);
              if (!v26)
                v26 = *(const CLMicroLocationProto::WiFiRssi **)(CLMicroLocationProto::Measurement::default_instance(v23)
                                                               + 16);
              CLMicroLocationProto::WiFiRssi::WiFiRssi((CLMicroLocationProto::WiFiRssi *)v84, v26);
              v27 = v75[0];
              if (v75[0])
              {
                v28 = v75;
                do
                {
                  v29 = v27;
                  v30 = v28;
                  v31 = v27[4];
                  v32 = v27 + 1;
                  if (v31 >= v84[3].var0)
                  {
                    v32 = v29;
                    v28 = (_QWORD **)v29;
                  }
                  v27 = (_QWORD *)*v32;
                }
                while (v27);
                if (v28 != v75)
                {
                  if (v31 < v84[3].var0)
                    v29 = v30;
                  if (v84[3].var0 >= v29[4])
                  {
                    v33 = v72;
                    if ((unint64_t)v72 >= v73)
                    {
                      v34 = (CLMicroLocationProto::WiFiRssi *)std::vector<CLMicroLocationProto::WiFiRssi>::__push_back_slow_path<CLMicroLocationProto::WiFiRssi const&>(&v71, (const CLMicroLocationProto::WiFiRssi *)v84);
                    }
                    else
                    {
                      CLMicroLocationProto::WiFiRssi::WiFiRssi(v72, (const CLMicroLocationProto::WiFiRssi *)v84);
                      v34 = (CLMicroLocationProto::WiFiRssi *)((char *)v33 + 48);
                    }
                    v72 = v34;
                  }
                }
              }
              CLMicroLocationProto::WiFiRssi::~WiFiRssi((CLMicroLocationProto::WiFiRssi *)v84);
            }
            v24 += 120;
          }
          v84[0].var0 = (unint64_t)&v58;
          std::vector<CLMicroLocationMeasurementTable::Entry>::__destroy_vector::operator()[abi:ne180100]((void ***)v84);
          v19 = (_OWORD *)((char *)v19 + 248);
          if (v19 == v20)
            goto LABEL_56;
        }
        v58 = 0;
        v59 = 0;
        v60 = 0;
LABEL_34:
        v84[1].var0 = (unint64_t)var0;
        operator delete(var0);
        goto LABEL_35;
      }
LABEL_56:
      memset(v85, 0, sizeof(v85));
      v86 = 1065353216;
      CLMicroLocationWiFiChannelHistogramAnalyzer::update(v85, &v71);
      v64 = 0;
      v65 = 0;
      v66 = 0;
      if (CLMicroLocationWiFiChannelHistogramAnalyzer::isEmpty((CLMicroLocationWiFiChannelHistogramAnalyzer *)v85))
      {
        if (onceToken_MicroLocation_Default != -1)
          dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_96);
        v35 = (id)logObject_MicroLocation_Default;
        if (os_log_type_enabled(v35, OS_LOG_TYPE_DEFAULT))
        {
          v36 = (char *)operator new(0x28uLL);
          *(_QWORD *)(v36 + 29) = 0;
          *(_OWORD *)v36 = 0u;
          *((_OWORD *)v36 + 1) = 0u;
          boost::uuids::to_chars<char *>((uint64_t)&v107, v36);
          v84[0].var0 = 68289282;
          LOWORD(v84[1].var0) = 2082;
          *(unint64_t *)((char *)&v84[1].var0 + 2) = (unint64_t)"";
          WORD1(v84[2].var0) = 2082;
          *(unint64_t *)((char *)&v84[2].var0 + 4) = (unint64_t)v36;
          _os_log_impl(&dword_2419D9000, v35, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Wifi Channel Histogram was not generated for custom LOI, no measurements to analyze\", \"LoiGroupId\":%{public, location:escape_only}s}", (uint8_t *)v84, 0x1Cu);
          operator delete(v36);
        }

        *(_BYTE *)a3 = 0;
        *(_BYTE *)(a3 + 24) = 0;
      }
      else
      {
        std::string::basic_string[abi:ne180100]<0>(v84, "custom");
        CLMicroLocationWiFiChannelHistogramAnalyzer::getHistogram((uint64_t)v85, (unsigned __int8 *)v84, (uint64_t *)&v62);
        if (SHIBYTE(v84[2].var0) < 0)
          operator delete((void *)v84[0].var0);
        CLMicroLocationProto::WifiHistogram::WifiHistogram((uint64_t)&v58);
        v37 = (int *)v62;
        v38 = v63;
        if (v62 != v63)
        {
          v39 = v60;
          do
          {
            v40 = HIDWORD(v60);
            if (v39 >= SHIDWORD(v60))
            {
              if (HIDWORD(v60) == v61)
              {
                wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)&v59);
                v40 = HIDWORD(v60);
              }
              HIDWORD(v60) = v40 + 1;
              v41 = wireless_diagnostics::google::protobuf::internal::GenericTypeHandler<CLMicroLocationProto::ChannelAndCount>::New();
              v42 = (int)v60;
              v39 = v60 + 1;
              LODWORD(v60) = v60 + 1;
              *(_QWORD *)(v59 + 8 * v42) = v41;
            }
            else
            {
              LODWORD(v60) = v39 + 1;
              v41 = *(_QWORD *)(v59 + 8 * v39++);
            }
            v43 = *v37;
            v44 = *(_DWORD *)(v41 + 24);
            *(_DWORD *)(v41 + 24) = v44 | 1;
            *(_DWORD *)(v41 + 16) = v43;
            v45 = v37[1];
            *(_DWORD *)(v41 + 24) = v44 | 3;
            *(_QWORD *)(v41 + 8) = v45;
            v37 += 2;
          }
          while (v37 != v38);
        }
        v46 = cl::chrono::CFAbsoluteTimeClock::now();
        CLMicroLocationProtobufHelper::createConfiguration<CLMicroLocationProto::WifiHistogram>((CLMicroLocationProto::Configuration *)&v58, (uint64_t)v84, v46);
        v47 = v65;
        if (v65 >= v66)
        {
          v48 = std::vector<CLMicroLocationConfigurationTable::Entry>::__emplace_back_slow_path<char const* const&,CLMicroLocationProto::Configuration &,boost::uuids::uuid const&>(&v64, CLMicroLocationLOITypeCustom, (uint64_t)v84, &v107);
        }
        else
        {
          std::allocator<CLMicroLocationConfigurationTable::Entry>::construct[abi:ne180100]<CLMicroLocationConfigurationTable::Entry,char const* const&,CLMicroLocationProto::Configuration &,boost::uuids::uuid const&>((uint64_t)&v66, v65, CLMicroLocationLOITypeCustom, (uint64_t)v84, &v107);
          v48 = v47 + 112;
        }
        v65 = v48;
        if (objc_msgSend(v4[4], "insertEntries:", &v64))
        {
          if (onceToken_MicroLocation_Default != -1)
            dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_96);
          v49 = (id)logObject_MicroLocation_Default;
          if (os_log_type_enabled(v49, OS_LOG_TYPE_INFO))
          {
            v50 = operator new(0x28uLL);
            v56 = v50;
            v57 = xmmword_241BB2320;
            *v50 = 0u;
            v50[1] = 0u;
            *(_QWORD *)((char *)v50 + 29) = 0;
            boost::uuids::to_chars<char *>((uint64_t)&v107, v50);
            v51 = &v56;
            if (v57 < 0)
              v51 = v56;
            *(_DWORD *)v78 = 68289282;
            v79 = 0;
            v80 = 2082;
            v81 = "";
            v82 = 2082;
            *(_QWORD *)v83 = v51;
            _os_log_impl(&dword_2419D9000, v49, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Wifi Channel Histogram generated successfully for custom LOI\", \"LoiGroupId\":%{public, location:escape_only}s}", v78, 0x1Cu);
            if (SHIBYTE(v57) < 0)
              operator delete(v56);
          }

          *(_QWORD *)a3 = 0;
          *(_QWORD *)(a3 + 8) = 0;
          *(_QWORD *)(a3 + 16) = 0;
          std::vector<CLMicroLocationWiFiChannelHistogram>::__init_with_size[abi:ne180100]<CLMicroLocationWiFiChannelHistogram*,CLMicroLocationWiFiChannelHistogram*>((_QWORD *)a3, v62, (uint64_t)v63, ((char *)v63 - (_BYTE *)v62) >> 3);
          v52 = 1;
        }
        else
        {
          if (onceToken_MicroLocation_Default != -1)
            dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_96);
          v53 = (id)logObject_MicroLocation_Default;
          if (os_log_type_enabled(v53, OS_LOG_TYPE_DEFAULT))
          {
            v54 = (char *)operator new(0x28uLL);
            *(_QWORD *)(v54 + 29) = 0;
            *(_OWORD *)v54 = 0u;
            *((_OWORD *)v54 + 1) = 0u;
            boost::uuids::to_chars<char *>((uint64_t)&v107, v54);
            *(_DWORD *)v78 = 68289538;
            v79 = 0;
            v80 = 2082;
            v81 = "";
            v82 = 1026;
            *(_DWORD *)v83 = 0;
            *(_WORD *)&v83[4] = 2082;
            *(_QWORD *)&v83[6] = v54;
            _os_log_impl(&dword_2419D9000, v53, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#Warning Wifi Channel Histogram was not generated properly for custom LOI, failed to insert to DB\", \"Inserted\":%{public}hhd, \"LoiGroupId\":%{public, location:escape_only}s}", v78, 0x22u);
            operator delete(v54);
          }

          v52 = 0;
          *(_BYTE *)a3 = 0;
        }
        *(_BYTE *)(a3 + 24) = v52;
        CLMicroLocationProto::Configuration::~Configuration((CLMicroLocationProto::Configuration *)v84);
        CLMicroLocationProto::WifiHistogram::~WifiHistogram((CLMicroLocationProto::WifiHistogram *)&v58);
        if (v62)
        {
          v63 = (int *)v62;
          operator delete(v62);
        }
      }
      v84[0].var0 = (unint64_t)&v64;
      std::vector<CLMicroLocationConfigurationTable::Entry>::__destroy_vector::operator()[abi:ne180100]((void ***)v84);
      std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>>>::~__hash_table((uint64_t)v85);
      v84[0].var0 = (unint64_t)&v67;
      std::vector<CLMicroLocationRecordingEventsTable::Entry>::__destroy_vector::operator()[abi:ne180100]((void ***)v84);
      if (v70[0])
      {
        v70[1] = v70[0];
        operator delete(v70[0]);
      }
      v84[0].var0 = (unint64_t)&v71;
      std::vector<CLMicroLocationProto::WiFiRssi>::__destroy_vector::operator()[abi:ne180100]((void ***)v84);
      std::__tree<std::__value_type<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,double>,std::__map_value_compare<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,std::__value_type<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,double>,std::less<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes>,true>,std::allocator<std::__value_type<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,double>>>::destroy((uint64_t)&v74, v75[0]);
    }
    else
    {
      if (onceToken_MicroLocation_Default != -1)
        dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_96);
      v17 = (id)logObject_MicroLocation_Default;
      if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
      {
        v18 = (char *)operator new(0x28uLL);
        *(_QWORD *)(v18 + 29) = 0;
        *(_OWORD *)v18 = 0u;
        *((_OWORD *)v18 + 1) = 0u;
        boost::uuids::to_chars<char *>((uint64_t)&v107, v18);
        v84[0].var0 = 68289282;
        LOWORD(v84[1].var0) = 2082;
        *(unint64_t *)((char *)&v84[1].var0 + 2) = (unint64_t)"";
        WORD1(v84[2].var0) = 2082;
        *(unint64_t *)((char *)&v84[2].var0 + 4) = (unint64_t)v18;
        _os_log_impl(&dword_2419D9000, v17, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#Warning Wifi Channel Histogram was not generated properly for custom LOI, model doesn't contain BlueAtlas data\", \"LoiGroupId\":%{public, location:escape_only}s}", (uint8_t *)v84, 0x1Cu);
        operator delete(v18);
      }

      *(_BYTE *)a3 = 0;
      *(_BYTE *)(a3 + 24) = 0;
    }
    if (v101 < 0)
      operator delete(v100);
    if (v98)
    {
      v99 = v98;
      operator delete(v98);
    }
    std::__hash_table<std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>>>::~__hash_table((uint64_t)&v97);
    v84[0].var0 = (unint64_t)&v96;
    std::vector<std::pair<std::shared_ptr<CLMicroLocationFingerprint>,boost::uuids::uuid>>::__destroy_vector::operator()[abi:ne180100]((void ***)v84);
    std::__optional_destruct_base<CLMicroLocationModel::BlueAtlasData,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)v94);
    std::__optional_destruct_base<CLMicroLocationModel::SimilarityListData,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v93);
    std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>>>::~__hash_table((uint64_t)&v90 + 6);
  }
  else
  {
    if (onceToken_MicroLocation_Default != -1)
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_96);
    v15 = (id)logObject_MicroLocation_Default;
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
      v16 = (char *)operator new(0x28uLL);
      *(_QWORD *)(v16 + 29) = 0;
      *(_OWORD *)v16 = 0u;
      *((_OWORD *)v16 + 1) = 0u;
      boost::uuids::to_chars<char *>((uint64_t)&v107, v16);
      *(_DWORD *)buf = 68289282;
      v88 = 0;
      v89 = 2082;
      v90 = "";
      v91 = 2082;
      v92 = (void **)v16;
      _os_log_impl(&dword_2419D9000, v15, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#Warning Wifi Channel Histogram was not generated properly for custom LOI, no Blue Atlas model found for LOI\", \"LoiGroupId\":%{public, location:escape_only}s}", buf, 0x1Cu);
      operator delete(v16);
    }

    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 24) = 0;
  }
  std::__optional_destruct_base<CLMicroLocationModelTable::Entry,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)__p);
  return std::__hash_table<std::__hash_value_type<boost::uuids::uuid,std::weak_ptr<CLMicroLocationFingerprint>>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::weak_ptr<CLMicroLocationFingerprint>>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::weak_ptr<CLMicroLocationFingerprint>>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,std::weak_ptr<CLMicroLocationFingerprint>>>>::~__hash_table((uint64_t)v76);
}

void sub_241B2611C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void *a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,char a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,void *a63)
{
  void *v63;
  void *v64;

  operator delete(v64);

  CLMicroLocationProto::Configuration::~Configuration((CLMicroLocationProto::Configuration *)&a49);
  CLMicroLocationProto::WifiHistogram::~WifiHistogram((CLMicroLocationProto::WifiHistogram *)&a13);
  if (__p)
  {
    a20 = (uint64_t)__p;
    operator delete(__p);
  }
  a49 = &a22;
  std::vector<CLMicroLocationConfigurationTable::Entry>::__destroy_vector::operator()[abi:ne180100]((void ***)&a49);
  std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>>>::~__hash_table((uint64_t)&a57);
  a49 = &a25;
  std::vector<CLMicroLocationRecordingEventsTable::Entry>::__destroy_vector::operator()[abi:ne180100]((void ***)&a49);
  if (a28)
  {
    a29 = (uint64_t)a28;
    operator delete(a28);
  }
  a49 = &a31;
  std::vector<CLMicroLocationProto::WiFiRssi>::__destroy_vector::operator()[abi:ne180100]((void ***)&a49);
  std::__tree<std::__value_type<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,double>,std::__map_value_compare<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,std::__value_type<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,double>,std::less<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes>,true>,std::allocator<std::__value_type<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,double>>>::destroy((uint64_t)&a34, (_QWORD *)a35);
  CLMicroLocationModel::~CLMicroLocationModel(&a63);
  std::__optional_destruct_base<CLMicroLocationModelTable::Entry,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&STACK[0x390]);
  std::__hash_table<std::__hash_value_type<boost::uuids::uuid,std::weak_ptr<CLMicroLocationFingerprint>>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::weak_ptr<CLMicroLocationFingerprint>>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::weak_ptr<CLMicroLocationFingerprint>>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,std::weak_ptr<CLMicroLocationFingerprint>>>>::~__hash_table((uint64_t)&a37);
  _Unwind_Resume(a1);
}

void CLMicroLocationProtobufHelper::createConfiguration<CLMicroLocationProto::WifiHistogram>(CLMicroLocationProto::Configuration *a1@<X0>, uint64_t a2@<X8>, double a3@<D0>)
{
  unsigned int v6;
  const CLMicroLocationProto::WifiHistogram *v7;
  int v8;

  CLMicroLocationProto::Configuration::Configuration((CLMicroLocationProto::Configuration *)a2);
  v6 = *((_DWORD *)a1 + 8);
  if (!CLMicroLocationProto::ConfigurationType_IsValid((CLMicroLocationProto *)v6))
    __assert_rtn("set_type", "microlocation.pb.h", 22117, "::CLMicroLocationProto::ConfigurationType_IsValid(value)");
  v8 = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a2 + 40) = v6;
  *(_DWORD *)(a2 + 48) = v8 | 3;
  *(double *)(a2 + 8) = a3;
  CLMicroLocationProtobufHelper::setSpecificConfiguration((CLMicroLocationProtobufHelper *)a2, a1, v7);
}

void sub_241B263CC(_Unwind_Exception *a1)
{
  CLMicroLocationProto::Configuration *v1;

  CLMicroLocationProto::Configuration::~Configuration(v1);
  _Unwind_Resume(a1);
}

void CLMicroLocationAnalytics::analyzeModelLoiTypes(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  NSObject *v4;
  CLMicroLocationTimeUtils *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  int v10;
  int v11;
  double v12;
  double v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  unsigned int v18;
  unsigned int v19;
  id v20;
  void *v21;
  unsigned __int8 *v22;
  unsigned __int8 *v23;
  unsigned __int8 *v24;
  NSObject *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  unsigned __int8 *v30;
  unsigned __int8 *v31;
  uint64_t v32;
  _QWORD v33[3];
  _QWORD v34[3];
  uint8_t buf[8];
  __int16 v36;
  const char *v37;
  __int16 v38;
  _BYTE v39[10];
  __int16 v40;
  _BOOL4 v41;
  uint64_t v42;

  v42 = *MEMORY[0x24BDAC8D0];
  v3 = *(_QWORD *)(a2 + 24);
  if (!v3)
    std::__throw_bad_function_call[abi:ne180100]();
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v3 + 48))(v3))
  {
    if (onceToken_MicroLocation_Default != -1)
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_96);
    v4 = logObject_MicroLocation_Default;
    if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 68289282;
      *(_DWORD *)&buf[4] = 0;
      v36 = 2082;
      v37 = "";
      v38 = 2082;
      *(_QWORD *)v39 = "MicroLocationAnalytics";
      _os_log_impl(&dword_2419D9000, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"analyzeModelLoiTypes cancelled\", \"Activity\":%{public, location:escape_only}s}", buf, 0x1Cu);
    }
  }
  else
  {
    objc_msgSend(MEMORY[0x24BDBCE60], "date");
    v5 = (CLMicroLocationTimeUtils *)objc_claimAutoreleasedReturnValue();
    +[ULDefaultsSingleton shared](ULDefaultsSingleton, "shared");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "defaultsDictionary");
    v7 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "ULNumberDaysToAnalyzeWiFiChannels");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "objectForKey:", v8);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    if (v9 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
      v10 = objc_msgSend(v9, "intValue");
    else
      v10 = objc_msgSend(&unk_2511EDF00, "intValue");
    v11 = v10;

    CLMicroLocationTimeUtils::getTimeDeltaDaysAgo(v5, (NSDate *)-v11);
    v13 = v12;
    +[ULDefaultsSingleton shared](ULDefaultsSingleton, "shared");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v14, "defaultsDictionary");
    v15 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "ULDatabaseSelectionLimit");
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v15, "objectForKey:", v16);
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    if (v17 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
      v18 = objc_msgSend(v17, "unsignedIntValue");
    else
      v18 = objc_msgSend(&unk_2511EDF30, "unsignedIntValue");
    v19 = v18;

    v20 = *(id *)(*(_QWORD *)(a1 + 8) + 88);
    v21 = v20;
    if (v20)
    {
      objc_msgSend(v20, "selectAllRecordingLOITypesFromTime:andLimit:", v19, v13);
    }
    else
    {
      v30 = 0;
      v31 = 0;
      v32 = 0;
    }

    v22 = std::__find_impl[abi:ne180100]<std::string *,std::string *,char const*,std::__identity>(v30, v31, (const char **)CLMicroLocationLOITypeHome);
    v23 = std::__find_impl[abi:ne180100]<std::string *,std::string *,char const*,std::__identity>(v30, v31, (const char **)CLMicroLocationLOITypeWork);
    v24 = std::__find_impl[abi:ne180100]<std::string *,std::string *,char const*,std::__identity>(v30, v31, (const char **)&CLMicroLocationLOITypeAirPlay);
    if (onceToken_MicroLocation_Default != -1)
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_96);
    v25 = logObject_MicroLocation_Default;
    if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 68289795;
      *(_DWORD *)&buf[4] = 0;
      v36 = 2082;
      v37 = "";
      v38 = 1025;
      *(_DWORD *)v39 = v22 != v31;
      *(_WORD *)&v39[4] = 1025;
      *(_DWORD *)&v39[6] = v23 != v31;
      v40 = 1025;
      v41 = v24 != v31;
      _os_log_impl(&dword_2419D9000, v25, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Sending Model LOI Types event\", \"foundHome\":%{private}hhd, \"foundWork\":%{private}hhd, \"foundAirPlay\":%{private}hhd}", buf, 0x24u);
    }
    if (ULSettings::get<ULSettings::AnalyticsSendEventEnabled>())
    {
      v33[0] = CFSTR("foundHome");
      objc_msgSend(MEMORY[0x24BDD16E0], "numberWithBool:", v22 != v31);
      v26 = (void *)objc_claimAutoreleasedReturnValue();
      v34[0] = v26;
      v33[1] = CFSTR("foundWork");
      objc_msgSend(MEMORY[0x24BDD16E0], "numberWithBool:", v23 != v31);
      v27 = (void *)objc_claimAutoreleasedReturnValue();
      v34[1] = v27;
      v33[2] = CFSTR("foundAirPlay");
      objc_msgSend(MEMORY[0x24BDD16E0], "numberWithBool:", v24 != v31);
      v28 = (void *)objc_claimAutoreleasedReturnValue();
      v34[2] = v28;
      objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", v34, v33, 3);
      v29 = (void *)objc_claimAutoreleasedReturnValue();
      AnalyticsSendEvent();

    }
    *(_QWORD *)buf = &v30;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);

  }
}

void sub_241B2687C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void ___ZL45_CLLogObjectForCategory_MicroLocation_Defaultv_block_invoke_75()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.MicroLocation", "MicroLocation");
  v1 = (void *)logObject_MicroLocation_Default;
  logObject_MicroLocation_Default = (uint64_t)v0;

}

uint64_t boost::algorithm::join<std::unordered_set<std::string>,char [2]>@<X0>(uint64_t result@<X0>, char *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t **v3;
  int v6;
  char *v7;
  std::string::size_type v8;
  uint64_t *i;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  char *v17;
  std::string::size_type v18;

  v3 = *(uint64_t ***)(result + 16);
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)a3 = 0;
  if (v3)
  {
    v6 = *((char *)v3 + 39);
    v7 = v6 >= 0 ? (char *)(v3 + 2) : (char *)v3[2];
    v8 = v6 >= 0 ? *((unsigned __int8 *)v3 + 39) : (std::string::size_type)v3[3];
    result = std::string::__insert_with_size<std::__wrap_iter<char const*>,std::__wrap_iter<char const*>>((std::string *)a3, a3, v7, &v7[v8], v8);
    for (i = *v3; i; i = (uint64_t *)*i)
    {
      v10 = *(unsigned __int8 *)(a3 + 23);
      if ((v10 & 0x80u) == 0)
        v11 = a3;
      else
        v11 = *(_QWORD *)a3;
      if ((v10 & 0x80u) != 0)
        v10 = *(_QWORD *)(a3 + 8);
      v12 = v11 + v10;
      v13 = strlen(a2);
      std::string::__insert_with_size<char const*,char const*>((std::string *)a3, v12, a2, &a2[v13], v13);
      v14 = *(unsigned __int8 *)(a3 + 23);
      if ((v14 & 0x80u) == 0)
        v15 = a3;
      else
        v15 = *(_QWORD *)a3;
      if ((v14 & 0x80u) != 0)
        v14 = *(_QWORD *)(a3 + 8);
      v16 = *((char *)i + 39);
      if (v16 >= 0)
        v17 = (char *)(i + 2);
      else
        v17 = (char *)i[2];
      if (v16 >= 0)
        v18 = *((unsigned __int8 *)i + 39);
      else
        v18 = i[3];
      result = std::string::__insert_with_size<std::__wrap_iter<char const*>,std::__wrap_iter<char const*>>((std::string *)a3, v15 + v14, v17, &v17[v18], v18);
    }
  }
  return result;
}

void sub_241B26A6C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

unsigned __int8 *std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  unint64_t v3;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  unint64_t v12;
  unsigned __int8 **v13;
  unsigned __int8 *i;
  unint64_t v15;
  float v16;
  float v17;
  _BOOL8 v18;
  unint64_t v19;
  unint64_t v20;
  size_t v21;
  _QWORD *v22;
  unint64_t v23;
  _QWORD v25[3];

  v7 = (_QWORD *)(a1 + 24);
  v8 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  v9 = v8;
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      v3 = v8;
      if (v8 >= v10)
        v3 = v8 % v10;
    }
    else
    {
      v3 = (v10 - 1) & v8;
    }
    v13 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v3);
    if (v13)
    {
      for (i = *v13; i; i = *(unsigned __int8 **)i)
      {
        v15 = *((_QWORD *)i + 1);
        if (v15 == v9)
        {
          if ((std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2) & 1) != 0)
            return i;
        }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10)
              v15 %= v10;
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v3)
            break;
        }
      }
    }
  }
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__construct_node_hash<std::string const&>(a1, v9, a3, (uint64_t)v25);
  v16 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v17 = *(float *)(a1 + 32);
  if (!v10 || (float)(v17 * (float)v10) < v16)
  {
    v18 = 1;
    if (v10 >= 3)
      v18 = (v10 & (v10 - 1)) != 0;
    v19 = v18 | (2 * v10);
    v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20)
      v21 = v20;
    else
      v21 = v19;
    std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>>>::__rehash<true>(a1, v21);
    v10 = *(_QWORD *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
        v3 = v9 % v10;
      else
        v3 = v9;
    }
    else
    {
      v3 = (v10 - 1) & v9;
    }
  }
  v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v22)
  {
    *(_QWORD *)v25[0] = *v22;
    *v22 = v25[0];
  }
  else
  {
    *(_QWORD *)v25[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v25[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = a1 + 16;
    if (*(_QWORD *)v25[0])
    {
      v23 = *(_QWORD *)(*(_QWORD *)v25[0] + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v23 >= v10)
          v23 %= v10;
      }
      else
      {
        v23 &= v10 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v23) = v25[0];
    }
  }
  i = (unsigned __int8 *)v25[0];
  ++*v7;
  return i;
}

void sub_241B26CE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **__p, uint64_t a11)
{
  if (__p)
    std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,AnchorValueStatistics>,void *>>>::operator()[abi:ne180100]((uint64_t)&a11, __p);
  _Unwind_Resume(exception_object);
}

void std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__construct_node_hash<std::string const&>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  _QWORD *v8;
  std::string *v9;

  v7 = a1 + 16;
  v8 = operator new(0x28uLL);
  *(_QWORD *)(a4 + 8) = v7;
  *(_QWORD *)a4 = v8;
  *(_BYTE *)(a4 + 16) = 0;
  *v8 = 0;
  v8[1] = a2;
  v9 = (std::string *)(v8 + 2);
  if (*(char *)(a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
    v9->__r_.__value_.__r.__words[2] = *(_QWORD *)(a3 + 16);
  }
  *(_BYTE *)(a4 + 16) = 1;
}

void sub_241B26D90(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;
  uint64_t v3;

  *v1 = 0;
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,AnchorValueStatistics>,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<std::__hash_value_type<unsigned long long,std::set<int>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::set<int>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::set<int>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::set<int>>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long &&>,std::tuple<>>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  _QWORD **v10;
  _QWORD *i;
  unint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  float v15;
  float v16;
  _BOOL8 v17;
  unint64_t v18;
  unint64_t v19;
  size_t v20;
  uint64_t v21;
  _QWORD *v22;
  unint64_t v23;

  v7 = *a2;
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v4 = *a2;
      if (v7 >= v8)
        v4 = v7 % v8;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
    v10 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v4);
    if (v10)
    {
      for (i = *v10; i; i = (_QWORD *)*i)
      {
        v12 = i[1];
        if (v12 == v7)
        {
          if (i[2] == v7)
            return i;
        }
        else
        {
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= v8)
              v12 %= v8;
          }
          else
          {
            v12 &= v8 - 1;
          }
          if (v12 != v4)
            break;
        }
      }
    }
  }
  v13 = (_QWORD *)(a1 + 16);
  i = operator new(0x30uLL);
  *i = 0;
  i[1] = v7;
  v14 = **a4;
  i[5] = 0;
  i[4] = 0;
  i[2] = v14;
  i[3] = i + 4;
  v15 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v16 = *(float *)(a1 + 32);
  if (!v8 || (float)(v16 * (float)v8) < v15)
  {
    v17 = 1;
    if (v8 >= 3)
      v17 = (v8 & (v8 - 1)) != 0;
    v18 = v17 | (2 * v8);
    v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19)
      v20 = v19;
    else
      v20 = v18;
    std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>>>::__rehash<true>(a1, v20);
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8)
        v4 = v7 % v8;
      else
        v4 = v7;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
  }
  v21 = *(_QWORD *)a1;
  v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v22)
  {
    *i = *v22;
LABEL_38:
    *v22 = i;
    goto LABEL_39;
  }
  *i = *v13;
  *v13 = i;
  *(_QWORD *)(v21 + 8 * v4) = v13;
  if (*i)
  {
    v23 = *(_QWORD *)(*i + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v23 >= v8)
        v23 %= v8;
    }
    else
    {
      v23 &= v8 - 1;
    }
    v22 = (_QWORD *)(*(_QWORD *)a1 + 8 * v23);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return i;
}

void sub_241B26FE4(_Unwind_Exception *a1)
{
  _QWORD **v1;
  uint64_t v2;

  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long,std::set<int>>,void *>>>::operator()[abi:ne180100](v2, v1);
  _Unwind_Resume(a1);
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long,std::set<int>>,void *>>>::operator()[abi:ne180100](uint64_t a1, _QWORD **a2)
{
  if (*(_BYTE *)(a1 + 8))
  {
    std::__tree<std::__value_type<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,double>,std::__map_value_compare<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,std::__value_type<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,double>,std::less<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes>,true>,std::allocator<std::__value_type<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,double>>>::destroy((uint64_t)(a2 + 3), a2[4]);
  }
  else if (!a2)
  {
    return;
  }
  operator delete(a2);
}

_QWORD *std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::__emplace_unique_key_args<int,int const&>(uint64_t a1, int *a2, _DWORD *a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  void **v9;
  _QWORD *v10;
  unint64_t v11;
  float v12;
  float v13;
  _BOOL8 v14;
  unint64_t v15;
  unint64_t v16;
  size_t v17;
  uint64_t v18;
  _QWORD *v19;
  unint64_t v20;

  v6 = *a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = *a2;
      if (v7 <= v6)
        v3 = v6 % v7;
    }
    else
    {
      v3 = (v7 - 1) & v6;
    }
    v9 = *(void ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      v10 = *v9;
      if (*v9)
      {
        do
        {
          v11 = v10[1];
          if (v11 == v6)
          {
            if (*((_DWORD *)v10 + 4) == (_DWORD)v6)
              return v10;
          }
          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v11 >= v7)
                v11 %= v7;
            }
            else
            {
              v11 &= v7 - 1;
            }
            if (v11 != v3)
              break;
          }
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
    }
  }
  v10 = operator new(0x18uLL);
  *v10 = 0;
  v10[1] = v6;
  *((_DWORD *)v10 + 4) = *a3;
  v12 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v13 = *(float *)(a1 + 32);
  if (!v7 || (float)(v13 * (float)v7) < v12)
  {
    v14 = 1;
    if (v7 >= 3)
      v14 = (v7 & (v7 - 1)) != 0;
    v15 = v14 | (2 * v7);
    v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16)
      v17 = v16;
    else
      v17 = v15;
    std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>>>::__rehash<true>(a1, v17);
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6)
        v3 = v6 % v7;
      else
        v3 = v6;
    }
    else
    {
      v3 = (v7 - 1) & v6;
    }
  }
  v18 = *(_QWORD *)a1;
  v19 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v19)
  {
    *v10 = *v19;
LABEL_38:
    *v19 = v10;
    goto LABEL_39;
  }
  *v10 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v10;
  *(_QWORD *)(v18 + 8 * v3) = a1 + 16;
  if (*v10)
  {
    v20 = *(_QWORD *)(*v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v20 >= v7)
        v20 %= v7;
    }
    else
    {
      v20 &= v7 - 1;
    }
    v19 = (_QWORD *)(*(_QWORD *)a1 + 8 * v20);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return v10;
}

void sub_241B2724C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, const void **a2, uint64_t a3, __int128 **a4)
{
  uint64_t **v6;
  uint64_t *result;
  uint64_t *v8;
  uint64_t v9;

  v6 = (uint64_t **)std::__tree<std::__value_type<std::string,CLSqliteDatabaseManager::ConnectionState>,std::__map_value_compare<std::string,std::__value_type<std::string,CLSqliteDatabaseManager::ConnectionState>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CLSqliteDatabaseManager::ConnectionState>>>::__find_equal<std::string>((uint64_t)a1, &v9, a2);
  result = *v6;
  if (!*v6)
  {
    std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)a1, a4, (uint64_t)&v8);
    std::__tree<CLMicroLocationRecordingCompletionMetaInformation::RecordingError>::__insert_node_at(a1, v9, v6, v8);
    return v8;
  }
  return result;
}

void std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1@<X0>, __int128 **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5;
  char *v6;
  std::string *v7;
  __int128 *v8;
  __int128 v9;

  v5 = a1 + 8;
  v6 = (char *)operator new(0x40uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  v7 = (std::string *)(v6 + 32);
  v8 = *a2;
  if (*((char *)*a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)v8, *((_QWORD *)v8 + 1));
  }
  else
  {
    v9 = *v8;
    *((_QWORD *)v6 + 6) = *((_QWORD *)v8 + 2);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v9;
  }
  v6[56] = 0;
  *(_BYTE *)(a3 + 16) = 1;
}

void sub_241B2737C(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;
  uint64_t v3;

  *v1 = 0;
  std::__tree_node_destructor<std::allocator<std::__tree_node<std::string,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

uint64_t std::__hash_table<std::__hash_value_type<unsigned long long,std::set<int>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::set<int>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::set<int>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::set<int>>>>::~__hash_table(uint64_t a1)
{
  void *v2;

  std::__hash_table<std::__hash_value_type<unsigned long long,std::set<int>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::set<int>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::set<int>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::set<int>>>>::__deallocate_node(a1, *(_QWORD ***)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void std::__hash_table<std::__hash_value_type<unsigned long long,std::set<int>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::set<int>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::set<int>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::set<int>>>>::__deallocate_node(uint64_t a1, _QWORD **a2)
{
  _QWORD **v2;
  _QWORD *v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = *v2;
      std::__tree<std::__value_type<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,double>,std::__map_value_compare<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,std::__value_type<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,double>,std::less<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes>,true>,std::allocator<std::__value_type<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,double>>>::destroy((uint64_t)(v2 + 3), v2[4]);
      operator delete(v2);
      v2 = (_QWORD **)v3;
    }
    while (v3);
  }
}

uint64_t std::__optional_destruct_base<CLMicroLocationRecordingEventsTable::Entry,false>::~__optional_destruct_base[abi:ne180100](uint64_t a1)
{
  if (*(_BYTE *)(a1 + 248))
  {
    CLMicroLocationProto::RecordingEvent::~RecordingEvent((CLMicroLocationProto::RecordingEvent *)(a1 + 80));
    if (*(char *)(a1 + 47) < 0)
      operator delete(*(void **)(a1 + 24));
  }
  return a1;
}

uint64_t wireless_diagnostics::google::protobuf::internal::GenericTypeHandler<CLMicroLocationProto::ChannelAndCount>::New()
{
  uint64_t v0;

  v0 = operator new();
  CLMicroLocationProto::ChannelAndCount::ChannelAndCount(v0);
  return v0;
}

void sub_241B2748C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2426A04D4](v1, 0x1081C40DCAC275BLL);
  _Unwind_Resume(a1);
}

void std::__function::__func<CLMicroLocationAnalytics::CLMicroLocationAnalytics(CLMicroLocationAnalytics::IAnalyticsDelegate &,ULDatabase &)::$_0,std::allocator<CLMicroLocationAnalytics::CLMicroLocationAnalytics(CLMicroLocationAnalytics::IAnalyticsDelegate &,ULDatabase &)::$_0>,void ()(std::function<BOOL ()(void)>)>::~__func()
{
  JUMPOUT(0x2426A04D4);
}

_QWORD *std::__function::__func<CLMicroLocationAnalytics::CLMicroLocationAnalytics(CLMicroLocationAnalytics::IAnalyticsDelegate &,ULDatabase &)::$_0,std::allocator<CLMicroLocationAnalytics::CLMicroLocationAnalytics(CLMicroLocationAnalytics::IAnalyticsDelegate &,ULDatabase &)::$_0>,void ()(std::function<BOOL ()(void)>)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_2511D9E68;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<CLMicroLocationAnalytics::CLMicroLocationAnalytics(CLMicroLocationAnalytics::IAnalyticsDelegate &,ULDatabase &)::$_0,std::allocator<CLMicroLocationAnalytics::CLMicroLocationAnalytics(CLMicroLocationAnalytics::IAnalyticsDelegate &,ULDatabase &)::$_0>,void ()(std::function<BOOL ()(void)>)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_2511D9E68;
  a2[1] = v2;
  return result;
}

_QWORD *std::__function::__func<CLMicroLocationAnalytics::CLMicroLocationAnalytics(CLMicroLocationAnalytics::IAnalyticsDelegate &,ULDatabase &)::$_0,std::allocator<CLMicroLocationAnalytics::CLMicroLocationAnalytics(CLMicroLocationAnalytics::IAnalyticsDelegate &,ULDatabase &)::$_0>,void ()(std::function<BOOL ()(void)>)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *result;
  uint64_t v8;
  _QWORD v9[3];
  _QWORD *v10;
  _BYTE v11[24];
  _BYTE *v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  std::__function::__value_func<BOOL ()(void)>::__value_func[abi:ne180100]((uint64_t)v9, a2);
  v3 = *(_QWORD *)(a1 + 8);
  v4 = (uint64_t)v10;
  if (!v10)
    goto LABEL_4;
  if (v10 != v9)
  {
    v4 = (*(uint64_t (**)(void))(*v10 + 16))();
LABEL_4:
    v12 = (_BYTE *)v4;
    goto LABEL_6;
  }
  v12 = v11;
  (*(void (**)(_QWORD *, _BYTE *))(v9[0] + 24))(v9, v11);
LABEL_6:
  CLMicroLocationAnalytics::analyzeAssociationState(v3, (uint64_t)v11);
  v5 = v12;
  if (v12 == v11)
  {
    v6 = 4;
    v5 = v11;
  }
  else
  {
    if (!v12)
      goto LABEL_11;
    v6 = 5;
  }
  (*(void (**)(void))(*v5 + 8 * v6))();
LABEL_11:
  result = v10;
  if (v10 == v9)
  {
    v8 = 4;
    result = v9;
  }
  else
  {
    if (!v10)
      return result;
    v8 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v8))();
}

void sub_241B27624(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  char *v18;
  uint64_t v19;

  v18 = a13;
  if (a13 == &a10)
  {
    v19 = 4;
    v18 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v19 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v18 + 8 * v19))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<CLMicroLocationAnalytics::CLMicroLocationAnalytics(CLMicroLocationAnalytics::IAnalyticsDelegate &,ULDatabase &)::$_0,std::allocator<CLMicroLocationAnalytics::CLMicroLocationAnalytics(CLMicroLocationAnalytics::IAnalyticsDelegate &,ULDatabase &)::$_0>,void ()(std::function<BOOL ()(void)>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<CLMicroLocationAnalytics::CLMicroLocationAnalytics(CLMicroLocationAnalytics::IAnalyticsDelegate &,ULDatabase &)::$_0,std::allocator<CLMicroLocationAnalytics::CLMicroLocationAnalytics(CLMicroLocationAnalytics::IAnalyticsDelegate &,ULDatabase &)::$_0>,void ()(std::function<BOOL ()(void)>)>::target_type()
{
}

void std::__function::__func<CLMicroLocationAnalytics::CLMicroLocationAnalytics(CLMicroLocationAnalytics::IAnalyticsDelegate &,ULDatabase &)::$_1,std::allocator<CLMicroLocationAnalytics::CLMicroLocationAnalytics(CLMicroLocationAnalytics::IAnalyticsDelegate &,ULDatabase &)::$_1>,void ()(std::function<BOOL ()(void)>)>::~__func()
{
  JUMPOUT(0x2426A04D4);
}

_QWORD *std::__function::__func<CLMicroLocationAnalytics::CLMicroLocationAnalytics(CLMicroLocationAnalytics::IAnalyticsDelegate &,ULDatabase &)::$_1,std::allocator<CLMicroLocationAnalytics::CLMicroLocationAnalytics(CLMicroLocationAnalytics::IAnalyticsDelegate &,ULDatabase &)::$_1>,void ()(std::function<BOOL ()(void)>)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_2511D9EE8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<CLMicroLocationAnalytics::CLMicroLocationAnalytics(CLMicroLocationAnalytics::IAnalyticsDelegate &,ULDatabase &)::$_1,std::allocator<CLMicroLocationAnalytics::CLMicroLocationAnalytics(CLMicroLocationAnalytics::IAnalyticsDelegate &,ULDatabase &)::$_1>,void ()(std::function<BOOL ()(void)>)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_2511D9EE8;
  a2[1] = v2;
  return result;
}

_QWORD *std::__function::__func<CLMicroLocationAnalytics::CLMicroLocationAnalytics(CLMicroLocationAnalytics::IAnalyticsDelegate &,ULDatabase &)::$_1,std::allocator<CLMicroLocationAnalytics::CLMicroLocationAnalytics(CLMicroLocationAnalytics::IAnalyticsDelegate &,ULDatabase &)::$_1>,void ()(std::function<BOOL ()(void)>)>::operator()(uint64_t a1, uint64_t a2)
{
  CLMicroLocationAnalytics *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *result;
  uint64_t v8;
  _QWORD v9[3];
  _QWORD *v10;
  _BYTE v11[24];
  _BYTE *v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  std::__function::__value_func<BOOL ()(void)>::__value_func[abi:ne180100]((uint64_t)v9, a2);
  v3 = *(CLMicroLocationAnalytics **)(a1 + 8);
  v4 = (uint64_t)v10;
  if (!v10)
    goto LABEL_4;
  if (v10 != v9)
  {
    v4 = (*(uint64_t (**)(void))(*v10 + 16))();
LABEL_4:
    v12 = (_BYTE *)v4;
    goto LABEL_6;
  }
  v12 = v11;
  (*(void (**)(_QWORD *, _BYTE *))(v9[0] + 24))(v9, v11);
LABEL_6:
  CLMicroLocationAnalytics::analyzeLocationOfInterestUsage(v3, (uint64_t)v11);
  v5 = v12;
  if (v12 == v11)
  {
    v6 = 4;
    v5 = v11;
  }
  else
  {
    if (!v12)
      goto LABEL_11;
    v6 = 5;
  }
  (*(void (**)(void))(*v5 + 8 * v6))();
LABEL_11:
  result = v10;
  if (v10 == v9)
  {
    v8 = 4;
    result = v9;
  }
  else
  {
    if (!v10)
      return result;
    v8 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v8))();
}

void sub_241B27850(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  char *v18;
  uint64_t v19;

  v18 = a13;
  if (a13 == &a10)
  {
    v19 = 4;
    v18 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v19 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v18 + 8 * v19))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<CLMicroLocationAnalytics::CLMicroLocationAnalytics(CLMicroLocationAnalytics::IAnalyticsDelegate &,ULDatabase &)::$_1,std::allocator<CLMicroLocationAnalytics::CLMicroLocationAnalytics(CLMicroLocationAnalytics::IAnalyticsDelegate &,ULDatabase &)::$_1>,void ()(std::function<BOOL ()(void)>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<CLMicroLocationAnalytics::CLMicroLocationAnalytics(CLMicroLocationAnalytics::IAnalyticsDelegate &,ULDatabase &)::$_1,std::allocator<CLMicroLocationAnalytics::CLMicroLocationAnalytics(CLMicroLocationAnalytics::IAnalyticsDelegate &,ULDatabase &)::$_1>,void ()(std::function<BOOL ()(void)>)>::target_type()
{
}

void std::__function::__func<CLMicroLocationAnalytics::CLMicroLocationAnalytics(CLMicroLocationAnalytics::IAnalyticsDelegate &,ULDatabase &)::$_2,std::allocator<CLMicroLocationAnalytics::CLMicroLocationAnalytics(CLMicroLocationAnalytics::IAnalyticsDelegate &,ULDatabase &)::$_2>,void ()(std::function<BOOL ()(void)>)>::~__func()
{
  JUMPOUT(0x2426A04D4);
}

_QWORD *std::__function::__func<CLMicroLocationAnalytics::CLMicroLocationAnalytics(CLMicroLocationAnalytics::IAnalyticsDelegate &,ULDatabase &)::$_2,std::allocator<CLMicroLocationAnalytics::CLMicroLocationAnalytics(CLMicroLocationAnalytics::IAnalyticsDelegate &,ULDatabase &)::$_2>,void ()(std::function<BOOL ()(void)>)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_2511D9F68;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<CLMicroLocationAnalytics::CLMicroLocationAnalytics(CLMicroLocationAnalytics::IAnalyticsDelegate &,ULDatabase &)::$_2,std::allocator<CLMicroLocationAnalytics::CLMicroLocationAnalytics(CLMicroLocationAnalytics::IAnalyticsDelegate &,ULDatabase &)::$_2>,void ()(std::function<BOOL ()(void)>)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_2511D9F68;
  a2[1] = v2;
  return result;
}

_QWORD *std::__function::__func<CLMicroLocationAnalytics::CLMicroLocationAnalytics(CLMicroLocationAnalytics::IAnalyticsDelegate &,ULDatabase &)::$_2,std::allocator<CLMicroLocationAnalytics::CLMicroLocationAnalytics(CLMicroLocationAnalytics::IAnalyticsDelegate &,ULDatabase &)::$_2>,void ()(std::function<BOOL ()(void)>)>::operator()(uint64_t a1, uint64_t a2)
{
  CLMicroLocationAnalytics *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *result;
  uint64_t v8;
  _QWORD v9[3];
  _QWORD *v10;
  _BYTE v11[24];
  _BYTE *v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  std::__function::__value_func<BOOL ()(void)>::__value_func[abi:ne180100]((uint64_t)v9, a2);
  v3 = *(CLMicroLocationAnalytics **)(a1 + 8);
  v4 = (uint64_t)v10;
  if (!v10)
    goto LABEL_4;
  if (v10 != v9)
  {
    v4 = (*(uint64_t (**)(void))(*v10 + 16))();
LABEL_4:
    v12 = (_BYTE *)v4;
    goto LABEL_6;
  }
  v12 = v11;
  (*(void (**)(_QWORD *, _BYTE *))(v9[0] + 24))(v9, v11);
LABEL_6:
  CLMicroLocationAnalytics::analyzeTriggerTypes(v3, (uint64_t)v11);
  v5 = v12;
  if (v12 == v11)
  {
    v6 = 4;
    v5 = v11;
  }
  else
  {
    if (!v12)
      goto LABEL_11;
    v6 = 5;
  }
  (*(void (**)(void))(*v5 + 8 * v6))();
LABEL_11:
  result = v10;
  if (v10 == v9)
  {
    v8 = 4;
    result = v9;
  }
  else
  {
    if (!v10)
      return result;
    v8 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v8))();
}

void sub_241B27A7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  char *v18;
  uint64_t v19;

  v18 = a13;
  if (a13 == &a10)
  {
    v19 = 4;
    v18 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v19 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v18 + 8 * v19))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<CLMicroLocationAnalytics::CLMicroLocationAnalytics(CLMicroLocationAnalytics::IAnalyticsDelegate &,ULDatabase &)::$_2,std::allocator<CLMicroLocationAnalytics::CLMicroLocationAnalytics(CLMicroLocationAnalytics::IAnalyticsDelegate &,ULDatabase &)::$_2>,void ()(std::function<BOOL ()(void)>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<CLMicroLocationAnalytics::CLMicroLocationAnalytics(CLMicroLocationAnalytics::IAnalyticsDelegate &,ULDatabase &)::$_2,std::allocator<CLMicroLocationAnalytics::CLMicroLocationAnalytics(CLMicroLocationAnalytics::IAnalyticsDelegate &,ULDatabase &)::$_2>,void ()(std::function<BOOL ()(void)>)>::target_type()
{
}

void std::__function::__func<CLMicroLocationAnalytics::CLMicroLocationAnalytics(CLMicroLocationAnalytics::IAnalyticsDelegate &,ULDatabase &)::$_3,std::allocator<CLMicroLocationAnalytics::CLMicroLocationAnalytics(CLMicroLocationAnalytics::IAnalyticsDelegate &,ULDatabase &)::$_3>,void ()(std::function<BOOL ()(void)>)>::~__func()
{
  JUMPOUT(0x2426A04D4);
}

_QWORD *std::__function::__func<CLMicroLocationAnalytics::CLMicroLocationAnalytics(CLMicroLocationAnalytics::IAnalyticsDelegate &,ULDatabase &)::$_3,std::allocator<CLMicroLocationAnalytics::CLMicroLocationAnalytics(CLMicroLocationAnalytics::IAnalyticsDelegate &,ULDatabase &)::$_3>,void ()(std::function<BOOL ()(void)>)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_2511D9FE8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<CLMicroLocationAnalytics::CLMicroLocationAnalytics(CLMicroLocationAnalytics::IAnalyticsDelegate &,ULDatabase &)::$_3,std::allocator<CLMicroLocationAnalytics::CLMicroLocationAnalytics(CLMicroLocationAnalytics::IAnalyticsDelegate &,ULDatabase &)::$_3>,void ()(std::function<BOOL ()(void)>)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_2511D9FE8;
  a2[1] = v2;
  return result;
}

_QWORD *std::__function::__func<CLMicroLocationAnalytics::CLMicroLocationAnalytics(CLMicroLocationAnalytics::IAnalyticsDelegate &,ULDatabase &)::$_3,std::allocator<CLMicroLocationAnalytics::CLMicroLocationAnalytics(CLMicroLocationAnalytics::IAnalyticsDelegate &,ULDatabase &)::$_3>,void ()(std::function<BOOL ()(void)>)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *result;
  uint64_t v8;
  _QWORD v9[3];
  _QWORD *v10;
  _BYTE v11[24];
  _BYTE *v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  std::__function::__value_func<BOOL ()(void)>::__value_func[abi:ne180100]((uint64_t)v9, a2);
  v3 = *(_QWORD *)(a1 + 8);
  v4 = (uint64_t)v10;
  if (!v10)
    goto LABEL_4;
  if (v10 != v9)
  {
    v4 = (*(uint64_t (**)(void))(*v10 + 16))();
LABEL_4:
    v12 = (_BYTE *)v4;
    goto LABEL_6;
  }
  v12 = v11;
  (*(void (**)(_QWORD *, _BYTE *))(v9[0] + 24))(v9, v11);
LABEL_6:
  CLMicroLocationAnalytics::analyzeModelLoiTypes(v3, (uint64_t)v11);
  v5 = v12;
  if (v12 == v11)
  {
    v6 = 4;
    v5 = v11;
  }
  else
  {
    if (!v12)
      goto LABEL_11;
    v6 = 5;
  }
  (*(void (**)(void))(*v5 + 8 * v6))();
LABEL_11:
  result = v10;
  if (v10 == v9)
  {
    v8 = 4;
    result = v9;
  }
  else
  {
    if (!v10)
      return result;
    v8 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v8))();
}

void sub_241B27CA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  char *v18;
  uint64_t v19;

  v18 = a13;
  if (a13 == &a10)
  {
    v19 = 4;
    v18 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v19 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v18 + 8 * v19))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<CLMicroLocationAnalytics::CLMicroLocationAnalytics(CLMicroLocationAnalytics::IAnalyticsDelegate &,ULDatabase &)::$_3,std::allocator<CLMicroLocationAnalytics::CLMicroLocationAnalytics(CLMicroLocationAnalytics::IAnalyticsDelegate &,ULDatabase &)::$_3>,void ()(std::function<BOOL ()(void)>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<CLMicroLocationAnalytics::CLMicroLocationAnalytics(CLMicroLocationAnalytics::IAnalyticsDelegate &,ULDatabase &)::$_3,std::allocator<CLMicroLocationAnalytics::CLMicroLocationAnalytics(CLMicroLocationAnalytics::IAnalyticsDelegate &,ULDatabase &)::$_3>,void ()(std::function<BOOL ()(void)>)>::target_type()
{
}

void std::vector<NSMutableDictionary * {__strong}>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  void *v6;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v6 = (void *)*((_QWORD *)v4 - 1);
        v4 -= 8;

      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t *std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::__emplace_unique_key_args<std::string,std::string const&,BOOL>(uint64_t **a1, const void **a2, uint64_t a3, char *a4)
{
  uint64_t **v7;
  uint64_t *result;
  uint64_t *v9;
  uint64_t v10;

  v7 = (uint64_t **)std::__tree<std::__value_type<std::string,CLSqliteDatabaseManager::ConnectionState>,std::__map_value_compare<std::string,std::__value_type<std::string,CLSqliteDatabaseManager::ConnectionState>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CLSqliteDatabaseManager::ConnectionState>>>::__find_equal<std::string>((uint64_t)a1, &v10, a2);
  result = *v7;
  if (!*v7)
  {
    std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::__construct_node<std::string const&,BOOL>((uint64_t)a1, a3, a4, (uint64_t)&v9);
    std::__tree<CLMicroLocationRecordingCompletionMetaInformation::RecordingError>::__insert_node_at(a1, v10, v7, v9);
    return v9;
  }
  return result;
}

void std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::__construct_node<std::string const&,BOOL>(uint64_t a1@<X0>, uint64_t a2@<X1>, char *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  char *v8;
  std::string *v9;

  v7 = a1 + 8;
  v8 = (char *)operator new(0x40uLL);
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  v9 = (std::string *)(v8 + 32);
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
    *((_QWORD *)v8 + 6) = *(_QWORD *)(a2 + 16);
  }
  v8[56] = *a3;
  *(_BYTE *)(a4 + 16) = 1;
}

void sub_241B27EDC(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;
  uint64_t v3;

  *v1 = 0;
  std::__tree_node_destructor<std::allocator<std::__tree_node<std::string,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

uint64_t **std::back_insert_iterator<std::vector<CLMicroLocationAssociatedStateTable::Entry>>::operator=[abi:ne180100](uint64_t **a1, __int128 *a2)
{
  uint64_t *v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t *v6;
  uint64_t v7;

  v3 = *a1;
  v5 = (*a1)[1];
  v4 = (*a1)[2];
  v6 = *a1;
  if (v5 >= v4)
  {
    v7 = std::vector<CLMicroLocationAssociatedStateTable::Entry>::__push_back_slow_path<CLMicroLocationAssociatedStateTable::Entry const&>(v6, a2);
  }
  else
  {
    std::vector<CLMicroLocationAssociatedStateTable::Entry>::__construct_one_at_end[abi:ne180100]<CLMicroLocationAssociatedStateTable::Entry const&>((uint64_t)v6, a2);
    v7 = v5 + 72;
  }
  v3[1] = v7;
  return a1;
}

__n128 std::vector<CLMicroLocationAssociatedStateTable::Entry>::__construct_one_at_end[abi:ne180100]<CLMicroLocationAssociatedStateTable::Entry const&>(uint64_t a1, __int128 *a2)
{
  uint64_t v4;
  __int128 v5;
  __n128 result;
  __int128 v7;

  v4 = *(_QWORD *)(a1 + 8);
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(*(std::string **)(a1 + 8), *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v5 = *a2;
    *(_QWORD *)(v4 + 16) = *((_QWORD *)a2 + 2);
    *(_OWORD *)v4 = v5;
  }
  result = *(__n128 *)((char *)a2 + 24);
  v7 = *(__int128 *)((char *)a2 + 40);
  *(_OWORD *)(v4 + 56) = *(__int128 *)((char *)a2 + 56);
  *(_OWORD *)(v4 + 40) = v7;
  *(__n128 *)(v4 + 24) = result;
  *(_QWORD *)(a1 + 8) = v4 + 72;
  return result;
}

void sub_241B27FBC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<CLMicroLocationAssociatedStateTable::Entry>::__push_back_slow_path<CLMicroLocationAssociatedStateTable::Entry const&>(uint64_t *a1, __int128 *a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  std::string *v11;
  __int128 v12;
  char *v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  _QWORD v18[2];
  std::string *v19;
  char *v20;
  uint64_t *v21;

  v3 = *a1;
  v4 = 0x8E38E38E38E38E39 * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0x38E38E38E38E38ELL)
    std::vector<CLMicroLocationProto::ConfidenceReason>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0x8E38E38E38E38E39 * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x1C71C71C71C71C7)
    v9 = 0x38E38E38E38E38ELL;
  else
    v9 = v5;
  v21 = a1 + 2;
  if (v9)
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CLMicroLocationAssociatedStateTable::Entry>>(v7, v9);
  else
    v10 = 0;
  v11 = (std::string *)&v10[72 * v4];
  v18[0] = v10;
  v18[1] = v11;
  v19 = v11;
  v20 = &v10[72 * v9];
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v11, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
    v11 = v19;
  }
  else
  {
    v12 = *a2;
    v11->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&v11->__r_.__value_.__l.__data_ = v12;
  }
  v13 = &v10[72 * v4];
  v14 = *(__int128 *)((char *)a2 + 56);
  v15 = *(__int128 *)((char *)a2 + 24);
  *(_OWORD *)(v13 + 40) = *(__int128 *)((char *)a2 + 40);
  *(_OWORD *)(v13 + 24) = v15;
  *(_OWORD *)(v13 + 56) = v14;
  v19 = v11 + 3;
  std::vector<CLMicroLocationAssociatedStateTable::Entry>::__swap_out_circular_buffer(a1, v18);
  v16 = a1[1];
  std::__split_buffer<CLMicroLocationAssociatedStateTable::Entry>::~__split_buffer((uint64_t)v18);
  return v16;
}

void sub_241B28108(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<CLMicroLocationAssociatedStateTable::Entry>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::__split_buffer<NSMutableDictionary * {__strong}>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 8;

  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void std::__tree<std::__value_type<int,std::map<std::string,BOOL>>,std::__map_value_compare<int,std::__value_type<int,std::map<std::string,BOOL>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::map<std::string,BOOL>>>>::destroy(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<int,std::map<std::string,BOOL>>,std::__map_value_compare<int,std::__value_type<int,std::map<std::string,BOOL>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::map<std::string,BOOL>>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<int,std::map<std::string,BOOL>>,std::__map_value_compare<int,std::__value_type<int,std::map<std::string,BOOL>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::map<std::string,BOOL>>>>::destroy(a1, a2[1]);
    std::__tree<std::string>::destroy((uint64_t)(a2 + 5), (char *)a2[6]);
    operator delete(a2);
  }
}

uint64_t *std::__tree<std::__value_type<int,std::map<std::string,BOOL>>,std::__map_value_compare<int,std::__value_type<int,std::map<std::string,BOOL>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::map<std::string,BOOL>>>>::__emplace_unique_key_args<int,int,std::map<std::string,BOOL>&>(uint64_t a1, int *a2, _DWORD *a3, const void ***a4)
{
  uint64_t *v5;
  uint64_t **v6;
  int v7;
  uint64_t **v8;
  int v9;
  uint64_t *v11;

  v6 = (uint64_t **)(a1 + 8);
  v5 = *(uint64_t **)(a1 + 8);
  if (v5)
  {
    v7 = *a2;
    while (1)
    {
      while (1)
      {
        v8 = (uint64_t **)v5;
        v9 = *((_DWORD *)v5 + 8);
        if (v7 >= v9)
          break;
        v5 = *v8;
        v6 = v8;
        if (!*v8)
          goto LABEL_10;
      }
      if (v9 >= v7)
        break;
      v5 = v8[1];
      if (!v5)
      {
        v6 = v8 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v8 = (uint64_t **)(a1 + 8);
LABEL_10:
    std::__tree<std::__value_type<int,std::map<std::string,BOOL>>,std::__map_value_compare<int,std::__value_type<int,std::map<std::string,BOOL>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::map<std::string,BOOL>>>>::__construct_node<int,std::map<std::string,BOOL>&>(a1, a3, a4, (uint64_t)&v11);
    std::__tree<CLMicroLocationRecordingCompletionMetaInformation::RecordingError>::__insert_node_at((uint64_t **)a1, (uint64_t)v8, v6, v11);
    return v11;
  }
  return (uint64_t *)v8;
}

uint64_t *std::__tree<std::__value_type<int,std::map<std::string,BOOL>>,std::__map_value_compare<int,std::__value_type<int,std::map<std::string,BOOL>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::map<std::string,BOOL>>>>::__construct_node<int,std::map<std::string,BOOL>&>@<X0>(uint64_t a1@<X0>, _DWORD *a2@<X1>, const void ***a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  void *v8;
  uint64_t *result;

  v7 = a1 + 8;
  v8 = operator new(0x40uLL);
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  *((_DWORD *)v8 + 8) = *a2;
  result = std::map<std::string,BOOL>::map[abi:ne180100]((uint64_t *)v8 + 5, a3);
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

void sub_241B282DC(_Unwind_Exception *a1)
{
  _QWORD *v1;
  char **v2;
  uint64_t v3;

  *v1 = 0;
  std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<int,std::map<std::string,BOOL>>,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

uint64_t *std::map<std::string,BOOL>::map[abi:ne180100](uint64_t *a1, const void ***a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  std::map<std::string,BOOL>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,BOOL>,std::__tree_node<std::__value_type<std::string,BOOL>,void *> *,long>>>(a1, *a2, a2 + 1);
  return a1;
}

void sub_241B28334(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::string>::destroy(v1, *(char **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::map<std::string,BOOL>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,BOOL>,std::__tree_node<std::__value_type<std::string,BOOL>,void *> *,long>>>(uint64_t *result, const void **a2, const void ***a3)
{
  const void **v4;
  uint64_t **v5;
  uint64_t *v6;
  const void **v7;
  const void ***v8;
  BOOL v9;

  if (a2 != (const void **)a3)
  {
    v4 = a2;
    v5 = (uint64_t **)result;
    v6 = result + 1;
    do
    {
      result = std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,BOOL> const&>(v5, v6, v4 + 4, (uint64_t)(v4 + 4));
      v7 = (const void **)v4[1];
      if (v7)
      {
        do
        {
          v8 = (const void ***)v7;
          v7 = (const void **)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (const void ***)v4[2];
          v9 = *v8 == v4;
          v4 = (const void **)v8;
        }
        while (!v9);
      }
      v4 = (const void **)v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t *std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,BOOL> const&>(uint64_t **a1, uint64_t *a2, const void **a3, uint64_t a4)
{
  uint64_t **v6;
  uint64_t *result;
  uint64_t *v8;
  uint64_t v9;
  const void **v10;

  v6 = (uint64_t **)std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::__find_equal<std::string>(a1, a2, &v10, &v9, a3);
  result = *v6;
  if (!*v6)
  {
    std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::__construct_node<std::pair<std::string const,BOOL> const&>((uint64_t)a1, a4, (uint64_t)&v8);
    std::__tree<CLMicroLocationRecordingCompletionMetaInformation::RecordingError>::__insert_node_at(a1, (uint64_t)v10, v6, v8);
    return v8;
  }
  return result;
}

const void **std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::__find_equal<std::string>(_QWORD *a1, uint64_t *a2, const void ***a3, uint64_t *a4, const void **a5)
{
  const void **v9;
  const void **v11;
  const void **v12;
  uint64_t v13;
  const void **v14;
  const void **v15;
  uint64_t *v16;
  BOOL v17;
  const void **v18;

  v9 = (const void **)(a1 + 1);
  if (a1 + 1 == a2 || std::less<std::string>::operator()[abi:ne180100]((uint64_t)(a1 + 2), a5, (const void **)a2 + 4))
  {
    if ((uint64_t *)*a1 == a2)
    {
      v12 = (const void **)a2;
LABEL_16:
      if (*a2)
      {
        *a3 = v12;
        return v12 + 1;
      }
      else
      {
        *a3 = (const void **)a2;
        return (const void **)a2;
      }
    }
    v11 = (const void **)*a2;
    if (*a2)
    {
      do
      {
        v12 = v11;
        v11 = (const void **)v11[1];
      }
      while (v11);
    }
    else
    {
      v16 = a2;
      do
      {
        v12 = (const void **)v16[2];
        v17 = *v12 == v16;
        v16 = (uint64_t *)v12;
      }
      while (v17);
    }
    if (std::less<std::string>::operator()[abi:ne180100]((uint64_t)(a1 + 2), v12 + 4, a5))
      goto LABEL_16;
    return (const void **)std::__tree<std::__value_type<std::string,CLSqliteDatabaseManager::ConnectionState>,std::__map_value_compare<std::string,std::__value_type<std::string,CLSqliteDatabaseManager::ConnectionState>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CLSqliteDatabaseManager::ConnectionState>>>::__find_equal<std::string>((uint64_t)a1, a3, a5);
  }
  if (std::less<std::string>::operator()[abi:ne180100]((uint64_t)(a1 + 2), (const void **)a2 + 4, a5))
  {
    a4 = a2 + 1;
    v13 = a2[1];
    if (v13)
    {
      v14 = (const void **)a2[1];
      do
      {
        v15 = v14;
        v14 = (const void **)*v14;
      }
      while (v14);
    }
    else
    {
      v18 = (const void **)a2;
      do
      {
        v15 = (const void **)v18[2];
        v17 = *v15 == v18;
        v18 = v15;
      }
      while (!v17);
    }
    if (v15 != v9)
    {
      if (!std::less<std::string>::operator()[abi:ne180100]((uint64_t)(a1 + 2), a5, v15 + 4))
        return (const void **)std::__tree<std::__value_type<std::string,CLSqliteDatabaseManager::ConnectionState>,std::__map_value_compare<std::string,std::__value_type<std::string,CLSqliteDatabaseManager::ConnectionState>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CLSqliteDatabaseManager::ConnectionState>>>::__find_equal<std::string>((uint64_t)a1, a3, a5);
      v13 = *a4;
    }
    if (v13)
    {
      *a3 = v15;
      return v15;
    }
    else
    {
      *a3 = (const void **)a2;
    }
    return (const void **)a4;
  }
  *a3 = (const void **)a2;
  *a4 = (uint64_t)a2;
  return (const void **)a4;
}

void std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::__construct_node<std::pair<std::string const,BOOL> const&>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  char *v6;
  std::string *v7;

  v5 = a1 + 8;
  v6 = (char *)operator new(0x40uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  v7 = (std::string *)(v6 + 32);
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
    *((_QWORD *)v6 + 6) = *(_QWORD *)(a2 + 16);
  }
  v6[56] = *(_BYTE *)(a2 + 24);
  *(_BYTE *)(a3 + 16) = 1;
}

void sub_241B28670(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;
  uint64_t v3;

  *v1 = 0;
  std::__tree_node_destructor<std::allocator<std::__tree_node<std::string,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

void std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<int,std::map<std::string,BOOL>>,void *>>>::operator()[abi:ne180100](uint64_t a1, char **a2)
{
  if (*(_BYTE *)(a1 + 8))
  {
    std::__tree<std::string>::destroy((uint64_t)(a2 + 5), a2[6]);
  }
  else if (!a2)
  {
    return;
  }
  operator delete(a2);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1, unsigned __int8 *a2, uint64_t a3, __int128 **a4)
{
  unint64_t v4;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  unint64_t v13;
  unsigned __int8 **v14;
  unsigned __int8 *i;
  unint64_t v16;
  float v17;
  float v18;
  _BOOL8 v19;
  unint64_t v20;
  unint64_t v21;
  size_t v22;
  _QWORD *v23;
  unint64_t v24;
  _QWORD v26[3];

  v8 = (_QWORD *)(a1 + 24);
  v9 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  v10 = v9;
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      v4 = v9;
      if (v9 >= v11)
        v4 = v9 % v11;
    }
    else
    {
      v4 = (v11 - 1) & v9;
    }
    v14 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v4);
    if (v14)
    {
      for (i = *v14; i; i = *(unsigned __int8 **)i)
      {
        v16 = *((_QWORD *)i + 1);
        if (v16 == v10)
        {
          if ((std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2) & 1) != 0)
            return i;
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11)
              v16 %= v11;
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4)
            break;
        }
      }
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1, v10, a4, (uint64_t)v26);
  v17 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v18 = *(float *)(a1 + 32);
  if (!v11 || (float)(v18 * (float)v11) < v17)
  {
    v19 = 1;
    if (v11 >= 3)
      v19 = (v11 & (v11 - 1)) != 0;
    v20 = v19 | (2 * v11);
    v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21)
      v22 = v21;
    else
      v22 = v20;
    std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>>>::__rehash<true>(a1, v22);
    v11 = *(_QWORD *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
        v4 = v10 % v11;
      else
        v4 = v10;
    }
    else
    {
      v4 = (v11 - 1) & v10;
    }
  }
  v23 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v23)
  {
    *(_QWORD *)v26[0] = *v23;
    *v23 = v26[0];
  }
  else
  {
    *(_QWORD *)v26[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v26[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = a1 + 16;
    if (*(_QWORD *)v26[0])
    {
      v24 = *(_QWORD *)(*(_QWORD *)v26[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v24 >= v11)
          v24 %= v11;
      }
      else
      {
        v24 &= v11 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v24) = v26[0];
    }
  }
  i = (unsigned __int8 *)v26[0];
  ++*v8;
  return i;
}

void sub_241B28944(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void **__p, uint64_t a13)
{
  if (__p)
    std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,AnchorValueStatistics>,void *>>>::operator()[abi:ne180100]((uint64_t)&a13, __p);
  _Unwind_Resume(exception_object);
}

void std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1@<X0>, uint64_t a2@<X1>, __int128 **a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7;
  _QWORD *v8;
  std::string *v9;
  __int128 *v10;
  __int128 v11;

  v7 = a1 + 16;
  v8 = operator new(0x30uLL);
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  *v8 = 0;
  v8[1] = a2;
  v9 = (std::string *)(v8 + 2);
  v10 = *a3;
  if (*((char *)*a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)v10, *((_QWORD *)v10 + 1));
  }
  else
  {
    v11 = *v10;
    v8[4] = *((_QWORD *)v10 + 2);
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v11;
  }
  v8[5] = 0;
  *(_BYTE *)(a4 + 16) = 1;
}

void sub_241B289F4(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;
  uint64_t v3;

  *v1 = 0;
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,AnchorValueStatistics>,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

void *std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(uint64_t a1, unsigned __int8 *a2, uint64_t a3, __int128 **a4)
{
  unint64_t v4;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  unint64_t v13;
  void **v14;
  void *i;
  unint64_t v16;
  _QWORD *v17;
  __int128 *v18;
  __int128 v19;
  float v20;
  float v21;
  _BOOL8 v22;
  unint64_t v23;
  unint64_t v24;
  size_t v25;
  uint64_t v26;
  _QWORD *v27;
  unint64_t v28;

  v8 = (_QWORD *)(a1 + 24);
  v9 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  v10 = v9;
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      v4 = v9;
      if (v9 >= v11)
        v4 = v9 % v11;
    }
    else
    {
      v4 = (v11 - 1) & v9;
    }
    v14 = *(void ***)(*(_QWORD *)a1 + 8 * v4);
    if (v14)
    {
      for (i = *v14; i; i = *(void **)i)
      {
        v16 = *((_QWORD *)i + 1);
        if (v16 == v10)
        {
          if ((std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, (unsigned __int8 *)i + 16, a2) & 1) != 0)
            return i;
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11)
              v16 %= v11;
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4)
            break;
        }
      }
    }
  }
  v17 = (_QWORD *)(a1 + 16);
  i = operator new(0x30uLL);
  *(_QWORD *)i = 0;
  *((_QWORD *)i + 1) = v10;
  v18 = *a4;
  v19 = **a4;
  *((_QWORD *)i + 4) = *((_QWORD *)*a4 + 2);
  *((_OWORD *)i + 1) = v19;
  *((_QWORD *)v18 + 1) = 0;
  *((_QWORD *)v18 + 2) = 0;
  *(_QWORD *)v18 = 0;
  *((_QWORD *)i + 5) = 0;
  v20 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v21 = *(float *)(a1 + 32);
  if (!v11 || (float)(v21 * (float)v11) < v20)
  {
    v22 = 1;
    if (v11 >= 3)
      v22 = (v11 & (v11 - 1)) != 0;
    v23 = v22 | (2 * v11);
    v24 = vcvtps_u32_f32(v20 / v21);
    if (v23 <= v24)
      v25 = v24;
    else
      v25 = v23;
    std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>>>::__rehash<true>(a1, v25);
    v11 = *(_QWORD *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
        v4 = v10 % v11;
      else
        v4 = v10;
    }
    else
    {
      v4 = (v11 - 1) & v10;
    }
  }
  v26 = *(_QWORD *)a1;
  v27 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v27)
  {
    *(_QWORD *)i = *v27;
LABEL_38:
    *v27 = i;
    goto LABEL_39;
  }
  *(_QWORD *)i = *v17;
  *v17 = i;
  *(_QWORD *)(v26 + 8 * v4) = v17;
  if (*(_QWORD *)i)
  {
    v28 = *(_QWORD *)(*(_QWORD *)i + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v28 >= v11)
        v28 %= v11;
    }
    else
    {
      v28 &= v11 - 1;
    }
    v27 = (_QWORD *)(*(_QWORD *)a1 + 8 * v28);
    goto LABEL_38;
  }
LABEL_39:
  ++*v8;
  return i;
}

void sub_241B28C7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  void **v10;
  uint64_t v11;

  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,AnchorValueStatistics>,void *>>>::operator()[abi:ne180100](v11, v10);
  _Unwind_Resume(a1);
}

void std::__function::__func<CLMicroLocationAnalytics::addSpectatingDurationMetrics(NSMutableDictionary *,double,double)::$_0,std::allocator<CLMicroLocationAnalytics::addSpectatingDurationMetrics(NSMutableDictionary *,double,double)::$_0>,BOOL ()(CLMicroLocationLoggedEventsTable::Entry const&)>::~__func()
{
  JUMPOUT(0x2426A04D4);
}

_QWORD *std::__function::__func<CLMicroLocationAnalytics::addSpectatingDurationMetrics(NSMutableDictionary *,double,double)::$_0,std::allocator<CLMicroLocationAnalytics::addSpectatingDurationMetrics(NSMutableDictionary *,double,double)::$_0>,BOOL ()(CLMicroLocationLoggedEventsTable::Entry const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_2511DA068;
  return result;
}

void std::__function::__func<CLMicroLocationAnalytics::addSpectatingDurationMetrics(NSMutableDictionary *,double,double)::$_0,std::allocator<CLMicroLocationAnalytics::addSpectatingDurationMetrics(NSMutableDictionary *,double,double)::$_0>,BOOL ()(CLMicroLocationLoggedEventsTable::Entry const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_2511DA068;
}

BOOL std::__function::__func<CLMicroLocationAnalytics::addSpectatingDurationMetrics(NSMutableDictionary *,double,double)::$_0,std::allocator<CLMicroLocationAnalytics::addSpectatingDurationMetrics(NSMutableDictionary *,double,double)::$_0>,BOOL ()(CLMicroLocationLoggedEventsTable::Entry const&)>::operator()(uint64_t a1, uint64_t a2)
{
  int v2;
  NSObject *v4;
  uint64_t v5;
  NSObject *v6;
  _BOOL8 result;
  uint64_t v8;
  int v9;
  int v10;
  __int16 v11;
  const char *v12;
  __int16 v13;
  uint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v2 = *(_DWORD *)(a2 + 24);
  if (v2 == 34)
    return 1;
  if (v2 == 44 || v2 == 35)
    return 0;
  if (onceToken_MicroLocation_Default != -1)
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_96);
  v4 = logObject_MicroLocation_Default;
  if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_ERROR))
  {
    v5 = *(unsigned int *)(a2 + 24);
    v9 = 68289282;
    v10 = 0;
    v11 = 2082;
    v12 = "";
    v13 = 2050;
    v14 = v5;
    _os_log_impl(&dword_2419D9000, v4, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"got unexpected event type to indicate start/stop spectating\", \"event type\":%{public}lu}", (uint8_t *)&v9, 0x1Cu);
    if (onceToken_MicroLocation_Default != -1)
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_96);
  }
  v6 = logObject_MicroLocation_Default;
  result = os_signpost_enabled((os_log_t)logObject_MicroLocation_Default);
  if (result)
  {
    v8 = *(unsigned int *)(a2 + 24);
    v9 = 68289282;
    v10 = 0;
    v11 = 2082;
    v12 = "";
    v13 = 2050;
    v14 = v8;
    _os_signpost_emit_with_name_impl(&dword_2419D9000, v6, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "got unexpected event type to indicate start/stop spectating", "{\"msg%{public}.0s\":\"got unexpected event type to indicate start/stop spectating\", \"event type\":%{public}lu}", (uint8_t *)&v9, 0x1Cu);
    return 0;
  }
  return result;
}

uint64_t std::__function::__func<CLMicroLocationAnalytics::addSpectatingDurationMetrics(NSMutableDictionary *,double,double)::$_0,std::allocator<CLMicroLocationAnalytics::addSpectatingDurationMetrics(NSMutableDictionary *,double,double)::$_0>,BOOL ()(CLMicroLocationLoggedEventsTable::Entry const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<CLMicroLocationAnalytics::addSpectatingDurationMetrics(NSMutableDictionary *,double,double)::$_0,std::allocator<CLMicroLocationAnalytics::addSpectatingDurationMetrics(NSMutableDictionary *,double,double)::$_0>,BOOL ()(CLMicroLocationLoggedEventsTable::Entry const&)>::target_type()
{
}

void std::__function::__func<CLMicroLocationAnalytics::addMotionSpectatingDurationMetrics(NSMutableDictionary *,double,double)::$_0,std::allocator<CLMicroLocationAnalytics::addMotionSpectatingDurationMetrics(NSMutableDictionary *,double,double)::$_0>,BOOL ()(CLMicroLocationLoggedEventsTable::Entry const&)>::~__func()
{
  JUMPOUT(0x2426A04D4);
}

_QWORD *std::__function::__func<CLMicroLocationAnalytics::addMotionSpectatingDurationMetrics(NSMutableDictionary *,double,double)::$_0,std::allocator<CLMicroLocationAnalytics::addMotionSpectatingDurationMetrics(NSMutableDictionary *,double,double)::$_0>,BOOL ()(CLMicroLocationLoggedEventsTable::Entry const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_2511DA0F8;
  return result;
}

void std::__function::__func<CLMicroLocationAnalytics::addMotionSpectatingDurationMetrics(NSMutableDictionary *,double,double)::$_0,std::allocator<CLMicroLocationAnalytics::addMotionSpectatingDurationMetrics(NSMutableDictionary *,double,double)::$_0>,BOOL ()(CLMicroLocationLoggedEventsTable::Entry const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_2511DA0F8;
}

BOOL std::__function::__func<CLMicroLocationAnalytics::addMotionSpectatingDurationMetrics(NSMutableDictionary *,double,double)::$_0,std::allocator<CLMicroLocationAnalytics::addMotionSpectatingDurationMetrics(NSMutableDictionary *,double,double)::$_0>,BOOL ()(CLMicroLocationLoggedEventsTable::Entry const&)>::operator()(CLMicroLocationProto::ReceivedEvent *a1, uint64_t a2)
{
  int v2;
  uint64_t v4;
  _BOOL8 result;
  NSObject *v6;
  uint64_t v7;
  NSObject *v8;
  uint64_t v9;
  int v10;
  int v11;
  __int16 v12;
  const char *v13;
  __int16 v14;
  uint64_t v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  v2 = *(_DWORD *)(a2 + 24);
  if (v2 == 44)
    return 0;
  if (v2 == 50)
  {
    if ((*(_BYTE *)(a2 + 327) & 0x20) != 0)
    {
      v4 = *(_QWORD *)(a2 + 272);
      if (!v4)
        v4 = *(_QWORD *)(CLMicroLocationProto::ReceivedEvent::default_instance(a1) + 240);
      if (*(_BYTE *)(v4 + 12))
        return 1;
    }
    return 0;
  }
  if (onceToken_MicroLocation_Default != -1)
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_96);
  v6 = logObject_MicroLocation_Default;
  if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_ERROR))
  {
    v7 = *(unsigned int *)(a2 + 24);
    v10 = 68289282;
    v11 = 0;
    v12 = 2082;
    v13 = "";
    v14 = 2050;
    v15 = v7;
    _os_log_impl(&dword_2419D9000, v6, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"got unexpected event type to indicate start/stop motion spectating\", \"event type\":%{public}lu}", (uint8_t *)&v10, 0x1Cu);
    if (onceToken_MicroLocation_Default != -1)
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_96);
  }
  v8 = logObject_MicroLocation_Default;
  result = os_signpost_enabled((os_log_t)logObject_MicroLocation_Default);
  if (result)
  {
    v9 = *(unsigned int *)(a2 + 24);
    v10 = 68289282;
    v11 = 0;
    v12 = 2082;
    v13 = "";
    v14 = 2050;
    v15 = v9;
    _os_signpost_emit_with_name_impl(&dword_2419D9000, v8, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "got unexpected event type to indicate start/stop motion spectating", "{\"msg%{public}.0s\":\"got unexpected event type to indicate start/stop motion spectating\", \"event type\":%{public}lu}", (uint8_t *)&v10, 0x1Cu);
    return 0;
  }
  return result;
}

uint64_t std::__function::__func<CLMicroLocationAnalytics::addMotionSpectatingDurationMetrics(NSMutableDictionary *,double,double)::$_0,std::allocator<CLMicroLocationAnalytics::addMotionSpectatingDurationMetrics(NSMutableDictionary *,double,double)::$_0>,BOOL ()(CLMicroLocationLoggedEventsTable::Entry const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<CLMicroLocationAnalytics::addMotionSpectatingDurationMetrics(NSMutableDictionary *,double,double)::$_0,std::allocator<CLMicroLocationAnalytics::addMotionSpectatingDurationMetrics(NSMutableDictionary *,double,double)::$_0>,BOOL ()(CLMicroLocationLoggedEventsTable::Entry const&)>::target_type()
{
}

void std::vector<CLMicroLocationProto::TriggerEvent>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  char *v6;
  char *v7;
  void (**v8)(char *);
  BOOL v9;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      v6 = v4 - 88;
      v7 = v4 - 88;
      do
      {
        v8 = *(void (***)(char *))v7;
        v7 -= 88;
        (*v8)(v6);
        v9 = v6 == v2;
        v6 = v7;
      }
      while (!v9);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t std::vector<CLMicroLocationProto::TriggerEvent>::__push_back_slow_path<CLMicroLocationProto::TriggerEvent const&>(uint64_t *a1, const CLMicroLocationProto::TriggerEvent *a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  char *v13;
  CLMicroLocationProto::TriggerEvent *v14;
  char *v15;
  char *v16;
  uint64_t *v17;

  v3 = *a1;
  v4 = 0x2E8BA2E8BA2E8BA3 * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) > 0x2E8BA2E8BA2E8BALL)
    std::vector<CLMicroLocationProto::ConfidenceReason>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0x2E8BA2E8BA2E8BA3 * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x1745D1745D1745DLL)
    v9 = 0x2E8BA2E8BA2E8BALL;
  else
    v9 = v5;
  v17 = a1 + 2;
  if (v9)
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CLMiLoServiceTable::Entry>>(v7, v9);
  else
    v10 = 0;
  v13 = v10;
  v14 = (CLMicroLocationProto::TriggerEvent *)&v10[88 * v4];
  v16 = &v10[88 * v9];
  CLMicroLocationProto::TriggerEvent::TriggerEvent(v14, a2);
  v15 = (char *)v14 + 88;
  std::vector<CLMicroLocationProto::TriggerEvent>::__swap_out_circular_buffer(a1, &v13);
  v11 = a1[1];
  std::__split_buffer<CLMicroLocationProto::TriggerEvent>::~__split_buffer((uint64_t)&v13);
  return v11;
}

void sub_241B292E8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<CLMicroLocationProto::TriggerEvent>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<CLMicroLocationProto::TriggerEvent>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<CLMicroLocationProto::TriggerEvent>,std::reverse_iterator<CLMicroLocationProto::TriggerEvent*>,std::reverse_iterator<CLMicroLocationProto::TriggerEvent*>,std::reverse_iterator<CLMicroLocationProto::TriggerEvent*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<CLMicroLocationProto::TriggerEvent>,std::reverse_iterator<CLMicroLocationProto::TriggerEvent*>,std::reverse_iterator<CLMicroLocationProto::TriggerEvent*>,std::reverse_iterator<CLMicroLocationProto::TriggerEvent*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v10;
  uint64_t v11;
  CLMicroLocationProto::TriggerEvent *v12;

  v10 = 0;
  v11 = a7 - 88;
  while (a3 + v10 != a5)
  {
    v12 = (CLMicroLocationProto::TriggerEvent *)(v11 + v10);
    v10 -= 88;
    CLMicroLocationProto::TriggerEvent::TriggerEvent(v12, (const CLMicroLocationProto::TriggerEvent *)(v10 + a3));
  }
  return a6;
}

uint64_t std::__split_buffer<CLMicroLocationProto::TriggerEvent>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;
  void (**v4)(void);

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    v4 = *(void (***)(void))(i - 88);
    *(_QWORD *)(a1 + 16) = i - 88;
    (*v4)();
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void std::vector<CLMicroLocationProto::WiFiRssi>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  char *v6;
  char *v7;
  void (**v8)(char *);
  BOOL v9;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      v6 = v4 - 48;
      v7 = v4 - 48;
      do
      {
        v8 = *(void (***)(char *))v7;
        v7 -= 48;
        (*v8)(v6);
        v9 = v6 == v2;
        v6 = v7;
      }
      while (!v9);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t std::vector<CLMicroLocationProto::WiFiRssi>::__push_back_slow_path<CLMicroLocationProto::WiFiRssi const&>(uint64_t *a1, const CLMicroLocationProto::WiFiRssi *a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  char *v13;
  CLMicroLocationProto::WiFiRssi *v14;
  char *v15;
  char *v16;
  uint64_t *v17;

  v3 = *a1;
  v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4);
  v5 = v4 + 1;
  if (v4 + 1 > 0x555555555555555)
    std::vector<CLMicroLocationProto::ConfidenceReason>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 4);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x2AAAAAAAAAAAAAALL)
    v9 = 0x555555555555555;
  else
    v9 = v5;
  v17 = a1 + 2;
  if (v9)
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CLMicroLocationClientUtils::ClientIdentitiesAndLocationTypes>>(v7, v9);
  else
    v10 = 0;
  v13 = v10;
  v14 = (CLMicroLocationProto::WiFiRssi *)&v10[48 * v4];
  v16 = &v10[48 * v9];
  CLMicroLocationProto::WiFiRssi::WiFiRssi(v14, a2);
  v15 = (char *)v14 + 48;
  std::vector<CLMicroLocationProto::WiFiRssi>::__swap_out_circular_buffer(a1, &v13);
  v11 = a1[1];
  std::__split_buffer<CLMicroLocationProto::WiFiRssi>::~__split_buffer((uint64_t)&v13);
  return v11;
}

void sub_241B295D4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<CLMicroLocationProto::WiFiRssi>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<CLMicroLocationProto::WiFiRssi>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<CLMicroLocationProto::WiFiRssi>,std::reverse_iterator<CLMicroLocationProto::WiFiRssi*>,std::reverse_iterator<CLMicroLocationProto::WiFiRssi*>,std::reverse_iterator<CLMicroLocationProto::WiFiRssi*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<CLMicroLocationProto::WiFiRssi>,std::reverse_iterator<CLMicroLocationProto::WiFiRssi*>,std::reverse_iterator<CLMicroLocationProto::WiFiRssi*>,std::reverse_iterator<CLMicroLocationProto::WiFiRssi*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v10;
  uint64_t v11;
  CLMicroLocationProto::WiFiRssi *v12;

  v10 = 0;
  v11 = a7 - 48;
  while (a3 + v10 != a5)
  {
    v12 = (CLMicroLocationProto::WiFiRssi *)(v11 + v10);
    v10 -= 48;
    CLMicroLocationProto::WiFiRssi::WiFiRssi(v12, (const CLMicroLocationProto::WiFiRssi *)(v10 + a3));
  }
  return a6;
}

uint64_t std::__split_buffer<CLMicroLocationProto::WiFiRssi>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;
  void (**v4)(void);

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    v4 = *(void (***)(void))(i - 48);
    *(_QWORD *)(a1 + 16) = i - 48;
    (*v4)();
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t std::vector<CLMicroLocationConfigurationTable::Entry>::__emplace_back_slow_path<char const* const&,CLMicroLocationProto::Configuration &,boost::uuids::uuid const&>(uint64_t *a1, char **a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v5;
  unint64_t v6;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  void *v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t *v18;

  v5 = 0x6DB6DB6DB6DB6DB7 * ((a1[1] - *a1) >> 4);
  v6 = v5 + 1;
  if ((unint64_t)(v5 + 1) > 0x249249249249249)
    std::vector<CLMicroLocationProto::ConfidenceReason>::__throw_length_error[abi:ne180100]();
  if (0xDB6DB6DB6DB6DB6ELL * ((a1[2] - *a1) >> 4) > v6)
    v6 = 0xDB6DB6DB6DB6DB6ELL * ((a1[2] - *a1) >> 4);
  if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((a1[2] - *a1) >> 4)) >= 0x124924924924924)
    v10 = 0x249249249249249;
  else
    v10 = v6;
  v18 = a1 + 2;
  if (v10)
    v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CLMicroLocationConfigurationTable::Entry>>((uint64_t)(a1 + 2), v10);
  else
    v11 = 0;
  v14 = v11;
  v15 = &v11[112 * v5];
  v17 = &v11[112 * v10];
  std::allocator<CLMicroLocationConfigurationTable::Entry>::construct[abi:ne180100]<CLMicroLocationConfigurationTable::Entry,char const* const&,CLMicroLocationProto::Configuration &,boost::uuids::uuid const&>((uint64_t)(a1 + 2), (uint64_t)v15, a2, a3, a4);
  v16 = v15 + 112;
  std::vector<CLMicroLocationConfigurationTable::Entry>::__swap_out_circular_buffer(a1, &v14);
  v12 = a1[1];
  std::__split_buffer<CLMicroLocationConfigurationTable::Entry>::~__split_buffer(&v14);
  return v12;
}

void sub_241B2986C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<CLMicroLocationConfigurationTable::Entry>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

void std::allocator<CLMicroLocationConfigurationTable::Entry>::construct[abi:ne180100]<CLMicroLocationConfigurationTable::Entry,char const* const&,CLMicroLocationProto::Configuration &,boost::uuids::uuid const&>(uint64_t a1, uint64_t a2, char **a3, uint64_t a4, _QWORD *a5)
{
  void *__p[2];
  char v9;

  std::string::basic_string[abi:ne180100]<0>(__p, *a3);
  CLMicroLocationConfigurationTable::Entry::Entry(a2, __p, a4, *a5, a5[1]);
  if (v9 < 0)
    operator delete(__p[0]);
}

void sub_241B298E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

unsigned __int8 *std::__find_impl[abi:ne180100]<std::string *,std::string *,char const*,std::__identity>(unsigned __int8 *a1, unsigned __int8 *a2, const char **a3)
{
  unsigned __int8 *v3;
  const char *v5;
  size_t v6;
  unsigned __int8 *v7;

  v3 = a1;
  if (a1 != a2)
  {
    v5 = *a3;
    v6 = strlen(*a3);
    while (1)
    {
      if ((char)v3[23] < 0)
      {
        if (v6 == *((_QWORD *)v3 + 1))
        {
          if (v6 == -1)
LABEL_14:
            std::string::__throw_out_of_range[abi:ne180100]();
          v7 = *(unsigned __int8 **)v3;
LABEL_10:
          if (!memcmp(v7, v5, v6))
            return v3;
        }
      }
      else if (v6 == v3[23])
      {
        v7 = v3;
        if (v6 == -1)
          goto LABEL_14;
        goto LABEL_10;
      }
      v3 += 24;
      if (v3 == a2)
        return a2;
    }
  }
  return v3;
}

void CLMicroLocationFingerprintConfiguration::getCustomLoiRecordingConfigurationFromSettings(uint64_t *a1@<X8>)
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;

  CLMicroLocationFingerprintConfiguration::getRecordingConfigurationFromSettings((uint64_t)a1);
  +[ULDefaultsSingleton shared](ULDefaultsSingleton, "shared");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "defaultsDictionary");
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "ULMinimumTotalNumberOfMeasurementsForFingerprintInCustomLoi");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "objectForKey:", v5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  if (v6 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
    v7 = objc_msgSend(v6, "unsignedLongValue");
  else
    v7 = objc_msgSend(&unk_2511EDF60, "unsignedLongValue");
  v8 = v7;

  *a1 = v8;
}

void sub_241B29A80(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v2;
  void *v3;
  void *v4;

  std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>>>::~__hash_table(v1 + 16);
  _Unwind_Resume(a1);
}

char *CLMicroLocationFingerprintConfiguration::getRecordingConfigurationFromSettings@<X0>(uint64_t a1@<X8>)
{
  char v3;
  uint64_t v4;
  char v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  ULHomeNearbyRangingSupport *v32;
  char isUwbRangingSupportedOnDevice;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  void *v41;
  void *v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  char *v48;
  char *result;
  char v50;
  uint64_t v51;
  unsigned int v52;
  _BYTE v53[7];
  _BYTE v54[7];
  _BYTE v55[7];
  unsigned int *v56;

  *(_QWORD *)a1 = ULSettings::get<ULSettings::MinimumTotalNumberOfMeasurementsForFingerprint>();
  *(_BYTE *)(a1 + 8) = ULSettings::get<ULSettings::ProcessOffChannelRssiAP>();
  v3 = ULSettings::get<ULSettings::ProcessInvalidRssiAP>();
  *(_OWORD *)(a1 + 16) = 0u;
  v4 = a1 + 16;
  *(_BYTE *)(v4 - 7) = v3;
  *(_OWORD *)(v4 + 16) = 0u;
  *(_DWORD *)(v4 + 32) = 1065353216;
  v5 = ULSettings::get<ULSettings::MeasurementProcessingWifiRssiEnable>();
  +[ULDefaultsSingleton shared](ULDefaultsSingleton, "shared");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "defaultsDictionary");
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "ULMinimumWiFiDurationForFingerprintRecording");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "objectForKey:", v8);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  if (v9 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
    objc_msgSend(v9, "doubleValue");
  else
    objc_msgSend(&unk_2511ECF78, "doubleValue");
  v11 = v10;

  +[ULDefaultsSingleton shared](ULDefaultsSingleton, "shared");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v12, "defaultsDictionary");
  v13 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "ULMinimumWiFiNumberOfMeasurementsForFingerprintRecording");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v13, "objectForKey:", v14);
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  if (v15 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
    v16 = objc_msgSend(v15, "unsignedLongValue");
  else
    v16 = objc_msgSend(&unk_2511EDF60, "unsignedLongValue");
  v51 = v16;

  v17 = ULSettings::get<ULSettings::MaximumNumberOfWifiRssiMeasurementsForFingerprint>();
  v50 = ULSettings::get<ULSettings::MeasurementProcessingBleLeechEnable>();
  +[ULDefaultsSingleton shared](ULDefaultsSingleton, "shared");
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v18, "defaultsDictionary");
  v19 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "ULMinimumBleDurationForFingerprintRecording");
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v19, "objectForKey:", v20);
  v21 = (void *)objc_claimAutoreleasedReturnValue();
  if (v21 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
    objc_msgSend(v21, "doubleValue");
  else
    objc_msgSend(&unk_2511EDFA8, "doubleValue");
  v23 = v22;

  +[ULDefaultsSingleton shared](ULDefaultsSingleton, "shared");
  v24 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v24, "defaultsDictionary");
  v25 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "ULMinimumBleNumberOfMeasurementsForFingerprintRecording");
  v26 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v25, "objectForKey:", v26);
  v27 = (void *)objc_claimAutoreleasedReturnValue();
  if (v27 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
    v28 = objc_msgSend(v27, "unsignedLongValue");
  else
    v28 = objc_msgSend(&unk_2511EDFA8, "unsignedLongValue");
  v29 = v28;

  v30 = ULSettings::get<ULSettings::MaximumNumberOfBleRssiMeasurementsForFingerprint>();
  v31 = v5;
  v32 = (ULHomeNearbyRangingSupport *)ULSettings::get<ULSettings::MeasurementProcessingUwbRangeEnable>();
  if ((_DWORD)v32)
    isUwbRangingSupportedOnDevice = ULHomeNearbyRangingSupport::isUwbRangingSupportedOnDevice(v32);
  else
    isUwbRangingSupportedOnDevice = 0;
  +[ULDefaultsSingleton shared](ULDefaultsSingleton, "shared");
  v34 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v34, "defaultsDictionary");
  v35 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "ULMinimumUwbRangeDurationForFingerprintRecording");
  v36 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v35, "objectForKey:", v36);
  v37 = (void *)objc_claimAutoreleasedReturnValue();
  if (v37 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
    objc_msgSend(v37, "doubleValue");
  else
    objc_msgSend(&unk_2511EDFA8, "doubleValue");
  v39 = v38;

  +[ULDefaultsSingleton shared](ULDefaultsSingleton, "shared");
  v40 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v40, "defaultsDictionary");
  v41 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "ULMinimumUwbNumberOfMeasurementsForFingerprintRecording");
  v42 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v41, "objectForKey:", v42);
  v43 = (void *)objc_claimAutoreleasedReturnValue();
  if (v43 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
    v44 = objc_msgSend(v43, "unsignedLongValue");
  else
    v44 = objc_msgSend(&unk_2511EDFA8, "unsignedLongValue");
  v45 = v44;

  v46 = ULSettings::get<ULSettings::MaximumNumberOfUwbRangeMeasurementsForFingerprint>();
  v52 = 1;
  v56 = &v52;
  v47 = std::__hash_table<std::__hash_value_type<CLMicroLocationProto::DataType,CLMicroLocationFingerprintConfiguration::MeasurementTypeConfiguration>,std::__unordered_map_hasher<CLMicroLocationProto::DataType,std::__hash_value_type<CLMicroLocationProto::DataType,CLMicroLocationFingerprintConfiguration::MeasurementTypeConfiguration>,std::hash<CLMicroLocationProto::DataType>,std::equal_to<CLMicroLocationProto::DataType>,true>,std::__unordered_map_equal<CLMicroLocationProto::DataType,std::__hash_value_type<CLMicroLocationProto::DataType,CLMicroLocationFingerprintConfiguration::MeasurementTypeConfiguration>,std::equal_to<CLMicroLocationProto::DataType>,std::hash<CLMicroLocationProto::DataType>,true>,std::allocator<std::__hash_value_type<CLMicroLocationProto::DataType,CLMicroLocationFingerprintConfiguration::MeasurementTypeConfiguration>>>::__emplace_unique_key_args<CLMicroLocationProto::DataType,std::piecewise_construct_t const&,std::tuple<CLMicroLocationProto::DataType&&>,std::tuple<>>(v4, &v52, (uint64_t)&std::piecewise_construct, &v56);
  v47[24] = v31;
  *(_DWORD *)(v47 + 25) = *(_DWORD *)v55;
  *((_DWORD *)v47 + 7) = *(_DWORD *)&v55[3];
  *((_QWORD *)v47 + 4) = v11;
  *((_QWORD *)v47 + 5) = v51;
  *((_QWORD *)v47 + 6) = v17;
  v52 = 5;
  v56 = &v52;
  v48 = std::__hash_table<std::__hash_value_type<CLMicroLocationProto::DataType,CLMicroLocationFingerprintConfiguration::MeasurementTypeConfiguration>,std::__unordered_map_hasher<CLMicroLocationProto::DataType,std::__hash_value_type<CLMicroLocationProto::DataType,CLMicroLocationFingerprintConfiguration::MeasurementTypeConfiguration>,std::hash<CLMicroLocationProto::DataType>,std::equal_to<CLMicroLocationProto::DataType>,true>,std::__unordered_map_equal<CLMicroLocationProto::DataType,std::__hash_value_type<CLMicroLocationProto::DataType,CLMicroLocationFingerprintConfiguration::MeasurementTypeConfiguration>,std::equal_to<CLMicroLocationProto::DataType>,std::hash<CLMicroLocationProto::DataType>,true>,std::allocator<std::__hash_value_type<CLMicroLocationProto::DataType,CLMicroLocationFingerprintConfiguration::MeasurementTypeConfiguration>>>::__emplace_unique_key_args<CLMicroLocationProto::DataType,std::piecewise_construct_t const&,std::tuple<CLMicroLocationProto::DataType&&>,std::tuple<>>(v4, &v52, (uint64_t)&std::piecewise_construct, &v56);
  v48[24] = v50;
  *(_DWORD *)(v48 + 25) = *(_DWORD *)v54;
  *((_DWORD *)v48 + 7) = *(_DWORD *)&v54[3];
  *((_QWORD *)v48 + 4) = v23;
  *((_QWORD *)v48 + 5) = v29;
  *((_QWORD *)v48 + 6) = v30;
  v52 = 6;
  v56 = &v52;
  result = std::__hash_table<std::__hash_value_type<CLMicroLocationProto::DataType,CLMicroLocationFingerprintConfiguration::MeasurementTypeConfiguration>,std::__unordered_map_hasher<CLMicroLocationProto::DataType,std::__hash_value_type<CLMicroLocationProto::DataType,CLMicroLocationFingerprintConfiguration::MeasurementTypeConfiguration>,std::hash<CLMicroLocationProto::DataType>,std::equal_to<CLMicroLocationProto::DataType>,true>,std::__unordered_map_equal<CLMicroLocationProto::DataType,std::__hash_value_type<CLMicroLocationProto::DataType,CLMicroLocationFingerprintConfiguration::MeasurementTypeConfiguration>,std::equal_to<CLMicroLocationProto::DataType>,std::hash<CLMicroLocationProto::DataType>,true>,std::allocator<std::__hash_value_type<CLMicroLocationProto::DataType,CLMicroLocationFingerprintConfiguration::MeasurementTypeConfiguration>>>::__emplace_unique_key_args<CLMicroLocationProto::DataType,std::piecewise_construct_t const&,std::tuple<CLMicroLocationProto::DataType&&>,std::tuple<>>(v4, &v52, (uint64_t)&std::piecewise_construct, &v56);
  result[24] = isUwbRangingSupportedOnDevice;
  *(_DWORD *)(result + 25) = *(_DWORD *)v53;
  *((_DWORD *)result + 7) = *(_DWORD *)&v53[3];
  *((_QWORD *)result + 4) = v39;
  *((_QWORD *)result + 5) = v45;
  *((_QWORD *)result + 6) = v46;
  return result;
}

void sub_241B2A008(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, _Unwind_Exception *exception_object)
{
  uint64_t v11;
  void *v12;
  void *v13;
  void *v14;

  std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>>>::~__hash_table(v11);
  _Unwind_Resume(a1);
}

uint64_t ULSettings::get<ULSettings::MinimumTotalNumberOfMeasurementsForFingerprint>()
{
  void *v0;
  void *v1;
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;

  +[ULDefaultsSingleton shared](ULDefaultsSingleton, "shared");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "defaultsDictionary");
  v1 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "ULMinimumTotalNumberOfMeasurementsForFingerprint");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "objectForKey:", v2);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  if (v3 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
    v4 = objc_msgSend(v3, "unsignedLongValue");
  else
    v4 = objc_msgSend(&unk_2511EDF78, "unsignedLongValue");
  v5 = v4;

  return v5;
}

void sub_241B2A230(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

uint64_t ULSettings::get<ULSettings::ProcessOffChannelRssiAP>()
{
  void *v0;
  void *v1;
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;

  +[ULDefaultsSingleton shared](ULDefaultsSingleton, "shared");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "defaultsDictionary");
  v1 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "ULProcessOffChannelRssiAP");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "objectForKey:", v2);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  if (v3 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
    v4 = objc_msgSend(v3, "BOOLValue");
  else
    v4 = objc_msgSend(MEMORY[0x24BDBD1C0], "BOOLValue");
  v5 = v4;

  return v5;
}

void sub_241B2A32C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

uint64_t ULSettings::get<ULSettings::ProcessInvalidRssiAP>()
{
  void *v0;
  void *v1;
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;

  +[ULDefaultsSingleton shared](ULDefaultsSingleton, "shared");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "defaultsDictionary");
  v1 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "ULProcessInvalidRssiAP");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "objectForKey:", v2);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  if (v3 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
    v4 = objc_msgSend(v3, "BOOLValue");
  else
    v4 = objc_msgSend(MEMORY[0x24BDBD1C8], "BOOLValue");
  v5 = v4;

  return v5;
}

void sub_241B2A428(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_241B2A524(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

uint64_t ULSettings::get<ULSettings::MaximumNumberOfWifiRssiMeasurementsForFingerprint>()
{
  void *v0;
  void *v1;
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;

  +[ULDefaultsSingleton shared](ULDefaultsSingleton, "shared");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "defaultsDictionary");
  v1 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "ULMaximumNumberOfWifiRssiMeasurementsForFingerprint");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "objectForKey:", v2);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  if (v3 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
    v4 = objc_msgSend(v3, "unsignedLongValue");
  else
    v4 = objc_msgSend(&unk_2511EDF90, "unsignedLongValue");
  v5 = v4;

  return v5;
}

void sub_241B2A620(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_241B2A71C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

uint64_t ULSettings::get<ULSettings::MaximumNumberOfBleRssiMeasurementsForFingerprint>()
{
  void *v0;
  void *v1;
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;

  +[ULDefaultsSingleton shared](ULDefaultsSingleton, "shared");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "defaultsDictionary");
  v1 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "ULMaximumNumberOfBleRssiMeasurementsForFingerprint");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "objectForKey:", v2);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  if (v3 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
    v4 = objc_msgSend(v3, "unsignedLongValue");
  else
    v4 = objc_msgSend(&unk_2511EDF90, "unsignedLongValue");
  v5 = v4;

  return v5;
}

void sub_241B2A818(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_241B2A914(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

uint64_t ULSettings::get<ULSettings::MaximumNumberOfUwbRangeMeasurementsForFingerprint>()
{
  void *v0;
  void *v1;
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;

  +[ULDefaultsSingleton shared](ULDefaultsSingleton, "shared");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "defaultsDictionary");
  v1 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "ULMaximumNumberOfUwbRangeMeasurementsForFingerprint");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "objectForKey:", v2);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  if (v3 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
    v4 = objc_msgSend(v3, "unsignedLongValue");
  else
    v4 = objc_msgSend(&unk_2511EDF90, "unsignedLongValue");
  v5 = v4;

  return v5;
}

void sub_241B2AA10(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

char *CLMicroLocationFingerprintConfiguration::getLocalizingConfigurationFromSettings@<X0>(uint64_t a1@<X8>)
{
  char v3;
  uint64_t v4;
  char v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  ULHomeNearbyRangingSupport *v32;
  char isUwbRangingSupportedOnDevice;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  void *v41;
  void *v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  char *v48;
  char *result;
  char v50;
  uint64_t v51;
  unsigned int v52;
  _BYTE v53[7];
  _BYTE v54[7];
  _BYTE v55[7];
  unsigned int *v56;

  *(_QWORD *)a1 = ULSettings::get<ULSettings::MinimumTotalNumberOfMeasurementsForFingerprint>();
  *(_BYTE *)(a1 + 8) = ULSettings::get<ULSettings::ProcessOffChannelRssiAP>();
  v3 = ULSettings::get<ULSettings::ProcessInvalidRssiAP>();
  *(_OWORD *)(a1 + 16) = 0u;
  v4 = a1 + 16;
  *(_BYTE *)(v4 - 7) = v3;
  *(_OWORD *)(v4 + 16) = 0u;
  *(_DWORD *)(v4 + 32) = 1065353216;
  v5 = ULSettings::get<ULSettings::MeasurementProcessingWifiRssiEnable>();
  +[ULDefaultsSingleton shared](ULDefaultsSingleton, "shared");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "defaultsDictionary");
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "ULMinimumWiFiDurationForFingerprintLocalizing");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "objectForKey:", v8);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  if (v9 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
    objc_msgSend(v9, "doubleValue");
  else
    objc_msgSend(&unk_2511ECF78, "doubleValue");
  v11 = v10;

  +[ULDefaultsSingleton shared](ULDefaultsSingleton, "shared");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v12, "defaultsDictionary");
  v13 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "ULMinimumWiFiNumberOfMeasurementsForFingerprintLocalizing");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v13, "objectForKey:", v14);
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  if (v15 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
    v16 = objc_msgSend(v15, "unsignedLongValue");
  else
    v16 = objc_msgSend(&unk_2511EDF60, "unsignedLongValue");
  v51 = v16;

  v17 = ULSettings::get<ULSettings::MaximumNumberOfWifiRssiMeasurementsForFingerprint>();
  v50 = ULSettings::get<ULSettings::MeasurementProcessingBleLeechEnable>();
  +[ULDefaultsSingleton shared](ULDefaultsSingleton, "shared");
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v18, "defaultsDictionary");
  v19 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "ULMinimumBleDurationForFingerprintLocalizing");
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v19, "objectForKey:", v20);
  v21 = (void *)objc_claimAutoreleasedReturnValue();
  if (v21 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
    objc_msgSend(v21, "doubleValue");
  else
    objc_msgSend(&unk_2511EDFA8, "doubleValue");
  v23 = v22;

  +[ULDefaultsSingleton shared](ULDefaultsSingleton, "shared");
  v24 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v24, "defaultsDictionary");
  v25 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "ULMinimumBleNumberOfMeasurementsForFingerprintLocalizing");
  v26 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v25, "objectForKey:", v26);
  v27 = (void *)objc_claimAutoreleasedReturnValue();
  if (v27 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
    v28 = objc_msgSend(v27, "unsignedLongValue");
  else
    v28 = objc_msgSend(&unk_2511EDFA8, "unsignedLongValue");
  v29 = v28;

  v30 = ULSettings::get<ULSettings::MaximumNumberOfBleRssiMeasurementsForFingerprint>();
  v31 = v5;
  v32 = (ULHomeNearbyRangingSupport *)ULSettings::get<ULSettings::MeasurementProcessingUwbRangeEnable>();
  if ((_DWORD)v32)
    isUwbRangingSupportedOnDevice = ULHomeNearbyRangingSupport::isUwbRangingSupportedOnDevice(v32);
  else
    isUwbRangingSupportedOnDevice = 0;
  +[ULDefaultsSingleton shared](ULDefaultsSingleton, "shared");
  v34 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v34, "defaultsDictionary");
  v35 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "ULMinimumUwbRangeDurationForFingerprintLocalizing");
  v36 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v35, "objectForKey:", v36);
  v37 = (void *)objc_claimAutoreleasedReturnValue();
  if (v37 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
    objc_msgSend(v37, "doubleValue");
  else
    objc_msgSend(&unk_2511EDFA8, "doubleValue");
  v39 = v38;

  +[ULDefaultsSingleton shared](ULDefaultsSingleton, "shared");
  v40 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v40, "defaultsDictionary");
  v41 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "ULMinimumUwbNumberOfMeasurementsForFingerprintLocalizing");
  v42 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v41, "objectForKey:", v42);
  v43 = (void *)objc_claimAutoreleasedReturnValue();
  if (v43 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
    v44 = objc_msgSend(v43, "unsignedLongValue");
  else
    v44 = objc_msgSend(&unk_2511EDFA8, "unsignedLongValue");
  v45 = v44;

  v46 = ULSettings::get<ULSettings::MaximumNumberOfUwbRangeMeasurementsForFingerprint>();
  v52 = 1;
  v56 = &v52;
  v47 = std::__hash_table<std::__hash_value_type<CLMicroLocationProto::DataType,CLMicroLocationFingerprintConfiguration::MeasurementTypeConfiguration>,std::__unordered_map_hasher<CLMicroLocationProto::DataType,std::__hash_value_type<CLMicroLocationProto::DataType,CLMicroLocationFingerprintConfiguration::MeasurementTypeConfiguration>,std::hash<CLMicroLocationProto::DataType>,std::equal_to<CLMicroLocationProto::DataType>,true>,std::__unordered_map_equal<CLMicroLocationProto::DataType,std::__hash_value_type<CLMicroLocationProto::DataType,CLMicroLocationFingerprintConfiguration::MeasurementTypeConfiguration>,std::equal_to<CLMicroLocationProto::DataType>,std::hash<CLMicroLocationProto::DataType>,true>,std::allocator<std::__hash_value_type<CLMicroLocationProto::DataType,CLMicroLocationFingerprintConfiguration::MeasurementTypeConfiguration>>>::__emplace_unique_key_args<CLMicroLocationProto::DataType,std::piecewise_construct_t const&,std::tuple<CLMicroLocationProto::DataType&&>,std::tuple<>>(v4, &v52, (uint64_t)&std::piecewise_construct, &v56);
  v47[24] = v31;
  *(_DWORD *)(v47 + 25) = *(_DWORD *)v55;
  *((_DWORD *)v47 + 7) = *(_DWORD *)&v55[3];
  *((_QWORD *)v47 + 4) = v11;
  *((_QWORD *)v47 + 5) = v51;
  *((_QWORD *)v47 + 6) = v17;
  v52 = 5;
  v56 = &v52;
  v48 = std::__hash_table<std::__hash_value_type<CLMicroLocationProto::DataType,CLMicroLocationFingerprintConfiguration::MeasurementTypeConfiguration>,std::__unordered_map_hasher<CLMicroLocationProto::DataType,std::__hash_value_type<CLMicroLocationProto::DataType,CLMicroLocationFingerprintConfiguration::MeasurementTypeConfiguration>,std::hash<CLMicroLocationProto::DataType>,std::equal_to<CLMicroLocationProto::DataType>,true>,std::__unordered_map_equal<CLMicroLocationProto::DataType,std::__hash_value_type<CLMicroLocationProto::DataType,CLMicroLocationFingerprintConfiguration::MeasurementTypeConfiguration>,std::equal_to<CLMicroLocationProto::DataType>,std::hash<CLMicroLocationProto::DataType>,true>,std::allocator<std::__hash_value_type<CLMicroLocationProto::DataType,CLMicroLocationFingerprintConfiguration::MeasurementTypeConfiguration>>>::__emplace_unique_key_args<CLMicroLocationProto::DataType,std::piecewise_construct_t const&,std::tuple<CLMicroLocationProto::DataType&&>,std::tuple<>>(v4, &v52, (uint64_t)&std::piecewise_construct, &v56);
  v48[24] = v50;
  *(_DWORD *)(v48 + 25) = *(_DWORD *)v54;
  *((_DWORD *)v48 + 7) = *(_DWORD *)&v54[3];
  *((_QWORD *)v48 + 4) = v23;
  *((_QWORD *)v48 + 5) = v29;
  *((_QWORD *)v48 + 6) = v30;
  v52 = 6;
  v56 = &v52;
  result = std::__hash_table<std::__hash_value_type<CLMicroLocationProto::DataType,CLMicroLocationFingerprintConfiguration::MeasurementTypeConfiguration>,std::__unordered_map_hasher<CLMicroLocationProto::DataType,std::__hash_value_type<CLMicroLocationProto::DataType,CLMicroLocationFingerprintConfiguration::MeasurementTypeConfiguration>,std::hash<CLMicroLocationProto::DataType>,std::equal_to<CLMicroLocationProto::DataType>,true>,std::__unordered_map_equal<CLMicroLocationProto::DataType,std::__hash_value_type<CLMicroLocationProto::DataType,CLMicroLocationFingerprintConfiguration::MeasurementTypeConfiguration>,std::equal_to<CLMicroLocationProto::DataType>,std::hash<CLMicroLocationProto::DataType>,true>,std::allocator<std::__hash_value_type<CLMicroLocationProto::DataType,CLMicroLocationFingerprintConfiguration::MeasurementTypeConfiguration>>>::__emplace_unique_key_args<CLMicroLocationProto::DataType,std::piecewise_construct_t const&,std::tuple<CLMicroLocationProto::DataType&&>,std::tuple<>>(v4, &v52, (uint64_t)&std::piecewise_construct, &v56);
  result[24] = isUwbRangingSupportedOnDevice;
  *(_DWORD *)(result + 25) = *(_DWORD *)v53;
  *((_DWORD *)result + 7) = *(_DWORD *)&v53[3];
  *((_QWORD *)result + 4) = v39;
  *((_QWORD *)result + 5) = v45;
  *((_QWORD *)result + 6) = v46;
  return result;
}

void sub_241B2AF88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, _Unwind_Exception *exception_object)
{
  uint64_t v11;
  void *v12;
  void *v13;
  void *v14;

  std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>>>::~__hash_table(v11);
  _Unwind_Resume(a1);
}

uint64_t CLMicroLocationFingerprint::Measurement::HashMeasurement::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v4;
  uint64_t v5;
  uint64_t **v6;

  v5 = *(unsigned int *)(a2 + 8);
  v4 = &v5;
  v2 = *(unsigned int *)(a2 + 40);
  if ((_DWORD)v2 == -1)
    std::__throw_bad_variant_access[abi:ne180100]();
  v6 = &v4;
  ((void (*)(uint64_t ***, uint64_t))off_2511DA168[v2])(&v6, a2 + 16);
  return v5;
}

uint64_t CLMicroLocationFingerprint::Measurement::PredicateMeasurement::operator()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_DWORD *)(a2 + 8) == *(_DWORD *)(a3 + 8))
    return std::operator==[abi:ne180100]<unsigned long long,boost::uuids::uuid,std::string>(a2 + 16, a3 + 16);
  else
    return 0;
}

uint64_t std::operator==[abi:ne180100]<unsigned long long,boost::uuids::uuid,std::string>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  _BOOL4 v6;
  _BOOL4 v7;
  uint64_t result;
  BOOL v9;
  char v10;
  char *v11;

  v4 = *(unsigned int *)(a1 + 24);
  v5 = *(_DWORD *)(a2 + 24);
  v6 = v5 == v4;
  v9 = v5 == -1;
  v7 = v5 == -1;
  if (v9)
    v6 = 0;
  if ((_DWORD)v4 == -1)
    result = v7;
  else
    result = v6;
  v9 = (_DWORD)v4 == -1 || !v6;
  if (!v9)
  {
    v11 = &v10;
    return ((uint64_t (*)(char **, uint64_t))off_2511DA180[v4])(&v11, a1);
  }
  return result;
}

_QWORD *CLMicroLocationFingerprint::Measurement::getHumanReadableDeviceId(CLMicroLocationFingerprint::Measurement *this)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *result;
  uint64_t v14;
  _BYTE *v15;
  _QWORD v16[3];
  _QWORD *v17;
  _QWORD v18[3];
  _QWORD *v19;
  _QWORD v20[3];
  _QWORD *v21;
  _BYTE v22[24];
  _BYTE *v23;
  _BYTE v24[24];
  _BYTE *v25;
  _BYTE v26[24];
  _BYTE *v27;
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  v21 = v20;
  v19 = v18;
  v20[0] = &off_2511DA210;
  v16[0] = &off_2511DA330;
  v17 = v16;
  v18[0] = &off_2511DA2A0;
  CLMicroLocationUtils::DeviceIdVisitor<std::string>::DeviceIdVisitor((uint64_t)v22, (uint64_t)v20, (uint64_t)v18, (uint64_t)v16);
  v2 = v17;
  if (v17 == v16)
  {
    v3 = 4;
    v2 = v16;
  }
  else
  {
    if (!v17)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  v4 = v19;
  if (v19 == v18)
  {
    v5 = 4;
    v4 = v18;
  }
  else
  {
    if (!v19)
      goto LABEL_11;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_11:
  v6 = v21;
  if (v21 == v20)
  {
    v7 = 4;
    v6 = v20;
  }
  else
  {
    if (!v21)
      goto LABEL_16;
    v7 = 5;
  }
  (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_16:
  v8 = *((unsigned int *)this + 10);
  if ((_DWORD)v8 == -1)
    std::__throw_bad_variant_access[abi:ne180100]();
  v15 = v22;
  ((void (*)(_BYTE **, char *))off_2511DA198[v8])(&v15, (char *)this + 16);
  v9 = v27;
  if (v27 == v26)
  {
    v10 = 4;
    v9 = v26;
  }
  else
  {
    if (!v27)
      goto LABEL_22;
    v10 = 5;
  }
  (*(void (**)(void))(*v9 + 8 * v10))();
LABEL_22:
  v11 = v25;
  if (v25 == v24)
  {
    v12 = 4;
    v11 = v24;
  }
  else
  {
    if (!v25)
      goto LABEL_27;
    v12 = 5;
  }
  (*(void (**)(void))(*v11 + 8 * v12))();
LABEL_27:
  result = v23;
  if (v23 == v22)
  {
    v14 = 4;
    result = v22;
  }
  else
  {
    if (!v23)
      return result;
    v14 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v14))();
}

void sub_241B2B3D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13, char a14, uint64_t a15, uint64_t a16, char *a17, char a18, uint64_t a19, uint64_t a20,char *a21,char a22)
{
  char *v22;
  char *v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;

  v24 = a13;
  if (a13 == v22)
  {
    v25 = 4;
    v24 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v25 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v24 + 8 * v25))();
LABEL_6:
  v26 = a17;
  if (a17 == &a14)
  {
    v27 = 4;
    v26 = &a14;
  }
  else
  {
    if (!a17)
      goto LABEL_11;
    v27 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v26 + 8 * v27))();
LABEL_11:
  v28 = a21;
  if (a21 == &a18)
  {
    v29 = 4;
    v28 = &a18;
  }
  else
  {
    if (!a21)
      goto LABEL_16;
    v29 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v28 + 8 * v29))();
LABEL_16:
  _Unwind_Resume(exception_object);
}

_QWORD *CLMicroLocationUtils::DeviceIdVisitor<std::string>::~DeviceIdVisitor(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;

  v2 = a1 + 8;
  v3 = (_QWORD *)a1[11];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  v5 = (_QWORD *)a1[7];
  if (v5 == a1 + 4)
  {
    v6 = 4;
    v5 = a1 + 4;
  }
  else
  {
    if (!v5)
      goto LABEL_11;
    v6 = 5;
  }
  (*(void (**)(void))(*v5 + 8 * v6))();
LABEL_11:
  v7 = (_QWORD *)a1[3];
  if (v7 == a1)
  {
    v8 = 4;
    v7 = a1;
    goto LABEL_15;
  }
  if (v7)
  {
    v8 = 5;
LABEL_15:
    (*(void (**)(void))(*v7 + 8 * v8))();
  }
  return a1;
}

_QWORD *CLMicroLocationFingerprint::Measurement::toProtobufFingerprintMeasurement@<X0>(CLMicroLocationFingerprint::Measurement *this@<X0>, uint64_t a2@<X8>)
{
  unsigned int v5;
  int v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *result;
  uint64_t v20;
  _BYTE *v21;
  _QWORD v22[3];
  _QWORD *v23;
  _QWORD v24[3];
  _QWORD *v25;
  _QWORD v26[3];
  _QWORD *v27;
  _BYTE v28[24];
  _BYTE *v29;
  _BYTE v30[24];
  _BYTE *v31;
  _BYTE v32[24];
  _BYTE *v33;
  uint64_t v34;

  v34 = *MEMORY[0x24BDAC8D0];
  CLMicroLocationProto::FingerprintMeasurement::FingerprintMeasurement((_QWORD *)a2);
  v5 = *((_DWORD *)this + 2);
  if (!CLMicroLocationProto::DataType_IsValid((CLMicroLocationProto *)v5))
    __assert_rtn("set_datatype", "microlocation.pb.h", 11137, "::CLMicroLocationProto::DataType_IsValid(value)");
  v6 = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a2 + 16) = v5;
  *(_QWORD *)(a2 + 8) = *(_QWORD *)this;
  *(_DWORD *)(a2 + 20) = *((_DWORD *)this + 3);
  *(_DWORD *)(a2 + 36) = v6 | 0xF;
  v7 = *(_QWORD **)(a2 + 24);
  if (!v7)
  {
    v7 = (_QWORD *)operator new();
    CLMicroLocationProto::DeviceId::DeviceId(v7);
    *(_QWORD *)(a2 + 24) = v7;
  }
  v26[0] = &off_2511DA3C0;
  v26[1] = v7;
  v27 = v26;
  v24[0] = &off_2511DA450;
  v24[1] = v7;
  v25 = v24;
  v22[0] = &off_2511DA4E0;
  v22[1] = v7;
  v23 = v22;
  CLMicroLocationUtils::DeviceIdVisitor<void>::DeviceIdVisitor((uint64_t)v28, (uint64_t)v26, (uint64_t)v24, (uint64_t)v22);
  v8 = v23;
  if (v23 == v22)
  {
    v9 = 4;
    v8 = v22;
  }
  else
  {
    if (!v23)
      goto LABEL_9;
    v9 = 5;
  }
  (*(void (**)(void))(*v8 + 8 * v9))();
LABEL_9:
  v10 = v25;
  if (v25 == v24)
  {
    v11 = 4;
    v10 = v24;
  }
  else
  {
    if (!v25)
      goto LABEL_14;
    v11 = 5;
  }
  (*(void (**)(void))(*v10 + 8 * v11))();
LABEL_14:
  v12 = v27;
  if (v27 == v26)
  {
    v13 = 4;
    v12 = v26;
  }
  else
  {
    if (!v27)
      goto LABEL_19;
    v13 = 5;
  }
  (*(void (**)(void))(*v12 + 8 * v13))();
LABEL_19:
  v14 = *((unsigned int *)this + 10);
  if ((_DWORD)v14 == -1)
    std::__throw_bad_variant_access[abi:ne180100]();
  v21 = v28;
  ((void (*)(_BYTE **, char *))off_2511DA1B0[v14])(&v21, (char *)this + 16);
  v15 = v33;
  if (v33 == v32)
  {
    v16 = 4;
    v15 = v32;
  }
  else
  {
    if (!v33)
      goto LABEL_25;
    v16 = 5;
  }
  (*(void (**)(void))(*v15 + 8 * v16))();
LABEL_25:
  v17 = v31;
  if (v31 == v30)
  {
    v18 = 4;
    v17 = v30;
  }
  else
  {
    if (!v31)
      goto LABEL_30;
    v18 = 5;
  }
  (*(void (**)(void))(*v17 + 8 * v18))();
LABEL_30:
  result = v29;
  if (v29 == v28)
  {
    v20 = 4;
    result = v28;
  }
  else
  {
    if (!v29)
      return result;
    v20 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v20))();
}

void sub_241B2B7B0(_Unwind_Exception *a1)
{
  CLMicroLocationProto::FingerprintMeasurement *v1;
  uint64_t v2;

  MEMORY[0x2426A04D4](v2, 0x10A1C4000609EC7);
  CLMicroLocationProto::FingerprintMeasurement::~FingerprintMeasurement(v1);
  _Unwind_Resume(a1);
}

uint64_t CLMicroLocationFingerprint::Measurement::fromProtobuf@<X0>(CLMicroLocationFingerprint::Measurement *this@<X0>, const CLMicroLocationProto::Measurement *a2@<X1>, uint64_t a3@<X8>)
{
  int v5;
  uint64_t v6;
  CLMicroLocationProto::Measurement *v7;
  double MeasurementValue;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t **v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t **v17;
  float v18;
  uint64_t v20;
  _BYTE v21[32];
  std::string v22;
  int v23;
  __int128 v24;
  char v25;
  uint64_t v26;

  v26 = *MEMORY[0x24BDAC8D0];
  v5 = *((_DWORD *)this + 16);
  v6 = *((_QWORD *)this + 1);
  MeasurementValue = CLMicroLocationProtobufHelper::getMeasurementValue(this, a2);
  v22.__r_.__value_.__r.__words[0] = 0;
  v23 = 0;
  switch(v5)
  {
    case 1:
      v9 = *((_QWORD *)this + 2);
      if (!v9)
        v9 = *(_QWORD *)(CLMicroLocationProto::Measurement::default_instance(v7) + 16);
      *(_QWORD *)&v24 = *(_QWORD *)(v9 + 24);
      std::variant<unsigned long long,boost::uuids::uuid,std::string>::operator=[abi:ne180100]<unsigned long long,0,unsigned long long,0ul,0>((uint64_t)&v22, &v24);
      break;
    case 2:
      v10 = *((_QWORD *)this + 3);
      if (!v10)
        v10 = *(_QWORD *)(CLMicroLocationProto::Measurement::default_instance(v7) + 24);
      goto LABEL_19;
    case 3:
      v10 = *((_QWORD *)this + 4);
      if (!v10)
        v10 = *(_QWORD *)(CLMicroLocationProto::Measurement::default_instance(v7) + 32);
      goto LABEL_19;
    case 4:
      v10 = *((_QWORD *)this + 5);
      if (!v10)
        v10 = *(_QWORD *)(CLMicroLocationProto::Measurement::default_instance(v7) + 40);
      goto LABEL_19;
    case 5:
      v11 = *((_QWORD *)this + 6);
      if (!v11)
      {
        v7 = (CLMicroLocationProto::Measurement *)CLMicroLocationProto::Measurement::default_instance(v7);
        v11 = *((_QWORD *)v7 + 6);
      }
      if ((*(_BYTE *)(v11 + 64) & 0x80) != 0)
      {
        v16 = *((_QWORD *)this + 6);
        if (!v16)
          v16 = *(_QWORD *)(CLMicroLocationProto::Measurement::default_instance(v7) + 48);
        v17 = CLMicroLocationProtobufHelper::uuidFromProtobuf(*(uint64_t ***)(v16 + 48), &v24);
        if (v25)
        {
LABEL_29:
          std::variant<unsigned long long,boost::uuids::uuid,std::string>::operator=[abi:ne180100]<boost::uuids::uuid&,0,boost::uuids::uuid,1ul,0>((uint64_t)&v22, &v24);
        }
        else
        {
          v20 = *((_QWORD *)this + 6);
          if (!v20)
            v20 = *(_QWORD *)(CLMicroLocationProto::Measurement::default_instance((CLMicroLocationProto::Measurement *)v17)
                            + 48);
          std::__variant_detail::__assignment<std::__variant_detail::__traits<unsigned long long,boost::uuids::uuid,std::string>>::__assign_alt[abi:ne180100]<2ul,std::string,std::string const&>((uint64_t)&v22, &v22, *(std::string **)(v20 + 48));
        }
      }
      else
      {
        v12 = *((_QWORD *)this + 6);
        if (!v12)
        {
          v7 = (CLMicroLocationProto::Measurement *)CLMicroLocationProto::Measurement::default_instance(v7);
          v12 = *((_QWORD *)v7 + 6);
        }
        if ((*(_BYTE *)(v12 + 64) & 8) != 0)
        {
          v10 = *((_QWORD *)this + 6);
          if (!v10)
            v10 = *(_QWORD *)(CLMicroLocationProto::Measurement::default_instance(v7) + 48);
LABEL_19:
          std::__variant_detail::__assignment<std::__variant_detail::__traits<unsigned long long,boost::uuids::uuid,std::string>>::__assign_alt[abi:ne180100]<2ul,std::string,std::string const&>((uint64_t)&v22, &v22, *(std::string **)(v10 + 24));
        }
      }
      break;
    case 6:
      v13 = *((_QWORD *)this + 7);
      if (!v13)
        v13 = *(_QWORD *)(CLMicroLocationProto::Measurement::default_instance(v7) + 56);
      v14 = CLMicroLocationProtobufHelper::uuidFromProtobuf(*(uint64_t ***)(v13 + 32), &v24);
      if (v25)
        goto LABEL_29;
      v15 = *((_QWORD *)this + 7);
      if (!v15)
        v15 = *(_QWORD *)(CLMicroLocationProto::Measurement::default_instance((CLMicroLocationProto::Measurement *)v14)
                        + 56);
      std::__variant_detail::__assignment<std::__variant_detail::__traits<unsigned long long,boost::uuids::uuid,std::string>>::__assign_alt[abi:ne180100]<2ul,std::string,std::string const&>((uint64_t)&v22, &v22, *(std::string **)(v15 + 32));
      break;
    default:
      break;
  }
  std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<unsigned long long,boost::uuids::uuid,std::string>,(std::__variant_detail::_Trait)1>::__copy_constructor((uint64_t)v21, (uint64_t)&v22);
  v18 = MeasurementValue;
  *(_QWORD *)a3 = v6;
  *(_DWORD *)(a3 + 8) = v5;
  *(float *)(a3 + 12) = v18;
  std::__variant_detail::__move_constructor<std::__variant_detail::__traits<unsigned long long,boost::uuids::uuid,std::string>,(std::__variant_detail::_Trait)1>::__move_constructor(a3 + 16, (uint64_t)v21);
  std::__variant_detail::__dtor<std::__variant_detail::__traits<unsigned long long,boost::uuids::uuid,std::string>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)v21);
  return std::__variant_detail::__dtor<std::__variant_detail::__traits<unsigned long long,boost::uuids::uuid,std::string>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)&v22);
}

void sub_241B2BAB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  std::__variant_detail::__dtor<std::__variant_detail::__traits<unsigned long long,boost::uuids::uuid,std::string>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::variant<unsigned long long,boost::uuids::uuid,std::string>::operator=[abi:ne180100]<unsigned long long,0,unsigned long long,0ul,0>(uint64_t a1, _QWORD *a2)
{
  if (*(_DWORD *)(a1 + 24))
    std::__variant_detail::__assignment<std::__variant_detail::__traits<unsigned long long,boost::uuids::uuid,std::string>>::__emplace[abi:ne180100]<0ul,unsigned long long>(a1, a2);
  else
    *(_QWORD *)a1 = *a2;
  return a1;
}

uint64_t std::variant<unsigned long long,boost::uuids::uuid,std::string>::operator=[abi:ne180100]<boost::uuids::uuid&,0,boost::uuids::uuid,1ul,0>(uint64_t a1, _OWORD *a2)
{
  if (*(_DWORD *)(a1 + 24) == 1)
    *(_OWORD *)a1 = *a2;
  else
    std::__variant_detail::__assignment<std::__variant_detail::__traits<unsigned long long,boost::uuids::uuid,std::string>>::__emplace[abi:ne180100]<1ul,boost::uuids::uuid&>(a1, a2);
  return a1;
}

uint64_t CLMicroLocationFingerprint::Measurement::fromProtobuf@<X0>(CLMicroLocationFingerprint::Measurement *this@<X0>, uint64_t a2@<X8>)
{
  CLMicroLocationFingerprint::Measurement *v3;
  int v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t **v13;
  uint64_t v14;
  _BYTE v16[32];
  std::string v17;
  int v18;
  uint8_t buf[24];
  uint64_t v20;

  v3 = this;
  v20 = *MEMORY[0x24BDAC8D0];
  v5 = *((_DWORD *)this + 4);
  v6 = *((_QWORD *)this + 1);
  v7 = *((_DWORD *)this + 5);
  v17.__r_.__value_.__r.__words[0] = 0;
  v18 = 0;
  v8 = *((_QWORD *)this + 3);
  if (!v8)
  {
    this = (CLMicroLocationFingerprint::Measurement *)CLMicroLocationProto::FingerprintMeasurement::default_instance(this);
    v8 = *((_QWORD *)this + 3);
  }
  if ((*(_BYTE *)(v8 + 28) & 1) != 0)
  {
    v11 = *((_QWORD *)v3 + 3);
    if (!v11)
      v11 = *(_QWORD *)(CLMicroLocationProto::FingerprintMeasurement::default_instance(this) + 24);
    *(_QWORD *)buf = *(_QWORD *)(v11 + 8);
    std::variant<unsigned long long,boost::uuids::uuid,std::string>::operator=[abi:ne180100]<unsigned long long,0,unsigned long long,0ul,0>((uint64_t)&v17, buf);
  }
  else
  {
    v9 = *((_QWORD *)v3 + 3);
    if (!v9)
    {
      this = (CLMicroLocationFingerprint::Measurement *)CLMicroLocationProto::FingerprintMeasurement::default_instance(this);
      v9 = *((_QWORD *)this + 3);
    }
    if ((*(_BYTE *)(v9 + 28) & 2) != 0)
    {
      v12 = *((_QWORD *)v3 + 3);
      if (!v12)
        v12 = *(_QWORD *)(CLMicroLocationProto::FingerprintMeasurement::default_instance(this) + 24);
      v13 = CLMicroLocationProtobufHelper::uuidFromProtobuf(*(uint64_t ***)(v12 + 16), buf);
      if (buf[16])
      {
        std::variant<unsigned long long,boost::uuids::uuid,std::string>::operator=[abi:ne180100]<boost::uuids::uuid&,0,boost::uuids::uuid,1ul,0>((uint64_t)&v17, buf);
      }
      else
      {
        v14 = *((_QWORD *)v3 + 3);
        if (!v14)
          v14 = *(_QWORD *)(CLMicroLocationProto::FingerprintMeasurement::default_instance((CLMicroLocationProto::FingerprintMeasurement *)v13)
                          + 24);
        std::__variant_detail::__assignment<std::__variant_detail::__traits<unsigned long long,boost::uuids::uuid,std::string>>::__assign_alt[abi:ne180100]<2ul,std::string,std::string const&>((uint64_t)&v17, &v17, *(std::string **)(v14 + 16));
      }
    }
    else
    {
      if (onceToken_MicroLocation_Default != -1)
        dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_97);
      v10 = logObject_MicroLocation_Default;
      if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_2419D9000, v10, OS_LOG_TYPE_ERROR, "Unknown device id", buf, 2u);
      }
      std::__variant_detail::__assignment<std::__variant_detail::__traits<unsigned long long,boost::uuids::uuid,std::string>>::__assign_alt[abi:ne180100]<2ul,std::string,char const(&)[8]>((uint64_t)&v17, (uint64_t)&v17, (uint64_t)"Unknown");
    }
  }
  std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<unsigned long long,boost::uuids::uuid,std::string>,(std::__variant_detail::_Trait)1>::__copy_constructor((uint64_t)v16, (uint64_t)&v17);
  *(_QWORD *)a2 = v6;
  *(_DWORD *)(a2 + 8) = v5;
  *(_DWORD *)(a2 + 12) = v7;
  std::__variant_detail::__move_constructor<std::__variant_detail::__traits<unsigned long long,boost::uuids::uuid,std::string>,(std::__variant_detail::_Trait)1>::__move_constructor(a2 + 16, (uint64_t)v16);
  std::__variant_detail::__dtor<std::__variant_detail::__traits<unsigned long long,boost::uuids::uuid,std::string>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)v16);
  return std::__variant_detail::__dtor<std::__variant_detail::__traits<unsigned long long,boost::uuids::uuid,std::string>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)&v17);
}

void sub_241B2BD34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  std::__variant_detail::__dtor<std::__variant_detail::__traits<unsigned long long,boost::uuids::uuid,std::string>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t CLMicroLocationFingerprint::CLMicroLocationFingerprint(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  double v7;
  double v8;
  uint64_t *v9;
  _QWORD *i;
  int v12;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_QWORD *)(a1 + 88) = 0;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_DWORD *)(a1 + 96) = 1065353216;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_DWORD *)(a1 + 136) = 1065353216;
  *(_QWORD *)(a1 + 168) = 0;
  *(_QWORD *)(a1 + 176) = 0;
  *(_QWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 152) = 0;
  *(_DWORD *)(a1 + 160) = 0;
  v12 = 0;
  boost::uuids::detail::random_provider_base::random_provider_base((boost::uuids::detail::random_provider_base *)&v12);
  *(_QWORD *)(a1 + 40) = boost::uuids::random_generator_pure::operator()((uint64_t)&v12);
  *(_QWORD *)(a1 + 48) = v4;
  boost::uuids::detail::random_provider_base::destroy((boost::uuids::detail::random_provider_base *)&v12);
  *(_OWORD *)(a1 + 144) = xmmword_241BB92B0;
  v6 = *a2;
  v5 = a2[1];
  if (v6 != v5)
  {
    v7 = 1.79769313e308;
    v8 = 2.22507386e-308;
    do
    {
      v9 = *(uint64_t **)(v6 + 16);
      if (v9)
      {
        do
        {
          std::__hash_table<CLMicroLocationFingerprint::Measurement,CLMicroLocationFingerprint::Measurement::HashMeasurement,CLMicroLocationFingerprint::Measurement::PredicateMeasurement,std::allocator<CLMicroLocationFingerprint::Measurement>>::__emplace_unique_key_args<CLMicroLocationFingerprint::Measurement,CLMicroLocationFingerprint::Measurement const&>(a1, (uint64_t)(v9 + 2), (_OWORD *)v9 + 1);
          v9 = (uint64_t *)*v9;
        }
        while (v9);
        v7 = *(double *)(a1 + 144);
        v8 = *(double *)(a1 + 152);
      }
      if (*(double *)(v6 + 144) < v7)
        v7 = *(double *)(v6 + 144);
      *(double *)(a1 + 144) = v7;
      if (v8 < *(double *)(v6 + 152))
        v8 = *(double *)(v6 + 152);
      *(double *)(a1 + 152) = v8;
      v6 += 192;
    }
    while (v6 != v5);
  }
  for (i = (_QWORD *)(a1 + 16);
        ;
        CLMicroLocationFingerprint::updatePerMeasurementFields((CLMicroLocationFingerprint *)a1, (const CLMicroLocationFingerprint::Measurement *)(i + 2)))
  {
    i = (_QWORD *)*i;
    if (!i)
      break;
  }
  return a1;
}

void sub_241B2BEC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, char a11)
{
  uint64_t v11;
  uint64_t v12;
  void **v13;
  void *v15;

  boost::uuids::detail::random_provider_base::destroy((boost::uuids::detail::random_provider_base *)&a11);
  v15 = *v13;
  if (*v13)
  {
    *(_QWORD *)(v11 + 176) = v15;
    operator delete(v15);
  }
  std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>>>::~__hash_table(v12);
  std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>>>::~__hash_table(v11 + 64);
  std::__hash_table<CLMicroLocationFingerprint::Measurement,CLMicroLocationFingerprint::Measurement::HashMeasurement,CLMicroLocationFingerprint::Measurement::PredicateMeasurement,std::allocator<CLMicroLocationFingerprint::Measurement>>::~__hash_table(v11);
  _Unwind_Resume(a1);
}

uint64_t *CLMicroLocationFingerprint::updatePerMeasurementFields(CLMicroLocationFingerprint *this, const CLMicroLocationFingerprint::Measurement *a2)
{
  unsigned int *v4;
  _QWORD *v5;
  uint64_t *result;
  double v7;
  double v8;
  __int128 v9;

  v4 = (unsigned int *)((char *)a2 + 8);
  std::__hash_table<CLMicroLocationProto::DataType,std::hash<CLMicroLocationProto::DataType>,std::equal_to<CLMicroLocationProto::DataType>,std::allocator<CLMicroLocationProto::DataType>>::__emplace_unique_key_args<CLMicroLocationProto::DataType,CLMicroLocationProto::DataType const&>((uint64_t)this + 64, v4, v4);
  v5 = (_QWORD *)((char *)this + 104);
  if (std::__hash_table<std::__hash_value_type<unsigned int,unsigned int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned int>>>::find<unsigned int>(v5, v4))
  {
    result = std::__hash_table<std::__hash_value_type<unsigned int,unsigned int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned int>>>::find<unsigned int>(v5, v4);
    v7 = *(double *)a2;
    v8 = *((double *)result + 3);
    if (*(double *)a2 < v8)
      v8 = *(double *)a2;
    if (*((double *)result + 4) >= *(double *)a2)
      v7 = *((double *)result + 4);
    *((double *)result + 3) = v8;
    *((double *)result + 4) = v7;
  }
  else
  {
    *(_QWORD *)&v9 = *(_QWORD *)a2;
    *((_QWORD *)&v9 + 1) = v9;
    return (uint64_t *)std::__hash_table<std::__hash_value_type<CLMicroLocationProto::DataType,CLMicroLocationFingerprint::StartAndEndTimestamps>,std::__unordered_map_hasher<CLMicroLocationProto::DataType,std::__hash_value_type<CLMicroLocationProto::DataType,CLMicroLocationFingerprint::StartAndEndTimestamps>,std::hash<CLMicroLocationProto::DataType>,std::equal_to<CLMicroLocationProto::DataType>,true>,std::__unordered_map_equal<CLMicroLocationProto::DataType,std::__hash_value_type<CLMicroLocationProto::DataType,CLMicroLocationFingerprint::StartAndEndTimestamps>,std::equal_to<CLMicroLocationProto::DataType>,std::hash<CLMicroLocationProto::DataType>,true>,std::allocator<std::__hash_value_type<CLMicroLocationProto::DataType,CLMicroLocationFingerprint::StartAndEndTimestamps>>>::__emplace_unique_key_args<CLMicroLocationProto::DataType,CLMicroLocationProto::DataType const&,CLMicroLocationFingerprint::StartAndEndTimestamps>((uint64_t)v5, v4, v4, &v9);
  }
  return result;
}

void CLMicroLocationFingerprint::CLMicroLocationFingerprint(CLMicroLocationFingerprint *this, const CLMicroLocationProto::Fingerprint *a2)
{
  _QWORD *v4;
  _OWORD *v5;
  uint64_t *v6;
  int v7;
  NSObject *v8;
  uint64_t v9;
  CLMicroLocationFingerprint::Measurement **v10;
  uint64_t v11;
  uint64_t v12;
  CLMicroLocationFingerprint::Measurement **v13;
  uint64_t v14;
  _QWORD *i;
  __int128 v16;
  _BYTE v17[32];

  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_DWORD *)this + 8) = 1065353216;
  *(_OWORD *)((char *)this + 56) = 0u;
  v4 = (_QWORD *)((char *)this + 56);
  *(_OWORD *)((char *)this + 72) = 0u;
  *((_QWORD *)this + 11) = 0;
  *((_DWORD *)this + 24) = 1065353216;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *((_DWORD *)this + 34) = 1065353216;
  *((_QWORD *)this + 18) = 0;
  v5 = (_OWORD *)((char *)this + 144);
  *((_QWORD *)this + 21) = 0;
  *((_QWORD *)this + 22) = 0;
  *((_QWORD *)this + 23) = 0;
  *((_QWORD *)this + 19) = 0;
  *((_DWORD *)this + 40) = 0;
  v6 = (uint64_t *)*((_QWORD *)a2 + 7);
  v7 = *((char *)v6 + 23);
  if ((v7 & 0x80000000) == 0)
  {
    if (v7 != 16)
      goto LABEL_7;
LABEL_6:
    *(_OWORD *)((char *)this + 40) = *(_OWORD *)v6;
    goto LABEL_11;
  }
  if (v6[1] == 16)
  {
    v6 = (uint64_t *)*v6;
    goto LABEL_6;
  }
LABEL_7:
  if (onceToken_MicroLocation_Default != -1)
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_97);
  v8 = logObject_MicroLocation_Default;
  if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v16) = 0;
    _os_log_impl(&dword_2419D9000, v8, OS_LOG_TYPE_DEFAULT, "#Warning The protobuf fingerprint does not have a valid recording uuid", (uint8_t *)&v16, 2u);
  }
LABEL_11:
  *v5 = *(_OWORD *)((char *)a2 + 40);
  v9 = *((unsigned int *)a2 + 4);
  if ((int)v9 < 1)
  {
    v12 = *((int *)a2 + 20);
    if ((_DWORD)v12)
    {
      v13 = (CLMicroLocationFingerprint::Measurement **)*((_QWORD *)a2 + 9);
      v14 = 8 * v12;
      do
      {
        CLMicroLocationFingerprint::Measurement::fromProtobuf(*v13, (uint64_t)&v16);
        std::__hash_table<CLMicroLocationFingerprint::Measurement,CLMicroLocationFingerprint::Measurement::HashMeasurement,CLMicroLocationFingerprint::Measurement::PredicateMeasurement,std::allocator<CLMicroLocationFingerprint::Measurement>>::__emplace_unique_key_args<CLMicroLocationFingerprint::Measurement,CLMicroLocationFingerprint::Measurement>((uint64_t)this, (uint64_t)&v16, &v16);
        std::__variant_detail::__dtor<std::__variant_detail::__traits<unsigned long long,boost::uuids::uuid,std::string>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)v17);
        ++v13;
        v14 -= 8;
      }
      while (v14);
    }
  }
  else
  {
    v10 = (CLMicroLocationFingerprint::Measurement **)*((_QWORD *)a2 + 1);
    v11 = 8 * v9;
    do
    {
      CLMicroLocationFingerprint::Measurement::fromProtobuf(*v10, a2, (uint64_t)&v16);
      std::__hash_table<CLMicroLocationFingerprint::Measurement,CLMicroLocationFingerprint::Measurement::HashMeasurement,CLMicroLocationFingerprint::Measurement::PredicateMeasurement,std::allocator<CLMicroLocationFingerprint::Measurement>>::__emplace_unique_key_args<CLMicroLocationFingerprint::Measurement,CLMicroLocationFingerprint::Measurement>((uint64_t)this, (uint64_t)&v16, &v16);
      std::__variant_detail::__dtor<std::__variant_detail::__traits<unsigned long long,boost::uuids::uuid,std::string>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)v17);
      ++v10;
      v11 -= 8;
    }
    while (v11);
  }
  for (i = (_QWORD *)((char *)this + 16);
        ;
        CLMicroLocationFingerprint::updatePerMeasurementFields(this, (const CLMicroLocationFingerprint::Measurement *)(i + 2)))
  {
    i = (_QWORD *)*i;
    if (!i)
      break;
  }
  if (*((_BYTE *)a2 + 96))
    *v4 |= 0x20uLL;
  if (*((_BYTE *)a2 + 97))
    *v4 |= 0x40uLL;
}

void sub_241B2C1D8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void **v4;
  void *v6;

  std::__variant_detail::__dtor<std::__variant_detail::__traits<unsigned long long,boost::uuids::uuid,std::string>,(std::__variant_detail::_Trait)1>::~__dtor(v3);
  v6 = *v4;
  if (*v4)
  {
    *(_QWORD *)(v1 + 176) = v6;
    operator delete(v6);
  }
  std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>>>::~__hash_table(v2);
  std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>>>::~__hash_table(v1 + 64);
  std::__hash_table<CLMicroLocationFingerprint::Measurement,CLMicroLocationFingerprint::Measurement::HashMeasurement,CLMicroLocationFingerprint::Measurement::PredicateMeasurement,std::allocator<CLMicroLocationFingerprint::Measurement>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

void CLMicroLocationFingerprint::removeExceedingMeasurements(_QWORD *a1, unint64_t a2, int a3)
{
  uint64_t *v3;
  unint64_t v7;
  uint64_t *i;
  char *v9;
  char *v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  char *v17;
  int v18;
  uint64_t *v19;
  unint64_t v20;
  void *__p;
  char *v22;
  _QWORD v23[2];

  v3 = (uint64_t *)a1[2];
  if (v3)
  {
    v7 = 0;
    do
    {
      if (*((_DWORD *)v3 + 6) == a3)
        ++v7;
      v3 = (uint64_t *)*v3;
    }
    while (v3);
    if (v7 > a2)
    {
      __p = 0;
      v22 = 0;
      v23[0] = 0;
      std::vector<float>::reserve(&__p, v7);
      for (i = (uint64_t *)a1[2]; i; i = (uint64_t *)*i)
      {
        if (*((_DWORD *)i + 6) == a3)
        {
          v9 = v22;
          if ((unint64_t)v22 >= v23[0])
          {
            v11 = (char *)__p;
            v12 = (v22 - (_BYTE *)__p) >> 2;
            v13 = v12 + 1;
            if ((unint64_t)(v12 + 1) >> 62)
              std::vector<CLMicroLocationProto::ConfidenceReason>::__throw_length_error[abi:ne180100]();
            v14 = v23[0] - (_QWORD)__p;
            if ((uint64_t)(v23[0] - (_QWORD)__p) >> 1 > v13)
              v13 = v14 >> 1;
            if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFFCLL)
              v15 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v15 = v13;
            if (v15)
            {
              v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CLMicroLocationProto::ConfidenceReason>>((uint64_t)v23, v15);
              v11 = (char *)__p;
              v9 = v22;
            }
            else
            {
              v16 = 0;
            }
            v17 = &v16[4 * v12];
            *(_DWORD *)v17 = *((_DWORD *)i + 7);
            v10 = v17 + 4;
            while (v9 != v11)
            {
              v18 = *((_DWORD *)v9 - 1);
              v9 -= 4;
              *((_DWORD *)v17 - 1) = v18;
              v17 -= 4;
            }
            __p = v17;
            v22 = v10;
            v23[0] = &v16[4 * v15];
            if (v11)
              operator delete(v11);
          }
          else
          {
            *(_DWORD *)v22 = *((_DWORD *)i + 7);
            v10 = v9 + 4;
          }
          v22 = v10;
        }
      }
      if (((a3 - 2) & 0xFFFFFFFB) != 0)
        CLMicroLocationFingerprint::removeExceedingRssiMeasurements(a1, (float **)&__p, a2, a3);
      else
        CLMicroLocationFingerprint::removeExceedingRangeMeasurements(a1, &__p, a2, a3);
      v19 = (uint64_t *)a1[2];
      if (!v19)
        goto LABEL_36;
      v20 = 0;
      do
      {
        if (*((_DWORD *)v19 + 6) == a3)
          ++v20;
        v19 = (uint64_t *)*v19;
      }
      while (v19);
      if (v20 > a2)
      {
        CLMicroLocationFingerprint::removeExceedingMeasurements();

        abort_report_np();
        __break(1u);
      }
      else
      {
LABEL_36:
        if (__p)
        {
          v22 = (char *)__p;
          operator delete(__p);
        }
      }
    }
  }
}

void sub_241B2C434(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::vector<float>::reserve(void **a1, unint64_t a2)
{
  uint64_t v3;
  _BYTE *v4;
  int64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  int v13;

  v4 = a1[2];
  v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (_BYTE *)*a1) >> 2)
  {
    if (a2 >> 62)
      std::vector<CLMicroLocationProto::ConfidenceReason>::__throw_length_error[abi:ne180100]();
    v5 = (_BYTE *)a1[1] - (_BYTE *)*a1;
    v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CLMicroLocationProto::ConfidenceReason>>(v3, a2);
    v7 = &v6[v5 & 0xFFFFFFFFFFFFFFFCLL];
    v9 = &v6[4 * v8];
    v10 = (char *)*a1;
    v11 = (char *)a1[1];
    v12 = v7;
    if (v11 != *a1)
    {
      v12 = v7;
      do
      {
        v13 = *((_DWORD *)v11 - 1);
        v11 -= 4;
        *((_DWORD *)v12 - 1) = v13;
        v12 -= 4;
      }
      while (v11 != v10);
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
      operator delete(v10);
  }
}

void CLMicroLocationFingerprint::removeExceedingRssiMeasurements(_QWORD *a1, float **a2, uint64_t a3, int a4)
{
  float *v8;
  float *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  float v13;
  uint64_t *v14;
  _BYTE v15[24];

  v8 = *a2;
  v9 = a2[1];
  v10 = 126 - 2 * __clz(v9 - v8);
  if (v9 == v8)
    v11 = 0;
  else
    v11 = v10;
  std::__introsort<std::_ClassicAlgPolicy,std::greater<float> &,float *,false>(v8, v9, (uint64_t)v15, v11, 1);
  v12 = (uint64_t *)a1[2];
  if (v12)
  {
    v13 = (*a2)[a3];
    do
    {
      while (*((_DWORD *)v12 + 6) != a4 || *((float *)v12 + 7) > v13)
      {
        v12 = (uint64_t *)*v12;
        if (!v12)
          return;
      }
      v14 = (uint64_t *)*v12;
      std::__hash_table<std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>>>::remove(a1, v12, (uint64_t)v15);
      std::unique_ptr<std::__hash_node<CLMicroLocationFingerprint::Measurement,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<CLMicroLocationFingerprint::Measurement,void *>>>>::reset[abi:ne180100]((uint64_t)v15, 0);
      v12 = v14;
    }
    while (v14);
  }
}

void CLMicroLocationFingerprint::removeExceedingRangeMeasurements(_QWORD *a1, _QWORD *a2, uint64_t a3, int a4)
{
  uint64_t *v8;
  float v9;
  uint64_t *v10;
  _BYTE v11[24];

  std::__sort<std::__less<float,float> &,float *>();
  v8 = (uint64_t *)a1[2];
  if (v8)
  {
    v9 = *(float *)(*a2 + 4 * a3);
    do
    {
      while (*((_DWORD *)v8 + 6) != a4 || *((float *)v8 + 7) < v9)
      {
        v8 = (uint64_t *)*v8;
        if (!v8)
          return;
      }
      v10 = (uint64_t *)*v8;
      std::__hash_table<std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>>>::remove(a1, v8, (uint64_t)v11);
      std::unique_ptr<std::__hash_node<CLMicroLocationFingerprint::Measurement,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<CLMicroLocationFingerprint::Measurement,void *>>>>::reset[abi:ne180100]((uint64_t)v11, 0);
      v8 = v10;
    }
    while (v10);
  }
}

uint64_t CLMicroLocationFingerprint::CLMicroLocationFingerprint(uint64_t a1, CLMiLoProtobufWrapper::Measurement **a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  CLMiLoProtobufWrapper::Measurement *v9;
  CLMiLoProtobufWrapper::Measurement *v10;
  int v11;
  int v12;
  CLMicroLocationProto::Measurement *isOffChannelWiFiRssi;
  const CLMicroLocationProto::Measurement *v14;
  int v15;
  uint64_t v16;
  NSObject *v17;
  std::string *p_p;
  NSObject *v19;
  uint64_t v20;
  uint64_t *v21;
  double v22;
  double v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t *v27;
  _BYTE *v28;
  BOOL v29;
  double v30;
  double v31;
  double v32;
  float v33;
  uint64_t i;
  uint64_t *v35;
  _QWORD *v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  unint64_t v44;
  char *v45;
  _DWORD *v46;
  char *v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  char *v52;
  char *v53;
  int v54;
  _QWORD *v57;
  void **v58;
  __int128 v59;
  __int128 v60;
  int v61;
  std::string __p;
  CLMacAddress v63;
  _BYTE buf[18];
  __int16 v65;
  std::string *v66;
  __int16 v67;
  int v68;
  __int16 v69;
  int v70;
  uint64_t v71;

  v5 = a5;
  v71 = *MEMORY[0x24BDAC8D0];
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  *(_OWORD *)(a1 + 56) = 0u;
  v57 = (_QWORD *)(a1 + 56);
  *(_OWORD *)(a1 + 72) = 0u;
  *(_QWORD *)(a1 + 88) = 0;
  *(_DWORD *)(a1 + 96) = 1065353216;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_DWORD *)(a1 + 136) = 1065353216;
  *(_QWORD *)(a1 + 168) = 0;
  v58 = (void **)(a1 + 168);
  *(_QWORD *)(a1 + 176) = 0;
  *(_QWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 152) = 0;
  *(_DWORD *)(a1 + 160) = 0;
  v59 = 0u;
  v60 = 0u;
  v61 = 1065353216;
  v9 = *a2;
  v10 = a2[1];
  if (*a2 == v10)
    goto LABEL_22;
  do
  {
    v11 = CLMiLoProtobufWrapper::Measurement::isInvalidWiFiRssi(v9) ^ 1;
    if (*(_BYTE *)(a3 + 9))
      v12 = 1;
    else
      v12 = v11;
    isOffChannelWiFiRssi = (CLMicroLocationProto::Measurement *)CLMiLoProtobufWrapper::Measurement::isOffChannelWiFiRssi(v9);
    if (*(_BYTE *)(a3 + 8))
      v15 = 1;
    else
      v15 = isOffChannelWiFiRssi ^ 1;
    if ((v12 & v15 & 1) != 0)
    {
      CLMicroLocationFingerprint::Measurement::fromProtobuf(v9, v14, (uint64_t)buf);
      std::__hash_table<CLMicroLocationFingerprint::Measurement,CLMicroLocationFingerprint::Measurement::HashMeasurement,CLMicroLocationFingerprint::Measurement::PredicateMeasurement,std::allocator<CLMicroLocationFingerprint::Measurement>>::__emplace_multi<CLMicroLocationFingerprint::Measurement>(&v59, buf);
      std::__variant_detail::__dtor<std::__variant_detail::__traits<unsigned long long,boost::uuids::uuid,std::string>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)&buf[16]);
    }
    else
    {
      v16 = *((_QWORD *)v9 + 2);
      if (!v16)
        v16 = *(_QWORD *)(CLMicroLocationProto::Measurement::default_instance(isOffChannelWiFiRssi) + 16);
      v63.var0 = CLMacAddress::newFromUint64(*(CLMacAddress **)(v16 + 24), (unint64_t)v14);
      if (onceToken_MicroLocation_Default != -1)
        dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_97);
      v17 = (id)logObject_MicroLocation_Default;
      if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
      {
        CLMacAddress::toPrettyStr(&v63, &__p);
        p_p = &__p;
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        *(_DWORD *)buf = 68289794;
        *(_DWORD *)&buf[4] = 0;
        *(_WORD *)&buf[8] = 2082;
        *(_QWORD *)&buf[10] = "";
        v65 = 2082;
        v66 = p_p;
        v67 = 1026;
        v68 = v12;
        v69 = 1026;
        v70 = v15;
        _os_log_impl(&dword_2419D9000, v17, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"shouldProcess, ignore a measurement\", \"macAddress\":%{public, location:escape_only}s, \"shouldProcessPerInvalidRssiFlag\":%{public}hhd, \"shouldProcessPerOffChannelRssiFlag\":%{public}hhd}", buf, 0x28u);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
      }

    }
    v9 = (CLMiLoProtobufWrapper::Measurement *)((char *)v9 + 88);
  }
  while (v9 != v10);
  v5 = a5;
  if (!*((_QWORD *)&v60 + 1))
  {
LABEL_22:
    if (onceToken_MicroLocation_Default != -1)
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_97);
    v19 = logObject_MicroLocation_Default;
    if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_2419D9000, v19, OS_LOG_TYPE_DEFAULT, "#warning, this fingerprint does not have any measurements, all measurements might have been filtered out", buf, 2u);
    }
  }
  if (*(_BYTE *)(v5 + 16))
  {
    *(_OWORD *)(a1 + 40) = *(_OWORD *)v5;
  }
  else
  {
    *(_DWORD *)buf = 0;
    boost::uuids::detail::random_provider_base::random_provider_base((boost::uuids::detail::random_provider_base *)buf);
    *(_QWORD *)(a1 + 40) = boost::uuids::random_generator_pure::operator()((uint64_t)buf);
    *(_QWORD *)(a1 + 48) = v20;
    boost::uuids::detail::random_provider_base::destroy((boost::uuids::detail::random_provider_base *)buf);
  }
  v21 = (uint64_t *)v60;
  if ((_QWORD)v60)
  {
    v22 = 2.22507386e-308;
    v23 = 1.79769313e308;
    do
    {
      v24 = std::__hash_table<CLMicroLocationFingerprint::Measurement,CLMicroLocationFingerprint::Measurement::HashMeasurement,CLMicroLocationFingerprint::Measurement::PredicateMeasurement,std::allocator<CLMicroLocationFingerprint::Measurement>>::__equal_range_multi<CLMicroLocationFingerprint::Measurement>(&v59, (uint64_t)(v21 + 2));
      v26 = v25;
      *(_DWORD *)buf = *((_DWORD *)v21 + 6);
      v27 = std::__hash_table<std::__hash_value_type<unsigned int,unsigned int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned int>>>::find<unsigned int>((_QWORD *)(a3 + 16), (unsigned int *)buf);
      v28 = v27 + 3;
      if (!v27)
        v28 = &CLMicroLocationFingerprintConfiguration::getConfigurationForType(CLMicroLocationProto::DataType)const::sourceDisabledConfiguration;
      if (*v28)
        v29 = v24 == v26;
      else
        v29 = 1;
      if (!v29)
      {
        v30 = 0.0;
        v31 = 0.0;
        do
        {
          v32 = *((double *)v24 + 2);
          CLMicroLocationFingerprint::updatePerMeasurementFields((CLMicroLocationFingerprint *)a1, (const CLMicroLocationFingerprint::Measurement *)(v24 + 2));
          if (v32 > v22)
            v22 = v32;
          if (v32 < v23)
            v23 = v32;
          v31 = v31 + 1.0;
          v30 = v30 + *((float *)v24 + 7);
          v24 = (uint64_t *)*v24;
        }
        while (v24 != v26);
        if (v31 > 0.0)
        {
          *(_OWORD *)buf = *((_OWORD *)v21 + 1);
          std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<unsigned long long,boost::uuids::uuid,std::string>,(std::__variant_detail::_Trait)1>::__copy_constructor((uint64_t)&buf[16], (uint64_t)(v21 + 4));
          v33 = v30 / v31;
          *(float *)&buf[12] = v33;
          std::__hash_table<CLMicroLocationFingerprint::Measurement,CLMicroLocationFingerprint::Measurement::HashMeasurement,CLMicroLocationFingerprint::Measurement::PredicateMeasurement,std::allocator<CLMicroLocationFingerprint::Measurement>>::__emplace_unique_key_args<CLMicroLocationFingerprint::Measurement,CLMicroLocationFingerprint::Measurement const&>(a1, (uint64_t)buf, buf);
          std::__variant_detail::__dtor<std::__variant_detail::__traits<unsigned long long,boost::uuids::uuid,std::string>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)&buf[16]);
        }
      }
      v21 = v26;
    }
    while (v26);
  }
  else
  {
    v23 = 1.79769313e308;
    v22 = 2.22507386e-308;
  }
  *(double *)(a1 + 144) = v23;
  *(double *)(a1 + 152) = v22;
  for (i = a1 + 80; ; CLMicroLocationFingerprint::removeExceedingMeasurements((_QWORD *)a1, v36[3], *(_DWORD *)(i + 16)))
  {
    i = *(_QWORD *)i;
    if (!i)
      break;
    *(_DWORD *)buf = *(_DWORD *)(i + 16);
    v35 = std::__hash_table<std::__hash_value_type<unsigned int,unsigned int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned int>>>::find<unsigned int>((_QWORD *)(a3 + 16), (unsigned int *)buf);
    v36 = v35 + 3;
    if (!v35)
      v36 = &CLMicroLocationFingerprintConfiguration::getConfigurationForType(CLMicroLocationProto::DataType)const::sourceDisabledConfiguration;
  }
  if (*(_BYTE *)(a4 + 144))
  {
    if (*(_BYTE *)(a4 + 77))
    {
      v37 = *(uint64_t **)(a1 + 16);
      if (!v37)
        goto LABEL_61;
      v38 = 0;
      do
      {
        if (*((_DWORD *)v37 + 6) == 5)
          ++v38;
        v37 = (uint64_t *)*v37;
      }
      while (v37);
      if (!v38)
LABEL_61:
        *v57 |= 0x20uLL;
    }
    if (*(_BYTE *)(a4 + 76))
    {
      v39 = *(uint64_t **)(a1 + 16);
      if (!v39)
        goto LABEL_69;
      v40 = 0;
      do
      {
        if (*((_DWORD *)v39 + 6) == 6)
          ++v40;
        v39 = (uint64_t *)*v39;
      }
      while (v39);
      if (!v40)
LABEL_69:
        *v57 |= 0x40uLL;
    }
    *(_DWORD *)(a1 + 160) = *(_DWORD *)(a4 + 120);
    LODWORD(v41) = *(_DWORD *)(a4 + 112);
    if ((int)v41 >= 1)
    {
      v42 = 0;
      do
      {
        if (v42 >= (int)v41)
        {
          wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
          wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
          wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
          wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)buf);
        }
        v43 = *(_DWORD *)(*(_QWORD *)(a4 + 104) + 4 * v42);
        v45 = *(char **)(a1 + 176);
        v44 = *(_QWORD *)(a1 + 184);
        if ((unint64_t)v45 >= v44)
        {
          v47 = (char *)*v58;
          v48 = (v45 - (_BYTE *)*v58) >> 2;
          v49 = v48 + 1;
          if ((unint64_t)(v48 + 1) >> 62)
            std::vector<CLMicroLocationProto::ConfidenceReason>::__throw_length_error[abi:ne180100]();
          v50 = v44 - (_QWORD)v47;
          if (v50 >> 1 > v49)
            v49 = v50 >> 1;
          if ((unint64_t)v50 >= 0x7FFFFFFFFFFFFFFCLL)
            v51 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v51 = v49;
          if (v51)
          {
            v52 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CLMicroLocationProto::ConfidenceReason>>(a1 + 184, v51);
            v47 = *(char **)(a1 + 168);
            v45 = *(char **)(a1 + 176);
          }
          else
          {
            v52 = 0;
          }
          v53 = &v52[4 * v48];
          *(_DWORD *)v53 = v43;
          v46 = v53 + 4;
          while (v45 != v47)
          {
            v54 = *((_DWORD *)v45 - 1);
            v45 -= 4;
            *((_DWORD *)v53 - 1) = v54;
            v53 -= 4;
          }
          *(_QWORD *)(a1 + 168) = v53;
          *(_QWORD *)(a1 + 176) = v46;
          *(_QWORD *)(a1 + 184) = &v52[4 * v51];
          if (v47)
            operator delete(v47);
        }
        else
        {
          *(_DWORD *)v45 = v43;
          v46 = v45 + 4;
        }
        *(_QWORD *)(a1 + 176) = v46;
        ++v42;
        v41 = *(int *)(a4 + 112);
      }
      while (v42 < v41);
    }
  }
  std::__hash_table<CLMicroLocationFingerprint::Measurement,CLMicroLocationFingerprint::Measurement::HashMeasurement,CLMicroLocationFingerprint::Measurement::PredicateMeasurement,std::allocator<CLMicroLocationFingerprint::Measurement>>::~__hash_table((uint64_t)&v59);
  return a1;
}

void sub_241B2CC90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void **a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  uint64_t v27;
  void *v29;

  boost::uuids::detail::random_provider_base::destroy((boost::uuids::detail::random_provider_base *)&a27);
  std::__hash_table<CLMicroLocationFingerprint::Measurement,CLMicroLocationFingerprint::Measurement::HashMeasurement,CLMicroLocationFingerprint::Measurement::PredicateMeasurement,std::allocator<CLMicroLocationFingerprint::Measurement>>::~__hash_table((uint64_t)&a17);
  v29 = *a16;
  if (*a16)
  {
    *(_QWORD *)(v27 + 176) = v29;
    operator delete(v29);
  }
  std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>>>::~__hash_table(a10);
  std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>>>::~__hash_table(v27 + 64);
  std::__hash_table<CLMicroLocationFingerprint::Measurement,CLMicroLocationFingerprint::Measurement::HashMeasurement,CLMicroLocationFingerprint::Measurement::PredicateMeasurement,std::allocator<CLMicroLocationFingerprint::Measurement>>::~__hash_table(v27);
  _Unwind_Resume(a1);
}

void CLMicroLocationFingerprint::create(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t *a4@<X3>, _BYTE *a5@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  int v11;
  _QWORD v12[3];
  void **v13[10];
  int v14;
  uint64_t *v15;

  memset(v12, 0, sizeof(v12));
  v9 = *a1;
  v10 = a1[1];
  v15 = v12;
  while (v9 != v10)
  {
    v11 = *(_DWORD *)(v9 + 112);
    CLMicroLocationProto::Measurement::Measurement((CLMicroLocationProto::Measurement *)v13, (const CLMicroLocationProto::Measurement *)(v9 + 32));
    v14 = v11;
    std::back_insert_iterator<std::vector<CLMiLoProtobufWrapper::Measurement>>::operator=[abi:ne180100](&v15, (CLMicroLocationProto::Measurement *)v13);
    CLMicroLocationProto::Measurement::~Measurement((CLMicroLocationProto::Measurement *)v13);
    v9 += 120;
  }
  CLMicroLocationFingerprint::create((uint64_t)v12, a2, a3, a4, a5);
  v13[0] = (void **)v12;
  std::vector<CLMiLoProtobufWrapper::Measurement>::__destroy_vector::operator()[abi:ne180100](v13);
}

void sub_241B2CE08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  *(_QWORD *)(v9 - 72) = &a9;
  std::vector<CLMiLoProtobufWrapper::Measurement>::__destroy_vector::operator()[abi:ne180100]((void ***)(v9 - 72));
  _Unwind_Resume(a1);
}

uint64_t CLMicroLocationFingerprint::create@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t *a4@<X3>, _BYTE *a5@<X8>)
{
  uint64_t *v6;
  double *v7;
  uint64_t *v8;
  double *v9;
  uint64_t *v10;
  double *v11;
  uint64_t *v12;
  double v13;
  uint64_t *v14;
  double v15;
  uint64_t *v16;
  double v17;
  _BOOL4 v18;
  _BOOL4 v19;
  _BOOL4 v20;
  int v21;
  uint64_t *v22;
  unint64_t v23;
  uint64_t *v24;
  unint64_t v25;
  uint64_t *v26;
  _OWORD *v27;
  BOOL v28;
  int v29;
  BOOL v30;
  int v31;
  BOOL v32;
  unint64_t v33;
  unint64_t v34;
  int v35;
  NSObject *v36;
  uint64_t *v37;
  uint64_t *v38;
  unint64_t v39;
  unsigned __int8 *v40;
  _BYTE *v41;
  int v42;
  uint64_t *v43;
  uint64_t *v44;
  unint64_t v45;
  BOOL v46;
  void *v47;
  void *v48;
  void *v49;
  void *v50;
  uint64_t v51;
  unint64_t v52;
  void *v53;
  void *v54;
  void *v55;
  void *v56;
  uint64_t v57;
  unint64_t v58;
  int v59;
  char *v60;
  _OWORD *p_p;
  char v62;
  NSObject *v63;
  _QWORD *v66;
  void *__p;
  __int128 v68;
  _BYTE v69[16];
  uint64_t *v70;
  unint64_t v71;
  uint64_t v72;
  _QWORD v73[7];
  int v74;
  void *v75;
  void *__dst;
  uint8_t buf[4];
  int v78;
  __int16 v79;
  const char *v80;
  __int16 v81;
  unint64_t v82;
  __int16 v83;
  unint64_t v84;
  __int16 v85;
  _OWORD *v86;
  __int16 v87;
  unint64_t v88;
  __int16 v89;
  double v90;
  __int16 v91;
  int v92;
  __int16 v93;
  _BOOL4 v94;
  __int16 v95;
  int v96;
  __int16 v97;
  int v98;
  __int16 v99;
  double v100;
  __int16 v101;
  double v102;
  uint64_t v103;

  v103 = *MEMORY[0x24BDAC8D0];
  *a5 = 0;
  a5[192] = 0;
  if (*(_QWORD *)result == *(_QWORD *)(result + 8))
    return result;
  CLMicroLocationFingerprint::CLMicroLocationFingerprint((uint64_t)v69, (CLMiLoProtobufWrapper::Measurement **)result, (uint64_t)a4, a2, a3);
  *(_DWORD *)buf = 1;
  v6 = std::__hash_table<std::__hash_value_type<unsigned int,unsigned int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned int>>>::find<unsigned int>(a4 + 2, (unsigned int *)buf);
  if (v6)
    v7 = (double *)(v6 + 3);
  else
    v7 = (double *)&CLMicroLocationFingerprintConfiguration::getConfigurationForType(CLMicroLocationProto::DataType)const::sourceDisabledConfiguration;
  *(_DWORD *)buf = 5;
  v8 = std::__hash_table<std::__hash_value_type<unsigned int,unsigned int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned int>>>::find<unsigned int>(a4 + 2, (unsigned int *)buf);
  if (v8)
    v9 = (double *)(v8 + 3);
  else
    v9 = (double *)&CLMicroLocationFingerprintConfiguration::getConfigurationForType(CLMicroLocationProto::DataType)const::sourceDisabledConfiguration;
  *(_DWORD *)buf = 6;
  v10 = std::__hash_table<std::__hash_value_type<unsigned int,unsigned int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned int>>>::find<unsigned int>(a4 + 2, (unsigned int *)buf);
  if (v10)
    v11 = (double *)(v10 + 3);
  else
    v11 = (double *)&CLMicroLocationFingerprintConfiguration::getConfigurationForType(CLMicroLocationProto::DataType)const::sourceDisabledConfiguration;
  *(_DWORD *)buf = 1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned int,unsigned int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned int>>>::find<unsigned int>(v73, (unsigned int *)buf);
  if (v12)
    v13 = *((double *)v12 + 4) - *((double *)v12 + 3);
  else
    v13 = 0.0;
  *(_DWORD *)buf = 5;
  v14 = std::__hash_table<std::__hash_value_type<unsigned int,unsigned int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned int>>>::find<unsigned int>(v73, (unsigned int *)buf);
  if (v14)
    v15 = *((double *)v14 + 4) - *((double *)v14 + 3);
  else
    v15 = 0.0;
  *(_DWORD *)buf = 6;
  v16 = std::__hash_table<std::__hash_value_type<unsigned int,unsigned int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned int>>>::find<unsigned int>(v73, (unsigned int *)buf);
  if (v16)
    v17 = *((double *)v16 + 4) - *((double *)v16 + 3);
  else
    v17 = 0.0;
  if (*(_BYTE *)v7)
    v18 = v13 >= v7[1];
  else
    v18 = 1;
  if (*(_BYTE *)v9)
    v19 = v15 >= v9[1];
  else
    v19 = 1;
  if (!*(_BYTE *)v11)
  {
    v20 = 1;
    if (v18)
      goto LABEL_28;
LABEL_30:
    v21 = 0;
    goto LABEL_31;
  }
  v20 = v17 >= v11[1];
  if (!v18)
    goto LABEL_30;
LABEL_28:
  v21 = v19 && v20;
LABEL_31:
  v66 = a4 + 2;
  v22 = v70;
  if (v70)
  {
    v23 = 0;
    v24 = v70;
    do
    {
      if (*((_DWORD *)v24 + 6) == 1)
        ++v23;
      v24 = (uint64_t *)*v24;
    }
    while (v24);
    v25 = 0;
    v26 = v70;
    do
    {
      if (*((_DWORD *)v26 + 6) == 5)
        ++v25;
      v26 = (uint64_t *)*v26;
    }
    while (v26);
    v27 = 0;
    do
    {
      if (*((_DWORD *)v22 + 6) == 6)
        v27 = (_OWORD *)((char *)v27 + 1);
      v22 = (uint64_t *)*v22;
    }
    while (v22);
  }
  else
  {
    v25 = 0;
    v23 = 0;
    v27 = 0;
  }
  if (*(_BYTE *)v7)
    v28 = v23 >= *((_QWORD *)v7 + 2);
  else
    v28 = 1;
  v29 = v28;
  if (v29 == 1)
  {
    if (*(_BYTE *)v9)
      v30 = v25 >= *((_QWORD *)v9 + 2);
    else
      v30 = 1;
    v31 = v30;
    if (*(_BYTE *)v11)
      v32 = (unint64_t)v27 >= *((_QWORD *)v11 + 2);
    else
      v32 = 1;
    if (!v32)
      v31 = 0;
  }
  else
  {
    v31 = 0;
  }
  v33 = v71;
  v34 = *a4;
  if (*a4 > v71)
    v31 = 0;
  if (v21)
    v35 = v31;
  else
    v35 = 0;
  if (onceToken_MicroLocation_Default != -1)
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_97);
  v36 = logObject_MicroLocation_Default;
  if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 68291842;
    v78 = 0;
    v79 = 2082;
    v80 = "";
    v81 = 2050;
    v82 = v23;
    v83 = 2050;
    v84 = v25;
    v85 = 2050;
    v86 = v27;
    v87 = 2050;
    v88 = v33;
    v89 = 2050;
    v90 = v13;
    v91 = 1026;
    v92 = v29;
    v93 = 1026;
    v94 = v34 <= v33;
    v95 = 1026;
    v96 = v21;
    v97 = 1026;
    v98 = v35;
    v99 = 2050;
    v100 = v15;
    v101 = 2050;
    v102 = v17;
    _os_log_impl(&dword_2419D9000, v36, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Fingerprint creation\", \"NumWiFiMeasurements\":%{public}lu, \"NumBLEMeasurements\":%{public}lu, \"NumUWBMeasurements\":%{public}lu, \"number of total measurements\":%{public}lu, \"WiFi RSSI duration_s\":\"%{public}.09f\", \"enough WiFi measurements\":%{public}hhd, \"enough total measurements\":%{public}hhd, \"isDurationValid\":%{public}hhd, \"isFingerprintValid\":%{public}hhd, \"BLE Duration_s\":\"%{public}.09f\", \"UWB Duration_s\":\"%{public}.09f\"}", buf, 0x70u);
  }
  if (v35)
  {
    *(_DWORD *)buf = 5;
    v37 = std::__hash_table<std::__hash_value_type<unsigned int,unsigned int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned int>>>::find<unsigned int>(v66, (unsigned int *)buf);
    *(_DWORD *)buf = 6;
    v38 = std::__hash_table<std::__hash_value_type<unsigned int,unsigned int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned int>>>::find<unsigned int>(v66, (unsigned int *)buf);
    v39 = 0;
    v40 = (unsigned __int8 *)(v37 + 3);
    if (!v37)
      v40 = (unsigned __int8 *)&CLMicroLocationFingerprintConfiguration::getConfigurationForType(CLMicroLocationProto::DataType)const::sourceDisabledConfiguration;
    v41 = v38 + 3;
    if (!v38)
      v41 = &CLMicroLocationFingerprintConfiguration::getConfigurationForType(CLMicroLocationProto::DataType)const::sourceDisabledConfiguration;
    v42 = *v40;
    v43 = v70;
    if (v42 && v70)
    {
      v39 = 0;
      v44 = v70;
      do
      {
        if (*((_DWORD *)v44 + 6) == 5)
          ++v39;
        v44 = (uint64_t *)*v44;
      }
      while (v44);
    }
    v45 = 0;
    if (*v41)
      v46 = v70 == 0;
    else
      v46 = 1;
    if (!v46)
    {
      do
      {
        if (*((_DWORD *)v43 + 6) == 6)
          ++v45;
        v43 = (uint64_t *)*v43;
      }
      while (v43);
    }
    +[ULDefaultsSingleton shared](ULDefaultsSingleton, "shared");
    v47 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v47, "defaultsDictionary");
    v48 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "ULHighConfidenceBleSourceNumThreshold");
    v49 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v48, "objectForKey:", v49);
    v50 = (void *)objc_claimAutoreleasedReturnValue();
    if (v50 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
      v51 = objc_msgSend(v50, "unsignedLongValue");
    else
      v51 = objc_msgSend(&unk_2511EDF60, "unsignedLongValue");
    v52 = v51;

    if (v39 < v52)
    {
      +[ULDefaultsSingleton shared](ULDefaultsSingleton, "shared");
      v53 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v53, "defaultsDictionary");
      v54 = (void *)objc_claimAutoreleasedReturnValue();

      objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "ULHighConfidenceUwbSourceNumThreshold");
      v55 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v54, "objectForKey:", v55);
      v56 = (void *)objc_claimAutoreleasedReturnValue();
      if (!v56)
        goto LABEL_101;
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) != 0)
        v57 = objc_msgSend(v56, "unsignedLongValue");
      else
LABEL_101:
        v57 = objc_msgSend(&unk_2511EDF60, "unsignedLongValue");
      v58 = v57;

      if (v45 < v58)
      {
        if (v74 >= 2)
          v59 = 2;
        else
          v59 = v74;
        v74 = v59;
        v60 = (char *)operator new(4uLL);
        *(_DWORD *)v60 = 2;
        std::vector<CLMicroLocationProto::ConfidenceReason>::__insert_with_size[abi:ne180100]<std::__wrap_iter<CLMicroLocationProto::ConfidenceReason const*>,std::__wrap_iter<CLMicroLocationProto::ConfidenceReason const*>>((uint64_t)&v75, (uint64_t)__dst, v60, v60 + 4, 1);
        operator delete(v60);
        if (*(_BYTE *)(a3 + 16))
        {
          p_p = operator new(0x28uLL);
          __p = p_p;
          v68 = xmmword_241BB2320;
          *p_p = 0u;
          p_p[1] = 0u;
          *(_QWORD *)((char *)p_p + 29) = 0;
          boost::uuids::to_chars<char *>(a3, p_p);
          v62 = 0x80;
        }
        else
        {
          v62 = 0;
          __p = 0;
          v68 = 0uLL;
          p_p = &__p;
        }
        if (onceToken_MicroLocation_Default != -1)
          dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_97);
        v63 = logObject_MicroLocation_Default;
        if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 68290050;
          v78 = 0;
          v79 = 2082;
          v80 = "";
          v81 = 2050;
          v82 = v39;
          v83 = 2050;
          v84 = v45;
          v85 = 2082;
          v86 = p_p;
          v87 = 1026;
          LODWORD(v88) = v59;
          _os_log_impl(&dword_2419D9000, v63, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"setting fingerprint confidence due to number of RF sources\", \"number of Ble measurements\":%{public}lu, \"number of Uwb measurements\":%{public}lu, \"Recording UUID\":%{public, location:escape_only}s, \"confidence level\":%{public}d}", buf, 0x36u);
          v62 = HIBYTE(v68);
        }
        if (v62 < 0)
          operator delete(__p);
      }
    }
    std::optional<CLMicroLocationFingerprint>::operator=[abi:ne180100]<CLMicroLocationFingerprint&,void>((uint64_t)a5, (uint64_t)v69);
  }
  if (v75)
  {
    __dst = v75;
    operator delete(v75);
  }
  std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>>>::~__hash_table((uint64_t)v73);
  std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>>>::~__hash_table((uint64_t)&v72);
  return std::__hash_table<CLMicroLocationFingerprint::Measurement,CLMicroLocationFingerprint::Measurement::HashMeasurement,CLMicroLocationFingerprint::Measurement::PredicateMeasurement,std::allocator<CLMicroLocationFingerprint::Measurement>>::~__hash_table((uint64_t)v69);
}

void sub_241B2D570(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  void *v17;

  operator delete(v17);
  CLMicroLocationFingerprint::~CLMicroLocationFingerprint((CLMicroLocationFingerprint *)&a17);
  std::__optional_destruct_base<CLMicroLocationFingerprint,false>::~__optional_destruct_base[abi:ne180100](a11);
  _Unwind_Resume(a1);
}

uint64_t std::optional<CLMicroLocationFingerprint>::operator=[abi:ne180100]<CLMicroLocationFingerprint&,void>(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;

  if (*(_BYTE *)(a1 + 192))
  {
    if (a1 != a2)
    {
      *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
      std::__hash_table<CLMicroLocationFingerprint::Measurement,CLMicroLocationFingerprint::Measurement::HashMeasurement,CLMicroLocationFingerprint::Measurement::PredicateMeasurement,std::allocator<CLMicroLocationFingerprint::Measurement>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<CLMicroLocationFingerprint::Measurement,void *> *>>((_QWORD *)a1, *(uint64_t **)(a2 + 16), 0);
      v4 = *(_OWORD *)(a2 + 40);
      *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
      *(_OWORD *)(a1 + 40) = v4;
      *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
      std::__hash_table<CLMicroLocationProto::DataType,std::hash<CLMicroLocationProto::DataType>,std::equal_to<CLMicroLocationProto::DataType>,std::allocator<CLMicroLocationProto::DataType>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<CLMicroLocationProto::DataType,void *> *>>((_QWORD *)(a1 + 64), *(unsigned int **)(a2 + 80), 0);
      *(_DWORD *)(a1 + 136) = *(_DWORD *)(a2 + 136);
      std::__hash_table<std::__hash_value_type<CLMicroLocationProto::DataType,CLMicroLocationFingerprint::StartAndEndTimestamps>,std::__unordered_map_hasher<CLMicroLocationProto::DataType,std::__hash_value_type<CLMicroLocationProto::DataType,CLMicroLocationFingerprint::StartAndEndTimestamps>,std::hash<CLMicroLocationProto::DataType>,std::equal_to<CLMicroLocationProto::DataType>,true>,std::__unordered_map_equal<CLMicroLocationProto::DataType,std::__hash_value_type<CLMicroLocationProto::DataType,CLMicroLocationFingerprint::StartAndEndTimestamps>,std::equal_to<CLMicroLocationProto::DataType>,std::hash<CLMicroLocationProto::DataType>,true>,std::allocator<std::__hash_value_type<CLMicroLocationProto::DataType,CLMicroLocationFingerprint::StartAndEndTimestamps>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<CLMicroLocationProto::DataType,CLMicroLocationFingerprint::StartAndEndTimestamps>,void *> *>>((_QWORD *)(a1 + 104), *(uint64_t **)(a2 + 120), 0);
      v5 = *(_OWORD *)(a2 + 144);
      *(_DWORD *)(a1 + 160) = *(_DWORD *)(a2 + 160);
      *(_OWORD *)(a1 + 144) = v5;
      std::vector<CLMicroLocationProto::ConfidenceLevel>::__assign_with_size[abi:ne180100]<CLMicroLocationProto::ConfidenceLevel*,CLMicroLocationProto::ConfidenceLevel*>((char *)(a1 + 168), *(char **)(a2 + 168), *(_QWORD *)(a2 + 176), (uint64_t)(*(_QWORD *)(a2 + 176) - *(_QWORD *)(a2 + 168)) >> 2);
    }
  }
  else
  {
    std::__construct_at[abi:ne180100]<CLMicroLocationFingerprint,CLMicroLocationFingerprint&,CLMicroLocationFingerprint*>(a1, a2);
    *(_BYTE *)(a1 + 192) = 1;
  }
  return a1;
}

void CLMicroLocationFingerprint::toProtobuf(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  _QWORD *i;
  int v7;
  uint64_t v8;
  uint64_t v9;
  CLMicroLocationProto::FingerprintMeasurement *v10;
  uint64_t v11;
  uint64_t v12;
  std::string *v13;
  std::string *v14;
  int v15;
  std::string *v16;
  char v17;
  int v18;
  std::string __p[2];

  CLMicroLocationProto::Fingerprint::Fingerprint(a3);
  for (i = *(_QWORD **)(a1 + 16); i; i = (_QWORD *)*i)
  {
    CLMicroLocationFingerprint::Measurement::toProtobufFingerprintMeasurement((CLMicroLocationFingerprint::Measurement *)(i + 2), (uint64_t)__p);
    v7 = *(_DWORD *)(a3 + 84);
    v8 = *(int *)(a3 + 80);
    if ((int)v8 >= v7)
    {
      if (v7 == *(_DWORD *)(a3 + 88))
      {
        wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a3 + 72));
        v7 = *(_DWORD *)(a3 + 84);
      }
      *(_DWORD *)(a3 + 84) = v7 + 1;
      v10 = (CLMicroLocationProto::FingerprintMeasurement *)wireless_diagnostics::google::protobuf::internal::GenericTypeHandler<CLMicroLocationProto::FingerprintMeasurement>::New();
      v11 = *(_QWORD *)(a3 + 72);
      v12 = *(int *)(a3 + 80);
      *(_DWORD *)(a3 + 80) = v12 + 1;
      *(_QWORD *)(v11 + 8 * v12) = v10;
    }
    else
    {
      v9 = *(_QWORD *)(a3 + 72);
      *(_DWORD *)(a3 + 80) = v8 + 1;
      v10 = *(CLMicroLocationProto::FingerprintMeasurement **)(v9 + 8 * v8);
    }
    CLMicroLocationProto::FingerprintMeasurement::CopyFrom(v10, (const CLMicroLocationProto::FingerprintMeasurement *)__p);
    CLMicroLocationProto::FingerprintMeasurement::~FingerprintMeasurement((CLMicroLocationProto::FingerprintMeasurement *)__p);
  }
  v13 = (std::string *)MEMORY[0x24BEDD958];
  if (*(_BYTE *)(a2 + 16))
  {
    *((_BYTE *)&__p[0].__r_.__value_.__s + 23) = 16;
    *(_OWORD *)&__p[0].__r_.__value_.__l.__data_ = *(_OWORD *)a2;
    __p[0].__r_.__value_.__s.__data_[16] = 0;
    *(_DWORD *)(a3 + 104) |= 0x20u;
    v14 = *(std::string **)(a3 + 64);
    if (v14 == v13)
    {
      v14 = (std::string *)operator new();
      v14->__r_.__value_.__r.__words[0] = 0;
      v14->__r_.__value_.__l.__size_ = 0;
      v14->__r_.__value_.__r.__words[2] = 0;
      *(_QWORD *)(a3 + 64) = v14;
    }
    std::string::operator=(v14, __p);
    if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p[0].__r_.__value_.__l.__data_);
  }
  v15 = *(_DWORD *)(a3 + 104);
  *(_OWORD *)(a3 + 40) = *(_OWORD *)(a1 + 144);
  *((_BYTE *)&__p[0].__r_.__value_.__s + 23) = 16;
  *(_OWORD *)&__p[0].__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 40);
  __p[0].__r_.__value_.__s.__data_[16] = 0;
  *(_DWORD *)(a3 + 104) = v15 | 0x1C;
  v16 = *(std::string **)(a3 + 56);
  if (v16 == v13)
  {
    v16 = (std::string *)operator new();
    v16->__r_.__value_.__r.__words[0] = 0;
    v16->__r_.__value_.__l.__size_ = 0;
    v16->__r_.__value_.__r.__words[2] = 0;
    *(_QWORD *)(a3 + 56) = v16;
  }
  std::string::operator=(v16, __p);
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p[0].__r_.__value_.__l.__data_);
  v17 = *(_BYTE *)(a1 + 56);
  v18 = *(_DWORD *)(a3 + 104);
  *(_BYTE *)(a3 + 96) = (v17 & 0x20) != 0;
  *(_DWORD *)(a3 + 104) = v18 | 0x180;
  *(_BYTE *)(a3 + 97) = (v17 & 0x40) != 0;
}

void sub_241B2D8C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  CLMicroLocationProto::Fingerprint *v14;

  if (a14 < 0)
    operator delete(__p);
  CLMicroLocationProto::Fingerprint::~Fingerprint(v14);
  _Unwind_Resume(a1);
}

void CLMicroLocationFingerprint::removeMeasurementsFromSourcesOtherThan(_QWORD *a1, int a2, uint64_t *a3)
{
  uint64_t *v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  _BYTE v11[24];

  v3 = (uint64_t *)a1[2];
  if (v3)
  {
    do
    {
      while (1)
      {
        if (*((_DWORD *)v3 + 6) == a2)
        {
          v7 = *a3;
          v8 = a3[1];
          if (*a3 == v8)
          {
            v9 = *a3;
          }
          else
          {
            while ((std::operator==[abi:ne180100]<unsigned long long,boost::uuids::uuid,std::string>(v7, (uint64_t)(v3 + 4)) & 1) == 0)
            {
              v7 += 32;
              if (v7 == v8)
              {
                v7 = v8;
                break;
              }
            }
            v9 = v7;
            v7 = a3[1];
          }
          if (v9 == v7)
            break;
        }
        v3 = (uint64_t *)*v3;
        if (!v3)
          return;
      }
      v10 = (uint64_t *)*v3;
      std::__hash_table<std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>>>::remove(a1, v3, (uint64_t)v11);
      std::unique_ptr<std::__hash_node<CLMicroLocationFingerprint::Measurement,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<CLMicroLocationFingerprint::Measurement,void *>>>>::reset[abi:ne180100]((uint64_t)v11, 0);
      v3 = v10;
    }
    while (v10);
  }
}

_QWORD ***std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<CLMicroLocationFingerprint::Measurement::HashMeasurement::operator()(CLMicroLocationFingerprint::Measurement const&)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,unsigned long long,boost::uuids::uuid,std::string> const&>(_QWORD ***result, _QWORD *a2)
{
  ***result = 0xC6A4A7935BD1E995
            * ((0xC6A4A7935BD1E995 * ((0xC6A4A7935BD1E995 * *a2) ^ ((0xC6A4A7935BD1E995 * *a2) >> 47))) ^ ***result)
            + 3864292196u;
  return result;
}

_QWORD ***std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<CLMicroLocationFingerprint::Measurement::HashMeasurement::operator()(CLMicroLocationFingerprint::Measurement const&)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,unsigned long long,boost::uuids::uuid,std::string> const&>(_QWORD ***result, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;

  v2 = 0;
  v3 = 0;
  do
    v3 ^= (v3 << 6) + (v3 >> 2) + 2654435769u + *(unsigned __int8 *)(a2 + v2++);
  while (v2 != 16);
  ***result = 0xC6A4A7935BD1E995
            * ((0xC6A4A7935BD1E995 * ((0xC6A4A7935BD1E995 * v3) ^ ((0xC6A4A7935BD1E995 * v3) >> 47))) ^ ***result)
            + 3864292196u;
  return result;
}

unint64_t std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<CLMicroLocationFingerprint::Measurement::HashMeasurement::operator()(CLMicroLocationFingerprint::Measurement const&)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,unsigned long long,boost::uuids::uuid,std::string> const&>(uint64_t ***a1, char *a2)
{
  uint64_t *v2;
  uint64_t v3;
  unint64_t result;
  char v5;

  v2 = **a1;
  v3 = *v2;
  result = boost::hash<std::string>::operator()((uint64_t)&v5, a2);
  *v2 = 0xC6A4A7935BD1E995
      * ((0xC6A4A7935BD1E995 * ((0xC6A4A7935BD1E995 * result) ^ ((0xC6A4A7935BD1E995 * result) >> 47))) ^ v3)
      + 3864292196u;
  return result;
}

BOOL std::__variant_detail::__visitation::__base::__dispatcher<0ul,0ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<std::__convert_to_BOOL<std::equal_to<void>>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,unsigned long long,boost::uuids::uuid,std::string> const&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,unsigned long long,boost::uuids::uuid,std::string> const>(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  return *a2 == *a3;
}

BOOL std::__variant_detail::__visitation::__base::__dispatcher<1ul,1ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<std::__convert_to_BOOL<std::equal_to<void>>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,unsigned long long,boost::uuids::uuid,std::string> const&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,unsigned long long,boost::uuids::uuid,std::string> const>(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  return *a2 == *a3 && a2[1] == a3[1];
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<2ul,2ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<std::__convert_to_BOOL<std::equal_to<void>>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,unsigned long long,boost::uuids::uuid,std::string> const&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,unsigned long long,boost::uuids::uuid,std::string> const>(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  char v4;

  return std::equal_to<std::string>::operator()[abi:ne180100]((uint64_t)&v4, a2, a3);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<CLMicroLocationUtils::DeviceIdVisitor<std::string> &> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,unsigned long long,boost::uuids::uuid,std::string> const&>(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)a1 + 24);
  if (!v1)
    std::__throw_bad_function_call[abi:ne180100]();
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 48))(v1);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<CLMicroLocationUtils::DeviceIdVisitor<std::string> &> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,unsigned long long,boost::uuids::uuid,std::string> const&>(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)a1 + 56);
  if (!v1)
    std::__throw_bad_function_call[abi:ne180100]();
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 48))(v1);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<CLMicroLocationUtils::DeviceIdVisitor<std::string> &> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,unsigned long long,boost::uuids::uuid,std::string> const&>(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)a1 + 88);
  if (!v1)
    std::__throw_bad_function_call[abi:ne180100]();
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 48))(v1);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<CLMicroLocationUtils::DeviceIdVisitor<void> &> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,unsigned long long,boost::uuids::uuid,std::string> const&>(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)a1 + 24);
  if (!v1)
    std::__throw_bad_function_call[abi:ne180100]();
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 48))(v1);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<CLMicroLocationUtils::DeviceIdVisitor<void> &> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,unsigned long long,boost::uuids::uuid,std::string> const&>(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)a1 + 56);
  if (!v1)
    std::__throw_bad_function_call[abi:ne180100]();
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 48))(v1);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<CLMicroLocationUtils::DeviceIdVisitor<void> &> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,unsigned long long,boost::uuids::uuid,std::string> const&>(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)a1 + 88);
  if (!v1)
    std::__throw_bad_function_call[abi:ne180100]();
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 48))(v1);
}

void ___ZL45_CLLogObjectForCategory_MicroLocation_Defaultv_block_invoke_76()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.MicroLocation", "MicroLocation");
  v1 = (void *)logObject_MicroLocation_Default;
  logObject_MicroLocation_Default = (uint64_t)v0;

}

_QWORD *wireless_diagnostics::google::protobuf::internal::GenericTypeHandler<CLMicroLocationProto::FingerprintMeasurement>::New()
{
  _QWORD *v0;

  v0 = (_QWORD *)operator new();
  CLMicroLocationProto::FingerprintMeasurement::FingerprintMeasurement(v0);
  return v0;
}

void sub_241B2DC9C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2426A04D4](v1, 0x10A1C40E1D8D1C5);
  _Unwind_Resume(a1);
}

char *std::__hash_table<std::__hash_value_type<CLMicroLocationProto::DataType,CLMicroLocationFingerprintConfiguration::MeasurementTypeConfiguration>,std::__unordered_map_hasher<CLMicroLocationProto::DataType,std::__hash_value_type<CLMicroLocationProto::DataType,CLMicroLocationFingerprintConfiguration::MeasurementTypeConfiguration>,std::hash<CLMicroLocationProto::DataType>,std::equal_to<CLMicroLocationProto::DataType>,true>,std::__unordered_map_equal<CLMicroLocationProto::DataType,std::__hash_value_type<CLMicroLocationProto::DataType,CLMicroLocationFingerprintConfiguration::MeasurementTypeConfiguration>,std::equal_to<CLMicroLocationProto::DataType>,std::hash<CLMicroLocationProto::DataType>,true>,std::allocator<std::__hash_value_type<CLMicroLocationProto::DataType,CLMicroLocationFingerprintConfiguration::MeasurementTypeConfiguration>>>::__emplace_unique_key_args<CLMicroLocationProto::DataType,std::piecewise_construct_t const&,std::tuple<CLMicroLocationProto::DataType&&>,std::tuple<>>(uint64_t a1, unsigned int *a2, uint64_t a3, _DWORD **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  void **v10;
  char *v11;
  unint64_t v12;
  float v13;
  float v14;
  _BOOL8 v15;
  unint64_t v16;
  unint64_t v17;
  size_t v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t v21;

  v7 = *a2;
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v4 = *a2;
      if (v8 <= v7)
        v4 = v7 % v8;
    }
    else
    {
      v4 = ((_DWORD)v8 - 1) & v7;
    }
    v10 = *(void ***)(*(_QWORD *)a1 + 8 * v4);
    if (v10)
    {
      v11 = (char *)*v10;
      if (*v10)
      {
        do
        {
          v12 = *((_QWORD *)v11 + 1);
          if (v12 == v7)
          {
            if (*((_DWORD *)v11 + 4) == (_DWORD)v7)
              return v11;
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8)
                v12 %= v8;
            }
            else
            {
              v12 &= v8 - 1;
            }
            if (v12 != v4)
              break;
          }
          v11 = *(char **)v11;
        }
        while (v11);
      }
    }
  }
  v11 = (char *)operator new(0x38uLL);
  *(_QWORD *)v11 = 0;
  *((_QWORD *)v11 + 1) = v7;
  *((_DWORD *)v11 + 4) = **a4;
  *(_OWORD *)(v11 + 40) = 0u;
  *(_OWORD *)(v11 + 24) = 0u;
  v13 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v14 = *(float *)(a1 + 32);
  if (!v8 || (float)(v14 * (float)v8) < v13)
  {
    v15 = 1;
    if (v8 >= 3)
      v15 = (v8 & (v8 - 1)) != 0;
    v16 = v15 | (2 * v8);
    v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17)
      v18 = v17;
    else
      v18 = v16;
    std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>>>::__rehash<true>(a1, v18);
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v8 <= v7)
        v4 = v7 % v8;
      else
        v4 = v7;
    }
    else
    {
      v4 = ((_DWORD)v8 - 1) & v7;
    }
  }
  v19 = *(_QWORD *)a1;
  v20 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v20)
  {
    *(_QWORD *)v11 = *v20;
LABEL_38:
    *v20 = v11;
    goto LABEL_39;
  }
  *(_QWORD *)v11 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v11;
  *(_QWORD *)(v19 + 8 * v4) = a1 + 16;
  if (*(_QWORD *)v11)
  {
    v21 = *(_QWORD *)(*(_QWORD *)v11 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v21 >= v8)
        v21 %= v8;
    }
    else
    {
      v21 &= v8 - 1;
    }
    v20 = (_QWORD *)(*(_QWORD *)a1 + 8 * v21);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return v11;
}

void sub_241B2DED8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<CLMicroLocationFingerprint::Measurement::getHumanReadableDeviceId(void)::$_0,std::allocator<CLMicroLocationFingerprint::Measurement::getHumanReadableDeviceId(void)::$_0>,std::string ()(unsigned long long const&)>::~__func()
{
  JUMPOUT(0x2426A04D4);
}

_QWORD *std::__function::__func<CLMicroLocationFingerprint::Measurement::getHumanReadableDeviceId(void)::$_0,std::allocator<CLMicroLocationFingerprint::Measurement::getHumanReadableDeviceId(void)::$_0>,std::string ()(unsigned long long const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_2511DA210;
  return result;
}

void std::__function::__func<CLMicroLocationFingerprint::Measurement::getHumanReadableDeviceId(void)::$_0,std::allocator<CLMicroLocationFingerprint::Measurement::getHumanReadableDeviceId(void)::$_0>,std::string ()(unsigned long long const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_2511DA210;
}

uint64_t *std::__function::__func<CLMicroLocationFingerprint::Measurement::getHumanReadableDeviceId(void)::$_0,std::allocator<CLMicroLocationFingerprint::Measurement::getHumanReadableDeviceId(void)::$_0>,std::string ()(unsigned long long const&)>::operator()@<X0>(CLMacAddress **a1@<X1>, uint64_t *a2@<X8>)
{
  return CLMicroLocationProtobufHelper::convertToHumanReadableString(*a1, (unint64_t)a1, a2);
}

uint64_t std::__function::__func<CLMicroLocationFingerprint::Measurement::getHumanReadableDeviceId(void)::$_0,std::allocator<CLMicroLocationFingerprint::Measurement::getHumanReadableDeviceId(void)::$_0>,std::string ()(unsigned long long const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<CLMicroLocationFingerprint::Measurement::getHumanReadableDeviceId(void)::$_0,std::allocator<CLMicroLocationFingerprint::Measurement::getHumanReadableDeviceId(void)::$_0>,std::string ()(unsigned long long const&)>::target_type()
{
}

void std::__function::__func<CLMicroLocationFingerprint::Measurement::getHumanReadableDeviceId(void)::$_1,std::allocator<CLMicroLocationFingerprint::Measurement::getHumanReadableDeviceId(void)::$_1>,std::string ()(boost::uuids::uuid const&)>::~__func()
{
  JUMPOUT(0x2426A04D4);
}

_QWORD *std::__function::__func<CLMicroLocationFingerprint::Measurement::getHumanReadableDeviceId(void)::$_1,std::allocator<CLMicroLocationFingerprint::Measurement::getHumanReadableDeviceId(void)::$_1>,std::string ()(boost::uuids::uuid const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_2511DA2A0;
  return result;
}

void std::__function::__func<CLMicroLocationFingerprint::Measurement::getHumanReadableDeviceId(void)::$_1,std::allocator<CLMicroLocationFingerprint::Measurement::getHumanReadableDeviceId(void)::$_1>,std::string ()(boost::uuids::uuid const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_2511DA2A0;
}

_BYTE *std::__function::__func<CLMicroLocationFingerprint::Measurement::getHumanReadableDeviceId(void)::$_1,std::allocator<CLMicroLocationFingerprint::Measurement::getHumanReadableDeviceId(void)::$_1>,std::string ()(boost::uuids::uuid const&)>::operator()@<X0>(CLMicroLocationProtobufHelper *this@<X1>, uint64_t a2@<X8>)
{
  return CLMicroLocationProtobufHelper::convertToHumanReadableString(this, a2);
}

uint64_t std::__function::__func<CLMicroLocationFingerprint::Measurement::getHumanReadableDeviceId(void)::$_1,std::allocator<CLMicroLocationFingerprint::Measurement::getHumanReadableDeviceId(void)::$_1>,std::string ()(boost::uuids::uuid const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<CLMicroLocationFingerprint::Measurement::getHumanReadableDeviceId(void)::$_1,std::allocator<CLMicroLocationFingerprint::Measurement::getHumanReadableDeviceId(void)::$_1>,std::string ()(boost::uuids::uuid const&)>::target_type()
{
}

void std::__function::__func<CLMicroLocationFingerprint::Measurement::getHumanReadableDeviceId(void)::$_2,std::allocator<CLMicroLocationFingerprint::Measurement::getHumanReadableDeviceId(void)::$_2>,std::string ()(std::string const&)>::~__func()
{
  JUMPOUT(0x2426A04D4);
}

_QWORD *std::__function::__func<CLMicroLocationFingerprint::Measurement::getHumanReadableDeviceId(void)::$_2,std::allocator<CLMicroLocationFingerprint::Measurement::getHumanReadableDeviceId(void)::$_2>,std::string ()(std::string const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_2511DA330;
  return result;
}

void std::__function::__func<CLMicroLocationFingerprint::Measurement::getHumanReadableDeviceId(void)::$_2,std::allocator<CLMicroLocationFingerprint::Measurement::getHumanReadableDeviceId(void)::$_2>,std::string ()(std::string const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_2511DA330;
}

void std::__function::__func<CLMicroLocationFingerprint::Measurement::getHumanReadableDeviceId(void)::$_2,std::allocator<CLMicroLocationFingerprint::Measurement::getHumanReadableDeviceId(void)::$_2>,std::string ()(std::string const&)>::operator()(uint64_t a1@<X1>, std::string *a2@<X8>)
{
  if (*(char *)(a1 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)a1;
    a2->__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 16);
  }
}

uint64_t std::__function::__func<CLMicroLocationFingerprint::Measurement::getHumanReadableDeviceId(void)::$_2,std::allocator<CLMicroLocationFingerprint::Measurement::getHumanReadableDeviceId(void)::$_2>,std::string ()(std::string const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<CLMicroLocationFingerprint::Measurement::getHumanReadableDeviceId(void)::$_2,std::allocator<CLMicroLocationFingerprint::Measurement::getHumanReadableDeviceId(void)::$_2>,std::string ()(std::string const&)>::target_type()
{
}

uint64_t CLMicroLocationUtils::DeviceIdVisitor<std::string>::DeviceIdVisitor(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;

  v7 = std::__function::__value_func<double ()(CLMicroLocationFingerprint const&,CLMicroLocationFingerprint const&)>::__value_func[abi:ne180100](a1, a2);
  std::__function::__value_func<double ()(CLMicroLocationFingerprint const&,CLMicroLocationFingerprint const&)>::__value_func[abi:ne180100](v7 + 32, a3);
  std::__function::__value_func<double ()(CLMicroLocationFingerprint const&,CLMicroLocationFingerprint const&)>::__value_func[abi:ne180100](a1 + 64, a4);
  return a1;
}

void sub_241B2E14C(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;

  v4 = (_QWORD *)v1[7];
  if (v4 == v2)
  {
    v5 = v2;
    v6 = 4;
  }
  else
  {
    if (!v4)
      goto LABEL_6;
    v6 = 5;
    v5 = (_QWORD *)v1[7];
  }
  (*(void (**)(void))(*v5 + 8 * v6))();
LABEL_6:
  v7 = (_QWORD *)v1[3];
  if (v7 == v1)
  {
    v8 = 4;
  }
  else
  {
    if (!v7)
      goto LABEL_11;
    v8 = 5;
    v1 = (_QWORD *)v1[3];
  }
  (*(void (**)(_QWORD *))(*v1 + 8 * v8))(v1);
LABEL_11:
  _Unwind_Resume(exception_object);
}

void std::__function::__func<CLMicroLocationFingerprint::Measurement::toProtobufFingerprintMeasurement(CLMicroLocationFingerprint::Measurement const&)::$_0,std::allocator<CLMicroLocationFingerprint::Measurement::toProtobufFingerprintMeasurement(CLMicroLocationFingerprint::Measurement const&)::$_0>,void ()(unsigned long long const&)>::~__func()
{
  JUMPOUT(0x2426A04D4);
}

_QWORD *std::__function::__func<CLMicroLocationFingerprint::Measurement::toProtobufFingerprintMeasurement(CLMicroLocationFingerprint::Measurement const&)::$_0,std::allocator<CLMicroLocationFingerprint::Measurement::toProtobufFingerprintMeasurement(CLMicroLocationFingerprint::Measurement const&)::$_0>,void ()(unsigned long long const&)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_2511DA3C0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<CLMicroLocationFingerprint::Measurement::toProtobufFingerprintMeasurement(CLMicroLocationFingerprint::Measurement const&)::$_0,std::allocator<CLMicroLocationFingerprint::Measurement::toProtobufFingerprintMeasurement(CLMicroLocationFingerprint::Measurement const&)::$_0>,void ()(unsigned long long const&)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_2511DA3C0;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<CLMicroLocationFingerprint::Measurement::toProtobufFingerprintMeasurement(CLMicroLocationFingerprint::Measurement const&)::$_0,std::allocator<CLMicroLocationFingerprint::Measurement::toProtobufFingerprintMeasurement(CLMicroLocationFingerprint::Measurement const&)::$_0>,void ()(unsigned long long const&)>::operator()(uint64_t result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(result + 8);
  v3 = *a2;
  *(_DWORD *)(v2 + 28) |= 1u;
  *(_QWORD *)(v2 + 8) = v3;
  return result;
}

uint64_t std::__function::__func<CLMicroLocationFingerprint::Measurement::toProtobufFingerprintMeasurement(CLMicroLocationFingerprint::Measurement const&)::$_0,std::allocator<CLMicroLocationFingerprint::Measurement::toProtobufFingerprintMeasurement(CLMicroLocationFingerprint::Measurement const&)::$_0>,void ()(unsigned long long const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<CLMicroLocationFingerprint::Measurement::toProtobufFingerprintMeasurement(CLMicroLocationFingerprint::Measurement const&)::$_0,std::allocator<CLMicroLocationFingerprint::Measurement::toProtobufFingerprintMeasurement(CLMicroLocationFingerprint::Measurement const&)::$_0>,void ()(unsigned long long const&)>::target_type()
{
}

void std::__function::__func<CLMicroLocationFingerprint::Measurement::toProtobufFingerprintMeasurement(CLMicroLocationFingerprint::Measurement const&)::$_1,std::allocator<CLMicroLocationFingerprint::Measurement::toProtobufFingerprintMeasurement(CLMicroLocationFingerprint::Measurement const&)::$_1>,void ()(boost::uuids::uuid const&)>::~__func()
{
  JUMPOUT(0x2426A04D4);
}

_QWORD *std::__function::__func<CLMicroLocationFingerprint::Measurement::toProtobufFingerprintMeasurement(CLMicroLocationFingerprint::Measurement const&)::$_1,std::allocator<CLMicroLocationFingerprint::Measurement::toProtobufFingerprintMeasurement(CLMicroLocationFingerprint::Measurement const&)::$_1>,void ()(boost::uuids::uuid const&)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_2511DA450;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<CLMicroLocationFingerprint::Measurement::toProtobufFingerprintMeasurement(CLMicroLocationFingerprint::Measurement const&)::$_1,std::allocator<CLMicroLocationFingerprint::Measurement::toProtobufFingerprintMeasurement(CLMicroLocationFingerprint::Measurement const&)::$_1>,void ()(boost::uuids::uuid const&)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_2511DA450;
  a2[1] = v2;
  return result;
}

void std::__function::__func<CLMicroLocationFingerprint::Measurement::toProtobufFingerprintMeasurement(CLMicroLocationFingerprint::Measurement const&)::$_1,std::allocator<CLMicroLocationFingerprint::Measurement::toProtobufFingerprintMeasurement(CLMicroLocationFingerprint::Measurement const&)::$_1>,void ()(boost::uuids::uuid const&)>::operator()(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = *(_QWORD *)(a1 + 8);
  *(_DWORD *)(v1 + 28) |= 2u;
  if (*(_QWORD *)(v1 + 16) == MEMORY[0x24BEDD958])
  {
    v2 = (_QWORD *)operator new();
    v2[1] = 0;
    v2[2] = 0;
    *v2 = 0;
    *(_QWORD *)(v1 + 16) = v2;
  }
  JUMPOUT(0x2426A02D0);
}

uint64_t std::__function::__func<CLMicroLocationFingerprint::Measurement::toProtobufFingerprintMeasurement(CLMicroLocationFingerprint::Measurement const&)::$_1,std::allocator<CLMicroLocationFingerprint::Measurement::toProtobufFingerprintMeasurement(CLMicroLocationFingerprint::Measurement const&)::$_1>,void ()(boost::uuids::uuid const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<CLMicroLocationFingerprint::Measurement::toProtobufFingerprintMeasurement(CLMicroLocationFingerprint::Measurement const&)::$_1,std::allocator<CLMicroLocationFingerprint::Measurement::toProtobufFingerprintMeasurement(CLMicroLocationFingerprint::Measurement const&)::$_1>,void ()(boost::uuids::uuid const&)>::target_type()
{
}

void std::__function::__func<CLMicroLocationFingerprint::Measurement::toProtobufFingerprintMeasurement(CLMicroLocationFingerprint::Measurement const&)::$_2,std::allocator<CLMicroLocationFingerprint::Measurement::toProtobufFingerprintMeasurement(CLMicroLocationFingerprint::Measurement const&)::$_2>,void ()(std::string const&)>::~__func()
{
  JUMPOUT(0x2426A04D4);
}

_QWORD *std::__function::__func<CLMicroLocationFingerprint::Measurement::toProtobufFingerprintMeasurement(CLMicroLocationFingerprint::Measurement const&)::$_2,std::allocator<CLMicroLocationFingerprint::Measurement::toProtobufFingerprintMeasurement(CLMicroLocationFingerprint::Measurement const&)::$_2>,void ()(std::string const&)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_2511DA4E0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<CLMicroLocationFingerprint::Measurement::toProtobufFingerprintMeasurement(CLMicroLocationFingerprint::Measurement const&)::$_2,std::allocator<CLMicroLocationFingerprint::Measurement::toProtobufFingerprintMeasurement(CLMicroLocationFingerprint::Measurement const&)::$_2>,void ()(std::string const&)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_2511DA4E0;
  a2[1] = v2;
  return result;
}

std::string *std::__function::__func<CLMicroLocationFingerprint::Measurement::toProtobufFingerprintMeasurement(CLMicroLocationFingerprint::Measurement const&)::$_2,std::allocator<CLMicroLocationFingerprint::Measurement::toProtobufFingerprintMeasurement(CLMicroLocationFingerprint::Measurement const&)::$_2>,void ()(std::string const&)>::operator()(uint64_t a1, std::string *__str)
{
  uint64_t v3;
  std::string *v4;

  v3 = *(_QWORD *)(a1 + 8);
  *(_DWORD *)(v3 + 28) |= 2u;
  v4 = *(std::string **)(v3 + 16);
  if (v4 == (std::string *)MEMORY[0x24BEDD958])
  {
    v4 = (std::string *)operator new();
    v4->__r_.__value_.__l.__size_ = 0;
    v4->__r_.__value_.__r.__words[2] = 0;
    v4->__r_.__value_.__r.__words[0] = 0;
    *(_QWORD *)(v3 + 16) = v4;
  }
  return std::string::operator=(v4, __str);
}

uint64_t std::__function::__func<CLMicroLocationFingerprint::Measurement::toProtobufFingerprintMeasurement(CLMicroLocationFingerprint::Measurement const&)::$_2,std::allocator<CLMicroLocationFingerprint::Measurement::toProtobufFingerprintMeasurement(CLMicroLocationFingerprint::Measurement const&)::$_2>,void ()(std::string const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<CLMicroLocationFingerprint::Measurement::toProtobufFingerprintMeasurement(CLMicroLocationFingerprint::Measurement const&)::$_2,std::allocator<CLMicroLocationFingerprint::Measurement::toProtobufFingerprintMeasurement(CLMicroLocationFingerprint::Measurement const&)::$_2>,void ()(std::string const&)>::target_type()
{
}

uint64_t CLMicroLocationUtils::DeviceIdVisitor<void>::DeviceIdVisitor(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;

  v7 = std::__function::__value_func<double ()(CLMicroLocationFingerprint const&,CLMicroLocationFingerprint const&)>::__value_func[abi:ne180100](a1, a2);
  std::__function::__value_func<double ()(CLMicroLocationFingerprint const&,CLMicroLocationFingerprint const&)>::__value_func[abi:ne180100](v7 + 32, a3);
  std::__function::__value_func<double ()(CLMicroLocationFingerprint const&,CLMicroLocationFingerprint const&)>::__value_func[abi:ne180100](a1 + 64, a4);
  return a1;
}

void sub_241B2E510(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;

  v4 = (_QWORD *)v1[7];
  if (v4 == v2)
  {
    v5 = v2;
    v6 = 4;
  }
  else
  {
    if (!v4)
      goto LABEL_6;
    v6 = 5;
    v5 = (_QWORD *)v1[7];
  }
  (*(void (**)(void))(*v5 + 8 * v6))();
LABEL_6:
  v7 = (_QWORD *)v1[3];
  if (v7 == v1)
  {
    v8 = 4;
  }
  else
  {
    if (!v7)
      goto LABEL_11;
    v8 = 5;
    v1 = (_QWORD *)v1[3];
  }
  (*(void (**)(_QWORD *))(*v1 + 8 * v8))(v1);
LABEL_11:
  _Unwind_Resume(exception_object);
}

void std::__variant_detail::__assignment<std::__variant_detail::__traits<unsigned long long,boost::uuids::uuid,std::string>>::__assign_alt[abi:ne180100]<2ul,std::string,std::string const&>(uint64_t a1, std::string *this, std::string *__str)
{
  uint64_t v3[2];

  if (*(_DWORD *)(a1 + 24) == 2)
  {
    std::string::operator=(this, __str);
  }
  else
  {
    v3[0] = a1;
    v3[1] = (uint64_t)__str;
    std::__variant_detail::__assignment<std::__variant_detail::__traits<unsigned long long,boost::uuids::uuid,std::string>>::__assign_alt[abi:ne180100]<2ul,std::string,std::string const&>(std::__variant_detail::__alt<2ul,std::string> &,std::string const&)::{unnamed type#1}::operator()[abi:ne180100](v3);
  }
}

void std::__variant_detail::__assignment<std::__variant_detail::__traits<unsigned long long,boost::uuids::uuid,std::string>>::__assign_alt[abi:ne180100]<2ul,std::string,std::string const&>(std::__variant_detail::__alt<2ul,std::string> &,std::string const&)::{unnamed type#1}::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  __int128 v3;
  std::string __p;

  v2 = *a1;
  v1 = a1[1];
  if (*(char *)(v1 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)v1, *(_QWORD *)(v1 + 8));
  }
  else
  {
    v3 = *(_OWORD *)v1;
    __p.__r_.__value_.__r.__words[2] = *(_QWORD *)(v1 + 16);
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v3;
  }
  std::__variant_detail::__assignment<std::__variant_detail::__traits<unsigned long long,boost::uuids::uuid,std::string>>::__emplace[abi:ne180100]<2ul,std::string>(v2, (__int128 *)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_241B2E630(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t std::__variant_detail::__assignment<std::__variant_detail::__traits<unsigned long long,boost::uuids::uuid,std::string>>::__emplace[abi:ne180100]<2ul,std::string>(uint64_t a1, __int128 *a2)
{
  uint64_t v4;
  __int128 v5;
  char v7;

  v4 = *(unsigned int *)(a1 + 24);
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, uint64_t))off_2511DA1C8[v4])(&v7, a1);
  *(_DWORD *)(a1 + 24) = -1;
  v5 = *a2;
  *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
  *(_OWORD *)a1 = v5;
  *((_QWORD *)a2 + 1) = 0;
  *((_QWORD *)a2 + 2) = 0;
  *(_QWORD *)a2 = 0;
  *(_DWORD *)(a1 + 24) = 2;
  return a1;
}

uint64_t std::__variant_detail::__assignment<std::__variant_detail::__traits<unsigned long long,boost::uuids::uuid,std::string>>::__emplace[abi:ne180100]<0ul,unsigned long long>(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  char v6;

  v4 = *(unsigned int *)(a1 + 24);
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, uint64_t))off_2511DA1C8[v4])(&v6, a1);
  *(_QWORD *)a1 = *a2;
  *(_DWORD *)(a1 + 24) = 0;
  return a1;
}

uint64_t std::__variant_detail::__assignment<std::__variant_detail::__traits<unsigned long long,boost::uuids::uuid,std::string>>::__emplace[abi:ne180100]<1ul,boost::uuids::uuid&>(uint64_t a1, _OWORD *a2)
{
  uint64_t v4;
  char v6;

  v4 = *(unsigned int *)(a1 + 24);
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, uint64_t))off_2511DA1C8[v4])(&v6, a1);
  *(_DWORD *)(a1 + 24) = -1;
  *(_OWORD *)a1 = *a2;
  *(_DWORD *)(a1 + 24) = 1;
  return a1;
}

void std::__variant_detail::__assignment<std::__variant_detail::__traits<unsigned long long,boost::uuids::uuid,std::string>>::__assign_alt[abi:ne180100]<2ul,std::string,char const(&)[8]>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD v3[2];

  if (*(_DWORD *)(a1 + 24) == 2)
    JUMPOUT(0x2426A02C4);
  v3[0] = a1;
  v3[1] = a3;
  std::__variant_detail::__assignment<std::__variant_detail::__traits<unsigned long long,boost::uuids::uuid,std::string>>::__assign_alt[abi:ne180100]<2ul,std::string,char const(&)[8]>(std::__variant_detail::__alt<2ul,std::string> &,char const(&)[8] &&)::{unnamed type#1}::operator()[abi:ne180100]((uint64_t)v3);
}

void std::__variant_detail::__assignment<std::__variant_detail::__traits<unsigned long long,boost::uuids::uuid,std::string>>::__assign_alt[abi:ne180100]<2ul,std::string,char const(&)[8]>(std::__variant_detail::__alt<2ul,std::string> &,char const(&)[8] &&)::{unnamed type#1}::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1;
  void *__p[2];
  char v3;

  v1 = *(_QWORD *)a1;
  std::string::basic_string[abi:ne180100]<0>(__p, *(char **)(a1 + 8));
  std::__variant_detail::__assignment<std::__variant_detail::__traits<unsigned long long,boost::uuids::uuid,std::string>>::__emplace[abi:ne180100]<2ul,std::string>(v1, (__int128 *)__p);
  if (v3 < 0)
    operator delete(__p[0]);
}

void sub_241B2E820(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t *std::__hash_table<CLMicroLocationFingerprint::Measurement,CLMicroLocationFingerprint::Measurement::HashMeasurement,CLMicroLocationFingerprint::Measurement::PredicateMeasurement,std::allocator<CLMicroLocationFingerprint::Measurement>>::__emplace_unique_key_args<CLMicroLocationFingerprint::Measurement,CLMicroLocationFingerprint::Measurement>(uint64_t a1, uint64_t a2, _OWORD *a3)
{
  unint64_t v3;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  unint64_t v11;
  uint64_t **v12;
  uint64_t *i;
  unint64_t v14;
  _QWORD *v15;
  float v16;
  float v17;
  _BOOL8 v18;
  unint64_t v19;
  unint64_t v20;
  size_t v21;
  _QWORD *v22;
  unint64_t v23;
  _QWORD v25[2];
  char v26;

  v7 = CLMicroLocationFingerprint::Measurement::HashMeasurement::operator()(a1, a2);
  v8 = v7;
  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    v11 = v10.u32[0];
    if (v10.u32[0] > 1uLL)
    {
      v3 = v7;
      if (v7 >= v9)
        v3 = v7 % v9;
    }
    else
    {
      v3 = (v9 - 1) & v7;
    }
    v12 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v3);
    if (v12)
    {
      for (i = *v12; i; i = (uint64_t *)*i)
      {
        v14 = i[1];
        if (v14 == v8)
        {
          if (*((_DWORD *)i + 6) == *(_DWORD *)(a2 + 8)
            && (std::operator==[abi:ne180100]<unsigned long long,boost::uuids::uuid,std::string>((uint64_t)(i + 4), a2 + 16) & 1) != 0)
          {
            return i;
          }
        }
        else
        {
          if (v11 > 1)
          {
            if (v14 >= v9)
              v14 %= v9;
          }
          else
          {
            v14 &= v9 - 1;
          }
          if (v14 != v3)
            break;
        }
      }
    }
  }
  v15 = operator new(0x40uLL);
  v25[0] = v15;
  v25[1] = a1 + 16;
  *v15 = 0;
  v15[1] = v8;
  *((_OWORD *)v15 + 1) = *a3;
  std::__variant_detail::__move_constructor<std::__variant_detail::__traits<unsigned long long,boost::uuids::uuid,std::string>,(std::__variant_detail::_Trait)1>::__move_constructor((uint64_t)(v15 + 4), (uint64_t)(a3 + 1));
  v26 = 1;
  v16 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v17 = *(float *)(a1 + 32);
  if (!v9 || (float)(v17 * (float)v9) < v16)
  {
    v18 = 1;
    if (v9 >= 3)
      v18 = (v9 & (v9 - 1)) != 0;
    v19 = v18 | (2 * v9);
    v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20)
      v21 = v20;
    else
      v21 = v19;
    std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>>>::__rehash<true>(a1, v21);
    v9 = *(_QWORD *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9)
        v3 = v8 % v9;
      else
        v3 = v8;
    }
    else
    {
      v3 = (v9 - 1) & v8;
    }
  }
  v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v22)
  {
    *(_QWORD *)v25[0] = *v22;
    *v22 = v25[0];
  }
  else
  {
    *(_QWORD *)v25[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v25[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = a1 + 16;
    if (*(_QWORD *)v25[0])
    {
      v23 = *(_QWORD *)(*(_QWORD *)v25[0] + 8);
      if ((v9 & (v9 - 1)) != 0)
      {
        if (v23 >= v9)
          v23 %= v9;
      }
      else
      {
        v23 &= v9 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v23) = v25[0];
    }
  }
  i = (uint64_t *)v25[0];
  v25[0] = 0;
  ++*(_QWORD *)(a1 + 24);
  std::unique_ptr<std::__hash_node<CLMicroLocationFingerprint::Measurement,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<CLMicroLocationFingerprint::Measurement,void *>>>>::reset[abi:ne180100]((uint64_t)v25, 0);
  return i;
}

void sub_241B2EAB4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<CLMicroLocationFingerprint::Measurement,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<CLMicroLocationFingerprint::Measurement,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

float *std::__introsort<std::_ClassicAlgPolicy,std::greater<float> &,float *,false>(float *result, float *a2, uint64_t a3, uint64_t a4, char a5)
{
  float *v8;
  float *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  float *v15;
  float v16;
  float *v17;
  char v18;
  BOOL v19;
  float v20;
  float v21;
  float v22;
  float v23;
  int v24;
  float v25;
  float v26;
  float v27;
  int v28;
  float v29;
  float v30;
  int v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  int v41;
  float v42;
  int v43;
  float v44;
  float v45;
  int v46;
  float v47;
  float v48;
  float v49;
  float v50;
  int v51;
  float v52;
  float v53;
  float v54;
  int v55;
  float v56;
  float v57;
  float v58;
  float v59;
  float v60;
  float *v61;
  BOOL v63;
  uint64_t v64;
  float *v65;
  float v66;
  float v67;
  uint64_t v68;
  float *v69;
  float v70;
  float v71;
  float *v72;

  v8 = result;
LABEL_2:
  v9 = v8;
LABEL_3:
  v10 = 1 - a4;
  while (2)
  {
    v8 = v9;
    v11 = v10;
    v12 = (char *)a2 - (char *)v9;
    v13 = a2 - v9;
    switch(v13)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v20 = *(a2 - 1);
        v21 = *v9;
        if (v20 > *v9)
        {
          *v9 = v20;
          *(a2 - 1) = v21;
        }
        return result;
      case 3uLL:
        v22 = v9[1];
        v23 = *(a2 - 1);
        if (v22 <= v23)
          v24 = *((_DWORD *)a2 - 1);
        else
          v24 = *((_DWORD *)v9 + 1);
        if (v22 > v23)
          v22 = *(a2 - 1);
        *(a2 - 1) = v22;
        *((_DWORD *)v9 + 1) = v24;
        v25 = *(a2 - 1);
        if (v25 <= *v9)
          v26 = *v9;
        else
          v26 = *(a2 - 1);
        if (v25 > *v9)
          v25 = *v9;
        *(a2 - 1) = v25;
        v28 = *(_DWORD *)v9;
        v27 = v9[1];
        if (v26 <= v27)
        {
          v28 = *((_DWORD *)v9 + 1);
          v27 = v26;
        }
        *(_DWORD *)v9 = v28;
        v9[1] = v27;
        return result;
      case 4uLL:
        v30 = v9[1];
        v29 = v9[2];
        if (*v9 <= v29)
          v31 = *((_DWORD *)v9 + 2);
        else
          v31 = *(_DWORD *)v9;
        if (*v9 <= v29)
          v29 = *v9;
        v9[2] = v29;
        *(_DWORD *)v9 = v31;
        v32 = *(a2 - 1);
        if (v30 <= v32)
          v33 = *(a2 - 1);
        else
          v33 = v30;
        if (v30 <= v32)
          v32 = v30;
        *(a2 - 1) = v32;
        v34 = *v9;
        if (*v9 <= v33)
          v35 = v33;
        else
          v35 = *v9;
        if (*v9 > v33)
          v34 = v33;
        *v9 = v35;
        v9[1] = v34;
        v36 = v9[2];
        v37 = *(a2 - 1);
        if (v36 <= v37)
          v38 = *(a2 - 1);
        else
          v38 = v9[2];
        if (v36 > v37)
          v36 = *(a2 - 1);
        *(a2 - 1) = v36;
        v39 = v9[1];
        if (v39 <= v38)
          v40 = v38;
        else
          v40 = v9[1];
        if (v39 > v38)
          v39 = v38;
        v9[1] = v40;
        v9[2] = v39;
        return result;
      case 5uLL:
        v41 = *(_DWORD *)v9;
        v42 = v9[1];
        if (*v9 <= v42)
          v43 = *((_DWORD *)v9 + 1);
        else
          v43 = *(_DWORD *)v9;
        if (*v9 > v42)
          v41 = *((_DWORD *)v9 + 1);
        *(_DWORD *)v9 = v43;
        *((_DWORD *)v9 + 1) = v41;
        v44 = v9[3];
        v45 = *(a2 - 1);
        if (v44 <= v45)
          v46 = *((_DWORD *)a2 - 1);
        else
          v46 = *((_DWORD *)v9 + 3);
        if (v44 > v45)
          v44 = *(a2 - 1);
        *(a2 - 1) = v44;
        *((_DWORD *)v9 + 3) = v46;
        v47 = *(a2 - 1);
        v48 = v9[2];
        if (v47 <= v48)
          v49 = v9[2];
        else
          v49 = *(a2 - 1);
        if (v47 > v48)
          v47 = v9[2];
        *(a2 - 1) = v47;
        v51 = *((_DWORD *)v9 + 2);
        v50 = v9[3];
        v52 = v9[1];
        if (v49 <= v50)
        {
          v51 = *((_DWORD *)v9 + 3);
          v50 = v49;
        }
        *((_DWORD *)v9 + 2) = v51;
        v9[3] = v50;
        v53 = *(a2 - 1);
        if (v52 <= v53)
          v54 = *(a2 - 1);
        else
          v54 = v52;
        if (v52 <= v53)
          v53 = v52;
        *(a2 - 1) = v53;
        v55 = *(_DWORD *)v9;
        v57 = v9[2];
        v56 = v9[3];
        if (v56 <= *v9)
          v58 = *v9;
        else
          v58 = v9[3];
        if (v56 > *v9)
          v56 = *v9;
        if (v58 <= v57)
        {
          v55 = *((_DWORD *)v9 + 2);
          v57 = v58;
        }
        if (v56 <= v54)
          v59 = v54;
        else
          v59 = v56;
        if (v56 > v54)
          v56 = v54;
        if (v59 <= v57)
          v54 = v57;
        *(_DWORD *)v9 = v55;
        v9[1] = v54;
        if (v59 <= v57)
          v60 = v59;
        else
          v60 = v57;
        v9[2] = v60;
        v9[3] = v56;
        return result;
      default:
        if (v12 > 95)
        {
          if (v11 == 1)
          {
            if (v9 != a2)
              return std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<float> &,float *,float *>(v9, a2, a2, a3);
            return result;
          }
          v14 = v13 >> 1;
          v15 = &v9[v13 >> 1];
          if ((unint64_t)v12 < 0x201)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<float> &,float *>(&v9[v13 >> 1], v9, a2 - 1);
            if ((a5 & 1) != 0)
              goto LABEL_12;
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<float> &,float *>(v9, &v9[v13 >> 1], a2 - 1);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<float> &,float *>(v9 + 1, v15 - 1, a2 - 2);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<float> &,float *>(v9 + 2, &v9[v14 + 1], a2 - 3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<float> &,float *>(v15 - 1, v15, &v9[v14 + 1]);
            v16 = *v9;
            *v9 = *v15;
            *v15 = v16;
            if ((a5 & 1) != 0)
              goto LABEL_12;
          }
          if (*(v9 - 1) <= *v9)
          {
            result = std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,float *,std::greater<float> &>(v9, a2);
            v9 = result;
            goto LABEL_17;
          }
LABEL_12:
          v17 = std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,float *,std::greater<float> &>(v9, a2);
          if ((v18 & 1) == 0)
            goto LABEL_15;
          v19 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<float> &,float *>(v9, v17);
          v9 = v17 + 1;
          result = (float *)std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<float> &,float *>(v17 + 1, a2);
          if (!(_DWORD)result)
          {
            v10 = v11 + 1;
            if (v19)
              continue;
LABEL_15:
            result = (float *)std::__introsort<std::_ClassicAlgPolicy,std::greater<float> &,float *,false>(v8, v17, a3, -v11, a5 & 1);
            v9 = v17 + 1;
LABEL_17:
            a5 = 0;
            a4 = -v11;
            goto LABEL_3;
          }
          a4 = -v11;
          a2 = v17;
          if (v19)
            return result;
          goto LABEL_2;
        }
        v61 = v9 + 1;
        v63 = v9 == a2 || v61 == a2;
        if ((a5 & 1) != 0)
        {
          if (!v63)
          {
            v64 = 0;
            v65 = v9;
            do
            {
              v67 = *v65;
              v66 = v65[1];
              v65 = v61;
              if (v66 > v67)
              {
                v68 = v64;
                while (1)
                {
                  *(float *)((char *)v9 + v68 + 4) = v67;
                  if (!v68)
                    break;
                  v67 = *(float *)((char *)v9 + v68 - 4);
                  v68 -= 4;
                  if (v66 <= v67)
                  {
                    v69 = (float *)((char *)v9 + v68 + 4);
                    goto LABEL_117;
                  }
                }
                v69 = v9;
LABEL_117:
                *v69 = v66;
              }
              v61 = v65 + 1;
              v64 += 4;
            }
            while (v65 + 1 != a2);
          }
        }
        else if (!v63)
        {
          do
          {
            v71 = *v8;
            v70 = v8[1];
            v8 = v61;
            if (v70 > v71)
            {
              v72 = v61;
              do
              {
                *v72 = v71;
                v71 = *(v72 - 2);
                --v72;
              }
              while (v70 > v71);
              *v72 = v70;
            }
            ++v61;
          }
          while (v8 + 1 != a2);
        }
        return result;
    }
  }
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<float> &,float *>(float *a1, float *a2, float *a3)
{
  float v3;
  float v4;
  float v5;
  float v6;

  v3 = *a2;
  v4 = *a1;
  v5 = *a3;
  if (*a2 > *a1)
  {
    if (v5 > v3)
    {
      *a1 = v5;
      *a3 = v4;
      return 1;
    }
    *a1 = v3;
    *a2 = v4;
    if (*a3 <= v4)
      return 1;
    *a2 = *a3;
    *a3 = v4;
    return 2;
  }
  if (v5 > v3)
  {
    *a2 = v5;
    *a3 = v3;
    v6 = *a1;
    if (*a2 <= *a1)
      return 1;
    *a1 = *a2;
    *a2 = v6;
    return 2;
  }
  return 0;
}

float *std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,float *,std::greater<float> &>(float *a1, float *a2)
{
  float v2;
  float *v3;
  float v4;
  float *v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;

  v2 = *a1;
  if (*a1 <= *(a2 - 1))
  {
    v5 = a1 + 1;
    do
    {
      v3 = v5;
      if (v5 >= a2)
        break;
      ++v5;
    }
    while (v2 <= *v3);
  }
  else
  {
    v3 = a1;
    do
    {
      v4 = v3[1];
      ++v3;
    }
    while (v2 <= v4);
  }
  if (v3 < a2)
  {
    do
      v6 = *--a2;
    while (v2 > v6);
  }
  if (v3 < a2)
  {
    v7 = *v3;
    v8 = *a2;
    do
    {
      *v3 = v8;
      *a2 = v7;
      do
      {
        v9 = v3[1];
        ++v3;
        v7 = v9;
      }
      while (v2 <= v9);
      do
      {
        v10 = *--a2;
        v8 = v10;
      }
      while (v2 > v10);
    }
    while (v3 < a2);
  }
  if (v3 - 1 != a1)
    *a1 = *(v3 - 1);
  *(v3 - 1) = v2;
  return v3;
}

float *std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,float *,std::greater<float> &>(float *a1, float *a2)
{
  uint64_t v2;
  float v3;
  float v4;
  float *v5;
  float *v6;
  float v7;
  float v8;
  float v9;
  float *v10;
  float *v11;
  float v12;
  float v13;

  v2 = 0;
  v3 = *a1;
  do
    v4 = a1[++v2];
  while (v4 > v3);
  v5 = &a1[v2];
  v6 = &a1[v2 - 1];
  if (v2 == 1)
  {
    do
    {
      if (v5 >= a2)
        break;
      v8 = *--a2;
    }
    while (v8 <= v3);
  }
  else
  {
    do
      v7 = *--a2;
    while (v7 <= v3);
  }
  if (v5 < a2)
  {
    v9 = *a2;
    v10 = &a1[v2];
    v11 = a2;
    do
    {
      *v10 = v9;
      *v11 = v4;
      do
      {
        v12 = v10[1];
        ++v10;
        v4 = v12;
      }
      while (v12 > v3);
      do
      {
        v13 = *--v11;
        v9 = v13;
      }
      while (v13 <= v3);
    }
    while (v10 < v11);
    v6 = v10 - 1;
  }
  if (v6 != a1)
    *a1 = *v6;
  *v6 = v3;
  return v6;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<float> &,float *>(float *a1, float *a2)
{
  _BOOL8 v2;
  float v3;
  float v4;
  float *v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float *v12;
  int v13;
  uint64_t v14;
  float v15;
  float v16;
  uint64_t v17;
  uint64_t v18;
  float *v19;
  float v20;
  float v21;
  int v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  int v32;
  float v33;
  float v34;
  float v35;
  float v36;
  int v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  float v53;
  float v54;
  float v55;
  float v56;
  float v57;
  float v58;

  v2 = 1;
  switch(a2 - a1)
  {
    case 0:
    case 1:
      return v2;
    case 2:
      v3 = *(a2 - 1);
      v4 = *a1;
      if (v3 > *a1)
      {
        *a1 = v3;
        *(a2 - 1) = v4;
      }
      break;
    case 3:
      v20 = a1[1];
      v21 = *(a2 - 1);
      if (v20 <= v21)
        v22 = *((_DWORD *)a2 - 1);
      else
        v22 = *((_DWORD *)a1 + 1);
      if (v20 > v21)
        v20 = *(a2 - 1);
      *(a2 - 1) = v20;
      *((_DWORD *)a1 + 1) = v22;
      v23 = *(a2 - 1);
      if (v23 <= *a1)
        v24 = *a1;
      else
        v24 = *(a2 - 1);
      if (v23 > *a1)
        v23 = *a1;
      *(a2 - 1) = v23;
      v26 = *a1;
      v25 = a1[1];
      if (v24 <= v25)
      {
        v26 = a1[1];
        v25 = v24;
      }
      *a1 = v26;
      a1[1] = v25;
      break;
    case 4:
      v48 = a1[1];
      v47 = a1[2];
      if (*a1 <= v47)
        v49 = a1[2];
      else
        v49 = *a1;
      if (*a1 <= v47)
        v47 = *a1;
      a1[2] = v47;
      *a1 = v49;
      v50 = *(a2 - 1);
      if (v48 <= v50)
        v51 = *(a2 - 1);
      else
        v51 = v48;
      if (v48 <= v50)
        v50 = v48;
      *(a2 - 1) = v50;
      v52 = *a1;
      if (*a1 <= v51)
        v53 = v51;
      else
        v53 = *a1;
      if (*a1 > v51)
        v52 = v51;
      *a1 = v53;
      a1[1] = v52;
      v54 = a1[2];
      v55 = *(a2 - 1);
      if (v54 <= v55)
        v56 = *(a2 - 1);
      else
        v56 = a1[2];
      if (v54 > v55)
        v54 = *(a2 - 1);
      *(a2 - 1) = v54;
      v57 = a1[1];
      if (v57 <= v56)
        v58 = v56;
      else
        v58 = a1[1];
      if (v57 > v56)
        v57 = v56;
      a1[1] = v58;
      a1[2] = v57;
      break;
    case 5:
      v27 = *a1;
      v28 = a1[1];
      if (*a1 <= v28)
        v29 = a1[1];
      else
        v29 = *a1;
      if (*a1 > v28)
        v27 = a1[1];
      *a1 = v29;
      a1[1] = v27;
      v30 = a1[3];
      v31 = *(a2 - 1);
      if (v30 <= v31)
        v32 = *((_DWORD *)a2 - 1);
      else
        v32 = *((_DWORD *)a1 + 3);
      if (v30 > v31)
        v30 = *(a2 - 1);
      *(a2 - 1) = v30;
      *((_DWORD *)a1 + 3) = v32;
      v33 = *(a2 - 1);
      v34 = a1[2];
      if (v33 <= v34)
        v35 = a1[2];
      else
        v35 = *(a2 - 1);
      if (v33 > v34)
        v33 = a1[2];
      *(a2 - 1) = v33;
      v37 = *((_DWORD *)a1 + 2);
      v36 = a1[3];
      v38 = a1[1];
      if (v35 <= v36)
      {
        v37 = *((_DWORD *)a1 + 3);
        v36 = v35;
      }
      *((_DWORD *)a1 + 2) = v37;
      a1[3] = v36;
      v39 = *(a2 - 1);
      if (v38 <= v39)
        v40 = *(a2 - 1);
      else
        v40 = v38;
      if (v38 <= v39)
        v39 = v38;
      *(a2 - 1) = v39;
      v41 = *a1;
      v43 = a1[2];
      v42 = a1[3];
      if (v42 <= *a1)
        v44 = *a1;
      else
        v44 = a1[3];
      if (v42 > *a1)
        v42 = *a1;
      if (v44 <= v43)
      {
        v41 = a1[2];
        v43 = v44;
      }
      if (v42 <= v40)
        v45 = v40;
      else
        v45 = v42;
      if (v42 > v40)
        v42 = v40;
      if (v45 <= v43)
        v40 = v43;
      *a1 = v41;
      a1[1] = v40;
      if (v45 <= v43)
        v46 = v45;
      else
        v46 = v43;
      a1[2] = v46;
      a1[3] = v42;
      break;
    default:
      v5 = a1 + 2;
      v6 = a1[2];
      v8 = *a1;
      v7 = a1[1];
      if (v7 <= v6)
        v9 = a1[2];
      else
        v9 = a1[1];
      if (v7 <= v6)
        v6 = a1[1];
      if (v6 <= v8)
        v10 = *a1;
      else
        v10 = v6;
      if (v6 > v8)
        v6 = *a1;
      *v5 = v6;
      if (v10 <= v9)
        v11 = v9;
      else
        v11 = v8;
      if (v10 > v9)
        v10 = v9;
      *a1 = v11;
      a1[1] = v10;
      v12 = a1 + 3;
      if (a1 + 3 == a2)
      {
LABEL_29:
        v2 = 1;
      }
      else
      {
        v13 = 0;
        v14 = 12;
        while (1)
        {
          v15 = *v12;
          v16 = *v5;
          if (*v12 > *v5)
          {
            v17 = v14;
            while (1)
            {
              *(float *)((char *)a1 + v17) = v16;
              v18 = v17 - 4;
              if (v17 == 4)
                break;
              v16 = *(float *)((char *)a1 + v17 - 8);
              v17 -= 4;
              if (v15 <= v16)
              {
                v19 = (float *)((char *)a1 + v18);
                goto LABEL_27;
              }
            }
            v19 = a1;
LABEL_27:
            *v19 = v15;
            if (++v13 == 8)
              break;
          }
          v5 = v12;
          v14 += 4;
          if (++v12 == a2)
            goto LABEL_29;
        }
        v2 = v12 + 1 == a2;
      }
      break;
  }
  return v2;
}

float *std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<float> &,float *,float *>(float *a1, float *a2, float *a3, uint64_t a4)
{
  float *v6;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  float *v12;
  float *v13;
  float *v14;
  float v15;
  uint64_t v16;
  uint64_t v17;
  float v18;
  float *v19;
  float *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  float *v25;
  float v26;

  if (a1 != a2)
  {
    v6 = a2;
    v8 = (char *)a2 - (char *)a1;
    v9 = a2 - a1;
    if ((char *)a2 - (char *)a1 >= 5)
    {
      v10 = (unint64_t)(v9 - 2) >> 1;
      v11 = v10 + 1;
      v12 = &a1[v10];
      do
      {
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<float> &,float *>((uint64_t)a1, a4, v9, v12--);
        --v11;
      }
      while (v11);
    }
    v13 = v6;
    if (v6 != a3)
    {
      v14 = v6;
      do
      {
        v15 = *v14;
        if (*v14 > *a1)
        {
          *v14 = *a1;
          *a1 = v15;
          std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<float> &,float *>((uint64_t)a1, a4, v9, a1);
        }
        ++v14;
      }
      while (v14 != a3);
      v13 = a3;
    }
    if (v8 >= 5)
    {
      v16 = (unint64_t)v8 >> 2;
      do
      {
        v17 = 0;
        v18 = *a1;
        v19 = a1;
        do
        {
          v20 = v19;
          v19 += v17 + 1;
          v21 = 2 * v17;
          v17 = (2 * v17) | 1;
          v22 = v21 + 2;
          if (v22 < v16 && *v19 > v19[1])
          {
            ++v19;
            v17 = v22;
          }
          *v20 = *v19;
        }
        while (v17 <= (uint64_t)((unint64_t)(v16 - 2) >> 1));
        if (v19 != --v6)
        {
          *v19 = *v6;
          *v6 = v18;
          v23 = (char *)v19 - (char *)a1 + 4;
          if (v23 < 5)
            continue;
          v24 = (((unint64_t)v23 >> 2) - 2) >> 1;
          v25 = &a1[v24];
          v26 = *v25;
          v18 = *v19;
          if (*v25 <= *v19)
            continue;
          do
          {
            *v19 = v26;
            v19 = v25;
            if (!v24)
              break;
            v24 = (v24 - 1) >> 1;
            v25 = &a1[v24];
            v26 = *v25;
          }
          while (*v25 > v18);
        }
        *v19 = v18;
      }
      while (v16-- > 2);
    }
    return v13;
  }
  return a3;
}

uint64_t std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<float> &,float *>(uint64_t result, uint64_t a2, uint64_t a3, float *a4)
{
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  float *v8;
  uint64_t v9;
  float v10;
  float v11;
  uint64_t v12;
  uint64_t v13;

  if (a3 >= 2)
  {
    v4 = (uint64_t)a4 - result;
    v5 = (unint64_t)(a3 - 2) >> 1;
    if (v5 >= ((uint64_t)a4 - result) >> 2)
    {
      v6 = v4 >> 1;
      v7 = (v4 >> 1) + 1;
      v8 = (float *)(result + 4 * v7);
      v9 = v6 + 2;
      if (v9 < a3 && *v8 > v8[1])
      {
        ++v8;
        v7 = v9;
      }
      v10 = *v8;
      v11 = *a4;
      if (*v8 <= *a4)
      {
        do
        {
          *a4 = v10;
          a4 = v8;
          if (v5 < v7)
            break;
          v12 = 2 * v7;
          v7 = (2 * v7) | 1;
          v8 = (float *)(result + 4 * v7);
          v13 = v12 + 2;
          if (v13 < a3 && *v8 > v8[1])
          {
            ++v8;
            v7 = v13;
          }
          v10 = *v8;
        }
        while (*v8 <= v11);
        *a4 = v11;
      }
    }
  }
  return result;
}

char *std::__hash_table<std::__hash_value_type<CLMicroLocationProto::DataType,CLMicroLocationFingerprint::StartAndEndTimestamps>,std::__unordered_map_hasher<CLMicroLocationProto::DataType,std::__hash_value_type<CLMicroLocationProto::DataType,CLMicroLocationFingerprint::StartAndEndTimestamps>,std::hash<CLMicroLocationProto::DataType>,std::equal_to<CLMicroLocationProto::DataType>,true>,std::__unordered_map_equal<CLMicroLocationProto::DataType,std::__hash_value_type<CLMicroLocationProto::DataType,CLMicroLocationFingerprint::StartAndEndTimestamps>,std::equal_to<CLMicroLocationProto::DataType>,std::hash<CLMicroLocationProto::DataType>,true>,std::allocator<std::__hash_value_type<CLMicroLocationProto::DataType,CLMicroLocationFingerprint::StartAndEndTimestamps>>>::__emplace_unique_key_args<CLMicroLocationProto::DataType,CLMicroLocationProto::DataType const&,CLMicroLocationFingerprint::StartAndEndTimestamps>(uint64_t a1, unsigned int *a2, _DWORD *a3, _OWORD *a4)
{
  unint64_t v4;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  void **v11;
  char *v12;
  unint64_t v13;
  float v14;
  float v15;
  _BOOL8 v16;
  unint64_t v17;
  unint64_t v18;
  size_t v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t v22;

  v8 = *a2;
  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      v4 = *a2;
      if (v9 <= v8)
        v4 = v8 % v9;
    }
    else
    {
      v4 = ((_DWORD)v9 - 1) & v8;
    }
    v11 = *(void ***)(*(_QWORD *)a1 + 8 * v4);
    if (v11)
    {
      v12 = (char *)*v11;
      if (*v11)
      {
        do
        {
          v13 = *((_QWORD *)v12 + 1);
          if (v13 == v8)
          {
            if (*((_DWORD *)v12 + 4) == (_DWORD)v8)
              return v12;
          }
          else
          {
            if (v10.u32[0] > 1uLL)
            {
              if (v13 >= v9)
                v13 %= v9;
            }
            else
            {
              v13 &= v9 - 1;
            }
            if (v13 != v4)
              break;
          }
          v12 = *(char **)v12;
        }
        while (v12);
      }
    }
  }
  v12 = (char *)operator new(0x28uLL);
  *(_QWORD *)v12 = 0;
  *((_QWORD *)v12 + 1) = v8;
  *((_DWORD *)v12 + 4) = *a3;
  *(_OWORD *)(v12 + 24) = *a4;
  v14 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v15 = *(float *)(a1 + 32);
  if (!v9 || (float)(v15 * (float)v9) < v14)
  {
    v16 = 1;
    if (v9 >= 3)
      v16 = (v9 & (v9 - 1)) != 0;
    v17 = v16 | (2 * v9);
    v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18)
      v19 = v18;
    else
      v19 = v17;
    std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>>>::__rehash<true>(a1, v19);
    v9 = *(_QWORD *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v9 <= v8)
        v4 = v8 % v9;
      else
        v4 = v8;
    }
    else
    {
      v4 = ((_DWORD)v9 - 1) & v8;
    }
  }
  v20 = *(_QWORD *)a1;
  v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v21)
  {
    *(_QWORD *)v12 = *v21;
LABEL_38:
    *v21 = v12;
    goto LABEL_39;
  }
  *(_QWORD *)v12 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v12;
  *(_QWORD *)(v20 + 8 * v4) = a1 + 16;
  if (*(_QWORD *)v12)
  {
    v22 = *(_QWORD *)(*(_QWORD *)v12 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v22 >= v9)
        v22 %= v9;
    }
    else
    {
      v22 &= v9 - 1;
    }
    v21 = (_QWORD *)(*(_QWORD *)a1 + 8 * v22);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return v12;
}

void sub_241B2F860(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<CLMicroLocationFingerprint::Measurement,CLMicroLocationFingerprint::Measurement::HashMeasurement,CLMicroLocationFingerprint::Measurement::PredicateMeasurement,std::allocator<CLMicroLocationFingerprint::Measurement>>::__emplace_multi<CLMicroLocationFingerprint::Measurement>(_QWORD *a1, _OWORD *a2)
{
  _QWORD *inserted;
  _QWORD *v5[3];

  std::__hash_table<CLMicroLocationFingerprint::Measurement,CLMicroLocationFingerprint::Measurement::HashMeasurement,CLMicroLocationFingerprint::Measurement::PredicateMeasurement,std::allocator<CLMicroLocationFingerprint::Measurement>>::__construct_node<CLMicroLocationFingerprint::Measurement>((uint64_t)a1, a2, (uint64_t)v5);
  inserted = std::__hash_table<CLMicroLocationFingerprint::Measurement,CLMicroLocationFingerprint::Measurement::HashMeasurement,CLMicroLocationFingerprint::Measurement::PredicateMeasurement,std::allocator<CLMicroLocationFingerprint::Measurement>>::__node_insert_multi(a1, v5[0]);
  v5[0] = 0;
  std::unique_ptr<std::__hash_node<CLMicroLocationFingerprint::Measurement,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<CLMicroLocationFingerprint::Measurement,void *>>>>::reset[abi:ne180100]((uint64_t)v5, 0);
  return inserted;
}

void sub_241B2F8C4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<CLMicroLocationFingerprint::Measurement,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<CLMicroLocationFingerprint::Measurement,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

uint64_t std::__hash_table<CLMicroLocationFingerprint::Measurement,CLMicroLocationFingerprint::Measurement::HashMeasurement,CLMicroLocationFingerprint::Measurement::PredicateMeasurement,std::allocator<CLMicroLocationFingerprint::Measurement>>::__construct_node<CLMicroLocationFingerprint::Measurement>@<X0>(uint64_t a1@<X0>, _OWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t result;

  v5 = a1 + 16;
  v6 = operator new(0x40uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *v6 = 0;
  v6[1] = 0;
  *((_OWORD *)v6 + 1) = *a2;
  v7 = std::__variant_detail::__move_constructor<std::__variant_detail::__traits<unsigned long long,boost::uuids::uuid,std::string>,(std::__variant_detail::_Trait)1>::__move_constructor((uint64_t)(v6 + 4), (uint64_t)(a2 + 1));
  *(_BYTE *)(a3 + 16) = 1;
  result = CLMicroLocationFingerprint::Measurement::HashMeasurement::operator()(v7, (uint64_t)(v6 + 2));
  v6[1] = result;
  return result;
}

void sub_241B2F948(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__hash_node<CLMicroLocationFingerprint::Measurement,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<CLMicroLocationFingerprint::Measurement,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<CLMicroLocationFingerprint::Measurement,CLMicroLocationFingerprint::Measurement::HashMeasurement,CLMicroLocationFingerprint::Measurement::PredicateMeasurement,std::allocator<CLMicroLocationFingerprint::Measurement>>::__node_insert_multi(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  unint64_t v5;
  _QWORD *inserted;

  v4 = (uint64_t)(a2 + 2);
  v5 = CLMicroLocationFingerprint::Measurement::HashMeasurement::operator()((uint64_t)a1, (uint64_t)(a2 + 2));
  a2[1] = v5;
  inserted = std::__hash_table<CLMicroLocationFingerprint::Measurement,CLMicroLocationFingerprint::Measurement::HashMeasurement,CLMicroLocationFingerprint::Measurement::PredicateMeasurement,std::allocator<CLMicroLocationFingerprint::Measurement>>::__node_insert_multi_prepare((uint64_t)a1, v5, v4);
  std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>>>::__node_insert_multi_perform(a1, a2, inserted);
  return a2;
}

_QWORD *std::__hash_table<CLMicroLocationFingerprint::Measurement,CLMicroLocationFingerprint::Measurement::HashMeasurement,CLMicroLocationFingerprint::Measurement::PredicateMeasurement,std::allocator<CLMicroLocationFingerprint::Measurement>>::__node_insert_multi_prepare(uint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v6;
  float v7;
  float v8;
  _BOOL8 v9;
  unint64_t v10;
  unint64_t v11;
  size_t v12;
  uint8x8_t v13;
  unint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  int v18;
  unint64_t v19;
  unint64_t v20;
  int v21;

  v6 = *(_QWORD *)(a1 + 8);
  v7 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v8 = *(float *)(a1 + 32);
  if (!v6 || (float)(v8 * (float)v6) < v7)
  {
    v9 = 1;
    if (v6 >= 3)
      v9 = (v6 & (v6 - 1)) != 0;
    v10 = v9 | (2 * v6);
    v11 = vcvtps_u32_f32(v7 / v8);
    if (v10 <= v11)
      v12 = v11;
    else
      v12 = v10;
    std::__hash_table<CLMicroLocationFingerprint::Measurement,CLMicroLocationFingerprint::Measurement::HashMeasurement,CLMicroLocationFingerprint::Measurement::PredicateMeasurement,std::allocator<CLMicroLocationFingerprint::Measurement>>::__rehash<false>(a1, v12);
    v6 = *(_QWORD *)(a1 + 8);
  }
  v13 = (uint8x8_t)vcnt_s8((int8x8_t)v6);
  v13.i16[0] = vaddlv_u8(v13);
  v14 = v13.u32[0];
  if (v13.u32[0] > 1uLL)
  {
    v15 = a2;
    if (v6 <= a2)
      v15 = a2 % v6;
  }
  else
  {
    v15 = (v6 - 1) & a2;
  }
  v16 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v15);
  if (v16)
  {
    v17 = (_QWORD *)*v16;
    if (*v16)
    {
      v18 = 0;
      do
      {
        v19 = v17[1];
        if (v14 > 1)
        {
          v20 = v17[1];
          if (v19 >= v6)
            v20 = v19 % v6;
        }
        else
        {
          v20 = v19 & (v6 - 1);
        }
        if (v20 != v15)
          break;
        v21 = v19 == a2 && *((_DWORD *)v17 + 6) == *(_DWORD *)(a3 + 8)
            ? std::operator==[abi:ne180100]<unsigned long long,boost::uuids::uuid,std::string>((uint64_t)(v17 + 4), a3 + 16): 0;
        if ((v18 & (v21 ^ 1) & 1) != 0)
          break;
        v18 |= v21;
        v16 = (_QWORD *)*v16;
        v17 = (_QWORD *)*v16;
      }
      while (*v16);
    }
  }
  return v16;
}

void std::__hash_table<CLMicroLocationFingerprint::Measurement,CLMicroLocationFingerprint::Measurement::HashMeasurement,CLMicroLocationFingerprint::Measurement::PredicateMeasurement,std::allocator<CLMicroLocationFingerprint::Measurement>>::__rehash<false>(uint64_t a1, size_t __n)
{
  size_t prime;
  int8x8_t v4;
  unint64_t v5;
  uint8x8_t v6;
  uint64_t v7;

  if (__n == 1)
  {
    prime = 2;
  }
  else
  {
    prime = __n;
    if ((__n & (__n - 1)) != 0)
      prime = std::__next_prime(__n);
  }
  v4 = *(int8x8_t *)(a1 + 8);
  if (prime > *(_QWORD *)&v4)
    goto LABEL_16;
  if (prime < *(_QWORD *)&v4)
  {
    v5 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(_QWORD *)&v4 < 3uLL || (v6 = (uint8x8_t)vcnt_s8(v4), v6.i16[0] = vaddlv_u8(v6), v6.u32[0] > 1uLL))
    {
      v5 = std::__next_prime(v5);
    }
    else
    {
      v7 = 1 << -(char)__clz(v5 - 1);
      if (v5 >= 2)
        v5 = v7;
    }
    if (prime <= v5)
      prime = v5;
    if (prime < *(_QWORD *)&v4)
LABEL_16:
      std::__hash_table<CLMicroLocationFingerprint::Measurement,CLMicroLocationFingerprint::Measurement::HashMeasurement,CLMicroLocationFingerprint::Measurement::PredicateMeasurement,std::allocator<CLMicroLocationFingerprint::Measurement>>::__do_rehash<false>(a1, prime);
  }
}

void std::__hash_table<CLMicroLocationFingerprint::Measurement,CLMicroLocationFingerprint::Measurement::HashMeasurement,CLMicroLocationFingerprint::Measurement::PredicateMeasurement,std::allocator<CLMicroLocationFingerprint::Measurement>>::__do_rehash<false>(uint64_t a1, unint64_t a2)
{
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t *v7;
  unint64_t v8;
  uint8x8_t v9;
  unint64_t v10;
  void *v11;
  uint64_t i;
  unint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  int v16;
  _QWORD *v17;

  if (a2)
  {
    if (a2 >> 61)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v4 = operator new(8 * a2);
    v5 = *(void **)a1;
    *(_QWORD *)a1 = v4;
    if (v5)
      operator delete(v5);
    v6 = 0;
    *(_QWORD *)(a1 + 8) = a2;
    do
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v6++) = 0;
    while (a2 != v6);
    v7 = *(uint64_t **)(a1 + 16);
    if (v7)
    {
      v8 = v7[1];
      v9 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
      v9.i16[0] = vaddlv_u8(v9);
      v10 = v9.u32[0];
      if (v9.u32[0] > 1uLL)
      {
        if (v8 >= a2)
          v8 %= a2;
      }
      else
      {
        v8 &= a2 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v8) = a1 + 16;
      for (i = *v7; *v7; i = *v7)
      {
        v13 = *(_QWORD *)(i + 8);
        if (v10 > 1)
        {
          if (v13 >= a2)
            v13 %= a2;
        }
        else
        {
          v13 &= a2 - 1;
        }
        if (v13 == v8)
        {
          v7 = (uint64_t *)i;
        }
        else if (*(_QWORD *)(*(_QWORD *)a1 + 8 * v13))
        {
          v14 = *(_QWORD **)i;
          if (*(_QWORD *)i)
          {
            v15 = (_QWORD *)i;
            while (*(_DWORD *)(i + 24) == *((_DWORD *)v14 + 6))
            {
              v16 = std::operator==[abi:ne180100]<unsigned long long,boost::uuids::uuid,std::string>(i + 32, (uint64_t)(v14 + 4));
              v17 = (_QWORD *)*v15;
              if (!v16)
              {
                v14 = (_QWORD *)*v15;
                break;
              }
              v14 = (_QWORD *)*v17;
              v15 = (_QWORD *)*v15;
              if (!*v17)
                goto LABEL_33;
            }
            v17 = v15;
          }
          else
          {
            v17 = (_QWORD *)i;
          }
LABEL_33:
          *v7 = (uint64_t)v14;
          *v17 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v13);
          **(_QWORD **)(*(_QWORD *)a1 + 8 * v13) = i;
        }
        else
        {
          *(_QWORD *)(*(_QWORD *)a1 + 8 * v13) = v7;
          v7 = (uint64_t *)i;
          v8 = v13;
        }
      }
    }
  }
  else
  {
    v11 = *(void **)a1;
    *(_QWORD *)a1 = 0;
    if (v11)
      operator delete(v11);
    *(_QWORD *)(a1 + 8) = 0;
  }
}

uint64_t *std::__hash_table<CLMicroLocationFingerprint::Measurement,CLMicroLocationFingerprint::Measurement::HashMeasurement,CLMicroLocationFingerprint::Measurement::PredicateMeasurement,std::allocator<CLMicroLocationFingerprint::Measurement>>::__equal_range_multi<CLMicroLocationFingerprint::Measurement>(_QWORD *a1, uint64_t a2)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t *v5;

  v3 = std::__hash_table<CLMicroLocationFingerprint::Measurement,CLMicroLocationFingerprint::Measurement::HashMeasurement,CLMicroLocationFingerprint::Measurement::PredicateMeasurement,std::allocator<CLMicroLocationFingerprint::Measurement>>::find<CLMicroLocationFingerprint::Measurement>(a1, a2);
  v4 = v3;
  if (v3)
  {
    v5 = v3;
    do
      v5 = (uint64_t *)*v5;
    while (v5
         && *((_DWORD *)v5 + 6) == *(_DWORD *)(a2 + 8)
         && (std::operator==[abi:ne180100]<unsigned long long,boost::uuids::uuid,std::string>((uint64_t)(v5 + 4), a2 + 16) & 1) != 0);
  }
  return v4;
}

uint64_t *std::__hash_table<CLMicroLocationFingerprint::Measurement,CLMicroLocationFingerprint::Measurement::HashMeasurement,CLMicroLocationFingerprint::Measurement::PredicateMeasurement,std::allocator<CLMicroLocationFingerprint::Measurement>>::find<CLMicroLocationFingerprint::Measurement>(_QWORD *a1, uint64_t a2)
{
  unint64_t v4;
  int8x8_t v5;
  unint64_t v6;
  uint8x8_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t **v10;
  uint64_t *i;
  unint64_t v12;

  v4 = CLMicroLocationFingerprint::Measurement::HashMeasurement::operator()((uint64_t)a1, a2);
  v5 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v5)
    return 0;
  v6 = v4;
  v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    v9 = v4;
    if (v4 >= *(_QWORD *)&v5)
      v9 = v4 % *(_QWORD *)&v5;
  }
  else
  {
    v9 = (*(_QWORD *)&v5 - 1) & v4;
  }
  v10 = *(uint64_t ***)(*a1 + 8 * v9);
  if (!v10)
    return 0;
  for (i = *v10; i; i = (uint64_t *)*i)
  {
    v12 = i[1];
    if (v12 == v6)
    {
      if (*((_DWORD *)i + 6) == *(_DWORD *)(a2 + 8)
        && (std::operator==[abi:ne180100]<unsigned long long,boost::uuids::uuid,std::string>((uint64_t)(i + 4), a2 + 16) & 1) != 0)
      {
        return i;
      }
    }
    else
    {
      if (v8 > 1)
      {
        if (v12 >= *(_QWORD *)&v5)
          v12 %= *(_QWORD *)&v5;
      }
      else
      {
        v12 &= *(_QWORD *)&v5 - 1;
      }
      if (v12 != v9)
        return 0;
    }
  }
  return i;
}

void std::__hash_table<CLMicroLocationFingerprint::Measurement,CLMicroLocationFingerprint::Measurement::HashMeasurement,CLMicroLocationFingerprint::Measurement::PredicateMeasurement,std::allocator<CLMicroLocationFingerprint::Measurement>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<CLMicroLocationFingerprint::Measurement,void *> *>>(_QWORD *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t *v4;
  uint64_t v6;
  uint64_t i;
  _QWORD *v8;
  BOOL v9;
  _QWORD *v10;
  BOOL v11;

  v4 = a2;
  v6 = a1[1];
  if (v6)
  {
    for (i = 0; i != v6; ++i)
      *(_QWORD *)(*a1 + 8 * i) = 0;
    v8 = (_QWORD *)a1[2];
    a1[2] = 0;
    a1[3] = 0;
    if (v8)
      v9 = a2 == a3;
    else
      v9 = 1;
    if (v9)
    {
      v10 = v8;
    }
    else
    {
      do
      {
        *((_OWORD *)v8 + 1) = *((_OWORD *)v4 + 1);
        std::__variant_detail::__assignment<std::__variant_detail::__traits<unsigned long long,boost::uuids::uuid,std::string>>::__generic_assign[abi:ne180100]<std::__variant_detail::__copy_assignment<std::__variant_detail::__traits<unsigned long long,boost::uuids::uuid,std::string>,(std::__variant_detail::_Trait)1> const&>((uint64_t)(v8 + 4), (uint64_t)(v4 + 4));
        v10 = (_QWORD *)*v8;
        std::__hash_table<CLMicroLocationFingerprint::Measurement,CLMicroLocationFingerprint::Measurement::HashMeasurement,CLMicroLocationFingerprint::Measurement::PredicateMeasurement,std::allocator<CLMicroLocationFingerprint::Measurement>>::__node_insert_multi(a1, v8);
        v4 = (uint64_t *)*v4;
        if (v10)
          v11 = v4 == a3;
        else
          v11 = 1;
        v8 = v10;
      }
      while (!v11);
    }
    std::__hash_table<CLMicroLocationFingerprint::Measurement,CLMicroLocationFingerprint::Measurement::HashMeasurement,CLMicroLocationFingerprint::Measurement::PredicateMeasurement,std::allocator<CLMicroLocationFingerprint::Measurement>>::__deallocate_node((uint64_t)a1, v10);
  }
  while (v4 != a3)
  {
    std::__hash_table<CLMicroLocationFingerprint::Measurement,CLMicroLocationFingerprint::Measurement::HashMeasurement,CLMicroLocationFingerprint::Measurement::PredicateMeasurement,std::allocator<CLMicroLocationFingerprint::Measurement>>::__emplace_multi<CLMicroLocationFingerprint::Measurement const&>(a1, (_OWORD *)v4 + 1);
    v4 = (uint64_t *)*v4;
  }
}

void sub_241B30020(void *a1)
{
  uint64_t v1;
  _QWORD *v2;

  __cxa_begin_catch(a1);
  std::__hash_table<CLMicroLocationFingerprint::Measurement,CLMicroLocationFingerprint::Measurement::HashMeasurement,CLMicroLocationFingerprint::Measurement::PredicateMeasurement,std::allocator<CLMicroLocationFingerprint::Measurement>>::__deallocate_node(v1, v2);
  __cxa_rethrow();
}

void sub_241B3003C(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t std::__variant_detail::__assignment<std::__variant_detail::__traits<unsigned long long,boost::uuids::uuid,std::string>>::__generic_assign[abi:ne180100]<std::__variant_detail::__copy_assignment<std::__variant_detail::__traits<unsigned long long,boost::uuids::uuid,std::string>,(std::__variant_detail::_Trait)1> const&>(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;

  v2 = result;
  v3 = *(unsigned int *)(result + 24);
  v4 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v3 == -1)
  {
    if ((_DWORD)v4 == -1)
      return result;
  }
  else if ((_DWORD)v4 == -1)
  {
    result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_2511DA1C8[v3])(&v6, result, a2);
    *(_DWORD *)(v2 + 24) = -1;
    return result;
  }
  v5 = result;
  return ((uint64_t (*)(uint64_t *, uint64_t, uint64_t))off_2511DA560[v4])(&v5, result, a2);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8ne180100IOZNS0_12__assignmentINS0_8__traitsIJyN5boost5uuids4uuidENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEE16__generic_assignB8ne180100IRKNS0_17__copy_assignmentISH_LNS0_6_TraitE1EEEEEvOT_EUlRSP_OT0_E_JRNS0_6__baseILSL_1EJySA_SG_EEERKSX_EEEDcSP_DpT0_(uint64_t *a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t result;

  result = *a1;
  if (*(_DWORD *)(result + 24))
    return std::__variant_detail::__assignment<std::__variant_detail::__traits<unsigned long long,boost::uuids::uuid,std::string>>::__emplace[abi:ne180100]<0ul,unsigned long long const&>(result, a3);
  *a2 = *a3;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8ne180100IOZNS0_12__assignmentINS0_8__traitsIJyN5boost5uuids4uuidENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEE16__generic_assignB8ne180100IRKNS0_17__copy_assignmentISH_LNS0_6_TraitE1EEEEEvOT_EUlRSP_OT0_E_JRNS0_6__baseILSL_1EJySA_SG_EEERKSX_EEEDcSP_DpT0_(uint64_t *a1, _OWORD *a2, _OWORD *a3)
{
  uint64_t result;

  result = *a1;
  if (*(_DWORD *)(result + 24) != 1)
    return std::__variant_detail::__assignment<std::__variant_detail::__traits<unsigned long long,boost::uuids::uuid,std::string>>::__emplace[abi:ne180100]<1ul,boost::uuids::uuid const&>(result, a3);
  *a2 = *a3;
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8ne180100IOZNS0_12__assignmentINS0_8__traitsIJyN5boost5uuids4uuidENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEE16__generic_assignB8ne180100IRKNS0_17__copy_assignmentISH_LNS0_6_TraitE1EEEEEvOT_EUlRSP_OT0_E_JRNS0_6__baseILSL_1EJySA_SG_EEERKSX_EEEDcSP_DpT0_(uint64_t *a1, std::string *a2, std::string *a3)
{
  std::__variant_detail::__assignment<std::__variant_detail::__traits<unsigned long long,boost::uuids::uuid,std::string>>::__assign_alt[abi:ne180100]<2ul,std::string,std::string const&>(*a1, a2, a3);
}

uint64_t std::__variant_detail::__assignment<std::__variant_detail::__traits<unsigned long long,boost::uuids::uuid,std::string>>::__emplace[abi:ne180100]<0ul,unsigned long long const&>(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  char v6;

  v4 = *(unsigned int *)(a1 + 24);
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, uint64_t))off_2511DA1C8[v4])(&v6, a1);
  *(_QWORD *)a1 = *a2;
  *(_DWORD *)(a1 + 24) = 0;
  return a1;
}

uint64_t std::__variant_detail::__assignment<std::__variant_detail::__traits<unsigned long long,boost::uuids::uuid,std::string>>::__emplace[abi:ne180100]<1ul,boost::uuids::uuid const&>(uint64_t a1, _OWORD *a2)
{
  uint64_t v4;
  char v6;

  v4 = *(unsigned int *)(a1 + 24);
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, uint64_t))off_2511DA1C8[v4])(&v6, a1);
  *(_DWORD *)(a1 + 24) = -1;
  *(_OWORD *)a1 = *a2;
  *(_DWORD *)(a1 + 24) = 1;
  return a1;
}

_QWORD *std::__hash_table<CLMicroLocationFingerprint::Measurement,CLMicroLocationFingerprint::Measurement::HashMeasurement,CLMicroLocationFingerprint::Measurement::PredicateMeasurement,std::allocator<CLMicroLocationFingerprint::Measurement>>::__emplace_multi<CLMicroLocationFingerprint::Measurement const&>(_QWORD *a1, _OWORD *a2)
{
  _QWORD *inserted;
  _QWORD *v5[3];

  std::__hash_table<CLMicroLocationFingerprint::Measurement,CLMicroLocationFingerprint::Measurement::HashMeasurement,CLMicroLocationFingerprint::Measurement::PredicateMeasurement,std::allocator<CLMicroLocationFingerprint::Measurement>>::__construct_node<CLMicroLocationFingerprint::Measurement const&>((uint64_t)a1, a2, (uint64_t)v5);
  inserted = std::__hash_table<CLMicroLocationFingerprint::Measurement,CLMicroLocationFingerprint::Measurement::HashMeasurement,CLMicroLocationFingerprint::Measurement::PredicateMeasurement,std::allocator<CLMicroLocationFingerprint::Measurement>>::__node_insert_multi(a1, v5[0]);
  v5[0] = 0;
  std::unique_ptr<std::__hash_node<CLMicroLocationFingerprint::Measurement,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<CLMicroLocationFingerprint::Measurement,void *>>>>::reset[abi:ne180100]((uint64_t)v5, 0);
  return inserted;
}

void sub_241B30244(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<CLMicroLocationFingerprint::Measurement,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<CLMicroLocationFingerprint::Measurement,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

uint64_t std::__hash_table<CLMicroLocationFingerprint::Measurement,CLMicroLocationFingerprint::Measurement::HashMeasurement,CLMicroLocationFingerprint::Measurement::PredicateMeasurement,std::allocator<CLMicroLocationFingerprint::Measurement>>::__construct_node<CLMicroLocationFingerprint::Measurement const&>@<X0>(uint64_t a1@<X0>, _OWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t result;

  v5 = a1 + 16;
  v6 = operator new(0x40uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  *v6 = 0;
  v6[1] = 0;
  *((_OWORD *)v6 + 1) = *a2;
  v7 = std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<unsigned long long,boost::uuids::uuid,std::string>,(std::__variant_detail::_Trait)1>::__copy_constructor((uint64_t)(v6 + 4), (uint64_t)(a2 + 1));
  *(_BYTE *)(a3 + 16) = 1;
  result = CLMicroLocationFingerprint::Measurement::HashMeasurement::operator()(v7, (uint64_t)(v6 + 2));
  v6[1] = result;
  return result;
}

void sub_241B302C8(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__hash_node<CLMicroLocationFingerprint::Measurement,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<CLMicroLocationFingerprint::Measurement,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void std::__hash_table<CLMicroLocationProto::DataType,std::hash<CLMicroLocationProto::DataType>,std::equal_to<CLMicroLocationProto::DataType>,std::allocator<CLMicroLocationProto::DataType>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<CLMicroLocationProto::DataType,void *> *>>(_QWORD *a1, unsigned int *a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t i;
  uint64_t *v8;
  unint64_t v9;
  uint64_t *v10;
  _QWORD *inserted;
  uint64_t *v12;

  v6 = a1[1];
  if (!v6)
    goto LABEL_9;
  for (i = 0; i != v6; *(_QWORD *)(*a1 + 8 * i++) = 0)
    ;
  v8 = (uint64_t *)a1[2];
  a1[2] = 0;
  a1[3] = 0;
  if (v8)
  {
    while (a2 != (unsigned int *)a3)
    {
      v9 = a2[4];
      *((_DWORD *)v8 + 4) = v9;
      v10 = (uint64_t *)*v8;
      v8[1] = v9;
      inserted = (_QWORD *)std::__hash_table<CLMicroLocationProto::DataType,std::hash<CLMicroLocationProto::DataType>,std::equal_to<CLMicroLocationProto::DataType>,std::allocator<CLMicroLocationProto::DataType>>::__node_insert_multi_prepare((uint64_t)a1, v9, (_DWORD *)v8 + 4);
      std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>>>::__node_insert_multi_perform(a1, v8, inserted);
      a2 = *(unsigned int **)a2;
      v8 = v10;
      if (!v10)
        goto LABEL_9;
    }
    do
    {
      v12 = (uint64_t *)*v8;
      operator delete(v8);
      v8 = v12;
    }
    while (v12);
  }
  else
  {
LABEL_9:
    while (a2 != (unsigned int *)a3)
    {
      std::__hash_table<CLMicroLocationProto::DataType,std::hash<CLMicroLocationProto::DataType>,std::equal_to<CLMicroLocationProto::DataType>,std::allocator<CLMicroLocationProto::DataType>>::__emplace_multi<CLMicroLocationProto::DataType const&>(a1, a2 + 4);
      a2 = *(unsigned int **)a2;
    }
  }
}

void sub_241B303B4(void *a1)
{
  _QWORD *v1;
  _QWORD *v2;

  __cxa_begin_catch(a1);
  do
  {
    v2 = (_QWORD *)*v1;
    operator delete(v1);
    v1 = v2;
  }
  while (v2);
  __cxa_rethrow();
}

void sub_241B303D4(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t std::__hash_table<CLMicroLocationProto::DataType,std::hash<CLMicroLocationProto::DataType>,std::equal_to<CLMicroLocationProto::DataType>,std::allocator<CLMicroLocationProto::DataType>>::__node_insert_multi_prepare(uint64_t a1, unint64_t a2, _DWORD *a3)
{
  unint64_t v6;
  float v7;
  float v8;
  uint64_t v9;
  _BOOL8 v10;
  size_t v11;
  unint64_t v12;
  size_t v13;
  uint8x8_t v14;
  unint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t result;
  unint64_t v19;
  unint64_t v20;
  _BOOL4 v21;
  int v22;

  v6 = *(_QWORD *)(a1 + 8);
  v7 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v8 = *(float *)(a1 + 32);
  if (!v6 || (float)(v8 * (float)v6) < v7)
  {
    v9 = 2 * v6;
    v10 = v6 < 3 || (v6 & (v6 - 1)) != 0;
    v11 = v10 | v9;
    v12 = vcvtps_u32_f32(v7 / v8);
    if (v11 <= v12)
      v13 = v12;
    else
      v13 = v11;
    std::__hash_table<CLMicroLocationProto::DataType,std::hash<CLMicroLocationProto::DataType>,std::equal_to<CLMicroLocationProto::DataType>,std::allocator<CLMicroLocationProto::DataType>>::__rehash<false>(a1, v13);
    v6 = *(_QWORD *)(a1 + 8);
  }
  v14 = (uint8x8_t)vcnt_s8((int8x8_t)v6);
  v14.i16[0] = vaddlv_u8(v14);
  if (v14.u32[0] > 1uLL)
  {
    v15 = a2;
    if (v6 <= a2)
      v15 = a2 % v6;
  }
  else
  {
    v15 = (v6 - 1) & a2;
  }
  v16 = *(_QWORD *)(*(_QWORD *)a1 + 8 * v15);
  if (!v16)
    return 0;
  v17 = 0;
  do
  {
    result = v16;
    v16 = *(_QWORD *)v16;
    if (!v16)
      break;
    v19 = *(_QWORD *)(v16 + 8);
    if (v14.u32[0] > 1uLL)
    {
      v20 = *(_QWORD *)(v16 + 8);
      if (v19 >= v6)
        v20 = v19 % v6;
    }
    else
    {
      v20 = v19 & (v6 - 1);
    }
    if (v20 != v15)
      break;
    v21 = v19 == a2 && *(_DWORD *)(v16 + 16) == *a3;
    v22 = v17 & !v21;
    v17 |= v21;
  }
  while (v22 != 1);
  return result;
}

void std::__hash_table<CLMicroLocationProto::DataType,std::hash<CLMicroLocationProto::DataType>,std::equal_to<CLMicroLocationProto::DataType>,std::allocator<CLMicroLocationProto::DataType>>::__rehash<false>(uint64_t a1, size_t __n)
{
  size_t prime;
  int8x8_t v4;
  unint64_t v5;
  uint8x8_t v6;
  uint64_t v7;

  if (__n == 1)
  {
    prime = 2;
  }
  else
  {
    prime = __n;
    if ((__n & (__n - 1)) != 0)
      prime = std::__next_prime(__n);
  }
  v4 = *(int8x8_t *)(a1 + 8);
  if (prime > *(_QWORD *)&v4)
    goto LABEL_16;
  if (prime < *(_QWORD *)&v4)
  {
    v5 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(_QWORD *)&v4 < 3uLL || (v6 = (uint8x8_t)vcnt_s8(v4), v6.i16[0] = vaddlv_u8(v6), v6.u32[0] > 1uLL))
    {
      v5 = std::__next_prime(v5);
    }
    else
    {
      v7 = 1 << -(char)__clz(v5 - 1);
      if (v5 >= 2)
        v5 = v7;
    }
    if (prime <= v5)
      prime = v5;
    if (prime < *(_QWORD *)&v4)
LABEL_16:
      std::__hash_table<CLMicroLocationProto::DataType,std::hash<CLMicroLocationProto::DataType>,std::equal_to<CLMicroLocationProto::DataType>,std::allocator<CLMicroLocationProto::DataType>>::__do_rehash<false>(a1, prime);
  }
}

void std::__hash_table<CLMicroLocationProto::DataType,std::hash<CLMicroLocationProto::DataType>,std::equal_to<CLMicroLocationProto::DataType>,std::allocator<CLMicroLocationProto::DataType>>::__do_rehash<false>(uint64_t a1, unint64_t a2)
{
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t **v7;
  unint64_t v8;
  uint8x8_t v9;
  void *v10;
  uint64_t *i;
  unint64_t v12;
  uint64_t *v13;
  _QWORD *v14;

  if (a2)
  {
    if (a2 >> 61)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v4 = operator new(8 * a2);
    v5 = *(void **)a1;
    *(_QWORD *)a1 = v4;
    if (v5)
      operator delete(v5);
    v6 = 0;
    *(_QWORD *)(a1 + 8) = a2;
    do
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v6++) = 0;
    while (a2 != v6);
    v7 = *(uint64_t ***)(a1 + 16);
    if (v7)
    {
      v8 = (unint64_t)v7[1];
      v9 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
      v9.i16[0] = vaddlv_u8(v9);
      if (v9.u32[0] > 1uLL)
      {
        if (v8 >= a2)
          v8 %= a2;
      }
      else
      {
        v8 &= a2 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v8) = a1 + 16;
      for (i = *v7; *v7; i = *v7)
      {
        v12 = i[1];
        if (v9.u32[0] > 1uLL)
        {
          if (v12 >= a2)
            v12 %= a2;
        }
        else
        {
          v12 &= a2 - 1;
        }
        if (v12 == v8)
        {
          v7 = (uint64_t **)i;
        }
        else
        {
          v13 = i;
          if (*(_QWORD *)(*(_QWORD *)a1 + 8 * v12))
          {
            do
            {
              v14 = v13;
              v13 = (uint64_t *)*v13;
            }
            while (v13 && *((_DWORD *)i + 4) == *((_DWORD *)v13 + 4));
            *v7 = v13;
            *v14 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v12);
            **(_QWORD **)(*(_QWORD *)a1 + 8 * v12) = i;
          }
          else
          {
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v12) = v7;
            v7 = (uint64_t **)i;
            v8 = v12;
          }
        }
      }
    }
  }
  else
  {
    v10 = *(void **)a1;
    *(_QWORD *)a1 = 0;
    if (v10)
      operator delete(v10);
    *(_QWORD *)(a1 + 8) = 0;
  }
}

_DWORD *std::__hash_table<CLMicroLocationProto::DataType,std::hash<CLMicroLocationProto::DataType>,std::equal_to<CLMicroLocationProto::DataType>,std::allocator<CLMicroLocationProto::DataType>>::__emplace_multi<CLMicroLocationProto::DataType const&>(_QWORD *a1, unsigned int *a2)
{
  _DWORD *v4;
  unint64_t v5;
  _QWORD *inserted;

  v4 = operator new(0x18uLL);
  v5 = *a2;
  v4[4] = v5;
  *(_QWORD *)v4 = 0;
  *((_QWORD *)v4 + 1) = v5;
  inserted = (_QWORD *)std::__hash_table<CLMicroLocationProto::DataType,std::hash<CLMicroLocationProto::DataType>,std::equal_to<CLMicroLocationProto::DataType>,std::allocator<CLMicroLocationProto::DataType>>::__node_insert_multi_prepare((uint64_t)a1, v5, v4 + 4);
  std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>>>::__node_insert_multi_perform(a1, v4, inserted);
  return v4;
}

void sub_241B307E8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<CLMicroLocationProto::DataType,CLMicroLocationFingerprint::StartAndEndTimestamps>,std::__unordered_map_hasher<CLMicroLocationProto::DataType,std::__hash_value_type<CLMicroLocationProto::DataType,CLMicroLocationFingerprint::StartAndEndTimestamps>,std::hash<CLMicroLocationProto::DataType>,std::equal_to<CLMicroLocationProto::DataType>,true>,std::__unordered_map_equal<CLMicroLocationProto::DataType,std::__hash_value_type<CLMicroLocationProto::DataType,CLMicroLocationFingerprint::StartAndEndTimestamps>,std::equal_to<CLMicroLocationProto::DataType>,std::hash<CLMicroLocationProto::DataType>,true>,std::allocator<std::__hash_value_type<CLMicroLocationProto::DataType,CLMicroLocationFingerprint::StartAndEndTimestamps>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<CLMicroLocationProto::DataType,CLMicroLocationFingerprint::StartAndEndTimestamps>,void *> *>>(_QWORD *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t i;
  uint64_t *v8;
  unint64_t v9;
  uint64_t *v10;
  _QWORD *inserted;
  uint64_t *v12;

  v6 = a1[1];
  if (!v6)
    goto LABEL_9;
  for (i = 0; i != v6; *(_QWORD *)(*a1 + 8 * i++) = 0)
    ;
  v8 = (uint64_t *)a1[2];
  a1[2] = 0;
  a1[3] = 0;
  if (v8)
  {
    while (a2 != a3)
    {
      v9 = *((unsigned int *)a2 + 4);
      *((_DWORD *)v8 + 4) = v9;
      *(_OWORD *)(v8 + 3) = *(_OWORD *)(a2 + 3);
      v10 = (uint64_t *)*v8;
      v8[1] = v9;
      inserted = (_QWORD *)std::__hash_table<CLMicroLocationProto::DataType,std::hash<CLMicroLocationProto::DataType>,std::equal_to<CLMicroLocationProto::DataType>,std::allocator<CLMicroLocationProto::DataType>>::__node_insert_multi_prepare((uint64_t)a1, v9, (_DWORD *)v8 + 4);
      std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>>>::__node_insert_multi_perform(a1, v8, inserted);
      a2 = (uint64_t *)*a2;
      v8 = v10;
      if (!v10)
        goto LABEL_9;
    }
    do
    {
      v12 = (uint64_t *)*v8;
      operator delete(v8);
      v8 = v12;
    }
    while (v12);
  }
  else
  {
LABEL_9:
    while (a2 != a3)
    {
      std::__hash_table<std::__hash_value_type<CLMicroLocationProto::DataType,CLMicroLocationFingerprint::StartAndEndTimestamps>,std::__unordered_map_hasher<CLMicroLocationProto::DataType,std::__hash_value_type<CLMicroLocationProto::DataType,CLMicroLocationFingerprint::StartAndEndTimestamps>,std::hash<CLMicroLocationProto::DataType>,std::equal_to<CLMicroLocationProto::DataType>,true>,std::__unordered_map_equal<CLMicroLocationProto::DataType,std::__hash_value_type<CLMicroLocationProto::DataType,CLMicroLocationFingerprint::StartAndEndTimestamps>,std::equal_to<CLMicroLocationProto::DataType>,std::hash<CLMicroLocationProto::DataType>,true>,std::allocator<std::__hash_value_type<CLMicroLocationProto::DataType,CLMicroLocationFingerprint::StartAndEndTimestamps>>>::__emplace_multi<std::pair<CLMicroLocationProto::DataType const,CLMicroLocationFingerprint::StartAndEndTimestamps> const&>(a1, (uint64_t)(a2 + 2));
      a2 = (uint64_t *)*a2;
    }
  }
}

void sub_241B308D8(void *a1)
{
  _QWORD *v1;
  _QWORD *v2;

  __cxa_begin_catch(a1);
  do
  {
    v2 = (_QWORD *)*v1;
    operator delete(v1);
    v1 = v2;
  }
  while (v2);
  __cxa_rethrow();
}

void sub_241B308F8(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

unsigned int *std::__hash_table<std::__hash_value_type<CLMicroLocationProto::DataType,CLMicroLocationFingerprint::StartAndEndTimestamps>,std::__unordered_map_hasher<CLMicroLocationProto::DataType,std::__hash_value_type<CLMicroLocationProto::DataType,CLMicroLocationFingerprint::StartAndEndTimestamps>,std::hash<CLMicroLocationProto::DataType>,std::equal_to<CLMicroLocationProto::DataType>,true>,std::__unordered_map_equal<CLMicroLocationProto::DataType,std::__hash_value_type<CLMicroLocationProto::DataType,CLMicroLocationFingerprint::StartAndEndTimestamps>,std::equal_to<CLMicroLocationProto::DataType>,std::hash<CLMicroLocationProto::DataType>,true>,std::allocator<std::__hash_value_type<CLMicroLocationProto::DataType,CLMicroLocationFingerprint::StartAndEndTimestamps>>>::__emplace_multi<std::pair<CLMicroLocationProto::DataType const,CLMicroLocationFingerprint::StartAndEndTimestamps> const&>(_QWORD *a1, uint64_t a2)
{
  unsigned int *v4;
  unint64_t v5;
  _QWORD *inserted;

  v4 = (unsigned int *)operator new(0x28uLL);
  *((_OWORD *)v4 + 1) = *(_OWORD *)a2;
  *((_QWORD *)v4 + 4) = *(_QWORD *)(a2 + 16);
  v5 = v4[4];
  *(_QWORD *)v4 = 0;
  *((_QWORD *)v4 + 1) = v5;
  inserted = (_QWORD *)std::__hash_table<CLMicroLocationProto::DataType,std::hash<CLMicroLocationProto::DataType>,std::equal_to<CLMicroLocationProto::DataType>,std::allocator<CLMicroLocationProto::DataType>>::__node_insert_multi_prepare((uint64_t)a1, v5, v4 + 4);
  std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>>>::__node_insert_multi_perform(a1, v4, inserted);
  return v4;
}

void sub_241B30978(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t ULSettings::get<ULSettings::AdaptiveAnchorsNumDaysToKeepEnabled>()
{
  void *v0;
  void *v1;
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;

  +[ULDefaultsSingleton shared](ULDefaultsSingleton, "shared");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "defaultsDictionary");
  v1 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "ULAdaptiveAnchorsNumDaysToKeepEnabled");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "objectForKey:", v2);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  if (v3 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
    v4 = objc_msgSend(v3, "unsignedIntValue");
  else
    v4 = objc_msgSend(&unk_2511EDFC0, "unsignedIntValue");
  v5 = v4;

  return v5;
}

void sub_241B30A4C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

uint64_t ULSettings::get<ULSettings::AdaptiveAnchorsNumValidDaysForPurging>()
{
  void *v0;
  void *v1;
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;

  +[ULDefaultsSingleton shared](ULDefaultsSingleton, "shared");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "defaultsDictionary");
  v1 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "ULAdaptiveAnchorsNumValidDaysForPurging");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "objectForKey:", v2);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  if (v3 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
    v4 = objc_msgSend(v3, "unsignedIntValue");
  else
    v4 = objc_msgSend(&unk_2511EDFF0, "unsignedIntValue");
  v5 = v4;

  return v5;
}

void sub_241B30B48(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

uint64_t ULSettings::get<ULSettings::AdaptiveAnchorsMaxEntriesInAppearanceMap>()
{
  void *v0;
  void *v1;
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;

  +[ULDefaultsSingleton shared](ULDefaultsSingleton, "shared");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "defaultsDictionary");
  v1 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "ULAdaptiveAnchorsMaxEntriesInAppearanceMap");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "objectForKey:", v2);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  if (v3 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
    v4 = objc_msgSend(v3, "unsignedLongValue");
  else
    v4 = objc_msgSend(&unk_2511EDFD8, "unsignedLongValue");
  v5 = v4;

  return v5;
}

void sub_241B30C44(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void CLMicroLocationAnchorAppearanceMap::CLMicroLocationAnchorAppearanceMap(CLMicroLocationAnchorAppearanceMap *this)
{
  int v2;
  int valid;
  uint64_t v4;

  v2 = ULSettings::get<ULSettings::AdaptiveAnchorsNumDaysToKeepEnabled>();
  valid = ULSettings::get<ULSettings::AdaptiveAnchorsNumValidDaysForPurging>();
  v4 = ULSettings::get<ULSettings::AdaptiveAnchorsMaxEntriesInAppearanceMap>();
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_DWORD *)this + 8) = 1065353216;
  *((_DWORD *)this + 10) = v2;
  *((_DWORD *)this + 11) = valid;
  *((_QWORD *)this + 6) = v4;
}

void CLMicroLocationAnchorAppearanceMap::CLMicroLocationAnchorAppearanceMap(CLMicroLocationAnchorAppearanceMap *this, const CLMicroLocationProto::anchorAppearancesVector *a2)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t i;
  uint64_t v7;
  uint64_t **v8;
  int v9;
  int v10;
  __int128 v11;
  NSObject *v12;
  _OWORD v13[2];
  int v14;
  __int128 v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  CLMicroLocationAnchorAppearanceMap::CLMicroLocationAnchorAppearanceMap(this);
  v4 = *((int *)a2 + 4);
  if ((_DWORD)v4)
  {
    v5 = (uint64_t *)*((_QWORD *)a2 + 1);
    for (i = 8 * v4; i; i -= 8)
    {
      v7 = *v5;
      v8 = *(uint64_t ***)(*v5 + 24);
      v9 = *((char *)v8 + 23);
      if (v9 < 0)
      {
        if (v8[1] != (uint64_t *)16)
        {
LABEL_9:
          if (onceToken_MicroLocation_Default != -1)
            dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_98);
          v12 = logObject_MicroLocation_Default;
          if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
          {
            LOWORD(v13[0]) = 0;
            _os_log_impl(&dword_2419D9000, v12, OS_LOG_TYPE_DEFAULT, "#Warning The protobuf Anchor Appearance struct does not have a valid device ID", (uint8_t *)v13, 2u);
          }
          goto LABEL_13;
        }
        v8 = (uint64_t **)*v8;
      }
      else if (v9 != 16)
      {
        goto LABEL_9;
      }
      v15 = *(_OWORD *)v8;
      v10 = *(_DWORD *)(v7 + 32);
      v11 = *(_OWORD *)(v7 + 8);
      v13[0] = v15;
      v13[1] = v11;
      v14 = v10;
      std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>>>::__emplace_unique_key_args<boost::uuids::uuid,std::pair<boost::uuids::uuid const,CLMicroLocationAnchorAppearance>>((uint64_t)this, v13, (uint64_t)v13);
LABEL_13:
      ++v5;
    }
  }
}

void sub_241B30E40(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

void CLMicroLocationAnchorAppearanceMap::toProtobuf(CLMicroLocationAnchorAppearanceMap *this@<X0>, int *a2@<X8>)
{
  uint64_t *v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  uint8_t v15[8];
  __int128 v16;
  int v17;
  int v18;

  CLMicroLocationProto::anchorAppearancesVector::anchorAppearancesVector((uint64_t)a2);
  v4 = (uint64_t *)*((_QWORD *)this + 2);
  if (v4)
  {
    v5 = MEMORY[0x24BEDD958];
    do
    {
      v6 = a2[5];
      v7 = a2[4];
      if ((int)v7 >= v6)
      {
        if (v6 == a2[6])
        {
          wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a2 + 2));
          v6 = a2[5];
        }
        a2[5] = v6 + 1;
        v9 = wireless_diagnostics::google::protobuf::internal::GenericTypeHandler<CLMicroLocationProto::AnchorAppearance>::New();
        v12 = *((_QWORD *)a2 + 1);
        v13 = a2[4];
        a2[4] = v13 + 1;
        *(_QWORD *)(v12 + 8 * v13) = v9;
        if (!v9)
        {
LABEL_11:
          if (onceToken_MicroLocation_Default != -1)
            dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_98);
          v14 = logObject_MicroLocation_Default;
          if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_ERROR))
          {
            *(_WORD *)v15 = 0;
            _os_log_impl(&dword_2419D9000, v14, OS_LOG_TYPE_ERROR, "Got nullptr from CLMicroLocationProto add_anchorappearances", v15, 2u);
          }
          goto LABEL_15;
        }
      }
      else
      {
        v8 = *((_QWORD *)a2 + 1);
        a2[4] = v7 + 1;
        v9 = *(_QWORD *)(v8 + 8 * v7);
        if (!v9)
          goto LABEL_11;
      }
      CLMicroLocationProto::AnchorAppearance::AnchorAppearance((uint64_t)v15);
      v16 = *((_OWORD *)v4 + 2);
      v10 = *((_DWORD *)v4 + 12);
      v18 |= 7u;
      v17 = v10;
      CLMicroLocationProto::AnchorAppearance::CopyFrom((CLMicroLocationProto::AnchorAppearance *)v9, (const CLMicroLocationProto::AnchorAppearance *)v15);
      CLMicroLocationProto::AnchorAppearance::~AnchorAppearance((CLMicroLocationProto::AnchorAppearance *)v15);
      *(_DWORD *)(v9 + 40) |= 8u;
      if (*(_QWORD *)(v9 + 24) == v5)
      {
        v11 = (_QWORD *)operator new();
        *v11 = 0;
        v11[1] = 0;
        v11[2] = 0;
        *(_QWORD *)(v9 + 24) = v11;
      }
      MEMORY[0x2426A02D0]();
LABEL_15:
      v4 = (uint64_t *)*v4;
    }
    while (v4);
  }
}

void sub_241B31024(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  CLMicroLocationProto::anchorAppearancesVector *v9;

  CLMicroLocationProto::AnchorAppearance::~AnchorAppearance((CLMicroLocationProto::AnchorAppearance *)&a9);
  CLMicroLocationProto::anchorAppearancesVector::~anchorAppearancesVector(v9);
  _Unwind_Resume(a1);
}

double *CLMicroLocationAnchorAppearanceMap::updateSeenAnchor(_QWORD *a1, _QWORD *a2, double a3, double a4)
{
  double *result;
  __int128 v9;
  double v10;
  double v11;
  int v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  result = (double *)std::__hash_table<std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>>>::find<boost::uuids::uuid>(a1, a2);
  if (result)
  {
    result[5] = a4;
    *((_DWORD *)result + 12) = 0;
  }
  else
  {
    v9 = *(_OWORD *)a2;
    v10 = a3;
    v11 = a4;
    v12 = 0;
    return (double *)std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>>>::__emplace_unique_key_args<boost::uuids::uuid,std::pair<boost::uuids::uuid const,CLMicroLocationAnchorAppearance>>((uint64_t)a1, &v9, (uint64_t)&v9);
  }
  return result;
}

void CLMicroLocationAnchorAppearanceMap::updateSeenAnchors(uint64_t a1, _QWORD *a2, int a3, double a4, double a5)
{
  uint64_t v9;
  _QWORD *i;
  _QWORD *v11;
  _QWORD *j;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  _QWORD *v19;
  char *v20;
  char *v21;
  char *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  double v34;
  BOOL v35;
  NSObject *v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  void *__p;
  _BYTE v41[20];
  __int16 v42;
  uint64_t v43;
  __int16 v44;
  unint64_t v45;
  __int16 v46;
  unint64_t v47;
  __int16 v48;
  uint64_t v49;
  uint64_t v50;

  v50 = *MEMORY[0x24BDAC8D0];
  v9 = *(_QWORD *)(a1 + 24);
  if (a3)
  {
    for (i = *(_QWORD **)(a1 + 16); i; i = (_QWORD *)*i)
    {
      if (!std::__hash_table<std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>>>::find<boost::uuids::uuid>(a2, i + 2))
      {
        __p = i + 2;
        v11 = std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>>>::__emplace_unique_key_args<boost::uuids::uuid,std::piecewise_construct_t const&,std::tuple<boost::uuids::uuid const&>,std::tuple<>>(a1, i + 2, (uint64_t)&std::piecewise_construct, (__int128 **)&__p);
        ++*((_DWORD *)v11 + 12);
      }
    }
  }
  for (j = (_QWORD *)a2[2]; j; j = (_QWORD *)*j)
    CLMicroLocationAnchorAppearanceMap::updateSeenAnchor((_QWORD *)a1, j + 2, a4, a5);
  v13 = *(_QWORD *)(a1 + 16);
  v14 = *(_QWORD *)(a1 + 24);
  v15 = v14;
  if (v13)
  {
    do
    {
      if (*(_DWORD *)(v13 + 48) >= *(_DWORD *)(a1 + 44))
        v13 = std::__hash_table<boost::uuids::uuid,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,std::allocator<boost::uuids::uuid>>::erase((_QWORD *)a1, (uint64_t *)v13);
      else
        v13 = *(_QWORD *)v13;
    }
    while (v13);
    v15 = *(_QWORD *)(a1 + 24);
  }
  v16 = *(_QWORD *)(a1 + 48);
  v17 = v15 - v16;
  if (v15 > v16 && v16 != 0)
  {
    __p = 0;
    *(_QWORD *)v41 = 0;
    *(_QWORD *)&v41[8] = 0;
    std::vector<unsigned long>::reserve(&__p, v15);
    v19 = *(_QWORD **)(a1 + 16);
    if (v19)
    {
      v20 = *(char **)v41;
      do
      {
        if ((unint64_t)v20 >= *(_QWORD *)&v41[8])
        {
          v22 = (char *)__p;
          v23 = (v20 - (_BYTE *)__p) >> 3;
          v24 = v23 + 1;
          if ((unint64_t)(v23 + 1) >> 61)
            std::vector<CLMicroLocationProto::ConfidenceReason>::__throw_length_error[abi:ne180100]();
          v25 = *(_QWORD *)&v41[8] - (_QWORD)__p;
          if ((uint64_t)(*(_QWORD *)&v41[8] - (_QWORD)__p) >> 2 > v24)
            v24 = v25 >> 2;
          if ((unint64_t)v25 >= 0x7FFFFFFFFFFFFFF8)
            v26 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v26 = v24;
          if (v26)
          {
            v27 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CLMicroLocationWiFiChannelHistogram>>((uint64_t)&v41[8], v26);
            v22 = (char *)__p;
            v20 = *(char **)v41;
          }
          else
          {
            v27 = 0;
          }
          v28 = &v27[8 * v23];
          *(_QWORD *)v28 = v19[5];
          v21 = v28 + 8;
          while (v20 != v22)
          {
            v29 = *((_QWORD *)v20 - 1);
            v20 -= 8;
            *((_QWORD *)v28 - 1) = v29;
            v28 -= 8;
          }
          __p = v28;
          *(_QWORD *)v41 = v21;
          *(_QWORD *)&v41[8] = &v27[8 * v26];
          if (v22)
            operator delete(v22);
        }
        else
        {
          *(_QWORD *)v20 = v19[5];
          v21 = v20 + 8;
        }
        *(_QWORD *)v41 = v21;
        v19 = (_QWORD *)*v19;
        v20 = v21;
      }
      while (v19);
    }
    else
    {
      v21 = *(char **)v41;
    }
    v30 = 126 - 2 * __clz((v21 - (_BYTE *)__p) >> 3);
    if (v21 == __p)
      v31 = 0;
    else
      v31 = v30;
    std::__introsort<std::_ClassicAlgPolicy,std::greater<std::chrono::time_point<cl::chrono::CFAbsoluteTimeClock,std::chrono::duration<long double,std::ratio<1l,1l>>>> &,std::chrono::time_point<cl::chrono::CFAbsoluteTimeClock,std::chrono::duration<long double,std::ratio<1l,1l>>>*,false>((uint64_t)__p, (double *)v21, (uint64_t)&v39, v31, 1);
    v32 = __p;
    v33 = *(_QWORD *)(a1 + 16);
    if (!v33 || !v17)
      goto LABEL_54;
    v34 = *((double *)__p + *(_QWORD *)(a1 + 48) - 1);
    do
    {
      if (v34 < *(double *)(v33 + 40))
      {
        v33 = *(_QWORD *)v33;
      }
      else
      {
        v33 = std::__hash_table<boost::uuids::uuid,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,std::allocator<boost::uuids::uuid>>::erase((_QWORD *)a1, (uint64_t *)v33);
        --v17;
      }
      if (v33)
        v35 = v17 == 0;
      else
        v35 = 1;
    }
    while (!v35);
    v32 = __p;
    if (__p)
    {
LABEL_54:
      *(_QWORD *)v41 = v32;
      operator delete(v32);
    }
  }
  if (onceToken_MicroLocation_Default != -1)
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_98);
  v36 = logObject_MicroLocation_Default;
  if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
  {
    v37 = a2[3];
    v38 = *(_QWORD *)(a1 + 24);
    __p = (void *)68290307;
    *(_WORD *)v41 = 2082;
    *(_QWORD *)&v41[2] = "";
    *(_WORD *)&v41[10] = 2049;
    *(_QWORD *)&v41[12] = v9;
    v42 = 2049;
    v43 = v37;
    v44 = 2049;
    v45 = v14;
    v46 = 2049;
    v47 = v15;
    v48 = 2049;
    v49 = v38;
    _os_log_impl(&dword_2419D9000, v36, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"updateSeenAnchors\", \"Anchors map initial size\":%{private}lu, \"Received daily IDS ID set size\":%{private}lu, \"Size with new anchors\":%{private}lu, \"Size after purging\":%{private}lu, \"Size after max entries limit\":%{private}lu}", (uint8_t *)&__p, 0x44u);
  }
}

void sub_241B31474(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t CLMicroLocationAnchorAppearanceMap::isAnchorValid(uint64_t a1, uint64_t a2, double *a3)
{
  uint64_t result;
  double v7;
  double v8;
  __int128 v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  if ((*(_DWORD *)(a2 + 8) - 5) > 1)
    return 1;
  if (*(_DWORD *)(a2 + 40) != 1)
    return 0;
  v9 = *(_OWORD *)(a2 + 16);
  result = (uint64_t)std::__hash_table<std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>>>::find<boost::uuids::uuid>((_QWORD *)a1, &v9);
  if (!result)
    return result;
  if ((v7 = *(double *)(result + 32), *(double *)a2 >= v7)
    && ((v8 = *(double *)(result + 40), v8 >= *(double *)a2) || *(_DWORD *)(result + 48) < *(_DWORD *)(a1 + 40))
    && *a3 >= v7
    && (v8 >= *a3 || *(_DWORD *)(result + 48) < *(_DWORD *)(a1 + 40)))
  {
    return 1;
  }
  else
  {
    return 0;
  }
}

BOOL CLMicroLocationAnchorAppearanceMap::isMeasurementFromValidNonWiFiAnchor(CLMicroLocationAnchorAppearanceMap *this, const CLMicroLocationFingerprint::Measurement *a2)
{
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  double *v12;
  _BOOL8 v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  _BYTE *v21;
  _QWORD v22[2];
  _QWORD v23[3];
  _QWORD *v24;
  _QWORD v25[3];
  _QWORD *v26;
  _QWORD v27[3];
  _QWORD *v28;
  _BYTE v29[24];
  _BYTE *v30;
  _BYTE v31[24];
  _BYTE *v32;
  _BYTE v33[24];
  _BYTE *v34;
  uint64_t v35;

  v35 = *MEMORY[0x24BDAC8D0];
  v28 = v27;
  v26 = v25;
  v27[0] = &off_2511DA5C0;
  v23[0] = &off_2511DA6E0;
  v24 = v23;
  v25[0] = &off_2511DA650;
  CLMicroLocationUtils::DeviceIdVisitor<boost::uuids::uuid>::DeviceIdVisitor((uint64_t)v29, (uint64_t)v27, (uint64_t)v25, (uint64_t)v23);
  v4 = v24;
  if (v24 == v23)
  {
    v5 = 4;
    v4 = v23;
  }
  else
  {
    if (!v24)
      goto LABEL_6;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_6:
  v6 = v26;
  if (v26 == v25)
  {
    v7 = 4;
    v6 = v25;
  }
  else
  {
    if (!v26)
      goto LABEL_11;
    v7 = 5;
  }
  (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_11:
  v8 = v28;
  if (v28 == v27)
  {
    v9 = 4;
    v8 = v27;
  }
  else
  {
    if (!v28)
      goto LABEL_16;
    v9 = 5;
  }
  (*(void (**)(void))(*v8 + 8 * v9))();
LABEL_16:
  v10 = *((unsigned int *)a2 + 10);
  if ((_DWORD)v10 == -1)
    std::__throw_bad_variant_access[abi:ne180100]();
  v21 = v29;
  v22[0] = ((uint64_t (*)(_BYTE **, char *))off_2511DA598[v10])(&v21, (char *)a2 + 16);
  v22[1] = v11;
  v12 = (double *)std::__hash_table<std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>>>::find<boost::uuids::uuid>(this, v22);
  v13 = v12 && *(double *)a2 >= v12[4] && (v12[5] >= *(double *)a2 || *((_DWORD *)v12 + 12) < *((_DWORD *)this + 10));
  v14 = v34;
  if (v34 == v33)
  {
    v15 = 4;
    v14 = v33;
  }
  else
  {
    if (!v34)
      goto LABEL_28;
    v15 = 5;
  }
  (*(void (**)(void))(*v14 + 8 * v15))();
LABEL_28:
  v16 = v32;
  if (v32 == v31)
  {
    v17 = 4;
    v16 = v31;
  }
  else
  {
    if (!v32)
      goto LABEL_33;
    v17 = 5;
  }
  (*(void (**)(void))(*v16 + 8 * v17))();
LABEL_33:
  v18 = v30;
  if (v30 == v29)
  {
    v19 = 4;
    v18 = v29;
    goto LABEL_37;
  }
  if (v30)
  {
    v19 = 5;
LABEL_37:
    (*(void (**)(void))(*v18 + 8 * v19))();
  }
  return v13;
}

void sub_241B317DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  va_list va;

  va_start(va, a16);
  CLMicroLocationUtils::DeviceIdVisitor<std::string>::~DeviceIdVisitor((uint64_t *)va);
  _Unwind_Resume(a1);
}

CLMicroLocationProto::Measurement *CLMicroLocationAnchorAppearanceMap::updateAnchorIdSetFromMeasurements(CLMicroLocationProto::Measurement *result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t **v7;
  uint64_t v8;
  __int128 v9;
  char v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  v2 = *a2;
  v3 = a2[1];
  if (*a2 != v3)
  {
    v4 = (uint64_t)result;
    do
    {
      v5 = *(_DWORD *)(v2 + 104);
      if ((v5 & 0x40) != 0)
      {
        v8 = *(_QWORD *)(v2 + 80);
        if (!v8)
        {
          result = (CLMicroLocationProto::Measurement *)CLMicroLocationProto::Measurement::default_instance(result);
          v8 = *((_QWORD *)result + 6);
        }
        if ((*(_BYTE *)(v8 + 64) & 0x80) == 0)
          goto LABEL_15;
        v7 = *(uint64_t ***)(v8 + 48);
      }
      else
      {
        if ((v5 & 0x80) == 0)
          goto LABEL_15;
        v6 = *(_QWORD *)(v2 + 88);
        if (!v6)
        {
          result = (CLMicroLocationProto::Measurement *)CLMicroLocationProto::Measurement::default_instance(result);
          v6 = *((_QWORD *)result + 7);
        }
        if ((*(_BYTE *)(v6 + 56) & 0x10) == 0)
          goto LABEL_15;
        v7 = *(uint64_t ***)(v6 + 32);
      }
      result = (CLMicroLocationProto::Measurement *)CLMicroLocationProtobufHelper::uuidFromProtobuf(v7, &v9);
      if (v10)
        result = (CLMicroLocationProto::Measurement *)std::__hash_table<boost::uuids::uuid,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,std::allocator<boost::uuids::uuid>>::__emplace_unique_key_args<boost::uuids::uuid,boost::uuids::uuid const&>(v4, &v9, &v9);
LABEL_15:
      v2 += 120;
    }
    while (v2 != v3);
  }
  return result;
}

void CLMicroLocationAnchorValueStatisticsMap::CLMicroLocationAnchorValueStatisticsMap(CLMicroLocationAnchorValueStatisticsMap *this, const CLMicroLocationProto::ClusterAnchorValueStatisticsVector *a2)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  __int128 *v11;
  __int128 v12;
  NSObject *v13;
  __n128 v14;
  std::string v15;
  uint8_t buf[32];
  int v17;
  __int128 v18;
  char v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_DWORD *)this + 8) = 1065353216;
  v3 = *((int *)a2 + 4);
  if ((_DWORD)v3)
  {
    v4 = (uint64_t *)*((_QWORD *)a2 + 1);
    v5 = &v4[v3];
    do
    {
      v6 = *v4;
      CLMicroLocationProtobufHelper::uuidFromProtobuf(*(uint64_t ***)(*v4 + 32), &v18);
      if (v19)
      {
        memset(buf, 0, sizeof(buf));
        v17 = 1065353216;
        v7 = *(int *)(v6 + 16);
        if ((_DWORD)v7)
        {
          v8 = *(uint64_t **)(v6 + 8);
          v9 = 8 * v7;
          do
          {
            v10 = *v8;
            v11 = *(__int128 **)(*v8 + 24);
            if (*((char *)v11 + 23) < 0)
            {
              std::string::__init_copy_ctor_external(&v15, *(const std::string::value_type **)v11, *((_QWORD *)v11 + 1));
            }
            else
            {
              v12 = *v11;
              v15.__r_.__value_.__r.__words[2] = *((_QWORD *)v11 + 2);
              *(_OWORD *)&v15.__r_.__value_.__l.__data_ = v12;
            }
            v14 = 0uLL;
            v14 = *(__n128 *)(v10 + 8);
            std::__hash_table<std::__hash_value_type<std::string,AnchorValueStatistics>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AnchorValueStatistics>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AnchorValueStatistics>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,AnchorValueStatistics>>>::__emplace_unique_key_args<std::string,std::string&,AnchorValueStatistics>((uint64_t)buf, (unsigned __int8 *)&v15, (uint64_t)&v15, &v14);
            if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v15.__r_.__value_.__l.__data_);
            ++v8;
            v9 -= 8;
          }
          while (v9);
        }
        std::__hash_table<std::__hash_value_type<boost::uuids::uuid,std::unordered_map<std::string,AnchorValueStatistics>>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::unordered_map<std::string,AnchorValueStatistics>>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::unordered_map<std::string,AnchorValueStatistics>>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,std::unordered_map<std::string,AnchorValueStatistics>>>>::__emplace_unique_key_args<boost::uuids::uuid,boost::uuids::uuid&,std::unordered_map<std::string,AnchorValueStatistics>>((uint64_t)this, &v18, &v18, (uint64_t *)buf);
        std::__hash_table<std::__hash_value_type<std::string,AnchorValueStatistics>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AnchorValueStatistics>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AnchorValueStatistics>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,AnchorValueStatistics>>>::~__hash_table((uint64_t)buf);
      }
      else
      {
        if (onceToken_MicroLocation_Default != -1)
          dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_98);
        v13 = logObject_MicroLocation_Default;
        if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 68289026;
          *(_DWORD *)&buf[4] = 0;
          *(_WORD *)&buf[8] = 2082;
          *(_QWORD *)&buf[10] = "";
          _os_log_impl(&dword_2419D9000, v13, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#Warning, the protobuf ClusterAnchorValueStatistics struct doesn not have a valid cluster UUID\"}", buf, 0x12u);
        }
      }
      ++v4;
    }
    while (v4 != v5);
  }
}

void sub_241B31B58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20)
{
  uint64_t v20;

  std::__hash_table<std::__hash_value_type<std::string,AnchorValueStatistics>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AnchorValueStatistics>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AnchorValueStatistics>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,AnchorValueStatistics>>>::~__hash_table((uint64_t)&a20);
  std::__hash_table<std::__hash_value_type<boost::uuids::uuid,std::unordered_map<std::string,AnchorValueStatistics>>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::unordered_map<std::string,AnchorValueStatistics>>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::unordered_map<std::string,AnchorValueStatistics>>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,std::unordered_map<std::string,AnchorValueStatistics>>>>::~__hash_table(v20);
  _Unwind_Resume(a1);
}

void CLMicroLocationAnchorValueStatisticsMap::CLMicroLocationAnchorValueStatisticsMap(CLMicroLocationAnchorValueStatisticsMap *this, const CLMicroLocationModel *a2, const CLMicroLocationFingerprintPool *a3)
{
  _QWORD *v5;
  uint64_t v6;
  uuid *v7;
  uuid *v8;
  uint64_t v9;
  uint64_t v10;
  __int128 *v11;
  NSObject *v12;
  NSObject *v13;
  uint64_t v14;
  NSObject *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *i;
  _BOOL4 isMeasurementFromValidNonWiFiAnchor;
  NSObject *v22;
  void **v23;
  uint64_t v24;
  double v25;
  NSObject *v26;
  uint64_t *j;
  int v28;
  NSObject *v29;
  void **v30;
  double v31;
  double v32;
  _QWORD *v33;
  double v34;
  _QWORD *v35;
  CLMicroLocationProtobufHelper *v36;
  uint64_t *v37;
  int v38;
  float *v39;
  float *v40;
  float v41;
  _QWORD *v42;
  unsigned __int8 *v43;
  _QWORD *v44;
  unsigned __int8 *v45;
  _QWORD *v46;
  unsigned __int8 *v47;
  _QWORD *v48;
  unsigned __int8 *v49;
  float v50;
  _QWORD *v51;
  unsigned __int8 *v52;
  _QWORD *v53;
  NSObject *v54;
  NSObject *v55;
  NSObject *v56;
  int v57;
  void **v58;
  void **v59;
  void **v60;
  void **v61;
  double v62;
  NSObject *v63;
  const char *v64;
  _QWORD *v65;
  unsigned __int8 *v66;
  _QWORD *v67;
  NSObject *v68;
  NSObject *v69;
  int v70;
  void **v71;
  void **v72;
  void **v73;
  void **v74;
  double v75;
  _QWORD *v77;
  _QWORD *v78;
  _QWORD *v79;
  uint64_t v80;
  const CLMicroLocationModel *v81;
  CLMicroLocationProtobufHelper *v82;
  void *v83[2];
  char v84;
  void *v85[2];
  char v86;
  void *__p[2];
  char v88;
  __int128 v89;
  __int128 v90;
  int v91;
  _OWORD v92[2];
  int v93;
  __int128 v94;
  __int128 v95;
  int v96;
  __int128 v97;
  __int128 v98;
  int v99;
  uint8_t buf[8];
  __int16 v101;
  const char *v102;
  __int16 v103;
  _BYTE v104[24];
  __int16 v105;
  double v106;
  __int16 v107;
  double v108;
  char v109;
  uint64_t v110;

  v110 = *MEMORY[0x24BDAC8D0];
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_DWORD *)this + 8) = 1065353216;
  if (CLMicroLocationModel::isValid(a2))
  {
    v97 = 0u;
    v98 = 0u;
    v99 = 1065353216;
    v81 = a2;
    v5 = (_QWORD *)*((_QWORD *)a2 + 46);
    if (v5)
    {
      v6 = 0;
      do
      {
        v94 = 0uLL;
        *(_QWORD *)&v95 = 0;
        v8 = (uuid *)v5[4];
        v7 = (uuid *)v5[5];
        while (v8 != v7)
        {
          CLMicroLocationFingerprintPool::at(a3, v8, buf);
          if (v109)
          {
            v9 = *((_QWORD *)&v94 + 1);
            if (*((_QWORD *)&v94 + 1) >= (unint64_t)v95)
            {
              v10 = std::vector<CLMicroLocationFingerprint>::__push_back_slow_path<CLMicroLocationFingerprint const&>((uint64_t *)&v94, (uint64_t)buf);
            }
            else
            {
              std::allocator<CLMicroLocationFingerprint>::construct[abi:ne180100]<CLMicroLocationFingerprint,CLMicroLocationFingerprint const&>((uint64_t)&v95, *((uint64_t *)&v94 + 1), (uint64_t)buf);
              v10 = v9 + 192;
            }
            *((_QWORD *)&v94 + 1) = v10;
            ++v6;
          }
          std::__optional_destruct_base<CLMicroLocationFingerprint,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)buf);
          ++v8;
        }
        *(_QWORD *)&v92[0] = v5 + 2;
        v11 = (__int128 *)(std::__hash_table<std::__hash_value_type<boost::uuids::uuid,std::vector<CLMicroLocationFingerprint>>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::vector<CLMicroLocationFingerprint>>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::vector<CLMicroLocationFingerprint>>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,std::vector<CLMicroLocationFingerprint>>>>::__emplace_unique_key_args<boost::uuids::uuid,std::piecewise_construct_t const&,std::tuple<boost::uuids::uuid const&>,std::tuple<>>((uint64_t)&v97, v5 + 2, (uint64_t)&std::piecewise_construct, (_OWORD **)v92)+ 4);
        if (v11 != &v94)
          std::vector<CLMicroLocationFingerprint>::__assign_with_size[abi:ne180100]<CLMicroLocationFingerprint*,CLMicroLocationFingerprint*>((uint64_t)v11, v94, *((uint64_t *)&v94 + 1), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v94 + 1) - v94) >> 6));
        *(_QWORD *)buf = &v94;
        std::vector<CLMicroLocationFingerprint>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
        v5 = (_QWORD *)*v5;
      }
      while (v5);
    }
    else
    {
      v6 = 0;
    }
    if (onceToken_MicroLocation_Default != -1)
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_98);
    v13 = logObject_MicroLocation_Default;
    if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
    {
      v14 = *((_QWORD *)v81 + 47);
      *(_DWORD *)buf = 68289538;
      *(_DWORD *)&buf[4] = 0;
      v101 = 2082;
      v102 = "";
      v103 = 2050;
      *(_QWORD *)v104 = v14;
      *(_WORD *)&v104[8] = 2050;
      *(_QWORD *)&v104[10] = v6;
      _os_log_impl(&dword_2419D9000, v13, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLMicroLocationAnchorValueStatisticsMap, start analysis\", \"Num Clusters\":%{public}lu, \"Num Found Fingerprints\":%{public}lu}", buf, 0x26u);
    }
    v94 = 0u;
    v95 = 0u;
    v96 = 1065353216;
    memset(v92, 0, sizeof(v92));
    v93 = 1065353216;
    v89 = 0u;
    v90 = 0u;
    v91 = 1065353216;
    if (onceToken_MicroLocation_Default != -1)
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_98);
    v15 = logObject_MicroLocation_Default;
    if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
    {
      v16 = *((_QWORD *)v81 + 5);
      *(_DWORD *)buf = 68289282;
      *(_DWORD *)&buf[4] = 0;
      v101 = 2082;
      v102 = "";
      v103 = 2050;
      *(_QWORD *)v104 = v16;
      _os_log_impl(&dword_2419D9000, v15, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLMicroLocationAnchorValueStatisticsMap, anchorAppearanceMap\", \"Size\":%{public}lu}", buf, 0x1Cu);
    }
    v17 = (_QWORD *)v98;
    if ((_QWORD)v98)
    {
      do
      {
        v19 = v17[4];
        v18 = v17[5];
        v79 = v17;
        v80 = v18;
        while (v19 != v18)
        {
          for (i = *(uint64_t **)(v19 + 16); i; i = (uint64_t *)*i)
          {
            isMeasurementFromValidNonWiFiAnchor = CLMicroLocationAnchorAppearanceMap::isMeasurementFromValidNonWiFiAnchor((const CLMicroLocationModel *)((char *)v81 + 16), (const CLMicroLocationFingerprint::Measurement *)(i + 2));
            if (isMeasurementFromValidNonWiFiAnchor)
              std::__hash_table<CLMicroLocationFingerprint::Measurement,CLMicroLocationFingerprint::Measurement::HashMeasurement,CLMicroLocationFingerprint::Measurement::PredicateMeasurement,std::allocator<CLMicroLocationFingerprint::Measurement>>::__emplace_unique_key_args<CLMicroLocationFingerprint::Measurement,CLMicroLocationFingerprint::Measurement const&>((uint64_t)&v89, (uint64_t)(i + 2), (_OWORD *)i + 1);
            if (onceToken_MicroLocation_Default != -1)
              dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_98);
            v22 = (id)logObject_MicroLocation_Default;
            if (os_log_type_enabled(v22, OS_LOG_TYPE_DEBUG))
            {
              CLMicroLocationFingerprint::Measurement::getHumanReadableDeviceId((CLMicroLocationFingerprint::Measurement *)(i + 2));
              v23 = __p;
              if (v88 < 0)
                v23 = (void **)__p[0];
              v24 = *((unsigned int *)i + 6);
              v25 = *((float *)i + 7);
              *(_DWORD *)buf = 68290050;
              *(_DWORD *)&buf[4] = 0;
              v101 = 2082;
              v102 = "";
              v103 = 1026;
              *(_DWORD *)v104 = isMeasurementFromValidNonWiFiAnchor;
              *(_WORD *)&v104[4] = 2082;
              *(_QWORD *)&v104[6] = v23;
              *(_WORD *)&v104[14] = 2050;
              *(_QWORD *)&v104[16] = v24;
              v105 = 2050;
              v106 = v25;
              _os_log_impl(&dword_2419D9000, v22, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"measurement\", \"Inserted to set\":%{public}hhd, \"DeviceId\":%{public, location:escape_only}s, \"DataType\":%{public}lu, \"Measured Value\":\"%{public}.3f\"}", buf, 0x36u);
              if (v88 < 0)
                operator delete(__p[0]);
            }

          }
          v19 += 192;
          v18 = v80;
        }
        v17 = (_QWORD *)*v79;
      }
      while (*v79);
    }
    if (onceToken_MicroLocation_Default != -1)
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_98);
    v26 = logObject_MicroLocation_Default;
    if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 68289282;
      *(_DWORD *)&buf[4] = 0;
      v101 = 2082;
      v102 = "";
      v103 = 2050;
      *(_QWORD *)v104 = *((_QWORD *)&v90 + 1);
      _os_log_impl(&dword_2419D9000, v26, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLMicroLocationAnchorValueStatisticsMap, measurement set\", \"Size\":%{public}lu}", buf, 0x1Cu);
    }
    if (onceToken_MicroLocation_Default != -1)
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_98);
    if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEBUG))
    {
      for (j = (uint64_t *)v90; j; j = (uint64_t *)*j)
      {
        v28 = *((_DWORD *)j + 6);
        CLMicroLocationFingerprint::Measurement::getHumanReadableDeviceId((CLMicroLocationFingerprint::Measurement *)(j + 2));
        if (onceToken_MicroLocation_Default != -1)
          dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_98);
        v29 = logObject_MicroLocation_Default;
        if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEBUG))
        {
          v30 = __p;
          if (v88 < 0)
            v30 = (void **)__p[0];
          *(_DWORD *)buf = 68289539;
          *(_DWORD *)&buf[4] = 0;
          v101 = 2082;
          v102 = "";
          v103 = 1026;
          *(_DWORD *)v104 = v28;
          *(_WORD *)&v104[4] = 2081;
          *(_QWORD *)&v104[6] = v30;
          _os_log_impl(&dword_2419D9000, v29, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"unique valid anchor\", \"dataType\":%{public}d, \"deviceId\":%{private, location:escape_only}s}", buf, 0x22u);
        }
        if (v88 < 0)
          operator delete(__p[0]);
      }
    }
    v31 = ULSettings::get<ULSettings::ClusterAnchorValueStatisticsBleRssiSentinelValue>();
    v32 = ULSettings::get<ULSettings::ClusterAnchorValueStatisticsUwbRangeSentinelValue>();
    v33 = (_QWORD *)v98;
    if ((_QWORD)v98)
    {
      v34 = v32;
      while (1)
      {
        v35 = (_QWORD *)v33[4];
        v77 = v33;
        v78 = (_QWORD *)v33[5];
        if (v35 != v78)
          break;
LABEL_128:
        v33 = (_QWORD *)*v77;
        if (!*v77)
          goto LABEL_129;
      }
      v36 = (CLMicroLocationProtobufHelper *)(v33 + 2);
      while (1)
      {
        v37 = (uint64_t *)v90;
        if ((_QWORD)v90)
          break;
LABEL_127:
        v35 += 24;
        if (v35 == v78)
          goto LABEL_128;
      }
      v82 = (CLMicroLocationProtobufHelper *)(v35 + 5);
      while (1)
      {
        v38 = *((_DWORD *)v37 + 6);
        CLMicroLocationFingerprint::Measurement::getHumanReadableDeviceId((CLMicroLocationFingerprint::Measurement *)(v37 + 2));
        v39 = (float *)std::__hash_table<CLMicroLocationFingerprint::Measurement,CLMicroLocationFingerprint::Measurement::HashMeasurement,CLMicroLocationFingerprint::Measurement::PredicateMeasurement,std::allocator<CLMicroLocationFingerprint::Measurement>>::find<CLMicroLocationFingerprint::Measurement>(v35, (uint64_t)(v37 + 2));
        v40 = v39;
        if (!v39)
        {
          if (v38 == 5)
          {
            *(_QWORD *)buf = v36;
            v65 = std::__hash_table<std::__hash_value_type<boost::uuids::uuid,std::unordered_map<std::string,std::pair<double,int>>>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::unordered_map<std::string,std::pair<double,int>>>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::unordered_map<std::string,std::pair<double,int>>>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,std::unordered_map<std::string,std::pair<double,int>>>>>::__emplace_unique_key_args<boost::uuids::uuid,std::piecewise_construct_t const&,std::tuple<boost::uuids::uuid const&>,std::tuple<>>((uint64_t)&v94, v36, (uint64_t)&std::piecewise_construct, (_OWORD **)buf);
            *(_QWORD *)buf = __p;
            v66 = std::__hash_table<std::__hash_value_type<std::string,std::pair<double,int>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::pair<double,int>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::pair<double,int>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::pair<double,int>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)(v65 + 4), (unsigned __int8 *)__p, (uint64_t)&std::piecewise_construct, (__int128 **)buf);
            *((double *)v66 + 5) = v31 + *((double *)v66 + 5);
            *(_QWORD *)buf = v36;
            v67 = std::__hash_table<std::__hash_value_type<boost::uuids::uuid,std::unordered_map<std::string,std::pair<double,int>>>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::unordered_map<std::string,std::pair<double,int>>>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::unordered_map<std::string,std::pair<double,int>>>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,std::unordered_map<std::string,std::pair<double,int>>>>>::__emplace_unique_key_args<boost::uuids::uuid,std::piecewise_construct_t const&,std::tuple<boost::uuids::uuid const&>,std::tuple<>>((uint64_t)&v94, v36, (uint64_t)&std::piecewise_construct, (_OWORD **)buf);
            *(_QWORD *)buf = __p;
            v49 = std::__hash_table<std::__hash_value_type<std::string,std::pair<double,int>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::pair<double,int>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::pair<double,int>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::pair<double,int>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)(v67 + 4), (unsigned __int8 *)__p, (uint64_t)&std::piecewise_construct, (__int128 **)buf);
LABEL_97:
            ++*((_DWORD *)v49 + 12);
          }
          else
          {
            if (v38 == 6)
            {
              *(_QWORD *)buf = v36;
              v46 = std::__hash_table<std::__hash_value_type<boost::uuids::uuid,std::unordered_map<std::string,std::pair<double,int>>>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::unordered_map<std::string,std::pair<double,int>>>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::unordered_map<std::string,std::pair<double,int>>>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,std::unordered_map<std::string,std::pair<double,int>>>>>::__emplace_unique_key_args<boost::uuids::uuid,std::piecewise_construct_t const&,std::tuple<boost::uuids::uuid const&>,std::tuple<>>((uint64_t)v92, v36, (uint64_t)&std::piecewise_construct, (_OWORD **)buf);
              *(_QWORD *)buf = __p;
              v47 = std::__hash_table<std::__hash_value_type<std::string,std::pair<double,int>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::pair<double,int>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::pair<double,int>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::pair<double,int>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)(v46 + 4), (unsigned __int8 *)__p, (uint64_t)&std::piecewise_construct, (__int128 **)buf);
              *((double *)v47 + 5) = v34 + *((double *)v47 + 5);
              *(_QWORD *)buf = v36;
              v48 = std::__hash_table<std::__hash_value_type<boost::uuids::uuid,std::unordered_map<std::string,std::pair<double,int>>>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::unordered_map<std::string,std::pair<double,int>>>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::unordered_map<std::string,std::pair<double,int>>>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,std::unordered_map<std::string,std::pair<double,int>>>>>::__emplace_unique_key_args<boost::uuids::uuid,std::piecewise_construct_t const&,std::tuple<boost::uuids::uuid const&>,std::tuple<>>((uint64_t)v92, v36, (uint64_t)&std::piecewise_construct, (_OWORD **)buf);
              *(_QWORD *)buf = __p;
              v49 = std::__hash_table<std::__hash_value_type<std::string,std::pair<double,int>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::pair<double,int>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::pair<double,int>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::pair<double,int>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)(v48 + 4), (unsigned __int8 *)__p, (uint64_t)&std::piecewise_construct, (__int128 **)buf);
              goto LABEL_97;
            }
            if (onceToken_MicroLocation_Default != -1)
              dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_98);
            v68 = logObject_MicroLocation_Default;
            if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 68289282;
              *(_DWORD *)&buf[4] = 0;
              v101 = 2082;
              v102 = "";
              v103 = 1026;
              *(_DWORD *)v104 = v38;
              _os_log_impl(&dword_2419D9000, v68, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"calculatePerClusterPerAnchorValueStatistics (sentinel), received unhandled data type\", \"data type\":%{public}d}", buf, 0x18u);
            }
            if (onceToken_MicroLocation_Default != -1)
              dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_98);
            v69 = logObject_MicroLocation_Default;
            if (os_signpost_enabled((os_log_t)logObject_MicroLocation_Default))
            {
              *(_DWORD *)buf = 68289282;
              *(_DWORD *)&buf[4] = 0;
              v101 = 2082;
              v102 = "";
              v103 = 1026;
              *(_DWORD *)v104 = v38;
              _os_signpost_emit_with_name_impl(&dword_2419D9000, v69, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "calculatePerClusterPerAnchorValueStatistics (sentinel), received unhandled data type", "{\"msg%{public}.0s\":\"calculatePerClusterPerAnchorValueStatistics (sentinel), received unhandled data type\", \"data type\":%{public}d}", buf, 0x18u);
            }
          }
          if (onceToken_MicroLocation_Default != -1)
            dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_98);
          v56 = (id)logObject_MicroLocation_Default;
          if (!os_log_type_enabled(v56, OS_LOG_TYPE_DEBUG))
            goto LABEL_124;
          CLMicroLocationProtobufHelper::convertToHumanReadableString(v36, (uint64_t)v85);
          v70 = v86;
          v71 = (void **)v85[0];
          CLMicroLocationProtobufHelper::convertToHumanReadableString(v82, (uint64_t)v83);
          v72 = v85;
          if (v70 < 0)
            v72 = v71;
          v73 = v83;
          if (v84 < 0)
            v73 = (void **)v83[0];
          if (v88 >= 0)
            v74 = __p;
          else
            v74 = (void **)__p[0];
          if (v38 == 5)
            v75 = v31;
          else
            v75 = v34;
          *(_DWORD *)buf = 68290307;
          *(_DWORD *)&buf[4] = 0;
          v101 = 2082;
          v102 = "";
          v103 = 2081;
          *(_QWORD *)v104 = v72;
          *(_WORD *)&v104[8] = 2082;
          *(_QWORD *)&v104[10] = v73;
          *(_WORD *)&v104[18] = 1026;
          *(_DWORD *)&v104[20] = v38;
          v105 = 2081;
          v106 = *(double *)&v74;
          v107 = 2049;
          v108 = v75;
          v63 = v56;
          v64 = "{\"msg%{public}.0s\":\"anchor statistics\", \"clusterId\":%{private, location:escape_only}s, \"fingerpri"
                "nt UUID\":%{public, location:escape_only}s, \"dataType\":%{public}d, \"deviceId\":%{private, location:es"
                "cape_only}s, \"sentinel value\":\"%{private}f\"}";
          goto LABEL_120;
        }
        if (v38 == 6)
        {
          v50 = v39[7];
          *(_QWORD *)buf = v36;
          v51 = std::__hash_table<std::__hash_value_type<boost::uuids::uuid,std::unordered_map<std::string,std::pair<double,int>>>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::unordered_map<std::string,std::pair<double,int>>>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::unordered_map<std::string,std::pair<double,int>>>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,std::unordered_map<std::string,std::pair<double,int>>>>>::__emplace_unique_key_args<boost::uuids::uuid,std::piecewise_construct_t const&,std::tuple<boost::uuids::uuid const&>,std::tuple<>>((uint64_t)v92, v36, (uint64_t)&std::piecewise_construct, (_OWORD **)buf);
          *(_QWORD *)buf = __p;
          v52 = std::__hash_table<std::__hash_value_type<std::string,std::pair<double,int>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::pair<double,int>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::pair<double,int>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::pair<double,int>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)(v51 + 4), (unsigned __int8 *)__p, (uint64_t)&std::piecewise_construct, (__int128 **)buf);
          *((double *)v52 + 5) = *((double *)v52 + 5) + v50;
          *(_QWORD *)buf = v36;
          v53 = std::__hash_table<std::__hash_value_type<boost::uuids::uuid,std::unordered_map<std::string,std::pair<double,int>>>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::unordered_map<std::string,std::pair<double,int>>>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::unordered_map<std::string,std::pair<double,int>>>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,std::unordered_map<std::string,std::pair<double,int>>>>>::__emplace_unique_key_args<boost::uuids::uuid,std::piecewise_construct_t const&,std::tuple<boost::uuids::uuid const&>,std::tuple<>>((uint64_t)v92, v36, (uint64_t)&std::piecewise_construct, (_OWORD **)buf);
          *(_QWORD *)buf = __p;
          v45 = std::__hash_table<std::__hash_value_type<std::string,std::pair<double,int>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::pair<double,int>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::pair<double,int>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::pair<double,int>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)(v53 + 4), (unsigned __int8 *)__p, (uint64_t)&std::piecewise_construct, (__int128 **)buf);
        }
        else
        {
          if (v38 != 5)
          {
            if (onceToken_MicroLocation_Default != -1)
              dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_98);
            v54 = logObject_MicroLocation_Default;
            if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 68289282;
              *(_DWORD *)&buf[4] = 0;
              v101 = 2082;
              v102 = "";
              v103 = 1026;
              *(_DWORD *)v104 = v38;
              _os_log_impl(&dword_2419D9000, v54, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"calculatePerClusterPerAnchorValueStatistics, received unhandled data type\", \"data type\":%{public}d}", buf, 0x18u);
            }
            if (onceToken_MicroLocation_Default != -1)
              dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_98);
            v55 = logObject_MicroLocation_Default;
            if (os_signpost_enabled((os_log_t)logObject_MicroLocation_Default))
            {
              *(_DWORD *)buf = 68289282;
              *(_DWORD *)&buf[4] = 0;
              v101 = 2082;
              v102 = "";
              v103 = 1026;
              *(_DWORD *)v104 = v38;
              _os_signpost_emit_with_name_impl(&dword_2419D9000, v55, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "calculatePerClusterPerAnchorValueStatistics, received unhandled data type", "{\"msg%{public}.0s\":\"calculatePerClusterPerAnchorValueStatistics, received unhandled data type\", \"data type\":%{public}d}", buf, 0x18u);
            }
            goto LABEL_85;
          }
          v41 = v39[7];
          *(_QWORD *)buf = v36;
          v42 = std::__hash_table<std::__hash_value_type<boost::uuids::uuid,std::unordered_map<std::string,std::pair<double,int>>>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::unordered_map<std::string,std::pair<double,int>>>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::unordered_map<std::string,std::pair<double,int>>>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,std::unordered_map<std::string,std::pair<double,int>>>>>::__emplace_unique_key_args<boost::uuids::uuid,std::piecewise_construct_t const&,std::tuple<boost::uuids::uuid const&>,std::tuple<>>((uint64_t)&v94, v36, (uint64_t)&std::piecewise_construct, (_OWORD **)buf);
          *(_QWORD *)buf = __p;
          v43 = std::__hash_table<std::__hash_value_type<std::string,std::pair<double,int>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::pair<double,int>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::pair<double,int>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::pair<double,int>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)(v42 + 4), (unsigned __int8 *)__p, (uint64_t)&std::piecewise_construct, (__int128 **)buf);
          *((double *)v43 + 5) = *((double *)v43 + 5) + v41;
          *(_QWORD *)buf = v36;
          v44 = std::__hash_table<std::__hash_value_type<boost::uuids::uuid,std::unordered_map<std::string,std::pair<double,int>>>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::unordered_map<std::string,std::pair<double,int>>>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::unordered_map<std::string,std::pair<double,int>>>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,std::unordered_map<std::string,std::pair<double,int>>>>>::__emplace_unique_key_args<boost::uuids::uuid,std::piecewise_construct_t const&,std::tuple<boost::uuids::uuid const&>,std::tuple<>>((uint64_t)&v94, v36, (uint64_t)&std::piecewise_construct, (_OWORD **)buf);
          *(_QWORD *)buf = __p;
          v45 = std::__hash_table<std::__hash_value_type<std::string,std::pair<double,int>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::pair<double,int>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::pair<double,int>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::pair<double,int>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)(v44 + 4), (unsigned __int8 *)__p, (uint64_t)&std::piecewise_construct, (__int128 **)buf);
        }
        ++*((_DWORD *)v45 + 12);
LABEL_85:
        if (onceToken_MicroLocation_Default != -1)
          dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_98);
        v56 = (id)logObject_MicroLocation_Default;
        if (!os_log_type_enabled(v56, OS_LOG_TYPE_DEBUG))
          goto LABEL_124;
        CLMicroLocationProtobufHelper::convertToHumanReadableString(v36, (uint64_t)v85);
        v57 = v86;
        v58 = (void **)v85[0];
        CLMicroLocationProtobufHelper::convertToHumanReadableString(v82, (uint64_t)v83);
        v59 = v85;
        if (v57 < 0)
          v59 = v58;
        v60 = v83;
        if (v84 < 0)
          v60 = (void **)v83[0];
        if (v88 >= 0)
          v61 = __p;
        else
          v61 = (void **)__p[0];
        v62 = v40[7];
        *(_DWORD *)buf = 68290307;
        *(_DWORD *)&buf[4] = 0;
        v101 = 2082;
        v102 = "";
        v103 = 2081;
        *(_QWORD *)v104 = v59;
        *(_WORD *)&v104[8] = 2082;
        *(_QWORD *)&v104[10] = v60;
        *(_WORD *)&v104[18] = 1026;
        *(_DWORD *)&v104[20] = v38;
        v105 = 2081;
        v106 = *(double *)&v61;
        v107 = 2049;
        v108 = v62;
        v63 = v56;
        v64 = "{\"msg%{public}.0s\":\"anchor statistics\", \"clusterId\":%{private, location:escape_only}s, \"fingerprint"
              " UUID\":%{public, location:escape_only}s, \"dataType\":%{public}d, \"deviceId\":%{private, location:escape"
              "_only}s, \"measured value\":\"%{private}f\"}";
LABEL_120:
        _os_log_impl(&dword_2419D9000, v63, OS_LOG_TYPE_DEBUG, v64, buf, 0x40u);
        if (v84 < 0)
          operator delete(v83[0]);
        if (v86 < 0)
          operator delete(v85[0]);
LABEL_124:

        if (v88 < 0)
          operator delete(__p[0]);
        v37 = (uint64_t *)*v37;
        if (!v37)
          goto LABEL_127;
      }
    }
LABEL_129:
    CLMicroLocationAnchorValueStatisticsMap::updateInternalMapWithSumCountOfMeasuredValue((uint64_t)this, (uint64_t)&v94, 5);
    CLMicroLocationAnchorValueStatisticsMap::updateInternalMapWithSumCountOfMeasuredValue((uint64_t)this, (uint64_t)v92, 6);
    std::__hash_table<CLMicroLocationFingerprint::Measurement,CLMicroLocationFingerprint::Measurement::HashMeasurement,CLMicroLocationFingerprint::Measurement::PredicateMeasurement,std::allocator<CLMicroLocationFingerprint::Measurement>>::~__hash_table((uint64_t)&v89);
    std::__hash_table<std::__hash_value_type<boost::uuids::uuid,std::unordered_map<std::string,AnchorValueStatistics>>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::unordered_map<std::string,AnchorValueStatistics>>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::unordered_map<std::string,AnchorValueStatistics>>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,std::unordered_map<std::string,AnchorValueStatistics>>>>::~__hash_table((uint64_t)v92);
    std::__hash_table<std::__hash_value_type<boost::uuids::uuid,std::unordered_map<std::string,AnchorValueStatistics>>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::unordered_map<std::string,AnchorValueStatistics>>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::unordered_map<std::string,AnchorValueStatistics>>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,std::unordered_map<std::string,AnchorValueStatistics>>>>::~__hash_table((uint64_t)&v94);
    std::__hash_table<std::__hash_value_type<boost::uuids::uuid,std::vector<CLMicroLocationFingerprint>>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::vector<CLMicroLocationFingerprint>>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::vector<CLMicroLocationFingerprint>>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,std::vector<CLMicroLocationFingerprint>>>>::~__hash_table((uint64_t)&v97);
  }
  else
  {
    if (onceToken_MicroLocation_Default != -1)
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_98);
    v12 = logObject_MicroLocation_Default;
    if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 68289026;
      *(_DWORD *)&buf[4] = 0;
      v101 = 2082;
      v102 = "";
      _os_log_impl(&dword_2419D9000, v12, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"most recent model is not valid, will not calculate per cluster per anchor statistics\"}", buf, 0x12u);
    }
  }
}

void sub_241B32A94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,char a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59)
{
  std::__hash_table<CLMicroLocationFingerprint::Measurement,CLMicroLocationFingerprint::Measurement::HashMeasurement,CLMicroLocationFingerprint::Measurement::PredicateMeasurement,std::allocator<CLMicroLocationFingerprint::Measurement>>::~__hash_table((uint64_t)&a35);
  std::__hash_table<std::__hash_value_type<boost::uuids::uuid,std::unordered_map<std::string,AnchorValueStatistics>>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::unordered_map<std::string,AnchorValueStatistics>>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::unordered_map<std::string,AnchorValueStatistics>>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,std::unordered_map<std::string,AnchorValueStatistics>>>>::~__hash_table((uint64_t)&a41);
  std::__hash_table<std::__hash_value_type<boost::uuids::uuid,std::unordered_map<std::string,AnchorValueStatistics>>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::unordered_map<std::string,AnchorValueStatistics>>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::unordered_map<std::string,AnchorValueStatistics>>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,std::unordered_map<std::string,AnchorValueStatistics>>>>::~__hash_table((uint64_t)&a47);
  std::__hash_table<std::__hash_value_type<boost::uuids::uuid,std::vector<CLMicroLocationFingerprint>>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::vector<CLMicroLocationFingerprint>>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::vector<CLMicroLocationFingerprint>>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,std::vector<CLMicroLocationFingerprint>>>>::~__hash_table((uint64_t)&a53);
  std::__hash_table<std::__hash_value_type<boost::uuids::uuid,std::unordered_map<std::string,AnchorValueStatistics>>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::unordered_map<std::string,AnchorValueStatistics>>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::unordered_map<std::string,AnchorValueStatistics>>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,std::unordered_map<std::string,AnchorValueStatistics>>>>::~__hash_table(a10);
  _Unwind_Resume(a1);
}

double ULSettings::get<ULSettings::ClusterAnchorValueStatisticsBleRssiSentinelValue>()
{
  void *v0;
  void *v1;
  void *v2;
  void *v3;
  double v4;
  double v5;

  +[ULDefaultsSingleton shared](ULDefaultsSingleton, "shared");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "defaultsDictionary");
  v1 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "ULClusterAnchorValueStatisticsBleRssiSentinelValue");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "objectForKey:", v2);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  if (v3 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
    objc_msgSend(v3, "doubleValue");
  else
    objc_msgSend(&unk_2511ECF88, "doubleValue");
  v5 = v4;

  return v5;
}

void sub_241B32C54(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

double ULSettings::get<ULSettings::ClusterAnchorValueStatisticsUwbRangeSentinelValue>()
{
  void *v0;
  void *v1;
  void *v2;
  void *v3;
  double v4;
  double v5;

  +[ULDefaultsSingleton shared](ULDefaultsSingleton, "shared");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "defaultsDictionary");
  v1 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "ULClusterAnchorValueStatisticsUwbRangeSentinelValue");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "objectForKey:", v2);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  if (v3 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
    objc_msgSend(v3, "doubleValue");
  else
    objc_msgSend(&unk_2511ECF98, "doubleValue");
  v5 = v4;

  return v5;
}

void sub_241B32D58(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void CLMicroLocationAnchorValueStatisticsMap::updateInternalMapWithSumCountOfMeasuredValue(uint64_t a1, uint64_t a2, int a3)
{
  _QWORD *i;
  uint64_t *j;
  double v7;
  int v8;
  _QWORD *v9;
  _QWORD *v10;
  double v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  double v15;
  _QWORD *v16;
  NSObject *v17;
  NSObject *v18;
  uint8_t buf[8];
  __int16 v20;
  const char *v21;
  __int16 v22;
  int v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  for (i = *(_QWORD **)(a2 + 16); i; i = (_QWORD *)*i)
  {
    for (j = (uint64_t *)i[6]; j; j = (uint64_t *)*j)
    {
      v7 = *((double *)j + 5);
      v8 = *((_DWORD *)j + 12);
      if (a3 == 6)
      {
        *(_QWORD *)buf = i + 2;
        v13 = std::__hash_table<std::__hash_value_type<boost::uuids::uuid,std::unordered_map<std::string,AnchorValueStatistics>>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::unordered_map<std::string,AnchorValueStatistics>>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::unordered_map<std::string,AnchorValueStatistics>>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,std::unordered_map<std::string,AnchorValueStatistics>>>>::__emplace_unique_key_args<boost::uuids::uuid,std::piecewise_construct_t const&,std::tuple<boost::uuids::uuid const&>,std::tuple<>>(a1, i + 2, (uint64_t)&std::piecewise_construct, (_OWORD **)buf);
        *(_QWORD *)buf = j + 2;
        *((double *)std::__hash_table<std::__hash_value_type<std::string,AnchorValueStatistics>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AnchorValueStatistics>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AnchorValueStatistics>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,AnchorValueStatistics>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)(v13 + 4), (unsigned __int8 *)j + 16, (uint64_t)&std::piecewise_construct, (__int128 **)buf)+ 6) = v7 / (double)v8;
        *(_QWORD *)buf = i + 2;
        v14 = std::__hash_table<std::__hash_value_type<boost::uuids::uuid,std::unordered_map<std::string,AnchorValueStatistics>>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::unordered_map<std::string,AnchorValueStatistics>>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::unordered_map<std::string,AnchorValueStatistics>>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,std::unordered_map<std::string,AnchorValueStatistics>>>>::__emplace_unique_key_args<boost::uuids::uuid,std::piecewise_construct_t const&,std::tuple<boost::uuids::uuid const&>,std::tuple<>>(a1, i + 2, (uint64_t)&std::piecewise_construct, (_OWORD **)buf);
        *(_QWORD *)buf = j + 2;
        if (fabs(*((double *)std::__hash_table<std::__hash_value_type<std::string,AnchorValueStatistics>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AnchorValueStatistics>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AnchorValueStatistics>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,AnchorValueStatistics>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)(v14 + 4), (unsigned __int8 *)j + 16, (uint64_t)&std::piecewise_construct, (__int128 **)buf)+ 5)) < 2.22044605e-16)
        {
          v15 = ULSettings::get<ULSettings::ClusterAnchorValueStatisticsBleRssiSentinelValue>();
          *(_QWORD *)buf = i + 2;
          v16 = std::__hash_table<std::__hash_value_type<boost::uuids::uuid,std::unordered_map<std::string,AnchorValueStatistics>>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::unordered_map<std::string,AnchorValueStatistics>>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::unordered_map<std::string,AnchorValueStatistics>>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,std::unordered_map<std::string,AnchorValueStatistics>>>>::__emplace_unique_key_args<boost::uuids::uuid,std::piecewise_construct_t const&,std::tuple<boost::uuids::uuid const&>,std::tuple<>>(a1, i + 2, (uint64_t)&std::piecewise_construct, (_OWORD **)buf);
          *(_QWORD *)buf = j + 2;
          *((double *)std::__hash_table<std::__hash_value_type<std::string,AnchorValueStatistics>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AnchorValueStatistics>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AnchorValueStatistics>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,AnchorValueStatistics>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)(v16 + 4), (unsigned __int8 *)j + 16, (uint64_t)&std::piecewise_construct, (__int128 **)buf)+ 5) = v15;
        }
      }
      else if (a3 == 5)
      {
        *(_QWORD *)buf = i + 2;
        v9 = std::__hash_table<std::__hash_value_type<boost::uuids::uuid,std::unordered_map<std::string,AnchorValueStatistics>>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::unordered_map<std::string,AnchorValueStatistics>>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::unordered_map<std::string,AnchorValueStatistics>>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,std::unordered_map<std::string,AnchorValueStatistics>>>>::__emplace_unique_key_args<boost::uuids::uuid,std::piecewise_construct_t const&,std::tuple<boost::uuids::uuid const&>,std::tuple<>>(a1, i + 2, (uint64_t)&std::piecewise_construct, (_OWORD **)buf);
        *(_QWORD *)buf = j + 2;
        *((double *)std::__hash_table<std::__hash_value_type<std::string,AnchorValueStatistics>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AnchorValueStatistics>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AnchorValueStatistics>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,AnchorValueStatistics>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)(v9 + 4), (unsigned __int8 *)j + 16, (uint64_t)&std::piecewise_construct, (__int128 **)buf)+ 5) = v7 / (double)v8;
        *(_QWORD *)buf = i + 2;
        v10 = std::__hash_table<std::__hash_value_type<boost::uuids::uuid,std::unordered_map<std::string,AnchorValueStatistics>>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::unordered_map<std::string,AnchorValueStatistics>>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::unordered_map<std::string,AnchorValueStatistics>>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,std::unordered_map<std::string,AnchorValueStatistics>>>>::__emplace_unique_key_args<boost::uuids::uuid,std::piecewise_construct_t const&,std::tuple<boost::uuids::uuid const&>,std::tuple<>>(a1, i + 2, (uint64_t)&std::piecewise_construct, (_OWORD **)buf);
        *(_QWORD *)buf = j + 2;
        if (fabs(*((double *)std::__hash_table<std::__hash_value_type<std::string,AnchorValueStatistics>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AnchorValueStatistics>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AnchorValueStatistics>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,AnchorValueStatistics>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)(v10 + 4), (unsigned __int8 *)j + 16, (uint64_t)&std::piecewise_construct, (__int128 **)buf)+ 6)) < 2.22044605e-16)
        {
          v11 = ULSettings::get<ULSettings::ClusterAnchorValueStatisticsUwbRangeSentinelValue>();
          *(_QWORD *)buf = i + 2;
          v12 = std::__hash_table<std::__hash_value_type<boost::uuids::uuid,std::unordered_map<std::string,AnchorValueStatistics>>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::unordered_map<std::string,AnchorValueStatistics>>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::unordered_map<std::string,AnchorValueStatistics>>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,std::unordered_map<std::string,AnchorValueStatistics>>>>::__emplace_unique_key_args<boost::uuids::uuid,std::piecewise_construct_t const&,std::tuple<boost::uuids::uuid const&>,std::tuple<>>(a1, i + 2, (uint64_t)&std::piecewise_construct, (_OWORD **)buf);
          *(_QWORD *)buf = j + 2;
          *((double *)std::__hash_table<std::__hash_value_type<std::string,AnchorValueStatistics>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AnchorValueStatistics>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AnchorValueStatistics>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,AnchorValueStatistics>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)(v12 + 4), (unsigned __int8 *)j + 16, (uint64_t)&std::piecewise_construct, (__int128 **)buf)+ 6) = v11;
        }
      }
      else
      {
        if (onceToken_MicroLocation_Default != -1)
          dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_98);
        v17 = logObject_MicroLocation_Default;
        if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 68289282;
          *(_DWORD *)&buf[4] = 0;
          v20 = 2082;
          v21 = "";
          v22 = 1026;
          v23 = a3;
          _os_log_impl(&dword_2419D9000, v17, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"calculatePerClusterPerAnchorValueStatistics, received unhandled data type\", \"data type\":%{public}d}", buf, 0x18u);
        }
        if (onceToken_MicroLocation_Default != -1)
          dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_98);
        v18 = logObject_MicroLocation_Default;
        if (os_signpost_enabled((os_log_t)logObject_MicroLocation_Default))
        {
          *(_DWORD *)buf = 68289282;
          *(_DWORD *)&buf[4] = 0;
          v20 = 2082;
          v21 = "";
          v22 = 1026;
          v23 = a3;
          _os_signpost_emit_with_name_impl(&dword_2419D9000, v18, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "calculatePerClusterPerAnchorValueStatistics, received unhandled data type", "{\"msg%{public}.0s\":\"calculatePerClusterPerAnchorValueStatistics, received unhandled data type\", \"data type\":%{public}d}", buf, 0x18u);
        }
      }
    }
  }
}

void CLMicroLocationAnchorValueStatisticsMap::toProtobuf(CLMicroLocationAnchorValueStatisticsMap *this@<X0>, int *a2@<X8>)
{
  _QWORD *v4;
  std::string *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t *i;
  int v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  std::string *v16;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  NSObject *v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  NSObject *v24;
  uint8_t buf[4];
  int v26;
  __int16 v27;
  const char *v28;
  uint64_t v29;

  v29 = *MEMORY[0x24BDAC8D0];
  CLMicroLocationProto::ClusterAnchorValueStatisticsVector::ClusterAnchorValueStatisticsVector((uint64_t)a2);
  v4 = (_QWORD *)*((_QWORD *)this + 2);
  if (v4)
  {
    v5 = (std::string *)MEMORY[0x24BEDD958];
    do
    {
      v6 = a2[5];
      v7 = a2[4];
      if ((int)v7 >= v6)
      {
        if (v6 == a2[6])
        {
          wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a2 + 2));
          v6 = a2[5];
        }
        a2[5] = v6 + 1;
        v9 = wireless_diagnostics::google::protobuf::internal::GenericTypeHandler<CLMicroLocationProto::ClusterAnchorValueStatistics>::New();
        v21 = *((_QWORD *)a2 + 1);
        v22 = a2[4];
        a2[4] = v22 + 1;
        *(_QWORD *)(v21 + 8 * v22) = v9;
        if (!v9)
        {
LABEL_29:
          if (onceToken_MicroLocation_Default != -1)
            dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_98);
          v23 = logObject_MicroLocation_Default;
          if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 68289026;
            v26 = 0;
            v27 = 2082;
            v28 = "";
            _os_log_impl(&dword_2419D9000, v23, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"got nullptr from CLMicroLocationProto add_clusteranchorvaluestatisticsvector\"}", buf, 0x12u);
          }
          if (onceToken_MicroLocation_Default != -1)
            dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_98);
          v24 = logObject_MicroLocation_Default;
          if (os_signpost_enabled((os_log_t)logObject_MicroLocation_Default))
          {
            *(_DWORD *)buf = 68289026;
            v26 = 0;
            v27 = 2082;
            v28 = "";
            _os_signpost_emit_with_name_impl(&dword_2419D9000, v24, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "got nullptr from CLMicroLocationProto add_clusteranchorvaluestatisticsvector", "{\"msg%{public}.0s\":\"got nullptr from CLMicroLocationProto add_clusteranchorvaluestatisticsvector\"}", buf, 0x12u);
          }
          goto LABEL_37;
        }
      }
      else
      {
        v8 = *((_QWORD *)a2 + 1);
        a2[4] = v7 + 1;
        v9 = *(_QWORD *)(v8 + 8 * v7);
        if (!v9)
          goto LABEL_29;
      }
      *(_DWORD *)(v9 + 44) |= 2u;
      if (*(std::string **)(v9 + 32) == v5)
      {
        v10 = (_QWORD *)operator new();
        *v10 = 0;
        v10[1] = 0;
        v10[2] = 0;
        *(_QWORD *)(v9 + 32) = v10;
      }
      MEMORY[0x2426A02D0]();
      for (i = (uint64_t *)v4[6]; i; i = (uint64_t *)*i)
      {
        v12 = *(_DWORD *)(v9 + 20);
        v13 = *(int *)(v9 + 16);
        if ((int)v13 >= v12)
        {
          if (v12 == *(_DWORD *)(v9 + 24))
          {
            wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(v9 + 8));
            v12 = *(_DWORD *)(v9 + 20);
          }
          *(_DWORD *)(v9 + 20) = v12 + 1;
          v15 = wireless_diagnostics::google::protobuf::internal::GenericTypeHandler<CLMicroLocationProto::AnchorValueStatistics>::New();
          v17 = *(_QWORD *)(v9 + 8);
          v18 = *(int *)(v9 + 16);
          *(_DWORD *)(v9 + 16) = v18 + 1;
          *(_QWORD *)(v17 + 8 * v18) = v15;
          if (!v15)
          {
LABEL_16:
            if (onceToken_MicroLocation_Default != -1)
              dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_98);
            v19 = logObject_MicroLocation_Default;
            if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 68289026;
              v26 = 0;
              v27 = 2082;
              v28 = "";
              _os_log_impl(&dword_2419D9000, v19, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"got nullptr from CLMicroLocationProto add_anchorvaluestatistics\"}", buf, 0x12u);
            }
            if (onceToken_MicroLocation_Default != -1)
              dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_98);
            v20 = logObject_MicroLocation_Default;
            if (os_signpost_enabled((os_log_t)logObject_MicroLocation_Default))
            {
              *(_DWORD *)buf = 68289026;
              v26 = 0;
              v27 = 2082;
              v28 = "";
              _os_signpost_emit_with_name_impl(&dword_2419D9000, v20, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "got nullptr from CLMicroLocationProto add_anchorvaluestatistics", "{\"msg%{public}.0s\":\"got nullptr from CLMicroLocationProto add_anchorvaluestatistics\"}", buf, 0x12u);
            }
            continue;
          }
        }
        else
        {
          v14 = *(_QWORD *)(v9 + 8);
          *(_DWORD *)(v9 + 16) = v13 + 1;
          v15 = *(_QWORD **)(v14 + 8 * v13);
          if (!v15)
            goto LABEL_16;
        }
        *((_DWORD *)v15 + 9) |= 4u;
        v16 = (std::string *)v15[3];
        if (v16 == v5)
        {
          v16 = (std::string *)operator new();
          v16->__r_.__value_.__r.__words[0] = 0;
          v16->__r_.__value_.__l.__size_ = 0;
          v16->__r_.__value_.__r.__words[2] = 0;
          v15[3] = v16;
        }
        std::string::operator=(v16, (const std::string *)(i + 2));
        *((_DWORD *)v15 + 9) |= 3u;
        *(_OWORD *)(v15 + 1) = *(_OWORD *)(i + 5);
      }
LABEL_37:
      v4 = (_QWORD *)*v4;
    }
    while (v4);
  }
}

void sub_241B33598(_Unwind_Exception *a1)
{
  CLMicroLocationProto::ClusterAnchorValueStatisticsVector *v1;

  CLMicroLocationProto::ClusterAnchorValueStatisticsVector::~ClusterAnchorValueStatisticsVector(v1);
  _Unwind_Resume(a1);
}

void CLMicroLocationAnchorValueStatisticsMap::toConfigurationEntry(CLMicroLocationAnchorValueStatisticsMap *this@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v5;
  CLMicroLocationProto::ClusterAnchorValueStatisticsVector *v6;
  double v7;
  void *__p[2];
  char v9;
  int v10[14];
  _BYTE v11[8];
  CLMicroLocationProto::ClusterAnchorValueStatisticsVector *v12;
  _QWORD *v13;
  int v14;

  CLMicroLocationProto::AnchorValueStatisticsConfiguration::AnchorValueStatisticsConfiguration((CLMicroLocationProto::AnchorValueStatisticsConfiguration *)v11);
  v14 |= 4u;
  if (v13 == (_QWORD *)MEMORY[0x24BEDD958])
  {
    v5 = (_QWORD *)operator new();
    *v5 = 0;
    v5[1] = 0;
    v5[2] = 0;
    v13 = v5;
  }
  MEMORY[0x2426A02D0]();
  v14 |= 2u;
  v6 = v12;
  if (!v12)
  {
    v6 = (CLMicroLocationProto::ClusterAnchorValueStatisticsVector *)operator new();
    CLMicroLocationProto::ClusterAnchorValueStatisticsVector::ClusterAnchorValueStatisticsVector((uint64_t)v6);
    v12 = v6;
  }
  CLMicroLocationAnchorValueStatisticsMap::toProtobuf(this, v10);
  CLMicroLocationProto::ClusterAnchorValueStatisticsVector::CopyFrom(v6, (const CLMicroLocationProto::ClusterAnchorValueStatisticsVector *)v10);
  CLMicroLocationProto::ClusterAnchorValueStatisticsVector::~ClusterAnchorValueStatisticsVector((CLMicroLocationProto::ClusterAnchorValueStatisticsVector *)v10);
  v7 = cl::chrono::CFAbsoluteTimeClock::now();
  CLMicroLocationProtobufHelper::createConfiguration<CLMicroLocationProto::AnchorValueStatisticsConfiguration>((CLMicroLocationProto::Configuration *)v11, (uint64_t)v10, v7);
  std::string::basic_string[abi:ne180100]<0>(__p, "home");
  CLMicroLocationConfigurationTable::Entry::Entry(a2, __p, v10, 0, 0);
  if (v9 < 0)
    operator delete(__p[0]);
  CLMicroLocationProto::Configuration::~Configuration((CLMicroLocationProto::Configuration *)v10);
  CLMicroLocationProto::AnchorValueStatisticsConfiguration::~AnchorValueStatisticsConfiguration((CLMicroLocationProto::AnchorValueStatisticsConfiguration *)v11);
}

void sub_241B336F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  uint64_t v16;
  uint64_t v17;

  MEMORY[0x2426A04D4](v16, 0x1081C4054B19868);
  CLMicroLocationProto::AnchorValueStatisticsConfiguration::~AnchorValueStatisticsConfiguration((CLMicroLocationProto::AnchorValueStatisticsConfiguration *)(v17 - 72));
  _Unwind_Resume(a1);
}

void CLMicroLocationProtobufHelper::createConfiguration<CLMicroLocationProto::AnchorValueStatisticsConfiguration>(CLMicroLocationProto::Configuration *a1@<X0>, uint64_t a2@<X8>, double a3@<D0>)
{
  unsigned int v6;
  const CLMicroLocationProto::AnchorValueStatisticsConfiguration *v7;
  int v8;

  CLMicroLocationProto::Configuration::Configuration((CLMicroLocationProto::Configuration *)a2);
  v6 = *((_DWORD *)a1 + 6);
  if (!CLMicroLocationProto::ConfigurationType_IsValid((CLMicroLocationProto *)v6))
    __assert_rtn("set_type", "microlocation.pb.h", 22117, "::CLMicroLocationProto::ConfigurationType_IsValid(value)");
  v8 = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a2 + 40) = v6;
  *(_DWORD *)(a2 + 48) = v8 | 3;
  *(double *)(a2 + 8) = a3;
  CLMicroLocationProtobufHelper::setSpecificConfiguration((CLMicroLocationProtobufHelper *)a2, a1, v7);
}

void sub_241B337FC(_Unwind_Exception *a1)
{
  CLMicroLocationProto::Configuration *v1;

  CLMicroLocationProto::Configuration::~Configuration(v1);
  _Unwind_Resume(a1);
}

void ___ZL45_CLLogObjectForCategory_MicroLocation_Defaultv_block_invoke_77()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.MicroLocation", "MicroLocation");
  v1 = (void *)logObject_MicroLocation_Default;
  logObject_MicroLocation_Default = (uint64_t)v0;

}

uint64_t wireless_diagnostics::google::protobuf::internal::GenericTypeHandler<CLMicroLocationProto::AnchorAppearance>::New()
{
  uint64_t v0;

  v0 = operator new();
  CLMicroLocationProto::AnchorAppearance::AnchorAppearance(v0);
  return v0;
}

void sub_241B3387C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2426A04D4](v1, 0x10A1C4052215422);
  _Unwind_Resume(a1);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<CLMicroLocationUtils::DeviceIdVisitor<boost::uuids::uuid> &> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,unsigned long long,boost::uuids::uuid,std::string> const&>(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)a1 + 24);
  if (!v1)
    std::__throw_bad_function_call[abi:ne180100]();
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 48))(v1);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<CLMicroLocationUtils::DeviceIdVisitor<boost::uuids::uuid> &> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,unsigned long long,boost::uuids::uuid,std::string> const&>(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)a1 + 56);
  if (!v1)
    std::__throw_bad_function_call[abi:ne180100]();
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 48))(v1);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<CLMicroLocationUtils::DeviceIdVisitor<boost::uuids::uuid> &> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,unsigned long long,boost::uuids::uuid,std::string> const&>(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)a1 + 88);
  if (!v1)
    std::__throw_bad_function_call[abi:ne180100]();
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 48))(v1);
}

uint64_t wireless_diagnostics::google::protobuf::internal::GenericTypeHandler<CLMicroLocationProto::ClusterAnchorValueStatistics>::New()
{
  uint64_t v0;

  v0 = operator new();
  CLMicroLocationProto::ClusterAnchorValueStatistics::ClusterAnchorValueStatistics(v0);
  return v0;
}

void sub_241B33954(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2426A04D4](v1, 0x10A1C404586787ALL);
  _Unwind_Resume(a1);
}

_QWORD *wireless_diagnostics::google::protobuf::internal::GenericTypeHandler<CLMicroLocationProto::AnchorValueStatistics>::New()
{
  _QWORD *v0;

  v0 = (_QWORD *)operator new();
  CLMicroLocationProto::AnchorValueStatistics::AnchorValueStatistics(v0);
  return v0;
}

void sub_241B339B4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2426A04D4](v1, 0x10A1C40E1D8D1C5);
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>>>::__emplace_unique_key_args<boost::uuids::uuid,std::pair<boost::uuids::uuid const,CLMicroLocationAnchorAppearance>>(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  unint64_t v3;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  void **v10;
  _QWORD *v11;
  unint64_t v12;
  __int128 v14;
  float v15;
  float v16;
  _BOOL8 v17;
  unint64_t v18;
  unint64_t v19;
  size_t v20;
  uint64_t v21;
  _QWORD *v22;
  unint64_t v23;

  v6 = 0;
  v7 = 0;
  do
    v7 ^= (v7 << 6) + (v7 >> 2) + 2654435769u + *((unsigned __int8 *)a2 + v6++);
  while (v6 != 16);
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v3 = v7;
      if (v7 >= v8)
        v3 = v7 % v8;
    }
    else
    {
      v3 = (v8 - 1) & v7;
    }
    v10 = *(void ***)(*(_QWORD *)a1 + 8 * v3);
    if (v10)
    {
      v11 = *v10;
      if (*v10)
      {
        do
        {
          v12 = v11[1];
          if (v12 == v7)
          {
            if (v11[2] == *a2 && v11[3] == a2[1])
              return v11;
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8)
                v12 %= v8;
            }
            else
            {
              v12 &= v8 - 1;
            }
            if (v12 != v3)
              break;
          }
          v11 = (_QWORD *)*v11;
        }
        while (v11);
      }
    }
  }
  v11 = operator new(0x38uLL);
  *v11 = 0;
  v11[1] = v7;
  v14 = *(_OWORD *)(a3 + 16);
  *((_OWORD *)v11 + 1) = *(_OWORD *)a3;
  *((_OWORD *)v11 + 2) = v14;
  v11[6] = *(_QWORD *)(a3 + 32);
  v15 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v16 = *(float *)(a1 + 32);
  if (!v8 || (float)(v16 * (float)v8) < v15)
  {
    v17 = 1;
    if (v8 >= 3)
      v17 = (v8 & (v8 - 1)) != 0;
    v18 = v17 | (2 * v8);
    v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19)
      v20 = v19;
    else
      v20 = v18;
    std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>>>::__rehash<true>(a1, v20);
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8)
        v3 = v7 % v8;
      else
        v3 = v7;
    }
    else
    {
      v3 = (v8 - 1) & v7;
    }
  }
  v21 = *(_QWORD *)a1;
  v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v22)
  {
    *v11 = *v22;
LABEL_44:
    *v22 = v11;
    goto LABEL_45;
  }
  *v11 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v11;
  *(_QWORD *)(v21 + 8 * v3) = a1 + 16;
  if (*v11)
  {
    v23 = *(_QWORD *)(*v11 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v23 >= v8)
        v23 %= v8;
    }
    else
    {
      v23 &= v8 - 1;
    }
    v22 = (_QWORD *)(*(_QWORD *)a1 + 8 * v23);
    goto LABEL_44;
  }
LABEL_45:
  ++*(_QWORD *)(a1 + 24);
  return v11;
}

void sub_241B33C1C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>>>::__emplace_unique_key_args<boost::uuids::uuid,std::piecewise_construct_t const&,std::tuple<boost::uuids::uuid const&>,std::tuple<>>(uint64_t a1, _QWORD *a2, uint64_t a3, __int128 **a4)
{
  unint64_t v4;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  void **v11;
  _QWORD *v12;
  unint64_t v13;
  __int128 v15;
  float v16;
  float v17;
  _BOOL8 v18;
  unint64_t v19;
  unint64_t v20;
  size_t v21;
  uint64_t v22;
  _QWORD *v23;
  unint64_t v24;

  v7 = 0;
  v8 = 0;
  do
    v8 ^= (v8 << 6) + (v8 >> 2) + 2654435769u + *((unsigned __int8 *)a2 + v7++);
  while (v7 != 16);
  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      v4 = v8;
      if (v8 >= v9)
        v4 = v8 % v9;
    }
    else
    {
      v4 = (v9 - 1) & v8;
    }
    v11 = *(void ***)(*(_QWORD *)a1 + 8 * v4);
    if (v11)
    {
      v12 = *v11;
      if (*v11)
      {
        do
        {
          v13 = v12[1];
          if (v13 == v8)
          {
            if (v12[2] == *a2 && v12[3] == a2[1])
              return v12;
          }
          else
          {
            if (v10.u32[0] > 1uLL)
            {
              if (v13 >= v9)
                v13 %= v9;
            }
            else
            {
              v13 &= v9 - 1;
            }
            if (v13 != v4)
              break;
          }
          v12 = (_QWORD *)*v12;
        }
        while (v12);
      }
    }
  }
  v12 = operator new(0x38uLL);
  *v12 = 0;
  v12[1] = v8;
  v15 = **a4;
  v12[6] = 0;
  *((_OWORD *)v12 + 1) = v15;
  *((_OWORD *)v12 + 2) = xmmword_241BB92D0;
  v16 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v17 = *(float *)(a1 + 32);
  if (!v9 || (float)(v17 * (float)v9) < v16)
  {
    v18 = 1;
    if (v9 >= 3)
      v18 = (v9 & (v9 - 1)) != 0;
    v19 = v18 | (2 * v9);
    v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20)
      v21 = v20;
    else
      v21 = v19;
    std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>>>::__rehash<true>(a1, v21);
    v9 = *(_QWORD *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9)
        v4 = v8 % v9;
      else
        v4 = v8;
    }
    else
    {
      v4 = (v9 - 1) & v8;
    }
  }
  v22 = *(_QWORD *)a1;
  v23 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v23)
  {
    *v12 = *v23;
LABEL_44:
    *v23 = v12;
    goto LABEL_45;
  }
  *v12 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v12;
  *(_QWORD *)(v22 + 8 * v4) = a1 + 16;
  if (*v12)
  {
    v24 = *(_QWORD *)(*v12 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v24 >= v9)
        v24 %= v9;
    }
    else
    {
      v24 &= v9 - 1;
    }
    v23 = (_QWORD *)(*(_QWORD *)a1 + 8 * v24);
    goto LABEL_44;
  }
LABEL_45:
  ++*(_QWORD *)(a1 + 24);
  return v12;
}

void sub_241B33E7C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,std::greater<std::chrono::time_point<cl::chrono::CFAbsoluteTimeClock,std::chrono::duration<long double,std::ratio<1l,1l>>>> &,std::chrono::time_point<cl::chrono::CFAbsoluteTimeClock,std::chrono::duration<long double,std::ratio<1l,1l>>>*,false>(uint64_t result, double *a2, uint64_t a3, uint64_t a4, char a5)
{
  double *v8;
  double *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  double *v15;
  double v16;
  double *v17;
  char v18;
  BOOL v19;
  double v20;
  double v21;
  double *v22;
  BOOL v24;
  uint64_t v25;
  double *v26;
  double v27;
  double v28;
  uint64_t v29;
  double *v30;
  double v31;
  double v32;
  double *v33;

  v8 = (double *)result;
LABEL_2:
  v9 = v8;
LABEL_3:
  v10 = 1 - a4;
  while (2)
  {
    v8 = v9;
    v11 = v10;
    v12 = (char *)a2 - (char *)v9;
    v13 = a2 - v9;
    switch(v13)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v20 = *v9;
        v21 = *(a2 - 1);
        if (*v9 < v21)
        {
          *v9 = v21;
          *(a2 - 1) = v20;
        }
        return result;
      case 3uLL:
        return std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<std::chrono::time_point<cl::chrono::CFAbsoluteTimeClock,std::chrono::duration<long double,std::ratio<1l,1l>>>> &,std::chrono::time_point<cl::chrono::CFAbsoluteTimeClock,std::chrono::duration<long double,std::ratio<1l,1l>>>*>(v9, v9 + 1, a2 - 1);
      case 4uLL:
        return std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<std::chrono::time_point<cl::chrono::CFAbsoluteTimeClock,std::chrono::duration<long double,std::ratio<1l,1l>>>> &,std::chrono::time_point<cl::chrono::CFAbsoluteTimeClock,std::chrono::duration<long double,std::ratio<1l,1l>>>*>(v9, v9 + 1, v9 + 2, a2 - 1);
      case 5uLL:
        return std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<std::chrono::time_point<cl::chrono::CFAbsoluteTimeClock,std::chrono::duration<long double,std::ratio<1l,1l>>>> &,std::chrono::time_point<cl::chrono::CFAbsoluteTimeClock,std::chrono::duration<long double,std::ratio<1l,1l>>>*>(v9, v9 + 1, v9 + 2, v9 + 3, a2 - 1);
      default:
        if (v12 > 191)
        {
          if (v11 == 1)
          {
            if (v9 != a2)
              return (uint64_t)std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<std::chrono::time_point<cl::chrono::CFAbsoluteTimeClock,std::chrono::duration<long double,std::ratio<1l,1l>>>> &,std::chrono::time_point<cl::chrono::CFAbsoluteTimeClock,std::chrono::duration<long double,std::ratio<1l,1l>>>*,std::chrono::time_point<cl::chrono::CFAbsoluteTimeClock,std::chrono::duration<long double,std::ratio<1l,1l>>>*>(v9, a2, a2, a3);
            return result;
          }
          v14 = v13 >> 1;
          v15 = &v9[v13 >> 1];
          if ((unint64_t)v12 < 0x401)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<std::chrono::time_point<cl::chrono::CFAbsoluteTimeClock,std::chrono::duration<long double,std::ratio<1l,1l>>>> &,std::chrono::time_point<cl::chrono::CFAbsoluteTimeClock,std::chrono::duration<long double,std::ratio<1l,1l>>>*>(&v9[v13 >> 1], v9, a2 - 1);
            if ((a5 & 1) != 0)
              goto LABEL_12;
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<std::chrono::time_point<cl::chrono::CFAbsoluteTimeClock,std::chrono::duration<long double,std::ratio<1l,1l>>>> &,std::chrono::time_point<cl::chrono::CFAbsoluteTimeClock,std::chrono::duration<long double,std::ratio<1l,1l>>>*>(v9, &v9[v13 >> 1], a2 - 1);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<std::chrono::time_point<cl::chrono::CFAbsoluteTimeClock,std::chrono::duration<long double,std::ratio<1l,1l>>>> &,std::chrono::time_point<cl::chrono::CFAbsoluteTimeClock,std::chrono::duration<long double,std::ratio<1l,1l>>>*>(v9 + 1, v15 - 1, a2 - 2);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<std::chrono::time_point<cl::chrono::CFAbsoluteTimeClock,std::chrono::duration<long double,std::ratio<1l,1l>>>> &,std::chrono::time_point<cl::chrono::CFAbsoluteTimeClock,std::chrono::duration<long double,std::ratio<1l,1l>>>*>(v9 + 2, &v9[v14 + 1], a2 - 3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<std::chrono::time_point<cl::chrono::CFAbsoluteTimeClock,std::chrono::duration<long double,std::ratio<1l,1l>>>> &,std::chrono::time_point<cl::chrono::CFAbsoluteTimeClock,std::chrono::duration<long double,std::ratio<1l,1l>>>*>(v15 - 1, v15, &v9[v14 + 1]);
            v16 = *v9;
            *v9 = *v15;
            *v15 = v16;
            if ((a5 & 1) != 0)
              goto LABEL_12;
          }
          if (*v9 >= *(v9 - 1))
          {
            result = (uint64_t)std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,std::chrono::time_point<cl::chrono::CFAbsoluteTimeClock,std::chrono::duration<long double,std::ratio<1l,1l>>> *,std::greater<std::chrono::time_point<cl::chrono::CFAbsoluteTimeClock,std::chrono::duration<long double,std::ratio<1l,1l>>>> &>(v9, a2);
            v9 = (double *)result;
            goto LABEL_17;
          }
LABEL_12:
          v17 = std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,std::chrono::time_point<cl::chrono::CFAbsoluteTimeClock,std::chrono::duration<long double,std::ratio<1l,1l>>> *,std::greater<std::chrono::time_point<cl::chrono::CFAbsoluteTimeClock,std::chrono::duration<long double,std::ratio<1l,1l>>>> &>(v9, a2);
          if ((v18 & 1) == 0)
            goto LABEL_15;
          v19 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<std::chrono::time_point<cl::chrono::CFAbsoluteTimeClock,std::chrono::duration<long double,std::ratio<1l,1l>>>> &,std::chrono::time_point<cl::chrono::CFAbsoluteTimeClock,std::chrono::duration<long double,std::ratio<1l,1l>>>*>(v9, v17);
          v9 = v17 + 1;
          result = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<std::chrono::time_point<cl::chrono::CFAbsoluteTimeClock,std::chrono::duration<long double,std::ratio<1l,1l>>>> &,std::chrono::time_point<cl::chrono::CFAbsoluteTimeClock,std::chrono::duration<long double,std::ratio<1l,1l>>>*>(v17 + 1, a2);
          if (!(_DWORD)result)
          {
            v10 = v11 + 1;
            if (v19)
              continue;
LABEL_15:
            result = std::__introsort<std::_ClassicAlgPolicy,std::greater<std::chrono::time_point<cl::chrono::CFAbsoluteTimeClock,std::chrono::duration<long double,std::ratio<1l,1l>>>> &,std::chrono::time_point<cl::chrono::CFAbsoluteTimeClock,std::chrono::duration<long double,std::ratio<1l,1l>>>*,false>(v8, v17, a3, -v11, a5 & 1);
            v9 = v17 + 1;
LABEL_17:
            a5 = 0;
            a4 = -v11;
            goto LABEL_3;
          }
          a4 = -v11;
          a2 = v17;
          if (v19)
            return result;
          goto LABEL_2;
        }
        v22 = v9 + 1;
        v24 = v9 == a2 || v22 == a2;
        if ((a5 & 1) != 0)
        {
          if (!v24)
          {
            v25 = 0;
            v26 = v9;
            do
            {
              v28 = *v26;
              v27 = v26[1];
              v26 = v22;
              if (v28 < v27)
              {
                v29 = v25;
                while (1)
                {
                  *(double *)((char *)v9 + v29 + 8) = v28;
                  if (!v29)
                    break;
                  v28 = *(double *)((char *)v9 + v29 - 8);
                  v29 -= 8;
                  if (v28 >= v27)
                  {
                    v30 = (double *)((char *)v9 + v29 + 8);
                    goto LABEL_42;
                  }
                }
                v30 = v9;
LABEL_42:
                *v30 = v27;
              }
              v22 = v26 + 1;
              v25 += 8;
            }
            while (v26 + 1 != a2);
          }
        }
        else if (!v24)
        {
          do
          {
            v32 = *v8;
            v31 = v8[1];
            v8 = v22;
            if (v32 < v31)
            {
              v33 = v22;
              do
              {
                *v33 = v32;
                v32 = *(v33 - 2);
                --v33;
              }
              while (v32 < v31);
              *v33 = v31;
            }
            ++v22;
          }
          while (v8 + 1 != a2);
        }
        return result;
    }
  }
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<std::chrono::time_point<cl::chrono::CFAbsoluteTimeClock,std::chrono::duration<long double,std::ratio<1l,1l>>>> &,std::chrono::time_point<cl::chrono::CFAbsoluteTimeClock,std::chrono::duration<long double,std::ratio<1l,1l>>>*>(double *a1, double *a2, double *a3)
{
  double v3;
  double v4;
  double v5;
  double v6;

  v3 = *a1;
  v4 = *a2;
  v5 = *a3;
  if (*a1 < *a2)
  {
    if (v4 < v5)
    {
      *a1 = v5;
      *a3 = v3;
      return 1;
    }
    *a1 = v4;
    *a2 = v3;
    if (v3 >= *a3)
      return 1;
    *a2 = *a3;
    *a3 = v3;
    return 2;
  }
  if (v4 < v5)
  {
    *a2 = v5;
    *a3 = v4;
    v6 = *a1;
    if (*a1 >= *a2)
      return 1;
    *a1 = *a2;
    *a2 = v6;
    return 2;
  }
  return 0;
}

double *std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,std::chrono::time_point<cl::chrono::CFAbsoluteTimeClock,std::chrono::duration<long double,std::ratio<1l,1l>>> *,std::greater<std::chrono::time_point<cl::chrono::CFAbsoluteTimeClock,std::chrono::duration<long double,std::ratio<1l,1l>>>> &>(double *a1, double *a2)
{
  double v2;
  double v3;
  double *v4;
  double v5;
  double *v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;

  v2 = *a1;
  v3 = *a1;
  if (*(a2 - 1) >= *a1)
  {
    v6 = a1 + 1;
    do
    {
      v4 = v6;
      if (v6 >= a2)
        break;
      ++v6;
    }
    while (*v4 >= v3);
  }
  else
  {
    v4 = a1;
    do
    {
      v5 = v4[1];
      ++v4;
    }
    while (v5 >= v3);
  }
  if (v4 < a2)
  {
    do
      v7 = *--a2;
    while (v7 < v3);
  }
  if (v4 < a2)
  {
    v8 = *v4;
    v9 = *a2;
    do
    {
      *v4 = v9;
      *a2 = v8;
      do
      {
        v10 = v4[1];
        ++v4;
        v8 = v10;
      }
      while (v10 >= v3);
      do
      {
        v11 = *--a2;
        v12 = v11;
      }
      while (v11 < v3);
      v9 = v12;
    }
    while (v4 < a2);
  }
  if (v4 - 1 != a1)
    *a1 = *(v4 - 1);
  *(v4 - 1) = v2;
  return v4;
}

double *std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,std::chrono::time_point<cl::chrono::CFAbsoluteTimeClock,std::chrono::duration<long double,std::ratio<1l,1l>>> *,std::greater<std::chrono::time_point<cl::chrono::CFAbsoluteTimeClock,std::chrono::duration<long double,std::ratio<1l,1l>>>> &>(double *a1, double *a2)
{
  uint64_t v2;
  double v3;
  double v4;
  double v5;
  double *v6;
  double *v7;
  double v8;
  double v9;
  double v10;
  double *v11;
  double *v12;
  double v13;
  double v14;
  double v15;

  v2 = 0;
  v3 = *a1;
  v4 = *a1;
  do
    v5 = a1[++v2];
  while (v5 > v4);
  v6 = &a1[v2];
  v7 = &a1[v2 - 1];
  if (v2 == 1)
  {
    do
    {
      if (v6 >= a2)
        break;
      v9 = *--a2;
    }
    while (v9 <= v4);
  }
  else
  {
    do
      v8 = *--a2;
    while (v8 <= v4);
  }
  if (v6 < a2)
  {
    v10 = *a2;
    v11 = &a1[v2];
    v12 = a2;
    do
    {
      *v11 = v10;
      *v12 = v5;
      do
      {
        v13 = v11[1];
        ++v11;
        v5 = v13;
      }
      while (v13 > v4);
      do
      {
        v14 = *--v12;
        v15 = v14;
      }
      while (v14 <= v4);
      v10 = v15;
    }
    while (v11 < v12);
    v7 = v11 - 1;
  }
  if (v7 != a1)
    *a1 = *v7;
  *v7 = v3;
  return v7;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<std::chrono::time_point<cl::chrono::CFAbsoluteTimeClock,std::chrono::duration<long double,std::ratio<1l,1l>>>> &,std::chrono::time_point<cl::chrono::CFAbsoluteTimeClock,std::chrono::duration<long double,std::ratio<1l,1l>>>*>(double *a1, double *a2)
{
  uint64_t v4;
  _BOOL8 result;
  double v6;
  double v7;
  double *v8;
  double *v9;
  int v10;
  uint64_t v11;
  double v12;
  double v13;
  uint64_t v14;
  uint64_t v15;
  double *v16;

  v4 = a2 - a1;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = *a1;
      v7 = *(a2 - 1);
      if (*a1 < v7)
      {
        *a1 = v7;
        *(a2 - 1) = v6;
      }
      return result;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<std::chrono::time_point<cl::chrono::CFAbsoluteTimeClock,std::chrono::duration<long double,std::ratio<1l,1l>>>> &,std::chrono::time_point<cl::chrono::CFAbsoluteTimeClock,std::chrono::duration<long double,std::ratio<1l,1l>>>*>(a1, a1 + 1, a2 - 1);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<std::chrono::time_point<cl::chrono::CFAbsoluteTimeClock,std::chrono::duration<long double,std::ratio<1l,1l>>>> &,std::chrono::time_point<cl::chrono::CFAbsoluteTimeClock,std::chrono::duration<long double,std::ratio<1l,1l>>>*>(a1, a1 + 1, a1 + 2, a2 - 1);
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<std::chrono::time_point<cl::chrono::CFAbsoluteTimeClock,std::chrono::duration<long double,std::ratio<1l,1l>>>> &,std::chrono::time_point<cl::chrono::CFAbsoluteTimeClock,std::chrono::duration<long double,std::ratio<1l,1l>>>*>(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1);
      return 1;
    default:
      v8 = a1 + 2;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<std::chrono::time_point<cl::chrono::CFAbsoluteTimeClock,std::chrono::duration<long double,std::ratio<1l,1l>>>> &,std::chrono::time_point<cl::chrono::CFAbsoluteTimeClock,std::chrono::duration<long double,std::ratio<1l,1l>>>*>(a1, a1 + 1, a1 + 2);
      v9 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v10 = 0;
      v11 = 24;
      break;
  }
  while (1)
  {
    v12 = *v8;
    v13 = *v9;
    if (*v8 < *v9)
    {
      v14 = v11;
      while (1)
      {
        *(double *)((char *)a1 + v14) = v12;
        v15 = v14 - 8;
        if (v14 == 8)
          break;
        v12 = *(double *)((char *)a1 + v14 - 16);
        v14 -= 8;
        if (v12 >= v13)
        {
          v16 = (double *)((char *)a1 + v15);
          goto LABEL_12;
        }
      }
      v16 = a1;
LABEL_12:
      *v16 = v13;
      if (++v10 == 8)
        return v9 + 1 == a2;
    }
    v8 = v9;
    v11 += 8;
    if (++v9 == a2)
      return 1;
  }
}

uint64_t std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<std::chrono::time_point<cl::chrono::CFAbsoluteTimeClock,std::chrono::duration<long double,std::ratio<1l,1l>>>> &,std::chrono::time_point<cl::chrono::CFAbsoluteTimeClock,std::chrono::duration<long double,std::ratio<1l,1l>>>*>(double *a1, double *a2, double *a3, double *a4)
{
  uint64_t result;
  double v9;
  double v10;
  double v11;

  result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<std::chrono::time_point<cl::chrono::CFAbsoluteTimeClock,std::chrono::duration<long double,std::ratio<1l,1l>>>> &,std::chrono::time_point<cl::chrono::CFAbsoluteTimeClock,std::chrono::duration<long double,std::ratio<1l,1l>>>*>(a1, a2, a3);
  v9 = *a3;
  if (*a3 < *a4)
  {
    *a3 = *a4;
    *a4 = v9;
    v10 = *a2;
    if (*a2 < *a3)
    {
      *a2 = *a3;
      *a3 = v10;
      v11 = *a1;
      if (*a1 < *a2)
      {
        *a1 = *a2;
        *a2 = v11;
      }
    }
  }
  return result;
}

uint64_t std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<std::chrono::time_point<cl::chrono::CFAbsoluteTimeClock,std::chrono::duration<long double,std::ratio<1l,1l>>>> &,std::chrono::time_point<cl::chrono::CFAbsoluteTimeClock,std::chrono::duration<long double,std::ratio<1l,1l>>>*>(double *a1, double *a2, double *a3, double *a4, double *a5)
{
  uint64_t result;
  double v11;
  double v12;
  double v13;
  double v14;

  result = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<std::chrono::time_point<cl::chrono::CFAbsoluteTimeClock,std::chrono::duration<long double,std::ratio<1l,1l>>>> &,std::chrono::time_point<cl::chrono::CFAbsoluteTimeClock,std::chrono::duration<long double,std::ratio<1l,1l>>>*>(a1, a2, a3, a4);
  v11 = *a4;
  if (*a4 < *a5)
  {
    *a4 = *a5;
    *a5 = v11;
    v12 = *a3;
    if (*a3 < *a4)
    {
      *a3 = *a4;
      *a4 = v12;
      v13 = *a2;
      if (*a2 < *a3)
      {
        *a2 = *a3;
        *a3 = v13;
        v14 = *a1;
        if (*a1 < *a2)
        {
          *a1 = *a2;
          *a2 = v14;
        }
      }
    }
  }
  return result;
}

double *std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<std::chrono::time_point<cl::chrono::CFAbsoluteTimeClock,std::chrono::duration<long double,std::ratio<1l,1l>>>> &,std::chrono::time_point<cl::chrono::CFAbsoluteTimeClock,std::chrono::duration<long double,std::ratio<1l,1l>>>*,std::chrono::time_point<cl::chrono::CFAbsoluteTimeClock,std::chrono::duration<long double,std::ratio<1l,1l>>>*>(double *a1, double *a2, double *a3, uint64_t a4)
{
  double *v6;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  double *v12;
  double *v13;
  double *v14;
  double v15;
  uint64_t v16;
  uint64_t v17;
  double v18;
  double *v19;
  double *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  double *v25;
  double v26;

  if (a1 != a2)
  {
    v6 = a2;
    v8 = (char *)a2 - (char *)a1;
    v9 = a2 - a1;
    if ((char *)a2 - (char *)a1 >= 9)
    {
      v10 = (unint64_t)(v9 - 2) >> 1;
      v11 = v10 + 1;
      v12 = &a1[v10];
      do
      {
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<std::chrono::time_point<cl::chrono::CFAbsoluteTimeClock,std::chrono::duration<long double,std::ratio<1l,1l>>>> &,std::chrono::time_point<cl::chrono::CFAbsoluteTimeClock,std::chrono::duration<long double,std::ratio<1l,1l>>>*>((uint64_t)a1, a4, v9, v12--);
        --v11;
      }
      while (v11);
    }
    v13 = v6;
    if (v6 != a3)
    {
      v14 = v6;
      do
      {
        v15 = *v14;
        if (*a1 < *v14)
        {
          *v14 = *a1;
          *a1 = v15;
          std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<std::chrono::time_point<cl::chrono::CFAbsoluteTimeClock,std::chrono::duration<long double,std::ratio<1l,1l>>>> &,std::chrono::time_point<cl::chrono::CFAbsoluteTimeClock,std::chrono::duration<long double,std::ratio<1l,1l>>>*>((uint64_t)a1, a4, v9, a1);
        }
        ++v14;
      }
      while (v14 != a3);
      v13 = a3;
    }
    if (v8 >= 9)
    {
      v16 = (unint64_t)v8 >> 3;
      do
      {
        v17 = 0;
        v18 = *a1;
        v19 = a1;
        do
        {
          v20 = v19;
          v19 += v17 + 1;
          v21 = 2 * v17;
          v17 = (2 * v17) | 1;
          v22 = v21 + 2;
          if (v22 < v16 && v19[1] < *v19)
          {
            ++v19;
            v17 = v22;
          }
          *v20 = *v19;
        }
        while (v17 <= (uint64_t)((unint64_t)(v16 - 2) >> 1));
        if (v19 != --v6)
        {
          *v19 = *v6;
          *v6 = v18;
          v23 = (char *)v19 - (char *)a1 + 8;
          if (v23 < 9)
            continue;
          v24 = (((unint64_t)v23 >> 3) - 2) >> 1;
          v25 = &a1[v24];
          v18 = *v19;
          v26 = *v25;
          if (*v19 >= *v25)
            continue;
          do
          {
            *v19 = v26;
            v19 = v25;
            if (!v24)
              break;
            v24 = (v24 - 1) >> 1;
            v25 = &a1[v24];
            v26 = *v25;
          }
          while (*v25 > v18);
        }
        *v19 = v18;
      }
      while (v16-- > 2);
    }
    return v13;
  }
  return a3;
}

uint64_t std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<std::chrono::time_point<cl::chrono::CFAbsoluteTimeClock,std::chrono::duration<long double,std::ratio<1l,1l>>>> &,std::chrono::time_point<cl::chrono::CFAbsoluteTimeClock,std::chrono::duration<long double,std::ratio<1l,1l>>>*>(uint64_t result, uint64_t a2, uint64_t a3, double *a4)
{
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  double *v8;
  uint64_t v9;
  double v10;
  double v11;
  uint64_t v12;
  uint64_t v13;

  if (a3 >= 2)
  {
    v4 = (uint64_t)a4 - result;
    v5 = (unint64_t)(a3 - 2) >> 1;
    if (v5 >= ((uint64_t)a4 - result) >> 3)
    {
      v6 = v4 >> 2;
      v7 = (v4 >> 2) + 1;
      v8 = (double *)(result + 8 * v7);
      v9 = v6 + 2;
      if (v9 < a3 && v8[1] < *v8)
      {
        ++v8;
        v7 = v9;
      }
      v10 = *a4;
      v11 = *v8;
      if (*a4 >= *v8)
      {
        do
        {
          *a4 = v11;
          a4 = v8;
          if (v5 < v7)
            break;
          v12 = 2 * v7;
          v7 = (2 * v7) | 1;
          v8 = (double *)(result + 8 * v7);
          v13 = v12 + 2;
          if (v13 < a3 && v8[1] < *v8)
          {
            ++v8;
            v7 = v13;
          }
          v11 = *v8;
        }
        while (*v8 <= v10);
        *a4 = v10;
      }
    }
  }
  return result;
}

void std::__function::__func<CLMicroLocationAnchorAppearanceMap::isMeasurementFromValidNonWiFiAnchor(CLMicroLocationFingerprint::Measurement const&)::$_0,std::allocator<CLMicroLocationAnchorAppearanceMap::isMeasurementFromValidNonWiFiAnchor(CLMicroLocationFingerprint::Measurement const&)::$_0>,boost::uuids::uuid ()(unsigned long long const&)>::~__func()
{
  JUMPOUT(0x2426A04D4);
}

_QWORD *std::__function::__func<CLMicroLocationAnchorAppearanceMap::isMeasurementFromValidNonWiFiAnchor(CLMicroLocationFingerprint::Measurement const&)::$_0,std::allocator<CLMicroLocationAnchorAppearanceMap::isMeasurementFromValidNonWiFiAnchor(CLMicroLocationFingerprint::Measurement const&)::$_0>,boost::uuids::uuid ()(unsigned long long const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_2511DA5C0;
  return result;
}

void std::__function::__func<CLMicroLocationAnchorAppearanceMap::isMeasurementFromValidNonWiFiAnchor(CLMicroLocationFingerprint::Measurement const&)::$_0,std::allocator<CLMicroLocationAnchorAppearanceMap::isMeasurementFromValidNonWiFiAnchor(CLMicroLocationFingerprint::Measurement const&)::$_0>,boost::uuids::uuid ()(unsigned long long const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_2511DA5C0;
}

uint64_t std::__function::__func<CLMicroLocationAnchorAppearanceMap::isMeasurementFromValidNonWiFiAnchor(CLMicroLocationFingerprint::Measurement const&)::$_0,std::allocator<CLMicroLocationAnchorAppearanceMap::isMeasurementFromValidNonWiFiAnchor(CLMicroLocationFingerprint::Measurement const&)::$_0>,boost::uuids::uuid ()(unsigned long long const&)>::operator()()
{
  return 0;
}

uint64_t std::__function::__func<CLMicroLocationAnchorAppearanceMap::isMeasurementFromValidNonWiFiAnchor(CLMicroLocationFingerprint::Measurement const&)::$_0,std::allocator<CLMicroLocationAnchorAppearanceMap::isMeasurementFromValidNonWiFiAnchor(CLMicroLocationFingerprint::Measurement const&)::$_0>,boost::uuids::uuid ()(unsigned long long const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<CLMicroLocationAnchorAppearanceMap::isMeasurementFromValidNonWiFiAnchor(CLMicroLocationFingerprint::Measurement const&)::$_0,std::allocator<CLMicroLocationAnchorAppearanceMap::isMeasurementFromValidNonWiFiAnchor(CLMicroLocationFingerprint::Measurement const&)::$_0>,boost::uuids::uuid ()(unsigned long long const&)>::target_type()
{
}

void std::__function::__func<CLMicroLocationAnchorAppearanceMap::isMeasurementFromValidNonWiFiAnchor(CLMicroLocationFingerprint::Measurement const&)::$_1,std::allocator<CLMicroLocationAnchorAppearanceMap::isMeasurementFromValidNonWiFiAnchor(CLMicroLocationFingerprint::Measurement const&)::$_1>,boost::uuids::uuid ()(boost::uuids::uuid const&)>::~__func()
{
  JUMPOUT(0x2426A04D4);
}

_QWORD *std::__function::__func<CLMicroLocationAnchorAppearanceMap::isMeasurementFromValidNonWiFiAnchor(CLMicroLocationFingerprint::Measurement const&)::$_1,std::allocator<CLMicroLocationAnchorAppearanceMap::isMeasurementFromValidNonWiFiAnchor(CLMicroLocationFingerprint::Measurement const&)::$_1>,boost::uuids::uuid ()(boost::uuids::uuid const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_2511DA650;
  return result;
}

void std::__function::__func<CLMicroLocationAnchorAppearanceMap::isMeasurementFromValidNonWiFiAnchor(CLMicroLocationFingerprint::Measurement const&)::$_1,std::allocator<CLMicroLocationAnchorAppearanceMap::isMeasurementFromValidNonWiFiAnchor(CLMicroLocationFingerprint::Measurement const&)::$_1>,boost::uuids::uuid ()(boost::uuids::uuid const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_2511DA650;
}

uint64_t std::__function::__func<CLMicroLocationAnchorAppearanceMap::isMeasurementFromValidNonWiFiAnchor(CLMicroLocationFingerprint::Measurement const&)::$_1,std::allocator<CLMicroLocationAnchorAppearanceMap::isMeasurementFromValidNonWiFiAnchor(CLMicroLocationFingerprint::Measurement const&)::$_1>,boost::uuids::uuid ()(boost::uuids::uuid const&)>::operator()(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)a2;
}

uint64_t std::__function::__func<CLMicroLocationAnchorAppearanceMap::isMeasurementFromValidNonWiFiAnchor(CLMicroLocationFingerprint::Measurement const&)::$_1,std::allocator<CLMicroLocationAnchorAppearanceMap::isMeasurementFromValidNonWiFiAnchor(CLMicroLocationFingerprint::Measurement const&)::$_1>,boost::uuids::uuid ()(boost::uuids::uuid const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<CLMicroLocationAnchorAppearanceMap::isMeasurementFromValidNonWiFiAnchor(CLMicroLocationFingerprint::Measurement const&)::$_1,std::allocator<CLMicroLocationAnchorAppearanceMap::isMeasurementFromValidNonWiFiAnchor(CLMicroLocationFingerprint::Measurement const&)::$_1>,boost::uuids::uuid ()(boost::uuids::uuid const&)>::target_type()
{
}

void std::__function::__func<CLMicroLocationAnchorAppearanceMap::isMeasurementFromValidNonWiFiAnchor(CLMicroLocationFingerprint::Measurement const&)::$_2,std::allocator<CLMicroLocationAnchorAppearanceMap::isMeasurementFromValidNonWiFiAnchor(CLMicroLocationFingerprint::Measurement const&)::$_2>,boost::uuids::uuid ()(std::string const&)>::~__func()
{
  JUMPOUT(0x2426A04D4);
}

_QWORD *std::__function::__func<CLMicroLocationAnchorAppearanceMap::isMeasurementFromValidNonWiFiAnchor(CLMicroLocationFingerprint::Measurement const&)::$_2,std::allocator<CLMicroLocationAnchorAppearanceMap::isMeasurementFromValidNonWiFiAnchor(CLMicroLocationFingerprint::Measurement const&)::$_2>,boost::uuids::uuid ()(std::string const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_2511DA6E0;
  return result;
}

void std::__function::__func<CLMicroLocationAnchorAppearanceMap::isMeasurementFromValidNonWiFiAnchor(CLMicroLocationFingerprint::Measurement const&)::$_2,std::allocator<CLMicroLocationAnchorAppearanceMap::isMeasurementFromValidNonWiFiAnchor(CLMicroLocationFingerprint::Measurement const&)::$_2>,boost::uuids::uuid ()(std::string const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_2511DA6E0;
}

uint64_t std::__function::__func<CLMicroLocationAnchorAppearanceMap::isMeasurementFromValidNonWiFiAnchor(CLMicroLocationFingerprint::Measurement const&)::$_2,std::allocator<CLMicroLocationAnchorAppearanceMap::isMeasurementFromValidNonWiFiAnchor(CLMicroLocationFingerprint::Measurement const&)::$_2>,boost::uuids::uuid ()(std::string const&)>::operator()()
{
  return 0;
}

uint64_t std::__function::__func<CLMicroLocationAnchorAppearanceMap::isMeasurementFromValidNonWiFiAnchor(CLMicroLocationFingerprint::Measurement const&)::$_2,std::allocator<CLMicroLocationAnchorAppearanceMap::isMeasurementFromValidNonWiFiAnchor(CLMicroLocationFingerprint::Measurement const&)::$_2>,boost::uuids::uuid ()(std::string const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<CLMicroLocationAnchorAppearanceMap::isMeasurementFromValidNonWiFiAnchor(CLMicroLocationFingerprint::Measurement const&)::$_2,std::allocator<CLMicroLocationAnchorAppearanceMap::isMeasurementFromValidNonWiFiAnchor(CLMicroLocationFingerprint::Measurement const&)::$_2>,boost::uuids::uuid ()(std::string const&)>::target_type()
{
}

uint64_t CLMicroLocationUtils::DeviceIdVisitor<boost::uuids::uuid>::DeviceIdVisitor(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;

  v7 = std::__function::__value_func<double ()(CLMicroLocationFingerprint const&,CLMicroLocationFingerprint const&)>::__value_func[abi:ne180100](a1, a2);
  std::__function::__value_func<double ()(CLMicroLocationFingerprint const&,CLMicroLocationFingerprint const&)>::__value_func[abi:ne180100](v7 + 32, a3);
  std::__function::__value_func<double ()(CLMicroLocationFingerprint const&,CLMicroLocationFingerprint const&)>::__value_func[abi:ne180100](a1 + 64, a4);
  return a1;
}

void sub_241B34B84(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;

  v4 = (_QWORD *)v1[7];
  if (v4 == v2)
  {
    v5 = v2;
    v6 = 4;
  }
  else
  {
    if (!v4)
      goto LABEL_6;
    v6 = 5;
    v5 = (_QWORD *)v1[7];
  }
  (*(void (**)(void))(*v5 + 8 * v6))();
LABEL_6:
  v7 = (_QWORD *)v1[3];
  if (v7 == v1)
  {
    v8 = 4;
  }
  else
  {
    if (!v7)
      goto LABEL_11;
    v8 = 5;
    v1 = (_QWORD *)v1[3];
  }
  (*(void (**)(_QWORD *))(*v1 + 8 * v8))(v1);
LABEL_11:
  _Unwind_Resume(exception_object);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,AnchorValueStatistics>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AnchorValueStatistics>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AnchorValueStatistics>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,AnchorValueStatistics>>>::__emplace_unique_key_args<std::string,std::string&,AnchorValueStatistics>(uint64_t a1, unsigned __int8 *a2, uint64_t a3, __n128 *a4)
{
  unint64_t v4;
  _QWORD *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint8x8_t v13;
  unint64_t v14;
  unsigned __int8 **v15;
  unsigned __int8 *i;
  unint64_t v17;
  float v18;
  float v19;
  _BOOL8 v20;
  unint64_t v21;
  unint64_t v22;
  size_t v23;
  _QWORD *v24;
  unint64_t v25;
  _QWORD v27[3];

  v9 = (_QWORD *)(a1 + 24);
  v10 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  v11 = v10;
  v12 = *(_QWORD *)(a1 + 8);
  if (v12)
  {
    v13 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
    v13.i16[0] = vaddlv_u8(v13);
    v14 = v13.u32[0];
    if (v13.u32[0] > 1uLL)
    {
      v4 = v10;
      if (v10 >= v12)
        v4 = v10 % v12;
    }
    else
    {
      v4 = (v12 - 1) & v10;
    }
    v15 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v4);
    if (v15)
    {
      for (i = *v15; i; i = *(unsigned __int8 **)i)
      {
        v17 = *((_QWORD *)i + 1);
        if (v17 == v11)
        {
          if ((std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2) & 1) != 0)
            return i;
        }
        else
        {
          if (v14 > 1)
          {
            if (v17 >= v12)
              v17 %= v12;
          }
          else
          {
            v17 &= v12 - 1;
          }
          if (v17 != v4)
            break;
        }
      }
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,AnchorValueStatistics>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AnchorValueStatistics>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AnchorValueStatistics>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,AnchorValueStatistics>>>::__construct_node_hash<std::string&,AnchorValueStatistics>(a1, v11, a3, a4, (uint64_t)v27);
  v18 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v19 = *(float *)(a1 + 32);
  if (!v12 || (float)(v19 * (float)v12) < v18)
  {
    v20 = 1;
    if (v12 >= 3)
      v20 = (v12 & (v12 - 1)) != 0;
    v21 = v20 | (2 * v12);
    v22 = vcvtps_u32_f32(v18 / v19);
    if (v21 <= v22)
      v23 = v22;
    else
      v23 = v21;
    std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>>>::__rehash<true>(a1, v23);
    v12 = *(_QWORD *)(a1 + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v11 >= v12)
        v4 = v11 % v12;
      else
        v4 = v11;
    }
    else
    {
      v4 = (v12 - 1) & v11;
    }
  }
  v24 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v24)
  {
    *(_QWORD *)v27[0] = *v24;
    *v24 = v27[0];
  }
  else
  {
    *(_QWORD *)v27[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v27[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = a1 + 16;
    if (*(_QWORD *)v27[0])
    {
      v25 = *(_QWORD *)(*(_QWORD *)v27[0] + 8);
      if ((v12 & (v12 - 1)) != 0)
      {
        if (v25 >= v12)
          v25 %= v12;
      }
      else
      {
        v25 &= v12 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v25) = v27[0];
    }
  }
  i = (unsigned __int8 *)v27[0];
  ++*v9;
  return i;
}

void sub_241B34E58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void **__p, uint64_t a13)
{
  if (__p)
    std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,AnchorValueStatistics>,void *>>>::operator()[abi:ne180100]((uint64_t)&a13, __p);
  _Unwind_Resume(exception_object);
}

__n128 std::__hash_table<std::__hash_value_type<std::string,AnchorValueStatistics>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AnchorValueStatistics>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AnchorValueStatistics>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,AnchorValueStatistics>>>::__construct_node_hash<std::string&,AnchorValueStatistics>@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, __n128 *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9;
  char *v10;
  std::string *v11;
  __n128 result;

  v9 = a1 + 16;
  v10 = (char *)operator new(0x38uLL);
  *(_QWORD *)(a5 + 8) = v9;
  *(_QWORD *)a5 = v10;
  *(_BYTE *)(a5 + 16) = 0;
  *(_QWORD *)v10 = 0;
  *((_QWORD *)v10 + 1) = a2;
  v11 = (std::string *)(v10 + 16);
  if (*(char *)(a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v11, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)&v11->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
    *((_QWORD *)v10 + 4) = *(_QWORD *)(a3 + 16);
  }
  result = *a4;
  *(__n128 *)(v10 + 40) = *a4;
  *(_BYTE *)(a5 + 16) = 1;
  return result;
}

void sub_241B34F14(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;
  uint64_t v3;

  *v1 = 0;
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,AnchorValueStatistics>,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<std::__hash_value_type<boost::uuids::uuid,std::unordered_map<std::string,AnchorValueStatistics>>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::unordered_map<std::string,AnchorValueStatistics>>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::unordered_map<std::string,AnchorValueStatistics>>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,std::unordered_map<std::string,AnchorValueStatistics>>>>::__emplace_unique_key_args<boost::uuids::uuid,boost::uuids::uuid&,std::unordered_map<std::string,AnchorValueStatistics>>(uint64_t a1, _QWORD *a2, _OWORD *a3, uint64_t *a4)
{
  unint64_t v4;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  _QWORD *v12;
  _QWORD *v13;
  unint64_t v14;
  uint64_t v16;
  _QWORD *v17;
  float v18;
  float v19;
  _BOOL8 v20;
  unint64_t v21;
  unint64_t v22;
  size_t v23;
  _QWORD *v24;
  unint64_t v25;
  _QWORD v27[2];
  char v28;

  v8 = 0;
  v9 = 0;
  do
    v9 ^= (v9 << 6) + (v9 >> 2) + 2654435769u + *((unsigned __int8 *)a2 + v8++);
  while (v8 != 16);
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    if (v11.u32[0] > 1uLL)
    {
      v4 = v9;
      if (v9 >= v10)
        v4 = v9 % v10;
    }
    else
    {
      v4 = (v10 - 1) & v9;
    }
    v12 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
    if (v12)
    {
      v13 = (_QWORD *)*v12;
      if (*v12)
      {
        do
        {
          v14 = v13[1];
          if (v14 == v9)
          {
            if (v13[2] == *a2 && v13[3] == a2[1])
              return v13;
          }
          else
          {
            if (v11.u32[0] > 1uLL)
            {
              if (v14 >= v10)
                v14 %= v10;
            }
            else
            {
              v14 &= v10 - 1;
            }
            if (v14 != v4)
              break;
          }
          v13 = (_QWORD *)*v13;
        }
        while (v13);
      }
    }
  }
  v16 = a1 + 16;
  v17 = operator new(0x48uLL);
  v27[0] = v17;
  v27[1] = a1 + 16;
  *v17 = 0;
  v17[1] = v9;
  *((_OWORD *)v17 + 1) = *a3;
  std::__hash_table<CLMicroLocationFingerprint::Measurement,CLMicroLocationFingerprint::Measurement::HashMeasurement,CLMicroLocationFingerprint::Measurement::PredicateMeasurement,std::allocator<CLMicroLocationFingerprint::Measurement>>::__hash_table((uint64_t)(v17 + 4), a4);
  v28 = 1;
  v18 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v19 = *(float *)(a1 + 32);
  if (!v10 || (float)(v19 * (float)v10) < v18)
  {
    v20 = 1;
    if (v10 >= 3)
      v20 = (v10 & (v10 - 1)) != 0;
    v21 = v20 | (2 * v10);
    v22 = vcvtps_u32_f32(v18 / v19);
    if (v21 <= v22)
      v23 = v22;
    else
      v23 = v21;
    std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>>>::__rehash<true>(a1, v23);
    v10 = *(_QWORD *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
        v4 = v9 % v10;
      else
        v4 = v9;
    }
    else
    {
      v4 = (v10 - 1) & v9;
    }
  }
  v24 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v24)
  {
    *(_QWORD *)v27[0] = *v24;
    *v24 = v27[0];
  }
  else
  {
    *(_QWORD *)v27[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v27[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = v16;
    if (*(_QWORD *)v27[0])
    {
      v25 = *(_QWORD *)(*(_QWORD *)v27[0] + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v25 >= v10)
          v25 %= v10;
      }
      else
      {
        v25 &= v10 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v25) = v27[0];
    }
  }
  v13 = (_QWORD *)v27[0];
  v27[0] = 0;
  ++*(_QWORD *)(a1 + 24);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<boost::uuids::uuid,std::unordered_map<std::string,AnchorValueStatistics>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<boost::uuids::uuid,std::unordered_map<std::string,AnchorValueStatistics>>,void *>>>>::reset[abi:ne180100]((uint64_t)v27, 0);
  return v13;
}

void sub_241B351BC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<boost::uuids::uuid,std::unordered_map<std::string,AnchorValueStatistics>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<boost::uuids::uuid,std::unordered_map<std::string,AnchorValueStatistics>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

uint64_t std::__hash_table<std::__hash_value_type<boost::uuids::uuid,std::vector<CLMicroLocationFingerprint>>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::vector<CLMicroLocationFingerprint>>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::vector<CLMicroLocationFingerprint>>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,std::vector<CLMicroLocationFingerprint>>>>::~__hash_table(uint64_t a1)
{
  void *v2;

  std::__hash_table<std::__hash_value_type<boost::uuids::uuid,std::vector<CLMicroLocationFingerprint>>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::vector<CLMicroLocationFingerprint>>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::vector<CLMicroLocationFingerprint>>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,std::vector<CLMicroLocationFingerprint>>>>::__deallocate_node(a1, *(char **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void std::__hash_table<std::__hash_value_type<boost::uuids::uuid,std::vector<CLMicroLocationFingerprint>>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::vector<CLMicroLocationFingerprint>>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::vector<CLMicroLocationFingerprint>>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,std::vector<CLMicroLocationFingerprint>>>>::__deallocate_node(uint64_t a1, char *a2)
{
  char *v2;
  char *v3;
  void **v4;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = *(char **)v2;
      v4 = (void **)(v2 + 32);
      std::vector<CLMicroLocationFingerprint>::__destroy_vector::operator()[abi:ne180100](&v4);
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

_QWORD *std::__hash_table<std::__hash_value_type<boost::uuids::uuid,std::vector<CLMicroLocationFingerprint>>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::vector<CLMicroLocationFingerprint>>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::vector<CLMicroLocationFingerprint>>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,std::vector<CLMicroLocationFingerprint>>>>::__emplace_unique_key_args<boost::uuids::uuid,std::piecewise_construct_t const&,std::tuple<boost::uuids::uuid const&>,std::tuple<>>(uint64_t a1, _QWORD *a2, uint64_t a3, _OWORD **a4)
{
  unint64_t v4;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  _QWORD **v11;
  _QWORD *i;
  unint64_t v13;
  _QWORD *v15;
  float v16;
  float v17;
  _BOOL8 v18;
  unint64_t v19;
  unint64_t v20;
  size_t v21;
  uint64_t v22;
  _QWORD *v23;
  unint64_t v24;

  v7 = 0;
  v8 = 0;
  do
    v8 ^= (v8 << 6) + (v8 >> 2) + 2654435769u + *((unsigned __int8 *)a2 + v7++);
  while (v7 != 16);
  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      v4 = v8;
      if (v8 >= v9)
        v4 = v8 % v9;
    }
    else
    {
      v4 = (v9 - 1) & v8;
    }
    v11 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v4);
    if (v11)
    {
      for (i = *v11; i; i = (_QWORD *)*i)
      {
        v13 = i[1];
        if (v13 == v8)
        {
          if (i[2] == *a2 && i[3] == a2[1])
            return i;
        }
        else
        {
          if (v10.u32[0] > 1uLL)
          {
            if (v13 >= v9)
              v13 %= v9;
          }
          else
          {
            v13 &= v9 - 1;
          }
          if (v13 != v4)
            break;
        }
      }
    }
  }
  v15 = (_QWORD *)(a1 + 16);
  i = operator new(0x38uLL);
  *i = 0;
  i[1] = v8;
  *((_OWORD *)i + 1) = **a4;
  i[5] = 0;
  i[6] = 0;
  i[4] = 0;
  v16 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v17 = *(float *)(a1 + 32);
  if (!v9 || (float)(v17 * (float)v9) < v16)
  {
    v18 = 1;
    if (v9 >= 3)
      v18 = (v9 & (v9 - 1)) != 0;
    v19 = v18 | (2 * v9);
    v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20)
      v21 = v20;
    else
      v21 = v19;
    std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>>>::__rehash<true>(a1, v21);
    v9 = *(_QWORD *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9)
        v4 = v8 % v9;
      else
        v4 = v8;
    }
    else
    {
      v4 = (v9 - 1) & v8;
    }
  }
  v22 = *(_QWORD *)a1;
  v23 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v23)
  {
    *i = *v23;
LABEL_44:
    *v23 = i;
    goto LABEL_45;
  }
  *i = *v15;
  *v15 = i;
  *(_QWORD *)(v22 + 8 * v4) = v15;
  if (*i)
  {
    v24 = *(_QWORD *)(*i + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v24 >= v9)
        v24 %= v9;
    }
    else
    {
      v24 &= v9 - 1;
    }
    v23 = (_QWORD *)(*(_QWORD *)a1 + 8 * v24);
    goto LABEL_44;
  }
LABEL_45:
  ++*(_QWORD *)(a1 + 24);
  return i;
}

void sub_241B354C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  void **v10;
  uint64_t v11;

  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<boost::uuids::uuid,std::vector<CLMicroLocationFingerprint>>,void *>>>::operator()[abi:ne180100](v11, v10);
  _Unwind_Resume(a1);
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<boost::uuids::uuid,std::vector<CLMicroLocationFingerprint>>,void *>>>::operator()[abi:ne180100](uint64_t a1, void **__p)
{
  void **v3;

  if (*(_BYTE *)(a1 + 8))
  {
    v3 = __p + 4;
    std::vector<CLMicroLocationFingerprint>::__destroy_vector::operator()[abi:ne180100](&v3);
  }
  if (__p)
    operator delete(__p);
}

uint64_t std::vector<CLMicroLocationFingerprint>::__assign_with_size[abi:ne180100]<CLMicroLocationFingerprint*,CLMicroLocationFingerprint*>(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v8;
  void *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  char v18;

  v8 = a1 + 16;
  v9 = *(void **)a1;
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 6) < a4)
  {
    std::vector<CLMicroLocationFingerprint>::__vdeallocate((void **)a1);
    if (a4 > 0x155555555555555)
      std::vector<CLMicroLocationProto::ConfidenceReason>::__throw_length_error[abi:ne180100]();
    v10 = 0x5555555555555556 * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 6);
    if (v10 <= a4)
      v10 = a4;
    if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 6) >= 0xAAAAAAAAAAAAAALL)
      v11 = 0x155555555555555;
    else
      v11 = v10;
    std::vector<CLMicroLocationFingerprint>::__vallocate[abi:ne180100]((_QWORD *)a1, v11);
    result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<CLMicroLocationFingerprint>,CLMicroLocationFingerprint*,CLMicroLocationFingerprint*,CLMicroLocationFingerprint*>(v8, a2, a3, *(_QWORD *)(a1 + 8));
    goto LABEL_11;
  }
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 8) - (_QWORD)v9) >> 6) < a4)
  {
    v13 = a2 + ((uint64_t)(*(_QWORD *)(a1 + 8) - (_QWORD)v9) >> 6 << 6);
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<CLMicroLocationFingerprint *,CLMicroLocationFingerprint *,CLMicroLocationFingerprint *>((uint64_t)&v17, a2, v13, (uint64_t)v9);
    result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<CLMicroLocationFingerprint>,CLMicroLocationFingerprint*,CLMicroLocationFingerprint*,CLMicroLocationFingerprint*>(v8, v13, a3, *(_QWORD *)(a1 + 8));
LABEL_11:
    *(_QWORD *)(a1 + 8) = result;
    return result;
  }
  result = std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<CLMicroLocationFingerprint *,CLMicroLocationFingerprint *,CLMicroLocationFingerprint *>((uint64_t)&v18, a2, a3, (uint64_t)v9);
  v15 = v14;
  v16 = *(_QWORD *)(a1 + 8);
  if (v16 != v14)
  {
    do
    {
      v16 -= 192;
      result = std::allocator<CLMicroLocationFingerprint>::destroy[abi:ne180100](v8, v16);
    }
    while (v16 != v15);
  }
  *(_QWORD *)(a1 + 8) = v15;
  return result;
}

void sub_241B35698(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_241B356A0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void std::vector<CLMicroLocationFingerprint>::__vdeallocate(void **a1)
{
  void *v1;
  uint64_t v3;
  void *v4;

  v1 = *a1;
  if (*a1)
  {
    v3 = (uint64_t)a1[1];
    v4 = *a1;
    if ((void *)v3 != v1)
    {
      do
      {
        v3 -= 192;
        std::allocator<CLMicroLocationFingerprint>::destroy[abi:ne180100]((uint64_t)(a1 + 2), v3);
      }
      while ((void *)v3 != v1);
      v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

uint64_t std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<CLMicroLocationFingerprint *,CLMicroLocationFingerprint *,CLMicroLocationFingerprint *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;

  if (a2 == a3)
    return a2;
  v6 = a3;
  v7 = 0;
  do
  {
    if (a2 != a4)
    {
      v8 = a4 + v7;
      *(_DWORD *)(a4 + v7 + 32) = *(_DWORD *)(a2 + v7 + 32);
      std::__hash_table<CLMicroLocationFingerprint::Measurement,CLMicroLocationFingerprint::Measurement::HashMeasurement,CLMicroLocationFingerprint::Measurement::PredicateMeasurement,std::allocator<CLMicroLocationFingerprint::Measurement>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<CLMicroLocationFingerprint::Measurement,void *> *>>((_QWORD *)(a4 + v7), *(uint64_t **)(a2 + v7 + 16), 0);
      v9 = *(_OWORD *)(a2 + v7 + 40);
      *(_QWORD *)(v8 + 56) = *(_QWORD *)(a2 + v7 + 56);
      *(_OWORD *)(v8 + 40) = v9;
      *(_DWORD *)(v8 + 96) = *(_DWORD *)(a2 + v7 + 96);
      std::__hash_table<CLMicroLocationProto::DataType,std::hash<CLMicroLocationProto::DataType>,std::equal_to<CLMicroLocationProto::DataType>,std::allocator<CLMicroLocationProto::DataType>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<CLMicroLocationProto::DataType,void *> *>>((_QWORD *)(a4 + v7 + 64), *(unsigned int **)(a2 + v7 + 80), 0);
      *(_DWORD *)(v8 + 136) = *(_DWORD *)(a2 + v7 + 136);
      std::__hash_table<std::__hash_value_type<CLMicroLocationProto::DataType,CLMicroLocationFingerprint::StartAndEndTimestamps>,std::__unordered_map_hasher<CLMicroLocationProto::DataType,std::__hash_value_type<CLMicroLocationProto::DataType,CLMicroLocationFingerprint::StartAndEndTimestamps>,std::hash<CLMicroLocationProto::DataType>,std::equal_to<CLMicroLocationProto::DataType>,true>,std::__unordered_map_equal<CLMicroLocationProto::DataType,std::__hash_value_type<CLMicroLocationProto::DataType,CLMicroLocationFingerprint::StartAndEndTimestamps>,std::equal_to<CLMicroLocationProto::DataType>,std::hash<CLMicroLocationProto::DataType>,true>,std::allocator<std::__hash_value_type<CLMicroLocationProto::DataType,CLMicroLocationFingerprint::StartAndEndTimestamps>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<CLMicroLocationProto::DataType,CLMicroLocationFingerprint::StartAndEndTimestamps>,void *> *>>((_QWORD *)(a4 + v7 + 104), *(uint64_t **)(a2 + v7 + 120), 0);
      v10 = *(_OWORD *)(a2 + v7 + 144);
      *(_DWORD *)(v8 + 160) = *(_DWORD *)(a2 + v7 + 160);
      *(_OWORD *)(v8 + 144) = v10;
      std::vector<CLMicroLocationProto::ConfidenceLevel>::__assign_with_size[abi:ne180100]<CLMicroLocationProto::ConfidenceLevel*,CLMicroLocationProto::ConfidenceLevel*>((char *)(a4 + v7 + 168), *(char **)(a2 + v7 + 168), *(_QWORD *)(a2 + v7 + 176), (uint64_t)(*(_QWORD *)(a2 + v7 + 176) - *(_QWORD *)(a2 + v7 + 168)) >> 2);
    }
    v7 += 192;
  }
  while (a2 + v7 != v6);
  return v6;
}

_QWORD *std::__hash_table<std::__hash_value_type<boost::uuids::uuid,std::unordered_map<std::string,std::pair<double,int>>>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::unordered_map<std::string,std::pair<double,int>>>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::unordered_map<std::string,std::pair<double,int>>>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,std::unordered_map<std::string,std::pair<double,int>>>>>::__emplace_unique_key_args<boost::uuids::uuid,std::piecewise_construct_t const&,std::tuple<boost::uuids::uuid const&>,std::tuple<>>(uint64_t a1, _QWORD *a2, uint64_t a3, _OWORD **a4)
{
  unint64_t v4;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  _QWORD *v11;
  _QWORD *v12;
  unint64_t v13;
  uint64_t v15;
  _QWORD *v16;
  float v17;
  float v18;
  _BOOL8 v19;
  unint64_t v20;
  unint64_t v21;
  size_t v22;
  _QWORD *v23;
  unint64_t v24;
  _QWORD v26[2];
  char v27;

  v7 = 0;
  v8 = 0;
  do
    v8 ^= (v8 << 6) + (v8 >> 2) + 2654435769u + *((unsigned __int8 *)a2 + v7++);
  while (v7 != 16);
  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      v4 = v8;
      if (v8 >= v9)
        v4 = v8 % v9;
    }
    else
    {
      v4 = (v9 - 1) & v8;
    }
    v11 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
    if (v11)
    {
      v12 = (_QWORD *)*v11;
      if (*v11)
      {
        do
        {
          v13 = v12[1];
          if (v13 == v8)
          {
            if (v12[2] == *a2 && v12[3] == a2[1])
              return v12;
          }
          else
          {
            if (v10.u32[0] > 1uLL)
            {
              if (v13 >= v9)
                v13 %= v9;
            }
            else
            {
              v13 &= v9 - 1;
            }
            if (v13 != v4)
              break;
          }
          v12 = (_QWORD *)*v12;
        }
        while (v12);
      }
    }
  }
  v15 = a1 + 16;
  v16 = operator new(0x48uLL);
  v26[0] = v16;
  v26[1] = a1 + 16;
  *v16 = 0;
  v16[1] = v8;
  *((_OWORD *)v16 + 1) = **a4;
  *((_OWORD *)v16 + 2) = 0u;
  *((_OWORD *)v16 + 3) = 0u;
  *((_DWORD *)v16 + 16) = 1065353216;
  v27 = 1;
  v17 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v18 = *(float *)(a1 + 32);
  if (!v9 || (float)(v18 * (float)v9) < v17)
  {
    v19 = 1;
    if (v9 >= 3)
      v19 = (v9 & (v9 - 1)) != 0;
    v20 = v19 | (2 * v9);
    v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21)
      v22 = v21;
    else
      v22 = v20;
    std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>>>::__rehash<true>(a1, v22);
    v9 = *(_QWORD *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9)
        v4 = v8 % v9;
      else
        v4 = v8;
    }
    else
    {
      v4 = (v9 - 1) & v8;
    }
  }
  v23 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v23)
  {
    *(_QWORD *)v26[0] = *v23;
    *v23 = v26[0];
  }
  else
  {
    *(_QWORD *)v26[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v26[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = v15;
    if (*(_QWORD *)v26[0])
    {
      v24 = *(_QWORD *)(*(_QWORD *)v26[0] + 8);
      if ((v9 & (v9 - 1)) != 0)
      {
        if (v24 >= v9)
          v24 %= v9;
      }
      else
      {
        v24 &= v9 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v24) = v26[0];
    }
  }
  v12 = (_QWORD *)v26[0];
  v26[0] = 0;
  ++*(_QWORD *)(a1 + 24);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<boost::uuids::uuid,std::unordered_map<std::string,AnchorValueStatistics>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<boost::uuids::uuid,std::unordered_map<std::string,AnchorValueStatistics>>,void *>>>>::reset[abi:ne180100]((uint64_t)v26, 0);
  return v12;
}

void sub_241B35A8C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<boost::uuids::uuid,std::unordered_map<std::string,AnchorValueStatistics>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<boost::uuids::uuid,std::unordered_map<std::string,AnchorValueStatistics>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::pair<double,int>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::pair<double,int>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::pair<double,int>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::pair<double,int>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1, unsigned __int8 *a2, uint64_t a3, __int128 **a4)
{
  unint64_t v4;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  unint64_t v13;
  unsigned __int8 **v14;
  unsigned __int8 *i;
  unint64_t v16;
  float v17;
  float v18;
  _BOOL8 v19;
  unint64_t v20;
  unint64_t v21;
  size_t v22;
  _QWORD *v23;
  unint64_t v24;
  _QWORD v26[3];

  v8 = (_QWORD *)(a1 + 24);
  v9 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  v10 = v9;
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      v4 = v9;
      if (v9 >= v11)
        v4 = v9 % v11;
    }
    else
    {
      v4 = (v11 - 1) & v9;
    }
    v14 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v4);
    if (v14)
    {
      for (i = *v14; i; i = *(unsigned __int8 **)i)
      {
        v16 = *((_QWORD *)i + 1);
        if (v16 == v10)
        {
          if ((std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2) & 1) != 0)
            return i;
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11)
              v16 %= v11;
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4)
            break;
        }
      }
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,std::pair<double,int>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::pair<double,int>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::pair<double,int>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::pair<double,int>>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1, v10, a4, (uint64_t)v26);
  v17 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v18 = *(float *)(a1 + 32);
  if (!v11 || (float)(v18 * (float)v11) < v17)
  {
    v19 = 1;
    if (v11 >= 3)
      v19 = (v11 & (v11 - 1)) != 0;
    v20 = v19 | (2 * v11);
    v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21)
      v22 = v21;
    else
      v22 = v20;
    std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>>>::__rehash<true>(a1, v22);
    v11 = *(_QWORD *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
        v4 = v10 % v11;
      else
        v4 = v10;
    }
    else
    {
      v4 = (v11 - 1) & v10;
    }
  }
  v23 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v23)
  {
    *(_QWORD *)v26[0] = *v23;
    *v23 = v26[0];
  }
  else
  {
    *(_QWORD *)v26[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v26[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = a1 + 16;
    if (*(_QWORD *)v26[0])
    {
      v24 = *(_QWORD *)(*(_QWORD *)v26[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v24 >= v11)
          v24 %= v11;
      }
      else
      {
        v24 &= v11 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v24) = v26[0];
    }
  }
  i = (unsigned __int8 *)v26[0];
  ++*v8;
  return i;
}

void sub_241B35D14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void **__p, uint64_t a13)
{
  if (__p)
    std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,AnchorValueStatistics>,void *>>>::operator()[abi:ne180100]((uint64_t)&a13, __p);
  _Unwind_Resume(exception_object);
}

void std::__hash_table<std::__hash_value_type<std::string,std::pair<double,int>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::pair<double,int>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::pair<double,int>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::pair<double,int>>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1@<X0>, uint64_t a2@<X1>, __int128 **a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7;
  char *v8;
  std::string *v9;
  __int128 *v10;
  __int128 v11;

  v7 = a1 + 16;
  v8 = (char *)operator new(0x38uLL);
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  *(_QWORD *)v8 = 0;
  *((_QWORD *)v8 + 1) = a2;
  v9 = (std::string *)(v8 + 16);
  v10 = *a3;
  if (*((char *)*a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)v10, *((_QWORD *)v10 + 1));
  }
  else
  {
    v11 = *v10;
    *((_QWORD *)v8 + 4) = *((_QWORD *)v10 + 2);
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v11;
  }
  *((_QWORD *)v8 + 5) = 0;
  *((_DWORD *)v8 + 12) = 0;
  *(_BYTE *)(a4 + 16) = 1;
}

void sub_241B35DC8(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;
  uint64_t v3;

  *v1 = 0;
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,AnchorValueStatistics>,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<std::__hash_value_type<boost::uuids::uuid,std::unordered_map<std::string,AnchorValueStatistics>>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::unordered_map<std::string,AnchorValueStatistics>>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::unordered_map<std::string,AnchorValueStatistics>>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,std::unordered_map<std::string,AnchorValueStatistics>>>>::__emplace_unique_key_args<boost::uuids::uuid,std::piecewise_construct_t const&,std::tuple<boost::uuids::uuid const&>,std::tuple<>>(uint64_t a1, _QWORD *a2, uint64_t a3, _OWORD **a4)
{
  unint64_t v4;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  _QWORD *v11;
  _QWORD *v12;
  unint64_t v13;
  uint64_t v15;
  _QWORD *v16;
  float v17;
  float v18;
  _BOOL8 v19;
  unint64_t v20;
  unint64_t v21;
  size_t v22;
  _QWORD *v23;
  unint64_t v24;
  _QWORD v26[2];
  char v27;

  v7 = 0;
  v8 = 0;
  do
    v8 ^= (v8 << 6) + (v8 >> 2) + 2654435769u + *((unsigned __int8 *)a2 + v7++);
  while (v7 != 16);
  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      v4 = v8;
      if (v8 >= v9)
        v4 = v8 % v9;
    }
    else
    {
      v4 = (v9 - 1) & v8;
    }
    v11 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
    if (v11)
    {
      v12 = (_QWORD *)*v11;
      if (*v11)
      {
        do
        {
          v13 = v12[1];
          if (v13 == v8)
          {
            if (v12[2] == *a2 && v12[3] == a2[1])
              return v12;
          }
          else
          {
            if (v10.u32[0] > 1uLL)
            {
              if (v13 >= v9)
                v13 %= v9;
            }
            else
            {
              v13 &= v9 - 1;
            }
            if (v13 != v4)
              break;
          }
          v12 = (_QWORD *)*v12;
        }
        while (v12);
      }
    }
  }
  v15 = a1 + 16;
  v16 = operator new(0x48uLL);
  v26[0] = v16;
  v26[1] = a1 + 16;
  *v16 = 0;
  v16[1] = v8;
  *((_OWORD *)v16 + 1) = **a4;
  *((_OWORD *)v16 + 2) = 0u;
  *((_OWORD *)v16 + 3) = 0u;
  *((_DWORD *)v16 + 16) = 1065353216;
  v27 = 1;
  v17 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v18 = *(float *)(a1 + 32);
  if (!v9 || (float)(v18 * (float)v9) < v17)
  {
    v19 = 1;
    if (v9 >= 3)
      v19 = (v9 & (v9 - 1)) != 0;
    v20 = v19 | (2 * v9);
    v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21)
      v22 = v21;
    else
      v22 = v20;
    std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>>>::__rehash<true>(a1, v22);
    v9 = *(_QWORD *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9)
        v4 = v8 % v9;
      else
        v4 = v8;
    }
    else
    {
      v4 = (v9 - 1) & v8;
    }
  }
  v23 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v23)
  {
    *(_QWORD *)v26[0] = *v23;
    *v23 = v26[0];
  }
  else
  {
    *(_QWORD *)v26[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v26[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = v15;
    if (*(_QWORD *)v26[0])
    {
      v24 = *(_QWORD *)(*(_QWORD *)v26[0] + 8);
      if ((v9 & (v9 - 1)) != 0)
      {
        if (v24 >= v9)
          v24 %= v9;
      }
      else
      {
        v24 &= v9 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v24) = v26[0];
    }
  }
  v12 = (_QWORD *)v26[0];
  v26[0] = 0;
  ++*(_QWORD *)(a1 + 24);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<boost::uuids::uuid,std::unordered_map<std::string,AnchorValueStatistics>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<boost::uuids::uuid,std::unordered_map<std::string,AnchorValueStatistics>>,void *>>>>::reset[abi:ne180100]((uint64_t)v26, 0);
  return v12;
}

void sub_241B3606C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<boost::uuids::uuid,std::unordered_map<std::string,AnchorValueStatistics>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<boost::uuids::uuid,std::unordered_map<std::string,AnchorValueStatistics>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,AnchorValueStatistics>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AnchorValueStatistics>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AnchorValueStatistics>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,AnchorValueStatistics>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1, unsigned __int8 *a2, uint64_t a3, __int128 **a4)
{
  unint64_t v4;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  unint64_t v13;
  unsigned __int8 **v14;
  unsigned __int8 *i;
  unint64_t v16;
  float v17;
  float v18;
  _BOOL8 v19;
  unint64_t v20;
  unint64_t v21;
  size_t v22;
  _QWORD *v23;
  unint64_t v24;
  _QWORD v26[3];

  v8 = (_QWORD *)(a1 + 24);
  v9 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  v10 = v9;
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      v4 = v9;
      if (v9 >= v11)
        v4 = v9 % v11;
    }
    else
    {
      v4 = (v11 - 1) & v9;
    }
    v14 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v4);
    if (v14)
    {
      for (i = *v14; i; i = *(unsigned __int8 **)i)
      {
        v16 = *((_QWORD *)i + 1);
        if (v16 == v10)
        {
          if ((std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2) & 1) != 0)
            return i;
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11)
              v16 %= v11;
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4)
            break;
        }
      }
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,AnchorValueStatistics>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AnchorValueStatistics>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AnchorValueStatistics>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,AnchorValueStatistics>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1, v10, a4, (uint64_t)v26);
  v17 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v18 = *(float *)(a1 + 32);
  if (!v11 || (float)(v18 * (float)v11) < v17)
  {
    v19 = 1;
    if (v11 >= 3)
      v19 = (v11 & (v11 - 1)) != 0;
    v20 = v19 | (2 * v11);
    v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21)
      v22 = v21;
    else
      v22 = v20;
    std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>>>::__rehash<true>(a1, v22);
    v11 = *(_QWORD *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
        v4 = v10 % v11;
      else
        v4 = v10;
    }
    else
    {
      v4 = (v11 - 1) & v10;
    }
  }
  v23 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v23)
  {
    *(_QWORD *)v26[0] = *v23;
    *v23 = v26[0];
  }
  else
  {
    *(_QWORD *)v26[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v26[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = a1 + 16;
    if (*(_QWORD *)v26[0])
    {
      v24 = *(_QWORD *)(*(_QWORD *)v26[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v24 >= v11)
          v24 %= v11;
      }
      else
      {
        v24 &= v11 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v24) = v26[0];
    }
  }
  i = (unsigned __int8 *)v26[0];
  ++*v8;
  return i;
}

void sub_241B362F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void **__p, uint64_t a13)
{
  if (__p)
    std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,AnchorValueStatistics>,void *>>>::operator()[abi:ne180100]((uint64_t)&a13, __p);
  _Unwind_Resume(exception_object);
}

void std::__hash_table<std::__hash_value_type<std::string,AnchorValueStatistics>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AnchorValueStatistics>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AnchorValueStatistics>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,AnchorValueStatistics>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1@<X0>, uint64_t a2@<X1>, __int128 **a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7;
  _QWORD *v8;
  std::string *v9;
  __int128 *v10;
  __int128 v11;

  v7 = a1 + 16;
  v8 = operator new(0x38uLL);
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  *v8 = 0;
  v8[1] = a2;
  v9 = (std::string *)(v8 + 2);
  v10 = *a3;
  if (*((char *)*a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)v10, *((_QWORD *)v10 + 1));
  }
  else
  {
    v11 = *v10;
    v8[4] = *((_QWORD *)v10 + 2);
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v11;
  }
  v8[5] = 0;
  v8[6] = 0;
  *(_BYTE *)(a4 + 16) = 1;
}

void sub_241B363A4(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;
  uint64_t v3;

  *v1 = 0;
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,AnchorValueStatistics>,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

void sub_241B364C4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_241B3670C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39)
{
  if (a21 < 0)
    operator delete(__p);
  if (a27 < 0)
    operator delete(a22);
  if (a33 < 0)
    operator delete(a28);
  _Unwind_Resume(exception_object);
}

id ULSettings::getFingerprintDistanceFunctionParamsForType(int a1)
{
  void *v1;
  void *v2;
  id v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  id result;
  _Unwind_Exception *FingerprintDistanceFunctionParamsForType;

  v3 = (id)MEMORY[0x24BDBD1B8];
  switch(a1)
  {
    case 0:
    case 1:
      return v3;
    case 2:
      +[ULDefaultsSingleton shared](ULDefaultsSingleton, "shared");
      v4 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v4, "defaultsDictionary");
      v5 = (void *)objc_claimAutoreleasedReturnValue();

      objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "ULCombinedEuclideanJaccardParams");
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v5, "objectForKey:", v6);
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      if (v7)
      {
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) != 0)
          goto LABEL_13;
      }
      v3 = &unk_2511EE968;
      break;
    case 3:
      +[ULDefaultsSingleton shared](ULDefaultsSingleton, "shared");
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v8, "defaultsDictionary");
      v5 = (void *)objc_claimAutoreleasedReturnValue();

      objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "ULTanimotoBaseParams");
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v5, "objectForKey:", v6);
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      if (!v7)
        break;
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) == 0)
        break;
      goto LABEL_13;
    case 4:
      +[ULDefaultsSingleton shared](ULDefaultsSingleton, "shared");
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v9, "defaultsDictionary");
      v5 = (void *)objc_claimAutoreleasedReturnValue();

      objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "ULWeightedEuclideanJaccardParams");
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v5, "objectForKey:", v6);
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      if (v7)
      {
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) != 0)
          goto LABEL_13;
      }
      v3 = &unk_2511EEA80;
      break;
    case 5:
      +[ULDefaultsSingleton shared](ULDefaultsSingleton, "shared");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v10, "defaultsDictionary");
      v5 = (void *)objc_claimAutoreleasedReturnValue();

      objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "ULWeightedEuclideanJaccardTwoSidedParams");
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v5, "objectForKey:", v6);
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      if (v7 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
      {
LABEL_13:
        v3 = v7;
        v7 = v3;
      }
      else
      {
        v3 = &unk_2511EEB98;
      }
      break;
    default:
      FingerprintDistanceFunctionParamsForType = (_Unwind_Exception *)ULSettings::getFingerprintDistanceFunctionParamsForType();

      _Unwind_Resume(FingerprintDistanceFunctionParamsForType);
      return result;
  }

  return v3;
}

void ULSettings::getSupportedRecordingEvents(_QWORD *a1@<X0>, char **a2@<X8>)
{
  char *v4;
  uint64_t v5;
  _QWORD *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  int v15;

  v4 = 0;
  v5 = 0;
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v6 = a2 + 2;
  do
  {
    if (((*a1 >> v5) & 1) != 0)
    {
      if ((unint64_t)v4 >= *v6)
      {
        v8 = *a2;
        v9 = (v4 - *a2) >> 2;
        v10 = v9 + 1;
        if ((unint64_t)(v9 + 1) >> 62)
          std::vector<CLMicroLocationProto::ConfidenceReason>::__throw_length_error[abi:ne180100]();
        v11 = *v6 - (_QWORD)v8;
        if (v11 >> 1 > v10)
          v10 = v11 >> 1;
        if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFFCLL)
          v12 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v12 = v10;
        if (v12)
        {
          v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CLMicroLocationProto::ConfidenceReason>>((uint64_t)v6, v12);
          v8 = *a2;
          v4 = a2[1];
        }
        else
        {
          v13 = 0;
        }
        v14 = &v13[4 * v9];
        *(_DWORD *)v14 = v5;
        v7 = v14 + 4;
        while (v4 != v8)
        {
          v15 = *((_DWORD *)v4 - 1);
          v4 -= 4;
          *((_DWORD *)v14 - 1) = v15;
          v14 -= 4;
        }
        *a2 = v14;
        a2[1] = v7;
        a2[2] = &v13[4 * v12];
        if (v8)
          operator delete(v8);
      }
      else
      {
        *(_DWORD *)v4 = v5;
        v7 = v4 + 4;
      }
      a2[1] = v7;
      v4 = v7;
    }
    ++v5;
  }
  while (v5 != 56);
}

void sub_241B36BD8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void ULSettings::getRecordingEventsForModelType(char **a1@<X8>)
{
  uint64_t v1;

  v1 = 14004;
  ULSettings::getSupportedRecordingEvents(&v1, a1);
}

void ULSettings::refresh(ULSettings *this)
{
  id v1;

  +[ULDefaultsSingleton shared](ULDefaultsSingleton, "shared");
  v1 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "refresh");

}

void sub_241B36C5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void ___ZL45_CLLogObjectForCategory_MicroLocation_Defaultv_block_invoke_78()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.MicroLocation", "MicroLocation");
  v1 = (void *)logObject_MicroLocation_Default;
  logObject_MicroLocation_Default = (uint64_t)v0;

}

void sub_241B36D60(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

uint64_t ULDBUtils::insertEntries<CLMicroLocationRecordingEventsTable,ULRecordingEventMO>(void *a1, uint64_t a2)
{
  id v3;
  void *v4;
  id v5;
  uint64_t v6;
  _QWORD v8[4];
  id v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  char v15;

  v3 = a1;
  v12 = 0;
  v13 = &v12;
  v14 = 0x2020000000;
  v15 = 0;
  objc_msgSend(v3, "managedObjectContext");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v8[0] = MEMORY[0x24BDAC760];
  v8[1] = 3221225472;
  v8[2] = ___ZN9ULDBUtils13insertEntriesI35CLMicroLocationRecordingEventsTable18ULRecordingEventMOEEbP7ULStoreRKNSt3__16vectorINT_5EntryENS5_9allocatorIS8_EEEE_block_invoke;
  v8[3] = &unk_2511D22D0;
  v11 = a2;
  v5 = v3;
  v9 = v5;
  v10 = &v12;
  objc_msgSend(v4, "performBlockAndWait:", v8);

  v6 = *((unsigned __int8 *)v13 + 24);
  _Block_object_dispose(&v12, 8);

  return v6;
}

void sub_241B36E84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, uint64_t a8, uint64_t a9, ...)
{
  void *v9;
  void *v10;
  va_list va;

  va_start(va, a9);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void ULDBUtils::fetchEntries<CLMicroLocationRecordingEventsTable,ULRecordingEventMO>(void *a1@<X0>, void *a2@<X1>, void *a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  id v9;
  id v10;
  id v11;
  void *v12;
  id v13;
  id v14;
  id v15;
  uint64_t *v16;
  _QWORD v17[4];
  id v18;
  id v19;
  id v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  __n128 (*v26)(__n128 *, __n128 *);
  void (*v27)(uint64_t);
  void *v28;
  _QWORD v29[3];
  void **v30;

  v9 = a1;
  v10 = a2;
  v11 = a3;
  v23 = 0;
  v24 = &v23;
  v25 = 0x4812000000;
  v26 = __Block_byref_object_copy__19;
  v27 = __Block_byref_object_dispose__19;
  v28 = &unk_241BEBD1D;
  memset(v29, 0, sizeof(v29));
  objc_msgSend(v9, "managedObjectContext");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  v17[0] = MEMORY[0x24BDAC760];
  v17[1] = 3221225472;
  v17[2] = ___ZN9ULDBUtils12fetchEntriesI35CLMicroLocationRecordingEventsTable18ULRecordingEventMOEENSt3__16vectorINT_5EntryENS3_9allocatorIS6_EEEEP7ULStoreP7NSArrayIP11NSPredicateEPSC_IP16NSSortDescriptorEm_block_invoke;
  v17[3] = &unk_2511D22F8;
  v13 = v10;
  v18 = v13;
  v14 = v11;
  v19 = v14;
  v22 = a4;
  v15 = v9;
  v20 = v15;
  v21 = &v23;
  objc_msgSend(v12, "performBlockAndWait:", v17);

  v16 = v24;
  a5[1] = 0;
  a5[2] = 0;
  *a5 = 0;
  std::vector<CLMicroLocationRecordingEventsTable::Entry>::__init_with_size[abi:ne180100]<CLMicroLocationRecordingEventsTable::Entry*,CLMicroLocationRecordingEventsTable::Entry*>(a5, (__int128 *)v16[6], (__int128 *)v16[7], 0xEF7BDEF7BDEF7BDFLL * ((v16[7] - v16[6]) >> 3));

  _Block_object_dispose(&v23, 8);
  v30 = (void **)v29;
  std::vector<CLMicroLocationRecordingEventsTable::Entry>::__destroy_vector::operator()[abi:ne180100](&v30);

}

void sub_241B3704C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, void *a7, void *a8, uint64_t a9, uint64_t a10, ...)
{
  void *v10;
  void *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  va_list va;

  va_start(va, a10);

  _Block_object_dispose(va, 8);
  *(_QWORD *)(v14 - 96) = v13;
  std::vector<CLMicroLocationRecordingEventsTable::Entry>::__destroy_vector::operator()[abi:ne180100]((void ***)(v14 - 96));

  _Unwind_Resume(a1);
}

void ULDBUtils::fetchAllWithLimit<CLMicroLocationRecordingEventsTable,ULRecordingEventMO>(void *a1@<X0>, unsigned int a2@<W1>, _QWORD *a3@<X8>)
{
  id v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  _QWORD v10[2];

  v10[1] = *MEMORY[0x24BDAC8D0];
  v5 = a1;
  v6 = (void *)MEMORY[0x24BDD17C0];
  objc_msgSend((id)objc_opt_class(), "defaultSortProperty");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "sortDescriptorWithKey:ascending:", v7, 0);
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  v10[0] = v8;
  objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", v10, 1);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  ULDBUtils::fetchEntries<CLMicroLocationRecordingEventsTable,ULRecordingEventMO>(v5, 0, v9, a2, a3);

}

void sub_241B371AC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_241B37334(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_241B3751C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_241B37624(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_241B37818(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_241B37BA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, void *a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13, void *a14, uint64_t a15, uint64_t a16, ...)
{
  void *v16;
  void *v17;
  void *v18;
  uint64_t v19;
  va_list va;

  va_start(va, a16);

  _Block_object_dispose(va, 8);
  *(_QWORD *)(v19 - 144) = a4;
  std::vector<CLMicroLocationRecordingEventsTable::Entry>::__destroy_vector::operator()[abi:ne180100]((void ***)(v19 - 144));

  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy__19(__n128 *a1, __n128 *a2)
{
  __n128 result;

  a1[3].n128_u64[0] = 0;
  a1[3].n128_u64[1] = 0;
  a1[4].n128_u64[0] = 0;
  result = a2[3];
  a1[3] = result;
  a1[4].n128_u64[0] = a2[4].n128_u64[0];
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = 0;
  a2[4].n128_u64[0] = 0;
  return result;
}

void __Block_byref_object_dispose__19(uint64_t a1)
{
  void **v1;

  v1 = (void **)(a1 + 48);
  std::vector<CLMicroLocationRecordingEventsTable::Entry>::__destroy_vector::operator()[abi:ne180100](&v1);
}

void sub_241B37E64(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void ULDBUtils::convertManagedObjectsToEntries<CLMicroLocationRecordingEventsTable,ULRecordingEventMO>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  id v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  id v8;
  void *v9;
  unint64_t v10;
  uint64_t v11;
  NSObject *v12;
  void *v13;
  void *v14;
  NSObject *v15;
  void *v16;
  void *v17;
  uint64_t j;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint8_t buf[4];
  int v25;
  __int16 v26;
  const char *v27;
  __int16 v28;
  void *v29;
  __int128 v30[15];
  __int128 v31;
  _BYTE v32[128];
  uint64_t v33;

  v33 = *MEMORY[0x24BDAC8D0];
  v3 = a1;
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  std::vector<CLMicroLocationRecordingEventsTable::Entry>::reserve(a2, objc_msgSend(v3, "count"));
  v22 = 0u;
  v23 = 0u;
  v20 = 0u;
  v21 = 0u;
  v4 = v3;
  v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v20, v32, 16);
  if (v5)
  {
    v6 = *(_QWORD *)v21;
    while (2)
    {
      for (i = 0; i != v5; ++i)
      {
        if (*(_QWORD *)v21 != v6)
          objc_enumerationMutation(v4);
        v8 = *(id *)(*((_QWORD *)&v20 + 1) + 8 * i);
        v9 = v8;
        if (!v8)
        {
          v31 = 0u;
          memset(v30, 0, sizeof(v30));
LABEL_16:
          if (onceToken_MicroLocation_Default != -1)
            dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_100);
          v12 = (id)logObject_MicroLocation_Default;
          if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
          {
            objc_msgSend(v9, "entity");
            v13 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v13, "name");
            v14 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 68289283;
            v25 = 0;
            v26 = 2082;
            v27 = "";
            v28 = 2113;
            v29 = v14;
            _os_log_impl(&dword_2419D9000, v12, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"Failed to convert MO to entry\", \"MO\":%{private, location:escape_only}@}", buf, 0x1Cu);

          }
          if (onceToken_MicroLocation_Default != -1)
            dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_100);
          v15 = (id)logObject_MicroLocation_Default;
          if (os_signpost_enabled(v15))
          {
            objc_msgSend(v9, "entity");
            v16 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v16, "name");
            v17 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 68289283;
            v25 = 0;
            v26 = 2082;
            v27 = "";
            v28 = 2113;
            v29 = v17;
            _os_signpost_emit_with_name_impl(&dword_2419D9000, v15, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Failed to convert MO to entry", "{\"msg%{public}.0s\":\"Failed to convert MO to entry\", \"MO\":%{private, location:escape_only}@}", buf, 0x1Cu);

          }
          std::__optional_destruct_base<CLMicroLocationRecordingEventsTable::Entry,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)v30);

          v19 = *a2;
          for (j = a2[1];
                j != v19;
                std::allocator<CLMicroLocationRecordingEventsTable::Entry>::destroy[abi:ne180100]((uint64_t)(a2 + 2), j))
          {
            j -= 248;
          }
          a2[1] = v19;
          goto LABEL_28;
        }
        objc_msgSend(v8, "convertToEntry", (_QWORD)v20);
        if (!BYTE8(v31))
          goto LABEL_16;
        v10 = a2[1];
        if (v10 >= a2[2])
        {
          v11 = std::vector<CLMicroLocationRecordingEventsTable::Entry>::__push_back_slow_path<CLMicroLocationRecordingEventsTable::Entry>(a2, v30);
        }
        else
        {
          std::allocator<CLMicroLocationRecordingEventsTable::Entry>::construct[abi:ne180100]<CLMicroLocationRecordingEventsTable::Entry,CLMicroLocationRecordingEventsTable::Entry>((uint64_t)(a2 + 2), a2[1], v30);
          v11 = v10 + 248;
          a2[1] = v10 + 248;
        }
        a2[1] = v11;
        std::__optional_destruct_base<CLMicroLocationRecordingEventsTable::Entry,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)v30);

      }
      v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v20, v32, 16);
      if (v5)
        continue;
      break;
    }
  }

LABEL_28:
}

void sub_241B38228(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  va_list va;

  va_start(va, a13);

  std::__optional_destruct_base<CLMicroLocationRecordingEventsTable::Entry,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)va);
  std::vector<CLMicroLocationRecordingEventsTable::Entry>::__destroy_vector::operator()[abi:ne180100]((void ***)va);

  _Unwind_Resume(a1);
}

void sub_241B38468(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_241B38694(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_241B3888C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_241B38B00(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_241B38DC8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_241B38FE8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_241B39158(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_241B3928C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_241B39424(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, void **a14)
{
  void *v14;
  void *v15;
  void *v16;

  a14 = (void **)&a11;
  std::vector<CLMicroLocationRecordingEventsTable::Entry>::__destroy_vector::operator()[abi:ne180100](&a14);

  _Unwind_Resume(a1);
}

void sub_241B39578(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_241B39880(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, void *__p, uint64_t a5, int a6, __int16 a7, char a8, char a9, uint64_t a10, void *a11, void *__pa, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, std::__split_buffer<std::string> *a19)
{
  void *v19;

  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__pa);
  _Unwind_Resume(a1);
}

void sub_241B39A30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, void *a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  void *v11;
  void *v12;
  void *v13;
  va_list va;

  va_start(va, a11);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_241B39B3C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_241B39D58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  va_list va;

  va_start(va, a15);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_241B39DD4()
{
  JUMPOUT(0x241B39DC4);
}

void sub_241B39DDC()
{
  JUMPOUT(0x241B39DC8);
}

void sub_241B39EB8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_241B39FD8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void ___ZL45_CLLogObjectForCategory_MicroLocation_Defaultv_block_invoke_79()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.MicroLocation", "MicroLocation");
  v1 = (void *)logObject_MicroLocation_Default;
  logObject_MicroLocation_Default = (uint64_t)v0;

}

void ___ZN9ULDBUtils13insertEntriesI35CLMicroLocationRecordingEventsTable18ULRecordingEventMOEEbP7ULStoreRKNSt3__16vectorINT_5EntryENS5_9allocatorIS8_EEEE_block_invoke(uint64_t a1)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;
  NSObject *v7;
  void *v8;
  void *v9;
  NSObject *v10;
  void *v11;
  void *v12;
  void *v13;
  int v14;
  int v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  void *v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  v2 = *(uint64_t **)(a1 + 48);
  v3 = *v2;
  v4 = v2[1];
  if (*v2 == v4)
  {
LABEL_4:
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = objc_msgSend(*(id *)(a1 + 32), "commitChangesToStore");
    objc_msgSend(*(id *)(a1 + 32), "deleteOldestRecordsIfFull");
  }
  else
  {
    while (1)
    {
      objc_msgSend(*(id *)(a1 + 32), "managedObjectContext");
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      +[ULRecordingEventMO createFromEntry:inManagedObjectContext:](ULRecordingEventMO, "createFromEntry:inManagedObjectContext:", v3, v5);
      v6 = (void *)objc_claimAutoreleasedReturnValue();

      if (!v6)
        break;

      v3 += 248;
      if (v3 == v4)
        goto LABEL_4;
    }
    if (onceToken_MicroLocation_Default != -1)
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_100);
    v7 = (id)logObject_MicroLocation_Default;
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      +[ULRecordingEventMO entity](ULRecordingEventMO, "entity");
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v8, "name");
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      v14 = 68289283;
      v15 = 0;
      v16 = 2082;
      v17 = "";
      v18 = 2113;
      v19 = v9;
      _os_log_impl(&dword_2419D9000, v7, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"Failed to create entry from MO\", \"MO\":%{private, location:escape_only}@}", (uint8_t *)&v14, 0x1Cu);

    }
    if (onceToken_MicroLocation_Default != -1)
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_100);
    v10 = (id)logObject_MicroLocation_Default;
    if (os_signpost_enabled(v10))
    {
      +[ULRecordingEventMO entity](ULRecordingEventMO, "entity");
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v11, "name");
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      v14 = 68289283;
      v15 = 0;
      v16 = 2082;
      v17 = "";
      v18 = 2113;
      v19 = v12;
      _os_signpost_emit_with_name_impl(&dword_2419D9000, v10, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Failed to create entry from MO", "{\"msg%{public}.0s\":\"Failed to create entry from MO\", \"MO\":%{private, location:escape_only}@}", (uint8_t *)&v14, 0x1Cu);

    }
    objc_msgSend(*(id *)(a1 + 32), "managedObjectContext");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v13, "reset");

  }
}

void sub_241B3A2F8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void ___ZN9ULDBUtils12fetchEntriesI35CLMicroLocationRecordingEventsTable18ULRecordingEventMOEENSt3__16vectorINT_5EntryENS3_9allocatorIS6_EEEEP7ULStoreP7NSArrayIP11NSPredicateEPSC_IP16NSSortDescriptorEm_block_invoke(uint64_t a1)
{
  void *v2;
  objc_class *v3;
  void *v4;
  void *v5;
  uint64_t v6;
  void *v7;
  __int128 v8;
  uint64_t v9;
  void **v10;

  v2 = *(void **)(a1 + 48);
  v3 = (objc_class *)objc_opt_class();
  NSStringFromClass(v3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "fetchManagedObjectsWithEntityName:byAndPredicates:sortDescriptors:andLimit:", v4, *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 64));
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  ULDBUtils::convertManagedObjectsToEntries<CLMicroLocationRecordingEventsTable,ULRecordingEventMO>(v5, (uint64_t *)&v8);
  v6 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
  std::vector<CLMicroLocationRecordingEventsTable::Entry>::__vdeallocate((void **)(v6 + 48));
  *(_OWORD *)(v6 + 48) = v8;
  *(_QWORD *)(v6 + 64) = v9;
  v9 = 0;
  v8 = 0uLL;
  v10 = (void **)&v8;
  std::vector<CLMicroLocationRecordingEventsTable::Entry>::__destroy_vector::operator()[abi:ne180100](&v10);
  objc_msgSend(*(id *)(a1 + 48), "managedObjectContext");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "reset");

}

void sub_241B3A414(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void **std::vector<CLMicroLocationRecordingEventsTable::Entry>::reserve(uint64_t *a1, unint64_t a2)
{
  void **result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7[5];

  v4 = a1[2];
  result = (void **)(a1 + 2);
  if (0xEF7BDEF7BDEF7BDFLL * ((v4 - *a1) >> 3) < a2)
  {
    if (a2 >= 0x108421084210843)
      std::vector<CLMicroLocationProto::ConfidenceReason>::__throw_length_error[abi:ne180100]();
    v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = std::__allocate_at_least[abi:ne180100]<std::allocator<CLMicroLocationRecordingEventsTable::Entry>>((uint64_t)result, a2);
    v7[1] = (char *)v7[0] + v5;
    v7[2] = (char *)v7[0] + v5;
    v7[3] = (char *)v7[0] + 248 * v6;
    std::vector<CLMicroLocationRecordingEventsTable::Entry>::__swap_out_circular_buffer(a1, v7);
    return std::__split_buffer<CLMicroLocationRecordingEventsTable::Entry>::~__split_buffer(v7);
  }
  return result;
}

void sub_241B3A4E8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<CLMicroLocationRecordingEventsTable::Entry>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<CLMicroLocationRecordingEventsTable::Entry>::__push_back_slow_path<CLMicroLocationRecordingEventsTable::Entry>(uint64_t *a1, __int128 *a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  void *v10;
  char *v11;
  char *v12;
  char *v13;
  uint64_t *v14;

  v3 = 0xEF7BDEF7BDEF7BDFLL * ((a1[1] - *a1) >> 3);
  v4 = v3 + 1;
  if (v3 + 1 > 0x108421084210842)
    std::vector<CLMicroLocationProto::ConfidenceReason>::__throw_length_error[abi:ne180100]();
  if (0xDEF7BDEF7BDEF7BELL * ((a1[2] - *a1) >> 3) > v4)
    v4 = 0xDEF7BDEF7BDEF7BELL * ((a1[2] - *a1) >> 3);
  if (0xEF7BDEF7BDEF7BDFLL * ((a1[2] - *a1) >> 3) >= 0x84210842108421)
    v6 = 0x108421084210842;
  else
    v6 = v4;
  v14 = a1 + 2;
  if (v6)
    v7 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CLMicroLocationRecordingEventsTable::Entry>>((uint64_t)(a1 + 2), v6);
  else
    v7 = 0;
  v10 = v7;
  v11 = &v7[248 * v3];
  v13 = &v7[248 * v6];
  std::allocator<CLMicroLocationRecordingEventsTable::Entry>::construct[abi:ne180100]<CLMicroLocationRecordingEventsTable::Entry,CLMicroLocationRecordingEventsTable::Entry>((uint64_t)(a1 + 2), (uint64_t)v11, a2);
  v12 = v11 + 248;
  std::vector<CLMicroLocationRecordingEventsTable::Entry>::__swap_out_circular_buffer(a1, &v10);
  v8 = a1[1];
  std::__split_buffer<CLMicroLocationRecordingEventsTable::Entry>::~__split_buffer(&v10);
  return v8;
}

void sub_241B3A60C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<CLMicroLocationRecordingEventsTable::Entry>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<CLMicroLocationRecordingEventsTable::Entry>::__init_with_size[abi:ne180100]<CLMicroLocationRecordingEventsTable::Entry*,CLMicroLocationRecordingEventsTable::Entry*>(_QWORD *result, __int128 *a2, __int128 *a3, unint64_t a4)
{
  _QWORD *v6;

  if (a4)
  {
    v6 = result;
    std::vector<CLMicroLocationRecordingEventsTable::Entry>::__vallocate[abi:ne180100](result, a4);
    result = (_QWORD *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<CLMicroLocationRecordingEventsTable::Entry>,CLMicroLocationRecordingEventsTable::Entry*,CLMicroLocationRecordingEventsTable::Entry*,CLMicroLocationRecordingEventsTable::Entry*>((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_241B3A684(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  std::vector<CLMicroLocationRecordingEventsTable::Entry>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

char *std::vector<CLMicroLocationRecordingEventsTable::Entry>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0x108421084210843)
    std::vector<CLMicroLocationProto::ConfidenceReason>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CLMicroLocationRecordingEventsTable::Entry>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[248 * v4];
  return result;
}

void sub_241B3BE84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, CLMicroLocationProto::RecordingEvent *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, CLMicroLocationProto::RecordingEvent *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,CLMicroLocationProto::RecordingEvent *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,void *__p,uint64_t a61,int a62,__int16 a63)
{
  char a65;

  if (a65 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,-[ULRecordingEventStore fetchRecordingEventTriggersForLearningMeasurements:atLoiGroupId:]::$_0 &,CLMicroLocationRecordingEventsTable::Entry *>(unint64_t *a1, unint64_t *a2)
{
  unint64_t *v2;
  unint64_t v4;
  _BOOL8 result;
  unint64_t v6;
  unint64_t v7;
  unint64_t *v8;
  unint64_t *v9;
  uint64_t v10;
  int v11;
  uint64_t *v12;
  CLMicroLocationProto::RecordingEvent *v13;
  unint64_t v14;
  unint64_t v15;
  int v16;
  uint64_t *v17;
  const CLMicroLocationProto::RecordingEvent *v18;
  uint64_t v19;
  char *v20;
  void **v21;
  char *v22;
  unint64_t v23;
  unint64_t v24;
  int v25;
  uint64_t v26;
  void **v27;
  int v28;
  unint64_t *v29;
  __int128 v30;
  unint64_t v31;
  __int128 __p;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  __int128 v36;
  char v37;
  uint64_t v38;

  v2 = a2;
  v38 = *MEMORY[0x24BDAC8D0];
  v4 = 0xEF7BDEF7BDEF7BDFLL * (a2 - a1);
  result = 1;
  switch(v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      v6 = bswap64(*(a2 - 31));
      v7 = bswap64(*a1);
      if (v6 != v7 || (v6 = bswap64(*(a2 - 30)), v7 = bswap64(a1[1]), v6 != v7))
      {
        v28 = v6 < v7 ? -1 : 1;
        if (v28 < 0)
        {
          std::swap[abi:ne180100]<CLMicroLocationRecordingEventsTable::Entry>((__int128 *)a1, (__int128 *)(a2 - 31));
          return 1;
        }
      }
      return result;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,CLMicroLocationLearner::semiSupervisedLearnWrapper(CLMicroLocationClientUtils::ClientIdAndClientServiceId const&,std::vector<CLMicroLocationProto::EventType> const&,CLMicroLocationProto::Model_GenerationAlgorithm,NSMutableDictionary *,std::function<BOOL ()(void)>,CLMicroLocationFingerprintPool &,std::string const&,boost::uuids::uuid const&)::$_2 &,CLMicroLocationRecordingEventsTable::Entry *>(a1, a1 + 31, a2 - 31);
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,CLMicroLocationLearner::semiSupervisedLearnWrapper(CLMicroLocationClientUtils::ClientIdAndClientServiceId const&,std::vector<CLMicroLocationProto::EventType> const&,CLMicroLocationProto::Model_GenerationAlgorithm,NSMutableDictionary *,std::function<BOOL ()(void)>,CLMicroLocationFingerprintPool &,std::string const&,boost::uuids::uuid const&)::$_2 &,CLMicroLocationRecordingEventsTable::Entry *>(a1, a1 + 31, a1 + 62, a2 - 31);
      return 1;
    case 5uLL:
      std::__sort5_maybe_branchless[abi:ne180100]<std::_ClassicAlgPolicy,CLMicroLocationLearner::semiSupervisedLearnWrapper(CLMicroLocationClientUtils::ClientIdAndClientServiceId const&,std::vector<CLMicroLocationProto::EventType> const&,CLMicroLocationProto::Model_GenerationAlgorithm,NSMutableDictionary *,std::function<BOOL ()(void)>,CLMicroLocationFingerprintPool &,std::string const&,boost::uuids::uuid const&)::$_2 &,CLMicroLocationRecordingEventsTable::Entry *,0>(a1, a1 + 31, a1 + 62, a1 + 93, a2 - 31);
      return 1;
    default:
      v8 = a1 + 62;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,CLMicroLocationLearner::semiSupervisedLearnWrapper(CLMicroLocationClientUtils::ClientIdAndClientServiceId const&,std::vector<CLMicroLocationProto::EventType> const&,CLMicroLocationProto::Model_GenerationAlgorithm,NSMutableDictionary *,std::function<BOOL ()(void)>,CLMicroLocationFingerprintPool &,std::string const&,boost::uuids::uuid const&)::$_2 &,CLMicroLocationRecordingEventsTable::Entry *>(a1, a1 + 31, a1 + 62);
      v9 = a1 + 93;
      if (a1 + 93 == v2)
        return 1;
      v10 = 0;
      v11 = 0;
      v12 = &v34;
      v13 = (CLMicroLocationProto::RecordingEvent *)&v35;
      v29 = v2;
      break;
  }
  while (1)
  {
    v14 = bswap64(*v9);
    v15 = bswap64(*v8);
    if (v14 != v15 || (v14 = bswap64(v9[1]), v15 = bswap64(v8[1]), v14 != v15))
    {
      v16 = v14 < v15 ? -1 : 1;
      if (v16 < 0)
      {
        v30 = *(_OWORD *)v9;
        v31 = v9[2];
        __p = *(_OWORD *)(v9 + 3);
        v33 = v9[5];
        v9[3] = 0;
        v9[4] = 0;
        v9[5] = 0;
        *(_OWORD *)v12 = *((_OWORD *)v9 + 3);
        v17 = v12;
        *(_OWORD *)((char *)v12 + 12) = *(_OWORD *)((char *)v9 + 60);
        v18 = v13;
        CLMicroLocationProto::RecordingEvent::RecordingEvent(v13, (const CLMicroLocationProto::RecordingEvent *)(v9 + 10));
        v36 = *((_OWORD *)v9 + 14);
        v37 = *((_BYTE *)v9 + 240);
        v19 = v10;
        while (1)
        {
          v20 = (char *)a1 + v19;
          *(_OWORD *)((char *)a1 + v19 + 744) = *(_OWORD *)((char *)a1 + v19 + 496);
          *(unint64_t *)((char *)a1 + v19 + 760) = *(unint64_t *)((char *)a1 + v19 + 512);
          v21 = (void **)((char *)a1 + v19 + 768);
          if (*((char *)a1 + v19 + 791) < 0)
            operator delete(*v21);
          *(unint64_t *)((char *)a1 + v19 + 784) = *((_QWORD *)v20 + 67);
          *(_OWORD *)v21 = *(_OWORD *)(v20 + 520);
          v20[543] = 0;
          v20[520] = 0;
          *(_OWORD *)(v20 + 792) = *((_OWORD *)v20 + 34);
          *(_OWORD *)(v20 + 804) = *(_OWORD *)(v20 + 556);
          CLMicroLocationProto::RecordingEvent::CopyFrom((CLMicroLocationProto::RecordingEvent *)(v20 + 824), (const CLMicroLocationProto::RecordingEvent *)(v20 + 576));
          v22 = (char *)a1 + v19;
          *(_OWORD *)((char *)a1 + v19 + 968) = *(_OWORD *)((char *)a1 + v19 + 720);
          *((_BYTE *)a1 + v19 + 984) = *((_BYTE *)a1 + v19 + 736);
          if (v19 == -496)
            break;
          v23 = bswap64(v30);
          v24 = bswap64(*((_QWORD *)v22 + 31));
          if (v23 == v24
            && (v23 = bswap64(*((unint64_t *)&v30 + 1)), v24 = bswap64(*((_QWORD *)v22 + 32)), v23 == v24))
          {
            v25 = 0;
          }
          else if (v23 < v24)
          {
            v25 = -1;
          }
          else
          {
            v25 = 1;
          }
          v19 -= 248;
          if ((v25 & 0x80000000) == 0)
          {
            v26 = (uint64_t)a1 + v19 + 744;
            goto LABEL_26;
          }
        }
        v26 = (uint64_t)a1;
LABEL_26:
        *(_OWORD *)v26 = v30;
        *(_QWORD *)(v26 + 16) = v31;
        v27 = (void **)(v22 + 520);
        if (*(char *)(v26 + 47) < 0)
          operator delete(*v27);
        *(_OWORD *)v27 = __p;
        *((_QWORD *)v22 + 67) = v33;
        v12 = v17;
        *((_OWORD *)v22 + 34) = *(_OWORD *)v17;
        *(_OWORD *)(v22 + 556) = *(_OWORD *)((char *)v17 + 12);
        v13 = v18;
        CLMicroLocationProto::RecordingEvent::CopyFrom((CLMicroLocationProto::RecordingEvent *)(v22 + 576), v18);
        *((_OWORD *)v22 + 45) = v36;
        v22[736] = v37;
        CLMicroLocationProto::RecordingEvent::~RecordingEvent(v18);
        v2 = v29;
        if (++v11 == 8)
          return v9 + 31 == v29;
      }
    }
    v8 = v9;
    v10 += 248;
    v9 += 31;
    if (v9 == v2)
      return 1;
  }
}

void sub_241B3C360(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  CLMicroLocationRecordingEventsTable::Entry::~Entry(&a13);
  _Unwind_Resume(a1);
}

void CLMicroLocationSingleClusterNullSpaceAlgorithm::localize(CLMicroLocationModel *this@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, CLMicroLocationLocalizationSettings *a4@<X4>, char **a5@<X8>)
{
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  double MinPercentileForReducerFunction;
  double MaxPercentileForReducerFunction;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  CLMicroLocationAlgorithms *v21;
  NSDictionary *v22;
  double v23;
  double v24;
  double v25;
  int v26;
  double v27;
  char *v28;
  char *v29;
  char *v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  char *v38;
  char *v39;
  char *v40;
  __int128 v41;
  char *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  char *v48;
  double *v49;
  uint64_t v50;
  char *v51;
  char *v52;
  char *v53;
  __int128 v54;
  uint64_t v55;
  double *v56;
  uint64_t v57;
  _QWORD *v58[3];
  uint64_t v59;
  uint64_t *v60;
  _QWORD *v61[2];
  double v62[3];
  double *v63;
  uint64_t v64;

  v64 = *MEMORY[0x24BDAC8D0];
  if (CLMicroLocationModel::isValid(this))
  {
    if (*(_BYTE *)(a3 + 32))
    {
      *a5 = 0;
      a5[1] = 0;
      a5[2] = 0;
      *((_DWORD *)a5 + 6) = 3;
      *((_BYTE *)a5 + 80) = 0;
      a5[5] = 0;
      a5[6] = 0;
      a5[4] = 0;
      *((_BYTE *)a5 + 56) = 0;
      v61[0] = 0;
      v61[1] = 0;
      v60 = (uint64_t *)v61;
      v11 = (_QWORD *)*((_QWORD *)this + 41);
      v10 = (_QWORD *)*((_QWORD *)this + 42);
      while (v11 != v10)
      {
        v12 = *(_QWORD *)(a3 + 24);
        if (!v12)
          std::__throw_bad_function_call[abi:ne180100]();
        v62[0] = (*(double (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v12 + 48))(v12, *v11, a2);
        std::__tree<double>::__emplace_multi<double>(&v60, v62);
        v11 += 4;
      }
      MinPercentileForReducerFunction = CLMicroLocationLocalizationSettings::getMinPercentileForReducerFunction(a4);
      MaxPercentileForReducerFunction = CLMicroLocationLocalizationSettings::getMaxPercentileForReducerFunction(a4);
      +[ULDefaultsSingleton shared](ULDefaultsSingleton, "shared");
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v15, "defaultsDictionary");
      v16 = (void *)objc_claimAutoreleasedReturnValue();

      objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "ULNullSpaceDistanceReductionFunction");
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v16, "objectForKey:", v17);
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      if (v18 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
        v19 = objc_msgSend(v18, "unsignedIntValue");
      else
        v19 = objc_msgSend(&unk_2511EE0B0, "unsignedIntValue");
      v20 = v19;

      CLMicroLocationAlgorithms::createReducerFunction<std::multiset<double>,double>(v20, 0, (uint64_t)v62, MinPercentileForReducerFunction, MaxPercentileForReducerFunction);
      CLMicroLocationLocalizationSettings::getKernelFuncSettings((id *)a4);
      v21 = (CLMicroLocationAlgorithms *)objc_claimAutoreleasedReturnValue();
      CLMicroLocationAlgorithms::createKernelFunction(v21, v22);

      std::multiset<double>::multiset[abi:ne180100]((uint64_t)v58, (uint64_t)&v60);
      if (!v63)
        std::__throw_bad_function_call[abi:ne180100]();
      v23 = (*(double (**)(double *, _QWORD **))(*(_QWORD *)v63 + 48))(v63, v58);
      std::__tree<std::__value_type<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,double>,std::__map_value_compare<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,std::__value_type<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,double>,std::less<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes>,true>,std::allocator<std::__value_type<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,double>>>::destroy((uint64_t)v58, v58[1]);
      v24 = (*(double (**)(uint64_t, double))(*(_QWORD *)v59 + 24))(v59, v23);
      if (v24 >= 0.999)
        v25 = 1.0;
      else
        v25 = v24;
      v26 = *(_DWORD *)(a2 + 160);
      v27 = 1.0 - v25;
      v28 = a5[2];
      v29 = a5[1];
      if (v29 >= v28)
      {
        v31 = (v29 - *a5) >> 5;
        v32 = v31 + 1;
        if ((unint64_t)(v31 + 1) >> 59)
          std::vector<CLMicroLocationProto::ConfidenceReason>::__throw_length_error[abi:ne180100]();
        v33 = v28 - *a5;
        if (v33 >> 4 > v32)
          v32 = v33 >> 4;
        if ((unint64_t)v33 >= 0x7FFFFFFFFFFFFFE0)
          v34 = 0x7FFFFFFFFFFFFFFLL;
        else
          v34 = v32;
        v35 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CLMicroLocationResultInternal>>((uint64_t)(a5 + 2), v34);
        v36 = &v35[32 * v31];
        v38 = &v35[32 * v37];
        *(_QWORD *)v36 = 0;
        *((_QWORD *)v36 + 1) = 0;
        *((double *)v36 + 2) = v27;
        *((_DWORD *)v36 + 6) = v26;
        v30 = v36 + 32;
        v40 = *a5;
        v39 = a5[1];
        if (v39 != *a5)
        {
          do
          {
            v41 = *((_OWORD *)v39 - 2);
            *(_OWORD *)(v36 - 20) = *(_OWORD *)(v39 - 20);
            *((_OWORD *)v36 - 2) = v41;
            v36 -= 32;
            v39 -= 32;
          }
          while (v39 != v40);
          v39 = *a5;
        }
        *a5 = v36;
        a5[1] = v30;
        a5[2] = v38;
        if (v39)
          operator delete(v39);
      }
      else
      {
        *(_QWORD *)v29 = 0;
        *((_QWORD *)v29 + 1) = 0;
        *((double *)v29 + 2) = v27;
        v30 = v29 + 32;
        *((_DWORD *)v29 + 6) = v26;
      }
      a5[1] = v30;
      v42 = a5[2];
      if (v30 >= v42)
      {
        v44 = (v30 - *a5) >> 5;
        if ((unint64_t)(v44 + 1) >> 59)
          std::vector<CLMicroLocationProto::ConfidenceReason>::__throw_length_error[abi:ne180100]();
        v45 = v42 - *a5;
        v46 = v45 >> 4;
        if (v45 >> 4 <= (unint64_t)(v44 + 1))
          v46 = v44 + 1;
        if ((unint64_t)v45 >= 0x7FFFFFFFFFFFFFE0)
          v47 = 0x7FFFFFFFFFFFFFFLL;
        else
          v47 = v46;
        v48 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CLMicroLocationResultInternal>>((uint64_t)(a5 + 2), v47);
        v49 = (double *)&v48[32 * v44];
        v51 = &v48[32 * v50];
        *(_OWORD *)v49 = xmmword_241BB97F0;
        v49[2] = v25;
        *((_DWORD *)v49 + 6) = v26;
        v43 = (char *)(v49 + 4);
        v53 = *a5;
        v52 = a5[1];
        if (v52 != *a5)
        {
          do
          {
            v54 = *((_OWORD *)v52 - 2);
            *(_OWORD *)((char *)v49 - 20) = *(_OWORD *)(v52 - 20);
            *((_OWORD *)v49 - 2) = v54;
            v49 -= 4;
            v52 -= 32;
          }
          while (v52 != v53);
          v52 = *a5;
        }
        *a5 = (char *)v49;
        a5[1] = v43;
        a5[2] = v51;
        if (v52)
          operator delete(v52);
      }
      else
      {
        *(_OWORD *)v30 = xmmword_241BB97F0;
        *((double *)v30 + 2) = v25;
        *((_DWORD *)v30 + 6) = v26;
        v43 = v30 + 32;
      }
      a5[1] = v43;
      v55 = v59;
      v59 = 0;
      if (v55)
        (*(void (**)(uint64_t))(*(_QWORD *)v55 + 8))(v55);
      v56 = v63;
      if (v63 == v62)
      {
        v57 = 4;
        v56 = v62;
      }
      else
      {
        if (!v63)
        {
LABEL_48:
          std::__tree<std::__value_type<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,double>,std::__map_value_compare<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,std::__value_type<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,double>,std::less<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes>,true>,std::allocator<std::__value_type<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,double>>>::destroy((uint64_t)&v60, v61[0]);
          return;
        }
        v57 = 5;
      }
      (*(void (**)(void))(*(_QWORD *)v56 + 8 * v57))();
      goto LABEL_48;
    }
    CLMicroLocationSingleClusterNullSpaceAlgorithm::localize();
  }
  else
  {
    CLMicroLocationSingleClusterNullSpaceAlgorithm::localize();
  }
  __break(1u);
}

void sub_241B3C8FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, _QWORD *a14)
{
  CLMicroLocationAlgorithms::LocalizerResults *v14;
  void *v15;
  void *v16;
  void *v17;

  std::__tree<std::__value_type<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,double>,std::__map_value_compare<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,std::__value_type<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,double>,std::less<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes>,true>,std::allocator<std::__value_type<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,double>>>::destroy((uint64_t)&a13, a14);
  CLMicroLocationAlgorithms::LocalizerResults::~LocalizerResults(v14);
  _Unwind_Resume(a1);
}

void CLMicroLocationSingleClusterNullSpaceAlgorithm::~CLMicroLocationSingleClusterNullSpaceAlgorithm(CLMicroLocationSingleClusterNullSpaceAlgorithm *this)
{
  JUMPOUT(0x2426A04D4);
}

void ___ZL45_CLLogObjectForCategory_MicroLocation_Defaultv_block_invoke_80()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.MicroLocation", "MicroLocation");
  v1 = (void *)logObject_MicroLocation_Default;
  logObject_MicroLocation_Default = (uint64_t)v0;

}

_QWORD *CLMicroLocationTriggerCounters::CLMicroLocationTriggerCounters(_QWORD *a1, uint64_t *a2)
{
  _DWORD *v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v4 = operator new(0xCuLL);
  a1[1] = v4 + 3;
  a1[2] = v4 + 3;
  *(_QWORD *)v4 = 0x100000000;
  v4[2] = 4;
  *a1 = v4;
  a1[3] = 0;
  a1[4] = 0;
  a1[5] = 0;
  std::vector<CLMicroLocationProto::TriggerEvent>::__init_with_size[abi:ne180100]<CLMicroLocationProto::TriggerEvent*,CLMicroLocationProto::TriggerEvent*>(a1 + 3, *a2, a2[1], 0x2E8BA2E8BA2E8BA3 * ((a2[1] - *a2) >> 3));
  *((_DWORD *)a1 + 12) = 0;
  boost::uuids::detail::random_provider_base::random_provider_base((boost::uuids::detail::random_provider_base *)(a1 + 6));
  return a1;
}

void sub_241B3CB20(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  void *v4;
  va_list va;

  va_start(va, a2);
  std::vector<CLMicroLocationProto::TriggerEvent>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  v4 = *(void **)v2;
  if (*(_QWORD *)v2)
  {
    *(_QWORD *)(v2 + 8) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(a1);
}

BOOL CLMicroLocationTriggerCounters::isLocalization(CLMicroLocationTriggerCounters *this, const CLMicroLocationProto::TriggerEvent *a2)
{
  int v2;
  _BOOL8 result;
  _DWORD *v4;
  _DWORD *v5;

  v2 = *((_DWORD *)a2 + 21);
  if ((v2 & 0x200) == 0)
    return 0;
  v5 = *(_DWORD **)this;
  v4 = (_DWORD *)*((_QWORD *)this + 1);
  if (*(_DWORD **)this != v4)
  {
    while (*v5 != *((_DWORD *)a2 + 15))
    {
      if (++v5 == v4)
      {
        v5 = (_DWORD *)*((_QWORD *)this + 1);
        break;
      }
    }
  }
  result = 0;
  if ((v2 & 0x100) != 0 && v5 != v4)
    return *((_DWORD *)a2 + 14) == 0;
  return result;
}

uint64_t CLMicroLocationTriggerCounters::getRecordingsCount(CLMicroLocationTriggerCounters *this)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  _QWORD v5[3];
  _QWORD *v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v5[0] = &off_2511DA838;
  v5[1] = this;
  v6 = v5;
  v1 = CLMicroLocationTriggerCounters::countUniqueRequestsIf((uint64_t)this, (uint64_t)v5);
  v2 = v6;
  if (v6 == v5)
  {
    v3 = 4;
    v2 = v5;
    goto LABEL_5;
  }
  if (v6)
  {
    v3 = 5;
LABEL_5:
    (*(void (**)(void))(*v2 + 8 * v3))();
  }
  return v1;
}

void sub_241B3CC4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t CLMicroLocationTriggerCounters::countUniqueRequestsIf(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  unsigned __int8 *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  char v16;
  uint64_t *v17;
  _QWORD *v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  v18 = 0;
  v19 = 0;
  v17 = (uint64_t *)&v18;
  v2 = *(_QWORD *)(a1 + 24);
  v3 = *(_QWORD *)(a1 + 32);
  if (v2 == v3)
  {
    v13 = 0;
    v14 = 0;
  }
  else
  {
    v5 = a1 + 48;
    do
    {
      v6 = *(_QWORD *)(a2 + 24);
      if (!v6)
        std::__throw_bad_function_call[abi:ne180100]();
      if ((*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 48))(v6, v2))
      {
        if ((*(_BYTE *)(v2 + 85) & 8) != 0)
        {
          v9 = *(_QWORD *)(v2 + 64);
          v10 = *(char *)(v9 + 23);
          if (v10 >= 0)
            v11 = *(unsigned __int8 **)(v2 + 64);
          else
            v11 = *(unsigned __int8 **)v9;
          if (v10 >= 0)
            v12 = *(unsigned __int8 *)(v9 + 23);
          else
            v12 = *(_QWORD *)(v9 + 8);
          v7 = boost::uuids::string_generator::operator()<std::__wrap_iter<char const*>>((boost::uuids::string_generator *)&v16, v11, &v11[v12]);
        }
        else
        {
          v7 = boost::uuids::random_generator_pure::operator()(v5);
        }
        *(_QWORD *)&v20 = v7;
        *((_QWORD *)&v20 + 1) = v8;
        std::__tree<boost::uuids::uuid>::__emplace_unique_key_args<boost::uuids::uuid,boost::uuids::uuid>(&v17, (unint64_t *)&v20, &v20);
      }
      v2 += 88;
    }
    while (v2 != v3);
    v13 = v18;
    v14 = v19;
  }
  std::__tree<std::__value_type<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,double>,std::__map_value_compare<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,std::__value_type<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,double>,std::less<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes>,true>,std::allocator<std::__value_type<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,double>>>::destroy((uint64_t)&v17, v13);
  return v14;
}

void sub_241B3CD98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, _QWORD *a12)
{
  std::__tree<std::__value_type<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,double>,std::__map_value_compare<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,std::__value_type<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,double>,std::less<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes>,true>,std::allocator<std::__value_type<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,double>>>::destroy((uint64_t)&a11, a12);
  _Unwind_Resume(a1);
}

uint64_t CLMicroLocationTriggerCounters::getRecordingsCountWithType(uint64_t a1, unsigned int a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  v6[0] = &off_2511DA8C8;
  v6[1] = a1;
  v6[2] = a2;
  v7 = v6;
  v2 = CLMicroLocationTriggerCounters::countUniqueRequestsIf(a1, (uint64_t)v6);
  v3 = v7;
  if (v7 == v6)
  {
    v4 = 4;
    v3 = v6;
    goto LABEL_5;
  }
  if (v7)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return v2;
}

void sub_241B3CE58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t CLMicroLocationTriggerCounters::getLocalizationCount(CLMicroLocationTriggerCounters *this)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  _QWORD v5[3];
  _QWORD *v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v5[0] = &off_2511DA948;
  v5[1] = this;
  v6 = v5;
  v1 = CLMicroLocationTriggerCounters::countUniqueRequestsIf((uint64_t)this, (uint64_t)v5);
  v2 = v6;
  if (v6 == v5)
  {
    v3 = 4;
    v2 = v5;
    goto LABEL_5;
  }
  if (v6)
  {
    v3 = 5;
LABEL_5:
    (*(void (**)(void))(*v2 + 8 * v3))();
  }
  return v1;
}

void sub_241B3CF2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t CLMicroLocationTriggerCounters::getLegacyLocalizationsCount(CLMicroLocationTriggerCounters *this)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  _QWORD v5[3];
  _QWORD *v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v5[0] = &off_2511DA9C8;
  v5[1] = this;
  v6 = v5;
  v1 = CLMicroLocationTriggerCounters::countUniqueRequestsIf((uint64_t)this, (uint64_t)v5);
  v2 = v6;
  if (v6 == v5)
  {
    v3 = 4;
    v2 = v5;
    goto LABEL_5;
  }
  if (v6)
  {
    v3 = 5;
LABEL_5:
    (*(void (**)(void))(*v2 + 8 * v3))();
  }
  return v1;
}

void sub_241B3D000(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t CLMicroLocationTriggerCounters::getCachedLegacyLocalizationsCount(CLMicroLocationTriggerCounters *this)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  _QWORD v5[3];
  _QWORD *v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v5[0] = &off_2511DAA48;
  v5[1] = this;
  v6 = v5;
  v1 = CLMicroLocationTriggerCounters::countUniqueRequestsIf((uint64_t)this, (uint64_t)v5);
  v2 = v6;
  if (v6 == v5)
  {
    v3 = 4;
    v2 = v5;
    goto LABEL_5;
  }
  if (v6)
  {
    v3 = 5;
LABEL_5:
    (*(void (**)(void))(*v2 + 8 * v3))();
  }
  return v1;
}

void sub_241B3D0D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t CLMicroLocationTriggerCounters::getNonCachedLegacyLocalizationsCount(CLMicroLocationTriggerCounters *this)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  _QWORD v5[3];
  _QWORD *v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v5[0] = &off_2511DAAC8;
  v5[1] = this;
  v6 = v5;
  v1 = CLMicroLocationTriggerCounters::countUniqueRequestsIf((uint64_t)this, (uint64_t)v5);
  v2 = v6;
  if (v6 == v5)
  {
    v3 = 4;
    v2 = v5;
    goto LABEL_5;
  }
  if (v6)
  {
    v3 = 5;
LABEL_5:
    (*(void (**)(void))(*v2 + 8 * v3))();
  }
  return v1;
}

void sub_241B3D1A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t CLMicroLocationTriggerCounters::getNewLocalizationsCount(CLMicroLocationTriggerCounters *this)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  _QWORD v5[3];
  _QWORD *v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v5[0] = &off_2511DAB48;
  v5[1] = this;
  v6 = v5;
  v1 = CLMicroLocationTriggerCounters::countUniqueRequestsIf((uint64_t)this, (uint64_t)v5);
  v2 = v6;
  if (v6 == v5)
  {
    v3 = 4;
    v2 = v5;
    goto LABEL_5;
  }
  if (v6)
  {
    v3 = 5;
LABEL_5:
    (*(void (**)(void))(*v2 + 8 * v3))();
  }
  return v1;
}

void sub_241B3D27C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t CLMicroLocationTriggerCounters::getMotionLocalizationsCount(CLMicroLocationTriggerCounters *this)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  _QWORD v5[3];
  _QWORD *v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v5[0] = &off_2511DABC8;
  v5[1] = this;
  v6 = v5;
  v1 = CLMicroLocationTriggerCounters::countUniqueRequestsIf((uint64_t)this, (uint64_t)v5);
  v2 = v6;
  if (v6 == v5)
  {
    v3 = 4;
    v2 = v5;
    goto LABEL_5;
  }
  if (v6)
  {
    v3 = 5;
LABEL_5:
    (*(void (**)(void))(*v2 + 8 * v3))();
  }
  return v1;
}

void sub_241B3D350(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t CLMicroLocationTriggerCounters::getLocalizationsCausedBy(uint64_t a1, unsigned int a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  v6[0] = &off_2511DAC48;
  v6[1] = a1;
  v6[2] = a2;
  v7 = v6;
  v2 = CLMicroLocationTriggerCounters::countUniqueRequestsIf(a1, (uint64_t)v6);
  v3 = v7;
  if (v7 == v6)
  {
    v4 = 4;
    v3 = v6;
    goto LABEL_5;
  }
  if (v7)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return v2;
}

void sub_241B3D428(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t CLMicroLocationTriggerCounters::getLocalizationsCausedByWithType(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD v7[3];
  _QWORD *v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v7[0] = &off_2511DACC8;
  v7[1] = a1;
  v7[2] = a2 | (unint64_t)(a3 << 32);
  v8 = v7;
  v3 = CLMicroLocationTriggerCounters::countUniqueRequestsIf(a1, (uint64_t)v7);
  v4 = v8;
  if (v8 == v7)
  {
    v5 = 4;
    v4 = v7;
    goto LABEL_5;
  }
  if (v8)
  {
    v5 = 5;
LABEL_5:
    (*(void (**)(void))(*v4 + 8 * v5))();
  }
  return v3;
}

void sub_241B3D504(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t CLMicroLocationTriggerCounters::getLocalizationsCausedByWithTypeMotionState(uint64_t a1, int a2, int a3, int a4)
{
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _BYTE v13[24];
  _BYTE *v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v8 = operator new(0x20uLL);
  *v8 = &off_2511DAD48;
  v8[1] = a1;
  *((_DWORD *)v8 + 4) = a2;
  *((_DWORD *)v8 + 5) = a3;
  *((_DWORD *)v8 + 6) = a4;
  v14 = v8;
  v9 = CLMicroLocationTriggerCounters::countUniqueRequestsIf(a1, (uint64_t)v13);
  v10 = v14;
  if (v14 == v13)
  {
    v11 = 4;
    v10 = v13;
    goto LABEL_5;
  }
  if (v14)
  {
    v11 = 5;
LABEL_5:
    (*(void (**)(void))(*v10 + 8 * v11))();
  }
  return v9;
}

void sub_241B3D604(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

_QWORD *std::vector<CLMicroLocationProto::TriggerEvent>::__init_with_size[abi:ne180100]<CLMicroLocationProto::TriggerEvent*,CLMicroLocationProto::TriggerEvent*>(_QWORD *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;

  if (a4)
  {
    v6 = result;
    std::vector<CLMiLoServiceTable::Entry>::__vallocate[abi:ne180100](result, a4);
    result = (_QWORD *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<CLMicroLocationProto::TriggerEvent>,CLMicroLocationProto::TriggerEvent*,CLMicroLocationProto::TriggerEvent*,CLMicroLocationProto::TriggerEvent*>((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_241B3D6A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  std::vector<CLMicroLocationProto::TriggerEvent>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<CLMicroLocationProto::TriggerEvent>,CLMicroLocationProto::TriggerEvent*,CLMicroLocationProto::TriggerEvent*,CLMicroLocationProto::TriggerEvent*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;

  if (a2 != a3)
  {
    v7 = 0;
    do
    {
      CLMicroLocationProto::TriggerEvent::TriggerEvent((CLMicroLocationProto::TriggerEvent *)(a4 + v7), (const CLMicroLocationProto::TriggerEvent *)(a2 + v7));
      v7 += 88;
    }
    while (a2 + v7 != a3);
    a4 += v7;
  }
  return a4;
}

void sub_241B3D71C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  if (v2)
  {
    v4 = v1 - 88;
    do
    {
      (**(void (***)(uint64_t))(v4 + v2))(v4 + v2);
      v2 -= 88;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__func<CLMicroLocationTriggerCounters::getRecordingsCount(void)::$_0,std::allocator<CLMicroLocationTriggerCounters::getRecordingsCount(void)::$_0>,BOOL ()(CLMicroLocationProto::TriggerEvent const&)>::~__func()
{
  JUMPOUT(0x2426A04D4);
}

_QWORD *std::__function::__func<CLMicroLocationTriggerCounters::getRecordingsCount(void)::$_0,std::allocator<CLMicroLocationTriggerCounters::getRecordingsCount(void)::$_0>,BOOL ()(CLMicroLocationProto::TriggerEvent const&)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_2511DA838;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<CLMicroLocationTriggerCounters::getRecordingsCount(void)::$_0,std::allocator<CLMicroLocationTriggerCounters::getRecordingsCount(void)::$_0>,BOOL ()(CLMicroLocationProto::TriggerEvent const&)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_2511DA838;
  a2[1] = v2;
  return result;
}

BOOL std::__function::__func<CLMicroLocationTriggerCounters::getRecordingsCount(void)::$_0,std::allocator<CLMicroLocationTriggerCounters::getRecordingsCount(void)::$_0>,BOOL ()(CLMicroLocationProto::TriggerEvent const&)>::operator()(uint64_t a1, _DWORD *a2)
{
  int v2;
  _BOOL8 result;
  uint64_t v4;
  _DWORD *v5;
  _DWORD *v6;

  v2 = a2[21];
  if ((v2 & 0x200) == 0)
    return 0;
  v4 = *(_QWORD *)(a1 + 8);
  v6 = *(_DWORD **)v4;
  v5 = *(_DWORD **)(v4 + 8);
  if (v6 != v5)
  {
    while (*v6 != a2[15])
    {
      if (++v6 == v5)
      {
        v6 = v5;
        break;
      }
    }
  }
  result = 0;
  if ((v2 & 0x100) != 0 && v6 != v5)
    return a2[14] == 1;
  return result;
}

uint64_t std::__function::__func<CLMicroLocationTriggerCounters::getRecordingsCount(void)::$_0,std::allocator<CLMicroLocationTriggerCounters::getRecordingsCount(void)::$_0>,BOOL ()(CLMicroLocationProto::TriggerEvent const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<CLMicroLocationTriggerCounters::getRecordingsCount(void)::$_0,std::allocator<CLMicroLocationTriggerCounters::getRecordingsCount(void)::$_0>,BOOL ()(CLMicroLocationProto::TriggerEvent const&)>::target_type()
{
}

void std::__function::__func<CLMicroLocationTriggerCounters::getRecordingsCountWithType(CLMicroLocationTriggerManager::MiLoTriggerType)::$_0,std::allocator<CLMicroLocationTriggerCounters::getRecordingsCountWithType(CLMicroLocationTriggerManager::MiLoTriggerType)::$_0>,BOOL ()(CLMicroLocationProto::TriggerEvent const&)>::~__func()
{
  JUMPOUT(0x2426A04D4);
}

__n128 std::__function::__func<CLMicroLocationTriggerCounters::getRecordingsCountWithType(CLMicroLocationTriggerManager::MiLoTriggerType)::$_0,std::allocator<CLMicroLocationTriggerCounters::getRecordingsCountWithType(CLMicroLocationTriggerManager::MiLoTriggerType)::$_0>,BOOL ()(CLMicroLocationProto::TriggerEvent const&)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_2511DA8C8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<CLMicroLocationTriggerCounters::getRecordingsCountWithType(CLMicroLocationTriggerManager::MiLoTriggerType)::$_0,std::allocator<CLMicroLocationTriggerCounters::getRecordingsCountWithType(CLMicroLocationTriggerManager::MiLoTriggerType)::$_0>,BOOL ()(CLMicroLocationProto::TriggerEvent const&)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_2511DA8C8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

BOOL std::__function::__func<CLMicroLocationTriggerCounters::getRecordingsCountWithType(CLMicroLocationTriggerManager::MiLoTriggerType)::$_0,std::allocator<CLMicroLocationTriggerCounters::getRecordingsCountWithType(CLMicroLocationTriggerManager::MiLoTriggerType)::$_0>,BOOL ()(CLMicroLocationProto::TriggerEvent const&)>::operator()(uint64_t a1, uint64_t a2)
{
  int v2;
  _BOOL8 result;
  uint64_t v5;
  _DWORD *v6;
  _DWORD *v7;

  v2 = *(_DWORD *)(a2 + 84);
  if ((v2 & 0x200) == 0)
    return 0;
  v5 = *(_QWORD *)(a1 + 8);
  v7 = *(_DWORD **)v5;
  v6 = *(_DWORD **)(v5 + 8);
  if (v7 != v6)
  {
    while (*v7 != *(_DWORD *)(a2 + 60))
    {
      if (++v7 == v6)
      {
        v7 = v6;
        break;
      }
    }
  }
  result = 0;
  if ((v2 & 0x100) != 0 && v7 != v6 && *(_DWORD *)(a2 + 56) == 1)
    return CLMicroLocationTriggerManager::enumerateClientIdToTriggerType(*(_QWORD *)(a2 + 32)) == *(_DWORD *)(a1 + 16);
  return result;
}

uint64_t std::__function::__func<CLMicroLocationTriggerCounters::getRecordingsCountWithType(CLMicroLocationTriggerManager::MiLoTriggerType)::$_0,std::allocator<CLMicroLocationTriggerCounters::getRecordingsCountWithType(CLMicroLocationTriggerManager::MiLoTriggerType)::$_0>,BOOL ()(CLMicroLocationProto::TriggerEvent const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<CLMicroLocationTriggerCounters::getRecordingsCountWithType(CLMicroLocationTriggerManager::MiLoTriggerType)::$_0,std::allocator<CLMicroLocationTriggerCounters::getRecordingsCountWithType(CLMicroLocationTriggerManager::MiLoTriggerType)::$_0>,BOOL ()(CLMicroLocationProto::TriggerEvent const&)>::target_type()
{
}

void std::__function::__func<CLMicroLocationTriggerCounters::getLocalizationCount(void)::$_0,std::allocator<CLMicroLocationTriggerCounters::getLocalizationCount(void)::$_0>,BOOL ()(CLMicroLocationProto::TriggerEvent const&)>::~__func()
{
  JUMPOUT(0x2426A04D4);
}

_QWORD *std::__function::__func<CLMicroLocationTriggerCounters::getLocalizationCount(void)::$_0,std::allocator<CLMicroLocationTriggerCounters::getLocalizationCount(void)::$_0>,BOOL ()(CLMicroLocationProto::TriggerEvent const&)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_2511DA948;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<CLMicroLocationTriggerCounters::getLocalizationCount(void)::$_0,std::allocator<CLMicroLocationTriggerCounters::getLocalizationCount(void)::$_0>,BOOL ()(CLMicroLocationProto::TriggerEvent const&)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_2511DA948;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<CLMicroLocationTriggerCounters::getLocalizationCount(void)::$_0,std::allocator<CLMicroLocationTriggerCounters::getLocalizationCount(void)::$_0>,BOOL ()(CLMicroLocationProto::TriggerEvent const&)>::operator()(uint64_t a1, const CLMicroLocationProto::TriggerEvent *a2)
{
  uint64_t result;

  LODWORD(result) = CLMicroLocationTriggerCounters::isLocalization(*(CLMicroLocationTriggerCounters **)(a1 + 8), a2);
  if (*((_DWORD *)a2 + 15))
    return 0;
  else
    return result;
}

uint64_t std::__function::__func<CLMicroLocationTriggerCounters::getLocalizationCount(void)::$_0,std::allocator<CLMicroLocationTriggerCounters::getLocalizationCount(void)::$_0>,BOOL ()(CLMicroLocationProto::TriggerEvent const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<CLMicroLocationTriggerCounters::getLocalizationCount(void)::$_0,std::allocator<CLMicroLocationTriggerCounters::getLocalizationCount(void)::$_0>,BOOL ()(CLMicroLocationProto::TriggerEvent const&)>::target_type()
{
}

void std::__function::__func<CLMicroLocationTriggerCounters::getLegacyLocalizationsCount(void)::$_0,std::allocator<CLMicroLocationTriggerCounters::getLegacyLocalizationsCount(void)::$_0>,BOOL ()(CLMicroLocationProto::TriggerEvent const&)>::~__func()
{
  JUMPOUT(0x2426A04D4);
}

_QWORD *std::__function::__func<CLMicroLocationTriggerCounters::getLegacyLocalizationsCount(void)::$_0,std::allocator<CLMicroLocationTriggerCounters::getLegacyLocalizationsCount(void)::$_0>,BOOL ()(CLMicroLocationProto::TriggerEvent const&)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_2511DA9C8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<CLMicroLocationTriggerCounters::getLegacyLocalizationsCount(void)::$_0,std::allocator<CLMicroLocationTriggerCounters::getLegacyLocalizationsCount(void)::$_0>,BOOL ()(CLMicroLocationProto::TriggerEvent const&)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_2511DA9C8;
  a2[1] = v2;
  return result;
}

BOOL std::__function::__func<CLMicroLocationTriggerCounters::getLegacyLocalizationsCount(void)::$_0,std::allocator<CLMicroLocationTriggerCounters::getLegacyLocalizationsCount(void)::$_0>,BOOL ()(CLMicroLocationProto::TriggerEvent const&)>::operator()(uint64_t a1, uint64_t a2)
{
  _BOOL8 result;

  result = CLMicroLocationTriggerCounters::isLocalization(*(CLMicroLocationTriggerCounters **)(a1 + 8), (const CLMicroLocationProto::TriggerEvent *)a2);
  if (result)
    return (*(_BYTE *)(a2 + 84) & 0x10) != 0
        && CLMicroLocationTriggerManager::enumerateClientIdToTriggerType(*(_QWORD *)(a2 + 32)) == 0;
  return result;
}

uint64_t std::__function::__func<CLMicroLocationTriggerCounters::getLegacyLocalizationsCount(void)::$_0,std::allocator<CLMicroLocationTriggerCounters::getLegacyLocalizationsCount(void)::$_0>,BOOL ()(CLMicroLocationProto::TriggerEvent const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<CLMicroLocationTriggerCounters::getLegacyLocalizationsCount(void)::$_0,std::allocator<CLMicroLocationTriggerCounters::getLegacyLocalizationsCount(void)::$_0>,BOOL ()(CLMicroLocationProto::TriggerEvent const&)>::target_type()
{
}

void std::__function::__func<CLMicroLocationTriggerCounters::getCachedLegacyLocalizationsCount(void)::$_0,std::allocator<CLMicroLocationTriggerCounters::getCachedLegacyLocalizationsCount(void)::$_0>,BOOL ()(CLMicroLocationProto::TriggerEvent const&)>::~__func()
{
  JUMPOUT(0x2426A04D4);
}

_QWORD *std::__function::__func<CLMicroLocationTriggerCounters::getCachedLegacyLocalizationsCount(void)::$_0,std::allocator<CLMicroLocationTriggerCounters::getCachedLegacyLocalizationsCount(void)::$_0>,BOOL ()(CLMicroLocationProto::TriggerEvent const&)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_2511DAA48;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<CLMicroLocationTriggerCounters::getCachedLegacyLocalizationsCount(void)::$_0,std::allocator<CLMicroLocationTriggerCounters::getCachedLegacyLocalizationsCount(void)::$_0>,BOOL ()(CLMicroLocationProto::TriggerEvent const&)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_2511DAA48;
  a2[1] = v2;
  return result;
}

BOOL std::__function::__func<CLMicroLocationTriggerCounters::getCachedLegacyLocalizationsCount(void)::$_0,std::allocator<CLMicroLocationTriggerCounters::getCachedLegacyLocalizationsCount(void)::$_0>,BOOL ()(CLMicroLocationProto::TriggerEvent const&)>::operator()(uint64_t a1, uint64_t a2)
{
  _BOOL8 result;

  result = CLMicroLocationTriggerCounters::isLocalization(*(CLMicroLocationTriggerCounters **)(a1 + 8), (const CLMicroLocationProto::TriggerEvent *)a2);
  if (result)
    return (*(_BYTE *)(a2 + 84) & 0x10) != 0
        && !CLMicroLocationTriggerManager::enumerateClientIdToTriggerType(*(_QWORD *)(a2 + 32))
        && *(_DWORD *)(a2 + 60) == 4;
  return result;
}

uint64_t std::__function::__func<CLMicroLocationTriggerCounters::getCachedLegacyLocalizationsCount(void)::$_0,std::allocator<CLMicroLocationTriggerCounters::getCachedLegacyLocalizationsCount(void)::$_0>,BOOL ()(CLMicroLocationProto::TriggerEvent const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<CLMicroLocationTriggerCounters::getCachedLegacyLocalizationsCount(void)::$_0,std::allocator<CLMicroLocationTriggerCounters::getCachedLegacyLocalizationsCount(void)::$_0>,BOOL ()(CLMicroLocationProto::TriggerEvent const&)>::target_type()
{
}

void std::__function::__func<CLMicroLocationTriggerCounters::getNonCachedLegacyLocalizationsCount(void)::$_0,std::allocator<CLMicroLocationTriggerCounters::getNonCachedLegacyLocalizationsCount(void)::$_0>,BOOL ()(CLMicroLocationProto::TriggerEvent const&)>::~__func()
{
  JUMPOUT(0x2426A04D4);
}

_QWORD *std::__function::__func<CLMicroLocationTriggerCounters::getNonCachedLegacyLocalizationsCount(void)::$_0,std::allocator<CLMicroLocationTriggerCounters::getNonCachedLegacyLocalizationsCount(void)::$_0>,BOOL ()(CLMicroLocationProto::TriggerEvent const&)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_2511DAAC8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<CLMicroLocationTriggerCounters::getNonCachedLegacyLocalizationsCount(void)::$_0,std::allocator<CLMicroLocationTriggerCounters::getNonCachedLegacyLocalizationsCount(void)::$_0>,BOOL ()(CLMicroLocationProto::TriggerEvent const&)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_2511DAAC8;
  a2[1] = v2;
  return result;
}

BOOL std::__function::__func<CLMicroLocationTriggerCounters::getNonCachedLegacyLocalizationsCount(void)::$_0,std::allocator<CLMicroLocationTriggerCounters::getNonCachedLegacyLocalizationsCount(void)::$_0>,BOOL ()(CLMicroLocationProto::TriggerEvent const&)>::operator()(uint64_t a1, uint64_t a2)
{
  _BOOL8 result;

  result = CLMicroLocationTriggerCounters::isLocalization(*(CLMicroLocationTriggerCounters **)(a1 + 8), (const CLMicroLocationProto::TriggerEvent *)a2);
  if (result)
    return (*(_BYTE *)(a2 + 84) & 0x10) != 0
        && !CLMicroLocationTriggerManager::enumerateClientIdToTriggerType(*(_QWORD *)(a2 + 32))
        && *(_DWORD *)(a2 + 60) != 4;
  return result;
}

uint64_t std::__function::__func<CLMicroLocationTriggerCounters::getNonCachedLegacyLocalizationsCount(void)::$_0,std::allocator<CLMicroLocationTriggerCounters::getNonCachedLegacyLocalizationsCount(void)::$_0>,BOOL ()(CLMicroLocationProto::TriggerEvent const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<CLMicroLocationTriggerCounters::getNonCachedLegacyLocalizationsCount(void)::$_0,std::allocator<CLMicroLocationTriggerCounters::getNonCachedLegacyLocalizationsCount(void)::$_0>,BOOL ()(CLMicroLocationProto::TriggerEvent const&)>::target_type()
{
}

void std::__function::__func<CLMicroLocationTriggerCounters::getNewLocalizationsCount(void)::$_0,std::allocator<CLMicroLocationTriggerCounters::getNewLocalizationsCount(void)::$_0>,BOOL ()(CLMicroLocationProto::TriggerEvent const&)>::~__func()
{
  JUMPOUT(0x2426A04D4);
}

_QWORD *std::__function::__func<CLMicroLocationTriggerCounters::getNewLocalizationsCount(void)::$_0,std::allocator<CLMicroLocationTriggerCounters::getNewLocalizationsCount(void)::$_0>,BOOL ()(CLMicroLocationProto::TriggerEvent const&)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_2511DAB48;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<CLMicroLocationTriggerCounters::getNewLocalizationsCount(void)::$_0,std::allocator<CLMicroLocationTriggerCounters::getNewLocalizationsCount(void)::$_0>,BOOL ()(CLMicroLocationProto::TriggerEvent const&)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_2511DAB48;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<CLMicroLocationTriggerCounters::getNewLocalizationsCount(void)::$_0,std::allocator<CLMicroLocationTriggerCounters::getNewLocalizationsCount(void)::$_0>,BOOL ()(CLMicroLocationProto::TriggerEvent const&)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = CLMicroLocationTriggerCounters::isLocalization(*(CLMicroLocationTriggerCounters **)(a1 + 8), (const CLMicroLocationProto::TriggerEvent *)a2);
  if ((_DWORD)result)
  {
    if ((*(_BYTE *)(a2 + 84) & 0x10) != 0)
    {
      result = CLMicroLocationTriggerManager::enumerateClientIdToTriggerType(*(_QWORD *)(a2 + 32));
      if ((_DWORD)result)
        return *(_DWORD *)(a2 + 60) == 0;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t std::__function::__func<CLMicroLocationTriggerCounters::getNewLocalizationsCount(void)::$_0,std::allocator<CLMicroLocationTriggerCounters::getNewLocalizationsCount(void)::$_0>,BOOL ()(CLMicroLocationProto::TriggerEvent const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<CLMicroLocationTriggerCounters::getNewLocalizationsCount(void)::$_0,std::allocator<CLMicroLocationTriggerCounters::getNewLocalizationsCount(void)::$_0>,BOOL ()(CLMicroLocationProto::TriggerEvent const&)>::target_type()
{
}

void std::__function::__func<CLMicroLocationTriggerCounters::getMotionLocalizationsCount(void)::$_0,std::allocator<CLMicroLocationTriggerCounters::getMotionLocalizationsCount(void)::$_0>,BOOL ()(CLMicroLocationProto::TriggerEvent const&)>::~__func()
{
  JUMPOUT(0x2426A04D4);
}

_QWORD *std::__function::__func<CLMicroLocationTriggerCounters::getMotionLocalizationsCount(void)::$_0,std::allocator<CLMicroLocationTriggerCounters::getMotionLocalizationsCount(void)::$_0>,BOOL ()(CLMicroLocationProto::TriggerEvent const&)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_2511DABC8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<CLMicroLocationTriggerCounters::getMotionLocalizationsCount(void)::$_0,std::allocator<CLMicroLocationTriggerCounters::getMotionLocalizationsCount(void)::$_0>,BOOL ()(CLMicroLocationProto::TriggerEvent const&)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_2511DABC8;
  a2[1] = v2;
  return result;
}

BOOL std::__function::__func<CLMicroLocationTriggerCounters::getMotionLocalizationsCount(void)::$_0,std::allocator<CLMicroLocationTriggerCounters::getMotionLocalizationsCount(void)::$_0>,BOOL ()(CLMicroLocationProto::TriggerEvent const&)>::operator()(uint64_t a1, uint64_t a2)
{
  _BOOL8 result;

  result = CLMicroLocationTriggerCounters::isLocalization(*(CLMicroLocationTriggerCounters **)(a1 + 8), (const CLMicroLocationProto::TriggerEvent *)a2);
  if (result)
    return (*(_BYTE *)(a2 + 84) & 0x10) != 0
        && CLMicroLocationTriggerManager::enumerateClientIdToTriggerType(*(_QWORD *)(a2 + 32)) == 1;
  return result;
}

uint64_t std::__function::__func<CLMicroLocationTriggerCounters::getMotionLocalizationsCount(void)::$_0,std::allocator<CLMicroLocationTriggerCounters::getMotionLocalizationsCount(void)::$_0>,BOOL ()(CLMicroLocationProto::TriggerEvent const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<CLMicroLocationTriggerCounters::getMotionLocalizationsCount(void)::$_0,std::allocator<CLMicroLocationTriggerCounters::getMotionLocalizationsCount(void)::$_0>,BOOL ()(CLMicroLocationProto::TriggerEvent const&)>::target_type()
{
}

void std::__function::__func<CLMicroLocationTriggerCounters::getLocalizationsCausedBy(CLMicroLocationProto::TriggerReason)::$_0,std::allocator<CLMicroLocationTriggerCounters::getLocalizationsCausedBy(CLMicroLocationProto::TriggerReason)::$_0>,BOOL ()(CLMicroLocationProto::TriggerEvent const&)>::~__func()
{
  JUMPOUT(0x2426A04D4);
}

__n128 std::__function::__func<CLMicroLocationTriggerCounters::getLocalizationsCausedBy(CLMicroLocationProto::TriggerReason)::$_0,std::allocator<CLMicroLocationTriggerCounters::getLocalizationsCausedBy(CLMicroLocationProto::TriggerReason)::$_0>,BOOL ()(CLMicroLocationProto::TriggerEvent const&)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_2511DAC48;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<CLMicroLocationTriggerCounters::getLocalizationsCausedBy(CLMicroLocationProto::TriggerReason)::$_0,std::allocator<CLMicroLocationTriggerCounters::getLocalizationsCausedBy(CLMicroLocationProto::TriggerReason)::$_0>,BOOL ()(CLMicroLocationProto::TriggerEvent const&)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_2511DAC48;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

BOOL std::__function::__func<CLMicroLocationTriggerCounters::getLocalizationsCausedBy(CLMicroLocationProto::TriggerReason)::$_0,std::allocator<CLMicroLocationTriggerCounters::getLocalizationsCausedBy(CLMicroLocationProto::TriggerReason)::$_0>,BOOL ()(CLMicroLocationProto::TriggerEvent const&)>::operator()(uint64_t a1, uint64_t a2)
{
  _BOOL8 result;

  result = CLMicroLocationTriggerCounters::isLocalization(*(CLMicroLocationTriggerCounters **)(a1 + 8), (const CLMicroLocationProto::TriggerEvent *)a2);
  if (result)
    return (*(_BYTE *)(a2 + 85) & 4) != 0 && *(_DWORD *)(a2 + 72) == *(_DWORD *)(a1 + 16);
  return result;
}

uint64_t std::__function::__func<CLMicroLocationTriggerCounters::getLocalizationsCausedBy(CLMicroLocationProto::TriggerReason)::$_0,std::allocator<CLMicroLocationTriggerCounters::getLocalizationsCausedBy(CLMicroLocationProto::TriggerReason)::$_0>,BOOL ()(CLMicroLocationProto::TriggerEvent const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<CLMicroLocationTriggerCounters::getLocalizationsCausedBy(CLMicroLocationProto::TriggerReason)::$_0,std::allocator<CLMicroLocationTriggerCounters::getLocalizationsCausedBy(CLMicroLocationProto::TriggerReason)::$_0>,BOOL ()(CLMicroLocationProto::TriggerEvent const&)>::target_type()
{
}

void std::__function::__func<CLMicroLocationTriggerCounters::getLocalizationsCausedByWithType(CLMicroLocationProto::TriggerReason,CLMicroLocationTriggerManager::MiLoTriggerType)::$_0,std::allocator<CLMicroLocationTriggerCounters::getLocalizationsCausedByWithType(CLMicroLocationProto::TriggerReason,CLMicroLocationTriggerManager::MiLoTriggerType)::$_0>,BOOL ()(CLMicroLocationProto::TriggerEvent const&)>::~__func()
{
  JUMPOUT(0x2426A04D4);
}

__n128 std::__function::__func<CLMicroLocationTriggerCounters::getLocalizationsCausedByWithType(CLMicroLocationProto::TriggerReason,CLMicroLocationTriggerManager::MiLoTriggerType)::$_0,std::allocator<CLMicroLocationTriggerCounters::getLocalizationsCausedByWithType(CLMicroLocationProto::TriggerReason,CLMicroLocationTriggerManager::MiLoTriggerType)::$_0>,BOOL ()(CLMicroLocationProto::TriggerEvent const&)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_2511DACC8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<CLMicroLocationTriggerCounters::getLocalizationsCausedByWithType(CLMicroLocationProto::TriggerReason,CLMicroLocationTriggerManager::MiLoTriggerType)::$_0,std::allocator<CLMicroLocationTriggerCounters::getLocalizationsCausedByWithType(CLMicroLocationProto::TriggerReason,CLMicroLocationTriggerManager::MiLoTriggerType)::$_0>,BOOL ()(CLMicroLocationProto::TriggerEvent const&)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_2511DACC8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

BOOL std::__function::__func<CLMicroLocationTriggerCounters::getLocalizationsCausedByWithType(CLMicroLocationProto::TriggerReason,CLMicroLocationTriggerManager::MiLoTriggerType)::$_0,std::allocator<CLMicroLocationTriggerCounters::getLocalizationsCausedByWithType(CLMicroLocationProto::TriggerReason,CLMicroLocationTriggerManager::MiLoTriggerType)::$_0>,BOOL ()(CLMicroLocationProto::TriggerEvent const&)>::operator()(uint64_t a1, uint64_t a2)
{
  _BOOL8 result;
  int v5;

  result = CLMicroLocationTriggerCounters::isLocalization(*(CLMicroLocationTriggerCounters **)(a1 + 8), (const CLMicroLocationProto::TriggerEvent *)a2);
  if (result)
  {
    v5 = *(_DWORD *)(a2 + 84);
    if ((v5 & 0x400) != 0)
    {
      result = 0;
      if ((v5 & 0x10) != 0 && *(_DWORD *)(a2 + 72) == *(_DWORD *)(a1 + 16))
        return CLMicroLocationTriggerManager::enumerateClientIdToTriggerType(*(_QWORD *)(a2 + 32)) == *(_DWORD *)(a1 + 20);
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t std::__function::__func<CLMicroLocationTriggerCounters::getLocalizationsCausedByWithType(CLMicroLocationProto::TriggerReason,CLMicroLocationTriggerManager::MiLoTriggerType)::$_0,std::allocator<CLMicroLocationTriggerCounters::getLocalizationsCausedByWithType(CLMicroLocationProto::TriggerReason,CLMicroLocationTriggerManager::MiLoTriggerType)::$_0>,BOOL ()(CLMicroLocationProto::TriggerEvent const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<CLMicroLocationTriggerCounters::getLocalizationsCausedByWithType(CLMicroLocationProto::TriggerReason,CLMicroLocationTriggerManager::MiLoTriggerType)::$_0,std::allocator<CLMicroLocationTriggerCounters::getLocalizationsCausedByWithType(CLMicroLocationProto::TriggerReason,CLMicroLocationTriggerManager::MiLoTriggerType)::$_0>,BOOL ()(CLMicroLocationProto::TriggerEvent const&)>::target_type()
{
}

void std::__function::__func<CLMicroLocationTriggerCounters::getLocalizationsCausedByWithTypeMotionState(CLMicroLocationProto::TriggerReason,CLMicroLocationTriggerManager::MiLoTriggerType,CLMicroLocationProto::MotionState)::$_0,std::allocator<CLMicroLocationTriggerCounters::getLocalizationsCausedByWithTypeMotionState(CLMicroLocationProto::TriggerReason,CLMicroLocationTriggerManager::MiLoTriggerType,CLMicroLocationProto::MotionState)::$_0>,BOOL ()(CLMicroLocationProto::TriggerEvent const&)>::~__func()
{
  JUMPOUT(0x2426A04D4);
}

__n128 std::__function::__func<CLMicroLocationTriggerCounters::getLocalizationsCausedByWithTypeMotionState(CLMicroLocationProto::TriggerReason,CLMicroLocationTriggerManager::MiLoTriggerType,CLMicroLocationProto::MotionState)::$_0,std::allocator<CLMicroLocationTriggerCounters::getLocalizationsCausedByWithTypeMotionState(CLMicroLocationProto::TriggerReason,CLMicroLocationTriggerManager::MiLoTriggerType,CLMicroLocationProto::MotionState)::$_0>,BOOL ()(CLMicroLocationProto::TriggerEvent const&)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_2511DAD48;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<CLMicroLocationTriggerCounters::getLocalizationsCausedByWithTypeMotionState(CLMicroLocationProto::TriggerReason,CLMicroLocationTriggerManager::MiLoTriggerType,CLMicroLocationProto::MotionState)::$_0,std::allocator<CLMicroLocationTriggerCounters::getLocalizationsCausedByWithTypeMotionState(CLMicroLocationProto::TriggerReason,CLMicroLocationTriggerManager::MiLoTriggerType,CLMicroLocationProto::MotionState)::$_0>,BOOL ()(CLMicroLocationProto::TriggerEvent const&)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_2511DAD48;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

BOOL std::__function::__func<CLMicroLocationTriggerCounters::getLocalizationsCausedByWithTypeMotionState(CLMicroLocationProto::TriggerReason,CLMicroLocationTriggerManager::MiLoTriggerType,CLMicroLocationProto::MotionState)::$_0,std::allocator<CLMicroLocationTriggerCounters::getLocalizationsCausedByWithTypeMotionState(CLMicroLocationProto::TriggerReason,CLMicroLocationTriggerManager::MiLoTriggerType,CLMicroLocationProto::MotionState)::$_0>,BOOL ()(CLMicroLocationProto::TriggerEvent const&)>::operator()(uint64_t a1, uint64_t a2)
{
  _BOOL8 result;
  int v5;
  BOOL v6;

  result = CLMicroLocationTriggerCounters::isLocalization(*(CLMicroLocationTriggerCounters **)(a1 + 8), (const CLMicroLocationProto::TriggerEvent *)a2);
  if (result)
  {
    v5 = *(_DWORD *)(a2 + 84);
    if ((v5 & 0x400) != 0
      && ((~v5 & 0x1010) == 0 ? (v6 = *(_DWORD *)(a2 + 72) == *(_DWORD *)(a1 + 16)) : (v6 = 0),
          v6 && *(_DWORD *)(a2 + 76) == *(_DWORD *)(a1 + 24)))
    {
      return CLMicroLocationTriggerManager::enumerateClientIdToTriggerType(*(_QWORD *)(a2 + 32)) == *(_DWORD *)(a1 + 20);
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t std::__function::__func<CLMicroLocationTriggerCounters::getLocalizationsCausedByWithTypeMotionState(CLMicroLocationProto::TriggerReason,CLMicroLocationTriggerManager::MiLoTriggerType,CLMicroLocationProto::MotionState)::$_0,std::allocator<CLMicroLocationTriggerCounters::getLocalizationsCausedByWithTypeMotionState(CLMicroLocationProto::TriggerReason,CLMicroLocationTriggerManager::MiLoTriggerType,CLMicroLocationProto::MotionState)::$_0>,BOOL ()(CLMicroLocationProto::TriggerEvent const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<CLMicroLocationTriggerCounters::getLocalizationsCausedByWithTypeMotionState(CLMicroLocationProto::TriggerReason,CLMicroLocationTriggerManager::MiLoTriggerType,CLMicroLocationProto::MotionState)::$_0,std::allocator<CLMicroLocationTriggerCounters::getLocalizationsCausedByWithTypeMotionState(CLMicroLocationProto::TriggerReason,CLMicroLocationTriggerManager::MiLoTriggerType,CLMicroLocationProto::MotionState)::$_0>,BOOL ()(CLMicroLocationProto::TriggerEvent const&)>::target_type()
{
}

char *std::__tree<boost::uuids::uuid>::__emplace_unique_key_args<boost::uuids::uuid,boost::uuids::uuid>(uint64_t **a1, unint64_t *a2, _OWORD *a3)
{
  void **v5;
  char *v6;
  uint64_t **v7;
  uint64_t v9;

  v5 = (void **)std::__tree<boost::uuids::uuid>::__find_equal<boost::uuids::uuid>((uint64_t)a1, &v9, a2);
  v6 = (char *)*v5;
  if (!*v5)
  {
    v7 = (uint64_t **)v5;
    v6 = (char *)operator new(0x30uLL);
    *(_OWORD *)(v6 + 25) = *a3;
    std::__tree<CLMicroLocationRecordingCompletionMetaInformation::RecordingError>::__insert_node_at(a1, v9, v7, (uint64_t *)v6);
  }
  return v6;
}

void CLMicroLocationLegacyEventBatteryState::handleEvent(char a1@<W1>, double *a2@<X2>, _BYTE *a3@<X8>)
{
  double v5;
  _BYTE v6[24];
  _BYTE v7[144];
  char v8;
  _BYTE v9[144];

  v5 = *a2;
  CLMicroLocationProto::BatteryChargerConnected::BatteryChargerConnected((CLMicroLocationProto::BatteryChargerConnected *)v6);
  CLMicroLocationProtobufHelper::createRecordingEvent<CLMicroLocationProto::BatteryChargerConnected>((CLMicroLocationProto::RecordingEvent *)v6, 0, 0, 0, (CLMicroLocationProto *)3, (uint64_t)v7, v5);
  v8 = a1;
  CLMicroLocationProto::RecordingEvent::RecordingEvent((CLMicroLocationProto::RecordingEvent *)v9, (const CLMicroLocationProto::RecordingEvent *)v7);
  *a3 = v8;
  CLMicroLocationProto::RecordingEvent::RecordingEvent((CLMicroLocationProto::RecordingEvent *)(a3 + 8), (const CLMicroLocationProto::RecordingEvent *)v9);
  CLMicroLocationProto::RecordingEvent::~RecordingEvent((CLMicroLocationProto::RecordingEvent *)v9);
  CLMicroLocationProto::RecordingEvent::~RecordingEvent((CLMicroLocationProto::RecordingEvent *)v7);
  CLMicroLocationProto::BatteryChargerConnected::~BatteryChargerConnected((CLMicroLocationProto::BatteryChargerConnected *)v6);
}

void sub_241B3E3F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  CLMicroLocationProto::RecordingEvent *v12;

  CLMicroLocationProto::RecordingEvent::~RecordingEvent(v12);
  CLMicroLocationProto::RecordingEvent::~RecordingEvent((CLMicroLocationProto::RecordingEvent *)&a12);
  CLMicroLocationProto::BatteryChargerConnected::~BatteryChargerConnected((CLMicroLocationProto::BatteryChargerConnected *)&a9);
  _Unwind_Resume(a1);
}

void CLMicroLocationProtobufHelper::createRecordingEvent<CLMicroLocationProto::BatteryChargerConnected>(CLMicroLocationProto::RecordingEvent *a1@<X0>, CLMicroLocationProto *a2@<X1>, char a3@<W2>, char a4@<W3>, CLMicroLocationProto *a5@<X4>, uint64_t a6@<X8>, double a7@<D0>)
{
  unsigned int v14;
  int v15;
  const CLMicroLocationProto::BatteryChargerConnected *v16;
  const char *v17;
  int v18;
  const char *v19;

  CLMicroLocationProto::RecordingEvent::RecordingEvent((CLMicroLocationProto::RecordingEvent *)a6);
  v14 = *((_DWORD *)a1 + 2);
  if (!CLMicroLocationProto::EventType_IsValid((CLMicroLocationProto *)v14))
  {
    v17 = "::CLMicroLocationProto::EventType_IsValid(value)";
    v18 = 20192;
    v19 = "set_eventtype";
    goto LABEL_10;
  }
  v15 = *(_DWORD *)(a6 + 140);
  *(_DWORD *)(a6 + 72) = v14;
  *(double *)(a6 + 8) = a7;
  *(_BYTE *)(a6 + 77) = a3;
  *(_DWORD *)(a6 + 140) = v15 | 0x2803;
  *(_BYTE *)(a6 + 76) = a4;
  if (!CLMicroLocationProto::ConfidenceLevel_IsValid(a5))
  {
    v17 = "::CLMicroLocationProto::ConfidenceLevel_IsValid(value)";
    v18 = 20701;
    v19 = "set_confidencelevel";
    goto LABEL_10;
  }
  *(_DWORD *)(a6 + 140) |= 0x4000u;
  *(_DWORD *)(a6 + 120) = (_DWORD)a5;
  if (((unint64_t)a2 & 0xFF00000000) != 0)
  {
    if (CLMicroLocationProto::MotionState_IsValid(a2))
    {
      *(_DWORD *)(a6 + 140) |= 0x20000u;
      *(_DWORD *)(a6 + 124) = (_DWORD)a2;
      goto LABEL_6;
    }
    v17 = "::CLMicroLocationProto::MotionState_IsValid(value)";
    v18 = 20793;
    v19 = "set_motionstate";
LABEL_10:
    __assert_rtn(v19, "microlocation.pb.h", v18, v17);
  }
LABEL_6:
  CLMicroLocationProtobufHelper::setSpecificRecordingEvent((CLMicroLocationProtobufHelper *)a6, a1, v16);
}

void sub_241B3E558(_Unwind_Exception *a1)
{
  CLMicroLocationProto::RecordingEvent *v1;

  CLMicroLocationProto::RecordingEvent::~RecordingEvent(v1);
  _Unwind_Resume(a1);
}

uint64_t CLMicroLocationQualityEstimationAlgorithms::evaluateQualityWithNumFingerprints(CLMicroLocationQualityEstimationAlgorithms *this, const CLMicroLocationFingerprintVector *a2)
{
  unint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;
  unsigned int v7;
  void *v8;
  void *v9;
  void *v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  int v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  int v19;
  int v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  unsigned int v28;
  unsigned int v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  unsigned int v34;
  unsigned int v35;
  NSObject *v36;
  uint64_t v37;
  unint64_t v39;
  uint8_t buf[8];
  _BYTE v41[20];
  __int16 v42;
  unint64_t v43;
  __int16 v44;
  int v45;
  __int16 v46;
  unint64_t v47;
  uint64_t v48;

  v48 = *MEMORY[0x24BDAC8D0];
  if (CLMicroLocationFingerprintVector::size(this))
  {
    v3 = 0;
    while (2)
    {
      v4 = CLMicroLocationFingerprintVector::operator[](this, v3) + 16;
      while (1)
      {
        v4 = *(_QWORD *)v4;
        if (!v4)
          break;
        if (*(_DWORD *)(v4 + 24) == 5)
        {
          +[ULDefaultsSingleton shared](ULDefaultsSingleton, "shared");
          v8 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v8, "defaultsDictionary");
          v9 = (void *)objc_claimAutoreleasedReturnValue();

          objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "ULModelQualityNumFingerprintsWiFiBleThreshold");
          v10 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v9, "objectForKey:", v10);
          v11 = objc_claimAutoreleasedReturnValue();
          v6 = (void *)v11;
          if (v11 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
            v12 = objc_msgSend(v6, "unsignedIntValue");
          else
            v12 = objc_msgSend(&unk_2511EE170, "unsignedIntValue");
          v13 = v12;
          v14 = 1;
          goto LABEL_18;
        }
      }
      if (++v3 < CLMicroLocationFingerprintVector::size(this))
        continue;
      break;
    }
  }
  +[ULDefaultsSingleton shared](ULDefaultsSingleton, "shared");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "defaultsDictionary");
  v9 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "ULModelQualityNumFingerprintsWiFiOnlyThreshold");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "objectForKey:", v10);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  if (v6 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
    v7 = objc_msgSend(v6, "unsignedIntValue");
  else
    v7 = objc_msgSend(&unk_2511EE158, "unsignedIntValue");
  v13 = v7;
  v14 = 0;
LABEL_18:

  *(_QWORD *)v41 = 0;
  *(_QWORD *)&v41[8] = 0;
  *(_QWORD *)buf = v41;
  +[ULDefaultsSingleton shared](ULDefaultsSingleton, "shared");
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v15, "defaultsDictionary");
  v16 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "ULModelQualitySecondsPerDay");
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v16, "objectForKey:", v17);
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  if (v18 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
    v19 = objc_msgSend(v18, "intValue");
  else
    v19 = objc_msgSend(&unk_2511EE0C8, "intValue");
  v20 = v19;

  v21 = 0;
  v22 = v13;
  while (v21 < CLMicroLocationFingerprintVector::size(this))
  {
    v39 = vcvtmd_u64_f64(*(double *)(CLMicroLocationFingerprintVector::operator[](this, v21) + 144) / (double)v20);
    std::__tree<unsigned long long>::__emplace_unique_key_args<unsigned long long,unsigned long long>((uint64_t **)buf, &v39, (uint64_t *)&v39);
    ++v21;
  }
  v23 = *(_QWORD *)&v41[8];
  std::__tree<std::__value_type<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,double>,std::__map_value_compare<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,std::__value_type<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,double>,std::less<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes>,true>,std::allocator<std::__value_type<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,double>>>::destroy((uint64_t)buf, *(_QWORD **)v41);
  +[ULDefaultsSingleton shared](ULDefaultsSingleton, "shared");
  v24 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v24, "defaultsDictionary");
  v25 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "ULModelQualityDaysInLOIForRelaxation");
  v26 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v25, "objectForKey:", v26);
  v27 = (void *)objc_claimAutoreleasedReturnValue();
  if (v27 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
    v28 = objc_msgSend(v27, "unsignedIntValue");
  else
    v28 = objc_msgSend(&unk_2511EE0F8, "unsignedIntValue");
  v29 = v28;

  if (v23 >= v29)
  {
    +[ULDefaultsSingleton shared](ULDefaultsSingleton, "shared");
    v30 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v30, "defaultsDictionary");
    v31 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "ULModelQualityNumFingerprintsRelaxationAfterTimeInLOI");
    v32 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v31, "objectForKey:", v32);
    v33 = (void *)objc_claimAutoreleasedReturnValue();
    if (v33 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
      v34 = objc_msgSend(v33, "unsignedIntValue");
    else
      v34 = objc_msgSend(&unk_2511EE110, "unsignedIntValue");
    v35 = v34;

    v22 -= v35;
  }
  if (onceToken_MicroLocation_Default != -1)
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_102);
  v36 = (id)logObject_MicroLocation_Default;
  if (os_log_type_enabled(v36, OS_LOG_TYPE_DEFAULT))
  {
    v37 = CLMicroLocationFingerprintVector::size(this);
    *(_DWORD *)buf = 68290050;
    *(_WORD *)v41 = 2082;
    *(_DWORD *)&buf[4] = 0;
    *(_QWORD *)&v41[2] = "";
    *(_WORD *)&v41[10] = 2050;
    *(_QWORD *)&v41[12] = v37;
    v42 = 2050;
    v43 = v23;
    v44 = 1026;
    v45 = v14;
    v46 = 2050;
    v47 = v22;
    _os_log_impl(&dword_2419D9000, v36, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"evaluateQualityWithNumFingerprints\", \"Num fingerprints (unpruned)\":%{public}lu, \"Number of days with recordings\":%{public}lu, \"Has BLE\":%{public}hhd, \"Threshold\":%{public}lu}", buf, 0x36u);
  }

  if (CLMicroLocationFingerprintVector::size(this) < v22)
    return 1;
  else
    return 3;
}

void sub_241B3EA64(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void CLMicroLocationQualityEstimationAlgorithms::evaluateQualityTreeBased(CLMicroLocationQualityEstimationAlgorithms *this@<X0>, uint64_t a2@<X8>)
{
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  char v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t *i;
  int v14;
  _QWORD *v15;
  uint64_t **v16;
  int v17;
  int v18;
  uint64_t **v19;
  int *v20;
  int *v21;
  int *v22;
  unsigned int v23;
  unint64_t v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  double v29;
  double v30;
  NSObject *v31;
  int v32;
  int v33;
  int v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  unsigned int v39;
  unsigned int v40;
  unint64_t v41;
  int *v42;
  int v43;
  float v44;
  void *v45;
  void *v46;
  void *v47;
  void *v48;
  double v49;
  double v50;
  void *v51;
  void *v52;
  void *v53;
  void *v54;
  int v55;
  int *v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  unint64_t v60;
  char *v61;
  unint64_t v62;
  _DWORD *v63;
  int v64;
  unint64_t v65;
  void *v66;
  void *v67;
  void *v68;
  void *v69;
  unsigned int v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  unint64_t v74;
  char *v75;
  char *v76;
  char *v77;
  int v78;
  unsigned int v79;
  unint64_t v80;
  int v81;
  int *v82;
  int v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  unint64_t v87;
  char *v88;
  int v89;
  int *v90;
  int *v91;
  void **v92;
  _QWORD **v94;
  _QWORD *v95;
  uint64_t v96;
  _QWORD **v97;
  _QWORD *v98;
  unint64_t v99;
  __int128 v100;
  __int128 v101;
  int v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  __CFString *v106;
  uint64_t EnabledTechnologies;
  char v108;
  uint8_t buf[8];
  __int16 v110;
  const char *v111;
  __int16 v112;
  unint64_t v113;
  __int16 v114;
  uint64_t v115;
  __int16 v116;
  int v117;
  __int16 v118;
  int v119;
  __int16 v120;
  int v121;
  __int16 v122;
  double v123;
  uint64_t v124;

  v124 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  v92 = (void **)(a2 + 8);
  std::vector<CLMicroLocationProto::ConfidenceLevel>::__assign_with_size[abi:ne180100]<CLMicroLocationProto::ConfidenceLevel*,CLMicroLocationProto::ConfidenceLevel*>((char *)(a2 + 8), 0, 0, 0);
  +[ULDefaultsSingleton shared](ULDefaultsSingleton, "shared");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "defaultsDictionary");
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "ULAdaptiveSensorsEnable");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "objectForKey:", v6);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  if (v7 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
    v8 = objc_msgSend(v7, "BOOLValue");
  else
    v8 = objc_msgSend(MEMORY[0x24BDBD1C8], "BOOLValue");
  v9 = v8;

  v106 = &stru_2511DC120;
  EnabledTechnologies = CLMicroLocationUtils::createEnabledTechnologies((CLMicroLocationUtils *)1, 1, 1);
  v108 = v9;
  v103 = 0;
  v104 = 0;
  v105 = 0;
  CLMicroLocationClusterRFDistance::evaluateRFClusterDistances((uint64_t)this, (float *)&v103);
  if (CLMicroLocationModel::numClusters(this) == 1)
  {
    HIDWORD(v104) = 0;
    LODWORD(v105) = 0;
  }
  v100 = 0u;
  v101 = 0u;
  v102 = 1065353216;
  v98 = 0;
  v99 = 0;
  v96 = 0;
  v97 = &v98;
  v94 = &v95;
  v95 = 0;
  v11 = *((_QWORD *)this + 41);
  v10 = *((_QWORD *)this + 42);
  v12 = (v10 - v11) >> 5;
  if (v10 == v11)
  {
    v23 = 0;
    *(_DWORD *)(a2 + 32) = 0;
    v20 = (int *)(a2 + 32);
    *(_DWORD *)(a2 + 36) = 0;
    v21 = (int *)(a2 + 36);
    *(_DWORD *)(a2 + 40) = 0;
    v22 = (int *)(a2 + 40);
  }
  else
  {
    do
    {
      for (i = *(uint64_t **)(*(_QWORD *)v11 + 16); i; i = (uint64_t *)*i)
      {
        v14 = *((_DWORD *)i + 6);
        if (v14 == 6)
        {
          v16 = (uint64_t **)&v94;
        }
        else
        {
          if (v14 != 5)
          {
            if (v14 == 1)
            {
              *(_QWORD *)buf = i + 4;
              v15 = std::__hash_table<std::__hash_value_type<std::variant<unsigned long long,boost::uuids::uuid,std::string>,int>,std::__unordered_map_hasher<std::variant<unsigned long long,boost::uuids::uuid,std::string>,std::__hash_value_type<std::variant<unsigned long long,boost::uuids::uuid,std::string>,int>,std::hash<std::variant<unsigned long long,boost::uuids::uuid,std::string>>,std::equal_to<std::variant<unsigned long long,boost::uuids::uuid,std::string>>,true>,std::__unordered_map_equal<std::variant<unsigned long long,boost::uuids::uuid,std::string>,std::__hash_value_type<std::variant<unsigned long long,boost::uuids::uuid,std::string>,int>,std::equal_to<std::variant<unsigned long long,boost::uuids::uuid,std::string>>,std::hash<std::variant<unsigned long long,boost::uuids::uuid,std::string>>,true>,std::allocator<std::__hash_value_type<std::variant<unsigned long long,boost::uuids::uuid,std::string>,int>>>::__emplace_unique_key_args<std::variant<unsigned long long,boost::uuids::uuid,std::string>,std::piecewise_construct_t const&,std::tuple<std::variant<unsigned long long,boost::uuids::uuid,std::string> const&>,std::tuple<>>((uint64_t)&v100, (uint64_t)(i + 4), (uint64_t)&std::piecewise_construct, (uint64_t *)buf);
              ++*((_DWORD *)v15 + 12);
            }
            continue;
          }
          v16 = (uint64_t **)&v97;
        }
        std::__tree<std::variant<unsigned long long,boost::uuids::uuid,std::string>>::__emplace_unique_key_args<std::variant<unsigned long long,boost::uuids::uuid,std::string>,std::variant<unsigned long long,boost::uuids::uuid,std::string> const&>(v16, (uint64_t)(i + 4), (uint64_t)(i + 4));
      }
      v11 += 32;
    }
    while (v11 != v10);
    v17 = v99;
    v18 = v96;
    v19 = (uint64_t **)v101;
    *(_DWORD *)(a2 + 32) = DWORD2(v101);
    v20 = (int *)(a2 + 32);
    *(_DWORD *)(a2 + 36) = v17;
    v21 = (int *)(a2 + 36);
    *(_DWORD *)(a2 + 40) = v18;
    v22 = (int *)(a2 + 40);
    if (v19)
    {
      v90 = (int *)(a2 + 40);
      v91 = (int *)(a2 + 36);
      v23 = 0;
      do
      {
        v24 = *((int *)v19 + 12);
        +[ULDefaultsSingleton shared](ULDefaultsSingleton, "shared", v90, v91);
        v25 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v25, "defaultsDictionary");
        v26 = (void *)objc_claimAutoreleasedReturnValue();

        objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "ULRobustWiFiMinARDecisionTreeFeatureThreshold");
        v27 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v26, "objectForKey:", v27);
        v28 = (void *)objc_claimAutoreleasedReturnValue();
        if (v28 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
          objc_msgSend(v28, "doubleValue");
        else
          objc_msgSend(&unk_2511ED068, "doubleValue");
        v30 = v29;

        if (v30 < (float)(v24 / v12))
          ++v23;
        v19 = (uint64_t **)*v19;
      }
      while (v19);
      v22 = v90;
      v21 = v91;
    }
    else
    {
      v23 = 0;
    }
  }
  if (onceToken_MicroLocation_Default != -1)
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_102);
  v31 = logObject_MicroLocation_Default;
  if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
  {
    v32 = *v20;
    v33 = *v21;
    v34 = *v22;
    *(_DWORD *)buf = 68290562;
    *(_DWORD *)&buf[4] = 0;
    v110 = 2082;
    v111 = "";
    v112 = 2050;
    v113 = v12;
    v114 = 2050;
    v115 = v23;
    v116 = 1026;
    v117 = v32;
    v118 = 1026;
    v119 = v33;
    v120 = 1026;
    v121 = v34;
    v122 = 2050;
    v123 = *(float *)&v105;
    _os_log_impl(&dword_2419D9000, v31, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"evaluateQualityTreeBased\", \"Num fingerprints (post-pruning)\":%{public}lu, \"NumRobustWifiSources\":%{public}lu, \"NumWiFiSources\":%{public}u, \"NumBLESources\":%{public}u, \"NumUWBSources\":%{public}u, \"maxClusterRfDistance\":\"%{public}f\"}", buf, 0x42u);
  }
  +[ULDefaultsSingleton shared](ULDefaultsSingleton, "shared");
  v35 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v35, "defaultsDictionary");
  v36 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "ULNumMinFingerprintsPostPruningTreeBasedThreshold");
  v37 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v36, "objectForKey:", v37);
  v38 = (void *)objc_claimAutoreleasedReturnValue();
  if (v38 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
    v39 = objc_msgSend(v38, "unsignedIntValue");
  else
    v39 = objc_msgSend(&unk_2511EE128, "unsignedIntValue");
  v40 = v39;

  if (v12 < v40)
  {
    v41 = *(_QWORD *)(a2 + 24);
    v42 = *(int **)(a2 + 16);
    if ((unint64_t)v42 < v41)
    {
      v43 = 5;
LABEL_59:
      *v42 = v43;
      v63 = v42 + 1;
LABEL_100:
      v82 = (int *)a2;
      *(_QWORD *)(a2 + 16) = v63;
      v81 = 1;
      goto LABEL_101;
    }
    v56 = (int *)*v92;
    v57 = ((char *)v42 - (_BYTE *)*v92) >> 2;
    v58 = v57 + 1;
    if ((unint64_t)(v57 + 1) >> 62)
      std::vector<CLMicroLocationProto::ConfidenceReason>::__throw_length_error[abi:ne180100]();
    v59 = v41 - (_QWORD)v56;
    if (v59 >> 1 > v58)
      v58 = v59 >> 1;
    if ((unint64_t)v59 >= 0x7FFFFFFFFFFFFFFCLL)
      v60 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v60 = v58;
    if (v60)
    {
      v61 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CLMicroLocationProto::ConfidenceReason>>(a2 + 24, v60);
      v56 = *(int **)(a2 + 8);
      v42 = *(int **)(a2 + 16);
    }
    else
    {
      v61 = 0;
    }
    v76 = &v61[4 * v57];
    v77 = &v61[4 * v60];
    *(_DWORD *)v76 = 5;
    v63 = v76 + 4;
    while (v42 != v56)
    {
      v78 = *--v42;
      *((_DWORD *)v76 - 1) = v78;
      v76 -= 4;
    }
    goto LABEL_98;
  }
  v44 = *(float *)&v105;
  +[ULDefaultsSingleton shared](ULDefaultsSingleton, "shared");
  v45 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v45, "defaultsDictionary");
  v46 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "ULMaxClusterRFDistanceDecisionTreeNodeThreshold");
  v47 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v46, "objectForKey:", v47);
  v48 = (void *)objc_claimAutoreleasedReturnValue();
  if (v48 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
    objc_msgSend(v48, "doubleValue");
  else
    objc_msgSend(&unk_2511ED078, "doubleValue");
  v50 = v49;

  if (v50 >= v44)
  {
    v62 = *(_QWORD *)(a2 + 24);
    v42 = *(int **)(a2 + 16);
    if ((unint64_t)v42 < v62)
    {
      v43 = 6;
      goto LABEL_59;
    }
    v56 = (int *)*v92;
    v71 = ((char *)v42 - (_BYTE *)*v92) >> 2;
    v72 = v71 + 1;
    if ((unint64_t)(v71 + 1) >> 62)
      std::vector<CLMicroLocationProto::ConfidenceReason>::__throw_length_error[abi:ne180100]();
    v73 = v62 - (_QWORD)v56;
    if (v73 >> 1 > v72)
      v72 = v73 >> 1;
    if ((unint64_t)v73 >= 0x7FFFFFFFFFFFFFFCLL)
      v74 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v74 = v72;
    if (v74)
    {
      v75 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CLMicroLocationProto::ConfidenceReason>>(a2 + 24, v74);
      v56 = *(int **)(a2 + 8);
      v42 = *(int **)(a2 + 16);
    }
    else
    {
      v75 = 0;
    }
    v76 = &v75[4 * v71];
    v77 = &v75[4 * v74];
    *(_DWORD *)v76 = 6;
    v63 = v76 + 4;
    while (v42 != v56)
    {
      v83 = *--v42;
      *((_DWORD *)v76 - 1) = v83;
      v76 -= 4;
    }
LABEL_98:
    *(_QWORD *)(a2 + 8) = v76;
    *(_QWORD *)(a2 + 16) = v63;
    *(_QWORD *)(a2 + 24) = v77;
    if (v56)
      operator delete(v56);
    goto LABEL_100;
  }
  +[ULDefaultsSingleton shared](ULDefaultsSingleton, "shared");
  v51 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v51, "defaultsDictionary");
  v52 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "ULNumRobustWifiSourcesDecisionTreeNodeThreshold");
  v53 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v52, "objectForKey:", v53);
  v54 = (void *)objc_claimAutoreleasedReturnValue();
  if (v54 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
    v55 = objc_msgSend(v54, "unsignedIntValue");
  else
    v55 = objc_msgSend(&unk_2511EE140, "unsignedIntValue");
  v64 = v55;

  if ((int)v23 < v64)
  {
    v65 = v99;
    +[ULDefaultsSingleton shared](ULDefaultsSingleton, "shared");
    v66 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v66, "defaultsDictionary");
    v67 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "ULNumBLESourcesDecisionTreeNodeThreshold");
    v68 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v67, "objectForKey:", v68);
    v69 = (void *)objc_claimAutoreleasedReturnValue();
    if (!v69)
      goto LABEL_77;
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
      v70 = objc_msgSend(v69, "unsignedIntValue");
    else
LABEL_77:
      v70 = objc_msgSend(&unk_2511EE0E0, "unsignedIntValue");
    v79 = v70;

    if (v65 < v79)
    {
      v80 = *(_QWORD *)(a2 + 24);
      v42 = *(int **)(a2 + 16);
      if ((unint64_t)v42 < v80)
      {
        v43 = 7;
        goto LABEL_59;
      }
      v56 = (int *)*v92;
      v84 = ((char *)v42 - (_BYTE *)*v92) >> 2;
      v85 = v84 + 1;
      if ((unint64_t)(v84 + 1) >> 62)
        std::vector<CLMicroLocationProto::ConfidenceReason>::__throw_length_error[abi:ne180100]();
      v86 = v80 - (_QWORD)v56;
      if (v86 >> 1 > v85)
        v85 = v86 >> 1;
      if ((unint64_t)v86 >= 0x7FFFFFFFFFFFFFFCLL)
        v87 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v87 = v85;
      if (v87)
      {
        v88 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CLMicroLocationProto::ConfidenceReason>>(a2 + 24, v87);
        v56 = *(int **)(a2 + 8);
        v42 = *(int **)(a2 + 16);
      }
      else
      {
        v88 = 0;
      }
      v76 = &v88[4 * v84];
      v77 = &v88[4 * v87];
      *(_DWORD *)v76 = 7;
      v63 = v76 + 4;
      while (v42 != v56)
      {
        v89 = *--v42;
        *((_DWORD *)v76 - 1) = v89;
        v76 -= 4;
      }
      goto LABEL_98;
    }
  }
  v81 = 3;
  v82 = (int *)a2;
LABEL_101:
  *v82 = v81;
  std::__tree<std::variant<unsigned long long,boost::uuids::uuid,std::string>>::destroy((uint64_t)&v94, v95);
  std::__tree<std::variant<unsigned long long,boost::uuids::uuid,std::string>>::destroy((uint64_t)&v97, v98);
  std::__hash_table<std::__hash_value_type<std::variant<unsigned long long,boost::uuids::uuid,std::string>,int>,std::__unordered_map_hasher<std::variant<unsigned long long,boost::uuids::uuid,std::string>,std::__hash_value_type<std::variant<unsigned long long,boost::uuids::uuid,std::string>,int>,std::hash<std::variant<unsigned long long,boost::uuids::uuid,std::string>>,std::equal_to<std::variant<unsigned long long,boost::uuids::uuid,std::string>>,true>,std::__unordered_map_equal<std::variant<unsigned long long,boost::uuids::uuid,std::string>,std::__hash_value_type<std::variant<unsigned long long,boost::uuids::uuid,std::string>,int>,std::equal_to<std::variant<unsigned long long,boost::uuids::uuid,std::string>>,std::hash<std::variant<unsigned long long,boost::uuids::uuid,std::string>>,true>,std::allocator<std::__hash_value_type<std::variant<unsigned long long,boost::uuids::uuid,std::string>,int>>>::~__hash_table((uint64_t)&v100);

}

void sub_241B3F4DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void **a11, uint64_t a12, char a13, _QWORD *a14, uint64_t a15, char a16, _QWORD *a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,id a27)
{
  void *v27;
  void *v28;
  void *v29;
  void *v31;

  std::__tree<std::variant<unsigned long long,boost::uuids::uuid,std::string>>::destroy((uint64_t)&a13, a14);
  std::__tree<std::variant<unsigned long long,boost::uuids::uuid,std::string>>::destroy((uint64_t)&a16, a17);
  std::__hash_table<std::__hash_value_type<std::variant<unsigned long long,boost::uuids::uuid,std::string>,int>,std::__unordered_map_hasher<std::variant<unsigned long long,boost::uuids::uuid,std::string>,std::__hash_value_type<std::variant<unsigned long long,boost::uuids::uuid,std::string>,int>,std::hash<std::variant<unsigned long long,boost::uuids::uuid,std::string>>,std::equal_to<std::variant<unsigned long long,boost::uuids::uuid,std::string>>,true>,std::__unordered_map_equal<std::variant<unsigned long long,boost::uuids::uuid,std::string>,std::__hash_value_type<std::variant<unsigned long long,boost::uuids::uuid,std::string>,int>,std::equal_to<std::variant<unsigned long long,boost::uuids::uuid,std::string>>,std::hash<std::variant<unsigned long long,boost::uuids::uuid,std::string>>,true>,std::allocator<std::__hash_value_type<std::variant<unsigned long long,boost::uuids::uuid,std::string>,int>>>::~__hash_table((uint64_t)&a19);

  v31 = *a11;
  if (*a11)
  {
    *(_QWORD *)(a12 + 16) = v31;
    operator delete(v31);
  }
  _Unwind_Resume(a1);
}

void ___ZL45_CLLogObjectForCategory_MicroLocation_Defaultv_block_invoke_81()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.MicroLocation", "MicroLocation");
  v1 = (void *)logObject_MicroLocation_Default;
  logObject_MicroLocation_Default = (uint64_t)v0;

}

uint64_t std::__hash_table<std::__hash_value_type<std::variant<unsigned long long,boost::uuids::uuid,std::string>,int>,std::__unordered_map_hasher<std::variant<unsigned long long,boost::uuids::uuid,std::string>,std::__hash_value_type<std::variant<unsigned long long,boost::uuids::uuid,std::string>,int>,std::hash<std::variant<unsigned long long,boost::uuids::uuid,std::string>>,std::equal_to<std::variant<unsigned long long,boost::uuids::uuid,std::string>>,true>,std::__unordered_map_equal<std::variant<unsigned long long,boost::uuids::uuid,std::string>,std::__hash_value_type<std::variant<unsigned long long,boost::uuids::uuid,std::string>,int>,std::equal_to<std::variant<unsigned long long,boost::uuids::uuid,std::string>>,std::hash<std::variant<unsigned long long,boost::uuids::uuid,std::string>>,true>,std::allocator<std::__hash_value_type<std::variant<unsigned long long,boost::uuids::uuid,std::string>,int>>>::~__hash_table(uint64_t a1)
{
  void *v2;

  std::__hash_table<std::__hash_value_type<std::variant<unsigned long long,boost::uuids::uuid,std::string>,int>,std::__unordered_map_hasher<std::variant<unsigned long long,boost::uuids::uuid,std::string>,std::__hash_value_type<std::variant<unsigned long long,boost::uuids::uuid,std::string>,int>,std::hash<std::variant<unsigned long long,boost::uuids::uuid,std::string>>,std::equal_to<std::variant<unsigned long long,boost::uuids::uuid,std::string>>,true>,std::__unordered_map_equal<std::variant<unsigned long long,boost::uuids::uuid,std::string>,std::__hash_value_type<std::variant<unsigned long long,boost::uuids::uuid,std::string>,int>,std::equal_to<std::variant<unsigned long long,boost::uuids::uuid,std::string>>,std::hash<std::variant<unsigned long long,boost::uuids::uuid,std::string>>,true>,std::allocator<std::__hash_value_type<std::variant<unsigned long long,boost::uuids::uuid,std::string>,int>>>::__deallocate_node(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void std::__hash_table<std::__hash_value_type<std::variant<unsigned long long,boost::uuids::uuid,std::string>,int>,std::__unordered_map_hasher<std::variant<unsigned long long,boost::uuids::uuid,std::string>,std::__hash_value_type<std::variant<unsigned long long,boost::uuids::uuid,std::string>,int>,std::hash<std::variant<unsigned long long,boost::uuids::uuid,std::string>>,std::equal_to<std::variant<unsigned long long,boost::uuids::uuid,std::string>>,true>,std::__unordered_map_equal<std::variant<unsigned long long,boost::uuids::uuid,std::string>,std::__hash_value_type<std::variant<unsigned long long,boost::uuids::uuid,std::string>,int>,std::equal_to<std::variant<unsigned long long,boost::uuids::uuid,std::string>>,std::hash<std::variant<unsigned long long,boost::uuids::uuid,std::string>>,true>,std::allocator<std::__hash_value_type<std::variant<unsigned long long,boost::uuids::uuid,std::string>,int>>>::__deallocate_node(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = (_QWORD *)*v2;
      std::__variant_detail::__dtor<std::__variant_detail::__traits<unsigned long long,boost::uuids::uuid,std::string>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)(v2 + 2));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

void std::__tree<std::variant<unsigned long long,boost::uuids::uuid,std::string>>::destroy(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    std::__tree<std::variant<unsigned long long,boost::uuids::uuid,std::string>>::destroy(a1, *a2);
    std::__tree<std::variant<unsigned long long,boost::uuids::uuid,std::string>>::destroy(a1, a2[1]);
    std::__variant_detail::__dtor<std::__variant_detail::__traits<unsigned long long,boost::uuids::uuid,std::string>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

_QWORD *std::__hash_table<std::__hash_value_type<std::variant<unsigned long long,boost::uuids::uuid,std::string>,int>,std::__unordered_map_hasher<std::variant<unsigned long long,boost::uuids::uuid,std::string>,std::__hash_value_type<std::variant<unsigned long long,boost::uuids::uuid,std::string>,int>,std::hash<std::variant<unsigned long long,boost::uuids::uuid,std::string>>,std::equal_to<std::variant<unsigned long long,boost::uuids::uuid,std::string>>,true>,std::__unordered_map_equal<std::variant<unsigned long long,boost::uuids::uuid,std::string>,std::__hash_value_type<std::variant<unsigned long long,boost::uuids::uuid,std::string>,int>,std::equal_to<std::variant<unsigned long long,boost::uuids::uuid,std::string>>,std::hash<std::variant<unsigned long long,boost::uuids::uuid,std::string>>,true>,std::allocator<std::__hash_value_type<std::variant<unsigned long long,boost::uuids::uuid,std::string>,int>>>::__emplace_unique_key_args<std::variant<unsigned long long,boost::uuids::uuid,std::string>,std::piecewise_construct_t const&,std::tuple<std::variant<unsigned long long,boost::uuids::uuid,std::string> const&>,std::tuple<>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  unint64_t v4;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  unint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  unint64_t v16;
  float v17;
  float v18;
  _BOOL8 v19;
  unint64_t v20;
  unint64_t v21;
  size_t v22;
  _QWORD *v23;
  unint64_t v24;
  uint64_t *v26;
  _QWORD v27[3];

  v8 = (_QWORD *)(a1 + 24);
  v9 = std::hash<std::variant<unsigned long long,boost::uuids::uuid,std::string>>::operator()[abi:ne180100](a1 + 24, a2);
  v10 = v9;
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      v4 = v9;
      if (v9 >= v11)
        v4 = v9 % v11;
    }
    else
    {
      v4 = (v11 - 1) & v9;
    }
    v14 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
    if (v14)
    {
      v26 = a4;
      v15 = (_QWORD *)*v14;
      if (*v14)
      {
        do
        {
          v16 = v15[1];
          if (v16 == v10)
          {
            if ((std::operator==[abi:ne180100]<unsigned long long,boost::uuids::uuid,std::string>((uint64_t)(v15 + 2), a2) & 1) != 0)return v15;
          }
          else
          {
            if (v13 > 1)
            {
              if (v16 >= v11)
                v16 %= v11;
            }
            else
            {
              v16 &= v11 - 1;
            }
            if (v16 != v4)
              break;
          }
          v15 = (_QWORD *)*v15;
        }
        while (v15);
      }
      a4 = v26;
    }
  }
  std::__hash_table<std::__hash_value_type<std::variant<unsigned long long,boost::uuids::uuid,std::string>,int>,std::__unordered_map_hasher<std::variant<unsigned long long,boost::uuids::uuid,std::string>,std::__hash_value_type<std::variant<unsigned long long,boost::uuids::uuid,std::string>,int>,std::hash<std::variant<unsigned long long,boost::uuids::uuid,std::string>>,std::equal_to<std::variant<unsigned long long,boost::uuids::uuid,std::string>>,true>,std::__unordered_map_equal<std::variant<unsigned long long,boost::uuids::uuid,std::string>,std::__hash_value_type<std::variant<unsigned long long,boost::uuids::uuid,std::string>,int>,std::equal_to<std::variant<unsigned long long,boost::uuids::uuid,std::string>>,std::hash<std::variant<unsigned long long,boost::uuids::uuid,std::string>>,true>,std::allocator<std::__hash_value_type<std::variant<unsigned long long,boost::uuids::uuid,std::string>,int>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::variant<unsigned long long,boost::uuids::uuid,std::string> const&>,std::tuple<>>(a1, v10, a4, (uint64_t)v27);
  v17 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v18 = *(float *)(a1 + 32);
  if (!v11 || (float)(v18 * (float)v11) < v17)
  {
    v19 = 1;
    if (v11 >= 3)
      v19 = (v11 & (v11 - 1)) != 0;
    v20 = v19 | (2 * v11);
    v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21)
      v22 = v21;
    else
      v22 = v20;
    std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>>>::__rehash<true>(a1, v22);
    v11 = *(_QWORD *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
        v4 = v10 % v11;
      else
        v4 = v10;
    }
    else
    {
      v4 = (v11 - 1) & v10;
    }
  }
  v23 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v23)
  {
    *(_QWORD *)v27[0] = *v23;
    *v23 = v27[0];
  }
  else
  {
    *(_QWORD *)v27[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v27[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = a1 + 16;
    if (*(_QWORD *)v27[0])
    {
      v24 = *(_QWORD *)(*(_QWORD *)v27[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v24 >= v11)
          v24 %= v11;
      }
      else
      {
        v24 &= v11 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v24) = v27[0];
    }
  }
  v15 = (_QWORD *)v27[0];
  v27[0] = 0;
  ++*v8;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::variant<unsigned long long,boost::uuids::uuid,std::string>,int>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::variant<unsigned long long,boost::uuids::uuid,std::string>,int>,void *>>>>::reset[abi:ne180100]((uint64_t)v27, 0);
  return v15;
}

void sub_241B3FA1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::variant<unsigned long long,boost::uuids::uuid,std::string>,int>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::variant<unsigned long long,boost::uuids::uuid,std::string>,int>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

uint64_t std::__hash_table<std::__hash_value_type<std::variant<unsigned long long,boost::uuids::uuid,std::string>,int>,std::__unordered_map_hasher<std::variant<unsigned long long,boost::uuids::uuid,std::string>,std::__hash_value_type<std::variant<unsigned long long,boost::uuids::uuid,std::string>,int>,std::hash<std::variant<unsigned long long,boost::uuids::uuid,std::string>>,std::equal_to<std::variant<unsigned long long,boost::uuids::uuid,std::string>>,true>,std::__unordered_map_equal<std::variant<unsigned long long,boost::uuids::uuid,std::string>,std::__hash_value_type<std::variant<unsigned long long,boost::uuids::uuid,std::string>,int>,std::equal_to<std::variant<unsigned long long,boost::uuids::uuid,std::string>>,std::hash<std::variant<unsigned long long,boost::uuids::uuid,std::string>>,true>,std::allocator<std::__hash_value_type<std::variant<unsigned long long,boost::uuids::uuid,std::string>,int>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::variant<unsigned long long,boost::uuids::uuid,std::string> const&>,std::tuple<>>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7;
  _QWORD *v8;
  uint64_t result;

  v7 = a1 + 16;
  v8 = operator new(0x38uLL);
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  *v8 = 0;
  v8[1] = a2;
  result = std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<unsigned long long,boost::uuids::uuid,std::string>,(std::__variant_detail::_Trait)1>::__copy_constructor((uint64_t)(v8 + 2), *a3);
  *((_DWORD *)v8 + 12) = 0;
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

void sub_241B3FA98(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::variant<unsigned long long,boost::uuids::uuid,std::string>,int>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::variant<unsigned long long,boost::uuids::uuid,std::string>,int>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

unint64_t std::hash<std::variant<unsigned long long,boost::uuids::uuid,std::string>>::operator()[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  char v9;

  v2 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v2 == -1)
  {
    v4 = 299792458;
LABEL_5:
    v5 = -1;
    goto LABEL_6;
  }
  v4 = ((uint64_t (*)(char *))off_2511DADD8[v2])(&v9);
  v5 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v5 == -1)
    goto LABEL_5;
LABEL_6:
  v6 = 0x9DDFEA08EB382D69 * (v4 ^ __ROR8__(v5 + 16, 16));
  v7 = __ROR8__(v5 + 16, 16) ^ (v6 >> 47);
  return (0x9DDFEA08EB382D69 * ((0x9DDFEA08EB382D69 * (v7 ^ v6)) ^ ((0x9DDFEA08EB382D69 * (v7 ^ v6)) >> 47))) ^ v5;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8ne180100IOZNKS_4hashINS_7variantIJyN5boost5uuids4uuidENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEEclB8ne180100ERKSH_EUlRKT_E_JRKNS0_6__baseILNS0_6_TraitE1EJySA_SG_EEEEEEDcSL_DpT0_(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)a2;
}

unint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8ne180100IOZNKS_4hashINS_7variantIJyN5boost5uuids4uuidENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEEclB8ne180100ERKSH_EUlRKT_E_JRKNS0_6__baseILNS0_6_TraitE1EJySA_SG_EEEEEEDcSL_DpT0_(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t result;

  v2 = 0;
  result = 0;
  do
    result ^= (result << 6) + (result >> 2) + 2654435769u + *(unsigned __int8 *)(a2 + v2++);
  while (v2 != 16);
  return result;
}

unint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8ne180100IOZNKS_4hashINS_7variantIJyN5boost5uuids4uuidENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEEclB8ne180100ERKSH_EUlRKT_E_JRKNS0_6__baseILNS0_6_TraitE1EJySA_SG_EEEEEEDcSL_DpT0_(uint64_t a1, uint64_t a2)
{
  char v3;

  return std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)&v3, a2);
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<std::variant<unsigned long long,boost::uuids::uuid,std::string>,int>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::variant<unsigned long long,boost::uuids::uuid,std::string>,int>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__variant_detail::__dtor<std::__variant_detail::__traits<unsigned long long,boost::uuids::uuid,std::string>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)v2 + 16);
    operator delete(v2);
  }
}

uint64_t *std::__tree<std::variant<unsigned long long,boost::uuids::uuid,std::string>>::__emplace_unique_key_args<std::variant<unsigned long long,boost::uuids::uuid,std::string>,std::variant<unsigned long long,boost::uuids::uuid,std::string> const&>(uint64_t **a1, uint64_t a2, uint64_t a3)
{
  uint64_t **v5;
  uint64_t *v6;
  uint64_t **v7;
  uint64_t *v9[3];
  uint64_t v10;

  v5 = (uint64_t **)std::__tree<std::variant<unsigned long long,boost::uuids::uuid,std::string>>::__find_equal<std::variant<unsigned long long,boost::uuids::uuid,std::string>>((uint64_t)a1, &v10, a2);
  v6 = *v5;
  if (!*v5)
  {
    v7 = v5;
    std::__tree<std::variant<unsigned long long,boost::uuids::uuid,std::string>>::__construct_node<std::variant<unsigned long long,boost::uuids::uuid,std::string> const&>((uint64_t)a1, a3, (uint64_t)v9);
    std::__tree<CLMicroLocationRecordingCompletionMetaInformation::RecordingError>::__insert_node_at(a1, v10, v7, v9[0]);
    v6 = v9[0];
    v9[0] = 0;
    std::unique_ptr<std::__hash_node<CLMicroLocationFingerprint::Measurement,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<CLMicroLocationFingerprint::Measurement,void *>>>>::reset[abi:ne180100]((uint64_t)v9, 0);
  }
  return v6;
}

_QWORD *std::__tree<std::variant<unsigned long long,boost::uuids::uuid,std::string>>::__find_equal<std::variant<unsigned long long,boost::uuids::uuid,std::string>>(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v7;
  uint64_t v8;

  v5 = (_QWORD *)(a1 + 8);
  v4 = *(_QWORD **)(a1 + 8);
  if (v4)
  {
    do
    {
      while (1)
      {
        v7 = v4;
        v8 = (uint64_t)(v4 + 4);
        if (!std::operator<[abi:ne180100]<unsigned long long,boost::uuids::uuid,std::string>(a3, (uint64_t)(v4 + 4)))break;
        v4 = (_QWORD *)*v7;
        v5 = v7;
        if (!*v7)
          goto LABEL_9;
      }
      if (!std::operator<[abi:ne180100]<unsigned long long,boost::uuids::uuid,std::string>(v8, a3))
        break;
      v5 = v7 + 1;
      v4 = (_QWORD *)v7[1];
    }
    while (v4);
  }
  else
  {
    v7 = (_QWORD *)(a1 + 8);
  }
LABEL_9:
  *a2 = v7;
  return v5;
}

uint64_t std::__tree<std::variant<unsigned long long,boost::uuids::uuid,std::string>>::__construct_node<std::variant<unsigned long long,boost::uuids::uuid,std::string> const&>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  void *v6;
  uint64_t result;

  v5 = a1 + 8;
  v6 = operator new(0x40uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  result = std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<unsigned long long,boost::uuids::uuid,std::string>,(std::__variant_detail::_Trait)1>::__copy_constructor((uint64_t)v6 + 32, a2);
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_241B3FD5C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__hash_node<CLMicroLocationFingerprint::Measurement,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<CLMicroLocationFingerprint::Measurement,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

uint64_t std::operator<[abi:ne180100]<unsigned long long,boost::uuids::uuid,std::string>(uint64_t a1, uint64_t a2)
{
  unsigned int v2;
  uint64_t v3;
  char v5;
  char *v6;

  v2 = *(_DWORD *)(a2 + 24);
  if (v2 == -1)
    return 0;
  v3 = *(unsigned int *)(a1 + 24);
  if ((_DWORD)v3 == -1 || v3 < v2)
    return 1;
  if (v3 > v2)
    return 0;
  v6 = &v5;
  return ((uint64_t (*)(char **, uint64_t, uint64_t))off_2511DADF0[v3])(&v6, a1, a2);
}

BOOL std::__variant_detail::__visitation::__base::__dispatcher<0ul,0ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<std::__convert_to_BOOL<std::less<void>>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,unsigned long long,boost::uuids::uuid,std::string> const&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,unsigned long long,boost::uuids::uuid,std::string> const>(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  return *a2 < *a3;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul,1ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<std::__convert_to_BOOL<std::less<void>>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,unsigned long long,boost::uuids::uuid,std::string> const&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,unsigned long long,boost::uuids::uuid,std::string> const>(uint64_t a1, unint64_t *a2, unint64_t *a3)
{
  unint64_t v3;
  unint64_t v4;
  unsigned int v5;

  v3 = bswap64(*a2);
  v4 = bswap64(*a3);
  if (v3 == v4 && (v3 = bswap64(a2[1]), v4 = bswap64(a3[1]), v3 == v4))
  {
    v5 = 0;
  }
  else if (v3 < v4)
  {
    v5 = -1;
  }
  else
  {
    v5 = 1;
  }
  return v5 >> 31;
}

BOOL std::__variant_detail::__visitation::__base::__dispatcher<2ul,2ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<std::__convert_to_BOOL<std::less<void>>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,unsigned long long,boost::uuids::uuid,std::string> const&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,unsigned long long,boost::uuids::uuid,std::string> const>(uint64_t a1, const void **a2, const void **a3)
{
  char v4;

  return std::less<std::string>::operator()[abi:ne180100]((uint64_t)&v4, a2, a3);
}

void sub_241B3FF64(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_241B4005C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_241B40358(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

void ___ZL45_CLLogObjectForCategory_MicroLocation_Defaultv_block_invoke_82()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.MicroLocation", "MicroLocation");
  v1 = (void *)logObject_MicroLocation_Default;
  logObject_MicroLocation_Default = (uint64_t)v0;

}

void CLMicroLocationSemiSupervisedAlgorithm::learnSelfTrainingSemiSupervisedModel(void *a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t *a4@<X4>, __int128 **a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, _BYTE *a8@<X8>, uint64_t a9, CLMicroLocationFingerprintPool *a10, uint64_t a11, uint64_t a12)
{
  NSObject *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  double v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  int v22;
  int v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  double v28;
  double v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  NSObject *v41;
  int v42;
  __int128 *v43;
  __int128 *v44;
  uint64_t v45;
  uint64_t v46;
  NSObject *v47;
  NSObject *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  CLMicroLocationSemiSupervisedAlgorithm *isa;
  uint64_t v53;
  uint64_t v54;
  __int128 *v55;
  __int128 *v56;
  _QWORD *v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  _BOOL4 v63;
  uint64_t v64;
  uint64_t v65;
  NSObject *v67;
  _OWORD *v68;
  void *v69;
  NSObject *v70;
  _OWORD *v71;
  void *v72;
  NSObject *v73;
  const char *v74;
  const char *v75;
  uuid *v76;
  _OWORD *v77;
  void *v78;
  char *v79;
  uint8_t *v80;
  NSObject *v81;
  _OWORD *v82;
  void *v83;
  _OWORD *v84;
  void *v85;
  uint64_t v86;
  int *v87;
  NSObject *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t j;
  int *v92;
  __int128 v93;
  void **v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  unsigned int v98;
  uint64_t v99;
  uint64_t v100;
  _QWORD *v101;
  uint64_t v102;
  _QWORD *v103;
  uint64_t v104;
  const CLMicroLocationFingerprintVector *v105;
  NSObject *v106;
  uint64_t v107;
  uint64_t v108;
  int v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  _QWORD *v114;
  _QWORD *v115;
  _QWORD *v116;
  uint64_t v118;
  uint64_t k;
  NSObject *v120;
  char *v121;
  uint8_t *v122;
  NSObject *v123;
  char *v124;
  uint8_t *v125;
  char *v126;
  char *v127;
  NSObject *v128;
  _OWORD *v129;
  void *v130;
  NSObject *v131;
  _OWORD *v132;
  void *v133;
  unint64_t v134;
  uint64_t v135;
  char *v136;
  double v137;
  char *v138;
  double v139;
  unsigned int v140;
  NSObject *v141;
  char *v142;
  uint8_t *v143;
  char *v144;
  uint8_t *v145;
  _QWORD *i;
  NSObject *v148;
  char *v149;
  uint8_t *v150;
  uint64_t v151;
  uint64_t v152;
  NSObject *v153;
  uint64_t v154;
  _QWORD *v155;
  uint64_t v156;
  uint64_t v157;
  _QWORD *v158;
  uint64_t v159;
  int v160;
  CLMicroLocationCoreAnalyticsPublishHelper *v163;
  char v165;
  uint64_t v168;
  void *v170;
  __int128 v171;
  void *v172[2];
  char v173;
  _QWORD v174[2];
  _QWORD v175[2];
  uint64_t v176;
  char *v177;
  unint64_t v178;
  uint64_t v179;
  NSMutableDictionary v180;
  void *v181;
  __int128 v182;
  char v183;
  _OWORD v184[2];
  int v185;
  uint64_t v186;
  uint64_t v187;
  uint8_t v188[4];
  uint8_t v189[8];
  _BYTE v190[20];
  uint8_t v191[8];
  __int128 v192;
  id v193;
  _QWORD v194[3];
  _QWORD *v195;
  _BYTE v196[24];
  _BYTE *v197;
  uint8_t buf[8];
  __int16 v199;
  const char *v200;
  __int16 v201;
  unint64_t v202;
  __int16 v203;
  unint64_t v204;
  __int16 v205;
  unint64_t v206;
  int v207;
  __int128 v208;
  _BYTE v209[128];
  _BYTE v210[128];
  _BYTE v211[24];
  _BYTE v212[16];
  _QWORD *v213;
  void *v214;
  void *v215;
  void *v216;
  char v217;
  _QWORD v218[3];
  _QWORD *v219;
  _BYTE v220[24];
  _BYTE *v221;
  _QWORD v222[3];
  _QWORD *v223;
  _QWORD v224[2];
  _BYTE v225[40];
  uint64_t v226;
  _BYTE v227[28];
  _BYTE v228[144];
  __int128 v229;
  char v230;
  uint64_t v231;

  v231 = *MEMORY[0x24BDAC8D0];
  v224[0] = a11;
  v224[1] = a12;
  v163 = a1;
  if (onceToken_MicroLocation_Default != -1)
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_104);
  v13 = (id)logObject_MicroLocation_Default;
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
  {
    if (*(char *)(a9 + 23) >= 0)
      v14 = a9;
    else
      v14 = *(_QWORD *)a9;
    v15 = 0xEF7BDEF7BDEF7BDFLL * (((char *)a5[1] - (char *)*a5) >> 3);
    v16 = 0xEF7BDEF7BDEF7BDFLL * ((uint64_t)(*(_QWORD *)(a6 + 8) - *(_QWORD *)a6) >> 3);
    *(_DWORD *)buf = 68289794;
    *(_DWORD *)&buf[4] = 0;
    v199 = 2082;
    v200 = "";
    v201 = 2082;
    v202 = v14;
    v203 = 2050;
    v204 = v15;
    v205 = 2050;
    v206 = v16;
    _os_log_impl(&dword_2419D9000, v13, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Learning semi-supervised model with SelfTraining generation algorithm\", \"Client\":%{public, location:escape_only}s, \"Number of labeled recording triggers\":%{public}lu, \"Number of unlabeled recording triggers\":%{public}lu}", buf, 0x30u);
  }

  v17 = cl::chrono::CFAbsoluteTimeClock::now();
  +[ULDefaultsSingleton shared](ULDefaultsSingleton, "shared");
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v18, "defaultsDictionary");
  v19 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "ULSemiSupervisedMaxNumIterations");
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v19, "objectForKey:", v20);
  v21 = (void *)objc_claimAutoreleasedReturnValue();
  if (v21 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
    v22 = objc_msgSend(v21, "intValue");
  else
    v22 = objc_msgSend(&unk_2511EE1D0, "intValue");
  v23 = v22;

  +[ULDefaultsSingleton shared](ULDefaultsSingleton, "shared");
  v24 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v24, "defaultsDictionary");
  v25 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "ULSemiSupervisedStopProbabilityThreshold");
  v26 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v25, "objectForKey:", v26);
  v27 = (void *)objc_claimAutoreleasedReturnValue();
  if (v27 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
    objc_msgSend(v27, "doubleValue");
  else
    objc_msgSend(&unk_2511ED088, "doubleValue");
  v29 = v28;

  +[ULDefaultsSingleton shared](ULDefaultsSingleton, "shared");
  v30 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v30, "defaultsDictionary");
  v31 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "ULSemiSupervisedNumSelfLearningSamplesPerIteration");
  v32 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v31, "objectForKey:", v32);
  v33 = (void *)objc_claimAutoreleasedReturnValue();
  if (v33 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
    v160 = objc_msgSend(v33, "intValue");
  else
    v160 = objc_msgSend(&unk_2511EE188, "intValue");

  boost::uuids::detail::random_provider_base::random_provider_base((boost::uuids::detail::random_provider_base *)v188);
  *a8 = 0;
  a8[312] = 0;
  v222[0] = &off_2511D63B8;
  v222[1] = CLMicroLocationFingerprintConfiguration::getRecordingConfigurationFromSettings;
  v223 = v222;
  v34 = ULSettings::get<ULSettings::FingerprintDataSource>();
  std::__function::__value_func<double ()(CLMicroLocationFingerprint const&,CLMicroLocationFingerprint const&)>::__value_func[abi:ne180100]((uint64_t)v220, a3);
  v35 = (uint64_t)v223;
  if (!v223)
    goto LABEL_23;
  if (v223 != v222)
  {
    v35 = (*(uint64_t (**)(void))(*v223 + 16))();
LABEL_23:
    v219 = (_QWORD *)v35;
    goto LABEL_25;
  }
  v219 = v218;
  (*(void (**)(uint64_t, _QWORD *))(v222[0] + 24))((uint64_t)v222, v218);
LABEL_25:
  CLMicroLocationFingerprintDataSources::create(v34, (uint64_t)v220, (uint64_t)v218, (uint64_t)a5, a2, &v186);
  CLMicroLocationFingerprintVector::CLMicroLocationFingerprintVector(&v187, &v186);
  v36 = v186;
  v186 = 0;
  if (v36)
    (*(void (**)(uint64_t))(*(_QWORD *)v36 + 8))(v36);
  v37 = v219;
  if (v219 == v218)
  {
    v38 = 4;
    v37 = v218;
  }
  else
  {
    if (!v219)
      goto LABEL_32;
    v38 = 5;
  }
  (*(void (**)(void))(*v37 + 8 * v38))();
LABEL_32:
  v39 = v221;
  if (v221 == v220)
  {
    v40 = 4;
    v39 = v220;
  }
  else
  {
    if (!v221)
      goto LABEL_37;
    v40 = 5;
  }
  (*(void (**)(void))(*v39 + 8 * v40))();
LABEL_37:
  if (onceToken_MicroLocation_Default != -1)
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_104);
  v41 = (id)logObject_MicroLocation_Default;
  v42 = v23;
  if (os_log_type_enabled(v41, OS_LOG_TYPE_DEBUG))
  {
    v44 = *a5;
    v43 = a5[1];
    v45 = CLMicroLocationFingerprintVector::size((CLMicroLocationFingerprintVector *)&v187);
    *(_DWORD *)buf = 68289538;
    *(_DWORD *)&buf[4] = 0;
    v199 = 2082;
    v200 = "";
    v201 = 2050;
    v202 = 0xEF7BDEF7BDEF7BDFLL * (((char *)v43 - (char *)v44) >> 3);
    v203 = 2050;
    v204 = v45;
    _os_log_impl(&dword_2419D9000, v41, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"learnSemiSupervisedModel, labeledFingerprintVector\", \"numTriggers\":%{public}lu, \"numFPs\":%{public}lu}", buf, 0x26u);
    v23 = v42;
  }

  if (!CLMicroLocationFingerprintVector::size((CLMicroLocationFingerprintVector *)&v187))
  {
    if (onceToken_MicroLocation_Default != -1)
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_104);
    v48 = logObject_MicroLocation_Default;
    if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
    {
      if (*(char *)(a9 + 23) >= 0)
        v49 = a9;
      else
        v49 = *(_QWORD *)a9;
      *(_DWORD *)buf = 68289283;
      *(_DWORD *)&buf[4] = 0;
      v199 = 2082;
      v200 = "";
      v201 = 2081;
      v202 = v49;
      _os_log_impl(&dword_2419D9000, v48, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"learnSemiSupervisedModel, Must have valid labeled fingerprints\", \"ClientId\":%{private, location:escape_only}s}", buf, 0x1Cu);
    }
    if (v163)
      -[CLMicroLocationCoreAnalyticsPublishHelper setObject:forKeyedSubscript:](v163, "setObject:forKeyedSubscript:", MEMORY[0x24BDBD1C0], CFSTR("cancelled"));
LABEL_292:
    v154 = v187;
    v187 = 0;
    if (v154)
      (*(void (**)(uint64_t))(*(_QWORD *)v154 + 8))(v154);
    v155 = v223;
    if (v223 == v222)
    {
      v156 = 4;
      v155 = v222;
    }
    else
    {
      if (!v223)
      {
LABEL_299:
        boost::uuids::detail::random_provider_base::destroy((boost::uuids::detail::random_provider_base *)v188);

        return;
      }
      v156 = 5;
    }
    (*(void (**)(void))(*v155 + 8 * v156))();
    goto LABEL_299;
  }
  v46 = *(_QWORD *)(a3 + 24);
  if (!v46)
    std::__throw_bad_function_call[abi:ne180100]();
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v46 + 48))(v46))
  {
    if (onceToken_MicroLocation_Default != -1)
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_104);
    v47 = logObject_MicroLocation_Default;
    if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 68289026;
      *(_DWORD *)&buf[4] = 0;
      v199 = 2082;
      v200 = "";
      _os_log_impl(&dword_2419D9000, v47, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Learning semi-supervised model cancelled\"}", buf, 0x12u);
    }
    goto LABEL_292;
  }
  CLMicroLocationModel::CLMicroLocationModel((CLMicroLocationModel *)buf);
  *(_QWORD *)buf = 0x100000003;
  if ((const char **)((char *)&v200 + 6) != (const char **)a7)
  {
    v207 = *(_DWORD *)(a7 + 32);
    std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,void *> *>>((const char **)((char *)&v200 + 6), *(uint64_t **)(a7 + 16), 0);
  }
  v208 = *(_OWORD *)(a7 + 40);
  memset(v184, 0, sizeof(v184));
  v185 = 1065353216;
  *(_QWORD *)v189 = CLMicroLocationFingerprintVector::begin((CLMicroLocationFingerprintVector *)&v187);
  *(_QWORD *)v190 = v50;
  v176 = CLMicroLocationFingerprintVector::end((CLMicroLocationFingerprintVector *)&v187);
  v177 = v51;
  while (1)
  {
    isa = (CLMicroLocationSemiSupervisedAlgorithm *)CLMicroLocationFingerprintVector::Iterator::operator!=(v189, &v176);
    if ((isa & 1) == 0)
      break;
    v53 = CLMicroLocationFingerprintVector::Iterator::operator*(v189);
    v54 = v53;
    v56 = *a5;
    v55 = a5[1];
    if (*a5 == v55)
      goto LABEL_87;
    v57 = (_QWORD *)(v53 + 40);
    while (1)
    {
      v58 = *v56;
      *(_QWORD *)&v225[16] = *((_QWORD *)v56 + 2);
      *(_OWORD *)v225 = v58;
      if (*((char *)v56 + 47) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)&v225[24], *((const std::string::value_type **)v56 + 3), *((_QWORD *)v56 + 4));
      }
      else
      {
        v59 = *(__int128 *)((char *)v56 + 24);
        v226 = *((_QWORD *)v56 + 5);
        *(_OWORD *)&v225[24] = v59;
      }
      v60 = v56[3];
      *(_OWORD *)&v227[12] = *(__int128 *)((char *)v56 + 60);
      *(_OWORD *)v227 = v60;
      CLMicroLocationProto::RecordingEvent::RecordingEvent((CLMicroLocationProto::RecordingEvent *)v228, (const CLMicroLocationProto::RecordingEvent *)(v56 + 5));
      v61 = v56[14];
      v230 = *((_BYTE *)v56 + 240);
      v229 = v61;
      v63 = *(_QWORD *)v225 != *v57 || *(_QWORD *)&v225[8] != *(_QWORD *)(v54 + 48);
      CLMicroLocationProto::RecordingEvent::~RecordingEvent((CLMicroLocationProto::RecordingEvent *)v228);
      if (SHIBYTE(v226) < 0)
        operator delete(*(void **)&v225[24]);
      if (!v63)
        break;
      v56 = (__int128 *)((char *)v56 + 248);
      if (v56 == v55)
      {
        v23 = v42;
        v56 = v55;
        goto LABEL_78;
      }
    }
    v23 = v42;
LABEL_78:
    if (v56 == a5[1])
    {
LABEL_87:
      if (onceToken_MicroLocation_Default != -1)
        dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_104);
      v67 = (id)logObject_MicroLocation_Default;
      if (os_log_type_enabled(v67, OS_LOG_TYPE_ERROR))
      {
        v68 = operator new(0x28uLL);
        v181 = v68;
        v182 = xmmword_241BB2320;
        *v68 = 0u;
        v68[1] = 0u;
        *(_QWORD *)((char *)v68 + 29) = 0;
        boost::uuids::to_chars<char *>(v54 + 40, v68);
        v69 = &v181;
        if (v182 < 0)
          v69 = v181;
        *(_DWORD *)v225 = 68289282;
        *(_DWORD *)&v225[4] = 0;
        *(_WORD *)&v225[8] = 2082;
        *(_QWORD *)&v225[10] = "";
        *(_WORD *)&v225[18] = 2082;
        *(_QWORD *)&v225[20] = v69;
        _os_log_impl(&dword_2419D9000, v67, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"learnSemiSupervisedModel, labeled fingerprint, trigger not found\", \"Recording UUID\":%{public, location:escape_only}s}", v225, 0x1Cu);
        if (SHIBYTE(v182) < 0)
          operator delete(v181);
      }

      if (onceToken_MicroLocation_Default != -1)
        dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_104);
      v70 = (id)logObject_MicroLocation_Default;
      if (os_signpost_enabled(v70))
      {
        v71 = operator new(0x28uLL);
        v181 = v71;
        v182 = xmmword_241BB2320;
        *v71 = 0u;
        v71[1] = 0u;
        *(_QWORD *)((char *)v71 + 29) = 0;
        boost::uuids::to_chars<char *>(v54 + 40, v71);
        v72 = &v181;
        if (v182 < 0)
          v72 = v181;
        *(_DWORD *)v225 = 68289282;
        *(_DWORD *)&v225[4] = 0;
        *(_WORD *)&v225[8] = 2082;
        *(_QWORD *)&v225[10] = "";
        *(_WORD *)&v225[18] = 2082;
        *(_QWORD *)&v225[20] = v72;
        v73 = v70;
        v74 = "learnSemiSupervisedModel, labeled fingerprint, trigger not found";
        v75 = "{\"msg%{public}.0s\":\"learnSemiSupervisedModel, labeled fingerprint, trigger not found\", \"Recording UUI"
              "D\":%{public, location:escape_only}s}";
LABEL_124:
        _os_signpost_emit_with_name_impl(&dword_2419D9000, v73, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, v74, v75, v225, 0x1Cu);
LABEL_125:
        if (SHIBYTE(v182) < 0)
          operator delete(v181);
      }
    }
    else
    {
      v64 = *a4;
      v65 = a4[1];
      if (*a4 != v65)
      {
        while (1)
        {
          if (*((_BYTE *)v56 + 240))
          {
            if (*(_QWORD *)v64 == *((_QWORD *)v56 + 28) && *(_QWORD *)(v64 + 8) == *((_QWORD *)v56 + 29))
              break;
          }
          v64 += 64;
          if (v64 == v65)
            goto LABEL_111;
        }
      }
      if (v64 == v65)
      {
LABEL_111:
        if (onceToken_MicroLocation_Default != -1)
          dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_104);
        v81 = (id)logObject_MicroLocation_Default;
        if (os_log_type_enabled(v81, OS_LOG_TYPE_ERROR))
        {
          v82 = operator new(0x28uLL);
          v181 = v82;
          v182 = xmmword_241BB2320;
          *v82 = 0u;
          v82[1] = 0u;
          *(_QWORD *)((char *)v82 + 29) = 0;
          boost::uuids::to_chars<char *>((uint64_t)(v56 + 14), v82);
          v83 = &v181;
          if (v182 < 0)
            v83 = v181;
          *(_DWORD *)v225 = 68289282;
          *(_DWORD *)&v225[4] = 0;
          *(_WORD *)&v225[8] = 2082;
          *(_QWORD *)&v225[10] = "";
          *(_WORD *)&v225[18] = 2082;
          *(_QWORD *)&v225[20] = v83;
          _os_log_impl(&dword_2419D9000, v81, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"learnSemiSupervisedModel, labeled fingerprint, label not found\", \"Trigger UUID\":%{public, location:escape_only}s}", v225, 0x1Cu);
          if (SHIBYTE(v182) < 0)
            operator delete(v181);
        }

        if (onceToken_MicroLocation_Default != -1)
          dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_104);
        v70 = (id)logObject_MicroLocation_Default;
        if (os_signpost_enabled(v70))
        {
          v84 = operator new(0x28uLL);
          v181 = v84;
          v182 = xmmword_241BB2320;
          *v84 = 0u;
          v84[1] = 0u;
          *(_QWORD *)((char *)v84 + 29) = 0;
          boost::uuids::to_chars<char *>((uint64_t)(v56 + 14), v84);
          v85 = &v181;
          if (v182 < 0)
            v85 = v181;
          *(_DWORD *)v225 = 68289282;
          *(_DWORD *)&v225[4] = 0;
          *(_WORD *)&v225[8] = 2082;
          *(_QWORD *)&v225[10] = "";
          *(_WORD *)&v225[18] = 2082;
          *(_QWORD *)&v225[20] = v85;
          v73 = v70;
          v74 = "learnSemiSupervisedModel, labeled fingerprint, label not found";
          v75 = "{\"msg%{public}.0s\":\"learnSemiSupervisedModel, labeled fingerprint, label not found\", \"Trigger UUID\""
                ":%{public, location:escape_only}s}";
          goto LABEL_124;
        }
      }
      else
      {
        v76 = (uuid *)(v64 + 40);
        CLMicroLocationModel::addFingerprint((CLMicroLocationModel *)buf, (const CLMicroLocationFingerprint *)v54, (const uuid *)(v64 + 40), a10);
        CLMicroLocationModel::addRecording((CLMicroLocationModel *)buf, v76, (const uuid *)(v54 + 40));
        std::__hash_table<boost::uuids::uuid,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,std::allocator<boost::uuids::uuid>>::__emplace_unique_key_args<boost::uuids::uuid,boost::uuids::uuid const&>((uint64_t)v184, (_QWORD *)(v54 + 40), (_OWORD *)(v54 + 40));
        if (onceToken_MicroLocation_Default != -1)
          dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_104);
        v70 = (id)logObject_MicroLocation_Default;
        if (os_log_type_enabled(v70, OS_LOG_TYPE_DEBUG))
        {
          v77 = operator new(0x28uLL);
          v181 = v77;
          v182 = xmmword_241BB2320;
          *v77 = 0u;
          v77[1] = 0u;
          *(_QWORD *)((char *)v77 + 29) = 0;
          boost::uuids::to_chars<char *>((uint64_t)v57, v77);
          if (v182 >= 0)
            v78 = &v181;
          else
            v78 = v181;
          v79 = (char *)operator new(0x28uLL);
          *(_QWORD *)v191 = v79;
          v192 = xmmword_241BB2320;
          *(_OWORD *)v79 = 0u;
          *((_OWORD *)v79 + 1) = 0u;
          *(_QWORD *)(v79 + 29) = 0;
          boost::uuids::to_chars<char *>((uint64_t)v76, v79);
          v80 = v191;
          if (v192 < 0)
            v80 = *(uint8_t **)v191;
          *(_DWORD *)v225 = 68289538;
          *(_DWORD *)&v225[4] = 0;
          *(_WORD *)&v225[8] = 2082;
          *(_QWORD *)&v225[10] = "";
          *(_WORD *)&v225[18] = 2082;
          *(_QWORD *)&v225[20] = v78;
          *(_WORD *)&v225[28] = 2082;
          *(_QWORD *)&v225[30] = v80;
          _os_log_impl(&dword_2419D9000, v70, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"learnSemiSupervisedModel, labeled fingeprint assigned to cluster\", \"Recording UUID\":%{public, location:escape_only}s, \"Cluster UUID\":%{public, location:escape_only}s}", v225, 0x26u);
          if (SHIBYTE(v192) < 0)
            operator delete(*(void **)v191);
          goto LABEL_125;
        }
      }
    }

    CLMicroLocationFingerprintVector::Iterator::operator++((uint64_t)v189);
  }
  LOBYTE(v181) = 0;
  v183 = 0;
  if (!v23)
  {
LABEL_268:
    for (i = v213; i; i = (_QWORD *)*i)
    {
      if (onceToken_MicroLocation_Default != -1)
        dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_104);
      v148 = (id)logObject_MicroLocation_Default;
      if (os_log_type_enabled(v148, OS_LOG_TYPE_DEBUG))
      {
        v149 = (char *)operator new(0x28uLL);
        *(_QWORD *)v191 = v149;
        v192 = xmmword_241BB2320;
        *(_OWORD *)v149 = 0u;
        *((_OWORD *)v149 + 1) = 0u;
        *(_QWORD *)(v149 + 29) = 0;
        boost::uuids::to_chars<char *>((uint64_t)(i + 2), v149);
        v150 = v192 >= 0 ? v191 : *(uint8_t **)v191;
        v151 = (uint64_t)(i[5] - i[4]) >> 4;
        *(_DWORD *)v225 = 68289538;
        *(_DWORD *)&v225[4] = 0;
        *(_WORD *)&v225[8] = 2082;
        *(_QWORD *)&v225[10] = "";
        *(_WORD *)&v225[18] = 2082;
        *(_QWORD *)&v225[20] = v150;
        *(_WORD *)&v225[28] = 2050;
        *(_QWORD *)&v225[30] = v151;
        _os_log_impl(&dword_2419D9000, v148, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Pre-Pruning Model\", \"ClusterId\":%{public, location:escape_only}s, \"numFPs\":%{public}lu}", v225, 0x26u);
        if (SHIBYTE(v192) < 0)
          operator delete(*(void **)v191);
      }

    }
    CLMicroLocationSemiSupervisedAlgorithm::pruneNonRepresentativeFingerprints(isa, (CLMicroLocationModel *)buf, a10);
    CLMicroLocationSemiSupervisedAlgorithm::convertModelToProtobufAndLogModel((uint64_t **)buf, (void **)a9, (uint64_t)v225);
    CLMicroLocationCoreAnalyticsPublishHelper::updateLearnEventSummary(v163, (CLMicroLocationModel *)buf, (const CLMicroLocationModel *)v225, v17);
    if (CLMicroLocationModel::isValid((CLMicroLocationModel *)buf))
    {
      *(_QWORD *)v191 = boost::uuids::random_generator_pure::operator()((uint64_t)v188);
      *(_QWORD *)&v192 = v152;
      *(_QWORD *)v189 = cl::chrono::CFAbsoluteTimeClock::now();
      std::__optional_destruct_base<CLMicroLocationModelTable::Entry,false>::reset[abi:ne180100]((uint64_t)a8);
      std::__construct_at[abi:ne180100]<CLMicroLocationModelTable::Entry,boost::uuids::uuid,std::chrono::time_point<cl::chrono::CFAbsoluteTimeClock,std::chrono::duration<long double,std::ratio<1l,1l>>>,CLMicroLocationProto::Model,std::string const&,boost::uuids::uuid const&,boost::uuids::uuid&,CLMicroLocationModelTable::Entry*>((uint64_t)a8, (uint64_t *)v191, (double *)v189, (uint64_t)v225, a9, (__int128 *)(a9 + 24), v224);
      a8[312] = 1;
    }
    else
    {
      if (onceToken_MicroLocation_Default != -1)
        dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_104);
      v153 = (id)logObject_MicroLocation_Default;
      if (os_log_type_enabled(v153, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)v191 = 68289026;
        *(_DWORD *)&v191[4] = 0;
        LOWORD(v192) = 2082;
        *(_QWORD *)((char *)&v192 + 2) = "";
        _os_log_impl(&dword_2419D9000, v153, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"learnSemiSupervisedModel, invalid semi-supervised model, not created\"}", v191, 0x12u);
      }

    }
    CLMicroLocationProto::Model::~Model((CLMicroLocationProto::Model *)v225);
    if (v183)
      CLMicroLocationProto::AssociatedAccessPointInfo::~AssociatedAccessPointInfo((CLMicroLocationProto::AssociatedAccessPointInfo *)&v181);
    std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>>>::~__hash_table((uint64_t)v184);
    if (v217 < 0)
      operator delete(v216);
    if (v214)
    {
      v215 = v214;
      operator delete(v214);
    }
    std::__hash_table<std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>>>::~__hash_table((uint64_t)v212);
    *(_QWORD *)v225 = v211;
    std::vector<std::pair<std::shared_ptr<CLMicroLocationFingerprint>,boost::uuids::uuid>>::__destroy_vector::operator()[abi:ne180100]((void ***)v225);
    std::__optional_destruct_base<CLMicroLocationModel::BlueAtlasData,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)v210);
    std::__optional_destruct_base<CLMicroLocationModel::SimilarityListData,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)v209);
    std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>>>::~__hash_table((uint64_t)&v200 + 6);
    goto LABEL_292;
  }
  v165 = 0;
  v86 = 0;
  v168 = v23;
  v87 = &dword_2419D9000;
  while (1)
  {
    if (onceToken_MicroLocation_Default != -1)
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_104);
    v88 = (id)logObject_MicroLocation_Default;
    if (os_log_type_enabled(v88, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)v225 = 68289282;
      *(_DWORD *)&v225[4] = 0;
      *(_WORD *)&v225[8] = 2082;
      *(_QWORD *)&v225[10] = "";
      *(_WORD *)&v225[18] = 2050;
      *(_QWORD *)&v225[20] = v86;
      _os_log_impl(v87, v88, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"learnSemiSupervisedModel, started iteration of self learning\", \"iteration number\":%{public}lu}", v225, 0x1Cu);
    }

    v89 = *(_QWORD *)a6;
    v90 = *(_QWORD *)(a6 + 8);
    if (*(_QWORD *)a6 != v90)
    {
      while (!std::__hash_table<std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>>>::find<boost::uuids::uuid>(v184, (_QWORD *)v89))
      {
        v89 += 248;
        if (v89 == v90)
        {
          v89 = v90;
          goto LABEL_146;
        }
      }
      if (v89 != v90)
      {
        for (j = v89 + 248; j != v90; j += 248)
        {
          if (!std::__hash_table<std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>>>::find<boost::uuids::uuid>(v184, (_QWORD *)j))
          {
            v92 = v87;
            v93 = *(_OWORD *)j;
            *(_QWORD *)(v89 + 16) = *(_QWORD *)(j + 16);
            *(_OWORD *)v89 = v93;
            v94 = (void **)(v89 + 24);
            if (*(char *)(v89 + 47) < 0)
              operator delete(*v94);
            v95 = *(_OWORD *)(j + 24);
            *(_QWORD *)(v89 + 40) = *(_QWORD *)(j + 40);
            *(_OWORD *)v94 = v95;
            *(_BYTE *)(j + 47) = 0;
            *(_BYTE *)(j + 24) = 0;
            v96 = *(_OWORD *)(j + 48);
            *(_OWORD *)(v89 + 60) = *(_OWORD *)(j + 60);
            *(_OWORD *)(v89 + 48) = v96;
            CLMicroLocationProto::RecordingEvent::CopyFrom((CLMicroLocationProto::RecordingEvent *)(v89 + 80), (const CLMicroLocationProto::RecordingEvent *)(j + 80));
            v97 = *(_OWORD *)(j + 224);
            *(_BYTE *)(v89 + 240) = *(_BYTE *)(j + 240);
            *(_OWORD *)(v89 + 224) = v97;
            v89 += 248;
            v87 = v92;
          }
        }
      }
    }
LABEL_146:
    std::vector<CLMicroLocationRecordingEventsTable::Entry>::erase(a6, v89, *(__int128 **)(a6 + 8));
    v98 = ULSettings::get<ULSettings::FingerprintDataSource>();
    std::__function::__value_func<double ()(CLMicroLocationFingerprint const&,CLMicroLocationFingerprint const&)>::__value_func[abi:ne180100]((uint64_t)v196, a3);
    v99 = (uint64_t)v223;
    if (!v223)
      goto LABEL_149;
    if (v223 != v222)
    {
      v99 = (*(uint64_t (**)(void))(*v223 + 16))();
LABEL_149:
      v195 = (_QWORD *)v99;
      goto LABEL_151;
    }
    v195 = v194;
    (*(void (**)(uint64_t, _QWORD *))(v222[0] + 24))((uint64_t)v222, v194);
LABEL_151:
    CLMicroLocationFingerprintDataSources::create(v98, (uint64_t)v196, (uint64_t)v194, a6, a2, &v179);
    CLMicroLocationFingerprintVector::CLMicroLocationFingerprintVector(&v180, &v179);
    v100 = v179;
    v179 = 0;
    if (v100)
      (*(void (**)(uint64_t))(*(_QWORD *)v100 + 8))(v100);
    v101 = v195;
    if (v195 == v194)
    {
      v101 = v194;
      v102 = 4;
    }
    else
    {
      if (!v195)
        goto LABEL_158;
      v102 = 5;
    }
    (*(void (**)(void))(*v101 + 8 * v102))();
LABEL_158:
    v103 = v197;
    if (v197 == v196)
    {
      v103 = v196;
      v104 = 4;
    }
    else
    {
      if (!v197)
        goto LABEL_163;
      v104 = 5;
    }
    (*(void (**)(void))(*v103 + 8 * v104))();
LABEL_163:
    if (!v86)
    {
      CLMicroLocationCoreAnalyticsPublishHelper::updateModelRfCharacteristics(v163, (CLMicroLocationFingerprintVector *)&v180, (CLMicroLocationFingerprintVector *)&v187, 1u, v17);
      CLMicroLocationCoreAnalyticsPublishHelper::updateSemiSupervisedLabeledAndUnlabeledFingerprints(v163, &v180, (const CLMicroLocationFingerprintVector *)&v187, v105);
    }
    if (onceToken_MicroLocation_Default != -1)
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_104);
    v106 = (id)logObject_MicroLocation_Default;
    if (os_log_type_enabled(v106, OS_LOG_TYPE_DEBUG))
    {
      v107 = CLMicroLocationFingerprintVector::size((CLMicroLocationFingerprintVector *)&v180);
      *(_DWORD *)v225 = 68289538;
      *(_DWORD *)&v225[4] = 0;
      *(_WORD *)&v225[8] = 2082;
      *(_QWORD *)&v225[10] = "";
      *(_WORD *)&v225[18] = 2050;
      *(_QWORD *)&v225[20] = v86;
      *(_WORD *)&v225[28] = 2050;
      *(_QWORD *)&v225[30] = v107;
      _os_log_impl(v87, v106, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"learnSemiSupervisedModel, unLabeledFingerprintVector\", \"iteration\":%{public}lu, \"numFPs\":%{public}lu}", v225, 0x26u);
    }

    v108 = *(_QWORD *)(a3 + 24);
    if (!v108)
      std::__throw_bad_function_call[abi:ne180100]();
    if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v108 + 48))(v108) & 1) != 0)
    {
      v109 = 1;
      v165 = 1;
      goto LABEL_262;
    }
    if (!CLMicroLocationFingerprintVector::size((CLMicroLocationFingerprintVector *)&v180))
    {
      v109 = 18;
      goto LABEL_262;
    }
    v176 = 0;
    v177 = 0;
    v178 = 0;
    v175[0] = CLMicroLocationFingerprintVector::begin((CLMicroLocationFingerprintVector *)&v180);
    v175[1] = v110;
    v174[0] = CLMicroLocationFingerprintVector::end((CLMicroLocationFingerprintVector *)&v180);
    v174[1] = v111;
    while (CLMicroLocationFingerprintVector::Iterator::operator!=(v175, v174))
    {
      v112 = CLMicroLocationFingerprintVector::Iterator::operator*(v175);
      v113 = v112;
      v114 = *(_QWORD **)a6;
      v115 = *(_QWORD **)(a6 + 8);
      v116 = (_QWORD *)(v112 + 40);
      if (*(_QWORD **)a6 != v115)
      {
        while (*v114 != *v116 || v114[1] != *(_QWORD *)(v112 + 48))
        {
          v114 += 31;
          if (v114 == v115)
            goto LABEL_190;
        }
      }
      if (v114 == v115)
      {
LABEL_190:
        if (onceToken_MicroLocation_Default != -1)
          dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_104);
        v120 = (id)logObject_MicroLocation_Default;
        if (os_log_type_enabled(v120, OS_LOG_TYPE_ERROR))
        {
          v121 = (char *)operator new(0x28uLL);
          *(_QWORD *)v191 = v121;
          v192 = xmmword_241BB2320;
          *(_OWORD *)v121 = 0u;
          *((_OWORD *)v121 + 1) = 0u;
          *(_QWORD *)(v121 + 29) = 0;
          boost::uuids::to_chars<char *>((uint64_t)v116, v121);
          v122 = v191;
          if (v192 < 0)
            v122 = *(uint8_t **)v191;
          *(_DWORD *)v225 = 68289282;
          *(_DWORD *)&v225[4] = 0;
          *(_WORD *)&v225[8] = 2082;
          *(_QWORD *)&v225[10] = "";
          *(_WORD *)&v225[18] = 2082;
          *(_QWORD *)&v225[20] = v122;
          _os_log_impl(v87, v120, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"didn't find recording event matching to fingerprint\", \"RecordingUUID\":%{public, location:escape_only}s}", v225, 0x1Cu);
          if (SHIBYTE(v192) < 0)
            operator delete(*(void **)v191);
        }

        if (onceToken_MicroLocation_Default != -1)
          dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_104);
        v123 = (id)logObject_MicroLocation_Default;
        if (os_signpost_enabled(v123))
        {
          v124 = (char *)operator new(0x28uLL);
          *(_QWORD *)v191 = v124;
          v192 = xmmword_241BB2320;
          *(_OWORD *)v124 = 0u;
          *((_OWORD *)v124 + 1) = 0u;
          *(_QWORD *)(v124 + 29) = 0;
          boost::uuids::to_chars<char *>((uint64_t)v116, v124);
          v125 = v191;
          if (v192 < 0)
            v125 = *(uint8_t **)v191;
          *(_DWORD *)v225 = 68289282;
          *(_DWORD *)&v225[4] = 0;
          *(_WORD *)&v225[8] = 2082;
          *(_QWORD *)&v225[10] = "";
          *(_WORD *)&v225[18] = 2082;
          *(_QWORD *)&v225[20] = v125;
          _os_signpost_emit_with_name_impl(v87, v123, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "didn't find recording event matching to fingerprint", "{\"msg%{public}.0s\":\"didn't find recording event matching to fingerprint\", \"RecordingUUID\":%{public, location:escape_only}s}", v225, 0x1Cu);
          if (SHIBYTE(v192) < 0)
            operator delete(*(void **)v191);
        }

      }
      else
      {
        CLMicroLocationProtobufHelper::ModelTypeToDomain(*(int *)&buf[4], v172);
        CLMicroLocationLocalizationSettings::CLMicroLocationLocalizationSettings((uint64_t)v191, v172, 3u);
        CLMicroLocationLocalizer::localize((const CLMicroLocationProto::AssociatedAccessPointInfo *)&v181, (uint64_t)buf, v113, (CLMicroLocationLocalizationSettings *)v191, 0, 1, (uint64_t)v225);
        v118 = *(_QWORD *)v225;
        if (*(_QWORD *)v225 == *(_QWORD *)&v225[8])
        {
          if (onceToken_MicroLocation_Default != -1)
            dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_104);
          v128 = (id)logObject_MicroLocation_Default;
          if (os_log_type_enabled(v128, OS_LOG_TYPE_ERROR))
          {
            v129 = operator new(0x28uLL);
            v170 = v129;
            v171 = xmmword_241BB2320;
            *v129 = 0u;
            v129[1] = 0u;
            *(_QWORD *)((char *)v129 + 29) = 0;
            boost::uuids::to_chars<char *>((uint64_t)v116, v129);
            v130 = &v170;
            if (v171 < 0)
              v130 = v170;
            *(_DWORD *)v189 = 68289282;
            *(_DWORD *)&v189[4] = 0;
            *(_WORD *)v190 = 2082;
            *(_QWORD *)&v190[2] = "";
            *(_WORD *)&v190[10] = 2082;
            *(_QWORD *)&v190[12] = v130;
            _os_log_impl(v87, v128, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"Localizer returned empty results when learning semi-supervised model\", \"RecordingUUID\":%{public, location:escape_only}s}", v189, 0x1Cu);
            if (SHIBYTE(v171) < 0)
              operator delete(v170);
          }

          if (onceToken_MicroLocation_Default != -1)
            dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_104);
          v131 = (id)logObject_MicroLocation_Default;
          if (os_signpost_enabled(v131))
          {
            v132 = operator new(0x28uLL);
            v170 = v132;
            v171 = xmmword_241BB2320;
            *v132 = 0u;
            v132[1] = 0u;
            *(_QWORD *)((char *)v132 + 29) = 0;
            boost::uuids::to_chars<char *>((uint64_t)v116, v132);
            v133 = &v170;
            if (v171 < 0)
              v133 = v170;
            *(_DWORD *)v189 = 68289282;
            *(_DWORD *)&v189[4] = 0;
            *(_WORD *)v190 = 2082;
            *(_QWORD *)&v190[2] = "";
            *(_WORD *)&v190[10] = 2082;
            *(_QWORD *)&v190[12] = v133;
            _os_signpost_emit_with_name_impl(v87, v131, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Localizer returned empty results when learning semi-supervised model", "{\"msg%{public}.0s\":\"Localizer returned empty results when learning semi-supervised model\", \"RecordingUUID\":%{public, location:escape_only}s}", v189, 0x1Cu);
            if (SHIBYTE(v171) < 0)
              operator delete(v170);
          }

        }
        else
        {
          for (k = *(_QWORD *)v225 + 32; k != *(_QWORD *)&v225[8]; k += 32)
          {
            if (*(double *)(v118 + 16) < *(double *)(k + 16) || *(_OWORD *)v118 == 0)
              v118 = k;
          }
          if (*(_OWORD *)v118 != 0)
          {
            v126 = v177;
            if ((unint64_t)v177 >= v178)
            {
              v127 = (char *)std::vector<std::pair<CLMicroLocationFingerprint,CLMicroLocationResultInternal>>::__emplace_back_slow_path<CLMicroLocationFingerprint const&,CLMicroLocationResultInternal&>(&v176, v113, (_OWORD *)v118);
            }
            else
            {
              std::pair<CLMicroLocationFingerprint,CLMicroLocationResultInternal>::pair[abi:ne180100]<CLMicroLocationFingerprint const&,CLMicroLocationResultInternal&,0>((uint64_t)v177, v113, (_OWORD *)v118);
              v127 = v126 + 224;
            }
            v177 = v127;
          }
        }
        if (v228[0] && *(_QWORD *)&v227[8])
        {
          *(_QWORD *)&v227[16] = *(_QWORD *)&v227[8];
          operator delete(*(void **)&v227[8]);
        }
        if (*(_QWORD *)&v225[32])
        {
          v226 = *(_QWORD *)&v225[32];
          operator delete(*(void **)&v225[32]);
        }
        if (*(_QWORD *)v225)
        {
          *(_QWORD *)&v225[8] = *(_QWORD *)v225;
          operator delete(*(void **)v225);
        }

        std::__tree<std::__value_type<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,double>,std::__map_value_compare<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,std::__value_type<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,double>,std::less<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes>,true>,std::allocator<std::__value_type<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,double>>>::destroy((uint64_t)v191, (_QWORD *)v192);
        if (v173 < 0)
          operator delete(v172[0]);
      }
      CLMicroLocationFingerprintVector::Iterator::operator++((uint64_t)v175);
    }
    v134 = 126 - 2 * __clz(0x6DB6DB6DB6DB6DB7 * ((uint64_t)&v177[-v176] >> 5));
    v135 = v177 == (char *)v176 ? 0 : v134;
    std::__introsort<std::_ClassicAlgPolicy,CLMicroLocationSemiSupervisedAlgorithm::learnSelfTrainingSemiSupervisedModel(NSMutableDictionary *,ULDatabase &,std::function<BOOL ()(void)>,std::vector<CLMicroLocationRecordingLabelsTable::Entry> &,std::vector<CLMicroLocationRecordingEventsTable::Entry> &,std::vector<CLMicroLocationRecordingEventsTable::Entry> &,CLMicroLocationAnchorAppearanceMap const&,CLMicroLocationClientUtils::ClientIdAndClientServiceId const&,CLMicroLocationFingerprintPool &,boost::uuids::uuid)::$_5 &,std::pair<CLMicroLocationFingerprint,CLMicroLocationResultInternal> *,false>(v176, v177, v135, 1);
    v136 = v177;
    v137 = 0.0;
    if ((char *)v176 != v177 && v160 >= 1)
      break;
LABEL_257:
    if (v137 >= v29)
      v109 = 0;
    else
      v109 = 18;
    *(_QWORD *)v225 = &v176;
    std::vector<std::pair<CLMicroLocationFingerprint,CLMicroLocationResultInternal>>::__destroy_vector::operator()[abi:ne180100]((void ***)v225);
LABEL_262:
    isa = v180.super.super.isa;
    v180.super.super.isa = 0;
    if (isa)
      isa = (CLMicroLocationSemiSupervisedAlgorithm *)(*(uint64_t (**)(CLMicroLocationSemiSupervisedAlgorithm *))(*(_QWORD *)isa + 8))(isa);
    if (v109)
    {
      if (v109 == 18)
        goto LABEL_268;
      if (v183)
        CLMicroLocationProto::AssociatedAccessPointInfo::~AssociatedAccessPointInfo((CLMicroLocationProto::AssociatedAccessPointInfo *)&v181);
      std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>>>::~__hash_table((uint64_t)v184);
      if (v217 < 0)
        operator delete(v216);
      if (v214)
      {
        v215 = v214;
        operator delete(v214);
      }
      std::__hash_table<std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>>>::~__hash_table((uint64_t)v212);
      *(_QWORD *)v225 = v211;
      std::vector<std::pair<std::shared_ptr<CLMicroLocationFingerprint>,boost::uuids::uuid>>::__destroy_vector::operator()[abi:ne180100]((void ***)v225);
      std::__optional_destruct_base<CLMicroLocationModel::BlueAtlasData,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)v210);
      std::__optional_destruct_base<CLMicroLocationModel::SimilarityListData,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)v209);
      std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>>>::~__hash_table((uint64_t)&v200 + 6);
      v157 = v187;
      v187 = 0;
      if (v157)
        (*(void (**)(uint64_t))(*(_QWORD *)v157 + 8))(v157);
      v158 = v223;
      if (v223 == v222)
      {
        v159 = 4;
        v158 = v222;
      }
      else
      {
        if (!v223)
          goto LABEL_313;
        v159 = 5;
      }
      (*(void (**)(void))(*v158 + 8 * v159))();
LABEL_313:
      if ((v165 & 1) == 0)
        std::__optional_destruct_base<CLMicroLocationModelTable::Entry,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)a8);
      goto LABEL_299;
    }
    if (++v86 == v168)
      goto LABEL_268;
  }
  v138 = (char *)(v176 + 224);
  v139 = 0.0;
  v140 = v160;
  while (1)
  {
    CLMicroLocationModel::addFingerprint((CLMicroLocationModel *)buf, (const CLMicroLocationFingerprint *)(v138 - 224), (const uuid *)v138 - 2, a10);
    CLMicroLocationModel::addRecording((CLMicroLocationModel *)buf, (uuid *)v138 - 2, (const uuid *)(v138 - 184));
    std::__hash_table<boost::uuids::uuid,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,std::allocator<boost::uuids::uuid>>::__emplace_unique_key_args<boost::uuids::uuid,boost::uuids::uuid const&>((uint64_t)v184, (_QWORD *)v138 - 23, v138 - 184);
    if (onceToken_MicroLocation_Default != -1)
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_104);
    v141 = (id)logObject_MicroLocation_Default;
    if (os_log_type_enabled(v141, OS_LOG_TYPE_DEBUG))
    {
      v142 = (char *)operator new(0x28uLL);
      *(_QWORD *)v191 = v142;
      v192 = xmmword_241BB2320;
      *(_OWORD *)v142 = 0u;
      *((_OWORD *)v142 + 1) = 0u;
      *(_QWORD *)(v142 + 29) = 0;
      boost::uuids::to_chars<char *>((uint64_t)(v138 - 184), v142);
      if (v192 >= 0)
        v143 = v191;
      else
        v143 = *(uint8_t **)v191;
      v144 = (char *)operator new(0x28uLL);
      *(_QWORD *)v189 = v144;
      *(_OWORD *)v190 = xmmword_241BB2320;
      *(_OWORD *)v144 = 0u;
      *((_OWORD *)v144 + 1) = 0u;
      *(_QWORD *)(v144 + 29) = 0;
      boost::uuids::to_chars<char *>((uint64_t)(v138 - 32), v144);
      v145 = v189;
      if (v190[15] < 0)
        v145 = *(uint8_t **)v189;
      *(_DWORD *)v225 = 68289538;
      *(_DWORD *)&v225[4] = 0;
      *(_WORD *)&v225[8] = 2082;
      *(_QWORD *)&v225[10] = "";
      *(_WORD *)&v225[18] = 2082;
      *(_QWORD *)&v225[20] = v143;
      *(_WORD *)&v225[28] = 2082;
      *(_QWORD *)&v225[30] = v145;
      _os_log_impl(v87, v141, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"learnSemiSupervisedModel, unlabeled fingeprint assigned to cluster\", \"Recording UUID\":%{public, location:escape_only}s, \"Cluster UUID\":%{public, location:escape_only}s}", v225, 0x26u);
      if ((v190[15] & 0x80000000) != 0)
        operator delete(*(void **)v189);
      if (SHIBYTE(v192) < 0)
        operator delete(*(void **)v191);
    }

    v137 = *((double *)v138 - 2);
    if (v139 != 0.0 && v137 > v139)
      break;
    if (v138 != v136)
    {
      v138 += 224;
      v139 = v137;
      if (v140-- >= 2)
        continue;
    }
    goto LABEL_257;
  }
  CLMicroLocationSemiSupervisedAlgorithm::learnSelfTrainingSemiSupervisedModel((NSObject **)v225);

  abort_report_np();
  __break(1u);
}

void sub_241B42200(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,void *__p,uint64_t a47,uint64_t a48,uint64_t a49,char a50,int a51,__int16 a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,int a59,char a60)
{
  uint64_t v61;
  unint64_t *v62;
  uint64_t v63;

  CLMicroLocationProto::Model::~Model((CLMicroLocationProto::Model *)&STACK[0x450]);
  if (a50)
    CLMicroLocationProto::AssociatedAccessPointInfo::~AssociatedAccessPointInfo((CLMicroLocationProto::AssociatedAccessPointInfo *)&__p);
  std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>>>::~__hash_table((uint64_t)&a52);
  CLMicroLocationModel::~CLMicroLocationModel((void **)&STACK[0x220]);
  v61 = a58;
  a58 = 0;
  if (v61)
    (*(void (**)(uint64_t))(*(_QWORD *)v61 + 8))(v61);
  v62 = (unint64_t *)STACK[0x438];
  if ((unint64_t *)STACK[0x438] == &STACK[0x420])
  {
    v63 = 4;
    v62 = &STACK[0x420];
  }
  else
  {
    if (!v62)
      goto LABEL_10;
    v63 = 5;
  }
  (*(void (**)(void))(*v62 + 8 * v63))();
LABEL_10:
  std::__optional_destruct_base<CLMicroLocationModelTable::Entry,false>::~__optional_destruct_base[abi:ne180100](a16);
  boost::uuids::detail::random_provider_base::destroy((boost::uuids::detail::random_provider_base *)&a60);

  _Unwind_Resume(a1);
}

uint64_t ULSettings::get<ULSettings::FingerprintDataSource>()
{
  void *v0;
  void *v1;
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;

  +[ULDefaultsSingleton shared](ULDefaultsSingleton, "shared");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "defaultsDictionary");
  v1 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "ULFingerprintDataSource");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "objectForKey:", v2);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  if (v3 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
    v4 = objc_msgSend(v3, "unsignedIntValue");
  else
    v4 = objc_msgSend(&unk_2511EE1B8, "unsignedIntValue");
  v5 = v4;

  return v5;
}

void sub_241B42838(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void CLMicroLocationSemiSupervisedAlgorithm::pruneNonRepresentativeFingerprints(CLMicroLocationSemiSupervisedAlgorithm *this, CLMicroLocationModel *a2, CLMicroLocationFingerprintPool *a3)
{
  int v4;
  char v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  unsigned int v10;
  unsigned int v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  double v16;
  double v17;
  uint64_t v18;
  uint64_t i;
  uint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  unint64_t ClusterLabels;
  _QWORD *v33;
  _QWORD *v34;
  uint64_t v35;
  unint64_t v36;
  _QWORD *v37;
  unint64_t v38;
  uint64_t v39;
  NSObject *v40;
  _OWORD *v41;
  void *v42;
  uint64_t j;
  uint64_t v44;
  const uuid *v45;
  const uuid *v46;
  const uuid *v47;
  _QWORD *v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  void *v52;
  void *v54;
  __int128 v55;
  void *v56;
  _QWORD *v57;
  void *v58;
  _BYTE *v59;
  uint64_t v60;
  void *v61[3];
  _OWORD *v62[2];
  _QWORD *v63;
  const uuid *v64;
  unint64_t v65;
  unint64_t v66;
  _OWORD v67[2];
  int v68;
  __int128 v69;
  char v70;
  uint8_t buf[8];
  _BYTE __p[20];
  __int16 v73;
  unint64_t v74;
  _BYTE v75[24];
  _BYTE *v76;
  _BYTE v77[24];
  _BYTE *v78;
  _QWORD v79[3];
  _QWORD *v80;
  _QWORD v81[3];
  _QWORD *v82;
  uint64_t v83;

  v83 = *MEMORY[0x24BDAC8D0];
  v4 = ULSettings::get<ULSettings::FingerprintDistanceFunctionType>();
  ULSettings::getFingerprintDistanceFunctionParamsForType(v4);
  v52 = (void *)objc_claimAutoreleasedReturnValue();
  if (ULSettings::get<ULSettings::AdaptiveAnchorsEnable>())
  {
    std::unordered_map<boost::uuids::uuid,CLMicroLocationAnchorAppearance>::unordered_map((uint64_t)v67, (uint64_t)a2 + 16);
    v69 = *(_OWORD *)((char *)a2 + 56);
    v5 = 1;
  }
  else
  {
    v5 = 0;
    LOBYTE(v67[0]) = 0;
  }
  v70 = v5;
  CLMicroLocationAlgorithms::createLearnFingerprintDistanceFunction(v4, v52);
  if (v70)
    std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>>>::~__hash_table((uint64_t)v67);
  +[ULDefaultsSingleton shared](ULDefaultsSingleton, "shared");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "defaultsDictionary");
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "ULLinkageFunction");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "objectForKey:", v8);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  if (v9 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
    v10 = objc_msgSend(v9, "unsignedIntValue");
  else
    v10 = objc_msgSend(&unk_2511EE1B8, "unsignedIntValue");
  v11 = v10;

  CLMicroLocationAlgorithms::createLinkageFunction(v11, v79);
  +[ULDefaultsSingleton shared](ULDefaultsSingleton, "shared");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v12, "defaultsDictionary");
  v13 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "ULPruneDistanceThresholdSemiSupervised");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v13, "objectForKey:", v14);
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  if (v15 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
    objc_msgSend(v15, "doubleValue");
  else
    objc_msgSend(&unk_2511ED098, "doubleValue");
  v17 = v16;

  v64 = 0;
  v65 = 0;
  v66 = 0;
  memset(v67, 0, sizeof(v67));
  v68 = 1065353216;
  v18 = *((_QWORD *)a2 + 41);
  for (i = *((_QWORD *)a2 + 42); v18 != i; v18 += 32)
  {
    v62[0] = (_OWORD *)(v18 + 16);
    v20 = std::__hash_table<std::__hash_value_type<boost::uuids::uuid,std::vector<CLMicroLocationFingerprint>>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::vector<CLMicroLocationFingerprint>>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::vector<CLMicroLocationFingerprint>>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,std::vector<CLMicroLocationFingerprint>>>>::__emplace_unique_key_args<boost::uuids::uuid,std::piecewise_construct_t const&,std::tuple<boost::uuids::uuid const&>,std::tuple<>>((uint64_t)v67, (_QWORD *)(v18 + 16), (uint64_t)&std::piecewise_construct, v62);
    v21 = v20[5];
    if (v21 >= v20[6])
    {
      v22 = std::vector<CLMicroLocationFingerprint>::__push_back_slow_path<CLMicroLocationFingerprint const&>(v20 + 4, *(_QWORD *)v18);
    }
    else
    {
      std::allocator<CLMicroLocationFingerprint>::construct[abi:ne180100]<CLMicroLocationFingerprint,CLMicroLocationFingerprint const&>((uint64_t)(v20 + 6), v21, *(_QWORD *)v18);
      v22 = v21 + 192;
      v20[5] = v21 + 192;
    }
    v20[5] = v22;
  }
  CLMicroLocationModel::getIdentifiers(a2, (uint64_t)v62);
  v23 = v63;
  if (v63)
  {
    while (1)
    {
      *(_QWORD *)buf = v23 + 2;
      v24 = std::__hash_table<std::__hash_value_type<boost::uuids::uuid,std::vector<CLMicroLocationFingerprint>>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::vector<CLMicroLocationFingerprint>>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::vector<CLMicroLocationFingerprint>>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,std::vector<CLMicroLocationFingerprint>>>>::__emplace_unique_key_args<boost::uuids::uuid,std::piecewise_construct_t const&,std::tuple<boost::uuids::uuid const&>,std::tuple<>>((uint64_t)v67, v23 + 2, (uint64_t)&std::piecewise_construct, (_OWORD **)buf);
      v25 = (uint64_t)v82;
      if (!v82)
        goto LABEL_23;
      if (v82 != v81)
        break;
      v78 = v77;
      (*(void (**)(_QWORD *, _BYTE *))(v81[0] + 24))(v81, v77);
LABEL_25:
      v26 = v24 + 4;
      CLDistanceMatrixTemplate<CLSymmetricMatrixStorage<float>>::CLDistanceMatrixTemplate<std::vector<CLMicroLocationFingerprint>,std::function<double ()(CLMicroLocationFingerprint const&,CLMicroLocationFingerprint const&)>>((unint64_t *)buf, v24 + 4, (uint64_t)v77);
      v27 = (uint64_t)v80;
      if (!v80)
        goto LABEL_28;
      if (v80 != v79)
      {
        v27 = (*(uint64_t (**)(_QWORD *))(*v80 + 16))(v80);
LABEL_28:
        v76 = (_BYTE *)v27;
        goto LABEL_30;
      }
      v76 = v75;
      (*(void (**)(_QWORD *, _BYTE *))(v79[0] + 24))(v79, v75);
LABEL_30:
      CLHierarchicalClustering::CLHierarchicalClustering(v61, buf, v75);
      v28 = v76;
      if (v76 == v75)
      {
        v28 = v75;
        v29 = 4;
      }
      else
      {
        if (!v76)
          goto LABEL_35;
        v29 = 5;
      }
      (*(void (**)(void))(*v28 + 8 * v29))();
LABEL_35:
      if (*(_QWORD *)__p)
      {
        *(_QWORD *)&__p[8] = *(_QWORD *)__p;
        operator delete(*(void **)__p);
      }
      v30 = v78;
      if (v78 == v77)
      {
        v30 = v77;
        v31 = 4;
        goto LABEL_41;
      }
      if (v78)
      {
        v31 = 5;
LABEL_41:
        (*(void (**)(void))(*v30 + 8 * v31))();
      }
      v58 = 0;
      v59 = 0;
      v60 = 0;
      ClusterLabels = CLHierarchicalClustering::getClusterLabels((uint64_t *)v61, &v58, 0, v17, 0.0);
      *(_QWORD *)buf = 0;
      std::vector<unsigned long>::vector(&v56, ClusterLabels, buf);
      v33 = v58;
      v34 = v56;
      if (v59 != v58)
      {
        v35 = 0;
        v36 = (v59 - (_BYTE *)v58) >> 3;
        if (v36 <= 1)
          v36 = 1;
        do
        {
          v34[v33[v35]] = v35;
          ++v35;
        }
        while (v36 != v35);
      }
      v37 = v57;
      if (v34 != v57)
      {
        v38 = v65;
        do
        {
          v39 = *v26 + 192 * *v34;
          if (v38 >= v66)
          {
            v38 = std::vector<std::pair<CLMicroLocationFingerprint,boost::uuids::uuid>>::__emplace_back_slow_path<CLMicroLocationFingerprint&,boost::uuids::uuid const&>((uint64_t *)&v64, v39, (_OWORD *)v23 + 1);
          }
          else
          {
            std::pair<CLMicroLocationFingerprint,boost::uuids::uuid>::pair[abi:ne180100]<CLMicroLocationFingerprint&,boost::uuids::uuid const&,0>(v38, v39, (_OWORD *)v23 + 1);
            v38 += 208;
          }
          v65 = v38;
          ++v34;
        }
        while (v34 != v37);
      }
      if (onceToken_MicroLocation_Default != -1)
        dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_104);
      v40 = (id)logObject_MicroLocation_Default;
      if (os_log_type_enabled(v40, OS_LOG_TYPE_DEBUG))
      {
        v41 = operator new(0x28uLL);
        v54 = v41;
        v55 = xmmword_241BB2320;
        *v41 = 0u;
        v41[1] = 0u;
        *(_QWORD *)((char *)v41 + 29) = 0;
        boost::uuids::to_chars<char *>((uint64_t)(v23 + 2), v41);
        v42 = &v54;
        if (v55 < 0)
          v42 = v54;
        *(_DWORD *)buf = 68289538;
        *(_DWORD *)&buf[4] = 0;
        *(_WORD *)__p = 2082;
        *(_QWORD *)&__p[2] = "";
        *(_WORD *)&__p[10] = 2082;
        *(_QWORD *)&__p[12] = v42;
        v73 = 2050;
        v74 = ClusterLabels;
        _os_log_impl(&dword_2419D9000, v40, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Post-Pruning Model\", \"ClusterId\":%{public, location:escape_only}s, \"numFPs\":%{public}lu}", buf, 0x26u);
        if (SHIBYTE(v55) < 0)
          operator delete(v54);
      }

      if (v56)
      {
        v57 = v56;
        operator delete(v56);
      }
      if (v58)
      {
        v59 = v58;
        operator delete(v58);
      }
      if (v61[0])
      {
        v61[1] = v61[0];
        operator delete(v61[0]);
      }
      v23 = (_QWORD *)*v23;
      if (!v23)
        goto LABEL_66;
    }
    v25 = (*(uint64_t (**)(_QWORD *))(*v82 + 16))(v82);
LABEL_23:
    v78 = (_BYTE *)v25;
    goto LABEL_25;
  }
LABEL_66:
  std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>>>::~__hash_table((uint64_t)v62);
  v44 = *((_QWORD *)a2 + 41);
  for (j = *((_QWORD *)a2 + 42);
        j != v44;
  *((_QWORD *)a2 + 42) = v44;
  v45 = v64;
  v46 = (const uuid *)v65;
  while (v45 != v46)
  {
    v47 = v45 + 12;
    CLMicroLocationModel::addFingerprint(a2, (const CLMicroLocationFingerprint *)v45, v45 + 12, a3);
    v45 = v47 + 1;
  }
  std::__hash_table<std::__hash_value_type<boost::uuids::uuid,std::vector<CLMicroLocationFingerprint>>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::vector<CLMicroLocationFingerprint>>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::vector<CLMicroLocationFingerprint>>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,std::vector<CLMicroLocationFingerprint>>>>::~__hash_table((uint64_t)v67);
  *(_QWORD *)&v67[0] = &v64;
  std::vector<std::pair<CLMicroLocationFingerprint,boost::uuids::uuid>>::__destroy_vector::operator()[abi:ne180100]((void ***)v67);
  v48 = v80;
  if (v80 == v79)
  {
    v49 = 4;
    v48 = v79;
  }
  else
  {
    if (!v80)
      goto LABEL_77;
    v49 = 5;
  }
  (*(void (**)(void))(*v48 + 8 * v49))();
LABEL_77:
  v50 = v82;
  if (v82 == v81)
  {
    v51 = 4;
    v50 = v81;
    goto LABEL_81;
  }
  if (v82)
  {
    v51 = 5;
LABEL_81:
    (*(void (**)(void))(*v50 + 8 * v51))();
  }

}

void sub_241B42F60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,char a44,uint64_t a45,void *a46,uint64_t a47)
{
  void *v47;
  void *v48;
  void *v49;
  uint64_t v50;
  _QWORD *v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;

  v52 = *(_QWORD **)(v50 - 160);
  if (v52 == (_QWORD *)(v50 - 184))
  {
    v53 = 4;
    v52 = (_QWORD *)(v50 - 184);
  }
  else
  {
    if (!v52)
      goto LABEL_6;
    v53 = 5;
  }
  (*(void (**)(void))(*v52 + 8 * v53))();
LABEL_6:
  v54 = *(_QWORD **)(v50 - 128);
  if (v54 == (_QWORD *)(v50 - 152))
  {
    v55 = 4;
    v54 = (_QWORD *)(v50 - 152);
  }
  else
  {
    if (!v54)
      goto LABEL_11;
    v55 = 5;
  }
  (*(void (**)(void))(*v54 + 8 * v55))();
LABEL_11:

  _Unwind_Resume(a1);
}

void CLMicroLocationSemiSupervisedAlgorithm::convertModelToProtobufAndLogModel(uint64_t **this@<X2>, void **a2@<X1>, uint64_t a3@<X8>)
{
  NSObject *v5;
  void *v6;
  int v7;
  void **v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  int v12;
  void **v13;
  uint64_t *i;
  uint64_t *v15;
  NSObject *v16;
  uint64_t v17;
  _OWORD *v18;
  void *v19;
  _OWORD *v20;
  void **p_p;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  double v25;
  double v26;
  int v27;
  void *__p;
  __int128 v29;
  void *v30;
  __int128 v31;
  unsigned int v32;
  uint8_t buf[4];
  int v34;
  __int16 v35;
  const char *v36;
  __int16 v37;
  void *v38;
  __int16 v39;
  void **v40;
  __int16 v41;
  uint64_t v42;
  __int16 v43;
  _BYTE v44[10];
  _DWORD v45[5];
  uint64_t v46;

  v46 = *MEMORY[0x24BDAC8D0];
  CLMicroLocationModel::toProtobuf((CLMicroLocationModel *)this, a3);
  if (onceToken_MicroLocation_Default != -1)
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_104);
  v5 = (id)logObject_MicroLocation_Default;
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    v6 = (void *)*(unsigned int *)this;
    v7 = *((char *)a2 + 23);
    v8 = (void **)*a2;
    v10 = this[41];
    v9 = this[42];
    v11 = CLMicroLocationModel::numClusters((CLMicroLocationModel *)this);
    v12 = *((_DWORD *)this + 1);
    if (v7 >= 0)
      v13 = a2;
    else
      v13 = v8;
    *(_DWORD *)buf = 68290307;
    v34 = 0;
    v35 = 2082;
    v36 = "";
    v37 = 2050;
    v38 = v6;
    v39 = 2081;
    v40 = v13;
    v41 = 2049;
    v42 = ((char *)v9 - (char *)v10) >> 5;
    v43 = 2049;
    *(_QWORD *)v44 = v11;
    *(_WORD *)&v44[8] = 1025;
    v45[0] = v12;
    _os_log_impl(&dword_2419D9000, v5, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Semi-supervised model\", \"GenerationAlgorithm\":%{public}lu, \"Client\":%{private, location:escape_only}s, \"size\":%{private}lu, \"numClusters\":%{private}lu, \"type\":%{private}d}", buf, 0x40u);
  }

  if (onceToken_MicroLocation_Default != -1)
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_104);
  if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEBUG))
  {
    v15 = this[41];
    for (i = this[42]; v15 != i; v15 += 4)
    {
      if (onceToken_MicroLocation_Default != -1)
        dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_104);
      v16 = (id)logObject_MicroLocation_Default;
      if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
      {
        v17 = *v15;
        v18 = operator new(0x28uLL);
        v30 = v18;
        v31 = xmmword_241BB2320;
        *v18 = 0u;
        v18[1] = 0u;
        *(_QWORD *)((char *)v18 + 29) = 0;
        boost::uuids::to_chars<char *>(v17 + 40, v18);
        if (v31 >= 0)
          v19 = &v30;
        else
          v19 = v30;
        v20 = operator new(0x28uLL);
        __p = v20;
        v29 = xmmword_241BB2320;
        *v20 = 0u;
        v20[1] = 0u;
        *(_QWORD *)((char *)v20 + 29) = 0;
        boost::uuids::to_chars<char *>((uint64_t)(v15 + 2), v20);
        if (v29 >= 0)
          p_p = &__p;
        else
          p_p = (void **)__p;
        v22 = *v15;
        v23 = *(_QWORD *)(*v15 + 24);
        v32 = 1;
        v24 = std::__hash_table<std::__hash_value_type<unsigned int,unsigned int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned int>>>::find<unsigned int>((_QWORD *)(v22 + 104), &v32);
        if (v24)
          v25 = *((double *)v24 + 4) - *((double *)v24 + 3);
        else
          v25 = 0.0;
        v26 = *(double *)(*v15 + 152);
        v27 = (int)*(double *)(*v15 + 144);
        *(_DWORD *)buf = 68290563;
        v34 = 0;
        v35 = 2082;
        v36 = "";
        v37 = 2081;
        v38 = v19;
        v39 = 2081;
        v40 = p_p;
        v41 = 2049;
        v42 = v23;
        v43 = 1025;
        *(_DWORD *)v44 = (int)v25;
        *(_WORD *)&v44[4] = 1025;
        *(_DWORD *)&v44[6] = v27;
        LOWORD(v45[0]) = 1025;
        *(_DWORD *)((char *)v45 + 2) = (int)v26;
        _os_log_impl(&dword_2419D9000, v16, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"modelFingerprint\", \"recordingUUID\":%{private, location:escape_only}s, \"clusterUUID\":%{private, location:escape_only}s, \"size\":%{private}lu, \"duration\":%{private}d, \"start\":%{private}d, \"end\":%{private}d}", buf, 0x42u);
        if (SHIBYTE(v29) < 0)
          operator delete(__p);
        if (SHIBYTE(v31) < 0)
          operator delete(v30);
      }

    }
  }
}

void sub_241B43548(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CLMicroLocationProto::Model *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  void *v27;

  CLMicroLocationProto::Model::~Model(a10);
  _Unwind_Resume(a1);
}

void CLMicroLocationSemiSupervisedAlgorithm::learnBinaryRoiSemiSupervisedModel(void *a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, _QWORD *a4@<X4>, _QWORD *a5@<X5>, __int128 **a6@<X6>, uint64_t a7@<X7>, _BYTE *a8@<X8>, uint64_t a9, CLMicroLocationFingerprintPool *a10, uint64_t a11, uint64_t a12)
{
  NSObject *v16;
  void *v17;
  _OWORD *v18;
  void *p_p;
  unint64_t v20;
  unint64_t v21;
  double v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  __int128 *v28;
  __int128 *v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  NSObject *v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  const char *v44;
  NSObject *v45;
  uint32_t v46;
  uint64_t v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  const uuid *v52;
  _QWORD *v53;
  _QWORD *v54;
  uint64_t v55;
  uuid *v56;
  NSObject *v57;
  _OWORD *v58;
  void *v59;
  char *v60;
  uint8_t *v61;
  NSObject *v62;
  _OWORD *v63;
  void **v64;
  _OWORD *v65;
  void **v66;
  uint64_t v67;
  NSObject *v68;
  _OWORD *v69;
  void *v70;
  char *v71;
  uint8_t *v72;
  NSObject *v73;
  _OWORD *v74;
  void *v75;
  char *v76;
  uint8_t *v77;
  unsigned int v78;
  uint64_t v79;
  uint64_t v80;
  _QWORD *v81;
  uint64_t v82;
  _QWORD *v83;
  uint64_t v84;
  NSObject *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  const CLMicroLocationFingerprintVector *v89;
  int v90;
  char v91;
  NSObject *v92;
  void *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  NSObject *v97;
  char *v98;
  uint8_t *v99;
  _OWORD *v100;
  void *v101;
  NSObject *v102;
  BOOL v103;
  CLMicroLocationSemiSupervisedAlgorithm *v104;
  _QWORD *i;
  NSObject *v106;
  char *v107;
  uint8_t *v108;
  uint64_t v109;
  uint64_t v110;
  NSObject *v111;
  void **v112;
  uint64_t v113;
  Class isa;
  uint64_t v115;
  _QWORD *v116;
  uint64_t v117;
  CLMicroLocationCoreAnalyticsPublishHelper *v120;
  void *v122;
  void *v123;
  __int128 v124;
  uint64_t v125;
  NSMutableDictionary v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  _OWORD v134[2];
  int v135;
  _OWORD v136[2];
  int v137;
  _OWORD v138[2];
  int v139;
  _OWORD v140[2];
  int v141;
  void *__p;
  _BYTE v143[20];
  __int16 v144;
  uint64_t v145;
  __int128 v146;
  char v147;
  void *v148;
  __int128 v149;
  void **v150;
  _BYTE v151[24];
  _BYTE *v152;
  _BYTE v153[24];
  _BYTE *v154;
  uint8_t v155[8];
  __int128 v156;
  uuid v157;
  uint8_t buf[8];
  __int16 v159;
  const char *v160;
  __int16 v161;
  unint64_t v162;
  __int16 v163;
  uint64_t v164;
  __int16 v165;
  unint64_t v166;
  _QWORD v167[3];
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  _QWORD *v172;
  void *v173;
  void *v174;
  void *v175;
  char v176;
  _BYTE v177[24];
  _BYTE *v178;
  _BYTE v179[24];
  _BYTE *v180;
  _QWORD v181[3];
  _QWORD *v182;
  _QWORD v183[5];

  v183[2] = *MEMORY[0x24BDAC8D0];
  v183[0] = a11;
  v183[1] = a12;
  v120 = a1;
  if (onceToken_MicroLocation_Default != -1)
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_104);
  v16 = (id)logObject_MicroLocation_Default;
  if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
  {
    if (*(char *)(a9 + 23) >= 0)
      v17 = (void *)a9;
    else
      v17 = *(void **)a9;
    v18 = operator new(0x28uLL);
    __p = v18;
    *(_OWORD *)v143 = xmmword_241BB2320;
    *v18 = 0u;
    v18[1] = 0u;
    *(_QWORD *)((char *)v18 + 29) = 0;
    boost::uuids::to_chars<char *>(a9 + 24, v18);
    p_p = &__p;
    if (v143[15] < 0)
      p_p = __p;
    v20 = 0xEF7BDEF7BDEF7BDFLL * ((uint64_t)(a5[1] - *a5) >> 3);
    v21 = 0xEF7BDEF7BDEF7BDFLL * (((char *)a6[1] - (char *)*a6) >> 3);
    *(_DWORD *)buf = 68290050;
    *(_DWORD *)&buf[4] = 0;
    v159 = 2082;
    v160 = "";
    v161 = 2082;
    v162 = (unint64_t)v17;
    v163 = 2082;
    v164 = (uint64_t)p_p;
    v165 = 2050;
    v166 = v20;
    LOWORD(v167[0]) = 2050;
    *(_QWORD *)((char *)v167 + 2) = v21;
    _os_log_impl(&dword_2419D9000, v16, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Learning semi-supervised model with BinaryRoi generation algorithm\", \"Client\":%{public, location:escape_only}s, \"Service UUID\":%{public, location:escape_only}s, \"Number of labeled recording triggers\":%{public}lu, \"Number of unlabeled recording triggers\":%{public}lu}", buf, 0x3Au);
    if ((v143[15] & 0x80000000) != 0)
      operator delete(__p);
  }

  v22 = cl::chrono::CFAbsoluteTimeClock::now();
  *a8 = 0;
  a8[312] = 0;
  v181[0] = &off_2511D63B8;
  v181[1] = CLMicroLocationFingerprintConfiguration::getRecordingConfigurationFromSettings;
  v182 = v181;
  memset(v140, 0, sizeof(v140));
  v141 = 1065353216;
  memset(v138, 0, sizeof(v138));
  v139 = 1065353216;
  v23 = (_QWORD *)a4[1];
  if ((_QWORD *)*a4 != v23)
  {
    v24 = (_QWORD *)(*a4 + 40);
    do
    {
      std::__hash_table<boost::uuids::uuid,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,std::allocator<boost::uuids::uuid>>::__emplace_unique_key_args<boost::uuids::uuid,boost::uuids::uuid const&>((uint64_t)v140, v24, v24);
      *(_QWORD *)buf = v24 - 5;
      *((_OWORD *)std::__hash_table<std::__hash_value_type<boost::uuids::uuid,boost::uuids::uuid>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,boost::uuids::uuid>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,boost::uuids::uuid>>>::__emplace_unique_key_args<boost::uuids::uuid,std::piecewise_construct_t const&,std::tuple<boost::uuids::uuid const&>,std::tuple<>>((uint64_t)v138, v24 - 5, (uint64_t)&std::piecewise_construct, (_OWORD **)buf)+ 2) = *(_OWORD *)v24;
      v25 = v24 + 3;
      v24 += 8;
    }
    while (v25 != v23);
  }
  memset(v136, 0, sizeof(v136));
  v137 = 1065353216;
  memset(v134, 0, sizeof(v134));
  v135 = 1065353216;
  v26 = *a5;
  v27 = a5[1];
  if (*a5 != v27)
  {
    do
    {
      std::__hash_table<boost::uuids::uuid,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,std::allocator<boost::uuids::uuid>>::__emplace_unique_key_args<boost::uuids::uuid,boost::uuids::uuid const&>((uint64_t)v136, (_QWORD *)v26, (_OWORD *)v26);
      if (*(_BYTE *)(v26 + 240))
      {
        *(_QWORD *)buf = v26;
        *((_OWORD *)std::__hash_table<std::__hash_value_type<boost::uuids::uuid,boost::uuids::uuid>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,boost::uuids::uuid>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,boost::uuids::uuid>>>::__emplace_unique_key_args<boost::uuids::uuid,std::piecewise_construct_t const&,std::tuple<boost::uuids::uuid const&>,std::tuple<>>((uint64_t)v134, (_QWORD *)v26, (uint64_t)&std::piecewise_construct, (_OWORD **)buf)+ 2) = *(_OWORD *)(v26 + 224);
      }
      v26 += 248;
    }
    while (v26 != v27);
  }
  v131 = 0;
  v132 = 0;
  v133 = 0;
  v28 = *a6;
  v29 = a6[1];
  __p = &v131;
  while (v28 != v29)
  {
    if (!std::__hash_table<std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>>>::find<boost::uuids::uuid>(v136, v28))std::back_insert_iterator<std::vector<CLMicroLocationRecordingEventsTable::Entry>>::operator=[abi:ne180100]((uint64_t **)&__p, v28);
    v28 = (__int128 *)((char *)v28 + 248);
  }
  v30 = ULSettings::get<ULSettings::FingerprintDataSource>();
  std::__function::__value_func<double ()(CLMicroLocationFingerprint const&,CLMicroLocationFingerprint const&)>::__value_func[abi:ne180100]((uint64_t)v179, a3);
  v31 = (uint64_t)v182;
  if (!v182)
    goto LABEL_26;
  if (v182 != v181)
  {
    v31 = (*(uint64_t (**)(void))(*v182 + 16))();
LABEL_26:
    v178 = (_BYTE *)v31;
    goto LABEL_28;
  }
  v178 = v177;
  (*(void (**)(_QWORD *, _BYTE *))(v181[0] + 24))(v181, v177);
LABEL_28:
  CLMicroLocationFingerprintDataSources::create(v30, (uint64_t)v179, (uint64_t)v177, (uint64_t)a5, a2, &v129);
  CLMicroLocationFingerprintVector::CLMicroLocationFingerprintVector(&v130, &v129);
  v32 = v129;
  v129 = 0;
  if (v32)
    (*(void (**)(uint64_t))(*(_QWORD *)v32 + 8))(v32);
  v33 = v178;
  if (v178 == v177)
  {
    v34 = 4;
    v33 = v177;
  }
  else
  {
    if (!v178)
      goto LABEL_35;
    v34 = 5;
  }
  (*(void (**)(void))(*v33 + 8 * v34))();
LABEL_35:
  v35 = v180;
  if (v180 == v179)
  {
    v36 = 4;
    v35 = v179;
    goto LABEL_39;
  }
  if (v180)
  {
    v36 = 5;
LABEL_39:
    (*(void (**)(void))(*v35 + 8 * v36))();
  }
  if (onceToken_MicroLocation_Default != -1)
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_104);
  v37 = (id)logObject_MicroLocation_Default;
  if (os_log_type_enabled(v37, OS_LOG_TYPE_DEBUG))
  {
    v40 = a5;
    v38 = *a5;
    v39 = v40[1];
    v41 = CLMicroLocationFingerprintVector::size((CLMicroLocationFingerprintVector *)&v130);
    *(_DWORD *)buf = 68289538;
    *(_DWORD *)&buf[4] = 0;
    v159 = 2082;
    v160 = "";
    v161 = 2050;
    v162 = 0xEF7BDEF7BDEF7BDFLL * ((v39 - v38) >> 3);
    v163 = 2050;
    v164 = v41;
    _os_log_impl(&dword_2419D9000, v37, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"learnBinaryModel, labeledFingerprintVector\", \"numTriggers\":%{public}lu, \"numFPs\":%{public}lu}", buf, 0x26u);
  }

  if (!CLMicroLocationFingerprintVector::size((CLMicroLocationFingerprintVector *)&v130))
  {
    if (onceToken_MicroLocation_Default != -1)
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_104);
    v47 = logObject_MicroLocation_Default;
    if (!os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
      goto LABEL_204;
    if (*(char *)(a9 + 23) >= 0)
      v48 = (void *)a9;
    else
      v48 = *(void **)a9;
    *(_DWORD *)buf = 68289283;
    *(_DWORD *)&buf[4] = 0;
    v159 = 2082;
    v160 = "";
    v161 = 2081;
    v162 = (unint64_t)v48;
    v44 = "{\"msg%{public}.0s\":\"learnBinaryModel, Must have valid labeled fingerprints\", \"ClientId\":%{private, locat"
          "ion:escape_only}s}";
    v45 = v47;
    v46 = 28;
LABEL_58:
    _os_log_impl(&dword_2419D9000, v45, OS_LOG_TYPE_DEFAULT, v44, buf, v46);
    goto LABEL_204;
  }
  v42 = *(_QWORD *)(a3 + 24);
  if (!v42)
    std::__throw_bad_function_call[abi:ne180100]();
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v42 + 48))(v42))
  {
    if (onceToken_MicroLocation_Default != -1)
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_104);
    v43 = logObject_MicroLocation_Default;
    if (!os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
      goto LABEL_204;
    *(_DWORD *)buf = 68289026;
    *(_DWORD *)&buf[4] = 0;
    v159 = 2082;
    v160 = "";
    v44 = "{\"msg%{public}.0s\":\"Learning binary model cancelled\"}";
    v45 = v43;
    v46 = 18;
    goto LABEL_58;
  }
  CLMicroLocationModel::CLMicroLocationModel((CLMicroLocationModel *)buf);
  *(_QWORD *)buf = 0x100000004;
  if ((const char **)((char *)&v160 + 6) != (const char **)a7)
  {
    LODWORD(v167[0]) = *(_DWORD *)(a7 + 32);
    std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,void *> *>>((const char **)((char *)&v160 + 6), *(uint64_t **)(a7 + 16), 0);
  }
  *(_OWORD *)&v167[1] = *(_OWORD *)(a7 + 40);
  v123 = (void *)CLMicroLocationFingerprintVector::begin((CLMicroLocationFingerprintVector *)&v130);
  *(_QWORD *)&v124 = v49;
  v127 = CLMicroLocationFingerprintVector::end((CLMicroLocationFingerprintVector *)&v130);
  v128 = v50;
  while (CLMicroLocationFingerprintVector::Iterator::operator!=(&v123, &v127))
  {
    v51 = (_QWORD *)CLMicroLocationFingerprintVector::Iterator::operator*(&v123);
    v52 = (const uuid *)(v51 + 5);
    v53 = std::__hash_table<std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>>>::find<boost::uuids::uuid>(v134, v51 + 5);
    v54 = v53;
    if (!v53)
    {
      if (onceToken_MicroLocation_Default != -1)
        dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_104);
      v62 = (id)logObject_MicroLocation_Default;
      if (os_log_type_enabled(v62, OS_LOG_TYPE_ERROR))
      {
        v63 = operator new(0x28uLL);
        v148 = v63;
        v149 = xmmword_241BB2320;
        *v63 = 0u;
        v63[1] = 0u;
        *(_QWORD *)((char *)v63 + 29) = 0;
        boost::uuids::to_chars<char *>((uint64_t)v52, v63);
        v64 = v149 >= 0 ? &v148 : (void **)v148;
        __p = (void *)68289282;
        *(_WORD *)v143 = 2082;
        *(_QWORD *)&v143[2] = "";
        *(_WORD *)&v143[10] = 2082;
        *(_QWORD *)&v143[12] = v64;
        _os_log_impl(&dword_2419D9000, v62, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"learnBinaryRoiSemiSupervisedModel, couldn't find trigger of labeled fingerprint\", \"Recording UUID\":%{public, location:escape_only}s}", (uint8_t *)&__p, 0x1Cu);
        if (SHIBYTE(v149) < 0)
          operator delete(v148);
      }

      if (onceToken_MicroLocation_Default != -1)
        dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_104);
      v57 = (id)logObject_MicroLocation_Default;
      if (os_signpost_enabled(v57))
      {
        v65 = operator new(0x28uLL);
        v148 = v65;
        v149 = xmmword_241BB2320;
        *v65 = 0u;
        v65[1] = 0u;
        *(_QWORD *)((char *)v65 + 29) = 0;
        boost::uuids::to_chars<char *>((uint64_t)v52, v65);
        v66 = v149 >= 0 ? &v148 : (void **)v148;
        __p = (void *)68289282;
        *(_WORD *)v143 = 2082;
        *(_QWORD *)&v143[2] = "";
        *(_WORD *)&v143[10] = 2082;
        *(_QWORD *)&v143[12] = v66;
        _os_signpost_emit_with_name_impl(&dword_2419D9000, v57, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "learnBinaryRoiSemiSupervisedModel, couldn't find trigger of labeled fingerprint", "{\"msg%{public}.0s\":\"learnBinaryRoiSemiSupervisedModel, couldn't find trigger of labeled fingerprint\", \"Recording UUID\":%{public, location:escape_only}s}", (uint8_t *)&__p, 0x1Cu);
        if (SHIBYTE(v149) < 0)
          operator delete(v148);
      }
      goto LABEL_77;
    }
    v55 = (uint64_t)(v53 + 4);
    v56 = (uuid *)std::__hash_table<std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>>>::find<boost::uuids::uuid>(v138, v53 + 4);
    if (v56)
    {
      v157 = v56[2];
      CLMicroLocationModel::addFingerprint((CLMicroLocationModel *)buf, (const CLMicroLocationFingerprint *)v51, &v157, a10);
      CLMicroLocationModel::addRecording((CLMicroLocationModel *)buf, &v157, v52);
      if (onceToken_MicroLocation_Default != -1)
        dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_104);
      v57 = (id)logObject_MicroLocation_Default;
      if (os_log_type_enabled(v57, OS_LOG_TYPE_DEBUG))
      {
        v58 = operator new(0x28uLL);
        v148 = v58;
        v149 = xmmword_241BB2320;
        *v58 = 0u;
        v58[1] = 0u;
        *(_QWORD *)((char *)v58 + 29) = 0;
        boost::uuids::to_chars<char *>((uint64_t)v52, v58);
        if (v149 >= 0)
          v59 = &v148;
        else
          v59 = v148;
        v60 = (char *)operator new(0x28uLL);
        *(_QWORD *)v155 = v60;
        v156 = xmmword_241BB2320;
        *(_OWORD *)v60 = 0u;
        *((_OWORD *)v60 + 1) = 0u;
        *(_QWORD *)(v60 + 29) = 0;
        boost::uuids::to_chars<char *>((uint64_t)&v157, v60);
        v61 = v155;
        if (v156 < 0)
          v61 = *(uint8_t **)v155;
        __p = (void *)68289538;
        *(_WORD *)v143 = 2082;
        *(_QWORD *)&v143[2] = "";
        *(_WORD *)&v143[10] = 2082;
        *(_QWORD *)&v143[12] = v59;
        v144 = 2082;
        v145 = (uint64_t)v61;
        _os_log_impl(&dword_2419D9000, v57, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"learnBinaryModel, labeled fingeprint assigned to cluster\", \"Recording UUID\":%{public, location:escape_only}s, \"Cluster UUID\":%{public, location:escape_only}s}", (uint8_t *)&__p, 0x26u);
        if (SHIBYTE(v156) < 0)
          operator delete(*(void **)v155);
        if (SHIBYTE(v149) < 0)
          operator delete(v148);
      }
LABEL_77:

      goto LABEL_120;
    }
    if (onceToken_MicroLocation_Default != -1)
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_104);
    v67 = (uint64_t)(v54 + 2);
    v68 = (id)logObject_MicroLocation_Default;
    if (os_log_type_enabled(v68, OS_LOG_TYPE_ERROR))
    {
      v69 = operator new(0x28uLL);
      v148 = v69;
      v149 = xmmword_241BB2320;
      *v69 = 0u;
      v69[1] = 0u;
      *(_QWORD *)((char *)v69 + 29) = 0;
      boost::uuids::to_chars<char *>(v67, v69);
      if (v149 >= 0)
        v70 = &v148;
      else
        v70 = v148;
      v71 = (char *)operator new(0x28uLL);
      *(_QWORD *)v155 = v71;
      v156 = xmmword_241BB2320;
      *(_OWORD *)v71 = 0u;
      *((_OWORD *)v71 + 1) = 0u;
      *(_QWORD *)(v71 + 29) = 0;
      boost::uuids::to_chars<char *>(v55, v71);
      v72 = v155;
      if (v156 < 0)
        v72 = *(uint8_t **)v155;
      __p = (void *)68289538;
      *(_WORD *)v143 = 2082;
      *(_QWORD *)&v143[2] = "";
      *(_WORD *)&v143[10] = 2082;
      *(_QWORD *)&v143[12] = v70;
      v144 = 2082;
      v145 = (uint64_t)v72;
      _os_log_impl(&dword_2419D9000, v68, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"learnBinaryRoiSemiSupervisedModel, couldn't find label of labeled fingerprint\", \"Recording UUID\":%{public, location:escape_only}s, \"Trigger UUID\":%{public, location:escape_only}s}", (uint8_t *)&__p, 0x26u);
      if (SHIBYTE(v156) < 0)
        operator delete(*(void **)v155);
      if (SHIBYTE(v149) < 0)
        operator delete(v148);
    }

    if (onceToken_MicroLocation_Default != -1)
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_104);
    v73 = (id)logObject_MicroLocation_Default;
    if (os_signpost_enabled(v73))
    {
      v74 = operator new(0x28uLL);
      v148 = v74;
      v149 = xmmword_241BB2320;
      *v74 = 0u;
      v74[1] = 0u;
      *(_QWORD *)((char *)v74 + 29) = 0;
      boost::uuids::to_chars<char *>(v67, v74);
      if (v149 >= 0)
        v75 = &v148;
      else
        v75 = v148;
      v76 = (char *)operator new(0x28uLL);
      *(_QWORD *)v155 = v76;
      v156 = xmmword_241BB2320;
      *(_OWORD *)v76 = 0u;
      *((_OWORD *)v76 + 1) = 0u;
      *(_QWORD *)(v76 + 29) = 0;
      boost::uuids::to_chars<char *>(v55, v76);
      v77 = v155;
      if (v156 < 0)
        v77 = *(uint8_t **)v155;
      __p = (void *)68289538;
      *(_WORD *)v143 = 2082;
      *(_QWORD *)&v143[2] = "";
      *(_WORD *)&v143[10] = 2082;
      *(_QWORD *)&v143[12] = v75;
      v144 = 2082;
      v145 = (uint64_t)v77;
      _os_signpost_emit_with_name_impl(&dword_2419D9000, v73, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "learnBinaryRoiSemiSupervisedModel, couldn't find label of labeled fingerprint", "{\"msg%{public}.0s\":\"learnBinaryRoiSemiSupervisedModel, couldn't find label of labeled fingerprint\", \"Recording UUID\":%{public, location:escape_only}s, \"Trigger UUID\":%{public, location:escape_only}s}", (uint8_t *)&__p, 0x26u);
      if (SHIBYTE(v156) < 0)
        operator delete(*(void **)v155);
      if (SHIBYTE(v149) < 0)
        operator delete(v148);
    }

LABEL_120:
    CLMicroLocationFingerprintVector::Iterator::operator++((uint64_t)&v123);
  }
  v78 = ULSettings::get<ULSettings::FingerprintDataSource>();
  std::__function::__value_func<double ()(CLMicroLocationFingerprint const&,CLMicroLocationFingerprint const&)>::__value_func[abi:ne180100]((uint64_t)v153, a3);
  v79 = (uint64_t)v182;
  if (!v182)
    goto LABEL_124;
  if (v182 == v181)
  {
    v152 = v151;
    (*(void (**)(_QWORD *, _BYTE *))(v181[0] + 24))(v181, v151);
  }
  else
  {
    v79 = (*(uint64_t (**)(_QWORD *))(*v182 + 16))(v182);
LABEL_124:
    v152 = (_BYTE *)v79;
  }
  CLMicroLocationFingerprintDataSources::create(v78, (uint64_t)v153, (uint64_t)v151, (uint64_t)&v131, a2, &v125);
  CLMicroLocationFingerprintVector::CLMicroLocationFingerprintVector(&v126, &v125);
  v80 = v125;
  v125 = 0;
  if (v80)
    (*(void (**)(uint64_t))(*(_QWORD *)v80 + 8))(v80);
  v81 = v152;
  if (v152 == v151)
  {
    v82 = 4;
    v81 = v151;
LABEL_132:
    (*(void (**)(_QWORD *))(*v81 + 8 * v82))(v81);
  }
  else if (v152)
  {
    v82 = 5;
    goto LABEL_132;
  }
  v83 = v154;
  if (v154 == v153)
  {
    v84 = 4;
    v83 = v153;
LABEL_137:
    (*(void (**)(_QWORD *))(*v83 + 8 * v84))(v83);
  }
  else if (v154)
  {
    v84 = 5;
    goto LABEL_137;
  }
  if (CLMicroLocationFingerprintVector::size((CLMicroLocationFingerprintVector *)&v126))
  {
    if (onceToken_MicroLocation_Default != -1)
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_104);
    v85 = (id)logObject_MicroLocation_Default;
    if (os_log_type_enabled(v85, OS_LOG_TYPE_DEBUG))
    {
      v87 = v131;
      v86 = v132;
      v88 = CLMicroLocationFingerprintVector::size((CLMicroLocationFingerprintVector *)&v126);
      __p = (void *)68289538;
      *(_WORD *)v143 = 2082;
      *(_QWORD *)&v143[2] = "";
      *(_WORD *)&v143[10] = 2050;
      *(_QWORD *)&v143[12] = 0xEF7BDEF7BDEF7BDFLL * ((v86 - v87) >> 3);
      v144 = 2050;
      v145 = v88;
      _os_log_impl(&dword_2419D9000, v85, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"learnBinaryModel, unlabeledFingerprintVector\", \"numTriggers\":%{public}lu, \"numFPs\":%{public}lu}", (uint8_t *)&__p, 0x26u);
    }

    CLMicroLocationCoreAnalyticsPublishHelper::updateModelRfCharacteristics(v120, (CLMicroLocationFingerprintVector *)&v126, (CLMicroLocationFingerprintVector *)&v130, 1u, v22);
    CLMicroLocationCoreAnalyticsPublishHelper::updateSemiSupervisedLabeledAndUnlabeledFingerprints(v120, &v126, (const CLMicroLocationFingerprintVector *)&v130, v89);
    v90 = ULSettings::get<ULSettings::FingerprintDistanceFunctionType>();
    ULSettings::getFingerprintDistanceFunctionParamsForType(v90);
    v122 = (void *)objc_claimAutoreleasedReturnValue();
    if (ULSettings::get<ULSettings::AdaptiveAnchorsEnable>())
    {
      std::unordered_map<boost::uuids::uuid,CLMicroLocationAnchorAppearance>::unordered_map((uint64_t)&__p, (uint64_t)&v160 + 6);
      v146 = *(_OWORD *)&v167[1];
      v91 = 1;
    }
    else
    {
      v91 = 0;
      LOBYTE(__p) = 0;
    }
    v147 = v91;
    CLMicroLocationAlgorithms::createLearnFingerprintDistanceFunction(v90, v122);
    if (v147)
      std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>>>::~__hash_table((uint64_t)&__p);
    v127 = CLMicroLocationFingerprintVector::begin((CLMicroLocationFingerprintVector *)&v126);
    v128 = v94;
    *(_QWORD *)v157.var0 = CLMicroLocationFingerprintVector::end((CLMicroLocationFingerprintVector *)&v126);
    *(_QWORD *)&v157.var0[8] = v95;
    while (CLMicroLocationFingerprintVector::Iterator::operator!=(&v127, &v157))
    {
      v96 = CLMicroLocationFingerprintVector::Iterator::operator*(&v127);
      CLMicroLocationModel::addFingerprint((CLMicroLocationModel *)buf, (const CLMicroLocationFingerprint *)v96, &CL::kNegMicroLocation, a10);
      CLMicroLocationModel::addRecording((CLMicroLocationModel *)buf, &CL::kNegMicroLocation, (const uuid *)(v96 + 40));
      if (onceToken_MicroLocation_Default != -1)
        dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_104);
      v97 = (id)logObject_MicroLocation_Default;
      if (os_log_type_enabled(v97, OS_LOG_TYPE_DEBUG))
      {
        v98 = (char *)operator new(0x28uLL);
        *(_QWORD *)v155 = v98;
        v156 = xmmword_241BB2320;
        *(_OWORD *)v98 = 0u;
        *((_OWORD *)v98 + 1) = 0u;
        *(_QWORD *)(v98 + 29) = 0;
        boost::uuids::to_chars<char *>(v96 + 40, v98);
        if (v156 >= 0)
          v99 = v155;
        else
          v99 = *(uint8_t **)v155;
        v100 = operator new(0x28uLL);
        v123 = v100;
        v124 = xmmword_241BB2320;
        *v100 = 0u;
        v100[1] = 0u;
        *(_QWORD *)((char *)v100 + 29) = 0;
        boost::uuids::to_chars<char *>((uint64_t)&CL::kNegMicroLocation, v100);
        if (v124 >= 0)
          v101 = &v123;
        else
          v101 = v123;
        __p = (void *)68289538;
        *(_WORD *)v143 = 2082;
        *(_QWORD *)&v143[2] = "";
        *(_WORD *)&v143[10] = 2082;
        *(_QWORD *)&v143[12] = v99;
        v144 = 2082;
        v145 = (uint64_t)v101;
        _os_log_impl(&dword_2419D9000, v97, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"learnBinaryModel, fingeprint assigned to NotROI\", \"Recording UUID\":%{public, location:escape_only}s, \"Cluster UUID\":%{public, location:escape_only}s}", (uint8_t *)&__p, 0x26u);
        if (SHIBYTE(v124) < 0)
          operator delete(v123);
        if (SHIBYTE(v156) < 0)
          operator delete(*(void **)v155);
      }

      CLMicroLocationFingerprintVector::Iterator::operator++((uint64_t)&v127);
    }
    if (onceToken_MicroLocation_Default != -1)
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_104);
    v102 = (id)logObject_MicroLocation_Default;
    v103 = os_log_type_enabled(v102, OS_LOG_TYPE_DEBUG);

    if (v103)
    {
      for (i = v172; i; i = (_QWORD *)*i)
      {
        if (onceToken_MicroLocation_Default != -1)
          dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_104);
        v106 = (id)logObject_MicroLocation_Default;
        if (os_log_type_enabled(v106, OS_LOG_TYPE_DEBUG))
        {
          v107 = (char *)operator new(0x28uLL);
          *(_QWORD *)v155 = v107;
          v156 = xmmword_241BB2320;
          *(_OWORD *)v107 = 0u;
          *((_OWORD *)v107 + 1) = 0u;
          *(_QWORD *)(v107 + 29) = 0;
          boost::uuids::to_chars<char *>((uint64_t)(i + 2), v107);
          v108 = v156 >= 0 ? v155 : *(uint8_t **)v155;
          v109 = (uint64_t)(i[5] - i[4]) >> 4;
          __p = (void *)68289538;
          *(_WORD *)v143 = 2082;
          *(_QWORD *)&v143[2] = "";
          *(_WORD *)&v143[10] = 2082;
          *(_QWORD *)&v143[12] = v108;
          v144 = 2050;
          v145 = v109;
          _os_log_impl(&dword_2419D9000, v106, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Pre-Pruning Model\", \"ClusterId\":%{public, location:escape_only}s, \"numFPs\":%{public}lu}", (uint8_t *)&__p, 0x26u);
          if (SHIBYTE(v156) < 0)
            operator delete(*(void **)v155);
        }

      }
    }
    CLMicroLocationSemiSupervisedAlgorithm::pruneNonRepresentativeFingerprints(v104, (CLMicroLocationModel *)buf, a10);
    CLMicroLocationSemiSupervisedAlgorithm::convertModelToProtobufAndLogModel((uint64_t **)buf, (void **)a9, (uint64_t)&__p);
    CLMicroLocationCoreAnalyticsPublishHelper::updateLearnEventSummary(v120, (CLMicroLocationModel *)buf, (const CLMicroLocationModel *)&__p, v22);
    if (CLMicroLocationModel::isValid((CLMicroLocationModel *)buf))
    {
      LODWORD(v127) = 0;
      boost::uuids::detail::random_provider_base::random_provider_base((boost::uuids::detail::random_provider_base *)&v127);
      *(_QWORD *)v155 = boost::uuids::random_generator_pure::operator()((uint64_t)&v127);
      *(_QWORD *)&v156 = v110;
      v123 = COERCE_VOID_(cl::chrono::CFAbsoluteTimeClock::now());
      std::__optional_destruct_base<CLMicroLocationModelTable::Entry,false>::reset[abi:ne180100]((uint64_t)a8);
      std::__construct_at[abi:ne180100]<CLMicroLocationModelTable::Entry,boost::uuids::uuid,std::chrono::time_point<cl::chrono::CFAbsoluteTimeClock,std::chrono::duration<long double,std::ratio<1l,1l>>>,CLMicroLocationProto::Model,std::string const&,boost::uuids::uuid const&,boost::uuids::uuid&,CLMicroLocationModelTable::Entry*>((uint64_t)a8, (uint64_t *)v155, (double *)&v123, (uint64_t)&__p, a9, (__int128 *)(a9 + 24), v183);
      a8[312] = 1;
      boost::uuids::detail::random_provider_base::destroy((boost::uuids::detail::random_provider_base *)&v127);
    }
    else
    {
      if (onceToken_MicroLocation_Default != -1)
        dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_104);
      v111 = (id)logObject_MicroLocation_Default;
      if (os_log_type_enabled(v111, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)v155 = 68289026;
        *(_DWORD *)&v155[4] = 0;
        LOWORD(v156) = 2082;
        *(_QWORD *)((char *)&v156 + 2) = "";
        _os_log_impl(&dword_2419D9000, v111, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"learnBinaryModel, invalid binary model, not created\"}", v155, 0x12u);
      }

    }
    CLMicroLocationProto::Model::~Model((CLMicroLocationProto::Model *)&__p);
    v112 = v150;
    if (v150 == &v148)
    {
      v113 = 4;
      v112 = &v148;
LABEL_195:
      (*((void (**)(void))*v112 + v113))();
    }
    else if (v150)
    {
      v113 = 5;
      goto LABEL_195;
    }

  }
  else
  {
    if (onceToken_MicroLocation_Default != -1)
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_104);
    v92 = logObject_MicroLocation_Default;
    if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
    {
      if (*(char *)(a9 + 23) >= 0)
        v93 = (void *)a9;
      else
        v93 = *(void **)a9;
      __p = (void *)68289283;
      *(_WORD *)v143 = 2082;
      *(_QWORD *)&v143[2] = "";
      *(_WORD *)&v143[10] = 2081;
      *(_QWORD *)&v143[12] = v93;
      _os_log_impl(&dword_2419D9000, v92, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"learnBinaryModel, Must have valid unlabeled fingerprints to create a Non-ROI cluster\", \"ClientId\":%{private, location:escape_only}s}", (uint8_t *)&__p, 0x1Cu);
    }
  }
  isa = v126.super.super.isa;
  v126.super.super.isa = 0;
  if (isa)
    (*(void (**)(Class))(*(_QWORD *)isa + 8))(isa);
  if (v176 < 0)
    operator delete(v175);
  if (v173)
  {
    v174 = v173;
    operator delete(v173);
  }
  std::__hash_table<std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>>>::~__hash_table((uint64_t)&v171);
  __p = &v170;
  std::vector<std::pair<std::shared_ptr<CLMicroLocationFingerprint>,boost::uuids::uuid>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  std::__optional_destruct_base<CLMicroLocationModel::BlueAtlasData,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v169);
  std::__optional_destruct_base<CLMicroLocationModel::SimilarityListData,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v168);
  std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>>>::~__hash_table((uint64_t)&v160 + 6);
LABEL_204:
  v115 = v130;
  v130 = 0;
  if (v115)
    (*(void (**)(uint64_t))(*(_QWORD *)v115 + 8))(v115);
  *(_QWORD *)buf = &v131;
  std::vector<CLMicroLocationRecordingEventsTable::Entry>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>>>::~__hash_table((uint64_t)v134);
  std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>>>::~__hash_table((uint64_t)v136);
  std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>>>::~__hash_table((uint64_t)v138);
  std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>>>::~__hash_table((uint64_t)v140);
  v116 = v182;
  if (v182 == v181)
  {
    v117 = 4;
    v116 = v181;
LABEL_210:
    (*(void (**)(void))(*v116 + 8 * v117))();
  }
  else if (v182)
  {
    v117 = 5;
    goto LABEL_210;
  }

}

void sub_241B44B98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,char a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,char a59)
{
  uint64_t v59;
  unint64_t *v61;
  uint64_t v62;
  uint64_t v63;
  _QWORD *v64;
  uint64_t v65;

  boost::uuids::detail::random_provider_base::destroy((boost::uuids::detail::random_provider_base *)&a28);
  CLMicroLocationProto::Model::~Model((CLMicroLocationProto::Model *)&a59);
  v61 = (unint64_t *)STACK[0x278];
  if ((unint64_t *)STACK[0x278] == &STACK[0x260])
  {
    v62 = 4;
    v61 = &STACK[0x260];
  }
  else
  {
    if (!v61)
      goto LABEL_6;
    v62 = 5;
  }
  (*(void (**)(void))(*v61 + 8 * v62))();
LABEL_6:

  if (a27)
    (*(void (**)(uint64_t))(*(_QWORD *)a27 + 8))(a27);
  CLMicroLocationModel::~CLMicroLocationModel((void **)&STACK[0x2F0]);
  v63 = a31;
  a31 = 0;
  if (v63)
    (*(void (**)(uint64_t))(*(_QWORD *)v63 + 8))(v63);
  STACK[0x2F0] = (unint64_t)&a32;
  std::vector<CLMicroLocationRecordingEventsTable::Entry>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x2F0]);
  std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>>>::~__hash_table((uint64_t)&a35);
  std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>>>::~__hash_table((uint64_t)&a41);
  std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>>>::~__hash_table((uint64_t)&a47);
  std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>>>::~__hash_table((uint64_t)&a53);
  v64 = *(_QWORD **)(v59 - 144);
  if (v64 == (_QWORD *)(v59 - 168))
  {
    v65 = 4;
    v64 = (_QWORD *)(v59 - 168);
  }
  else
  {
    if (!v64)
      goto LABEL_15;
    v65 = 5;
  }
  (*(void (**)(void))(*v64 + 8 * v65))();
LABEL_15:
  std::__optional_destruct_base<CLMicroLocationModelTable::Entry,false>::~__optional_destruct_base[abi:ne180100](a11);

  _Unwind_Resume(a1);
}

void sub_241B450BC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_241B451B8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void ___ZL45_CLLogObjectForCategory_MicroLocation_Defaultv_block_invoke_83()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.MicroLocation", "MicroLocation");
  v1 = (void *)logObject_MicroLocation_Default;
  logObject_MicroLocation_Default = (uint64_t)v0;

}

void std::vector<std::pair<CLMicroLocationFingerprint,CLMicroLocationResultInternal>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 224;
        std::allocator<CLMicroLocationFingerprint>::destroy[abi:ne180100]((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t std::vector<std::pair<CLMicroLocationFingerprint,CLMicroLocationResultInternal>>::__emplace_back_slow_path<CLMicroLocationFingerprint const&,CLMicroLocationResultInternal&>(uint64_t *a1, uint64_t a2, _OWORD *a3)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  uint64_t v13;
  void *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t *v19;

  v4 = *a1;
  v5 = 0x6DB6DB6DB6DB6DB7 * ((a1[1] - *a1) >> 5);
  v6 = v5 + 1;
  if ((unint64_t)(v5 + 1) > 0x124924924924924)
    std::vector<CLMicroLocationProto::ConfidenceReason>::__throw_length_error[abi:ne180100]();
  v9 = (uint64_t)(a1 + 2);
  v10 = 0x6DB6DB6DB6DB6DB7 * ((a1[2] - v4) >> 5);
  if (2 * v10 > v6)
    v6 = 2 * v10;
  if (v10 >= 0x92492492492492)
    v11 = 0x124924924924924;
  else
    v11 = v6;
  v19 = a1 + 2;
  if (v11)
    v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<CLMicroLocationFingerprint,CLMicroLocationResultInternal>>>(v9, v11);
  else
    v12 = 0;
  v15 = v12;
  v16 = &v12[224 * v5];
  v18 = &v12[224 * v11];
  std::pair<CLMicroLocationFingerprint,CLMicroLocationResultInternal>::pair[abi:ne180100]<CLMicroLocationFingerprint const&,CLMicroLocationResultInternal&,0>((uint64_t)v16, a2, a3);
  v17 = v16 + 224;
  std::vector<std::pair<CLMicroLocationFingerprint,CLMicroLocationResultInternal>>::__swap_out_circular_buffer(a1, &v15);
  v13 = a1[1];
  std::__split_buffer<std::pair<CLMicroLocationFingerprint,CLMicroLocationResultInternal>>::~__split_buffer(&v15);
  return v13;
}

void sub_241B453B8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::pair<CLMicroLocationFingerprint,CLMicroLocationResultInternal>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t std::pair<CLMicroLocationFingerprint,CLMicroLocationResultInternal>::pair[abi:ne180100]<CLMicroLocationFingerprint const&,CLMicroLocationResultInternal&,0>(uint64_t a1, uint64_t a2, _OWORD *a3)
{
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  int v9;
  __int128 v10;

  v6 = std::unordered_set<CLMicroLocationFingerprint::Measurement,CLMicroLocationFingerprint::Measurement::HashMeasurement,CLMicroLocationFingerprint::Measurement::PredicateMeasurement,std::allocator<CLMicroLocationFingerprint::Measurement>>::unordered_set(a1, a2);
  v7 = *(_OWORD *)(a2 + 40);
  *(_QWORD *)(v6 + 56) = *(_QWORD *)(a2 + 56);
  *(_OWORD *)(v6 + 40) = v7;
  std::unordered_set<CLMicroLocationProto::DataType>::unordered_set(v6 + 64, a2 + 64);
  std::unordered_map<CLMicroLocationProto::DataType,CLMicroLocationFingerprint::StartAndEndTimestamps>::unordered_map(a1 + 104, a2 + 104);
  v8 = *(_OWORD *)(a2 + 144);
  v9 = *(_DWORD *)(a2 + 160);
  *(_QWORD *)(a1 + 168) = 0;
  *(_DWORD *)(a1 + 160) = v9;
  *(_OWORD *)(a1 + 144) = v8;
  *(_QWORD *)(a1 + 176) = 0;
  *(_QWORD *)(a1 + 184) = 0;
  std::vector<CLMicroLocationProto::ConfidenceReason>::__init_with_size[abi:ne180100]<CLMicroLocationProto::ConfidenceReason*,CLMicroLocationProto::ConfidenceReason*>((_QWORD *)(a1 + 168), *(const void **)(a2 + 168), *(_QWORD *)(a2 + 176), (uint64_t)(*(_QWORD *)(a2 + 176) - *(_QWORD *)(a2 + 168)) >> 2);
  v10 = a3[1];
  *(_OWORD *)(a1 + 192) = *a3;
  *(_OWORD *)(a1 + 208) = v10;
  return a1;
}

void sub_241B4546C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>>>::~__hash_table(v3);
  std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>>>::~__hash_table(v2);
  std::__hash_table<CLMicroLocationFingerprint::Measurement,CLMicroLocationFingerprint::Measurement::HashMeasurement,CLMicroLocationFingerprint::Measurement::PredicateMeasurement,std::allocator<CLMicroLocationFingerprint::Measurement>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::pair<CLMicroLocationFingerprint,CLMicroLocationResultInternal>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::pair<CLMicroLocationFingerprint,CLMicroLocationResultInternal>>,std::reverse_iterator<std::pair<CLMicroLocationFingerprint,CLMicroLocationResultInternal>*>,std::reverse_iterator<std::pair<CLMicroLocationFingerprint,CLMicroLocationResultInternal>*>,std::reverse_iterator<std::pair<CLMicroLocationFingerprint,CLMicroLocationResultInternal>*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<CLMicroLocationFingerprint,CLMicroLocationResultInternal>>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x124924924924925)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(224 * a2);
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::pair<CLMicroLocationFingerprint,CLMicroLocationResultInternal>>,std::reverse_iterator<std::pair<CLMicroLocationFingerprint,CLMicroLocationResultInternal>*>,std::reverse_iterator<std::pair<CLMicroLocationFingerprint,CLMicroLocationResultInternal>*>,std::reverse_iterator<std::pair<CLMicroLocationFingerprint,CLMicroLocationResultInternal>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[3];
  char v13;
  __int128 v14;
  __int128 v15;

  v7 = a7;
  *(_QWORD *)&v15 = a6;
  *((_QWORD *)&v15 + 1) = a7;
  v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  v13 = 0;
  if (a3 == a5)
  {
    v10 = a6;
  }
  else
  {
    v9 = a3;
    do
    {
      v9 -= 224;
      std::pair<CLMicroLocationFingerprint,CLMicroLocationResultInternal>::pair[abi:ne180100](v7 - 224, v9);
      v7 = *((_QWORD *)&v15 + 1) - 224;
      *((_QWORD *)&v15 + 1) -= 224;
    }
    while (v9 != a5);
    v10 = v15;
  }
  v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<CLMicroLocationFingerprint,CLMicroLocationResultInternal>>,std::reverse_iterator<std::pair<CLMicroLocationFingerprint,CLMicroLocationResultInternal>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return v10;
}

uint64_t std::pair<CLMicroLocationFingerprint,CLMicroLocationResultInternal>::pair[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;

  v4 = std::__hash_table<CLMicroLocationFingerprint::Measurement,CLMicroLocationFingerprint::Measurement::HashMeasurement,CLMicroLocationFingerprint::Measurement::PredicateMeasurement,std::allocator<CLMicroLocationFingerprint::Measurement>>::__hash_table(a1, (uint64_t *)a2);
  v5 = *(_OWORD *)(a2 + 40);
  *(_QWORD *)(v4 + 56) = *(_QWORD *)(a2 + 56);
  *(_OWORD *)(v4 + 40) = v5;
  std::__hash_table<CLMicroLocationFingerprint::Measurement,CLMicroLocationFingerprint::Measurement::HashMeasurement,CLMicroLocationFingerprint::Measurement::PredicateMeasurement,std::allocator<CLMicroLocationFingerprint::Measurement>>::__hash_table(v4 + 64, (uint64_t *)(a2 + 64));
  std::__hash_table<CLMicroLocationFingerprint::Measurement,CLMicroLocationFingerprint::Measurement::HashMeasurement,CLMicroLocationFingerprint::Measurement::PredicateMeasurement,std::allocator<CLMicroLocationFingerprint::Measurement>>::__hash_table(a1 + 104, (uint64_t *)(a2 + 104));
  v6 = *(_OWORD *)(a2 + 144);
  *(_DWORD *)(a1 + 160) = *(_DWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 144) = v6;
  *(_QWORD *)(a1 + 176) = 0;
  *(_QWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 168) = 0;
  *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
  *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
  *(_QWORD *)(a2 + 168) = 0;
  *(_QWORD *)(a2 + 176) = 0;
  *(_QWORD *)(a2 + 184) = 0;
  v7 = *(_OWORD *)(a2 + 208);
  *(_OWORD *)(a1 + 192) = *(_OWORD *)(a2 + 192);
  *(_OWORD *)(a1 + 208) = v7;
  return a1;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<CLMicroLocationFingerprint,CLMicroLocationResultInternal>>,std::reverse_iterator<std::pair<CLMicroLocationFingerprint,CLMicroLocationResultInternal>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<CLMicroLocationFingerprint,CLMicroLocationResultInternal>>,std::reverse_iterator<std::pair<CLMicroLocationFingerprint,CLMicroLocationResultInternal>*>>::operator()[abi:ne180100]((uint64_t *)a1);
  return a1;
}

uint64_t *std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<CLMicroLocationFingerprint,CLMicroLocationResultInternal>>,std::reverse_iterator<std::pair<CLMicroLocationFingerprint,CLMicroLocationResultInternal>*>>::operator()[abi:ne180100](uint64_t *result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(result[2] + 8);
  v2 = *(_QWORD *)(result[1] + 8);
  if (v1 != v2)
  {
    v3 = *result;
    do
    {
      result = (uint64_t *)std::allocator<CLMicroLocationFingerprint>::destroy[abi:ne180100](v3, v1);
      v1 += 224;
    }
    while (v1 != v2);
  }
  return result;
}

void **std::__split_buffer<std::pair<CLMicroLocationFingerprint,CLMicroLocationResultInternal>>::~__split_buffer(void **a1)
{
  std::__split_buffer<std::pair<CLMicroLocationFingerprint,CLMicroLocationResultInternal>>::clear[abi:ne180100]((uint64_t)a1);
  if (*a1)
    operator delete(*a1);
  return a1;
}

uint64_t std::__split_buffer<std::pair<CLMicroLocationFingerprint,CLMicroLocationResultInternal>>::clear[abi:ne180100](uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(_QWORD *)(result + 8);
  v1 = *(_QWORD *)(result + 16);
  if (v1 != v2)
  {
    v3 = result;
    do
    {
      v4 = *(_QWORD *)(v3 + 32);
      *(_QWORD *)(v3 + 16) = v1 - 224;
      result = std::allocator<CLMicroLocationFingerprint>::destroy[abi:ne180100](v4, v1 - 224);
      v1 = *(_QWORD *)(v3 + 16);
    }
    while (v1 != v2);
  }
  return result;
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,CLMicroLocationSemiSupervisedAlgorithm::learnSelfTrainingSemiSupervisedModel(NSMutableDictionary *,ULDatabase &,std::function<BOOL ()(void)>,std::vector<CLMicroLocationRecordingLabelsTable::Entry> &,std::vector<CLMicroLocationRecordingEventsTable::Entry> &,std::vector<CLMicroLocationRecordingEventsTable::Entry> &,CLMicroLocationAnchorAppearanceMap const&,CLMicroLocationClientUtils::ClientIdAndClientServiceId const&,CLMicroLocationFingerprintPool &,boost::uuids::uuid)::$_5 &,std::pair<CLMicroLocationFingerprint,CLMicroLocationResultInternal> *,false>(uint64_t result, char *a2, uint64_t a3, char a4)
{
  _OWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _OWORD *v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  double v18;
  char *v19;
  char *v20;
  unint64_t v21;
  double v22;
  char *v23;
  double v24;
  unint64_t v25;
  unint64_t v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  double v30;
  double v31;
  uint64_t v32;
  BOOL v33;
  double *v34;
  double v35;
  double *v36;
  double v37;
  unint64_t v38;
  char *v39;
  double v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  double v44;
  double v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  uint64_t v58;
  uint64_t v59;
  double *v60;
  double v61;
  double v62;
  uint64_t v63;
  double v64;
  uint64_t v65;
  int64_t v66;
  int64_t v67;
  int64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v86;
  uint64_t v87;
  _OWORD *v88;
  double v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  _BYTE v93[64];
  uint64_t v94;
  uint64_t v95;
  void *v96;
  void *v97;
  _BYTE v98[64];
  _BYTE v99[40];
  _BYTE v100[64];
  void *__p;
  void *v102;
  double v103;
  uint64_t v104;

  v7 = (_OWORD *)result;
  v104 = *MEMORY[0x24BDAC8D0];
LABEL_2:
  v8 = (uint64_t)(a2 - 224);
  v90 = (uint64_t)(a2 - 672);
  v91 = (uint64_t)(a2 - 448);
  v9 = (unint64_t)v7;
  v92 = a2;
  while (2)
  {
    v7 = (_OWORD *)v9;
    v10 = (uint64_t)&a2[-v9];
    v11 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)&a2[-v9] >> 5);
    switch(v11)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        if (*((double *)a2 - 2) > *((double *)v7 + 26))
        {
          result = std::swap[abi:ne180100]<CLMicroLocationFingerprint>((uint64_t)v7, v8);
          v46 = v7[13];
          *(_OWORD *)v98 = v7[12];
          v47 = *(_OWORD *)v98;
          *(_OWORD *)&v98[16] = v46;
          v48 = *(_OWORD *)(a2 - 20);
          v7[12] = *((_OWORD *)a2 - 2);
          *(_OWORD *)((char *)v7 + 204) = v48;
          *(_OWORD *)(a2 - 20) = *(_OWORD *)&v98[12];
          *((_OWORD *)a2 - 2) = v47;
        }
        return result;
      case 3uLL:
        return std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,CLMicroLocationSemiSupervisedAlgorithm::learnSelfTrainingSemiSupervisedModel(NSMutableDictionary *,ULDatabase &,std::function<BOOL ()(void)>,std::vector<CLMicroLocationRecordingLabelsTable::Entry> &,std::vector<CLMicroLocationRecordingEventsTable::Entry> &,std::vector<CLMicroLocationRecordingEventsTable::Entry> &,CLMicroLocationAnchorAppearanceMap const&,CLMicroLocationClientUtils::ClientIdAndClientServiceId const&,CLMicroLocationFingerprintPool &,boost::uuids::uuid)::$_5 &,std::pair<CLMicroLocationFingerprint,CLMicroLocationResultInternal> *>((uint64_t)v7, (uint64_t)(v7 + 14), v8);
      case 4uLL:
        return std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,CLMicroLocationSemiSupervisedAlgorithm::learnSelfTrainingSemiSupervisedModel(NSMutableDictionary *,ULDatabase &,std::function<BOOL ()(void)>,std::vector<CLMicroLocationRecordingLabelsTable::Entry> &,std::vector<CLMicroLocationRecordingEventsTable::Entry> &,std::vector<CLMicroLocationRecordingEventsTable::Entry> &,CLMicroLocationAnchorAppearanceMap const&,CLMicroLocationClientUtils::ClientIdAndClientServiceId const&,CLMicroLocationFingerprintPool &,boost::uuids::uuid)::$_5 &,std::pair<CLMicroLocationFingerprint,CLMicroLocationResultInternal> *>(v7, v7 + 14, v7 + 28, v8);
      case 5uLL:
        result = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,CLMicroLocationSemiSupervisedAlgorithm::learnSelfTrainingSemiSupervisedModel(NSMutableDictionary *,ULDatabase &,std::function<BOOL ()(void)>,std::vector<CLMicroLocationRecordingLabelsTable::Entry> &,std::vector<CLMicroLocationRecordingEventsTable::Entry> &,std::vector<CLMicroLocationRecordingEventsTable::Entry> &,CLMicroLocationAnchorAppearanceMap const&,CLMicroLocationClientUtils::ClientIdAndClientServiceId const&,CLMicroLocationFingerprintPool &,boost::uuids::uuid)::$_5 &,std::pair<CLMicroLocationFingerprint,CLMicroLocationResultInternal> *>(v7, v7 + 14, v7 + 28, (uint64_t)(v7 + 42));
        if (*((double *)a2 - 2) > *((double *)v7 + 110))
        {
          result = std::swap[abi:ne180100]<CLMicroLocationFingerprint>((uint64_t)(v7 + 42), v8);
          v49 = v7[55];
          *(_OWORD *)v98 = v7[54];
          v50 = *(_OWORD *)v98;
          *(_OWORD *)&v98[16] = v49;
          v51 = *(_OWORD *)(a2 - 20);
          v7[54] = *((_OWORD *)a2 - 2);
          *(_OWORD *)((char *)v7 + 876) = v51;
          *(_OWORD *)(a2 - 20) = *(_OWORD *)&v98[12];
          *((_OWORD *)a2 - 2) = v50;
          if (*((double *)v7 + 110) > *((double *)v7 + 82))
          {
            result = std::swap[abi:ne180100]<CLMicroLocationFingerprint>((uint64_t)(v7 + 28), (uint64_t)(v7 + 42));
            v52 = v7[41];
            *(_OWORD *)v98 = v7[40];
            v53 = *(_OWORD *)v98;
            *(_OWORD *)&v98[16] = v52;
            v7[40] = v7[54];
            *(_OWORD *)((char *)v7 + 652) = *(_OWORD *)((char *)v7 + 876);
            v7[54] = v53;
            *(_OWORD *)((char *)v7 + 876) = *(_OWORD *)&v98[12];
            if (*((double *)v7 + 82) > *((double *)v7 + 54))
            {
              result = std::swap[abi:ne180100]<CLMicroLocationFingerprint>((uint64_t)(v7 + 14), (uint64_t)(v7 + 28));
              v54 = v7[27];
              *(_OWORD *)v98 = v7[26];
              v55 = *(_OWORD *)v98;
              *(_OWORD *)&v98[16] = v54;
              v7[26] = v7[40];
              *(_OWORD *)((char *)v7 + 428) = *(_OWORD *)((char *)v7 + 652);
              v7[40] = v55;
              *(_OWORD *)((char *)v7 + 652) = *(_OWORD *)&v98[12];
              if (*((double *)v7 + 54) > *((double *)v7 + 26))
              {
                result = std::swap[abi:ne180100]<CLMicroLocationFingerprint>((uint64_t)v7, (uint64_t)(v7 + 14));
                v56 = v7[13];
                *(_OWORD *)v98 = v7[12];
                v57 = *(_OWORD *)v98;
                *(_OWORD *)&v98[16] = v56;
                v7[12] = v7[26];
                *(_OWORD *)((char *)v7 + 204) = *(_OWORD *)((char *)v7 + 428);
                v7[26] = v57;
                *(_OWORD *)((char *)v7 + 428) = *(_OWORD *)&v98[12];
              }
            }
          }
        }
        return result;
      default:
        if (v10 <= 5375)
        {
          if ((a4 & 1) != 0)
          {
            if (v7 != (_OWORD *)a2)
            {
              v58 = (uint64_t)(v7 + 14);
              if (v7 + 14 != (_OWORD *)a2)
              {
                v59 = 0;
                v60 = (double *)v7;
                do
                {
                  v61 = v60[54];
                  v62 = v60[26];
                  v60 = (double *)v58;
                  if (v61 > v62)
                  {
                    std::pair<CLMicroLocationFingerprint,CLMicroLocationResultInternal>::pair[abi:ne180100]((uint64_t)v98, v58);
                    v63 = v59;
                    while (1)
                    {
                      std::pair<CLMicroLocationFingerprint,CLMicroLocationResultInternal>::operator=[abi:ne180100]((uint64_t)v7 + v63 + 224, (uint64_t)v7 + v63);
                      if (!v63)
                        break;
                      v64 = *(double *)((char *)v7 + v63 - 16);
                      v63 -= 224;
                      if (v103 <= v64)
                      {
                        v65 = (uint64_t)v7 + v63 + 224;
                        goto LABEL_79;
                      }
                    }
                    v65 = (uint64_t)v7;
LABEL_79:
                    std::pair<CLMicroLocationFingerprint,CLMicroLocationResultInternal>::operator=[abi:ne180100](v65, (uint64_t)v98);
                    if (__p)
                    {
                      v102 = __p;
                      operator delete(__p);
                    }
                    std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>>>::~__hash_table((uint64_t)v100);
                    std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>>>::~__hash_table((uint64_t)v99);
                    result = std::__hash_table<CLMicroLocationFingerprint::Measurement,CLMicroLocationFingerprint::Measurement::HashMeasurement,CLMicroLocationFingerprint::Measurement::PredicateMeasurement,std::allocator<CLMicroLocationFingerprint::Measurement>>::~__hash_table((uint64_t)v98);
                  }
                  v58 = (uint64_t)(v60 + 28);
                  v59 += 224;
                }
                while (v60 + 28 != (double *)a2);
              }
            }
          }
          else if (v7 != (_OWORD *)a2)
          {
            v86 = (uint64_t)(v7 + 14);
            if (v7 + 14 != (_OWORD *)a2)
            {
              do
              {
                v87 = v86;
                if (*((double *)v7 + 54) > *((double *)v7 + 26))
                {
                  std::pair<CLMicroLocationFingerprint,CLMicroLocationResultInternal>::pair[abi:ne180100]((uint64_t)v98, v86);
                  do
                  {
                    std::pair<CLMicroLocationFingerprint,CLMicroLocationResultInternal>::operator=[abi:ne180100]((uint64_t)(v7 + 14), (uint64_t)v7);
                    v88 = v7 - 14;
                    v89 = *((double *)v7 - 2);
                    v7 -= 14;
                  }
                  while (v103 > v89);
                  std::pair<CLMicroLocationFingerprint,CLMicroLocationResultInternal>::operator=[abi:ne180100]((uint64_t)(v88 + 14), (uint64_t)v98);
                  if (__p)
                  {
                    v102 = __p;
                    operator delete(__p);
                  }
                  std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>>>::~__hash_table((uint64_t)v100);
                  std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>>>::~__hash_table((uint64_t)v99);
                  result = std::__hash_table<CLMicroLocationFingerprint::Measurement,CLMicroLocationFingerprint::Measurement::HashMeasurement,CLMicroLocationFingerprint::Measurement::PredicateMeasurement,std::allocator<CLMicroLocationFingerprint::Measurement>>::~__hash_table((uint64_t)v98);
                }
                v86 = v87 + 224;
                v7 = (_OWORD *)v87;
              }
              while ((char *)(v87 + 224) != a2);
            }
          }
          return result;
        }
        if (!a3)
        {
          if (v7 != (_OWORD *)a2)
          {
            v66 = (v11 - 2) >> 1;
            v67 = v66;
            do
            {
              v68 = v67;
              if (v66 >= v67)
              {
                v69 = (2 * v67) | 1;
                v70 = (uint64_t)&v7[14 * v69];
                if (2 * v67 + 2 < (uint64_t)v11 && *(double *)&v7[14 * v69 + 13] > *(double *)(v70 + 432))
                {
                  v70 += 224;
                  v69 = 2 * v67 + 2;
                }
                if (*(double *)(v70 + 208) <= *(double *)&v7[14 * v67 + 13])
                {
                  v71 = (uint64_t)&v7[14 * v67];
                  std::pair<CLMicroLocationFingerprint,CLMicroLocationResultInternal>::pair[abi:ne180100]((uint64_t)v98, v71);
                  do
                  {
                    v72 = v70;
                    std::pair<CLMicroLocationFingerprint,CLMicroLocationResultInternal>::operator=[abi:ne180100](v71, v70);
                    if (v66 < v69)
                      break;
                    v73 = (2 * v69) | 1;
                    v70 = (uint64_t)&v7[14 * v73];
                    if (2 * v69 + 2 < (uint64_t)v11 && *(double *)&v7[14 * v73 + 13] > *(double *)(v70 + 432))
                    {
                      v70 += 224;
                      v73 = 2 * v69 + 2;
                    }
                    v71 = v72;
                    v69 = v73;
                  }
                  while (*(double *)(v70 + 208) <= v103);
                  std::pair<CLMicroLocationFingerprint,CLMicroLocationResultInternal>::operator=[abi:ne180100](v72, (uint64_t)v98);
                  if (__p)
                  {
                    v102 = __p;
                    operator delete(__p);
                  }
                  std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>>>::~__hash_table((uint64_t)v100);
                  std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>>>::~__hash_table((uint64_t)v99);
                  std::__hash_table<CLMicroLocationFingerprint::Measurement,CLMicroLocationFingerprint::Measurement::HashMeasurement,CLMicroLocationFingerprint::Measurement::PredicateMeasurement,std::allocator<CLMicroLocationFingerprint::Measurement>>::~__hash_table((uint64_t)v98);
                }
              }
              v67 = v68 - 1;
            }
            while (v68);
            v74 = (((unint64_t)v10 >> 5) * (unsigned __int128)0x2492492492492493uLL) >> 64;
            v75 = (uint64_t)v92;
            do
            {
              std::pair<CLMicroLocationFingerprint,CLMicroLocationResultInternal>::pair[abi:ne180100]((uint64_t)v93, (uint64_t)v7);
              v76 = 0;
              v77 = (uint64_t)v7;
              do
              {
                v78 = v77;
                v79 = v76 + 1;
                v77 += 224 * (v76 + 1);
                v80 = 2 * v76;
                v76 = (2 * v76) | 1;
                v81 = v80 + 2;
                if (v81 < v74 && *(double *)(v78 + 224 * v79 + 208) > *(double *)(v77 + 432))
                {
                  v77 += 224;
                  v76 = v81;
                }
                std::pair<CLMicroLocationFingerprint,CLMicroLocationResultInternal>::operator=[abi:ne180100](v78, v77);
              }
              while (v76 <= (uint64_t)((unint64_t)(v74 - 2) >> 1));
              v75 -= 224;
              if (v77 == v75)
              {
                std::pair<CLMicroLocationFingerprint,CLMicroLocationResultInternal>::operator=[abi:ne180100](v77, (uint64_t)v93);
              }
              else
              {
                std::pair<CLMicroLocationFingerprint,CLMicroLocationResultInternal>::operator=[abi:ne180100](v77, v75);
                std::pair<CLMicroLocationFingerprint,CLMicroLocationResultInternal>::operator=[abi:ne180100](v75, (uint64_t)v93);
                v82 = v77 - (_QWORD)v7 + 224;
                if (v82 >= 225)
                {
                  v83 = (unint64_t)(((((unint64_t)v82 >> 5) * (unsigned __int128)0x2492492492492493uLL) >> 64)
                                         - 2) >> 1;
                  if (*(double *)&v7[14 * v83 + 13] > *(double *)(v77 + 208))
                  {
                    std::pair<CLMicroLocationFingerprint,CLMicroLocationResultInternal>::pair[abi:ne180100]((uint64_t)v98, v77);
                    do
                    {
                      v84 = v77;
                      v77 = (uint64_t)&v7[14 * v83];
                      std::pair<CLMicroLocationFingerprint,CLMicroLocationResultInternal>::operator=[abi:ne180100](v84, v77);
                      if (!v83)
                        break;
                      v83 = (v83 - 1) >> 1;
                    }
                    while (*(double *)&v7[14 * v83 + 13] > v103);
                    std::pair<CLMicroLocationFingerprint,CLMicroLocationResultInternal>::operator=[abi:ne180100](v77, (uint64_t)v98);
                    if (__p)
                    {
                      v102 = __p;
                      operator delete(__p);
                    }
                    std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>>>::~__hash_table((uint64_t)v100);
                    std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>>>::~__hash_table((uint64_t)v99);
                    std::__hash_table<CLMicroLocationFingerprint::Measurement,CLMicroLocationFingerprint::Measurement::HashMeasurement,CLMicroLocationFingerprint::Measurement::PredicateMeasurement,std::allocator<CLMicroLocationFingerprint::Measurement>>::~__hash_table((uint64_t)v98);
                  }
                }
              }
              if (v96)
              {
                v97 = v96;
                operator delete(v96);
              }
              std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>>>::~__hash_table((uint64_t)&v95);
              std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>>>::~__hash_table((uint64_t)&v94);
              result = std::__hash_table<CLMicroLocationFingerprint::Measurement,CLMicroLocationFingerprint::Measurement::HashMeasurement,CLMicroLocationFingerprint::Measurement::PredicateMeasurement,std::allocator<CLMicroLocationFingerprint::Measurement>>::~__hash_table((uint64_t)v93);
            }
            while (v74-- > 2);
          }
          return result;
        }
        if ((unint64_t)v10 <= 0x7000)
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,CLMicroLocationSemiSupervisedAlgorithm::learnSelfTrainingSemiSupervisedModel(NSMutableDictionary *,ULDatabase &,std::function<BOOL ()(void)>,std::vector<CLMicroLocationRecordingLabelsTable::Entry> &,std::vector<CLMicroLocationRecordingEventsTable::Entry> &,std::vector<CLMicroLocationRecordingEventsTable::Entry> &,CLMicroLocationAnchorAppearanceMap const&,CLMicroLocationClientUtils::ClientIdAndClientServiceId const&,CLMicroLocationFingerprintPool &,boost::uuids::uuid)::$_5 &,std::pair<CLMicroLocationFingerprint,CLMicroLocationResultInternal> *>((uint64_t)&v7[14 * (v11 >> 1)], (uint64_t)v7, v8);
        }
        else
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,CLMicroLocationSemiSupervisedAlgorithm::learnSelfTrainingSemiSupervisedModel(NSMutableDictionary *,ULDatabase &,std::function<BOOL ()(void)>,std::vector<CLMicroLocationRecordingLabelsTable::Entry> &,std::vector<CLMicroLocationRecordingEventsTable::Entry> &,std::vector<CLMicroLocationRecordingEventsTable::Entry> &,CLMicroLocationAnchorAppearanceMap const&,CLMicroLocationClientUtils::ClientIdAndClientServiceId const&,CLMicroLocationFingerprintPool &,boost::uuids::uuid)::$_5 &,std::pair<CLMicroLocationFingerprint,CLMicroLocationResultInternal> *>((uint64_t)v7, (uint64_t)&v7[14 * (v11 >> 1)], v8);
          v12 = 14 * (v11 >> 1);
          v13 = &v7[v12];
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,CLMicroLocationSemiSupervisedAlgorithm::learnSelfTrainingSemiSupervisedModel(NSMutableDictionary *,ULDatabase &,std::function<BOOL ()(void)>,std::vector<CLMicroLocationRecordingLabelsTable::Entry> &,std::vector<CLMicroLocationRecordingEventsTable::Entry> &,std::vector<CLMicroLocationRecordingEventsTable::Entry> &,CLMicroLocationAnchorAppearanceMap const&,CLMicroLocationClientUtils::ClientIdAndClientServiceId const&,CLMicroLocationFingerprintPool &,boost::uuids::uuid)::$_5 &,std::pair<CLMicroLocationFingerprint,CLMicroLocationResultInternal> *>((uint64_t)(v7 + 14), (uint64_t)&v7[v12 - 14], v91);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,CLMicroLocationSemiSupervisedAlgorithm::learnSelfTrainingSemiSupervisedModel(NSMutableDictionary *,ULDatabase &,std::function<BOOL ()(void)>,std::vector<CLMicroLocationRecordingLabelsTable::Entry> &,std::vector<CLMicroLocationRecordingEventsTable::Entry> &,std::vector<CLMicroLocationRecordingEventsTable::Entry> &,CLMicroLocationAnchorAppearanceMap const&,CLMicroLocationClientUtils::ClientIdAndClientServiceId const&,CLMicroLocationFingerprintPool &,boost::uuids::uuid)::$_5 &,std::pair<CLMicroLocationFingerprint,CLMicroLocationResultInternal> *>((uint64_t)(v7 + 28), (uint64_t)&v7[v12 + 14], v90);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,CLMicroLocationSemiSupervisedAlgorithm::learnSelfTrainingSemiSupervisedModel(NSMutableDictionary *,ULDatabase &,std::function<BOOL ()(void)>,std::vector<CLMicroLocationRecordingLabelsTable::Entry> &,std::vector<CLMicroLocationRecordingEventsTable::Entry> &,std::vector<CLMicroLocationRecordingEventsTable::Entry> &,CLMicroLocationAnchorAppearanceMap const&,CLMicroLocationClientUtils::ClientIdAndClientServiceId const&,CLMicroLocationFingerprintPool &,boost::uuids::uuid)::$_5 &,std::pair<CLMicroLocationFingerprint,CLMicroLocationResultInternal> *>((uint64_t)&v7[v12 - 14], (uint64_t)&v7[v12], (uint64_t)&v7[v12 + 14]);
          std::swap[abi:ne180100]<CLMicroLocationFingerprint>((uint64_t)v7, (uint64_t)&v7[v12]);
          v14 = v7[13];
          *(_OWORD *)v98 = v7[12];
          v15 = *(_OWORD *)v98;
          *(_OWORD *)&v98[16] = v14;
          v16 = v7[v12 + 12];
          *(_OWORD *)((char *)v7 + 204) = *(_OWORD *)((char *)&v7[v12 + 12] + 12);
          v7[12] = v16;
          *(_OWORD *)((char *)v13 + 204) = *(_OWORD *)&v98[12];
          v13[12] = v15;
          a2 = v92;
        }
        --a3;
        if ((a4 & 1) == 0 && *((double *)v7 - 2) <= *((double *)v7 + 26))
        {
          std::pair<CLMicroLocationFingerprint,CLMicroLocationResultInternal>::pair[abi:ne180100]((uint64_t)v98, (uint64_t)v7);
          if (v103 <= *((double *)a2 - 2))
          {
            v36 = (double *)(v7 + 14);
            do
            {
              v9 = (unint64_t)v36;
              if (v36 >= (double *)a2)
                break;
              v37 = v36[26];
              v36 += 28;
            }
            while (v103 <= v37);
          }
          else
          {
            v34 = (double *)v7;
            do
            {
              v9 = (unint64_t)(v34 + 28);
              v35 = v34[54];
              v34 += 28;
            }
            while (v103 <= v35);
          }
          v38 = (unint64_t)a2;
          if (v9 < (unint64_t)a2)
          {
            v39 = a2;
            do
            {
              v38 = (unint64_t)(v39 - 224);
              v40 = *((double *)v39 - 2);
              v39 -= 224;
            }
            while (v103 > v40);
          }
          while (v9 < v38)
          {
            std::swap[abi:ne180100]<CLMicroLocationFingerprint>(v9, v38);
            v41 = *(_OWORD *)(v9 + 208);
            *(_OWORD *)v93 = *(_OWORD *)(v9 + 192);
            v42 = *(_OWORD *)v93;
            *(_OWORD *)&v93[16] = v41;
            v43 = *(_OWORD *)(v38 + 204);
            *(_OWORD *)(v9 + 192) = *(_OWORD *)(v38 + 192);
            *(_OWORD *)(v9 + 204) = v43;
            *(_OWORD *)(v38 + 192) = v42;
            *(_OWORD *)(v38 + 204) = *(_OWORD *)&v93[12];
            do
            {
              v44 = *(double *)(v9 + 432);
              v9 += 224;
            }
            while (v103 <= v44);
            do
            {
              v45 = *(double *)(v38 - 16);
              v38 -= 224;
            }
            while (v103 > v45);
          }
          if ((_OWORD *)(v9 - 224) != v7)
            std::pair<CLMicroLocationFingerprint,CLMicroLocationResultInternal>::operator=[abi:ne180100]((uint64_t)v7, v9 - 224);
          std::pair<CLMicroLocationFingerprint,CLMicroLocationResultInternal>::operator=[abi:ne180100](v9 - 224, (uint64_t)v98);
          if (__p)
          {
            v102 = __p;
            operator delete(__p);
          }
          std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>>>::~__hash_table((uint64_t)v100);
          std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>>>::~__hash_table((uint64_t)v99);
          result = std::__hash_table<CLMicroLocationFingerprint::Measurement,CLMicroLocationFingerprint::Measurement::HashMeasurement,CLMicroLocationFingerprint::Measurement::PredicateMeasurement,std::allocator<CLMicroLocationFingerprint::Measurement>>::~__hash_table((uint64_t)v98);
          a4 = 0;
          continue;
        }
        std::pair<CLMicroLocationFingerprint,CLMicroLocationResultInternal>::pair[abi:ne180100]((uint64_t)v98, (uint64_t)v7);
        v17 = 0;
        do
        {
          v18 = *(double *)&v7[v17 + 27];
          v17 += 14;
        }
        while (v18 > v103);
        v19 = (char *)&v7[v17];
        v20 = a2;
        if (v17 == 14)
        {
          v23 = a2;
          while (v19 < v23)
          {
            v21 = (unint64_t)(v23 - 224);
            v24 = *((double *)v23 - 2);
            v23 -= 224;
            if (v24 > v103)
              goto LABEL_21;
          }
          v21 = (unint64_t)v23;
        }
        else
        {
          do
          {
            v21 = (unint64_t)(v20 - 224);
            v22 = *((double *)v20 - 2);
            v20 -= 224;
          }
          while (v22 <= v103);
        }
LABEL_21:
        if ((unint64_t)v19 >= v21)
        {
          v32 = (uint64_t)(v19 - 224);
        }
        else
        {
          v25 = (unint64_t)v19;
          v26 = v21;
          do
          {
            std::swap[abi:ne180100]<CLMicroLocationFingerprint>(v25, v26);
            v27 = *(_OWORD *)(v25 + 208);
            *(_OWORD *)v93 = *(_OWORD *)(v25 + 192);
            v28 = *(_OWORD *)v93;
            *(_OWORD *)&v93[16] = v27;
            v29 = *(_OWORD *)(v26 + 204);
            *(_OWORD *)(v25 + 192) = *(_OWORD *)(v26 + 192);
            *(_OWORD *)(v25 + 204) = v29;
            *(_OWORD *)(v26 + 192) = v28;
            *(_OWORD *)(v26 + 204) = *(_OWORD *)&v93[12];
            do
            {
              v30 = *(double *)(v25 + 432);
              v25 += 224;
            }
            while (v30 > v103);
            do
            {
              v31 = *(double *)(v26 - 16);
              v26 -= 224;
            }
            while (v31 <= v103);
          }
          while (v25 < v26);
          v32 = v25 - 224;
        }
        if ((_OWORD *)v32 != v7)
          std::pair<CLMicroLocationFingerprint,CLMicroLocationResultInternal>::operator=[abi:ne180100]((uint64_t)v7, v32);
        std::pair<CLMicroLocationFingerprint,CLMicroLocationResultInternal>::operator=[abi:ne180100](v32, (uint64_t)v98);
        if (__p)
        {
          v102 = __p;
          operator delete(__p);
        }
        std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>>>::~__hash_table((uint64_t)v100);
        std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>>>::~__hash_table((uint64_t)v99);
        std::__hash_table<CLMicroLocationFingerprint::Measurement,CLMicroLocationFingerprint::Measurement::HashMeasurement,CLMicroLocationFingerprint::Measurement::PredicateMeasurement,std::allocator<CLMicroLocationFingerprint::Measurement>>::~__hash_table((uint64_t)v98);
        if ((unint64_t)v19 < v21)
        {
LABEL_36:
          result = std::__introsort<std::_ClassicAlgPolicy,CLMicroLocationSemiSupervisedAlgorithm::learnSelfTrainingSemiSupervisedModel(NSMutableDictionary *,ULDatabase &,std::function<BOOL ()(void)>,std::vector<CLMicroLocationRecordingLabelsTable::Entry> &,std::vector<CLMicroLocationRecordingEventsTable::Entry> &,std::vector<CLMicroLocationRecordingEventsTable::Entry> &,CLMicroLocationAnchorAppearanceMap const&,CLMicroLocationClientUtils::ClientIdAndClientServiceId const&,CLMicroLocationFingerprintPool &,boost::uuids::uuid)::$_5 &,std::pair<CLMicroLocationFingerprint,CLMicroLocationResultInternal> *,false>(v7, v32, a3, a4 & 1);
          a4 = 0;
          v9 = v32 + 224;
          continue;
        }
        v33 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,CLMicroLocationSemiSupervisedAlgorithm::learnSelfTrainingSemiSupervisedModel(NSMutableDictionary *,ULDatabase &,std::function<BOOL ()(void)>,std::vector<CLMicroLocationRecordingLabelsTable::Entry> &,std::vector<CLMicroLocationRecordingEventsTable::Entry> &,std::vector<CLMicroLocationRecordingEventsTable::Entry> &,CLMicroLocationAnchorAppearanceMap const&,CLMicroLocationClientUtils::ClientIdAndClientServiceId const&,CLMicroLocationFingerprintPool &,boost::uuids::uuid)::$_5 &,std::pair<CLMicroLocationFingerprint,CLMicroLocationResultInternal> *>(v7, (char *)v32);
        v9 = v32 + 224;
        result = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,CLMicroLocationSemiSupervisedAlgorithm::learnSelfTrainingSemiSupervisedModel(NSMutableDictionary *,ULDatabase &,std::function<BOOL ()(void)>,std::vector<CLMicroLocationRecordingLabelsTable::Entry> &,std::vector<CLMicroLocationRecordingEventsTable::Entry> &,std::vector<CLMicroLocationRecordingEventsTable::Entry> &,CLMicroLocationAnchorAppearanceMap const&,CLMicroLocationClientUtils::ClientIdAndClientServiceId const&,CLMicroLocationFingerprintPool &,boost::uuids::uuid)::$_5 &,std::pair<CLMicroLocationFingerprint,CLMicroLocationResultInternal> *>((_OWORD *)(v32 + 224), a2);
        if (!(_DWORD)result)
        {
          if (v33)
            continue;
          goto LABEL_36;
        }
        a2 = (char *)v32;
        if (!v33)
          goto LABEL_2;
        return result;
    }
  }
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,CLMicroLocationSemiSupervisedAlgorithm::learnSelfTrainingSemiSupervisedModel(NSMutableDictionary *,ULDatabase &,std::function<BOOL ()(void)>,std::vector<CLMicroLocationRecordingLabelsTable::Entry> &,std::vector<CLMicroLocationRecordingEventsTable::Entry> &,std::vector<CLMicroLocationRecordingEventsTable::Entry> &,CLMicroLocationAnchorAppearanceMap const&,CLMicroLocationClientUtils::ClientIdAndClientServiceId const&,CLMicroLocationFingerprintPool &,boost::uuids::uuid)::$_5 &,std::pair<CLMicroLocationFingerprint,CLMicroLocationResultInternal> *>(uint64_t result, uint64_t a2, uint64_t a3)
{
  _OWORD *v5;
  double v6;
  double v7;
  _OWORD *v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  _BYTE v16[32];
  _BYTE v17[32];
  _BYTE v18[32];
  _BYTE v19[32];

  v5 = (_OWORD *)result;
  v6 = *(double *)(a2 + 208);
  v7 = *(double *)(a3 + 208);
  if (v6 <= *(double *)(result + 208))
  {
    if (v7 > v6)
    {
      result = std::swap[abi:ne180100]<CLMicroLocationFingerprint>(a2, a3);
      *(_OWORD *)v17 = *(_OWORD *)(a2 + 192);
      *(_OWORD *)&v17[16] = *(_OWORD *)(a2 + 208);
      v11 = *(_OWORD *)(a3 + 204);
      *(_OWORD *)(a2 + 192) = *(_OWORD *)(a3 + 192);
      *(_OWORD *)(a2 + 204) = v11;
      *(_OWORD *)(a3 + 192) = *(_OWORD *)v17;
      *(_OWORD *)(a3 + 204) = *(_OWORD *)&v17[12];
      if (*(double *)(a2 + 208) > *((double *)v5 + 26))
      {
        result = std::swap[abi:ne180100]<CLMicroLocationFingerprint>((uint64_t)v5, a2);
        *(_OWORD *)v18 = v5[12];
        *(_OWORD *)&v18[16] = v5[13];
        v12 = *(_OWORD *)(a2 + 204);
        v5[12] = *(_OWORD *)(a2 + 192);
        *(_OWORD *)((char *)v5 + 204) = v12;
        *(_OWORD *)(a2 + 192) = *(_OWORD *)v18;
        *(_OWORD *)(a2 + 204) = *(_OWORD *)&v18[12];
      }
    }
  }
  else
  {
    v8 = (_OWORD *)(result + 192);
    if (v7 <= v6)
    {
      result = std::swap[abi:ne180100]<CLMicroLocationFingerprint>(result, a2);
      *(_OWORD *)v19 = *v8;
      v13 = *v8;
      *(_OWORD *)&v19[16] = v5[13];
      v14 = *(_OWORD *)(a2 + 204);
      *v8 = *(_OWORD *)(a2 + 192);
      *(_OWORD *)((char *)v5 + 204) = v14;
      *(_OWORD *)(a2 + 192) = v13;
      *(_OWORD *)(a2 + 204) = *(_OWORD *)&v19[12];
      if (*(double *)(a3 + 208) <= *(double *)(a2 + 208))
        return result;
      result = std::swap[abi:ne180100]<CLMicroLocationFingerprint>(a2, a3);
      v9 = *(_OWORD *)(a2 + 192);
      *(_DWORD *)&v16[12] = HIDWORD(v9);
      *(_OWORD *)&v16[16] = *(_OWORD *)(a2 + 208);
      v15 = *(_OWORD *)(a3 + 204);
      *(_OWORD *)(a2 + 192) = *(_OWORD *)(a3 + 192);
      *(_OWORD *)(a2 + 204) = v15;
    }
    else
    {
      result = std::swap[abi:ne180100]<CLMicroLocationFingerprint>(result, a3);
      v9 = *v8;
      *(_OWORD *)v16 = *v8;
      *(_OWORD *)&v16[16] = v5[13];
      v10 = *(_OWORD *)(a3 + 204);
      *v8 = *(_OWORD *)(a3 + 192);
      *(_OWORD *)((char *)v5 + 204) = v10;
    }
    *(_OWORD *)(a3 + 192) = v9;
    *(_OWORD *)(a3 + 204) = *(_OWORD *)&v16[12];
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,CLMicroLocationSemiSupervisedAlgorithm::learnSelfTrainingSemiSupervisedModel(NSMutableDictionary *,ULDatabase &,std::function<BOOL ()(void)>,std::vector<CLMicroLocationRecordingLabelsTable::Entry> &,std::vector<CLMicroLocationRecordingEventsTable::Entry> &,std::vector<CLMicroLocationRecordingEventsTable::Entry> &,CLMicroLocationAnchorAppearanceMap const&,CLMicroLocationClientUtils::ClientIdAndClientServiceId const&,CLMicroLocationFingerprintPool &,boost::uuids::uuid)::$_5 &,std::pair<CLMicroLocationFingerprint,CLMicroLocationResultInternal> *>(_OWORD *a1, char *a2)
{
  uint64_t v4;
  _BOOL8 result;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  double *v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  double v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  _BYTE v25[64];
  uint64_t v26;
  uint64_t v27;
  void *__p;
  void *v29;
  double v30;
  uint64_t v31;

  v31 = *MEMORY[0x24BDAC8D0];
  v4 = 0x6DB6DB6DB6DB6DB7 * ((a2 - (char *)a1) >> 5);
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if (*((double *)a2 - 2) > *((double *)a1 + 26))
      {
        std::swap[abi:ne180100]<CLMicroLocationFingerprint>((uint64_t)a1, (uint64_t)(a2 - 224));
        v6 = a1[13];
        *(_OWORD *)v25 = a1[12];
        v7 = *(_OWORD *)v25;
        *(_OWORD *)&v25[16] = v6;
        v8 = *(_OWORD *)(a2 - 20);
        a1[12] = *((_OWORD *)a2 - 2);
        *(_OWORD *)((char *)a1 + 204) = v8;
        *((_OWORD *)a2 - 2) = v7;
        *(_OWORD *)(a2 - 20) = *(_OWORD *)&v25[12];
        return 1;
      }
      return result;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,CLMicroLocationSemiSupervisedAlgorithm::learnSelfTrainingSemiSupervisedModel(NSMutableDictionary *,ULDatabase &,std::function<BOOL ()(void)>,std::vector<CLMicroLocationRecordingLabelsTable::Entry> &,std::vector<CLMicroLocationRecordingEventsTable::Entry> &,std::vector<CLMicroLocationRecordingEventsTable::Entry> &,CLMicroLocationAnchorAppearanceMap const&,CLMicroLocationClientUtils::ClientIdAndClientServiceId const&,CLMicroLocationFingerprintPool &,boost::uuids::uuid)::$_5 &,std::pair<CLMicroLocationFingerprint,CLMicroLocationResultInternal> *>((uint64_t)a1, (uint64_t)(a1 + 14), (uint64_t)(a2 - 224));
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,CLMicroLocationSemiSupervisedAlgorithm::learnSelfTrainingSemiSupervisedModel(NSMutableDictionary *,ULDatabase &,std::function<BOOL ()(void)>,std::vector<CLMicroLocationRecordingLabelsTable::Entry> &,std::vector<CLMicroLocationRecordingEventsTable::Entry> &,std::vector<CLMicroLocationRecordingEventsTable::Entry> &,CLMicroLocationAnchorAppearanceMap const&,CLMicroLocationClientUtils::ClientIdAndClientServiceId const&,CLMicroLocationFingerprintPool &,boost::uuids::uuid)::$_5 &,std::pair<CLMicroLocationFingerprint,CLMicroLocationResultInternal> *>(a1, a1 + 14, a1 + 28, (uint64_t)(a2 - 224));
      return 1;
    case 5:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,CLMicroLocationSemiSupervisedAlgorithm::learnSelfTrainingSemiSupervisedModel(NSMutableDictionary *,ULDatabase &,std::function<BOOL ()(void)>,std::vector<CLMicroLocationRecordingLabelsTable::Entry> &,std::vector<CLMicroLocationRecordingEventsTable::Entry> &,std::vector<CLMicroLocationRecordingEventsTable::Entry> &,CLMicroLocationAnchorAppearanceMap const&,CLMicroLocationClientUtils::ClientIdAndClientServiceId const&,CLMicroLocationFingerprintPool &,boost::uuids::uuid)::$_5 &,std::pair<CLMicroLocationFingerprint,CLMicroLocationResultInternal> *>(a1, a1 + 14, a1 + 28, (uint64_t)(a1 + 42));
      if (*((double *)a2 - 2) > *((double *)a1 + 110))
      {
        std::swap[abi:ne180100]<CLMicroLocationFingerprint>((uint64_t)(a1 + 42), (uint64_t)(a2 - 224));
        v16 = a1[55];
        *(_OWORD *)v25 = a1[54];
        v17 = *(_OWORD *)v25;
        *(_OWORD *)&v25[16] = v16;
        v18 = *(_OWORD *)(a2 - 20);
        a1[54] = *((_OWORD *)a2 - 2);
        *(_OWORD *)((char *)a1 + 876) = v18;
        *((_OWORD *)a2 - 2) = v17;
        *(_OWORD *)(a2 - 20) = *(_OWORD *)&v25[12];
        if (*((double *)a1 + 110) > *((double *)a1 + 82))
        {
          std::swap[abi:ne180100]<CLMicroLocationFingerprint>((uint64_t)(a1 + 28), (uint64_t)(a1 + 42));
          v19 = a1[41];
          *(_OWORD *)v25 = a1[40];
          v20 = *(_OWORD *)v25;
          *(_OWORD *)&v25[16] = v19;
          a1[40] = a1[54];
          *(_OWORD *)((char *)a1 + 652) = *(_OWORD *)((char *)a1 + 876);
          a1[54] = v20;
          *(_OWORD *)((char *)a1 + 876) = *(_OWORD *)&v25[12];
          if (*((double *)a1 + 82) > *((double *)a1 + 54))
          {
            std::swap[abi:ne180100]<CLMicroLocationFingerprint>((uint64_t)(a1 + 14), (uint64_t)(a1 + 28));
            v21 = a1[27];
            *(_OWORD *)v25 = a1[26];
            v22 = *(_OWORD *)v25;
            *(_OWORD *)&v25[16] = v21;
            a1[26] = a1[40];
            *(_OWORD *)((char *)a1 + 428) = *(_OWORD *)((char *)a1 + 652);
            a1[40] = v22;
            *(_OWORD *)((char *)a1 + 652) = *(_OWORD *)&v25[12];
            if (*((double *)a1 + 54) > *((double *)a1 + 26))
            {
              std::swap[abi:ne180100]<CLMicroLocationFingerprint>((uint64_t)a1, (uint64_t)(a1 + 14));
              v23 = a1[13];
              *(_OWORD *)v25 = a1[12];
              v24 = *(_OWORD *)v25;
              *(_OWORD *)&v25[16] = v23;
              a1[12] = a1[26];
              *(_OWORD *)((char *)a1 + 204) = *(_OWORD *)((char *)a1 + 428);
              a1[26] = v24;
              *(_OWORD *)((char *)a1 + 428) = *(_OWORD *)&v25[12];
            }
          }
        }
      }
      return 1;
    default:
      v9 = (double *)(a1 + 28);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,CLMicroLocationSemiSupervisedAlgorithm::learnSelfTrainingSemiSupervisedModel(NSMutableDictionary *,ULDatabase &,std::function<BOOL ()(void)>,std::vector<CLMicroLocationRecordingLabelsTable::Entry> &,std::vector<CLMicroLocationRecordingEventsTable::Entry> &,std::vector<CLMicroLocationRecordingEventsTable::Entry> &,CLMicroLocationAnchorAppearanceMap const&,CLMicroLocationClientUtils::ClientIdAndClientServiceId const&,CLMicroLocationFingerprintPool &,boost::uuids::uuid)::$_5 &,std::pair<CLMicroLocationFingerprint,CLMicroLocationResultInternal> *>((uint64_t)a1, (uint64_t)(a1 + 14), (uint64_t)(a1 + 28));
      v10 = (uint64_t)(a1 + 42);
      if (a1 + 42 == (_OWORD *)a2)
        return 1;
      v11 = 0;
      v12 = 0;
      break;
  }
  while (1)
  {
    if (*(double *)(v10 + 208) > v9[26])
    {
      std::pair<CLMicroLocationFingerprint,CLMicroLocationResultInternal>::pair[abi:ne180100]((uint64_t)v25, v10);
      v13 = v11;
      while (1)
      {
        std::pair<CLMicroLocationFingerprint,CLMicroLocationResultInternal>::operator=[abi:ne180100]((uint64_t)a1 + v13 + 672, (uint64_t)a1 + v13 + 448);
        if (v13 == -448)
          break;
        v14 = *(double *)((char *)a1 + v13 + 432);
        v13 -= 224;
        if (v30 <= v14)
        {
          v15 = (uint64_t)a1 + v13 + 672;
          goto LABEL_12;
        }
      }
      v15 = (uint64_t)a1;
LABEL_12:
      std::pair<CLMicroLocationFingerprint,CLMicroLocationResultInternal>::operator=[abi:ne180100](v15, (uint64_t)v25);
      if (__p)
      {
        v29 = __p;
        operator delete(__p);
      }
      ++v12;
      std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>>>::~__hash_table((uint64_t)&v27);
      std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>>>::~__hash_table((uint64_t)&v26);
      std::__hash_table<CLMicroLocationFingerprint::Measurement,CLMicroLocationFingerprint::Measurement::HashMeasurement,CLMicroLocationFingerprint::Measurement::PredicateMeasurement,std::allocator<CLMicroLocationFingerprint::Measurement>>::~__hash_table((uint64_t)v25);
      if (v12 == 8)
        return v10 + 224 == (_QWORD)a2;
    }
    v9 = (double *)v10;
    v11 += 224;
    v10 += 224;
    if ((char *)v10 == a2)
      return 1;
  }
}

uint64_t std::swap[abi:ne180100]<CLMicroLocationFingerprint>(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  void *v6;
  uint64_t v8[5];
  __int128 v9;
  uint64_t v10;
  uint64_t v11[5];
  uint64_t v12[5];
  __int128 v13;
  int v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  std::__hash_table<CLMicroLocationFingerprint::Measurement,CLMicroLocationFingerprint::Measurement::HashMeasurement,CLMicroLocationFingerprint::Measurement::PredicateMeasurement,std::allocator<CLMicroLocationFingerprint::Measurement>>::__hash_table((uint64_t)v8, (uint64_t *)a1);
  v9 = *(_OWORD *)(a1 + 40);
  v10 = *(_QWORD *)(a1 + 56);
  std::__hash_table<CLMicroLocationFingerprint::Measurement,CLMicroLocationFingerprint::Measurement::HashMeasurement,CLMicroLocationFingerprint::Measurement::PredicateMeasurement,std::allocator<CLMicroLocationFingerprint::Measurement>>::__hash_table((uint64_t)v11, (uint64_t *)(a1 + 64));
  std::__hash_table<CLMicroLocationFingerprint::Measurement,CLMicroLocationFingerprint::Measurement::HashMeasurement,CLMicroLocationFingerprint::Measurement::PredicateMeasurement,std::allocator<CLMicroLocationFingerprint::Measurement>>::__hash_table((uint64_t)v12, (uint64_t *)(a1 + 104));
  v13 = *(_OWORD *)(a1 + 144);
  v14 = *(_DWORD *)(a1 + 160);
  v15 = *(_OWORD *)(a1 + 168);
  v16 = *(_QWORD *)(a1 + 184);
  *(_QWORD *)(a1 + 168) = 0;
  *(_QWORD *)(a1 + 176) = 0;
  *(_QWORD *)(a1 + 184) = 0;
  std::__hash_table<CLMicroLocationFingerprint::Measurement,CLMicroLocationFingerprint::Measurement::HashMeasurement,CLMicroLocationFingerprint::Measurement::PredicateMeasurement,std::allocator<CLMicroLocationFingerprint::Measurement>>::__move_assign(a1, (uint64_t *)a2);
  v4 = *(_OWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = v4;
  std::__hash_table<CLMicroLocationProto::DataType,std::hash<CLMicroLocationProto::DataType>,std::equal_to<CLMicroLocationProto::DataType>,std::allocator<CLMicroLocationProto::DataType>>::__move_assign(a1 + 64, (uint64_t *)(a2 + 64));
  std::__hash_table<CLMicroLocationProto::DataType,std::hash<CLMicroLocationProto::DataType>,std::equal_to<CLMicroLocationProto::DataType>,std::allocator<CLMicroLocationProto::DataType>>::__move_assign(a1 + 104, (uint64_t *)(a2 + 104));
  v5 = *(_OWORD *)(a2 + 144);
  *(_DWORD *)(a1 + 160) = *(_DWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 144) = v5;
  std::vector<CLMicroLocationResultInternal>::__move_assign(a1 + 168, (__n128 *)(a2 + 168));
  std::__hash_table<CLMicroLocationFingerprint::Measurement,CLMicroLocationFingerprint::Measurement::HashMeasurement,CLMicroLocationFingerprint::Measurement::PredicateMeasurement,std::allocator<CLMicroLocationFingerprint::Measurement>>::__move_assign(a2, v8);
  *(_OWORD *)(a2 + 40) = v9;
  *(_QWORD *)(a2 + 56) = v10;
  std::__hash_table<CLMicroLocationProto::DataType,std::hash<CLMicroLocationProto::DataType>,std::equal_to<CLMicroLocationProto::DataType>,std::allocator<CLMicroLocationProto::DataType>>::__move_assign(a2 + 64, v11);
  std::__hash_table<CLMicroLocationProto::DataType,std::hash<CLMicroLocationProto::DataType>,std::equal_to<CLMicroLocationProto::DataType>,std::allocator<CLMicroLocationProto::DataType>>::__move_assign(a2 + 104, v12);
  *(_OWORD *)(a2 + 144) = v13;
  *(_DWORD *)(a2 + 160) = v14;
  v6 = *(void **)(a2 + 168);
  if (v6)
  {
    *(_QWORD *)(a2 + 176) = v6;
    operator delete(v6);
  }
  *(_OWORD *)(a2 + 168) = v15;
  *(_QWORD *)(a2 + 184) = v16;
  v16 = 0;
  v15 = 0uLL;
  std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>>>::~__hash_table((uint64_t)v12);
  std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>>>::~__hash_table((uint64_t)v11);
  return std::__hash_table<CLMicroLocationFingerprint::Measurement,CLMicroLocationFingerprint::Measurement::HashMeasurement,CLMicroLocationFingerprint::Measurement::PredicateMeasurement,std::allocator<CLMicroLocationFingerprint::Measurement>>::~__hash_table((uint64_t)v8);
}

uint64_t std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,CLMicroLocationSemiSupervisedAlgorithm::learnSelfTrainingSemiSupervisedModel(NSMutableDictionary *,ULDatabase &,std::function<BOOL ()(void)>,std::vector<CLMicroLocationRecordingLabelsTable::Entry> &,std::vector<CLMicroLocationRecordingEventsTable::Entry> &,std::vector<CLMicroLocationRecordingEventsTable::Entry> &,CLMicroLocationAnchorAppearanceMap const&,CLMicroLocationClientUtils::ClientIdAndClientServiceId const&,CLMicroLocationFingerprintPool &,boost::uuids::uuid)::$_5 &,std::pair<CLMicroLocationFingerprint,CLMicroLocationResultInternal> *>(_OWORD *a1, _OWORD *a2, _OWORD *a3, uint64_t a4)
{
  uint64_t result;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  _BYTE v12[32];
  _BYTE v13[32];
  _BYTE v14[32];

  result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,CLMicroLocationSemiSupervisedAlgorithm::learnSelfTrainingSemiSupervisedModel(NSMutableDictionary *,ULDatabase &,std::function<BOOL ()(void)>,std::vector<CLMicroLocationRecordingLabelsTable::Entry> &,std::vector<CLMicroLocationRecordingEventsTable::Entry> &,std::vector<CLMicroLocationRecordingEventsTable::Entry> &,CLMicroLocationAnchorAppearanceMap const&,CLMicroLocationClientUtils::ClientIdAndClientServiceId const&,CLMicroLocationFingerprintPool &,boost::uuids::uuid)::$_5 &,std::pair<CLMicroLocationFingerprint,CLMicroLocationResultInternal> *>((uint64_t)a1, (uint64_t)a2, (uint64_t)a3);
  if (*(double *)(a4 + 208) > *((double *)a3 + 26))
  {
    result = std::swap[abi:ne180100]<CLMicroLocationFingerprint>((uint64_t)a3, a4);
    *(_OWORD *)v12 = a3[12];
    *(_OWORD *)&v12[16] = a3[13];
    v9 = *(_OWORD *)(a4 + 204);
    a3[12] = *(_OWORD *)(a4 + 192);
    *(_OWORD *)((char *)a3 + 204) = v9;
    *(_OWORD *)(a4 + 192) = *(_OWORD *)v12;
    *(_OWORD *)(a4 + 204) = *(_OWORD *)&v12[12];
    if (*((double *)a3 + 26) > *((double *)a2 + 26))
    {
      result = std::swap[abi:ne180100]<CLMicroLocationFingerprint>((uint64_t)a2, (uint64_t)a3);
      *(_OWORD *)v13 = a2[12];
      *(_OWORD *)&v13[16] = a2[13];
      v10 = *(_OWORD *)((char *)a3 + 204);
      a2[12] = a3[12];
      *(_OWORD *)((char *)a2 + 204) = v10;
      a3[12] = *(_OWORD *)v13;
      *(_OWORD *)((char *)a3 + 204) = *(_OWORD *)&v13[12];
      if (*((double *)a2 + 26) > *((double *)a1 + 26))
      {
        result = std::swap[abi:ne180100]<CLMicroLocationFingerprint>((uint64_t)a1, (uint64_t)a2);
        *(_OWORD *)v14 = a1[12];
        *(_OWORD *)&v14[16] = a1[13];
        v11 = *(_OWORD *)((char *)a2 + 204);
        a1[12] = a2[12];
        *(_OWORD *)((char *)a1 + 204) = v11;
        a2[12] = *(_OWORD *)v14;
        *(_OWORD *)((char *)a2 + 204) = *(_OWORD *)&v14[12];
      }
    }
  }
  return result;
}

uint64_t std::pair<CLMicroLocationFingerprint,CLMicroLocationResultInternal>::operator=[abi:ne180100](uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;

  std::__hash_table<CLMicroLocationFingerprint::Measurement,CLMicroLocationFingerprint::Measurement::HashMeasurement,CLMicroLocationFingerprint::Measurement::PredicateMeasurement,std::allocator<CLMicroLocationFingerprint::Measurement>>::__move_assign(a1, (uint64_t *)a2);
  v4 = *(_OWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = v4;
  std::__hash_table<CLMicroLocationProto::DataType,std::hash<CLMicroLocationProto::DataType>,std::equal_to<CLMicroLocationProto::DataType>,std::allocator<CLMicroLocationProto::DataType>>::__move_assign(a1 + 64, (uint64_t *)(a2 + 64));
  std::__hash_table<CLMicroLocationProto::DataType,std::hash<CLMicroLocationProto::DataType>,std::equal_to<CLMicroLocationProto::DataType>,std::allocator<CLMicroLocationProto::DataType>>::__move_assign(a1 + 104, (uint64_t *)(a2 + 104));
  v5 = *(_OWORD *)(a2 + 144);
  *(_DWORD *)(a1 + 160) = *(_DWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 144) = v5;
  std::vector<CLMicroLocationResultInternal>::__move_assign(a1 + 168, (__n128 *)(a2 + 168));
  v6 = *(_OWORD *)(a2 + 192);
  *(_OWORD *)(a1 + 204) = *(_OWORD *)(a2 + 204);
  *(_OWORD *)(a1 + 192) = v6;
  return a1;
}

uint64_t std::__construct_at[abi:ne180100]<CLMicroLocationModelTable::Entry,boost::uuids::uuid,std::chrono::time_point<cl::chrono::CFAbsoluteTimeClock,std::chrono::duration<long double,std::ratio<1l,1l>>>,CLMicroLocationProto::Model,std::string const&,boost::uuids::uuid const&,boost::uuids::uuid&,CLMicroLocationModelTable::Entry*>(uint64_t a1, uint64_t *a2, double *a3, uint64_t a4, uint64_t a5, __int128 *a6, _QWORD *a7)
{
  uint64_t v11;
  uint64_t v12;
  double v13;
  std::string __p;
  char v16;
  __int128 v17;
  char v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v11 = *a2;
  v12 = a2[1];
  v13 = *a3;
  if (*(char *)(a5 + 23) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a5, *(_QWORD *)(a5 + 8));
  else
    __p = *(std::string *)a5;
  v16 = 1;
  v17 = *a6;
  v18 = 1;
  CLMicroLocationModelTable::Entry::Entry(a1, v11, v12, a4, &__p, &v17, *a7, a7[1], v13);
  if (v16 && SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return a1;
}

void sub_241B46B9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  _Unwind_Resume(exception_object);
}

_QWORD *std::__hash_table<std::__hash_value_type<boost::uuids::uuid,boost::uuids::uuid>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,boost::uuids::uuid>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,boost::uuids::uuid>>>::__emplace_unique_key_args<boost::uuids::uuid,std::piecewise_construct_t const&,std::tuple<boost::uuids::uuid const&>,std::tuple<>>(uint64_t a1, _QWORD *a2, uint64_t a3, _OWORD **a4)
{
  unint64_t v4;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  _QWORD **v11;
  _QWORD *i;
  unint64_t v13;
  float v15;
  float v16;
  _BOOL8 v17;
  unint64_t v18;
  unint64_t v19;
  size_t v20;
  uint64_t v21;
  _QWORD *v22;
  unint64_t v23;

  v7 = 0;
  v8 = 0;
  do
    v8 ^= (v8 << 6) + (v8 >> 2) + 2654435769u + *((unsigned __int8 *)a2 + v7++);
  while (v7 != 16);
  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      v4 = v8;
      if (v8 >= v9)
        v4 = v8 % v9;
    }
    else
    {
      v4 = (v9 - 1) & v8;
    }
    v11 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v4);
    if (v11)
    {
      for (i = *v11; i; i = (_QWORD *)*i)
      {
        v13 = i[1];
        if (v13 == v8)
        {
          if (i[2] == *a2 && i[3] == a2[1])
            return i;
        }
        else
        {
          if (v10.u32[0] > 1uLL)
          {
            if (v13 >= v9)
              v13 %= v9;
          }
          else
          {
            v13 &= v9 - 1;
          }
          if (v13 != v4)
            break;
        }
      }
    }
  }
  i = operator new(0x30uLL);
  *i = 0;
  i[1] = v8;
  *((_OWORD *)i + 1) = **a4;
  i[4] = 0;
  i[5] = 0;
  v15 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v16 = *(float *)(a1 + 32);
  if (!v9 || (float)(v16 * (float)v9) < v15)
  {
    v17 = 1;
    if (v9 >= 3)
      v17 = (v9 & (v9 - 1)) != 0;
    v18 = v17 | (2 * v9);
    v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19)
      v20 = v19;
    else
      v20 = v18;
    std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>>>::__rehash<true>(a1, v20);
    v9 = *(_QWORD *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9)
        v4 = v8 % v9;
      else
        v4 = v8;
    }
    else
    {
      v4 = (v9 - 1) & v8;
    }
  }
  v21 = *(_QWORD *)a1;
  v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v22)
  {
    *i = *v22;
LABEL_44:
    *v22 = i;
    goto LABEL_45;
  }
  *i = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = i;
  *(_QWORD *)(v21 + 8 * v4) = a1 + 16;
  if (*i)
  {
    v23 = *(_QWORD *)(*i + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v23 >= v9)
        v23 %= v9;
    }
    else
    {
      v23 &= v9 - 1;
    }
    v22 = (_QWORD *)(*(_QWORD *)a1 + 8 * v23);
    goto LABEL_44;
  }
LABEL_45:
  ++*(_QWORD *)(a1 + 24);
  return i;
}

void sub_241B46E0C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::vector<std::pair<CLMicroLocationFingerprint,boost::uuids::uuid>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 208;
        std::allocator<CLMicroLocationFingerprint>::destroy[abi:ne180100]((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

unint64_t *CLDistanceMatrixTemplate<CLSymmetricMatrixStorage<float>>::CLDistanceMatrixTemplate<std::vector<CLMicroLocationFingerprint>,std::function<double ()(CLMicroLocationFingerprint const&,CLMicroLocationFingerprint const&)>>(unint64_t *a1, uint64_t *a2, uint64_t a3)
{
  _QWORD *v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  unint64_t i;
  uint64_t v16;
  double v17;
  unint64_t v18;
  unint64_t v19;
  float v20;
  _DWORD v22[10];
  __int128 v23;
  uint64_t v24;
  _BYTE v25[40];
  _BYTE v26[56];
  int v27;
  void *__p;
  void *v29;
  uint64_t v30;
  uint64_t v31;

  v31 = *MEMORY[0x24BDAC8D0];
  a1[1] = 0;
  v6 = a1 + 1;
  a1[2] = 0;
  a1[3] = 0;
  v7 = 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 6);
  *a1 = v7;
  v22[0] = 0;
  std::vector<float>::resize((uint64_t)(a1 + 1), (v7 + v7 * v7) >> 1, v22);
  if (*a1)
  {
    v8 = 0;
    do
    {
      v9 = *a2;
      std::unordered_set<CLMicroLocationFingerprint::Measurement,CLMicroLocationFingerprint::Measurement::HashMeasurement,CLMicroLocationFingerprint::Measurement::PredicateMeasurement,std::allocator<CLMicroLocationFingerprint::Measurement>>::unordered_set((uint64_t)v22, *a2 + 192 * v8);
      v10 = v9 + 192 * v8;
      v11 = *(_OWORD *)(v10 + 40);
      v24 = *(_QWORD *)(v10 + 56);
      v23 = v11;
      std::unordered_set<CLMicroLocationProto::DataType>::unordered_set((uint64_t)v25, v10 + 64);
      std::unordered_map<CLMicroLocationProto::DataType,CLMicroLocationFingerprint::StartAndEndTimestamps>::unordered_map((uint64_t)v26, v9 + 192 * v8 + 104);
      v12 = v9 + 192 * v8;
      v13 = *(_OWORD *)(v12 + 144);
      v27 = *(_DWORD *)(v12 + 160);
      *(_OWORD *)&v26[40] = v13;
      v29 = 0;
      v30 = 0;
      __p = 0;
      std::vector<CLMicroLocationProto::ConfidenceReason>::__init_with_size[abi:ne180100]<CLMicroLocationProto::ConfidenceReason*,CLMicroLocationProto::ConfidenceReason*>(&__p, *(const void **)(v12 + 168), *(_QWORD *)(v12 + 176), (uint64_t)(*(_QWORD *)(v12 + 176) - *(_QWORD *)(v12 + 168)) >> 2);
      if (v8)
      {
        v14 = 0;
        for (i = 0; i != v8; ++i)
        {
          v16 = *(_QWORD *)(a3 + 24);
          if (!v16)
            std::__throw_bad_function_call[abi:ne180100]();
          (*(void (**)(uint64_t, _DWORD *, uint64_t))(*(_QWORD *)v16 + 48))(v16, v22, *a2 + v14);
          if (v8 <= i)
            v18 = i;
          else
            v18 = v8;
          if (v8 >= i)
            v19 = i;
          else
            v19 = v8;
          v20 = v17;
          *(float *)(*v6 + 4 * (v19 + ((v18 + v18 * v18) >> 1))) = v20;
          v14 += 192;
        }
      }
      if (__p)
      {
        v29 = __p;
        operator delete(__p);
      }
      std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>>>::~__hash_table((uint64_t)v26);
      std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>>>::~__hash_table((uint64_t)v25);
      std::__hash_table<CLMicroLocationFingerprint::Measurement,CLMicroLocationFingerprint::Measurement::HashMeasurement,CLMicroLocationFingerprint::Measurement::PredicateMeasurement,std::allocator<CLMicroLocationFingerprint::Measurement>>::~__hash_table((uint64_t)v22);
      ++v8;
    }
    while (v8 < *a1);
  }
  return a1;
}

void sub_241B470A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  void **v13;
  uint64_t v14;
  void *v16;

  v16 = *v13;
  if (*v13)
  {
    *(_QWORD *)(v14 + 16) = v16;
    operator delete(v16);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<std::pair<CLMicroLocationFingerprint,boost::uuids::uuid>>::__emplace_back_slow_path<CLMicroLocationFingerprint&,boost::uuids::uuid const&>(uint64_t *a1, uint64_t a2, _OWORD *a3)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  uint64_t v13;
  void *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t *v19;

  v4 = *a1;
  v5 = 0x4EC4EC4EC4EC4EC5 * ((a1[1] - *a1) >> 4);
  v6 = v5 + 1;
  if ((unint64_t)(v5 + 1) > 0x13B13B13B13B13BLL)
    std::vector<CLMicroLocationProto::ConfidenceReason>::__throw_length_error[abi:ne180100]();
  v9 = (uint64_t)(a1 + 2);
  v10 = 0x4EC4EC4EC4EC4EC5 * ((a1[2] - v4) >> 4);
  if (2 * v10 > v6)
    v6 = 2 * v10;
  if (v10 >= 0x9D89D89D89D89DLL)
    v11 = 0x13B13B13B13B13BLL;
  else
    v11 = v6;
  v19 = a1 + 2;
  if (v11)
    v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<CLMicroLocationFingerprint,boost::uuids::uuid>>>(v9, v11);
  else
    v12 = 0;
  v15 = v12;
  v16 = &v12[208 * v5];
  v18 = &v12[208 * v11];
  std::pair<CLMicroLocationFingerprint,boost::uuids::uuid>::pair[abi:ne180100]<CLMicroLocationFingerprint&,boost::uuids::uuid const&,0>((uint64_t)v16, a2, a3);
  v17 = v16 + 208;
  std::vector<std::pair<CLMicroLocationFingerprint,boost::uuids::uuid>>::__swap_out_circular_buffer(a1, &v15);
  v13 = a1[1];
  std::__split_buffer<std::pair<CLMicroLocationFingerprint,boost::uuids::uuid>>::~__split_buffer(&v15);
  return v13;
}

void sub_241B47214(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::pair<CLMicroLocationFingerprint,boost::uuids::uuid>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t std::pair<CLMicroLocationFingerprint,boost::uuids::uuid>::pair[abi:ne180100]<CLMicroLocationFingerprint&,boost::uuids::uuid const&,0>(uint64_t a1, uint64_t a2, _OWORD *a3)
{
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  int v9;

  v6 = std::unordered_set<CLMicroLocationFingerprint::Measurement,CLMicroLocationFingerprint::Measurement::HashMeasurement,CLMicroLocationFingerprint::Measurement::PredicateMeasurement,std::allocator<CLMicroLocationFingerprint::Measurement>>::unordered_set(a1, a2);
  v7 = *(_OWORD *)(a2 + 40);
  *(_QWORD *)(v6 + 56) = *(_QWORD *)(a2 + 56);
  *(_OWORD *)(v6 + 40) = v7;
  std::unordered_set<CLMicroLocationProto::DataType>::unordered_set(v6 + 64, a2 + 64);
  std::unordered_map<CLMicroLocationProto::DataType,CLMicroLocationFingerprint::StartAndEndTimestamps>::unordered_map(a1 + 104, a2 + 104);
  v8 = *(_OWORD *)(a2 + 144);
  v9 = *(_DWORD *)(a2 + 160);
  *(_QWORD *)(a1 + 168) = 0;
  *(_DWORD *)(a1 + 160) = v9;
  *(_OWORD *)(a1 + 144) = v8;
  *(_QWORD *)(a1 + 176) = 0;
  *(_QWORD *)(a1 + 184) = 0;
  std::vector<CLMicroLocationProto::ConfidenceReason>::__init_with_size[abi:ne180100]<CLMicroLocationProto::ConfidenceReason*,CLMicroLocationProto::ConfidenceReason*>((_QWORD *)(a1 + 168), *(const void **)(a2 + 168), *(_QWORD *)(a2 + 176), (uint64_t)(*(_QWORD *)(a2 + 176) - *(_QWORD *)(a2 + 168)) >> 2);
  *(_OWORD *)(a1 + 192) = *a3;
  return a1;
}

void sub_241B472C8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>>>::~__hash_table(v3);
  std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>>>::~__hash_table(v2);
  std::__hash_table<CLMicroLocationFingerprint::Measurement,CLMicroLocationFingerprint::Measurement::HashMeasurement,CLMicroLocationFingerprint::Measurement::PredicateMeasurement,std::allocator<CLMicroLocationFingerprint::Measurement>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::pair<CLMicroLocationFingerprint,boost::uuids::uuid>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::pair<CLMicroLocationFingerprint,boost::uuids::uuid>>,std::reverse_iterator<std::pair<CLMicroLocationFingerprint,boost::uuids::uuid>*>,std::reverse_iterator<std::pair<CLMicroLocationFingerprint,boost::uuids::uuid>*>,std::reverse_iterator<std::pair<CLMicroLocationFingerprint,boost::uuids::uuid>*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<CLMicroLocationFingerprint,boost::uuids::uuid>>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x13B13B13B13B13CLL)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(208 * a2);
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::pair<CLMicroLocationFingerprint,boost::uuids::uuid>>,std::reverse_iterator<std::pair<CLMicroLocationFingerprint,boost::uuids::uuid>*>,std::reverse_iterator<std::pair<CLMicroLocationFingerprint,boost::uuids::uuid>*>,std::reverse_iterator<std::pair<CLMicroLocationFingerprint,boost::uuids::uuid>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[3];
  char v13;
  __int128 v14;
  __int128 v15;

  v7 = a7;
  *(_QWORD *)&v15 = a6;
  *((_QWORD *)&v15 + 1) = a7;
  v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  v13 = 0;
  if (a3 == a5)
  {
    v10 = a6;
  }
  else
  {
    v9 = a3;
    do
    {
      v9 -= 208;
      std::pair<CLMicroLocationFingerprint,boost::uuids::uuid>::pair[abi:ne180100](v7 - 208, v9);
      v7 = *((_QWORD *)&v15 + 1) - 208;
      *((_QWORD *)&v15 + 1) -= 208;
    }
    while (v9 != a5);
    v10 = v15;
  }
  v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<CLMicroLocationFingerprint,boost::uuids::uuid>>,std::reverse_iterator<std::pair<CLMicroLocationFingerprint,boost::uuids::uuid>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return v10;
}

uint64_t std::pair<CLMicroLocationFingerprint,boost::uuids::uuid>::pair[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;

  v4 = std::__hash_table<CLMicroLocationFingerprint::Measurement,CLMicroLocationFingerprint::Measurement::HashMeasurement,CLMicroLocationFingerprint::Measurement::PredicateMeasurement,std::allocator<CLMicroLocationFingerprint::Measurement>>::__hash_table(a1, (uint64_t *)a2);
  v5 = *(_OWORD *)(a2 + 40);
  *(_QWORD *)(v4 + 56) = *(_QWORD *)(a2 + 56);
  *(_OWORD *)(v4 + 40) = v5;
  std::__hash_table<CLMicroLocationFingerprint::Measurement,CLMicroLocationFingerprint::Measurement::HashMeasurement,CLMicroLocationFingerprint::Measurement::PredicateMeasurement,std::allocator<CLMicroLocationFingerprint::Measurement>>::__hash_table(v4 + 64, (uint64_t *)(a2 + 64));
  std::__hash_table<CLMicroLocationFingerprint::Measurement,CLMicroLocationFingerprint::Measurement::HashMeasurement,CLMicroLocationFingerprint::Measurement::PredicateMeasurement,std::allocator<CLMicroLocationFingerprint::Measurement>>::__hash_table(a1 + 104, (uint64_t *)(a2 + 104));
  v6 = *(_OWORD *)(a2 + 144);
  *(_DWORD *)(a1 + 160) = *(_DWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 144) = v6;
  *(_QWORD *)(a1 + 176) = 0;
  *(_QWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 168) = 0;
  *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
  *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
  *(_QWORD *)(a2 + 168) = 0;
  *(_QWORD *)(a2 + 176) = 0;
  *(_QWORD *)(a2 + 184) = 0;
  *(_OWORD *)(a1 + 192) = *(_OWORD *)(a2 + 192);
  return a1;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<CLMicroLocationFingerprint,boost::uuids::uuid>>,std::reverse_iterator<std::pair<CLMicroLocationFingerprint,boost::uuids::uuid>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<CLMicroLocationFingerprint,boost::uuids::uuid>>,std::reverse_iterator<std::pair<CLMicroLocationFingerprint,boost::uuids::uuid>*>>::operator()[abi:ne180100]((uint64_t *)a1);
  return a1;
}

uint64_t *std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<CLMicroLocationFingerprint,boost::uuids::uuid>>,std::reverse_iterator<std::pair<CLMicroLocationFingerprint,boost::uuids::uuid>*>>::operator()[abi:ne180100](uint64_t *result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(result[2] + 8);
  v2 = *(_QWORD *)(result[1] + 8);
  if (v1 != v2)
  {
    v3 = *result;
    do
    {
      result = (uint64_t *)std::allocator<CLMicroLocationFingerprint>::destroy[abi:ne180100](v3, v1);
      v1 += 208;
    }
    while (v1 != v2);
  }
  return result;
}

void **std::__split_buffer<std::pair<CLMicroLocationFingerprint,boost::uuids::uuid>>::~__split_buffer(void **a1)
{
  std::__split_buffer<std::pair<CLMicroLocationFingerprint,boost::uuids::uuid>>::clear[abi:ne180100]((uint64_t)a1);
  if (*a1)
    operator delete(*a1);
  return a1;
}

uint64_t std::__split_buffer<std::pair<CLMicroLocationFingerprint,boost::uuids::uuid>>::clear[abi:ne180100](uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(_QWORD *)(result + 8);
  v1 = *(_QWORD *)(result + 16);
  if (v1 != v2)
  {
    v3 = result;
    do
    {
      v4 = *(_QWORD *)(v3 + 32);
      *(_QWORD *)(v3 + 16) = v1 - 208;
      result = std::allocator<CLMicroLocationFingerprint>::destroy[abi:ne180100](v4, v1 - 208);
      v1 = *(_QWORD *)(v3 + 16);
    }
    while (v1 != v2);
  }
  return result;
}

id CLMicroLocationPublishHelper::duetEventsFromLocalizationResultMeasurement(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  int v6;
  int v7;
  std::string *v8;
  std::string *v9;
  _QWORD *v10;
  _QWORD *v11;
  std::string *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  double v16;
  void *v17;
  void *v18;
  double v19;
  id v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  _QWORD *v35;
  _QWORD *v36;
  BOOL v37;
  void *v39;
  id v40;
  _QWORD *v41;
  void *v42;
  std::string *v43;
  std::string *v44;
  _QWORD v45[2];
  char v46;
  _QWORD v47[4];
  _QWORD v48[4];
  _QWORD v49[3];
  _QWORD v50[3];
  __int128 v51;
  char v52;
  __int128 v53;

  *(_QWORD *)&v53 = *MEMORY[0x24BDAC8D0];
  if (objc_opt_class())
  {
    objc_msgSend(MEMORY[0x24BDBCEB8], "array");
    v40 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDBCE60], "dateWithTimeIntervalSinceReferenceDate:", *(double *)a1);
    v39 = (void *)objc_claimAutoreleasedReturnValue();
    std::string::basic_string[abi:ne180100]<0>(&v51, "com.apple.magicalmoments");
    v43 = 0;
    v44 = 0;
    v45[0] = 0;
    v45[1] = &v43;
    v46 = 0;
    v43 = (std::string *)operator new(0x18uLL);
    v44 = v43;
    v45[0] = v43 + 1;
    v44 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)v45, &v51, &v53, v43);
    if (v52 < 0)
      operator delete((void *)v51);
    +[ULDefaultsSingleton shared](ULDefaultsSingleton, "shared");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "defaultsDictionary");
    v3 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "ULHomeLOIDomainPublishToCoreDuet");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "objectForKey:", v4);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    if (v5 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
      v6 = objc_msgSend(v5, "BOOLValue");
    else
      v6 = objc_msgSend(MEMORY[0x24BDBD1C0], "BOOLValue");
    v7 = v6;

    if (v7)
    {
      v8 = v44;
      if ((unint64_t)v44 >= v45[0])
      {
        v9 = (std::string *)std::vector<std::string>::__emplace_back_slow_path<char const* const&>((uint64_t *)&v43, &CL::kMicroLocationHomeLOIDomain);
      }
      else
      {
        std::string::basic_string[abi:ne180100]<0>(v44, "com.apple.microlocation.homeloi");
        v9 = v8 + 1;
      }
      v44 = v9;
    }
    v10 = *(_QWORD **)(a1 + 8);
    v41 = (_QWORD *)(a1 + 16);
    if (v10 != (_QWORD *)(a1 + 16))
    {
      do
      {
        v11 = v10 + 4;
        v12 = (std::string *)std::__find_impl[abi:ne180100]<std::string const*,std::string const*,std::string,std::__identity>((uint64_t)v43, (uint64_t)v44, (unsigned __int8 **)v10 + 4);
        if (v12 != v44)
        {
          if (v10[8] == v10[7])
          {
            CLMicroLocationPublishHelper::duetEventsFromLocalizationResultMeasurement();

            abort_report_np();
            __break(1u);
          }
          objc_msgSend(MEMORY[0x24BDBCED8], "dictionary");
          v13 = (void *)objc_claimAutoreleasedReturnValue();
          v14 = v10[7];
          v15 = v10[8];
          if (v14 == v15)
          {
            v42 = 0;
            v16 = 0.0;
          }
          else
          {
            v42 = 0;
            v16 = 0.0;
            do
            {
              v17 = (void *)objc_msgSend(objc_alloc(MEMORY[0x24BDD1880]), "initWithUUIDBytes:", v14);
              objc_msgSend(MEMORY[0x24BDD16E0], "numberWithDouble:", *(double *)(v14 + 16));
              v18 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v13, "setObject:forKey:", v18, v17);

              v19 = *(double *)(v14 + 16);
              if (v19 > v16)
              {
                v20 = v17;

                v42 = v20;
                v16 = v19;
              }

              v14 += 32;
            }
            while (v14 != v15);
          }
          v49[0] = CFSTR("numberOfWifiDevices");
          objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedLong:", v10[10]);
          v21 = (void *)objc_claimAutoreleasedReturnValue();
          v50[0] = v21;
          v49[1] = CFSTR("numberOfBleDevices");
          objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedLong:", v10[11]);
          v22 = (void *)objc_claimAutoreleasedReturnValue();
          v50[1] = v22;
          v49[2] = CFSTR("numberOfUwbDevices");
          objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedLong:", v10[12]);
          v23 = (void *)objc_claimAutoreleasedReturnValue();
          v50[2] = v23;
          objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", v50, v49, 3);
          v24 = (void *)objc_claimAutoreleasedReturnValue();

          objc_msgSend(MEMORY[0x24BE1B0C0], "domain");
          v25 = (void *)objc_claimAutoreleasedReturnValue();
          v47[0] = v25;
          if (*((char *)v10 + 55) < 0)
            v11 = (_QWORD *)*v11;
          objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", v11);
          v26 = (void *)objc_claimAutoreleasedReturnValue();
          v48[0] = v26;
          objc_msgSend(MEMORY[0x24BE1B0C0], "probabilityVector");
          v27 = (void *)objc_claimAutoreleasedReturnValue();
          v47[1] = v27;
          v47[2] = CFSTR("_DKMicroLocationNumberOfDevices");
          v48[1] = v13;
          v48[2] = v24;
          objc_msgSend(MEMORY[0x24BE1B0C0], "microLocationIsStable");
          v28 = (void *)objc_claimAutoreleasedReturnValue();
          v47[3] = v28;
          objc_msgSend(MEMORY[0x24BDD16E0], "numberWithBool:", *((unsigned __int8 *)v10 + 104));
          v29 = (void *)objc_claimAutoreleasedReturnValue();
          v48[3] = v29;
          objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", v48, v47, 4);
          v30 = (void *)objc_claimAutoreleasedReturnValue();

          v31 = (void *)MEMORY[0x24BE1B080];
          objc_msgSend(MEMORY[0x24BE1B130], "microLocationVisitStream");
          v32 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(MEMORY[0x24BE1B148], "withUUID:", v42);
          v33 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v31, "eventWithStream:startDate:endDate:value:confidence:metadata:", v32, v39, v39, v33, v30, v16);
          v34 = (void *)objc_claimAutoreleasedReturnValue();

          objc_msgSend(v40, "addObject:", v34);
        }
        v35 = (_QWORD *)v10[1];
        if (v35)
        {
          do
          {
            v36 = v35;
            v35 = (_QWORD *)*v35;
          }
          while (v35);
        }
        else
        {
          do
          {
            v36 = (_QWORD *)v10[2];
            v37 = *v36 == (_QWORD)v10;
            v10 = v36;
          }
          while (!v37);
        }
        v10 = v36;
      }
      while (v36 != v41);
    }
    *(_QWORD *)&v51 = &v43;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v51);

  }
  else
  {
    v40 = 0;
  }
  return v40;
}

void sub_241B47B3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14, uint64_t a15, uint64_t a16, char a17)
{
  uint64_t v17;

  *(_QWORD *)(v17 - 136) = &a17;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v17 - 136));

  _Unwind_Resume(a1);
}

id CLMicroLocationPublishHelper::biomePublicEventsFromLocalizationResultMeasurement(uint64_t a1)
{
  void *v2;
  _QWORD *v3;
  _QWORD *v4;
  unint64_t v5;
  uint64_t **v6;
  uint64_t *v7;
  uint64_t v8;
  BOOL v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  double v25;
  void *v26;
  double v27;
  id v28;
  void *v29;
  void *v30;
  void *v31;
  id v32;
  id v33;
  void *v34;
  uint64_t v35;
  id v36;
  void *v37;
  uint64_t v38;
  id v39;
  void *v40;
  uint64_t v41;
  void *v42;
  id v43;
  _QWORD *v44;
  void *v45;
  void *v46;
  void *v47;
  void *v48;
  void *v49;
  _QWORD *v50;
  _QWORD *v51;
  id result;
  _QWORD *v53;
  id v54;
  void *v55;
  void *v56;
  void *v57;
  void *v58;

  v2 = (void *)objc_opt_class();
  if (!v2)
    return v2;
  objc_msgSend(MEMORY[0x24BDBCEB8], "array");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = *(_QWORD **)(a1 + 8);
  v4 = (_QWORD *)(a1 + 16);
  if (v3 == v4)
    return v2;
  v53 = v4;
  v54 = v2;
  v5 = 0x24BDD1000uLL;
  while (1)
  {
    v6 = (uint64_t **)(v3 + 4);
    if (*((char *)v3 + 55) < 0)
      break;
    if (*((_BYTE *)v3 + 55) != 24)
    {
      v7 = v3 + 4;
      if (*((_BYTE *)v3 + 55) != 31)
        goto LABEL_50;
LABEL_18:
      v11 = *v7;
      v12 = v7[1];
      v13 = v7[2];
      v14 = *(uint64_t *)((char *)v7 + 23);
      if (v11 == 0x6C7070612E6D6F63
        && v12 == 0x6C6F7263696D2E65
        && v13 == 0x2E6E6F697461636FLL
        && v14 == 0x696F6C656D6F682ELL)
      {
        goto LABEL_38;
      }
      goto LABEL_50;
    }
    if (*v6 == (uint64_t *)0x6C7070612E6D6F63 && v3[5] == 0x61636967616D2E65 && v3[6] == 0x73746E656D6F6D6CLL)
      goto LABEL_38;
LABEL_50:
    v50 = (_QWORD *)v3[1];
    if (v50)
    {
      do
      {
        v51 = v50;
        v50 = (_QWORD *)*v50;
      }
      while (v50);
    }
    else
    {
      do
      {
        v51 = (_QWORD *)v3[2];
        v9 = *v51 == (_QWORD)v3;
        v3 = v51;
      }
      while (!v9);
    }
    v3 = v51;
    if (v51 == v4)
    {
      v2 = v54;
      return v2;
    }
  }
  v8 = v3[5];
  if (v8 != 24
    || (**v6 == 0x6C7070612E6D6F63 ? (v9 = (*v6)[1] == 0x61636967616D2E65) : (v9 = 0),
        v9 ? (v10 = (*v6)[2] == 0x73746E656D6F6D6CLL) : (v10 = 0),
        !v10))
  {
    if (v8 != 31)
      goto LABEL_50;
    v7 = *v6;
    goto LABEL_18;
  }
LABEL_38:
  if (v3[8] != v3[7])
  {
    v20 = v5;
    objc_msgSend(MEMORY[0x24BDBCEB8], "array");
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    v22 = v3[7];
    v23 = v3[8];
    if (v22 == v23)
    {
      v24 = 0;
      v27 = 0.0;
    }
    else
    {
      v24 = 0;
      v25 = 0.0;
      do
      {
        v26 = (void *)objc_msgSend(objc_alloc(MEMORY[0x24BDD1880]), "initWithUUIDBytes:", v22);
        v27 = *(double *)(v22 + 16);
        v28 = objc_alloc(MEMORY[0x24BE0C480]);
        objc_msgSend(v26, "UUIDString");
        v29 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(*(id *)(v20 + 1760), "numberWithDouble:", v27);
        v30 = (void *)objc_claimAutoreleasedReturnValue();
        v31 = (void *)objc_msgSend(v28, "initWithMicroLocationIdentifier:probability:", v29, v30);

        objc_msgSend(v21, "addObject:", v31);
        if (v27 <= v25)
        {
          v27 = v25;
        }
        else
        {
          v32 = v26;

          v24 = v32;
          v25 = v27;
        }

        v22 += 32;
      }
      while (v22 != v23);
    }
    v33 = objc_alloc(MEMORY[0x24BE0C478]);
    v5 = v20;
    objc_msgSend(*(id *)(v20 + 1760), "numberWithUnsignedLong:", v3[10]);
    v34 = (void *)objc_claimAutoreleasedReturnValue();
    v35 = objc_msgSend(v33, "initWithTechnology:numDevices:", CFSTR("numberOfWifiDevices"), v34);

    v57 = (void *)v35;
    v36 = objc_alloc(MEMORY[0x24BE0C478]);
    objc_msgSend(*(id *)(v20 + 1760), "numberWithUnsignedLong:", v3[11]);
    v37 = (void *)objc_claimAutoreleasedReturnValue();
    v38 = objc_msgSend(v36, "initWithTechnology:numDevices:", CFSTR("numberOfBleDevices"), v37);

    v56 = (void *)v38;
    v39 = objc_alloc(MEMORY[0x24BE0C478]);
    objc_msgSend(*(id *)(v20 + 1760), "numberWithUnsignedLong:", v3[12]);
    v40 = (void *)objc_claimAutoreleasedReturnValue();
    v41 = objc_msgSend(v39, "initWithTechnology:numDevices:", CFSTR("numberOfUwbDevices"), v40);

    v55 = (void *)v41;
    objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:", v35, v38, v41, 0);
    v42 = (void *)objc_claimAutoreleasedReturnValue();
    v43 = objc_alloc(MEMORY[0x24BE0C470]);
    v44 = v3 + 4;
    if (*((char *)v3 + 55) < 0)
      v44 = (_QWORD *)v3[4];
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", v44);
    v45 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v24, "UUIDString");
    v46 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(v5 + 1760), "numberWithDouble:", v27);
    v47 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(v5 + 1760), "numberWithBool:", *((unsigned __int8 *)v3 + 104));
    v48 = (void *)objc_claimAutoreleasedReturnValue();
    v49 = (void *)objc_msgSend(v43, "initWithDomain:maxProbabilityMicroLocationIdentifier:maxProbability:probabilityVector:isStable:numDevicesVector:", v45, v46, v47, v21, v48, v42);

    objc_msgSend(v54, "addObject:", v49);
    v4 = v53;
    goto LABEL_50;
  }
  CLMicroLocationPublishHelper::biomePublicEventsFromLocalizationResultMeasurement();

  result = (id)abort_report_np();
  __break(1u);
  return result;
}

void sub_241B481E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14, void *a15, void *a16)
{
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;

  _Unwind_Resume(a1);
}

id CLMicroLocationPublishHelper::biomeRestrictedEventsFromLocalizationResultMeasurement(double *a1)
{
  uint64_t v2;
  void *v3;
  double *v4;
  double *v5;
  double v6;
  _QWORD *v7;
  int v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  double v13;
  void *v14;
  double v15;
  id v16;
  void *v17;
  void *v18;
  void *v19;
  id v20;
  id v21;
  void *v22;
  uint64_t v23;
  id v24;
  void *v25;
  uint64_t v26;
  id v27;
  void *v28;
  uint64_t v29;
  void *v30;
  id v31;
  void *v32;
  std::string *v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  double *v38;
  double *v39;
  BOOL v40;
  id result;
  double *v42;
  void *v43;
  void *v44;
  void *v45;
  void *v46;
  void *__p[2];
  uint64_t v48;
  std::string v49;

  if (!objc_opt_class())
  {
    v3 = 0;
    return v3;
  }
  objc_msgSend(MEMORY[0x24BDBCEB8], "array");
  v2 = objc_claimAutoreleasedReturnValue();
  v3 = (void *)v2;
  v4 = (double *)*((_QWORD *)a1 + 1);
  v5 = a1 + 2;
  if (v4 == a1 + 2)
    return v3;
  v6 = *a1;
  v42 = a1 + 2;
  v43 = (void *)v2;
  while (1)
  {
    v7 = v4 + 4;
    v8 = *((char *)v4 + 55);
    if ((v8 & 0x80000000) == 0)
      break;
    if (*((_QWORD *)v4 + 5) == 38)
    {
      v7 = (_QWORD *)*v7;
      goto LABEL_9;
    }
LABEL_27:
    v38 = (double *)*((_QWORD *)v4 + 1);
    if (v38)
    {
      do
      {
        v39 = v38;
        v38 = *(double **)v38;
      }
      while (v38);
    }
    else
    {
      do
      {
        v39 = (double *)*((_QWORD *)v4 + 2);
        v40 = *(_QWORD *)v39 == (_QWORD)v4;
        v4 = v39;
      }
      while (!v40);
    }
    v4 = v39;
    if (v39 == v5)
      return v3;
  }
  if (v8 != 38)
    goto LABEL_27;
LABEL_9:
  if (memcmp(v7, "com.apple.microlocation.semisupervised", 0x26uLL))
    goto LABEL_27;
  __p[0] = 0;
  __p[1] = 0;
  v48 = 0;
  std::optional<std::string>::value_or[abi:ne180100]<std::string>((uint64_t)(v4 + 14), (uint64_t)__p, &v49);
  if (SHIBYTE(v48) < 0)
    operator delete(__p[0]);
  if (*((_QWORD *)v4 + 8) != *((_QWORD *)v4 + 7))
  {
    objc_msgSend(MEMORY[0x24BDBCEB8], "array");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v10 = *((_QWORD *)v4 + 7);
    v11 = *((_QWORD *)v4 + 8);
    if (v10 == v11)
    {
      v12 = 0;
      v15 = 0.0;
    }
    else
    {
      v12 = 0;
      v13 = 0.0;
      do
      {
        v14 = (void *)objc_msgSend(objc_alloc(MEMORY[0x24BDD1880]), "initWithUUIDBytes:", v10);
        v15 = *(double *)(v10 + 16);
        v16 = objc_alloc(MEMORY[0x24BE0C570]);
        objc_msgSend(v14, "UUIDString");
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(MEMORY[0x24BDD16E0], "numberWithDouble:", v15);
        v18 = (void *)objc_claimAutoreleasedReturnValue();
        v19 = (void *)objc_msgSend(v16, "initWithLabel:probability:", v17, v18);

        objc_msgSend(v9, "addObject:", v19);
        if (v15 <= v13)
        {
          v15 = v13;
        }
        else
        {
          v20 = v14;

          v12 = v20;
          v13 = v15;
        }

        v10 += 32;
      }
      while (v10 != v11);
    }
    v21 = objc_alloc(MEMORY[0x24BE0C568]);
    objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedLong:", *((_QWORD *)v4 + 10));
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    v3 = v43;
    v23 = objc_msgSend(v21, "initWithTechnologyString:number:", CFSTR("numberOfWifiDevices"), v22);

    v46 = (void *)v23;
    v24 = objc_alloc(MEMORY[0x24BE0C568]);
    objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedLong:", *((_QWORD *)v4 + 11));
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    v26 = objc_msgSend(v24, "initWithTechnologyString:number:", CFSTR("numberOfBleDevices"), v25);

    v45 = (void *)v26;
    v27 = objc_alloc(MEMORY[0x24BE0C568]);
    objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedLong:", *((_QWORD *)v4 + 12));
    v28 = (void *)objc_claimAutoreleasedReturnValue();
    v29 = objc_msgSend(v27, "initWithTechnologyString:number:", CFSTR("numberOfUwbDevices"), v28);

    v44 = (void *)v29;
    objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:", v23, v26, v29, 0);
    v30 = (void *)objc_claimAutoreleasedReturnValue();
    v31 = objc_alloc(MEMORY[0x24BE0C560]);
    objc_msgSend(MEMORY[0x24BDBCE60], "dateWithTimeIntervalSinceReferenceDate:", v6);
    v32 = (void *)objc_claimAutoreleasedReturnValue();
    if ((v49.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v33 = &v49;
    else
      v33 = (std::string *)v49.__r_.__value_.__r.__words[0];
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", v33);
    v34 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v12, "UUIDString");
    v35 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD16E0], "numberWithDouble:", v15);
    v36 = (void *)objc_claimAutoreleasedReturnValue();
    v37 = (void *)objc_msgSend(v31, "initWithAbsoluteTimeStamp:clientBundleID:maxProbabilityLabel:maxProbability:probabilityVector:numDevicesVector:", v32, v34, v35, v36, v9, v30);

    objc_msgSend(v43, "addObject:", v37);
    if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v49.__r_.__value_.__l.__data_);
    v5 = v42;
    goto LABEL_27;
  }
  CLMicroLocationPublishHelper::biomeRestrictedEventsFromLocalizationResultMeasurement();

  result = (id)abort_report_np();
  __break(1u);
  return result;
}

void sub_241B4873C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14, void *a15, void *a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  void *v28;
  void *v29;
  void *v30;
  void *v31;

  if (a28 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void ___ZL45_CLLogObjectForCategory_MicroLocation_Defaultv_block_invoke_84()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.MicroLocation", "MicroLocation");
  v1 = (void *)logObject_MicroLocation_Default;
  logObject_MicroLocation_Default = (uint64_t)v0;

}

uint64_t std::vector<std::string>::__emplace_back_slow_path<char const* const&>(uint64_t *a1, char **a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  std::string *v10;
  uint64_t v11;
  std::__split_buffer<std::string> __v;

  v3 = *a1;
  v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL)
    std::vector<CLMicroLocationProto::ConfidenceReason>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x555555555555555)
    v9 = 0xAAAAAAAAAAAAAAALL;
  else
    v9 = v5;
  __v.__end_cap_.__value_ = (std::allocator<std::string> *)(a1 + 2);
  if (v9)
    v10 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v7, v9);
  else
    v10 = 0;
  __v.__first_ = v10;
  __v.__begin_ = v10 + v4;
  __v.__end_ = __v.__begin_;
  __v.__end_cap_.__value_ = &v10[v9];
  std::string::basic_string[abi:ne180100]<0>(__v.__begin_->__r_.__value_.__r.__words, *a2);
  __v.__end_ = __v.__begin_ + 1;
  std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)a1, &__v);
  v11 = a1[1];
  std::__split_buffer<std::string>::~__split_buffer(&__v);
  return v11;
}

void sub_241B4898C(_Unwind_Exception *a1, std::__split_buffer<std::string> *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::string> *)&a10);
  _Unwind_Resume(a1);
}

void CLMicroLocationRecorder::CLMicroLocationRecorder(CLMicroLocationRecorder *this, ULDatabase *a2)
{
  *(_DWORD *)this = 0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *((_QWORD *)this + 5) = a2;
}

void CLMicroLocationRecorder::~CLMicroLocationRecorder(CLMicroLocationRecorder::RecordingTransaction **this)
{
  void **v2;

  CLMicroLocationRecorder::stop((CLMicroLocationRecorder *)this);
  v2 = (void **)(this + 2);
  std::vector<CLMicroLocationProto::RecordingEvent>::__destroy_vector::operator()[abi:ne180100](&v2);
  std::unique_ptr<CLMicroLocationRecorder::RecordingTransaction>::reset[abi:ne180100](this + 1, 0);
}

CLMicroLocationRecorder::RecordingTransaction *CLMicroLocationRecorder::stop(CLMicroLocationRecorder *this)
{
  uint64_t v2;
  __int128 v4;
  uint64_t v5;
  void **v6;

  v4 = *((_OWORD *)this + 1);
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  v2 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  v5 = v2;
  v6 = (void **)&v4;
  std::vector<CLMicroLocationProto::RecordingEvent>::__destroy_vector::operator()[abi:ne180100](&v6);
  *(_DWORD *)this = 0;
  return std::unique_ptr<CLMicroLocationRecorder::RecordingTransaction>::reset[abi:ne180100]((CLMicroLocationRecorder::RecordingTransaction **)this + 1, 0);
}

void CLMicroLocationRecorder::start(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  CFAbsoluteTime v14;
  std::string::value_type *v15;
  std::string::size_type v16;
  int v17;
  _OWORD *v18;
  _OWORD *v19;
  uint64_t v20;
  std::string *v21;
  int v22;
  int v23;
  _DWORD v24[2];
  __int128 v25;
  CFAbsoluteTime v26;
  std::string __p;
  __int128 v28;
  uint64_t v29;

  v29 = *MEMORY[0x24BDAC8D0];
  v23 = 0;
  boost::uuids::detail::random_provider_base::random_provider_base((boost::uuids::detail::random_provider_base *)&v23);
  v10 = boost::uuids::random_generator_pure::operator()((uint64_t)&v23);
  if (*(_BYTE *)(a5 + 16))
  {
    v13 = *(_QWORD *)a5;
    v12 = *(_QWORD *)(a5 + 8);
  }
  else
  {
    v13 = v10;
    v12 = v11;
  }
  v14 = cl::chrono::CFAbsoluteTimeClock::now();
  v15 = *(std::string::value_type **)a2;
  v16 = *(_QWORD *)(a2 + 8);
  v24[0] = *(_DWORD *)(a2 + 16);
  *(_DWORD *)((char *)v24 + 3) = *(_DWORD *)(a2 + 19);
  v17 = *(char *)(a2 + 23);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  boost::uuids::detail::random_provider_base::destroy((boost::uuids::detail::random_provider_base *)&v23);
  v18 = (_OWORD *)operator new();
  v19 = v18;
  *(_QWORD *)&v25 = v13;
  *((_QWORD *)&v25 + 1) = v12;
  v26 = v14;
  if ((v17 & 0x80000000) == 0)
  {
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v15;
    __p.__r_.__value_.__l.__size_ = v16;
    LODWORD(__p.__r_.__value_.__r.__words[2]) = v24[0];
    *(_DWORD *)((char *)&__p.__r_.__value_.__r.__words[2] + 3) = *(_DWORD *)((char *)v24 + 3);
    *((_BYTE *)&__p.__r_.__value_.__s + 23) = v17;
    *(_QWORD *)&v28 = a3;
    *((_QWORD *)&v28 + 1) = a4;
    v20 = *(_QWORD *)(a1 + 40);
    *v18 = v25;
    v21 = (std::string *)((char *)v18 + 24);
    *((CFAbsoluteTime *)v19 + 2) = v26;
LABEL_7:
    *v21 = __p;
    goto LABEL_8;
  }
  std::string::__init_copy_ctor_external(&__p, v15, v16);
  v22 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
  *(_QWORD *)&v28 = a3;
  *((_QWORD *)&v28 + 1) = a4;
  v20 = *(_QWORD *)(a1 + 40);
  *v19 = v25;
  *((CFAbsoluteTime *)v19 + 2) = v26;
  v21 = (std::string *)((char *)v19 + 24);
  if ((v22 & 0x80000000) == 0)
    goto LABEL_7;
  std::string::__init_copy_ctor_external(v21, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
LABEL_8:
  v19[3] = v28;
  v19[4] = 0u;
  v19[5] = 0u;
  v19[6] = 0u;
  v19[7] = 0u;
  *((_QWORD *)v19 + 16) = 0;
  *((_QWORD *)v19 + 17) = v20;
  std::unique_ptr<CLMicroLocationRecorder::RecordingTransaction>::reset[abi:ne180100]((CLMicroLocationRecorder::RecordingTransaction **)(a1 + 8), (CLMicroLocationRecorder::RecordingTransaction *)v19);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  *(_DWORD *)a1 = 1;
  if (v17 < 0)
    operator delete(v15);
}

void sub_241B48C4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  void *v21;
  uint64_t v22;

  if (a21 < 0)
    operator delete(__p);
  MEMORY[0x2426A04D4](v22, 0x1032C40401C97E5);
  operator delete(v21);
  _Unwind_Resume(a1);
}

CLMicroLocationRecorder::RecordingTransaction *std::unique_ptr<CLMicroLocationRecorder::RecordingTransaction>::reset[abi:ne180100](CLMicroLocationRecorder::RecordingTransaction **a1, CLMicroLocationRecorder::RecordingTransaction *a2)
{
  CLMicroLocationRecorder::RecordingTransaction *result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    CLMicroLocationRecorder::RecordingTransaction::~RecordingTransaction(result);
    JUMPOUT(0x2426A04D4);
  }
  return result;
}

uint64_t *CLMicroLocationRecorder::updateFingerprintMetaInfoOfCurrentRecording(uint64_t a1, unint64_t *a2, uint64_t a3)
{
  uint64_t *result;

  result = *(uint64_t **)(a1 + 8);
  if (result)
    return (uint64_t *)CLMicroLocationRecorder::RecordingTransaction::updateFingerprintMetaInfoOfCurrentRecording(result, a2, a3);
  return result;
}

uint64_t **CLMicroLocationRecorder::RecordingTransaction::updateFingerprintMetaInfoOfCurrentRecording(uint64_t *a1, unint64_t *a2, uint64_t a3)
{
  __int128 *v4;
  uint64_t *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  NSObject *v11;
  int v13[2];
  uint64_t *v14;
  __int128 v15;
  uint64_t v16;
  _BYTE v17[40];
  _BYTE v18[40];
  __int128 v19;
  int v20;
  void *__p;
  void *v22;
  uint64_t v23;
  __int128 v24;
  char v25;
  uint8_t buf[4];
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  _BYTE v30[56];
  int v31;
  const void *v32;
  uint64_t v33;
  char v34;
  uint64_t v35;

  v35 = *MEMORY[0x24BDAC8D0];
  v4 = (__int128 *)a1[11];
  if ((__int128 *)a1[12] == v4)
  {
    if (onceToken_MicroLocation_Default != -1)
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_106);
    v11 = logObject_MicroLocation_Default;
    if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_2419D9000, v11, OS_LOG_TYPE_ERROR, "Error - recording transaction does not have any valid recording events", buf, 2u);
    }
    *(_DWORD *)(a3 + 48) = 1;
    *(_DWORD *)buf = 1;
    return std::__tree<CLMicroLocationRecordingCompletionMetaInformation::RecordingError>::__emplace_unique_key_args<CLMicroLocationRecordingCompletionMetaInformation::RecordingError,CLMicroLocationRecordingCompletionMetaInformation::RecordingError>((uint64_t **)(a3 + 24), (int *)buf, buf);
  }
  else
  {
    CLMicroLocationProto::RecordingEvent::RecordingEvent((CLMicroLocationProto::RecordingEvent *)v13, (const CLMicroLocationProto::RecordingEvent *)(v4 + 5));
    LOBYTE(v19) = 1;
    v24 = *v4;
    v25 = 1;
    CLMicroLocationFingerprint::create(a1 + 8, (uint64_t)v13, (uint64_t)&v24, a2, buf);
    if ((_BYTE)v19)
      CLMicroLocationProto::RecordingEvent::~RecordingEvent((CLMicroLocationProto::RecordingEvent *)v13);
    if (v34)
    {
      std::unordered_set<CLMicroLocationFingerprint::Measurement,CLMicroLocationFingerprint::Measurement::HashMeasurement,CLMicroLocationFingerprint::Measurement::PredicateMeasurement,std::allocator<CLMicroLocationFingerprint::Measurement>>::unordered_set((uint64_t)v13, (uint64_t)buf);
      v15 = v27;
      v16 = v28;
      std::unordered_set<CLMicroLocationProto::DataType>::unordered_set((uint64_t)v17, (uint64_t)&v29);
      std::unordered_map<CLMicroLocationProto::DataType,CLMicroLocationFingerprint::StartAndEndTimestamps>::unordered_map((uint64_t)v18, (uint64_t)v30);
      v19 = *(_OWORD *)&v30[40];
      v20 = v31;
      v22 = 0;
      v23 = 0;
      __p = 0;
      std::vector<CLMicroLocationProto::ConfidenceReason>::__init_with_size[abi:ne180100]<CLMicroLocationProto::ConfidenceReason*,CLMicroLocationProto::ConfidenceReason*>(&__p, v32, v33, (v33 - (uint64_t)v32) >> 2);
      v7 = v14;
      if (v14)
      {
        v8 = 0;
        v9 = v14;
        do
        {
          if (*((_DWORD *)v9 + 6) == 1)
            ++v8;
          v9 = (uint64_t *)*v9;
        }
        while (v9);
        v10 = v14;
        do
        {
          if (*((_DWORD *)v10 + 6) == 5)
            v9 = (uint64_t *)((char *)v9 + 1);
          v10 = (uint64_t *)*v10;
        }
        while (v10);
        do
        {
          if (*((_DWORD *)v7 + 6) == 6)
            v10 = (uint64_t *)((char *)v10 + 1);
          v7 = (uint64_t *)*v7;
        }
        while (v7);
      }
      else
      {
        v9 = 0;
        v8 = 0;
        v10 = 0;
      }
      *(_QWORD *)a3 = v8;
      *(_QWORD *)(a3 + 8) = v9;
      *(_QWORD *)(a3 + 16) = v10;
      *(_DWORD *)(a3 + 48) = 0;
      if (__p)
      {
        v22 = __p;
        operator delete(__p);
      }
      std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>>>::~__hash_table((uint64_t)v18);
      std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>>>::~__hash_table((uint64_t)v17);
      std::__hash_table<CLMicroLocationFingerprint::Measurement,CLMicroLocationFingerprint::Measurement::HashMeasurement,CLMicroLocationFingerprint::Measurement::PredicateMeasurement,std::allocator<CLMicroLocationFingerprint::Measurement>>::~__hash_table((uint64_t)v13);
    }
    else
    {
      *(_DWORD *)(a3 + 48) = 1;
      v13[0] = 1;
      std::__tree<CLMicroLocationRecordingCompletionMetaInformation::RecordingError>::__emplace_unique_key_args<CLMicroLocationRecordingCompletionMetaInformation::RecordingError,CLMicroLocationRecordingCompletionMetaInformation::RecordingError>((uint64_t **)(a3 + 24), v13, v13);
    }
    return (uint64_t **)std::__optional_destruct_base<CLMicroLocationFingerprint,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)buf);
  }
}

void sub_241B48F84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
  std::__optional_destruct_base<CLMicroLocationFingerprint,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&a37);
  _Unwind_Resume(a1);
}

uint64_t CLMicroLocationRecorder::setIgnoreBleRssiMeasurements(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t i;

  v1 = *(_QWORD *)(this + 8);
  v2 = *(_QWORD *)(v1 + 88);
  for (i = *(_QWORD *)(v1 + 96); v2 != i; v2 += 248)
  {
    *(_DWORD *)(v2 + 220) |= 0x2000u;
    *(_BYTE *)(v2 + 157) = 1;
  }
  return this;
}

uint64_t CLMicroLocationRecorder::setIgnoreUwbRangeMeasurements(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t i;

  v1 = *(_QWORD *)(this + 8);
  v2 = *(_QWORD *)(v1 + 88);
  for (i = *(_QWORD *)(v1 + 96); v2 != i; v2 += 248)
  {
    *(_DWORD *)(v2 + 220) |= 0x800u;
    *(_BYTE *)(v2 + 156) = 1;
  }
  return this;
}

uint64_t CLMicroLocationRecorder::setConfidenceAndReasons(uint64_t a1, unsigned int a2, int **a3)
{
  int *v6;
  int *v7;
  uint8_t *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _BYTE *p_p;
  const char *v13;
  NSObject *v14;
  uint64_t v15;
  void *__p;
  uint64_t v18;
  unsigned __int8 v19;
  _QWORD v20[2];
  _QWORD v21[11];
  char v22;
  uint64_t v23;
  uint8_t buf[8];
  _BYTE v25[10];
  __int16 v26;
  signed int v27;
  __int16 v28;
  const char *v29;
  uint64_t v30;

  v30 = *MEMORY[0x24BDAC8D0];
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v20);
  v6 = *a3;
  v7 = a3[1];
  if (*a3 != v7)
  {
    do
    {
      CLMicroLocationUtils::placeConfidenceReasonToString(*v6, buf);
      if (v27 >= 0)
        v8 = buf;
      else
        v8 = *(uint8_t **)buf;
      if (v27 >= 0)
        v9 = HIBYTE(v27);
      else
        v9 = *(_QWORD *)v25;
      v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)v8, v9);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)" ", 1);
      if (SHIBYTE(v27) < 0)
        operator delete(*(void **)buf);
      ++v6;
    }
    while (v6 != v7);
  }
  std::stringbuf::str();
  if (((char)v19 & 0x80000000) == 0)
  {
    if (v19)
    {
      v11 = --v19;
      p_p = &__p;
      goto LABEL_16;
    }
LABEL_19:
    v13 = "";
    goto LABEL_20;
  }
  if (!v18)
    goto LABEL_19;
  v11 = v18 - 1;
  p_p = __p;
  --v18;
LABEL_16:
  p_p[v11] = 0;
  if ((v19 & 0x80u) == 0)
    v13 = (const char *)&__p;
  else
    v13 = (const char *)__p;
LABEL_20:
  if (onceToken_MicroLocation_Default != -1)
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_106);
  v14 = logObject_MicroLocation_Default;
  if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 68289538;
    *(_DWORD *)&buf[4] = 0;
    *(_WORD *)v25 = 2082;
    *(_QWORD *)&v25[2] = "";
    v26 = 1026;
    v27 = a2;
    v28 = 2082;
    v29 = v13;
    _os_log_impl(&dword_2419D9000, v14, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"recorder setting confidence and reasons\", \"confidence level\":%{public}d, \"confidence reasons\":%{public, location:escape_only}s}", buf, 0x22u);
  }
  CLMicroLocationRecorder::RecordingTransaction::setConfidenceAndReasons(*(_QWORD *)(a1 + 8), a2, (uint64_t)a3);
  if ((char)v19 < 0)
    operator delete(__p);
  v20[0] = *MEMORY[0x24BEDB7F0];
  v15 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(_QWORD *)((char *)v20 + *(_QWORD *)(v20[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  v21[0] = v15;
  v21[1] = MEMORY[0x24BEDB848] + 16;
  if (v22 < 0)
    operator delete((void *)v21[9]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x2426A0444](&v23);
}

void sub_241B492D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
    operator delete(__p);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void CLMicroLocationRecorder::RecordingTransaction::setConfidenceAndReasons(uint64_t a1, unsigned int a2, uint64_t a3)
{
  _DWORD *v4;
  _DWORD *v5;
  const char *v6;
  const char *v7;
  unsigned int *v8;
  unsigned int *v9;
  int v10;
  int v11;
  uint64_t v12;
  int v13;
  unsigned int v14;
  void *v15;
  unsigned int *v16;
  uint64_t v17;
  unsigned int v18;
  void *__p;
  void *v20;
  uint64_t v21;
  unsigned int v22;
  void *v23;
  _BYTE *v24;
  uint64_t v25;

  v22 = a2;
  v24 = 0;
  v25 = 0;
  v23 = 0;
  std::vector<CLMicroLocationProto::ConfidenceReason>::__init_with_size[abi:ne180100]<CLMicroLocationProto::ConfidenceReason*,CLMicroLocationProto::ConfidenceReason*>(&v23, *(const void **)a3, *(_QWORD *)(a3 + 8), (uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 2);
  v4 = *(_DWORD **)(a1 + 88);
  v5 = *(_DWORD **)(a1 + 96);
  v14 = v22;
  v16 = 0;
  v17 = 0;
  v15 = 0;
  std::vector<CLMicroLocationProto::ConfidenceReason>::__init_with_size[abi:ne180100]<CLMicroLocationProto::ConfidenceReason*,CLMicroLocationProto::ConfidenceReason*>(&v15, v23, (uint64_t)v24, (v24 - (_BYTE *)v23) >> 2);
  if (v4 != v5)
  {
    v6 = "::CLMicroLocationProto::ConfidenceLevel_IsValid(value)";
    v7 = "set_confidencelevel";
    while (CLMicroLocationProto::ConfidenceLevel_IsValid((CLMicroLocationProto *)v14))
    {
      v4[55] |= 0x4000u;
      v4[50] = v14;
      v4[48] = 0;
      v8 = (unsigned int *)v15;
      v9 = v16;
      if (v15 != v16)
      {
        while (1)
        {
          v10 = *v8;
          if (!CLMicroLocationProto::ConfidenceReason_IsValid((CLMicroLocationProto *)*v8))
            break;
          v11 = v4[48];
          if (v11 == v4[49])
          {
            wireless_diagnostics::google::protobuf::RepeatedField<int>::Reserve(v4 + 46, v11 + 1);
            v11 = v4[48];
          }
          v12 = *((_QWORD *)v4 + 23);
          v4[48] = v11 + 1;
          *(_DWORD *)(v12 + 4 * v11) = v10;
          if (++v8 == v9)
            goto LABEL_9;
        }
        v13 = 20721;
        v7 = "add_confidencereasons";
        v6 = "::CLMicroLocationProto::ConfidenceReason_IsValid(value)";
LABEL_18:
        __assert_rtn(v7, "microlocation.pb.h", v13, v6);
      }
LABEL_9:
      v4 += 62;
      if (v4 == v5)
        goto LABEL_10;
    }
    v13 = 20701;
    goto LABEL_18;
  }
LABEL_10:
  v18 = v14;
  v20 = 0;
  v21 = 0;
  __p = 0;
  std::vector<CLMicroLocationProto::ConfidenceReason>::__init_with_size[abi:ne180100]<CLMicroLocationProto::ConfidenceReason*,CLMicroLocationProto::ConfidenceReason*>(&__p, v15, (uint64_t)v16, ((char *)v16 - (_BYTE *)v15) >> 2);
  if (__p)
  {
    v20 = __p;
    operator delete(__p);
  }
  if (v15)
  {
    v16 = (unsigned int *)v15;
    operator delete(v15);
  }
  if (v23)
  {
    v24 = v23;
    operator delete(v23);
  }
}

void sub_241B49524(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t CLMicroLocationRecorder::ScanMetadata::ScanMetadata(uint64_t a1, uint64_t a2)
{
  int v4;

  *(CFAbsoluteTime *)a1 = cl::chrono::CFAbsoluteTimeClock::now();
  *(_QWORD *)(a1 + 8) = mach_continuous_time();
  if ((a2 & 0xFF00000000) != 0)
    v4 = a2;
  else
    v4 = 0;
  *(_DWORD *)(a1 + 16) = v4;
  return a1;
}

void CLMicroLocationRecorder::RecordingTransaction::~RecordingTransaction(CLMicroLocationRecorder::RecordingTransaction *this)
{
  NSObject *v2;
  char *v3;
  unint64_t v4;
  unint64_t v5;
  id v6;
  id v7;
  id v8;
  uint64_t v9;
  __int16 v10;
  const char *v11;
  __int16 v12;
  char *v13;
  __int16 v14;
  unint64_t v15;
  __int16 v16;
  unint64_t v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  if (onceToken_MicroLocationQE_Default != -1)
    dispatch_once(&onceToken_MicroLocationQE_Default, &__block_literal_global_238);
  v2 = (id)logObject_MicroLocationQE_Default;
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    v3 = (char *)operator new(0x28uLL);
    *(_QWORD *)(v3 + 29) = 0;
    *(_OWORD *)v3 = 0u;
    *((_OWORD *)v3 + 1) = 0u;
    boost::uuids::to_chars<char *>((uint64_t)this, v3);
    v4 = 0xEF7BDEF7BDEF7BDFLL * ((uint64_t)(*((_QWORD *)this + 12) - *((_QWORD *)this + 11)) >> 3);
    v5 = 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(*((_QWORD *)this + 9) - *((_QWORD *)this + 8)) >> 3);
    v9 = 68289794;
    v10 = 2082;
    v11 = "";
    v12 = 2082;
    v13 = v3;
    v14 = 2050;
    v15 = v4;
    v16 = 2050;
    v17 = v5;
    _os_log_impl(&dword_2419D9000, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLMicroLocationRecorder: commiting recording transaction\", \"Recording UUID\":%{public, location:escape_only}s, \"Num records\":%{public}lu, \"Num measurements\":%{public}lu}", (uint8_t *)&v9, 0x30u);
    operator delete(v3);
  }

  v6 = *(id *)(*((_QWORD *)this + 17) + 88);
  objc_msgSend(v6, "insertEntries:", (char *)this + 88);

  v7 = *(id *)(*((_QWORD *)this + 17) + 64);
  objc_msgSend(v7, "insertEntries:", (char *)this + 64);

  v8 = *(id *)(*((_QWORD *)this + 17) + 40);
  objc_msgSend(v8, "insertEntries:", (char *)this + 112);

  v9 = (uint64_t)this + 112;
  std::vector<CLMicroLocationRecordingLabelsTable::Entry>::__destroy_vector::operator()[abi:ne180100]((void ***)&v9);
  v9 = (uint64_t)this + 88;
  std::vector<CLMicroLocationRecordingEventsTable::Entry>::__destroy_vector::operator()[abi:ne180100]((void ***)&v9);
  v9 = (uint64_t)this + 64;
  std::vector<CLMicroLocationMeasurementTable::Entry>::__destroy_vector::operator()[abi:ne180100]((void ***)&v9);
  if (*((char *)this + 47) < 0)
    operator delete(*((void **)this + 3));
}

void sub_241B497A8(_Unwind_Exception *exception_object, int a2)
{
  void *v2;

  if (a2)
  {
    operator delete(v2);
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t CLMicroLocationRecorder::RecordingTransaction::addMeasurementBatch(uint64_t result, double *a2, CLMicroLocationProto::Measurement **a3)
{
  CLMicroLocationProto::Measurement *v3;
  CLMicroLocationProto::Measurement *v4;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  unint64_t v9;
  unsigned int v10;

  v3 = *a3;
  v4 = a3[1];
  if (*a3 != v4)
  {
    v6 = (uint64_t *)result;
    v7 = (uint64_t *)(result + 64);
    v8 = (uint64_t *)(a2 + 1);
    v9 = *(_QWORD *)(result + 72);
    do
    {
      v10 = *((_DWORD *)v3 + 20);
      if (v9 >= v6[10])
      {
        result = std::vector<CLMicroLocationMeasurementTable::Entry>::__emplace_back_slow_path<boost::uuids::uuid &,std::chrono::time_point<cl::chrono::CFAbsoluteTimeClock,std::chrono::duration<long double,std::ratio<1l,1l>>> const&,unsigned long long const&,CLMicroLocationProto::Measurement const&,CLMicroLocationMeasurementTable::EntryFlags>(v7, v6, a2, v8, v3, &v10);
        v9 = result;
      }
      else
      {
        result = std::vector<CLMicroLocationMeasurementTable::Entry>::__construct_one_at_end[abi:ne180100]<boost::uuids::uuid &,std::chrono::time_point<cl::chrono::CFAbsoluteTimeClock,std::chrono::duration<long double,std::ratio<1l,1l>>> const&,unsigned long long const&,CLMicroLocationProto::Measurement const&,CLMicroLocationMeasurementTable::EntryFlags>((uint64_t)v7, v6, a2, v8, v3, &v10);
        v9 += 120;
      }
      v6[9] = v9;
      v3 = (CLMicroLocationProto::Measurement *)((char *)v3 + 88);
    }
    while (v3 != v4);
  }
  return result;
}

void CLMicroLocationRecorder::RecordingTransaction::addRecordingEvent(CLMicroLocationRecorder::RecordingTransaction *this, const CLMicroLocationProto::RecordingEvent *a2)
{
  CLMicroLocationRecorder::RecordingTransaction *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  CLMicroLocationProto::RecordingEvent *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  CLMicroLocationProto::RecordingEvent *v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  _OWORD *v17;
  void *v18;
  _OWORD *v19;
  void *p_p;
  char *v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  void *__p;
  __int128 v27;
  void *v28;
  __int128 v29;
  std::string v30;
  _BYTE buf[18];
  __int16 v32;
  void *v33;
  __int16 v34;
  void *v35;
  __int16 v36;
  char *v37;
  __int128 v38;
  char v39;
  __int128 v40;
  char v41;
  uint64_t v42;

  v3 = this;
  v42 = *MEMORY[0x24BDAC8D0];
  LOBYTE(v40) = 0;
  v41 = 0;
  memset(&v30, 0, sizeof(v30));
  LOBYTE(v38) = 0;
  v39 = 0;
  v4 = *((_DWORD *)a2 + 18);
  if (v4 != 13)
    goto LABEL_7;
  if ((*((_BYTE *)a2 + 141) & 4) == 0)
    goto LABEL_40;
  v5 = *((_QWORD *)a2 + 11);
  if (!v5)
  {
    this = (CLMicroLocationRecorder::RecordingTransaction *)CLMicroLocationProto::RecordingEvent::default_instance(this);
    v5 = *((_QWORD *)this + 11);
  }
  if ((*(_BYTE *)(v5 + 44) & 8) == 0)
  {
    v4 = *((_DWORD *)a2 + 18);
LABEL_7:
    if (v4 == 1 && (*((_BYTE *)a2 + 140) & 4) != 0)
    {
      v6 = *((_QWORD *)a2 + 2);
      if (!v6)
      {
        this = (CLMicroLocationRecorder::RecordingTransaction *)CLMicroLocationProto::RecordingEvent::default_instance(this);
        v6 = *((_QWORD *)this + 2);
      }
      if ((*(_BYTE *)(v6 + 44) & 8) != 0)
      {
        v7 = *((_QWORD *)a2 + 2);
        if (!v7)
          v7 = *(_QWORD *)(CLMicroLocationProto::RecordingEvent::default_instance(this) + 16);
        v8 = (CLMicroLocationProto::RecordingEvent *)CLMicroLocationProtobufHelper::uuidFromProtobuf(*(uint64_t ***)(v7 + 24), buf);
        v40 = *(_OWORD *)buf;
        v41 = buf[16];
        v9 = *((_QWORD *)a2 + 2);
        v10 = v9;
        if (!v9)
        {
          v8 = (CLMicroLocationProto::RecordingEvent *)CLMicroLocationProto::RecordingEvent::default_instance(v8);
          v10 = *((_QWORD *)v8 + 2);
          v9 = *((_QWORD *)a2 + 2);
        }
        if ((*(_BYTE *)(v10 + 44) & 4) != 0)
        {
          if (!v9)
            v9 = *(_QWORD *)(CLMicroLocationProto::RecordingEvent::default_instance(v8) + 16);
          v8 = (CLMicroLocationProto::RecordingEvent *)std::string::operator=(&v30, *(const std::string **)(v9 + 16));
          v9 = *((_QWORD *)a2 + 2);
        }
        if (!v9)
        {
          v8 = (CLMicroLocationProto::RecordingEvent *)CLMicroLocationProto::RecordingEvent::default_instance(v8);
          v9 = *((_QWORD *)v8 + 2);
        }
        if ((*(_BYTE *)(v9 + 44) & 0x10) != 0)
        {
          v11 = *((_QWORD *)a2 + 2);
          if (!v11)
            v11 = *(_QWORD *)(CLMicroLocationProto::RecordingEvent::default_instance(v8) + 16);
LABEL_39:
          CLMicroLocationProtobufHelper::uuidFromProtobuf(*(uint64_t ***)(v11 + 32), buf);
          v38 = *(_OWORD *)buf;
          v39 = buf[16];
          goto LABEL_40;
        }
      }
    }
    goto LABEL_40;
  }
  v12 = *((_QWORD *)a2 + 11);
  if (!v12)
    v12 = *(_QWORD *)(CLMicroLocationProto::RecordingEvent::default_instance(this) + 88);
  v13 = (CLMicroLocationProto::RecordingEvent *)CLMicroLocationProtobufHelper::uuidFromProtobuf(*(uint64_t ***)(v12 + 24), buf);
  v40 = *(_OWORD *)buf;
  v41 = buf[16];
  v14 = *((_QWORD *)a2 + 11);
  v15 = v14;
  if (!v14)
  {
    v13 = (CLMicroLocationProto::RecordingEvent *)CLMicroLocationProto::RecordingEvent::default_instance(v13);
    v15 = *((_QWORD *)v13 + 11);
    v14 = *((_QWORD *)a2 + 11);
  }
  if ((*(_BYTE *)(v15 + 44) & 4) != 0)
  {
    if (!v14)
      v14 = *(_QWORD *)(CLMicroLocationProto::RecordingEvent::default_instance(v13) + 88);
    v13 = (CLMicroLocationProto::RecordingEvent *)std::string::operator=(&v30, *(const std::string **)(v14 + 16));
    v14 = *((_QWORD *)a2 + 11);
  }
  if (!v14)
  {
    v13 = (CLMicroLocationProto::RecordingEvent *)CLMicroLocationProto::RecordingEvent::default_instance(v13);
    v14 = *((_QWORD *)v13 + 11);
  }
  if ((*(_BYTE *)(v14 + 44) & 0x10) != 0)
  {
    v11 = *((_QWORD *)a2 + 11);
    if (!v11)
      v11 = *(_QWORD *)(CLMicroLocationProto::RecordingEvent::default_instance(v13) + 88);
    goto LABEL_39;
  }
LABEL_40:
  if (v39 && v41)
  {
    if (onceToken_MicroLocation_Default != -1)
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_106);
    v16 = (id)logObject_MicroLocation_Default;
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
    {
      v17 = operator new(0x28uLL);
      v28 = v17;
      v29 = xmmword_241BB2320;
      *v17 = 0u;
      v17[1] = 0u;
      *(_QWORD *)((char *)v17 + 29) = 0;
      boost::uuids::to_chars<char *>((uint64_t)v3, v17);
      if (v29 >= 0)
        v18 = &v28;
      else
        v18 = v28;
      if (!v41)
        std::__throw_bad_optional_access[abi:ne180100]();
      v19 = operator new(0x28uLL);
      __p = v19;
      v27 = xmmword_241BB2320;
      *v19 = 0u;
      v19[1] = 0u;
      *(_QWORD *)((char *)v19 + 29) = 0;
      boost::uuids::to_chars<char *>((uint64_t)&v40, v19);
      if (v27 >= 0)
        p_p = &__p;
      else
        p_p = __p;
      if (!v39)
        std::__throw_bad_optional_access[abi:ne180100]();
      v21 = (char *)operator new(0x28uLL);
      *(_QWORD *)(v21 + 29) = 0;
      *(_OWORD *)v21 = 0u;
      *((_OWORD *)v21 + 1) = 0u;
      boost::uuids::to_chars<char *>((uint64_t)&v38, v21);
      *(_DWORD *)buf = 68289794;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)&buf[8] = 2082;
      *(_QWORD *)&buf[10] = "";
      v32 = 2082;
      v33 = v18;
      v34 = 2082;
      v35 = p_p;
      v36 = 2082;
      v37 = v21;
      _os_log_impl(&dword_2419D9000, v16, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLMicroLocationRecorder: adding label for recording event\", \"Recording UUID\":%{public, location:escape_only}s, \"Trigger UUID\":%{public, location:escape_only}s, \"Label UUID\":%{public, location:escape_only}s}", buf, 0x30u);
      operator delete(v21);
      if (SHIBYTE(v27) < 0)
        operator delete(__p);
      if (SHIBYTE(v29) < 0)
        operator delete(v28);
    }

    *(_QWORD *)buf = *((_QWORD *)a2 + 1);
    v22 = *((_QWORD *)v3 + 15);
    if (v22 >= *((_QWORD *)v3 + 16))
    {
      v23 = std::vector<CLMicroLocationRecordingLabelsTable::Entry>::__emplace_back_slow_path<boost::uuids::uuid &,std::string &,boost::uuids::uuid &,std::chrono::time_point<cl::chrono::CFAbsoluteTimeClock,std::chrono::duration<long double,std::ratio<1l,1l>>>>((uint64_t *)v3 + 14, (uint64_t *)&v40, (uint64_t)&v30, (uint64_t *)&v38, (double *)buf);
    }
    else
    {
      std::allocator<CLMicroLocationRecordingLabelsTable::Entry>::construct[abi:ne180100]<CLMicroLocationRecordingLabelsTable::Entry,boost::uuids::uuid &,std::string &,boost::uuids::uuid &,std::chrono::time_point<cl::chrono::CFAbsoluteTimeClock,std::chrono::duration<long double,std::ratio<1l,1l>>>>((uint64_t)v3 + 128, *((_QWORD *)v3 + 15), (uint64_t *)&v40, (uint64_t)&v30, (uint64_t *)&v38, (double *)buf);
      v23 = v22 + 64;
      *((_QWORD *)v3 + 15) = v22 + 64;
    }
    *((_QWORD *)v3 + 15) = v23;
  }
  v24 = *((_QWORD *)v3 + 12);
  if (v24 >= *((_QWORD *)v3 + 13))
  {
    v25 = std::vector<CLMicroLocationRecordingEventsTable::Entry>::__emplace_back_slow_path<boost::uuids::uuid &,std::chrono::time_point<cl::chrono::CFAbsoluteTimeClock,std::chrono::duration<long double,std::ratio<1l,1l>>> &,std::string &,CLMicroLocationProto::RecordingEvent const&,std::optional<boost::uuids::uuid> &,boost::uuids::uuid &>((uint64_t *)v3 + 11, (uint64_t *)v3, (double *)v3 + 2, (uint64_t)v3 + 24, (uint64_t)a2, &v40, (_QWORD *)v3 + 6);
  }
  else
  {
    std::allocator<CLMicroLocationRecordingEventsTable::Entry>::construct[abi:ne180100]<CLMicroLocationRecordingEventsTable::Entry,boost::uuids::uuid &,std::chrono::time_point<cl::chrono::CFAbsoluteTimeClock,std::chrono::duration<long double,std::ratio<1l,1l>>> &,std::string &,CLMicroLocationProto::RecordingEvent const&,std::optional<boost::uuids::uuid> &,boost::uuids::uuid &>((uint64_t)v3 + 104, *((_QWORD *)v3 + 12), (uint64_t *)v3, (double *)v3 + 2, (uint64_t)v3 + 24, (uint64_t)a2, &v40, (_QWORD *)v3 + 6);
    v25 = v24 + 248;
    *((_QWORD *)v3 + 12) = v24 + 248;
  }
  *((_QWORD *)v3 + 12) = v25;
  if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v30.__r_.__value_.__l.__data_);
}

void sub_241B49D28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a29 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t CLMicroLocationRecorder::RecordingTransaction::addRecordingLabel(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t *a4, double a5)
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t result;
  double v10;

  v10 = a5;
  v7 = a1[16];
  v6 = (uint64_t)(a1 + 16);
  v8 = *(_QWORD *)(v6 - 8);
  if (v8 >= v7)
  {
    result = std::vector<CLMicroLocationRecordingLabelsTable::Entry>::__emplace_back_slow_path<boost::uuids::uuid const&,std::string const&,boost::uuids::uuid const&,std::chrono::time_point<cl::chrono::CFAbsoluteTimeClock,std::chrono::duration<long double,std::ratio<1l,1l>>> &>(a1 + 14, a2, a3, a4, &v10);
  }
  else
  {
    std::allocator<CLMicroLocationRecordingLabelsTable::Entry>::construct[abi:ne180100]<CLMicroLocationRecordingLabelsTable::Entry,boost::uuids::uuid const&,std::string const&,boost::uuids::uuid const&,std::chrono::time_point<cl::chrono::CFAbsoluteTimeClock,std::chrono::duration<long double,std::ratio<1l,1l>>> &>(v6, *(_QWORD *)(v6 - 8), a2, a3, a4, &v10);
    result = v8 + 64;
    a1[15] = v8 + 64;
  }
  a1[15] = result;
  return result;
}

void sub_241B49E58(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 120) = v2;
  _Unwind_Resume(a1);
}

uint64_t CLMicroLocationRecorder::recordMeasurementBatch(uint64_t a1, __int128 *a2, CLMicroLocationProto::Measurement **a3)
{
  uint64_t v3;
  CLMicroLocationRecorder *v5;
  const CLMicroLocationProto::RecordingEvent *v6;
  __int128 v7;
  uint64_t v8;

  v3 = *(_QWORD *)(a1 + 8);
  if (v3)
  {
    v7 = *a2;
    v8 = *((_QWORD *)a2 + 2);
    return CLMicroLocationRecorder::RecordingTransaction::addMeasurementBatch(v3, (double *)&v7, a3);
  }
  else
  {
    v5 = (CLMicroLocationRecorder *)CLMicroLocationRecorder::recordMeasurementBatch();
    return CLMicroLocationRecorder::recordEvent(v5, v6);
  }
}

void CLMicroLocationRecorder::recordEvent(CLMicroLocationRecorder *this, const CLMicroLocationProto::RecordingEvent *a2)
{
  CLMicroLocationRecorder::RecordingTransaction *v3;
  const CLMicroLocationProto::RecordingEvent *v4;
  const CLMicroLocationProto::RecordingEvent *v5;
  int64x2_t v6;
  uint64_t v7;
  CLMicroLocationRecorder *v8;
  int64x2_t v9;
  uint64_t v10;
  int64x2_t *v11;

  v3 = (CLMicroLocationRecorder::RecordingTransaction *)*((_QWORD *)this + 1);
  if (v3)
  {
    CLMicroLocationRecorder::RecordingTransaction::addRecordingEvent(v3, a2);
    v4 = (const CLMicroLocationProto::RecordingEvent *)*((_QWORD *)this + 2);
    v5 = (const CLMicroLocationProto::RecordingEvent *)*((_QWORD *)this + 3);
    if (v4 == v5)
    {
      v6 = vdupq_n_s64((unint64_t)v4);
    }
    else
    {
      do
      {
        CLMicroLocationRecorder::RecordingTransaction::addRecordingEvent(*((CLMicroLocationRecorder::RecordingTransaction **)this + 1), v4);
        v4 = (const CLMicroLocationProto::RecordingEvent *)((char *)v4 + 144);
      }
      while (v4 != v5);
      v6 = *((int64x2_t *)this + 1);
    }
    v9 = v6;
    *((_QWORD *)this + 2) = 0;
    *((_QWORD *)this + 3) = 0;
    v7 = *((_QWORD *)this + 4);
    *((_QWORD *)this + 4) = 0;
    v10 = v7;
    v11 = &v9;
    std::vector<CLMicroLocationProto::RecordingEvent>::__destroy_vector::operator()[abi:ne180100]((void ***)&v11);
  }
  else
  {
    v8 = (CLMicroLocationRecorder *)CLMicroLocationRecorder::recordEvent();
    CLMicroLocationRecorder::clearPendingRecordsBuff(v8);
  }
}

void CLMicroLocationRecorder::clearPendingRecordsBuff(CLMicroLocationRecorder *this)
{
  __int128 v1;
  uint64_t v2;
  void **v3;

  v1 = *((_OWORD *)this + 1);
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  v2 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  v3 = (void **)&v1;
  std::vector<CLMicroLocationProto::RecordingEvent>::__destroy_vector::operator()[abi:ne180100](&v3);
}

void CLMicroLocationRecorder::addPendingRecordEvent(CLMicroLocationRecorder *this, const CLMicroLocationProto::RecordingEvent *a2)
{
  unint64_t v3;
  uint64_t v4;

  if (*(_DWORD *)this == 1)
  {
    CLMicroLocationRecorder::recordEvent(this, a2);
  }
  else
  {
    v3 = *((_QWORD *)this + 3);
    if (v3 >= *((_QWORD *)this + 4))
    {
      v4 = std::vector<CLMicroLocationProto::RecordingEvent>::__emplace_back_slow_path<CLMicroLocationProto::RecordingEvent const&>((uint64_t *)this + 2, a2);
    }
    else
    {
      CLMicroLocationProto::RecordingEvent::RecordingEvent(*((CLMicroLocationProto::RecordingEvent **)this + 3), a2);
      v4 = v3 + 144;
      *((_QWORD *)this + 3) = v3 + 144;
    }
    *((_QWORD *)this + 3) = v4;
  }
}

void sub_241B49FCC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 24) = v2;
  _Unwind_Resume(a1);
}

uint64_t CLMicroLocationRecorder::recordTruthLabel(uint64_t a1, uint64_t a2, void *a3, CLMicroLocationProtobufHelper *a4)
{
  CLMicroLocationProtobufHelper *v7;
  uint64_t *v8;
  double v9;
  uint64_t v10;
  NSObject *v11;
  uint64_t v12;
  NSObject *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  double v19;
  char *v21;
  uint64_t v22;
  char *v23;
  std::string v24;
  char **v25;
  char v26;
  __int128 v27;
  std::string __p;
  __int128 v29;
  uint64_t v30;
  _QWORD buf[9];
  uint64_t v32[2];
  char v33;
  uint64_t v34[2];
  char v35;
  uint64_t v36;

  v36 = *MEMORY[0x24BDAC8D0];
  v7 = a3;
  CLMicroLocationProtobufHelper::boostUuidFromNSUUID(a4, (uint64_t)v34);
  CLMicroLocationProtobufHelper::boostUuidFromNSUUID(v7, (uint64_t)v32);
  if (v35 && v33)
  {
    if (*(_DWORD *)a1 == 1)
    {
      v8 = *(uint64_t **)(a1 + 8);
      v9 = cl::chrono::CFAbsoluteTimeClock::now();
      CLMicroLocationRecorder::RecordingTransaction::addRecordingLabel(v8, v32, a2, v34, v9);
      v10 = 1;
    }
    else
    {
      v15 = v32[0];
      v16 = v32[1];
      if (*(char *)(a2 + 23) < 0)
        std::string::__init_copy_ctor_external(&v24, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
      else
        v24 = *(std::string *)a2;
      v17 = v34[0];
      v18 = v34[1];
      v19 = cl::chrono::CFAbsoluteTimeClock::now();
      CLMicroLocationRecordingLabelsTable::Entry::Entry((uint64_t)buf, v15, v16, (__int128 *)&v24, v17, v18, v19);
      if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v24.__r_.__value_.__l.__data_);
      v27 = *(_OWORD *)buf;
      if (SHIBYTE(buf[4]) < 0)
        std::string::__init_copy_ctor_external(&__p, (const std::string::value_type *)buf[2], buf[3]);
      else
        __p = *(std::string *)&buf[2];
      v29 = *(_OWORD *)&buf[5];
      v30 = buf[7];
      v22 = 0;
      v23 = 0;
      v21 = 0;
      v25 = &v21;
      v26 = 0;
      v21 = (char *)operator new(0x40uLL);
      v22 = (uint64_t)v21;
      v23 = v21 + 64;
      v22 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<CLMicroLocationRecordingLabelsTable::Entry>,CLMicroLocationRecordingLabelsTable::Entry const*,CLMicroLocationRecordingLabelsTable::Entry const*,CLMicroLocationRecordingLabelsTable::Entry*>((uint64_t)&v23, &v27, (__int128 *)buf, (uint64_t)v21);
      v10 = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 40), "insertEntries:", &v21);
      v25 = &v21;
      std::vector<CLMicroLocationRecordingLabelsTable::Entry>::__destroy_vector::operator()[abi:ne180100]((void ***)&v25);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (SHIBYTE(buf[4]) < 0)
        operator delete((void *)buf[2]);
    }
  }
  else
  {
    if (onceToken_MicroLocation_Default != -1)
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_106);
    v11 = logObject_MicroLocation_Default;
    if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_ERROR))
    {
      if (*(char *)(a2 + 23) >= 0)
        v12 = a2;
      else
        v12 = *(_QWORD *)a2;
      buf[0] = 68289282;
      LOWORD(buf[1]) = 2082;
      *(_QWORD *)((char *)&buf[1] + 2) = "";
      WORD1(buf[2]) = 2082;
      *(_QWORD *)((char *)&buf[2] + 4) = v12;
      _os_log_impl(&dword_2419D9000, v11, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"CLMicroLocationRecorder: received invalid truth label\", \"Client\":%{public, location:escape_only}s}", (uint8_t *)buf, 0x1Cu);
    }
    if (onceToken_MicroLocation_Default != -1)
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_106);
    v13 = logObject_MicroLocation_Default;
    if (os_signpost_enabled((os_log_t)logObject_MicroLocation_Default))
    {
      if (*(char *)(a2 + 23) >= 0)
        v14 = a2;
      else
        v14 = *(_QWORD *)a2;
      buf[0] = 68289282;
      LOWORD(buf[1]) = 2082;
      *(_QWORD *)((char *)&buf[1] + 2) = "";
      WORD1(buf[2]) = 2082;
      *(_QWORD *)((char *)&buf[2] + 4) = v14;
      _os_signpost_emit_with_name_impl(&dword_2419D9000, v13, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "CLMicroLocationRecorder: received invalid truth label", "{\"msg%{public}.0s\":\"CLMicroLocationRecorder: received invalid truth label\", \"Client\":%{public, location:escape_only}s}", (uint8_t *)buf, 0x1Cu);
    }
    v10 = 0;
  }

  return v10;
}

void sub_241B4A330(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *__p,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  void *v40;

  if (a40 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

uint64_t CLMicroLocationRecorder::addTriggerEventForFutureLabeling(uint64_t a1, const std::string *a2, uint64_t *a3, uint64_t a4, _QWORD *a5)
{
  double v10;
  std::string *v11;
  std::string *v12;
  std::string *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v18;
  uint64_t v19;
  char *v20;
  std::string v21;
  _BYTE v22[144];
  char v23[8];
  std::string *v24;
  std::string *v25;
  int v26;
  void **v27;
  char v28;
  std::string __str;
  std::string __p;
  _OWORD v31[2];
  _OWORD v32[10];
  char v33;
  uint64_t v34;
  __int128 v35;
  char v36;
  std::string v37;
  std::string __s;
  _OWORD v39[2];
  _OWORD v40[10];
  char v41;
  uint64_t v42;

  v42 = *MEMORY[0x24BDAC8D0];
  v10 = cl::chrono::CFAbsoluteTimeClock::now();
  CLMicroLocationProto::TruthLabelDonation::TruthLabelDonation((CLMicroLocationProto::TruthLabelDonation *)v23);
  v26 |= 2u;
  v11 = v24;
  v12 = (std::string *)MEMORY[0x24BEDD958];
  if (v24 == (std::string *)MEMORY[0x24BEDD958])
  {
    v11 = (std::string *)operator new();
    v11->__r_.__value_.__r.__words[0] = 0;
    v11->__r_.__value_.__l.__size_ = 0;
    v11->__r_.__value_.__r.__words[2] = 0;
    v24 = v11;
  }
  std::string::operator=(v11, a2);
  memset(&__str, 0, sizeof(__str));
  if ((boost::conversion::detail::try_lexical_convert<std::string,boost::uuids::uuid>((uint64_t)a3, &__str) & 1) == 0)
  {
    std::bad_cast::bad_cast((std::bad_cast *)&v37);
    v37.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_2511D2C18;
    boost::throw_exception<boost::bad_lexical_cast>((uint64_t)&v37);
  }
  v26 |= 4u;
  v13 = v25;
  if (v25 == v12)
  {
    v13 = (std::string *)operator new();
    v13->__r_.__value_.__r.__words[0] = 0;
    v13->__r_.__value_.__l.__size_ = 0;
    v13->__r_.__value_.__r.__words[2] = 0;
    v25 = v13;
  }
  std::string::operator=(v13, &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  CLMicroLocationProtobufHelper::createRecordingEvent<CLMicroLocationProto::TruthLabelDonation>((CLMicroLocationProto::RecordingEvent *)v23, 0, 0, 0, (CLMicroLocationProto *)3, (uint64_t)v22, v10);
  v14 = *a3;
  v15 = a3[1];
  if (*(char *)(a4 + 23) < 0)
    std::string::__init_copy_ctor_external(&v21, *(const std::string::value_type **)a4, *(_QWORD *)(a4 + 8));
  else
    v21 = *(std::string *)a4;
  v35 = *(_OWORD *)a3;
  v36 = 1;
  CLMicroLocationRecordingEventsTable::Entry::Entry(&v37, v14, v15, &v21, v22, &v35, *a5, a5[1], v10);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
  __str = v37;
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&__p, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
  else
    __p = __s;
  v31[0] = v39[0];
  *(_OWORD *)((char *)v31 + 12) = *(_OWORD *)((char *)v39 + 12);
  CLMicroLocationProto::RecordingEvent::RecordingEvent((CLMicroLocationProto::RecordingEvent *)v32, (const CLMicroLocationProto::RecordingEvent *)v40);
  v32[9] = v40[9];
  v33 = v41;
  v19 = 0;
  v20 = 0;
  v18 = 0;
  v27 = (void **)&v18;
  v28 = 0;
  v18 = (char *)operator new(0xF8uLL);
  v19 = (uint64_t)v18;
  v20 = v18 + 248;
  v19 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<CLMicroLocationRecordingEventsTable::Entry>,CLMicroLocationRecordingEventsTable::Entry const*,CLMicroLocationRecordingEventsTable::Entry const*,CLMicroLocationRecordingEventsTable::Entry*>((uint64_t)&v20, (__int128 *)&__str, (__int128 *)&v34, (uint64_t)v18);
  CLMicroLocationProto::RecordingEvent::~RecordingEvent((CLMicroLocationProto::RecordingEvent *)v32);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v16 = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 88), "insertEntries:", &v18);
  __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v18;
  std::vector<CLMicroLocationRecordingEventsTable::Entry>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
  CLMicroLocationProto::RecordingEvent::~RecordingEvent((CLMicroLocationProto::RecordingEvent *)v40);
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__s.__r_.__value_.__l.__data_);
  CLMicroLocationProto::RecordingEvent::~RecordingEvent((CLMicroLocationProto::RecordingEvent *)v22);
  CLMicroLocationProto::TruthLabelDonation::~TruthLabelDonation((CLMicroLocationProto::TruthLabelDonation *)v23);
  return v16;
}

void sub_241B4A700(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  CLMicroLocationRecordingEventsTable::Entry::~Entry((void **)&STACK[0x230]);
  CLMicroLocationProto::RecordingEvent::~RecordingEvent((CLMicroLocationProto::RecordingEvent *)&a17);
  CLMicroLocationProto::TruthLabelDonation::~TruthLabelDonation((CLMicroLocationProto::TruthLabelDonation *)&a35);
  _Unwind_Resume(a1);
}

void CLMicroLocationProtobufHelper::createRecordingEvent<CLMicroLocationProto::TruthLabelDonation>(CLMicroLocationProto::RecordingEvent *a1@<X0>, CLMicroLocationProto *a2@<X1>, char a3@<W2>, char a4@<W3>, CLMicroLocationProto *a5@<X4>, uint64_t a6@<X8>, double a7@<D0>)
{
  unsigned int v14;
  int v15;
  const CLMicroLocationProto::TruthLabelDonation *v16;
  const char *v17;
  int v18;
  const char *v19;

  CLMicroLocationProto::RecordingEvent::RecordingEvent((CLMicroLocationProto::RecordingEvent *)a6);
  v14 = *((_DWORD *)a1 + 8);
  if (!CLMicroLocationProto::EventType_IsValid((CLMicroLocationProto *)v14))
  {
    v17 = "::CLMicroLocationProto::EventType_IsValid(value)";
    v18 = 20192;
    v19 = "set_eventtype";
    goto LABEL_10;
  }
  v15 = *(_DWORD *)(a6 + 140);
  *(_DWORD *)(a6 + 72) = v14;
  *(double *)(a6 + 8) = a7;
  *(_BYTE *)(a6 + 77) = a3;
  *(_DWORD *)(a6 + 140) = v15 | 0x2803;
  *(_BYTE *)(a6 + 76) = a4;
  if (!CLMicroLocationProto::ConfidenceLevel_IsValid(a5))
  {
    v17 = "::CLMicroLocationProto::ConfidenceLevel_IsValid(value)";
    v18 = 20701;
    v19 = "set_confidencelevel";
    goto LABEL_10;
  }
  *(_DWORD *)(a6 + 140) |= 0x4000u;
  *(_DWORD *)(a6 + 120) = (_DWORD)a5;
  if (((unint64_t)a2 & 0xFF00000000) != 0)
  {
    if (CLMicroLocationProto::MotionState_IsValid(a2))
    {
      *(_DWORD *)(a6 + 140) |= 0x20000u;
      *(_DWORD *)(a6 + 124) = (_DWORD)a2;
      goto LABEL_6;
    }
    v17 = "::CLMicroLocationProto::MotionState_IsValid(value)";
    v18 = 20793;
    v19 = "set_motionstate";
LABEL_10:
    __assert_rtn(v19, "microlocation.pb.h", v18, v17);
  }
LABEL_6:
  CLMicroLocationProtobufHelper::setSpecificRecordingEvent((CLMicroLocationProtobufHelper *)a6, a1, v16);
}

void sub_241B4A900(_Unwind_Exception *a1)
{
  CLMicroLocationProto::RecordingEvent *v1;

  CLMicroLocationProto::RecordingEvent::~RecordingEvent(v1);
  _Unwind_Resume(a1);
}

uint64_t CLMicroLocationRecorder::addTriggerUuidForCachedTrigger(uint64_t a1, const std::string *a2, _OWORD *a3, __int128 *a4)
{
  id v8;
  _OWORD *v9;
  uint64_t *v10;
  NSObject *v11;
  char *v12;
  std::string *p_p;
  NSObject *v14;
  char *v15;
  std::string *v16;
  std::string *v17;
  std::string *v18;
  std::string *v19;
  double v20;
  double v21;
  uint64_t v22;
  double v23;
  NSObject *v24;
  char *v25;
  NSObject *v26;
  char *v27;
  uint64_t v28;
  char *v30;
  uint64_t v31;
  char *v32;
  std::string v33;
  _BYTE v34[144];
  char v35[8];
  std::string *v36;
  std::string *v37;
  int v38;
  uint64_t *v39;
  uint64_t *v40;
  uint64_t v41;
  void **v42;
  char v43;
  std::string __p;
  std::string v45;
  _OWORD v46[2];
  _OWORD v47[10];
  char v48;
  uint64_t v49;
  __int128 v50;
  char v51;
  _BYTE buf[48];
  _OWORD v53[2];
  _OWORD v54[10];
  char v55;
  uint64_t v56;

  v56 = *MEMORY[0x24BDAC8D0];
  v8 = *(id *)(*(_QWORD *)(a1 + 40) + 88);
  v9 = operator new(0x10uLL);
  *(_QWORD *)&buf[16] = v9 + 1;
  *v9 = *a3;
  *(_QWORD *)buf = v9;
  *(_QWORD *)&buf[8] = v9 + 1;
  if (!v8)
  {
    v39 = 0;
    v40 = 0;
    v41 = 0;
    goto LABEL_5;
  }
  objc_msgSend(v8, "fetchRecordingEventsFromTriggerUUIDs:", buf);
  v9 = *(_OWORD **)buf;
  if (*(_QWORD *)buf)
  {
LABEL_5:
    *(_QWORD *)&buf[8] = v9;
    operator delete(v9);
  }

  v10 = v39;
  if (v39 == v40)
  {
    if (onceToken_MicroLocation_Default != -1)
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_106);
    v24 = (id)logObject_MicroLocation_Default;
    if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
    {
      v25 = (char *)operator new(0x28uLL);
      *(_QWORD *)(v25 + 29) = 0;
      *(_OWORD *)v25 = 0u;
      *((_OWORD *)v25 + 1) = 0u;
      boost::uuids::to_chars<char *>((uint64_t)a3, v25);
      *(_DWORD *)buf = 68289282;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)&buf[8] = 2082;
      *(_QWORD *)&buf[10] = "";
      *(_WORD *)&buf[18] = 2082;
      *(_QWORD *)&buf[20] = v25;
      _os_log_impl(&dword_2419D9000, v24, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"Did not find matching entry for cached trigger UUID\", \"Cached trigger UUID\":%{public, location:escape_only}s}", buf, 0x1Cu);
      operator delete(v25);
    }

    if (onceToken_MicroLocation_Default != -1)
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_106);
    v26 = (id)logObject_MicroLocation_Default;
    if (os_signpost_enabled(v26))
    {
      v27 = (char *)operator new(0x28uLL);
      *(_QWORD *)(v27 + 29) = 0;
      *(_OWORD *)v27 = 0u;
      *((_OWORD *)v27 + 1) = 0u;
      boost::uuids::to_chars<char *>((uint64_t)a3, v27);
      *(_DWORD *)buf = 68289282;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)&buf[8] = 2082;
      *(_QWORD *)&buf[10] = "";
      *(_WORD *)&buf[18] = 2082;
      *(_QWORD *)&buf[20] = v27;
      _os_signpost_emit_with_name_impl(&dword_2419D9000, v26, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Did not find matching entry for cached trigger UUID", "{\"msg%{public}.0s\":\"Did not find matching entry for cached trigger UUID\", \"Cached trigger UUID\":%{public, location:escape_only}s}", buf, 0x1Cu);
      operator delete(v27);
    }

    v28 = 0;
  }
  else
  {
    if (0xEF7BDEF7BDEF7BDFLL * (v40 - v39) >= 2)
    {
      if (onceToken_MicroLocation_Default != -1)
        dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_106);
      v11 = (id)logObject_MicroLocation_Default;
      if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      {
        v12 = (char *)operator new(0x28uLL);
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v12;
        *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = xmmword_241BB2320;
        *(_OWORD *)v12 = 0u;
        *((_OWORD *)v12 + 1) = 0u;
        *(_QWORD *)(v12 + 29) = 0;
        boost::uuids::to_chars<char *>((uint64_t)a3, v12);
        p_p = &__p;
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        *(_DWORD *)buf = 68289538;
        *(_DWORD *)&buf[4] = 0;
        *(_WORD *)&buf[8] = 2082;
        *(_QWORD *)&buf[10] = "";
        *(_WORD *)&buf[18] = 2082;
        *(_QWORD *)&buf[20] = p_p;
        *(_WORD *)&buf[28] = 2050;
        *(_QWORD *)&buf[30] = 0xEF7BDEF7BDEF7BDFLL * (v40 - v39);
        _os_log_impl(&dword_2419D9000, v11, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"Found too many matching entries for cached trigger UUID\", \"Cached trigger UUID\":%{public, location:escape_only}s, \"Number of matches\":%{public}lu}", buf, 0x26u);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
      }

      if (onceToken_MicroLocation_Default != -1)
        dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_106);
      v14 = (id)logObject_MicroLocation_Default;
      if (os_signpost_enabled(v14))
      {
        v15 = (char *)operator new(0x28uLL);
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v15;
        *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = xmmword_241BB2320;
        *(_OWORD *)v15 = 0u;
        *((_OWORD *)v15 + 1) = 0u;
        *(_QWORD *)(v15 + 29) = 0;
        boost::uuids::to_chars<char *>((uint64_t)a3, v15);
        v16 = &__p;
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v16 = (std::string *)__p.__r_.__value_.__r.__words[0];
        *(_DWORD *)buf = 68289538;
        *(_DWORD *)&buf[4] = 0;
        *(_WORD *)&buf[8] = 2082;
        *(_QWORD *)&buf[10] = "";
        *(_WORD *)&buf[18] = 2082;
        *(_QWORD *)&buf[20] = v16;
        *(_WORD *)&buf[28] = 2050;
        *(_QWORD *)&buf[30] = 0xEF7BDEF7BDEF7BDFLL * (v40 - v39);
        _os_signpost_emit_with_name_impl(&dword_2419D9000, v14, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Found too many matching entries for cached trigger UUID", "{\"msg%{public}.0s\":\"Found too many matching entries for cached trigger UUID\", \"Cached trigger UUID\":%{public, location:escape_only}s, \"Number of matches\":%{public}lu}", buf, 0x26u);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
      }

      v10 = v39;
    }
    CLMicroLocationProto::TruthLabelDonation::TruthLabelDonation((CLMicroLocationProto::TruthLabelDonation *)v35);
    v38 |= 2u;
    v17 = v36;
    v18 = (std::string *)MEMORY[0x24BEDD958];
    if (v36 == (std::string *)MEMORY[0x24BEDD958])
    {
      v17 = (std::string *)operator new();
      v17->__r_.__value_.__r.__words[0] = 0;
      v17->__r_.__value_.__l.__size_ = 0;
      v17->__r_.__value_.__r.__words[2] = 0;
      v36 = v17;
    }
    std::string::operator=(v17, a2);
    memset(&__p, 0, sizeof(__p));
    if ((boost::conversion::detail::try_lexical_convert<std::string,boost::uuids::uuid>((uint64_t)a4, &__p) & 1) == 0)
    {
      std::bad_cast::bad_cast((std::bad_cast *)buf);
      *(_QWORD *)buf = &unk_2511D2C18;
      boost::throw_exception<boost::bad_lexical_cast>((uint64_t)buf);
    }
    v38 |= 4u;
    v19 = v37;
    if (v37 == v18)
    {
      v19 = (std::string *)operator new();
      v19->__r_.__value_.__r.__words[0] = 0;
      v19->__r_.__value_.__l.__size_ = 0;
      v19->__r_.__value_.__r.__words[2] = 0;
      v37 = v19;
    }
    std::string::operator=(v19, &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    v20 = cl::chrono::CFAbsoluteTimeClock::now();
    CLMicroLocationProtobufHelper::createRecordingEvent<CLMicroLocationProto::TruthLabelDonation>((CLMicroLocationProto::RecordingEvent *)v35, 0, 0, 0, (CLMicroLocationProto *)3, (uint64_t)v34, v20);
    v21 = *(double *)v10;
    v22 = v10[1];
    v23 = *((double *)v10 + 2);
    if (*((char *)v10 + 47) < 0)
      std::string::__init_copy_ctor_external(&v33, (const std::string::value_type *)v10[3], v10[4]);
    else
      v33 = *(std::string *)((_BYTE *)v10 + 1);
    v50 = *a4;
    v51 = 1;
    CLMicroLocationRecordingEventsTable::Entry::Entry(buf, *(_QWORD *)&v21, v22, &v33, v34, &v50, v10[6], v10[7], v23);
    if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v33.__r_.__value_.__l.__data_);
    __p = *(std::string *)buf;
    if ((buf[47] & 0x80000000) != 0)
      std::string::__init_copy_ctor_external(&v45, *(const std::string::value_type **)&buf[24], *(std::string::size_type *)&buf[32]);
    else
      v45 = *(std::string *)&buf[24];
    v46[0] = v53[0];
    *(_OWORD *)((char *)v46 + 12) = *(_OWORD *)((char *)v53 + 12);
    CLMicroLocationProto::RecordingEvent::RecordingEvent((CLMicroLocationProto::RecordingEvent *)v47, (const CLMicroLocationProto::RecordingEvent *)v54);
    v47[9] = v54[9];
    v48 = v55;
    v31 = 0;
    v32 = 0;
    v30 = 0;
    v42 = (void **)&v30;
    v43 = 0;
    v30 = (char *)operator new(0xF8uLL);
    v31 = (uint64_t)v30;
    v32 = v30 + 248;
    v31 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<CLMicroLocationRecordingEventsTable::Entry>,CLMicroLocationRecordingEventsTable::Entry const*,CLMicroLocationRecordingEventsTable::Entry const*,CLMicroLocationRecordingEventsTable::Entry*>((uint64_t)&v32, (__int128 *)&__p, (__int128 *)&v49, (uint64_t)v30);
    CLMicroLocationProto::RecordingEvent::~RecordingEvent((CLMicroLocationProto::RecordingEvent *)v47);
    if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v45.__r_.__value_.__l.__data_);
    v28 = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 88), "insertEntries:", &v30);
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v30;
    std::vector<CLMicroLocationRecordingEventsTable::Entry>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
    CLMicroLocationProto::RecordingEvent::~RecordingEvent((CLMicroLocationProto::RecordingEvent *)v54);
    if ((buf[47] & 0x80000000) != 0)
      operator delete(*(void **)&buf[24]);
    CLMicroLocationProto::RecordingEvent::~RecordingEvent((CLMicroLocationProto::RecordingEvent *)v34);
    CLMicroLocationProto::TruthLabelDonation::~TruthLabelDonation((CLMicroLocationProto::TruthLabelDonation *)v35);
  }
  *(_QWORD *)buf = &v39;
  std::vector<CLMicroLocationRecordingEventsTable::Entry>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  return v28;
}

void sub_241B4B0E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,char a40)
{
  void *v40;
  void *v41;

  operator delete(v41);

  STACK[0x240] = (unint64_t)&a40;
  std::vector<CLMicroLocationRecordingEventsTable::Entry>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x240]);
  _Unwind_Resume(a1);
}

uint64_t CLMicroLocationRecorder::recordTruthLabelBetweenDates(uint64_t a1, const std::string *a2, void *a3, void *a4, void *a5)
{
  id v9;
  id v10;
  id v11;
  NSObject *v12;
  uint64_t v13;
  _DWORD *v14;
  _DWORD *v15;
  _DWORD *v16;
  _DWORD *i;
  id v18;
  double v19;
  double v20;
  double v21;
  double v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  uint64_t v27;
  NSObject *v28;
  uint64_t v29;
  id v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  std::string *v34;
  __int128 v35;
  __int128 v36;
  uint64_t v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;
  std::string *v41;
  std::string *v42;
  std::string *v43;
  double v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  int v49;
  NSObject *v50;
  _BOOL4 v51;
  id v53;
  id v54;
  uint64_t v55;
  std::bad_cast v56;
  void *v57;
  void *v58;
  char v59[8];
  std::string *v60;
  std::string *v61;
  std::string *v62;
  int v63;
  std::string __str;
  uint64_t v65;
  unint64_t v66;
  unint64_t v67;
  __int128 *v68;
  unint64_t v69;
  unint64_t v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  void *v75;
  _DWORD *v76;
  __int128 v77;
  char v78;
  __int128 v79;
  _BYTE buf[40];
  uint64_t v81;
  _BYTE v82[28];
  _OWORD v83[10];
  char v84;
  uint64_t v85;

  v85 = *MEMORY[0x24BDAC8D0];
  v9 = a3;
  v10 = a4;
  v11 = a5;
  if (objc_msgSend(v10, "compare:", v11) == 1)
  {
    if (onceToken_MicroLocation_Default != -1)
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_106);
    v12 = logObject_MicroLocation_Default;
    v13 = 0;
    if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_2419D9000, v12, OS_LOG_TYPE_DEFAULT, "recordTruthLabelBetweenDates, startDate is later than endDate", buf, 2u);
      v13 = 0;
    }
  }
  else
  {
    ULSettings::getRecordingEventsForModelType((char **)&v75);
    v14 = v75;
    v15 = v76;
    if (v75 == v76)
      goto LABEL_23;
    v16 = v75;
    while (*v16 != 14)
    {
      if (++v16 == v76)
        goto LABEL_19;
    }
    if (v16 != v76)
    {
      for (i = v16 + 1; i != v15; ++i)
      {
        if (*i != 14)
          *v16++ = *i;
      }
    }
    if (v16 != v15)
    {
      v15 = v16;
      v76 = v16;
    }
LABEL_19:
    if (v14 == v15)
    {
LABEL_23:
      if (onceToken_MicroLocation_Default != -1)
        dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_106);
      v28 = logObject_MicroLocation_Default;
      v13 = 0;
      if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 67240192;
        *(_DWORD *)&buf[4] = 1;
        _os_log_impl(&dword_2419D9000, v28, OS_LOG_TYPE_DEFAULT, "#Warning No recording events for model type %{public}d", buf, 8u);
        v13 = 0;
      }
    }
    else
    {
      v55 = a1;
      v18 = *(id *)(*(_QWORD *)(a1 + 40) + 88);
      v53 = v10;
      v54 = v9;
      objc_msgSend(v10, "timeIntervalSinceReferenceDate");
      v20 = v19;
      objc_msgSend(v11, "timeIntervalSinceReferenceDate");
      v22 = v21;
      +[ULDefaultsSingleton shared](ULDefaultsSingleton, "shared");
      v23 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v23, "defaultsDictionary");
      v24 = (void *)objc_claimAutoreleasedReturnValue();

      objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "ULDatabaseSelectionLimit");
      v25 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v24, "objectForKey:", v25);
      v26 = (void *)objc_claimAutoreleasedReturnValue();
      if (v26 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
        v27 = objc_msgSend(v26, "unsignedIntValue");
      else
        v27 = objc_msgSend(&unk_2511EE1E8, "unsignedIntValue");
      v29 = v27;

      if (v18)
      {
        objc_msgSend(v18, "fetchRecordingEventsWithScanMeasurements:fromTime:toTime:withLimit:", &v75, v29, v20, v22);
      }
      else
      {
        v72 = 0;
        v73 = 0;
        v74 = 0;
      }

      objc_msgSend(v9, "UUIDString");
      v30 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
      v31 = (char *)objc_msgSend(v30, "UTF8String");

      v70 = 0;
      v71 = v31;
      v68 = 0;
      v69 = 0;
      std::vector<CLMicroLocationRecordingEventsTable::Entry>::reserve((uint64_t *)&v68, 0xEF7BDEF7BDEF7BDFLL * ((v73 - v72) >> 3));
      v65 = 0;
      v66 = 0;
      v67 = 0;
      std::vector<CLMicroLocationRecordingLabelsTable::Entry>::reserve(&v65, 0xEF7BDEF7BDEF7BDFLL * ((v73 - v72) >> 3));
      v32 = v73;
      if (v72 != v73)
      {
        v33 = v72 + 80;
        v34 = (std::string *)MEMORY[0x24BEDD958];
        do
        {
          v35 = *(_OWORD *)(v33 - 80);
          *(_QWORD *)&buf[16] = *(_QWORD *)(v33 - 64);
          *(_OWORD *)buf = v35;
          if (*(char *)(v33 - 33) < 0)
          {
            std::string::__init_copy_ctor_external((std::string *)&buf[24], *(const std::string::value_type **)(v33 - 56), *(_QWORD *)(v33 - 48));
          }
          else
          {
            v36 = *(_OWORD *)(v33 - 56);
            v81 = *(_QWORD *)(v33 - 40);
            *(_OWORD *)&buf[24] = v36;
          }
          v37 = v33 - 80;
          v38 = *(_OWORD *)(v33 - 32);
          *(_OWORD *)&v82[12] = *(_OWORD *)(v33 - 20);
          *(_OWORD *)v82 = v38;
          CLMicroLocationProto::RecordingEvent::RecordingEvent((CLMicroLocationProto::RecordingEvent *)v83, (const CLMicroLocationProto::RecordingEvent *)v33);
          v39 = *(_OWORD *)(v33 + 144);
          v84 = *(_BYTE *)(v33 + 160);
          v83[9] = v39;
          v79 = 0uLL;
          LODWORD(v56.__vftable) = 0;
          boost::uuids::detail::random_provider_base::random_provider_base((boost::uuids::detail::random_provider_base *)&v56);
          *(_QWORD *)&v79 = boost::uuids::random_generator_pure::operator()((uint64_t)&v56);
          *((_QWORD *)&v79 + 1) = v40;
          boost::uuids::detail::random_provider_base::destroy((boost::uuids::detail::random_provider_base *)&v56);
          memset(&__str, 0, sizeof(__str));
          if ((boost::conversion::detail::try_lexical_convert<std::string,boost::uuids::uuid>((uint64_t)&v79, &__str) & 1) == 0)
          {
            std::bad_cast::bad_cast(&v56);
            v56.__vftable = (std::bad_cast_vtbl *)&unk_2511D2C18;
            boost::throw_exception<boost::bad_lexical_cast>((uint64_t)&v56);
          }
          CLMicroLocationProto::TruthLabelDonation::TruthLabelDonation((CLMicroLocationProto::TruthLabelDonation *)v59);
          v63 |= 2u;
          v41 = v60;
          if (v60 == v34)
          {
            v41 = (std::string *)operator new();
            v41->__r_.__value_.__r.__words[0] = 0;
            v41->__r_.__value_.__l.__size_ = 0;
            v41->__r_.__value_.__r.__words[2] = 0;
            v60 = v41;
          }
          std::string::operator=(v41, a2);
          v63 |= 4u;
          v42 = v61;
          if (v61 == v34)
          {
            v42 = (std::string *)operator new();
            v42->__r_.__value_.__r.__words[0] = 0;
            v42->__r_.__value_.__l.__size_ = 0;
            v42->__r_.__value_.__r.__words[2] = 0;
            v61 = v42;
          }
          std::string::operator=(v42, &__str);
          v63 |= 8u;
          if (v62 == v34)
          {
            v43 = (std::string *)operator new();
            v43->__r_.__value_.__r.__words[0] = 0;
            v43->__r_.__value_.__l.__size_ = 0;
            v43->__r_.__value_.__r.__words[2] = 0;
            v62 = v43;
          }
          MEMORY[0x2426A02C4]();
          v44 = cl::chrono::CFAbsoluteTimeClock::now();
          CLMicroLocationProtobufHelper::createRecordingEvent<CLMicroLocationProto::TruthLabelDonation>((CLMicroLocationProto::RecordingEvent *)v59, 0, 0, 0, (CLMicroLocationProto *)3, (uint64_t)&v56, v44);
          v77 = v79;
          v78 = 1;
          v45 = v69;
          if (v69 >= v70)
          {
            v46 = std::vector<CLMicroLocationRecordingEventsTable::Entry>::__emplace_back_slow_path<boost::uuids::uuid &,std::chrono::time_point<cl::chrono::CFAbsoluteTimeClock,std::chrono::duration<long double,std::ratio<1l,1l>>> &,std::string &,CLMicroLocationProto::RecordingEvent &,std::optional<boost::uuids::uuid>,boost::uuids::uuid &>((uint64_t *)&v68, (uint64_t *)buf, (double *)&buf[16], (uint64_t)&buf[24], (uint64_t)&v56, &v77, v82);
          }
          else
          {
            std::allocator<CLMicroLocationRecordingEventsTable::Entry>::construct[abi:ne180100]<CLMicroLocationRecordingEventsTable::Entry,boost::uuids::uuid &,std::chrono::time_point<cl::chrono::CFAbsoluteTimeClock,std::chrono::duration<long double,std::ratio<1l,1l>>> &,std::string &,CLMicroLocationProto::RecordingEvent &,std::optional<boost::uuids::uuid>,boost::uuids::uuid &>((uint64_t)&v70, v69, (uint64_t *)buf, (double *)&buf[16], (uint64_t)&buf[24], (uint64_t)&v56, &v77, v82);
            v46 = v45 + 248;
          }
          v69 = v46;
          *(_QWORD *)&v77 = v57;
          v47 = v66;
          if (v66 >= v67)
          {
            v48 = std::vector<CLMicroLocationRecordingLabelsTable::Entry>::__emplace_back_slow_path<boost::uuids::uuid &,std::string const&,char const*&,std::chrono::time_point<cl::chrono::CFAbsoluteTimeClock,std::chrono::duration<long double,std::ratio<1l,1l>>>>(&v65, (uint64_t *)&v79, (uint64_t)a2, &v71, (double *)&v77);
          }
          else
          {
            std::allocator<CLMicroLocationRecordingLabelsTable::Entry>::construct[abi:ne180100]<CLMicroLocationRecordingLabelsTable::Entry,boost::uuids::uuid &,std::string const&,char const*&,std::chrono::time_point<cl::chrono::CFAbsoluteTimeClock,std::chrono::duration<long double,std::ratio<1l,1l>>>>((uint64_t)&v67, v66, (uint64_t *)&v79, (uint64_t)a2, &v71, (double *)&v77);
            v48 = v47 + 64;
          }
          v66 = v48;
          CLMicroLocationProto::RecordingEvent::~RecordingEvent((CLMicroLocationProto::RecordingEvent *)&v56);
          CLMicroLocationProto::TruthLabelDonation::~TruthLabelDonation((CLMicroLocationProto::TruthLabelDonation *)v59);
          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__str.__r_.__value_.__l.__data_);
          CLMicroLocationProto::RecordingEvent::~RecordingEvent((CLMicroLocationProto::RecordingEvent *)v83);
          if (SHIBYTE(v81) < 0)
            operator delete(*(void **)&buf[24]);
          v33 += 248;
        }
        while (v37 + 248 != v32);
      }
      if (*(_DWORD *)v55 == 1)
      {
        CLMicroLocationRecorder::RecordingTransaction::addRecordingEventsTableEntryBatch(*(_QWORD **)(v55 + 8), &v68);
        CLMicroLocationRecorder::RecordingTransaction::addRecordingLabelsTableEntryBatch(*(_QWORD **)(v55 + 8), &v65);
        v13 = 1;
      }
      else
      {
        v49 = objc_msgSend(*(id *)(*(_QWORD *)(v55 + 40) + 88), "insertEntries:", &v68);
        v13 = v49 & objc_msgSend(*(id *)(*(_QWORD *)(v55 + 40) + 40), "insertEntries:", &v65);
      }
      v10 = v53;
      v9 = v54;
      if (onceToken_MicroLocation_Default != -1)
        dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_106);
      v50 = logObject_MicroLocation_Default;
      if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEBUG))
      {
        v51 = *(_DWORD *)v55 == 1;
        *(_DWORD *)buf = 68289794;
        *(_DWORD *)&buf[4] = 0;
        *(_WORD *)&buf[8] = 2082;
        *(_QWORD *)&buf[10] = "";
        *(_WORD *)&buf[18] = 2050;
        *(_QWORD *)&buf[20] = 0xEF7BDEF7BDEF7BDFLL * ((v73 - v72) >> 3);
        *(_WORD *)&buf[28] = 1026;
        *(_DWORD *)&buf[30] = v51;
        *(_WORD *)&buf[34] = 1026;
        *(_DWORD *)&buf[36] = v13;
        _os_log_impl(&dword_2419D9000, v50, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLMicroLocationRecorder: record TruthLabel between dates\", \"Num Matching Events\":%{public}lu, \"Is Recorder Active\":%{public}hhd, \"Insertion Result\":%{public}hhd}", buf, 0x28u);
      }
      *(_QWORD *)buf = &v65;
      std::vector<CLMicroLocationRecordingLabelsTable::Entry>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
      *(_QWORD *)buf = &v68;
      std::vector<CLMicroLocationRecordingEventsTable::Entry>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
      *(_QWORD *)buf = &v72;
      std::vector<CLMicroLocationRecordingEventsTable::Entry>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
    }
    if (v75)
    {
      v76 = v75;
      operator delete(v75);
    }
  }

  return v13;
}

void sub_241B4BACC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, std::exception a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,void *__p)
{
  void *v54;
  void *v55;
  void *v56;
  void *v57;

  if (__p)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void CLMicroLocationRecorder::RecordingTransaction::addRecordingEventsTableEntryBatch(_QWORD *a1, __int128 **a2)
{
  __int128 *v2;
  __int128 *v3;
  uint64_t *v5;
  unint64_t *v6;
  unint64_t v7;

  v2 = *a2;
  v3 = a2[1];
  if (*a2 != v3)
  {
    v5 = a1 + 11;
    v6 = a1 + 13;
    v7 = a1[12];
    do
    {
      if (v7 >= *v6)
      {
        v7 = std::vector<CLMicroLocationRecordingEventsTable::Entry>::__emplace_back_slow_path<CLMicroLocationRecordingEventsTable::Entry const&>(v5, v2);
      }
      else
      {
        std::allocator<CLMicroLocationRecordingEventsTable::Entry>::construct[abi:ne180100]<CLMicroLocationRecordingEventsTable::Entry,CLMicroLocationRecordingEventsTable::Entry const&>((uint64_t)v6, v7, v2);
        v7 += 248;
        a1[12] = v7;
      }
      a1[12] = v7;
      v2 = (__int128 *)((char *)v2 + 248);
    }
    while (v2 != v3);
  }
}

void sub_241B4BCE8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 96) = v2;
  _Unwind_Resume(a1);
}

void CLMicroLocationRecorder::RecordingTransaction::addRecordingLabelsTableEntryBatch(_QWORD *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v5;
  unint64_t v6;

  v2 = *a2;
  v3 = a2[1];
  if (*a2 != v3)
  {
    v5 = a1 + 14;
    v6 = a1[15];
    do
    {
      if (v6 >= a1[16])
      {
        v6 = std::vector<CLMicroLocationRecordingLabelsTable::Entry>::__emplace_back_slow_path<CLMicroLocationRecordingLabelsTable::Entry const&>(v5, v2);
      }
      else
      {
        std::vector<CLMicroLocationRecordingLabelsTable::Entry>::__construct_one_at_end[abi:ne180100]<CLMicroLocationRecordingLabelsTable::Entry const&>((uint64_t)v5, v2);
        v6 += 64;
      }
      a1[15] = v6;
      v2 += 64;
    }
    while (v2 != v3);
  }
}

void ___ZL45_CLLogObjectForCategory_MicroLocation_Defaultv_block_invoke_85()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.MicroLocation", "MicroLocation");
  v1 = (void *)logObject_MicroLocation_Default;
  logObject_MicroLocation_Default = (uint64_t)v0;

}

void ___ZL47_CLLogObjectForCategory_MicroLocationQE_Defaultv_block_invoke_4()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.MicroLocation", "MicroLocationQE");
  v1 = (void *)logObject_MicroLocationQE_Default;
  logObject_MicroLocationQE_Default = (uint64_t)v0;

}

uint64_t std::vector<CLMicroLocationRecordingLabelsTable::Entry>::__emplace_back_slow_path<boost::uuids::uuid &,std::string &,boost::uuids::uuid &,std::chrono::time_point<cl::chrono::CFAbsoluteTimeClock,std::chrono::duration<long double,std::ratio<1l,1l>>>>(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t *a4, double *a5)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  uint64_t v15;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  uint64_t *v21;

  v6 = (a1[1] - *a1) >> 6;
  v7 = v6 + 1;
  if ((unint64_t)(v6 + 1) >> 58)
    std::vector<CLMicroLocationProto::ConfidenceReason>::__throw_length_error[abi:ne180100]();
  v12 = a1[2] - *a1;
  if (v12 >> 5 > v7)
    v7 = v12 >> 5;
  if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFC0)
    v13 = 0x3FFFFFFFFFFFFFFLL;
  else
    v13 = v7;
  v21 = a1 + 2;
  if (v13)
    v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CLMicroLocationRecordingLabelsTable::Entry>>((uint64_t)(a1 + 2), v13);
  else
    v14 = 0;
  v17 = v14;
  v18 = &v14[64 * v6];
  v20 = &v14[64 * v13];
  std::allocator<CLMicroLocationRecordingLabelsTable::Entry>::construct[abi:ne180100]<CLMicroLocationRecordingLabelsTable::Entry,boost::uuids::uuid &,std::string &,boost::uuids::uuid &,std::chrono::time_point<cl::chrono::CFAbsoluteTimeClock,std::chrono::duration<long double,std::ratio<1l,1l>>>>((uint64_t)(a1 + 2), (uint64_t)v18, a2, a3, a4, a5);
  v19 = v18 + 64;
  std::vector<CLMicroLocationRecordingLabelsTable::Entry>::__swap_out_circular_buffer(a1, &v17);
  v15 = a1[1];
  std::__split_buffer<CLMicroLocationRecordingLabelsTable::Entry>::~__split_buffer((uint64_t)&v17);
  return v15;
}

void sub_241B4BEC8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<CLMicroLocationRecordingLabelsTable::Entry>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::allocator<CLMicroLocationRecordingLabelsTable::Entry>::construct[abi:ne180100]<CLMicroLocationRecordingLabelsTable::Entry,boost::uuids::uuid &,std::string &,boost::uuids::uuid &,std::chrono::time_point<cl::chrono::CFAbsoluteTimeClock,std::chrono::duration<long double,std::ratio<1l,1l>>>>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t *a5, double *a6)
{
  uint64_t v9;
  uint64_t v10;
  std::string __p;

  v9 = *a3;
  v10 = a3[1];
  if (*(char *)(a4 + 23) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a4, *(_QWORD *)(a4 + 8));
  else
    __p = *(std::string *)a4;
  CLMicroLocationRecordingLabelsTable::Entry::Entry(a2, v9, v10, (__int128 *)&__p, *a5, a5[1], *a6);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_241B4BF70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<CLMicroLocationMeasurementTable::Entry>::__construct_one_at_end[abi:ne180100]<boost::uuids::uuid &,std::chrono::time_point<cl::chrono::CFAbsoluteTimeClock,std::chrono::duration<long double,std::ratio<1l,1l>>> const&,unsigned long long const&,CLMicroLocationProto::Measurement const&,CLMicroLocationMeasurementTable::EntryFlags>(uint64_t a1, uint64_t *a2, double *a3, uint64_t *a4, CLMicroLocationProto::Measurement *a5, unsigned int *a6)
{
  uint64_t v7;
  uint64_t result;

  v7 = *(_QWORD *)(a1 + 8);
  result = CLMicroLocationMeasurementTable::Entry::Entry(v7, *a2, a2[1], *a4, a5, *a6 | 0x100000000, *a3);
  *(_QWORD *)(a1 + 8) = v7 + 120;
  return result;
}

void sub_241B4BFD8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<CLMicroLocationMeasurementTable::Entry>::__emplace_back_slow_path<boost::uuids::uuid &,std::chrono::time_point<cl::chrono::CFAbsoluteTimeClock,std::chrono::duration<long double,std::ratio<1l,1l>>> const&,unsigned long long const&,CLMicroLocationProto::Measurement const&,CLMicroLocationMeasurementTable::EntryFlags>(uint64_t *a1, uint64_t *a2, double *a3, uint64_t *a4, CLMicroLocationProto::Measurement *a5, unsigned int *a6)
{
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  char *v21;
  char *v22;
  uint64_t v23;
  char *v24;
  uint64_t *v25;

  v7 = *a1;
  v8 = 0xEEEEEEEEEEEEEEEFLL * ((a1[1] - *a1) >> 3);
  v9 = v8 + 1;
  if (v8 + 1 > 0x222222222222222)
    std::vector<CLMicroLocationProto::ConfidenceReason>::__throw_length_error[abi:ne180100]();
  v15 = (uint64_t)(a1 + 2);
  v16 = 0xEEEEEEEEEEEEEEEFLL * ((a1[2] - v7) >> 3);
  if (2 * v16 > v9)
    v9 = 2 * v16;
  if (v16 >= 0x111111111111111)
    v17 = 0x222222222222222;
  else
    v17 = v9;
  v25 = a1 + 2;
  if (v17)
    v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CLMicroLocationMeasurementTable::Entry>>(v15, v17);
  else
    v18 = 0;
  v21 = v18;
  v22 = &v18[120 * v8];
  v23 = (uint64_t)v22;
  v24 = &v18[120 * v17];
  CLMicroLocationMeasurementTable::Entry::Entry((uint64_t)v22, *a2, a2[1], *a4, a5, *a6 | 0x100000000, *a3);
  v23 = (uint64_t)(v22 + 120);
  std::vector<CLMicroLocationMeasurementTable::Entry>::__swap_out_circular_buffer(a1, &v21);
  v19 = a1[1];
  std::__split_buffer<CLMicroLocationMeasurementTable::Entry>::~__split_buffer((uint64_t)&v21);
  return v19;
}

void sub_241B4C104(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<CLMicroLocationMeasurementTable::Entry>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<CLMicroLocationRecordingEventsTable::Entry>::__emplace_back_slow_path<boost::uuids::uuid &,std::chrono::time_point<cl::chrono::CFAbsoluteTimeClock,std::chrono::duration<long double,std::ratio<1l,1l>>> &,std::string &,CLMicroLocationProto::RecordingEvent const&,std::optional<boost::uuids::uuid> &,boost::uuids::uuid &>(uint64_t *a1, uint64_t *a2, double *a3, uint64_t a4, uint64_t a5, __int128 *a6, _QWORD *a7)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v16;
  char *v17;
  uint64_t v18;
  void *v20;
  char *v21;
  char *v22;
  char *v23;
  uint64_t *v24;

  v8 = 0xEF7BDEF7BDEF7BDFLL * ((a1[1] - *a1) >> 3);
  v9 = v8 + 1;
  if (v8 + 1 > 0x108421084210842)
    std::vector<CLMicroLocationProto::ConfidenceReason>::__throw_length_error[abi:ne180100]();
  if (0xDEF7BDEF7BDEF7BELL * ((a1[2] - *a1) >> 3) > v9)
    v9 = 0xDEF7BDEF7BDEF7BELL * ((a1[2] - *a1) >> 3);
  if (0xEF7BDEF7BDEF7BDFLL * ((a1[2] - *a1) >> 3) >= 0x84210842108421)
    v16 = 0x108421084210842;
  else
    v16 = v9;
  v24 = a1 + 2;
  if (v16)
    v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CLMicroLocationRecordingEventsTable::Entry>>((uint64_t)(a1 + 2), v16);
  else
    v17 = 0;
  v20 = v17;
  v21 = &v17[248 * v8];
  v23 = &v17[248 * v16];
  std::allocator<CLMicroLocationRecordingEventsTable::Entry>::construct[abi:ne180100]<CLMicroLocationRecordingEventsTable::Entry,boost::uuids::uuid &,std::chrono::time_point<cl::chrono::CFAbsoluteTimeClock,std::chrono::duration<long double,std::ratio<1l,1l>>> &,std::string &,CLMicroLocationProto::RecordingEvent const&,std::optional<boost::uuids::uuid> &,boost::uuids::uuid &>((uint64_t)(a1 + 2), (uint64_t)v21, a2, a3, a4, a5, a6, a7);
  v22 = v21 + 248;
  std::vector<CLMicroLocationRecordingEventsTable::Entry>::__swap_out_circular_buffer(a1, &v20);
  v18 = a1[1];
  std::__split_buffer<CLMicroLocationRecordingEventsTable::Entry>::~__split_buffer(&v20);
  return v18;
}

void sub_241B4C268(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<CLMicroLocationRecordingEventsTable::Entry>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

void std::allocator<CLMicroLocationRecordingEventsTable::Entry>::construct[abi:ne180100]<CLMicroLocationRecordingEventsTable::Entry,boost::uuids::uuid &,std::chrono::time_point<cl::chrono::CFAbsoluteTimeClock,std::chrono::duration<long double,std::ratio<1l,1l>>> &,std::string &,CLMicroLocationProto::RecordingEvent const&,std::optional<boost::uuids::uuid> &,boost::uuids::uuid &>(uint64_t a1, uint64_t a2, uint64_t *a3, double *a4, uint64_t a5, uint64_t a6, __int128 *a7, _QWORD *a8)
{
  uint64_t v12;
  uint64_t v13;
  double v14;
  std::string __p;
  __int128 v16;
  char v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  v12 = *a3;
  v13 = a3[1];
  v14 = *a4;
  if (*(char *)(a5 + 23) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a5, *(_QWORD *)(a5 + 8));
  else
    __p = *(std::string *)a5;
  v16 = *a7;
  v17 = *((_BYTE *)a7 + 16);
  CLMicroLocationRecordingEventsTable::Entry::Entry(a2, v12, v13, &__p, a6, &v16, *a8, a8[1], v14);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_241B4C364(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<CLMicroLocationRecordingLabelsTable::Entry>::__emplace_back_slow_path<boost::uuids::uuid const&,std::string const&,boost::uuids::uuid const&,std::chrono::time_point<cl::chrono::CFAbsoluteTimeClock,std::chrono::duration<long double,std::ratio<1l,1l>>> &>(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t *a4, double *a5)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  uint64_t v15;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  uint64_t *v21;

  v6 = (a1[1] - *a1) >> 6;
  v7 = v6 + 1;
  if ((unint64_t)(v6 + 1) >> 58)
    std::vector<CLMicroLocationProto::ConfidenceReason>::__throw_length_error[abi:ne180100]();
  v12 = a1[2] - *a1;
  if (v12 >> 5 > v7)
    v7 = v12 >> 5;
  if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFC0)
    v13 = 0x3FFFFFFFFFFFFFFLL;
  else
    v13 = v7;
  v21 = a1 + 2;
  if (v13)
    v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CLMicroLocationRecordingLabelsTable::Entry>>((uint64_t)(a1 + 2), v13);
  else
    v14 = 0;
  v17 = v14;
  v18 = &v14[64 * v6];
  v20 = &v14[64 * v13];
  std::allocator<CLMicroLocationRecordingLabelsTable::Entry>::construct[abi:ne180100]<CLMicroLocationRecordingLabelsTable::Entry,boost::uuids::uuid const&,std::string const&,boost::uuids::uuid const&,std::chrono::time_point<cl::chrono::CFAbsoluteTimeClock,std::chrono::duration<long double,std::ratio<1l,1l>>> &>((uint64_t)(a1 + 2), (uint64_t)v18, a2, a3, a4, a5);
  v19 = v18 + 64;
  std::vector<CLMicroLocationRecordingLabelsTable::Entry>::__swap_out_circular_buffer(a1, &v17);
  v15 = a1[1];
  std::__split_buffer<CLMicroLocationRecordingLabelsTable::Entry>::~__split_buffer((uint64_t)&v17);
  return v15;
}

void sub_241B4C488(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<CLMicroLocationRecordingLabelsTable::Entry>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::allocator<CLMicroLocationRecordingLabelsTable::Entry>::construct[abi:ne180100]<CLMicroLocationRecordingLabelsTable::Entry,boost::uuids::uuid const&,std::string const&,boost::uuids::uuid const&,std::chrono::time_point<cl::chrono::CFAbsoluteTimeClock,std::chrono::duration<long double,std::ratio<1l,1l>>> &>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t *a5, double *a6)
{
  uint64_t v9;
  uint64_t v10;
  std::string __p;

  v9 = *a3;
  v10 = a3[1];
  if (*(char *)(a4 + 23) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a4, *(_QWORD *)(a4 + 8));
  else
    __p = *(std::string *)a4;
  CLMicroLocationRecordingLabelsTable::Entry::Entry(a2, v9, v10, (__int128 *)&__p, *a5, a5[1], *a6);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_241B4C530(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<CLMicroLocationRecordingLabelsTable::Entry>,CLMicroLocationRecordingLabelsTable::Entry const*,CLMicroLocationRecordingLabelsTable::Entry const*,CLMicroLocationRecordingLabelsTable::Entry*>(uint64_t a1, __int128 *a2, __int128 *a3, uint64_t a4)
{
  uint64_t v4;
  __int128 *v6;
  std::string *v7;
  __int128 v8;
  uint64_t v9;
  __int128 *v10;
  __int128 v11;
  _QWORD v13[3];
  char v14;
  uint64_t v15;
  uint64_t v16;

  v4 = a4;
  v15 = a4;
  v16 = a4;
  v13[0] = a1;
  v13[1] = &v15;
  v13[2] = &v16;
  v14 = 0;
  if (a2 != a3)
  {
    v6 = a2 + 1;
    do
    {
      *(_OWORD *)v4 = *(v6 - 1);
      v7 = (std::string *)(v4 + 16);
      if (*((char *)v6 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)v6, *((_QWORD *)v6 + 1));
        v9 = v16;
      }
      else
      {
        v8 = *v6;
        *(_QWORD *)(v4 + 32) = *((_QWORD *)v6 + 2);
        *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v8;
        v9 = v4;
      }
      v10 = v6 - 1;
      v11 = *(__int128 *)((char *)v6 + 24);
      *(_QWORD *)(v4 + 56) = *((_QWORD *)v6 + 5);
      *(_OWORD *)(v4 + 40) = v11;
      v4 = v9 + 64;
      v16 = v9 + 64;
      v6 += 4;
    }
    while (v10 + 4 != a3);
  }
  v14 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<CLMicroLocationRecordingLabelsTable::Entry>,CLMicroLocationRecordingLabelsTable::Entry*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v13);
  return v4;
}

void sub_241B4C618(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<CLMicroLocationRecordingLabelsTable::Entry>,CLMicroLocationRecordingLabelsTable::Entry*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::vector<CLMicroLocationRecordingEventsTable::Entry>::__emplace_back_slow_path<boost::uuids::uuid &,std::chrono::time_point<cl::chrono::CFAbsoluteTimeClock,std::chrono::duration<long double,std::ratio<1l,1l>>> &,std::string &,CLMicroLocationProto::RecordingEvent &,std::optional<boost::uuids::uuid>,boost::uuids::uuid &>(uint64_t *a1, uint64_t *a2, double *a3, uint64_t a4, uint64_t a5, __int128 *a6, _QWORD *a7)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v16;
  char *v17;
  uint64_t v18;
  void *v20;
  char *v21;
  char *v22;
  char *v23;
  uint64_t *v24;

  v8 = 0xEF7BDEF7BDEF7BDFLL * ((a1[1] - *a1) >> 3);
  v9 = v8 + 1;
  if (v8 + 1 > 0x108421084210842)
    std::vector<CLMicroLocationProto::ConfidenceReason>::__throw_length_error[abi:ne180100]();
  if (0xDEF7BDEF7BDEF7BELL * ((a1[2] - *a1) >> 3) > v9)
    v9 = 0xDEF7BDEF7BDEF7BELL * ((a1[2] - *a1) >> 3);
  if (0xEF7BDEF7BDEF7BDFLL * ((a1[2] - *a1) >> 3) >= 0x84210842108421)
    v16 = 0x108421084210842;
  else
    v16 = v9;
  v24 = a1 + 2;
  if (v16)
    v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CLMicroLocationRecordingEventsTable::Entry>>((uint64_t)(a1 + 2), v16);
  else
    v17 = 0;
  v20 = v17;
  v21 = &v17[248 * v8];
  v23 = &v17[248 * v16];
  std::allocator<CLMicroLocationRecordingEventsTable::Entry>::construct[abi:ne180100]<CLMicroLocationRecordingEventsTable::Entry,boost::uuids::uuid &,std::chrono::time_point<cl::chrono::CFAbsoluteTimeClock,std::chrono::duration<long double,std::ratio<1l,1l>>> &,std::string &,CLMicroLocationProto::RecordingEvent &,std::optional<boost::uuids::uuid>,boost::uuids::uuid &>((uint64_t)(a1 + 2), (uint64_t)v21, a2, a3, a4, a5, a6, a7);
  v22 = v21 + 248;
  std::vector<CLMicroLocationRecordingEventsTable::Entry>::__swap_out_circular_buffer(a1, &v20);
  v18 = a1[1];
  std::__split_buffer<CLMicroLocationRecordingEventsTable::Entry>::~__split_buffer(&v20);
  return v18;
}

void sub_241B4C77C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<CLMicroLocationRecordingEventsTable::Entry>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

void std::allocator<CLMicroLocationRecordingEventsTable::Entry>::construct[abi:ne180100]<CLMicroLocationRecordingEventsTable::Entry,boost::uuids::uuid &,std::chrono::time_point<cl::chrono::CFAbsoluteTimeClock,std::chrono::duration<long double,std::ratio<1l,1l>>> &,std::string &,CLMicroLocationProto::RecordingEvent &,std::optional<boost::uuids::uuid>,boost::uuids::uuid &>(uint64_t a1, uint64_t a2, uint64_t *a3, double *a4, uint64_t a5, uint64_t a6, __int128 *a7, _QWORD *a8)
{
  uint64_t v12;
  uint64_t v13;
  double v14;
  std::string __p;
  __int128 v16;
  char v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  v12 = *a3;
  v13 = a3[1];
  v14 = *a4;
  if (*(char *)(a5 + 23) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a5, *(_QWORD *)(a5 + 8));
  else
    __p = *(std::string *)a5;
  v16 = *a7;
  v17 = *((_BYTE *)a7 + 16);
  CLMicroLocationRecordingEventsTable::Entry::Entry(a2, v12, v13, &__p, a6, &v16, *a8, a8[1], v14);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_241B4C878(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<CLMicroLocationRecordingLabelsTable::Entry>::__emplace_back_slow_path<boost::uuids::uuid &,std::string const&,char const*&,std::chrono::time_point<cl::chrono::CFAbsoluteTimeClock,std::chrono::duration<long double,std::ratio<1l,1l>>>>(uint64_t *a1, uint64_t *a2, uint64_t a3, char **a4, double *a5)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  uint64_t v15;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  uint64_t *v21;

  v6 = (a1[1] - *a1) >> 6;
  v7 = v6 + 1;
  if ((unint64_t)(v6 + 1) >> 58)
    std::vector<CLMicroLocationProto::ConfidenceReason>::__throw_length_error[abi:ne180100]();
  v12 = a1[2] - *a1;
  if (v12 >> 5 > v7)
    v7 = v12 >> 5;
  if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFC0)
    v13 = 0x3FFFFFFFFFFFFFFLL;
  else
    v13 = v7;
  v21 = a1 + 2;
  if (v13)
    v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CLMicroLocationRecordingLabelsTable::Entry>>((uint64_t)(a1 + 2), v13);
  else
    v14 = 0;
  v17 = v14;
  v18 = &v14[64 * v6];
  v20 = &v14[64 * v13];
  std::allocator<CLMicroLocationRecordingLabelsTable::Entry>::construct[abi:ne180100]<CLMicroLocationRecordingLabelsTable::Entry,boost::uuids::uuid &,std::string const&,char const*&,std::chrono::time_point<cl::chrono::CFAbsoluteTimeClock,std::chrono::duration<long double,std::ratio<1l,1l>>>>((uint64_t)(a1 + 2), (uint64_t)v18, a2, a3, a4, a5);
  v19 = v18 + 64;
  std::vector<CLMicroLocationRecordingLabelsTable::Entry>::__swap_out_circular_buffer(a1, &v17);
  v15 = a1[1];
  std::__split_buffer<CLMicroLocationRecordingLabelsTable::Entry>::~__split_buffer((uint64_t)&v17);
  return v15;
}

void sub_241B4C99C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<CLMicroLocationRecordingLabelsTable::Entry>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::allocator<CLMicroLocationRecordingLabelsTable::Entry>::construct[abi:ne180100]<CLMicroLocationRecordingLabelsTable::Entry,boost::uuids::uuid &,std::string const&,char const*&,std::chrono::time_point<cl::chrono::CFAbsoluteTimeClock,std::chrono::duration<long double,std::ratio<1l,1l>>>>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, char **a5, double *a6)
{
  uint64_t v9;
  uint64_t v10;
  void *__p[2];
  char v12;
  std::string v13;

  v9 = *a3;
  v10 = a3[1];
  if (*(char *)(a4 + 23) < 0)
    std::string::__init_copy_ctor_external(&v13, *(const std::string::value_type **)a4, *(_QWORD *)(a4 + 8));
  else
    v13 = *(std::string *)a4;
  std::string::basic_string[abi:ne180100]<0>(__p, *a5);
  CLMicroLocationRecordingLabelsTable::Entry::Entry(a2, v9, v10, &v13, __p, *a6);
  if (v12 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v13.__r_.__value_.__l.__data_);
}

void sub_241B4CA60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<CLMicroLocationRecordingEventsTable::Entry>::__emplace_back_slow_path<CLMicroLocationRecordingEventsTable::Entry const&>(uint64_t *a1, __int128 *a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  void *v10;
  char *v11;
  char *v12;
  char *v13;
  uint64_t *v14;

  v3 = 0xEF7BDEF7BDEF7BDFLL * ((a1[1] - *a1) >> 3);
  v4 = v3 + 1;
  if (v3 + 1 > 0x108421084210842)
    std::vector<CLMicroLocationProto::ConfidenceReason>::__throw_length_error[abi:ne180100]();
  if (0xDEF7BDEF7BDEF7BELL * ((a1[2] - *a1) >> 3) > v4)
    v4 = 0xDEF7BDEF7BDEF7BELL * ((a1[2] - *a1) >> 3);
  if (0xEF7BDEF7BDEF7BDFLL * ((a1[2] - *a1) >> 3) >= 0x84210842108421)
    v6 = 0x108421084210842;
  else
    v6 = v4;
  v14 = a1 + 2;
  if (v6)
    v7 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CLMicroLocationRecordingEventsTable::Entry>>((uint64_t)(a1 + 2), v6);
  else
    v7 = 0;
  v10 = v7;
  v11 = &v7[248 * v3];
  v13 = &v7[248 * v6];
  std::allocator<CLMicroLocationRecordingEventsTable::Entry>::construct[abi:ne180100]<CLMicroLocationRecordingEventsTable::Entry,CLMicroLocationRecordingEventsTable::Entry const&>((uint64_t)(a1 + 2), (uint64_t)v11, a2);
  v12 = v11 + 248;
  std::vector<CLMicroLocationRecordingEventsTable::Entry>::__swap_out_circular_buffer(a1, &v10);
  v8 = a1[1];
  std::__split_buffer<CLMicroLocationRecordingEventsTable::Entry>::~__split_buffer(&v10);
  return v8;
}

void sub_241B4CBA4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<CLMicroLocationRecordingEventsTable::Entry>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

__n128 std::vector<CLMicroLocationRecordingLabelsTable::Entry>::__construct_one_at_end[abi:ne180100]<CLMicroLocationRecordingLabelsTable::Entry const&>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  std::string *v5;
  __int128 v6;
  __n128 result;

  v4 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)v4 = *(_OWORD *)a2;
  v5 = (std::string *)(v4 + 16);
  if (*(char *)(a2 + 39) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)(a2 + 16), *(_QWORD *)(a2 + 24));
  }
  else
  {
    v6 = *(_OWORD *)(a2 + 16);
    *(_QWORD *)(v4 + 32) = *(_QWORD *)(a2 + 32);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  result = *(__n128 *)(a2 + 40);
  *(_QWORD *)(v4 + 56) = *(_QWORD *)(a2 + 56);
  *(__n128 *)(v4 + 40) = result;
  *(_QWORD *)(a1 + 8) = v4 + 64;
  return result;
}

void sub_241B4CC30(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<CLMicroLocationRecordingLabelsTable::Entry>::__emplace_back_slow_path<CLMicroLocationRecordingLabelsTable::Entry const&>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  std::string *v12;
  __int128 v13;
  char *v14;
  __int128 v15;
  uint64_t v16;
  _QWORD v18[2];
  char *v19;
  char *v20;
  uint64_t *v21;

  v3 = *a1;
  v4 = (a1[1] - *a1) >> 6;
  v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 58)
    std::vector<CLMicroLocationProto::ConfidenceReason>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = a1[2] - v3;
  if (v8 >> 5 > v5)
    v5 = v8 >> 5;
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFC0)
    v9 = 0x3FFFFFFFFFFFFFFLL;
  else
    v9 = v5;
  v21 = a1 + 2;
  if (v9)
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CLMicroLocationRecordingLabelsTable::Entry>>(v7, v9);
  else
    v10 = 0;
  v11 = &v10[64 * v4];
  v18[0] = v10;
  v18[1] = v11;
  v19 = v11;
  v20 = &v10[64 * v9];
  *(_OWORD *)v11 = *(_OWORD *)a2;
  v12 = (std::string *)(v11 + 16);
  if (*(char *)(a2 + 39) < 0)
  {
    std::string::__init_copy_ctor_external(v12, *(const std::string::value_type **)(a2 + 16), *(_QWORD *)(a2 + 24));
    v11 = v19;
  }
  else
  {
    v13 = *(_OWORD *)(a2 + 16);
    *((_QWORD *)v11 + 4) = *(_QWORD *)(a2 + 32);
    *(_OWORD *)&v12->__r_.__value_.__l.__data_ = v13;
  }
  v14 = &v10[64 * v4];
  v15 = *(_OWORD *)(a2 + 40);
  *((_QWORD *)v14 + 7) = *(_QWORD *)(a2 + 56);
  *(_OWORD *)(v14 + 40) = v15;
  v19 = v11 + 64;
  std::vector<CLMicroLocationRecordingLabelsTable::Entry>::__swap_out_circular_buffer(a1, v18);
  v16 = a1[1];
  std::__split_buffer<CLMicroLocationRecordingLabelsTable::Entry>::~__split_buffer((uint64_t)v18);
  return v16;
}

void sub_241B4CD48(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<CLMicroLocationRecordingLabelsTable::Entry>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void CLMicroLocationBlueAtlasAlgorithms::learnBlueAtlasModel(uint64_t a1@<X0>, CLMicroLocationFingerprintPool *a2@<X1>, _OWORD *a3@<X2>, uint64_t *a4@<X3>, uint64_t a5@<X8>)
{
  id v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  NSObject *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t *i;
  int v29;
  uint64_t *v30;
  uint64_t *v31;
  char *v32;
  uint64_t v33;
  unint64_t v34;
  _DWORD *v35;
  char *v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  char *v41;
  char *v42;
  int v43;
  NSObject *v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  void *v48;
  void *v49;
  void *v50;
  uint64_t v51;
  void *v52;
  void *v53;
  void *v54;
  void *v55;
  uint64_t v56;
  void *v57;
  void *v58;
  void *v59;
  void *v60;
  uint64_t v61;
  void *v62;
  void *v63;
  void *v64;
  void *v65;
  uint64_t v66;
  uint64_t *v67;
  double v68;
  float *v69;
  float *v70;
  float v71;
  uint64_t j;
  float v73;
  double v74;
  double v75;
  double v76;
  double v77;
  double v78;
  uint64_t v79;
  double *v80;
  char *v81;
  double *v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  unint64_t v86;
  char *v87;
  uint64_t *v88;
  char *v89;
  NSObject *v90;
  unint64_t v91;
  void **v92;
  uint64_t *v93;
  uint64_t *v94;
  BOOL v95;
  double *v96;
  double *v97;
  unint64_t v98;
  uint64_t v99;
  void *v100;
  void *v101;
  void *v102;
  void *v103;
  int v104;
  int v105;
  unint64_t v106;
  unint64_t v107;
  void *v108;
  void *v109;
  void *v110;
  void *v111;
  float v112;
  float v113;
  char *v114;
  char *v115;
  double v116;
  char *v117;
  char *v118;
  double v119;
  NSObject *v120;
  unint64_t v121;
  CLMacAddress **v122;
  CLMacAddress **v123;
  uint64_t v124;
  uint64_t v125;
  void *v126;
  void *v127;
  void *v128;
  void *v129;
  int v130;
  int v131;
  CLMicroLocationProto::RecordingEvent *v132;
  unint64_t v133;
  uint64_t v134;
  uint64_t k;
  uint64_t v136;
  unint64_t v137;
  NSObject *v138;
  std::string *v139;
  std::string::size_type v140;
  uint64_t v141;
  uint64_t v142;
  CLMicroLocationModel *v143;
  uint64_t v144;
  __int128 v145;
  __int128 v146;
  uint64_t v147;
  _QWORD *v148;
  uint64_t v149;
  NSObject *v150;
  NSObject *v151;
  NSObject *v152;
  unint64_t v153;
  _QWORD v156[2];
  _QWORD v157[2];
  void *v158[2];
  __int128 v159;
  __int128 v160;
  char v161;
  char v162;
  CLMacAddress v163;
  char v164;
  float v165;
  void *__p;
  char *v167;
  char *v168;
  void *v169[2];
  uint64_t v170;
  void *v171[2];
  uint64_t v172;
  void *v173[2];
  uint64_t v174;
  void *v175[2];
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  void *v182[3];
  _QWORD **v183;
  _QWORD *v184[2];
  uint64_t *v185;
  _QWORD *v186;
  uint64_t v187;
  _BYTE buf[28];
  __int16 v189;
  _BYTE v190[26];
  uint64_t v191;
  _BYTE v192[40];
  _BYTE v193[56];
  int v194;
  void *v195;
  void *v196;
  uint64_t v197;
  _BYTE v198[24];
  _BYTE *v199;
  _QWORD v200[3];
  _QWORD *v201;
  _QWORD v202[3];
  _QWORD *v203;
  std::string v204;
  uint64_t v205;

  v205 = *MEMORY[0x24BDAC8D0];
  CLMicroLocationModel::CLMicroLocationModel((CLMicroLocationModel *)a5);
  v186 = 0;
  v187 = 0;
  v184[1] = 0;
  v185 = (uint64_t *)&v186;
  v183 = v184;
  v184[0] = 0;
  v202[0] = &off_2511D63B8;
  v202[1] = CLMicroLocationFingerprintConfiguration::getCustomLoiRecordingConfigurationFromSettings;
  v203 = v202;
  ULSettings::getRecordingEventsForModelType((char **)v182);
  v8 = *(id *)(a1 + 88);
  v9 = v8;
  *(_OWORD *)buf = *a3;
  buf[16] = 1;
  if (v8)
  {
    objc_msgSend(v8, "fetchRecordingEventTriggersForLearningMeasurements:atLoiGroupId:", v182, buf);
  }
  else
  {
    v179 = 0;
    v180 = 0;
    v181 = 0;
  }

  +[ULDefaultsSingleton shared](ULDefaultsSingleton, "shared");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "defaultsDictionary");
  v11 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "ULFingerprintDataSource");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v11, "objectForKey:", v12);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  if (v13 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
    v14 = objc_msgSend(v13, "unsignedIntValue");
  else
    v14 = objc_msgSend(&unk_2511EE248, "unsignedIntValue");
  v15 = v14;

  v200[0] = &off_2511DAEE0;
  v201 = v200;
  v16 = (uint64_t)v203;
  if (!v203)
    goto LABEL_11;
  if (v203 != v202)
  {
    v16 = (*(uint64_t (**)(_QWORD *))(*v203 + 16))(v203);
LABEL_11:
    v199 = (_BYTE *)v16;
    goto LABEL_13;
  }
  v199 = v198;
  (*(void (**)(_QWORD *, _BYTE *))(v202[0] + 24))(v202, v198);
LABEL_13:
  CLMicroLocationFingerprintDataSources::create(v15, (uint64_t)v200, (uint64_t)v198, (uint64_t)&v179, a1, &v177);
  CLMicroLocationFingerprintVector::CLMicroLocationFingerprintVector(&v178, &v177);
  v17 = v177;
  v177 = 0;
  if (v17)
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  v18 = v199;
  if (v199 == v198)
  {
    v19 = 4;
    v18 = v198;
  }
  else
  {
    if (!v199)
      goto LABEL_20;
    v19 = 5;
  }
  (*(void (**)(void))(*v18 + 8 * v19))();
LABEL_20:
  v20 = v201;
  if (v201 == v200)
  {
    v21 = 4;
    v20 = v200;
  }
  else
  {
    if (!v201)
      goto LABEL_25;
    v21 = 5;
  }
  (*(void (**)(void))(*v20 + 8 * v21))();
LABEL_25:
  if (onceToken_MicroLocation_Default != -1)
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_107);
  v22 = (id)logObject_MicroLocation_Default;
  if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
  {
    v24 = v179;
    v23 = v180;
    v25 = CLMicroLocationFingerprintVector::size((CLMicroLocationFingerprintVector *)&v178);
    *(_DWORD *)buf = 68289538;
    *(_DWORD *)&buf[4] = 0;
    *(_WORD *)&buf[8] = 2082;
    *(_QWORD *)&buf[10] = "";
    *(_WORD *)&buf[18] = 2050;
    *(_QWORD *)&buf[20] = 0xEF7BDEF7BDEF7BDFLL * ((v23 - v24) >> 3);
    v189 = 2050;
    *(_QWORD *)v190 = v25;
    _os_log_impl(&dword_2419D9000, v22, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"learnBlueAtlasModel\", \"Num recording entries\":%{public}lu, \"Num valid fingerprints\":%{public}lu}", buf, 0x26u);
  }

  *(_QWORD *)buf = CLMicroLocationFingerprintVector::begin((CLMicroLocationFingerprintVector *)&v178);
  *(_QWORD *)&buf[8] = v26;
  v158[0] = (void *)CLMicroLocationFingerprintVector::end((CLMicroLocationFingerprintVector *)&v178);
  v158[1] = v27;
  while (CLMicroLocationFingerprintVector::Iterator::operator!=(buf, v158))
  {
    for (i = *(uint64_t **)(CLMicroLocationFingerprintVector::Iterator::operator*(buf) + 16); i; i = (uint64_t *)*i)
    {
      if (*((_DWORD *)i + 6) == 1)
      {
        v175[0] = 0;
        if (*((_DWORD *)i + 14))
          std::__throw_bad_variant_access[abi:ne180100]();
        v175[0] = (void *)i[4];
        v29 = *((_DWORD *)i + 7);
        v204.__r_.__value_.__r.__words[0] = (std::string::size_type)v175;
        v30 = std::__tree<std::__value_type<unsigned long long,std::vector<float>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::vector<float>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::vector<float>>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(&v185, (unint64_t *)v175, (uint64_t)&std::piecewise_construct, (uint64_t **)&v204);
        v31 = v30;
        v32 = (char *)v30[6];
        v33 = (uint64_t)(v30 + 7);
        v34 = v30[7];
        if ((unint64_t)v32 >= v34)
        {
          v36 = (char *)v30[5];
          v37 = (v32 - v36) >> 2;
          if ((unint64_t)(v37 + 1) >> 62)
            std::vector<CLMicroLocationProto::ConfidenceReason>::__throw_length_error[abi:ne180100]();
          v38 = v34 - (_QWORD)v36;
          v39 = (uint64_t)(v34 - (_QWORD)v36) >> 1;
          if (v39 <= v37 + 1)
            v39 = v37 + 1;
          if (v38 >= 0x7FFFFFFFFFFFFFFCLL)
            v40 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v40 = v39;
          if (v40)
          {
            v41 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CLMicroLocationProto::ConfidenceReason>>(v33, v40);
            v36 = (char *)v31[5];
            v32 = (char *)v31[6];
          }
          else
          {
            v41 = 0;
          }
          v42 = &v41[4 * v37];
          *(_DWORD *)v42 = v29;
          v35 = v42 + 4;
          while (v32 != v36)
          {
            v43 = *((_DWORD *)v32 - 1);
            v32 -= 4;
            *((_DWORD *)v42 - 1) = v43;
            v42 -= 4;
          }
          v31[5] = (uint64_t)v42;
          v31[6] = (uint64_t)v35;
          v31[7] = (uint64_t)&v41[4 * v40];
          if (v36)
            operator delete(v36);
        }
        else
        {
          *(_DWORD *)v32 = v29;
          v35 = v32 + 4;
        }
        v31[6] = (uint64_t)v35;
      }
    }
    CLMicroLocationFingerprintVector::Iterator::operator++((uint64_t)buf);
  }
  if (onceToken_MicroLocation_Default != -1)
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_107);
  v44 = (id)logObject_MicroLocation_Default;
  if (os_log_type_enabled(v44, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 68289282;
    *(_DWORD *)&buf[4] = 0;
    *(_WORD *)&buf[8] = 2082;
    *(_QWORD *)&buf[10] = "";
    *(_WORD *)&buf[18] = 2050;
    *(_QWORD *)&buf[20] = v187;
    _os_log_impl(&dword_2419D9000, v44, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"learnBlueAtlasModel\", \"Num unique APs\":%{public}lu}", buf, 0x1Cu);
  }

  v46 = v179;
  v45 = v180;
  +[ULDefaultsSingleton shared](ULDefaultsSingleton, "shared");
  v47 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v47, "defaultsDictionary");
  v48 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "ULBlueAtlasAppearanceRateThresholds");
  v49 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v48, "objectForKey:", v49);
  v50 = (void *)objc_claimAutoreleasedReturnValue();
  if (v50 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
  {
    ULSettings::convert<NSArray<NSNumber *> * {__strong},std::vector<double>>(v50, (uint64_t)buf);
    *(_OWORD *)v175 = *(_OWORD *)buf;
    v51 = *(_QWORD *)&buf[16];
  }
  else
  {
    ULSettings::convert<std::initializer_list<double>,std::vector<double>>((uint64_t *)&_ZGRN10ULSettings14SettingsTraitsINS_33BlueAtlasAppearanceRateThresholdsEE12defaultValueE_, 2uLL, (uint64_t)buf);
    v51 = *(_QWORD *)&buf[16];
    *(_OWORD *)v175 = *(_OWORD *)buf;
  }
  v176 = v51;

  +[ULDefaultsSingleton shared](ULDefaultsSingleton, "shared");
  v52 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v52, "defaultsDictionary");
  v53 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "ULBlueAtlasAppearanceRateScores");
  v54 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v53, "objectForKey:", v54);
  v55 = (void *)objc_claimAutoreleasedReturnValue();
  if (v55 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
  {
    ULSettings::convert<NSArray<NSNumber *> * {__strong},std::vector<double>>(v55, (uint64_t)buf);
    *(_OWORD *)v173 = *(_OWORD *)buf;
    v56 = *(_QWORD *)&buf[16];
  }
  else
  {
    ULSettings::convert<std::initializer_list<double>,std::vector<double>>((uint64_t *)&_ZGRN10ULSettings14SettingsTraitsINS_29BlueAtlasAppearanceRateScoresEE12defaultValueE_, 2uLL, (uint64_t)buf);
    v56 = *(_QWORD *)&buf[16];
    *(_OWORD *)v173 = *(_OWORD *)buf;
  }
  v174 = v56;

  +[ULDefaultsSingleton shared](ULDefaultsSingleton, "shared");
  v57 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v57, "defaultsDictionary");
  v58 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "ULBlueAtlasRssiThresholds");
  v59 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v58, "objectForKey:", v59);
  v60 = (void *)objc_claimAutoreleasedReturnValue();
  if (v60 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
  {
    ULSettings::convert<NSArray<NSNumber *> * {__strong},std::vector<double>>(v60, (uint64_t)buf);
    *(_OWORD *)v171 = *(_OWORD *)buf;
    v61 = *(_QWORD *)&buf[16];
  }
  else
  {
    ULSettings::convert<std::initializer_list<double>,std::vector<double>>(_ZGRN10ULSettings14SettingsTraitsINS_23BlueAtlasRssiThresholdsEE12defaultValueE_, 4uLL, (uint64_t)buf);
    v61 = *(_QWORD *)&buf[16];
    *(_OWORD *)v171 = *(_OWORD *)buf;
  }
  v172 = v61;

  +[ULDefaultsSingleton shared](ULDefaultsSingleton, "shared");
  v62 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v62, "defaultsDictionary");
  v63 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "ULBlueAtlasRssiScores");
  v64 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v63, "objectForKey:", v64);
  v65 = (void *)objc_claimAutoreleasedReturnValue();
  if (v65 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
  {
    ULSettings::convert<NSArray<NSNumber *> * {__strong},std::vector<double>>(v65, (uint64_t)buf);
    *(_OWORD *)v169 = *(_OWORD *)buf;
    v66 = *(_QWORD *)&buf[16];
  }
  else
  {
    ULSettings::convert<std::initializer_list<double>,std::vector<double>>(_ZGRN10ULSettings14SettingsTraitsINS_19BlueAtlasRssiScoresEE12defaultValueE_, 4uLL, (uint64_t)buf);
    v66 = *(_QWORD *)&buf[16];
    *(_OWORD *)v169 = *(_OWORD *)buf;
  }
  v170 = v66;

  __p = 0;
  v167 = 0;
  v168 = 0;
  v67 = v185;
  v153 = 0xEF7BDEF7BDEF7BDFLL * ((v45 - v46) >> 3);
  if (v185 == (uint64_t *)&v186)
  {
    v97 = 0;
    v96 = 0;
  }
  else
  {
    v68 = (double)(0xEF7BDEF7BDEF7BDFLL * ((v45 - v46) >> 3));
    do
    {
      v70 = (float *)v67[5];
      v69 = (float *)v67[6];
      v71 = 0.0;
      for (j = (char *)v69 - (char *)v70; v70 != v69; v71 = v71 + v73)
        v73 = *v70++;
      v74 = (double)(unint64_t)(j >> 2);
      CLMicroLocationBlueAtlasAlgorithms::calculateScoreForValue<double>((double **)v175, (uint64_t *)v173, v74 / v68);
      v76 = v75;
      CLMicroLocationBlueAtlasAlgorithms::calculateScoreForValue<double>((double **)v171, (uint64_t *)v169, v71 / v74);
      v78 = (v76 + v77) * 0.5;
      v79 = v67[4];
      v80 = (double *)v167;
      if (v167 >= v168)
      {
        v82 = (double *)__p;
        v83 = (v167 - (_BYTE *)__p) >> 4;
        v84 = v83 + 1;
        if ((unint64_t)(v83 + 1) >> 60)
          std::vector<CLMicroLocationProto::ConfidenceReason>::__throw_length_error[abi:ne180100]();
        v85 = v168 - (_BYTE *)__p;
        if ((v168 - (_BYTE *)__p) >> 3 > v84)
          v84 = v85 >> 3;
        if ((unint64_t)v85 >= 0x7FFFFFFFFFFFFFF0)
          v86 = 0xFFFFFFFFFFFFFFFLL;
        else
          v86 = v84;
        if (v86)
        {
          v87 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<boost::uuids::uuid>>((uint64_t)&v168, v86);
          v82 = (double *)__p;
          v80 = (double *)v167;
        }
        else
        {
          v87 = 0;
        }
        v88 = (uint64_t *)&v87[16 * v83];
        *v88 = v79;
        *((double *)v88 + 1) = v78;
        v89 = (char *)v88;
        if (v80 != v82)
        {
          do
          {
            *((_OWORD *)v89 - 1) = *((_OWORD *)v80 - 1);
            v89 -= 16;
            v80 -= 2;
          }
          while (v80 != v82);
          v82 = (double *)__p;
        }
        v81 = (char *)(v88 + 2);
        __p = v89;
        v167 = (char *)(v88 + 2);
        v168 = &v87[16 * v86];
        if (v82)
          operator delete(v82);
      }
      else
      {
        *(_QWORD *)v167 = v79;
        v80[1] = v78;
        v81 = (char *)(v80 + 2);
      }
      v167 = v81;
      if (onceToken_MicroLocation_Default != -1)
        dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_107);
      v90 = (id)logObject_MicroLocation_Default;
      if (os_log_type_enabled(v90, OS_LOG_TYPE_DEFAULT))
      {
        v204.__r_.__value_.__r.__words[0] = CLMacAddress::newFromUint64((CLMacAddress *)v67[4], v91);
        CLMacAddress::toPrettyStr((CLMacAddress *)&v204, (std::string *)v158);
        v92 = v158;
        if (SBYTE7(v159) < 0)
          v92 = (void **)v158[0];
        *(_DWORD *)buf = 68289538;
        *(_DWORD *)&buf[4] = 0;
        *(_WORD *)&buf[8] = 2082;
        *(_QWORD *)&buf[10] = "";
        *(_WORD *)&buf[18] = 2082;
        *(_QWORD *)&buf[20] = v92;
        v189 = 2050;
        *(double *)v190 = v78;
        _os_log_impl(&dword_2419D9000, v90, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"learnBlueAtlasModel\", \"bssid\":%{public, location:escape_only}s, \"score\":\"%{public}f\"}", buf, 0x26u);
        if (SBYTE7(v159) < 0)
          operator delete(v158[0]);
      }

      v93 = (uint64_t *)v67[1];
      if (v93)
      {
        do
        {
          v94 = v93;
          v93 = (uint64_t *)*v93;
        }
        while (v93);
      }
      else
      {
        do
        {
          v94 = (uint64_t *)v67[2];
          v95 = *v94 == (_QWORD)v67;
          v67 = v94;
        }
        while (!v95);
      }
      v67 = v94;
    }
    while (v94 != (uint64_t *)&v186);
    v96 = (double *)__p;
    v97 = (double *)v167;
  }
  v98 = 126 - 2 * __clz(((char *)v97 - (char *)v96) >> 4);
  if (v97 == v96)
    v99 = 0;
  else
    v99 = v98;
  std::__introsort<std::_ClassicAlgPolicy,CLMicroLocationBlueAtlasAlgorithms::learnBlueAtlasModel(ULDatabase &,CLMicroLocationFingerprintPool &,boost::uuids::uuid const&,std::vector<CLMicroLocationRecordingLabelsTable::Entry> &)::$_1 &,std::pair<unsigned long long,double> *,false>(v96, v97, v99, 1);
  +[ULDefaultsSingleton shared](ULDefaultsSingleton, "shared");
  v100 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v100, "defaultsDictionary");
  v101 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "ULBlueAtlasModelMaxSources");
  v102 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v101, "objectForKey:", v102);
  v103 = (void *)objc_claimAutoreleasedReturnValue();
  if (v103 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
    v104 = objc_msgSend(v103, "intValue");
  else
    v104 = objc_msgSend(&unk_2511EE260, "intValue");
  v105 = v104;

  v106 = (v167 - (_BYTE *)__p) >> 4;
  if (v106 > v105)
  {
    if ((char *)__p + 16 * v105 != v167)
    {
      v167 = (char *)__p + 16 * v105;
      v106 = (16 * v105) >> 4;
    }
    if (v106 != v105)
    {
      _CLLogObjectForCategory_MicroLocation_Default();
      v150 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v150, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)buf = 68290051;
        *(_DWORD *)&buf[4] = 0;
        *(_WORD *)&buf[8] = 2082;
        *(_QWORD *)&buf[10] = "";
        *(_WORD *)&buf[18] = 2050;
        *(_QWORD *)&buf[20] = (v167 - (_BYTE *)__p) >> 4;
        v189 = 1026;
        *(_DWORD *)v190 = v105;
        *(_WORD *)&v190[4] = 2082;
        *(_QWORD *)&v190[6] = "assert";
        *(_WORD *)&v190[14] = 2081;
        *(_QWORD *)&v190[16] = "apScores.size() == (size_t)maxSources";
        _os_log_impl(&dword_2419D9000, v150, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Unexpected remaining number of sources\", \"remaining APs\":%{public}lu, \"maxSources\":%{public}d, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x36u);
      }

      _CLLogObjectForCategory_MicroLocation_Default();
      v151 = objc_claimAutoreleasedReturnValue();
      if (os_signpost_enabled(v151))
      {
        *(_DWORD *)buf = 68290051;
        *(_DWORD *)&buf[4] = 0;
        *(_WORD *)&buf[8] = 2082;
        *(_QWORD *)&buf[10] = "";
        *(_WORD *)&buf[18] = 2050;
        *(_QWORD *)&buf[20] = (v167 - (_BYTE *)__p) >> 4;
        v189 = 1026;
        *(_DWORD *)v190 = v105;
        *(_WORD *)&v190[4] = 2082;
        *(_QWORD *)&v190[6] = "assert";
        *(_WORD *)&v190[14] = 2081;
        *(_QWORD *)&v190[16] = "apScores.size() == (size_t)maxSources";
        _os_signpost_emit_with_name_impl(&dword_2419D9000, v151, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Unexpected remaining number of sources", "{\"msg%{public}.0s\":\"Unexpected remaining number of sources\", \"remaining APs\":%{public}lu, \"maxSources\":%{public}d, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x36u);
      }

      _CLLogObjectForCategory_MicroLocation_Default();
      v152 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v152, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 68290051;
        *(_DWORD *)&buf[4] = 0;
        *(_WORD *)&buf[8] = 2082;
        *(_QWORD *)&buf[10] = "";
        *(_WORD *)&buf[18] = 2050;
        *(_QWORD *)&buf[20] = (v167 - (_BYTE *)__p) >> 4;
        v189 = 1026;
        *(_DWORD *)v190 = v105;
        *(_WORD *)&v190[4] = 2082;
        *(_QWORD *)&v190[6] = "assert";
        *(_WORD *)&v190[14] = 2081;
        *(_QWORD *)&v190[16] = "apScores.size() == (size_t)maxSources";
        _os_log_impl(&dword_2419D9000, v152, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Unexpected remaining number of sources\", \"remaining APs\":%{public}lu, \"maxSources\":%{public}d, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x36u);
      }

      abort_report_np();
      __break(1u);
    }
  }
  v107 = (int)ULSettings::get<ULSettings::BlueAtlasModelMinSources>();
  if (v107 < (v167 - (_BYTE *)__p) >> 4)
  {
    +[ULDefaultsSingleton shared](ULDefaultsSingleton, "shared");
    v108 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v108, "defaultsDictionary");
    v109 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "ULBlueAtlasApSelectionScoreThreshold");
    v110 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v109, "objectForKey:", v110);
    v111 = (void *)objc_claimAutoreleasedReturnValue();
    if (!v111)
      goto LABEL_123;
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
      objc_msgSend(v111, "floatValue");
    else
LABEL_123:
      objc_msgSend(&unk_2511ED0B8, "floatValue");
    v113 = v112;

    v114 = v167;
    v115 = (char *)__p + 16 * v107;
    if (v115 != v167)
    {
      v116 = v113;
      v117 = v115 + 16;
      while (*((double *)v117 - 1) >= v116)
      {
        v95 = v117 == v167;
        v117 += 16;
        if (v95)
          goto LABEL_137;
      }
      v118 = v117 - 16;
      if (v117 - 16 != v167)
      {
        while (v117 != v114)
        {
          v119 = *((double *)v117 + 1);
          if (v119 >= v116)
          {
            *(_QWORD *)v118 = *(_QWORD *)v117;
            *((double *)v118 + 1) = v119;
            v118 += 16;
          }
          v117 += 16;
        }
        if (v118 != v114)
          v167 = v118;
      }
    }
  }
LABEL_137:
  if (onceToken_MicroLocation_Default != -1)
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_107);
  v120 = (id)logObject_MicroLocation_Default;
  if (os_log_type_enabled(v120, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 68289282;
    *(_DWORD *)&buf[4] = 0;
    *(_WORD *)&buf[8] = 2082;
    *(_QWORD *)&buf[10] = "";
    *(_WORD *)&buf[18] = 2050;
    *(_QWORD *)&buf[20] = (v167 - (_BYTE *)__p) >> 4;
    _os_log_impl(&dword_2419D9000, v120, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"learnBlueAtlasModel\", \"Num dominant APs\":%{public}lu}", buf, 0x1Cu);
  }

  v162 = 0;
  LOBYTE(v163.var0) = 0;
  v164 = 0;
  *(_OWORD *)v158 = 0u;
  v159 = 0u;
  v160 = 0u;
  v161 = 0;
  v165 = -3.4028e38;
  v122 = (CLMacAddress **)__p;
  v123 = (CLMacAddress **)v167;
  *(_QWORD *)buf = (char *)&v159 + 8;
  while (v122 != v123)
  {
    v204.__r_.__value_.__r.__words[0] = CLMacAddress::newFromUint64(*v122, v121);
    std::back_insert_iterator<std::vector<ULServiceQualityReasonEnum>>::operator=[abi:ne180100]((uint64_t *)buf, &v204);
    v122 += 2;
  }
  v124 = *a4;
  v125 = a4[1];
  v204.__r_.__value_.__r.__words[0] = (std::string::size_type)v158;
  while (v124 != v125)
  {
    *(_OWORD *)buf = *(_OWORD *)(v124 + 40);
    std::back_insert_iterator<std::vector<boost::uuids::uuid>>::operator=[abi:ne180100]((void ***)&v204, buf);
    v124 += 64;
  }
  +[ULDefaultsSingleton shared](ULDefaultsSingleton, "shared");
  v126 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v126, "defaultsDictionary");
  v127 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "ULBlueAtlasAssociatedAccessPointLocalizerEnabled");
  v128 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v127, "objectForKey:", v128);
  v129 = (void *)objc_claimAutoreleasedReturnValue();
  if (v129 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
    v130 = objc_msgSend(v129, "BOOLValue");
  else
    v130 = objc_msgSend(MEMORY[0x24BDBD1C8], "BOOLValue");
  v131 = v130;

  if (v131)
  {
    v134 = v179;
    for (k = v180; v134 != k; v134 += 248)
    {
      if ((*(_BYTE *)(v134 + 222) & 1) != 0)
      {
        v136 = *(_QWORD *)(v134 + 208);
        if (!v136)
        {
          v132 = (CLMicroLocationProto::RecordingEvent *)CLMicroLocationProto::RecordingEvent::default_instance(v132);
          v136 = *((_QWORD *)v132 + 16);
        }
        if (*(float *)(v136 + 16) > v165)
        {
          v137 = CLMacAddress::newFromUint64(*(CLMacAddress **)(v136 + 8), v133);
          if (!v164)
            v164 = 1;
          v163.var0 = v137;
          v165 = *(float *)(v136 + 16);
          if (onceToken_MicroLocation_Default != -1)
            dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_107);
          v138 = (id)logObject_MicroLocation_Default;
          if (os_log_type_enabled(v138, OS_LOG_TYPE_DEFAULT))
          {
            if (!v164)
              std::__throw_bad_optional_access[abi:ne180100]();
            CLMacAddress::toCLStr(&v163, &v204);
            v139 = &v204;
            if ((v204.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
              v139 = (std::string *)v204.__r_.__value_.__r.__words[0];
            *(_DWORD *)buf = 68289539;
            *(_DWORD *)&buf[4] = 0;
            *(_WORD *)&buf[8] = 2082;
            *(_QWORD *)&buf[10] = "";
            *(_WORD *)&buf[18] = 2081;
            *(_QWORD *)&buf[20] = v139;
            v189 = 2050;
            *(double *)v190 = v165;
            _os_log_impl(&dword_2419D9000, v138, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"learnBlueAtlasModel, updating associated AP\", \"MAC Address\":%{private, location:escape_only}s, \"Rssi\":\"%{public}f\"}", buf, 0x26u);
            if (SHIBYTE(v204.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v204.__r_.__value_.__l.__data_);
          }

        }
      }
    }
  }
  *(_QWORD *)a5 = 0x300000005;
  *(_BYTE *)(a5 + 8) = 1;
  *(_DWORD *)(a5 + 12) = 1;
  *(_DWORD *)(a5 + 296) = v153;
  *(_DWORD *)(a5 + 300) = CLMicroLocationFingerprintVector::size((CLMicroLocationFingerprintVector *)&v178);
  *(_DWORD *)(a5 + 304) = CLMicroLocationFingerprintVector::size((CLMicroLocationFingerprintVector *)&v178);
  *(_DWORD *)(a5 + 308) = 0;
  *(_DWORD *)(a5 + 312) = ((_QWORD)v160 - *((_QWORD *)&v159 + 1)) >> 3;
  *(_QWORD *)(a5 + 316) = 0;
  std::optional<CLMicroLocationModel::BlueAtlasData>::operator=[abi:ne180100]<CLMicroLocationModel::BlueAtlasData,void>(a5 + 200, (uint64_t)v158);
  *(_OWORD *)&v204.__r_.__value_.__l.__data_ = 0uLL;
  *(_DWORD *)buf = 0;
  boost::uuids::detail::random_provider_base::random_provider_base((boost::uuids::detail::random_provider_base *)buf);
  v204.__r_.__value_.__r.__words[0] = boost::uuids::random_generator_pure::operator()((uint64_t)buf);
  v204.__r_.__value_.__l.__size_ = v140;
  boost::uuids::detail::random_provider_base::destroy((boost::uuids::detail::random_provider_base *)buf);
  v157[0] = CLMicroLocationFingerprintVector::begin((CLMicroLocationFingerprintVector *)&v178);
  v157[1] = v141;
  v156[0] = CLMicroLocationFingerprintVector::end((CLMicroLocationFingerprintVector *)&v178);
  v156[1] = v142;
  while (CLMicroLocationFingerprintVector::Iterator::operator!=(v157, v156))
  {
    v144 = CLMicroLocationFingerprintVector::Iterator::operator*(v157);
    std::unordered_set<CLMicroLocationFingerprint::Measurement,CLMicroLocationFingerprint::Measurement::HashMeasurement,CLMicroLocationFingerprint::Measurement::PredicateMeasurement,std::allocator<CLMicroLocationFingerprint::Measurement>>::unordered_set((uint64_t)buf, v144);
    v145 = *(_OWORD *)(v144 + 40);
    v191 = *(_QWORD *)(v144 + 56);
    *(_OWORD *)&v190[10] = v145;
    std::unordered_set<CLMicroLocationProto::DataType>::unordered_set((uint64_t)v192, v144 + 64);
    std::unordered_map<CLMicroLocationProto::DataType,CLMicroLocationFingerprint::StartAndEndTimestamps>::unordered_map((uint64_t)v193, v144 + 104);
    v146 = *(_OWORD *)(v144 + 144);
    v194 = *(_DWORD *)(v144 + 160);
    *(_OWORD *)&v193[40] = v146;
    v196 = 0;
    v197 = 0;
    v195 = 0;
    std::vector<CLMicroLocationProto::ConfidenceReason>::__init_with_size[abi:ne180100]<CLMicroLocationProto::ConfidenceReason*,CLMicroLocationProto::ConfidenceReason*>(&v195, *(const void **)(v144 + 168), *(_QWORD *)(v144 + 176), (uint64_t)(*(_QWORD *)(v144 + 176) - *(_QWORD *)(v144 + 168)) >> 2);
    CLMicroLocationModel::addFingerprint((CLMicroLocationModel *)a5, (const CLMicroLocationFingerprint *)buf, (const uuid *)&v204, a2);
    CLMicroLocationModel::addRecording((CLMicroLocationModel *)a5, (uuid *)&v204, (const uuid *)&v190[10]);
    if (v195)
    {
      v196 = v195;
      operator delete(v195);
    }
    std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>>>::~__hash_table((uint64_t)v193);
    std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>>>::~__hash_table((uint64_t)v192);
    std::__hash_table<CLMicroLocationFingerprint::Measurement,CLMicroLocationFingerprint::Measurement::HashMeasurement,CLMicroLocationFingerprint::Measurement::PredicateMeasurement,std::allocator<CLMicroLocationFingerprint::Measurement>>::~__hash_table((uint64_t)buf);
    CLMicroLocationFingerprintVector::Iterator::operator++((uint64_t)v157);
  }
  CLMicroLocationBlueAtlasAlgorithms::validateBlueAtlasModelQuality((CLMicroLocationBlueAtlasAlgorithms *)a5, v143);
  if (*((_QWORD *)&v159 + 1))
  {
    *(_QWORD *)&v160 = *((_QWORD *)&v159 + 1);
    operator delete(*((void **)&v159 + 1));
  }
  if (v158[0])
  {
    v158[1] = v158[0];
    operator delete(v158[0]);
  }
  if (__p)
  {
    v167 = (char *)__p;
    operator delete(__p);
  }
  if (v169[0])
    operator delete(v169[0]);
  if (v171[0])
    operator delete(v171[0]);
  if (v173[0])
    operator delete(v173[0]);
  if (v175[0])
    operator delete(v175[0]);
  v147 = v178;
  v178 = 0;
  if (v147)
    (*(void (**)(uint64_t))(*(_QWORD *)v147 + 8))(v147);
  *(_QWORD *)buf = &v179;
  std::vector<CLMicroLocationRecordingEventsTable::Entry>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  if (v182[0])
  {
    v182[1] = v182[0];
    operator delete(v182[0]);
  }
  v148 = v203;
  if (v203 == v202)
  {
    v149 = 4;
    v148 = v202;
    goto LABEL_196;
  }
  if (v203)
  {
    v149 = 5;
LABEL_196:
    (*(void (**)(void))(*v148 + 8 * v149))();
  }
  std::__tree<std::__value_type<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,double>,std::__map_value_compare<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,std::__value_type<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,double>,std::less<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes>,true>,std::allocator<std::__value_type<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,double>>>::destroy((uint64_t)&v183, v184[0]);
  std::__tree<std::__value_type<unsigned long long,std::vector<float>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::vector<float>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::vector<float>>>>::destroy((uint64_t)&v185, v186);
}

void sub_241B4E368(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *__p,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,uint64_t a49,uint64_t a50,void *a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,char a57,uint64_t a58,uint64_t a59,void *a60,uint64_t a61,uint64_t a62,char a63)
{
  uint64_t a64;
  char a66;
  uint64_t a67;
  void **v67;
  void *v68;
  void *v69;
  void *v70;
  uint64_t v71;
  uint64_t v73;
  _QWORD *v74;
  uint64_t v75;

  if (__p)
  {
    a37 = (uint64_t)__p;
    operator delete(__p);
  }
  if (a39)
    operator delete(a39);
  if (a43)
    operator delete(a43);
  if (a47)
    operator delete(a47);
  if (a51)
    operator delete(a51);
  v73 = a56;
  a56 = 0;
  if (v73)
    (*(void (**)(uint64_t))(*(_QWORD *)v73 + 8))(v73);
  a25 = (uint64_t)&a57;
  std::vector<CLMicroLocationRecordingEventsTable::Entry>::__destroy_vector::operator()[abi:ne180100]((void ***)&a25);
  if (a60)
  {
    a61 = (uint64_t)a60;
    operator delete(a60);
  }
  v74 = *(_QWORD **)(v71 - 184);
  if (v74 == (_QWORD *)(v71 - 208))
  {
    v75 = 4;
    v74 = (_QWORD *)(v71 - 208);
  }
  else
  {
    if (!v74)
      goto LABEL_20;
    v75 = 5;
  }
  (*(void (**)(void))(*v74 + 8 * v75))();
LABEL_20:
  std::__tree<std::__value_type<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,double>,std::__map_value_compare<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,std::__value_type<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,double>,std::less<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes>,true>,std::allocator<std::__value_type<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,double>>>::destroy((uint64_t)&a63, (_QWORD *)a64);
  std::__tree<std::__value_type<unsigned long long,std::vector<float>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::vector<float>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::vector<float>>>>::destroy((uint64_t)&a66, (_QWORD *)a67);
  CLMicroLocationModel::~CLMicroLocationModel(v67);
  _Unwind_Resume(a1);
}

double **CLMicroLocationBlueAtlasAlgorithms::calculateScoreForValue<double>(double **result, uint64_t *a2, double a3)
{
  double *v3;
  double *v4;
  uint64_t v5;
  uint64_t v6;
  double *v7;
  double v8;
  double v9;
  double *v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;

  v4 = *result;
  v3 = result[1];
  v6 = *a2;
  v5 = a2[1];
  if ((char *)v3 - (char *)*result == v5 - *a2)
  {
    if (v4 != v3)
    {
      v7 = v4 + 1;
      while (v7 != v3)
      {
        v9 = *(v7 - 1);
        v8 = *v7++;
        if (v8 > v9)
        {
          result = (double **)CLMicroLocationBlueAtlasAlgorithms::calculateScoreForValue<double>();
          break;
        }
      }
    }
    if (v4 != v3 && v6 != v5)
    {
      v10 = v4 + 1;
      v11 = v6 + 8;
      do
      {
        if (*(v10 - 1) < a3)
          break;
        if (v10 == v3)
          break;
        ++v10;
        v12 = v11 == v5;
        v11 += 8;
      }
      while (!v12);
    }
  }
  else
  {
    v13 = CLMicroLocationBlueAtlasAlgorithms::calculateScoreForValue<double>();
    return (double **)ULSettings::get<ULSettings::BlueAtlasModelMinSources>(v13);
  }
  return result;
}

uint64_t ULSettings::get<ULSettings::BlueAtlasModelMinSources>()
{
  void *v0;
  void *v1;
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;

  +[ULDefaultsSingleton shared](ULDefaultsSingleton, "shared");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "defaultsDictionary");
  v1 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "ULBlueAtlasModelMinSources");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "objectForKey:", v2);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  if (v3 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
    v4 = objc_msgSend(v3, "intValue");
  else
    v4 = objc_msgSend(&unk_2511EE230, "intValue");
  v5 = v4;

  return v5;
}

void sub_241B4E950(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void CLMicroLocationBlueAtlasAlgorithms::validateBlueAtlasModelQuality(CLMicroLocationBlueAtlasAlgorithms *this, CLMicroLocationModel *a2)
{
  BOOL v3;
  float v4;
  void *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  void *v9;
  float v10;
  float v11;
  unint64_t v12;
  int v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  char *v19;
  unint64_t v20;
  int v21;
  char *v22;
  char *v23;
  char *v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char *v29;
  char *v30;
  char *v31;
  int v32;
  uint64_t v33;
  float *j;
  CLMacAddress *v35;
  CLMacAddress *v36;
  uint64_t v37;
  CLMacAddress *v38;
  uint64_t *v39;
  float v40;
  void *v41;
  void *v42;
  void *v43;
  void *v44;
  int v45;
  int v46;
  void *v47;
  void *v48;
  void *v49;
  void *v50;
  float v51;
  float v52;
  uint64_t *v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t *v56;
  uint64_t *v57;
  void *v58;
  void *v59;
  void *v60;
  void *v61;
  int v62;
  int v63;
  int v64;
  int v65;
  char *v66;
  char *v67;
  char *v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  unint64_t v72;
  char *v73;
  char *v74;
  char *v75;
  int v76;
  NSObject *v77;
  uint64_t v78;
  int v79;
  unint64_t v80;
  uint64_t v81;
  _BOOL4 v82;
  int v83;
  uint64_t i;
  _BYTE v85[32];
  uint64_t *v86;
  _QWORD *v87;
  unint64_t v88;
  uint64_t *v89;
  _QWORD *v90[2];
  void *__p;
  char *v92;
  char *v93;
  uint8_t buf[8];
  __int16 v95;
  const char *v96;
  __int16 v97;
  uint64_t v98;
  __int16 v99;
  int v100;
  __int16 v101;
  uint64_t v102;
  __int16 v103;
  unint64_t v104;
  __int16 v105;
  uint64_t v106;
  __int16 v107;
  uint64_t v108;
  uint64_t v109;

  v109 = *MEMORY[0x24BDAC8D0];
  __p = 0;
  v92 = 0;
  v93 = 0;
  if (*((_BYTE *)this + 288))
    v3 = *((_BYTE *)this + 272) == 0;
  else
    v3 = 1;
  if (v3)
  {
    v82 = 0;
  }
  else
  {
    v4 = *((float *)this + 70);
    +[ULDefaultsSingleton shared](ULDefaultsSingleton, "shared");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "defaultsDictionary");
    v6 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "ULBlueAtlasStrongAssociatedAccessPointThreshold");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "objectForKey:", v7);
    v8 = objc_claimAutoreleasedReturnValue();
    v9 = (void *)v8;
    if (v8 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
      objc_msgSend(v9, "floatValue");
    else
      objc_msgSend(&unk_2511ED0C8, "floatValue");
    v11 = v10;

    v82 = v4 >= v11;
  }
  v12 = *((unsigned int *)this + 75);
  if (v12 >= (int)ULSettings::get<ULSettings::BlueAtlasModelMinRecordings>())
  {
    v83 = 3;
  }
  else
  {
    if (v82)
      v13 = 2;
    else
      v13 = 1;
    v83 = v13;
    v14 = (v92 - (_BYTE *)__p) >> 2;
    v15 = v14 + 1;
    if ((unint64_t)(v14 + 1) >> 62)
      std::vector<CLMicroLocationProto::ConfidenceReason>::__throw_length_error[abi:ne180100]();
    v16 = v93 - (_BYTE *)__p;
    if ((v93 - (_BYTE *)__p) >> 1 > v15)
      v15 = v16 >> 1;
    if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFFCLL)
      v17 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v17 = v15;
    if (v17)
      v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CLMicroLocationProto::ConfidenceReason>>((uint64_t)&v93, v17);
    else
      v18 = 0;
    v19 = &v18[4 * v14];
    *(_DWORD *)v19 = 3;
    __p = v19;
    v93 = &v18[4 * v17];
    v92 = v19 + 4;
  }
  if (*((_BYTE *)this + 288))
    v20 = (uint64_t)(*((_QWORD *)this + 29) - *((_QWORD *)this + 28)) >> 3;
  else
    v20 = 0;
  v80 = v20;
  if (v20 < (int)ULSettings::get<ULSettings::BlueAtlasModelMinSources>())
  {
    if (v83 == 3)
      v21 = 2;
    else
      v21 = v83;
    if (!v82)
      v21 = 1;
    v83 = v21;
    v22 = v92;
    if (v92 >= v93)
    {
      v24 = (char *)__p;
      v25 = (v92 - (_BYTE *)__p) >> 2;
      v26 = v25 + 1;
      if ((unint64_t)(v25 + 1) >> 62)
        std::vector<CLMicroLocationProto::ConfidenceReason>::__throw_length_error[abi:ne180100]();
      v27 = v93 - (_BYTE *)__p;
      if ((v93 - (_BYTE *)__p) >> 1 > v26)
        v26 = v27 >> 1;
      if ((unint64_t)v27 >= 0x7FFFFFFFFFFFFFFCLL)
        v28 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v28 = v26;
      if (v28)
      {
        v29 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CLMicroLocationProto::ConfidenceReason>>((uint64_t)&v93, v28);
        v24 = (char *)__p;
        v22 = v92;
      }
      else
      {
        v29 = 0;
      }
      v30 = &v29[4 * v25];
      v31 = &v29[4 * v28];
      *(_DWORD *)v30 = 1;
      v23 = v30 + 4;
      while (v22 != v24)
      {
        v32 = *((_DWORD *)v22 - 1);
        v22 -= 4;
        *((_DWORD *)v30 - 1) = v32;
        v30 -= 4;
      }
      __p = v30;
      v92 = v23;
      v93 = v31;
      if (v24)
        operator delete(v24);
    }
    else
    {
      *(_DWORD *)v92 = 1;
      v23 = v22 + 4;
    }
    v92 = v23;
  }
  v90[0] = 0;
  v90[1] = 0;
  v88 = 0;
  v89 = (uint64_t *)v90;
  v86 = (uint64_t *)&v87;
  v87 = 0;
  v33 = *((_QWORD *)this + 41);
  for (i = *((_QWORD *)this + 42); v33 != i; v33 += 32)
  {
    for (j = *(float **)(*(_QWORD *)v33 + 16); j; j = *(float **)j)
    {
      if (*((_DWORD *)j + 6) == 1)
      {
        std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<unsigned long long,boost::uuids::uuid,std::string>,(std::__variant_detail::_Trait)1>::__copy_constructor((uint64_t)v85, (uint64_t)(j + 8));
        if (*((_BYTE *)this + 288))
        {
          v35 = (CLMacAddress *)*((_QWORD *)this + 28);
          v36 = (CLMacAddress *)*((_QWORD *)this + 29);
          std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<unsigned long long,boost::uuids::uuid,std::string>,(std::__variant_detail::_Trait)1>::__copy_constructor((uint64_t)buf, (uint64_t)v85);
          if (v35 != v36)
          {
            while (1)
            {
              if (HIDWORD(v98))
                std::__throw_bad_variant_access[abi:ne180100]();
              v37 = *(_QWORD *)buf;
              if (v37 == CLMacAddress::toUint64(v35))
                break;
              if (++v35 == v36)
              {
                v35 = v36;
                break;
              }
            }
          }
          v38 = (CLMacAddress *)*((_QWORD *)this + 29);
          std::__variant_detail::__dtor<std::__variant_detail::__traits<unsigned long long,boost::uuids::uuid,std::string>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)buf);
          std::__variant_detail::__dtor<std::__variant_detail::__traits<unsigned long long,boost::uuids::uuid,std::string>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)v85);
          if (v35 != v38)
          {
            *(_QWORD *)buf = j + 8;
            v39 = std::__tree<std::__value_type<std::variant<unsigned long long,boost::uuids::uuid,std::string>,unsigned long>,std::__map_value_compare<std::variant<unsigned long long,boost::uuids::uuid,std::string>,std::__value_type<std::variant<unsigned long long,boost::uuids::uuid,std::string>,unsigned long>,std::less<std::variant<unsigned long long,boost::uuids::uuid,std::string>>,true>,std::allocator<std::__value_type<std::variant<unsigned long long,boost::uuids::uuid,std::string>,unsigned long>>>::__emplace_unique_key_args<std::variant<unsigned long long,boost::uuids::uuid,std::string>,std::piecewise_construct_t const&,std::tuple<std::variant<unsigned long long,boost::uuids::uuid,std::string> const&>,std::tuple<>>(&v89, (uint64_t)(j + 8), (uint64_t)&std::piecewise_construct, (uint64_t *)buf);
            ++v39[8];
            v40 = j[7];
            +[ULDefaultsSingleton shared](ULDefaultsSingleton, "shared");
            v41 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v41, "defaultsDictionary");
            v42 = (void *)objc_claimAutoreleasedReturnValue();

            objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "ULBlueAtlasModelValidationMinRssi");
            v43 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v42, "objectForKey:", v43);
            v44 = (void *)objc_claimAutoreleasedReturnValue();
            if (!v44)
              goto LABEL_68;
            objc_opt_class();
            if ((objc_opt_isKindOfClass() & 1) != 0)
              v45 = objc_msgSend(v44, "intValue");
            else
LABEL_68:
              v45 = objc_msgSend(&unk_2511EE278, "intValue", v80);
            v46 = v45;

            if (v40 > (float)v46)
              std::__tree<std::variant<unsigned long long,boost::uuids::uuid,std::string>>::__emplace_unique_key_args<std::variant<unsigned long long,boost::uuids::uuid,std::string>,std::variant<unsigned long long,boost::uuids::uuid,std::string> const&>(&v86, (uint64_t)(j + 8), (uint64_t)(j + 8));
          }
        }
        else
        {
          std::__variant_detail::__dtor<std::__variant_detail::__traits<unsigned long long,boost::uuids::uuid,std::string>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)v85);
        }
      }
    }
  }
  +[ULDefaultsSingleton shared](ULDefaultsSingleton, "shared", v80);
  v47 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v47, "defaultsDictionary");
  v48 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "ULBlueAtlasModelValidationMinAppearanceRate");
  v49 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v48, "objectForKey:", v49);
  v50 = (void *)objc_claimAutoreleasedReturnValue();
  if (v50 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
    objc_msgSend(v50, "floatValue");
  else
    objc_msgSend(&unk_2511ED0A8, "floatValue");
  v52 = v51;

  v53 = v89;
  if (v89 == (uint64_t *)v90)
  {
    v54 = 0;
    v55 = 0x254392000uLL;
  }
  else
  {
    v54 = 0;
    v55 = 0x254392000;
    do
    {
      if ((float)(v52 * (float)*((unsigned int *)this + 75)) <= (float)(unint64_t)v53[8])
        ++v54;
      v56 = (uint64_t *)v53[1];
      if (v56)
      {
        do
        {
          v57 = v56;
          v56 = (uint64_t *)*v56;
        }
        while (v56);
      }
      else
      {
        do
        {
          v57 = (uint64_t *)v53[2];
          v3 = *v57 == (_QWORD)v53;
          v53 = v57;
        }
        while (!v3);
      }
      v53 = v57;
    }
    while (v57 != (uint64_t *)v90);
  }
  objc_msgSend((id)(v55 + 2976), "shared");
  v58 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v58, "defaultsDictionary");
  v59 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "ULBlueAtlasModelValidationMinNumberOfValidAps");
  v60 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v59, "objectForKey:", v60);
  v61 = (void *)objc_claimAutoreleasedReturnValue();
  if (v61 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
    v62 = objc_msgSend(v61, "intValue");
  else
    v62 = objc_msgSend(&unk_2511EE218, "intValue");
  v63 = v62;

  if (v88 < v63 || v54 < v63)
  {
    v64 = v83;
    if (v82)
      v65 = 2;
    else
      v65 = 1;
    if (v83 >= v65)
      v64 = v65;
    v83 = v64;
    v66 = v92;
    if (v92 >= v93)
    {
      v68 = (char *)__p;
      v69 = (v92 - (_BYTE *)__p) >> 2;
      v70 = v69 + 1;
      if ((unint64_t)(v69 + 1) >> 62)
        std::vector<CLMicroLocationProto::ConfidenceReason>::__throw_length_error[abi:ne180100]();
      v71 = v93 - (_BYTE *)__p;
      if ((v93 - (_BYTE *)__p) >> 1 > v70)
        v70 = v71 >> 1;
      if ((unint64_t)v71 >= 0x7FFFFFFFFFFFFFFCLL)
        v72 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v72 = v70;
      if (v72)
      {
        v73 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CLMicroLocationProto::ConfidenceReason>>((uint64_t)&v93, v72);
        v68 = (char *)__p;
        v66 = v92;
      }
      else
      {
        v73 = 0;
      }
      v74 = &v73[4 * v69];
      v75 = &v73[4 * v72];
      *(_DWORD *)v74 = 8;
      v67 = v74 + 4;
      while (v66 != v68)
      {
        v76 = *((_DWORD *)v66 - 1);
        v66 -= 4;
        *((_DWORD *)v74 - 1) = v76;
        v74 -= 4;
      }
      __p = v74;
      v92 = v67;
      v93 = v75;
      if (v68)
        operator delete(v68);
    }
    else
    {
      *(_DWORD *)v92 = 8;
      v67 = v66 + 4;
    }
    v92 = v67;
  }
  CLMicroLocationModel::setQualityIndicator((uint64_t)this, v83);
  CLMicroLocationModel::setCandidateQualityIndicator((uint64_t)this, v83);
  CLMicroLocationModel::setCandidateQualityReasons((uint64_t)this, (uint64_t)&__p);
  if (onceToken_MicroLocation_Default != -1)
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_107);
  v77 = (id)logObject_MicroLocation_Default;
  if (os_log_type_enabled(v77, OS_LOG_TYPE_DEFAULT))
  {
    v78 = *((unsigned int *)this + 75);
    v79 = ULSettings::get<ULSettings::BlueAtlasModelMinRecordings>();
    *(_DWORD *)buf = 68290562;
    *(_DWORD *)&buf[4] = 0;
    v95 = 2082;
    v96 = "";
    v97 = 2050;
    v98 = v78;
    v99 = 1026;
    v100 = v79;
    v101 = 2050;
    v102 = v81;
    v103 = 2050;
    v104 = v88;
    v105 = 2050;
    v106 = v54;
    v107 = 2050;
    v108 = v83;
    _os_log_impl(&dword_2419D9000, v77, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"validateBlueAtlasModelQuality\", \"Num input fingerprints\":%{public}lu, \"Minimal num fingerprints\":%{public}d, \"Num WiFi APs\":%{public}lu, \"Num APs with valid RSSI\":%{public}lu, \"Num APs with valid appearance rate\":%{public}lu, \"Model Quality\":%{public}lu}", buf, 0x4Au);
  }

  std::__tree<std::variant<unsigned long long,boost::uuids::uuid,std::string>>::destroy((uint64_t)&v86, v87);
  std::__tree<std::variant<unsigned long long,boost::uuids::uuid,std::string>>::destroy((uint64_t)&v89, v90[0]);
  if (__p)
  {
    v92 = (char *)__p;
    operator delete(__p);
  }
}

void sub_241B4F26C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  void *v27;
  void *v28;
  void *v29;

  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t ULSettings::get<ULSettings::BlueAtlasModelMinRecordings>()
{
  void *v0;
  void *v1;
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;

  +[ULDefaultsSingleton shared](ULDefaultsSingleton, "shared");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "defaultsDictionary");
  v1 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "ULBlueAtlasModelMinRecordings");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "objectForKey:", v2);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  if (v3 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
    v4 = objc_msgSend(v3, "intValue");
  else
    v4 = objc_msgSend(&unk_2511EE200, "intValue");
  v5 = v4;

  return v5;
}

void sub_241B4F498(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void ___ZL45_CLLogObjectForCategory_MicroLocation_Defaultv_block_invoke_86()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.MicroLocation", "MicroLocation");
  v1 = (void *)logObject_MicroLocation_Default;
  logObject_MicroLocation_Default = (uint64_t)v0;

}

void sub_241B4F6E0(_Unwind_Exception *a1)
{
  void *v1;
  uint64_t v2;
  void *v3;
  void *v5;

  v5 = *(void **)v2;
  if (*(_QWORD *)v2)
  {
    *(_QWORD *)(v2 + 8) = v5;
    operator delete(v5);
  }

  _Unwind_Resume(a1);
}

void sub_241B4F84C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::__tree<std::__value_type<unsigned long long,std::vector<float>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::vector<float>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::vector<float>>>>::destroy(uint64_t a1, _QWORD *a2)
{
  void *v4;

  if (a2)
  {
    std::__tree<std::__value_type<unsigned long long,std::vector<float>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::vector<float>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::vector<float>>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<unsigned long long,std::vector<float>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::vector<float>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::vector<float>>>>::destroy(a1, a2[1]);
    v4 = (void *)a2[5];
    if (v4)
    {
      a2[6] = v4;
      operator delete(v4);
    }
    operator delete(a2);
  }
}

void std::__function::__func<CLMicroLocationBlueAtlasAlgorithms::learnBlueAtlasModel(ULDatabase &,CLMicroLocationFingerprintPool &,boost::uuids::uuid const&,std::vector<CLMicroLocationRecordingLabelsTable::Entry> &)::$_0,std::allocator<CLMicroLocationBlueAtlasAlgorithms::learnBlueAtlasModel(ULDatabase &,CLMicroLocationFingerprintPool &,boost::uuids::uuid const&,std::vector<CLMicroLocationRecordingLabelsTable::Entry> &)::$_0>,BOOL ()(void)>::~__func()
{
  JUMPOUT(0x2426A04D4);
}

_QWORD *std::__function::__func<CLMicroLocationBlueAtlasAlgorithms::learnBlueAtlasModel(ULDatabase &,CLMicroLocationFingerprintPool &,boost::uuids::uuid const&,std::vector<CLMicroLocationRecordingLabelsTable::Entry> &)::$_0,std::allocator<CLMicroLocationBlueAtlasAlgorithms::learnBlueAtlasModel(ULDatabase &,CLMicroLocationFingerprintPool &,boost::uuids::uuid const&,std::vector<CLMicroLocationRecordingLabelsTable::Entry> &)::$_0>,BOOL ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_2511DAEE0;
  return result;
}

void std::__function::__func<CLMicroLocationBlueAtlasAlgorithms::learnBlueAtlasModel(ULDatabase &,CLMicroLocationFingerprintPool &,boost::uuids::uuid const&,std::vector<CLMicroLocationRecordingLabelsTable::Entry> &)::$_0,std::allocator<CLMicroLocationBlueAtlasAlgorithms::learnBlueAtlasModel(ULDatabase &,CLMicroLocationFingerprintPool &,boost::uuids::uuid const&,std::vector<CLMicroLocationRecordingLabelsTable::Entry> &)::$_0>,BOOL ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_2511DAEE0;
}

uint64_t std::__function::__func<CLMicroLocationBlueAtlasAlgorithms::learnBlueAtlasModel(ULDatabase &,CLMicroLocationFingerprintPool &,boost::uuids::uuid const&,std::vector<CLMicroLocationRecordingLabelsTable::Entry> &)::$_0,std::allocator<CLMicroLocationBlueAtlasAlgorithms::learnBlueAtlasModel(ULDatabase &,CLMicroLocationFingerprintPool &,boost::uuids::uuid const&,std::vector<CLMicroLocationRecordingLabelsTable::Entry> &)::$_0>,BOOL ()(void)>::operator()()
{
  return 0;
}

uint64_t std::__function::__func<CLMicroLocationBlueAtlasAlgorithms::learnBlueAtlasModel(ULDatabase &,CLMicroLocationFingerprintPool &,boost::uuids::uuid const&,std::vector<CLMicroLocationRecordingLabelsTable::Entry> &)::$_0,std::allocator<CLMicroLocationBlueAtlasAlgorithms::learnBlueAtlasModel(ULDatabase &,CLMicroLocationFingerprintPool &,boost::uuids::uuid const&,std::vector<CLMicroLocationRecordingLabelsTable::Entry> &)::$_0>,BOOL ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<CLMicroLocationBlueAtlasAlgorithms::learnBlueAtlasModel(ULDatabase &,CLMicroLocationFingerprintPool &,boost::uuids::uuid const&,std::vector<CLMicroLocationRecordingLabelsTable::Entry> &)::$_0,std::allocator<CLMicroLocationBlueAtlasAlgorithms::learnBlueAtlasModel(ULDatabase &,CLMicroLocationFingerprintPool &,boost::uuids::uuid const&,std::vector<CLMicroLocationRecordingLabelsTable::Entry> &)::$_0>,BOOL ()(void)>::target_type()
{
}

uint64_t *std::__tree<std::__value_type<unsigned long long,std::vector<float>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::vector<float>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::vector<float>>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(uint64_t **a1, unint64_t *a2, uint64_t a3, uint64_t **a4)
{
  uint64_t *v6;
  uint64_t **v7;
  unint64_t v8;
  uint64_t **v9;
  unint64_t v10;
  uint64_t *v11;
  uint64_t v12;

  v7 = a1 + 1;
  v6 = a1[1];
  if (v6)
  {
    v8 = *a2;
    while (1)
    {
      while (1)
      {
        v9 = (uint64_t **)v6;
        v10 = v6[4];
        if (v8 >= v10)
          break;
        v6 = *v9;
        v7 = v9;
        if (!*v9)
          goto LABEL_10;
      }
      if (v10 >= v8)
        break;
      v6 = v9[1];
      if (!v6)
      {
        v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v9 = a1 + 1;
LABEL_10:
    v11 = (uint64_t *)operator new(0x40uLL);
    v12 = **a4;
    v11[6] = 0;
    v11[7] = 0;
    v11[4] = v12;
    v11[5] = 0;
    std::__tree<CLMicroLocationRecordingCompletionMetaInformation::RecordingError>::__insert_node_at(a1, (uint64_t)v9, v7, v11);
    return v11;
  }
  return (uint64_t *)v9;
}

double *std::__introsort<std::_ClassicAlgPolicy,CLMicroLocationBlueAtlasAlgorithms::learnBlueAtlasModel(ULDatabase &,CLMicroLocationFingerprintPool &,boost::uuids::uuid const&,std::vector<CLMicroLocationRecordingLabelsTable::Entry> &)::$_1 &,std::pair<unsigned long long,double> *,false>(double *result, double *a2, uint64_t a3, char a4)
{
  double *v7;
  double *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  double *v12;
  double v13;
  uint64_t v14;
  double v15;
  uint64_t v16;
  double v17;
  double v18;
  double *v19;
  double *v20;
  double *v21;
  double v22;
  double *v23;
  double v24;
  double *v25;
  double v26;
  uint64_t v27;
  double v28;
  double v29;
  BOOL v30;
  double *v31;
  double v32;
  double *v33;
  double v34;
  double *v35;
  double *v36;
  double v37;
  double v38;
  double v39;
  uint64_t v40;
  double v41;
  double v42;
  double v43;
  double v44;
  double v45;
  double v46;
  double v47;
  uint64_t v48;
  double v49;
  double v50;
  uint64_t v51;
  uint64_t v52;
  double v53;
  uint64_t v54;
  double v55;
  double v56;
  double *v57;
  BOOL v59;
  uint64_t v60;
  double *v61;
  double v62;
  double v63;
  double v64;
  uint64_t v65;
  double *v66;
  uint64_t v67;
  int64_t v68;
  int64_t v69;
  int64_t v70;
  uint64_t v71;
  double *v72;
  double v73;
  double v74;
  double *v75;
  uint64_t v76;
  double *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  double v82;
  double v83;
  double *v84;
  double *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  double v90;
  uint64_t v91;
  double *v92;
  double *v94;
  double v95;
  double v96;
  double v97;
  double *v98;
  double *v99;
  uint64_t v100;

  v7 = result;
LABEL_2:
  v8 = v7;
  while (2)
  {
    v7 = v8;
    v9 = (char *)a2 - (char *)v8;
    v10 = ((char *)a2 - (char *)v8) >> 4;
    switch(v10)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v43 = *(a2 - 1);
        v44 = v8[1];
        if (v43 > v44)
        {
          v45 = *v8;
          *v8 = *(a2 - 2);
          *(a2 - 2) = v45;
          v8[1] = v43;
          *(a2 - 1) = v44;
        }
        return result;
      case 3uLL:
        return std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,CLMicroLocationBlueAtlasAlgorithms::learnBlueAtlasModel(ULDatabase &,CLMicroLocationFingerprintPool &,boost::uuids::uuid const&,std::vector<CLMicroLocationRecordingLabelsTable::Entry> &)::$_1 &,std::pair<unsigned long long,double> *>(v8, v8 + 2, a2 - 2);
      case 4uLL:
        return std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,CLMicroLocationBlueAtlasAlgorithms::learnBlueAtlasModel(ULDatabase &,CLMicroLocationFingerprintPool &,boost::uuids::uuid const&,std::vector<CLMicroLocationRecordingLabelsTable::Entry> &)::$_1 &,std::pair<unsigned long long,double> *>(v8, v8 + 2, v8 + 4, a2 - 2);
      case 5uLL:
        result = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,CLMicroLocationBlueAtlasAlgorithms::learnBlueAtlasModel(ULDatabase &,CLMicroLocationFingerprintPool &,boost::uuids::uuid const&,std::vector<CLMicroLocationRecordingLabelsTable::Entry> &)::$_1 &,std::pair<unsigned long long,double> *>(v8, v8 + 2, v8 + 4, v8 + 6);
        v46 = *(a2 - 1);
        v47 = v8[7];
        if (v46 > v47)
        {
          v48 = *((_QWORD *)v8 + 6);
          v8[6] = *(a2 - 2);
          *((_QWORD *)a2 - 2) = v48;
          v8[7] = v46;
          *(a2 - 1) = v47;
          v49 = v8[7];
          v50 = v8[5];
          if (v49 > v50)
          {
            v51 = *((_QWORD *)v8 + 4);
            v52 = *((_QWORD *)v8 + 6);
            *((_QWORD *)v8 + 4) = v52;
            *((_QWORD *)v8 + 6) = v51;
            v8[5] = v49;
            v8[7] = v50;
            v53 = v8[3];
            if (v49 > v53)
            {
              v54 = *((_QWORD *)v8 + 2);
              *((_QWORD *)v8 + 2) = v52;
              *((_QWORD *)v8 + 4) = v54;
              v8[3] = v49;
              v8[5] = v53;
              v55 = v8[1];
              if (v49 > v55)
              {
                v56 = *v8;
                *(_QWORD *)v8 = v52;
                v8[2] = v56;
                v8[1] = v49;
                v8[3] = v55;
              }
            }
          }
        }
        return result;
      default:
        if (v9 <= 383)
        {
          v57 = v8 + 2;
          v59 = v8 == a2 || v57 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v59)
            {
              v60 = 0;
              v61 = v8;
              do
              {
                v62 = v61[3];
                v63 = v61[1];
                v61 = v57;
                if (v62 > v63)
                {
                  v64 = *v57;
                  v65 = v60;
                  while (1)
                  {
                    v66 = (double *)((char *)v8 + v65);
                    v66[2] = *(double *)((char *)v8 + v65);
                    v66[3] = *(double *)((char *)v8 + v65 + 8);
                    if (!v65)
                      break;
                    v65 -= 16;
                    if (v62 <= *(v66 - 1))
                    {
                      v67 = (uint64_t)v8 + v65 + 16;
                      goto LABEL_80;
                    }
                  }
                  v67 = (uint64_t)v8;
LABEL_80:
                  *(double *)v67 = v64;
                  *(double *)(v67 + 8) = v62;
                }
                v57 = v61 + 2;
                v60 += 16;
              }
              while (v61 + 2 != a2);
            }
          }
          else if (!v59)
          {
            v94 = v8 + 3;
            do
            {
              v95 = v7[3];
              v96 = v7[1];
              v7 = v57;
              if (v95 > v96)
              {
                v97 = *v57;
                v98 = v94;
                do
                {
                  v99 = v98;
                  *(v98 - 1) = *(v98 - 3);
                  v100 = *((_QWORD *)v98 - 2);
                  v98 -= 2;
                  *(_QWORD *)v99 = v100;
                }
                while (v95 > *(v99 - 4));
                *(v98 - 1) = v97;
                *v98 = v95;
              }
              v57 = v7 + 2;
              v94 += 2;
            }
            while (v7 + 2 != a2);
          }
          return result;
        }
        if (!a3)
        {
          if (v8 == a2)
            return result;
          v68 = (v10 - 2) >> 1;
          v69 = v68;
          do
          {
            v70 = v69;
            if (v68 >= v69)
            {
              v71 = (2 * v69) | 1;
              v72 = &v8[2 * v71];
              if (2 * v70 + 2 < (uint64_t)v10 && v72[1] > v72[3])
              {
                v72 += 2;
                v71 = 2 * v70 + 2;
              }
              v73 = v72[1];
              v74 = v8[2 * v70 + 1];
              if (v73 <= v74)
              {
                v75 = &v8[2 * v70];
                v76 = *(_QWORD *)v75;
                do
                {
                  v77 = v75;
                  v75 = v72;
                  *v77 = *v72;
                  v77[1] = v73;
                  if (v68 < v71)
                    break;
                  v78 = 2 * v71;
                  v71 = (2 * v71) | 1;
                  v72 = &v8[2 * v71];
                  v79 = v78 + 2;
                  if (v79 < (uint64_t)v10 && v72[1] > v72[3])
                  {
                    v72 += 2;
                    v71 = v79;
                  }
                  v73 = v72[1];
                }
                while (v73 <= v74);
                *(_QWORD *)v75 = v76;
                v75[1] = v74;
              }
            }
            v69 = v70 - 1;
          }
          while (v70);
          v80 = (unint64_t)v9 >> 4;
          while (2)
          {
            v81 = 0;
            v82 = *v8;
            v83 = v8[1];
            v84 = v8;
            do
            {
              v85 = v84;
              v84 += 2 * v81 + 2;
              v86 = 2 * v81;
              v81 = (2 * v81) | 1;
              v87 = v86 + 2;
              if (v87 < v80 && v84[1] > v84[3])
              {
                v84 += 2;
                v81 = v87;
              }
              *v85 = *v84;
              v85[1] = v84[1];
            }
            while (v81 <= (uint64_t)((unint64_t)(v80 - 2) >> 1));
            if (v84 != a2 - 2)
            {
              *v84 = *(a2 - 2);
              v84[1] = *(a2 - 1);
              *(a2 - 2) = v82;
              *(a2 - 1) = v83;
              v88 = (char *)v84 - (char *)v8 + 16;
              if (v88 >= 17)
              {
                v89 = (((unint64_t)v88 >> 4) - 2) >> 1;
                v90 = v8[2 * v89 + 1];
                v83 = v84[1];
                if (v90 > v83)
                {
                  v91 = *(_QWORD *)v84;
                  do
                  {
                    v92 = v84;
                    v84 = &v8[2 * v89];
                    *v92 = *v84;
                    v92[1] = v90;
                    if (!v89)
                      break;
                    v89 = (v89 - 1) >> 1;
                    v90 = v8[2 * v89 + 1];
                  }
                  while (v90 > v83);
                  *(_QWORD *)v84 = v91;
LABEL_112:
                  v84[1] = v83;
                }
              }
              a2 -= 2;
              if (v80-- <= 2)
                return result;
              continue;
            }
            break;
          }
          *v84 = v82;
          goto LABEL_112;
        }
        v11 = v10 >> 1;
        v12 = &v8[2 * (v10 >> 1)];
        if ((unint64_t)v9 < 0x801)
        {
          result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,CLMicroLocationBlueAtlasAlgorithms::learnBlueAtlasModel(ULDatabase &,CLMicroLocationFingerprintPool &,boost::uuids::uuid const&,std::vector<CLMicroLocationRecordingLabelsTable::Entry> &)::$_1 &,std::pair<unsigned long long,double> *>(&v7[2 * (v10 >> 1)], v7, a2 - 2);
        }
        else
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,CLMicroLocationBlueAtlasAlgorithms::learnBlueAtlasModel(ULDatabase &,CLMicroLocationFingerprintPool &,boost::uuids::uuid const&,std::vector<CLMicroLocationRecordingLabelsTable::Entry> &)::$_1 &,std::pair<unsigned long long,double> *>(v7, &v7[2 * (v10 >> 1)], a2 - 2);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,CLMicroLocationBlueAtlasAlgorithms::learnBlueAtlasModel(ULDatabase &,CLMicroLocationFingerprintPool &,boost::uuids::uuid const&,std::vector<CLMicroLocationRecordingLabelsTable::Entry> &)::$_1 &,std::pair<unsigned long long,double> *>(v7 + 2, v12 - 2, a2 - 4);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,CLMicroLocationBlueAtlasAlgorithms::learnBlueAtlasModel(ULDatabase &,CLMicroLocationFingerprintPool &,boost::uuids::uuid const&,std::vector<CLMicroLocationRecordingLabelsTable::Entry> &)::$_1 &,std::pair<unsigned long long,double> *>(v7 + 4, &v7[2 * v11 + 2], a2 - 6);
          result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,CLMicroLocationBlueAtlasAlgorithms::learnBlueAtlasModel(ULDatabase &,CLMicroLocationFingerprintPool &,boost::uuids::uuid const&,std::vector<CLMicroLocationRecordingLabelsTable::Entry> &)::$_1 &,std::pair<unsigned long long,double> *>(v12 - 2, v12, &v7[2 * v11 + 2]);
          v13 = *v7;
          *v7 = *v12;
          *v12 = v13;
          v14 = *((_QWORD *)v7 + 1);
          v7[1] = v12[1];
          *((_QWORD *)v12 + 1) = v14;
        }
        --a3;
        if ((a4 & 1) == 0)
        {
          v15 = v7[1];
          if (*(v7 - 1) > v15)
            goto LABEL_12;
          if (v15 <= *(a2 - 1))
          {
            v33 = v7 + 2;
            do
            {
              v8 = v33;
              if (v33 >= a2)
                break;
              v34 = v33[1];
              v33 += 2;
            }
            while (v15 <= v34);
          }
          else
          {
            v31 = v7;
            do
            {
              v8 = v31 + 2;
              v32 = v31[3];
              v31 += 2;
            }
            while (v15 <= v32);
          }
          v35 = a2;
          if (v8 < a2)
          {
            v36 = a2;
            do
            {
              v35 = v36 - 2;
              v37 = *(v36 - 1);
              v36 -= 2;
            }
            while (v15 > v37);
          }
          v38 = *v7;
          while (v8 < v35)
          {
            v39 = *v8;
            *v8 = *v35;
            *v35 = v39;
            v40 = *((_QWORD *)v8 + 1);
            v8[1] = v35[1];
            *((_QWORD *)v35 + 1) = v40;
            do
            {
              v41 = v8[3];
              v8 += 2;
            }
            while (v15 <= v41);
            do
            {
              v42 = *(v35 - 1);
              v35 -= 2;
            }
            while (v15 > v42);
          }
          if (v8 - 2 != v7)
          {
            *v7 = *(v8 - 2);
            v7[1] = *(v8 - 1);
          }
          a4 = 0;
          *(v8 - 2) = v38;
          *(v8 - 1) = v15;
          continue;
        }
        v15 = v7[1];
LABEL_12:
        v16 = 0;
        v17 = *v7;
        do
        {
          v18 = v7[v16 + 3];
          v16 += 2;
        }
        while (v18 > v15);
        v19 = &v7[v16];
        v20 = a2;
        if (v16 == 2)
        {
          v23 = a2;
          while (v19 < v23)
          {
            v21 = v23 - 2;
            v24 = *(v23 - 1);
            v23 -= 2;
            if (v24 > v15)
              goto LABEL_22;
          }
          v21 = v23;
        }
        else
        {
          do
          {
            v21 = v20 - 2;
            v22 = *(v20 - 1);
            v20 -= 2;
          }
          while (v22 <= v15);
        }
LABEL_22:
        v8 = v19;
        if (v19 < v21)
        {
          v25 = v21;
          do
          {
            v26 = *v8;
            *v8 = *v25;
            *v25 = v26;
            v27 = *((_QWORD *)v8 + 1);
            v8[1] = v25[1];
            *((_QWORD *)v25 + 1) = v27;
            do
            {
              v28 = v8[3];
              v8 += 2;
            }
            while (v28 > v15);
            do
            {
              v29 = *(v25 - 1);
              v25 -= 2;
            }
            while (v29 <= v15);
          }
          while (v8 < v25);
        }
        if (v8 - 2 != v7)
        {
          *v7 = *(v8 - 2);
          v7[1] = *(v8 - 1);
        }
        *(v8 - 2) = v17;
        *(v8 - 1) = v15;
        if (v19 < v21)
        {
LABEL_33:
          result = (double *)std::__introsort<std::_ClassicAlgPolicy,CLMicroLocationBlueAtlasAlgorithms::learnBlueAtlasModel(ULDatabase &,CLMicroLocationFingerprintPool &,boost::uuids::uuid const&,std::vector<CLMicroLocationRecordingLabelsTable::Entry> &)::$_1 &,std::pair<unsigned long long,double> *,false>(v7, v8 - 2, a3, a4 & 1);
          a4 = 0;
          continue;
        }
        v30 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,CLMicroLocationBlueAtlasAlgorithms::learnBlueAtlasModel(ULDatabase &,CLMicroLocationFingerprintPool &,boost::uuids::uuid const&,std::vector<CLMicroLocationRecordingLabelsTable::Entry> &)::$_1 &,std::pair<unsigned long long,double> *>(v7, v8 - 2);
        result = (double *)std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,CLMicroLocationBlueAtlasAlgorithms::learnBlueAtlasModel(ULDatabase &,CLMicroLocationFingerprintPool &,boost::uuids::uuid const&,std::vector<CLMicroLocationRecordingLabelsTable::Entry> &)::$_1 &,std::pair<unsigned long long,double> *>(v8, a2);
        if (!(_DWORD)result)
        {
          if (v30)
            continue;
          goto LABEL_33;
        }
        a2 = v8 - 2;
        if (!v30)
          goto LABEL_2;
        return result;
    }
  }
}

double *std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,CLMicroLocationBlueAtlasAlgorithms::learnBlueAtlasModel(ULDatabase &,CLMicroLocationFingerprintPool &,boost::uuids::uuid const&,std::vector<CLMicroLocationRecordingLabelsTable::Entry> &)::$_1 &,std::pair<unsigned long long,double> *>(double *result, double *a2, double *a3)
{
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;

  v3 = a2[1];
  v4 = result[1];
  v5 = a3[1];
  if (v3 <= v4)
  {
    if (v5 > v3)
    {
      v7 = *a2;
      *a2 = *a3;
      *a3 = v7;
      a2[1] = v5;
      a3[1] = v3;
      v8 = a2[1];
      v9 = result[1];
      if (v8 > v9)
      {
        v10 = *result;
        *result = *a2;
        *a2 = v10;
        result[1] = v8;
        a2[1] = v9;
      }
    }
  }
  else
  {
    v6 = *result;
    if (v5 <= v3)
    {
      *result = *a2;
      *a2 = v6;
      result[1] = v3;
      a2[1] = v4;
      v11 = a3[1];
      if (v11 <= v4)
        return result;
      *a2 = *a3;
      *a3 = v6;
      a2[1] = v11;
    }
    else
    {
      *result = *a3;
      *a3 = v6;
      result[1] = v5;
    }
    a3[1] = v4;
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,CLMicroLocationBlueAtlasAlgorithms::learnBlueAtlasModel(ULDatabase &,CLMicroLocationFingerprintPool &,boost::uuids::uuid const&,std::vector<CLMicroLocationRecordingLabelsTable::Entry> &)::$_1 &,std::pair<unsigned long long,double> *>(double *a1, double *a2)
{
  uint64_t v4;
  _BOOL8 result;
  double v6;
  double v7;
  double v8;
  double *v9;
  double *v10;
  uint64_t v11;
  int v12;
  double v13;
  uint64_t v14;
  uint64_t v15;
  double *v16;
  uint64_t v17;
  double v18;
  double v19;
  uint64_t v20;
  double v21;
  double v22;
  uint64_t v23;
  uint64_t v24;
  double v25;
  uint64_t v26;
  double v27;
  double v28;

  v4 = ((char *)a2 - (char *)a1) >> 4;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = *(a2 - 1);
      v7 = a1[1];
      if (v6 > v7)
      {
        v8 = *a1;
        *a1 = *(a2 - 2);
        *(a2 - 2) = v8;
        a1[1] = v6;
        *(a2 - 1) = v7;
      }
      return result;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,CLMicroLocationBlueAtlasAlgorithms::learnBlueAtlasModel(ULDatabase &,CLMicroLocationFingerprintPool &,boost::uuids::uuid const&,std::vector<CLMicroLocationRecordingLabelsTable::Entry> &)::$_1 &,std::pair<unsigned long long,double> *>(a1, a1 + 2, a2 - 2);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,CLMicroLocationBlueAtlasAlgorithms::learnBlueAtlasModel(ULDatabase &,CLMicroLocationFingerprintPool &,boost::uuids::uuid const&,std::vector<CLMicroLocationRecordingLabelsTable::Entry> &)::$_1 &,std::pair<unsigned long long,double> *>(a1, a1 + 2, a1 + 4, a2 - 2);
      return 1;
    case 5:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,CLMicroLocationBlueAtlasAlgorithms::learnBlueAtlasModel(ULDatabase &,CLMicroLocationFingerprintPool &,boost::uuids::uuid const&,std::vector<CLMicroLocationRecordingLabelsTable::Entry> &)::$_1 &,std::pair<unsigned long long,double> *>(a1, a1 + 2, a1 + 4, a1 + 6);
      v18 = *(a2 - 1);
      v19 = a1[7];
      if (v18 > v19)
      {
        v20 = *((_QWORD *)a1 + 6);
        a1[6] = *(a2 - 2);
        *((_QWORD *)a2 - 2) = v20;
        a1[7] = v18;
        *(a2 - 1) = v19;
        v21 = a1[7];
        v22 = a1[5];
        if (v21 > v22)
        {
          v23 = *((_QWORD *)a1 + 4);
          v24 = *((_QWORD *)a1 + 6);
          *((_QWORD *)a1 + 4) = v24;
          *((_QWORD *)a1 + 6) = v23;
          a1[5] = v21;
          a1[7] = v22;
          v25 = a1[3];
          if (v21 > v25)
          {
            v26 = *((_QWORD *)a1 + 2);
            *((_QWORD *)a1 + 2) = v24;
            *((_QWORD *)a1 + 4) = v26;
            a1[3] = v21;
            a1[5] = v25;
            v27 = a1[1];
            if (v21 > v27)
            {
              v28 = *a1;
              *(_QWORD *)a1 = v24;
              a1[2] = v28;
              a1[1] = v21;
              a1[3] = v27;
            }
          }
        }
      }
      return 1;
    default:
      v9 = a1 + 4;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,CLMicroLocationBlueAtlasAlgorithms::learnBlueAtlasModel(ULDatabase &,CLMicroLocationFingerprintPool &,boost::uuids::uuid const&,std::vector<CLMicroLocationRecordingLabelsTable::Entry> &)::$_1 &,std::pair<unsigned long long,double> *>(a1, a1 + 2, a1 + 4);
      v10 = a1 + 6;
      if (a1 + 6 == a2)
        return 1;
      v11 = 0;
      v12 = 0;
      break;
  }
  while (1)
  {
    v13 = v10[1];
    if (v13 > v9[1])
    {
      v14 = *(_QWORD *)v10;
      v15 = v11;
      while (1)
      {
        v16 = (double *)((char *)a1 + v15);
        v16[6] = *(double *)((char *)a1 + v15 + 32);
        v16[7] = *(double *)((char *)a1 + v15 + 40);
        if (v15 == -32)
          break;
        v15 -= 16;
        if (v13 <= v16[3])
        {
          v17 = (uint64_t)a1 + v15 + 48;
          goto LABEL_13;
        }
      }
      v17 = (uint64_t)a1;
LABEL_13:
      *(_QWORD *)v17 = v14;
      *(double *)(v17 + 8) = v13;
      if (++v12 == 8)
        return v10 + 2 == a2;
    }
    v9 = v10;
    v11 += 16;
    v10 += 2;
    if (v10 == a2)
      return 1;
  }
}

double *std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,CLMicroLocationBlueAtlasAlgorithms::learnBlueAtlasModel(ULDatabase &,CLMicroLocationFingerprintPool &,boost::uuids::uuid const&,std::vector<CLMicroLocationRecordingLabelsTable::Entry> &)::$_1 &,std::pair<unsigned long long,double> *>(double *a1, double *a2, double *a3, double *a4)
{
  double *result;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;

  result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,CLMicroLocationBlueAtlasAlgorithms::learnBlueAtlasModel(ULDatabase &,CLMicroLocationFingerprintPool &,boost::uuids::uuid const&,std::vector<CLMicroLocationRecordingLabelsTable::Entry> &)::$_1 &,std::pair<unsigned long long,double> *>(a1, a2, a3);
  v9 = a4[1];
  v10 = a3[1];
  if (v9 > v10)
  {
    v11 = *a3;
    *a3 = *a4;
    *a4 = v11;
    a3[1] = v9;
    a4[1] = v10;
    v12 = a3[1];
    v13 = a2[1];
    if (v12 > v13)
    {
      v14 = *a2;
      *a2 = *a3;
      *a3 = v14;
      a2[1] = v12;
      a3[1] = v13;
      v15 = a2[1];
      v16 = a1[1];
      if (v15 > v16)
      {
        v17 = *a1;
        *a1 = *a2;
        *a2 = v17;
        a1[1] = v15;
        a2[1] = v16;
      }
    }
  }
  return result;
}

uint64_t *std::__tree<std::__value_type<std::variant<unsigned long long,boost::uuids::uuid,std::string>,unsigned long>,std::__map_value_compare<std::variant<unsigned long long,boost::uuids::uuid,std::string>,std::__value_type<std::variant<unsigned long long,boost::uuids::uuid,std::string>,unsigned long>,std::less<std::variant<unsigned long long,boost::uuids::uuid,std::string>>,true>,std::allocator<std::__value_type<std::variant<unsigned long long,boost::uuids::uuid,std::string>,unsigned long>>>::__emplace_unique_key_args<std::variant<unsigned long long,boost::uuids::uuid,std::string>,std::piecewise_construct_t const&,std::tuple<std::variant<unsigned long long,boost::uuids::uuid,std::string> const&>,std::tuple<>>(uint64_t **a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t **v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v10[3];
  uint64_t v11;

  v6 = (uint64_t **)std::__tree<std::variant<unsigned long long,boost::uuids::uuid,std::string>>::__find_equal<std::variant<unsigned long long,boost::uuids::uuid,std::string>>((uint64_t)a1, &v11, a2);
  v7 = *v6;
  if (!*v6)
  {
    v8 = v6;
    std::__tree<std::__value_type<std::variant<unsigned long long,boost::uuids::uuid,std::string>,unsigned long>,std::__map_value_compare<std::variant<unsigned long long,boost::uuids::uuid,std::string>,std::__value_type<std::variant<unsigned long long,boost::uuids::uuid,std::string>,unsigned long>,std::less<std::variant<unsigned long long,boost::uuids::uuid,std::string>>,true>,std::allocator<std::__value_type<std::variant<unsigned long long,boost::uuids::uuid,std::string>,unsigned long>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::variant<unsigned long long,boost::uuids::uuid,std::string> const&>,std::tuple<>>((uint64_t)a1, a4, (uint64_t)v10);
    std::__tree<CLMicroLocationRecordingCompletionMetaInformation::RecordingError>::__insert_node_at(a1, v11, v8, v10[0]);
    v7 = v10[0];
    v10[0] = 0;
    std::unique_ptr<std::__hash_node<CLMicroLocationFingerprint::Measurement,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<CLMicroLocationFingerprint::Measurement,void *>>>>::reset[abi:ne180100]((uint64_t)v10, 0);
  }
  return v7;
}

uint64_t std::__tree<std::__value_type<std::variant<unsigned long long,boost::uuids::uuid,std::string>,unsigned long>,std::__map_value_compare<std::variant<unsigned long long,boost::uuids::uuid,std::string>,std::__value_type<std::variant<unsigned long long,boost::uuids::uuid,std::string>,unsigned long>,std::less<std::variant<unsigned long long,boost::uuids::uuid,std::string>>,true>,std::allocator<std::__value_type<std::variant<unsigned long long,boost::uuids::uuid,std::string>,unsigned long>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::variant<unsigned long long,boost::uuids::uuid,std::string> const&>,std::tuple<>>@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5;
  _QWORD *v6;
  uint64_t result;

  v5 = a1 + 8;
  v6 = operator new(0x48uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  result = std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<unsigned long long,boost::uuids::uuid,std::string>,(std::__variant_detail::_Trait)1>::__copy_constructor((uint64_t)(v6 + 4), *a2);
  v6[8] = 0;
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_241B50628(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__hash_node<CLMicroLocationFingerprint::Measurement,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<CLMicroLocationFingerprint::Measurement,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void sub_241B50700(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

uint64_t ULDBUtils::insertEntries<CLMiLoOdometryTable,ULOdometryMO>(void *a1, uint64_t a2)
{
  id v3;
  void *v4;
  id v5;
  uint64_t v6;
  _QWORD v8[4];
  id v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  char v15;

  v3 = a1;
  v12 = 0;
  v13 = &v12;
  v14 = 0x2020000000;
  v15 = 0;
  objc_msgSend(v3, "managedObjectContext");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v8[0] = MEMORY[0x24BDAC760];
  v8[1] = 3221225472;
  v8[2] = ___ZN9ULDBUtils13insertEntriesI19CLMiLoOdometryTable12ULOdometryMOEEbP7ULStoreRKNSt3__16vectorINT_5EntryENS5_9allocatorIS8_EEEE_block_invoke;
  v8[3] = &unk_2511D22D0;
  v11 = a2;
  v5 = v3;
  v9 = v5;
  v10 = &v12;
  objc_msgSend(v4, "performBlockAndWait:", v8);

  v6 = *((unsigned __int8 *)v13 + 24);
  _Block_object_dispose(&v12, 8);

  return v6;
}

void sub_241B50824(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, uint64_t a8, uint64_t a9, ...)
{
  void *v9;
  void *v10;
  va_list va;

  va_start(va, a9);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void ULDBUtils::fetchEntries<CLMiLoOdometryTable,ULOdometryMO>(void *a1@<X0>, void *a2@<X1>, void *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  id v9;
  id v10;
  id v11;
  void *v12;
  id v13;
  id v14;
  id v15;
  uint64_t *v16;
  _QWORD v17[4];
  id v18;
  id v19;
  id v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  __n128 (*v26)(__n128 *, __n128 *);
  void (*v27)(uint64_t);
  void *v28;
  _QWORD v29[3];
  void **v30;

  v9 = a1;
  v10 = a2;
  v11 = a3;
  v23 = 0;
  v24 = &v23;
  v25 = 0x4812000000;
  v26 = __Block_byref_object_copy__20;
  v27 = __Block_byref_object_dispose__20;
  v28 = &unk_241BEBD1D;
  memset(v29, 0, sizeof(v29));
  objc_msgSend(v9, "managedObjectContext");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  v17[0] = MEMORY[0x24BDAC760];
  v17[1] = 3221225472;
  v17[2] = ___ZN9ULDBUtils12fetchEntriesI19CLMiLoOdometryTable12ULOdometryMOEENSt3__16vectorINT_5EntryENS3_9allocatorIS6_EEEEP7ULStoreP7NSArrayIP11NSPredicateEPSC_IP16NSSortDescriptorEm_block_invoke;
  v17[3] = &unk_2511D22F8;
  v13 = v10;
  v18 = v13;
  v14 = v11;
  v19 = v14;
  v22 = a4;
  v15 = v9;
  v20 = v15;
  v21 = &v23;
  objc_msgSend(v12, "performBlockAndWait:", v17);

  v16 = v24;
  *(_QWORD *)(a5 + 8) = 0;
  *(_QWORD *)(a5 + 16) = 0;
  *(_QWORD *)a5 = 0;
  std::vector<CLMiLoOdometryTable::Entry>::__init_with_size[abi:ne180100]<CLMiLoOdometryTable::Entry*,CLMiLoOdometryTable::Entry*>((char *)a5, (__int128 *)v16[6], (__int128 *)v16[7], (v16[7] - v16[6]) >> 5);

  _Block_object_dispose(&v23, 8);
  v30 = (void **)v29;
  std::vector<CLMiLoOdometryTable::Entry>::__destroy_vector::operator()[abi:ne180100](&v30);

}

void sub_241B509D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, void *a7, void *a8, uint64_t a9, uint64_t a10, ...)
{
  void *v10;
  void *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  va_list va;

  va_start(va, a10);

  _Block_object_dispose(va, 8);
  *(_QWORD *)(v14 - 96) = v13;
  std::vector<CLMiLoOdometryTable::Entry>::__destroy_vector::operator()[abi:ne180100]((void ***)(v14 - 96));

  _Unwind_Resume(a1);
}

void ULDBUtils::fetchAllWithLimit<CLMiLoOdometryTable,ULOdometryMO>(void *a1@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  id v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  _QWORD v10[2];

  v10[1] = *MEMORY[0x24BDAC8D0];
  v5 = a1;
  v6 = (void *)MEMORY[0x24BDD17C0];
  objc_msgSend((id)objc_opt_class(), "defaultSortProperty");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "sortDescriptorWithKey:ascending:", v7, 0);
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  v10[0] = v8;
  objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", v10, 1);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  ULDBUtils::fetchEntries<CLMiLoOdometryTable,ULOdometryMO>(v5, 0, v9, a2, a3);

}

void sub_241B50B38(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_241B50CE0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void ___ZN9ULDBUtils13insertEntriesI19CLMiLoOdometryTable12ULOdometryMOEEbP7ULStoreRKNSt3__16vectorINT_5EntryENS5_9allocatorIS8_EEEE_block_invoke(uint64_t a1)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;
  NSObject *v7;
  void *v8;
  void *v9;
  NSObject *v10;
  void *v11;
  void *v12;
  void *v13;
  int v14;
  int v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  void *v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  v2 = *(uint64_t **)(a1 + 48);
  v3 = *v2;
  v4 = v2[1];
  if (*v2 == v4)
  {
LABEL_4:
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = objc_msgSend(*(id *)(a1 + 32), "commitChangesToStore");
    objc_msgSend(*(id *)(a1 + 32), "deleteOldestRecordsIfFull");
  }
  else
  {
    while (1)
    {
      objc_msgSend(*(id *)(a1 + 32), "managedObjectContext");
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      +[ULOdometryMO createFromEntry:inManagedObjectContext:](ULOdometryMO, "createFromEntry:inManagedObjectContext:", v3, v5);
      v6 = (void *)objc_claimAutoreleasedReturnValue();

      if (!v6)
        break;

      v3 += 32;
      if (v3 == v4)
        goto LABEL_4;
    }
    if (onceToken_MicroLocation_Default != -1)
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_108);
    v7 = (id)logObject_MicroLocation_Default;
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      +[ULOdometryMO entity](ULOdometryMO, "entity");
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v8, "name");
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      v14 = 68289283;
      v15 = 0;
      v16 = 2082;
      v17 = "";
      v18 = 2113;
      v19 = v9;
      _os_log_impl(&dword_2419D9000, v7, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"Failed to create entry from MO\", \"MO\":%{private, location:escape_only}@}", (uint8_t *)&v14, 0x1Cu);

    }
    if (onceToken_MicroLocation_Default != -1)
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_108);
    v10 = (id)logObject_MicroLocation_Default;
    if (os_signpost_enabled(v10))
    {
      +[ULOdometryMO entity](ULOdometryMO, "entity");
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v11, "name");
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      v14 = 68289283;
      v15 = 0;
      v16 = 2082;
      v17 = "";
      v18 = 2113;
      v19 = v12;
      _os_signpost_emit_with_name_impl(&dword_2419D9000, v10, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Failed to create entry from MO", "{\"msg%{public}.0s\":\"Failed to create entry from MO\", \"MO\":%{private, location:escape_only}@}", (uint8_t *)&v14, 0x1Cu);

    }
    objc_msgSend(*(id *)(a1 + 32), "managedObjectContext");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v13, "reset");

  }
}

void sub_241B50FE4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void ___ZL45_CLLogObjectForCategory_MicroLocation_Defaultv_block_invoke_87()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.MicroLocation", "MicroLocation");
  v1 = (void *)logObject_MicroLocation_Default;
  logObject_MicroLocation_Default = (uint64_t)v0;

}

__n128 __Block_byref_object_copy__20(__n128 *a1, __n128 *a2)
{
  __n128 result;

  a1[3].n128_u64[0] = 0;
  a1[3].n128_u64[1] = 0;
  a1[4].n128_u64[0] = 0;
  result = a2[3];
  a1[3] = result;
  a1[4].n128_u64[0] = a2[4].n128_u64[0];
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = 0;
  a2[4].n128_u64[0] = 0;
  return result;
}

void __Block_byref_object_dispose__20(uint64_t a1)
{
  void **v1;

  v1 = (void **)(a1 + 48);
  std::vector<CLMiLoOdometryTable::Entry>::__destroy_vector::operator()[abi:ne180100](&v1);
}

void ___ZN9ULDBUtils12fetchEntriesI19CLMiLoOdometryTable12ULOdometryMOEENSt3__16vectorINT_5EntryENS3_9allocatorIS6_EEEEP7ULStoreP7NSArrayIP11NSPredicateEPSC_IP16NSSortDescriptorEm_block_invoke(uint64_t a1)
{
  void *v2;
  objc_class *v3;
  void *v4;
  void *v5;
  uint64_t v6;
  void *v7;
  __int128 v8;
  uint64_t v9;
  void **v10;

  v2 = *(void **)(a1 + 48);
  v3 = (objc_class *)objc_opt_class();
  NSStringFromClass(v3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "fetchManagedObjectsWithEntityName:byAndPredicates:sortDescriptors:andLimit:", v4, *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 64));
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  ULDBUtils::convertManagedObjectsToEntries<CLMiLoOdometryTable,ULOdometryMO>(v5, (uint64_t)&v8);
  v6 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
  std::vector<CLMiLoOdometryTable::Entry>::__vdeallocate((void **)(v6 + 48));
  *(_OWORD *)(v6 + 48) = v8;
  *(_QWORD *)(v6 + 64) = v9;
  v9 = 0;
  v8 = 0uLL;
  v10 = (void **)&v8;
  std::vector<CLMiLoOdometryTable::Entry>::__destroy_vector::operator()[abi:ne180100](&v10);
  objc_msgSend(*(id *)(a1 + 48), "managedObjectContext");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "reset");

}

void sub_241B5117C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void ULDBUtils::convertManagedObjectsToEntries<CLMiLoOdometryTable,ULOdometryMO>(void *a1@<X0>, uint64_t a2@<X8>)
{
  id v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  void *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char *v13;
  NSObject *v14;
  void *v15;
  void *v16;
  NSObject *v17;
  void *v18;
  void *v19;
  char v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  char *v29;
  unint64_t v30;
  char *v31;
  __int128 v32;
  uint64_t v33;
  int64x2_t v34;
  uint64_t v35;
  char *v36;
  char *i;
  id v38;
  id obj;
  __int128 v40;
  __int128 v41;
  char v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  uint8_t v47[128];
  uint8_t buf[8];
  _BYTE v49[24];
  uint64_t v50;
  uint64_t v51;

  v51 = *MEMORY[0x24BDAC8D0];
  v3 = a1;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  std::vector<CLMiLoOdometryTable::Entry>::reserve((char **)a2, objc_msgSend(v3, "count"));
  v45 = 0u;
  v46 = 0u;
  v43 = 0u;
  v44 = 0u;
  obj = v3;
  v4 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v43, v47, 16);
  if (!v4)
  {

    goto LABEL_44;
  }
  v38 = v3;
  v5 = 0;
  v6 = *(_QWORD *)v44;
  do
  {
    v7 = 0;
    do
    {
      if (*(_QWORD *)v44 != v6)
        objc_enumerationMutation(obj);
      v8 = *(id *)(*((_QWORD *)&v43 + 1) + 8 * v7);
      v9 = v8;
      if (v8)
      {
        objc_msgSend(v8, "convertToEntry", v38);
        if (v42)
        {
          v10 = *(_QWORD *)(a2 + 8);
          v11 = *(_QWORD *)(a2 + 16);
          if (v10 >= v11)
          {
            v21 = (uint64_t)(v10 - *(_QWORD *)a2) >> 5;
            v22 = v21 + 1;
            if ((unint64_t)(v21 + 1) >> 59)
              std::vector<CLMicroLocationProto::ConfidenceReason>::__throw_length_error[abi:ne180100]();
            v23 = v11 - *(_QWORD *)a2;
            if (v23 >> 4 > v22)
              v22 = v23 >> 4;
            if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFE0)
              v24 = 0x7FFFFFFFFFFFFFFLL;
            else
              v24 = v22;
            v50 = a2 + 16;
            v25 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CLMicroLocationResultInternal>>(a2 + 16, v24);
            v27 = &v25[32 * v21];
            *((_QWORD *)v27 + 2) = v41;
            *(_OWORD *)v27 = v40;
            v28 = *((_QWORD *)&v41 + 1);
            *((_QWORD *)&v41 + 1) = 0;
            *((_QWORD *)v27 + 3) = v28;
            v29 = *(char **)a2;
            v30 = *(_QWORD *)(a2 + 8);
            if (v30 == *(_QWORD *)a2)
            {
              v34 = vdupq_n_s64(v30);
              v31 = &v25[32 * v21];
            }
            else
            {
              v31 = &v25[32 * v21];
              do
              {
                v32 = *(_OWORD *)(v30 - 32);
                *((_QWORD *)v31 - 2) = *(_QWORD *)(v30 - 16);
                *((_OWORD *)v31 - 2) = v32;
                v33 = *(_QWORD *)(v30 - 8);
                *(_QWORD *)(v30 - 8) = 0;
                *((_QWORD *)v31 - 1) = v33;
                v31 -= 32;
                v30 -= 32;
              }
              while ((char *)v30 != v29);
              v34 = *(int64x2_t *)a2;
            }
            v13 = v27 + 32;
            *(_QWORD *)a2 = v31;
            *(_QWORD *)(a2 + 8) = v27 + 32;
            *(int64x2_t *)v49 = v34;
            v35 = *(_QWORD *)(a2 + 16);
            *(_QWORD *)(a2 + 16) = &v25[32 * v26];
            *(_QWORD *)&v49[16] = v35;
            *(_QWORD *)buf = v34.i64[0];
            std::__split_buffer<CLMiLoOdometryTable::Entry>::~__split_buffer((uint64_t)buf);
          }
          else
          {
            *(_QWORD *)(v10 + 16) = v41;
            *(_OWORD *)v10 = v40;
            v12 = *((_QWORD *)&v41 + 1);
            *((_QWORD *)&v41 + 1) = 0;
            *(_QWORD *)(v10 + 24) = v12;
            v13 = (char *)(v10 + 32);
          }
          v20 = 0;
          *(_QWORD *)(a2 + 8) = v13;
          goto LABEL_33;
        }
      }
      else
      {
        v42 = 0;
        v40 = 0u;
        v41 = 0u;
      }
      if (onceToken_MicroLocation_Default != -1)
        dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_108);
      v14 = (id)logObject_MicroLocation_Default;
      if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
      {
        objc_msgSend(v9, "entity");
        v15 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v15, "name");
        v16 = (void *)objc_claimAutoreleasedReturnValue();
        *(_QWORD *)buf = 68289283;
        *(_WORD *)v49 = 2082;
        *(_QWORD *)&v49[2] = "";
        *(_WORD *)&v49[10] = 2113;
        *(_QWORD *)&v49[12] = v16;
        _os_log_impl(&dword_2419D9000, v14, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"Failed to convert MO to entry\", \"MO\":%{private, location:escape_only}@}", buf, 0x1Cu);

      }
      if (onceToken_MicroLocation_Default != -1)
        dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_108);
      v17 = (id)logObject_MicroLocation_Default;
      if (os_signpost_enabled(v17))
      {
        objc_msgSend(v9, "entity");
        v18 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v18, "name");
        v19 = (void *)objc_claimAutoreleasedReturnValue();
        *(_QWORD *)buf = 68289283;
        *(_WORD *)v49 = 2082;
        *(_QWORD *)&v49[2] = "";
        *(_WORD *)&v49[10] = 2113;
        *(_QWORD *)&v49[12] = v19;
        _os_signpost_emit_with_name_impl(&dword_2419D9000, v17, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Failed to convert MO to entry", "{\"msg%{public}.0s\":\"Failed to convert MO to entry\", \"MO\":%{private, location:escape_only}@}", buf, 0x1Cu);

      }
      v20 = 1;
      v5 = 1;
LABEL_33:
      if (v42)

      if ((v20 & 1) != 0)
        goto LABEL_38;
      ++v7;
    }
    while (v7 != v4);
    v4 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v43, v47, 16);
  }
  while (v4);
LABEL_38:

  if ((v5 & 1) != 0)
  {
    v36 = *(char **)a2;
    for (i = *(char **)(a2 + 8); i != v36; i -= 32)

    *(_QWORD *)(a2 + 8) = v36;
  }
LABEL_44:

}

void sub_241B51610(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, ...)
{
  va_list va;

  va_start(va, a7);

  std::vector<CLMiLoOdometryTable::Entry>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<CLMiLoOdometryTable::Entry>::reserve(char **a1, unint64_t a2)
{
  uint64_t result;
  char *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  unint64_t v9;
  char *v10;
  __int128 v11;
  uint64_t v12;
  int64x2_t v13;
  char *v14;
  uint64_t v15;
  int64x2_t v16;
  char *v17;
  uint64_t v18;

  v4 = a1[2];
  result = (uint64_t)(a1 + 2);
  if (a2 > (v4 - *a1) >> 5)
  {
    if (a2 >> 59)
      std::vector<CLMicroLocationProto::ConfidenceReason>::__throw_length_error[abi:ne180100]();
    v5 = a1[1] - *a1;
    v18 = result;
    v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CLMicroLocationResultInternal>>(result, a2);
    v8 = *a1;
    v9 = (unint64_t)a1[1];
    if ((char *)v9 == *a1)
    {
      v13 = vdupq_n_s64(v9);
      v10 = &v6[v5];
    }
    else
    {
      v10 = &v6[v5];
      do
      {
        v11 = *(_OWORD *)(v9 - 32);
        *((_QWORD *)v10 - 2) = *(_QWORD *)(v9 - 16);
        *((_OWORD *)v10 - 2) = v11;
        v12 = *(_QWORD *)(v9 - 8);
        *(_QWORD *)(v9 - 8) = 0;
        *((_QWORD *)v10 - 1) = v12;
        v10 -= 32;
        v9 -= 32;
      }
      while ((char *)v9 != v8);
      v13 = *(int64x2_t *)a1;
    }
    *a1 = v10;
    a1[1] = &v6[v5];
    v16 = v13;
    v14 = a1[2];
    a1[2] = &v6[32 * v7];
    v17 = v14;
    v15 = v13.i64[0];
    return std::__split_buffer<CLMiLoOdometryTable::Entry>::~__split_buffer((uint64_t)&v15);
  }
  return result;
}

uint64_t std::__split_buffer<CLMiLoOdometryTable::Entry>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 32;

  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void std::vector<CLMiLoOdometryTable::Entry>::__vdeallocate(void **a1)
{
  id *v1;
  id *v3;
  void *v4;
  id *v5;

  v1 = (id *)*a1;
  if (*a1)
  {
    v3 = (id *)a1[1];
    v4 = *a1;
    if (v3 != v1)
    {
      do
      {
        v5 = v3 - 4;

        v3 = v5;
      }
      while (v5 != v1);
      v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

void sub_241B51E00(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_241B52174(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, _QWORD *a15, uint64_t a16, uint64_t a17, ...)
{
  _QWORD *v17;
  void *v18;
  uint64_t v20;
  va_list va;

  va_start(va, a17);
  if (a15 == v17)
  {
    v20 = 4;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v20 = 5;
    v17 = a15;
  }
  (*(void (**)(_QWORD *))(*v17 + 8 * v20))(v17);
LABEL_6:

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t ULSettings::get<ULSettings::EnableCloudBackup>()
{
  void *v0;
  void *v1;
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;

  +[ULDefaultsSingleton shared](ULDefaultsSingleton, "shared");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "defaultsDictionary");
  v1 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "ULEnableCloudBackup");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "objectForKey:", v2);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  if (v3 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
    v4 = objc_msgSend(v3, "BOOLValue");
  else
    v4 = objc_msgSend(MEMORY[0x24BDBD1C8], "BOOLValue");
  v5 = v4;

  return v5;
}

void sub_241B5230C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void CLMicroLocationProtobufHelper::createLoggedEvent<CLMicroLocationProto::CloudBackupExport>(_OWORD *a1@<X0>, int *a2@<X1>, uint64_t a3@<X8>, double a4@<D0>)
{
  const CLMicroLocationProto::CloudBackupExport *v8;
  _BYTE v9[304];

  CLMicroLocationProto::ReceivedEvent::ReceivedEvent((CLMicroLocationProto::ReceivedEvent *)v9);
  CLMicroLocationProtobufHelper::setSpecificLoggedEvent((CLMicroLocationProtobufHelper *)v9, (CLMicroLocationProto::ReceivedEvent *)a2, v8);
  CLMicroLocationLoggedEventsTable::Entry::Entry(a3, a1, a2[2], (CLMicroLocationProto::ReceivedEvent *)v9, a4);
  CLMicroLocationProto::ReceivedEvent::~ReceivedEvent((CLMicroLocationProto::ReceivedEvent *)v9);
}

void sub_241B523BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  CLMicroLocationProto::ReceivedEvent::~ReceivedEvent((CLMicroLocationProto::ReceivedEvent *)&a9);
  _Unwind_Resume(a1);
}

void sub_241B52480(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t __copy_helper_block_ea8_48c27_ZTSNSt3__18functionIFbvEEE(uint64_t a1, uint64_t a2)
{
  return std::__function::__value_func<double ()(CLMicroLocationFingerprint const&,CLMicroLocationFingerprint const&)>::__value_func[abi:ne180100](a1 + 48, a2 + 48);
}

_QWORD *__destroy_helper_block_ea8_48c27_ZTSNSt3__18functionIFbvEEE(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 48);
  result = *(_QWORD **)(a1 + 72);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void sub_241B52798(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  void *v13;
  va_list va;

  va_start(va, a13);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void CLMicroLocationProtobufHelper::createLoggedEvent<CLMicroLocationProto::CloudBackupImport>(_OWORD *a1@<X0>, int *a2@<X1>, uint64_t a3@<X8>, double a4@<D0>)
{
  const CLMicroLocationProto::CloudBackupImport *v8;
  _BYTE v9[304];

  CLMicroLocationProto::ReceivedEvent::ReceivedEvent((CLMicroLocationProto::ReceivedEvent *)v9);
  CLMicroLocationProtobufHelper::setSpecificLoggedEvent((CLMicroLocationProtobufHelper *)v9, (CLMicroLocationProto::ReceivedEvent *)a2, v8);
  CLMicroLocationLoggedEventsTable::Entry::Entry(a3, a1, a2[2], (CLMicroLocationProto::ReceivedEvent *)v9, a4);
  CLMicroLocationProto::ReceivedEvent::~ReceivedEvent((CLMicroLocationProto::ReceivedEvent *)v9);
}

void sub_241B5286C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  CLMicroLocationProto::ReceivedEvent::~ReceivedEvent((CLMicroLocationProto::ReceivedEvent *)&a9);
  _Unwind_Resume(a1);
}

void sub_241B52928(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_241B529A8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_241B52E58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;
  void *v11;
  uint64_t v12;
  void *v13;
  void *v14;
  void *v15;

  (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  _Unwind_Resume(a1);
}

void sub_241B535A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  void *v12;
  void *v13;
  void *v14;
  uint64_t v15;
  void *v16;
  void *v17;
  void *v18;

  if (__p)
    operator delete(__p);

  (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  _Unwind_Resume(a1);
}

void sub_241B53784(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;

  v12 = v11;

  _Unwind_Resume(a1);
}

void sub_241B53910(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_241B53B90(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_241B53E34(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_241B54174(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_241B54388(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_241B545EC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_241B54840(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_241B55044(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30)
{
  void *v30;
  void *v31;
  void *v32;
  void *v33;

  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t ULSettings::get<ULSettings::CloudBackupDefaultTableLimit>()
{
  void *v0;
  void *v1;
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;

  +[ULDefaultsSingleton shared](ULDefaultsSingleton, "shared");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "defaultsDictionary");
  v1 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "ULCloudBackupDefaultTableLimit");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "objectForKey:", v2);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  if (v3 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
    v4 = objc_msgSend(v3, "unsignedIntValue");
  else
    v4 = objc_msgSend(&unk_2511EE2C0, "unsignedIntValue");
  v5 = v4;

  return v5;
}

void sub_241B552A4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

uint64_t ULSettings::get<ULSettings::CloudBackupPageSize>()
{
  void *v0;
  void *v1;
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;

  +[ULDefaultsSingleton shared](ULDefaultsSingleton, "shared");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "defaultsDictionary");
  v1 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "ULCloudBackupPageSize");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "objectForKey:", v2);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  if (v3 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
    v4 = objc_msgSend(v3, "unsignedIntValue");
  else
    v4 = objc_msgSend(&unk_2511EE2C0, "unsignedIntValue");
  v5 = v4;

  return v5;
}

void sub_241B553A0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

uint64_t ULSettings::get<ULSettings::CloudBackupMeasurementsLimit>()
{
  void *v0;
  void *v1;
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;

  +[ULDefaultsSingleton shared](ULDefaultsSingleton, "shared");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "defaultsDictionary");
  v1 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "ULCloudBackupMeasurementsLimit");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "objectForKey:", v2);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  if (v3 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
    v4 = objc_msgSend(v3, "unsignedIntValue");
  else
    v4 = objc_msgSend(&unk_2511EE2D8, "unsignedIntValue");
  v5 = v4;

  return v5;
}

void sub_241B5549C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_241B55854(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20)
{
  void *v20;
  void *v21;
  void *v22;

  _Unwind_Resume(a1);
}

void sub_241B55D74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;

  v18 = v13;

  _Unwind_Resume(a1);
}

void ___ZL45_CLLogObjectForCategory_MicroLocation_Defaultv_block_invoke_88()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.MicroLocation", "MicroLocation");
  v1 = (void *)logObject_MicroLocation_Default;
  logObject_MicroLocation_Default = (uint64_t)v0;

}

_QWORD *std::vector<CLMicroLocationProto::EventType>::__init_with_size[abi:ne180100]<std::__wrap_iter<CLMicroLocationProto::EventType*>,std::__wrap_iter<CLMicroLocationProto::EventType*>>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<CLMicroLocationProto::ConfidenceLevel>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_241B55EA0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void CLMicroLocationRapportMonitor::deviceFound(uint64_t a1, uint64_t a2, __int128 *a3)
{
  NSObject *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  const char *v12;
  const char *v13;
  NSObject *v14;
  uint32_t v15;
  NSObject *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  uint64_t v21;
  uint64_t *v22;
  _QWORD *v23;
  int v24;
  int v25;
  __int16 v26;
  const char *v27;
  __int16 v28;
  uint64_t v29;
  __int16 v30;
  uint64_t *v31;
  __int16 v32;
  _QWORD *v33;
  __int128 v34;
  char v35;
  uint64_t v36;

  v36 = *MEMORY[0x24BDAC8D0];
  if (*(_QWORD *)(a1 + 24) >= *(_QWORD *)(a1 + 88))
  {
    if (onceToken_MicroLocation_Default != -1)
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_111);
    v6 = logObject_MicroLocation_Default;
    if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_ERROR))
    {
      if (*(char *)(a2 + 23) >= 0)
        v7 = a2;
      else
        v7 = *(_QWORD *)a2;
      v8 = *(uint64_t **)(a1 + 24);
      v24 = 68289539;
      v25 = 0;
      v26 = 2082;
      v27 = "";
      v28 = 2081;
      v29 = v7;
      v30 = 2049;
      v31 = v8;
      _os_log_impl(&dword_2419D9000, v6, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"Rapport, rapport monitor exceeded max entries\", \"IDS\":%{private, location:escape_only}s, \"Size\":%{private}lu}", (uint8_t *)&v24, 0x26u);
    }
    if (onceToken_MicroLocation_Default != -1)
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_111);
    v9 = logObject_MicroLocation_Default;
    if (os_signpost_enabled((os_log_t)logObject_MicroLocation_Default))
    {
      if (*(char *)(a2 + 23) >= 0)
        v10 = a2;
      else
        v10 = *(_QWORD *)a2;
      v11 = *(uint64_t **)(a1 + 24);
      v24 = 68289539;
      v25 = 0;
      v26 = 2082;
      v27 = "";
      v28 = 2081;
      v29 = v10;
      v30 = 2049;
      v31 = v11;
      v12 = "Rapport, rapport monitor exceeded max entries";
      v13 = "{\"msg%{public}.0s\":\"Rapport, rapport monitor exceeded max entries\", \"IDS\":%{private, location:escape_o"
            "nly}s, \"Size\":%{private}lu}";
      v14 = v9;
      v15 = 38;
      goto LABEL_32;
    }
  }
  else
  {
    CLMicroLocationProtobufHelper::uuidFromStdString(a2, (uint64_t)&v34);
    if (v35)
    {
      std::__hash_table<CLMicroLocationRapportMonitor::Item,CLMicroLocationRapportMonitor::Item::HashItem,CLMicroLocationRapportMonitor::Item::PredicateItem,std::allocator<CLMicroLocationRapportMonitor::Item>>::__emplace_unique_impl<boost::uuids::uuid const&,std::string const&,std::string&,boost::uuids::uuid&>((_QWORD *)a1, &v34, a3, (__int128 *)(a1 + 48), (_OWORD *)(a1 + 72));
      goto LABEL_33;
    }
    if (onceToken_MicroLocation_Default != -1)
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_111);
    v16 = logObject_MicroLocation_Default;
    if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_ERROR))
    {
      if (*(char *)(a2 + 23) >= 0)
        v17 = a2;
      else
        v17 = *(_QWORD *)a2;
      v24 = 68289283;
      v25 = 0;
      v26 = 2082;
      v27 = "";
      v28 = 2081;
      v29 = v17;
      _os_log_impl(&dword_2419D9000, v16, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"Rapport, rapport monitor buffered bad IDS UUID\", \"IDS\":%{private, location:escape_only}s}", (uint8_t *)&v24, 0x1Cu);
    }
    if (onceToken_MicroLocation_Default != -1)
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_111);
    v18 = logObject_MicroLocation_Default;
    if (os_signpost_enabled((os_log_t)logObject_MicroLocation_Default))
    {
      if (*(char *)(a2 + 23) >= 0)
        v19 = a2;
      else
        v19 = *(_QWORD *)a2;
      v24 = 68289283;
      v25 = 0;
      v26 = 2082;
      v27 = "";
      v28 = 2081;
      v29 = v19;
      v12 = "Rapport, rapport monitor buffered bad IDS UUID";
      v13 = "{\"msg%{public}.0s\":\"Rapport, rapport monitor buffered bad IDS UUID\", \"IDS\":%{private, location:escape_only}s}";
      v14 = v18;
      v15 = 28;
LABEL_32:
      _os_signpost_emit_with_name_impl(&dword_2419D9000, v14, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, v12, v13, (uint8_t *)&v24, v15);
    }
  }
LABEL_33:
  if (onceToken_MicroLocation_Default != -1)
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_111);
  v20 = logObject_MicroLocation_Default;
  if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEBUG))
  {
    if (*(char *)(a2 + 23) >= 0)
      v21 = a2;
    else
      v21 = *(_QWORD *)a2;
    v22 = *(uint64_t **)a3;
    if (*((char *)a3 + 23) >= 0)
      v22 = (uint64_t *)a3;
    v23 = (_QWORD *)(a1 + 48);
    if (*(char *)(a1 + 71) < 0)
      v23 = (_QWORD *)*v23;
    v24 = 68289795;
    v25 = 0;
    v26 = 2082;
    v27 = "";
    v28 = 2081;
    v29 = v21;
    v30 = 2081;
    v31 = v22;
    v32 = 2082;
    v33 = v23;
    _os_log_impl(&dword_2419D9000, v20, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Rapport, buffered a found device\", \"Device IDS identifier\":%{private, location:escape_only}s, \"Device name\":%{private, location:escape_only}s, \"CoreRoutine LOI Type\":%{public, location:escape_only}s}", (uint8_t *)&v24, 0x30u);
  }
}

void CLMicroLocationRapportMonitor::getDevicesSinceLearnEventTimeAtLoi(uint64_t a1@<X0>, double *a2@<X1>, uint64_t *a3@<X2>, _QWORD *a4@<X3>, uint64_t a5@<X8>)
{
  _QWORD *i;
  double v12;
  id v13;
  void *v14;
  id v15;
  void *v16;
  uint64_t v17;
  uint64_t ***v18;
  NSObject *v19;
  NSObject *v20;
  _OWORD *v21;
  NSObject *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  std::string *v26;
  uint64_t v27;
  std::bad_cast *v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  std::string v33;
  void *__p;
  __int16 v35;
  const char *v36;
  __int16 v37;
  unint64_t v38;
  __int16 v39;
  int v40;
  __int16 v41;
  uint64_t *v42;
  __int16 v43;
  std::string *v44;
  __int16 v45;
  uint64_t v46;
  std::bad_cast v47[2];
  void *v48;
  uint64_t v49;

  v49 = *MEMORY[0x24BDAC8D0];
  *(_OWORD *)a5 = 0u;
  *(_OWORD *)(a5 + 16) = 0u;
  *(_DWORD *)(a5 + 32) = 1065353216;
  for (i = *(_QWORD **)(a1 + 16); i; i = (_QWORD *)*i)
  {
    if (i[10] == *a4 && i[11] == a4[1])
      std::__hash_table<CLMicroLocationRapportMonitor::Item,CLMicroLocationRapportMonitor::Item::HashItem,CLMicroLocationRapportMonitor::Item::PredicateItem,std::allocator<CLMicroLocationRapportMonitor::Item>>::__emplace_unique_key_args<CLMicroLocationRapportMonitor::Item,CLMicroLocationRapportMonitor::Item const&>(a5, (uint64_t)(i + 2), (uint64_t)(i + 2));
  }
  v12 = *a2;
  v13 = *(id *)(*(_QWORD *)(a1 + 40) + 80);
  v14 = v13;
  LOBYTE(__p) = 0;
  BYTE4(v38) = 0;
  *(_OWORD *)&v47[0].__vftable = *(_OWORD *)a4;
  LOBYTE(v48) = 1;
  if (v13)
  {
    objc_msgSend(v13, "fetchRapportEntriesAtLoiFromTime:toTime:loiType:loiGroupId:", &__p, v47, v12, 1.79769313e308);
    if (BYTE4(v38) && SBYTE3(v38) < 0)
      operator delete(__p);
  }
  else
  {
    v30 = 0;
    v31 = 0;
    v32 = 0;
  }

  if (*(_OWORD *)a4 != 0)
  {
    v15 = *(id *)(*(_QWORD *)(a1 + 40) + 80);
    v16 = v15;
    LOBYTE(__p) = 0;
    BYTE4(v38) = 0;
    *(_OWORD *)&v33.__r_.__value_.__l.__data_ = 0uLL;
    v33.__r_.__value_.__s.__data_[16] = 1;
    if (v15)
    {
      objc_msgSend(v15, "fetchRapportEntriesAtLoiFromTime:toTime:loiType:loiGroupId:", &__p, &v33, v12, 1.79769313e308);
      if (BYTE4(v38) && SBYTE3(v38) < 0)
        operator delete(__p);
    }
    else
    {
      v47[0].__vftable = 0;
      v47[1].__vftable = 0;
      v48 = 0;
    }

    std::vector<CLMicroLocationRapportTable::Entry>::__insert_with_size[abi:ne180100]<std::move_iterator<std::__wrap_iter<CLMicroLocationRapportTable::Entry*>>,std::move_iterator<std::__wrap_iter<CLMicroLocationRapportTable::Entry*>>>(&v30, v31, (uint64_t)v47[0].__vftable, (uint64_t)v47[1].__vftable, 0xCCCCCCCCCCCCCCCDLL * (((char *)v47[1].__vftable - (char *)v47[0].__vftable) >> 4));
    __p = v47;
    std::vector<CLMicroLocationRapportTable::Entry>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  }
  v29 = a3;
  v17 = v31;
  if (v30 != v31)
  {
    v18 = (uint64_t ***)(v30 + 64);
    do
    {
      CLMicroLocationProtobufHelper::uuidFromProtobuf(*(v18 - 3), v47);
      if ((_BYTE)v48)
      {
        std::__hash_table<CLMicroLocationRapportMonitor::Item,CLMicroLocationRapportMonitor::Item::HashItem,CLMicroLocationRapportMonitor::Item::PredicateItem,std::allocator<CLMicroLocationRapportMonitor::Item>>::__emplace_unique_impl<boost::uuids::uuid &,std::string const&,std::string const&,boost::uuids::uuid const&>((_QWORD *)a5, v47, (__int128 *)*(v18 - 2), (__int128 *)(v18 - 7), v18);
      }
      else
      {
        if (onceToken_MicroLocation_Default != -1)
          dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_111);
        v19 = logObject_MicroLocation_Default;
        if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_ERROR))
        {
          __p = (void *)68289026;
          v35 = 2082;
          v36 = "";
          _os_log_impl(&dword_2419D9000, v19, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"Rapport, rapport monitor read bad IDS UUID from DB\"}", (uint8_t *)&__p, 0x12u);
        }
        if (onceToken_MicroLocation_Default != -1)
          dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_111);
        v20 = logObject_MicroLocation_Default;
        if (os_signpost_enabled((os_log_t)logObject_MicroLocation_Default))
        {
          __p = (void *)68289026;
          v35 = 2082;
          v36 = "";
          _os_signpost_emit_with_name_impl(&dword_2419D9000, v20, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Rapport, rapport monitor read bad IDS UUID from DB", "{\"msg%{public}.0s\":\"Rapport, rapport monitor read bad IDS UUID from DB\"}", (uint8_t *)&__p, 0x12u);
        }
      }
      v21 = v18 + 2;
      v18 += 10;
    }
    while (v21 != (_OWORD *)v17);
  }
  if (onceToken_MicroLocation_Default != -1)
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_111);
  v22 = (id)logObject_MicroLocation_Default;
  if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
  {
    v24 = v30;
    v23 = v31;
    if (*((char *)v29 + 23) >= 0)
      v25 = v29;
    else
      v25 = (uint64_t *)*v29;
    memset(&v33, 0, sizeof(v33));
    if ((boost::conversion::detail::try_lexical_convert<std::string,boost::uuids::uuid>((uint64_t)a4, &v33) & 1) == 0)
    {
      v28 = std::bad_cast::bad_cast(v47);
      v47[0].__vftable = (std::bad_cast_vtbl *)&unk_2511D2C18;
      boost::throw_exception<boost::bad_lexical_cast>((uint64_t)v28);
    }
    v26 = &v33;
    v27 = *(_QWORD *)(a5 + 24);
    if ((v33.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v26 = (std::string *)v33.__r_.__value_.__r.__words[0];
    __p = (void *)68290306;
    v35 = 2082;
    v36 = "";
    v37 = 2050;
    v38 = 0xCCCCCCCCCCCCCCCDLL * ((v23 - v24) >> 4);
    v39 = 1026;
    v40 = (int)v12;
    v41 = 2082;
    v42 = v25;
    v43 = 2082;
    v44 = v26;
    v45 = 2050;
    v46 = v27;
    _os_log_impl(&dword_2419D9000, v22, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"RapportMonitor getDevicesSinceLearnEventTimeAtLoi\", \"Backup Entries\":%{public}lu, \"From time\":%{public}d, \"LOI type\":%{public, location:escape_only}s, \"LOI id\":%{public, location:escape_only}s, \"Total number of devices\":%{public}lu}", (uint8_t *)&__p, 0x40u);
    if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v33.__r_.__value_.__l.__data_);
  }

  __p = &v30;
  std::vector<CLMicroLocationRapportTable::Entry>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
}

void sub_241B567A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,char a28)
{
  uint64_t v28;
  void *v29;

  if (a28)
  {
    if (a27 < 0)
      operator delete(__p);
  }

  __p = &a13;
  std::vector<CLMicroLocationRapportTable::Entry>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  std::__hash_table<CLMicroLocationRapportMonitor::Item,CLMicroLocationRapportMonitor::Item::HashItem,CLMicroLocationRapportMonitor::Item::PredicateItem,std::allocator<CLMicroLocationRapportMonitor::Item>>::~__hash_table(v28);
  _Unwind_Resume(a1);
}

void CLMicroLocationRapportMonitor::backup(CLMicroLocationRapportMonitor *this)
{
  uint64_t *v1;
  uint64_t v3;
  _QWORD *v4;
  std::string *v5;
  unint64_t v6;
  uint64_t v7;
  NSObject *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8_t buf[8];
  _BYTE v13[20];
  int v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v9 = 0;
  v10 = 0;
  v11 = 0;
  v1 = (uint64_t *)*((_QWORD *)this + 2);
  if (v1)
  {
    v3 = MEMORY[0x24BEDD958];
    do
    {
      CLMicroLocationProto::RapportDevice::RapportDevice(buf);
      v14 |= 1u;
      if (*(_QWORD *)v13 == v3)
      {
        v4 = (_QWORD *)operator new();
        *v4 = 0;
        v4[1] = 0;
        v4[2] = 0;
        *(_QWORD *)v13 = v4;
      }
      MEMORY[0x2426A02D0]();
      v14 |= 2u;
      v5 = *(std::string **)&v13[8];
      if (*(_QWORD *)&v13[8] == v3)
      {
        v5 = (std::string *)operator new();
        v5->__r_.__value_.__r.__words[0] = 0;
        v5->__r_.__value_.__l.__size_ = 0;
        v5->__r_.__value_.__r.__words[2] = 0;
        *(_QWORD *)&v13[8] = v5;
      }
      std::string::operator=(v5, (const std::string *)(v1 + 4));
      v6 = v10;
      if (v10 >= v11)
      {
        v7 = std::vector<CLMicroLocationRapportTable::Entry>::__emplace_back_slow_path<std::string const&,CLMicroLocationProto::RapportDevice &,boost::uuids::uuid const&>(&v9, (uint64_t)(v1 + 7), (uint64_t)buf, (uint64_t)(v1 + 10));
      }
      else
      {
        std::allocator<CLMicroLocationRapportTable::Entry>::construct[abi:ne180100]<CLMicroLocationRapportTable::Entry,std::string const&,CLMicroLocationProto::RapportDevice &,boost::uuids::uuid const&>((uint64_t)&v11, v10, (uint64_t)(v1 + 7), (uint64_t)buf, (uint64_t)(v1 + 10));
        v7 = v6 + 80;
      }
      v10 = v7;
      CLMicroLocationProto::RapportDevice::~RapportDevice((CLMicroLocationProto::RapportDevice *)buf);
      v1 = (uint64_t *)*v1;
    }
    while (v1);
    if (v10 != v9)
    {
      if (onceToken_MicroLocation_Default != -1)
        dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_111);
      v8 = logObject_MicroLocation_Default;
      if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 68289282;
        *(_DWORD *)&buf[4] = 0;
        *(_WORD *)v13 = 2082;
        *(_QWORD *)&v13[2] = "";
        *(_WORD *)&v13[10] = 2050;
        *(_QWORD *)&v13[12] = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v10 - v9) >> 4);
        _os_log_impl(&dword_2419D9000, v8, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Rapport, back up rapport monitor data to DB\", \"Num Entries\":%{public}lu}", buf, 0x1Cu);
      }
      objc_msgSend(*(id *)(*((_QWORD *)this + 5) + 80), "insertEntries:", &v9);
    }
  }
  *(_QWORD *)buf = &v9;
  std::vector<CLMicroLocationRapportTable::Entry>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
}

void sub_241B56AB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, void **a13)
{
  a13 = (void **)&a10;
  std::vector<CLMicroLocationRapportTable::Entry>::__destroy_vector::operator()[abi:ne180100](&a13);
  _Unwind_Resume(a1);
}

std::string *CLMicroLocationRapportMonitor::setCurrentLOIType(std::string *a1, const std::string *a2)
{
  return std::string::operator=(a1 + 2, a2);
}

__n128 CLMicroLocationRapportMonitor::setCurrentLoiGroupId(CLMicroLocationRapportMonitor *this, __n128 *a2)
{
  __n128 result;

  result = *a2;
  *(__n128 *)((char *)this + 72) = *a2;
  return result;
}

unint64_t CLMicroLocationRapportMonitor::Item::HashItem::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;

  v2 = 0;
  v3 = 0;
  do
    v3 ^= (v3 << 6) + 2654435769u + (v3 >> 2) + *(unsigned __int8 *)(a2 + v2++);
  while (v2 != 16);
  v4 = 0;
  v5 = 0;
  do
    v5 ^= (v5 << 6) + 2654435769u + (v5 >> 2) + *(unsigned __int8 *)(a2 + 64 + v4++);
  while (v4 != 16);
  return 0xC6A4A7935BD1E995
       * ((0xC6A4A7935BD1E995 * ((0xC6A4A7935BD1E995 * v5) ^ ((0xC6A4A7935BD1E995 * v5) >> 47))) ^ v3)
       + 3864292196u;
}

BOOL CLMicroLocationRapportMonitor::Item::PredicateItem::operator()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  size_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  const void **v11;
  unsigned __int8 *v12;

  if (*(_QWORD *)a2 != *(_QWORD *)a3 || *(_QWORD *)(a2 + 8) != *(_QWORD *)(a3 + 8))
    return 0;
  v6 = *(unsigned __int8 *)(a2 + 39);
  v7 = *(_QWORD *)(a2 + 24);
  if ((v6 & 0x80u) == 0)
    v8 = *(unsigned __int8 *)(a2 + 39);
  else
    v8 = *(_QWORD *)(a2 + 24);
  v9 = *(unsigned __int8 *)(a3 + 39);
  v10 = (char)v9;
  if ((v9 & 0x80u) != 0)
    v9 = *(_QWORD *)(a3 + 24);
  if (v8 != v9)
    return 0;
  v11 = (const void **)(a2 + 16);
  if (v10 >= 0)
    v12 = (unsigned __int8 *)(a3 + 16);
  else
    v12 = *(unsigned __int8 **)(a3 + 16);
  if ((v6 & 0x80) != 0)
  {
    if (!memcmp(*v11, v12, v7))
      return *(_QWORD *)(a2 + 64) == *(_QWORD *)(a3 + 64) && *(_QWORD *)(a2 + 72) == *(_QWORD *)(a3 + 72);
    return 0;
  }
  if ((_DWORD)v6)
  {
    while (*(unsigned __int8 *)v11 == *v12)
    {
      v11 = (const void **)((char *)v11 + 1);
      ++v12;
      if (!--v6)
        return *(_QWORD *)(a2 + 64) == *(_QWORD *)(a3 + 64) && *(_QWORD *)(a2 + 72) == *(_QWORD *)(a3 + 72);
    }
    return 0;
  }
  return *(_QWORD *)(a2 + 64) == *(_QWORD *)(a3 + 64) && *(_QWORD *)(a2 + 72) == *(_QWORD *)(a3 + 72);
}

void ___ZL45_CLLogObjectForCategory_MicroLocation_Defaultv_block_invoke_89()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.MicroLocation", "MicroLocation");
  v1 = (void *)logObject_MicroLocation_Default;
  logObject_MicroLocation_Default = (uint64_t)v0;

}

_QWORD *std::__hash_table<CLMicroLocationRapportMonitor::Item,CLMicroLocationRapportMonitor::Item::HashItem,CLMicroLocationRapportMonitor::Item::PredicateItem,std::allocator<CLMicroLocationRapportMonitor::Item>>::__emplace_unique_impl<boost::uuids::uuid const&,std::string const&,std::string&,boost::uuids::uuid&>(_QWORD *a1, _OWORD *a2, __int128 *a3, __int128 *a4, _OWORD *a5)
{
  _QWORD *inserted;
  char v7;
  _QWORD *v9[3];

  std::__hash_table<CLMicroLocationRapportMonitor::Item,CLMicroLocationRapportMonitor::Item::HashItem,CLMicroLocationRapportMonitor::Item::PredicateItem,std::allocator<CLMicroLocationRapportMonitor::Item>>::__construct_node<boost::uuids::uuid const&,std::string const&,std::string&,boost::uuids::uuid&>((uint64_t)a1, a2, a3, a4, a5, (uint64_t)v9);
  inserted = std::__hash_table<CLMicroLocationRapportMonitor::Item,CLMicroLocationRapportMonitor::Item::HashItem,CLMicroLocationRapportMonitor::Item::PredicateItem,std::allocator<CLMicroLocationRapportMonitor::Item>>::__node_insert_unique(a1, v9[0]);
  if ((v7 & 1) != 0)
    v9[0] = 0;
  std::unique_ptr<std::__hash_node<CLMicroLocationRapportMonitor::Item,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<CLMicroLocationRapportMonitor::Item,void *>>>>::reset[abi:ne180100]((uint64_t)v9, 0);
  return inserted;
}

void sub_241B56CE4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<CLMicroLocationRapportMonitor::Item,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<CLMicroLocationRapportMonitor::Item,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

unint64_t std::__hash_table<CLMicroLocationRapportMonitor::Item,CLMicroLocationRapportMonitor::Item::HashItem,CLMicroLocationRapportMonitor::Item::PredicateItem,std::allocator<CLMicroLocationRapportMonitor::Item>>::__construct_node<boost::uuids::uuid const&,std::string const&,std::string&,boost::uuids::uuid&>@<X0>(uint64_t a1@<X0>, _OWORD *a2@<X1>, __int128 *a3@<X2>, __int128 *a4@<X3>, _OWORD *a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  unint64_t result;

  v11 = a1 + 16;
  v12 = operator new(0x60uLL);
  *(_QWORD *)a6 = v12;
  *(_QWORD *)(a6 + 8) = v11;
  *(_BYTE *)(a6 + 16) = 0;
  *v12 = 0;
  v12[1] = 0;
  v13 = CLMicroLocationRapportMonitor::Item::Item((uint64_t)(v12 + 2), a2, a3, a4, a5);
  *(_BYTE *)(a6 + 16) = 1;
  result = CLMicroLocationRapportMonitor::Item::HashItem::operator()(v13, v13);
  v12[1] = result;
  return result;
}

void sub_241B56D88(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__hash_node<CLMicroLocationRapportMonitor::Item,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<CLMicroLocationRapportMonitor::Item,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<CLMicroLocationRapportMonitor::Item,CLMicroLocationRapportMonitor::Item::HashItem,CLMicroLocationRapportMonitor::Item::PredicateItem,std::allocator<CLMicroLocationRapportMonitor::Item>>::__node_insert_unique(_QWORD *a1, _QWORD *a2)
{
  _QWORD *v2;
  uint64_t v4;
  unint64_t v5;
  _QWORD *v6;

  v2 = a2;
  v4 = (uint64_t)(a2 + 2);
  v5 = CLMicroLocationRapportMonitor::Item::HashItem::operator()((uint64_t)a1, (uint64_t)(a2 + 2));
  v2[1] = v5;
  v6 = std::__hash_table<CLMicroLocationRapportMonitor::Item,CLMicroLocationRapportMonitor::Item::HashItem,CLMicroLocationRapportMonitor::Item::PredicateItem,std::allocator<CLMicroLocationRapportMonitor::Item>>::__node_insert_unique_prepare[abi:ne180100]((uint64_t)a1, v5, v4);
  if (v6)
    return v6;
  std::__hash_table<CLMicroLocationUtils::BleIdentityItem,CLMicroLocationUtils::BleIdentityItem::HashItem,CLMicroLocationUtils::BleIdentityItem::PredicateItem,std::allocator<CLMicroLocationUtils::BleIdentityItem>>::__node_insert_unique_perform[abi:ne180100](a1, v2);
  return v2;
}

uint64_t CLMicroLocationRapportMonitor::Item::Item(uint64_t a1, _OWORD *a2, __int128 *a3, __int128 *a4, _OWORD *a5)
{
  __int128 v8;
  std::string *v9;
  __int128 v10;

  *(_OWORD *)a1 = *a2;
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 16), *(const std::string::value_type **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v8 = *a3;
    *(_QWORD *)(a1 + 32) = *((_QWORD *)a3 + 2);
    *(_OWORD *)(a1 + 16) = v8;
  }
  v9 = (std::string *)(a1 + 40);
  if (*((char *)a4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)a4, *((_QWORD *)a4 + 1));
  }
  else
  {
    v10 = *a4;
    *(_QWORD *)(a1 + 56) = *((_QWORD *)a4 + 2);
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v10;
  }
  *(_OWORD *)(a1 + 64) = *a5;
  return a1;
}

void sub_241B56EA0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 39) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

_QWORD *std::__hash_table<CLMicroLocationRapportMonitor::Item,CLMicroLocationRapportMonitor::Item::HashItem,CLMicroLocationRapportMonitor::Item::PredicateItem,std::allocator<CLMicroLocationRapportMonitor::Item>>::__node_insert_unique_prepare[abi:ne180100](uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v3;
  unint64_t v4;
  uint8x8_t v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  unint64_t v12;
  float v13;
  float v14;
  _BOOL8 v15;
  unint64_t v16;
  unint64_t v17;
  size_t v18;

  v3 = a1;
  v4 = *(_QWORD *)(a1 + 8);
  if (v4)
  {
    v7 = (uint8x8_t)vcnt_s8((int8x8_t)v4);
    v7.i16[0] = vaddlv_u8(v7);
    v8 = v7.u32[0];
    if (v7.u32[0] > 1uLL)
      v9 = v4 <= a2 ? a2 % v4 : a2;
    else
      v9 = (v4 - 1) & a2;
    v10 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v9);
    if (v10)
    {
      v11 = (_QWORD *)*v10;
      if (*v10)
      {
        do
        {
          v12 = v11[1];
          if (v12 == a2)
          {
            LOBYTE(a1) = CLMicroLocationRapportMonitor::Item::PredicateItem::operator()(a1, (uint64_t)(v11 + 2), a3);
            if ((a1 & 1) != 0)
              return v11;
          }
          else
          {
            if (v8 > 1)
            {
              if (v12 >= v4)
                v12 %= v4;
            }
            else
            {
              v12 &= v4 - 1;
            }
            if (v12 != v9)
              break;
          }
          v11 = (_QWORD *)*v11;
        }
        while (v11);
      }
    }
  }
  v13 = (float)(unint64_t)(*(_QWORD *)(v3 + 24) + 1);
  v14 = *(float *)(v3 + 32);
  if (!v4 || (float)(v14 * (float)v4) < v13)
  {
    v15 = 1;
    if (v4 >= 3)
      v15 = (v4 & (v4 - 1)) != 0;
    v16 = v15 | (2 * v4);
    v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17)
      v18 = v17;
    else
      v18 = v16;
    std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>>>::__rehash<true>(v3, v18);
  }
  return 0;
}

void std::unique_ptr<std::__hash_node<CLMicroLocationRapportMonitor::Item,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<CLMicroLocationRapportMonitor::Item,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<CLMicroLocationRapportMonitor::Item,0>((uint64_t)v2 + 16);
    operator delete(v2);
  }
}

_QWORD *std::__hash_table<CLMicroLocationRapportMonitor::Item,CLMicroLocationRapportMonitor::Item::HashItem,CLMicroLocationRapportMonitor::Item::PredicateItem,std::allocator<CLMicroLocationRapportMonitor::Item>>::__emplace_unique_key_args<CLMicroLocationRapportMonitor::Item,CLMicroLocationRapportMonitor::Item const&>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  unint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  unint64_t v14;
  float v15;
  float v16;
  _BOOL8 v17;
  unint64_t v18;
  unint64_t v19;
  size_t v20;
  _QWORD *v21;
  unint64_t v22;
  _QWORD v24[3];

  v7 = CLMicroLocationRapportMonitor::Item::HashItem::operator()(a1, a2);
  v8 = v7;
  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    v11 = v10.u32[0];
    if (v10.u32[0] > 1uLL)
    {
      v3 = v7;
      if (v7 >= v9)
        v3 = v7 % v9;
    }
    else
    {
      v3 = (v9 - 1) & v7;
    }
    v12 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
    if (v12)
    {
      v13 = (_QWORD *)*v12;
      if (*v12)
      {
        do
        {
          v14 = v13[1];
          if (v14 == v8)
          {
            LOBYTE(v7) = CLMicroLocationRapportMonitor::Item::PredicateItem::operator()(v7, (uint64_t)(v13 + 2), a2);
            if ((v7 & 1) != 0)
              return v13;
          }
          else
          {
            if (v11 > 1)
            {
              if (v14 >= v9)
                v14 %= v9;
            }
            else
            {
              v14 &= v9 - 1;
            }
            if (v14 != v3)
              break;
          }
          v13 = (_QWORD *)*v13;
        }
        while (v13);
      }
    }
  }
  std::__hash_table<CLMicroLocationRapportMonitor::Item,CLMicroLocationRapportMonitor::Item::HashItem,CLMicroLocationRapportMonitor::Item::PredicateItem,std::allocator<CLMicroLocationRapportMonitor::Item>>::__construct_node_hash<CLMicroLocationRapportMonitor::Item const&>(a1, v8, a3, (uint64_t)v24);
  v15 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v16 = *(float *)(a1 + 32);
  if (!v9 || (float)(v16 * (float)v9) < v15)
  {
    v17 = 1;
    if (v9 >= 3)
      v17 = (v9 & (v9 - 1)) != 0;
    v18 = v17 | (2 * v9);
    v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19)
      v20 = v19;
    else
      v20 = v18;
    std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>>>::__rehash<true>(a1, v20);
    v9 = *(_QWORD *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9)
        v3 = v8 % v9;
      else
        v3 = v8;
    }
    else
    {
      v3 = (v9 - 1) & v8;
    }
  }
  v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v21)
  {
    *(_QWORD *)v24[0] = *v21;
    *v21 = v24[0];
  }
  else
  {
    *(_QWORD *)v24[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v24[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = a1 + 16;
    if (*(_QWORD *)v24[0])
    {
      v22 = *(_QWORD *)(*(_QWORD *)v24[0] + 8);
      if ((v9 & (v9 - 1)) != 0)
      {
        if (v22 >= v9)
          v22 %= v9;
      }
      else
      {
        v22 &= v9 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v22) = v24[0];
    }
  }
  v13 = (_QWORD *)v24[0];
  v24[0] = 0;
  ++*(_QWORD *)(a1 + 24);
  std::unique_ptr<std::__hash_node<CLMicroLocationRapportMonitor::Item,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<CLMicroLocationRapportMonitor::Item,void *>>>>::reset[abi:ne180100]((uint64_t)v24, 0);
  return v13;
}

void sub_241B57294(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<CLMicroLocationRapportMonitor::Item,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<CLMicroLocationRapportMonitor::Item,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void std::__hash_table<CLMicroLocationRapportMonitor::Item,CLMicroLocationRapportMonitor::Item::HashItem,CLMicroLocationRapportMonitor::Item::PredicateItem,std::allocator<CLMicroLocationRapportMonitor::Item>>::__construct_node_hash<CLMicroLocationRapportMonitor::Item const&>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  _QWORD *v8;

  v7 = a1 + 16;
  v8 = operator new(0x60uLL);
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  *v8 = 0;
  v8[1] = a2;
  std::allocator<std::__hash_node<CLMicroLocationRapportMonitor::Item,void *>>::construct[abi:ne180100]<CLMicroLocationRapportMonitor::Item,CLMicroLocationRapportMonitor::Item const&>(v7, (uint64_t)(v8 + 2), a3);
  *(_BYTE *)(a4 + 16) = 1;
}

void sub_241B57308(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__hash_node<CLMicroLocationRapportMonitor::Item,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<CLMicroLocationRapportMonitor::Item,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

__n128 std::allocator<std::__hash_node<CLMicroLocationRapportMonitor::Item,void *>>::construct[abi:ne180100]<CLMicroLocationRapportMonitor::Item,CLMicroLocationRapportMonitor::Item const&>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  std::string *v5;
  __int128 v6;
  std::string *v7;
  __int128 v8;
  __n128 result;

  *(_OWORD *)a2 = *(_OWORD *)a3;
  v5 = (std::string *)(a2 + 16);
  if (*(char *)(a3 + 39) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)(a3 + 16), *(_QWORD *)(a3 + 24));
  }
  else
  {
    v6 = *(_OWORD *)(a3 + 16);
    *(_QWORD *)(a2 + 32) = *(_QWORD *)(a3 + 32);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  v7 = (std::string *)(a2 + 40);
  if (*(char *)(a3 + 63) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)(a3 + 40), *(_QWORD *)(a3 + 48));
  }
  else
  {
    v8 = *(_OWORD *)(a3 + 40);
    *(_QWORD *)(a2 + 56) = *(_QWORD *)(a3 + 56);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v8;
  }
  result = *(__n128 *)(a3 + 64);
  *(__n128 *)(a2 + 64) = result;
  return result;
}

void sub_241B573B4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 39) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<CLMicroLocationRapportTable::Entry>::__insert_with_size[abi:ne180100]<std::move_iterator<std::__wrap_iter<CLMicroLocationRapportTable::Entry*>>,std::move_iterator<std::__wrap_iter<CLMicroLocationRapportTable::Entry*>>>(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  void *v27[2];
  char *v28;
  char *v29;
  uint64_t v30;

  v5 = a2;
  if (a5 >= 1)
  {
    v7 = a3;
    v11 = a1[2];
    v9 = (uint64_t)(a1 + 2);
    v10 = v11;
    v12 = *(_QWORD *)(v9 - 8);
    if ((uint64_t)(0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v11 - v12) >> 4)) >= a5)
    {
      v20 = v12 - a2;
      if ((uint64_t)(0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v12 - a2) >> 4)) >= a5)
      {
        v21 = a3 + 80 * a5;
      }
      else
      {
        v21 = a3 + 16 * ((uint64_t)(v12 - a2) >> 4);
        a1[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<CLMicroLocationRapportTable::Entry>,std::move_iterator<std::__wrap_iter<CLMicroLocationRapportTable::Entry*>>,std::move_iterator<std::__wrap_iter<CLMicroLocationRapportTable::Entry*>>,CLMicroLocationRapportTable::Entry*>(v9, v21, a4, *(_QWORD *)(v9 - 8));
        if (v20 < 1)
          return v5;
      }
      std::vector<CLMicroLocationRapportTable::Entry>::__move_range((uint64_t)a1, v5, v12, v5 + 80 * a5);
      std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::move_iterator<std::__wrap_iter<CLMicroLocationRapportTable::Entry *>>,std::move_iterator<std::__wrap_iter<CLMicroLocationRapportTable::Entry *>>,CLMicroLocationRapportTable::Entry *>((uint64_t)v27, v7, v21, v5);
    }
    else
    {
      v13 = *a1;
      v14 = a5 - 0x3333333333333333 * ((uint64_t)(v12 - *a1) >> 4);
      if (v14 > 0x333333333333333)
        std::vector<CLMicroLocationProto::ConfidenceReason>::__throw_length_error[abi:ne180100]();
      v15 = 0xCCCCCCCCCCCCCCCDLL * ((a2 - v13) >> 4);
      v16 = 0xCCCCCCCCCCCCCCCDLL * ((v10 - v13) >> 4);
      v17 = 2 * v16;
      if (2 * v16 <= v14)
        v17 = v14;
      if (v16 >= 0x199999999999999)
        v18 = 0x333333333333333;
      else
        v18 = v17;
      v30 = v9;
      if (v18)
        v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CLMicroLocationRapportMonitor::Item>>(v9, v18);
      else
        v19 = 0;
      v22 = &v19[80 * v15];
      v27[0] = v19;
      v27[1] = v22;
      v28 = v22;
      v29 = &v19[80 * v18];
      v23 = 5 * a5;
      v24 = &v22[80 * a5];
      v25 = 16 * v23;
      do
      {
        std::allocator<CLMicroLocationRapportTable::Entry>::construct[abi:ne180100]<CLMicroLocationRapportTable::Entry,CLMicroLocationRapportTable::Entry>(v30, (uint64_t)v22, v7);
        v22 += 80;
        v7 += 80;
        v25 -= 80;
      }
      while (v25);
      v28 = v24;
      v5 = std::vector<CLMicroLocationRapportTable::Entry>::__swap_out_circular_buffer(a1, (uint64_t)v27, v5);
      std::__split_buffer<CLMicroLocationRapportTable::Entry>::~__split_buffer(v27);
    }
  }
  return v5;
}

void sub_241B57594(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12;
  uint64_t v13;

  *(_QWORD *)(v12 + 8) = v13;
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<CLMicroLocationRapportTable::Entry>::__move_range(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v10;
  char v12;

  v6 = *(_QWORD *)(a1 + 8);
  v7 = a2 + v6 - a4;
  v8 = v6;
  if (v7 < a3)
  {
    v10 = a2 + v6 - a4;
    v8 = *(_QWORD *)(a1 + 8);
    do
    {
      std::allocator<CLMicroLocationRapportTable::Entry>::construct[abi:ne180100]<CLMicroLocationRapportTable::Entry,CLMicroLocationRapportTable::Entry>(a1 + 16, v8, v10);
      v10 += 80;
      v8 += 80;
    }
    while (v10 < a3);
  }
  *(_QWORD *)(a1 + 8) = v8;
  return std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<CLMicroLocationRapportTable::Entry *,CLMicroLocationRapportTable::Entry *,CLMicroLocationRapportTable::Entry *>((uint64_t)&v12, a2, v7, v6);
}

void sub_241B57660(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<CLMicroLocationRapportTable::Entry>::__swap_out_circular_buffer(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v6 = *(_QWORD *)(a2 + 8);
  v7 = (uint64_t)(a1 + 2);
  std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<CLMicroLocationRapportTable::Entry>,std::reverse_iterator<CLMicroLocationRapportTable::Entry*>,std::reverse_iterator<CLMicroLocationRapportTable::Entry*>,std::reverse_iterator<CLMicroLocationRapportTable::Entry*>>((uint64_t)(a1 + 2), a3, a3, *a1, *a1, v6, v6);
  *(_QWORD *)(a2 + 8) = v8;
  *(_QWORD *)(a2 + 16) = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<CLMicroLocationRapportTable::Entry>,CLMicroLocationRapportTable::Entry*,CLMicroLocationRapportTable::Entry*,CLMicroLocationRapportTable::Entry*>(v7, a3, a1[1], *(__n128 **)(a2 + 16));
  v9 = *a1;
  *a1 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = v9;
  v10 = a1[1];
  a1[1] = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 16) = v10;
  v11 = a1[2];
  a1[2] = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a2 + 24) = v11;
  *(_QWORD *)a2 = *(_QWORD *)(a2 + 8);
  return v6;
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<CLMicroLocationRapportTable::Entry>,std::move_iterator<std::__wrap_iter<CLMicroLocationRapportTable::Entry*>>,std::move_iterator<std::__wrap_iter<CLMicroLocationRapportTable::Entry*>>,CLMicroLocationRapportTable::Entry*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  _QWORD v9[3];
  char v10;
  uint64_t v11;
  uint64_t v12;

  v4 = a4;
  v11 = a4;
  v12 = a4;
  v9[0] = a1;
  v9[1] = &v11;
  v9[2] = &v12;
  v10 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      std::allocator<CLMicroLocationRapportTable::Entry>::construct[abi:ne180100]<CLMicroLocationRapportTable::Entry,CLMicroLocationRapportTable::Entry>(a1, v4, v6);
      v6 += 80;
      v4 = v12 + 80;
      v12 += 80;
    }
    while (v6 != a3);
  }
  v10 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<CLMicroLocationRapportTable::Entry>,CLMicroLocationRapportTable::Entry*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v9);
  return v4;
}

void sub_241B577AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<CLMicroLocationRapportTable::Entry>,CLMicroLocationRapportTable::Entry*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<CLMicroLocationRapportTable::Entry *,CLMicroLocationRapportTable::Entry *,CLMicroLocationRapportTable::Entry *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void **v10;
  __int128 v11;

  if (a3 != a2)
  {
    v7 = 0;
    do
    {
      v8 = a3 + v7;
      v9 = a4 + v7;
      *(_QWORD *)(a4 + v7 - 80) = *(_QWORD *)(a3 + v7 - 80);
      v10 = (void **)(a4 + v7 - 72);
      if (*(char *)(a4 + v7 - 49) < 0)
        operator delete(*v10);
      v11 = *(_OWORD *)(v8 - 72);
      *(_QWORD *)(a4 + v7 - 56) = *(_QWORD *)(v8 - 56);
      *(_OWORD *)v10 = v11;
      *(_BYTE *)(v8 - 49) = 0;
      *(_BYTE *)(v8 - 72) = 0;
      CLMicroLocationProto::RapportDevice::CopyFrom((CLMicroLocationProto::RapportDevice *)(v9 - 48), (const CLMicroLocationProto::RapportDevice *)(v8 - 48));
      *(_OWORD *)(v9 - 16) = *(_OWORD *)(v8 - 16);
      v7 -= 80;
    }
    while (a3 + v7 != a2);
  }
  return a3;
}

uint64_t std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::move_iterator<std::__wrap_iter<CLMicroLocationRapportTable::Entry *>>,std::move_iterator<std::__wrap_iter<CLMicroLocationRapportTable::Entry *>>,CLMicroLocationRapportTable::Entry *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  void **v7;
  __int128 v8;

  v5 = a2;
  if (a2 != a3)
  {
    do
    {
      *(_QWORD *)a4 = *(_QWORD *)v5;
      v7 = (void **)(a4 + 8);
      if (*(char *)(a4 + 31) < 0)
        operator delete(*v7);
      v8 = *(_OWORD *)(v5 + 8);
      *(_QWORD *)(a4 + 24) = *(_QWORD *)(v5 + 24);
      *(_OWORD *)v7 = v8;
      *(_BYTE *)(v5 + 31) = 0;
      *(_BYTE *)(v5 + 8) = 0;
      CLMicroLocationProto::RapportDevice::CopyFrom((CLMicroLocationProto::RapportDevice *)(a4 + 32), (const CLMicroLocationProto::RapportDevice *)(v5 + 32));
      *(_OWORD *)(a4 + 64) = *(_OWORD *)(v5 + 64);
      a4 += 80;
      v5 += 80;
    }
    while (v5 != a3);
    return a3;
  }
  return v5;
}

__n128 *std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<CLMicroLocationRapportTable::Entry>,CLMicroLocationRapportTable::Entry*,CLMicroLocationRapportTable::Entry*,CLMicroLocationRapportTable::Entry*>(uint64_t a1, uint64_t a2, uint64_t a3, __n128 *a4)
{
  __n128 *v4;
  uint64_t v6;
  _QWORD v9[3];
  char v10;
  __n128 *v11;
  __n128 *v12;

  v4 = a4;
  v11 = a4;
  v12 = a4;
  v9[0] = a1;
  v9[1] = &v11;
  v9[2] = &v12;
  v10 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      std::allocator<CLMicroLocationRapportTable::Entry>::construct[abi:ne180100]<CLMicroLocationRapportTable::Entry,CLMicroLocationRapportTable::Entry const&>(a1, v4, v6);
      v6 += 80;
      v4 = v12 + 5;
      v12 += 5;
    }
    while (v6 != a3);
  }
  v10 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<CLMicroLocationRapportTable::Entry>,CLMicroLocationRapportTable::Entry*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v9);
  return v4;
}

void sub_241B579A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<CLMicroLocationRapportTable::Entry>,CLMicroLocationRapportTable::Entry*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<CLMicroLocationRapportMonitor::Item,CLMicroLocationRapportMonitor::Item::HashItem,CLMicroLocationRapportMonitor::Item::PredicateItem,std::allocator<CLMicroLocationRapportMonitor::Item>>::__emplace_unique_impl<boost::uuids::uuid &,std::string const&,std::string const&,boost::uuids::uuid const&>(_QWORD *a1, _OWORD *a2, __int128 *a3, __int128 *a4, _OWORD *a5)
{
  _QWORD *inserted;
  char v7;
  _QWORD *v9[3];

  std::__hash_table<CLMicroLocationRapportMonitor::Item,CLMicroLocationRapportMonitor::Item::HashItem,CLMicroLocationRapportMonitor::Item::PredicateItem,std::allocator<CLMicroLocationRapportMonitor::Item>>::__construct_node<boost::uuids::uuid &,std::string const&,std::string const&,boost::uuids::uuid const&>((uint64_t)a1, a2, a3, a4, a5, (uint64_t)v9);
  inserted = std::__hash_table<CLMicroLocationRapportMonitor::Item,CLMicroLocationRapportMonitor::Item::HashItem,CLMicroLocationRapportMonitor::Item::PredicateItem,std::allocator<CLMicroLocationRapportMonitor::Item>>::__node_insert_unique(a1, v9[0]);
  if ((v7 & 1) != 0)
    v9[0] = 0;
  std::unique_ptr<std::__hash_node<CLMicroLocationRapportMonitor::Item,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<CLMicroLocationRapportMonitor::Item,void *>>>>::reset[abi:ne180100]((uint64_t)v9, 0);
  return inserted;
}

void sub_241B57A10(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<CLMicroLocationRapportMonitor::Item,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<CLMicroLocationRapportMonitor::Item,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

unint64_t std::__hash_table<CLMicroLocationRapportMonitor::Item,CLMicroLocationRapportMonitor::Item::HashItem,CLMicroLocationRapportMonitor::Item::PredicateItem,std::allocator<CLMicroLocationRapportMonitor::Item>>::__construct_node<boost::uuids::uuid &,std::string const&,std::string const&,boost::uuids::uuid const&>@<X0>(uint64_t a1@<X0>, _OWORD *a2@<X1>, __int128 *a3@<X2>, __int128 *a4@<X3>, _OWORD *a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  unint64_t result;

  v11 = a1 + 16;
  v12 = operator new(0x60uLL);
  *(_QWORD *)a6 = v12;
  *(_QWORD *)(a6 + 8) = v11;
  *(_BYTE *)(a6 + 16) = 0;
  *v12 = 0;
  v12[1] = 0;
  v13 = CLMicroLocationRapportMonitor::Item::Item((uint64_t)(v12 + 2), a2, a3, a4, a5);
  *(_BYTE *)(a6 + 16) = 1;
  result = CLMicroLocationRapportMonitor::Item::HashItem::operator()(v13, v13);
  v12[1] = result;
  return result;
}

void sub_241B57AB4(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__hash_node<CLMicroLocationRapportMonitor::Item,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<CLMicroLocationRapportMonitor::Item,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void std::__hash_table<CLMicroLocationRapportMonitor::Item,CLMicroLocationRapportMonitor::Item::HashItem,CLMicroLocationRapportMonitor::Item::PredicateItem,std::allocator<CLMicroLocationRapportMonitor::Item>>::clear(uint64_t a1)
{
  uint64_t v2;
  uint64_t i;

  if (*(_QWORD *)(a1 + 24))
  {
    std::__hash_table<CLMicroLocationRapportMonitor::Item,CLMicroLocationRapportMonitor::Item::HashItem,CLMicroLocationRapportMonitor::Item::PredicateItem,std::allocator<CLMicroLocationRapportMonitor::Item>>::__deallocate_node(a1, *(_QWORD **)(a1 + 16));
    *(_QWORD *)(a1 + 16) = 0;
    v2 = *(_QWORD *)(a1 + 8);
    if (v2)
    {
      for (i = 0; i != v2; ++i)
        *(_QWORD *)(*(_QWORD *)a1 + 8 * i) = 0;
    }
    *(_QWORD *)(a1 + 24) = 0;
  }
}

uint64_t std::vector<CLMicroLocationRapportTable::Entry>::__emplace_back_slow_path<std::string const&,CLMicroLocationProto::RapportDevice &,boost::uuids::uuid const&>(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v5;
  unint64_t v6;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  void *v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t *v18;

  v5 = 0xCCCCCCCCCCCCCCCDLL * ((a1[1] - *a1) >> 4);
  v6 = v5 + 1;
  if (v5 + 1 > 0x333333333333333)
    std::vector<CLMicroLocationProto::ConfidenceReason>::__throw_length_error[abi:ne180100]();
  if (0x999999999999999ALL * ((a1[2] - *a1) >> 4) > v6)
    v6 = 0x999999999999999ALL * ((a1[2] - *a1) >> 4);
  if (0xCCCCCCCCCCCCCCCDLL * ((a1[2] - *a1) >> 4) >= 0x199999999999999)
    v10 = 0x333333333333333;
  else
    v10 = v6;
  v18 = a1 + 2;
  if (v10)
    v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CLMicroLocationRapportMonitor::Item>>((uint64_t)(a1 + 2), v10);
  else
    v11 = 0;
  v14 = v11;
  v15 = &v11[80 * v5];
  v17 = &v11[80 * v10];
  std::allocator<CLMicroLocationRapportTable::Entry>::construct[abi:ne180100]<CLMicroLocationRapportTable::Entry,std::string const&,CLMicroLocationProto::RapportDevice &,boost::uuids::uuid const&>((uint64_t)(a1 + 2), (uint64_t)v15, a2, a3, a4);
  v16 = v15 + 80;
  std::vector<CLMicroLocationRapportTable::Entry>::__swap_out_circular_buffer(a1, &v14);
  v12 = a1[1];
  std::__split_buffer<CLMicroLocationRapportTable::Entry>::~__split_buffer(&v14);
  return v12;
}

void sub_241B57C30(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<CLMicroLocationRapportTable::Entry>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

void std::allocator<CLMicroLocationRapportTable::Entry>::construct[abi:ne180100]<CLMicroLocationRapportTable::Entry,std::string const&,CLMicroLocationProto::RapportDevice &,boost::uuids::uuid const&>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  CFAbsoluteTime v8;
  std::string v9;

  if (*(char *)(a3 + 23) < 0)
    std::string::__init_copy_ctor_external(&v9, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  else
    v9 = *(std::string *)a3;
  v8 = cl::chrono::CFAbsoluteTimeClock::now();
  CLMicroLocationRapportTable::Entry::Entry(a2, &v9, a4, a5, &v8);
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v9.__r_.__value_.__l.__data_);
}

void sub_241B57CD0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t CLMicroLocationsMeasurementFilters::isMeasurementGood(CLMicroLocationProto::Measurement *a1, uint64_t a2, double *a3, std::locale::__imp **a4)
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v10;
  double v11;
  double v12;
  float v13;
  __int128 *v14;
  __int128 v15;
  const CLMicroLocationProto::UwbRange *v16;
  _BOOL4 v17;
  NSObject *v18;
  _BOOL4 isAnchorModelValid;
  double v20;
  _BOOL4 v21;
  unsigned int v22;
  _BYTE v24[20];
  float v25;
  int v26;
  std::string buf;
  uint64_t v28;

  v4 = 0;
  v28 = *MEMORY[0x24BDAC8D0];
  switch(*(_DWORD *)(a2 + 64))
  {
    case 1:
      v7 = *(_QWORD *)(a2 + 16);
      if (!v7)
        v7 = *(_QWORD *)(CLMicroLocationProto::Measurement::default_instance(a1) + 16);
      goto LABEL_8;
    case 3:
      v7 = *(_QWORD *)(a2 + 32);
      if (!v7)
        v7 = *(_QWORD *)(CLMicroLocationProto::Measurement::default_instance(a1) + 32);
      goto LABEL_8;
    case 4:
      v7 = *(_QWORD *)(a2 + 40);
      if (!v7)
        v7 = *(_QWORD *)(CLMicroLocationProto::Measurement::default_instance(a1) + 40);
LABEL_8:
      v4 = *a3 >= *(double *)a1 - *(double *)(v7 + 8) && (int)*(float *)(v7 + 20) < 0;
      break;
    case 5:
      v10 = *(_QWORD *)(a2 + 48);
      if (!v10)
        v10 = *(_QWORD *)(CLMicroLocationProto::Measurement::default_instance(a1) + 48);
      v11 = *(double *)a1;
      v12 = *a3;
      v13 = *(float *)(v10 + 20);
      v14 = *(__int128 **)(v10 + 40);
      if (*((char *)v14 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&buf, *(const std::string::value_type **)v14, *((_QWORD *)v14 + 1));
      }
      else
      {
        v15 = *v14;
        buf.__r_.__value_.__r.__words[2] = *((_QWORD *)v14 + 2);
        *(_OWORD *)&buf.__r_.__value_.__l.__data_ = v15;
      }
      isAnchorModelValid = CLMicroLocationsMeasurementFilters::isAnchorModelValid((uint64_t)&buf, a4);
      v20 = *(double *)(v10 + 8);
      if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
        operator delete(buf.__r_.__value_.__l.__data_);
      v21 = v13 >= -100.0;
      if (v13 > -10.0)
        v21 = 0;
      v22 = isAnchorModelValid && v21;
      if (v12 >= v11 - v20)
        v4 = v22;
      else
        v4 = 0;
      break;
    case 6:
      v16 = *(const CLMicroLocationProto::UwbRange **)(a2 + 56);
      if (!v16)
        v16 = *(const CLMicroLocationProto::UwbRange **)(CLMicroLocationProto::Measurement::default_instance(a1) + 56);
      CLMicroLocationProto::UwbRange::UwbRange((CLMicroLocationProto::UwbRange *)v24, v16);
      v17 = v25 > 0.0;
      if (v25 == *MEMORY[0x24BDDFDF0])
        v17 = 0;
      v4 = v26 == 2 && v17;
      if ((v4 & 1) == 0)
      {
        if (onceToken_MicroLocation_Default != -1)
          dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_112);
        v18 = logObject_MicroLocation_Default;
        if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEBUG))
        {
          LODWORD(buf.__r_.__value_.__l.__data_) = 134349312;
          *(double *)((char *)buf.__r_.__value_.__r.__words + 4) = v25;
          WORD2(buf.__r_.__value_.__r.__words[1]) = 1026;
          *(_DWORD *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = v26;
          _os_log_impl(&dword_2419D9000, v18, OS_LOG_TYPE_DEBUG, "Bad uwb range, range %{public}.2f, type %{public}d", (uint8_t *)&buf, 0x12u);
        }
      }
      CLMicroLocationProto::UwbRange::~UwbRange((CLMicroLocationProto::UwbRange *)v24);
      break;
    default:
      return v4;
  }
  return v4;
}

void sub_241B57F6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

CLMicroLocationProto::Measurement *CLMicroLocationsMeasurementFilters::filterMeasurements(CLMicroLocationProto::Measurement *a1, uint64_t a2, double *a3, std::locale::__imp **a4)
{
  uint64_t v5;
  const CLMicroLocationProto::Measurement *v6;
  CLMicroLocationProto::Measurement *v10;
  const CLMicroLocationProto::Measurement *v11;

  v5 = *(_QWORD *)a2;
  v6 = *(const CLMicroLocationProto::Measurement **)(a2 + 8);
  if (*(const CLMicroLocationProto::Measurement **)a2 == v6)
    goto LABEL_13;
  v10 = *(CLMicroLocationProto::Measurement **)(a2 + 8);
  while (CLMicroLocationsMeasurementFilters::isMeasurementGood(a1, v5, a3, a4))
  {
    v5 += 80;
    if ((const CLMicroLocationProto::Measurement *)v5 == v6)
      return std::vector<CLMicroLocationProto::Measurement>::erase(a2, v10, *(CLMicroLocationProto::Measurement **)(a2 + 8));
  }
  if ((const CLMicroLocationProto::Measurement *)v5 != v6)
  {
    v11 = (const CLMicroLocationProto::Measurement *)(v5 + 80);
    if ((const CLMicroLocationProto::Measurement *)(v5 + 80) != v6)
    {
      v10 = (CLMicroLocationProto::Measurement *)v5;
      do
      {
        if (CLMicroLocationsMeasurementFilters::isMeasurementGood(a1, (uint64_t)v11, a3, a4))
        {
          CLMicroLocationProto::Measurement::CopyFrom(v10, v11);
          v10 = (CLMicroLocationProto::Measurement *)((char *)v10 + 80);
        }
        v11 = (const CLMicroLocationProto::Measurement *)((char *)v11 + 80);
      }
      while (v11 != v6);
      return std::vector<CLMicroLocationProto::Measurement>::erase(a2, v10, *(CLMicroLocationProto::Measurement **)(a2 + 8));
    }
LABEL_13:
    v10 = (CLMicroLocationProto::Measurement *)v5;
  }
  return std::vector<CLMicroLocationProto::Measurement>::erase(a2, v10, *(CLMicroLocationProto::Measurement **)(a2 + 8));
}

CLMicroLocationProto::Measurement *std::vector<CLMicroLocationProto::Measurement>::erase(uint64_t a1, CLMicroLocationProto::Measurement *this, CLMicroLocationProto::Measurement *a3)
{
  void (***v5)(_QWORD);
  void (***v6)(_QWORD);
  void (***v7)(_QWORD);
  void (***v8)(_QWORD);
  void (***v9)(_QWORD);
  void (**v10)(_QWORD);
  BOOL v11;

  if (this != a3)
  {
    std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,CLMicroLocationProto::Measurement *,CLMicroLocationProto::Measurement *,CLMicroLocationProto::Measurement *,0>(a3, *(CLMicroLocationProto::Measurement **)(a1 + 8), this);
    v6 = v5;
    v7 = *(void (****)(_QWORD))(a1 + 8);
    if (v7 != v5)
    {
      v8 = v7 - 10;
      v9 = v7 - 10;
      do
      {
        v10 = *v9;
        v9 -= 10;
        (*v10)(v8);
        v11 = v8 == v6;
        v8 = v9;
      }
      while (!v11);
    }
    *(_QWORD *)(a1 + 8) = v6;
  }
  return this;
}

BOOL CLMicroLocationsMeasurementFilters::isAnchorModelValid(uint64_t a1, std::locale::__imp **a2)
{
  std::locale::__imp *v2;
  std::locale::__imp *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BOOL8 result;
  std::locale v9;

  v2 = *a2;
  v3 = a2[1];
  if (*a2 == v3)
    return 0;
  do
  {
    MEMORY[0x2426A0408](&v9);
    v5 = boost::algorithm::ifind_first<std::string const,std::string>(a1, v2, &v9);
    v7 = v6;
    std::locale::~locale(&v9);
    result = v5 != v7;
    if (v5 != v7)
      break;
    v2 = (std::locale::__imp *)((char *)v2 + 24);
  }
  while (v2 != v3);
  return result;
}

void sub_241B58190(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
  std::locale::~locale(&a10);
  _Unwind_Resume(a1);
}

uint64_t boost::algorithm::ifind_first<std::string const,std::string>(uint64_t a1, std::locale::__imp *a2, std::locale *a3)
{
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  std::locale::__imp *v8;
  int v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  std::locale v15;
  std::locale v16[2];
  std::locale v17;
  std::locale v18;

  std::locale::locale(&v15, a3);
  LODWORD(v5) = *((char *)a2 + 23);
  v6 = (int)v5 < 0;
  v7 = *((_QWORD *)a2 + 1);
  if ((int)v5 < 0)
    a2 = *(std::locale::__imp **)a2;
  v5 = v5;
  if (v6)
    v5 = v7;
  v8 = (std::locale::__imp *)((char *)a2 + v5);
  std::locale::locale(&v18, &v15);
  v16[0].__locale_ = a2;
  v16[1].__locale_ = v8;
  std::locale::locale(&v17, &v18);
  std::locale::~locale(&v18);
  v9 = *(char *)(a1 + 23);
  v10 = v9 < 0;
  if (v9 >= 0)
    v11 = a1;
  else
    v11 = *(_QWORD *)a1;
  v12 = *(unsigned __int8 *)(a1 + 23);
  if (v10)
    v12 = *(_QWORD *)(a1 + 8);
  v13 = boost::algorithm::detail::first_finderF<std::__wrap_iter<char const*>,boost::algorithm::is_iequal>::operator()<std::__wrap_iter<char const*>>(v16, v11, v11 + v12);
  std::locale::~locale(&v17);
  std::locale::~locale(&v15);
  return v13;
}

void sub_241B5826C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
  std::locale *v10;

  std::locale::~locale(v10);
  std::locale::~locale(&a10);
  _Unwind_Resume(a1);
}

void ___ZL45_CLLogObjectForCategory_MicroLocation_Defaultv_block_invoke_90()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.MicroLocation", "MicroLocation");
  v1 = (void *)logObject_MicroLocation_Default;
  logObject_MicroLocation_Default = (uint64_t)v0;

}

CLMicroLocationProto::Measurement *std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,CLMicroLocationProto::Measurement *,CLMicroLocationProto::Measurement *,CLMicroLocationProto::Measurement *,0>(CLMicroLocationProto::Measurement *a1, CLMicroLocationProto::Measurement *a2, CLMicroLocationProto::Measurement *this)
{
  const CLMicroLocationProto::Measurement *v4;

  v4 = a1;
  if (a1 != a2)
  {
    do
    {
      CLMicroLocationProto::Measurement::CopyFrom(this, v4);
      v4 = (const CLMicroLocationProto::Measurement *)((char *)v4 + 80);
      this = (CLMicroLocationProto::Measurement *)((char *)this + 80);
    }
    while (v4 != a2);
    return a2;
  }
  return v4;
}

uint64_t boost::algorithm::detail::first_finderF<std::__wrap_iter<char const*>,boost::algorithm::is_iequal>::operator()<std::__wrap_iter<char const*>>(const std::locale *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  const std::locale *v6;
  std::locale::__imp *locale;
  std::locale::__imp *v8;
  uint64_t v9;
  std::locale::__imp *v10;
  uint64_t v11;

  v3 = a2;
  if (a2 != a3)
  {
    v6 = a1 + 2;
    locale = a1[1].__locale_;
    do
    {
      v8 = a1->__locale_;
      if (a1->__locale_ == locale)
        break;
      v9 = 0;
      v10 = a1->__locale_;
      v11 = v3;
      while ((char *)v8 + v9 != (char *)a1[1].__locale_)
      {
        if (!boost::algorithm::is_iequal::operator()<char,char>(v6, (char *)(v3 + v9), (char *)v8 + v9))
          goto LABEL_10;
        ++v11;
        v10 = (std::locale::__imp *)((char *)v10 + 1);
        ++v9;
        if (v3 + v9 == a3)
        {
          v10 = (std::locale::__imp *)((char *)v8 + v9);
          goto LABEL_10;
        }
      }
      v10 = (std::locale::__imp *)((char *)v8 + v9);
LABEL_10:
      locale = a1[1].__locale_;
      if (v10 == locale)
        return v3;
      ++v3;
    }
    while (v3 != a3);
    return a3;
  }
  return v3;
}

BOOL boost::algorithm::is_iequal::operator()<char,char>(const std::locale *a1, char *a2, char *a3)
{
  uint64_t v5;
  std::locale::id *v6;
  const std::locale::facet *v7;
  uint64_t v8;
  const std::locale::facet *v9;

  v5 = *a2;
  v6 = (std::locale::id *)MEMORY[0x24BEDB350];
  v7 = std::locale::use_facet(a1, MEMORY[0x24BEDB350]);
  LODWORD(v5) = ((uint64_t (*)(const std::locale::facet *, uint64_t))v7->__vftable[1].~facet)(v7, v5);
  v8 = *a3;
  v9 = std::locale::use_facet(a1, v6);
  return (_DWORD)v5 == ((unsigned int (*)(const std::locale::facet *, uint64_t))v9->__vftable[1].~facet)(v9, v8);
}

void sub_241B584CC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t CLMiLoHomeSlamAnalyticEventTable::Entry::Entry(uint64_t result, __int16 a2, double a3)
{
  *(double *)result = a3;
  *(_WORD *)(result + 8) = a2;
  return result;
}

void CLMicroLocationEventLogger::CLMicroLocationEventLogger(CLMicroLocationEventLogger *this, ULDatabase *a2)
{
  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = a2;
}

uint64_t CLMicroLocationEventLogger::flushToDisk(CLMicroLocationEventLogger *this)
{
  uint64_t v2;
  unint64_t v3;
  NSObject *v4;
  const __CFString *v5;
  NSObject *v7;
  int v8;
  const __CFString *v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  if (*(_QWORD *)this == *((_QWORD *)this + 1))
    return 1;
  v2 = objc_msgSend(*(id *)(*((_QWORD *)this + 3) + 48), "insertEntries:", this);
  if (!(_DWORD)v2)
  {
    v3 = 0xCF3CF3CF3CF3CF3DLL * ((uint64_t)(*((_QWORD *)this + 1) - *(_QWORD *)this) >> 4);
    if (v3 < ULSettings::get<ULSettings::EventLoggerMaxBufferSize>())
      goto LABEL_6;
    if (onceToken_MicroLocation_Default != -1)
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_113);
    v7 = logObject_MicroLocation_Default;
    if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_ERROR))
    {
      LOWORD(v8) = 0;
      _os_log_impl(&dword_2419D9000, v7, OS_LOG_TYPE_ERROR, "Max buffer reached after failing to flush to disk, clearing event logger buffer.", (uint8_t *)&v8, 2u);
    }
  }
  CLMicroLocationEventLogger::clearBuffer(this);
LABEL_6:
  if (onceToken_MicroLocation_Default != -1)
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_113);
  v4 = logObject_MicroLocation_Default;
  if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
  {
    v5 = CFSTR("fail");
    if ((_DWORD)v2)
      v5 = CFSTR("success");
    v8 = 138412290;
    v9 = v5;
    _os_log_impl(&dword_2419D9000, v4, OS_LOG_TYPE_DEFAULT, "flushToDisk: %@", (uint8_t *)&v8, 0xCu);
  }
  return v2;
}

void CLMicroLocationEventLogger::~CLMicroLocationEventLogger(CLMicroLocationEventLogger *this)
{
  void **v2;

  CLMicroLocationEventLogger::flushToDisk(this);
  v2 = (void **)this;
  std::vector<CLMicroLocationLoggedEventsTable::Entry>::__destroy_vector::operator()[abi:ne180100](&v2);
}

uint64_t CLMicroLocationEventLogger::clearBuffer(CLMicroLocationEventLogger *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)this;
  v2 = *((_QWORD *)this + 1);
  if (v2 != *(_QWORD *)this)
  {
    do
    {
      v4 = v2 - 336;
      CLMicroLocationProto::ReceivedEvent::~ReceivedEvent((CLMicroLocationProto::ReceivedEvent *)(v2 - 304));
      v2 = v4;
    }
    while (v4 != v3);
  }
  *((_QWORD *)this + 1) = v3;
  return std::vector<CLMicroLocationLoggedEventsTable::Entry>::shrink_to_fit((uint64_t)this);
}

uint64_t std::vector<CLMicroLocationLoggedEventsTable::Entry>::shrink_to_fit(uint64_t result)
{
  unint64_t v1;
  int64x2_t v2;
  int64x2_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  uint64_t v14;

  v1 = *(_QWORD *)result;
  v2 = *(int64x2_t *)(result + 8);
  v3 = vshrq_n_s64(vsubq_s64(v2, vdupq_n_s64(*(_QWORD *)result)), 4uLL);
  v4 = 0xCF3CF3CF3CF3CF3DLL * v3.i64[0];
  v5 = v4;
  if (0xCF3CF3CF3CF3CF3DLL * v3.i64[1] > v4)
  {
    v6 = (uint64_t *)result;
    v7 = result + 16;
    v14 = v7;
    if (v2.i64[0] == v1)
    {
      v8 = 0;
      v9 = 0;
    }
    else
    {
      v8 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CLMicroLocationLoggedEventsTable::Entry>>(v7, v4);
    }
    v10 = v8;
    v11 = &v8[336 * v5];
    v12 = v11;
    v13 = &v8[336 * v9];
    std::vector<CLMicroLocationLoggedEventsTable::Entry>::__swap_out_circular_buffer(v6, &v10);
    return std::__split_buffer<CLMicroLocationLoggedEventsTable::Entry>::~__split_buffer((uint64_t)&v10);
  }
  return result;
}

void sub_241B5885C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x241B5884CLL);
}

void ___ZL45_CLLogObjectForCategory_MicroLocation_Defaultv_block_invoke_91()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.MicroLocation", "MicroLocation");
  v1 = (void *)logObject_MicroLocation_Default;
  logObject_MicroLocation_Default = (uint64_t)v0;

}

uint64_t std::vector<CLMicroLocationLoggedEventsTable::Entry>::__emplace_back_slow_path<CLMicroLocationLoggedEventsTable::Entry const&>(uint64_t *a1, __int128 *a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  __int128 v12;
  uint64_t v13;
  _QWORD v15[2];
  char *v16;
  char *v17;
  uint64_t *v18;

  v3 = *a1;
  v4 = 0xCF3CF3CF3CF3CF3DLL * ((a1[1] - *a1) >> 4);
  v5 = v4 + 1;
  if (v4 + 1 > 0xC30C30C30C30C3)
    std::vector<CLMicroLocationProto::ConfidenceReason>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xCF3CF3CF3CF3CF3DLL * ((a1[2] - v3) >> 4);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x61861861861861)
    v9 = 0xC30C30C30C30C3;
  else
    v9 = v5;
  v18 = a1 + 2;
  if (v9)
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CLMicroLocationLoggedEventsTable::Entry>>(v7, v9);
  else
    v10 = 0;
  v11 = &v10[336 * v4];
  v15[0] = v10;
  v15[1] = v11;
  v16 = v11;
  v17 = &v10[336 * v9];
  v12 = *a2;
  *(_OWORD *)(v11 + 12) = *(__int128 *)((char *)a2 + 12);
  *(_OWORD *)v11 = v12;
  CLMicroLocationProto::ReceivedEvent::ReceivedEvent((CLMicroLocationProto::ReceivedEvent *)(v11 + 32), (const CLMicroLocationProto::ReceivedEvent *)(a2 + 2));
  v16 += 336;
  std::vector<CLMicroLocationLoggedEventsTable::Entry>::__swap_out_circular_buffer(a1, v15);
  v13 = a1[1];
  std::__split_buffer<CLMicroLocationLoggedEventsTable::Entry>::~__split_buffer((uint64_t)v15);
  return v13;
}

void sub_241B589CC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<CLMicroLocationLoggedEventsTable::Entry>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t CLMicroLocationErrorHandling::reportError(uint64_t *a1)
{
  NSObject *v2;
  uint64_t *v3;
  uint64_t result;
  uint8_t buf[4];
  uint64_t *v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  if (onceToken_MicroLocation_Default != -1)
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_114);
  v2 = logObject_MicroLocation_Default;
  if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_ERROR))
  {
    if (*((char *)a1 + 23) >= 0)
      v3 = a1;
    else
      v3 = (uint64_t *)*a1;
    *(_DWORD *)buf = 136315138;
    v6 = v3;
    _os_log_impl(&dword_2419D9000, v2, OS_LOG_TYPE_ERROR, "Microlocation error report: %s", buf, 0xCu);
  }
  result = ULSettings::get<ULSettings::AnalyticsSendEventEnabled>();
  if ((_DWORD)result)
    return AnalyticsSendEventLazy();
  return result;
}

void sub_241B58BBC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

id ___ZN28CLMicroLocationErrorHandling11reportErrorERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE_block_invoke(uint64_t a1)
{
  uint64_t *v1;
  void *v2;
  void *v3;
  const __CFString *v5;
  _QWORD v6[2];

  v6[1] = *MEMORY[0x24BDAC8D0];
  v5 = CFSTR("errorType");
  v1 = *(uint64_t **)(a1 + 32);
  if (*((char *)v1 + 23) < 0)
    v1 = (uint64_t *)*v1;
  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", v1);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v6[0] = v2;
  objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", v6, &v5, 1);
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  return v3;
}

void sub_241B58CA4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void CLMicroLocationErrorHandling::reportError(CLMicroLocationErrorHandling *this, NSString *a2)
{
  CLMicroLocationErrorHandling *v2;
  NSObject *v3;
  CLMicroLocationErrorHandling *v4;
  uint8_t buf[4];
  CLMicroLocationErrorHandling *v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v2 = this;
  if (onceToken_MicroLocation_Default != -1)
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_114);
  v3 = logObject_MicroLocation_Default;
  if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 138412290;
    v6 = v2;
    _os_log_impl(&dword_2419D9000, v3, OS_LOG_TYPE_ERROR, "Microlocation error report: %@", buf, 0xCu);
  }
  if (ULSettings::get<ULSettings::AnalyticsSendEventEnabled>())
  {
    v4 = v2;
    AnalyticsSendEventLazy();

  }
}

void sub_241B58DDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;

  _Unwind_Resume(a1);
}

id ___ZN28CLMicroLocationErrorHandling11reportErrorEP8NSString_block_invoke(uint64_t a1)
{
  uint64_t v1;
  const __CFString *v3;
  _QWORD v4[2];

  v4[1] = *MEMORY[0x24BDAC8D0];
  v1 = *(_QWORD *)(a1 + 32);
  v3 = CFSTR("errorType");
  v4[0] = v1;
  objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", v4, &v3, 1);
  return (id)objc_claimAutoreleasedReturnValue();
}

void ___ZL45_CLLogObjectForCategory_MicroLocation_Defaultv_block_invoke_92()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.MicroLocation", "MicroLocation");
  v1 = (void *)logObject_MicroLocation_Default;
  logObject_MicroLocation_Default = (uint64_t)v0;

}

uint64_t CLMicroLocationFingerprintDatabaseSource::CLMicroLocationFingerprintDatabaseSource(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  char **v6;
  uint64_t v7;
  _OWORD *v11;
  _OWORD *v12;
  id v13;
  void **v14;
  unint64_t v15;
  _OWORD *v16;
  _OWORD *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  char *v23;
  char *v24;
  char *v25;
  char *v26;
  uint64_t v28;
  uint64_t v29[3];
  __int128 v30;
  char v31;
  _OWORD v32[9];
  char v33;
  void **v34;
  void **v35;
  void **v36;
  char v37;
  uint64_t v38;

  v38 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)a1 = &off_2511DB0C0;
  *(_QWORD *)(a1 + 8) = 0;
  v6 = (char **)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  v7 = *(_QWORD *)(a3 + 24);
  if (!v7)
    std::__throw_bad_function_call[abi:ne180100]();
  (*(void (**)(uint64_t))(*(_QWORD *)v7 + 48))(v7);
  v28 = a1 + 88;
  std::__function::__value_func<double ()(CLMicroLocationFingerprint const&,CLMicroLocationFingerprint const&)>::__value_func[abi:ne180100](a1 + 88, a2);
  *(_BYTE *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 120) = a5;
  *(_BYTE *)(a1 + 320) = 0;
  v11 = *(_OWORD **)a4;
  v12 = *(_OWORD **)(a4 + 8);
  if (*(_OWORD **)a4 != v12)
  {
    do
    {
      v13 = *(id *)(*(_QWORD *)(a1 + 120) + 64);
      v32[0] = *v11;
      v14 = (void **)operator new(0x10uLL);
      v35 = v14 + 2;
      v36 = v14 + 2;
      *(_OWORD *)v14 = v32[0];
      v34 = v14;
      if (v13)
      {
        objc_msgSend(v13, "fetchMeasurementsForRecordingUUIDs:", &v34, v28);
        v14 = v34;
        if (!v34)
          goto LABEL_8;
      }
      else
      {
        memset(v29, 0, sizeof(v29));
      }
      v35 = v14;
      operator delete(v14);
LABEL_8:

      CLMicroLocationProto::RecordingEvent::RecordingEvent((CLMicroLocationProto::RecordingEvent *)v32, (const CLMicroLocationProto::RecordingEvent *)(v11 + 5));
      v33 = 1;
      v30 = *v11;
      v31 = 1;
      CLMicroLocationFingerprint::create(v29, (uint64_t)v32, (uint64_t)&v30, (unint64_t *)(a1 + 32), &v34);
      if (v33)
        CLMicroLocationProto::RecordingEvent::~RecordingEvent((CLMicroLocationProto::RecordingEvent *)v32);
      if (v37)
      {
        v16 = *(_OWORD **)(a1 + 16);
        v15 = *(_QWORD *)(a1 + 24);
        if ((unint64_t)v16 >= v15)
        {
          v18 = ((char *)v16 - *v6) >> 4;
          v19 = v18 + 1;
          if ((unint64_t)(v18 + 1) >> 60)
            std::vector<CLMicroLocationProto::ConfidenceReason>::__throw_length_error[abi:ne180100]();
          v20 = v15 - (_QWORD)*v6;
          if (v20 >> 3 > v19)
            v19 = v20 >> 3;
          if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF0)
            v21 = 0xFFFFFFFFFFFFFFFLL;
          else
            v21 = v19;
          if (v21)
            v22 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<boost::uuids::uuid>>(a1 + 24, v21);
          else
            v22 = 0;
          v23 = &v22[16 * v18];
          *(_OWORD *)v23 = *v11;
          v25 = *(char **)(a1 + 8);
          v24 = *(char **)(a1 + 16);
          v26 = v23;
          if (v24 != v25)
          {
            do
            {
              *((_OWORD *)v26 - 1) = *((_OWORD *)v24 - 1);
              v26 -= 16;
              v24 -= 16;
            }
            while (v24 != v25);
            v24 = *v6;
          }
          v17 = v23 + 16;
          *(_QWORD *)(a1 + 8) = v26;
          *(_QWORD *)(a1 + 16) = v23 + 16;
          *(_QWORD *)(a1 + 24) = &v22[16 * v21];
          if (v24)
            operator delete(v24);
        }
        else
        {
          *v16 = *v11;
          v17 = v16 + 1;
        }
        *(_QWORD *)(a1 + 16) = v17;
      }
      std::__optional_destruct_base<CLMicroLocationFingerprint,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v34);
      v34 = (void **)v29;
      std::vector<CLMicroLocationMeasurementTable::Entry>::__destroy_vector::operator()[abi:ne180100](&v34);
      v11 = (_OWORD *)((char *)v11 + 248);
    }
    while (v11 != v12);
  }
  return a1;
}

void sub_241B5913C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,void *__p,uint64_t a37)
{
  uint64_t v37;
  void **v38;
  void *v40;

  std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>>>::~__hash_table(v37 + 48);
  v40 = *v38;
  if (*v38)
  {
    *(_QWORD *)(v37 + 16) = v40;
    operator delete(v40);
  }
  _Unwind_Resume(a1);
}

uint64_t CLMicroLocationFingerprintDatabaseSource::size(CLMicroLocationFingerprintDatabaseSource *this)
{
  return (uint64_t)(*((_QWORD *)this + 2) - *((_QWORD *)this + 1)) >> 4;
}

uint64_t CLMicroLocationFingerprintDatabaseSource::at(CLMicroLocationFingerprintDatabaseSource *this, unint64_t a2)
{
  uint64_t v3;
  id v5;
  _OWORD *v6;
  id v7;
  _OWORD *v8;
  __int128 *v9;
  std::runtime_error *exception;
  unint64_t v12;
  std::runtime_error *v13;
  std::string *v14;
  __int128 v15;
  std::runtime_error *v16;
  std::string v17;
  _BYTE v18[144];
  char v19;
  uint64_t v20[3];
  uint64_t v21[3];
  std::string v22;
  __int128 v23;
  char v24;
  std::string v25;
  __int128 v26;
  uint64_t v27;

  v27 = *MEMORY[0x24BDAC8D0];
  v3 = *((_QWORD *)this + 14);
  if (!v3)
    std::__throw_bad_function_call[abi:ne180100]();
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v3 + 48))(v3))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v12 = a2;
    v13 = exception;
    std::to_string(&v25, v12);
    v14 = std::string::insert(&v25, 0, "Data Source Cancelled at index ");
    v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
    v22.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v22.__r_.__value_.__l.__data_ = v15;
    v14->__r_.__value_.__l.__size_ = 0;
    v14->__r_.__value_.__r.__words[2] = 0;
    v14->__r_.__value_.__r.__words[0] = 0;
    CLMicroLocationFingerprintDataSources::IInterruptibleDataSource::CancelledException::CancelledException(v13, &v22);
  }
  v26 = *(_OWORD *)(*((_QWORD *)this + 1) + 16 * a2);
  v5 = *(id *)(*((_QWORD *)this + 15) + 64);
  v6 = operator new(0x10uLL);
  v25.__r_.__value_.__l.__size_ = (std::string::size_type)(v6 + 1);
  v25.__r_.__value_.__r.__words[2] = (std::string::size_type)(v6 + 1);
  *v6 = v26;
  v25.__r_.__value_.__r.__words[0] = (std::string::size_type)v6;
  if (!v5)
  {
    memset(v21, 0, sizeof(v21));
    goto LABEL_7;
  }
  objc_msgSend(v5, "fetchMeasurementsForRecordingUUIDs:", &v25);
  v6 = (_OWORD *)v25.__r_.__value_.__r.__words[0];
  if (v25.__r_.__value_.__r.__words[0])
  {
LABEL_7:
    v25.__r_.__value_.__l.__size_ = (std::string::size_type)v6;
    operator delete(v6);
  }

  v7 = *(id *)(*((_QWORD *)this + 15) + 88);
  v8 = operator new(0x10uLL);
  v25.__r_.__value_.__l.__size_ = (std::string::size_type)(v8 + 1);
  v25.__r_.__value_.__r.__words[2] = (std::string::size_type)(v8 + 1);
  *v8 = v26;
  v25.__r_.__value_.__r.__words[0] = (std::string::size_type)v8;
  if (!v7)
  {
    memset(v20, 0, sizeof(v20));
    goto LABEL_12;
  }
  objc_msgSend(v7, "fetchRecordingEventsForRecordingUUIDs:", &v25);
  v8 = (_OWORD *)v25.__r_.__value_.__r.__words[0];
  if (v25.__r_.__value_.__r.__words[0])
  {
LABEL_12:
    v25.__r_.__value_.__l.__size_ = (std::string::size_type)v8;
    operator delete(v8);
  }

  v9 = (__int128 *)v20[0];
  CLMicroLocationsMeasurementFilters::filterStaleWiFiMeasurementsForFingerprint<CLMicroLocationMeasurementTable::Entry>(v21, v20[0]);
  CLMicroLocationProto::RecordingEvent::RecordingEvent((CLMicroLocationProto::RecordingEvent *)v18, (const CLMicroLocationProto::RecordingEvent *)(v9 + 5));
  v19 = 1;
  v23 = *v9;
  v24 = 1;
  CLMicroLocationFingerprint::create(v21, (uint64_t)v18, (uint64_t)&v23, (unint64_t *)this + 4, &v25);
  std::__optional_storage_base<CLMicroLocationFingerprint,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<CLMicroLocationFingerprint,false>>((uint64_t)this + 128, (uint64_t)&v25);
  std::__optional_destruct_base<CLMicroLocationFingerprint,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v25);
  if (v19)
    CLMicroLocationProto::RecordingEvent::~RecordingEvent((CLMicroLocationProto::RecordingEvent *)v18);
  if (!*((_BYTE *)this + 320))
  {
    v16 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::string::basic_string[abi:ne180100]<0>(&v17, "fFingerprintCache optional is empty, database likely changed since data source construction");
    CLMicroLocationFingerprintDataSources::IInterruptibleDataSource::CancelledException::CancelledException(v16, &v17);
  }
  usleep(0x12Cu);
  v25.__r_.__value_.__r.__words[0] = (std::string::size_type)v20;
  std::vector<CLMicroLocationRecordingEventsTable::Entry>::__destroy_vector::operator()[abi:ne180100]((void ***)&v25);
  v25.__r_.__value_.__r.__words[0] = (std::string::size_type)v21;
  std::vector<CLMicroLocationMeasurementTable::Entry>::__destroy_vector::operator()[abi:ne180100]((void ***)&v25);
  return (uint64_t)this + 128;
}

void sub_241B594D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,uint64_t a39,char a40,uint64_t a41,uint64_t a42,void *__p,uint64_t a44,int a45,__int16 a46,char a47,char a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,void *a53,uint64_t a54,int a55,__int16 a56,char a57,char a58)
{
  void *v58;
  int v59;

  if (a48 < 0)
    operator delete(__p);
  if (a58 < 0)
  {
    operator delete(a53);
    if ((v59 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v59)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v58);
  goto LABEL_8;
}

void CLMicroLocationFingerprintDatabaseSource::~CLMicroLocationFingerprintDatabaseSource(CLMicroLocationFingerprintDatabaseSource *this)
{
  CLMicroLocationFingerprintDatabaseSource *v2;
  uint64_t v3;
  void *v4;

  *(_QWORD *)this = &off_2511DB0C0;
  std::__optional_destruct_base<CLMicroLocationFingerprint,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)this + 128);
  v2 = (CLMicroLocationFingerprintDatabaseSource *)*((_QWORD *)this + 14);
  if (v2 == (CLMicroLocationFingerprintDatabaseSource *)((char *)this + 88))
  {
    v3 = 4;
    v2 = (CLMicroLocationFingerprintDatabaseSource *)((char *)this + 88);
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v2 + 8 * v3))();
LABEL_6:
  std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>>>::~__hash_table((uint64_t)this + 48);
  v4 = (void *)*((_QWORD *)this + 1);
  if (v4)
  {
    *((_QWORD *)this + 2) = v4;
    operator delete(v4);
  }
}

{
  CLMicroLocationFingerprintDatabaseSource *v2;
  uint64_t v3;
  void *v4;

  *(_QWORD *)this = &off_2511DB0C0;
  std::__optional_destruct_base<CLMicroLocationFingerprint,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)this + 128);
  v2 = (CLMicroLocationFingerprintDatabaseSource *)*((_QWORD *)this + 14);
  if (v2 == (CLMicroLocationFingerprintDatabaseSource *)((char *)this + 88))
  {
    v3 = 4;
    v2 = (CLMicroLocationFingerprintDatabaseSource *)((char *)this + 88);
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v2 + 8 * v3))();
LABEL_6:
  std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>>>::~__hash_table((uint64_t)this + 48);
  v4 = (void *)*((_QWORD *)this + 1);
  if (v4)
  {
    *((_QWORD *)this + 2) = v4;
    operator delete(v4);
  }
  JUMPOUT(0x2426A04D4);
}

void CLMicroLocationStateMachine::EventBase::getEventName(CLMicroLocationStateMachine::EventBase *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 31) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 1), *((_QWORD *)this + 2));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 8);
    a2->__r_.__value_.__r.__words[2] = *((_QWORD *)this + 3);
  }
}

CLMicroLocationStateMachine::StateBase *CLMicroLocationStateMachine::StateBase::StateBase(CLMicroLocationStateMachine::StateBase *this, char a2)
{
  NSObject *v4;
  _DWORD v6[2];
  __int16 v7;
  const char *v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)this = &off_2511DB108;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)this + 1, "No Name Given");
  *((_QWORD *)this + 7) = 0;
  *((_QWORD *)this + 6) = (char *)this + 56;
  *((_BYTE *)this + 32) = 0;
  *((_QWORD *)this + 8) = 0;
  if (onceToken_MicroLocation_Default != -1)
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_115);
  v4 = logObject_MicroLocation_Default;
  if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_INFO))
  {
    v6[0] = 68289026;
    v6[1] = 0;
    v7 = 2082;
    v8 = "";
    _os_log_impl(&dword_2419D9000, v4, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"StateBase\"}", (uint8_t *)v6, 0x12u);
  }
  *((_BYTE *)this + 32) = a2;
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 9) = 0;
  std::__tree<std::string>::destroy((uint64_t)this + 48, *((char **)this + 7));
  *((_QWORD *)this + 7) = 0;
  *((_QWORD *)this + 8) = 0;
  *((_QWORD *)this + 6) = (char *)this + 56;
  *((_QWORD *)this + 10) = 0;
  return this;
}

void CLMicroLocationStateMachine::StateBase::~StateBase(CLMicroLocationStateMachine::StateBase *this)
{
  NSObject *v2;
  char *v3;
  _DWORD v4[2];
  __int16 v5;
  const char *v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)this = &off_2511DB108;
  if (onceToken_MicroLocation_Default != -1)
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_115);
  v2 = logObject_MicroLocation_Default;
  if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_INFO))
  {
    v4[0] = 68289026;
    v4[1] = 0;
    v5 = 2082;
    v6 = "";
    _os_log_impl(&dword_2419D9000, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"~StateBase\"}", (uint8_t *)v4, 0x12u);
  }
  v3 = (char *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 9) = 0;
  std::__tree<std::string>::destroy((uint64_t)this + 48, v3);
  *((_QWORD *)this + 6) = (char *)this + 56;
  *((_QWORD *)this + 7) = 0;
  *((_QWORD *)this + 8) = 0;
  *((_QWORD *)this + 10) = 0;
  std::__tree<std::string>::destroy((uint64_t)this + 48, 0);
  if (*((char *)this + 31) < 0)
    operator delete(*((void **)this + 1));
}

{
  CLMicroLocationStateMachine::StateBase::~StateBase(this);
  JUMPOUT(0x2426A04D4);
}

CLMicroLocationStateMachine::StateMachineBase *CLMicroLocationStateMachine::StateMachineBase::StateMachineBase(CLMicroLocationStateMachine::StateMachineBase *this)
{
  _QWORD *v2;
  _QWORD *v3;

  *(_QWORD *)this = &unk_2511DB128;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 3) = 0;
  v2 = (_QWORD *)((char *)this + 24);
  *((_QWORD *)this + 2) = (char *)this + 24;
  v3 = (_QWORD *)((char *)this + 16);
  std::__tree<std::__value_type<std::string,std::unique_ptr<CLMicroLocationStateMachine::StateBase>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<CLMicroLocationStateMachine::StateBase>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<CLMicroLocationStateMachine::StateBase>>>>::destroy((uint64_t)this + 16, 0);
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = 0;
  *v3 = v2;
  *v2 = 0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 6) = 0;
  return this;
}

void CLMicroLocationStateMachine::StateMachineBase::~StateMachineBase(CLMicroLocationStateMachine::StateMachineBase *this)
{
  NSObject *v2;
  CLMicroLocationStateMachine::StateMachineBase *v3;
  uint64_t v4;
  CLMicroLocationStateMachine::StateMachineBase *v5;
  CLMicroLocationStateMachine::StateMachineBase *v6;
  BOOL v7;
  _DWORD v8[2];
  __int16 v9;
  const char *v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)this = &unk_2511DB128;
  if (onceToken_MicroLocation_Default != -1)
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_115);
  v2 = logObject_MicroLocation_Default;
  if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_INFO))
  {
    v8[0] = 68289026;
    v8[1] = 0;
    v9 = 2082;
    v10 = "";
    _os_log_impl(&dword_2419D9000, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"~StateMachineBase\"}", (uint8_t *)v8, 0x12u);
  }
  v3 = (CLMicroLocationStateMachine::StateMachineBase *)*((_QWORD *)this + 2);
  if (v3 != (CLMicroLocationStateMachine::StateMachineBase *)((char *)this + 24))
  {
    do
    {
      v4 = *((_QWORD *)v3 + 7);
      *((_QWORD *)v3 + 7) = 0;
      if (v4)
        (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
      v5 = (CLMicroLocationStateMachine::StateMachineBase *)*((_QWORD *)v3 + 1);
      if (v5)
      {
        do
        {
          v6 = v5;
          v5 = *(CLMicroLocationStateMachine::StateMachineBase **)v5;
        }
        while (v5);
      }
      else
      {
        do
        {
          v6 = (CLMicroLocationStateMachine::StateMachineBase *)*((_QWORD *)v3 + 2);
          v7 = *(_QWORD *)v6 == (_QWORD)v3;
          v3 = v6;
        }
        while (!v7);
      }
      v3 = v6;
    }
    while (v6 != (CLMicroLocationStateMachine::StateMachineBase *)((char *)this + 24));
  }
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 6) = 0;
  std::__tree<std::__value_type<std::string,std::unique_ptr<CLMicroLocationStateMachine::StateBase>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<CLMicroLocationStateMachine::StateBase>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<CLMicroLocationStateMachine::StateBase>>>>::destroy((uint64_t)this + 16, *((_QWORD **)this + 3));
}

uint64_t CLMicroLocationStateMachine::StateMachineBase::addStateToStateMap(uint64_t a1, __int128 *a2, uint64_t *a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t result;
  __int128 *v7;

  v7 = a2;
  v4 = std::__tree<std::__value_type<std::string,std::unique_ptr<CLMicroLocationStateMachine::StateBase>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<CLMicroLocationStateMachine::StateBase>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<CLMicroLocationStateMachine::StateBase>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a1 + 16), (const void **)a2, (uint64_t)&std::piecewise_construct, &v7);
  v5 = *a3;
  *a3 = 0;
  result = v4[7];
  v4[7] = v5;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void CLMicroLocationStateMachine::StateMachineBase::setInitialState(CLMicroLocationStateMachine::StateMachineBase *a1, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t v4;
  CLMicroLocationStateMachine::StateBase *v5;
  NSObject *v6;
  uint64_t *v7;
  NSObject *v8;
  std::string __p;
  uint8_t buf[4];
  int v11;
  __int16 v12;
  const char *v13;
  __int16 v14;
  uint64_t *v15;
  uint64_t v16;

  v2 = a2;
  v16 = *MEMORY[0x24BDAC8D0];
  if (*((char *)a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&__p, (const std::string::value_type *)*a2, a2[1]);
  else
    __p = *(std::string *)a2;
  v4 = std::__tree<std::__value_type<std::string,CLSqliteDatabaseManager::ConnectionState>,std::__map_value_compare<std::string,std::__value_type<std::string,CLSqliteDatabaseManager::ConnectionState>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CLSqliteDatabaseManager::ConnectionState>>>::find<std::string>((uint64_t)a1 + 16, (const void **)&__p.__r_.__value_.__l.__data_);
  if ((CLMicroLocationStateMachine::StateMachineBase *)((char *)a1 + 24) == (CLMicroLocationStateMachine::StateMachineBase *)v4)
    v5 = 0;
  else
    v5 = *(CLMicroLocationStateMachine::StateBase **)(v4 + 56);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if (v5)
      goto LABEL_9;
  }
  else if (v5)
  {
LABEL_9:
    CLMicroLocationStateMachine::StateMachineBase::enterNewState(a1, v5);
    return;
  }
  if (onceToken_MicroLocation_Default != -1)
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_115);
  v6 = logObject_MicroLocation_Default;
  if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_ERROR))
  {
    v7 = v2;
    if (*((char *)v2 + 23) < 0)
      v7 = (uint64_t *)*v2;
    *(_DWORD *)buf = 68289283;
    v11 = 0;
    v12 = 2082;
    v13 = "";
    v14 = 2081;
    v15 = v7;
    _os_log_impl(&dword_2419D9000, v6, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"State Machine: Failed to initialize state because requested state doesn't exist in the state table\", \"State\":%{private, location:escape_only}s}", buf, 0x1Cu);
  }
  if (onceToken_MicroLocation_Default != -1)
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_115);
  v8 = logObject_MicroLocation_Default;
  if (os_signpost_enabled((os_log_t)logObject_MicroLocation_Default))
  {
    if (*((char *)v2 + 23) < 0)
      v2 = (uint64_t *)*v2;
    *(_DWORD *)buf = 68289283;
    v11 = 0;
    v12 = 2082;
    v13 = "";
    v14 = 2081;
    v15 = v2;
    _os_signpost_emit_with_name_impl(&dword_2419D9000, v8, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "State Machine: Failed to initialize state because requested state doesn't exist in the state table", "{\"msg%{public}.0s\":\"State Machine: Failed to initialize state because requested state doesn't exist in the state table\", \"State\":%{private, location:escape_only}s}", buf, 0x1Cu);
  }
}

void sub_241B59E28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  _Unwind_Resume(exception_object);
}

void CLMicroLocationStateMachine::StateMachineBase::enterNewState(CLMicroLocationStateMachine::StateMachineBase *this, CLMicroLocationStateMachine::StateBase *a2)
{
  NSObject *v4;
  _QWORD *v5;
  uint64_t v6;
  void (***v7)(_QWORD, CLMicroLocationStateMachine::StateMachineBase *);
  NSObject *v8;
  uint64_t v9;
  _QWORD *v10;
  int v11;
  int v12;
  __int16 v13;
  const char *v14;
  __int16 v15;
  _QWORD *v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  if (onceToken_MicroLocation_Default != -1)
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_115);
  v4 = logObject_MicroLocation_Default;
  if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
  {
    v5 = (_QWORD *)((char *)a2 + 8);
    if (*((char *)a2 + 31) < 0)
      v5 = (_QWORD *)*v5;
    v11 = 68289283;
    v12 = 0;
    v13 = 2082;
    v14 = "";
    v15 = 2081;
    v16 = v5;
    _os_log_impl(&dword_2419D9000, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"State Machine: Entering new state\", \"New State\":%{private, location:escape_only}s}", (uint8_t *)&v11, 0x1Cu);
  }
  v6 = *((_QWORD *)this + 1);
  if (v6 && *(_BYTE *)(v6 + 32))
    *((_QWORD *)this + 6) = v6;
  *((_QWORD *)this + 5) = v6;
  *((_QWORD *)this + 1) = a2;
  v7 = (void (***)(_QWORD, CLMicroLocationStateMachine::StateMachineBase *))*((_QWORD *)a2 + 5);
  if (v7)
  {
    (**v7)(v7, this);
  }
  else
  {
    if (onceToken_MicroLocation_Default != -1)
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_115);
    v8 = logObject_MicroLocation_Default;
    if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_INFO))
    {
      v9 = *((_QWORD *)this + 1);
      v10 = (_QWORD *)(v9 + 8);
      if (*(char *)(v9 + 31) < 0)
        v10 = (_QWORD *)*v10;
      v11 = 68289283;
      v12 = 0;
      v13 = 2082;
      v14 = "";
      v15 = 2081;
      v16 = v10;
      _os_log_impl(&dword_2419D9000, v8, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"State Machine: State did not have an entry function\", \"State\":%{private, location:escape_only}s}", (uint8_t *)&v11, 0x1Cu);
    }
  }
}

uint64_t CLMicroLocationStateMachine::StateMachineBase::handleEvent(CLMicroLocationStateMachine::StateMachineBase *this, CLMicroLocationStateMachine::EventBase *a2)
{
  NSObject *v4;
  NSObject *v5;
  _BYTE *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _OWORD *v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  NSObject *v14;
  _BOOL4 v15;
  _BOOL4 v16;
  NSObject *v17;
  _BYTE *v18;
  _BYTE *v19;
  NSObject *v20;
  _BYTE *v21;
  _QWORD *v22;
  CLMicroLocationStateMachine::StateBase *v23;
  NSObject *v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  NSObject *v28;
  _BYTE *v29;
  NSObject *v30;
  _BYTE *v31;
  _BYTE *v32;
  uint64_t v33;
  _QWORD *v34;
  _BYTE *v35;
  uint64_t v36;
  _QWORD *v37;
  std::string __p;
  _BYTE v40[28];
  _BYTE buf[28];
  __int16 v42;
  _QWORD *v43;
  uint64_t v44;

  v44 = *MEMORY[0x24BDAC8D0];
  if (!*((_QWORD *)this + 1))
  {
    if (onceToken_MicroLocation_Default != -1)
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_115);
    v5 = (id)logObject_MicroLocation_Default;
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      if (*((char *)a2 + 31) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)v40, *((const std::string::value_type **)a2 + 1), *((_QWORD *)a2 + 2));
      }
      else
      {
        *(_OWORD *)v40 = *(_OWORD *)((char *)a2 + 8);
        *(_QWORD *)&v40[16] = *((_QWORD *)a2 + 3);
      }
      v19 = v40;
      if (v40[23] < 0)
        v19 = *(_BYTE **)v40;
      *(_DWORD *)buf = 68289283;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)&buf[8] = 2082;
      *(_QWORD *)&buf[10] = "";
      *(_WORD *)&buf[18] = 2081;
      *(_QWORD *)&buf[20] = v19;
      _os_log_impl(&dword_2419D9000, v5, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"State Machine: Failed to handle event because current state is NULL\", \"Event\":%{private, location:escape_only}s}", buf, 0x1Cu);
      if ((v40[23] & 0x80000000) != 0)
        operator delete(*(void **)v40);
    }

    if (onceToken_MicroLocation_Default != -1)
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_115);
    v20 = (id)logObject_MicroLocation_Default;
    if (os_signpost_enabled(v20))
    {
      if (*((char *)a2 + 31) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)v40, *((const std::string::value_type **)a2 + 1), *((_QWORD *)a2 + 2));
      }
      else
      {
        *(_OWORD *)v40 = *(_OWORD *)((char *)a2 + 8);
        *(_QWORD *)&v40[16] = *((_QWORD *)a2 + 3);
      }
      v21 = v40;
      if (v40[23] < 0)
        v21 = *(_BYTE **)v40;
      *(_DWORD *)buf = 68289283;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)&buf[8] = 2082;
      *(_QWORD *)&buf[10] = "";
      *(_WORD *)&buf[18] = 2081;
      *(_QWORD *)&buf[20] = v21;
      _os_signpost_emit_with_name_impl(&dword_2419D9000, v20, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "State Machine: Failed to handle event because current state is NULL", "{\"msg%{public}.0s\":\"State Machine: Failed to handle event because current state is NULL\", \"Event\":%{private, location:escape_only}s}", buf, 0x1Cu);
      if ((v40[23] & 0x80000000) != 0)
        operator delete(*(void **)v40);
    }
    goto LABEL_116;
  }
  if (onceToken_MicroLocation_Default != -1)
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_115);
  v4 = (id)logObject_MicroLocation_Default;
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    if (*((char *)a2 + 31) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)v40, *((const std::string::value_type **)a2 + 1), *((_QWORD *)a2 + 2));
    }
    else
    {
      *(_OWORD *)v40 = *(_OWORD *)((char *)a2 + 8);
      *(_QWORD *)&v40[16] = *((_QWORD *)a2 + 3);
    }
    v6 = v40;
    if (v40[23] < 0)
      v6 = *(_BYTE **)v40;
    v7 = *((_QWORD *)this + 1);
    v8 = (_QWORD *)(v7 + 8);
    if (*(char *)(v7 + 31) < 0)
      v8 = (_QWORD *)*v8;
    *(_DWORD *)buf = 68289539;
    *(_DWORD *)&buf[4] = 0;
    *(_WORD *)&buf[8] = 2082;
    *(_QWORD *)&buf[10] = "";
    *(_WORD *)&buf[18] = 2081;
    *(_QWORD *)&buf[20] = v6;
    v42 = 2081;
    v43 = v8;
    _os_log_impl(&dword_2419D9000, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"State Machine: Handling Event\", \"Event\":%{private, location:escape_only}s, \"Current State\":%{private, location:escape_only}s}", buf, 0x26u);
    if ((v40[23] & 0x80000000) != 0)
      operator delete(*(void **)v40);
  }

  v9 = *((_QWORD *)this + 1);
  v10 = (_OWORD *)((char *)a2 + 8);
  if (*((char *)a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)buf, *((const std::string::value_type **)a2 + 1), *((_QWORD *)a2 + 2));
  }
  else
  {
    *(_OWORD *)buf = *v10;
    *(_QWORD *)&buf[16] = *((_QWORD *)a2 + 3);
  }
  v11 = std::__tree<std::__value_type<std::string,CLSqliteDatabaseManager::ConnectionState>,std::__map_value_compare<std::string,std::__value_type<std::string,CLSqliteDatabaseManager::ConnectionState>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CLSqliteDatabaseManager::ConnectionState>>>::find<std::string>(v9 + 48, (const void **)buf);
  if ((buf[23] & 0x80000000) != 0)
    operator delete(*(void **)buf);
  if (*((_QWORD *)this + 1) + 56 == v11)
  {
    if (onceToken_MicroLocation_Default != -1)
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_115);
    v14 = (id)logObject_MicroLocation_Default;
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      if (*((char *)a2 + 31) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)v40, *((const std::string::value_type **)a2 + 1), *((_QWORD *)a2 + 2));
      }
      else
      {
        *(_OWORD *)v40 = *v10;
        *(_QWORD *)&v40[16] = *((_QWORD *)a2 + 3);
      }
      v32 = v40;
      if (v40[23] < 0)
        v32 = *(_BYTE **)v40;
      v33 = *((_QWORD *)this + 1);
      v34 = (_QWORD *)(v33 + 8);
      if (*(char *)(v33 + 31) < 0)
        v34 = (_QWORD *)*v34;
      *(_DWORD *)buf = 68289539;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)&buf[8] = 2082;
      *(_QWORD *)&buf[10] = "";
      *(_WORD *)&buf[18] = 2081;
      *(_QWORD *)&buf[20] = v32;
      v42 = 2081;
      v43 = v34;
      _os_log_impl(&dword_2419D9000, v14, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"State Machine: Failed to handle event because it is not a valid event for the current state\", \"Event\":%{private, location:escape_only}s, \"Current State\":%{private, location:escape_only}s}", buf, 0x26u);
      if ((v40[23] & 0x80000000) != 0)
        operator delete(*(void **)v40);
    }

    if (onceToken_MicroLocation_Default != -1)
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_115);
    v20 = (id)logObject_MicroLocation_Default;
    if (os_signpost_enabled(v20))
    {
      if (*((char *)a2 + 31) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)v40, *((const std::string::value_type **)a2 + 1), *((_QWORD *)a2 + 2));
      }
      else
      {
        *(_OWORD *)v40 = *v10;
        *(_QWORD *)&v40[16] = *((_QWORD *)a2 + 3);
      }
      v35 = v40;
      if (v40[23] < 0)
        v35 = *(_BYTE **)v40;
      v36 = *((_QWORD *)this + 1);
      v37 = (_QWORD *)(v36 + 8);
      if (*(char *)(v36 + 31) < 0)
        v37 = (_QWORD *)*v37;
      *(_DWORD *)buf = 68289539;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)&buf[8] = 2082;
      *(_QWORD *)&buf[10] = "";
      *(_WORD *)&buf[18] = 2081;
      *(_QWORD *)&buf[20] = v35;
      v42 = 2081;
      v43 = v37;
      _os_signpost_emit_with_name_impl(&dword_2419D9000, v20, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "State Machine: Failed to handle event because it is not a valid event for the current state", "{\"msg%{public}.0s\":\"State Machine: Failed to handle event because it is not a valid event for the current state\", \"Event\":%{private, location:escape_only}s, \"Current State\":%{private, location:escape_only}s}", buf, 0x26u);
      if ((v40[23] & 0x80000000) != 0)
        operator delete(*(void **)v40);
    }
LABEL_116:

    return 0;
  }
  (***(void (****)(_BYTE *__return_ptr, _QWORD, CLMicroLocationStateMachine::StateMachineBase *, CLMicroLocationStateMachine::EventBase *))(v11 + 56))(buf, *(_QWORD *)(v11 + 56), this, a2);
  if (!buf[24])
  {
LABEL_72:
    if (onceToken_MicroLocation_Default != -1)
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_115);
    v24 = logObject_MicroLocation_Default;
    if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
    {
      v25 = *((_QWORD *)this + 1);
      v26 = (_QWORD *)(v25 + 8);
      if (*(char *)(v25 + 31) < 0)
        v26 = (_QWORD *)*v26;
      *(_QWORD *)v40 = 68289283;
      *(_WORD *)&v40[8] = 2082;
      *(_QWORD *)&v40[10] = "";
      *(_WORD *)&v40[18] = 2081;
      *(_QWORD *)&v40[20] = v26;
      _os_log_impl(&dword_2419D9000, v24, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"State Machine: \", \"New State\":%{private, location:escape_only}s}", v40, 0x1Cu);
    }
    goto LABEL_78;
  }
  v12 = *((_QWORD *)this + 1);
  if (*(char *)(v12 + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)v40, *(const std::string::value_type **)(v12 + 8), *(_QWORD *)(v12 + 16));
  }
  else
  {
    v13 = *(_OWORD *)(v12 + 8);
    *(_QWORD *)&v40[16] = *(_QWORD *)(v12 + 24);
    *(_OWORD *)v40 = v13;
  }
  v15 = std::operator==[abi:ne180100]<std::string,std::string>(buf, v40);
  v16 = v15;
  if ((v40[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)v40);
    if (v16)
      goto LABEL_36;
    goto LABEL_45;
  }
  if (!v15)
  {
LABEL_45:
    if (!buf[24])
      std::__throw_bad_optional_access[abi:ne180100]();
    if ((buf[23] & 0x80000000) != 0)
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)buf, *(std::string::size_type *)&buf[8]);
    else
      __p = *(std::string *)buf;
    v22 = (_QWORD *)std::__tree<std::__value_type<std::string,CLSqliteDatabaseManager::ConnectionState>,std::__map_value_compare<std::string,std::__value_type<std::string,CLSqliteDatabaseManager::ConnectionState>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CLSqliteDatabaseManager::ConnectionState>>>::find<std::string>((uint64_t)this + 16, (const void **)&__p.__r_.__value_.__l.__data_);
    if ((_QWORD *)((char *)this + 24) == v22)
      v23 = 0;
    else
      v23 = (CLMicroLocationStateMachine::StateBase *)v22[7];
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (!v23)
    {
      if (onceToken_MicroLocation_Default != -1)
        dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_115);
      v28 = (id)logObject_MicroLocation_Default;
      if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
      {
        if (!buf[24])
          std::__throw_bad_optional_access[abi:ne180100]();
        v29 = buf;
        if (buf[23] < 0)
          v29 = *(_BYTE **)buf;
        *(_QWORD *)v40 = 68289283;
        *(_WORD *)&v40[8] = 2082;
        *(_QWORD *)&v40[10] = "";
        *(_WORD *)&v40[18] = 2081;
        *(_QWORD *)&v40[20] = v29;
        _os_log_impl(&dword_2419D9000, v28, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"State Machine: Failed to switch to new state because requested state doesn't exist in the state table\", \"State\":%{private, location:escape_only}s}", v40, 0x1Cu);
      }

      if (onceToken_MicroLocation_Default != -1)
        dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_115);
      v30 = (id)logObject_MicroLocation_Default;
      if (os_signpost_enabled(v30))
      {
        if (!buf[24])
          std::__throw_bad_optional_access[abi:ne180100]();
        v31 = buf;
        if (buf[23] < 0)
          v31 = *(_BYTE **)buf;
        *(_QWORD *)v40 = 68289283;
        *(_WORD *)&v40[8] = 2082;
        *(_QWORD *)&v40[10] = "";
        *(_WORD *)&v40[18] = 2081;
        *(_QWORD *)&v40[20] = v31;
        _os_signpost_emit_with_name_impl(&dword_2419D9000, v30, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "State Machine: Failed to switch to new state because requested state doesn't exist in the state table", "{\"msg%{public}.0s\":\"State Machine: Failed to switch to new state because requested state doesn't exist in the state table\", \"State\":%{private, location:escape_only}s}", v40, 0x1Cu);
      }

      v27 = 0;
      goto LABEL_79;
    }
    CLMicroLocationStateMachine::StateMachineBase::exitCurrentState(this);
    CLMicroLocationStateMachine::StateMachineBase::enterNewState(this, v23);
    goto LABEL_72;
  }
LABEL_36:
  if (onceToken_MicroLocation_Default != -1)
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_115);
  v17 = (id)logObject_MicroLocation_Default;
  if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
  {
    if (!buf[24])
      std::__throw_bad_optional_access[abi:ne180100]();
    v18 = buf;
    if (buf[23] < 0)
      v18 = *(_BYTE **)buf;
    *(_QWORD *)v40 = 68289283;
    *(_WORD *)&v40[8] = 2082;
    *(_QWORD *)&v40[10] = "";
    *(_WORD *)&v40[18] = 2081;
    *(_QWORD *)&v40[20] = v18;
    _os_log_impl(&dword_2419D9000, v17, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"State Machine: No state change requested\", \"State\":%{private, location:escape_only}s}", v40, 0x1Cu);
  }

LABEL_78:
  v27 = 1;
LABEL_79:
  if (buf[24] && (buf[23] & 0x80000000) != 0)
    operator delete(*(void **)buf);
  return v27;
}

void sub_241B5A9E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,char a26)
{
  void *v26;

  if (a26)
  {
    if (a25 < 0)
      operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void CLMicroLocationStateMachine::StateMachineBase::exitCurrentState(CLMicroLocationStateMachine::StateMachineBase *this)
{
  NSObject *v2;
  uint64_t v3;
  _QWORD *v4;
  void (***v5)(_QWORD, CLMicroLocationStateMachine::StateMachineBase *);
  NSObject *v6;
  uint64_t v7;
  _QWORD *v8;
  int v9;
  int v10;
  __int16 v11;
  const char *v12;
  __int16 v13;
  _QWORD *v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  if (onceToken_MicroLocation_Default != -1)
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_115);
  v2 = logObject_MicroLocation_Default;
  if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
  {
    v3 = *((_QWORD *)this + 1);
    v4 = (_QWORD *)(v3 + 8);
    if (*(char *)(v3 + 31) < 0)
      v4 = (_QWORD *)*v4;
    v9 = 68289283;
    v10 = 0;
    v11 = 2082;
    v12 = "";
    v13 = 2081;
    v14 = v4;
    _os_log_impl(&dword_2419D9000, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"State Machine: Exiting State\", \"State\":%{private, location:escape_only}s}", (uint8_t *)&v9, 0x1Cu);
  }
  v5 = *(void (****)(_QWORD, CLMicroLocationStateMachine::StateMachineBase *))(*((_QWORD *)this + 1) + 72);
  if (v5)
  {
    (**v5)(v5, this);
  }
  else
  {
    if (onceToken_MicroLocation_Default != -1)
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_115);
    v6 = logObject_MicroLocation_Default;
    if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_INFO))
    {
      v7 = *((_QWORD *)this + 1);
      v8 = (_QWORD *)(v7 + 8);
      if (*(char *)(v7 + 31) < 0)
        v8 = (_QWORD *)*v8;
      v9 = 68289283;
      v10 = 0;
      v11 = 2082;
      v12 = "";
      v13 = 2081;
      v14 = v8;
      _os_log_impl(&dword_2419D9000, v6, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"State Machine: State did not have an exit function\", \"State\":%{private, location:escape_only}s}", (uint8_t *)&v9, 0x1Cu);
    }
  }
}

void ___ZL45_CLLogObjectForCategory_MicroLocation_Defaultv_block_invoke_93()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.MicroLocation", "MicroLocation");
  v1 = (void *)logObject_MicroLocation_Default;
  logObject_MicroLocation_Default = (uint64_t)v0;

}

void std::__tree<std::__value_type<std::string,std::unique_ptr<CLMicroLocationStateMachine::StateBase>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<CLMicroLocationStateMachine::StateBase>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<CLMicroLocationStateMachine::StateBase>>>>::destroy(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<std::string,std::unique_ptr<CLMicroLocationStateMachine::StateBase>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<CLMicroLocationStateMachine::StateBase>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<CLMicroLocationStateMachine::StateBase>>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<std::string,std::unique_ptr<CLMicroLocationStateMachine::StateBase>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<CLMicroLocationStateMachine::StateBase>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<CLMicroLocationStateMachine::StateBase>>>>::destroy(a1, a2[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::unique_ptr<CLMicroLocationStateMachine::StateBase>>,0>((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::unique_ptr<CLMicroLocationStateMachine::StateBase>>,0>(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

uint64_t *std::__tree<std::__value_type<std::string,std::unique_ptr<CLMicroLocationStateMachine::StateBase>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<CLMicroLocationStateMachine::StateBase>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<CLMicroLocationStateMachine::StateBase>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, const void **a2, uint64_t a3, __int128 **a4)
{
  uint64_t **v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v10[3];
  uint64_t v11;

  v6 = (uint64_t **)std::__tree<std::__value_type<std::string,CLSqliteDatabaseManager::ConnectionState>,std::__map_value_compare<std::string,std::__value_type<std::string,CLSqliteDatabaseManager::ConnectionState>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CLSqliteDatabaseManager::ConnectionState>>>::__find_equal<std::string>((uint64_t)a1, &v11, a2);
  v7 = *v6;
  if (!*v6)
  {
    v8 = v6;
    std::__tree<std::__value_type<std::string,std::unique_ptr<CLMicroLocationStateMachine::StateBase>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<CLMicroLocationStateMachine::StateBase>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<CLMicroLocationStateMachine::StateBase>>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)a1, a4, (uint64_t)v10);
    std::__tree<CLMicroLocationRecordingCompletionMetaInformation::RecordingError>::__insert_node_at(a1, v11, v8, v10[0]);
    v7 = v10[0];
    v10[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::unique_ptr<CLMicroLocationStateMachine::StateBase>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::unique_ptr<CLMicroLocationStateMachine::StateBase>>,void *>>>>::reset[abi:ne180100]((uint64_t)v10, 0);
  }
  return v7;
}

void std::__tree<std::__value_type<std::string,std::unique_ptr<CLMicroLocationStateMachine::StateBase>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<CLMicroLocationStateMachine::StateBase>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<CLMicroLocationStateMachine::StateBase>>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1@<X0>, __int128 **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5;
  char *v6;
  std::string *v7;
  __int128 *v8;
  __int128 v9;

  v5 = a1 + 8;
  v6 = (char *)operator new(0x40uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  v7 = (std::string *)(v6 + 32);
  v8 = *a2;
  if (*((char *)*a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)v8, *((_QWORD *)v8 + 1));
  }
  else
  {
    v9 = *v8;
    *((_QWORD *)v6 + 6) = *((_QWORD *)v8 + 2);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v9;
  }
  *((_QWORD *)v6 + 7) = 0;
  *(_BYTE *)(a3 + 16) = 1;
}

void sub_241B5AE3C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::unique_ptr<CLMicroLocationStateMachine::StateBase>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::unique_ptr<CLMicroLocationStateMachine::StateBase>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::unique_ptr<CLMicroLocationStateMachine::StateBase>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::unique_ptr<CLMicroLocationStateMachine::StateBase>>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::unique_ptr<CLMicroLocationStateMachine::StateBase>>,0>((uint64_t)v2 + 32);
    operator delete(v2);
  }
}

void CLHomeNearbyObjectInternal::Builder::build(CLHomeNearbyObjectInternal::Builder *this@<X0>, uint64_t a2@<X8>)
{
  int v3;
  __int128 v4;
  char v5;
  uint64_t v6;
  char v7;
  std::string *v8;

  v3 = *((_DWORD *)this + 2);
  v4 = *((_OWORD *)this + 1);
  v5 = *((_BYTE *)this + 56);
  v6 = *(_QWORD *)((char *)this + 60);
  v7 = *((_BYTE *)this + 68);
  *(_QWORD *)a2 = *(_QWORD *)this;
  *(_DWORD *)(a2 + 8) = v3;
  *(_OWORD *)(a2 + 16) = v4;
  v8 = (std::string *)(a2 + 32);
  if (*((char *)this + 55) < 0)
  {
    std::string::__init_copy_ctor_external(v8, *((const std::string::value_type **)this + 4), *((_QWORD *)this + 5));
  }
  else
  {
    *(_OWORD *)&v8->__r_.__value_.__l.__data_ = *((_OWORD *)this + 2);
    v8->__r_.__value_.__r.__words[2] = *((_QWORD *)this + 6);
  }
  *(_BYTE *)(a2 + 56) = v5;
  *(_QWORD *)(a2 + 60) = v6;
  *(_BYTE *)(a2 + 68) = v7;
}

uint64_t CLHomeNearbyObjectInternal::isNearbyObjectUwbRangingSupportedOnDevice(CLHomeNearbyObjectInternal *this)
{
  void *v1;
  uint64_t v2;

  objc_msgSend(MEMORY[0x24BDDFE38], "deviceCapabilities");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v2 = objc_msgSend(v1, "supportsPreciseDistanceMeasurement");

  return v2;
}

void sub_241B5B00C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_241B5B158(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_241B5B1D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)CLHomeNearbyRangeBridge;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_241B5B2B8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_241B5B478(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void sub_241B5B5BC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_241B5BB94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{

  _Unwind_Resume(a1);
}

void sub_241B5C03C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,uint64_t a47,uint64_t a48,char *a49,uint64_t a50,uint64_t a51,uint64_t a52,void *__p,uint64_t a54,int a55,__int16 a56,char a57,char a58)
{
  void *v58;

  std::vector<CLHomeNearbyObjectInternal>::__destroy_vector::operator()[abi:ne180100]((void ***)&a49);
  a49 = &a33;
  std::vector<CLHomeNearbyObjectInternal>::__destroy_vector::operator()[abi:ne180100]((void ***)&a49);

  _Unwind_Resume(a1);
}

uint64_t std::vector<CLHomeNearbyObjectInternal>::emplace_back<CLHomeNearbyObjectInternal>(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  char *v16;
  char *v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  _QWORD v22[5];

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD *)(v4 - 8);
  if (v7 >= v6)
  {
    v12 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v7 - *a1) >> 4);
    v13 = v12 + 1;
    if (v12 + 1 > 0x333333333333333)
      std::vector<CLMicroLocationProto::ConfidenceReason>::__throw_length_error[abi:ne180100]();
    v14 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v5 - *a1) >> 4);
    if (2 * v14 > v13)
      v13 = 2 * v14;
    if (v14 >= 0x199999999999999)
      v15 = 0x333333333333333;
    else
      v15 = v13;
    v22[4] = v4;
    if (v15)
      v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CLMicroLocationRapportMonitor::Item>>(v4, v15);
    else
      v16 = 0;
    v17 = &v16[80 * v12];
    v22[0] = v16;
    v22[1] = v17;
    v22[3] = &v16[80 * v15];
    v18 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)v17 = *(_OWORD *)a2;
    *((_OWORD *)v17 + 1) = v18;
    v19 = *(_OWORD *)(a2 + 32);
    *((_QWORD *)v17 + 6) = *(_QWORD *)(a2 + 48);
    *((_OWORD *)v17 + 2) = v19;
    *(_QWORD *)(a2 + 40) = 0;
    *(_QWORD *)(a2 + 48) = 0;
    *(_QWORD *)(a2 + 32) = 0;
    v20 = *(_QWORD *)(a2 + 56);
    *(_QWORD *)(v17 + 61) = *(_QWORD *)(a2 + 61);
    *((_QWORD *)v17 + 7) = v20;
    v22[2] = v17 + 80;
    std::vector<CLHomeNearbyObjectInternal>::__swap_out_circular_buffer(a1, v22);
    v11 = a1[1];
    std::__split_buffer<CLHomeNearbyObjectInternal>::~__split_buffer((uint64_t)v22);
  }
  else
  {
    v8 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)v7 = *(_OWORD *)a2;
    *(_OWORD *)(v7 + 16) = v8;
    v9 = *(_OWORD *)(a2 + 32);
    *(_QWORD *)(v7 + 48) = *(_QWORD *)(a2 + 48);
    *(_OWORD *)(v7 + 32) = v9;
    *(_QWORD *)(a2 + 40) = 0;
    *(_QWORD *)(a2 + 48) = 0;
    *(_QWORD *)(a2 + 32) = 0;
    v10 = *(_QWORD *)(a2 + 56);
    *(_QWORD *)(v7 + 61) = *(_QWORD *)(a2 + 61);
    *(_QWORD *)(v7 + 56) = v10;
    v11 = v7 + 80;
    a1[1] = v7 + 80;
  }
  a1[1] = v11;
  return v11 - 80;
}

void sub_241B5C24C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<CLHomeNearbyObjectInternal>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_241B5C340(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_241B5C438(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_241B5C5C8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_241B5C714(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_241B5C850(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void ___ZL45_CLLogObjectForCategory_MicroLocation_Defaultv_block_invoke_94()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.MicroLocation", "MicroLocation");
  v1 = (void *)logObject_MicroLocation_Default;
  logObject_MicroLocation_Default = (uint64_t)v0;

}

void std::vector<CLHomeNearbyObjectInternal>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    std::vector<CLHomeNearbyObjectInternal>::__clear[abi:ne180100]((uint64_t *)v2);
    operator delete(**a1);
  }
}

void std::vector<CLHomeNearbyObjectInternal>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;
  uint64_t i;

  v2 = *a1;
  for (i = a1[1]; i != v2; i -= 80)
  {
    if (*(char *)(i - 25) < 0)
      operator delete(*(void **)(i - 48));
  }
  a1[1] = v2;
}

uint64_t std::vector<CLHomeNearbyObjectInternal>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<CLHomeNearbyObjectInternal>,std::reverse_iterator<CLHomeNearbyObjectInternal*>,std::reverse_iterator<CLHomeNearbyObjectInternal*>,std::reverse_iterator<CLHomeNearbyObjectInternal*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<CLHomeNearbyObjectInternal>,std::reverse_iterator<CLHomeNearbyObjectInternal*>,std::reverse_iterator<CLHomeNearbyObjectInternal*>,std::reverse_iterator<CLHomeNearbyObjectInternal*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v13[3];
  char v14;
  __int128 v15;
  __int128 v16;

  v7 = a7;
  *(_QWORD *)&v16 = a6;
  *((_QWORD *)&v16 + 1) = a7;
  v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  v13[2] = &v16;
  if (a3 == a5)
  {
    v11 = a6;
  }
  else
  {
    do
    {
      v8 = *(_OWORD *)(a3 - 64);
      *(_OWORD *)(v7 - 80) = *(_OWORD *)(a3 - 80);
      *(_OWORD *)(v7 - 64) = v8;
      v9 = *(_OWORD *)(a3 - 48);
      *(_QWORD *)(v7 - 32) = *(_QWORD *)(a3 - 32);
      *(_OWORD *)(v7 - 48) = v9;
      *(_QWORD *)(a3 - 40) = 0;
      *(_QWORD *)(a3 - 32) = 0;
      *(_QWORD *)(a3 - 48) = 0;
      v10 = *(_QWORD *)(a3 - 24);
      *(_QWORD *)(v7 - 19) = *(_QWORD *)(a3 - 19);
      *(_QWORD *)(v7 - 24) = v10;
      v7 = *((_QWORD *)&v16 + 1) - 80;
      *((_QWORD *)&v16 + 1) -= 80;
      a3 -= 80;
    }
    while (a3 != a5);
    v11 = v16;
  }
  v14 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<CLHomeNearbyObjectInternal>,std::reverse_iterator<CLHomeNearbyObjectInternal*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v13);
  return v11;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<CLHomeNearbyObjectInternal>,std::reverse_iterator<CLHomeNearbyObjectInternal*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<CLHomeNearbyObjectInternal>,std::reverse_iterator<CLHomeNearbyObjectInternal*>>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<CLHomeNearbyObjectInternal>,std::reverse_iterator<CLHomeNearbyObjectInternal*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    if (*(char *)(v1 + 55) < 0)
      operator delete(*(void **)(v1 + 32));
    v1 += 80;
  }
}

uint64_t std::__split_buffer<CLHomeNearbyObjectInternal>::~__split_buffer(uint64_t a1)
{
  std::__split_buffer<CLHomeNearbyObjectInternal>::__destruct_at_end[abi:ne180100](a1, *(_QWORD *)(a1 + 8));
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void std::__split_buffer<CLHomeNearbyObjectInternal>::__destruct_at_end[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != a2)
  {
    do
    {
      v5 = v2 - 80;
      *(_QWORD *)(a1 + 16) = v2 - 80;
      if (*(char *)(v2 - 25) < 0)
      {
        operator delete(*(void **)(v2 - 48));
        v5 = *(_QWORD *)(a1 + 16);
      }
      v2 = v5;
    }
    while (v5 != a2);
  }
}

_QWORD *std::vector<CLHomeNearbyObjectInternal>::__init_with_size[abi:ne180100]<CLHomeNearbyObjectInternal*,CLHomeNearbyObjectInternal*>(_QWORD *result, __int128 *a2, __int128 *a3, unint64_t a4)
{
  _QWORD *v6;

  if (a4)
  {
    v6 = result;
    std::vector<CLMicroLocationRapportMonitor::Item>::__vallocate[abi:ne180100](result, a4);
    result = (_QWORD *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<CLHomeNearbyObjectInternal>,CLHomeNearbyObjectInternal*,CLHomeNearbyObjectInternal*,CLHomeNearbyObjectInternal*>((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_241B5CD44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  std::vector<CLHomeNearbyObjectInternal>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<CLHomeNearbyObjectInternal>,CLHomeNearbyObjectInternal*,CLHomeNearbyObjectInternal*,CLHomeNearbyObjectInternal*>(uint64_t a1, __int128 *a2, __int128 *a3, uint64_t a4)
{
  uint64_t v4;
  __int128 *v6;
  __int128 v7;
  std::string *v8;
  __int128 v9;
  uint64_t v10;
  __int128 *v11;
  uint64_t v12;
  _QWORD v14[3];
  char v15;
  uint64_t v16;
  uint64_t v17;

  v4 = a4;
  v16 = a4;
  v17 = a4;
  v14[0] = a1;
  v14[1] = &v16;
  v14[2] = &v17;
  v15 = 0;
  if (a2 != a3)
  {
    v6 = a2 + 2;
    do
    {
      v7 = *(v6 - 1);
      *(_OWORD *)v4 = *(v6 - 2);
      *(_OWORD *)(v4 + 16) = v7;
      v8 = (std::string *)(v4 + 32);
      if (*((char *)v6 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v8, *(const std::string::value_type **)v6, *((_QWORD *)v6 + 1));
        v10 = v17;
      }
      else
      {
        v9 = *v6;
        *(_QWORD *)(v4 + 48) = *((_QWORD *)v6 + 2);
        *(_OWORD *)&v8->__r_.__value_.__l.__data_ = v9;
        v10 = v4;
      }
      v11 = v6 - 2;
      v12 = *((_QWORD *)v6 + 3);
      *(_QWORD *)(v4 + 61) = *(_QWORD *)((char *)v6 + 29);
      *(_QWORD *)(v4 + 56) = v12;
      v4 = v10 + 80;
      v17 = v10 + 80;
      v6 += 5;
    }
    while (v11 + 5 != a3);
  }
  v15 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<CLHomeNearbyObjectInternal>,CLHomeNearbyObjectInternal*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v14);
  return v4;
}

void sub_241B5CE30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<CLHomeNearbyObjectInternal>,CLHomeNearbyObjectInternal*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<CLHomeNearbyObjectInternal>,CLHomeNearbyObjectInternal*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<CLHomeNearbyObjectInternal>,CLHomeNearbyObjectInternal*>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<CLHomeNearbyObjectInternal>,CLHomeNearbyObjectInternal*>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = **(_QWORD **)(a1 + 16);
  v2 = **(_QWORD **)(a1 + 8);
  while (v1 != v2)
  {
    if (*(char *)(v1 - 25) < 0)
      operator delete(*(void **)(v1 - 48));
    v1 -= 80;
  }
}

void sub_241B5CF7C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

uint64_t ULDBUtils::insertEntries<CLMicroLocationAssociatedStateTable,ULAssociatedStateMO>(void *a1, uint64_t a2)
{
  id v3;
  void *v4;
  id v5;
  uint64_t v6;
  _QWORD v8[4];
  id v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  char v15;

  v3 = a1;
  v12 = 0;
  v13 = &v12;
  v14 = 0x2020000000;
  v15 = 0;
  objc_msgSend(v3, "managedObjectContext");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v8[0] = MEMORY[0x24BDAC760];
  v8[1] = 3221225472;
  v8[2] = ___ZN9ULDBUtils13insertEntriesI35CLMicroLocationAssociatedStateTable19ULAssociatedStateMOEEbP7ULStoreRKNSt3__16vectorINT_5EntryENS5_9allocatorIS8_EEEE_block_invoke;
  v8[3] = &unk_2511D22D0;
  v11 = a2;
  v5 = v3;
  v9 = v5;
  v10 = &v12;
  objc_msgSend(v4, "performBlockAndWait:", v8);

  v6 = *((unsigned __int8 *)v13 + 24);
  _Block_object_dispose(&v12, 8);

  return v6;
}

void sub_241B5D0A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, uint64_t a8, uint64_t a9, ...)
{
  void *v9;
  void *v10;
  va_list va;

  va_start(va, a9);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void ULDBUtils::fetchEntries<CLMicroLocationAssociatedStateTable,ULAssociatedStateMO>(void *a1@<X0>, void *a2@<X1>, void *a3@<X2>, uint64_t a4@<X3>, std::string *a5@<X8>)
{
  id v9;
  id v10;
  id v11;
  void *v12;
  id v13;
  id v14;
  id v15;
  uint64_t *v16;
  _QWORD v17[4];
  id v18;
  id v19;
  id v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  __n128 (*v26)(__n128 *, __n128 *);
  void (*v27)(uint64_t);
  void *v28;
  _QWORD v29[3];
  void **v30;

  v9 = a1;
  v10 = a2;
  v11 = a3;
  v23 = 0;
  v24 = &v23;
  v25 = 0x4812000000;
  v26 = __Block_byref_object_copy__21;
  v27 = __Block_byref_object_dispose__21;
  v28 = &unk_241BEBD1D;
  memset(v29, 0, sizeof(v29));
  objc_msgSend(v9, "managedObjectContext");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  v17[0] = MEMORY[0x24BDAC760];
  v17[1] = 3221225472;
  v17[2] = ___ZN9ULDBUtils12fetchEntriesI35CLMicroLocationAssociatedStateTable19ULAssociatedStateMOEENSt3__16vectorINT_5EntryENS3_9allocatorIS6_EEEEP7ULStoreP7NSArrayIP11NSPredicateEPSC_IP16NSSortDescriptorEm_block_invoke;
  v17[3] = &unk_2511D22F8;
  v13 = v10;
  v18 = v13;
  v14 = v11;
  v19 = v14;
  v22 = a4;
  v15 = v9;
  v20 = v15;
  v21 = &v23;
  objc_msgSend(v12, "performBlockAndWait:", v17);

  v16 = v24;
  a5->__r_.__value_.__l.__size_ = 0;
  a5->__r_.__value_.__r.__words[2] = 0;
  a5->__r_.__value_.__r.__words[0] = 0;
  std::vector<CLMicroLocationAssociatedStateTable::Entry>::__init_with_size[abi:ne180100]<CLMicroLocationAssociatedStateTable::Entry*,CLMicroLocationAssociatedStateTable::Entry*>(a5, (__int128 *)v16[6], (__int128 *)v16[7], 0x8E38E38E38E38E39 * ((v16[7] - v16[6]) >> 3));

  _Block_object_dispose(&v23, 8);
  v30 = (void **)v29;
  std::vector<CLMicroLocationAssociatedStateTable::Entry>::__destroy_vector::operator()[abi:ne180100](&v30);

}

void sub_241B5D268(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, void *a7, void *a8, uint64_t a9, uint64_t a10, ...)
{
  void *v10;
  void *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  va_list va;

  va_start(va, a10);

  _Block_object_dispose(va, 8);
  *(_QWORD *)(v14 - 96) = v13;
  std::vector<CLMicroLocationAssociatedStateTable::Entry>::__destroy_vector::operator()[abi:ne180100]((void ***)(v14 - 96));

  _Unwind_Resume(a1);
}

void ULDBUtils::fetchAllWithLimit<CLMicroLocationAssociatedStateTable,ULAssociatedStateMO>(void *a1@<X0>, unsigned int a2@<W1>, std::string *a3@<X8>)
{
  id v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  _QWORD v10[2];

  v10[1] = *MEMORY[0x24BDAC8D0];
  v5 = a1;
  v6 = (void *)MEMORY[0x24BDD17C0];
  objc_msgSend((id)objc_opt_class(), "defaultSortProperty");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "sortDescriptorWithKey:ascending:", v7, 0);
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  v10[0] = v8;
  objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", v10, 1);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  ULDBUtils::fetchEntries<CLMicroLocationAssociatedStateTable,ULAssociatedStateMO>(v5, 0, v9, a2, a3);

}

void sub_241B5D3C8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_241B5D494(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

void sub_241B5D570(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_241B5D77C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void ___ZN9ULDBUtils13insertEntriesI35CLMicroLocationAssociatedStateTable19ULAssociatedStateMOEEbP7ULStoreRKNSt3__16vectorINT_5EntryENS5_9allocatorIS8_EEEE_block_invoke(uint64_t a1)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;
  NSObject *v7;
  void *v8;
  void *v9;
  NSObject *v10;
  void *v11;
  void *v12;
  void *v13;
  int v14;
  int v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  void *v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  v2 = *(uint64_t **)(a1 + 48);
  v3 = *v2;
  v4 = v2[1];
  if (*v2 == v4)
  {
LABEL_4:
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = objc_msgSend(*(id *)(a1 + 32), "commitChangesToStore");
    objc_msgSend(*(id *)(a1 + 32), "deleteOldestRecordsIfFull");
  }
  else
  {
    while (1)
    {
      objc_msgSend(*(id *)(a1 + 32), "managedObjectContext");
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      +[ULAssociatedStateMO createFromEntry:inManagedObjectContext:](ULAssociatedStateMO, "createFromEntry:inManagedObjectContext:", v3, v5);
      v6 = (void *)objc_claimAutoreleasedReturnValue();

      if (!v6)
        break;

      v3 += 72;
      if (v3 == v4)
        goto LABEL_4;
    }
    if (onceToken_MicroLocation_Default != -1)
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_117);
    v7 = (id)logObject_MicroLocation_Default;
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      +[ULAssociatedStateMO entity](ULAssociatedStateMO, "entity");
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v8, "name");
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      v14 = 68289283;
      v15 = 0;
      v16 = 2082;
      v17 = "";
      v18 = 2113;
      v19 = v9;
      _os_log_impl(&dword_2419D9000, v7, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"Failed to create entry from MO\", \"MO\":%{private, location:escape_only}@}", (uint8_t *)&v14, 0x1Cu);

    }
    if (onceToken_MicroLocation_Default != -1)
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_117);
    v10 = (id)logObject_MicroLocation_Default;
    if (os_signpost_enabled(v10))
    {
      +[ULAssociatedStateMO entity](ULAssociatedStateMO, "entity");
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v11, "name");
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      v14 = 68289283;
      v15 = 0;
      v16 = 2082;
      v17 = "";
      v18 = 2113;
      v19 = v12;
      _os_signpost_emit_with_name_impl(&dword_2419D9000, v10, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Failed to create entry from MO", "{\"msg%{public}.0s\":\"Failed to create entry from MO\", \"MO\":%{private, location:escape_only}@}", (uint8_t *)&v14, 0x1Cu);

    }
    objc_msgSend(*(id *)(a1 + 32), "managedObjectContext");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v13, "reset");

  }
}

void sub_241B5DAA0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void ___ZL45_CLLogObjectForCategory_MicroLocation_Defaultv_block_invoke_95()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.MicroLocation", "MicroLocation");
  v1 = (void *)logObject_MicroLocation_Default;
  logObject_MicroLocation_Default = (uint64_t)v0;

}

__n128 __Block_byref_object_copy__21(__n128 *a1, __n128 *a2)
{
  __n128 result;

  a1[3].n128_u64[0] = 0;
  a1[3].n128_u64[1] = 0;
  a1[4].n128_u64[0] = 0;
  result = a2[3];
  a1[3] = result;
  a1[4].n128_u64[0] = a2[4].n128_u64[0];
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = 0;
  a2[4].n128_u64[0] = 0;
  return result;
}

void __Block_byref_object_dispose__21(uint64_t a1)
{
  void **v1;

  v1 = (void **)(a1 + 48);
  std::vector<CLMicroLocationAssociatedStateTable::Entry>::__destroy_vector::operator()[abi:ne180100](&v1);
}

void ___ZN9ULDBUtils12fetchEntriesI35CLMicroLocationAssociatedStateTable19ULAssociatedStateMOEENSt3__16vectorINT_5EntryENS3_9allocatorIS6_EEEEP7ULStoreP7NSArrayIP11NSPredicateEPSC_IP16NSSortDescriptorEm_block_invoke(uint64_t a1)
{
  void *v2;
  objc_class *v3;
  void *v4;
  void *v5;
  uint64_t v6;
  void *v7;
  __int128 v8;
  uint64_t v9;
  void **v10;

  v2 = *(void **)(a1 + 48);
  v3 = (objc_class *)objc_opt_class();
  NSStringFromClass(v3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "fetchManagedObjectsWithEntityName:byAndPredicates:sortDescriptors:andLimit:", v4, *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 64));
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  ULDBUtils::convertManagedObjectsToEntries<CLMicroLocationAssociatedStateTable,ULAssociatedStateMO>(v5, (uint64_t *)&v8);
  v6 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
  std::vector<CLMicroLocationAssociatedStateTable::Entry>::__vdeallocate((uint64_t *)(v6 + 48));
  *(_OWORD *)(v6 + 48) = v8;
  *(_QWORD *)(v6 + 64) = v9;
  v9 = 0;
  v8 = 0uLL;
  v10 = (void **)&v8;
  std::vector<CLMicroLocationAssociatedStateTable::Entry>::__destroy_vector::operator()[abi:ne180100](&v10);
  objc_msgSend(*(id *)(a1 + 48), "managedObjectContext");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "reset");

}

void sub_241B5DC38(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void ULDBUtils::convertManagedObjectsToEntries<CLMicroLocationAssociatedStateTable,ULAssociatedStateMO>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  id v3;
  id v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  void *v10;
  char v11;
  NSObject *v12;
  void *v13;
  void *v14;
  NSObject *v15;
  void *v16;
  void *v17;
  id v18;
  uint64_t *v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint8_t buf[4];
  int v25;
  __int16 v26;
  const char *v27;
  __int16 v28;
  void *v29;
  void *__p[2];
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  _BYTE v35[128];
  uint64_t v36;

  v36 = *MEMORY[0x24BDAC8D0];
  v3 = a1;
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  std::vector<CLMicroLocationAssociatedStateTable::Entry>::reserve(a2, objc_msgSend(v3, "count"));
  v22 = 0u;
  v23 = 0u;
  v20 = 0u;
  v21 = 0u;
  v4 = v3;
  v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v20, v35, 16);
  if (!v5)
  {

    goto LABEL_28;
  }
  v18 = v3;
  v19 = a2;
  v6 = 0;
  v7 = *(_QWORD *)v21;
  do
  {
    v8 = 0;
    do
    {
      if (*(_QWORD *)v21 != v7)
        objc_enumerationMutation(v4);
      v9 = *(id *)(*((_QWORD *)&v20 + 1) + 8 * v8);
      v10 = v9;
      if (v9)
      {
        objc_msgSend(v9, "convertToEntry", v18);
        if (BYTE8(v34))
        {
          std::vector<CLMicroLocationAssociatedStateTable::Entry>::push_back[abi:ne180100](v19, (__int128 *)__p);
          v11 = 0;
          goto LABEL_19;
        }
      }
      else
      {
        v33 = 0u;
        v34 = 0u;
        v31 = 0u;
        v32 = 0u;
        *(_OWORD *)__p = 0u;
      }
      if (onceToken_MicroLocation_Default != -1)
        dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_117);
      v12 = (id)logObject_MicroLocation_Default;
      if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
      {
        objc_msgSend(v10, "entity");
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v13, "name");
        v14 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 68289283;
        v25 = 0;
        v26 = 2082;
        v27 = "";
        v28 = 2113;
        v29 = v14;
        _os_log_impl(&dword_2419D9000, v12, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"Failed to convert MO to entry\", \"MO\":%{private, location:escape_only}@}", buf, 0x1Cu);

      }
      if (onceToken_MicroLocation_Default != -1)
        dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_117);
      v15 = (id)logObject_MicroLocation_Default;
      if (os_signpost_enabled(v15))
      {
        objc_msgSend(v10, "entity");
        v16 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v16, "name");
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 68289283;
        v25 = 0;
        v26 = 2082;
        v27 = "";
        v28 = 2113;
        v29 = v17;
        _os_signpost_emit_with_name_impl(&dword_2419D9000, v15, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Failed to convert MO to entry", "{\"msg%{public}.0s\":\"Failed to convert MO to entry\", \"MO\":%{private, location:escape_only}@}", buf, 0x1Cu);

      }
      v11 = 1;
      v6 = 1;
LABEL_19:
      if (BYTE8(v34) && SBYTE7(v31) < 0)
        operator delete(__p[0]);

      if ((v11 & 1) != 0)
        goto LABEL_25;
      ++v8;
    }
    while (v5 != v8);
    v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v20, v35, 16);
  }
  while (v5);
LABEL_25:

  if ((v6 & 1) != 0)
    std::vector<CLMicroLocationAssociatedStateTable::Entry>::__clear[abi:ne180100](v19);
LABEL_28:

}

void sub_241B5DF94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
  void *v37;

  __p = a10;
  std::vector<CLMicroLocationAssociatedStateTable::Entry>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);

  _Unwind_Resume(a1);
}

uint64_t std::vector<CLMicroLocationAssociatedStateTable::Entry>::reserve(uint64_t *a1, unint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[5];

  v4 = a1[2];
  result = (uint64_t)(a1 + 2);
  if (0x8E38E38E38E38E39 * ((v4 - *a1) >> 3) < a2)
  {
    if (a2 >= 0x38E38E38E38E38FLL)
      std::vector<CLMicroLocationProto::ConfidenceReason>::__throw_length_error[abi:ne180100]();
    v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = std::__allocate_at_least[abi:ne180100]<std::allocator<CLMicroLocationAssociatedStateTable::Entry>>(result, a2);
    v7[1] = v7[0] + v5;
    v7[2] = v7[0] + v5;
    v7[3] = v7[0] + 72 * v6;
    std::vector<CLMicroLocationAssociatedStateTable::Entry>::__swap_out_circular_buffer(a1, v7);
    return std::__split_buffer<CLMicroLocationAssociatedStateTable::Entry>::~__split_buffer((uint64_t)v7);
  }
  return result;
}

void sub_241B5E0E0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<CLMicroLocationAssociatedStateTable::Entry>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<CLMicroLocationAssociatedStateTable::Entry>::push_back[abi:ne180100](uint64_t *a1, __int128 *a2)
{
  uint64_t result;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  char *v16;
  char *v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  _QWORD v21[5];

  v6 = a1[2];
  result = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD *)(result - 8);
  if (v7 >= v6)
  {
    v12 = 0x8E38E38E38E38E39 * ((uint64_t)(v7 - *a1) >> 3);
    v13 = v12 + 1;
    if (v12 + 1 > 0x38E38E38E38E38ELL)
      std::vector<CLMicroLocationProto::ConfidenceReason>::__throw_length_error[abi:ne180100]();
    v14 = 0x8E38E38E38E38E39 * ((uint64_t)(v5 - *a1) >> 3);
    if (2 * v14 > v13)
      v13 = 2 * v14;
    if (v14 >= 0x1C71C71C71C71C7)
      v15 = 0x38E38E38E38E38ELL;
    else
      v15 = v13;
    v21[4] = result;
    if (v15)
      v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CLMicroLocationAssociatedStateTable::Entry>>(result, v15);
    else
      v16 = 0;
    v17 = &v16[72 * v12];
    v21[0] = v16;
    v21[1] = v17;
    v21[3] = &v16[72 * v15];
    v18 = *a2;
    *((_QWORD *)v17 + 2) = *((_QWORD *)a2 + 2);
    *(_OWORD *)v17 = v18;
    *((_QWORD *)a2 + 1) = 0;
    *((_QWORD *)a2 + 2) = 0;
    *(_QWORD *)a2 = 0;
    v19 = *(__int128 *)((char *)a2 + 56);
    v20 = *(__int128 *)((char *)a2 + 24);
    *(_OWORD *)(v17 + 40) = *(__int128 *)((char *)a2 + 40);
    *(_OWORD *)(v17 + 24) = v20;
    *(_OWORD *)(v17 + 56) = v19;
    v21[2] = v17 + 72;
    std::vector<CLMicroLocationAssociatedStateTable::Entry>::__swap_out_circular_buffer(a1, v21);
    v11 = a1[1];
    result = std::__split_buffer<CLMicroLocationAssociatedStateTable::Entry>::~__split_buffer((uint64_t)v21);
  }
  else
  {
    v8 = *a2;
    *(_QWORD *)(v7 + 16) = *((_QWORD *)a2 + 2);
    *(_OWORD *)v7 = v8;
    *((_QWORD *)a2 + 1) = 0;
    *((_QWORD *)a2 + 2) = 0;
    *(_QWORD *)a2 = 0;
    v9 = *(__int128 *)((char *)a2 + 24);
    v10 = *(__int128 *)((char *)a2 + 40);
    *(_OWORD *)(v7 + 56) = *(__int128 *)((char *)a2 + 56);
    *(_OWORD *)(v7 + 40) = v10;
    *(_OWORD *)(v7 + 24) = v9;
    v11 = v7 + 72;
    a1[1] = v7 + 72;
  }
  a1[1] = v11;
  return result;
}

void sub_241B5E260(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<CLMicroLocationAssociatedStateTable::Entry>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::vector<CLMicroLocationAssociatedStateTable::Entry>::__vdeallocate(uint64_t *a1)
{
  if (*a1)
  {
    std::vector<CLMicroLocationAssociatedStateTable::Entry>::__clear[abi:ne180100](a1);
    operator delete((void *)*a1);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

std::string *std::vector<CLMicroLocationAssociatedStateTable::Entry>::__init_with_size[abi:ne180100]<CLMicroLocationAssociatedStateTable::Entry*,CLMicroLocationAssociatedStateTable::Entry*>(std::string *result, __int128 *a2, __int128 *a3, unint64_t a4)
{
  std::string *v6;

  if (a4)
  {
    v6 = result;
    std::vector<CLMicroLocationBluetoothIdentityTable::Entry>::__vallocate[abi:ne180100](result, a4);
    result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<CLMicroLocationAssociatedStateTable::Entry>,CLMicroLocationAssociatedStateTable::Entry*,CLMicroLocationAssociatedStateTable::Entry*,CLMicroLocationAssociatedStateTable::Entry*>((uint64_t)&v6->__r_.__value_.__r.__words[2], a2, a3, (std::string *)v6->__r_.__value_.__l.__size_);
    v6->__r_.__value_.__l.__size_ = (std::string::size_type)result;
  }
  return result;
}

void sub_241B5E310(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  std::vector<CLMicroLocationAssociatedStateTable::Entry>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

std::string *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<CLMicroLocationAssociatedStateTable::Entry>,CLMicroLocationAssociatedStateTable::Entry*,CLMicroLocationAssociatedStateTable::Entry*,CLMicroLocationAssociatedStateTable::Entry*>(uint64_t a1, __int128 *a2, __int128 *a3, std::string *this)
{
  std::string *v4;
  __int128 *v6;
  __int128 v7;
  std::string *v8;
  __int128 v9;
  __int128 v10;
  _QWORD v12[3];
  char v13;
  std::string *v14;
  std::string *v15;

  v4 = this;
  v14 = this;
  v15 = this;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  v13 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      if (*((char *)v6 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)v6, *((_QWORD *)v6 + 1));
        v8 = v15;
      }
      else
      {
        v7 = *v6;
        v4->__r_.__value_.__r.__words[2] = *((_QWORD *)v6 + 2);
        *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v7;
        v8 = v4;
      }
      v9 = *(__int128 *)((char *)v6 + 24);
      v10 = *(__int128 *)((char *)v6 + 40);
      *(_OWORD *)&v4[2].__r_.__value_.__r.__words[1] = *(__int128 *)((char *)v6 + 56);
      *(_OWORD *)&v4[1].__r_.__value_.__r.__words[2] = v10;
      *(_OWORD *)&v4[1].__r_.__value_.__l.__data_ = v9;
      v6 = (__int128 *)((char *)v6 + 72);
      v4 = v8 + 3;
      v15 = v8 + 3;
    }
    while (v6 != a3);
  }
  v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<CLMicroLocationAssociatedStateTable::Entry>,CLMicroLocationAssociatedStateTable::Entry*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return v4;
}

void sub_241B5E3F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<CLMicroLocationAssociatedStateTable::Entry>,CLMicroLocationAssociatedStateTable::Entry*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<CLMicroLocationAssociatedStateTable::Entry>,CLMicroLocationAssociatedStateTable::Entry*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<CLMicroLocationAssociatedStateTable::Entry>,CLMicroLocationAssociatedStateTable::Entry*>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<CLMicroLocationAssociatedStateTable::Entry>,CLMicroLocationAssociatedStateTable::Entry*>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = **(_QWORD **)(a1 + 16);
  v2 = **(_QWORD **)(a1 + 8);
  while (v1 != v2)
  {
    if (*(char *)(v1 - 49) < 0)
      operator delete(*(void **)(v1 - 72));
    v1 -= 72;
  }
}

uint64_t ULLogicAdapterImpl::ULLogicAdapterImpl(uint64_t a1, void *a2, void *a3, void *a4, void *a5)
{
  id v10;
  id v11;
  id v12;
  id v13;
  id v14;
  std::string *v15;
  void *v16;
  double v17;
  NSObject *v18;
  void **v19;
  id v21;
  id v22;
  int v23;
  int v24;
  std::string *v25;
  int v26;
  void *__p[2];
  char v28;
  _BYTE __str[28];
  _QWORD v30[40];

  v30[38] = *MEMORY[0x24BDAC8D0];
  v21 = a2;
  v10 = a3;
  v22 = a4;
  v11 = a5;
  *(_QWORD *)a1 = &off_2511DB1B8;
  *(_QWORD *)(a1 + 8) = &unk_2511DB290;
  *(_QWORD *)(a1 + 16) = &unk_2511DB2D8;
  *(_QWORD *)(a1 + 24) = &unk_2511DB300;
  *(_QWORD *)(a1 + 32) = &unk_2511DB328;
  ULDatabase::ULDatabase((ULDatabase *)(a1 + 40));
  CLMicroLocationEventLogger::CLMicroLocationEventLogger((CLMicroLocationEventLogger *)(a1 + 192), (ULDatabase *)(a1 + 40));
  CLMicroLocationLogic::CLMicroLocationLogic(a1 + 224, a1, a1 + 40, a1 + 192);
  CLMicroLocationLegacyClient::CLMicroLocationLegacyClient(a1 + 2848, a1 + 224, a1 + 192);
  v12 = v11;
  *(_QWORD *)(a1 + 2960) = v12;
  *(_QWORD *)(a1 + 2976) = 0;
  *(_QWORD *)(a1 + 2992) = 0;
  *(_QWORD *)(a1 + 2984) = 0;
  *(_QWORD *)(a1 + 2968) = a1 + 2976;
  v13 = v10;
  *(_QWORD *)(a1 + 3000) = v13;
  v14 = v22;
  *(_QWORD *)(a1 + 3008) = v14;
  objc_storeStrong((id *)(a1 + 2992), a2);
  if (objc_msgSend(MEMORY[0x24BE669E0], "isMac")
    && (objc_msgSend(MEMORY[0x24BE669E0], "isMacBook") & 1) == 0)
  {
    CLMicroLocationLogic::setPlatformSupport((CLMicroLocationLogic *)(a1 + 224), 0);
  }
  ULDatabase::initDb((ULDatabase *)(a1 + 40));
  CLMicroLocationProto::MiloInit::MiloInit((CLMicroLocationProto::MiloInit *)&v24);
  ULSettings::get<ULSettings::Version>((uint64_t)__str);
  v26 |= 2u;
  v15 = v25;
  if (v25 == (std::string *)MEMORY[0x24BEDD958])
  {
    v15 = (std::string *)operator new();
    v15->__r_.__value_.__r.__words[0] = 0;
    v15->__r_.__value_.__l.__size_ = 0;
    v15->__r_.__value_.__r.__words[2] = 0;
    v25 = v15;
  }
  std::string::operator=(v15, (const std::string *)__str);
  if ((__str[23] & 0x80000000) != 0)
    operator delete(*(void **)__str);
  v23 = 0;
  boost::uuids::detail::random_provider_base::random_provider_base((boost::uuids::detail::random_provider_base *)&v23);
  __p[0] = (void *)boost::uuids::random_generator_pure::operator()((uint64_t)&v23);
  __p[1] = v16;
  v17 = cl::chrono::CFAbsoluteTimeClock::now();
  CLMicroLocationProtobufHelper::createLoggedEvent<CLMicroLocationProto::MiloInit>(__p, &v24, (uint64_t)__str, v17);
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)a1 + 72))(a1, __str);
  CLMicroLocationProto::ReceivedEvent::~ReceivedEvent((CLMicroLocationProto::ReceivedEvent *)v30);
  boost::uuids::detail::random_provider_base::destroy((boost::uuids::detail::random_provider_base *)&v23);
  if (onceToken_MicroLocationQE_Default != -1)
    dispatch_once(&onceToken_MicroLocationQE_Default, &__block_literal_global_118);
  v18 = (id)logObject_MicroLocationQE_Default;
  if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
  {
    ULSettings::get<ULSettings::Version>((uint64_t)__p);
    if (v28 >= 0)
      v19 = __p;
    else
      v19 = (void **)__p[0];
    *(_QWORD *)__str = 68289283;
    *(_WORD *)&__str[8] = 2082;
    *(_QWORD *)&__str[10] = "";
    *(_WORD *)&__str[18] = 2081;
    *(_QWORD *)&__str[20] = v19;
    _os_log_impl(&dword_2419D9000, v18, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"MicroLocation Initialization\", \"Microlocation Version\":%{private, location:escape_only}s}", __str, 0x1Cu);
    if (v28 < 0)
      operator delete(__p[0]);
  }

  CLMicroLocationProto::MiloInit::~MiloInit((CLMicroLocationProto::MiloInit *)&v24);
  return a1;
}

void sub_241B5E7B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, void *a11, void *a12, int a13, char a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  uint64_t v29;
  void *v30;
  void *v31;
  ULDatabase *v32;
  CLMicroLocationEventLogger *v33;
  CLMicroLocationLogic *v34;

  CLMicroLocationProto::MiloInit::~MiloInit((CLMicroLocationProto::MiloInit *)&a16);
  std::__tree<std::__value_type<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,double>,std::__map_value_compare<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,std::__value_type<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,double>,std::less<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes>,true>,std::allocator<std::__value_type<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,double>>>::destroy(v29 + 2968, *(_QWORD **)(v29 + 2976));

  CLMicroLocationLogic::~CLMicroLocationLogic(v34);
  CLMicroLocationEventLogger::~CLMicroLocationEventLogger(v33);
  ULDatabase::~ULDatabase(v32);

  _Unwind_Resume(a1);
}

void ULSettings::get<ULSettings::Version>(uint64_t a1@<X8>)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  char v6;
  uint64_t v7;
  _BYTE v8[24];
  _BYTE v9[15];
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  +[ULDefaultsSingleton shared](ULDefaultsSingleton, "shared");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "defaultsDictionary");
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "ULVersion");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "objectForKey:", v4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  if (v5 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
  {
    ULSettings::convert<NSString * {__strong},std::string>(v5, v8);
    *(_OWORD *)a1 = *(_OWORD *)v8;
    *(_QWORD *)(a1 + 16) = *(_QWORD *)&v8[16];
  }
  else
  {
    ULSettings::convert<NSString * {__strong},std::string>(CFSTR("3.0.40"), v8);
    *(_QWORD *)&v9[7] = *(_QWORD *)&v8[15];
    *(_QWORD *)v9 = *(_QWORD *)&v8[8];
    v6 = v8[23];
    v7 = *(_QWORD *)&v8[8];
    *(_QWORD *)a1 = *(_QWORD *)v8;
    *(_QWORD *)(a1 + 8) = v7;
    *(_QWORD *)(a1 + 15) = *(_QWORD *)&v9[7];
    *(_BYTE *)(a1 + 23) = v6;
  }

}

void sub_241B5E9D4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void CLMicroLocationProtobufHelper::createLoggedEvent<CLMicroLocationProto::MiloInit>(_OWORD *a1@<X0>, int *a2@<X1>, uint64_t a3@<X8>, double a4@<D0>)
{
  const CLMicroLocationProto::MiloInit *v8;
  _BYTE v9[304];

  CLMicroLocationProto::ReceivedEvent::ReceivedEvent((CLMicroLocationProto::ReceivedEvent *)v9);
  CLMicroLocationProtobufHelper::setSpecificLoggedEvent((CLMicroLocationProtobufHelper *)v9, (CLMicroLocationProto::ReceivedEvent *)a2, v8);
  CLMicroLocationLoggedEventsTable::Entry::Entry(a3, a1, a2[4], (CLMicroLocationProto::ReceivedEvent *)v9, a4);
  CLMicroLocationProto::ReceivedEvent::~ReceivedEvent((CLMicroLocationProto::ReceivedEvent *)v9);
}

void sub_241B5EA8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  CLMicroLocationProto::ReceivedEvent::~ReceivedEvent((CLMicroLocationProto::ReceivedEvent *)&a9);
  _Unwind_Resume(a1);
}

void ULLogicAdapterImpl::onSendStatusToClient(ULLogicAdapterImpl *this, const CLMiLoService::ServiceStatus *a2, const uuid *a3)
{
  void *v6;
  const CLMiLoService::ServiceStatus *v7;
  void *v8;
  id v9;

  CLMicroLocationLegacyClient::updateStatus((CLMicroLocationLegacyClient *)((char *)this + 2848), a2);
  v6 = (void *)*((_QWORD *)this + 374);
  ULLogicAdapterHelper::ulServiceStatusFromInternalStatus(a2, v7);
  v9 = (id)objc_claimAutoreleasedReturnValue();
  v8 = (void *)objc_msgSend(objc_alloc(MEMORY[0x24BDD1880]), "initWithUUIDBytes:", a3);
  objc_msgSend(v6, "didUpdateServiceStatus:toConnection:", v9, v8);

}

void sub_241B5EB20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void ULLogicAdapterImpl::onSendRequestResponseToClient(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void *v5;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  uint64_t v13;
  _QWORD v14[2];

  v14[1] = *MEMORY[0x24BDAC8D0];
  v8 = *(void **)(a1 + 2992);
  v9 = (void *)objc_msgSend(objc_alloc(MEMORY[0x24BDD1880]), "initWithUUIDBytes:", a3);
  if (a4 == -1)
  {
    v11 = 0;
  }
  else
  {
    v10 = (void *)MEMORY[0x24BDD1540];
    v13 = *MEMORY[0x24BDD0FC8];
    v14[0] = CFSTR("request failed internally");
    objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", v14, &v13, 1);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "errorWithDomain:code:userInfo:", CFSTR("ULLogicDomain"), a4, v5);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
  }
  v12 = (void *)objc_msgSend(objc_alloc(MEMORY[0x24BDD1880]), "initWithUUIDBytes:", a5);
  objc_msgSend(v8, "didCompleteRequest:withError:toConnection:", v9, v11, v12);

  if (a4 != -1)
  {

  }
}

void sub_241B5EC80(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void ULLogicAdapterImpl::onSendRecordingMetaInfoToClient(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4, uint64_t a5)
{
  _QWORD *v9;
  void *v10;
  _QWORD *v11;
  _QWORD *v12;
  BOOL v13;
  id v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  NSObject *v22;
  id v23;
  uint8_t buf[16];

  if ((objc_msgSend(MEMORY[0x24BE669E0], "isInternalInstall") & 1) != 0)
  {
    v23 = objc_alloc_init(MEMORY[0x24BDBCEB8]);
    v9 = (_QWORD *)a4[3];
    if (v9 != a4 + 4)
    {
      do
      {
        v10 = (void *)objc_msgSend(objc_alloc(MEMORY[0x24BE66938]), "initWithFingerprintErrorEnum:", ULLogicAdapterHelper::ulFingerprintErrorFromRecordingError(*((_DWORD *)v9 + 7)));
        objc_msgSend(v23, "addObject:", v10);

        v11 = (_QWORD *)v9[1];
        if (v11)
        {
          do
          {
            v12 = v11;
            v11 = (_QWORD *)*v11;
          }
          while (v11);
        }
        else
        {
          do
          {
            v12 = (_QWORD *)v9[2];
            v13 = *v12 == (_QWORD)v9;
            v9 = v12;
          }
          while (!v13);
        }
        v9 = v12;
      }
      while (v12 != a4 + 4);
    }
    v14 = objc_alloc(MEMORY[0x24BE66940]);
    objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedLong:", *a4);
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedLong:", a4[1]);
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedLong:", a4[2]);
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    v18 = (void *)objc_msgSend(objc_alloc(MEMORY[0x24BDD1880]), "initWithUUIDBytes:", a3);
    v19 = (void *)objc_msgSend(v14, "initWithNumWiFiAccessPoints:numBLESources:numUWBSources:requestIdentifier:errors:", v15, v16, v17, v18, v23);

    v20 = *(void **)(a1 + 2992);
    v21 = (void *)objc_msgSend(objc_alloc(MEMORY[0x24BDD1880]), "initWithUUIDBytes:", a5);
    objc_msgSend(v20, "didCompleteObservationWithMetaInformation:toConnection:", v19, v21);

  }
  else
  {
    if (onceToken_MicroLocation_Default != -1)
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_608);
    v22 = logObject_MicroLocation_Default;
    if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_2419D9000, v22, OS_LOG_TYPE_DEBUG, "onSendRecordingMetaInfoToClient called on non-internal platform. ignored", buf, 2u);
    }
  }
}

void sub_241B5EF08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void ULLogicAdapterImpl::onSendPredictionMetaInfoToClient(ULLogicAdapterImpl *this, const CLMiLoService::ServiceDescriptor *a2, const uuid *a3, const CLMicroLocationResultToPublish *a4, const uuid *a5)
{
  id v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  const CLMicroLocationResultToPublish *v14;
  void *v15;
  void *v16;
  void *v17;
  NSObject *v18;
  id v19;
  uint8_t buf[16];

  if ((objc_msgSend(MEMORY[0x24BE669E0], "isInternalInstall") & 1) != 0)
  {
    v9 = objc_alloc(MEMORY[0x24BE66940]);
    objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedLong:", *((_QWORD *)a4 + 3));
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedLong:", *((_QWORD *)a4 + 4));
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedLong:", *((_QWORD *)a4 + 5));
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    v13 = (void *)objc_msgSend(objc_alloc(MEMORY[0x24BDD1880]), "initWithUUIDBytes:", a3);
    ULLogicAdapterHelper::getFingerprintErrorsFromPredictionResults(a4, v14);
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    v19 = (id)objc_msgSend(v9, "initWithNumWiFiAccessPoints:numBLESources:numUWBSources:requestIdentifier:errors:", v10, v11, v12, v13, v15);

    v16 = (void *)*((_QWORD *)this + 374);
    v17 = (void *)objc_msgSend(objc_alloc(MEMORY[0x24BDD1880]), "initWithUUIDBytes:", a5);
    objc_msgSend(v16, "didCompletePredictionWithMetaInformation:toConnection:", v19, v17);

  }
  else
  {
    if (onceToken_MicroLocation_Default != -1)
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_608);
    v18 = logObject_MicroLocation_Default;
    if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_2419D9000, v18, OS_LOG_TYPE_DEBUG, "onSendPredictionMetaInfoToClient called on non-internal platform. ignored", buf, 2u);
    }
  }
}

void sub_241B5F170(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void ULLogicAdapterImpl::onSendPredictionResultsToClient(_QWORD *a1, const CLMiLoService::ServiceDescriptor *a2, uint64_t a3, CLMicroLocationResultToPublish *a4, uint64_t a5)
{
  void *v10;
  void *v11;
  void *v12;

  CLMicroLocationLegacyClient::publishResultsToBiomeAndCoreDuet((CLMicroLocationLegacyClient *)(a1 + 356), a2, a4);
  v10 = (void *)a1[374];
  ULLogicAdapterHelper::createULPrediction((uint64_t *)a4, a3);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  v12 = (void *)objc_msgSend(objc_alloc(MEMORY[0x24BDD1880]), "initWithUUIDBytes:", a5);
  objc_msgSend(v10, "didSendPredictionResults:toConnection:", v11, v12);

  if (*(_BYTE *)(a3 + 16) && objc_msgSend(MEMORY[0x24BE669E0], "isInternalInstall"))
  {
    if (!*(_BYTE *)(a3 + 16))
      std::__throw_bad_optional_access[abi:ne180100]();
    (*(void (**)(_QWORD *, const CLMiLoService::ServiceDescriptor *, uint64_t, CLMicroLocationResultToPublish *, uint64_t))(*a1 + 40))(a1, a2, a3, a4, a5);
  }
}

void sub_241B5F2B8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void ULLogicAdapterImpl::onSendGenericEventResponseToClient(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  void *v8;
  uint64_t *v9;
  void *v10;
  NSObject *v11;
  id v12;
  uint8_t buf[16];

  if ((objc_msgSend(MEMORY[0x24BE669E0], "isInternalInstall") & 1) != 0)
  {
    v8 = *(void **)(a1 + 2992);
    if (*((char *)a3 + 23) >= 0)
      v9 = a3;
    else
      v9 = (uint64_t *)*a3;
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", v9);
    v12 = (id)objc_claimAutoreleasedReturnValue();
    v10 = (void *)objc_msgSend(objc_alloc(MEMORY[0x24BDD1880]), "initWithUUIDBytes:", a4);
    objc_msgSend(v8, "didSendGenericEvent:withDescription:toConnection:", a2, v12, v10);

  }
  else
  {
    if (onceToken_MicroLocation_Default != -1)
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_608);
    v11 = logObject_MicroLocation_Default;
    if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_2419D9000, v11, OS_LOG_TYPE_DEBUG, "onSendGenericEventResponseToClient called on non-internal platform. ignored", buf, 2u);
    }
  }
}

void sub_241B5F3F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void ULLogicAdapterImpl::onEnableMiLoAtCurrentLocationCompleted(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v3;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  uint64_t v10;
  _QWORD v11[2];

  v11[1] = *MEMORY[0x24BDAC8D0];
  v6 = *(void **)(a1 + 2992);
  if (a2 == -1)
  {
    v8 = 0;
  }
  else
  {
    v7 = (void *)MEMORY[0x24BDD1540];
    v10 = *MEMORY[0x24BDD0FC8];
    v11[0] = CFSTR("request failed internally");
    objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", v11, &v10, 1);
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "errorWithDomain:code:userInfo:", CFSTR("ULLogicDomain"), a2, v3);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
  }
  v9 = (void *)objc_msgSend(objc_alloc(MEMORY[0x24BDD1880]), "initWithUUIDBytes:", a3);
  objc_msgSend(v6, "didCreateCustomLoiAtCurrentLocationWithError:forConnection:", v8, v9);

  if (a2 != -1)
  {

  }
}

void sub_241B5F52C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void ULLogicAdapterImpl::onLearningBegin(ULLogicAdapterImpl *this)
{
  uint64_t v2;
  double v3;
  int v4[7];
  int v5;
  __int128 v6;
  _BYTE v7[32];
  _QWORD v8[39];

  v8[38] = *MEMORY[0x24BDAC8D0];
  v5 = 0;
  boost::uuids::detail::random_provider_base::random_provider_base((boost::uuids::detail::random_provider_base *)&v5);
  *(_QWORD *)&v6 = boost::uuids::random_generator_pure::operator()((uint64_t)&v5);
  *((_QWORD *)&v6 + 1) = v2;
  v3 = cl::chrono::CFAbsoluteTimeClock::now();
  CLMicroLocationProto::LearnModel::LearnModel((CLMicroLocationProto::LearnModel *)v4);
  CLMicroLocationProtobufHelper::createLoggedEvent<CLMicroLocationProto::LearnModel>(&v6, v4, (uint64_t)v7, v3);
  (*(void (**)(ULLogicAdapterImpl *, _BYTE *))(*(_QWORD *)this + 72))(this, v7);
  CLMicroLocationProto::ReceivedEvent::~ReceivedEvent((CLMicroLocationProto::ReceivedEvent *)v8);
  CLMicroLocationProto::LearnModel::~LearnModel((CLMicroLocationProto::LearnModel *)v4);
  boost::uuids::detail::random_provider_base::destroy((boost::uuids::detail::random_provider_base *)&v5);
  CLMicroLocationLogic::onLearningBegin((CLMicroLocationLogic *)((char *)this + 224));
}

void sub_241B5F638(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, int a13, char a14)
{
  uint64_t v14;

  CLMicroLocationProto::ReceivedEvent::~ReceivedEvent((CLMicroLocationProto::ReceivedEvent *)(v14 + 32));
  CLMicroLocationProto::LearnModel::~LearnModel((CLMicroLocationProto::LearnModel *)&a10);
  boost::uuids::detail::random_provider_base::destroy((boost::uuids::detail::random_provider_base *)&a14);
  _Unwind_Resume(a1);
}

void CLMicroLocationProtobufHelper::createLoggedEvent<CLMicroLocationProto::LearnModel>(_OWORD *a1@<X0>, int *a2@<X1>, uint64_t a3@<X8>, double a4@<D0>)
{
  const CLMicroLocationProto::LearnModel *v8;
  _BYTE v9[304];

  CLMicroLocationProto::ReceivedEvent::ReceivedEvent((CLMicroLocationProto::ReceivedEvent *)v9);
  CLMicroLocationProtobufHelper::setSpecificLoggedEvent((CLMicroLocationProtobufHelper *)v9, (CLMicroLocationProto::ReceivedEvent *)a2, v8);
  CLMicroLocationLoggedEventsTable::Entry::Entry(a3, a1, a2[2], (CLMicroLocationProto::ReceivedEvent *)v9, a4);
  CLMicroLocationProto::ReceivedEvent::~ReceivedEvent((CLMicroLocationProto::ReceivedEvent *)v9);
}

void sub_241B5F6EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  CLMicroLocationProto::ReceivedEvent::~ReceivedEvent((CLMicroLocationProto::ReceivedEvent *)&a9);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'ULLogicAdapterImpl::onLearningBegin(ULLogicAdapterImpl *this)
{
  ULLogicAdapterImpl::onLearningBegin((ULLogicAdapterImpl *)((char *)this - 8));
}

void ULLogicAdapterImpl::onLearningSingleModelOfTypeCompleted(uint64_t a1, int a2, uint64_t a3, void *a4)
{
  id v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  BOOL v11;
  uint64_t *v12;
  uint64_t *v13;
  int v14;
  unsigned int *v15;

  v14 = a2;
  v7 = a4;
  if (*(_BYTE *)(a3 + 312))
  {
    v8 = *(_QWORD *)(a1 + 2976);
    if (!v8)
      goto LABEL_12;
    v9 = a1 + 2976;
    do
    {
      v10 = *(_DWORD *)(v8 + 28);
      v11 = v10 < a2;
      if (v10 >= a2)
        v12 = (uint64_t *)v8;
      else
        v12 = (uint64_t *)(v8 + 8);
      if (!v11)
        v9 = v8;
      v8 = *v12;
    }
    while (*v12);
    if (v9 == a1 + 2976 || *(_DWORD *)(v9 + 28) > a2)
    {
LABEL_12:
      v15 = (unsigned int *)&v14;
      *((_DWORD *)std::__tree<std::__value_type<CLMicroLocationProto::Model_ModelType,unsigned int>,std::__map_value_compare<CLMicroLocationProto::Model_ModelType,std::__value_type<CLMicroLocationProto::Model_ModelType,unsigned int>,std::less<CLMicroLocationProto::Model_ModelType>,true>,std::allocator<std::__value_type<CLMicroLocationProto::Model_ModelType,unsigned int>>>::__emplace_unique_key_args<CLMicroLocationProto::Model_ModelType,std::piecewise_construct_t const&,std::tuple<CLMicroLocationProto::Model_ModelType const&>,std::tuple<>>((uint64_t **)(a1 + 2968), &v14, (uint64_t)&std::piecewise_construct, &v15)+ 8) = 0;
    }
    v15 = (unsigned int *)&v14;
    v13 = std::__tree<std::__value_type<CLMicroLocationProto::Model_ModelType,unsigned int>,std::__map_value_compare<CLMicroLocationProto::Model_ModelType,std::__value_type<CLMicroLocationProto::Model_ModelType,unsigned int>,std::less<CLMicroLocationProto::Model_ModelType>,true>,std::allocator<std::__value_type<CLMicroLocationProto::Model_ModelType,unsigned int>>>::__emplace_unique_key_args<CLMicroLocationProto::Model_ModelType,std::piecewise_construct_t const&,std::tuple<CLMicroLocationProto::Model_ModelType const&>,std::tuple<>>((uint64_t **)(a1 + 2968), &v14, (uint64_t)&std::piecewise_construct, &v15);
    ++*((_DWORD *)v13 + 8);
  }

}

void sub_241B5F7F0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void `non-virtual thunk to'ULLogicAdapterImpl::onLearningSingleModelOfTypeCompleted(uint64_t a1, int a2, uint64_t a3, void *a4)
{
  ULLogicAdapterImpl::onLearningSingleModelOfTypeCompleted(a1 - 8, a2, a3, a4);
}

void ULLogicAdapterImpl::onLearningForModelTypeCompleted(uint64_t a1, signed int a2)
{
  uint64_t v2;
  uint64_t **v4;
  uint64_t v5;
  signed int v6;
  BOOL v7;
  uint64_t *v8;
  unsigned int v9;
  unsigned int *v10;

  v9 = a2;
  v2 = *(_QWORD *)(a1 + 2976);
  if (v2)
  {
    v4 = (uint64_t **)(a1 + 2968);
    v5 = a1 + 2976;
    do
    {
      v6 = *(_DWORD *)(v2 + 28);
      v7 = v6 < a2;
      if (v6 >= a2)
        v8 = (uint64_t *)v2;
      else
        v8 = (uint64_t *)(v2 + 8);
      if (!v7)
        v5 = v2;
      v2 = *v8;
    }
    while (*v8);
    if (v5 != a1 + 2976 && *(_DWORD *)(v5 + 28) <= a2)
    {
      if (*(_DWORD *)(v5 + 32))
      {
        v10 = &v9;
        *((_DWORD *)std::__tree<std::__value_type<CLMicroLocationProto::Model_ModelType,unsigned int>,std::__map_value_compare<CLMicroLocationProto::Model_ModelType,std::__value_type<CLMicroLocationProto::Model_ModelType,unsigned int>,std::less<CLMicroLocationProto::Model_ModelType>,true>,std::allocator<std::__value_type<CLMicroLocationProto::Model_ModelType,unsigned int>>>::__emplace_unique_key_args<CLMicroLocationProto::Model_ModelType,std::piecewise_construct_t const&,std::tuple<CLMicroLocationProto::Model_ModelType const&>,std::tuple<>>(v4, (int *)&v9, (uint64_t)&std::piecewise_construct, &v10)+ 8) = 0;
        CLMicroLocationLogic::onModelGenerated(a1 + 224, v9);
      }
    }
  }
}

void `non-virtual thunk to'ULLogicAdapterImpl::onLearningForModelTypeCompleted(uint64_t a1, signed int a2)
{
  ULLogicAdapterImpl::onLearningForModelTypeCompleted(a1 - 8, a2);
}

uint64_t ULLogicAdapterImpl::resetAndGetDevicesSinceLearnEventTimeForLoi@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X2>, _QWORD *a4@<X8>, double a5@<D0>)
{
  return CLMicroLocationLogic::resetAndGetDevicesSinceLearnEventTimeForLoi(a1 + 224, a2, a3, a4, a5);
}

uint64_t `non-virtual thunk to'ULLogicAdapterImpl::resetAndGetDevicesSinceLearnEventTimeForLoi@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X2>, _QWORD *a4@<X8>, double a5@<D0>)
{
  return CLMicroLocationLogic::resetAndGetDevicesSinceLearnEventTimeForLoi(a1 + 216, a2, a3, a4, a5);
}

void ULLogicAdapterImpl::onLearningCompleted(ULLogicAdapterImpl *this)
{
  uint64_t v2;
  double v3;
  int v4[7];
  int v5;
  __int128 v6;
  _BYTE v7[32];
  _QWORD v8[39];

  v8[38] = *MEMORY[0x24BDAC8D0];
  v5 = 0;
  boost::uuids::detail::random_provider_base::random_provider_base((boost::uuids::detail::random_provider_base *)&v5);
  *(_QWORD *)&v6 = boost::uuids::random_generator_pure::operator()((uint64_t)&v5);
  *((_QWORD *)&v6 + 1) = v2;
  v3 = cl::chrono::CFAbsoluteTimeClock::now();
  CLMicroLocationProto::LearnCompleted::LearnCompleted((CLMicroLocationProto::LearnCompleted *)v4);
  CLMicroLocationProtobufHelper::createLoggedEvent<CLMicroLocationProto::LearnCompleted>(&v6, v4, (uint64_t)v7, v3);
  (*(void (**)(ULLogicAdapterImpl *, _BYTE *))(*(_QWORD *)this + 72))(this, v7);
  CLMicroLocationProto::ReceivedEvent::~ReceivedEvent((CLMicroLocationProto::ReceivedEvent *)v8);
  CLMicroLocationProto::LearnCompleted::~LearnCompleted((CLMicroLocationProto::LearnCompleted *)v4);
  boost::uuids::detail::random_provider_base::destroy((boost::uuids::detail::random_provider_base *)&v5);
  CLMicroLocationLogic::onLearningCompleted((CLMicroLocationLogic *)((char *)this + 224));
}

void sub_241B5F998(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, int a13, char a14)
{
  uint64_t v14;

  CLMicroLocationProto::ReceivedEvent::~ReceivedEvent((CLMicroLocationProto::ReceivedEvent *)(v14 + 32));
  CLMicroLocationProto::LearnCompleted::~LearnCompleted((CLMicroLocationProto::LearnCompleted *)&a10);
  boost::uuids::detail::random_provider_base::destroy((boost::uuids::detail::random_provider_base *)&a14);
  _Unwind_Resume(a1);
}

void CLMicroLocationProtobufHelper::createLoggedEvent<CLMicroLocationProto::LearnCompleted>(_OWORD *a1@<X0>, int *a2@<X1>, uint64_t a3@<X8>, double a4@<D0>)
{
  const CLMicroLocationProto::LearnCompleted *v8;
  _BYTE v9[304];

  CLMicroLocationProto::ReceivedEvent::ReceivedEvent((CLMicroLocationProto::ReceivedEvent *)v9);
  CLMicroLocationProtobufHelper::setSpecificLoggedEvent((CLMicroLocationProtobufHelper *)v9, (CLMicroLocationProto::ReceivedEvent *)a2, v8);
  CLMicroLocationLoggedEventsTable::Entry::Entry(a3, a1, a2[2], (CLMicroLocationProto::ReceivedEvent *)v9, a4);
  CLMicroLocationProto::ReceivedEvent::~ReceivedEvent((CLMicroLocationProto::ReceivedEvent *)v9);
}

void sub_241B5FA4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  CLMicroLocationProto::ReceivedEvent::~ReceivedEvent((CLMicroLocationProto::ReceivedEvent *)&a9);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'ULLogicAdapterImpl::onLearningCompleted(ULLogicAdapterImpl *this)
{
  ULLogicAdapterImpl::onLearningCompleted((ULLogicAdapterImpl *)((char *)this - 8));
}

void ULLogicAdapterImpl::refreshRoutineStateAtLastLocation(ULLogicAdapterImpl *this)
{
  CLMicroLocationLogic::refreshLocationOnInterval((CLMicroLocationLogic *)((char *)this + 224));
}

void `non-virtual thunk to'ULLogicAdapterImpl::refreshRoutineStateAtLastLocation(ULLogicAdapterImpl *this)
{
  CLMicroLocationLogic::refreshLocationOnInterval((CLMicroLocationLogic *)((char *)this + 208));
}

uint64_t ULLogicAdapterImpl::onWiFiChannelHistogramUpdated(ULLogicAdapterImpl *this)
{
  return CLMicroLocationLogic::onWiFiChannelHistogramUpdated((CLMicroLocationLogic *)((char *)this + 224));
}

uint64_t `non-virtual thunk to'ULLogicAdapterImpl::onWiFiChannelHistogramUpdated(ULLogicAdapterImpl *this)
{
  return CLMicroLocationLogic::onWiFiChannelHistogramUpdated((CLMicroLocationLogic *)((char *)this + 192));
}

uint64_t ULLogicAdapterImpl::onLoggedEventsAnalyticsStart(ULLogicAdapterImpl *this)
{
  return CLMicroLocationEventLogger::flushToDisk((CLMicroLocationEventLogger *)((char *)this + 192));
}

uint64_t `non-virtual thunk to'ULLogicAdapterImpl::onLoggedEventsAnalyticsStart(ULLogicAdapterImpl *this)
{
  return CLMicroLocationEventLogger::flushToDisk((CLMicroLocationEventLogger *)((char *)this + 168));
}

void ULLogicAdapterImpl::triggerLearning(ULLogicAdapterImpl *this)
{
  void *v2;
  _QWORD v3[5];

  +[ULTransactionManager shared](ULTransactionManager, "shared");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3[0] = MEMORY[0x24BDAC760];
  v3[1] = 3221225472;
  v3[2] = ___ZN18ULLogicAdapterImpl15triggerLearningEv_block_invoke;
  v3[3] = &__block_descriptor_40_e5_v8__0l;
  v3[4] = this;
  objc_msgSend(v2, "performUnderTransaction:block:", CFSTR("com.apple.milod.learning"), v3);

}

void sub_241B5FB14(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void ___ZN18ULLogicAdapterImpl15triggerLearningEv_block_invoke(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD v3[5];
  uint64_t v4;
  void **v5;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  CLMicroLocationLearner::CLMicroLocationLearner(v3, *(_QWORD *)(a1 + 32) + 8, *(_QWORD *)(a1 + 32) + 40);
  v6[0] = &off_2511DB4A0;
  v7 = v6;
  CLMicroLocationLearner::executeWorkItems(v3, (uint64_t)v6);
  v1 = v7;
  if (v7 == v6)
  {
    v2 = 4;
    v1 = v6;
    goto LABEL_5;
  }
  if (v7)
  {
    v2 = 5;
LABEL_5:
    (*(void (**)(void))(*v1 + 8 * v2))();
  }
  v5 = (void **)&v4;
  std::vector<std::function<void ()(std::function<BOOL ()(void)>)>>::__destroy_vector::operator()[abi:ne180100](&v5);

}

void sub_241B5FBEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, id a9)
{
  uint64_t v9;
  _QWORD *v11;
  uint64_t v12;

  v11 = *(_QWORD **)(v9 - 32);
  if (v11 == (_QWORD *)(v9 - 56))
  {
    v12 = 4;
    v11 = (_QWORD *)(v9 - 56);
  }
  else
  {
    if (!v11)
      goto LABEL_6;
    v12 = 5;
  }
  (*(void (**)(void))(*v11 + 8 * v12))();
LABEL_6:
  CLMicroLocationLearner::~CLMicroLocationLearner(&a9);
  _Unwind_Resume(a1);
}

void CLMicroLocationLearner::~CLMicroLocationLearner(id *this)
{
  void **v2;

  v2 = this + 5;
  std::vector<std::function<void ()(std::function<BOOL ()(void)>)>>::__destroy_vector::operator()[abi:ne180100](&v2);

}

uint64_t ULLogicAdapterImpl::startRapportSession(ULLogicAdapterImpl *this)
{
  return objc_msgSend(*((id *)this + 375), "startRapportSession");
}

uint64_t ULLogicAdapterImpl::stopRapportSession(ULLogicAdapterImpl *this)
{
  return objc_msgSend(*((id *)this + 375), "stopRapportSession");
}

void ULLogicAdapterImpl::learnBlueAtlasModel(ULLogicAdapterImpl *this, uuid *a2)
{
  _BYTE v3[16];
  id v4;
  uint64_t v5;
  void **v6;

  CLMicroLocationLearner::CLMicroLocationLearner(v3, (char *)this + 8, (char *)this + 40);
  CLMicroLocationLearner::learnBlueAtlasModel((CLMicroLocationLearner *)v3, a2);
  v6 = (void **)&v5;
  std::vector<std::function<void ()(std::function<BOOL ()(void)>)>>::__destroy_vector::operator()[abi:ne180100](&v6);

}

void sub_241B5FCE4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  CLMicroLocationLearner::~CLMicroLocationLearner((id *)va);
  _Unwind_Resume(a1);
}

uint64_t ULLogicAdapterImpl::isDataAvailable(ULLogicAdapterImpl *this)
{
  return objc_msgSend(*((id *)this + 376), "isDataAvailable");
}

uint64_t sub_241B5FDD0()
{
  void *v0;

  return 0;
}

void sub_241B5FDE4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_241B5FF7C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  v6 = v4;

  _Unwind_Resume(a1);
}

void sub_241B60090(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_241B600F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)ULLogicAdapter;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_241B60194(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_241B60564(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, char *a16)
{
  void *v16;
  char *v17;
  char *v19;
  uint64_t v20;

  v19 = a16;
  if (a16 == v17)
  {
    v20 = 4;
    v19 = &a13;
  }
  else
  {
    if (!a16)
      goto LABEL_6;
    v20 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v19 + 8 * v20))();
LABEL_6:

  _Unwind_Resume(a1);
}

void sub_241B609E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, char a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,uint64_t a29,std::exception a30,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  void *v39;

  CLMicroLocationProto::ServiceDelete::~ServiceDelete((CLMicroLocationProto::ServiceDelete *)&a16);
  if (a27 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void CLMicroLocationProtobufHelper::createLoggedEvent<CLMicroLocationProto::ServiceDelete>(_OWORD *a1@<X0>, int *a2@<X1>, uint64_t a3@<X8>, double a4@<D0>)
{
  const CLMicroLocationProto::ServiceDelete *v8;
  _BYTE v9[304];

  CLMicroLocationProto::ReceivedEvent::ReceivedEvent((CLMicroLocationProto::ReceivedEvent *)v9);
  CLMicroLocationProtobufHelper::setSpecificLoggedEvent((CLMicroLocationProtobufHelper *)v9, (CLMicroLocationProto::ReceivedEvent *)a2, v8);
  CLMicroLocationLoggedEventsTable::Entry::Entry(a3, a1, a2[6], (CLMicroLocationProto::ReceivedEvent *)v9, a4);
  CLMicroLocationProto::ReceivedEvent::~ReceivedEvent((CLMicroLocationProto::ReceivedEvent *)v9);
}

void sub_241B60B64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  CLMicroLocationProto::ReceivedEvent::~ReceivedEvent((CLMicroLocationProto::ReceivedEvent *)&a9);
  _Unwind_Resume(a1);
}

void sub_241B60CC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  void *v24;
  void *v25;

  if (__p)
    operator delete(__p);
  if (a24 < 0)
    operator delete(a19);

  _Unwind_Resume(a1);
}

void sub_241B614B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, char a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,std::exception a33,uint64_t a34,int a35,__int16 a36,char a37,char a38)
{
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  void *v42;
  void *v43;

  CLMicroLocationProto::ServiceConnect::~ServiceConnect((CLMicroLocationProto::ServiceConnect *)&a15);
  if (a26 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void CLMicroLocationProtobufHelper::createLoggedEvent<CLMicroLocationProto::ServiceConnect>(_OWORD *a1@<X0>, int *a2@<X1>, uint64_t a3@<X8>, double a4@<D0>)
{
  const CLMicroLocationProto::ServiceConnect *v8;
  _BYTE v9[304];

  CLMicroLocationProto::ReceivedEvent::ReceivedEvent((CLMicroLocationProto::ReceivedEvent *)v9);
  CLMicroLocationProtobufHelper::setSpecificLoggedEvent((CLMicroLocationProtobufHelper *)v9, (CLMicroLocationProto::ReceivedEvent *)a2, v8);
  CLMicroLocationLoggedEventsTable::Entry::Entry(a3, a1, a2[6], (CLMicroLocationProto::ReceivedEvent *)v9, a4);
  CLMicroLocationProto::ReceivedEvent::~ReceivedEvent((CLMicroLocationProto::ReceivedEvent *)v9);
}

void sub_241B61628(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  CLMicroLocationProto::ReceivedEvent::~ReceivedEvent((CLMicroLocationProto::ReceivedEvent *)&a9);
  _Unwind_Resume(a1);
}

void sub_241B61844(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;

  if (a24 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void sub_241B61DF0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_241B6236C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_241B628F8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  _Unwind_Resume(a1);
}

void sub_241B62B18(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_241B62CD8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_241B62F18(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_241B6320C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  void *v20;
  void *v21;

  _Unwind_Resume(a1);
}

void sub_241B633E4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_241B63538(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_241B63640(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_241B637AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  void *v18;
  void *v19;

  if (a18 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void sub_241B63A70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;

  _Unwind_Resume(a1);
}

void sub_241B63C64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;

  if (a15 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void sub_241B63E3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;

  if (a15 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void sub_241B64028(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  void *v16;
  void *v17;
  void *v18;

  if (a16 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void sub_241B6416C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  void *v16;
  void *v17;

  if (a15 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void sub_241B64218(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_241B64308(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_241B6438C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_241B643F8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_241B64480(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_241B64588(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_241B646B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_241B64B74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_241B64E00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_241B64FC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

void sub_241B65374(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,id location)
{
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  id *v25;
  void *v26;

  objc_destroyWeak(v25);
  objc_destroyWeak(&location);

  _Unwind_Resume(a1);
}

void sub_241B65600(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_241B65740(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, id a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, id a18)
{
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v21;
  uint64_t v22;

  v21 = *(_QWORD **)(v19 - 32);
  if (v21 == v18)
  {
    v22 = 4;
    v21 = (_QWORD *)(v19 - 56);
  }
  else
  {
    if (!v21)
      goto LABEL_6;
    v22 = 5;
  }
  (*(void (**)(void))(*v21 + 8 * v22))();
LABEL_6:
  CLMicroLocationLearner::~CLMicroLocationLearner(&a10);

  _Unwind_Resume(a1);
}

void sub_241B65870(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, id a18)
{
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v21;
  uint64_t v22;

  v21 = *(_QWORD **)(v19 - 32);
  if (v21 == v18)
  {
    v22 = 4;
    v21 = (_QWORD *)(v19 - 56);
  }
  else
  {
    if (!v21)
      goto LABEL_6;
    v22 = 5;
  }
  (*(void (**)(void))(*v21 + 8 * v22))();
LABEL_6:
  *(_QWORD *)(v19 - 64) = &a10;
  std::vector<std::function<void ()(std::function<BOOL ()(void)>)>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v19 - 64));

  _Unwind_Resume(a1);
}

void sub_241B659AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id a14, void **a15, char a16, uint64_t a17, uint64_t a18, char *a19)
{
  char *v19;
  char *v21;
  uint64_t v22;

  v21 = a19;
  if (a19 == v19)
  {
    v22 = 4;
    v21 = &a16;
  }
  else
  {
    if (!a19)
      goto LABEL_6;
    v22 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v21 + 8 * v22))();
LABEL_6:
  a15 = (void **)&a11;
  std::vector<std::function<void ()(std::function<BOOL ()(void)>)>>::__destroy_vector::operator()[abi:ne180100](&a15);

  _Unwind_Resume(a1);
}

void sub_241B65AEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id a14, void **a15, char a16, uint64_t a17, uint64_t a18, char *a19)
{
  char *v19;
  char *v21;
  uint64_t v22;

  v21 = a19;
  if (a19 == v19)
  {
    v22 = 4;
    v21 = &a16;
  }
  else
  {
    if (!a19)
      goto LABEL_6;
    v22 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v21 + 8 * v22))();
LABEL_6:
  a15 = (void **)&a11;
  std::vector<std::function<void ()(std::function<BOOL ()(void)>)>>::__destroy_vector::operator()[abi:ne180100](&a15);

  _Unwind_Resume(a1);
}

void sub_241B65C48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, char a10, uint64_t a11, uint64_t a12, char *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t *a19)
{
  char *v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;

  v20 = a13;
  if (a13 == &a10)
  {
    v21 = 4;
    v20 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v21 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v20 + 8 * v21))();
LABEL_6:
  v22 = a19;
  if (a19 == &a16)
  {
    v23 = 4;
    v22 = &a16;
  }
  else
  {
    if (!a19)
      goto LABEL_11;
    v23 = 5;
  }
  (*(void (**)(void))(*v22 + 8 * v23))();
LABEL_11:

  _Unwind_Resume(a1);
}

void sub_241B65DAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  void *v13;
  char *v14;
  char *v16;
  uint64_t v17;

  v16 = a13;
  if (a13 == v14)
  {
    v17 = 4;
    v16 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v17 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v16 + 8 * v17))();
LABEL_6:

  _Unwind_Resume(a1);
}

void sub_241B65FA8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_241B661C0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_241B66418(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_241B66694(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_241B668EC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_241B66B18(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_241B66DC0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_241B66FE4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_241B671FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;

  if (a15 < 0)
    operator delete(__p);

  if (a21 < 0)
    operator delete(a16);

  if (a27 < 0)
    operator delete(a22);

  _Unwind_Resume(a1);
}

void sub_241B673B8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_241B674D4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_241B67700(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_241B6784C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_241B678D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_241B67A1C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_241B67BB0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_241B67D0C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_241B67F24(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_241B6817C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_241B68268(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_241B68374(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v2;

  _Unwind_Resume(a1);
}

void sub_241B68534(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id a20)
{
  void *v20;

  _Block_object_dispose(&a15, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__22(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__22(uint64_t a1)
{

}

void sub_241B68648(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void ULLogicAdapterImpl::~ULLogicAdapterImpl(ULLogicAdapterImpl *this)
{
  ULLogicAdapterImpl::~ULLogicAdapterImpl(this);
  JUMPOUT(0x2426A04D4);
}

{
  *(_QWORD *)this = &off_2511DB1B8;
  *((_QWORD *)this + 1) = &unk_2511DB290;
  *((_QWORD *)this + 2) = &unk_2511DB2D8;
  *((_QWORD *)this + 3) = &unk_2511DB300;
  *((_QWORD *)this + 4) = &unk_2511DB328;

  std::__tree<std::__value_type<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,double>,std::__map_value_compare<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,std::__value_type<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,double>,std::less<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes>,true>,std::allocator<std::__value_type<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,double>>>::destroy((uint64_t)this + 2968, *((_QWORD **)this + 372));
  CLMicroLocationLogic::~CLMicroLocationLogic((CLMicroLocationLogic *)((char *)this + 224));
  CLMicroLocationEventLogger::~CLMicroLocationEventLogger((CLMicroLocationEventLogger *)((char *)this + 192));
  ULDatabase::~ULDatabase((ULDatabase *)((char *)this + 40));
}

void ULLogicAdapterImpl::logEvent(ULLogicAdapterImpl *this, Entry *a2)
{
  CLMicroLocationEventLogger::logEvent((CLMicroLocationEventLogger *)((char *)this + 192), a2);
}

void `non-virtual thunk to'ULLogicAdapterImpl::~ULLogicAdapterImpl(ULLogicAdapterImpl *this)
{
  ULLogicAdapterImpl::~ULLogicAdapterImpl((ULLogicAdapterImpl *)((char *)this - 8));
}

{
  ULLogicAdapterImpl::~ULLogicAdapterImpl((ULLogicAdapterImpl *)((char *)this - 8));
  JUMPOUT(0x2426A04D4);
}

{
  ULLogicAdapterImpl::~ULLogicAdapterImpl((ULLogicAdapterImpl *)((char *)this - 16));
}

{
  ULLogicAdapterImpl::~ULLogicAdapterImpl((ULLogicAdapterImpl *)((char *)this - 16));
  JUMPOUT(0x2426A04D4);
}

{
  ULLogicAdapterImpl::~ULLogicAdapterImpl((ULLogicAdapterImpl *)((char *)this - 24));
}

{
  ULLogicAdapterImpl::~ULLogicAdapterImpl((ULLogicAdapterImpl *)((char *)this - 24));
  JUMPOUT(0x2426A04D4);
}

{
  ULLogicAdapterImpl::~ULLogicAdapterImpl((ULLogicAdapterImpl *)((char *)this - 32));
}

{
  ULLogicAdapterImpl::~ULLogicAdapterImpl((ULLogicAdapterImpl *)((char *)this - 32));
  JUMPOUT(0x2426A04D4);
}

void sub_241B6879C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void ___ZL47_CLLogObjectForCategory_MicroLocationQE_Defaultv_block_invoke_5()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.MicroLocation", "MicroLocationQE");
  v1 = (void *)logObject_MicroLocationQE_Default;
  logObject_MicroLocationQE_Default = (uint64_t)v0;

}

void ___ZL45_CLLogObjectForCategory_MicroLocation_Defaultv_block_invoke_96()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.MicroLocation", "MicroLocation");
  v1 = (void *)logObject_MicroLocation_Default;
  logObject_MicroLocation_Default = (uint64_t)v0;

}

uint64_t *std::__tree<std::__value_type<CLMicroLocationProto::Model_ModelType,unsigned int>,std::__map_value_compare<CLMicroLocationProto::Model_ModelType,std::__value_type<CLMicroLocationProto::Model_ModelType,unsigned int>,std::less<CLMicroLocationProto::Model_ModelType>,true>,std::allocator<std::__value_type<CLMicroLocationProto::Model_ModelType,unsigned int>>>::__emplace_unique_key_args<CLMicroLocationProto::Model_ModelType,std::piecewise_construct_t const&,std::tuple<CLMicroLocationProto::Model_ModelType const&>,std::tuple<>>(uint64_t **a1, int *a2, uint64_t a3, unsigned int **a4)
{
  uint64_t *v6;
  uint64_t **v7;
  int v8;
  uint64_t **v9;
  int v10;
  uint64_t *v11;

  v7 = a1 + 1;
  v6 = a1[1];
  if (v6)
  {
    v8 = *a2;
    while (1)
    {
      while (1)
      {
        v9 = (uint64_t **)v6;
        v10 = *((_DWORD *)v6 + 7);
        if (v8 >= v10)
          break;
        v6 = *v9;
        v7 = v9;
        if (!*v9)
          goto LABEL_10;
      }
      if (v10 >= v8)
        break;
      v6 = v9[1];
      if (!v6)
      {
        v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v9 = a1 + 1;
LABEL_10:
    v11 = (uint64_t *)operator new(0x28uLL);
    *(uint64_t *)((char *)v11 + 28) = **a4;
    std::__tree<CLMicroLocationRecordingCompletionMetaInformation::RecordingError>::__insert_node_at(a1, (uint64_t)v9, v7, v11);
    return v11;
  }
  return (uint64_t *)v9;
}

void _ZNSt3__110__function6__funcIZZN18ULLogicAdapterImpl15triggerLearningEvEUb_E3__0NS_9allocatorIS3_EEFbvEED0Ev()
{
  JUMPOUT(0x2426A04D4);
}

_QWORD *_ZNKSt3__110__function6__funcIZZN18ULLogicAdapterImpl15triggerLearningEvEUb_E3__0NS_9allocatorIS3_EEFbvEE7__cloneEv()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_2511DB4A0;
  return result;
}

void _ZNKSt3__110__function6__funcIZZN18ULLogicAdapterImpl15triggerLearningEvEUb_E3__0NS_9allocatorIS3_EEFbvEE7__cloneEPNS0_6__baseIS6_EE(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_2511DB4A0;
}

uint64_t _ZNSt3__110__function6__funcIZZN18ULLogicAdapterImpl15triggerLearningEvEUb_E3__0NS_9allocatorIS3_EEFbvEEclEv()
{
  return 0;
}

uint64_t _ZNKSt3__110__function6__funcIZZN18ULLogicAdapterImpl15triggerLearningEvEUb_E3__0NS_9allocatorIS3_EEFbvEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](a2, (uint64_t)&_ZTIZZN18ULLogicAdapterImpl15triggerLearningEvEUb_E3__0))
    return a1 + 8;
  else
    return 0;
}

void *_ZNKSt3__110__function6__funcIZZN18ULLogicAdapterImpl15triggerLearningEvEUb_E3__0NS_9allocatorIS3_EEFbvEE11target_typeEv()
{
  return &_ZTIZZN18ULLogicAdapterImpl15triggerLearningEvEUb_E3__0;
}

void sub_241B68B4C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_241B68D04(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2426A04D4](v1, 0xA1C400EBEDA77);
  _Unwind_Resume(a1);
}

void sub_241B68ED0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2426A04D4](v1, 0xA1C400770BE9BLL);
  _Unwind_Resume(a1);
}

void sub_241B69090(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_241B69248(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2426A04D4](v1, 0x10A1C404835BCAELL);
  _Unwind_Resume(a1);
}

void sub_241B69414(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2426A04D4](v1, 0x10B3C4089EEB475);
  _Unwind_Resume(a1);
}

void sub_241B695E0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2426A04D4](v1, 0xA1C40069AE433);
  _Unwind_Resume(a1);
}

uint64_t sub_241B69B08()
{
  void *v0;

  return 0;
}

void CLMicroLocationNearestNeighborAlgorithm::localize(CLMicroLocationModel *this@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, char **a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  uint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t *v22;
  double *v23;
  uint64_t *v24;
  uint64_t *v25;
  BOOL v26;
  char *v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  char *v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  char *v40;
  char *v41;
  char *v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  int v46;
  uint64_t *v47;
  _QWORD *v48;
  _QWORD *v49;
  _OWORD *v50;

  if (!CLMicroLocationModel::isValid(this))
  {
    CLMicroLocationNearestNeighborAlgorithm::localize();
    goto LABEL_45;
  }
  if (!*(_BYTE *)(a3 + 32))
  {
LABEL_45:
    CLMicroLocationNearestNeighborAlgorithm::localize();
LABEL_46:
    std::__throw_bad_function_call[abi:ne180100]();
  }
  v48 = 0;
  v49 = 0;
  v47 = (uint64_t *)&v48;
  v9 = *((_QWORD *)this + 41);
  v8 = *((_QWORD *)this + 42);
  if (v9 == v8)
  {
    v12 = 0;
  }
  else
  {
    do
    {
      v10 = *(_QWORD *)(a3 + 24);
      if (!v10)
        goto LABEL_46;
      *(_QWORD *)&v44 = (*(double (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v10 + 48))(v10, *(_QWORD *)v9, a2);
      v11 = v9 + 16;
      std::__tree<std::__value_type<double,boost::uuids::uuid>,std::__map_value_compare<double,std::__value_type<double,boost::uuids::uuid>,std::less<double>,true>,std::allocator<std::__value_type<double,boost::uuids::uuid>>>::__emplace_multi<double,boost::uuids::uuid const&>(&v47, (double *)&v44, (_OWORD *)(v9 + 16));
      v9 += 32;
    }
    while (v11 + 16 != v8);
    v12 = v49;
  }
  +[ULDefaultsSingleton shared](ULDefaultsSingleton, "shared");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v13, "defaultsDictionary");
  v14 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "ULMaximumNearestNeighbors");
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v14, "objectForKey:", v15);
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  if (v16 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
    v17 = objc_msgSend(v16, "unsignedLongValue");
  else
    v17 = objc_msgSend(&unk_2511EE380, "unsignedLongValue");
  v18 = v17;

  if (v18 >= (unint64_t)v12)
    v19 = v12;
  else
    v19 = (_QWORD *)v18;
  if (v18)
    v20 = v19;
  else
    v20 = v12;
  v44 = 0u;
  v45 = 0u;
  v46 = 1065353216;
  if (v20)
  {
    v21 = 0;
    v22 = v47;
    do
    {
      v50 = v22 + 5;
      v23 = (double *)std::__hash_table<std::__hash_value_type<boost::uuids::uuid,double>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,double>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,double>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,double>>>::__emplace_unique_key_args<boost::uuids::uuid,std::piecewise_construct_t const&,std::tuple<boost::uuids::uuid const&>,std::tuple<>>((uint64_t)&v44, v22 + 5, (uint64_t)&std::piecewise_construct, &v50);
      v23[4] = 1.0 / (double)(unint64_t)v20 + v23[4];
      v24 = (uint64_t *)v22[1];
      if (v24)
      {
        do
        {
          v25 = v24;
          v24 = (uint64_t *)*v24;
        }
        while (v24);
      }
      else
      {
        do
        {
          v25 = (uint64_t *)v22[2];
          v26 = *v25 == (_QWORD)v22;
          v22 = v25;
        }
        while (!v26);
      }
      v21 = (_QWORD *)((char *)v21 + 1);
      v22 = v25;
    }
    while (v21 != v20);
    v20 = (_QWORD *)v45;
  }
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  *((_DWORD *)a4 + 6) = 3;
  *((_BYTE *)a4 + 80) = 0;
  a4[5] = 0;
  a4[6] = 0;
  a4[4] = 0;
  *((_BYTE *)a4 + 56) = 0;
  if (v20)
  {
    v27 = 0;
    v28 = a4 + 2;
    do
    {
      v30 = v20[2];
      v29 = v20[3];
      if ((unint64_t)v27 >= *v28)
      {
        v32 = (v27 - *a4) >> 5;
        if ((unint64_t)(v32 + 1) >> 59)
          std::vector<CLMicroLocationProto::ConfidenceReason>::__throw_length_error[abi:ne180100]();
        v33 = *v28 - (_QWORD)*a4;
        v34 = v33 >> 4;
        if (v33 >> 4 <= (unint64_t)(v32 + 1))
          v34 = v32 + 1;
        if ((unint64_t)v33 >= 0x7FFFFFFFFFFFFFE0)
          v35 = 0x7FFFFFFFFFFFFFFLL;
        else
          v35 = v34;
        v36 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CLMicroLocationResultInternal>>((uint64_t)(a4 + 2), v35);
        v38 = &v36[32 * v32];
        v39 = v20[4];
        *(_QWORD *)v38 = v30;
        *((_QWORD *)v38 + 1) = v29;
        *((_QWORD *)v38 + 2) = v39;
        *((_DWORD *)v38 + 6) = 0;
        v41 = *a4;
        v40 = a4[1];
        v42 = v38;
        if (v40 != *a4)
        {
          do
          {
            v43 = *((_OWORD *)v40 - 2);
            *(_OWORD *)(v42 - 20) = *(_OWORD *)(v40 - 20);
            *((_OWORD *)v42 - 2) = v43;
            v42 -= 32;
            v40 -= 32;
          }
          while (v40 != v41);
          v40 = *a4;
        }
        v27 = v38 + 32;
        *a4 = v42;
        a4[1] = v38 + 32;
        a4[2] = &v36[32 * v37];
        if (v40)
          operator delete(v40);
      }
      else
      {
        v31 = v20[4];
        *(_QWORD *)v27 = v30;
        *((_QWORD *)v27 + 1) = v29;
        *((_QWORD *)v27 + 2) = v31;
        *((_DWORD *)v27 + 6) = 0;
        v27 += 32;
      }
      a4[1] = v27;
      v20 = (_QWORD *)*v20;
    }
    while (v20);
  }
  std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>>>::~__hash_table((uint64_t)&v44);
  std::__tree<std::__value_type<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,double>,std::__map_value_compare<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,std::__value_type<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,double>,std::less<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes>,true>,std::allocator<std::__value_type<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,double>>>::destroy((uint64_t)&v47, v48);
}

void sub_241B6A560(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, _QWORD *a15)
{
  void *v15;
  void *v16;
  void *v17;

  std::__tree<std::__value_type<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,double>,std::__map_value_compare<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,std::__value_type<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,double>,std::less<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes>,true>,std::allocator<std::__value_type<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,double>>>::destroy((uint64_t)&a14, a15);
  _Unwind_Resume(a1);
}

void CLMicroLocationNearestNeighborAlgorithm::~CLMicroLocationNearestNeighborAlgorithm(CLMicroLocationNearestNeighborAlgorithm *this)
{
  JUMPOUT(0x2426A04D4);
}

void ___ZL45_CLLogObjectForCategory_MicroLocation_Defaultv_block_invoke_97()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.MicroLocation", "MicroLocation");
  v1 = (void *)logObject_MicroLocation_Default;
  logObject_MicroLocation_Default = (uint64_t)v0;

}

char *std::__tree<std::__value_type<double,boost::uuids::uuid>,std::__map_value_compare<double,std::__value_type<double,boost::uuids::uuid>,std::less<double>,true>,std::allocator<std::__value_type<double,boost::uuids::uuid>>>::__emplace_multi<double,boost::uuids::uuid const&>(uint64_t **a1, double *a2, _OWORD *a3)
{
  char *v6;
  double v7;
  uint64_t **v8;
  uint64_t *v9;
  uint64_t **v10;

  v6 = (char *)operator new(0x38uLL);
  v7 = *a2;
  *((double *)v6 + 4) = *a2;
  *(_OWORD *)(v6 + 40) = *a3;
  v8 = a1 + 1;
  v9 = a1[1];
  if (v9)
  {
    do
    {
      while (1)
      {
        v8 = (uint64_t **)v9;
        if (v7 >= *((double *)v9 + 4))
          break;
        v9 = (uint64_t *)*v9;
        v10 = v8;
        if (!*v8)
          goto LABEL_8;
      }
      v9 = (uint64_t *)v9[1];
    }
    while (v9);
    v10 = v8 + 1;
  }
  else
  {
    v10 = a1 + 1;
  }
LABEL_8:
  std::__tree<CLMicroLocationRecordingCompletionMetaInformation::RecordingError>::__insert_node_at(a1, (uint64_t)v8, v10, (uint64_t *)v6);
  return v6;
}

_QWORD *ULWiFiHistogramAnalyzer::ULWiFiHistogramAnalyzer(_QWORD *result, uint64_t a2, uint64_t a3)
{
  *result = a2;
  result[1] = a3;
  result[2] = &off_2511DBCD8;
  result[3] = result;
  result[5] = result + 2;
  return result;
}

_QWORD *ULWiFiHistogramAnalyzer::executeWiFiItem(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD *result;
  uint64_t v5;
  _BYTE v6[24];
  _BYTE *v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  std::__function::__value_func<double ()(CLMicroLocationFingerprint const&,CLMicroLocationFingerprint const&)>::__value_func[abi:ne180100]((uint64_t)v6, a2);
  v3 = *(_QWORD *)(a1 + 40);
  if (!v3)
    std::__throw_bad_function_call[abi:ne180100]();
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v3 + 48))(v3, v6);
  result = v7;
  if (v7 == v6)
  {
    v5 = 4;
    result = v6;
  }
  else
  {
    if (!v7)
      return result;
    v5 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v5))();
}

void sub_241B6A7C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  _Unwind_Resume(exception_object);
}

void ULWiFiHistogramAnalyzer::analyzeWiFiChannels(_QWORD *a1, uint64_t a2)
{
  NSObject *v4;
  id v5;
  void *v6;
  NSObject *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  int v12;
  int v13;
  CLMicroLocationTimeUtils *v14;
  NSDate *v15;
  int v16;
  uint64_t v17;
  double v18;
  double v19;
  double v20;
  double v21;
  id v22;
  void *v23;
  CLMicroLocationProto::Measurement *v24;
  id v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  const CLMicroLocationProto::WiFiRssi *v29;
  CLMicroLocationProto::WiFiRssi *v30;
  CLMicroLocationProto::WiFiRssi *v31;
  int *v32;
  int *v33;
  int v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  int v39;
  uint64_t v40;
  double v41;
  unint64_t v42;
  uint64_t v43;
  double v44;
  double v45;
  id v46;
  void *v47;
  NSObject *v48;
  NSObject *v49;
  NSObject *v50;
  NSObject *v51;
  uint64_t v52;
  const char *v53;
  NSObject *v54;
  uint32_t v55;
  uint64_t v56;
  NSDate *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  void *v61;
  int *v62;
  _OWORD v63[2];
  int v64;
  uint64_t v65;
  unint64_t v66;
  unint64_t v67;
  NSDate *v68;
  NSDate *v69;
  uint64_t v70;
  void *__p;
  _QWORD v72[3];
  uint8_t buf[32];
  __int128 v74;
  _OWORD v75[4];
  uint64_t v76;
  uint8_t *v77;
  CLMicroLocationProto::WiFiRssi *v78;
  unint64_t v79;
  int v80;
  uint64_t v81;

  v81 = *MEMORY[0x24BDAC8D0];
  if (onceToken_MicroLocation_Default != -1)
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_121);
  v4 = logObject_MicroLocation_Default;
  if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 68289026;
    *(_DWORD *)&buf[4] = 0;
    *(_WORD *)&buf[8] = 2082;
    *(_QWORD *)&buf[10] = "";
    _os_log_impl(&dword_2419D9000, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"analyzing WiFi channels\"}", buf, 0x12u);
  }
  v5 = *(id *)(a1[1] + 56);
  v6 = v5;
  if (v5)
  {
    objc_msgSend(v5, "fetchAllDistinctLoiGroups");
  }
  else
  {
    v68 = 0;
    v69 = 0;
    v70 = 0;
  }

  if (onceToken_MicroLocation_Default != -1)
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_121);
  v7 = logObject_MicroLocation_Default;
  if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 134217984;
    *(_QWORD *)&buf[4] = ((char *)v69 - (char *)v68) >> 6;
    _os_log_impl(&dword_2419D9000, v7, OS_LOG_TYPE_DEFAULT, "Got %zu Unique LOI Ids", buf, 0xCu);
  }
  if (v68 == v69)
  {
    if (onceToken_MicroLocation_Default != -1)
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_121);
    v49 = logObject_MicroLocation_Default;
    if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289026;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)&buf[8] = 2082;
      *(_QWORD *)&buf[10] = "";
      _os_log_impl(&dword_2419D9000, v49, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"no LOI ids found\"}", buf, 0x12u);
    }
  }
  else
  {
    +[ULDefaultsSingleton shared](ULDefaultsSingleton, "shared");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "defaultsDictionary");
    v9 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "ULNumberDaysToAnalyzeWiFiChannels");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "objectForKey:", v10);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    if (v11 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
      v12 = objc_msgSend(v11, "intValue");
    else
      v12 = objc_msgSend(&unk_2511EE398, "intValue");
    v13 = v12;

    objc_msgSend(MEMORY[0x24BDBCE60], "date");
    v14 = (CLMicroLocationTimeUtils *)objc_claimAutoreleasedReturnValue();
    v65 = 0;
    v66 = 0;
    v67 = 0;
    v15 = v68;
    v57 = v69;
    if (v68 == v69)
    {
LABEL_84:
      if (onceToken_MicroLocation_Default != -1)
        dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_121);
      v52 = logObject_MicroLocation_Default;
      if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 68289026;
        *(_DWORD *)&buf[4] = 0;
        *(_WORD *)&buf[8] = 2082;
        *(_QWORD *)&buf[10] = "";
        v53 = "{\"msg%{public}.0s\":\"Wifi Channel Histogram was not generated\"}";
        v54 = v52;
        v55 = 18;
LABEL_88:
        _os_log_impl(&dword_2419D9000, v54, OS_LOG_TYPE_DEFAULT, v53, buf, v55);
      }
    }
    else
    {
      do
      {
        memset(v63, 0, sizeof(v63));
        v64 = 1065353216;
        if (v13 >= 1)
        {
          v16 = 0;
          while (1)
          {
            v17 = *(_QWORD *)(a2 + 24);
            if (!v17)
              std::__throw_bad_function_call[abi:ne180100]();
            if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v17 + 48))(v17))
              break;
            CLMicroLocationTimeUtils::getTimeDeltaDaysAgo(v14, (NSDate *)~v16);
            v19 = v18;
            CLMicroLocationTimeUtils::getTimeDeltaDaysAgo(v14, (NSDate *)-v16);
            v21 = v20;
            v22 = *(id *)(a1[1] + 64);
            v23 = v22;
            if (v22)
            {
              objc_msgSend(v22, "fetchLearningMeasurementsAtLoiGroupId:fromTime:toTime:", &v15[3], v19, v21);
            }
            else
            {
              v58 = 0;
              v59 = 0;
              v60 = 0;
            }

            if (*(_OWORD *)&v15[3].super.isa != 0)
            {
              v25 = *(id *)(a1[1] + 64);
              v26 = v25;
              v77 = 0;
              v78 = 0;
              if (v25)
                objc_msgSend(v25, "fetchLearningMeasurementsAtLoiGroupId:fromTime:toTime:", &v77, v19, v21);
              else
                memset(buf, 0, 24);

              std::vector<CLMicroLocationMeasurementTable::Entry>::__insert_with_size[abi:ne180100]<std::move_iterator<std::__wrap_iter<CLMicroLocationMeasurementTable::Entry*>>,std::move_iterator<std::__wrap_iter<CLMicroLocationMeasurementTable::Entry*>>>(&v58, v59, *(uint64_t *)buf, *(uint64_t *)&buf[8], 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(*(_QWORD *)&buf[8] - *(_QWORD *)buf) >> 3));
              v77 = buf;
              std::vector<CLMicroLocationMeasurementTable::Entry>::__destroy_vector::operator()[abi:ne180100]((void ***)&v77);
            }
            v27 = v58;
            v28 = v59;
            if (v58 != v59)
            {
              v77 = 0;
              v78 = 0;
              v79 = 0;
              do
              {
                if (*(_DWORD *)(v27 + 96) == 1)
                {
                  v29 = *(const CLMicroLocationProto::WiFiRssi **)(v27 + 48);
                  if (!v29)
                    v29 = *(const CLMicroLocationProto::WiFiRssi **)(CLMicroLocationProto::Measurement::default_instance(v24)
                                                                   + 16);
                  CLMicroLocationProto::WiFiRssi::WiFiRssi((CLMicroLocationProto::WiFiRssi *)buf, v29);
                  v30 = v78;
                  if ((unint64_t)v78 >= v79)
                  {
                    v31 = (CLMicroLocationProto::WiFiRssi *)std::vector<CLMicroLocationProto::WiFiRssi>::__push_back_slow_path<CLMicroLocationProto::WiFiRssi const&>((uint64_t *)&v77, (const CLMicroLocationProto::WiFiRssi *)buf);
                  }
                  else
                  {
                    CLMicroLocationProto::WiFiRssi::WiFiRssi(v78, (const CLMicroLocationProto::WiFiRssi *)buf);
                    v31 = (CLMicroLocationProto::WiFiRssi *)((char *)v30 + 48);
                  }
                  v78 = v31;
                  CLMicroLocationProto::WiFiRssi::~WiFiRssi((CLMicroLocationProto::WiFiRssi *)buf);
                }
                v27 += 120;
              }
              while (v27 != v28);
              CLMicroLocationWiFiChannelHistogramAnalyzer::update(v63, (uint64_t *)&v77);
              *(_QWORD *)buf = &v77;
              std::vector<CLMicroLocationProto::WiFiRssi>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
            }
            *(_QWORD *)buf = &v58;
            std::vector<CLMicroLocationMeasurementTable::Entry>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
            if (++v16 == v13)
              goto LABEL_42;
          }
          if (onceToken_MicroLocation_Default != -1)
            dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_121);
          v50 = logObject_MicroLocation_Default;
          if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 68289282;
            *(_DWORD *)&buf[4] = 0;
            *(_WORD *)&buf[8] = 2082;
            *(_QWORD *)&buf[10] = "";
            *(_WORD *)&buf[18] = 2082;
            *(_QWORD *)&buf[20] = "MicroLocationAnalytics";
            _os_log_impl(&dword_2419D9000, v50, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"wifi channels analytics operation cancelled\", \"Activity\":%{public, location:escape_only}s}", buf, 0x1Cu);
          }
          std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>>>::~__hash_table((uint64_t)v63);
          goto LABEL_89;
        }
LABEL_42:
        if (!CLMicroLocationWiFiChannelHistogramAnalyzer::isEmpty((CLMicroLocationWiFiChannelHistogramAnalyzer *)v63))
        {
          CLMicroLocationWiFiChannelHistogramAnalyzer::getHistogram((uint64_t)v63, (unsigned __int8 *)&v15[5], (uint64_t *)&v61);
          CLMicroLocationProto::WifiHistogram::WifiHistogram((uint64_t)&v77);
          v32 = (int *)v61;
          v33 = v62;
          if (v61 != v62)
          {
            v34 = v79;
            do
            {
              v35 = HIDWORD(v79);
              if (v34 >= SHIDWORD(v79))
              {
                if (HIDWORD(v79) == v80)
                {
                  wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)&v78);
                  v35 = HIDWORD(v79);
                }
                HIDWORD(v79) = v35 + 1;
                v36 = wireless_diagnostics::google::protobuf::internal::GenericTypeHandler<CLMicroLocationProto::ChannelAndCount>::New();
                v37 = (int)v79;
                v34 = v79 + 1;
                LODWORD(v79) = v79 + 1;
                *((_QWORD *)v78 + v37) = v36;
              }
              else
              {
                LODWORD(v79) = v34 + 1;
                v36 = *((_QWORD *)v78 + v34++);
              }
              v38 = *v32;
              v39 = *(_DWORD *)(v36 + 24);
              *(_DWORD *)(v36 + 24) = v39 | 1;
              *(_DWORD *)(v36 + 16) = v38;
              v40 = v32[1];
              *(_DWORD *)(v36 + 24) = v39 | 3;
              *(_QWORD *)(v36 + 8) = v40;
              v32 += 2;
            }
            while (v32 != v33);
          }
          v41 = cl::chrono::CFAbsoluteTimeClock::now();
          CLMicroLocationProtobufHelper::createConfiguration<CLMicroLocationProto::WifiHistogram>((CLMicroLocationProto::Configuration *)&v77, (uint64_t)&v58, v41);
          v42 = v66;
          if (v66 >= v67)
          {
            v43 = std::vector<CLMicroLocationConfigurationTable::Entry>::__emplace_back_slow_path<std::string const&,CLMicroLocationProto::Configuration &,boost::uuids::uuid const&>(&v65, (uint64_t)&v15[5], (uint64_t)&v58, &v15[3].super.isa);
          }
          else
          {
            std::allocator<CLMicroLocationConfigurationTable::Entry>::construct[abi:ne180100]<CLMicroLocationConfigurationTable::Entry,std::string const&,CLMicroLocationProto::Configuration &,boost::uuids::uuid const&>((uint64_t)&v67, v66, (uint64_t)&v15[5], (uint64_t)&v58, &v15[3].super.isa);
            v43 = v42 + 112;
          }
          v66 = v43;
          CLMicroLocationTimeUtils::getTimeDeltaDaysAgo(v14, (NSDate *)-v13);
          v45 = v44;
          v46 = *(id *)(a1[1] + 32);
          v47 = v46;
          LODWORD(__p) = 0;
          if (v46)
          {
            objc_msgSend(v46, "fetchMostRecentConfiguration:atLoiGroupId:beforeTime:", &__p, &v15[3], v45);
          }
          else
          {
            v76 = 0;
            memset(v75, 0, sizeof(v75));
            v74 = 0u;
            memset(buf, 0, sizeof(buf));
          }

          if ((_BYTE)v76)
          {
            CLMicroLocationWiFiChannelHistogramAnalyzer::histogramFromProtobuf((uint64_t)v75 + 8, (unsigned __int8 *)&v15[5], &__p);
            if (__p)
            {
              v72[0] = __p;
              operator delete(__p);
            }
          }
          else
          {
            if (onceToken_MicroLocation_Default != -1)
              dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_121);
            v48 = logObject_MicroLocation_Default;
            if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_INFO))
            {
              __p = (void *)68289026;
              LOWORD(v72[0]) = 2082;
              *(_QWORD *)((char *)v72 + 2) = "";
              _os_log_impl(&dword_2419D9000, v48, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Wifi Channel Histogram analytics was not sent since not enough time elapsed\"}", (uint8_t *)&__p, 0x12u);
            }
          }
          std::__optional_destruct_base<CLMicroLocationConfigurationTable::Entry,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)buf);
          CLMicroLocationProto::Configuration::~Configuration((CLMicroLocationProto::Configuration *)&v58);
          CLMicroLocationProto::WifiHistogram::~WifiHistogram((CLMicroLocationProto::WifiHistogram *)&v77);
          if (v61)
          {
            v62 = (int *)v61;
            operator delete(v61);
          }
        }
        std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>>>::~__hash_table((uint64_t)v63);
        v15 += 8;
      }
      while (v15 != v57);
      if (v65 == v66)
        goto LABEL_84;
      if (objc_msgSend(*(id *)(a1[1] + 32), "insertEntries:", &v65))
      {
        if (onceToken_MicroLocation_Default != -1)
          dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_121);
        v51 = logObject_MicroLocation_Default;
        if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 68289026;
          *(_DWORD *)&buf[4] = 0;
          *(_WORD *)&buf[8] = 2082;
          *(_QWORD *)&buf[10] = "";
          _os_log_impl(&dword_2419D9000, v51, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Wifi Channel Histogram generated successfully\"}", buf, 0x12u);
        }
        (*(void (**)(_QWORD))(*(_QWORD *)*a1 + 16))(*a1);
      }
      else
      {
        if (onceToken_MicroLocation_Default != -1)
          dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_121);
        v56 = logObject_MicroLocation_Default;
        if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 68289282;
          *(_DWORD *)&buf[4] = 0;
          *(_WORD *)&buf[8] = 2082;
          *(_QWORD *)&buf[10] = "";
          *(_WORD *)&buf[18] = 1026;
          *(_DWORD *)&buf[20] = 0;
          v53 = "{\"msg%{public}.0s\":\"#Warning Wifi Channel Histogram was not generated properly\", \"Inserted\":%{public}hhd}";
          v54 = v56;
          v55 = 24;
          goto LABEL_88;
        }
      }
    }
LABEL_89:
    *(_QWORD *)buf = &v65;
    std::vector<CLMicroLocationConfigurationTable::Entry>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);

  }
  *(_QWORD *)buf = &v68;
  std::vector<CLMiLoLoiTable::Entry>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
}

void sub_241B6B244(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43)
{
  void *v43;

  a17 = &a33;
  std::vector<CLMicroLocationConfigurationTable::Entry>::__destroy_vector::operator()[abi:ne180100]((void ***)&a17);

  a17 = &a36;
  std::vector<CLMiLoLoiTable::Entry>::__destroy_vector::operator()[abi:ne180100]((void ***)&a17);
  _Unwind_Resume(a1);
}

void ___ZL45_CLLogObjectForCategory_MicroLocation_Defaultv_block_invoke_98()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.MicroLocation", "MicroLocation");
  v1 = (void *)logObject_MicroLocation_Default;
  logObject_MicroLocation_Default = (uint64_t)v0;

}

void std::__function::__func<ULWiFiHistogramAnalyzer::ULWiFiHistogramAnalyzer(ULWiFiHistogramAnalyzer::IWiFiAnalyzerDelegate &,ULDatabase &)::$_0,std::allocator<ULWiFiHistogramAnalyzer::ULWiFiHistogramAnalyzer(ULWiFiHistogramAnalyzer::IWiFiAnalyzerDelegate &,ULDatabase &)::$_0>,void ()(std::function<BOOL ()(void)>)>::~__func()
{
  JUMPOUT(0x2426A04D4);
}

_QWORD *std::__function::__func<ULWiFiHistogramAnalyzer::ULWiFiHistogramAnalyzer(ULWiFiHistogramAnalyzer::IWiFiAnalyzerDelegate &,ULDatabase &)::$_0,std::allocator<ULWiFiHistogramAnalyzer::ULWiFiHistogramAnalyzer(ULWiFiHistogramAnalyzer::IWiFiAnalyzerDelegate &,ULDatabase &)::$_0>,void ()(std::function<BOOL ()(void)>)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_2511DBCD8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<ULWiFiHistogramAnalyzer::ULWiFiHistogramAnalyzer(ULWiFiHistogramAnalyzer::IWiFiAnalyzerDelegate &,ULDatabase &)::$_0,std::allocator<ULWiFiHistogramAnalyzer::ULWiFiHistogramAnalyzer(ULWiFiHistogramAnalyzer::IWiFiAnalyzerDelegate &,ULDatabase &)::$_0>,void ()(std::function<BOOL ()(void)>)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_2511DBCD8;
  a2[1] = v2;
  return result;
}

_QWORD *std::__function::__func<ULWiFiHistogramAnalyzer::ULWiFiHistogramAnalyzer(ULWiFiHistogramAnalyzer::IWiFiAnalyzerDelegate &,ULDatabase &)::$_0,std::allocator<ULWiFiHistogramAnalyzer::ULWiFiHistogramAnalyzer(ULWiFiHistogramAnalyzer::IWiFiAnalyzerDelegate &,ULDatabase &)::$_0>,void ()(std::function<BOOL ()(void)>)>::operator()(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *result;
  uint64_t v8;
  _QWORD v9[3];
  _QWORD *v10;
  _BYTE v11[24];
  _BYTE *v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  std::__function::__value_func<BOOL ()(void)>::__value_func[abi:ne180100]((uint64_t)v9, a2);
  v3 = *(_QWORD **)(a1 + 8);
  v4 = (uint64_t)v10;
  if (!v10)
    goto LABEL_4;
  if (v10 != v9)
  {
    v4 = (*(uint64_t (**)(void))(*v10 + 16))();
LABEL_4:
    v12 = (_BYTE *)v4;
    goto LABEL_6;
  }
  v12 = v11;
  (*(void (**)(_QWORD *, _BYTE *))(v9[0] + 24))(v9, v11);
LABEL_6:
  ULWiFiHistogramAnalyzer::analyzeWiFiChannels(v3, (uint64_t)v11);
  v5 = v12;
  if (v12 == v11)
  {
    v6 = 4;
    v5 = v11;
  }
  else
  {
    if (!v12)
      goto LABEL_11;
    v6 = 5;
  }
  (*(void (**)(void))(*v5 + 8 * v6))();
LABEL_11:
  result = v10;
  if (v10 == v9)
  {
    v8 = 4;
    result = v9;
  }
  else
  {
    if (!v10)
      return result;
    v8 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v8))();
}

void sub_241B6B578(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  char *v18;
  uint64_t v19;

  v18 = a13;
  if (a13 == &a10)
  {
    v19 = 4;
    v18 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v19 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v18 + 8 * v19))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<ULWiFiHistogramAnalyzer::ULWiFiHistogramAnalyzer(ULWiFiHistogramAnalyzer::IWiFiAnalyzerDelegate &,ULDatabase &)::$_0,std::allocator<ULWiFiHistogramAnalyzer::ULWiFiHistogramAnalyzer(ULWiFiHistogramAnalyzer::IWiFiAnalyzerDelegate &,ULDatabase &)::$_0>,void ()(std::function<BOOL ()(void)>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<ULWiFiHistogramAnalyzer::ULWiFiHistogramAnalyzer(ULWiFiHistogramAnalyzer::IWiFiAnalyzerDelegate &,ULDatabase &)::$_0,std::allocator<ULWiFiHistogramAnalyzer::ULWiFiHistogramAnalyzer(ULWiFiHistogramAnalyzer::IWiFiAnalyzerDelegate &,ULDatabase &)::$_0>,void ()(std::function<BOOL ()(void)>)>::target_type()
{
}

uint64_t std::vector<CLMicroLocationMeasurementTable::Entry>::__insert_with_size[abi:ne180100]<std::move_iterator<std::__wrap_iter<CLMicroLocationMeasurementTable::Entry*>>,std::move_iterator<std::__wrap_iter<CLMicroLocationMeasurementTable::Entry*>>>(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;
  _QWORD v27[2];
  char *v28;
  char *v29;
  uint64_t v30;

  v5 = a2;
  if (a5 >= 1)
  {
    v7 = a3;
    v11 = a1[2];
    v9 = (uint64_t)(a1 + 2);
    v10 = v11;
    v12 = *(_QWORD *)(v9 - 8);
    if ((uint64_t)(0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(v11 - v12) >> 3)) >= a5)
    {
      v20 = v12 - a2;
      if ((uint64_t)(0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(v12 - a2) >> 3)) >= a5)
      {
        v21 = a3 + 120 * a5;
      }
      else
      {
        v21 = a3 + 8 * ((uint64_t)(v12 - a2) >> 3);
        a1[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<CLMicroLocationMeasurementTable::Entry>,std::move_iterator<std::__wrap_iter<CLMicroLocationMeasurementTable::Entry*>>,std::move_iterator<std::__wrap_iter<CLMicroLocationMeasurementTable::Entry*>>,CLMicroLocationMeasurementTable::Entry*>(v9, v21, a4, *(_QWORD *)(v9 - 8));
        if (v20 < 1)
          return v5;
      }
      std::vector<CLMicroLocationMeasurementTable::Entry>::__move_range((uint64_t)a1, v5, v12, v5 + 120 * a5);
      if (v21 != v7)
      {
        v22 = v5;
        do
        {
          CLMicroLocationMeasurementTable::Entry::operator=(v22, v7);
          v7 += 120;
          v22 += 120;
        }
        while (v7 != v21);
      }
    }
    else
    {
      v13 = *a1;
      v14 = a5 - 0x1111111111111111 * ((uint64_t)(v12 - *a1) >> 3);
      if (v14 > 0x222222222222222)
        std::vector<CLMicroLocationProto::ConfidenceReason>::__throw_length_error[abi:ne180100]();
      v15 = 0xEEEEEEEEEEEEEEEFLL * ((a2 - v13) >> 3);
      v16 = 0xEEEEEEEEEEEEEEEFLL * ((v10 - v13) >> 3);
      v17 = 2 * v16;
      if (2 * v16 <= v14)
        v17 = v14;
      if (v16 >= 0x111111111111111)
        v18 = 0x222222222222222;
      else
        v18 = v17;
      v30 = v9;
      if (v18)
        v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CLMicroLocationMeasurementTable::Entry>>(v9, v18);
      else
        v19 = 0;
      v23 = &v19[120 * v15];
      v27[0] = v19;
      v27[1] = v23;
      v28 = v23;
      v29 = &v19[120 * v18];
      v24 = 120 * a5;
      v25 = &v23[120 * a5];
      do
      {
        CLMicroLocationMeasurementTable::Entry::Entry(v23, v7);
        v23 += 120;
        v7 += 120;
        v24 -= 120;
      }
      while (v24);
      v28 = v25;
      v5 = std::vector<CLMicroLocationMeasurementTable::Entry>::__swap_out_circular_buffer(a1, v27, v5);
      std::__split_buffer<CLMicroLocationMeasurementTable::Entry>::~__split_buffer((uint64_t)v27);
    }
  }
  return v5;
}

void sub_241B6B804(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12;
  uint64_t v13;

  *(_QWORD *)(v12 + 8) = v13;
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<CLMicroLocationMeasurementTable::Entry>::__move_range(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v10;

  v6 = *(_QWORD *)(a1 + 8);
  v7 = a2 + v6 - a4;
  v8 = v6;
  if (v7 < a3)
  {
    v10 = a2 + v6 - a4;
    v8 = *(_QWORD *)(a1 + 8);
    do
    {
      CLMicroLocationMeasurementTable::Entry::Entry(v8, v10);
      v10 += 120;
      v8 += 120;
    }
    while (v10 < a3);
  }
  *(_QWORD *)(a1 + 8) = v8;
  return std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__move_backward_loop<std::_ClassicAlgPolicy>,std::__move_backward_trivial>,CLMicroLocationMeasurementTable::Entry *,CLMicroLocationMeasurementTable::Entry *,CLMicroLocationMeasurementTable::Entry *,0>(a2, v7, v6);
}

void sub_241B6B8B8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<CLMicroLocationMeasurementTable::Entry>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v6 = a2[1];
  v7 = (uint64_t)(a1 + 2);
  std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<CLMicroLocationMeasurementTable::Entry>,std::reverse_iterator<CLMicroLocationMeasurementTable::Entry*>,std::reverse_iterator<CLMicroLocationMeasurementTable::Entry*>,std::reverse_iterator<CLMicroLocationMeasurementTable::Entry*>>((uint64_t)(a1 + 2), a3, a3, *a1, *a1, v6, v6);
  a2[1] = v8;
  a2[2] = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<CLMicroLocationMeasurementTable::Entry>,CLMicroLocationMeasurementTable::Entry*,CLMicroLocationMeasurementTable::Entry*,CLMicroLocationMeasurementTable::Entry*>(v7, a3, a1[1], a2[2]);
  v9 = *a1;
  *a1 = a2[1];
  a2[1] = v9;
  v10 = a1[1];
  a1[1] = a2[2];
  a2[2] = v10;
  v11 = a1[2];
  a1[2] = a2[3];
  a2[3] = v11;
  *a2 = a2[1];
  return v6;
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<CLMicroLocationMeasurementTable::Entry>,std::move_iterator<std::__wrap_iter<CLMicroLocationMeasurementTable::Entry*>>,std::move_iterator<std::__wrap_iter<CLMicroLocationMeasurementTable::Entry*>>,CLMicroLocationMeasurementTable::Entry*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;

  if (a2 != a3)
  {
    v7 = 0;
    do
    {
      CLMicroLocationMeasurementTable::Entry::Entry(a4 + v7, a2 + v7);
      v7 += 120;
    }
    while (a2 + v7 != a3);
    a4 += v7;
  }
  return a4;
}

void sub_241B6B9CC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  if (v2)
  {
    v4 = v1 - 88;
    do
    {
      CLMicroLocationProto::Measurement::~Measurement((CLMicroLocationProto::Measurement *)(v4 + v2));
      v2 -= 120;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__move_backward_loop<std::_ClassicAlgPolicy>,std::__move_backward_trivial>,CLMicroLocationMeasurementTable::Entry *,CLMicroLocationMeasurementTable::Entry *,CLMicroLocationMeasurementTable::Entry *,0>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  if (a2 != a1)
  {
    v6 = a2;
    do
    {
      v6 -= 120;
      a3 -= 120;
      CLMicroLocationMeasurementTable::Entry::operator=(a3, v6);
    }
    while (v6 != a1);
  }
  return a2;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<CLMicroLocationMeasurementTable::Entry>,CLMicroLocationMeasurementTable::Entry*,CLMicroLocationMeasurementTable::Entry*,CLMicroLocationMeasurementTable::Entry*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;

  if (a2 != a3)
  {
    v7 = 0;
    do
    {
      v8 = a4 + v7;
      v9 = a2 + v7;
      v10 = *(_OWORD *)(a2 + v7 + 16);
      *(_OWORD *)v8 = *(_OWORD *)(a2 + v7);
      *(_OWORD *)(v8 + 16) = v10;
      CLMicroLocationProto::Measurement::Measurement((CLMicroLocationProto::Measurement *)(a4 + v7 + 32), (const CLMicroLocationProto::Measurement *)(a2 + v7 + 32));
      *(_DWORD *)(v8 + 112) = *(_DWORD *)(a2 + v7 + 112);
      v7 += 120;
    }
    while (v9 + 120 != a3);
    a4 += v7;
  }
  return a4;
}

void sub_241B6BAC8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  if (v2)
  {
    v4 = v1 - 88;
    do
    {
      CLMicroLocationProto::Measurement::~Measurement((CLMicroLocationProto::Measurement *)(v4 + v2));
      v2 -= 120;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

void CLMicroLocationMaintenance::CLMicroLocationMaintenance(CLMicroLocationMaintenance *this, ULDatabase *a2)
{
  char *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD v7[4];
  _QWORD v8[4];
  _QWORD v9[4];
  _QWORD v10[3];
  _QWORD *v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)this = a2;
  v7[0] = &off_2511DBDA8;
  v7[1] = this;
  v7[3] = v7;
  v8[0] = &off_2511DBE28;
  v8[1] = this;
  v8[3] = v8;
  v9[0] = &off_2511DBEA8;
  v9[1] = this;
  v9[3] = v9;
  v10[0] = &off_2511DBF28;
  v10[1] = this;
  v11 = v10;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 1) = 0;
  v3 = (char *)operator new(0x80uLL);
  *((_QWORD *)this + 3) = v3 + 128;
  *((_QWORD *)this + 1) = v3;
  *((_QWORD *)this + 2) = v3;
  v4 = 0;
  *((_QWORD *)this + 2) = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::function<void ()(std::function<BOOL ()(void)>)>>,std::function<void ()(std::function<BOOL ()(void)>)> const*,std::function<void ()(std::function<BOOL ()(void)>)> const*,std::function<void ()(std::function<BOOL ()(void)>)>*>((uint64_t)this + 24, (uint64_t)v7, (uint64_t)&v12, (uint64_t)v3);
  do
  {
    v5 = (&v11)[v4];
    if (&v10[v4] == v5)
    {
      v5 = &v10[v4];
      v6 = 4;
    }
    else
    {
      if (!v5)
        goto LABEL_7;
      v6 = 5;
    }
    (*(void (**)(void))(*v5 + 8 * v6))();
LABEL_7:
    v4 -= 4;
  }
  while (v4 != -16);
  *((_QWORD *)this + 7) = 0;
  *((_QWORD *)this + 8) = 0;
}

void sub_241B6BC2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, char a12)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  char *v17;
  uint64_t v18;

  v14 = v13;
  *(_QWORD *)(v12 + 16) = v14;
  std::vector<std::function<void ()(std::function<BOOL ()(void)>)>>::__destroy_vector::operator()[abi:ne180100](&a10);
  v16 = 0;
  while (1)
  {
    v17 = *(char **)(&a12 + v16 + 120);
    if (&a12 + v16 + 96 == v17)
      break;
    if (v17)
    {
      v18 = 5;
LABEL_6:
      (*(void (**)(void))(*(_QWORD *)v17 + 8 * v18))();
    }
    v16 -= 32;
    if (v16 == -128)
      _Unwind_Resume(a1);
  }
  v17 = &a12 + v16 + 96;
  v18 = 4;
  goto LABEL_6;
}

void CLMicroLocationMaintenance::collectMetricsPreMaintenance(CFAbsoluteTime *this)
{
  uint64_t v2;
  id v3;
  id v4;
  id v5;
  id v6;
  id v7;
  id v8;

  this[8] = cl::chrono::CFAbsoluteTimeClock::now();
  v3 = *(id *)(*(_QWORD *)this + 72);
  *((_DWORD *)this + 8) = objc_msgSend(v3, "count");

  v4 = *(id *)(*(_QWORD *)this + 88);
  *((_DWORD *)this + 9) = objc_msgSend(v4, "count");

  v5 = *(id *)(*(_QWORD *)this + 64);
  *((_DWORD *)this + 10) = objc_msgSend(v5, "count");

  v6 = *(id *)(*(_QWORD *)this + 32);
  *((_DWORD *)this + 11) = objc_msgSend(v6, "count");

  v7 = *(id *)(*(_QWORD *)this + 80);
  *((_DWORD *)this + 12) = objc_msgSend(v7, "count");

  v8 = *(id *)(*(_QWORD *)this + 88);
  objc_msgSend(v8, "getOldestRecordingTimestamp");
  *((_QWORD *)this + 7) = v2;

}

void sub_241B6BD84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

void CLMicroLocationMaintenance::collectMetricsPostMaintenance(CLMicroLocationMaintenance *this)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  id v13;
  void *v14;
  NSObject *v15;
  void *__p;
  void *v17;
  uint64_t v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  uint8_t buf[8];
  const void *v25;
  uint64_t v26;

  +[ULDefaultsSingleton shared](ULDefaultsSingleton, "shared");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "defaultsDictionary");
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "ULAnalyticsSendEventEnabled");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "objectForKey:", v4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  if (v5 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
    v6 = objc_msgSend(v5, "BOOLValue");
  else
    v6 = objc_msgSend(MEMORY[0x24BDBD1C8], "BOOLValue");
  v7 = v6;

  if (v7)
  {
    cl::chrono::CFAbsoluteTimeClock::now();
    v8 = objc_msgSend(*(id *)(*(_QWORD *)this + 72), "count");
    v9 = objc_msgSend(*(id *)(*(_QWORD *)this + 88), "count");
    v10 = objc_msgSend(*(id *)(*(_QWORD *)this + 64), "count");
    v11 = objc_msgSend(*(id *)(*(_QWORD *)this + 32), "count");
    v12 = objc_msgSend(*(id *)(*(_QWORD *)this + 80), "count");
    v13 = *(id *)(*(_QWORD *)this + 104);
    v14 = v13;
    if (v13)
    {
      objc_msgSend(v13, "getAllDistinctCustomLoiIds");
    }
    else
    {
      *(_QWORD *)buf = 0;
      v25 = 0;
      v26 = 0;
    }

    cl::chrono::CFAbsoluteTimeClock::now();
    v19 = v8;
    v20 = v9;
    v21 = v10;
    v22 = v11;
    v23 = v12;
    v17 = 0;
    v18 = 0;
    __p = 0;
    std::vector<boost::uuids::uuid>::__init_with_size[abi:ne180100]<boost::uuids::uuid*,boost::uuids::uuid*>(&__p, *(const void **)buf, (uint64_t)v25, ((uint64_t)v25 - *(_QWORD *)buf) >> 4);
    AnalyticsSendEventLazy();
    if (__p)
    {
      v17 = __p;
      operator delete(__p);
    }
    if (*(_QWORD *)buf)
    {
      v25 = *(const void **)buf;
      operator delete(*(void **)buf);
    }
  }
  else
  {
    if (onceToken_MicroLocation_Default != -1)
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_122);
    v15 = logObject_MicroLocation_Default;
    if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_2419D9000, v15, OS_LOG_TYPE_DEFAULT, "CLMicroLocationMaintenance, collectMetricsPostMaintenance, not sending event because sending to CoreAnalytics is disabled", buf, 2u);
    }
  }
}

void sub_241B6C038(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24)
{
  void *v24;

  _Unwind_Resume(a1);
}

id ___ZN26CLMicroLocationMaintenance29collectMetricsPostMaintenanceEv_block_invoke(uint64_t a1)
{
  _DWORD *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  _QWORD v18[13];
  _QWORD v19[15];

  v19[13] = *MEMORY[0x24BDAC8D0];
  v2 = *(_DWORD **)(a1 + 32);
  v18[0] = CFSTR("ageOfOldestRecordingDays");
  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithInt:", *(unsigned int *)(a1 + 40));
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  v19[0] = v17;
  v18[1] = CFSTR("numModels");
  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedInt:", *(unsigned int *)(a1 + 80));
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  v19[1] = v16;
  v18[2] = CFSTR("numModelsDeleted");
  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedInt:", (v2[8] - *(_DWORD *)(a1 + 80)));
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  v19[2] = v15;
  v18[3] = CFSTR("numRecordingEvents");
  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedInt:", *(unsigned int *)(a1 + 84));
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  v19[3] = v14;
  v18[4] = CFSTR("numRecordingEventsDeleted");
  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedInt:", (v2[9] - *(_DWORD *)(a1 + 84)));
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v19[4] = v3;
  v18[5] = CFSTR("numMeasurements");
  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedInt:", *(unsigned int *)(a1 + 88));
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v19[5] = v4;
  v18[6] = CFSTR("numMeasurementsDeleted");
  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedInt:", (v2[10] - *(_DWORD *)(a1 + 88)));
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v19[6] = v5;
  v18[7] = CFSTR("numConfigurations");
  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedInt:", *(unsigned int *)(a1 + 92));
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v19[7] = v6;
  v18[8] = CFSTR("numConfiguationsDeleted");
  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedInt:", (v2[11] - *(_DWORD *)(a1 + 92)));
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v19[8] = v7;
  v18[9] = CFSTR("numRapportEntries");
  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedInt:", *(unsigned int *)(a1 + 96));
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v19[9] = v8;
  v18[10] = CFSTR("numRapportEntriesDeleted");
  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedInt:", (v2[12] - *(_DWORD *)(a1 + 96)));
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v19[10] = v9;
  v18[11] = CFSTR("maintenanceRunTime");
  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithDouble:", *(double *)(a1 + 48));
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v19[11] = v10;
  v18[12] = CFSTR("numCustomLoiIds");
  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedLong:", (uint64_t)(*(_QWORD *)(a1 + 64) - *(_QWORD *)(a1 + 56)) >> 4);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  v19[12] = v11;
  objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", v19, v18, 13);
  v12 = (void *)objc_claimAutoreleasedReturnValue();

  return v12;
}

void sub_241B6C39C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, void *a11, void *a12)
{
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;

  _Unwind_Resume(a1);
}

_QWORD *__copy_helper_block_ea8_56c59_ZTSNSt3__16vectorIN5boost5uuids4uuidENS_9allocatorIS3_EEEE(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;

  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  v2 = (_QWORD *)(a1 + 56);
  v2[2] = 0;
  return std::vector<boost::uuids::uuid>::__init_with_size[abi:ne180100]<boost::uuids::uuid*,boost::uuids::uuid*>(v2, *(const void **)(a2 + 56), *(_QWORD *)(a2 + 64), (uint64_t)(*(_QWORD *)(a2 + 64) - *(_QWORD *)(a2 + 56)) >> 4);
}

void __destroy_helper_block_ea8_56c59_ZTSNSt3__16vectorIN5boost5uuids4uuidENS_9allocatorIS3_EEEE(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 56);
  if (v2)
  {
    *(_QWORD *)(a1 + 64) = v2;
    operator delete(v2);
  }
}

void CLMicroLocationMaintenance::deleteOldEntries(id **this)
{
  id *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  int v6;
  int v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  int v12;
  int v13;
  int v14;
  NSObject *v15;
  const char *v16;
  int v17;
  const char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v1 = *this;
  +[ULDefaultsSingleton shared](ULDefaultsSingleton, "shared");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "defaultsDictionary");
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "ULRecordingPurgeAge");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "objectForKey:", v4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  if (v5 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
    v6 = objc_msgSend(v5, "intValue");
  else
    v6 = objc_msgSend(&unk_2511EE3F8, "intValue");
  v7 = v6;

  +[ULDefaultsSingleton shared](ULDefaultsSingleton, "shared");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "defaultsDictionary");
  v9 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "ULSimilarityListLabelsPurgeAge");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "objectForKey:", v10);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  if (v11 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
    v12 = objc_msgSend(v11, "intValue");
  else
    v12 = objc_msgSend(&unk_2511EE3C8, "intValue");
  v13 = v12;

  v14 = ULDatabase::deleteDataOlderThan(v1, 1440 * v7, 1440 * v13, 1);
  if (onceToken_MicroLocation_Default != -1)
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_122);
  v15 = logObject_MicroLocation_Default;
  if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_INFO))
  {
    v16 = "NOT ";
    if (v14)
      v16 = "";
    v17 = 136446210;
    v18 = v16;
    _os_log_impl(&dword_2419D9000, v15, OS_LOG_TYPE_INFO, "Did %{public}s delete old data", (uint8_t *)&v17, 0xCu);
  }
}

void sub_241B6C6CC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_241B6C728()
{
  JUMPOUT(0x241B6C720);
}

void CLMicroLocationMaintenance::freeDatabaseSpace(ULDatabase **this)
{
  int v1;
  NSObject *v2;
  const char *v3;
  int v4;
  const char *v5;
  uint64_t v6;

  v6 = *MEMORY[0x24BDAC8D0];
  v1 = ULDatabase::freeDatabaseSpace(*this);
  if (onceToken_MicroLocation_Default != -1)
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_122);
  v2 = logObject_MicroLocation_Default;
  if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_INFO))
  {
    v3 = "NOT";
    if (v1)
      v3 = "";
    v4 = 136446210;
    v5 = v3;
    _os_log_impl(&dword_2419D9000, v2, OS_LOG_TYPE_INFO, "Did %{public}s free database space", (uint8_t *)&v4, 0xCu);
  }
}

_QWORD *CLMicroLocationMaintenance::executeWorkItems(_QWORD *result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  _BYTE v7[24];
  _BYTE *v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v2 = result[1];
  v3 = result[2];
  if (v2 != v3)
  {
    while (1)
    {
      std::__function::__value_func<double ()(CLMicroLocationFingerprint const&,CLMicroLocationFingerprint const&)>::__value_func[abi:ne180100]((uint64_t)v7, a2);
      v5 = *(_QWORD *)(v2 + 24);
      if (!v5)
        std::__throw_bad_function_call[abi:ne180100]();
      (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v5 + 48))(v5, v7);
      result = v8;
      if (v8 == v7)
        break;
      if (v8)
      {
        v6 = 5;
LABEL_7:
        result = (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v6))();
      }
      v2 += 32;
      if (v2 == v3)
        return result;
    }
    result = v7;
    v6 = 4;
    goto LABEL_7;
  }
  return result;
}

void sub_241B6C8E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  _Unwind_Resume(exception_object);
}

void ___ZL45_CLLogObjectForCategory_MicroLocation_Defaultv_block_invoke_99()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.MicroLocation", "MicroLocation");
  v1 = (void *)logObject_MicroLocation_Default;
  logObject_MicroLocation_Default = (uint64_t)v0;

}

void std::__function::__func<CLMicroLocationMaintenance::CLMicroLocationMaintenance(ULDatabase &)::$_0,std::allocator<CLMicroLocationMaintenance::CLMicroLocationMaintenance(ULDatabase &)::$_0>,void ()(std::function<BOOL ()(void)>)>::~__func()
{
  JUMPOUT(0x2426A04D4);
}

_QWORD *std::__function::__func<CLMicroLocationMaintenance::CLMicroLocationMaintenance(ULDatabase &)::$_0,std::allocator<CLMicroLocationMaintenance::CLMicroLocationMaintenance(ULDatabase &)::$_0>,void ()(std::function<BOOL ()(void)>)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_2511DBDA8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<CLMicroLocationMaintenance::CLMicroLocationMaintenance(ULDatabase &)::$_0,std::allocator<CLMicroLocationMaintenance::CLMicroLocationMaintenance(ULDatabase &)::$_0>,void ()(std::function<BOOL ()(void)>)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_2511DBDA8;
  a2[1] = v2;
  return result;
}

_QWORD *std::__function::__func<CLMicroLocationMaintenance::CLMicroLocationMaintenance(ULDatabase &)::$_0,std::allocator<CLMicroLocationMaintenance::CLMicroLocationMaintenance(ULDatabase &)::$_0>,void ()(std::function<BOOL ()(void)>)>::operator()(uint64_t a1, uint64_t a2)
{
  _QWORD *result;
  uint64_t v4;
  _BYTE v5[24];
  _BYTE *v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  std::__function::__value_func<BOOL ()(void)>::__value_func[abi:ne180100]((uint64_t)v5, a2);
  CLMicroLocationMaintenance::collectMetricsPreMaintenance(*(CFAbsoluteTime **)(a1 + 8));
  result = v6;
  if (v6 == v5)
  {
    v4 = 4;
    result = v5;
  }
  else
  {
    if (!v6)
      return result;
    v4 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v4))();
}

void sub_241B6CA50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<CLMicroLocationMaintenance::CLMicroLocationMaintenance(ULDatabase &)::$_0,std::allocator<CLMicroLocationMaintenance::CLMicroLocationMaintenance(ULDatabase &)::$_0>,void ()(std::function<BOOL ()(void)>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<CLMicroLocationMaintenance::CLMicroLocationMaintenance(ULDatabase &)::$_0,std::allocator<CLMicroLocationMaintenance::CLMicroLocationMaintenance(ULDatabase &)::$_0>,void ()(std::function<BOOL ()(void)>)>::target_type()
{
}

void std::__function::__func<CLMicroLocationMaintenance::CLMicroLocationMaintenance(ULDatabase &)::$_1,std::allocator<CLMicroLocationMaintenance::CLMicroLocationMaintenance(ULDatabase &)::$_1>,void ()(std::function<BOOL ()(void)>)>::~__func()
{
  JUMPOUT(0x2426A04D4);
}

_QWORD *std::__function::__func<CLMicroLocationMaintenance::CLMicroLocationMaintenance(ULDatabase &)::$_1,std::allocator<CLMicroLocationMaintenance::CLMicroLocationMaintenance(ULDatabase &)::$_1>,void ()(std::function<BOOL ()(void)>)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_2511DBE28;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<CLMicroLocationMaintenance::CLMicroLocationMaintenance(ULDatabase &)::$_1,std::allocator<CLMicroLocationMaintenance::CLMicroLocationMaintenance(ULDatabase &)::$_1>,void ()(std::function<BOOL ()(void)>)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_2511DBE28;
  a2[1] = v2;
  return result;
}

_QWORD *std::__function::__func<CLMicroLocationMaintenance::CLMicroLocationMaintenance(ULDatabase &)::$_1,std::allocator<CLMicroLocationMaintenance::CLMicroLocationMaintenance(ULDatabase &)::$_1>,void ()(std::function<BOOL ()(void)>)>::operator()(uint64_t a1, uint64_t a2)
{
  _QWORD *result;
  uint64_t v4;
  _BYTE v5[24];
  _BYTE *v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  std::__function::__value_func<BOOL ()(void)>::__value_func[abi:ne180100]((uint64_t)v5, a2);
  CLMicroLocationMaintenance::deleteOldEntries(*(id ***)(a1 + 8));
  result = v6;
  if (v6 == v5)
  {
    v4 = 4;
    result = v5;
  }
  else
  {
    if (!v6)
      return result;
    v4 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v4))();
}

void sub_241B6CBC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<CLMicroLocationMaintenance::CLMicroLocationMaintenance(ULDatabase &)::$_1,std::allocator<CLMicroLocationMaintenance::CLMicroLocationMaintenance(ULDatabase &)::$_1>,void ()(std::function<BOOL ()(void)>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<CLMicroLocationMaintenance::CLMicroLocationMaintenance(ULDatabase &)::$_1,std::allocator<CLMicroLocationMaintenance::CLMicroLocationMaintenance(ULDatabase &)::$_1>,void ()(std::function<BOOL ()(void)>)>::target_type()
{
}

void std::__function::__func<CLMicroLocationMaintenance::CLMicroLocationMaintenance(ULDatabase &)::$_2,std::allocator<CLMicroLocationMaintenance::CLMicroLocationMaintenance(ULDatabase &)::$_2>,void ()(std::function<BOOL ()(void)>)>::~__func()
{
  JUMPOUT(0x2426A04D4);
}

_QWORD *std::__function::__func<CLMicroLocationMaintenance::CLMicroLocationMaintenance(ULDatabase &)::$_2,std::allocator<CLMicroLocationMaintenance::CLMicroLocationMaintenance(ULDatabase &)::$_2>,void ()(std::function<BOOL ()(void)>)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_2511DBEA8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<CLMicroLocationMaintenance::CLMicroLocationMaintenance(ULDatabase &)::$_2,std::allocator<CLMicroLocationMaintenance::CLMicroLocationMaintenance(ULDatabase &)::$_2>,void ()(std::function<BOOL ()(void)>)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_2511DBEA8;
  a2[1] = v2;
  return result;
}

_QWORD *std::__function::__func<CLMicroLocationMaintenance::CLMicroLocationMaintenance(ULDatabase &)::$_2,std::allocator<CLMicroLocationMaintenance::CLMicroLocationMaintenance(ULDatabase &)::$_2>,void ()(std::function<BOOL ()(void)>)>::operator()(uint64_t a1, uint64_t a2)
{
  _QWORD *result;
  uint64_t v4;
  _BYTE v5[24];
  _BYTE *v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  std::__function::__value_func<BOOL ()(void)>::__value_func[abi:ne180100]((uint64_t)v5, a2);
  CLMicroLocationMaintenance::freeDatabaseSpace(*(ULDatabase ***)(a1 + 8));
  result = v6;
  if (v6 == v5)
  {
    v4 = 4;
    result = v5;
  }
  else
  {
    if (!v6)
      return result;
    v4 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v4))();
}

void sub_241B6CD40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<CLMicroLocationMaintenance::CLMicroLocationMaintenance(ULDatabase &)::$_2,std::allocator<CLMicroLocationMaintenance::CLMicroLocationMaintenance(ULDatabase &)::$_2>,void ()(std::function<BOOL ()(void)>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<CLMicroLocationMaintenance::CLMicroLocationMaintenance(ULDatabase &)::$_2,std::allocator<CLMicroLocationMaintenance::CLMicroLocationMaintenance(ULDatabase &)::$_2>,void ()(std::function<BOOL ()(void)>)>::target_type()
{
}

void std::__function::__func<CLMicroLocationMaintenance::CLMicroLocationMaintenance(ULDatabase &)::$_3,std::allocator<CLMicroLocationMaintenance::CLMicroLocationMaintenance(ULDatabase &)::$_3>,void ()(std::function<BOOL ()(void)>)>::~__func()
{
  JUMPOUT(0x2426A04D4);
}

_QWORD *std::__function::__func<CLMicroLocationMaintenance::CLMicroLocationMaintenance(ULDatabase &)::$_3,std::allocator<CLMicroLocationMaintenance::CLMicroLocationMaintenance(ULDatabase &)::$_3>,void ()(std::function<BOOL ()(void)>)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_2511DBF28;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<CLMicroLocationMaintenance::CLMicroLocationMaintenance(ULDatabase &)::$_3,std::allocator<CLMicroLocationMaintenance::CLMicroLocationMaintenance(ULDatabase &)::$_3>,void ()(std::function<BOOL ()(void)>)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_2511DBF28;
  a2[1] = v2;
  return result;
}

_QWORD *std::__function::__func<CLMicroLocationMaintenance::CLMicroLocationMaintenance(ULDatabase &)::$_3,std::allocator<CLMicroLocationMaintenance::CLMicroLocationMaintenance(ULDatabase &)::$_3>,void ()(std::function<BOOL ()(void)>)>::operator()(uint64_t a1, uint64_t a2)
{
  _QWORD *result;
  uint64_t v4;
  _BYTE v5[24];
  _BYTE *v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  std::__function::__value_func<BOOL ()(void)>::__value_func[abi:ne180100]((uint64_t)v5, a2);
  CLMicroLocationMaintenance::collectMetricsPostMaintenance(*(CLMicroLocationMaintenance **)(a1 + 8));
  result = v6;
  if (v6 == v5)
  {
    v4 = 4;
    result = v5;
  }
  else
  {
    if (!v6)
      return result;
    v4 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v4))();
}

void sub_241B6CEB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<CLMicroLocationMaintenance::CLMicroLocationMaintenance(ULDatabase &)::$_3,std::allocator<CLMicroLocationMaintenance::CLMicroLocationMaintenance(ULDatabase &)::$_3>,void ()(std::function<BOOL ()(void)>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<CLMicroLocationMaintenance::CLMicroLocationMaintenance(ULDatabase &)::$_3,std::allocator<CLMicroLocationMaintenance::CLMicroLocationMaintenance(ULDatabase &)::$_3>,void ()(std::function<BOOL ()(void)>)>::target_type()
{
}

void sub_241B6D214(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_241B6D774(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,char a63)
{
  CLMicroLocationModelTable::Entry::~Entry(&a24);
  CLMicroLocationProto::Model::~Model((CLMicroLocationProto::Model *)&a63);
  if (a19)
  {
    if (a18 < 0)
      operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void ___ZL45_CLLogObjectForCategory_MicroLocation_Defaultv_block_invoke_100()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.MicroLocation", "MicroLocation");
  v1 = (void *)logObject_MicroLocation_Default;
  logObject_MicroLocation_Default = (uint64_t)v0;

}

void sub_241B6E064(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_241B6E660(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_241B6E788(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__23(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__23(uint64_t a1)
{

}

void sub_241B6ED3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_241B6EE64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_241B6EFF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_241B6F0FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class initSAPathManager()
{
  Class result;

  if (SpaceAttributionLibrary_sOnce != -1)
    dispatch_once(&SpaceAttributionLibrary_sOnce, &__block_literal_global_123);
  result = objc_getClass("SAPathManager");
  classSAPathManager = (uint64_t)result;
  getSAPathManagerClass = (uint64_t (*)())SAPathManagerFunction;
  return result;
}

id SAPathManagerFunction()
{
  return (id)classSAPathManager;
}

Class initSAPathInfo()
{
  Class result;

  if (SpaceAttributionLibrary_sOnce != -1)
    dispatch_once(&SpaceAttributionLibrary_sOnce, &__block_literal_global_123);
  result = objc_getClass("SAPathInfo");
  classSAPathInfo = (uint64_t)result;
  getSAPathInfoClass = (uint64_t (*)())SAPathInfoFunction;
  return result;
}

id SAPathInfoFunction()
{
  return (id)classSAPathInfo;
}

void sub_241B7008C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_241B70218(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_241B703A4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_241B70490(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t ULSettings::get<ULSettings::AnalyticsInterval>()
{
  void *v0;
  void *v1;
  void *v2;
  void *v3;
  int v4;
  uint64_t v5;

  +[ULDefaultsSingleton shared](ULDefaultsSingleton, "shared");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "defaultsDictionary");
  v1 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "ULAnalyticsInterval");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "objectForKey:", v2);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  if (v3 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
    v4 = objc_msgSend(v3, "intValue");
  else
    v4 = objc_msgSend(&unk_2511EE410, "intValue");
  v5 = v4;

  return v5;
}

void sub_241B70560(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_241B70648(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_241B706F0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_241B70704()
{
  uint64_t v0;

  v0 = sub_241B7FD74();
  __swift_allocate_value_buffer(v0, qword_25716FFC8);
  __swift_project_value_buffer(v0, (uint64_t)qword_25716FFC8);
  return sub_241B7FD68();
}

uint64_t sub_241B707A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t (*a7)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t ObjCClassMetadata;

  v8 = sub_241B7FE4C();
  v10 = v9;
  v11 = sub_241B7FE4C();
  v13 = v12;
  v14 = sub_241B7FE4C();
  v16 = v15;
  ObjCClassMetadata = swift_getObjCClassMetadata();
  LOBYTE(a7) = a7(v8, v10, v11, v13, v14, v16, ObjCClassMetadata);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return a7 & 1;
}

void sub_241B70870(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }
}

uint64_t sub_241B708AC()
{
  unint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  if (BYTE6(v0) > 0x1BuLL)
  {
    sub_241B73DEC(v1, v0);
    sub_241B70B4C(v1, v0);
    sub_241B7FE1C();
  }
  else
  {
    v2 = sub_241B7FD98();
    sub_241B73F7C(&qword_257170038, (uint64_t (*)(uint64_t))MEMORY[0x24BDC61B0], MEMORY[0x24BDC61B8]);
    swift_allocError();
    (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v2 - 8) + 104))(v3, *MEMORY[0x24BDC6198], v2);
    swift_willThrow();
  }
  return sub_241B73D3C(v1, v0);
}

id sub_241B709BC(uint64_t a1, uint64_t a2, void *a3, void *a4, uint64_t (*a5)(uint64_t, unint64_t, uint64_t, uint64_t))
{
  id v7;
  id v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  void *v18;

  v7 = a3;
  v8 = a4;
  v9 = sub_241B7FC9C();
  v11 = v10;

  v12 = sub_241B7FE4C();
  v14 = v13;

  v15 = a5(v9, v11, v12, v14);
  v17 = v16;
  swift_bridgeObjectRelease();
  sub_241B73D3C(v9, v11);
  if (v17 >> 60 == 15)
  {
    v18 = 0;
  }
  else
  {
    v18 = (void *)sub_241B7FC90();
    sub_241B73D80(v15, v17);
  }
  return v18;
}

id ULEncryption.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

id ULEncryption.init()()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ULEncryption();
  return objc_msgSendSuper2(&v2, sel_init);
}

id ULEncryption.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ULEncryption();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

void sub_241B70B4C(uint64_t a1, uint64_t a2)
{
  char *v2;
  _QWORD v3[6];

  v3[5] = *MEMORY[0x24BDAC8D0];
  v3[3] = MEMORY[0x24BDCDDE8];
  v3[4] = MEMORY[0x24BDCDDC8];
  v3[0] = a1;
  v3[1] = a2;
  v2 = (char *)&loc_241B70BB0
     + dword_241B70DE4[__swift_project_boxed_opaque_existential_1(v3, MEMORY[0x24BDCDDE8])[1] >> 62];
  __asm { BR              X10 }
}

uint64_t sub_241B70BC0()
{
  unint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  __int16 v7;
  char v8;
  char v9;
  char v10;
  char v11;
  uint64_t v12;
  uint64_t v13;

  v6 = v2;
  v7 = v3;
  v8 = BYTE2(v3);
  v9 = BYTE3(v3);
  v10 = BYTE4(v3);
  v11 = BYTE5(v3);
  sub_241B73DEC(v1, v0);
  sub_241B70DF4(&v6, (_BYTE *)&v6 + BYTE6(v3), &v12);
  sub_241B73D3C(v1, v0);
  v4 = v12;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v13);
  return v4;
}

_BYTE *sub_241B70DF4@<X0>(_BYTE *result@<X0>, _BYTE *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if (!result)
    goto LABEL_4;
  v4 = a2 - result;
  if (a2 == result)
  {
    result = 0;
LABEL_4:
    v5 = 0xC000000000000000;
    goto LABEL_5;
  }
  if (v4 <= 14)
  {
    result = (_BYTE *)sub_241B7336C(result, a2);
    v5 = v7 & 0xFFFFFFFFFFFFFFLL;
  }
  else if ((unint64_t)v4 >= 0x7FFFFFFF)
  {
    result = (_BYTE *)sub_241B7342C((uint64_t)result, (uint64_t)a2);
    v5 = v8 | 0x8000000000000000;
  }
  else
  {
    result = (_BYTE *)sub_241B734A4((uint64_t)result, (uint64_t)a2);
    v5 = v6 | 0x4000000000000000;
  }
LABEL_5:
  *a3 = result;
  a3[1] = v5;
  return result;
}

uint64_t _s19MicroLocationDaemon12ULEncryptionC11encryptFile_15destinationPath8keyLabel13keychainClassSbSS_S2SyXlXptFZ_0()
{
  BOOL v0;
  BOOL v3;
  BOOL v4;
  BOOL v5;
  BOOL v6;
  BOOL v7;
  BOOL v8;
  BOOL v9;
  BOOL v10;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  void *v23;
  id v24;
  uint64_t v25;
  NSObject *v26;
  os_log_type_t v27;
  uint8_t *v28;
  const char *v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  NSObject *v33;
  os_log_type_t v34;
  uint8_t *v35;
  uint64_t v36;
  void (*v37)(char *, uint64_t);
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t (*v46)(uint64_t);
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  NSObject *v51;
  os_log_type_t v52;
  uint8_t *v53;
  uint64_t v54;
  NSObject *v55;
  os_log_type_t v56;
  uint8_t *v57;
  uint64_t v58;
  NSObject *v59;
  os_log_type_t v60;
  uint8_t *v61;
  uint64_t v62;
  void (*v63)(char *, uint64_t);
  uint64_t v64;
  void (*v65)(char *, uint64_t);
  _QWORD v67[3];
  uint64_t v68;
  uint64_t v69;
  _QWORD *v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  _QWORD *v74;
  char *v75;
  char *v76;
  uint64_t v77;
  _OWORD v78[2];
  _QWORD v79[5];

  if (MEMORY[0x24BEDFF10])
    v0 = MEMORY[0x24BEDFEF8] == 0;
  else
    v0 = 1;
  v3 = v0 || MEMORY[0x24BEDFF18] == 0 || MEMORY[0x24BEDFF08] == 0 || MEMORY[0x24BEDFF00] == 0;
  if (v3
    || (MEMORY[0x24BEDFE90] ? (v4 = MEMORY[0x24BEDFE98] == 0) : (v4 = 1),
        !v4 ? (v5 = MEMORY[0x24BEDFEA8] == 0) : (v5 = 1),
        !v5 ? (v6 = MEMORY[0x24BEDFE80] == 0) : (v6 = 1),
        !v6 ? (v7 = MEMORY[0x24BEDFE78] == 0) : (v7 = 1),
        !v7 ? (v8 = MEMORY[0x24BEDFE70] == 0) : (v8 = 1),
        !v8 ? (v9 = MEMORY[0x24BEDFEA0] == 0) : (v9 = 1),
        v9))
  {
    if (qword_25716FFC0 != -1)
      swift_once();
    v25 = sub_241B7FD74();
    __swift_project_value_buffer(v25, (uint64_t)qword_25716FFC8);
    v26 = sub_241B7FD5C();
    v27 = sub_241B7FE70();
    if (!os_log_type_enabled(v26, v27))
      goto LABEL_54;
    v28 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v28 = 0;
    v29 = "encryptFile: AppleArchive Library not loaded. method aborted.";
    goto LABEL_53;
  }
  if (MEMORY[0x24BDC6390])
    v10 = MEMORY[0x24BDC63D8] == 0;
  else
    v10 = 1;
  if (v10 || MEMORY[0x24BDC63F8] == 0 || MEMORY[0x24BDC63E8] == 0)
  {
    if (qword_25716FFC0 != -1)
      swift_once();
    v30 = sub_241B7FD74();
    __swift_project_value_buffer(v30, (uint64_t)qword_25716FFC8);
    v26 = sub_241B7FD5C();
    v27 = sub_241B7FE70();
    if (!os_log_type_enabled(v26, v27))
      goto LABEL_54;
    v28 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v28 = 0;
    v29 = "encryptFile: CryptoKit Framework not loaded. method aborted.";
LABEL_53:
    _os_log_impl(&dword_2419D9000, v26, v27, v29, v28, 2u);
    MEMORY[0x2426A0EF4](v28, -1, -1);
LABEL_54:

    return 0;
  }
  v73 = sub_241B7FD80();
  v74 = v67;
  v72 = *(_QWORD *)(v73 - 8);
  v13 = *(_QWORD *)(v72 + 64);
  ((void (*)(void))MEMORY[0x24BDAC7A8])();
  swift_bridgeObjectRetain();
  v76 = (char *)v67 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_241B7FD8C();
  MEMORY[0x24BDAC7A8](v14);
  swift_bridgeObjectRetain();
  v75 = (char *)v67 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_241B7FD8C();
  v15 = sub_241B7FD2C();
  MEMORY[0x24BDAC7A8](v15);
  sub_241B7FD20();
  v16 = sub_241B7FCFC();
  MEMORY[0x24BDAC7A8](v16);
  sub_241B7FCF0();
  sub_241B7FD44();
  swift_allocObject();
  v77 = sub_241B7FD38();
  v17 = sub_241B7FDBC();
  v18 = *(_QWORD *)(v17 - 8);
  MEMORY[0x24BDAC7A8](v17);
  v71 = (char *)v67 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = __swift_instantiateConcreteTypeFromMangledName(&qword_257170020);
  MEMORY[0x24BDAC7A8](v20);
  v22 = (char *)v67 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = (void *)sub_241B7FE40();
  v24 = objc_msgSend((id)swift_getObjCClassFromMetadata(), sel_retrieveSymmetricKey_, v23);

  if (v24)
  {
    sub_241B7FEB8();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v78, 0, sizeof(v78));
  }
  sub_241B73F34((uint64_t)v78, (uint64_t)v79);
  if (!v79[3])
  {
    sub_241B73EF8((uint64_t)v79, &qword_257170028);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v18 + 56))(v22, 1, 1, v17);
    goto LABEL_60;
  }
  v31 = swift_dynamicCast();
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v22, v31 ^ 1u, 1, v17);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v22, 1, v17) == 1)
  {
LABEL_60:
    sub_241B73EF8((uint64_t)v22, &qword_257170020);
    if (qword_25716FFC0 != -1)
      swift_once();
    v32 = sub_241B7FD74();
    __swift_project_value_buffer(v32, (uint64_t)qword_25716FFC8);
    v33 = sub_241B7FD5C();
    v34 = sub_241B7FE7C();
    if (os_log_type_enabled(v33, v34))
    {
      v35 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v35 = 0;
      _os_log_impl(&dword_2419D9000, v33, v34, "Failed to retrieve symmetric key for file encryption", v35, 2u);
      MEMORY[0x2426A0EF4](v35, -1, -1);
    }

    swift_release();
    v36 = v73;
    v37 = *(void (**)(char *, uint64_t))(v72 + 8);
    v37(v75, v73);
    v37(v76, v36);
    return 0;
  }
  (*(void (**)(char *, char *, uint64_t))(v18 + 32))(v71, v22, v17);
  sub_241B7FD08();
  sub_241B7FCE4();
  v38 = sub_241B7FCC0();
  if (v38)
  {
    v39 = v38;
    v40 = sub_241B7FCC0();
    if (v40)
    {
      v69 = v39;
      v70 = v67;
      v41 = v40;
      v42 = sub_241B7FD50();
      v67[2] = v67;
      v43 = *(_QWORD *)(v42 - 8);
      MEMORY[0x24BDAC7A8](v42);
      v45 = (char *)v67 - ((v44 + 15) & 0xFFFFFFFFFFFFFFF0);
      v79[0] = MEMORY[0x24BEE4AF8];
      v68 = sub_241B73F7C(&qword_257170050, v46, MEMORY[0x24BEDFF48]);
      __swift_instantiateConcreteTypeFromMangledName(&qword_257170058);
      sub_241B73FBC();
      sub_241B7FEC4();
      v68 = v41;
      v47 = sub_241B7FCB4();
      v48 = v42;
      v49 = v47;
      (*(void (**)(char *, uint64_t))(v43 + 8))(v45, v48);
      if (v49)
      {
        sub_241B7FCD8();
        sub_241B7FCCC();
        sub_241B7FCCC();
        sub_241B7FCCC();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        (*(void (**)(char *, uint64_t))(v18 + 8))(v71, v17);
        v64 = v73;
        v65 = *(void (**)(char *, uint64_t))(v72 + 8);
        v65(v75, v73);
        v65(v76, v64);
        return 1;
      }
      if (qword_25716FFC0 != -1)
        swift_once();
      v58 = sub_241B7FD74();
      __swift_project_value_buffer(v58, (uint64_t)qword_25716FFC8);
      v59 = sub_241B7FD5C();
      v60 = sub_241B7FE7C();
      if (os_log_type_enabled(v59, v60))
      {
        v61 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v61 = 0;
        _os_log_impl(&dword_2419D9000, v59, v60, "Failed to create encryption stream", v61, 2u);
        MEMORY[0x2426A0EF4](v61, -1, -1);
      }

      swift_release();
      swift_release();
    }
    else
    {
      if (qword_25716FFC0 != -1)
        swift_once();
      v54 = sub_241B7FD74();
      __swift_project_value_buffer(v54, (uint64_t)qword_25716FFC8);
      v55 = sub_241B7FD5C();
      v56 = sub_241B7FE7C();
      if (os_log_type_enabled(v55, v56))
      {
        v57 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v57 = 0;
        _os_log_impl(&dword_2419D9000, v55, v56, "Failed to create output file stream for encryption", v57, 2u);
        MEMORY[0x2426A0EF4](v57, -1, -1);
      }

      swift_release();
    }
  }
  else
  {
    if (qword_25716FFC0 != -1)
      swift_once();
    v50 = sub_241B7FD74();
    __swift_project_value_buffer(v50, (uint64_t)qword_25716FFC8);
    v51 = sub_241B7FD5C();
    v52 = sub_241B7FE7C();
    if (os_log_type_enabled(v51, v52))
    {
      v53 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v53 = 0;
      _os_log_impl(&dword_2419D9000, v51, v52, "Failed to create input file stream for encryption", v53, 2u);
      MEMORY[0x2426A0EF4](v53, -1, -1);
    }

  }
  swift_release();
  (*(void (**)(char *, uint64_t))(v18 + 8))(v71, v17);
  v62 = v73;
  v63 = *(void (**)(char *, uint64_t))(v72 + 8);
  v63(v75, v73);
  v63(v76, v62);
  return 0;
}

uint64_t _s19MicroLocationDaemon12ULEncryptionC11decryptFile_15destinationPath8keyLabel13keychainClassSbSS_S2SyXlXptFZ_0()
{
  BOOL v0;
  BOOL v3;
  BOOL v4;
  BOOL v5;
  BOOL v6;
  BOOL v7;
  BOOL v8;
  BOOL v9;
  BOOL v10;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  void *v23;
  id v24;
  uint64_t v25;
  NSObject *v26;
  os_log_type_t v27;
  uint8_t *v28;
  const char *v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  NSObject *v37;
  os_log_type_t v38;
  uint8_t *v39;
  uint64_t v40;
  void (*v41)(char *, uint64_t);
  uint64_t v42;
  NSObject *v43;
  os_log_type_t v44;
  uint8_t *v45;
  uint64_t v46;
  NSObject *v47;
  os_log_type_t v48;
  uint8_t *v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t (*v53)(uint64_t);
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  NSObject *v60;
  os_log_type_t v61;
  uint8_t *v62;
  uint64_t v63;
  NSObject *v64;
  os_log_type_t v65;
  uint8_t *v66;
  uint64_t v67;
  void (*v68)(char *, uint64_t);
  uint64_t v69;
  void (*v70)(char *, uint64_t);
  _QWORD v72[3];
  uint64_t v73;
  _QWORD *v74;
  uint64_t v75;
  uint64_t v76;
  _QWORD *v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  _QWORD *v81;
  _QWORD *v82;
  _OWORD v83[2];
  _QWORD v84[5];

  if (MEMORY[0x24BEDFF10])
    v0 = MEMORY[0x24BEDFEF8] == 0;
  else
    v0 = 1;
  v3 = v0 || MEMORY[0x24BEDFF18] == 0 || MEMORY[0x24BEDFF08] == 0 || MEMORY[0x24BEDFF00] == 0;
  if (v3
    || (MEMORY[0x24BEDFE90] ? (v4 = MEMORY[0x24BEDFE98] == 0) : (v4 = 1),
        !v4 ? (v5 = MEMORY[0x24BEDFEA8] == 0) : (v5 = 1),
        !v5 ? (v6 = MEMORY[0x24BEDFE80] == 0) : (v6 = 1),
        !v6 ? (v7 = MEMORY[0x24BEDFE78] == 0) : (v7 = 1),
        !v7 ? (v8 = MEMORY[0x24BEDFE70] == 0) : (v8 = 1),
        !v8 ? (v9 = MEMORY[0x24BEDFEA0] == 0) : (v9 = 1),
        v9))
  {
    if (qword_25716FFC0 != -1)
      swift_once();
    v25 = sub_241B7FD74();
    __swift_project_value_buffer(v25, (uint64_t)qword_25716FFC8);
    v26 = sub_241B7FD5C();
    v27 = sub_241B7FE70();
    if (!os_log_type_enabled(v26, v27))
      goto LABEL_54;
    v28 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v28 = 0;
    v29 = "decryptFile: AppleArchive Framework not loaded. method aborted.";
    goto LABEL_53;
  }
  if (MEMORY[0x24BDC6390])
    v10 = MEMORY[0x24BDC63D8] == 0;
  else
    v10 = 1;
  if (v10 || MEMORY[0x24BDC63F8] == 0 || MEMORY[0x24BDC63E8] == 0)
  {
    if (qword_25716FFC0 != -1)
      swift_once();
    v30 = sub_241B7FD74();
    __swift_project_value_buffer(v30, (uint64_t)qword_25716FFC8);
    v26 = sub_241B7FD5C();
    v27 = sub_241B7FE70();
    if (!os_log_type_enabled(v26, v27))
      goto LABEL_54;
    v28 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v28 = 0;
    v29 = "decryptFile: CryptoKit Framework not loaded. method aborted.";
LABEL_53:
    _os_log_impl(&dword_2419D9000, v26, v27, v29, v28, 2u);
    MEMORY[0x2426A0EF4](v28, -1, -1);
LABEL_54:

    return 0;
  }
  v13 = sub_241B7FD80();
  v82 = v72;
  v79 = *(_QWORD *)(v13 - 8);
  v80 = v13;
  v14 = *(_QWORD *)(v79 + 64);
  MEMORY[0x24BDAC7A8](v13);
  v15 = (char *)v72 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_bridgeObjectRetain();
  v16 = sub_241B7FD8C();
  v81 = v72;
  MEMORY[0x24BDAC7A8](v16);
  swift_bridgeObjectRetain();
  sub_241B7FD8C();
  v17 = sub_241B7FDBC();
  v18 = *(_QWORD *)(v17 - 8);
  MEMORY[0x24BDAC7A8](v17);
  v78 = (char *)v72 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = __swift_instantiateConcreteTypeFromMangledName(&qword_257170020);
  MEMORY[0x24BDAC7A8](v20);
  v22 = (char *)v72 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = (void *)sub_241B7FE40();
  v24 = objc_msgSend((id)swift_getObjCClassFromMetadata(), sel_retrieveSymmetricKey_, v23);

  if (v24)
  {
    sub_241B7FEB8();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v83, 0, sizeof(v83));
  }
  sub_241B73F34((uint64_t)v83, (uint64_t)v84);
  if (!v84[3])
  {
    sub_241B73EF8((uint64_t)v84, &qword_257170028);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v18 + 56))(v22, 1, 1, v17);
    goto LABEL_62;
  }
  v31 = swift_dynamicCast();
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v22, v31 ^ 1u, 1, v17);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v22, 1, v17) == 1)
  {
LABEL_62:
    sub_241B73EF8((uint64_t)v22, &qword_257170020);
    if (qword_25716FFC0 != -1)
      swift_once();
    v36 = sub_241B7FD74();
    __swift_project_value_buffer(v36, (uint64_t)qword_25716FFC8);
    v37 = sub_241B7FD5C();
    v38 = sub_241B7FE7C();
    if (os_log_type_enabled(v37, v38))
    {
      v39 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v39 = 0;
      _os_log_impl(&dword_2419D9000, v37, v38, "Failed to retrieve symmetric key for file decryption", v39, 2u);
      MEMORY[0x2426A0EF4](v39, -1, -1);
    }

    v40 = v80;
    v41 = *(void (**)(char *, uint64_t))(v79 + 8);
    v41(v15, v80);
    v41(v15, v40);
    return 0;
  }
  v77 = v72;
  (*(void (**)(char *, char *, uint64_t))(v18 + 32))(v78, v22, v17);
  sub_241B7FCE4();
  v32 = sub_241B7FCC0();
  if (v32)
  {
    v33 = v32;
    sub_241B7FD44();
    swift_allocObject();
    swift_retain();
    v34 = sub_241B7FD14();
    if (v34)
    {
      v35 = v34;
      sub_241B7FD08();
      v76 = v33;
      v50 = sub_241B7FD50();
      v74 = v72;
      v73 = *(_QWORD *)(v50 - 8);
      MEMORY[0x24BDAC7A8](v50);
      v75 = v35;
      v52 = (char *)v72 - ((v51 + 15) & 0xFFFFFFFFFFFFFFF0);
      v84[0] = MEMORY[0x24BEE4AF8];
      v72[2] = sub_241B73F7C(&qword_257170050, v53, MEMORY[0x24BEDFF48]);
      __swift_instantiateConcreteTypeFromMangledName(&qword_257170058);
      sub_241B73FBC();
      sub_241B7FEC4();
      v54 = sub_241B7FCA8();
      v55 = v50;
      v56 = v54;
      (*(void (**)(char *, uint64_t))(v73 + 8))(v52, v55);
      if (v56)
      {
        v57 = sub_241B7FCC0();
        if (v57)
        {
          v58 = (_QWORD *)v57;
          sub_241B7FCD8();
          v74 = v58;
          sub_241B7FCCC();
          sub_241B7FCCC();
          sub_241B7FCCC();
          swift_release();
          swift_release();
          swift_release();
          swift_release();
          (*(void (**)(char *, uint64_t))(v18 + 8))(v78, v17);
          v69 = v80;
          v70 = *(void (**)(char *, uint64_t))(v79 + 8);
          v70(v15, v80);
          v70(v15, v69);
          return 1;
        }
        if (qword_25716FFC0 != -1)
          swift_once();
        v63 = sub_241B7FD74();
        __swift_project_value_buffer(v63, (uint64_t)qword_25716FFC8);
        v64 = sub_241B7FD5C();
        v65 = sub_241B7FE7C();
        if (os_log_type_enabled(v64, v65))
        {
          v66 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)v66 = 0;
          _os_log_impl(&dword_2419D9000, v64, v65, "Failed to create output file stream for decryption", v66, 2u);
          MEMORY[0x2426A0EF4](v66, -1, -1);
        }
        swift_release();

        swift_release();
      }
      else
      {
        if (qword_25716FFC0 != -1)
          swift_once();
        v59 = sub_241B7FD74();
        __swift_project_value_buffer(v59, (uint64_t)qword_25716FFC8);
        v60 = sub_241B7FD5C();
        v61 = sub_241B7FE7C();
        if (os_log_type_enabled(v60, v61))
        {
          v62 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)v62 = 0;
          _os_log_impl(&dword_2419D9000, v60, v61, "Failed to create decryption stream", v62, 2u);
          MEMORY[0x2426A0EF4](v62, -1, -1);
        }
        swift_release();

      }
      swift_release();
    }
    else
    {
      if (qword_25716FFC0 != -1)
        swift_once();
      v46 = sub_241B7FD74();
      __swift_project_value_buffer(v46, (uint64_t)qword_25716FFC8);
      v47 = sub_241B7FD5C();
      v48 = sub_241B7FE7C();
      if (os_log_type_enabled(v47, v48))
      {
        v49 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v49 = 0;
        _os_log_impl(&dword_2419D9000, v47, v48, "Failed to create archive context for decryption", v49, 2u);
        MEMORY[0x2426A0EF4](v49, -1, -1);
      }
      swift_release();

    }
  }
  else
  {
    if (qword_25716FFC0 != -1)
      swift_once();
    v42 = sub_241B7FD74();
    __swift_project_value_buffer(v42, (uint64_t)qword_25716FFC8);
    v43 = sub_241B7FD5C();
    v44 = sub_241B7FE7C();
    if (os_log_type_enabled(v43, v44))
    {
      v45 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v45 = 0;
      _os_log_impl(&dword_2419D9000, v43, v44, "Failed to open source archive file for decryption", v45, 2u);
      MEMORY[0x2426A0EF4](v45, -1, -1);
    }

  }
  (*(void (**)(char *, uint64_t))(v18 + 8))(v78, v17);
  v67 = v80;
  v68 = *(void (**)(char *, uint64_t))(v79 + 8);
  v68(v15, v80);
  v68(v15, v67);
  return 0;
}

uint64_t _s19MicroLocationDaemon12ULEncryptionC11encryptData_8keyLabel10Foundation0F0VSgAH_SStFZ_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  BOOL v4;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  const char *v14;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  double v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t *v44;
  uint64_t *v45;
  _QWORD v46[4];

  if (MEMORY[0x24BDC6678])
    v4 = MEMORY[0x24BDC6690] == 0;
  else
    v4 = 1;
  if (v4
    || MEMORY[0x24BDC6688] == 0
    || MEMORY[0x24BDC6390] == 0
    || MEMORY[0x24BDC63D8] == 0
    || MEMORY[0x24BDC63F8] == 0
    || MEMORY[0x24BDC63E8] == 0)
  {
    if (qword_25716FFC0 != -1)
      swift_once();
    v10 = sub_241B7FD74();
    __swift_project_value_buffer(v10, (uint64_t)qword_25716FFC8);
    v11 = sub_241B7FD5C();
    v12 = sub_241B7FE70();
    if (!os_log_type_enabled(v11, v12))
      goto LABEL_34;
    v13 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v13 = 0;
    v14 = "encryptData: CryptoKit Framework not loaded. method aborted.";
    goto LABEL_33;
  }
  v19 = sub_241B7FDBC();
  v20 = *(_QWORD *)(v19 - 8);
  MEMORY[0x24BDAC7A8](v19);
  v22 = (char *)&v40 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = __swift_instantiateConcreteTypeFromMangledName(&qword_257170020);
  MEMORY[0x24BDAC7A8](v23);
  v25 = (char *)&v40 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for ULKeychain();
  static ULKeychain.retrieveSymmetricKey(_:)(a3, a4, (uint64_t)v46);
  if (!v46[3])
  {
    sub_241B73EF8((uint64_t)v46, &qword_257170028);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v20 + 56))(v25, 1, 1, v19);
    goto LABEL_29;
  }
  v26 = swift_dynamicCast();
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v20 + 56))(v25, v26 ^ 1u, 1, v19);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v25, 1, v19) == 1)
  {
LABEL_29:
    sub_241B73EF8((uint64_t)v25, &qword_257170020);
    if (qword_25716FFC0 != -1)
      swift_once();
    v37 = sub_241B7FD74();
    __swift_project_value_buffer(v37, (uint64_t)qword_25716FFC8);
    v11 = sub_241B7FD5C();
    v12 = sub_241B7FE7C();
    if (!os_log_type_enabled(v11, v12))
      goto LABEL_34;
    v13 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v13 = 0;
    v14 = "Failed to retrieve symmetric key for data encryption";
LABEL_33:
    _os_log_impl(&dword_2419D9000, v11, v12, v14, v13, 2u);
    MEMORY[0x2426A0EF4](v13, -1, -1);
LABEL_34:

    return 0;
  }
  v45 = &v40;
  (*(void (**)(char *, char *, uint64_t))(v20 + 32))(v22, v25, v19);
  v27 = sub_241B7FE04();
  v44 = &v40;
  v28 = *(_QWORD *)(v27 - 8);
  MEMORY[0x24BDAC7A8](v27);
  v30 = (char *)&v40 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_241B7FDF8();
  v42 = sub_241B7FE28();
  v43 = &v40;
  v41 = *(_QWORD *)(v42 - 8);
  MEMORY[0x24BDAC7A8](v42);
  v32 = (char *)&v40 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  v46[0] = a1;
  v46[1] = a2;
  v33 = __swift_instantiateConcreteTypeFromMangledName(&qword_257170040);
  v34 = MEMORY[0x24BDAC7A8](v33);
  v36 = (char *)&v40 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, char *, uint64_t, double))(v28 + 16))(v36, v30, v27, v34);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v28 + 56))(v36, 0, 1, v27);
  sub_241B73EB4();
  sub_241B7FDEC();
  sub_241B73EF8((uint64_t)v36, &qword_257170040);
  v39 = sub_241B7FE10();
  (*(void (**)(char *, uint64_t))(v41 + 8))(v32, v42);
  (*(void (**)(char *, uint64_t))(v28 + 8))(v30, v27);
  (*(void (**)(char *, uint64_t))(v20 + 8))(v22, v19);
  return v39;
}

uint64_t sub_241B7336C(_BYTE *__src, _BYTE *a2)
{
  unint64_t v2;
  _BYTE __dst[14];
  char v5;
  uint64_t v6;

  v6 = *MEMORY[0x24BDAC8D0];
  if (__src)
    v2 = a2 - __src;
  else
    v2 = 0;
  if ((v2 & 0x8000000000000000) != 0)
  {
    __break(1u);
LABEL_11:
    __break(1u);
  }
  if (v2 > 0xFF)
    goto LABEL_11;
  memset(__dst, 0, sizeof(__dst));
  v5 = v2;
  if (__src && a2 != __src)
    memcpy(__dst, __src, a2 - __src);
  return *(_QWORD *)__dst;
}

uint64_t sub_241B7342C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  if (a1)
    v2 = a2 - a1;
  else
    v2 = 0;
  sub_241B7FC6C();
  swift_allocObject();
  result = sub_241B7FC3C();
  if (v2 < 0)
  {
    __break(1u);
  }
  else
  {
    sub_241B7FC84();
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = v2;
  }
  return result;
}

uint64_t sub_241B734A4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  if (a1)
    v2 = a2 - a1;
  else
    v2 = 0;
  sub_241B7FC6C();
  swift_allocObject();
  result = sub_241B7FC3C();
  if (v2 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v2 > 0x7FFFFFFF)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  if ((v2 & 0x80000000) == 0)
    return v2 << 32;
LABEL_10:
  __break(1u);
  return result;
}

uint64_t _s19MicroLocationDaemon12ULEncryptionC11decryptData_8keyLabel10Foundation0F0VSgAH_SStFZ_0(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  BOOL v4;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  uint64_t v14;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  int v29;
  char *v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  NSObject *v34;
  os_log_type_t v35;
  uint8_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t *v44;
  uint64_t *v45;
  _QWORD v46[4];

  if (MEMORY[0x24BDC6678])
    v4 = MEMORY[0x24BDC6690] == 0;
  else
    v4 = 1;
  if (v4
    || MEMORY[0x24BDC6688] == 0
    || MEMORY[0x24BDC6390] == 0
    || MEMORY[0x24BDC63D8] == 0
    || MEMORY[0x24BDC63F8] == 0
    || MEMORY[0x24BDC63E8] == 0)
  {
    if (qword_25716FFC0 != -1)
      swift_once();
    v10 = sub_241B7FD74();
    __swift_project_value_buffer(v10, (uint64_t)qword_25716FFC8);
    v11 = sub_241B7FD5C();
    v12 = sub_241B7FE70();
    if (os_log_type_enabled(v11, v12))
    {
      v13 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v13 = 0;
      _os_log_impl(&dword_2419D9000, v11, v12, "decryptData: CryptoKit Framework not loaded. method aborted.", v13, 2u);
      MEMORY[0x2426A0EF4](v13, -1, -1);
    }

    return 0;
  }
  else
  {
    v19 = sub_241B7FE28();
    v45 = &v40;
    v20 = *(_QWORD *)(v19 - 8);
    v41 = v19;
    v42 = v20;
    v21 = *(_QWORD *)(v20 + 64);
    MEMORY[0x24BDAC7A8](v19);
    v22 = (char *)&v40 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
    v23 = sub_241B7FDBC();
    v44 = &v40;
    v24 = *(_QWORD *)(v23 - 8);
    MEMORY[0x24BDAC7A8](v23);
    v43 = (char *)&v40 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
    v26 = __swift_instantiateConcreteTypeFromMangledName(&qword_257170020);
    MEMORY[0x24BDAC7A8](v26);
    v28 = (char *)&v40 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
    type metadata accessor for ULKeychain();
    static ULKeychain.retrieveSymmetricKey(_:)(a3, a4, (uint64_t)v46);
    if (v46[3])
    {
      v29 = swift_dynamicCast();
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v24 + 56))(v28, v29 ^ 1u, 1, v23);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48))(v28, 1, v23) != 1)
      {
        v30 = v43;
        v31 = (*(uint64_t (**)(char *, char *, uint64_t))(v24 + 32))(v43, v28, v23);
        MEMORY[0x24BDAC7A8](v31);
        v32 = (char *)&v40 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
        sub_241B73DEC(a1, a2);
        sub_241B70870(a1, a2);
        v38 = v41;
        v37 = v42;
        (*(void (**)(char *, char *, uint64_t))(v42 + 32))(v22, v32, v41);
        v14 = sub_241B7FDE0();
        (*(void (**)(char *, uint64_t))(v24 + 8))(v30, v23);
        (*(void (**)(char *, uint64_t))(v37 + 8))(v22, v38);
        return v14;
      }
    }
    else
    {
      sub_241B73EF8((uint64_t)v46, &qword_257170028);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v24 + 56))(v28, 1, 1, v23);
    }
    sub_241B73EF8((uint64_t)v28, &qword_257170020);
    if (qword_25716FFC0 != -1)
      swift_once();
    v33 = sub_241B7FD74();
    __swift_project_value_buffer(v33, (uint64_t)qword_25716FFC8);
    v34 = sub_241B7FD5C();
    v35 = sub_241B7FE7C();
    if (os_log_type_enabled(v34, v35))
    {
      v36 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v36 = 0;
      _os_log_impl(&dword_2419D9000, v34, v35, "Failed to retrieve symmetric key for data decryption", v36, 2u);
      MEMORY[0x2426A0EF4](v36, -1, -1);
    }

    return 0;
  }
}

uint64_t type metadata accessor for ULEncryption()
{
  return objc_opt_self();
}

void type metadata accessor for CFString()
{
  unint64_t ForeignTypeMetadata;
  uint64_t v1;

  if (!qword_257170018)
  {
    ForeignTypeMetadata = swift_getForeignTypeMetadata();
    if (!v1)
      atomic_store(ForeignTypeMetadata, (unint64_t *)&qword_257170018);
  }
}

uint64_t sub_241B73D3C(uint64_t a1, unint64_t a2)
{
  uint64_t result;

  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2)
      return result;
    swift_release();
  }
  return swift_release();
}

uint64_t sub_241B73D80(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15)
    return sub_241B73D3C(a1, a2);
  return a1;
}

uint64_t __swift_project_value_buffer(uint64_t a1, uint64_t a2)
{
  if ((*(_BYTE *)(*(_QWORD *)(a1 - 8) + 82) & 2) != 0)
    return *(_QWORD *)a2;
  return a2;
}

uint64_t __swift_instantiateConcreteTypeFromMangledName(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result < 0)
  {
    result = MEMORY[0x2426A0E88]((char *)a1 + (int)result, -(result >> 32), 0, 0);
    *a1 = result;
  }
  return result;
}

uint64_t sub_241B73DEC(uint64_t a1, unint64_t a2)
{
  uint64_t result;

  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2)
      return result;
    swift_retain();
  }
  return swift_retain();
}

_QWORD *__swift_project_boxed_opaque_existential_1(_QWORD *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) & 0x20000) != 0)
    return (_QWORD *)(*result
                    + ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) + 16) & ~(unint64_t)*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80)));
  return result;
}

uint64_t __swift_destroy_boxed_opaque_existential_1(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 24) - 8);
  if ((*(_BYTE *)(v1 + 82) & 2) != 0)
    return swift_release();
  else
    return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t *__swift_allocate_value_buffer(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  if ((*(_DWORD *)(*(_QWORD *)(a1 - 8) + 80) & 0x20000) != 0)
  {
    v3 = swift_slowAlloc();
    *a2 = v3;
    return (uint64_t *)v3;
  }
  return a2;
}

unint64_t sub_241B73EB4()
{
  unint64_t result;

  result = qword_257170048;
  if (!qword_257170048)
  {
    result = MEMORY[0x2426A0EA0](MEMORY[0x24BDCDDC0], MEMORY[0x24BDCDDE8]);
    atomic_store(result, (unint64_t *)&qword_257170048);
  }
  return result;
}

uint64_t sub_241B73EF8(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = __swift_instantiateConcreteTypeFromMangledName(a2);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_241B73F34(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_257170028);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_241B73F7C(unint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = a2(255);
    result = MEMORY[0x2426A0EA0](a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_241B73FBC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_257170060;
  if (!qword_257170060)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_257170058);
    result = MEMORY[0x2426A0EA0](MEMORY[0x24BEE12C8], v1);
    atomic_store(result, (unint64_t *)&qword_257170060);
  }
  return result;
}

uint64_t __swift_instantiateConcreteTypeFromMangledNameAbstract(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result < 0)
  {
    result = MEMORY[0x2426A0E94](255, (char *)a1 + (int)result, -(result >> 32), 0, 0);
    *a1 = result;
  }
  return result;
}

void static ULKeychain.retrieveSymmetricKey(_:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  BOOL v4;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  uint64_t *boxed_opaque_existential_0;
  uint64_t v19;
  OSStatus v20;

  if (MEMORY[0x24BDC6390])
    v4 = MEMORY[0x24BDC63D8] == 0;
  else
    v4 = 1;
  if (v4 || MEMORY[0x24BDC63F8] == 0 || MEMORY[0x24BDC63E8] == 0)
  {
    if (qword_25716FFE0 != -1)
      swift_once();
    v14 = sub_241B7FD74();
    __swift_project_value_buffer(v14, (uint64_t)qword_257170068);
    v15 = sub_241B7FD5C();
    v16 = sub_241B7FE70();
    if (os_log_type_enabled(v15, v16))
    {
      v17 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v17 = 0;
      _os_log_impl(&dword_2419D9000, v15, v16, "retrieveSymmetricKey: CryptoKit Framework not loaded. method aborted.", v17, 2u);
      MEMORY[0x2426A0EF4](v17, -1, -1);
    }

    goto LABEL_18;
  }
  v20 = 0;
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_257170020);
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)&v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  static ULKeychain.retrieveSymmetricKeyWithStatus(label:status:)(a1, a2, &v20, (uint64_t)v11);
  v12 = sub_241B7FDBC();
  v13 = *(_QWORD *)(v12 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12) == 1)
  {
    sub_241B758E0((uint64_t)v11);
LABEL_18:
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
    return;
  }
  *(_QWORD *)(a3 + 24) = v12;
  boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0((uint64_t *)a3);
  (*(void (**)(uint64_t *, char *, uint64_t))(v13 + 32))(boxed_opaque_existential_0, v11, v12);
}

uint64_t sub_241B74224()
{
  uint64_t v0;

  v0 = sub_241B7FD74();
  __swift_allocate_value_buffer(v0, qword_257170068);
  __swift_project_value_buffer(v0, (uint64_t)qword_257170068);
  return sub_241B7FD68();
}

void static ULKeychain.getSymmetricKeyOrCreateNew(_:)(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  BOOL v4;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t (*v15)(char *, uint64_t, uint64_t);
  int v16;
  uint64_t v17;
  _OWORD *v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  uint8_t *v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  NSObject *v29;
  os_log_type_t v30;
  _BOOL4 v31;
  _OWORD *v32;
  uint8_t *v33;
  uint64_t *v34;
  uint64_t *boxed_opaque_existential_0;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  _OWORD *v42;
  uint64_t v43;
  OSStatus v44;

  if (MEMORY[0x24BDC6390])
    v4 = MEMORY[0x24BDC63D8] == 0;
  else
    v4 = 1;
  if (v4 || MEMORY[0x24BDC63F8] == 0 || MEMORY[0x24BDC63E8] == 0)
  {
    if (qword_25716FFE0 != -1)
      swift_once();
    v20 = sub_241B7FD74();
    __swift_project_value_buffer(v20, (uint64_t)qword_257170068);
    v21 = sub_241B7FD5C();
    v22 = sub_241B7FE70();
    if (os_log_type_enabled(v21, v22))
    {
      v23 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v23 = 0;
      _os_log_impl(&dword_2419D9000, v21, v22, "getSymmetricKeyOrCreateNew: CryptoKit Framework not loaded. method aborted.", v23, 2u);
      MEMORY[0x2426A0EF4](v23, -1, -1);
    }

    *a3 = 0u;
    a3[1] = 0u;
  }
  else
  {
    v42 = a3;
    v44 = 0;
    v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_257170020);
    v10 = *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64);
    MEMORY[0x24BDAC7A8](v9);
    v11 = (v10 + 15) & 0xFFFFFFFFFFFFFFF0;
    v40 = a1;
    v41 = a2;
    v12 = static ULKeychain.retrieveSymmetricKeyWithStatus(label:status:)(a1, a2, &v44, (uint64_t)&v37 - v11);
    MEMORY[0x24BDAC7A8](v12);
    sub_241B7753C((uint64_t)&v37 - v11, (uint64_t)&v37 - v11, &qword_257170020);
    v13 = sub_241B7FDBC();
    v14 = *(_QWORD *)(v13 - 8);
    v15 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48);
    v16 = v15((char *)&v37 - v11, 1, v13);
    v17 = sub_241B758E0((uint64_t)&v37 - v11);
    if (v16 == 1 && v44 == -25300)
    {
      v39 = &v37;
      MEMORY[0x24BDAC7A8](v17);
      v24 = sub_241B7FDD4();
      MEMORY[0x24BDAC7A8](v24);
      sub_241B7FDC8();
      sub_241B7FDB0();
      sub_241B758E0((uint64_t)&v37 - v11);
      v38 = v14;
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v14 + 56))((char *)&v37 - v11, 0, 1, v13);
      v25 = sub_241B7595C((uint64_t)&v37 - v11, (uint64_t)&v37 - v11);
      MEMORY[0x24BDAC7A8](v25);
      sub_241B7753C((uint64_t)&v37 - v11, (uint64_t)&v37 - v11, &qword_257170020);
      v26 = v15((char *)&v37 - v11, 1, v13);
      v27 = sub_241B758E0((uint64_t)&v37 - v11);
      if (v26 != 1)
      {
        MEMORY[0x24BDAC7A8](v27);
        sub_241B7753C((uint64_t)&v37 - v11, (uint64_t)&v37 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), &qword_257170020);
        if (v15((char *)&v37 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), 1, v13) != 1)
        {
          sub_241B759A4();
          sub_241B7FC78();
          v36 = v43;
          (*(void (**)(char *, uint64_t))(v38 + 8))((char *)&v37 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), v13);
          __asm { BR              X10 }
        }
        __break(1u);
        JUMPOUT(0x241B748ECLL);
      }
      if (qword_25716FFE0 != -1)
        swift_once();
      v28 = sub_241B7FD74();
      __swift_project_value_buffer(v28, (uint64_t)qword_257170068);
      v29 = sub_241B7FD5C();
      v30 = sub_241B7FE7C();
      v31 = os_log_type_enabled(v29, v30);
      v32 = v42;
      if (v31)
      {
        v33 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v33 = 0;
        _os_log_impl(&dword_2419D9000, v29, v30, "Failed to generate a symmetric key", v33, 2u);
        MEMORY[0x2426A0EF4](v33, -1, -1);
      }

      sub_241B758E0((uint64_t)&v37 - v11);
      *v32 = 0u;
      v32[1] = 0u;
    }
    else
    {
      MEMORY[0x24BDAC7A8](v17);
      sub_241B7753C((uint64_t)&v37 - v11, (uint64_t)&v37 - v11, &qword_257170020);
      if (v15((char *)&v37 - v11, 1, v13) == 1)
      {
        sub_241B758E0((uint64_t)&v37 - v11);
        sub_241B758E0((uint64_t)&v37 - v11);
        v19 = v42;
        *v42 = 0u;
        v19[1] = 0u;
      }
      else
      {
        v34 = (uint64_t *)v42;
        *((_QWORD *)v42 + 3) = v13;
        boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0(v34);
        (*(void (**)(uint64_t *, char *, uint64_t))(v14 + 32))(boxed_opaque_existential_0, (char *)&v37 - v11, v13);
        sub_241B758E0((uint64_t)&v37 - v11);
      }
    }
  }
}

uint64_t static ULKeychain.retrieveSymmetricKeyWithStatus(label:status:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, OSStatus *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t inited;
  void **v6;
  void *v7;
  void *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  void **v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  uint64_t v17;
  void **v18;
  void *v19;
  id v20;
  id v21;
  id v22;
  id v23;
  id v24;
  id v25;
  id v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  void (*v32)(char *, uint64_t, uint64_t, uint64_t);
  const __CFDictionary *v33;
  OSStatus v34;
  CFTypeRef v35;
  uint64_t v36;
  __int128 v37;
  uint64_t v38;
  NSObject *v39;
  os_log_type_t v40;
  uint8_t *v41;
  uint64_t v42;
  NSObject *v43;
  os_log_type_t v44;
  uint64_t v45;
  uint64_t v46;
  CFStringRef v47;
  __CFString *v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  NSObject *v53;
  os_log_type_t v54;
  uint8_t *v55;
  unint64_t v56;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  OSStatus *v62;
  uint64_t v63;
  __int128 v64;
  CFTypeRef v65[37];

  v61 = a1;
  v62 = a3;
  v59 = (char *)a4;
  v60 = a2;
  v65[35] = *(CFTypeRef *)MEMORY[0x24BDAC8D0];
  __swift_instantiateConcreteTypeFromMangledName(&qword_257170090);
  inited = swift_initStackObject();
  v6 = (void **)MEMORY[0x24BDE9220];
  *(_OWORD *)(inited + 16) = xmmword_241BBBB30;
  v7 = *v6;
  *(_QWORD *)(inited + 32) = *v6;
  v8 = (void *)*MEMORY[0x24BDE9248];
  type metadata accessor for CFString();
  *(_QWORD *)(inited + 40) = v8;
  v9 = (void *)*MEMORY[0x24BDE9528];
  *(_QWORD *)(inited + 64) = v10;
  *(_QWORD *)(inited + 72) = v9;
  v11 = MEMORY[0x24BEE1328];
  v12 = (void **)MEMORY[0x24BDE8F60];
  *(_BYTE *)(inited + 80) = 1;
  v13 = *v12;
  *(_QWORD *)(inited + 104) = v11;
  *(_QWORD *)(inited + 112) = v13;
  v14 = (void *)*MEMORY[0x24BDE8F98];
  *(_QWORD *)(inited + 120) = *MEMORY[0x24BDE8F98];
  v15 = (void *)*MEMORY[0x24BDE9140];
  *(_QWORD *)(inited + 144) = v10;
  *(_QWORD *)(inited + 152) = v15;
  *(_BYTE *)(inited + 160) = 1;
  v16 = (void *)*MEMORY[0x24BDE8FB0];
  *(_QWORD *)(inited + 184) = v11;
  *(_QWORD *)(inited + 192) = v16;
  v17 = MEMORY[0x24BEE0D00];
  v18 = (void **)MEMORY[0x24BDE94C8];
  *(_QWORD *)(inited + 200) = v61;
  *(_QWORD *)(inited + 208) = a2;
  v19 = *v18;
  *(_QWORD *)(inited + 224) = v17;
  *(_QWORD *)(inited + 232) = v19;
  *(_QWORD *)(inited + 264) = v11;
  *(_BYTE *)(inited + 240) = 1;
  v20 = v7;
  v21 = v8;
  v22 = v9;
  v23 = v13;
  v24 = v14;
  v25 = v15;
  v26 = v16;
  swift_bridgeObjectRetain();
  v27 = v19;
  sub_241B74F34(inited);
  v65[0] = 0;
  v28 = __swift_instantiateConcreteTypeFromMangledName(&qword_257170020);
  v29 = *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64);
  MEMORY[0x24BDAC7A8](v28);
  v30 = (char *)&v58 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31 = sub_241B7FDBC();
  v32 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 56);
  v32(v30, 1, 1, v31);
  sub_241B7711C();
  sub_241B77158();
  v33 = (const __CFDictionary *)sub_241B7FE34();
  swift_bridgeObjectRelease();
  v34 = SecItemCopyMatching(v33, v65);

  v35 = v65[0];
  *v62 = v34;
  if (v34 == -25300)
  {
    if (qword_25716FFE0 != -1)
      swift_once();
    v38 = sub_241B7FD74();
    __swift_project_value_buffer(v38, (uint64_t)qword_257170068);
    v39 = sub_241B7FD5C();
    v40 = sub_241B7FE7C();
    if (os_log_type_enabled(v39, v40))
    {
      v41 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v41 = 0;
      _os_log_impl(&dword_2419D9000, v39, v40, "key not found in keychain", v41, 2u);
      MEMORY[0x2426A0EF4](v41, -1, -1);
    }

    goto LABEL_24;
  }
  if (v34)
  {
    if (qword_25716FFE0 != -1)
      swift_once();
    v42 = sub_241B7FD74();
    __swift_project_value_buffer(v42, (uint64_t)qword_257170068);
    v43 = sub_241B7FD5C();
    v44 = sub_241B7FE7C();
    if (os_log_type_enabled(v43, v44))
    {
      v45 = swift_slowAlloc();
      v46 = swift_slowAlloc();
      *(_QWORD *)&v64 = v46;
      *(_DWORD *)v45 = 67109378;
      LODWORD(v63) = v34;
      sub_241B7FEA0();
      *(_WORD *)(v45 + 8) = 2080;
      v47 = SecCopyErrorMessageString(v34, 0);
      if (v47)
      {
        v48 = (__CFString *)v47;
        v49 = sub_241B7FE4C();
        v51 = v50;

      }
      else
      {
        LODWORD(v63) = v34;
        v49 = sub_241B7FF30();
        v51 = v56;
      }
      v63 = sub_241B759EC(v49, v51, (uint64_t *)&v64);
      sub_241B7FEA0();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_2419D9000, v43, v44, "Failed to retrieve key from keychain, error %d, %s", (uint8_t *)v45, 0x12u);
      swift_arrayDestroy();
      MEMORY[0x2426A0EF4](v46, -1, -1);
      MEMORY[0x2426A0EF4](v45, -1, -1);
    }

    goto LABEL_24;
  }
  if (v35)
  {
    v63 = (uint64_t)v35;
    swift_unknownObjectRetain();
    v36 = swift_dynamicCast();
    if ((v36 & 1) != 0)
    {
      *(double *)&v37 = MEMORY[0x24BDAC7A8](v36);
      v64 = v37;
      sub_241B7FDA4();
      sub_241B758E0((uint64_t)&v58 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0));
      v32((char *)&v58 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0), 0, 1, v31);
      sub_241B7595C((uint64_t)&v58 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t)&v58 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0));
LABEL_24:
      sub_241B7595C((uint64_t)v30, (uint64_t)v59);
      return swift_unknownObjectRelease();
    }
  }
  if (qword_25716FFE0 != -1)
    swift_once();
  v52 = sub_241B7FD74();
  __swift_project_value_buffer(v52, (uint64_t)qword_257170068);
  v53 = sub_241B7FD5C();
  v54 = sub_241B7FE7C();
  if (os_log_type_enabled(v53, v54))
  {
    v55 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v55 = 0;
    _os_log_impl(&dword_2419D9000, v53, v54, "Failed to get key from keychain. Got invalid data", v55, 2u);
    MEMORY[0x2426A0EF4](v55, -1, -1);
  }

  sub_241B758E0((uint64_t)v30);
  v32(v59, 1, 1, v31);
  return swift_unknownObjectRelease();
}

unint64_t sub_241B74F34(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t result;
  char v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;

  if (!*(_QWORD *)(a1 + 16))
  {
    v3 = (_QWORD *)MEMORY[0x24BEE4B00];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_257170108);
  v2 = sub_241B7FF18();
  v3 = (_QWORD *)v2;
  v4 = *(_QWORD *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  v5 = v2 + 64;
  v6 = a1 + 32;
  swift_retain();
  while (1)
  {
    sub_241B7753C(v6, (uint64_t)&v13, &qword_257170110);
    v7 = v13;
    result = sub_241B7602C(v13);
    if ((v9 & 1) != 0)
      break;
    *(_QWORD *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    *(_QWORD *)(v3[6] + 8 * result) = v7;
    result = (unint64_t)sub_241B77580(&v14, (_OWORD *)(v3[7] + 32 * result));
    v10 = v3[2];
    v11 = __OFADD__(v10, 1);
    v12 = v10 + 1;
    if (v11)
      goto LABEL_11;
    v3[2] = v12;
    v6 += 40;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

id sub_241B7506C(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(_QWORD *__return_ptr, uint64_t, uint64_t))
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  double v11;
  uint64_t v12;
  char *v13;
  void *v14;
  _QWORD v16[3];
  uint64_t v17;

  v5 = sub_241B7FE4C();
  v7 = v6;
  swift_getObjCClassMetadata();
  a4(v16, v5, v7);
  swift_bridgeObjectRelease();
  v8 = v17;
  if (!v17)
    return 0;
  v9 = __swift_project_boxed_opaque_existential_1(v16, v17);
  v10 = *(_QWORD *)(v8 - 8);
  v11 = MEMORY[0x24BDAC7A8](v9);
  v13 = (char *)v16 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, double))(v10 + 16))(v13, v11);
  v14 = (void *)sub_241B7FF3C();
  (*(void (**)(char *, uint64_t))(v10 + 8))(v13, v8);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v16);
  return v14;
}

id ULKeychain.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

id ULKeychain.init()()
{
  return sub_241B75828(type metadata accessor for ULKeychain);
}

id ULKeychain.__deallocating_deinit()
{
  return sub_241B758AC(type metadata accessor for ULKeychain);
}

void sub_241B751EC(UInt8 *bytes@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  CFIndex v4;
  CFDataRef v5;
  CFDataRef v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;

  if (bytes)
    v4 = a2 - (_QWORD)bytes;
  else
    v4 = 0;
  v5 = CFDataCreateWithBytesNoCopy(0, bytes, v4, (CFAllocatorRef)*MEMORY[0x24BDBD258]);
  if (v5)
  {
    v6 = v5;
    v7 = sub_241B7FC9C();
    v9 = v8;

  }
  else
  {
    v7 = 0;
    v9 = 0xC000000000000000;
  }
  *a3 = v7;
  a3[1] = v9;
}

void sub_241B75270()
{
  off_257170080 = (_UNKNOWN *)MEMORY[0x24BEE4B00];
}

uint64_t static ULKeychainMock.retrieveSymmetricKey(_:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  BOOL v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  double v14;
  unint64_t v15;
  char v16;
  void (*v17)(char *, uint64_t, uint64_t, uint64_t, double);
  uint64_t v18;
  uint64_t *boxed_opaque_existential_0;
  uint64_t v20;
  double v21;
  void (*v22)(char *, char *, uint64_t);
  uint64_t *v23;
  _QWORD v24[3];

  v4 = result == 0x79656B5F6F6ELL && a2 == 0xE600000000000000;
  if (v4 || (v6 = result, result = sub_241B7FF48(), (result & 1) != 0))
  {
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
    return result;
  }
  v7 = sub_241B7FDBC();
  v24[2] = v24;
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_25716FFE8 != -1)
    swift_once();
  swift_beginAccess();
  v11 = off_257170080;
  v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_257170020);
  v24[1] = v24;
  v13 = *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64);
  v14 = MEMORY[0x24BDAC7A8](v12);
  if (!v11[2])
  {
    v17 = *(void (**)(char *, uint64_t, uint64_t, uint64_t, double))(v8 + 56);
    v17((char *)v24 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0), 1, 1, v7, v14);
LABEL_15:
    sub_241B758E0((uint64_t)v24 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
    swift_endAccess();
    v18 = sub_241B7FDD4();
    MEMORY[0x24BDAC7A8](v18);
    sub_241B7FDC8();
    *(_QWORD *)(a3 + 24) = v7;
    boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0((uint64_t *)a3);
    v20 = sub_241B7FDB0();
    v21 = MEMORY[0x24BDAC7A8](v20);
    (*(void (**)(char *, uint64_t *, uint64_t, double))(v8 + 16))((char *)v24 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0), boxed_opaque_existential_0, v7, v21);
    ((void (*)(char *, _QWORD, uint64_t, uint64_t))v17)((char *)v24 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0), 0, 1, v7);
    swift_beginAccess();
    swift_bridgeObjectRetain();
    sub_241B755DC((uint64_t)v24 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0), v6, a2);
    return swift_endAccess();
  }
  swift_bridgeObjectRetain();
  v15 = sub_241B7605C(v6, a2);
  if ((v16 & 1) != 0)
  {
    (*(void (**)(char *, unint64_t, uint64_t))(v8 + 16))((char *)v24 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0), v11[7] + *(_QWORD *)(v8 + 72) * v15, v7);
    v17 = *(void (**)(char *, uint64_t, uint64_t, uint64_t, double))(v8 + 56);
    ((void (*)(char *, _QWORD, uint64_t, uint64_t))v17)((char *)v24 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0), 0, 1, v7);
  }
  else
  {
    v17 = *(void (**)(char *, uint64_t, uint64_t, uint64_t, double))(v8 + 56);
    ((void (*)(char *, uint64_t, uint64_t, uint64_t))v17)((char *)v24 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0), 1, 1, v7);
  }
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))((char *)v24 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0), 1, v7) == 1)goto LABEL_15;
  v22 = *(void (**)(char *, char *, uint64_t))(v8 + 32);
  v22(v10, (char *)v24 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0), v7);
  swift_endAccess();
  *(_QWORD *)(a3 + 24) = v7;
  v23 = __swift_allocate_boxed_opaque_existential_0((uint64_t *)a3);
  return ((uint64_t (*)(uint64_t *, char *, uint64_t))v22)(v23, v10, v7);
}

uint64_t sub_241B755DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  double v15;
  uint64_t v16;
  char *v17;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v19;
  uint64_t v20;

  v4 = v3;
  v8 = sub_241B7FDBC();
  v9 = *(_QWORD *)(v8 - 8);
  v10 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(a1, 1, v8);
  if ((_DWORD)v10 == 1)
  {
    sub_241B758E0(a1);
    v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_257170020);
    MEMORY[0x24BDAC7A8](v11);
    v13 = (char *)&v19 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
    sub_241B762A8(a2, a3, (uint64_t)v13);
    swift_bridgeObjectRelease();
    return sub_241B758E0((uint64_t)v13);
  }
  else
  {
    v15 = MEMORY[0x24BDAC7A8](v10);
    v17 = (char *)&v19 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *, uint64_t, uint64_t, double))(v9 + 32))(v17, a1, v8, v15);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v20 = *v4;
    *v4 = 0x8000000000000000;
    sub_241B76958((uint64_t)v17, a2, a3, isUniquelyReferenced_nonNull_native);
    *v4 = v20;
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
}

id ULKeychainMock.init()()
{
  return sub_241B75828(type metadata accessor for ULKeychainMock);
}

id sub_241B75828(uint64_t (*a1)(void))
{
  void *v1;
  objc_super v3;

  v3.receiver = v1;
  v3.super_class = (Class)a1();
  return objc_msgSendSuper2(&v3, sel_init);
}

id sub_241B75864(void *a1, uint64_t a2, uint64_t (*a3)(void))
{
  objc_super v4;

  v4.receiver = a1;
  v4.super_class = (Class)a3();
  return objc_msgSendSuper2(&v4, sel_init);
}

id ULKeychainMock.__deallocating_deinit()
{
  return sub_241B758AC(type metadata accessor for ULKeychainMock);
}

id sub_241B758AC(uint64_t (*a1)(void))
{
  void *v1;
  objc_super v3;

  v3.receiver = v1;
  v3.super_class = (Class)a1();
  return objc_msgSendSuper2(&v3, sel_dealloc);
}

uint64_t sub_241B758E0(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_257170020);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t *__swift_allocate_boxed_opaque_existential_0(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;

  v1 = a1;
  if ((*(_BYTE *)(*(_QWORD *)(a1[3] - 8) + 82) & 2) != 0)
  {
    *a1 = swift_allocBox();
    return (uint64_t *)v2;
  }
  return v1;
}

uint64_t sub_241B7595C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_257170020);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_241B759A4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_257170088;
  if (!qword_257170088)
  {
    v1 = sub_241B7FDBC();
    result = MEMORY[0x2426A0EA0](MEMORY[0x24BDC6390], v1);
    atomic_store(result, (unint64_t *)&qword_257170088);
  }
  return result;
}

uint64_t sub_241B759EC(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12[3];
  uint64_t ObjectType;

  v6 = sub_241B75ABC(v12, 0, 0, 1, a1, a2);
  v7 = v12[0];
  if (v6)
  {
    v8 = v6;
    ObjectType = swift_getObjectType();
    v12[0] = v8;
    v9 = *a3;
    if (*a3)
    {
      sub_241B774FC((uint64_t)v12, *a3);
      *a3 = v9 + 32;
    }
  }
  else
  {
    ObjectType = MEMORY[0x24BEE2520];
    v12[0] = a1;
    v12[1] = a2;
    v10 = *a3;
    if (*a3)
    {
      sub_241B774FC((uint64_t)v12, *a3);
      *a3 = v10 + 32;
    }
    swift_bridgeObjectRetain();
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v12);
  return v7;
}

uint64_t sub_241B75ABC(uint64_t *a1, char *__dst, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  uint64_t v8;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  _QWORD __src[2];

  if ((a6 & 0x2000000000000000) != 0)
  {
    if ((a4 & 1) == 0)
    {
      if (__dst)
      {
        v11 = HIBYTE(a6) & 0xF;
        if (a3 - (uint64_t)__dst > v11)
        {
          __src[0] = a5;
          __src[1] = a6 & 0xFFFFFFFFFFFFFFLL;
          if (__src >= (_QWORD *)&__dst[v11] || (char *)__src + v11 <= __dst)
          {
            memcpy(__dst, __src, HIBYTE(a6) & 0xF);
            sub_241B7FEAC();
            result = 0;
            *a1 = (uint64_t)__dst;
            return result;
          }
          goto LABEL_17;
        }
      }
    }
LABEL_13:
    result = sub_241B75C74(a5, a6);
    *a1 = v12;
    return result;
  }
  if ((a6 & 0x1000000000000000) != 0)
    goto LABEL_13;
  if ((a5 & 0x1000000000000000) != 0)
  {
    v8 = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
    goto LABEL_5;
  }
  v8 = sub_241B7FEE8();
  if (!v8)
  {
    sub_241B7FEF4();
    __break(1u);
LABEL_17:
    result = sub_241B7FF24();
    __break(1u);
    return result;
  }
LABEL_5:
  *a1 = v8;
  if ((a6 & 0x8000000000000000) != 0)
    return 0;
  else
    return swift_unknownObjectRetain();
}

uint64_t sub_241B75C74(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;

  v2 = sub_241B75D08(a1, a2);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v2 = sub_241B75EE0(0, *(_QWORD *)(v2 + 16) + 1, 1, (char *)v2);
  v4 = *(_QWORD *)(v2 + 16);
  v3 = *(_QWORD *)(v2 + 24);
  if (v4 >= v3 >> 1)
    v2 = sub_241B75EE0(v3 > 1, v4 + 1, 1, (char *)v2);
  *(_QWORD *)(v2 + 16) = v4 + 1;
  *(_BYTE *)(v2 + 32 + v4) = 0;
  return v2;
}

uint64_t sub_241B75D08(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  char v6;
  uint64_t result;

  if ((a2 & 0x1000000000000000) != 0)
    goto LABEL_10;
  if ((a2 & 0x2000000000000000) != 0)
    v2 = HIBYTE(a2) & 0xF;
  else
    v2 = a1 & 0xFFFFFFFFFFFFLL;
  if (v2)
  {
    while (1)
    {
      v3 = sub_241B75E7C(v2, 0);
      if (v2 < 0)
        break;
      v4 = v3;
      v5 = sub_241B7FEDC();
      if ((v6 & 1) != 0)
        goto LABEL_14;
      if (v5 == v2)
        return (uint64_t)v4;
      sub_241B7FEF4();
      __break(1u);
LABEL_10:
      v2 = sub_241B7FE64();
      if (!v2)
        return MEMORY[0x24BEE4AF8];
    }
    sub_241B7FF24();
    __break(1u);
LABEL_14:
    result = sub_241B7FEF4();
    __break(1u);
  }
  else
  {
    return MEMORY[0x24BEE4AF8];
  }
  return result;
}

_QWORD *sub_241B75E7C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;
  size_t v5;

  if (a2 <= a1)
    v2 = a1;
  else
    v2 = a2;
  if (!v2)
    return (_QWORD *)MEMORY[0x24BEE4AF8];
  __swift_instantiateConcreteTypeFromMangledName(&qword_257170100);
  v4 = (_QWORD *)swift_allocObject();
  v5 = _swift_stdlib_malloc_size(v4);
  v4[2] = a1;
  v4[3] = 2 * v5 - 64;
  return v4;
}

uint64_t sub_241B75EE0(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_257170100);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * v11 - 64;
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[v8])
      memmove(v12, v13, v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[v8] || v12 >= &v13[v8])
  {
    memcpy(v12, v13, v8);
LABEL_28:
    swift_bridgeObjectRelease();
    return (uint64_t)v10;
  }
LABEL_30:
  result = sub_241B7FF24();
  __break(1u);
  return result;
}

unint64_t sub_241B7602C(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_241B7FE88();
  return sub_241B760C0(a1, v2);
}

unint64_t sub_241B7605C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_241B7FF60();
  sub_241B7FE58();
  v4 = sub_241B7FF6C();
  return sub_241B761C8(a1, a2, v4);
}

unint64_t sub_241B760C0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t i;
  id v6;
  char v7;
  uint64_t v8;
  id v9;
  char v10;

  v3 = v2 + 64;
  v4 = -1 << *(_BYTE *)(v2 + 32);
  i = a2 & ~v4;
  if (((*(_QWORD *)(v2 + 64 + ((i >> 3) & 0xFFFFFFFFFFFFF8)) >> i) & 1) != 0)
  {
    sub_241B7711C();
    v6 = *(id *)(*(_QWORD *)(v2 + 48) + 8 * i);
    v7 = sub_241B7FE94();

    if ((v7 & 1) == 0)
    {
      v8 = ~v4;
      for (i = (i + 1) & v8; ((*(_QWORD *)(v3 + ((i >> 3) & 0xFFFFFFFFFFFFF8)) >> i) & 1) != 0; i = (i + 1) & v8)
      {
        v9 = *(id *)(*(_QWORD *)(v2 + 48) + 8 * i);
        v10 = sub_241B7FE94();

        if ((v10 & 1) != 0)
          break;
      }
    }
  }
  return i;
}

unint64_t sub_241B761C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v9;
  _QWORD *v10;
  BOOL v11;
  uint64_t v12;
  _QWORD *v13;
  BOOL v14;

  v4 = v3 + 64;
  v5 = -1 << *(_BYTE *)(v3 + 32);
  v6 = a3 & ~v5;
  if (((*(_QWORD *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0)
  {
    v9 = *(_QWORD *)(v3 + 48);
    v10 = (_QWORD *)(v9 + 16 * v6);
    v11 = *v10 == a1 && v10[1] == a2;
    if (!v11 && (sub_241B7FF48() & 1) == 0)
    {
      v12 = ~v5;
      do
      {
        v6 = (v6 + 1) & v12;
        if (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
          break;
        v13 = (_QWORD *)(v9 + 16 * v6);
        v14 = *v13 == a1 && v13[1] == a2;
      }
      while (!v14 && (sub_241B7FF48() & 1) == 0);
    }
  }
  return v6;
}

uint64_t sub_241B762A8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v3;
  uint64_t *v4;
  unint64_t v8;
  char v9;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;

  v4 = v3;
  swift_bridgeObjectRetain();
  v8 = sub_241B7605C(a1, a2);
  LOBYTE(a2) = v9;
  swift_bridgeObjectRelease();
  if ((a2 & 1) != 0)
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v11 = *v4;
    v17 = *v4;
    *v4 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_241B76B24();
      v11 = v17;
    }
    swift_bridgeObjectRelease();
    v12 = *(_QWORD *)(v11 + 56);
    v13 = sub_241B7FDBC();
    v14 = *(_QWORD *)(v13 - 8);
    (*(void (**)(uint64_t, unint64_t, uint64_t))(v14 + 32))(a3, v12 + *(_QWORD *)(v14 + 72) * v8, v13);
    sub_241B7675C(v8, v11);
    *v4 = v11;
    swift_bridgeObjectRelease();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v14 + 56))(a3, 0, 1, v13);
  }
  else
  {
    v16 = sub_241B7FDBC();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(a3, 1, 1, v16);
  }
}

uint64_t sub_241B763D8(uint64_t a1, int a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t result;
  int64_t v14;
  unint64_t v15;
  _QWORD *v16;
  unint64_t v17;
  unint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  double v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  char v38;
  unint64_t v39;
  BOOL v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  int64_t v44;
  _QWORD *v45;
  uint64_t i;
  int v47;
  int64_t v48;
  uint64_t v49;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_2571700F8);
  v47 = a2;
  v6 = sub_241B7FF0C();
  v7 = v6;
  if (*(_QWORD *)(v5 + 16))
  {
    v43 = v2;
    v8 = 1 << *(_BYTE *)(v5 + 32);
    v9 = *(_QWORD *)(v5 + 64);
    v45 = (_QWORD *)(v5 + 64);
    if (v8 < 64)
      v10 = ~(-1 << v8);
    else
      v10 = -1;
    v11 = v10 & v9;
    v44 = (unint64_t)(v8 + 63) >> 6;
    v12 = v6 + 64;
    result = swift_retain();
    v14 = 0;
    for (i = v5; ; v5 = i)
    {
      if (v11)
      {
        v17 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        v48 = v14;
        v18 = v17 | (v14 << 6);
      }
      else
      {
        v19 = v14 + 1;
        if (__OFADD__(v14, 1))
        {
LABEL_40:
          __break(1u);
LABEL_41:
          __break(1u);
          return result;
        }
        if (v19 >= v44)
          goto LABEL_34;
        v20 = v45[v19];
        v21 = v14 + 1;
        if (!v20)
        {
          v21 = v14 + 2;
          if (v14 + 2 >= v44)
            goto LABEL_34;
          v20 = v45[v21];
          if (!v20)
          {
            v22 = v14 + 3;
            if (v14 + 3 >= v44)
            {
LABEL_34:
              swift_release();
              v3 = v43;
              if ((v47 & 1) != 0)
              {
                v42 = 1 << *(_BYTE *)(v5 + 32);
                if (v42 >= 64)
                  bzero(v45, ((unint64_t)(v42 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v45 = -1 << v42;
                *(_QWORD *)(v5 + 16) = 0;
              }
              break;
            }
            v20 = v45[v22];
            if (!v20)
            {
              while (1)
              {
                v21 = v22 + 1;
                if (__OFADD__(v22, 1))
                  goto LABEL_41;
                if (v21 >= v44)
                  goto LABEL_34;
                v20 = v45[v21];
                ++v22;
                if (v20)
                  goto LABEL_21;
              }
            }
            v21 = v14 + 3;
          }
        }
LABEL_21:
        v11 = (v20 - 1) & v20;
        v48 = v21;
        v18 = __clz(__rbit64(v20)) + (v21 << 6);
      }
      v23 = sub_241B7FDBC();
      v24 = *(_QWORD *)(v23 - 8);
      v25 = MEMORY[0x24BDAC7A8](v23);
      v27 = (char *)&v43 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
      v28 = *(_QWORD *)(v5 + 56);
      v29 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v18);
      v31 = *v29;
      v30 = v29[1];
      v32 = *(_QWORD *)(v24 + 72);
      v33 = v28 + v32 * v18;
      v49 = v34;
      if ((v47 & 1) != 0)
      {
        (*(void (**)(char *, uint64_t, uint64_t, double))(v24 + 32))(v27, v33, v23, v25);
      }
      else
      {
        (*(void (**)(char *, uint64_t, uint64_t, double))(v24 + 16))(v27, v33, v23, v25);
        swift_bridgeObjectRetain();
      }
      sub_241B7FF60();
      sub_241B7FE58();
      result = sub_241B7FF6C();
      v35 = -1 << *(_BYTE *)(v7 + 32);
      v36 = result & ~v35;
      v37 = v36 >> 6;
      if (((-1 << v36) & ~*(_QWORD *)(v12 + 8 * (v36 >> 6))) != 0)
      {
        v15 = __clz(__rbit64((-1 << v36) & ~*(_QWORD *)(v12 + 8 * (v36 >> 6)))) | v36 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v38 = 0;
        v39 = (unint64_t)(63 - v35) >> 6;
        do
        {
          if (++v37 == v39 && (v38 & 1) != 0)
          {
            __break(1u);
            goto LABEL_40;
          }
          v40 = v37 == v39;
          if (v37 == v39)
            v37 = 0;
          v38 |= v40;
          v41 = *(_QWORD *)(v12 + 8 * v37);
        }
        while (v41 == -1);
        v15 = __clz(__rbit64(~v41)) + (v37 << 6);
      }
      *(_QWORD *)(v12 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
      v16 = (_QWORD *)(*(_QWORD *)(v7 + 48) + 16 * v15);
      *v16 = v31;
      v16[1] = v30;
      result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v24 + 32))(*(_QWORD *)(v7 + 56) + v32 * v15, v27, v23);
      ++*(_QWORD *)(v7 + 16);
      v14 = v48;
    }
  }
  result = swift_release();
  *v3 = v7;
  return result;
}

unint64_t sub_241B7675C(unint64_t result, uint64_t a2)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _OWORD *v12;
  _OWORD *v13;
  uint64_t v14;
  uint64_t v15;
  int64_t v16;
  int64_t v17;
  unint64_t v18;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = sub_241B7FED0();
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      while (1)
      {
        sub_241B7FF60();
        swift_bridgeObjectRetain();
        sub_241B7FE58();
        v9 = sub_241B7FF6C();
        result = swift_bridgeObjectRelease();
        v10 = v9 & v7;
        if (v3 >= (uint64_t)v8)
          break;
        if (v10 < v8)
          goto LABEL_11;
LABEL_12:
        v11 = *(_QWORD *)(a2 + 48);
        v12 = (_OWORD *)(v11 + 16 * v3);
        v13 = (_OWORD *)(v11 + 16 * v6);
        if (v3 != v6 || v12 >= v13 + 1)
          *v12 = *v13;
        v14 = *(_QWORD *)(a2 + 56);
        v15 = *(_QWORD *)(*(_QWORD *)(sub_241B7FDBC() - 8) + 72);
        v16 = v15 * v3;
        result = v14 + v15 * v3;
        v17 = v15 * v6;
        v18 = v14 + v15 * v6 + v15;
        if (v16 < v17 || result >= v18)
        {
          result = swift_arrayInitWithTakeFrontToBack();
        }
        else
        {
          v3 = v6;
          if (v16 == v17)
            goto LABEL_6;
          result = swift_arrayInitWithTakeBackToFront();
        }
        v3 = v6;
LABEL_6:
        v6 = (v6 + 1) & v7;
        if (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
          goto LABEL_21;
      }
      if (v10 < v8)
        goto LABEL_6;
LABEL_11:
      if (v3 < (uint64_t)v10)
        goto LABEL_6;
      goto LABEL_12;
    }
LABEL_21:
    v20 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v21 = *v20;
    v22 = (-1 << v3) - 1;
  }
  else
  {
    v20 = (uint64_t *)(v4 + 8 * (result >> 6));
    v22 = *v20;
    v21 = (-1 << result) - 1;
  }
  *v20 = v22 & v21;
  v23 = *(_QWORD *)(a2 + 16);
  v24 = __OFSUB__(v23, 1);
  v25 = v23 - 1;
  if (v24)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v25;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

uint64_t sub_241B76958(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  _QWORD *v4;
  _QWORD **v5;
  _QWORD *v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;
  unint64_t v22;
  char v23;

  v5 = (_QWORD **)v4;
  v10 = (_QWORD *)*v4;
  v12 = sub_241B7605C(a2, a3);
  v13 = v10[2];
  v14 = (v11 & 1) == 0;
  v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
  }
  else
  {
    v16 = v11;
    v17 = v10[3];
    if (v17 >= v15 && (a4 & 1) != 0)
    {
LABEL_7:
      v18 = *v5;
      if ((v16 & 1) != 0)
      {
LABEL_8:
        v19 = v18[7];
        v20 = sub_241B7FDBC();
        return (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 40))(v19 + *(_QWORD *)(*(_QWORD *)(v20 - 8) + 72) * v12, a1, v20);
      }
      goto LABEL_11;
    }
    if (v17 >= v15 && (a4 & 1) == 0)
    {
      sub_241B76B24();
      goto LABEL_7;
    }
    sub_241B763D8(v15, a4 & 1);
    v22 = sub_241B7605C(a2, a3);
    if ((v16 & 1) == (v23 & 1))
    {
      v12 = v22;
      v18 = *v5;
      if ((v16 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      sub_241B76A94(v12, a2, a3, a1, v18);
      return swift_bridgeObjectRetain();
    }
  }
  result = sub_241B7FF54();
  __break(1u);
  return result;
}

uint64_t sub_241B76A94(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;

  a5[(a1 >> 6) + 8] |= 1 << a1;
  v8 = (_QWORD *)(a5[6] + 16 * a1);
  *v8 = a2;
  v8[1] = a3;
  v9 = a5[7];
  v10 = sub_241B7FDBC();
  result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v9 + *(_QWORD *)(*(_QWORD *)(v10 - 8) + 72) * a1, a4, v10);
  v12 = a5[2];
  v13 = __OFADD__(v12, 1);
  v14 = v12 + 1;
  if (v13)
    __break(1u);
  else
    a5[2] = v14;
  return result;
}

void *sub_241B76B24()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  unint64_t v6;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  double v21;
  uint64_t v22;
  char *v23;
  unint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  int64_t v27;
  unint64_t v28;
  int64_t v29;
  int64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  int64_t v35;
  uint64_t v36;
  uint64_t v37;
  int64_t v38;

  __swift_instantiateConcreteTypeFromMangledName(&qword_2571700F8);
  v33 = v0;
  v1 = *v0;
  v2 = sub_241B7FF00();
  v3 = *(_QWORD *)(v1 + 16);
  v37 = v2;
  if (!v3)
  {
    result = (void *)swift_release();
    v32 = v37;
    v31 = v33;
LABEL_28:
    *v31 = v32;
    return result;
  }
  v4 = v2;
  result = (void *)(v2 + 64);
  v6 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v1 || (unint64_t)result >= v1 + 64 + 8 * v6)
  {
    result = memmove(result, (const void *)(v1 + 64), 8 * v6);
    v4 = v37;
  }
  v8 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v1 + 16);
  v9 = 1 << *(_BYTE *)(v1 + 32);
  v36 = v1;
  v10 = -1;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  v11 = v10 & *(_QWORD *)(v1 + 64);
  v34 = v1 + 64;
  v35 = (unint64_t)(v9 + 63) >> 6;
  v12 = v1;
  while (1)
  {
    if (v11)
    {
      v13 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v38 = v8;
      v14 = v13 | (v8 << 6);
      goto LABEL_12;
    }
    v27 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v27 >= v35)
      goto LABEL_26;
    v28 = *(_QWORD *)(v34 + 8 * v27);
    v29 = v8 + 1;
    if (!v28)
    {
      v29 = v27 + 1;
      if (v27 + 1 >= v35)
        goto LABEL_26;
      v28 = *(_QWORD *)(v34 + 8 * v29);
      if (!v28)
        break;
    }
LABEL_25:
    v11 = (v28 - 1) & v28;
    v38 = v29;
    v14 = __clz(__rbit64(v28)) + (v29 << 6);
LABEL_12:
    v15 = 16 * v14;
    v16 = (uint64_t *)(*(_QWORD *)(v12 + 48) + 16 * v14);
    v18 = *v16;
    v17 = v16[1];
    v19 = sub_241B7FDBC();
    v20 = *(_QWORD *)(v19 - 8);
    v21 = MEMORY[0x24BDAC7A8](v19);
    v23 = (char *)&v33 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
    v24 = *(_QWORD *)(v20 + 72) * v14;
    (*(void (**)(char *, unint64_t, uint64_t, double))(v20 + 16))(v23, *(_QWORD *)(v12 + 56) + v24, v19, v21);
    v25 = v37;
    v26 = (_QWORD *)(*(_QWORD *)(v37 + 48) + v15);
    *v26 = v18;
    v26[1] = v17;
    (*(void (**)(unint64_t, char *, uint64_t))(v20 + 32))(*(_QWORD *)(v25 + 56) + v24, v23, v19);
    result = (void *)swift_bridgeObjectRetain();
    v8 = v38;
  }
  v30 = v27 + 2;
  if (v30 >= v35)
  {
LABEL_26:
    result = (void *)swift_release();
    v31 = v33;
    v32 = v37;
    goto LABEL_28;
  }
  v28 = *(_QWORD *)(v34 + 8 * v30);
  if (v28)
  {
    v29 = v30;
    goto LABEL_25;
  }
  while (1)
  {
    v29 = v30 + 1;
    if (__OFADD__(v30, 1))
      break;
    if (v29 >= v35)
      goto LABEL_26;
    v28 = *(_QWORD *)(v34 + 8 * v29);
    ++v30;
    if (v28)
      goto LABEL_25;
  }
LABEL_30:
  __break(1u);
  return result;
}

BOOL _s19MicroLocationDaemon10ULKeychainC17storeSymmetricKey09symmetricG05labelSb9CryptoKit0fG0V_SStFZ_0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t inited;
  void **v4;
  void *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  id v14;
  id v15;
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;
  uint64_t v21;
  void *v22;
  id v23;
  const __CFDictionary *v24;
  OSStatus v25;
  uint64_t v26;
  NSObject *v27;
  os_log_type_t v28;
  uint64_t v29;
  uint64_t v30;
  CFStringRef v31;
  __CFString *v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v40[3];

  __swift_instantiateConcreteTypeFromMangledName(&qword_257170090);
  inited = swift_initStackObject();
  v4 = (void **)MEMORY[0x24BDE9220];
  *(_OWORD *)(inited + 16) = xmmword_241BBBB30;
  v5 = *v4;
  *(_QWORD *)(inited + 32) = *v4;
  v6 = (void *)*MEMORY[0x24BDE9248];
  type metadata accessor for CFString();
  *(_QWORD *)(inited + 40) = v6;
  v7 = (void *)*MEMORY[0x24BDE9528];
  *(_QWORD *)(inited + 64) = v8;
  *(_QWORD *)(inited + 72) = v7;
  v9 = MEMORY[0x24BEE1328];
  *(_BYTE *)(inited + 80) = 1;
  v10 = (void *)*MEMORY[0x24BDE8F60];
  *(_QWORD *)(inited + 104) = v9;
  *(_QWORD *)(inited + 112) = v10;
  v11 = (void *)*MEMORY[0x24BDE8F98];
  *(_QWORD *)(inited + 120) = *MEMORY[0x24BDE8F98];
  v12 = (void *)*MEMORY[0x24BDE9140];
  *(_QWORD *)(inited + 144) = v8;
  *(_QWORD *)(inited + 152) = v12;
  *(_BYTE *)(inited + 160) = 1;
  v13 = (void *)*MEMORY[0x24BDE9550];
  *(_QWORD *)(inited + 184) = v9;
  *(_QWORD *)(inited + 192) = v13;
  sub_241B7FDBC();
  sub_241B759A4();
  v14 = v5;
  v15 = v6;
  v16 = v7;
  v17 = v10;
  v18 = v11;
  v19 = v12;
  v20 = v13;
  v21 = MEMORY[0x24BDCDDE8];
  sub_241B7FC78();
  *(_OWORD *)(inited + 200) = *(_OWORD *)v40;
  v22 = (void *)*MEMORY[0x24BDE8FB0];
  *(_QWORD *)(inited + 224) = v21;
  *(_QWORD *)(inited + 232) = v22;
  *(_QWORD *)(inited + 264) = MEMORY[0x24BEE0D00];
  *(_QWORD *)(inited + 240) = a2;
  *(_QWORD *)(inited + 248) = a3;
  v23 = v22;
  swift_bridgeObjectRetain();
  sub_241B74F34(inited);
  sub_241B7711C();
  sub_241B77158();
  v24 = (const __CFDictionary *)sub_241B7FE34();
  swift_bridgeObjectRelease();
  v25 = SecItemAdd(v24, 0);

  if (v25)
  {
    if (qword_25716FFE0 != -1)
      swift_once();
    v26 = sub_241B7FD74();
    __swift_project_value_buffer(v26, (uint64_t)qword_257170068);
    v27 = sub_241B7FD5C();
    v28 = sub_241B7FE7C();
    if (os_log_type_enabled(v27, v28))
    {
      v29 = swift_slowAlloc();
      v30 = swift_slowAlloc();
      v40[0] = v30;
      *(_DWORD *)v29 = 67109378;
      sub_241B7FEA0();
      *(_WORD *)(v29 + 8) = 2080;
      v31 = SecCopyErrorMessageString(v25, 0);
      if (v31)
      {
        v32 = (__CFString *)v31;
        v33 = sub_241B7FE4C();
        v35 = v34;

      }
      else
      {
        v33 = sub_241B7FF30();
        v35 = v36;
      }
      sub_241B759EC(v33, v35, v40);
      sub_241B7FEA0();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_2419D9000, v27, v28, "Failed to store key in keychain, error %d, %s", (uint8_t *)v29, 0x12u);
      swift_arrayDestroy();
      MEMORY[0x2426A0EF4](v30, -1, -1);
      MEMORY[0x2426A0EF4](v29, -1, -1);
    }

  }
  return v25 == 0;
}

unint64_t sub_241B7711C()
{
  unint64_t result;

  result = qword_257170098;
  if (!qword_257170098)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_257170098);
  }
  return result;
}

unint64_t sub_241B77158()
{
  unint64_t result;
  unint64_t v1;

  result = qword_2571700A0;
  if (!qword_2571700A0)
  {
    v1 = sub_241B7711C();
    result = MEMORY[0x2426A0EA0](MEMORY[0x24BEE5BD8], v1);
    atomic_store(result, (unint64_t *)&qword_2571700A0);
  }
  return result;
}

BOOL _s19MicroLocationDaemon10ULKeychainC9removeKeyySbSSFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t inited;
  void **v5;
  void *v6;
  void *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  void **v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;
  id v21;
  id v22;
  const __CFDictionary *v23;
  OSStatus v24;
  uint64_t v25;
  NSObject *v26;
  os_log_type_t v27;
  uint64_t v28;
  uint64_t v29;
  CFStringRef v30;
  __CFString *v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v37;

  __swift_instantiateConcreteTypeFromMangledName(&qword_257170090);
  inited = swift_initStackObject();
  v5 = (void **)MEMORY[0x24BDE9220];
  *(_OWORD *)(inited + 16) = xmmword_241BBBB40;
  v6 = *v5;
  *(_QWORD *)(inited + 32) = *v5;
  v7 = (void *)*MEMORY[0x24BDE9248];
  type metadata accessor for CFString();
  *(_QWORD *)(inited + 40) = v7;
  v8 = (void *)*MEMORY[0x24BDE9528];
  *(_QWORD *)(inited + 64) = v9;
  *(_QWORD *)(inited + 72) = v8;
  v10 = MEMORY[0x24BEE1328];
  v11 = (void **)MEMORY[0x24BDE8F60];
  *(_BYTE *)(inited + 80) = 1;
  v12 = *v11;
  *(_QWORD *)(inited + 104) = v10;
  *(_QWORD *)(inited + 112) = v12;
  v13 = (void *)*MEMORY[0x24BDE8F68];
  *(_QWORD *)(inited + 120) = *MEMORY[0x24BDE8F68];
  v14 = (void *)*MEMORY[0x24BDE9140];
  *(_QWORD *)(inited + 144) = v9;
  *(_QWORD *)(inited + 152) = v14;
  *(_BYTE *)(inited + 160) = 1;
  v15 = (void *)*MEMORY[0x24BDE8FB0];
  *(_QWORD *)(inited + 184) = v10;
  *(_QWORD *)(inited + 192) = v15;
  *(_QWORD *)(inited + 224) = MEMORY[0x24BEE0D00];
  *(_QWORD *)(inited + 200) = a1;
  *(_QWORD *)(inited + 208) = a2;
  v16 = v6;
  v17 = v7;
  v18 = v8;
  v19 = v12;
  v20 = v13;
  v21 = v14;
  v22 = v15;
  swift_bridgeObjectRetain();
  sub_241B74F34(inited);
  sub_241B7711C();
  sub_241B77158();
  v23 = (const __CFDictionary *)sub_241B7FE34();
  swift_bridgeObjectRelease();
  v24 = SecItemDelete(v23);

  if (v24)
  {
    if (qword_25716FFE0 != -1)
      swift_once();
    v25 = sub_241B7FD74();
    __swift_project_value_buffer(v25, (uint64_t)qword_257170068);
    v26 = sub_241B7FD5C();
    v27 = sub_241B7FE7C();
    if (os_log_type_enabled(v26, v27))
    {
      v28 = swift_slowAlloc();
      v29 = swift_slowAlloc();
      v37 = v29;
      *(_DWORD *)v28 = 67109378;
      sub_241B7FEA0();
      *(_WORD *)(v28 + 8) = 2080;
      v30 = SecCopyErrorMessageString(v24, 0);
      if (v30)
      {
        v31 = (__CFString *)v30;
        v32 = sub_241B7FE4C();
        v34 = v33;

      }
      else
      {
        v32 = sub_241B7FF30();
        v34 = v35;
      }
      sub_241B759EC(v32, v34, &v37);
      sub_241B7FEA0();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_2419D9000, v26, v27, "Failed to remove key from keychain, error %d, %s", (uint8_t *)v28, 0x12u);
      swift_arrayDestroy();
      MEMORY[0x2426A0EF4](v29, -1, -1);
      MEMORY[0x2426A0EF4](v28, -1, -1);
    }

  }
  return v24 == 0;
}

uint64_t type metadata accessor for ULKeychain()
{
  return objc_opt_self();
}

uint64_t type metadata accessor for ULKeychainMock()
{
  return objc_opt_self();
}

uint64_t sub_241B774FC(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t sub_241B7753C(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

_OWORD *sub_241B77580(_OWORD *a1, _OWORD *a2)
{
  __int128 v2;

  v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return a2;
}

void CLMicroLocationCosineSimilarityLocalizationAlgorithm::localize(char *a1, uint8_t *buf, os_log_t log)
{
  char *v4;

  if (a1[23] >= 0)
    v4 = a1;
  else
    v4 = *(char **)a1;
  *(_QWORD *)buf = 68289795;
  *((_WORD *)buf + 4) = 2082;
  *(_QWORD *)(buf + 10) = "";
  *((_WORD *)buf + 9) = 2082;
  *(_QWORD *)(buf + 20) = v4;
  *((_WORD *)buf + 14) = 2082;
  *(_QWORD *)(buf + 30) = "assert";
  *((_WORD *)buf + 19) = 2081;
  *((_QWORD *)buf + 5) = "model.modelType == CLMicroLocationProto::Model::SIMILARITY_LIST";
  _os_log_impl(&dword_2419D9000, log, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"CosineSimilarityLocalization, model type is not similarity list!\", \"Model Type\":%{public, location:escape_only}s, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x30u);
  if (a1[23] < 0)
    operator delete(*(void **)a1);
}

uint64_t CLMicroLocationCosineSimilarityLocalizationAlgorithm::localize()
{
  NSObject *v0;
  NSObject *v1;
  NSObject *v2;
  uint64_t result;
  uint8_t buf[40];
  uint64_t v5;

  v5 = *MEMORY[0x24BDAC8D0];
  _CLLogObjectForCategory_MicroLocation_Default();
  v0 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v0, OS_LOG_TYPE_FAULT))
  {
    OUTLINED_FUNCTION_0();
    _os_log_impl(&dword_2419D9000, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Cannot localize on invalid model!\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
  }

  _CLLogObjectForCategory_MicroLocation_Default();
  v1 = objc_claimAutoreleasedReturnValue();
  if (os_signpost_enabled(v1))
  {
    OUTLINED_FUNCTION_0();
    _os_signpost_emit_with_name_impl(&dword_2419D9000, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Cannot localize on invalid model!", "{\"msg%{public}.0s\":\"Cannot localize on invalid model!\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
  }

  _CLLogObjectForCategory_MicroLocation_Default();
  v2 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
  {
    OUTLINED_FUNCTION_0();
    _os_log_impl(&dword_2419D9000, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Cannot localize on invalid model!\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
  }

  result = abort_report_np();
  __break(1u);
  return result;
}

void CLMicroLocationLogic::State::clearScanActivity()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  os_log_t v6;
  uint8_t *v7;

  OUTLINED_FUNCTION_1_0();
  OUTLINED_FUNCTION_3_0(1.7165e-36, v1, v2);
  OUTLINED_FUNCTION_2_0(v3, v4);
  *(_QWORD *)(v5 + 30) = "assert";
  *(_WORD *)(v5 + 38) = 2081;
  *(_QWORD *)(v5 + 40) = "false";
  OUTLINED_FUNCTION_0_0(&dword_2419D9000, v5, v6, "{\"msg%{public}.0s\":\"Can't clear current activity as it is already invalid\", \"currentActivity\":%{public, location:escape_only}s, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v7);
  if (*(char *)(v0 + 23) < 0)
    operator delete(*(void **)v0);
}

void CLMicroLocationLogic::onScanActivityCompleted()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  os_log_t v6;
  uint8_t *v7;

  OUTLINED_FUNCTION_1_0();
  OUTLINED_FUNCTION_3_0(1.7165e-36, v1, v2);
  OUTLINED_FUNCTION_2_0(v3, v4);
  *(_QWORD *)(v5 + 30) = "assert";
  *(_WORD *)(v5 + 38) = 2081;
  *(_QWORD *)(v5 + 40) = "false";
  OUTLINED_FUNCTION_0_0(&dword_2419D9000, v5, v6, "{\"msg%{public}.0s\":\"Invalid MiLo current activity\", \"state\":%{public, location:escape_only}s, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v7);
  if (*(char *)(v0 + 23) < 0)
    operator delete(*(void **)v0);
}

void CLMicroLocationModel::SimilarityListData::fromProtobuf(NSObject **a1)
{
  NSObject *v1;
  NSObject *v3;
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  uint8_t v8[40];
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  _CLLogObjectForCategory_MicroLocation_Default();
  v3 = objc_claimAutoreleasedReturnValue();
  if (OUTLINED_FUNCTION_7(v3))
  {
    OUTLINED_FUNCTION_0_1();
    OUTLINED_FUNCTION_5_0(&dword_2419D9000, v1, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"CLMicroLocationSimilarityListData fromProtobuf - number of probabilities should match number of clusters\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v8);
  }

  _CLLogObjectForCategory_MicroLocation_Default();
  v4 = objc_claimAutoreleasedReturnValue();
  if (OUTLINED_FUNCTION_9(v4))
  {
    OUTLINED_FUNCTION_0_1();
    OUTLINED_FUNCTION_3_1(&dword_2419D9000, v1, v5, v6, "CLMicroLocationSimilarityListData fromProtobuf - number of probabilities should match number of clusters", "{\"msg%{public}.0s\":\"CLMicroLocationSimilarityListData fromProtobuf - number of probabilities should match number of clusters\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v8);
  }

  _CLLogObjectForCategory_MicroLocation_Default();
  v7 = objc_claimAutoreleasedReturnValue();
  *a1 = v7;
  if (OUTLINED_FUNCTION_8(v7))
  {
    OUTLINED_FUNCTION_0_1();
    OUTLINED_FUNCTION_5_0(&dword_2419D9000, v7, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"CLMicroLocationSimilarityListData fromProtobuf - number of probabilities should match number of clusters\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v8);
  }
  OUTLINED_FUNCTION_6();
}

uint64_t CLMicroLocationModel::getPredictionClasses()
{
  NSObject *v0;
  NSObject *v1;
  NSObject *v2;
  NSObject *v3;
  uint64_t result;
  uint8_t buf[56];
  uint64_t v6;

  v6 = *MEMORY[0x24BDAC8D0];
  _CLLogObjectForCategory_MicroLocation_Default();
  v1 = objc_claimAutoreleasedReturnValue();
  if (OUTLINED_FUNCTION_7(v1))
  {
    OUTLINED_FUNCTION_1_1();
    _os_log_impl(&dword_2419D9000, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Model get prediction classes unknown model type\", \"modelType\":%{public}d, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x2Cu);
  }

  _CLLogObjectForCategory_MicroLocation_Default();
  v2 = objc_claimAutoreleasedReturnValue();
  if (OUTLINED_FUNCTION_9(v2))
  {
    OUTLINED_FUNCTION_1_1();
    _os_signpost_emit_with_name_impl(&dword_2419D9000, v0, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Model get prediction classes unknown model type", "{\"msg%{public}.0s\":\"Model get prediction classes unknown model type\", \"modelType\":%{public}d, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x2Cu);
  }

  _CLLogObjectForCategory_MicroLocation_Default();
  v3 = objc_claimAutoreleasedReturnValue();
  if (OUTLINED_FUNCTION_8(v3))
  {
    OUTLINED_FUNCTION_1_1();
    _os_log_impl(&dword_2419D9000, v3, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Model get prediction classes unknown model type\", \"modelType\":%{public}d, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x2Cu);
  }

  result = abort_report_np();
  __break(1u);
  return result;
}

uint64_t CLMicroLocationModel::mapIdentifiers()
{
  NSObject *v0;
  NSObject *v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  uint64_t result;
  uint8_t v6[40];
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  _CLLogObjectForCategory_MicroLocation_Default();
  v0 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v0, OS_LOG_TYPE_FAULT))
  {
    OUTLINED_FUNCTION_0();
    OUTLINED_FUNCTION_5_0(&dword_2419D9000, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"mapped cluster identifer already exists\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v6);
  }

  _CLLogObjectForCategory_MicroLocation_Default();
  v1 = objc_claimAutoreleasedReturnValue();
  if (os_signpost_enabled(v1))
  {
    OUTLINED_FUNCTION_0();
    OUTLINED_FUNCTION_3_1(&dword_2419D9000, v1, v2, v3, "mapped cluster identifer already exists", "{\"msg%{public}.0s\":\"mapped cluster identifer already exists\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v6);
  }

  _CLLogObjectForCategory_MicroLocation_Default();
  v4 = objc_claimAutoreleasedReturnValue();
  if (OUTLINED_FUNCTION_8(v4))
  {
    OUTLINED_FUNCTION_0();
    OUTLINED_FUNCTION_5_0(&dword_2419D9000, v4, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"mapped cluster identifer already exists\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v6);
  }

  result = abort_report_np();
  __break(1u);
  return result;
}

void CLMicroLocationModel::SimilarityListData::calculateNormalizedProbabilitiesWithoutNullCluster(NSObject **a1)
{
  NSObject *v1;
  NSObject *v3;
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  uint8_t v8[40];
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  _CLLogObjectForCategory_MicroLocation_Default();
  v3 = objc_claimAutoreleasedReturnValue();
  if (OUTLINED_FUNCTION_7(v3))
  {
    OUTLINED_FUNCTION_0_1();
    OUTLINED_FUNCTION_5_0(&dword_2419D9000, v1, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Similarity List Model Learning, Localizer must not return empty results\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v8);
  }

  _CLLogObjectForCategory_MicroLocation_Default();
  v4 = objc_claimAutoreleasedReturnValue();
  if (OUTLINED_FUNCTION_9(v4))
  {
    OUTLINED_FUNCTION_0_1();
    OUTLINED_FUNCTION_3_1(&dword_2419D9000, v1, v5, v6, "Similarity List Model Learning, Localizer must not return empty results", "{\"msg%{public}.0s\":\"Similarity List Model Learning, Localizer must not return empty results\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v8);
  }

  _CLLogObjectForCategory_MicroLocation_Default();
  v7 = objc_claimAutoreleasedReturnValue();
  *a1 = v7;
  if (OUTLINED_FUNCTION_8(v7))
  {
    OUTLINED_FUNCTION_0_1();
    OUTLINED_FUNCTION_5_0(&dword_2419D9000, v7, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Similarity List Model Learning, Localizer must not return empty results\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v8);
  }
  OUTLINED_FUNCTION_6();
}

uint64_t std::__optional_move_base<CLMicroLocationUtils::ProbabilityMatrix,false>::__optional_move_base[abi:ne180100](uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  *a1 = 0;
  if (result)
    OUTLINED_FUNCTION_4_0();
  return result;
}

#error "241B780A0: call analysis failed (funcsize=58)"

#error "241B781B8: call analysis failed (funcsize=58)"

#error "241B782D0: call analysis failed (funcsize=58)"

#error "241B783E8: call analysis failed (funcsize=58)"

#error "241B78500: call analysis failed (funcsize=58)"

#error "241B78618: call analysis failed (funcsize=58)"

uint64_t CLMicroLocationSensorsDriver::recordingDuration()
{
  void *v0;
  NSObject *v1;
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  NSObject *v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  NSObject *v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  uint64_t result;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint8_t v26;

  _CLLogObjectForCategory_MicroLocation_Default();
  v1 = objc_claimAutoreleasedReturnValue();
  if (OUTLINED_FUNCTION_5(v1))
  {
    OUTLINED_FUNCTION_0();
    OUTLINED_FUNCTION_3(&dword_2419D9000, v2, v3, "{\"msg%{public}.0s\":\"Should not be starting a recording in this state: NotSet\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v4, v5, v6, v7, v22, v23, v24, v25, v26);
  }

  _CLLogObjectForCategory_MicroLocation_Default();
  v8 = objc_claimAutoreleasedReturnValue();
  if (OUTLINED_FUNCTION_6_0(v8))
  {
    OUTLINED_FUNCTION_0();
    OUTLINED_FUNCTION_1(&dword_2419D9000, v9, v10, v11, "Should not be starting a recording in this state: NotSet", "{\"msg%{public}.0s\":\"Should not be starting a recording in this state: NotSet\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v12, v13, v22, v23, v24, v25, v26);
  }

  _CLLogObjectForCategory_MicroLocation_Default();
  v14 = objc_claimAutoreleasedReturnValue();
  if (OUTLINED_FUNCTION_4(v14))
  {
    OUTLINED_FUNCTION_0();
    OUTLINED_FUNCTION_2(&dword_2419D9000, v15, v16, "{\"msg%{public}.0s\":\"Should not be starting a recording in this state: NotSet\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v17, v18, v19, v20, v22, v23, v24, v25, v26);
  }

  result = abort_report_np();
  __break(1u);
  return result;
}

uint64_t CLMicroLocationSensorsDriver::cancelWifiScan()
{
  void *v0;
  NSObject *v1;
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  NSObject *v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  NSObject *v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  uint64_t result;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint8_t v26;

  _CLLogObjectForCategory_MicroLocation_Default();
  v1 = objc_claimAutoreleasedReturnValue();
  if (OUTLINED_FUNCTION_5(v1))
  {
    OUTLINED_FUNCTION_0();
    OUTLINED_FUNCTION_3(&dword_2419D9000, v2, v3, "{\"msg%{public}.0s\":\"SensorsDriver, received cancel wifi scan when current scan activity is not set\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v4, v5, v6, v7, v22, v23, v24, v25, v26);
  }

  _CLLogObjectForCategory_MicroLocation_Default();
  v8 = objc_claimAutoreleasedReturnValue();
  if (OUTLINED_FUNCTION_6_0(v8))
  {
    OUTLINED_FUNCTION_0();
    OUTLINED_FUNCTION_1(&dword_2419D9000, v9, v10, v11, "SensorsDriver, received cancel wifi scan when current scan activity is not set", "{\"msg%{public}.0s\":\"SensorsDriver, received cancel wifi scan when current scan activity is not set\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v12, v13, v22, v23, v24, v25, v26);
  }

  _CLLogObjectForCategory_MicroLocation_Default();
  v14 = objc_claimAutoreleasedReturnValue();
  if (OUTLINED_FUNCTION_4(v14))
  {
    OUTLINED_FUNCTION_0();
    OUTLINED_FUNCTION_2(&dword_2419D9000, v15, v16, "{\"msg%{public}.0s\":\"SensorsDriver, received cancel wifi scan when current scan activity is not set\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v17, v18, v19, v20, v22, v23, v24, v25, v26);
  }

  result = abort_report_np();
  __break(1u);
  return result;
}

uint64_t CLMicroLocationSensorsDriver::startBleRssiSession()
{
  void *v0;
  NSObject *v1;
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  NSObject *v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  NSObject *v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint8_t v27;

  _CLLogObjectForCategory_MicroLocation_Default();
  v1 = objc_claimAutoreleasedReturnValue();
  if (OUTLINED_FUNCTION_5(v1))
  {
    OUTLINED_FUNCTION_0();
    OUTLINED_FUNCTION_3(&dword_2419D9000, v2, v3, "{\"msg%{public}.0s\":\"SensorsDriver, received a BLE scan request but current scan activity is set\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v4, v5, v6, v7, v23, v24, v25, v26, v27);
  }

  _CLLogObjectForCategory_MicroLocation_Default();
  v8 = objc_claimAutoreleasedReturnValue();
  if (OUTLINED_FUNCTION_6_0(v8))
  {
    OUTLINED_FUNCTION_0();
    OUTLINED_FUNCTION_1(&dword_2419D9000, v9, v10, v11, "SensorsDriver, received a BLE scan request but current scan activity is set", "{\"msg%{public}.0s\":\"SensorsDriver, received a BLE scan request but current scan activity is set\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v12, v13, v23, v24, v25, v26, v27);
  }

  _CLLogObjectForCategory_MicroLocation_Default();
  v14 = objc_claimAutoreleasedReturnValue();
  if (OUTLINED_FUNCTION_4(v14))
  {
    OUTLINED_FUNCTION_0();
    OUTLINED_FUNCTION_2(&dword_2419D9000, v15, v16, "{\"msg%{public}.0s\":\"SensorsDriver, received a BLE scan request but current scan activity is set\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v17, v18, v19, v20, v23, v24, v25, v26, v27);
  }

  v21 = abort_report_np();
  return CLMicroLocationFingerprintDistanceFunction::weightedEuclideanJaccardDistance(v21);
}

void CLMicroLocationFingerprintDistanceFunction::weightedEuclideanJaccardDistance()
{
  NSObject *v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  NSObject *v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  NSObject *v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint8_t v24;

  _CLLogObjectForCategory_MicroLocation_Default();
  v0 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v0, OS_LOG_TYPE_FAULT))
  {
    OUTLINED_FUNCTION_0();
    OUTLINED_FUNCTION_3(&dword_2419D9000, v1, v2, "{\"msg%{public}.0s\":\"configured e2jKernelThr illegal value\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v3, v4, v5, v6, v20, v21, v22, v23, v24);
  }

  _CLLogObjectForCategory_MicroLocation_Default();
  v7 = objc_claimAutoreleasedReturnValue();
  if (os_signpost_enabled(v7))
  {
    OUTLINED_FUNCTION_0();
    OUTLINED_FUNCTION_1(&dword_2419D9000, v8, v9, v10, "configured e2jKernelThr illegal value", "{\"msg%{public}.0s\":\"configured e2jKernelThr illegal value\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v11, v12, v20, v21, v22, v23, v24);
  }

  _CLLogObjectForCategory_MicroLocation_Default();
  v13 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
  {
    OUTLINED_FUNCTION_0();
    OUTLINED_FUNCTION_2(&dword_2419D9000, v14, v15, "{\"msg%{public}.0s\":\"configured e2jKernelThr illegal value\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v16, v17, v18, v19, v20, v21, v22, v23, v24);
  }

  abort_report_np();
  CLMicroLocationFingerprintDistanceFunction::computeWeightedEuclideanComponentsAndNumItersect();
}

void CLMicroLocationFingerprintDistanceFunction::computeWeightedEuclideanComponentsAndNumItersect()
{
  int v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  const char *v17;
  uint64_t v18;
  const char *v19;
  uint64_t v20;
  uint8_t v21;

  if (onceToken_MicroLocation_Default != -1)
    goto LABEL_13;
  while (1)
  {
    if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_FAULT))
    {
      OUTLINED_FUNCTION_0();
      OUTLINED_FUNCTION_3(&dword_2419D9000, v0, v1, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v2, v3, v4, v5, (uint64_t)v17, v18, (uint64_t)v19, v20, v21);
    }
    if (onceToken_MicroLocation_Default != -1)
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_10);
    if (os_signpost_enabled((os_log_t)logObject_MicroLocation_Default))
    {
      OUTLINED_FUNCTION_0();
      OUTLINED_FUNCTION_1(&dword_2419D9000, v6, v7, v8, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v9, v10, (uint64_t)v17, v18, (uint64_t)v19, v20, v21);
    }
    if (onceToken_MicroLocation_Default != -1)
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_10);
    if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_INFO))
    {
      OUTLINED_FUNCTION_0();
      OUTLINED_FUNCTION_2(&dword_2419D9000, v11, v12, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v13, v14, v15, v16, (uint64_t)v17, v18, (uint64_t)v19, v20, v21);
    }
    v18 = 16;
    v19 = "computeDifference";
    v17 = "/Library/Caches/com.apple.xbs/Sources/MicroLocation/MicroLocationLogic/CLMicroLocationFingerprintDistanceFunction.mm";
    abort_report_np();
LABEL_13:
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_10);
  }
}

uint64_t CLMicroLocationNullSpaceAlgorithm::localize()
{
  void *v0;
  NSObject *v1;
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  NSObject *v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  NSObject *v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  uint64_t result;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint8_t v26;

  _CLLogObjectForCategory_MicroLocation_Default();
  v1 = objc_claimAutoreleasedReturnValue();
  if (OUTLINED_FUNCTION_5(v1))
  {
    OUTLINED_FUNCTION_0();
    OUTLINED_FUNCTION_3(&dword_2419D9000, v2, v3, "{\"msg%{public}.0s\":\"must have fingerprints distance function\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v4, v5, v6, v7, v22, v23, v24, v25, v26);
  }

  _CLLogObjectForCategory_MicroLocation_Default();
  v8 = objc_claimAutoreleasedReturnValue();
  if (OUTLINED_FUNCTION_6_0(v8))
  {
    OUTLINED_FUNCTION_0();
    OUTLINED_FUNCTION_1(&dword_2419D9000, v9, v10, v11, "must have fingerprints distance function", "{\"msg%{public}.0s\":\"must have fingerprints distance function\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v12, v13, v22, v23, v24, v25, v26);
  }

  _CLLogObjectForCategory_MicroLocation_Default();
  v14 = objc_claimAutoreleasedReturnValue();
  if (OUTLINED_FUNCTION_4(v14))
  {
    OUTLINED_FUNCTION_0();
    OUTLINED_FUNCTION_2(&dword_2419D9000, v15, v16, "{\"msg%{public}.0s\":\"must have fingerprints distance function\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v17, v18, v19, v20, v22, v23, v24, v25, v26);
  }

  result = abort_report_np();
  __break(1u);
  return result;
}

{
  void *v0;
  NSObject *v1;
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  NSObject *v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  NSObject *v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  uint64_t result;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint8_t v26;

  _CLLogObjectForCategory_MicroLocation_Default();
  v1 = objc_claimAutoreleasedReturnValue();
  if (OUTLINED_FUNCTION_5(v1))
  {
    OUTLINED_FUNCTION_0();
    OUTLINED_FUNCTION_3(&dword_2419D9000, v2, v3, "{\"msg%{public}.0s\":\"Cannot localize on invalid model!\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v4, v5, v6, v7, v22, v23, v24, v25, v26);
  }

  _CLLogObjectForCategory_MicroLocation_Default();
  v8 = objc_claimAutoreleasedReturnValue();
  if (OUTLINED_FUNCTION_6_0(v8))
  {
    OUTLINED_FUNCTION_0();
    OUTLINED_FUNCTION_1(&dword_2419D9000, v9, v10, v11, "Cannot localize on invalid model!", "{\"msg%{public}.0s\":\"Cannot localize on invalid model!\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v12, v13, v22, v23, v24, v25, v26);
  }

  _CLLogObjectForCategory_MicroLocation_Default();
  v14 = objc_claimAutoreleasedReturnValue();
  if (OUTLINED_FUNCTION_4(v14))
  {
    OUTLINED_FUNCTION_0();
    OUTLINED_FUNCTION_2(&dword_2419D9000, v15, v16, "{\"msg%{public}.0s\":\"Cannot localize on invalid model!\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v17, v18, v19, v20, v22, v23, v24, v25, v26);
  }

  result = abort_report_np();
  __break(1u);
  return result;
}

uint64_t CLMicroLocationAlgorithms::createReducerFunction<std::multiset<double>,double>()
{
  NSObject *v0;
  NSObject *v1;
  NSObject *v2;
  uint64_t result;
  uint8_t buf[56];
  uint64_t v5;

  v5 = *MEMORY[0x24BDAC8D0];
  _CLLogObjectForCategory_MicroLocation_Default();
  v0 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v0, OS_LOG_TYPE_FAULT))
  {
    OUTLINED_FUNCTION_2_1();
    _os_log_impl(&dword_2419D9000, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Invalid type chosen\", \"enum value\":%{public}u, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x2Cu);
  }

  _CLLogObjectForCategory_MicroLocation_Default();
  v1 = objc_claimAutoreleasedReturnValue();
  if (os_signpost_enabled(v1))
  {
    OUTLINED_FUNCTION_2_1();
    _os_signpost_emit_with_name_impl(&dword_2419D9000, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Invalid type chosen", "{\"msg%{public}.0s\":\"Invalid type chosen\", \"enum value\":%{public}u, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x2Cu);
  }

  _CLLogObjectForCategory_MicroLocation_Default();
  v2 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
  {
    OUTLINED_FUNCTION_2_1();
    _os_log_impl(&dword_2419D9000, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Invalid type chosen\", \"enum value\":%{public}u, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x2Cu);
  }

  result = abort_report_np();
  __break(1u);
  return result;
}

{
  void *v0;
  NSObject *v1;
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  NSObject *v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  NSObject *v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  uint64_t result;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint8_t v26;

  _CLLogObjectForCategory_MicroLocation_Default();
  v1 = objc_claimAutoreleasedReturnValue();
  if (OUTLINED_FUNCTION_5(v1))
  {
    OUTLINED_FUNCTION_0();
    OUTLINED_FUNCTION_3(&dword_2419D9000, v2, v3, "{\"msg%{public}.0s\":\"Unsupported reducer function\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v4, v5, v6, v7, v22, v23, v24, v25, v26);
  }

  _CLLogObjectForCategory_MicroLocation_Default();
  v8 = objc_claimAutoreleasedReturnValue();
  if (OUTLINED_FUNCTION_6_0(v8))
  {
    OUTLINED_FUNCTION_0();
    OUTLINED_FUNCTION_1(&dword_2419D9000, v9, v10, v11, "Unsupported reducer function", "{\"msg%{public}.0s\":\"Unsupported reducer function\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v12, v13, v22, v23, v24, v25, v26);
  }

  _CLLogObjectForCategory_MicroLocation_Default();
  v14 = objc_claimAutoreleasedReturnValue();
  if (OUTLINED_FUNCTION_4(v14))
  {
    OUTLINED_FUNCTION_0();
    OUTLINED_FUNCTION_2(&dword_2419D9000, v15, v16, "{\"msg%{public}.0s\":\"Unsupported reducer function\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v17, v18, v19, v20, v22, v23, v24, v25, v26);
  }

  result = abort_report_np();
  __break(1u);
  return result;
}

{
  void *v0;
  NSObject *v1;
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  NSObject *v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  NSObject *v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  uint64_t result;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint8_t v26;

  _CLLogObjectForCategory_MicroLocation_Default();
  v1 = objc_claimAutoreleasedReturnValue();
  if (OUTLINED_FUNCTION_5(v1))
  {
    OUTLINED_FUNCTION_0();
    OUTLINED_FUNCTION_3(&dword_2419D9000, v2, v3, "{\"msg%{public}.0s\":\"Unsupported reducer function\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v4, v5, v6, v7, v22, v23, v24, v25, v26);
  }

  _CLLogObjectForCategory_MicroLocation_Default();
  v8 = objc_claimAutoreleasedReturnValue();
  if (OUTLINED_FUNCTION_6_0(v8))
  {
    OUTLINED_FUNCTION_0();
    OUTLINED_FUNCTION_1(&dword_2419D9000, v9, v10, v11, "Unsupported reducer function", "{\"msg%{public}.0s\":\"Unsupported reducer function\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v12, v13, v22, v23, v24, v25, v26);
  }

  _CLLogObjectForCategory_MicroLocation_Default();
  v14 = objc_claimAutoreleasedReturnValue();
  if (OUTLINED_FUNCTION_4(v14))
  {
    OUTLINED_FUNCTION_0();
    OUTLINED_FUNCTION_2(&dword_2419D9000, v15, v16, "{\"msg%{public}.0s\":\"Unsupported reducer function\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v17, v18, v19, v20, v22, v23, v24, v25, v26);
  }

  result = abort_report_np();
  __break(1u);
  return result;
}

{
  void *v0;
  NSObject *v1;
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  NSObject *v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  NSObject *v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  uint64_t result;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint8_t v26;

  _CLLogObjectForCategory_MicroLocation_Default();
  v1 = objc_claimAutoreleasedReturnValue();
  if (OUTLINED_FUNCTION_5(v1))
  {
    OUTLINED_FUNCTION_0();
    OUTLINED_FUNCTION_3(&dword_2419D9000, v2, v3, "{\"msg%{public}.0s\":\"Unsupported reducer function\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v4, v5, v6, v7, v22, v23, v24, v25, v26);
  }

  _CLLogObjectForCategory_MicroLocation_Default();
  v8 = objc_claimAutoreleasedReturnValue();
  if (OUTLINED_FUNCTION_6_0(v8))
  {
    OUTLINED_FUNCTION_0();
    OUTLINED_FUNCTION_1(&dword_2419D9000, v9, v10, v11, "Unsupported reducer function", "{\"msg%{public}.0s\":\"Unsupported reducer function\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v12, v13, v22, v23, v24, v25, v26);
  }

  _CLLogObjectForCategory_MicroLocation_Default();
  v14 = objc_claimAutoreleasedReturnValue();
  if (OUTLINED_FUNCTION_4(v14))
  {
    OUTLINED_FUNCTION_0();
    OUTLINED_FUNCTION_2(&dword_2419D9000, v15, v16, "{\"msg%{public}.0s\":\"Unsupported reducer function\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v17, v18, v19, v20, v22, v23, v24, v25, v26);
  }

  result = abort_report_np();
  __break(1u);
  return result;
}

void CLReducerFunction<std::multiset<double>,double>::minimumValueSorted()
{
  __assert_rtn("minimumValueSorted", "CLReducerFunction.h", 38, "container.size()>0");
}

void CLReducerFunction<std::multiset<double>,double>::minimumValue()
{
  __assert_rtn("minimumValue", "CLReducerFunction.h", 27, "container.size()>0");
}

void CLReducerFunction<std::multiset<double>,double>::meanValue()
{
  __assert_rtn("meanValue", "CLReducerFunction.h", 22, "container.size()>0");
}

void CLReducerFunction<std::multiset<double>,double>::maximumValueSorted()
{
  __assert_rtn("maximumValueSorted", "CLReducerFunction.h", 43, "container.size()>0");
}

void CLReducerFunction<std::multiset<double>,double>::maximumValue()
{
  __assert_rtn("maximumValue", "CLReducerFunction.h", 32, "container.size()>0");
}

void CLReducerFunction<std::multiset<double>,double>::firstQuartileValueSorted()
{
  __assert_rtn("firstQuartileValueSorted", "CLReducerFunction.h", 48, "container.size()>0");
}

void CLReducerFunction<std::multiset<double>,double>::medianValueSorted()
{
  __assert_rtn("medianValueSorted", "CLReducerFunction.h", 54, "container.size()>0");
}

void CLReducerFunction<std::multiset<double>,double>::parameterizedTruncatedMeanValueSorted()
{
  __assert_rtn("parameterizedTruncatedMeanValueSorted", "CLReducerFunction.h", 60, "container.size()>0");
}

{
  __assert_rtn("parameterizedTruncatedMeanValueSorted", "CLReducerFunction.h", 61, "minPercentile >= 0 && minPercentile <= 1 && maxPercentile >= minPercentile && maxPercentile <= 1");
}

{
  __assert_rtn("parameterizedTruncatedMeanValueSorted", "CLReducerFunction.h", 65, "numElements>0");
}

void std::__optional_copy_base<std::string,false>::__optional_copy_base[abi:ne180100](uint64_t a1)
{
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

void CLHierarchicalClustering::CLHierarchicalClustering(NSObject **a1)
{
  NSObject *v2;
  NSObject *v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  uint8_t v7[40];
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  _CLLogObjectForCategory_MicroLocation_Default();
  v2 = objc_claimAutoreleasedReturnValue();
  if (OUTLINED_FUNCTION_4_1(v2))
  {
    OUTLINED_FUNCTION_0_1();
    OUTLINED_FUNCTION_5_0(&dword_2419D9000, v2, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"min_dist should not be infinity\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v7);
  }

  _CLLogObjectForCategory_MicroLocation_Default();
  v3 = objc_claimAutoreleasedReturnValue();
  if (os_signpost_enabled(v3))
  {
    OUTLINED_FUNCTION_0_1();
    OUTLINED_FUNCTION_3_1(&dword_2419D9000, v3, v4, v5, "min_dist should not be infinity", "{\"msg%{public}.0s\":\"min_dist should not be infinity\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v7);
  }

  _CLLogObjectForCategory_MicroLocation_Default();
  v6 = objc_claimAutoreleasedReturnValue();
  *a1 = v6;
  if (OUTLINED_FUNCTION_8(v6))
  {
    OUTLINED_FUNCTION_0_1();
    OUTLINED_FUNCTION_5_0(&dword_2419D9000, v6, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"min_dist should not be infinity\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v7);
  }
}

uint64_t CLHierarchicalClustering::getClusterLabels()
{
  NSObject *v0;
  NSObject *v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  uint64_t result;
  uint8_t v6[40];
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  _CLLogObjectForCategory_MicroLocation_Default();
  v0 = objc_claimAutoreleasedReturnValue();
  if (OUTLINED_FUNCTION_4_1(v0))
  {
    OUTLINED_FUNCTION_0();
    OUTLINED_FUNCTION_5_0(&dword_2419D9000, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"distanceThresholdVector must not be empty\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v6);
  }

  _CLLogObjectForCategory_MicroLocation_Default();
  v1 = objc_claimAutoreleasedReturnValue();
  if (os_signpost_enabled(v1))
  {
    OUTLINED_FUNCTION_0();
    OUTLINED_FUNCTION_3_1(&dword_2419D9000, v1, v2, v3, "distanceThresholdVector must not be empty", "{\"msg%{public}.0s\":\"distanceThresholdVector must not be empty\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v6);
  }

  _CLLogObjectForCategory_MicroLocation_Default();
  v4 = objc_claimAutoreleasedReturnValue();
  if (OUTLINED_FUNCTION_8(v4))
  {
    OUTLINED_FUNCTION_0();
    OUTLINED_FUNCTION_5_0(&dword_2419D9000, v4, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"distanceThresholdVector must not be empty\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v6);
  }

  result = abort_report_np();
  __break(1u);
  return result;
}

{
  NSObject *v0;
  NSObject *v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  uint64_t result;
  uint8_t v6[40];
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  _CLLogObjectForCategory_MicroLocation_Default();
  v0 = objc_claimAutoreleasedReturnValue();
  if (OUTLINED_FUNCTION_4_1(v0))
  {
    OUTLINED_FUNCTION_0();
    OUTLINED_FUNCTION_5_0(&dword_2419D9000, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"minNumCluster must be greater than zero\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v6);
  }

  _CLLogObjectForCategory_MicroLocation_Default();
  v1 = objc_claimAutoreleasedReturnValue();
  if (os_signpost_enabled(v1))
  {
    OUTLINED_FUNCTION_0();
    OUTLINED_FUNCTION_3_1(&dword_2419D9000, v1, v2, v3, "minNumCluster must be greater than zero", "{\"msg%{public}.0s\":\"minNumCluster must be greater than zero\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v6);
  }

  _CLLogObjectForCategory_MicroLocation_Default();
  v4 = objc_claimAutoreleasedReturnValue();
  if (OUTLINED_FUNCTION_8(v4))
  {
    OUTLINED_FUNCTION_0();
    OUTLINED_FUNCTION_5_0(&dword_2419D9000, v4, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"minNumCluster must be greater than zero\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v6);
  }

  result = abort_report_np();
  __break(1u);
  return result;
}

uint64_t CLMicroLocationAlgorithms::createLearner()
{
  void *v0;
  NSObject *v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint8_t v12[56];
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  _CLLogObjectForCategory_MicroLocation_Default();
  v1 = objc_claimAutoreleasedReturnValue();
  if (OUTLINED_FUNCTION_7(v1))
  {
    OUTLINED_FUNCTION_2_1();
    OUTLINED_FUNCTION_5_1(&dword_2419D9000, v2, v3, "{\"msg%{public}.0s\":\"Invalid algorithm chosen\", \"enum value\":%{public}u, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v12);
  }

  _CLLogObjectForCategory_MicroLocation_Default();
  v4 = objc_claimAutoreleasedReturnValue();
  if (OUTLINED_FUNCTION_9(v4))
  {
    OUTLINED_FUNCTION_2_1();
    OUTLINED_FUNCTION_3_2(&dword_2419D9000, v5, v6, v7, "Invalid algorithm chosen", "{\"msg%{public}.0s\":\"Invalid algorithm chosen\", \"enum value\":%{public}u, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v12);
  }

  _CLLogObjectForCategory_MicroLocation_Default();
  v8 = objc_claimAutoreleasedReturnValue();
  if (OUTLINED_FUNCTION_8(v8))
  {
    OUTLINED_FUNCTION_2_1();
    OUTLINED_FUNCTION_6_1(&dword_2419D9000, v9, v10, "{\"msg%{public}.0s\":\"Invalid algorithm chosen\", \"enum value\":%{public}u, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v12);
  }

  result = abort_report_np();
  __break(1u);
  return result;
}

uint64_t CLMicroLocationAlgorithms::createLocalizerAlgorithm()
{
  void *v0;
  NSObject *v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint8_t v12[56];
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  _CLLogObjectForCategory_MicroLocation_Default();
  v1 = objc_claimAutoreleasedReturnValue();
  if (OUTLINED_FUNCTION_7(v1))
  {
    OUTLINED_FUNCTION_2_1();
    OUTLINED_FUNCTION_5_1(&dword_2419D9000, v2, v3, "{\"msg%{public}.0s\":\"Invalid algorithm chosen\", \"enum value\":%{public}u, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v12);
  }

  _CLLogObjectForCategory_MicroLocation_Default();
  v4 = objc_claimAutoreleasedReturnValue();
  if (OUTLINED_FUNCTION_9(v4))
  {
    OUTLINED_FUNCTION_2_1();
    OUTLINED_FUNCTION_3_2(&dword_2419D9000, v5, v6, v7, "Invalid algorithm chosen", "{\"msg%{public}.0s\":\"Invalid algorithm chosen\", \"enum value\":%{public}u, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v12);
  }

  _CLLogObjectForCategory_MicroLocation_Default();
  v8 = objc_claimAutoreleasedReturnValue();
  if (OUTLINED_FUNCTION_8(v8))
  {
    OUTLINED_FUNCTION_2_1();
    OUTLINED_FUNCTION_6_1(&dword_2419D9000, v9, v10, "{\"msg%{public}.0s\":\"Invalid algorithm chosen\", \"enum value\":%{public}u, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v12);
  }

  result = abort_report_np();
  __break(1u);
  return result;
}

void CLMicroLocationAlgorithms::createKernelFunction(uint64_t a1, uint64_t a2, NSObject *a3)
{
  *(_QWORD *)a1 = 68289795;
  *(_WORD *)(a1 + 8) = 2082;
  *(_QWORD *)(a1 + 10) = "";
  *(_WORD *)(a1 + 18) = 2050;
  *(_QWORD *)(a1 + 20) = a2;
  *(_WORD *)(a1 + 28) = 2082;
  *(_QWORD *)(a1 + 30) = "assert";
  *(_WORD *)(a1 + 38) = 2081;
  *(_QWORD *)(a1 + 40) = "primitiveType.unsignedLongValue < static_cast<uint32_t>(KernelFunctionType::kTypeCount)";
  OUTLINED_FUNCTION_0_0(&dword_2419D9000, a2, a3, "{\"msg%{public}.0s\":\"Invalid algorithm chosen\", \"enum value\":%{public}lu, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", (uint8_t *)a1);
}

void CLMicroLocationAlgorithms::details::createFingerprintDistanceFunction()
{
  void *v0;
  NSObject *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint8_t v21;

  _CLLogObjectForCategory_MicroLocation_Default();
  v1 = objc_claimAutoreleasedReturnValue();
  if (OUTLINED_FUNCTION_7(v1))
  {
    OUTLINED_FUNCTION_0_1();
    OUTLINED_FUNCTION_12(&dword_2419D9000, v2, v3, "{\"msg%{public}.0s\":\"Couldn't find key: onesided_jaccard\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v4, v5, v6, v7, v21);
  }

  _CLLogObjectForCategory_MicroLocation_Default();
  v8 = objc_claimAutoreleasedReturnValue();
  if (OUTLINED_FUNCTION_9(v8))
  {
    OUTLINED_FUNCTION_0_1();
    OUTLINED_FUNCTION_7_1(&dword_2419D9000, v9, v10, v11, "Couldn't find key: onesided_jaccard", "{\"msg%{public}.0s\":\"Couldn't find key: onesided_jaccard\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v12, v13, v21);
  }

  _CLLogObjectForCategory_MicroLocation_Default();
  v14 = objc_claimAutoreleasedReturnValue();
  if (OUTLINED_FUNCTION_8_0(v14))
  {
    OUTLINED_FUNCTION_0_1();
    OUTLINED_FUNCTION_13(&dword_2419D9000, v15, v16, "{\"msg%{public}.0s\":\"Couldn't find key: onesided_jaccard\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v17, v18, v19, v20, v21);
  }
  OUTLINED_FUNCTION_6();
}

{
  void *v0;
  NSObject *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint8_t v21;

  _CLLogObjectForCategory_MicroLocation_Default();
  v1 = objc_claimAutoreleasedReturnValue();
  if (OUTLINED_FUNCTION_7(v1))
  {
    OUTLINED_FUNCTION_0_1();
    OUTLINED_FUNCTION_12(&dword_2419D9000, v2, v3, "{\"msg%{public}.0s\":\"No tanimoto_base provided in dictionary\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v4, v5, v6, v7, v21);
  }

  _CLLogObjectForCategory_MicroLocation_Default();
  v8 = objc_claimAutoreleasedReturnValue();
  if (OUTLINED_FUNCTION_9(v8))
  {
    OUTLINED_FUNCTION_0_1();
    OUTLINED_FUNCTION_7_1(&dword_2419D9000, v9, v10, v11, "No tanimoto_base provided in dictionary", "{\"msg%{public}.0s\":\"No tanimoto_base provided in dictionary\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v12, v13, v21);
  }

  _CLLogObjectForCategory_MicroLocation_Default();
  v14 = objc_claimAutoreleasedReturnValue();
  if (OUTLINED_FUNCTION_8_0(v14))
  {
    OUTLINED_FUNCTION_0_1();
    OUTLINED_FUNCTION_13(&dword_2419D9000, v15, v16, "{\"msg%{public}.0s\":\"No tanimoto_base provided in dictionary\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v17, v18, v19, v20, v21);
  }
  OUTLINED_FUNCTION_6();
}

{
  void *v0;
  NSObject *v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  uint64_t v9;
  uint64_t v10;
  uint8_t v11[56];
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  _CLLogObjectForCategory_MicroLocation_Default();
  v1 = objc_claimAutoreleasedReturnValue();
  if (OUTLINED_FUNCTION_7(v1))
  {
    OUTLINED_FUNCTION_2_2();
    OUTLINED_FUNCTION_5_1(&dword_2419D9000, v2, v3, "{\"msg%{public}.0s\":\"fingerprint distance type not supported\", \"type\":%{public}u, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v11);
  }

  _CLLogObjectForCategory_MicroLocation_Default();
  v4 = objc_claimAutoreleasedReturnValue();
  if (OUTLINED_FUNCTION_9(v4))
  {
    OUTLINED_FUNCTION_2_2();
    OUTLINED_FUNCTION_3_2(&dword_2419D9000, v5, v6, v7, "fingerprint distance type not supported", "{\"msg%{public}.0s\":\"fingerprint distance type not supported\", \"type\":%{public}u, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v11);
  }

  _CLLogObjectForCategory_MicroLocation_Default();
  v8 = objc_claimAutoreleasedReturnValue();
  if (OUTLINED_FUNCTION_8_0(v8))
  {
    OUTLINED_FUNCTION_2_2();
    OUTLINED_FUNCTION_6_1(&dword_2419D9000, v9, v10, "{\"msg%{public}.0s\":\"fingerprint distance type not supported\", \"type\":%{public}u, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v11);
  }
}

uint64_t CLMicroLocationAlgorithms::createLinkageFunction()
{
  void *v0;
  NSObject *v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint8_t v12[56];
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  _CLLogObjectForCategory_MicroLocation_Default();
  v1 = objc_claimAutoreleasedReturnValue();
  if (OUTLINED_FUNCTION_7(v1))
  {
    OUTLINED_FUNCTION_2_1();
    OUTLINED_FUNCTION_5_1(&dword_2419D9000, v2, v3, "{\"msg%{public}.0s\":\"Invalid type chosen\", \"enum value\":%{public}u, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v12);
  }

  _CLLogObjectForCategory_MicroLocation_Default();
  v4 = objc_claimAutoreleasedReturnValue();
  if (OUTLINED_FUNCTION_9(v4))
  {
    OUTLINED_FUNCTION_2_1();
    OUTLINED_FUNCTION_3_2(&dword_2419D9000, v5, v6, v7, "Invalid type chosen", "{\"msg%{public}.0s\":\"Invalid type chosen\", \"enum value\":%{public}u, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v12);
  }

  _CLLogObjectForCategory_MicroLocation_Default();
  v8 = objc_claimAutoreleasedReturnValue();
  if (OUTLINED_FUNCTION_8(v8))
  {
    OUTLINED_FUNCTION_2_1();
    OUTLINED_FUNCTION_6_1(&dword_2419D9000, v9, v10, "{\"msg%{public}.0s\":\"Invalid type chosen\", \"enum value\":%{public}u, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v12);
  }

  result = abort_report_np();
  __break(1u);
  return result;
}

void CLMicroLocationAlgorithms::details::createPerSourceWeights(uint64_t a1, uint64_t a2, NSObject *a3)
{
  *(_QWORD *)a2 = 68289795;
  *(_WORD *)(a2 + 8) = 2082;
  *(_QWORD *)(a2 + 10) = "";
  *(_WORD *)(a2 + 18) = 2082;
  *(_QWORD *)(a2 + 20) = a1;
  *(_WORD *)(a2 + 28) = 2082;
  *(_QWORD *)(a2 + 30) = "assert";
  *(_WORD *)(a2 + 38) = 2081;
  *(_QWORD *)(a2 + 40) = "weightsDict";
  OUTLINED_FUNCTION_0_0(&dword_2419D9000, a2, a3, "{\"msg%{public}.0s\":\"Couldn't find key: \", \"key\":%{public, location:escape_only}s, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", (uint8_t *)a2);
}

void CLEuclideanSquaredDistanceFunction::operator()()
{
  __assert_rtn("operator()", "CLDistanceFunction.h", 26, "a.size() == b.size()");
}

void CLGaussianKernelFunction::CLGaussianKernelFunction()
{
  __assert_rtn("CLGaussianKernelFunction", "CLKernelFunction.h", 37, "sigma > 0.0");
}

void CLExponentialKernelFunction::CLExponentialKernelFunction()
{
  __assert_rtn("CLExponentialKernelFunction", "CLKernelFunction.h", 77, "power > 0.0");
}

{
  __assert_rtn("CLExponentialKernelFunction", "CLKernelFunction.h", 78, "sigma > 0.0");
}

void ULLogicAdapterHelper::getULConfidenceReasons(NSObject **a1)
{
  NSObject *v2;
  NSObject *v3;
  NSObject *v4;
  uint8_t v5[40];
  uint64_t v6;

  v6 = *MEMORY[0x24BDAC8D0];
  _CLLogObjectForCategory_MicroLocation_Default();
  v2 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
  {
    OUTLINED_FUNCTION_0_1();
    _os_log_impl(&dword_2419D9000, v2, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Unexpected confidence reason type\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v5, 0x26u);
  }

  _CLLogObjectForCategory_MicroLocation_Default();
  v3 = objc_claimAutoreleasedReturnValue();
  if (os_signpost_enabled(v3))
  {
    OUTLINED_FUNCTION_0_1();
    _os_signpost_emit_with_name_impl(&dword_2419D9000, v3, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Unexpected confidence reason type", "{\"msg%{public}.0s\":\"Unexpected confidence reason type\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v5, 0x26u);
  }

  _CLLogObjectForCategory_MicroLocation_Default();
  v4 = objc_claimAutoreleasedReturnValue();
  *a1 = v4;
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    OUTLINED_FUNCTION_0_1();
    _os_log_impl(&dword_2419D9000, v4, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Unexpected confidence reason type\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v5, 0x26u);
  }
}

uint64_t CLMicroLocationBlueAtlasLocalizationAlgorithm::localize()
{
  void *v0;
  NSObject *v1;
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  NSObject *v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  NSObject *v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  uint64_t result;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint8_t v26;

  _CLLogObjectForCategory_MicroLocation_Default();
  v1 = objc_claimAutoreleasedReturnValue();
  if (OUTLINED_FUNCTION_5(v1))
  {
    OUTLINED_FUNCTION_0();
    OUTLINED_FUNCTION_3(&dword_2419D9000, v2, v3, "{\"msg%{public}.0s\":\"must have fingerprints distance function\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v4, v5, v6, v7, v22, v23, v24, v25, v26);
  }

  _CLLogObjectForCategory_MicroLocation_Default();
  v8 = objc_claimAutoreleasedReturnValue();
  if (OUTLINED_FUNCTION_6_0(v8))
  {
    OUTLINED_FUNCTION_0();
    OUTLINED_FUNCTION_1(&dword_2419D9000, v9, v10, v11, "must have fingerprints distance function", "{\"msg%{public}.0s\":\"must have fingerprints distance function\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v12, v13, v22, v23, v24, v25, v26);
  }

  _CLLogObjectForCategory_MicroLocation_Default();
  v14 = objc_claimAutoreleasedReturnValue();
  if (OUTLINED_FUNCTION_4(v14))
  {
    OUTLINED_FUNCTION_0();
    OUTLINED_FUNCTION_2(&dword_2419D9000, v15, v16, "{\"msg%{public}.0s\":\"must have fingerprints distance function\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v17, v18, v19, v20, v22, v23, v24, v25, v26);
  }

  result = abort_report_np();
  __break(1u);
  return result;
}

{
  void *v0;
  NSObject *v1;
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  NSObject *v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  NSObject *v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  uint64_t result;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint8_t v26;

  _CLLogObjectForCategory_MicroLocation_Default();
  v1 = objc_claimAutoreleasedReturnValue();
  if (OUTLINED_FUNCTION_5(v1))
  {
    OUTLINED_FUNCTION_0();
    OUTLINED_FUNCTION_3(&dword_2419D9000, v2, v3, "{\"msg%{public}.0s\":\"Cannot localize on invalid model!\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v4, v5, v6, v7, v22, v23, v24, v25, v26);
  }

  _CLLogObjectForCategory_MicroLocation_Default();
  v8 = objc_claimAutoreleasedReturnValue();
  if (OUTLINED_FUNCTION_6_0(v8))
  {
    OUTLINED_FUNCTION_0();
    OUTLINED_FUNCTION_1(&dword_2419D9000, v9, v10, v11, "Cannot localize on invalid model!", "{\"msg%{public}.0s\":\"Cannot localize on invalid model!\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v12, v13, v22, v23, v24, v25, v26);
  }

  _CLLogObjectForCategory_MicroLocation_Default();
  v14 = objc_claimAutoreleasedReturnValue();
  if (OUTLINED_FUNCTION_4(v14))
  {
    OUTLINED_FUNCTION_0();
    OUTLINED_FUNCTION_2(&dword_2419D9000, v15, v16, "{\"msg%{public}.0s\":\"Cannot localize on invalid model!\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v17, v18, v19, v20, v22, v23, v24, v25, v26);
  }

  result = abort_report_np();
  __break(1u);
  return result;
}

void CLMicroLocationBlueAtlasLocalizationAlgorithm::localize(char *a1, uint8_t *buf, os_log_t log)
{
  char *v4;

  if (a1[23] >= 0)
    v4 = a1;
  else
    v4 = *(char **)a1;
  *(_QWORD *)buf = 68289795;
  *((_WORD *)buf + 4) = 2082;
  *(_QWORD *)(buf + 10) = "";
  *((_WORD *)buf + 9) = 2082;
  *(_QWORD *)(buf + 20) = v4;
  *((_WORD *)buf + 14) = 2082;
  *(_QWORD *)(buf + 30) = "assert";
  *((_WORD *)buf + 19) = 2081;
  *((_QWORD *)buf + 5) = "model.modelType == CLMicroLocationProto::Model::BLUE_ATLAS";
  _os_log_impl(&dword_2419D9000, log, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Blue Atlas Localization, model type is not BLUE_ATLAS!\", \"Model Type\":%{public, location:escape_only}s, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x30u);
  if (a1[23] < 0)
    operator delete(*(void **)a1);
}

uint64_t CLMicroLocationBlueAtlasAlgorithms::calculateScoreForValue<double>()
{
  void *v0;
  NSObject *v1;
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  NSObject *v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  NSObject *v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint8_t v27;

  _CLLogObjectForCategory_MicroLocation_Default();
  v1 = objc_claimAutoreleasedReturnValue();
  if (OUTLINED_FUNCTION_5(v1))
  {
    OUTLINED_FUNCTION_0();
    OUTLINED_FUNCTION_3(&dword_2419D9000, v2, v3, "{\"msg%{public}.0s\":\"Look up table thresholds must be sorted\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v4, v5, v6, v7, v23, v24, v25, v26, v27);
  }

  _CLLogObjectForCategory_MicroLocation_Default();
  v8 = objc_claimAutoreleasedReturnValue();
  if (OUTLINED_FUNCTION_6_0(v8))
  {
    OUTLINED_FUNCTION_0();
    OUTLINED_FUNCTION_1(&dword_2419D9000, v9, v10, v11, "Look up table thresholds must be sorted", "{\"msg%{public}.0s\":\"Look up table thresholds must be sorted\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v12, v13, v23, v24, v25, v26, v27);
  }

  _CLLogObjectForCategory_MicroLocation_Default();
  v14 = objc_claimAutoreleasedReturnValue();
  if (OUTLINED_FUNCTION_4(v14))
  {
    OUTLINED_FUNCTION_0();
    OUTLINED_FUNCTION_2(&dword_2419D9000, v15, v16, "{\"msg%{public}.0s\":\"Look up table thresholds must be sorted\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v17, v18, v19, v20, v23, v24, v25, v26, v27);
  }

  v21 = abort_report_np();
  return CLMicroLocationBlueAtlasAlgorithms::calculateScoreForValue<double>(v21);
}

{
  void *v0;
  NSObject *v1;
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  NSObject *v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  NSObject *v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint8_t v27;

  _CLLogObjectForCategory_MicroLocation_Default();
  v1 = objc_claimAutoreleasedReturnValue();
  if (OUTLINED_FUNCTION_5(v1))
  {
    OUTLINED_FUNCTION_0();
    OUTLINED_FUNCTION_3(&dword_2419D9000, v2, v3, "{\"msg%{public}.0s\":\"Look up table thresholds must be sorted\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v4, v5, v6, v7, v23, v24, v25, v26, v27);
  }

  _CLLogObjectForCategory_MicroLocation_Default();
  v8 = objc_claimAutoreleasedReturnValue();
  if (os_signpost_enabled(v8))
  {
    OUTLINED_FUNCTION_0();
    OUTLINED_FUNCTION_1(&dword_2419D9000, v9, v10, v11, "Look up table thresholds must be sorted", "{\"msg%{public}.0s\":\"Look up table thresholds must be sorted\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v12, v13, v23, v24, v25, v26, v27);
  }

  _CLLogObjectForCategory_MicroLocation_Default();
  v14 = objc_claimAutoreleasedReturnValue();
  if (OUTLINED_FUNCTION_4(v14))
  {
    OUTLINED_FUNCTION_0();
    OUTLINED_FUNCTION_2(&dword_2419D9000, v15, v16, "{\"msg%{public}.0s\":\"Look up table thresholds must be sorted\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v17, v18, v19, v20, v23, v24, v25, v26, v27);
  }

  v21 = abort_report_np();
  return CLMicroLocationBlueAtlasAlgorithms::calculateScoreForValue<double>(v21);
}

{
  void *v0;
  NSObject *v1;
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  NSObject *v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  NSObject *v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint8_t v27;

  _CLLogObjectForCategory_MicroLocation_Default();
  v1 = objc_claimAutoreleasedReturnValue();
  if (OUTLINED_FUNCTION_5(v1))
  {
    OUTLINED_FUNCTION_0();
    OUTLINED_FUNCTION_3(&dword_2419D9000, v2, v3, "{\"msg%{public}.0s\":\"Look up table thresholds and scores vectors must be the same size\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v4, v5, v6, v7, v23, v24, v25, v26, v27);
  }

  _CLLogObjectForCategory_MicroLocation_Default();
  v8 = objc_claimAutoreleasedReturnValue();
  if (os_signpost_enabled(v8))
  {
    OUTLINED_FUNCTION_0();
    OUTLINED_FUNCTION_1(&dword_2419D9000, v9, v10, v11, "Look up table thresholds and scores vectors must be the same size", "{\"msg%{public}.0s\":\"Look up table thresholds and scores vectors must be the same size\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v12, v13, v23, v24, v25, v26, v27);
  }

  _CLLogObjectForCategory_MicroLocation_Default();
  v14 = objc_claimAutoreleasedReturnValue();
  if (OUTLINED_FUNCTION_4(v14))
  {
    OUTLINED_FUNCTION_0();
    OUTLINED_FUNCTION_2(&dword_2419D9000, v15, v16, "{\"msg%{public}.0s\":\"Look up table thresholds and scores vectors must be the same size\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v17, v18, v19, v20, v23, v24, v25, v26, v27);
  }

  v21 = abort_report_np();
  return -[ULLogicAdapter deleteServiceWithIdentifier:clientIdentifier:].cold.1(v21);
}

void CLMicroLocationBlueAtlasAlgorithms::calculateScoreForValue<double>()
{
  void *v0;
  NSObject *v1;
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  NSObject *v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  NSObject *v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  NSObject **v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint8_t v26;

  _CLLogObjectForCategory_MicroLocation_Default();
  v1 = objc_claimAutoreleasedReturnValue();
  if (OUTLINED_FUNCTION_5(v1))
  {
    OUTLINED_FUNCTION_0();
    OUTLINED_FUNCTION_3(&dword_2419D9000, v2, v3, "{\"msg%{public}.0s\":\"Look up table thresholds and scores vectors must be the same size\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v4, v5, v6, v7, v22, v23, v24, v25, v26);
  }

  _CLLogObjectForCategory_MicroLocation_Default();
  v8 = objc_claimAutoreleasedReturnValue();
  if (OUTLINED_FUNCTION_6_0(v8))
  {
    OUTLINED_FUNCTION_0();
    OUTLINED_FUNCTION_1(&dword_2419D9000, v9, v10, v11, "Look up table thresholds and scores vectors must be the same size", "{\"msg%{public}.0s\":\"Look up table thresholds and scores vectors must be the same size\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v12, v13, v22, v23, v24, v25, v26);
  }

  _CLLogObjectForCategory_MicroLocation_Default();
  v14 = objc_claimAutoreleasedReturnValue();
  if (OUTLINED_FUNCTION_4(v14))
  {
    OUTLINED_FUNCTION_0();
    OUTLINED_FUNCTION_2(&dword_2419D9000, v15, v16, "{\"msg%{public}.0s\":\"Look up table thresholds and scores vectors must be the same size\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v17, v18, v19, v20, v22, v23, v24, v25, v26);
  }

  v21 = (NSObject **)abort_report_np();
  CLMiLoServiceManager::enterLocationPerService(v21);
}

void CLMiLoServiceManager::enterLocationPerService(NSObject **a1)
{
  NSObject *v2;
  NSObject *v3;
  NSObject *v4;
  uint8_t v5[40];
  uint64_t v6;

  v6 = *MEMORY[0x24BDAC8D0];
  _CLLogObjectForCategory_MicroLocation_Default();
  v2 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
  {
    OUTLINED_FUNCTION_0_1();
    _os_log_impl(&dword_2419D9000, v2, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Optional Model must have value here\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v5, 0x26u);
  }

  _CLLogObjectForCategory_MicroLocation_Default();
  v3 = objc_claimAutoreleasedReturnValue();
  if (os_signpost_enabled(v3))
  {
    OUTLINED_FUNCTION_0_1();
    _os_signpost_emit_with_name_impl(&dword_2419D9000, v3, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Optional Model must have value here", "{\"msg%{public}.0s\":\"Optional Model must have value here\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v5, 0x26u);
  }

  _CLLogObjectForCategory_MicroLocation_Default();
  v4 = objc_claimAutoreleasedReturnValue();
  *a1 = v4;
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    OUTLINED_FUNCTION_0_1();
    _os_log_impl(&dword_2419D9000, v4, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Optional Model must have value here\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v5, 0x26u);
  }
}

#error "241B7AA6C: call analysis failed (funcsize=59)"

#error "241B7AB8C: call analysis failed (funcsize=58)"

#error "241B7ACA4: call analysis failed (funcsize=58)"

#error "241B7ADBC: call analysis failed (funcsize=58)"

#error "241B7AED4: call analysis failed (funcsize=58)"

#error "241B7AFEC: call analysis failed (funcsize=58)"

#error "241B7B104: call analysis failed (funcsize=58)"

uint64_t CLMicroLocationWiFiChannelHistogramAnalyzer::histogramFromProtobuf()
{
  NSObject *v0;
  NSObject *v1;
  NSObject *v2;
  uint64_t result;
  uint8_t buf[40];
  uint64_t v5;

  v5 = *MEMORY[0x24BDAC8D0];
  _CLLogObjectForCategory_MicroLocation_Default();
  v0 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v0, OS_LOG_TYPE_FAULT))
  {
    OUTLINED_FUNCTION_0();
    _os_log_impl(&dword_2419D9000, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Expecting a wifi channel histogram\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
  }

  _CLLogObjectForCategory_MicroLocation_Default();
  v1 = objc_claimAutoreleasedReturnValue();
  if (os_signpost_enabled(v1))
  {
    OUTLINED_FUNCTION_0();
    _os_signpost_emit_with_name_impl(&dword_2419D9000, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Expecting a wifi channel histogram", "{\"msg%{public}.0s\":\"Expecting a wifi channel histogram\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
  }

  _CLLogObjectForCategory_MicroLocation_Default();
  v2 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
  {
    OUTLINED_FUNCTION_0();
    _os_log_impl(&dword_2419D9000, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Expecting a wifi channel histogram\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
  }

  result = abort_report_np();
  __break(1u);
  return result;
}

uint64_t CLSqliteDatabaseManager::openDatabase()
{
  NSObject *v0;
  NSObject *v1;
  NSObject *v2;
  uint64_t result;
  uint8_t buf[40];
  uint64_t v5;

  v5 = *MEMORY[0x24BDAC8D0];
  _CLLogObjectForCategory_MicroLocation_Default();
  v0 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v0, OS_LOG_TYPE_FAULT))
  {
    OUTLINED_FUNCTION_0();
    _os_log_impl(&dword_2419D9000, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"mutex assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
  }

  _CLLogObjectForCategory_MicroLocation_Default();
  v1 = objc_claimAutoreleasedReturnValue();
  if (os_signpost_enabled(v1))
  {
    OUTLINED_FUNCTION_0();
    _os_signpost_emit_with_name_impl(&dword_2419D9000, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "mutex assertion failed", "{\"msg%{public}.0s\":\"mutex assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
  }

  _CLLogObjectForCategory_MicroLocation_Default();
  v2 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
  {
    OUTLINED_FUNCTION_0();
    _os_log_impl(&dword_2419D9000, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"mutex assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
  }

  result = abort_report_np();
  __break(1u);
  return result;
}

void CLMicroLocationTimeUtils::getTimeDeltaDaysAgo()
{
  void *v0;
  NSObject *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint8_t v21;

  _CLLogObjectForCategory_MicroLocation_Default();
  v1 = objc_claimAutoreleasedReturnValue();
  if (OUTLINED_FUNCTION_7(v1))
  {
    OUTLINED_FUNCTION_0_1();
    OUTLINED_FUNCTION_12(&dword_2419D9000, v2, v3, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v4, v5, v6, v7, v21);
  }

  _CLLogObjectForCategory_MicroLocation_Default();
  v8 = objc_claimAutoreleasedReturnValue();
  if (os_signpost_enabled(v8))
  {
    OUTLINED_FUNCTION_0_1();
    OUTLINED_FUNCTION_7_1(&dword_2419D9000, v9, v10, v11, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v12, v13, v21);
  }

  _CLLogObjectForCategory_MicroLocation_Default();
  v14 = objc_claimAutoreleasedReturnValue();
  if (OUTLINED_FUNCTION_8_0(v14))
  {
    OUTLINED_FUNCTION_0_1();
    OUTLINED_FUNCTION_13(&dword_2419D9000, v15, v16, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v17, v18, v19, v20, v21);
  }
  OUTLINED_FUNCTION_6();
}

void CLMicroLocationLocalizationController::LocalizationRequest::finalizeTriggerConfidence()
{
  __assert_rtn("set_confidencelevel", "microlocation.pb.h", 20701, "::CLMicroLocationProto::ConfidenceLevel_IsValid(value)");
}

uint64_t CLMicroLocationLocalizationController::localizationRequestResultsPerModelInternal()
{
  NSObject *v0;
  NSObject *v1;
  NSObject *v2;
  uint64_t result;
  uint8_t buf[40];
  uint64_t v5;

  v5 = *MEMORY[0x24BDAC8D0];
  _CLLogObjectForCategory_MicroLocation_Default();
  v0 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v0, OS_LOG_TYPE_FAULT))
  {
    OUTLINED_FUNCTION_0();
    _os_log_impl(&dword_2419D9000, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"semi-supervised model has no clientId value\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
  }

  _CLLogObjectForCategory_MicroLocation_Default();
  v1 = objc_claimAutoreleasedReturnValue();
  if (os_signpost_enabled(v1))
  {
    OUTLINED_FUNCTION_0();
    _os_signpost_emit_with_name_impl(&dword_2419D9000, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "semi-supervised model has no clientId value", "{\"msg%{public}.0s\":\"semi-supervised model has no clientId value\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
  }

  _CLLogObjectForCategory_MicroLocation_Default();
  v2 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
  {
    OUTLINED_FUNCTION_0();
    _os_log_impl(&dword_2419D9000, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"semi-supervised model has no clientId value\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
  }

  result = abort_report_np();
  __break(1u);
  return result;
}

uint64_t CLMicroLocationLearner::getServiceLabelsAndLabeledRecordingEventsForLoi()
{
  void *v0;
  NSObject *v1;
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  NSObject *v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  NSObject *v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  uint64_t result;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint8_t v26;

  _CLLogObjectForCategory_MicroLocation_Default();
  v1 = objc_claimAutoreleasedReturnValue();
  if (OUTLINED_FUNCTION_5(v1))
  {
    OUTLINED_FUNCTION_0();
    OUTLINED_FUNCTION_3(&dword_2419D9000, v2, v3, "{\"msg%{public}.0s\":\"getServiceLabelsAndLabeledRecordingEventsForLoi, labeledRecordingEvents must be empty\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v4, v5, v6, v7, v22, v23, v24, v25, v26);
  }

  _CLLogObjectForCategory_MicroLocation_Default();
  v8 = objc_claimAutoreleasedReturnValue();
  if (os_signpost_enabled(v8))
  {
    OUTLINED_FUNCTION_0();
    OUTLINED_FUNCTION_1(&dword_2419D9000, v9, v10, v11, "getServiceLabelsAndLabeledRecordingEventsForLoi, labeledRecordingEvents must be empty", "{\"msg%{public}.0s\":\"getServiceLabelsAndLabeledRecordingEventsForLoi, labeledRecordingEvents must be empty\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v12, v13, v22, v23, v24, v25, v26);
  }

  _CLLogObjectForCategory_MicroLocation_Default();
  v14 = objc_claimAutoreleasedReturnValue();
  if (OUTLINED_FUNCTION_4(v14))
  {
    OUTLINED_FUNCTION_0();
    OUTLINED_FUNCTION_2(&dword_2419D9000, v15, v16, "{\"msg%{public}.0s\":\"getServiceLabelsAndLabeledRecordingEventsForLoi, labeledRecordingEvents must be empty\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v17, v18, v19, v20, v22, v23, v24, v25, v26);
  }

  result = abort_report_np();
  __break(1u);
  return result;
}

{
  void *v0;
  NSObject *v1;
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  NSObject *v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  NSObject *v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  uint64_t result;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint8_t v26;

  _CLLogObjectForCategory_MicroLocation_Default();
  v1 = objc_claimAutoreleasedReturnValue();
  if (OUTLINED_FUNCTION_5(v1))
  {
    OUTLINED_FUNCTION_0();
    OUTLINED_FUNCTION_3(&dword_2419D9000, v2, v3, "{\"msg%{public}.0s\":\"getServiceLabelsAndLabeledRecordingEventsForLoi, labelEntries must be empty\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v4, v5, v6, v7, v22, v23, v24, v25, v26);
  }

  _CLLogObjectForCategory_MicroLocation_Default();
  v8 = objc_claimAutoreleasedReturnValue();
  if (os_signpost_enabled(v8))
  {
    OUTLINED_FUNCTION_0();
    OUTLINED_FUNCTION_1(&dword_2419D9000, v9, v10, v11, "getServiceLabelsAndLabeledRecordingEventsForLoi, labelEntries must be empty", "{\"msg%{public}.0s\":\"getServiceLabelsAndLabeledRecordingEventsForLoi, labelEntries must be empty\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v12, v13, v22, v23, v24, v25, v26);
  }

  _CLLogObjectForCategory_MicroLocation_Default();
  v14 = objc_claimAutoreleasedReturnValue();
  if (OUTLINED_FUNCTION_4(v14))
  {
    OUTLINED_FUNCTION_0();
    OUTLINED_FUNCTION_2(&dword_2419D9000, v15, v16, "{\"msg%{public}.0s\":\"getServiceLabelsAndLabeledRecordingEventsForLoi, labelEntries must be empty\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v17, v18, v19, v20, v22, v23, v24, v25, v26);
  }

  result = abort_report_np();
  __break(1u);
  return result;
}

void CLSqliteDatabase::init(NSObject **a1)
{
  NSObject *v2;
  NSObject *v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  uint8_t v7[40];
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  _CLLogObjectForCategory_MicroLocation_Default();
  v2 = objc_claimAutoreleasedReturnValue();
  if (OUTLINED_FUNCTION_4_1(v2))
  {
    OUTLINED_FUNCTION_0_1();
    OUTLINED_FUNCTION_5_0(&dword_2419D9000, v2, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"database init failed: db filename is empty\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v7);
  }

  _CLLogObjectForCategory_MicroLocation_Default();
  v3 = objc_claimAutoreleasedReturnValue();
  if (OUTLINED_FUNCTION_9(v3))
  {
    OUTLINED_FUNCTION_0_1();
    OUTLINED_FUNCTION_3_1(&dword_2419D9000, v2, v4, v5, "database init failed: db filename is empty", "{\"msg%{public}.0s\":\"database init failed: db filename is empty\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v7);
  }

  _CLLogObjectForCategory_MicroLocation_Default();
  v6 = objc_claimAutoreleasedReturnValue();
  *a1 = v6;
  if (OUTLINED_FUNCTION_8(v6))
  {
    OUTLINED_FUNCTION_0_1();
    OUTLINED_FUNCTION_5_0(&dword_2419D9000, v6, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"database init failed: db filename is empty\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v7);
  }
  OUTLINED_FUNCTION_6();
}

uint64_t CLSqliteDatabase::prepareStatementNoCache()
{
  NSObject *v0;
  NSObject *v1;
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  NSObject *v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint8_t v24[40];
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  _CLLogObjectForCategory_MicroLocation_Default();
  v1 = objc_claimAutoreleasedReturnValue();
  if (OUTLINED_FUNCTION_5(v1))
  {
    OUTLINED_FUNCTION_0();
    OUTLINED_FUNCTION_3(&dword_2419D9000, v2, v3, "{\"msg%{public}.0s\":\"mutex locked assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v4, v5, v6, v7, v20, v21, v22, v23, v24[0]);
  }

  _CLLogObjectForCategory_MicroLocation_Default();
  v8 = objc_claimAutoreleasedReturnValue();
  if (OUTLINED_FUNCTION_6_0(v8))
  {
    OUTLINED_FUNCTION_0();
    OUTLINED_FUNCTION_3_1(&dword_2419D9000, v0, v9, v10, "mutex locked assertion failed", "{\"msg%{public}.0s\":\"mutex locked assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v24);
  }

  _CLLogObjectForCategory_MicroLocation_Default();
  v11 = objc_claimAutoreleasedReturnValue();
  if (OUTLINED_FUNCTION_4(v11))
  {
    OUTLINED_FUNCTION_0();
    OUTLINED_FUNCTION_2(&dword_2419D9000, v12, v13, "{\"msg%{public}.0s\":\"mutex locked assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v14, v15, v16, v17, v20, v21, v22, v23, v24[0]);
  }

  v18 = abort_report_np();
  return CLMicroLocationDatabaseColumns::convert_from_sql<std::string>::convert(v18);
}

#error "241B7BC7C: call analysis failed (funcsize=59)"

#error "241B7BD9C: call analysis failed (funcsize=59)"

#error "241B7BEBC: call analysis failed (funcsize=58)"

#error "241B7BFD4: call analysis failed (funcsize=59)"

#error "241B7C0F4: call analysis failed (funcsize=59)"

#error "241B7C214: call analysis failed (funcsize=58)"

#error "241B7C32C: call analysis failed (funcsize=58)"

#error "241B7C444: call analysis failed (funcsize=59)"

#error "241B7C564: call analysis failed (funcsize=59)"

#error "241B7C684: call analysis failed (funcsize=59)"

uint64_t CLMicroLocationFingerprintDataSources::create()
{
  NSObject *v0;
  NSObject *v1;
  NSObject *v2;
  uint64_t result;
  uint8_t buf[56];
  uint64_t v5;

  v5 = *MEMORY[0x24BDAC8D0];
  _CLLogObjectForCategory_MicroLocation_Default();
  v0 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v0, OS_LOG_TYPE_FAULT))
  {
    OUTLINED_FUNCTION_2_1();
    _os_log_impl(&dword_2419D9000, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Invalid type chosen\", \"enum value\":%{public}d, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x2Cu);
  }

  _CLLogObjectForCategory_MicroLocation_Default();
  v1 = objc_claimAutoreleasedReturnValue();
  if (os_signpost_enabled(v1))
  {
    OUTLINED_FUNCTION_2_1();
    _os_signpost_emit_with_name_impl(&dword_2419D9000, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Invalid type chosen", "{\"msg%{public}.0s\":\"Invalid type chosen\", \"enum value\":%{public}d, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x2Cu);
  }

  _CLLogObjectForCategory_MicroLocation_Default();
  v2 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
  {
    OUTLINED_FUNCTION_2_1();
    _os_log_impl(&dword_2419D9000, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Invalid type chosen\", \"enum value\":%{public}d, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x2Cu);
  }

  result = abort_report_np();
  __break(1u);
  return result;
}

void CLMicroLocationProto::BleLeechedBeacons::MergeFrom()
{
  __assert_rtn("set_datatype", "microlocation.pb.h", 9423, "::CLMicroLocationProto::DataType_IsValid(value)");
}

void CLMicroLocationProto::BleLeechedBeacons::CheckTypeAndMergeFrom(uint64_t a1, uint64_t a2, uint64_t a3)
{
  OUTLINED_FUNCTION_0_2("down_cast", "common.h", a3, "f == NULL || dynamic_cast<To>(f) != NULL");
}

void CLMicroLocationProto::WiFiRssi::MergeFrom()
{
  __assert_rtn("set_datatype", "microlocation.pb.h", 9748, "::CLMicroLocationProto::DataType_IsValid(value)");
}

void CLMicroLocationProto::UwbRange::MergeFrom()
{
  __assert_rtn("set_devicetype", "microlocation.pb.h", 10112, "::CLMicroLocationProto::UwbRange_DeviceType_IsValid(value)");
}

{
  __assert_rtn("set_datatype", "microlocation.pb.h", 9933, "::CLMicroLocationProto::DataType_IsValid(value)");
}

void CLMicroLocationProto::WiFiRange::MergeFrom()
{
  __assert_rtn("set_datatype", "microlocation.pb.h", 10183, "::CLMicroLocationProto::DataType_IsValid(value)");
}

void CLMicroLocationProto::ATVAirplayBluetoothRssi::MergeFrom()
{
  __assert_rtn("set_datatype", "microlocation.pb.h", 10346, "::CLMicroLocationProto::DataType_IsValid(value)");
}

void CLMicroLocationProto::HomeKitBluetoothRssi::MergeFrom()
{
  __assert_rtn("set_hapversion", "microlocation.pb.h", 10691, "::CLMicroLocationProto::HomeKitBluetoothRssi_HAPVersion_IsValid(value)");
}

{
  __assert_rtn("set_devicetype", "microlocation.pb.h", 10668, "::CLMicroLocationProto::HomeKitBluetoothRssi_DeviceType_IsValid(value)");
}

{
  __assert_rtn("set_datatype", "microlocation.pb.h", 10531, "::CLMicroLocationProto::DataType_IsValid(value)");
}

void CLMicroLocationProto::Measurement::MergeFrom()
{
  __assert_rtn("set_datatype", "microlocation.pb.h", 10718, "::CLMicroLocationProto::DataType_IsValid(value)");
}

void CLMicroLocationProto::FingerprintMeasurement::MergeFrom()
{
  __assert_rtn("set_datatype", "microlocation.pb.h", 11137, "::CLMicroLocationProto::DataType_IsValid(value)");
}

void CLMicroLocationProto::AnchorMetadata::MergeFrom()
{
  __assert_rtn("set_datatype", "microlocation.pb.h", 11761, "::CLMicroLocationProto::DataType_IsValid(value)");
}

{
  __assert_rtn("set_anchorstatus", "microlocation.pb.h", 11694, "::CLMicroLocationProto::AnchorStatus_IsValid(value)");
}

void CLMicroLocationProto::Model::MergeFrom()
{
  __assert_rtn("set_candidatequalityindicator", "microlocation.pb.h", 12903, "::CLMicroLocationProto::Model_ModelQualityLevel_IsValid(value)");
}

{
  __assert_rtn("set_qualityindicator", "microlocation.pb.h", 12880, "::CLMicroLocationProto::Model_ModelQualityLevel_IsValid(value)");
}

{
  __assert_rtn("set_modeltype", "microlocation.pb.h", 12679, "::CLMicroLocationProto::Model_ModelType_IsValid(value)");
}

{
  __assert_rtn("set_generationalgorithm", "microlocation.pb.h", 12656, "::CLMicroLocationProto::Model_GenerationAlgorithm_IsValid(value)");
}

void CLMicroLocationProto::ReceivedEventAction::MergeFrom()
{
  __assert_rtn("set_receivedeventactiontype", "microlocation.pb.h", 13294, "::CLMicroLocationProto::ReceivedEventActionType_IsValid(value)");
}

{
  __assert_rtn("set_eventtype", "microlocation.pb.h", 13271, "::CLMicroLocationProto::EventType_IsValid(value)");
}

void CLMicroLocationProto::RecordingRequest::MergeFrom()
{
  __assert_rtn("set_recordingrequesttype", "microlocation.pb.h", 13554, "::CLMicroLocationProto::RecordingRequestType_IsValid(value)");
}

{
  __assert_rtn("set_eventtype", "microlocation.pb.h", 13531, "::CLMicroLocationProto::EventType_IsValid(value)");
}

void CLMicroLocationProto::AppLaunch::MergeFrom()
{
  __assert_rtn("set_eventtype", "microlocation.pb.h", 13791, "::CLMicroLocationProto::EventType_IsValid(value)");
}

void CLMicroLocationProto::BacklightOn::MergeFrom()
{
  __assert_rtn("set_eventtype", "microlocation.pb.h", 14000, "::CLMicroLocationProto::EventType_IsValid(value)");
}

void CLMicroLocationProto::BatteryChargerConnected::MergeFrom()
{
  __assert_rtn("set_eventtype", "microlocation.pb.h", 14097, "::CLMicroLocationProto::EventType_IsValid(value)");
}

void CLMicroLocationProto::TruthLabelDonation::MergeFrom()
{
  __assert_rtn("set_eventtype", "microlocation.pb.h", 14124, "::CLMicroLocationProto::EventType_IsValid(value)");
}

void CLMicroLocationProto::ForcedRecording::MergeFrom()
{
  __assert_rtn("set_eventtype", "microlocation.pb.h", 14361, "::CLMicroLocationProto::EventType_IsValid(value)");
}

void CLMicroLocationProto::HomeKitAccessory::MergeFrom()
{
  __assert_rtn("set_eventtype", "microlocation.pb.h", 14388, "::CLMicroLocationProto::EventType_IsValid(value)");
}

void CLMicroLocationProto::HomeKitScene::MergeFrom()
{
  __assert_rtn("set_eventtype", "microlocation.pb.h", 15299, "::CLMicroLocationProto::EventType_IsValid(value)");
}

void CLMicroLocationProto::NowPlaying::MergeFrom()
{
  __assert_rtn("set_eventtype", "microlocation.pb.h", 16048, "::CLMicroLocationProto::EventType_IsValid(value)");
}

void CLMicroLocationProto::LearnModel::MergeFrom()
{
  __assert_rtn("set_eventtype", "microlocation.pb.h", 16304, "::CLMicroLocationProto::EventType_IsValid(value)");
}

void CLMicroLocationProto::LearnCompleted::MergeFrom()
{
  __assert_rtn("set_eventtype", "microlocation.pb.h", 16331, "::CLMicroLocationProto::EventType_IsValid(value)");
}

void CLMicroLocationProto::SensorsScanComplete::MergeFrom()
{
  __assert_rtn("set_eventtype", "microlocation.pb.h", 16358, "::CLMicroLocationProto::EventType_IsValid(value)");
}

void CLMicroLocationProto::StartSpectating::MergeFrom()
{
  __assert_rtn("set_eventtype", "microlocation.pb.h", 16385, "::CLMicroLocationProto::EventType_IsValid(value)");
}

void CLMicroLocationProto::StopSpectating::MergeFrom()
{
  __assert_rtn("set_eventtype", "microlocation.pb.h", 16412, "::CLMicroLocationProto::EventType_IsValid(value)");
}

void CLMicroLocationProto::ServiceCreate::MergeFrom()
{
  __assert_rtn("set_eventtype", "microlocation.pb.h", 16439, "::CLMicroLocationProto::EventType_IsValid(value)");
}

void CLMicroLocationProto::ServiceDelete::MergeFrom()
{
  __assert_rtn("set_eventtype", "microlocation.pb.h", 16558, "::CLMicroLocationProto::EventType_IsValid(value)");
}

void CLMicroLocationProto::ServiceConnect::MergeFrom()
{
  __assert_rtn("set_eventtype", "microlocation.pb.h", 16725, "::CLMicroLocationProto::EventType_IsValid(value)");
}

void CLMicroLocationProto::ServiceDisconnect::MergeFrom()
{
  __assert_rtn("set_eventtype", "microlocation.pb.h", 16892, "::CLMicroLocationProto::EventType_IsValid(value)");
}

void CLMicroLocationProto::ServiceStartUpdating::MergeFrom()
{
  __assert_rtn("set_eventtype", "microlocation.pb.h", 17059, "::CLMicroLocationProto::EventType_IsValid(value)");
}

void CLMicroLocationProto::ServiceStopUpdating::MergeFrom()
{
  __assert_rtn("set_eventtype", "microlocation.pb.h", 17248, "::CLMicroLocationProto::EventType_IsValid(value)");
}

void CLMicroLocationProto::RequestObservation::MergeFrom()
{
  __assert_rtn("set_eventtype", "microlocation.pb.h", 17415, "::CLMicroLocationProto::EventType_IsValid(value)");
}

void CLMicroLocationProto::RequestPrediction::MergeFrom()
{
  __assert_rtn("set_eventtype", "microlocation.pb.h", 17722, "::CLMicroLocationProto::EventType_IsValid(value)");
}

void CLMicroLocationProto::MiloInit::MergeFrom()
{
  __assert_rtn("set_eventtype", "microlocation.pb.h", 17959, "::CLMicroLocationProto::EventType_IsValid(value)");
}

void CLMicroLocationProto::MotionEvent::MergeFrom()
{
  __assert_rtn("set_screenon", "microlocation.pb.h", 18242, "::CLMicroLocationProto::MotionEvent_ScreenStatus_IsValid(value)");
}

{
  __assert_rtn("set_status", "microlocation.pb.h", 18149, "::CLMicroLocationProto::MotionEvent_Status_IsValid(value)");
}

{
  __assert_rtn("set_eventtype", "microlocation.pb.h", 18056, "::CLMicroLocationProto::EventType_IsValid(value)");
}

void CLMicroLocationProto::LegacyThrottle::MergeFrom()
{
  __assert_rtn("set_eventtype", "microlocation.pb.h", 18291, "::CLMicroLocationProto::EventType_IsValid(value)");
}

void CLMicroLocationProto::RetrievedLoi::MergeFrom()
{
  __assert_rtn("set_reason", "microlocation.pb.h", 18621, "::CLMicroLocationProto::ChangedLoiReason_IsValid(value)");
}

{
  __assert_rtn("set_eventtype", "microlocation.pb.h", 18388, "::CLMicroLocationProto::EventType_IsValid(value)");
}

void CLMicroLocationProto::TriggerEvent::MergeFrom()
{
  __assert_rtn("set_motionstate", "microlocation.pb.h", 21328, "::CLMicroLocationProto::MotionState_IsValid(value)");
}

{
  __assert_rtn("set_reason", "microlocation.pb.h", 21235, "::CLMicroLocationProto::TriggerReason_IsValid(value)");
}

{
  __assert_rtn("set_requeststatus", "microlocation.pb.h", 21212, "::CLMicroLocationProto::TriggerRequestStatus_IsValid(value)");
}

{
  __assert_rtn("set_requesttype", "microlocation.pb.h", 21189, "::CLMicroLocationProto::TriggerRequestType_IsValid(value)");
}

{
  __assert_rtn("set_eventtype", "microlocation.pb.h", 20820, "::CLMicroLocationProto::EventType_IsValid(value)");
}

void CLMicroLocationProto::LegacyClientStatusUpdate::MergeFrom()
{
  __assert_rtn("set_numberofobservationsstate", "microlocation.pb.h", 21378, "::CLMicroLocationProto::NumberOfObservationsStates_IsValid(value)");
}

{
  __assert_rtn("set_eventtype", "microlocation.pb.h", 21355, "::CLMicroLocationProto::EventType_IsValid(value)");
}

void CLMicroLocationProto::SpectatingMotionUpdate::MergeFrom()
{
  __assert_rtn("set_eventtype", "microlocation.pb.h", 21427, "::CLMicroLocationProto::EventType_IsValid(value)");
}

void CLMicroLocationProto::EnabledStateUpdate::MergeFrom()
{
  __assert_rtn("set_eventtype", "microlocation.pb.h", 21476, "::CLMicroLocationProto::EventType_IsValid(value)");
}

void CLMicroLocationProto::ScreenStateUpdate::MergeFrom()
{
  __assert_rtn("set_eventtype", "microlocation.pb.h", 21679, "::CLMicroLocationProto::EventType_IsValid(value)");
}

void CLMicroLocationProto::CloudBackupExport::MergeFrom()
{
  __assert_rtn("set_eventtype", "microlocation.pb.h", 21728, "::CLMicroLocationProto::EventType_IsValid(value)");
}

void CLMicroLocationProto::CloudBackupImport::MergeFrom()
{
  __assert_rtn("set_eventtype", "microlocation.pb.h", 21755, "::CLMicroLocationProto::EventType_IsValid(value)");
}

void CLMicroLocationProto::DataMigration::MergeFrom()
{
  __assert_rtn("set_eventtype", "microlocation.pb.h", 21782, "::CLMicroLocationProto::EventType_IsValid(value)");
}

void CLMicroLocationProto::RecordingEvent::MergeFrom()
{
  __assert_rtn("set_motionstate", "microlocation.pb.h", 20793, "::CLMicroLocationProto::MotionState_IsValid(value)");
}

{
  __assert_rtn("set_eventtype", "microlocation.pb.h", 20192, "::CLMicroLocationProto::EventType_IsValid(value)");
}

void CLMicroLocationProto::WifiHistogram::MergeFrom()
{
  __assert_rtn("set_type", "microlocation.pb.h", 21857, "::CLMicroLocationProto::ConfigurationType_IsValid(value)");
}

void CLMicroLocationProto::AnchorAppearanceConfiguration::MergeFrom()
{
  __assert_rtn("set_type", "microlocation.pb.h", 21909, "::CLMicroLocationProto::ConfigurationType_IsValid(value)");
}

void CLMicroLocationProto::AnchorValueStatisticsConfiguration::MergeFrom()
{
  __assert_rtn("set_type", "microlocation.pb.h", 21978, "::CLMicroLocationProto::ConfigurationType_IsValid(value)");
}

void CLMicroLocationProto::Configuration::MergeFrom()
{
  __assert_rtn("set_type", "microlocation.pb.h", 22117, "::CLMicroLocationProto::ConfigurationType_IsValid(value)");
}

uint64_t CLMicroLocationBinaryRoiNullSpaceAlgorithm::localize()
{
  void *v0;
  NSObject *v1;
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  NSObject *v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  NSObject *v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  uint64_t result;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint8_t v26;

  _CLLogObjectForCategory_MicroLocation_Default();
  v1 = objc_claimAutoreleasedReturnValue();
  if (OUTLINED_FUNCTION_5(v1))
  {
    OUTLINED_FUNCTION_0();
    OUTLINED_FUNCTION_3(&dword_2419D9000, v2, v3, "{\"msg%{public}.0s\":\"must have fingerprints distance function\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v4, v5, v6, v7, v22, v23, v24, v25, v26);
  }

  _CLLogObjectForCategory_MicroLocation_Default();
  v8 = objc_claimAutoreleasedReturnValue();
  if (OUTLINED_FUNCTION_6_0(v8))
  {
    OUTLINED_FUNCTION_0();
    OUTLINED_FUNCTION_1(&dword_2419D9000, v9, v10, v11, "must have fingerprints distance function", "{\"msg%{public}.0s\":\"must have fingerprints distance function\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v12, v13, v22, v23, v24, v25, v26);
  }

  _CLLogObjectForCategory_MicroLocation_Default();
  v14 = objc_claimAutoreleasedReturnValue();
  if (OUTLINED_FUNCTION_4(v14))
  {
    OUTLINED_FUNCTION_0();
    OUTLINED_FUNCTION_2(&dword_2419D9000, v15, v16, "{\"msg%{public}.0s\":\"must have fingerprints distance function\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v17, v18, v19, v20, v22, v23, v24, v25, v26);
  }

  result = abort_report_np();
  __break(1u);
  return result;
}

{
  void *v0;
  NSObject *v1;
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  NSObject *v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  NSObject *v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  uint64_t result;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint8_t v26;

  _CLLogObjectForCategory_MicroLocation_Default();
  v1 = objc_claimAutoreleasedReturnValue();
  if (OUTLINED_FUNCTION_5(v1))
  {
    OUTLINED_FUNCTION_0();
    OUTLINED_FUNCTION_3(&dword_2419D9000, v2, v3, "{\"msg%{public}.0s\":\"Cannot localize on invalid model!\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v4, v5, v6, v7, v22, v23, v24, v25, v26);
  }

  _CLLogObjectForCategory_MicroLocation_Default();
  v8 = objc_claimAutoreleasedReturnValue();
  if (OUTLINED_FUNCTION_6_0(v8))
  {
    OUTLINED_FUNCTION_0();
    OUTLINED_FUNCTION_1(&dword_2419D9000, v9, v10, v11, "Cannot localize on invalid model!", "{\"msg%{public}.0s\":\"Cannot localize on invalid model!\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v12, v13, v22, v23, v24, v25, v26);
  }

  _CLLogObjectForCategory_MicroLocation_Default();
  v14 = objc_claimAutoreleasedReturnValue();
  if (OUTLINED_FUNCTION_4(v14))
  {
    OUTLINED_FUNCTION_0();
    OUTLINED_FUNCTION_2(&dword_2419D9000, v15, v16, "{\"msg%{public}.0s\":\"Cannot localize on invalid model!\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v17, v18, v19, v20, v22, v23, v24, v25, v26);
  }

  result = abort_report_np();
  __break(1u);
  return result;
}

uint64_t CLMicroLocationBinaryRoiNullSpaceAlgorithm::getAdjustmentPowerForBinaryRoiDetectionThreshold()
{
  void *v0;
  NSObject *v1;
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  NSObject *v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  NSObject *v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint8_t v27;

  _CLLogObjectForCategory_MicroLocation_Default();
  v1 = objc_claimAutoreleasedReturnValue();
  if (OUTLINED_FUNCTION_5(v1))
  {
    OUTLINED_FUNCTION_0();
    OUTLINED_FUNCTION_3(&dword_2419D9000, v2, v3, "{\"msg%{public}.0s\":\"Detection threshold must be: 0 < THR < 1.0!\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v4, v5, v6, v7, v23, v24, v25, v26, v27);
  }

  _CLLogObjectForCategory_MicroLocation_Default();
  v8 = objc_claimAutoreleasedReturnValue();
  if (OUTLINED_FUNCTION_6_0(v8))
  {
    OUTLINED_FUNCTION_0();
    OUTLINED_FUNCTION_1(&dword_2419D9000, v9, v10, v11, "Detection threshold must be: 0 < THR < 1.0!", "{\"msg%{public}.0s\":\"Detection threshold must be: 0 < THR < 1.0!\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v12, v13, v23, v24, v25, v26, v27);
  }

  _CLLogObjectForCategory_MicroLocation_Default();
  v14 = objc_claimAutoreleasedReturnValue();
  if (OUTLINED_FUNCTION_4(v14))
  {
    OUTLINED_FUNCTION_0();
    OUTLINED_FUNCTION_2(&dword_2419D9000, v15, v16, "{\"msg%{public}.0s\":\"Detection threshold must be: 0 < THR < 1.0!\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v17, v18, v19, v20, v23, v24, v25, v26, v27);
  }

  v21 = abort_report_np();
  return CLMicroLocationBinaryRoiNullSpaceAlgorithm::createReducedDistancesMap(v21);
}

uint64_t CLMicroLocationBinaryRoiNullSpaceAlgorithm::createReducedDistancesMap()
{
  void *v0;
  NSObject *v1;
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  NSObject *v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  NSObject *v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  uint64_t result;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint8_t v26;

  _CLLogObjectForCategory_MicroLocation_Default();
  v1 = objc_claimAutoreleasedReturnValue();
  if (OUTLINED_FUNCTION_5(v1))
  {
    OUTLINED_FUNCTION_0();
    OUTLINED_FUNCTION_3(&dword_2419D9000, v2, v3, "{\"msg%{public}.0s\":\"Missing key kSettingsNullSpaceRoiPercentile\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v4, v5, v6, v7, v22, v23, v24, v25, v26);
  }

  _CLLogObjectForCategory_MicroLocation_Default();
  v8 = objc_claimAutoreleasedReturnValue();
  if (OUTLINED_FUNCTION_6_0(v8))
  {
    OUTLINED_FUNCTION_0();
    OUTLINED_FUNCTION_1(&dword_2419D9000, v9, v10, v11, "Missing key kSettingsNullSpaceRoiPercentile", "{\"msg%{public}.0s\":\"Missing key kSettingsNullSpaceRoiPercentile\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v12, v13, v22, v23, v24, v25, v26);
  }

  _CLLogObjectForCategory_MicroLocation_Default();
  v14 = objc_claimAutoreleasedReturnValue();
  if (OUTLINED_FUNCTION_4(v14))
  {
    OUTLINED_FUNCTION_0();
    OUTLINED_FUNCTION_2(&dword_2419D9000, v15, v16, "{\"msg%{public}.0s\":\"Missing key kSettingsNullSpaceRoiPercentile\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v17, v18, v19, v20, v22, v23, v24, v25, v26);
  }

  result = abort_report_np();
  __break(1u);
  return result;
}

{
  void *v0;
  NSObject *v1;
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  NSObject *v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  NSObject *v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  uint64_t result;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint8_t v26;

  _CLLogObjectForCategory_MicroLocation_Default();
  v1 = objc_claimAutoreleasedReturnValue();
  if (OUTLINED_FUNCTION_5(v1))
  {
    OUTLINED_FUNCTION_0();
    OUTLINED_FUNCTION_3(&dword_2419D9000, v2, v3, "{\"msg%{public}.0s\":\"Missing key kSettingsNullSpaceNotRoiPercentile\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v4, v5, v6, v7, v22, v23, v24, v25, v26);
  }

  _CLLogObjectForCategory_MicroLocation_Default();
  v8 = objc_claimAutoreleasedReturnValue();
  if (OUTLINED_FUNCTION_6_0(v8))
  {
    OUTLINED_FUNCTION_0();
    OUTLINED_FUNCTION_1(&dword_2419D9000, v9, v10, v11, "Missing key kSettingsNullSpaceNotRoiPercentile", "{\"msg%{public}.0s\":\"Missing key kSettingsNullSpaceNotRoiPercentile\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v12, v13, v22, v23, v24, v25, v26);
  }

  _CLLogObjectForCategory_MicroLocation_Default();
  v14 = objc_claimAutoreleasedReturnValue();
  if (OUTLINED_FUNCTION_4(v14))
  {
    OUTLINED_FUNCTION_0();
    OUTLINED_FUNCTION_2(&dword_2419D9000, v15, v16, "{\"msg%{public}.0s\":\"Missing key kSettingsNullSpaceNotRoiPercentile\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v17, v18, v19, v20, v22, v23, v24, v25, v26);
  }

  result = abort_report_np();
  __break(1u);
  return result;
}

void CLReducerFunction<std::multiset<double>,double>::parametrizedPercentileSorted()
{
  __assert_rtn("parametrizedPercentileSorted", "CLReducerFunction.h", 80, "container.size()>0");
}

{
  __assert_rtn("parametrizedPercentileSorted", "CLReducerFunction.h", 81, "prctile >= 0.0 && prctile <= 1.0");
}

{
  __assert_rtn("parametrizedPercentileSorted", "CLReducerFunction.h", 93, "(startIndex >= 0) && (startIndex <= static_cast<int>(container.size()) - 2)");
}

uint64_t CLMicroLocationFingerprintVector::operator[]()
{
  NSObject *v0;
  NSObject *v1;
  NSObject *v2;
  uint64_t result;
  uint8_t buf[56];
  uint64_t v5;

  v5 = *MEMORY[0x24BDAC8D0];
  _CLLogObjectForCategory_MicroLocation_Default();
  v0 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v0, OS_LOG_TYPE_FAULT))
  {
    OUTLINED_FUNCTION_0_3();
    _os_log_impl(&dword_2419D9000, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"index out of bounds\", \"ii\":%{public}llu, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x30u);
  }

  _CLLogObjectForCategory_MicroLocation_Default();
  v1 = objc_claimAutoreleasedReturnValue();
  if (os_signpost_enabled(v1))
  {
    OUTLINED_FUNCTION_0_3();
    _os_signpost_emit_with_name_impl(&dword_2419D9000, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "index out of bounds", "{\"msg%{public}.0s\":\"index out of bounds\", \"ii\":%{public}llu, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x30u);
  }

  _CLLogObjectForCategory_MicroLocation_Default();
  v2 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
  {
    OUTLINED_FUNCTION_0_3();
    _os_log_impl(&dword_2419D9000, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"index out of bounds\", \"ii\":%{public}llu, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x30u);
  }

  result = abort_report_np();
  __break(1u);
  return result;
}

void std::__tree<CLMicroLocationProto::Measurement,CLEventsBuffer<CLMicroLocationProto::Measurement,double,ProtoMeasurementGetTime>::EventsComparator,std::allocator<CLMicroLocationProto::Measurement>>::__emplace_hint_multi<CLMicroLocationProto::Measurement const&>(uint64_t a1, char *__p)
{
  if (*(_BYTE *)(a1 + 16))
    (**((void (***)(char *))__p + 4))(__p + 32);
  operator delete(__p);
}

uint64_t CLMicroLocationTriggerManager::setupCustomLoiRecordingManager()
{
  NSObject *v0;
  NSObject *v1;
  NSObject *v2;
  uint64_t v3;
  uint8_t buf[40];
  uint64_t v6;

  v6 = *MEMORY[0x24BDAC8D0];
  _CLLogObjectForCategory_MicroLocation_Default();
  v0 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v0, OS_LOG_TYPE_FAULT))
  {
    OUTLINED_FUNCTION_0();
    _os_log_impl(&dword_2419D9000, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Tried to setup CLMicroLocationTriggerManager with an invalide recording manager\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
  }

  _CLLogObjectForCategory_MicroLocation_Default();
  v1 = objc_claimAutoreleasedReturnValue();
  if (os_signpost_enabled(v1))
  {
    OUTLINED_FUNCTION_0();
    _os_signpost_emit_with_name_impl(&dword_2419D9000, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Tried to setup CLMicroLocationTriggerManager with an invalide recording manager", "{\"msg%{public}.0s\":\"Tried to setup CLMicroLocationTriggerManager with an invalide recording manager\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
  }

  _CLLogObjectForCategory_MicroLocation_Default();
  v2 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
  {
    OUTLINED_FUNCTION_0();
    _os_log_impl(&dword_2419D9000, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Tried to setup CLMicroLocationTriggerManager with an invalide recording manager\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
  }

  v3 = abort_report_np();
  return CLMiLoService::settingsString(v3);
}

uint64_t CLMiLoService::settingsString()
{
  NSObject *v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  NSObject *v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  NSObject *v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  uint64_t result;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint8_t v25;

  _CLLogObjectForCategory_MicroLocation_Default();
  v0 = objc_claimAutoreleasedReturnValue();
  if (OUTLINED_FUNCTION_4_1(v0))
  {
    OUTLINED_FUNCTION_1_1();
    OUTLINED_FUNCTION_9_0(&dword_2419D9000, v1, v2, "{\"msg%{public}.0s\":\"Unsupported Service Type\", \"ServiceType\":%{public}d, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v3, v4, v5, v6, v21, v22, v23, v24, v25);
  }

  _CLLogObjectForCategory_MicroLocation_Default();
  v7 = objc_claimAutoreleasedReturnValue();
  if (os_signpost_enabled(v7))
  {
    OUTLINED_FUNCTION_1_1();
    OUTLINED_FUNCTION_6_2(&dword_2419D9000, v8, v9, v10, "Unsupported Service Type", "{\"msg%{public}.0s\":\"Unsupported Service Type\", \"ServiceType\":%{public}d, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v11, v12, v21, v22, v23, v24, v25);
  }

  _CLLogObjectForCategory_MicroLocation_Default();
  v13 = objc_claimAutoreleasedReturnValue();
  if (OUTLINED_FUNCTION_8(v13))
  {
    OUTLINED_FUNCTION_1_1();
    OUTLINED_FUNCTION_8_1(&dword_2419D9000, v14, v15, "{\"msg%{public}.0s\":\"Unsupported Service Type\", \"ServiceType\":%{public}d, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v16, v17, v18, v19, v21, v22, v23, v24, v25);
  }

  result = abort_report_np();
  __break(1u);
  return result;
}

uint64_t CLMiLoService::uint64ToLocationTypesBitset()
{
  NSObject *v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  NSObject *v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  NSObject *v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint8_t v25;

  _CLLogObjectForCategory_MicroLocation_Default();
  v0 = objc_claimAutoreleasedReturnValue();
  if (OUTLINED_FUNCTION_4_1(v0))
  {
    OUTLINED_FUNCTION_0();
    OUTLINED_FUNCTION_3(&dword_2419D9000, v1, v2, "{\"msg%{public}.0s\":\"Error converting uint to location types: Value does not fit into bitset\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v3, v4, v5, v6, v21, v22, v23, v24, v25);
  }

  _CLLogObjectForCategory_MicroLocation_Default();
  v7 = objc_claimAutoreleasedReturnValue();
  if (OUTLINED_FUNCTION_6_0(v7))
  {
    OUTLINED_FUNCTION_0();
    OUTLINED_FUNCTION_1(&dword_2419D9000, v8, v9, v10, "Error converting uint to location types: Value does not fit into bitset", "{\"msg%{public}.0s\":\"Error converting uint to location types: Value does not fit into bitset\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v11, v12, v21, v22, v23, v24, v25);
  }

  _CLLogObjectForCategory_MicroLocation_Default();
  v13 = objc_claimAutoreleasedReturnValue();
  if (OUTLINED_FUNCTION_8(v13))
  {
    OUTLINED_FUNCTION_0();
    OUTLINED_FUNCTION_2(&dword_2419D9000, v14, v15, "{\"msg%{public}.0s\":\"Error converting uint to location types: Value does not fit into bitset\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v16, v17, v18, v19, v21, v22, v23, v24, v25);
  }

  abort_report_np();
  return CLMiLoService::updateModel();
}

uint64_t CLMiLoService::updateModel()
{
  NSObject *v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  NSObject *v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  NSObject *v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  uint64_t result;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint8_t v25;

  _CLLogObjectForCategory_MicroLocation_Default();
  v0 = objc_claimAutoreleasedReturnValue();
  if (OUTLINED_FUNCTION_4_1(v0))
  {
    OUTLINED_FUNCTION_0();
    OUTLINED_FUNCTION_3(&dword_2419D9000, v1, v2, "{\"msg%{public}.0s\":\"Update model - got null pointer\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v3, v4, v5, v6, v21, v22, v23, v24, v25);
  }

  _CLLogObjectForCategory_MicroLocation_Default();
  v7 = objc_claimAutoreleasedReturnValue();
  if (OUTLINED_FUNCTION_6_0(v7))
  {
    OUTLINED_FUNCTION_0();
    OUTLINED_FUNCTION_1(&dword_2419D9000, v8, v9, v10, "Update model - got null pointer", "{\"msg%{public}.0s\":\"Update model - got null pointer\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v11, v12, v21, v22, v23, v24, v25);
  }

  _CLLogObjectForCategory_MicroLocation_Default();
  v13 = objc_claimAutoreleasedReturnValue();
  if (OUTLINED_FUNCTION_8(v13))
  {
    OUTLINED_FUNCTION_0();
    OUTLINED_FUNCTION_2(&dword_2419D9000, v14, v15, "{\"msg%{public}.0s\":\"Update model - got null pointer\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v16, v17, v18, v19, v21, v22, v23, v24, v25);
  }

  result = abort_report_np();
  __break(1u);
  return result;
}

uint64_t CLMiLoService::modelTypeByServiceAndLocationType()
{
  NSObject *v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  NSObject *v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  NSObject *v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  uint64_t result;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint8_t buf;

  _CLLogObjectForCategory_MicroLocation_Default();
  v0 = objc_claimAutoreleasedReturnValue();
  if (OUTLINED_FUNCTION_4_1(v0))
  {
    OUTLINED_FUNCTION_2_1();
    OUTLINED_FUNCTION_9_0(&dword_2419D9000, v1, v2, "{\"msg%{public}.0s\":\"Service Type unsupported \", \"service type\":%{public}d, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v3, v4, v5, v6, v21, v22, v23, v24, buf);
  }

  _CLLogObjectForCategory_MicroLocation_Default();
  v7 = objc_claimAutoreleasedReturnValue();
  if (os_signpost_enabled(v7))
  {
    OUTLINED_FUNCTION_2_1();
    OUTLINED_FUNCTION_6_2(&dword_2419D9000, v8, v9, v10, "Service Type unsupported ", "{\"msg%{public}.0s\":\"Service Type unsupported \", \"service type\":%{public}d, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v11, v12, v21, v22, v23, v24, buf);
  }

  _CLLogObjectForCategory_MicroLocation_Default();
  v13 = objc_claimAutoreleasedReturnValue();
  if (OUTLINED_FUNCTION_8(v13))
    OUTLINED_FUNCTION_8_1(&dword_2419D9000, v14, v15, "{\"msg%{public}.0s\":\"Service Type unsupported \", \"service type\":%{public}d, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v16, v17, v18, v19, v21, v22, v23, v24, 3u);

  result = abort_report_np();
  __break(1u);
  return result;
}

void CLMicroLocationFingerprint::removeExceedingMeasurements()
{
  void *v0;
  NSObject *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint8_t v21;

  _CLLogObjectForCategory_MicroLocation_Default();
  v1 = objc_claimAutoreleasedReturnValue();
  if (OUTLINED_FUNCTION_7(v1))
  {
    OUTLINED_FUNCTION_0_1();
    OUTLINED_FUNCTION_12(&dword_2419D9000, v2, v3, "{\"msg%{public}.0s\":\"number of measurements still exceeds maximum\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v4, v5, v6, v7, v21);
  }

  _CLLogObjectForCategory_MicroLocation_Default();
  v8 = objc_claimAutoreleasedReturnValue();
  if (OUTLINED_FUNCTION_9(v8))
  {
    OUTLINED_FUNCTION_0_1();
    OUTLINED_FUNCTION_7_1(&dword_2419D9000, v9, v10, v11, "number of measurements still exceeds maximum", "{\"msg%{public}.0s\":\"number of measurements still exceeds maximum\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v12, v13, v21);
  }

  _CLLogObjectForCategory_MicroLocation_Default();
  v14 = objc_claimAutoreleasedReturnValue();
  if (OUTLINED_FUNCTION_8_0(v14))
  {
    OUTLINED_FUNCTION_0_1();
    OUTLINED_FUNCTION_13(&dword_2419D9000, v15, v16, "{\"msg%{public}.0s\":\"number of measurements still exceeds maximum\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v17, v18, v19, v20, v21);
  }
  OUTLINED_FUNCTION_6();
}

uint64_t ULSettings::getFingerprintDistanceFunctionParamsForType()
{
  NSObject *v0;
  NSObject *v1;
  NSObject *v2;
  uint64_t result;
  uint8_t buf[56];
  uint64_t v5;

  v5 = *MEMORY[0x24BDAC8D0];
  _CLLogObjectForCategory_MicroLocation_Default();
  v0 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v0, OS_LOG_TYPE_FAULT))
  {
    OUTLINED_FUNCTION_2_1();
    _os_log_impl(&dword_2419D9000, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Unsupported distance function type\", \"type\":%{public}u, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x2Cu);
  }

  _CLLogObjectForCategory_MicroLocation_Default();
  v1 = objc_claimAutoreleasedReturnValue();
  if (os_signpost_enabled(v1))
  {
    OUTLINED_FUNCTION_2_1();
    _os_signpost_emit_with_name_impl(&dword_2419D9000, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Unsupported distance function type", "{\"msg%{public}.0s\":\"Unsupported distance function type\", \"type\":%{public}u, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x2Cu);
  }

  _CLLogObjectForCategory_MicroLocation_Default();
  v2 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
  {
    OUTLINED_FUNCTION_2_1();
    _os_log_impl(&dword_2419D9000, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Unsupported distance function type\", \"type\":%{public}u, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x2Cu);
  }

  result = abort_report_np();
  __break(1u);
  return result;
}

uint64_t CLMicroLocationSingleClusterNullSpaceAlgorithm::localize()
{
  void *v0;
  NSObject *v1;
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  NSObject *v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  NSObject *v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  uint64_t result;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint8_t v26;

  _CLLogObjectForCategory_MicroLocation_Default();
  v1 = objc_claimAutoreleasedReturnValue();
  if (OUTLINED_FUNCTION_5(v1))
  {
    OUTLINED_FUNCTION_0();
    OUTLINED_FUNCTION_3(&dword_2419D9000, v2, v3, "{\"msg%{public}.0s\":\"must have fingerprints distance function\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v4, v5, v6, v7, v22, v23, v24, v25, v26);
  }

  _CLLogObjectForCategory_MicroLocation_Default();
  v8 = objc_claimAutoreleasedReturnValue();
  if (OUTLINED_FUNCTION_6_0(v8))
  {
    OUTLINED_FUNCTION_0();
    OUTLINED_FUNCTION_1(&dword_2419D9000, v9, v10, v11, "must have fingerprints distance function", "{\"msg%{public}.0s\":\"must have fingerprints distance function\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v12, v13, v22, v23, v24, v25, v26);
  }

  _CLLogObjectForCategory_MicroLocation_Default();
  v14 = objc_claimAutoreleasedReturnValue();
  if (OUTLINED_FUNCTION_4(v14))
  {
    OUTLINED_FUNCTION_0();
    OUTLINED_FUNCTION_2(&dword_2419D9000, v15, v16, "{\"msg%{public}.0s\":\"must have fingerprints distance function\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v17, v18, v19, v20, v22, v23, v24, v25, v26);
  }

  result = abort_report_np();
  __break(1u);
  return result;
}

{
  void *v0;
  NSObject *v1;
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  NSObject *v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  NSObject *v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  uint64_t result;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint8_t v26;

  _CLLogObjectForCategory_MicroLocation_Default();
  v1 = objc_claimAutoreleasedReturnValue();
  if (OUTLINED_FUNCTION_5(v1))
  {
    OUTLINED_FUNCTION_0();
    OUTLINED_FUNCTION_3(&dword_2419D9000, v2, v3, "{\"msg%{public}.0s\":\"Cannot localize on invalid model!\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v4, v5, v6, v7, v22, v23, v24, v25, v26);
  }

  _CLLogObjectForCategory_MicroLocation_Default();
  v8 = objc_claimAutoreleasedReturnValue();
  if (OUTLINED_FUNCTION_6_0(v8))
  {
    OUTLINED_FUNCTION_0();
    OUTLINED_FUNCTION_1(&dword_2419D9000, v9, v10, v11, "Cannot localize on invalid model!", "{\"msg%{public}.0s\":\"Cannot localize on invalid model!\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v12, v13, v22, v23, v24, v25, v26);
  }

  _CLLogObjectForCategory_MicroLocation_Default();
  v14 = objc_claimAutoreleasedReturnValue();
  if (OUTLINED_FUNCTION_4(v14))
  {
    OUTLINED_FUNCTION_0();
    OUTLINED_FUNCTION_2(&dword_2419D9000, v15, v16, "{\"msg%{public}.0s\":\"Cannot localize on invalid model!\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v17, v18, v19, v20, v22, v23, v24, v25, v26);
  }

  result = abort_report_np();
  __break(1u);
  return result;
}

void CLMicroLocationSemiSupervisedAlgorithm::learnSelfTrainingSemiSupervisedModel(NSObject **a1)
{
  NSObject *v2;
  NSObject *v3;
  NSObject *v4;
  uint8_t v5[40];
  uint64_t v6;

  v6 = *MEMORY[0x24BDAC8D0];
  _CLLogObjectForCategory_MicroLocation_Default();
  v2 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
  {
    OUTLINED_FUNCTION_0_1();
    _os_log_impl(&dword_2419D9000, v2, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Error, localization probabilities were not sorted in descending order\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v5, 0x26u);
  }

  _CLLogObjectForCategory_MicroLocation_Default();
  v3 = objc_claimAutoreleasedReturnValue();
  if (os_signpost_enabled(v3))
  {
    OUTLINED_FUNCTION_0_1();
    _os_signpost_emit_with_name_impl(&dword_2419D9000, v3, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Error, localization probabilities were not sorted in descending order", "{\"msg%{public}.0s\":\"Error, localization probabilities were not sorted in descending order\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v5, 0x26u);
  }

  _CLLogObjectForCategory_MicroLocation_Default();
  v4 = objc_claimAutoreleasedReturnValue();
  *a1 = v4;
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    OUTLINED_FUNCTION_0_1();
    _os_log_impl(&dword_2419D9000, v4, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Error, localization probabilities were not sorted in descending order\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v5, 0x26u);
  }
}

void CLMicroLocationPublishHelper::duetEventsFromLocalizationResultMeasurement()
{
  void *v0;
  NSObject *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint8_t v21;

  _CLLogObjectForCategory_MicroLocation_Default();
  v1 = objc_claimAutoreleasedReturnValue();
  if (OUTLINED_FUNCTION_7(v1))
  {
    OUTLINED_FUNCTION_0_1();
    OUTLINED_FUNCTION_12(&dword_2419D9000, v2, v3, "{\"msg%{public}.0s\":\"localization results vector cannot be empty\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v4, v5, v6, v7, v21);
  }

  _CLLogObjectForCategory_MicroLocation_Default();
  v8 = objc_claimAutoreleasedReturnValue();
  if (OUTLINED_FUNCTION_9(v8))
  {
    OUTLINED_FUNCTION_0_1();
    OUTLINED_FUNCTION_7_1(&dword_2419D9000, v9, v10, v11, "localization results vector cannot be empty", "{\"msg%{public}.0s\":\"localization results vector cannot be empty\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v12, v13, v21);
  }

  _CLLogObjectForCategory_MicroLocation_Default();
  v14 = objc_claimAutoreleasedReturnValue();
  if (OUTLINED_FUNCTION_8_0(v14))
  {
    OUTLINED_FUNCTION_0_1();
    OUTLINED_FUNCTION_13(&dword_2419D9000, v15, v16, "{\"msg%{public}.0s\":\"localization results vector cannot be empty\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v17, v18, v19, v20, v21);
  }
  OUTLINED_FUNCTION_6();
}

void CLMicroLocationPublishHelper::biomePublicEventsFromLocalizationResultMeasurement()
{
  void *v0;
  NSObject *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint8_t v21;

  _CLLogObjectForCategory_MicroLocation_Default();
  v1 = objc_claimAutoreleasedReturnValue();
  if (OUTLINED_FUNCTION_7(v1))
  {
    OUTLINED_FUNCTION_0_1();
    OUTLINED_FUNCTION_12(&dword_2419D9000, v2, v3, "{\"msg%{public}.0s\":\"localization results vector cannot be empty\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v4, v5, v6, v7, v21);
  }

  _CLLogObjectForCategory_MicroLocation_Default();
  v8 = objc_claimAutoreleasedReturnValue();
  if (OUTLINED_FUNCTION_9(v8))
  {
    OUTLINED_FUNCTION_0_1();
    OUTLINED_FUNCTION_7_1(&dword_2419D9000, v9, v10, v11, "localization results vector cannot be empty", "{\"msg%{public}.0s\":\"localization results vector cannot be empty\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v12, v13, v21);
  }

  _CLLogObjectForCategory_MicroLocation_Default();
  v14 = objc_claimAutoreleasedReturnValue();
  if (OUTLINED_FUNCTION_8_0(v14))
  {
    OUTLINED_FUNCTION_0_1();
    OUTLINED_FUNCTION_13(&dword_2419D9000, v15, v16, "{\"msg%{public}.0s\":\"localization results vector cannot be empty\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v17, v18, v19, v20, v21);
  }
  OUTLINED_FUNCTION_6();
}

void CLMicroLocationPublishHelper::biomeRestrictedEventsFromLocalizationResultMeasurement()
{
  void *v0;
  NSObject *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint8_t v21;

  _CLLogObjectForCategory_MicroLocation_Default();
  v1 = objc_claimAutoreleasedReturnValue();
  if (OUTLINED_FUNCTION_7(v1))
  {
    OUTLINED_FUNCTION_0_1();
    OUTLINED_FUNCTION_12(&dword_2419D9000, v2, v3, "{\"msg%{public}.0s\":\"localization results vector cannot be empty\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v4, v5, v6, v7, v21);
  }

  _CLLogObjectForCategory_MicroLocation_Default();
  v8 = objc_claimAutoreleasedReturnValue();
  if (OUTLINED_FUNCTION_9(v8))
  {
    OUTLINED_FUNCTION_0_1();
    OUTLINED_FUNCTION_7_1(&dword_2419D9000, v9, v10, v11, "localization results vector cannot be empty", "{\"msg%{public}.0s\":\"localization results vector cannot be empty\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v12, v13, v21);
  }

  _CLLogObjectForCategory_MicroLocation_Default();
  v14 = objc_claimAutoreleasedReturnValue();
  if (OUTLINED_FUNCTION_8_0(v14))
  {
    OUTLINED_FUNCTION_0_1();
    OUTLINED_FUNCTION_13(&dword_2419D9000, v15, v16, "{\"msg%{public}.0s\":\"localization results vector cannot be empty\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v17, v18, v19, v20, v21);
  }
  OUTLINED_FUNCTION_6();
}

uint64_t CLMicroLocationRecorder::recordMeasurementBatch()
{
  void *v0;
  NSObject *v1;
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  NSObject *v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  NSObject *v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint8_t v27;

  _CLLogObjectForCategory_MicroLocation_Default();
  v1 = objc_claimAutoreleasedReturnValue();
  if (OUTLINED_FUNCTION_5(v1))
  {
    OUTLINED_FUNCTION_0();
    OUTLINED_FUNCTION_3(&dword_2419D9000, v2, v3, "{\"msg%{public}.0s\":\"Assertion failed, no current transaction when recording batch of measurementWrappers\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v4, v5, v6, v7, v23, v24, v25, v26, v27);
  }

  _CLLogObjectForCategory_MicroLocation_Default();
  v8 = objc_claimAutoreleasedReturnValue();
  if (OUTLINED_FUNCTION_6_0(v8))
  {
    OUTLINED_FUNCTION_0();
    OUTLINED_FUNCTION_1(&dword_2419D9000, v9, v10, v11, "Assertion failed, no current transaction when recording batch of measurementWrappers", "{\"msg%{public}.0s\":\"Assertion failed, no current transaction when recording batch of measurementWrappers\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v12, v13, v23, v24, v25, v26, v27);
  }

  _CLLogObjectForCategory_MicroLocation_Default();
  v14 = objc_claimAutoreleasedReturnValue();
  if (OUTLINED_FUNCTION_4(v14))
  {
    OUTLINED_FUNCTION_0();
    OUTLINED_FUNCTION_2(&dword_2419D9000, v15, v16, "{\"msg%{public}.0s\":\"Assertion failed, no current transaction when recording batch of measurementWrappers\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v17, v18, v19, v20, v23, v24, v25, v26, v27);
  }

  v21 = abort_report_np();
  return CLMicroLocationRecorder::recordEvent(v21);
}

uint64_t CLMicroLocationRecorder::recordEvent()
{
  void *v0;
  NSObject *v1;
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  NSObject *v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  NSObject *v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  uint64_t result;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint8_t v26;

  _CLLogObjectForCategory_MicroLocation_Default();
  v1 = objc_claimAutoreleasedReturnValue();
  if (OUTLINED_FUNCTION_5(v1))
  {
    OUTLINED_FUNCTION_0();
    OUTLINED_FUNCTION_3(&dword_2419D9000, v2, v3, "{\"msg%{public}.0s\":\"Assertion failed, no current transaction when recording an event\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v4, v5, v6, v7, v22, v23, v24, v25, v26);
  }

  _CLLogObjectForCategory_MicroLocation_Default();
  v8 = objc_claimAutoreleasedReturnValue();
  if (OUTLINED_FUNCTION_6_0(v8))
  {
    OUTLINED_FUNCTION_0();
    OUTLINED_FUNCTION_1(&dword_2419D9000, v9, v10, v11, "Assertion failed, no current transaction when recording an event", "{\"msg%{public}.0s\":\"Assertion failed, no current transaction when recording an event\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v12, v13, v22, v23, v24, v25, v26);
  }

  _CLLogObjectForCategory_MicroLocation_Default();
  v14 = objc_claimAutoreleasedReturnValue();
  if (OUTLINED_FUNCTION_4(v14))
  {
    OUTLINED_FUNCTION_0();
    OUTLINED_FUNCTION_2(&dword_2419D9000, v15, v16, "{\"msg%{public}.0s\":\"Assertion failed, no current transaction when recording an event\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v17, v18, v19, v20, v22, v23, v24, v25, v26);
  }

  result = abort_report_np();
  __break(1u);
  return result;
}

#error "241B7EFC4: call analysis failed (funcsize=53)"

#error "241B7F0C4: call analysis failed (funcsize=53)"

#error "241B7F1C4: call analysis failed (funcsize=53)"

#error "241B7F2C4: call analysis failed (funcsize=53)"

#error "241B7F3C4: call analysis failed (funcsize=53)"

#error "241B7F4C4: call analysis failed (funcsize=53)"

#error "241B7F5C4: call analysis failed (funcsize=53)"

#error "241B7F6C4: call analysis failed (funcsize=53)"

#error "241B7F7C4: call analysis failed (funcsize=53)"

#error "241B7F8C4: call analysis failed (funcsize=53)"

uint64_t CLMicroLocationNearestNeighborAlgorithm::localize()
{
  void *v0;
  NSObject *v1;
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  NSObject *v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  NSObject *v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  uint64_t result;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint8_t v26;

  _CLLogObjectForCategory_MicroLocation_Default();
  v1 = objc_claimAutoreleasedReturnValue();
  if (OUTLINED_FUNCTION_5(v1))
  {
    OUTLINED_FUNCTION_0();
    OUTLINED_FUNCTION_3(&dword_2419D9000, v2, v3, "{\"msg%{public}.0s\":\"must have fingerprints distance function\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v4, v5, v6, v7, v22, v23, v24, v25, v26);
  }

  _CLLogObjectForCategory_MicroLocation_Default();
  v8 = objc_claimAutoreleasedReturnValue();
  if (os_signpost_enabled(v8))
  {
    OUTLINED_FUNCTION_0();
    OUTLINED_FUNCTION_1(&dword_2419D9000, v9, v10, v11, "must have fingerprints distance function", "{\"msg%{public}.0s\":\"must have fingerprints distance function\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v12, v13, v22, v23, v24, v25, v26);
  }

  _CLLogObjectForCategory_MicroLocation_Default();
  v14 = objc_claimAutoreleasedReturnValue();
  if (OUTLINED_FUNCTION_4(v14))
  {
    OUTLINED_FUNCTION_0();
    OUTLINED_FUNCTION_2(&dword_2419D9000, v15, v16, "{\"msg%{public}.0s\":\"must have fingerprints distance function\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v17, v18, v19, v20, v22, v23, v24, v25, v26);
  }

  result = abort_report_np();
  __break(1u);
  return result;
}

{
  void *v0;
  NSObject *v1;
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  NSObject *v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  NSObject *v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  uint64_t result;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint8_t v26;

  _CLLogObjectForCategory_MicroLocation_Default();
  v1 = objc_claimAutoreleasedReturnValue();
  if (OUTLINED_FUNCTION_5(v1))
  {
    OUTLINED_FUNCTION_0();
    OUTLINED_FUNCTION_3(&dword_2419D9000, v2, v3, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v4, v5, v6, v7, v22, v23, v24, v25, v26);
  }

  _CLLogObjectForCategory_MicroLocation_Default();
  v8 = objc_claimAutoreleasedReturnValue();
  if (os_signpost_enabled(v8))
  {
    OUTLINED_FUNCTION_0();
    OUTLINED_FUNCTION_1(&dword_2419D9000, v9, v10, v11, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v12, v13, v22, v23, v24, v25, v26);
  }

  _CLLogObjectForCategory_MicroLocation_Default();
  v14 = objc_claimAutoreleasedReturnValue();
  if (OUTLINED_FUNCTION_4(v14))
  {
    OUTLINED_FUNCTION_0();
    OUTLINED_FUNCTION_2(&dword_2419D9000, v15, v16, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v17, v18, v19, v20, v22, v23, v24, v25, v26);
  }

  result = abort_report_np();
  __break(1u);
  return result;
}

uint64_t sub_241B7FC3C()
{
  return MEMORY[0x24BDCBBB0]();
}

uint64_t sub_241B7FC48()
{
  return MEMORY[0x24BDCBBC8]();
}

uint64_t sub_241B7FC54()
{
  return MEMORY[0x24BDCBBD8]();
}

uint64_t sub_241B7FC60()
{
  return MEMORY[0x24BDCBBF0]();
}

uint64_t sub_241B7FC6C()
{
  return MEMORY[0x24BDCBC10]();
}

uint64_t sub_241B7FC78()
{
  return MEMORY[0x24BDCC1E0]();
}

uint64_t sub_241B7FC84()
{
  return MEMORY[0x24BDCDC10]();
}

uint64_t sub_241B7FC90()
{
  return MEMORY[0x24BDCDCA0]();
}

uint64_t sub_241B7FC9C()
{
  return MEMORY[0x24BDCDCE0]();
}

uint64_t sub_241B7FCA8()
{
  return MEMORY[0x24BEDFE28]();
}

uint64_t sub_241B7FCB4()
{
  return MEMORY[0x24BEDFE30]();
}

uint64_t sub_241B7FCC0()
{
  return MEMORY[0x24BEDFE48]();
}

uint64_t sub_241B7FCCC()
{
  return MEMORY[0x24BEDFE60]();
}

uint64_t sub_241B7FCD8()
{
  return MEMORY[0x24BEDFE68]();
}

uint64_t sub_241B7FCE4()
{
  return MEMORY[0x24BEDFE80]();
}

uint64_t sub_241B7FCF0()
{
  return MEMORY[0x24BEDFEB0]();
}

uint64_t sub_241B7FCFC()
{
  return MEMORY[0x24BEDFEC8]();
}

uint64_t sub_241B7FD08()
{
  return MEMORY[0x24BEDFED0]();
}

uint64_t sub_241B7FD14()
{
  return MEMORY[0x24BEDFED8]();
}

uint64_t sub_241B7FD20()
{
  return MEMORY[0x24BEDFEE0]();
}

uint64_t sub_241B7FD2C()
{
  return MEMORY[0x24BEDFEE8]();
}

uint64_t sub_241B7FD38()
{
  return MEMORY[0x24BEDFEF0]();
}

uint64_t sub_241B7FD44()
{
  return MEMORY[0x24BEDFEF8]();
}

uint64_t sub_241B7FD50()
{
  return MEMORY[0x24BEDFF28]();
}

uint64_t sub_241B7FD5C()
{
  return MEMORY[0x24BEE78A8]();
}

uint64_t sub_241B7FD68()
{
  return MEMORY[0x24BEE78C0]();
}

uint64_t sub_241B7FD74()
{
  return MEMORY[0x24BEE78D8]();
}

uint64_t sub_241B7FD80()
{
  return MEMORY[0x24BEE60D8]();
}

uint64_t sub_241B7FD8C()
{
  return MEMORY[0x24BEE6100]();
}

uint64_t sub_241B7FD98()
{
  return MEMORY[0x24BDC61B0]();
}

uint64_t sub_241B7FDA4()
{
  return MEMORY[0x24BDC63B8]();
}

uint64_t sub_241B7FDB0()
{
  return MEMORY[0x24BDC63C8]();
}

uint64_t sub_241B7FDBC()
{
  return MEMORY[0x24BDC63D8]();
}

