void sub_241A6C560(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void CLMicroLocationLoiManager::setupInCustomLoiState(CLMicroLocationLoiManager *this)
{
  uint64_t **v2;
  uint64_t v3;
  uint64_t **v4;
  void *v5[2];
  char v6;
  void *__p[2];
  char v8;
  void **v9;

  v2 = (uint64_t **)operator new();
  CLMicroLocationStateMachine::StateBase::StateBase((CLMicroLocationStateMachine::StateBase *)v2, 0);
  MEMORY[0x2426A02C4](v2 + 1, "In Custom LOI State");
  std::string::basic_string[abi:ne180100]<0>(__p, "Geofence Entry");
  v9 = __p;
  *((_QWORD *)std::__tree<std::__value_type<std::string,CLMicroLocationStateMachine::EventHandlerWrapperBase *>,std::__map_value_compare<std::string,std::__value_type<std::string,CLMicroLocationStateMachine::EventHandlerWrapperBase *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CLMicroLocationStateMachine::EventHandlerWrapperBase *>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v2 + 6, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v9)+ 7) = (char *)this + 160;
  if (v8 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "Geofence Exit");
  v9 = __p;
  *((_QWORD *)std::__tree<std::__value_type<std::string,CLMicroLocationStateMachine::EventHandlerWrapperBase *>,std::__map_value_compare<std::string,std::__value_type<std::string,CLMicroLocationStateMachine::EventHandlerWrapperBase *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CLMicroLocationStateMachine::EventHandlerWrapperBase *>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v2 + 6, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v9)+ 7) = (char *)this + 152;
  if (v8 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "Enable Custom LOI");
  v9 = __p;
  *((_QWORD *)std::__tree<std::__value_type<std::string,CLMicroLocationStateMachine::EventHandlerWrapperBase *>,std::__map_value_compare<std::string,std::__value_type<std::string,CLMicroLocationStateMachine::EventHandlerWrapperBase *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CLMicroLocationStateMachine::EventHandlerWrapperBase *>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v2 + 6, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v9)+ 7) = (char *)this + 168;
  if (v8 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "Disable Custom LOI");
  v9 = __p;
  *((_QWORD *)std::__tree<std::__value_type<std::string,CLMicroLocationStateMachine::EventHandlerWrapperBase *>,std::__map_value_compare<std::string,std::__value_type<std::string,CLMicroLocationStateMachine::EventHandlerWrapperBase *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CLMicroLocationStateMachine::EventHandlerWrapperBase *>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v2 + 6, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v9)+ 7) = (char *)this + 176;
  if (v8 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(v5, "In Custom LOI State");
  v4 = v2;
  CLMicroLocationStateMachine::StateMachineBase::addStateToStateMap((uint64_t)this + 8, (__int128 *)v5, (uint64_t *)&v4);
  v3 = (uint64_t)v4;
  v4 = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  if (v6 < 0)
    operator delete(v5[0]);
}

void sub_241A6C7C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void CLMicroLocationLoiManager::setupEnteringHomeLoiState(CLMicroLocationLoiManager *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5[2];
  char v6;
  void *__p[2];
  char v8;
  void **v9;

  v2 = operator new();
  CLMicroLocationStateMachine::StateBase::StateBase((CLMicroLocationStateMachine::StateBase *)v2, 0);
  MEMORY[0x2426A02C4](v2 + 8, "In the process of entering Home LOI");
  *(_QWORD *)(v2 + 40) = (char *)this + 184;
  std::string::basic_string[abi:ne180100]<0>(__p, "Enable Custom LOI");
  v9 = __p;
  *((_QWORD *)std::__tree<std::__value_type<std::string,CLMicroLocationStateMachine::EventHandlerWrapperBase *>,std::__map_value_compare<std::string,std::__value_type<std::string,CLMicroLocationStateMachine::EventHandlerWrapperBase *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CLMicroLocationStateMachine::EventHandlerWrapperBase *>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)(v2 + 48), (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v9)+ 7) = (char *)this + 192;
  if (v8 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "Geofence Entry");
  v9 = __p;
  *((_QWORD *)std::__tree<std::__value_type<std::string,CLMicroLocationStateMachine::EventHandlerWrapperBase *>,std::__map_value_compare<std::string,std::__value_type<std::string,CLMicroLocationStateMachine::EventHandlerWrapperBase *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CLMicroLocationStateMachine::EventHandlerWrapperBase *>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)(v2 + 48), (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v9)+ 7) = (char *)this + 200;
  if (v8 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "Got LOI Event");
  v9 = __p;
  *((_QWORD *)std::__tree<std::__value_type<std::string,CLMicroLocationStateMachine::EventHandlerWrapperBase *>,std::__map_value_compare<std::string,std::__value_type<std::string,CLMicroLocationStateMachine::EventHandlerWrapperBase *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CLMicroLocationStateMachine::EventHandlerWrapperBase *>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)(v2 + 48), (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v9)+ 7) = (char *)this + 208;
  if (v8 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "Failed to Get LOI Event");
  v9 = __p;
  *((_QWORD *)std::__tree<std::__value_type<std::string,CLMicroLocationStateMachine::EventHandlerWrapperBase *>,std::__map_value_compare<std::string,std::__value_type<std::string,CLMicroLocationStateMachine::EventHandlerWrapperBase *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CLMicroLocationStateMachine::EventHandlerWrapperBase *>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)(v2 + 48), (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v9)+ 7) = (char *)this + 216;
  if (v8 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "Fetched Place Inference For Current Location");
  v9 = __p;
  *((_QWORD *)std::__tree<std::__value_type<std::string,CLMicroLocationStateMachine::EventHandlerWrapperBase *>,std::__map_value_compare<std::string,std::__value_type<std::string,CLMicroLocationStateMachine::EventHandlerWrapperBase *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CLMicroLocationStateMachine::EventHandlerWrapperBase *>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)(v2 + 48), (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v9)+ 7) = (char *)this + 224;
  if (v8 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "Failed To Fetched Place Inference");
  v9 = __p;
  *((_QWORD *)std::__tree<std::__value_type<std::string,CLMicroLocationStateMachine::EventHandlerWrapperBase *>,std::__map_value_compare<std::string,std::__value_type<std::string,CLMicroLocationStateMachine::EventHandlerWrapperBase *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CLMicroLocationStateMachine::EventHandlerWrapperBase *>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)(v2 + 48), (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v9)+ 7) = (char *)this + 232;
  if (v8 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "Got Related LOIs");
  v9 = __p;
  *((_QWORD *)std::__tree<std::__value_type<std::string,CLMicroLocationStateMachine::EventHandlerWrapperBase *>,std::__map_value_compare<std::string,std::__value_type<std::string,CLMicroLocationStateMachine::EventHandlerWrapperBase *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CLMicroLocationStateMachine::EventHandlerWrapperBase *>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)(v2 + 48), (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v9)+ 7) = (char *)this + 240;
  if (v8 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "Failed to Get Related LOIs");
  v9 = __p;
  *((_QWORD *)std::__tree<std::__value_type<std::string,CLMicroLocationStateMachine::EventHandlerWrapperBase *>,std::__map_value_compare<std::string,std::__value_type<std::string,CLMicroLocationStateMachine::EventHandlerWrapperBase *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CLMicroLocationStateMachine::EventHandlerWrapperBase *>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)(v2 + 48), (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v9)+ 7) = (char *)this + 248;
  if (v8 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(v5, "In the process of entering Home LOI");
  v4 = v2;
  CLMicroLocationStateMachine::StateMachineBase::addStateToStateMap((uint64_t)this + 8, (__int128 *)v5, &v4);
  v3 = v4;
  v4 = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  if (v6 < 0)
    operator delete(v5[0]);
}

void sub_241A6CB54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_241A6CBB8()
{
  uint64_t v0;

  MEMORY[0x2426A04D4](v0, 0x10B3C40A3150B78);
  JUMPOUT(0x241A6CBB0);
}

void CLMicroLocationLoiManager::setupEnteringCustomLoiState(CLMicroLocationLoiManager *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5[2];
  char v6;
  void *__p[2];
  char v8;
  void **v9;

  v2 = operator new();
  CLMicroLocationStateMachine::StateBase::StateBase((CLMicroLocationStateMachine::StateBase *)v2, 0);
  MEMORY[0x2426A02C4](v2 + 8, "In the process of entering Custom LOI");
  *(_QWORD *)(v2 + 40) = (char *)this + 256;
  std::string::basic_string[abi:ne180100]<0>(__p, "Enable Custom LOI");
  v9 = __p;
  *((_QWORD *)std::__tree<std::__value_type<std::string,CLMicroLocationStateMachine::EventHandlerWrapperBase *>,std::__map_value_compare<std::string,std::__value_type<std::string,CLMicroLocationStateMachine::EventHandlerWrapperBase *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CLMicroLocationStateMachine::EventHandlerWrapperBase *>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)(v2 + 48), (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v9)+ 7) = (char *)this + 264;
  if (v8 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "Geofence Entry");
  v9 = __p;
  *((_QWORD *)std::__tree<std::__value_type<std::string,CLMicroLocationStateMachine::EventHandlerWrapperBase *>,std::__map_value_compare<std::string,std::__value_type<std::string,CLMicroLocationStateMachine::EventHandlerWrapperBase *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CLMicroLocationStateMachine::EventHandlerWrapperBase *>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)(v2 + 48), (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v9)+ 7) = (char *)this + 272;
  if (v8 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "Got Location Update");
  v9 = __p;
  *((_QWORD *)std::__tree<std::__value_type<std::string,CLMicroLocationStateMachine::EventHandlerWrapperBase *>,std::__map_value_compare<std::string,std::__value_type<std::string,CLMicroLocationStateMachine::EventHandlerWrapperBase *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CLMicroLocationStateMachine::EventHandlerWrapperBase *>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)(v2 + 48), (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v9)+ 7) = (char *)this + 280;
  if (v8 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "Failed To Get Location Update");
  v9 = __p;
  *((_QWORD *)std::__tree<std::__value_type<std::string,CLMicroLocationStateMachine::EventHandlerWrapperBase *>,std::__map_value_compare<std::string,std::__value_type<std::string,CLMicroLocationStateMachine::EventHandlerWrapperBase *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CLMicroLocationStateMachine::EventHandlerWrapperBase *>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)(v2 + 48), (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v9)+ 7) = (char *)this + 288;
  if (v8 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "Started Process of Activaing Geofence");
  v9 = __p;
  *((_QWORD *)std::__tree<std::__value_type<std::string,CLMicroLocationStateMachine::EventHandlerWrapperBase *>,std::__map_value_compare<std::string,std::__value_type<std::string,CLMicroLocationStateMachine::EventHandlerWrapperBase *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CLMicroLocationStateMachine::EventHandlerWrapperBase *>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)(v2 + 48), (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v9)+ 7) = (char *)this + 296;
  if (v8 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "Failed To Set Geofence");
  v9 = __p;
  *((_QWORD *)std::__tree<std::__value_type<std::string,CLMicroLocationStateMachine::EventHandlerWrapperBase *>,std::__map_value_compare<std::string,std::__value_type<std::string,CLMicroLocationStateMachine::EventHandlerWrapperBase *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CLMicroLocationStateMachine::EventHandlerWrapperBase *>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)(v2 + 48), (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v9)+ 7) = (char *)this + 304;
  if (v8 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "Entering Custom LOI Timeout");
  v9 = __p;
  *((_QWORD *)std::__tree<std::__value_type<std::string,CLMicroLocationStateMachine::EventHandlerWrapperBase *>,std::__map_value_compare<std::string,std::__value_type<std::string,CLMicroLocationStateMachine::EventHandlerWrapperBase *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CLMicroLocationStateMachine::EventHandlerWrapperBase *>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)(v2 + 48), (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v9)+ 7) = (char *)this + 312;
  if (v8 < 0)
    operator delete(__p[0]);
  *(_QWORD *)(v2 + 72) = (char *)this + 320;
  std::string::basic_string[abi:ne180100]<0>(v5, "In the process of entering Custom LOI");
  v4 = v2;
  CLMicroLocationStateMachine::StateMachineBase::addStateToStateMap((uint64_t)this + 8, (__int128 *)v5, &v4);
  v3 = v4;
  v4 = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  if (v6 < 0)
    operator delete(v5[0]);
}

void sub_241A6CEB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void CLMicroLocationLoiManager::~CLMicroLocationLoiManager(CLMicroLocationLoiManager *this)
{
  CLMicroLocationStateMachine::StateMachineBase *v2;
  void *v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;

  *(_QWORD *)this = &off_2511D50B8;
  *((_QWORD *)this + 1) = &unk_2511D5128;
  v2 = (CLMicroLocationLoiManager *)((char *)this + 8);

  v3 = (void *)*((_QWORD *)this + 57);
  if (v3)
  {
    *((_QWORD *)this + 58) = v3;
    operator delete(v3);
  }
  if (*((char *)this + 407) < 0)
    operator delete(*((void **)this + 48));

  CLMacAddress::newFromUint64((CLMacAddress *)this + 40, v4);
  CLMacAddress::newFromUint64((CLMacAddress *)this + 39, v5);
  CLMacAddress::newFromUint64((CLMacAddress *)this + 38, v6);
  CLMacAddress::newFromUint64((CLMacAddress *)this + 37, v7);
  CLMacAddress::newFromUint64((CLMacAddress *)this + 36, v8);
  CLMacAddress::newFromUint64((CLMacAddress *)this + 35, v9);
  CLMacAddress::newFromUint64((CLMacAddress *)this + 34, v10);
  CLMacAddress::newFromUint64((CLMacAddress *)this + 33, v11);
  CLMacAddress::newFromUint64((CLMacAddress *)this + 32, v12);
  CLMacAddress::newFromUint64((CLMacAddress *)this + 31, v13);
  CLMacAddress::newFromUint64((CLMacAddress *)this + 30, v14);
  CLMacAddress::newFromUint64((CLMacAddress *)this + 29, v15);
  CLMacAddress::newFromUint64((CLMacAddress *)this + 28, v16);
  CLMacAddress::newFromUint64((CLMacAddress *)this + 27, v17);
  CLMacAddress::newFromUint64((CLMacAddress *)this + 26, v18);
  CLMacAddress::newFromUint64((CLMacAddress *)this + 25, v19);
  CLMacAddress::newFromUint64((CLMacAddress *)this + 24, v20);
  CLMacAddress::newFromUint64((CLMacAddress *)this + 23, v21);
  CLMacAddress::newFromUint64((CLMacAddress *)this + 22, v22);
  CLMacAddress::newFromUint64((CLMacAddress *)this + 21, v23);
  CLMacAddress::newFromUint64((CLMacAddress *)this + 20, v24);
  CLMacAddress::newFromUint64((CLMacAddress *)this + 19, v25);
  CLMacAddress::newFromUint64((CLMacAddress *)this + 18, v26);
  CLMacAddress::newFromUint64((CLMacAddress *)this + 17, v27);
  CLMacAddress::newFromUint64((CLMacAddress *)this + 16, v28);
  CLMacAddress::newFromUint64((CLMacAddress *)this + 15, v29);
  CLMacAddress::newFromUint64((CLMacAddress *)this + 14, v30);
  CLMacAddress::newFromUint64((CLMacAddress *)this + 13, v31);
  CLMacAddress::newFromUint64((CLMacAddress *)this + 12, v32);
  CLMacAddress::newFromUint64((CLMacAddress *)this + 11, v33);
  CLMacAddress::newFromUint64((CLMacAddress *)this + 10, v34);
  CLMacAddress::newFromUint64((CLMacAddress *)this + 9, v35);
  CLMacAddress::newFromUint64((CLMacAddress *)this + 8, v36);
  CLMicroLocationStateMachine::StateMachineBase::~StateMachineBase(v2);
}

{
  CLMicroLocationLoiManager::~CLMicroLocationLoiManager(this);
  JUMPOUT(0x2426A04D4);
}

void `non-virtual thunk to'CLMicroLocationLoiManager::~CLMicroLocationLoiManager(CLMicroLocationLoiManager *this)
{
  CLMicroLocationLoiManager::~CLMicroLocationLoiManager((CLMicroLocationLoiManager *)((char *)this - 8));
}

{
  CLMicroLocationLoiManager::~CLMicroLocationLoiManager((CLMicroLocationLoiManager *)((char *)this - 8));
  JUMPOUT(0x2426A04D4);
}

void CLMicroLocationLoiManager::setupWithLoiBridge(id *a1, void *a2)
{
  id v4;
  NSObject *v5;
  uint8_t v6[16];

  v4 = a2;
  if (!v4)
  {
    if (onceToken_MicroLocation_Default != -1)
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_48);
    v5 = logObject_MicroLocation_Default;
    if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)v6 = 0;
      _os_log_impl(&dword_2419D9000, v5, OS_LOG_TYPE_FAULT, "FAULT: Tried to initialize LOI Manager with a nil LOI Bridge Object", v6, 2u);
    }
  }
  objc_storeStrong(a1 + 42, a2);
  objc_msgSend(a1[42], "setMicroLocationLoiClient:", a1);
  CLMicroLocationLoiManager::setupStartTimer((CLMicroLocationLoiManager *)a1);

}

void sub_241A6D260(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void CLMicroLocationLoiManager::setupStartTimer(CLMicroLocationLoiManager *this)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  void *v9;
  _QWORD v10[5];

  +[ULDefaultsSingleton shared](ULDefaultsSingleton, "shared");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "defaultsDictionary");
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "ULInitialDelayForFetchPlaceInference");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "objectForKey:", v4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  if (v5 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
    v6 = objc_msgSend(v5, "unsignedIntValue");
  else
    v6 = objc_msgSend(&unk_2511ED930, "unsignedIntValue");
  v7 = v6;

  v10[0] = MEMORY[0x24BDAC760];
  v10[1] = 3221225472;
  v10[2] = ___ZN25CLMicroLocationLoiManager15setupStartTimerEv_block_invoke;
  v10[3] = &__block_descriptor_40_e5_v8__0l;
  v10[4] = this;
  +[ULTimerFactory timerOnPrimaryQueueWithInterval:repeats:block:](ULTimerFactory, "timerOnPrimaryQueueWithInterval:repeats:block:", 0, v10, (double)v7);
  v8 = objc_claimAutoreleasedReturnValue();
  v9 = (void *)*((_QWORD *)this + 64);
  *((_QWORD *)this + 64) = v8;

}

void sub_241A6D3DC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

uint64_t CLMicroLocationLoiManager::setupRegionMonitoring(CLMicroLocationLoiManager *this)
{
  void *v2;
  NSObject *v3;
  uint8_t v5[16];

  v2 = (void *)*((_QWORD *)this + 42);
  if (!v2)
  {
    if (onceToken_MicroLocation_Default != -1)
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_48);
    v3 = logObject_MicroLocation_Default;
    if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)v5 = 0;
      _os_log_impl(&dword_2419D9000, v3, OS_LOG_TYPE_FAULT, "FAULT: Tried to setup Region Monitoring with a nil LOI Bridge Object", v5, 2u);
    }
    v2 = (void *)*((_QWORD *)this + 42);
  }
  return objc_msgSend(v2, "setupRegionMonitoring");
}

void CLMicroLocationLoiManager::enableMicroLocationAtCurrentLocationForService(CLMicroLocationLoiManager *this, const uuid *a2)
{
  _QWORD *v4;
  void (**v5)(CLMicroLocationStateMachine::EventBase *__hidden);
  void *__p;
  char v7;
  __int128 v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v4 = std::string::basic_string[abi:ne180100]<0>(&__p, "No Name Given");
  v5 = off_2511D5C40;
  v8 = (__int128)*a2;
  MEMORY[0x2426A02C4](v4, "Enable Custom LOI");
  CLMicroLocationStateMachine::StateMachineBase::handleEvent((CLMicroLocationLoiManager *)((char *)this + 8), (CLMicroLocationStateMachine::EventBase *)&v5);
  v5 = off_2511D4DA0;
  if (v7 < 0)
    operator delete(__p);
}

void sub_241A6D570(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void CLMiLoLoiManagerEnableCustomLoiEvent::~CLMiLoLoiManagerEnableCustomLoiEvent(void **this)
{
  *this = off_2511D4DA0;
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
}

{
  *this = off_2511D4DA0;
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
  JUMPOUT(0x2426A04D4);
}

void CLMicroLocationLoiManager::disableMicroLocationAtLocationForService(CLMicroLocationLoiManager *this, uuid a2, const uuid *a3)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v7;
  void (**v8)(CLMicroLocationStateMachine::EventBase *__hidden);
  void *__p;
  char v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;

  v4 = *(_QWORD *)&a2.var0[8];
  v5 = *(_QWORD *)a2.var0;
  v14 = *MEMORY[0x24BDAC8D0];
  v7 = std::string::basic_string[abi:ne180100]<0>(&__p, "No Name Given");
  v8 = off_2511D5C60;
  v11 = v5;
  v12 = v4;
  v13 = (__int128)*a3;
  MEMORY[0x2426A02C4](v7, "Disable Custom LOI");
  CLMicroLocationStateMachine::StateMachineBase::handleEvent((CLMicroLocationLoiManager *)((char *)this + 8), (CLMicroLocationStateMachine::EventBase *)&v8);
  v8 = off_2511D4DA0;
  if (v10 < 0)
    operator delete(__p);
}

void sub_241A6D6A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void CLMiLoLoiManagerDisableCustomLoiEvent::~CLMiLoLoiManagerDisableCustomLoiEvent(void **this)
{
  *this = off_2511D4DA0;
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
}

{
  *this = off_2511D4DA0;
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
  JUMPOUT(0x2426A04D4);
}

void CLMicroLocationLoiManager::fetchPlaceInferenceForReason(uint64_t a1, int a2)
{
  _QWORD *v4;
  void (**v5)(CLMicroLocationStateMachine::EventBase *__hidden);
  void *__p;
  char v7;
  int v8;

  v4 = std::string::basic_string[abi:ne180100]<0>(&__p, "No Name Given");
  v5 = off_2511D5C80;
  v8 = a2;
  MEMORY[0x2426A02C4](v4, "Fetch Place Inference For Reason");
  CLMicroLocationStateMachine::StateMachineBase::handleEvent((CLMicroLocationStateMachine::StateMachineBase *)(a1 + 8), (CLMicroLocationStateMachine::EventBase *)&v5);
  v5 = off_2511D4DA0;
  if (v7 < 0)
    operator delete(__p);
}

void sub_241A6D79C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void CLMiLoLoiManagerFetchPlaceInferenceForReason::~CLMiLoLoiManagerFetchPlaceInferenceForReason(void **this)
{
  *this = off_2511D4DA0;
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
}

{
  *this = off_2511D4DA0;
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
  JUMPOUT(0x2426A04D4);
}

void CLMicroLocationLoiManager::handleRefreshLocationIntervalNotificaion(CLMicroLocationLoiManager *this)
{
  _QWORD v2[3];
  char v3;

  CLMiLoLoiManagerRefreshLocationOnEvent::CLMiLoLoiManagerRefreshLocationOnEvent((CLMiLoLoiManagerRefreshLocationOnEvent *)v2);
  CLMicroLocationStateMachine::StateMachineBase::handleEvent((CLMicroLocationLoiManager *)((char *)this + 8), (CLMicroLocationStateMachine::EventBase *)v2);
  v2[0] = off_2511D4DA0;
  if (v3 < 0)
    operator delete((void *)v2[1]);
}

void sub_241A6D850(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void CLMiLoLoiManagerRefreshLocationOnEvent::~CLMiLoLoiManagerRefreshLocationOnEvent(void **this)
{
  *this = off_2511D4DA0;
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
}

{
  *this = off_2511D4DA0;
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
  JUMPOUT(0x2426A04D4);
}

_QWORD *CLMicroLocationLoiManager::handleCustomLoiVisitEntry@<X0>(CLMicroLocationLoiManager *this@<X0>, uuid a2@<0:X1, 8:X2>, _QWORD *a3@<X8>)
{
  NSObject *v5;
  std::string *p_p;
  std::string __p;
  std::bad_cast v9;
  void *v10;
  void *v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  std::string *v17;
  uuid v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v18 = a2;
  if (onceToken_MicroLocation_Default != -1)
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_48);
  v5 = (id)logObject_MicroLocation_Default;
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    memset(&__p, 0, sizeof(__p));
    if ((boost::conversion::detail::try_lexical_convert<std::string,boost::uuids::uuid>((uint64_t)&v18, &__p) & 1) == 0)
    {
      std::bad_cast::bad_cast(&v9);
      v9.__vftable = (std::bad_cast_vtbl *)&unk_2511D2C18;
      boost::throw_exception<boost::bad_lexical_cast>((uint64_t)&v9);
    }
    p_p = &__p;
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    *(_DWORD *)buf = 68289283;
    v13 = 0;
    v14 = 2082;
    v15 = "";
    v16 = 2081;
    v17 = p_p;
    _os_log_impl(&dword_2419D9000, v5, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#LOI Manager, got geofence entry event for valid LOI\", \"LOI ID\":%{private, location:escape_only}s}", buf, 0x1Cu);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }

  CLMicroLocationLoiManager::enterCustomLoi(this, *(uint64_t *)v18.var0, *(uint64_t *)&v18.var0[8], 10);
  return std::string::basic_string[abi:ne180100]<0>(a3, "In Custom LOI State");
}

void sub_241A6DA44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, std::exception a15)
{
  void *v15;

  std::exception::~exception(&a15);
  if (a14 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void CLMicroLocationLoiManager::enterCustomLoi(CLMicroLocationLoiManager *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  std::string __p;
  uuid v9;

  CLMicroLocationLoiManager::sendCustomLoiVisitEvent(a1, CFSTR("Custom Loi"), CFSTR("Entry"));
  std::string::basic_string[abi:ne180100]<0>(&__p, "custom");
  CLMicroLocationLoiManager::enterLoi((uint64_t)a1, a2, a3, &__p, a4);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  *(_QWORD *)v9.var0 = a2;
  *(_QWORD *)&v9.var0[8] = a3;
  CLMicroLocationLoiManager::updateDbCustomLoiWasLastSeenNow(a1, v9);
}

void sub_241A6DB10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *CLMicroLocationLoiManager::handleEnableCustomLoi@<X0>(id *this@<X0>, uuid a2@<0:X1, 8:X2>, _QWORD *a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  NSObject *v7;
  _BYTE *v8;
  _QWORD *v9;
  _QWORD *v10;
  _BYTE *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  __int16 v22[8];

  v3 = *(_QWORD *)&a2.var0[8];
  v4 = *(_QWORD *)a2.var0;
  if (onceToken_MicroLocation_Default != -1)
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_48);
  v7 = logObject_MicroLocation_Default;
  if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
  {
    v22[0] = 0;
    _os_log_impl(&dword_2419D9000, v7, OS_LOG_TYPE_DEFAULT, "#LOI Manager, kick off creating custom LOI process", (uint8_t *)v22, 2u);
  }
  objc_msgSend(this[42], "getCurrentLocation");
  v9 = this[58];
  v8 = this[59];
  if (v9 >= (_QWORD *)v8)
  {
    v11 = this[57];
    v12 = ((char *)v9 - v11) >> 4;
    v13 = v12 + 1;
    if ((unint64_t)(v12 + 1) >> 60)
      std::vector<CLMicroLocationProto::ConfidenceReason>::__throw_length_error[abi:ne180100]();
    v14 = v8 - v11;
    if (v14 >> 3 > v13)
      v13 = v14 >> 3;
    if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF0)
      v15 = 0xFFFFFFFFFFFFFFFLL;
    else
      v15 = v13;
    if (v15)
      v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<boost::uuids::uuid>>((uint64_t)(this + 59), v15);
    else
      v16 = 0;
    v17 = &v16[16 * v12];
    v18 = &v16[16 * v15];
    *(_QWORD *)v17 = v4;
    *((_QWORD *)v17 + 1) = v3;
    v10 = v17 + 16;
    v20 = (char *)this[57];
    v19 = (char *)this[58];
    if (v19 != v20)
    {
      do
      {
        *((_OWORD *)v17 - 1) = *((_OWORD *)v19 - 1);
        v17 -= 16;
        v19 -= 16;
      }
      while (v19 != v20);
      v19 = (char *)this[57];
    }
    this[57] = v17;
    this[58] = v10;
    this[59] = v18;
    if (v19)
      operator delete(v19);
  }
  else
  {
    *v9 = v4;
    v9[1] = v3;
    v10 = v9 + 2;
  }
  this[58] = v10;
  this[53] = 0;
  this[54] = 0;
  return std::string::basic_string[abi:ne180100]<0>(a3, "In the process of entering Custom LOI");
}

void CLMicroLocationLoiManager::handleDisableCustomLoi(id *this@<X0>, uuid a2@<0:X1, 8:X2>, uuid a3@<0:X3, 8:X4>, std::string *a4@<X8>)
{
  char *v6;
  __int128 v7;

  CLMicroLocationLoiManager::disableCustomLoiForService(this, a2, a3);
  (*(void (**)(id, uint64_t))(*(_QWORD *)this[43] + 8))(this[43], -1);
  v6 = (char *)this[2];
  if (v6[31] < 0)
  {
    std::string::__init_copy_ctor_external(a4, *((const std::string::value_type **)v6 + 1), *((_QWORD *)v6 + 2));
  }
  else
  {
    v7 = *(_OWORD *)(v6 + 8);
    a4->__r_.__value_.__r.__words[2] = *((_QWORD *)v6 + 3);
    *(_OWORD *)&a4->__r_.__value_.__l.__data_ = v7;
  }
}

void CLMicroLocationLoiManager::disableCustomLoiForService(id *this, uuid a2, uuid a3)
{
  uint64_t v3;
  uint64_t v4;
  std::string *v6;
  void *v7;
  void *v8;
  NSObject *v9;
  std::string *v10;
  std::string *p_p;
  std::string __p;
  std::string v13;
  uint8_t buf[8];
  _BYTE v15[20];
  __int16 v16;
  std::string *v17;
  uuid v18;
  uuid v19;
  uint64_t v20;
  uuid v21;

  v3 = *(_QWORD *)&a2.var0[8];
  v4 = *(_QWORD *)a2.var0;
  v20 = *MEMORY[0x24BDAC8D0];
  v19 = a2;
  v18 = a3;
  CLMicroLocationLoiManager::removeLoiAndServiceMapping((CLMicroLocationLoiManager *)this, a2, &v18);
  *(_QWORD *)v21.var0 = v4;
  *(_QWORD *)&v21.var0[8] = v3;
  if (CLMicroLocationLoiManager::noMoreServicesMonitoringThisLoi((CLMicroLocationLoiManager *)this, v21))
  {
    memset(&v13, 0, sizeof(v13));
    if ((boost::conversion::detail::try_lexical_convert<std::string,boost::uuids::uuid>((uint64_t)&v19, &v13) & 1) == 0)
    {
      std::bad_cast::bad_cast((std::bad_cast *)buf);
      *(_QWORD *)buf = &unk_2511D2C18;
      boost::throw_exception<boost::bad_lexical_cast>((uint64_t)buf);
    }
    memset(&__p, 0, sizeof(__p));
    if ((boost::conversion::detail::try_lexical_convert<std::string,boost::uuids::uuid>((uint64_t)&v18, &__p) & 1) == 0)
    {
      std::bad_cast::bad_cast((std::bad_cast *)buf);
      *(_QWORD *)buf = &unk_2511D2C18;
      boost::throw_exception<boost::bad_lexical_cast>((uint64_t)buf);
    }
    if ((v13.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v6 = &v13;
    else
      v6 = (std::string *)v13.__r_.__value_.__r.__words[0];
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", v6);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "uppercaseString");
    v8 = (void *)objc_claimAutoreleasedReturnValue();

    if (onceToken_MicroLocation_Default != -1)
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_48);
    v9 = logObject_MicroLocation_Default;
    if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
    {
      v10 = &v13;
      if ((v13.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v10 = (std::string *)v13.__r_.__value_.__r.__words[0];
      p_p = &__p;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      *(_DWORD *)buf = 68289539;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)v15 = 2082;
      *(_QWORD *)&v15[2] = "";
      *(_WORD *)&v15[10] = 2081;
      *(_QWORD *)&v15[12] = v10;
      v16 = 2081;
      v17 = p_p;
      _os_log_impl(&dword_2419D9000, v9, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#LOI Manager, No More services monitoring this LOI, disable geofence for LOI\", \"loiID\":%{private, location:escape_only}s, \"Service Id\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    objc_msgSend(this[42], "removeGeofenceWithRegionId:", v8);

    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v13.__r_.__value_.__l.__data_);
  }
}

void sub_241A6DF68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,std::exception a21)
{
  void *v21;

  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(a1);
}

void CLMicroLocationLoiManager::removeLoiAndServiceMapping(CLMicroLocationLoiManager *this, uuid a2, const uuid *a3)
{
  NSObject *v5;
  std::string *p_p;
  std::string *v7;
  std::string __p;
  std::string v9;
  std::bad_cast v10;
  void *v11;
  void *v12;
  uint8_t buf[8];
  _BYTE v14[20];
  __int16 v15;
  std::string *v16;
  uuid v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  v17 = a2;
  memset(&v9, 0, sizeof(v9));
  if ((boost::conversion::detail::try_lexical_convert<std::string,boost::uuids::uuid>((uint64_t)a3, &v9) & 1) == 0)
  {
    std::bad_cast::bad_cast((std::bad_cast *)buf);
    *(_QWORD *)buf = &unk_2511D2C18;
    boost::throw_exception<boost::bad_lexical_cast>((uint64_t)buf);
  }
  if (onceToken_MicroLocation_Default != -1)
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_48);
  v5 = (id)logObject_MicroLocation_Default;
  if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
  {
    memset(&__p, 0, sizeof(__p));
    if ((boost::conversion::detail::try_lexical_convert<std::string,boost::uuids::uuid>((uint64_t)&v17, &__p) & 1) == 0)
    {
      std::bad_cast::bad_cast(&v10);
      v10.__vftable = (std::bad_cast_vtbl *)&unk_2511D2C18;
      boost::throw_exception<boost::bad_lexical_cast>((uint64_t)&v10);
    }
    p_p = &__p;
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    v7 = &v9;
    if ((v9.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v7 = (std::string *)v9.__r_.__value_.__r.__words[0];
    *(_DWORD *)buf = 68289539;
    *(_DWORD *)&buf[4] = 0;
    *(_WORD *)v14 = 2082;
    *(_QWORD *)&v14[2] = "";
    *(_WORD *)&v14[10] = 2081;
    *(_QWORD *)&v14[12] = p_p;
    v15 = 2081;
    v16 = v7;
    _os_log_impl(&dword_2419D9000, v5, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"#LOI Manager, Removing LOI to Service ID mapping\", \"Location ID\":%{private, location:escape_only}s, \"Service ID\":%{private, location:escape_only}s}", buf, 0x26u);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }

  objc_msgSend(*(id *)(*((_QWORD *)this + 41) + 104), "removeServiceToCustomLoiMapping:loiId:", a3, &v17);
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v9.__r_.__value_.__l.__data_);
}

void sub_241A6E1E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,std::exception a22,uint64_t a23,uint64_t a24,std::exception a25)
{
  void *v25;

  std::exception::~exception(&a22);
  if (a15 < 0)
    operator delete(__p);

  if (a21 < 0)
    operator delete(a16);
  _Unwind_Resume(a1);
}

BOOL CLMicroLocationLoiManager::noMoreServicesMonitoringThisLoi(CLMicroLocationLoiManager *this, uuid a2)
{
  id v2;
  void *v3;
  void *v5;
  void *v6;
  uuid v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  v7 = a2;
  v2 = *(id *)(*((_QWORD *)this + 41) + 104);
  v3 = v2;
  if (v2)
  {
    objc_msgSend(v2, "getAllServicesEnabledAtCustomLoiId:", &v7);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }

  if (v5)
    operator delete(v5);
  return v6 == v5;
}

void sub_241A6E2E4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void CLMicroLocationLoiManager::handleDisableCustomLoiForAllServices(CLMicroLocationLoiManager *this, uuid a2)
{
  id v3;
  void *v4;
  uuid *v5;
  uuid *v6;
  uuid *v7;
  uuid v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v8 = a2;
  v3 = *(id *)(*((_QWORD *)this + 41) + 104);
  v4 = v3;
  if (v3)
  {
    objc_msgSend(v3, "getAllServicesEnabledAtCustomLoiId:", &v8);
  }
  else
  {
    v6 = 0;
    v7 = 0;
  }

  v5 = v6;
  if (v6 != v7)
  {
    do
      CLMicroLocationLoiManager::disableCustomLoiForService((id *)this, v8, *v5++);
    while (v5 != v7);
    v5 = v6;
  }
  if (v5)
    operator delete(v5);
}

void sub_241A6E3C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

_QWORD *CLMicroLocationLoiManager::tryToEnterHomeLoi@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, __int128 *a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t v7;
  NSObject *v8;
  std::string *p_p;
  uint64_t v10;
  uint64_t v11;
  char *v13;
  uint64_t v14;
  std::string v16;
  std::string __p;
  std::bad_cast v18;
  void *v19;
  void *v20;
  uint8_t buf[4];
  int v22;
  __int16 v23;
  const char *v24;
  __int16 v25;
  std::string *v26;
  uint64_t v27;

  v27 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)(a1 + 408) = CLMicroLocationLoiManager::getLoiGroupId(a1, a2, a3, a4);
  *(_QWORD *)(a1 + 416) = v7;
  if (onceToken_MicroLocation_Default != -1)
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_48);
  v8 = (id)logObject_MicroLocation_Default;
  if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
  {
    memset(&__p, 0, sizeof(__p));
    if ((boost::conversion::detail::try_lexical_convert<std::string,boost::uuids::uuid>(a1 + 408, &__p) & 1) == 0)
    {
      std::bad_cast::bad_cast(&v18);
      v18.__vftable = (std::bad_cast_vtbl *)&unk_2511D2C18;
      boost::throw_exception<boost::bad_lexical_cast>((uint64_t)&v18);
    }
    p_p = &__p;
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    *(_DWORD *)buf = 68289283;
    v22 = 0;
    v23 = 2082;
    v24 = "";
    v25 = 2081;
    v26 = p_p;
    _os_log_impl(&dword_2419D9000, v8, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"LOI Manager, Fetched LOI Group ID\", \"LOI Group ID \":%{private, location:escape_only}s}", buf, 0x1Cu);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }

  if (*(_BYTE *)(a1 + 408))
  {
LABEL_10:
    objc_msgSend(*(id *)(a1 + 336), "stopLeechingLocationUpdates");
    if (*(_BYTE *)(a1 + 500))
    {
      v10 = *(unsigned int *)(a1 + 496);
      *(_BYTE *)(a1 + 500) = 0;
    }
    else
    {
      v10 = 1;
    }
    v14 = *(_QWORD *)(a1 + 344);
    if (*(char *)(a1 + 407) < 0)
      std::string::__init_copy_ctor_external(&v16, *(const std::string::value_type **)(a1 + 384), *(_QWORD *)(a1 + 392));
    else
      v16 = *(std::string *)(a1 + 384);
    (*(void (**)(uint64_t, std::string *, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v14 + 16))(v14, &v16, *(_QWORD *)(a1 + 408), *(_QWORD *)(a1 + 416), v10);
    if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v16.__r_.__value_.__l.__data_);
    v13 = "In Home LOI State";
  }
  else
  {
    v11 = 409;
    while (v11 != 424)
    {
      if (*(unsigned __int8 *)(a1 + v11++))
      {
        if ((unint64_t)(v11 - 410) < 0xF)
          goto LABEL_10;
        break;
      }
    }
    CLMicroLocationLoiManager::resetLoiVariables((CLMicroLocationLoiManager *)a1);
    v13 = "Not in Active Location State";
  }
  return std::string::basic_string[abi:ne180100]<0>(a5, v13);
}

void sub_241A6E63C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,std::exception a22)
{
  void *v22;

  std::exception::~exception(&a22);
  if (a21 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

uint64_t CLMicroLocationLoiManager::getLoiGroupId(uint64_t a1, uint64_t a2, __int128 *a3, uint64_t a4)
{
  id v8;
  void *v9;
  NSObject *v10;
  NSObject *v11;
  std::string *v12;
  std::string *p_p;
  id v14;
  void *v15;
  NSObject *v16;
  NSObject *v17;
  __int128 *v18;
  NSObject *v19;
  const void *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  _OWORD *v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char *v29;
  char *v30;
  char *v31;
  __int128 *v32;
  __int128 *v33;
  std::string __p;
  std::string v36;
  uint8_t v37[8];
  void *v38;
  void *v39;
  uint8_t buf[8];
  _BYTE v41[20];
  __int16 v42;
  std::string *v43;
  __int128 v44;
  char v45;
  __int128 v46;
  uint64_t v47;

  v47 = *MEMORY[0x24BDAC8D0];
  v46 = 0uLL;
  v8 = *(id *)(*(_QWORD *)(a1 + 328) + 56);
  v9 = v8;
  if (v8)
  {
    objc_msgSend(v8, "getLoiGroupIdForLoi:", a3);
  }
  else
  {
    v44 = 0uLL;
    v45 = 0;
  }

  if (v45)
  {
    if (v44 == 0)
    {
      v44 = *a3;
      if (onceToken_MicroLocation_Default != -1)
        dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_48);
      v10 = logObject_MicroLocation_Default;
      if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_2419D9000, v10, OS_LOG_TYPE_DEBUG, "#LOI Manager, Overwriting stored LOI group ID because nil uuid was retrieved", buf, 2u);
      }
    }
    if (onceToken_MicroLocation_Default != -1)
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_48);
    v11 = (id)logObject_MicroLocation_Default;
    if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
    {
      if (!v45)
        std::__throw_bad_optional_access[abi:ne180100]();
      memset(&v36, 0, sizeof(v36));
      if ((boost::conversion::detail::try_lexical_convert<std::string,boost::uuids::uuid>((uint64_t)&v44, &v36) & 1) == 0)
      {
        std::bad_cast::bad_cast((std::bad_cast *)v37);
        *(_QWORD *)v37 = &unk_2511D2C18;
        boost::throw_exception<boost::bad_lexical_cast>((uint64_t)v37);
      }
      if ((v36.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v12 = &v36;
      else
        v12 = (std::string *)v36.__r_.__value_.__r.__words[0];
      memset(&__p, 0, sizeof(__p));
      if ((boost::conversion::detail::try_lexical_convert<std::string,boost::uuids::uuid>((uint64_t)a3, &__p) & 1) == 0)
      {
        std::bad_cast::bad_cast((std::bad_cast *)v37);
        *(_QWORD *)v37 = &unk_2511D2C18;
        boost::throw_exception<boost::bad_lexical_cast>((uint64_t)v37);
      }
      p_p = &__p;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      *(_DWORD *)buf = 68289538;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)v41 = 2082;
      *(_QWORD *)&v41[2] = "";
      *(_WORD *)&v41[10] = 2082;
      *(_QWORD *)&v41[12] = v12;
      v42 = 2082;
      v43 = p_p;
      _os_log_impl(&dword_2419D9000, v11, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"#LOI Manager, got previously stored LOI Group ID for LOI ID\", \"LOI Group Id\":%{public, location:escape_only}s, \"LOI ID\":%{public, location:escape_only}s}", buf, 0x26u);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v36.__r_.__value_.__l.__data_);
    }

    if (!v45)
      std::__throw_bad_optional_access[abi:ne180100]();
    v46 = v44;
    goto LABEL_47;
  }
  v14 = *(id *)(*(_QWORD *)(a1 + 328) + 56);
  v15 = v14;
  if (v14)
  {
    objc_msgSend(v14, "getLoiGroupIdsForLois:", a4);
  }
  else
  {
    *(_QWORD *)buf = 0;
    *(_QWORD *)v41 = 0;
    *(_QWORD *)&v41[8] = 0;
  }

  if (*(_QWORD *)v41 != *(_QWORD *)buf)
  {
    if (*(_QWORD *)v41 - *(_QWORD *)buf >= 0x11uLL)
    {
      if (onceToken_MicroLocation_Default != -1)
        dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_48);
      v16 = logObject_MicroLocation_Default;
      if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)v37 = 0;
        _os_log_impl(&dword_2419D9000, v16, OS_LOG_TYPE_ERROR, "#LOI Manager, received multiple Loi Group IDs for LOI -- this should never happen", v37, 2u);
      }
    }
    if (onceToken_MicroLocation_Default != -1)
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_48);
    v17 = logObject_MicroLocation_Default;
    if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)v37 = 0;
      _os_log_impl(&dword_2419D9000, v17, OS_LOG_TYPE_INFO, "#LOI Manager, got previously stored LOI Group ID for list of LOI IDs", v37, 2u);
    }
    v18 = *(__int128 **)buf;
    v46 = **(_OWORD **)buf;
LABEL_46:
    *(_QWORD *)v41 = v18;
    operator delete(v18);
    goto LABEL_47;
  }
  if (onceToken_MicroLocation_Default != -1)
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_48);
  v19 = logObject_MicroLocation_Default;
  if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)v37 = 0;
    _os_log_impl(&dword_2419D9000, v19, OS_LOG_TYPE_INFO, "#LOI Manager, never before seen LOI, so starting with this LOI ID as the group ID", v37, 2u);
  }
  v46 = *a3;
  v18 = *(__int128 **)buf;
  if (*(_QWORD *)buf)
    goto LABEL_46;
LABEL_47:
  v20 = *(const void **)a4;
  v21 = *(_QWORD *)(a4 + 8);
  v22 = (v21 - *(_QWORD *)a4) >> 4;
  *(_QWORD *)v41 = 0;
  *(_QWORD *)&v41[8] = 0;
  *(_QWORD *)buf = 0;
  std::vector<boost::uuids::uuid>::__init_with_size[abi:ne180100]<std::__wrap_iter<boost::uuids::uuid const*>,std::__wrap_iter<boost::uuids::uuid const*>>(buf, v20, v21, v22);
  v23 = *(_QWORD *)v41;
  if (*(_QWORD *)v41 >= *(_QWORD *)&v41[8])
  {
    v25 = (uint64_t)(*(_QWORD *)v41 - *(_QWORD *)buf) >> 4;
    v26 = v25 + 1;
    if ((unint64_t)(v25 + 1) >> 60)
      std::vector<CLMicroLocationProto::ConfidenceReason>::__throw_length_error[abi:ne180100]();
    v27 = *(_QWORD *)&v41[8] - *(_QWORD *)buf;
    if ((uint64_t)(*(_QWORD *)&v41[8] - *(_QWORD *)buf) >> 3 > v26)
      v26 = v27 >> 3;
    if ((unint64_t)v27 >= 0x7FFFFFFFFFFFFFF0)
      v28 = 0xFFFFFFFFFFFFFFFLL;
    else
      v28 = v26;
    if (v28)
      v29 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<boost::uuids::uuid>>((uint64_t)&v41[8], v28);
    else
      v29 = 0;
    v30 = &v29[16 * v25];
    v31 = &v29[16 * v28];
    *(_OWORD *)v30 = *a3;
    v24 = v30 + 16;
    v33 = *(__int128 **)buf;
    v32 = *(__int128 **)v41;
    if (*(_QWORD *)v41 != *(_QWORD *)buf)
    {
      do
      {
        *((_OWORD *)v30 - 1) = *(v32 - 1);
        v30 -= 16;
        --v32;
      }
      while (v32 != v33);
      v32 = *(__int128 **)buf;
    }
    *(_QWORD *)buf = v30;
    *(_QWORD *)v41 = v24;
    *(_QWORD *)&v41[8] = v31;
    if (v32)
      operator delete(v32);
  }
  else
  {
    **(_OWORD **)v41 = *a3;
    v24 = (_OWORD *)(v23 + 16);
  }
  *(_QWORD *)v41 = v24;
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 328) + 56), "updateLoiIds:withLoiGroupId:andLoiType:", buf, &v46, a2);
  if (*(_QWORD *)buf)
  {
    *(_QWORD *)v41 = *(_QWORD *)buf;
    operator delete(*(void **)buf);
  }
  return v46;
}

void sub_241A6EC24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,std::exception a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26)
{
  void *v26;

  _Unwind_Resume(a1);
}

uint64_t CLMicroLocationLoiManager::resetLoiVariables(CLMicroLocationLoiManager *this)
{
  uint64_t result;

  result = MEMORY[0x2426A02C4]((char *)this + 384, "unknown");
  *(_OWORD *)((char *)this + 408) = 0u;
  *(_OWORD *)((char *)this + 424) = 0u;
  *((_QWORD *)this + 58) = *((_QWORD *)this + 57);
  if (*((_BYTE *)this + 500))
    *((_BYTE *)this + 500) = 0;
  *((_WORD *)this + 252) = 0;
  *((_BYTE *)this + 506) = 0;
  return result;
}

BOOL CLMicroLocationLoiManager::refreshRoutineStateAtLocation(ULDatabase **this, double a2, double a3)
{
  double v6;
  double v7;
  double v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  double v13;
  NSObject *v14;
  const char *v15;
  uint8_t *v16;
  double v17;
  __int16 v19;
  __int16 v20;

  ULDatabase::connectIfNecessary(this[41]);
  if (((*((uint64_t (**)(ULDatabase *))this[41]->var0 + 2))(this[41]) & 1) == 0)
  {
    if (onceToken_MicroLocation_Default != -1)
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_48);
    v14 = logObject_MicroLocation_Default;
    if (!os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
      return 0;
    v20 = 0;
    v15 = "Ignoring refreshRoutineStateAtLocation request since keybag is not unlocked";
    v16 = (uint8_t *)&v20;
    goto LABEL_16;
  }
  v6 = cl::chrono::CFAbsoluteTimeClock::now();
  if (*((_BYTE *)this + 488))
  {
    v7 = v6;
    v8 = *((double *)this + 60);
    +[ULDefaultsSingleton shared](ULDefaultsSingleton, "shared");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "defaultsDictionary");
    v10 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "ULRefreshRoutineStateThrottle");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "objectForKey:", v11);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    if (!v12)
      goto LABEL_10;
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
      objc_msgSend(v12, "doubleValue");
    else
LABEL_10:
      objc_msgSend(&unk_2511ECE08, "doubleValue");
    v17 = v13;

    if (v7 - v8 < v17)
    {
      if (onceToken_MicroLocation_Default != -1)
        dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_48);
      v14 = logObject_MicroLocation_Default;
      if (!os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
        return 0;
      v19 = 0;
      v15 = "Ignoring refreshRoutineStateAtLocation request since last request was too recent";
      v16 = (uint8_t *)&v19;
LABEL_16:
      _os_log_impl(&dword_2419D9000, v14, OS_LOG_TYPE_DEFAULT, v15, v16, 2u);
      return 0;
    }
  }
  CLMicroLocationLoiManager::initializeStateAtLocation((CLMicroLocationLoiManager *)this, a2, a3);
  return CLMicroLocationLoiManager::fetchLocationOfInterest((CLMicroLocationLoiManager *)this);
}

void sub_241A6EF34(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void CLMicroLocationLoiManager::exitCurrentLoi(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  std::string __p;

  CLMicroLocationLoiManager::resetLoiVariables((CLMicroLocationLoiManager *)a1);
  v4 = *(_QWORD *)(a1 + 344);
  if (*(char *)(a1 + 407) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(a1 + 384), *(_QWORD *)(a1 + 392));
  else
    __p = *(std::string *)(a1 + 384);
  (*(void (**)(uint64_t, std::string *, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v4 + 16))(v4, &__p, *(_QWORD *)(a1 + 408), *(_QWORD *)(a1 + 416), a2);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_241A6F000(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t CLMicroLocationLoiManager::isValidGeofence(CLMicroLocationLoiManager *this, uuid a2)
{
  id v2;
  void *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v8;
  uint64_t *v10;
  uint64_t *v11;

  v2 = *(id *)(*((_QWORD *)this + 41) + 104);
  v3 = v2;
  if (!v2)
  {

    return v3 & 1;
  }
  objc_msgSend(v2, "getAllDistinctCustomLoiIds");

  if (v10 == v11)
  {
    LOBYTE(v3) = 0;
    if (!v10)
      return v3 & 1;
LABEL_15:
    operator delete(v10);
    return v3 & 1;
  }
  LOBYTE(v3) = 0;
  v4 = v10;
  do
  {
    v5 = *v4;
    v6 = v4[1];
    v4 += 2;
    v8 = *(_QWORD *)a2.var0 == v5 && *(_QWORD *)&a2.var0[8] == v6;
    LOBYTE(v3) = v8 | v3;
  }
  while (v4 != v11);
  if (v10)
    goto LABEL_15;
  return v3 & 1;
}

void sub_241A6F0F8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void CLMicroLocationLoiManager::sendLoiRelatedErrorEvent(CLMicroLocationLoiManager *this, NSString *a2, NSString *a3)
{
  NSString *v5;
  NSString *v6;
  uint64_t v7;
  _QWORD *v8;
  void *v9;
  CLMicroLocationLoiManager *v10;
  _QWORD v11[4];
  _QWORD v12[5];

  v12[4] = *MEMORY[0x24BDAC8D0];
  v5 = a2;
  v6 = a3;
  v11[0] = CFSTR("loiRelatedFailureOccurred");
  v11[1] = CFSTR("failureType");
  v12[0] = &unk_2511ED918;
  v12[1] = v5;
  v12[2] = v6;
  v11[2] = CFSTR("failureReason");
  v11[3] = CFSTR("fsmStateDuringFailure");
  v7 = *((_QWORD *)this + 2);
  v8 = (_QWORD *)(v7 + 8);
  if (*(char *)(v7 + 31) < 0)
    v8 = (_QWORD *)*v8;
  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", v8);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v12[3] = v9;
  objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", v12, v11, 4);
  v10 = (CLMicroLocationLoiManager *)objc_claimAutoreleasedReturnValue();
  CLMicroLocationLoiManager::sendCoreAnalyticsEvent(v10, CFSTR("com.apple.MicroLocation.LOIFailures"), (NSDictionary *)v10);

}

void sub_241A6F220(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  v5 = v4;

  _Unwind_Resume(a1);
}

BOOL CLMicroLocationLoiManager::fetchPlaceInference(CLMicroLocationLoiManager *this)
{
  NSObject *v2;
  void **v3;
  uint64_t v4;
  uint64_t v6;
  NSObject *v7;
  NSObject *v8;
  void *__p[2];
  char v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  void **v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  if (onceToken_MicroLocation_Default != -1)
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_48);
  v2 = (id)logObject_MicroLocation_Default;
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    if (!*((_BYTE *)this + 500))
      std::__throw_bad_optional_access[abi:ne180100]();
    CLMicroLocationProtobufHelper::convertChangedLoiReasonToMessage(*((_DWORD *)this + 124), __p);
    if (v11 >= 0)
      v3 = __p;
    else
      v3 = (void **)__p[0];
    *(_DWORD *)buf = 68289283;
    v13 = 0;
    v14 = 2082;
    v15 = "";
    v16 = 2081;
    v17 = v3;
    _os_log_impl(&dword_2419D9000, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"LOI Manager, Attempting to fetch place inference\", \"Reason:\":%{private, location:escape_only}s}", buf, 0x1Cu);
    if (v11 < 0)
      operator delete(__p[0]);
  }

  v4 = *((_QWORD *)this + 42);
  if (v4)
  {
    objc_msgSend(*((id *)this + 42), "stopLeechingLocationUpdates");
    if ((*((_DWORD *)this + 124) & 0xFFFFFFFE) != 6 || *((_BYTE *)this + 500) == 0)
      v6 = 0;
    else
      v6 = 2;
    objc_msgSend(*((id *)this + 42), "fetchPlaceInferenceAtCurrentLocationWithPolicy:", v6);
  }
  else
  {
    if (onceToken_MicroLocation_Default != -1)
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_48);
    v7 = logObject_MicroLocation_Default;
    if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 68289026;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      _os_log_impl(&dword_2419D9000, v7, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"#Warning LOI Bridge not setup.\"}", buf, 0x12u);
    }
    if (onceToken_MicroLocation_Default != -1)
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_48);
    v8 = logObject_MicroLocation_Default;
    if (os_signpost_enabled((os_log_t)logObject_MicroLocation_Default))
    {
      *(_DWORD *)buf = 68289026;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      _os_signpost_emit_with_name_impl(&dword_2419D9000, v8, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#Warning LOI Bridge not setup.", "{\"msg%{public}.0s\":\"#Warning LOI Bridge not setup.\"}", buf, 0x12u);
    }
  }
  return v4 != 0;
}

void sub_241A6F4E4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void ULSettings::get<ULSettings::OverrideCurrentRTLOIType>(uint64_t a1@<X8>)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  char v6;
  uint64_t v7;
  _BYTE v8[24];
  _BYTE v9[15];
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  +[ULDefaultsSingleton shared](ULDefaultsSingleton, "shared");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "defaultsDictionary");
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "ULOverrideCurrentRTLOIType");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "objectForKey:", v4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  if (v5 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
  {
    ULSettings::convert<NSString * {__strong},std::string>(v5, v8);
    *(_OWORD *)a1 = *(_OWORD *)v8;
    *(_QWORD *)(a1 + 16) = *(_QWORD *)&v8[16];
  }
  else
  {
    ULSettings::convert<NSString * {__strong},std::string>(&stru_2511DC120, v8);
    *(_QWORD *)&v9[7] = *(_QWORD *)&v8[15];
    *(_QWORD *)v9 = *(_QWORD *)&v8[8];
    v6 = v8[23];
    v7 = *(_QWORD *)&v8[8];
    *(_QWORD *)a1 = *(_QWORD *)v8;
    *(_QWORD *)(a1 + 8) = v7;
    *(_QWORD *)(a1 + 15) = *(_QWORD *)&v9[7];
    *(_BYTE *)(a1 + 23) = v6;
  }

}

void sub_241A6F630(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

_QWORD *CLMicroLocationLoiManager::convertRTLocationOfInterestTypeToString@<X0>(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  char *v3;
  NSObject *v4;
  _QWORD *result;
  uint8_t v6[16];

  switch(a1)
  {
    case -1:
      v3 = "other";
      goto LABEL_12;
    case 0:
      v3 = "home";
      goto LABEL_12;
    case 1:
      v3 = "work";
      goto LABEL_12;
    case 2:
      v3 = "school";
      goto LABEL_12;
    case 3:
      v3 = "gym";
LABEL_12:
      result = std::string::basic_string[abi:ne180100]<0>(a2, v3);
      break;
    default:
      if (onceToken_MicroLocation_Default != -1)
        dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_48);
      v4 = logObject_MicroLocation_Default;
      if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)v6 = 0;
        _os_log_impl(&dword_2419D9000, v4, OS_LOG_TYPE_DEFAULT, "#Warning Please update this switch statement.", v6, 2u);
      }
      result = std::string::basic_string[abi:ne180100]<0>(a2, "none");
      break;
  }
  return result;
}

BOOL CLMicroLocationLoiManager::fetchLoiIdsForLoi(CLMicroLocationLoiManager *this, NSUUID *a2)
{
  NSUUID *v3;
  void *v4;
  NSObject *v5;
  _DWORD v7[2];
  __int16 v8;
  const char *v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  v3 = a2;
  v4 = (void *)*((_QWORD *)this + 42);
  if (v4)
  {
    objc_msgSend(v4, "fetchRelatedLoisForLoi:", v3);
  }
  else
  {
    if (onceToken_MicroLocation_Default != -1)
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_48);
    v5 = logObject_MicroLocation_Default;
    if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
    {
      v7[0] = 68289026;
      v7[1] = 0;
      v8 = 2082;
      v9 = "";
      _os_log_impl(&dword_2419D9000, v5, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#Warning LOI Bridge not setup.\"}", (uint8_t *)v7, 0x12u);
    }
  }

  return v4 != 0;
}

void sub_241A6F8A4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void CLMicroLocationLoiManager::initializeStateAtLocation(CLMicroLocationLoiManager *this, double a2, double a3)
{
  double v6;

  v6 = cl::chrono::CFAbsoluteTimeClock::now();
  if (!*((_BYTE *)this + 488))
    *((_BYTE *)this + 488) = 1;
  *((double *)this + 60) = v6;
  *((double *)this + 44) = a2;
  *((double *)this + 45) = a3;
  if (*((char *)this + 407) < 0)
  {
    **((_BYTE **)this + 48) = 0;
    *((_QWORD *)this + 49) = 0;
  }
  else
  {
    *((_BYTE *)this + 384) = 0;
    *((_BYTE *)this + 407) = 0;
  }
  *((_QWORD *)this + 51) = 0;
  *((_QWORD *)this + 52) = 0;
}

_QWORD *CLMicroLocationLoiManager::convertPlaceInferenceUserPlaceTypeToString@<X0>(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  char *v3;
  NSObject *v4;
  _QWORD *result;
  uint8_t v6[16];

  switch(a1)
  {
    case 0:
      v3 = "other";
      goto LABEL_12;
    case 1:
      v3 = "home";
      goto LABEL_12;
    case 2:
      v3 = "work";
      goto LABEL_12;
    case 3:
      v3 = "school";
      goto LABEL_12;
    case 4:
      v3 = "gym";
LABEL_12:
      result = std::string::basic_string[abi:ne180100]<0>(a2, v3);
      break;
    default:
      if (onceToken_MicroLocation_Default != -1)
        dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_48);
      v4 = logObject_MicroLocation_Default;
      if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)v6 = 0;
        _os_log_impl(&dword_2419D9000, v4, OS_LOG_TYPE_DEFAULT, "#Warning Please update this switch statement.", v6, 2u);
      }
      result = std::string::basic_string[abi:ne180100]<0>(a2, "none");
      break;
  }
  return result;
}

void CLMicroLocationLoiManager::startCustomLoiEntryTimer(id *this)
{
  id v2;
  NSObject *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  double v8;
  double v9;
  uint64_t v10;
  id v11;
  _QWORD v12[5];
  uint8_t buf[4];
  int v14;
  __int16 v15;
  const char *v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  objc_msgSend(this[65], "invalidate");
  v2 = this[65];
  this[65] = 0;

  if (onceToken_MicroLocation_Default != -1)
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_48);
  v3 = logObject_MicroLocation_Default;
  if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 68289026;
    v14 = 0;
    v15 = 2082;
    v16 = "";
    _os_log_impl(&dword_2419D9000, v3, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"LOI Manager, startCustomLoiEntryTimer\"}", buf, 0x12u);
  }
  +[ULDefaultsSingleton shared](ULDefaultsSingleton, "shared");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "defaultsDictionary");
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "ULCustomLoiEntryTimeout");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "objectForKey:", v6);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  if (v7 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
    objc_msgSend(v7, "doubleValue");
  else
    objc_msgSend(&unk_2511ED948, "doubleValue");
  v9 = v8;

  v12[0] = MEMORY[0x24BDAC760];
  v12[1] = 3221225472;
  v12[2] = ___ZN25CLMicroLocationLoiManager24startCustomLoiEntryTimerEv_block_invoke;
  v12[3] = &__block_descriptor_40_e5_v8__0l;
  v12[4] = this;
  +[ULTimerFactory timerOnPrimaryQueueWithInterval:repeats:block:](ULTimerFactory, "timerOnPrimaryQueueWithInterval:repeats:block:", 0, v12, v9);
  v10 = objc_claimAutoreleasedReturnValue();
  v11 = this[65];
  this[65] = (id)v10;

}

void sub_241A6FC40(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void CLMicroLocationLoiManager::sendCustomLoiCreationEvent(CLMicroLocationLoiManager *this)
{
  void *v2;
  void *v3;
  CLMicroLocationLoiManager *v4;
  _QWORD v5[3];
  _QWORD v6[4];

  v6[3] = *MEMORY[0x24BDAC8D0];
  v6[0] = &unk_2511ED918;
  v5[0] = CFSTR("createdCustomLoi");
  v5[1] = CFSTR("geofenceLocationHorizontalAccuracy");
  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithDouble:", *((double *)this + 46));
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v6[1] = v2;
  v5[2] = CFSTR("geofenceLocationVerticalAccuracy");
  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithDouble:", *((double *)this + 47));
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v6[2] = v3;
  objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", v6, v5, 3);
  v4 = (CLMicroLocationLoiManager *)objc_claimAutoreleasedReturnValue();
  CLMicroLocationLoiManager::sendCoreAnalyticsEvent(v4, CFSTR("com.apple.MicroLocation.CustomLoiCreation"), (NSDictionary *)v4);

}

void sub_241A6FD7C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void CLMicroLocationLoiManager::addLoiAndServiceMapping(CLMicroLocationLoiManager *this, uuid a2, const uuid *a3)
{
  NSObject *v5;
  std::string *p_p;
  std::string *v7;
  std::string __p;
  std::string v9;
  std::bad_cast v10;
  void *v11;
  void *v12;
  uint8_t buf[8];
  _BYTE v14[20];
  __int16 v15;
  std::string *v16;
  uuid v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  v17 = a2;
  memset(&v9, 0, sizeof(v9));
  if ((boost::conversion::detail::try_lexical_convert<std::string,boost::uuids::uuid>((uint64_t)a3, &v9) & 1) == 0)
  {
    std::bad_cast::bad_cast((std::bad_cast *)buf);
    *(_QWORD *)buf = &unk_2511D2C18;
    boost::throw_exception<boost::bad_lexical_cast>((uint64_t)buf);
  }
  if (onceToken_MicroLocation_Default != -1)
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_48);
  v5 = (id)logObject_MicroLocation_Default;
  if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
  {
    memset(&__p, 0, sizeof(__p));
    if ((boost::conversion::detail::try_lexical_convert<std::string,boost::uuids::uuid>((uint64_t)&v17, &__p) & 1) == 0)
    {
      std::bad_cast::bad_cast(&v10);
      v10.__vftable = (std::bad_cast_vtbl *)&unk_2511D2C18;
      boost::throw_exception<boost::bad_lexical_cast>((uint64_t)&v10);
    }
    p_p = &__p;
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    v7 = &v9;
    if ((v9.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v7 = (std::string *)v9.__r_.__value_.__r.__words[0];
    *(_DWORD *)buf = 68289539;
    *(_DWORD *)&buf[4] = 0;
    *(_WORD *)v14 = 2082;
    *(_QWORD *)&v14[2] = "";
    *(_WORD *)&v14[10] = 2081;
    *(_QWORD *)&v14[12] = p_p;
    v15 = 2081;
    v16 = v7;
    _os_log_impl(&dword_2419D9000, v5, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"#LOI Manager, Adding LOI to Service ID mapping\", \"Location ID\":%{private, location:escape_only}s, \"Service ID\":%{private, location:escape_only}s}", buf, 0x26u);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }

  objc_msgSend(*(id *)(*((_QWORD *)this + 41) + 104), "addServiceToCustomLoiMapping:loiId:", a3, &v17);
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v9.__r_.__value_.__l.__data_);
}

void sub_241A6FFB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,std::exception a22,uint64_t a23,uint64_t a24,std::exception a25)
{
  void *v25;

  std::exception::~exception(&a22);
  if (a15 < 0)
    operator delete(__p);

  if (a21 < 0)
    operator delete(a16);
  _Unwind_Resume(a1);
}

void CLMicroLocationLoiManager::enterLoi(uint64_t a1, uint64_t a2, uint64_t a3, std::string *__str, uint64_t a5)
{
  std::string *v7;
  uint64_t v8;
  std::string __p;

  *(_QWORD *)(a1 + 408) = a2;
  *(_QWORD *)(a1 + 416) = a3;
  v7 = (std::string *)(a1 + 384);
  std::string::operator=((std::string *)(a1 + 384), __str);
  v8 = *(_QWORD *)(a1 + 344);
  if (*(char *)(a1 + 407) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(a1 + 384), *(_QWORD *)(a1 + 392));
  else
    __p = *v7;
  (*(void (**)(uint64_t, std::string *, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v8 + 16))(v8, &__p, *(_QWORD *)(a1 + 408), *(_QWORD *)(a1 + 416), a5);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_241A700B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void CLMicroLocationLoiManager::sendCustomLoiVisitEvent(CLMicroLocationLoiManager *this, NSString *a2, NSString *a3)
{
  NSString *v4;
  NSString *v5;
  CLMicroLocationLoiManager *v6;
  _QWORD v7[3];
  _QWORD v8[4];

  v8[3] = *MEMORY[0x24BDAC8D0];
  v4 = a2;
  v5 = a3;
  v7[0] = CFSTR("customLoiVisitOccurred");
  v7[1] = CFSTR("loiType");
  v8[0] = &unk_2511ED918;
  v8[1] = v4;
  v7[2] = CFSTR("visitEventType");
  v8[2] = v5;
  objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", v8, v7, 3);
  v6 = (CLMicroLocationLoiManager *)objc_claimAutoreleasedReturnValue();
  CLMicroLocationLoiManager::sendCoreAnalyticsEvent(v6, CFSTR("com.apple.MicroLocation.CustomLoiVisitEvent"), (NSDictionary *)v6);

}

void sub_241A701A0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void CLMicroLocationLoiManager::updateDbCustomLoiWasLastSeenNow(CLMicroLocationLoiManager *this, uuid a2)
{
  uuid *v3;
  uint64_t v4;
  uuid *v5;
  uuid *v6;
  uuid *v7;
  uuid *v8;
  id v9;
  void *__p[2];
  char v11;
  void *v12;
  uuid *v13;
  uuid *v14;
  uuid v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  v15 = a2;
  v12 = 0;
  v13 = 0;
  v14 = 0;
  v3 = (uuid *)std::__allocate_at_least[abi:ne180100]<std::allocator<boost::uuids::uuid>>((uint64_t)&v14, 1uLL);
  v5 = &v3[v4];
  *v3 = v15;
  v6 = v3 + 1;
  v8 = (uuid *)v12;
  v7 = v13;
  if (v13 != v12)
  {
    do
    {
      v3[-1] = v7[-1];
      --v3;
      --v7;
    }
    while (v7 != v8);
    v7 = (uuid *)v12;
  }
  v12 = v3;
  v13 = v6;
  v14 = v5;
  if (v7)
    operator delete(v7);
  v13 = v6;
  v9 = *(id *)(*((_QWORD *)this + 41) + 56);
  std::string::basic_string[abi:ne180100]<0>(__p, "custom");
  objc_msgSend(v9, "updateLoiIds:withLoiGroupId:andLoiType:", &v12, &v15, __p);
  if (v11 < 0)
    operator delete(__p[0]);

  if (v12)
  {
    v13 = (uuid *)v12;
    operator delete(v12);
  }
}

void sub_241A702E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17)
{
  void *v17;

  if (a15 < 0)
    operator delete(__p);

  if (a16)
    operator delete(a16);
  _Unwind_Resume(a1);
}

BOOL CLMicroLocationLoiManager::fetchLocationOfInterest(CLMicroLocationLoiManager *this)
{
  uint64_t v1;
  void *v3;
  NSObject *v4;
  _DWORD v6[2];
  __int16 v7;
  const char *v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v1 = *((_QWORD *)this + 42);
  if (v1)
  {
    v3 = (void *)objc_msgSend(objc_alloc(MEMORY[0x24BDBFA80]), "initWithLatitude:longitude:", *((double *)this + 44), *((double *)this + 45));
    objc_msgSend(*((id *)this + 42), "fetchLocationOfInterestAtLocation:", v3);

  }
  else
  {
    if (onceToken_MicroLocation_Default != -1)
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_48);
    v4 = logObject_MicroLocation_Default;
    if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
    {
      v6[0] = 68289026;
      v6[1] = 0;
      v7 = 2082;
      v8 = "";
      _os_log_impl(&dword_2419D9000, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#Warning LOI Bridge not setup.\"}", (uint8_t *)v6, 0x12u);
    }
  }
  return v1 != 0;
}

void sub_241A70448(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void ___ZN25CLMicroLocationLoiManager15setupStartTimerEv_block_invoke(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  NSObject *v3;
  NSObject *v4;
  uint8_t v5[16];
  uint8_t buf[16];

  v1 = *(_QWORD *)(a1 + 32);
  objc_msgSend(*(id *)(v1 + 512), "invalidate");
  v2 = *(void **)(v1 + 512);
  *(_QWORD *)(v1 + 512) = 0;

  if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(v1 + 328) + 16))(*(_QWORD *)(v1 + 328)))
  {
    if (onceToken_MicroLocation_Default != -1)
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_48);
    v3 = logObject_MicroLocation_Default;
    if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_2419D9000, v3, OS_LOG_TYPE_DEFAULT, "#LOI Manager -- Fetching Place inference on Start up", buf, 2u);
    }
    CLMicroLocationLoiManager::fetchPlaceInferenceForReason(v1, 7);
  }
  else
  {
    if (onceToken_MicroLocation_Default != -1)
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_48);
    v4 = logObject_MicroLocation_Default;
    if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v5 = 0;
      _os_log_impl(&dword_2419D9000, v4, OS_LOG_TYPE_DEFAULT, "#LOI Manager -- Skipping place inference on Start up - database not available", v5, 2u);
    }
  }
}

void CLMicroLocationLoiManager::sendCoreAnalyticsEvent(CLMicroLocationLoiManager *this, NSString *a2, NSDictionary *a3)
{
  NSString *v4;
  NSDictionary *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  int v10;
  int v11;
  NSObject *v12;
  NSObject *v13;
  _DWORD v14[2];
  __int16 v15;
  const char *v16;
  __int16 v17;
  uint64_t v18;
  __int16 v19;
  NSDictionary *v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  v4 = a2;
  v5 = a3;
  +[ULDefaultsSingleton shared](ULDefaultsSingleton, "shared");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "defaultsDictionary");
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "ULAnalyticsSendEventEnabled");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "objectForKey:", v8);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  if (v9 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
    v10 = objc_msgSend(v9, "BOOLValue");
  else
    v10 = objc_msgSend(MEMORY[0x24BDBD1C8], "BOOLValue");
  v11 = v10;

  if (v11)
  {
    if (onceToken_MicroLocation_Default != -1)
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_48);
    v12 = (id)logObject_MicroLocation_Default;
    if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
    {
      v14[0] = 68289539;
      v14[1] = 0;
      v15 = 2082;
      v16 = "";
      v17 = 2081;
      v18 = -[NSString UTF8String](objc_retainAutorelease(v4), "UTF8String");
      v19 = 2113;
      v20 = v5;
      _os_log_impl(&dword_2419D9000, v12, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"#LOI Manager, sending core analytics\", \"event\":%{private, location:escape_only}s, \"eventFields\":%{private, location:escape_only}@}", (uint8_t *)v14, 0x26u);
    }

    AnalyticsSendEvent();
  }
  else
  {
    if (onceToken_MicroLocation_Default != -1)
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_48);
    v13 = logObject_MicroLocation_Default;
    if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v14[0]) = 0;
      _os_log_impl(&dword_2419D9000, v13, OS_LOG_TYPE_DEFAULT, "#LOI Manager, CoreAnalytics Disabled", (uint8_t *)v14, 2u);
    }
  }

}

void sub_241A707B0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void CLMicroLocationLoiManager::handleVisitNotification(CLMicroLocationLoiManager *this, CLVisit *a2)
{
  CLVisit *v3;
  NSObject *v4;
  NSObject *v5;
  NSObject *v6;
  _QWORD v7[3];
  char v8;
  id v9;

  v3 = a2;
  if (onceToken_MicroLocation_Default != -1)
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_48);
  v4 = logObject_MicroLocation_Default;
  if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v7[0]) = 0;
    _os_log_impl(&dword_2419D9000, v4, OS_LOG_TYPE_DEFAULT, "LOI Manager, handleVisitNotification", (uint8_t *)v7, 2u);
  }
  if (-[CLVisit hasDepartureDate](v3, "hasDepartureDate"))
  {
    if (onceToken_MicroLocation_Default != -1)
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_48);
    v5 = logObject_MicroLocation_Default;
    if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v7[0]) = 0;
      _os_log_impl(&dword_2419D9000, v5, OS_LOG_TYPE_DEFAULT, "LOI Manager, Received visit exit", (uint8_t *)v7, 2u);
    }
    CLMiLoLoiManagerLoiVisitExitEvent::CLMiLoLoiManagerLoiVisitExitEvent((CLMiLoLoiManagerLoiVisitExitEvent *)v7, v3);
    CLMicroLocationStateMachine::StateMachineBase::handleEvent((CLMicroLocationLoiManager *)((char *)this + 8), (CLMicroLocationStateMachine::EventBase *)v7);
  }
  else
  {
    if (onceToken_MicroLocation_Default != -1)
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_48);
    v6 = logObject_MicroLocation_Default;
    if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v7[0]) = 0;
      _os_log_impl(&dword_2419D9000, v6, OS_LOG_TYPE_DEFAULT, "LOI Manager, Received visit entry", (uint8_t *)v7, 2u);
    }
    CLMiLoLoiManagerLoiVisitEntryEvent::CLMiLoLoiManagerLoiVisitEntryEvent((CLMiLoLoiManagerLoiVisitEntryEvent *)v7, v3);
    CLMicroLocationStateMachine::StateMachineBase::handleEvent((CLMicroLocationLoiManager *)((char *)this + 8), (CLMicroLocationStateMachine::EventBase *)v7);
  }

  v7[0] = off_2511D4DA0;
  if (v8 < 0)
    operator delete((void *)v7[1]);

}

void sub_241A709CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, id a9)
{
  void *v9;

  CLMiLoLoiManagerLoiVisitEntryEvent::~CLMiLoLoiManagerLoiVisitEntryEvent(&a9);

  _Unwind_Resume(a1);
}

void CLMiLoLoiManagerLoiVisitExitEvent::~CLMiLoLoiManagerLoiVisitExitEvent(id *this)
{

  *this = off_2511D4DA0;
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
}

{

  *this = off_2511D4DA0;
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
  JUMPOUT(0x2426A04D4);
}

void CLMiLoLoiManagerLoiVisitEntryEvent::~CLMiLoLoiManagerLoiVisitEntryEvent(id *this)
{

  *this = off_2511D4DA0;
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
}

{

  *this = off_2511D4DA0;
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
  JUMPOUT(0x2426A04D4);
}

void CLMicroLocationLoiManager::handleFetchedPlaceInferences(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  NSObject *v7;
  id v8;
  NSObject *v9;
  id v10;
  uint64_t v11;
  void *v12;
  void *v13;
  _BOOL4 v14;
  NSObject *v15;
  NSObject *v16;
  uint64_t v17;
  _BYTE __p[10];
  __int16 v19;
  uint64_t v20;
  char v21;
  id v22;
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  v5 = a2;
  v6 = a3;
  if (v6)
  {
    if (onceToken_MicroLocation_Default != -1)
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_48);
    v7 = (id)logObject_MicroLocation_Default;
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      objc_msgSend(v6, "description");
      v8 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
      v17 = 68289283;
      *(_WORD *)__p = 2082;
      *(_QWORD *)&__p[2] = "";
      v19 = 2081;
      v20 = objc_msgSend(v8, "UTF8String");
      _os_log_impl(&dword_2419D9000, v7, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"LOI Bridge, Failed To fetch place inferences\", \"Error:\":%{private, location:escape_only}s}", (uint8_t *)&v17, 0x1Cu);

    }
    if (onceToken_MicroLocation_Default != -1)
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_48);
    v9 = (id)logObject_MicroLocation_Default;
    if (os_signpost_enabled(v9))
    {
      objc_msgSend(v6, "description");
      v10 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
      v11 = objc_msgSend(v10, "UTF8String");
      v17 = 68289283;
      *(_WORD *)__p = 2082;
      *(_QWORD *)&__p[2] = "";
      v19 = 2081;
      v20 = v11;
      _os_signpost_emit_with_name_impl(&dword_2419D9000, v9, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "LOI Bridge, Failed To fetch place inferences", "{\"msg%{public}.0s\":\"LOI Bridge, Failed To fetch place inferences\", \"Error:\":%{private, location:escape_only}s}", (uint8_t *)&v17, 0x1Cu);

    }
  }
  if (objc_msgSend(v5, "count"))
  {
    objc_msgSend(v5, "objectAtIndexedSubscript:", 0);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v12, "_loiIdentifier");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    v14 = v13 == 0;

    if (!v14)
    {
      CLMiLoLoiManagerFetchedPlaceInference::CLMiLoLoiManagerFetchedPlaceInference((uint64_t)&v17, v12);
      CLMicroLocationStateMachine::StateMachineBase::handleEvent((CLMicroLocationStateMachine::StateMachineBase *)(a1 + 8), (CLMicroLocationStateMachine::EventBase *)&v17);

      goto LABEL_24;
    }
    if (onceToken_MicroLocation_Default != -1)
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_48);
    v16 = logObject_MicroLocation_Default;
    if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_ERROR))
    {
      LOWORD(v17) = 0;
      _os_log_impl(&dword_2419D9000, v16, OS_LOG_TYPE_ERROR, "LOI Bridge, received nil LOI Identifier, possibly because there is no active user on macOS, we will start leeching and wait for next location update", (uint8_t *)&v17, 2u);
    }
  }
  else
  {
    if (onceToken_MicroLocation_Default != -1)
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_48);
    v15 = logObject_MicroLocation_Default;
    if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v17) = 0;
      _os_log_impl(&dword_2419D9000, v15, OS_LOG_TYPE_DEFAULT, "LOI Bridge, received no place inferences, we will start leeching and wait for next location update", (uint8_t *)&v17, 2u);
    }
    v12 = 0;
  }
  CLMiLoLoiManagerFailedToFetchPlaceInference::CLMiLoLoiManagerFailedToFetchPlaceInference((CLMiLoLoiManagerFailedToFetchPlaceInference *)&v17);
  CLMicroLocationStateMachine::StateMachineBase::handleEvent((CLMicroLocationStateMachine::StateMachineBase *)(a1 + 8), (CLMicroLocationStateMachine::EventBase *)&v17);
LABEL_24:
  v17 = (uint64_t)off_2511D4DA0;
  if (v21 < 0)
    operator delete(*(void **)__p);

}

void sub_241A70E00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  void *v16;
  void *v17;
  void *v18;

  _Unwind_Resume(a1);
}

void CLMiLoLoiManagerFailedToFetchPlaceInference::~CLMiLoLoiManagerFailedToFetchPlaceInference(void **this)
{
  *this = off_2511D4DA0;
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
}

{
  *this = off_2511D4DA0;
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
  JUMPOUT(0x2426A04D4);
}

void CLMicroLocationLoiManager::handleFetchedLocationOfInterestAtLocation(CLMicroLocationLoiManager *this, CLMicroLocationLoi *a2, CLLocation *a3, NSError *a4)
{
  CLMicroLocationLoi *v7;
  CLLocation *v8;
  NSError *v9;
  NSObject *v10;
  id v11;
  __int128 v12;
  char v13;
  id v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v7 = a2;
  v8 = a3;
  v9 = a4;
  if (v9)
  {
    if (onceToken_MicroLocation_Default != -1)
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_48);
    v10 = (id)logObject_MicroLocation_Default;
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      -[NSError description](v9, "description");
      v11 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
      LODWORD(v12) = 136380675;
      *(_QWORD *)((char *)&v12 + 4) = objc_msgSend(v11, "UTF8String");
      _os_log_impl(&dword_2419D9000, v10, OS_LOG_TYPE_DEFAULT, "#Warning LOI Manager, Error retrieving the current LOI. %{private}s", (uint8_t *)&v12, 0xCu);

    }
    CLMiLoLoiManagerFailedToFetchLoiForLocationEvent::CLMiLoLoiManagerFailedToFetchLoiForLocationEvent((CLMiLoLoiManagerFailedToFetchLoiForLocationEvent *)&v12);
    CLMicroLocationStateMachine::StateMachineBase::handleEvent((CLMicroLocationLoiManager *)((char *)this + 8), (CLMicroLocationStateMachine::EventBase *)&v12);
  }
  else
  {
    CLMiLoLoiManagerReceivedLoiForLocationEvent::CLMiLoLoiManagerReceivedLoiForLocationEvent((CLMiLoLoiManagerReceivedLoiForLocationEvent *)&v12, v7);
    CLMicroLocationStateMachine::StateMachineBase::handleEvent((CLMicroLocationLoiManager *)((char *)this + 8), (CLMicroLocationStateMachine::EventBase *)&v12);

  }
  *(_QWORD *)&v12 = off_2511D4DA0;
  if (v13 < 0)
    operator delete(*((void **)&v12 + 1));

}

void sub_241A71050(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;

  _Unwind_Resume(a1);
}

void CLMiLoLoiManagerFailedToFetchLoiForLocationEvent::~CLMiLoLoiManagerFailedToFetchLoiForLocationEvent(void **this)
{
  *this = off_2511D4DA0;
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
}

{
  *this = off_2511D4DA0;
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
  JUMPOUT(0x2426A04D4);
}

void CLMiLoLoiManagerReceivedLoiForLocationEvent::~CLMiLoLoiManagerReceivedLoiForLocationEvent(id *this)
{

  *this = off_2511D4DA0;
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
}

{

  *this = off_2511D4DA0;
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
  JUMPOUT(0x2426A04D4);
}

void CLMicroLocationLoiManager::handleRelatedLoisForLoi(CLMicroLocationLoiManager *this, NSArray *a2, NSError *a3)
{
  NSArray *v4;
  NSObject *v5;
  NSObject *v6;
  void *v7;
  NSArray *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t i;
  id v12;
  char *v13;
  size_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  uint64_t *v26;
  _QWORD *v27;
  _QWORD *v28;
  char *v29;
  NSArray *v31;
  NSError *v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  void *__p;
  uint64_t *v38;
  unint64_t v39;
  uint8_t buf[8];
  _BYTE v41[10];
  __int16 v42;
  NSError *v43;
  char v44;
  _QWORD v45[4];
  _BYTE v46[128];
  uint64_t v47;

  v47 = *MEMORY[0x24BDAC8D0];
  v4 = a2;
  v31 = v4;
  v32 = a3;
  if (v32)
  {
    if (onceToken_MicroLocation_Default != -1)
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_48);
    v5 = logObject_MicroLocation_Default;
    if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 68289283;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)v41 = 2082;
      *(_QWORD *)&v41[2] = "";
      v42 = 2113;
      v43 = v32;
      _os_log_impl(&dword_2419D9000, v5, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"#Warning LOI Manager, Error retrieving related LOIs for Loi\", \"error\":%{private, location:escape_only}@}", buf, 0x1Cu);
    }
    if (onceToken_MicroLocation_Default != -1)
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_48);
    v6 = logObject_MicroLocation_Default;
    if (os_signpost_enabled((os_log_t)logObject_MicroLocation_Default))
    {
      *(_DWORD *)buf = 68289283;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)v41 = 2082;
      *(_QWORD *)&v41[2] = "";
      v42 = 2113;
      v43 = v32;
      _os_signpost_emit_with_name_impl(&dword_2419D9000, v6, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#Warning LOI Manager, Error retrieving related LOIs for Loi", "{\"msg%{public}.0s\":\"#Warning LOI Manager, Error retrieving related LOIs for Loi\", \"error\":%{private, location:escape_only}@}", buf, 0x1Cu);
    }
    CLMiLoLoiManagerFailedToFetchRelatedLois::CLMiLoLoiManagerFailedToFetchRelatedLois((CLMiLoLoiManagerFailedToFetchRelatedLois *)buf);
    CLMicroLocationStateMachine::StateMachineBase::handleEvent((CLMicroLocationLoiManager *)((char *)this + 8), (CLMicroLocationStateMachine::EventBase *)buf);
    *(_QWORD *)buf = off_2511D4DA0;
    if (v44 < 0)
    {
      v7 = *(void **)v41;
LABEL_37:
      operator delete(v7);
    }
  }
  else
  {
    __p = 0;
    v38 = 0;
    v39 = 0;
    v33 = 0u;
    v34 = 0u;
    v35 = 0u;
    v36 = 0u;
    v8 = v4;
    v9 = -[NSArray countByEnumeratingWithState:objects:count:](v8, "countByEnumeratingWithState:objects:count:", &v33, v46, 16);
    if (v9)
    {
      v10 = *(_QWORD *)v34;
      do
      {
        for (i = 0; i != v9; ++i)
        {
          if (*(_QWORD *)v34 != v10)
            objc_enumerationMutation(v8);
          objc_msgSend(*(id *)(*((_QWORD *)&v33 + 1) + 8 * i), "UUIDString");
          v12 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
          v13 = (char *)objc_msgSend(v12, "UTF8String");
          v14 = strlen(v13);
          v15 = boost::uuids::string_generator::operator()<char const*>((boost::uuids::string_generator *)buf, (unsigned __int8 *)v13, (unsigned __int8 *)&v13[v14]);
          v17 = v15;
          v18 = v16;
          v19 = v38;
          if ((unint64_t)v38 >= v39)
          {
            v21 = ((char *)v38 - (_BYTE *)__p) >> 4;
            v22 = v21 + 1;
            if ((unint64_t)(v21 + 1) >> 60)
              std::vector<CLMicroLocationProto::ConfidenceReason>::__throw_length_error[abi:ne180100]();
            v23 = v39 - (_QWORD)__p;
            if ((uint64_t)(v39 - (_QWORD)__p) >> 3 > v22)
              v22 = v23 >> 3;
            if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFF0)
              v24 = 0xFFFFFFFFFFFFFFFLL;
            else
              v24 = v22;
            if (v24)
              v25 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<boost::uuids::uuid>>((uint64_t)&v39, v24);
            else
              v25 = 0;
            v26 = (uint64_t *)&v25[16 * v21];
            *v26 = v17;
            v26[1] = v18;
            v28 = __p;
            v27 = v38;
            v29 = (char *)v26;
            if (v38 != __p)
            {
              do
              {
                *((_OWORD *)v29 - 1) = *((_OWORD *)v27 - 1);
                v29 -= 16;
                v27 -= 2;
              }
              while (v27 != v28);
              v27 = __p;
            }
            v20 = v26 + 2;
            __p = v29;
            v38 = v26 + 2;
            v39 = (unint64_t)&v25[16 * v24];
            if (v27)
              operator delete(v27);
          }
          else
          {
            *v38 = v15;
            v19[1] = v16;
            v20 = v19 + 2;
          }
          v38 = v20;

        }
        v9 = -[NSArray countByEnumeratingWithState:objects:count:](v8, "countByEnumeratingWithState:objects:count:", &v33, v46, 16);
      }
      while (v9);
    }

    *(_QWORD *)buf = off_2511D4DA0;
    std::string::basic_string[abi:ne180100]<0>(v41, "No Name Given");
    *(_QWORD *)buf = &off_2511D5DA0;
    memset(v45, 0, 24);
    std::vector<boost::uuids::uuid>::__assign_with_size[abi:ne180100]<boost::uuids::uuid*,boost::uuids::uuid*>((char *)v45, (char *)__p, (uint64_t)v38, ((char *)v38 - (_BYTE *)__p) >> 4);
    MEMORY[0x2426A02C4](v41, "Got Related LOIs");
    CLMicroLocationStateMachine::StateMachineBase::handleEvent((CLMicroLocationLoiManager *)((char *)this + 8), (CLMicroLocationStateMachine::EventBase *)buf);
    CLMiLoLoiManagerReceivedRelatedLoisEvent::~CLMiLoLoiManagerReceivedRelatedLoisEvent((CLMiLoLoiManagerReceivedRelatedLoisEvent *)buf);
    v7 = __p;
    if (__p)
    {
      v38 = (uint64_t *)__p;
      goto LABEL_37;
    }
  }

}

void sub_241A7155C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *a32,uint64_t a33)
{
  CLMiLoLoiManagerReceivedRelatedLoisEvent::~CLMiLoLoiManagerReceivedRelatedLoisEvent((CLMiLoLoiManagerReceivedRelatedLoisEvent *)&a25);
  if (__p)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void CLMiLoLoiManagerFailedToFetchRelatedLois::~CLMiLoLoiManagerFailedToFetchRelatedLois(void **this)
{
  *this = off_2511D4DA0;
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
}

{
  *this = off_2511D4DA0;
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
  JUMPOUT(0x2426A04D4);
}

void CLMicroLocationLoiManager::handleLocationUpdate(CLMicroLocationLoiManager *this, CLLocation *a2, NSError *a3)
{
  CLLocation *v5;
  NSError *v6;
  NSObject *v7;
  NSObject *v8;
  NSObject *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD v13[2];
  __int16 v14;
  const char *v15;
  __int16 v16;
  uint64_t v17;
  __int16 v18;
  uint64_t v19;
  uint8_t buf[8];
  _BYTE __p[10];
  __int16 v22;
  NSError *v23;
  char v24;
  id v25;
  uint64_t v26;

  v26 = *MEMORY[0x24BDAC8D0];
  v5 = a2;
  v6 = a3;
  if (!v6)
  {
    if (!*((_BYTE *)this + 506))
    {
      (*(void (**)(CLMicroLocationLoiManager *, CLLocation *))(*(_QWORD *)this + 40))(this, v5);
      goto LABEL_21;
    }
    CLMiLoLoiManagerGotLocationUpdateEvent::CLMiLoLoiManagerGotLocationUpdateEvent((CLMiLoLoiManagerGotLocationUpdateEvent *)buf, v5);
    if (onceToken_MicroLocation_Default != -1)
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_48);
    v9 = (id)logObject_MicroLocation_Default;
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      -[CLLocation coordinate](v5, "coordinate");
      v11 = v10;
      -[CLLocation coordinate](v5, "coordinate");
      v13[0] = 68289539;
      v13[1] = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2049;
      v17 = v11;
      v18 = 2049;
      v19 = v12;
      _os_log_impl(&dword_2419D9000, v9, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#LOI Manager, got location update\", \"latitude\":\"%{private}7f\", \"longitude\":\"%{private}7f\"}", (uint8_t *)v13, 0x26u);
    }

    CLMicroLocationStateMachine::StateMachineBase::handleEvent((CLMicroLocationLoiManager *)((char *)this + 8), (CLMicroLocationStateMachine::EventBase *)buf);
    goto LABEL_18;
  }
  if (onceToken_MicroLocation_Default != -1)
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_48);
  v7 = logObject_MicroLocation_Default;
  if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 68289282;
    *(_DWORD *)&buf[4] = 0;
    *(_WORD *)__p = 2082;
    *(_QWORD *)&__p[2] = "";
    v22 = 2114;
    v23 = v6;
    _os_log_impl(&dword_2419D9000, v7, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"#LOI Manager, failed to get current location to enable MiLo\", \"Error\":%{public, location:escape_only}@}", buf, 0x1Cu);
  }
  if (onceToken_MicroLocation_Default != -1)
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_48);
  v8 = logObject_MicroLocation_Default;
  if (os_signpost_enabled((os_log_t)logObject_MicroLocation_Default))
  {
    *(_DWORD *)buf = 68289282;
    *(_DWORD *)&buf[4] = 0;
    *(_WORD *)__p = 2082;
    *(_QWORD *)&__p[2] = "";
    v22 = 2114;
    v23 = v6;
    _os_signpost_emit_with_name_impl(&dword_2419D9000, v8, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#LOI Manager, failed to get current location to enable MiLo", "{\"msg%{public}.0s\":\"#LOI Manager, failed to get current location to enable MiLo\", \"Error\":%{public, location:escape_only}@}", buf, 0x1Cu);
  }
  if (*((_BYTE *)this + 506))
  {
    CLMiLoLoiManagerFailedToGetLocationUpdateEvent::CLMiLoLoiManagerFailedToGetLocationUpdateEvent((CLMiLoLoiManagerFailedToGetLocationUpdateEvent *)buf);
    CLMicroLocationStateMachine::StateMachineBase::handleEvent((CLMicroLocationLoiManager *)((char *)this + 8), (CLMicroLocationStateMachine::EventBase *)buf);
LABEL_18:
    *(_QWORD *)buf = off_2511D4DA0;
    if (v24 < 0)
      operator delete(*(void **)__p);
  }
LABEL_21:

}

void sub_241A71944(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  void *v21;
  void *v22;
  void *v23;

  CLMiLoLoiManagerFetchedPlaceInference::~CLMiLoLoiManagerFetchedPlaceInference((id *)&a15);
  _Unwind_Resume(a1);
}

void CLMiLoLoiManagerFailedToGetLocationUpdateEvent::~CLMiLoLoiManagerFailedToGetLocationUpdateEvent(void **this)
{
  *this = off_2511D4DA0;
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
}

{
  *this = off_2511D4DA0;
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
  JUMPOUT(0x2426A04D4);
}

void CLMicroLocationLoiManager::handleLeechedLocationUpdate(CLMicroLocationLoiManager *this, CLLocation *a2)
{
  _QWORD v3[3];
  char v4;
  id v5;

  CLMiLoLoiManagerLeechedLocationEvent::CLMiLoLoiManagerLeechedLocationEvent((CLMiLoLoiManagerLeechedLocationEvent *)v3, a2);
  CLMicroLocationStateMachine::StateMachineBase::handleEvent((CLMicroLocationLoiManager *)((char *)this + 8), (CLMicroLocationStateMachine::EventBase *)v3);

  v3[0] = off_2511D4DA0;
  if (v4 < 0)
    operator delete((void *)v3[1]);
}

void sub_241A71A48(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  CLMiLoLoiManagerFetchedPlaceInference::~CLMiLoLoiManagerFetchedPlaceInference((id *)va);
  _Unwind_Resume(a1);
}

void CLMiLoLoiManagerLeechedLocationEvent::CLMiLoLoiManagerLeechedLocationEvent(CLMiLoLoiManagerLeechedLocationEvent *this, CLLocation *a2)
{
  CLLocation *v3;
  void *v4;

  v3 = a2;
  *(_QWORD *)this = off_2511D4DA0;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)this + 1, "No Name Given");
  *(_QWORD *)this = &off_2511D5E00;
  *((_QWORD *)this + 4) = 0;
  MEMORY[0x2426A02C4]((char *)this + 8, "Leeched Location Update");
  v4 = (void *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = v3;

}

void sub_241A71AE8(_Unwind_Exception *a1)
{
  void *v1;
  uint64_t v2;
  void **v3;
  uint64_t v4;
  uint64_t v5;

  v5 = v4;

  *(_QWORD *)v2 = v5;
  if (*(char *)(v2 + 31) < 0)
    operator delete(*v3);

  _Unwind_Resume(a1);
}

void CLMicroLocationLoiManager::didCompleteSettingGeofenceAtLocation(CLMicroLocationLoiManager *this, CLLocation *a2, uuid a3, NSError *a4)
{
  uint64_t v4;
  uint64_t v5;
  NSError *v7;
  NSObject *v8;
  NSObject *v9;
  _QWORD *v10;
  void (**v11)(CLMicroLocationStateMachine::EventBase *__hidden);
  void *__p;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint8_t buf[4];
  int v17;
  __int16 v18;
  const char *v19;
  __int16 v20;
  NSError *v21;
  uint64_t v22;

  v4 = *(_QWORD *)&a3.var0[8];
  v5 = *(_QWORD *)a3.var0;
  v22 = *MEMORY[0x24BDAC8D0];
  v7 = a4;
  if (v7)
  {
    CLMiLoLoiManagerFailedToSetGeofenceEvent::CLMiLoLoiManagerFailedToSetGeofenceEvent((CLMiLoLoiManagerFailedToSetGeofenceEvent *)&v11);
    CLMicroLocationStateMachine::StateMachineBase::handleEvent((CLMicroLocationLoiManager *)((char *)this + 8), (CLMicroLocationStateMachine::EventBase *)&v11);
    if (onceToken_MicroLocation_Default != -1)
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_48);
    v8 = logObject_MicroLocation_Default;
    if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 68289282;
      v17 = 0;
      v18 = 2082;
      v19 = "";
      v20 = 2114;
      v21 = v7;
      _os_log_impl(&dword_2419D9000, v8, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"#LOI Manager, failed to set geofence at current location to enable MiLo\", \"Error\":%{public, location:escape_only}@}", buf, 0x1Cu);
    }
    if (onceToken_MicroLocation_Default != -1)
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_48);
    v9 = logObject_MicroLocation_Default;
    if (os_signpost_enabled((os_log_t)logObject_MicroLocation_Default))
    {
      *(_DWORD *)buf = 68289282;
      v17 = 0;
      v18 = 2082;
      v19 = "";
      v20 = 2114;
      v21 = v7;
      _os_signpost_emit_with_name_impl(&dword_2419D9000, v9, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#LOI Manager, failed to set geofence at current location to enable MiLo", "{\"msg%{public}.0s\":\"#LOI Manager, failed to set geofence at current location to enable MiLo\", \"Error\":%{public, location:escape_only}@}", buf, 0x1Cu);
    }
    v11 = off_2511D4DA0;
  }
  else
  {
    v10 = std::string::basic_string[abi:ne180100]<0>(&__p, "No Name Given");
    v11 = off_2511D5E40;
    v14 = v5;
    v15 = v4;
    MEMORY[0x2426A02C4](v10, "Started Process of Activaing Geofence");
    CLMicroLocationStateMachine::StateMachineBase::handleEvent((CLMicroLocationLoiManager *)((char *)this + 8), (CLMicroLocationStateMachine::EventBase *)&v11);
    v11 = off_2511D4DA0;
  }
  if (v13 < 0)
    operator delete(__p);

}

void sub_241A71D48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;

  if (a15 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void CLMiLoLoiManagerFailedToSetGeofenceEvent::~CLMiLoLoiManagerFailedToSetGeofenceEvent(void **this)
{
  *this = off_2511D4DA0;
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
}

{
  *this = off_2511D4DA0;
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
  JUMPOUT(0x2426A04D4);
}

void CLMiLoLoiManagerStartedActivatingGeofenceEvent::~CLMiLoLoiManagerStartedActivatingGeofenceEvent(void **this)
{
  *this = off_2511D4DA0;
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
}

{
  *this = off_2511D4DA0;
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
  JUMPOUT(0x2426A04D4);
}

void CLMicroLocationLoiManager::handleGeofenceUpdate(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  char *v6;
  size_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  uint64_t v12;
  _QWORD *v13;
  void (**v14)(CLMicroLocationStateMachine::EventBase *__hidden);
  _BYTE __p[10];
  __int16 v16;
  uint64_t v17;
  __int16 v18;
  _BYTE v19[10];
  uint64_t v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  v5 = objc_retainAutorelease(a2);
  v6 = (char *)objc_msgSend(v5, "UTF8String");
  v7 = strlen(v6);
  v8 = boost::uuids::string_generator::operator()<char const*>((boost::uuids::string_generator *)&v14, (unsigned __int8 *)v6, (unsigned __int8 *)&v6[v7]);
  v10 = v9;
  if (onceToken_MicroLocation_Default != -1)
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_48);
  v11 = (id)logObject_MicroLocation_Default;
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    v12 = objc_msgSend(objc_retainAutorelease(v5), "UTF8String");
    v14 = (void (**)(CLMicroLocationStateMachine::EventBase *__hidden))68289539;
    *(_WORD *)__p = 2082;
    *(_QWORD *)&__p[2] = "";
    v16 = 2081;
    v17 = v12;
    v18 = 1025;
    *(_DWORD *)v19 = a3;
    _os_log_impl(&dword_2419D9000, v11, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"LOI Manager, Got Geofence update\", \"Geofence Id\":%{private, location:escape_only}s, \"State\":%{private}d}", (uint8_t *)&v14, 0x22u);
  }

  v14 = off_2511D4DA0;
  v13 = std::string::basic_string[abi:ne180100]<0>(__p, "No Name Given");
  if (a3 == 1)
  {
    v14 = off_2511D5E60;
    *(_QWORD *)&v19[2] = v8;
    v20 = v10;
    MEMORY[0x2426A02C4](v13, "Geofence Entry");
  }
  else
  {
    v14 = off_2511D5E80;
    *(_QWORD *)&v19[2] = v8;
    v20 = v10;
    MEMORY[0x2426A02C4](v13, "Geofence Exit");
  }
  CLMicroLocationStateMachine::StateMachineBase::handleEvent((CLMicroLocationStateMachine::StateMachineBase *)(a1 + 8), (CLMicroLocationStateMachine::EventBase *)&v14);
  v14 = off_2511D4DA0;
  if ((v19[1] & 0x80000000) != 0)
    operator delete(*(void **)__p);

}

void sub_241A7200C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;

  if (a15 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void CLMiLoLoiManagerGeofenceEntryEvent::~CLMiLoLoiManagerGeofenceEntryEvent(void **this)
{
  *this = off_2511D4DA0;
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
}

{
  *this = off_2511D4DA0;
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
  JUMPOUT(0x2426A04D4);
}

void CLMiLoLoiManagerGeofenceExitEvent::~CLMiLoLoiManagerGeofenceExitEvent(void **this)
{
  *this = off_2511D4DA0;
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
}

{
  *this = off_2511D4DA0;
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
  JUMPOUT(0x2426A04D4);
}

void CLMicroLocationLoiManager::didRemoveGeofenceWithId(CLMicroLocationLoiManager *this, NSString *a2, NSError *a3)
{
  NSString *v4;
  NSError *v5;
  NSObject *v6;
  NSObject *v7;
  NSObject *v8;
  int v9;
  int v10;
  __int16 v11;
  const char *v12;
  __int16 v13;
  NSString *v14;
  __int16 v15;
  NSError *v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  v4 = a2;
  v5 = a3;
  if (v5)
  {
    if (onceToken_MicroLocation_Default != -1)
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_48);
    v6 = logObject_MicroLocation_Default;
    if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_ERROR))
    {
      v9 = 68289539;
      v10 = 0;
      v11 = 2082;
      v12 = "";
      v13 = 2113;
      v14 = v4;
      v15 = 2113;
      v16 = v5;
      _os_log_impl(&dword_2419D9000, v6, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"#LOI Manager, Failed to RemoveGeofence\", \"regionId\":%{private, location:escape_only}@, \"error\":%{private, location:escape_only}@}", (uint8_t *)&v9, 0x26u);
    }
    if (onceToken_MicroLocation_Default != -1)
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_48);
    v7 = logObject_MicroLocation_Default;
    if (os_signpost_enabled((os_log_t)logObject_MicroLocation_Default))
    {
      v9 = 68289539;
      v10 = 0;
      v11 = 2082;
      v12 = "";
      v13 = 2113;
      v14 = v4;
      v15 = 2113;
      v16 = v5;
      _os_signpost_emit_with_name_impl(&dword_2419D9000, v7, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#LOI Manager, Failed to RemoveGeofence", "{\"msg%{public}.0s\":\"#LOI Manager, Failed to RemoveGeofence\", \"regionId\":%{private, location:escape_only}@, \"error\":%{private, location:escape_only}@}", (uint8_t *)&v9, 0x26u);
    }
  }
  else
  {
    if (onceToken_MicroLocation_Default != -1)
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_48);
    v8 = logObject_MicroLocation_Default;
    if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
    {
      v9 = 68289539;
      v10 = 0;
      v11 = 2082;
      v12 = "";
      v13 = 2113;
      v14 = v4;
      v15 = 2113;
      v16 = 0;
      _os_log_impl(&dword_2419D9000, v8, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#LOI Manager, didRemoveGeofenceWithId\", \"regionId\":%{private, location:escape_only}@, \"error\":%{private, location:escape_only}@}", (uint8_t *)&v9, 0x26u);
    }
  }

}

void ___ZN25CLMicroLocationLoiManager24startCustomLoiEntryTimerEv_block_invoke(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  _QWORD v3[3];
  char v4;

  v1 = *(_QWORD *)(a1 + 32);
  objc_msgSend(*(id *)(v1 + 520), "invalidate");
  v2 = *(void **)(v1 + 520);
  *(_QWORD *)(v1 + 520) = 0;

  CLMiLoLoiManagerEnteringCustomLoiTimeout::CLMiLoLoiManagerEnteringCustomLoiTimeout((CLMiLoLoiManagerEnteringCustomLoiTimeout *)v3);
  CLMicroLocationStateMachine::StateMachineBase::handleEvent((CLMicroLocationStateMachine::StateMachineBase *)(v1 + 8), (CLMicroLocationStateMachine::EventBase *)v3);
  v3[0] = off_2511D4DA0;
  if (v4 < 0)
    operator delete((void *)v3[1]);
}

void sub_241A72390(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void CLMiLoLoiManagerEnteringCustomLoiTimeout::~CLMiLoLoiManagerEnteringCustomLoiTimeout(void **this)
{
  *this = off_2511D4DA0;
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
}

{
  *this = off_2511D4DA0;
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
  JUMPOUT(0x2426A04D4);
}

_QWORD *CLMicroLocationStateMachine::EventHandlerWrapper<CLMicroLocationLoiManager,CLMiLoLoiManagerLoiVisitEntryEvent,&CLMicroLocationLoiManager::VisitEntry>::stateFunction@<X0>(void *lpsrc@<X2>, uint64_t a2@<X1>, std::string *a3@<X8>)
{
  CLMicroLocationLoiManager *v5;
  id *v6;
  _QWORD *result;
  NSObject *v8;
  uint64_t v9;
  __int128 v10;
  int v11;
  std::string::size_type v12;
  std::string *v13;
  std::string *p_p;
  NSObject *v15;
  uint64_t v16;
  __int128 v17;
  int v18;
  std::string::size_type v19;
  std::string *v20;
  std::string *v21;
  NSObject *v22;
  uint64_t v23;
  __int128 v24;
  int v25;
  std::string::size_type v26;
  std::string *v27;
  std::string *v28;
  CLMicroLocationStateMachine::EventBase *v29;
  std::string __p;
  std::string v31;
  uint8_t buf[4];
  int v33;
  __int16 v34;
  const char *v35;
  __int16 v36;
  std::string *v37;
  __int16 v38;
  std::string *v39;
  __int16 v40;
  const char *v41;
  __int16 v42;
  const char *v43;
  uint64_t v44;

  v44 = *MEMORY[0x24BDAC8D0];
  if (a2)
    v5 = (CLMicroLocationLoiManager *)(a2 - 8);
  else
    v5 = 0;
  if (lpsrc)
  {
    if (v6)
      return CLMicroLocationLoiManager::VisitEntry(v5, v6, a3);
  }
  v29 = (CLMicroLocationStateMachine::EventBase *)lpsrc;
  _CLLogObjectForCategory_MicroLocation_Default();
  v8 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v8, OS_LOG_TYPE_FAULT))
  {
    v9 = *((_QWORD *)v5 + 2);
    if (*(char *)(v9 + 31) < 0)
    {
      std::string::__init_copy_ctor_external(&v31, *(const std::string::value_type **)(v9 + 8), *(_QWORD *)(v9 + 16));
    }
    else
    {
      v10 = *(_OWORD *)(v9 + 8);
      v31.__r_.__value_.__r.__words[2] = *(_QWORD *)(v9 + 24);
      *(_OWORD *)&v31.__r_.__value_.__l.__data_ = v10;
    }
    v11 = SHIBYTE(v31.__r_.__value_.__r.__words[2]);
    v12 = v31.__r_.__value_.__r.__words[0];
    CLMicroLocationStateMachine::EventBase::getEventName((CLMicroLocationStateMachine::EventBase *)lpsrc, &__p);
    v13 = &v31;
    if (v11 < 0)
      v13 = (std::string *)v12;
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    *(_DWORD *)buf = 68290051;
    v33 = 0;
    v34 = 2082;
    v35 = "";
    v36 = 2081;
    v37 = v13;
    v38 = 2081;
    v39 = p_p;
    v40 = 2082;
    v41 = "assert";
    v42 = 2081;
    v43 = "derivedEventData != __null";
    _os_log_impl(&dword_2419D9000, v8, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Received unsupported event in state event handler\", \"State\":%{private, location:escape_only}s, \"Received Event\":%{private, location:escape_only}s, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x3Au);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v31.__r_.__value_.__l.__data_);
  }

  _CLLogObjectForCategory_MicroLocation_Default();
  v15 = objc_claimAutoreleasedReturnValue();
  if (os_signpost_enabled(v15))
  {
    v16 = *((_QWORD *)v5 + 2);
    if (*(char *)(v16 + 31) < 0)
    {
      std::string::__init_copy_ctor_external(&v31, *(const std::string::value_type **)(v16 + 8), *(_QWORD *)(v16 + 16));
    }
    else
    {
      v17 = *(_OWORD *)(v16 + 8);
      v31.__r_.__value_.__r.__words[2] = *(_QWORD *)(v16 + 24);
      *(_OWORD *)&v31.__r_.__value_.__l.__data_ = v17;
    }
    v18 = SHIBYTE(v31.__r_.__value_.__r.__words[2]);
    v19 = v31.__r_.__value_.__r.__words[0];
    CLMicroLocationStateMachine::EventBase::getEventName((CLMicroLocationStateMachine::EventBase *)lpsrc, &__p);
    v20 = &v31;
    if (v18 < 0)
      v20 = (std::string *)v19;
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v21 = &__p;
    else
      v21 = (std::string *)__p.__r_.__value_.__r.__words[0];
    *(_DWORD *)buf = 68290051;
    v33 = 0;
    v34 = 2082;
    v35 = "";
    v36 = 2081;
    v37 = v20;
    v38 = 2081;
    v39 = v21;
    v40 = 2082;
    v41 = "assert";
    v42 = 2081;
    v43 = "derivedEventData != __null";
    _os_signpost_emit_with_name_impl(&dword_2419D9000, v15, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Received unsupported event in state event handler", "{\"msg%{public}.0s\":\"Received unsupported event in state event handler\", \"State\":%{private, location:escape_only}s, \"Received Event\":%{private, location:escape_only}s, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x3Au);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v31.__r_.__value_.__l.__data_);
  }

  _CLLogObjectForCategory_MicroLocation_Default();
  v22 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v22, OS_LOG_TYPE_INFO))
  {
    v23 = *((_QWORD *)v5 + 2);
    if (*(char *)(v23 + 31) < 0)
    {
      std::string::__init_copy_ctor_external(&v31, *(const std::string::value_type **)(v23 + 8), *(_QWORD *)(v23 + 16));
    }
    else
    {
      v24 = *(_OWORD *)(v23 + 8);
      v31.__r_.__value_.__r.__words[2] = *(_QWORD *)(v23 + 24);
      *(_OWORD *)&v31.__r_.__value_.__l.__data_ = v24;
    }
    v25 = SHIBYTE(v31.__r_.__value_.__r.__words[2]);
    v26 = v31.__r_.__value_.__r.__words[0];
    CLMicroLocationStateMachine::EventBase::getEventName(v29, &__p);
    v27 = &v31;
    if (v25 < 0)
      v27 = (std::string *)v26;
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v28 = &__p;
    else
      v28 = (std::string *)__p.__r_.__value_.__r.__words[0];
    *(_DWORD *)buf = 68290051;
    v33 = 0;
    v34 = 2082;
    v35 = "";
    v36 = 2081;
    v37 = v27;
    v38 = 2081;
    v39 = v28;
    v40 = 2082;
    v41 = "assert";
    v42 = 2081;
    v43 = "derivedEventData != __null";
    _os_log_impl(&dword_2419D9000, v22, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Received unsupported event in state event handler\", \"State\":%{private, location:escape_only}s, \"Received Event\":%{private, location:escape_only}s, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x3Au);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v31.__r_.__value_.__l.__data_);
  }

  result = (_QWORD *)abort_report_np();
  __break(1u);
  return result;
}

void sub_241A7281C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  void *v22;

  _Unwind_Resume(a1);
}

void CLMicroLocationStateMachine::EventHandlerWrapper<CLMicroLocationLoiManager,CLMiLoLoiManagerLoiVisitEntryEvent,&CLMicroLocationLoiManager::VisitEntry>::~EventHandlerWrapper(CLMacAddress *a1, unint64_t a2)
{
  CLMacAddress::newFromUint64(a1, a2);
  JUMPOUT(0x2426A04D4);
}

uint64_t CLMicroLocationStateMachine::EventHandlerWrapper<CLMicroLocationLoiManager,CLMiLoLoiManagerEnableCustomLoiEvent,&CLMicroLocationLoiManager::EnableCustomLoi>::stateFunction@<X0>(CLMicroLocationStateMachine::EventBase *lpsrc@<X2>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uuid *v6;
  uint64_t result;
  NSObject *v8;
  uint64_t v9;
  __int128 v10;
  int v11;
  std::string::size_type v12;
  std::string *v13;
  std::string *p_p;
  NSObject *v15;
  uint64_t v16;
  __int128 v17;
  int v18;
  std::string::size_type v19;
  std::string *v20;
  std::string *v21;
  NSObject *v22;
  uint64_t v23;
  __int128 v24;
  int v25;
  std::string::size_type v26;
  std::string *v27;
  std::string *v28;
  std::string __p;
  std::string v30;
  _BYTE buf[28];
  __int16 v32;
  std::string *v33;
  __int16 v34;
  const char *v35;
  __int16 v36;
  const char *v37;
  uint64_t v38;

  v38 = *MEMORY[0x24BDAC8D0];
  if (a2)
    v5 = a2 - 8;
  else
    v5 = 0;
  if (lpsrc
  {
    result = (uint64_t)CLMicroLocationLoiManager::handleEnableCustomLoi((id *)v5, v6[2], buf);
    *(_OWORD *)a3 = *(_OWORD *)buf;
    *(_QWORD *)(a3 + 16) = *(_QWORD *)&buf[16];
    *(_BYTE *)(a3 + 24) = 1;
  }
  else
  {
    _CLLogObjectForCategory_MicroLocation_Default();
    v8 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_FAULT))
    {
      v9 = *(_QWORD *)(v5 + 16);
      if (*(char *)(v9 + 31) < 0)
      {
        std::string::__init_copy_ctor_external(&v30, *(const std::string::value_type **)(v9 + 8), *(_QWORD *)(v9 + 16));
      }
      else
      {
        v10 = *(_OWORD *)(v9 + 8);
        v30.__r_.__value_.__r.__words[2] = *(_QWORD *)(v9 + 24);
        *(_OWORD *)&v30.__r_.__value_.__l.__data_ = v10;
      }
      v11 = SHIBYTE(v30.__r_.__value_.__r.__words[2]);
      v12 = v30.__r_.__value_.__r.__words[0];
      CLMicroLocationStateMachine::EventBase::getEventName(lpsrc, &__p);
      v13 = &v30;
      if (v11 < 0)
        v13 = (std::string *)v12;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_p = &__p;
      else
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      *(_DWORD *)buf = 68290051;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)&buf[8] = 2082;
      *(_QWORD *)&buf[10] = "";
      *(_WORD *)&buf[18] = 2081;
      *(_QWORD *)&buf[20] = v13;
      v32 = 2081;
      v33 = p_p;
      v34 = 2082;
      v35 = "assert";
      v36 = 2081;
      v37 = "derivedEventData != __null";
      _os_log_impl(&dword_2419D9000, v8, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Received unsupported event in state event handler\", \"State\":%{private, location:escape_only}s, \"Received Event\":%{private, location:escape_only}s, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x3Au);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v30.__r_.__value_.__l.__data_);
    }

    _CLLogObjectForCategory_MicroLocation_Default();
    v15 = objc_claimAutoreleasedReturnValue();
    if (os_signpost_enabled(v15))
    {
      v16 = *(_QWORD *)(v5 + 16);
      if (*(char *)(v16 + 31) < 0)
      {
        std::string::__init_copy_ctor_external(&v30, *(const std::string::value_type **)(v16 + 8), *(_QWORD *)(v16 + 16));
      }
      else
      {
        v17 = *(_OWORD *)(v16 + 8);
        v30.__r_.__value_.__r.__words[2] = *(_QWORD *)(v16 + 24);
        *(_OWORD *)&v30.__r_.__value_.__l.__data_ = v17;
      }
      v18 = SHIBYTE(v30.__r_.__value_.__r.__words[2]);
      v19 = v30.__r_.__value_.__r.__words[0];
      CLMicroLocationStateMachine::EventBase::getEventName(lpsrc, &__p);
      v20 = &v30;
      if (v18 < 0)
        v20 = (std::string *)v19;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v21 = &__p;
      else
        v21 = (std::string *)__p.__r_.__value_.__r.__words[0];
      *(_DWORD *)buf = 68290051;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)&buf[8] = 2082;
      *(_QWORD *)&buf[10] = "";
      *(_WORD *)&buf[18] = 2081;
      *(_QWORD *)&buf[20] = v20;
      v32 = 2081;
      v33 = v21;
      v34 = 2082;
      v35 = "assert";
      v36 = 2081;
      v37 = "derivedEventData != __null";
      _os_signpost_emit_with_name_impl(&dword_2419D9000, v15, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Received unsupported event in state event handler", "{\"msg%{public}.0s\":\"Received unsupported event in state event handler\", \"State\":%{private, location:escape_only}s, \"Received Event\":%{private, location:escape_only}s, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x3Au);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v30.__r_.__value_.__l.__data_);
    }

    _CLLogObjectForCategory_MicroLocation_Default();
    v22 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v22, OS_LOG_TYPE_INFO))
    {
      v23 = *(_QWORD *)(v5 + 16);
      if (*(char *)(v23 + 31) < 0)
      {
        std::string::__init_copy_ctor_external(&v30, *(const std::string::value_type **)(v23 + 8), *(_QWORD *)(v23 + 16));
      }
      else
      {
        v24 = *(_OWORD *)(v23 + 8);
        v30.__r_.__value_.__r.__words[2] = *(_QWORD *)(v23 + 24);
        *(_OWORD *)&v30.__r_.__value_.__l.__data_ = v24;
      }
      v25 = SHIBYTE(v30.__r_.__value_.__r.__words[2]);
      v26 = v30.__r_.__value_.__r.__words[0];
      CLMicroLocationStateMachine::EventBase::getEventName(lpsrc, &__p);
      v27 = &v30;
      if (v25 < 0)
        v27 = (std::string *)v26;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v28 = &__p;
      else
        v28 = (std::string *)__p.__r_.__value_.__r.__words[0];
      *(_DWORD *)buf = 68290051;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)&buf[8] = 2082;
      *(_QWORD *)&buf[10] = "";
      *(_WORD *)&buf[18] = 2081;
      *(_QWORD *)&buf[20] = v27;
      v32 = 2081;
      v33 = v28;
      v34 = 2082;
      v35 = "assert";
      v36 = 2081;
      v37 = "derivedEventData != __null";
      _os_log_impl(&dword_2419D9000, v22, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Received unsupported event in state event handler\", \"State\":%{private, location:escape_only}s, \"Received Event\":%{private, location:escape_only}s, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x3Au);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v30.__r_.__value_.__l.__data_);
    }

    result = abort_report_np();
    __break(1u);
  }
  return result;
}

void sub_241A72CC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  void *v22;

  _Unwind_Resume(a1);
}

void CLMicroLocationStateMachine::EventHandlerWrapper<CLMicroLocationLoiManager,CLMiLoLoiManagerEnableCustomLoiEvent,&CLMicroLocationLoiManager::EnableCustomLoi>::~EventHandlerWrapper(CLMacAddress *a1, unint64_t a2)
{
  CLMacAddress::newFromUint64(a1, a2);
  JUMPOUT(0x2426A04D4);
}

void CLMicroLocationStateMachine::EventHandlerWrapper<CLMicroLocationLoiManager,CLMiLoLoiManagerDisableCustomLoiEvent,&CLMicroLocationLoiManager::DisableCustomLoi>::stateFunction(CLMicroLocationStateMachine::EventBase *lpsrc@<X2>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uuid *v6;
  NSObject *v7;
  uint64_t v8;
  __int128 v9;
  int v10;
  std::string::size_type v11;
  std::string *v12;
  std::string *p_p;
  NSObject *v14;
  uint64_t v15;
  __int128 v16;
  int v17;
  std::string::size_type v18;
  std::string *v19;
  std::string *v20;
  NSObject *v21;
  uint64_t v22;
  __int128 v23;
  int v24;
  std::string::size_type v25;
  std::string *v26;
  std::string *v27;
  CLMicroLocationStateMachine::EventBase *v28;
  std::string __p;
  std::string v30;
  _BYTE buf[28];
  __int16 v32;
  std::string *v33;
  __int16 v34;
  const char *v35;
  __int16 v36;
  const char *v37;
  uint64_t v38;

  v38 = *MEMORY[0x24BDAC8D0];
  if (a2)
    v5 = a2 - 8;
  else
    v5 = 0;
  if (lpsrc
  {
    CLMicroLocationLoiManager::handleDisableCustomLoi((id *)v5, v6[2], v6[3], (std::string *)buf);
    *(_OWORD *)a3 = *(_OWORD *)buf;
    *(_QWORD *)(a3 + 16) = *(_QWORD *)&buf[16];
    *(_BYTE *)(a3 + 24) = 1;
  }
  else
  {
    v28 = lpsrc;
    _CLLogObjectForCategory_MicroLocation_Default();
    v7 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_FAULT))
    {
      v8 = *(_QWORD *)(v5 + 16);
      if (*(char *)(v8 + 31) < 0)
      {
        std::string::__init_copy_ctor_external(&v30, *(const std::string::value_type **)(v8 + 8), *(_QWORD *)(v8 + 16));
      }
      else
      {
        v9 = *(_OWORD *)(v8 + 8);
        v30.__r_.__value_.__r.__words[2] = *(_QWORD *)(v8 + 24);
        *(_OWORD *)&v30.__r_.__value_.__l.__data_ = v9;
      }
      v10 = SHIBYTE(v30.__r_.__value_.__r.__words[2]);
      v11 = v30.__r_.__value_.__r.__words[0];
      CLMicroLocationStateMachine::EventBase::getEventName(lpsrc, &__p);
      v12 = &v30;
      if (v10 < 0)
        v12 = (std::string *)v11;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_p = &__p;
      else
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      *(_DWORD *)buf = 68290051;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)&buf[8] = 2082;
      *(_QWORD *)&buf[10] = "";
      *(_WORD *)&buf[18] = 2081;
      *(_QWORD *)&buf[20] = v12;
      v32 = 2081;
      v33 = p_p;
      v34 = 2082;
      v35 = "assert";
      v36 = 2081;
      v37 = "derivedEventData != __null";
      _os_log_impl(&dword_2419D9000, v7, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Received unsupported event in state event handler\", \"State\":%{private, location:escape_only}s, \"Received Event\":%{private, location:escape_only}s, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x3Au);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v30.__r_.__value_.__l.__data_);
    }

    _CLLogObjectForCategory_MicroLocation_Default();
    v14 = objc_claimAutoreleasedReturnValue();
    if (os_signpost_enabled(v14))
    {
      v15 = *(_QWORD *)(v5 + 16);
      if (*(char *)(v15 + 31) < 0)
      {
        std::string::__init_copy_ctor_external(&v30, *(const std::string::value_type **)(v15 + 8), *(_QWORD *)(v15 + 16));
      }
      else
      {
        v16 = *(_OWORD *)(v15 + 8);
        v30.__r_.__value_.__r.__words[2] = *(_QWORD *)(v15 + 24);
        *(_OWORD *)&v30.__r_.__value_.__l.__data_ = v16;
      }
      v17 = SHIBYTE(v30.__r_.__value_.__r.__words[2]);
      v18 = v30.__r_.__value_.__r.__words[0];
      CLMicroLocationStateMachine::EventBase::getEventName(lpsrc, &__p);
      v19 = &v30;
      if (v17 < 0)
        v19 = (std::string *)v18;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v20 = &__p;
      else
        v20 = (std::string *)__p.__r_.__value_.__r.__words[0];
      *(_DWORD *)buf = 68290051;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)&buf[8] = 2082;
      *(_QWORD *)&buf[10] = "";
      *(_WORD *)&buf[18] = 2081;
      *(_QWORD *)&buf[20] = v19;
      v32 = 2081;
      v33 = v20;
      v34 = 2082;
      v35 = "assert";
      v36 = 2081;
      v37 = "derivedEventData != __null";
      _os_signpost_emit_with_name_impl(&dword_2419D9000, v14, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Received unsupported event in state event handler", "{\"msg%{public}.0s\":\"Received unsupported event in state event handler\", \"State\":%{private, location:escape_only}s, \"Received Event\":%{private, location:escape_only}s, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x3Au);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v30.__r_.__value_.__l.__data_);
    }

    _CLLogObjectForCategory_MicroLocation_Default();
    v21 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v21, OS_LOG_TYPE_INFO))
    {
      v22 = *(_QWORD *)(v5 + 16);
      if (*(char *)(v22 + 31) < 0)
      {
        std::string::__init_copy_ctor_external(&v30, *(const std::string::value_type **)(v22 + 8), *(_QWORD *)(v22 + 16));
      }
      else
      {
        v23 = *(_OWORD *)(v22 + 8);
        v30.__r_.__value_.__r.__words[2] = *(_QWORD *)(v22 + 24);
        *(_OWORD *)&v30.__r_.__value_.__l.__data_ = v23;
      }
      v24 = SHIBYTE(v30.__r_.__value_.__r.__words[2]);
      v25 = v30.__r_.__value_.__r.__words[0];
      CLMicroLocationStateMachine::EventBase::getEventName(v28, &__p);
      v26 = &v30;
      if (v24 < 0)
        v26 = (std::string *)v25;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v27 = &__p;
      else
        v27 = (std::string *)__p.__r_.__value_.__r.__words[0];
      *(_DWORD *)buf = 68290051;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)&buf[8] = 2082;
      *(_QWORD *)&buf[10] = "";
      *(_WORD *)&buf[18] = 2081;
      *(_QWORD *)&buf[20] = v26;
      v32 = 2081;
      v33 = v27;
      v34 = 2082;
      v35 = "assert";
      v36 = 2081;
      v37 = "derivedEventData != __null";
      _os_log_impl(&dword_2419D9000, v21, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Received unsupported event in state event handler\", \"State\":%{private, location:escape_only}s, \"Received Event\":%{private, location:escape_only}s, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x3Au);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v30.__r_.__value_.__l.__data_);
    }

    abort_report_np();
    __break(1u);
  }
}

void sub_241A73170(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  void *v22;

  _Unwind_Resume(a1);
}

void CLMicroLocationStateMachine::EventHandlerWrapper<CLMicroLocationLoiManager,CLMiLoLoiManagerDisableCustomLoiEvent,&CLMicroLocationLoiManager::DisableCustomLoi>::~EventHandlerWrapper(CLMacAddress *a1, unint64_t a2)
{
  CLMacAddress::newFromUint64(a1, a2);
  JUMPOUT(0x2426A04D4);
}

void CLMicroLocationStateMachine::EventHandlerWrapper<CLMicroLocationLoiManager,CLMiLoLoiManagerGeofenceEntryEvent,&CLMicroLocationLoiManager::CustomLoiVisitEntry>::stateFunction(CLMicroLocationStateMachine::EventBase *lpsrc@<X2>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  CLMicroLocationLoiManager *v5;
  uuid *v6;
  NSObject *v7;
  uint64_t v8;
  __int128 v9;
  int v10;
  std::string::size_type v11;
  std::string *v12;
  std::string *p_p;
  NSObject *v14;
  uint64_t v15;
  __int128 v16;
  int v17;
  std::string::size_type v18;
  std::string *v19;
  std::string *v20;
  NSObject *v21;
  uint64_t v22;
  __int128 v23;
  int v24;
  std::string::size_type v25;
  std::string *v26;
  std::string *v27;
  CLMicroLocationStateMachine::EventBase *v28;
  std::string __p;
  std::string v30;
  uint8_t buf[4];
  int v32;
  __int16 v33;
  const char *v34;
  __int16 v35;
  std::string *v36;
  __int16 v37;
  std::string *v38;
  __int16 v39;
  const char *v40;
  __int16 v41;
  const char *v42;
  uint64_t v43;

  v43 = *MEMORY[0x24BDAC8D0];
  if (a2)
    v5 = (CLMicroLocationLoiManager *)(a2 - 8);
  else
    v5 = 0;
  if (lpsrc
  {
    CLMicroLocationLoiManager::CustomLoiVisitEntry(v5, v6, a3);
  }
  else
  {
    v28 = lpsrc;
    _CLLogObjectForCategory_MicroLocation_Default();
    v7 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_FAULT))
    {
      v8 = *((_QWORD *)v5 + 2);
      if (*(char *)(v8 + 31) < 0)
      {
        std::string::__init_copy_ctor_external(&v30, *(const std::string::value_type **)(v8 + 8), *(_QWORD *)(v8 + 16));
      }
      else
      {
        v9 = *(_OWORD *)(v8 + 8);
        v30.__r_.__value_.__r.__words[2] = *(_QWORD *)(v8 + 24);
        *(_OWORD *)&v30.__r_.__value_.__l.__data_ = v9;
      }
      v10 = SHIBYTE(v30.__r_.__value_.__r.__words[2]);
      v11 = v30.__r_.__value_.__r.__words[0];
      CLMicroLocationStateMachine::EventBase::getEventName(lpsrc, &__p);
      v12 = &v30;
      if (v10 < 0)
        v12 = (std::string *)v11;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_p = &__p;
      else
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      *(_DWORD *)buf = 68290051;
      v32 = 0;
      v33 = 2082;
      v34 = "";
      v35 = 2081;
      v36 = v12;
      v37 = 2081;
      v38 = p_p;
      v39 = 2082;
      v40 = "assert";
      v41 = 2081;
      v42 = "derivedEventData != __null";
      _os_log_impl(&dword_2419D9000, v7, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Received unsupported event in state event handler\", \"State\":%{private, location:escape_only}s, \"Received Event\":%{private, location:escape_only}s, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x3Au);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v30.__r_.__value_.__l.__data_);
    }

    _CLLogObjectForCategory_MicroLocation_Default();
    v14 = objc_claimAutoreleasedReturnValue();
    if (os_signpost_enabled(v14))
    {
      v15 = *((_QWORD *)v5 + 2);
      if (*(char *)(v15 + 31) < 0)
      {
        std::string::__init_copy_ctor_external(&v30, *(const std::string::value_type **)(v15 + 8), *(_QWORD *)(v15 + 16));
      }
      else
      {
        v16 = *(_OWORD *)(v15 + 8);
        v30.__r_.__value_.__r.__words[2] = *(_QWORD *)(v15 + 24);
        *(_OWORD *)&v30.__r_.__value_.__l.__data_ = v16;
      }
      v17 = SHIBYTE(v30.__r_.__value_.__r.__words[2]);
      v18 = v30.__r_.__value_.__r.__words[0];
      CLMicroLocationStateMachine::EventBase::getEventName(lpsrc, &__p);
      v19 = &v30;
      if (v17 < 0)
        v19 = (std::string *)v18;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v20 = &__p;
      else
        v20 = (std::string *)__p.__r_.__value_.__r.__words[0];
      *(_DWORD *)buf = 68290051;
      v32 = 0;
      v33 = 2082;
      v34 = "";
      v35 = 2081;
      v36 = v19;
      v37 = 2081;
      v38 = v20;
      v39 = 2082;
      v40 = "assert";
      v41 = 2081;
      v42 = "derivedEventData != __null";
      _os_signpost_emit_with_name_impl(&dword_2419D9000, v14, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Received unsupported event in state event handler", "{\"msg%{public}.0s\":\"Received unsupported event in state event handler\", \"State\":%{private, location:escape_only}s, \"Received Event\":%{private, location:escape_only}s, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x3Au);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v30.__r_.__value_.__l.__data_);
    }

    _CLLogObjectForCategory_MicroLocation_Default();
    v21 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v21, OS_LOG_TYPE_INFO))
    {
      v22 = *((_QWORD *)v5 + 2);
      if (*(char *)(v22 + 31) < 0)
      {
        std::string::__init_copy_ctor_external(&v30, *(const std::string::value_type **)(v22 + 8), *(_QWORD *)(v22 + 16));
      }
      else
      {
        v23 = *(_OWORD *)(v22 + 8);
        v30.__r_.__value_.__r.__words[2] = *(_QWORD *)(v22 + 24);
        *(_OWORD *)&v30.__r_.__value_.__l.__data_ = v23;
      }
      v24 = SHIBYTE(v30.__r_.__value_.__r.__words[2]);
      v25 = v30.__r_.__value_.__r.__words[0];
      CLMicroLocationStateMachine::EventBase::getEventName(v28, &__p);
      v26 = &v30;
      if (v24 < 0)
        v26 = (std::string *)v25;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v27 = &__p;
      else
        v27 = (std::string *)__p.__r_.__value_.__r.__words[0];
      *(_DWORD *)buf = 68290051;
      v32 = 0;
      v33 = 2082;
      v34 = "";
      v35 = 2081;
      v36 = v26;
      v37 = 2081;
      v38 = v27;
      v39 = 2082;
      v40 = "assert";
      v41 = 2081;
      v42 = "derivedEventData != __null";
      _os_log_impl(&dword_2419D9000, v21, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Received unsupported event in state event handler\", \"State\":%{private, location:escape_only}s, \"Received Event\":%{private, location:escape_only}s, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x3Au);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v30.__r_.__value_.__l.__data_);
    }

    abort_report_np();
    __break(1u);
  }
}

void sub_241A735FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  void *v22;

  _Unwind_Resume(a1);
}

void CLMicroLocationStateMachine::EventHandlerWrapper<CLMicroLocationLoiManager,CLMiLoLoiManagerGeofenceEntryEvent,&CLMicroLocationLoiManager::CustomLoiVisitEntry>::~EventHandlerWrapper(CLMacAddress *a1, unint64_t a2)
{
  CLMacAddress::newFromUint64(a1, a2);
  JUMPOUT(0x2426A04D4);
}

_QWORD *CLMicroLocationStateMachine::EventHandlerWrapper<CLMicroLocationLoiManager,CLMiLoLoiManagerLeechedLocationEvent,&CLMicroLocationLoiManager::HandleLeechedLocation>::stateFunction@<X0>(void *lpsrc@<X2>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  id *v6;
  _QWORD *result;
  NSObject *v8;
  uint64_t v9;
  __int128 v10;
  int v11;
  std::string::size_type v12;
  std::string *v13;
  std::string *p_p;
  NSObject *v15;
  uint64_t v16;
  __int128 v17;
  int v18;
  std::string::size_type v19;
  std::string *v20;
  std::string *v21;
  NSObject *v22;
  uint64_t v23;
  __int128 v24;
  int v25;
  std::string::size_type v26;
  std::string *v27;
  std::string *v28;
  CLMicroLocationStateMachine::EventBase *v29;
  std::string __p;
  std::string v31;
  uint8_t buf[4];
  int v33;
  __int16 v34;
  const char *v35;
  __int16 v36;
  std::string *v37;
  __int16 v38;
  std::string *v39;
  __int16 v40;
  const char *v41;
  __int16 v42;
  const char *v43;
  uint64_t v44;

  v44 = *MEMORY[0x24BDAC8D0];
  if (a2)
    v5 = a2 - 8;
  else
    v5 = 0;
  if (lpsrc)
  {
    if (v6)
      return CLMicroLocationLoiManager::HandleLeechedLocation((ULDatabase **)v5, v6, a3);
  }
  v29 = (CLMicroLocationStateMachine::EventBase *)lpsrc;
  _CLLogObjectForCategory_MicroLocation_Default();
  v8 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v8, OS_LOG_TYPE_FAULT))
  {
    v9 = *(_QWORD *)(v5 + 16);
    if (*(char *)(v9 + 31) < 0)
    {
      std::string::__init_copy_ctor_external(&v31, *(const std::string::value_type **)(v9 + 8), *(_QWORD *)(v9 + 16));
    }
    else
    {
      v10 = *(_OWORD *)(v9 + 8);
      v31.__r_.__value_.__r.__words[2] = *(_QWORD *)(v9 + 24);
      *(_OWORD *)&v31.__r_.__value_.__l.__data_ = v10;
    }
    v11 = SHIBYTE(v31.__r_.__value_.__r.__words[2]);
    v12 = v31.__r_.__value_.__r.__words[0];
    CLMicroLocationStateMachine::EventBase::getEventName((CLMicroLocationStateMachine::EventBase *)lpsrc, &__p);
    v13 = &v31;
    if (v11 < 0)
      v13 = (std::string *)v12;
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    *(_DWORD *)buf = 68290051;
    v33 = 0;
    v34 = 2082;
    v35 = "";
    v36 = 2081;
    v37 = v13;
    v38 = 2081;
    v39 = p_p;
    v40 = 2082;
    v41 = "assert";
    v42 = 2081;
    v43 = "derivedEventData != __null";
    _os_log_impl(&dword_2419D9000, v8, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Received unsupported event in state event handler\", \"State\":%{private, location:escape_only}s, \"Received Event\":%{private, location:escape_only}s, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x3Au);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v31.__r_.__value_.__l.__data_);
  }

  _CLLogObjectForCategory_MicroLocation_Default();
  v15 = objc_claimAutoreleasedReturnValue();
  if (os_signpost_enabled(v15))
  {
    v16 = *(_QWORD *)(v5 + 16);
    if (*(char *)(v16 + 31) < 0)
    {
      std::string::__init_copy_ctor_external(&v31, *(const std::string::value_type **)(v16 + 8), *(_QWORD *)(v16 + 16));
    }
    else
    {
      v17 = *(_OWORD *)(v16 + 8);
      v31.__r_.__value_.__r.__words[2] = *(_QWORD *)(v16 + 24);
      *(_OWORD *)&v31.__r_.__value_.__l.__data_ = v17;
    }
    v18 = SHIBYTE(v31.__r_.__value_.__r.__words[2]);
    v19 = v31.__r_.__value_.__r.__words[0];
    CLMicroLocationStateMachine::EventBase::getEventName((CLMicroLocationStateMachine::EventBase *)lpsrc, &__p);
    v20 = &v31;
    if (v18 < 0)
      v20 = (std::string *)v19;
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v21 = &__p;
    else
      v21 = (std::string *)__p.__r_.__value_.__r.__words[0];
    *(_DWORD *)buf = 68290051;
    v33 = 0;
    v34 = 2082;
    v35 = "";
    v36 = 2081;
    v37 = v20;
    v38 = 2081;
    v39 = v21;
    v40 = 2082;
    v41 = "assert";
    v42 = 2081;
    v43 = "derivedEventData != __null";
    _os_signpost_emit_with_name_impl(&dword_2419D9000, v15, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Received unsupported event in state event handler", "{\"msg%{public}.0s\":\"Received unsupported event in state event handler\", \"State\":%{private, location:escape_only}s, \"Received Event\":%{private, location:escape_only}s, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x3Au);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v31.__r_.__value_.__l.__data_);
  }

  _CLLogObjectForCategory_MicroLocation_Default();
  v22 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v22, OS_LOG_TYPE_INFO))
  {
    v23 = *(_QWORD *)(v5 + 16);
    if (*(char *)(v23 + 31) < 0)
    {
      std::string::__init_copy_ctor_external(&v31, *(const std::string::value_type **)(v23 + 8), *(_QWORD *)(v23 + 16));
    }
    else
    {
      v24 = *(_OWORD *)(v23 + 8);
      v31.__r_.__value_.__r.__words[2] = *(_QWORD *)(v23 + 24);
      *(_OWORD *)&v31.__r_.__value_.__l.__data_ = v24;
    }
    v25 = SHIBYTE(v31.__r_.__value_.__r.__words[2]);
    v26 = v31.__r_.__value_.__r.__words[0];
    CLMicroLocationStateMachine::EventBase::getEventName(v29, &__p);
    v27 = &v31;
    if (v25 < 0)
      v27 = (std::string *)v26;
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v28 = &__p;
    else
      v28 = (std::string *)__p.__r_.__value_.__r.__words[0];
    *(_DWORD *)buf = 68290051;
    v33 = 0;
    v34 = 2082;
    v35 = "";
    v36 = 2081;
    v37 = v27;
    v38 = 2081;
    v39 = v28;
    v40 = 2082;
    v41 = "assert";
    v42 = 2081;
    v43 = "derivedEventData != __null";
    _os_log_impl(&dword_2419D9000, v22, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Received unsupported event in state event handler\", \"State\":%{private, location:escape_only}s, \"Received Event\":%{private, location:escape_only}s, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x3Au);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v31.__r_.__value_.__l.__data_);
  }

  result = (_QWORD *)abort_report_np();
  __break(1u);
  return result;
}

void sub_241A73A88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  void *v22;

  _Unwind_Resume(a1);
}

void CLMicroLocationStateMachine::EventHandlerWrapper<CLMicroLocationLoiManager,CLMiLoLoiManagerLeechedLocationEvent,&CLMicroLocationLoiManager::HandleLeechedLocation>::~EventHandlerWrapper(CLMacAddress *a1, unint64_t a2)
{
  CLMacAddress::newFromUint64(a1, a2);
  JUMPOUT(0x2426A04D4);
}

void CLMicroLocationStateMachine::EventHandlerWrapper<CLMicroLocationLoiManager,CLMiLoLoiManagerRefreshLocationOnEvent,&CLMicroLocationLoiManager::RefreshLocationOnInterval>::stateFunction(CLMicroLocationStateMachine::EventBase *lpsrc@<X2>, uint64_t a2@<X1>, std::string *a3@<X8>)
{
  CLMicroLocationLoiManager *v5;
  NSObject *v6;
  uint64_t v7;
  __int128 v8;
  int v9;
  std::string::size_type v10;
  std::string *v11;
  std::string *p_p;
  NSObject *v13;
  uint64_t v14;
  __int128 v15;
  int v16;
  std::string::size_type v17;
  std::string *v18;
  std::string *v19;
  NSObject *v20;
  uint64_t v21;
  __int128 v22;
  int v23;
  std::string::size_type v24;
  std::string *v25;
  std::string *v26;
  std::string __p;
  std::string v28;
  uint8_t buf[4];
  int v30;
  __int16 v31;
  const char *v32;
  __int16 v33;
  std::string *v34;
  __int16 v35;
  std::string *v36;
  __int16 v37;
  const char *v38;
  __int16 v39;
  const char *v40;
  uint64_t v41;

  v41 = *MEMORY[0x24BDAC8D0];
  if (a2)
    v5 = (CLMicroLocationLoiManager *)(a2 - 8);
  else
    v5 = 0;
  if (lpsrc
  {
    CLMicroLocationLoiManager::RefreshLocationOnInterval(v5, a3);
  }
  else
  {
    _CLLogObjectForCategory_MicroLocation_Default();
    v6 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_FAULT))
    {
      v7 = *((_QWORD *)v5 + 2);
      if (*(char *)(v7 + 31) < 0)
      {
        std::string::__init_copy_ctor_external(&v28, *(const std::string::value_type **)(v7 + 8), *(_QWORD *)(v7 + 16));
      }
      else
      {
        v8 = *(_OWORD *)(v7 + 8);
        v28.__r_.__value_.__r.__words[2] = *(_QWORD *)(v7 + 24);
        *(_OWORD *)&v28.__r_.__value_.__l.__data_ = v8;
      }
      v9 = SHIBYTE(v28.__r_.__value_.__r.__words[2]);
      v10 = v28.__r_.__value_.__r.__words[0];
      CLMicroLocationStateMachine::EventBase::getEventName(lpsrc, &__p);
      v11 = &v28;
      if (v9 < 0)
        v11 = (std::string *)v10;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_p = &__p;
      else
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      *(_DWORD *)buf = 68290051;
      v30 = 0;
      v31 = 2082;
      v32 = "";
      v33 = 2081;
      v34 = v11;
      v35 = 2081;
      v36 = p_p;
      v37 = 2082;
      v38 = "assert";
      v39 = 2081;
      v40 = "derivedEventData != __null";
      _os_log_impl(&dword_2419D9000, v6, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Received unsupported event in state event handler\", \"State\":%{private, location:escape_only}s, \"Received Event\":%{private, location:escape_only}s, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x3Au);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v28.__r_.__value_.__l.__data_);
    }

    _CLLogObjectForCategory_MicroLocation_Default();
    v13 = objc_claimAutoreleasedReturnValue();
    if (os_signpost_enabled(v13))
    {
      v14 = *((_QWORD *)v5 + 2);
      if (*(char *)(v14 + 31) < 0)
      {
        std::string::__init_copy_ctor_external(&v28, *(const std::string::value_type **)(v14 + 8), *(_QWORD *)(v14 + 16));
      }
      else
      {
        v15 = *(_OWORD *)(v14 + 8);
        v28.__r_.__value_.__r.__words[2] = *(_QWORD *)(v14 + 24);
        *(_OWORD *)&v28.__r_.__value_.__l.__data_ = v15;
      }
      v16 = SHIBYTE(v28.__r_.__value_.__r.__words[2]);
      v17 = v28.__r_.__value_.__r.__words[0];
      CLMicroLocationStateMachine::EventBase::getEventName(lpsrc, &__p);
      v18 = &v28;
      if (v16 < 0)
        v18 = (std::string *)v17;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v19 = &__p;
      else
        v19 = (std::string *)__p.__r_.__value_.__r.__words[0];
      *(_DWORD *)buf = 68290051;
      v30 = 0;
      v31 = 2082;
      v32 = "";
      v33 = 2081;
      v34 = v18;
      v35 = 2081;
      v36 = v19;
      v37 = 2082;
      v38 = "assert";
      v39 = 2081;
      v40 = "derivedEventData != __null";
      _os_signpost_emit_with_name_impl(&dword_2419D9000, v13, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Received unsupported event in state event handler", "{\"msg%{public}.0s\":\"Received unsupported event in state event handler\", \"State\":%{private, location:escape_only}s, \"Received Event\":%{private, location:escape_only}s, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x3Au);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v28.__r_.__value_.__l.__data_);
    }

    _CLLogObjectForCategory_MicroLocation_Default();
    v20 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v20, OS_LOG_TYPE_INFO))
    {
      v21 = *((_QWORD *)v5 + 2);
      if (*(char *)(v21 + 31) < 0)
      {
        std::string::__init_copy_ctor_external(&v28, *(const std::string::value_type **)(v21 + 8), *(_QWORD *)(v21 + 16));
      }
      else
      {
        v22 = *(_OWORD *)(v21 + 8);
        v28.__r_.__value_.__r.__words[2] = *(_QWORD *)(v21 + 24);
        *(_OWORD *)&v28.__r_.__value_.__l.__data_ = v22;
      }
      v23 = SHIBYTE(v28.__r_.__value_.__r.__words[2]);
      v24 = v28.__r_.__value_.__r.__words[0];
      CLMicroLocationStateMachine::EventBase::getEventName(lpsrc, &__p);
      v25 = &v28;
      if (v23 < 0)
        v25 = (std::string *)v24;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v26 = &__p;
      else
        v26 = (std::string *)__p.__r_.__value_.__r.__words[0];
      *(_DWORD *)buf = 68290051;
      v30 = 0;
      v31 = 2082;
      v32 = "";
      v33 = 2081;
      v34 = v25;
      v35 = 2081;
      v36 = v26;
      v37 = 2082;
      v38 = "assert";
      v39 = 2081;
      v40 = "derivedEventData != __null";
      _os_log_impl(&dword_2419D9000, v20, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Received unsupported event in state event handler\", \"State\":%{private, location:escape_only}s, \"Received Event\":%{private, location:escape_only}s, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x3Au);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v28.__r_.__value_.__l.__data_);
    }

    abort_report_np();
    __break(1u);
  }
}

void sub_241A73F10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  void *v22;

  _Unwind_Resume(a1);
}

void CLMicroLocationStateMachine::EventHandlerWrapper<CLMicroLocationLoiManager,CLMiLoLoiManagerRefreshLocationOnEvent,&CLMicroLocationLoiManager::RefreshLocationOnInterval>::~EventHandlerWrapper(CLMacAddress *a1, unint64_t a2)
{
  CLMacAddress::newFromUint64(a1, a2);
  JUMPOUT(0x2426A04D4);
}

void CLMicroLocationStateMachine::EventHandlerWrapper<CLMicroLocationLoiManager,CLMiLoLoiManagerFetchPlaceInferenceForReason,&CLMicroLocationLoiManager::FetchPlaceInference>::stateFunction(CLMicroLocationStateMachine::EventBase *lpsrc@<X2>, uint64_t a2@<X1>, std::string *a3@<X8>)
{
  CLMicroLocationLoiManager *v5;
  const CLMiLoLoiManagerFetchPlaceInferenceForReason *v6;
  NSObject *v7;
  uint64_t v8;
  __int128 v9;
  int v10;
  std::string::size_type v11;
  std::string *v12;
  std::string *p_p;
  NSObject *v14;
  uint64_t v15;
  __int128 v16;
  int v17;
  std::string::size_type v18;
  std::string *v19;
  std::string *v20;
  NSObject *v21;
  uint64_t v22;
  __int128 v23;
  int v24;
  std::string::size_type v25;
  std::string *v26;
  std::string *v27;
  CLMicroLocationStateMachine::EventBase *v28;
  std::string __p;
  std::string v30;
  uint8_t buf[4];
  int v32;
  __int16 v33;
  const char *v34;
  __int16 v35;
  std::string *v36;
  __int16 v37;
  std::string *v38;
  __int16 v39;
  const char *v40;
  __int16 v41;
  const char *v42;
  uint64_t v43;

  v43 = *MEMORY[0x24BDAC8D0];
  if (a2)
    v5 = (CLMicroLocationLoiManager *)(a2 - 8);
  else
    v5 = 0;
  if (lpsrc
  {
    CLMicroLocationLoiManager::FetchPlaceInference(v5, v6, a3);
  }
  else
  {
    v28 = lpsrc;
    _CLLogObjectForCategory_MicroLocation_Default();
    v7 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_FAULT))
    {
      v8 = *((_QWORD *)v5 + 2);
      if (*(char *)(v8 + 31) < 0)
      {
        std::string::__init_copy_ctor_external(&v30, *(const std::string::value_type **)(v8 + 8), *(_QWORD *)(v8 + 16));
      }
      else
      {
        v9 = *(_OWORD *)(v8 + 8);
        v30.__r_.__value_.__r.__words[2] = *(_QWORD *)(v8 + 24);
        *(_OWORD *)&v30.__r_.__value_.__l.__data_ = v9;
      }
      v10 = SHIBYTE(v30.__r_.__value_.__r.__words[2]);
      v11 = v30.__r_.__value_.__r.__words[0];
      CLMicroLocationStateMachine::EventBase::getEventName(lpsrc, &__p);
      v12 = &v30;
      if (v10 < 0)
        v12 = (std::string *)v11;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_p = &__p;
      else
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      *(_DWORD *)buf = 68290051;
      v32 = 0;
      v33 = 2082;
      v34 = "";
      v35 = 2081;
      v36 = v12;
      v37 = 2081;
      v38 = p_p;
      v39 = 2082;
      v40 = "assert";
      v41 = 2081;
      v42 = "derivedEventData != __null";
      _os_log_impl(&dword_2419D9000, v7, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Received unsupported event in state event handler\", \"State\":%{private, location:escape_only}s, \"Received Event\":%{private, location:escape_only}s, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x3Au);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v30.__r_.__value_.__l.__data_);
    }

    _CLLogObjectForCategory_MicroLocation_Default();
    v14 = objc_claimAutoreleasedReturnValue();
    if (os_signpost_enabled(v14))
    {
      v15 = *((_QWORD *)v5 + 2);
      if (*(char *)(v15 + 31) < 0)
      {
        std::string::__init_copy_ctor_external(&v30, *(const std::string::value_type **)(v15 + 8), *(_QWORD *)(v15 + 16));
      }
      else
      {
        v16 = *(_OWORD *)(v15 + 8);
        v30.__r_.__value_.__r.__words[2] = *(_QWORD *)(v15 + 24);
        *(_OWORD *)&v30.__r_.__value_.__l.__data_ = v16;
      }
      v17 = SHIBYTE(v30.__r_.__value_.__r.__words[2]);
      v18 = v30.__r_.__value_.__r.__words[0];
      CLMicroLocationStateMachine::EventBase::getEventName(lpsrc, &__p);
      v19 = &v30;
      if (v17 < 0)
        v19 = (std::string *)v18;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v20 = &__p;
      else
        v20 = (std::string *)__p.__r_.__value_.__r.__words[0];
      *(_DWORD *)buf = 68290051;
      v32 = 0;
      v33 = 2082;
      v34 = "";
      v35 = 2081;
      v36 = v19;
      v37 = 2081;
      v38 = v20;
      v39 = 2082;
      v40 = "assert";
      v41 = 2081;
      v42 = "derivedEventData != __null";
      _os_signpost_emit_with_name_impl(&dword_2419D9000, v14, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Received unsupported event in state event handler", "{\"msg%{public}.0s\":\"Received unsupported event in state event handler\", \"State\":%{private, location:escape_only}s, \"Received Event\":%{private, location:escape_only}s, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x3Au);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v30.__r_.__value_.__l.__data_);
    }

    _CLLogObjectForCategory_MicroLocation_Default();
    v21 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v21, OS_LOG_TYPE_INFO))
    {
      v22 = *((_QWORD *)v5 + 2);
      if (*(char *)(v22 + 31) < 0)
      {
        std::string::__init_copy_ctor_external(&v30, *(const std::string::value_type **)(v22 + 8), *(_QWORD *)(v22 + 16));
      }
      else
      {
        v23 = *(_OWORD *)(v22 + 8);
        v30.__r_.__value_.__r.__words[2] = *(_QWORD *)(v22 + 24);
        *(_OWORD *)&v30.__r_.__value_.__l.__data_ = v23;
      }
      v24 = SHIBYTE(v30.__r_.__value_.__r.__words[2]);
      v25 = v30.__r_.__value_.__r.__words[0];
      CLMicroLocationStateMachine::EventBase::getEventName(v28, &__p);
      v26 = &v30;
      if (v24 < 0)
        v26 = (std::string *)v25;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v27 = &__p;
      else
        v27 = (std::string *)__p.__r_.__value_.__r.__words[0];
      *(_DWORD *)buf = 68290051;
      v32 = 0;
      v33 = 2082;
      v34 = "";
      v35 = 2081;
      v36 = v26;
      v37 = 2081;
      v38 = v27;
      v39 = 2082;
      v40 = "assert";
      v41 = 2081;
      v42 = "derivedEventData != __null";
      _os_log_impl(&dword_2419D9000, v21, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Received unsupported event in state event handler\", \"State\":%{private, location:escape_only}s, \"Received Event\":%{private, location:escape_only}s, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x3Au);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v30.__r_.__value_.__l.__data_);
    }

    abort_report_np();
    __break(1u);
  }
}

void sub_241A7439C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  void *v22;

  _Unwind_Resume(a1);
}

void CLMicroLocationStateMachine::EventHandlerWrapper<CLMicroLocationLoiManager,CLMiLoLoiManagerFetchPlaceInferenceForReason,&CLMicroLocationLoiManager::FetchPlaceInference>::~EventHandlerWrapper(CLMacAddress *a1, unint64_t a2)
{
  CLMacAddress::newFromUint64(a1, a2);
  JUMPOUT(0x2426A04D4);
}

void CLMicroLocationStateMachine::EventHandlerWrapper<CLMicroLocationLoiManager,CLMiLoLoiManagerLoiVisitExitEvent,&CLMicroLocationLoiManager::VisitExit>::stateFunction(CLMicroLocationStateMachine::EventBase *lpsrc@<X2>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  CLMicroLocationLoiManager *v5;
  const CLMiLoLoiManagerLoiVisitExitEvent *v6;
  NSObject *v7;
  uint64_t v8;
  __int128 v9;
  int v10;
  std::string::size_type v11;
  std::string *v12;
  std::string *p_p;
  NSObject *v14;
  uint64_t v15;
  __int128 v16;
  int v17;
  std::string::size_type v18;
  std::string *v19;
  std::string *v20;
  NSObject *v21;
  uint64_t v22;
  __int128 v23;
  int v24;
  std::string::size_type v25;
  std::string *v26;
  std::string *v27;
  CLMicroLocationStateMachine::EventBase *v28;
  std::string __p;
  std::string v30;
  uint8_t buf[4];
  int v32;
  __int16 v33;
  const char *v34;
  __int16 v35;
  std::string *v36;
  __int16 v37;
  std::string *v38;
  __int16 v39;
  const char *v40;
  __int16 v41;
  const char *v42;
  uint64_t v43;

  v43 = *MEMORY[0x24BDAC8D0];
  if (a2)
    v5 = (CLMicroLocationLoiManager *)(a2 - 8);
  else
    v5 = 0;
  if (lpsrc
  {
    CLMicroLocationLoiManager::VisitExit(v5, v6, a3);
  }
  else
  {
    v28 = lpsrc;
    _CLLogObjectForCategory_MicroLocation_Default();
    v7 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_FAULT))
    {
      v8 = *((_QWORD *)v5 + 2);
      if (*(char *)(v8 + 31) < 0)
      {
        std::string::__init_copy_ctor_external(&v30, *(const std::string::value_type **)(v8 + 8), *(_QWORD *)(v8 + 16));
      }
      else
      {
        v9 = *(_OWORD *)(v8 + 8);
        v30.__r_.__value_.__r.__words[2] = *(_QWORD *)(v8 + 24);
        *(_OWORD *)&v30.__r_.__value_.__l.__data_ = v9;
      }
      v10 = SHIBYTE(v30.__r_.__value_.__r.__words[2]);
      v11 = v30.__r_.__value_.__r.__words[0];
      CLMicroLocationStateMachine::EventBase::getEventName(lpsrc, &__p);
      v12 = &v30;
      if (v10 < 0)
        v12 = (std::string *)v11;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_p = &__p;
      else
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      *(_DWORD *)buf = 68290051;
      v32 = 0;
      v33 = 2082;
      v34 = "";
      v35 = 2081;
      v36 = v12;
      v37 = 2081;
      v38 = p_p;
      v39 = 2082;
      v40 = "assert";
      v41 = 2081;
      v42 = "derivedEventData != __null";
      _os_log_impl(&dword_2419D9000, v7, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Received unsupported event in state event handler\", \"State\":%{private, location:escape_only}s, \"Received Event\":%{private, location:escape_only}s, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x3Au);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v30.__r_.__value_.__l.__data_);
    }

    _CLLogObjectForCategory_MicroLocation_Default();
    v14 = objc_claimAutoreleasedReturnValue();
    if (os_signpost_enabled(v14))
    {
      v15 = *((_QWORD *)v5 + 2);
      if (*(char *)(v15 + 31) < 0)
      {
        std::string::__init_copy_ctor_external(&v30, *(const std::string::value_type **)(v15 + 8), *(_QWORD *)(v15 + 16));
      }
      else
      {
        v16 = *(_OWORD *)(v15 + 8);
        v30.__r_.__value_.__r.__words[2] = *(_QWORD *)(v15 + 24);
        *(_OWORD *)&v30.__r_.__value_.__l.__data_ = v16;
      }
      v17 = SHIBYTE(v30.__r_.__value_.__r.__words[2]);
      v18 = v30.__r_.__value_.__r.__words[0];
      CLMicroLocationStateMachine::EventBase::getEventName(lpsrc, &__p);
      v19 = &v30;
      if (v17 < 0)
        v19 = (std::string *)v18;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v20 = &__p;
      else
        v20 = (std::string *)__p.__r_.__value_.__r.__words[0];
      *(_DWORD *)buf = 68290051;
      v32 = 0;
      v33 = 2082;
      v34 = "";
      v35 = 2081;
      v36 = v19;
      v37 = 2081;
      v38 = v20;
      v39 = 2082;
      v40 = "assert";
      v41 = 2081;
      v42 = "derivedEventData != __null";
      _os_signpost_emit_with_name_impl(&dword_2419D9000, v14, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Received unsupported event in state event handler", "{\"msg%{public}.0s\":\"Received unsupported event in state event handler\", \"State\":%{private, location:escape_only}s, \"Received Event\":%{private, location:escape_only}s, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x3Au);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v30.__r_.__value_.__l.__data_);
    }

    _CLLogObjectForCategory_MicroLocation_Default();
    v21 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v21, OS_LOG_TYPE_INFO))
    {
      v22 = *((_QWORD *)v5 + 2);
      if (*(char *)(v22 + 31) < 0)
      {
        std::string::__init_copy_ctor_external(&v30, *(const std::string::value_type **)(v22 + 8), *(_QWORD *)(v22 + 16));
      }
      else
      {
        v23 = *(_OWORD *)(v22 + 8);
        v30.__r_.__value_.__r.__words[2] = *(_QWORD *)(v22 + 24);
        *(_OWORD *)&v30.__r_.__value_.__l.__data_ = v23;
      }
      v24 = SHIBYTE(v30.__r_.__value_.__r.__words[2]);
      v25 = v30.__r_.__value_.__r.__words[0];
      CLMicroLocationStateMachine::EventBase::getEventName(v28, &__p);
      v26 = &v30;
      if (v24 < 0)
        v26 = (std::string *)v25;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v27 = &__p;
      else
        v27 = (std::string *)__p.__r_.__value_.__r.__words[0];
      *(_DWORD *)buf = 68290051;
      v32 = 0;
      v33 = 2082;
      v34 = "";
      v35 = 2081;
      v36 = v26;
      v37 = 2081;
      v38 = v27;
      v39 = 2082;
      v40 = "assert";
      v41 = 2081;
      v42 = "derivedEventData != __null";
      _os_log_impl(&dword_2419D9000, v21, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Received unsupported event in state event handler\", \"State\":%{private, location:escape_only}s, \"Received Event\":%{private, location:escape_only}s, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x3Au);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v30.__r_.__value_.__l.__data_);
    }

    abort_report_np();
    __break(1u);
  }
}

void sub_241A74828(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  void *v22;

  _Unwind_Resume(a1);
}

void CLMicroLocationStateMachine::EventHandlerWrapper<CLMicroLocationLoiManager,CLMiLoLoiManagerLoiVisitExitEvent,&CLMicroLocationLoiManager::VisitExit>::~EventHandlerWrapper(CLMacAddress *a1, unint64_t a2)
{
  CLMacAddress::newFromUint64(a1, a2);
  JUMPOUT(0x2426A04D4);
}

void CLMicroLocationStateMachine::EventHandlerWrapper<CLMicroLocationLoiManager,CLMiLoLoiManagerEnableCustomLoiEvent,&CLMicroLocationLoiManager::EnableCustomLoiWhileInHomeLoi>::stateFunction(CLMicroLocationStateMachine::EventBase *lpsrc@<X2>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uuid *v6;
  NSObject *v7;
  uint64_t v8;
  __int128 v9;
  int v10;
  std::string::size_type v11;
  std::string *v12;
  std::string *p_p;
  NSObject *v14;
  uint64_t v15;
  __int128 v16;
  int v17;
  std::string::size_type v18;
  std::string *v19;
  std::string *v20;
  NSObject *v21;
  uint64_t v22;
  __int128 v23;
  int v24;
  std::string::size_type v25;
  std::string *v26;
  std::string *v27;
  CLMicroLocationStateMachine::EventBase *v28;
  std::string __p;
  std::string v30;
  uint8_t buf[4];
  int v32;
  __int16 v33;
  const char *v34;
  __int16 v35;
  std::string *v36;
  __int16 v37;
  std::string *v38;
  __int16 v39;
  const char *v40;
  __int16 v41;
  const char *v42;
  uint64_t v43;

  v43 = *MEMORY[0x24BDAC8D0];
  if (a2)
    v5 = a2 - 8;
  else
    v5 = 0;
  if (lpsrc
  {
    CLMicroLocationLoiManager::EnableCustomLoiWhileInHomeLoi((id *)v5, v6, a3);
  }
  else
  {
    v28 = lpsrc;
    _CLLogObjectForCategory_MicroLocation_Default();
    v7 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_FAULT))
    {
      v8 = *(_QWORD *)(v5 + 16);
      if (*(char *)(v8 + 31) < 0)
      {
        std::string::__init_copy_ctor_external(&v30, *(const std::string::value_type **)(v8 + 8), *(_QWORD *)(v8 + 16));
      }
      else
      {
        v9 = *(_OWORD *)(v8 + 8);
        v30.__r_.__value_.__r.__words[2] = *(_QWORD *)(v8 + 24);
        *(_OWORD *)&v30.__r_.__value_.__l.__data_ = v9;
      }
      v10 = SHIBYTE(v30.__r_.__value_.__r.__words[2]);
      v11 = v30.__r_.__value_.__r.__words[0];
      CLMicroLocationStateMachine::EventBase::getEventName(lpsrc, &__p);
      v12 = &v30;
      if (v10 < 0)
        v12 = (std::string *)v11;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_p = &__p;
      else
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      *(_DWORD *)buf = 68290051;
      v32 = 0;
      v33 = 2082;
      v34 = "";
      v35 = 2081;
      v36 = v12;
      v37 = 2081;
      v38 = p_p;
      v39 = 2082;
      v40 = "assert";
      v41 = 2081;
      v42 = "derivedEventData != __null";
      _os_log_impl(&dword_2419D9000, v7, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Received unsupported event in state event handler\", \"State\":%{private, location:escape_only}s, \"Received Event\":%{private, location:escape_only}s, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x3Au);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v30.__r_.__value_.__l.__data_);
    }

    _CLLogObjectForCategory_MicroLocation_Default();
    v14 = objc_claimAutoreleasedReturnValue();
    if (os_signpost_enabled(v14))
    {
      v15 = *(_QWORD *)(v5 + 16);
      if (*(char *)(v15 + 31) < 0)
      {
        std::string::__init_copy_ctor_external(&v30, *(const std::string::value_type **)(v15 + 8), *(_QWORD *)(v15 + 16));
      }
      else
      {
        v16 = *(_OWORD *)(v15 + 8);
        v30.__r_.__value_.__r.__words[2] = *(_QWORD *)(v15 + 24);
        *(_OWORD *)&v30.__r_.__value_.__l.__data_ = v16;
      }
      v17 = SHIBYTE(v30.__r_.__value_.__r.__words[2]);
      v18 = v30.__r_.__value_.__r.__words[0];
      CLMicroLocationStateMachine::EventBase::getEventName(lpsrc, &__p);
      v19 = &v30;
      if (v17 < 0)
        v19 = (std::string *)v18;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v20 = &__p;
      else
        v20 = (std::string *)__p.__r_.__value_.__r.__words[0];
      *(_DWORD *)buf = 68290051;
      v32 = 0;
      v33 = 2082;
      v34 = "";
      v35 = 2081;
      v36 = v19;
      v37 = 2081;
      v38 = v20;
      v39 = 2082;
      v40 = "assert";
      v41 = 2081;
      v42 = "derivedEventData != __null";
      _os_signpost_emit_with_name_impl(&dword_2419D9000, v14, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Received unsupported event in state event handler", "{\"msg%{public}.0s\":\"Received unsupported event in state event handler\", \"State\":%{private, location:escape_only}s, \"Received Event\":%{private, location:escape_only}s, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x3Au);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v30.__r_.__value_.__l.__data_);
    }

    _CLLogObjectForCategory_MicroLocation_Default();
    v21 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v21, OS_LOG_TYPE_INFO))
    {
      v22 = *(_QWORD *)(v5 + 16);
      if (*(char *)(v22 + 31) < 0)
      {
        std::string::__init_copy_ctor_external(&v30, *(const std::string::value_type **)(v22 + 8), *(_QWORD *)(v22 + 16));
      }
      else
      {
        v23 = *(_OWORD *)(v22 + 8);
        v30.__r_.__value_.__r.__words[2] = *(_QWORD *)(v22 + 24);
        *(_OWORD *)&v30.__r_.__value_.__l.__data_ = v23;
      }
      v24 = SHIBYTE(v30.__r_.__value_.__r.__words[2]);
      v25 = v30.__r_.__value_.__r.__words[0];
      CLMicroLocationStateMachine::EventBase::getEventName(v28, &__p);
      v26 = &v30;
      if (v24 < 0)
        v26 = (std::string *)v25;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v27 = &__p;
      else
        v27 = (std::string *)__p.__r_.__value_.__r.__words[0];
      *(_DWORD *)buf = 68290051;
      v32 = 0;
      v33 = 2082;
      v34 = "";
      v35 = 2081;
      v36 = v26;
      v37 = 2081;
      v38 = v27;
      v39 = 2082;
      v40 = "assert";
      v41 = 2081;
      v42 = "derivedEventData != __null";
      _os_log_impl(&dword_2419D9000, v21, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Received unsupported event in state event handler\", \"State\":%{private, location:escape_only}s, \"Received Event\":%{private, location:escape_only}s, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x3Au);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v30.__r_.__value_.__l.__data_);
    }

    abort_report_np();
    __break(1u);
  }
}

void sub_241A74CB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  void *v22;

  _Unwind_Resume(a1);
}

void CLMicroLocationStateMachine::EventHandlerWrapper<CLMicroLocationLoiManager,CLMiLoLoiManagerEnableCustomLoiEvent,&CLMicroLocationLoiManager::EnableCustomLoiWhileInHomeLoi>::~EventHandlerWrapper(CLMacAddress *a1, unint64_t a2)
{
  CLMacAddress::newFromUint64(a1, a2);
  JUMPOUT(0x2426A04D4);
}

void CLMicroLocationStateMachine::EventHandlerWrapper<CLMicroLocationLoiManager,CLMiLoLoiManagerGeofenceEntryEvent,&CLMicroLocationLoiManager::CustomLoiVisitEntryWhileInHomeLoi>::stateFunction(CLMicroLocationStateMachine::EventBase *lpsrc@<X2>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  CLMicroLocationLoiManager *v5;
  uuid *v6;
  NSObject *v7;
  uint64_t v8;
  __int128 v9;
  int v10;
  std::string::size_type v11;
  std::string *v12;
  std::string *p_p;
  NSObject *v14;
  uint64_t v15;
  __int128 v16;
  int v17;
  std::string::size_type v18;
  std::string *v19;
  std::string *v20;
  NSObject *v21;
  uint64_t v22;
  __int128 v23;
  int v24;
  std::string::size_type v25;
  std::string *v26;
  std::string *v27;
  CLMicroLocationStateMachine::EventBase *v28;
  std::string __p;
  std::string v30;
  uint8_t buf[4];
  int v32;
  __int16 v33;
  const char *v34;
  __int16 v35;
  std::string *v36;
  __int16 v37;
  std::string *v38;
  __int16 v39;
  const char *v40;
  __int16 v41;
  const char *v42;
  uint64_t v43;

  v43 = *MEMORY[0x24BDAC8D0];
  if (a2)
    v5 = (CLMicroLocationLoiManager *)(a2 - 8);
  else
    v5 = 0;
  if (lpsrc
  {
    CLMicroLocationLoiManager::CustomLoiVisitEntryWhileInHomeLoi(v5, v6, a3);
  }
  else
  {
    v28 = lpsrc;
    _CLLogObjectForCategory_MicroLocation_Default();
    v7 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_FAULT))
    {
      v8 = *((_QWORD *)v5 + 2);
      if (*(char *)(v8 + 31) < 0)
      {
        std::string::__init_copy_ctor_external(&v30, *(const std::string::value_type **)(v8 + 8), *(_QWORD *)(v8 + 16));
      }
      else
      {
        v9 = *(_OWORD *)(v8 + 8);
        v30.__r_.__value_.__r.__words[2] = *(_QWORD *)(v8 + 24);
        *(_OWORD *)&v30.__r_.__value_.__l.__data_ = v9;
      }
      v10 = SHIBYTE(v30.__r_.__value_.__r.__words[2]);
      v11 = v30.__r_.__value_.__r.__words[0];
      CLMicroLocationStateMachine::EventBase::getEventName(lpsrc, &__p);
      v12 = &v30;
      if (v10 < 0)
        v12 = (std::string *)v11;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_p = &__p;
      else
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      *(_DWORD *)buf = 68290051;
      v32 = 0;
      v33 = 2082;
      v34 = "";
      v35 = 2081;
      v36 = v12;
      v37 = 2081;
      v38 = p_p;
      v39 = 2082;
      v40 = "assert";
      v41 = 2081;
      v42 = "derivedEventData != __null";
      _os_log_impl(&dword_2419D9000, v7, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Received unsupported event in state event handler\", \"State\":%{private, location:escape_only}s, \"Received Event\":%{private, location:escape_only}s, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x3Au);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v30.__r_.__value_.__l.__data_);
    }

    _CLLogObjectForCategory_MicroLocation_Default();
    v14 = objc_claimAutoreleasedReturnValue();
    if (os_signpost_enabled(v14))
    {
      v15 = *((_QWORD *)v5 + 2);
      if (*(char *)(v15 + 31) < 0)
      {
        std::string::__init_copy_ctor_external(&v30, *(const std::string::value_type **)(v15 + 8), *(_QWORD *)(v15 + 16));
      }
      else
      {
        v16 = *(_OWORD *)(v15 + 8);
        v30.__r_.__value_.__r.__words[2] = *(_QWORD *)(v15 + 24);
        *(_OWORD *)&v30.__r_.__value_.__l.__data_ = v16;
      }
      v17 = SHIBYTE(v30.__r_.__value_.__r.__words[2]);
      v18 = v30.__r_.__value_.__r.__words[0];
      CLMicroLocationStateMachine::EventBase::getEventName(lpsrc, &__p);
      v19 = &v30;
      if (v17 < 0)
        v19 = (std::string *)v18;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v20 = &__p;
      else
        v20 = (std::string *)__p.__r_.__value_.__r.__words[0];
      *(_DWORD *)buf = 68290051;
      v32 = 0;
      v33 = 2082;
      v34 = "";
      v35 = 2081;
      v36 = v19;
      v37 = 2081;
      v38 = v20;
      v39 = 2082;
      v40 = "assert";
      v41 = 2081;
      v42 = "derivedEventData != __null";
      _os_signpost_emit_with_name_impl(&dword_2419D9000, v14, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Received unsupported event in state event handler", "{\"msg%{public}.0s\":\"Received unsupported event in state event handler\", \"State\":%{private, location:escape_only}s, \"Received Event\":%{private, location:escape_only}s, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x3Au);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v30.__r_.__value_.__l.__data_);
    }

    _CLLogObjectForCategory_MicroLocation_Default();
    v21 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v21, OS_LOG_TYPE_INFO))
    {
      v22 = *((_QWORD *)v5 + 2);
      if (*(char *)(v22 + 31) < 0)
      {
        std::string::__init_copy_ctor_external(&v30, *(const std::string::value_type **)(v22 + 8), *(_QWORD *)(v22 + 16));
      }
      else
      {
        v23 = *(_OWORD *)(v22 + 8);
        v30.__r_.__value_.__r.__words[2] = *(_QWORD *)(v22 + 24);
        *(_OWORD *)&v30.__r_.__value_.__l.__data_ = v23;
      }
      v24 = SHIBYTE(v30.__r_.__value_.__r.__words[2]);
      v25 = v30.__r_.__value_.__r.__words[0];
      CLMicroLocationStateMachine::EventBase::getEventName(v28, &__p);
      v26 = &v30;
      if (v24 < 0)
        v26 = (std::string *)v25;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v27 = &__p;
      else
        v27 = (std::string *)__p.__r_.__value_.__r.__words[0];
      *(_DWORD *)buf = 68290051;
      v32 = 0;
      v33 = 2082;
      v34 = "";
      v35 = 2081;
      v36 = v26;
      v37 = 2081;
      v38 = v27;
      v39 = 2082;
      v40 = "assert";
      v41 = 2081;
      v42 = "derivedEventData != __null";
      _os_log_impl(&dword_2419D9000, v21, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Received unsupported event in state event handler\", \"State\":%{private, location:escape_only}s, \"Received Event\":%{private, location:escape_only}s, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x3Au);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v30.__r_.__value_.__l.__data_);
    }

    abort_report_np();
    __break(1u);
  }
}

void sub_241A75140(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  void *v22;

  _Unwind_Resume(a1);
}

void CLMicroLocationStateMachine::EventHandlerWrapper<CLMicroLocationLoiManager,CLMiLoLoiManagerGeofenceEntryEvent,&CLMicroLocationLoiManager::CustomLoiVisitEntryWhileInHomeLoi>::~EventHandlerWrapper(CLMacAddress *a1, unint64_t a2)
{
  CLMacAddress::newFromUint64(a1, a2);
  JUMPOUT(0x2426A04D4);
}

void CLMicroLocationStateMachine::EventHandlerWrapper<CLMicroLocationLoiManager,CLMiLoLoiManagerFetchPlaceInferenceForReason,&CLMicroLocationLoiManager::FetchPlaceInferenceWhileInHomeLoi>::stateFunction(CLMicroLocationStateMachine::EventBase *lpsrc@<X2>, uint64_t a2@<X1>, std::string *a3@<X8>)
{
  CLMicroLocationLoiManager *v5;
  const CLMiLoLoiManagerFetchPlaceInferenceForReason *v6;
  NSObject *v7;
  uint64_t v8;
  __int128 v9;
  int v10;
  std::string::size_type v11;
  std::string *v12;
  std::string *p_p;
  NSObject *v14;
  uint64_t v15;
  __int128 v16;
  int v17;
  std::string::size_type v18;
  std::string *v19;
  std::string *v20;
  NSObject *v21;
  uint64_t v22;
  __int128 v23;
  int v24;
  std::string::size_type v25;
  std::string *v26;
  std::string *v27;
  CLMicroLocationStateMachine::EventBase *v28;
  std::string __p;
  std::string v30;
  uint8_t buf[4];
  int v32;
  __int16 v33;
  const char *v34;
  __int16 v35;
  std::string *v36;
  __int16 v37;
  std::string *v38;
  __int16 v39;
  const char *v40;
  __int16 v41;
  const char *v42;
  uint64_t v43;

  v43 = *MEMORY[0x24BDAC8D0];
  if (a2)
    v5 = (CLMicroLocationLoiManager *)(a2 - 8);
  else
    v5 = 0;
  if (lpsrc
  {
    CLMicroLocationLoiManager::FetchPlaceInferenceWhileInHomeLoi(v5, v6, a3);
  }
  else
  {
    v28 = lpsrc;
    _CLLogObjectForCategory_MicroLocation_Default();
    v7 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_FAULT))
    {
      v8 = *((_QWORD *)v5 + 2);
      if (*(char *)(v8 + 31) < 0)
      {
        std::string::__init_copy_ctor_external(&v30, *(const std::string::value_type **)(v8 + 8), *(_QWORD *)(v8 + 16));
      }
      else
      {
        v9 = *(_OWORD *)(v8 + 8);
        v30.__r_.__value_.__r.__words[2] = *(_QWORD *)(v8 + 24);
        *(_OWORD *)&v30.__r_.__value_.__l.__data_ = v9;
      }
      v10 = SHIBYTE(v30.__r_.__value_.__r.__words[2]);
      v11 = v30.__r_.__value_.__r.__words[0];
      CLMicroLocationStateMachine::EventBase::getEventName(lpsrc, &__p);
      v12 = &v30;
      if (v10 < 0)
        v12 = (std::string *)v11;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_p = &__p;
      else
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      *(_DWORD *)buf = 68290051;
      v32 = 0;
      v33 = 2082;
      v34 = "";
      v35 = 2081;
      v36 = v12;
      v37 = 2081;
      v38 = p_p;
      v39 = 2082;
      v40 = "assert";
      v41 = 2081;
      v42 = "derivedEventData != __null";
      _os_log_impl(&dword_2419D9000, v7, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Received unsupported event in state event handler\", \"State\":%{private, location:escape_only}s, \"Received Event\":%{private, location:escape_only}s, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x3Au);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v30.__r_.__value_.__l.__data_);
    }

    _CLLogObjectForCategory_MicroLocation_Default();
    v14 = objc_claimAutoreleasedReturnValue();
    if (os_signpost_enabled(v14))
    {
      v15 = *((_QWORD *)v5 + 2);
      if (*(char *)(v15 + 31) < 0)
      {
        std::string::__init_copy_ctor_external(&v30, *(const std::string::value_type **)(v15 + 8), *(_QWORD *)(v15 + 16));
      }
      else
      {
        v16 = *(_OWORD *)(v15 + 8);
        v30.__r_.__value_.__r.__words[2] = *(_QWORD *)(v15 + 24);
        *(_OWORD *)&v30.__r_.__value_.__l.__data_ = v16;
      }
      v17 = SHIBYTE(v30.__r_.__value_.__r.__words[2]);
      v18 = v30.__r_.__value_.__r.__words[0];
      CLMicroLocationStateMachine::EventBase::getEventName(lpsrc, &__p);
      v19 = &v30;
      if (v17 < 0)
        v19 = (std::string *)v18;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v20 = &__p;
      else
        v20 = (std::string *)__p.__r_.__value_.__r.__words[0];
      *(_DWORD *)buf = 68290051;
      v32 = 0;
      v33 = 2082;
      v34 = "";
      v35 = 2081;
      v36 = v19;
      v37 = 2081;
      v38 = v20;
      v39 = 2082;
      v40 = "assert";
      v41 = 2081;
      v42 = "derivedEventData != __null";
      _os_signpost_emit_with_name_impl(&dword_2419D9000, v14, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Received unsupported event in state event handler", "{\"msg%{public}.0s\":\"Received unsupported event in state event handler\", \"State\":%{private, location:escape_only}s, \"Received Event\":%{private, location:escape_only}s, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x3Au);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v30.__r_.__value_.__l.__data_);
    }

    _CLLogObjectForCategory_MicroLocation_Default();
    v21 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v21, OS_LOG_TYPE_INFO))
    {
      v22 = *((_QWORD *)v5 + 2);
      if (*(char *)(v22 + 31) < 0)
      {
        std::string::__init_copy_ctor_external(&v30, *(const std::string::value_type **)(v22 + 8), *(_QWORD *)(v22 + 16));
      }
      else
      {
        v23 = *(_OWORD *)(v22 + 8);
        v30.__r_.__value_.__r.__words[2] = *(_QWORD *)(v22 + 24);
        *(_OWORD *)&v30.__r_.__value_.__l.__data_ = v23;
      }
      v24 = SHIBYTE(v30.__r_.__value_.__r.__words[2]);
      v25 = v30.__r_.__value_.__r.__words[0];
      CLMicroLocationStateMachine::EventBase::getEventName(v28, &__p);
      v26 = &v30;
      if (v24 < 0)
        v26 = (std::string *)v25;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v27 = &__p;
      else
        v27 = (std::string *)__p.__r_.__value_.__r.__words[0];
      *(_DWORD *)buf = 68290051;
      v32 = 0;
      v33 = 2082;
      v34 = "";
      v35 = 2081;
      v36 = v26;
      v37 = 2081;
      v38 = v27;
      v39 = 2082;
      v40 = "assert";
      v41 = 2081;
      v42 = "derivedEventData != __null";
      _os_log_impl(&dword_2419D9000, v21, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Received unsupported event in state event handler\", \"State\":%{private, location:escape_only}s, \"Received Event\":%{private, location:escape_only}s, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x3Au);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v30.__r_.__value_.__l.__data_);
    }

    abort_report_np();
    __break(1u);
  }
}

void sub_241A755CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  void *v22;

  _Unwind_Resume(a1);
}

void CLMicroLocationStateMachine::EventHandlerWrapper<CLMicroLocationLoiManager,CLMiLoLoiManagerFetchPlaceInferenceForReason,&CLMicroLocationLoiManager::FetchPlaceInferenceWhileInHomeLoi>::~EventHandlerWrapper(CLMacAddress *a1, unint64_t a2)
{
  CLMacAddress::newFromUint64(a1, a2);
  JUMPOUT(0x2426A04D4);
}

void CLMicroLocationStateMachine::EventHandlerWrapper<CLMicroLocationLoiManager,CLMiLoLoiManagerGeofenceExitEvent,&CLMicroLocationLoiManager::CustomLoiVisitExit>::stateFunction(CLMicroLocationStateMachine::EventBase *lpsrc@<X2>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  CLMicroLocationLoiManager *v5;
  const CLMiLoLoiManagerGeofenceExitEvent *v6;
  NSObject *v7;
  uint64_t v8;
  __int128 v9;
  int v10;
  std::string::size_type v11;
  std::string *v12;
  std::string *p_p;
  NSObject *v14;
  uint64_t v15;
  __int128 v16;
  int v17;
  std::string::size_type v18;
  std::string *v19;
  std::string *v20;
  NSObject *v21;
  uint64_t v22;
  __int128 v23;
  int v24;
  std::string::size_type v25;
  std::string *v26;
  std::string *v27;
  CLMicroLocationStateMachine::EventBase *v28;
  std::string __p;
  std::string v30;
  uint8_t buf[4];
  int v32;
  __int16 v33;
  const char *v34;
  __int16 v35;
  std::string *v36;
  __int16 v37;
  std::string *v38;
  __int16 v39;
  const char *v40;
  __int16 v41;
  const char *v42;
  uint64_t v43;

  v43 = *MEMORY[0x24BDAC8D0];
  if (a2)
    v5 = (CLMicroLocationLoiManager *)(a2 - 8);
  else
    v5 = 0;
  if (lpsrc
  {
    CLMicroLocationLoiManager::CustomLoiVisitExit(v5, v6, a3);
  }
  else
  {
    v28 = lpsrc;
    _CLLogObjectForCategory_MicroLocation_Default();
    v7 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_FAULT))
    {
      v8 = *((_QWORD *)v5 + 2);
      if (*(char *)(v8 + 31) < 0)
      {
        std::string::__init_copy_ctor_external(&v30, *(const std::string::value_type **)(v8 + 8), *(_QWORD *)(v8 + 16));
      }
      else
      {
        v9 = *(_OWORD *)(v8 + 8);
        v30.__r_.__value_.__r.__words[2] = *(_QWORD *)(v8 + 24);
        *(_OWORD *)&v30.__r_.__value_.__l.__data_ = v9;
      }
      v10 = SHIBYTE(v30.__r_.__value_.__r.__words[2]);
      v11 = v30.__r_.__value_.__r.__words[0];
      CLMicroLocationStateMachine::EventBase::getEventName(lpsrc, &__p);
      v12 = &v30;
      if (v10 < 0)
        v12 = (std::string *)v11;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_p = &__p;
      else
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      *(_DWORD *)buf = 68290051;
      v32 = 0;
      v33 = 2082;
      v34 = "";
      v35 = 2081;
      v36 = v12;
      v37 = 2081;
      v38 = p_p;
      v39 = 2082;
      v40 = "assert";
      v41 = 2081;
      v42 = "derivedEventData != __null";
      _os_log_impl(&dword_2419D9000, v7, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Received unsupported event in state event handler\", \"State\":%{private, location:escape_only}s, \"Received Event\":%{private, location:escape_only}s, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x3Au);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v30.__r_.__value_.__l.__data_);
    }

    _CLLogObjectForCategory_MicroLocation_Default();
    v14 = objc_claimAutoreleasedReturnValue();
    if (os_signpost_enabled(v14))
    {
      v15 = *((_QWORD *)v5 + 2);
      if (*(char *)(v15 + 31) < 0)
      {
        std::string::__init_copy_ctor_external(&v30, *(const std::string::value_type **)(v15 + 8), *(_QWORD *)(v15 + 16));
      }
      else
      {
        v16 = *(_OWORD *)(v15 + 8);
        v30.__r_.__value_.__r.__words[2] = *(_QWORD *)(v15 + 24);
        *(_OWORD *)&v30.__r_.__value_.__l.__data_ = v16;
      }
      v17 = SHIBYTE(v30.__r_.__value_.__r.__words[2]);
      v18 = v30.__r_.__value_.__r.__words[0];
      CLMicroLocationStateMachine::EventBase::getEventName(lpsrc, &__p);
      v19 = &v30;
      if (v17 < 0)
        v19 = (std::string *)v18;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v20 = &__p;
      else
        v20 = (std::string *)__p.__r_.__value_.__r.__words[0];
      *(_DWORD *)buf = 68290051;
      v32 = 0;
      v33 = 2082;
      v34 = "";
      v35 = 2081;
      v36 = v19;
      v37 = 2081;
      v38 = v20;
      v39 = 2082;
      v40 = "assert";
      v41 = 2081;
      v42 = "derivedEventData != __null";
      _os_signpost_emit_with_name_impl(&dword_2419D9000, v14, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Received unsupported event in state event handler", "{\"msg%{public}.0s\":\"Received unsupported event in state event handler\", \"State\":%{private, location:escape_only}s, \"Received Event\":%{private, location:escape_only}s, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x3Au);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v30.__r_.__value_.__l.__data_);
    }

    _CLLogObjectForCategory_MicroLocation_Default();
    v21 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v21, OS_LOG_TYPE_INFO))
    {
      v22 = *((_QWORD *)v5 + 2);
      if (*(char *)(v22 + 31) < 0)
      {
        std::string::__init_copy_ctor_external(&v30, *(const std::string::value_type **)(v22 + 8), *(_QWORD *)(v22 + 16));
      }
      else
      {
        v23 = *(_OWORD *)(v22 + 8);
        v30.__r_.__value_.__r.__words[2] = *(_QWORD *)(v22 + 24);
        *(_OWORD *)&v30.__r_.__value_.__l.__data_ = v23;
      }
      v24 = SHIBYTE(v30.__r_.__value_.__r.__words[2]);
      v25 = v30.__r_.__value_.__r.__words[0];
      CLMicroLocationStateMachine::EventBase::getEventName(v28, &__p);
      v26 = &v30;
      if (v24 < 0)
        v26 = (std::string *)v25;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v27 = &__p;
      else
        v27 = (std::string *)__p.__r_.__value_.__r.__words[0];
      *(_DWORD *)buf = 68290051;
      v32 = 0;
      v33 = 2082;
      v34 = "";
      v35 = 2081;
      v36 = v26;
      v37 = 2081;
      v38 = v27;
      v39 = 2082;
      v40 = "assert";
      v41 = 2081;
      v42 = "derivedEventData != __null";
      _os_log_impl(&dword_2419D9000, v21, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Received unsupported event in state event handler\", \"State\":%{private, location:escape_only}s, \"Received Event\":%{private, location:escape_only}s, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x3Au);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v30.__r_.__value_.__l.__data_);
    }

    abort_report_np();
    __break(1u);
  }
}

void sub_241A75A58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  void *v22;

  _Unwind_Resume(a1);
}

void CLMicroLocationStateMachine::EventHandlerWrapper<CLMicroLocationLoiManager,CLMiLoLoiManagerGeofenceExitEvent,&CLMicroLocationLoiManager::CustomLoiVisitExit>::~EventHandlerWrapper(CLMacAddress *a1, unint64_t a2)
{
  CLMacAddress::newFromUint64(a1, a2);
  JUMPOUT(0x2426A04D4);
}

void CLMicroLocationStateMachine::EventHandlerWrapper<CLMicroLocationLoiManager,CLMiLoLoiManagerGeofenceEntryEvent,&CLMicroLocationLoiManager::CustomLoiVisitEntryWhileInCustomLoi>::stateFunction(CLMicroLocationStateMachine::EventBase *lpsrc@<X2>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  CLMicroLocationLoiManager *v5;
  const CLMiLoLoiManagerGeofenceEntryEvent *v6;
  NSObject *v7;
  uint64_t v8;
  __int128 v9;
  int v10;
  std::string::size_type v11;
  std::string *v12;
  std::string *p_p;
  NSObject *v14;
  uint64_t v15;
  __int128 v16;
  int v17;
  std::string::size_type v18;
  std::string *v19;
  std::string *v20;
  NSObject *v21;
  uint64_t v22;
  __int128 v23;
  int v24;
  std::string::size_type v25;
  std::string *v26;
  std::string *v27;
  CLMicroLocationStateMachine::EventBase *v28;
  std::string __p;
  std::string v30;
  uint8_t buf[4];
  int v32;
  __int16 v33;
  const char *v34;
  __int16 v35;
  std::string *v36;
  __int16 v37;
  std::string *v38;
  __int16 v39;
  const char *v40;
  __int16 v41;
  const char *v42;
  uint64_t v43;

  v43 = *MEMORY[0x24BDAC8D0];
  if (a2)
    v5 = (CLMicroLocationLoiManager *)(a2 - 8);
  else
    v5 = 0;
  if (lpsrc
  {
    CLMicroLocationLoiManager::CustomLoiVisitEntryWhileInCustomLoi(v5, v6, a3);
  }
  else
  {
    v28 = lpsrc;
    _CLLogObjectForCategory_MicroLocation_Default();
    v7 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_FAULT))
    {
      v8 = *((_QWORD *)v5 + 2);
      if (*(char *)(v8 + 31) < 0)
      {
        std::string::__init_copy_ctor_external(&v30, *(const std::string::value_type **)(v8 + 8), *(_QWORD *)(v8 + 16));
      }
      else
      {
        v9 = *(_OWORD *)(v8 + 8);
        v30.__r_.__value_.__r.__words[2] = *(_QWORD *)(v8 + 24);
        *(_OWORD *)&v30.__r_.__value_.__l.__data_ = v9;
      }
      v10 = SHIBYTE(v30.__r_.__value_.__r.__words[2]);
      v11 = v30.__r_.__value_.__r.__words[0];
      CLMicroLocationStateMachine::EventBase::getEventName(lpsrc, &__p);
      v12 = &v30;
      if (v10 < 0)
        v12 = (std::string *)v11;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_p = &__p;
      else
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      *(_DWORD *)buf = 68290051;
      v32 = 0;
      v33 = 2082;
      v34 = "";
      v35 = 2081;
      v36 = v12;
      v37 = 2081;
      v38 = p_p;
      v39 = 2082;
      v40 = "assert";
      v41 = 2081;
      v42 = "derivedEventData != __null";
      _os_log_impl(&dword_2419D9000, v7, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Received unsupported event in state event handler\", \"State\":%{private, location:escape_only}s, \"Received Event\":%{private, location:escape_only}s, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x3Au);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v30.__r_.__value_.__l.__data_);
    }

    _CLLogObjectForCategory_MicroLocation_Default();
    v14 = objc_claimAutoreleasedReturnValue();
    if (os_signpost_enabled(v14))
    {
      v15 = *((_QWORD *)v5 + 2);
      if (*(char *)(v15 + 31) < 0)
      {
        std::string::__init_copy_ctor_external(&v30, *(const std::string::value_type **)(v15 + 8), *(_QWORD *)(v15 + 16));
      }
      else
      {
        v16 = *(_OWORD *)(v15 + 8);
        v30.__r_.__value_.__r.__words[2] = *(_QWORD *)(v15 + 24);
        *(_OWORD *)&v30.__r_.__value_.__l.__data_ = v16;
      }
      v17 = SHIBYTE(v30.__r_.__value_.__r.__words[2]);
      v18 = v30.__r_.__value_.__r.__words[0];
      CLMicroLocationStateMachine::EventBase::getEventName(lpsrc, &__p);
      v19 = &v30;
      if (v17 < 0)
        v19 = (std::string *)v18;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v20 = &__p;
      else
        v20 = (std::string *)__p.__r_.__value_.__r.__words[0];
      *(_DWORD *)buf = 68290051;
      v32 = 0;
      v33 = 2082;
      v34 = "";
      v35 = 2081;
      v36 = v19;
      v37 = 2081;
      v38 = v20;
      v39 = 2082;
      v40 = "assert";
      v41 = 2081;
      v42 = "derivedEventData != __null";
      _os_signpost_emit_with_name_impl(&dword_2419D9000, v14, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Received unsupported event in state event handler", "{\"msg%{public}.0s\":\"Received unsupported event in state event handler\", \"State\":%{private, location:escape_only}s, \"Received Event\":%{private, location:escape_only}s, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x3Au);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v30.__r_.__value_.__l.__data_);
    }

    _CLLogObjectForCategory_MicroLocation_Default();
    v21 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v21, OS_LOG_TYPE_INFO))
    {
      v22 = *((_QWORD *)v5 + 2);
      if (*(char *)(v22 + 31) < 0)
      {
        std::string::__init_copy_ctor_external(&v30, *(const std::string::value_type **)(v22 + 8), *(_QWORD *)(v22 + 16));
      }
      else
      {
        v23 = *(_OWORD *)(v22 + 8);
        v30.__r_.__value_.__r.__words[2] = *(_QWORD *)(v22 + 24);
        *(_OWORD *)&v30.__r_.__value_.__l.__data_ = v23;
      }
      v24 = SHIBYTE(v30.__r_.__value_.__r.__words[2]);
      v25 = v30.__r_.__value_.__r.__words[0];
      CLMicroLocationStateMachine::EventBase::getEventName(v28, &__p);
      v26 = &v30;
      if (v24 < 0)
        v26 = (std::string *)v25;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v27 = &__p;
      else
        v27 = (std::string *)__p.__r_.__value_.__r.__words[0];
      *(_DWORD *)buf = 68290051;
      v32 = 0;
      v33 = 2082;
      v34 = "";
      v35 = 2081;
      v36 = v26;
      v37 = 2081;
      v38 = v27;
      v39 = 2082;
      v40 = "assert";
      v41 = 2081;
      v42 = "derivedEventData != __null";
      _os_log_impl(&dword_2419D9000, v21, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Received unsupported event in state event handler\", \"State\":%{private, location:escape_only}s, \"Received Event\":%{private, location:escape_only}s, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x3Au);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v30.__r_.__value_.__l.__data_);
    }

    abort_report_np();
    __break(1u);
  }
}

void sub_241A75EE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  void *v22;

  _Unwind_Resume(a1);
}

void CLMicroLocationStateMachine::EventHandlerWrapper<CLMicroLocationLoiManager,CLMiLoLoiManagerGeofenceEntryEvent,&CLMicroLocationLoiManager::CustomLoiVisitEntryWhileInCustomLoi>::~EventHandlerWrapper(CLMacAddress *a1, unint64_t a2)
{
  CLMacAddress::newFromUint64(a1, a2);
  JUMPOUT(0x2426A04D4);
}

void CLMicroLocationStateMachine::EventHandlerWrapper<CLMicroLocationLoiManager,CLMiLoLoiManagerEnableCustomLoiEvent,&CLMicroLocationLoiManager::EnableCustomLoiWhileInCustomLoi>::stateFunction(CLMicroLocationStateMachine::EventBase *lpsrc@<X2>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  CLMicroLocationLoiManager *v5;
  uuid *v6;
  NSObject *v7;
  uint64_t v8;
  __int128 v9;
  int v10;
  std::string::size_type v11;
  std::string *v12;
  std::string *p_p;
  NSObject *v14;
  uint64_t v15;
  __int128 v16;
  int v17;
  std::string::size_type v18;
  std::string *v19;
  std::string *v20;
  NSObject *v21;
  uint64_t v22;
  __int128 v23;
  int v24;
  std::string::size_type v25;
  std::string *v26;
  std::string *v27;
  CLMicroLocationStateMachine::EventBase *v28;
  std::string __p;
  std::string v30;
  uint8_t buf[4];
  int v32;
  __int16 v33;
  const char *v34;
  __int16 v35;
  std::string *v36;
  __int16 v37;
  std::string *v38;
  __int16 v39;
  const char *v40;
  __int16 v41;
  const char *v42;
  uint64_t v43;

  v43 = *MEMORY[0x24BDAC8D0];
  if (a2)
    v5 = (CLMicroLocationLoiManager *)(a2 - 8);
  else
    v5 = 0;
  if (lpsrc
  {
    CLMicroLocationLoiManager::EnableCustomLoiWhileInCustomLoi(v5, v6, a3);
  }
  else
  {
    v28 = lpsrc;
    _CLLogObjectForCategory_MicroLocation_Default();
    v7 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_FAULT))
    {
      v8 = *((_QWORD *)v5 + 2);
      if (*(char *)(v8 + 31) < 0)
      {
        std::string::__init_copy_ctor_external(&v30, *(const std::string::value_type **)(v8 + 8), *(_QWORD *)(v8 + 16));
      }
      else
      {
        v9 = *(_OWORD *)(v8 + 8);
        v30.__r_.__value_.__r.__words[2] = *(_QWORD *)(v8 + 24);
        *(_OWORD *)&v30.__r_.__value_.__l.__data_ = v9;
      }
      v10 = SHIBYTE(v30.__r_.__value_.__r.__words[2]);
      v11 = v30.__r_.__value_.__r.__words[0];
      CLMicroLocationStateMachine::EventBase::getEventName(lpsrc, &__p);
      v12 = &v30;
      if (v10 < 0)
        v12 = (std::string *)v11;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_p = &__p;
      else
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      *(_DWORD *)buf = 68290051;
      v32 = 0;
      v33 = 2082;
      v34 = "";
      v35 = 2081;
      v36 = v12;
      v37 = 2081;
      v38 = p_p;
      v39 = 2082;
      v40 = "assert";
      v41 = 2081;
      v42 = "derivedEventData != __null";
      _os_log_impl(&dword_2419D9000, v7, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Received unsupported event in state event handler\", \"State\":%{private, location:escape_only}s, \"Received Event\":%{private, location:escape_only}s, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x3Au);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v30.__r_.__value_.__l.__data_);
    }

    _CLLogObjectForCategory_MicroLocation_Default();
    v14 = objc_claimAutoreleasedReturnValue();
    if (os_signpost_enabled(v14))
    {
      v15 = *((_QWORD *)v5 + 2);
      if (*(char *)(v15 + 31) < 0)
      {
        std::string::__init_copy_ctor_external(&v30, *(const std::string::value_type **)(v15 + 8), *(_QWORD *)(v15 + 16));
      }
      else
      {
        v16 = *(_OWORD *)(v15 + 8);
        v30.__r_.__value_.__r.__words[2] = *(_QWORD *)(v15 + 24);
        *(_OWORD *)&v30.__r_.__value_.__l.__data_ = v16;
      }
      v17 = SHIBYTE(v30.__r_.__value_.__r.__words[2]);
      v18 = v30.__r_.__value_.__r.__words[0];
      CLMicroLocationStateMachine::EventBase::getEventName(lpsrc, &__p);
      v19 = &v30;
      if (v17 < 0)
        v19 = (std::string *)v18;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v20 = &__p;
      else
        v20 = (std::string *)__p.__r_.__value_.__r.__words[0];
      *(_DWORD *)buf = 68290051;
      v32 = 0;
      v33 = 2082;
      v34 = "";
      v35 = 2081;
      v36 = v19;
      v37 = 2081;
      v38 = v20;
      v39 = 2082;
      v40 = "assert";
      v41 = 2081;
      v42 = "derivedEventData != __null";
      _os_signpost_emit_with_name_impl(&dword_2419D9000, v14, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Received unsupported event in state event handler", "{\"msg%{public}.0s\":\"Received unsupported event in state event handler\", \"State\":%{private, location:escape_only}s, \"Received Event\":%{private, location:escape_only}s, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x3Au);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v30.__r_.__value_.__l.__data_);
    }

    _CLLogObjectForCategory_MicroLocation_Default();
    v21 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v21, OS_LOG_TYPE_INFO))
    {
      v22 = *((_QWORD *)v5 + 2);
      if (*(char *)(v22 + 31) < 0)
      {
        std::string::__init_copy_ctor_external(&v30, *(const std::string::value_type **)(v22 + 8), *(_QWORD *)(v22 + 16));
      }
      else
      {
        v23 = *(_OWORD *)(v22 + 8);
        v30.__r_.__value_.__r.__words[2] = *(_QWORD *)(v22 + 24);
        *(_OWORD *)&v30.__r_.__value_.__l.__data_ = v23;
      }
      v24 = SHIBYTE(v30.__r_.__value_.__r.__words[2]);
      v25 = v30.__r_.__value_.__r.__words[0];
      CLMicroLocationStateMachine::EventBase::getEventName(v28, &__p);
      v26 = &v30;
      if (v24 < 0)
        v26 = (std::string *)v25;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v27 = &__p;
      else
        v27 = (std::string *)__p.__r_.__value_.__r.__words[0];
      *(_DWORD *)buf = 68290051;
      v32 = 0;
      v33 = 2082;
      v34 = "";
      v35 = 2081;
      v36 = v26;
      v37 = 2081;
      v38 = v27;
      v39 = 2082;
      v40 = "assert";
      v41 = 2081;
      v42 = "derivedEventData != __null";
      _os_log_impl(&dword_2419D9000, v21, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Received unsupported event in state event handler\", \"State\":%{private, location:escape_only}s, \"Received Event\":%{private, location:escape_only}s, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x3Au);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v30.__r_.__value_.__l.__data_);
    }

    abort_report_np();
    __break(1u);
  }
}

void sub_241A76370(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  void *v22;

  _Unwind_Resume(a1);
}

void CLMicroLocationStateMachine::EventHandlerWrapper<CLMicroLocationLoiManager,CLMiLoLoiManagerEnableCustomLoiEvent,&CLMicroLocationLoiManager::EnableCustomLoiWhileInCustomLoi>::~EventHandlerWrapper(CLMacAddress *a1, unint64_t a2)
{
  CLMacAddress::newFromUint64(a1, a2);
  JUMPOUT(0x2426A04D4);
}

void CLMicroLocationStateMachine::EventHandlerWrapper<CLMicroLocationLoiManager,CLMiLoLoiManagerDisableCustomLoiEvent,&CLMicroLocationLoiManager::CustomLoiDisableWhileInCustomLoi>::stateFunction(CLMicroLocationStateMachine::EventBase *lpsrc@<X2>, uint64_t a2@<X1>, std::string *a3@<X8>)
{
  uint64_t v5;
  uuid *v6;
  NSObject *v7;
  uint64_t v8;
  __int128 v9;
  int v10;
  std::string::size_type v11;
  std::string *v12;
  std::string *p_p;
  NSObject *v14;
  uint64_t v15;
  __int128 v16;
  int v17;
  std::string::size_type v18;
  std::string *v19;
  std::string *v20;
  NSObject *v21;
  uint64_t v22;
  __int128 v23;
  int v24;
  std::string::size_type v25;
  std::string *v26;
  std::string *v27;
  CLMicroLocationStateMachine::EventBase *v28;
  std::string __p;
  std::string v30;
  uint8_t buf[4];
  int v32;
  __int16 v33;
  const char *v34;
  __int16 v35;
  std::string *v36;
  __int16 v37;
  std::string *v38;
  __int16 v39;
  const char *v40;
  __int16 v41;
  const char *v42;
  uint64_t v43;

  v43 = *MEMORY[0x24BDAC8D0];
  if (a2)
    v5 = a2 - 8;
  else
    v5 = 0;
  if (lpsrc
  {
    CLMicroLocationLoiManager::CustomLoiDisableWhileInCustomLoi((id *)v5, v6, a3);
  }
  else
  {
    v28 = lpsrc;
    _CLLogObjectForCategory_MicroLocation_Default();
    v7 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_FAULT))
    {
      v8 = *(_QWORD *)(v5 + 16);
      if (*(char *)(v8 + 31) < 0)
      {
        std::string::__init_copy_ctor_external(&v30, *(const std::string::value_type **)(v8 + 8), *(_QWORD *)(v8 + 16));
      }
      else
      {
        v9 = *(_OWORD *)(v8 + 8);
        v30.__r_.__value_.__r.__words[2] = *(_QWORD *)(v8 + 24);
        *(_OWORD *)&v30.__r_.__value_.__l.__data_ = v9;
      }
      v10 = SHIBYTE(v30.__r_.__value_.__r.__words[2]);
      v11 = v30.__r_.__value_.__r.__words[0];
      CLMicroLocationStateMachine::EventBase::getEventName(lpsrc, &__p);
      v12 = &v30;
      if (v10 < 0)
        v12 = (std::string *)v11;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_p = &__p;
      else
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      *(_DWORD *)buf = 68290051;
      v32 = 0;
      v33 = 2082;
      v34 = "";
      v35 = 2081;
      v36 = v12;
      v37 = 2081;
      v38 = p_p;
      v39 = 2082;
      v40 = "assert";
      v41 = 2081;
      v42 = "derivedEventData != __null";
      _os_log_impl(&dword_2419D9000, v7, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Received unsupported event in state event handler\", \"State\":%{private, location:escape_only}s, \"Received Event\":%{private, location:escape_only}s, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x3Au);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v30.__r_.__value_.__l.__data_);
    }

    _CLLogObjectForCategory_MicroLocation_Default();
    v14 = objc_claimAutoreleasedReturnValue();
    if (os_signpost_enabled(v14))
    {
      v15 = *(_QWORD *)(v5 + 16);
      if (*(char *)(v15 + 31) < 0)
      {
        std::string::__init_copy_ctor_external(&v30, *(const std::string::value_type **)(v15 + 8), *(_QWORD *)(v15 + 16));
      }
      else
      {
        v16 = *(_OWORD *)(v15 + 8);
        v30.__r_.__value_.__r.__words[2] = *(_QWORD *)(v15 + 24);
        *(_OWORD *)&v30.__r_.__value_.__l.__data_ = v16;
      }
      v17 = SHIBYTE(v30.__r_.__value_.__r.__words[2]);
      v18 = v30.__r_.__value_.__r.__words[0];
      CLMicroLocationStateMachine::EventBase::getEventName(lpsrc, &__p);
      v19 = &v30;
      if (v17 < 0)
        v19 = (std::string *)v18;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v20 = &__p;
      else
        v20 = (std::string *)__p.__r_.__value_.__r.__words[0];
      *(_DWORD *)buf = 68290051;
      v32 = 0;
      v33 = 2082;
      v34 = "";
      v35 = 2081;
      v36 = v19;
      v37 = 2081;
      v38 = v20;
      v39 = 2082;
      v40 = "assert";
      v41 = 2081;
      v42 = "derivedEventData != __null";
      _os_signpost_emit_with_name_impl(&dword_2419D9000, v14, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Received unsupported event in state event handler", "{\"msg%{public}.0s\":\"Received unsupported event in state event handler\", \"State\":%{private, location:escape_only}s, \"Received Event\":%{private, location:escape_only}s, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x3Au);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v30.__r_.__value_.__l.__data_);
    }

    _CLLogObjectForCategory_MicroLocation_Default();
    v21 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v21, OS_LOG_TYPE_INFO))
    {
      v22 = *(_QWORD *)(v5 + 16);
      if (*(char *)(v22 + 31) < 0)
      {
        std::string::__init_copy_ctor_external(&v30, *(const std::string::value_type **)(v22 + 8), *(_QWORD *)(v22 + 16));
      }
      else
      {
        v23 = *(_OWORD *)(v22 + 8);
        v30.__r_.__value_.__r.__words[2] = *(_QWORD *)(v22 + 24);
        *(_OWORD *)&v30.__r_.__value_.__l.__data_ = v23;
      }
      v24 = SHIBYTE(v30.__r_.__value_.__r.__words[2]);
      v25 = v30.__r_.__value_.__r.__words[0];
      CLMicroLocationStateMachine::EventBase::getEventName(v28, &__p);
      v26 = &v30;
      if (v24 < 0)
        v26 = (std::string *)v25;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v27 = &__p;
      else
        v27 = (std::string *)__p.__r_.__value_.__r.__words[0];
      *(_DWORD *)buf = 68290051;
      v32 = 0;
      v33 = 2082;
      v34 = "";
      v35 = 2081;
      v36 = v26;
      v37 = 2081;
      v38 = v27;
      v39 = 2082;
      v40 = "assert";
      v41 = 2081;
      v42 = "derivedEventData != __null";
      _os_log_impl(&dword_2419D9000, v21, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Received unsupported event in state event handler\", \"State\":%{private, location:escape_only}s, \"Received Event\":%{private, location:escape_only}s, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x3Au);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v30.__r_.__value_.__l.__data_);
    }

    abort_report_np();
    __break(1u);
  }
}

void sub_241A767FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  void *v22;

  _Unwind_Resume(a1);
}

void CLMicroLocationStateMachine::EventHandlerWrapper<CLMicroLocationLoiManager,CLMiLoLoiManagerDisableCustomLoiEvent,&CLMicroLocationLoiManager::CustomLoiDisableWhileInCustomLoi>::~EventHandlerWrapper(CLMacAddress *a1, unint64_t a2)
{
  CLMacAddress::newFromUint64(a1, a2);
  JUMPOUT(0x2426A04D4);
}

void CLMicroLocationStateMachine::EventHandlerWrapperWithNoData<CLMicroLocationLoiManager,&CLMicroLocationLoiManager::entryFunctionEnteringHomeLoiState>::stateFunction(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = a2 - 8;
  if (!a2)
    v2 = 0;
  *(_WORD *)(v2 + 504) = 1;
}

void CLMicroLocationStateMachine::EventHandlerWrapperWithNoData<CLMicroLocationLoiManager,&CLMicroLocationLoiManager::entryFunctionEnteringHomeLoiState>::~EventHandlerWrapperWithNoData(CLMacAddress *a1, unint64_t a2)
{
  CLMacAddress::newFromUint64(a1, a2);
  JUMPOUT(0x2426A04D4);
}

uint64_t CLMicroLocationStateMachine::EventHandlerWrapper<CLMicroLocationLoiManager,CLMiLoLoiManagerEnableCustomLoiEvent,&CLMicroLocationLoiManager::EnableCustomLoiDuringLoiEntry>::stateFunction@<X0>(CLMicroLocationStateMachine::EventBase *lpsrc@<X2>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  CLMicroLocationLoiManager *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  NSObject *v10;
  uint64_t v11;
  __int128 v12;
  int v13;
  std::string::size_type v14;
  std::string *v15;
  std::string *p_p;
  NSObject *v17;
  uint64_t v18;
  __int128 v19;
  int v20;
  std::string::size_type v21;
  std::string *v22;
  std::string *v23;
  NSObject *v24;
  uint64_t v25;
  __int128 v26;
  int v27;
  std::string::size_type v28;
  std::string *v29;
  std::string *v30;
  CLMicroLocationStateMachine::EventBase *v31;
  std::string __p;
  std::string v33;
  _BYTE buf[28];
  __int16 v35;
  std::string *v36;
  __int16 v37;
  const char *v38;
  __int16 v39;
  const char *v40;
  uint64_t v41;
  uuid v42;

  v41 = *MEMORY[0x24BDAC8D0];
  if (a2)
    v5 = (CLMicroLocationLoiManager *)(a2 - 8);
  else
    v5 = 0;
  if (lpsrc
  {
    v7 = v6[4];
    v8 = v6[5];
    CLMicroLocationLoiManager::resetLoiVariables(v5);
    *(_QWORD *)v42.var0 = v7;
    *(_QWORD *)&v42.var0[8] = v8;
    result = (uint64_t)CLMicroLocationLoiManager::handleEnableCustomLoi((id *)v5, v42, buf);
    *(_OWORD *)a3 = *(_OWORD *)buf;
    *(_QWORD *)(a3 + 16) = *(_QWORD *)&buf[16];
    *(_BYTE *)(a3 + 24) = 1;
  }
  else
  {
    v31 = lpsrc;
    _CLLogObjectForCategory_MicroLocation_Default();
    v10 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_FAULT))
    {
      v11 = *((_QWORD *)v5 + 2);
      if (*(char *)(v11 + 31) < 0)
      {
        std::string::__init_copy_ctor_external(&v33, *(const std::string::value_type **)(v11 + 8), *(_QWORD *)(v11 + 16));
      }
      else
      {
        v12 = *(_OWORD *)(v11 + 8);
        v33.__r_.__value_.__r.__words[2] = *(_QWORD *)(v11 + 24);
        *(_OWORD *)&v33.__r_.__value_.__l.__data_ = v12;
      }
      v13 = SHIBYTE(v33.__r_.__value_.__r.__words[2]);
      v14 = v33.__r_.__value_.__r.__words[0];
      CLMicroLocationStateMachine::EventBase::getEventName(lpsrc, &__p);
      v15 = &v33;
      if (v13 < 0)
        v15 = (std::string *)v14;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_p = &__p;
      else
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      *(_DWORD *)buf = 68290051;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)&buf[8] = 2082;
      *(_QWORD *)&buf[10] = "";
      *(_WORD *)&buf[18] = 2081;
      *(_QWORD *)&buf[20] = v15;
      v35 = 2081;
      v36 = p_p;
      v37 = 2082;
      v38 = "assert";
      v39 = 2081;
      v40 = "derivedEventData != __null";
      _os_log_impl(&dword_2419D9000, v10, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Received unsupported event in state event handler\", \"State\":%{private, location:escape_only}s, \"Received Event\":%{private, location:escape_only}s, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x3Au);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v33.__r_.__value_.__l.__data_);
    }

    _CLLogObjectForCategory_MicroLocation_Default();
    v17 = objc_claimAutoreleasedReturnValue();
    if (os_signpost_enabled(v17))
    {
      v18 = *((_QWORD *)v5 + 2);
      if (*(char *)(v18 + 31) < 0)
      {
        std::string::__init_copy_ctor_external(&v33, *(const std::string::value_type **)(v18 + 8), *(_QWORD *)(v18 + 16));
      }
      else
      {
        v19 = *(_OWORD *)(v18 + 8);
        v33.__r_.__value_.__r.__words[2] = *(_QWORD *)(v18 + 24);
        *(_OWORD *)&v33.__r_.__value_.__l.__data_ = v19;
      }
      v20 = SHIBYTE(v33.__r_.__value_.__r.__words[2]);
      v21 = v33.__r_.__value_.__r.__words[0];
      CLMicroLocationStateMachine::EventBase::getEventName(lpsrc, &__p);
      v22 = &v33;
      if (v20 < 0)
        v22 = (std::string *)v21;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v23 = &__p;
      else
        v23 = (std::string *)__p.__r_.__value_.__r.__words[0];
      *(_DWORD *)buf = 68290051;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)&buf[8] = 2082;
      *(_QWORD *)&buf[10] = "";
      *(_WORD *)&buf[18] = 2081;
      *(_QWORD *)&buf[20] = v22;
      v35 = 2081;
      v36 = v23;
      v37 = 2082;
      v38 = "assert";
      v39 = 2081;
      v40 = "derivedEventData != __null";
      _os_signpost_emit_with_name_impl(&dword_2419D9000, v17, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Received unsupported event in state event handler", "{\"msg%{public}.0s\":\"Received unsupported event in state event handler\", \"State\":%{private, location:escape_only}s, \"Received Event\":%{private, location:escape_only}s, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x3Au);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v33.__r_.__value_.__l.__data_);
    }

    _CLLogObjectForCategory_MicroLocation_Default();
    v24 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v24, OS_LOG_TYPE_INFO))
    {
      v25 = *((_QWORD *)v5 + 2);
      if (*(char *)(v25 + 31) < 0)
      {
        std::string::__init_copy_ctor_external(&v33, *(const std::string::value_type **)(v25 + 8), *(_QWORD *)(v25 + 16));
      }
      else
      {
        v26 = *(_OWORD *)(v25 + 8);
        v33.__r_.__value_.__r.__words[2] = *(_QWORD *)(v25 + 24);
        *(_OWORD *)&v33.__r_.__value_.__l.__data_ = v26;
      }
      v27 = SHIBYTE(v33.__r_.__value_.__r.__words[2]);
      v28 = v33.__r_.__value_.__r.__words[0];
      CLMicroLocationStateMachine::EventBase::getEventName(v31, &__p);
      v29 = &v33;
      if (v27 < 0)
        v29 = (std::string *)v28;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v30 = &__p;
      else
        v30 = (std::string *)__p.__r_.__value_.__r.__words[0];
      *(_DWORD *)buf = 68290051;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)&buf[8] = 2082;
      *(_QWORD *)&buf[10] = "";
      *(_WORD *)&buf[18] = 2081;
      *(_QWORD *)&buf[20] = v29;
      v35 = 2081;
      v36 = v30;
      v37 = 2082;
      v38 = "assert";
      v39 = 2081;
      v40 = "derivedEventData != __null";
      _os_log_impl(&dword_2419D9000, v24, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Received unsupported event in state event handler\", \"State\":%{private, location:escape_only}s, \"Received Event\":%{private, location:escape_only}s, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x3Au);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v33.__r_.__value_.__l.__data_);
    }

    result = abort_report_np();
    __break(1u);
  }
  return result;
}

void sub_241A76CF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  void *v22;

  _Unwind_Resume(a1);
}

void CLMicroLocationStateMachine::EventHandlerWrapper<CLMicroLocationLoiManager,CLMiLoLoiManagerEnableCustomLoiEvent,&CLMicroLocationLoiManager::EnableCustomLoiDuringLoiEntry>::~EventHandlerWrapper(CLMacAddress *a1, unint64_t a2)
{
  CLMacAddress::newFromUint64(a1, a2);
  JUMPOUT(0x2426A04D4);
}

uint64_t CLMicroLocationStateMachine::EventHandlerWrapper<CLMicroLocationLoiManager,CLMiLoLoiManagerGeofenceEntryEvent,&CLMicroLocationLoiManager::CustomLoiEntryDuringLoiEntry>::stateFunction@<X0>(CLMicroLocationStateMachine::EventBase *lpsrc@<X2>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  CLMicroLocationLoiManager *v5;
  uuid *v6;
  uint64_t result;
  NSObject *v8;
  uint64_t v9;
  __int128 v10;
  int v11;
  std::string::size_type v12;
  std::string *v13;
  std::string *p_p;
  NSObject *v15;
  uint64_t v16;
  __int128 v17;
  int v18;
  std::string::size_type v19;
  std::string *v20;
  std::string *v21;
  NSObject *v22;
  uint64_t v23;
  __int128 v24;
  int v25;
  std::string::size_type v26;
  std::string *v27;
  std::string *v28;
  std::string __p;
  std::string v30;
  _BYTE buf[28];
  __int16 v32;
  std::string *v33;
  __int16 v34;
  const char *v35;
  __int16 v36;
  const char *v37;
  uint64_t v38;

  v38 = *MEMORY[0x24BDAC8D0];
  if (a2)
    v5 = (CLMicroLocationLoiManager *)(a2 - 8);
  else
    v5 = 0;
  if (lpsrc
  {
    result = (uint64_t)CLMicroLocationLoiManager::handleCustomLoiVisitEntry(v5, v6[2], buf);
    *(_OWORD *)a3 = *(_OWORD *)buf;
    *(_QWORD *)(a3 + 16) = *(_QWORD *)&buf[16];
    *(_BYTE *)(a3 + 24) = 1;
  }
  else
  {
    _CLLogObjectForCategory_MicroLocation_Default();
    v8 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_FAULT))
    {
      v9 = *((_QWORD *)v5 + 2);
      if (*(char *)(v9 + 31) < 0)
      {
        std::string::__init_copy_ctor_external(&v30, *(const std::string::value_type **)(v9 + 8), *(_QWORD *)(v9 + 16));
      }
      else
      {
        v10 = *(_OWORD *)(v9 + 8);
        v30.__r_.__value_.__r.__words[2] = *(_QWORD *)(v9 + 24);
        *(_OWORD *)&v30.__r_.__value_.__l.__data_ = v10;
      }
      v11 = SHIBYTE(v30.__r_.__value_.__r.__words[2]);
      v12 = v30.__r_.__value_.__r.__words[0];
      CLMicroLocationStateMachine::EventBase::getEventName(lpsrc, &__p);
      v13 = &v30;
      if (v11 < 0)
        v13 = (std::string *)v12;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_p = &__p;
      else
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      *(_DWORD *)buf = 68290051;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)&buf[8] = 2082;
      *(_QWORD *)&buf[10] = "";
      *(_WORD *)&buf[18] = 2081;
      *(_QWORD *)&buf[20] = v13;
      v32 = 2081;
      v33 = p_p;
      v34 = 2082;
      v35 = "assert";
      v36 = 2081;
      v37 = "derivedEventData != __null";
      _os_log_impl(&dword_2419D9000, v8, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Received unsupported event in state event handler\", \"State\":%{private, location:escape_only}s, \"Received Event\":%{private, location:escape_only}s, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x3Au);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v30.__r_.__value_.__l.__data_);
    }

    _CLLogObjectForCategory_MicroLocation_Default();
    v15 = objc_claimAutoreleasedReturnValue();
    if (os_signpost_enabled(v15))
    {
      v16 = *((_QWORD *)v5 + 2);
      if (*(char *)(v16 + 31) < 0)
      {
        std::string::__init_copy_ctor_external(&v30, *(const std::string::value_type **)(v16 + 8), *(_QWORD *)(v16 + 16));
      }
      else
      {
        v17 = *(_OWORD *)(v16 + 8);
        v30.__r_.__value_.__r.__words[2] = *(_QWORD *)(v16 + 24);
        *(_OWORD *)&v30.__r_.__value_.__l.__data_ = v17;
      }
      v18 = SHIBYTE(v30.__r_.__value_.__r.__words[2]);
      v19 = v30.__r_.__value_.__r.__words[0];
      CLMicroLocationStateMachine::EventBase::getEventName(lpsrc, &__p);
      v20 = &v30;
      if (v18 < 0)
        v20 = (std::string *)v19;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v21 = &__p;
      else
        v21 = (std::string *)__p.__r_.__value_.__r.__words[0];
      *(_DWORD *)buf = 68290051;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)&buf[8] = 2082;
      *(_QWORD *)&buf[10] = "";
      *(_WORD *)&buf[18] = 2081;
      *(_QWORD *)&buf[20] = v20;
      v32 = 2081;
      v33 = v21;
      v34 = 2082;
      v35 = "assert";
      v36 = 2081;
      v37 = "derivedEventData != __null";
      _os_signpost_emit_with_name_impl(&dword_2419D9000, v15, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Received unsupported event in state event handler", "{\"msg%{public}.0s\":\"Received unsupported event in state event handler\", \"State\":%{private, location:escape_only}s, \"Received Event\":%{private, location:escape_only}s, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x3Au);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v30.__r_.__value_.__l.__data_);
    }

    _CLLogObjectForCategory_MicroLocation_Default();
    v22 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v22, OS_LOG_TYPE_INFO))
    {
      v23 = *((_QWORD *)v5 + 2);
      if (*(char *)(v23 + 31) < 0)
      {
        std::string::__init_copy_ctor_external(&v30, *(const std::string::value_type **)(v23 + 8), *(_QWORD *)(v23 + 16));
      }
      else
      {
        v24 = *(_OWORD *)(v23 + 8);
        v30.__r_.__value_.__r.__words[2] = *(_QWORD *)(v23 + 24);
        *(_OWORD *)&v30.__r_.__value_.__l.__data_ = v24;
      }
      v25 = SHIBYTE(v30.__r_.__value_.__r.__words[2]);
      v26 = v30.__r_.__value_.__r.__words[0];
      CLMicroLocationStateMachine::EventBase::getEventName(lpsrc, &__p);
      v27 = &v30;
      if (v25 < 0)
        v27 = (std::string *)v26;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v28 = &__p;
      else
        v28 = (std::string *)__p.__r_.__value_.__r.__words[0];
      *(_DWORD *)buf = 68290051;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)&buf[8] = 2082;
      *(_QWORD *)&buf[10] = "";
      *(_WORD *)&buf[18] = 2081;
      *(_QWORD *)&buf[20] = v27;
      v32 = 2081;
      v33 = v28;
      v34 = 2082;
      v35 = "assert";
      v36 = 2081;
      v37 = "derivedEventData != __null";
      _os_log_impl(&dword_2419D9000, v22, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Received unsupported event in state event handler\", \"State\":%{private, location:escape_only}s, \"Received Event\":%{private, location:escape_only}s, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x3Au);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v30.__r_.__value_.__l.__data_);
    }

    result = abort_report_np();
    __break(1u);
  }
  return result;
}

void sub_241A77198(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  void *v22;

  _Unwind_Resume(a1);
}

void CLMicroLocationStateMachine::EventHandlerWrapper<CLMicroLocationLoiManager,CLMiLoLoiManagerGeofenceEntryEvent,&CLMicroLocationLoiManager::CustomLoiEntryDuringLoiEntry>::~EventHandlerWrapper(CLMacAddress *a1, unint64_t a2)
{
  CLMacAddress::newFromUint64(a1, a2);
  JUMPOUT(0x2426A04D4);
}

void CLMicroLocationStateMachine::EventHandlerWrapper<CLMicroLocationLoiManager,CLMiLoLoiManagerReceivedLoiForLocationEvent,&CLMicroLocationLoiManager::LoiForGivenLocation>::stateFunction(CLMicroLocationStateMachine::EventBase *lpsrc@<X2>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  CLMicroLocationLoiManager *v5;
  const CLMiLoLoiManagerReceivedLoiForLocationEvent *v6;
  NSObject *v7;
  uint64_t v8;
  __int128 v9;
  int v10;
  std::string::size_type v11;
  std::string *v12;
  std::string *p_p;
  NSObject *v14;
  uint64_t v15;
  __int128 v16;
  int v17;
  std::string::size_type v18;
  std::string *v19;
  std::string *v20;
  NSObject *v21;
  uint64_t v22;
  __int128 v23;
  int v24;
  std::string::size_type v25;
  std::string *v26;
  std::string *v27;
  CLMicroLocationStateMachine::EventBase *v28;
  std::string __p;
  std::string v30;
  uint8_t buf[4];
  int v32;
  __int16 v33;
  const char *v34;
  __int16 v35;
  std::string *v36;
  __int16 v37;
  std::string *v38;
  __int16 v39;
  const char *v40;
  __int16 v41;
  const char *v42;
  uint64_t v43;

  v43 = *MEMORY[0x24BDAC8D0];
  if (a2)
    v5 = (CLMicroLocationLoiManager *)(a2 - 8);
  else
    v5 = 0;
  if (lpsrc
  {
    CLMicroLocationLoiManager::LoiForGivenLocation(v5, v6, a3);
  }
  else
  {
    v28 = lpsrc;
    _CLLogObjectForCategory_MicroLocation_Default();
    v7 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_FAULT))
    {
      v8 = *((_QWORD *)v5 + 2);
      if (*(char *)(v8 + 31) < 0)
      {
        std::string::__init_copy_ctor_external(&v30, *(const std::string::value_type **)(v8 + 8), *(_QWORD *)(v8 + 16));
      }
      else
      {
        v9 = *(_OWORD *)(v8 + 8);
        v30.__r_.__value_.__r.__words[2] = *(_QWORD *)(v8 + 24);
        *(_OWORD *)&v30.__r_.__value_.__l.__data_ = v9;
      }
      v10 = SHIBYTE(v30.__r_.__value_.__r.__words[2]);
      v11 = v30.__r_.__value_.__r.__words[0];
      CLMicroLocationStateMachine::EventBase::getEventName(lpsrc, &__p);
      v12 = &v30;
      if (v10 < 0)
        v12 = (std::string *)v11;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_p = &__p;
      else
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      *(_DWORD *)buf = 68290051;
      v32 = 0;
      v33 = 2082;
      v34 = "";
      v35 = 2081;
      v36 = v12;
      v37 = 2081;
      v38 = p_p;
      v39 = 2082;
      v40 = "assert";
      v41 = 2081;
      v42 = "derivedEventData != __null";
      _os_log_impl(&dword_2419D9000, v7, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Received unsupported event in state event handler\", \"State\":%{private, location:escape_only}s, \"Received Event\":%{private, location:escape_only}s, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x3Au);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v30.__r_.__value_.__l.__data_);
    }

    _CLLogObjectForCategory_MicroLocation_Default();
    v14 = objc_claimAutoreleasedReturnValue();
    if (os_signpost_enabled(v14))
    {
      v15 = *((_QWORD *)v5 + 2);
      if (*(char *)(v15 + 31) < 0)
      {
        std::string::__init_copy_ctor_external(&v30, *(const std::string::value_type **)(v15 + 8), *(_QWORD *)(v15 + 16));
      }
      else
      {
        v16 = *(_OWORD *)(v15 + 8);
        v30.__r_.__value_.__r.__words[2] = *(_QWORD *)(v15 + 24);
        *(_OWORD *)&v30.__r_.__value_.__l.__data_ = v16;
      }
      v17 = SHIBYTE(v30.__r_.__value_.__r.__words[2]);
      v18 = v30.__r_.__value_.__r.__words[0];
      CLMicroLocationStateMachine::EventBase::getEventName(lpsrc, &__p);
      v19 = &v30;
      if (v17 < 0)
        v19 = (std::string *)v18;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v20 = &__p;
      else
        v20 = (std::string *)__p.__r_.__value_.__r.__words[0];
      *(_DWORD *)buf = 68290051;
      v32 = 0;
      v33 = 2082;
      v34 = "";
      v35 = 2081;
      v36 = v19;
      v37 = 2081;
      v38 = v20;
      v39 = 2082;
      v40 = "assert";
      v41 = 2081;
      v42 = "derivedEventData != __null";
      _os_signpost_emit_with_name_impl(&dword_2419D9000, v14, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Received unsupported event in state event handler", "{\"msg%{public}.0s\":\"Received unsupported event in state event handler\", \"State\":%{private, location:escape_only}s, \"Received Event\":%{private, location:escape_only}s, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x3Au);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v30.__r_.__value_.__l.__data_);
    }

    _CLLogObjectForCategory_MicroLocation_Default();
    v21 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v21, OS_LOG_TYPE_INFO))
    {
      v22 = *((_QWORD *)v5 + 2);
      if (*(char *)(v22 + 31) < 0)
      {
        std::string::__init_copy_ctor_external(&v30, *(const std::string::value_type **)(v22 + 8), *(_QWORD *)(v22 + 16));
      }
      else
      {
        v23 = *(_OWORD *)(v22 + 8);
        v30.__r_.__value_.__r.__words[2] = *(_QWORD *)(v22 + 24);
        *(_OWORD *)&v30.__r_.__value_.__l.__data_ = v23;
      }
      v24 = SHIBYTE(v30.__r_.__value_.__r.__words[2]);
      v25 = v30.__r_.__value_.__r.__words[0];
      CLMicroLocationStateMachine::EventBase::getEventName(v28, &__p);
      v26 = &v30;
      if (v24 < 0)
        v26 = (std::string *)v25;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v27 = &__p;
      else
        v27 = (std::string *)__p.__r_.__value_.__r.__words[0];
      *(_DWORD *)buf = 68290051;
      v32 = 0;
      v33 = 2082;
      v34 = "";
      v35 = 2081;
      v36 = v26;
      v37 = 2081;
      v38 = v27;
      v39 = 2082;
      v40 = "assert";
      v41 = 2081;
      v42 = "derivedEventData != __null";
      _os_log_impl(&dword_2419D9000, v21, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Received unsupported event in state event handler\", \"State\":%{private, location:escape_only}s, \"Received Event\":%{private, location:escape_only}s, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x3Au);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v30.__r_.__value_.__l.__data_);
    }

    abort_report_np();
    __break(1u);
  }
}

void sub_241A77624(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  void *v22;

  _Unwind_Resume(a1);
}

void CLMicroLocationStateMachine::EventHandlerWrapper<CLMicroLocationLoiManager,CLMiLoLoiManagerReceivedLoiForLocationEvent,&CLMicroLocationLoiManager::LoiForGivenLocation>::~EventHandlerWrapper(CLMacAddress *a1, unint64_t a2)
{
  CLMacAddress::newFromUint64(a1, a2);
  JUMPOUT(0x2426A04D4);
}

void CLMicroLocationStateMachine::EventHandlerWrapper<CLMicroLocationLoiManager,CLMiLoLoiManagerFailedToFetchLoiForLocationEvent,&CLMicroLocationLoiManager::LoiFetchFailure>::stateFunction(CLMicroLocationStateMachine::EventBase *lpsrc@<X2>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  CLMicroLocationLoiManager *v5;
  const CLMiLoLoiManagerFailedToFetchLoiForLocationEvent *v6;
  NSObject *v7;
  uint64_t v8;
  __int128 v9;
  int v10;
  std::string::size_type v11;
  std::string *v12;
  std::string *p_p;
  NSObject *v14;
  uint64_t v15;
  __int128 v16;
  int v17;
  std::string::size_type v18;
  std::string *v19;
  std::string *v20;
  NSObject *v21;
  uint64_t v22;
  __int128 v23;
  int v24;
  std::string::size_type v25;
  std::string *v26;
  std::string *v27;
  CLMicroLocationStateMachine::EventBase *v28;
  std::string __p;
  std::string v30;
  uint8_t buf[4];
  int v32;
  __int16 v33;
  const char *v34;
  __int16 v35;
  std::string *v36;
  __int16 v37;
  std::string *v38;
  __int16 v39;
  const char *v40;
  __int16 v41;
  const char *v42;
  uint64_t v43;

  v43 = *MEMORY[0x24BDAC8D0];
  if (a2)
    v5 = (CLMicroLocationLoiManager *)(a2 - 8);
  else
    v5 = 0;
  if (lpsrc
  {
    CLMicroLocationLoiManager::LoiFetchFailure(v5, v6, a3);
  }
  else
  {
    v28 = lpsrc;
    _CLLogObjectForCategory_MicroLocation_Default();
    v7 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_FAULT))
    {
      v8 = *((_QWORD *)v5 + 2);
      if (*(char *)(v8 + 31) < 0)
      {
        std::string::__init_copy_ctor_external(&v30, *(const std::string::value_type **)(v8 + 8), *(_QWORD *)(v8 + 16));
      }
      else
      {
        v9 = *(_OWORD *)(v8 + 8);
        v30.__r_.__value_.__r.__words[2] = *(_QWORD *)(v8 + 24);
        *(_OWORD *)&v30.__r_.__value_.__l.__data_ = v9;
      }
      v10 = SHIBYTE(v30.__r_.__value_.__r.__words[2]);
      v11 = v30.__r_.__value_.__r.__words[0];
      CLMicroLocationStateMachine::EventBase::getEventName(lpsrc, &__p);
      v12 = &v30;
      if (v10 < 0)
        v12 = (std::string *)v11;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_p = &__p;
      else
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      *(_DWORD *)buf = 68290051;
      v32 = 0;
      v33 = 2082;
      v34 = "";
      v35 = 2081;
      v36 = v12;
      v37 = 2081;
      v38 = p_p;
      v39 = 2082;
      v40 = "assert";
      v41 = 2081;
      v42 = "derivedEventData != __null";
      _os_log_impl(&dword_2419D9000, v7, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Received unsupported event in state event handler\", \"State\":%{private, location:escape_only}s, \"Received Event\":%{private, location:escape_only}s, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x3Au);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v30.__r_.__value_.__l.__data_);
    }

    _CLLogObjectForCategory_MicroLocation_Default();
    v14 = objc_claimAutoreleasedReturnValue();
    if (os_signpost_enabled(v14))
    {
      v15 = *((_QWORD *)v5 + 2);
      if (*(char *)(v15 + 31) < 0)
      {
        std::string::__init_copy_ctor_external(&v30, *(const std::string::value_type **)(v15 + 8), *(_QWORD *)(v15 + 16));
      }
      else
      {
        v16 = *(_OWORD *)(v15 + 8);
        v30.__r_.__value_.__r.__words[2] = *(_QWORD *)(v15 + 24);
        *(_OWORD *)&v30.__r_.__value_.__l.__data_ = v16;
      }
      v17 = SHIBYTE(v30.__r_.__value_.__r.__words[2]);
      v18 = v30.__r_.__value_.__r.__words[0];
      CLMicroLocationStateMachine::EventBase::getEventName(lpsrc, &__p);
      v19 = &v30;
      if (v17 < 0)
        v19 = (std::string *)v18;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v20 = &__p;
      else
        v20 = (std::string *)__p.__r_.__value_.__r.__words[0];
      *(_DWORD *)buf = 68290051;
      v32 = 0;
      v33 = 2082;
      v34 = "";
      v35 = 2081;
      v36 = v19;
      v37 = 2081;
      v38 = v20;
      v39 = 2082;
      v40 = "assert";
      v41 = 2081;
      v42 = "derivedEventData != __null";
      _os_signpost_emit_with_name_impl(&dword_2419D9000, v14, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Received unsupported event in state event handler", "{\"msg%{public}.0s\":\"Received unsupported event in state event handler\", \"State\":%{private, location:escape_only}s, \"Received Event\":%{private, location:escape_only}s, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x3Au);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v30.__r_.__value_.__l.__data_);
    }

    _CLLogObjectForCategory_MicroLocation_Default();
    v21 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v21, OS_LOG_TYPE_INFO))
    {
      v22 = *((_QWORD *)v5 + 2);
      if (*(char *)(v22 + 31) < 0)
      {
        std::string::__init_copy_ctor_external(&v30, *(const std::string::value_type **)(v22 + 8), *(_QWORD *)(v22 + 16));
      }
      else
      {
        v23 = *(_OWORD *)(v22 + 8);
        v30.__r_.__value_.__r.__words[2] = *(_QWORD *)(v22 + 24);
        *(_OWORD *)&v30.__r_.__value_.__l.__data_ = v23;
      }
      v24 = SHIBYTE(v30.__r_.__value_.__r.__words[2]);
      v25 = v30.__r_.__value_.__r.__words[0];
      CLMicroLocationStateMachine::EventBase::getEventName(v28, &__p);
      v26 = &v30;
      if (v24 < 0)
        v26 = (std::string *)v25;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v27 = &__p;
      else
        v27 = (std::string *)__p.__r_.__value_.__r.__words[0];
      *(_DWORD *)buf = 68290051;
      v32 = 0;
      v33 = 2082;
      v34 = "";
      v35 = 2081;
      v36 = v26;
      v37 = 2081;
      v38 = v27;
      v39 = 2082;
      v40 = "assert";
      v41 = 2081;
      v42 = "derivedEventData != __null";
      _os_log_impl(&dword_2419D9000, v21, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Received unsupported event in state event handler\", \"State\":%{private, location:escape_only}s, \"Received Event\":%{private, location:escape_only}s, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x3Au);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v30.__r_.__value_.__l.__data_);
    }

    abort_report_np();
    __break(1u);
  }
}

void sub_241A77AB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  void *v22;

  _Unwind_Resume(a1);
}

void CLMicroLocationStateMachine::EventHandlerWrapper<CLMicroLocationLoiManager,CLMiLoLoiManagerFailedToFetchLoiForLocationEvent,&CLMicroLocationLoiManager::LoiFetchFailure>::~EventHandlerWrapper(CLMacAddress *a1, unint64_t a2)
{
  CLMacAddress::newFromUint64(a1, a2);
  JUMPOUT(0x2426A04D4);
}

void CLMicroLocationStateMachine::EventHandlerWrapper<CLMicroLocationLoiManager,CLMiLoLoiManagerFetchedPlaceInference,&CLMicroLocationLoiManager::SuccessfullyFetchedPlaceInference>::stateFunction(CLMicroLocationStateMachine::EventBase *lpsrc@<X2>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  std::string *v5;
  id *v6;
  NSObject *v7;
  std::string::size_type v8;
  __int128 v9;
  int v10;
  std::string::size_type v11;
  std::string *v12;
  std::string *p_p;
  NSObject *v14;
  std::string::size_type v15;
  __int128 v16;
  int v17;
  std::string::size_type v18;
  std::string *v19;
  std::string *v20;
  NSObject *v21;
  std::string::size_type v22;
  __int128 v23;
  int v24;
  std::string::size_type v25;
  std::string *v26;
  std::string *v27;
  CLMicroLocationStateMachine::EventBase *v28;
  std::string __p;
  std::string v30;
  uint8_t buf[4];
  int v32;
  __int16 v33;
  const char *v34;
  __int16 v35;
  std::string *v36;
  __int16 v37;
  std::string *v38;
  __int16 v39;
  const char *v40;
  __int16 v41;
  const char *v42;
  uint64_t v43;

  v43 = *MEMORY[0x24BDAC8D0];
  if (a2)
    v5 = (std::string *)(a2 - 8);
  else
    v5 = 0;
  if (lpsrc
  {
    CLMicroLocationLoiManager::SuccessfullyFetchedPlaceInference(v5, v6, a3);
  }
  else
  {
    v28 = lpsrc;
    _CLLogObjectForCategory_MicroLocation_Default();
    v7 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_FAULT))
    {
      v8 = v5->__r_.__value_.__r.__words[2];
      if (*(char *)(v8 + 31) < 0)
      {
        std::string::__init_copy_ctor_external(&v30, *(const std::string::value_type **)(v8 + 8), *(_QWORD *)(v8 + 16));
      }
      else
      {
        v9 = *(_OWORD *)(v8 + 8);
        v30.__r_.__value_.__r.__words[2] = *(_QWORD *)(v8 + 24);
        *(_OWORD *)&v30.__r_.__value_.__l.__data_ = v9;
      }
      v10 = SHIBYTE(v30.__r_.__value_.__r.__words[2]);
      v11 = v30.__r_.__value_.__r.__words[0];
      CLMicroLocationStateMachine::EventBase::getEventName(lpsrc, &__p);
      v12 = &v30;
      if (v10 < 0)
        v12 = (std::string *)v11;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_p = &__p;
      else
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      *(_DWORD *)buf = 68290051;
      v32 = 0;
      v33 = 2082;
      v34 = "";
      v35 = 2081;
      v36 = v12;
      v37 = 2081;
      v38 = p_p;
      v39 = 2082;
      v40 = "assert";
      v41 = 2081;
      v42 = "derivedEventData != __null";
      _os_log_impl(&dword_2419D9000, v7, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Received unsupported event in state event handler\", \"State\":%{private, location:escape_only}s, \"Received Event\":%{private, location:escape_only}s, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x3Au);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v30.__r_.__value_.__l.__data_);
    }

    _CLLogObjectForCategory_MicroLocation_Default();
    v14 = objc_claimAutoreleasedReturnValue();
    if (os_signpost_enabled(v14))
    {
      v15 = v5->__r_.__value_.__r.__words[2];
      if (*(char *)(v15 + 31) < 0)
      {
        std::string::__init_copy_ctor_external(&v30, *(const std::string::value_type **)(v15 + 8), *(_QWORD *)(v15 + 16));
      }
      else
      {
        v16 = *(_OWORD *)(v15 + 8);
        v30.__r_.__value_.__r.__words[2] = *(_QWORD *)(v15 + 24);
        *(_OWORD *)&v30.__r_.__value_.__l.__data_ = v16;
      }
      v17 = SHIBYTE(v30.__r_.__value_.__r.__words[2]);
      v18 = v30.__r_.__value_.__r.__words[0];
      CLMicroLocationStateMachine::EventBase::getEventName(lpsrc, &__p);
      v19 = &v30;
      if (v17 < 0)
        v19 = (std::string *)v18;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v20 = &__p;
      else
        v20 = (std::string *)__p.__r_.__value_.__r.__words[0];
      *(_DWORD *)buf = 68290051;
      v32 = 0;
      v33 = 2082;
      v34 = "";
      v35 = 2081;
      v36 = v19;
      v37 = 2081;
      v38 = v20;
      v39 = 2082;
      v40 = "assert";
      v41 = 2081;
      v42 = "derivedEventData != __null";
      _os_signpost_emit_with_name_impl(&dword_2419D9000, v14, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Received unsupported event in state event handler", "{\"msg%{public}.0s\":\"Received unsupported event in state event handler\", \"State\":%{private, location:escape_only}s, \"Received Event\":%{private, location:escape_only}s, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x3Au);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v30.__r_.__value_.__l.__data_);
    }

    _CLLogObjectForCategory_MicroLocation_Default();
    v21 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v21, OS_LOG_TYPE_INFO))
    {
      v22 = v5->__r_.__value_.__r.__words[2];
      if (*(char *)(v22 + 31) < 0)
      {
        std::string::__init_copy_ctor_external(&v30, *(const std::string::value_type **)(v22 + 8), *(_QWORD *)(v22 + 16));
      }
      else
      {
        v23 = *(_OWORD *)(v22 + 8);
        v30.__r_.__value_.__r.__words[2] = *(_QWORD *)(v22 + 24);
        *(_OWORD *)&v30.__r_.__value_.__l.__data_ = v23;
      }
      v24 = SHIBYTE(v30.__r_.__value_.__r.__words[2]);
      v25 = v30.__r_.__value_.__r.__words[0];
      CLMicroLocationStateMachine::EventBase::getEventName(v28, &__p);
      v26 = &v30;
      if (v24 < 0)
        v26 = (std::string *)v25;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v27 = &__p;
      else
        v27 = (std::string *)__p.__r_.__value_.__r.__words[0];
      *(_DWORD *)buf = 68290051;
      v32 = 0;
      v33 = 2082;
      v34 = "";
      v35 = 2081;
      v36 = v26;
      v37 = 2081;
      v38 = v27;
      v39 = 2082;
      v40 = "assert";
      v41 = 2081;
      v42 = "derivedEventData != __null";
      _os_log_impl(&dword_2419D9000, v21, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Received unsupported event in state event handler\", \"State\":%{private, location:escape_only}s, \"Received Event\":%{private, location:escape_only}s, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x3Au);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v30.__r_.__value_.__l.__data_);
    }

    abort_report_np();
    __break(1u);
  }
}

void sub_241A77F3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  void *v22;

  _Unwind_Resume(a1);
}

void CLMicroLocationStateMachine::EventHandlerWrapper<CLMicroLocationLoiManager,CLMiLoLoiManagerFetchedPlaceInference,&CLMicroLocationLoiManager::SuccessfullyFetchedPlaceInference>::~EventHandlerWrapper(CLMacAddress *a1, unint64_t a2)
{
  CLMacAddress::newFromUint64(a1, a2);
  JUMPOUT(0x2426A04D4);
}

void CLMicroLocationStateMachine::EventHandlerWrapper<CLMicroLocationLoiManager,CLMiLoLoiManagerFailedToFetchPlaceInference,&CLMicroLocationLoiManager::FailedToFetchedPlaceInference>::stateFunction(CLMicroLocationStateMachine::EventBase *lpsrc@<X2>, uint64_t a2@<X1>, std::string *a3@<X8>)
{
  CLMicroLocationLoiManager *v5;
  const CLMiLoLoiManagerFailedToFetchPlaceInference *v6;
  NSObject *v7;
  uint64_t v8;
  __int128 v9;
  int v10;
  std::string::size_type v11;
  std::string *v12;
  std::string *p_p;
  NSObject *v14;
  uint64_t v15;
  __int128 v16;
  int v17;
  std::string::size_type v18;
  std::string *v19;
  std::string *v20;
  NSObject *v21;
  uint64_t v22;
  __int128 v23;
  int v24;
  std::string::size_type v25;
  std::string *v26;
  std::string *v27;
  CLMicroLocationStateMachine::EventBase *v28;
  std::string __p;
  std::string v30;
  uint8_t buf[4];
  int v32;
  __int16 v33;
  const char *v34;
  __int16 v35;
  std::string *v36;
  __int16 v37;
  std::string *v38;
  __int16 v39;
  const char *v40;
  __int16 v41;
  const char *v42;
  uint64_t v43;

  v43 = *MEMORY[0x24BDAC8D0];
  if (a2)
    v5 = (CLMicroLocationLoiManager *)(a2 - 8);
  else
    v5 = 0;
  if (lpsrc
  {
    CLMicroLocationLoiManager::FailedToFetchedPlaceInference(v5, v6, a3);
  }
  else
  {
    v28 = lpsrc;
    _CLLogObjectForCategory_MicroLocation_Default();
    v7 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_FAULT))
    {
      v8 = *((_QWORD *)v5 + 2);
      if (*(char *)(v8 + 31) < 0)
      {
        std::string::__init_copy_ctor_external(&v30, *(const std::string::value_type **)(v8 + 8), *(_QWORD *)(v8 + 16));
      }
      else
      {
        v9 = *(_OWORD *)(v8 + 8);
        v30.__r_.__value_.__r.__words[2] = *(_QWORD *)(v8 + 24);
        *(_OWORD *)&v30.__r_.__value_.__l.__data_ = v9;
      }
      v10 = SHIBYTE(v30.__r_.__value_.__r.__words[2]);
      v11 = v30.__r_.__value_.__r.__words[0];
      CLMicroLocationStateMachine::EventBase::getEventName(lpsrc, &__p);
      v12 = &v30;
      if (v10 < 0)
        v12 = (std::string *)v11;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_p = &__p;
      else
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      *(_DWORD *)buf = 68290051;
      v32 = 0;
      v33 = 2082;
      v34 = "";
      v35 = 2081;
      v36 = v12;
      v37 = 2081;
      v38 = p_p;
      v39 = 2082;
      v40 = "assert";
      v41 = 2081;
      v42 = "derivedEventData != __null";
      _os_log_impl(&dword_2419D9000, v7, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Received unsupported event in state event handler\", \"State\":%{private, location:escape_only}s, \"Received Event\":%{private, location:escape_only}s, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x3Au);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v30.__r_.__value_.__l.__data_);
    }

    _CLLogObjectForCategory_MicroLocation_Default();
    v14 = objc_claimAutoreleasedReturnValue();
    if (os_signpost_enabled(v14))
    {
      v15 = *((_QWORD *)v5 + 2);
      if (*(char *)(v15 + 31) < 0)
      {
        std::string::__init_copy_ctor_external(&v30, *(const std::string::value_type **)(v15 + 8), *(_QWORD *)(v15 + 16));
      }
      else
      {
        v16 = *(_OWORD *)(v15 + 8);
        v30.__r_.__value_.__r.__words[2] = *(_QWORD *)(v15 + 24);
        *(_OWORD *)&v30.__r_.__value_.__l.__data_ = v16;
      }
      v17 = SHIBYTE(v30.__r_.__value_.__r.__words[2]);
      v18 = v30.__r_.__value_.__r.__words[0];
      CLMicroLocationStateMachine::EventBase::getEventName(lpsrc, &__p);
      v19 = &v30;
      if (v17 < 0)
        v19 = (std::string *)v18;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v20 = &__p;
      else
        v20 = (std::string *)__p.__r_.__value_.__r.__words[0];
      *(_DWORD *)buf = 68290051;
      v32 = 0;
      v33 = 2082;
      v34 = "";
      v35 = 2081;
      v36 = v19;
      v37 = 2081;
      v38 = v20;
      v39 = 2082;
      v40 = "assert";
      v41 = 2081;
      v42 = "derivedEventData != __null";
      _os_signpost_emit_with_name_impl(&dword_2419D9000, v14, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Received unsupported event in state event handler", "{\"msg%{public}.0s\":\"Received unsupported event in state event handler\", \"State\":%{private, location:escape_only}s, \"Received Event\":%{private, location:escape_only}s, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x3Au);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v30.__r_.__value_.__l.__data_);
    }

    _CLLogObjectForCategory_MicroLocation_Default();
    v21 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v21, OS_LOG_TYPE_INFO))
    {
      v22 = *((_QWORD *)v5 + 2);
      if (*(char *)(v22 + 31) < 0)
      {
        std::string::__init_copy_ctor_external(&v30, *(const std::string::value_type **)(v22 + 8), *(_QWORD *)(v22 + 16));
      }
      else
      {
        v23 = *(_OWORD *)(v22 + 8);
        v30.__r_.__value_.__r.__words[2] = *(_QWORD *)(v22 + 24);
        *(_OWORD *)&v30.__r_.__value_.__l.__data_ = v23;
      }
      v24 = SHIBYTE(v30.__r_.__value_.__r.__words[2]);
      v25 = v30.__r_.__value_.__r.__words[0];
      CLMicroLocationStateMachine::EventBase::getEventName(v28, &__p);
      v26 = &v30;
      if (v24 < 0)
        v26 = (std::string *)v25;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v27 = &__p;
      else
        v27 = (std::string *)__p.__r_.__value_.__r.__words[0];
      *(_DWORD *)buf = 68290051;
      v32 = 0;
      v33 = 2082;
      v34 = "";
      v35 = 2081;
      v36 = v26;
      v37 = 2081;
      v38 = v27;
      v39 = 2082;
      v40 = "assert";
      v41 = 2081;
      v42 = "derivedEventData != __null";
      _os_log_impl(&dword_2419D9000, v21, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Received unsupported event in state event handler\", \"State\":%{private, location:escape_only}s, \"Received Event\":%{private, location:escape_only}s, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x3Au);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v30.__r_.__value_.__l.__data_);
    }

    abort_report_np();
    __break(1u);
  }
}

void sub_241A783C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  void *v22;

  _Unwind_Resume(a1);
}

void CLMicroLocationStateMachine::EventHandlerWrapper<CLMicroLocationLoiManager,CLMiLoLoiManagerFailedToFetchPlaceInference,&CLMicroLocationLoiManager::FailedToFetchedPlaceInference>::~EventHandlerWrapper(CLMacAddress *a1, unint64_t a2)
{
  CLMacAddress::newFromUint64(a1, a2);
  JUMPOUT(0x2426A04D4);
}

void CLMicroLocationStateMachine::EventHandlerWrapper<CLMicroLocationLoiManager,CLMiLoLoiManagerReceivedRelatedLoisEvent,&CLMicroLocationLoiManager::RelatedLois>::stateFunction(CLMicroLocationStateMachine::EventBase *lpsrc@<X2>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  CLMicroLocationLoiManager *v5;
  const CLMiLoLoiManagerReceivedRelatedLoisEvent *v6;
  NSObject *v7;
  uint64_t v8;
  __int128 v9;
  int v10;
  std::string::size_type v11;
  std::string *v12;
  std::string *p_p;
  NSObject *v14;
  uint64_t v15;
  __int128 v16;
  int v17;
  std::string::size_type v18;
  std::string *v19;
  std::string *v20;
  NSObject *v21;
  uint64_t v22;
  __int128 v23;
  int v24;
  std::string::size_type v25;
  std::string *v26;
  std::string *v27;
  CLMicroLocationStateMachine::EventBase *v28;
  std::string __p;
  std::string v30;
  uint8_t buf[4];
  int v32;
  __int16 v33;
  const char *v34;
  __int16 v35;
  std::string *v36;
  __int16 v37;
  std::string *v38;
  __int16 v39;
  const char *v40;
  __int16 v41;
  const char *v42;
  uint64_t v43;

  v43 = *MEMORY[0x24BDAC8D0];
  if (a2)
    v5 = (CLMicroLocationLoiManager *)(a2 - 8);
  else
    v5 = 0;
  if (lpsrc
  {
    CLMicroLocationLoiManager::RelatedLois(v5, v6, a3);
  }
  else
  {
    v28 = lpsrc;
    _CLLogObjectForCategory_MicroLocation_Default();
    v7 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_FAULT))
    {
      v8 = *((_QWORD *)v5 + 2);
      if (*(char *)(v8 + 31) < 0)
      {
        std::string::__init_copy_ctor_external(&v30, *(const std::string::value_type **)(v8 + 8), *(_QWORD *)(v8 + 16));
      }
      else
      {
        v9 = *(_OWORD *)(v8 + 8);
        v30.__r_.__value_.__r.__words[2] = *(_QWORD *)(v8 + 24);
        *(_OWORD *)&v30.__r_.__value_.__l.__data_ = v9;
      }
      v10 = SHIBYTE(v30.__r_.__value_.__r.__words[2]);
      v11 = v30.__r_.__value_.__r.__words[0];
      CLMicroLocationStateMachine::EventBase::getEventName(lpsrc, &__p);
      v12 = &v30;
      if (v10 < 0)
        v12 = (std::string *)v11;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_p = &__p;
      else
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      *(_DWORD *)buf = 68290051;
      v32 = 0;
      v33 = 2082;
      v34 = "";
      v35 = 2081;
      v36 = v12;
      v37 = 2081;
      v38 = p_p;
      v39 = 2082;
      v40 = "assert";
      v41 = 2081;
      v42 = "derivedEventData != __null";
      _os_log_impl(&dword_2419D9000, v7, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Received unsupported event in state event handler\", \"State\":%{private, location:escape_only}s, \"Received Event\":%{private, location:escape_only}s, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x3Au);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v30.__r_.__value_.__l.__data_);
    }

    _CLLogObjectForCategory_MicroLocation_Default();
    v14 = objc_claimAutoreleasedReturnValue();
    if (os_signpost_enabled(v14))
    {
      v15 = *((_QWORD *)v5 + 2);
      if (*(char *)(v15 + 31) < 0)
      {
        std::string::__init_copy_ctor_external(&v30, *(const std::string::value_type **)(v15 + 8), *(_QWORD *)(v15 + 16));
      }
      else
      {
        v16 = *(_OWORD *)(v15 + 8);
        v30.__r_.__value_.__r.__words[2] = *(_QWORD *)(v15 + 24);
        *(_OWORD *)&v30.__r_.__value_.__l.__data_ = v16;
      }
      v17 = SHIBYTE(v30.__r_.__value_.__r.__words[2]);
      v18 = v30.__r_.__value_.__r.__words[0];
      CLMicroLocationStateMachine::EventBase::getEventName(lpsrc, &__p);
      v19 = &v30;
      if (v17 < 0)
        v19 = (std::string *)v18;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v20 = &__p;
      else
        v20 = (std::string *)__p.__r_.__value_.__r.__words[0];
      *(_DWORD *)buf = 68290051;
      v32 = 0;
      v33 = 2082;
      v34 = "";
      v35 = 2081;
      v36 = v19;
      v37 = 2081;
      v38 = v20;
      v39 = 2082;
      v40 = "assert";
      v41 = 2081;
      v42 = "derivedEventData != __null";
      _os_signpost_emit_with_name_impl(&dword_2419D9000, v14, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Received unsupported event in state event handler", "{\"msg%{public}.0s\":\"Received unsupported event in state event handler\", \"State\":%{private, location:escape_only}s, \"Received Event\":%{private, location:escape_only}s, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x3Au);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v30.__r_.__value_.__l.__data_);
    }

    _CLLogObjectForCategory_MicroLocation_Default();
    v21 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v21, OS_LOG_TYPE_INFO))
    {
      v22 = *((_QWORD *)v5 + 2);
      if (*(char *)(v22 + 31) < 0)
      {
        std::string::__init_copy_ctor_external(&v30, *(const std::string::value_type **)(v22 + 8), *(_QWORD *)(v22 + 16));
      }
      else
      {
        v23 = *(_OWORD *)(v22 + 8);
        v30.__r_.__value_.__r.__words[2] = *(_QWORD *)(v22 + 24);
        *(_OWORD *)&v30.__r_.__value_.__l.__data_ = v23;
      }
      v24 = SHIBYTE(v30.__r_.__value_.__r.__words[2]);
      v25 = v30.__r_.__value_.__r.__words[0];
      CLMicroLocationStateMachine::EventBase::getEventName(v28, &__p);
      v26 = &v30;
      if (v24 < 0)
        v26 = (std::string *)v25;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v27 = &__p;
      else
        v27 = (std::string *)__p.__r_.__value_.__r.__words[0];
      *(_DWORD *)buf = 68290051;
      v32 = 0;
      v33 = 2082;
      v34 = "";
      v35 = 2081;
      v36 = v26;
      v37 = 2081;
      v38 = v27;
      v39 = 2082;
      v40 = "assert";
      v41 = 2081;
      v42 = "derivedEventData != __null";
      _os_log_impl(&dword_2419D9000, v21, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Received unsupported event in state event handler\", \"State\":%{private, location:escape_only}s, \"Received Event\":%{private, location:escape_only}s, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x3Au);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v30.__r_.__value_.__l.__data_);
    }

    abort_report_np();
    __break(1u);
  }
}

void sub_241A78854(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  void *v22;

  _Unwind_Resume(a1);
}

void CLMicroLocationStateMachine::EventHandlerWrapper<CLMicroLocationLoiManager,CLMiLoLoiManagerReceivedRelatedLoisEvent,&CLMicroLocationLoiManager::RelatedLois>::~EventHandlerWrapper(CLMacAddress *a1, unint64_t a2)
{
  CLMacAddress::newFromUint64(a1, a2);
  JUMPOUT(0x2426A04D4);
}

void CLMicroLocationStateMachine::EventHandlerWrapper<CLMicroLocationLoiManager,CLMiLoLoiManagerFailedToFetchRelatedLois,&CLMicroLocationLoiManager::FailureToFetchRelatedLois>::stateFunction(CLMicroLocationStateMachine::EventBase *lpsrc@<X2>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  CLMicroLocationLoiManager *v5;
  const CLMiLoLoiManagerFailedToFetchRelatedLois *v6;
  NSObject *v7;
  uint64_t v8;
  __int128 v9;
  int v10;
  std::string::size_type v11;
  std::string *v12;
  std::string *p_p;
  NSObject *v14;
  uint64_t v15;
  __int128 v16;
  int v17;
  std::string::size_type v18;
  std::string *v19;
  std::string *v20;
  NSObject *v21;
  uint64_t v22;
  __int128 v23;
  int v24;
  std::string::size_type v25;
  std::string *v26;
  std::string *v27;
  CLMicroLocationStateMachine::EventBase *v28;
  std::string __p;
  std::string v30;
  uint8_t buf[4];
  int v32;
  __int16 v33;
  const char *v34;
  __int16 v35;
  std::string *v36;
  __int16 v37;
  std::string *v38;
  __int16 v39;
  const char *v40;
  __int16 v41;
  const char *v42;
  uint64_t v43;

  v43 = *MEMORY[0x24BDAC8D0];
  if (a2)
    v5 = (CLMicroLocationLoiManager *)(a2 - 8);
  else
    v5 = 0;
  if (lpsrc
  {
    CLMicroLocationLoiManager::FailureToFetchRelatedLois(v5, v6, a3);
  }
  else
  {
    v28 = lpsrc;
    _CLLogObjectForCategory_MicroLocation_Default();
    v7 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_FAULT))
    {
      v8 = *((_QWORD *)v5 + 2);
      if (*(char *)(v8 + 31) < 0)
      {
        std::string::__init_copy_ctor_external(&v30, *(const std::string::value_type **)(v8 + 8), *(_QWORD *)(v8 + 16));
      }
      else
      {
        v9 = *(_OWORD *)(v8 + 8);
        v30.__r_.__value_.__r.__words[2] = *(_QWORD *)(v8 + 24);
        *(_OWORD *)&v30.__r_.__value_.__l.__data_ = v9;
      }
      v10 = SHIBYTE(v30.__r_.__value_.__r.__words[2]);
      v11 = v30.__r_.__value_.__r.__words[0];
      CLMicroLocationStateMachine::EventBase::getEventName(lpsrc, &__p);
      v12 = &v30;
      if (v10 < 0)
        v12 = (std::string *)v11;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_p = &__p;
      else
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      *(_DWORD *)buf = 68290051;
      v32 = 0;
      v33 = 2082;
      v34 = "";
      v35 = 2081;
      v36 = v12;
      v37 = 2081;
      v38 = p_p;
      v39 = 2082;
      v40 = "assert";
      v41 = 2081;
      v42 = "derivedEventData != __null";
      _os_log_impl(&dword_2419D9000, v7, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Received unsupported event in state event handler\", \"State\":%{private, location:escape_only}s, \"Received Event\":%{private, location:escape_only}s, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x3Au);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v30.__r_.__value_.__l.__data_);
    }

    _CLLogObjectForCategory_MicroLocation_Default();
    v14 = objc_claimAutoreleasedReturnValue();
    if (os_signpost_enabled(v14))
    {
      v15 = *((_QWORD *)v5 + 2);
      if (*(char *)(v15 + 31) < 0)
      {
        std::string::__init_copy_ctor_external(&v30, *(const std::string::value_type **)(v15 + 8), *(_QWORD *)(v15 + 16));
      }
      else
      {
        v16 = *(_OWORD *)(v15 + 8);
        v30.__r_.__value_.__r.__words[2] = *(_QWORD *)(v15 + 24);
        *(_OWORD *)&v30.__r_.__value_.__l.__data_ = v16;
      }
      v17 = SHIBYTE(v30.__r_.__value_.__r.__words[2]);
      v18 = v30.__r_.__value_.__r.__words[0];
      CLMicroLocationStateMachine::EventBase::getEventName(lpsrc, &__p);
      v19 = &v30;
      if (v17 < 0)
        v19 = (std::string *)v18;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v20 = &__p;
      else
        v20 = (std::string *)__p.__r_.__value_.__r.__words[0];
      *(_DWORD *)buf = 68290051;
      v32 = 0;
      v33 = 2082;
      v34 = "";
      v35 = 2081;
      v36 = v19;
      v37 = 2081;
      v38 = v20;
      v39 = 2082;
      v40 = "assert";
      v41 = 2081;
      v42 = "derivedEventData != __null";
      _os_signpost_emit_with_name_impl(&dword_2419D9000, v14, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Received unsupported event in state event handler", "{\"msg%{public}.0s\":\"Received unsupported event in state event handler\", \"State\":%{private, location:escape_only}s, \"Received Event\":%{private, location:escape_only}s, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x3Au);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v30.__r_.__value_.__l.__data_);
    }

    _CLLogObjectForCategory_MicroLocation_Default();
    v21 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v21, OS_LOG_TYPE_INFO))
    {
      v22 = *((_QWORD *)v5 + 2);
      if (*(char *)(v22 + 31) < 0)
      {
        std::string::__init_copy_ctor_external(&v30, *(const std::string::value_type **)(v22 + 8), *(_QWORD *)(v22 + 16));
      }
      else
      {
        v23 = *(_OWORD *)(v22 + 8);
        v30.__r_.__value_.__r.__words[2] = *(_QWORD *)(v22 + 24);
        *(_OWORD *)&v30.__r_.__value_.__l.__data_ = v23;
      }
      v24 = SHIBYTE(v30.__r_.__value_.__r.__words[2]);
      v25 = v30.__r_.__value_.__r.__words[0];
      CLMicroLocationStateMachine::EventBase::getEventName(v28, &__p);
      v26 = &v30;
      if (v24 < 0)
        v26 = (std::string *)v25;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v27 = &__p;
      else
        v27 = (std::string *)__p.__r_.__value_.__r.__words[0];
      *(_DWORD *)buf = 68290051;
      v32 = 0;
      v33 = 2082;
      v34 = "";
      v35 = 2081;
      v36 = v26;
      v37 = 2081;
      v38 = v27;
      v39 = 2082;
      v40 = "assert";
      v41 = 2081;
      v42 = "derivedEventData != __null";
      _os_log_impl(&dword_2419D9000, v21, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Received unsupported event in state event handler\", \"State\":%{private, location:escape_only}s, \"Received Event\":%{private, location:escape_only}s, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x3Au);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v30.__r_.__value_.__l.__data_);
    }

    abort_report_np();
    __break(1u);
  }
}

void sub_241A78CE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  void *v22;

  _Unwind_Resume(a1);
}

void CLMicroLocationStateMachine::EventHandlerWrapper<CLMicroLocationLoiManager,CLMiLoLoiManagerFailedToFetchRelatedLois,&CLMicroLocationLoiManager::FailureToFetchRelatedLois>::~EventHandlerWrapper(CLMacAddress *a1, unint64_t a2)
{
  CLMacAddress::newFromUint64(a1, a2);
  JUMPOUT(0x2426A04D4);
}

void CLMicroLocationStateMachine::EventHandlerWrapperWithNoData<CLMicroLocationLoiManager,&CLMicroLocationLoiManager::entryFunctionEnteringCustomLoiState>::stateFunction(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  if (a2)
    v2 = a2 - 8;
  else
    v2 = 0;
  *(_WORD *)(v2 + 506) = 1;
  CLMicroLocationLoiManager::startCustomLoiEntryTimer((id *)v2);
}

void CLMicroLocationStateMachine::EventHandlerWrapperWithNoData<CLMicroLocationLoiManager,&CLMicroLocationLoiManager::entryFunctionEnteringCustomLoiState>::~EventHandlerWrapperWithNoData(CLMacAddress *a1, unint64_t a2)
{
  CLMacAddress::newFromUint64(a1, a2);
  JUMPOUT(0x2426A04D4);
}

void CLMicroLocationStateMachine::EventHandlerWrapper<CLMicroLocationLoiManager,CLMiLoLoiManagerEnableCustomLoiEvent,&CLMicroLocationLoiManager::EnableCustomLoiWhileEnabling>::stateFunction(CLMicroLocationStateMachine::EventBase *lpsrc@<X2>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  CLMicroLocationLoiManager *v5;
  const CLMiLoLoiManagerEnableCustomLoiEvent *v6;
  NSObject *v7;
  uint64_t v8;
  __int128 v9;
  int v10;
  std::string::size_type v11;
  std::string *v12;
  std::string *p_p;
  NSObject *v14;
  uint64_t v15;
  __int128 v16;
  int v17;
  std::string::size_type v18;
  std::string *v19;
  std::string *v20;
  NSObject *v21;
  uint64_t v22;
  __int128 v23;
  int v24;
  std::string::size_type v25;
  std::string *v26;
  std::string *v27;
  CLMicroLocationStateMachine::EventBase *v28;
  std::string __p;
  std::string v30;
  uint8_t buf[4];
  int v32;
  __int16 v33;
  const char *v34;
  __int16 v35;
  std::string *v36;
  __int16 v37;
  std::string *v38;
  __int16 v39;
  const char *v40;
  __int16 v41;
  const char *v42;
  uint64_t v43;

  v43 = *MEMORY[0x24BDAC8D0];
  if (a2)
    v5 = (CLMicroLocationLoiManager *)(a2 - 8);
  else
    v5 = 0;
  if (lpsrc
  {
    CLMicroLocationLoiManager::EnableCustomLoiWhileEnabling(v5, v6, a3);
  }
  else
  {
    v28 = lpsrc;
    _CLLogObjectForCategory_MicroLocation_Default();
    v7 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_FAULT))
    {
      v8 = *((_QWORD *)v5 + 2);
      if (*(char *)(v8 + 31) < 0)
      {
        std::string::__init_copy_ctor_external(&v30, *(const std::string::value_type **)(v8 + 8), *(_QWORD *)(v8 + 16));
      }
      else
      {
        v9 = *(_OWORD *)(v8 + 8);
        v30.__r_.__value_.__r.__words[2] = *(_QWORD *)(v8 + 24);
        *(_OWORD *)&v30.__r_.__value_.__l.__data_ = v9;
      }
      v10 = SHIBYTE(v30.__r_.__value_.__r.__words[2]);
      v11 = v30.__r_.__value_.__r.__words[0];
      CLMicroLocationStateMachine::EventBase::getEventName(lpsrc, &__p);
      v12 = &v30;
      if (v10 < 0)
        v12 = (std::string *)v11;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_p = &__p;
      else
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      *(_DWORD *)buf = 68290051;
      v32 = 0;
      v33 = 2082;
      v34 = "";
      v35 = 2081;
      v36 = v12;
      v37 = 2081;
      v38 = p_p;
      v39 = 2082;
      v40 = "assert";
      v41 = 2081;
      v42 = "derivedEventData != __null";
      _os_log_impl(&dword_2419D9000, v7, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Received unsupported event in state event handler\", \"State\":%{private, location:escape_only}s, \"Received Event\":%{private, location:escape_only}s, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x3Au);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v30.__r_.__value_.__l.__data_);
    }

    _CLLogObjectForCategory_MicroLocation_Default();
    v14 = objc_claimAutoreleasedReturnValue();
    if (os_signpost_enabled(v14))
    {
      v15 = *((_QWORD *)v5 + 2);
      if (*(char *)(v15 + 31) < 0)
      {
        std::string::__init_copy_ctor_external(&v30, *(const std::string::value_type **)(v15 + 8), *(_QWORD *)(v15 + 16));
      }
      else
      {
        v16 = *(_OWORD *)(v15 + 8);
        v30.__r_.__value_.__r.__words[2] = *(_QWORD *)(v15 + 24);
        *(_OWORD *)&v30.__r_.__value_.__l.__data_ = v16;
      }
      v17 = SHIBYTE(v30.__r_.__value_.__r.__words[2]);
      v18 = v30.__r_.__value_.__r.__words[0];
      CLMicroLocationStateMachine::EventBase::getEventName(lpsrc, &__p);
      v19 = &v30;
      if (v17 < 0)
        v19 = (std::string *)v18;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v20 = &__p;
      else
        v20 = (std::string *)__p.__r_.__value_.__r.__words[0];
      *(_DWORD *)buf = 68290051;
      v32 = 0;
      v33 = 2082;
      v34 = "";
      v35 = 2081;
      v36 = v19;
      v37 = 2081;
      v38 = v20;
      v39 = 2082;
      v40 = "assert";
      v41 = 2081;
      v42 = "derivedEventData != __null";
      _os_signpost_emit_with_name_impl(&dword_2419D9000, v14, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Received unsupported event in state event handler", "{\"msg%{public}.0s\":\"Received unsupported event in state event handler\", \"State\":%{private, location:escape_only}s, \"Received Event\":%{private, location:escape_only}s, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x3Au);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v30.__r_.__value_.__l.__data_);
    }

    _CLLogObjectForCategory_MicroLocation_Default();
    v21 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v21, OS_LOG_TYPE_INFO))
    {
      v22 = *((_QWORD *)v5 + 2);
      if (*(char *)(v22 + 31) < 0)
      {
        std::string::__init_copy_ctor_external(&v30, *(const std::string::value_type **)(v22 + 8), *(_QWORD *)(v22 + 16));
      }
      else
      {
        v23 = *(_OWORD *)(v22 + 8);
        v30.__r_.__value_.__r.__words[2] = *(_QWORD *)(v22 + 24);
        *(_OWORD *)&v30.__r_.__value_.__l.__data_ = v23;
      }
      v24 = SHIBYTE(v30.__r_.__value_.__r.__words[2]);
      v25 = v30.__r_.__value_.__r.__words[0];
      CLMicroLocationStateMachine::EventBase::getEventName(v28, &__p);
      v26 = &v30;
      if (v24 < 0)
        v26 = (std::string *)v25;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v27 = &__p;
      else
        v27 = (std::string *)__p.__r_.__value_.__r.__words[0];
      *(_DWORD *)buf = 68290051;
      v32 = 0;
      v33 = 2082;
      v34 = "";
      v35 = 2081;
      v36 = v26;
      v37 = 2081;
      v38 = v27;
      v39 = 2082;
      v40 = "assert";
      v41 = 2081;
      v42 = "derivedEventData != __null";
      _os_log_impl(&dword_2419D9000, v21, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Received unsupported event in state event handler\", \"State\":%{private, location:escape_only}s, \"Received Event\":%{private, location:escape_only}s, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x3Au);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v30.__r_.__value_.__l.__data_);
    }

    abort_report_np();
    __break(1u);
  }
}

void sub_241A791A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  void *v22;

  _Unwind_Resume(a1);
}

void CLMicroLocationStateMachine::EventHandlerWrapper<CLMicroLocationLoiManager,CLMiLoLoiManagerEnableCustomLoiEvent,&CLMicroLocationLoiManager::EnableCustomLoiWhileEnabling>::~EventHandlerWrapper(CLMacAddress *a1, unint64_t a2)
{
  CLMacAddress::newFromUint64(a1, a2);
  JUMPOUT(0x2426A04D4);
}

void CLMicroLocationStateMachine::EventHandlerWrapper<CLMicroLocationLoiManager,CLMiLoLoiManagerGeofenceEntryEvent,&CLMicroLocationLoiManager::CustomLoiEntryWhileEnabling>::stateFunction(CLMicroLocationStateMachine::EventBase *lpsrc@<X2>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  const CLMiLoLoiManagerGeofenceEntryEvent *v6;
  NSObject *v7;
  uint64_t v8;
  __int128 v9;
  int v10;
  std::string::size_type v11;
  std::string *v12;
  std::string *p_p;
  NSObject *v14;
  uint64_t v15;
  __int128 v16;
  int v17;
  std::string::size_type v18;
  std::string *v19;
  std::string *v20;
  NSObject *v21;
  uint64_t v22;
  __int128 v23;
  int v24;
  std::string::size_type v25;
  std::string *v26;
  std::string *v27;
  CLMicroLocationStateMachine::EventBase *v28;
  std::string __p;
  std::string v30;
  uint8_t buf[4];
  int v32;
  __int16 v33;
  const char *v34;
  __int16 v35;
  std::string *v36;
  __int16 v37;
  std::string *v38;
  __int16 v39;
  const char *v40;
  __int16 v41;
  const char *v42;
  uint64_t v43;

  v43 = *MEMORY[0x24BDAC8D0];
  if (a2)
    v5 = a2 - 8;
  else
    v5 = 0;
  if (lpsrc
  {
    CLMicroLocationLoiManager::CustomLoiEntryWhileEnabling((id *)v5, v6, a3);
  }
  else
  {
    v28 = lpsrc;
    _CLLogObjectForCategory_MicroLocation_Default();
    v7 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_FAULT))
    {
      v8 = *(_QWORD *)(v5 + 16);
      if (*(char *)(v8 + 31) < 0)
      {
        std::string::__init_copy_ctor_external(&v30, *(const std::string::value_type **)(v8 + 8), *(_QWORD *)(v8 + 16));
      }
      else
      {
        v9 = *(_OWORD *)(v8 + 8);
        v30.__r_.__value_.__r.__words[2] = *(_QWORD *)(v8 + 24);
        *(_OWORD *)&v30.__r_.__value_.__l.__data_ = v9;
      }
      v10 = SHIBYTE(v30.__r_.__value_.__r.__words[2]);
      v11 = v30.__r_.__value_.__r.__words[0];
      CLMicroLocationStateMachine::EventBase::getEventName(lpsrc, &__p);
      v12 = &v30;
      if (v10 < 0)
        v12 = (std::string *)v11;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_p = &__p;
      else
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      *(_DWORD *)buf = 68290051;
      v32 = 0;
      v33 = 2082;
      v34 = "";
      v35 = 2081;
      v36 = v12;
      v37 = 2081;
      v38 = p_p;
      v39 = 2082;
      v40 = "assert";
      v41 = 2081;
      v42 = "derivedEventData != __null";
      _os_log_impl(&dword_2419D9000, v7, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Received unsupported event in state event handler\", \"State\":%{private, location:escape_only}s, \"Received Event\":%{private, location:escape_only}s, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x3Au);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v30.__r_.__value_.__l.__data_);
    }

    _CLLogObjectForCategory_MicroLocation_Default();
    v14 = objc_claimAutoreleasedReturnValue();
    if (os_signpost_enabled(v14))
    {
      v15 = *(_QWORD *)(v5 + 16);
      if (*(char *)(v15 + 31) < 0)
      {
        std::string::__init_copy_ctor_external(&v30, *(const std::string::value_type **)(v15 + 8), *(_QWORD *)(v15 + 16));
      }
      else
      {
        v16 = *(_OWORD *)(v15 + 8);
        v30.__r_.__value_.__r.__words[2] = *(_QWORD *)(v15 + 24);
        *(_OWORD *)&v30.__r_.__value_.__l.__data_ = v16;
      }
      v17 = SHIBYTE(v30.__r_.__value_.__r.__words[2]);
      v18 = v30.__r_.__value_.__r.__words[0];
      CLMicroLocationStateMachine::EventBase::getEventName(lpsrc, &__p);
      v19 = &v30;
      if (v17 < 0)
        v19 = (std::string *)v18;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v20 = &__p;
      else
        v20 = (std::string *)__p.__r_.__value_.__r.__words[0];
      *(_DWORD *)buf = 68290051;
      v32 = 0;
      v33 = 2082;
      v34 = "";
      v35 = 2081;
      v36 = v19;
      v37 = 2081;
      v38 = v20;
      v39 = 2082;
      v40 = "assert";
      v41 = 2081;
      v42 = "derivedEventData != __null";
      _os_signpost_emit_with_name_impl(&dword_2419D9000, v14, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Received unsupported event in state event handler", "{\"msg%{public}.0s\":\"Received unsupported event in state event handler\", \"State\":%{private, location:escape_only}s, \"Received Event\":%{private, location:escape_only}s, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x3Au);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v30.__r_.__value_.__l.__data_);
    }

    _CLLogObjectForCategory_MicroLocation_Default();
    v21 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v21, OS_LOG_TYPE_INFO))
    {
      v22 = *(_QWORD *)(v5 + 16);
      if (*(char *)(v22 + 31) < 0)
      {
        std::string::__init_copy_ctor_external(&v30, *(const std::string::value_type **)(v22 + 8), *(_QWORD *)(v22 + 16));
      }
      else
      {
        v23 = *(_OWORD *)(v22 + 8);
        v30.__r_.__value_.__r.__words[2] = *(_QWORD *)(v22 + 24);
        *(_OWORD *)&v30.__r_.__value_.__l.__data_ = v23;
      }
      v24 = SHIBYTE(v30.__r_.__value_.__r.__words[2]);
      v25 = v30.__r_.__value_.__r.__words[0];
      CLMicroLocationStateMachine::EventBase::getEventName(v28, &__p);
      v26 = &v30;
      if (v24 < 0)
        v26 = (std::string *)v25;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v27 = &__p;
      else
        v27 = (std::string *)__p.__r_.__value_.__r.__words[0];
      *(_DWORD *)buf = 68290051;
      v32 = 0;
      v33 = 2082;
      v34 = "";
      v35 = 2081;
      v36 = v26;
      v37 = 2081;
      v38 = v27;
      v39 = 2082;
      v40 = "assert";
      v41 = 2081;
      v42 = "derivedEventData != __null";
      _os_log_impl(&dword_2419D9000, v21, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Received unsupported event in state event handler\", \"State\":%{private, location:escape_only}s, \"Received Event\":%{private, location:escape_only}s, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x3Au);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v30.__r_.__value_.__l.__data_);
    }

    abort_report_np();
    __break(1u);
  }
}

void sub_241A79634(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  void *v22;

  _Unwind_Resume(a1);
}

void CLMicroLocationStateMachine::EventHandlerWrapper<CLMicroLocationLoiManager,CLMiLoLoiManagerGeofenceEntryEvent,&CLMicroLocationLoiManager::CustomLoiEntryWhileEnabling>::~EventHandlerWrapper(CLMacAddress *a1, unint64_t a2)
{
  CLMacAddress::newFromUint64(a1, a2);
  JUMPOUT(0x2426A04D4);
}

void CLMicroLocationStateMachine::EventHandlerWrapper<CLMicroLocationLoiManager,CLMiLoLoiManagerGotLocationUpdateEvent,&CLMicroLocationLoiManager::LocationUpdate>::stateFunction(CLMicroLocationStateMachine::EventBase *lpsrc@<X2>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  id *v6;
  NSObject *v7;
  uint64_t v8;
  __int128 v9;
  int v10;
  std::string::size_type v11;
  std::string *v12;
  std::string *p_p;
  NSObject *v14;
  uint64_t v15;
  __int128 v16;
  int v17;
  std::string::size_type v18;
  std::string *v19;
  std::string *v20;
  NSObject *v21;
  uint64_t v22;
  __int128 v23;
  int v24;
  std::string::size_type v25;
  std::string *v26;
  std::string *v27;
  CLMicroLocationStateMachine::EventBase *v28;
  std::string __p;
  std::string v30;
  uint8_t buf[4];
  int v32;
  __int16 v33;
  const char *v34;
  __int16 v35;
  std::string *v36;
  __int16 v37;
  std::string *v38;
  __int16 v39;
  const char *v40;
  __int16 v41;
  const char *v42;
  uint64_t v43;

  v43 = *MEMORY[0x24BDAC8D0];
  if (a2)
    v5 = a2 - 8;
  else
    v5 = 0;
  if (lpsrc
  {
    CLMicroLocationLoiManager::LocationUpdate(v5, v6, a3);
  }
  else
  {
    v28 = lpsrc;
    _CLLogObjectForCategory_MicroLocation_Default();
    v7 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_FAULT))
    {
      v8 = *(_QWORD *)(v5 + 16);
      if (*(char *)(v8 + 31) < 0)
      {
        std::string::__init_copy_ctor_external(&v30, *(const std::string::value_type **)(v8 + 8), *(_QWORD *)(v8 + 16));
      }
      else
      {
        v9 = *(_OWORD *)(v8 + 8);
        v30.__r_.__value_.__r.__words[2] = *(_QWORD *)(v8 + 24);
        *(_OWORD *)&v30.__r_.__value_.__l.__data_ = v9;
      }
      v10 = SHIBYTE(v30.__r_.__value_.__r.__words[2]);
      v11 = v30.__r_.__value_.__r.__words[0];
      CLMicroLocationStateMachine::EventBase::getEventName(lpsrc, &__p);
      v12 = &v30;
      if (v10 < 0)
        v12 = (std::string *)v11;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_p = &__p;
      else
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      *(_DWORD *)buf = 68290051;
      v32 = 0;
      v33 = 2082;
      v34 = "";
      v35 = 2081;
      v36 = v12;
      v37 = 2081;
      v38 = p_p;
      v39 = 2082;
      v40 = "assert";
      v41 = 2081;
      v42 = "derivedEventData != __null";
      _os_log_impl(&dword_2419D9000, v7, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Received unsupported event in state event handler\", \"State\":%{private, location:escape_only}s, \"Received Event\":%{private, location:escape_only}s, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x3Au);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v30.__r_.__value_.__l.__data_);
    }

    _CLLogObjectForCategory_MicroLocation_Default();
    v14 = objc_claimAutoreleasedReturnValue();
    if (os_signpost_enabled(v14))
    {
      v15 = *(_QWORD *)(v5 + 16);
      if (*(char *)(v15 + 31) < 0)
      {
        std::string::__init_copy_ctor_external(&v30, *(const std::string::value_type **)(v15 + 8), *(_QWORD *)(v15 + 16));
      }
      else
      {
        v16 = *(_OWORD *)(v15 + 8);
        v30.__r_.__value_.__r.__words[2] = *(_QWORD *)(v15 + 24);
        *(_OWORD *)&v30.__r_.__value_.__l.__data_ = v16;
      }
      v17 = SHIBYTE(v30.__r_.__value_.__r.__words[2]);
      v18 = v30.__r_.__value_.__r.__words[0];
      CLMicroLocationStateMachine::EventBase::getEventName(lpsrc, &__p);
      v19 = &v30;
      if (v17 < 0)
        v19 = (std::string *)v18;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v20 = &__p;
      else
        v20 = (std::string *)__p.__r_.__value_.__r.__words[0];
      *(_DWORD *)buf = 68290051;
      v32 = 0;
      v33 = 2082;
      v34 = "";
      v35 = 2081;
      v36 = v19;
      v37 = 2081;
      v38 = v20;
      v39 = 2082;
      v40 = "assert";
      v41 = 2081;
      v42 = "derivedEventData != __null";
      _os_signpost_emit_with_name_impl(&dword_2419D9000, v14, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Received unsupported event in state event handler", "{\"msg%{public}.0s\":\"Received unsupported event in state event handler\", \"State\":%{private, location:escape_only}s, \"Received Event\":%{private, location:escape_only}s, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x3Au);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v30.__r_.__value_.__l.__data_);
    }

    _CLLogObjectForCategory_MicroLocation_Default();
    v21 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v21, OS_LOG_TYPE_INFO))
    {
      v22 = *(_QWORD *)(v5 + 16);
      if (*(char *)(v22 + 31) < 0)
      {
        std::string::__init_copy_ctor_external(&v30, *(const std::string::value_type **)(v22 + 8), *(_QWORD *)(v22 + 16));
      }
      else
      {
        v23 = *(_OWORD *)(v22 + 8);
        v30.__r_.__value_.__r.__words[2] = *(_QWORD *)(v22 + 24);
        *(_OWORD *)&v30.__r_.__value_.__l.__data_ = v23;
      }
      v24 = SHIBYTE(v30.__r_.__value_.__r.__words[2]);
      v25 = v30.__r_.__value_.__r.__words[0];
      CLMicroLocationStateMachine::EventBase::getEventName(v28, &__p);
      v26 = &v30;
      if (v24 < 0)
        v26 = (std::string *)v25;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v27 = &__p;
      else
        v27 = (std::string *)__p.__r_.__value_.__r.__words[0];
      *(_DWORD *)buf = 68290051;
      v32 = 0;
      v33 = 2082;
      v34 = "";
      v35 = 2081;
      v36 = v26;
      v37 = 2081;
      v38 = v27;
      v39 = 2082;
      v40 = "assert";
      v41 = 2081;
      v42 = "derivedEventData != __null";
      _os_log_impl(&dword_2419D9000, v21, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Received unsupported event in state event handler\", \"State\":%{private, location:escape_only}s, \"Received Event\":%{private, location:escape_only}s, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x3Au);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v30.__r_.__value_.__l.__data_);
    }

    abort_report_np();
    __break(1u);
  }
}

void sub_241A79AC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  void *v22;

  _Unwind_Resume(a1);
}

void CLMicroLocationStateMachine::EventHandlerWrapper<CLMicroLocationLoiManager,CLMiLoLoiManagerGotLocationUpdateEvent,&CLMicroLocationLoiManager::LocationUpdate>::~EventHandlerWrapper(CLMacAddress *a1, unint64_t a2)
{
  CLMacAddress::newFromUint64(a1, a2);
  JUMPOUT(0x2426A04D4);
}

void CLMicroLocationStateMachine::EventHandlerWrapper<CLMicroLocationLoiManager,CLMiLoLoiManagerFailedToGetLocationUpdateEvent,&CLMicroLocationLoiManager::FailureToGetLocationUpdate>::stateFunction(CLMicroLocationStateMachine::EventBase *lpsrc@<X2>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  CLMicroLocationLoiManager *v5;
  const CLMiLoLoiManagerFailedToGetLocationUpdateEvent *v6;
  NSObject *v7;
  uint64_t v8;
  __int128 v9;
  int v10;
  std::string::size_type v11;
  std::string *v12;
  std::string *p_p;
  NSObject *v14;
  uint64_t v15;
  __int128 v16;
  int v17;
  std::string::size_type v18;
  std::string *v19;
  std::string *v20;
  NSObject *v21;
  uint64_t v22;
  __int128 v23;
  int v24;
  std::string::size_type v25;
  std::string *v26;
  std::string *v27;
  CLMicroLocationStateMachine::EventBase *v28;
  std::string __p;
  std::string v30;
  uint8_t buf[4];
  int v32;
  __int16 v33;
  const char *v34;
  __int16 v35;
  std::string *v36;
  __int16 v37;
  std::string *v38;
  __int16 v39;
  const char *v40;
  __int16 v41;
  const char *v42;
  uint64_t v43;

  v43 = *MEMORY[0x24BDAC8D0];
  if (a2)
    v5 = (CLMicroLocationLoiManager *)(a2 - 8);
  else
    v5 = 0;
  if (lpsrc
  {
    CLMicroLocationLoiManager::FailureToGetLocationUpdate(v5, v6, a3);
  }
  else
  {
    v28 = lpsrc;
    _CLLogObjectForCategory_MicroLocation_Default();
    v7 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_FAULT))
    {
      v8 = *((_QWORD *)v5 + 2);
      if (*(char *)(v8 + 31) < 0)
      {
        std::string::__init_copy_ctor_external(&v30, *(const std::string::value_type **)(v8 + 8), *(_QWORD *)(v8 + 16));
      }
      else
      {
        v9 = *(_OWORD *)(v8 + 8);
        v30.__r_.__value_.__r.__words[2] = *(_QWORD *)(v8 + 24);
        *(_OWORD *)&v30.__r_.__value_.__l.__data_ = v9;
      }
      v10 = SHIBYTE(v30.__r_.__value_.__r.__words[2]);
      v11 = v30.__r_.__value_.__r.__words[0];
      CLMicroLocationStateMachine::EventBase::getEventName(lpsrc, &__p);
      v12 = &v30;
      if (v10 < 0)
        v12 = (std::string *)v11;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_p = &__p;
      else
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      *(_DWORD *)buf = 68290051;
      v32 = 0;
      v33 = 2082;
      v34 = "";
      v35 = 2081;
      v36 = v12;
      v37 = 2081;
      v38 = p_p;
      v39 = 2082;
      v40 = "assert";
      v41 = 2081;
      v42 = "derivedEventData != __null";
      _os_log_impl(&dword_2419D9000, v7, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Received unsupported event in state event handler\", \"State\":%{private, location:escape_only}s, \"Received Event\":%{private, location:escape_only}s, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x3Au);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v30.__r_.__value_.__l.__data_);
    }

    _CLLogObjectForCategory_MicroLocation_Default();
    v14 = objc_claimAutoreleasedReturnValue();
    if (os_signpost_enabled(v14))
    {
      v15 = *((_QWORD *)v5 + 2);
      if (*(char *)(v15 + 31) < 0)
      {
        std::string::__init_copy_ctor_external(&v30, *(const std::string::value_type **)(v15 + 8), *(_QWORD *)(v15 + 16));
      }
      else
      {
        v16 = *(_OWORD *)(v15 + 8);
        v30.__r_.__value_.__r.__words[2] = *(_QWORD *)(v15 + 24);
        *(_OWORD *)&v30.__r_.__value_.__l.__data_ = v16;
      }
      v17 = SHIBYTE(v30.__r_.__value_.__r.__words[2]);
      v18 = v30.__r_.__value_.__r.__words[0];
      CLMicroLocationStateMachine::EventBase::getEventName(lpsrc, &__p);
      v19 = &v30;
      if (v17 < 0)
        v19 = (std::string *)v18;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v20 = &__p;
      else
        v20 = (std::string *)__p.__r_.__value_.__r.__words[0];
      *(_DWORD *)buf = 68290051;
      v32 = 0;
      v33 = 2082;
      v34 = "";
      v35 = 2081;
      v36 = v19;
      v37 = 2081;
      v38 = v20;
      v39 = 2082;
      v40 = "assert";
      v41 = 2081;
      v42 = "derivedEventData != __null";
      _os_signpost_emit_with_name_impl(&dword_2419D9000, v14, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Received unsupported event in state event handler", "{\"msg%{public}.0s\":\"Received unsupported event in state event handler\", \"State\":%{private, location:escape_only}s, \"Received Event\":%{private, location:escape_only}s, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x3Au);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v30.__r_.__value_.__l.__data_);
    }

    _CLLogObjectForCategory_MicroLocation_Default();
    v21 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v21, OS_LOG_TYPE_INFO))
    {
      v22 = *((_QWORD *)v5 + 2);
      if (*(char *)(v22 + 31) < 0)
      {
        std::string::__init_copy_ctor_external(&v30, *(const std::string::value_type **)(v22 + 8), *(_QWORD *)(v22 + 16));
      }
      else
      {
        v23 = *(_OWORD *)(v22 + 8);
        v30.__r_.__value_.__r.__words[2] = *(_QWORD *)(v22 + 24);
        *(_OWORD *)&v30.__r_.__value_.__l.__data_ = v23;
      }
      v24 = SHIBYTE(v30.__r_.__value_.__r.__words[2]);
      v25 = v30.__r_.__value_.__r.__words[0];
      CLMicroLocationStateMachine::EventBase::getEventName(v28, &__p);
      v26 = &v30;
      if (v24 < 0)
        v26 = (std::string *)v25;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v27 = &__p;
      else
        v27 = (std::string *)__p.__r_.__value_.__r.__words[0];
      *(_DWORD *)buf = 68290051;
      v32 = 0;
      v33 = 2082;
      v34 = "";
      v35 = 2081;
      v36 = v26;
      v37 = 2081;
      v38 = v27;
      v39 = 2082;
      v40 = "assert";
      v41 = 2081;
      v42 = "derivedEventData != __null";
      _os_log_impl(&dword_2419D9000, v21, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Received unsupported event in state event handler\", \"State\":%{private, location:escape_only}s, \"Received Event\":%{private, location:escape_only}s, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x3Au);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v30.__r_.__value_.__l.__data_);
    }

    abort_report_np();
    __break(1u);
  }
}

void sub_241A79F4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  void *v22;

  _Unwind_Resume(a1);
}

void CLMicroLocationStateMachine::EventHandlerWrapper<CLMicroLocationLoiManager,CLMiLoLoiManagerFailedToGetLocationUpdateEvent,&CLMicroLocationLoiManager::FailureToGetLocationUpdate>::~EventHandlerWrapper(CLMacAddress *a1, unint64_t a2)
{
  CLMacAddress::newFromUint64(a1, a2);
  JUMPOUT(0x2426A04D4);
}

void CLMicroLocationStateMachine::EventHandlerWrapper<CLMicroLocationLoiManager,CLMiLoLoiManagerStartedActivatingGeofenceEvent,&CLMicroLocationLoiManager::GeofenceActivationStarted>::stateFunction(CLMicroLocationStateMachine::EventBase *lpsrc@<X2>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  CLMicroLocationLoiManager *v5;
  const CLMiLoLoiManagerStartedActivatingGeofenceEvent *v6;
  NSObject *v7;
  uint64_t v8;
  __int128 v9;
  int v10;
  std::string::size_type v11;
  std::string *v12;
  std::string *p_p;
  NSObject *v14;
  uint64_t v15;
  __int128 v16;
  int v17;
  std::string::size_type v18;
  std::string *v19;
  std::string *v20;
  NSObject *v21;
  uint64_t v22;
  __int128 v23;
  int v24;
  std::string::size_type v25;
  std::string *v26;
  std::string *v27;
  CLMicroLocationStateMachine::EventBase *v28;
  std::string __p;
  std::string v30;
  uint8_t buf[4];
  int v32;
  __int16 v33;
  const char *v34;
  __int16 v35;
  std::string *v36;
  __int16 v37;
  std::string *v38;
  __int16 v39;
  const char *v40;
  __int16 v41;
  const char *v42;
  uint64_t v43;

  v43 = *MEMORY[0x24BDAC8D0];
  if (a2)
    v5 = (CLMicroLocationLoiManager *)(a2 - 8);
  else
    v5 = 0;
  if (lpsrc
  {
    CLMicroLocationLoiManager::GeofenceActivationStarted(v5, v6, a3);
  }
  else
  {
    v28 = lpsrc;
    _CLLogObjectForCategory_MicroLocation_Default();
    v7 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_FAULT))
    {
      v8 = *((_QWORD *)v5 + 2);
      if (*(char *)(v8 + 31) < 0)
      {
        std::string::__init_copy_ctor_external(&v30, *(const std::string::value_type **)(v8 + 8), *(_QWORD *)(v8 + 16));
      }
      else
      {
        v9 = *(_OWORD *)(v8 + 8);
        v30.__r_.__value_.__r.__words[2] = *(_QWORD *)(v8 + 24);
        *(_OWORD *)&v30.__r_.__value_.__l.__data_ = v9;
      }
      v10 = SHIBYTE(v30.__r_.__value_.__r.__words[2]);
      v11 = v30.__r_.__value_.__r.__words[0];
      CLMicroLocationStateMachine::EventBase::getEventName(lpsrc, &__p);
      v12 = &v30;
      if (v10 < 0)
        v12 = (std::string *)v11;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_p = &__p;
      else
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      *(_DWORD *)buf = 68290051;
      v32 = 0;
      v33 = 2082;
      v34 = "";
      v35 = 2081;
      v36 = v12;
      v37 = 2081;
      v38 = p_p;
      v39 = 2082;
      v40 = "assert";
      v41 = 2081;
      v42 = "derivedEventData != __null";
      _os_log_impl(&dword_2419D9000, v7, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Received unsupported event in state event handler\", \"State\":%{private, location:escape_only}s, \"Received Event\":%{private, location:escape_only}s, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x3Au);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v30.__r_.__value_.__l.__data_);
    }

    _CLLogObjectForCategory_MicroLocation_Default();
    v14 = objc_claimAutoreleasedReturnValue();
    if (os_signpost_enabled(v14))
    {
      v15 = *((_QWORD *)v5 + 2);
      if (*(char *)(v15 + 31) < 0)
      {
        std::string::__init_copy_ctor_external(&v30, *(const std::string::value_type **)(v15 + 8), *(_QWORD *)(v15 + 16));
      }
      else
      {
        v16 = *(_OWORD *)(v15 + 8);
        v30.__r_.__value_.__r.__words[2] = *(_QWORD *)(v15 + 24);
        *(_OWORD *)&v30.__r_.__value_.__l.__data_ = v16;
      }
      v17 = SHIBYTE(v30.__r_.__value_.__r.__words[2]);
      v18 = v30.__r_.__value_.__r.__words[0];
      CLMicroLocationStateMachine::EventBase::getEventName(lpsrc, &__p);
      v19 = &v30;
      if (v17 < 0)
        v19 = (std::string *)v18;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v20 = &__p;
      else
        v20 = (std::string *)__p.__r_.__value_.__r.__words[0];
      *(_DWORD *)buf = 68290051;
      v32 = 0;
      v33 = 2082;
      v34 = "";
      v35 = 2081;
      v36 = v19;
      v37 = 2081;
      v38 = v20;
      v39 = 2082;
      v40 = "assert";
      v41 = 2081;
      v42 = "derivedEventData != __null";
      _os_signpost_emit_with_name_impl(&dword_2419D9000, v14, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Received unsupported event in state event handler", "{\"msg%{public}.0s\":\"Received unsupported event in state event handler\", \"State\":%{private, location:escape_only}s, \"Received Event\":%{private, location:escape_only}s, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x3Au);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v30.__r_.__value_.__l.__data_);
    }

    _CLLogObjectForCategory_MicroLocation_Default();
    v21 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v21, OS_LOG_TYPE_INFO))
    {
      v22 = *((_QWORD *)v5 + 2);
      if (*(char *)(v22 + 31) < 0)
      {
        std::string::__init_copy_ctor_external(&v30, *(const std::string::value_type **)(v22 + 8), *(_QWORD *)(v22 + 16));
      }
      else
      {
        v23 = *(_OWORD *)(v22 + 8);
        v30.__r_.__value_.__r.__words[2] = *(_QWORD *)(v22 + 24);
        *(_OWORD *)&v30.__r_.__value_.__l.__data_ = v23;
      }
      v24 = SHIBYTE(v30.__r_.__value_.__r.__words[2]);
      v25 = v30.__r_.__value_.__r.__words[0];
      CLMicroLocationStateMachine::EventBase::getEventName(v28, &__p);
      v26 = &v30;
      if (v24 < 0)
        v26 = (std::string *)v25;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v27 = &__p;
      else
        v27 = (std::string *)__p.__r_.__value_.__r.__words[0];
      *(_DWORD *)buf = 68290051;
      v32 = 0;
      v33 = 2082;
      v34 = "";
      v35 = 2081;
      v36 = v26;
      v37 = 2081;
      v38 = v27;
      v39 = 2082;
      v40 = "assert";
      v41 = 2081;
      v42 = "derivedEventData != __null";
      _os_log_impl(&dword_2419D9000, v21, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Received unsupported event in state event handler\", \"State\":%{private, location:escape_only}s, \"Received Event\":%{private, location:escape_only}s, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x3Au);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v30.__r_.__value_.__l.__data_);
    }

    abort_report_np();
    __break(1u);
  }
}

void sub_241A7A3D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  void *v22;

  _Unwind_Resume(a1);
}

void CLMicroLocationStateMachine::EventHandlerWrapper<CLMicroLocationLoiManager,CLMiLoLoiManagerStartedActivatingGeofenceEvent,&CLMicroLocationLoiManager::GeofenceActivationStarted>::~EventHandlerWrapper(CLMacAddress *a1, unint64_t a2)
{
  CLMacAddress::newFromUint64(a1, a2);
  JUMPOUT(0x2426A04D4);
}

void CLMicroLocationStateMachine::EventHandlerWrapper<CLMicroLocationLoiManager,CLMiLoLoiManagerFailedToSetGeofenceEvent,&CLMicroLocationLoiManager::FailureToActivateGeofenceAtCurrentLocation>::stateFunction(CLMicroLocationStateMachine::EventBase *lpsrc@<X2>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  CLMicroLocationLoiManager *v5;
  const CLMiLoLoiManagerFailedToSetGeofenceEvent *v6;
  NSObject *v7;
  uint64_t v8;
  __int128 v9;
  int v10;
  std::string::size_type v11;
  std::string *v12;
  std::string *p_p;
  NSObject *v14;
  uint64_t v15;
  __int128 v16;
  int v17;
  std::string::size_type v18;
  std::string *v19;
  std::string *v20;
  NSObject *v21;
  uint64_t v22;
  __int128 v23;
  int v24;
  std::string::size_type v25;
  std::string *v26;
  std::string *v27;
  CLMicroLocationStateMachine::EventBase *v28;
  std::string __p;
  std::string v30;
  uint8_t buf[4];
  int v32;
  __int16 v33;
  const char *v34;
  __int16 v35;
  std::string *v36;
  __int16 v37;
  std::string *v38;
  __int16 v39;
  const char *v40;
  __int16 v41;
  const char *v42;
  uint64_t v43;

  v43 = *MEMORY[0x24BDAC8D0];
  if (a2)
    v5 = (CLMicroLocationLoiManager *)(a2 - 8);
  else
    v5 = 0;
  if (lpsrc
  {
    CLMicroLocationLoiManager::FailureToActivateGeofenceAtCurrentLocation(v5, v6, a3);
  }
  else
  {
    v28 = lpsrc;
    _CLLogObjectForCategory_MicroLocation_Default();
    v7 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_FAULT))
    {
      v8 = *((_QWORD *)v5 + 2);
      if (*(char *)(v8 + 31) < 0)
      {
        std::string::__init_copy_ctor_external(&v30, *(const std::string::value_type **)(v8 + 8), *(_QWORD *)(v8 + 16));
      }
      else
      {
        v9 = *(_OWORD *)(v8 + 8);
        v30.__r_.__value_.__r.__words[2] = *(_QWORD *)(v8 + 24);
        *(_OWORD *)&v30.__r_.__value_.__l.__data_ = v9;
      }
      v10 = SHIBYTE(v30.__r_.__value_.__r.__words[2]);
      v11 = v30.__r_.__value_.__r.__words[0];
      CLMicroLocationStateMachine::EventBase::getEventName(lpsrc, &__p);
      v12 = &v30;
      if (v10 < 0)
        v12 = (std::string *)v11;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_p = &__p;
      else
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      *(_DWORD *)buf = 68290051;
      v32 = 0;
      v33 = 2082;
      v34 = "";
      v35 = 2081;
      v36 = v12;
      v37 = 2081;
      v38 = p_p;
      v39 = 2082;
      v40 = "assert";
      v41 = 2081;
      v42 = "derivedEventData != __null";
      _os_log_impl(&dword_2419D9000, v7, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Received unsupported event in state event handler\", \"State\":%{private, location:escape_only}s, \"Received Event\":%{private, location:escape_only}s, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x3Au);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v30.__r_.__value_.__l.__data_);
    }

    _CLLogObjectForCategory_MicroLocation_Default();
    v14 = objc_claimAutoreleasedReturnValue();
    if (os_signpost_enabled(v14))
    {
      v15 = *((_QWORD *)v5 + 2);
      if (*(char *)(v15 + 31) < 0)
      {
        std::string::__init_copy_ctor_external(&v30, *(const std::string::value_type **)(v15 + 8), *(_QWORD *)(v15 + 16));
      }
      else
      {
        v16 = *(_OWORD *)(v15 + 8);
        v30.__r_.__value_.__r.__words[2] = *(_QWORD *)(v15 + 24);
        *(_OWORD *)&v30.__r_.__value_.__l.__data_ = v16;
      }
      v17 = SHIBYTE(v30.__r_.__value_.__r.__words[2]);
      v18 = v30.__r_.__value_.__r.__words[0];
      CLMicroLocationStateMachine::EventBase::getEventName(lpsrc, &__p);
      v19 = &v30;
      if (v17 < 0)
        v19 = (std::string *)v18;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v20 = &__p;
      else
        v20 = (std::string *)__p.__r_.__value_.__r.__words[0];
      *(_DWORD *)buf = 68290051;
      v32 = 0;
      v33 = 2082;
      v34 = "";
      v35 = 2081;
      v36 = v19;
      v37 = 2081;
      v38 = v20;
      v39 = 2082;
      v40 = "assert";
      v41 = 2081;
      v42 = "derivedEventData != __null";
      _os_signpost_emit_with_name_impl(&dword_2419D9000, v14, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Received unsupported event in state event handler", "{\"msg%{public}.0s\":\"Received unsupported event in state event handler\", \"State\":%{private, location:escape_only}s, \"Received Event\":%{private, location:escape_only}s, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x3Au);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v30.__r_.__value_.__l.__data_);
    }

    _CLLogObjectForCategory_MicroLocation_Default();
    v21 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v21, OS_LOG_TYPE_INFO))
    {
      v22 = *((_QWORD *)v5 + 2);
      if (*(char *)(v22 + 31) < 0)
      {
        std::string::__init_copy_ctor_external(&v30, *(const std::string::value_type **)(v22 + 8), *(_QWORD *)(v22 + 16));
      }
      else
      {
        v23 = *(_OWORD *)(v22 + 8);
        v30.__r_.__value_.__r.__words[2] = *(_QWORD *)(v22 + 24);
        *(_OWORD *)&v30.__r_.__value_.__l.__data_ = v23;
      }
      v24 = SHIBYTE(v30.__r_.__value_.__r.__words[2]);
      v25 = v30.__r_.__value_.__r.__words[0];
      CLMicroLocationStateMachine::EventBase::getEventName(v28, &__p);
      v26 = &v30;
      if (v24 < 0)
        v26 = (std::string *)v25;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v27 = &__p;
      else
        v27 = (std::string *)__p.__r_.__value_.__r.__words[0];
      *(_DWORD *)buf = 68290051;
      v32 = 0;
      v33 = 2082;
      v34 = "";
      v35 = 2081;
      v36 = v26;
      v37 = 2081;
      v38 = v27;
      v39 = 2082;
      v40 = "assert";
      v41 = 2081;
      v42 = "derivedEventData != __null";
      _os_log_impl(&dword_2419D9000, v21, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Received unsupported event in state event handler\", \"State\":%{private, location:escape_only}s, \"Received Event\":%{private, location:escape_only}s, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x3Au);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v30.__r_.__value_.__l.__data_);
    }

    abort_report_np();
    __break(1u);
  }
}

void sub_241A7A864(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  void *v22;

  _Unwind_Resume(a1);
}

void CLMicroLocationStateMachine::EventHandlerWrapper<CLMicroLocationLoiManager,CLMiLoLoiManagerFailedToSetGeofenceEvent,&CLMicroLocationLoiManager::FailureToActivateGeofenceAtCurrentLocation>::~EventHandlerWrapper(CLMacAddress *a1, unint64_t a2)
{
  CLMacAddress::newFromUint64(a1, a2);
  JUMPOUT(0x2426A04D4);
}

void CLMicroLocationStateMachine::EventHandlerWrapper<CLMicroLocationLoiManager,CLMiLoLoiManagerEnteringCustomLoiTimeout,&CLMicroLocationLoiManager::EnteringCustomLoiTimeoutHandler>::stateFunction(CLMicroLocationStateMachine::EventBase *lpsrc@<X2>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  CLMicroLocationLoiManager *v5;
  NSObject *v6;
  uint64_t v7;
  __int128 v8;
  int v9;
  std::string::size_type v10;
  std::string *v11;
  std::string *p_p;
  NSObject *v13;
  uint64_t v14;
  __int128 v15;
  int v16;
  std::string::size_type v17;
  std::string *v18;
  std::string *v19;
  NSObject *v20;
  uint64_t v21;
  __int128 v22;
  int v23;
  std::string::size_type v24;
  std::string *v25;
  std::string *v26;
  std::string __p;
  std::string v28;
  uint8_t buf[4];
  int v30;
  __int16 v31;
  const char *v32;
  __int16 v33;
  std::string *v34;
  __int16 v35;
  std::string *v36;
  __int16 v37;
  const char *v38;
  __int16 v39;
  const char *v40;
  uint64_t v41;

  v41 = *MEMORY[0x24BDAC8D0];
  if (a2)
    v5 = (CLMicroLocationLoiManager *)(a2 - 8);
  else
    v5 = 0;
  if (lpsrc
  {
    CLMicroLocationLoiManager::EnteringCustomLoiTimeoutHandler(v5, a3);
  }
  else
  {
    _CLLogObjectForCategory_MicroLocation_Default();
    v6 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_FAULT))
    {
      v7 = *((_QWORD *)v5 + 2);
      if (*(char *)(v7 + 31) < 0)
      {
        std::string::__init_copy_ctor_external(&v28, *(const std::string::value_type **)(v7 + 8), *(_QWORD *)(v7 + 16));
      }
      else
      {
        v8 = *(_OWORD *)(v7 + 8);
        v28.__r_.__value_.__r.__words[2] = *(_QWORD *)(v7 + 24);
        *(_OWORD *)&v28.__r_.__value_.__l.__data_ = v8;
      }
      v9 = SHIBYTE(v28.__r_.__value_.__r.__words[2]);
      v10 = v28.__r_.__value_.__r.__words[0];
      CLMicroLocationStateMachine::EventBase::getEventName(lpsrc, &__p);
      v11 = &v28;
      if (v9 < 0)
        v11 = (std::string *)v10;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_p = &__p;
      else
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      *(_DWORD *)buf = 68290051;
      v30 = 0;
      v31 = 2082;
      v32 = "";
      v33 = 2081;
      v34 = v11;
      v35 = 2081;
      v36 = p_p;
      v37 = 2082;
      v38 = "assert";
      v39 = 2081;
      v40 = "derivedEventData != __null";
      _os_log_impl(&dword_2419D9000, v6, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Received unsupported event in state event handler\", \"State\":%{private, location:escape_only}s, \"Received Event\":%{private, location:escape_only}s, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x3Au);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v28.__r_.__value_.__l.__data_);
    }

    _CLLogObjectForCategory_MicroLocation_Default();
    v13 = objc_claimAutoreleasedReturnValue();
    if (os_signpost_enabled(v13))
    {
      v14 = *((_QWORD *)v5 + 2);
      if (*(char *)(v14 + 31) < 0)
      {
        std::string::__init_copy_ctor_external(&v28, *(const std::string::value_type **)(v14 + 8), *(_QWORD *)(v14 + 16));
      }
      else
      {
        v15 = *(_OWORD *)(v14 + 8);
        v28.__r_.__value_.__r.__words[2] = *(_QWORD *)(v14 + 24);
        *(_OWORD *)&v28.__r_.__value_.__l.__data_ = v15;
      }
      v16 = SHIBYTE(v28.__r_.__value_.__r.__words[2]);
      v17 = v28.__r_.__value_.__r.__words[0];
      CLMicroLocationStateMachine::EventBase::getEventName(lpsrc, &__p);
      v18 = &v28;
      if (v16 < 0)
        v18 = (std::string *)v17;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v19 = &__p;
      else
        v19 = (std::string *)__p.__r_.__value_.__r.__words[0];
      *(_DWORD *)buf = 68290051;
      v30 = 0;
      v31 = 2082;
      v32 = "";
      v33 = 2081;
      v34 = v18;
      v35 = 2081;
      v36 = v19;
      v37 = 2082;
      v38 = "assert";
      v39 = 2081;
      v40 = "derivedEventData != __null";
      _os_signpost_emit_with_name_impl(&dword_2419D9000, v13, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Received unsupported event in state event handler", "{\"msg%{public}.0s\":\"Received unsupported event in state event handler\", \"State\":%{private, location:escape_only}s, \"Received Event\":%{private, location:escape_only}s, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x3Au);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v28.__r_.__value_.__l.__data_);
    }

    _CLLogObjectForCategory_MicroLocation_Default();
    v20 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v20, OS_LOG_TYPE_INFO))
    {
      v21 = *((_QWORD *)v5 + 2);
      if (*(char *)(v21 + 31) < 0)
      {
        std::string::__init_copy_ctor_external(&v28, *(const std::string::value_type **)(v21 + 8), *(_QWORD *)(v21 + 16));
      }
      else
      {
        v22 = *(_OWORD *)(v21 + 8);
        v28.__r_.__value_.__r.__words[2] = *(_QWORD *)(v21 + 24);
        *(_OWORD *)&v28.__r_.__value_.__l.__data_ = v22;
      }
      v23 = SHIBYTE(v28.__r_.__value_.__r.__words[2]);
      v24 = v28.__r_.__value_.__r.__words[0];
      CLMicroLocationStateMachine::EventBase::getEventName(lpsrc, &__p);
      v25 = &v28;
      if (v23 < 0)
        v25 = (std::string *)v24;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v26 = &__p;
      else
        v26 = (std::string *)__p.__r_.__value_.__r.__words[0];
      *(_DWORD *)buf = 68290051;
      v30 = 0;
      v31 = 2082;
      v32 = "";
      v33 = 2081;
      v34 = v25;
      v35 = 2081;
      v36 = v26;
      v37 = 2082;
      v38 = "assert";
      v39 = 2081;
      v40 = "derivedEventData != __null";
      _os_log_impl(&dword_2419D9000, v20, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Received unsupported event in state event handler\", \"State\":%{private, location:escape_only}s, \"Received Event\":%{private, location:escape_only}s, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x3Au);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v28.__r_.__value_.__l.__data_);
    }

    abort_report_np();
    __break(1u);
  }
}

void sub_241A7ACEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  void *v22;

  _Unwind_Resume(a1);
}

void CLMicroLocationStateMachine::EventHandlerWrapper<CLMicroLocationLoiManager,CLMiLoLoiManagerEnteringCustomLoiTimeout,&CLMicroLocationLoiManager::EnteringCustomLoiTimeoutHandler>::~EventHandlerWrapper(CLMacAddress *a1, unint64_t a2)
{
  CLMacAddress::newFromUint64(a1, a2);
  JUMPOUT(0x2426A04D4);
}

void CLMicroLocationStateMachine::EventHandlerWrapperWithNoData<CLMicroLocationLoiManager,&CLMicroLocationLoiManager::exitFunctionEnteringCustomLoiState>::stateFunction(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  void *v3;

  if (a2)
    v2 = a2 - 8;
  else
    v2 = 0;
  objc_msgSend(*(id *)(v2 + 520), "invalidate");
  v3 = *(void **)(v2 + 520);
  *(_QWORD *)(v2 + 520) = 0;

}

void CLMicroLocationStateMachine::EventHandlerWrapperWithNoData<CLMicroLocationLoiManager,&CLMicroLocationLoiManager::exitFunctionEnteringCustomLoiState>::~EventHandlerWrapperWithNoData(CLMacAddress *a1, unint64_t a2)
{
  CLMacAddress::newFromUint64(a1, a2);
  JUMPOUT(0x2426A04D4);
}

void ___ZL45_CLLogObjectForCategory_MicroLocation_Defaultv_block_invoke_41()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.MicroLocation", "MicroLocation");
  v1 = (void *)logObject_MicroLocation_Default;
  logObject_MicroLocation_Default = (uint64_t)v0;

}

void CLMiLoLoiManagerRefreshLocationOnEvent::CLMiLoLoiManagerRefreshLocationOnEvent(CLMiLoLoiManagerRefreshLocationOnEvent *this)
{
  _QWORD *v2;

  *(_QWORD *)this = off_2511D4DA0;
  v2 = std::string::basic_string[abi:ne180100]<0>((_QWORD *)this + 1, "No Name Given");
  *(_QWORD *)this = off_2511D5CA0;
  MEMORY[0x2426A02C4](v2, "Refresh Location on regular interval");
}

void sub_241A7AF1C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  uint64_t v3;
  uint64_t v4;

  v4 = v3;
  *(_QWORD *)v1 = v4;
  if (*(char *)(v1 + 31) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

void sub_241A7AFD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void CLMiLoLoiManagerLoiVisitExitEvent::CLMiLoLoiManagerLoiVisitExitEvent(CLMiLoLoiManagerLoiVisitExitEvent *this, CLVisit *a2)
{
  CLVisit *v4;

  v4 = a2;
  *(_QWORD *)this = off_2511D4DA0;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)this + 1, "No Name Given");
  *(_QWORD *)this = off_2511D5CC0;
  *((_QWORD *)this + 4) = 0;
  objc_storeStrong((id *)this + 4, a2);
  MEMORY[0x2426A02C4]((char *)this + 8, "LOI Visit Exit");

}

void sub_241A7B070(_Unwind_Exception *a1)
{
  void *v1;
  uint64_t v2;
  void **v3;
  uint64_t v4;

  *(_QWORD *)v2 = v4;
  if (*(char *)(v2 + 31) < 0)
    operator delete(*v3);

  _Unwind_Resume(a1);
}

void CLMiLoLoiManagerLoiVisitEntryEvent::CLMiLoLoiManagerLoiVisitEntryEvent(CLMiLoLoiManagerLoiVisitEntryEvent *this, CLVisit *a2)
{
  CLVisit *v4;

  v4 = a2;
  *(_QWORD *)this = off_2511D4DA0;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)this + 1, "No Name Given");
  *(_QWORD *)this = off_2511D5CE0;
  *((_QWORD *)this + 4) = 0;
  objc_storeStrong((id *)this + 4, a2);
  MEMORY[0x2426A02C4]((char *)this + 8, "LOI Visit Entry");

}

void sub_241A7B184(_Unwind_Exception *a1)
{
  void *v1;
  uint64_t v2;
  void **v3;
  uint64_t v4;

  *(_QWORD *)v2 = v4;
  if (*(char *)(v2 + 31) < 0)
    operator delete(*v3);

  _Unwind_Resume(a1);
}

void CLMiLoLoiManagerFailedToFetchPlaceInference::CLMiLoLoiManagerFailedToFetchPlaceInference(CLMiLoLoiManagerFailedToFetchPlaceInference *this)
{
  _QWORD *v2;

  *(_QWORD *)this = off_2511D4DA0;
  v2 = std::string::basic_string[abi:ne180100]<0>((_QWORD *)this + 1, "No Name Given");
  *(_QWORD *)this = off_2511D5D00;
  MEMORY[0x2426A02C4](v2, "Failed To Fetched Place Inference");
}

void sub_241A7B26C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  uint64_t v3;
  uint64_t v4;

  v4 = v3;
  *(_QWORD *)v1 = v4;
  if (*(char *)(v1 + 31) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

uint64_t CLMiLoLoiManagerFetchedPlaceInference::CLMiLoLoiManagerFetchedPlaceInference(uint64_t a1, void *a2)
{
  id v4;

  v4 = a2;
  *(_QWORD *)a1 = off_2511D4DA0;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 8), "No Name Given");
  *(_QWORD *)a1 = &off_2511D5D20;
  *(_QWORD *)(a1 + 32) = 0;
  objc_storeStrong((id *)(a1 + 32), a2);
  MEMORY[0x2426A02C4](a1 + 8, "Fetched Place Inference For Current Location");

  return a1;
}

void sub_241A7B368(_Unwind_Exception *a1)
{
  void *v1;
  uint64_t v2;
  void **v3;
  uint64_t v4;

  *(_QWORD *)v2 = v4;
  if (*(char *)(v2 + 31) < 0)
    operator delete(*v3);

  _Unwind_Resume(a1);
}

void CLMiLoLoiManagerFetchedPlaceInference::~CLMiLoLoiManagerFetchedPlaceInference(id *this)
{
  CLMiLoLoiManagerFetchedPlaceInference::~CLMiLoLoiManagerFetchedPlaceInference(this);
  JUMPOUT(0x2426A04D4);
}

{

  *this = off_2511D4DA0;
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
}

void CLMiLoLoiManagerFailedToFetchLoiForLocationEvent::CLMiLoLoiManagerFailedToFetchLoiForLocationEvent(CLMiLoLoiManagerFailedToFetchLoiForLocationEvent *this)
{
  _QWORD *v2;

  *(_QWORD *)this = off_2511D4DA0;
  v2 = std::string::basic_string[abi:ne180100]<0>((_QWORD *)this + 1, "No Name Given");
  *(_QWORD *)this = off_2511D5D40;
  MEMORY[0x2426A02C4](v2, "Failed to Get LOI Event");
}

void sub_241A7B464(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  uint64_t v3;
  uint64_t v4;

  v4 = v3;
  *(_QWORD *)v1 = v4;
  if (*(char *)(v1 + 31) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

void CLMiLoLoiManagerReceivedLoiForLocationEvent::CLMiLoLoiManagerReceivedLoiForLocationEvent(CLMiLoLoiManagerReceivedLoiForLocationEvent *this, CLMicroLocationLoi *a2)
{
  CLMicroLocationLoi *v4;

  v4 = a2;
  *(_QWORD *)this = off_2511D4DA0;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)this + 1, "No Name Given");
  *(_QWORD *)this = off_2511D5D60;
  *((_QWORD *)this + 4) = 0;
  objc_storeStrong((id *)this + 4, a2);
  MEMORY[0x2426A02C4]((char *)this + 8, "Got LOI Event");

}

void sub_241A7B560(_Unwind_Exception *a1)
{
  void *v1;
  uint64_t v2;
  void **v3;
  uint64_t v4;

  *(_QWORD *)v2 = v4;
  if (*(char *)(v2 + 31) < 0)
    operator delete(*v3);

  _Unwind_Resume(a1);
}

void CLMiLoLoiManagerFailedToFetchRelatedLois::CLMiLoLoiManagerFailedToFetchRelatedLois(CLMiLoLoiManagerFailedToFetchRelatedLois *this)
{
  _QWORD *v2;

  *(_QWORD *)this = off_2511D4DA0;
  v2 = std::string::basic_string[abi:ne180100]<0>((_QWORD *)this + 1, "No Name Given");
  *(_QWORD *)this = off_2511D5D80;
  MEMORY[0x2426A02C4](v2, "Failed to Get Related LOIs");
}

void sub_241A7B648(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  uint64_t v3;
  uint64_t v4;

  v4 = v3;
  *(_QWORD *)v1 = v4;
  if (*(char *)(v1 + 31) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

void CLMiLoLoiManagerReceivedRelatedLoisEvent::~CLMiLoLoiManagerReceivedRelatedLoisEvent(CLMiLoLoiManagerReceivedRelatedLoisEvent *this)
{
  CLMiLoLoiManagerReceivedRelatedLoisEvent::~CLMiLoLoiManagerReceivedRelatedLoisEvent(this);
  JUMPOUT(0x2426A04D4);
}

{
  void *v2;

  *(_QWORD *)this = &off_2511D5DA0;
  v2 = (void *)*((_QWORD *)this + 4);
  if (v2)
  {
    *((_QWORD *)this + 5) = v2;
    operator delete(v2);
  }
  *(_QWORD *)this = off_2511D4DA0;
  if (*((char *)this + 31) < 0)
    operator delete(*((void **)this + 1));
}

void CLMiLoLoiManagerFailedToGetLocationUpdateEvent::CLMiLoLoiManagerFailedToGetLocationUpdateEvent(CLMiLoLoiManagerFailedToGetLocationUpdateEvent *this)
{
  _QWORD *v2;

  *(_QWORD *)this = off_2511D4DA0;
  v2 = std::string::basic_string[abi:ne180100]<0>((_QWORD *)this + 1, "No Name Given");
  *(_QWORD *)this = off_2511D5DC0;
  MEMORY[0x2426A02C4](v2, "Failed To Get Location Update");
}

void sub_241A7B794(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  uint64_t v3;
  uint64_t v4;

  v4 = v3;
  *(_QWORD *)v1 = v4;
  if (*(char *)(v1 + 31) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

void CLMiLoLoiManagerGotLocationUpdateEvent::CLMiLoLoiManagerGotLocationUpdateEvent(CLMiLoLoiManagerGotLocationUpdateEvent *this, CLLocation *a2)
{
  CLLocation *v4;

  v4 = a2;
  *(_QWORD *)this = off_2511D4DA0;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)this + 1, "No Name Given");
  *(_QWORD *)this = &off_2511D5DE0;
  *((_QWORD *)this + 4) = 0;
  objc_storeStrong((id *)this + 4, a2);
  MEMORY[0x2426A02C4]((char *)this + 8, "Got Location Update");

}

void sub_241A7B890(_Unwind_Exception *a1)
{
  void *v1;
  uint64_t v2;
  void **v3;
  uint64_t v4;

  *(_QWORD *)v2 = v4;
  if (*(char *)(v2 + 31) < 0)
    operator delete(*v3);

  _Unwind_Resume(a1);
}

void CLMiLoLoiManagerGotLocationUpdateEvent::~CLMiLoLoiManagerGotLocationUpdateEvent(id *this)
{
  CLMiLoLoiManagerFetchedPlaceInference::~CLMiLoLoiManagerFetchedPlaceInference(this);
  JUMPOUT(0x2426A04D4);
}

void CLMiLoLoiManagerLeechedLocationEvent::~CLMiLoLoiManagerLeechedLocationEvent(id *this)
{
  CLMiLoLoiManagerFetchedPlaceInference::~CLMiLoLoiManagerFetchedPlaceInference(this);
  JUMPOUT(0x2426A04D4);
}

void CLMiLoLoiManagerFailedToSetGeofenceEvent::CLMiLoLoiManagerFailedToSetGeofenceEvent(CLMiLoLoiManagerFailedToSetGeofenceEvent *this)
{
  _QWORD *v2;

  *(_QWORD *)this = off_2511D4DA0;
  v2 = std::string::basic_string[abi:ne180100]<0>((_QWORD *)this + 1, "No Name Given");
  *(_QWORD *)this = off_2511D5E20;
  MEMORY[0x2426A02C4](v2, "Failed To Set Geofence");
}

void sub_241A7B96C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  uint64_t v3;
  uint64_t v4;

  v4 = v3;
  *(_QWORD *)v1 = v4;
  if (*(char *)(v1 + 31) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

void CLMiLoLoiManagerEnteringCustomLoiTimeout::CLMiLoLoiManagerEnteringCustomLoiTimeout(CLMiLoLoiManagerEnteringCustomLoiTimeout *this)
{
  _QWORD *v2;

  *(_QWORD *)this = off_2511D4DA0;
  v2 = std::string::basic_string[abi:ne180100]<0>((_QWORD *)this + 1, "No Name Given");
  *(_QWORD *)this = off_2511D5EA0;
  MEMORY[0x2426A02C4](v2, "Entering Custom LOI Timeout");
}

void sub_241A7BB20(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  uint64_t v3;
  uint64_t v4;

  v4 = v3;
  *(_QWORD *)v1 = v4;
  if (*(char *)(v1 + 31) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

_QWORD *std::vector<boost::uuids::uuid>::__init_with_size[abi:ne180100]<std::__wrap_iter<boost::uuids::uuid const*>,std::__wrap_iter<boost::uuids::uuid const*>>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<boost::uuids::uuid>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_241A7BBEC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t CLMicroLocationLocalizer::localize@<X0>(const CLMicroLocationProto::AssociatedAccessPointInfo *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, CLMicroLocationLocalizationSettings *a4@<X3>, uint64_t a5@<X4>, int a6@<W5>, uint64_t a7@<X8>)
{
  std::string *v10;
  void *v11;
  char v12;
  CLMicroLocationTimeUtils::TimeProfile *v13;
  unint64_t v14;
  unsigned int LocalizerAlgorithm;
  int FingerprintDistanceFunctionType;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  int v21;
  NSObject *v22;
  int v23;
  int v24;
  void *v25;
  _QWORD *v26;
  uint64_t v27;
  int v28;
  CLMicroLocationAlgorithms *v29;
  unsigned __int8 v30;
  _QWORD *v31;
  uint64_t v32;
  NSObject *v33;
  void *v34;
  NSObject *v35;
  uint64_t v36;
  void *v37;
  void *v38;
  __n128 v39;
  unsigned int v40;
  std::string *v41;
  uint64_t v42;
  uint64_t v43;
  void *v45;
  _BYTE v50[40];
  uint64_t DataTypeValidForLocalization;
  char v52;
  _QWORD v53[2];
  void *__p[7];
  __n128 v55;
  char v56;
  _BYTE v57[15];
  _BYTE *v58;
  std::string v59;
  std::string *v60;
  char v61;
  uint64_t v62;

  v62 = *MEMORY[0x24BDAC8D0];
  std::to_string(&v59, *(_DWORD *)(a2 + 4));
  v10 = std::string::insert(&v59, 0, "LocalizationProcessing_modelType_");
  v11 = (void *)v10->__r_.__value_.__r.__words[0];
  *(_QWORD *)v57 = v10->__r_.__value_.__l.__size_;
  *(_QWORD *)&v57[7] = *(std::string::size_type *)((char *)&v10->__r_.__value_.__r.__words[1] + 7);
  v12 = HIBYTE(v10->__r_.__value_.__r.__words[2]);
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  v13 = (CLMicroLocationTimeUtils::TimeProfile *)operator new();
  __p[0] = v11;
  __p[1] = *(void **)v57;
  *(void **)((char *)&__p[1] + 7) = *(void **)&v57[7];
  HIBYTE(__p[2]) = v12;
  CLMicroLocationTimeUtils::TimeProfile::TimeProfile((uint64_t)v13, (__int128 *)__p);
  v53[1] = v13;
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v59.__r_.__value_.__l.__data_);
  *(_QWORD *)a7 = 0;
  *(_QWORD *)(a7 + 8) = 0;
  *(_QWORD *)(a7 + 16) = 0;
  *(_DWORD *)(a7 + 24) = 3;
  *(_QWORD *)(a7 + 32) = 0;
  *(_BYTE *)(a7 + 80) = 0;
  *(_QWORD *)(a7 + 40) = 0;
  *(_QWORD *)(a7 + 48) = 0;
  *(_BYTE *)(a7 + 56) = 0;
  v14 = CLMicroLocationModel::numClusters((CLMicroLocationModel *)a2);
  std::vector<CLMicroLocationResultInternal>::reserve((void **)a7, v14);
  LocalizerAlgorithm = CLMicroLocationLocalizationSettings::getLocalizerAlgorithm(a4);
  CLMicroLocationAlgorithms::createLocalizerAlgorithm(LocalizerAlgorithm, v53);
  if (!CLMicroLocationModel::isValid((CLMicroLocationModel *)a2))
  {
    if (onceToken_MicroLocation_Default != -1)
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_49);
    v22 = logObject_MicroLocation_Default;
    if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
    {
      v23 = *(_DWORD *)(a2 + 4);
      LODWORD(__p[0]) = 67174657;
      HIDWORD(__p[0]) = v23;
      _os_log_impl(&dword_2419D9000, v22, OS_LOG_TYPE_DEFAULT, "#Warning No results for model type %{private}d because it is invalid", (uint8_t *)__p, 8u);
    }
    goto LABEL_66;
  }
  v59.__r_.__value_.__s.__data_[0] = 0;
  v61 = 0;
  if (LocalizerAlgorithm < 4)
  {
    FingerprintDistanceFunctionType = CLMicroLocationLocalizationSettings::getFingerprintDistanceFunctionType(a4);
    ULSettings::getFingerprintDistanceFunctionParamsForType(FingerprintDistanceFunctionType);
    v45 = (void *)objc_claimAutoreleasedReturnValue();
    +[ULDefaultsSingleton shared](ULDefaultsSingleton, "shared");
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v17, "defaultsDictionary");
    v18 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "ULAdaptiveAnchorsEnable");
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v18, "objectForKey:", v19);
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    if (v20 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
      v21 = objc_msgSend(v20, "BOOLValue");
    else
      v21 = objc_msgSend(MEMORY[0x24BDBD1C8], "BOOLValue");
    v28 = v21;

    if (v28)
    {
      v29 = (CLMicroLocationAlgorithms *)std::unordered_map<boost::uuids::uuid,CLMicroLocationAnchorAppearance>::unordered_map((uint64_t)__p, a2 + 16);
      *(_OWORD *)&__p[5] = *(_OWORD *)(a2 + 56);
      v30 = 1;
    }
    else
    {
      v30 = 0;
      LOBYTE(__p[0]) = 0;
    }
    v55.n128_u8[0] = v30;
    DataTypeValidForLocalization = CLMicroLocationAlgorithms::getDataTypeValidForLocalization(v29);
    v52 = ULSettings::get<ULSettings::AdaptiveSensorsEnable>();
    CLMicroLocationAlgorithms::createLocalizeFingerprintDistanceFunction(FingerprintDistanceFunctionType, v45);
    std::optional<std::function<double ()(CLMicroLocationFingerprint const&,CLMicroLocationFingerprint const&)>>::operator=[abi:ne180100]<std::function<double ()(CLMicroLocationFingerprint const&,CLMicroLocationFingerprint const&)>,void>((uint64_t)&v59, (uint64_t)v57);
    v31 = v58;
    if (v58 == v57)
    {
      v32 = 4;
      v31 = v57;
    }
    else
    {
      if (!v58)
      {
LABEL_28:
        if (v55.n128_u8[0])
          std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>>>::~__hash_table((uint64_t)__p);

        goto LABEL_45;
      }
      v32 = 5;
    }
    (*(void (**)(void))(*v31 + 8 * v32))();
    goto LABEL_28;
  }
  if (LocalizerAlgorithm == 4)
  {
LABEL_44:
    a6 = 0;
    goto LABEL_45;
  }
  if (LocalizerAlgorithm == 5)
  {
    v24 = CLMicroLocationLocalizationSettings::getFingerprintDistanceFunctionType(a4);
    ULSettings::getFingerprintDistanceFunctionParamsForType(v24);
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    LOBYTE(__p[0]) = 0;
    v55.n128_u8[0] = 0;
    DataTypeValidForLocalization = 2;
    v52 = ULSettings::get<ULSettings::AdaptiveSensorsEnable>();
    CLMicroLocationAlgorithms::createLocalizeFingerprintDistanceFunction(v24, v25);
    std::optional<std::function<double ()(CLMicroLocationFingerprint const&,CLMicroLocationFingerprint const&)>>::operator=[abi:ne180100]<std::function<double ()(CLMicroLocationFingerprint const&,CLMicroLocationFingerprint const&)>,void>((uint64_t)&v59, (uint64_t)v57);
    v26 = v58;
    if (v58 == v57)
    {
      v27 = 4;
      v26 = v57;
    }
    else
    {
      if (!v58)
      {
LABEL_41:
        if (v55.n128_u8[0])
          std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>>>::~__hash_table((uint64_t)__p);

        goto LABEL_44;
      }
      v27 = 5;
    }
    (*(void (**)(void))(*v26 + 8 * v27))();
    goto LABEL_41;
  }
  if (onceToken_MicroLocation_Default != -1)
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_49);
  v33 = logObject_MicroLocation_Default;
  v34 = (void *)LocalizerAlgorithm;
  if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_ERROR))
  {
    __p[0] = (void *)68289282;
    LOWORD(__p[1]) = 2082;
    *(void **)((char *)&__p[1] + 2) = "";
    WORD1(__p[2]) = 2050;
    *(void **)((char *)&__p[2] + 4) = (void *)LocalizerAlgorithm;
    _os_log_impl(&dword_2419D9000, v33, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"Invalid localization algorithm! No localization done\", \"Localization Algo\":%{public}lu}", (uint8_t *)__p, 0x1Cu);
  }
  if (onceToken_MicroLocation_Default != -1)
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_49);
  v35 = logObject_MicroLocation_Default;
  if (os_signpost_enabled((os_log_t)logObject_MicroLocation_Default))
  {
    __p[0] = (void *)68289282;
    LOWORD(__p[1]) = 2082;
    *(void **)((char *)&__p[1] + 2) = "";
    WORD1(__p[2]) = 2050;
    *(void **)((char *)&__p[2] + 4) = v34;
    _os_signpost_emit_with_name_impl(&dword_2419D9000, v35, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Invalid localization algorithm! No localization done", "{\"msg%{public}.0s\":\"Invalid localization algorithm! No localization done\", \"Localization Algo\":%{public}lu}", (uint8_t *)__p, 0x1Cu);
  }
LABEL_45:
  v36 = v53[0];
  std::__optional_copy_base<CLMicroLocationProto::AssociatedAccessPointInfo,false>::__optional_copy_base[abi:ne180100]((CLMicroLocationProto::AssociatedAccessPointInfo *)v50, a1);
  (*(void (**)(void **__return_ptr, uint64_t, uint64_t, uint64_t, std::string *, CLMicroLocationLocalizationSettings *, uint64_t, _BYTE *))(*(_QWORD *)v36 + 16))(__p, v36, a2, a3, &v59, a4, a5, v50);
  v37 = *(void **)a7;
  if (*(_QWORD *)a7)
  {
    *(_QWORD *)(a7 + 8) = v37;
    operator delete(v37);
    *(_QWORD *)a7 = 0;
    *(_QWORD *)(a7 + 8) = 0;
    *(_QWORD *)(a7 + 16) = 0;
  }
  *(_OWORD *)a7 = *(_OWORD *)__p;
  *(void **)(a7 + 16) = __p[2];
  memset(__p, 0, 24);
  *(_DWORD *)(a7 + 24) = __p[3];
  v38 = *(void **)(a7 + 32);
  if (v38)
  {
    *(_QWORD *)(a7 + 40) = v38;
    operator delete(v38);
    *(_QWORD *)(a7 + 32) = 0;
    *(_QWORD *)(a7 + 40) = 0;
    *(_QWORD *)(a7 + 48) = 0;
  }
  *(_OWORD *)(a7 + 32) = *(_OWORD *)&__p[4];
  *(void **)(a7 + 48) = __p[6];
  memset(&__p[4], 0, 24);
  v39 = std::__optional_storage_base<std::vector<CLMicroLocationResultInternal>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::vector<CLMicroLocationResultInternal>,false>>(a7 + 56, &v55);
  if (v56 && v55.n128_u64[0])
  {
    v55.n128_u64[1] = v55.n128_u64[0];
    operator delete((void *)v55.n128_u64[0]);
  }
  if (__p[4])
  {
    __p[5] = __p[4];
    operator delete(__p[4]);
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v50[32])
    CLMicroLocationProto::AssociatedAccessPointInfo::~AssociatedAccessPointInfo((CLMicroLocationProto::AssociatedAccessPointInfo *)v50);
  if (a6)
  {
    v40 = CLMicroLocationLocalizationSettings::getLocalizerAlgorithm(a4);
    CLMicroLocationAlgorithms::removeImprobableLocations((uint64_t *)a7, v40);
  }
  if (v61)
  {
    v41 = v60;
    if (v60 == &v59)
    {
      v42 = 4;
      v41 = &v59;
    }
    else
    {
      if (!v60)
        goto LABEL_66;
      v42 = 5;
    }
    (*(void (**)(__n128))(v41->__r_.__value_.__r.__words[0] + 8 * v42))(v39);
  }
LABEL_66:
  v43 = v53[0];
  v53[0] = 0;
  if (v43)
    (*(void (**)(uint64_t))(*(_QWORD *)v43 + 8))(v43);
  CLMicroLocationTimeUtils::TimeProfile::~TimeProfile(v13);
  return MEMORY[0x2426A04D4]();
}

void sub_241A7C2CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,CLMicroLocationTimeUtils::TimeProfile *a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  CLMicroLocationAlgorithms::LocalizerResults *v33;
  _QWORD *v34;
  void *v35;
  uint64_t v36;
  _QWORD *v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;

  v38 = *(_QWORD **)(v36 - 152);
  if (v38 == v34)
  {
    v39 = 4;
    v38 = (_QWORD *)(v36 - 176);
  }
  else
  {
    if (!v38)
      goto LABEL_6;
    v39 = 5;
  }
  (*(void (**)(void))(*v38 + 8 * v39))();
LABEL_6:
  if (a33)
    std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>>>::~__hash_table((uint64_t)&__p);

  if (*(_BYTE *)(v36 - 112))
  {
    v40 = *(_QWORD **)(v36 - 120);
    if (v40 == (_QWORD *)(v36 - 144))
    {
      v41 = 4;
      v40 = (_QWORD *)(v36 - 144);
    }
    else
    {
      if (!v40)
        goto LABEL_14;
      v41 = 5;
    }
    (*(void (**)(void))(*v40 + 8 * v41))();
  }
LABEL_14:
  if (a21)
    (*(void (**)(uint64_t))(*(_QWORD *)a21 + 8))(a21);
  CLMicroLocationAlgorithms::LocalizerResults::~LocalizerResults(v33);
  std::unique_ptr<CLMicroLocationTimeUtils::TimeProfile>::reset[abi:ne180100](&a22, 0);
  _Unwind_Resume(a1);
}

void std::vector<CLMicroLocationResultInternal>::reserve(void **a1, unint64_t a2)
{
  uint64_t v3;
  _BYTE *v4;
  int64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  __int128 v13;

  v4 = a1[2];
  v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (_BYTE *)*a1) >> 5)
  {
    if (a2 >> 59)
      std::vector<CLMicroLocationProto::ConfidenceReason>::__throw_length_error[abi:ne180100]();
    v5 = (_BYTE *)a1[1] - (_BYTE *)*a1;
    v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CLMicroLocationResultInternal>>(v3, a2);
    v7 = &v6[v5];
    v9 = &v6[32 * v8];
    v11 = (char *)*a1;
    v10 = (char *)a1[1];
    v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        v13 = *((_OWORD *)v10 - 2);
        *(_OWORD *)(v12 - 20) = *(_OWORD *)(v10 - 20);
        *((_OWORD *)v12 - 2) = v13;
        v12 -= 32;
        v10 -= 32;
      }
      while (v10 != v11);
      v10 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
      operator delete(v10);
  }
}

uint64_t ULSettings::get<ULSettings::AdaptiveSensorsEnable>()
{
  void *v0;
  void *v1;
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;

  +[ULDefaultsSingleton shared](ULDefaultsSingleton, "shared");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "defaultsDictionary");
  v1 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "ULAdaptiveSensorsEnable");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "objectForKey:", v2);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  if (v3 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
    v4 = objc_msgSend(v3, "BOOLValue");
  else
    v4 = objc_msgSend(MEMORY[0x24BDBD1C8], "BOOLValue");
  v5 = v4;

  return v5;
}

void sub_241A7C648(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

uint64_t std::optional<std::function<double ()(CLMicroLocationFingerprint const&,CLMicroLocationFingerprint const&)>>::operator=[abi:ne180100]<std::function<double ()(CLMicroLocationFingerprint const&,CLMicroLocationFingerprint const&)>,void>(uint64_t a1, uint64_t a2)
{
  if (*(_BYTE *)(a1 + 32))
  {
    std::__function::__value_func<double ()(CLMicroLocationFingerprint const&,CLMicroLocationFingerprint const&)>::operator=[abi:ne180100]((_QWORD *)a1, a2);
  }
  else
  {
    std::__function::__value_func<double ()(CLMicroLocationFingerprint const&,CLMicroLocationFingerprint const&)>::__value_func[abi:ne180100](a1, a2);
    *(_BYTE *)(a1 + 32) = 1;
  }
  return a1;
}

void ___ZL45_CLLogObjectForCategory_MicroLocation_Defaultv_block_invoke_42()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.MicroLocation", "MicroLocation");
  v1 = (void *)logObject_MicroLocation_Default;
  logObject_MicroLocation_Default = (uint64_t)v0;

}

_QWORD *std::__function::__value_func<double ()(CLMicroLocationFingerprint const&,CLMicroLocationFingerprint const&)>::operator=[abi:ne180100](_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  v4 = (_QWORD *)a1[3];
  a1[3] = 0;
  if (v4 == a1)
  {
    v5 = 4;
    v4 = a1;
  }
  else
  {
    if (!v4)
      goto LABEL_6;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_6:
  v6 = *(_QWORD *)(a2 + 24);
  if (v6)
  {
    if (v6 == a2)
    {
      a1[3] = a1;
      (*(void (**)(_QWORD, _QWORD *))(**(_QWORD **)(a2 + 24) + 24))(*(_QWORD *)(a2 + 24), a1);
    }
    else
    {
      a1[3] = v6;
      *(_QWORD *)(a2 + 24) = 0;
    }
  }
  else
  {
    a1[3] = 0;
  }
  return a1;
}

void _ULRequireInitializer(uint64_t a1, SEL aSelector)
{
  void *v3;
  void *v4;
  uint64_t v5;
  id v6;

  v3 = (void *)MEMORY[0x24BDD17C8];
  NSStringFromSelector(aSelector);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "stringWithFormat:", CFSTR("%@ requires the use of the initializer: %@"), a1, v4);
  v5 = objc_claimAutoreleasedReturnValue();

  objc_msgSend(MEMORY[0x24BDBCE88], "exceptionWithName:reason:userInfo:", *MEMORY[0x24BDBCAB0], v5, 0);
  v6 = (id)objc_claimAutoreleasedReturnValue();
  objc_exception_throw(v6);
}

void sub_241A7C94C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_241A7CB50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  void *v14;

  if (a14 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void ___ZL45_CLLogObjectForCategory_MicroLocation_Defaultv_block_invoke_43()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.MicroLocation", "MicroLocation");
  v1 = (void *)logObject_MicroLocation_Default;
  logObject_MicroLocation_Default = (uint64_t)v0;

}

uint64_t CLMiLoCustomLoiTable::Entry::Entry(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, double a6)
{
  *(_QWORD *)result = a2;
  *(_QWORD *)(result + 8) = a3;
  *(_QWORD *)(result + 16) = a4;
  *(_QWORD *)(result + 24) = a5;
  *(double *)(result + 32) = a6;
  return result;
}

uint64_t CLMicroLocationLocalizationSettings::CLMicroLocationLocalizationSettings(uint64_t a1, _QWORD *a2, unsigned int a3, uint64_t a4)
{
  int v8;
  BOOL v9;
  BOOL v10;
  uint64_t v12;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  uint64_t *v22;
  int v23;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  int v30;
  int v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  uint64_t *v36;
  uint64_t *v37;
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  uint64_t *v42;
  uint64_t *v43;
  void *v44;
  void *v45;
  void *v46;
  void *v47;
  id v48;
  void *v49;
  double v50;
  double v51;
  uint64_t v52;
  void *v53;
  NSObject *v54;
  NSObject *v55;
  uint64_t *v56;
  void *v57;
  void *v58;
  void *v59;
  void *v60;
  uint64_t *v61;
  uint64_t *v62;
  _BOOL4 v65;
  void *v66;
  void *v67;
  void *v68;
  void *v69;
  id v70;
  uint64_t v71;
  void *v72;
  void *v73;
  void *v74;
  void *v75;
  void *v76;
  uint64_t *v77;
  uint64_t *v78;
  void *v80;
  void *v81;
  int v82;
  _QWORD **v83;
  _QWORD *v84[2];
  _BYTE buf[18];
  __int16 v86;
  uint64_t v87;
  uint64_t v88;

  v88 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)a1 = a1 + 8;
  ULSettings::get<ULSettings::NullSpaceKernelFunction>();
  *(_QWORD *)(a1 + 24) = objc_claimAutoreleasedReturnValue();
  v84[0] = 0;
  v84[1] = 0;
  v83 = v84;
  v8 = *((unsigned __int8 *)a2 + 23);
  if ((v8 & 0x80) != 0)
  {
    v12 = a2[1];
    if (v12 == 24)
    {
      if (*(_QWORD *)*a2 == 0x6C7070612E6D6F63
        && *(_QWORD *)(*a2 + 8) == 0x61636967616D2E65
        && *(_QWORD *)(*a2 + 16) == 0x73746E656D6F6D6CLL)
      {
        goto LABEL_81;
      }
      v12 = a2[1];
    }
    else if (v12 == 38 && !memcmp((const void *)*a2, "com.apple.microlocation.semisupervised", 0x26uLL))
    {
      goto LABEL_46;
    }
    if (v12 == 31)
    {
      if (*(_QWORD *)*a2 == 0x6C7070612E6D6F63
        && *(_QWORD *)(*a2 + 8) == 0x6C6F7263696D2E65
        && *(_QWORD *)(*a2 + 16) == 0x2E6E6F697461636FLL
        && *(_QWORD *)(*a2 + 23) == 0x696F6C656D6F682ELL)
      {
LABEL_63:
        +[ULDefaultsSingleton shared](ULDefaultsSingleton, "shared");
        v26 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v26, "defaultsDictionary");
        v27 = (void *)objc_claimAutoreleasedReturnValue();

        objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "ULLocalizerAlgorithm_HomeLOI");
        v28 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v27, "objectForKey:", v28);
        v29 = (void *)objc_claimAutoreleasedReturnValue();
        if (v29 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
          v30 = objc_msgSend(v29, "unsignedIntValue");
        else
          v30 = objc_msgSend(&unk_2511ED9C0, "unsignedIntValue");
        v31 = v30;

        *(_DWORD *)(a1 + 32) = v31;
        +[ULDefaultsSingleton shared](ULDefaultsSingleton, "shared");
        v32 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v32, "defaultsDictionary");
        v33 = (void *)objc_claimAutoreleasedReturnValue();

        objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "ULNullSpaceDistanceReductionFunctionMinPercentile_HomeLOI");
        v34 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v33, "objectForKey:", v34);
        v35 = (void *)objc_claimAutoreleasedReturnValue();
        if (v35 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
          objc_msgSend(v35, "doubleValue");
        else
          objc_msgSend(&unk_2511ECE88, "doubleValue");
        v37 = v36;

        v82 = 0;
        *(_QWORD *)buf = &v82;
        std::__tree<std::__value_type<CLMicroLocationProto::DataType,unsigned long>,std::__map_value_compare<CLMicroLocationProto::DataType,std::__value_type<CLMicroLocationProto::DataType,unsigned long>,std::less<CLMicroLocationProto::DataType>,true>,std::allocator<std::__value_type<CLMicroLocationProto::DataType,unsigned long>>>::__emplace_unique_key_args<CLMicroLocationProto::DataType,std::piecewise_construct_t const&,std::tuple<CLMicroLocationProto::DataType const&>,std::tuple<>>((uint64_t **)a1, &v82, (uint64_t)&std::piecewise_construct, (_DWORD **)buf)[5] = v37;
        +[ULDefaultsSingleton shared](ULDefaultsSingleton, "shared");
        v38 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v38, "defaultsDictionary");
        v39 = (void *)objc_claimAutoreleasedReturnValue();

        objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "ULNullSpaceDistanceReductionFunctionMaxPercentile_HomeLOI");
        v40 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v39, "objectForKey:", v40);
        v41 = (void *)objc_claimAutoreleasedReturnValue();
        if (v41 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
          objc_msgSend(v41, "doubleValue");
        else
          objc_msgSend(&unk_2511ECE58, "doubleValue");
        v43 = v42;

        v82 = 1;
        *(_QWORD *)buf = &v82;
        std::__tree<std::__value_type<CLMicroLocationProto::DataType,unsigned long>,std::__map_value_compare<CLMicroLocationProto::DataType,std::__value_type<CLMicroLocationProto::DataType,unsigned long>,std::less<CLMicroLocationProto::DataType>,true>,std::allocator<std::__value_type<CLMicroLocationProto::DataType,unsigned long>>>::__emplace_unique_key_args<CLMicroLocationProto::DataType,std::piecewise_construct_t const&,std::tuple<CLMicroLocationProto::DataType const&>,std::tuple<>>((uint64_t **)a1, &v82, (uint64_t)&std::piecewise_construct, (_DWORD **)buf)[5] = v43;
        +[ULDefaultsSingleton shared](ULDefaultsSingleton, "shared");
        v44 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v44, "defaultsDictionary");
        v45 = (void *)objc_claimAutoreleasedReturnValue();

        objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "ULNullSpaceKernelFunction_HomeLOI");
        v46 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v45, "objectForKey:", v46);
        v47 = (void *)objc_claimAutoreleasedReturnValue();
        if (v47 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
          v48 = v47;
        else
          v48 = &unk_2511EE940;

        v49 = *(void **)(a1 + 24);
        *(_QWORD *)(a1 + 24) = v48;

        v23 = ULSettings::get<ULSettings::HomeLoiLocalizerFingerprintDistanceFunctionType>();
        goto LABEL_120;
      }
      v12 = a2[1];
    }
    if (v12 != 34)
      goto LABEL_121;
    a2 = (_QWORD *)*a2;
LABEL_51:
    if (memcmp(a2, "com.apple.microlocation.similarity", 0x22uLL))
      goto LABEL_121;
    if (a3 != 5)
    {
      *(_DWORD *)(a1 + 32) = 4;
      goto LABEL_121;
    }
    *(_DWORD *)(a1 + 32) = 5;
    v23 = ULSettings::get<ULSettings::HomeLoiLocalizerFingerprintDistanceFunctionType>();
LABEL_120:
    *(_DWORD *)(a1 + 36) = v23;
    goto LABEL_121;
  }
  if (*((unsigned __int8 *)a2 + 23) > 0x21u)
  {
    if (v8 != 34)
    {
      if (v8 != 38 || memcmp(a2, "com.apple.microlocation.semisupervised", 0x26uLL))
        goto LABEL_121;
LABEL_46:
      if (a3 != 3)
      {
        if (a3 != 4)
        {
          if (onceToken_MicroLocation_Default != -1)
            dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_52);
          v54 = logObject_MicroLocation_Default;
          if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_FAULT))
          {
            *(_DWORD *)buf = 68289282;
            *(_DWORD *)&buf[4] = 0;
            *(_WORD *)&buf[8] = 2082;
            *(_QWORD *)&buf[10] = "";
            v86 = 2050;
            v87 = a3;
            _os_log_impl(&dword_2419D9000, v54, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Unexpected generation algorithm for kMicroLocationSemisupervisedDomain!\", \"Generation Algorithm\":%{public}lu}", buf, 0x1Cu);
          }
          if (onceToken_MicroLocation_Default != -1)
            dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_52);
          v55 = logObject_MicroLocation_Default;
          if (os_signpost_enabled((os_log_t)logObject_MicroLocation_Default))
          {
            *(_DWORD *)buf = 68289282;
            *(_DWORD *)&buf[4] = 0;
            *(_WORD *)&buf[8] = 2082;
            *(_QWORD *)&buf[10] = "";
            v86 = 2050;
            v87 = a3;
            _os_signpost_emit_with_name_impl(&dword_2419D9000, v55, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Unexpected generation algorithm for kMicroLocationSemisupervisedDomain!", "{\"msg%{public}.0s\":\"Unexpected generation algorithm for kMicroLocationSemisupervisedDomain!\", \"Generation Algorithm\":%{public}lu}", buf, 0x1Cu);
          }
          goto LABEL_121;
        }
        *(_DWORD *)(a1 + 32) = 2;
        +[ULDefaultsSingleton shared](ULDefaultsSingleton, "shared");
        v18 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v18, "defaultsDictionary");
        v19 = (void *)objc_claimAutoreleasedReturnValue();

        objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "ULBinaryModelRoiReductionPercentile");
        v20 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v19, "objectForKey:", v20);
        v21 = (void *)objc_claimAutoreleasedReturnValue();
        if (v21 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
          objc_msgSend(v21, "doubleValue");
        else
          objc_msgSend(&unk_2511ECE18, "doubleValue");
        v56 = v22;

        v82 = 2;
        *(_QWORD *)buf = &v82;
        std::__tree<std::__value_type<CLMicroLocationProto::DataType,unsigned long>,std::__map_value_compare<CLMicroLocationProto::DataType,std::__value_type<CLMicroLocationProto::DataType,unsigned long>,std::less<CLMicroLocationProto::DataType>,true>,std::allocator<std::__value_type<CLMicroLocationProto::DataType,unsigned long>>>::__emplace_unique_key_args<CLMicroLocationProto::DataType,std::piecewise_construct_t const&,std::tuple<CLMicroLocationProto::DataType const&>,std::tuple<>>((uint64_t **)a1, &v82, (uint64_t)&std::piecewise_construct, (_DWORD **)buf)[5] = v56;
        +[ULDefaultsSingleton shared](ULDefaultsSingleton, "shared");
        v57 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v57, "defaultsDictionary");
        v58 = (void *)objc_claimAutoreleasedReturnValue();

        objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "ULBinaryModelNotRoiReductionPercentile");
        v59 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v58, "objectForKey:", v59);
        v60 = (void *)objc_claimAutoreleasedReturnValue();
        if (v60 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
          objc_msgSend(v60, "doubleValue");
        else
          objc_msgSend(&unk_2511ECE28, "doubleValue");
        v62 = v61;

        v82 = 3;
        *(_QWORD *)buf = &v82;
        std::__tree<std::__value_type<CLMicroLocationProto::DataType,unsigned long>,std::__map_value_compare<CLMicroLocationProto::DataType,std::__value_type<CLMicroLocationProto::DataType,unsigned long>,std::less<CLMicroLocationProto::DataType>,true>,std::allocator<std::__value_type<CLMicroLocationProto::DataType,unsigned long>>>::__emplace_unique_key_args<CLMicroLocationProto::DataType,std::piecewise_construct_t const&,std::tuple<CLMicroLocationProto::DataType const&>,std::tuple<>>((uint64_t **)a1, &v82, (uint64_t)&std::piecewise_construct, (_DWORD **)buf)[5] = v62;
        std::optional<std::string>::value_or[abi:ne180100]<char const(&)[1]>(a4, "", (std::string *)buf);
        if (SBYTE3(v87) < 0)
        {
          if (*(_QWORD *)&buf[8] != 14)
          {
            operator delete(*(void **)buf);
            goto LABEL_115;
          }
          v65 = **(_QWORD **)buf != 0x6F2D726F6F646E69 || *(_QWORD *)(*(_QWORD *)buf + 6) != 0x726F6F6474756F2DLL;
          operator delete(*(void **)buf);
          if (v65)
          {
LABEL_115:
            ULSettings::get<ULSettings::NullSpaceKernelFunction>();
            v71 = objc_claimAutoreleasedReturnValue();
            v72 = *(void **)(a1 + 24);
            *(_QWORD *)(a1 + 24) = v71;

            +[ULDefaultsSingleton shared](ULDefaultsSingleton, "shared");
            v73 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v73, "defaultsDictionary");
            v74 = (void *)objc_claimAutoreleasedReturnValue();

            objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "ULBinaryModelDetectionThreshold");
            v75 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v74, "objectForKey:", v75);
            v76 = (void *)objc_claimAutoreleasedReturnValue();
            if (!v76 || (objc_opt_class(), (objc_opt_isKindOfClass() & 1) == 0))
            {
              objc_msgSend(&unk_2511ECE38, "doubleValue");
              goto LABEL_119;
            }
LABEL_117:
            objc_msgSend(v76, "doubleValue");
LABEL_119:
            v78 = v77;

            v82 = 4;
            *(_QWORD *)buf = &v82;
            std::__tree<std::__value_type<CLMicroLocationProto::DataType,unsigned long>,std::__map_value_compare<CLMicroLocationProto::DataType,std::__value_type<CLMicroLocationProto::DataType,unsigned long>,std::less<CLMicroLocationProto::DataType>,true>,std::allocator<std::__value_type<CLMicroLocationProto::DataType,unsigned long>>>::__emplace_unique_key_args<CLMicroLocationProto::DataType,std::piecewise_construct_t const&,std::tuple<CLMicroLocationProto::DataType const&>,std::tuple<>>((uint64_t **)a1, &v82, (uint64_t)&std::piecewise_construct, (_DWORD **)buf)[5] = v78;
            v23 = ULSettings::get<ULSettings::FingerprintDistanceFunctionType>();
            goto LABEL_120;
          }
        }
        else
        {
          if (SBYTE3(v87) != 14)
            goto LABEL_115;
          if (*(_QWORD *)buf != 0x6F2D726F6F646E69 || *(_QWORD *)&buf[6] != 0x726F6F6474756F2DLL)
            goto LABEL_115;
        }
        +[ULDefaultsSingleton shared](ULDefaultsSingleton, "shared");
        v66 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v66, "defaultsDictionary");
        v67 = (void *)objc_claimAutoreleasedReturnValue();

        objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "ULNullSpaceKernelFunction_IndoorOutdoor");
        v68 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v67, "objectForKey:", v68);
        v69 = (void *)objc_claimAutoreleasedReturnValue();
        if (v69 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
          v70 = v69;
        else
          v70 = &unk_2511EE918;

        v80 = *(void **)(a1 + 24);
        *(_QWORD *)(a1 + 24) = v70;

        +[ULDefaultsSingleton shared](ULDefaultsSingleton, "shared");
        v81 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v81, "defaultsDictionary");
        v74 = (void *)objc_claimAutoreleasedReturnValue();

        objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "ULBinaryModelDetectionThreshold_IndoorOutdoor");
        v75 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v74, "objectForKey:", v75);
        v76 = (void *)objc_claimAutoreleasedReturnValue();
        if (!v76 || (objc_opt_class(), (objc_opt_isKindOfClass() & 1) == 0))
        {
          objc_msgSend(&unk_2511ECE48, "doubleValue");
          goto LABEL_119;
        }
        goto LABEL_117;
      }
LABEL_81:
      *(_DWORD *)(a1 + 32) = ULSettings::get<ULSettings::LocalizerAlgorithm>();
      v50 = ULSettings::get<ULSettings::NullSpaceDistanceReductionFunctionMinPercentile>();
      v82 = 0;
      *(_QWORD *)buf = &v82;
      *((double *)std::__tree<std::__value_type<CLMicroLocationProto::DataType,unsigned long>,std::__map_value_compare<CLMicroLocationProto::DataType,std::__value_type<CLMicroLocationProto::DataType,unsigned long>,std::less<CLMicroLocationProto::DataType>,true>,std::allocator<std::__value_type<CLMicroLocationProto::DataType,unsigned long>>>::__emplace_unique_key_args<CLMicroLocationProto::DataType,std::piecewise_construct_t const&,std::tuple<CLMicroLocationProto::DataType const&>,std::tuple<>>((uint64_t **)a1, &v82, (uint64_t)&std::piecewise_construct, (_DWORD **)buf)+ 5) = v50;
      v51 = ULSettings::get<ULSettings::NullSpaceDistanceReductionFunctionMaxPercentile>();
      v82 = 1;
      *(_QWORD *)buf = &v82;
      *((double *)std::__tree<std::__value_type<CLMicroLocationProto::DataType,unsigned long>,std::__map_value_compare<CLMicroLocationProto::DataType,std::__value_type<CLMicroLocationProto::DataType,unsigned long>,std::less<CLMicroLocationProto::DataType>,true>,std::allocator<std::__value_type<CLMicroLocationProto::DataType,unsigned long>>>::__emplace_unique_key_args<CLMicroLocationProto::DataType,std::piecewise_construct_t const&,std::tuple<CLMicroLocationProto::DataType const&>,std::tuple<>>((uint64_t **)a1, &v82, (uint64_t)&std::piecewise_construct, (_DWORD **)buf)+ 5) = v51;
      ULSettings::get<ULSettings::NullSpaceKernelFunction>();
      v52 = objc_claimAutoreleasedReturnValue();
      v53 = *(void **)(a1 + 24);
      *(_QWORD *)(a1 + 24) = v52;

      v23 = ULSettings::get<ULSettings::FingerprintDistanceFunctionType>();
      goto LABEL_120;
    }
    goto LABEL_51;
  }
  if (v8 != 24)
  {
    if (v8 != 31)
      goto LABEL_121;
    v9 = *a2 == 0x6C7070612E6D6F63 && a2[1] == 0x6C6F7263696D2E65;
    v10 = v9 && a2[2] == 0x2E6E6F697461636FLL;
    if (!v10 || *(_QWORD *)((char *)a2 + 23) != 0x696F6C656D6F682ELL)
      goto LABEL_121;
    goto LABEL_63;
  }
  if (*a2 == 0x6C7070612E6D6F63 && a2[1] == 0x61636967616D2E65 && a2[2] == 0x73746E656D6F6D6CLL)
    goto LABEL_81;
LABEL_121:
  std::__tree<std::__value_type<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,double>,std::__map_value_compare<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,std::__value_type<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,double>,std::less<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes>,true>,std::allocator<std::__value_type<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,double>>>::destroy((uint64_t)&v83, v84[0]);
  return a1;
}

void sub_241A7DD14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, _QWORD *a12)
{
  uint64_t v12;
  void *v13;
  void *v14;
  void *v15;

  std::__tree<std::__value_type<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,double>,std::__map_value_compare<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,std::__value_type<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,double>,std::less<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes>,true>,std::allocator<std::__value_type<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,double>>>::destroy((uint64_t)&a11, a12);
  std::__tree<std::__value_type<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,double>,std::__map_value_compare<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,std::__value_type<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,double>,std::less<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes>,true>,std::allocator<std::__value_type<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,double>>>::destroy(v12, *(_QWORD **)(v12 + 8));
  _Unwind_Resume(a1);
}

uint64_t CLMicroLocationLocalizationSettings::CLMicroLocationLocalizationSettings(uint64_t a1, _QWORD *a2)
{
  void *__p;
  char v5;
  char v6;

  LOBYTE(__p) = 0;
  v6 = 0;
  CLMicroLocationLocalizationSettings::CLMicroLocationLocalizationSettings(a1, a2, 0, (uint64_t)&__p);
  if (v6 && v5 < 0)
    operator delete(__p);
  return a1;
}

void sub_241A7DFB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a15)
  {
    if (a14 < 0)
      operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t CLMicroLocationLocalizationSettings::CLMicroLocationLocalizationSettings(uint64_t a1, _QWORD *a2, unsigned int a3)
{
  void *__p;
  char v6;
  char v7;

  LOBYTE(__p) = 0;
  v7 = 0;
  CLMicroLocationLocalizationSettings::CLMicroLocationLocalizationSettings(a1, a2, a3, (uint64_t)&__p);
  if (v7 && v6 < 0)
    operator delete(__p);
  return a1;
}

void sub_241A7E02C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a15)
  {
    if (a14 < 0)
      operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

id ULSettings::get<ULSettings::NullSpaceKernelFunction>()
{
  void *v0;
  void *v1;
  void *v2;
  void *v3;
  id v4;

  +[ULDefaultsSingleton shared](ULDefaultsSingleton, "shared");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "defaultsDictionary");
  v1 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "ULNullSpaceKernelFunction");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "objectForKey:", v2);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  if (v3 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
    v4 = v3;
  else
    v4 = &unk_2511EE8F0;

  return v4;
}

void sub_241A7E108(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t ULSettings::get<ULSettings::LocalizerAlgorithm>()
{
  void *v0;
  void *v1;
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;

  +[ULDefaultsSingleton shared](ULDefaultsSingleton, "shared");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "defaultsDictionary");
  v1 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "ULLocalizerAlgorithm");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "objectForKey:", v2);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  if (v3 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
    v4 = objc_msgSend(v3, "unsignedIntValue");
  else
    v4 = objc_msgSend(&unk_2511ED9A8, "unsignedIntValue");
  v5 = v4;

  return v5;
}

void sub_241A7E1FC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

double ULSettings::get<ULSettings::NullSpaceDistanceReductionFunctionMinPercentile>()
{
  void *v0;
  void *v1;
  void *v2;
  void *v3;
  double v4;
  double v5;

  +[ULDefaultsSingleton shared](ULDefaultsSingleton, "shared");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "defaultsDictionary");
  v1 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "ULNullSpaceDistanceReductionFunctionMinPercentile");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "objectForKey:", v2);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  if (v3 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
    objc_msgSend(v3, "doubleValue");
  else
    objc_msgSend(&unk_2511ECE58, "doubleValue");
  v5 = v4;

  return v5;
}

void sub_241A7E300(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

double ULSettings::get<ULSettings::NullSpaceDistanceReductionFunctionMaxPercentile>()
{
  void *v0;
  void *v1;
  void *v2;
  void *v3;
  double v4;
  double v5;

  +[ULDefaultsSingleton shared](ULDefaultsSingleton, "shared");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "defaultsDictionary");
  v1 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "ULNullSpaceDistanceReductionFunctionMaxPercentile");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "objectForKey:", v2);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  if (v3 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
    objc_msgSend(v3, "doubleValue");
  else
    objc_msgSend(&unk_2511ECE98, "doubleValue");
  v5 = v4;

  return v5;
}

void sub_241A7E404(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

uint64_t ULSettings::get<ULSettings::FingerprintDistanceFunctionType>()
{
  void *v0;
  void *v1;
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;

  +[ULDefaultsSingleton shared](ULDefaultsSingleton, "shared");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "defaultsDictionary");
  v1 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "ULFingerprintDistanceFunctionType");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "objectForKey:", v2);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  if (v3 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
    v4 = objc_msgSend(v3, "unsignedIntValue");
  else
    v4 = objc_msgSend(&unk_2511ED990, "unsignedIntValue");
  v5 = v4;

  return v5;
}

{
  void *v0;
  void *v1;
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;

  +[ULDefaultsSingleton shared](ULDefaultsSingleton, "shared");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "defaultsDictionary");
  v1 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "ULFingerprintDistanceFunctionType");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "objectForKey:", v2);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  if (v3 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
    v4 = objc_msgSend(v3, "unsignedIntValue");
  else
    v4 = objc_msgSend(&unk_2511EE1A0, "unsignedIntValue");
  v5 = v4;

  return v5;
}

void sub_241A7E500(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

uint64_t ULSettings::get<ULSettings::HomeLoiLocalizerFingerprintDistanceFunctionType>()
{
  void *v0;
  void *v1;
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;

  +[ULDefaultsSingleton shared](ULDefaultsSingleton, "shared");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "defaultsDictionary");
  v1 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "ULHomeLoiLocalizerFingerprintDistanceFunctionType");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "objectForKey:", v2);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  if (v3 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
    v4 = objc_msgSend(v3, "unsignedIntValue");
  else
    v4 = objc_msgSend(&unk_2511ED978, "unsignedIntValue");
  v5 = v4;

  return v5;
}

void sub_241A7E5FC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

uint64_t CLMicroLocationLocalizationSettings::getLocalizerAlgorithm(CLMicroLocationLocalizationSettings *this)
{
  return *((unsigned int *)this + 8);
}

double CLMicroLocationLocalizationSettings::getMinPercentileForReducerFunction(CLMicroLocationLocalizationSettings *this)
{
  int v2;

  v2 = 0;
  return *(double *)std::map<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,double>::at((uint64_t)this, &v2);
}

uint64_t *std::map<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,double>::at(uint64_t a1, int *a2)
{
  uint64_t *v2;
  int v3;
  int v4;

  v2 = *(uint64_t **)(a1 + 8);
  if (!v2)
LABEL_8:
    std::__throw_out_of_range[abi:ne180100]("map::at:  key not found");
  v3 = *a2;
  while (1)
  {
    while (1)
    {
      v4 = *((_DWORD *)v2 + 8);
      if (v3 >= v4)
        break;
      v2 = (uint64_t *)*v2;
      if (!v2)
        goto LABEL_8;
    }
    if (v4 >= v3)
      return v2 + 5;
    v2 = (uint64_t *)v2[1];
    if (!v2)
      goto LABEL_8;
  }
}

double CLMicroLocationLocalizationSettings::getMaxPercentileForReducerFunction(CLMicroLocationLocalizationSettings *this)
{
  int v2;

  v2 = 1;
  return *(double *)std::map<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,double>::at((uint64_t)this, &v2);
}

id CLMicroLocationLocalizationSettings::getKernelFuncSettings(id *this)
{
  return this[3];
}

uint64_t CLMicroLocationLocalizationSettings::getFingerprintDistanceFunctionType(CLMicroLocationLocalizationSettings *this)
{
  return *((unsigned int *)this + 9);
}

uint64_t CLMicroLocationLocalizationSettings::getDetectionThresholdForBinaryROI(CLMicroLocationLocalizationSettings *this)
{
  uint64_t v1;
  int *v2;
  int v3;
  BOOL v4;
  uint64_t *v5;
  int v7;

  v1 = *((_QWORD *)this + 1);
  if (!v1)
    return 0;
  v2 = (int *)((char *)this + 8);
  do
  {
    v3 = *(_DWORD *)(v1 + 32);
    v4 = v3 < 4;
    if (v3 >= 4)
      v5 = (uint64_t *)v1;
    else
      v5 = (uint64_t *)(v1 + 8);
    if (!v4)
      v2 = (int *)v1;
    v1 = *v5;
  }
  while (*v5);
  if (v2 == (int *)((char *)this + 8) || v2[8] > 4)
    return 0;
  v7 = 4;
  return *std::map<CLMicroLocationLocalizationSettings::LocalizerSettingsTypes,double>::at((uint64_t)this, &v7);
}

void ___ZL45_CLLogObjectForCategory_MicroLocation_Defaultv_block_invoke_44()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.MicroLocation", "MicroLocation");
  v1 = (void *)logObject_MicroLocation_Default;
  logObject_MicroLocation_Default = (uint64_t)v0;

}

void sub_241A7E968(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  uint64_t v3;
  void *v4;

  MEMORY[0x2426A04BC](v3, 0x1000C8077774924);
  _Unwind_Resume(a1);
}

void sub_241A7EC48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  uint64_t v24;

  CLMicroLocationProto::Measurement::~Measurement((CLMicroLocationProto::Measurement *)(v24 + 32));
  CLMicroLocationProto::Measurement::~Measurement((CLMicroLocationProto::Measurement *)&a9);
  _Unwind_Resume(a1);
}

void ___ZL45_CLLogObjectForCategory_MicroLocation_Defaultv_block_invoke_45()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.MicroLocation", "MicroLocation");
  v1 = (void *)logObject_MicroLocation_Default;
  logObject_MicroLocation_Default = (uint64_t)v0;

}

void sub_241A7EDF8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_241A7F05C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void ___ZL45_CLLogObjectForCategory_MicroLocation_Defaultv_block_invoke_46()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.MicroLocation", "MicroLocation");
  v1 = (void *)logObject_MicroLocation_Default;
  logObject_MicroLocation_Default = (uint64_t)v0;

}

uint64_t CLMicroLocationLearner::CLMicroLocationLearner(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD v9[4];
  _QWORD v10[4];
  _QWORD v11[4];
  _QWORD v12[4];
  _QWORD v13[4];
  _QWORD v14[4];
  _QWORD v15[3];
  _QWORD *v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)a1 = 0;
  *(_BYTE *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = a2;
  *(_QWORD *)(a1 + 32) = a3;
  v9[0] = &off_2511D6028;
  v9[1] = a1;
  v9[3] = v9;
  v10[0] = &off_2511D60B8;
  v10[1] = a1;
  v10[3] = v10;
  v11[0] = &off_2511D6138;
  v11[1] = a1;
  v11[3] = v11;
  v12[0] = &off_2511D61B8;
  v12[1] = a1;
  v12[3] = v12;
  v13[0] = &off_2511D6238;
  v13[1] = a1;
  v13[3] = v13;
  v14[0] = &off_2511D62B8;
  v14[1] = a1;
  v14[3] = v14;
  v15[0] = &off_2511D6338;
  v15[1] = a1;
  v16 = v15;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  v4 = (char *)operator new(0xE0uLL);
  *(_QWORD *)(a1 + 56) = v4 + 224;
  *(_QWORD *)(a1 + 40) = v4;
  *(_QWORD *)(a1 + 48) = v4;
  v5 = 0;
  *(_QWORD *)(a1 + 48) = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::function<void ()(std::function<BOOL ()(void)>)>>,std::function<void ()(std::function<BOOL ()(void)>)> const*,std::function<void ()(std::function<BOOL ()(void)>)> const*,std::function<void ()(std::function<BOOL ()(void)>)>*>(a1 + 56, (uint64_t)v9, (uint64_t)&v17, (uint64_t)v4);
  do
  {
    v6 = (&v16)[v5];
    if (&v15[v5] == v6)
    {
      v6 = &v15[v5];
      v7 = 4;
    }
    else
    {
      if (!v6)
        goto LABEL_7;
      v7 = 5;
    }
    (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_7:
    v5 -= 4;
  }
  while (v5 != -28);
  return a1;
}

void sub_241A7F290(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, char a12)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  char *v17;
  uint64_t v18;

  v14 = v13;
  *(_QWORD *)(v12 + 48) = v14;
  std::vector<std::function<void ()(std::function<BOOL ()(void)>)>>::__destroy_vector::operator()[abi:ne180100](&a10);
  v16 = 0;
  while (1)
  {
    v17 = *(char **)(&a12 + v16 + 216);
    if (&a12 + v16 + 192 == v17)
      break;
    if (v17)
    {
      v18 = 5;
LABEL_6:
      (*(void (**)(void))(*(_QWORD *)v17 + 8 * v18))();
    }
    v16 -= 32;
    if (v16 == -224)
    {

      _Unwind_Resume(a1);
    }
  }
  v17 = &a12 + v16 + 192;
  v18 = 4;
  goto LABEL_6;
}

uint64_t CLMicroLocationLearner::getAnchorAppearanceMapForLoi@<X0>(uint64_t a1@<X0>, _OWORD *a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t result;
  id v7;
  void *v8;
  CLMicroLocationProto::Configuration *v9;
  uint64_t v10;
  const CLMicroLocationProto::anchorAppearancesVector *v11;
  id v12;
  void *v13;
  _QWORD v14[2];
  __int128 v15;
  __int128 v16;
  _OWORD v17[5];
  uint64_t v18;
  _OWORD v19[5];
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  CLMicroLocationAnchorAppearanceMap::CLMicroLocationAnchorAppearanceMap((CLMicroLocationAnchorAppearanceMap *)a3);
  result = ULSettings::get<ULSettings::AdaptiveAnchorsEnable>();
  if ((_DWORD)result)
  {
    v7 = *(id *)(*(_QWORD *)(a1 + 32) + 32);
    v8 = v7;
    if (v7)
    {
      objc_msgSend(v7, "fetchMostRecentAnchorAppearancesAtLoi:", a2);
    }
    else
    {
      v22 = 0;
      v20 = 0u;
      v21 = 0u;
      memset(v19, 0, sizeof(v19));
    }

    if ((_BYTE)v22)
      goto LABEL_6;
    if (*a2 != 0)
    {
      v12 = *(id *)(*(_QWORD *)(a1 + 32) + 32);
      v13 = v12;
      v14[0] = 0;
      v14[1] = 0;
      if (v12)
      {
        objc_msgSend(v12, "fetchMostRecentAnchorAppearancesAtLoi:", v14);
      }
      else
      {
        v18 = 0;
        v16 = 0u;
        memset(v17, 0, sizeof(v17));
        v15 = 0u;
      }
      std::__optional_storage_base<CLMicroLocationConfigurationTable::Entry,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<CLMicroLocationConfigurationTable::Entry,false>>((uint64_t)v19, (uint64_t)&v15);
      std::__optional_destruct_base<CLMicroLocationConfigurationTable::Entry,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v15);

      if ((_BYTE)v22)
      {
LABEL_6:
        v10 = v20;
        if (!(_QWORD)v20)
        {
          v9 = (CLMicroLocationProto::Configuration *)CLMicroLocationProto::Configuration::default_instance(v9);
          v10 = *((_QWORD *)v9 + 3);
        }
        v11 = *(const CLMicroLocationProto::anchorAppearancesVector **)(v10 + 8);
        if (!v11)
          v11 = *(const CLMicroLocationProto::anchorAppearancesVector **)(CLMicroLocationProto::AnchorAppearanceConfiguration::default_instance(v9)
                                                                        + 8);
        CLMicroLocationAnchorAppearanceMap::CLMicroLocationAnchorAppearanceMap((CLMicroLocationAnchorAppearanceMap *)&v15, v11);
        if (&v15 != (__int128 *)a3)
        {
          *(_DWORD *)(a3 + 32) = v17[0];
          std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,void *> *>>((_QWORD *)a3, (uint64_t *)v16, 0);
        }
        *(_OWORD *)(a3 + 40) = *(_OWORD *)((char *)v17 + 8);
        std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>>>::~__hash_table((uint64_t)&v15);
      }
    }
    return std::__optional_destruct_base<CLMicroLocationConfigurationTable::Entry,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)v19);
  }
  return result;
}

void sub_241A7F4AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  uint64_t v27;
  void *v28;

  std::__optional_destruct_base<CLMicroLocationConfigurationTable::Entry,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&a27);
  std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>>>::~__hash_table(v27);
  _Unwind_Resume(a1);
}

uint64_t ULSettings::get<ULSettings::AdaptiveAnchorsEnable>()
{
  void *v0;
  void *v1;
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;

  +[ULDefaultsSingleton shared](ULDefaultsSingleton, "shared");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "defaultsDictionary");
  v1 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "ULAdaptiveAnchorsEnable");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "objectForKey:", v2);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  if (v3 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
    v4 = objc_msgSend(v3, "BOOLValue");
  else
    v4 = objc_msgSend(MEMORY[0x24BDBD1C8], "BOOLValue");
  v5 = v4;

  return v5;
}

{
  void *v0;
  void *v1;
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;

  +[ULDefaultsSingleton shared](ULDefaultsSingleton, "shared");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "defaultsDictionary");
  v1 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "ULAdaptiveAnchorsEnable");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "objectForKey:", v2);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  if (v3 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
    v4 = objc_msgSend(v3, "BOOLValue");
  else
    v4 = objc_msgSend(MEMORY[0x24BDBD1C8], "BOOLValue");
  v5 = v4;

  return v5;
}

void sub_241A7F5D0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void CLMicroLocationLearner::getServiceLabelsAndLabeledRecordingEventsForLoi(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  id v13;
  void *v14;
  __int128 *v15;
  __int128 *v16;
  id v17;
  void *v18;
  void *__p[2];
  uint64_t v20;
  void **v21;
  __int128 v22;
  uint64_t v23;
  _QWORD v24[3];

  v24[2] = *MEMORY[0x24BDAC8D0];
  v24[0] = a5;
  v24[1] = a6;
  if (a3[1] != *a3)
  {
    CLMicroLocationLearner::getServiceLabelsAndLabeledRecordingEventsForLoi();
    goto LABEL_17;
  }
  if (*(_QWORD *)(a4 + 8) != *(_QWORD *)a4)
  {
    CLMicroLocationLearner::getServiceLabelsAndLabeledRecordingEventsForLoi();
LABEL_17:
    __break(1u);
  }
  v13 = *(id *)(*(_QWORD *)(a1 + 32) + 40);
  v14 = v13;
  v21 = 0;
  if (v13)
  {
    objc_msgSend(v13, "fetchRecordingLabelsForServiceUuid:atLoiGroupID:fromTime:limit:", a2, v24, &v21, a8);
  }
  else
  {
    __p[0] = 0;
    __p[1] = 0;
    v20 = 0;
  }
  std::vector<CLMicroLocationRecordingLabelsTable::Entry>::__vdeallocate(a3);
  *(_OWORD *)a3 = *(_OWORD *)__p;
  a3[2] = v20;
  __p[1] = 0;
  v20 = 0;
  __p[0] = 0;
  *(_QWORD *)&v22 = __p;
  std::vector<CLMicroLocationRecordingLabelsTable::Entry>::__destroy_vector::operator()[abi:ne180100]((void ***)&v22);

  __p[0] = 0;
  __p[1] = 0;
  v20 = 0;
  v21 = __p;
  v16 = (__int128 *)*a3;
  v15 = (__int128 *)a3[1];
  while (v16 != v15)
  {
    v22 = *v16;
    std::back_insert_iterator<std::vector<boost::uuids::uuid>>::operator=[abi:ne180100](&v21, &v22);
    v16 += 4;
  }
  v17 = *(id *)(*(_QWORD *)(a1 + 32) + 88);
  v18 = v17;
  if (v17)
  {
    objc_msgSend(v17, "fetchRecordingEventsFromTriggerUUIDs:", __p);
  }
  else
  {
    v22 = 0uLL;
    v23 = 0;
  }
  std::vector<CLMicroLocationRecordingEventsTable::Entry>::__vdeallocate((void **)a4);
  *(_OWORD *)a4 = v22;
  *(_QWORD *)(a4 + 16) = v23;
  v23 = 0;
  v21 = (void **)&v22;
  v22 = 0uLL;
  std::vector<CLMicroLocationRecordingEventsTable::Entry>::__destroy_vector::operator()[abi:ne180100](&v21);

  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void sub_241A7F7BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  void *v10;

  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void CLMicroLocationLearner::fetchAndFilterUniqueLOIGroups(CLMicroLocationLearner *this@<X0>, uint64_t a2@<X8>)
{
  id v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  BOOL v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  char v15;
  BOOL v16;
  __int128 v17;
  __int128 v18;
  void **v19;
  __int128 v20;
  _BYTE *v21;
  __n128 *v22;
  unint64_t v23;
  uint64_t v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  unsigned int v29;
  unsigned int v30;
  __int128 *v31;
  NSObject *v32;
  uint64_t v33;
  _DWORD v34[2];
  __int16 v35;
  const char *v36;
  __int16 v37;
  uint64_t v38;
  __int16 v39;
  uint64_t v40;
  uint64_t v41;

  v41 = *MEMORY[0x24BDAC8D0];
  v4 = *(id *)(*((_QWORD *)this + 4) + 56);
  v5 = v4;
  if (v4)
  {
    objc_msgSend(v4, "fetchAllDistinctLoiGroups");
  }
  else
  {
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
  }

  v6 = *(_QWORD *)a2;
  v7 = *(_QWORD *)(a2 + 8);
  v8 = v7 - *(_QWORD *)a2;
  if (v7 == *(_QWORD *)a2)
  {
LABEL_12:
    v12 = v7;
  }
  else
  {
    while (1)
    {
      v9 = CLMiLoServiceManager::rtLoiStringToLocationType((uint64_t *)(v6 + 40)) | 2;
      v11 = v10 && v9 == 2;
      if (!v11
        || !objc_msgSend(*(id *)(*((_QWORD *)this + 4) + 88), "countRecordingEventsForLoiGroupId:", v6 + 24))
      {
        break;
      }
      v6 += 64;
      if (v6 == v7)
        goto LABEL_12;
    }
    v12 = v7;
    if (v6 != v7)
    {
      if (v6 + 64 == v7)
      {
        v12 = v6;
      }
      else
      {
        v13 = (_BYTE *)(v6 + 127);
        v12 = v6;
        do
        {
          v14 = CLMiLoServiceManager::rtLoiStringToLocationType((uint64_t *)(v13 - 23)) | 2;
          if (v15)
            v16 = v14 == 2;
          else
            v16 = 0;
          if (v16
            && objc_msgSend(*(id *)(*((_QWORD *)this + 4) + 88), "countRecordingEventsForLoiGroupId:", v13 - 39))
          {
            v17 = *(_OWORD *)(v13 - 63);
            v18 = *(_OWORD *)(v13 - 47);
            *(_QWORD *)(v12 + 32) = *(_QWORD *)(v13 - 31);
            *(_OWORD *)v12 = v17;
            *(_OWORD *)(v12 + 16) = v18;
            v19 = (void **)(v12 + 40);
            if (*(char *)(v12 + 63) < 0)
              operator delete(*v19);
            v20 = *(_OWORD *)(v13 - 23);
            *(_QWORD *)(v12 + 56) = *(_QWORD *)(v13 - 7);
            *(_OWORD *)v19 = v20;
            *v13 = 0;
            *(v13 - 23) = 0;
            v12 += 64;
          }
          v21 = v13 + 1;
          v13 += 64;
        }
        while (v21 != (_BYTE *)v7);
      }
    }
  }
  std::vector<CLMiLoLoiTable::Entry>::erase(a2, v12, *(__int128 **)(a2 + 8));
  v22 = *(__n128 **)(a2 + 8);
  v23 = 126 - 2 * __clz(((uint64_t)v22 - *(_QWORD *)a2) >> 6);
  if (v22 == *(__n128 **)a2)
    v24 = 0;
  else
    v24 = v23;
  std::__introsort<std::_ClassicAlgPolicy,CLMicroLocationLearner::fetchAndFilterUniqueLOIGroups(void)::$_1 &,CLMiLoLoiTable::Entry *,false>(*(_QWORD *)a2, v22, v24, 1);
  +[ULDefaultsSingleton shared](ULDefaultsSingleton, "shared");
  v25 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v25, "defaultsDictionary");
  v26 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "ULMaxDistinctLOIGroupUUIDsForLearning");
  v27 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v26, "objectForKey:", v27);
  v28 = (void *)objc_claimAutoreleasedReturnValue();
  if (v28 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
    v29 = objc_msgSend(v28, "unsignedIntValue");
  else
    v29 = objc_msgSend(&unk_2511EDA08, "unsignedIntValue");
  v30 = v29;

  v31 = *(__int128 **)(a2 + 8);
  if (v30 < (unint64_t)(((uint64_t)v31 - *(_QWORD *)a2) >> 6))
    std::vector<CLMiLoLoiTable::Entry>::erase(a2, *(_QWORD *)a2 + ((unint64_t)v30 << 6), v31);
  if (onceToken_MicroLocation_Default != -1)
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_55);
  v32 = logObject_MicroLocation_Default;
  if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
  {
    v33 = (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 6;
    v34[0] = 68289538;
    v34[1] = 0;
    v35 = 2082;
    v36 = "";
    v37 = 2050;
    v38 = v8 >> 6;
    v39 = 2050;
    v40 = v33;
    _os_log_impl(&dword_2419D9000, v32, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Filtered Unique LOI Groups\", \"Count before filter\":%{public}lu, \"Count after filter\":%{public}lu}", (uint8_t *)v34, 0x26u);
  }
}

void sub_241A7FB74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  void *v9;
  void *v10;
  void *v11;

  std::vector<CLMiLoLoiTable::Entry>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t std::vector<CLMiLoLoiTable::Entry>::erase(uint64_t a1, uint64_t a2, __int128 *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v9;

  if ((__int128 *)a2 != a3)
  {
    std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<CLMiLoLoiTable::Entry *,CLMiLoLoiTable::Entry *,CLMiLoLoiTable::Entry *>((uint64_t)&v9, a3, *(__int128 **)(a1 + 8), a2);
    v6 = v5;
    v7 = *(_QWORD *)(a1 + 8);
    if (v7 != v5)
    {
      do
      {
        if (*(char *)(v7 - 1) < 0)
          operator delete(*(void **)(v7 - 24));
        v7 -= 64;
      }
      while (v7 != v6);
    }
    *(_QWORD *)(a1 + 8) = v6;
  }
  return a2;
}

void CLMicroLocationLearner::learnFromModelType(ULDatabase **a1, uint64_t a2, unsigned int a3)
{
  NSObject *v5;
  unint64_t v6;
  double v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  int v12;
  uint64_t v13;
  const char *v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint32_t v18;
  int v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  double v24;
  double v25;
  _BOOL4 v26;
  int v27;
  int v28;
  NSObject *v29;
  void **v30;
  CLMicroLocationLearner *v31;
  uint64_t v32;
  uint64_t v33;
  _BOOL4 v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  __int128 *v38;
  char v39;
  unint64_t v40;
  NSObject *v41;
  char *v42;
  uint8_t *v43;
  void *v44;
  void *v45;
  void *v46;
  void *v47;
  int v48;
  NSObject *v49;
  NSObject *v50;
  char *v51;
  uint8_t *v52;
  uint64_t v53;
  int v54;
  uint64_t v55;
  uint64_t j;
  unint64_t v57;
  NSObject *v58;
  uint64_t v59;
  _OWORD *v60;
  void **v61;
  char *v62;
  uint8_t *v63;
  uint64_t v64;
  void *v65;
  uint64_t v66;
  void *v67;
  id v68;
  void *v69;
  NSObject *v70;
  uint64_t v71;
  _OWORD *v72;
  void *v73;
  _OWORD *v74;
  void *v75;
  int v76;
  id v77;
  id v78;
  NSObject *v79;
  id v80;
  void *v81;
  NSObject *v82;
  NSObject *v83;
  uint64_t *v84;
  uint64_t *v85;
  uint64_t *v86;
  uint64_t v87;
  uint64_t v88;
  NSObject *v89;
  uint64_t v90;
  void ***v91;
  uint64_t v92;
  char v93;
  BOOL v94;
  NSObject *v95;
  char *v96;
  uint8_t *v97;
  uint64_t *v98;
  void *v99;
  NSObject *v100;
  uint64_t *v101;
  uint64_t *v102;
  char *v103;
  uint8_t *v104;
  void **v105;
  int v106;
  id v107;
  id v108;
  uint64_t *v109;
  uint64_t *v110;
  double v111;
  NSObject *v112;
  uint64_t i;
  uint64_t *v114;
  uint64_t k;
  NSObject *log;
  CLMicroLocationLearner *v118;
  void *v119;
  __int128 v120;
  void *v121;
  __int128 v122;
  void *v123;
  void *v124;
  uint64_t v125;
  _QWORD v126[2];
  char v127;
  _BYTE v128[40];
  char v129;
  uint64_t *v130;
  char *v131;
  uint64_t v132;
  void *v133;
  void *v134;
  uint64_t v135;
  _BYTE v136[24];
  uint64_t v137;
  uint64_t v138;
  void *v139;
  void *v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144[6];
  _OWORD v145[2];
  int v146;
  id v147;
  unsigned __int8 v148;
  void *v149;
  _BYTE *v150;
  unsigned __int8 v151;
  char v152;
  unsigned int v153;
  uint8_t v154[8];
  _BYTE v155[20];
  __int16 v156;
  _BYTE v157[18];
  uint64_t v158;
  void **v159;
  uuid v160;
  char v161;
  __int128 v162;
  char v163;
  __int128 v164;
  char v165;
  uint8_t buf[8];
  _BYTE v167[32];
  void **v168;
  uint64_t v169;
  _OWORD *v170;
  void **v171;
  uint64_t *v172;
  char v173;
  uint8_t v174[48];
  __int128 v175;
  __int128 v176;
  __int128 v177;
  __int128 v178;
  __int128 v179;
  __int128 v180;
  __int128 v181;
  __int128 v182;
  __int128 v183;
  __int128 v184;
  __int128 v185;
  __int128 v186;
  __int128 v187;
  __int128 v188;
  __int128 v189;
  _OWORD v190[2];
  _BYTE v191[120];
  void *__p[2];
  char v193;
  char v194;
  uint64_t v195;

  v195 = *MEMORY[0x24BDAC8D0];
  v153 = a3;
  if (onceToken_MicroLocation_Default != -1)
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_55);
  v118 = (CLMicroLocationLearner *)a1;
  v5 = (id)logObject_MicroLocation_Default;
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 68289282;
    *(_DWORD *)&buf[4] = 0;
    *(_WORD *)v167 = 2082;
    *(_QWORD *)&v167[2] = "";
    *(_WORD *)&v167[10] = 2050;
    *(_QWORD *)&v167[12] = a3;
    _os_log_impl(&dword_2419D9000, v5, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"start learn model\", \"model-type\":%{public}lu}", buf, 0x1Cu);
  }

  if ((ULSettings::get<ULSettings::EnableLearning>() & 1) != 0)
  {
    ULSettings::get<ULSettings::EnabledModelTypes>((uint64_t)buf);
    if (*(_QWORD *)v167 <= (unint64_t)v153)
      std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
    v6 = *(_QWORD *)(*(_QWORD *)buf + (((unint64_t)v153 >> 3) & 0x1FFFFFF8));
    operator delete(*(void **)buf);
    if (((v6 >> v153) & 1) != 0)
    {
      ULDatabase::connectIfNecessary(a1[4]);
      if (((*((uint64_t (**)(ULDatabase *))a1[4]->var0 + 2))(a1[4]) & 1) != 0)
      {
        v7 = cl::chrono::CFAbsoluteTimeClock::now();
        if (!objc_msgSend(MEMORY[0x24BE669E0], "isInternalInstall"))
          goto LABEL_30;
        +[ULDefaultsSingleton shared](ULDefaultsSingleton, "shared");
        v8 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v8, "defaultsDictionary");
        v9 = (void *)objc_claimAutoreleasedReturnValue();

        objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "ULEnableSamplingForLearningAnalyticsOnInternal");
        v10 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v9, "objectForKey:", v10);
        v11 = (void *)objc_claimAutoreleasedReturnValue();
        if (!v11)
          goto LABEL_28;
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) != 0)
          v12 = objc_msgSend(v11, "BOOLValue");
        else
LABEL_28:
          v12 = objc_msgSend(MEMORY[0x24BDBD1C0], "BOOLValue");
        v19 = v12;

        if (!v19)
        {
          v26 = 1;
        }
        else
        {
LABEL_30:
          +[ULDefaultsSingleton shared](ULDefaultsSingleton, "shared");
          v20 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v20, "defaultsDictionary");
          v21 = (void *)objc_claimAutoreleasedReturnValue();

          objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "ULSamplingRateForLearningAnalytics");
          v22 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v21, "objectForKey:", v22);
          v23 = (void *)objc_claimAutoreleasedReturnValue();
          if (v23 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
            objc_msgSend(v23, "doubleValue");
          else
            objc_msgSend(&unk_2511ECED8, "doubleValue");
          v25 = v24;

          v26 = (double)arc4random_uniform(0xF4241u) / 1000000.0 <= v25;
        }
        v27 = ULSettings::get<ULSettings::AnalyticsSendEventEnabled>();
        v152 = v27;
        v28 = v26 & v27;
        v151 = v26 & v27;
        if (onceToken_MicroLocation_Default != -1)
          dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_55);
        v29 = (id)logObject_MicroLocation_Default;
        if (os_log_type_enabled(v29, OS_LOG_TYPE_DEBUG))
        {
          CLMicroLocationProtobufHelper::ModelTypeToDomain(v153, __p);
          v30 = v193 >= 0 ? __p : (void **)__p[0];
          *(_DWORD *)buf = 68289538;
          *(_DWORD *)&buf[4] = 0;
          *(_WORD *)v167 = 2082;
          *(_QWORD *)&v167[2] = "";
          *(_WORD *)&v167[10] = 2082;
          *(_QWORD *)&v167[12] = v30;
          *(_WORD *)&v167[20] = 1026;
          *(_DWORD *)&v167[22] = v28;
          _os_log_impl(&dword_2419D9000, v29, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Analytics events for learning\", \"model type\":%{public, location:escape_only}s, \"enabled\":%{public}hhd}", buf, 0x22u);
          if (v193 < 0)
            operator delete(__p[0]);
        }

        ULSettings::getRecordingEventsForModelType((char **)&v149);
        if (v149 == v150)
        {
          if (onceToken_MicroLocation_Default != -1)
            dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_55);
          v79 = logObject_MicroLocation_Default;
          if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 67240192;
            *(_DWORD *)&buf[4] = v153;
            _os_log_impl(&dword_2419D9000, v79, OS_LOG_TYPE_DEFAULT, "#Warning No recording events for model type %{public}d", buf, 8u);
          }
          goto LABEL_226;
        }
        LOBYTE(__p[0]) = 0;
        v194 = 0;
        v191[0] = 0;
        v191[112] = 0;
        LOBYTE(v147) = 0;
        v148 = 0;
        memset(v145, 0, sizeof(v145));
        v146 = 1065353216;
        v31 = v118;
        v144[0] = (uint64_t)v118;
        v144[1] = (uint64_t)&v153;
        v144[2] = (uint64_t)&v152;
        v144[3] = (uint64_t)__p;
        v144[4] = (uint64_t)v191;
        v144[5] = (uint64_t)&v147;
        CLMicroLocationLearner::fetchAndFilterUniqueLOIGroups(v118, (uint64_t)&v142);
        if (v153)
        {
          if (v153 == 1)
          {
            CLMicroLocationLearner::getAllClientsAndSupportedLocationTypes((uint64_t)v118, 3, 1, (uint64_t *)v174);
            CLMicroLocationLearner::getAllClientsAndSupportedLocationTypes((uint64_t)v118, 2, 1, (uint64_t *)&v159);
            *(_QWORD *)buf = v118;
            *(_QWORD *)v167 = v144;
            *(_QWORD *)&v167[8] = &v153;
            *(_QWORD *)&v167[16] = &v151;
            *(_QWORD *)&v167[24] = &v147;
            v168 = &v149;
            v169 = a2;
            v170 = v145;
            v171 = __p;
            v172 = &v142;
            CLMicroLocationLearner::learnFromModelType(std::function<BOOL ()(void)>,CLMicroLocationProto::Model_ModelType)::$_1::operator()((uint64_t)buf, (uint64_t *)v174, 3);
            CLMicroLocationLearner::learnFromModelType(std::function<BOOL ()(void)>,CLMicroLocationProto::Model_ModelType)::$_1::operator()((uint64_t)buf, (uint64_t *)&v159, 4);
            *(_QWORD *)buf = &v159;
            std::vector<CLMicroLocationClientUtils::ClientIdentitiesAndLocationTypes>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
            *(_QWORD *)buf = v174;
            std::vector<CLMicroLocationClientUtils::ClientIdentitiesAndLocationTypes>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
LABEL_223:
            (*(void (**)(_QWORD, _QWORD))(**((_QWORD **)v31 + 3) + 32))(*((_QWORD *)v31 + 3), v153);
            *(_QWORD *)buf = &v142;
            std::vector<CLMiLoLoiTable::Entry>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
            std::__hash_table<std::__hash_value_type<boost::uuids::uuid,std::weak_ptr<CLMicroLocationFingerprint>>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::weak_ptr<CLMicroLocationFingerprint>>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::weak_ptr<CLMicroLocationFingerprint>>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,std::weak_ptr<CLMicroLocationFingerprint>>>>::~__hash_table((uint64_t)v145);
            if (v148)

            std::__optional_destruct_base<CLMicroLocationConfigurationTable::Entry,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)v191);
            std::__optional_destruct_base<CLMicroLocationModelTable::Entry,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)__p);
LABEL_226:
            v111 = cl::chrono::CFAbsoluteTimeClock::now();
            if (onceToken_MicroLocationQE_Default != -1)
              dispatch_once(&onceToken_MicroLocationQE_Default, &__block_literal_global_330_0);
            v112 = (id)logObject_MicroLocationQE_Default;
            if (os_log_type_enabled(v112, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)buf = 68289538;
              *(_DWORD *)&buf[4] = 0;
              *(_WORD *)v167 = 2082;
              *(_QWORD *)&v167[2] = "";
              *(_WORD *)&v167[10] = 2050;
              *(_QWORD *)&v167[12] = v153;
              *(_WORD *)&v167[20] = 2050;
              *(double *)&v167[22] = v111 - v7;
              _os_log_impl(&dword_2419D9000, v112, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Learning, completed\", \"model-type\":%{public}lu, \"Total Time (sec)\":\"%{public}.4f\"}", buf, 0x26u);
            }

            if (v149)
            {
              v150 = v149;
              operator delete(v149);
            }
            return;
          }
          if (v153 == 2)
          {
            CLMicroLocationLearner::getAllClientsAndSupportedLocationTypes((uint64_t)v118, 4, 0, &v137);
            v32 = v137;
            v33 = v138;
            _CLLogObjectForCategory_MicroLocation_Default();
            log = objc_claimAutoreleasedReturnValue();
            v34 = os_log_type_enabled(log, OS_LOG_TYPE_DEFAULT);
            if (v32 == v33)
            {
              if (v34)
              {
                *(_DWORD *)buf = 68289026;
                *(_DWORD *)&buf[4] = 0;
                *(_WORD *)v167 = 2082;
                *(_QWORD *)&v167[2] = "";
                _os_log_impl(&dword_2419D9000, log, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"skipping Location Similarity List model learning, no such clients\"}", buf, 0x12u);
              }
            }
            else
            {
              if (v34)
              {
                *(_DWORD *)buf = 68289538;
                *(_DWORD *)&buf[4] = 0;
                *(_WORD *)v167 = 2082;
                *(_QWORD *)&v167[2] = "";
                *(_WORD *)&v167[10] = 2050;
                *(_QWORD *)&v167[12] = 0xAAAAAAAAAAAAAAABLL * ((v138 - v137) >> 4);
                *(_WORD *)&v167[20] = 2050;
                *(_QWORD *)&v167[22] = (v143 - v142) >> 6;
                _os_log_impl(&dword_2419D9000, log, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Learning Location Similarity List models for clients\", \"Num Clients\":%{public}lu, \"Num LOIs\":%{public}lu}", buf, 0x26u);
              }

              buf[0] = 0;
              v167[16] = 0;
              CLMicroLocationCoreAnalyticsPublishHelper::initializeModelLearningEventMetricsDict(v28, v153, (const std::string *)buf);
              log = objc_claimAutoreleasedReturnValue();
              v35 = (uint64_t)v118;
              if (v167[16] && (v167[15] & 0x80000000) != 0)
                operator delete(*(void **)buf);
              v36 = v142;
              for (i = v143; v36 != i; v36 += 64)
              {
                v114 = (uint64_t *)(v36 + 40);
                v37 = CLMiLoServiceManager::rtLoiStringToLocationType((uint64_t *)(v36 + 40));
                v38 = (__int128 *)(v36 + 24);
                if (v39)
                {
                  v40 = v37;
                  v134 = 0;
                  v135 = 0;
                  v133 = 0;
                  std::vector<CLMicroLocationProto::EventType>::__init_with_size[abi:ne180100]<CLMicroLocationProto::EventType*,CLMicroLocationProto::EventType*>(&v133, v149, (uint64_t)v150, (v150 - (_BYTE *)v149) >> 2);
                  CLMicroLocationLearner::selectRecordingEventTriggersForLearningMeasurementsWithTransition(v35, (uint64_t)&v133, *(_QWORD *)(v36 + 24), *(_QWORD *)(v36 + 32), (uint64_t)v136);
                  if (v133)
                  {
                    v134 = v133;
                    operator delete(v133);
                  }
                  CLMicroLocationLearner::getAnchorAppearanceMapForLoi(v35, (_OWORD *)(v36 + 24), (uint64_t)&v130);
                  if (onceToken_MicroLocation_Default != -1)
                    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_55);
                  v41 = (id)logObject_MicroLocation_Default;
                  if (os_log_type_enabled(v41, OS_LOG_TYPE_DEFAULT))
                  {
                    v42 = (char *)operator new(0x28uLL);
                    *(_QWORD *)v174 = v42;
                    *(_OWORD *)&v174[8] = xmmword_241BB2320;
                    *(_OWORD *)v42 = 0u;
                    *((_OWORD *)v42 + 1) = 0u;
                    *(_QWORD *)(v42 + 29) = 0;
                    boost::uuids::to_chars<char *>(v36 + 24, v42);
                    v43 = v174;
                    if ((v174[23] & 0x80u) != 0)
                      v43 = *(uint8_t **)v174;
                    *(_DWORD *)buf = 68289282;
                    *(_DWORD *)&buf[4] = 0;
                    *(_WORD *)v167 = 2082;
                    *(_QWORD *)&v167[2] = "";
                    *(_WORD *)&v167[10] = 2082;
                    *(_QWORD *)&v167[12] = v43;
                    _os_log_impl(&dword_2419D9000, v41, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"learning internal model for LOI\", \"loiGroupId\":%{public, location:escape_only}s}", buf, 0x1Cu);
                    if ((char)v174[23] < 0)
                      operator delete(*(void **)v174);
                  }

                  v174[0] = 0;
                  BYTE8(v190[1]) = 0;
                  v35 = (uint64_t)v118;
                  CLMicroLocationLearner::learnMagicalMomentsModelInternal((uint64_t)v118, log, (uint64_t)v136, a2, (uint64_t)&v130, (const CLMicroLocationProto::Model *)v145, v36 + 24, (uint64_t)v174, buf, v7, v153);
                  std::__optional_destruct_base<CLMicroLocationModelTable::Entry,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)v174);
                  if (v173 && CLMicroLocationModel::isValid((CLMicroLocationModel *)buf))
                  {
                    if (!v173)
                      std::__throw_bad_optional_access[abi:ne180100]();
                    v128[0] = 0;
                    v129 = 0;
                    +[ULDefaultsSingleton shared](ULDefaultsSingleton, "shared");
                    v44 = (void *)objc_claimAutoreleasedReturnValue();
                    objc_msgSend(v44, "defaultsDictionary");
                    v45 = (void *)objc_claimAutoreleasedReturnValue();

                    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "ULClusterAnchorValueStatisticsEnabled");
                    v46 = (void *)objc_claimAutoreleasedReturnValue();
                    objc_msgSend(v45, "objectForKey:", v46);
                    v47 = (void *)objc_claimAutoreleasedReturnValue();
                    if (v47 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
                      v48 = objc_msgSend(v47, "BOOLValue");
                    else
                      v48 = objc_msgSend(MEMORY[0x24BDBD1C8], "BOOLValue");
                    v54 = v48;

                    if (v54)
                      std::optional<CLMicroLocationAnchorValueStatisticsMap>::emplace[abi:ne180100]<CLMicroLocationModel &,CLMicroLocationFingerprintPool &,void>((CLMicroLocationAnchorValueStatisticsMap *)v128, (CLMicroLocationModel *)buf, (CLMicroLocationFingerprintPool *)v145);
                    v55 = v137;
                    for (j = v138; v55 != j; v55 += 48)
                    {
                      v57 = CLMiLoService::uint64ToLocationTypesBitset(*(_QWORD *)(v55 + 40));
                      if (v40 >= 0x20)
                        std::__throw_out_of_range[abi:ne180100]("bitset test argument out of range");
                      if ((v57 & (1 << v40)) != 0)
                      {
                        if (onceToken_MicroLocation_Default != -1)
                          dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_55);
                        v58 = (id)logObject_MicroLocation_Default;
                        if (os_log_type_enabled(v58, OS_LOG_TYPE_DEFAULT))
                        {
                          v59 = v55;
                          if (*(char *)(v55 + 23) < 0)
                            v59 = *(_QWORD *)v55;
                          v60 = operator new(0x28uLL);
                          v159 = (void **)v60;
                          v160 = (uuid)xmmword_241BB2320;
                          *v60 = 0u;
                          v60[1] = 0u;
                          *(_QWORD *)((char *)v60 + 29) = 0;
                          boost::uuids::to_chars<char *>(v55 + 24, v60);
                          if ((v160.var0[15] & 0x80u) == 0)
                            v61 = (void **)&v159;
                          else
                            v61 = v159;
                          v62 = (char *)operator new(0x28uLL);
                          *(_QWORD *)v154 = v62;
                          *(_OWORD *)v155 = xmmword_241BB2320;
                          *(_OWORD *)v62 = 0u;
                          *((_OWORD *)v62 + 1) = 0u;
                          *(_QWORD *)(v62 + 29) = 0;
                          boost::uuids::to_chars<char *>(v36 + 24, v62);
                          v63 = v154;
                          if (v155[15] < 0)
                            v63 = *(uint8_t **)v154;
                          v64 = v36 + 40;
                          if (*(char *)(v36 + 63) < 0)
                            v64 = *v114;
                          *(_DWORD *)v174 = 68290050;
                          *(_DWORD *)&v174[4] = 0;
                          *(_WORD *)&v174[8] = 2082;
                          *(_QWORD *)&v174[10] = "";
                          *(_WORD *)&v174[18] = 2082;
                          *(_QWORD *)&v174[20] = v59;
                          *(_WORD *)&v174[28] = 2082;
                          *(_QWORD *)&v174[30] = v61;
                          *(_WORD *)&v174[38] = 2082;
                          *(_QWORD *)&v174[40] = v63;
                          LOWORD(v175) = 2082;
                          *(_QWORD *)((char *)&v175 + 2) = v64;
                          _os_log_impl(&dword_2419D9000, v58, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"learning a Location Similarity List model for client\", \"ClientId\":%{public, location:escape_only}s, \"serviceUUID\":%{public, location:escape_only}s, \"loiGroupId\":%{public, location:escape_only}s, \"loiType\":%{public, location:escape_only}s}", v174, 0x3Au);
                          if ((v155[15] & 0x80000000) != 0)
                            operator delete(*(void **)v154);
                          if ((char)v160.var0[15] < 0)
                            operator delete(v159);
                        }

                        if (log)
                        {
                          objc_msgSend(MEMORY[0x24BDBCED8], "dictionaryWithDictionary:", log);
                          v65 = (void *)objc_claimAutoreleasedReturnValue();
                          v66 = v55;
                          if (*(char *)(v55 + 23) < 0)
                            v66 = *(_QWORD *)v55;
                          objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", v66);
                          v67 = (void *)objc_claimAutoreleasedReturnValue();
                          objc_msgSend(v65, "setObject:forKeyedSubscript:", v67, CFSTR("clientIdentifier"));

                        }
                        else
                        {
                          v65 = 0;
                        }
                        v68 = *(id *)(*((_QWORD *)v118 + 4) + 72);
                        v69 = v68;
                        v164 = *(_OWORD *)(v55 + 24);
                        v165 = 1;
                        v162 = *v38;
                        v163 = 1;
                        if (v68)
                        {
                          objc_msgSend(v68, "fetchMostRecentModelOfModelType:ForService:atLoiGroupId:", 2, &v164, &v162);
                        }
                        else
                        {
                          memset(v190, 0, sizeof(v190));
                          v189 = 0u;
                          v188 = 0u;
                          v187 = 0u;
                          v186 = 0u;
                          v185 = 0u;
                          v184 = 0u;
                          v183 = 0u;
                          v182 = 0u;
                          v181 = 0u;
                          v180 = 0u;
                          v179 = 0u;
                          v178 = 0u;
                          v177 = 0u;
                          v176 = 0u;
                          v175 = 0u;
                          memset(v174, 0, sizeof(v174));
                        }

                        LOBYTE(v126[0]) = 0;
                        v127 = 0;
                        if (BYTE8(v190[1]))
                        {
                          v126[0] = HIDWORD(v180) | ((unint64_t)BYTE8(v180) << 32);
                          v126[1] = *(_QWORD *)&v174[16];
                          v127 = 1;
                        }
                        std::__optional_destruct_base<CLMicroLocationModelTable::Entry,false>::reset[abi:ne180100]((uint64_t)v174);
                        v124 = 0;
                        v125 = 0;
                        v123 = 0;
                        std::vector<CLMicroLocationProto::EventType>::__init_with_size[abi:ne180100]<CLMicroLocationProto::EventType*,CLMicroLocationProto::EventType*>(&v123, v149, (uint64_t)v150, (v150 - (_BYTE *)v149) >> 2);
                        CLMicroLocationLearner::learnLocationSimilarityListModel((uint64_t)v118, v65, a2, (const std::string::value_type *)v55, (uint64_t)buf, (uint64_t *)(v36 + 24), (uint64_t)&v123, (uint64_t)&v159, v7, (uint64_t)v126);
                        if (v123)
                        {
                          v124 = v123;
                          operator delete(v123);
                        }
                        if (v161)
                        {
                          if (v129)
                          {
                            CLMicroLocationAnchorValueStatisticsMap::toConfigurationEntry((CLMicroLocationAnchorValueStatisticsMap *)v128, (uint64_t)v154);
                            *(_OWORD *)&v157[2] = *v38;
                            std::optional<CLMicroLocationConfigurationTable::Entry>::operator=[abi:ne180100]<CLMicroLocationConfigurationTable::Entry,void>((uint64_t)v191, (uint64_t)v154);
                            CLMicroLocationProto::Configuration::~Configuration((CLMicroLocationProto::Configuration *)&v158);
                            if ((v157[1] & 0x80000000) != 0)
                              operator delete(*(void **)v155);
                            if (!v161)
                              std::__throw_bad_optional_access[abi:ne180100]();
                          }
                          std::optional<CLMicroLocationModelTable::Entry>::operator=[abi:ne180100]<CLMicroLocationModelTable::Entry,void>((uint64_t)__p, (uint64_t)&v159);
                          if (onceToken_MicroLocation_Default != -1)
                            dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_55);
                          v70 = (id)logObject_MicroLocation_Default;
                          if (os_log_type_enabled(v70, OS_LOG_TYPE_DEFAULT))
                          {
                            v71 = v55;
                            if (*(char *)(v55 + 23) < 0)
                              v71 = *(_QWORD *)v55;
                            v72 = operator new(0x28uLL);
                            v121 = v72;
                            v122 = xmmword_241BB2320;
                            *v72 = 0u;
                            v72[1] = 0u;
                            *(_QWORD *)((char *)v72 + 29) = 0;
                            boost::uuids::to_chars<char *>(v55 + 24, v72);
                            if (v122 >= 0)
                              v73 = &v121;
                            else
                              v73 = v121;
                            v74 = operator new(0x28uLL);
                            v119 = v74;
                            v120 = xmmword_241BB2320;
                            *v74 = 0u;
                            v74[1] = 0u;
                            *(_QWORD *)((char *)v74 + 29) = 0;
                            boost::uuids::to_chars<char *>((uint64_t)&v159, v74);
                            v75 = &v119;
                            if (v120 < 0)
                              v75 = v119;
                            *(_DWORD *)v154 = 68289794;
                            *(_DWORD *)&v154[4] = 0;
                            *(_WORD *)v155 = 2082;
                            *(_QWORD *)&v155[2] = "";
                            *(_WORD *)&v155[10] = 2082;
                            *(_QWORD *)&v155[12] = v71;
                            v156 = 2082;
                            *(_QWORD *)v157 = v73;
                            *(_WORD *)&v157[8] = 2082;
                            *(_QWORD *)&v157[10] = v75;
                            _os_log_impl(&dword_2419D9000, v70, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Inserted Similarity list Model\", \"ClientId\":%{public, location:escape_only}s, \"serviceUUID\":%{public, location:escape_only}s, \"ModelUuid\":%{public, location:escape_only}s}", v154, 0x30u);
                            if (SHIBYTE(v120) < 0)
                              operator delete(v119);
                            if (SHIBYTE(v122) < 0)
                              operator delete(v121);
                          }

                        }
                        if (v65)
                        {
                          v76 = v148;
                          v77 = v65;
                          if (v76)
                          {
                            v78 = v147;
                            v147 = v77;

                          }
                          else
                          {
                            v147 = v77;
                            v148 = 1;
                          }
                        }
                        CLMicroLocationLearner::learnFromModelType(std::function<BOOL ()(void)>,CLMicroLocationProto::Model_ModelType)::$_0::operator()(v144);
                        std::__optional_destruct_base<CLMicroLocationModelTable::Entry,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v159);
                        std::__optional_destruct_base<CLMicroLocationModelTable::Entry,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)v174);

                      }
                    }
                    if (v129)
                      std::__hash_table<std::__hash_value_type<boost::uuids::uuid,std::unordered_map<std::string,AnchorValueStatistics>>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::unordered_map<std::string,AnchorValueStatistics>>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::unordered_map<std::string,AnchorValueStatistics>>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,std::unordered_map<std::string,AnchorValueStatistics>>>>::~__hash_table((uint64_t)v128);
                    v35 = (uint64_t)v118;
                  }
                  else
                  {
                    if (onceToken_MicroLocation_Default != -1)
                      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_55);
                    v49 = logObject_MicroLocation_Default;
                    if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
                    {
                      *(_DWORD *)v174 = 68289026;
                      *(_DWORD *)&v174[4] = 0;
                      *(_WORD *)&v174[8] = 2082;
                      *(_QWORD *)&v174[10] = "";
                      _os_log_impl(&dword_2419D9000, v49, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Similarity List Model Learning, unsupervised model not created or is invalid so learning is skipped\"}", v174, 0x12u);
                    }
                  }
                  std::__optional_destruct_base<CLMicroLocationModel,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)buf);
                  std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>>>::~__hash_table((uint64_t)&v130);
                  *(_QWORD *)buf = v136;
                  std::vector<CLMicroLocationRecordingEventsTable::Entry>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
                }
                else
                {
                  if (onceToken_MicroLocation_Default != -1)
                    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_55);
                  v50 = (id)logObject_MicroLocation_Default;
                  if (os_log_type_enabled(v50, OS_LOG_TYPE_DEFAULT))
                  {
                    v51 = (char *)operator new(0x28uLL);
                    *(_QWORD *)v174 = v51;
                    *(_OWORD *)&v174[8] = xmmword_241BB2320;
                    *(_OWORD *)v51 = 0u;
                    *((_OWORD *)v51 + 1) = 0u;
                    *(_QWORD *)(v51 + 29) = 0;
                    boost::uuids::to_chars<char *>(v36 + 24, v51);
                    v52 = v174;
                    if ((v174[23] & 0x80u) != 0)
                      v52 = *(uint8_t **)v174;
                    v53 = v36 + 40;
                    if (*(char *)(v36 + 63) < 0)
                      v53 = *v114;
                    *(_DWORD *)buf = 68289538;
                    *(_DWORD *)&buf[4] = 0;
                    *(_WORD *)v167 = 2082;
                    *(_QWORD *)&v167[2] = "";
                    *(_WORD *)&v167[10] = 2082;
                    *(_QWORD *)&v167[12] = v52;
                    *(_WORD *)&v167[20] = 2082;
                    *(_QWORD *)&v167[22] = v53;
                    _os_log_impl(&dword_2419D9000, v50, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"skipping Location Similarity List model learning because of LOI\", \"loiGroupId\":%{public, location:escape_only}s, \"loiType\":%{public, location:escape_only}s}", buf, 0x26u);
                    if ((char)v174[23] < 0)
                      operator delete(*(void **)v174);
                  }

                  v35 = (uint64_t)v118;
                }
              }
            }

            *(_QWORD *)buf = &v137;
            std::vector<CLMicroLocationClientUtils::ClientIdentitiesAndLocationTypes>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
          }
          else
          {
            _CLLogObjectForCategory_MicroLocation_Default();
            v82 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v82, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 68289282;
              *(_DWORD *)&buf[4] = 0;
              *(_WORD *)v167 = 2082;
              *(_QWORD *)&v167[2] = "";
              *(_WORD *)&v167[10] = 2050;
              *(_QWORD *)&v167[12] = v153;
              _os_log_impl(&dword_2419D9000, v82, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"invalid model type\", \"model type\":%{public}lu}", buf, 0x1Cu);
            }

            _CLLogObjectForCategory_MicroLocation_Default();
            v83 = objc_claimAutoreleasedReturnValue();
            if (os_signpost_enabled(v83))
            {
              *(_DWORD *)buf = 68289282;
              *(_DWORD *)&buf[4] = 0;
              *(_WORD *)v167 = 2082;
              *(_QWORD *)&v167[2] = "";
              *(_WORD *)&v167[10] = 2050;
              *(_QWORD *)&v167[12] = v153;
              _os_signpost_emit_with_name_impl(&dword_2419D9000, v83, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "invalid model type", "{\"msg%{public}.0s\":\"invalid model type\", \"model type\":%{public}lu}", buf, 0x1Cu);
            }

          }
        }
        else
        {
          v80 = *(id *)(*((_QWORD *)v118 + 4) + 96);
          v81 = v80;
          if (v80)
          {
            objc_msgSend(v80, "fetchAllServicesForServiceType:", 1);
          }
          else
          {
            *(_QWORD *)v155 = 0;
            *(_QWORD *)v154 = 0;
            *(_QWORD *)&v155[8] = 0;
          }

          v84 = (uint64_t *)&v131;
          v131 = 0;
          v132 = 0;
          v130 = (uint64_t *)&v131;
          v85 = *(uint64_t **)v154;
          v86 = *(uint64_t **)v155;
          while (v85 != v86)
          {
            v88 = *v85;
            v87 = (uint64_t)(v85 + 4);
            CLMiLoService::modelClientIdentifierStringForServiceTypeAndClientId(v88, v87, (std::string *)buf);
            std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>(&v130, (const void **)buf, (uint64_t)buf);
            if ((v167[15] & 0x80000000) != 0)
              operator delete(*(void **)buf);
            v85 = (uint64_t *)(v87 + 56);
          }
          _CLLogObjectForCategory_MicroLocation_Default();
          v89 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v89, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 68289538;
            *(_DWORD *)&buf[4] = 0;
            *(_WORD *)v167 = 2082;
            *(_QWORD *)&v167[2] = "";
            *(_WORD *)&v167[10] = 2050;
            *(_QWORD *)&v167[12] = v132;
            *(_WORD *)&v167[20] = 2050;
            *(_QWORD *)&v167[22] = (v143 - v142) >> 6;
            _os_log_impl(&dword_2419D9000, v89, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Learning Unsupervised Model for clients\", \"Num Clients\":%{public}lu, \"Num LOIs\":%{public}lu}", buf, 0x26u);
          }

          v90 = v142;
          for (k = v143; v90 != k; v90 += 64)
          {
            v91 = (void ***)(v90 + 40);
            v92 = CLMiLoServiceManager::rtLoiStringToLocationType((uint64_t *)(v90 + 40));
            if (v93)
              v94 = v92 == 0;
            else
              v94 = 0;
            if (v94)
            {
              v140 = 0;
              v141 = 0;
              v139 = 0;
              std::vector<CLMicroLocationProto::EventType>::__init_with_size[abi:ne180100]<CLMicroLocationProto::EventType*,CLMicroLocationProto::EventType*>(&v139, v149, (uint64_t)v150, (v150 - (_BYTE *)v149) >> 2);
              CLMicroLocationLearner::selectRecordingEventTriggersForLearningMeasurementsWithTransition((uint64_t)v118, (uint64_t)&v139, *(_QWORD *)(v90 + 24), *(_QWORD *)(v90 + 32), (uint64_t)v128);
              if (v139)
              {
                v140 = v139;
                operator delete(v139);
              }
              CLMicroLocationLearner::getAnchorAppearanceMapForLoi((uint64_t)v118, (_OWORD *)(v90 + 24), (uint64_t)&v159);
              v98 = v130;
              if (v130 != v84)
              {
                do
                {
                  buf[0] = 0;
                  v167[16] = 0;
                  CLMicroLocationCoreAnalyticsPublishHelper::initializeModelLearningEventMetricsDict(v151, v153, (const std::string *)buf);
                  v99 = (void *)objc_claimAutoreleasedReturnValue();
                  if (v167[16] && (v167[15] & 0x80000000) != 0)
                    operator delete(*(void **)buf);
                  if (onceToken_MicroLocation_Default != -1)
                    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_55);
                  v100 = (id)logObject_MicroLocation_Default;
                  if (os_log_type_enabled(v100, OS_LOG_TYPE_DEFAULT))
                  {
                    v101 = v84;
                    v102 = v98 + 4;
                    if (*((char *)v98 + 55) < 0)
                      v102 = (uint64_t *)v98[4];
                    v103 = (char *)operator new(0x28uLL);
                    *(_QWORD *)v174 = v103;
                    *(_OWORD *)&v174[8] = xmmword_241BB2320;
                    *(_OWORD *)v103 = 0u;
                    *((_OWORD *)v103 + 1) = 0u;
                    *(_QWORD *)(v103 + 29) = 0;
                    boost::uuids::to_chars<char *>(v90 + 24, v103);
                    v104 = v174;
                    if ((v174[23] & 0x80u) != 0)
                      v104 = *(uint8_t **)v174;
                    v105 = (void **)(v90 + 40);
                    if (*(char *)(v90 + 63) < 0)
                      v105 = *v91;
                    *(_DWORD *)buf = 68289794;
                    *(_DWORD *)&buf[4] = 0;
                    *(_WORD *)v167 = 2082;
                    *(_QWORD *)&v167[2] = "";
                    *(_WORD *)&v167[10] = 2082;
                    *(_QWORD *)&v167[12] = v102;
                    *(_WORD *)&v167[20] = 2082;
                    *(_QWORD *)&v167[22] = v104;
                    *(_WORD *)&v167[30] = 2082;
                    v168 = v105;
                    _os_log_impl(&dword_2419D9000, v100, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Learning Unsupervised Model for client\", \"Client ID\":%{public, location:escape_only}s, \"loiGroupId\":%{public, location:escape_only}s, \"loiType\":%{public, location:escape_only}s}", buf, 0x30u);
                    if ((char)v174[23] < 0)
                      operator delete(*(void **)v174);
                    v84 = v101;
                  }

                  CLMicroLocationLearner::getMostRecentMagicalMomentsModelForClientAtLoi((uint64_t)v118, (uint64_t)(v98 + 4), *(_QWORD *)(v90 + 24), *(_QWORD *)(v90 + 32), buf);
                  CLMicroLocationLearner::learnMagicalMomentsModel((uint64_t)v118, v99, (uint64_t)v128, a2, (uint64_t)&v159, (const CLMicroLocationProto::Model *)v145, (uint64_t)(v98 + 4), (_QWORD *)(v90 + 24), v174, (uint64_t)buf);
                  if (BYTE8(v190[1]))
                  {
                    *(_OWORD *)((char *)v190 + 1) = *(_OWORD *)(v90 + 24);
                    std::optional<CLMicroLocationModelTable::Entry>::operator=[abi:ne180100]<CLMicroLocationModelTable::Entry,void>((uint64_t)__p, (uint64_t)v174);
                    std::__optional_destruct_base<CLMicroLocationModelTable::Entry,false>::reset[abi:ne180100]((uint64_t)v174);
                  }
                  if (v99)
                  {
                    v106 = v148;
                    v107 = v99;
                    if (v106)
                    {
                      v108 = v147;
                      v147 = v107;

                    }
                    else
                    {
                      v147 = v107;
                      v148 = 1;
                    }
                  }
                  CLMicroLocationLearner::learnFromModelType(std::function<BOOL ()(void)>,CLMicroLocationProto::Model_ModelType)::$_0::operator()(v144);
                  std::__optional_destruct_base<CLMicroLocationModelTable::Entry,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)v174);
                  std::__optional_destruct_base<CLMicroLocationModelTable::Entry,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)buf);

                  v109 = (uint64_t *)v98[1];
                  if (v109)
                  {
                    do
                    {
                      v110 = v109;
                      v109 = (uint64_t *)*v109;
                    }
                    while (v109);
                  }
                  else
                  {
                    do
                    {
                      v110 = (uint64_t *)v98[2];
                      v94 = *v110 == (_QWORD)v98;
                      v98 = v110;
                    }
                    while (!v94);
                  }
                  v98 = v110;
                }
                while (v110 != v84);
              }
              std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>>>::~__hash_table((uint64_t)&v159);
              *(_QWORD *)buf = v128;
              std::vector<CLMicroLocationRecordingEventsTable::Entry>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
            }
            else
            {
              if (onceToken_MicroLocation_Default != -1)
                dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_55);
              v95 = (id)logObject_MicroLocation_Default;
              if (os_log_type_enabled(v95, OS_LOG_TYPE_DEFAULT))
              {
                v96 = (char *)operator new(0x28uLL);
                *(_QWORD *)v174 = v96;
                *(_OWORD *)&v174[8] = xmmword_241BB2320;
                *(_OWORD *)v96 = 0u;
                *((_OWORD *)v96 + 1) = 0u;
                *(_QWORD *)(v96 + 29) = 0;
                boost::uuids::to_chars<char *>(v90 + 24, v96);
                v97 = v174;
                if ((v174[23] & 0x80u) != 0)
                  v97 = *(uint8_t **)v174;
                if (*(char *)(v90 + 63) < 0)
                  v91 = (void ***)*v91;
                *(_DWORD *)buf = 68289538;
                *(_DWORD *)&buf[4] = 0;
                *(_WORD *)v167 = 2082;
                *(_QWORD *)&v167[2] = "";
                *(_WORD *)&v167[10] = 2082;
                *(_QWORD *)&v167[12] = v97;
                *(_WORD *)&v167[20] = 2082;
                *(_QWORD *)&v167[22] = v91;
                _os_log_impl(&dword_2419D9000, v95, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"skipping Location Unsupervised model learning because of LOI\", \"loiGroupId\":%{public, location:escape_only}s, \"loiType\":%{public, location:escape_only}s}", buf, 0x26u);
                if ((char)v174[23] < 0)
                  operator delete(*(void **)v174);
              }

            }
          }
          std::__tree<std::string>::destroy((uint64_t)&v130, v131);
          *(_QWORD *)buf = v154;
          std::vector<CLMiLoServiceTable::Entry>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
        }
        v31 = v118;
        goto LABEL_223;
      }
      if (onceToken_MicroLocation_Default != -1)
        dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_55);
      v13 = logObject_MicroLocation_Default;
      if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        v14 = "#Warning Tried to run learning, but database is not valid";
        goto LABEL_25;
      }
    }
    else
    {
      if (onceToken_MicroLocation_Default != -1)
        dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_55);
      v15 = logObject_MicroLocation_Default;
      if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 67174657;
        *(_DWORD *)&buf[4] = v153;
        v14 = "Model Type %{private}d disabled in settings";
        v16 = v15;
        v17 = OS_LOG_TYPE_DEBUG;
        v18 = 8;
LABEL_26:
        _os_log_impl(&dword_2419D9000, v16, v17, v14, buf, v18);
      }
    }
  }
  else
  {
    if (onceToken_MicroLocation_Default != -1)
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_55);
    v13 = logObject_MicroLocation_Default;
    if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      v14 = "#Warning Tried to run learning, but learning is disabled";
LABEL_25:
      v16 = v13;
      v17 = OS_LOG_TYPE_DEFAULT;
      v18 = 2;
      goto LABEL_26;
    }
  }
}

void sub_241A816E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,void *a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a66;
  char a72;
  void *v73;

  if (LOBYTE(STACK[0x4A8]) && SLOBYTE(STACK[0x4A7]) < 0)
    operator delete((void *)STACK[0x490]);
  STACK[0x490] = (unint64_t)&a66;
  std::vector<CLMicroLocationClientUtils::ClientIdentitiesAndLocationTypes>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x490]);
  STACK[0x490] = (unint64_t)&a72;
  std::vector<CLMiLoLoiTable::Entry>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x490]);
  std::__hash_table<std::__hash_value_type<boost::uuids::uuid,std::weak_ptr<CLMicroLocationFingerprint>>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::weak_ptr<CLMicroLocationFingerprint>>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::weak_ptr<CLMicroLocationFingerprint>>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,std::weak_ptr<CLMicroLocationFingerprint>>>>::~__hash_table((uint64_t)&STACK[0x240]);
  if (LOBYTE(STACK[0x278]))

  std::__optional_destruct_base<CLMicroLocationConfigurationTable::Entry,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&STACK[0x7A0]);
  std::__optional_destruct_base<CLMicroLocationModelTable::Entry,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&STACK[0x818]);
  v73 = (void *)STACK[0x280];
  if (STACK[0x280])
  {
    STACK[0x288] = (unint64_t)v73;
    operator delete(v73);
  }
  _Unwind_Resume(a1);
}

uint64_t ULSettings::get<ULSettings::EnableLearning>()
{
  void *v0;
  void *v1;
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;

  +[ULDefaultsSingleton shared](ULDefaultsSingleton, "shared");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "defaultsDictionary");
  v1 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "ULEnableLearning");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "objectForKey:", v2);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  if (v3 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
    v4 = objc_msgSend(v3, "BOOLValue");
  else
    v4 = objc_msgSend(MEMORY[0x24BDBD1C8], "BOOLValue");
  v5 = v4;

  return v5;
}

void sub_241A81BF8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void ULSettings::get<ULSettings::EnabledModelTypes>(uint64_t a1@<X8>)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  id v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t i;
  __int128 v12;
  char *v13;
  __int128 v14;
  char v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  char *v20;
  __int128 v21;
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  +[ULDefaultsSingleton shared](ULDefaultsSingleton, "shared");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "defaultsDictionary");
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "ULEnabledModelTypes");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "objectForKey:", v4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  if (v5 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
  {
    v6 = v5;
    v14 = 0uLL;
    v13 = 0;
    std::vector<BOOL>::reserve(&v13, objc_msgSend(v6, "count"));
    v18 = 0u;
    v19 = 0u;
    v16 = 0u;
    v17 = 0u;
    v7 = v6;
    v8 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v16, &v20, 16);
    if (v8)
    {
      v9 = *(_QWORD *)v17;
      do
      {
        v10 = 0;
        do
        {
          if (*(_QWORD *)v17 != v9)
            objc_enumerationMutation(v7);
          v15 = objc_msgSend(*(id *)(*((_QWORD *)&v16 + 1) + 8 * v10), "BOOLValue");
          std::vector<BOOL>::push_back((uint64_t)&v13, &v15);
          ++v10;
        }
        while (v8 != v10);
        v8 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v16, &v20, 16);
      }
      while (v8);
    }

    *(_QWORD *)a1 = v13;
    *(_OWORD *)(a1 + 8) = v14;

  }
  else
  {
    v20 = 0;
    v21 = 0uLL;
    std::vector<BOOL>::reserve(&v20, 4uLL);
    for (i = 0; i != 4; ++i)
    {
      LOBYTE(v16) = _ZGRN10ULSettings14SettingsTraitsINS_17EnabledModelTypesEE12defaultValueE_[i];
      std::vector<BOOL>::push_back((uint64_t)&v20, &v16);
    }
    v12 = v21;
    *(_QWORD *)a1 = v20;
    *(_OWORD *)(a1 + 8) = v12;
  }

}

void sub_241A81E4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22)
{
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;

  if (__p)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void sub_241A81F94(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void CLMicroLocationLearner::selectRecordingEventTriggersForLearningMeasurementsWithTransition(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  id v8;
  void *v9;
  id v10;
  void *v11;
  void **v12[2];
  char v13;
  __int128 v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)&v16 = a3;
  *((_QWORD *)&v16 + 1) = a4;
  v8 = *(id *)(*(_QWORD *)(a1 + 32) + 88);
  v9 = v8;
  v14 = v16;
  LOBYTE(v15) = 1;
  if (v8)
  {
    objc_msgSend(v8, "fetchRecordingEventTriggersForLearningMeasurements:atLoiGroupId:", a2, &v14);
  }
  else
  {
    *(_QWORD *)a5 = 0;
    *(_QWORD *)(a5 + 8) = 0;
    *(_QWORD *)(a5 + 16) = 0;
  }

  if (v16 != 0)
  {
    v10 = *(id *)(*(_QWORD *)(a1 + 32) + 88);
    v11 = v10;
    v12[0] = 0;
    v12[1] = 0;
    v13 = 1;
    if (v10)
    {
      objc_msgSend(v10, "fetchRecordingEventTriggersForLearningMeasurements:atLoiGroupId:", a2, v12);
    }
    else
    {
      v14 = 0uLL;
      v15 = 0;
    }

    std::vector<CLMicroLocationRecordingEventsTable::Entry>::__insert_with_size[abi:ne180100]<std::__wrap_iter<CLMicroLocationRecordingEventsTable::Entry*>,std::__wrap_iter<CLMicroLocationRecordingEventsTable::Entry*>>((uint64_t *)a5, *(__int128 **)(a5 + 8), (__int128 *)v14, *((__int128 **)&v14 + 1), 0xEF7BDEF7BDEF7BDFLL * ((uint64_t)(*((_QWORD *)&v14 + 1) - v14) >> 3));
    v12[0] = (void **)&v14;
    std::vector<CLMicroLocationRecordingEventsTable::Entry>::__destroy_vector::operator()[abi:ne180100](v12);
  }
}

void sub_241A82108(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  void *v5;
  va_list va;

  va_start(va, a5);

  std::vector<CLMicroLocationRecordingEventsTable::Entry>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void CLMicroLocationLearner::getMostRecentMagicalMomentsModelForClientAtLoi(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _OWORD *a5@<X8>)
{
  id v9;
  std::string __p;

  v9 = *(id *)(*(_QWORD *)(a1 + 32) + 72);
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    __p = *(std::string *)a2;
  if (v9)
  {
    objc_msgSend(v9, "fetchMostRecentMagicalMomentsModelForClient:atLoiGroupId:", &__p, a3, a4);
  }
  else
  {
    a5[18] = 0u;
    a5[19] = 0u;
    a5[16] = 0u;
    a5[17] = 0u;
    a5[14] = 0u;
    a5[15] = 0u;
    a5[12] = 0u;
    a5[13] = 0u;
    a5[10] = 0u;
    a5[11] = 0u;
    a5[8] = 0u;
    a5[9] = 0u;
    a5[6] = 0u;
    a5[7] = 0u;
    a5[4] = 0u;
    a5[5] = 0u;
    a5[2] = 0u;
    a5[3] = 0u;
    *a5 = 0u;
    a5[1] = 0u;
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);

}

void sub_241A82228(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  void *v14;

  _Unwind_Resume(a1);
}

void CLMicroLocationLearner::learnMagicalMomentsModel(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, const CLMicroLocationProto::Model *a6@<X5>, uint64_t a7@<X6>, _QWORD *a8@<X7>, _BYTE *a9@<X8>, uint64_t a10)
{
  id v18;
  double v19;
  NSObject *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  NSObject *v28;
  std::string v29;
  char v30;
  _BYTE v31[212];
  int v32;
  _BYTE v33[4];
  int v34;
  uint64_t v35;
  int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  int v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  _BYTE v46[17];
  uint8_t buf[4];
  int v48;
  __int16 v49;
  const char *v50;
  __int16 v51;
  uint64_t v52;
  __int16 v53;
  uint64_t v54;
  __int16 v55;
  uint64_t v56;
  __int16 v57;
  int v58;
  __int16 v59;
  uint64_t v60;
  __int16 v61;
  int v62;
  __int16 v63;
  int v64;
  __int16 v65;
  int v66;
  __int16 v67;
  int v68;
  __int16 v69;
  int v70;
  __int16 v71;
  int v72;
  __int16 v73;
  int v74;
  void *__p;
  char v76;
  char v77;
  uint64_t v78;

  v78 = *MEMORY[0x24BDAC8D0];
  v18 = a2;
  *a9 = 0;
  a9[312] = 0;
  v19 = cl::chrono::CFAbsoluteTimeClock::now();
  CLMicroLocationLearner::learnMagicalMomentsModelInternal(a1, v18, a3, a4, a5, a6, (uint64_t)a8, a10, v33, v19, 0);
  if (v45 && CLMicroLocationModel::isValid((CLMicroLocationModel *)v33))
  {
    if (onceToken_MicroLocationQE_Default != -1)
      dispatch_once(&onceToken_MicroLocationQE_Default, &__block_literal_global_330_0);
    v20 = (id)logObject_MicroLocationQE_Default;
    if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
    {
      v21 = CLMicroLocationModel::numRecordingsBeforePruning((CLMicroLocationModel *)v33);
      v22 = v44;
      v23 = v43;
      v24 = CLMicroLocationModel::numClusters((CLMicroLocationModel *)v33);
      *(_DWORD *)buf = 68292098;
      v48 = 0;
      v49 = 2082;
      v50 = "";
      v51 = 2050;
      v52 = v21;
      v53 = 2050;
      v54 = (v22 - v23) >> 5;
      v55 = 2050;
      v56 = v24;
      v57 = 1026;
      v58 = v34;
      v59 = 2050;
      v60 = v35;
      v61 = 1026;
      v62 = v36;
      v63 = 1026;
      v64 = v37;
      v65 = 1026;
      v66 = v39;
      v67 = 1026;
      v68 = v38;
      v69 = 1026;
      v70 = v40;
      v71 = 1026;
      v72 = v41;
      v73 = 1026;
      v74 = v42;
      _os_log_impl(&dword_2419D9000, v20, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Microlocation model learned\", \"numFingerprints before pruning\":%{public}lu, \"numFingerprints after pruning\":%{public}lu, \"numClusters\":%{public}lu, \"type\":%{public}d, \"numAnchors\":%{public}lu, \"Number of Recording triggers at current LOI\":%{public}u, \"Number of Input Valid Fingerprints\":%{public}u, \"Number of Input Valid Fingerprints Labeled\":%{public}u, \"Number of Input Valid Fingerprints Unlabeled\":%{public}u, \"Number of WiFi Access Points\":%{public}u, \"Number of Ble Sources\":%{public}u, \"Number of Uwb Sources\":%{public}u}", buf, 0x6Au);
    }

    v32 = 0;
    boost::uuids::detail::random_provider_base::random_provider_base((boost::uuids::detail::random_provider_base *)&v32);
    v25 = boost::uuids::random_generator_pure::operator()((uint64_t)&v32);
    v27 = v26;
    CLMicroLocationModel::toProtobuf((CLMicroLocationModel *)v33, (uint64_t)v31);
    if (*(char *)(a7 + 23) < 0)
      std::string::__init_copy_ctor_external(&v29, *(const std::string::value_type **)a7, *(_QWORD *)(a7 + 8));
    else
      v29 = *(std::string *)a7;
    v30 = 1;
    v46[0] = 0;
    v46[16] = 0;
    CLMicroLocationModelTable::Entry::Entry(buf, v25, v27, v31, &v29, v46, *a8, a8[1], v19);
    std::optional<CLMicroLocationModelTable::Entry>::operator=[abi:ne180100]<CLMicroLocationModelTable::Entry,void>((uint64_t)a9, (uint64_t)buf);
    if (v77 && v76 < 0)
      operator delete(__p);
    CLMicroLocationProto::Model::~Model((CLMicroLocationProto::Model *)((char *)&v54 + 2));
    if (v30 && SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v29.__r_.__value_.__l.__data_);
    CLMicroLocationProto::Model::~Model((CLMicroLocationProto::Model *)v31);
    boost::uuids::detail::random_provider_base::destroy((boost::uuids::detail::random_provider_base *)&v32);
  }
  else
  {
    if (onceToken_MicroLocation_Default != -1)
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_55);
    v28 = logObject_MicroLocation_Default;
    if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67240192;
      v48 = 0;
      _os_log_impl(&dword_2419D9000, v28, OS_LOG_TYPE_DEFAULT, "No models were generated for model type %{public}d", buf, 8u);
    }
  }
  std::__optional_destruct_base<CLMicroLocationModel,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)v33);

}

void sub_241A825E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,int a42,char a43,__int16 a44,char a45)
{
  void *v45;
  uint64_t v46;

  CLMicroLocationProto::Model::~Model((CLMicroLocationProto::Model *)&a16);
  boost::uuids::detail::random_provider_base::destroy((boost::uuids::detail::random_provider_base *)&a43);
  std::__optional_destruct_base<CLMicroLocationModel,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&a45);
  std::__optional_destruct_base<CLMicroLocationModelTable::Entry,false>::~__optional_destruct_base[abi:ne180100](v46);

  _Unwind_Resume(a1);
}

uint64_t std::optional<CLMicroLocationModelTable::Entry>::operator=[abi:ne180100]<CLMicroLocationModelTable::Entry,void>(uint64_t a1, uint64_t a2)
{
  if (*(_BYTE *)(a1 + 312))
  {
    CLMicroLocationModelTable::Entry::operator=(a1, a2);
  }
  else
  {
    CLMicroLocationModelTable::Entry::Entry(a1, a2);
    *(_BYTE *)(a1 + 312) = 1;
  }
  return a1;
}

uint64_t std::optional<NSMutableDictionary * {__strong}>::operator=[abi:ne180100]<NSMutableDictionary * {__strong}&,void>(uint64_t a1, id *a2)
{
  int v3;
  id v4;
  void *v5;

  v3 = *(unsigned __int8 *)(a1 + 8);
  v4 = *a2;
  if (v3)
  {
    v5 = *(void **)a1;
    *(_QWORD *)a1 = v4;

  }
  else
  {
    *(_QWORD *)a1 = v4;
    *(_BYTE *)(a1 + 8) = 1;
  }
  return a1;
}

void CLMicroLocationLearner::learnFromModelType(std::function<BOOL ()(void)>,CLMicroLocationProto::Model_ModelType)::$_0::operator()(uint64_t *a1)
{
  uint64_t v2;
  id v3;
  const CLMicroLocationModelTable::Entry *v4;
  char v5;
  uint64_t v6;
  _OWORD *v7;
  NSObject *v8;
  NSObject *v9;
  uint64_t v10;
  int v11;
  _OWORD *v12;
  void *v13;
  void *v14;
  id v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  int v19;
  NSObject *v20;
  uint64_t v21;
  NSObject *v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  void *v33;
  __int128 v34;
  void *v35;
  __int128 v36;
  uint8_t buf[8];
  _BYTE v38[40];
  int v39;
  _BYTE v40[56];
  uint64_t v41;
  void *__p;
  char v43;
  char v44;
  uint64_t v45;

  v45 = *MEMORY[0x24BDAC8D0];
  v2 = *a1;
  if (!*(_BYTE *)(a1[3] + 312))
    goto LABEL_10;
  ++*(_DWORD *)v2;
  v3 = *(id *)(*(_QWORD *)(v2 + 32) + 72);
  v4 = (const CLMicroLocationModelTable::Entry *)a1[3];
  if (!*((_BYTE *)v4 + 312))
    std::__throw_bad_optional_access[abi:ne180100]();
  CLMicroLocationModelTable::Entry::Entry((CLMicroLocationModelTable::Entry *)buf, v4);
  v35 = 0;
  v36 = 0uLL;
  LOBYTE(v34) = 0;
  v35 = operator new(0x138uLL);
  *(_QWORD *)&v36 = v35;
  *((_QWORD *)&v36 + 1) = (char *)v35 + 312;
  *(_QWORD *)&v36 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<CLMicroLocationModelTable::Entry>,CLMicroLocationModelTable::Entry const*,CLMicroLocationModelTable::Entry const*,CLMicroLocationModelTable::Entry*>((uint64_t)&v36 + 8, (CLMicroLocationModelTable::Entry *)buf, (CLMicroLocationModelTable::Entry *)&v45, (CLMicroLocationModelTable::Entry *)v35);
  v5 = objc_msgSend(v3, "insertEntries:", &v35, &v35, (_QWORD)v34);
  v33 = &v35;
  std::vector<CLMicroLocationModelTable::Entry>::__destroy_vector::operator()[abi:ne180100]((void ***)&v33);
  if (v44 && v43 < 0)
    operator delete(__p);
  CLMicroLocationProto::Model::~Model((CLMicroLocationProto::Model *)&v38[24]);

  if ((v5 & 1) != 0)
  {
    v6 = a1[3];
    if (!*(_BYTE *)(v6 + 312))
      std::__throw_bad_optional_access[abi:ne180100]();
    if (*(_BYTE *)(v6 + 288))
    {
      v7 = operator new(0x28uLL);
      v35 = v7;
      v36 = xmmword_241BB2320;
      *v7 = 0u;
      v7[1] = 0u;
      *(_QWORD *)((char *)v7 + 29) = 0;
      boost::uuids::to_chars<char *>(v6 + 272, v7);
    }
    else
    {
      v35 = 0;
      v36 = 0uLL;
    }
    if (onceToken_MicroLocation_Default != -1)
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_55);
    v9 = (id)logObject_MicroLocation_Default;
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      v10 = a1[3];
      if (!*(_BYTE *)(v10 + 312))
        std::__throw_bad_optional_access[abi:ne180100]();
      v11 = *(_DWORD *)a1[1];
      v12 = operator new(0x28uLL);
      v33 = v12;
      v34 = xmmword_241BB2320;
      *v12 = 0u;
      v12[1] = 0u;
      *(_QWORD *)((char *)v12 + 29) = 0;
      boost::uuids::to_chars<char *>(v10, v12);
      v13 = &v33;
      if (v34 < 0)
        v13 = v33;
      v14 = &v35;
      if (v36 < 0)
        v14 = v35;
      *(_DWORD *)buf = 67240707;
      *(_DWORD *)&buf[4] = v11;
      *(_WORD *)v38 = 2081;
      *(_QWORD *)&v38[2] = v13;
      *(_WORD *)&v38[10] = 2081;
      *(_QWORD *)&v38[12] = v14;
      _os_log_impl(&dword_2419D9000, v9, OS_LOG_TYPE_DEFAULT, "Model generated successfully for model type %{public}d, with model ID %{private}s， for service ID %{private}s", buf, 0x1Cu);
      if (SHIBYTE(v34) < 0)
        operator delete(v33);
    }

    if (SHIBYTE(v36) < 0)
      operator delete(v35);
  }
  else
  {
LABEL_10:
    if (onceToken_MicroLocation_Default != -1)
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_55);
    v8 = logObject_MicroLocation_Default;
    if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67240192;
      *(_DWORD *)&buf[4] = 0;
      _os_log_impl(&dword_2419D9000, v8, OS_LOG_TYPE_DEFAULT, "#Warning Model was not generated properly. Inserted: %{public,BOOL}d", buf, 8u);
    }
  }
  if (*(_BYTE *)(a1[4] + 112))
  {
    v15 = *(id *)(*(_QWORD *)(v2 + 32) + 32);
    v16 = a1[4];
    if (!*(_BYTE *)(v16 + 112))
      std::__throw_bad_optional_access[abi:ne180100]();
    *(_QWORD *)buf = *(_QWORD *)v16;
    if (*(char *)(v16 + 31) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)v38, *(const std::string::value_type **)(v16 + 8), *(_QWORD *)(v16 + 16));
    }
    else
    {
      v17 = *(_OWORD *)(v16 + 8);
      *(_QWORD *)&v38[16] = *(_QWORD *)(v16 + 24);
      *(_OWORD *)v38 = v17;
    }
    v18 = *(_OWORD *)(v16 + 32);
    v39 = *(_DWORD *)(v16 + 48);
    *(_OWORD *)&v38[24] = v18;
    CLMicroLocationProto::Configuration::Configuration((CLMicroLocationProto::Configuration *)v40, (const CLMicroLocationProto::Configuration *)(v16 + 56));
    v35 = 0;
    v36 = 0uLL;
    v33 = &v35;
    LOBYTE(v34) = 0;
    v35 = operator new(0x70uLL);
    *(_QWORD *)&v36 = v35;
    *((_QWORD *)&v36 + 1) = (char *)v35 + 112;
    *(_QWORD *)&v36 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<CLMicroLocationConfigurationTable::Entry>,CLMicroLocationConfigurationTable::Entry const*,CLMicroLocationConfigurationTable::Entry const*,CLMicroLocationConfigurationTable::Entry*>((uint64_t)&v36 + 8, (uint64_t)buf, (uint64_t)&v41, (uint64_t)v35);
    v19 = objc_msgSend(v15, "insertEntries:", &v35);
    v33 = &v35;
    std::vector<CLMicroLocationConfigurationTable::Entry>::__destroy_vector::operator()[abi:ne180100]((void ***)&v33);
    CLMicroLocationProto::Configuration::~Configuration((CLMicroLocationProto::Configuration *)v40);
    if ((v38[23] & 0x80000000) != 0)
      operator delete(*(void **)v38);

    if (onceToken_MicroLocation_Default != -1)
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_55);
    v20 = logObject_MicroLocation_Default;
    if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
    {
      v21 = *(unsigned int *)a1[1];
      *(_DWORD *)buf = 68289538;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)v38 = 2082;
      *(_QWORD *)&v38[2] = "";
      *(_WORD *)&v38[10] = 2050;
      *(_QWORD *)&v38[12] = v21;
      *(_WORD *)&v38[20] = 1026;
      *(_DWORD *)&v38[22] = v19;
      _os_log_impl(&dword_2419D9000, v20, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Configuration generated\", \"ModelType\":%{public}lu, \"Inserted\":%{public}hhd}", buf, 0x22u);
    }
  }
  if (onceToken_MicroLocation_Default != -1)
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_55);
  v22 = logObject_MicroLocation_Default;
  if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
  {
    v23 = *(unsigned __int8 *)a1[2];
    v24 = *(unsigned int *)a1[1];
    v25 = *(unsigned __int8 *)(a1[5] + 8);
    *(_DWORD *)buf = 68289794;
    *(_DWORD *)&buf[4] = 0;
    *(_WORD *)v38 = 2082;
    *(_QWORD *)&v38[2] = "";
    *(_WORD *)&v38[10] = 1026;
    *(_DWORD *)&v38[12] = v23;
    *(_WORD *)&v38[16] = 2050;
    *(_QWORD *)&v38[18] = v24;
    *(_WORD *)&v38[26] = 2050;
    *(_QWORD *)&v38[28] = v25;
    _os_log_impl(&dword_2419D9000, v22, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"sending CoreAnalytics com.apple.MicroLocation.ModelLearning\", \"sending enabled\":%{public}hhd, \"model type\":%{public}lu, \"has_value\":%{public}lu}", buf, 0x2Cu);
  }
  if (*(_BYTE *)a1[2])
  {
    v26 = a1[5];
    if (*(_BYTE *)(v26 + 8))
      +[ULSendEvent sendEvent:withEventName:](ULSendEvent, "sendEvent:withEventName:", *(_QWORD *)v26, CFSTR("com.apple.MicroLocation.ModelLearning"));
  }
  v27 = *(_QWORD *)(v2 + 24);
  v28 = *(unsigned int *)a1[1];
  v29 = a1[3];
  v30 = a1[5];
  *(_QWORD *)buf = 0;
  std::optional<NSMutableDictionary * {__strong}>::value_or[abi:ne180100]<decltype(nullptr)>(v30);
  v31 = (void *)objc_claimAutoreleasedReturnValue();
  (*(void (**)(uint64_t, uint64_t, uint64_t, void *))(*(_QWORD *)v27 + 24))(v27, v28, v29, v31);

  std::__optional_destruct_base<CLMicroLocationModelTable::Entry,false>::reset[abi:ne180100](a1[3]);
  std::__optional_destruct_base<CLMicroLocationConfigurationTable::Entry,false>::reset[abi:ne180100](a1[4]);
  v32 = a1[5];
  if (*(_BYTE *)(v32 + 8))
  {

    *(_BYTE *)(v32 + 8) = 0;
  }
}

void sub_241A82D48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  void *v24;
  void *v25;

  operator delete(v25);

  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void CLMicroLocationLearner::getAllClientsAndSupportedLocationTypes(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t *a4@<X8>)
{
  id v8;
  void *v9;
  id v10;
  void *v11;
  unsigned __int16 *v12;
  char v13;
  unsigned __int16 *v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  unsigned __int16 *v18;
  uint64_t v19;
  int v20;
  _BOOL4 v22;
  char v23;
  __int128 v24;
  uint64_t v25;
  unsigned __int16 *v26;
  std::string __p;
  unsigned __int16 *v28;
  unsigned __int16 *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  std::string v34;
  __int128 v35;
  uint64_t v36;
  std::string v37;
  __int128 v38;
  uint64_t v39;

  v39 = *MEMORY[0x24BDAC8D0];
  v8 = *(id *)(*(_QWORD *)(a1 + 32) + 40);
  v9 = v8;
  if (v8)
  {
    objc_msgSend(v8, "getAllRecordingLabelsClientIds");
  }
  else
  {
    v31 = 0;
    v32 = 0;
    v33 = 0;
  }

  v10 = *(id *)(*(_QWORD *)(a1 + 32) + 96);
  v11 = v10;
  if (v10)
  {
    objc_msgSend(v10, "fetchAllServicesForServiceType:", a2);
  }
  else
  {
    v28 = 0;
    v29 = 0;
    v30 = 0;
  }

  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  v12 = v29;
  if (v28 != v29)
  {
    v13 = a3 ^ 1;
    v14 = v28 + 16;
    do
    {
      CLMicroLocationClientUtils::getClientIdAndServiceUuid((const void **)v14, (uint64_t)(v14 - 12), &__p);
      v15 = std::__find_impl[abi:ne180100]<std::string const*,std::string const*,std::string,std::__identity>(v31, v32, (unsigned __int8 **)&__p);
      v16 = v32;
      v17 = *((char *)v14 + 23);
      if (v17 < 0)
      {
        if (*((_QWORD *)v14 + 1) != 10)
          goto LABEL_18;
        v18 = *(unsigned __int16 **)v14;
      }
      else
      {
        v18 = v14;
        if (v17 != 10)
          goto LABEL_18;
      }
      v19 = *(_QWORD *)v18;
      v20 = v18[4];
      if (v19 == 0x6F6D2D7375636F66 && v20 == 25956)
      {
        v25 = std::__find_impl[abi:ne180100]<std::string const*,std::string const*,std::string,std::__identity>(v31, v32, (unsigned __int8 **)v14);
        v22 = v25 != v32;
        goto LABEL_19;
      }
LABEL_18:
      v22 = 0;
LABEL_19:
      if (v15 == v16)
        v23 = v13;
      else
        v23 = 1;
      if ((v23 & 1) != 0 || v22)
      {
        if (*((char *)v14 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&v37, *(const std::string::value_type **)v14, *((_QWORD *)v14 + 1));
        }
        else
        {
          v24 = *(_OWORD *)v14;
          v37.__r_.__value_.__r.__words[2] = *((_QWORD *)v14 + 2);
          *(_OWORD *)&v37.__r_.__value_.__l.__data_ = v24;
        }
        v38 = *(_OWORD *)(v14 - 12);
        if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
          std::string::__init_copy_ctor_external(&v34, v37.__r_.__value_.__l.__data_, v37.__r_.__value_.__l.__size_);
        else
          v34 = v37;
        v35 = v38;
        v36 = *((_QWORD *)v14 + 3);
        std::vector<CLMicroLocationClientUtils::ClientIdentitiesAndLocationTypes>::emplace_back<CLMicroLocationClientUtils::ClientIdentitiesAndLocationTypes>(a4, (__int128 *)&v34);
        if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v34.__r_.__value_.__l.__data_);
        if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v37.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      v26 = v14 + 28;
      v14 += 44;
    }
    while (v26 != v12);
  }
  v34.__r_.__value_.__r.__words[0] = (std::string::size_type)&v28;
  std::vector<CLMiLoServiceTable::Entry>::__destroy_vector::operator()[abi:ne180100]((void ***)&v34);
  v34.__r_.__value_.__r.__words[0] = (std::string::size_type)&v31;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v34);
}

void sub_241A830BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,char *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  void *v36;

  a22 = &a19;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a22);
  _Unwind_Resume(a1);
}

void CLMicroLocationLearner::learnFromModelType(std::function<BOOL ()(void)>,CLMicroLocationProto::Model_ModelType)::$_1::operator()(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  __objc2_class *v6;
  __objc2_class *v7;
  NSObject *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  unint64_t v15;
  NSObject *v16;
  __objc2_class *v17;
  __objc2_class *v18;
  uint64_t v19;
  uint64_t v20;
  const std::string::value_type *v21;
  _OWORD *v22;
  void *v23;
  _OWORD *v24;
  void *p_p;
  _QWORD *v26;
  int v27;
  int v28;
  __int128 v29;
  void *v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  NSObject *v34;
  _OWORD *v35;
  void *v36;
  _QWORD *v37;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  void *__p;
  __int128 v46;
  void *v47;
  __int128 v48;
  _BYTE v49[24];
  _BYTE *v50;
  _BYTE buf[48];
  __int16 v52;
  _QWORD *v53;
  char v54;
  uint64_t v55;

  v55 = *MEMORY[0x24BDAC8D0];
  v5 = *(_QWORD *)a1;
  v6 = ULRapportMonitor;
  if (onceToken_MicroLocation_Default != -1)
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_55);
  v7 = ULRapportMonitor;
  v8 = logObject_MicroLocation_Default;
  if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
  {
    v9 = 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 4);
    v10 = (uint64_t)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) - **(_QWORD **)(a1 + 72)) >> 6;
    *(_DWORD *)buf = 68289794;
    *(_DWORD *)&buf[4] = 0;
    *(_WORD *)&buf[8] = 2082;
    *(_QWORD *)&buf[10] = "";
    *(_WORD *)&buf[18] = 1026;
    *(_DWORD *)&buf[20] = a3;
    *(_WORD *)&buf[24] = 2050;
    *(_QWORD *)&buf[26] = v9;
    *(_WORD *)&buf[34] = 2050;
    *(_QWORD *)&buf[36] = v10;
    _os_log_impl(&dword_2419D9000, v8, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Learning semi-supervised models for clients\", \"Model Generation Algo Type\":%{public}d, \"Num Clients\":%{public}lu, \"Num LOIs\":%{public}lu}", buf, 0x2Cu);
  }
  v11 = *(uint64_t **)(a1 + 72);
  v12 = *v11;
  v39 = v11[1];
  if (*v11 != v39)
  {
    do
    {
      v40 = (_QWORD *)(v12 + 40);
      v41 = v12;
      v44 = CLMiLoServiceManager::rtLoiStringToLocationType((uint64_t *)(v12 + 40));
      v42 = v41 + 24;
      if (v13)
      {
        v14 = *a2;
        v43 = a2[1];
        if (*a2 != v43)
        {
          while (1)
          {
            v15 = CLMiLoService::uint64ToLocationTypesBitset(*(_QWORD *)(v14 + 40));
            if (v44 > 0x1F)
              std::__throw_out_of_range[abi:ne180100]("bitset test argument out of range");
            if ((v15 & (1 << v44)) == 0)
              goto LABEL_43;
            if (v6[97].isa != (__objc2_class *)-1)
              dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_55);
            v16 = v7[96].vtable;
            if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
            {
              v17 = v7;
              v18 = v6;
              v19 = v5;
              v20 = a3;
              v21 = (const std::string::value_type *)v14;
              if (*(char *)(v14 + 23) < 0)
                v21 = *(const std::string::value_type **)v14;
              v22 = operator new(0x28uLL);
              v47 = v22;
              v48 = xmmword_241BB2320;
              *v22 = 0u;
              v22[1] = 0u;
              *(_QWORD *)((char *)v22 + 29) = 0;
              boost::uuids::to_chars<char *>(v14 + 24, v22);
              if (v48 >= 0)
                v23 = &v47;
              else
                v23 = v47;
              v24 = operator new(0x28uLL);
              __p = v24;
              v46 = xmmword_241BB2320;
              *v24 = 0u;
              v24[1] = 0u;
              *(_QWORD *)((char *)v24 + 29) = 0;
              boost::uuids::to_chars<char *>(v42, v24);
              p_p = &__p;
              if (v46 < 0)
                p_p = __p;
              v26 = v40;
              if (*(char *)(v41 + 63) < 0)
                v26 = (_QWORD *)*v40;
              *(_DWORD *)buf = 68290050;
              *(_DWORD *)&buf[4] = 0;
              *(_WORD *)&buf[8] = 2082;
              *(_QWORD *)&buf[10] = "";
              *(_WORD *)&buf[18] = 2082;
              *(_QWORD *)&buf[20] = v21;
              *(_WORD *)&buf[28] = 2082;
              *(_QWORD *)&buf[30] = v23;
              *(_WORD *)&buf[38] = 2082;
              *(_QWORD *)&buf[40] = p_p;
              v52 = 2082;
              v53 = v26;
              _os_log_impl(&dword_2419D9000, v16, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"learning a semi-supervised model for client\", \"ClientId\":%{public, location:escape_only}s, \"serviceUUID\":%{public, location:escape_only}s, \"loiGroupId\":%{public, location:escape_only}s, \"loiType\":%{public, location:escape_only}s}", buf, 0x3Au);
              if (SHIBYTE(v46) < 0)
                operator delete(__p);
              a3 = v20;
              if (SHIBYTE(v48) < 0)
                operator delete(v47);
              v5 = v19;
              v6 = v18;
              v7 = v17;
            }

            v27 = **(unsigned __int8 **)(a1 + 24);
            v28 = **(_DWORD **)(a1 + 16);
            if (*(char *)(v14 + 23) < 0)
            {
              std::string::__init_copy_ctor_external((std::string *)buf, *(const std::string::value_type **)v14, *(_QWORD *)(v14 + 8));
            }
            else
            {
              v29 = *(_OWORD *)v14;
              *(_QWORD *)&buf[16] = *(_QWORD *)(v14 + 16);
              *(_OWORD *)buf = v29;
            }
            buf[24] = 1;
            CLMicroLocationCoreAnalyticsPublishHelper::initializeModelLearningEventMetricsDict(v27 != 0, v28, (const std::string *)buf);
            v30 = (void *)objc_claimAutoreleasedReturnValue();
            v47 = v30;
            if (buf[24] && (buf[23] & 0x80000000) != 0)
            {
              operator delete(*(void **)buf);
              v30 = v47;
            }
            v31 = *(_QWORD *)(a1 + 40);
            std::__function::__value_func<double ()(CLMicroLocationFingerprint const&,CLMicroLocationFingerprint const&)>::__value_func[abi:ne180100]((uint64_t)v49, *(_QWORD *)(a1 + 48));
            CLMicroLocationLearner::semiSupervisedLearnWrapper(v5, v14, v31, a3, v30, (uint64_t)v49, *(CLMicroLocationFingerprintPool **)(a1 + 56), buf, v42);
            v32 = v50;
            if (v50 == v49)
              break;
            if (v50)
            {
              v33 = 5;
LABEL_37:
              (*(void (**)(void))(*v32 + 8 * v33))();
            }
            if (v54)
              std::optional<CLMicroLocationModelTable::Entry>::operator=[abi:ne180100]<CLMicroLocationModelTable::Entry,void>(*(_QWORD *)(a1 + 64), (uint64_t)buf);
            if (v47)
              std::optional<NSMutableDictionary * {__strong}>::operator=[abi:ne180100]<NSMutableDictionary * {__strong}&,void>(*(_QWORD *)(a1 + 32), &v47);
            CLMicroLocationLearner::learnFromModelType(std::function<BOOL ()(void)>,CLMicroLocationProto::Model_ModelType)::$_0::operator()(*(uint64_t **)(a1 + 8));
            std::__optional_destruct_base<CLMicroLocationModelTable::Entry,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)buf);

LABEL_43:
            v14 += 48;
            if (v14 == v43)
              goto LABEL_55;
          }
          v32 = v49;
          v33 = 4;
          goto LABEL_37;
        }
      }
      else
      {
        if (v6[97].isa != (__objc2_class *)-1)
          dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_55);
        v34 = v7[96].vtable;
        if (os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT))
        {
          v35 = operator new(0x28uLL);
          v47 = v35;
          v48 = xmmword_241BB2320;
          *v35 = 0u;
          v35[1] = 0u;
          *(_QWORD *)((char *)v35 + 29) = 0;
          boost::uuids::to_chars<char *>(v42, v35);
          v36 = &v47;
          if (v48 < 0)
            v36 = v47;
          v37 = v40;
          if (*(char *)(v41 + 63) < 0)
            v37 = (_QWORD *)*v40;
          *(_DWORD *)buf = 68289538;
          *(_DWORD *)&buf[4] = 0;
          *(_WORD *)&buf[8] = 2082;
          *(_QWORD *)&buf[10] = "";
          *(_WORD *)&buf[18] = 2082;
          *(_QWORD *)&buf[20] = v36;
          *(_WORD *)&buf[28] = 2082;
          *(_QWORD *)&buf[30] = v37;
          _os_log_impl(&dword_2419D9000, v34, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"skipping Location semi-supervised model learning because of LOI\", \"loiGroupId\":%{public, location:escape_only}s, \"loiType\":%{public, location:escape_only}s}", buf, 0x26u);
          if (SHIBYTE(v48) < 0)
            operator delete(v47);
        }

      }
LABEL_55:
      v12 = v41 + 64;
    }
    while (v41 + 64 != v39);
  }
}

void sub_241A83738(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,char a44)
{
  void *v44;
  void *v45;

  operator delete(v45);

  _Unwind_Resume(a1);
}

void CLMicroLocationLearner::learnMagicalMomentsModelInternal(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, const CLMicroLocationProto::Model *a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _BYTE *a9@<X8>, double a10@<D0>, unsigned int a11)
{
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  unsigned int v16;
  unsigned int v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  uint64_t v22;
  unint64_t *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  NSObject *v28;
  unint64_t v29;
  unint64_t v30;
  NSObject *v31;
  unint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *i;
  _QWORD *v37;
  _QWORD *v38;
  unint64_t *v39;
  unint64_t *v40;
  unint64_t *j;
  __int128 v42;
  void **v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  void *v47;
  void *v48;
  void *v49;
  void *v50;
  unsigned int v51;
  unsigned int v52;
  uint64_t v53;
  const CLMicroLocationFingerprintVector *v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  unsigned int v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  char *v64;
  char *v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  unint64_t v69;
  char *v70;
  uint64_t *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  const CLMicroLocationModel *v75;
  _QWORD *v76;
  NSObject *v77;
  _BOOL4 v78;
  NSObject *v79;
  uint64_t *v80;
  char *v81;
  uint64_t v82;
  uint64_t *v83;
  uint64_t *v84;
  NSObject *v85;
  uint64_t v86;
  _OWORD *v87;
  void *v88;
  _OWORD *v89;
  uint64_t v90;
  void *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t *v94;
  double v95;
  double v96;
  int v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  NSObject *v101;
  double v102;
  uint64_t v103;
  NSObject *v104;
  uint64_t v105;
  _QWORD *v106;
  uint64_t v107;
  uint64_t v108;
  unint64_t v109;
  unint64_t v111;
  unint64_t v112;
  int v114;
  unsigned int v118;
  int v119;
  uint64_t v120;
  int v121;
  CLMicroLocationCoreAnalyticsPublishHelper *v124;
  void *v125;
  void *v126[4];
  int v127;
  void *v128;
  __int128 v129;
  uint64_t v130;
  uint64_t v131;
  uint8_t v132[8];
  char v133;
  unsigned int v134;
  _BYTE v135[56];
  _BYTE v136[128];
  _DWORD v137[28];
  void *v138;
  int v139;
  char *v140;
  uint64_t *v141;
  _BYTE v142[16];
  _QWORD *v143;
  void *v144;
  void *v145;
  void *__p;
  char v147;
  void *v148;
  char *v149;
  char *v150;
  uint64_t v151;
  double v152;
  unsigned int v153;
  _BYTE v154[16];
  _BYTE v155[38];
  __int16 v156;
  uint64_t v157;
  __int16 v158;
  int v159;
  __int16 v160;
  int v161;
  __int16 v162;
  int v163;
  _BYTE v164[128];
  _BYTE v165[128];
  _BYTE v166[24];
  _BYTE v167[48];
  void *v168;
  void *v169;
  void *v170;
  char v171;
  _QWORD v172[3];
  _QWORD *v173;
  _BYTE v174[24];
  _BYTE *v175;
  _QWORD v176[3];
  _QWORD *v177;
  char v178[16];
  uint64_t v179;
  char v180;
  uint64_t buf;
  __int16 v182;
  const char *v183;
  __int16 v184;
  unsigned int v185;
  __int16 v186;
  unsigned int v187;
  __int16 v188;
  unsigned int v189;
  __int16 v190;
  unint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  void *v196;
  void *v197;
  void *v198;
  char v199;
  uint64_t v200;

  v200 = *MEMORY[0x24BDAC8D0];
  v152 = a10;
  v124 = a2;
  +[ULDefaultsSingleton shared](ULDefaultsSingleton, "shared");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v12, "defaultsDictionary");
  v13 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "ULLearnerAlgorithm");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v13, "objectForKey:", v14);
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  if (v15 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
    v16 = objc_msgSend(v15, "unsignedIntValue");
  else
    v16 = objc_msgSend(&unk_2511EDAB0, "unsignedIntValue");
  v17 = v16;

  CLMicroLocationAlgorithms::createLearner(v17, &v151);
  +[ULDefaultsSingleton shared](ULDefaultsSingleton, "shared");
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v18, "defaultsDictionary");
  v19 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "ULNumberOfModelIterations");
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v19, "objectForKey:", v20);
  v21 = (void *)objc_claimAutoreleasedReturnValue();
  if (v21 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
    v118 = objc_msgSend(v21, "unsignedIntValue");
  else
    v118 = objc_msgSend(&unk_2511EDA38, "unsignedIntValue");

  v23 = *(unint64_t **)a3;
  v22 = *(_QWORD *)(a3 + 8);
  +[ULDefaultsSingleton shared](ULDefaultsSingleton, "shared");
  v24 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v24, "defaultsDictionary");
  v25 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "ULMinimumNumberOfRecordingsInStableModel");
  v26 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v25, "objectForKey:", v26);
  v27 = (void *)objc_claimAutoreleasedReturnValue();
  if (v27 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
    v112 = objc_msgSend(v27, "unsignedLongValue");
  else
    v112 = objc_msgSend(&unk_2511EDA80, "unsignedLongValue");

  v149 = 0;
  v148 = 0;
  v150 = 0;
  std::vector<unsigned long>::reserve(&v148, v118);
  if (onceToken_MicroLocationQE_Default != -1)
    dispatch_once(&onceToken_MicroLocationQE_Default, &__block_literal_global_330_0);
  v28 = (id)logObject_MicroLocationQE_Default;
  if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
  {
    v29 = 0xEF7BDEF7BDEF7BDFLL * ((uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 3);
    buf = 68290050;
    v182 = 2082;
    v183 = "";
    v184 = 1026;
    v185 = a11;
    v186 = 1026;
    v187 = v17;
    v188 = 1026;
    v189 = v118;
    v190 = 2050;
    v191 = v29;
    _os_log_impl(&dword_2419D9000, v28, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Learning started\", \"modelType\":%{public}d, \"algorithmType\":%{public}d, \"numModelIters\":%{public}d, \"numRecordingTriggers\":%{public}lu}", (uint8_t *)&buf, 0x2Eu);
  }

  CLMicroLocationModel::CLMicroLocationModel((CLMicroLocationModel *)&buf);
  v111 = 0xEF7BDEF7BDEF7BDFLL * ((v22 - (uint64_t)v23) >> 3);
  v178[0] = 0;
  v180 = 0;
  if (!*(_BYTE *)(a8 + 312))
    goto LABEL_23;
  CLMicroLocationModel::fromProtobuf((const CLMicroLocationProto::Fingerprint ***)(a8 + 32), a6, (uint64_t)v132);
  CLMicroLocationModel::operator=((uint64_t)&buf, (uint64_t)v132);
  if (v147 < 0)
    operator delete(__p);
  if (v144)
  {
    v145 = v144;
    operator delete(v144);
  }
  std::__hash_table<std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>>>::~__hash_table((uint64_t)v142);
  *(_QWORD *)v155 = &v140;
  std::vector<std::pair<std::shared_ptr<CLMicroLocationFingerprint>,boost::uuids::uuid>>::__destroy_vector::operator()[abi:ne180100]((void ***)v155);
  std::__optional_destruct_base<CLMicroLocationModel::BlueAtlasData,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)v137);
  std::__optional_destruct_base<CLMicroLocationModel::SimilarityListData,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)v136);
  std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>>>::~__hash_table((uint64_t)v135);
  if (CLMicroLocationModel::isStable((CLMicroLocationModel *)&buf)
    || v111 < v112
    && (v30 = *(unsigned int *)((char *)&v183 + 2),
        ULSettings::get<ULSettings::MinimumNumberOfDaysWithRecordingsInStableModel>() - 1 > v30))
  {
LABEL_23:
    v121 = 0;
  }
  else
  {
    if (onceToken_MicroLocation_Default != -1)
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_55);
    v31 = (id)logObject_MicroLocation_Default;
    if (os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v132 = 0;
      _os_log_impl(&dword_2419D9000, v31, OS_LOG_TYPE_DEFAULT, "got sufficient recording triggers, will ignore prior cluster number in learning", v132, 2u);
    }

    v121 = 1;
  }
  v176[0] = &off_2511D63B8;
  v176[1] = CLMicroLocationFingerprintConfiguration::getRecordingConfigurationFromSettings;
  v177 = v176;
  CLMicroLocationModel::CLMicroLocationModel((CLMicroLocationModel *)v132);
  v32 = *(unint64_t **)(a3 + 8);
  v109 = 0xEF7BDEF7BDEF7BDFLL * (((uint64_t)v32 - *(_QWORD *)a3) >> 3);
  v33 = 126 - 2 * __clz(v109);
  if (v32 == *(unint64_t **)a3)
    v34 = 0;
  else
    v34 = v33;
  std::__introsort<std::_ClassicAlgPolicy,CLMicroLocationLearner::learnMagicalMomentsModelInternal(NSMutableDictionary *,std::vector<CLMicroLocationRecordingEventsTable::Entry> &,std::function<BOOL ()(void)> const&,CLMicroLocationAnchorAppearanceMap const&,CLMicroLocationFingerprintPool &,std::chrono::time_point<cl::chrono::CFAbsoluteTimeClock,std::chrono::duration<long double,std::ratio<1l,1l>>>,boost::uuids::uuid const&,std::optional<CLMicroLocationModelTable::Entry> const&,CLMicroLocationProto::Model_ModelType)::$_0 &,CLMicroLocationRecordingEventsTable::Entry*,false>(*(unint64_t **)a3, v32, v34, 1);
  if (!v118)
  {
    v119 = 0;
    v114 = 0;
    LODWORD(v120) = 0;
LABEL_158:
    LOBYTE(v128) = 0;
    BYTE8(v129) = 0;
    if (*(_BYTE *)(a8 + 312))
    {
      v99 = *(_QWORD *)(a8 + 16);
      v128 = (void *)(*(unsigned int *)(a8 + 140) | ((unint64_t)*(unsigned __int8 *)(a8 + 136) << 32));
      *(_QWORD *)&v129 = v99;
      BYTE8(v129) = 1;
    }
    CLMicroLocationLearner::updateModelDaysWithRecordings(a1, (uint64_t)v132, &v152, (uint64_t)&v128, a7);
    if (a11 != 2)
    {
      if (v111 >= v112
        || (v100 = v134, ULSettings::get<ULSettings::MinimumNumberOfDaysWithRecordingsInStableModel>() <= v100))
      {
        if (onceToken_MicroLocation_Default != -1)
          dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_55);
        v101 = (id)logObject_MicroLocation_Default;
        if (os_log_type_enabled(v101, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)v155 = 0;
          _os_log_impl(&dword_2419D9000, v101, OS_LOG_TYPE_DEBUG, "set model to stable", v155, 2u);
        }

        v133 = 1;
      }
    }
    CLMicroLocationModel::setQualityIndicator((uint64_t)v132, v119);
    CLMicroLocationQualityEstimationAlgorithms::evaluateQualityTreeBased((CLMicroLocationQualityEstimationAlgorithms *)v132, (uint64_t)&v125);
    CLMicroLocationModel::setCandidateQualityIndicator((uint64_t)v132, (int)v125);
    CLMicroLocationModel::setCandidateQualityReasons((uint64_t)v132, (uint64_t)v126);
    v138 = v126[3];
    v139 = v127;
    CLMicroLocationModel::toProtobuf((CLMicroLocationModel *)v132, (uint64_t)v155);
    v102 = v152;
    CLMicroLocationCoreAnalyticsPublishHelper::updateLearnEventSummary(v124, (CLMicroLocationModel *)v132, (const CLMicroLocationModel *)v155, v152);
    if (*(_BYTE *)(a8 + 312))
    {
      if (v180)
        v103 = v179;
      else
        v103 = 0;
      CLMicroLocationCoreAnalyticsPublishHelper::updateMagicalMomentOldModelMetrics(v124, (CLMicroLocationModel *)v132, (CLMicroLocationModel *)&buf, v103, v180, v102);
    }
    v154[0] = CLMicroLocationModel::isStable((CLMicroLocationModel *)&buf);
    v154[1] = 1;
    CLMicroLocationCoreAnalyticsPublishHelper::updateModelStabilityMetrics(v124, (unsigned int *)v132, v154);
    v137[24] = v109;
    v137[25] = v120;
    v137[26] = v114;
    v137[27] = 0;
    std::__optional_destruct_base<CLMicroLocationModel,false>::__optional_destruct_base[abi:ne180100]<CLMicroLocationModel>((uint64_t)a9, (uint64_t)v132);
    CLMicroLocationProto::Model::~Model((CLMicroLocationProto::Model *)v155);
    if (v126[0])
    {
      v126[1] = v126[0];
      operator delete(v126[0]);
    }
    goto LABEL_186;
  }
  v120 = 0;
  v119 = 0;
  v35 = 0;
  v114 = 0;
  while (1)
  {
    if (CLMicroLocationModel::isValid((CLMicroLocationModel *)v132))
    {
      memset(v155, 0, 32);
      *(_DWORD *)&v155[32] = 1065353216;
      for (i = v143; i; i = (_QWORD *)*i)
      {
        v37 = (_QWORD *)i[4];
        v38 = (_QWORD *)i[5];
        while (v37 != v38)
        {
          std::__hash_table<boost::uuids::uuid,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,std::allocator<boost::uuids::uuid>>::__emplace_unique_key_args<boost::uuids::uuid,boost::uuids::uuid const&>((uint64_t)v155, v37, v37);
          v37 += 2;
        }
      }
      v40 = *(unint64_t **)a3;
      v39 = *(unint64_t **)(a3 + 8);
      if (*(unint64_t **)a3 != v39)
      {
        while (std::__hash_table<std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>>>::find<boost::uuids::uuid>(v155, v40))
        {
          v40 += 31;
          if (v40 == v39)
          {
            v40 = v39;
            goto LABEL_54;
          }
        }
        if (v40 != v39)
        {
          for (j = v40 + 31; j != v39; j += 31)
          {
            if (std::__hash_table<std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>>>::find<boost::uuids::uuid>(v155, j))
            {
              v42 = *(_OWORD *)j;
              v40[2] = j[2];
              *(_OWORD *)v40 = v42;
              v43 = (void **)(v40 + 3);
              if (*((char *)v40 + 47) < 0)
                operator delete(*v43);
              v44 = *(_OWORD *)(j + 3);
              v40[5] = j[5];
              *(_OWORD *)v43 = v44;
              *((_BYTE *)j + 47) = 0;
              *((_BYTE *)j + 24) = 0;
              v45 = *((_OWORD *)j + 3);
              *(_OWORD *)((char *)v40 + 60) = *(_OWORD *)((char *)j + 60);
              *((_OWORD *)v40 + 3) = v45;
              CLMicroLocationProto::RecordingEvent::CopyFrom((CLMicroLocationProto::RecordingEvent *)(v40 + 10), (const CLMicroLocationProto::RecordingEvent *)(j + 10));
              v46 = *((_OWORD *)j + 14);
              *((_BYTE *)v40 + 240) = *((_BYTE *)j + 240);
              *((_OWORD *)v40 + 14) = v46;
              v40 += 31;
            }
          }
        }
      }
LABEL_54:
      std::vector<CLMicroLocationRecordingEventsTable::Entry>::erase(a3, (uint64_t)v40, *(__int128 **)(a3 + 8));
      std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>>>::~__hash_table((uint64_t)v155);
    }
    +[ULDefaultsSingleton shared](ULDefaultsSingleton, "shared");
    v47 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v47, "defaultsDictionary");
    v48 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "ULFingerprintDataSource");
    v49 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v48, "objectForKey:", v49);
    v50 = (void *)objc_claimAutoreleasedReturnValue();
    if (v50 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
      v51 = objc_msgSend(v50, "unsignedIntValue");
    else
      v51 = objc_msgSend(&unk_2511EDA68, "unsignedIntValue");
    v52 = v51;

    std::__function::__value_func<double ()(CLMicroLocationFingerprint const&,CLMicroLocationFingerprint const&)>::__value_func[abi:ne180100]((uint64_t)v174, a4);
    v53 = (uint64_t)v177;
    if (!v177)
      goto LABEL_62;
    if (v177 != v176)
    {
      v53 = (*(uint64_t (**)(void))(*v177 + 16))();
LABEL_62:
      v173 = (_QWORD *)v53;
      goto LABEL_64;
    }
    v173 = v172;
    (*(void (**)(uint64_t, _QWORD *))(v176[0] + 24))((uint64_t)v176, v172);
LABEL_64:
    CLMicroLocationFingerprintDataSources::create(v52, (uint64_t)v174, (uint64_t)v172, a3, *(_QWORD *)(a1 + 32), &v130);
    CLMicroLocationFingerprintVector::CLMicroLocationFingerprintVector(&v131, &v130);
    v55 = v130;
    v130 = 0;
    if (v55)
      (*(void (**)(uint64_t))(*(_QWORD *)v55 + 8))(v55);
    v56 = v173;
    if (v173 == v172)
    {
      v56 = v172;
      v57 = 4;
    }
    else
    {
      if (!v173)
        goto LABEL_71;
      v57 = 5;
    }
    (*(void (**)(void))(*v56 + 8 * v57))();
LABEL_71:
    v58 = v175;
    if (v175 == v174)
    {
      v58 = v174;
      v59 = 4;
    }
    else
    {
      if (!v175)
        goto LABEL_76;
      v59 = 5;
    }
    (*(void (**)(void))(*v58 + 8 * v59))();
LABEL_76:
    if (!(_DWORD)v35)
    {
      v60 = CLMicroLocationFingerprintVector::size((CLMicroLocationFingerprintVector *)&v131);
      v114 = CLMicroLocationFingerprintVector::size((CLMicroLocationFingerprintVector *)&v131);
      v120 = v60;
    }
    if (!v119)
      v119 = CLMicroLocationQualityEstimationAlgorithms::evaluateQualityWithNumFingerprints((CLMicroLocationQualityEstimationAlgorithms *)&v131, v54);
    v61 = CLMicroLocationFingerprintVector::size((CLMicroLocationFingerprintVector *)&v131);
    v62 = v61;
    v63 = v149;
    if (v149 >= v150)
    {
      v65 = (char *)v148;
      v66 = (v149 - (_BYTE *)v148) >> 3;
      v67 = v66 + 1;
      if ((unint64_t)(v66 + 1) >> 61)
        std::vector<CLMicroLocationProto::ConfidenceReason>::__throw_length_error[abi:ne180100]();
      v68 = v150 - (_BYTE *)v148;
      if ((v150 - (_BYTE *)v148) >> 2 > v67)
        v67 = v68 >> 2;
      if ((unint64_t)v68 >= 0x7FFFFFFFFFFFFFF8)
        v69 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v69 = v67;
      if (v69)
      {
        v70 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CLMicroLocationWiFiChannelHistogram>>((uint64_t)&v150, v69);
        v63 = v149;
        v65 = (char *)v148;
      }
      else
      {
        v70 = 0;
      }
      v71 = (uint64_t *)&v70[8 * v66];
      *v71 = v62;
      v64 = (char *)(v71 + 1);
      while (v63 != v65)
      {
        v72 = *((_QWORD *)v63 - 1);
        v63 -= 8;
        *--v71 = v72;
      }
      v148 = v71;
      v149 = v64;
      v150 = &v70[8 * v69];
      if (v65)
        operator delete(v65);
    }
    else
    {
      *(_QWORD *)v149 = v61;
      v64 = v63 + 8;
    }
    v149 = v64;
    v73 = *(_QWORD *)(a4 + 24);
    if (!v73)
      std::__throw_bad_function_call[abi:ne180100]();
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v73 + 48))(v73))
      break;
    if (CLMicroLocationFingerprintVector::empty((CLMicroLocationFingerprintVector *)&v131))
    {
      if (onceToken_MicroLocation_Default != -1)
        dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_55);
      v104 = (id)logObject_MicroLocation_Default;
      if (os_log_type_enabled(v104, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)v155 = 67109376;
        *(_DWORD *)&v155[4] = a11;
        *(_WORD *)&v155[8] = 1024;
        *(_DWORD *)&v155[10] = v35;
        _os_log_impl(&dword_2419D9000, v104, OS_LOG_TYPE_DEFAULT, "#Warning Fingerprint vector empty for model type %d at iteration %d", v155, 0xEu);
      }
      goto LABEL_184;
    }
    if (v124)
    {
      if ((_DWORD)v35)
        CLMicroLocationCoreAnalyticsPublishHelper::updateMagicalMomentsNumPrunedFingerprints(v124, (uint64_t *)&v148, v35);
      else
        CLMicroLocationCoreAnalyticsPublishHelper::updateModelRfCharacteristics(v124, (CLMicroLocationFingerprintVector *)&v131, 0, 0, v152);
    }
    if (CLMicroLocationModel::isValid((CLMicroLocationModel *)&buf))
    {
      if ((v121 & 1) != 0)
        v74 = 1;
      else
        v74 = CLMicroLocationModel::numClusters((CLMicroLocationModel *)&buf);
      (*(void (**)(_BYTE *__return_ptr, uint64_t, uint64_t *, _QWORD, uint64_t, uint64_t, const CLMicroLocationProto::Model *, uint64_t))(*(_QWORD *)v151 + 16))(v155, v151, &v131, a11, v74, a5, a6, v120);
      CLMicroLocationModel::operator=((uint64_t)v132, (uint64_t)v155);
      if (v171 < 0)
        operator delete(v170);
      if (v168)
      {
        v169 = v168;
        operator delete(v168);
      }
      std::__hash_table<std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>>>::~__hash_table((uint64_t)v167);
      v125 = v166;
      std::vector<std::pair<std::shared_ptr<CLMicroLocationFingerprint>,boost::uuids::uuid>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v125);
      std::__optional_destruct_base<CLMicroLocationModel::BlueAtlasData,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)v165);
      std::__optional_destruct_base<CLMicroLocationModel::SimilarityListData,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)v164);
      std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>>>::~__hash_table((uint64_t)&v155[16]);
      v75 = (const CLMicroLocationModel *)CLMicroLocationModel::numClusters((CLMicroLocationModel *)v132);
      *(_QWORD *)v155 = &buf;
      v155[8] = 1;
      CLMicroLocationModel::mapIdentifiersFromOldModelAndPruneNoiseClusters((CLMicroLocationModel *)v132, (uint64_t)v155, v121, v124);
      CLMicroLocationModel::getIdentifiers(v132, (uint64_t)&v125);
      CLMicroLocationModel::getIdentifiers(&buf, (uint64_t)v155);
      v76 = *(_QWORD **)&v155[16];
      if (*(_QWORD *)&v155[16])
      {
        while (std::__hash_table<std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>>>::find<boost::uuids::uuid>(&v125, v76 + 2))
        {
          v76 = (_QWORD *)*v76;
          if (!v76)
            goto LABEL_119;
        }
        std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>>>::~__hash_table((uint64_t)v155);
        if ((v121 & 1) == 0)
        {
          (*(void (**)(_BYTE *__return_ptr, uint64_t, uint64_t *, _QWORD, uint64_t, uint64_t, const CLMicroLocationProto::Model *, uint64_t))(*(_QWORD *)v151 + 16))(v155, v151, &v131, a11, 1, a5, a6, v120);
          CLMicroLocationModel::operator=((uint64_t)v132, (uint64_t)v155);
          if (v171 < 0)
            operator delete(v170);
          if (v168)
          {
            v169 = v168;
            operator delete(v168);
          }
          std::__hash_table<std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>>>::~__hash_table((uint64_t)v167);
          v128 = v166;
          std::vector<std::pair<std::shared_ptr<CLMicroLocationFingerprint>,boost::uuids::uuid>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v128);
          std::__optional_destruct_base<CLMicroLocationModel::BlueAtlasData,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)v165);
          std::__optional_destruct_base<CLMicroLocationModel::SimilarityListData,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)v164);
          std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>>>::~__hash_table((uint64_t)&v155[16]);
          v75 = (const CLMicroLocationModel *)CLMicroLocationModel::numClusters((CLMicroLocationModel *)v132);
          *(_QWORD *)v155 = &buf;
          v155[8] = 1;
          CLMicroLocationModel::mapIdentifiersFromOldModelAndPruneNoiseClusters((CLMicroLocationModel *)v132, (uint64_t)v155, 0, v124);
        }
      }
      else
      {
LABEL_119:
        std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>>>::~__hash_table((uint64_t)v155);
      }
      std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>>>::~__hash_table((uint64_t)&v125);
    }
    else
    {
      (*(void (**)(_BYTE *__return_ptr, uint64_t, uint64_t *, _QWORD, uint64_t, uint64_t, const CLMicroLocationProto::Model *, uint64_t))(*(_QWORD *)v151 + 16))(v155, v151, &v131, a11, 1, a5, a6, v120);
      CLMicroLocationModel::operator=((uint64_t)v132, (uint64_t)v155);
      if (v171 < 0)
        operator delete(v170);
      if (v168)
      {
        v169 = v168;
        operator delete(v168);
      }
      std::__hash_table<std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>>>::~__hash_table((uint64_t)v167);
      v125 = v166;
      std::vector<std::pair<std::shared_ptr<CLMicroLocationFingerprint>,boost::uuids::uuid>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v125);
      std::__optional_destruct_base<CLMicroLocationModel::BlueAtlasData,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)v165);
      std::__optional_destruct_base<CLMicroLocationModel::SimilarityListData,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)v164);
      std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>>>::~__hash_table((uint64_t)&v155[16]);
      v75 = (const CLMicroLocationModel *)CLMicroLocationModel::numClusters((CLMicroLocationModel *)v132);
      v155[0] = 0;
      v155[8] = 0;
      CLMicroLocationModel::mapIdentifiersFromOldModelAndPruneNoiseClusters((CLMicroLocationModel *)v132, (uint64_t)v155, v121, v124);
    }
    CLMicroLocationCoreAnalyticsPublishHelper::updateMagicalMomentsNumPrunedClusters(v124, (NSMutableDictionary *)v132, v75, v35);
    if (onceToken_MicroLocation_Default != -1)
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_55);
    v77 = (id)logObject_MicroLocation_Default;
    v78 = os_log_type_enabled(v77, OS_LOG_TYPE_DEBUG);

    if (v78)
    {
      if (onceToken_MicroLocation_Default != -1)
        dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_55);
      v79 = (id)logObject_MicroLocation_Default;
      if (os_log_type_enabled(v79, OS_LOG_TYPE_DEBUG))
      {
        v80 = v141;
        v81 = v140;
        v82 = CLMicroLocationModel::numClusters((CLMicroLocationModel *)v132);
        *(_DWORD *)v155 = 68289795;
        *(_DWORD *)&v155[4] = 0;
        *(_WORD *)&v155[8] = 2082;
        *(_QWORD *)&v155[10] = "";
        *(_WORD *)&v155[18] = 2049;
        *(_QWORD *)&v155[20] = ((char *)v80 - v81) >> 5;
        *(_WORD *)&v155[28] = 2049;
        *(_QWORD *)&v155[30] = v82;
        v156 = 1025;
        LODWORD(v157) = *(_DWORD *)&v132[4];
        _os_log_impl(&dword_2419D9000, v79, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"model\", \"size\":%{private}lu, \"numClusters\":%{private}lu, \"type\":%{private}d}", v155, 0x2Cu);
      }

      v83 = (uint64_t *)v140;
      v84 = v141;
      while (v83 != v84)
      {
        if (onceToken_MicroLocationQE_Default != -1)
          dispatch_once(&onceToken_MicroLocationQE_Default, &__block_literal_global_330_0);
        v85 = (id)logObject_MicroLocationQE_Default;
        if (os_log_type_enabled(v85, OS_LOG_TYPE_DEBUG))
        {
          v86 = *v83;
          v87 = operator new(0x28uLL);
          v125 = v87;
          *(_OWORD *)v126 = xmmword_241BB2320;
          *v87 = 0u;
          v87[1] = 0u;
          *(_QWORD *)((char *)v87 + 29) = 0;
          boost::uuids::to_chars<char *>(v86 + 40, v87);
          if (SHIBYTE(v126[1]) >= 0)
            v88 = &v125;
          else
            v88 = v125;
          v89 = operator new(0x28uLL);
          v90 = a8;
          v128 = v89;
          v129 = xmmword_241BB2320;
          *v89 = 0u;
          v89[1] = 0u;
          *(_QWORD *)((char *)v89 + 29) = 0;
          boost::uuids::to_chars<char *>((uint64_t)(v83 + 2), v89);
          if (v129 >= 0)
            v91 = &v128;
          else
            v91 = v128;
          v92 = *v83;
          v93 = *(_QWORD *)(*v83 + 24);
          v153 = 1;
          v94 = std::__hash_table<std::__hash_value_type<unsigned int,unsigned int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned int>>>::find<unsigned int>((_QWORD *)(v92 + 104), &v153);
          if (v94)
            v95 = *((double *)v94 + 4) - *((double *)v94 + 3);
          else
            v95 = 0.0;
          v96 = *(double *)(*v83 + 152);
          v97 = (int)*(double *)(*v83 + 144);
          *(_DWORD *)v155 = 68290563;
          *(_DWORD *)&v155[4] = 0;
          *(_WORD *)&v155[8] = 2082;
          *(_QWORD *)&v155[10] = "";
          *(_WORD *)&v155[18] = 2081;
          *(_QWORD *)&v155[20] = v88;
          *(_WORD *)&v155[28] = 2081;
          *(_QWORD *)&v155[30] = v91;
          v156 = 2049;
          v157 = v93;
          v158 = 1025;
          v159 = (int)v95;
          v160 = 1025;
          v161 = v97;
          v162 = 1025;
          v163 = (int)v96;
          _os_log_impl(&dword_2419D9000, v85, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"modelFingerprint\", \"recordingUUID\":%{private, location:escape_only}s, \"clusterUUID\":%{private, location:escape_only}s, \"size\":%{private}lu, \"duration\":%{private}d, \"start\":%{private}d, \"end\":%{private}d}", v155, 0x42u);
          if (SHIBYTE(v129) < 0)
            operator delete(v128);
          a8 = v90;
          if (SHIBYTE(v126[1]) < 0)
            operator delete(v125);
        }

        v83 += 4;
      }
    }
    v98 = v131;
    v131 = 0;
    if (v98)
      (*(void (**)(uint64_t))(*(_QWORD *)v98 + 8))(v98);
    v35 = (v35 + 1);
    if ((_DWORD)v35 == v118)
      goto LABEL_158;
  }
  if (onceToken_MicroLocation_Default != -1)
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_55);
  v104 = (id)logObject_MicroLocation_Default;
  if (os_log_type_enabled(v104, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)v155 = 68289282;
    *(_DWORD *)&v155[4] = 0;
    *(_WORD *)&v155[8] = 2082;
    *(_QWORD *)&v155[10] = "";
    *(_WORD *)&v155[18] = 2082;
    *(_QWORD *)&v155[20] = "MicroLocationLearning";
    _os_log_impl(&dword_2419D9000, v104, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"operation cancelled\", \"Activity\":%{public, location:escape_only}s}", v155, 0x1Cu);
  }
LABEL_184:

  *a9 = 0;
  a9[448] = 0;
  v105 = v131;
  v131 = 0;
  if (v105)
    (*(void (**)(uint64_t))(*(_QWORD *)v105 + 8))(v105);
LABEL_186:
  if (v147 < 0)
    operator delete(__p);
  if (v144)
  {
    v145 = v144;
    operator delete(v144);
  }
  std::__hash_table<std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>>>::~__hash_table((uint64_t)v142);
  v128 = &v140;
  std::vector<std::pair<std::shared_ptr<CLMicroLocationFingerprint>,boost::uuids::uuid>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v128);
  std::__optional_destruct_base<CLMicroLocationModel::BlueAtlasData,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)v137);
  std::__optional_destruct_base<CLMicroLocationModel::SimilarityListData,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)v136);
  std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>>>::~__hash_table((uint64_t)v135);
  v106 = v177;
  if (v177 == v176)
  {
    v107 = 4;
    v106 = v176;
LABEL_194:
    (*(void (**)(void))(*v106 + 8 * v107))();
  }
  else if (v177)
  {
    v107 = 5;
    goto LABEL_194;
  }
  std::__optional_destruct_base<CLMicroLocationModelTable::Entry,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)v178);
  if (v199 < 0)
    operator delete(v198);
  if (v196)
  {
    v197 = v196;
    operator delete(v196);
  }
  std::__hash_table<std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>>>::~__hash_table((uint64_t)&v195);
  *(_QWORD *)v132 = &v194;
  std::vector<std::pair<std::shared_ptr<CLMicroLocationFingerprint>,boost::uuids::uuid>>::__destroy_vector::operator()[abi:ne180100]((void ***)v132);
  std::__optional_destruct_base<CLMicroLocationModel::BlueAtlasData,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v193);
  std::__optional_destruct_base<CLMicroLocationModel::SimilarityListData,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v192);
  std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>>>::~__hash_table((uint64_t)&v183 + 6);
  if (v148)
  {
    v149 = (char *)v148;
    operator delete(v148);
  }
  v108 = v151;
  v151 = 0;
  if (v108)
    (*(void (**)(uint64_t))(*(_QWORD *)v108 + 8))(v108);

}

void sub_241A84C28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34)
{
  void *v34;
  void *v35;
  void *v36;
  unint64_t v38;

  v38 = STACK[0x328];
  STACK[0x328] = 0;
  if (v38)
    (*(void (**)(unint64_t))(*(_QWORD *)v38 + 8))(v38);

  _Unwind_Resume(a1);
}

CLMicroLocationAnchorValueStatisticsMap *std::optional<CLMicroLocationAnchorValueStatisticsMap>::emplace[abi:ne180100]<CLMicroLocationModel &,CLMicroLocationFingerprintPool &,void>(CLMicroLocationAnchorValueStatisticsMap *a1, CLMicroLocationModel *a2, CLMicroLocationFingerprintPool *a3)
{
  CLMicroLocationAnchorValueStatisticsMap *result;

  if (*((_BYTE *)a1 + 40))
  {
    a1 = (CLMicroLocationAnchorValueStatisticsMap *)std::__hash_table<std::__hash_value_type<boost::uuids::uuid,std::unordered_map<std::string,AnchorValueStatistics>>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::unordered_map<std::string,AnchorValueStatistics>>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::unordered_map<std::string,AnchorValueStatistics>>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,std::unordered_map<std::string,AnchorValueStatistics>>>>::~__hash_table((uint64_t)a1);
    *((_BYTE *)a1 + 40) = 0;
  }
  result = CLMicroLocationAnchorValueStatisticsMap::CLMicroLocationAnchorValueStatisticsMap(a1, a2, a3);
  *((_BYTE *)result + 40) = 1;
  return result;
}

void CLMicroLocationLearner::learnLocationSimilarityListModel(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, const std::string::value_type *a4@<X3>, uint64_t a5@<X4>, uint64_t *a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>, double a9@<D0>, uint64_t a10)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t i;
  _OWORD *v20;
  _OWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  const std::string::value_type *v26;
  _OWORD *v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  NSObject *v31;
  NSObject *v32;
  unsigned int j;
  CLMicroLocationFingerprintStdVectorSource *v34;
  const CLMicroLocationFingerprint *v35;
  uint64_t v36;
  uint64_t v37;
  NSObject *v38;
  unsigned int v39;
  const std::string::value_type *v40;
  const char *v41;
  NSObject *v42;
  uint32_t v43;
  const std::string::value_type *v44;
  char *v45;
  char *v46;
  _QWORD *v47;
  uint64_t v48;
  _QWORD *v49;
  void *v50;
  __n128 *v51;
  __n128 *v52;
  __n128 *v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  _QWORD *v57;
  _QWORD *v58;
  _QWORD *v59;
  _QWORD *v60;
  unsigned __int32 v62;
  unint64_t v63;
  __n128 *v64;
  NSObject *v65;
  _OWORD *v66;
  void **v67;
  NSObject *v68;
  _OWORD *v69;
  void *v70;
  const std::string::value_type *v71;
  uint64_t v72;
  unint64_t v73;
  unint64_t v74;
  char *v75;
  __n128 *v76;
  __n128 *v77;
  __n128 v78;
  unint64_t v79;
  uint64_t v80;
  __n128 *v81;
  char *v82;
  uint64_t v83;
  unint64_t v84;
  int v85;
  NSObject *v86;
  int v87;
  uint64_t v88;
  __objc2_class *v89;
  NSObject *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  int v95;
  uint64_t v96;
  int v97;
  int v98;
  int v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  double v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  NSObject *v108;
  const std::string::value_type *v109;
  int v110;
  void **v111;
  void **v112;
  void **v113;
  NSObject *v114;
  const std::string::value_type *v115;
  int v116;
  void **v117;
  void **v118;
  void **v119;
  NSObject *v120;
  const std::string::value_type *v121;
  int v122;
  void **v123;
  void **v124;
  void **v125;
  boost::uuids *v127;
  uint64_t *v128;
  id v129;
  int v130;
  std::string v133;
  char v134;
  int v135;
  void *v136;
  __int128 v137;
  void *v138[2];
  void *v139[2];
  __int128 v140;
  uint64_t v141;
  char v142;
  void *v143;
  void *v144;
  uint64_t v145;
  char v146;
  char v147;
  __int128 v148;
  __int128 v149;
  int v150;
  void *v151;
  _BYTE *v152;
  uint64_t v153;
  void *v154;
  void *v155;
  _QWORD *v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  CLMicroLocationFingerprintStdVectorSource *v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  _OWORD v167[2];
  int v168;
  _OWORD v169[2];
  int v170;
  void *__p;
  void *v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  _OWORD *v177;
  _QWORD *v178;
  uint64_t v179;
  double v180;
  __int128 v181;
  char v182;
  _BYTE buf[38];
  __int16 v184;
  unint64_t v185;
  __int16 v186;
  _BYTE v187[20];
  __int16 v188;
  int v189;
  __int16 v190;
  uint64_t v191;
  __int16 v192;
  int v193;
  void *v194;
  char v195;
  char v196;
  uint64_t v197;

  v197 = *MEMORY[0x24BDAC8D0];
  v180 = a9;
  v129 = a2;
  v178 = 0;
  v177 = 0;
  v179 = 0;
  v175 = 0;
  v174 = 0;
  v176 = 0;
  v14 = ULSettings::get<ULSettings::SimilarityListMaxNumberOfItems>();
  v128 = a6;
  v15 = *a6;
  v16 = a6[1];
  v173 = 0;
  __p = 0;
  v172 = 0;
  std::vector<CLMicroLocationProto::EventType>::__init_with_size[abi:ne180100]<CLMicroLocationProto::EventType*,CLMicroLocationProto::EventType*>(&__p, *(const void **)a7, *(_QWORD *)(a7 + 8), (uint64_t)(*(_QWORD *)(a7 + 8) - *(_QWORD *)a7) >> 2);
  v127 = (boost::uuids *)(a4 + 24);
  CLMicroLocationLearner::getServiceLabelsAndLabeledRecordingEventsForLoi(a1, (uint64_t)(a4 + 24), (uint64_t *)&v177, (uint64_t)&v174, v15, v16, v17, v14);
  if (__p)
  {
    v172 = __p;
    operator delete(__p);
  }
  memset(v169, 0, sizeof(v169));
  v170 = 1065353216;
  v18 = v174;
  for (i = v175; v18 != i; v18 += 248)
  {
    if (!*(_BYTE *)(v18 + 240))
    {
      _CLLogObjectForCategory_MicroLocation_Default();
      v108 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v108, OS_LOG_TYPE_FAULT))
      {
        if (a4[23] >= 0)
          v109 = a4;
        else
          v109 = *(const std::string::value_type **)a4;
        boost::uuids::to_string(v127, (uint64_t)&v136);
        v110 = SHIBYTE(v137);
        v111 = (void **)v136;
        boost::uuids::to_string((boost::uuids *)v18, (uint64_t)v138);
        v112 = &v136;
        if (v110 < 0)
          v112 = v111;
        if (SHIBYTE(v139[0]) >= 0)
          v113 = v138;
        else
          v113 = (void **)v138[0];
        *(_DWORD *)buf = 68290307;
        *(_DWORD *)&buf[4] = 0;
        *(_WORD *)&buf[8] = 2082;
        *(_QWORD *)&buf[10] = "";
        *(_WORD *)&buf[18] = 2082;
        *(_QWORD *)&buf[20] = v109;
        *(_WORD *)&buf[28] = 2082;
        *(_QWORD *)&buf[30] = v112;
        v184 = 2082;
        v185 = (unint64_t)v113;
        v186 = 2082;
        *(_QWORD *)v187 = "assert";
        *(_WORD *)&v187[8] = 2081;
        *(_QWORD *)&v187[10] = "recordingEntry.fTriggerUUID.has_value()";
        _os_log_impl(&dword_2419D9000, v108, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Similarity List Model Learning, labeled recording entry without trigger UUID\", \"Client Id\":%{public, location:escape_only}s, \"Service UUID\":%{public, location:escape_only}s, \"Recording UUID\":%{public, location:escape_only}s, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x44u);
        if (SHIBYTE(v139[0]) < 0)
          operator delete(v138[0]);
        if (SHIBYTE(v137) < 0)
          operator delete(v136);
      }

      _CLLogObjectForCategory_MicroLocation_Default();
      v114 = objc_claimAutoreleasedReturnValue();
      if (os_signpost_enabled(v114))
      {
        if (a4[23] >= 0)
          v115 = a4;
        else
          v115 = *(const std::string::value_type **)a4;
        boost::uuids::to_string(v127, (uint64_t)&v136);
        v116 = SHIBYTE(v137);
        v117 = (void **)v136;
        boost::uuids::to_string((boost::uuids *)v18, (uint64_t)v138);
        v118 = &v136;
        if (v116 < 0)
          v118 = v117;
        if (SHIBYTE(v139[0]) >= 0)
          v119 = v138;
        else
          v119 = (void **)v138[0];
        *(_DWORD *)buf = 68290307;
        *(_DWORD *)&buf[4] = 0;
        *(_WORD *)&buf[8] = 2082;
        *(_QWORD *)&buf[10] = "";
        *(_WORD *)&buf[18] = 2082;
        *(_QWORD *)&buf[20] = v115;
        *(_WORD *)&buf[28] = 2082;
        *(_QWORD *)&buf[30] = v118;
        v184 = 2082;
        v185 = (unint64_t)v119;
        v186 = 2082;
        *(_QWORD *)v187 = "assert";
        *(_WORD *)&v187[8] = 2081;
        *(_QWORD *)&v187[10] = "recordingEntry.fTriggerUUID.has_value()";
        _os_signpost_emit_with_name_impl(&dword_2419D9000, v114, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Similarity List Model Learning, labeled recording entry without trigger UUID", "{\"msg%{public}.0s\":\"Similarity List Model Learning, labeled recording entry without trigger UUID\", \"Client Id\":%{public, location:escape_only}s, \"Service UUID\":%{public, location:escape_only}s, \"Recording UUID\":%{public, location:escape_only}s, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x44u);
        if (SHIBYTE(v139[0]) < 0)
          operator delete(v138[0]);
        if (SHIBYTE(v137) < 0)
          operator delete(v136);
      }

      _CLLogObjectForCategory_MicroLocation_Default();
      v120 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v120, OS_LOG_TYPE_INFO))
      {
        if (a4[23] >= 0)
          v121 = a4;
        else
          v121 = *(const std::string::value_type **)a4;
        boost::uuids::to_string(v127, (uint64_t)&v136);
        v122 = SHIBYTE(v137);
        v123 = (void **)v136;
        boost::uuids::to_string((boost::uuids *)v18, (uint64_t)v138);
        v124 = &v136;
        if (v122 < 0)
          v124 = v123;
        if (SHIBYTE(v139[0]) >= 0)
          v125 = v138;
        else
          v125 = (void **)v138[0];
        *(_DWORD *)buf = 68290307;
        *(_DWORD *)&buf[4] = 0;
        *(_WORD *)&buf[8] = 2082;
        *(_QWORD *)&buf[10] = "";
        *(_WORD *)&buf[18] = 2082;
        *(_QWORD *)&buf[20] = v121;
        *(_WORD *)&buf[28] = 2082;
        *(_QWORD *)&buf[30] = v124;
        v184 = 2082;
        v185 = (unint64_t)v125;
        v186 = 2082;
        *(_QWORD *)v187 = "assert";
        *(_WORD *)&v187[8] = 2081;
        *(_QWORD *)&v187[10] = "recordingEntry.fTriggerUUID.has_value()";
        _os_log_impl(&dword_2419D9000, v120, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Similarity List Model Learning, labeled recording entry without trigger UUID\", \"Client Id\":%{public, location:escape_only}s, \"Service UUID\":%{public, location:escape_only}s, \"Recording UUID\":%{public, location:escape_only}s, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x44u);
        if (SHIBYTE(v139[0]) < 0)
          operator delete(v138[0]);
        if (SHIBYTE(v137) < 0)
          operator delete(v136);
      }

      abort_report_np();
      __break(1u);
    }
    *(_OWORD *)buf = *(_OWORD *)v18;
    *(_OWORD *)&buf[16] = *(_OWORD *)(v18 + 224);
    std::__hash_table<std::__hash_value_type<boost::uuids::uuid,boost::uuids::uuid>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,boost::uuids::uuid>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,boost::uuids::uuid>>>::__emplace_unique_key_args<boost::uuids::uuid,std::pair<boost::uuids::uuid const,boost::uuids::uuid>>((uint64_t)v169, buf, buf);
  }
  memset(v167, 0, sizeof(v167));
  v168 = 1065353216;
  v20 = v177;
  v21 = v178;
  if (v177 != (_OWORD *)v178)
  {
    do
    {
      *(_OWORD *)buf = *v20;
      *(_OWORD *)&buf[16] = *(_OWORD *)((char *)v20 + 40);
      std::__hash_table<std::__hash_value_type<boost::uuids::uuid,boost::uuids::uuid>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,boost::uuids::uuid>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,boost::uuids::uuid>>>::__emplace_multi<std::pair<boost::uuids::uuid const,boost::uuids::uuid>>(v167, buf);
      v20 += 4;
    }
    while (v20 != v21);
  }
  v22 = v174;
  v23 = v175;
  if (v174 == v175)
  {
    v24 = a1;
    if (onceToken_MicroLocation_Default != -1)
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_55);
    v25 = (id)logObject_MicroLocation_Default;
    if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
    {
      if (a4[23] >= 0)
        v26 = a4;
      else
        v26 = *(const std::string::value_type **)a4;
      v27 = operator new(0x28uLL);
      v136 = v27;
      v137 = xmmword_241BB2320;
      *v27 = 0u;
      v27[1] = 0u;
      *(_QWORD *)((char *)v27 + 29) = 0;
      boost::uuids::to_chars<char *>((uint64_t)v127, v27);
      v28 = &v136;
      if (v137 < 0)
        v28 = v136;
      *(_DWORD *)buf = 68289538;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)&buf[8] = 2082;
      *(_QWORD *)&buf[10] = "";
      *(_WORD *)&buf[18] = 2082;
      *(_QWORD *)&buf[20] = v26;
      *(_WORD *)&buf[28] = 2082;
      *(_QWORD *)&buf[30] = v28;
      _os_log_impl(&dword_2419D9000, v25, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Similarity List Model Learning, no labeled recording triggers\", \"Client ID\":%{public, location:escape_only}s, \"Service UUID\":%{public, location:escape_only}s}", buf, 0x26u);
      if (SHIBYTE(v137) < 0)
        operator delete(v136);
      v24 = a1;
    }

    v22 = v174;
    v23 = v175;
  }
  else
  {
    v24 = a1;
  }
  v165 = 0;
  v164 = 0;
  v166 = 0;
  v162 = 0;
  v161 = 0;
  v163 = 0;
  *(_QWORD *)buf = &v164;
  if (v22 == v23)
    goto LABEL_31;
  do
  {
    if (*(_DWORD *)(v22 + 72) == 13)
      std::back_insert_iterator<std::vector<CLMicroLocationRecordingEventsTable::Entry>>::operator=[abi:ne180100]((uint64_t **)buf, (__int128 *)v22);
    v22 += 248;
  }
  while (v22 != v23);
  v29 = v174;
  v23 = v175;
  *(_QWORD *)buf = &v161;
  if (v174 == v175)
  {
LABEL_31:
    v30 = v23;
  }
  else
  {
    do
    {
      if (*(_DWORD *)(v29 + 72) == 1)
        std::back_insert_iterator<std::vector<CLMicroLocationRecordingEventsTable::Entry>>::operator=[abi:ne180100]((uint64_t **)buf, (__int128 *)v29);
      v29 += 248;
    }
    while (v29 != v23);
    v30 = v175;
    v23 = v174;
  }
  if (0xEF7BDEF7BDEF7BDFLL * ((v30 - v23) >> 3) != 0xEF7BDEF7BDEF7BDFLL * ((v165 - v164) >> 3)
                                                  - 0x1084210842108421 * ((v162 - v161) >> 3))
  {
    if (onceToken_MicroLocation_Default != -1)
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_55);
    v31 = (id)logObject_MicroLocation_Default;
    if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 68289794;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)&buf[8] = 2082;
      *(_QWORD *)&buf[10] = "";
      *(_WORD *)&buf[18] = 2050;
      *(_QWORD *)&buf[20] = 0xEF7BDEF7BDEF7BDFLL * ((v175 - v174) >> 3);
      *(_WORD *)&buf[28] = 2050;
      *(_QWORD *)&buf[30] = 0xEF7BDEF7BDEF7BDFLL * ((v165 - v164) >> 3);
      v184 = 2050;
      v185 = 0xEF7BDEF7BDEF7BDFLL * ((v162 - v161) >> 3);
      _os_log_impl(&dword_2419D9000, v31, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"learnLocationSimilarityListModel, didn't classify all labeled triggers to either recording or localization\", \"Num labeled triggers\":%{public}lu, \"Num inferred recordings\":%{public}lu, \"Num inferred localizations\":%{public}lu}", buf, 0x30u);
    }

    if (onceToken_MicroLocation_Default != -1)
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_55);
    v32 = (id)logObject_MicroLocation_Default;
    if (os_signpost_enabled(v32))
    {
      *(_DWORD *)buf = 68289794;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)&buf[8] = 2082;
      *(_QWORD *)&buf[10] = "";
      *(_WORD *)&buf[18] = 2050;
      *(_QWORD *)&buf[20] = 0xEF7BDEF7BDEF7BDFLL * ((v175 - v174) >> 3);
      *(_WORD *)&buf[28] = 2050;
      *(_QWORD *)&buf[30] = 0xEF7BDEF7BDEF7BDFLL * ((v165 - v164) >> 3);
      v184 = 2050;
      v185 = 0xEF7BDEF7BDEF7BDFLL * ((v162 - v161) >> 3);
      _os_signpost_emit_with_name_impl(&dword_2419D9000, v32, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "learnLocationSimilarityListModel, didn't classify all labeled triggers to either recording or localization", "{\"msg%{public}.0s\":\"learnLocationSimilarityListModel, didn't classify all labeled triggers to either recording or localization\", \"Num labeled triggers\":%{public}lu, \"Num inferred recordings\":%{public}lu, \"Num inferred localizations\":%{public}lu}", buf, 0x30u);
    }

  }
  std::make_unique[abi:ne180100]<CLMicroLocationFingerprintStdVectorSource,std::function<BOOL ()(void)> const&,CLMicroLocationFingerprintConfiguration (&)(void),std::vector<CLMicroLocationRecordingEventsTable::Entry> &,ULDatabase &>(a3, (uint64_t)CLMicroLocationFingerprintConfiguration::getRecordingConfigurationFromSettings, (uint64_t)&v164, *(_QWORD *)(v24 + 32), (uint64_t *)&v160);
  std::make_unique[abi:ne180100]<CLMicroLocationFingerprintStdVectorSource,std::function<BOOL ()(void)> const&,CLMicroLocationFingerprintConfiguration (&)(void),std::vector<CLMicroLocationRecordingEventsTable::Entry> &,ULDatabase &>(a3, (uint64_t)CLMicroLocationFingerprintConfiguration::getLocalizingConfigurationFromSettings, (uint64_t)&v161, *(_QWORD *)(v24 + 32), &v159);
  for (j = 0; (*(uint64_t (**)(uint64_t))(*(_QWORD *)v159 + 16))(v159) > (unint64_t)j; ++j)
  {
    v34 = v160;
    v35 = (const CLMicroLocationFingerprint *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v159 + 24))(v159, j);
    CLMicroLocationFingerprintStdVectorSource::push_back(v34, v35);
  }
  v36 = (uint64_t)v160;
  v160 = 0;
  v157 = v36;
  CLMicroLocationFingerprintVector::CLMicroLocationFingerprintVector(&v158, &v157);
  v37 = v157;
  v157 = 0;
  if (v37)
    (*(void (**)(uint64_t))(*(_QWORD *)v37 + 8))(v37);
  v130 = CLMicroLocationFingerprintVector::size((CLMicroLocationFingerprintVector *)&v158);
  if (CLMicroLocationFingerprintVector::size((CLMicroLocationFingerprintVector *)&v158))
  {
    if (onceToken_MicroLocation_Default != -1)
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_55);
    v38 = (id)logObject_MicroLocation_Default;
    if (!os_log_type_enabled(v38, OS_LOG_TYPE_DEFAULT))
      goto LABEL_63;
    v39 = CLMicroLocationFingerprintVector::size((CLMicroLocationFingerprintVector *)&v158);
    if (a4[23] >= 0)
      v40 = a4;
    else
      v40 = *(const std::string::value_type **)a4;
    *(_DWORD *)buf = 68289539;
    *(_DWORD *)&buf[4] = 0;
    *(_WORD *)&buf[8] = 2082;
    *(_QWORD *)&buf[10] = "";
    *(_WORD *)&buf[18] = 2049;
    *(_QWORD *)&buf[20] = v39;
    *(_WORD *)&buf[28] = 2082;
    *(_QWORD *)&buf[30] = v40;
    v41 = "{\"msg%{public}.0s\":\"Similarity List Model Learning, generated LSL\", \"NumLabels\":%{private}lu, \"Client I"
          "D\":%{public, location:escape_only}s}";
    v42 = v38;
    v43 = 38;
  }
  else
  {
    if (onceToken_MicroLocation_Default != -1)
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_55);
    v38 = (id)logObject_MicroLocation_Default;
    if (!os_log_type_enabled(v38, OS_LOG_TYPE_DEFAULT))
      goto LABEL_63;
    if (a4[23] >= 0)
      v44 = a4;
    else
      v44 = *(const std::string::value_type **)a4;
    *(_DWORD *)buf = 68289282;
    *(_DWORD *)&buf[4] = 0;
    *(_WORD *)&buf[8] = 2082;
    *(_QWORD *)&buf[10] = "";
    *(_WORD *)&buf[18] = 2082;
    *(_QWORD *)&buf[20] = v44;
    v41 = "{\"msg%{public}.0s\":\"Similarity List Model Learning, learned without labeled fingerprints\", \"Client ID\":%"
          "{public, location:escape_only}s}";
    v42 = v38;
    v43 = 28;
  }
  _os_log_impl(&dword_2419D9000, v42, OS_LOG_TYPE_DEFAULT, v41, buf, v43);
LABEL_63:

  v45 = (char *)operator new(0x10uLL);
  v46 = v45 + 16;
  v156 = v45 + 16;
  *(_QWORD *)v45 = 0;
  *((_QWORD *)v45 + 1) = 0;
  v154 = v45;
  v155 = v45 + 16;
  CLMicroLocationModel::getIdentifiers((_QWORD *)a5, (uint64_t)buf);
  v47 = *(_QWORD **)&buf[16];
  CLMicroLocationModel::getIdentifiers((_QWORD *)a5, (uint64_t)&v136);
  v48 = 0;
  if (v47)
  {
    v49 = v47;
    do
    {
      ++v48;
      v49 = (_QWORD *)*v49;
    }
    while (v49);
  }
  std::vector<boost::uuids::uuid>::__insert_with_size[abi:ne180100]<std::__hash_const_iterator<std::__hash_node<boost::uuids::uuid,void *> *>,std::__hash_const_iterator<std::__hash_node<boost::uuids::uuid,void *> *>>((uint64_t)&v154, v46, v47, 0, v48);
  std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>>>::~__hash_table((uint64_t)&v136);
  std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>>>::~__hash_table((uint64_t)buf);
  v138[0] = (void *)CLMicroLocationFingerprintVector::begin((CLMicroLocationFingerprintVector *)&v158);
  v138[1] = v50;
  v51 = 0;
  v52 = 0;
  v53 = 0;
  *(_QWORD *)&v148 = CLMicroLocationFingerprintVector::end((CLMicroLocationFingerprintVector *)&v158);
  *((_QWORD *)&v148 + 1) = v54;
  while (CLMicroLocationFingerprintVector::Iterator::operator!=(v138, &v148))
  {
    v55 = CLMicroLocationFingerprintVector::Iterator::operator*(v138);
    v56 = std::__hash_table<std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>>>::find<boost::uuids::uuid>(v169, (_QWORD *)(v55 + 40));
    if (!v56)
      std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
    v57 = std::__hash_table<std::__hash_value_type<boost::uuids::uuid,boost::uuids::uuid>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,boost::uuids::uuid>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,boost::uuids::uuid>>>::__equal_range_multi<boost::uuids::uuid>(v167, v56 + 4);
    v59 = v58;
    while (v57 != v59)
    {
      v60 = v177;
      if (v177 != (_OWORD *)v178)
      {
        while (v60[5] != v57[4] || v60[6] != v57[5])
        {
          v60 += 8;
          if (v60 == v178)
            goto LABEL_81;
        }
      }
      if (v60 == v178)
      {
LABEL_81:
        if (onceToken_MicroLocation_Default != -1)
          dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_55);
        v65 = (id)logObject_MicroLocation_Default;
        if (os_log_type_enabled(v65, OS_LOG_TYPE_FAULT))
        {
          v66 = operator new(0x28uLL);
          v136 = v66;
          v137 = xmmword_241BB2320;
          *v66 = 0u;
          v66[1] = 0u;
          *(_QWORD *)((char *)v66 + 29) = 0;
          boost::uuids::to_chars<char *>((uint64_t)(v57 + 4), v66);
          v67 = v137 >= 0 ? &v136 : (void **)v136;
          *(_DWORD *)buf = 68289283;
          *(_DWORD *)&buf[4] = 0;
          *(_WORD *)&buf[8] = 2082;
          *(_QWORD *)&buf[10] = "";
          *(_WORD *)&buf[18] = 2081;
          *(_QWORD *)&buf[20] = v67;
          _os_log_impl(&dword_2419D9000, v65, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"couldn't find label entry of label\", \"LabelUUID\":%{private, location:escape_only}s}", buf, 0x1Cu);
          if (SHIBYTE(v137) < 0)
            operator delete(v136);
        }

        if (onceToken_MicroLocation_Default != -1)
          dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_55);
        v68 = (id)logObject_MicroLocation_Default;
        if (os_signpost_enabled(v68))
        {
          v69 = operator new(0x28uLL);
          v136 = v69;
          v137 = xmmword_241BB2320;
          *v69 = 0u;
          v69[1] = 0u;
          *(_QWORD *)((char *)v69 + 29) = 0;
          boost::uuids::to_chars<char *>((uint64_t)(v57 + 4), v69);
          if (v137 >= 0)
            v70 = &v136;
          else
            v70 = v136;
          *(_DWORD *)buf = 68289283;
          *(_DWORD *)&buf[4] = 0;
          *(_WORD *)&buf[8] = 2082;
          *(_QWORD *)&buf[10] = "";
          *(_WORD *)&buf[18] = 2081;
          *(_QWORD *)&buf[20] = v70;
          _os_signpost_emit_with_name_impl(&dword_2419D9000, v68, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "couldn't find label entry of label", "{\"msg%{public}.0s\":\"couldn't find label entry of label\", \"LabelUUID\":%{private, location:escape_only}s}", buf, 0x1Cu);
          if (SHIBYTE(v137) < 0)
            operator delete(v136);
        }

      }
      else
      {
        *(_OWORD *)buf = *((_OWORD *)v57 + 2);
        v62 = *(_DWORD *)(v55 + 160);
        v63 = v60[7];
        if (v52 >= v53)
        {
          v71 = a4;
          v72 = ((char *)v52 - (char *)v51) >> 5;
          v73 = v72 + 1;
          if ((unint64_t)(v72 + 1) >> 59)
            std::vector<CLMicroLocationProto::ConfidenceReason>::__throw_length_error[abi:ne180100]();
          if (v53 - v51 > v73)
            v73 = v53 - v51;
          if ((unint64_t)((char *)v53 - (char *)v51) >= 0x7FFFFFFFFFFFFFE0)
            v74 = 0x7FFFFFFFFFFFFFFLL;
          else
            v74 = v73;
          if (v74)
          {
            if (v74 >> 59)
              std::__throw_bad_array_new_length[abi:ne180100]();
            v75 = (char *)operator new(32 * v74);
          }
          else
          {
            v75 = 0;
          }
          v76 = (__n128 *)&v75[32 * v72];
          *v76 = *(__n128 *)buf;
          v76[1].n128_u32[0] = v62;
          v76[1].n128_u64[1] = v63;
          if (v52 == v51)
          {
            v51 = (__n128 *)&v75[32 * v72];
            a4 = v71;
          }
          else
          {
            v77 = (__n128 *)&v75[32 * v72];
            a4 = v71;
            do
            {
              v78 = v52[-1];
              v77[-2] = v52[-2];
              v77[-1] = v78;
              v77 -= 2;
              v52 -= 2;
            }
            while (v52 != v51);
            v52 = v51;
            v51 = v77;
          }
          v53 = (__n128 *)&v75[32 * v74];
          v64 = v76 + 2;
          if (v52)
            operator delete(v52);
        }
        else
        {
          *v52 = *((__n128 *)v57 + 2);
          v52[1].n128_u32[0] = v62;
          v52[1].n128_u64[1] = v63;
          v64 = v52 + 2;
        }
        v52 = v64;
      }
      v57 = (_QWORD *)*v57;
    }
    CLMicroLocationFingerprintVector::Iterator::operator++((uint64_t)v138);
  }
  v79 = 126 - 2 * __clz(((char *)v52 - (char *)v51) >> 5);
  if (v52 == v51)
    v80 = 0;
  else
    v80 = v79;
  std::__introsort<std::_ClassicAlgPolicy,CLMicroLocationLearner::learnLocationSimilarityListModel(NSMutableDictionary *,std::function<BOOL ()(void)> const&,CLMicroLocationClientUtils::ClientIdAndClientServiceId const&,CLMicroLocationModel &,std::chrono::time_point<cl::chrono::CFAbsoluteTimeClock,std::chrono::duration<long double,std::ratio<1l,1l>>>,boost::uuids::uuid const&,std::vector<CLMicroLocationProto::EventType>,std::vector<CLMicroLocationRecordingEventsTable::Entry> const&,std::optional<CLMicroLocationLearner::ModelStabilityParameters> const&)::$_3 &,CLMicroLocationLearner::learnLocationSimilarityListModel(NSMutableDictionary *,std::function<BOOL ()(void)> const&,CLMicroLocationClientUtils::ClientIdAndClientServiceId const&,CLMicroLocationModel &,std::chrono::time_point<cl::chrono::CFAbsoluteTimeClock,std::chrono::duration<long double,std::ratio<1l,1l>>>,boost::uuids::uuid const&,std::vector<CLMicroLocationProto::EventType>,std::vector<CLMicroLocationRecordingEventsTable::Entry> const&,std::optional<CLMicroLocationLearner::ModelStabilityParameters> const&)::LabelConfidenceAndTime *,false>((uint64_t)v51, v52, v80, 1);
  v152 = 0;
  v151 = 0;
  v153 = 0;
  v138[0] = &v151;
  if (v52 == v51)
  {
    v148 = 0u;
    v149 = 0u;
    v150 = 1065353216;
  }
  else
  {
    v81 = v51;
    do
    {
      *(__n128 *)buf = *v81;
      *(_DWORD *)&buf[16] = v81[1].n128_u32[0];
      std::back_insert_iterator<std::vector<CLMicroLocationModel::SimilarityListData::EventInformation>>::operator=[abi:ne180100]((void ***)v138, (__int128 *)buf);
      v81 += 2;
    }
    while (v81 != v52);
    v82 = (char *)v151;
    v148 = 0u;
    v149 = 0u;
    v150 = 1065353216;
    if (v152 != v151)
    {
      v83 = 0;
      v84 = 0;
      do
      {
        *(_OWORD *)buf = *(_OWORD *)&v82[v83];
        *(_DWORD *)&buf[16] = v84;
        std::__hash_table<std::__hash_value_type<boost::uuids::uuid,int>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,int>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,int>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,int>>>::__emplace_unique_key_args<boost::uuids::uuid,std::pair<boost::uuids::uuid const,int>>((uint64_t)&v148, buf, (uint64_t)buf);
        ++v84;
        v82 = (char *)v151;
        v83 += 20;
      }
      while (v84 < 0xCCCCCCCCCCCCCCCDLL * ((v152 - (_BYTE *)v151) >> 2));
    }
  }
  v142 = 0;
  v147 = 0;
  *(_OWORD *)v138 = 0u;
  *(_OWORD *)v139 = 0u;
  v140 = 0u;
  LOBYTE(v141) = 0;
  v144 = 0;
  v145 = 0;
  v143 = 0;
  v146 = 0;
  CLMicroLocationModel::SimilarityListData::prepareWithClustersInformationOfEvents((uint64_t)v138, (unint64_t **)&v154, (uint64_t *)&v151);
  CLMicroLocationModel::SimilarityListData::calculateNormalizedProbabilitiesWithoutNullCluster(v138, a5, (CLMicroLocationFingerprintVector *)&v158, v169, v167, &v148);
  std::optional<CLMicroLocationModel::SimilarityListData>::operator=[abi:ne180100]<CLMicroLocationModel::SimilarityListData&,void>((CLMicroLocationModel::SimilarityListData *)(a5 + 72), (CLMicroLocationModel::SimilarityListData *)v138);
  v85 = *(_DWORD *)(a5 + 300) - v130;
  if (v85 < 0)
  {
    if (onceToken_MicroLocation_Default != -1)
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_55);
    v86 = (id)logObject_MicroLocation_Default;
    if (os_log_type_enabled(v86, OS_LOG_TYPE_DEFAULT))
    {
      v87 = *(_DWORD *)(a5 + 300);
      *(_DWORD *)buf = 68289538;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)&buf[8] = 2082;
      *(_QWORD *)&buf[10] = "";
      *(_WORD *)&buf[18] = 1026;
      *(_DWORD *)&buf[20] = v87;
      *(_WORD *)&buf[24] = 1026;
      *(_DWORD *)&buf[26] = v130;
      _os_log_impl(&dword_2419D9000, v86, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#Warning, number of total input fingerprints is smaller than number of labeled fingerprints, note labeled fingerprints include localization triggers which used a different fp generation configuration\", \"Number of Input ValidFingerprints\":%{public}u, \"Number of Input Valid Fingerprints Labeled\":%{public}u}", buf, 0x1Eu);
    }

    v85 = 0;
  }
  *(_DWORD *)(a5 + 308) = v130;
  *(_DWORD *)(a5 + 304) = v85;
  CLMicroLocationLearner::updateModelDaysWithRecordings(a1, a5, &v180, a10, (uint64_t)v128);
  if (CLMicroLocationModel::getQualityIndicator((CLMicroLocationModel *)a5) == 3)
  {
    *(_BYTE *)(a5 + 8) = 1;
    v88 = a10;
    v89 = ULRapportMonitor;
    if (!*(_BYTE *)(a10 + 16))
      goto LABEL_141;
LABEL_140:
    *(_WORD *)buf = *(unsigned __int8 *)(v88 + 4) | 0x100;
    goto LABEL_142;
  }
  v88 = a10;
  v89 = ULRapportMonitor;
  if (*(_BYTE *)(a10 + 16))
  {
    *(_BYTE *)(a5 + 8) = *(_BYTE *)(a10 + 4);
    goto LABEL_140;
  }
LABEL_141:
  *(_WORD *)buf = 0;
LABEL_142:
  CLMicroLocationCoreAnalyticsPublishHelper::updateModelStabilityMetrics(v129, (unsigned int *)a5, buf);
  if (v89[97].isa != (__objc2_class *)-1)
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_55);
  v90 = (id)logObject_MicroLocation_Default;
  if (os_log_type_enabled(v90, OS_LOG_TYPE_DEFAULT))
  {
    v91 = CLMicroLocationModel::numRecordingsBeforePruning((CLMicroLocationModel *)a5);
    v93 = *(_QWORD *)(a5 + 328);
    v92 = *(_QWORD *)(a5 + 336);
    v94 = CLMicroLocationModel::numClusters((CLMicroLocationModel *)a5);
    v95 = *(_DWORD *)(a5 + 4);
    v96 = *(_QWORD *)(a5 + 40);
    v97 = *(_DWORD *)(a5 + 296);
    v98 = *(_DWORD *)(a5 + 300);
    v99 = *(_DWORD *)(a5 + 312);
    *(_DWORD *)buf = 68291330;
    *(_DWORD *)&buf[4] = 0;
    *(_WORD *)&buf[8] = 2082;
    *(_QWORD *)&buf[10] = "";
    *(_WORD *)&buf[18] = 2050;
    *(_QWORD *)&buf[20] = v91;
    *(_WORD *)&buf[28] = 2050;
    *(_QWORD *)&buf[30] = (v92 - v93) >> 5;
    v184 = 2050;
    v185 = v94;
    v186 = 1026;
    *(_DWORD *)v187 = v95;
    *(_WORD *)&v187[4] = 2050;
    *(_QWORD *)&v187[6] = v96;
    *(_WORD *)&v187[14] = 1026;
    *(_DWORD *)&v187[16] = v97;
    v188 = 1026;
    v189 = v98;
    v190 = 2050;
    v191 = ((char *)v178 - (char *)v177) >> 6;
    v192 = 1026;
    v193 = v99;
    _os_log_impl(&dword_2419D9000, v90, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Microlocation model learned\", \"numFingerprints before pruning\":%{public}lu, \"numFingerprints after pruning\":%{public}lu, \"numClusters\":%{public}lu, \"type\":%{public}d, \"numAnchors\":%{public}lu, \"Number of Recording triggers at current LOI\":%{public}u, \"Number of Input Valid Fingerprints\":%{public}u, \"Number of Input Labels\":%{public}lu, \"Number of WiFi Access Points\":%{public}u}", buf, 0x5Cu);
  }

  CLMicroLocationModel::toProtobuf((CLMicroLocationModel *)a5, (uint64_t)&v136);
  v135 = 0;
  boost::uuids::detail::random_provider_base::random_provider_base((boost::uuids::detail::random_provider_base *)&v135);
  v100 = boost::uuids::random_generator_pure::operator()((uint64_t)&v135);
  v102 = v101;
  v103 = v180;
  if (a4[23] < 0)
    std::string::__init_copy_ctor_external(&v133, *(const std::string::value_type **)a4, *((_QWORD *)a4 + 1));
  else
    v133 = *(std::string *)a4;
  v134 = 1;
  v181 = *(_OWORD *)v127;
  v182 = 1;
  CLMicroLocationModelTable::Entry::Entry(buf, v100, v102, &v136, &v133, &v181, *v128, v128[1], v103);
  if (v134 && SHIBYTE(v133.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v133.__r_.__value_.__l.__data_);
  boost::uuids::detail::random_provider_base::destroy((boost::uuids::detail::random_provider_base *)&v135);
  CLMicroLocationModelTable::Entry::Entry(a8, buf);
  *(_BYTE *)(a8 + 312) = 1;
  if (v196 && v195 < 0)
    operator delete(v194);
  CLMicroLocationProto::Model::~Model((CLMicroLocationProto::Model *)&buf[32]);
  CLMicroLocationProto::Model::~Model((CLMicroLocationProto::Model *)&v136);
  if (v143)
  {
    v144 = v143;
    operator delete(v143);
  }
  if (v142)
  {
    v104 = v141;
    v141 = 0;
    if (v104)
      MEMORY[0x2426A04BC](v104, 0x1000C8000313F17);
  }
  if (v139[1])
  {
    *(void **)&v140 = v139[1];
    operator delete(v139[1]);
  }
  if (v138[0])
  {
    v138[1] = v138[0];
    operator delete(v138[0]);
  }
  std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>>>::~__hash_table((uint64_t)&v148);
  if (v151)
  {
    v152 = v151;
    operator delete(v151);
  }
  if (v51)
    operator delete(v51);
  if (v154)
  {
    v155 = v154;
    operator delete(v154);
  }
  v105 = v158;
  v158 = 0;
  if (v105)
    (*(void (**)(uint64_t))(*(_QWORD *)v105 + 8))(v105);
  v106 = v159;
  v159 = 0;
  if (v106)
    (*(void (**)(uint64_t))(*(_QWORD *)v106 + 8))(v106);
  v107 = (uint64_t)v160;
  v160 = 0;
  if (v107)
    (*(void (**)(uint64_t))(*(_QWORD *)v107 + 8))(v107);
  *(_QWORD *)buf = &v161;
  std::vector<CLMicroLocationRecordingEventsTable::Entry>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  *(_QWORD *)buf = &v164;
  std::vector<CLMicroLocationRecordingEventsTable::Entry>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>>>::~__hash_table((uint64_t)v167);
  std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>>>::~__hash_table((uint64_t)v169);
  *(_QWORD *)buf = &v174;
  std::vector<CLMicroLocationRecordingEventsTable::Entry>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  *(_QWORD *)buf = &v177;
  std::vector<CLMicroLocationRecordingLabelsTable::Entry>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);

}

void sub_241A86694(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31)
{
  void *v31;
  void *v32;

  operator delete(v32);

  std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>>>::~__hash_table((uint64_t)&STACK[0x2B0]);
  std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>>>::~__hash_table((uint64_t)&STACK[0x2E0]);
  a31 = &STACK[0x328];
  std::vector<CLMicroLocationRecordingEventsTable::Entry>::__destroy_vector::operator()[abi:ne180100]((void ***)&a31);
  a31 = &STACK[0x340];
  std::vector<CLMicroLocationRecordingLabelsTable::Entry>::__destroy_vector::operator()[abi:ne180100]((void ***)&a31);

  _Unwind_Resume(a1);
}

uint64_t std::optional<CLMicroLocationConfigurationTable::Entry>::operator=[abi:ne180100]<CLMicroLocationConfigurationTable::Entry,void>(uint64_t a1, uint64_t a2)
{
  void **v4;
  __int128 v5;
  __int128 v6;

  if (*(_BYTE *)(a1 + 112))
  {
    *(_QWORD *)a1 = *(_QWORD *)a2;
    v4 = (void **)(a1 + 8);
    if (*(char *)(a1 + 31) < 0)
      operator delete(*v4);
    v5 = *(_OWORD *)(a2 + 8);
    *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
    *(_OWORD *)v4 = v5;
    *(_BYTE *)(a2 + 31) = 0;
    *(_BYTE *)(a2 + 8) = 0;
    v6 = *(_OWORD *)(a2 + 32);
    *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = v6;
    CLMicroLocationProto::Configuration::CopyFrom((CLMicroLocationProto::Configuration *)(a1 + 56), (const CLMicroLocationProto::Configuration *)(a2 + 56));
  }
  else
  {
    std::__construct_at[abi:ne180100]<CLMicroLocationConfigurationTable::Entry,CLMicroLocationConfigurationTable::Entry,CLMicroLocationConfigurationTable::Entry*>(a1, a2);
    *(_BYTE *)(a1 + 112) = 1;
  }
  return a1;
}

void CLMicroLocationLearner::semiSupervisedLearnWrapper(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unsigned int a4@<W3>, void *a5@<X4>, uint64_t a6@<X5>, CLMicroLocationFingerprintPool *a7@<X6>, _BYTE *a8@<X8>, uint64_t a9)
{
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int128 *v22;
  __int128 *v23;
  __int128 *v24;
  __int128 *v25;
  __int128 *i;
  __int128 v27;
  void **v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  unsigned int v36;
  unsigned int v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t *v40;
  unint64_t *v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  _BYTE *v47;
  uint64_t v48;
  uint64_t v49;
  NSObject *v50;
  NSObject *v51;
  id v54;
  char *v56;
  char *v57;
  _OWORD v58[2];
  int v59;
  void *__p;
  void *v61;
  uint64_t v62;
  __int128 *v63;
  __int128 *v64;
  uint64_t v65;
  uint64_t v66[3];
  _BYTE v67[56];
  _BYTE v68[24];
  _BYTE *v69;
  _BYTE v70[24];
  _BYTE *v71;
  _BYTE buf[18];
  __int16 v73;
  uint64_t v74;
  uint64_t v75;

  v75 = *MEMORY[0x24BDAC8D0];
  v54 = a5;
  CLMicroLocationLearner::getAnchorAppearanceMapForLoi(a1, (_OWORD *)a9, (uint64_t)v67);
  v65 = 0;
  memset(v66, 0, sizeof(v66));
  v63 = 0;
  v64 = 0;
  +[ULDefaultsSingleton shared](ULDefaultsSingleton, "shared");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v13, "defaultsDictionary");
  v14 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "ULLearningLabeledRecordingTriggersLimit");
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v14, "objectForKey:", v15);
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  if (v16 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
    v17 = objc_msgSend(v16, "unsignedIntValue");
  else
    v17 = objc_msgSend(&unk_2511EDA98, "unsignedIntValue");
  v18 = v17;

  v19 = *(_QWORD *)a9;
  v20 = *(_QWORD *)(a9 + 8);
  v61 = 0;
  v62 = 0;
  __p = 0;
  std::vector<CLMicroLocationProto::EventType>::__init_with_size[abi:ne180100]<CLMicroLocationProto::EventType*,CLMicroLocationProto::EventType*>(&__p, *(const void **)a3, *(_QWORD *)(a3 + 8), (uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 2);
  CLMicroLocationLearner::getServiceLabelsAndLabeledRecordingEventsForLoi(a1, a2 + 24, v66, (uint64_t)&v63, v19, v20, v21, v18);
  if (__p)
  {
    v61 = __p;
    operator delete(__p);
  }
  memset(v58, 0, sizeof(v58));
  v59 = 1065353216;
  v22 = v63;
  v23 = v64;
  while (v22 != v23)
  {
    *(_OWORD *)buf = *v22;
    std::__hash_table<boost::uuids::uuid,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,std::allocator<boost::uuids::uuid>>::__emplace_unique_key_args<boost::uuids::uuid,boost::uuids::uuid>((uint64_t)v58, buf, buf);
    v22 = (__int128 *)((char *)v22 + 248);
  }
  CLMicroLocationLearner::selectRecordingEventTriggersForLearningMeasurementsOrderedByTimestamp(a1, a3, *(_QWORD *)a9, *(_QWORD *)(a9 + 8), (uint64_t)&v56);
  v25 = (__int128 *)v56;
  v24 = (__int128 *)v57;
  if (v56 != v57)
  {
    while (!std::__hash_table<std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>>>::find<boost::uuids::uuid>(v58, v25))
    {
      v25 = (__int128 *)((char *)v25 + 248);
      if (v25 == v24)
      {
        v25 = v24;
        goto LABEL_22;
      }
    }
    if (v25 != v24)
    {
      for (i = (__int128 *)((char *)v25 + 248); i != v24; i = (__int128 *)((char *)i + 248))
      {
        if (!std::__hash_table<std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>>>::find<boost::uuids::uuid>(v58, i))
        {
          v27 = *i;
          *((_QWORD *)v25 + 2) = *((_QWORD *)i + 2);
          *v25 = v27;
          v28 = (void **)v25 + 3;
          if (*((char *)v25 + 47) < 0)
            operator delete(*v28);
          v29 = *(__int128 *)((char *)i + 24);
          *((_QWORD *)v25 + 5) = *((_QWORD *)i + 5);
          *(_OWORD *)v28 = v29;
          *((_BYTE *)i + 47) = 0;
          *((_BYTE *)i + 24) = 0;
          v30 = i[3];
          *(__int128 *)((char *)v25 + 60) = *(__int128 *)((char *)i + 60);
          v25[3] = v30;
          CLMicroLocationProto::RecordingEvent::CopyFrom((CLMicroLocationProto::RecordingEvent *)(v25 + 5), (const CLMicroLocationProto::RecordingEvent *)(i + 5));
          v31 = i[14];
          *((_BYTE *)v25 + 240) = *((_BYTE *)i + 240);
          v25[14] = v31;
          v25 = (__int128 *)((char *)v25 + 248);
        }
      }
    }
  }
LABEL_22:
  std::vector<CLMicroLocationRecordingEventsTable::Entry>::erase((uint64_t)&v56, (uint64_t)v25, (__int128 *)v57);
  +[ULDefaultsSingleton shared](ULDefaultsSingleton, "shared");
  v32 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v32, "defaultsDictionary");
  v33 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "ULLearningRecordingLimit");
  v34 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v33, "objectForKey:", v34);
  v35 = (void *)objc_claimAutoreleasedReturnValue();
  if (v35 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
    v36 = objc_msgSend(v35, "unsignedIntValue");
  else
    v36 = objc_msgSend(&unk_2511EDA20, "unsignedIntValue");
  v37 = v36;

  v38 = 0xEF7BDEF7BDEF7BDFLL * (((char *)v64 - (char *)v63) >> 3);
  if (v37 >= v38)
    v39 = v37 - v38;
  else
    v39 = 0;
  v41 = (unint64_t *)v56;
  v40 = (unint64_t *)v57;
  v42 = 0xEF7BDEF7BDEF7BDFLL * ((v57 - v56) >> 3);
  if (v42 > v39)
  {
    std::vector<CLMicroLocationRecordingEventsTable::Entry>::erase((uint64_t)&v56, (uint64_t)v56, (__int128 *)&v57[-248 * v39]);
    v41 = (unint64_t *)v56;
    v40 = (unint64_t *)v57;
    v42 = 0xEF7BDEF7BDEF7BDFLL * ((v57 - v56) >> 3);
  }
  v43 = 126 - 2 * __clz(v42);
  if (v40 == v41)
    v44 = 0;
  else
    v44 = v43;
  std::__introsort<std::_ClassicAlgPolicy,CLMicroLocationLearner::semiSupervisedLearnWrapper(CLMicroLocationClientUtils::ClientIdAndClientServiceId const&,std::vector<CLMicroLocationProto::EventType> const&,CLMicroLocationProto::Model_GenerationAlgorithm,NSMutableDictionary *,std::function<BOOL ()(void)>,CLMicroLocationFingerprintPool &,std::string const&,boost::uuids::uuid const&)::$_2 &,CLMicroLocationRecordingEventsTable::Entry *,false>(v41, v40, v44, 1);
  *a8 = 0;
  a8[312] = 0;
  if (a4 == 4)
  {
    v49 = *(_QWORD *)(a1 + 32);
    std::__function::__value_func<double ()(CLMicroLocationFingerprint const&,CLMicroLocationFingerprint const&)>::__value_func[abi:ne180100]((uint64_t)v68, a6);
    v46 = v54;
    CLMicroLocationSemiSupervisedAlgorithm::learnBinaryRoiSemiSupervisedModel(v54, v49, (uint64_t)v68, v66, &v63, (__int128 **)&v56, (uint64_t)v67, buf, a2, a7, *(_QWORD *)a9, *(_QWORD *)(a9 + 8));
    std::__optional_storage_base<CLMicroLocationModelTable::Entry,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<CLMicroLocationModelTable::Entry,false>>((uint64_t)a8, (uint64_t)buf);
    std::__optional_destruct_base<CLMicroLocationModelTable::Entry,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)buf);
    v47 = v69;
    if (v69 == v68)
    {
      v48 = 4;
      v47 = v68;
      goto LABEL_50;
    }
  }
  else
  {
    if (a4 != 3)
    {
      if (onceToken_MicroLocation_Default != -1)
        dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_55);
      v46 = v54;
      v50 = logObject_MicroLocation_Default;
      if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_ERROR))
      {
        *(_QWORD *)buf = 68289282;
        *(_WORD *)&buf[8] = 2082;
        *(_QWORD *)&buf[10] = "";
        v73 = 2050;
        v74 = a4;
        _os_log_impl(&dword_2419D9000, v50, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"invalid generation algorithm\", \"generation algorithm\":%{public}lu}", buf, 0x1Cu);
      }
      if (onceToken_MicroLocation_Default != -1)
        dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_55);
      v51 = logObject_MicroLocation_Default;
      if (os_signpost_enabled((os_log_t)logObject_MicroLocation_Default))
      {
        *(_QWORD *)buf = 68289282;
        *(_WORD *)&buf[8] = 2082;
        *(_QWORD *)&buf[10] = "";
        v73 = 2050;
        v74 = a4;
        _os_signpost_emit_with_name_impl(&dword_2419D9000, v51, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "invalid generation algorithm", "{\"msg%{public}.0s\":\"invalid generation algorithm\", \"generation algorithm\":%{public}lu}", buf, 0x1Cu);
      }
      goto LABEL_51;
    }
    v45 = *(_QWORD *)(a1 + 32);
    std::__function::__value_func<double ()(CLMicroLocationFingerprint const&,CLMicroLocationFingerprint const&)>::__value_func[abi:ne180100]((uint64_t)v70, a6);
    v46 = v54;
    CLMicroLocationSemiSupervisedAlgorithm::learnSelfTrainingSemiSupervisedModel(v54, v45, (uint64_t)v70, v66, &v63, (uint64_t)&v56, (uint64_t)v67, buf, a2, a7, *(_QWORD *)a9, *(_QWORD *)(a9 + 8));
    std::__optional_storage_base<CLMicroLocationModelTable::Entry,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<CLMicroLocationModelTable::Entry,false>>((uint64_t)a8, (uint64_t)buf);
    std::__optional_destruct_base<CLMicroLocationModelTable::Entry,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)buf);
    v47 = v71;
    if (v71 == v70)
    {
      v48 = 4;
      v47 = v70;
LABEL_50:
      (*(void (**)(void))(*(_QWORD *)v47 + 8 * v48))();
      goto LABEL_51;
    }
  }
  if (v47)
  {
    v48 = 5;
    goto LABEL_50;
  }
LABEL_51:
  *(_QWORD *)buf = &v56;
  std::vector<CLMicroLocationRecordingEventsTable::Entry>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>>>::~__hash_table((uint64_t)v58);
  *(_QWORD *)buf = &v63;
  std::vector<CLMicroLocationRecordingEventsTable::Entry>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  *(_QWORD *)buf = v66;
  std::vector<CLMicroLocationRecordingLabelsTable::Entry>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>>>::~__hash_table((uint64_t)v67);

}

void sub_241A870D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,char *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47,uint64_t a48,uint64_t a49,uint64_t a50,void **a51)
{
  uint64_t v51;
  uint64_t v52;
  char *v54;
  uint64_t v55;

  std::__optional_destruct_base<CLMicroLocationModelTable::Entry,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&a51);
  v54 = *(char **)(v52 + 104);
  if (v54 == &a43)
  {
    v55 = 4;
    v54 = &a43;
  }
  else
  {
    if (!v54)
      goto LABEL_6;
    v55 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v54 + 8 * v55))();
LABEL_6:
  std::__optional_destruct_base<CLMicroLocationModelTable::Entry,false>::~__optional_destruct_base[abi:ne180100](v51);
  *(_QWORD *)(v52 + 144) = &a18;
  std::vector<CLMicroLocationRecordingEventsTable::Entry>::__destroy_vector::operator()[abi:ne180100](&a51);
  std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>>>::~__hash_table((uint64_t)&a21);
  a21 = &a30;
  std::vector<CLMicroLocationRecordingEventsTable::Entry>::__destroy_vector::operator()[abi:ne180100]((void ***)&a21);
  a21 = &a33;
  std::vector<CLMicroLocationRecordingLabelsTable::Entry>::__destroy_vector::operator()[abi:ne180100]((void ***)&a21);
  std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>>>::~__hash_table((uint64_t)&a36);

  _Unwind_Resume(a1);
}

void CLMicroLocationLearner::selectRecordingEventTriggersForLearningMeasurementsOrderedByTimestamp(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  char v5;
  id v9;
  void *v10;
  id v11;
  void *v12;
  uint64_t v13;
  void **v15[2];
  char v16;
  __int128 v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;

  v5 = a3;
  v20 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)&v19 = a3;
  *((_QWORD *)&v19 + 1) = a4;
  v9 = *(id *)(*(_QWORD *)(a1 + 32) + 88);
  v10 = v9;
  v17 = v19;
  LOBYTE(v18) = 1;
  if (v9)
  {
    objc_msgSend(v9, "fetchRecordingEventTriggersForLearningMeasurements:atLoiGroupId:", a2, &v17);
  }
  else
  {
    *(_QWORD *)a5 = 0;
    *(_QWORD *)(a5 + 8) = 0;
    *(_QWORD *)(a5 + 16) = 0;
  }

  if (v5)
  {
LABEL_5:
    v11 = *(id *)(*(_QWORD *)(a1 + 32) + 88);
    v12 = v11;
    v15[0] = 0;
    v15[1] = 0;
    v16 = 1;
    if (v11)
    {
      objc_msgSend(v11, "fetchRecordingEventTriggersForLearningMeasurements:atLoiGroupId:", a2, v15);
    }
    else
    {
      v17 = 0uLL;
      v18 = 0;
    }

    std::vector<CLMicroLocationRecordingEventsTable::Entry>::__insert_with_size[abi:ne180100]<std::__wrap_iter<CLMicroLocationRecordingEventsTable::Entry*>,std::__wrap_iter<CLMicroLocationRecordingEventsTable::Entry*>>((uint64_t *)a5, *(__int128 **)(a5 + 8), (__int128 *)v17, *((__int128 **)&v17 + 1), 0xEF7BDEF7BDEF7BDFLL * ((uint64_t)(*((_QWORD *)&v17 + 1) - v17) >> 3));
    v15[0] = (void **)&v17;
    std::vector<CLMicroLocationRecordingEventsTable::Entry>::__destroy_vector::operator()[abi:ne180100](v15);
  }
  else
  {
    v13 = 1;
    while (v13 != 16)
    {
      if (*((unsigned __int8 *)&v19 + v13++))
      {
        if ((unint64_t)(v13 - 2) <= 0xE)
          goto LABEL_5;
        return;
      }
    }
  }
}

void sub_241A873DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  void *v5;
  va_list va;

  va_start(va, a5);

  std::vector<CLMicroLocationRecordingEventsTable::Entry>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<CLMicroLocationRecordingEventsTable::Entry>::erase(uint64_t a1, uint64_t a2, __int128 *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v9;

  if ((__int128 *)a2 != a3)
  {
    std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<CLMicroLocationRecordingEventsTable::Entry *,CLMicroLocationRecordingEventsTable::Entry *,CLMicroLocationRecordingEventsTable::Entry *>((uint64_t)&v9, a3, *(__int128 **)(a1 + 8), a2);
    v6 = v5;
    v7 = *(_QWORD *)(a1 + 8);
    if (v7 != v5)
    {
      do
      {
        v7 -= 248;
        std::allocator<CLMicroLocationRecordingEventsTable::Entry>::destroy[abi:ne180100](a1 + 16, v7);
      }
      while (v7 != v6);
    }
    *(_QWORD *)(a1 + 8) = v6;
  }
  return a2;
}

uint64_t std::vector<CLMicroLocationClientUtils::ClientIdentitiesAndLocationTypes>::emplace_back<CLMicroLocationClientUtils::ClientIdentitiesAndLocationTypes>(uint64_t *a1, __int128 *a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  __int128 v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD v19[5];

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD *)(v4 - 8);
  if (v7 >= v6)
  {
    v10 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7 - *a1) >> 4);
    v11 = v10 + 1;
    if (v10 + 1 > 0x555555555555555)
      std::vector<CLMicroLocationProto::ConfidenceReason>::__throw_length_error[abi:ne180100]();
    v12 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - *a1) >> 4);
    if (2 * v12 > v11)
      v11 = 2 * v12;
    if (v12 >= 0x2AAAAAAAAAAAAAALL)
      v13 = 0x555555555555555;
    else
      v13 = v11;
    v19[4] = v4;
    v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CLMicroLocationClientUtils::ClientIdentitiesAndLocationTypes>>(v4, v13);
    v15 = &v14[48 * v10];
    v19[0] = v14;
    v19[1] = v15;
    v19[3] = &v14[48 * v16];
    v17 = *((_QWORD *)a2 + 2);
    *(_OWORD *)v15 = *a2;
    *((_QWORD *)v15 + 2) = v17;
    *((_QWORD *)a2 + 1) = 0;
    *((_QWORD *)a2 + 2) = 0;
    *(_QWORD *)a2 = 0;
    *(_OWORD *)(v15 + 24) = *(__int128 *)((char *)a2 + 24);
    *((_QWORD *)v15 + 5) = *((_QWORD *)a2 + 5);
    v19[2] = v15 + 48;
    std::vector<CLMicroLocationClientUtils::ClientIdentitiesAndLocationTypes>::__swap_out_circular_buffer(a1, v19);
    v9 = a1[1];
    std::__split_buffer<CLMicroLocationClientUtils::ClientIdentitiesAndLocationTypes>::~__split_buffer((uint64_t)v19);
  }
  else
  {
    v8 = *a2;
    *(_QWORD *)(v7 + 16) = *((_QWORD *)a2 + 2);
    *(_OWORD *)v7 = v8;
    *((_QWORD *)a2 + 1) = 0;
    *((_QWORD *)a2 + 2) = 0;
    *(_QWORD *)a2 = 0;
    *(_OWORD *)(v7 + 24) = *(__int128 *)((char *)a2 + 24);
    *(_QWORD *)(v7 + 40) = *((_QWORD *)a2 + 5);
    v9 = v7 + 48;
    a1[1] = v7 + 48;
  }
  a1[1] = v9;
  return v9 - 48;
}

void sub_241A875EC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<CLMicroLocationClientUtils::ClientIdentitiesAndLocationTypes>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t CLMicroLocationLearner::updateAnchorAppearanceMapFromRapportAndRecordings(uint64_t a1, uint64_t a2, __int128 **a3, uint64_t a4, double a5)
{
  _QWORD *v10;
  _QWORD *v11;
  __int128 *v12;
  __int128 *v13;
  id v14;
  void **v15;
  __int128 *v16;
  double v17;
  NSObject *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint8_t *v23;
  void **v24;
  void **v25;
  __int128 v26;
  __int128 v27;
  int v28;
  uint8_t buf[8];
  _BYTE v30[20];
  __int16 v31;
  uint64_t v32;
  __int16 v33;
  uint64_t v34;
  __int16 v35;
  uint64_t v36;
  __int128 v37;
  uint64_t v38;

  v38 = *MEMORY[0x24BDAC8D0];
  v26 = 0u;
  v27 = 0u;
  v28 = 1065353216;
  v10 = *(_QWORD **)a4;
  v11 = *(_QWORD **)(a4 + 8);
  while (v10 != v11)
  {
    std::__hash_table<boost::uuids::uuid,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,std::allocator<boost::uuids::uuid>>::__emplace_unique_key_args<boost::uuids::uuid,boost::uuids::uuid const&>((uint64_t)&v26, v10, v10);
    v10 += 10;
  }
  v12 = *a3;
  v13 = a3[1];
  if (*a3 != v13)
  {
    while (1)
    {
      v14 = *(id *)(*(_QWORD *)(a1 + 32) + 64);
      v37 = *v12;
      v15 = (void **)operator new(0x10uLL);
      v24 = v15 + 2;
      v25 = v15 + 2;
      *(_OWORD *)v15 = v37;
      v23 = (uint8_t *)v15;
      if (v14)
      {
        objc_msgSend(v14, "fetchMeasurementsForRecordingUUIDs:", &v23);
        v15 = (void **)v23;
        if (!v23)
          goto LABEL_10;
      }
      else
      {
        *(_QWORD *)buf = 0;
        *(_QWORD *)v30 = 0;
        *(_QWORD *)&v30[8] = 0;
      }
      v24 = v15;
      operator delete(v15);
LABEL_10:

      CLMicroLocationAnchorAppearanceMap::updateAnchorIdSetFromMeasurements((CLMicroLocationProto::Measurement *)&v26, (uint64_t *)buf);
      v23 = buf;
      std::vector<CLMicroLocationMeasurementTable::Entry>::__destroy_vector::operator()[abi:ne180100]((void ***)&v23);
      if (++v12 == v13)
      {
        v12 = *a3;
        v16 = a3[1];
        goto LABEL_13;
      }
    }
  }
  v16 = *a3;
LABEL_13:
  v17 = cl::chrono::CFAbsoluteTimeClock::now();
  CLMicroLocationAnchorAppearanceMap::updateSeenAnchors(a2, &v26, v16 != v12, a5, v17);
  if (onceToken_MicroLocation_Default != -1)
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_55);
  v18 = logObject_MicroLocation_Default;
  if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
  {
    v19 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(a4 + 8) - *(_QWORD *)a4) >> 4);
    v20 = a3[1] - *a3;
    v21 = *(_QWORD *)(a2 + 24);
    *(_DWORD *)buf = 68290050;
    *(_DWORD *)&buf[4] = 0;
    *(_WORD *)v30 = 2082;
    *(_QWORD *)&v30[2] = "";
    *(_WORD *)&v30[10] = 2050;
    *(_QWORD *)&v30[12] = v19;
    v31 = 2050;
    v32 = *((_QWORD *)&v27 + 1);
    v33 = 2050;
    v34 = v20;
    v35 = 2050;
    v36 = v21;
    _os_log_impl(&dword_2419D9000, v18, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Updating Anchor ID Set\", \"Num. Rapport Anchor Devices\":%{public}lu, \"Num Rapport and Measured Anchor Devices\":%{public}lu, \"Number of recordings since last model\":%{public}lu, \"Anchor Appearance Map size\":%{public}lu}", buf, 0x3Au);
  }
  return std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>>>::~__hash_table((uint64_t)&v26);
}

void sub_241A87868(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>>>::~__hash_table((uint64_t)&a13);
  _Unwind_Resume(a1);
}

void CLMicroLocationLearner::getMostRecentAnchorAppearancEntryForLoi(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  id v8;
  void *v9;
  id v10;
  void *v11;
  NSObject *v12;
  char *v13;
  uint64_t *v14;
  _QWORD v15[2];
  uint8_t buf[48];
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  v8 = *(id *)(*(_QWORD *)(a1 + 32) + 32);
  v9 = v8;
  if (v8)
  {
    objc_msgSend(v8, "fetchMostRecentAnchorAppearancesAtLoi:", a3);
  }
  else
  {
    *(_QWORD *)(a4 + 112) = 0;
    *(_OWORD *)(a4 + 80) = 0u;
    *(_OWORD *)(a4 + 96) = 0u;
    *(_OWORD *)(a4 + 48) = 0u;
    *(_OWORD *)(a4 + 64) = 0u;
    *(_OWORD *)(a4 + 16) = 0u;
    *(_OWORD *)(a4 + 32) = 0u;
    *(_OWORD *)a4 = 0u;
  }

  if (!*(_BYTE *)(a4 + 112))
  {
    v10 = *(id *)(*(_QWORD *)(a1 + 32) + 32);
    v11 = v10;
    v15[0] = 0;
    v15[1] = 0;
    if (v10)
    {
      objc_msgSend(v10, "fetchMostRecentAnchorAppearancesAtLoi:", v15);
    }
    else
    {
      v21 = 0;
      v19 = 0u;
      v20 = 0u;
      v17 = 0u;
      v18 = 0u;
      memset(buf, 0, sizeof(buf));
    }
    std::__optional_storage_base<CLMicroLocationConfigurationTable::Entry,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<CLMicroLocationConfigurationTable::Entry,false>>(a4, (uint64_t)buf);
    std::__optional_destruct_base<CLMicroLocationConfigurationTable::Entry,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)buf);

    if (*(_BYTE *)(a4 + 112))
    {
      if (onceToken_MicroLocation_Default != -1)
        dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_55);
      v12 = (id)logObject_MicroLocation_Default;
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
      {
        v13 = (char *)operator new(0x28uLL);
        *(_QWORD *)(v13 + 29) = 0;
        *(_OWORD *)v13 = 0u;
        *((_OWORD *)v13 + 1) = 0u;
        boost::uuids::to_chars<char *>(a3, v13);
        if (*((char *)a2 + 23) >= 0)
          v14 = a2;
        else
          v14 = (uint64_t *)*a2;
        *(_DWORD *)buf = 68289539;
        *(_DWORD *)&buf[4] = 0;
        *(_WORD *)&buf[8] = 2082;
        *(_QWORD *)&buf[10] = "";
        *(_WORD *)&buf[18] = 2082;
        *(_QWORD *)&buf[20] = v13;
        *(_WORD *)&buf[28] = 2081;
        *(_QWORD *)&buf[30] = v14;
        _os_log_impl(&dword_2419D9000, v12, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Previous anchor appearance not found for LOI ID. Using anchor appearance map for null uuid and loi type\", \"loi id\":%{public, location:escape_only}s, \"loi type\":%{private, location:escape_only}s}", buf, 0x26u);
        operator delete(v13);
      }

    }
  }
}

void sub_241A87AC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  uint64_t v11;
  void *v12;
  void *v13;

  operator delete(v13);

  std::__optional_destruct_base<CLMicroLocationConfigurationTable::Entry,false>::~__optional_destruct_base[abi:ne180100](v11);
  _Unwind_Resume(a1);
}

void CLMicroLocationLearner::getRecordingUUIDsBetweenAnchorsTimestampsForLoi(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>, double a4@<D0>, double a5@<D1>)
{
  void *v10;
  void *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  id v16;
  id v17;

  +[ULDefaultsSingleton shared](ULDefaultsSingleton, "shared");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "defaultsDictionary");
  v16 = (id)objc_claimAutoreleasedReturnValue();

  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "ULMaxNewRecordingsForAnchorAppearanceMap");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v16, "objectForKey:", v11);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  if (v12 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
    v13 = objc_msgSend(v12, "unsignedIntValue");
  else
    v13 = objc_msgSend(&unk_2511EDA20, "unsignedIntValue");
  v14 = v13;

  v15 = *(id *)(*(_QWORD *)(a1 + 32) + 88);
  v17 = v15;
  if (v15)
  {
    objc_msgSend(v15, "fetchDistinctRecordingEventsFromTime:toTime:atLoiGroupId:withLimit:", a2, v14, a4, a5);
  }
  else
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
  }

}

void sub_241A87C40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

uint64_t CLMicroLocationLearner::generateAnchorAppearanceMapConfigurationForLoi@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  NSObject *v8;
  _OWORD *v9;
  void *p_p;
  uint64_t v11;
  CLMicroLocationProto::Configuration *v12;
  uint64_t v13;
  const CLMicroLocationProto::anchorAppearancesVector *v14;
  double v15;
  NSObject *v16;
  _OWORD *v17;
  void *v18;
  double v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  int v24;
  int v25;
  CLMicroLocationProto::anchorAppearancesVector *v26;
  void *v28;
  __int128 v29;
  int v30;
  __int128 v31;
  uint64_t v32;
  void *v33[3];
  void *__p;
  __int128 v35;
  int v36;
  __int128 v37;
  _BYTE v38[28];
  __int16 v39;
  _BYTE v40[6];
  __int128 v41;
  uint8_t buf[8];
  __int16 v43;
  const char *v44;
  __int16 v45;
  void *v46;
  __int16 v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  uint64_t v51;

  v51 = *MEMORY[0x24BDAC8D0];
  if (onceToken_MicroLocation_Default != -1)
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_55);
  v8 = (id)logObject_MicroLocation_Default;
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
  {
    v9 = operator new(0x28uLL);
    __p = v9;
    v35 = xmmword_241BB2320;
    *v9 = 0u;
    v9[1] = 0u;
    *(_QWORD *)((char *)v9 + 29) = 0;
    boost::uuids::to_chars<char *>(a3, v9);
    p_p = &__p;
    if (v35 < 0)
      p_p = __p;
    if (*(char *)(a2 + 23) >= 0)
      v11 = a2;
    else
      v11 = *(_QWORD *)a2;
    *(_DWORD *)buf = 68289538;
    *(_DWORD *)&buf[4] = 0;
    v43 = 2082;
    v44 = "";
    v45 = 2082;
    v46 = p_p;
    v47 = 2082;
    v48 = v11;
    _os_log_impl(&dword_2419D9000, v8, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"generating anchor appearance map for LOI\", \"LOI Id\":%{public, location:escape_only}s, \"LOI Type\":%{public, location:escape_only}s}", buf, 0x26u);
    if (SHIBYTE(v35) < 0)
      operator delete(__p);
  }

  CLMicroLocationAnchorAppearanceMap::CLMicroLocationAnchorAppearanceMap((CLMicroLocationAnchorAppearanceMap *)&__p);
  CLMicroLocationLearner::getMostRecentAnchorAppearancEntryForLoi(a1, (uint64_t *)a2, a3, (uint64_t)buf);
  if (v50)
  {
    v13 = v49;
    if (!v49)
    {
      v12 = (CLMicroLocationProto::Configuration *)CLMicroLocationProto::Configuration::default_instance(v12);
      v13 = *((_QWORD *)v12 + 3);
    }
    v14 = *(const CLMicroLocationProto::anchorAppearancesVector **)(v13 + 8);
    if (!v14)
      v14 = *(const CLMicroLocationProto::anchorAppearancesVector **)(CLMicroLocationProto::AnchorAppearanceConfiguration::default_instance(v12)
                                                                    + 8);
    CLMicroLocationAnchorAppearanceMap::CLMicroLocationAnchorAppearanceMap((CLMicroLocationAnchorAppearanceMap *)v38, v14);
    v36 = *(_DWORD *)&v40[2];
    std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,void *> *>>(&__p, *(uint64_t **)&v38[16], 0);
    v37 = v41;
    std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>>>::~__hash_table((uint64_t)v38);
    v15 = *(double *)buf;
    if (onceToken_MicroLocation_Default != -1)
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_55);
    v16 = (id)logObject_MicroLocation_Default;
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
    {
      v17 = operator new(0x28uLL);
      v28 = v17;
      v29 = xmmword_241BB2320;
      *v17 = 0u;
      v17[1] = 0u;
      *(_QWORD *)((char *)v17 + 29) = 0;
      boost::uuids::to_chars<char *>(a3, v17);
      v18 = &v28;
      if (v29 < 0)
        v18 = v28;
      *(_DWORD *)v38 = 68289538;
      *(_DWORD *)&v38[4] = 0;
      *(_WORD *)&v38[8] = 2082;
      *(_QWORD *)&v38[10] = "";
      *(_WORD *)&v38[18] = 2082;
      *(_QWORD *)&v38[20] = v18;
      v39 = 1026;
      *(_DWORD *)v40 = (int)v15;
      _os_log_impl(&dword_2419D9000, v16, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Relying on previous anchor appearance map from configuration table\", \"loiGroupId\":%{public, location:escape_only}s, \"timestamp\":%{public}d}", v38, 0x22u);
      if (SHIBYTE(v29) < 0)
        operator delete(v28);
    }

  }
  else
  {
    v15 = 0.0;
  }
  v19 = cl::chrono::CFAbsoluteTimeClock::now();
  CLMicroLocationLearner::getRecordingUUIDsBetweenAnchorsTimestampsForLoi(a1, a3, v33, v15, v19);
  v31 = 0uLL;
  v32 = 0;
  +[ULDefaultsSingleton shared](ULDefaultsSingleton, "shared");
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v20, "defaultsDictionary");
  v21 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "ULRapportUsageEnabled");
  v22 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v21, "objectForKey:", v22);
  v23 = (void *)objc_claimAutoreleasedReturnValue();
  if (v23 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
    v24 = objc_msgSend(v23, "BOOLValue");
  else
    v24 = objc_msgSend(MEMORY[0x24BDBD1C8], "BOOLValue", v28);
  v25 = v24;

  if (v25)
  {
    (*(void (**)(_BYTE *__return_ptr, _QWORD, uint64_t, uint64_t, double))(**(_QWORD **)(a1 + 24) + 40))(v38, *(_QWORD *)(a1 + 24), a2, a3, v15);
    std::vector<CLMicroLocationRapportMonitor::Item>::__vdeallocate((void **)&v31);
    v31 = *(_OWORD *)v38;
    v32 = *(_QWORD *)&v38[16];
    memset(v38, 0, 24);
    v28 = v38;
    std::vector<CLMicroLocationRapportMonitor::Item>::__destroy_vector::operator()[abi:ne180100]((void ***)&v28);
  }
  CLMicroLocationLearner::updateAnchorAppearanceMapFromRapportAndRecordings(a1, (uint64_t)&__p, (__int128 **)v33, (uint64_t)&v31, v15);
  CLMicroLocationProto::AnchorAppearanceConfiguration::AnchorAppearanceConfiguration((CLMicroLocationProto::AnchorAppearanceConfiguration *)&v28);
  v30 |= 2u;
  v26 = (CLMicroLocationProto::anchorAppearancesVector *)v29;
  if (!(_QWORD)v29)
  {
    v26 = (CLMicroLocationProto::anchorAppearancesVector *)operator new();
    CLMicroLocationProto::anchorAppearancesVector::anchorAppearancesVector((uint64_t)v26);
    *(_QWORD *)&v29 = v26;
  }
  CLMicroLocationAnchorAppearanceMap::toProtobuf((CLMicroLocationAnchorAppearanceMap *)&__p, (int *)v38);
  CLMicroLocationProto::anchorAppearancesVector::CopyFrom(v26, (const CLMicroLocationProto::anchorAppearancesVector *)v38);
  CLMicroLocationProto::anchorAppearancesVector::~anchorAppearancesVector((CLMicroLocationProto::anchorAppearancesVector *)v38);
  CLMicroLocationProtobufHelper::createConfiguration<CLMicroLocationProto::AnchorAppearanceConfiguration>((CLMicroLocationProto::Configuration *)&v28, a4, v19);
  CLMicroLocationProto::AnchorAppearanceConfiguration::~AnchorAppearanceConfiguration((CLMicroLocationProto::AnchorAppearanceConfiguration *)&v28);
  *(_QWORD *)v38 = &v31;
  std::vector<CLMicroLocationRapportMonitor::Item>::__destroy_vector::operator()[abi:ne180100]((void ***)v38);
  if (v33[0])
  {
    v33[1] = v33[0];
    operator delete(v33[0]);
  }
  std::__optional_destruct_base<CLMicroLocationConfigurationTable::Entry,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)buf);
  return std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>>>::~__hash_table((uint64_t)&__p);
}

void sub_241A88164(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  void *v35;
  void *v36;
  void *v37;

  a27 = &a13;
  std::vector<CLMicroLocationRapportMonitor::Item>::__destroy_vector::operator()[abi:ne180100]((void ***)&a27);
  if (__p)
  {
    a18 = (uint64_t)__p;
    operator delete(__p);
  }
  std::__optional_destruct_base<CLMicroLocationConfigurationTable::Entry,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&a35);
  std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>>>::~__hash_table((uint64_t)&a20);
  _Unwind_Resume(a1);
}

void CLMicroLocationProtobufHelper::createConfiguration<CLMicroLocationProto::AnchorAppearanceConfiguration>(CLMicroLocationProto::Configuration *a1@<X0>, uint64_t a2@<X8>, double a3@<D0>)
{
  unsigned int v6;
  const CLMicroLocationProto::AnchorAppearanceConfiguration *v7;
  int v8;

  CLMicroLocationProto::Configuration::Configuration((CLMicroLocationProto::Configuration *)a2);
  v6 = *((_DWORD *)a1 + 4);
  if (!CLMicroLocationProto::ConfigurationType_IsValid((CLMicroLocationProto *)v6))
    __assert_rtn("set_type", "microlocation.pb.h", 22117, "::CLMicroLocationProto::ConfigurationType_IsValid(value)");
  v8 = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a2 + 40) = v6;
  *(_DWORD *)(a2 + 48) = v8 | 3;
  *(double *)(a2 + 8) = a3;
  CLMicroLocationProtobufHelper::setSpecificConfiguration((CLMicroLocationProtobufHelper *)a2, a1, v7);
}

void sub_241A8831C(_Unwind_Exception *a1)
{
  CLMicroLocationProto::Configuration *v1;

  CLMicroLocationProto::Configuration::~Configuration(v1);
  _Unwind_Resume(a1);
}

void CLMicroLocationLearner::generateAnchorAppearanceMap(CLMicroLocationLearner *a1, uint64_t a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  NSObject *v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint8_t buf[8];
  __int16 v18;
  const char *v19;
  __int16 v20;
  uint64_t v21;
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  if (ULSettings::get<ULSettings::AdaptiveAnchorsEnable>())
  {
    v14 = 0;
    v15 = 0;
    v16 = 0;
    CLMicroLocationLearner::fetchAndFilterUniqueLOIGroups(a1, (uint64_t)&v12);
    if (onceToken_MicroLocation_Default != -1)
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_55);
    v4 = logObject_MicroLocation_Default;
    if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 68289282;
      *(_DWORD *)&buf[4] = 0;
      v18 = 2082;
      v19 = "";
      v20 = 2050;
      v21 = (v13 - v12) >> 6;
      _os_log_impl(&dword_2419D9000, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Generating anchor appearance maps\", \"LOI count\":%{public}ld}", buf, 0x1Cu);
    }
    v5 = v12;
    v6 = v13;
    if (v12 == v13)
    {
LABEL_13:
      if ((objc_msgSend(*(id *)(*((_QWORD *)a1 + 4) + 32), "insertEntries:", &v14) & 1) != 0)
        goto LABEL_23;
      if (onceToken_MicroLocation_Default != -1)
        dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_55);
      v10 = logObject_MicroLocation_Default;
      if (!os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
        goto LABEL_23;
      *(_WORD *)buf = 0;
      v11 = "#Warning failed to insert Anchor Appearances Map to MicroLocation DB";
    }
    else
    {
      while (1)
      {
        v7 = *(_QWORD *)(a2 + 24);
        if (!v7)
          std::__throw_bad_function_call[abi:ne180100]();
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v7 + 48))(v7))
          break;
        CLMicroLocationLearner::generateAnchorAppearanceMapConfigurationForLoi((uint64_t)a1, v5 + 40, v5 + 24, (uint64_t)buf);
        v8 = v15;
        if (v15 >= v16)
        {
          v9 = std::vector<CLMicroLocationConfigurationTable::Entry>::__emplace_back_slow_path<std::string const&,CLMicroLocationProto::Configuration &,boost::uuids::uuid const&>(&v14, v5 + 40, (uint64_t)buf, (_QWORD *)(v5 + 24));
        }
        else
        {
          std::allocator<CLMicroLocationConfigurationTable::Entry>::construct[abi:ne180100]<CLMicroLocationConfigurationTable::Entry,std::string const&,CLMicroLocationProto::Configuration &,boost::uuids::uuid const&>((uint64_t)&v16, v15, v5 + 40, (uint64_t)buf, (_QWORD *)(v5 + 24));
          v9 = v8 + 112;
        }
        v15 = v9;
        CLMicroLocationProto::Configuration::~Configuration((CLMicroLocationProto::Configuration *)buf);
        v5 += 64;
        if (v5 == v6)
          goto LABEL_13;
      }
      if (onceToken_MicroLocation_Default != -1)
        dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_55);
      v10 = logObject_MicroLocation_Default;
      if (!os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
        goto LABEL_23;
      *(_WORD *)buf = 0;
      v11 = "Cancelled, skipping generation of anchor appearance maps";
    }
    _os_log_impl(&dword_2419D9000, v10, OS_LOG_TYPE_DEFAULT, v11, buf, 2u);
LABEL_23:
    *(_QWORD *)buf = &v12;
    std::vector<CLMiLoLoiTable::Entry>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
    *(_QWORD *)buf = &v14;
    std::vector<CLMicroLocationConfigurationTable::Entry>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  }
}

void sub_241A885EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, void **a15)
{
  a15 = (void **)&a9;
  std::vector<CLMiLoLoiTable::Entry>::__destroy_vector::operator()[abi:ne180100](&a15);
  a15 = (void **)&a12;
  std::vector<CLMicroLocationConfigurationTable::Entry>::__destroy_vector::operator()[abi:ne180100](&a15);
  _Unwind_Resume(a1);
}

void CLMicroLocationLearner::onLearningBegin(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void *v5;
  NSObject *v6;
  uint64_t v7;
  NSObject *v8;
  uint8_t v9[16];
  uint8_t buf[16];

  objc_msgSend(MEMORY[0x24BDBCE60], "date");
  v4 = objc_claimAutoreleasedReturnValue();
  v5 = *(void **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v4;

  if (onceToken_MicroLocation_Default != -1)
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_55);
  v6 = logObject_MicroLocation_Default;
  if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_2419D9000, v6, OS_LOG_TYPE_DEFAULT, "Learning activity started", buf, 2u);
  }
  v7 = *(_QWORD *)(a2 + 24);
  if (!v7)
    std::__throw_bad_function_call[abi:ne180100]();
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v7 + 48))(v7))
  {
    if (onceToken_MicroLocation_Default != -1)
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_55);
    v8 = logObject_MicroLocation_Default;
    if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v9 = 0;
      _os_log_impl(&dword_2419D9000, v8, OS_LOG_TYPE_DEFAULT, "Learning cancelled before onLearningBegin event", v9, 2u);
    }
  }
  else
  {
    (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 16))(*(_QWORD *)(a1 + 24));
  }
}

uint64_t CLMicroLocationLearner::onLearningCompleted(uint64_t a1, uint64_t a2)
{
  double v4;
  double v5;
  double v6;
  NSObject *v7;
  uint64_t v8;
  NSObject *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  int v14;
  int v15;
  NSObject *v16;
  NSObject *v17;
  id v18;
  void *v19;
  int v21;
  int v22;
  __int16 v23;
  const char *v24;
  __int16 v25;
  double v26;
  __int16 v27;
  double v28;
  uint64_t v29;

  v29 = *MEMORY[0x24BDAC8D0];
  objc_msgSend(*(id *)(a1 + 16), "timeIntervalSinceNow");
  v5 = v4;
  if (onceToken_MicroLocation_Default != -1)
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_55);
  v6 = -v5;
  v7 = logObject_MicroLocation_Default;
  if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
  {
    v21 = 68289283;
    v22 = 0;
    v23 = 2082;
    v24 = "";
    v25 = 2049;
    v26 = v6;
    _os_log_impl(&dword_2419D9000, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Learning activity completed\", \"duration [s]\":\"%{private}f\"}", (uint8_t *)&v21, 0x1Cu);
  }
  v8 = *(_QWORD *)(a2 + 24);
  if (!v8)
    std::__throw_bad_function_call[abi:ne180100]();
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v8 + 48))(v8))
  {
    if (onceToken_MicroLocation_Default != -1)
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_55);
    v9 = logObject_MicroLocation_Default;
    if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v21) = 0;
      _os_log_impl(&dword_2419D9000, v9, OS_LOG_TYPE_DEFAULT, "Learning cancelled before onLearningCompleted event", (uint8_t *)&v21, 2u);
    }
  }
  else
  {
    +[ULDefaultsSingleton shared](ULDefaultsSingleton, "shared");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "defaultsDictionary");
    v11 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "ULLearningActivityMaxAllowedDuration");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "objectForKey:", v12);
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    if (v13 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
      v14 = objc_msgSend(v13, "intValue");
    else
      v14 = objc_msgSend(&unk_2511EDAC8, "intValue");
    v15 = v14;

    if ((double)v15 < v6)
    {
      if (onceToken_MicroLocation_Default != -1)
        dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_55);
      v16 = logObject_MicroLocation_Default;
      if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_FAULT))
      {
        v21 = 68289539;
        v22 = 0;
        v23 = 2082;
        v24 = "";
        v25 = 2049;
        v26 = v6;
        v27 = 2049;
        v28 = (double)v15;
        _os_log_impl(&dword_2419D9000, v16, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Learning activity passed max allowed duration\", \"duration [s]\":\"%{private}f\", \"max allowed duration [s]\":\"%{private}f\"}", (uint8_t *)&v21, 0x26u);
      }
      if (onceToken_MicroLocation_Default != -1)
        dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_55);
      v17 = logObject_MicroLocation_Default;
      if (os_signpost_enabled((os_log_t)logObject_MicroLocation_Default))
      {
        v21 = 68289539;
        v22 = 0;
        v23 = 2082;
        v24 = "";
        v25 = 2049;
        v26 = v6;
        v27 = 2049;
        v28 = (double)v15;
        _os_signpost_emit_with_name_impl(&dword_2419D9000, v17, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Learning activity passed max allowed duration", "{\"msg%{public}.0s\":\"Learning activity passed max allowed duration\", \"duration [s]\":\"%{private}f\", \"max allowed duration [s]\":\"%{private}f\"}", (uint8_t *)&v21, 0x26u);
      }
    }
    v18 = CLMicroLocationLearner::sendLearningTaskAnalytics((id *)a1);
    v19 = *(void **)(a1 + 16);
    *(_QWORD *)(a1 + 16) = 0;

  }
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 48))(*(_QWORD *)(a1 + 24));
}

void sub_241A88B3C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

id CLMicroLocationLearner::sendLearningTaskAnalytics(id *this)
{
  double v2;
  double v3;
  id v4;
  int v5;
  id v6;
  int v7;
  unsigned int v8;
  unint64_t v9;
  id v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *__p[2];
  char v17;
  void *v18[2];
  char v19;

  objc_msgSend(this[2], "timeIntervalSinceNow");
  v3 = v2;
  v4 = *((id *)this[4] + 7);
  std::string::basic_string[abi:ne180100]<0>(v18, "custom");
  v5 = objc_msgSend(v4, "countDistinctLoiTypes:", v18);
  v6 = *((id *)this[4] + 7);
  std::string::basic_string[abi:ne180100]<0>(__p, "home");
  v7 = objc_msgSend(v6, "countDistinctLoiTypes:", __p);
  if (v17 < 0)
    operator delete(__p[0]);
  v8 = v7 + v5;

  if (v19 < 0)
    operator delete(v18[0]);

  CLMicroLocationLearner::fetchAndFilterUniqueLOIGroups((CLMicroLocationLearner *)this, (uint64_t)v18);
  v9 = ((char *)v18[1] - (char *)v18[0]) >> 6;
  *((_DWORD *)this + 1) = v9;
  if (v9 < v8)
    *((_BYTE *)this + 8) = 1;
  v10 = objc_alloc_init(MEMORY[0x24BDBCED8]);
  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithDouble:", -v3);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "setObject:forKeyedSubscript:", v11, CFSTR("learningTaskRuntime"));

  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithInt:", *(unsigned int *)this);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "setObject:forKeyedSubscript:", v12, CFSTR("numberOfModelsLearned"));

  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithInt:", *((unsigned int *)this + 1));
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "setObject:forKeyedSubscript:", v13, CFSTR("numberOfValidLOIsForLearning"));

  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithBool:", *((unsigned __int8 *)this + 8));
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "setObject:forKeyedSubscript:", v14, CFSTR("wereLOIsRemoved"));

  if (ULSettings::get<ULSettings::AnalyticsSendEventEnabled>())
    +[ULSendEvent sendEvent:withEventName:](ULSendEvent, "sendEvent:withEventName:", v10, CFSTR("com.apple.MicroLocation.LearningTask"));
  __p[0] = v18;
  std::vector<CLMiLoLoiTable::Entry>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  return v10;
}

void sub_241A88D78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void **__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  void *v20;
  void *v21;

  __p = &a15;
  std::vector<CLMiLoLoiTable::Entry>::__destroy_vector::operator()[abi:ne180100](&__p);
  _Unwind_Resume(a1);
}

void CLMicroLocationLearner::learnBlueAtlasModelWorkItem(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  NSObject *v10;
  id v11;
  void *v12;
  uuid *v13;
  uuid *v14;
  int v15;
  void *__p;
  __int128 v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  v3 = *(_QWORD *)(a2 + 24);
  if (!v3)
    std::__throw_bad_function_call[abi:ne180100]();
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v3 + 48))(v3))
  {
    if (onceToken_MicroLocation_Default != -1)
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_55);
    v4 = logObject_MicroLocation_Default;
    if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(__p) = 0;
      v5 = "Learning cancelled before onLearningCompleted event";
LABEL_18:
      v8 = v4;
      v9 = OS_LOG_TYPE_DEFAULT;
      goto LABEL_19;
    }
  }
  else if ((ULSettings::get<ULSettings::EnableLearning>() & 1) != 0)
  {
    ULSettings::get<ULSettings::EnabledModelTypes>((uint64_t)&__p);
    if ((unint64_t)v17 <= 3)
      std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
    v6 = *(_QWORD *)__p;
    operator delete(__p);
    if ((v6 & 8) != 0)
    {
      ULDatabase::connectIfNecessary(*(ULDatabase **)(a1 + 32));
      if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32)) & 1) != 0)
      {
        if (onceToken_MicroLocation_Default != -1)
          dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_55);
        v10 = logObject_MicroLocation_Default;
        if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
        {
          __p = (void *)68289026;
          LOWORD(v17) = 2082;
          *(_QWORD *)((char *)&v17 + 2) = "";
          _os_log_impl(&dword_2419D9000, v10, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"MicrolocationLearner: kicking off Learning for Blue Atlas models\"}", (uint8_t *)&__p, 0x12u);
        }
        v11 = *(id *)(*(_QWORD *)(a1 + 32) + 104);
        v12 = v11;
        if (v11)
        {
          objc_msgSend(v11, "getAllDistinctCustomLoiIds");
        }
        else
        {
          __p = 0;
          v17 = 0uLL;
        }

        v13 = (uuid *)__p;
        v14 = (uuid *)v17;
        if (__p != (void *)v17)
        {
          v15 = 0;
          do
            v15 |= CLMicroLocationLearner::learnBlueAtlasModelInternal((CLMicroLocationLearner *)a1, v13++);
          while (v13 != v14);
          if ((v15 & 1) != 0)
            (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 24) + 32))(*(_QWORD *)(a1 + 24), 3);
          v13 = (uuid *)__p;
        }
        if (v13)
        {
          *(_QWORD *)&v17 = v13;
          operator delete(v13);
        }
      }
      else
      {
        if (onceToken_MicroLocation_Default != -1)
          dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_55);
        v4 = logObject_MicroLocation_Default;
        if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
        {
          LOWORD(__p) = 0;
          v5 = "#Warning Tried to run learning, but database is not valid";
          goto LABEL_18;
        }
      }
    }
    else
    {
      if (onceToken_MicroLocation_Default != -1)
        dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_55);
      v7 = logObject_MicroLocation_Default;
      if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEBUG))
      {
        LOWORD(__p) = 0;
        v5 = "Model Type BlueAtlas disabled in settings";
        v8 = v7;
        v9 = OS_LOG_TYPE_DEBUG;
LABEL_19:
        _os_log_impl(&dword_2419D9000, v8, v9, v5, (uint8_t *)&__p, 2u);
      }
    }
  }
  else
  {
    if (onceToken_MicroLocation_Default != -1)
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_55);
    v4 = logObject_MicroLocation_Default;
    if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(__p) = 0;
      v5 = "#Warning Tried to run learning, but learning is disabled";
      goto LABEL_18;
    }
  }
}

void sub_241A89150(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL CLMicroLocationLearner::learnBlueAtlasModelInternal(CLMicroLocationLearner *this, uuid *a2)
{
  double v4;
  uint64_t v5;
  int v6;
  __int128 v7;
  NSObject *v8;
  const std::string::value_type *v9;
  _OWORD *v10;
  void *v11;
  _OWORD *v12;
  void *p_p;
  uint64_t v14;
  id v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  id v21;
  int v22;
  int **CandidateQualityReasons;
  int *v24;
  int *v25;
  char v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  uint64_t v33;
  unsigned int v34;
  const __CFString *v35;
  unsigned int v36;
  const __CFString *v37;
  uint64_t v38;
  void *v39;
  const __CFString *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  NSDictionary *v44;
  CLMicroLocationLearner *v45;
  __int128 v47;
  CLMicroLocationLearner *v48;
  uint64_t v49;
  CLMicroLocationModelTable::Entry *v50;
  CLMicroLocationModelTable::Entry *v51;
  char *v52;
  std::string v53;
  char v54;
  _BYTE v55[208];
  _QWORD v56[3];
  __int128 v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _BYTE v61[32];
  int v62;
  CLMicroLocationModelTable::Entry **v63;
  char v64;
  _QWORD v65[8];
  _QWORD v66[8];
  void *v67;
  __int128 v68;
  uint64_t v69;
  void *v70;
  char v71;
  char v72;
  char v73[8];
  __int128 v74;
  char v75;
  void *__p;
  __int128 v77;
  uint64_t v78;
  void *v79;
  char v80;
  char v81;
  _BYTE buf[28];
  __int16 v83;
  void *v84;
  __int16 v85;
  void *v86;
  uint64_t v87;
  _DWORD v88[32];
  uint64_t v89;
  uint64_t v90;
  void *v91;
  void *v92;
  void *v93;
  char v94;
  uint64_t v95;

  v95 = *MEMORY[0x24BDAC8D0];
  v4 = cl::chrono::CFAbsoluteTimeClock::now();
  memset(v61, 0, sizeof(v61));
  v62 = 1065353216;
  CLMicroLocationLearner::getAllClientsAndSupportedLocationTypes((uint64_t)this, 4, 0, &v59);
  v5 = v59;
  v49 = v60;
  if (v59 == v60)
  {
    v6 = 0;
  }
  else
  {
    v6 = 0;
    *((_QWORD *)&v7 + 1) = 0x8000000000000028;
    *(_QWORD *)&v7 = 68289794;
    v47 = v7;
    v48 = this;
    do
    {
      if ((CLMiLoService::uint64ToLocationTypesBitset(*(_QWORD *)(v5 + 40)) & 4) != 0)
      {
        if (onceToken_MicroLocation_Default != -1)
          dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_55);
        v8 = (id)logObject_MicroLocation_Default;
        if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
        {
          v9 = (const std::string::value_type *)v5;
          if (*(char *)(v5 + 23) < 0)
            v9 = *(const std::string::value_type **)v5;
          v10 = operator new(0x28uLL);
          v67 = v10;
          v68 = xmmword_241BB2320;
          *v10 = 0u;
          v10[1] = 0u;
          *(_QWORD *)((char *)v10 + 29) = 0;
          boost::uuids::to_chars<char *>(v5 + 24, v10);
          if (v68 >= 0)
            v11 = &v67;
          else
            v11 = v67;
          v12 = operator new(0x28uLL);
          __p = v12;
          v77 = xmmword_241BB2320;
          *v12 = 0u;
          v12[1] = 0u;
          *(_QWORD *)((char *)v12 + 29) = 0;
          boost::uuids::to_chars<char *>((uint64_t)a2, v12);
          p_p = &__p;
          if (v77 < 0)
            p_p = __p;
          *(_DWORD *)buf = v47;
          *(_DWORD *)&buf[4] = 0;
          *(_WORD *)&buf[8] = 2082;
          *(_QWORD *)&buf[10] = "";
          *(_WORD *)&buf[18] = 2082;
          *(_QWORD *)&buf[20] = v9;
          v83 = 2082;
          v84 = v11;
          v85 = 2082;
          v86 = p_p;
          _os_log_impl(&dword_2419D9000, v8, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Start learning Blue Atlas model\", \"client\":%{public, location:escape_only}s, \"Service UUID\":%{public, location:escape_only}s, \"LOI\":%{public, location:escape_only}s}", buf, 0x30u);
          if (SHIBYTE(v77) < 0)
            operator delete(__p);
          this = v48;
          if (SHIBYTE(v68) < 0)
            operator delete(v67);
        }

        v57 = 0uLL;
        v58 = 0;
        memset(v56, 0, sizeof(v56));
        v14 = ULSettings::get<ULSettings::SimilarityListMaxNumberOfItems>();
        v15 = *(id *)(*((_QWORD *)this + 4) + 40);
        v16 = v15;
        __p = 0;
        if (v15)
          objc_msgSend(v15, "fetchRecordingLabelsForServiceUuid:atLoiGroupID:fromTime:limit:", v5 + 24, a2, &__p, v14);
        else
          memset(buf, 0, 24);
        std::vector<CLMicroLocationRecordingLabelsTable::Entry>::__vdeallocate((uint64_t *)&v57);
        v57 = *(_OWORD *)buf;
        v58 = *(_QWORD *)&buf[16];
        memset(buf, 0, 24);
        v67 = buf;
        std::vector<CLMicroLocationRecordingLabelsTable::Entry>::__destroy_vector::operator()[abi:ne180100]((void ***)&v67);

        CLMicroLocationBlueAtlasAlgorithms::learnBlueAtlasModel(*((_QWORD *)this + 4), (CLMicroLocationFingerprintPool *)v61, a2, (uint64_t *)&v57, (uint64_t)buf);
        CLMicroLocationModel::toProtobuf((CLMicroLocationModel *)buf, (uint64_t)v55);
        LODWORD(v67) = 0;
        boost::uuids::detail::random_provider_base::random_provider_base((boost::uuids::detail::random_provider_base *)&v67);
        v17 = boost::uuids::random_generator_pure::operator()((uint64_t)&v67);
        v19 = v18;
        if (*(char *)(v5 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&v53, *(const std::string::value_type **)v5, *(_QWORD *)(v5 + 8));
        }
        else
        {
          v20 = *(_OWORD *)v5;
          v53.__r_.__value_.__r.__words[2] = *(_QWORD *)(v5 + 16);
          *(_OWORD *)&v53.__r_.__value_.__l.__data_ = v20;
        }
        v54 = 1;
        v74 = *(_OWORD *)(v5 + 24);
        v75 = 1;
        CLMicroLocationModelTable::Entry::Entry(&__p, v17, v19, v55, &v53, &v74, *(_QWORD *)a2->var0, *(_QWORD *)&a2->var0[8], v4);
        if (v54 && SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v53.__r_.__value_.__l.__data_);
        boost::uuids::detail::random_provider_base::destroy((boost::uuids::detail::random_provider_base *)&v67);
        v21 = *(id *)(*((_QWORD *)this + 4) + 72);
        CLMicroLocationModelTable::Entry::Entry((CLMicroLocationModelTable::Entry *)&v67, (const CLMicroLocationModelTable::Entry *)&__p);
        v50 = 0;
        v51 = 0;
        v52 = 0;
        v63 = &v50;
        v64 = 0;
        v50 = (CLMicroLocationModelTable::Entry *)operator new(0x138uLL);
        v51 = v50;
        v52 = (char *)v50 + 312;
        v51 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<CLMicroLocationModelTable::Entry>,CLMicroLocationModelTable::Entry const*,CLMicroLocationModelTable::Entry const*,CLMicroLocationModelTable::Entry*>((uint64_t)&v52, (CLMicroLocationModelTable::Entry *)&v67, (CLMicroLocationModelTable::Entry *)v73, v50);
        v22 = objc_msgSend(v21, "insertEntries:", &v50);
        v63 = &v50;
        std::vector<CLMicroLocationModelTable::Entry>::__destroy_vector::operator()[abi:ne180100]((void ***)&v63);
        if (v72 && v71 < 0)
          operator delete(v70);
        CLMicroLocationProto::Model::~Model((CLMicroLocationProto::Model *)&v69);

        if (v22)
        {
          CandidateQualityReasons = (int **)CLMicroLocationModel::getCandidateQualityReasons((CLMicroLocationModel *)buf);
          v24 = *CandidateQualityReasons;
          v25 = CandidateQualityReasons[1];
          if (*CandidateQualityReasons == v25)
          {
            LOBYTE(v28) = 0;
            LOBYTE(v27) = 0;
            v26 = 0;
          }
          else
          {
            v26 = 0;
            v27 = 0;
            v28 = 0;
            do
            {
              v30 = *v24++;
              v29 = v30;
              if (v30 == 1)
                v31 = 1;
              else
                v31 = v27;
              if (v29 == 3)
                v32 = 1;
              else
                v32 = v28;
              if (v29 == 3)
                v31 = v27;
              if (v29 == 8)
              {
                v26 = 1;
              }
              else
              {
                v28 = v32;
                v27 = v31;
              }
            }
            while (v24 != v25);
          }
          v33 = *((_QWORD *)this + 3);
          CLMicroLocationModelTable::Entry::Entry((CLMicroLocationModelTable::Entry *)&v67, (const CLMicroLocationModelTable::Entry *)&__p);
          v73[0] = 1;
          (*(void (**)(uint64_t, uint64_t, void **, _QWORD))(*(_QWORD *)v33 + 24))(v33, 3, &v67, 0);
          std::__optional_destruct_base<CLMicroLocationModelTable::Entry,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v67);
          v34 = CLMicroLocationModel::getQualityIndicator((CLMicroLocationModel *)buf) - 1;
          v35 = CFSTR("modelQualityUnknown");
          if (v34 <= 2)
            v35 = (const __CFString *)*((_QWORD *)&off_2511D6458 + (int)v34);
          v36 = CLMicroLocationModel::getCandidateQualityIndicator((CLMicroLocationModel *)buf) - 1;
          v37 = CFSTR("modelQualityUnknown");
          if (v36 <= 2)
            v37 = (const __CFString *)*((_QWORD *)&off_2511D6458 + (int)v36);
          v66[0] = &unk_2511ED9D8;
          v65[0] = CFSTR("learningOccurred");
          v65[1] = CFSTR("numAccessPoints");
          objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedInt:", v88[28], v47);
          v38 = objc_claimAutoreleasedReturnValue();
          v39 = (void *)v38;
          v40 = CFSTR("modelIsStable");
          if (!buf[8])
            v40 = CFSTR("modelNotStable");
          v66[1] = v38;
          v66[2] = v40;
          v65[2] = CFSTR("isModelStable");
          v65[3] = CFSTR("modelQuality");
          v66[3] = v35;
          v66[4] = v37;
          v65[4] = CFSTR("candidateModelQuality");
          v65[5] = CFSTR("qualityReasonLowNumberOfObservations");
          if ((v28 & 1) != 0)
            v41 = MEMORY[0x24BDBD1C8];
          else
            v41 = MEMORY[0x24BDBD1C0];
          if ((v27 & 1) != 0)
            v42 = MEMORY[0x24BDBD1C8];
          else
            v42 = MEMORY[0x24BDBD1C0];
          v66[5] = v41;
          v66[6] = v42;
          v65[6] = CFSTR("qualityReasonLowNumberOfWiFiAnchors");
          v65[7] = CFSTR("candidateQualityReasonLowNumberRobustWiFiSources");
          if ((v26 & 1) != 0)
            v43 = MEMORY[0x24BDBD1C8];
          else
            v43 = MEMORY[0x24BDBD1C0];
          v66[7] = v43;
          objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", v66, v65, 8);
          v44 = (NSDictionary *)objc_claimAutoreleasedReturnValue();

          this = v48;
          CLMicroLocationLearner::sendBlueAtlasLearningAnalytics(v45, v44);

          ++v6;
        }
        if (v81 && v80 < 0)
          operator delete(v79);
        CLMicroLocationProto::Model::~Model((CLMicroLocationProto::Model *)&v78);
        CLMicroLocationProto::Model::~Model((CLMicroLocationProto::Model *)v55);
        if (v94 < 0)
          operator delete(v93);
        if (v91)
        {
          v92 = v91;
          operator delete(v91);
        }
        std::__hash_table<std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>>>::~__hash_table((uint64_t)&v90);
        v67 = &v89;
        std::vector<std::pair<std::shared_ptr<CLMicroLocationFingerprint>,boost::uuids::uuid>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v67);
        std::__optional_destruct_base<CLMicroLocationModel::BlueAtlasData,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)v88);
        std::__optional_destruct_base<CLMicroLocationModel::SimilarityListData,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v87);
        std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>>>::~__hash_table((uint64_t)&buf[16]);
        *(_QWORD *)buf = v56;
        std::vector<CLMicroLocationRecordingEventsTable::Entry>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
        *(_QWORD *)buf = &v57;
        std::vector<CLMicroLocationRecordingLabelsTable::Entry>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
      }
      v5 += 48;
    }
    while (v5 != v49);
  }
  *(_QWORD *)buf = &v59;
  std::vector<CLMicroLocationClientUtils::ClientIdentitiesAndLocationTypes>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  std::__hash_table<std::__hash_value_type<boost::uuids::uuid,std::weak_ptr<CLMicroLocationFingerprint>>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::weak_ptr<CLMicroLocationFingerprint>>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::weak_ptr<CLMicroLocationFingerprint>>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,std::weak_ptr<CLMicroLocationFingerprint>>>>::~__hash_table((uint64_t)v61);
  return v6 > 0;
}

void sub_241A89908(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a67;

  std::__hash_table<std::__hash_value_type<boost::uuids::uuid,std::weak_ptr<CLMicroLocationFingerprint>>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::weak_ptr<CLMicroLocationFingerprint>>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::weak_ptr<CLMicroLocationFingerprint>>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,std::weak_ptr<CLMicroLocationFingerprint>>>>::~__hash_table((uint64_t)&a67);
  _Unwind_Resume(a1);
}

void CLMicroLocationLearner::updateModelDaysWithRecordings(uint64_t a1, uint64_t a2, double *a3, uint64_t a4, uint64_t a5)
{
  int v7;
  NSObject *v8;
  NSObject *v9;
  int v10;
  int v11;
  int v12;
  __int16 v13;
  const char *v14;
  __int16 v15;
  int v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a4 + 16))
  {
    if (objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 88), "countRecordingEventsFromTime:toTime:atLoiGroupId:", a5, *(double *)(a4 + 8), *a3))v7 = *(_DWORD *)a4 + 1;
    else
      v7 = *(_DWORD *)a4;
  }
  else
  {
    if (onceToken_MicroLocation_Default != -1)
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_55);
    v8 = logObject_MicroLocation_Default;
    v7 = 1;
    if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEBUG))
    {
      v11 = 67109120;
      v12 = 1;
      _os_log_impl(&dword_2419D9000, v8, OS_LOG_TYPE_DEBUG, "Learning model without old model. Setting number of days with recordings to %d", (uint8_t *)&v11, 8u);
    }
  }
  *(_DWORD *)(a2 + 12) = v7;
  if (onceToken_MicroLocation_Default != -1)
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_55);
  v9 = logObject_MicroLocation_Default;
  if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
  {
    v10 = *(_DWORD *)(a2 + 12);
    v11 = 68289283;
    v12 = 0;
    v13 = 2082;
    v14 = "";
    v15 = 1025;
    v16 = v10;
    _os_log_impl(&dword_2419D9000, v9, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Setting model number of days with recordings\", \"numDaysWithRecordings\":%{private}u}", (uint8_t *)&v11, 0x18u);
  }
}

void std::vector<unsigned long>::reserve(void **a1, unint64_t a2)
{
  uint64_t v3;
  _BYTE *v4;
  int64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  v4 = a1[2];
  v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (_BYTE *)*a1) >> 3)
  {
    if (a2 >> 61)
      std::vector<CLMicroLocationProto::ConfidenceReason>::__throw_length_error[abi:ne180100]();
    v5 = (_BYTE *)a1[1] - (_BYTE *)*a1;
    v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CLMicroLocationWiFiChannelHistogram>>(v3, a2);
    v7 = &v6[v5 & 0xFFFFFFFFFFFFFFF8];
    v9 = &v6[8 * v8];
    v10 = (char *)*a1;
    v11 = (char *)a1[1];
    v12 = v7;
    if (v11 != *a1)
    {
      v12 = v7;
      do
      {
        v13 = *((_QWORD *)v11 - 1);
        v11 -= 8;
        *((_QWORD *)v12 - 1) = v13;
        v12 -= 8;
      }
      while (v11 != v10);
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
      operator delete(v10);
  }
}

uint64_t CLMicroLocationModel::operator=(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  uint64_t v5;
  void **v6;
  __int128 v7;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  if (a1 != a2)
  {
    *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
    std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,void *> *>>((_QWORD *)(a1 + 16), *(uint64_t **)(a2 + 32), 0);
  }
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  std::__optional_storage_base<CLMicroLocationModel::SimilarityListData,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<CLMicroLocationModel::SimilarityListData,false>>(a1 + 72, a2 + 72);
  std::__optional_storage_base<CLMicroLocationModel::BlueAtlasData,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<CLMicroLocationModel::BlueAtlasData,false>>(a1 + 200, a2 + 200);
  v4 = *(_OWORD *)(a2 + 296);
  *(_OWORD *)(a1 + 308) = *(_OWORD *)(a2 + 308);
  *(_OWORD *)(a1 + 296) = v4;
  std::vector<std::pair<std::shared_ptr<CLMicroLocationFingerprint>,boost::uuids::uuid>>::__vdeallocate((void **)(a1 + 328));
  v5 = *(_QWORD *)(a2 + 336);
  *(_QWORD *)(a1 + 328) = *(_QWORD *)(a2 + 328);
  *(_QWORD *)(a1 + 336) = v5;
  *(_QWORD *)(a1 + 344) = *(_QWORD *)(a2 + 344);
  *(_QWORD *)(a2 + 328) = 0;
  *(_QWORD *)(a2 + 336) = 0;
  *(_QWORD *)(a2 + 344) = 0;
  std::__hash_table<std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>>>::__move_assign(a1 + 352, (uint64_t *)(a2 + 352));
  *(_QWORD *)(a1 + 392) = *(_QWORD *)(a2 + 392);
  std::vector<CLMicroLocationResultInternal>::__move_assign(a1 + 400, (__n128 *)(a2 + 400));
  v6 = (void **)(a1 + 424);
  if (*(char *)(a1 + 447) < 0)
    operator delete(*v6);
  v7 = *(_OWORD *)(a2 + 424);
  *(_QWORD *)(a1 + 440) = *(_QWORD *)(a2 + 440);
  *(_OWORD *)v6 = v7;
  *(_BYTE *)(a2 + 447) = 0;
  *(_BYTE *)(a2 + 424) = 0;
  return a1;
}

uint64_t ULSettings::get<ULSettings::MinimumNumberOfDaysWithRecordingsInStableModel>()
{
  void *v0;
  void *v1;
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;

  +[ULDefaultsSingleton shared](ULDefaultsSingleton, "shared");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "defaultsDictionary");
  v1 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "ULMinimumNumberOfDaysWithRecordingsInStableModel");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "objectForKey:", v2);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  if (v3 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
    v4 = objc_msgSend(v3, "unsignedLongValue");
  else
    v4 = objc_msgSend(&unk_2511EDA50, "unsignedLongValue");
  v5 = v4;

  return v5;
}

void sub_241A89E80(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_241A89F80(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

_QWORD *std::make_unique[abi:ne180100]<CLMicroLocationFingerprintStdVectorSource,std::function<BOOL ()(void)> const&,CLMicroLocationFingerprintConfiguration (&)(void),std::vector<CLMicroLocationRecordingEventsTable::Entry> &,ULDatabase &>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *result;
  uint64_t v14;
  _QWORD v15[3];
  _QWORD *v16;
  _BYTE v17[24];
  _BYTE *v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v10 = operator new();
  std::__function::__value_func<double ()(CLMicroLocationFingerprint const&,CLMicroLocationFingerprint const&)>::__value_func[abi:ne180100]((uint64_t)v17, a1);
  v15[0] = &off_2511D63B8;
  v15[1] = a2;
  v16 = v15;
  CLMicroLocationFingerprintStdVectorSource::CLMicroLocationFingerprintStdVectorSource(v10, v17, v15, a3, a4);
  *a5 = v10;
  v11 = v16;
  if (v16 == v15)
  {
    v12 = 4;
    v11 = v15;
  }
  else
  {
    if (!v16)
      goto LABEL_6;
    v12 = 5;
  }
  (*(void (**)(void))(*v11 + 8 * v12))();
LABEL_6:
  result = v18;
  if (v18 == v17)
  {
    v14 = 4;
    result = v17;
  }
  else
  {
    if (!v18)
      return result;
    v14 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v14))();
}

void sub_241A8A0E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13, char a14, uint64_t a15, uint64_t a16, char *a17)
{
  uint64_t v17;
  char *v18;
  char *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;

  v20 = a13;
  if (a13 == v18)
  {
    v21 = 4;
    v20 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v21 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v20 + 8 * v21))();
LABEL_6:
  v22 = a17;
  if (a17 == &a14)
  {
    v23 = 4;
    v22 = &a14;
  }
  else
  {
    if (!a17)
      goto LABEL_11;
    v23 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v22 + 8 * v23))();
LABEL_11:
  MEMORY[0x2426A04D4](v17, 0xA1C4030951706);
  _Unwind_Resume(a1);
}

void CLMicroLocationLearner::sendBlueAtlasLearningAnalytics(CLMicroLocationLearner *this, NSDictionary *a2)
{
  NSDictionary *v2;
  NSObject *v3;
  NSObject *v4;
  _DWORD v5[2];
  __int16 v6;
  const char *v7;
  __int16 v8;
  uint64_t v9;
  __int16 v10;
  NSDictionary *v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v2 = a2;
  if (ULSettings::get<ULSettings::AnalyticsSendEventEnabled>())
  {
    if (onceToken_MicroLocation_Default != -1)
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_55);
    v3 = (id)logObject_MicroLocation_Default;
    if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
    {
      v5[0] = 68289539;
      v5[1] = 0;
      v6 = 2082;
      v7 = "";
      v8 = 2081;
      v9 = objc_msgSend(CFSTR("com.apple.MicroLocation.CustomLoiModelLearn"), "UTF8String");
      v10 = 2113;
      v11 = v2;
      _os_log_impl(&dword_2419D9000, v3, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"#MiLoLearner, sending core analytics\", \"event\":%{private, location:escape_only}s, \"eventFields\":%{private, location:escape_only}@}", (uint8_t *)v5, 0x26u);
    }

    +[ULSendEvent sendEvent:withEventName:](ULSendEvent, "sendEvent:withEventName:", v2, CFSTR("com.apple.MicroLocation.CustomLoiModelLearn"));
  }
  else
  {
    if (onceToken_MicroLocation_Default != -1)
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_55);
    v4 = logObject_MicroLocation_Default;
    if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v5[0]) = 0;
      _os_log_impl(&dword_2419D9000, v4, OS_LOG_TYPE_DEFAULT, "#MiLoLearner, CoreAnalytics Disabled", (uint8_t *)v5, 2u);
    }
  }

}

void sub_241A8A2FC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t CLMicroLocationLearner::learnBlueAtlasModel(CLMicroLocationLearner *this, uuid *a2)
{
  (*(void (**)(_QWORD))(**((_QWORD **)this + 3) + 16))(*((_QWORD *)this + 3));
  if (CLMicroLocationLearner::learnBlueAtlasModelInternal(this, a2))
    (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)this + 3) + 32))(*((_QWORD *)this + 3), 3);
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 3) + 48))(*((_QWORD *)this + 3));
}

_QWORD *CLMicroLocationLearner::executeWorkItems(_QWORD *result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  _BYTE v7[24];
  _BYTE *v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v2 = result[5];
  v3 = result[6];
  if (v2 != v3)
  {
    while (1)
    {
      std::__function::__value_func<double ()(CLMicroLocationFingerprint const&,CLMicroLocationFingerprint const&)>::__value_func[abi:ne180100]((uint64_t)v7, a2);
      v5 = *(_QWORD *)(v2 + 24);
      if (!v5)
        std::__throw_bad_function_call[abi:ne180100]();
      (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v5 + 48))(v5, v7);
      result = v8;
      if (v8 == v7)
        break;
      if (v8)
      {
        v6 = 5;
LABEL_7:
        result = (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v6))();
      }
      v2 += 32;
      if (v2 == v3)
        return result;
    }
    result = v7;
    v6 = 4;
    goto LABEL_7;
  }
  return result;
}

void sub_241A8A44C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  _Unwind_Resume(exception_object);
}

void ___ZL45_CLLogObjectForCategory_MicroLocation_Defaultv_block_invoke_47()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.MicroLocation", "MicroLocation");
  v1 = (void *)logObject_MicroLocation_Default;
  logObject_MicroLocation_Default = (uint64_t)v0;

}

void std::vector<BOOL>::reserve(char **a1, unint64_t a2)
{
  unint64_t v3;
  char *v4;
  __int128 v5;
  char *v6;
  int v7;
  char *v8;
  int v9;
  char *v10;
  __int128 v11;

  if (a2 > (_QWORD)a1[2] << 6)
  {
    if ((a2 & 0x8000000000000000) != 0)
      std::vector<CLMicroLocationProto::ConfidenceReason>::__throw_length_error[abi:ne180100]();
    v10 = 0;
    v11 = 0uLL;
    std::vector<BOOL>::__vallocate[abi:ne180100](&v10, a2);
    v3 = (unint64_t)a1[1];
    v8 = *a1;
    v9 = 0;
    v6 = &v8[8 * (v3 >> 6)];
    v7 = v3 & 0x3F;
    std::vector<BOOL>::__construct_at_end<std::__bit_iterator<std::vector<BOOL>,false,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>>(&v10, (uint64_t)&v8, (uint64_t)&v6, v3);
    v4 = *a1;
    *a1 = v10;
    v10 = v4;
    v5 = *(_OWORD *)(a1 + 1);
    *(_OWORD *)(a1 + 1) = v11;
    v11 = v5;
    if (v4)
      operator delete(v4);
  }
}

void sub_241A8A568(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::vector<BOOL>::push_back(uint64_t a1, _BYTE *a2)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  char *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  if (v4 == v5 << 6)
  {
    if ((uint64_t)(v4 + 1) < 0)
      std::vector<CLMicroLocationProto::ConfidenceReason>::__throw_length_error[abi:ne180100]();
    v6 = v5 << 7;
    if (v6 <= (v4 & 0xFFFFFFFFFFFFFFC0) + 64)
      v6 = (v4 & 0xFFFFFFFFFFFFFFC0) + 64;
    if (v4 <= 0x3FFFFFFFFFFFFFFELL)
      v7 = v6;
    else
      v7 = 0x7FFFFFFFFFFFFFFFLL;
    std::vector<BOOL>::reserve((char **)a1, v7);
    v4 = *(_QWORD *)(a1 + 8);
  }
  *(_QWORD *)(a1 + 8) = v4 + 1;
  v8 = *(char **)a1;
  v9 = v4 >> 6;
  v10 = 1 << v4;
  if (*a2)
    v11 = *(_QWORD *)&v8[8 * v9] | v10;
  else
    v11 = *(_QWORD *)&v8[8 * v9] & ~v10;
  *(_QWORD *)&v8[8 * v9] = v11;
}

void *std::vector<BOOL>::__vallocate[abi:ne180100](_QWORD *a1, uint64_t a2)
{
  void *result;
  uint64_t v4;

  if (a2 < 0)
    std::vector<CLMicroLocationProto::ConfidenceReason>::__throw_length_error[abi:ne180100]();
  result = std::__allocate_at_least[abi:ne180100]<std::allocator<CLMicroLocationWiFiChannelHistogram>>((uint64_t)(a1 + 2), ((unint64_t)(a2 - 1) >> 6) + 1);
  *a1 = result;
  a1[1] = 0;
  a1[2] = v4;
  return result;
}

void std::vector<BOOL>::__construct_at_end<std::__bit_iterator<std::vector<BOOL>,false,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>>(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  int v17;

  v4 = a1[1];
  v5 = v4 + a4;
  a1[1] = v4 + a4;
  if (!v4 || ((v5 - 1) ^ (v4 - 1)) >= 0x40)
  {
    if (v5 >= 0x41)
      v6 = (v5 - 1) >> 6;
    else
      v6 = 0;
    *(_QWORD *)(*a1 + 8 * v6) = 0;
  }
  v7 = *(_DWORD *)(a2 + 8);
  v8 = *(_QWORD *)a3;
  v9 = *(_DWORD *)(a3 + 8);
  v10 = *a1 + 8 * (v4 >> 6);
  v16 = *(_QWORD *)a2;
  v17 = v7;
  v14 = v8;
  v15 = v9;
  v12 = v10;
  v13 = v4 & 0x3F;
  std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::__bit_iterator<std::vector<BOOL>,false,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>,0>(&v16, &v14, &v12, (uint64_t)&v11);
}

void std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::__bit_iterator<std::vector<BOOL>,false,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>,0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  int v5;
  uint64_t v6;
  int v7;
  int v8;
  int v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  int v21;

  v5 = *((_DWORD *)a1 + 2);
  v6 = *a2;
  v7 = *((_DWORD *)a2 + 2);
  v16 = *a1;
  v17 = v5;
  v14 = v6;
  v15 = v7;
  v8 = *((_DWORD *)a3 + 2);
  v12 = *a3;
  v13 = v8;
  std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::__bit_iterator<std::vector<BOOL>,false,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>>((uint64_t)&v16, (uint64_t)&v14, (uint64_t)&v12, (uint64_t)&v18);
  v9 = v19;
  v10 = v20;
  v11 = v21;
  *(_QWORD *)a4 = v18;
  *(_DWORD *)(a4 + 8) = v9;
  *(_QWORD *)(a4 + 16) = v10;
  *(_DWORD *)(a4 + 24) = v11;
}

void std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::__bit_iterator<std::vector<BOOL>,false,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  _QWORD *v4;
  int v5;
  int i;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v12;

  v4 = *(_QWORD **)a1;
  v5 = *(_DWORD *)(a1 + 8);
  for (i = *(_DWORD *)(a3 + 8); *(_QWORD *)a1 != *(_QWORD *)a2 || v5 != *(_DWORD *)(a2 + 8); v5 = *(_DWORD *)(a1 + 8))
  {
    v8 = *(uint64_t **)a3;
    v9 = 1 << i;
    if (((*v4 >> v5) & 1) != 0)
      v10 = *v8 | v9;
    else
      v10 = *v8 & ~v9;
    *v8 = v10;
    if (v5 == 63)
    {
      v11 = 0;
      *(_QWORD *)a1 = v4 + 1;
    }
    else
    {
      v11 = v5 + 1;
    }
    *(_DWORD *)(a1 + 8) = v11;
    v12 = *(_DWORD *)(a3 + 8);
    if (v12 == 63)
    {
      i = 0;
      *(_QWORD *)a3 += 8;
    }
    else
    {
      i = v12 + 1;
    }
    *(_DWORD *)(a3 + 8) = i;
    v4 = *(_QWORD **)a1;
  }
  *(_QWORD *)a4 = v4;
  *(_DWORD *)(a4 + 8) = v5;
  *(_QWORD *)(a4 + 16) = *(_QWORD *)a3;
  *(_DWORD *)(a4 + 24) = i;
}

id std::optional<NSMutableDictionary * {__strong}>::value_or[abi:ne180100]<decltype(nullptr)>(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 8))
    return *(id *)a1;
  else
    return 0;
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<CLMicroLocationConfigurationTable::Entry>,CLMicroLocationConfigurationTable::Entry const*,CLMicroLocationConfigurationTable::Entry const*,CLMicroLocationConfigurationTable::Entry*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  _QWORD v9[3];
  char v10;
  uint64_t v11;
  uint64_t v12;

  v4 = a4;
  v11 = a4;
  v12 = a4;
  v9[0] = a1;
  v9[1] = &v11;
  v9[2] = &v12;
  v10 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      std::allocator<CLMicroLocationConfigurationTable::Entry>::construct[abi:ne180100]<CLMicroLocationConfigurationTable::Entry,CLMicroLocationConfigurationTable::Entry const&>(a1, v4, v6);
      v6 += 112;
      v4 = v12 + 112;
      v12 += 112;
    }
    while (v6 != a3);
  }
  v10 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<CLMicroLocationConfigurationTable::Entry>,CLMicroLocationConfigurationTable::Entry*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v9);
  return v4;
}

void sub_241A8A910(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<CLMicroLocationConfigurationTable::Entry>,CLMicroLocationConfigurationTable::Entry*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__optional_destruct_base<CLMicroLocationModel,false>::~__optional_destruct_base[abi:ne180100](uint64_t a1)
{
  void *v2;
  void **v4;

  if (*(_BYTE *)(a1 + 448))
  {
    if (*(char *)(a1 + 447) < 0)
      operator delete(*(void **)(a1 + 424));
    v2 = *(void **)(a1 + 400);
    if (v2)
    {
      *(_QWORD *)(a1 + 408) = v2;
      operator delete(v2);
    }
    std::__hash_table<std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>>>::~__hash_table(a1 + 352);
    v4 = (void **)(a1 + 328);
    std::vector<std::pair<std::shared_ptr<CLMicroLocationFingerprint>,boost::uuids::uuid>>::__destroy_vector::operator()[abi:ne180100](&v4);
    std::__optional_destruct_base<CLMicroLocationModel::BlueAtlasData,false>::~__optional_destruct_base[abi:ne180100](a1 + 200);
    std::__optional_destruct_base<CLMicroLocationModel::SimilarityListData,false>::~__optional_destruct_base[abi:ne180100](a1 + 72);
    std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>>>::~__hash_table(a1 + 16);
  }
  return a1;
}

void ___ZL47_CLLogObjectForCategory_MicroLocationQE_Defaultv_block_invoke_0()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.MicroLocation", "MicroLocationQE");
  v1 = (void *)logObject_MicroLocationQE_Default;
  logObject_MicroLocationQE_Default = (uint64_t)v0;

}

void std::__optional_storage_base<CLMicroLocationModel::SimilarityListData,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<CLMicroLocationModel::SimilarityListData,false>>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  if (*(unsigned __int8 *)(a1 + 120) == *(unsigned __int8 *)(a2 + 120))
  {
    if (*(_BYTE *)(a1 + 120))
    {
      std::vector<CLMicroLocationResultInternal>::__move_assign(a1, (__n128 *)a2);
      std::vector<CLMicroLocationResultInternal>::__move_assign(a1 + 24, (__n128 *)(a2 + 24));
      std::__optional_storage_base<CLMicroLocationUtils::ProbabilityMatrix,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<CLMicroLocationUtils::ProbabilityMatrix,false>>((uint64_t *)(a1 + 48), a2 + 48);
      std::vector<CLMicroLocationResultInternal>::__move_assign(a1 + 80, (__n128 *)(a2 + 80));
      v4 = *(_QWORD *)(a2 + 104);
      *(_BYTE *)(a1 + 112) = *(_BYTE *)(a2 + 112);
      *(_QWORD *)(a1 + 104) = v4;
    }
  }
  else if (*(_BYTE *)(a1 + 120))
  {
    std::__optional_destruct_base<CLMicroLocationModel::SimilarityListData,false>::reset[abi:ne180100](a1);
  }
  else
  {
    std::__construct_at[abi:ne180100]<CLMicroLocationModel::SimilarityListData,CLMicroLocationModel::SimilarityListData,CLMicroLocationModel::SimilarityListData*>(a1, a2);
    *(_BYTE *)(a1 + 120) = 1;
  }
}

void std::__optional_destruct_base<CLMicroLocationModel::SimilarityListData,false>::reset[abi:ne180100](uint64_t a1)
{
  void *v2;
  uint64_t v3;
  void *v4;
  void *v5;

  if (*(_BYTE *)(a1 + 120))
  {
    v2 = *(void **)(a1 + 80);
    if (v2)
    {
      *(_QWORD *)(a1 + 88) = v2;
      operator delete(v2);
    }
    if (*(_BYTE *)(a1 + 72))
    {
      v3 = *(_QWORD *)(a1 + 48);
      *(_QWORD *)(a1 + 48) = 0;
      if (v3)
        MEMORY[0x2426A04BC](v3, 0x1000C8000313F17);
    }
    v4 = *(void **)(a1 + 24);
    if (v4)
    {
      *(_QWORD *)(a1 + 32) = v4;
      operator delete(v4);
    }
    v5 = *(void **)a1;
    if (*(_QWORD *)a1)
    {
      *(_QWORD *)(a1 + 8) = v5;
      operator delete(v5);
    }
    *(_BYTE *)(a1 + 120) = 0;
  }
}

__n128 std::__optional_storage_base<CLMicroLocationModel::BlueAtlasData,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<CLMicroLocationModel::BlueAtlasData,false>>(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v5;
  __int128 v6;

  if (*(unsigned __int8 *)(a1 + 88) == *(unsigned __int8 *)(a2 + 88))
  {
    if (*(_BYTE *)(a1 + 88))
    {
      std::vector<CLMicroLocationResultInternal>::__move_assign(a1, (__n128 *)a2);
      std::vector<CLMicroLocationResultInternal>::__move_assign(a1 + 24, (__n128 *)(a2 + 24));
      result = *(__n128 *)(a2 + 48);
      v5 = *(_OWORD *)(a2 + 64);
      *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
      *(__n128 *)(a1 + 48) = result;
      *(_OWORD *)(a1 + 64) = v5;
    }
  }
  else if (*(_BYTE *)(a1 + 88))
  {
    std::__optional_destruct_base<CLMicroLocationModel::BlueAtlasData,false>::reset[abi:ne180100](a1);
  }
  else
  {
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    *(_QWORD *)(a1 + 24) = 0;
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 40) = 0;
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
    *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
    *(_QWORD *)(a2 + 24) = 0;
    *(_QWORD *)(a2 + 32) = 0;
    *(_QWORD *)(a2 + 40) = 0;
    result = *(__n128 *)(a2 + 48);
    v6 = *(_OWORD *)(a2 + 64);
    *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
    *(__n128 *)(a1 + 48) = result;
    *(_OWORD *)(a1 + 64) = v6;
    *(_BYTE *)(a1 + 88) = 1;
  }
  return result;
}

void std::__optional_destruct_base<CLMicroLocationModel::BlueAtlasData,false>::reset[abi:ne180100](uint64_t a1)
{
  void *v2;
  void *v3;

  if (*(_BYTE *)(a1 + 88))
  {
    v2 = *(void **)(a1 + 24);
    if (v2)
    {
      *(_QWORD *)(a1 + 32) = v2;
      operator delete(v2);
    }
    v3 = *(void **)a1;
    if (*(_QWORD *)a1)
    {
      *(_QWORD *)(a1 + 8) = v3;
      operator delete(v3);
    }
    *(_BYTE *)(a1 + 88) = 0;
  }
}

void std::vector<std::pair<std::shared_ptr<CLMicroLocationFingerprint>,boost::uuids::uuid>>::__vdeallocate(void **a1)
{
  void *v1;
  uint64_t v3;
  void *v4;

  v1 = *a1;
  if (*a1)
  {
    v3 = (uint64_t)a1[1];
    v4 = v1;
    if ((void *)v3 != v1)
    {
      do
        v3 = std::shared_ptr<CLMiLoService::ModelAndConf>::~shared_ptr[abi:ne180100](v3 - 32);
      while ((void *)v3 != v1);
      v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

void std::__hash_table<std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>>>::__move_assign(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  void *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;

  std::__hash_table<std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>>>::clear(a1);
  v4 = *a2;
  *a2 = 0;
  v5 = *(void **)a1;
  *(_QWORD *)a1 = v4;
  if (v5)
    operator delete(v5);
  v8 = a2[2];
  v7 = a2 + 2;
  v6 = v8;
  v9 = *(v7 - 1);
  *(_QWORD *)(a1 + 16) = v8;
  *(_QWORD *)(a1 + 8) = v9;
  *(v7 - 1) = 0;
  v10 = v7[1];
  *(_QWORD *)(a1 + 24) = v10;
  *(_DWORD *)(a1 + 32) = *((_DWORD *)v7 + 4);
  if (v10)
  {
    v11 = *(_QWORD *)(v6 + 8);
    v12 = *(_QWORD *)(a1 + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v11 >= v12)
        v11 %= v12;
    }
    else
    {
      v11 &= v12 - 1;
    }
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v11) = a1 + 16;
    *v7 = 0;
    v7[1] = 0;
  }
}

void std::__hash_table<std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>>>::clear(uint64_t a1)
{
  uint64_t v2;
  uint64_t i;

  if (*(_QWORD *)(a1 + 24))
  {
    std::__hash_table<std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,std::vector<boost::uuids::uuid>>>>::__deallocate_node(a1, *(_QWORD **)(a1 + 16));
    *(_QWORD *)(a1 + 16) = 0;
    v2 = *(_QWORD *)(a1 + 8);
    if (v2)
    {
      for (i = 0; i != v2; ++i)
        *(_QWORD *)(*(_QWORD *)a1 + 8 * i) = 0;
    }
    *(_QWORD *)(a1 + 24) = 0;
  }
}

void CLMicroLocationFingerprintDataSources::IInterruptibleDataSource::CancelledException::~CancelledException(std::runtime_error *this)
{
  std::runtime_error::~runtime_error(this);
  JUMPOUT(0x2426A04D4);
}

uint64_t std::__optional_destruct_base<CLMicroLocationModel,false>::__optional_destruct_base[abi:ne180100]<CLMicroLocationModel>(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  uint64_t v5;
  __int128 v6;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  std::unordered_map<boost::uuids::uuid,CLMicroLocationAnchorAppearance>::unordered_map(a1 + 16, a2 + 16);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  std::__optional_move_base<CLMicroLocationModel::SimilarityListData,false>::__optional_move_base[abi:ne180100]((_BYTE *)(a1 + 72), a2 + 72);
  std::__optional_move_base<CLMicroLocationModel::BlueAtlasData,false>::__optional_move_base[abi:ne180100]((_BYTE *)(a1 + 200), a2 + 200);
  v4 = *(_OWORD *)(a2 + 296);
  *(_OWORD *)(a1 + 308) = *(_OWORD *)(a2 + 308);
  *(_OWORD *)(a1 + 296) = v4;
  *(_QWORD *)(a1 + 336) = 0;
  *(_QWORD *)(a1 + 344) = 0;
  *(_QWORD *)(a1 + 328) = 0;
  v5 = *(_QWORD *)(a2 + 336);
  *(_QWORD *)(a1 + 328) = *(_QWORD *)(a2 + 328);
  *(_QWORD *)(a1 + 336) = v5;
  *(_QWORD *)(a1 + 344) = *(_QWORD *)(a2 + 344);
  *(_QWORD *)(a2 + 328) = 0;
  *(_QWORD *)(a2 + 336) = 0;
  *(_QWORD *)(a2 + 344) = 0;
  std::__hash_table<CLMicroLocationFingerprint::Measurement,CLMicroLocationFingerprint::Measurement::HashMeasurement,CLMicroLocationFingerprint::Measurement::PredicateMeasurement,std::allocator<CLMicroLocationFingerprint::Measurement>>::__hash_table(a1 + 352, (uint64_t *)(a2 + 352));
  *(_QWORD *)(a1 + 392) = *(_QWORD *)(a2 + 392);
  *(_QWORD *)(a1 + 400) = 0;
  *(_QWORD *)(a1 + 408) = 0;
  *(_QWORD *)(a1 + 416) = 0;
  *(_OWORD *)(a1 + 400) = *(_OWORD *)(a2 + 400);
  *(_QWORD *)(a1 + 416) = *(_QWORD *)(a2 + 416);
  *(_QWORD *)(a2 + 400) = 0;
  *(_QWORD *)(a2 + 408) = 0;
  *(_QWORD *)(a2 + 416) = 0;
  v6 = *(_OWORD *)(a2 + 424);
  *(_QWORD *)(a1 + 440) = *(_QWORD *)(a2 + 440);
  *(_OWORD *)(a1 + 424) = v6;
  *(_QWORD *)(a2 + 432) = 0;
  *(_QWORD *)(a2 + 440) = 0;
  *(_QWORD *)(a2 + 424) = 0;
  *(_BYTE *)(a1 + 448) = 1;
  return a1;
}

void sub_241A8AE6C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

_BYTE *std::__optional_move_base<CLMicroLocationModel::SimilarityListData,false>::__optional_move_base[abi:ne180100](_BYTE *a1, uint64_t a2)
{
  *a1 = 0;
  a1[120] = 0;
  if (*(_BYTE *)(a2 + 120))
  {
    std::__construct_at[abi:ne180100]<CLMicroLocationModel::SimilarityListData,CLMicroLocationModel::SimilarityListData,CLMicroLocationModel::SimilarityListData*>((uint64_t)a1, a2);
    a1[120] = 1;
  }
  return a1;
}

void sub_241A8AEC0(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__optional_destruct_base<CLMicroLocationModel::SimilarityListData,false>::~__optional_destruct_base[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

_BYTE *std::__optional_move_base<CLMicroLocationModel::BlueAtlasData,false>::__optional_move_base[abi:ne180100](_BYTE *a1, uint64_t a2)
{
  *a1 = 0;
  a1[88] = 0;
  std::__optional_storage_base<CLMicroLocationModel::BlueAtlasData,false>::__construct_from[abi:ne180100]<std::__optional_move_base<CLMicroLocationModel::BlueAtlasData,false>>((uint64_t)a1, a2);
  return a1;
}

__n128 std::__optional_storage_base<CLMicroLocationModel::BlueAtlasData,false>::__construct_from[abi:ne180100]<std::__optional_move_base<CLMicroLocationModel::BlueAtlasData,false>>(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  if (*(_BYTE *)(a2 + 88))
  {
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    *(_QWORD *)(a1 + 24) = 0;
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 40) = 0;
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
    *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
    *(_QWORD *)(a2 + 24) = 0;
    *(_QWORD *)(a2 + 32) = 0;
    *(_QWORD *)(a2 + 40) = 0;
    result = *(__n128 *)(a2 + 48);
    v3 = *(_OWORD *)(a2 + 64);
    *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
    *(__n128 *)(a1 + 48) = result;
    *(_OWORD *)(a1 + 64) = v3;
    *(_BYTE *)(a1 + 88) = 1;
  }
  return result;
}

void std::__function::__func<CLMicroLocationLearner::CLMicroLocationLearner(CLMicroLocationLearner::ILearnerDelegate &,ULDatabase &)::$_0,std::allocator<CLMicroLocationLearner::CLMicroLocationLearner(CLMicroLocationLearner::ILearnerDelegate &,ULDatabase &)::$_0>,void ()(std::function<BOOL ()(void)>)>::~__func()
{
  JUMPOUT(0x2426A04D4);
}

_QWORD *std::__function::__func<CLMicroLocationLearner::CLMicroLocationLearner(CLMicroLocationLearner::ILearnerDelegate &,ULDatabase &)::$_0,std::allocator<CLMicroLocationLearner::CLMicroLocationLearner(CLMicroLocationLearner::ILearnerDelegate &,ULDatabase &)::$_0>,void ()(std::function<BOOL ()(void)>)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_2511D6028;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<CLMicroLocationLearner::CLMicroLocationLearner(CLMicroLocationLearner::ILearnerDelegate &,ULDatabase &)::$_0,std::allocator<CLMicroLocationLearner::CLMicroLocationLearner(CLMicroLocationLearner::ILearnerDelegate &,ULDatabase &)::$_0>,void ()(std::function<BOOL ()(void)>)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_2511D6028;
  a2[1] = v2;
  return result;
}

_QWORD *std::__function::__func<CLMicroLocationLearner::CLMicroLocationLearner(CLMicroLocationLearner::ILearnerDelegate &,ULDatabase &)::$_0,std::allocator<CLMicroLocationLearner::CLMicroLocationLearner(CLMicroLocationLearner::ILearnerDelegate &,ULDatabase &)::$_0>,void ()(std::function<BOOL ()(void)>)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *result;
  uint64_t v8;
  _QWORD v9[3];
  _QWORD *v10;
  _BYTE v11[24];
  _BYTE *v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  std::__function::__value_func<BOOL ()(void)>::__value_func[abi:ne180100]((uint64_t)v9, a2);
  v3 = *(_QWORD *)(a1 + 8);
  v4 = (uint64_t)v10;
  if (!v10)
    goto LABEL_4;
  if (v10 != v9)
  {
    v4 = (*(uint64_t (**)(void))(*v10 + 16))();
LABEL_4:
    v12 = (_BYTE *)v4;
    goto LABEL_6;
  }
  v12 = v11;
  (*(void (**)(_QWORD *, _BYTE *))(v9[0] + 24))(v9, v11);
LABEL_6:
  CLMicroLocationLearner::onLearningBegin(v3, (uint64_t)v11);
  v5 = v12;
  if (v12 == v11)
  {
    v6 = 4;
    v5 = v11;
  }
  else
  {
    if (!v12)
      goto LABEL_11;
    v6 = 5;
  }
  (*(void (**)(void))(*v5 + 8 * v6))();
LABEL_11:
  result = v10;
  if (v10 == v9)
  {
    v8 = 4;
    result = v9;
  }
  else
  {
    if (!v10)
      return result;
    v8 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v8))();
}

void sub_241A8B0DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  char *v18;
  uint64_t v19;

  v18 = a13;
  if (a13 == &a10)
  {
    v19 = 4;
    v18 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v19 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v18 + 8 * v19))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<CLMicroLocationLearner::CLMicroLocationLearner(CLMicroLocationLearner::ILearnerDelegate &,ULDatabase &)::$_0,std::allocator<CLMicroLocationLearner::CLMicroLocationLearner(CLMicroLocationLearner::ILearnerDelegate &,ULDatabase &)::$_0>,void ()(std::function<BOOL ()(void)>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<CLMicroLocationLearner::CLMicroLocationLearner(CLMicroLocationLearner::ILearnerDelegate &,ULDatabase &)::$_0,std::allocator<CLMicroLocationLearner::CLMicroLocationLearner(CLMicroLocationLearner::ILearnerDelegate &,ULDatabase &)::$_0>,void ()(std::function<BOOL ()(void)>)>::target_type()
{
}

uint64_t std::__function::__value_func<BOOL ()(void)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(_QWORD *)(a1 + 24) = a1;
      (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(_QWORD *)(a1 + 24) = v4;
  }
  else
  {
    v3 = (_QWORD *)(a1 + 24);
  }
  *v3 = 0;
  return a1;
}

void std::__function::__func<CLMicroLocationLearner::CLMicroLocationLearner(CLMicroLocationLearner::ILearnerDelegate &,ULDatabase &)::$_1,std::allocator<CLMicroLocationLearner::CLMicroLocationLearner(CLMicroLocationLearner::ILearnerDelegate &,ULDatabase &)::$_1>,void ()(std::function<BOOL ()(void)>)>::~__func()
{
  JUMPOUT(0x2426A04D4);
}

_QWORD *std::__function::__func<CLMicroLocationLearner::CLMicroLocationLearner(CLMicroLocationLearner::ILearnerDelegate &,ULDatabase &)::$_1,std::allocator<CLMicroLocationLearner::CLMicroLocationLearner(CLMicroLocationLearner::ILearnerDelegate &,ULDatabase &)::$_1>,void ()(std::function<BOOL ()(void)>)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_2511D60B8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<CLMicroLocationLearner::CLMicroLocationLearner(CLMicroLocationLearner::ILearnerDelegate &,ULDatabase &)::$_1,std::allocator<CLMicroLocationLearner::CLMicroLocationLearner(CLMicroLocationLearner::ILearnerDelegate &,ULDatabase &)::$_1>,void ()(std::function<BOOL ()(void)>)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_2511D60B8;
  a2[1] = v2;
  return result;
}

_QWORD *std::__function::__func<CLMicroLocationLearner::CLMicroLocationLearner(CLMicroLocationLearner::ILearnerDelegate &,ULDatabase &)::$_1,std::allocator<CLMicroLocationLearner::CLMicroLocationLearner(CLMicroLocationLearner::ILearnerDelegate &,ULDatabase &)::$_1>,void ()(std::function<BOOL ()(void)>)>::operator()(uint64_t a1, uint64_t a2)
{
  CLMicroLocationLearner *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *result;
  uint64_t v8;
  _QWORD v9[3];
  _QWORD *v10;
  _BYTE v11[24];
  _BYTE *v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  std::__function::__value_func<BOOL ()(void)>::__value_func[abi:ne180100]((uint64_t)v9, a2);
  v3 = *(CLMicroLocationLearner **)(a1 + 8);
  v4 = (uint64_t)v10;
  if (!v10)
    goto LABEL_4;
  if (v10 != v9)
  {
    v4 = (*(uint64_t (**)(void))(*v10 + 16))();
LABEL_4:
    v12 = (_BYTE *)v4;
    goto LABEL_6;
  }
  v12 = v11;
  (*(void (**)(_QWORD *, _BYTE *))(v9[0] + 24))(v9, v11);
LABEL_6:
  CLMicroLocationLearner::generateAnchorAppearanceMap(v3, (uint64_t)v11);
  v5 = v12;
  if (v12 == v11)
  {
    v6 = 4;
    v5 = v11;
  }
  else
  {
    if (!v12)
      goto LABEL_11;
    v6 = 5;
  }
  (*(void (**)(void))(*v5 + 8 * v6))();
LABEL_11:
  result = v10;
  if (v10 == v9)
  {
    v8 = 4;
    result = v9;
  }
  else
  {
    if (!v10)
      return result;
    v8 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v8))();
}

void sub_241A8B36C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  char *v18;
  uint64_t v19;

  v18 = a13;
  if (a13 == &a10)
  {
    v19 = 4;
    v18 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v19 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v18 + 8 * v19))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<CLMicroLocationLearner::CLMicroLocationLearner(CLMicroLocationLearner::ILearnerDelegate &,ULDatabase &)::$_1,std::allocator<CLMicroLocationLearner::CLMicroLocationLearner(CLMicroLocationLearner::ILearnerDelegate &,ULDatabase &)::$_1>,void ()(std::function<BOOL ()(void)>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<CLMicroLocationLearner::CLMicroLocationLearner(CLMicroLocationLearner::ILearnerDelegate &,ULDatabase &)::$_1,std::allocator<CLMicroLocationLearner::CLMicroLocationLearner(CLMicroLocationLearner::ILearnerDelegate &,ULDatabase &)::$_1>,void ()(std::function<BOOL ()(void)>)>::target_type()
{
}

void std::__function::__func<CLMicroLocationLearner::CLMicroLocationLearner(CLMicroLocationLearner::ILearnerDelegate &,ULDatabase &)::$_2,std::allocator<CLMicroLocationLearner::CLMicroLocationLearner(CLMicroLocationLearner::ILearnerDelegate &,ULDatabase &)::$_2>,void ()(std::function<BOOL ()(void)>)>::~__func()
{
  JUMPOUT(0x2426A04D4);
}

_QWORD *std::__function::__func<CLMicroLocationLearner::CLMicroLocationLearner(CLMicroLocationLearner::ILearnerDelegate &,ULDatabase &)::$_2,std::allocator<CLMicroLocationLearner::CLMicroLocationLearner(CLMicroLocationLearner::ILearnerDelegate &,ULDatabase &)::$_2>,void ()(std::function<BOOL ()(void)>)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_2511D6138;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<CLMicroLocationLearner::CLMicroLocationLearner(CLMicroLocationLearner::ILearnerDelegate &,ULDatabase &)::$_2,std::allocator<CLMicroLocationLearner::CLMicroLocationLearner(CLMicroLocationLearner::ILearnerDelegate &,ULDatabase &)::$_2>,void ()(std::function<BOOL ()(void)>)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_2511D6138;
  a2[1] = v2;
  return result;
}

_QWORD *std::__function::__func<CLMicroLocationLearner::CLMicroLocationLearner(CLMicroLocationLearner::ILearnerDelegate &,ULDatabase &)::$_2,std::allocator<CLMicroLocationLearner::CLMicroLocationLearner(CLMicroLocationLearner::ILearnerDelegate &,ULDatabase &)::$_2>,void ()(std::function<BOOL ()(void)>)>::operator()(uint64_t a1, uint64_t a2)
{
  ULDatabase **v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *result;
  uint64_t v8;
  _QWORD v9[3];
  _QWORD *v10;
  _BYTE v11[24];
  _BYTE *v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  std::__function::__value_func<BOOL ()(void)>::__value_func[abi:ne180100]((uint64_t)v9, a2);
  v3 = *(ULDatabase ***)(a1 + 8);
  v4 = (uint64_t)v10;
  if (!v10)
    goto LABEL_4;
  if (v10 != v9)
  {
    v4 = (*(uint64_t (**)(void))(*v10 + 16))();
LABEL_4:
    v12 = (_BYTE *)v4;
    goto LABEL_6;
  }
  v12 = v11;
  (*(void (**)(_QWORD *, _BYTE *))(v9[0] + 24))(v9, v11);
LABEL_6:
  CLMicroLocationLearner::learnFromModelType(v3, (uint64_t)v11, 0);
  v5 = v12;
  if (v12 == v11)
  {
    v6 = 4;
    v5 = v11;
  }
  else
  {
    if (!v12)
      goto LABEL_11;
    v6 = 5;
  }
  (*(void (**)(void))(*v5 + 8 * v6))();
LABEL_11:
  result = v10;
  if (v10 == v9)
  {
    v8 = 4;
    result = v9;
  }
  else
  {
    if (!v10)
      return result;
    v8 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v8))();
}

void sub_241A8B59C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  char *v18;
  uint64_t v19;

  v18 = a13;
  if (a13 == &a10)
  {
    v19 = 4;
    v18 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v19 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v18 + 8 * v19))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<CLMicroLocationLearner::CLMicroLocationLearner(CLMicroLocationLearner::ILearnerDelegate &,ULDatabase &)::$_2,std::allocator<CLMicroLocationLearner::CLMicroLocationLearner(CLMicroLocationLearner::ILearnerDelegate &,ULDatabase &)::$_2>,void ()(std::function<BOOL ()(void)>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<CLMicroLocationLearner::CLMicroLocationLearner(CLMicroLocationLearner::ILearnerDelegate &,ULDatabase &)::$_2,std::allocator<CLMicroLocationLearner::CLMicroLocationLearner(CLMicroLocationLearner::ILearnerDelegate &,ULDatabase &)::$_2>,void ()(std::function<BOOL ()(void)>)>::target_type()
{
}

void std::__function::__func<CLMicroLocationLearner::CLMicroLocationLearner(CLMicroLocationLearner::ILearnerDelegate &,ULDatabase &)::$_3,std::allocator<CLMicroLocationLearner::CLMicroLocationLearner(CLMicroLocationLearner::ILearnerDelegate &,ULDatabase &)::$_3>,void ()(std::function<BOOL ()(void)>)>::~__func()
{
  JUMPOUT(0x2426A04D4);
}

_QWORD *std::__function::__func<CLMicroLocationLearner::CLMicroLocationLearner(CLMicroLocationLearner::ILearnerDelegate &,ULDatabase &)::$_3,std::allocator<CLMicroLocationLearner::CLMicroLocationLearner(CLMicroLocationLearner::ILearnerDelegate &,ULDatabase &)::$_3>,void ()(std::function<BOOL ()(void)>)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_2511D61B8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<CLMicroLocationLearner::CLMicroLocationLearner(CLMicroLocationLearner::ILearnerDelegate &,ULDatabase &)::$_3,std::allocator<CLMicroLocationLearner::CLMicroLocationLearner(CLMicroLocationLearner::ILearnerDelegate &,ULDatabase &)::$_3>,void ()(std::function<BOOL ()(void)>)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_2511D61B8;
  a2[1] = v2;
  return result;
}

_QWORD *std::__function::__func<CLMicroLocationLearner::CLMicroLocationLearner(CLMicroLocationLearner::ILearnerDelegate &,ULDatabase &)::$_3,std::allocator<CLMicroLocationLearner::CLMicroLocationLearner(CLMicroLocationLearner::ILearnerDelegate &,ULDatabase &)::$_3>,void ()(std::function<BOOL ()(void)>)>::operator()(uint64_t a1, uint64_t a2)
{
  ULDatabase **v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *result;
  uint64_t v8;
  _QWORD v9[3];
  _QWORD *v10;
  _BYTE v11[24];
  _BYTE *v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  std::__function::__value_func<BOOL ()(void)>::__value_func[abi:ne180100]((uint64_t)v9, a2);
  v3 = *(ULDatabase ***)(a1 + 8);
  v4 = (uint64_t)v10;
  if (!v10)
    goto LABEL_4;
  if (v10 != v9)
  {
    v4 = (*(uint64_t (**)(void))(*v10 + 16))();
LABEL_4:
    v12 = (_BYTE *)v4;
    goto LABEL_6;
  }
  v12 = v11;
  (*(void (**)(_QWORD *, _BYTE *))(v9[0] + 24))(v9, v11);
LABEL_6:
  CLMicroLocationLearner::learnFromModelType(v3, (uint64_t)v11, 1u);
  v5 = v12;
  if (v12 == v11)
  {
    v6 = 4;
    v5 = v11;
  }
  else
  {
    if (!v12)
      goto LABEL_11;
    v6 = 5;
  }
  (*(void (**)(void))(*v5 + 8 * v6))();
LABEL_11:
  result = v10;
  if (v10 == v9)
  {
    v8 = 4;
    result = v9;
  }
  else
  {
    if (!v10)
      return result;
    v8 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v8))();
}

void sub_241A8B7CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  char *v18;
  uint64_t v19;

  v18 = a13;
  if (a13 == &a10)
  {
    v19 = 4;
    v18 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v19 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v18 + 8 * v19))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<CLMicroLocationLearner::CLMicroLocationLearner(CLMicroLocationLearner::ILearnerDelegate &,ULDatabase &)::$_3,std::allocator<CLMicroLocationLearner::CLMicroLocationLearner(CLMicroLocationLearner::ILearnerDelegate &,ULDatabase &)::$_3>,void ()(std::function<BOOL ()(void)>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<CLMicroLocationLearner::CLMicroLocationLearner(CLMicroLocationLearner::ILearnerDelegate &,ULDatabase &)::$_3,std::allocator<CLMicroLocationLearner::CLMicroLocationLearner(CLMicroLocationLearner::ILearnerDelegate &,ULDatabase &)::$_3>,void ()(std::function<BOOL ()(void)>)>::target_type()
{
}

void std::__function::__func<CLMicroLocationLearner::CLMicroLocationLearner(CLMicroLocationLearner::ILearnerDelegate &,ULDatabase &)::$_4,std::allocator<CLMicroLocationLearner::CLMicroLocationLearner(CLMicroLocationLearner::ILearnerDelegate &,ULDatabase &)::$_4>,void ()(std::function<BOOL ()(void)>)>::~__func()
{
  JUMPOUT(0x2426A04D4);
}

_QWORD *std::__function::__func<CLMicroLocationLearner::CLMicroLocationLearner(CLMicroLocationLearner::ILearnerDelegate &,ULDatabase &)::$_4,std::allocator<CLMicroLocationLearner::CLMicroLocationLearner(CLMicroLocationLearner::ILearnerDelegate &,ULDatabase &)::$_4>,void ()(std::function<BOOL ()(void)>)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_2511D6238;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<CLMicroLocationLearner::CLMicroLocationLearner(CLMicroLocationLearner::ILearnerDelegate &,ULDatabase &)::$_4,std::allocator<CLMicroLocationLearner::CLMicroLocationLearner(CLMicroLocationLearner::ILearnerDelegate &,ULDatabase &)::$_4>,void ()(std::function<BOOL ()(void)>)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_2511D6238;
  a2[1] = v2;
  return result;
}

_QWORD *std::__function::__func<CLMicroLocationLearner::CLMicroLocationLearner(CLMicroLocationLearner::ILearnerDelegate &,ULDatabase &)::$_4,std::allocator<CLMicroLocationLearner::CLMicroLocationLearner(CLMicroLocationLearner::ILearnerDelegate &,ULDatabase &)::$_4>,void ()(std::function<BOOL ()(void)>)>::operator()(uint64_t a1, uint64_t a2)
{
  ULDatabase **v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *result;
  uint64_t v8;
  _QWORD v9[3];
  _QWORD *v10;
  _BYTE v11[24];
  _BYTE *v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  std::__function::__value_func<BOOL ()(void)>::__value_func[abi:ne180100]((uint64_t)v9, a2);
  v3 = *(ULDatabase ***)(a1 + 8);
  v4 = (uint64_t)v10;
  if (!v10)
    goto LABEL_4;
  if (v10 != v9)
  {
    v4 = (*(uint64_t (**)(void))(*v10 + 16))();
LABEL_4:
    v12 = (_BYTE *)v4;
    goto LABEL_6;
  }
  v12 = v11;
  (*(void (**)(_QWORD *, _BYTE *))(v9[0] + 24))(v9, v11);
LABEL_6:
  CLMicroLocationLearner::learnFromModelType(v3, (uint64_t)v11, 2u);
  v5 = v12;
  if (v12 == v11)
  {
    v6 = 4;
    v5 = v11;
  }
  else
  {
    if (!v12)
      goto LABEL_11;
    v6 = 5;
  }
  (*(void (**)(void))(*v5 + 8 * v6))();
LABEL_11:
  result = v10;
  if (v10 == v9)
  {
    v8 = 4;
    result = v9;
  }
  else
  {
    if (!v10)
      return result;
    v8 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v8))();
}

void sub_241A8B9FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  char *v18;
  uint64_t v19;

  v18 = a13;
  if (a13 == &a10)
  {
    v19 = 4;
    v18 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v19 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v18 + 8 * v19))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<CLMicroLocationLearner::CLMicroLocationLearner(CLMicroLocationLearner::ILearnerDelegate &,ULDatabase &)::$_4,std::allocator<CLMicroLocationLearner::CLMicroLocationLearner(CLMicroLocationLearner::ILearnerDelegate &,ULDatabase &)::$_4>,void ()(std::function<BOOL ()(void)>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<CLMicroLocationLearner::CLMicroLocationLearner(CLMicroLocationLearner::ILearnerDelegate &,ULDatabase &)::$_4,std::allocator<CLMicroLocationLearner::CLMicroLocationLearner(CLMicroLocationLearner::ILearnerDelegate &,ULDatabase &)::$_4>,void ()(std::function<BOOL ()(void)>)>::target_type()
{
}

void std::__function::__func<CLMicroLocationLearner::CLMicroLocationLearner(CLMicroLocationLearner::ILearnerDelegate &,ULDatabase &)::$_5,std::allocator<CLMicroLocationLearner::CLMicroLocationLearner(CLMicroLocationLearner::ILearnerDelegate &,ULDatabase &)::$_5>,void ()(std::function<BOOL ()(void)>)>::~__func()
{
  JUMPOUT(0x2426A04D4);
}

_QWORD *std::__function::__func<CLMicroLocationLearner::CLMicroLocationLearner(CLMicroLocationLearner::ILearnerDelegate &,ULDatabase &)::$_5,std::allocator<CLMicroLocationLearner::CLMicroLocationLearner(CLMicroLocationLearner::ILearnerDelegate &,ULDatabase &)::$_5>,void ()(std::function<BOOL ()(void)>)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_2511D62B8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<CLMicroLocationLearner::CLMicroLocationLearner(CLMicroLocationLearner::ILearnerDelegate &,ULDatabase &)::$_5,std::allocator<CLMicroLocationLearner::CLMicroLocationLearner(CLMicroLocationLearner::ILearnerDelegate &,ULDatabase &)::$_5>,void ()(std::function<BOOL ()(void)>)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_2511D62B8;
  a2[1] = v2;
  return result;
}

_QWORD *std::__function::__func<CLMicroLocationLearner::CLMicroLocationLearner(CLMicroLocationLearner::ILearnerDelegate &,ULDatabase &)::$_5,std::allocator<CLMicroLocationLearner::CLMicroLocationLearner(CLMicroLocationLearner::ILearnerDelegate &,ULDatabase &)::$_5>,void ()(std::function<BOOL ()(void)>)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *result;
  uint64_t v8;
  _QWORD v9[3];
  _QWORD *v10;
  _BYTE v11[24];
  _BYTE *v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  std::__function::__value_func<BOOL ()(void)>::__value_func[abi:ne180100]((uint64_t)v9, a2);
  v3 = *(_QWORD *)(a1 + 8);
  v4 = (uint64_t)v10;
  if (!v10)
    goto LABEL_4;
  if (v10 != v9)
  {
    v4 = (*(uint64_t (**)(void))(*v10 + 16))();
LABEL_4:
    v12 = (_BYTE *)v4;
    goto LABEL_6;
  }
  v12 = v11;
  (*(void (**)(_QWORD *, _BYTE *))(v9[0] + 24))(v9, v11);
LABEL_6:
  CLMicroLocationLearner::learnBlueAtlasModelWorkItem(v3, (uint64_t)v11);
  v5 = v12;
  if (v12 == v11)
  {
    v6 = 4;
    v5 = v11;
  }
  else
  {
    if (!v12)
      goto LABEL_11;
    v6 = 5;
  }
  (*(void (**)(void))(*v5 + 8 * v6))();
LABEL_11:
  result = v10;
  if (v10 == v9)
  {
    v8 = 4;
    result = v9;
  }
  else
  {
    if (!v10)
      return result;
    v8 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v8))();
}

void sub_241A8BC28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  char *v18;
  uint64_t v19;

  v18 = a13;
  if (a13 == &a10)
  {
    v19 = 4;
    v18 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v19 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v18 + 8 * v19))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<CLMicroLocationLearner::CLMicroLocationLearner(CLMicroLocationLearner::ILearnerDelegate &,ULDatabase &)::$_5,std::allocator<CLMicroLocationLearner::CLMicroLocationLearner(CLMicroLocationLearner::ILearnerDelegate &,ULDatabase &)::$_5>,void ()(std::function<BOOL ()(void)>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<CLMicroLocationLearner::CLMicroLocationLearner(CLMicroLocationLearner::ILearnerDelegate &,ULDatabase &)::$_5,std::allocator<CLMicroLocationLearner::CLMicroLocationLearner(CLMicroLocationLearner::ILearnerDelegate &,ULDatabase &)::$_5>,void ()(std::function<BOOL ()(void)>)>::target_type()
{
}

void std::__function::__func<CLMicroLocationLearner::CLMicroLocationLearner(CLMicroLocationLearner::ILearnerDelegate &,ULDatabase &)::$_6,std::allocator<CLMicroLocationLearner::CLMicroLocationLearner(CLMicroLocationLearner::ILearnerDelegate &,ULDatabase &)::$_6>,void ()(std::function<BOOL ()(void)>)>::~__func()
{
  JUMPOUT(0x2426A04D4);
}

_QWORD *std::__function::__func<CLMicroLocationLearner::CLMicroLocationLearner(CLMicroLocationLearner::ILearnerDelegate &,ULDatabase &)::$_6,std::allocator<CLMicroLocationLearner::CLMicroLocationLearner(CLMicroLocationLearner::ILearnerDelegate &,ULDatabase &)::$_6>,void ()(std::function<BOOL ()(void)>)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_2511D6338;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<CLMicroLocationLearner::CLMicroLocationLearner(CLMicroLocationLearner::ILearnerDelegate &,ULDatabase &)::$_6,std::allocator<CLMicroLocationLearner::CLMicroLocationLearner(CLMicroLocationLearner::ILearnerDelegate &,ULDatabase &)::$_6>,void ()(std::function<BOOL ()(void)>)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_2511D6338;
  a2[1] = v2;
  return result;
}

_QWORD *std::__function::__func<CLMicroLocationLearner::CLMicroLocationLearner(CLMicroLocationLearner::ILearnerDelegate &,ULDatabase &)::$_6,std::allocator<CLMicroLocationLearner::CLMicroLocationLearner(CLMicroLocationLearner::ILearnerDelegate &,ULDatabase &)::$_6>,void ()(std::function<BOOL ()(void)>)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *result;
  uint64_t v8;
  _QWORD v9[3];
  _QWORD *v10;
  _BYTE v11[24];
  _BYTE *v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  std::__function::__value_func<BOOL ()(void)>::__value_func[abi:ne180100]((uint64_t)v9, a2);
  v3 = *(_QWORD *)(a1 + 8);
  v4 = (uint64_t)v10;
  if (!v10)
    goto LABEL_4;
  if (v10 != v9)
  {
    v4 = (*(uint64_t (**)(void))(*v10 + 16))();
LABEL_4:
    v12 = (_BYTE *)v4;
    goto LABEL_6;
  }
  v12 = v11;
  (*(void (**)(_QWORD *, _BYTE *))(v9[0] + 24))(v9, v11);
LABEL_6:
  CLMicroLocationLearner::onLearningCompleted(v3, (uint64_t)v11);
  v5 = v12;
  if (v12 == v11)
  {
    v6 = 4;
    v5 = v11;
  }
  else
  {
    if (!v12)
      goto LABEL_11;
    v6 = 5;
  }
  (*(void (**)(void))(*v5 + 8 * v6))();
LABEL_11:
  result = v10;
  if (v10 == v9)
  {
    v8 = 4;
    result = v9;
  }
  else
  {
    if (!v10)
      return result;
    v8 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v8))();
}

void sub_241A8BE54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  char *v18;
  uint64_t v19;

  v18 = a13;
  if (a13 == &a10)
  {
    v19 = 4;
    v18 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v19 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v18 + 8 * v19))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<CLMicroLocationLearner::CLMicroLocationLearner(CLMicroLocationLearner::ILearnerDelegate &,ULDatabase &)::$_6,std::allocator<CLMicroLocationLearner::CLMicroLocationLearner(CLMicroLocationLearner::ILearnerDelegate &,ULDatabase &)::$_6>,void ()(std::function<BOOL ()(void)>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<CLMicroLocationLearner::CLMicroLocationLearner(CLMicroLocationLearner::ILearnerDelegate &,ULDatabase &)::$_6,std::allocator<CLMicroLocationLearner::CLMicroLocationLearner(CLMicroLocationLearner::ILearnerDelegate &,ULDatabase &)::$_6>,void ()(std::function<BOOL ()(void)>)>::target_type()
{
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::function<void ()(std::function<BOOL ()(void)>)>>,std::function<void ()(std::function<BOOL ()(void)>)> const*,std::function<void ()(std::function<BOOL ()(void)>)> const*,std::function<void ()(std::function<BOOL ()(void)>)>*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  _QWORD v8[3];
  char v9;
  uint64_t v10;
  uint64_t v11;

  v4 = a4;
  v10 = a4;
  v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  v9 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      std::__function::__value_func<double ()(CLMicroLocationFingerprint const&,CLMicroLocationFingerprint const&)>::__value_func[abi:ne180100](v4, v6);
      v6 += 32;
      v4 = v11 + 32;
      v11 += 32;
    }
    while (v6 != a3);
  }
  v9 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::function<void ()(std::function<BOOL ()(void)>)>>,std::function<void ()(std::function<BOOL ()(void)>)>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v4;
}

void sub_241A8BF98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::function<void ()(std::function<BOOL ()(void)>)>>,std::function<void ()(std::function<BOOL ()(void)>)>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::function<void ()(std::function<BOOL ()(void)>)>>,std::function<void ()(std::function<BOOL ()(void)>)>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::function<void ()(std::function<BOOL ()(void)>)>>,std::function<void ()(std::function<BOOL ()(void)>)>*>::operator()[abi:ne180100](a1);
  return a1;
}

uint64_t std::_AllocatorDestroyRangeReverse<std::allocator<std::function<void ()(std::function<BOOL ()(void)>)>>,std::function<void ()(std::function<BOOL ()(void)>)>*>::operator()[abi:ne180100](uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = **(_QWORD **)(result + 16);
  v2 = **(_QWORD **)(result + 8);
  if (v1 != v2)
  {
    while (1)
    {
      v3 = v1 - 32;
      result = *(_QWORD *)(v1 - 8);
      if (v1 - 32 == result)
        break;
      if (result)
      {
        v4 = 5;
LABEL_6:
        result = (*(uint64_t (**)(void))(*(_QWORD *)result + 8 * v4))();
      }
      v1 = v3;
      if (v3 == v2)
        return result;
    }
    result = v1 - 32;
    v4 = 4;
    goto LABEL_6;
  }
  return result;
}

void std::vector<std::function<void ()(std::function<BOOL ()(void)>)>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  char *v6;
  char *v7;
  uint64_t v8;

  v1 = *a1;
  v2 = (char *)**a1;
  if (!v2)
    return;
  v4 = (char *)v1[1];
  v5 = **a1;
  if (v4 == v2)
    goto LABEL_10;
  do
  {
    v6 = v4 - 32;
    v7 = (char *)*((_QWORD *)v4 - 1);
    if (v4 - 32 == v7)
    {
      v7 = v4 - 32;
      v8 = 4;
    }
    else
    {
      if (!v7)
        goto LABEL_8;
      v8 = 5;
    }
    (*(void (**)(void))(*(_QWORD *)v7 + 8 * v8))();
LABEL_8:
    v4 = v6;
  }
  while (v6 != v2);
  v5 = **a1;
LABEL_10:
  v1[1] = v2;
  operator delete(v5);
}

void std::vector<CLMicroLocationRecordingEventsTable::Entry>::__vdeallocate(void **a1)
{
  void *v1;
  uint64_t v3;
  void *v4;

  v1 = *a1;
  if (*a1)
  {
    v3 = (uint64_t)a1[1];
    v4 = *a1;
    if ((void *)v3 != v1)
    {
      do
      {
        v3 -= 248;
        std::allocator<CLMicroLocationRecordingEventsTable::Entry>::destroy[abi:ne180100]((uint64_t)(a1 + 2), v3);
      }
      while ((void *)v3 != v1);
      v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

__int128 *std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<CLMiLoLoiTable::Entry *,CLMiLoLoiTable::Entry *,CLMiLoLoiTable::Entry *>(uint64_t a1, __int128 *a2, __int128 *a3, uint64_t a4)
{
  __int128 *v5;
  __int128 v7;
  __int128 v8;
  void **v9;
  __int128 v10;

  v5 = a2;
  if (a2 != a3)
  {
    do
    {
      v7 = *v5;
      v8 = v5[1];
      *(_QWORD *)(a4 + 32) = *((_QWORD *)v5 + 4);
      *(_OWORD *)a4 = v7;
      *(_OWORD *)(a4 + 16) = v8;
      v9 = (void **)(a4 + 40);
      if (*(char *)(a4 + 63) < 0)
        operator delete(*v9);
      v10 = *(__int128 *)((char *)v5 + 40);
      *(_QWORD *)(a4 + 56) = *((_QWORD *)v5 + 7);
      *(_OWORD *)v9 = v10;
      *((_BYTE *)v5 + 63) = 0;
      *((_BYTE *)v5 + 40) = 0;
      a4 += 64;
      v5 += 4;
    }
    while (v5 != a3);
    return a3;
  }
  return v5;
}

void std::__introsort<std::_ClassicAlgPolicy,CLMicroLocationLearner::fetchAndFilterUniqueLOIGroups(void)::$_1 &,CLMiLoLoiTable::Entry *,false>(uint64_t a1, __n128 *a2, uint64_t a3, char a4)
{
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char v13;
  __int128 v14;
  __n128 v15;
  uint64_t v16;
  double v17;
  uint64_t v18;
  void **v19;
  uint64_t v20;
  char v21;
  double v22;
  unint64_t v23;
  __n128 *v24;
  double v25;
  double v26;
  unint64_t v27;
  uint64_t v28;
  char v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  double v33;
  double v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  int v38;
  BOOL v39;
  void **v40;
  uint64_t v41;
  char v42;
  double v43;
  unint64_t v44;
  __n128 *v45;
  double v46;
  unint64_t v47;
  unsigned __int8 v48;
  __n128 v49;
  __n128 v50;
  __int128 v51;
  double v52;
  double v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  int v57;
  __n128 *v58;
  unint64_t v59;
  unsigned __int8 v60;
  __n128 v61;
  __n128 v62;
  __int128 v63;
  __n128 *v64;
  BOOL v66;
  uint64_t v67;
  unint64_t v68;
  __n128 *v69;
  double v70;
  uint64_t v71;
  char v72;
  uint64_t v73;
  unsigned __int8 v74;
  uint64_t v75;
  uint64_t v76;
  __int128 v77;
  void **v78;
  uint64_t v79;
  int64_t v80;
  int64_t v81;
  int64_t v82;
  uint64_t v83;
  unint64_t v84;
  unint64_t v85;
  double v86;
  _QWORD *v87;
  uint64_t v88;
  char v89;
  unint64_t v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  __n128 *v98;
  unint64_t v99;
  unsigned __int8 v100;
  unint64_t v101;
  unint64_t v102;
  uint64_t v103;
  uint64_t v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __n128 v108;
  __n128 v109;
  __int128 v110;
  uint64_t v111;
  unint64_t v112;
  unint64_t v113;
  double v114;
  uint64_t v115;
  char v116;
  unint64_t v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  unint64_t v122;
  uint64_t v123;
  double v124;
  uint64_t v125;
  char v126;
  unint64_t v127;
  unsigned __int8 v128;
  void **v129;
  double v130;
  __n128 *v131;
  _BYTE v133[15];
  _BYTE v134[15];
  _BYTE v135[15];
  __int128 v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  _BYTE v140[15];
  _BYTE v141[15];
  __int128 v142;
  _BYTE v143[15];
  __int128 v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  __int128 v148;
  _BYTE v149[15];
  __n128 v150;
  __n128 v151;
  __n128 v152;
  __n128 v153;
  __int128 v154;
  __int128 v155;
  __n128 v156;
  __int128 v157;
  __int128 v158;
  __int128 v159;
  __n128 v160;
  __n128 v161;
  __int128 v162;
  __int128 v163;
  __n128 v164;
  __int128 v165;
  uint64_t v166;
  uint64_t v167;
  unint64_t v168;
  unint64_t v169;
  unint64_t v170;

void std::__sort5_maybe_branchless[abi:ne180100]<std::_ClassicAlgPolicy,CLMicroLocationLearner::fetchAndFilterUniqueLOIGroups(void)::$_1 &,CLMiLoLoiTable::Entry *,0>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, __int128 *a5)
{
  uint64_t v10;
  char v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  char v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  char v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  char v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;

  std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,CLMicroLocationLearner::fetchAndFilterUniqueLOIGroups(void)::$_1 &,CLMiLoLoiTable::Entry *>(a1, a2, a3, a4);
  if (*(double *)a4 < *(double *)a5)
  {
    v34 = *(_OWORD *)a4;
    v38 = *(_OWORD *)(a4 + 16);
    v10 = *(_QWORD *)(a4 + 40);
    v42 = *(_QWORD *)(a4 + 32);
    *(_QWORD *)&v30 = *(_QWORD *)(a4 + 48);
    *(_QWORD *)((char *)&v30 + 7) = *(_QWORD *)(a4 + 55);
    v11 = *(_BYTE *)(a4 + 63);
    *(_QWORD *)(a4 + 40) = 0;
    *(_QWORD *)(a4 + 56) = 0;
    *(_QWORD *)(a4 + 48) = 0;
    v12 = *a5;
    v13 = a5[1];
    *(_QWORD *)(a4 + 32) = *((_QWORD *)a5 + 4);
    *(_OWORD *)a4 = v12;
    *(_OWORD *)(a4 + 16) = v13;
    v14 = *(__int128 *)((char *)a5 + 40);
    *(_QWORD *)(a4 + 56) = *((_QWORD *)a5 + 7);
    *(_OWORD *)(a4 + 40) = v14;
    *a5 = v34;
    a5[1] = v38;
    *((_QWORD *)a5 + 4) = v42;
    *((_QWORD *)a5 + 5) = v10;
    *((_QWORD *)a5 + 6) = v30;
    *(_QWORD *)((char *)a5 + 55) = *(_QWORD *)((char *)&v30 + 7);
    *((_BYTE *)a5 + 63) = v11;
    if (*(double *)a3 < *(double *)a4)
    {
      v35 = *(_OWORD *)a3;
      v39 = *(_OWORD *)(a3 + 16);
      v15 = *(_QWORD *)(a3 + 40);
      v43 = *(_QWORD *)(a3 + 32);
      *(_QWORD *)&v31 = *(_QWORD *)(a3 + 48);
      *(_QWORD *)((char *)&v31 + 7) = *(_QWORD *)(a3 + 55);
      v16 = *(_BYTE *)(a3 + 63);
      *(_QWORD *)(a3 + 40) = 0;
      *(_QWORD *)(a3 + 56) = 0;
      *(_QWORD *)(a3 + 48) = 0;
      v17 = *(_OWORD *)a4;
      v18 = *(_OWORD *)(a4 + 16);
      *(_QWORD *)(a3 + 32) = *(_QWORD *)(a4 + 32);
      *(_OWORD *)a3 = v17;
      *(_OWORD *)(a3 + 16) = v18;
      v19 = *(_OWORD *)(a4 + 40);
      *(_QWORD *)(a3 + 56) = *(_QWORD *)(a4 + 56);
      *(_OWORD *)(a3 + 40) = v19;
      *(_OWORD *)a4 = v35;
      *(_OWORD *)(a4 + 16) = v39;
      *(_QWORD *)(a4 + 32) = v43;
      *(_QWORD *)(a4 + 40) = v15;
      *(_QWORD *)(a4 + 48) = v31;
      *(_QWORD *)(a4 + 55) = *(_QWORD *)((char *)&v31 + 7);
      *(_BYTE *)(a4 + 63) = v16;
      if (*(double *)a2 < *(double *)a3)
      {
        v36 = *(_OWORD *)a2;
        v40 = *(_OWORD *)(a2 + 16);
        v20 = *(_QWORD *)(a2 + 40);
        v44 = *(_QWORD *)(a2 + 32);
        *(_QWORD *)&v32 = *(_QWORD *)(a2 + 48);
        *(_QWORD *)((char *)&v32 + 7) = *(_QWORD *)(a2 + 55);
        v21 = *(_BYTE *)(a2 + 63);
        *(_QWORD *)(a2 + 40) = 0;
        *(_QWORD *)(a2 + 56) = 0;
        *(_QWORD *)(a2 + 48) = 0;
        v22 = *(_OWORD *)a3;
        v23 = *(_OWORD *)(a3 + 16);
        *(_QWORD *)(a2 + 32) = *(_QWORD *)(a3 + 32);
        *(_OWORD *)a2 = v22;
        *(_OWORD *)(a2 + 16) = v23;
        v24 = *(_OWORD *)(a3 + 40);
        *(_QWORD *)(a2 + 56) = *(_QWORD *)(a3 + 56);
        *(_OWORD *)(a2 + 40) = v24;
        *(_OWORD *)a3 = v36;
        *(_OWORD *)(a3 + 16) = v40;
        *(_QWORD *)(a3 + 32) = v44;
        *(_QWORD *)(a3 + 40) = v20;
        *(_QWORD *)(a3 + 48) = v32;
        *(_QWORD *)(a3 + 55) = *(_QWORD *)((char *)&v32 + 7);
        *(_BYTE *)(a3 + 63) = v21;
        if (*(double *)a1 < *(double *)a2)
        {
          v37 = *(_OWORD *)a1;
          v41 = *(_OWORD *)(a1 + 16);
          v25 = *(_QWORD *)(a1 + 40);
          v45 = *(_QWORD *)(a1 + 32);
          *(_QWORD *)&v33 = *(_QWORD *)(a1 + 48);
          *(_QWORD *)((char *)&v33 + 7) = *(_QWORD *)(a1 + 55);
          v26 = *(_BYTE *)(a1 + 63);
          *(_QWORD *)(a1 + 48) = 0;
          *(_QWORD *)(a1 + 56) = 0;
          *(_QWORD *)(a1 + 40) = 0;
          v27 = *(_OWORD *)a2;
          v28 = *(_OWORD *)(a2 + 16);
          *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
          *(_OWORD *)a1 = v27;
          *(_OWORD *)(a1 + 16) = v28;
          v29 = *(_OWORD *)(a2 + 40);
          *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
          *(_OWORD *)(a1 + 40) = v29;
          *(_OWORD *)a2 = v37;
          *(_OWORD *)(a2 + 16) = v41;
          *(_QWORD *)(a2 + 32) = v45;
          *(_QWORD *)(a2 + 40) = v25;
          *(_QWORD *)(a2 + 48) = v33;
          *(_QWORD *)(a2 + 55) = *(_QWORD *)((char *)&v33 + 7);
          *(_BYTE *)(a2 + 63) = v26;
        }
      }
    }
  }
}

__n128 std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,CLMicroLocationLearner::fetchAndFilterUniqueLOIGroups(void)::$_1 &,CLMiLoLoiTable::Entry *>(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result;
  double v4;
  _QWORD *v5;
  _QWORD *v6;
  unint64_t v7;
  unsigned __int8 v8;
  __n128 v9;
  __n128 v10;
  __int128 v11;
  uint64_t v12;
  char v13;
  __n128 v14;
  __n128 v15;
  __n128 v16;
  unint64_t v17;
  unsigned __int8 v18;
  __n128 v19;
  __n128 v20;
  __int128 v21;
  unint64_t v22;
  unsigned __int8 v23;
  __n128 v24;
  __n128 v25;
  __int128 v26;
  __n128 v27;
  __n128 v28;
  __n128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __n128 v35;
  __n128 v36;
  __n128 v37;
  __n128 v38;
  __n128 v39;
  __n128 v40;
  __n128 v41;
  __n128 v42;
  __n128 v43;
  __n128 v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;

  result.n128_u64[0] = a2->n128_u64[0];
  v4 = a3->n128_f64[0];
  if (*(double *)a1 >= a2->n128_f64[0])
  {
    if (result.n128_f64[0] < v4)
    {
      v36 = *a2;
      v41 = a2[1];
      v12 = a2[2].n128_i64[1];
      v46 = a2[2].n128_i64[0];
      *(_QWORD *)&v31 = a2[3].n128_u64[0];
      *(_QWORD *)((char *)&v31 + 7) = *(unint64_t *)((char *)a2[3].n128_u64 + 7);
      v13 = a2[3].n128_i8[15];
      a2[2].n128_u64[1] = 0;
      a2[3].n128_u64[1] = 0;
      a2[3].n128_u64[0] = 0;
      v14 = *a3;
      v15 = a3[1];
      a2[2].n128_u64[0] = a3[2].n128_u64[0];
      *a2 = v14;
      a2[1] = v15;
      v16 = *(__n128 *)((char *)a3 + 40);
      a2[3].n128_u64[1] = a3[3].n128_u64[1];
      *(__n128 *)((char *)a2 + 40) = v16;
      result.n128_u64[1] = v36.n128_u64[1];
      *a3 = v36;
      a3[1] = v41;
      a3[2].n128_u64[0] = v46;
      a3[2].n128_u64[1] = v12;
      a3[3].n128_u64[0] = v31;
      *(unint64_t *)((char *)a3[3].n128_u64 + 7) = *(_QWORD *)((char *)&v31 + 7);
      a3[3].n128_u8[15] = v13;
      result.n128_u64[0] = *(_QWORD *)a1;
      if (*(double *)a1 < a2->n128_f64[0])
      {
        v37 = *(__n128 *)a1;
        v42 = *(__n128 *)(a1 + 16);
        v17 = *(_QWORD *)(a1 + 40);
        v47 = *(_QWORD *)(a1 + 32);
        *(_QWORD *)&v32 = *(_QWORD *)(a1 + 48);
        *(_QWORD *)((char *)&v32 + 7) = *(_QWORD *)(a1 + 55);
        v18 = *(_BYTE *)(a1 + 63);
        *(_QWORD *)(a1 + 48) = 0;
        *(_QWORD *)(a1 + 56) = 0;
        *(_QWORD *)(a1 + 40) = 0;
        v19 = *a2;
        v20 = a2[1];
        *(_QWORD *)(a1 + 32) = a2[2].n128_u64[0];
        *(__n128 *)a1 = v19;
        *(__n128 *)(a1 + 16) = v20;
        v21 = *(__int128 *)((char *)&a2[2] + 8);
        *(_QWORD *)(a1 + 56) = a2[3].n128_u64[1];
        *(_OWORD *)(a1 + 40) = v21;
        result = v37;
        *a2 = v37;
        a2[1] = v42;
        a2[2].n128_u64[0] = v47;
        a2[2].n128_u64[1] = v17;
        a2[3].n128_u64[0] = v32;
        *(unint64_t *)((char *)a2[3].n128_u64 + 7) = *(_QWORD *)((char *)&v32 + 7);
        a2[3].n128_u8[15] = v18;
      }
    }
  }
  else
  {
    v5 = (_QWORD *)(a1 + 40);
    v6 = (_QWORD *)(a1 + 48);
    if (result.n128_f64[0] >= v4)
    {
      v38 = *(__n128 *)a1;
      v43 = *(__n128 *)(a1 + 16);
      v22 = *(_QWORD *)(a1 + 40);
      v48 = *(_QWORD *)(a1 + 32);
      *(_QWORD *)&v33 = *v6;
      *(_QWORD *)((char *)&v33 + 7) = *(_QWORD *)(a1 + 55);
      v23 = *(_BYTE *)(a1 + 63);
      *(_QWORD *)(a1 + 48) = 0;
      *(_QWORD *)(a1 + 56) = 0;
      *v5 = 0;
      v24 = *a2;
      v25 = a2[1];
      *(_QWORD *)(a1 + 32) = a2[2].n128_u64[0];
      *(__n128 *)a1 = v24;
      *(__n128 *)(a1 + 16) = v25;
      v26 = *(__int128 *)((char *)&a2[2] + 8);
      *(_QWORD *)(a1 + 56) = a2[3].n128_u64[1];
      *(_OWORD *)v5 = v26;
      result.n128_u64[1] = v38.n128_u64[1];
      *a2 = v38;
      a2[1] = v43;
      a2[2].n128_u64[0] = v48;
      a2[2].n128_u64[1] = v22;
      a2[3].n128_u64[0] = v33;
      *(unint64_t *)((char *)a2[3].n128_u64 + 7) = *(_QWORD *)((char *)&v33 + 7);
      a2[3].n128_u8[15] = v23;
      result.n128_u64[0] = a2->n128_u64[0];
      if (a2->n128_f64[0] < a3->n128_f64[0])
      {
        v39 = *a2;
        v44 = a2[1];
        v49 = a2[2].n128_i64[0];
        *(_QWORD *)&v34 = a2[3].n128_u64[0];
        *(_QWORD *)((char *)&v34 + 7) = *(unint64_t *)((char *)a2[3].n128_u64 + 7);
        a2[3].n128_u64[0] = 0;
        a2[3].n128_u64[1] = 0;
        a2[2].n128_u64[1] = 0;
        v28 = *a3;
        v27 = a3[1];
        a2[2].n128_u64[0] = a3[2].n128_u64[0];
        *a2 = v28;
        a2[1] = v27;
        v29 = *(__n128 *)((char *)a3 + 40);
        a2[3].n128_u64[1] = a3[3].n128_u64[1];
        *(__n128 *)((char *)a2 + 40) = v29;
        result = v39;
        *a3 = v39;
        a3[1] = v44;
        a3[2].n128_u64[0] = v49;
        a3[2].n128_u64[1] = v22;
        a3[3].n128_u64[0] = v34;
        *(unint64_t *)((char *)a3[3].n128_u64 + 7) = *(_QWORD *)((char *)&v34 + 7);
        a3[3].n128_u8[15] = v23;
      }
    }
    else
    {
      v35 = *(__n128 *)a1;
      v40 = *(__n128 *)(a1 + 16);
      v7 = *(_QWORD *)(a1 + 40);
      v45 = *(_QWORD *)(a1 + 32);
      *(_QWORD *)&v30 = *v6;
      *(_QWORD *)((char *)&v30 + 7) = *(_QWORD *)(a1 + 55);
      v8 = *(_BYTE *)(a1 + 63);
      *(_QWORD *)(a1 + 48) = 0;
      *(_QWORD *)(a1 + 56) = 0;
      *v5 = 0;
      v9 = *a3;
      v10 = a3[1];
      *(_QWORD *)(a1 + 32) = a3[2].n128_u64[0];
      *(__n128 *)a1 = v9;
      *(__n128 *)(a1 + 16) = v10;
      v11 = *(__int128 *)((char *)&a3[2] + 8);
      *(_QWORD *)(a1 + 56) = a3[3].n128_u64[1];
      *(_OWORD *)v5 = v11;
      result = v35;
      *a3 = v35;
      a3[1] = v40;
      a3[2].n128_u64[0] = v45;
      a3[2].n128_u64[1] = v7;
      a3[3].n128_u64[0] = v30;
      *(unint64_t *)((char *)a3[3].n128_u64 + 7) = *(_QWORD *)((char *)&v30 + 7);
      a3[3].n128_u8[15] = v8;
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,CLMicroLocationLearner::fetchAndFilterUniqueLOIGroups(void)::$_1 &,CLMiLoLoiTable::Entry *>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _BOOL8 result;
  __int128 *v6;
  uint64_t v7;
  char v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  double *v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  double v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  __int128 v23;
  _BYTE v24[15];
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;

  v4 = (a2 - a1) >> 6;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = (__int128 *)(a2 - 64);
      if (*(double *)a1 < *(double *)(a2 - 64))
      {
        v25 = *(_OWORD *)a1;
        v27 = *(_OWORD *)(a1 + 16);
        v7 = *(_QWORD *)(a1 + 40);
        v29 = *(_QWORD *)(a1 + 32);
        *(_QWORD *)&v23 = *(_QWORD *)(a1 + 48);
        *(_QWORD *)((char *)&v23 + 7) = *(_QWORD *)(a1 + 55);
        v8 = *(_BYTE *)(a1 + 63);
        *(_QWORD *)(a1 + 48) = 0;
        *(_QWORD *)(a1 + 56) = 0;
        *(_QWORD *)(a1 + 40) = 0;
        v9 = *v6;
        v10 = *(_OWORD *)(a2 - 48);
        *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 - 32);
        *(_OWORD *)a1 = v9;
        *(_OWORD *)(a1 + 16) = v10;
        v11 = *(_OWORD *)(a2 - 24);
        *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 - 8);
        *(_OWORD *)(a1 + 40) = v11;
        *v6 = v25;
        *(_OWORD *)(a2 - 48) = v27;
        *(_QWORD *)(a2 - 32) = v29;
        *(_QWORD *)(a2 - 24) = v7;
        *(_QWORD *)(a2 - 16) = v23;
        *(_QWORD *)(a2 - 9) = *(_QWORD *)((char *)&v23 + 7);
        *(_BYTE *)(a2 - 1) = v8;
      }
      return result;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,CLMicroLocationLearner::fetchAndFilterUniqueLOIGroups(void)::$_1 &,CLMiLoLoiTable::Entry *>(a1, (__n128 *)(a1 + 64), (__n128 *)(a2 - 64));
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,CLMicroLocationLearner::fetchAndFilterUniqueLOIGroups(void)::$_1 &,CLMiLoLoiTable::Entry *>(a1, a1 + 64, a1 + 128, a2 - 64);
      return 1;
    case 5:
      std::__sort5_maybe_branchless[abi:ne180100]<std::_ClassicAlgPolicy,CLMicroLocationLearner::fetchAndFilterUniqueLOIGroups(void)::$_1 &,CLMiLoLoiTable::Entry *,0>(a1, a1 + 64, a1 + 128, a1 + 192, (__int128 *)(a2 - 64));
      return 1;
    default:
      v12 = (double *)(a1 + 128);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,CLMicroLocationLearner::fetchAndFilterUniqueLOIGroups(void)::$_1 &,CLMiLoLoiTable::Entry *>(a1, (__n128 *)(a1 + 64), (__n128 *)(a1 + 128));
      v13 = a1 + 192;
      if (a1 + 192 == a2)
        return 1;
      v14 = 0;
      v15 = 0;
      break;
  }
  while (1)
  {
    v16 = *(double *)v13;
    if (*v12 < *(double *)v13)
    {
      v26 = *(_OWORD *)(v13 + 8);
      v28 = *(_OWORD *)(v13 + 24);
      v17 = *(_QWORD *)(v13 + 40);
      *(_QWORD *)v24 = *(_QWORD *)(v13 + 48);
      *(_QWORD *)&v24[7] = *(_QWORD *)(v13 + 55);
      v18 = *(_BYTE *)(v13 + 63);
      *(_QWORD *)(v13 + 48) = 0;
      *(_QWORD *)(v13 + 56) = 0;
      v19 = v14;
      *(_QWORD *)(v13 + 40) = 0;
      while (1)
      {
        v20 = a1 + v19;
        v21 = *(_OWORD *)(a1 + v19 + 144);
        *(_OWORD *)(v20 + 192) = *(_OWORD *)(a1 + v19 + 128);
        *(_OWORD *)(v20 + 208) = v21;
        *(_QWORD *)(v20 + 224) = *(_QWORD *)(a1 + v19 + 160);
        *(_OWORD *)(v20 + 232) = *(_OWORD *)(a1 + v19 + 168);
        *(_QWORD *)(v20 + 248) = *(_QWORD *)(a1 + v19 + 184);
        *(_BYTE *)(v20 + 191) = 0;
        *(_BYTE *)(v20 + 168) = 0;
        if (v19 == -128)
          break;
        v19 -= 64;
        if (*(double *)(v20 + 64) >= v16)
        {
          v22 = a1 + v19 + 192;
          goto LABEL_12;
        }
      }
      v22 = a1;
LABEL_12:
      *(double *)v22 = v16;
      *(_OWORD *)(v22 + 8) = v26;
      *(_OWORD *)(v22 + 24) = v28;
      *(_QWORD *)(v20 + 168) = v17;
      *(_QWORD *)(v22 + 55) = *(_QWORD *)&v24[7];
      *(_QWORD *)(v22 + 48) = *(_QWORD *)v24;
      ++v15;
      *(_BYTE *)(v22 + 63) = v18;
      if (v15 == 8)
        return v13 + 64 == a2;
    }
    v12 = (double *)v13;
    v14 += 64;
    v13 += 64;
    if (v13 == a2)
      return 1;
  }
}

__n128 std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,CLMicroLocationLearner::fetchAndFilterUniqueLOIGroups(void)::$_1 &,CLMiLoLoiTable::Entry *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __n128 result;
  uint64_t v9;
  char v10;
  __n128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  char v15;
  __n128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  char v20;
  __n128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __n128 v27;
  __n128 v28;
  __n128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,CLMicroLocationLearner::fetchAndFilterUniqueLOIGroups(void)::$_1 &,CLMiLoLoiTable::Entry *>(a1, (__n128 *)a2, (__n128 *)a3);
  result.n128_u64[0] = *(_QWORD *)a3;
  if (*(double *)a3 < *(double *)a4)
  {
    v27 = *(__n128 *)a3;
    v30 = *(_OWORD *)(a3 + 16);
    v9 = *(_QWORD *)(a3 + 40);
    v33 = *(_QWORD *)(a3 + 32);
    *(_QWORD *)&v24 = *(_QWORD *)(a3 + 48);
    *(_QWORD *)((char *)&v24 + 7) = *(_QWORD *)(a3 + 55);
    v10 = *(_BYTE *)(a3 + 63);
    *(_QWORD *)(a3 + 40) = 0;
    *(_QWORD *)(a3 + 56) = 0;
    *(_QWORD *)(a3 + 48) = 0;
    v11 = *(__n128 *)a4;
    v12 = *(_OWORD *)(a4 + 16);
    *(_QWORD *)(a3 + 32) = *(_QWORD *)(a4 + 32);
    *(__n128 *)a3 = v11;
    *(_OWORD *)(a3 + 16) = v12;
    v13 = *(_OWORD *)(a4 + 40);
    *(_QWORD *)(a3 + 56) = *(_QWORD *)(a4 + 56);
    *(_OWORD *)(a3 + 40) = v13;
    result.n128_u64[1] = v27.n128_u64[1];
    *(__n128 *)a4 = v27;
    *(_OWORD *)(a4 + 16) = v30;
    *(_QWORD *)(a4 + 32) = v33;
    *(_QWORD *)(a4 + 40) = v9;
    *(_QWORD *)(a4 + 48) = v24;
    *(_QWORD *)(a4 + 55) = *(_QWORD *)((char *)&v24 + 7);
    *(_BYTE *)(a4 + 63) = v10;
    result.n128_u64[0] = *(_QWORD *)a2;
    if (*(double *)a2 < *(double *)a3)
    {
      v28 = *(__n128 *)a2;
      v31 = *(_OWORD *)(a2 + 16);
      v14 = *(_QWORD *)(a2 + 40);
      v34 = *(_QWORD *)(a2 + 32);
      *(_QWORD *)&v25 = *(_QWORD *)(a2 + 48);
      *(_QWORD *)((char *)&v25 + 7) = *(_QWORD *)(a2 + 55);
      v15 = *(_BYTE *)(a2 + 63);
      *(_QWORD *)(a2 + 40) = 0;
      *(_QWORD *)(a2 + 56) = 0;
      *(_QWORD *)(a2 + 48) = 0;
      v16 = *(__n128 *)a3;
      v17 = *(_OWORD *)(a3 + 16);
      *(_QWORD *)(a2 + 32) = *(_QWORD *)(a3 + 32);
      *(__n128 *)a2 = v16;
      *(_OWORD *)(a2 + 16) = v17;
      v18 = *(_OWORD *)(a3 + 40);
      *(_QWORD *)(a2 + 56) = *(_QWORD *)(a3 + 56);
      *(_OWORD *)(a2 + 40) = v18;
      result.n128_u64[1] = v28.n128_u64[1];
      *(__n128 *)a3 = v28;
      *(_OWORD *)(a3 + 16) = v31;
      *(_QWORD *)(a3 + 32) = v34;
      *(_QWORD *)(a3 + 40) = v14;
      *(_QWORD *)(a3 + 48) = v25;
      *(_QWORD *)(a3 + 55) = *(_QWORD *)((char *)&v25 + 7);
      *(_BYTE *)(a3 + 63) = v15;
      result.n128_u64[0] = *(_QWORD *)a1;
      if (*(double *)a1 < *(double *)a2)
      {
        v29 = *(__n128 *)a1;
        v32 = *(_OWORD *)(a1 + 16);
        v19 = *(_QWORD *)(a1 + 40);
        v35 = *(_QWORD *)(a1 + 32);
        *(_QWORD *)&v26 = *(_QWORD *)(a1 + 48);
        *(_QWORD *)((char *)&v26 + 7) = *(_QWORD *)(a1 + 55);
        v20 = *(_BYTE *)(a1 + 63);
        *(_QWORD *)(a1 + 48) = 0;
        *(_QWORD *)(a1 + 56) = 0;
        *(_QWORD *)(a1 + 40) = 0;
        v21 = *(__n128 *)a2;
        v22 = *(_OWORD *)(a2 + 16);
        *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
        *(__n128 *)a1 = v21;
        *(_OWORD *)(a1 + 16) = v22;
        v23 = *(_OWORD *)(a2 + 40);
        *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
        *(_OWORD *)(a1 + 40) = v23;
        result = v29;
        *(__n128 *)a2 = v29;
        *(_OWORD *)(a2 + 16) = v32;
        *(_QWORD *)(a2 + 32) = v35;
        *(_QWORD *)(a2 + 40) = v19;
        *(_QWORD *)(a2 + 48) = v26;
        *(_QWORD *)(a2 + 55) = *(_QWORD *)((char *)&v26 + 7);
        *(_BYTE *)(a2 + 63) = v20;
      }
    }
  }
  return result;
}

void std::__tree<std::string>::destroy(uint64_t a1, char *a2)
{
  if (a2)
  {
    std::__tree<std::string>::destroy(a1, *(_QWORD *)a2);
    std::__tree<std::string>::destroy(a1, *((_QWORD *)a2 + 1));
    if (a2[55] < 0)
      operator delete(*((void **)a2 + 4));
    operator delete(a2);
  }
}

uint64_t *std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>(uint64_t **a1, const void **a2, uint64_t a3)
{
  uint64_t **v5;
  uint64_t *result;
  uint64_t *v7;
  uint64_t v8;

  v5 = (uint64_t **)std::__tree<std::__value_type<std::string,CLSqliteDatabaseManager::ConnectionState>,std::__map_value_compare<std::string,std::__value_type<std::string,CLSqliteDatabaseManager::ConnectionState>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CLSqliteDatabaseManager::ConnectionState>>>::__find_equal<std::string>((uint64_t)a1, &v8, a2);
  result = *v5;
  if (!*v5)
  {
    std::__tree<std::string>::__construct_node<std::string const&>((uint64_t)a1, a3, (uint64_t)&v7);
    std::__tree<CLMicroLocationRecordingCompletionMetaInformation::RecordingError>::__insert_node_at(a1, v8, v5, v7);
    return v7;
  }
  return result;
}

void std::__tree<std::string>::__construct_node<std::string const&>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  char *v6;
  std::string *v7;

  v5 = a1 + 8;
  v6 = (char *)operator new(0x38uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  v7 = (std::string *)(v6 + 32);
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
    v7->__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 16);
  }
  *(_BYTE *)(a3 + 16) = 1;
}

void sub_241A8D964(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;
  uint64_t v3;

  *v1 = 0;
  std::__tree_node_destructor<std::allocator<std::__tree_node<std::string,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

void std::__tree_node_destructor<std::allocator<std::__tree_node<std::string,void *>>>::operator()[abi:ne180100](uint64_t a1, void **__p)
{
  if (*(_BYTE *)(a1 + 8))
  {
    if (*((char *)__p + 55) < 0)
      operator delete(__p[4]);
  }
  else if (!__p)
  {
    return;
  }
  operator delete(__p);
}

_QWORD *std::vector<CLMicroLocationProto::EventType>::__init_with_size[abi:ne180100]<CLMicroLocationProto::EventType*,CLMicroLocationProto::EventType*>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<CLMicroLocationProto::ConfidenceLevel>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_241A8DA28(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<CLMicroLocationClientUtils::ClientIdentitiesAndLocationTypes>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    std::vector<CLMicroLocationClientUtils::ClientIdentitiesAndLocationTypes>::__clear[abi:ne180100]((uint64_t *)v2);
    operator delete(**a1);
  }
}

void std::vector<CLMicroLocationClientUtils::ClientIdentitiesAndLocationTypes>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;
  uint64_t i;

  v2 = *a1;
  for (i = a1[1]; i != v2; i -= 48)
  {
    if (*(char *)(i - 25) < 0)
      operator delete(*(void **)(i - 48));
  }
  a1[1] = v2;
}

_QWORD *std::__hash_table<boost::uuids::uuid,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,std::allocator<boost::uuids::uuid>>::__emplace_unique_key_args<boost::uuids::uuid,boost::uuids::uuid>(uint64_t a1, _QWORD *a2, _OWORD *a3)
{
  unint64_t v3;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  _QWORD **v10;
  _QWORD *i;
  unint64_t v12;
  float v14;
  float v15;
  _BOOL8 v16;
  unint64_t v17;
  unint64_t v18;
  size_t v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t v22;

  v6 = 0;
  v7 = 0;
  do
    v7 ^= (v7 << 6) + (v7 >> 2) + 2654435769u + *((unsigned __int8 *)a2 + v6++);
  while (v6 != 16);
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v3 = v7;
      if (v7 >= v8)
        v3 = v7 % v8;
    }
    else
    {
      v3 = (v8 - 1) & v7;
    }
    v10 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v3);
    if (v10)
    {
      for (i = *v10; i; i = (_QWORD *)*i)
      {
        v12 = i[1];
        if (v12 == v7)
        {
          if (i[2] == *a2 && i[3] == a2[1])
            return i;
        }
        else
        {
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= v8)
              v12 %= v8;
          }
          else
          {
            v12 &= v8 - 1;
          }
          if (v12 != v3)
            break;
        }
      }
    }
  }
  i = operator new(0x20uLL);
  *i = 0;
  i[1] = v7;
  *((_OWORD *)i + 1) = *a3;
  v14 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v15 = *(float *)(a1 + 32);
  if (!v8 || (float)(v15 * (float)v8) < v14)
  {
    v16 = 1;
    if (v8 >= 3)
      v16 = (v8 & (v8 - 1)) != 0;
    v17 = v16 | (2 * v8);
    v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18)
      v19 = v18;
    else
      v19 = v17;
    std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>>>::__rehash<true>(a1, v19);
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8)
        v3 = v7 % v8;
      else
        v3 = v7;
    }
    else
    {
      v3 = (v8 - 1) & v7;
    }
  }
  v20 = *(_QWORD *)a1;
  v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v21)
  {
    *i = *v21;
LABEL_44:
    *v21 = i;
    goto LABEL_45;
  }
  *i = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = i;
  *(_QWORD *)(v20 + 8 * v3) = a1 + 16;
  if (*i)
  {
    v22 = *(_QWORD *)(*i + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v22 >= v8)
        v22 %= v8;
    }
    else
    {
      v22 &= v8 - 1;
    }
    v21 = (_QWORD *)(*(_QWORD *)a1 + 8 * v22);
    goto LABEL_44;
  }
LABEL_45:
  ++*(_QWORD *)(a1 + 24);
  return i;
}

void sub_241A8DD0C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

__int128 *std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<CLMicroLocationRecordingEventsTable::Entry *,CLMicroLocationRecordingEventsTable::Entry *,CLMicroLocationRecordingEventsTable::Entry *>(uint64_t a1, __int128 *a2, __int128 *a3, uint64_t a4)
{
  __int128 *v5;
  __int128 v7;
  void **v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;

  v5 = a2;
  if (a2 != a3)
  {
    do
    {
      v7 = *v5;
      *(_QWORD *)(a4 + 16) = *((_QWORD *)v5 + 2);
      *(_OWORD *)a4 = v7;
      v8 = (void **)(a4 + 24);
      if (*(char *)(a4 + 47) < 0)
        operator delete(*v8);
      v9 = *(__int128 *)((char *)v5 + 24);
      *(_QWORD *)(a4 + 40) = *((_QWORD *)v5 + 5);
      *(_OWORD *)v8 = v9;
      *((_BYTE *)v5 + 47) = 0;
      *((_BYTE *)v5 + 24) = 0;
      v10 = v5[3];
      *(_OWORD *)(a4 + 60) = *(__int128 *)((char *)v5 + 60);
      *(_OWORD *)(a4 + 48) = v10;
      CLMicroLocationProto::RecordingEvent::CopyFrom((CLMicroLocationProto::RecordingEvent *)(a4 + 80), (const CLMicroLocationProto::RecordingEvent *)(v5 + 5));
      v11 = v5[14];
      *(_BYTE *)(a4 + 240) = *((_BYTE *)v5 + 240);
      *(_OWORD *)(a4 + 224) = v11;
      a4 += 248;
      v5 = (__int128 *)((char *)v5 + 248);
    }
    while (v5 != a3);
    return a3;
  }
  return v5;
}

void std::__introsort<std::_ClassicAlgPolicy,CLMicroLocationLearner::semiSupervisedLearnWrapper(CLMicroLocationClientUtils::ClientIdAndClientServiceId const&,std::vector<CLMicroLocationProto::EventType> const&,CLMicroLocationProto::Model_GenerationAlgorithm,NSMutableDictionary *,std::function<BOOL ()(void)>,CLMicroLocationFingerprintPool &,std::string const&,boost::uuids::uuid const&)::$_2 &,CLMicroLocationRecordingEventsTable::Entry *,false>(unint64_t *a1, unint64_t *a2, uint64_t a3, char a4)
{
  __int128 *v6;
  unint64_t *v7;
  unint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  __int128 v15;
  unint64_t v16;
  __int128 v17;
  __int128 v18;
  unint64_t v19;
  unint64_t v20;
  int v21;
  int v22;
  __int128 v23;
  unint64_t v24;
  __int128 v25;
  uint64_t v26;
  void **v27;
  __int128 v28;
  unint64_t v29;
  unint64_t v30;
  int v31;
  unint64_t *v32;
  __int128 *v33;
  __int128 *v34;
  unint64_t v35;
  unint64_t v36;
  int v37;
  unint64_t *v38;
  unint64_t v39;
  unint64_t v40;
  int v41;
  __int128 *v42;
  unint64_t *v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  int v47;
  __int128 *v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  int v52;
  unint64_t *v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  void **v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  BOOL v63;
  BOOL v64;
  unint64_t *v65;
  unint64_t v66;
  unint64_t v67;
  int v68;
  unint64_t *v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  int v73;
  __int128 *v74;
  __int128 *v75;
  unint64_t v76;
  unint64_t v77;
  unint64_t v78;
  int v79;
  unint64_t *v80;
  unint64_t v81;
  unint64_t v82;
  unint64_t v83;
  int v84;
  __int128 *v85;
  unint64_t v86;
  unint64_t v87;
  unint64_t v88;
  int v89;
  unint64_t *v90;
  void **v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  void **v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  unint64_t v101;
  unint64_t v102;
  unint64_t *v103;
  uint64_t v104;
  CLMicroLocationProto::RecordingEvent *v105;
  unint64_t *v106;
  unint64_t *v107;
  unint64_t v108;
  unint64_t v109;
  int v110;
  __int128 v111;
  const CLMicroLocationProto::RecordingEvent *v112;
  uint64_t v113;
  char *v114;
  void **v115;
  char *v116;
  unint64_t v117;
  unint64_t v118;
  int v119;
  uint64_t v120;
  __int128 v121;
  void **v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  int64_t v126;
  int64_t v127;
  int64_t v128;
  uint64_t v129;
  unint64_t *v130;
  unint64_t v131;
  unint64_t v132;
  int v133;
  unint64_t *v134;
  unint64_t v135;
  unint64_t v136;
  int v137;
  __int128 v138;
  unint64_t *v139;
  __int128 v140;
  __int128 v141;
  unint64_t *v142;
  __int128 v143;
  unint64_t *v144;
  __int128 v145;
  void **v146;
  __int128 v147;
  __int128 v148;
  __int128 v149;
  unint64_t v150;
  unint64_t v151;
  int v152;
  unint64_t v153;
  unint64_t v154;
  int v155;
  void **v156;
  __int128 v157;
  __int128 v158;
  __int128 v159;
  __int128 v160;
  int64_t v161;
  uint64_t v162;
  __int128 v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  unint64_t v167;
  unint64_t v168;
  int v169;
  __int128 v170;
  void **v171;
  __int128 v172;
  __int128 v173;
  __int128 v174;
  void **v175;
  __int128 *v176;
  __int128 v177;
  __int128 v178;
  __int128 v179;
  void **v180;
  __int128 v181;
  unint64_t *v182;
  unint64_t *v183;
  __int128 v184;
  uint64_t v185;
  unint64_t v186;
  unint64_t *v187;
  unint64_t v188;
  unint64_t v189;
  __int128 v190;
  int v191;
  __int128 v192;
  __int128 v193;
  __int128 v194;
  __int128 v195;
  uint64_t v196;
  __int128 v197;
  void **v198;
  __int128 v199;
  __int128 v200;
  __int128 v201;
  unint64_t v202;
  unint64_t v203;
  int v204;
  void **v205;
  __int128 v206;
  __int128 v207;
  __int128 v208;
  __int128 v209;
  int v211;
  unint64_t *v212;
  unint64_t *i;
  unint64_t *v214;
  unint64_t v215;
  unint64_t v216;
  unint64_t *v217;
  int v218;
  __int128 v219;
  unint64_t *v220;
  void **v221;
  unint64_t v222;
  unint64_t v223;
  int v224;
  __int128 v225;
  void **v226;
  __int128 v227;
  __int128 v228;
  __int128 v229;
  CLMicroLocationProto::RecordingEvent *v230;
  CLMicroLocationProto::RecordingEvent *v232;
  __int128 v234;
  unint64_t v235;
  __int128 v236;
  unint64_t v237;
  _BYTE v238[28];
  _BYTE v239[144];
  __int128 v240;
  char v241;
  __int128 v242;
  unint64_t v243;
  __int128 __p;
  unint64_t v245;
  _OWORD v246[2];
  _BYTE v247[144];
  __int128 v248;
  char v249;
  uint64_t v250;

  v250 = *MEMORY[0x24BDAC8D0];
LABEL_2:
  v6 = (__int128 *)a2;
  v7 = a2 - 31;
  v8 = a1;
  while (2)
  {
    a1 = v8;
    v9 = (char *)v6 - (char *)v8;
    v10 = 0xEF7BDEF7BDEF7BDFLL * (v9 >> 3);
    switch(v10)
    {
      case 0:
      case 1:
        return;
      case 2:
        v101 = bswap64(*(a2 - 31));
        v102 = bswap64(*a1);
        if (v101 != v102 || (v101 = bswap64(*(a2 - 30)), v102 = bswap64(a1[1]), v101 != v102))
        {
          if (v101 < v102)
            v211 = -1;
          else
            v211 = 1;
          if (v211 < 0)
            std::swap[abi:ne180100]<CLMicroLocationRecordingEventsTable::Entry>((__int128 *)a1, (__int128 *)(a2 - 31));
        }
        return;
      case 3:
        std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,CLMicroLocationLearner::semiSupervisedLearnWrapper(CLMicroLocationClientUtils::ClientIdAndClientServiceId const&,std::vector<CLMicroLocationProto::EventType> const&,CLMicroLocationProto::Model_GenerationAlgorithm,NSMutableDictionary *,std::function<BOOL ()(void)>,CLMicroLocationFingerprintPool &,std::string const&,boost::uuids::uuid const&)::$_2 &,CLMicroLocationRecordingEventsTable::Entry *>(a1, a1 + 31, v7);
        return;
      case 4:
        std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,CLMicroLocationLearner::semiSupervisedLearnWrapper(CLMicroLocationClientUtils::ClientIdAndClientServiceId const&,std::vector<CLMicroLocationProto::EventType> const&,CLMicroLocationProto::Model_GenerationAlgorithm,NSMutableDictionary *,std::function<BOOL ()(void)>,CLMicroLocationFingerprintPool &,std::string const&,boost::uuids::uuid const&)::$_2 &,CLMicroLocationRecordingEventsTable::Entry *>(a1, a1 + 31, a1 + 62, v7);
        return;
      case 5:
        std::__sort5_maybe_branchless[abi:ne180100]<std::_ClassicAlgPolicy,CLMicroLocationLearner::semiSupervisedLearnWrapper(CLMicroLocationClientUtils::ClientIdAndClientServiceId const&,std::vector<CLMicroLocationProto::EventType> const&,CLMicroLocationProto::Model_GenerationAlgorithm,NSMutableDictionary *,std::function<BOOL ()(void)>,CLMicroLocationFingerprintPool &,std::string const&,boost::uuids::uuid const&)::$_2 &,CLMicroLocationRecordingEventsTable::Entry *,0>(a1, a1 + 31, a1 + 62, a1 + 93, v7);
        return;
      default:
        if (v9 > 5951)
        {
          if (!a3)
          {
            if (a1 != (unint64_t *)v6)
            {
              v126 = (unint64_t)(v10 - 2) >> 1;
              v127 = v126;
              do
              {
                v128 = v127;
                if (v126 >= v127)
                {
                  v129 = (2 * v127) | 1;
                  v130 = &a1[31 * v129];
                  if (2 * v127 + 2 < v10)
                  {
                    v131 = bswap64(*v130);
                    v132 = bswap64(v130[31]);
                    if (v131 == v132 && (v131 = bswap64(v130[1]), v132 = bswap64(v130[32]), v131 == v132))
                      v133 = 0;
                    else
                      v133 = v131 < v132 ? -1 : 1;
                    if (v133 < 0)
                    {
                      v130 += 31;
                      v129 = 2 * v127 + 2;
                    }
                  }
                  v134 = &a1[31 * v127];
                  v135 = bswap64(*v130);
                  v136 = bswap64(*v134);
                  if (v135 == v136 && (v135 = bswap64(v130[1]), v136 = bswap64(v134[1]), v135 == v136)
                    || (v135 < v136 ? (v137 = -1) : (v137 = 1), (v137 & 0x80000000) == 0))
                  {
                    v138 = *(_OWORD *)v134;
                    v243 = v134[2];
                    v242 = v138;
                    v139 = &a1[31 * v128];
                    v140 = *(_OWORD *)(v139 + 3);
                    v245 = v139[5];
                    __p = v140;
                    v139[4] = 0;
                    v139[5] = 0;
                    v139[3] = 0;
                    v141 = *((_OWORD *)v139 + 3);
                    *(_OWORD *)((char *)v246 + 12) = *(_OWORD *)((char *)v139 + 60);
                    v246[0] = v141;
                    CLMicroLocationProto::RecordingEvent::RecordingEvent((CLMicroLocationProto::RecordingEvent *)v247, (const CLMicroLocationProto::RecordingEvent *)(v139 + 10));
                    v142 = &a1[31 * v128];
                    v143 = *((_OWORD *)v142 + 14);
                    v249 = *((_BYTE *)v142 + 240);
                    v248 = v143;
                    do
                    {
                      v144 = v130;
                      v145 = *(_OWORD *)v130;
                      v134[2] = v130[2];
                      *(_OWORD *)v134 = v145;
                      v146 = (void **)(v134 + 3);
                      if (*((char *)v134 + 47) < 0)
                        operator delete(*v146);
                      v147 = *(_OWORD *)(v144 + 3);
                      v134[5] = v144[5];
                      *(_OWORD *)v146 = v147;
                      *((_BYTE *)v144 + 47) = 0;
                      *((_BYTE *)v144 + 24) = 0;
                      v148 = *((_OWORD *)v144 + 3);
                      *(_OWORD *)((char *)v134 + 60) = *(_OWORD *)((char *)v144 + 60);
                      *((_OWORD *)v134 + 3) = v148;
                      CLMicroLocationProto::RecordingEvent::CopyFrom((CLMicroLocationProto::RecordingEvent *)(v134 + 10), (const CLMicroLocationProto::RecordingEvent *)(v144 + 10));
                      v149 = *((_OWORD *)v144 + 14);
                      *((_BYTE *)v134 + 240) = *((_BYTE *)v144 + 240);
                      *((_OWORD *)v134 + 14) = v149;
                      if (v126 < v129)
                        break;
                      v130 = &a1[31 * ((2 * v129) | 1)];
                      if (2 * v129 + 2 >= v10)
                      {
                        v129 = (2 * v129) | 1;
                      }
                      else
                      {
                        v150 = bswap64(*v130);
                        v151 = bswap64(v130[31]);
                        if (v150 == v151 && (v150 = bswap64(v130[1]), v151 = bswap64(v130[32]), v150 == v151))
                          v152 = 0;
                        else
                          v152 = v150 < v151 ? -1 : 1;
                        if (v152 >= 0)
                        {
                          v129 = (2 * v129) | 1;
                        }
                        else
                        {
                          v130 += 31;
                          v129 = 2 * v129 + 2;
                        }
                      }
                      v153 = bswap64(*v130);
                      v154 = bswap64(v242);
                      if (v153 == v154
                        && (v153 = bswap64(v130[1]), v154 = bswap64(*((unint64_t *)&v242 + 1)), v153 == v154))
                      {
                        v155 = 0;
                      }
                      else
                      {
                        v155 = v153 < v154 ? -1 : 1;
                      }
                      v134 = v144;
                    }
                    while ((v155 & 0x80000000) == 0);
                    v156 = (void **)(v144 + 3);
                    v157 = v242;
                    v144[2] = v243;
                    *(_OWORD *)v144 = v157;
                    if (*((char *)v144 + 47) < 0)
                      operator delete(*v156);
                    v158 = __p;
                    v144[5] = v245;
                    *(_OWORD *)v156 = v158;
                    HIBYTE(v245) = 0;
                    LOBYTE(__p) = 0;
                    v159 = *(_OWORD *)((char *)v246 + 12);
                    *((_OWORD *)v144 + 3) = v246[0];
                    *(_OWORD *)((char *)v144 + 60) = v159;
                    CLMicroLocationProto::RecordingEvent::CopyFrom((CLMicroLocationProto::RecordingEvent *)(v144 + 10), (const CLMicroLocationProto::RecordingEvent *)v247);
                    v160 = v248;
                    *((_BYTE *)v144 + 240) = v249;
                    *((_OWORD *)v144 + 14) = v160;
                    CLMicroLocationProto::RecordingEvent::~RecordingEvent((CLMicroLocationProto::RecordingEvent *)v247);
                    if (SHIBYTE(v245) < 0)
                      operator delete((void *)__p);
                  }
                }
                v127 = v128 - 1;
              }
              while (v128);
              v161 = v9 / 0xF8uLL;
              v230 = (CLMicroLocationProto::RecordingEvent *)(a1 + 3);
              do
              {
                v235 = a1[2];
                v234 = *(_OWORD *)a1;
                v236 = *(_OWORD *)v230;
                v237 = a1[5];
                a1[4] = 0;
                a1[5] = 0;
                *(_QWORD *)v230 = 0;
                *(_OWORD *)v238 = *((_OWORD *)a1 + 3);
                *(_OWORD *)&v238[12] = *(_OWORD *)((char *)a1 + 60);
                CLMicroLocationProto::RecordingEvent::RecordingEvent((CLMicroLocationProto::RecordingEvent *)v239, (const CLMicroLocationProto::RecordingEvent *)(a1 + 10));
                v162 = 0;
                v163 = *((_OWORD *)a1 + 14);
                v241 = *((_BYTE *)a1 + 240);
                v240 = v163;
                v164 = (uint64_t)a1;
                do
                {
                  v165 = v164 + 248 * v162 + 248;
                  v166 = 2 * v162;
                  v162 = (2 * v162) | 1;
                  if (v166 + 2 < v161)
                  {
                    v167 = bswap64(*(_QWORD *)v165);
                    v168 = bswap64(*(_QWORD *)(v165 + 248));
                    if (v167 == v168
                      && (v167 = bswap64(*(_QWORD *)(v165 + 8)), v168 = bswap64(*(_QWORD *)(v165 + 256)), v167 == v168))
                    {
                      v169 = 0;
                    }
                    else
                    {
                      v169 = v167 < v168 ? -1 : 1;
                    }
                    if (v169 < 0)
                    {
                      v165 += 248;
                      v162 = v166 + 2;
                    }
                  }
                  v170 = *(_OWORD *)v165;
                  *(_QWORD *)(v164 + 16) = *(_QWORD *)(v165 + 16);
                  *(_OWORD *)v164 = v170;
                  v171 = (void **)(v164 + 24);
                  if (*(char *)(v164 + 47) < 0)
                    operator delete(*v171);
                  v172 = *(_OWORD *)(v165 + 24);
                  *(_QWORD *)(v164 + 40) = *(_QWORD *)(v165 + 40);
                  *(_OWORD *)v171 = v172;
                  *(_BYTE *)(v165 + 47) = 0;
                  *(_BYTE *)(v165 + 24) = 0;
                  v173 = *(_OWORD *)(v165 + 48);
                  *(_OWORD *)(v164 + 60) = *(_OWORD *)(v165 + 60);
                  *(_OWORD *)(v164 + 48) = v173;
                  CLMicroLocationProto::RecordingEvent::CopyFrom((CLMicroLocationProto::RecordingEvent *)(v164 + 80), (const CLMicroLocationProto::RecordingEvent *)(v165 + 80));
                  v174 = *(_OWORD *)(v165 + 224);
                  *(_BYTE *)(v164 + 240) = *(_BYTE *)(v165 + 240);
                  *(_OWORD *)(v164 + 224) = v174;
                  v164 = v165;
                }
                while (v162 <= (uint64_t)((unint64_t)(v161 - 2) >> 1));
                v175 = (void **)(v165 + 24);
                v176 = (__int128 *)(v165 + 48);
                v232 = (CLMicroLocationProto::RecordingEvent *)(v165 + 224);
                if ((unint64_t *)v165 == a2 - 31)
                {
                  *(_QWORD *)(v165 + 16) = v235;
                  *(_OWORD *)v165 = v234;
                  if (*(char *)(v165 + 47) < 0)
                    operator delete(*v175);
                  *(_QWORD *)(v165 + 40) = v237;
                  *(_OWORD *)v175 = v236;
                  *(_OWORD *)(v165 + 60) = *(_OWORD *)&v238[12];
                  *v176 = *(_OWORD *)v238;
                  CLMicroLocationProto::RecordingEvent::CopyFrom((CLMicroLocationProto::RecordingEvent *)(v165 + 80), (const CLMicroLocationProto::RecordingEvent *)v239);
                  v190 = v240;
                  *(_BYTE *)(v165 + 240) = v241;
                  *(_OWORD *)v232 = v190;
                }
                else
                {
                  v177 = *(_OWORD *)(a2 - 31);
                  *(_QWORD *)(v165 + 16) = *(a2 - 29);
                  *(_OWORD *)v165 = v177;
                  if (*(char *)(v165 + 47) < 0)
                    operator delete(*v175);
                  v178 = *((_OWORD *)a2 - 14);
                  *(_QWORD *)(v165 + 40) = *(a2 - 26);
                  *(_OWORD *)v175 = v178;
                  *((_BYTE *)a2 - 201) = 0;
                  *((_BYTE *)a2 - 224) = 0;
                  v179 = *(_OWORD *)(a2 - 25);
                  *(_OWORD *)(v165 + 60) = *(_OWORD *)((char *)a2 - 188);
                  *v176 = v179;
                  CLMicroLocationProto::RecordingEvent::CopyFrom((CLMicroLocationProto::RecordingEvent *)(v165 + 80), (const CLMicroLocationProto::RecordingEvent *)(a2 - 21));
                  v180 = (void **)(a2 - 28);
                  v181 = *(_OWORD *)(a2 - 3);
                  *(_BYTE *)(v165 + 240) = *((_BYTE *)a2 - 8);
                  *(_OWORD *)v232 = v181;
                  *(a2 - 29) = v235;
                  *(_OWORD *)(a2 - 31) = v234;
                  if (*((char *)a2 - 201) < 0)
                    operator delete(*v180);
                  v182 = a2 - 25;
                  *(a2 - 26) = v237;
                  *(_OWORD *)v180 = v236;
                  *(_OWORD *)((char *)v182 + 12) = *(_OWORD *)&v238[12];
                  *(_OWORD *)v182 = *(_OWORD *)v238;
                  CLMicroLocationProto::RecordingEvent::CopyFrom((CLMicroLocationProto::RecordingEvent *)(a2 - 21), (const CLMicroLocationProto::RecordingEvent *)v239);
                  v183 = a2 - 3;
                  v184 = v240;
                  *((_BYTE *)v183 + 16) = v241;
                  *(_OWORD *)v183 = v184;
                  v185 = v165 - (_QWORD)a1 + 248;
                  if (v185 >= 249)
                  {
                    v186 = (v185 / 0xF8uLL - 2) >> 1;
                    v187 = &a1[31 * v186];
                    v188 = bswap64(*v187);
                    v189 = bswap64(*(_QWORD *)v165);
                    if (v188 != v189 || (v188 = bswap64(v187[1]), v189 = bswap64(*(_QWORD *)(v165 + 8)), v188 != v189))
                    {
                      v191 = v188 < v189 ? -1 : 1;
                      if (v191 < 0)
                      {
                        v192 = *(_OWORD *)v165;
                        v243 = *(_QWORD *)(v165 + 16);
                        v242 = v192;
                        v193 = *(_OWORD *)v175;
                        v245 = *(_QWORD *)(v165 + 40);
                        __p = v193;
                        *(_QWORD *)(v165 + 32) = 0;
                        *(_QWORD *)(v165 + 40) = 0;
                        *v175 = 0;
                        v194 = *v176;
                        *(_OWORD *)((char *)v246 + 12) = *(_OWORD *)(v165 + 60);
                        v246[0] = v194;
                        CLMicroLocationProto::RecordingEvent::RecordingEvent((CLMicroLocationProto::RecordingEvent *)v247, (const CLMicroLocationProto::RecordingEvent *)(v165 + 80));
                        v195 = *(_OWORD *)v232;
                        v249 = *(_BYTE *)(v165 + 240);
                        v248 = v195;
                        do
                        {
                          v196 = (uint64_t)v187;
                          v197 = *(_OWORD *)v187;
                          *(_QWORD *)(v165 + 16) = v187[2];
                          *(_OWORD *)v165 = v197;
                          v198 = (void **)(v165 + 24);
                          if (*(char *)(v165 + 47) < 0)
                            operator delete(*v198);
                          v199 = *(_OWORD *)(v187 + 3);
                          *(_QWORD *)(v165 + 40) = v187[5];
                          *(_OWORD *)v198 = v199;
                          *((_BYTE *)v187 + 47) = 0;
                          *((_BYTE *)v187 + 24) = 0;
                          v200 = *((_OWORD *)v187 + 3);
                          *(_OWORD *)(v165 + 60) = *(_OWORD *)((char *)v187 + 60);
                          *(_OWORD *)(v165 + 48) = v200;
                          CLMicroLocationProto::RecordingEvent::CopyFrom((CLMicroLocationProto::RecordingEvent *)(v165 + 80), (const CLMicroLocationProto::RecordingEvent *)(v187 + 10));
                          v201 = *((_OWORD *)v187 + 14);
                          *(_BYTE *)(v165 + 240) = *((_BYTE *)v187 + 240);
                          *(_OWORD *)(v165 + 224) = v201;
                          if (!v186)
                            break;
                          v186 = (v186 - 1) >> 1;
                          v187 = &a1[31 * v186];
                          v202 = bswap64(*v187);
                          v203 = bswap64(v242);
                          if (v202 == v203
                            && (v202 = bswap64(v187[1]), v203 = bswap64(*((unint64_t *)&v242 + 1)), v202 == v203))
                          {
                            v204 = 0;
                          }
                          else
                          {
                            v204 = v202 < v203 ? -1 : 1;
                          }
                          v165 = v196;
                        }
                        while (v204 < 0);
                        v205 = (void **)(v196 + 24);
                        v206 = v242;
                        *(_QWORD *)(v196 + 16) = v243;
                        *(_OWORD *)v196 = v206;
                        if (*(char *)(v196 + 47) < 0)
                          operator delete(*v205);
                        v207 = __p;
                        *(_QWORD *)(v196 + 40) = v245;
                        *(_OWORD *)v205 = v207;
                        HIBYTE(v245) = 0;
                        LOBYTE(__p) = 0;
                        v208 = *(_OWORD *)((char *)v246 + 12);
                        *(_OWORD *)(v196 + 48) = v246[0];
                        *(_OWORD *)(v196 + 60) = v208;
                        CLMicroLocationProto::RecordingEvent::CopyFrom((CLMicroLocationProto::RecordingEvent *)(v196 + 80), (const CLMicroLocationProto::RecordingEvent *)v247);
                        v209 = v248;
                        *(_BYTE *)(v196 + 240) = v249;
                        *(_OWORD *)(v196 + 224) = v209;
                        CLMicroLocationProto::RecordingEvent::~RecordingEvent((CLMicroLocationProto::RecordingEvent *)v247);
                        if (SHIBYTE(v245) < 0)
                          operator delete((void *)__p);
                      }
                    }
                  }
                }
                CLMicroLocationProto::RecordingEvent::~RecordingEvent((CLMicroLocationProto::RecordingEvent *)v239);
                a2 -= 31;
              }
              while (v161-- > 2);
            }
            return;
          }
          v11 = (unint64_t)v10 >> 1;
          v12 = &a1[31 * ((unint64_t)v10 >> 1)];
          if ((unint64_t)v9 < 0x7C01)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,CLMicroLocationLearner::semiSupervisedLearnWrapper(CLMicroLocationClientUtils::ClientIdAndClientServiceId const&,std::vector<CLMicroLocationProto::EventType> const&,CLMicroLocationProto::Model_GenerationAlgorithm,NSMutableDictionary *,std::function<BOOL ()(void)>,CLMicroLocationFingerprintPool &,std::string const&,boost::uuids::uuid const&)::$_2 &,CLMicroLocationRecordingEventsTable::Entry *>(v12, a1, v7);
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,CLMicroLocationLearner::semiSupervisedLearnWrapper(CLMicroLocationClientUtils::ClientIdAndClientServiceId const&,std::vector<CLMicroLocationProto::EventType> const&,CLMicroLocationProto::Model_GenerationAlgorithm,NSMutableDictionary *,std::function<BOOL ()(void)>,CLMicroLocationFingerprintPool &,std::string const&,boost::uuids::uuid const&)::$_2 &,CLMicroLocationRecordingEventsTable::Entry *>(a1, v12, v7);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,CLMicroLocationLearner::semiSupervisedLearnWrapper(CLMicroLocationClientUtils::ClientIdAndClientServiceId const&,std::vector<CLMicroLocationProto::EventType> const&,CLMicroLocationProto::Model_GenerationAlgorithm,NSMutableDictionary *,std::function<BOOL ()(void)>,CLMicroLocationFingerprintPool &,std::string const&,boost::uuids::uuid const&)::$_2 &,CLMicroLocationRecordingEventsTable::Entry *>(a1 + 31, &a1[31 * v11 - 31], a2 - 62);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,CLMicroLocationLearner::semiSupervisedLearnWrapper(CLMicroLocationClientUtils::ClientIdAndClientServiceId const&,std::vector<CLMicroLocationProto::EventType> const&,CLMicroLocationProto::Model_GenerationAlgorithm,NSMutableDictionary *,std::function<BOOL ()(void)>,CLMicroLocationFingerprintPool &,std::string const&,boost::uuids::uuid const&)::$_2 &,CLMicroLocationRecordingEventsTable::Entry *>(a1 + 62, &a1[31 * v11 + 31], a2 - 93);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,CLMicroLocationLearner::semiSupervisedLearnWrapper(CLMicroLocationClientUtils::ClientIdAndClientServiceId const&,std::vector<CLMicroLocationProto::EventType> const&,CLMicroLocationProto::Model_GenerationAlgorithm,NSMutableDictionary *,std::function<BOOL ()(void)>,CLMicroLocationFingerprintPool &,std::string const&,boost::uuids::uuid const&)::$_2 &,CLMicroLocationRecordingEventsTable::Entry *>(&a1[31 * v11 - 31], v12, &a1[31 * v11 + 31]);
            std::swap[abi:ne180100]<CLMicroLocationRecordingEventsTable::Entry>((__int128 *)a1, (__int128 *)v12);
          }
          --a3;
          if ((a4 & 1) == 0)
          {
            if ((v13 = bswap64(*(a1 - 31)), v14 = bswap64(*a1), v13 == v14)
              && (v13 = bswap64(*(a1 - 30)), v14 = bswap64(a1[1]), v13 == v14)
              || (v13 < v14 ? (v22 = -1) : (v22 = 1), (v22 & 0x80000000) == 0))
            {
              v15 = *(_OWORD *)a1;
              v243 = a1[2];
              v242 = v15;
              v16 = a1[5];
              __p = *(_OWORD *)(a1 + 3);
              v245 = v16;
              a1[4] = 0;
              a1[5] = 0;
              a1[3] = 0;
              v17 = *(_OWORD *)((char *)a1 + 60);
              v246[0] = *((_OWORD *)a1 + 3);
              *(_OWORD *)((char *)v246 + 12) = v17;
              CLMicroLocationProto::RecordingEvent::RecordingEvent((CLMicroLocationProto::RecordingEvent *)v247, (const CLMicroLocationProto::RecordingEvent *)(a1 + 10));
              v18 = *((_OWORD *)a1 + 14);
              v249 = *((_BYTE *)a1 + 240);
              v248 = v18;
              v19 = bswap64(v242);
              v20 = bswap64(*v7);
              if (v19 == v20
                && (v19 = bswap64(*((unint64_t *)&v242 + 1)), v20 = bswap64(*(a2 - 30)), v19 == v20))
              {
                v21 = 0;
              }
              else if (v19 < v20)
              {
                v21 = -1;
              }
              else
              {
                v21 = 1;
              }
              if (v21 < 0)
              {
                v69 = a1;
                v8 = a1;
                do
                {
                  v70 = v8[31];
                  v8 += 31;
                  v71 = bswap64(v242);
                  v72 = bswap64(v70);
                  if (v71 == v72
                    && (v71 = bswap64(*((unint64_t *)&v242 + 1)), v72 = bswap64(v69[32]), v71 == v72))
                  {
                    v73 = 0;
                  }
                  else if (v71 < v72)
                  {
                    v73 = -1;
                  }
                  else
                  {
                    v73 = 1;
                  }
                  v69 = v8;
                }
                while ((v73 & 0x80000000) == 0);
              }
              else
              {
                v65 = a1 + 31;
                do
                {
                  v8 = v65;
                  if (v65 >= (unint64_t *)v6)
                    break;
                  v66 = bswap64(v242);
                  v67 = bswap64(*v8);
                  if (v66 == v67 && (v66 = bswap64(*((unint64_t *)&v242 + 1)), v67 = bswap64(v8[1]), v66 == v67))
                    v68 = 0;
                  else
                    v68 = v66 < v67 ? -1 : 1;
                  v65 = v8 + 31;
                }
                while ((v68 & 0x80000000) == 0);
              }
              v74 = v6;
              if (v8 < (unint64_t *)v6)
              {
                v75 = v6;
                v74 = v6;
                do
                {
                  v76 = *((_QWORD *)v74 - 31);
                  v74 = (__int128 *)((char *)v74 - 248);
                  v77 = bswap64(v242);
                  v78 = bswap64(v76);
                  if (v77 == v78
                    && (v77 = bswap64(*((unint64_t *)&v242 + 1)), v78 = bswap64(*((_QWORD *)v75 - 30)),
                                                                         v77 == v78))
                  {
                    v79 = 0;
                  }
                  else if (v77 < v78)
                  {
                    v79 = -1;
                  }
                  else
                  {
                    v79 = 1;
                  }
                  v75 = v74;
                }
                while (v79 < 0);
              }
              while (v8 < (unint64_t *)v74)
              {
                std::swap[abi:ne180100]<CLMicroLocationRecordingEventsTable::Entry>((__int128 *)v8, v74);
                v80 = v8;
                do
                {
                  v81 = v8[31];
                  v8 += 31;
                  v82 = bswap64(v242);
                  v83 = bswap64(v81);
                  if (v82 == v83
                    && (v82 = bswap64(*((unint64_t *)&v242 + 1)), v83 = bswap64(v80[32]), v82 == v83))
                  {
                    v84 = 0;
                  }
                  else if (v82 < v83)
                  {
                    v84 = -1;
                  }
                  else
                  {
                    v84 = 1;
                  }
                  v80 = v8;
                }
                while ((v84 & 0x80000000) == 0);
                v85 = v74;
                do
                {
                  v86 = *((_QWORD *)v74 - 31);
                  v74 = (__int128 *)((char *)v74 - 248);
                  v87 = bswap64(v242);
                  v88 = bswap64(v86);
                  if (v87 == v88
                    && (v87 = bswap64(*((unint64_t *)&v242 + 1)), v88 = bswap64(*((_QWORD *)v85 - 30)),
                                                                         v87 == v88))
                  {
                    v89 = 0;
                  }
                  else if (v87 < v88)
                  {
                    v89 = -1;
                  }
                  else
                  {
                    v89 = 1;
                  }
                  v85 = v74;
                }
                while (v89 < 0);
              }
              v90 = v8 - 31;
              if (v8 - 31 != a1)
              {
                v91 = (void **)(a1 + 3);
                v92 = *(_OWORD *)v90;
                a1[2] = *(v8 - 29);
                *(_OWORD *)a1 = v92;
                if (*((char *)a1 + 47) < 0)
                  operator delete(*v91);
                v93 = *((_OWORD *)v8 - 14);
                a1[5] = *(v8 - 26);
                *(_OWORD *)v91 = v93;
                *((_BYTE *)v8 - 201) = 0;
                *((_BYTE *)v8 - 224) = 0;
                v94 = *(_OWORD *)(v8 - 25);
                *(_OWORD *)((char *)a1 + 60) = *(_OWORD *)((char *)v8 - 188);
                *((_OWORD *)a1 + 3) = v94;
                CLMicroLocationProto::RecordingEvent::CopyFrom((CLMicroLocationProto::RecordingEvent *)(a1 + 10), (const CLMicroLocationProto::RecordingEvent *)(v8 - 21));
                v95 = *(_OWORD *)(v8 - 3);
                *((_BYTE *)a1 + 240) = *((_BYTE *)v8 - 8);
                *((_OWORD *)a1 + 14) = v95;
              }
              v96 = v242;
              *(v8 - 29) = v243;
              *(_OWORD *)v90 = v96;
              v97 = (void **)(v8 - 28);
              if (*((char *)v8 - 201) < 0)
                operator delete(*v97);
              v98 = __p;
              *(v8 - 26) = v245;
              *(_OWORD *)v97 = v98;
              HIBYTE(v245) = 0;
              LOBYTE(__p) = 0;
              v99 = v246[0];
              *(_OWORD *)((char *)v8 - 188) = *(_OWORD *)((char *)v246 + 12);
              *(_OWORD *)(v8 - 25) = v99;
              CLMicroLocationProto::RecordingEvent::CopyFrom((CLMicroLocationProto::RecordingEvent *)(v8 - 21), (const CLMicroLocationProto::RecordingEvent *)v247);
              v100 = v248;
              *((_BYTE *)v8 - 8) = v249;
              *(_OWORD *)(v8 - 3) = v100;
              CLMicroLocationProto::RecordingEvent::~RecordingEvent((CLMicroLocationProto::RecordingEvent *)v247);
              if (SHIBYTE(v245) < 0)
                operator delete((void *)__p);
              goto LABEL_79;
            }
          }
          v23 = *(_OWORD *)a1;
          v243 = a1[2];
          v242 = v23;
          v24 = a1[5];
          __p = *(_OWORD *)(a1 + 3);
          v245 = v24;
          a1[4] = 0;
          a1[5] = 0;
          a1[3] = 0;
          v25 = *(_OWORD *)((char *)a1 + 60);
          v246[0] = *((_OWORD *)a1 + 3);
          *(_OWORD *)((char *)v246 + 12) = v25;
          CLMicroLocationProto::RecordingEvent::RecordingEvent((CLMicroLocationProto::RecordingEvent *)v247, (const CLMicroLocationProto::RecordingEvent *)(a1 + 10));
          v26 = 0;
          v27 = (void **)(a1 + 3);
          v28 = *((_OWORD *)a1 + 14);
          v249 = *((_BYTE *)a1 + 240);
          v248 = v28;
          do
          {
            v29 = bswap64(a1[v26 + 31]);
            v30 = bswap64(v242);
            if (v29 == v30
              && (v29 = bswap64(a1[v26 + 32]), v30 = bswap64(*((unint64_t *)&v242 + 1)), v29 == v30))
            {
              v31 = 0;
            }
            else if (v29 < v30)
            {
              v31 = -1;
            }
            else
            {
              v31 = 1;
            }
            v26 += 31;
          }
          while (v31 < 0);
          v32 = &a1[v26];
          v33 = v6;
          if (v26 == 31)
          {
            v38 = a2;
            while (v32 < v38)
            {
              v34 = (__int128 *)(v38 - 31);
              v39 = bswap64(*(v38 - 31));
              v40 = bswap64(v242);
              if (v39 == v40
                && (v39 = bswap64(*(v38 - 30)), v40 = bswap64(*((unint64_t *)&v242 + 1)), v39 == v40))
              {
                v41 = 0;
              }
              else if (v39 < v40)
              {
                v41 = -1;
              }
              else
              {
                v41 = 1;
              }
              v38 -= 31;
              if (v41 < 0)
                goto LABEL_47;
            }
            v34 = (__int128 *)v38;
          }
          else
          {
            do
            {
              v34 = (__int128 *)((char *)v33 - 248);
              v35 = bswap64(*((_QWORD *)v33 - 31));
              v36 = bswap64(v242);
              if (v35 == v36
                && (v35 = bswap64(*((_QWORD *)v33 - 30)), v36 = bswap64(*((unint64_t *)&v242 + 1)), v35 == v36))
              {
                v37 = 0;
              }
              else if (v35 < v36)
              {
                v37 = -1;
              }
              else
              {
                v37 = 1;
              }
              v33 = (__int128 *)((char *)v33 - 248);
            }
            while ((v37 & 0x80000000) == 0);
          }
LABEL_47:
          v8 = v32;
          if (v32 < (unint64_t *)v34)
          {
            v42 = v34;
            do
            {
              std::swap[abi:ne180100]<CLMicroLocationRecordingEventsTable::Entry>((__int128 *)v8, v42);
              v43 = v8;
              do
              {
                v44 = v8[31];
                v8 += 31;
                v45 = bswap64(v44);
                v46 = bswap64(v242);
                if (v45 == v46 && (v45 = bswap64(v43[32]), v46 = bswap64(*((unint64_t *)&v242 + 1)), v45 == v46))
                {
                  v47 = 0;
                }
                else if (v45 < v46)
                {
                  v47 = -1;
                }
                else
                {
                  v47 = 1;
                }
                v43 = v8;
              }
              while (v47 < 0);
              v48 = v42;
              do
              {
                v49 = *((_QWORD *)v42 - 31);
                v42 = (__int128 *)((char *)v42 - 248);
                v50 = bswap64(v49);
                v51 = bswap64(v242);
                if (v50 == v51
                  && (v50 = bswap64(*((_QWORD *)v48 - 30)), v51 = bswap64(*((unint64_t *)&v242 + 1)), v50 == v51))
                {
                  v52 = 0;
                }
                else if (v50 < v51)
                {
                  v52 = -1;
                }
                else
                {
                  v52 = 1;
                }
                v48 = v42;
              }
              while ((v52 & 0x80000000) == 0);
            }
            while (v8 < (unint64_t *)v42);
          }
          v53 = v8 - 31;
          if (v8 - 31 != a1)
          {
            v54 = *(_OWORD *)v53;
            a1[2] = *(v8 - 29);
            *(_OWORD *)a1 = v54;
            if (*((char *)a1 + 47) < 0)
              operator delete(*v27);
            v55 = *((_OWORD *)v8 - 14);
            a1[5] = *(v8 - 26);
            *(_OWORD *)v27 = v55;
            *((_BYTE *)v8 - 201) = 0;
            *((_BYTE *)v8 - 224) = 0;
            v56 = *(_OWORD *)(v8 - 25);
            *(_OWORD *)((char *)a1 + 60) = *(_OWORD *)((char *)v8 - 188);
            *((_OWORD *)a1 + 3) = v56;
            CLMicroLocationProto::RecordingEvent::CopyFrom((CLMicroLocationProto::RecordingEvent *)(a1 + 10), (const CLMicroLocationProto::RecordingEvent *)(v8 - 21));
            v57 = *(_OWORD *)(v8 - 3);
            *((_BYTE *)a1 + 240) = *((_BYTE *)v8 - 8);
            *((_OWORD *)a1 + 14) = v57;
          }
          v58 = v242;
          *(v8 - 29) = v243;
          *(_OWORD *)v53 = v58;
          v59 = (void **)(v8 - 28);
          if (*((char *)v8 - 201) < 0)
            operator delete(*v59);
          v60 = __p;
          *(v8 - 26) = v245;
          *(_OWORD *)v59 = v60;
          HIBYTE(v245) = 0;
          LOBYTE(__p) = 0;
          v61 = v246[0];
          *(_OWORD *)((char *)v8 - 188) = *(_OWORD *)((char *)v246 + 12);
          *(_OWORD *)(v8 - 25) = v61;
          CLMicroLocationProto::RecordingEvent::CopyFrom((CLMicroLocationProto::RecordingEvent *)(v8 - 21), (const CLMicroLocationProto::RecordingEvent *)v247);
          v62 = v248;
          *((_BYTE *)v8 - 8) = v249;
          *(_OWORD *)(v8 - 3) = v62;
          CLMicroLocationProto::RecordingEvent::~RecordingEvent((CLMicroLocationProto::RecordingEvent *)v247);
          if (SHIBYTE(v245) < 0)
            operator delete((void *)__p);
          v63 = v32 >= (unint64_t *)v34;
          v6 = (__int128 *)a2;
          if (!v63)
            goto LABEL_78;
          v64 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,CLMicroLocationLearner::semiSupervisedLearnWrapper(CLMicroLocationClientUtils::ClientIdAndClientServiceId const&,std::vector<CLMicroLocationProto::EventType> const&,CLMicroLocationProto::Model_GenerationAlgorithm,NSMutableDictionary *,std::function<BOOL ()(void)>,CLMicroLocationFingerprintPool &,std::string const&,boost::uuids::uuid const&)::$_2 &,CLMicroLocationRecordingEventsTable::Entry *>(a1, v8 - 31);
          if (!std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,CLMicroLocationLearner::semiSupervisedLearnWrapper(CLMicroLocationClientUtils::ClientIdAndClientServiceId const&,std::vector<CLMicroLocationProto::EventType> const&,CLMicroLocationProto::Model_GenerationAlgorithm,NSMutableDictionary *,std::function<BOOL ()(void)>,CLMicroLocationFingerprintPool &,std::string const&,boost::uuids::uuid const&)::$_2 &,CLMicroLocationRecordingEventsTable::Entry *>(v8, a2))
          {
            if (v64)
              continue;
LABEL_78:
            std::__introsort<std::_ClassicAlgPolicy,CLMicroLocationLearner::semiSupervisedLearnWrapper(CLMicroLocationClientUtils::ClientIdAndClientServiceId const&,std::vector<CLMicroLocationProto::EventType> const&,CLMicroLocationProto::Model_GenerationAlgorithm,NSMutableDictionary *,std::function<BOOL ()(void)>,CLMicroLocationFingerprintPool &,std::string const&,boost::uuids::uuid const&)::$_2 &,CLMicroLocationRecordingEventsTable::Entry *,false>(a1, v8 - 31, a3, a4 & 1);
LABEL_79:
            a4 = 0;
            continue;
          }
          a2 = v8 - 31;
          if (v64)
            return;
          goto LABEL_2;
        }
        if ((a4 & 1) == 0)
        {
          if (a1 == (unint64_t *)v6)
            return;
          v212 = a1 + 31;
          if (a1 + 31 == a2)
            return;
          for (i = a1 - 31; ; i += 31)
          {
            v214 = v212;
            v215 = bswap64(a1[31]);
            v216 = bswap64(*a1);
            if (v215 != v216)
              break;
            v215 = bswap64(v214[1]);
            v216 = bswap64(a1[1]);
            v217 = a2;
            if (v215 != v216)
              goto LABEL_280;
LABEL_298:
            v212 = v214 + 31;
            a1 = v214;
            if (v214 + 31 == v217)
              return;
          }
          v217 = a2;
LABEL_280:
          if (v215 < v216)
            v218 = -1;
          else
            v218 = 1;
          if (v218 < 0)
          {
            v219 = *(_OWORD *)v214;
            v243 = v214[2];
            v242 = v219;
            __p = *((_OWORD *)a1 + 17);
            v245 = a1[36];
            a1[34] = 0;
            a1[35] = 0;
            a1[36] = 0;
            v246[0] = *(_OWORD *)(a1 + 37);
            *(_OWORD *)((char *)v246 + 12) = *(_OWORD *)((char *)a1 + 308);
            CLMicroLocationProto::RecordingEvent::RecordingEvent((CLMicroLocationProto::RecordingEvent *)v247, (const CLMicroLocationProto::RecordingEvent *)(a1 + 41));
            v249 = *((_BYTE *)a1 + 488);
            v248 = *(_OWORD *)(a1 + 59);
            v220 = i;
            do
            {
              *((_OWORD *)v220 + 31) = *(_OWORD *)(v220 + 31);
              v220[64] = v220[33];
              v221 = (void **)(v220 + 65);
              if (*((char *)v220 + 543) < 0)
                operator delete(*v221);
              *(_OWORD *)v221 = *((_OWORD *)v220 + 17);
              v220[67] = v220[36];
              *((_BYTE *)v220 + 295) = 0;
              *((_BYTE *)v220 + 272) = 0;
              *((_OWORD *)v220 + 34) = *(_OWORD *)(v220 + 37);
              *(_OWORD *)((char *)v220 + 556) = *(_OWORD *)((char *)v220 + 308);
              CLMicroLocationProto::RecordingEvent::CopyFrom((CLMicroLocationProto::RecordingEvent *)(v220 + 72), (const CLMicroLocationProto::RecordingEvent *)(v220 + 41));
              *((_BYTE *)v220 + 736) = *((_BYTE *)v220 + 488);
              *((_OWORD *)v220 + 45) = *(_OWORD *)(v220 + 59);
              v222 = bswap64(v242);
              v223 = bswap64(*v220);
              if (v222 == v223
                && (v222 = bswap64(*((unint64_t *)&v242 + 1)), v223 = bswap64(v220[1]), v222 == v223))
              {
                v224 = 0;
              }
              else if (v222 < v223)
              {
                v224 = -1;
              }
              else
              {
                v224 = 1;
              }
              v220 -= 31;
            }
            while (v224 < 0);
            v225 = v242;
            v220[64] = v243;
            *((_OWORD *)v220 + 31) = v225;
            v226 = (void **)(v220 + 65);
            if (*((char *)v220 + 543) < 0)
              operator delete(*v226);
            v227 = __p;
            v220[67] = v245;
            *(_OWORD *)v226 = v227;
            HIBYTE(v245) = 0;
            LOBYTE(__p) = 0;
            v228 = v246[0];
            *(_OWORD *)((char *)v220 + 556) = *(_OWORD *)((char *)v246 + 12);
            *((_OWORD *)v220 + 34) = v228;
            CLMicroLocationProto::RecordingEvent::CopyFrom((CLMicroLocationProto::RecordingEvent *)(v220 + 72), (const CLMicroLocationProto::RecordingEvent *)v247);
            v229 = v248;
            *((_BYTE *)v220 + 736) = v249;
            *((_OWORD *)v220 + 45) = v229;
            CLMicroLocationProto::RecordingEvent::~RecordingEvent((CLMicroLocationProto::RecordingEvent *)v247);
            v217 = a2;
            if (SHIBYTE(v245) < 0)
              operator delete((void *)__p);
          }
          goto LABEL_298;
        }
        if (a1 != (unint64_t *)v6)
        {
          v103 = a1 + 31;
          if (a1 + 31 != a2)
          {
            v104 = 0;
            v105 = (CLMicroLocationProto::RecordingEvent *)v247;
            v106 = a1;
            do
            {
              v107 = v103;
              v108 = bswap64(v106[31]);
              v109 = bswap64(*v106);
              if (v108 != v109 || (v108 = bswap64(v107[1]), v109 = bswap64(v106[1]), v108 != v109))
              {
                v110 = v108 < v109 ? -1 : 1;
                if (v110 < 0)
                {
                  v111 = *(_OWORD *)v107;
                  v243 = v107[2];
                  v242 = v111;
                  __p = *((_OWORD *)v106 + 17);
                  v245 = v106[36];
                  v106[34] = 0;
                  v106[35] = 0;
                  v106[36] = 0;
                  v246[0] = *(_OWORD *)(v106 + 37);
                  *(_OWORD *)((char *)v246 + 12) = *(_OWORD *)((char *)v106 + 308);
                  v112 = v105;
                  CLMicroLocationProto::RecordingEvent::RecordingEvent(v105, (const CLMicroLocationProto::RecordingEvent *)(v106 + 41));
                  v249 = *((_BYTE *)v106 + 488);
                  v248 = *(_OWORD *)(v106 + 59);
                  v113 = v104;
                  while (1)
                  {
                    v114 = (char *)a1 + v113;
                    *(_OWORD *)(v114 + 248) = *(_OWORD *)((char *)a1 + v113);
                    *((_QWORD *)v114 + 33) = *(unint64_t *)((char *)a1 + v113 + 16);
                    v115 = (void **)((char *)a1 + v113 + 272);
                    if (*((char *)a1 + v113 + 295) < 0)
                      operator delete(*v115);
                    *(_OWORD *)v115 = *(_OWORD *)(v114 + 24);
                    *(unint64_t *)((char *)a1 + v113 + 288) = *((_QWORD *)v114 + 5);
                    v114[47] = 0;
                    v114[24] = 0;
                    *(_OWORD *)(v114 + 296) = *((_OWORD *)v114 + 3);
                    *(_OWORD *)(v114 + 308) = *(_OWORD *)(v114 + 60);
                    CLMicroLocationProto::RecordingEvent::CopyFrom((CLMicroLocationProto::RecordingEvent *)(v114 + 328), (const CLMicroLocationProto::RecordingEvent *)(v114 + 80));
                    v116 = (char *)a1 + v113;
                    *(_OWORD *)((char *)a1 + v113 + 472) = *(_OWORD *)((char *)a1 + v113 + 224);
                    *((_BYTE *)a1 + v113 + 488) = *((_BYTE *)a1 + v113 + 240);
                    if (!v113)
                      break;
                    v117 = bswap64(v242);
                    v118 = bswap64(*((_QWORD *)v116 - 31));
                    if (v117 == v118
                      && (v117 = bswap64(*((unint64_t *)&v242 + 1)),
                          v118 = bswap64(*((_QWORD *)v116 - 30)),
                          v117 == v118))
                    {
                      v119 = 0;
                    }
                    else if (v117 < v118)
                    {
                      v119 = -1;
                    }
                    else
                    {
                      v119 = 1;
                    }
                    v113 -= 248;
                    if ((v119 & 0x80000000) == 0)
                    {
                      v120 = (uint64_t)a1 + v113 + 248;
                      goto LABEL_169;
                    }
                  }
                  v120 = (uint64_t)a1;
LABEL_169:
                  v121 = v242;
                  *(_QWORD *)(v120 + 16) = v243;
                  *(_OWORD *)v120 = v121;
                  v122 = (void **)(v116 + 24);
                  if (*(char *)(v120 + 47) < 0)
                    operator delete(*v122);
                  v123 = __p;
                  *((_QWORD *)v116 + 5) = v245;
                  *(_OWORD *)v122 = v123;
                  HIBYTE(v245) = 0;
                  LOBYTE(__p) = 0;
                  v124 = v246[0];
                  *(_OWORD *)(v116 + 60) = *(_OWORD *)((char *)v246 + 12);
                  *((_OWORD *)v116 + 3) = v124;
                  v105 = v112;
                  CLMicroLocationProto::RecordingEvent::CopyFrom((CLMicroLocationProto::RecordingEvent *)(v116 + 80), v112);
                  v125 = v248;
                  v116[240] = v249;
                  *((_OWORD *)v116 + 14) = v125;
                  CLMicroLocationProto::RecordingEvent::~RecordingEvent(v112);
                  if (SHIBYTE(v245) < 0)
                    operator delete((void *)__p);
                }
              }
              v103 = v107 + 31;
              v104 += 248;
              v106 = v107;
            }
            while (v107 + 31 != a2);
          }
        }
        return;
    }
  }
}

void sub_241A8F564(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, CLMicroLocationProto::RecordingEvent *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, CLMicroLocationProto::RecordingEvent *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,CLMicroLocationProto::RecordingEvent *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,void *__p,uint64_t a61,int a62,__int16 a63)
{
  char a65;

  if (a65 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void std::__sort5_maybe_branchless[abi:ne180100]<std::_ClassicAlgPolicy,CLMicroLocationLearner::semiSupervisedLearnWrapper(CLMicroLocationClientUtils::ClientIdAndClientServiceId const&,std::vector<CLMicroLocationProto::EventType> const&,CLMicroLocationProto::Model_GenerationAlgorithm,NSMutableDictionary *,std::function<BOOL ()(void)>,CLMicroLocationFingerprintPool &,std::string const&,boost::uuids::uuid const&)::$_2 &,CLMicroLocationRecordingEventsTable::Entry *,0>(unint64_t *a1, unint64_t *a2, unint64_t *a3, unint64_t *a4, unint64_t *a5)
{
  unint64_t v10;
  unint64_t v11;
  int v12;
  unint64_t v13;
  unint64_t v14;
  int v15;
  unint64_t v16;
  unint64_t v17;
  int v18;
  unint64_t v19;
  unint64_t v20;
  int v21;

  std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,CLMicroLocationLearner::semiSupervisedLearnWrapper(CLMicroLocationClientUtils::ClientIdAndClientServiceId const&,std::vector<CLMicroLocationProto::EventType> const&,CLMicroLocationProto::Model_GenerationAlgorithm,NSMutableDictionary *,std::function<BOOL ()(void)>,CLMicroLocationFingerprintPool &,std::string const&,boost::uuids::uuid const&)::$_2 &,CLMicroLocationRecordingEventsTable::Entry *>(a1, a2, a3, a4);
  v10 = bswap64(*a5);
  v11 = bswap64(*a4);
  if (v10 != v11 || (v10 = bswap64(a5[1]), v11 = bswap64(a4[1]), v10 != v11))
  {
    v12 = v10 < v11 ? -1 : 1;
    if (v12 < 0)
    {
      std::swap[abi:ne180100]<CLMicroLocationRecordingEventsTable::Entry>((__int128 *)a4, (__int128 *)a5);
      v13 = bswap64(*a4);
      v14 = bswap64(*a3);
      if (v13 != v14 || (v13 = bswap64(a4[1]), v14 = bswap64(a3[1]), v13 != v14))
      {
        v15 = v13 < v14 ? -1 : 1;
        if (v15 < 0)
        {
          std::swap[abi:ne180100]<CLMicroLocationRecordingEventsTable::Entry>((__int128 *)a3, (__int128 *)a4);
          v16 = bswap64(*a3);
          v17 = bswap64(*a2);
          if (v16 != v17 || (v16 = bswap64(a3[1]), v17 = bswap64(a2[1]), v16 != v17))
          {
            v18 = v16 < v17 ? -1 : 1;
            if (v18 < 0)
            {
              std::swap[abi:ne180100]<CLMicroLocationRecordingEventsTable::Entry>((__int128 *)a2, (__int128 *)a3);
              v19 = bswap64(*a2);
              v20 = bswap64(*a1);
              if (v19 == v20 && (v19 = bswap64(a2[1]), v20 = bswap64(a1[1]), v19 == v20))
              {
                v21 = 0;
              }
              else if (v19 < v20)
              {
                v21 = -1;
              }
              else
              {
                v21 = 1;
              }
              if (v21 < 0)
                std::swap[abi:ne180100]<CLMicroLocationRecordingEventsTable::Entry>((__int128 *)a1, (__int128 *)a2);
            }
          }
        }
      }
    }
  }
}

void std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,CLMicroLocationLearner::semiSupervisedLearnWrapper(CLMicroLocationClientUtils::ClientIdAndClientServiceId const&,std::vector<CLMicroLocationProto::EventType> const&,CLMicroLocationProto::Model_GenerationAlgorithm,NSMutableDictionary *,std::function<BOOL ()(void)>,CLMicroLocationFingerprintPool &,std::string const&,boost::uuids::uuid const&)::$_2 &,CLMicroLocationRecordingEventsTable::Entry *>(unint64_t *a1, unint64_t *a2, unint64_t *a3)
{
  unint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  int v8;
  unint64_t v9;
  unint64_t v10;
  int v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  int v16;
  __int128 *v17;
  int v18;

  v5 = a1;
  v6 = bswap64(*a2);
  v7 = bswap64(*a1);
  if (v6 == v7 && (v6 = bswap64(a2[1]), v7 = bswap64(a1[1]), v6 == v7))
  {
    v8 = 0;
  }
  else if (v6 < v7)
  {
    v8 = -1;
  }
  else
  {
    v8 = 1;
  }
  v9 = bswap64(*a3);
  v10 = bswap64(*a2);
  if (v9 != v10 || (v9 = bswap64(a3[1]), v10 = bswap64(a2[1]), v9 != v10))
  {
    if (v9 < v10)
      v11 = -1;
    else
      v11 = 1;
    if (v8 < 0)
      goto LABEL_10;
LABEL_18:
    if (v11 < 0)
    {
      std::swap[abi:ne180100]<CLMicroLocationRecordingEventsTable::Entry>((__int128 *)a2, (__int128 *)a3);
      v14 = bswap64(*a2);
      v15 = bswap64(*v5);
      if (v14 != v15 || (v14 = bswap64(a2[1]), v15 = bswap64(v5[1]), v14 != v15))
      {
        v18 = v14 < v15 ? -1 : 1;
        if (v18 < 0)
        {
          a1 = v5;
          v17 = (__int128 *)a2;
          goto LABEL_34;
        }
      }
    }
    return;
  }
  v11 = 0;
  if ((v8 & 0x80000000) == 0)
    goto LABEL_18;
LABEL_10:
  if (v11 < 0)
  {
LABEL_27:
    v17 = (__int128 *)a3;
LABEL_34:
    std::swap[abi:ne180100]<CLMicroLocationRecordingEventsTable::Entry>((__int128 *)a1, v17);
    return;
  }
  std::swap[abi:ne180100]<CLMicroLocationRecordingEventsTable::Entry>((__int128 *)a1, (__int128 *)a2);
  v12 = bswap64(*a3);
  v13 = bswap64(*a2);
  if (v12 != v13 || (v12 = bswap64(a3[1]), v13 = bswap64(a2[1]), v12 != v13))
  {
    v16 = v12 < v13 ? -1 : 1;
    if (v16 < 0)
    {
      a1 = a2;
      goto LABEL_27;
    }
  }
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,CLMicroLocationLearner::semiSupervisedLearnWrapper(CLMicroLocationClientUtils::ClientIdAndClientServiceId const&,std::vector<CLMicroLocationProto::EventType> const&,CLMicroLocationProto::Model_GenerationAlgorithm,NSMutableDictionary *,std::function<BOOL ()(void)>,CLMicroLocationFingerprintPool &,std::string const&,boost::uuids::uuid const&)::$_2 &,CLMicroLocationRecordingEventsTable::Entry *>(unint64_t *a1, unint64_t *a2)
{
  unint64_t *v2;
  unint64_t v4;
  _BOOL8 result;
  unint64_t v6;
  unint64_t v7;
  unint64_t *v8;
  unint64_t *v9;
  uint64_t v10;
  int v11;
  uint64_t *v12;
  CLMicroLocationProto::RecordingEvent *v13;
  unint64_t v14;
  unint64_t v15;
  int v16;
  uint64_t *v17;
  const CLMicroLocationProto::RecordingEvent *v18;
  uint64_t v19;
  char *v20;
  void **v21;
  char *v22;
  unint64_t v23;
  unint64_t v24;
  int v25;
  uint64_t v26;
  void **v27;
  int v28;
  unint64_t *v29;
  __int128 v30;
  unint64_t v31;
  __int128 __p;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  __int128 v36;
  char v37;
  uint64_t v38;

  v2 = a2;
  v38 = *MEMORY[0x24BDAC8D0];
  v4 = 0xEF7BDEF7BDEF7BDFLL * (a2 - a1);
  result = 1;
  switch(v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      v6 = bswap64(*(a2 - 31));
      v7 = bswap64(*a1);
      if (v6 != v7 || (v6 = bswap64(*(a2 - 30)), v7 = bswap64(a1[1]), v6 != v7))
      {
        v28 = v6 < v7 ? -1 : 1;
        if (v28 < 0)
        {
          std::swap[abi:ne180100]<CLMicroLocationRecordingEventsTable::Entry>((__int128 *)a1, (__int128 *)(a2 - 31));
          return 1;
        }
      }
      return result;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,CLMicroLocationLearner::semiSupervisedLearnWrapper(CLMicroLocationClientUtils::ClientIdAndClientServiceId const&,std::vector<CLMicroLocationProto::EventType> const&,CLMicroLocationProto::Model_GenerationAlgorithm,NSMutableDictionary *,std::function<BOOL ()(void)>,CLMicroLocationFingerprintPool &,std::string const&,boost::uuids::uuid const&)::$_2 &,CLMicroLocationRecordingEventsTable::Entry *>(a1, a1 + 31, a2 - 31);
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,CLMicroLocationLearner::semiSupervisedLearnWrapper(CLMicroLocationClientUtils::ClientIdAndClientServiceId const&,std::vector<CLMicroLocationProto::EventType> const&,CLMicroLocationProto::Model_GenerationAlgorithm,NSMutableDictionary *,std::function<BOOL ()(void)>,CLMicroLocationFingerprintPool &,std::string const&,boost::uuids::uuid const&)::$_2 &,CLMicroLocationRecordingEventsTable::Entry *>(a1, a1 + 31, a1 + 62, a2 - 31);
      return 1;
    case 5uLL:
      std::__sort5_maybe_branchless[abi:ne180100]<std::_ClassicAlgPolicy,CLMicroLocationLearner::semiSupervisedLearnWrapper(CLMicroLocationClientUtils::ClientIdAndClientServiceId const&,std::vector<CLMicroLocationProto::EventType> const&,CLMicroLocationProto::Model_GenerationAlgorithm,NSMutableDictionary *,std::function<BOOL ()(void)>,CLMicroLocationFingerprintPool &,std::string const&,boost::uuids::uuid const&)::$_2 &,CLMicroLocationRecordingEventsTable::Entry *,0>(a1, a1 + 31, a1 + 62, a1 + 93, a2 - 31);
      return 1;
    default:
      v8 = a1 + 62;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,CLMicroLocationLearner::semiSupervisedLearnWrapper(CLMicroLocationClientUtils::ClientIdAndClientServiceId const&,std::vector<CLMicroLocationProto::EventType> const&,CLMicroLocationProto::Model_GenerationAlgorithm,NSMutableDictionary *,std::function<BOOL ()(void)>,CLMicroLocationFingerprintPool &,std::string const&,boost::uuids::uuid const&)::$_2 &,CLMicroLocationRecordingEventsTable::Entry *>(a1, a1 + 31, a1 + 62);
      v9 = a1 + 93;
      if (a1 + 93 == v2)
        return 1;
      v10 = 0;
      v11 = 0;
      v12 = &v34;
      v13 = (CLMicroLocationProto::RecordingEvent *)&v35;
      v29 = v2;
      break;
  }
  while (1)
  {
    v14 = bswap64(*v9);
    v15 = bswap64(*v8);
    if (v14 != v15 || (v14 = bswap64(v9[1]), v15 = bswap64(v8[1]), v14 != v15))
    {
      v16 = v14 < v15 ? -1 : 1;
      if (v16 < 0)
      {
        v30 = *(_OWORD *)v9;
        v31 = v9[2];
        __p = *(_OWORD *)(v9 + 3);
        v33 = v9[5];
        v9[3] = 0;
        v9[4] = 0;
        v9[5] = 0;
        *(_OWORD *)v12 = *((_OWORD *)v9 + 3);
        v17 = v12;
        *(_OWORD *)((char *)v12 + 12) = *(_OWORD *)((char *)v9 + 60);
        v18 = v13;
        CLMicroLocationProto::RecordingEvent::RecordingEvent(v13, (const CLMicroLocationProto::RecordingEvent *)(v9 + 10));
        v36 = *((_OWORD *)v9 + 14);
        v37 = *((_BYTE *)v9 + 240);
        v19 = v10;
        while (1)
        {
          v20 = (char *)a1 + v19;
          *(_OWORD *)((char *)a1 + v19 + 744) = *(_OWORD *)((char *)a1 + v19 + 496);
          *(unint64_t *)((char *)a1 + v19 + 760) = *(unint64_t *)((char *)a1 + v19 + 512);
          v21 = (void **)((char *)a1 + v19 + 768);
          if (*((char *)a1 + v19 + 791) < 0)
            operator delete(*v21);
          *(unint64_t *)((char *)a1 + v19 + 784) = *((_QWORD *)v20 + 67);
          *(_OWORD *)v21 = *(_OWORD *)(v20 + 520);
          v20[543] = 0;
          v20[520] = 0;
          *(_OWORD *)(v20 + 792) = *((_OWORD *)v20 + 34);
          *(_OWORD *)(v20 + 804) = *(_OWORD *)(v20 + 556);
          CLMicroLocationProto::RecordingEvent::CopyFrom((CLMicroLocationProto::RecordingEvent *)(v20 + 824), (const CLMicroLocationProto::RecordingEvent *)(v20 + 576));
          v22 = (char *)a1 + v19;
          *(_OWORD *)((char *)a1 + v19 + 968) = *(_OWORD *)((char *)a1 + v19 + 720);
          *((_BYTE *)a1 + v19 + 984) = *((_BYTE *)a1 + v19 + 736);
          if (v19 == -496)
            break;
          v23 = bswap64(v30);
          v24 = bswap64(*((_QWORD *)v22 + 31));
          if (v23 == v24
            && (v23 = bswap64(*((unint64_t *)&v30 + 1)), v24 = bswap64(*((_QWORD *)v22 + 32)), v23 == v24))
          {
            v25 = 0;
          }
          else if (v23 < v24)
          {
            v25 = -1;
          }
          else
          {
            v25 = 1;
          }
          v19 -= 248;
          if ((v25 & 0x80000000) == 0)
          {
            v26 = (uint64_t)a1 + v19 + 744;
            goto LABEL_26;
          }
        }
        v26 = (uint64_t)a1;
LABEL_26:
        *(_OWORD *)v26 = v30;
        *(_QWORD *)(v26 + 16) = v31;
        v27 = (void **)(v22 + 520);
        if (*(char *)(v26 + 47) < 0)
          operator delete(*v27);
        *(_OWORD *)v27 = __p;
        *((_QWORD *)v22 + 67) = v33;
        v12 = v17;
        *((_OWORD *)v22 + 34) = *(_OWORD *)v17;
        *(_OWORD *)(v22 + 556) = *(_OWORD *)((char *)v17 + 12);
        v13 = v18;
        CLMicroLocationProto::RecordingEvent::CopyFrom((CLMicroLocationProto::RecordingEvent *)(v22 + 576), v18);
        *((_OWORD *)v22 + 45) = v36;
        v22[736] = v37;
        CLMicroLocationProto::RecordingEvent::~RecordingEvent(v18);
        v2 = v29;
        if (++v11 == 8)
          return v9 + 31 == v29;
      }
    }
    v8 = v9;
    v10 += 248;
    v9 += 31;
    if (v9 == v2)
      return 1;
  }
}

void sub_241A8FD80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  CLMicroLocationRecordingEventsTable::Entry::~Entry(&a13);
  _Unwind_Resume(a1);
}

void std::swap[abi:ne180100]<CLMicroLocationRecordingEventsTable::Entry>(__int128 *a1, __int128 *a2)
{
  CLMicroLocationProto::RecordingEvent *v4;
  void **v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  void **v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  void *__p[2];
  uint64_t v14;
  _BYTE v15[28];
  _BYTE v16[144];
  __int128 v17;
  char v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v11 = *a1;
  v12 = *((_QWORD *)a1 + 2);
  *(_OWORD *)__p = *(__int128 *)((char *)a1 + 24);
  v14 = *((_QWORD *)a1 + 5);
  *((_QWORD *)a1 + 3) = 0;
  *((_QWORD *)a1 + 4) = 0;
  *((_QWORD *)a1 + 5) = 0;
  *(_OWORD *)v15 = a1[3];
  *(_OWORD *)&v15[12] = *(__int128 *)((char *)a1 + 60);
  v4 = (CLMicroLocationProto::RecordingEvent *)(a1 + 5);
  CLMicroLocationProto::RecordingEvent::RecordingEvent((CLMicroLocationProto::RecordingEvent *)v16, (const CLMicroLocationProto::RecordingEvent *)(a1 + 5));
  v5 = (void **)a1 + 3;
  v17 = a1[14];
  v18 = *((_BYTE *)a1 + 240);
  v6 = *((_QWORD *)a2 + 2);
  *a1 = *a2;
  *((_QWORD *)a1 + 2) = v6;
  if (*((char *)a1 + 47) < 0)
    operator delete(*v5);
  v7 = *(__int128 *)((char *)a2 + 24);
  *((_QWORD *)a1 + 5) = *((_QWORD *)a2 + 5);
  *(_OWORD *)v5 = v7;
  *((_BYTE *)a2 + 47) = 0;
  *((_BYTE *)a2 + 24) = 0;
  v8 = a2[3];
  *(__int128 *)((char *)a1 + 60) = *(__int128 *)((char *)a2 + 60);
  a1[3] = v8;
  CLMicroLocationProto::RecordingEvent::CopyFrom(v4, (const CLMicroLocationProto::RecordingEvent *)(a2 + 5));
  v9 = (void **)a2 + 3;
  v10 = a2[14];
  *((_BYTE *)a1 + 240) = *((_BYTE *)a2 + 240);
  a1[14] = v10;
  *a2 = v11;
  *((_QWORD *)a2 + 2) = v12;
  if (*((char *)a2 + 47) < 0)
    operator delete(*v9);
  *(_OWORD *)v9 = *(_OWORD *)__p;
  *((_QWORD *)a2 + 5) = v14;
  a2[3] = *(_OWORD *)v15;
  *(__int128 *)((char *)a2 + 60) = *(_OWORD *)&v15[12];
  CLMicroLocationProto::RecordingEvent::CopyFrom((CLMicroLocationProto::RecordingEvent *)(a2 + 5), (const CLMicroLocationProto::RecordingEvent *)v16);
  a2[14] = v17;
  *((_BYTE *)a2 + 240) = v18;
  CLMicroLocationProto::RecordingEvent::~RecordingEvent((CLMicroLocationProto::RecordingEvent *)v16);
}

void sub_241A8FF8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,CLMicroLocationLearner::semiSupervisedLearnWrapper(CLMicroLocationClientUtils::ClientIdAndClientServiceId const&,std::vector<CLMicroLocationProto::EventType> const&,CLMicroLocationProto::Model_GenerationAlgorithm,NSMutableDictionary *,std::function<BOOL ()(void)>,CLMicroLocationFingerprintPool &,std::string const&,boost::uuids::uuid const&)::$_2 &,CLMicroLocationRecordingEventsTable::Entry *>(unint64_t *a1, unint64_t *a2, unint64_t *a3, unint64_t *a4)
{
  unint64_t v8;
  unint64_t v9;
  int v10;
  unint64_t v11;
  unint64_t v12;
  int v13;
  unint64_t v14;
  unint64_t v15;
  int v16;

  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,CLMicroLocationLearner::semiSupervisedLearnWrapper(CLMicroLocationClientUtils::ClientIdAndClientServiceId const&,std::vector<CLMicroLocationProto::EventType> const&,CLMicroLocationProto::Model_GenerationAlgorithm,NSMutableDictionary *,std::function<BOOL ()(void)>,CLMicroLocationFingerprintPool &,std::string const&,boost::uuids::uuid const&)::$_2 &,CLMicroLocationRecordingEventsTable::Entry *>(a1, a2, a3);
  v8 = bswap64(*a4);
  v9 = bswap64(*a3);
  if (v8 != v9 || (v8 = bswap64(a4[1]), v9 = bswap64(a3[1]), v8 != v9))
  {
    v10 = v8 < v9 ? -1 : 1;
    if (v10 < 0)
    {
      std::swap[abi:ne180100]<CLMicroLocationRecordingEventsTable::Entry>((__int128 *)a3, (__int128 *)a4);
      v11 = bswap64(*a3);
      v12 = bswap64(*a2);
      if (v11 != v12 || (v11 = bswap64(a3[1]), v12 = bswap64(a2[1]), v11 != v12))
      {
        v13 = v11 < v12 ? -1 : 1;
        if (v13 < 0)
        {
          std::swap[abi:ne180100]<CLMicroLocationRecordingEventsTable::Entry>((__int128 *)a2, (__int128 *)a3);
          v14 = bswap64(*a2);
          v15 = bswap64(*a1);
          if (v14 != v15 || (v14 = bswap64(a2[1]), v15 = bswap64(a1[1]), v14 != v15))
          {
            if (v14 < v15)
              v16 = -1;
            else
              v16 = 1;
            if (v16 < 0)
              std::swap[abi:ne180100]<CLMicroLocationRecordingEventsTable::Entry>((__int128 *)a1, (__int128 *)a2);
          }
        }
      }
    }
  }
}

uint64_t std::__find_impl[abi:ne180100]<std::string const*,std::string const*,std::string,std::__identity>(uint64_t a1, uint64_t a2, unsigned __int8 **a3)
{
  uint64_t v3;
  char v5;
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  uint64_t v8;
  unsigned __int8 *v9;
  uint64_t v10;

  v3 = a1;
  if (a1 != a2)
  {
    v5 = *((_BYTE *)a3 + 23);
    if (v5 >= 0)
      v6 = (unsigned __int8 *)*((unsigned __int8 *)a3 + 23);
    else
      v6 = a3[1];
    if (v5 >= 0)
      v7 = (unsigned __int8 *)a3;
    else
      v7 = *a3;
    do
    {
      v8 = *(unsigned __int8 *)(v3 + 23);
      if ((v8 & 0x80u) == 0)
        v9 = (unsigned __int8 *)*(unsigned __int8 *)(v3 + 23);
      else
        v9 = *(unsigned __int8 **)(v3 + 8);
      if (v9 == v6)
      {
        if ((v8 & 0x80) != 0)
        {
          if (!memcmp(*(const void **)v3, v7, *(_QWORD *)(v3 + 8)))
            return v3;
        }
        else
        {
          if (!*(_BYTE *)(v3 + 23))
            return v3;
          v10 = 0;
          while (*(unsigned __int8 *)(v3 + v10) == v7[v10])
          {
            if (v8 == ++v10)
              return v3;
          }
        }
      }
      v3 += 24;
    }
    while (v3 != a2);
    return a2;
  }
  return v3;
}

uint64_t std::vector<CLMicroLocationClientUtils::ClientIdentitiesAndLocationTypes>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<CLMicroLocationClientUtils::ClientIdentitiesAndLocationTypes>,std::reverse_iterator<CLMicroLocationClientUtils::ClientIdentitiesAndLocationTypes*>,std::reverse_iterator<CLMicroLocationClientUtils::ClientIdentitiesAndLocationTypes*>,std::reverse_iterator<CLMicroLocationClientUtils::ClientIdentitiesAndLocationTypes*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<CLMicroLocationClientUtils::ClientIdentitiesAndLocationTypes>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x555555555555556)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(48 * a2);
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<CLMicroLocationClientUtils::ClientIdentitiesAndLocationTypes>,std::reverse_iterator<CLMicroLocationClientUtils::ClientIdentitiesAndLocationTypes*>,std::reverse_iterator<CLMicroLocationClientUtils::ClientIdentitiesAndLocationTypes*>,std::reverse_iterator<CLMicroLocationClientUtils::ClientIdentitiesAndLocationTypes*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  _QWORD v11[3];
  char v12;
  __int128 v13;
  __int128 v14;

  v7 = a7;
  *(_QWORD *)&v14 = a6;
  *((_QWORD *)&v14 + 1) = a7;
  v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    v9 = a6;
  }
  else
  {
    do
    {
      v8 = *(_OWORD *)(a3 - 48);
      *(_QWORD *)(v7 - 32) = *(_QWORD *)(a3 - 32);
      *(_OWORD *)(v7 - 48) = v8;
      *(_QWORD *)(a3 - 40) = 0;
      *(_QWORD *)(a3 - 32) = 0;
      *(_QWORD *)(a3 - 48) = 0;
      *(_OWORD *)(v7 - 24) = *(_OWORD *)(a3 - 24);
      *(_QWORD *)(v7 - 8) = *(_QWORD *)(a3 - 8);
      v7 = *((_QWORD *)&v14 + 1) - 48;
      *((_QWORD *)&v14 + 1) -= 48;
      a3 -= 48;
    }
    while (a3 != a5);
    v9 = v14;
  }
  v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<CLMicroLocationClientUtils::ClientIdentitiesAndLocationTypes>,std::reverse_iterator<CLMicroLocationClientUtils::ClientIdentitiesAndLocationTypes*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<CLMicroLocationClientUtils::ClientIdentitiesAndLocationTypes>,std::reverse_iterator<CLMicroLocationClientUtils::ClientIdentitiesAndLocationTypes*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<CLMicroLocationClientUtils::ClientIdentitiesAndLocationTypes>,std::reverse_iterator<CLMicroLocationClientUtils::ClientIdentitiesAndLocationTypes*>>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<CLMicroLocationClientUtils::ClientIdentitiesAndLocationTypes>,std::reverse_iterator<CLMicroLocationClientUtils::ClientIdentitiesAndLocationTypes*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    if (*(char *)(v1 + 23) < 0)
      operator delete(*(void **)v1);
    v1 += 48;
  }
}

uint64_t std::__split_buffer<CLMicroLocationClientUtils::ClientIdentitiesAndLocationTypes>::~__split_buffer(uint64_t a1)
{
  std::__split_buffer<CLMicroLocationClientUtils::ClientIdentitiesAndLocationTypes>::__destruct_at_end[abi:ne180100](a1, *(void ***)(a1 + 8));
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void std::__split_buffer<CLMicroLocationClientUtils::ClientIdentitiesAndLocationTypes>::__destruct_at_end[abi:ne180100](uint64_t a1, void **a2)
{
  void **v2;
  void **v5;

  v2 = *(void ***)(a1 + 16);
  if (v2 != a2)
  {
    do
    {
      v5 = v2 - 6;
      *(_QWORD *)(a1 + 16) = v2 - 6;
      if (*((char *)v2 - 25) < 0)
      {
        operator delete(*v5);
        v5 = *(void ***)(a1 + 16);
      }
      v2 = v5;
    }
    while (v5 != a2);
  }
}

void std::vector<CLMicroLocationRapportMonitor::Item>::__vdeallocate(void **a1)
{
  void *v1;
  uint64_t v3;
  void *v4;

  v1 = *a1;
  if (*a1)
  {
    v3 = (uint64_t)a1[1];
    v4 = *a1;
    if ((void *)v3 != v1)
    {
      do
      {
        v3 -= 80;
        std::allocator<CLMicroLocationRapportMonitor::Item>::destroy[abi:ne180100]((uint64_t)(a1 + 2), v3);
      }
      while ((void *)v3 != v1);
      v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

uint64_t std::vector<CLMicroLocationConfigurationTable::Entry>::__emplace_back_slow_path<std::string const&,CLMicroLocationProto::Configuration &,boost::uuids::uuid const&>(uint64_t *a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v5;
  unint64_t v6;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  void *v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t *v18;

  v5 = 0x6DB6DB6DB6DB6DB7 * ((a1[1] - *a1) >> 4);
  v6 = v5 + 1;
  if ((unint64_t)(v5 + 1) > 0x249249249249249)
    std::vector<CLMicroLocationProto::ConfidenceReason>::__throw_length_error[abi:ne180100]();
  if (0xDB6DB6DB6DB6DB6ELL * ((a1[2] - *a1) >> 4) > v6)
    v6 = 0xDB6DB6DB6DB6DB6ELL * ((a1[2] - *a1) >> 4);
  if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((a1[2] - *a1) >> 4)) >= 0x124924924924924)
    v10 = 0x249249249249249;
  else
    v10 = v6;
  v18 = a1 + 2;
  if (v10)
    v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CLMicroLocationConfigurationTable::Entry>>((uint64_t)(a1 + 2), v10);
  else
    v11 = 0;
  v14 = v11;
  v15 = &v11[112 * v5];
  v17 = &v11[112 * v10];
  std::allocator<CLMicroLocationConfigurationTable::Entry>::construct[abi:ne180100]<CLMicroLocationConfigurationTable::Entry,std::string const&,CLMicroLocationProto::Configuration &,boost::uuids::uuid const&>((uint64_t)(a1 + 2), (uint64_t)v15, a2, a3, a4);
  v16 = v15 + 112;
  std::vector<CLMicroLocationConfigurationTable::Entry>::__swap_out_circular_buffer(a1, &v14);
  v12 = a1[1];
  std::__split_buffer<CLMicroLocationConfigurationTable::Entry>::~__split_buffer(&v14);
  return v12;
}

void sub_241A905AC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<CLMicroLocationConfigurationTable::Entry>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

void std::allocator<CLMicroLocationConfigurationTable::Entry>::construct[abi:ne180100]<CLMicroLocationConfigurationTable::Entry,std::string const&,CLMicroLocationProto::Configuration &,boost::uuids::uuid const&>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  std::string __p;

  if (*(char *)(a3 + 23) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  else
    __p = *(std::string *)a3;
  CLMicroLocationConfigurationTable::Entry::Entry(a2, &__p, a4, *a5, a5[1]);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_241A90640(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::__function::__func<CLMicroLocationFingerprintConfiguration (*)(void),std::allocator<CLMicroLocationFingerprintConfiguration (*)(void)>,CLMicroLocationFingerprintConfiguration ()(void)>::~__func()
{
  JUMPOUT(0x2426A04D4);
}

_QWORD *std::__function::__func<CLMicroLocationFingerprintConfiguration (*)(void),std::allocator<CLMicroLocationFingerprintConfiguration (*)(void)>,CLMicroLocationFingerprintConfiguration ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_2511D63B8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<CLMicroLocationFingerprintConfiguration (*)(void),std::allocator<CLMicroLocationFingerprintConfiguration (*)(void)>,CLMicroLocationFingerprintConfiguration ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_2511D63B8;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<CLMicroLocationFingerprintConfiguration (*)(void),std::allocator<CLMicroLocationFingerprintConfiguration (*)(void)>,CLMicroLocationFingerprintConfiguration ()(void)>::operator()(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 8))();
}

uint64_t std::__function::__func<CLMicroLocationFingerprintConfiguration (*)(void),std::allocator<CLMicroLocationFingerprintConfiguration (*)(void)>,CLMicroLocationFingerprintConfiguration ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<CLMicroLocationFingerprintConfiguration (*)(void),std::allocator<CLMicroLocationFingerprintConfiguration (*)(void)>,CLMicroLocationFingerprintConfiguration ()(void)>::target_type()
{
}

void std::__introsort<std::_ClassicAlgPolicy,CLMicroLocationLearner::learnMagicalMomentsModelInternal(NSMutableDictionary *,std::vector<CLMicroLocationRecordingEventsTable::Entry> &,std::function<BOOL ()(void)> const&,CLMicroLocationAnchorAppearanceMap const&,CLMicroLocationFingerprintPool &,std::chrono::time_point<cl::chrono::CFAbsoluteTimeClock,std::chrono::duration<long double,std::ratio<1l,1l>>>,boost::uuids::uuid const&,std::optional<CLMicroLocationModelTable::Entry> const&,CLMicroLocationProto::Model_ModelType)::$_0 &,CLMicroLocationRecordingEventsTable::Entry*,false>(unint64_t *a1, unint64_t *a2, uint64_t a3, char a4)
{
  __int128 *v6;
  unint64_t *v7;
  unint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  __int128 v15;
  unint64_t v16;
  __int128 v17;
  __int128 v18;
  unint64_t v19;
  unint64_t v20;
  int v21;
  int v22;
  __int128 v23;
  unint64_t v24;
  __int128 v25;
  uint64_t v26;
  void **v27;
  __int128 v28;
  unint64_t v29;
  unint64_t v30;
  int v31;
  unint64_t *v32;
  __int128 *v33;
  __int128 *v34;
  unint64_t v35;
  unint64_t v36;
  int v37;
  unint64_t *v38;
  unint64_t v39;
  unint64_t v40;
  int v41;
  __int128 *v42;
  unint64_t *v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  int v47;
  __int128 *v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  int v52;
  unint64_t *v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  void **v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  BOOL v63;
  BOOL v64;
  unint64_t *v65;
  unint64_t v66;
  unint64_t v67;
  int v68;
  unint64_t *v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  int v73;
  __int128 *v74;
  __int128 *v75;
  unint64_t v76;
  unint64_t v77;
  unint64_t v78;
  int v79;
  unint64_t *v80;
  unint64_t v81;
  unint64_t v82;
  unint64_t v83;
  int v84;
  __int128 *v85;
  unint64_t v86;
  unint64_t v87;
  unint64_t v88;
  int v89;
  unint64_t *v90;
  void **v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  void **v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  unint64_t v101;
  unint64_t v102;
  unint64_t *v103;
  uint64_t v104;
  CLMicroLocationProto::RecordingEvent *v105;
  unint64_t *v106;
  unint64_t *v107;
  unint64_t v108;
  unint64_t v109;
  int v110;
  __int128 v111;
  const CLMicroLocationProto::RecordingEvent *v112;
  uint64_t v113;
  char *v114;
  void **v115;
  char *v116;
  unint64_t v117;
  unint64_t v118;
  int v119;
  uint64_t v120;
  __int128 v121;
  void **v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  int64_t v126;
  int64_t v127;
  int64_t v128;
  uint64_t v129;
  unint64_t *v130;
  unint64_t v131;
  unint64_t v132;
  int v133;
  unint64_t *v134;
  unint64_t v135;
  unint64_t v136;
  int v137;
  __int128 v138;
  unint64_t *v139;
  __int128 v140;
  __int128 v141;
  unint64_t *v142;
  __int128 v143;
  unint64_t *v144;
  __int128 v145;
  void **v146;
  __int128 v147;
  __int128 v148;
  __int128 v149;
  unint64_t v150;
  unint64_t v151;
  int v152;
  unint64_t v153;
  unint64_t v154;
  int v155;
  void **v156;
  __int128 v157;
  __int128 v158;
  __int128 v159;
  __int128 v160;
  int64_t v161;
  uint64_t v162;
  __int128 v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  unint64_t v167;
  unint64_t v168;
  int v169;
  __int128 v170;
  void **v171;
  __int128 v172;
  __int128 v173;
  __int128 v174;
  void **v175;
  __int128 *v176;
  __int128 v177;
  __int128 v178;
  __int128 v179;
  void **v180;
  __int128 v181;
  unint64_t *v182;
  unint64_t *v183;
  __int128 v184;
  uint64_t v185;
  unint64_t v186;
  unint64_t *v187;
  unint64_t v188;
  unint64_t v189;
  __int128 v190;
  int v191;
  __int128 v192;
  __int128 v193;
  __int128 v194;
  __int128 v195;
  uint64_t v196;
  __int128 v197;
  void **v198;
  __int128 v199;
  __int128 v200;
  __int128 v201;
  unint64_t v202;
  unint64_t v203;
  int v204;
  void **v205;
  __int128 v206;
  __int128 v207;
  __int128 v208;
  __int128 v209;
  int v211;
  unint64_t *v212;
  unint64_t *i;
  unint64_t *v214;
  unint64_t v215;
  unint64_t v216;
  unint64_t *v217;
  int v218;
  __int128 v219;
  unint64_t *v220;
  void **v221;
  unint64_t v222;
  unint64_t v223;
  int v224;
  __int128 v225;
  void **v226;
  __int128 v227;
  __int128 v228;
  __int128 v229;
  CLMicroLocationProto::RecordingEvent *v230;
  CLMicroLocationProto::RecordingEvent *v232;
  __int128 v234;
  unint64_t v235;
  __int128 v236;
  unint64_t v237;
  _BYTE v238[28];
  _BYTE v239[144];
  __int128 v240;
  char v241;
  __int128 v242;
  unint64_t v243;
  __int128 __p;
  unint64_t v245;
  _OWORD v246[2];
  _BYTE v247[144];
  __int128 v248;
  char v249;
  uint64_t v250;

  v250 = *MEMORY[0x24BDAC8D0];
LABEL_2:
  v6 = (__int128 *)a2;
  v7 = a2 - 31;
  v8 = a1;
  while (2)
  {
    a1 = v8;
    v9 = (char *)v6 - (char *)v8;
    v10 = 0xEF7BDEF7BDEF7BDFLL * (v9 >> 3);
    switch(v10)
    {
      case 0:
      case 1:
        return;
      case 2:
        v101 = bswap64(*(a2 - 31));
        v102 = bswap64(*a1);
        if (v101 != v102 || (v101 = bswap64(*(a2 - 30)), v102 = bswap64(a1[1]), v101 != v102))
        {
          if (v101 < v102)
            v211 = -1;
          else
            v211 = 1;
          if (v211 < 0)
            std::swap[abi:ne180100]<CLMicroLocationRecordingEventsTable::Entry>((__int128 *)a1, (__int128 *)(a2 - 31));
        }
        return;
      case 3:
        std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,CLMicroLocationLearner::semiSupervisedLearnWrapper(CLMicroLocationClientUtils::ClientIdAndClientServiceId const&,std::vector<CLMicroLocationProto::EventType> const&,CLMicroLocationProto::Model_GenerationAlgorithm,NSMutableDictionary *,std::function<BOOL ()(void)>,CLMicroLocationFingerprintPool &,std::string const&,boost::uuids::uuid const&)::$_2 &,CLMicroLocationRecordingEventsTable::Entry *>(a1, a1 + 31, v7);
        return;
      case 4:
        std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,CLMicroLocationLearner::semiSupervisedLearnWrapper(CLMicroLocationClientUtils::ClientIdAndClientServiceId const&,std::vector<CLMicroLocationProto::EventType> const&,CLMicroLocationProto::Model_GenerationAlgorithm,NSMutableDictionary *,std::function<BOOL ()(void)>,CLMicroLocationFingerprintPool &,std::string const&,boost::uuids::uuid const&)::$_2 &,CLMicroLocationRecordingEventsTable::Entry *>(a1, a1 + 31, a1 + 62, v7);
        return;
      case 5:
        std::__sort5_maybe_branchless[abi:ne180100]<std::_ClassicAlgPolicy,CLMicroLocationLearner::semiSupervisedLearnWrapper(CLMicroLocationClientUtils::ClientIdAndClientServiceId const&,std::vector<CLMicroLocationProto::EventType> const&,CLMicroLocationProto::Model_GenerationAlgorithm,NSMutableDictionary *,std::function<BOOL ()(void)>,CLMicroLocationFingerprintPool &,std::string const&,boost::uuids::uuid const&)::$_2 &,CLMicroLocationRecordingEventsTable::Entry *,0>(a1, a1 + 31, a1 + 62, a1 + 93, v7);
        return;
      default:
        if (v9 > 5951)
        {
          if (!a3)
          {
            if (a1 != (unint64_t *)v6)
            {
              v126 = (unint64_t)(v10 - 2) >> 1;
              v127 = v126;
              do
              {
                v128 = v127;
                if (v126 >= v127)
                {
                  v129 = (2 * v127) | 1;
                  v130 = &a1[31 * v129];
                  if (2 * v127 + 2 < v10)
                  {
                    v131 = bswap64(*v130);
                    v132 = bswap64(v130[31]);
                    if (v131 == v132 && (v131 = bswap64(v130[1]), v132 = bswap64(v130[32]), v131 == v132))
                      v133 = 0;
                    else
                      v133 = v131 < v132 ? -1 : 1;
                    if (v133 < 0)
                    {
                      v130 += 31;
                      v129 = 2 * v127 + 2;
                    }
                  }
                  v134 = &a1[31 * v127];
                  v135 = bswap64(*v130);
                  v136 = bswap64(*v134);
                  if (v135 == v136 && (v135 = bswap64(v130[1]), v136 = bswap64(v134[1]), v135 == v136)
                    || (v135 < v136 ? (v137 = -1) : (v137 = 1), (v137 & 0x80000000) == 0))
                  {
                    v138 = *(_OWORD *)v134;
                    v243 = v134[2];
                    v242 = v138;
                    v139 = &a1[31 * v128];
                    v140 = *(_OWORD *)(v139 + 3);
                    v245 = v139[5];
                    __p = v140;
                    v139[4] = 0;
                    v139[5] = 0;
                    v139[3] = 0;
                    v141 = *((_OWORD *)v139 + 3);
                    *(_OWORD *)((char *)v246 + 12) = *(_OWORD *)((char *)v139 + 60);
                    v246[0] = v141;
                    CLMicroLocationProto::RecordingEvent::RecordingEvent((CLMicroLocationProto::RecordingEvent *)v247, (const CLMicroLocationProto::RecordingEvent *)(v139 + 10));
                    v142 = &a1[31 * v128];
                    v143 = *((_OWORD *)v142 + 14);
                    v249 = *((_BYTE *)v142 + 240);
                    v248 = v143;
                    do
                    {
                      v144 = v130;
                      v145 = *(_OWORD *)v130;
                      v134[2] = v130[2];
                      *(_OWORD *)v134 = v145;
                      v146 = (void **)(v134 + 3);
                      if (*((char *)v134 + 47) < 0)
                        operator delete(*v146);
                      v147 = *(_OWORD *)(v144 + 3);
                      v134[5] = v144[5];
                      *(_OWORD *)v146 = v147;
                      *((_BYTE *)v144 + 47) = 0;
                      *((_BYTE *)v144 + 24) = 0;
                      v148 = *((_OWORD *)v144 + 3);
                      *(_OWORD *)((char *)v134 + 60) = *(_OWORD *)((char *)v144 + 60);
                      *((_OWORD *)v134 + 3) = v148;
                      CLMicroLocationProto::RecordingEvent::CopyFrom((CLMicroLocationProto::RecordingEvent *)(v134 + 10), (const CLMicroLocationProto::RecordingEvent *)(v144 + 10));
                      v149 = *((_OWORD *)v144 + 14);
                      *((_BYTE *)v134 + 240) = *((_BYTE *)v144 + 240);
                      *((_OWORD *)v134 + 14) = v149;
                      if (v126 < v129)
                        break;
                      v130 = &a1[31 * ((2 * v129) | 1)];
                      if (2 * v129 + 2 >= v10)
                      {
                        v129 = (2 * v129) | 1;
                      }
                      else
                      {
                        v150 = bswap64(*v130);
                        v151 = bswap64(v130[31]);
                        if (v150 == v151 && (v150 = bswap64(v130[1]), v151 = bswap64(v130[32]), v150 == v151))
                          v152 = 0;
                        else
                          v152 = v150 < v151 ? -1 : 1;
                        if (v152 >= 0)
                        {
                          v129 = (2 * v129) | 1;
                        }
                        else
                        {
                          v130 += 31;
                          v129 = 2 * v129 + 2;
                        }
                      }
                      v153 = bswap64(*v130);
                      v154 = bswap64(v242);
                      if (v153 == v154
                        && (v153 = bswap64(v130[1]), v154 = bswap64(*((unint64_t *)&v242 + 1)), v153 == v154))
                      {
                        v155 = 0;
                      }
                      else
                      {
                        v155 = v153 < v154 ? -1 : 1;
                      }
                      v134 = v144;
                    }
                    while ((v155 & 0x80000000) == 0);
                    v156 = (void **)(v144 + 3);
                    v157 = v242;
                    v144[2] = v243;
                    *(_OWORD *)v144 = v157;
                    if (*((char *)v144 + 47) < 0)
                      operator delete(*v156);
                    v158 = __p;
                    v144[5] = v245;
                    *(_OWORD *)v156 = v158;
                    HIBYTE(v245) = 0;
                    LOBYTE(__p) = 0;
                    v159 = *(_OWORD *)((char *)v246 + 12);
                    *((_OWORD *)v144 + 3) = v246[0];
                    *(_OWORD *)((char *)v144 + 60) = v159;
                    CLMicroLocationProto::RecordingEvent::CopyFrom((CLMicroLocationProto::RecordingEvent *)(v144 + 10), (const CLMicroLocationProto::RecordingEvent *)v247);
                    v160 = v248;
                    *((_BYTE *)v144 + 240) = v249;
                    *((_OWORD *)v144 + 14) = v160;
                    CLMicroLocationProto::RecordingEvent::~RecordingEvent((CLMicroLocationProto::RecordingEvent *)v247);
                    if (SHIBYTE(v245) < 0)
                      operator delete((void *)__p);
                  }
                }
                v127 = v128 - 1;
              }
              while (v128);
              v161 = v9 / 0xF8uLL;
              v230 = (CLMicroLocationProto::RecordingEvent *)(a1 + 3);
              do
              {
                v235 = a1[2];
                v234 = *(_OWORD *)a1;
                v236 = *(_OWORD *)v230;
                v237 = a1[5];
                a1[4] = 0;
                a1[5] = 0;
                *(_QWORD *)v230 = 0;
                *(_OWORD *)v238 = *((_OWORD *)a1 + 3);
                *(_OWORD *)&v238[12] = *(_OWORD *)((char *)a1 + 60);
                CLMicroLocationProto::RecordingEvent::RecordingEvent((CLMicroLocationProto::RecordingEvent *)v239, (const CLMicroLocationProto::RecordingEvent *)(a1 + 10));
                v162 = 0;
                v163 = *((_OWORD *)a1 + 14);
                v241 = *((_BYTE *)a1 + 240);
                v240 = v163;
                v164 = (uint64_t)a1;
                do
                {
                  v165 = v164 + 248 * v162 + 248;
                  v166 = 2 * v162;
                  v162 = (2 * v162) | 1;
                  if (v166 + 2 < v161)
                  {
                    v167 = bswap64(*(_QWORD *)v165);
                    v168 = bswap64(*(_QWORD *)(v165 + 248));
                    if (v167 == v168
                      && (v167 = bswap64(*(_QWORD *)(v165 + 8)), v168 = bswap64(*(_QWORD *)(v165 + 256)), v167 == v168))
                    {
                      v169 = 0;
                    }
                    else
                    {
                      v169 = v167 < v168 ? -1 : 1;
                    }
                    if (v169 < 0)
                    {
                      v165 += 248;
                      v162 = v166 + 2;
                    }
                  }
                  v170 = *(_OWORD *)v165;
                  *(_QWORD *)(v164 + 16) = *(_QWORD *)(v165 + 16);
                  *(_OWORD *)v164 = v170;
                  v171 = (void **)(v164 + 24);
                  if (*(char *)(v164 + 47) < 0)
                    operator delete(*v171);
                  v172 = *(_OWORD *)(v165 + 24);
                  *(_QWORD *)(v164 + 40) = *(_QWORD *)(v165 + 40);
                  *(_OWORD *)v171 = v172;
                  *(_BYTE *)(v165 + 47) = 0;
                  *(_BYTE *)(v165 + 24) = 0;
                  v173 = *(_OWORD *)(v165 + 48);
                  *(_OWORD *)(v164 + 60) = *(_OWORD *)(v165 + 60);
                  *(_OWORD *)(v164 + 48) = v173;
                  CLMicroLocationProto::RecordingEvent::CopyFrom((CLMicroLocationProto::RecordingEvent *)(v164 + 80), (const CLMicroLocationProto::RecordingEvent *)(v165 + 80));
                  v174 = *(_OWORD *)(v165 + 224);
                  *(_BYTE *)(v164 + 240) = *(_BYTE *)(v165 + 240);
                  *(_OWORD *)(v164 + 224) = v174;
                  v164 = v165;
                }
                while (v162 <= (uint64_t)((unint64_t)(v161 - 2) >> 1));
                v175 = (void **)(v165 + 24);
                v176 = (__int128 *)(v165 + 48);
                v232 = (CLMicroLocationProto::RecordingEvent *)(v165 + 224);
                if ((unint64_t *)v165 == a2 - 31)
                {
                  *(_QWORD *)(v165 + 16) = v235;
                  *(_OWORD *)v165 = v234;
                  if (*(char *)(v165 + 47) < 0)
                    operator delete(*v175);
                  *(_QWORD *)(v165 + 40) = v237;
                  *(_OWORD *)v175 = v236;
                  *(_OWORD *)(v165 + 60) = *(_OWORD *)&v238[12];
                  *v176 = *(_OWORD *)v238;
                  CLMicroLocationProto::RecordingEvent::CopyFrom((CLMicroLocationProto::RecordingEvent *)(v165 + 80), (const CLMicroLocationProto::RecordingEvent *)v239);
                  v190 = v240;
                  *(_BYTE *)(v165 + 240) = v241;
                  *(_OWORD *)v232 = v190;
                }
                else
                {
                  v177 = *(_OWORD *)(a2 - 31);
                  *(_QWORD *)(v165 + 16) = *(a2 - 29);
                  *(_OWORD *)v165 = v177;
                  if (*(char *)(v165 + 47) < 0)
                    operator delete(*v175);
                  v178 = *((_OWORD *)a2 - 14);
                  *(_QWORD *)(v165 + 40) = *(a2 - 26);
                  *(_OWORD *)v175 = v178;
                  *((_BYTE *)a2 - 201) = 0;
                  *((_BYTE *)a2 - 224) = 0;
                  v179 = *(_OWORD *)(a2 - 25);
                  *(_OWORD *)(v165 + 60) = *(_OWORD *)((char *)a2 - 188);
                  *v176 = v179;
                  CLMicroLocationProto::RecordingEvent::CopyFrom((CLMicroLocationProto::RecordingEvent *)(v165 + 80), (const CLMicroLocationProto::RecordingEvent *)(a2 - 21));
                  v180 = (void **)(a2 - 28);
                  v181 = *(_OWORD *)(a2 - 3);
                  *(_BYTE *)(v165 + 240) = *((_BYTE *)a2 - 8);
                  *(_OWORD *)v232 = v181;
                  *(a2 - 29) = v235;
                  *(_OWORD *)(a2 - 31) = v234;
                  if (*((char *)a2 - 201) < 0)
                    operator delete(*v180);
                  v182 = a2 - 25;
                  *(a2 - 26) = v237;
                  *(_OWORD *)v180 = v236;
                  *(_OWORD *)((char *)v182 + 12) = *(_OWORD *)&v238[12];
                  *(_OWORD *)v182 = *(_OWORD *)v238;
                  CLMicroLocationProto::RecordingEvent::CopyFrom((CLMicroLocationProto::RecordingEvent *)(a2 - 21), (const CLMicroLocationProto::RecordingEvent *)v239);
                  v183 = a2 - 3;
                  v184 = v240;
                  *((_BYTE *)v183 + 16) = v241;
                  *(_OWORD *)v183 = v184;
                  v185 = v165 - (_QWORD)a1 + 248;
                  if (v185 >= 249)
                  {
                    v186 = (v185 / 0xF8uLL - 2) >> 1;
                    v187 = &a1[31 * v186];
                    v188 = bswap64(*v187);
                    v189 = bswap64(*(_QWORD *)v165);
                    if (v188 != v189 || (v188 = bswap64(v187[1]), v189 = bswap64(*(_QWORD *)(v165 + 8)), v188 != v189))
                    {
                      v191 = v188 < v189 ? -1 : 1;
                      if (v191 < 0)
                      {
                        v192 = *(_OWORD *)v165;
                        v243 = *(_QWORD *)(v165 + 16);
                        v242 = v192;
                        v193 = *(_OWORD *)v175;
                        v245 = *(_QWORD *)(v165 + 40);
                        __p = v193;
                        *(_QWORD *)(v165 + 32) = 0;
                        *(_QWORD *)(v165 + 40) = 0;
                        *v175 = 0;
                        v194 = *v176;
                        *(_OWORD *)((char *)v246 + 12) = *(_OWORD *)(v165 + 60);
                        v246[0] = v194;
                        CLMicroLocationProto::RecordingEvent::RecordingEvent((CLMicroLocationProto::RecordingEvent *)v247, (const CLMicroLocationProto::RecordingEvent *)(v165 + 80));
                        v195 = *(_OWORD *)v232;
                        v249 = *(_BYTE *)(v165 + 240);
                        v248 = v195;
                        do
                        {
                          v196 = (uint64_t)v187;
                          v197 = *(_OWORD *)v187;
                          *(_QWORD *)(v165 + 16) = v187[2];
                          *(_OWORD *)v165 = v197;
                          v198 = (void **)(v165 + 24);
                          if (*(char *)(v165 + 47) < 0)
                            operator delete(*v198);
                          v199 = *(_OWORD *)(v187 + 3);
                          *(_QWORD *)(v165 + 40) = v187[5];
                          *(_OWORD *)v198 = v199;
                          *((_BYTE *)v187 + 47) = 0;
                          *((_BYTE *)v187 + 24) = 0;
                          v200 = *((_OWORD *)v187 + 3);
                          *(_OWORD *)(v165 + 60) = *(_OWORD *)((char *)v187 + 60);
                          *(_OWORD *)(v165 + 48) = v200;
                          CLMicroLocationProto::RecordingEvent::CopyFrom((CLMicroLocationProto::RecordingEvent *)(v165 + 80), (const CLMicroLocationProto::RecordingEvent *)(v187 + 10));
                          v201 = *((_OWORD *)v187 + 14);
                          *(_BYTE *)(v165 + 240) = *((_BYTE *)v187 + 240);
                          *(_OWORD *)(v165 + 224) = v201;
                          if (!v186)
                            break;
                          v186 = (v186 - 1) >> 1;
                          v187 = &a1[31 * v186];
                          v202 = bswap64(*v187);
                          v203 = bswap64(v242);
                          if (v202 == v203
                            && (v202 = bswap64(v187[1]), v203 = bswap64(*((unint64_t *)&v242 + 1)), v202 == v203))
                          {
                            v204 = 0;
                          }
                          else
                          {
                            v204 = v202 < v203 ? -1 : 1;
                          }
                          v165 = v196;
                        }
                        while (v204 < 0);
                        v205 = (void **)(v196 + 24);
                        v206 = v242;
                        *(_QWORD *)(v196 + 16) = v243;
                        *(_OWORD *)v196 = v206;
                        if (*(char *)(v196 + 47) < 0)
                          operator delete(*v205);
                        v207 = __p;
                        *(_QWORD *)(v196 + 40) = v245;
                        *(_OWORD *)v205 = v207;
                        HIBYTE(v245) = 0;
                        LOBYTE(__p) = 0;
                        v208 = *(_OWORD *)((char *)v246 + 12);
                        *(_OWORD *)(v196 + 48) = v246[0];
                        *(_OWORD *)(v196 + 60) = v208;
                        CLMicroLocationProto::RecordingEvent::CopyFrom((CLMicroLocationProto::RecordingEvent *)(v196 + 80), (const CLMicroLocationProto::RecordingEvent *)v247);
                        v209 = v248;
                        *(_BYTE *)(v196 + 240) = v249;
                        *(_OWORD *)(v196 + 224) = v209;
                        CLMicroLocationProto::RecordingEvent::~RecordingEvent((CLMicroLocationProto::RecordingEvent *)v247);
                        if (SHIBYTE(v245) < 0)
                          operator delete((void *)__p);
                      }
                    }
                  }
                }
                CLMicroLocationProto::RecordingEvent::~RecordingEvent((CLMicroLocationProto::RecordingEvent *)v239);
                a2 -= 31;
              }
              while (v161-- > 2);
            }
            return;
          }
          v11 = (unint64_t)v10 >> 1;
          v12 = &a1[31 * ((unint64_t)v10 >> 1)];
          if ((unint64_t)v9 < 0x7C01)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,CLMicroLocationLearner::semiSupervisedLearnWrapper(CLMicroLocationClientUtils::ClientIdAndClientServiceId const&,std::vector<CLMicroLocationProto::EventType> const&,CLMicroLocationProto::Model_GenerationAlgorithm,NSMutableDictionary *,std::function<BOOL ()(void)>,CLMicroLocationFingerprintPool &,std::string const&,boost::uuids::uuid const&)::$_2 &,CLMicroLocationRecordingEventsTable::Entry *>(v12, a1, v7);
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,CLMicroLocationLearner::semiSupervisedLearnWrapper(CLMicroLocationClientUtils::ClientIdAndClientServiceId const&,std::vector<CLMicroLocationProto::EventType> const&,CLMicroLocationProto::Model_GenerationAlgorithm,NSMutableDictionary *,std::function<BOOL ()(void)>,CLMicroLocationFingerprintPool &,std::string const&,boost::uuids::uuid const&)::$_2 &,CLMicroLocationRecordingEventsTable::Entry *>(a1, v12, v7);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,CLMicroLocationLearner::semiSupervisedLearnWrapper(CLMicroLocationClientUtils::ClientIdAndClientServiceId const&,std::vector<CLMicroLocationProto::EventType> const&,CLMicroLocationProto::Model_GenerationAlgorithm,NSMutableDictionary *,std::function<BOOL ()(void)>,CLMicroLocationFingerprintPool &,std::string const&,boost::uuids::uuid const&)::$_2 &,CLMicroLocationRecordingEventsTable::Entry *>(a1 + 31, &a1[31 * v11 - 31], a2 - 62);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,CLMicroLocationLearner::semiSupervisedLearnWrapper(CLMicroLocationClientUtils::ClientIdAndClientServiceId const&,std::vector<CLMicroLocationProto::EventType> const&,CLMicroLocationProto::Model_GenerationAlgorithm,NSMutableDictionary *,std::function<BOOL ()(void)>,CLMicroLocationFingerprintPool &,std::string const&,boost::uuids::uuid const&)::$_2 &,CLMicroLocationRecordingEventsTable::Entry *>(a1 + 62, &a1[31 * v11 + 31], a2 - 93);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,CLMicroLocationLearner::semiSupervisedLearnWrapper(CLMicroLocationClientUtils::ClientIdAndClientServiceId const&,std::vector<CLMicroLocationProto::EventType> const&,CLMicroLocationProto::Model_GenerationAlgorithm,NSMutableDictionary *,std::function<BOOL ()(void)>,CLMicroLocationFingerprintPool &,std::string const&,boost::uuids::uuid const&)::$_2 &,CLMicroLocationRecordingEventsTable::Entry *>(&a1[31 * v11 - 31], v12, &a1[31 * v11 + 31]);
            std::swap[abi:ne180100]<CLMicroLocationRecordingEventsTable::Entry>((__int128 *)a1, (__int128 *)v12);
          }
          --a3;
          if ((a4 & 1) == 0)
          {
            if ((v13 = bswap64(*(a1 - 31)), v14 = bswap64(*a1), v13 == v14)
              && (v13 = bswap64(*(a1 - 30)), v14 = bswap64(a1[1]), v13 == v14)
              || (v13 < v14 ? (v22 = -1) : (v22 = 1), (v22 & 0x80000000) == 0))
            {
              v15 = *(_OWORD *)a1;
              v243 = a1[2];
              v242 = v15;
              v16 = a1[5];
              __p = *(_OWORD *)(a1 + 3);
              v245 = v16;
              a1[4] = 0;
              a1[5] = 0;
              a1[3] = 0;
              v17 = *(_OWORD *)((char *)a1 + 60);
              v246[0] = *((_OWORD *)a1 + 3);
              *(_OWORD *)((char *)v246 + 12) = v17;
              CLMicroLocationProto::RecordingEvent::RecordingEvent((CLMicroLocationProto::RecordingEvent *)v247, (const CLMicroLocationProto::RecordingEvent *)(a1 + 10));
              v18 = *((_OWORD *)a1 + 14);
              v249 = *((_BYTE *)a1 + 240);
              v248 = v18;
              v19 = bswap64(v242);
              v20 = bswap64(*v7);
              if (v19 == v20
                && (v19 = bswap64(*((unint64_t *)&v242 + 1)), v20 = bswap64(*(a2 - 30)), v19 == v20))
              {
                v21 = 0;
              }
              else if (v19 < v20)
              {
                v21 = -1;
              }
              else
              {
                v21 = 1;
              }
              if (v21 < 0)
              {
                v69 = a1;
                v8 = a1;
                do
                {
                  v70 = v8[31];
                  v8 += 31;
                  v71 = bswap64(v242);
                  v72 = bswap64(v70);
                  if (v71 == v72
                    && (v71 = bswap64(*((unint64_t *)&v242 + 1)), v72 = bswap64(v69[32]), v71 == v72))
                  {
                    v73 = 0;
                  }
                  else if (v71 < v72)
                  {
                    v73 = -1;
                  }
                  else
                  {
                    v73 = 1;
                  }
                  v69 = v8;
                }
                while ((v73 & 0x80000000) == 0);
              }
              else
              {
                v65 = a1 + 31;
                do
                {
                  v8 = v65;
                  if (v65 >= (unint64_t *)v6)
                    break;
                  v66 = bswap64(v242);
                  v67 = bswap64(*v8);
                  if (v66 == v67 && (v66 = bswap64(*((unint64_t *)&v242 + 1)), v67 = bswap64(v8[1]), v66 == v67))
                    v68 = 0;
                  else
                    v68 = v66 < v67 ? -1 : 1;
                  v65 = v8 + 31;
                }
                while ((v68 & 0x80000000) == 0);
              }
              v74 = v6;
              if (v8 < (unint64_t *)v6)
              {
                v75 = v6;
                v74 = v6;
                do
                {
                  v76 = *((_QWORD *)v74 - 31);
                  v74 = (__int128 *)((char *)v74 - 248);
                  v77 = bswap64(v242);
                  v78 = bswap64(v76);
                  if (v77 == v78
                    && (v77 = bswap64(*((unint64_t *)&v242 + 1)), v78 = bswap64(*((_QWORD *)v75 - 30)),
                                                                         v77 == v78))
                  {
                    v79 = 0;
                  }
                  else if (v77 < v78)
                  {
                    v79 = -1;
                  }
                  else
                  {
                    v79 = 1;
                  }
                  v75 = v74;
                }
                while (v79 < 0);
              }
              while (v8 < (unint64_t *)v74)
              {
                std::swap[abi:ne180100]<CLMicroLocationRecordingEventsTable::Entry>((__int128 *)v8, v74);
                v80 = v8;
                do
                {
                  v81 = v8[31];
                  v8 += 31;
                  v82 = bswap64(v242);
                  v83 = bswap64(v81);
                  if (v82 == v83
                    && (v82 = bswap64(*((unint64_t *)&v242 + 1)), v83 = bswap64(v80[32]), v82 == v83))
                  {
                    v84 = 0;
                  }
                  else if (v82 < v83)
                  {
                    v84 = -1;
                  }
                  else
                  {
                    v84 = 1;
                  }
                  v80 = v8;
                }
                while ((v84 & 0x80000000) == 0);
                v85 = v74;
                do
                {
                  v86 = *((_QWORD *)v74 - 31);
                  v74 = (__int128 *)((char *)v74 - 248);
                  v87 = bswap64(v242);
                  v88 = bswap64(v86);
                  if (v87 == v88
                    && (v87 = bswap64(*((unint64_t *)&v242 + 1)), v88 = bswap64(*((_QWORD *)v85 - 30)),
                                                                         v87 == v88))
                  {
                    v89 = 0;
                  }
                  else if (v87 < v88)
                  {
                    v89 = -1;
                  }
                  else
                  {
                    v89 = 1;
                  }
                  v85 = v74;
                }
                while (v89 < 0);
              }
              v90 = v8 - 31;
              if (v8 - 31 != a1)
              {
                v91 = (void **)(a1 + 3);
                v92 = *(_OWORD *)v90;
                a1[2] = *(v8 - 29);
                *(_OWORD *)a1 = v92;
                if (*((char *)a1 + 47) < 0)
                  operator delete(*v91);
                v93 = *((_OWORD *)v8 - 14);
                a1[5] = *(v8 - 26);
                *(_OWORD *)v91 = v93;
                *((_BYTE *)v8 - 201) = 0;
                *((_BYTE *)v8 - 224) = 0;
                v94 = *(_OWORD *)(v8 - 25);
                *(_OWORD *)((char *)a1 + 60) = *(_OWORD *)((char *)v8 - 188);
                *((_OWORD *)a1 + 3) = v94;
                CLMicroLocationProto::RecordingEvent::CopyFrom((CLMicroLocationProto::RecordingEvent *)(a1 + 10), (const CLMicroLocationProto::RecordingEvent *)(v8 - 21));
                v95 = *(_OWORD *)(v8 - 3);
                *((_BYTE *)a1 + 240) = *((_BYTE *)v8 - 8);
                *((_OWORD *)a1 + 14) = v95;
              }
              v96 = v242;
              *(v8 - 29) = v243;
              *(_OWORD *)v90 = v96;
              v97 = (void **)(v8 - 28);
              if (*((char *)v8 - 201) < 0)
                operator delete(*v97);
              v98 = __p;
              *(v8 - 26) = v245;
              *(_OWORD *)v97 = v98;
              HIBYTE(v245) = 0;
              LOBYTE(__p) = 0;
              v99 = v246[0];
              *(_OWORD *)((char *)v8 - 188) = *(_OWORD *)((char *)v246 + 12);
              *(_OWORD *)(v8 - 25) = v99;
              CLMicroLocationProto::RecordingEvent::CopyFrom((CLMicroLocationProto::RecordingEvent *)(v8 - 21), (const CLMicroLocationProto::RecordingEvent *)v247);
              v100 = v248;
              *((_BYTE *)v8 - 8) = v249;
              *(_OWORD *)(v8 - 3) = v100;
              CLMicroLocationProto::RecordingEvent::~RecordingEvent((CLMicroLocationProto::RecordingEvent *)v247);
              if (SHIBYTE(v245) < 0)
                operator delete((void *)__p);
              goto LABEL_79;
            }
          }
          v23 = *(_OWORD *)a1;
          v243 = a1[2];
          v242 = v23;
          v24 = a1[5];
          __p = *(_OWORD *)(a1 + 3);
          v245 = v24;
          a1[4] = 0;
          a1[5] = 0;
          a1[3] = 0;
          v25 = *(_OWORD *)((char *)a1 + 60);
          v246[0] = *((_OWORD *)a1 + 3);
          *(_OWORD *)((char *)v246 + 12) = v25;
          CLMicroLocationProto::RecordingEvent::RecordingEvent((CLMicroLocationProto::RecordingEvent *)v247, (const CLMicroLocationProto::RecordingEvent *)(a1 + 10));
          v26 = 0;
          v27 = (void **)(a1 + 3);
          v28 = *((_OWORD *)a1 + 14);
          v249 = *((_BYTE *)a1 + 240);
          v248 = v28;
          do
          {
            v29 = bswap64(a1[v26 + 31]);
            v30 = bswap64(v242);
            if (v29 == v30
              && (v29 = bswap64(a1[v26 + 32]), v30 = bswap64(*((unint64_t *)&v242 + 1)), v29 == v30))
            {
              v31 = 0;
            }
            else if (v29 < v30)
            {
              v31 = -1;
            }
            else
            {
              v31 = 1;
            }
            v26 += 31;
          }
          while (v31 < 0);
          v32 = &a1[v26];
          v33 = v6;
          if (v26 == 31)
          {
            v38 = a2;
            while (v32 < v38)
            {
              v34 = (__int128 *)(v38 - 31);
              v39 = bswap64(*(v38 - 31));
              v40 = bswap64(v242);
              if (v39 == v40
                && (v39 = bswap64(*(v38 - 30)), v40 = bswap64(*((unint64_t *)&v242 + 1)), v39 == v40))
              {
                v41 = 0;
              }
              else if (v39 < v40)
              {
                v41 = -1;
              }
              else
              {
                v41 = 1;
              }
              v38 -= 31;
              if (v41 < 0)
                goto LABEL_47;
            }
            v34 = (__int128 *)v38;
          }
          else
          {
            do
            {
              v34 = (__int128 *)((char *)v33 - 248);
              v35 = bswap64(*((_QWORD *)v33 - 31));
              v36 = bswap64(v242);
              if (v35 == v36
                && (v35 = bswap64(*((_QWORD *)v33 - 30)), v36 = bswap64(*((unint64_t *)&v242 + 1)), v35 == v36))
              {
                v37 = 0;
              }
              else if (v35 < v36)
              {
                v37 = -1;
              }
              else
              {
                v37 = 1;
              }
              v33 = (__int128 *)((char *)v33 - 248);
            }
            while ((v37 & 0x80000000) == 0);
          }
LABEL_47:
          v8 = v32;
          if (v32 < (unint64_t *)v34)
          {
            v42 = v34;
            do
            {
              std::swap[abi:ne180100]<CLMicroLocationRecordingEventsTable::Entry>((__int128 *)v8, v42);
              v43 = v8;
              do
              {
                v44 = v8[31];
                v8 += 31;
                v45 = bswap64(v44);
                v46 = bswap64(v242);
                if (v45 == v46 && (v45 = bswap64(v43[32]), v46 = bswap64(*((unint64_t *)&v242 + 1)), v45 == v46))
                {
                  v47 = 0;
                }
                else if (v45 < v46)
                {
                  v47 = -1;
                }
                else
                {
                  v47 = 1;
                }
                v43 = v8;
              }
              while (v47 < 0);
              v48 = v42;
              do
              {
                v49 = *((_QWORD *)v42 - 31);
                v42 = (__int128 *)((char *)v42 - 248);
                v50 = bswap64(v49);
                v51 = bswap64(v242);
                if (v50 == v51
                  && (v50 = bswap64(*((_QWORD *)v48 - 30)), v51 = bswap64(*((unint64_t *)&v242 + 1)), v50 == v51))
                {
                  v52 = 0;
                }
                else if (v50 < v51)
                {
                  v52 = -1;
                }
                else
                {
                  v52 = 1;
                }
                v48 = v42;
              }
              while ((v52 & 0x80000000) == 0);
            }
            while (v8 < (unint64_t *)v42);
          }
          v53 = v8 - 31;
          if (v8 - 31 != a1)
          {
            v54 = *(_OWORD *)v53;
            a1[2] = *(v8 - 29);
            *(_OWORD *)a1 = v54;
            if (*((char *)a1 + 47) < 0)
              operator delete(*v27);
            v55 = *((_OWORD *)v8 - 14);
            a1[5] = *(v8 - 26);
            *(_OWORD *)v27 = v55;
            *((_BYTE *)v8 - 201) = 0;
            *((_BYTE *)v8 - 224) = 0;
            v56 = *(_OWORD *)(v8 - 25);
            *(_OWORD *)((char *)a1 + 60) = *(_OWORD *)((char *)v8 - 188);
            *((_OWORD *)a1 + 3) = v56;
            CLMicroLocationProto::RecordingEvent::CopyFrom((CLMicroLocationProto::RecordingEvent *)(a1 + 10), (const CLMicroLocationProto::RecordingEvent *)(v8 - 21));
            v57 = *(_OWORD *)(v8 - 3);
            *((_BYTE *)a1 + 240) = *((_BYTE *)v8 - 8);
            *((_OWORD *)a1 + 14) = v57;
          }
          v58 = v242;
          *(v8 - 29) = v243;
          *(_OWORD *)v53 = v58;
          v59 = (void **)(v8 - 28);
          if (*((char *)v8 - 201) < 0)
            operator delete(*v59);
          v60 = __p;
          *(v8 - 26) = v245;
          *(_OWORD *)v59 = v60;
          HIBYTE(v245) = 0;
          LOBYTE(__p) = 0;
          v61 = v246[0];
          *(_OWORD *)((char *)v8 - 188) = *(_OWORD *)((char *)v246 + 12);
          *(_OWORD *)(v8 - 25) = v61;
          CLMicroLocationProto::RecordingEvent::CopyFrom((CLMicroLocationProto::RecordingEvent *)(v8 - 21), (const CLMicroLocationProto::RecordingEvent *)v247);
          v62 = v248;
          *((_BYTE *)v8 - 8) = v249;
          *(_OWORD *)(v8 - 3) = v62;
          CLMicroLocationProto::RecordingEvent::~RecordingEvent((CLMicroLocationProto::RecordingEvent *)v247);
          if (SHIBYTE(v245) < 0)
            operator delete((void *)__p);
          v63 = v32 >= (unint64_t *)v34;
          v6 = (__int128 *)a2;
          if (!v63)
            goto LABEL_78;
          v64 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,CLMicroLocationLearner::learnMagicalMomentsModelInternal(NSMutableDictionary *,std::vector<CLMicroLocationRecordingEventsTable::Entry> &,std::function<BOOL ()(void)> const&,CLMicroLocationAnchorAppearanceMap const&,CLMicroLocationFingerprintPool &,std::chrono::time_point<cl::chrono::CFAbsoluteTimeClock,std::chrono::duration<long double,std::ratio<1l,1l>>>,boost::uuids::uuid const&,std::optional<CLMicroLocationModelTable::Entry> const&,CLMicroLocationProto::Model_ModelType)::$_0 &,CLMicroLocationRecordingEventsTable::Entry*>(a1, v8 - 31);
          if (!std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,CLMicroLocationLearner::learnMagicalMomentsModelInternal(NSMutableDictionary *,std::vector<CLMicroLocationRecordingEventsTable::Entry> &,std::function<BOOL ()(void)> const&,CLMicroLocationAnchorAppearanceMap const&,CLMicroLocationFingerprintPool &,std::chrono::time_point<cl::chrono::CFAbsoluteTimeClock,std::chrono::duration<long double,std::ratio<1l,1l>>>,boost::uuids::uuid const&,std::optional<CLMicroLocationModelTable::Entry> const&,CLMicroLocationProto::Model_ModelType)::$_0 &,CLMicroLocationRecordingEventsTable::Entry*>(v8, a2))
          {
            if (v64)
              continue;
LABEL_78:
            std::__introsort<std::_ClassicAlgPolicy,CLMicroLocationLearner::learnMagicalMomentsModelInternal(NSMutableDictionary *,std::vector<CLMicroLocationRecordingEventsTable::Entry> &,std::function<BOOL ()(void)> const&,CLMicroLocationAnchorAppearanceMap const&,CLMicroLocationFingerprintPool &,std::chrono::time_point<cl::chrono::CFAbsoluteTimeClock,std::chrono::duration<long double,std::ratio<1l,1l>>>,boost::uuids::uuid const&,std::optional<CLMicroLocationModelTable::Entry> const&,CLMicroLocationProto::Model_ModelType)::$_0 &,CLMicroLocationRecordingEventsTable::Entry*,false>(a1, v8 - 31, a3, a4 & 1);
LABEL_79:
            a4 = 0;
            continue;
          }
          a2 = v8 - 31;
          if (v64)
            return;
          goto LABEL_2;
        }
        if ((a4 & 1) == 0)
        {
          if (a1 == (unint64_t *)v6)
            return;
          v212 = a1 + 31;
          if (a1 + 31 == a2)
            return;
          for (i = a1 - 31; ; i += 31)
          {
            v214 = v212;
            v215 = bswap64(a1[31]);
            v216 = bswap64(*a1);
            if (v215 != v216)
              break;
            v215 = bswap64(v214[1]);
            v216 = bswap64(a1[1]);
            v217 = a2;
            if (v215 != v216)
              goto LABEL_280;
LABEL_298:
            v212 = v214 + 31;
            a1 = v214;
            if (v214 + 31 == v217)
              return;
          }
          v217 = a2;
LABEL_280:
          if (v215 < v216)
            v218 = -1;
          else
            v218 = 1;
          if (v218 < 0)
          {
            v219 = *(_OWORD *)v214;
            v243 = v214[2];
            v242 = v219;
            __p = *((_OWORD *)a1 + 17);
            v245 = a1[36];
            a1[34] = 0;
            a1[35] = 0;
            a1[36] = 0;
            v246[0] = *(_OWORD *)(a1 + 37);
            *(_OWORD *)((char *)v246 + 12) = *(_OWORD *)((char *)a1 + 308);
            CLMicroLocationProto::RecordingEvent::RecordingEvent((CLMicroLocationProto::RecordingEvent *)v247, (const CLMicroLocationProto::RecordingEvent *)(a1 + 41));
            v249 = *((_BYTE *)a1 + 488);
            v248 = *(_OWORD *)(a1 + 59);
            v220 = i;
            do
            {
              *((_OWORD *)v220 + 31) = *(_OWORD *)(v220 + 31);
              v220[64] = v220[33];
              v221 = (void **)(v220 + 65);
              if (*((char *)v220 + 543) < 0)
                operator delete(*v221);
              *(_OWORD *)v221 = *((_OWORD *)v220 + 17);
              v220[67] = v220[36];
              *((_BYTE *)v220 + 295) = 0;
              *((_BYTE *)v220 + 272) = 0;
              *((_OWORD *)v220 + 34) = *(_OWORD *)(v220 + 37);
              *(_OWORD *)((char *)v220 + 556) = *(_OWORD *)((char *)v220 + 308);
              CLMicroLocationProto::RecordingEvent::CopyFrom((CLMicroLocationProto::RecordingEvent *)(v220 + 72), (const CLMicroLocationProto::RecordingEvent *)(v220 + 41));
              *((_BYTE *)v220 + 736) = *((_BYTE *)v220 + 488);
              *((_OWORD *)v220 + 45) = *(_OWORD *)(v220 + 59);
              v222 = bswap64(v242);
              v223 = bswap64(*v220);
              if (v222 == v223
                && (v222 = bswap64(*((unint64_t *)&v242 + 1)), v223 = bswap64(v220[1]), v222 == v223))
              {
                v224 = 0;
              }
              else if (v222 < v223)
              {
                v224 = -1;
              }
              else
              {
                v224 = 1;
              }
              v220 -= 31;
            }
            while (v224 < 0);
            v225 = v242;
            v220[64] = v243;
            *((_OWORD *)v220 + 31) = v225;
            v226 = (void **)(v220 + 65);
            if (*((char *)v220 + 543) < 0)
              operator delete(*v226);
            v227 = __p;
            v220[67] = v245;
            *(_OWORD *)v226 = v227;
            HIBYTE(v245) = 0;
            LOBYTE(__p) = 0;
            v228 = v246[0];
            *(_OWORD *)((char *)v220 + 556) = *(_OWORD *)((char *)v246 + 12);
            *((_OWORD *)v220 + 34) = v228;
            CLMicroLocationProto::RecordingEvent::CopyFrom((CLMicroLocationProto::RecordingEvent *)(v220 + 72), (const CLMicroLocationProto::RecordingEvent *)v247);
            v229 = v248;
            *((_BYTE *)v220 + 736) = v249;
            *((_OWORD *)v220 + 45) = v229;
            CLMicroLocationProto::RecordingEvent::~RecordingEvent((CLMicroLocationProto::RecordingEvent *)v247);
            v217 = a2;
            if (SHIBYTE(v245) < 0)
              operator delete((void *)__p);
          }
          goto LABEL_298;
        }
        if (a1 != (unint64_t *)v6)
        {
          v103 = a1 + 31;
          if (a1 + 31 != a2)
          {
            v104 = 0;
            v105 = (CLMicroLocationProto::RecordingEvent *)v247;
            v106 = a1;
            do
            {
              v107 = v103;
              v108 = bswap64(v106[31]);
              v109 = bswap64(*v106);
              if (v108 != v109 || (v108 = bswap64(v107[1]), v109 = bswap64(v106[1]), v108 != v109))
              {
                v110 = v108 < v109 ? -1 : 1;
                if (v110 < 0)
                {
                  v111 = *(_OWORD *)v107;
                  v243 = v107[2];
                  v242 = v111;
                  __p = *((_OWORD *)v106 + 17);
                  v245 = v106[36];
                  v106[34] = 0;
                  v106[35] = 0;
                  v106[36] = 0;
                  v246[0] = *(_OWORD *)(v106 + 37);
                  *(_OWORD *)((char *)v246 + 12) = *(_OWORD *)((char *)v106 + 308);
                  v112 = v105;
                  CLMicroLocationProto::RecordingEvent::RecordingEvent(v105, (const CLMicroLocationProto::RecordingEvent *)(v106 + 41));
                  v249 = *((_BYTE *)v106 + 488);
                  v248 = *(_OWORD *)(v106 + 59);
                  v113 = v104;
                  while (1)
                  {
                    v114 = (char *)a1 + v113;
                    *(_OWORD *)(v114 + 248) = *(_OWORD *)((char *)a1 + v113);
                    *((_QWORD *)v114 + 33) = *(unint64_t *)((char *)a1 + v113 + 16);
                    v115 = (void **)((char *)a1 + v113 + 272);
                    if (*((char *)a1 + v113 + 295) < 0)
                      operator delete(*v115);
                    *(_OWORD *)v115 = *(_OWORD *)(v114 + 24);
                    *(unint64_t *)((char *)a1 + v113 + 288) = *((_QWORD *)v114 + 5);
                    v114[47] = 0;
                    v114[24] = 0;
                    *(_OWORD *)(v114 + 296) = *((_OWORD *)v114 + 3);
                    *(_OWORD *)(v114 + 308) = *(_OWORD *)(v114 + 60);
                    CLMicroLocationProto::RecordingEvent::CopyFrom((CLMicroLocationProto::RecordingEvent *)(v114 + 328), (const CLMicroLocationProto::RecordingEvent *)(v114 + 80));
                    v116 = (char *)a1 + v113;
                    *(_OWORD *)((char *)a1 + v113 + 472) = *(_OWORD *)((char *)a1 + v113 + 224);
                    *((_BYTE *)a1 + v113 + 488) = *((_BYTE *)a1 + v113 + 240);
                    if (!v113)
                      break;
                    v117 = bswap64(v242);
                    v118 = bswap64(*((_QWORD *)v116 - 31));
                    if (v117 == v118
                      && (v117 = bswap64(*((unint64_t *)&v242 + 1)),
                          v118 = bswap64(*((_QWORD *)v116 - 30)),
                          v117 == v118))
                    {
                      v119 = 0;
                    }
                    else if (v117 < v118)
                    {
                      v119 = -1;
                    }
                    else
                    {
                      v119 = 1;
                    }
                    v113 -= 248;
                    if ((v119 & 0x80000000) == 0)
                    {
                      v120 = (uint64_t)a1 + v113 + 248;
                      goto LABEL_169;
                    }
                  }
                  v120 = (uint64_t)a1;
LABEL_169:
                  v121 = v242;
                  *(_QWORD *)(v120 + 16) = v243;
                  *(_OWORD *)v120 = v121;
                  v122 = (void **)(v116 + 24);
                  if (*(char *)(v120 + 47) < 0)
                    operator delete(*v122);
                  v123 = __p;
                  *((_QWORD *)v116 + 5) = v245;
                  *(_OWORD *)v122 = v123;
                  HIBYTE(v245) = 0;
                  LOBYTE(__p) = 0;
                  v124 = v246[0];
                  *(_OWORD *)(v116 + 60) = *(_OWORD *)((char *)v246 + 12);
                  *((_OWORD *)v116 + 3) = v124;
                  v105 = v112;
                  CLMicroLocationProto::RecordingEvent::CopyFrom((CLMicroLocationProto::RecordingEvent *)(v116 + 80), v112);
                  v125 = v248;
                  v116[240] = v249;
                  *((_OWORD *)v116 + 14) = v125;
                  CLMicroLocationProto::RecordingEvent::~RecordingEvent(v112);
                  if (SHIBYTE(v245) < 0)
                    operator delete((void *)__p);
                }
              }
              v103 = v107 + 31;
              v104 += 248;
              v106 = v107;
            }
            while (v107 + 31 != a2);
          }
        }
        return;
    }
  }
}

void sub_241A91EA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, CLMicroLocationProto::RecordingEvent *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, CLMicroLocationProto::RecordingEvent *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,CLMicroLocationProto::RecordingEvent *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,void *__p,uint64_t a61,int a62,__int16 a63)
{
  char a65;

  if (a65 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,CLMicroLocationLearner::learnMagicalMomentsModelInternal(NSMutableDictionary *,std::vector<CLMicroLocationRecordingEventsTable::Entry> &,std::function<BOOL ()(void)> const&,CLMicroLocationAnchorAppearanceMap const&,CLMicroLocationFingerprintPool &,std::chrono::time_point<cl::chrono::CFAbsoluteTimeClock,std::chrono::duration<long double,std::ratio<1l,1l>>>,boost::uuids::uuid const&,std::optional<CLMicroLocationModelTable::Entry> const&,CLMicroLocationProto::Model_ModelType)::$_0 &,CLMicroLocationRecordingEventsTable::Entry*>(unint64_t *a1, unint64_t *a2)
{
  unint64_t *v2;
  unint64_t v4;
  _BOOL8 result;
  unint64_t v6;
  unint64_t v7;
  unint64_t *v8;
  unint64_t *v9;
  uint64_t v10;
  int v11;
  uint64_t *v12;
  CLMicroLocationProto::RecordingEvent *v13;
  unint64_t v14;
  unint64_t v15;
  int v16;
  uint64_t *v17;
  const CLMicroLocationProto::RecordingEvent *v18;
  uint64_t v19;
  char *v20;
  void **v21;
  char *v22;
  unint64_t v23;
  unint64_t v24;
  int v25;
  uint64_t v26;
  void **v27;
  int v28;
  unint64_t *v29;
  __int128 v30;
  unint64_t v31;
  __int128 __p;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  __int128 v36;
  char v37;
  uint64_t v38;

  v2 = a2;
  v38 = *MEMORY[0x24BDAC8D0];
  v4 = 0xEF7BDEF7BDEF7BDFLL * (a2 - a1);
  result = 1;
  switch(v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      v6 = bswap64(*(a2 - 31));
      v7 = bswap64(*a1);
      if (v6 != v7 || (v6 = bswap64(*(a2 - 30)), v7 = bswap64(a1[1]), v6 != v7))
      {
        v28 = v6 < v7 ? -1 : 1;
        if (v28 < 0)
        {
          std::swap[abi:ne180100]<CLMicroLocationRecordingEventsTable::Entry>((__int128 *)a1, (__int128 *)(a2 - 31));
          return 1;
        }
      }
      return result;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,CLMicroLocationLearner::semiSupervisedLearnWrapper(CLMicroLocationClientUtils::ClientIdAndClientServiceId const&,std::vector<CLMicroLocationProto::EventType> const&,CLMicroLocationProto::Model_GenerationAlgorithm,NSMutableDictionary *,std::function<BOOL ()(void)>,CLMicroLocationFingerprintPool &,std::string const&,boost::uuids::uuid const&)::$_2 &,CLMicroLocationRecordingEventsTable::Entry *>(a1, a1 + 31, a2 - 31);
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,CLMicroLocationLearner::semiSupervisedLearnWrapper(CLMicroLocationClientUtils::ClientIdAndClientServiceId const&,std::vector<CLMicroLocationProto::EventType> const&,CLMicroLocationProto::Model_GenerationAlgorithm,NSMutableDictionary *,std::function<BOOL ()(void)>,CLMicroLocationFingerprintPool &,std::string const&,boost::uuids::uuid const&)::$_2 &,CLMicroLocationRecordingEventsTable::Entry *>(a1, a1 + 31, a1 + 62, a2 - 31);
      return 1;
    case 5uLL:
      std::__sort5_maybe_branchless[abi:ne180100]<std::_ClassicAlgPolicy,CLMicroLocationLearner::semiSupervisedLearnWrapper(CLMicroLocationClientUtils::ClientIdAndClientServiceId const&,std::vector<CLMicroLocationProto::EventType> const&,CLMicroLocationProto::Model_GenerationAlgorithm,NSMutableDictionary *,std::function<BOOL ()(void)>,CLMicroLocationFingerprintPool &,std::string const&,boost::uuids::uuid const&)::$_2 &,CLMicroLocationRecordingEventsTable::Entry *,0>(a1, a1 + 31, a1 + 62, a1 + 93, a2 - 31);
      return 1;
    default:
      v8 = a1 + 62;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,CLMicroLocationLearner::semiSupervisedLearnWrapper(CLMicroLocationClientUtils::ClientIdAndClientServiceId const&,std::vector<CLMicroLocationProto::EventType> const&,CLMicroLocationProto::Model_GenerationAlgorithm,NSMutableDictionary *,std::function<BOOL ()(void)>,CLMicroLocationFingerprintPool &,std::string const&,boost::uuids::uuid const&)::$_2 &,CLMicroLocationRecordingEventsTable::Entry *>(a1, a1 + 31, a1 + 62);
      v9 = a1 + 93;
      if (a1 + 93 == v2)
        return 1;
      v10 = 0;
      v11 = 0;
      v12 = &v34;
      v13 = (CLMicroLocationProto::RecordingEvent *)&v35;
      v29 = v2;
      break;
  }
  while (1)
  {
    v14 = bswap64(*v9);
    v15 = bswap64(*v8);
    if (v14 != v15 || (v14 = bswap64(v9[1]), v15 = bswap64(v8[1]), v14 != v15))
    {
      v16 = v14 < v15 ? -1 : 1;
      if (v16 < 0)
      {
        v30 = *(_OWORD *)v9;
        v31 = v9[2];
        __p = *(_OWORD *)(v9 + 3);
        v33 = v9[5];
        v9[3] = 0;
        v9[4] = 0;
        v9[5] = 0;
        *(_OWORD *)v12 = *((_OWORD *)v9 + 3);
        v17 = v12;
        *(_OWORD *)((char *)v12 + 12) = *(_OWORD *)((char *)v9 + 60);
        v18 = v13;
        CLMicroLocationProto::RecordingEvent::RecordingEvent(v13, (const CLMicroLocationProto::RecordingEvent *)(v9 + 10));
        v36 = *((_OWORD *)v9 + 14);
        v37 = *((_BYTE *)v9 + 240);
        v19 = v10;
        while (1)
        {
          v20 = (char *)a1 + v19;
          *(_OWORD *)((char *)a1 + v19 + 744) = *(_OWORD *)((char *)a1 + v19 + 496);
          *(unint64_t *)((char *)a1 + v19 + 760) = *(unint64_t *)((char *)a1 + v19 + 512);
          v21 = (void **)((char *)a1 + v19 + 768);
          if (*((char *)a1 + v19 + 791) < 0)
            operator delete(*v21);
          *(unint64_t *)((char *)a1 + v19 + 784) = *((_QWORD *)v20 + 67);
          *(_OWORD *)v21 = *(_OWORD *)(v20 + 520);
          v20[543] = 0;
          v20[520] = 0;
          *(_OWORD *)(v20 + 792) = *((_OWORD *)v20 + 34);
          *(_OWORD *)(v20 + 804) = *(_OWORD *)(v20 + 556);
          CLMicroLocationProto::RecordingEvent::CopyFrom((CLMicroLocationProto::RecordingEvent *)(v20 + 824), (const CLMicroLocationProto::RecordingEvent *)(v20 + 576));
          v22 = (char *)a1 + v19;
          *(_OWORD *)((char *)a1 + v19 + 968) = *(_OWORD *)((char *)a1 + v19 + 720);
          *((_BYTE *)a1 + v19 + 984) = *((_BYTE *)a1 + v19 + 736);
          if (v19 == -496)
            break;
          v23 = bswap64(v30);
          v24 = bswap64(*((_QWORD *)v22 + 31));
          if (v23 == v24
            && (v23 = bswap64(*((unint64_t *)&v30 + 1)), v24 = bswap64(*((_QWORD *)v22 + 32)), v23 == v24))
          {
            v25 = 0;
          }
          else if (v23 < v24)
          {
            v25 = -1;
          }
          else
          {
            v25 = 1;
          }
          v19 -= 248;
          if ((v25 & 0x80000000) == 0)
          {
            v26 = (uint64_t)a1 + v19 + 744;
            goto LABEL_26;
          }
        }
        v26 = (uint64_t)a1;
LABEL_26:
        *(_OWORD *)v26 = v30;
        *(_QWORD *)(v26 + 16) = v31;
        v27 = (void **)(v22 + 520);
        if (*(char *)(v26 + 47) < 0)
          operator delete(*v27);
        *(_OWORD *)v27 = __p;
        *((_QWORD *)v22 + 67) = v33;
        v12 = v17;
        *((_OWORD *)v22 + 34) = *(_OWORD *)v17;
        *(_OWORD *)(v22 + 556) = *(_OWORD *)((char *)v17 + 12);
        v13 = v18;
        CLMicroLocationProto::RecordingEvent::CopyFrom((CLMicroLocationProto::RecordingEvent *)(v22 + 576), v18);
        *((_OWORD *)v22 + 45) = v36;
        v22[736] = v37;
        CLMicroLocationProto::RecordingEvent::~RecordingEvent(v18);
        v2 = v29;
        if (++v11 == 8)
          return v9 + 31 == v29;
      }
    }
    v8 = v9;
    v10 += 248;
    v9 += 31;
    if (v9 == v2)
      return 1;
  }
}

void sub_241A9237C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  CLMicroLocationRecordingEventsTable::Entry::~Entry(&a13);
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<std::__hash_value_type<boost::uuids::uuid,boost::uuids::uuid>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,boost::uuids::uuid>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,boost::uuids::uuid>>>::__emplace_multi<std::pair<boost::uuids::uuid const,boost::uuids::uuid>>(_QWORD *a1, _OWORD *a2)
{
  _QWORD *v4;

  std::__hash_table<std::__hash_value_type<boost::uuids::uuid,boost::uuids::uuid>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,boost::uuids::uuid>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,boost::uuids::uuid>>>::__construct_node<std::pair<boost::uuids::uuid const,boost::uuids::uuid>>((uint64_t)a1, a2, (uint64_t)&v4);
  return std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>>>::__node_insert_multi(a1, v4);
}

void sub_241A923E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_OWORD *std::__hash_table<std::__hash_value_type<boost::uuids::uuid,boost::uuids::uuid>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,boost::uuids::uuid>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,boost::uuids::uuid>>>::__construct_node<std::pair<boost::uuids::uuid const,boost::uuids::uuid>>@<X0>(uint64_t a1@<X0>, _OWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  _OWORD *result;
  uint64_t v7;
  unint64_t v8;
  __int128 v9;

  v5 = a1 + 16;
  result = operator new(0x30uLL);
  v7 = 0;
  v8 = 0;
  *(_QWORD *)a3 = result;
  *(_QWORD *)(a3 + 8) = v5;
  *(_QWORD *)result = 0;
  v9 = a2[1];
  result[1] = *a2;
  result[2] = v9;
  *(_BYTE *)(a3 + 16) = 1;
  do
    v8 ^= (v8 << 6) + (v8 >> 2) + 2654435769u + *((unsigned __int8 *)result + v7++ + 16);
  while (v7 != 16);
  *((_QWORD *)result + 1) = v8;
  return result;
}

uint64_t **std::back_insert_iterator<std::vector<CLMicroLocationRecordingEventsTable::Entry>>::operator=[abi:ne180100](uint64_t **a1, __int128 *a2)
{
  uint64_t *v3;
  unint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;

  v3 = *a1;
  v4 = (*a1)[1];
  v5 = *a1;
  v7 = v5[2];
  v6 = (uint64_t)(v5 + 2);
  if (v4 >= v7)
  {
    v8 = std::vector<CLMicroLocationRecordingEventsTable::Entry>::__push_back_slow_path<CLMicroLocationRecordingEventsTable::Entry const&>(v3, a2);
  }
  else
  {
    std::allocator<CLMicroLocationRecordingEventsTable::Entry>::construct[abi:ne180100]<CLMicroLocationRecordingEventsTable::Entry,CLMicroLocationRecordingEventsTable::Entry const&>(v6, v4, a2);
    v8 = v4 + 248;
    v3[1] = v4 + 248;
  }
  v3[1] = v8;
  return a1;
}

void sub_241A924F0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<CLMicroLocationRecordingEventsTable::Entry>::__push_back_slow_path<CLMicroLocationRecordingEventsTable::Entry const&>(uint64_t *a1, __int128 *a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  void *v10;
  char *v11;
  char *v12;
  char *v13;
  uint64_t *v14;

  v3 = 0xEF7BDEF7BDEF7BDFLL * ((a1[1] - *a1) >> 3);
  v4 = v3 + 1;
  if (v3 + 1 > 0x108421084210842)
    std::vector<CLMicroLocationProto::ConfidenceReason>::__throw_length_error[abi:ne180100]();
  if (0xDEF7BDEF7BDEF7BELL * ((a1[2] - *a1) >> 3) > v4)
    v4 = 0xDEF7BDEF7BDEF7BELL * ((a1[2] - *a1) >> 3);
  if (0xEF7BDEF7BDEF7BDFLL * ((a1[2] - *a1) >> 3) >= 0x84210842108421)
    v6 = 0x108421084210842;
  else
    v6 = v4;
  v14 = a1 + 2;
  if (v6)
    v7 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CLMicroLocationRecordingEventsTable::Entry>>((uint64_t)(a1 + 2), v6);
  else
    v7 = 0;
  v10 = v7;
  v11 = &v7[248 * v3];
  v13 = &v7[248 * v6];
  std::allocator<CLMicroLocationRecordingEventsTable::Entry>::construct[abi:ne180100]<CLMicroLocationRecordingEventsTable::Entry,CLMicroLocationRecordingEventsTable::Entry const&>((uint64_t)(a1 + 2), (uint64_t)v11, a2);
  v12 = v11 + 248;
  std::vector<CLMicroLocationRecordingEventsTable::Entry>::__swap_out_circular_buffer(a1, &v10);
  v8 = a1[1];
  std::__split_buffer<CLMicroLocationRecordingEventsTable::Entry>::~__split_buffer(&v10);
  return v8;
}

void sub_241A92608(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<CLMicroLocationRecordingEventsTable::Entry>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

__n128 std::allocator<CLMicroLocationRecordingEventsTable::Entry>::construct[abi:ne180100]<CLMicroLocationRecordingEventsTable::Entry,CLMicroLocationRecordingEventsTable::Entry const&>(uint64_t a1, uint64_t a2, __int128 *a3)
{
  __int128 v5;
  std::string *v6;
  __int128 v7;
  __int128 v8;
  __n128 result;

  v5 = *a3;
  *(_QWORD *)(a2 + 16) = *((_QWORD *)a3 + 2);
  *(_OWORD *)a2 = v5;
  v6 = (std::string *)(a2 + 24);
  if (*((char *)a3 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(v6, *((const std::string::value_type **)a3 + 3), *((_QWORD *)a3 + 4));
  }
  else
  {
    v7 = *(__int128 *)((char *)a3 + 24);
    *(_QWORD *)(a2 + 40) = *((_QWORD *)a3 + 5);
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v7;
  }
  v8 = a3[3];
  *(_OWORD *)(a2 + 60) = *(__int128 *)((char *)a3 + 60);
  *(_OWORD *)(a2 + 48) = v8;
  CLMicroLocationProto::RecordingEvent::RecordingEvent((CLMicroLocationProto::RecordingEvent *)(a2 + 80), (const CLMicroLocationProto::RecordingEvent *)(a3 + 5));
  result = (__n128)a3[14];
  *(_BYTE *)(a2 + 240) = *((_BYTE *)a3 + 240);
  *(__n128 *)(a2 + 224) = result;
  return result;
}

void sub_241A926B0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 47) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<CLMicroLocationRecordingEventsTable::Entry>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<CLMicroLocationRecordingEventsTable::Entry>,std::reverse_iterator<CLMicroLocationRecordingEventsTable::Entry*>,std::reverse_iterator<CLMicroLocationRecordingEventsTable::Entry*>,std::reverse_iterator<CLMicroLocationRecordingEventsTable::Entry*>>((uint64_t)(a1 + 2), a1[1], (__int128 *)a1[1], *a1, (__int128 *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<CLMicroLocationRecordingEventsTable::Entry>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x108421084210843)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(248 * a2);
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<CLMicroLocationRecordingEventsTable::Entry>,std::reverse_iterator<CLMicroLocationRecordingEventsTable::Entry*>,std::reverse_iterator<CLMicroLocationRecordingEventsTable::Entry*>,std::reverse_iterator<CLMicroLocationRecordingEventsTable::Entry*>>(uint64_t a1, uint64_t a2, __int128 *a3, uint64_t a4, __int128 *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 *v9;
  uint64_t v11;
  _QWORD v13[3];
  char v14;
  __int128 v15;
  __int128 v16;

  v7 = a7;
  *(_QWORD *)&v16 = a6;
  *((_QWORD *)&v16 + 1) = a7;
  v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  v13[2] = &v16;
  v14 = 0;
  if (a3 == a5)
  {
    v11 = a6;
  }
  else
  {
    v9 = a3;
    do
    {
      v9 = (__int128 *)((char *)v9 - 248);
      std::allocator<CLMicroLocationRecordingEventsTable::Entry>::construct[abi:ne180100]<CLMicroLocationRecordingEventsTable::Entry,CLMicroLocationRecordingEventsTable::Entry const&>(a1, v7 - 248, v9);
      v7 = *((_QWORD *)&v16 + 1) - 248;
      *((_QWORD *)&v16 + 1) -= 248;
    }
    while (v9 != a5);
    v11 = v16;
  }
  v14 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<CLMicroLocationRecordingEventsTable::Entry>,std::reverse_iterator<CLMicroLocationRecordingEventsTable::Entry*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v13);
  return v11;
}

void sub_241A9283C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<CLMicroLocationRecordingEventsTable::Entry>,std::reverse_iterator<CLMicroLocationRecordingEventsTable::Entry*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<CLMicroLocationRecordingEventsTable::Entry>,std::reverse_iterator<CLMicroLocationRecordingEventsTable::Entry*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<CLMicroLocationRecordingEventsTable::Entry>,std::reverse_iterator<CLMicroLocationRecordingEventsTable::Entry*>>::operator()[abi:ne180100]((uint64_t *)a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<CLMicroLocationRecordingEventsTable::Entry>,std::reverse_iterator<CLMicroLocationRecordingEventsTable::Entry*>>::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(a1[2] + 8);
  v2 = *(_QWORD *)(a1[1] + 8);
  if (v1 != v2)
  {
    v3 = *a1;
    do
    {
      std::allocator<CLMicroLocationRecordingEventsTable::Entry>::destroy[abi:ne180100](v3, v1);
      v1 += 248;
    }
    while (v1 != v2);
  }
}

void **std::__split_buffer<CLMicroLocationRecordingEventsTable::Entry>::~__split_buffer(void **a1)
{
  std::__split_buffer<CLMicroLocationRecordingEventsTable::Entry>::clear[abi:ne180100](a1);
  if (*a1)
    operator delete(*a1);
  return a1;
}

void std::__split_buffer<CLMicroLocationRecordingEventsTable::Entry>::clear[abi:ne180100](_QWORD *a1)
{
  uint64_t i;
  uint64_t v2;
  uint64_t v4;

  v2 = a1[1];
  for (i = a1[2]; i != v2; i = a1[2])
  {
    v4 = a1[4];
    a1[2] = i - 248;
    std::allocator<CLMicroLocationRecordingEventsTable::Entry>::destroy[abi:ne180100](v4, i - 248);
  }
}

char *std::vector<boost::uuids::uuid>::__insert_with_size[abi:ne180100]<std::__hash_const_iterator<std::__hash_node<boost::uuids::uuid,void *> *>,std::__hash_const_iterator<std::__hash_node<boost::uuids::uuid,void *> *>>(uint64_t a1, char *__src, _QWORD *a3, _QWORD *a4, uint64_t a5)
{
  char *v5;
  _QWORD *v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _BYTE *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  unint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  unint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  char *v26;
  _QWORD *v27;
  _OWORD *v28;
  char *v29;
  char *v30;
  char *v31;
  __int128 v32;
  char *v33;
  void *__p;
  char *v36;
  char *v37;
  char *v38;
  uint64_t v39;

  v5 = __src;
  if (a5 >= 1)
  {
    v7 = a3;
    v11 = *(_QWORD *)(a1 + 16);
    v9 = a1 + 16;
    v10 = v11;
    v12 = *(_QWORD *)(v9 - 8);
    if (a5 <= (uint64_t)(v11 - v12) >> 4)
    {
      v19 = a5 + 1;
      v20 = a3;
      do
      {
        v20 = (_QWORD *)*v20;
        --v19;
      }
      while (v19 > 1);
      v21 = (uint64_t)(v12 - (_QWORD)__src) >> 4;
      if (v21 >= a5)
      {
        v23 = *(char **)(v9 - 8);
        v21 = a5;
      }
      else
      {
        if ((uint64_t)(v12 - (_QWORD)__src) < 1)
        {
          v20 = a3;
        }
        else
        {
          v22 = v21 + 1;
          v20 = a3;
          do
          {
            v20 = (_QWORD *)*v20;
            --v22;
          }
          while (v22 > 1);
        }
        v23 = *(char **)(v9 - 8);
        if (v20 != a4)
        {
          v27 = v20;
          v28 = *(_OWORD **)(v9 - 8);
          do
          {
            *v28++ = *((_OWORD *)v27 + 1);
            v27 = (_QWORD *)*v27;
            v23 += 16;
          }
          while (v27 != a4);
        }
        *(_QWORD *)(a1 + 8) = v23;
      }
      if (v21 >= 1)
      {
        v29 = &__src[16 * a5];
        v30 = &v23[-16 * a5];
        v31 = v23;
        if ((unint64_t)v30 < v12)
        {
          v31 = v23;
          do
          {
            v32 = *(_OWORD *)v30;
            v30 += 16;
            *(_OWORD *)v31 = v32;
            v31 += 16;
          }
          while ((unint64_t)v30 < v12);
        }
        *(_QWORD *)(a1 + 8) = v31;
        if (v23 != v29)
          memmove(&v23[-16 * ((v23 - v29) >> 4)], __src, v23 - v29);
        if (v20 != v7)
        {
          v33 = v5;
          do
          {
            *(_OWORD *)v33 = *((_OWORD *)v7 + 1);
            v33 += 16;
            v7 = (_QWORD *)*v7;
          }
          while (v7 != v20);
        }
      }
    }
    else
    {
      v13 = *(_BYTE **)a1;
      v14 = a5 + ((uint64_t)(v12 - *(_QWORD *)a1) >> 4);
      if (v14 >> 60)
        std::vector<CLMicroLocationProto::ConfidenceReason>::__throw_length_error[abi:ne180100]();
      v15 = (__src - v13) >> 4;
      v16 = v10 - (_QWORD)v13;
      if (v16 >> 3 > v14)
        v14 = v16 >> 3;
      if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF0)
        v17 = 0xFFFFFFFFFFFFFFFLL;
      else
        v17 = v14;
      v39 = v9;
      if (v17)
        v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<boost::uuids::uuid>>(v9, v17);
      else
        v18 = 0;
      v24 = &v18[16 * v15];
      __p = v18;
      v36 = v24;
      v38 = &v18[16 * v17];
      v25 = 16 * a5;
      v26 = &v24[16 * a5];
      do
      {
        *(_OWORD *)v24 = *((_OWORD *)v7 + 1);
        v24 += 16;
        v7 = (_QWORD *)*v7;
        v25 -= 16;
      }
      while (v25);
      v37 = v26;
      v5 = (char *)std::vector<boost::uuids::uuid>::__swap_out_circular_buffer((void **)a1, (uint64_t)&__p, v5);
      if (v37 != v36)
        v37 += (v36 - v37 + 15) & 0xFFFFFFFFFFFFFFF0;
      if (__p)
        operator delete(__p);
    }
  }
  return v5;
}

void sub_241A92B70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::__introsort<std::_ClassicAlgPolicy,CLMicroLocationLearner::learnLocationSimilarityListModel(NSMutableDictionary *,std::function<BOOL ()(void)> const&,CLMicroLocationClientUtils::ClientIdAndClientServiceId const&,CLMicroLocationModel &,std::chrono::time_point<cl::chrono::CFAbsoluteTimeClock,std::chrono::duration<long double,std::ratio<1l,1l>>>,boost::uuids::uuid const&,std::vector<CLMicroLocationProto::EventType>,std::vector<CLMicroLocationRecordingEventsTable::Entry> const&,std::optional<CLMicroLocationLearner::ModelStabilityParameters> const&)::$_3 &,CLMicroLocationLearner::learnLocationSimilarityListModel(NSMutableDictionary *,std::function<BOOL ()(void)> const&,CLMicroLocationClientUtils::ClientIdAndClientServiceId const&,CLMicroLocationModel &,std::chrono::time_point<cl::chrono::CFAbsoluteTimeClock,std::chrono::duration<long double,std::ratio<1l,1l>>>,boost::uuids::uuid const&,std::vector<CLMicroLocationProto::EventType>,std::vector<CLMicroLocationRecordingEventsTable::Entry> const&,std::optional<CLMicroLocationLearner::ModelStabilityParameters> const&)::LabelConfidenceAndTime *,false>(uint64_t a1, __n128 *a2, uint64_t a3, char a4)
{
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  __int128 v13;
  double v14;
  uint64_t v15;
  double v16;
  unint64_t v17;
  __n128 *v18;
  __n128 *v19;
  double v20;
  __n128 *v21;
  double v22;
  __n128 *v23;
  __n128 v24;
  double v25;
  double v26;
  _OWORD *v27;
  __int128 v28;
  BOOL v29;
  uint64_t v30;
  double v31;
  unint64_t v32;
  double v33;
  __n128 *v34;
  __n128 *v35;
  double v36;
  __n128 v37;
  double v38;
  double v39;
  _OWORD *v40;
  __int128 v41;
  __n128 v42;
  __n128 *v43;
  __n128 *v44;
  __n128 *v45;
  __n128 v46;
  __n128 v47;
  __int128 v48;
  __n128 v49;
  __int128 v50;
  __int128 v51;
  __n128 v52;
  __int128 v53;
  __int128 v54;
  __n128 *v55;
  BOOL v57;
  uint64_t v58;
  unint64_t v59;
  double v60;
  double v61;
  uint64_t v62;
  uint64_t v63;
  __int128 v64;
  uint64_t v65;
  int64_t v66;
  int64_t v67;
  int64_t v68;
  uint64_t v69;
  unint64_t v70;
  double v71;
  unint64_t v72;
  _OWORD *v73;
  __int128 v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  _OWORD *v80;
  uint64_t v81;
  uint64_t v82;
  __int128 v83;
  __n128 v84;
  uint64_t v85;
  unint64_t v86;
  double v87;
  _OWORD *v88;
  __int128 v89;
  double v91;
  double v92;
  __n128 *v93;
  __n128 v94;
  double v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  __int128 v102;
  __n128 v103;
  __n128 v104;
  __n128 v105;
  __n128 v106;
  __n128 v107;
  __int128 v108;
  __n128 v109;
  __n128 v110;
  __int128 v111;
  __n128 v112;
  __n128 v113;
  __n128 v114;
  __n128 v115;
  __int128 v116;
  uint64_t v117;
  uint64_t v118;
  __n128 v119;
  uint64_t v120;

double *std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,CLMicroLocationLearner::learnLocationSimilarityListModel(NSMutableDictionary *,std::function<BOOL ()(void)> const&,CLMicroLocationClientUtils::ClientIdAndClientServiceId const&,CLMicroLocationModel &,std::chrono::time_point<cl::chrono::CFAbsoluteTimeClock,std::chrono::duration<long double,std::ratio<1l,1l>>>,boost::uuids::uuid const&,std::vector<CLMicroLocationProto::EventType>,std::vector<CLMicroLocationRecordingEventsTable::Entry> const&,std::optional<CLMicroLocationLearner::ModelStabilityParameters> const&)::$_3 &,CLMicroLocationLearner::learnLocationSimilarityListModel(NSMutableDictionary *,std::function<BOOL ()(void)> const&,CLMicroLocationClientUtils::ClientIdAndClientServiceId const&,CLMicroLocationModel &,std::chrono::time_point<cl::chrono::CFAbsoluteTimeClock,std::chrono::duration<long double,std::ratio<1l,1l>>>,boost::uuids::uuid const&,std::vector<CLMicroLocationProto::EventType>,std::vector<CLMicroLocationRecordingEventsTable::Entry> const&,std::optional<CLMicroLocationLearner::ModelStabilityParameters> const&)::LabelConfidenceAndTime *>(double *result, double *a2, double *a3)
{
  double v3;
  double v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;

  v3 = a2[3];
  v4 = a3[3];
  if (result[3] >= v3)
  {
    if (v3 < v4)
    {
      v9 = *(_OWORD *)a2;
      v8 = *((_OWORD *)a2 + 1);
      v10 = *((_OWORD *)a3 + 1);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *((_OWORD *)a2 + 1) = v10;
      *(_OWORD *)a3 = v9;
      *((_OWORD *)a3 + 1) = v8;
      if (result[3] < a2[3])
      {
        v12 = *(_OWORD *)result;
        v11 = *((_OWORD *)result + 1);
        v13 = *((_OWORD *)a2 + 1);
        *(_OWORD *)result = *(_OWORD *)a2;
        *((_OWORD *)result + 1) = v13;
        *(_OWORD *)a2 = v12;
        *((_OWORD *)a2 + 1) = v11;
      }
    }
  }
  else
  {
    if (v3 >= v4)
    {
      v15 = *(_OWORD *)result;
      v14 = *((_OWORD *)result + 1);
      v16 = *((_OWORD *)a2 + 1);
      *(_OWORD *)result = *(_OWORD *)a2;
      *((_OWORD *)result + 1) = v16;
      *(_OWORD *)a2 = v15;
      *((_OWORD *)a2 + 1) = v14;
      if (a2[3] >= a3[3])
        return result;
      v6 = *(_OWORD *)a2;
      v5 = *((_OWORD *)a2 + 1);
      v17 = *((_OWORD *)a3 + 1);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *((_OWORD *)a2 + 1) = v17;
    }
    else
    {
      v6 = *(_OWORD *)result;
      v5 = *((_OWORD *)result + 1);
      v7 = *((_OWORD *)a3 + 1);
      *(_OWORD *)result = *(_OWORD *)a3;
      *((_OWORD *)result + 1) = v7;
    }
    *(_OWORD *)a3 = v6;
    *((_OWORD *)a3 + 1) = v5;
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,CLMicroLocationLearner::learnLocationSimilarityListModel(NSMutableDictionary *,std::function<BOOL ()(void)> const&,CLMicroLocationClientUtils::ClientIdAndClientServiceId const&,CLMicroLocationModel &,std::chrono::time_point<cl::chrono::CFAbsoluteTimeClock,std::chrono::duration<long double,std::ratio<1l,1l>>>,boost::uuids::uuid const&,std::vector<CLMicroLocationProto::EventType>,std::vector<CLMicroLocationRecordingEventsTable::Entry> const&,std::optional<CLMicroLocationLearner::ModelStabilityParameters> const&)::$_3 &,CLMicroLocationLearner::learnLocationSimilarityListModel(NSMutableDictionary *,std::function<BOOL ()(void)> const&,CLMicroLocationClientUtils::ClientIdAndClientServiceId const&,CLMicroLocationModel &,std::chrono::time_point<cl::chrono::CFAbsoluteTimeClock,std::chrono::duration<long double,std::ratio<1l,1l>>>,boost::uuids::uuid const&,std::vector<CLMicroLocationProto::EventType>,std::vector<CLMicroLocationRecordingEventsTable::Entry> const&,std::optional<CLMicroLocationLearner::ModelStabilityParameters> const&)::LabelConfidenceAndTime *>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _BOOL8 result;
  __int128 v6;
  __n128 v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  double v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  __n128 *v18;
  __n128 *v19;
  __n128 *v20;
  __int128 v21;
  __n128 v22;
  __int128 v23;
  __int128 v24;
  __n128 v25;
  __int128 v26;
  __int128 v27;
  __n128 v28;
  __int128 v29;
  __int128 v30;
  __n128 v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;

  v4 = (a2 - a1) >> 5;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if (*(double *)(a1 + 24) < *(double *)(a2 - 8))
      {
        v7 = *(__n128 *)a1;
        v6 = *(_OWORD *)(a1 + 16);
        v8 = *(_OWORD *)(a2 - 16);
        *(_OWORD *)a1 = *(_OWORD *)(a2 - 32);
        *(_OWORD *)(a1 + 16) = v8;
        *(__n128 *)(a2 - 32) = v7;
        *(_OWORD *)(a2 - 16) = v6;
      }
      return result;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,CLMicroLocationLearner::learnLocationSimilarityListModel(NSMutableDictionary *,std::function<BOOL ()(void)> const&,CLMicroLocationClientUtils::ClientIdAndClientServiceId const&,CLMicroLocationModel &,std::chrono::time_point<cl::chrono::CFAbsoluteTimeClock,std::chrono::duration<long double,std::ratio<1l,1l>>>,boost::uuids::uuid const&,std::vector<CLMicroLocationProto::EventType>,std::vector<CLMicroLocationRecordingEventsTable::Entry> const&,std::optional<CLMicroLocationLearner::ModelStabilityParameters> const&)::$_3 &,CLMicroLocationLearner::learnLocationSimilarityListModel(NSMutableDictionary *,std::function<BOOL ()(void)> const&,CLMicroLocationClientUtils::ClientIdAndClientServiceId const&,CLMicroLocationModel &,std::chrono::time_point<cl::chrono::CFAbsoluteTimeClock,std::chrono::duration<long double,std::ratio<1l,1l>>>,boost::uuids::uuid const&,std::vector<CLMicroLocationProto::EventType>,std::vector<CLMicroLocationRecordingEventsTable::Entry> const&,std::optional<CLMicroLocationLearner::ModelStabilityParameters> const&)::LabelConfidenceAndTime *>((double *)a1, (double *)(a1 + 32), (double *)(a2 - 32));
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,CLMicroLocationLearner::learnLocationSimilarityListModel(NSMutableDictionary *,std::function<BOOL ()(void)> const&,CLMicroLocationClientUtils::ClientIdAndClientServiceId const&,CLMicroLocationModel &,std::chrono::time_point<cl::chrono::CFAbsoluteTimeClock,std::chrono::duration<long double,std::ratio<1l,1l>>>,boost::uuids::uuid const&,std::vector<CLMicroLocationProto::EventType>,std::vector<CLMicroLocationRecordingEventsTable::Entry> const&,std::optional<CLMicroLocationLearner::ModelStabilityParameters> const&)::$_3 &,CLMicroLocationLearner::learnLocationSimilarityListModel(NSMutableDictionary *,std::function<BOOL ()(void)> const&,CLMicroLocationClientUtils::ClientIdAndClientServiceId const&,CLMicroLocationModel &,std::chrono::time_point<cl::chrono::CFAbsoluteTimeClock,std::chrono::duration<long double,std::ratio<1l,1l>>>,boost::uuids::uuid const&,std::vector<CLMicroLocationProto::EventType>,std::vector<CLMicroLocationRecordingEventsTable::Entry> const&,std::optional<CLMicroLocationLearner::ModelStabilityParameters> const&)::LabelConfidenceAndTime *>((__n128 *)a1, (__n128 *)(a1 + 32), (__n128 *)(a1 + 64), (__n128 *)(a2 - 32));
      return 1;
    case 5:
      v18 = (__n128 *)(a1 + 32);
      v19 = (__n128 *)(a1 + 64);
      v20 = (__n128 *)(a1 + 96);
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,CLMicroLocationLearner::learnLocationSimilarityListModel(NSMutableDictionary *,std::function<BOOL ()(void)> const&,CLMicroLocationClientUtils::ClientIdAndClientServiceId const&,CLMicroLocationModel &,std::chrono::time_point<cl::chrono::CFAbsoluteTimeClock,std::chrono::duration<long double,std::ratio<1l,1l>>>,boost::uuids::uuid const&,std::vector<CLMicroLocationProto::EventType>,std::vector<CLMicroLocationRecordingEventsTable::Entry> const&,std::optional<CLMicroLocationLearner::ModelStabilityParameters> const&)::$_3 &,CLMicroLocationLearner::learnLocationSimilarityListModel(NSMutableDictionary *,std::function<BOOL ()(void)> const&,CLMicroLocationClientUtils::ClientIdAndClientServiceId const&,CLMicroLocationModel &,std::chrono::time_point<cl::chrono::CFAbsoluteTimeClock,std::chrono::duration<long double,std::ratio<1l,1l>>>,boost::uuids::uuid const&,std::vector<CLMicroLocationProto::EventType>,std::vector<CLMicroLocationRecordingEventsTable::Entry> const&,std::optional<CLMicroLocationLearner::ModelStabilityParameters> const&)::LabelConfidenceAndTime *>((__n128 *)a1, (__n128 *)(a1 + 32), (__n128 *)(a1 + 64), (__n128 *)(a1 + 96));
      if (*(double *)(a1 + 120) < *(double *)(a2 - 8))
      {
        v22 = *v20;
        v21 = *(_OWORD *)(a1 + 112);
        v23 = *(_OWORD *)(a2 - 16);
        *v20 = *(__n128 *)(a2 - 32);
        *(_OWORD *)(a1 + 112) = v23;
        *(__n128 *)(a2 - 32) = v22;
        *(_OWORD *)(a2 - 16) = v21;
        if (*(double *)(a1 + 88) < *(double *)(a1 + 120))
        {
          v25 = *v19;
          v24 = *(_OWORD *)(a1 + 80);
          v26 = *(_OWORD *)(a1 + 112);
          *v19 = *v20;
          *(_OWORD *)(a1 + 80) = v26;
          *v20 = v25;
          *(_OWORD *)(a1 + 112) = v24;
          if (*(double *)(a1 + 56) < *(double *)(a1 + 88))
          {
            v28 = *v18;
            v27 = *(_OWORD *)(a1 + 48);
            v29 = *(_OWORD *)(a1 + 80);
            *v18 = *v19;
            *(_OWORD *)(a1 + 48) = v29;
            *v19 = v28;
            *(_OWORD *)(a1 + 80) = v27;
            if (*(double *)(a1 + 24) < *(double *)(a1 + 56))
            {
              v31 = *(__n128 *)a1;
              v30 = *(_OWORD *)(a1 + 16);
              v32 = *(_OWORD *)(a1 + 48);
              *(__n128 *)a1 = *v18;
              *(_OWORD *)(a1 + 16) = v32;
              *v18 = v31;
              *(_OWORD *)(a1 + 48) = v30;
            }
          }
        }
      }
      return 1;
    default:
      v9 = a1 + 64;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,CLMicroLocationLearner::learnLocationSimilarityListModel(NSMutableDictionary *,std::function<BOOL ()(void)> const&,CLMicroLocationClientUtils::ClientIdAndClientServiceId const&,CLMicroLocationModel &,std::chrono::time_point<cl::chrono::CFAbsoluteTimeClock,std::chrono::duration<long double,std::ratio<1l,1l>>>,boost::uuids::uuid const&,std::vector<CLMicroLocationProto::EventType>,std::vector<CLMicroLocationRecordingEventsTable::Entry> const&,std::optional<CLMicroLocationLearner::ModelStabilityParameters> const&)::$_3 &,CLMicroLocationLearner::learnLocationSimilarityListModel(NSMutableDictionary *,std::function<BOOL ()(void)> const&,CLMicroLocationClientUtils::ClientIdAndClientServiceId const&,CLMicroLocationModel &,std::chrono::time_point<cl::chrono::CFAbsoluteTimeClock,std::chrono::duration<long double,std::ratio<1l,1l>>>,boost::uuids::uuid const&,std::vector<CLMicroLocationProto::EventType>,std::vector<CLMicroLocationRecordingEventsTable::Entry> const&,std::optional<CLMicroLocationLearner::ModelStabilityParameters> const&)::LabelConfidenceAndTime *>((double *)a1, (double *)(a1 + 32), (double *)(a1 + 64));
      v10 = a1 + 96;
      if (a1 + 96 == a2)
        return 1;
      v11 = 0;
      v12 = 0;
      break;
  }
  while (1)
  {
    v13 = *(double *)(v10 + 24);
    if (*(double *)(v9 + 24) < v13)
    {
      v33 = *(_OWORD *)v10;
      v34 = *(_QWORD *)(v10 + 16);
      v14 = v11;
      while (1)
      {
        v15 = a1 + v14;
        v16 = *(_OWORD *)(a1 + v14 + 80);
        *(_OWORD *)(v15 + 96) = *(_OWORD *)(a1 + v14 + 64);
        *(_OWORD *)(v15 + 112) = v16;
        if (v14 == -64)
          break;
        v14 -= 32;
        if (*(double *)(v15 + 56) >= v13)
        {
          v17 = a1 + v14 + 96;
          goto LABEL_12;
        }
      }
      v17 = a1;
LABEL_12:
      *(_OWORD *)v17 = v33;
      *(_QWORD *)(v17 + 16) = v34;
      *(double *)(v17 + 24) = v13;
      if (++v12 == 8)
        return v10 + 32 == a2;
    }
    v9 = v10;
    v11 += 32;
    v10 += 32;
    if (v10 == a2)
      return 1;
  }
}

__n128 std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,CLMicroLocationLearner::learnLocationSimilarityListModel(NSMutableDictionary *,std::function<BOOL ()(void)> const&,CLMicroLocationClientUtils::ClientIdAndClientServiceId const&,CLMicroLocationModel &,std::chrono::time_point<cl::chrono::CFAbsoluteTimeClock,std::chrono::duration<long double,std::ratio<1l,1l>>>,boost::uuids::uuid const&,std::vector<CLMicroLocationProto::EventType>,std::vector<CLMicroLocationRecordingEventsTable::Entry> const&,std::optional<CLMicroLocationLearner::ModelStabilityParameters> const&)::$_3 &,CLMicroLocationLearner::learnLocationSimilarityListModel(NSMutableDictionary *,std::function<BOOL ()(void)> const&,CLMicroLocationClientUtils::ClientIdAndClientServiceId const&,CLMicroLocationModel &,std::chrono::time_point<cl::chrono::CFAbsoluteTimeClock,std::chrono::duration<long double,std::ratio<1l,1l>>>,boost::uuids::uuid const&,std::vector<CLMicroLocationProto::EventType>,std::vector<CLMicroLocationRecordingEventsTable::Entry> const&,std::optional<CLMicroLocationLearner::ModelStabilityParameters> const&)::LabelConfidenceAndTime *>(__n128 *a1, __n128 *a2, __n128 *a3, __n128 *a4)
{
  __n128 result;
  __n128 v9;
  __n128 v10;
  __n128 v11;
  __n128 v12;
  __n128 v13;
  __n128 v14;

  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,CLMicroLocationLearner::learnLocationSimilarityListModel(NSMutableDictionary *,std::function<BOOL ()(void)> const&,CLMicroLocationClientUtils::ClientIdAndClientServiceId const&,CLMicroLocationModel &,std::chrono::time_point<cl::chrono::CFAbsoluteTimeClock,std::chrono::duration<long double,std::ratio<1l,1l>>>,boost::uuids::uuid const&,std::vector<CLMicroLocationProto::EventType>,std::vector<CLMicroLocationRecordingEventsTable::Entry> const&,std::optional<CLMicroLocationLearner::ModelStabilityParameters> const&)::$_3 &,CLMicroLocationLearner::learnLocationSimilarityListModel(NSMutableDictionary *,std::function<BOOL ()(void)> const&,CLMicroLocationClientUtils::ClientIdAndClientServiceId const&,CLMicroLocationModel &,std::chrono::time_point<cl::chrono::CFAbsoluteTimeClock,std::chrono::duration<long double,std::ratio<1l,1l>>>,boost::uuids::uuid const&,std::vector<CLMicroLocationProto::EventType>,std::vector<CLMicroLocationRecordingEventsTable::Entry> const&,std::optional<CLMicroLocationLearner::ModelStabilityParameters> const&)::LabelConfidenceAndTime *>(a1->n128_f64, a2->n128_f64, a3->n128_f64);
  result.n128_u64[0] = a3[1].n128_u64[1];
  if (result.n128_f64[0] < a4[1].n128_f64[1])
  {
    v9 = *a3;
    result = a3[1];
    v10 = a4[1];
    *a3 = *a4;
    a3[1] = v10;
    *a4 = v9;
    a4[1] = result;
    result.n128_u64[0] = a2[1].n128_u64[1];
    if (result.n128_f64[0] < a3[1].n128_f64[1])
    {
      v11 = *a2;
      result = a2[1];
      v12 = a3[1];
      *a2 = *a3;
      a2[1] = v12;
      *a3 = v11;
      a3[1] = result;
      result.n128_u64[0] = a1[1].n128_u64[1];
      if (result.n128_f64[0] < a2[1].n128_f64[1])
      {
        v13 = *a1;
        result = a1[1];
        v14 = a2[1];
        *a1 = *a2;
        a1[1] = v14;
        *a2 = v13;
        a2[1] = result;
      }
    }
  }
  return result;
}

void ***std::back_insert_iterator<std::vector<CLMicroLocationModel::SimilarityListData::EventInformation>>::operator=[abi:ne180100](void ***a1, __int128 *a2)
{
  void **v4;
  char *v5;
  void **v6;
  uint64_t v7;
  char *v8;
  char *v9;
  __int128 v10;
  char *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  char *v16;
  char *v17;
  char *v18;
  __int128 v19;
  char *v20;
  char *v21;
  __int128 v22;

  v4 = *a1;
  v5 = (char *)(*a1)[1];
  v6 = *a1;
  v9 = (char *)v6[2];
  v7 = (uint64_t)(v6 + 2);
  v8 = v9;
  if (v5 >= v9)
  {
    v12 = 0xCCCCCCCCCCCCCCCDLL * ((v5 - (_BYTE *)*v4) >> 2);
    v13 = v12 + 1;
    if (v12 + 1 > 0xCCCCCCCCCCCCCCCLL)
      std::vector<CLMicroLocationProto::ConfidenceReason>::__throw_length_error[abi:ne180100]();
    v14 = 0xCCCCCCCCCCCCCCCDLL * ((v8 - (_BYTE *)*v4) >> 2);
    if (2 * v14 > v13)
      v13 = 2 * v14;
    if (v14 >= 0x666666666666666)
      v15 = 0xCCCCCCCCCCCCCCCLL;
    else
      v15 = v13;
    if (v15)
      v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CLMicroLocationModel::SimilarityListData::EventInformation>>(v7, v15);
    else
      v16 = 0;
    v17 = &v16[20 * v12];
    v18 = &v16[20 * v15];
    v19 = *a2;
    *((_DWORD *)v17 + 4) = *((_DWORD *)a2 + 4);
    *(_OWORD *)v17 = v19;
    v11 = v17 + 20;
    v21 = (char *)*v4;
    v20 = (char *)v4[1];
    if (v20 != *v4)
    {
      do
      {
        v22 = *(_OWORD *)(v20 - 20);
        *((_DWORD *)v17 - 1) = *((_DWORD *)v20 - 1);
        *(_OWORD *)(v17 - 20) = v22;
        v17 -= 20;
        v20 -= 20;
      }
      while (v20 != v21);
      v20 = (char *)*v4;
    }
    *v4 = v17;
    v4[1] = v11;
    v4[2] = v18;
    if (v20)
      operator delete(v20);
  }
  else
  {
    v10 = *a2;
    *((_DWORD *)v5 + 4) = *((_DWORD *)a2 + 4);
    *(_OWORD *)v5 = v10;
    v11 = v5 + 20;
  }
  v4[1] = v11;
  return a1;
}

_QWORD *std::__hash_table<std::__hash_value_type<boost::uuids::uuid,int>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,int>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,int>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,int>>>::__emplace_unique_key_args<boost::uuids::uuid,std::pair<boost::uuids::uuid const,int>>(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  unint64_t v3;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  void **v10;
  _QWORD *v11;
  unint64_t v12;
  float v14;
  float v15;
  _BOOL8 v16;
  unint64_t v17;
  unint64_t v18;
  size_t v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t v22;

  v6 = 0;
  v7 = 0;
  do
    v7 ^= (v7 << 6) + (v7 >> 2) + 2654435769u + *((unsigned __int8 *)a2 + v6++);
  while (v6 != 16);
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v3 = v7;
      if (v7 >= v8)
        v3 = v7 % v8;
    }
    else
    {
      v3 = (v8 - 1) & v7;
    }
    v10 = *(void ***)(*(_QWORD *)a1 + 8 * v3);
    if (v10)
    {
      v11 = *v10;
      if (*v10)
      {
        do
        {
          v12 = v11[1];
          if (v12 == v7)
          {
            if (v11[2] == *a2 && v11[3] == a2[1])
              return v11;
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8)
                v12 %= v8;
            }
            else
            {
              v12 &= v8 - 1;
            }
            if (v12 != v3)
              break;
          }
          v11 = (_QWORD *)*v11;
        }
        while (v11);
      }
    }
  }
  v11 = operator new(0x28uLL);
  *v11 = 0;
  v11[1] = v7;
  *((_OWORD *)v11 + 1) = *(_OWORD *)a3;
  *((_DWORD *)v11 + 8) = *(_DWORD *)(a3 + 16);
  v14 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v15 = *(float *)(a1 + 32);
  if (!v8 || (float)(v15 * (float)v8) < v14)
  {
    v16 = 1;
    if (v8 >= 3)
      v16 = (v8 & (v8 - 1)) != 0;
    v17 = v16 | (2 * v8);
    v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18)
      v19 = v18;
    else
      v19 = v17;
    std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>>>::__rehash<true>(a1, v19);
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8)
        v3 = v7 % v8;
      else
        v3 = v7;
    }
    else
    {
      v3 = (v8 - 1) & v7;
    }
  }
  v20 = *(_QWORD *)a1;
  v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v21)
  {
    *v11 = *v21;
LABEL_44:
    *v21 = v11;
    goto LABEL_45;
  }
  *v11 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v11;
  *(_QWORD *)(v20 + 8 * v3) = a1 + 16;
  if (*v11)
  {
    v22 = *(_QWORD *)(*v11 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v22 >= v8)
        v22 %= v8;
    }
    else
    {
      v22 &= v8 - 1;
    }
    v21 = (_QWORD *)(*(_QWORD *)a1 + 8 * v22);
    goto LABEL_44;
  }
LABEL_45:
  ++*(_QWORD *)(a1 + 24);
  return v11;
}

void sub_241A93B88(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

__int128 *std::vector<CLMicroLocationRecordingEventsTable::Entry>::__insert_with_size[abi:ne180100]<std::__wrap_iter<CLMicroLocationRecordingEventsTable::Entry*>,std::__wrap_iter<CLMicroLocationRecordingEventsTable::Entry*>>(uint64_t *a1, __int128 *a2, __int128 *a3, __int128 *a4, uint64_t a5)
{
  __int128 *v5;
  __int128 *v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  __int128 *v21;
  char *v22;
  uint64_t v23;
  char *v24;
  void *v26[2];
  char *v27;
  char *v28;
  uint64_t v29;

  v5 = a2;
  if (a5 >= 1)
  {
    v7 = a3;
    v11 = a1[2];
    v9 = (uint64_t)(a1 + 2);
    v10 = v11;
    v12 = *(_QWORD *)(v9 - 8);
    if ((uint64_t)(0xEF7BDEF7BDEF7BDFLL * ((uint64_t)(v11 - v12) >> 3)) >= a5)
    {
      v20 = v12 - (_QWORD)a2;
      if ((uint64_t)(0xEF7BDEF7BDEF7BDFLL * ((uint64_t)(v12 - (_QWORD)a2) >> 3)) >= a5)
      {
        v21 = (__int128 *)((char *)a3 + 248 * a5);
      }
      else
      {
        v21 = (__int128 *)((char *)a3 + 8 * ((uint64_t)(v12 - (_QWORD)a2) >> 3));
        a1[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<CLMicroLocationRecordingEventsTable::Entry>,CLMicroLocationRecordingEventsTable::Entry*,CLMicroLocationRecordingEventsTable::Entry*,CLMicroLocationRecordingEventsTable::Entry*>(v9, v21, a4, *(_QWORD *)(v9 - 8));
        if (v20 < 1)
          return v5;
      }
      std::vector<CLMicroLocationRecordingEventsTable::Entry>::__move_range((uint64_t)a1, (uint64_t)v5, v12, (uint64_t)v5 + 248 * a5);
      std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<CLMicroLocationRecordingEventsTable::Entry *,CLMicroLocationRecordingEventsTable::Entry *,CLMicroLocationRecordingEventsTable::Entry *>((uint64_t)v26, v7, v21, (uint64_t)v5);
    }
    else
    {
      v13 = *a1;
      v14 = a5 - 0x1084210842108421 * ((uint64_t)(v12 - *a1) >> 3);
      if (v14 > 0x108421084210842)
        std::vector<CLMicroLocationProto::ConfidenceReason>::__throw_length_error[abi:ne180100]();
      v15 = 0xEF7BDEF7BDEF7BDFLL * (((uint64_t)a2 - v13) >> 3);
      v16 = 0xEF7BDEF7BDEF7BDFLL * ((v10 - v13) >> 3);
      v17 = 2 * v16;
      if (2 * v16 <= v14)
        v17 = v14;
      if (v16 >= 0x84210842108421)
        v18 = 0x108421084210842;
      else
        v18 = v17;
      v29 = v9;
      if (v18)
        v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CLMicroLocationRecordingEventsTable::Entry>>(v9, v18);
      else
        v19 = 0;
      v22 = &v19[248 * v15];
      v26[0] = v19;
      v26[1] = v22;
      v27 = v22;
      v28 = &v19[248 * v18];
      v23 = 248 * a5;
      v24 = &v22[248 * a5];
      do
      {
        std::allocator<CLMicroLocationRecordingEventsTable::Entry>::construct[abi:ne180100]<CLMicroLocationRecordingEventsTable::Entry,CLMicroLocationRecordingEventsTable::Entry&>(v29, (uint64_t)v22, v7);
        v22 += 248;
        v7 = (__int128 *)((char *)v7 + 248);
        v23 -= 248;
      }
      while (v23);
      v27 = v24;
      v5 = (__int128 *)std::vector<CLMicroLocationRecordingEventsTable::Entry>::__swap_out_circular_buffer((uint64_t)a1, v26, v5);
      std::__split_buffer<CLMicroLocationRecordingEventsTable::Entry>::~__split_buffer(v26);
    }
  }
  return v5;
}

void sub_241A93D80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12;
  uint64_t v13;

  *(_QWORD *)(v12 + 8) = v13;
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<CLMicroLocationRecordingEventsTable::Entry>::__move_range(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  __int128 *v10;
  char v12;

  v6 = *(_QWORD *)(a1 + 8);
  v7 = a2 + v6 - a4;
  v8 = v6;
  if (v7 < a3)
  {
    v10 = (__int128 *)(a2 + v6 - a4);
    v8 = *(_QWORD *)(a1 + 8);
    do
    {
      std::allocator<CLMicroLocationRecordingEventsTable::Entry>::construct[abi:ne180100]<CLMicroLocationRecordingEventsTable::Entry,CLMicroLocationRecordingEventsTable::Entry>(a1 + 16, v8, v10);
      v10 = (__int128 *)((char *)v10 + 248);
      v8 += 248;
    }
    while ((unint64_t)v10 < a3);
  }
  *(_QWORD *)(a1 + 8) = v8;
  return std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<CLMicroLocationRecordingEventsTable::Entry *,CLMicroLocationRecordingEventsTable::Entry *,CLMicroLocationRecordingEventsTable::Entry *>((uint64_t)&v12, a2, v7, v6);
}

void sub_241A93E4C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<CLMicroLocationRecordingEventsTable::Entry>::__swap_out_circular_buffer(uint64_t a1, _QWORD *a2, __int128 *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v6 = a2[1];
  v7 = a1 + 16;
  std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<CLMicroLocationRecordingEventsTable::Entry>,std::reverse_iterator<CLMicroLocationRecordingEventsTable::Entry*>,std::reverse_iterator<CLMicroLocationRecordingEventsTable::Entry*>,std::reverse_iterator<CLMicroLocationRecordingEventsTable::Entry*>>(a1 + 16, (uint64_t)a3, a3, *(_QWORD *)a1, *(__int128 **)a1, v6, v6);
  a2[1] = v8;
  a2[2] = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<CLMicroLocationRecordingEventsTable::Entry>,CLMicroLocationRecordingEventsTable::Entry*,CLMicroLocationRecordingEventsTable::Entry*,CLMicroLocationRecordingEventsTable::Entry*>(v7, a3, *(__int128 **)(a1 + 8), a2[2]);
  v9 = *(_QWORD *)a1;
  *(_QWORD *)a1 = a2[1];
  a2[1] = v9;
  v10 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = a2[2];
  a2[2] = v10;
  v11 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = a2[3];
  a2[3] = v11;
  *a2 = a2[1];
  return v6;
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<CLMicroLocationRecordingEventsTable::Entry>,CLMicroLocationRecordingEventsTable::Entry*,CLMicroLocationRecordingEventsTable::Entry*,CLMicroLocationRecordingEventsTable::Entry*>(uint64_t a1, __int128 *a2, __int128 *a3, uint64_t a4)
{
  uint64_t v4;
  __int128 *v6;
  _QWORD v9[3];
  char v10;
  uint64_t v11;
  uint64_t v12;

  v4 = a4;
  v11 = a4;
  v12 = a4;
  v9[0] = a1;
  v9[1] = &v11;
  v9[2] = &v12;
  v10 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      std::allocator<CLMicroLocationRecordingEventsTable::Entry>::construct[abi:ne180100]<CLMicroLocationRecordingEventsTable::Entry,CLMicroLocationRecordingEventsTable::Entry&>(a1, v4, v6);
      v6 = (__int128 *)((char *)v6 + 248);
      v4 = v12 + 248;
      v12 += 248;
    }
    while (v6 != a3);
  }
  v10 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<CLMicroLocationRecordingEventsTable::Entry>,CLMicroLocationRecordingEventsTable::Entry*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v9);
  return v4;
}

void sub_241A93F98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<CLMicroLocationRecordingEventsTable::Entry>,CLMicroLocationRecordingEventsTable::Entry*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

__n128 std::allocator<CLMicroLocationRecordingEventsTable::Entry>::construct[abi:ne180100]<CLMicroLocationRecordingEventsTable::Entry,CLMicroLocationRecordingEventsTable::Entry&>(uint64_t a1, uint64_t a2, __int128 *a3)
{
  __int128 v5;
  std::string *v6;
  __int128 v7;
  __int128 v8;
  __n128 result;

  v5 = *a3;
  *(_QWORD *)(a2 + 16) = *((_QWORD *)a3 + 2);
  *(_OWORD *)a2 = v5;
  v6 = (std::string *)(a2 + 24);
  if (*((char *)a3 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(v6, *((const std::string::value_type **)a3 + 3), *((_QWORD *)a3 + 4));
  }
  else
  {
    v7 = *(__int128 *)((char *)a3 + 24);
    *(_QWORD *)(a2 + 40) = *((_QWORD *)a3 + 5);
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v7;
  }
  v8 = a3[3];
  *(_OWORD *)(a2 + 60) = *(__int128 *)((char *)a3 + 60);
  *(_OWORD *)(a2 + 48) = v8;
  CLMicroLocationProto::RecordingEvent::RecordingEvent((CLMicroLocationProto::RecordingEvent *)(a2 + 80), (const CLMicroLocationProto::RecordingEvent *)(a3 + 5));
  result = (__n128)a3[14];
  *(_BYTE *)(a2 + 240) = *((_BYTE *)a3 + 240);
  *(__n128 *)(a2 + 224) = result;
  return result;
}

void sub_241A94040(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 47) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<CLMicroLocationRecordingEventsTable::Entry>,CLMicroLocationRecordingEventsTable::Entry*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<CLMicroLocationRecordingEventsTable::Entry>,CLMicroLocationRecordingEventsTable::Entry*>::operator()[abi:ne180100]((uint64_t *)a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<CLMicroLocationRecordingEventsTable::Entry>,CLMicroLocationRecordingEventsTable::Entry*>::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = (uint64_t *)a1[1];
  v1 = (uint64_t *)a1[2];
  v3 = *v1;
  v4 = *v2;
  if (*v1 != *v2)
  {
    v5 = *a1;
    do
    {
      v3 -= 248;
      std::allocator<CLMicroLocationRecordingEventsTable::Entry>::destroy[abi:ne180100](v5, v3);
    }
    while (v3 != v4);
  }
}

__n128 std::allocator<CLMicroLocationRecordingEventsTable::Entry>::construct[abi:ne180100]<CLMicroLocationRecordingEventsTable::Entry,CLMicroLocationRecordingEventsTable::Entry>(uint64_t a1, uint64_t a2, __int128 *a3)
{
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __n128 result;

  v5 = *a3;
  *(_QWORD *)(a2 + 16) = *((_QWORD *)a3 + 2);
  *(_OWORD *)a2 = v5;
  v6 = *(__int128 *)((char *)a3 + 24);
  *(_QWORD *)(a2 + 40) = *((_QWORD *)a3 + 5);
  *(_OWORD *)(a2 + 24) = v6;
  *((_QWORD *)a3 + 4) = 0;
  *((_QWORD *)a3 + 5) = 0;
  *((_QWORD *)a3 + 3) = 0;
  v7 = a3[3];
  *(_OWORD *)(a2 + 60) = *(__int128 *)((char *)a3 + 60);
  *(_OWORD *)(a2 + 48) = v7;
  CLMicroLocationProto::RecordingEvent::RecordingEvent((CLMicroLocationProto::RecordingEvent *)(a2 + 80), (const CLMicroLocationProto::RecordingEvent *)(a3 + 5));
  result = (__n128)a3[14];
  *(_BYTE *)(a2 + 240) = *((_BYTE *)a3 + 240);
  *(__n128 *)(a2 + 224) = result;
  return result;
}

void sub_241A94160(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 47) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

uint64_t std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<CLMicroLocationRecordingEventsTable::Entry *,CLMicroLocationRecordingEventsTable::Entry *,CLMicroLocationRecordingEventsTable::Entry *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  void **v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;

  if (a3 != a2)
  {
    v7 = 0;
    do
    {
      v8 = a3 + v7;
      v9 = a4 + v7;
      v10 = *(_OWORD *)(a3 + v7 - 248);
      *(_QWORD *)(v9 - 232) = *(_QWORD *)(a3 + v7 - 232);
      *(_OWORD *)(v9 - 248) = v10;
      v11 = (void **)(a4 + v7 - 224);
      if (*(char *)(a4 + v7 - 201) < 0)
        operator delete(*v11);
      v12 = *(_OWORD *)(v8 - 224);
      *(_QWORD *)(a4 + v7 - 208) = *(_QWORD *)(v8 - 208);
      *(_OWORD *)v11 = v12;
      *(_BYTE *)(v8 - 201) = 0;
      *(_BYTE *)(v8 - 224) = 0;
      v13 = *(_OWORD *)(v8 - 200);
      *(_OWORD *)(v9 - 188) = *(_OWORD *)(v8 - 188);
      *(_OWORD *)(v9 - 200) = v13;
      CLMicroLocationProto::RecordingEvent::CopyFrom((CLMicroLocationProto::RecordingEvent *)(v9 - 168), (const CLMicroLocationProto::RecordingEvent *)(v8 - 168));
      v14 = *(_OWORD *)(v8 - 24);
      *(_BYTE *)(v9 - 8) = *(_BYTE *)(v8 - 8);
      *(_OWORD *)(v9 - 24) = v14;
      v7 -= 248;
    }
    while (a3 + v7 != a2);
  }
  return a3;
}

__int128 *std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<CLMicroLocationRecordingEventsTable::Entry *,CLMicroLocationRecordingEventsTable::Entry *,CLMicroLocationRecordingEventsTable::Entry *>(uint64_t a1, __int128 *a2, __int128 *a3, uint64_t a4)
{
  __int128 *v5;
  __int128 *v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;

  v5 = a2;
  if (a2 == a3)
    return a2;
  v6 = a3;
  do
  {
    v7 = *v5;
    *(_QWORD *)(a4 + 16) = *((_QWORD *)v5 + 2);
    *(_OWORD *)a4 = v7;
    std::string::operator=((std::string *)(a4 + 24), (const std::string *)v5 + 1);
    v8 = *(__int128 *)((char *)v5 + 60);
    *(_OWORD *)(a4 + 48) = v5[3];
    *(_OWORD *)(a4 + 60) = v8;
    CLMicroLocationProto::RecordingEvent::CopyFrom((CLMicroLocationProto::RecordingEvent *)(a4 + 80), (const CLMicroLocationProto::RecordingEvent *)(v5 + 5));
    v9 = v5[14];
    *(_BYTE *)(a4 + 240) = *((_BYTE *)v5 + 240);
    *(_OWORD *)(a4 + 224) = v9;
    a4 += 248;
    v5 = (__int128 *)((char *)v5 + 248);
  }
  while (v5 != v6);
  return v6;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<CLMicroLocationRecordingEventsTable::Entry>,CLMicroLocationRecordingEventsTable::Entry*,CLMicroLocationRecordingEventsTable::Entry*,CLMicroLocationRecordingEventsTable::Entry*>(uint64_t a1, __int128 *a2, __int128 *a3, uint64_t a4)
{
  uint64_t v4;
  __int128 *v6;
  _QWORD v9[3];
  char v10;
  uint64_t v11;
  uint64_t v12;

  v4 = a4;
  v11 = a4;
  v12 = a4;
  v9[0] = a1;
  v9[1] = &v11;
  v9[2] = &v12;
  v10 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      std::allocator<CLMicroLocationRecordingEventsTable::Entry>::construct[abi:ne180100]<CLMicroLocationRecordingEventsTable::Entry,CLMicroLocationRecordingEventsTable::Entry const&>(a1, v4, v6);
      v6 = (__int128 *)((char *)v6 + 248);
      v4 = v12 + 248;
      v12 += 248;
    }
    while (v6 != a3);
  }
  v10 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<CLMicroLocationRecordingEventsTable::Entry>,CLMicroLocationRecordingEventsTable::Entry*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v9);
  return v4;
}

void sub_241A94380(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<CLMicroLocationRecordingEventsTable::Entry>,CLMicroLocationRecordingEventsTable::Entry*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void CLMicroLocationProtobufHelper::createRecordingEvent<CLMicroLocationProto::AppLaunch>(CLMicroLocationProto::RecordingEvent *a1@<X0>, CLMicroLocationProto *a2@<X1>, char a3@<W2>, char a4@<W3>, CLMicroLocationProto *a5@<X4>, uint64_t a6@<X8>, double a7@<D0>)
{
  unsigned int v14;
  int v15;
  const CLMicroLocationProto::AppLaunch *v16;
  const char *v17;
  int v18;
  const char *v19;

  CLMicroLocationProto::RecordingEvent::RecordingEvent((CLMicroLocationProto::RecordingEvent *)a6);
  v14 = *((_DWORD *)a1 + 8);
  if (!CLMicroLocationProto::EventType_IsValid((CLMicroLocationProto *)v14))
  {
    v17 = "::CLMicroLocationProto::EventType_IsValid(value)";
    v18 = 20192;
    v19 = "set_eventtype";
    goto LABEL_10;
  }
  v15 = *(_DWORD *)(a6 + 140);
  *(_DWORD *)(a6 + 72) = v14;
  *(double *)(a6 + 8) = a7;
  *(_BYTE *)(a6 + 77) = a3;
  *(_DWORD *)(a6 + 140) = v15 | 0x2803;
  *(_BYTE *)(a6 + 76) = a4;
  if (!CLMicroLocationProto::ConfidenceLevel_IsValid(a5))
  {
    v17 = "::CLMicroLocationProto::ConfidenceLevel_IsValid(value)";
    v18 = 20701;
    v19 = "set_confidencelevel";
    goto LABEL_10;
  }
  *(_DWORD *)(a6 + 140) |= 0x4000u;
  *(_DWORD *)(a6 + 120) = (_DWORD)a5;
  if (((unint64_t)a2 & 0xFF00000000) != 0)
  {
    if (CLMicroLocationProto::MotionState_IsValid(a2))
    {
      *(_DWORD *)(a6 + 140) |= 0x20000u;
      *(_DWORD *)(a6 + 124) = (_DWORD)a2;
      goto LABEL_6;
    }
    v17 = "::CLMicroLocationProto::MotionState_IsValid(value)";
    v18 = 20793;
    v19 = "set_motionstate";
LABEL_10:
    __assert_rtn(v19, "microlocation.pb.h", v18, v17);
  }
LABEL_6:
  CLMicroLocationProtobufHelper::setSpecificRecordingEvent((CLMicroLocationProtobufHelper *)a6, a1, v16);
}

void sub_241A944C0(_Unwind_Exception *a1)
{
  CLMicroLocationProto::RecordingEvent *v1;

  CLMicroLocationProto::RecordingEvent::~RecordingEvent(v1);
  _Unwind_Resume(a1);
}

void ___ZL45_CLLogObjectForCategory_MicroLocation_Defaultv_block_invoke_48()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.MicroLocation", "MicroLocation");
  v1 = (void *)logObject_MicroLocation_Default;
  logObject_MicroLocation_Default = (uint64_t)v0;

}

_QWORD *CLMicroLocationRoutineStateAnalyzer::CLMicroLocationRoutineStateAnalyzer(_QWORD *a1, uint64_t a2)
{
  char *v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD v7[3];
  _QWORD *v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  *a1 = a2;
  v7[0] = &off_2511D6550;
  v7[1] = a1;
  v8 = v7;
  a1[2] = 0;
  a1[3] = 0;
  a1[1] = 0;
  v3 = (char *)operator new(0x20uLL);
  a1[3] = v3 + 32;
  a1[1] = v3;
  a1[2] = v3;
  a1[2] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::function<void ()(std::function<BOOL ()(void)>)>>,std::function<void ()(std::function<BOOL ()(void)>)> const*,std::function<void ()(std::function<BOOL ()(void)>)> const*,std::function<void ()(std::function<BOOL ()(void)>)>*>((uint64_t)(a1 + 3), (uint64_t)v7, (uint64_t)&v9, (uint64_t)v3);
  v4 = v8;
  if (v8 == v7)
  {
    v5 = 4;
    v4 = v7;
    goto LABEL_5;
  }
  if (v8)
  {
    v5 = 5;
LABEL_5:
    (*(void (**)(void))(*v4 + 8 * v5))();
  }
  return a1;
}

void sub_241A945EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v19;
  uint64_t v20;

  v17 = v16;
  *(_QWORD *)(v15 + 16) = v17;
  std::vector<std::function<void ()(std::function<BOOL ()(void)>)>>::__destroy_vector::operator()[abi:ne180100](&a10);
  v19 = a15;
  if (a15 == &a12)
  {
    v20 = 4;
    v19 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v20 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v19 + 8 * v20))();
LABEL_6:
  _Unwind_Resume(a1);
}

void CLMicroLocationRoutineStateAnalyzer::refreshRoutineStateAtLastLocation(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  NSObject *v4;
  const char *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  char v10;
  char v11;
  int v12;
  int v13;
  __int16 v14;
  const char *v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  v3 = *(_QWORD *)(a2 + 24);
  if (!v3)
    std::__throw_bad_function_call[abi:ne180100]();
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v3 + 48))(v3))
  {
    if (onceToken_MicroLocation_Default != -1)
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_57);
    v4 = logObject_MicroLocation_Default;
    if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
    {
      v12 = 68289026;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v5 = "{\"msg%{public}.0s\":\"Background activity cancelled, will skip refresh routine state at last location\"}";
LABEL_17:
      _os_log_impl(&dword_2419D9000, v4, OS_LOG_TYPE_DEFAULT, v5, (uint8_t *)&v12, 0x12u);
    }
  }
  else
  {
    +[ULDefaultsSingleton shared](ULDefaultsSingleton, "shared");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "defaultsDictionary");
    v7 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "ULEnableBackgroundRoutineStateRefresh");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "objectForKey:", v8);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    if (v9 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
      v10 = objc_msgSend(v9, "BOOLValue");
    else
      v10 = objc_msgSend(MEMORY[0x24BDBD1C8], "BOOLValue");
    v11 = v10;

    if ((v11 & 1) != 0)
    {
      (*(void (**)(void))(**(_QWORD **)a1 + 16))();
      return;
    }
    if (onceToken_MicroLocation_Default != -1)
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_57);
    v4 = logObject_MicroLocation_Default;
    if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
    {
      v12 = 68289026;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v5 = "{\"msg%{public}.0s\":\"#Warning, tried to refresh routine state in background but it's disabled by settings\"}";
      goto LABEL_17;
    }
  }
}

void sub_241A9489C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

_QWORD *CLMicroLocationRoutineStateAnalyzer::executeWorkItems(_QWORD *result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  _BYTE v7[24];
  _BYTE *v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v2 = result[1];
  v3 = result[2];
  if (v2 != v3)
  {
    while (1)
    {
      std::__function::__value_func<double ()(CLMicroLocationFingerprint const&,CLMicroLocationFingerprint const&)>::__value_func[abi:ne180100]((uint64_t)v7, a2);
      v5 = *(_QWORD *)(v2 + 24);
      if (!v5)
        std::__throw_bad_function_call[abi:ne180100]();
      (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v5 + 48))(v5, v7);
      result = v8;
      if (v8 == v7)
        break;
      if (v8)
      {
        v6 = 5;
LABEL_7:
        result = (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v6))();
      }
      v2 += 32;
      if (v2 == v3)
        return result;
    }
    result = v7;
    v6 = 4;
    goto LABEL_7;
  }
  return result;
}

void sub_241A949AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  _Unwind_Resume(exception_object);
}

void ___ZL45_CLLogObjectForCategory_MicroLocation_Defaultv_block_invoke_49()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.MicroLocation", "MicroLocation");
  v1 = (void *)logObject_MicroLocation_Default;
  logObject_MicroLocation_Default = (uint64_t)v0;

}

void std::__function::__func<CLMicroLocationRoutineStateAnalyzer::CLMicroLocationRoutineStateAnalyzer(CLMicroLocationRoutineStateAnalyzer::IRoutineStateAnalyzerDelegate &)::$_0,std::allocator<CLMicroLocationRoutineStateAnalyzer::CLMicroLocationRoutineStateAnalyzer(CLMicroLocationRoutineStateAnalyzer::IRoutineStateAnalyzerDelegate &)::$_0>,void ()(std::function<BOOL ()(void)>)>::~__func()
{
  JUMPOUT(0x2426A04D4);
}

_QWORD *std::__function::__func<CLMicroLocationRoutineStateAnalyzer::CLMicroLocationRoutineStateAnalyzer(CLMicroLocationRoutineStateAnalyzer::IRoutineStateAnalyzerDelegate &)::$_0,std::allocator<CLMicroLocationRoutineStateAnalyzer::CLMicroLocationRoutineStateAnalyzer(CLMicroLocationRoutineStateAnalyzer::IRoutineStateAnalyzerDelegate &)::$_0>,void ()(std::function<BOOL ()(void)>)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_2511D6550;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<CLMicroLocationRoutineStateAnalyzer::CLMicroLocationRoutineStateAnalyzer(CLMicroLocationRoutineStateAnalyzer::IRoutineStateAnalyzerDelegate &)::$_0,std::allocator<CLMicroLocationRoutineStateAnalyzer::CLMicroLocationRoutineStateAnalyzer(CLMicroLocationRoutineStateAnalyzer::IRoutineStateAnalyzerDelegate &)::$_0>,void ()(std::function<BOOL ()(void)>)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_2511D6550;
  a2[1] = v2;
  return result;
}

_QWORD *std::__function::__func<CLMicroLocationRoutineStateAnalyzer::CLMicroLocationRoutineStateAnalyzer(CLMicroLocationRoutineStateAnalyzer::IRoutineStateAnalyzerDelegate &)::$_0,std::allocator<CLMicroLocationRoutineStateAnalyzer::CLMicroLocationRoutineStateAnalyzer(CLMicroLocationRoutineStateAnalyzer::IRoutineStateAnalyzerDelegate &)::$_0>,void ()(std::function<BOOL ()(void)>)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *result;
  uint64_t v8;
  _QWORD v9[3];
  _QWORD *v10;
  _BYTE v11[24];
  _BYTE *v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  std::__function::__value_func<BOOL ()(void)>::__value_func[abi:ne180100]((uint64_t)v9, a2);
  v3 = *(_QWORD *)(a1 + 8);
  v4 = (uint64_t)v10;
  if (!v10)
    goto LABEL_4;
  if (v10 != v9)
  {
    v4 = (*(uint64_t (**)(void))(*v10 + 16))();
LABEL_4:
    v12 = (_BYTE *)v4;
    goto LABEL_6;
  }
  v12 = v11;
  (*(void (**)(_QWORD *, _BYTE *))(v9[0] + 24))(v9, v11);
LABEL_6:
  CLMicroLocationRoutineStateAnalyzer::refreshRoutineStateAtLastLocation(v3, (uint64_t)v11);
  v5 = v12;
  if (v12 == v11)
  {
    v6 = 4;
    v5 = v11;
  }
  else
  {
    if (!v12)
      goto LABEL_11;
    v6 = 5;
  }
  (*(void (**)(void))(*v5 + 8 * v6))();
LABEL_11:
  result = v10;
  if (v10 == v9)
  {
    v8 = 4;
    result = v9;
  }
  else
  {
    if (!v10)
      return result;
    v8 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v8))();
}

void sub_241A94B98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  char *v18;
  uint64_t v19;

  v18 = a13;
  if (a13 == &a10)
  {
    v19 = 4;
    v18 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v19 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v18 + 8 * v19))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<CLMicroLocationRoutineStateAnalyzer::CLMicroLocationRoutineStateAnalyzer(CLMicroLocationRoutineStateAnalyzer::IRoutineStateAnalyzerDelegate &)::$_0,std::allocator<CLMicroLocationRoutineStateAnalyzer::CLMicroLocationRoutineStateAnalyzer(CLMicroLocationRoutineStateAnalyzer::IRoutineStateAnalyzerDelegate &)::$_0>,void ()(std::function<BOOL ()(void)>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<CLMicroLocationRoutineStateAnalyzer::CLMicroLocationRoutineStateAnalyzer(CLMicroLocationRoutineStateAnalyzer::IRoutineStateAnalyzerDelegate &)::$_0,std::allocator<CLMicroLocationRoutineStateAnalyzer::CLMicroLocationRoutineStateAnalyzer(CLMicroLocationRoutineStateAnalyzer::IRoutineStateAnalyzerDelegate &)::$_0>,void ()(std::function<BOOL ()(void)>)>::target_type()
{
}

void CLSqliteDatabase::init(CLSqliteDatabase *this)
{
  uint64_t v1;
  NSObject *v3;
  _BOOL8 v4;
  _QWORD *v5;
  int v6;
  int v7;
  uint64_t v8;
  std::string *v9;
  __int128 *v10;
  const void **v11;
  std::string *v12;
  uint64_t v13;
  int v14;
  NSObject *v15;
  NSObject *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  std::string::size_type size;
  std::string *p_p;
  unsigned __int8 *v23;
  uint64_t v24;
  const char *v25;
  NSObject *v26;
  os_log_type_t v27;
  uint32_t v28;
  uint64_t v29;
  std::string *v30;
  uint64_t v31;
  NSObject *v32;
  std::string::size_type v33;
  __int16 v34;
  __int128 v35;
  uint64_t v36;
  std::string::size_type v37;
  __int16 v38;
  std::string v39;
  __int128 v40;
  _BYTE *v41;
  std::string __p;
  _BYTE buf[12];
  __int16 v44;
  _BYTE v45[10];
  char v46;
  const char *v47;
  int v48;
  __int16 v49;
  char v50;
  char v51;
  const char *v52;
  int v53;
  __int16 v54;
  char v55;
  char v56;
  uint64_t v57;
  int v58;
  __int16 v59;
  char v60;
  char v61;
  uint64_t v62;

  v62 = *MEMORY[0x24BDAC8D0];
  *((_DWORD *)this + 28) = 0;
  memset(&__p, 0, sizeof(__p));
  if (onceToken_MicroLocation_Default != -1)
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_58);
  v3 = logObject_MicroLocation_Default;
  v4 = os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEBUG);
  if (v4)
  {
    v5 = (_QWORD *)((char *)this + 64);
    if (*((char *)this + 87) < 0)
      v5 = (_QWORD *)*v5;
    v6 = *((_DWORD *)this + 12);
    v7 = *((_DWORD *)this + 13);
    *(_DWORD *)buf = 136315650;
    *(_QWORD *)&buf[4] = v5;
    v44 = 1024;
    *(_DWORD *)v45 = v6;
    *(_WORD *)&v45[4] = 1024;
    *(_DWORD *)&v45[6] = v7;
    _os_log_impl(&dword_2419D9000, v3, OS_LOG_TYPE_DEBUG, "database open. path: %s, protection: %d, persistence: %d", buf, 0x18u);
  }
  if (*((char *)this + 87) < 0)
    v8 = *((_QWORD *)this + 9);
  else
    v8 = *((unsigned __int8 *)this + 87);
  v9 = (std::string *)((char *)this + 48);
  v10 = (__int128 *)((char *)this + 64);
  v11 = (const void **)((char *)this + 88);
  if (!v8)
  {
    if (*((char *)this + 111) < 0)
    {
      if (*((_QWORD *)this + 12))
      {
LABEL_15:
        v1 = CLSqliteDatabaseManager::instance((CLSqliteDatabaseManager *)v4);
        v33 = v9->__r_.__value_.__r.__words[0];
        v34 = *((_WORD *)this + 28);
        v9 = (std::string *)&v35;
        if ((*((char *)this + 87) & 0x80000000) == 0)
        {
          v35 = *v10;
          v36 = *((_QWORD *)this + 10);
          goto LABEL_38;
        }
LABEL_37:
        std::string::__init_copy_ctor_external(v9, *((const std::string::value_type **)this + 8), *((_QWORD *)this + 9));
LABEL_38:
        v14 = CLSqliteDatabaseManager::openDatabase(v1, (uint64_t *)&v33, (const void **)this + 11, (uint64_t)&v40);
        if ((SHIBYTE(v36) & 0x80000000) == 0)
          goto LABEL_19;
LABEL_39:
        operator delete(v9->__r_.__value_.__l.__data_);
        if (v14)
          goto LABEL_20;
        goto LABEL_40;
      }
    }
    else if (*((_BYTE *)this + 111))
    {
      goto LABEL_15;
    }
    CLSqliteDatabase::init((NSObject **)buf);

    abort_report_np();
    __break(1u);
    goto LABEL_37;
  }
  v12 = std::string::operator=((std::string *)((char *)this + 88), (const std::string *)((char *)this + 64));
  v13 = CLSqliteDatabaseManager::instance((CLSqliteDatabaseManager *)v12);
  v37 = v9->__r_.__value_.__r.__words[0];
  v38 = *((_WORD *)this + 28);
  v9 = &v39;
  if (*((char *)this + 87) < 0)
  {
    std::string::__init_copy_ctor_external(&v39, *((const std::string::value_type **)this + 8), *((_QWORD *)this + 9));
  }
  else
  {
    *(_OWORD *)&v39.__r_.__value_.__l.__data_ = *v10;
    v39.__r_.__value_.__r.__words[2] = *((_QWORD *)this + 10);
  }
  v14 = CLSqliteDatabaseManager::openDatabase(v13, (uint64_t *)&v37, (const void **)this + 8, (uint64_t)&v40);
  if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_39;
LABEL_19:
  if (v14)
  {
LABEL_20:
    if (v14 == 23)
    {
      if (onceToken_MicroLocation_Default != -1)
        dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_58);
      v15 = logObject_MicroLocation_Default;
      if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
      {
        if (*((char *)this + 111) < 0)
          v11 = (const void **)*v11;
        *(_DWORD *)buf = 136315394;
        *(_QWORD *)&buf[4] = v11;
        v44 = 1024;
        *(_DWORD *)v45 = v14;
        _os_log_impl(&dword_2419D9000, v15, OS_LOG_TYPE_DEFAULT, "#warning Could not open database. path: %s, rc: %d", buf, 0x12u);
      }
    }
    else
    {
      if (onceToken_MicroLocation_Default != -1)
        dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_58);
      v16 = logObject_MicroLocation_Default;
      if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_FAULT))
      {
        v17 = (char *)this + 88;
        if (*((char *)this + 111) < 0)
          v17 = (char *)*v11;
        *(_DWORD *)buf = 136315394;
        *(_QWORD *)&buf[4] = v17;
        v44 = 1024;
        *(_DWORD *)v45 = v14;
        _os_log_impl(&dword_2419D9000, v16, OS_LOG_TYPE_FAULT, "Could not open database. path: %s, rc: %d", buf, 0x12u);
      }
      CLSqliteDatabase::handleSqlError(*((sqlite3 **)this + 1), (uint64_t)this + 88, *((unsigned __int8 *)this + 56), v14);
    }
    *((_QWORD *)this + 1) = 0;
    goto LABEL_85;
  }
LABEL_40:
  *(_OWORD *)((char *)this + 8) = v40;
  v18 = *((unsigned __int8 *)this + 111);
  if (*((char *)this + 111) < 0)
    v19 = *((_QWORD *)this + 12);
  else
    v19 = *((unsigned __int8 *)this + 111);
  if (!v19)
  {
    std::string::operator=((std::string *)((char *)this + 88), &__p);
    if (onceToken_MicroLocation_Default != -1)
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_58);
    v24 = logObject_MicroLocation_Default;
    if (!os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_INFO))
      goto LABEL_76;
    if (*((char *)this + 111) < 0)
      v11 = (const void **)*v11;
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)&buf[4] = v11;
    v25 = "Returned database. path: %s";
    v26 = v24;
    v27 = OS_LOG_TYPE_INFO;
    v28 = 12;
LABEL_75:
    _os_log_impl(&dword_2419D9000, v26, v27, v25, buf, v28);
    goto LABEL_76;
  }
  if ((v18 & 0x80u) == 0)
    v20 = *((unsigned __int8 *)this + 111);
  else
    v20 = *((_QWORD *)this + 12);
  size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = __p.__r_.__value_.__l.__size_;
  if (v20 != size)
    goto LABEL_66;
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((v18 & 0x80) != 0)
  {
    if (!memcmp(*v11, p_p, *((_QWORD *)this + 12)))
      goto LABEL_76;
LABEL_66:
    if (onceToken_MicroLocation_Default != -1)
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_58);
    v29 = logObject_MicroLocation_Default;
    if (!os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_FAULT))
      goto LABEL_76;
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v30 = &__p;
    else
      v30 = (std::string *)__p.__r_.__value_.__r.__words[0];
    if (*((char *)this + 111) < 0)
      v11 = (const void **)*v11;
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = v30;
    v44 = 2080;
    *(_QWORD *)v45 = v11;
    v25 = "Requested filename. expected: %s, actual: %s";
    v26 = v29;
    v27 = OS_LOG_TYPE_FAULT;
    v28 = 22;
    goto LABEL_75;
  }
  if (*((_BYTE *)this + 111))
  {
    v23 = (unsigned __int8 *)this + 88;
    while (*v23 == p_p->__r_.__value_.__s.__data_[0])
    {
      ++v23;
      p_p = (std::string *)((char *)p_p + 1);
      if (!--v18)
        goto LABEL_76;
    }
    goto LABEL_66;
  }
LABEL_76:
  if (!*((_BYTE *)this + 56))
  {
    v31 = *((_QWORD *)this + 2);
    (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v31 + 16))(v31, p_p);
    if (!*v41)
    {
      *(_QWORD *)buf = "TableName";
      *(_DWORD *)&buf[8] = 3;
      v44 = 1;
      v45[2] = 0;
      v46 = 0;
      v47 = "SoftwareVersion";
      v48 = 3;
      v49 = 0;
      v50 = 0;
      v51 = 0;
      v52 = "SerialNumber";
      v53 = 3;
      v54 = 0;
      v55 = 0;
      v56 = 0;
      v57 = 0;
      v58 = 5;
      v59 = 0;
      v60 = 0;
      v61 = 0;
      CLSqliteDatabase::createTableIfSchemaDiffers((uint64_t)this, "TableInfo", (const char **)buf, 0, 1);
      *v41 = 1;
    }
    CLSqliteDatabase::initUUID(this);
    (*(void (**)(uint64_t))(*(_QWORD *)v31 + 24))(v31);
  }
  if (!CLSqliteDatabase::setForeignKeysEnabled(this, 1))
  {
    if (onceToken_MicroLocation_Default != -1)
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_58);
    v32 = logObject_MicroLocation_Default;
    if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_2419D9000, v32, OS_LOG_TYPE_FAULT, "Unable to turn ON foreign keys check", buf, 2u);
    }
  }
LABEL_85:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_241A95360(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, pthread_mutex_t *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,void *__p,uint64_t a35,int a36,__int16 a37,char a38,char a39)
{
  AutoLocker::~AutoLocker(&a12);
  if (a39 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void CLSqliteDatabase::CLSqliteDatabase(CLSqliteDatabase *this, uint64_t *a2)
{
  uint64_t v3;
  __int128 v4;

  *(_QWORD *)this = &off_2511D65D0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 3) = (char *)this + 24;
  *((_QWORD *)this + 4) = (char *)this + 24;
  *((_QWORD *)this + 5) = 0;
  v3 = *a2;
  *((_WORD *)this + 28) = *((_WORD *)a2 + 4);
  *((_QWORD *)this + 6) = v3;
  if (*((char *)a2 + 39) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 64), (const std::string::value_type *)a2[2], a2[3]);
  }
  else
  {
    v4 = *((_OWORD *)a2 + 1);
    *((_QWORD *)this + 10) = a2[4];
    *((_OWORD *)this + 4) = v4;
  }
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = 0;
  *((_QWORD *)this + 15) = 0;
  CLSqliteDatabase::init(this);
}

void sub_241A9547C(_Unwind_Exception *a1)
{
  _QWORD *v1;

  std::__list_imp<sqlite3_stmt *>::clear(v1);
  _Unwind_Resume(a1);
}

void CLSqliteDatabase::~CLSqliteDatabase(CLSqliteDatabase *this)
{
  __CFNotificationCenter *DarwinNotifyCenter;
  __CFNotificationCenter *LocalCenter;
  CLSqliteDatabaseManager *v4;
  uint64_t i;
  uint64_t v6;
  int v7;
  BOOL v8;
  CLSqliteDatabaseManager *v9;

  *(_QWORD *)this = &off_2511D65D0;
  DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterRemoveEveryObserver(DarwinNotifyCenter, this);
  LocalCenter = CFNotificationCenterGetLocalCenter();
  CFNotificationCenterRemoveEveryObserver(LocalCenter, this);
  for (i = *((_QWORD *)this + 4); (CLSqliteDatabase *)i != (CLSqliteDatabase *)((char *)this + 24); i = v6)
  {
    v6 = *(_QWORD *)(i + 8);
    v4 = (CLSqliteDatabaseManager *)CLSqliteDatabase::finalizeStatement(this, *(sqlite3_stmt **)(i + 16));
  }
  if (*((_QWORD *)this + 1))
  {
    if (*((int *)this + 28) >= 1)
    {
      do
      {
        v4 = (CLSqliteDatabaseManager *)CLMutexDubiousUnlock(*((_QWORD *)this + 2));
        v7 = *((_DWORD *)this + 28);
        v8 = __OFSUB__(v7--, 1);
        *((_DWORD *)this + 28) = v7;
      }
      while (!((v7 < 0) ^ v8 | (v7 == 0)));
    }
    v9 = (CLSqliteDatabaseManager *)CLSqliteDatabaseManager::instance(v4);
    CLSqliteDatabaseManager::closeDatabase(v9, *((sqlite3 **)this + 1));
    *((_QWORD *)this + 1) = 0;
  }
  if (*((_QWORD *)this + 2))
    *((_QWORD *)this + 2) = 0;

  if (*((char *)this + 111) < 0)
    operator delete(*((void **)this + 11));
  if (*((char *)this + 87) < 0)
    operator delete(*((void **)this + 8));
  std::__list_imp<sqlite3_stmt *>::clear((_QWORD *)this + 3);
}

{
  CLSqliteDatabase::~CLSqliteDatabase(this);
  JUMPOUT(0x2426A04D4);
}

uint64_t CLSqliteDatabase::finalizeStatement(CLSqliteDatabase *this, sqlite3_stmt *a2)
{
  uint64_t v4;
  CLSqliteDatabase *v5;
  CLSqliteDatabase *v6;
  NSObject *v7;
  uint64_t v8;
  sqlite3_stmt *v9;
  uint8_t buf[4];
  sqlite3_stmt *v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v4 = *((_QWORD *)this + 2);
  (*(void (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
  v5 = (CLSqliteDatabase *)*((_QWORD *)this + 4);
  if (v5 == (CLSqliteDatabase *)((char *)this + 24))
  {
LABEL_4:
    if (onceToken_MicroLocation_Default != -1)
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_58);
    v7 = logObject_MicroLocation_Default;
    if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 134217984;
      v12 = a2;
      _os_log_impl(&dword_2419D9000, v7, OS_LOG_TYPE_FAULT, "Could not find prepared statement. statement: %p", buf, 0xCu);
    }
  }
  else
  {
    while (1)
    {
      v6 = (CLSqliteDatabase *)*((_QWORD *)v5 + 1);
      if (*((sqlite3_stmt **)v5 + 2) == a2)
        break;
      v5 = (CLSqliteDatabase *)*((_QWORD *)v5 + 1);
      if (v6 == (CLSqliteDatabase *)((char *)this + 24))
        goto LABEL_4;
    }
    v8 = *(_QWORD *)v5;
    *(_QWORD *)(v8 + 8) = v6;
    **((_QWORD **)v5 + 1) = v8;
    --*((_QWORD *)this + 5);
    operator delete(v5);
    CLSqliteDatabase::finalizeStatement(*((CLSqliteDatabase **)this + 1), a2, v9);
  }
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
}

void sub_241A95710(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  AutoLocker::~AutoLocker((pthread_mutex_t **)va);
  _Unwind_Resume(a1);
}

uint64_t CLSqliteDatabase::createTableIfSchemaDiffers(uint64_t a1, char *a2, const char **a3, char **a4, char a5)
{
  _QWORD *v7;
  size_t v8;
  _QWORD *v9;
  sqlite3 *v10;
  CLSqliteDatabase *v11;
  uint64_t v12;
  char v13;
  __objc2_class *v14;
  __objc2_class *v15;
  sqlite3_stmt *v16;
  const char **v17;
  const char *v18;
  const unsigned __int8 *v19;
  int v20;
  const char *v21;
  uint64_t v22;
  uint64_t v23;
  const unsigned __int8 *v24;
  NSObject *v25;
  uint64_t v26;
  int v27;
  const char *v28;
  uint64_t v29;
  uint64_t v30;
  const char *v31;
  int v32;
  const unsigned __int8 *v33;
  const unsigned __int8 *v34;
  int v35;
  NSObject *v36;
  uint64_t v37;
  NSObject *v38;
  char *v39;
  const char **v40;
  __int128 v41;
  __int128 v42;
  char *v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  char *v47;
  char *v48;
  __int128 v49;
  __int128 v50;
  char *v51;
  char *v52;
  __int128 v53;
  __int128 v54;
  _QWORD *v56;
  size_t v57;
  _QWORD *v58;
  sqlite3 *v59;
  CLSqliteDatabase *v60;
  int v61;
  sqlite3_stmt *v62;
  char *v63;
  char *v64;
  NSObject *v65;
  char v66;
  unint64_t v67;
  BOOL v68;
  char v69;
  uint64_t v70;
  uint64_t v71;
  const char *v72;
  const unsigned __int8 *v73;
  const char *v74;
  const unsigned __int8 *v75;
  const char *v76;
  const unsigned __int8 *v77;
  int v78;
  const char *v79;
  const unsigned __int8 *v80;
  const char *v81;
  _BOOL4 v82;
  int v83;
  void **v84;
  const unsigned __int8 *v85;
  void **v86;
  NSObject *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  const unsigned __int8 *v91;
  const unsigned __int8 *v92;
  const unsigned __int8 *v93;
  void **v94;
  sqlite3_stmt *v95;
  const unsigned __int8 *v96;
  uint64_t v97;
  int v98;
  void **v99;
  const unsigned __int8 *v100;
  void **v101;
  NSObject *v102;
  uint64_t v103;
  char **v105;
  int v106;
  const unsigned __int8 *v108;
  NSObject *v109;
  uint64_t v110;
  unint64_t v112;
  const char **v113;
  void *v115[2];
  char v116;
  void *v117[2];
  char v118;
  void *v119;
  char *v120;
  char *v121;
  uint64_t v122;
  pthread_mutex_t *v123;
  __int16 v124;
  _BYTE __p[44];
  _BYTE v126[10];
  _BYTE v127[10];
  const unsigned __int8 *v128;
  __int16 v129;
  void **v130;
  __int16 v131;
  const unsigned __int8 *v132;
  __int16 v133;
  void **v134;
  __int16 v135;
  const unsigned __int8 *v136;
  uint8_t buf[16];
  uint64_t v138;
  uint64_t v139[8];
  std::string v140;
  _QWORD v141[22];

  v141[19] = *MEMORY[0x24BDAC8D0];
  v122 = *(_QWORD *)(a1 + 16);
  (*(void (**)(uint64_t))(*(_QWORD *)v122 + 16))(v122);
  v124 = 256;
  if (a3 && *a3)
  {
    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)buf);
    v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v138, (uint64_t)"PRAGMA table_info(", 18);
    v8 = strlen(a2);
    v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)a2, v8);
    __p[0] = 41;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)__p, 1);
    std::stringbuf::str();
    if (__p[23] >= 0)
      v10 = (sqlite3 *)__p;
    else
      v10 = *(sqlite3 **)__p;
    v11 = CLSqliteDatabase::prepareStatementNoCache((CLSqliteDatabase *)a1, v10);
    v105 = a4;
    if ((__p[23] & 0x80000000) != 0)
      operator delete(*(void **)__p);
    v12 = 0;
    v13 = 1;
    v14 = ULRapportMonitor;
    v15 = ULRapportMonitor;
    v113 = a3;
    while (sqlite3_step((sqlite3_stmt *)v11) == 100)
    {
      v17 = &a3[6 * v12];
      v18 = *v17;
      if (!*v17)
        goto LABEL_36;
      v19 = sqlite3_column_text((sqlite3_stmt *)v11, 1);
      if (strcmp(v18, (const char *)v19))
        goto LABEL_19;
      v20 = (int)a3[6 * v12 + 1];
      v21 = "INTEGER";
      if (v20 != 1)
      {
        v22 = 0;
        do
        {
          v23 = v22;
          v22 += 16;
        }
        while (v22 != 80 && *(_DWORD *)((char *)&unk_2511D6640 + v23 + 16) != v20);
        v21 = *(const char **)((char *)&unk_2511D6640 + v23 + 24);
      }
      v24 = sqlite3_column_text((sqlite3_stmt *)v11, 2);
      if (strcmp(v21, (const char *)v24) || BYTE4(a3[6 * v12 + 1]) != sqlite3_column_int((sqlite3_stmt *)v11, 5) > 0)
      {
LABEL_19:
        if (v14[97].isa != (__objc2_class *)-1)
          dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_58);
        v25 = v15[96].vtable;
        if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
        {
          v26 = v12;
          v27 = (int)a3[6 * v12 + 1];
          v28 = "INTEGER";
          if (v27 != 1)
          {
            v29 = 0;
            do
            {
              v30 = v29;
              v29 += 16;
            }
            while (v29 != 80 && *(_DWORD *)((char *)&unk_2511D6640 + v30 + 16) != v27);
            v28 = *(const char **)((char *)&unk_2511D6640 + v30 + 24);
          }
          v31 = *v17;
          v32 = BYTE4(a3[6 * v26 + 1]);
          v33 = sqlite3_column_text((sqlite3_stmt *)v11, 1);
          v34 = sqlite3_column_text((sqlite3_stmt *)v11, 2);
          v35 = sqlite3_column_int((sqlite3_stmt *)v11, 5);
          *(_DWORD *)__p = 136382467;
          *(_QWORD *)&__p[4] = a2;
          *(_WORD *)&__p[12] = 1024;
          *(_DWORD *)&__p[14] = v26;
          *(_WORD *)&__p[18] = 2080;
          *(_QWORD *)&__p[20] = v31;
          v12 = v26;
          *(_WORD *)&__p[28] = 2080;
          *(_QWORD *)&__p[30] = v28;
          *(_WORD *)&__p[38] = 1024;
          *(_DWORD *)&__p[40] = v32;
          *(_WORD *)v126 = 2080;
          *(_QWORD *)&v126[2] = v33;
          *(_WORD *)v127 = 2080;
          *(_QWORD *)&v127[2] = v34;
          LOWORD(v128) = 1024;
          *(_DWORD *)((char *)&v128 + 2) = v35 > 0;
          _os_log_impl(&dword_2419D9000, v25, OS_LOG_TYPE_DEFAULT, "#warning Existing table's column does not match expected. table: %{private}s, index: %d, expected name: %s, expected type: %s, expected primary key: %d, actual name: %s, actual type: %s, actual primary key: %d", __p, 0x46u);
          a3 = v113;
          v15 = ULRapportMonitor;
          v14 = ULRapportMonitor;
        }

        v13 = 0;
      }
      ++v12;
    }
    if (!a3[6 * v12])
      goto LABEL_41;
LABEL_36:
    if (v14[97].isa != (__objc2_class *)-1)
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_58);
    v38 = v15[96].vtable;
    if (os_log_type_enabled(v38, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)__p = 136380675;
      *(_QWORD *)&__p[4] = a2;
      _os_log_impl(&dword_2419D9000, v38, OS_LOG_TYPE_DEFAULT, "#warning Existing table's schema does not have the same number of columns as the requested schema. table: %{private}s", __p, 0xCu);
    }

    v13 = 0;
LABEL_41:
    CLSqliteDatabase::finalizeStatement(*(CLSqliteDatabase **)(a1 + 8), (sqlite3 *)v11, v16);
    if ((v13 & 1) == 0)
      goto LABEL_128;
    v39 = 0;
    v119 = 0;
    v120 = 0;
    v121 = 0;
    v106 = v12;
    v12 = v12;
    do
    {
      if (LOBYTE(a3[6 * v12 + 5]))
      {
        v40 = &a3[6 * v12];
        if (v39 >= v121)
        {
          v43 = (char *)v119;
          v44 = 0xAAAAAAAAAAAAAAABLL * ((v39 - (_BYTE *)v119) >> 4);
          v45 = v44 + 1;
          if (v44 + 1 > 0x555555555555555)
            std::vector<CLMicroLocationProto::ConfidenceReason>::__throw_length_error[abi:ne180100]();
          if (0x5555555555555556 * ((v121 - (_BYTE *)v119) >> 4) > v45)
            v45 = 0x5555555555555556 * ((v121 - (_BYTE *)v119) >> 4);
          if (0xAAAAAAAAAAAAAAABLL * ((v121 - (_BYTE *)v119) >> 4) >= 0x2AAAAAAAAAAAAAALL)
            v46 = 0x555555555555555;
          else
            v46 = v45;
          if (v46)
          {
            v47 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CLMicroLocationClientUtils::ClientIdentitiesAndLocationTypes>>((uint64_t)&v121, v46);
            v43 = (char *)v119;
            v39 = v120;
          }
          else
          {
            v47 = 0;
          }
          v48 = &v47[48 * v44];
          v49 = *(_OWORD *)v40;
          v50 = *((_OWORD *)v40 + 2);
          *((_OWORD *)v48 + 1) = *((_OWORD *)v40 + 1);
          *((_OWORD *)v48 + 2) = v50;
          *(_OWORD *)v48 = v49;
          if (v39 == v43)
          {
            v52 = &v47[48 * v44];
            a3 = v113;
          }
          else
          {
            v51 = &v47[48 * v44];
            a3 = v113;
            do
            {
              v52 = v51 - 48;
              v53 = *((_OWORD *)v39 - 3);
              v54 = *((_OWORD *)v39 - 1);
              *((_OWORD *)v51 - 2) = *((_OWORD *)v39 - 2);
              *((_OWORD *)v51 - 1) = v54;
              *((_OWORD *)v51 - 3) = v53;
              v39 -= 48;
              v51 -= 48;
            }
            while (v39 != v43);
          }
          v39 = v48 + 48;
          v119 = v52;
          v120 = v48 + 48;
          v121 = &v47[48 * v46];
          if (v43)
            operator delete(v43);
        }
        else
        {
          v41 = *(_OWORD *)v40;
          v42 = *((_OWORD *)v40 + 2);
          *((_OWORD *)v39 + 1) = *((_OWORD *)v40 + 1);
          *((_OWORD *)v39 + 2) = v42;
          *(_OWORD *)v39 = v41;
          v39 += 48;
        }
        v120 = v39;
      }
    }
    while (v12-- > 0);
    memset(__p, 0, 24);
    std::string::operator=(&v140, (const std::string *)__p);
    std::stringbuf::__init_buf_ptrs[abi:ne180100]((uint64_t)v139);
    v15 = ULRapportMonitor;
    LODWORD(v12) = v106;
    if ((__p[23] & 0x80000000) != 0)
      operator delete(*(void **)__p);
    v56 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v138, (uint64_t)"PRAGMA foreign_key_list(", 24);
    v57 = strlen(a2);
    v58 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v56, (uint64_t)a2, v57);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v58, (uint64_t)")", 1);
    std::stringbuf::str();
    if (__p[23] >= 0)
      v59 = (sqlite3 *)__p;
    else
      v59 = *(sqlite3 **)__p;
    v60 = CLSqliteDatabase::prepareStatementNoCache((CLSqliteDatabase *)a1, v59);
    if ((__p[23] & 0x80000000) != 0)
      operator delete(*(void **)__p);
    v61 = sqlite3_step((sqlite3_stmt *)v60);
    v63 = (char *)v119;
    v64 = v120;
    if (v120 == v119 && v61 == 100)
    {
LABEL_74:
      if (v14[97].isa != (__objc2_class *)-1)
        dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_58);
      v65 = v15[96].vtable;
      if (os_log_type_enabled(v65, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)__p = 0;
        _os_log_impl(&dword_2419D9000, v65, OS_LOG_TYPE_DEFAULT, "#warning Actual table has more foreign key contraints than expected", __p, 2u);
      }

      v66 = 0;
LABEL_124:
      CLSqliteDatabase::finalizeStatement(*(CLSqliteDatabase **)(a1 + 8), (sqlite3 *)v60, v62);
      if (v119)
      {
        v120 = (char *)v119;
        operator delete(v119);
      }
      if ((v66 & 1) != 0)
      {
        v37 = 0;
LABEL_135:
        if ((a5 & 1) == 0)
          CLSqliteDatabase::createCountTriggersIfNecessary((CLSqliteDatabase *)a1, a2);
        if (v105)
          CLSqliteDatabase::createIndexIfNecessary((CLSqliteDatabase *)a1, a2, (CLSqliteDatabase *)v105);
        *(_QWORD *)buf = *MEMORY[0x24BEDB7F0];
        v103 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
        *(_QWORD *)&buf[*(_QWORD *)(*(_QWORD *)buf - 24)] = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
        v138 = v103;
        v139[0] = MEMORY[0x24BEDB848] + 16;
        if (SHIBYTE(v140.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v140.__r_.__value_.__l.__data_);
        std::streambuf::~streambuf();
        std::iostream::~basic_iostream();
        MEMORY[0x2426A0444](v141);
        goto LABEL_142;
      }
LABEL_128:
      if ((_DWORD)v12)
      {
        if (v14[97].isa != (__objc2_class *)-1)
          dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_58);
        v102 = v15[96].vtable;
        if (os_log_type_enabled(v102, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)__p = 136380675;
          *(_QWORD *)&__p[4] = a2;
          _os_log_impl(&dword_2419D9000, v102, OS_LOG_TYPE_DEFAULT, "#warning Table exists but does not have matching schema. table: %{private}s", __p, 0xCu);
        }

        CLSqliteDatabase::dropTable_internal((CLSqliteDatabase *)a1, a2);
      }
      CLSqliteDatabase::createTable(a1, a2, a3);
      v37 = 1;
      goto LABEL_135;
    }
    v67 = 0;
    v68 = v120 == v119 || v61 == 100;
    v69 = !v68;
    v66 = v69 ^ 1;
    if (!v68 || v61 != 100)
    {
LABEL_122:
      if (v67 >= 0xAAAAAAAAAAAAAAABLL * ((v64 - v63) >> 4) && v61 != 100)
        goto LABEL_124;
      goto LABEL_74;
    }
    v70 = 1;
    v71 = 36;
    v66 = 1;
    while (1)
    {
      v112 = v70;
      v72 = *(const char **)&v63[v71 - 36];
      v73 = sqlite3_column_text((sqlite3_stmt *)v60, 3);
      if (strcmp(v72, (const char *)v73))
        break;
      v74 = *(const char **)((char *)v119 + v71 - 20);
      v75 = sqlite3_column_text((sqlite3_stmt *)v60, 2);
      if (strcmp(v74, (const char *)v75))
        break;
      v76 = *(const char **)((char *)v119 + v71 - 12);
      v77 = sqlite3_column_text((sqlite3_stmt *)v60, 4);
      if (strcmp(v76, (const char *)v77))
        break;
      std::string::basic_string[abi:ne180100]<0>(__p, off_2511D66D0[*(int *)((char *)v119 + v71)]);
      v78 = __p[23];
      v79 = *(const char **)__p;
      v80 = sqlite3_column_text((sqlite3_stmt *)v60, 5);
      if (v78 >= 0)
        v81 = __p;
      else
        v81 = v79;
      if (!strcmp(v81, (const char *)v80))
      {
        std::string::basic_string[abi:ne180100]<0>(v117, off_2511D66D0[*(int *)((char *)v119 + v71 - 4)]);
        v83 = v118;
        v84 = (void **)v117[0];
        v85 = sqlite3_column_text((sqlite3_stmt *)v60, 6);
        if (v83 >= 0)
          v86 = v117;
        else
          v86 = v84;
        v82 = strcmp((const char *)v86, (const char *)v85) != 0;
        if (v118 < 0)
          operator delete(v117[0]);
      }
      else
      {
        v82 = 1;
      }
      v14 = ULRapportMonitor;
      if ((__p[23] & 0x80000000) != 0)
      {
        operator delete(*(void **)__p);
        if (v82)
          break;
      }
      else if (v82)
      {
        break;
      }
LABEL_119:
      v61 = sqlite3_step((sqlite3_stmt *)v60);
      v63 = (char *)v119;
      v64 = v120;
      if (v112 != 0xAAAAAAAAAAAAAAABLL * ((v120 - (_BYTE *)v119) >> 4))
      {
        v71 += 48;
        v70 = v112 + 1;
        if (v61 == 100)
          continue;
      }
      v67 = v112;
      goto LABEL_122;
    }
    if (v14[97].isa != (__objc2_class *)-1)
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_58);
    v87 = v15[96].vtable;
    if (os_log_type_enabled(v87, OS_LOG_TYPE_DEBUG))
    {
      v88 = *(_QWORD *)((char *)v119 + v71 - 36);
      v89 = *(_QWORD *)((char *)v119 + v71 - 20);
      v90 = *(_QWORD *)((char *)v119 + v71 - 12);
      v109 = v87;
      v91 = sqlite3_column_text((sqlite3_stmt *)v60, 3);
      v92 = sqlite3_column_text((sqlite3_stmt *)v60, 2);
      v108 = sqlite3_column_text((sqlite3_stmt *)v60, 4);
      v110 = v71;
      std::string::basic_string[abi:ne180100]<0>(v117, off_2511D66D0[*(int *)((char *)v119 + v71 - 4)]);
      v93 = v92;
      if (v118 >= 0)
        v94 = v117;
      else
        v94 = (void **)v117[0];
      v95 = (sqlite3_stmt *)v60;
      v96 = sqlite3_column_text((sqlite3_stmt *)v60, 6);
      v97 = v90;
      std::string::basic_string[abi:ne180100]<0>(v115, off_2511D66D0[*(int *)((char *)v119 + v110)]);
      v98 = v116;
      v99 = (void **)v115[0];
      v100 = sqlite3_column_text(v95, 5);
      *(_DWORD *)__p = 136383235;
      v101 = v115;
      if (v98 < 0)
        v101 = v99;
      *(_QWORD *)&__p[4] = a2;
      *(_WORD *)&__p[12] = 2080;
      *(_QWORD *)&__p[14] = v88;
      *(_WORD *)&__p[22] = 2080;
      *(_QWORD *)&__p[24] = v89;
      *(_WORD *)&__p[32] = 2080;
      *(_QWORD *)&__p[34] = v97;
      *(_WORD *)&__p[42] = 2080;
      *(_QWORD *)v126 = v91;
      *(_WORD *)&v126[8] = 2080;
      *(_QWORD *)v127 = v93;
      *(_WORD *)&v127[8] = 2080;
      v87 = v109;
      v128 = v108;
      v129 = 2080;
      v130 = v94;
      v131 = 2080;
      v132 = v96;
      v133 = 2080;
      v134 = v101;
      v135 = 2080;
      v136 = v100;
      _os_log_impl(&dword_2419D9000, v109, OS_LOG_TYPE_DEBUG, "#warning Existing table's foreign key constraint does not match expected. table: %{private}s, ExpectedFromCol: %s, ExpectedToTable: %s, ExpectedToCol: %s, ActualFromCol: %s, ActualToTable: %s, ActualToCol: %s, ExpectedOnDelete: %s, ActualOnDelete: %s, ExpectedOnUpdate: %s, ActualOnUpdate: %s", __p, 0x70u);
      if (v116 < 0)
        operator delete(v115[0]);
      a3 = v113;
      v15 = ULRapportMonitor;
      LODWORD(v12) = v106;
      v14 = ULRapportMonitor;
      v60 = (CLSqliteDatabase *)v95;
      v71 = v110;
      if (v118 < 0)
        operator delete(v117[0]);
    }

    v66 = 0;
    goto LABEL_119;
  }
  if (onceToken_MicroLocation_Default != -1)
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_58);
  v36 = logObject_MicroLocation_Default;
  if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_FAULT))
  {
    *(_DWORD *)buf = 136380675;
    *(_QWORD *)&buf[4] = a2;
    _os_log_impl(&dword_2419D9000, v36, OS_LOG_TYPE_FAULT, "Need at least one column in table. table: %{private}s", buf, 0xCu);
  }
  v37 = 0;
LABEL_142:
  if ((_BYTE)v124)
    pthread_mutex_unlock(v123);
  else
    (*(void (**)(uint64_t))(*(_QWORD *)v122 + 24))(v122);
  return v37;
}

void sub_241A96400(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *a35,uint64_t a36,uint64_t a37,pthread_mutex_t *a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42,int a43,__int16 a44,char a45,char a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,char a58)
{
  if (a34 < 0)
    operator delete(__p);
  if (a46 < 0)
    operator delete(a41);
  if (a35)
    operator delete(a35);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a58);
  AutoLocker::~AutoLocker(&a38);
  _Unwind_Resume(a1);
}

void CLSqliteDatabase::initUUID(CLSqliteDatabase *this)
{
  CLSqliteDatabase *v2;
  sqlite3_stmt *v3;
  sqlite3_stmt *v4;
  const unsigned __int8 *v5;
  id v6;
  void **v7;
  uint64_t v8;
  void *v9;
  NSObject *v10;
  NSObject *v11;
  std::string *p_p;
  void **v13;
  void *v14;
  id v15;
  _QWORD *v16;
  void **v17;
  size_t v18;
  _QWORD *v19;
  sqlite3 *p_buf;
  CLSqliteDatabase *v21;
  sqlite3_stmt *v22;
  uint64_t v23;
  void *v24;
  NSObject *v25;
  NSObject *v26;
  std::string *v27;
  const char *v28;
  NSObject *v29;
  uint32_t v30;
  std::string *v31;
  void **v32;
  sqlite3_stmt *v33;
  std::string::size_type v34;
  std::string __p;
  uint64_t v36;
  void *v37;
  char v38;
  uint64_t v39;
  void *v40[2];
  uint64_t v41;
  uint8_t v42[4];
  std::string *v43;
  __int16 v44;
  void **v45;
  std::string buf;
  char *v47[2];
  const char *v48;
  int v49;
  __int16 v50;
  char v51;
  char v52;
  const char *v53;
  int v54;
  __int16 v55;
  char v56;
  char v57;
  uint64_t v58;
  int v59;
  __int16 v60;
  char v61;
  char v62;
  uint64_t v63;

  v63 = *MEMORY[0x24BDAC8D0];
  v48 = "id";
  v49 = 1;
  v50 = 1;
  v51 = 0;
  v52 = 0;
  v53 = "uuid";
  v54 = 3;
  v55 = 0;
  v56 = 0;
  v57 = 0;
  v58 = 0;
  v59 = 5;
  v60 = 0;
  v61 = 0;
  v62 = 0;
  v47[0] = "uuid";
  v47[1] = 0;
  CLSqliteDatabase::createTableIfNecessary((uint64_t)this, "DatabaseIdentifier", &v48, v47);
  v40[0] = 0;
  v40[1] = 0;
  v41 = 0;
  v2 = CLSqliteDatabase::prepareStatementNoCache(this, (sqlite3 *)"SELECT * FROM DatabaseIdentifier;");
  v3 = (sqlite3_stmt *)v2;
  if (v2)
  {
    if (sqlite3_step((sqlite3_stmt *)v2) == 100)
    {
      v5 = sqlite3_column_text(v3, 1);
      MEMORY[0x2426A02C4](v40, v5);
      v6 = objc_alloc(MEMORY[0x24BDD17C8]);
      if (v41 >= 0)
        v7 = v40;
      else
        v7 = (void **)v40[0];
      v8 = objc_msgSend(v6, "initWithUTF8String:", v7);
      v9 = (void *)*((_QWORD *)this + 15);
      *((_QWORD *)this + 15) = v8;

      if (onceToken_MicroLocation_Default != -1)
        dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_58);
      v10 = (id)logObject_MicroLocation_Default;
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
      {
        if (*((char *)this + 111) < 0)
          std::string::__init_copy_ctor_external(&__p, *((const std::string::value_type **)this + 11), *((_QWORD *)this + 12));
        else
          __p = *(std::string *)((char *)this + 88);
        p_p = &__p;
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        v13 = v40;
        if (v41 < 0)
          v13 = (void **)v40[0];
        LODWORD(buf.__r_.__value_.__l.__data_) = 136315395;
        *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)p_p;
        WORD2(buf.__r_.__value_.__r.__words[1]) = 2081;
        *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v13;
        _os_log_impl(&dword_2419D9000, v10, OS_LOG_TYPE_DEFAULT, "initUUID. path: %s, uuid: %{private}s", (uint8_t *)&buf, 0x16u);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
      }

    }
    CLSqliteDatabase::finalizeStatement(*((CLSqliteDatabase **)this + 1), v3, v4);
    if (!*((_QWORD *)this + 15))
    {
      objc_msgSend(MEMORY[0x24BDD1880], "UUID");
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v14, "UUIDString");
      v15 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
      MEMORY[0x2426A02C4](v40, objc_msgSend(v15, "UTF8String"));

      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&__p);
      v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p.__r_.__value_.__r.__words[2], (uint64_t)"INSERT INTO DatabaseIdentifier (uuid) VALUES (\"", 47);
      if (v41 >= 0)
        v17 = v40;
      else
        v17 = (void **)v40[0];
      v18 = strlen((const char *)v17);
      v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)v17, v18);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"\");", 3);
      std::stringbuf::str();
      if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_buf = (sqlite3 *)&buf;
      else
        p_buf = (sqlite3 *)buf.__r_.__value_.__r.__words[0];
      v21 = CLSqliteDatabase::prepareStatementNoCache(this, p_buf);
      v22 = (sqlite3_stmt *)v21;
      if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(buf.__r_.__value_.__l.__data_);
        if (v22)
        {
LABEL_32:
          if (sqlite3_step(v22) == 101)
          {
            objc_msgSend(v14, "UUIDString");
            v23 = objc_claimAutoreleasedReturnValue();
            v24 = (void *)*((_QWORD *)this + 15);
            *((_QWORD *)this + 15) = v23;

            if (onceToken_MicroLocation_Default != -1)
              dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_58);
            v25 = (id)logObject_MicroLocation_Default;
            if (!os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
              goto LABEL_60;
            if (*((char *)this + 111) < 0)
              std::string::__init_copy_ctor_external(&buf, *((const std::string::value_type **)this + 11), *((_QWORD *)this + 12));
            else
              buf = *(std::string *)((char *)this + 88);
            v31 = &buf;
            if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
              v31 = (std::string *)buf.__r_.__value_.__r.__words[0];
            v32 = v40;
            if (v41 < 0)
              v32 = (void **)v40[0];
            *(_DWORD *)v42 = 136315395;
            v43 = v31;
            v44 = 2081;
            v45 = v32;
            v28 = "UUID initialized. path: %s, uuid: %{private}s";
            v29 = v25;
            v30 = 22;
          }
          else
          {
            if (onceToken_MicroLocation_Default != -1)
              dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_58);
            v25 = (id)logObject_MicroLocation_Default;
            if (!os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
              goto LABEL_60;
            if (*((char *)this + 111) < 0)
              std::string::__init_copy_ctor_external(&buf, *((const std::string::value_type **)this + 11), *((_QWORD *)this + 12));
            else
              buf = *(std::string *)((char *)this + 88);
            v27 = &buf;
            if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
              v27 = (std::string *)buf.__r_.__value_.__r.__words[0];
            *(_DWORD *)v42 = 136315138;
            v43 = v27;
            v28 = "Failed to initialize DB UUID. path: %s";
            v29 = v25;
            v30 = 12;
          }
          _os_log_impl(&dword_2419D9000, v29, OS_LOG_TYPE_DEFAULT, v28, v42, v30);
          if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
            operator delete(buf.__r_.__value_.__l.__data_);
LABEL_60:

          CLSqliteDatabase::finalizeStatement(*((CLSqliteDatabase **)this + 1), v22, v33);
LABEL_61:
          __p.__r_.__value_.__r.__words[0] = *MEMORY[0x24BEDB7F0];
          v34 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
          *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words
                                    + *(_QWORD *)(__p.__r_.__value_.__r.__words[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
          __p.__r_.__value_.__r.__words[2] = v34;
          v36 = MEMORY[0x24BEDB848] + 16;
          if (v38 < 0)
            operator delete(v37);
          std::streambuf::~streambuf();
          std::iostream::~basic_iostream();
          MEMORY[0x2426A0444](&v39);

          goto LABEL_64;
        }
      }
      else if (v21)
      {
        goto LABEL_32;
      }
      if (onceToken_MicroLocation_Default != -1)
        dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_58);
      v26 = logObject_MicroLocation_Default;
      if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(buf.__r_.__value_.__l.__data_) = 0;
        _os_log_impl(&dword_2419D9000, v26, OS_LOG_TYPE_DEFAULT, "#warning Failed to create UUID insert statement", (uint8_t *)&buf, 2u);
      }
      goto LABEL_61;
    }
  }
  else
  {
    if (onceToken_MicroLocation_Default != -1)
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_58);
    v11 = logObject_MicroLocation_Default;
    if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(__p.__r_.__value_.__l.__data_) = 0;
      _os_log_impl(&dword_2419D9000, v11, OS_LOG_TYPE_DEFAULT, "#warning Failed to create UUID select statement", (uint8_t *)&__p, 2u);
    }
  }
LABEL_64:
  if (SHIBYTE(v41) < 0)
    operator delete(v40[0]);
}

void sub_241A96B74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,void *__p,uint64_t a45,int a46,__int16 a47,char a48,char a49)
{
  void *v49;
  void *v50;

  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a9);
  if (a49 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

BOOL CLSqliteDatabase::setForeignKeysEnabled(CLSqliteDatabase *this, int a2)
{
  uint64_t v4;
  char *v5;
  void **v6;
  std::string::size_type v7;
  std::string *v8;
  int v9;
  void *__p[2];
  unsigned __int8 v12;
  std::string v13;
  uint64_t v14;
  __int16 v15;

  v4 = *((_QWORD *)this + 2);
  v14 = v4;
  (*(void (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
  v15 = 256;
  std::string::basic_string[abi:ne180100]<0>(&v13, "pragma foreign_keys = ");
  if (a2)
    v5 = "1";
  else
    v5 = "0";
  std::string::basic_string[abi:ne180100]<0>(__p, v5);
  if ((v12 & 0x80u) == 0)
    v6 = __p;
  else
    v6 = (void **)__p[0];
  if ((v12 & 0x80u) == 0)
    v7 = v12;
  else
    v7 = (std::string::size_type)__p[1];
  std::string::append(&v13, (const std::string::value_type *)v6, v7);
  if ((char)v12 < 0)
    operator delete(__p[0]);
  if ((v13.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v8 = &v13;
  else
    v8 = (std::string *)v13.__r_.__value_.__r.__words[0];
  v9 = sqlite3_exec(*((sqlite3 **)this + 1), (const char *)v8, 0, 0, 0);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v13.__r_.__value_.__l.__data_);
  (*(void (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
  return v9 == 0;
}

void sub_241A96D14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,pthread_mutex_t *a22)
{
  if (a21 < 0)
    operator delete(__p);
  AutoLocker::~AutoLocker(&a22);
  _Unwind_Resume(a1);
}

void CLSqliteDatabase::handleSqlError(CLSqliteDatabase *this, int a2)
{
  CLSqliteDatabase::handleSqlError(*((sqlite3 **)this + 1), (uint64_t)this + 88, *((unsigned __int8 *)this + 56), a2);
}

uint64_t CLSqliteDatabase::createTableIfNecessary(uint64_t a1, char *a2, const char **a3, char **a4)
{
  NSObject *v8;
  int v10;
  char *v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  if (onceToken_MicroLocation_Default != -1)
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_58);
  v8 = logObject_MicroLocation_Default;
  if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
  {
    v10 = 136380675;
    v11 = a2;
    _os_log_impl(&dword_2419D9000, v8, OS_LOG_TYPE_DEFAULT, "createTableIfNecessary. table: %{private}s", (uint8_t *)&v10, 0xCu);
  }
  return CLSqliteDatabase::createTableIfNecessary_internal(a1, a2, a3, a4);
}

CLSqliteDatabase *CLSqliteDatabase::prepareStatementNoCache(CLSqliteDatabase *this, sqlite3 *a2)
{
  __objc2_class *v2;
  NSObject *v5;
  const char *v6;
  _QWORD *v7;
  CLSqliteDatabase *v8;
  NSObject *v9;
  int v11;
  sqlite3 *v12;
  __int16 v13;
  _QWORD *v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  if (((*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 32))(*((_QWORD *)this + 2)) & 1) == 0)
  {
    CLSqliteDatabase::prepareStatementNoCache();
LABEL_15:
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_58);
    goto LABEL_4;
  }
  if (!*((_QWORD *)this + 1))
    return 0;
  v2 = ULRapportMonitor;
  if (onceToken_MicroLocation_Default != -1)
    goto LABEL_15;
LABEL_4:
  v5 = logObject_MicroLocation_Default;
  if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEBUG))
  {
    v7 = (_QWORD *)((char *)this + 88);
    if (*((char *)this + 111) < 0)
      v7 = (_QWORD *)*v7;
    v11 = 136380931;
    v12 = a2;
    v13 = 2080;
    v14 = v7;
    _os_log_impl(&dword_2419D9000, v5, OS_LOG_TYPE_DEBUG, "Preparing statement for database. query: %{private}s, path: %s", (uint8_t *)&v11, 0x16u);
  }
  v8 = CLSqliteDatabase::prepareStatement(*((CLSqliteDatabase **)this + 1), a2, v6);
  if (v2[97].isa != (__objc2_class *)-1)
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_58);
  v9 = logObject_MicroLocation_Default;
  if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEBUG))
  {
    v11 = 134217984;
    v12 = (sqlite3 *)v8;
    _os_log_impl(&dword_2419D9000, v9, OS_LOG_TYPE_DEBUG, "Prepared statement. statement: %p", (uint8_t *)&v11, 0xCu);
  }
  return v8;
}

void CLSqliteDatabase::finalizeStatement(CLSqliteDatabase *this, sqlite3 *pStmt, sqlite3_stmt *a3)
{
  int v4;
  int v5;
  NSObject *v6;
  const char *v7;
  _DWORD v8[2];
  __int16 v9;
  const char *v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  v4 = sqlite3_finalize(pStmt);
  if (v4)
  {
    v5 = v4;
    if (onceToken_MicroLocation_Default != -1)
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_58);
    v6 = (id)logObject_MicroLocation_Default;
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      if (this)
        v7 = sqlite3_errmsg((sqlite3 *)this);
      else
        v7 = "no database";
      v8[0] = 67109379;
      v8[1] = v5;
      v9 = 2081;
      v10 = v7;
      _os_log_impl(&dword_2419D9000, v6, OS_LOG_TYPE_DEFAULT, "#warning Finalized statement previously failed. sqlite_rc: %d, errmsg: %{private}s", (uint8_t *)v8, 0x12u);
    }

  }
}

void sub_241A9710C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void CLSqliteDatabase::displaySqlResult(CLSqliteDatabase *this, const char *a2, int a3, sqlite3_stmt *a4)
{
  NSObject *v7;
  int v8;
  const char *v9;
  int v10;
  const char *v11;
  const char *v12;
  NSObject *v13;
  os_log_type_t v14;
  int v15;
  const char *v16;
  __int16 v17;
  int v18;
  __int16 v19;
  int v20;
  __int16 v21;
  const char *v22;
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  if (a3 <= 0x1Au && ((1 << a3) & 0x4004C00) != 0)
  {
    if (onceToken_MicroLocation_Default != -1)
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_58);
    v7 = (id)logObject_MicroLocation_Default;
    if (os_log_type_enabled(v7, OS_LOG_TYPE_FAULT))
    {
      v8 = *__error();
      if (a4)
        v9 = sqlite3_sql(a4);
      else
        v9 = 0;
      v15 = 136315907;
      v16 = a2;
      v17 = 1024;
      v18 = v8;
      v19 = 1024;
      v20 = a3;
      v21 = 2081;
      v22 = v9;
      v12 = "displaySqlResult. function: %s, errno: %d, sqlite_rc: %d, query: %{private}s";
      v13 = v7;
      v14 = OS_LOG_TYPE_FAULT;
LABEL_17:
      _os_log_impl(&dword_2419D9000, v13, v14, v12, (uint8_t *)&v15, 0x22u);
    }
  }
  else
  {
    if (onceToken_MicroLocation_Default != -1)
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_58);
    v7 = (id)logObject_MicroLocation_Default;
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      v10 = *__error();
      if (a4)
        v11 = sqlite3_sql(a4);
      else
        v11 = 0;
      v15 = 136315907;
      v16 = a2;
      v17 = 1024;
      v18 = v10;
      v19 = 1024;
      v20 = a3;
      v21 = 2081;
      v22 = v11;
      v12 = "#warning displaySqlResult. function: %s, errno: %d, sqlite_rc: %d, query: %{private}s";
      v13 = v7;
      v14 = OS_LOG_TYPE_DEFAULT;
      goto LABEL_17;
    }
  }

}

void sub_241A9731C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t CLSqliteDatabase::getElementCreateStatement@<X0>(CLSqliteDatabase *this@<X0>, char *a2@<X1>, char *a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  void **v15;
  CLSqliteDatabase *v16;
  const char *v17;
  sqlite3_stmt *v18;
  sqlite3_stmt *v19;
  const char *v20;
  const unsigned __int8 *v21;
  char *v22;
  uint64_t v23;
  void *__p[2];
  uint64_t v26;
  _QWORD v27[2];
  _QWORD v28[11];
  char v29;
  _QWORD v30[21];
  __int16 v31;

  v8 = *((_QWORD *)this + 2);
  v30[19] = v8;
  (*(void (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8);
  v31 = 256;
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v27);
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)"SELECT sql FROM ", 16);
  v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"sqlite_master", 13);
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)" WHERE ", 7);
  v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"Type", 4);
  v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"=? AND ", 7);
  v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"Name", 4);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"=?", 2);
  std::stringbuf::str();
  if (v26 >= 0)
    v15 = __p;
  else
    v15 = (void **)__p[0];
  v16 = CLSqliteDatabase::prepareStatementNoCache(this, (sqlite3 *)v15);
  v18 = (sqlite3_stmt *)v16;
  if (SHIBYTE(v26) < 0)
  {
    operator delete(__p[0]);
    if (!v18)
      goto LABEL_16;
  }
  else if (!v16)
  {
    goto LABEL_16;
  }
  if (CLSqliteDatabase::bind((CLSqliteDatabase *)v18, (sqlite3_stmt *)1, a2, v17)
    && CLSqliteDatabase::bind((CLSqliteDatabase *)v18, (sqlite3_stmt *)2, a3, v20)
    && sqlite3_step(v18) == 100)
  {
    v21 = sqlite3_column_text(v18, 0);
    if (v21)
      v22 = (char *)v21;
    else
      v22 = "";
    std::string::basic_string[abi:ne180100]<0>(__p, v22);
    *(_OWORD *)a4 = *(_OWORD *)__p;
    a4[2] = v26;
  }
  CLSqliteDatabase::finalizeStatement(*((CLSqliteDatabase **)this + 1), v18, v19);
LABEL_16:
  v27[0] = *MEMORY[0x24BEDB7F0];
  v23 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(_QWORD *)((char *)v27 + *(_QWORD *)(v27[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  v28[0] = v23;
  v28[1] = MEMORY[0x24BEDB848] + 16;
  if (v29 < 0)
    operator delete((void *)v28[9]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x2426A0444](v30);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 24))(v8);
}

void sub_241A9755C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  uint64_t v16;

  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a16);
  AutoLocker::~AutoLocker((pthread_mutex_t **)(v16 - 88));
  _Unwind_Resume(a1);
}

void CLSqliteDatabase::handleSqlError(sqlite3 *a1, uint64_t a2, int a3, int a4)
{
  NSObject *v7;
  uint64_t v8;
  NSObject *v9;
  uint64_t v10;
  NSObject *v11;
  NSObject *v12;
  NSObject *v13;
  sqlite3 *v14;
  uint64_t v15;
  uint8_t buf[4];
  _BYTE v18[14];
  __int16 v19;
  const char *v20;
  __int16 v21;
  const char *v22;
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  if (a4 == 26 || a4 == 11)
  {
    if (a3)
    {
      if (onceToken_MicroLocation_Default != -1)
        dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_58);
      v7 = logObject_MicroLocation_Default;
      if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_FAULT))
      {
        if (*(char *)(a2 + 23) >= 0)
          v8 = a2;
        else
          v8 = *(_QWORD *)a2;
        *(_DWORD *)buf = 136315394;
        *(_QWORD *)v18 = v8;
        *(_WORD *)&v18[8] = 1024;
        *(_DWORD *)&v18[10] = a4;
        _os_log_impl(&dword_2419D9000, v7, OS_LOG_TYPE_FAULT, "handleSqlError on read-only db. path: %s, sqlite_rc: %d", buf, 0x12u);
      }
    }
    else
    {
      _CLLogObjectForCategory_MicroLocation_Default();
      v9 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_FAULT))
      {
        if (*(char *)(a2 + 23) >= 0)
          v10 = a2;
        else
          v10 = *(_QWORD *)a2;
        *(_DWORD *)buf = 136315394;
        *(_QWORD *)v18 = v10;
        *(_WORD *)&v18[8] = 1024;
        *(_DWORD *)&v18[10] = a4;
        _os_log_impl(&dword_2419D9000, v9, OS_LOG_TYPE_FAULT, "database error; deleting and exiting. path: %s, sqlite_rc: %d",
          buf,
          0x12u);
      }

      CLSqliteDatabase::deleteDatabase(a1, a2);
      _CLLogObjectForCategory_MicroLocation_Default();
      v11 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v11, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)buf = 68289539;
        *(_DWORD *)v18 = 0;
        *(_WORD *)&v18[4] = 2082;
        *(_QWORD *)&v18[6] = "";
        v19 = 2082;
        v20 = "assert";
        v21 = 2081;
        v22 = "0";
        _os_log_impl(&dword_2419D9000, v11, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Killing locationd to resolve corrupted database\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      }

      _CLLogObjectForCategory_MicroLocation_Default();
      v12 = objc_claimAutoreleasedReturnValue();
      if (os_signpost_enabled(v12))
      {
        *(_DWORD *)buf = 68289539;
        *(_DWORD *)v18 = 0;
        *(_WORD *)&v18[4] = 2082;
        *(_QWORD *)&v18[6] = "";
        v19 = 2082;
        v20 = "assert";
        v21 = 2081;
        v22 = "0";
        _os_signpost_emit_with_name_impl(&dword_2419D9000, v12, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Killing locationd to resolve corrupted database", "{\"msg%{public}.0s\":\"Killing locationd to resolve corrupted database\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      }

      _CLLogObjectForCategory_MicroLocation_Default();
      v13 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 68289539;
        *(_DWORD *)v18 = 0;
        *(_WORD *)&v18[4] = 2082;
        *(_QWORD *)&v18[6] = "";
        v19 = 2082;
        v20 = "assert";
        v21 = 2081;
        v22 = "0";
        _os_log_impl(&dword_2419D9000, v13, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Killing locationd to resolve corrupted database\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      }

      v14 = (sqlite3 *)abort_report_np();
      CLSqliteDatabase::deleteDatabase(v14, v15);
    }
  }
}

void CLSqliteDatabase::deleteDatabase(sqlite3 *a1, uint64_t a2)
{
  NSObject *v4;
  NSObject *v5;
  void **v6;
  std::error_code *v7;
  const std::__fs::filesystem::path *v8;
  NSObject *v9;
  void **v10;
  int v11;
  int *v12;
  char *v13;
  size_t v14;
  void **v15;
  std::error_code *v16;
  const void *v17;
  const std::__fs::filesystem::path *v18;
  NSObject *v19;
  void **v20;
  int v21;
  int *v22;
  char *v23;
  size_t v24;
  void **v25;
  std::error_code *v26;
  const void *v27;
  const std::__fs::filesystem::path *v28;
  NSObject *v29;
  void **v30;
  int v31;
  int *v32;
  char *v33;
  size_t v34;
  void **v35;
  std::error_code *v36;
  const void *v37;
  const std::__fs::filesystem::path *v38;
  NSObject *v39;
  void **v40;
  int v41;
  int *v42;
  char *v43;
  void *__p[2];
  char v45;
  void *v46[2];
  char v47;
  void *v48[2];
  char v49;
  uint8_t buf[4];
  void **v51;
  __int16 v52;
  int v53;
  __int16 v54;
  char *v55;
  uint64_t v56;

  v56 = *MEMORY[0x24BDAC8D0];
  if (a1 && MEMORY[0x24BE04738])
  {
    if ((CPSqliteDatabaseDelete() & 1) != 0)
      return;
    goto LABEL_6;
  }
  if (a1)
  {
LABEL_6:
    if (onceToken_MicroLocation_Default != -1)
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_58);
    v4 = logObject_MicroLocation_Default;
    if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_2419D9000, v4, OS_LOG_TYPE_FAULT, "Could not delete the database with CPSqliteDatabaseDelete()", buf, 2u);
    }
  }
  if (onceToken_MicroLocation_Default != -1)
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_58);
  v5 = logObject_MicroLocation_Default;
  if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_FAULT))
  {
    if (*(char *)(a2 + 23) >= 0)
      v6 = (void **)a2;
    else
      v6 = *(void ***)a2;
    *(_DWORD *)buf = 136315138;
    v51 = v6;
    _os_log_impl(&dword_2419D9000, v5, OS_LOG_TYPE_FAULT, "Falling back to file deletion. path: %s", buf, 0xCu);
  }
  sqlite3_close(a1);
  if (*(char *)(a2 + 23) >= 0)
    v8 = (const std::__fs::filesystem::path *)a2;
  else
    v8 = *(const std::__fs::filesystem::path **)a2;
  if (remove(v8, v7))
  {
    if (onceToken_MicroLocation_Default != -1)
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_58);
    v9 = (id)logObject_MicroLocation_Default;
    if (os_log_type_enabled(v9, OS_LOG_TYPE_FAULT))
    {
      if (*(char *)(a2 + 23) >= 0)
        v10 = (void **)a2;
      else
        v10 = *(void ***)a2;
      v11 = *__error();
      v12 = __error();
      v13 = strerror(*v12);
      *(_DWORD *)buf = 136315650;
      v51 = v10;
      v52 = 1024;
      v53 = v11;
      v54 = 2080;
      v55 = v13;
      _os_log_impl(&dword_2419D9000, v9, OS_LOG_TYPE_FAULT, "could not remove file. path: %s, errno: %d, error: %s", buf, 0x1Cu);
    }

  }
  if (*(char *)(a2 + 23) >= 0)
    v14 = *(unsigned __int8 *)(a2 + 23);
  else
    v14 = *(_QWORD *)(a2 + 8);
  v15 = v48;
  std::string::basic_string[abi:ne180100]((uint64_t)v48, v14 + 8);
  if (v49 < 0)
    v15 = (void **)v48[0];
  if (v14)
  {
    if (*(char *)(a2 + 23) >= 0)
      v17 = (const void *)a2;
    else
      v17 = *(const void **)a2;
    memmove(v15, v17, v14);
  }
  strcpy((char *)v15 + v14, "-journal");
  if (v49 >= 0)
    v18 = (const std::__fs::filesystem::path *)v48;
  else
    v18 = (const std::__fs::filesystem::path *)v48[0];
  if (remove(v18, v16))
  {
    if (onceToken_MicroLocation_Default != -1)
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_58);
    v19 = (id)logObject_MicroLocation_Default;
    if (os_log_type_enabled(v19, OS_LOG_TYPE_FAULT))
    {
      if (v49 >= 0)
        v20 = v48;
      else
        v20 = (void **)v48[0];
      v21 = *__error();
      v22 = __error();
      v23 = strerror(*v22);
      *(_DWORD *)buf = 136315650;
      v51 = v20;
      v52 = 1024;
      v53 = v21;
      v54 = 2080;
      v55 = v23;
      _os_log_impl(&dword_2419D9000, v19, OS_LOG_TYPE_FAULT, "could not remove file. path %s, errno: %d, error: %s", buf, 0x1Cu);
    }

  }
  if (*(char *)(a2 + 23) >= 0)
    v24 = *(unsigned __int8 *)(a2 + 23);
  else
    v24 = *(_QWORD *)(a2 + 8);
  v25 = v46;
  std::string::basic_string[abi:ne180100]((uint64_t)v46, v24 + 4);
  if (v47 < 0)
    v25 = (void **)v46[0];
  if (v24)
  {
    if (*(char *)(a2 + 23) >= 0)
      v27 = (const void *)a2;
    else
      v27 = *(const void **)a2;
    memmove(v25, v27, v24);
  }
  strcpy((char *)v25 + v24, "-wal");
  if (v47 >= 0)
    v28 = (const std::__fs::filesystem::path *)v46;
  else
    v28 = (const std::__fs::filesystem::path *)v46[0];
  if (remove(v28, v26))
  {
    if (onceToken_MicroLocation_Default != -1)
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_58);
    v29 = (id)logObject_MicroLocation_Default;
    if (os_log_type_enabled(v29, OS_LOG_TYPE_FAULT))
    {
      if (v47 >= 0)
        v30 = v46;
      else
        v30 = (void **)v46[0];
      v31 = *__error();
      v32 = __error();
      v33 = strerror(*v32);
      *(_DWORD *)buf = 136315650;
      v51 = v30;
      v52 = 1024;
      v53 = v31;
      v54 = 2080;
      v55 = v33;
      _os_log_impl(&dword_2419D9000, v29, OS_LOG_TYPE_FAULT, "could not remove file. path: %s, errno: %d, error: %s", buf, 0x1Cu);
    }

  }
  if (*(char *)(a2 + 23) >= 0)
    v34 = *(unsigned __int8 *)(a2 + 23);
  else
    v34 = *(_QWORD *)(a2 + 8);
  v35 = __p;
  std::string::basic_string[abi:ne180100]((uint64_t)__p, v34 + 4);
  if (v45 < 0)
    v35 = (void **)__p[0];
  if (v34)
  {
    if (*(char *)(a2 + 23) >= 0)
      v37 = (const void *)a2;
    else
      v37 = *(const void **)a2;
    memmove(v35, v37, v34);
  }
  strcpy((char *)v35 + v34, "-shm");
  if (v45 >= 0)
    v38 = (const std::__fs::filesystem::path *)__p;
  else
    v38 = (const std::__fs::filesystem::path *)__p[0];
  if (remove(v38, v36))
  {
    if (onceToken_MicroLocation_Default != -1)
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_58);
    v39 = (id)logObject_MicroLocation_Default;
    if (os_log_type_enabled(v39, OS_LOG_TYPE_FAULT))
    {
      if (v45 >= 0)
        v40 = __p;
      else
        v40 = (void **)__p[0];
      v41 = *__error();
      v42 = __error();
      v43 = strerror(*v42);
      *(_DWORD *)buf = 136315650;
      v51 = v40;
      v52 = 1024;
      v53 = v41;
      v54 = 2080;
      v55 = v43;
      _os_log_impl(&dword_2419D9000, v39, OS_LOG_TYPE_FAULT, "could not remove file. path: %s, errno: %d, error: %s", buf, 0x1Cu);
    }

  }
  if (v45 < 0)
    operator delete(__p[0]);
  if (v47 < 0)
    operator delete(v46[0]);
  if (v49 < 0)
    operator delete(v48[0]);
}

void sub_241A97EFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  void *v27;

  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (a27 < 0)
    operator delete(a22);
  _Unwind_Resume(a1);
}

CLSqliteDatabase *CLSqliteDatabase::createCountTriggersIfNecessary(CLSqliteDatabase *this, const char *a2)
{
  CLSqliteDatabase *v3;

  if (*((_BYTE *)this + 57))
  {
    v3 = this;
    CLSqliteDatabase::dropCountTriggers(this, a2);
    return (CLSqliteDatabase *)CLSqliteDatabase::addCountTriggers(v3, a2);
  }
  return this;
}

uint64_t CLSqliteDatabase::dropCountTriggers(CLSqliteDatabase *this, const char *a2)
{
  uint64_t v4;
  size_t v5;
  _QWORD *v6;
  std::string *p_p;
  size_t v8;
  _QWORD *v9;
  std::string *v10;
  size_t v11;
  _QWORD *v12;
  char *v13;
  BOOL v14;
  std::string *v15;
  uint64_t v16;
  void *v18;
  char v19;
  std::string __p;
  _QWORD v21[2];
  uint64_t v22;
  _QWORD v23[8];
  std::string v24;
  _QWORD v25[21];
  __int16 v26;

  v4 = *((_QWORD *)this + 2);
  v25[19] = v4;
  (*(void (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
  v26 = 256;
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v21);
  v5 = strlen(a2);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v22, (uint64_t)a2, v5);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"IncrementRowCount", 17);
  std::stringbuf::str();
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  CLSqliteDatabase::dropTrigger(this, (char *)p_p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  memset(&__p, 0, sizeof(__p));
  std::string::operator=(&v24, &__p);
  std::stringbuf::__init_buf_ptrs[abi:ne180100]((uint64_t)v23);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v8 = strlen(a2);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v22, (uint64_t)a2, v8);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"DecrementRowCount", 17);
  std::stringbuf::str();
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v10 = &__p;
  else
    v10 = (std::string *)__p.__r_.__value_.__r.__words[0];
  CLSqliteDatabase::dropTrigger(this, (char *)v10);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  memset(&__p, 0, sizeof(__p));
  std::string::operator=(&v24, &__p);
  std::stringbuf::__init_buf_ptrs[abi:ne180100]((uint64_t)v23);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v11 = strlen(a2);
  v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v22, (uint64_t)a2, v11);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"Counts", 6);
  std::stringbuf::str();
  if (v19 >= 0)
    v13 = (char *)&v18;
  else
    v13 = (char *)v18;
  CLSqliteDatabase::getElementCreateStatement(this, "table", v13, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    v14 = __p.__r_.__value_.__l.__size_ == 0;
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  else
  {
    v14 = SHIBYTE(__p.__r_.__value_.__r.__words[2]) == 0;
  }
  if (v19 < 0)
  {
    operator delete(v18);
    if (v14)
      goto LABEL_30;
  }
  else if (v14)
  {
    goto LABEL_30;
  }
  std::stringbuf::str();
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v15 = &__p;
  else
    v15 = (std::string *)__p.__r_.__value_.__r.__words[0];
  CLSqliteDatabase::dropTable_internal(this, (char *)v15);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
LABEL_30:
  v21[0] = *MEMORY[0x24BEDB7F0];
  v16 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(_QWORD *)((char *)v21 + *(_QWORD *)(v21[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  v22 = v16;
  v23[0] = MEMORY[0x24BEDB848] + 16;
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v24.__r_.__value_.__l.__data_);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x2426A0444](v25);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
}

void sub_241A98290(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  uint64_t v21;

  if (a20 < 0)
    operator delete(__p);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a21);
  AutoLocker::~AutoLocker((pthread_mutex_t **)(v21 - 88));
  _Unwind_Resume(a1);
}

uint64_t CLSqliteDatabase::addCountTriggers(CLSqliteDatabase *this, const char *a2)
{
  uint64_t v4;
  size_t v5;
  _QWORD *v6;
  std::string *p_str;
  _QWORD *v8;
  size_t v9;
  sqlite3 *v10;
  CLSqliteDatabase *v11;
  sqlite3_stmt *v12;
  NSObject *v13;
  const char *v14;
  _QWORD *v15;
  size_t v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  sqlite3 *v20;
  CLSqliteDatabase *v21;
  sqlite3_stmt *v22;
  sqlite3_stmt *v23;
  NSObject *v24;
  uint64_t v25;
  _QWORD v27[2];
  uint64_t v28;
  _QWORD v29[8];
  std::string __p;
  _QWORD v31[21];
  __int16 v32;
  std::string __str;
  const char *v34;
  int v35;
  __int16 v36;
  char v37;
  char v38;
  uint64_t v39;
  int v40;
  __int16 v41;
  char v42;
  char v43;
  uint64_t v44;

  v44 = *MEMORY[0x24BDAC8D0];
  v4 = *((_QWORD *)this + 2);
  v31[19] = v4;
  (*(void (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
  v32 = 256;
  v34 = "Count";
  v35 = 1;
  v36 = 0;
  v37 = 0;
  v38 = 0;
  v39 = 0;
  v40 = 5;
  v41 = 0;
  v42 = 0;
  v43 = 0;
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v27);
  v5 = strlen(a2);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v28, (uint64_t)a2, v5);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"Counts", 6);
  std::stringbuf::str();
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_str = &__str;
  else
    p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
  CLSqliteDatabase::createTable((uint64_t)this, (const char *)p_str, &v34);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  memset(&__str, 0, sizeof(__str));
  std::string::operator=(&__p, &__str);
  std::stringbuf::__init_buf_ptrs[abi:ne180100]((uint64_t)v29);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v28, (uint64_t)"SELECT COUNT(*) FROM ", 21);
  v9 = strlen(a2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)a2, v9);
  std::stringbuf::str();
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v10 = (sqlite3 *)&__str;
  else
    v10 = (sqlite3 *)__str.__r_.__value_.__r.__words[0];
  v11 = CLSqliteDatabase::prepareStatementNoCache(this, v10);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (v11)
  {
    if (sqlite3_step((sqlite3_stmt *)v11) == 100)
    {
      sqlite3_column_int((sqlite3_stmt *)v11, 0);
      goto LABEL_25;
    }
    if (onceToken_MicroLocation_Default != -1)
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_58);
    v13 = logObject_MicroLocation_Default;
    if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_FAULT))
    {
      LODWORD(__str.__r_.__value_.__l.__data_) = 136380675;
      *(std::string::size_type *)((char *)__str.__r_.__value_.__r.__words + 4) = (std::string::size_type)a2;
      v14 = "Couldn't get row count for. table: %{private}s";
      goto LABEL_24;
    }
  }
  else
  {
    if (onceToken_MicroLocation_Default != -1)
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_58);
    v13 = logObject_MicroLocation_Default;
    if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_FAULT))
    {
      LODWORD(__str.__r_.__value_.__l.__data_) = 136380675;
      *(std::string::size_type *)((char *)__str.__r_.__value_.__r.__words + 4) = (std::string::size_type)a2;
      v14 = "Couldn't create select count statement. table: %{private}s";
LABEL_24:
      _os_log_impl(&dword_2419D9000, v13, OS_LOG_TYPE_FAULT, v14, (uint8_t *)&__str, 0xCu);
    }
  }
LABEL_25:
  CLSqliteDatabase::finalizeStatement(*((CLSqliteDatabase **)this + 1), (sqlite3 *)v11, v12);
  memset(&__str, 0, sizeof(__str));
  std::string::operator=(&__p, &__str);
  std::stringbuf::__init_buf_ptrs[abi:ne180100]((uint64_t)v29);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v28, (uint64_t)"INSERT INTO ", 12);
  v16 = strlen(a2);
  v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)a2, v16);
  v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"Counts", 6);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)" VALUES (", 9);
  v19 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)")", 1);
  std::stringbuf::str();
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v20 = (sqlite3 *)&__str;
  else
    v20 = (sqlite3 *)__str.__r_.__value_.__r.__words[0];
  v21 = CLSqliteDatabase::prepareStatementNoCache(this, v20);
  v22 = (sqlite3_stmt *)v21;
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__str.__r_.__value_.__l.__data_);
    if (v22)
      goto LABEL_32;
  }
  else if (v21)
  {
LABEL_32:
    CLSqliteDatabase::executeAndResetStatement(this, v22);
    CLSqliteDatabase::finalizeStatement(*((CLSqliteDatabase **)this + 1), v22, v23);
    CLSqliteDatabase::addCountTrigger(this, a2, 1);
    CLSqliteDatabase::addCountTrigger(this, a2, 0);
    goto LABEL_38;
  }
  if (onceToken_MicroLocation_Default != -1)
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_58);
  v24 = logObject_MicroLocation_Default;
  if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_FAULT))
  {
    LOWORD(__str.__r_.__value_.__l.__data_) = 0;
    _os_log_impl(&dword_2419D9000, v24, OS_LOG_TYPE_FAULT, "Couldn't prepare row count insertion statement", (uint8_t *)&__str, 2u);
  }
LABEL_38:
  v27[0] = *MEMORY[0x24BEDB7F0];
  v25 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(_QWORD *)((char *)v27 + *(_QWORD *)(v27[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  v28 = v25;
  v29[0] = MEMORY[0x24BEDB848] + 16;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x2426A0444](v31);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
}

void sub_241A987E8(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t CLSqliteDatabase::createTableIfNecessary_internal(uint64_t a1, char *a2, const char **a3, char **a4)
{
  uint64_t v8;
  _BOOL4 SoftwareVersionAndSerialNumberForTable;
  NSObject *v10;
  uint64_t TableIfSchemaDiffers;
  NSObject *v12;
  void *__p[2];
  uint64_t v15;
  void *v16[2];
  uint64_t v17;
  uint8_t v18[16];
  __int16 v19;
  uint8_t buf[4];
  char *v21;
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  if (!a2)
  {
    if (onceToken_MicroLocation_Default != -1)
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_58);
    v12 = logObject_MicroLocation_Default;
    if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)v18 = 0;
      _os_log_impl(&dword_2419D9000, v12, OS_LOG_TYPE_FAULT, "Must provide a table name", v18, 2u);
    }
    return 0;
  }
  if (*(_BYTE *)(a1 + 56))
    return 0;
  v8 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)v18 = v8;
  (*(void (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8);
  v19 = 256;
  v16[0] = 0;
  v16[1] = 0;
  v17 = 0;
  __p[0] = 0;
  __p[1] = 0;
  v15 = 0;
  SoftwareVersionAndSerialNumberForTable = CLSqliteDatabase::getSoftwareVersionAndSerialNumberForTable(a1, a2, (uint64_t)v16, (uint64_t)__p);
  if (!CLSqliteDatabase::tableExists_internal((CLSqliteDatabase *)a1, a2) && SoftwareVersionAndSerialNumberForTable)
  {
    if (onceToken_MicroLocation_Default != -1)
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_58);
    v10 = logObject_MicroLocation_Default;
    if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 136380675;
      v21 = a2;
      _os_log_impl(&dword_2419D9000, v10, OS_LOG_TYPE_FAULT, "Table does not exist but its metadata does. table: %{private}s", buf, 0xCu);
    }
    CLSqliteDatabase::deleteRowFromTableInfo((CLSqliteDatabase *)a1, a2);
  }
  TableIfSchemaDiffers = CLSqliteDatabase::createTableIfSchemaDiffers(a1, a2, a3, a4, 0);
  if ((_DWORD)TableIfSchemaDiffers)
    CLSqliteDatabase::createRowInTableInfo((CLSqliteDatabase *)a1, a2);
  if (SHIBYTE(v15) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v17) < 0)
    operator delete(v16[0]);
  (*(void (**)(uint64_t))(*(_QWORD *)v8 + 24))(v8);
  return TableIfSchemaDiffers;
}

void sub_241A98A80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t CLSqliteDatabase::createIndexIfNecessary(CLSqliteDatabase *this, const char *a2, CLSqliteDatabase *a3)
{
  uint64_t v6;
  size_t v7;
  _QWORD *v8;
  _QWORD *v9;
  _BYTE *v10;
  uint64_t v11;
  _QWORD *v12;
  size_t v13;
  _QWORD *v14;
  _QWORD *v15;
  std::string *v16;
  std::string::size_type size;
  _QWORD *v18;
  char *v19;
  size_t v20;
  int v21;
  void *v22;
  size_t v23;
  const void *v24;
  size_t v25;
  _BYTE *v26;
  size_t v27;
  _BOOL4 v28;
  _BOOL4 v29;
  NSObject *v30;
  _BYTE *v31;
  NSObject *v32;
  _BYTE *v33;
  NSObject *v34;
  int v35;
  _BYTE *v36;
  int v37;
  void **v38;
  void **v39;
  _BYTE *v40;
  void *p_p;
  const char *v42;
  sqlite3 *v43;
  CLSqliteDatabase *v44;
  sqlite3_stmt *v45;
  sqlite3_stmt *v46;
  NSObject *v47;
  std::string *v48;
  std::string::size_type v49;
  std::string::size_type v50;
  std::string::size_type v51;
  uint64_t v52;
  void *__p;
  char v55;
  void *v56;
  size_t v57;
  unsigned __int8 v58;
  std::string v59;
  uint64_t v60;
  void *v61;
  char v62;
  uint64_t v63;
  _QWORD v64[2];
  _QWORD v65[11];
  char v66;
  uint64_t v67;
  std::string v68;
  uint64_t v69;
  __int16 v70;
  _BYTE buf[12];
  char v72;
  _BYTE v73[22];
  __int16 v74;
  void *v75;
  uint64_t v76;

  v76 = *MEMORY[0x24BDAC8D0];
  v6 = *((_QWORD *)this + 2);
  v69 = v6;
  (*(void (**)(uint64_t))(*(_QWORD *)v6 + 16))(v6);
  v70 = 256;
  if (!a3)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 24))(v6);
  memset(&v68, 0, sizeof(v68));
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v64);
  v7 = strlen(a2);
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v65, (uint64_t)a2, v7);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Index", 5);
  CLSqliteDatabase::indexColumnsToString(a3, &v59);
  if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v68.__r_.__value_.__l.__data_);
  v68 = v59;
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v59);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v59.__r_.__value_.__r.__words[2], (uint64_t)"CREATE INDEX ", 13);
  std::stringbuf::str();
  if (v74 >= 0)
    v10 = v73;
  else
    v10 = *(_BYTE **)v73;
  if (v74 >= 0)
    v11 = HIBYTE(v74);
  else
    v11 = *(_QWORD *)&v73[8];
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v10, v11);
  if (SHIBYTE(v74) < 0)
    operator delete(*(void **)v73);
  v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v59.__r_.__value_.__r.__words[2], (uint64_t)" ON ", 4);
  v13 = strlen(a2);
  v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)a2, v13);
  v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)" (", 2);
  if ((v68.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v16 = &v68;
  else
    v16 = (std::string *)v68.__r_.__value_.__r.__words[0];
  if ((v68.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v68.__r_.__value_.__r.__words[2]);
  else
    size = v68.__r_.__value_.__l.__size_;
  v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)v16, size);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)")", 1);
  std::stringbuf::str();
  if (v74 >= 0)
    v19 = v73;
  else
    v19 = *(char **)v73;
  CLSqliteDatabase::getElementCreateStatement(this, "index", v19, &v56);
  if (SHIBYTE(v74) < 0)
    operator delete(*(void **)v73);
  v20 = v58;
  if ((v58 & 0x80u) != 0)
    v20 = v57;
  if (v20)
  {
    std::stringbuf::str();
    v21 = SHIBYTE(v74);
    v22 = *(void **)v73;
    if ((v58 & 0x80u) == 0)
      v23 = v58;
    else
      v23 = v57;
    if ((v58 & 0x80u) == 0)
      v24 = &v56;
    else
      v24 = v56;
    if (v74 >= 0)
      v25 = HIBYTE(v74);
    else
      v25 = *(_QWORD *)&v73[8];
    if (v74 >= 0)
      v26 = v73;
    else
      v26 = *(_BYTE **)v73;
    if (v25 >= v23)
      v27 = v23;
    else
      v27 = v25;
    v28 = memcmp(v24, v26, v27) == 0;
    v29 = v25 == v23 && v28;
    if (v21 < 0)
      operator delete(v22);
    if (v29)
    {
      if (onceToken_MicroLocation_Default != -1)
        dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_58);
      v30 = (id)logObject_MicroLocation_Default;
      if (os_log_type_enabled(v30, OS_LOG_TYPE_DEBUG))
      {
        std::stringbuf::str();
        v31 = v74 >= 0 ? v73 : *(_BYTE **)v73;
        *(_DWORD *)buf = 136380675;
        *(_QWORD *)&buf[4] = v31;
        _os_log_impl(&dword_2419D9000, v30, OS_LOG_TYPE_DEBUG, "Index already exists; not re-creating. index: %{private}s",
          buf,
          0xCu);
        if (SHIBYTE(v74) < 0)
          operator delete(*(void **)v73);
      }

      goto LABEL_96;
    }
    if (onceToken_MicroLocation_Default != -1)
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_58);
    v34 = (id)logObject_MicroLocation_Default;
    if (os_log_type_enabled(v34, OS_LOG_TYPE_DEBUG))
    {
      std::stringbuf::str();
      v35 = v72;
      v36 = *(_BYTE **)buf;
      v37 = (char)v58;
      v38 = (void **)v56;
      std::stringbuf::str();
      v39 = &v56;
      if (v37 < 0)
        v39 = v38;
      v40 = buf;
      if (v35 < 0)
        v40 = v36;
      *(_DWORD *)v73 = 136381187;
      p_p = &__p;
      if (v55 < 0)
        p_p = __p;
      *(_QWORD *)&v73[4] = v40;
      *(_WORD *)&v73[12] = 2081;
      *(_QWORD *)&v73[14] = v39;
      v74 = 2081;
      v75 = p_p;
      _os_log_impl(&dword_2419D9000, v34, OS_LOG_TYPE_DEBUG, "Index already exists but is different; dropping. index: %{private}s, actual: %{private}s, expected: %{private}s",
        v73,
        0x20u);
      if (v55 < 0)
        operator delete(__p);
      if (v72 < 0)
        operator delete(*(void **)buf);
    }

    std::stringbuf::str();
    if (v74 >= 0)
      v42 = v73;
    else
      v42 = *(const char **)v73;
    CLSqliteDatabase::dropIndex(this, v42);
    if (SHIBYTE(v74) < 0)
      operator delete(*(void **)v73);
  }
  else
  {
    if (onceToken_MicroLocation_Default != -1)
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_58);
    v32 = (id)logObject_MicroLocation_Default;
    if (os_log_type_enabled(v32, OS_LOG_TYPE_DEBUG))
    {
      std::stringbuf::str();
      v33 = v74 >= 0 ? v73 : *(_BYTE **)v73;
      *(_DWORD *)buf = 136380675;
      *(_QWORD *)&buf[4] = v33;
      _os_log_impl(&dword_2419D9000, v32, OS_LOG_TYPE_DEBUG, "Index does not exist; creating. index: %{private}s",
        buf,
        0xCu);
      if (SHIBYTE(v74) < 0)
        operator delete(*(void **)v73);
    }

  }
  std::stringbuf::str();
  if (v74 >= 0)
    v43 = (sqlite3 *)v73;
  else
    v43 = *(sqlite3 **)v73;
  v44 = CLSqliteDatabase::prepareStatementNoCache(this, v43);
  v45 = (sqlite3_stmt *)v44;
  if (SHIBYTE(v74) < 0)
  {
    operator delete(*(void **)v73);
    if (v45)
      goto LABEL_88;
LABEL_90:
    if (onceToken_MicroLocation_Default != -1)
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_58);
    v47 = logObject_MicroLocation_Default;
    if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
    {
      v48 = &v68;
      if ((v68.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v48 = (std::string *)v68.__r_.__value_.__r.__words[0];
      *(_DWORD *)v73 = 136380931;
      *(_QWORD *)&v73[4] = a2;
      *(_WORD *)&v73[12] = 2080;
      *(_QWORD *)&v73[14] = v48;
      _os_log_impl(&dword_2419D9000, v47, OS_LOG_TYPE_DEFAULT, "#warning Couldn't create index statement. table: %{private}s, columns: %s", v73, 0x16u);
    }
    goto LABEL_96;
  }
  if (!v44)
    goto LABEL_90;
LABEL_88:
  CLSqliteDatabase::executeAndResetStatement(this, v45);
  CLSqliteDatabase::finalizeStatement(*((CLSqliteDatabase **)this + 1), v45, v46);
LABEL_96:
  if ((char)v58 < 0)
    operator delete(v56);
  v49 = *MEMORY[0x24BEDB7F0];
  v59.__r_.__value_.__r.__words[0] = v49;
  v50 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  v51 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(std::string::size_type *)((char *)v59.__r_.__value_.__r.__words + *(_QWORD *)(v49 - 24)) = v50;
  v52 = MEMORY[0x24BEDB848] + 16;
  v59.__r_.__value_.__r.__words[2] = v51;
  v60 = MEMORY[0x24BEDB848] + 16;
  if (v62 < 0)
    operator delete(v61);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x2426A0444](&v63);
  v64[0] = v49;
  *(_QWORD *)((char *)v64 + *(_QWORD *)(v49 - 24)) = v50;
  v65[0] = v51;
  v65[1] = v52;
  if (v66 < 0)
    operator delete((void *)v65[9]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x2426A0444](&v67);
  if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v68.__r_.__value_.__l.__data_);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 24))(v6);
}

void sub_241A991EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,char a53)
{
  void *v53;
  uint64_t v54;

  if (*(char *)(v54 - 153) < 0)
    operator delete(*(void **)(v54 - 176));

  if (a17 < 0)
    operator delete(__p);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a18);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a53);
  if (*(char *)(v54 - 201) < 0)
    operator delete(*(void **)(v54 - 224));
  AutoLocker::~AutoLocker((pthread_mutex_t **)(v54 - 200));
  _Unwind_Resume(a1);
}

std::string *CLSqliteDatabase::indexColumnsToString@<X0>(CLSqliteDatabase *this@<X0>, std::string *a2@<X8>)
{
  std::string *result;
  const std::string::value_type *v6;
  uint64_t v7;
  char *v8;

  result = (std::string *)std::string::basic_string[abi:ne180100]<0>(a2, "");
  if (this)
  {
    v6 = *(const std::string::value_type **)this;
    if (*(_QWORD *)this)
    {
      v7 = 0;
      do
      {
        if (v7)
        {
          std::string::append(a2, ", ");
          v6 = (const std::string::value_type *)*((_QWORD *)this + v7);
        }
        result = std::string::append(a2, v6);
        v8 = (char *)this + 8 * v7++;
        v6 = (const std::string::value_type *)*((_QWORD *)v8 + 1);
      }
      while (v6);
    }
  }
  return result;
}

void sub_241A99368(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t CLSqliteDatabase::dropIndex(CLSqliteDatabase *this, const char *a2)
{
  uint64_t v4;
  _QWORD *v5;
  size_t v6;
  sqlite3 *v7;
  CLSqliteDatabase *v8;
  sqlite3_stmt *v9;
  sqlite3_stmt *v10;
  NSObject *v11;
  uint64_t v12;
  _QWORD v14[2];
  _QWORD v15[11];
  char v16;
  _QWORD v17[21];
  __int16 v18;
  _BYTE buf[12];
  char v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  v4 = *((_QWORD *)this + 2);
  v17[19] = v4;
  (*(void (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
  v18 = 256;
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v14);
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"DROP INDEX ", 11);
  v6 = strlen(a2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)a2, v6);
  std::stringbuf::str();
  if (v20 >= 0)
    v7 = (sqlite3 *)buf;
  else
    v7 = *(sqlite3 **)buf;
  v8 = CLSqliteDatabase::prepareStatementNoCache(this, v7);
  v9 = (sqlite3_stmt *)v8;
  if (v20 < 0)
  {
    operator delete(*(void **)buf);
    if (v9)
      goto LABEL_6;
  }
  else if (v8)
  {
LABEL_6:
    CLSqliteDatabase::executeAndResetStatement(this, v9);
    CLSqliteDatabase::finalizeStatement(*((CLSqliteDatabase **)this + 1), v9, v10);
    goto LABEL_12;
  }
  if (onceToken_MicroLocation_Default != -1)
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_58);
  v11 = logObject_MicroLocation_Default;
  if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136380675;
    *(_QWORD *)&buf[4] = a2;
    _os_log_impl(&dword_2419D9000, v11, OS_LOG_TYPE_DEFAULT, "#warning Couldn't create drop index statement. index: %{private}s", buf, 0xCu);
  }
LABEL_12:
  v14[0] = *MEMORY[0x24BEDB7F0];
  v12 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(_QWORD *)((char *)v14 + *(_QWORD *)(v14[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  v15[0] = v12;
  v15[1] = MEMORY[0x24BEDB848] + 16;
  if (v16 < 0)
    operator delete((void *)v15[9]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x2426A0444](v17);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
}

void sub_241A9958C(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

BOOL CLSqliteDatabase::executeAndResetStatement(CLSqliteDatabase *this, sqlite3_stmt *a2)
{
  uint64_t v4;
  CLSqliteDatabase *v5;
  int v6;
  _BOOL8 v7;
  CLSqliteDatabase *v8;
  int v9;

  v4 = *((_QWORD *)this + 2);
  (*(void (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
  v5 = (CLSqliteDatabase *)sqlite3_step(a2);
  v6 = (int)v5;
  v7 = (_DWORD)v5 == 101;
  if ((_DWORD)v5 != 101)
  {
    CLSqliteDatabase::displaySqlResult(v5, "sqlite3_step()", (int)v5, a2);
    CLSqliteDatabase::handleSqlError(*((sqlite3 **)this + 1), (uint64_t)this + 88, *((unsigned __int8 *)this + 56), v6);
  }
  v8 = (CLSqliteDatabase *)sqlite3_reset(a2);
  v9 = (int)v8;
  if ((_DWORD)v8)
  {
    CLSqliteDatabase::displaySqlResult(v8, "sqlite3_reset()", (int)v8, a2);
    CLSqliteDatabase::handleSqlError(*((sqlite3 **)this + 1), (uint64_t)this + 88, *((unsigned __int8 *)this + 56), v9);
    v7 = 0;
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
  return v7;
}

void sub_241A996CC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  AutoLocker::~AutoLocker((pthread_mutex_t **)va);
  _Unwind_Resume(a1);
}

uint64_t CLSqliteDatabase::dropTrigger(CLSqliteDatabase *this, char *a2)
{
  uint64_t v4;
  _QWORD *v5;
  size_t v6;
  sqlite3 *p_buf;
  CLSqliteDatabase *v8;
  sqlite3_stmt *v9;
  sqlite3_stmt *v10;
  uint64_t v11;
  uint64_t v12;
  const char *v13;
  NSObject *v14;
  os_log_type_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD v19[2];
  _QWORD v20[11];
  char v21;
  _QWORD v22[21];
  __int16 v23;
  __int128 buf;
  char v25;
  uint64_t v26;

  v26 = *MEMORY[0x24BDAC8D0];
  v4 = *((_QWORD *)this + 2);
  v22[19] = v4;
  (*(void (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
  v23 = 256;
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v19);
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"DROP TRIGGER ", 13);
  v6 = strlen(a2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)a2, v6);
  CLSqliteDatabase::getElementCreateStatement(this, "trigger", a2, &buf);
  if (v25 < 0)
  {
    v11 = *((_QWORD *)&buf + 1);
    operator delete((void *)buf);
    if (v11)
    {
LABEL_3:
      std::stringbuf::str();
      if (v25 >= 0)
        p_buf = (sqlite3 *)&buf;
      else
        p_buf = (sqlite3 *)buf;
      v8 = CLSqliteDatabase::prepareStatementNoCache(this, p_buf);
      v9 = (sqlite3_stmt *)v8;
      if (v25 < 0)
      {
        operator delete((void *)buf);
        if (v9)
          goto LABEL_8;
      }
      else if (v8)
      {
LABEL_8:
        CLSqliteDatabase::executeAndResetStatement(this, v9);
        CLSqliteDatabase::finalizeStatement(*((CLSqliteDatabase **)this + 1), v9, v10);
        goto LABEL_20;
      }
      if (onceToken_MicroLocation_Default != -1)
        dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_58);
      v16 = logObject_MicroLocation_Default;
      if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
      {
        LODWORD(buf) = 136315138;
        *(_QWORD *)((char *)&buf + 4) = a2;
        v13 = "#warning Couldn't create drop trigger statement. trigger: %s";
        v14 = v16;
        v15 = OS_LOG_TYPE_DEFAULT;
        goto LABEL_19;
      }
      goto LABEL_20;
    }
  }
  else if (v25)
  {
    goto LABEL_3;
  }
  if (onceToken_MicroLocation_Default != -1)
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_58);
  v12 = logObject_MicroLocation_Default;
  if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEBUG))
  {
    LODWORD(buf) = 136315138;
    *(_QWORD *)((char *)&buf + 4) = a2;
    v13 = "Trigger does not exist. trigger: %s";
    v14 = v12;
    v15 = OS_LOG_TYPE_DEBUG;
LABEL_19:
    _os_log_impl(&dword_2419D9000, v14, v15, v13, (uint8_t *)&buf, 0xCu);
  }
LABEL_20:
  v19[0] = *MEMORY[0x24BEDB7F0];
  v17 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(_QWORD *)((char *)v19 + *(_QWORD *)(v19[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  v20[0] = v17;
  v20[1] = MEMORY[0x24BEDB848] + 16;
  if (v21 < 0)
    operator delete((void *)v20[9]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x2426A0444](v22);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
}

void sub_241A9998C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  if (*(char *)(v9 - 57) < 0)
    operator delete(*(void **)(v9 - 80));
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a9);
  AutoLocker::~AutoLocker((pthread_mutex_t **)(v9 - 104));
  _Unwind_Resume(a1);
}

uint64_t CLSqliteDatabase::dropTable_internal(CLSqliteDatabase *this, char *a2)
{
  uint64_t v4;
  NSObject *v5;
  sqlite3 *p_buf;
  CLSqliteDatabase *v7;
  sqlite3_stmt *v8;
  std::string buf;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  v4 = *((_QWORD *)this + 2);
  (*(void (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
  if (onceToken_MicroLocation_Default != -1)
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_58);
  v5 = logObject_MicroLocation_Default;
  if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
  {
    LODWORD(buf.__r_.__value_.__l.__data_) = 136380675;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)a2;
    _os_log_impl(&dword_2419D9000, v5, OS_LOG_TYPE_DEFAULT, "Dropping table. table: %{private}s", (uint8_t *)&buf, 0xCu);
  }
  CLSqliteDatabase::deleteRowFromTableInfo(this, a2);
  std::string::basic_string[abi:ne180100]<0>(&buf, "DROP TABLE IF EXISTS ");
  std::string::append(&buf, a2);
  if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_buf = (sqlite3 *)&buf;
  else
    p_buf = (sqlite3 *)buf.__r_.__value_.__r.__words[0];
  v7 = CLSqliteDatabase::prepareStatementNoCache(this, p_buf);
  CLSqliteDatabase::executeAndResetStatement(this, (sqlite3_stmt *)v7);
  CLSqliteDatabase::finalizeStatement(*((CLSqliteDatabase **)this + 1), (sqlite3 *)v7, v8);
  CLSqliteDatabase::reduceFreePages(this, 0x7FFFFFFFFFFFFFFFLL);
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
    operator delete(buf.__r_.__value_.__l.__data_);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
}

void sub_241A99B60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t CLSqliteDatabase::addCountTrigger(CLSqliteDatabase *this, const char *a2, int a3)
{
  uint64_t v6;
  const char *v7;
  const char *v8;
  const char *v9;
  size_t v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  size_t v16;
  _QWORD *v17;
  _QWORD *v18;
  size_t v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  sqlite3 *v27;
  CLSqliteDatabase *v28;
  sqlite3_stmt *v29;
  sqlite3_stmt *v30;
  NSObject *v31;
  uint64_t v32;
  _QWORD v34[2];
  _QWORD v35[11];
  char v36;
  _QWORD v37[21];
  __int16 v38;
  _BYTE buf[12];
  char v40;
  uint64_t v41;

  v41 = *MEMORY[0x24BDAC8D0];
  v6 = *((_QWORD *)this + 2);
  v37[19] = v6;
  (*(void (**)(uint64_t))(*(_QWORD *)v6 + 16))(v6);
  v38 = 256;
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v34);
  if (a3)
    v7 = "Increment";
  else
    v7 = "Decrement";
  if (a3)
    v8 = "INSERT";
  else
    v8 = "DELETE";
  if (a3)
    v9 = "+";
  else
    v9 = "-";
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)"CREATE TRIGGER IF NOT EXISTS ", 29);
  v10 = strlen(a2);
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)a2, v10);
  v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)v7, 9);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"RowCount", 8);
  v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)" AFTER ", 7);
  v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)v8, 6);
  v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)" ON ", 4);
  v16 = strlen(a2);
  v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)a2, v16);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)" FOR EACH ROW BEGIN", 19);
  v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)" UPDATE ", 8);
  v19 = strlen(a2);
  v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)a2, v19);
  v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"Counts", 6);
  v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)" SET ", 5);
  v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"Count", 5);
  v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)"=", 1);
  v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"Count", 5);
  v26 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)v9, 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)"1 WHERE rowid=1; END", 20);
  std::stringbuf::str();
  if (v40 >= 0)
    v27 = (sqlite3 *)buf;
  else
    v27 = *(sqlite3 **)buf;
  v28 = CLSqliteDatabase::prepareStatementNoCache(this, v27);
  v29 = (sqlite3_stmt *)v28;
  if (v40 < 0)
  {
    operator delete(*(void **)buf);
    if (v29)
      goto LABEL_15;
  }
  else if (v28)
  {
LABEL_15:
    CLSqliteDatabase::executeAndResetStatement(this, v29);
    CLSqliteDatabase::finalizeStatement(*((CLSqliteDatabase **)this + 1), v29, v30);
    goto LABEL_21;
  }
  if (onceToken_MicroLocation_Default != -1)
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_58);
  v31 = logObject_MicroLocation_Default;
  if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_FAULT))
  {
    *(_DWORD *)buf = 136380675;
    *(_QWORD *)&buf[4] = a2;
    _os_log_impl(&dword_2419D9000, v31, OS_LOG_TYPE_FAULT, "Couldn't create add count trigger statement. table: %{private}s", buf, 0xCu);
  }
LABEL_21:
  v34[0] = *MEMORY[0x24BEDB7F0];
  v32 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(_QWORD *)((char *)v34 + *(_QWORD *)(v34[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  v35[0] = v32;
  v35[1] = MEMORY[0x24BEDB848] + 16;
  if (v36 < 0)
    operator delete((void *)v35[9]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x2426A0444](v37);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 24))(v6);
}

void sub_241A99F0C(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t CLSqliteDatabase::createTable(uint64_t a1, const char *a2, const char **a3)
{
  uint64_t v6;
  NSObject *v7;
  unsigned int v8;
  uint64_t *v9;
  uint64_t v10;
  _QWORD *v11;
  size_t v12;
  _QWORD *v13;
  void *p_p;
  uint64_t v15;
  const char *v16;
  size_t v17;
  void *v18;
  uint64_t v19;
  NSObject *v20;
  void **v21;
  sqlite3 *v22;
  CLSqliteDatabase *v23;
  sqlite3_stmt *v24;
  sqlite3_stmt *v25;
  uint64_t v26;
  void *__p;
  uint64_t v29;
  unsigned __int8 v30;
  uint64_t v31;
  __int16 v32;
  uint8_t v33[4];
  void **v34;
  uint8_t buf[16];
  _QWORD v36[11];
  char v37;
  _QWORD v38[20];

  v38[19] = *MEMORY[0x24BDAC8D0];
  v6 = *(_QWORD *)(a1 + 16);
  v31 = v6;
  (*(void (**)(uint64_t))(*(_QWORD *)v6 + 16))(v6);
  v32 = 256;
  if (onceToken_MicroLocation_Default != -1)
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_58);
  v7 = logObject_MicroLocation_Default;
  if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 136380675;
    *(_QWORD *)&buf[4] = a2;
    _os_log_impl(&dword_2419D9000, v7, OS_LOG_TYPE_DEBUG, "Creating table. table: %{private}s", buf, 0xCu);
  }
  if (a3 && *a3)
  {
    v8 = 0;
    v9 = (uint64_t *)(a3 + 6);
    do
    {
      v8 += *((unsigned __int8 *)v9 - 36);
      v10 = *v9;
      v9 += 6;
    }
    while (v10);
    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)buf);
    v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)"CREATE TABLE ", 13);
    v12 = strlen(a2);
    v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)a2, v12);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)" (", 2);
    CLSqliteDatabase::columnsToString(a3, 1, v8 < 2, (uint64_t)&__p);
    if ((v30 & 0x80u) == 0)
      p_p = &__p;
    else
      p_p = __p;
    if ((v30 & 0x80u) == 0)
      v15 = v30;
    else
      v15 = v29;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)p_p, v15);
    if ((char)v30 < 0)
      operator delete(__p);
    if (v8 >= 2)
    {
      v16 = (const char *)&__p;
      CLSqliteDatabase::getPrimaryKeyDefinitionString((uint64_t)a3, &__p);
      if ((v30 & 0x80u) != 0)
        v16 = (const char *)__p;
      v17 = strlen(v16);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)v16, v17);
      if ((char)v30 < 0)
        operator delete(__p);
    }
    CLSqliteDatabase::getForeignKeyDefinitionString(a1, (uint64_t)a3, &__p);
    if ((v30 & 0x80u) == 0)
      v18 = &__p;
    else
      v18 = __p;
    if ((v30 & 0x80u) == 0)
      v19 = v30;
    else
      v19 = v29;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)v18, v19);
    if ((char)v30 < 0)
      operator delete(__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)")", 1);
    if (onceToken_MicroLocation_Default != -1)
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_58);
    v20 = (id)logObject_MicroLocation_Default;
    if (os_log_type_enabled(v20, OS_LOG_TYPE_DEBUG))
    {
      std::stringbuf::str();
      v21 = (v30 & 0x80u) == 0 ? &__p : (void **)__p;
      *(_DWORD *)v33 = 136315138;
      v34 = v21;
      _os_log_impl(&dword_2419D9000, v20, OS_LOG_TYPE_DEBUG, "Schema statement created. schema: %s", v33, 0xCu);
      if ((char)v30 < 0)
        operator delete(__p);
    }

    std::stringbuf::str();
    if ((v30 & 0x80u) == 0)
      v22 = (sqlite3 *)&__p;
    else
      v22 = (sqlite3 *)__p;
    v23 = CLSqliteDatabase::prepareStatementNoCache((CLSqliteDatabase *)a1, v22);
    v24 = (sqlite3_stmt *)v23;
    if ((char)v30 < 0)
    {
      operator delete(__p);
      if (!v24)
      {
LABEL_46:
        *(_QWORD *)buf = *MEMORY[0x24BEDB7F0];
        v26 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
        *(_QWORD *)&buf[*(_QWORD *)(*(_QWORD *)buf - 24)] = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
        v36[0] = v26;
        v36[1] = MEMORY[0x24BEDB848] + 16;
        if (v37 < 0)
          operator delete((void *)v36[9]);
        std::streambuf::~streambuf();
        std::iostream::~basic_iostream();
        MEMORY[0x2426A0444](v38);
        return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 24))(v6);
      }
    }
    else if (!v23)
    {
      goto LABEL_46;
    }
    sqlite3_step(v24);
    CLSqliteDatabase::finalizeStatement(*(CLSqliteDatabase **)(a1 + 8), v24, v25);
    goto LABEL_46;
  }
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 24))(v6);
}

void sub_241A9A34C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, pthread_mutex_t *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20)
{
  void *v20;

  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a20);
  AutoLocker::~AutoLocker(&a15);
  _Unwind_Resume(a1);
}

BOOL CLSqliteDatabase::bind(CLSqliteDatabase *this, sqlite3_stmt *a2, char *__s, const char *a4)
{
  int v5;
  int v7;
  int v8;
  NSObject *v9;
  int v11;
  char *v12;
  __int16 v13;
  int v14;
  __int16 v15;
  int v16;
  __int16 v17;
  const char *v18;
  uint64_t v19;

  v5 = (int)a2;
  v19 = *MEMORY[0x24BDAC8D0];
  v7 = strlen(__s);
  v8 = sqlite3_bind_text((sqlite3_stmt *)this, v5, __s, v7, 0);
  if (v8)
  {
    if (onceToken_MicroLocation_Default != -1)
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_58);
    v9 = (id)logObject_MicroLocation_Default;
    if (os_log_type_enabled(v9, OS_LOG_TYPE_FAULT))
    {
      v11 = 136381443;
      v12 = __s;
      v13 = 1024;
      v14 = v5;
      v15 = 1024;
      v16 = v8;
      v17 = 2081;
      v18 = sqlite3_sql((sqlite3_stmt *)this);
      _os_log_impl(&dword_2419D9000, v9, OS_LOG_TYPE_FAULT, "Could not bind. value: %{private}s, index: %d, sqlite_rc: %d, query: %{private}s", (uint8_t *)&v11, 0x22u);
    }

  }
  return v8 == 0;
}

void sub_241A9A508(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

BOOL CLSqliteDatabase::tableExists_internal(CLSqliteDatabase *this, const char *a2)
{
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  size_t v8;
  _QWORD *v9;
  sqlite3 *p_p;
  CLSqliteDatabase *v11;
  int v12;
  sqlite3_stmt *v13;
  uint64_t v14;
  void *__p;
  char v17;
  _QWORD v18[2];
  _QWORD v19[11];
  char v20;
  _QWORD v21[21];
  __int16 v22;

  v4 = *((_QWORD *)this + 2);
  v21[19] = v4;
  (*(void (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
  v22 = 256;
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v18);
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"SELECT name FROM ", 17);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"sqlite_master", 13);
  v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)" WHERE name='", 13);
  v8 = strlen(a2);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)a2, v8);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"';", 2);
  std::stringbuf::str();
  if (v17 >= 0)
    p_p = (sqlite3 *)&__p;
  else
    p_p = (sqlite3 *)__p;
  v11 = CLSqliteDatabase::prepareStatementNoCache(this, p_p);
  if (v17 < 0)
    operator delete(__p);
  v12 = sqlite3_step((sqlite3_stmt *)v11);
  CLSqliteDatabase::finalizeStatement(*((CLSqliteDatabase **)this + 1), (sqlite3 *)v11, v13);
  v18[0] = *MEMORY[0x24BEDB7F0];
  v14 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(_QWORD *)((char *)v18 + *(_QWORD *)(v18[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  v19[0] = v14;
  v19[1] = MEMORY[0x24BEDB848] + 16;
  if (v20 < 0)
    operator delete((void *)v19[9]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x2426A0444](v21);
  (*(void (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
  return v12 == 100;
}

void sub_241A9A6B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  uint64_t v16;

  if (a15 < 0)
    operator delete(__p);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a16);
  AutoLocker::~AutoLocker((pthread_mutex_t **)(v16 - 72));
  _Unwind_Resume(a1);
}

uint64_t CLSqliteDatabase::getPrimaryKeyDefinitionString@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unsigned int v4;
  uint64_t v5;
  int v6;
  int v7;
  _QWORD *v8;
  const char *v9;
  size_t v10;
  uint64_t v11;
  _QWORD *v12;
  size_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD v16[2];
  _QWORD v17[11];
  char v18;
  uint64_t v19;
  char v20;

  v2 = result;
  if (!*(_BYTE *)(result + 12))
  {
    v6 = 1;
    v5 = result;
    while (*(_QWORD *)v5)
    {
      v7 = *(unsigned __int8 *)(v5 + 60);
      ++v6;
      v5 += 48;
      if (v7)
      {
        v4 = v6;
        goto LABEL_7;
      }
    }
    goto LABEL_15;
  }
  v4 = 1;
  v5 = result;
LABEL_7:
  if (!*(_QWORD *)v5)
  {
LABEL_15:
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
    return result;
  }
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v16);
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)", PRIMARY KEY (", 15);
  v9 = *(const char **)v5;
  v10 = strlen(v9);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)v9, v10);
  v11 = v2 + 48 * v4;
  if (*(_QWORD *)v11)
  {
    do
    {
      if (*(_BYTE *)(v11 + 12))
      {
        v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)", ", 2);
        v13 = strlen(*(const char **)v11);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, *(_QWORD *)v11, v13);
      }
      v14 = *(_QWORD *)(v11 + 48);
      v11 += 48;
    }
    while (v14);
  }
  v20 = 41;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)&v20, 1);
  std::stringbuf::str();
  v16[0] = *MEMORY[0x24BEDB7F0];
  v15 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(_QWORD *)((char *)v16 + *(_QWORD *)(v16[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  v17[0] = v15;
  v17[1] = MEMORY[0x24BEDB848] + 16;
  if (v18 < 0)
    operator delete((void *)v17[9]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x2426A0444](&v19);
}

void sub_241A9A8AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void CLSqliteDatabase::columnsToString(const char **a1@<X0>, int a2@<W1>, int a3@<W2>, uint64_t a4@<X8>)
{
  const char *v7;
  uint64_t v8;
  int v9;
  const char **v10;
  size_t v11;
  size_t v12;
  std::string *v13;
  const void *v14;
  char *v15;
  size_t v16;
  std::string *v17;
  const void *v18;
  int v19;
  const std::string::value_type *v20;
  uint64_t v21;
  uint64_t v22;
  std::string *v23;
  std::string::size_type v24;
  char v25;
  std::string v27;
  _QWORD v28[3];

  v28[2] = *MEMORY[0x24BDAC8D0];
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)a4, "");
  v7 = *a1;
  if (*a1)
  {
    v8 = 0;
    v9 = 0;
    v10 = a1;
    do
    {
      if (v8)
      {
        std::string::append((std::string *)a4, ", ");
        v7 = *v10;
      }
      if (*(char *)(a4 + 23) >= 0)
        v11 = *(unsigned __int8 *)(a4 + 23);
      else
        v11 = *(_QWORD *)(a4 + 8);
      v12 = strlen(v7);
      std::string::basic_string[abi:ne180100]((uint64_t)&v27, v11 + v12);
      if ((v27.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v13 = &v27;
      else
        v13 = (std::string *)v27.__r_.__value_.__r.__words[0];
      if (v11)
      {
        if (*(char *)(a4 + 23) >= 0)
          v14 = (const void *)a4;
        else
          v14 = *(const void **)a4;
        memmove(v13, v14, v11);
      }
      v15 = (char *)v13 + v11;
      if (v12)
        memmove(v15, v7, v12);
      v15[v12] = 0;
      if (*(char *)(a4 + 23) < 0)
        operator delete(*(void **)a4);
      *(std::string *)a4 = v27;
      if (a2)
      {
        if (*(char *)(a4 + 23) >= 0)
          v16 = *(unsigned __int8 *)(a4 + 23);
        else
          v16 = *(_QWORD *)(a4 + 8);
        std::string::basic_string[abi:ne180100]((uint64_t)&v27, v16 + 1);
        if ((v27.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v17 = &v27;
        else
          v17 = (std::string *)v27.__r_.__value_.__r.__words[0];
        if (v16)
        {
          if (*(char *)(a4 + 23) >= 0)
            v18 = (const void *)a4;
          else
            v18 = *(const void **)a4;
          memmove(v17, v18, v16);
        }
        *(_WORD *)((char *)&v17->__r_.__value_.__l.__data_ + v16) = 32;
        v19 = (int)a1[6 * v8 + 1];
        v20 = "INTEGER";
        if (v19 != 1)
        {
          v21 = 0;
          do
          {
            v22 = v21;
            v21 += 16;
          }
          while (v21 != 80 && *(_DWORD *)((char *)&unk_2511D6640 + v22 + 16) != v19);
          v20 = *(const std::string::value_type **)((char *)&unk_2511D6640 + v22 + 24);
        }
        v23 = std::string::append(&v27, v20);
        v24 = v23->__r_.__value_.__r.__words[0];
        v28[0] = v23->__r_.__value_.__l.__size_;
        *(_QWORD *)((char *)v28 + 7) = *(std::string::size_type *)((char *)&v23->__r_.__value_.__r.__words[1] + 7);
        v25 = HIBYTE(v23->__r_.__value_.__r.__words[2]);
        v23->__r_.__value_.__l.__size_ = 0;
        v23->__r_.__value_.__r.__words[2] = 0;
        v23->__r_.__value_.__r.__words[0] = 0;
        if (*(char *)(a4 + 23) < 0)
          operator delete(*(void **)a4);
        *(_QWORD *)a4 = v24;
        *(_QWORD *)(a4 + 8) = v28[0];
        *(_QWORD *)(a4 + 15) = *(_QWORD *)((char *)v28 + 7);
        *(_BYTE *)(a4 + 23) = v25;
        if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v27.__r_.__value_.__l.__data_);
      }
      if (((a3 ^ 1 | v9) & 1) == 0)
      {
        if (BYTE4(a1[6 * v8 + 1]))
        {
          std::string::append((std::string *)a4, " PRIMARY KEY");
          if (BYTE5(a1[6 * v8 + 1]))
            std::string::append((std::string *)a4, " AUTOINCREMENT");
          v9 = 1;
        }
        else
        {
          v9 = 0;
        }
      }
      ++v8;
      v10 = &a1[6 * v8];
      v7 = *v10;
    }
    while (*v10);
  }
}

void sub_241A9ABA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  uint64_t v17;

  if (a17 < 0)
    operator delete(__p);
  if (*(char *)(v17 + 23) < 0)
    operator delete(*(void **)v17);
  _Unwind_Resume(exception_object);
}

uint64_t CLSqliteDatabase::getForeignKeyDefinitionString@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  const char *v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  _QWORD *v12;
  _QWORD *v13;
  size_t v14;
  _QWORD *v15;
  _QWORD *v16;
  size_t v17;
  _QWORD *v18;
  _QWORD *v19;
  void *p_p;
  uint64_t v21;
  _QWORD *v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  const char *v27;
  NSObject *v28;
  os_log_type_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v33;
  void *__p;
  uint64_t v35;
  unsigned __int8 v36;
  _QWORD v37[2];
  _QWORD v38[11];
  char v39;
  uint64_t v40;

  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v37);
  if (a2)
  {
    v33 = a3;
    if (*(_QWORD *)a2)
    {
      do
      {
        if (*(_BYTE *)(a2 + 40))
        {
          if (!CLSqliteDatabase::isForeignKeyReferenceValid(a1, a2))
          {
            if (onceToken_MicroLocation_Default != -1)
              dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_58);
            a3 = v33;
            v30 = logObject_MicroLocation_Default;
            if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_FAULT))
            {
              LOWORD(__p) = 0;
              v27 = "Foreign key reference and index check failed";
              v28 = v30;
              v29 = OS_LOG_TYPE_FAULT;
LABEL_31:
              _os_log_impl(&dword_2419D9000, v28, v29, v27, (uint8_t *)&__p, 2u);
            }
            goto LABEL_32;
          }
          v7 = *(const char **)(a2 + 16);
          v6 = *(const char **)(a2 + 24);
          v8 = *(int *)(a2 + 32);
          v9 = *(int *)(a2 + 36);
          v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v38, (uint64_t)", FOREIGN KEY(", 14);
          v11 = strlen(*(const char **)a2);
          v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, *(_QWORD *)a2, v11);
          v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)") REFERENCES ", 13);
          v14 = strlen(v7);
          v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)v7, v14);
          v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"(", 1);
          v17 = strlen(v6);
          v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)v6, v17);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)")", 1);
          v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v38, (uint64_t)" ON DELETE ", 11);
          std::string::basic_string[abi:ne180100]<0>(&__p, off_2511D66D0[v8]);
          if ((v36 & 0x80u) == 0)
            p_p = &__p;
          else
            p_p = __p;
          if ((v36 & 0x80u) == 0)
            v21 = v36;
          else
            v21 = v35;
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)p_p, v21);
          if ((char)v36 < 0)
            operator delete(__p);
          v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v38, (uint64_t)" ON UPDATE ", 11);
          std::string::basic_string[abi:ne180100]<0>(&__p, off_2511D66D0[v9]);
          if ((v36 & 0x80u) == 0)
            v23 = &__p;
          else
            v23 = __p;
          if ((v36 & 0x80u) == 0)
            v24 = v36;
          else
            v24 = v35;
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)v23, v24);
          if ((char)v36 < 0)
            operator delete(__p);
        }
        v25 = *(_QWORD *)(a2 + 48);
        a2 += 48;
      }
      while (v25);
    }
    std::stringbuf::str();
  }
  else
  {
    if (onceToken_MicroLocation_Default != -1)
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_58);
    v26 = logObject_MicroLocation_Default;
    if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEBUG))
    {
      LOWORD(__p) = 0;
      v27 = "getForeignKeyDefinitionString: NULL column definition";
      v28 = v26;
      v29 = OS_LOG_TYPE_DEBUG;
      goto LABEL_31;
    }
LABEL_32:
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
  }
  v37[0] = *MEMORY[0x24BEDB7F0];
  v31 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(_QWORD *)((char *)v37 + *(_QWORD *)(v37[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  v38[0] = v31;
  v38[1] = MEMORY[0x24BEDB848] + 16;
  if (v39 < 0)
    operator delete((void *)v38[9]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x2426A0444](&v40);
}

void sub_241A9AF18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, char a18)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a18);
  _Unwind_Resume(a1);
}

BOOL CLSqliteDatabase::getSoftwareVersionAndSerialNumberForTable(uint64_t a1, char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  CLSqliteDatabase *v9;
  const char *v10;
  sqlite3_stmt *v11;
  int v12;
  char *v13;
  char *v14;
  NSObject *v15;
  _QWORD *v16;
  void *v17;
  void *v18;
  _BYTE buf[24];
  int v21;
  __int16 v22;
  void *v23;
  __int16 v24;
  void *v25;
  uint64_t v26;

  v26 = *MEMORY[0x24BDAC8D0];
  v8 = *(_QWORD *)(a1 + 16);
  (*(void (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8);
  v9 = CLSqliteDatabase::prepareSelectStatement((CLSqliteDatabase *)a1, (const char **)off_2511D65E0, "TableInfo", "TableName");
  CLSqliteDatabase::bind(v9, (sqlite3_stmt *)1, a2, v10);
  v12 = sqlite3_step((sqlite3_stmt *)v9);
  if (v12 == 100)
  {
    v13 = (char *)sqlite3_column_text((sqlite3_stmt *)v9, 0);
    std::string::basic_string[abi:ne180100]<0>(buf, v13);
    if (*(char *)(a3 + 23) < 0)
      operator delete(*(void **)a3);
    *(_OWORD *)a3 = *(_OWORD *)buf;
    *(_QWORD *)(a3 + 16) = *(_QWORD *)&buf[16];
    v14 = (char *)sqlite3_column_text((sqlite3_stmt *)v9, 1);
    std::string::basic_string[abi:ne180100]<0>(buf, v14);
    if (*(char *)(a4 + 23) < 0)
      operator delete(*(void **)a4);
    *(_OWORD *)a4 = *(_OWORD *)buf;
    *(_QWORD *)(a4 + 16) = *(_QWORD *)&buf[16];
  }
  CLSqliteDatabase::finalizeStatement(*(CLSqliteDatabase **)(a1 + 8), (sqlite3 *)v9, v11);
  if (onceToken_MicroLocation_Default != -1)
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_58);
  v15 = logObject_MicroLocation_Default;
  if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEBUG))
  {
    v16 = (_QWORD *)(a1 + 88);
    if (*(char *)(a1 + 111) < 0)
      v16 = (_QWORD *)*v16;
    if (*(char *)(a3 + 23) >= 0)
      v17 = (void *)a3;
    else
      v17 = *(void **)a3;
    if (*(char *)(a4 + 23) >= 0)
      v18 = (void *)a4;
    else
      v18 = *(void **)a4;
    *(_DWORD *)buf = 136381699;
    *(_QWORD *)&buf[4] = a2;
    *(_WORD *)&buf[12] = 2080;
    *(_QWORD *)&buf[14] = v16;
    *(_WORD *)&buf[22] = 1024;
    v21 = v12;
    v22 = 2080;
    v23 = v17;
    v24 = 2081;
    v25 = v18;
    _os_log_impl(&dword_2419D9000, v15, OS_LOG_TYPE_DEBUG, "version and serial number. table: %{private}s, path: %s, sqlite_rc: %d, version: %s, serial number: %{private}s", buf, 0x30u);
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v8 + 24))(v8);
  return v12 == 100;
}

void sub_241A9B194(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

CLSqliteDatabase *CLSqliteDatabase::prepareSelectStatement(CLSqliteDatabase *this, const char **a2, const char *a3, const char *a4)
{
  uint64_t v8;
  _QWORD *v9;
  size_t v10;
  const char **v11;
  _QWORD *v12;
  size_t v13;
  _QWORD *v15;
  size_t v16;
  _QWORD *v17;
  _QWORD *v18;
  size_t v19;
  _QWORD *v20;
  sqlite3 *p_p;
  CLSqliteDatabase *v22;
  uint64_t v23;
  NSObject *v24;
  const char *v25;
  void *__p;
  char v28;
  uint64_t v29;
  __int16 v30;
  uint8_t buf[12];
  __int16 v32;
  _BYTE v33[10];
  const char *v34;
  void *v35;
  char v36;
  _QWORD v37[20];

  v37[19] = *MEMORY[0x24BDAC8D0];
  v8 = *((_QWORD *)this + 2);
  v29 = v8;
  (*(void (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8);
  v30 = 256;
  if (a3 && a4 && *a2)
  {
    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)buf);
    v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v33[2], (uint64_t)"SELECT ", 7);
    v10 = strlen(*a2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)*a2, v10);
    if (a2[1])
    {
      v11 = a2 + 2;
      do
      {
        v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v33[2], (uint64_t)", ", 2);
        v13 = strlen(*(v11 - 1));
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)*(v11 - 1), v13);
      }
      while (*v11++);
    }
    v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v33[2], (uint64_t)" FROM ", 6);
    v16 = strlen(a3);
    v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)a3, v16);
    v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)" WHERE ", 7);
    v19 = strlen(a4);
    v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)a4, v19);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"=?", 2);
    std::stringbuf::str();
    if (v28 >= 0)
      p_p = (sqlite3 *)&__p;
    else
      p_p = (sqlite3 *)__p;
    v22 = CLSqliteDatabase::prepareStatementNoCache(this, p_p);
    if (v28 < 0)
      operator delete(__p);
    *(_QWORD *)buf = *MEMORY[0x24BEDB7F0];
    v23 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
    *(_QWORD *)&buf[*(_QWORD *)(*(_QWORD *)buf - 24)] = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
    *(_QWORD *)&v33[2] = v23;
    v34 = (const char *)(MEMORY[0x24BEDB848] + 16);
    if (v36 < 0)
      operator delete(v35);
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x2426A0444](v37);
  }
  else
  {
    if (onceToken_MicroLocation_Default != -1)
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_58);
    v24 = logObject_MicroLocation_Default;
    if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_FAULT))
    {
      v25 = *a2;
      *(_DWORD *)buf = 136381187;
      *(_QWORD *)&buf[4] = a3;
      v32 = 2080;
      *(_QWORD *)v33 = v25;
      *(_WORD *)&v33[8] = 2080;
      v34 = a4;
      _os_log_impl(&dword_2419D9000, v24, OS_LOG_TYPE_FAULT, "Invalid parameters. table: %{private}s, columnNames[0]: %s, key: %s", buf, 0x20u);
    }
    v22 = 0;
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v8 + 24))(v8);
  return v22;
}

void sub_241A9B4B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, pthread_mutex_t *a15, uint64_t a16, uint64_t a17, char a18)
{
  if (a14 < 0)
    operator delete(__p);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a18);
  AutoLocker::~AutoLocker(&a15);
  _Unwind_Resume(a1);
}

uint64_t CLSqliteDatabase::createRowInTableInfo(CLSqliteDatabase *this, char *a2)
{
  uint64_t v4;
  CLSqliteDatabase *inserted;
  const char *v6;
  const char *v7;
  char *v8;
  const char *v9;
  char *v10;
  sqlite3_stmt *v11;
  NSObject *v12;
  void *__p[2];
  char v15;
  void *v16[2];
  char v17;
  uint64_t v18;
  __int16 v19;
  uint8_t buf[4];
  char *v21;
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  v4 = *((_QWORD *)this + 2);
  v18 = v4;
  (*(void (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
  v19 = 256;
  std::string::basic_string[abi:ne180100]<0>(v16, "");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  inserted = CLSqliteDatabase::prepareInsertStatement(this, "TableInfo", (const char **)off_2511D65F8, 1);
  CLSqliteDatabase::bind(inserted, (sqlite3_stmt *)1, a2, v6);
  if (v17 >= 0)
    v8 = (char *)v16;
  else
    v8 = (char *)v16[0];
  CLSqliteDatabase::bind(inserted, (sqlite3_stmt *)2, v8, v7);
  if (v15 >= 0)
    v10 = (char *)__p;
  else
    v10 = (char *)__p[0];
  CLSqliteDatabase::bind(inserted, (sqlite3_stmt *)3, v10, v9);
  CLSqliteDatabase::executeAndResetStatement(this, (sqlite3_stmt *)inserted);
  CLSqliteDatabase::finalizeStatement(*((CLSqliteDatabase **)this + 1), (sqlite3 *)inserted, v11);
  if (onceToken_MicroLocation_Default != -1)
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_58);
  v12 = logObject_MicroLocation_Default;
  if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 136380675;
    v21 = a2;
    _os_log_impl(&dword_2419D9000, v12, OS_LOG_TYPE_DEBUG, "Created row in TableInfo. table: %{private}s", buf, 0xCu);
  }
  if (v15 < 0)
    operator delete(__p[0]);
  if (v17 < 0)
    operator delete(v16[0]);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
}

void sub_241A9B6D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

CLSqliteDatabase *CLSqliteDatabase::prepareInsertStatement(CLSqliteDatabase *this, const char *a2, const char **a3, int a4)
{
  uint64_t v8;
  _QWORD *v9;
  size_t v10;
  _QWORD *v11;
  _QWORD *v12;
  size_t v13;
  uint64_t v14;
  _QWORD *v15;
  size_t v16;
  int v18;
  NSObject *v19;
  const char *v20;
  CLSqliteDatabase *v21;
  int v22;
  void **v23;
  uint64_t v24;
  void *__p[2];
  char v27;
  uint64_t v28;
  __int16 v29;
  uint8_t buf[12];
  __int16 v31;
  _QWORD v32[12];
  char v33;
  _QWORD v34[20];

  v34[19] = *MEMORY[0x24BDAC8D0];
  v8 = *((_QWORD *)this + 2);
  v28 = v8;
  (*(void (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8);
  v29 = 256;
  if (a2 && *a3)
  {
    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)buf);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((_QWORD *)((char *)v32 + 2), (uint64_t)"INSERT ", 7);
    if (a4)
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((_QWORD *)((char *)v32 + 2), (uint64_t)"OR REPLACE ", 11);
    v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((_QWORD *)((char *)v32 + 2), (uint64_t)"INTO ", 5);
    v10 = strlen(a2);
    v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)a2, v10);
    v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)" (", 2);
    v13 = strlen(*a3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)*a3, v13);
    if (a3[1])
    {
      v14 = 0;
      do
      {
        v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((_QWORD *)((char *)v32 + 2), (uint64_t)", ", 2);
        v16 = strlen(a3[v14 + 1]);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)a3[v14 + 1], v16);
      }
      while (a3[v14++ + 2]);
      v18 = v14 + 1;
    }
    else
    {
      v18 = 1;
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((_QWORD *)((char *)v32 + 2), (uint64_t)") VALUES (?", 11);
    if (v18 >= 2)
    {
      v22 = v18 + 1;
      do
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((_QWORD *)((char *)v32 + 2), (uint64_t)", ?", 3);
        --v22;
      }
      while (v22 > 2);
    }
    LOBYTE(__p[0]) = 41;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((_QWORD *)((char *)v32 + 2), (uint64_t)__p, 1);
    std::stringbuf::str();
    if (v27 >= 0)
      v23 = __p;
    else
      v23 = (void **)__p[0];
    v21 = CLSqliteDatabase::prepareStatementNoCache(this, (sqlite3 *)v23);
    if (v27 < 0)
      operator delete(__p[0]);
    *(_QWORD *)buf = *MEMORY[0x24BEDB7F0];
    v24 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
    *(_QWORD *)&buf[*(_QWORD *)(*(_QWORD *)buf - 24)] = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
    *(_QWORD *)((char *)v32 + 2) = v24;
    *(_QWORD *)((char *)&v32[1] + 2) = MEMORY[0x24BEDB848] + 16;
    if (v33 < 0)
      operator delete(*(void **)((char *)&v32[9] + 2));
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x2426A0444](v34);
  }
  else
  {
    if (onceToken_MicroLocation_Default != -1)
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_58);
    v19 = logObject_MicroLocation_Default;
    if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_FAULT))
    {
      v20 = *a3;
      *(_DWORD *)buf = 136380931;
      *(_QWORD *)&buf[4] = a2;
      v31 = 2080;
      v32[0] = v20;
      _os_log_impl(&dword_2419D9000, v19, OS_LOG_TYPE_FAULT, "Invalid parameters. table: %{private}s, columnNames[0]: %s", buf, 0x16u);
    }
    v21 = 0;
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v8 + 24))(v8);
  return v21;
}

void sub_241A9BA6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, pthread_mutex_t *a15, uint64_t a16, uint64_t a17, char a18)
{
  if (a14 < 0)
    operator delete(__p);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a18);
  AutoLocker::~AutoLocker(&a15);
  _Unwind_Resume(a1);
}

uint64_t CLSqliteDatabase::deleteRowFromTableInfo(CLSqliteDatabase *this, char *a2)
{
  CLSqliteDatabase *v4;
  const char *v5;
  sqlite3_stmt *v6;
  uint64_t v8;

  v8 = *((_QWORD *)this + 2);
  (*(void (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8);
  v4 = CLSqliteDatabase::prepareDeleteStatement(this, "TableInfo", "TableName");
  CLSqliteDatabase::bind(v4, (sqlite3_stmt *)1, a2, v5);
  CLSqliteDatabase::executeAndResetStatement(this, (sqlite3_stmt *)v4);
  CLSqliteDatabase::finalizeStatement(*((CLSqliteDatabase **)this + 1), (sqlite3 *)v4, v6);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 24))(v8);
}

void sub_241A9BB6C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  AutoLocker::~AutoLocker((pthread_mutex_t **)va);
  _Unwind_Resume(a1);
}

CLSqliteDatabase *CLSqliteDatabase::prepareDeleteStatement(CLSqliteDatabase *this, const char *a2, const char *a3)
{
  uint64_t v6;
  _QWORD *v7;
  size_t v8;
  _QWORD *v9;
  _QWORD *v10;
  size_t v11;
  _QWORD *v12;
  sqlite3 *p_p;
  CLSqliteDatabase *v14;
  uint64_t v15;
  NSObject *v16;
  void *__p;
  char v19;
  uint64_t v20;
  __int16 v21;
  uint8_t buf[12];
  __int16 v23;
  _BYTE v24[10];
  uint64_t v25;
  void *v26;
  char v27;
  _QWORD v28[20];

  v28[19] = *MEMORY[0x24BDAC8D0];
  v6 = *((_QWORD *)this + 2);
  v20 = v6;
  (*(void (**)(uint64_t))(*(_QWORD *)v6 + 16))(v6);
  v21 = 256;
  if (a2 && a3)
  {
    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)buf);
    v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v24[2], (uint64_t)"DELETE FROM ", 12);
    v8 = strlen(a2);
    v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)a2, v8);
    v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)" WHERE ", 7);
    v11 = strlen(a3);
    v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)a3, v11);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"=?", 2);
    std::stringbuf::str();
    if (v19 >= 0)
      p_p = (sqlite3 *)&__p;
    else
      p_p = (sqlite3 *)__p;
    v14 = CLSqliteDatabase::prepareStatementNoCache(this, p_p);
    if (v19 < 0)
      operator delete(__p);
    *(_QWORD *)buf = *MEMORY[0x24BEDB7F0];
    v15 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
    *(_QWORD *)&buf[*(_QWORD *)(*(_QWORD *)buf - 24)] = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
    *(_QWORD *)&v24[2] = v15;
    v25 = MEMORY[0x24BEDB848] + 16;
    if (v27 < 0)
      operator delete(v26);
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x2426A0444](v28);
  }
  else
  {
    if (onceToken_MicroLocation_Default != -1)
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_58);
    v16 = logObject_MicroLocation_Default;
    if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 136380931;
      *(_QWORD *)&buf[4] = a2;
      v23 = 2080;
      *(_QWORD *)v24 = a3;
      _os_log_impl(&dword_2419D9000, v16, OS_LOG_TYPE_FAULT, "Invalid parameters. table: %{private}s, key: %s", buf, 0x16u);
    }
    v14 = 0;
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v6 + 24))(v6);
  return v14;
}

void sub_241A9BDC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, pthread_mutex_t *a15, uint64_t a16, uint64_t a17, char a18)
{
  if (a14 < 0)
    operator delete(__p);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a18);
  AutoLocker::~AutoLocker(&a15);
  _Unwind_Resume(a1);
}

CLSqliteDatabase *CLSqliteDatabase::prepareStatement(CLSqliteDatabase *this, sqlite3 *__s, const char *a3)
{
  CLSqliteDatabase *v4;
  int v5;
  int v6;
  NSObject *v7;
  const char *v8;
  const char *v9;
  char *v10;
  const char *v11;
  sqlite3_stmt *ppStmt;
  _BYTE buf[12];
  __int16 v14;
  int v15;
  __int16 v16;
  const char *v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  if (this)
  {
    v4 = this;
    v11 = 0;
    ppStmt = 0;
    v5 = strlen((const char *)__s);
    v6 = sqlite3_prepare_v2((sqlite3 *)v4, (const char *)__s, v5, &ppStmt, &v11);
    if (v6)
    {
      if (onceToken_MicroLocation_Default != -1)
        dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_58);
      v7 = (id)logObject_MicroLocation_Default;
      if (os_log_type_enabled(v7, OS_LOG_TYPE_FAULT))
      {
        v8 = sqlite3_errmsg((sqlite3 *)v4);
        *(_DWORD *)buf = 136381187;
        *(_QWORD *)&buf[4] = __s;
        v14 = 1024;
        v15 = v6;
        v16 = 2081;
        v17 = v8;
        _os_log_impl(&dword_2419D9000, v7, OS_LOG_TYPE_FAULT, "Could not prepare statement. query: %{private}s, sqlite_rc: %d, errmsg: %{private}s", buf, 0x1Cu);
      }

      v9 = sqlite3_db_filename((sqlite3 *)v4, 0);
      if (v9)
        v10 = (char *)v9;
      else
        v10 = "";
      std::string::basic_string[abi:ne180100]<0>(buf, v10);
      CLSqliteDatabase::handleSqlError((sqlite3 *)v4, (uint64_t)buf, 0, v6);
      if (SBYTE3(v17) < 0)
        operator delete(*(void **)buf);
      return 0;
    }
    else
    {
      return (CLSqliteDatabase *)ppStmt;
    }
  }
  return this;
}

void sub_241A9BF90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  void *v16;

  _Unwind_Resume(a1);
}

uint64_t CLSqliteDatabase::prepareScopedStatement@<X0>(CLSqliteDatabase *this@<X0>, sqlite3 *a2@<X1>, CLSqliteFinalizingStatement **a3@<X8>)
{
  CLSqliteDatabase *v6;
  CLSqliteFinalizingStatement *v7;
  uint64_t v9;

  v9 = *((_QWORD *)this + 2);
  (*(void (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
  v6 = CLSqliteDatabase::prepareStatementNoCache(this, a2);
  v7 = (CLSqliteFinalizingStatement *)operator new();
  CLSqliteFinalizingStatement::CLSqliteFinalizingStatement(v7, this, (sqlite3_stmt *)v6);
  *a3 = v7;
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 24))(v9);
}

void sub_241A9C06C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  MEMORY[0x2426A04D4](v2, 0xA1C409BE6959DLL);
  AutoLocker::~AutoLocker((pthread_mutex_t **)va);
  _Unwind_Resume(a1);
}

BOOL CLSqliteDatabase::isDatabaseValid(CLSqliteDatabase *this)
{
  return *((_QWORD *)this + 1) != 0;
}

uint64_t CLSqliteDatabase::vacuum(CLSqliteDatabase *this, sqlite3 *a2)
{
  void *v3;
  uint64_t v4;
  _QWORD v6[6];
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  char v10;

  v7 = 0;
  v8 = &v7;
  v9 = 0x2020000000;
  v10 = 0;
  +[ULTransactionManager shared](ULTransactionManager, "shared");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v6[0] = MEMORY[0x24BDAC760];
  v6[1] = 3221225472;
  v6[2] = ___ZN16CLSqliteDatabase6vacuumEP7sqlite3_block_invoke;
  v6[3] = &unk_2511D2718;
  v6[4] = &v7;
  v6[5] = this;
  objc_msgSend(v3, "performUnderTransaction:block:", CFSTR("com.apple.milod.sqlitedb.vacuum"), v6);

  v4 = *((unsigned __int8 *)v8 + 24);
  _Block_object_dispose(&v7, 8);
  return v4;
}

void sub_241A9C168(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  void *v7;
  va_list va;

  va_start(va, a7);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

BOOL ___ZN16CLSqliteDatabase6vacuumEP7sqlite3_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  CLSqliteDatabase **v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  const char *v10;
  sqlite3 *v11;
  const char *v12;
  NSObject *v13;
  const char *v14;
  BOOL v15;
  NSObject *v16;
  const char *v17;
  int v18;
  NSObject *v19;
  const char *v20;
  uint64_t *v21;
  uint64_t *v22;
  char v24[8];
  uint8_t buf[4];
  _BYTE v26[34];
  uint64_t v27;

  v27 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)v24 = 0;
  v5 = (CLSqliteDatabase **)(a1 + 40);
  if (CLSqliteDatabase::execAndGetValue(*(CLSqliteDatabase **)(a1 + 40), (sqlite3 *)"pragma page_count;", v24, a4))
    v7 = *(_QWORD *)v24;
  else
    v7 = -1;
  if (CLSqliteDatabase::execAndGetValue(*v5, (sqlite3 *)"pragma freelist_count;", v24, v6))
    v8 = *(_QWORD *)v24;
  else
    v8 = -1;
  if (onceToken_MicroLocation_Default != -1)
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_58);
  v9 = (id)logObject_MicroLocation_Default;
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    v10 = sqlite3_db_filename(*(sqlite3 **)(a1 + 40), "main");
    *(_DWORD *)buf = 134218498;
    *(_QWORD *)v26 = v7;
    *(_WORD *)&v26[8] = 2048;
    *(_QWORD *)&v26[10] = v8;
    *(_WORD *)&v26[18] = 2080;
    *(_QWORD *)&v26[20] = v10;
    _os_log_impl(&dword_2419D9000, v9, OS_LOG_TYPE_DEFAULT, "start vacuum. page_count: %lld, freelist_count: %lld, path: %s, ", buf, 0x20u);
  }

  if (CLSqliteDatabase::isIncrementalVacuumEnabled(*(CLSqliteDatabase **)(a1 + 40), v11, v12))
  {
    if (onceToken_MicroLocation_Default != -1)
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_58);
    v13 = (id)logObject_MicroLocation_Default;
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      v14 = sqlite3_db_filename(*(sqlite3 **)(a1 + 40), "main");
      *(_DWORD *)buf = 134218498;
      *(_QWORD *)v26 = v7;
      *(_WORD *)&v26[8] = 2048;
      *(_QWORD *)&v26[10] = v8;
      *(_WORD *)&v26[18] = 2080;
      *(_QWORD *)&v26[20] = v14;
      _os_log_impl(&dword_2419D9000, v13, OS_LOG_TYPE_DEFAULT, "incremental_vacuum. page_count: %lld, freelist_count: %lld, path: %s", buf, 0x20u);
    }

    v15 = CLSqliteDatabase::incrementalVacuum(*(CLSqliteDatabase **)(a1 + 40), 0);
  }
  else
  {
    if (onceToken_MicroLocation_Default != -1)
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_58);
    v16 = (id)logObject_MicroLocation_Default;
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
    {
      v17 = sqlite3_db_filename(*(sqlite3 **)(a1 + 40), "main");
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)v26 = 1;
      *(_WORD *)&v26[4] = 2048;
      *(_QWORD *)&v26[6] = v7;
      *(_WORD *)&v26[14] = 2048;
      *(_QWORD *)&v26[16] = v8;
      *(_WORD *)&v26[24] = 2080;
      *(_QWORD *)&v26[26] = v17;
      _os_log_impl(&dword_2419D9000, v16, OS_LOG_TYPE_DEFAULT, "vacuum. sqlite_rc: %d, page_count: %lld, freelist_count: %lld, path: %s", buf, 0x26u);
    }

    v15 = sqlite3_exec(*(sqlite3 **)(a1 + 40), "VACUUM", 0, 0, 0) == 0;
  }
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = v15;
  v18 = sqlite3_wal_checkpoint_v2(*(sqlite3 **)(a1 + 40), 0, 3, 0, 0);
  if (onceToken_MicroLocation_Default != -1)
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_58);
  v19 = (id)logObject_MicroLocation_Default;
  if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
  {
    v20 = sqlite3_db_filename(*(sqlite3 **)(a1 + 40), "main");
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)v26 = v20;
    *(_WORD *)&v26[8] = 1024;
    *(_DWORD *)&v26[10] = v18;
    _os_log_impl(&dword_2419D9000, v19, OS_LOG_TYPE_DEFAULT, "wal_checkpoint. path: %s, sqlite_rc: %d", buf, 0x12u);
  }

  CLSqliteDatabase::execAndGetValue(*(CLSqliteDatabase **)(a1 + 40), (sqlite3 *)"pragma page_count;", v24, v21);
  return CLSqliteDatabase::execAndGetValue(*(CLSqliteDatabase **)(a1 + 40), (sqlite3 *)"pragma freelist_count;",
           v24,
           v22);
}

void sub_241A9C534(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

BOOL CLSqliteDatabase::execAndGetValue(CLSqliteDatabase *this, sqlite3 *a2, char *a3, uint64_t *a4)
{
  CLSqliteDatabase *v6;
  sqlite3_stmt *v7;
  int v8;
  sqlite3_stmt *v9;
  _BOOL8 v10;

  v6 = CLSqliteDatabase::prepareStatement(this, a2, a3);
  if (!v6)
    return 0;
  v7 = (sqlite3_stmt *)v6;
  v8 = sqlite3_step((sqlite3_stmt *)v6);
  v10 = v8 == 100;
  if (v8 == 100)
    *(_QWORD *)a3 = sqlite3_column_int64(v7, 0);
  CLSqliteDatabase::finalizeStatement(this, v7, v9);
  return v10;
}

BOOL CLSqliteDatabase::isIncrementalVacuumEnabled(CLSqliteDatabase *this, sqlite3 *a2, const char *a3)
{
  CLSqliteDatabase *v4;
  sqlite3_stmt *v5;
  sqlite3_stmt *v6;
  _BOOL8 v7;

  v4 = CLSqliteDatabase::prepareStatement(this, (sqlite3 *)"pragma auto_vacuum;", a3);
  if (!v4)
    return 0;
  v5 = (sqlite3_stmt *)v4;
  v7 = sqlite3_step((sqlite3_stmt *)v4) == 100 && sqlite3_column_int(v5, 0) == 2;
  CLSqliteDatabase::finalizeStatement(this, v5, v6);
  return v7;
}

BOOL CLSqliteDatabase::incrementalVacuum(CLSqliteDatabase *this, sqlite3 *a2)
{
  _QWORD *v4;
  NSObject *v5;
  const char *v6;
  const char *v7;
  int v8;
  NSObject *v9;
  uint64_t v10;
  void *__p;
  char v13;
  _QWORD v14[2];
  _QWORD v15[11];
  char v16;
  uint64_t v17;
  _BYTE buf[12];
  __int16 v19;
  const char *v20;
  char v21;
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v14);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"pragma incremental_vacuum(", 26);
  v4 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)");", 2);
  std::stringbuf::str();
  if (onceToken_MicroLocation_Default != -1)
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_58);
  v5 = (id)logObject_MicroLocation_Default;
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    v6 = sqlite3_db_filename((sqlite3 *)this, "main");
    *(_DWORD *)buf = 134218242;
    *(_QWORD *)&buf[4] = a2;
    v19 = 2080;
    v20 = v6;
    _os_log_impl(&dword_2419D9000, v5, OS_LOG_TYPE_DEFAULT, "incrementalVacuum. pages: %lld, path: %s", buf, 0x16u);
  }

  std::stringbuf::str();
  if (v21 >= 0)
    v7 = buf;
  else
    v7 = *(const char **)buf;
  v8 = sqlite3_exec((sqlite3 *)this, v7, 0, 0, 0);
  if (v21 < 0)
    operator delete(*(void **)buf);
  if (onceToken_MicroLocation_Default != -1)
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_58);
  v9 = logObject_MicroLocation_Default;
  if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = v8;
    _os_log_impl(&dword_2419D9000, v9, OS_LOG_TYPE_DEFAULT, "incrementalVacuum. result: %d", buf, 8u);
  }
  if (v13 < 0)
    operator delete(__p);
  v14[0] = *MEMORY[0x24BEDB7F0];
  v10 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(_QWORD *)((char *)v14 + *(_QWORD *)(v14[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  v15[0] = v10;
  v15[1] = MEMORY[0x24BEDB848] + 16;
  if (v16 < 0)
    operator delete((void *)v15[9]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x2426A0444](&v17);
  return v8 == 0;
}

{
  _BOOL8 v4;
  uint64_t v6;

  v6 = *((_QWORD *)this + 2);
  (*(void (**)(uint64_t))(*(_QWORD *)v6 + 16))(v6);
  v4 = CLSqliteDatabase::incrementalVacuum(*((CLSqliteDatabase **)this + 1), a2);
  (*(void (**)(uint64_t))(*(_QWORD *)v6 + 24))(v6);
  return v4;
}

void sub_241A9C8D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  void *v15;

  if (a14 < 0)
    operator delete(__p);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void sub_241A9C9A8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  AutoLocker::~AutoLocker((pthread_mutex_t **)va);
  _Unwind_Resume(a1);
}

uint64_t CLSqliteDatabase::reduceFreePages(CLSqliteDatabase *this, uint64_t a2)
{
  uint64_t v4;
  CLSqliteDatabaseManager *v5;
  NSObject *v6;
  _QWORD *v7;
  uint64_t v8;
  CLSqliteDatabaseManager *v9;
  void *v10;
  NSObject *v11;
  _QWORD *v12;
  _QWORD v14[9];
  __int16 v15;
  __int128 buf;
  uint64_t v17;
  int v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v4 = *((_QWORD *)this + 2);
  v14[7] = v4;
  v5 = (CLSqliteDatabaseManager *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
  v15 = 256;
  if (*((_BYTE *)this + 56))
  {
    if (onceToken_MicroLocation_Default != -1)
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_58);
    v6 = logObject_MicroLocation_Default;
    if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_FAULT))
    {
      v7 = (_QWORD *)((char *)this + 88);
      if (*((char *)this + 111) < 0)
        v7 = (_QWORD *)*v7;
      LODWORD(buf) = 136315138;
      *(_QWORD *)((char *)&buf + 4) = v7;
      _os_log_impl(&dword_2419D9000, v6, OS_LOG_TYPE_FAULT, "Attempt to reduceFreePages on readonly database. path: %s", (uint8_t *)&buf, 0xCu);
    }
    v8 = 2;
  }
  else
  {
    v9 = (CLSqliteDatabaseManager *)CLSqliteDatabaseManager::instance(v5);
    if ((CLSqliteDatabaseManager::useIncrementalVacuum(v9) & 1) != 0)
    {
      *(_QWORD *)&buf = 0;
      *((_QWORD *)&buf + 1) = &buf;
      v17 = 0x2020000000;
      v18 = 0;
      +[ULTransactionManager shared](ULTransactionManager, "shared");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      v14[0] = MEMORY[0x24BDAC760];
      v14[1] = 3221225472;
      v14[2] = ___ZN16CLSqliteDatabase15reduceFreePagesEx_block_invoke;
      v14[3] = &unk_2511D6620;
      v14[4] = &buf;
      v14[5] = this;
      v14[6] = a2;
      objc_msgSend(v10, "performUnderTransaction:block:", CFSTR("com.apple.milod.sqlitedb.IncrementalVacuum"), v14);

      v8 = *(unsigned int *)(*((_QWORD *)&buf + 1) + 24);
      _Block_object_dispose(&buf, 8);
    }
    else
    {
      if (onceToken_MicroLocation_Default != -1)
        dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_58);
      v11 = logObject_MicroLocation_Default;
      if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEBUG))
      {
        v12 = (_QWORD *)((char *)this + 88);
        if (*((char *)this + 111) < 0)
          v12 = (_QWORD *)*v12;
        LODWORD(buf) = 136315138;
        *(_QWORD *)((char *)&buf + 4) = v12;
        _os_log_impl(&dword_2419D9000, v11, OS_LOG_TYPE_DEBUG, "Attempt to reduceFreePages with incremental vacuum disabled. path: %s", (uint8_t *)&buf, 0xCu);
      }
      v8 = 3;
    }
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
  return v8;
}

void sub_241A9CC08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  void *v8;
  pthread_mutex_t *v10;
  va_list va;
  uint64_t v12;
  uint64_t v13;
  va_list va1;

  va_start(va1, a8);
  va_start(va, a8);
  v10 = va_arg(va1, pthread_mutex_t *);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);

  _Block_object_dispose(va1, 8);
  AutoLocker::~AutoLocker((pthread_mutex_t **)va);
  _Unwind_Resume(a1);
}

void ___ZN16CLSqliteDatabase15reduceFreePagesEx_block_invoke(_QWORD *a1)
{
  uint64_t v2;
  NSObject *v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  NSObject *v10;
  _QWORD *v11;
  sqlite3 *v12;
  sqlite3 *v13;
  NSObject *v14;
  _QWORD *v15;
  char v16[8];
  uint8_t buf[4];
  _QWORD *v18;
  __int16 v19;
  uint64_t v20;
  __int16 v21;
  uint64_t v22;
  __int16 v23;
  double v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v2 = a1[5];
  if (onceToken_MicroLocation_Default != -1)
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_58);
  v3 = logObject_MicroLocation_Default;
  if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_2419D9000, v3, OS_LOG_TYPE_DEFAULT, "reduceFreePages", buf, 2u);
  }
  *(_QWORD *)v16 = 0;
  if (CLSqliteDatabase::execAndGetValue(*(CLSqliteDatabase **)(v2 + 8), (sqlite3 *)"pragma page_count;", v16, v4))
    v6 = *(_QWORD *)v16;
  else
    v6 = -1;
  if (CLSqliteDatabase::execAndGetValue(*(CLSqliteDatabase **)(v2 + 8), (sqlite3 *)"pragma freelist_count;", v16, v5))
    v7 = *(_QWORD *)v16;
  else
    v7 = -1;
  v8 = v6 - v7;
  if (v6)
    v9 = (double)v8 / (double)v6;
  else
    v9 = 1.0;
  if (onceToken_MicroLocation_Default != -1)
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_58);
  v10 = logObject_MicroLocation_Default;
  if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
  {
    v11 = (_QWORD *)(v2 + 88);
    if (*(char *)(v2 + 111) < 0)
      v11 = (_QWORD *)*v11;
    *(_DWORD *)buf = 136315906;
    v18 = v11;
    v19 = 2048;
    v20 = v6;
    v21 = 2048;
    v22 = v7;
    v23 = 2048;
    v24 = v9;
    _os_log_impl(&dword_2419D9000, v10, OS_LOG_TYPE_DEFAULT, "reduceFreePages. path: %s, page_count: %lld, freelist_count: %lld, loadFactor: %f", buf, 0x2Au);
  }
  if (v7)
  {
    if (v6 < 0 || v7 < 0)
    {
      if (onceToken_MicroLocation_Default != -1)
        dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_58);
      v14 = logObject_MicroLocation_Default;
      if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_FAULT))
      {
        v15 = (_QWORD *)(v2 + 88);
        if (*(char *)(v2 + 111) < 0)
          v15 = (_QWORD *)*v15;
        *(_DWORD *)buf = 136315138;
        v18 = v15;
        _os_log_impl(&dword_2419D9000, v14, OS_LOG_TYPE_FAULT, "Cannot reduceFreePages. path: %s", buf, 0xCu);
      }
    }
    else
    {
      if (v9 > 0.85 && (unint64_t)v7 < 0x200)
        return;
      v12 = v9 >= 0.4 ? (sqlite3 *)(uint64_t)((double)v7 * 0.8) : (sqlite3 *)(v7 - v8);
      v13 = (sqlite3 *)a1[6];
      if ((uint64_t)v12 > (uint64_t)v13)
      {
        *(_DWORD *)(*(_QWORD *)(a1[4] + 8) + 24) = 1;
        v12 = v13;
      }
      if (CLSqliteDatabase::incrementalVacuum((CLSqliteDatabase *)v2, v12))
        return;
    }
    *(_DWORD *)(*(_QWORD *)(a1[4] + 8) + 24) = 4;
  }
}

BOOL CLSqliteDatabase::setIncrementalVacuumEnabled(CLSqliteDatabase *this, sqlite3 *a2)
{
  int v2;
  const char *v4;
  int v5;
  NSObject *v6;
  const char *v7;
  _BOOL8 v8;
  int v9;
  CLSqliteDatabase *v10;
  sqlite3_stmt *v11;
  sqlite3_stmt *v12;
  int v13;
  sqlite3_stmt *v14;
  NSObject *v15;
  sqlite3 *v16;
  int v18;
  int v19;
  __int16 v20;
  int v21;
  __int16 v22;
  int v23;
  uint64_t v24;

  v2 = (int)a2;
  v24 = *MEMORY[0x24BDAC8D0];
  if ((_DWORD)a2)
    v4 = "pragma auto_vacuum = 2;";
  else
    v4 = "pragma auto_vacuum = 0;";
  v5 = sqlite3_exec((sqlite3 *)this, v4, 0, 0, 0);
  if (onceToken_MicroLocation_Default != -1)
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_58);
  v6 = logObject_MicroLocation_Default;
  if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
  {
    v18 = 67109376;
    v19 = v2;
    v20 = 1024;
    v21 = v5;
    _os_log_impl(&dword_2419D9000, v6, OS_LOG_TYPE_DEFAULT, "setIncrementalVacuumEnabled. enabled: %d, sqlite_rc: %d", (uint8_t *)&v18, 0xEu);
  }
  v8 = v5 == 0;
  if (v2)
    v9 = 2;
  else
    v9 = 0;
  v10 = CLSqliteDatabase::prepareStatement(this, (sqlite3 *)"pragma auto_vacuum;", v7);
  if (v10)
  {
    v11 = (sqlite3_stmt *)v10;
    if (sqlite3_step((sqlite3_stmt *)v10) == 100)
    {
      v13 = sqlite3_column_int(v11, 0);
      CLSqliteDatabase::finalizeStatement(this, v11, v14);
      if (v13 == v9)
        return v8;
      goto LABEL_17;
    }
    CLSqliteDatabase::finalizeStatement(this, v11, v12);
  }
  v8 = 0;
  v13 = -1;
LABEL_17:
  if (onceToken_MicroLocation_Default != -1)
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_58);
  v15 = logObject_MicroLocation_Default;
  if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEFAULT))
  {
    v18 = 67109632;
    v19 = v13;
    v20 = 1024;
    v21 = v9;
    v22 = 1024;
    v23 = 1;
    _os_log_impl(&dword_2419D9000, v15, OS_LOG_TYPE_DEFAULT, "Actual auto-vacuum state does not match desired state. actual: %d, expected: %d, vacuumNow: %d", (uint8_t *)&v18, 0x14u);
  }
  CLSqliteDatabase::vacuum(this, v16);
  return v8;
}

uint64_t CLSqliteDatabase::isForeignKeyReferenceValid(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  const char *v6;
  const char *v7;
  _QWORD *v8;
  size_t v9;
  _QWORD *v10;
  sqlite3 *p_buf;
  CLSqliteDatabase *v12;
  sqlite3_stmt *v13;
  int v14;
  const unsigned __int8 *v15;
  int v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  const unsigned __int8 *v20;
  NSObject *v21;
  _QWORD *v22;
  size_t v23;
  _QWORD *v24;
  sqlite3 *v25;
  sqlite3_stmt *v26;
  CLSqliteDatabase *v27;
  const unsigned __int8 *v28;
  NSObject *v29;
  unsigned int v30;
  NSObject *v31;
  uint64_t v32;
  _QWORD v34[2];
  uint64_t v35;
  uint64_t v36[8];
  std::string __p;
  _QWORD v38[21];
  __int16 v39;
  std::string buf;
  uint64_t v41;

  v41 = *MEMORY[0x24BDAC8D0];
  v4 = *(_QWORD *)(a1 + 16);
  v38[19] = v4;
  (*(void (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
  v39 = 256;
  if (!*(_QWORD *)a2)
    goto LABEL_37;
  v5 = 0;
  if (!*(_BYTE *)(a2 + 40))
    goto LABEL_49;
  v6 = *(const char **)(a2 + 24);
  if (!v6)
    goto LABEL_49;
  v7 = *(const char **)(a2 + 16);
  if (!v7)
  {
LABEL_37:
    v5 = 0;
    goto LABEL_49;
  }
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v34);
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v35, (uint64_t)"PRAGMA table_info(", 18);
  v9 = strlen(v7);
  v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)v7, v9);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)")", 1);
  std::stringbuf::str();
  if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_buf = (sqlite3 *)&buf;
  else
    p_buf = (sqlite3 *)buf.__r_.__value_.__r.__words[0];
  v12 = CLSqliteDatabase::prepareStatementNoCache((CLSqliteDatabase *)a1, p_buf);
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
    operator delete(buf.__r_.__value_.__l.__data_);
  while (1)
  {
    v14 = sqlite3_step((sqlite3_stmt *)v12);
    if (v14 != 100)
      break;
    v15 = sqlite3_column_text((sqlite3_stmt *)v12, 1);
    if (!strcmp(v6, (const char *)v15))
    {
      v16 = *(_DWORD *)(a2 + 8);
      v17 = "INTEGER";
      if (v16 != 1)
      {
        v18 = 0;
        do
        {
          v19 = v18;
          v18 += 16;
        }
        while (v18 != 80 && *(_DWORD *)((char *)&unk_2511D6640 + v19 + 16) != v16);
        v17 = *(const char **)((char *)&unk_2511D6640 + v19 + 24);
      }
      v20 = sqlite3_column_text((sqlite3_stmt *)v12, 2);
      if (!strcmp(v17, (const char *)v20))
      {
        if (onceToken_MicroLocation_Default != -1)
          dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_58);
        v21 = logObject_MicroLocation_Default;
        if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEBUG))
        {
          LODWORD(buf.__r_.__value_.__l.__data_) = 136315394;
          *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v7;
          WORD2(buf.__r_.__value_.__r.__words[1]) = 2080;
          *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v6;
          _os_log_impl(&dword_2419D9000, v21, OS_LOG_TYPE_DEBUG, "Foreign key references are valid. FK_Table: %s, FK_Col: %s", (uint8_t *)&buf, 0x16u);
        }
        break;
      }
    }
  }
  CLSqliteDatabase::finalizeStatement(*(CLSqliteDatabase **)(a1 + 8), (sqlite3 *)v12, v13);
  memset(&buf, 0, sizeof(buf));
  std::string::operator=(&__p, &buf);
  std::stringbuf::__init_buf_ptrs[abi:ne180100]((uint64_t)v36);
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
    operator delete(buf.__r_.__value_.__l.__data_);
  v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v35, (uint64_t)"SELECT indexInfo.name FROM pragma_index_list('", 46);
  v23 = strlen(v7);
  v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)v7, v23);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"') AS indexList, pragma_index_info(indexList.name) AS indexInfo", 63);
  std::stringbuf::str();
  if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v25 = (sqlite3 *)&buf;
  else
    v25 = (sqlite3 *)buf.__r_.__value_.__r.__words[0];
  v27 = CLSqliteDatabase::prepareStatementNoCache((CLSqliteDatabase *)a1, v25);
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
    operator delete(buf.__r_.__value_.__l.__data_);
  if (v14 == 100)
  {
    while (sqlite3_step((sqlite3_stmt *)v27) == 100)
    {
      v28 = sqlite3_column_text((sqlite3_stmt *)v27, 0);
      if (!strcmp(v6, (const char *)v28))
      {
        if (onceToken_MicroLocation_Default != -1)
          dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_58);
        v29 = logObject_MicroLocation_Default;
        if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEBUG))
        {
          LODWORD(buf.__r_.__value_.__l.__data_) = 136315394;
          *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v7;
          WORD2(buf.__r_.__value_.__r.__words[1]) = 2080;
          *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v6;
          _os_log_impl(&dword_2419D9000, v29, OS_LOG_TYPE_DEBUG, "Index exist. FK_Table: %s, FK_Col: %s", (uint8_t *)&buf, 0x16u);
        }
        v30 = 1;
        goto LABEL_39;
      }
    }
  }
  v30 = 0;
LABEL_39:
  CLSqliteDatabase::finalizeStatement(*(CLSqliteDatabase **)(a1 + 8), (sqlite3 *)v27, v26);
  if (onceToken_MicroLocation_Default != -1)
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_58);
  v31 = logObject_MicroLocation_Default;
  if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEBUG))
  {
    LODWORD(buf.__r_.__value_.__l.__data_) = 67109376;
    HIDWORD(buf.__r_.__value_.__r.__words[0]) = v14 == 100;
    LOWORD(buf.__r_.__value_.__r.__words[1]) = 1024;
    *(_DWORD *)((char *)&buf.__r_.__value_.__r.__words[1] + 2) = v30;
    _os_log_impl(&dword_2419D9000, v31, OS_LOG_TYPE_DEBUG, "ForeignKey reference. isReferenceValid: %d, isIndexed: %d", (uint8_t *)&buf, 0xEu);
  }
  v34[0] = *MEMORY[0x24BEDB7F0];
  v32 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(_QWORD *)((char *)v34 + *(_QWORD *)(v34[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  if (v14 == 100)
    v5 = v30;
  else
    v5 = 0;
  v35 = v32;
  v36[0] = MEMORY[0x24BEDB848] + 16;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x2426A0444](v38);
LABEL_49:
  (*(void (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
  return v5;
}

void sub_241A9D648(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  va_list va;

  va_start(va, a3);
  if (*(char *)(v3 - 105) < 0)
    operator delete(*(void **)(v3 - 128));
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  AutoLocker::~AutoLocker((pthread_mutex_t **)(v3 - 152));
  _Unwind_Resume(a1);
}

uint64_t CLSqliteDatabase::lock(CLSqliteDatabase *this)
{
  return CLMutexDubiousLock(*((_QWORD *)this + 2));
}

uint64_t CLSqliteDatabase::unlock(CLSqliteDatabase *this)
{
  return CLMutexDubiousUnlock(*((_QWORD *)this + 2));
}

void ___ZL45_CLLogObjectForCategory_MicroLocation_Defaultv_block_invoke_50()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.MicroLocation", "MicroLocation");
  v1 = (void *)logObject_MicroLocation_Default;
  logObject_MicroLocation_Default = (uint64_t)v0;

}

_QWORD *std::__list_imp<sqlite3_stmt *>::clear(_QWORD *result)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  if (result[2])
  {
    v1 = result;
    result = (_QWORD *)result[1];
    v2 = *v1;
    v3 = *result;
    *(_QWORD *)(v3 + 8) = *(_QWORD *)(*v1 + 8);
    **(_QWORD **)(v2 + 8) = v3;
    v1[2] = 0;
    if (result != v1)
    {
      do
      {
        v4 = (_QWORD *)result[1];
        operator delete(result);
        result = v4;
      }
      while (v4 != v1);
    }
  }
  return result;
}

uint64_t sub_241A9D7E0()
{
  void *v0;

  return 0;
}

void sub_241A9DBC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_241A9E0D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_241A9E390(_Unwind_Exception *a1)
{
  id *v1;
  id *v2;
  uint64_t v3;

  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v3 - 56));
  _Unwind_Resume(a1);
}

uint64_t CLMicroLocationRecordingEventsTable::Entry::Entry(uint64_t a1, uint64_t a2, uint64_t a3, __int128 *a4, CLMicroLocationProto::RecordingEvent *a5, __int128 *a6, uint64_t a7, uint64_t a8, double a9)
{
  __int128 v11;
  __int128 v12;

  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = a3;
  *(double *)(a1 + 16) = a9;
  v11 = *a4;
  *(_QWORD *)(a1 + 40) = *((_QWORD *)a4 + 2);
  *(_OWORD *)(a1 + 24) = v11;
  *((_QWORD *)a4 + 1) = 0;
  *((_QWORD *)a4 + 2) = 0;
  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a1 + 48) = a7;
  *(_QWORD *)(a1 + 56) = a8;
  *(_QWORD *)(a1 + 64) = *((_QWORD *)a5 + 1);
  *(_DWORD *)(a1 + 72) = *((_DWORD *)a5 + 18);
  CLMicroLocationProto::RecordingEvent::RecordingEvent((CLMicroLocationProto::RecordingEvent *)(a1 + 80), a5);
  v12 = *a6;
  *(_BYTE *)(a1 + 240) = *((_BYTE *)a6 + 16);
  *(_OWORD *)(a1 + 224) = v12;
  return a1;
}

void sub_241A9E79C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 47) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

uint64_t CLMicroLocationRecordingEventsTable::Entry::Entry(uint64_t a1, uint64_t a2, uint64_t a3, __int128 *a4, int a5, CLMicroLocationProto::RecordingEvent *a6, uint64_t a7, int a8, double a9, double a10, uint64_t a11, uint64_t a12)
{
  __int128 v14;
  __int128 v16;
  char v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = a3;
  *(double *)(a1 + 16) = a9;
  v14 = *a4;
  *(_QWORD *)(a1 + 40) = *((_QWORD *)a4 + 2);
  *(_OWORD *)(a1 + 24) = v14;
  *((_QWORD *)a4 + 1) = 0;
  *((_QWORD *)a4 + 2) = 0;
  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a1 + 48) = a11;
  *(_QWORD *)(a1 + 56) = a12;
  *(double *)(a1 + 64) = a10;
  *(_DWORD *)(a1 + 72) = a5;
  CLMicroLocationProto::RecordingEvent::RecordingEvent((CLMicroLocationProto::RecordingEvent *)(a1 + 80), a6);
  *(_BYTE *)(a1 + 224) = 0;
  *(_BYTE *)(a1 + 240) = 0;
  if ((*(char *)(a7 + 23) & 0x80000000) == 0)
  {
    if (!*(_BYTE *)(a7 + 23))
      return a1;
    goto LABEL_5;
  }
  if (*(_QWORD *)(a7 + 8))
  {
LABEL_5:
    CLMicroLocationProtobufHelper::uuidFromStdString(a7, (uint64_t)&v16);
    *(_OWORD *)(a1 + 224) = v16;
    *(_BYTE *)(a1 + 240) = v17;
  }
  return a1;
}

{
  return CLMicroLocationRecordingEventsTable::Entry::Entry(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
}

void sub_241A9E8A0(_Unwind_Exception *a1)
{
  uint64_t v1;
  CLMicroLocationProto::RecordingEvent *v2;

  CLMicroLocationProto::RecordingEvent::~RecordingEvent(v2);
  if (*(char *)(v1 + 47) < 0)
    operator delete(*(void **)(v1 + 24));
  _Unwind_Resume(a1);
}

uint64_t CLMicroLocationRecordingEventsTable::Entry::Entry(uint64_t a1, uint64_t a2, uint64_t a3, __int128 *a4, int a5, CLMicroLocationProto::RecordingEvent *a6, __int128 *a7, int a8, double a9, double a10, uint64_t a11, uint64_t a12)
{
  __int128 v14;
  __int128 v15;

  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = a3;
  *(double *)(a1 + 16) = a9;
  v14 = *a4;
  *(_QWORD *)(a1 + 40) = *((_QWORD *)a4 + 2);
  *(_OWORD *)(a1 + 24) = v14;
  *((_QWORD *)a4 + 1) = 0;
  *((_QWORD *)a4 + 2) = 0;
  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a1 + 48) = a11;
  *(_QWORD *)(a1 + 56) = a12;
  *(double *)(a1 + 64) = a10;
  *(_DWORD *)(a1 + 72) = a5;
  CLMicroLocationProto::RecordingEvent::RecordingEvent((CLMicroLocationProto::RecordingEvent *)(a1 + 80), a6);
  v15 = *a7;
  *(_BYTE *)(a1 + 240) = *((_BYTE *)a7 + 16);
  *(_OWORD *)(a1 + 224) = v15;
  return a1;
}

{
  return CLMicroLocationRecordingEventsTable::Entry::Entry(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
}

void sub_241A9E958(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 47) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

void sub_241A9E9FC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_241A9EB24(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_241A9ECF8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_241A9EE34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  void *v11;

  _Unwind_Resume(a1);
}

void sub_241A9F2F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12, void *a13, void *a14, void *a15)
{
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;

  _Unwind_Resume(a1);
}

void sub_241A9F4BC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_241A9F5FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

void sub_241A9F718(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  void *v11;

  _Unwind_Resume(a1);
}

void sub_241A9F974(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;

  if (__p)
    operator delete(__p);

  _Unwind_Resume(a1);
}

_QWORD *std::vector<CLMiLoHomeSlamAnalyticEventTable::Entry>::__init_with_size[abi:ne180100]<CLMiLoHomeSlamAnalyticEventTable::Entry*,CLMiLoHomeSlamAnalyticEventTable::Entry*>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<boost::uuids::uuid>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8 - 6);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_241A9FB08(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<CLMiLoHomeSlamAnalyticEventTable::Entry>::__assign_with_size[abi:ne180100]<CLMiLoHomeSlamAnalyticEventTable::Entry*,CLMiLoHomeSlamAnalyticEventTable::Entry*>(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  void **v12;
  char *v13;
  _BYTE *v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  size_t v18;
  void *v19;
  char *v20;

  v7 = result;
  v8 = *((_QWORD *)result + 2);
  v9 = *(char **)result;
  if (a4 > (v8 - *(_QWORD *)result) >> 4)
  {
    if (v9)
    {
      *((_QWORD *)result + 1) = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 >> 60)
      std::vector<CLMicroLocationProto::ConfidenceReason>::__throw_length_error[abi:ne180100]();
    v10 = v8 >> 3;
    if (v8 >> 3 <= a4)
      v10 = a4;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0)
      v11 = 0xFFFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    result = std::vector<boost::uuids::uuid>::__vallocate[abi:ne180100](v7, v11);
    v13 = (char *)v7[1];
    v12 = (void **)(v7 + 1);
    v9 = v13;
LABEL_16:
    v17 = a3 - (_QWORD)__src;
    if (v17)
    {
      v18 = v17 - 6;
      v19 = v9;
      v20 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  v12 = (void **)(result + 8);
  v14 = (_BYTE *)*((_QWORD *)result + 1);
  v15 = (v14 - v9) >> 4;
  if (v15 >= a4)
    goto LABEL_16;
  v16 = &__src[16 * v15];
  if (v14 != v9)
  {
    result = (char *)memmove(*(void **)result, __src, v14 - v9 - 6);
    v9 = (char *)*v12;
  }
  v17 = a3 - (_QWORD)v16;
  if (v17)
  {
    v18 = v17 - 6;
    v19 = v9;
    v20 = v16;
LABEL_18:
    result = (char *)memmove(v19, v20, v18);
  }
LABEL_19:
  *v12 = &v9[v17];
  return result;
}

void CLMicroLocationDendrogramAlgorithm::learn(CLMicroLocationFingerprintVector *a1@<X1>, uint64_t a2@<X2>, unint64_t a3@<X3>, uint64_t a4@<X4>, CLMicroLocationFingerprintPool *a5@<X5>, unint64_t a6@<X6>, uint64_t a7@<X8>)
{
  uint64_t v9;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  double v16;
  double v17;
  double *v18;
  double *v19;
  double v20;
  double *v21;
  double v22;
  double v23;
  NSObject *v24;
  _BOOL4 isStable;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  int v30;
  int v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  int v37;
  int v38;
  char v39;
  void *v40;
  void *v41;
  void *v42;
  void *v43;
  unsigned int v44;
  unsigned int v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t ClusterLabels;
  unint64_t v55;
  _QWORD *v56;
  unint64_t *v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t *v60;
  uint64_t v61;
  const CLMicroLocationFingerprint *v62;
  _QWORD *v63;
  unint64_t v64;
  uint64_t v65;
  uuid *v66;
  uint64_t v67;
  uint8_t *v68;
  uint64_t v69;
  _QWORD *v70;
  uint64_t v71;
  NSObject *v72;
  NSObject *v73;
  uint64_t v74;
  NSObject *v75;
  NSObject *v76;
  NSObject *v77;
  NSObject *v78;
  const char *v79;
  uint64_t v80;
  const char *v81;
  uint64_t v84;
  void *v85;
  unint64_t *v86;
  void *v87;
  _BYTE *v88;
  uint64_t v89;
  void *v90[3];
  void *v91;
  void *__p;
  void *v93;
  void *v94[3];
  void *v95;
  char *v96;
  unint64_t v97;
  double v98;
  double v99;
  _BYTE v100[24];
  _BYTE *v101;
  _BYTE v102[24];
  _BYTE *v103;
  uint8_t buf[8];
  __int16 v105;
  const char *v106;
  __int16 v107;
  _BYTE v108[18];
  __int128 v109;
  char v110;
  _QWORD v111[3];
  _QWORD *v112;
  uint64_t v113;

  v9 = a2;
  v113 = *MEMORY[0x24BDAC8D0];
  CLMicroLocationAlgorithms::getDendrogramLearningParams(a2, &v95);
  +[ULDefaultsSingleton shared](ULDefaultsSingleton, "shared");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v12, "defaultsDictionary");
  v13 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "ULPruneDistanceThreshold");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v13, "objectForKey:", v14);
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  if (v15 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
    objc_msgSend(v15, "doubleValue");
  else
    objc_msgSend(&unk_2511ECEE8, "doubleValue");
  v17 = v16;

  v18 = (double *)v95;
  if (v95 == v96)
  {
    _CLLogObjectForCategory_MicroLocation_Default();
    v72 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v72, OS_LOG_TYPE_FAULT))
    {
      *(_QWORD *)buf = 68289539;
      v105 = 2082;
      v106 = "";
      v107 = 2082;
      *(_QWORD *)v108 = "assert";
      *(_WORD *)&v108[8] = 2081;
      *(_QWORD *)&v108[10] = "!dendrogramLearningParams.clusterDistanceThresholdVector.empty()";
      _os_log_impl(&dword_2419D9000, v72, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"cluster distance threshold must not be empty\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }

    _CLLogObjectForCategory_MicroLocation_Default();
    v73 = objc_claimAutoreleasedReturnValue();
    if (os_signpost_enabled(v73))
    {
      *(_QWORD *)buf = 68289539;
      v105 = 2082;
      v106 = "";
      v107 = 2082;
      *(_QWORD *)v108 = "assert";
      *(_WORD *)&v108[8] = 2081;
      *(_QWORD *)&v108[10] = "!dendrogramLearningParams.clusterDistanceThresholdVector.empty()";
      _os_signpost_emit_with_name_impl(&dword_2419D9000, v73, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "cluster distance threshold must not be empty", "{\"msg%{public}.0s\":\"cluster distance threshold must not be empty\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }

    _CLLogObjectForCategory_MicroLocation_Default();
    a7 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled((os_log_t)a7, OS_LOG_TYPE_INFO))
    {
      *(_QWORD *)buf = 68289539;
      v105 = 2082;
      v106 = "";
      v107 = 2082;
      *(_QWORD *)v108 = "assert";
      *(_WORD *)&v108[8] = 2081;
      *(_QWORD *)&v108[10] = "!dendrogramLearningParams.clusterDistanceThresholdVector.empty()";
      _os_log_impl(&dword_2419D9000, (os_log_t)a7, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"cluster distance threshold must not be empty\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    v74 = 30;
    goto LABEL_114;
  }
  v19 = (double *)((char *)v95 + 8);
  if ((char *)v95 + 8 != v96)
  {
    v20 = *(double *)v95;
    v21 = (double *)((char *)v95 + 8);
    do
    {
      v22 = *v21++;
      v23 = v22;
      if (v22 < v20)
      {
        v20 = v23;
        v18 = v19;
      }
      v19 = v21;
    }
    while (v21 != (double *)v96);
  }
  if (v17 > *v18)
  {
    _CLLogObjectForCategory_MicroLocation_Default();
    v75 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v75, OS_LOG_TYPE_FAULT))
    {
      *(_QWORD *)buf = 68289539;
      v105 = 2082;
      v106 = "";
      v107 = 2082;
      *(_QWORD *)v108 = "assert";
      *(_WORD *)&v108[8] = 2081;
      *(_QWORD *)&v108[10] = "pruneDistanceThreshold <= *std::min_element(dendrogramLearningParams.clusterDistanceThresho"
                             "ldVector.begin(), dendrogramLearningParams.clusterDistanceThresholdVector.end())";
      _os_log_impl(&dword_2419D9000, v75, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"prune threshold must be less than or equal to clusterDistance threshold\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }

    _CLLogObjectForCategory_MicroLocation_Default();
    v76 = objc_claimAutoreleasedReturnValue();
    if (os_signpost_enabled(v76))
    {
      *(_QWORD *)buf = 68289539;
      v105 = 2082;
      v106 = "";
      v107 = 2082;
      *(_QWORD *)v108 = "assert";
      *(_WORD *)&v108[8] = 2081;
      *(_QWORD *)&v108[10] = "pruneDistanceThreshold <= *std::min_element(dendrogramLearningParams.clusterDistanceThresho"
                             "ldVector.begin(), dendrogramLearningParams.clusterDistanceThresholdVector.end())";
      _os_signpost_emit_with_name_impl(&dword_2419D9000, v76, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "prune threshold must be less than or equal to clusterDistance threshold", "{\"msg%{public}.0s\":\"prune threshold must be less than or equal to clusterDistance threshold\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }

    _CLLogObjectForCategory_MicroLocation_Default();
    a7 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled((os_log_t)a7, OS_LOG_TYPE_INFO))
    {
      *(_QWORD *)buf = 68289539;
      v105 = 2082;
      v106 = "";
      v107 = 2082;
      *(_QWORD *)v108 = "assert";
      *(_WORD *)&v108[8] = 2081;
      *(_QWORD *)&v108[10] = "pruneDistanceThreshold <= *std::min_element(dendrogramLearningParams.clusterDistanceThresho"
                             "ldVector.begin(), dendrogramLearningParams.clusterDistanceThresholdVector.end())";
      _os_log_impl(&dword_2419D9000, (os_log_t)a7, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"prune threshold must be less than or equal to clusterDistance threshold\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    v74 = 33;
    goto LABEL_114;
  }
  if (!CLMicroLocationFingerprintVector::size(a1))
  {
    _CLLogObjectForCategory_MicroLocation_Default();
    v77 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v77, OS_LOG_TYPE_FAULT))
    {
      *(_QWORD *)buf = 68289539;
      v105 = 2082;
      v106 = "";
      v107 = 2082;
      *(_QWORD *)v108 = "assert";
      *(_WORD *)&v108[8] = 2081;
      *(_QWORD *)&v108[10] = "fingerprintVector.size() > 0";
      _os_log_impl(&dword_2419D9000, v77, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"fingerprintVector must be non-empty\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }

    _CLLogObjectForCategory_MicroLocation_Default();
    v78 = objc_claimAutoreleasedReturnValue();
    if (os_signpost_enabled(v78))
    {
      *(_QWORD *)buf = 68289539;
      v105 = 2082;
      v106 = "";
      v107 = 2082;
      *(_QWORD *)v108 = "assert";
      *(_WORD *)&v108[8] = 2081;
      *(_QWORD *)&v108[10] = "fingerprintVector.size() > 0";
      _os_signpost_emit_with_name_impl(&dword_2419D9000, v78, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "fingerprintVector must be non-empty", "{\"msg%{public}.0s\":\"fingerprintVector must be non-empty\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }

    _CLLogObjectForCategory_MicroLocation_Default();
    a7 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled((os_log_t)a7, OS_LOG_TYPE_INFO))
    {
      *(_QWORD *)buf = 68289539;
      v105 = 2082;
      v106 = "";
      v107 = 2082;
      *(_QWORD *)v108 = "assert";
      *(_WORD *)&v108[8] = 2081;
      *(_QWORD *)&v108[10] = "fingerprintVector.size() > 0";
      _os_log_impl(&dword_2419D9000, (os_log_t)a7, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"fingerprintVector must be non-empty\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    v74 = 35;
LABEL_114:

    v80 = v74;
    v81 = "learn";
    v79 = "/Library/Caches/com.apple.xbs/Sources/MicroLocation/MicroLocationLogic/CLMicroLocationDendrogramAlgorithm.mm";
    abort_report_np();
    __break(1u);
LABEL_115:
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_60);
    goto LABEL_16;
  }
  CLMicroLocationModel::CLMicroLocationModel((CLMicroLocationModel *)a7);
  *(_DWORD *)a7 = 1;
  *(_DWORD *)(a7 + 4) = v9;
  v9 = a7 + 16;
  if (a7 + 16 != a4)
  {
    *(_DWORD *)(a7 + 48) = *(_DWORD *)(a4 + 32);
    std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationAnchorAppearance>,void *> *>>((_QWORD *)(a7 + 16), *(uint64_t **)(a4 + 16), 0);
  }
  *(_OWORD *)(a7 + 56) = *(_OWORD *)(a4 + 40);
  if (onceToken_MicroLocation_Default != -1)
    goto LABEL_115;
LABEL_16:
  v24 = (id)logObject_MicroLocation_Default;
  if (os_log_type_enabled(v24, OS_LOG_TYPE_DEBUG))
  {
    isStable = CLMicroLocationModel::isStable((CLMicroLocationModel *)a7);
    *(_QWORD *)buf = 68289282;
    v105 = 2082;
    v106 = "";
    v107 = 1026;
    *(_DWORD *)v108 = isStable;
    _os_log_impl(&dword_2419D9000, v24, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"isStable, dendrogram, initialization\", \"isStableflag\":%{public}hhd}", buf, 0x18u);
  }

  +[ULDefaultsSingleton shared](ULDefaultsSingleton, "shared");
  v26 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v26, "defaultsDictionary");
  v27 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "ULFingerprintDistanceFunctionType");
  v28 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v27, "objectForKey:", v28);
  v29 = (void *)objc_claimAutoreleasedReturnValue();
  if (v29 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
    v30 = objc_msgSend(v29, "unsignedIntValue");
  else
    v30 = objc_msgSend(&unk_2511EDAE0, "unsignedIntValue", v79, v80, v81);
  v31 = v30;

  ULSettings::getFingerprintDistanceFunctionParamsForType(v31);
  v32 = (void *)objc_claimAutoreleasedReturnValue();
  +[ULDefaultsSingleton shared](ULDefaultsSingleton, "shared");
  v33 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v33, "defaultsDictionary");
  v34 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "ULAdaptiveAnchorsEnable");
  v35 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v34, "objectForKey:", v35);
  v36 = (void *)objc_claimAutoreleasedReturnValue();
  if (v36 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
    v37 = objc_msgSend(v36, "BOOLValue");
  else
    v37 = objc_msgSend(MEMORY[0x24BDBD1C8], "BOOLValue", v79, v80, v81);
  v38 = v37;

  if (v38)
  {
    std::unordered_map<boost::uuids::uuid,CLMicroLocationAnchorAppearance>::unordered_map((uint64_t)buf, v9);
    v109 = *(_OWORD *)(a7 + 56);
    v39 = 1;
  }
  else
  {
    v39 = 0;
    buf[0] = 0;
  }
  v110 = v39;
  CLMicroLocationAlgorithms::createLearnFingerprintDistanceFunction(v31, v32);
  if (v110)
    std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>>>::~__hash_table((uint64_t)buf);
  +[ULDefaultsSingleton shared](ULDefaultsSingleton, "shared", v79, v80, v81);
  v40 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v40, "defaultsDictionary");
  v41 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "ULLinkageFunction");
  v42 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v41, "objectForKey:", v42);
  v43 = (void *)objc_claimAutoreleasedReturnValue();
  if (v43 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
    v44 = objc_msgSend(v43, "unsignedIntValue");
  else
    v44 = objc_msgSend(&unk_2511EDAF8, "unsignedIntValue");
  v45 = v44;

  CLMicroLocationAlgorithms::createLinkageFunction(v45, buf);
  v46 = (uint64_t)v112;
  if (!v112)
    goto LABEL_38;
  if (v112 != v111)
  {
    v46 = (*(uint64_t (**)(_QWORD *))(*v112 + 16))(v112);
LABEL_38:
    v103 = (_BYTE *)v46;
    goto LABEL_40;
  }
  v103 = v102;
  (*(void (**)(_QWORD *, _BYTE *))(v111[0] + 24))(v111, v102);
LABEL_40:
  CLDistanceMatrixTemplate<CLSymmetricMatrixStorage<float>>::CLDistanceMatrixTemplate<CLMicroLocationFingerprintVector,std::function<double ()(CLMicroLocationFingerprint const&,CLMicroLocationFingerprint const&)>>((uint64_t *)&v91, a1, (uint64_t)v102);
  v47 = *(_QWORD *)&v108[4];
  if (!*(_QWORD *)&v108[4])
  {
LABEL_43:
    v101 = (_BYTE *)v47;
    goto LABEL_45;
  }
  if (*(uint8_t **)&v108[4] != buf)
  {
    v47 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)&v108[4] + 16))(*(_QWORD *)&v108[4]);
    goto LABEL_43;
  }
  v101 = v100;
  (*(void (**)(uint8_t *, _BYTE *))(*(_QWORD *)buf + 24))(buf, v100);
LABEL_45:
  CLHierarchicalClustering::CLHierarchicalClustering(v94, &v91, v100);
  v48 = v101;
  if (v101 == v100)
  {
    v49 = 4;
    v48 = v100;
  }
  else
  {
    if (!v101)
      goto LABEL_50;
    v49 = 5;
  }
  (*(void (**)(void))(*v48 + 8 * v49))();
LABEL_50:
  if (__p)
  {
    v93 = __p;
    operator delete(__p);
  }
  v50 = v103;
  if (v103 == v102)
  {
    v51 = 4;
    v50 = v102;
  }
  else
  {
    if (!v103)
      goto LABEL_57;
    v51 = 5;
  }
  (*(void (**)(void))(*v50 + 8 * v51))();
LABEL_57:
  v52 = vcvtmd_u64_f64(v98 * (double)a6);
  if (v97 <= v52)
    v53 = v52;
  else
    v53 = v97;
  v91 = 0;
  __p = 0;
  v93 = 0;
  ClusterLabels = CLHierarchicalClustering::getClusterLabels((uint64_t *)v94, &v91, &v95, v53, a3, v99);
  CLMicroLocationModel::generateRandomIdentifiers(ClusterLabels, v90);
  v87 = 0;
  v88 = 0;
  v89 = 0;
  v55 = CLHierarchicalClustering::getClusterLabels((uint64_t *)v94, &v87, 0, v17, 0.0);
  v84 = 0;
  std::vector<unsigned long>::vector(&v85, v55, &v84);
  v56 = v87;
  v57 = (unint64_t *)v85;
  if (v88 != v87)
  {
    v58 = 0;
    v59 = (v88 - (_BYTE *)v87) >> 3;
    if (v59 <= 1)
      v59 = 1;
    do
    {
      v57[v56[v58]] = v58;
      ++v58;
    }
    while (v59 != v58);
  }
  v60 = v86;
  while (v57 != v60)
  {
    v61 = *((_QWORD *)v91 + *v57);
    v62 = (const CLMicroLocationFingerprint *)CLMicroLocationFingerprintVector::operator[](a1, *v57);
    CLMicroLocationModel::addFingerprint((CLMicroLocationModel *)a7, v62, (const uuid *)v90[0] + v61, a5);
    ++v57;
  }
  v63 = v91;
  if (__p != v91)
  {
    v64 = 0;
    do
    {
      v65 = v63[v64];
      v66 = (uuid *)v90[0];
      v67 = CLMicroLocationFingerprintVector::operator[](a1, v64);
      CLMicroLocationModel::addRecording((CLMicroLocationModel *)a7, &v66[v65], (const uuid *)(v67 + 40));
      ++v64;
      v63 = v91;
    }
    while (v64 < ((_BYTE *)__p - (_BYTE *)v91) >> 3);
  }
  if (v85)
  {
    v86 = (unint64_t *)v85;
    operator delete(v85);
  }
  if (v87)
  {
    v88 = v87;
    operator delete(v87);
  }
  if (v90[0])
  {
    v90[1] = v90[0];
    operator delete(v90[0]);
  }
  if (v91)
  {
    __p = v91;
    operator delete(v91);
  }
  if (v94[0])
  {
    v94[1] = v94[0];
    operator delete(v94[0]);
  }
  v68 = *(uint8_t **)&v108[4];
  if (*(uint8_t **)&v108[4] == buf)
  {
    v69 = 4;
    v68 = buf;
  }
  else
  {
    if (!*(_QWORD *)&v108[4])
      goto LABEL_85;
    v69 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v68 + 8 * v69))();
LABEL_85:
  v70 = v112;
  if (v112 == v111)
  {
    v71 = 4;
    v70 = v111;
  }
  else
  {
    if (!v112)
      goto LABEL_90;
    v71 = 5;
  }
  (*(void (**)(void))(*v70 + 8 * v71))();
LABEL_90:

  if (v95)
  {
    v96 = (char *)v95;
    operator delete(v95);
  }
}

void sub_241AA0958(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,void *a24,void *a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,void *__p,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44)
{
  void **v44;
  void *v45;
  void *v46;
  void *v47;
  void *v48;
  uint64_t v49;
  _QWORD *v51;
  uint64_t v52;

  v51 = *(_QWORD **)(v49 - 128);
  if (v51 == (_QWORD *)(v49 - 152))
  {
    v52 = 4;
    v51 = (_QWORD *)(v49 - 152);
  }
  else
  {
    if (!v51)
      goto LABEL_6;
    v52 = 5;
  }
  (*(void (**)(void))(*v51 + 8 * v52))();
LABEL_6:

  CLMicroLocationModel::~CLMicroLocationModel(v44);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void CLMicroLocationDendrogramAlgorithm::~CLMicroLocationDendrogramAlgorithm(CLMicroLocationDendrogramAlgorithm *this)
{
  JUMPOUT(0x2426A04D4);
}

void ___ZL45_CLLogObjectForCategory_MicroLocation_Defaultv_block_invoke_51()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.MicroLocation", "MicroLocation");
  v1 = (void *)logObject_MicroLocation_Default;
  logObject_MicroLocation_Default = (uint64_t)v0;

}

uint64_t *CLDistanceMatrixTemplate<CLSymmetricMatrixStorage<float>>::CLDistanceMatrixTemplate<CLMicroLocationFingerprintVector,std::function<double ()(CLMicroLocationFingerprint const&,CLMicroLocationFingerprint const&)>>(uint64_t *a1, CLMicroLocationFingerprintVector *this, uint64_t a3)
{
  _QWORD *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  unint64_t i;
  uint64_t v13;
  uint64_t v14;
  double v15;
  unint64_t v16;
  unint64_t v17;
  float v18;
  _DWORD v20[10];
  __int128 v21;
  uint64_t v22;
  _BYTE v23[40];
  _BYTE v24[56];
  int v25;
  void *__p;
  void *v27;
  uint64_t v28;
  uint64_t v29;

  v29 = *MEMORY[0x24BDAC8D0];
  a1[1] = 0;
  a1[2] = 0;
  v6 = a1 + 1;
  a1[3] = 0;
  v7 = CLMicroLocationFingerprintVector::size(this);
  *a1 = v7;
  v20[0] = 0;
  std::vector<float>::resize((uint64_t)v6, (unint64_t)(v7 + v7 * v7) >> 1, v20);
  if (*a1)
  {
    v8 = 0;
    do
    {
      v9 = CLMicroLocationFingerprintVector::operator[](this, v8);
      std::unordered_set<CLMicroLocationFingerprint::Measurement,CLMicroLocationFingerprint::Measurement::HashMeasurement,CLMicroLocationFingerprint::Measurement::PredicateMeasurement,std::allocator<CLMicroLocationFingerprint::Measurement>>::unordered_set((uint64_t)v20, v9);
      v10 = *(_OWORD *)(v9 + 40);
      v22 = *(_QWORD *)(v9 + 56);
      v21 = v10;
      std::unordered_set<CLMicroLocationProto::DataType>::unordered_set((uint64_t)v23, v9 + 64);
      std::unordered_map<CLMicroLocationProto::DataType,CLMicroLocationFingerprint::StartAndEndTimestamps>::unordered_map((uint64_t)v24, v9 + 104);
      v11 = *(_OWORD *)(v9 + 144);
      v25 = *(_DWORD *)(v9 + 160);
      *(_OWORD *)&v24[40] = v11;
      v27 = 0;
      v28 = 0;
      __p = 0;
      std::vector<CLMicroLocationProto::ConfidenceReason>::__init_with_size[abi:ne180100]<CLMicroLocationProto::ConfidenceReason*,CLMicroLocationProto::ConfidenceReason*>(&__p, *(const void **)(v9 + 168), *(_QWORD *)(v9 + 176), (uint64_t)(*(_QWORD *)(v9 + 176) - *(_QWORD *)(v9 + 168)) >> 2);
      if (v8)
      {
        for (i = 0; i != v8; ++i)
        {
          v13 = CLMicroLocationFingerprintVector::operator[](this, i);
          v14 = *(_QWORD *)(a3 + 24);
          if (!v14)
            std::__throw_bad_function_call[abi:ne180100]();
          (*(void (**)(uint64_t, _DWORD *, uint64_t))(*(_QWORD *)v14 + 48))(v14, v20, v13);
          if (v8 <= i)
            v16 = i;
          else
            v16 = v8;
          if (v8 >= i)
            v17 = i;
          else
            v17 = v8;
          v18 = v15;
          *(float *)(*v6 + 4 * (v17 + ((v16 + v16 * v16) >> 1))) = v18;
        }
      }
      if (__p)
      {
        v27 = __p;
        operator delete(__p);
      }
      std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>>>::~__hash_table((uint64_t)v24);
      std::__hash_table<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::__unordered_map_hasher<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::hash<boost::uuids::uuid>,std::equal_to<boost::uuids::uuid>,true>,std::__unordered_map_equal<boost::uuids::uuid,std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>,std::equal_to<boost::uuids::uuid>,std::hash<boost::uuids::uuid>,true>,std::allocator<std::__hash_value_type<boost::uuids::uuid,CLMicroLocationTriggerManager::Policy>>>::~__hash_table((uint64_t)v23);
      std::__hash_table<CLMicroLocationFingerprint::Measurement,CLMicroLocationFingerprint::Measurement::HashMeasurement,CLMicroLocationFingerprint::Measurement::PredicateMeasurement,std::allocator<CLMicroLocationFingerprint::Measurement>>::~__hash_table((uint64_t)v20);
      ++v8;
    }
    while (v8 < *a1);
  }
  return a1;
}

void sub_241AA0E80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  uint64_t v11;
  void **v12;
  void *v14;

  v14 = *v12;
  if (*v12)
  {
    *(_QWORD *)(v11 + 16) = v14;
    operator delete(v14);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<float>::resize(uint64_t a1, unint64_t a2, _DWORD *a3)
{
  unint64_t v3;

  v3 = (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 2;
  if (a2 <= v3)
  {
    if (a2 < v3)
      *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 4 * a2;
  }
  else
  {
    std::vector<float>::__append((void **)a1, a2 - v3, a3);
  }
}

void std::vector<float>::__append(void **a1, unint64_t a2, _DWORD *a3)
{
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  _DWORD *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  uint64_t v16;
  _DWORD *v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  char *v23;
  char *i;
  int v25;

  v8 = a1[2];
  v6 = (uint64_t)(a1 + 2);
  v7 = v8;
  v9 = *(_DWORD **)(v6 - 8);
  if (a2 <= (v8 - (_BYTE *)v9) >> 2)
  {
    if (a2)
    {
      v16 = 4 * a2;
      v17 = &v9[a2];
      do
      {
        *v9++ = *a3;
        v16 -= 4;
      }
      while (v16);
      v9 = v17;
    }
    a1[1] = v9;
  }
  else
  {
    v10 = (char *)v9 - (_BYTE *)*a1;
    v11 = a2 + (v10 >> 2);
    if (v11 >> 62)
      std::vector<CLMicroLocationProto::ConfidenceReason>::__throw_length_error[abi:ne180100]();
    v12 = v10 >> 2;
    v13 = v7 - (_BYTE *)*a1;
    if (v13 >> 1 > v11)
      v11 = v13 >> 1;
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFFCLL)
      v14 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v14 = v11;
    if (v14)
      v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CLMicroLocationProto::ConfidenceReason>>(v6, v14);
    else
      v15 = 0;
    v18 = &v15[4 * v12];
    v19 = &v18[4 * a2];
    v20 = 4 * a2;
    v21 = v18;
    do
    {
      *(_DWORD *)v21 = *a3;
      v21 += 4;
      v20 -= 4;
    }
    while (v20);
    v22 = &v15[4 * v14];
    v23 = (char *)*a1;
    for (i = (char *)a1[1]; i != v23; i -= 4)
    {
      v25 = *((_DWORD *)i - 1);
      *((_DWORD *)v18 - 1) = v25;
      v18 -= 4;
    }
    *a1 = v18;
    a1[1] = v19;
    a1[2] = v22;
    if (v23)
      operator delete(v23);
  }
}

_QWORD *std::vector<unsigned long>::vector(_QWORD *a1, unint64_t a2, _QWORD *a3)
{
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<CLMicroLocationWiFiChannelHistogram>::__vallocate[abi:ne180100](a1, a2);
    v6 = (_QWORD *)a1[1];
    v7 = &v6[a2];
    v8 = 8 * a2;
    do
    {
      *v6++ = *a3;
      v8 -= 8;
    }
    while (v8);
    a1[1] = v7;
  }
  return a1;
}

void sub_241AA1090(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void ULMiloSqliteDatabase::ULMiloSqliteDatabase(ULMiloSqliteDatabase *this, CLSqliteDatabase *a2)
{
  this->var0 = a2;
}

uint64_t ULMiloSqliteDatabase::tableExists(ULMiloSqliteDatabase *this, const char *a2)
{
  return CLSqliteDatabase::tableExists(this->var0, a2);
}

uint64_t ULMiloSqliteDatabase::numEntries(ULMiloSqliteDatabase *this, const char *a2)
{
  std::string *v3;
  __int128 v4;
  void **v5;
  std::string::size_type v6;
  sqlite3_stmt *Statement;
  NSObject *v8;
  int v9;
  std::string __p;
  void *v12[2];
  int64_t v13;

  *((_BYTE *)&__p.__r_.__value_.__s + 23) = 21;
  strcpy((char *)&__p, "SELECT COUNT(*) FROM ");
  v3 = std::string::append(&__p, a2);
  v4 = *(_OWORD *)&v3->__r_.__value_.__l.__data_;
  v13 = v3->__r_.__value_.__r.__words[2];
  *(_OWORD *)v12 = v4;
  v3->__r_.__value_.__l.__size_ = 0;
  v3->__r_.__value_.__r.__words[2] = 0;
  v3->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (v13 >= 0)
    v5 = v12;
  else
    v5 = (void **)v12[0];
  CLSqliteDatabase::prepareScopedStatement(this->var0, (sqlite3 *)v5, (CLSqliteFinalizingStatement **)&__p);
  v6 = __p.__r_.__value_.__r.__words[0];
  Statement = (sqlite3_stmt *)CLSqliteStatement::getStatement((CLSqliteStatement *)__p.__r_.__value_.__l.__data_);
  if (sqlite3_step(Statement) != 100)
  {
    if (onceToken_MicroLocation_Default != -1)
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_61);
    v8 = logObject_MicroLocation_Default;
    if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_ERROR))
    {
      LOWORD(__p.__r_.__value_.__l.__data_) = 0;
      _os_log_impl(&dword_2419D9000, v8, OS_LOG_TYPE_ERROR, "Failed to SELECT COUNT(*) rows", (uint8_t *)&__p, 2u);
    }
    sqlite3_reset(Statement);
  }
  v9 = sqlite3_column_int(Statement, 0);
  sqlite3_reset(Statement);
  if (v6)
    (*(void (**)(std::string::size_type))(*(_QWORD *)v6 + 8))(v6);
  if (SHIBYTE(v13) < 0)
    operator delete(v12[0]);
  return v9 & ~(v9 >> 31);
}

void sub_241AA1228(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void ULMiloSqliteDatabase::selectRecordingEventEntries(ULMiloSqliteDatabase *this@<X0>, double *a2@<X2>, unsigned int a3@<W1>, std::string *a4@<X8>)
{
  std::string *v8;
  __int128 v9;
  std::string *v10;
  std::string::size_type size;
  std::string *v12;
  void *v13;
  unsigned __int8 v14;
  std::string *v15;
  std::string::size_type v16;
  std::string *v17;
  __int128 v18;
  std::string *v19;
  __int128 v20;
  std::string *v21;
  __int128 v22;
  const std::string::value_type *p_p;
  std::string::size_type v24;
  std::string *v25;
  __int128 v26;
  std::string *v27;
  __int128 v28;
  void **v29;
  std::string::size_type v30;
  std::string *v31;
  __int128 v32;
  std::string *v33;
  __int128 v34;
  std::string *v35;
  std::string::size_type v36;
  std::string *v37;
  __int128 v38;
  sqlite3 *v39;
  std::string::size_type v40;
  sqlite3_stmt *Statement;
  std::string::size_type v42;
  sqlite3_int64 v43;
  std::string::size_type v44;
  std::string::size_type v45;
  std::string::size_type v46;
  std::string v47;
  std::string v48;
  std::string v49;
  std::string v50;
  std::string v51;
  std::string v52;
  std::string v53;
  void *__p;
  _BYTE v55[15];
  unsigned __int8 v56;
  void *v57[2];
  unsigned __int8 v58;
  std::string v59;
  std::string v60;
  std::string v61;
  std::string v62;
  uint64_t v63;

  v63 = *MEMORY[0x24BDAC8D0];
  std::string::basic_string[abi:ne180100]<0>(v57, "RowId");
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  if (*a2 > 0.0)
  {
    std::operator+<char>();
    v8 = std::string::append(&v53, " < ");
    v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
    v59.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v59.__r_.__value_.__l.__data_ = v9;
    v8->__r_.__value_.__l.__size_ = 0;
    v8->__r_.__value_.__r.__words[2] = 0;
    v8->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v52, *a2);
    if ((v52.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v10 = &v52;
    else
      v10 = (std::string *)v52.__r_.__value_.__r.__words[0];
    if ((v52.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v52.__r_.__value_.__r.__words[2]);
    else
      size = v52.__r_.__value_.__l.__size_;
    v12 = std::string::append(&v59, (const std::string::value_type *)v10, size);
    v13 = (void *)v12->__r_.__value_.__r.__words[0];
    v62.__r_.__value_.__r.__words[0] = v12->__r_.__value_.__l.__size_;
    *(std::string::size_type *)((char *)v62.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v12->__r_.__value_.__r.__words[1] + 7);
    v14 = HIBYTE(v12->__r_.__value_.__r.__words[2]);
    v12->__r_.__value_.__l.__size_ = 0;
    v12->__r_.__value_.__r.__words[2] = 0;
    v12->__r_.__value_.__r.__words[0] = 0;
    if ((char)v56 < 0)
      operator delete(__p);
    __p = v13;
    *(_QWORD *)v55 = v62.__r_.__value_.__r.__words[0];
    *(_QWORD *)&v55[7] = *(std::string::size_type *)((char *)v62.__r_.__value_.__r.__words + 7);
    v56 = v14;
    if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v52.__r_.__value_.__l.__data_);
    if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v59.__r_.__value_.__l.__data_);
    if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v53.__r_.__value_.__l.__data_);
  }
  *((_BYTE *)&v49.__r_.__value_.__s + 23) = 7;
  strcpy((char *)&v49, "SELECT ");
  CLMicroLocationDatabaseColumns::ColumnList<ULRecordingEventTable::DatabaseColumns::RecordingUUID,ULRecordingEventTable::DatabaseColumns::RecordingTimestamp,ULRecordingEventTable::DatabaseColumns::RTLOIType,ULRecordingEventTable::DatabaseColumns::ReceivedTimestamp,ULRecordingEventTable::DatabaseColumns::EventType,ULRecordingEventTable::DatabaseColumns::Event,ULRecordingEventTable::DatabaseColumns::RowId,ULRecordingEventTable::DatabaseColumns::TriggerUUID,ULRecordingEventTable::DatabaseColumns::RtLoiGroupId>::commaSeparatedColumnNames(&v48);
  if ((v48.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v15 = &v48;
  else
    v15 = (std::string *)v48.__r_.__value_.__r.__words[0];
  if ((v48.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v16 = HIBYTE(v48.__r_.__value_.__r.__words[2]);
  else
    v16 = v48.__r_.__value_.__l.__size_;
  v17 = std::string::append(&v49, (const std::string::value_type *)v15, v16);
  v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
  v60.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v60.__r_.__value_.__l.__data_ = v18;
  v17->__r_.__value_.__l.__size_ = 0;
  v17->__r_.__value_.__r.__words[2] = 0;
  v17->__r_.__value_.__r.__words[0] = 0;
  v19 = std::string::append(&v60, " FROM ");
  v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  v61.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v61.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  v21 = std::string::append(&v61, "MicroLocationRecordingEvents");
  v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
  v50.__r_.__value_.__r.__words[2] = v21->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v22;
  v21->__r_.__value_.__l.__size_ = 0;
  v21->__r_.__value_.__r.__words[2] = 0;
  v21->__r_.__value_.__r.__words[0] = 0;
  if ((v56 & 0x80u) == 0)
    p_p = (const std::string::value_type *)&__p;
  else
    p_p = (const std::string::value_type *)__p;
  if ((v56 & 0x80u) == 0)
    v24 = v56;
  else
    v24 = *(_QWORD *)v55;
  v25 = std::string::append(&v50, p_p, v24);
  v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
  v51.__r_.__value_.__r.__words[2] = v25->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v51.__r_.__value_.__l.__data_ = v26;
  v25->__r_.__value_.__l.__size_ = 0;
  v25->__r_.__value_.__r.__words[2] = 0;
  v25->__r_.__value_.__r.__words[0] = 0;
  v27 = std::string::append(&v51, " ORDER BY ");
  v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
  v62.__r_.__value_.__r.__words[2] = v27->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v62.__r_.__value_.__l.__data_ = v28;
  v27->__r_.__value_.__l.__size_ = 0;
  v27->__r_.__value_.__r.__words[2] = 0;
  v27->__r_.__value_.__r.__words[0] = 0;
  if ((v58 & 0x80u) == 0)
    v29 = v57;
  else
    v29 = (void **)v57[0];
  if ((v58 & 0x80u) == 0)
    v30 = v58;
  else
    v30 = (std::string::size_type)v57[1];
  v31 = std::string::append(&v62, (const std::string::value_type *)v29, v30);
  v32 = *(_OWORD *)&v31->__r_.__value_.__l.__data_;
  v52.__r_.__value_.__r.__words[2] = v31->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v52.__r_.__value_.__l.__data_ = v32;
  v31->__r_.__value_.__l.__size_ = 0;
  v31->__r_.__value_.__r.__words[2] = 0;
  v31->__r_.__value_.__r.__words[0] = 0;
  v33 = std::string::append(&v52, " DESC LIMIT ");
  v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
  v59.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v59.__r_.__value_.__l.__data_ = v34;
  v33->__r_.__value_.__l.__size_ = 0;
  v33->__r_.__value_.__r.__words[2] = 0;
  v33->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v47, a3);
  if ((v47.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v35 = &v47;
  else
    v35 = (std::string *)v47.__r_.__value_.__r.__words[0];
  if ((v47.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v36 = HIBYTE(v47.__r_.__value_.__r.__words[2]);
  else
    v36 = v47.__r_.__value_.__l.__size_;
  v37 = std::string::append(&v59, (const std::string::value_type *)v35, v36);
  v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
  v53.__r_.__value_.__r.__words[2] = v37->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v53.__r_.__value_.__l.__data_ = v38;
  v37->__r_.__value_.__l.__size_ = 0;
  v37->__r_.__value_.__r.__words[2] = 0;
  v37->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v47.__r_.__value_.__l.__data_);
  if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v59.__r_.__value_.__l.__data_);
  if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v52.__r_.__value_.__l.__data_);
  if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v62.__r_.__value_.__l.__data_);
  if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v51.__r_.__value_.__l.__data_);
  if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v50.__r_.__value_.__l.__data_);
  if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v61.__r_.__value_.__l.__data_);
  if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v60.__r_.__value_.__l.__data_);
  if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v48.__r_.__value_.__l.__data_);
  if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v49.__r_.__value_.__l.__data_);
  if ((v53.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v39 = (sqlite3 *)&v53;
  else
    v39 = (sqlite3 *)v53.__r_.__value_.__r.__words[0];
  CLSqliteDatabase::prepareScopedStatement(this->var0, v39, (CLSqliteFinalizingStatement **)&v59);
  v40 = v59.__r_.__value_.__r.__words[0];
  Statement = (sqlite3_stmt *)CLSqliteStatement::getStatement((CLSqliteStatement *)v59.__r_.__value_.__l.__data_);
  memset(&v52, 0, sizeof(v52));
  while (sqlite3_step(Statement) == 100)
  {
    *(_OWORD *)&v61.__r_.__value_.__l.__data_ = 0uLL;
    v61.__r_.__value_.__r.__words[0] = CLMicroLocationDatabaseColumns::convert_from_sql<boost::uuids::uuid>::convert(Statement, 0);
    v61.__r_.__value_.__l.__size_ = v42;
    v49.__r_.__value_.__r.__words[0] = sqlite3_column_double(Statement, 1);
    CLMicroLocationDatabaseColumns::convert_from_sql<std::string>::convert(Statement, 2, &v62);
    v48.__r_.__value_.__r.__words[0] = sqlite3_column_double(Statement, 3);
    LODWORD(v47.__r_.__value_.__l.__data_) = 0;
    LODWORD(v47.__r_.__value_.__l.__data_) = sqlite3_column_int64(Statement, 4);
    CLMicroLocationDatabaseColumns::convert_from_sql<CLMicroLocationProto::RecordingEvent>::convert<CLMicroLocationProto::RecordingEvent>(Statement, 5, (CLMicroLocationProto::RecordingEvent *)&v59);
    CLMicroLocationDatabaseColumns::convert_from_sql<std::string>::convert(Statement, 8, &v51);
    CLMicroLocationDatabaseColumns::convert_from_sql<std::string>::convert(Statement, 7, &v50);
    v43 = sqlite3_column_int64(Statement, 6);
    *a2 = (double)v43;
    v60.__r_.__value_.__r.__words[0] = ULMiloSqliteDatabase::_getUUIDFromStringOrNilUUID(v43, (uint64_t)&v51);
    v60.__r_.__value_.__l.__size_ = v44;
    v45 = v52.__r_.__value_.__l.__size_;
    if (v52.__r_.__value_.__l.__size_ >= v52.__r_.__value_.__r.__words[2])
    {
      v46 = std::vector<CLMicroLocationRecordingEventsTable::Entry>::__emplace_back_slow_path<boost::uuids::uuid &,std::chrono::time_point<cl::chrono::CFAbsoluteTimeClock,std::chrono::duration<long double,std::ratio<1l,1l>>> &,std::string &,std::chrono::time_point<cl::chrono::CFAbsoluteTimeClock,std::chrono::duration<long double,std::ratio<1l,1l>>> &,CLMicroLocationProto::EventType &,CLMicroLocationProto::RecordingEvent &,std::string &,boost::uuids::uuid>((uint64_t *)&v52, (uint64_t *)&v61, (double *)&v49, (uint64_t)&v62, (double *)&v48, (int *)&v47, (CLMicroLocationProto::RecordingEvent *)&v59, (uint64_t)&v50, (uint64_t *)&v60);
    }
    else
    {
      std::allocator<CLMicroLocationRecordingEventsTable::Entry>::construct[abi:ne180100]<CLMicroLocationRecordingEventsTable::Entry,boost::uuids::uuid &,std::chrono::time_point<cl::chrono::CFAbsoluteTimeClock,std::chrono::duration<long double,std::ratio<1l,1l>>> &,std::string &,std::chrono::time_point<cl::chrono::CFAbsoluteTimeClock,std::chrono::duration<long double,std::ratio<1l,1l>>> &,CLMicroLocationProto::EventType &,CLMicroLocationProto::RecordingEvent &,std::string &,boost::uuids::uuid>((uint64_t)&v52.__r_.__value_.__r.__words[2], v52.__r_.__value_.__l.__size_, (uint64_t *)&v61, (double *)&v49, (uint64_t)&v62, (double *)&v48, (int *)&v47, (CLMicroLocationProto::RecordingEvent *)&v59, (uint64_t)&v50, (uint64_t *)&v60);
      v46 = v45 + 248;
    }
    v52.__r_.__value_.__l.__size_ = v46;
    if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v50.__r_.__value_.__l.__data_);
    if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v51.__r_.__value_.__l.__data_);
    CLMicroLocationProto::RecordingEvent::~RecordingEvent((CLMicroLocationProto::RecordingEvent *)&v59);
    if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v62.__r_.__value_.__l.__data_);
  }
  sqlite3_reset(Statement);
  *a4 = v52;
  memset(&v52, 0, sizeof(v52));
  v59.__r_.__value_.__r.__words[0] = (std::string::size_type)&v52;
  std::vector<CLMicroLocationRecordingEventsTable::Entry>::__destroy_vector::operator()[abi:ne180100]((void ***)&v59);
  if (v40)
    (*(void (**)(std::string::size_type))(*(_QWORD *)v40 + 8))(v40);
  if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v53.__r_.__value_.__l.__data_);
  if ((char)v56 < 0)
    operator delete(__p);
  if ((char)v58 < 0)
    operator delete(v57[0]);
}

void sub_241AA18C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,uint64_t a42,void *a43,uint64_t a44,int a45,__int16 a46,char a47,char a48,void *a49,uint64_t a50,int a51,__int16 a52,char a53,char a54,void *buf,uint64_t a56,int a57,__int16 a58,char a59,char a60)
{
  if (a34 < 0)
    operator delete(__p);
  if (a60 < 0)
    operator delete(buf);
  if (a41 < 0)
    operator delete(a36);
  if (a48 < 0)
    operator delete(a43);
  if (a54 < 0)
    operator delete(a49);
  _Unwind_Resume(a1);
}

void sub_241AA1B8C()
{
  __cxa_end_catch();
  JUMPOUT(0x241AA1A60);
}

void sub_241AA1B98(void *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  JUMPOUT(0x241AA1AB4);
}

void sub_241AA1BA8()
{
  JUMPOUT(0x241AA1AB4);
}

double CLMicroLocationDatabaseColumns::ColumnList<ULRecordingEventTable::DatabaseColumns::RecordingUUID,ULRecordingEventTable::DatabaseColumns::RecordingTimestamp,ULRecordingEventTable::DatabaseColumns::RTLOIType,ULRecordingEventTable::DatabaseColumns::ReceivedTimestamp,ULRecordingEventTable::DatabaseColumns::EventType,ULRecordingEventTable::DatabaseColumns::Event,ULRecordingEventTable::DatabaseColumns::RowId,ULRecordingEventTable::DatabaseColumns::TriggerUUID,ULRecordingEventTable::DatabaseColumns::RtLoiGroupId>::commaSeparatedColumnNames@<D0>(std::string *a1@<X8>)
{
  double result;
  std::string v3;

  memset(&v3, 0, sizeof(v3));
  CLMicroLocationDatabaseColumns::ColumnList<ULRecordingEventTable::DatabaseColumns::RecordingUUID,ULRecordingEventTable::DatabaseColumns::RecordingTimestamp,ULRecordingEventTable::DatabaseColumns::RTLOIType,ULRecordingEventTable::DatabaseColumns::ReceivedTimestamp,ULRecordingEventTable::DatabaseColumns::EventType,ULRecordingEventTable::DatabaseColumns::Event,ULRecordingEventTable::DatabaseColumns::RowId,ULRecordingEventTable::DatabaseColumns::TriggerUUID,ULRecordingEventTable::DatabaseColumns::RtLoiGroupId>::commaSeperatedNamesGenerator<0ul,1ul,2ul,3ul,4ul,5ul,6ul,7ul,8ul>(&v3);
  result = *(double *)&v3.__r_.__value_.__l.__data_;
  *a1 = v3;
  return result;
}

void sub_241AA1BF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t ULMiloSqliteDatabase::_getUUIDFromStringOrNilUUID(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  char v5;
  uint64_t v6;

  v6 = *MEMORY[0x24BDAC8D0];
  v2 = *(unsigned __int8 *)(a2 + 23);
  if ((v2 & 0x80u) != 0)
    v2 = *(_QWORD *)(a2 + 8);
  if (!v2)
    return 0;
  CLMicroLocationProtobufHelper::uuidFromStdString(a2, (uint64_t)&v4);
  if (v5)
    return v4;
  else
    return 0;
}

void ULMiloSqliteDatabase::selectMeasurementEntries(ULMiloSqliteDatabase *this@<X0>, double *a2@<X2>, unsigned int a3@<W1>, std::string *a4@<X8>)
{
  std::string *v8;
  __int128 v9;
  std::string *v10;
  std::string::size_type size;
  std::string *v12;
  void *v13;
  unsigned __int8 v14;
  std::string *p_p;
  std::string::size_type v16;
  std::string *v17;
  __int128 v18;
  std::string *v19;
  __int128 v20;
  std::string *v21;
  __int128 v22;
  const std::string::value_type *v23;
  std::string::size_type v24;
  std::string *v25;
  __int128 v26;
  std::string *v27;
  __int128 v28;
  const std::string::value_type *v29;
  std::string::size_type v30;
  std::string *v31;
  __int128 v32;
  std::string *v33;
  __int128 v34;
  std::string *v35;
  std::string::size_type v36;
  std::string *v37;
  __int128 v38;
  sqlite3 *v39;
  std::string::size_type v40;
  sqlite3_stmt *Statement;
  std::string::size_type v42;
  std::string::size_type v43;
  std::string::size_type v44;
  std::string v45;
  std::string __p;
  std::string v47;
  std::string v48;
  std::string v49;
  std::string v50;
  std::string v51;
  std::string v52;
  std::string v53;
  void *v54;
  _BYTE v55[15];
  unsigned __int8 v56;
  void *v57[2];
  unsigned __int8 v58;
  std::string v59;
  std::string v60;
  uint64_t v61;

  v61 = *MEMORY[0x24BDAC8D0];
  std::string::basic_string[abi:ne180100]<0>(v57, "RowId");
  std::string::basic_string[abi:ne180100]<0>(&v54, "");
  if (*a2 > 0.0)
  {
    std::operator+<char>();
    v8 = std::string::append(&v53, " < ");
    v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
    v59.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v59.__r_.__value_.__l.__data_ = v9;
    v8->__r_.__value_.__l.__size_ = 0;
    v8->__r_.__value_.__r.__words[2] = 0;
    v8->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v52, *a2);
    if ((v52.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v10 = &v52;
    else
      v10 = (std::string *)v52.__r_.__value_.__r.__words[0];
    if ((v52.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v52.__r_.__value_.__r.__words[2]);
    else
      size = v52.__r_.__value_.__l.__size_;
    v12 = std::string::append(&v59, (const std::string::value_type *)v10, size);
    v13 = (void *)v12->__r_.__value_.__r.__words[0];
    v60.__r_.__value_.__r.__words[0] = v12->__r_.__value_.__l.__size_;
    *(std::string::size_type *)((char *)v60.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v12->__r_.__value_.__r.__words[1] + 7);
    v14 = HIBYTE(v12->__r_.__value_.__r.__words[2]);
    v12->__r_.__value_.__l.__size_ = 0;
    v12->__r_.__value_.__r.__words[2] = 0;
    v12->__r_.__value_.__r.__words[0] = 0;
    if ((char)v56 < 0)
      operator delete(v54);
    v54 = v13;
    *(_QWORD *)v55 = v60.__r_.__value_.__r.__words[0];
    *(_QWORD *)&v55[7] = *(std::string::size_type *)((char *)v60.__r_.__value_.__r.__words + 7);
    v56 = v14;
    if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v52.__r_.__value_.__l.__data_);
    if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v59.__r_.__value_.__l.__data_);
    if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v53.__r_.__value_.__l.__data_);
  }
  *((_BYTE *)&v47.__r_.__value_.__s + 23) = 7;
  strcpy((char *)&v47, "SELECT ");
  CLMicroLocationDatabaseColumns::ColumnList<ULMeasurementTable::DatabaseColumns::RecordingUUID,ULMeasurementTable::DatabaseColumns::ScanCFTimestamp,ULMeasurementTable::DatabaseColumns::ScanMCTimestamp,ULMeasurementTable::DatabaseColumns::Data,ULMeasurementTable::DatabaseColumns::Flags,ULMeasurementTable::DatabaseColumns::RowId>::commaSeparatedColumnNames(&__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v16 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v16 = __p.__r_.__value_.__l.__size_;
  v17 = std::string::append(&v47, (const std::string::value_type *)p_p, v16);
  v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
  v48.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v48.__r_.__value_.__l.__data_ = v18;
  v17->__r_.__value_.__l.__size_ = 0;
  v17->__r_.__value_.__r.__words[2] = 0;
  v17->__r_.__value_.__r.__words[0] = 0;
  v19 = std::string::append(&v48, " FROM ");
  v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  v49.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v49.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  v21 = std::string::append(&v49, "MicroLocationMeasurements");
  v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
  v50.__r_.__value_.__r.__words[2] = v21->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v22;
  v21->__r_.__value_.__l.__size_ = 0;
  v21->__r_.__value_.__r.__words[2] = 0;
  v21->__r_.__value_.__r.__words[0] = 0;
  if ((v56 & 0x80u) == 0)
    v23 = (const std::string::value_type *)&v54;
  else
    v23 = (const std::string::value_type *)v54;
  if ((v56 & 0x80u) == 0)
    v24 = v56;
  else
    v24 = *(_QWORD *)v55;
  v25 = std::string::append(&v50, v23, v24);
  v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
  v51.__r_.__value_.__r.__words[2] = v25->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v51.__r_.__value_.__l.__data_ = v26;
  v25->__r_.__value_.__l.__size_ = 0;
  v25->__r_.__value_.__r.__words[2] = 0;
  v25->__r_.__value_.__r.__words[0] = 0;
  v27 = std::string::append(&v51, " ORDER BY ");
  v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
  v60.__r_.__value_.__r.__words[2] = v27->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v60.__r_.__value_.__l.__data_ = v28;
  v27->__r_.__value_.__l.__size_ = 0;
  v27->__r_.__value_.__r.__words[2] = 0;
  v27->__r_.__value_.__r.__words[0] = 0;
  if ((v58 & 0x80u) == 0)
    v29 = (const std::string::value_type *)v57;
  else
    v29 = (const std::string::value_type *)v57[0];
  if ((v58 & 0x80u) == 0)
    v30 = v58;
  else
    v30 = (std::string::size_type)v57[1];
  v31 = std::string::append(&v60, v29, v30);
  v32 = *(_OWORD *)&v31->__r_.__value_.__l.__data_;
  v52.__r_.__value_.__r.__words[2] = v31->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v52.__r_.__value_.__l.__data_ = v32;
  v31->__r_.__value_.__l.__size_ = 0;
  v31->__r_.__value_.__r.__words[2] = 0;
  v31->__r_.__value_.__r.__words[0] = 0;
  v33 = std::string::append(&v52, " DESC LIMIT ");
  v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
  v59.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v59.__r_.__value_.__l.__data_ = v34;
  v33->__r_.__value_.__l.__size_ = 0;
  v33->__r_.__value_.__r.__words[2] = 0;
  v33->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v45, a3);
  if ((v45.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v35 = &v45;
  else
    v35 = (std::string *)v45.__r_.__value_.__r.__words[0];
  if ((v45.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v36 = HIBYTE(v45.__r_.__value_.__r.__words[2]);
  else
    v36 = v45.__r_.__value_.__l.__size_;
  v37 = std::string::append(&v59, (const std::string::value_type *)v35, v36);
  v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
  v53.__r_.__value_.__r.__words[2] = v37->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v53.__r_.__value_.__l.__data_ = v38;
  v37->__r_.__value_.__l.__size_ = 0;
  v37->__r_.__value_.__r.__words[2] = 0;
  v37->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v45.__r_.__value_.__l.__data_);
  if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v59.__r_.__value_.__l.__data_);
  if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v52.__r_.__value_.__l.__data_);
  if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v60.__r_.__value_.__l.__data_);
  if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v51.__r_.__value_.__l.__data_);
  if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v50.__r_.__value_.__l.__data_);
  if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v49.__r_.__value_.__l.__data_);
  if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v48.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v47.__r_.__value_.__l.__data_);
  if ((v53.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v39 = (sqlite3 *)&v53;
  else
    v39 = (sqlite3 *)v53.__r_.__value_.__r.__words[0];
  CLSqliteDatabase::prepareScopedStatement(this->var0, v39, (CLSqliteFinalizingStatement **)&v59);
  v40 = v59.__r_.__value_.__r.__words[0];
  Statement = (sqlite3_stmt *)CLSqliteStatement::getStatement((CLSqliteStatement *)v59.__r_.__value_.__l.__data_);
  memset(&v52, 0, sizeof(v52));
  while (sqlite3_step(Statement) == 100)
  {
    *(_OWORD *)&v60.__r_.__value_.__l.__data_ = 0uLL;
    v60.__r_.__value_.__r.__words[0] = CLMicroLocationDatabaseColumns::convert_from_sql<boost::uuids::uuid>::convert(Statement, 0);
    v60.__r_.__value_.__l.__size_ = v42;
    v51.__r_.__value_.__r.__words[0] = sqlite3_column_double(Statement, 1);
    v50.__r_.__value_.__r.__words[0] = 0;
    v50.__r_.__value_.__r.__words[0] = CLMicroLocationDatabaseColumns::convert_from_sql<unsigned long long>::convert<unsigned long long>(Statement, 2);
    CLMicroLocationDatabaseColumns::convert_from_sql<CLMicroLocationProto::Measurement>::convert<CLMicroLocationProto::Measurement>(Statement, 3, (CLMicroLocationProto::Measurement *)&v59);
    LODWORD(v49.__r_.__value_.__l.__data_) = 0;
    LODWORD(v49.__r_.__value_.__l.__data_) = sqlite3_column_int64(Statement, 4);
    *a2 = (double)sqlite3_column_int64(Statement, 5);
    v43 = v52.__r_.__value_.__l.__size_;
    if (v52.__r_.__value_.__l.__size_ >= v52.__r_.__value_.__r.__words[2])
    {
      v44 = std::vector<CLMicroLocationMeasurementTable::Entry>::__emplace_back_slow_path<boost::uuids::uuid &,std::chrono::time_point<cl::chrono::CFAbsoluteTimeClock,std::chrono::duration<long double,std::ratio<1l,1l>>> &,unsigned long long &,CLMicroLocationProto::Measurement &,CLMicroLocationMeasurementTable::EntryFlags &>((uint64_t *)&v52, (uint64_t *)&v60, (double *)&v51, (uint64_t *)&v50, (CLMicroLocationProto::Measurement *)&v59, (unsigned int *)&v49);
    }
    else
    {
      CLMicroLocationMeasurementTable::Entry::Entry(v52.__r_.__value_.__l.__size_, (uint64_t)v60.__r_.__value_.__l.__data_, v60.__r_.__value_.__l.__size_, (uint64_t)v50.__r_.__value_.__l.__data_, (CLMicroLocationProto::Measurement *)&v59, LODWORD(v49.__r_.__value_.__l.__data_) | 0x100000000, *(double *)&v51.__r_.__value_.__l.__data_);
      v44 = v43 + 120;
    }
    v52.__r_.__value_.__l.__size_ = v44;
    CLMicroLocationProto::Measurement::~Measurement((CLMicroLocationProto::Measurement *)&v59);
  }
  sqlite3_reset(Statement);
  *a4 = v52;
  memset(&v52, 0, sizeof(v52));
  v59.__r_.__value_.__r.__words[0] = (std::string::size_type)&v52;
  std::vector<CLMicroLocationMeasurementTable::Entry>::__destroy_vector::operator()[abi:ne180100]((void ***)&v59);
  if (v40)
    (*(void (**)(std::string::size_type))(*(_QWORD *)v40 + 8))(v40);
  if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v53.__r_.__value_.__l.__data_);
  if ((char)v56 < 0)
    operator delete(v54);
  if ((char)v58 < 0)
    operator delete(v57[0]);
}

void sub_241AA2218(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,void *__p,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  uint64_t v47;

  if (a40 < 0)
    operator delete(__p);
  if (*(char *)(v47 - 169) < 0)
    operator delete(*(void **)(v47 - 192));
  if (a47 < 0)
    operator delete(a42);
  if (*(char *)(v47 - 217) < 0)
    operator delete(*(void **)(v47 - 240));
  if (*(char *)(v47 - 193) < 0)
    operator delete(*(void **)(v47 - 216));
  _Unwind_Resume(a1);
}

void sub_241AA23E8()
{
  JUMPOUT(0x241AA23F0);
}

void sub_241AA2488()
{
  __cxa_end_catch();
  JUMPOUT(0x241AA238CLL);
}

void sub_241AA2494(void *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  JUMPOUT(0x241AA23E0);
}

void sub_241AA24A4()
{
  JUMPOUT(0x241AA23E0);
}

double CLMicroLocationDatabaseColumns::ColumnList<ULMeasurementTable::DatabaseColumns::RecordingUUID,ULMeasurementTable::DatabaseColumns::ScanCFTimestamp,ULMeasurementTable::DatabaseColumns::ScanMCTimestamp,ULMeasurementTable::DatabaseColumns::Data,ULMeasurementTable::DatabaseColumns::Flags,ULMeasurementTable::DatabaseColumns::RowId>::commaSeparatedColumnNames@<D0>(std::string *a1@<X8>)
{
  double result;
  std::string v3;

  memset(&v3, 0, sizeof(v3));
  CLMicroLocationDatabaseColumns::ColumnList<ULMeasurementTable::DatabaseColumns::RecordingUUID,ULMeasurementTable::DatabaseColumns::ScanCFTimestamp,ULMeasurementTable::DatabaseColumns::ScanMCTimestamp,ULMeasurementTable::DatabaseColumns::Data,ULMeasurementTable::DatabaseColumns::Flags,ULMeasurementTable::DatabaseColumns::RowId>::commaSeperatedNamesGenerator<0ul,1ul,2ul,3ul,4ul,5ul>(&v3);
  result = *(double *)&v3.__r_.__value_.__l.__data_;
  *a1 = v3;
  return result;
}

void sub_241AA24F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void ULMiloSqliteDatabase::selectLabelEntries(ULMiloSqliteDatabase *this@<X0>, double *a2@<X2>, unsigned int a3@<W1>, std::string *a4@<X8>)
{
  std::string *v8;
  __int128 v9;
  std::string *v10;
  std::string::size_type size;
  std::string *v12;
  void *v13;
  unsigned __int8 v14;
  std::string *p_p;
  std::string::size_type v16;
  std::string *v17;
  __int128 v18;
  std::string *v19;
  __int128 v20;
  std::string *v21;
  __int128 v22;
  const std::string::value_type *v23;
  std::string::size_type v24;
  std::string *v25;
  __int128 v26;
  std::string *v27;
  __int128 v28;
  const std::string::value_type *v29;
  std::string::size_type v30;
  std::string *v31;
  __int128 v32;
  std::string *v33;
  __int128 v34;
  std::string *v35;
  std::string::size_type v36;
  std::string *v37;
  __int128 v38;
  sqlite3 *v39;
  std::string::size_type v40;
  sqlite3_stmt *Statement;
  std::string::size_type v42;
  std::string::size_type v43;
  std::string::size_type v44;
  std::string::size_type v45;
  std::string v46;
  std::string __p;
  std::string v48;
  std::string v49;
  std::string v50;
  std::string v51;
  std::string v52;
  std::string v53;
  void *v54;
  _BYTE v55[15];
  unsigned __int8 v56;
  void *v57[2];
  unsigned __int8 v58;
  std::string v59;
  std::string v60;
  std::string v61;
  uint64_t v62;

  v62 = *MEMORY[0x24BDAC8D0];
  std::string::basic_string[abi:ne180100]<0>(v57, "RowId");
  std::string::basic_string[abi:ne180100]<0>(&v54, "");
  if (*a2 > 0.0)
  {
    std::operator+<char>();
    v8 = std::string::append(&v52, " < ");
    v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
    v53.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v53.__r_.__value_.__l.__data_ = v9;
    v8->__r_.__value_.__l.__size_ = 0;
    v8->__r_.__value_.__r.__words[2] = 0;
    v8->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v61, *a2);
    if ((v61.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v10 = &v61;
    else
      v10 = (std::string *)v61.__r_.__value_.__r.__words[0];
    if ((v61.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v61.__r_.__value_.__r.__words[2]);
    else
      size = v61.__r_.__value_.__l.__size_;
    v12 = std::string::append(&v53, (const std::string::value_type *)v10, size);
    v13 = (void *)v12->__r_.__value_.__r.__words[0];
    v60.__r_.__value_.__r.__words[0] = v12->__r_.__value_.__l.__size_;
    *(std::string::size_type *)((char *)v60.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v12->__r_.__value_.__r.__words[1] + 7);
    v14 = HIBYTE(v12->__r_.__value_.__r.__words[2]);
    v12->__r_.__value_.__l.__size_ = 0;
    v12->__r_.__value_.__r.__words[2] = 0;
    v12->__r_.__value_.__r.__words[0] = 0;
    if ((char)v56 < 0)
      operator delete(v54);
    v54 = v13;
    *(_QWORD *)v55 = v60.__r_.__value_.__r.__words[0];
    *(_QWORD *)&v55[7] = *(std::string::size_type *)((char *)v60.__r_.__value_.__r.__words + 7);
    v56 = v14;
    if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v61.__r_.__value_.__l.__data_);
    if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v53.__r_.__value_.__l.__data_);
    if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v52.__r_.__value_.__l.__data_);
  }
  *((_BYTE *)&v48.__r_.__value_.__s + 23) = 7;
  strcpy((char *)&v48, "SELECT ");
  CLMicroLocationDatabaseColumns::ColumnList<ULLabelTable::DatabaseColumns::TriggerUUID,ULLabelTable::DatabaseColumns::ClientID,ULLabelTable::DatabaseColumns::LabelUUID,ULLabelTable::DatabaseColumns::ReceivedTimestamp,ULLabelTable::DatabaseColumns::RowId>::commaSeparatedColumnNames(&__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v16 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v16 = __p.__r_.__value_.__l.__size_;
  v17 = std::string::append(&v48, (const std::string::value_type *)p_p, v16);
  v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
  v49.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v49.__r_.__value_.__l.__data_ = v18;
  v17->__r_.__value_.__l.__size_ = 0;
  v17->__r_.__value_.__r.__words[2] = 0;
  v17->__r_.__value_.__r.__words[0] = 0;
  v19 = std::string::append(&v49, " FROM ");
  v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  v50.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  v21 = std::string::append(&v50, "MicroLocationLabels");
  v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
  v51.__r_.__value_.__r.__words[2] = v21->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v51.__r_.__value_.__l.__data_ = v22;
  v21->__r_.__value_.__l.__size_ = 0;
  v21->__r_.__value_.__r.__words[2] = 0;
  v21->__r_.__value_.__r.__words[0] = 0;
  if ((v56 & 0x80u) == 0)
    v23 = (const std::string::value_type *)&v54;
  else
    v23 = (const std::string::value_type *)v54;
  if ((v56 & 0x80u) == 0)
    v24 = v56;
  else
    v24 = *(_QWORD *)v55;
  v25 = std::string::append(&v51, v23, v24);
  v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
  v59.__r_.__value_.__r.__words[2] = v25->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v59.__r_.__value_.__l.__data_ = v26;
  v25->__r_.__value_.__l.__size_ = 0;
  v25->__r_.__value_.__r.__words[2] = 0;
  v25->__r_.__value_.__r.__words[0] = 0;
  v27 = std::string::append(&v59, " ORDER BY ");
  v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
  v60.__r_.__value_.__r.__words[2] = v27->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v60.__r_.__value_.__l.__data_ = v28;
  v27->__r_.__value_.__l.__size_ = 0;
  v27->__r_.__value_.__r.__words[2] = 0;
  v27->__r_.__value_.__r.__words[0] = 0;
  if ((v58 & 0x80u) == 0)
    v29 = (const std::string::value_type *)v57;
  else
    v29 = (const std::string::value_type *)v57[0];
  if ((v58 & 0x80u) == 0)
    v30 = v58;
  else
    v30 = (std::string::size_type)v57[1];
  v31 = std::string::append(&v60, v29, v30);
  v32 = *(_OWORD *)&v31->__r_.__value_.__l.__data_;
  v61.__r_.__value_.__r.__words[2] = v31->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v61.__r_.__value_.__l.__data_ = v32;
  v31->__r_.__value_.__l.__size_ = 0;
  v31->__r_.__value_.__r.__words[2] = 0;
  v31->__r_.__value_.__r.__words[0] = 0;
  v33 = std::string::append(&v61, " DESC LIMIT ");
  v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
  v52.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v52.__r_.__value_.__l.__data_ = v34;
  v33->__r_.__value_.__l.__size_ = 0;
  v33->__r_.__value_.__r.__words[2] = 0;
  v33->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v46, a3);
  if ((v46.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v35 = &v46;
  else
    v35 = (std::string *)v46.__r_.__value_.__r.__words[0];
  if ((v46.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v36 = HIBYTE(v46.__r_.__value_.__r.__words[2]);
  else
    v36 = v46.__r_.__value_.__l.__size_;
  v37 = std::string::append(&v52, (const std::string::value_type *)v35, v36);
  v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
  v53.__r_.__value_.__r.__words[2] = v37->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v53.__r_.__value_.__l.__data_ = v38;
  v37->__r_.__value_.__l.__size_ = 0;
  v37->__r_.__value_.__r.__words[2] = 0;
  v37->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v46.__r_.__value_.__l.__data_);
  if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v52.__r_.__value_.__l.__data_);
  if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v61.__r_.__value_.__l.__data_);
  if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v60.__r_.__value_.__l.__data_);
  if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v59.__r_.__value_.__l.__data_);
  if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v51.__r_.__value_.__l.__data_);
  if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v50.__r_.__value_.__l.__data_);
  if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v49.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v48.__r_.__value_.__l.__data_);
  if ((v53.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v39 = (sqlite3 *)&v53;
  else
    v39 = (sqlite3 *)v53.__r_.__value_.__r.__words[0];
  CLSqliteDatabase::prepareScopedStatement(this->var0, v39, (CLSqliteFinalizingStatement **)&v52);
  v40 = v52.__r_.__value_.__r.__words[0];
  Statement = (sqlite3_stmt *)CLSqliteStatement::getStatement((CLSqliteStatement *)v52.__r_.__value_.__l.__data_);
  memset(&v52, 0, sizeof(v52));
  while (sqlite3_step(Statement) == 100)
  {
    *(_OWORD *)&v60.__r_.__value_.__l.__data_ = 0uLL;
    v60.__r_.__value_.__r.__words[0] = CLMicroLocationDatabaseColumns::convert_from_sql<boost::uuids::uuid>::convert(Statement, 0);
    v60.__r_.__value_.__l.__size_ = v42;
    CLMicroLocationDatabaseColumns::convert_from_sql<std::string>::convert(Statement, 1, &v61);
    *(_OWORD *)&v59.__r_.__value_.__l.__data_ = 0uLL;
    v59.__r_.__value_.__r.__words[0] = CLMicroLocationDatabaseColumns::convert_from_sql<boost::uuids::uuid>::convert(Statement, 2);
    v59.__r_.__value_.__l.__size_ = v43;
    v51.__r_.__value_.__r.__words[0] = sqlite3_column_double(Statement, 3);
    *a2 = (double)sqlite3_column_int64(Statement, 4);
    v44 = v52.__r_.__value_.__l.__size_;
    if (v52.__r_.__value_.__l.__size_ >= v52.__r_.__value_.__r.__words[2])
    {
      v45 = std::vector<CLMicroLocationRecordingLabelsTable::Entry>::__emplace_back_slow_path<boost::uuids::uuid &,std::string &,boost::uuids::uuid &,std::chrono::time_point<cl::chrono::CFAbsoluteTimeClock,std::chrono::duration<long double,std::ratio<1l,1l>>> &>((uint64_t *)&v52, (uint64_t *)&v60, (uint64_t)&v61, (uint64_t *)&v59, (double *)&v51);
    }
    else
    {
      std::allocator<CLMicroLocationRecordingLabelsTable::Entry>::construct[abi:ne180100]<CLMicroLocationRecordingLabelsTable::Entry,boost::uuids::uuid &,std::string &,boost::uuids::uuid &,std::chrono::time_point<cl::chrono::CFAbsoluteTimeClock,std::chrono::duration<long double,std::ratio<1l,1l>>> &>((uint64_t)&v52.__r_.__value_.__r.__words[2], v52.__r_.__value_.__l.__size_, (uint64_t *)&v60, (uint64_t)&v61, (uint64_t *)&v59, (double *)&v51);
      v45 = v44 + 64;
    }
    v52.__r_.__value_.__l.__size_ = v45;
    if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v61.__r_.__value_.__l.__data_);
  }
  sqlite3_reset(Statement);
  *a4 = v52;
  memset(&v52, 0, sizeof(v52));
  v61.__r_.__value_.__r.__words[0] = (std::string::size_type)&v52;
  std::vector<CLMicroLocationRecordingLabelsTable::Entry>::__destroy_vector::operator()[abi:ne180100]((void ***)&v61);
  if (v40)
    (*(void (**)(std::string::size_type))(*(_QWORD *)v40 + 8))(v40);
  if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v53.__r_.__value_.__l.__data_);
  if ((char)v56 < 0)
    operator delete(v54);
  if ((char)v58 < 0)
    operator delete(v57[0]);
}

void sub_241AA2A74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47,uint64_t a48,void *a49,uint64_t a50,int a51,__int16 a52,char a53,char a54,uint64_t a55,void *__p,uint64_t a57,int a58,__int16 a59,char a60,char a61)
{
  uint64_t v61;

  if (*(char *)(v61 - 73) < 0)
    operator delete(*(void **)(v61 - 96));
  if (a61 < 0)
    operator delete(__p);
  if (a54 < 0)
    operator delete(a49);
  if (*(char *)(v61 - 185) < 0)
    operator delete(*(void **)(v61 - 208));
  if (*(char *)(v61 - 161) < 0)
    operator delete(*(void **)(v61 - 184));
  _Unwind_Resume(exception_object);
}

void sub_241AA2CF4()
{
  __cxa_end_catch();
  JUMPOUT(0x241AA2BF0);
}

void sub_241AA2D00(void *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  JUMPOUT(0x241AA2C44);
}

void sub_241AA2D10()
{
  JUMPOUT(0x241AA2C44);
}

double CLMicroLocationDatabaseColumns::ColumnList<ULLabelTable::DatabaseColumns::TriggerUUID,ULLabelTable::DatabaseColumns::ClientID,ULLabelTable::DatabaseColumns::LabelUUID,ULLabelTable::DatabaseColumns::ReceivedTimestamp,ULLabelTable::DatabaseColumns::RowId>::commaSeparatedColumnNames@<D0>(std::string *a1@<X8>)
{
  double result;
  std::string v3;

  memset(&v3, 0, sizeof(v3));
  CLMicroLocationDatabaseColumns::ColumnList<ULLabelTable::DatabaseColumns::TriggerUUID,ULLabelTable::DatabaseColumns::ClientID,ULLabelTable::DatabaseColumns::LabelUUID,ULLabelTable::DatabaseColumns::ReceivedTimestamp,ULLabelTable::DatabaseColumns::RowId>::commaSeperatedNamesGenerator<0ul,1ul,2ul,3ul,4ul>(&v3);
  result = *(double *)&v3.__r_.__value_.__l.__data_;
  *a1 = v3;
  return result;
}

void sub_241AA2D5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void ULMiloSqliteDatabase::selectServiceEntries(ULMiloSqliteDatabase *this@<X0>, double *a2@<X2>, unsigned int a3@<W1>, std::string *a4@<X8>)
{
  std::string *v8;
  __int128 v9;
  std::string *v10;
  std::string::size_type size;
  std::string *v12;
  void *v13;
  unsigned __int8 v14;
  std::string *v15;
  std::string::size_type v16;
  std::string *v17;
  __int128 v18;
  std::string *v19;
  __int128 v20;
  std::string *v21;
  __int128 v22;
  const std::string::value_type *v23;
  std::string::size_type v24;
  std::string *v25;
  __int128 v26;
  std::string *v27;
  __int128 v28;
  const std::string::value_type *v29;
  std::string::size_type v30;
  std::string *v31;
  __int128 v32;
  std::string *v33;
  __int128 v34;
  std::string *p_p;
  std::string::size_type v36;
  std::string *v37;
  __int128 v38;
  sqlite3 *v39;
  std::string::size_type v40;
  sqlite3_stmt *Statement;
  std::string::size_type v42;
  double v43;
  std::string::size_type v44;
  std::string::size_type v45;
  std::string __p;
  std::string::value_type __s[23];
  char v48;
  std::string v49;
  std::string v50;
  std::string v51;
  std::string v52;
  std::string v53;
  std::string v54;
  std::string v55;
  void *v56;
  _BYTE v57[15];
  unsigned __int8 v58;
  void *v59[2];
  unsigned __int8 v60;
  std::string v61;
  std::string v62;
  std::string v63;
  uint64_t v64;

  v64 = *MEMORY[0x24BDAC8D0];
  std::string::basic_string[abi:ne180100]<0>(v59, "LastActiveTimestamp");
  std::string::basic_string[abi:ne180100]<0>(&v56, "");
  if (*a2 > 0.0)
  {
    std::operator+<char>();
    v8 = std::string::append(&v54, " < ");
    v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
    v55.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v55.__r_.__value_.__l.__data_ = v9;
    v8->__r_.__value_.__l.__size_ = 0;
    v8->__r_.__value_.__r.__words[2] = 0;
    v8->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v63, *a2);
    if ((v63.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v10 = &v63;
    else
      v10 = (std::string *)v63.__r_.__value_.__r.__words[0];
    if ((v63.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v63.__r_.__value_.__r.__words[2]);
    else
      size = v63.__r_.__value_.__l.__size_;
    v12 = std::string::append(&v55, (const std::string::value_type *)v10, size);
    v13 = (void *)v12->__r_.__value_.__r.__words[0];
    v62.__r_.__value_.__r.__words[0] = v12->__r_.__value_.__l.__size_;
    *(std::string::size_type *)((char *)v62.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v12->__r_.__value_.__r.__words[1] + 7);
    v14 = HIBYTE(v12->__r_.__value_.__r.__words[2]);
    v12->__r_.__value_.__l.__size_ = 0;
    v12->__r_.__value_.__r.__words[2] = 0;
    v12->__r_.__value_.__r.__words[0] = 0;
    if ((char)v58 < 0)
      operator delete(v56);
    v56 = v13;
    *(_QWORD *)v57 = v62.__r_.__value_.__r.__words[0];
    *(_QWORD *)&v57[7] = *(std::string::size_type *)((char *)v62.__r_.__value_.__r.__words + 7);
    v58 = v14;
    if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v63.__r_.__value_.__l.__data_);
    if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v55.__r_.__value_.__l.__data_);
    if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v54.__r_.__value_.__l.__data_);
  }
  *((_BYTE *)&v50.__r_.__value_.__s + 23) = 7;
  strcpy((char *)&v50, "SELECT ");
  CLMicroLocationDatabaseColumns::ColumnList<ULServiceTable::DatabaseColumns::ServiceUUID,ULServiceTable::DatabaseColumns::LastActiveTimestamp,ULServiceTable::DatabaseColumns::ServiceType,ULServiceTable::DatabaseColumns::ClientID,ULServiceTable::DatabaseColumns::LocationTypes,ULServiceTable::DatabaseColumns::RowId,ULServiceTable::DatabaseColumns::UserId>::commaSeparatedColumnNames(&v49);
  if ((v49.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v15 = &v49;
  else
    v15 = (std::string *)v49.__r_.__value_.__r.__words[0];
  if ((v49.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v16 = HIBYTE(v49.__r_.__value_.__r.__words[2]);
  else
    v16 = v49.__r_.__value_.__l.__size_;
  v17 = std::string::append(&v50, (const std::string::value_type *)v15, v16);
  v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
  v51.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v51.__r_.__value_.__l.__data_ = v18;
  v17->__r_.__value_.__l.__size_ = 0;
  v17->__r_.__value_.__r.__words[2] = 0;
  v17->__r_.__value_.__r.__words[0] = 0;
  v19 = std::string::append(&v51, " FROM ");
  v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  v52.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v52.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  v21 = std::string::append(&v52, "MiLoServices");
  v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
  v53.__r_.__value_.__r.__words[2] = v21->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v53.__r_.__value_.__l.__data_ = v22;
  v21->__r_.__value_.__l.__size_ = 0;
  v21->__r_.__value_.__r.__words[2] = 0;
  v21->__r_.__value_.__r.__words[0] = 0;
  if ((v58 & 0x80u) == 0)
    v23 = (const std::string::value_type *)&v56;
  else
    v23 = (const std::string::value_type *)v56;
  if ((v58 & 0x80u) == 0)
    v24 = v58;
  else
    v24 = *(_QWORD *)v57;
  v25 = std::string::append(&v53, v23, v24);
  v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
  v61.__r_.__value_.__r.__words[2] = v25->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v61.__r_.__value_.__l.__data_ = v26;
  v25->__r_.__value_.__l.__size_ = 0;
  v25->__r_.__value_.__r.__words[2] = 0;
  v25->__r_.__value_.__r.__words[0] = 0;
  v27 = std::string::append(&v61, " ORDER BY ");
  v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
  v62.__r_.__value_.__r.__words[2] = v27->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v62.__r_.__value_.__l.__data_ = v28;
  v27->__r_.__value_.__l.__size_ = 0;
  v27->__r_.__value_.__r.__words[2] = 0;
  v27->__r_.__value_.__r.__words[0] = 0;
  if ((v60 & 0x80u) == 0)
    v29 = (const std::string::value_type *)v59;
  else
    v29 = (const std::string::value_type *)v59[0];
  if ((v60 & 0x80u) == 0)
    v30 = v60;
  else
    v30 = (std::string::size_type)v59[1];
  v31 = std::string::append(&v62, v29, v30);
  v32 = *(_OWORD *)&v31->__r_.__value_.__l.__data_;
  v63.__r_.__value_.__r.__words[2] = v31->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v63.__r_.__value_.__l.__data_ = v32;
  v31->__r_.__value_.__l.__size_ = 0;
  v31->__r_.__value_.__r.__words[2] = 0;
  v31->__r_.__value_.__r.__words[0] = 0;
  v48 = 12;
  strcpy(__s, " DESC LIMIT ");
  v33 = std::string::append(&v63, __s, 0xCuLL);
  v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
  v54.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v54.__r_.__value_.__l.__data_ = v34;
  v33->__r_.__value_.__l.__size_ = 0;
  v33->__r_.__value_.__r.__words[2] = 0;
  v33->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&__p, a3);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v36 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v36 = __p.__r_.__value_.__l.__size_;
  v37 = std::string::append(&v54, (const std::string::value_type *)p_p, v36);
  v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
  v55.__r_.__value_.__r.__words[2] = v37->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v55.__r_.__value_.__l.__data_ = v38;
  v37->__r_.__value_.__l.__size_ = 0;
  v37->__r_.__value_.__r.__words[2] = 0;
  v37->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v54.__r_.__value_.__l.__data_);
  if (v48 < 0)
    operator delete(*(void **)__s);
  if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v63.__r_.__value_.__l.__data_);
  if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v62.__r_.__value_.__l.__data_);
  if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v61.__r_.__value_.__l.__data_);
  if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v53.__r_.__value_.__l.__data_);
  if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v52.__r_.__value_.__l.__data_);
  if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v51.__r_.__value_.__l.__data_);
  if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v49.__r_.__value_.__l.__data_);
  if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v50.__r_.__value_.__l.__data_);
  if ((v55.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v39 = (sqlite3 *)&v55;
  else
    v39 = (sqlite3 *)v55.__r_.__value_.__r.__words[0];
  CLSqliteDatabase::prepareScopedStatement(this->var0, v39, (CLSqliteFinalizingStatement **)&v54);
  v40 = v54.__r_.__value_.__r.__words[0];
  Statement = (sqlite3_stmt *)CLSqliteStatement::getStatement((CLSqliteStatement *)v54.__r_.__value_.__l.__data_);
  memset(&v54, 0, sizeof(v54));
  while (sqlite3_step(Statement) == 100)
  {
    *(_OWORD *)&v61.__r_.__value_.__l.__data_ = 0uLL;
    v61.__r_.__value_.__r.__words[0] = CLMicroLocationDatabaseColumns::convert_from_sql<boost::uuids::uuid>::convert(Statement, 0);
    v61.__r_.__value_.__l.__size_ = v42;
    v53.__r_.__value_.__r.__words[0] = sqlite3_column_double(Statement, 1);
    v52.__r_.__value_.__r.__words[0] = 0;
    v52.__r_.__value_.__r.__words[0] = CLMicroLocationDatabaseColumns::convert_from_sql<unsigned long long>::convert<unsigned long long>(Statement, 2);
    CLMicroLocationDatabaseColumns::convert_from_sql<std::string>::convert(Statement, 3, &v63);
    v51.__r_.__value_.__r.__words[0] = 0;
    v51.__r_.__value_.__r.__words[0] = CLMicroLocationDatabaseColumns::convert_from_sql<unsigned long long>::convert<unsigned long long>(Statement, 4);
    CLMicroLocationDatabaseColumns::convert_from_sql<std::string>::convert(Statement, 6, &v62);
    v43 = *(double *)&v53.__r_.__value_.__l.__data_;
    *a2 = *(double *)&v53.__r_.__value_.__l.__data_;
    v44 = v54.__r_.__value_.__l.__size_;
    if (v54.__r_.__value_.__l.__size_ >= v54.__r_.__value_.__r.__words[2])
    {
      v45 = std::vector<CLMiLoServiceTable::Entry>::__emplace_back_slow_path<boost::uuids::uuid &,std::chrono::time_point<cl::chrono::CFAbsoluteTimeClock,std::chrono::duration<long double,std::ratio<1l,1l>>> &,unsigned long long &,std::string &,unsigned long long &,std::string &>((uint64_t *)&v54, &v61, (double *)&v53, (unsigned int *)&v52, (uint64_t)&v63, &v51, (uint64_t)&v62);
    }
    else
    {
      CLMiLoServiceTable::Entry::Entry(v54.__r_.__value_.__l.__size_, v61.__r_.__value_.__r.__words[0], v61.__r_.__value_.__l.__size_, LODWORD(v52.__r_.__value_.__l.__data_), &v63, v51.__r_.__value_.__r.__words[0], &v62, v43);
      v45 = v44 + 88;
    }
    v54.__r_.__value_.__l.__size_ = v45;
    if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v62.__r_.__value_.__l.__data_);
    if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v63.__r_.__value_.__l.__data_);
  }
  sqlite3_reset(Statement);
  *a4 = v54;
  memset(&v54, 0, sizeof(v54));
  v63.__r_.__value_.__r.__words[0] = (std::string::size_type)&v54;
  std::vector<CLMiLoServiceTable::Entry>::__destroy_vector::operator()[abi:ne180100]((void ***)&v63);
  if (v40)
    (*(void (**)(std::string::size_type))(*(_QWORD *)v40 + 8))(v40);
  if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v55.__r_.__value_.__l.__data_);
  if ((char)v58 < 0)
    operator delete(v56);
  if ((char)v60 < 0)
    operator delete(v59[0]);
}

void sub_241AA3340(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,uint64_t a39,void *__p,uint64_t a41,int a42,__int16 a43,char a44,char a45)
{
  uint64_t v45;

  if (*(char *)(v45 - 73) < 0)
    operator delete(*(void **)(v45 - 96));
  if (a45 < 0)
    operator delete(__p);
  if (a38 < 0)
    operator delete(a33);
  if (*(char *)(v45 - 185) < 0)
    operator delete(*(void **)(v45 - 208));
  if (*(char *)(v45 - 161) < 0)
    operator delete(*(void **)(v45 - 184));
  _Unwind_Resume(a1);
}

double CLMicroLocationDatabaseColumns::ColumnList<ULServiceTable::DatabaseColumns::ServiceUUID,ULServiceTable::DatabaseColumns::LastActiveTimestamp,ULServiceTable::DatabaseColumns::ServiceType,ULServiceTable::DatabaseColumns::ClientID,ULServiceTable::DatabaseColumns::LocationTypes,ULServiceTable::DatabaseColumns::RowId,ULServiceTable::DatabaseColumns::UserId>::commaSeparatedColumnNames@<D0>(std::string *a1@<X8>)
{
  double result;
  std::string v3;

  memset(&v3, 0, sizeof(v3));
  CLMicroLocationDatabaseColumns::ColumnList<ULServiceTable::DatabaseColumns::ServiceUUID,ULServiceTable::DatabaseColumns::LastActiveTimestamp,ULServiceTable::DatabaseColumns::ServiceType,ULServiceTable::DatabaseColumns::ClientID,ULServiceTable::DatabaseColumns::LocationTypes,ULServiceTable::DatabaseColumns::RowId,ULServiceTable::DatabaseColumns::UserId>::commaSeperatedNamesGenerator<0ul,1ul,2ul,3ul,4ul,5ul,6ul>(&v3);
  result = *(double *)&v3.__r_.__value_.__l.__data_;
  *a1 = v3;
  return result;
}

void sub_241AA3660(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void ULMiloSqliteDatabase::selectLoiEntries(ULMiloSqliteDatabase *this@<X0>, double *a2@<X2>, unsigned int a3@<W1>, std::string *a4@<X8>)
{
  std::string *v8;
  __int128 v9;
  std::string *v10;
  std::string::size_type size;
  std::string *v12;
  void *v13;
  unsigned __int8 v14;
  std::string *v15;
  std::string::size_type v16;
  std::string *v17;
  __int128 v18;
  std::string *v19;
  __int128 v20;
  std::string *v21;
  __int128 v22;
  std::string *v23;
  __int128 v24;
  const std::string::value_type *p_p;
  std::string::size_type v26;
  std::string *v27;
  __int128 v28;
  std::string *v29;
  __int128 v30;
  const std::string::value_type *v31;
  std::string::size_type v32;
  std::string *v33;
  __int128 v34;
  std::string *v35;
  __int128 v36;
  std::string *v37;
  std::string::size_type v38;
  std::string *v39;
  __int128 v40;
  sqlite3 *v41;
  std::string::size_type v42;
  sqlite3_stmt *Statement;
  uint64_t v44;
  std::string::size_type v45;
  std::string::size_type v46;
  std::string::size_type v47;
  std::string::size_type v48;
  std::string v49;
  std::string v50;
  std::string v51;
  std::string v52;
  std::string v53;
  std::string v54;
  std::string v55;
  std::string v56;
  void *__p;
  _BYTE v58[15];
  unsigned __int8 v59;
  void *v60[2];
  unsigned __int8 v61;
  std::string v62;
  std::string v63;
  std::string v64;
  std::string v65;
  uint64_t v66;

  v66 = *MEMORY[0x24BDAC8D0];
  std::string::basic_string[abi:ne180100]<0>(v60, "LastSeenTimeStamp");
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  if (*a2 > 0.0)
  {
    std::operator+<char>();
    v8 = std::string::append(&v55, " < ");
    v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
    v56.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v56.__r_.__value_.__l.__data_ = v9;
    v8->__r_.__value_.__l.__size_ = 0;
    v8->__r_.__value_.__r.__words[2] = 0;
    v8->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v65, *a2);
    if ((v65.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v10 = &v65;
    else
      v10 = (std::string *)v65.__r_.__value_.__r.__words[0];
    if ((v65.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v65.__r_.__value_.__r.__words[2]);
    else
      size = v65.__r_.__value_.__l.__size_;
    v12 = std::string::append(&v56, (const std::string::value_type *)v10, size);
    v13 = (void *)v12->__r_.__value_.__r.__words[0];
    v64.__r_.__value_.__r.__words[0] = v12->__r_.__value_.__l.__size_;
    *(std::string::size_type *)((char *)v64.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v12->__r_.__value_.__r.__words[1] + 7);
    v14 = HIBYTE(v12->__r_.__value_.__r.__words[2]);
    v12->__r_.__value_.__l.__size_ = 0;
    v12->__r_.__value_.__r.__words[2] = 0;
    v12->__r_.__value_.__r.__words[0] = 0;
    if ((char)v59 < 0)
      operator delete(__p);
    __p = v13;
    *(_QWORD *)v58 = v64.__r_.__value_.__r.__words[0];
    *(_QWORD *)&v58[7] = *(std::string::size_type *)((char *)v64.__r_.__value_.__r.__words + 7);
    v59 = v14;
    if (SHIBYTE(v65.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v65.__r_.__value_.__l.__data_);
    if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v56.__r_.__value_.__l.__data_);
    if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v55.__r_.__value_.__l.__data_);
  }
  *((_BYTE *)&v51.__r_.__value_.__s + 23) = 7;
  strcpy((char *)&v51, "SELECT ");
  CLMicroLocationDatabaseColumns::ColumnList<ULLoiTable::DatabaseColumns::RowId,ULLoiTable::DatabaseColumns::LastSeenTimeStamp,ULLoiTable::DatabaseColumns::LoiId,ULLoiTable::DatabaseColumns::LoiGroupId,ULLoiTable::DatabaseColumns::LoiType>::commaSeparatedColumnNames(&v50);
  if ((v50.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v15 = &v50;
  else
    v15 = (std::string *)v50.__r_.__value_.__r.__words[0];
  if ((v50.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v16 = HIBYTE(v50.__r_.__value_.__r.__words[2]);
  else
    v16 = v50.__r_.__value_.__l.__size_;
  v17 = std::string::append(&v51, (const std::string::value_type *)v15, v16);
  v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
  v52.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v52.__r_.__value_.__l.__data_ = v18;
  v17->__r_.__value_.__l.__size_ = 0;
  v17->__r_.__value_.__r.__words[2] = 0;
  v17->__r_.__value_.__r.__words[0] = 0;
  v19 = std::string::append(&v52, " FROM ");
  v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  v53.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v53.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  v21 = std::string::append(&v53, "MiLoLoiTable");
  v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
  v62.__r_.__value_.__r.__words[2] = v21->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v62.__r_.__value_.__l.__data_ = v22;
  v21->__r_.__value_.__l.__size_ = 0;
  v21->__r_.__value_.__r.__words[2] = 0;
  v21->__r_.__value_.__r.__words[0] = 0;
  v23 = std::string::append(&v62, " ");
  v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
  v63.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v63.__r_.__value_.__l.__data_ = v24;
  v23->__r_.__value_.__l.__size_ = 0;
  v23->__r_.__value_.__r.__words[2] = 0;
  v23->__r_.__value_.__r.__words[0] = 0;
  if ((v59 & 0x80u) == 0)
    p_p = (const std::string::value_type *)&__p;
  else
    p_p = (const std::string::value_type *)__p;
  if ((v59 & 0x80u) == 0)
    v26 = v59;
  else
    v26 = *(_QWORD *)v58;
  v27 = std::string::append(&v63, p_p, v26);
  v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
  v54.__r_.__value_.__r.__words[2] = v27->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v54.__r_.__value_.__l.__data_ = v28;
  v27->__r_.__value_.__l.__size_ = 0;
  v27->__r_.__value_.__r.__words[2] = 0;
  v27->__r_.__value_.__r.__words[0] = 0;
  v29 = std::string::append(&v54, " ORDER BY ");
  v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
  v64.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v64.__r_.__value_.__l.__data_ = v30;
  v29->__r_.__value_.__l.__size_ = 0;
  v29->__r_.__value_.__r.__words[2] = 0;
  v29->__r_.__value_.__r.__words[0] = 0;
  if ((v61 & 0x80u) == 0)
    v31 = (const std::string::value_type *)v60;
  else
    v31 = (const std::string::value_type *)v60[0];
  if ((v61 & 0x80u) == 0)
    v32 = v61;
  else
    v32 = (std::string::size_type)v60[1];
  v33 = std::string::append(&v64, v31, v32);
  v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
  v65.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v65.__r_.__value_.__l.__data_ = v34;
  v33->__r_.__value_.__l.__size_ = 0;
  v33->__r_.__value_.__r.__words[2] = 0;
  v33->__r_.__value_.__r.__words[0] = 0;
  v35 = std::string::append(&v65, " DESC LIMIT ");
  v36 = *(_OWORD *)&v35->__r_.__value_.__l.__data_;
  v55.__r_.__value_.__r.__words[2] = v35->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v55.__r_.__value_.__l.__data_ = v36;
  v35->__r_.__value_.__l.__size_ = 0;
  v35->__r_.__value_.__r.__words[2] = 0;
  v35->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v49, a3);
  if ((v49.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v37 = &v49;
  else
    v37 = (std::string *)v49.__r_.__value_.__r.__words[0];
  if ((v49.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v38 = HIBYTE(v49.__r_.__value_.__r.__words[2]);
  else
    v38 = v49.__r_.__value_.__l.__size_;
  v39 = std::string::append(&v55, (const std::string::value_type *)v37, v38);
  v40 = *(_OWORD *)&v39->__r_.__value_.__l.__data_;
  v56.__r_.__value_.__r.__words[2] = v39->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v56.__r_.__value_.__l.__data_ = v40;
  v39->__r_.__value_.__l.__size_ = 0;
  v39->__r_.__value_.__r.__words[2] = 0;
  v39->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v49.__r_.__value_.__l.__data_);
  if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v55.__r_.__value_.__l.__data_);
  if (SHIBYTE(v65.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v65.__r_.__value_.__l.__data_);
  if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v64.__r_.__value_.__l.__data_);
  if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v54.__r_.__value_.__l.__data_);
  if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v63.__r_.__value_.__l.__data_);
  if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v62.__r_.__value_.__l.__data_);
  if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v53.__r_.__value_.__l.__data_);
  if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v52.__r_.__value_.__l.__data_);
  if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v50.__r_.__value_.__l.__data_);
  if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v51.__r_.__value_.__l.__data_);
  if ((v56.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v41 = (sqlite3 *)&v56;
  else
    v41 = (sqlite3 *)v56.__r_.__value_.__r.__words[0];
  CLSqliteDatabase::prepareScopedStatement(this->var0, v41, (CLSqliteFinalizingStatement **)&v55);
  v42 = v55.__r_.__value_.__r.__words[0];
  Statement = (sqlite3_stmt *)CLSqliteStatement::getStatement((CLSqliteStatement *)v55.__r_.__value_.__l.__data_);
  memset(&v55, 0, sizeof(v55));
  while (sqlite3_step(Statement) == 100)
  {
    v53.__r_.__value_.__r.__words[0] = sqlite3_column_double(Statement, 1);
    CLMicroLocationDatabaseColumns::convert_from_sql<std::string>::convert(Statement, 2, &v65);
    CLMicroLocationDatabaseColumns::convert_from_sql<std::string>::convert(Statement, 3, &v64);
    CLMicroLocationDatabaseColumns::convert_from_sql<std::string>::convert(Statement, 4, &v54);
    *a2 = *(double *)&v53.__r_.__value_.__l.__data_;
    v63.__r_.__value_.__r.__words[0] = ULMiloSqliteDatabase::_getUUIDFromStringOrNilUUID(v44, (uint64_t)&v65);
    v63.__r_.__value_.__l.__size_ = v45;
    v62.__r_.__value_.__r.__words[0] = ULMiloSqliteDatabase::_getUUIDFromStringOrNilUUID((uint64_t)v63.__r_.__value_.__l.__data_, (uint64_t)&v64);
    v62.__r_.__value_.__l.__size_ = v46;
    v47 = v55.__r_.__value_.__l.__size_;
    if (v55.__r_.__value_.__l.__size_ >= v55.__r_.__value_.__r.__words[2])
    {
      v48 = std::vector<CLMiLoLoiTable::Entry>::__emplace_back_slow_path<std::chrono::time_point<cl::chrono::CFAbsoluteTimeClock,std::chrono::duration<long double,std::ratio<1l,1l>>> &,boost::uuids::uuid,boost::uuids::uuid,std::string &>((uint64_t *)&v55, (double *)&v53, (uint64_t *)&v63, (uint64_t *)&v62, (uint64_t)&v54);
    }
    else
    {
      std::allocator<CLMiLoLoiTable::Entry>::construct[abi:ne180100]<CLMiLoLoiTable::Entry,std::chrono::time_point<cl::chrono::CFAbsoluteTimeClock,std::chrono::duration<long double,std::ratio<1l,1l>>> &,boost::uuids::uuid,boost::uuids::uuid,std::string &>((uint64_t)&v55.__r_.__value_.__r.__words[2], v55.__r_.__value_.__l.__size_, (double *)&v53, (uint64_t *)&v63, (uint64_t *)&v62, (uint64_t)&v54);
      v48 = v47 + 64;
    }
    v55.__r_.__value_.__l.__size_ = v48;
    if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v54.__r_.__value_.__l.__data_);
    if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v64.__r_.__value_.__l.__data_);
    if (SHIBYTE(v65.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v65.__r_.__value_.__l.__data_);
  }
  sqlite3_reset(Statement);
  *a4 = v55;
  memset(&v55, 0, sizeof(v55));
  v65.__r_.__value_.__r.__words[0] = (std::string::size_type)&v55;
  std::vector<CLMiLoLoiTable::Entry>::__destroy_vector::operator()[abi:ne180100]((void ***)&v65);
  if (v42)
    (*(void (**)(std::string::size_type))(*(_QWORD *)v42 + 8))(v42);
  if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v56.__r_.__value_.__l.__data_);
  if ((char)v59 < 0)
    operator delete(__p);
  if ((char)v61 < 0)
    operator delete(v60[0]);
}

void sub_241AA3C40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,uint64_t a37,void *__p,uint64_t a39,int a40,__int16 a41,char a42,char a43,uint64_t a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50)
{
  uint64_t v50;

  if (*(char *)(v50 - 73) < 0)
    operator delete(*(void **)(v50 - 96));
  if (a43 < 0)
    operator delete(__p);
  if (a36 < 0)
    operator delete(a31);
  if (a50 < 0)
    operator delete(a45);
  if (*(char *)(v50 - 193) < 0)
    operator delete(*(void **)(v50 - 216));
  _Unwind_Resume(a1);
}

void sub_241AA3F10()
{
  __cxa_end_catch();
  JUMPOUT(0x241AA3DECLL);
}

void sub_241AA3F1C(void *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  JUMPOUT(0x241AA3E40);
}

void sub_241AA3F2C()
{
  JUMPOUT(0x241AA3E40);
}

double CLMicroLocationDatabaseColumns::ColumnList<ULLoiTable::DatabaseColumns::RowId,ULLoiTable::DatabaseColumns::LastSeenTimeStamp,ULLoiTable::DatabaseColumns::LoiId,ULLoiTable::DatabaseColumns::LoiGroupId,ULLoiTable::DatabaseColumns::LoiType>::commaSeparatedColumnNames@<D0>(std::string *a1@<X8>)
{
  double result;
  std::string v3;

  memset(&v3, 0, sizeof(v3));
  CLMicroLocationDatabaseColumns::ColumnList<ULLoiTable::DatabaseColumns::RowId,ULLoiTable::DatabaseColumns::LastSeenTimeStamp,ULLoiTable::DatabaseColumns::LoiId,ULLoiTable::DatabaseColumns::LoiGroupId,ULLoiTable::DatabaseColumns::LoiType>::commaSeperatedNamesGenerator<0ul,1ul,2ul,3ul,4ul>(&v3);
  result = *(double *)&v3.__r_.__value_.__l.__data_;
  *a1 = v3;
  return result;
}

void sub_241AA3F78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void ULMiloSqliteDatabase::selectRapportEntries(ULMiloSqliteDatabase *this@<X0>, double *a2@<X2>, unsigned int a3@<W1>, std::string *a4@<X8>)
{
  std::string *v8;
  __int128 v9;
  std::string *v10;
  std::string::size_type size;
  std::string *v12;
  void *v13;
  unsigned __int8 v14;
  std::string *p_p;
  std::string::size_type v16;
  std::string *v17;
  __int128 v18;
  std::string *v19;
  __int128 v20;
  std::string *v21;
  __int128 v22;
  const std::string::value_type *v23;
  std::string::size_type v24;
  std::string *v25;
  __int128 v26;
  std::string *v27;
  __int128 v28;
  const std::string::value_type *v29;
  std::string::size_type v30;
  std::string *v31;
  __int128 v32;
  std::string *v33;
  __int128 v34;
  std::string *v35;
  std::string::size_type v36;
  std::string *v37;
  __int128 v38;
  sqlite3 *v39;
  std::string::size_type v40;
  sqlite3_stmt *Statement;
  sqlite3_int64 v42;
  std::string::size_type v43;
  std::string::size_type v44;
  std::string::size_type v45;
  std::string v46;
  std::string __p;
  std::string v48;
  std::string v49;
  std::string v50;
  std::string v51;
  std::string v52;
  std::string v53;
  void *v54;
  _BYTE v55[15];
  unsigned __int8 v56;
  void *v57[2];
  unsigned __int8 v58;
  std::string v59;
  std::string v60;
  std::string v61;
  uint64_t v62;

  v62 = *MEMORY[0x24BDAC8D0];
  std::string::basic_string[abi:ne180100]<0>(v57, "RowId");
  std::string::basic_string[abi:ne180100]<0>(&v54, "");
  if (*a2 > 0.0)
  {
    std::operator+<char>();
    v8 = std::string::append(&v53, " < ");
    v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
    v59.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v59.__r_.__value_.__l.__data_ = v9;
    v8->__r_.__value_.__l.__size_ = 0;
    v8->__r_.__value_.__r.__words[2] = 0;
    v8->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v52, *a2);
    if ((v52.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v10 = &v52;
    else
      v10 = (std::string *)v52.__r_.__value_.__r.__words[0];
    if ((v52.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v52.__r_.__value_.__r.__words[2]);
    else
      size = v52.__r_.__value_.__l.__size_;
    v12 = std::string::append(&v59, (const std::string::value_type *)v10, size);
    v13 = (void *)v12->__r_.__value_.__r.__words[0];
    v61.__r_.__value_.__r.__words[0] = v12->__r_.__value_.__l.__size_;
    *(std::string::size_type *)((char *)v61.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v12->__r_.__value_.__r.__words[1] + 7);
    v14 = HIBYTE(v12->__r_.__value_.__r.__words[2]);
    v12->__r_.__value_.__l.__size_ = 0;
    v12->__r_.__value_.__r.__words[2] = 0;
    v12->__r_.__value_.__r.__words[0] = 0;
    if ((char)v56 < 0)
      operator delete(v54);
    v54 = v13;
    *(_QWORD *)v55 = v61.__r_.__value_.__r.__words[0];
    *(_QWORD *)&v55[7] = *(std::string::size_type *)((char *)v61.__r_.__value_.__r.__words + 7);
    v56 = v14;
    if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v52.__r_.__value_.__l.__data_);
    if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v59.__r_.__value_.__l.__data_);
    if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v53.__r_.__value_.__l.__data_);
  }
  *((_BYTE *)&v48.__r_.__value_.__s + 23) = 7;
  strcpy((char *)&v48, "SELECT ");
  CLMicroLocationDatabaseColumns::ColumnList<ULRapportTable::DatabaseColumns::GenerationTimestamp,ULRapportTable::DatabaseColumns::RTLOIType,ULRapportTable::DatabaseColumns::Device,ULRapportTable::DatabaseColumns::RowId,ULRapportTable::DatabaseColumns::RtLoiGroupId>::commaSeparatedColumnNames(&__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v16 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v16 = __p.__r_.__value_.__l.__size_;
  v17 = std::string::append(&v48, (const std::string::value_type *)p_p, v16);
  v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
  v49.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v49.__r_.__value_.__l.__data_ = v18;
  v17->__r_.__value_.__l.__size_ = 0;
  v17->__r_.__value_.__r.__words[2] = 0;
  v17->__r_.__value_.__r.__words[0] = 0;
  v19 = std::string::append(&v49, " FROM ");
  v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  v50.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  v21 = std::string::append(&v50, "MicroLocationRapport");
  v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
  v60.__r_.__value_.__r.__words[2] = v21->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v60.__r_.__value_.__l.__data_ = v22;
  v21->__r_.__value_.__l.__size_ = 0;
  v21->__r_.__value_.__r.__words[2] = 0;
  v21->__r_.__value_.__r.__words[0] = 0;
  if ((v56 & 0x80u) == 0)
    v23 = (const std::string::value_type *)&v54;
  else
    v23 = (const std::string::value_type *)v54;
  if ((v56 & 0x80u) == 0)
    v24 = v56;
  else
    v24 = *(_QWORD *)v55;
  v25 = std::string::append(&v60, v23, v24);
  v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
  v51.__r_.__value_.__r.__words[2] = v25->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v51.__r_.__value_.__l.__data_ = v26;
  v25->__r_.__value_.__l.__size_ = 0;
  v25->__r_.__value_.__r.__words[2] = 0;
  v25->__r_.__value_.__r.__words[0] = 0;
  v27 = std::string::append(&v51, " ORDER BY ");
  v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
  v61.__r_.__value_.__r.__words[2] = v27->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v61.__r_.__value_.__l.__data_ = v28;
  v27->__r_.__value_.__l.__size_ = 0;
  v27->__r_.__value_.__r.__words[2] = 0;
  v27->__r_.__value_.__r.__words[0] = 0;
  if ((v58 & 0x80u) == 0)
    v29 = (const std::string::value_type *)v57;
  else
    v29 = (const std::string::value_type *)v57[0];
  if ((v58 & 0x80u) == 0)
    v30 = v58;
  else
    v30 = (std::string::size_type)v57[1];
  v31 = std::string::append(&v61, v29, v30);
  v32 = *(_OWORD *)&v31->__r_.__value_.__l.__data_;
  v52.__r_.__value_.__r.__words[2] = v31->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v52.__r_.__value_.__l.__data_ = v32;
  v31->__r_.__value_.__l.__size_ = 0;
  v31->__r_.__value_.__r.__words[2] = 0;
  v31->__r_.__value_.__r.__words[0] = 0;
  v33 = std::string::append(&v52, " DESC LIMIT ");
  v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
  v59.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v59.__r_.__value_.__l.__data_ = v34;
  v33->__r_.__value_.__l.__size_ = 0;
  v33->__r_.__value_.__r.__words[2] = 0;
  v33->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v46, a3);
  if ((v46.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v35 = &v46;
  else
    v35 = (std::string *)v46.__r_.__value_.__r.__words[0];
  if ((v46.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v36 = HIBYTE(v46.__r_.__value_.__r.__words[2]);
  else
    v36 = v46.__r_.__value_.__l.__size_;
  v37 = std::string::append(&v59, (const std::string::value_type *)v35, v36);
  v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
  v53.__r_.__value_.__r.__words[2] = v37->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v53.__r_.__value_.__l.__data_ = v38;
  v37->__r_.__value_.__l.__size_ = 0;
  v37->__r_.__value_.__r.__words[2] = 0;
  v37->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v46.__r_.__value_.__l.__data_);
  if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v59.__r_.__value_.__l.__data_);
  if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v52.__r_.__value_.__l.__data_);
  if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v61.__r_.__value_.__l.__data_);
  if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v51.__r_.__value_.__l.__data_);
  if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v60.__r_.__value_.__l.__data_);
  if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v50.__r_.__value_.__l.__data_);
  if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v49.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v48.__r_.__value_.__l.__data_);
  if ((v53.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v39 = (sqlite3 *)&v53;
  else
    v39 = (sqlite3 *)v53.__r_.__value_.__r.__words[0];
  CLSqliteDatabase::prepareScopedStatement(this->var0, v39, (CLSqliteFinalizingStatement **)&v59);
  v40 = v59.__r_.__value_.__r.__words[0];
  Statement = (sqlite3_stmt *)CLSqliteStatement::getStatement((CLSqliteStatement *)v59.__r_.__value_.__l.__data_);
  memset(&v52, 0, sizeof(v52));
  while (sqlite3_step(Statement) == 100)
  {
    CLMicroLocationDatabaseColumns::convert_from_sql<std::string>::convert(Statement, 1, &v61);
    CLMicroLocationDatabaseColumns::convert_from_sql<CLMicroLocationProto::RapportDevice>::convert<CLMicroLocationProto::RapportDevice>(Statement, 2, &v59);
    v50.__r_.__value_.__r.__words[0] = sqlite3_column_double(Statement, 0);
    CLMicroLocationDatabaseColumns::convert_from_sql<std::string>::convert(Statement, 4, &v51);
    v42 = sqlite3_column_int64(Statement, 3);
    *a2 = (double)v42;
    v60.__r_.__value_.__r.__words[0] = ULMiloSqliteDatabase::_getUUIDFromStringOrNilUUID(v42, (uint64_t)&v51);
    v60.__r_.__value_.__l.__size_ = v43;
    v44 = v52.__r_.__value_.__l.__size_;
    if (v52.__r_.__value_.__l.__size_ >= v52.__r_.__value_.__r.__words[2])
    {
      v45 = std::vector<CLMicroLocationRapportTable::Entry>::__emplace_back_slow_path<std::string &,CLMicroLocationProto::RapportDevice &,boost::uuids::uuid,std::chrono::time_point<cl::chrono::CFAbsoluteTimeClock,std::chrono::duration<long double,std::ratio<1l,1l>>> &>((uint64_t *)&v52, (uint64_t)&v61, (uint64_t)&v59, (uint64_t)&v60, (uint64_t)&v50);
    }
    else
    {
      std::allocator<CLMicroLocationRapportTable::Entry>::construct[abi:ne180100]<CLMicroLocationRapportTable::Entry,std::string &,CLMicroLocationProto::RapportDevice &,boost::uuids::uuid,std::chrono::time_point<cl::chrono::CFAbsoluteTimeClock,std::chrono::duration<long double,std::ratio<1l,1l>>> &>((uint64_t)&v52.__r_.__value_.__r.__words[2], v52.__r_.__value_.__l.__size_, (uint64_t)&v61, (uint64_t)&v59, (uint64_t)&v60, (uint64_t)&v50);
      v45 = v44 + 80;
    }
    v52.__r_.__value_.__l.__size_ = v45;
    if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v51.__r_.__value_.__l.__data_);
    CLMicroLocationProto::RapportDevice::~RapportDevice((CLMicroLocationProto::RapportDevice *)&v59);
    if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v61.__r_.__value_.__l.__data_);
  }
  sqlite3_reset(Statement);
  *a4 = v52;
  memset(&v52, 0, sizeof(v52));
  v59.__r_.__value_.__r.__words[0] = (std::string::size_type)&v52;
  std::vector<CLMicroLocationRapportTable::Entry>::__destroy_vector::operator()[abi:ne180100]((void ***)&v59);
  if (v40)
    (*(void (**)(std::string::size_type))(*(_QWORD *)v40 + 8))(v40);
  if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v53.__r_.__value_.__l.__data_);
  if ((char)v56 < 0)
    operator delete(v54);
  if ((char)v58 < 0)
    operator delete(v57[0]);
}

void sub_241AA4518(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47,uint64_t a48,void *__p,uint64_t a50,int a51,__int16 a52,char a53,char a54,uint64_t a55,void *a56,uint64_t a57,int a58,__int16 a59,char a60,char a61)
{
  uint64_t v61;

  if (a54 < 0)
    operator delete(__p);
  if (*(char *)(v61 - 137) < 0)
    operator delete(*(void **)(v61 - 160));
  if (a61 < 0)
    operator delete(a56);
  if (*(char *)(v61 - 185) < 0)
    operator delete(*(void **)(v61 - 208));
  if (*(char *)(v61 - 161) < 0)
    operator delete(*(void **)(v61 - 184));
  _Unwind_Resume(exception_object);
}

void sub_241AA47B8()
{
  __cxa_end_catch();
  JUMPOUT(0x241AA469CLL);
}

void sub_241AA47C4(void *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  JUMPOUT(0x241AA46F0);
}

void sub_241AA47D4()
{
  JUMPOUT(0x241AA46F0);
}

double CLMicroLocationDatabaseColumns::ColumnList<ULRapportTable::DatabaseColumns::GenerationTimestamp,ULRapportTable::DatabaseColumns::RTLOIType,ULRapportTable::DatabaseColumns::Device,ULRapportTable::DatabaseColumns::RowId,ULRapportTable::DatabaseColumns::RtLoiGroupId>::commaSeparatedColumnNames@<D0>(std::string *a1@<X8>)
{
  double result;
  std::string v3;

  memset(&v3, 0, sizeof(v3));
  CLMicroLocationDatabaseColumns::ColumnList<ULRapportTable::DatabaseColumns::GenerationTimestamp,ULRapportTable::DatabaseColumns::RTLOIType,ULRapportTable::DatabaseColumns::Device,ULRapportTable::DatabaseColumns::RowId,ULRapportTable::DatabaseColumns::RtLoiGroupId>::commaSeperatedNamesGenerator<0ul,1ul,2ul,3ul,4ul>(&v3);
  result = *(double *)&v3.__r_.__value_.__l.__data_;
  *a1 = v3;
  return result;
}

void sub_241AA4820(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void ULMiloSqliteDatabase::selectAssociatedStateEntries(ULMiloSqliteDatabase *this@<X0>, double *a2@<X2>, unsigned int a3@<W1>, std::string *a4@<X8>)
{
  std::string *v8;
  __int128 v9;
  std::string *v10;
  std::string::size_type size;
  std::string *v12;
  void *v13;
  unsigned __int8 v14;
  std::string *p_p;
  std::string::size_type v16;
  std::string *v17;
  __int128 v18;
  std::string *v19;
  __int128 v20;
  std::string *v21;
  __int128 v22;
  const std::string::value_type *v23;
  std::string::size_type v24;
  std::string *v25;
  __int128 v26;
  std::string *v27;
  __int128 v28;
  const std::string::value_type *v29;
  std::string::size_type v30;
  std::string *v31;
  __int128 v32;
  std::string *v33;
  __int128 v34;
  std::string *v35;
  std::string::size_type v36;
  std::string *v37;
  __int128 v38;
  sqlite3 *v39;
  std::string::size_type v40;
  sqlite3_stmt *Statement;
  std::string::size_type v42;
  sqlite3_int64 v43;
  std::string::size_type v44;
  std::string::size_type v45;
  std::string v46;
  std::string __p;
  std::string v48;
  std::string v49;
  std::string v50;
  std::string v51;
  std::string v52;
  std::string v53;
  void *v54;
  _BYTE v55[15];
  unsigned __int8 v56;
  void *v57[2];
  unsigned __int8 v58;
  std::string v59;
  std::string v60;
  std::string v61;
  uint64_t v62;

  v62 = *MEMORY[0x24BDAC8D0];
  std::string::basic_string[abi:ne180100]<0>(v57, "Timestamp");
  std::string::basic_string[abi:ne180100]<0>(&v54, "");
  if (*a2 > 0.0)
  {
    std::operator+<char>();
    v8 = std::string::append(&v52, " < ");
    v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
    v53.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v53.__r_.__value_.__l.__data_ = v9;
    v8->__r_.__value_.__l.__size_ = 0;
    v8->__r_.__value_.__r.__words[2] = 0;
    v8->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v61, *a2);
    if ((v61.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v10 = &v61;
    else
      v10 = (std::string *)v61.__r_.__value_.__r.__words[0];
    if ((v61.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v61.__r_.__value_.__r.__words[2]);
    else
      size = v61.__r_.__value_.__l.__size_;
    v12 = std::string::append(&v53, (const std::string::value_type *)v10, size);
    v13 = (void *)v12->__r_.__value_.__r.__words[0];
    v60.__r_.__value_.__r.__words[0] = v12->__r_.__value_.__l.__size_;
    *(std::string::size_type *)((char *)v60.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v12->__r_.__value_.__r.__words[1] + 7);
    v14 = HIBYTE(v12->__r_.__value_.__r.__words[2]);
    v12->__r_.__value_.__l.__size_ = 0;
    v12->__r_.__value_.__r.__words[2] = 0;
    v12->__r_.__value_.__r.__words[0] = 0;
    if ((char)v56 < 0)
      operator delete(v54);
    v54 = v13;
    *(_QWORD *)v55 = v60.__r_.__value_.__r.__words[0];
    *(_QWORD *)&v55[7] = *(std::string::size_type *)((char *)v60.__r_.__value_.__r.__words + 7);
    v56 = v14;
    if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v61.__r_.__value_.__l.__data_);
    if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v53.__r_.__value_.__l.__data_);
    if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v52.__r_.__value_.__l.__data_);
  }
  *((_BYTE *)&v48.__r_.__value_.__s + 23) = 7;
  strcpy((char *)&v48, "SELECT ");
  CLMicroLocationDatabaseColumns::ColumnList<ULAssociatedStateTable::DatabaseColumns::LoiType,ULAssociatedStateTable::DatabaseColumns::LoiGroupId,ULAssociatedStateTable::DatabaseColumns::Timestamp,ULAssociatedStateTable::DatabaseColumns::IsAssociated,ULAssociatedStateTable::DatabaseColumns::MacAddress,ULAssociatedStateTable::DatabaseColumns::Band,ULAssociatedStateTable::DatabaseColumns::Channel,ULAssociatedStateTable::DatabaseColumns::RowId>::commaSeparatedColumnNames(&__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v16 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v16 = __p.__r_.__value_.__l.__size_;
  v17 = std::string::append(&v48, (const std::string::value_type *)p_p, v16);
  v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
  v49.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v49.__r_.__value_.__l.__data_ = v18;
  v17->__r_.__value_.__l.__size_ = 0;
  v17->__r_.__value_.__r.__words[2] = 0;
  v17->__r_.__value_.__r.__words[0] = 0;
  v19 = std::string::append(&v49, " FROM ");
  v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  v50.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  v21 = std::string::append(&v50, "MicroLocationAssociatedState");
  v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
  v51.__r_.__value_.__r.__words[2] = v21->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v51.__r_.__value_.__l.__data_ = v22;
  v21->__r_.__value_.__l.__size_ = 0;
  v21->__r_.__value_.__r.__words[2] = 0;
  v21->__r_.__value_.__r.__words[0] = 0;
  if ((v56 & 0x80u) == 0)
    v23 = (const std::string::value_type *)&v54;
  else
    v23 = (const std::string::value_type *)v54;
  if ((v56 & 0x80u) == 0)
    v24 = v56;
  else
    v24 = *(_QWORD *)v55;
  v25 = std::string::append(&v51, v23, v24);
  v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
  v59.__r_.__value_.__r.__words[2] = v25->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v59.__r_.__value_.__l.__data_ = v26;
  v25->__r_.__value_.__l.__size_ = 0;
  v25->__r_.__value_.__r.__words[2] = 0;
  v25->__r_.__value_.__r.__words[0] = 0;
  v27 = std::string::append(&v59, " ORDER BY ");
  v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
  v60.__r_.__value_.__r.__words[2] = v27->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v60.__r_.__value_.__l.__data_ = v28;
  v27->__r_.__value_.__l.__size_ = 0;
  v27->__r_.__value_.__r.__words[2] = 0;
  v27->__r_.__value_.__r.__words[0] = 0;
  if ((v58 & 0x80u) == 0)
    v29 = (const std::string::value_type *)v57;
  else
    v29 = (const std::string::value_type *)v57[0];
  if ((v58 & 0x80u) == 0)
    v30 = v58;
  else
    v30 = (std::string::size_type)v57[1];
  v31 = std::string::append(&v60, v29, v30);
  v32 = *(_OWORD *)&v31->__r_.__value_.__l.__data_;
  v61.__r_.__value_.__r.__words[2] = v31->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v61.__r_.__value_.__l.__data_ = v32;
  v31->__r_.__value_.__l.__size_ = 0;
  v31->__r_.__value_.__r.__words[2] = 0;
  v31->__r_.__value_.__r.__words[0] = 0;
  v33 = std::string::append(&v61, " DESC LIMIT ");
  v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
  v52.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v52.__r_.__value_.__l.__data_ = v34;
  v33->__r_.__value_.__l.__size_ = 0;
  v33->__r_.__value_.__r.__words[2] = 0;
  v33->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v46, a3);
  if ((v46.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v35 = &v46;
  else
    v35 = (std::string *)v46.__r_.__value_.__r.__words[0];
  if ((v46.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v36 = HIBYTE(v46.__r_.__value_.__r.__words[2]);
  else
    v36 = v46.__r_.__value_.__l.__size_;
  v37 = std::string::append(&v52, (const std::string::value_type *)v35, v36);
  v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
  v53.__r_.__value_.__r.__words[2] = v37->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v53.__r_.__value_.__l.__data_ = v38;
  v37->__r_.__value_.__l.__size_ = 0;
  v37->__r_.__value_.__r.__words[2] = 0;
  v37->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v46.__r_.__value_.__l.__data_);
  if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v52.__r_.__value_.__l.__data_);
  if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v61.__r_.__value_.__l.__data_);
  if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v60.__r_.__value_.__l.__data_);
  if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v59.__r_.__value_.__l.__data_);
  if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v51.__r_.__value_.__l.__data_);
  if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v50.__r_.__value_.__l.__data_);
  if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v49.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v48.__r_.__value_.__l.__data_);
  if ((v53.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v39 = (sqlite3 *)&v53;
  else
    v39 = (sqlite3 *)v53.__r_.__value_.__r.__words[0];
  CLSqliteDatabase::prepareScopedStatement(this->var0, v39, (CLSqliteFinalizingStatement **)&v52);
  v40 = v52.__r_.__value_.__r.__words[0];
  Statement = (sqlite3_stmt *)CLSqliteStatement::getStatement((CLSqliteStatement *)v52.__r_.__value_.__l.__data_);
  memset(&v52, 0, sizeof(v52));
  while (sqlite3_step(Statement) == 100)
  {
    CLMicroLocationDatabaseColumns::convert_from_sql<std::string>::convert(Statement, 0, &v61);
    *(_OWORD *)&v59.__r_.__value_.__l.__data_ = 0uLL;
    v59.__r_.__value_.__r.__words[0] = CLMicroLocationDatabaseColumns::convert_from_sql<boost::uuids::uuid>::convert(Statement, 1);
    v59.__r_.__value_.__l.__size_ = v42;
    v51.__r_.__value_.__r.__words[0] = sqlite3_column_double(Statement, 2);
    __p.__r_.__value_.__s.__data_[0] = 0;
    __p.__r_.__value_.__s.__data_[0] = CLMicroLocationDatabaseColumns::convert_from_sql<BOOL>::convert<BOOL>(Statement, 3);
    CLMicroLocationDatabaseColumns::convert_from_sql<std::string>::convert(Statement, 4, &v60);
    v43 = sqlite3_column_int64(Statement, 5);
    v50.__r_.__value_.__r.__words[0] = 0;
    v50.__r_.__value_.__r.__words[0] = sqlite3_column_int64(Statement, 6);
    *a2 = *(double *)&v51.__r_.__value_.__l.__data_;
    v49.__r_.__value_.__r.__words[0] = CLMacAddress::newFromStr((char *)&v60);
    LODWORD(v48.__r_.__value_.__l.__data_) = v43;
    v44 = v52.__r_.__value_.__l.__size_;
    if (v52.__r_.__value_.__l.__size_ >= v52.__r_.__value_.__r.__words[2])
    {
      v45 = std::vector<CLMicroLocationAssociatedStateTable::Entry>::__emplace_back_slow_path<std::string &,boost::uuids::uuid &,std::chrono::time_point<cl::chrono::CFAbsoluteTimeClock,std::chrono::duration<long double,std::ratio<1l,1l>>> &,BOOL &,CLMacAddress,CLMicroLocationAssociatedStateTable::Entry::Band,long long &>((uint64_t *)&v52, (uint64_t)&v61, (uint64_t)&v59, (uint64_t)&v51, (unsigned __int8 *)&__p, (uint64_t)&v49, (unsigned int *)&v48, (unsigned int *)&v50);
    }
    else
    {
      CLMicroLocationAssociatedStateTable::Entry::Entry(v52.__r_.__value_.__l.__size_, &v61, &v59, &v51, __p.__r_.__value_.__s.__data_[0], &v49, v43, LODWORD(v50.__r_.__value_.__l.__data_));
      v45 = v44 + 72;
    }
    v52.__r_.__value_.__l.__size_ = v45;
    if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v60.__r_.__value_.__l.__data_);
    if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v61.__r_.__value_.__l.__data_);
  }
  sqlite3_reset(Statement);
  *a4 = v52;
  memset(&v52, 0, sizeof(v52));
  v61.__r_.__value_.__r.__words[0] = (std::string::size_type)&v52;
  std::vector<CLMicroLocationAssociatedStateTable::Entry>::__destroy_vector::operator()[abi:ne180100]((void ***)&v61);
  if (v40)
    (*(void (**)(std::string::size_type))(*(_QWORD *)v40 + 8))(v40);
  if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v53.__r_.__value_.__l.__data_);
  if ((char)v56 < 0)
    operator delete(v54);
  if ((char)v58 < 0)
    operator delete(v57[0]);
}

void sub_241AA4DF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47,uint64_t a48,void *a49,uint64_t a50,int a51,__int16 a52,char a53,char a54,uint64_t a55,void *__p,uint64_t a57,int a58,__int16 a59,char a60,char a61)
{
  uint64_t v61;

  if (*(char *)(v61 - 73) < 0)
    operator delete(*(void **)(v61 - 96));
  if (a61 < 0)
    operator delete(__p);
  if (a54 < 0)
    operator delete(a49);
  if (*(char *)(v61 - 185) < 0)
    operator delete(*(void **)(v61 - 208));
  if (*(char *)(v61 - 161) < 0)
    operator delete(*(void **)(v61 - 184));
  _Unwind_Resume(exception_object);
}

double CLMicroLocationDatabaseColumns::ColumnList<ULAssociatedStateTable::DatabaseColumns::LoiType,ULAssociatedStateTable::DatabaseColumns::LoiGroupId,ULAssociatedStateTable::DatabaseColumns::Timestamp,ULAssociatedStateTable::DatabaseColumns::IsAssociated,ULAssociatedStateTable::DatabaseColumns::MacAddress,ULAssociatedStateTable::DatabaseColumns::Band,ULAssociatedStateTable::DatabaseColumns::Channel,ULAssociatedStateTable::DatabaseColumns::RowId>::commaSeparatedColumnNames@<D0>(std::string *a1@<X8>)
{
  double result;
  std::string v3;

  memset(&v3, 0, sizeof(v3));
  CLMicroLocationDatabaseColumns::ColumnList<ULAssociatedStateTable::DatabaseColumns::LoiType,ULAssociatedStateTable::DatabaseColumns::LoiGroupId,ULAssociatedStateTable::DatabaseColumns::Timestamp,ULAssociatedStateTable::DatabaseColumns::IsAssociated,ULAssociatedStateTable::DatabaseColumns::MacAddress,ULAssociatedStateTable::DatabaseColumns::Band,ULAssociatedStateTable::DatabaseColumns::Channel,ULAssociatedStateTable::DatabaseColumns::RowId>::commaSeperatedNamesGenerator<0ul,1ul,2ul,3ul,4ul,5ul,6ul,7ul>(&v3);
  result = *(double *)&v3.__r_.__value_.__l.__data_;
  *a1 = v3;
  return result;
}

void sub_241AA510C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void ULMiloSqliteDatabase::selectBluetoothIdentityEntries(ULMiloSqliteDatabase *this@<X0>, double *a2@<X2>, unsigned int a3@<W1>, std::string *a4@<X8>)
{
  std::string *v8;
  __int128 v9;
  std::string *v10;
  std::string::size_type size;
  std::string *v12;
  void *v13;
  unsigned __int8 v14;
  std::string *p_p;
  std::string::size_type v16;
  std::string *v17;
  __int128 v18;
  std::string *v19;
  __int128 v20;
  std::string *v21;
  __int128 v22;
  const std::string::value_type *v23;
  std::string::size_type v24;
  std::string *v25;
  __int128 v26;
  std::string *v27;
  __int128 v28;
  const std::string::value_type *v29;
  std::string::size_type v30;
  std::string *v31;
  __int128 v32;
  std::string *v33;
  __int128 v34;
  std::string *v35;
  std::string::size_type v36;
  std::string *v37;
  __int128 v38;
  sqlite3 *v39;
  std::string::size_type v40;
  sqlite3_stmt *Statement;
  uint64_t v42;
  std::string::size_type v43;
  std::string::size_type v44;
  std::string::size_type v45;
  std::string v46;
  std::string __p;
  std::string v48;
  std::string v49;
  std::string v50;
  std::string v51;
  std::string v52;
  std::string v53;
  void *v54;
  _BYTE v55[15];
  unsigned __int8 v56;
  void *v57[2];
  unsigned __int8 v58;
  std::string v59;
  std::string v60;
  std::string v61;
  uint64_t v62;

  v62 = *MEMORY[0x24BDAC8D0];
  std::string::basic_string[abi:ne180100]<0>(v57, "LastSeenTimeStamp");
  std::string::basic_string[abi:ne180100]<0>(&v54, "");
  if (*a2 > 0.0)
  {
    std::operator+<char>();
    v8 = std::string::append(&v52, " < ");
    v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
    v53.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v53.__r_.__value_.__l.__data_ = v9;
    v8->__r_.__value_.__l.__size_ = 0;
    v8->__r_.__value_.__r.__words[2] = 0;
    v8->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v61, *a2);
    if ((v61.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v10 = &v61;
    else
      v10 = (std::string *)v61.__r_.__value_.__r.__words[0];
    if ((v61.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v61.__r_.__value_.__r.__words[2]);
    else
      size = v61.__r_.__value_.__l.__size_;
    v12 = std::string::append(&v53, (const std::string::value_type *)v10, size);
    v13 = (void *)v12->__r_.__value_.__r.__words[0];
    v60.__r_.__value_.__r.__words[0] = v12->__r_.__value_.__l.__size_;
    *(std::string::size_type *)((char *)v60.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v12->__r_.__value_.__r.__words[1] + 7);
    v14 = HIBYTE(v12->__r_.__value_.__r.__words[2]);
    v12->__r_.__value_.__l.__size_ = 0;
    v12->__r_.__value_.__r.__words[2] = 0;
    v12->__r_.__value_.__r.__words[0] = 0;
    if ((char)v56 < 0)
      operator delete(v54);
    v54 = v13;
    *(_QWORD *)v55 = v60.__r_.__value_.__r.__words[0];
    *(_QWORD *)&v55[7] = *(std::string::size_type *)((char *)v60.__r_.__value_.__r.__words + 7);
    v56 = v14;
    if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v61.__r_.__value_.__l.__data_);
    if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v53.__r_.__value_.__l.__data_);
    if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v52.__r_.__value_.__l.__data_);
  }
  *((_BYTE *)&v48.__r_.__value_.__s + 23) = 7;
  strcpy((char *)&v48, "SELECT ");
  CLMicroLocationDatabaseColumns::ColumnList<ULBlueToothIdentityTable::DatabaseColumns::RowId,ULBlueToothIdentityTable::DatabaseColumns::LastSeenTimeStamp,ULBlueToothIdentityTable::DatabaseColumns::BluetoothId,ULBlueToothIdentityTable::DatabaseColumns::DeviceName,ULBlueToothIdentityTable::DatabaseColumns::StableIdentifier>::commaSeparatedColumnNames(&__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v16 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v16 = __p.__r_.__value_.__l.__size_;
  v17 = std::string::append(&v48, (const std::string::value_type *)p_p, v16);
  v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
  v49.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v49.__r_.__value_.__l.__data_ = v18;
  v17->__r_.__value_.__l.__size_ = 0;
  v17->__r_.__value_.__r.__words[2] = 0;
  v17->__r_.__value_.__r.__words[0] = 0;
  v19 = std::string::append(&v49, " FROM ");
  v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  v50.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  v21 = std::string::append(&v50, "MicroLocationBluetoothIdentityTable");
  v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
  v59.__r_.__value_.__r.__words[2] = v21->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v59.__r_.__value_.__l.__data_ = v22;
  v21->__r_.__value_.__l.__size_ = 0;
  v21->__r_.__value_.__r.__words[2] = 0;
  v21->__r_.__value_.__r.__words[0] = 0;
  if ((v56 & 0x80u) == 0)
    v23 = (const std::string::value_type *)&v54;
  else
    v23 = (const std::string::value_type *)v54;
  if ((v56 & 0x80u) == 0)
    v24 = v56;
  else
    v24 = *(_QWORD *)v55;
  v25 = std::string::append(&v59, v23, v24);
  v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
  v51.__r_.__value_.__r.__words[2] = v25->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v51.__r_.__value_.__l.__data_ = v26;
  v25->__r_.__value_.__l.__size_ = 0;
  v25->__r_.__value_.__r.__words[2] = 0;
  v25->__r_.__value_.__r.__words[0] = 0;
  v27 = std::string::append(&v51, " ORDER BY ");
  v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
  v60.__r_.__value_.__r.__words[2] = v27->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v60.__r_.__value_.__l.__data_ = v28;
  v27->__r_.__value_.__l.__size_ = 0;
  v27->__r_.__value_.__r.__words[2] = 0;
  v27->__r_.__value_.__r.__words[0] = 0;
  if ((v58 & 0x80u) == 0)
    v29 = (const std::string::value_type *)v57;
  else
    v29 = (const std::string::value_type *)v57[0];
  if ((v58 & 0x80u) == 0)
    v30 = v58;
  else
    v30 = (std::string::size_type)v57[1];
  v31 = std::string::append(&v60, v29, v30);
  v32 = *(_OWORD *)&v31->__r_.__value_.__l.__data_;
  v61.__r_.__value_.__r.__words[2] = v31->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v61.__r_.__value_.__l.__data_ = v32;
  v31->__r_.__value_.__l.__size_ = 0;
  v31->__r_.__value_.__r.__words[2] = 0;
  v31->__r_.__value_.__r.__words[0] = 0;
  v33 = std::string::append(&v61, " DESC LIMIT ");
  v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
  v52.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v52.__r_.__value_.__l.__data_ = v34;
  v33->__r_.__value_.__l.__size_ = 0;
  v33->__r_.__value_.__r.__words[2] = 0;
  v33->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v46, a3);
  if ((v46.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v35 = &v46;
  else
    v35 = (std::string *)v46.__r_.__value_.__r.__words[0];
  if ((v46.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v36 = HIBYTE(v46.__r_.__value_.__r.__words[2]);
  else
    v36 = v46.__r_.__value_.__l.__size_;
  v37 = std::string::append(&v52, (const std::string::value_type *)v35, v36);
  v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
  v53.__r_.__value_.__r.__words[2] = v37->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v53.__r_.__value_.__l.__data_ = v38;
  v37->__r_.__value_.__l.__size_ = 0;
  v37->__r_.__value_.__r.__words[2] = 0;
  v37->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v46.__r_.__value_.__l.__data_);
  if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v52.__r_.__value_.__l.__data_);
  if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v61.__r_.__value_.__l.__data_);
  if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v60.__r_.__value_.__l.__data_);
  if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v51.__r_.__value_.__l.__data_);
  if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v59.__r_.__value_.__l.__data_);
  if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v50.__r_.__value_.__l.__data_);
  if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v49.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v48.__r_.__value_.__l.__data_);
  if ((v53.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v39 = (sqlite3 *)&v53;
  else
    v39 = (sqlite3 *)v53.__r_.__value_.__r.__words[0];
  CLSqliteDatabase::prepareScopedStatement(this->var0, v39, (CLSqliteFinalizingStatement **)&v52);
  v40 = v52.__r_.__value_.__r.__words[0];
  Statement = (sqlite3_stmt *)CLSqliteStatement::getStatement((CLSqliteStatement *)v52.__r_.__value_.__l.__data_);
  memset(&v52, 0, sizeof(v52));
  while (sqlite3_step(Statement) == 100)
  {
    v50.__r_.__value_.__r.__words[0] = sqlite3_column_double(Statement, 1);
    CLMicroLocationDatabaseColumns::convert_from_sql<std::string>::convert(Statement, 2, &v61);
    CLMicroLocationDatabaseColumns::convert_from_sql<std::string>::convert(Statement, 3, &v60);
    CLMicroLocationDatabaseColumns::convert_from_sql<std::string>::convert(Statement, 4, &v51);
    *a2 = *(double *)&v50.__r_.__value_.__l.__data_;
    v59.__r_.__value_.__r.__words[0] = ULMiloSqliteDatabase::_getUUIDFromStringOrNilUUID(v42, (uint64_t)&v61);
    v59.__r_.__value_.__l.__size_ = v43;
    v44 = v52.__r_.__value_.__l.__size_;
    if (v52.__r_.__value_.__l.__size_ >= v52.__r_.__value_.__r.__words[2])
    {
      v45 = std::vector<CLMicroLocationBluetoothIdentityTable::Entry>::__emplace_back_slow_path<boost::uuids::uuid,std::string &,std::string &,std::chrono::time_point<cl::chrono::CFAbsoluteTimeClock,std::chrono::duration<long double,std::ratio<1l,1l>>> &>((uint64_t *)&v52, (uint64_t *)&v59, (uint64_t)&v60, (uint64_t)&v51, (double *)&v50);
    }
    else
    {
      std::allocator<CLMicroLocationBluetoothIdentityTable::Entry>::construct[abi:ne180100]<CLMicroLocationBluetoothIdentityTable::Entry,boost::uuids::uuid,std::string &,std::string &,std::chrono::time_point<cl::chrono::CFAbsoluteTimeClock,std::chrono::duration<long double,std::ratio<1l,1l>>> &>((uint64_t)&v52.__r_.__value_.__r.__words[2], v52.__r_.__value_.__l.__size_, (uint64_t *)&v59, (uint64_t)&v60, (uint64_t)&v51, (double *)&v50);
      v45 = v44 + 72;
    }
    v52.__r_.__value_.__l.__size_ = v45;
    if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v51.__r_.__value_.__l.__data_);
    if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v60.__r_.__value_.__l.__data_);
    if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v61.__r_.__value_.__l.__data_);
  }
  sqlite3_reset(Statement);
  *a4 = v52;
  memset(&v52, 0, sizeof(v52));
  v61.__r_.__value_.__r.__words[0] = (std::string::size_type)&v52;
  std::vector<CLMicroLocationBluetoothIdentityTable::Entry>::__destroy_vector::operator()[abi:ne180100]((void ***)&v61);
  if (v40)
    (*(void (**)(std::string::size_type))(*(_QWORD *)v40 + 8))(v40);
  if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v53.__r_.__value_.__l.__data_);
  if ((char)v56 < 0)
    operator delete(v54);
  if ((char)v58 < 0)
    operator delete(v57[0]);
}

void sub_241AA56A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47,uint64_t a48,void *a49,uint64_t a50,int a51,__int16 a52,char a53,char a54,uint64_t a55,void *__p,uint64_t a57,int a58,__int16 a59,char a60,char a61)
{
  uint64_t v61;

  if (*(char *)(v61 - 73) < 0)
    operator delete(*(void **)(v61 - 96));
  if (a61 < 0)
    operator delete(__p);
  if (a54 < 0)
    operator delete(a49);
  if (*(char *)(v61 - 185) < 0)
    operator delete(*(void **)(v61 - 208));
  if (*(char *)(v61 - 161) < 0)
    operator delete(*(void **)(v61 - 184));
  _Unwind_Resume(exception_object);
}

void sub_241AA5894()
{
  JUMPOUT(0x241AA589CLL);
}

void sub_241AA595C()
{
  __cxa_end_catch();
  JUMPOUT(0x241AA5838);
}

void sub_241AA5968(void *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  JUMPOUT(0x241AA588CLL);
}

void sub_241AA5978()
{
  JUMPOUT(0x241AA588CLL);
}

double CLMicroLocationDatabaseColumns::ColumnList<ULBlueToothIdentityTable::DatabaseColumns::RowId,ULBlueToothIdentityTable::DatabaseColumns::LastSeenTimeStamp,ULBlueToothIdentityTable::DatabaseColumns::BluetoothId,ULBlueToothIdentityTable::DatabaseColumns::DeviceName,ULBlueToothIdentityTable::DatabaseColumns::StableIdentifier>::commaSeparatedColumnNames@<D0>(std::string *a1@<X8>)
{
  double result;
  std::string v3;

  memset(&v3, 0, sizeof(v3));
  CLMicroLocationDatabaseColumns::ColumnList<ULBlueToothIdentityTable::DatabaseColumns::RowId,ULBlueToothIdentityTable::DatabaseColumns::LastSeenTimeStamp,ULBlueToothIdentityTable::DatabaseColumns::BluetoothId,ULBlueToothIdentityTable::DatabaseColumns::DeviceName,ULBlueToothIdentityTable::DatabaseColumns::StableIdentifier>::commaSeperatedNamesGenerator<0ul,1ul,2ul,3ul,4ul>(&v3);
  result = *(double *)&v3.__r_.__value_.__l.__data_;
  *a1 = v3;
  return result;
}

void sub_241AA59C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void ULMiloSqliteDatabase::selectConfigurationEntries(ULMiloSqliteDatabase *this@<X0>, double *a2@<X2>, unsigned int a3@<W1>, std::string *a4@<X8>)
{
  std::string *v8;
  __int128 v9;
  std::string *v10;
  std::string::size_type size;
  std::string *v12;
  void *v13;
  unsigned __int8 v14;
  std::string *v15;
  std::string::size_type v16;
  std::string *v17;
  __int128 v18;
  std::string *v19;
  __int128 v20;
  std::string *v21;
  __int128 v22;
  const std::string::value_type *p_p;
  std::string::size_type v24;
  std::string *v25;
  __int128 v26;
  std::string *v27;
  __int128 v28;
  const std::string::value_type *v29;
  std::string::size_type v30;
  std::string *v31;
  __int128 v32;
  std::string *v33;
  __int128 v34;
  std::string *v35;
  std::string::size_type v36;
  std::string *v37;
  __int128 v38;
  sqlite3 *v39;
  std::string::size_type v40;
  sqlite3_stmt *Statement;
  uint64_t v42;
  std::string::size_type v43;
  std::string::size_type v44;
  std::string::size_type v45;
  std::string v46;
  std::string v47;
  std::string v48;
  std::string v49;
  std::string v50;
  std::string v51;
  std::string v52;
  std::string v53;
  void *__p;
  _BYTE v55[15];
  unsigned __int8 v56;
  void *v57[2];
  unsigned __int8 v58;
  std::string v59;
  std::string v60;
  std::string v61;
  uint64_t v62;

  v62 = *MEMORY[0x24BDAC8D0];
  std::string::basic_string[abi:ne180100]<0>(v57, "GenerationTimestamp");
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  if (*a2 > 0.0)
  {
    std::operator+<char>();
    v8 = std::string::append(&v53, " < ");
    v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
    v59.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v59.__r_.__value_.__l.__data_ = v9;
    v8->__r_.__value_.__l.__size_ = 0;
    v8->__r_.__value_.__r.__words[2] = 0;
    v8->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v52, *a2);
    if ((v52.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v10 = &v52;
    else
      v10 = (std::string *)v52.__r_.__value_.__r.__words[0];
    if ((v52.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v52.__r_.__value_.__r.__words[2]);
    else
      size = v52.__r_.__value_.__l.__size_;
    v12 = std::string::append(&v59, (const std::string::value_type *)v10, size);
    v13 = (void *)v12->__r_.__value_.__r.__words[0];
    v61.__r_.__value_.__r.__words[0] = v12->__r_.__value_.__l.__size_;
    *(std::string::size_type *)((char *)v61.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v12->__r_.__value_.__r.__words[1] + 7);
    v14 = HIBYTE(v12->__r_.__value_.__r.__words[2]);
    v12->__r_.__value_.__l.__size_ = 0;
    v12->__r_.__value_.__r.__words[2] = 0;
    v12->__r_.__value_.__r.__words[0] = 0;
    if ((char)v56 < 0)
      operator delete(__p);
    __p = v13;
    *(_QWORD *)v55 = v61.__r_.__value_.__r.__words[0];
    *(_QWORD *)&v55[7] = *(std::string::size_type *)((char *)v61.__r_.__value_.__r.__words + 7);
    v56 = v14;
    if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v52.__r_.__value_.__l.__data_);
    if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v59.__r_.__value_.__l.__data_);
    if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v53.__r_.__value_.__l.__data_);
  }
  *((_BYTE *)&v48.__r_.__value_.__s + 23) = 7;
  strcpy((char *)&v48, "SELECT ");
  CLMicroLocationDatabaseColumns::ColumnList<ULConfigurationTable::DatabaseColumns::GenerationTimestamp,ULConfigurationTable::DatabaseColumns::RTLOIType,ULConfigurationTable::DatabaseColumns::ConfigurationType,ULConfigurationTable::DatabaseColumns::Configuration,ULConfigurationTable::DatabaseColumns::RowId,ULConfigurationTable::DatabaseColumns::RtLoiGroupId>::commaSeparatedColumnNames(&v47);
  if ((v47.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v15 = &v47;
  else
    v15 = (std::string *)v47.__r_.__value_.__r.__words[0];
  if ((v47.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v16 = HIBYTE(v47.__r_.__value_.__r.__words[2]);
  else
    v16 = v47.__r_.__value_.__l.__size_;
  v17 = std::string::append(&v48, (const std::string::value_type *)v15, v16);
  v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
  v49.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v49.__r_.__value_.__l.__data_ = v18;
  v17->__r_.__value_.__l.__size_ = 0;
  v17->__r_.__value_.__r.__words[2] = 0;
  v17->__r_.__value_.__r.__words[0] = 0;
  v19 = std::string::append(&v49, " FROM ");
  v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  v50.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  v21 = std::string::append(&v50, "MicroLocationConfiguration");
  v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
  v60.__r_.__value_.__r.__words[2] = v21->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v60.__r_.__value_.__l.__data_ = v22;
  v21->__r_.__value_.__l.__size_ = 0;
  v21->__r_.__value_.__r.__words[2] = 0;
  v21->__r_.__value_.__r.__words[0] = 0;
  if ((v56 & 0x80u) == 0)
    p_p = (const std::string::value_type *)&__p;
  else
    p_p = (const std::string::value_type *)__p;
  if ((v56 & 0x80u) == 0)
    v24 = v56;
  else
    v24 = *(_QWORD *)v55;
  v25 = std::string::append(&v60, p_p, v24);
  v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
  v51.__r_.__value_.__r.__words[2] = v25->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v51.__r_.__value_.__l.__data_ = v26;
  v25->__r_.__value_.__l.__size_ = 0;
  v25->__r_.__value_.__r.__words[2] = 0;
  v25->__r_.__value_.__r.__words[0] = 0;
  v27 = std::string::append(&v51, " ORDER BY ");
  v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
  v61.__r_.__value_.__r.__words[2] = v27->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v61.__r_.__value_.__l.__data_ = v28;
  v27->__r_.__value_.__l.__size_ = 0;
  v27->__r_.__value_.__r.__words[2] = 0;
  v27->__r_.__value_.__r.__words[0] = 0;
  if ((v58 & 0x80u) == 0)
    v29 = (const std::string::value_type *)v57;
  else
    v29 = (const std::string::value_type *)v57[0];
  if ((v58 & 0x80u) == 0)
    v30 = v58;
  else
    v30 = (std::string::size_type)v57[1];
  v31 = std::string::append(&v61, v29, v30);
  v32 = *(_OWORD *)&v31->__r_.__value_.__l.__data_;
  v52.__r_.__value_.__r.__words[2] = v31->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v52.__r_.__value_.__l.__data_ = v32;
  v31->__r_.__value_.__l.__size_ = 0;
  v31->__r_.__value_.__r.__words[2] = 0;
  v31->__r_.__value_.__r.__words[0] = 0;
  v33 = std::string::append(&v52, " DESC LIMIT ");
  v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
  v59.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v59.__r_.__value_.__l.__data_ = v34;
  v33->__r_.__value_.__l.__size_ = 0;
  v33->__r_.__value_.__r.__words[2] = 0;
  v33->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v46, a3);
  if ((v46.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v35 = &v46;
  else
    v35 = (std::string *)v46.__r_.__value_.__r.__words[0];
  if ((v46.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v36 = HIBYTE(v46.__r_.__value_.__r.__words[2]);
  else
    v36 = v46.__r_.__value_.__l.__size_;
  v37 = std::string::append(&v59, (const std::string::value_type *)v35, v36);
  v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
  v53.__r_.__value_.__r.__words[2] = v37->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v53.__r_.__value_.__l.__data_ = v38;
  v37->__r_.__value_.__l.__size_ = 0;
  v37->__r_.__value_.__r.__words[2] = 0;
  v37->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v46.__r_.__value_.__l.__data_);
  if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v59.__r_.__value_.__l.__data_);
  if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v52.__r_.__value_.__l.__data_);
  if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v61.__r_.__value_.__l.__data_);
  if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v51.__r_.__value_.__l.__data_);
  if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v60.__r_.__value_.__l.__data_);
  if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v50.__r_.__value_.__l.__data_);
  if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v49.__r_.__value_.__l.__data_);
  if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v47.__r_.__value_.__l.__data_);
  if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v48.__r_.__value_.__l.__data_);
  if ((v53.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v39 = (sqlite3 *)&v53;
  else
    v39 = (sqlite3 *)v53.__r_.__value_.__r.__words[0];
  CLSqliteDatabase::prepareScopedStatement(this->var0, v39, (CLSqliteFinalizingStatement **)&v59);
  v40 = v59.__r_.__value_.__r.__words[0];
  Statement = (sqlite3_stmt *)CLSqliteStatement::getStatement((CLSqliteStatement *)v59.__r_.__value_.__l.__data_);
  memset(&v52, 0, sizeof(v52));
  while (sqlite3_step(Statement) == 100)
  {
    CLMicroLocationDatabaseColumns::convert_from_sql<std::string>::convert(Statement, 1, &v61);
    CLMicroLocationDatabaseColumns::convert_from_sql<CLMicroLocationProto::Configuration>::convert<CLMicroLocationProto::Configuration>(Statement, 3, (CLMicroLocationProto::Configuration *)&v59);
    CLMicroLocationDatabaseColumns::convert_from_sql<std::string>::convert(Statement, 5, &v51);
    *a2 = sqlite3_column_double(Statement, 0);
    v60.__r_.__value_.__r.__words[0] = ULMiloSqliteDatabase::_getUUIDFromStringOrNilUUID(v42, (uint64_t)&v51);
    v60.__r_.__value_.__l.__size_ = v43;
    v44 = v52.__r_.__value_.__l.__size_;
    if (v52.__r_.__value_.__l.__size_ >= v52.__r_.__value_.__r.__words[2])
    {
      v45 = std::vector<CLMicroLocationConfigurationTable::Entry>::__emplace_back_slow_path<std::string &,CLMicroLocationProto::Configuration &,boost::uuids::uuid>((uint64_t *)&v52, (uint64_t)&v61, (uint64_t)&v59, &v60);
    }
    else
    {
      std::allocator<CLMicroLocationConfigurationTable::Entry>::construct[abi:ne180100]<CLMicroLocationConfigurationTable::Entry,std::string &,CLMicroLocationProto::Configuration &,boost::uuids::uuid>((uint64_t)&v52.__r_.__value_.__r.__words[2], v52.__r_.__value_.__l.__size_, (uint64_t)&v61, (uint64_t)&v59, &v60);
      v45 = v44 + 112;
    }
    v52.__r_.__value_.__l.__size_ = v45;
    if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v51.__r_.__value_.__l.__data_);
    CLMicroLocationProto::Configuration::~Configuration((CLMicroLocationProto::Configuration *)&v59);
    if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v61.__r_.__value_.__l.__data_);
  }
  sqlite3_reset(Statement);
  *a4 = v52;
  memset(&v52, 0, sizeof(v52));
  v59.__r_.__value_.__r.__words[0] = (std::string::size_type)&v52;
  std::vector<CLMicroLocationConfigurationTable::Entry>::__destroy_vector::operator()[abi:ne180100]((void ***)&v59);
  if (v40)
    (*(void (**)(std::string::size_type))(*(_QWORD *)v40 + 8))(v40);
  if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v53.__r_.__value_.__l.__data_);
  if ((char)v56 < 0)
    operator delete(__p);
  if ((char)v58 < 0)
    operator delete(v57[0]);
}

void sub_241AA5F48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36,uint64_t a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,uint64_t a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50)
{
  uint64_t v50;

  if (a36 < 0)
    operator delete(__p);
  if (*(char *)(v50 - 169) < 0)
    operator delete(*(void **)(v50 - 192));
  if (a43 < 0)
    operator delete(a38);
  if (a50 < 0)
    operator delete(a45);
  if (*(char *)(v50 - 193) < 0)
    operator delete(*(void **)(v50 - 216));
  _Unwind_Resume(a1);
}

void sub_241AA61E4()
{
  __cxa_end_catch();
  JUMPOUT(0x241AA60C8);
}

void sub_241AA61F0(void *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  JUMPOUT(0x241AA611CLL);
}

void sub_241AA6200()
{
  JUMPOUT(0x241AA611CLL);
}

double CLMicroLocationDatabaseColumns::ColumnList<ULConfigurationTable::DatabaseColumns::GenerationTimestamp,ULConfigurationTable::DatabaseColumns::RTLOIType,ULConfigurationTable::DatabaseColumns::ConfigurationType,ULConfigurationTable::DatabaseColumns::Configuration,ULConfigurationTable::DatabaseColumns::RowId,ULConfigurationTable::DatabaseColumns::RtLoiGroupId>::commaSeparatedColumnNames@<D0>(std::string *a1@<X8>)
{
  double result;
  std::string v3;

  memset(&v3, 0, sizeof(v3));
  CLMicroLocationDatabaseColumns::ColumnList<ULConfigurationTable::DatabaseColumns::GenerationTimestamp,ULConfigurationTable::DatabaseColumns::RTLOIType,ULConfigurationTable::DatabaseColumns::ConfigurationType,ULConfigurationTable::DatabaseColumns::Configuration,ULConfigurationTable::DatabaseColumns::RowId,ULConfigurationTable::DatabaseColumns::RtLoiGroupId>::commaSeperatedNamesGenerator<0ul,1ul,2ul,3ul,4ul,5ul>(&v3);
  result = *(double *)&v3.__r_.__value_.__l.__data_;
  *a1 = v3;
  return result;
}

void sub_241AA624C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void ULMiloSqliteDatabase::selectModelEntries(ULMiloSqliteDatabase *this@<X0>, double *a2@<X2>, unsigned int a3@<W1>, std::string *a4@<X8>)
{
  std::string *v8;
  __int128 v9;
  std::string *v10;
  std::string::size_type size;
  std::string *v12;
  void *v13;
  unsigned __int8 v14;
  std::string *v15;
  std::string::size_type v16;
  std::string *v17;
  __int128 v18;
  std::string *v19;
  __int128 v20;
  std::string *v21;
  __int128 v22;
  const std::string::value_type *p_p;
  std::string::size_type v24;
  std::string *v25;
  __int128 v26;
  std::string *v27;
  __int128 v28;
  void **v29;
  std::string::size_type v30;
  std::string *v31;
  __int128 v32;
  std::string *v33;
  __int128 v34;
  std::string *v35;
  std::string::size_type v36;
  std::string *v37;
  __int128 v38;
  sqlite3 *v39;
  std::string::size_type v40;
  sqlite3_stmt *Statement;
  std::string::size_type v42;
  uint64_t v43;
  std::string::size_type v44;
  std::string::size_type v45;
  std::string::size_type v46;
  std::string v47;
  std::string v48;
  std::string v49;
  std::string v50;
  std::string v51;
  std::string v52;
  void *__p;
  _BYTE v54[15];
  unsigned __int8 v55;
  void *v56[2];
  unsigned __int8 v57;
  std::string v58;
  std::string v59;
  std::string v60;
  std::string v61;
  std::string v62;
  uint64_t v63;

  v63 = *MEMORY[0x24BDAC8D0];
  std::string::basic_string[abi:ne180100]<0>(v56, "RowId");
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  if (*a2 > 0.0)
  {
    std::operator+<char>();
    v8 = std::string::append(&v52, " < ");
    v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
    v58.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v58.__r_.__value_.__l.__data_ = v9;
    v8->__r_.__value_.__l.__size_ = 0;
    v8->__r_.__value_.__r.__words[2] = 0;
    v8->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v51, *a2);
    if ((v51.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v10 = &v51;
    else
      v10 = (std::string *)v51.__r_.__value_.__r.__words[0];
    if ((v51.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v51.__r_.__value_.__r.__words[2]);
    else
      size = v51.__r_.__value_.__l.__size_;
    v12 = std::string::append(&v58, (const std::string::value_type *)v10, size);
    v13 = (void *)v12->__r_.__value_.__r.__words[0];
    v62.__r_.__value_.__r.__words[0] = v12->__r_.__value_.__l.__size_;
    *(std::string::size_type *)((char *)v62.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v12->__r_.__value_.__r.__words[1] + 7);
    v14 = HIBYTE(v12->__r_.__value_.__r.__words[2]);
    v12->__r_.__value_.__l.__size_ = 0;
    v12->__r_.__value_.__r.__words[2] = 0;
    v12->__r_.__value_.__r.__words[0] = 0;
    if ((char)v55 < 0)
      operator delete(__p);
    __p = v13;
    *(_QWORD *)v54 = v62.__r_.__value_.__r.__words[0];
    *(_QWORD *)&v54[7] = *(std::string::size_type *)((char *)v62.__r_.__value_.__r.__words + 7);
    v55 = v14;
    if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v51.__r_.__value_.__l.__data_);
    if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v58.__r_.__value_.__l.__data_);
    if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v52.__r_.__value_.__l.__data_);
  }
  *((_BYTE *)&v49.__r_.__value_.__s + 23) = 7;
  strcpy((char *)&v49, "SELECT ");
  CLMicroLocationDatabaseColumns::ColumnList<ULModelTable::DatabaseColumns::ModelUUID,ULModelTable::DatabaseColumns::GenerationTimestamp,ULModelTable::DatabaseColumns::ModelType,ULModelTable::DatabaseColumns::Model,ULModelTable::DatabaseColumns::RowId,ULModelTable::DatabaseColumns::ClientID,ULModelTable::DatabaseColumns::LoiGroupId>::commaSeparatedColumnNames(&v48);
  if ((v48.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v15 = &v48;
  else
    v15 = (std::string *)v48.__r_.__value_.__r.__words[0];
  if ((v48.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v16 = HIBYTE(v48.__r_.__value_.__r.__words[2]);
  else
    v16 = v48.__r_.__value_.__l.__size_;
  v17 = std::string::append(&v49, (const std::string::value_type *)v15, v16);
  v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
  v59.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v59.__r_.__value_.__l.__data_ = v18;
  v17->__r_.__value_.__l.__size_ = 0;
  v17->__r_.__value_.__r.__words[2] = 0;
  v17->__r_.__value_.__r.__words[0] = 0;
  v19 = std::string::append(&v59, " FROM ");
  v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  v60.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v60.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  v21 = std::string::append(&v60, "MicroLocationModels");
  v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
  v61.__r_.__value_.__r.__words[2] = v21->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v61.__r_.__value_.__l.__data_ = v22;
  v21->__r_.__value_.__l.__size_ = 0;
  v21->__r_.__value_.__r.__words[2] = 0;
  v21->__r_.__value_.__r.__words[0] = 0;
  if ((v55 & 0x80u) == 0)
    p_p = (const std::string::value_type *)&__p;
  else
    p_p = (const std::string::value_type *)__p;
  if ((v55 & 0x80u) == 0)
    v24 = v55;
  else
    v24 = *(_QWORD *)v54;
  v25 = std::string::append(&v61, p_p, v24);
  v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
  v50.__r_.__value_.__r.__words[2] = v25->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v26;
  v25->__r_.__value_.__l.__size_ = 0;
  v25->__r_.__value_.__r.__words[2] = 0;
  v25->__r_.__value_.__r.__words[0] = 0;
  v27 = std::string::append(&v50, " ORDER BY ");
  v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
  v62.__r_.__value_.__r.__words[2] = v27->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v62.__r_.__value_.__l.__data_ = v28;
  v27->__r_.__value_.__l.__size_ = 0;
  v27->__r_.__value_.__r.__words[2] = 0;
  v27->__r_.__value_.__r.__words[0] = 0;
  if ((v57 & 0x80u) == 0)
    v29 = v56;
  else
    v29 = (void **)v56[0];
  if ((v57 & 0x80u) == 0)
    v30 = v57;
  else
    v30 = (std::string::size_type)v56[1];
  v31 = std::string::append(&v62, (const std::string::value_type *)v29, v30);
  v32 = *(_OWORD *)&v31->__r_.__value_.__l.__data_;
  v51.__r_.__value_.__r.__words[2] = v31->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v51.__r_.__value_.__l.__data_ = v32;
  v31->__r_.__value_.__l.__size_ = 0;
  v31->__r_.__value_.__r.__words[2] = 0;
  v31->__r_.__value_.__r.__words[0] = 0;
  v33 = std::string::append(&v51, " DESC LIMIT ");
  v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
  v58.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v58.__r_.__value_.__l.__data_ = v34;
  v33->__r_.__value_.__l.__size_ = 0;
  v33->__r_.__value_.__r.__words[2] = 0;
  v33->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v47, a3);
  if ((v47.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v35 = &v47;
  else
    v35 = (std::string *)v47.__r_.__value_.__r.__words[0];
  if ((v47.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v36 = HIBYTE(v47.__r_.__value_.__r.__words[2]);
  else
    v36 = v47.__r_.__value_.__l.__size_;
  v37 = std::string::append(&v58, (const std::string::value_type *)v35, v36);
  v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
  v52.__r_.__value_.__r.__words[2] = v37->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v52.__r_.__value_.__l.__data_ = v38;
  v37->__r_.__value_.__l.__size_ = 0;
  v37->__r_.__value_.__r.__words[2] = 0;
  v37->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v47.__r_.__value_.__l.__data_);
  if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v58.__r_.__value_.__l.__data_);
  if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v51.__r_.__value_.__l.__data_);
  if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v62.__r_.__value_.__l.__data_);
  if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v50.__r_.__value_.__l.__data_);
  if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v61.__r_.__value_.__l.__data_);
  if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v60.__r_.__value_.__l.__data_);
  if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v59.__r_.__value_.__l.__data_);
  if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v48.__r_.__value_.__l.__data_);
  if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v49.__r_.__value_.__l.__data_);
  if ((v52.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v39 = (sqlite3 *)&v52;
  else
    v39 = (sqlite3 *)v52.__r_.__value_.__r.__words[0];
  CLSqliteDatabase::prepareScopedStatement(this->var0, v39, (CLSqliteFinalizingStatement **)&v58);
  v40 = v58.__r_.__value_.__r.__words[0];
  Statement = (sqlite3_stmt *)CLSqliteStatement::getStatement((CLSqliteStatement *)v58.__r_.__value_.__l.__data_);
  memset(&v51, 0, sizeof(v51));
  while (sqlite3_step(Statement) == 100)
  {
    *(_OWORD *)&v60.__r_.__value_.__l.__data_ = 0uLL;
    v60.__r_.__value_.__r.__words[0] = CLMicroLocationDatabaseColumns::convert_from_sql<boost::uuids::uuid>::convert(Statement, 0);
    v60.__r_.__value_.__l.__size_ = v42;
    v49.__r_.__value_.__r.__words[0] = sqlite3_column_double(Statement, 1);
    CLMicroLocationDatabaseColumns::convert_from_sql<CLMicroLocationProto::Model>::convert<CLMicroLocationProto::Model>(Statement, 3, (CLMicroLocationProto::Model *)&v58);
    CLMicroLocationDatabaseColumns::convert_from_sql<std::string>::convert(Statement, 5, &v62);
    CLMicroLocationDatabaseColumns::convert_from_sql<std::string>::convert(Statement, 6, &v50);
    *a2 = (double)sqlite3_column_int64(Statement, 4);
    CLMicroLocationClientUtils::getBoostServiceUuidFromClientIdAndServiceUuid(&v62, &v61);
    v59.__r_.__value_.__r.__words[0] = ULMiloSqliteDatabase::_getUUIDFromStringOrNilUUID(v43, (uint64_t)&v50);
    v59.__r_.__value_.__l.__size_ = v44;
    v45 = v51.__r_.__value_.__l.__size_;
    if (v51.__r_.__value_.__l.__size_ >= v51.__r_.__value_.__r.__words[2])
    {
      v46 = std::vector<CLMicroLocationModelTable::Entry>::__emplace_back_slow_path<boost::uuids::uuid &,std::chrono::time_point<cl::chrono::CFAbsoluteTimeClock,std::chrono::duration<long double,std::ratio<1l,1l>>> &,CLMicroLocationProto::Model,std::string &,std::optional<boost::uuids::uuid> &,boost::uuids::uuid>((uint64_t *)&v51, (uint64_t *)&v60, (double *)&v49, (uint64_t)&v58, (uint64_t)&v62, (__int128 *)&v61, &v59);
    }
    else
    {
      std::allocator<CLMicroLocationModelTable::Entry>::construct[abi:ne180100]<CLMicroLocationModelTable::Entry,boost::uuids::uuid &,std::chrono::time_point<cl::chrono::CFAbsoluteTimeClock,std::chrono::duration<long double,std::ratio<1l,1l>>> &,CLMicroLocationProto::Model,std::string &,std::optional<boost::uuids::uuid> &,boost::uuids::uuid>((uint64_t)&v51.__r_.__value_.__r.__words[2], v51.__r_.__value_.__l.__size_, (uint64_t *)&v60, (double *)&v49, (uint64_t)&v58, (uint64_t)&v62, (__int128 *)&v61, &v59);
      v46 = v45 + 312;
    }
    v51.__r_.__value_.__l.__size_ = v46;
    if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v50.__r_.__value_.__l.__data_);
    if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v62.__r_.__value_.__l.__data_);
    CLMicroLocationProto::Model::~Model((CLMicroLocationProto::Model *)&v58);
  }
  sqlite3_reset(Statement);
  *a4 = v51;
  memset(&v51, 0, sizeof(v51));
  v58.__r_.__value_.__r.__words[0] = (std::string::size_type)&v51;
  std::vector<CLMicroLocationModelTable::Entry>::__destroy_vector::operator()[abi:ne180100]((void ***)&v58);
  if (v40)
    (*(void (**)(std::string::size_type))(*(_QWORD *)v40 + 8))(v40);
  if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v52.__r_.__value_.__l.__data_);
  if ((char)v55 < 0)
    operator delete(__p);
  if ((char)v57 < 0)
    operator delete(v56[0]);
}

void sub_241AA6828(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42,void *a43,uint64_t a44,int a45,__int16 a46,char a47,char a48,void *buf,uint64_t a50,int a51,__int16 a52,char a53,char a54)
{
  if (a28 < 0)
    operator delete(__p);
  if (a54 < 0)
    operator delete(buf);
  if (a35 < 0)
    operator delete(a30);
  if (a42 < 0)
    operator delete(a37);
  if (a48 < 0)
    operator delete(a43);
  _Unwind_Resume(a1);
}

void sub_241AA6AD0()
{
  __cxa_end_catch();
  JUMPOUT(0x241AA69B4);
}

void sub_241AA6ADC(void *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  JUMPOUT(0x241AA6A08);
}

void sub_241AA6AEC()
{
  JUMPOUT(0x241AA6A08);
}

double CLMicroLocationDatabaseColumns::ColumnList<ULModelTable::DatabaseColumns::ModelUUID,ULModelTable::DatabaseColumns::GenerationTimestamp,ULModelTable::DatabaseColumns::ModelType,ULModelTable::DatabaseColumns::Model,ULModelTable::DatabaseColumns::RowId,ULModelTable::DatabaseColumns::ClientID,ULModelTable::DatabaseColumns::LoiGroupId>::commaSeparatedColumnNames@<D0>(std::string *a1@<X8>)
{
  double result;
  std::string v3;

  memset(&v3, 0, sizeof(v3));
  CLMicroLocationDatabaseColumns::ColumnList<ULModelTable::DatabaseColumns::ModelUUID,ULModelTable::DatabaseColumns::GenerationTimestamp,ULModelTable::DatabaseColumns::ModelType,ULModelTable::DatabaseColumns::Model,ULModelTable::DatabaseColumns::RowId,ULModelTable::DatabaseColumns::ClientID,ULModelTable::DatabaseColumns::LoiGroupId>::commaSeperatedNamesGenerator<0ul,1ul,2ul,3ul,4ul,5ul,6ul>(&v3);
  result = *(double *)&v3.__r_.__value_.__l.__data_;
  *a1 = v3;
  return result;
}

void sub_241AA6B38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void ULMiloSqliteDatabase::selectLoggedEventEntries(ULMiloSqliteDatabase *this@<X0>, double *a2@<X2>, unsigned int a3@<W1>, std::string *a4@<X8>)
{
  std::string *v8;
  __int128 v9;
  std::string *v10;
  std::string::size_type size;
  std::string *v12;
  void *v13;
  unsigned __int8 v14;
  std::string *v15;
  std::string::size_type v16;
  std::string *v17;
  __int128 v18;
  std::string *v19;
  __int128 v20;
  std::string *v21;
  __int128 v22;
  const std::string::value_type *p_p;
  std::string::size_type v24;
  std::string *v25;
  __int128 v26;
  std::string *v27;
  __int128 v28;
  void **v29;
  std::string::size_type v30;
  std::string *v31;
  __int128 v32;
  std::string *v33;
  __int128 v34;
  std::string *v35;
  std::string::size_type v36;
  std::string *v37;
  __int128 v38;
  sqlite3 *v39;
  std::string::size_type v40;
  sqlite3_stmt *Statement;
  std::string::size_type v42;
  std::string::size_type v43;
  std::string::size_type v44;
  std::string v45;
  std::string v46;
  std::string v47;
  std::string v48;
  std::string v49;
  std::string v50;
  std::string v51;
  std::string v52;
  std::string v53;
  void *__p;
  _BYTE v55[15];
  unsigned __int8 v56;
  void *v57[2];
  unsigned __int8 v58;
  std::string v59;
  std::string v60;
  uint64_t v61;

  v61 = *MEMORY[0x24BDAC8D0];
  std::string::basic_string[abi:ne180100]<0>(v57, "RowId");
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  if (*a2 > 0.0)
  {
    std::operator+<char>();
    v8 = std::string::append(&v53, " < ");
    v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
    v59.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v59.__r_.__value_.__l.__data_ = v9;
    v8->__r_.__value_.__l.__size_ = 0;
    v8->__r_.__value_.__r.__words[2] = 0;
    v8->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v52, *a2);
    if ((v52.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v10 = &v52;
    else
      v10 = (std::string *)v52.__r_.__value_.__r.__words[0];
    if ((v52.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v52.__r_.__value_.__r.__words[2]);
    else
      size = v52.__r_.__value_.__l.__size_;
    v12 = std::string::append(&v59, (const std::string::value_type *)v10, size);
    v13 = (void *)v12->__r_.__value_.__r.__words[0];
    v60.__r_.__value_.__r.__words[0] = v12->__r_.__value_.__l.__size_;
    *(std::string::size_type *)((char *)v60.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v12->__r_.__value_.__r.__words[1] + 7);
    v14 = HIBYTE(v12->__r_.__value_.__r.__words[2]);
    v12->__r_.__value_.__l.__size_ = 0;
    v12->__r_.__value_.__r.__words[2] = 0;
    v12->__r_.__value_.__r.__words[0] = 0;
    if ((char)v56 < 0)
      operator delete(__p);
    __p = v13;
    *(_QWORD *)v55 = v60.__r_.__value_.__r.__words[0];
    *(_QWORD *)&v55[7] = *(std::string::size_type *)((char *)v60.__r_.__value_.__r.__words + 7);
    v56 = v14;
    if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v52.__r_.__value_.__l.__data_);
    if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v59.__r_.__value_.__l.__data_);
    if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v53.__r_.__value_.__l.__data_);
  }
  *((_BYTE *)&v47.__r_.__value_.__s + 23) = 7;
  strcpy((char *)&v47, "SELECT ");
  CLMicroLocationDatabaseColumns::ColumnList<ULLoggedEventTable::DatabaseColumns::EventUUID,ULLoggedEventTable::DatabaseColumns::ReceivedTimestamp,ULLoggedEventTable::DatabaseColumns::EventType,ULLoggedEventTable::DatabaseColumns::Event,ULLoggedEventTable::DatabaseColumns::RowId>::commaSeparatedColumnNames(&v46);
  if ((v46.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v15 = &v46;
  else
    v15 = (std::string *)v46.__r_.__value_.__r.__words[0];
  if ((v46.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v16 = HIBYTE(v46.__r_.__value_.__r.__words[2]);
  else
    v16 = v46.__r_.__value_.__l.__size_;
  v17 = std::string::append(&v47, (const std::string::value_type *)v15, v16);
  v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
  v48.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v48.__r_.__value_.__l.__data_ = v18;
  v17->__r_.__value_.__l.__size_ = 0;
  v17->__r_.__value_.__r.__words[2] = 0;
  v17->__r_.__value_.__r.__words[0] = 0;
  v19 = std::string::append(&v48, " FROM ");
  v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  v49.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v49.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  v21 = std::string::append(&v49, "MicroLocationLoggedEvents");
  v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
  v50.__r_.__value_.__r.__words[2] = v21->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v22;
  v21->__r_.__value_.__l.__size_ = 0;
  v21->__r_.__value_.__r.__words[2] = 0;
  v21->__r_.__value_.__r.__words[0] = 0;
  if ((v56 & 0x80u) == 0)
    p_p = (const std::string::value_type *)&__p;
  else
    p_p = (const std::string::value_type *)__p;
  if ((v56 & 0x80u) == 0)
    v24 = v56;
  else
    v24 = *(_QWORD *)v55;
  v25 = std::string::append(&v50, p_p, v24);
  v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
  v51.__r_.__value_.__r.__words[2] = v25->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v51.__r_.__value_.__l.__data_ = v26;
  v25->__r_.__value_.__l.__size_ = 0;
  v25->__r_.__value_.__r.__words[2] = 0;
  v25->__r_.__value_.__r.__words[0] = 0;
  v27 = std::string::append(&v51, " ORDER BY ");
  v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
  v60.__r_.__value_.__r.__words[2] = v27->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v60.__r_.__value_.__l.__data_ = v28;
  v27->__r_.__value_.__l.__size_ = 0;
  v27->__r_.__value_.__r.__words[2] = 0;
  v27->__r_.__value_.__r.__words[0] = 0;
  if ((v58 & 0x80u) == 0)
    v29 = v57;
  else
    v29 = (void **)v57[0];
  if ((v58 & 0x80u) == 0)
    v30 = v58;
  else
    v30 = (std::string::size_type)v57[1];
  v31 = std::string::append(&v60, (const std::string::value_type *)v29, v30);
  v32 = *(_OWORD *)&v31->__r_.__value_.__l.__data_;
  v52.__r_.__value_.__r.__words[2] = v31->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v52.__r_.__value_.__l.__data_ = v32;
  v31->__r_.__value_.__l.__size_ = 0;
  v31->__r_.__value_.__r.__words[2] = 0;
  v31->__r_.__value_.__r.__words[0] = 0;
  v33 = std::string::append(&v52, " DESC LIMIT ");
  v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
  v59.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v59.__r_.__value_.__l.__data_ = v34;
  v33->__r_.__value_.__l.__size_ = 0;
  v33->__r_.__value_.__r.__words[2] = 0;
  v33->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v45, a3);
  if ((v45.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v35 = &v45;
  else
    v35 = (std::string *)v45.__r_.__value_.__r.__words[0];
  if ((v45.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v36 = HIBYTE(v45.__r_.__value_.__r.__words[2]);
  else
    v36 = v45.__r_.__value_.__l.__size_;
  v37 = std::string::append(&v59, (const std::string::value_type *)v35, v36);
  v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
  v53.__r_.__value_.__r.__words[2] = v37->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v53.__r_.__value_.__l.__data_ = v38;
  v37->__r_.__value_.__l.__size_ = 0;
  v37->__r_.__value_.__r.__words[2] = 0;
  v37->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v45.__r_.__value_.__l.__data_);
  if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v59.__r_.__value_.__l.__data_);
  if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v52.__r_.__value_.__l.__data_);
  if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v60.__r_.__value_.__l.__data_);
  if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v51.__r_.__value_.__l.__data_);
  if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v50.__r_.__value_.__l.__data_);
  if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v49.__r_.__value_.__l.__data_);
  if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v48.__r_.__value_.__l.__data_);
  if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v46.__r_.__value_.__l.__data_);
  if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v47.__r_.__value_.__l.__data_);
  if ((v53.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v39 = (sqlite3 *)&v53;
  else
    v39 = (sqlite3 *)v53.__r_.__value_.__r.__words[0];
  CLSqliteDatabase::prepareScopedStatement(this->var0, v39, (CLSqliteFinalizingStatement **)&v59);
  v40 = v59.__r_.__value_.__r.__words[0];
  Statement = (sqlite3_stmt *)CLSqliteStatement::getStatement((CLSqliteStatement *)v59.__r_.__value_.__l.__data_);
  memset(&v52, 0, sizeof(v52));
  while (sqlite3_step(Statement) == 100)
  {
    *(_OWORD *)&v60.__r_.__value_.__l.__data_ = 0uLL;
    v60.__r_.__value_.__r.__words[0] = CLMicroLocationDatabaseColumns::convert_from_sql<boost::uuids::uuid>::convert(Statement, 0);
    v60.__r_.__value_.__l.__size_ = v42;
    v51.__r_.__value_.__r.__words[0] = sqlite3_column_double(Statement, 1);
    LODWORD(v50.__r_.__value_.__l.__data_) = 0;
    LODWORD(v50.__r_.__value_.__l.__data_) = sqlite3_column_int64(Statement, 2);
    CLMicroLocationDatabaseColumns::convert_from_sql<CLMicroLocationProto::ReceivedEvent>::convert<CLMicroLocationProto::ReceivedEvent>(Statement, 3, (CLMicroLocationProto::ReceivedEvent *)&v59);
    *a2 = (double)sqlite3_column_int64(Statement, 4);
    v43 = v52.__r_.__value_.__l.__size_;
    if (v52.__r_.__value_.__l.__size_ >= v52.__r_.__value_.__r.__words[2])
    {
      v44 = std::vector<CLMicroLocationLoggedEventsTable::Entry>::__emplace_back_slow_path<boost::uuids::uuid &,std::chrono::time_point<cl::chrono::CFAbsoluteTimeClock,std::chrono::duration<long double,std::ratio<1l,1l>>> &,CLMicroLocationProto::EventType &,CLMicroLocationProto::ReceivedEvent &>((uint64_t *)&v52, &v60, (double *)&v51, (int *)&v50, (CLMicroLocationProto::ReceivedEvent *)&v59);
    }
    else
    {
      CLMicroLocationLoggedEventsTable::Entry::Entry(v52.__r_.__value_.__l.__size_, &v60, (int)v50.__r_.__value_.__l.__data_, (CLMicroLocationProto::ReceivedEvent *)&v59, *(double *)&v51.__r_.__value_.__l.__data_);
      v44 = v43 + 336;
    }
    v52.__r_.__value_.__l.__size_ = v44;
    CLMicroLocationProto::ReceivedEvent::~ReceivedEvent((CLMicroLocationProto::ReceivedEvent *)&v59);
  }
  sqlite3_reset(Statement);
  *a4 = v52;
  memset(&v52, 0, sizeof(v52));
  v59.__r_.__value_.__r.__words[0] = (std::string::size_type)&v52;
  std::vector<CLMicroLocationLoggedEventsTable::Entry>::__destroy_vector::operator()[abi:ne180100]((void ***)&v59);
  if (v40)
    (*(void (**)(std::string::size_type))(*(_QWORD *)v40 + 8))(v40);
  if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v53.__r_.__value_.__l.__data_);
  if ((char)v56 < 0)
    operator delete(__p);
  if ((char)v58 < 0)
    operator delete(v57[0]);
}

void sub_241AA70B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,void *__p,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47,uint64_t a48,void *a49,uint64_t a50,int a51,__int16 a52,char a53,char a54,void *a55,uint64_t a56,int a57,__int16 a58,char a59,char a60,void *buf,uint64_t a62,int a63)
{
  char a66;

  if (a40 < 0)
    operator delete(__p);
  if (a66 < 0)
    operator delete(buf);
  if (a47 < 0)
    operator delete(a42);
  if (a54 < 0)
    operator delete(a49);
  if (a60 < 0)
    operator delete(a55);
  _Unwind_Resume(a1);
}

void sub_241AA7280()
{
  JUMPOUT(0x241AA7288);
}

void sub_241AA7324()
{
  __cxa_end_catch();
  JUMPOUT(0x241AA7224);
}

void sub_241AA7330(void *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  JUMPOUT(0x241AA7278);
}

void sub_241AA7340()
{
  JUMPOUT(0x241AA7278);
}

double CLMicroLocationDatabaseColumns::ColumnList<ULLoggedEventTable::DatabaseColumns::EventUUID,ULLoggedEventTable::DatabaseColumns::ReceivedTimestamp,ULLoggedEventTable::DatabaseColumns::EventType,ULLoggedEventTable::DatabaseColumns::Event,ULLoggedEventTable::DatabaseColumns::RowId>::commaSeparatedColumnNames@<D0>(std::string *a1@<X8>)
{
  double result;
  std::string v3;

  memset(&v3, 0, sizeof(v3));
  CLMicroLocationDatabaseColumns::ColumnList<ULLoggedEventTable::DatabaseColumns::EventUUID,ULLoggedEventTable::DatabaseColumns::ReceivedTimestamp,ULLoggedEventTable::DatabaseColumns::EventType,ULLoggedEventTable::DatabaseColumns::Event,ULLoggedEventTable::DatabaseColumns::RowId>::commaSeperatedNamesGenerator<0ul,1ul,2ul,3ul,4ul>(&v3);
  result = *(double *)&v3.__r_.__value_.__l.__data_;
  *a1 = v3;
  return result;
}

void sub_241AA738C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void ULMiloSqliteDatabase::selectCustomLoiEntries(ULMiloSqliteDatabase *this@<X0>, double *a2@<X2>, unsigned int a3@<W1>, std::string *a4@<X8>)
{
  std::string *v8;
  __int128 v9;
  std::string *v10;
  std::string::size_type size;
  std::string *v12;
  void *v13;
  unsigned __int8 v14;
  std::string *v15;
  std::string::size_type v16;
  std::string *v17;
  __int128 v18;
  std::string *v19;
  __int128 v20;
  std::string *v21;
  __int128 v22;
  std::string *v23;
  __int128 v24;
  const std::string::value_type *p_p;
  std::string::size_type v26;
  std::string *v27;
  __int128 v28;
  std::string *v29;
  __int128 v30;
  const std::string::value_type *v31;
  std::string::size_type v32;
  std::string *v33;
  __int128 v34;
  std::string *v35;
  __int128 v36;
  std::string *v37;
  std::string::size_type v38;
  std::string *v39;
  __int128 v40;
  sqlite3 *v41;
  std::string::size_type v42;
  sqlite3_stmt *Statement;
  uint64_t v44;
  std::string::size_type v45;
  std::string::size_type v46;
  std::string::size_type UUIDFromStringOrNilUUID;
  std::string::size_type v48;
  std::string::size_type v49;
  std::string v50;
  std::string v51;
  std::string v52;
  std::string v53;
  std::string v54;
  std::string v55;
  std::string v56;
  std::string v57;
  void *__p;
  _BYTE v59[15];
  unsigned __int8 v60;
  void *v61[2];
  unsigned __int8 v62;
  std::string v63;
  std::string v64;
  std::string v65;
  std::string v66;
  uint64_t v67;

  v67 = *MEMORY[0x24BDAC8D0];
  std::string::basic_string[abi:ne180100]<0>(v61, "LastSeenTimeStamp");
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  if (*a2 > 0.0)
  {
    std::operator+<char>();
    v8 = std::string::append(&v56, " < ");
    v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
    v57.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v57.__r_.__value_.__l.__data_ = v9;
    v8->__r_.__value_.__l.__size_ = 0;
    v8->__r_.__value_.__r.__words[2] = 0;
    v8->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v66, *a2);
    if ((v66.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v10 = &v66;
    else
      v10 = (std::string *)v66.__r_.__value_.__r.__words[0];
    if ((v66.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v66.__r_.__value_.__r.__words[2]);
    else
      size = v66.__r_.__value_.__l.__size_;
    v12 = std::string::append(&v57, (const std::string::value_type *)v10, size);
    v13 = (void *)v12->__r_.__value_.__r.__words[0];
    v65.__r_.__value_.__r.__words[0] = v12->__r_.__value_.__l.__size_;
    *(std::string::size_type *)((char *)v65.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v12->__r_.__value_.__r.__words[1] + 7);
    v14 = HIBYTE(v12->__r_.__value_.__r.__words[2]);
    v12->__r_.__value_.__l.__size_ = 0;
    v12->__r_.__value_.__r.__words[2] = 0;
    v12->__r_.__value_.__r.__words[0] = 0;
    if ((char)v60 < 0)
      operator delete(__p);
    __p = v13;
    *(_QWORD *)v59 = v65.__r_.__value_.__r.__words[0];
    *(_QWORD *)&v59[7] = *(std::string::size_type *)((char *)v65.__r_.__value_.__r.__words + 7);
    v60 = v14;
    if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v66.__r_.__value_.__l.__data_);
    if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v57.__r_.__value_.__l.__data_);
    if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v56.__r_.__value_.__l.__data_);
  }
  *((_BYTE *)&v52.__r_.__value_.__s + 23) = 7;
  strcpy((char *)&v52, "SELECT ");
  CLMicroLocationDatabaseColumns::ColumnList<ULCustomLoiTable::DatabaseColumns::RowId,ULCustomLoiTable::DatabaseColumns::ServiceId,ULCustomLoiTable::DatabaseColumns::LoiId,ULCustomLoiTable::DatabaseColumns::LastSeenTimeStamp>::commaSeparatedColumnNames(&v51);
  if ((v51.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v15 = &v51;
  else
    v15 = (std::string *)v51.__r_.__value_.__r.__words[0];
  if ((v51.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v16 = HIBYTE(v51.__r_.__value_.__r.__words[2]);
  else
    v16 = v51.__r_.__value_.__l.__size_;
  v17 = std::string::append(&v52, (const std::string::value_type *)v15, v16);
  v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
  v53.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v53.__r_.__value_.__l.__data_ = v18;
  v17->__r_.__value_.__l.__size_ = 0;
  v17->__r_.__value_.__r.__words[2] = 0;
  v17->__r_.__value_.__r.__words[0] = 0;
  v19 = std::string::append(&v53, " FROM ");
  v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  v54.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v54.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  v21 = std::string::append(&v54, "MiLoCustomLoiTable");
  v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
  v55.__r_.__value_.__r.__words[2] = v21->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v55.__r_.__value_.__l.__data_ = v22;
  v21->__r_.__value_.__l.__size_ = 0;
  v21->__r_.__value_.__r.__words[2] = 0;
  v21->__r_.__value_.__r.__words[0] = 0;
  v23 = std::string::append(&v55, " ");
  v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
  v63.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v63.__r_.__value_.__l.__data_ = v24;
  v23->__r_.__value_.__l.__size_ = 0;
  v23->__r_.__value_.__r.__words[2] = 0;
  v23->__r_.__value_.__r.__words[0] = 0;
  if ((v60 & 0x80u) == 0)
    p_p = (const std::string::value_type *)&__p;
  else
    p_p = (const std::string::value_type *)__p;
  if ((v60 & 0x80u) == 0)
    v26 = v60;
  else
    v26 = *(_QWORD *)v59;
  v27 = std::string::append(&v63, p_p, v26);
  v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
  v64.__r_.__value_.__r.__words[2] = v27->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v64.__r_.__value_.__l.__data_ = v28;
  v27->__r_.__value_.__l.__size_ = 0;
  v27->__r_.__value_.__r.__words[2] = 0;
  v27->__r_.__value_.__r.__words[0] = 0;
  v29 = std::string::append(&v64, " ORDER BY ");
  v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
  v65.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v65.__r_.__value_.__l.__data_ = v30;
  v29->__r_.__value_.__l.__size_ = 0;
  v29->__r_.__value_.__r.__words[2] = 0;
  v29->__r_.__value_.__r.__words[0] = 0;
  if ((v62 & 0x80u) == 0)
    v31 = (const std::string::value_type *)v61;
  else
    v31 = (const std::string::value_type *)v61[0];
  if ((v62 & 0x80u) == 0)
    v32 = v62;
  else
    v32 = (std::string::size_type)v61[1];
  v33 = std::string::append(&v65, v31, v32);
  v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
  v66.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v66.__r_.__value_.__l.__data_ = v34;
  v33->__r_.__value_.__l.__size_ = 0;
  v33->__r_.__value_.__r.__words[2] = 0;
  v33->__r_.__value_.__r.__words[0] = 0;
  v35 = std::string::append(&v66, " DESC LIMIT ");
  v36 = *(_OWORD *)&v35->__r_.__value_.__l.__data_;
  v56.__r_.__value_.__r.__words[2] = v35->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v56.__r_.__value_.__l.__data_ = v36;
  v35->__r_.__value_.__l.__size_ = 0;
  v35->__r_.__value_.__r.__words[2] = 0;
  v35->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v50, a3);
  if ((v50.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v37 = &v50;
  else
    v37 = (std::string *)v50.__r_.__value_.__r.__words[0];
  if ((v50.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v38 = HIBYTE(v50.__r_.__value_.__r.__words[2]);
  else
    v38 = v50.__r_.__value_.__l.__size_;
  v39 = std::string::append(&v56, (const std::string::value_type *)v37, v38);
  v40 = *(_OWORD *)&v39->__r_.__value_.__l.__data_;
  v57.__r_.__value_.__r.__words[2] = v39->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v57.__r_.__value_.__l.__data_ = v40;
  v39->__r_.__value_.__l.__size_ = 0;
  v39->__r_.__value_.__r.__words[2] = 0;
  v39->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v50.__r_.__value_.__l.__data_);
  if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v56.__r_.__value_.__l.__data_);
  if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v66.__r_.__value_.__l.__data_);
  if (SHIBYTE(v65.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v65.__r_.__value_.__l.__data_);
  if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v64.__r_.__value_.__l.__data_);
  if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v63.__r_.__value_.__l.__data_);
  if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v55.__r_.__value_.__l.__data_);
  if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v54.__r_.__value_.__l.__data_);
  if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v53.__r_.__value_.__l.__data_);
  if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v51.__r_.__value_.__l.__data_);
  if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v52.__r_.__value_.__l.__data_);
  if ((v57.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v41 = (sqlite3 *)&v57;
  else
    v41 = (sqlite3 *)v57.__r_.__value_.__r.__words[0];
  CLSqliteDatabase::prepareScopedStatement(this->var0, v41, (CLSqliteFinalizingStatement **)&v56);
  v42 = v56.__r_.__value_.__r.__words[0];
  Statement = (sqlite3_stmt *)CLSqliteStatement::getStatement((CLSqliteStatement *)v56.__r_.__value_.__l.__data_);
  memset(&v56, 0, sizeof(v56));
  while (sqlite3_step(Statement) == 100)
  {
    CLMicroLocationDatabaseColumns::convert_from_sql<std::string>::convert(Statement, 1, &v66);
    CLMicroLocationDatabaseColumns::convert_from_sql<std::string>::convert(Statement, 2, &v65);
    v55.__r_.__value_.__r.__words[0] = sqlite3_column_double(Statement, 3);
    *a2 = *(double *)&v55.__r_.__value_.__l.__data_;
    v64.__r_.__value_.__r.__words[0] = ULMiloSqliteDatabase::_getUUIDFromStringOrNilUUID(v44, (uint64_t)&v66);
    v64.__r_.__value_.__l.__size_ = v45;
    UUIDFromStringOrNilUUID = ULMiloSqliteDatabase::_getUUIDFromStringOrNilUUID((uint64_t)v64.__r_.__value_.__l.__data_, (uint64_t)&v65);
    v63.__r_.__value_.__r.__words[0] = UUIDFromStringOrNilUUID;
    v63.__r_.__value_.__l.__size_ = v46;
    v48 = v56.__r_.__value_.__l.__size_;
    if (v56.__r_.__value_.__l.__size_ >= v56.__r_.__value_.__r.__words[2])
    {
      v49 = std::vector<CLMiLoCustomLoiTable::Entry>::__emplace_back_slow_path<boost::uuids::uuid,boost::uuids::uuid,std::chrono::time_point<cl::chrono::CFAbsoluteTimeClock,std::chrono::duration<long double,std::ratio<1l,1l>>> &>((uint64_t *)&v56, (uint64_t *)&v64, (uint64_t *)&v63, (double *)&v55);
    }
    else
    {
      CLMiLoCustomLoiTable::Entry::Entry(v56.__r_.__value_.__l.__size_, (uint64_t)v64.__r_.__value_.__l.__data_, v64.__r_.__value_.__l.__size_, UUIDFromStringOrNilUUID, v46, *(double *)&v55.__r_.__value_.__l.__data_);
      v49 = v48 + 40;
    }
    v56.__r_.__value_.__l.__size_ = v49;
    if (SHIBYTE(v65.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v65.__r_.__value_.__l.__data_);
    if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v66.__r_.__value_.__l.__data_);
  }
  sqlite3_reset(Statement);
  *a4 = v56;
  if (v42)
    (*(void (**)(std::string::size_type))(*(_QWORD *)v42 + 8))(v42);
  if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v57.__r_.__value_.__l.__data_);
  if ((char)v60 < 0)
    operator delete(__p);
  if ((char)v62 < 0)
    operator delete(v61[0]);
}

void sub_241AA7920(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,uint64_t a37,void *__p,uint64_t a39,int a40,__int16 a41,char a42,char a43,uint64_t a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50)
{
  uint64_t v50;

  if (*(char *)(v50 - 73) < 0)
    operator delete(*(void **)(v50 - 96));
  if (a43 < 0)
    operator delete(__p);
  if (a36 < 0)
    operator delete(a31);
  if (a50 < 0)
    operator delete(a45);
  if (*(char *)(v50 - 193) < 0)
    operator delete(*(void **)(v50 - 216));
  _Unwind_Resume(a1);
}

void sub_241AA7BE8()
{
  __cxa_end_catch();
  JUMPOUT(0x241AA7AC4);
}

void sub_241AA7BF4(void *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  JUMPOUT(0x241AA7B18);
}

void sub_241AA7C04()
{
  JUMPOUT(0x241AA7B18);
}

double CLMicroLocationDatabaseColumns::ColumnList<ULCustomLoiTable::DatabaseColumns::RowId,ULCustomLoiTable::DatabaseColumns::ServiceId,ULCustomLoiTable::DatabaseColumns::LoiId,ULCustomLoiTable::DatabaseColumns::LastSeenTimeStamp>::commaSeparatedColumnNames@<D0>(std::string *a1@<X8>)
{
  double result;
  std::string v3;

  memset(&v3, 0, sizeof(v3));
  CLMicroLocationDatabaseColumns::ColumnList<ULCustomLoiTable::DatabaseColumns::RowId,ULCustomLoiTable::DatabaseColumns::ServiceId,ULCustomLoiTable::DatabaseColumns::LoiId,ULCustomLoiTable::DatabaseColumns::LastSeenTimeStamp>::commaSeperatedNamesGenerator<0ul,1ul,2ul,3ul>(&v3);
  result = *(double *)&v3.__r_.__value_.__l.__data_;
  *a1 = v3;
  return result;
}

void sub_241AA7C50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void ___ZL45_CLLogObjectForCategory_MicroLocation_Defaultv_block_invoke_52()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.MicroLocation", "MicroLocation");
  v1 = (void *)logObject_MicroLocation_Default;
  logObject_MicroLocation_Default = (uint64_t)v0;

}

uint64_t CLMicroLocationDatabaseColumns::convert_from_sql<boost::uuids::uuid>::convert(sqlite3_stmt *a1, int a2)
{
  unint64_t v2;
  unsigned __int8 *v3;
  uint64_t v4;
  char v6;
  void *__p[2];
  unsigned __int8 v8;

  CLMicroLocationDatabaseColumns::convert_from_sql<std::string>::convert(a1, a2, __p);
  v2 = v8;
  if ((v8 & 0x80u) == 0)
    v3 = (unsigned __int8 *)__p;
  else
    v3 = (unsigned __int8 *)__p[0];
  if ((v8 & 0x80u) != 0)
    v2 = (unint64_t)__p[1];
  v4 = boost::uuids::string_generator::operator()<std::__wrap_iter<char const*>>((boost::uuids::string_generator *)&v6, v3, &v3[v2]);
  if ((char)v8 < 0)
    operator delete(__p[0]);
  return v4;
}

void sub_241AA7D0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void CLMicroLocationDatabaseColumns::convert_from_sql<std::string>::convert(sqlite3_stmt *a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  char *v4;
  std::runtime_error *v5;

  v4 = (char *)sqlite3_column_text(a1, a2);
  if (v4)
  {
    std::string::basic_string[abi:ne180100]<0>(a3, v4);
  }
  else
  {
    v5 = (std::runtime_error *)CLMicroLocationDatabaseColumns::convert_from_sql<std::string>::convert(0);
    CLMicroLocationDatabaseColumns::InvalidDatabaseValue::~InvalidDatabaseValue(v5);
  }
}

void CLMicroLocationDatabaseColumns::InvalidDatabaseValue::~InvalidDatabaseValue(std::runtime_error *this)
{
  std::runtime_error::~runtime_error(this);
  JUMPOUT(0x2426A04D4);
}

uint64_t boost::uuids::string_generator::operator()<std::__wrap_iter<char const*>>(boost::uuids::string_generator *this, unsigned __int8 *a2, unsigned __int8 *a3)
{
  signed __int8 *v5;
  int v6;
  signed __int8 v7;
  uint64_t v8;
  int v9;
  signed __int8 v10;
  BOOL v11;
  signed __int8 v12;
  char value;
  int v14;
  int v15;
  _QWORD v17[3];

  v17[2] = *MEMORY[0x24BDAC8D0];
  if (a2 == a3)
    goto LABEL_32;
  v5 = (signed __int8 *)(a2 + 1);
  v6 = *a2;
  if (v6 == 123)
  {
    if (v5 == (signed __int8 *)a3)
      goto LABEL_32;
    v5 = (signed __int8 *)(a2 + 2);
    v7 = a2[1];
  }
  else
  {
    v7 = *a2;
  }
  v8 = 0;
  v9 = 0;
  while (1)
  {
    do
    {
      if ((_DWORD)v8 == 4)
      {
        if (v7 == 45)
        {
          if (v5 == (signed __int8 *)a3)
            goto LABEL_32;
          v9 = 1;
LABEL_22:
          v12 = *v5++;
          v7 = v12;
          goto LABEL_24;
        }
        v9 = 0;
      }
      else
      {
        v11 = (v8 & 0x7FFFFFFD) == 8 || (_DWORD)v8 == 6;
        if (v11 && ((v9 ^ 1) & 1) == 0)
        {
          if (v7 != 45 || v5 == (signed __int8 *)a3)
            goto LABEL_32;
          goto LABEL_22;
        }
      }
LABEL_24:
      value = boost::uuids::string_generator::get_value(this, v7);
      *((_BYTE *)v17 + v8) = value;
      if (v5 == (signed __int8 *)a3)
        goto LABEL_32;
      v14 = *v5++;
      v7 = v14;
      *((_BYTE *)v17 + v8++) = boost::uuids::string_generator::get_value(this, v14) | (16 * value);
    }
    while (!v8);
    if (v8 == 16)
      break;
    if (v5 == (signed __int8 *)a3)
      goto LABEL_32;
    v10 = *v5++;
    v7 = v10;
  }
  if (v6 == 123 && (v5 == (signed __int8 *)a3 || (v15 = *v5, ++v5, v15 != 125))
    || v5 != (signed __int8 *)a3)
  {
LABEL_32:
    boost::uuids::string_generator::throw_invalid(this);
  }
  return v17[0];
}

uint64_t CLMicroLocationDatabaseColumns::convert_from_sql<CLMicroLocationProto::RecordingEvent>::convert<CLMicroLocationProto::RecordingEvent>@<X0>(sqlite3_stmt *a1@<X0>, int a2@<W1>, CLMicroLocationProto::RecordingEvent *a3@<X8>)
{
  const void *v6;
  uint64_t v7;
  wireless_diagnostics::google::protobuf::MessageLite *v8;
  uint64_t result;
  std::runtime_error *exception;
  std::string v11;

  v6 = sqlite3_column_blob(a1, a2);
  v7 = sqlite3_column_bytes(a1, a2);
  if (!v6)
  {
    CLMicroLocationDatabaseColumns::convert_from_sql<CLMicroLocationProto::RecordingEvent>::convert<CLMicroLocationProto::RecordingEvent>(v7);
LABEL_5:
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::string::basic_string[abi:ne180100]<0>(&v11, "Unable to parse protobuf");
    std::runtime_error::runtime_error(exception, &v11);
    exception->__vftable = (std::runtime_error_vtbl *)&off_2511D6820;
  }
  CLMicroLocationProto::RecordingEvent::RecordingEvent(a3);
  result = wireless_diagnostics::google::protobuf::MessageLite::ParseFromArray(v8, v6);
  if ((result & 1) == 0)
    goto LABEL_5;
  return result;
}

void sub_241AA7FE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  CLMicroLocationProto::RecordingEvent *v15;
  void *v16;
  int v17;

  if (a15 < 0)
  {
    operator delete(__p);
    if ((v17 & 1) == 0)
    {
LABEL_6:
      CLMicroLocationProto::RecordingEvent::~RecordingEvent(v15);
      _Unwind_Resume(a1);
    }
  }
  else if (!v17)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v16);
  goto LABEL_6;
}

sqlite3_int64 CLMicroLocationDatabaseColumns::convert_from_sql<unsigned long long>::convert<unsigned long long>(sqlite3_stmt *a1, int a2)
{
  sqlite3_int64 result;
  uint64_t v3;

  result = sqlite3_column_int64(a1, a2);
  if (result < 0)
  {
    v3 = CLMicroLocationDatabaseColumns::convert_from_sql<unsigned long long>::convert<unsigned long long>();
    return CLMicroLocationDatabaseColumns::convert_from_sql<CLMicroLocationProto::Measurement>::convert<CLMicroLocationProto::Measurement>(v3);
  }
  return result;
}

uint64_t CLMicroLocationDatabaseColumns::convert_from_sql<CLMicroLocationProto::Measurement>::convert<CLMicroLocationProto::Measurement>@<X0>(sqlite3_stmt *a1@<X0>, int a2@<W1>, CLMicroLocationProto::Measurement *a3@<X8>)
{
  const void *v6;
  uint64_t v7;
  wireless_diagnostics::google::protobuf::MessageLite *v8;
  uint64_t result;
  std::runtime_error *exception;
  std::string v11;

  v6 = sqlite3_column_blob(a1, a2);
  v7 = sqlite3_column_bytes(a1, a2);
  if (!v6)
  {
    CLMicroLocationDatabaseColumns::convert_from_sql<CLMicroLocationProto::Measurement>::convert<CLMicroLocationProto::Measurement>(v7);
LABEL_5:
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::string::basic_string[abi:ne180100]<0>(&v11, "Unable to parse protobuf");
    std::runtime_error::runtime_error(exception, &v11);
    exception->__vftable = (std::runtime_error_vtbl *)&off_2511D6820;
  }
  CLMicroLocationProto::Measurement::Measurement(a3);
  result = wireless_diagnostics::google::protobuf::MessageLite::ParseFromArray(v8, v6);
  if ((result & 1) == 0)
    goto LABEL_5;
  return result;
}

void sub_241AA8108(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  CLMicroLocationProto::Measurement *v15;
  void *v16;
  int v17;

  if (a15 < 0)
  {
    operator delete(__p);
    if ((v17 & 1) == 0)
    {
LABEL_6:
      CLMicroLocationProto::Measurement::~Measurement(v15);
      _Unwind_Resume(a1);
    }
  }
  else if (!v17)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v16);
  goto LABEL_6;
}

uint64_t CLMicroLocationDatabaseColumns::convert_from_sql<CLMicroLocationProto::RapportDevice>::convert<CLMicroLocationProto::RapportDevice>@<X0>(sqlite3_stmt *a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  const void *v6;
  uint64_t v7;
  wireless_diagnostics::google::protobuf::MessageLite *v8;
  uint64_t result;
  std::runtime_error *exception;
  std::string v11;

  v6 = sqlite3_column_blob(a1, a2);
  v7 = sqlite3_column_bytes(a1, a2);
  if (!v6)
  {
    CLMicroLocationDatabaseColumns::convert_from_sql<CLMicroLocationProto::RapportDevice>::convert<CLMicroLocationProto::RapportDevice>(v7);
LABEL_5:
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::string::basic_string[abi:ne180100]<0>(&v11, "Unable to parse protobuf");
    std::runtime_error::runtime_error(exception, &v11);
    exception->__vftable = (std::runtime_error_vtbl *)&off_2511D6820;
  }
  v8 = (wireless_diagnostics::google::protobuf::MessageLite *)CLMicroLocationProto::RapportDevice::RapportDevice(a3);
  result = wireless_diagnostics::google::protobuf::MessageLite::ParseFromArray(v8, v6);
  if ((result & 1) == 0)
    goto LABEL_5;
  return result;
}

void sub_241AA8214(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  CLMicroLocationProto::RapportDevice *v15;
  void *v16;
  int v17;

  if (a15 < 0)
  {
    operator delete(__p);
    if ((v17 & 1) == 0)
    {
LABEL_6:
      CLMicroLocationProto::RapportDevice::~RapportDevice(v15);
      _Unwind_Resume(a1);
    }
  }
  else if (!v17)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v16);
  goto LABEL_6;
}

uint64_t CLMicroLocationDatabaseColumns::convert_from_sql<BOOL>::convert<BOOL>(sqlite3_stmt *a1, int a2)
{
  unint64_t v2;
  uint64_t v4;

  v2 = sqlite3_column_int64(a1, a2);
  if ((v2 & 0x8000000000000000) != 0)
  {
    v2 = CLMicroLocationDatabaseColumns::convert_from_sql<BOOL>::convert<BOOL>();
  }
  else if (v2 < 2)
  {
    return v2 != 0;
  }
  v4 = CLMicroLocationDatabaseColumns::convert_from_sql<BOOL>::convert<BOOL>(v2);
  return CLMicroLocationDatabaseColumns::convert_from_sql<CLMicroLocationProto::Configuration>::convert<CLMicroLocationProto::Configuration>(v4);
}

uint64_t CLMicroLocationDatabaseColumns::convert_from_sql<CLMicroLocationProto::Configuration>::convert<CLMicroLocationProto::Configuration>@<X0>(sqlite3_stmt *a1@<X0>, int a2@<W1>, CLMicroLocationProto::Configuration *a3@<X8>)
{
  const void *v6;
  uint64_t v7;
  wireless_diagnostics::google::protobuf::MessageLite *v8;
  uint64_t result;
  std::runtime_error *exception;
  std::string v11;

  v6 = sqlite3_column_blob(a1, a2);
  v7 = sqlite3_column_bytes(a1, a2);
  if (!v6)
  {
    CLMicroLocationDatabaseColumns::convert_from_sql<CLMicroLocationProto::Configuration>::convert<CLMicroLocationProto::Configuration>(v7);
LABEL_5:
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::string::basic_string[abi:ne180100]<0>(&v11, "Unable to parse protobuf");
    std::runtime_error::runtime_error(exception, &v11);
    exception->__vftable = (std::runtime_error_vtbl *)&off_2511D6820;
  }
  CLMicroLocationProto::Configuration::Configuration(a3);
  result = wireless_diagnostics::google::protobuf::MessageLite::ParseFromArray(v8, v6);
  if ((result & 1) == 0)
    goto LABEL_5;
  return result;
}

void sub_241AA8350(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  CLMicroLocationProto::Configuration *v15;
  void *v16;
  int v17;

  if (a15 < 0)
  {
    operator delete(__p);
    if ((v17 & 1) == 0)
    {
LABEL_6:
      CLMicroLocationProto::Configuration::~Configuration(v15);
      _Unwind_Resume(a1);
    }
  }
  else if (!v17)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v16);
  goto LABEL_6;
}

uint64_t CLMicroLocationDatabaseColumns::convert_from_sql<CLMicroLocationProto::Model>::convert<CLMicroLocationProto::Model>@<X0>(sqlite3_stmt *a1@<X0>, int a2@<W1>, CLMicroLocationProto::Model *a3@<X8>)
{
  const void *v6;
  uint64_t v7;
  wireless_diagnostics::google::protobuf::MessageLite *v8;
  uint64_t result;
  std::runtime_error *exception;
  std::string v11;

  v6 = sqlite3_column_blob(a1, a2);
  v7 = sqlite3_column_bytes(a1, a2);
  if (!v6)
  {
    CLMicroLocationDatabaseColumns::convert_from_sql<CLMicroLocationProto::Model>::convert<CLMicroLocationProto::Model>(v7);
LABEL_5:
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::string::basic_string[abi:ne180100]<0>(&v11, "Unable to parse protobuf");
    std::runtime_error::runtime_error(exception, &v11);
    exception->__vftable = (std::runtime_error_vtbl *)&off_2511D6820;
  }
  CLMicroLocationProto::Model::Model(a3);
  result = wireless_diagnostics::google::protobuf::MessageLite::ParseFromArray(v8, v6);
  if ((result & 1) == 0)
    goto LABEL_5;
  return result;
}

void sub_241AA845C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  CLMicroLocationProto::Model *v15;
  void *v16;
  int v17;

  if (a15 < 0)
  {
    operator delete(__p);
    if ((v17 & 1) == 0)
    {
LABEL_6:
      CLMicroLocationProto::Model::~Model(v15);
      _Unwind_Resume(a1);
    }
  }
  else if (!v17)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v16);
  goto LABEL_6;
}

uint64_t CLMicroLocationDatabaseColumns::convert_from_sql<CLMicroLocationProto::ReceivedEvent>::convert<CLMicroLocationProto::ReceivedEvent>@<X0>(sqlite3_stmt *a1@<X0>, int a2@<W1>, CLMicroLocationProto::ReceivedEvent *a3@<X8>)
{
  const void *v6;
  uint64_t v7;
  wireless_diagnostics::google::protobuf::MessageLite *v8;
  uint64_t result;
  std::runtime_error *exception;
  std::string v11;

  v6 = sqlite3_column_blob(a1, a2);
  v7 = sqlite3_column_bytes(a1, a2);
  if (!v6)
  {
    CLMicroLocationDatabaseColumns::convert_from_sql<CLMicroLocationProto::ReceivedEvent>::convert<CLMicroLocationProto::ReceivedEvent>(v7);
LABEL_5:
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::string::basic_string[abi:ne180100]<0>(&v11, "Unable to parse protobuf");
    std::runtime_error::runtime_error(exception, &v11);
    exception->__vftable = (std::runtime_error_vtbl *)&off_2511D6820;
  }
  CLMicroLocationProto::ReceivedEvent::ReceivedEvent(a3);
  result = wireless_diagnostics::google::protobuf::MessageLite::ParseFromArray(v8, v6);
  if ((result & 1) == 0)
    goto LABEL_5;
  return result;
}

void sub_241AA8568(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  CLMicroLocationProto::ReceivedEvent *v15;
  void *v16;
  int v17;

  if (a15 < 0)
  {
    operator delete(__p);
    if ((v17 & 1) == 0)
    {
LABEL_6:
      CLMicroLocationProto::ReceivedEvent::~ReceivedEvent(v15);
      _Unwind_Resume(a1);
    }
  }
  else if (!v17)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v16);
  goto LABEL_6;
}

uint64_t CLMicroLocationDatabaseColumns::ColumnList<ULRecordingEventTable::DatabaseColumns::RecordingUUID,ULRecordingEventTable::DatabaseColumns::RecordingTimestamp,ULRecordingEventTable::DatabaseColumns::RTLOIType,ULRecordingEventTable::DatabaseColumns::ReceivedTimestamp,ULRecordingEventTable::DatabaseColumns::EventType,ULRecordingEventTable::DatabaseColumns::Event,ULRecordingEventTable::DatabaseColumns::RowId,ULRecordingEventTable::DatabaseColumns::TriggerUUID,ULRecordingEventTable::DatabaseColumns::RtLoiGroupId>::commaSeperatedNamesGenerator<0ul,1ul,2ul,3ul,4ul,5ul,6ul,7ul,8ul>(std::string *a1)
{
  CLMicroLocationDatabaseColumns::ColumnList<ULRecordingEventTable::DatabaseColumns::RecordingUUID,ULRecordingEventTable::DatabaseColumns::RecordingTimestamp,ULRecordingEventTable::DatabaseColumns::RTLOIType,ULRecordingEventTable::DatabaseColumns::ReceivedTimestamp,ULRecordingEventTable::DatabaseColumns::EventType,ULRecordingEventTable::DatabaseColumns::Event,ULRecordingEventTable::DatabaseColumns::RowId,ULRecordingEventTable::DatabaseColumns::TriggerUUID,ULRecordingEventTable::DatabaseColumns::RtLoiGroupId>::addColumnName<0ul>(a1);
  CLMicroLocationDatabaseColumns::ColumnList<ULRecordingEventTable::DatabaseColumns::RecordingUUID,ULRecordingEventTable::DatabaseColumns::RecordingTimestamp,ULRecordingEventTable::DatabaseColumns::RTLOIType,ULRecordingEventTable::DatabaseColumns::ReceivedTimestamp,ULRecordingEventTable::DatabaseColumns::EventType,ULRecordingEventTable::DatabaseColumns::Event,ULRecordingEventTable::DatabaseColumns::RowId,ULRecordingEventTable::DatabaseColumns::TriggerUUID,ULRecordingEventTable::DatabaseColumns::RtLoiGroupId>::addColumnName<1ul>(a1);
  CLMicroLocationDatabaseColumns::ColumnList<ULRecordingEventTable::DatabaseColumns::RecordingUUID,ULRecordingEventTable::DatabaseColumns::RecordingTimestamp,ULRecordingEventTable::DatabaseColumns::RTLOIType,ULRecordingEventTable::DatabaseColumns::ReceivedTimestamp,ULRecordingEventTable::DatabaseColumns::EventType,ULRecordingEventTable::DatabaseColumns::Event,ULRecordingEventTable::DatabaseColumns::RowId,ULRecordingEventTable::DatabaseColumns::TriggerUUID,ULRecordingEventTable::DatabaseColumns::RtLoiGroupId>::addColumnName<2ul>(a1);
  CLMicroLocationDatabaseColumns::ColumnList<ULRecordingEventTable::DatabaseColumns::RecordingUUID,ULRecordingEventTable::DatabaseColumns::RecordingTimestamp,ULRecordingEventTable::DatabaseColumns::RTLOIType,ULRecordingEventTable::DatabaseColumns::ReceivedTimestamp,ULRecordingEventTable::DatabaseColumns::EventType,ULRecordingEventTable::DatabaseColumns::Event,ULRecordingEventTable::DatabaseColumns::RowId,ULRecordingEventTable::DatabaseColumns::TriggerUUID,ULRecordingEventTable::DatabaseColumns::RtLoiGroupId>::addColumnName<3ul>(a1);
  CLMicroLocationDatabaseColumns::ColumnList<ULRecordingEventTable::DatabaseColumns::RecordingUUID,ULRecordingEventTable::DatabaseColumns::RecordingTimestamp,ULRecordingEventTable::DatabaseColumns::RTLOIType,ULRecordingEventTable::DatabaseColumns::ReceivedTimestamp,ULRecordingEventTable::DatabaseColumns::EventType,ULRecordingEventTable::DatabaseColumns::Event,ULRecordingEventTable::DatabaseColumns::RowId,ULRecordingEventTable::DatabaseColumns::TriggerUUID,ULRecordingEventTable::DatabaseColumns::RtLoiGroupId>::addColumnName<4ul>(a1);
  CLMicroLocationDatabaseColumns::ColumnList<ULRecordingEventTable::DatabaseColumns::RecordingUUID,ULRecordingEventTable::DatabaseColumns::RecordingTimestamp,ULRecordingEventTable::DatabaseColumns::RTLOIType,ULRecordingEventTable::DatabaseColumns::ReceivedTimestamp,ULRecordingEventTable::DatabaseColumns::EventType,ULRecordingEventTable::DatabaseColumns::Event,ULRecordingEventTable::DatabaseColumns::RowId,ULRecordingEventTable::DatabaseColumns::TriggerUUID,ULRecordingEventTable::DatabaseColumns::RtLoiGroupId>::addColumnName<5ul>(a1);
  CLMicroLocationDatabaseColumns::ColumnList<ULRecordingEventTable::DatabaseColumns::RecordingUUID,ULRecordingEventTable::DatabaseColumns::RecordingTimestamp,ULRecordingEventTable::DatabaseColumns::RTLOIType,ULRecordingEventTable::DatabaseColumns::ReceivedTimestamp,ULRecordingEventTable::DatabaseColumns::EventType,ULRecordingEventTable::DatabaseColumns::Event,ULRecordingEventTable::DatabaseColumns::RowId,ULRecordingEventTable::DatabaseColumns::TriggerUUID,ULRecordingEventTable::DatabaseColumns::RtLoiGroupId>::addColumnName<6ul>(a1);
  CLMicroLocationDatabaseColumns::ColumnList<ULRecordingEventTable::DatabaseColumns::RecordingUUID,ULRecordingEventTable::DatabaseColumns::RecordingTimestamp,ULRecordingEventTable::DatabaseColumns::RTLOIType,ULRecordingEventTable::DatabaseColumns::ReceivedTimestamp,ULRecordingEventTable::DatabaseColumns::EventType,ULRecordingEventTable::DatabaseColumns::Event,ULRecordingEventTable::DatabaseColumns::RowId,ULRecordingEventTable::DatabaseColumns::TriggerUUID,ULRecordingEventTable::DatabaseColumns::RtLoiGroupId>::addColumnName<7ul>(a1);
  return CLMicroLocationDatabaseColumns::ColumnList<ULRecordingEventTable::DatabaseColumns::RecordingUUID,ULRecordingEventTable::DatabaseColumns::RecordingTimestamp,ULRecordingEventTable::DatabaseColumns::RTLOIType,ULRecordingEventTable::DatabaseColumns::ReceivedTimestamp,ULRecordingEventTable::DatabaseColumns::EventType,ULRecordingEventTable::DatabaseColumns::Event,ULRecordingEventTable::DatabaseColumns::RowId,ULRecordingEventTable::DatabaseColumns::TriggerUUID,ULRecordingEventTable::DatabaseColumns::RtLoiGroupId>::addColumnName<8ul>(a1);
}

uint64_t CLMicroLocationDatabaseColumns::ColumnList<ULRecordingEventTable::DatabaseColumns::RecordingUUID,ULRecordingEventTable::DatabaseColumns::RecordingTimestamp,ULRecordingEventTable::DatabaseColumns::RTLOIType,ULRecordingEventTable::DatabaseColumns::ReceivedTimestamp,ULRecordingEventTable::DatabaseColumns::EventType,ULRecordingEventTable::DatabaseColumns::Event,ULRecordingEventTable::DatabaseColumns::RowId,ULRecordingEventTable::DatabaseColumns::TriggerUUID,ULRecordingEventTable::DatabaseColumns::RtLoiGroupId>::addColumnName<0ul>(std::string *a1)
{
  std::string *v2;
  __int128 v3;
  void **v4;
  std::string::size_type v5;
  std::string v7;
  void *__p[2];
  int64_t v9;

  *((_BYTE *)&v7.__r_.__value_.__s + 23) = 0;
  v7.__r_.__value_.__s.__data_[0] = 0;
  v2 = std::string::append(&v7, "RecordingUUID");
  v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  v9 = v2->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v3;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  if (v9 >= 0)
    v4 = __p;
  else
    v4 = (void **)__p[0];
  if (v9 >= 0)
    v5 = HIBYTE(v9);
  else
    v5 = (std::string::size_type)__p[1];
  std::string::append(a1, (const std::string::value_type *)v4, v5);
  if (SHIBYTE(v9) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v7.__r_.__value_.__l.__data_);
  return 0;
}

void sub_241AA86A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

uint64_t CLMicroLocationDatabaseColumns::ColumnList<ULRecordingEventTable::DatabaseColumns::RecordingUUID,ULRecordingEventTable::DatabaseColumns::RecordingTimestamp,ULRecordingEventTable::DatabaseColumns::RTLOIType,ULRecordingEventTable::DatabaseColumns::ReceivedTimestamp,ULRecordingEventTable::DatabaseColumns::EventType,ULRecordingEventTable::DatabaseColumns::Event,ULRecordingEventTable::DatabaseColumns::RowId,ULRecordingEventTable::DatabaseColumns::TriggerUUID,ULRecordingEventTable::DatabaseColumns::RtLoiGroupId>::addColumnName<1ul>(std::string *a1)
{
  std::string *v2;
  __int128 v3;
  void **v4;
  std::string::size_type v5;
  std::string v7;
  void *__p[2];
  int64_t v9;

  *((_BYTE *)&v7.__r_.__value_.__s + 23) = 2;
  strcpy((char *)&v7, ", ");
  v2 = std::string::append(&v7, "RecordingTimestamp");
  v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  v9 = v2->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v3;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  if (v9 >= 0)
    v4 = __p;
  else
    v4 = (void **)__p[0];
  if (v9 >= 0)
    v5 = HIBYTE(v9);
  else
    v5 = (std::string::size_type)__p[1];
  std::string::append(a1, (const std::string::value_type *)v4, v5);
  if (SHIBYTE(v9) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v7.__r_.__value_.__l.__data_);
  return 0;
}

void sub_241AA8784(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

uint64_t CLMicroLocationDatabaseColumns::ColumnList<ULRecordingEventTable::DatabaseColumns::RecordingUUID,ULRecordingEventTable::DatabaseColumns::RecordingTimestamp,ULRecordingEventTable::DatabaseColumns::RTLOIType,ULRecordingEventTable::DatabaseColumns::ReceivedTimestamp,ULRecordingEventTable::DatabaseColumns::EventType,ULRecordingEventTable::DatabaseColumns::Event,ULRecordingEventTable::DatabaseColumns::RowId,ULRecordingEventTable::DatabaseColumns::TriggerUUID,ULRecordingEventTable::DatabaseColumns::RtLoiGroupId>::addColumnName<2ul>(std::string *a1)
{
  std::string *v2;
  __int128 v3;
  void **v4;
  std::string::size_type v5;
  std::string v7;
  void *__p[2];
  int64_t v9;

  *((_BYTE *)&v7.__r_.__value_.__s + 23) = 2;
  strcpy((char *)&v7, ", ");
  v2 = std::string::append(&v7, "RTLOIType");
  v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  v9 = v2->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v3;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  if (v9 >= 0)
    v4 = __p;
  else
    v4 = (void **)__p[0];
  if (v9 >= 0)
    v5 = HIBYTE(v9);
  else
    v5 = (std::string::size_type)__p[1];
  std::string::append(a1, (const std::string::value_type *)v4, v5);
  if (SHIBYTE(v9) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v7.__r_.__value_.__l.__data_);
  return 0;
}

void sub_241AA8860(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

uint64_t CLMicroLocationDatabaseColumns::ColumnList<ULRecordingEventTable::DatabaseColumns::RecordingUUID,ULRecordingEventTable::DatabaseColumns::RecordingTimestamp,ULRecordingEventTable::DatabaseColumns::RTLOIType,ULRecordingEventTable::DatabaseColumns::ReceivedTimestamp,ULRecordingEventTable::DatabaseColumns::EventType,ULRecordingEventTable::DatabaseColumns::Event,ULRecordingEventTable::DatabaseColumns::RowId,ULRecordingEventTable::DatabaseColumns::TriggerUUID,ULRecordingEventTable::DatabaseColumns::RtLoiGroupId>::addColumnName<3ul>(std::string *a1)
{
  std::string *v2;
  __int128 v3;
  void **v4;
  std::string::size_type v5;
  std::string v7;
  void *__p[2];
  int64_t v9;

  *((_BYTE *)&v7.__r_.__value_.__s + 23) = 2;
  strcpy((char *)&v7, ", ");
  v2 = std::string::append(&v7, "ReceivedTimestamp");
  v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  v9 = v2->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v3;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  if (v9 >= 0)
    v4 = __p;
  else
    v4 = (void **)__p[0];
  if (v9 >= 0)
    v5 = HIBYTE(v9);
  else
    v5 = (std::string::size_type)__p[1];
  std::string::append(a1, (const std::string::value_type *)v4, v5);
  if (SHIBYTE(v9) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v7.__r_.__value_.__l.__data_);
  return 0;
}

void sub_241AA893C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

uint64_t CLMicroLocationDatabaseColumns::ColumnList<ULRecordingEventTable::DatabaseColumns::RecordingUUID,ULRecordingEventTable::DatabaseColumns::RecordingTimestamp,ULRecordingEventTable::DatabaseColumns::RTLOIType,ULRecordingEventTable::DatabaseColumns::ReceivedTimestamp,ULRecordingEventTable::DatabaseColumns::EventType,ULRecordingEventTable::DatabaseColumns::Event,ULRecordingEventTable::DatabaseColumns::RowId,ULRecordingEventTable::DatabaseColumns::TriggerUUID,ULRecordingEventTable::DatabaseColumns::RtLoiGroupId>::addColumnName<4ul>(std::string *a1)
{
  std::string *v2;
  __int128 v3;
  void **v4;
  std::string::size_type v5;
  std::string v7;
  void *__p[2];
  int64_t v9;

  *((_BYTE *)&v7.__r_.__value_.__s + 23) = 2;
  strcpy((char *)&v7, ", ");
  v2 = std::string::append(&v7, "EventType");
  v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  v9 = v2->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v3;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  if (v9 >= 0)
    v4 = __p;
  else
    v4 = (void **)__p[0];
  if (v9 >= 0)
    v5 = HIBYTE(v9);
  else
    v5 = (std::string::size_type)__p[1];
  std::string::append(a1, (const std::string::value_type *)v4, v5);
  if (SHIBYTE(v9) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v7.__r_.__value_.__l.__data_);
  return 0;
}

void sub_241AA8A18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

uint64_t CLMicroLocationDatabaseColumns::ColumnList<ULRecordingEventTable::DatabaseColumns::RecordingUUID,ULRecordingEventTable::DatabaseColumns::RecordingTimestamp,ULRecordingEventTable::DatabaseColumns::RTLOIType,ULRecordingEventTable::DatabaseColumns::ReceivedTimestamp,ULRecordingEventTable::DatabaseColumns::EventType,ULRecordingEventTable::DatabaseColumns::Event,ULRecordingEventTable::DatabaseColumns::RowId,ULRecordingEventTable::DatabaseColumns::TriggerUUID,ULRecordingEventTable::DatabaseColumns::RtLoiGroupId>::addColumnName<5ul>(std::string *a1)
{
  std::string *v2;
  __int128 v3;
  void **v4;
  std::string::size_type v5;
  std::string v7;
  void *__p[2];
  int64_t v9;

  *((_BYTE *)&v7.__r_.__value_.__s + 23) = 2;
  strcpy((char *)&v7, ", ");
  v2 = std::string::append(&v7, "Event");
  v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  v9 = v2->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v3;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  if (v9 >= 0)
    v4 = __p;
  else
    v4 = (void **)__p[0];
  if (v9 >= 0)
    v5 = HIBYTE(v9);
  else
    v5 = (std::string::size_type)__p[1];
  std::string::append(a1, (const std::string::value_type *)v4, v5);
  if (SHIBYTE(v9) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v7.__r_.__value_.__l.__data_);
  return 0;
}

void sub_241AA8AF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

uint64_t CLMicroLocationDatabaseColumns::ColumnList<ULRecordingEventTable::DatabaseColumns::RecordingUUID,ULRecordingEventTable::DatabaseColumns::RecordingTimestamp,ULRecordingEventTable::DatabaseColumns::RTLOIType,ULRecordingEventTable::DatabaseColumns::ReceivedTimestamp,ULRecordingEventTable::DatabaseColumns::EventType,ULRecordingEventTable::DatabaseColumns::Event,ULRecordingEventTable::DatabaseColumns::RowId,ULRecordingEventTable::DatabaseColumns::TriggerUUID,ULRecordingEventTable::DatabaseColumns::RtLoiGroupId>::addColumnName<6ul>(std::string *a1)
{
  std::string *v2;
  __int128 v3;
  void **v4;
  std::string::size_type v5;
  std::string v7;
  void *__p[2];
  int64_t v9;

  *((_BYTE *)&v7.__r_.__value_.__s + 23) = 2;
  strcpy((char *)&v7, ", ");
  v2 = std::string::append(&v7, "RowId");
  v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  v9 = v2->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v3;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  if (v9 >= 0)
    v4 = __p;
  else
    v4 = (void **)__p[0];
  if (v9 >= 0)
    v5 = HIBYTE(v9);
  else
    v5 = (std::string::size_type)__p[1];
  std::string::append(a1, (const std::string::value_type *)v4, v5);
  if (SHIBYTE(v9) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v7.__r_.__value_.__l.__data_);
  return 0;
}

void sub_241AA8BD0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

uint64_t CLMicroLocationDatabaseColumns::ColumnList<ULRecordingEventTable::DatabaseColumns::RecordingUUID,ULRecordingEventTable::DatabaseColumns::RecordingTimestamp,ULRecordingEventTable::DatabaseColumns::RTLOIType,ULRecordingEventTable::DatabaseColumns::ReceivedTimestamp,ULRecordingEventTable::DatabaseColumns::EventType,ULRecordingEventTable::DatabaseColumns::Event,ULRecordingEventTable::DatabaseColumns::RowId,ULRecordingEventTable::DatabaseColumns::TriggerUUID,ULRecordingEventTable::DatabaseColumns::RtLoiGroupId>::addColumnName<7ul>(std::string *a1)
{
  std::string *v2;
  __int128 v3;
  void **v4;
  std::string::size_type v5;
  std::string v7;
  void *__p[2];
  int64_t v9;

  *((_BYTE *)&v7.__r_.__value_.__s + 23) = 2;
  strcpy((char *)&v7, ", ");
  v2 = std::string::append(&v7, "TriggerUUID");
  v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  v9 = v2->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v3;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  if (v9 >= 0)
    v4 = __p;
  else
    v4 = (void **)__p[0];
  if (v9 >= 0)
    v5 = HIBYTE(v9);
  else
    v5 = (std::string::size_type)__p[1];
  std::string::append(a1, (const std::string::value_type *)v4, v5);
  if (SHIBYTE(v9) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v7.__r_.__value_.__l.__data_);
  return 0;
}

void sub_241AA8CAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

uint64_t CLMicroLocationDatabaseColumns::ColumnList<ULRecordingEventTable::DatabaseColumns::RecordingUUID,ULRecordingEventTable::DatabaseColumns::RecordingTimestamp,ULRecordingEventTable::DatabaseColumns::RTLOIType,ULRecordingEventTable::DatabaseColumns::ReceivedTimestamp,ULRecordingEventTable::DatabaseColumns::EventType,ULRecordingEventTable::DatabaseColumns::Event,ULRecordingEventTable::DatabaseColumns::RowId,ULRecordingEventTable::DatabaseColumns::TriggerUUID,ULRecordingEventTable::DatabaseColumns::RtLoiGroupId>::addColumnName<8ul>(std::string *a1)
{
  std::string *v2;
  __int128 v3;
  void **v4;
  std::string::size_type v5;
  std::string v7;
  void *__p[2];
  int64_t v9;

  *((_BYTE *)&v7.__r_.__value_.__s + 23) = 2;
  strcpy((char *)&v7, ", ");
  v2 = std::string::append(&v7, "RtLoiGroupId");
  v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  v9 = v2->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v3;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  if (v9 >= 0)
    v4 = __p;
  else
    v4 = (void **)__p[0];
  if (v9 >= 0)
    v5 = HIBYTE(v9);
  else
    v5 = (std::string::size_type)__p[1];
  std::string::append(a1, (const std::string::value_type *)v4, v5);
  if (SHIBYTE(v9) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v7.__r_.__value_.__l.__data_);
  return 0;
}

void sub_241AA8D88(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<CLMicroLocationRecordingEventsTable::Entry>::__emplace_back_slow_path<boost::uuids::uuid &,std::chrono::time_point<cl::chrono::CFAbsoluteTimeClock,std::chrono::duration<long double,std::ratio<1l,1l>>> &,std::string &,std::chrono::time_point<cl::chrono::CFAbsoluteTimeClock,std::chrono::duration<long double,std::ratio<1l,1l>>> &,CLMicroLocationProto::EventType &,CLMicroLocationProto::RecordingEvent &,std::string &,boost::uuids::uuid>(uint64_t *a1, uint64_t *a2, double *a3, uint64_t a4, double *a5, int *a6, CLMicroLocationProto::RecordingEvent *a7, uint64_t a8, uint64_t *a9)
{
  unint64_t v10;
  unint64_t v11;
  unint64_t v19;
  char *v20;
  uint64_t v21;
  unint64_t v23;
  void *v24;
  char *v25;
  char *v26;
  char *v27;
  uint64_t *v28;

  v10 = 0xEF7BDEF7BDEF7BDFLL * ((a1[1] - *a1) >> 3);
  v11 = v10 + 1;
  if (v10 + 1 > 0x108421084210842)
    std::vector<CLMicroLocationProto::ConfidenceReason>::__throw_length_error[abi:ne180100]();
  if (0xDEF7BDEF7BDEF7BELL * ((a1[2] - *a1) >> 3) > v11)
    v11 = 0xDEF7BDEF7BDEF7BELL * ((a1[2] - *a1) >> 3);
  if (0xEF7BDEF7BDEF7BDFLL * ((a1[2] - *a1) >> 3) >= 0x84210842108421)
    v19 = 0x108421084210842;
  else
    v19 = v11;
  v28 = a1 + 2;
  if (v19)
  {
    v23 = v10;
    v20 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CLMicroLocationRecordingEventsTable::Entry>>((uint64_t)(a1 + 2), v19);
    v10 = v23;
  }
  else
  {
    v20 = 0;
  }
  v24 = v20;
  v25 = &v20[248 * v10];
  v27 = &v20[248 * v19];
  std::allocator<CLMicroLocationRecordingEventsTable::Entry>::construct[abi:ne180100]<CLMicroLocationRecordingEventsTable::Entry,boost::uuids::uuid &,std::chrono::time_point<cl::chrono::CFAbsoluteTimeClock,std::chrono::duration<long double,std::ratio<1l,1l>>> &,std::string &,std::chrono::time_point<cl::chrono::CFAbsoluteTimeClock,std::chrono::duration<long double,std::ratio<1l,1l>>> &,CLMicroLocationProto::EventType &,CLMicroLocationProto::RecordingEvent &,std::string &,boost::uuids::uuid>((uint64_t)(a1 + 2), (uint64_t)v25, a2, a3, a4, a5, a6, a7, a8, a9);
  v26 = v25 + 248;
  std::vector<CLMicroLocationRecordingEventsTable::Entry>::__swap_out_circular_buffer(a1, &v24);
  v21 = a1[1];
  std::__split_buffer<CLMicroLocationRecordingEventsTable::Entry>::~__split_buffer(&v24);
  return v21;
}

void sub_241AA8F20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  std::__split_buffer<CLMicroLocationRecordingEventsTable::Entry>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

void std::allocator<CLMicroLocationRecordingEventsTable::Entry>::construct[abi:ne180100]<CLMicroLocationRecordingEventsTable::Entry,boost::uuids::uuid &,std::chrono::time_point<cl::chrono::CFAbsoluteTimeClock,std::chrono::duration<long double,std::ratio<1l,1l>>> &,std::string &,std::chrono::time_point<cl::chrono::CFAbsoluteTimeClock,std::chrono::duration<long double,std::ratio<1l,1l>>> &,CLMicroLocationProto::EventType &,CLMicroLocationProto::RecordingEvent &,std::string &,boost::uuids::uuid>(uint64_t a1, uint64_t a2, uint64_t *a3, double *a4, uint64_t a5, double *a6, int *a7, CLMicroLocationProto::RecordingEvent *a8, uint64_t a9, uint64_t *a10)
{
  uint64_t v14;
  uint64_t v15;
  double v16;
  double v17;
  int v18;
  std::string v19;
  std::string v20;

  v14 = *a3;
  v15 = a3[1];
  v16 = *a4;
  if (*(char *)(a5 + 23) < 0)
    std::string::__init_copy_ctor_external(&v20, *(const std::string::value_type **)a5, *(_QWORD *)(a5 + 8));
  else
    v20 = *(std::string *)a5;
  v17 = *a6;
  v18 = *a7;
  if (*(char *)(a9 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v19, *(const std::string::value_type **)a9, *(_QWORD *)(a9 + 8));
  }
  else
  {
    *(_OWORD *)&v19.__r_.__value_.__l.__data_ = *(_OWORD *)a9;
    v19.__r_.__value_.__r.__words[2] = *(_QWORD *)(a9 + 16);
  }
  CLMicroLocationRecordingEventsTable::Entry::Entry(a2, v14, v15, (__int128 *)&v20, v18, a8, (uint64_t)&v19, (int)a8, v16, v17, *a10, a10[1]);
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v19.__r_.__value_.__l.__data_);
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v20.__r_.__value_.__l.__data_);
}

void sub_241AA903C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t CLMicroLocationDatabaseColumns::ColumnList<ULMeasurementTable::DatabaseColumns::RecordingUUID,ULMeasurementTable::DatabaseColumns::ScanCFTimestamp,ULMeasurementTable::DatabaseColumns::ScanMCTimestamp,ULMeasurementTable::DatabaseColumns::Data,ULMeasurementTable::DatabaseColumns::Flags,ULMeasurementTable::DatabaseColumns::RowId>::commaSeperatedNamesGenerator<0ul,1ul,2ul,3ul,4ul,5ul>(std::string *a1)
{
  CLMicroLocationDatabaseColumns::ColumnList<ULMeasurementTable::DatabaseColumns::RecordingUUID,ULMeasurementTable::DatabaseColumns::ScanCFTimestamp,ULMeasurementTable::DatabaseColumns::ScanMCTimestamp,ULMeasurementTable::DatabaseColumns::Data,ULMeasurementTable::DatabaseColumns::Flags,ULMeasurementTable::DatabaseColumns::RowId>::addColumnName<0ul>(a1);
  CLMicroLocationDatabaseColumns::ColumnList<ULMeasurementTable::DatabaseColumns::RecordingUUID,ULMeasurementTable::DatabaseColumns::ScanCFTimestamp,ULMeasurementTable::DatabaseColumns::ScanMCTimestamp,ULMeasurementTable::DatabaseColumns::Data,ULMeasurementTable::DatabaseColumns::Flags,ULMeasurementTable::DatabaseColumns::RowId>::addColumnName<1ul>(a1);
  CLMicroLocationDatabaseColumns::ColumnList<ULMeasurementTable::DatabaseColumns::RecordingUUID,ULMeasurementTable::DatabaseColumns::ScanCFTimestamp,ULMeasurementTable::DatabaseColumns::ScanMCTimestamp,ULMeasurementTable::DatabaseColumns::Data,ULMeasurementTable::DatabaseColumns::Flags,ULMeasurementTable::DatabaseColumns::RowId>::addColumnName<2ul>(a1);
  CLMicroLocationDatabaseColumns::ColumnList<ULMeasurementTable::DatabaseColumns::RecordingUUID,ULMeasurementTable::DatabaseColumns::ScanCFTimestamp,ULMeasurementTable::DatabaseColumns::ScanMCTimestamp,ULMeasurementTable::DatabaseColumns::Data,ULMeasurementTable::DatabaseColumns::Flags,ULMeasurementTable::DatabaseColumns::RowId>::addColumnName<3ul>(a1);
  CLMicroLocationDatabaseColumns::ColumnList<ULMeasurementTable::DatabaseColumns::RecordingUUID,ULMeasurementTable::DatabaseColumns::ScanCFTimestamp,ULMeasurementTable::DatabaseColumns::ScanMCTimestamp,ULMeasurementTable::DatabaseColumns::Data,ULMeasurementTable::DatabaseColumns::Flags,ULMeasurementTable::DatabaseColumns::RowId>::addColumnName<4ul>(a1);
  return CLMicroLocationDatabaseColumns::ColumnList<ULMeasurementTable::DatabaseColumns::RecordingUUID,ULMeasurementTable::DatabaseColumns::ScanCFTimestamp,ULMeasurementTable::DatabaseColumns::ScanMCTimestamp,ULMeasurementTable::DatabaseColumns::Data,ULMeasurementTable::DatabaseColumns::Flags,ULMeasurementTable::DatabaseColumns::RowId>::addColumnName<5ul>(a1);
}

uint64_t CLMicroLocationDatabaseColumns::ColumnList<ULMeasurementTable::DatabaseColumns::RecordingUUID,ULMeasurementTable::DatabaseColumns::ScanCFTimestamp,ULMeasurementTable::DatabaseColumns::ScanMCTimestamp,ULMeasurementTable::DatabaseColumns::Data,ULMeasurementTable::DatabaseColumns::Flags,ULMeasurementTable::DatabaseColumns::RowId>::addColumnName<0ul>(std::string *a1)
{
  std::string *v2;
  __int128 v3;
  void **v4;
  std::string::size_type v5;
  std::string v7;
  void *__p[2];
  int64_t v9;

  *((_BYTE *)&v7.__r_.__value_.__s + 23) = 0;
  v7.__r_.__value_.__s.__data_[0] = 0;
  v2 = std::string::append(&v7, "RecordingUUID");
  v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  v9 = v2->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v3;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  if (v9 >= 0)
    v4 = __p;
  else
    v4 = (void **)__p[0];
  if (v9 >= 0)
    v5 = HIBYTE(v9);
  else
    v5 = (std::string::size_type)__p[1];
  std::string::append(a1, (const std::string::value_type *)v4, v5);
  if (SHIBYTE(v9) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v7.__r_.__value_.__l.__data_);
  return 0;
}

void sub_241AA9150(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

uint64_t CLMicroLocationDatabaseColumns::ColumnList<ULMeasurementTable::DatabaseColumns::RecordingUUID,ULMeasurementTable::DatabaseColumns::ScanCFTimestamp,ULMeasurementTable::DatabaseColumns::ScanMCTimestamp,ULMeasurementTable::DatabaseColumns::Data,ULMeasurementTable::DatabaseColumns::Flags,ULMeasurementTable::DatabaseColumns::RowId>::addColumnName<1ul>(std::string *a1)
{
  std::string *v2;
  __int128 v3;
  void **v4;
  std::string::size_type v5;
  std::string v7;
  void *__p[2];
  int64_t v9;

  *((_BYTE *)&v7.__r_.__value_.__s + 23) = 2;
  strcpy((char *)&v7, ", ");
  v2 = std::string::append(&v7, "ScanCFTimestamp");
  v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  v9 = v2->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v3;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  if (v9 >= 0)
    v4 = __p;
  else
    v4 = (void **)__p[0];
  if (v9 >= 0)
    v5 = HIBYTE(v9);
  else
    v5 = (std::string::size_type)__p[1];
  std::string::append(a1, (const std::string::value_type *)v4, v5);
  if (SHIBYTE(v9) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v7.__r_.__value_.__l.__data_);
  return 0;
}

void sub_241AA922C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

uint64_t CLMicroLocationDatabaseColumns::ColumnList<ULMeasurementTable::DatabaseColumns::RecordingUUID,ULMeasurementTable::DatabaseColumns::ScanCFTimestamp,ULMeasurementTable::DatabaseColumns::ScanMCTimestamp,ULMeasurementTable::DatabaseColumns::Data,ULMeasurementTable::DatabaseColumns::Flags,ULMeasurementTable::DatabaseColumns::RowId>::addColumnName<2ul>(std::string *a1)
{
  std::string *v2;
  __int128 v3;
  void **v4;
  std::string::size_type v5;
  std::string v7;
  void *__p[2];
  int64_t v9;

  *((_BYTE *)&v7.__r_.__value_.__s + 23) = 2;
  strcpy((char *)&v7, ", ");
  v2 = std::string::append(&v7, "ScanMCTimestamp");
  v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  v9 = v2->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v3;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  if (v9 >= 0)
    v4 = __p;
  else
    v4 = (void **)__p[0];
  if (v9 >= 0)
    v5 = HIBYTE(v9);
  else
    v5 = (std::string::size_type)__p[1];
  std::string::append(a1, (const std::string::value_type *)v4, v5);
  if (SHIBYTE(v9) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v7.__r_.__value_.__l.__data_);
  return 0;
}

void sub_241AA9308(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

uint64_t CLMicroLocationDatabaseColumns::ColumnList<ULMeasurementTable::DatabaseColumns::RecordingUUID,ULMeasurementTable::DatabaseColumns::ScanCFTimestamp,ULMeasurementTable::DatabaseColumns::ScanMCTimestamp,ULMeasurementTable::DatabaseColumns::Data,ULMeasurementTable::DatabaseColumns::Flags,ULMeasurementTable::DatabaseColumns::RowId>::addColumnName<3ul>(std::string *a1)
{
  std::string *v2;
  __int128 v3;
  void **v4;
  std::string::size_type v5;
  std::string v7;
  void *__p[2];
  int64_t v9;

  *((_BYTE *)&v7.__r_.__value_.__s + 23) = 2;
  strcpy((char *)&v7, ", ");
  v2 = std::string::append(&v7, "Data");
  v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  v9 = v2->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v3;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  if (v9 >= 0)
    v4 = __p;
  else
    v4 = (void **)__p[0];
  if (v9 >= 0)
    v5 = HIBYTE(v9);
  else
    v5 = (std::string::size_type)__p[1];
  std::string::append(a1, (const std::string::value_type *)v4, v5);
  if (SHIBYTE(v9) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v7.__r_.__value_.__l.__data_);
  return 0;
}

void sub_241AA93E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

uint64_t CLMicroLocationDatabaseColumns::ColumnList<ULMeasurementTable::DatabaseColumns::RecordingUUID,ULMeasurementTable::DatabaseColumns::ScanCFTimestamp,ULMeasurementTable::DatabaseColumns::ScanMCTimestamp,ULMeasurementTable::DatabaseColumns::Data,ULMeasurementTable::DatabaseColumns::Flags,ULMeasurementTable::DatabaseColumns::RowId>::addColumnName<4ul>(std::string *a1)
{
  std::string *v2;
  __int128 v3;
  void **v4;
  std::string::size_type v5;
  std::string v7;
  void *__p[2];
  int64_t v9;

  *((_BYTE *)&v7.__r_.__value_.__s + 23) = 2;
  strcpy((char *)&v7, ", ");
  v2 = std::string::append(&v7, "Flags");
  v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  v9 = v2->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v3;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  if (v9 >= 0)
    v4 = __p;
  else
    v4 = (void **)__p[0];
  if (v9 >= 0)
    v5 = HIBYTE(v9);
  else
    v5 = (std::string::size_type)__p[1];
  std::string::append(a1, (const std::string::value_type *)v4, v5);
  if (SHIBYTE(v9) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v7.__r_.__value_.__l.__data_);
  return 0;
}

void sub_241AA94C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

uint64_t CLMicroLocationDatabaseColumns::ColumnList<ULMeasurementTable::DatabaseColumns::RecordingUUID,ULMeasurementTable::DatabaseColumns::ScanCFTimestamp,ULMeasurementTable::DatabaseColumns::ScanMCTimestamp,ULMeasurementTable::DatabaseColumns::Data,ULMeasurementTable::DatabaseColumns::Flags,ULMeasurementTable::DatabaseColumns::RowId>::addColumnName<5ul>(std::string *a1)
{
  std::string *v2;
  __int128 v3;
  void **v4;
  std::string::size_type v5;
  std::string v7;
  void *__p[2];
  int64_t v9;

  *((_BYTE *)&v7.__r_.__value_.__s + 23) = 2;
  strcpy((char *)&v7, ", ");
  v2 = std::string::append(&v7, "RowId");
  v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  v9 = v2->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v3;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  if (v9 >= 0)
    v4 = __p;
  else
    v4 = (void **)__p[0];
  if (v9 >= 0)
    v5 = HIBYTE(v9);
  else
    v5 = (std::string::size_type)__p[1];
  std::string::append(a1, (const std::string::value_type *)v4, v5);
  if (SHIBYTE(v9) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v7.__r_.__value_.__l.__data_);
  return 0;
}

void sub_241AA959C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<CLMicroLocationMeasurementTable::Entry>::__emplace_back_slow_path<boost::uuids::uuid &,std::chrono::time_point<cl::chrono::CFAbsoluteTimeClock,std::chrono::duration<long double,std::ratio<1l,1l>>> &,unsigned long long &,CLMicroLocationProto::Measurement &,CLMicroLocationMeasurementTable::EntryFlags &>(uint64_t *a1, uint64_t *a2, double *a3, uint64_t *a4, CLMicroLocationProto::Measurement *a5, unsigned int *a6)
{
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  char *v21;
  char *v22;
  uint64_t v23;
  char *v24;
  uint64_t *v25;

  v7 = *a1;
  v8 = 0xEEEEEEEEEEEEEEEFLL * ((a1[1] - *a1) >> 3);
  v9 = v8 + 1;
  if (v8 + 1 > 0x222222222222222)
    std::vector<CLMicroLocationProto::ConfidenceReason>::__throw_length_error[abi:ne180100]();
  v15 = (uint64_t)(a1 + 2);
  v16 = 0xEEEEEEEEEEEEEEEFLL * ((a1[2] - v7) >> 3);
  if (2 * v16 > v9)
    v9 = 2 * v16;
  if (v16 >= 0x111111111111111)
    v17 = 0x222222222222222;
  else
    v17 = v9;
  v25 = a1 + 2;
  if (v17)
    v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CLMicroLocationMeasurementTable::Entry>>(v15, v17);
  else
    v18 = 0;
  v21 = v18;
  v22 = &v18[120 * v8];
  v23 = (uint64_t)v22;
  v24 = &v18[120 * v17];
  CLMicroLocationMeasurementTable::Entry::Entry((uint64_t)v22, *a2, a2[1], *a4, a5, *a6 | 0x100000000, *a3);
  v23 = (uint64_t)(v22 + 120);
  std::vector<CLMicroLocationMeasurementTable::Entry>::__swap_out_circular_buffer(a1, &v21);
  v19 = a1[1];
  std::__split_buffer<CLMicroLocationMeasurementTable::Entry>::~__split_buffer((uint64_t)&v21);
  return v19;
}

void sub_241AA96F4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<CLMicroLocationMeasurementTable::Entry>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t CLMicroLocationDatabaseColumns::ColumnList<ULLabelTable::DatabaseColumns::TriggerUUID,ULLabelTable::DatabaseColumns::ClientID,ULLabelTable::DatabaseColumns::LabelUUID,ULLabelTable::DatabaseColumns::ReceivedTimestamp,ULLabelTable::DatabaseColumns::RowId>::commaSeperatedNamesGenerator<0ul,1ul,2ul,3ul,4ul>(std::string *a1)
{
  CLMicroLocationDatabaseColumns::ColumnList<ULLabelTable::DatabaseColumns::TriggerUUID,ULLabelTable::DatabaseColumns::ClientID,ULLabelTable::DatabaseColumns::LabelUUID,ULLabelTable::DatabaseColumns::ReceivedTimestamp,ULLabelTable::DatabaseColumns::RowId>::addColumnName<0ul>(a1);
  CLMicroLocationDatabaseColumns::ColumnList<ULLabelTable::DatabaseColumns::TriggerUUID,ULLabelTable::DatabaseColumns::ClientID,ULLabelTable::DatabaseColumns::LabelUUID,ULLabelTable::DatabaseColumns::ReceivedTimestamp,ULLabelTable::DatabaseColumns::RowId>::addColumnName<1ul>(a1);
  CLMicroLocationDatabaseColumns::ColumnList<ULLabelTable::DatabaseColumns::TriggerUUID,ULLabelTable::DatabaseColumns::ClientID,ULLabelTable::DatabaseColumns::LabelUUID,ULLabelTable::DatabaseColumns::ReceivedTimestamp,ULLabelTable::DatabaseColumns::RowId>::addColumnName<2ul>(a1);
  CLMicroLocationDatabaseColumns::ColumnList<ULLabelTable::DatabaseColumns::TriggerUUID,ULLabelTable::DatabaseColumns::ClientID,ULLabelTable::DatabaseColumns::LabelUUID,ULLabelTable::DatabaseColumns::ReceivedTimestamp,ULLabelTable::DatabaseColumns::RowId>::addColumnName<3ul>(a1);
  return CLMicroLocationDatabaseColumns::ColumnList<ULLabelTable::DatabaseColumns::TriggerUUID,ULLabelTable::DatabaseColumns::ClientID,ULLabelTable::DatabaseColumns::LabelUUID,ULLabelTable::DatabaseColumns::ReceivedTimestamp,ULLabelTable::DatabaseColumns::RowId>::addColumnName<4ul>(a1);
}

uint64_t CLMicroLocationDatabaseColumns::ColumnList<ULLabelTable::DatabaseColumns::TriggerUUID,ULLabelTable::DatabaseColumns::ClientID,ULLabelTable::DatabaseColumns::LabelUUID,ULLabelTable::DatabaseColumns::ReceivedTimestamp,ULLabelTable::DatabaseColumns::RowId>::addColumnName<0ul>(std::string *a1)
{
  std::string *v2;
  __int128 v3;
  void **v4;
  std::string::size_type v5;
  std::string v7;
  void *__p[2];
  int64_t v9;

  *((_BYTE *)&v7.__r_.__value_.__s + 23) = 0;
  v7.__r_.__value_.__s.__data_[0] = 0;
  v2 = std::string::append(&v7, "TriggerUUID");
  v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  v9 = v2->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v3;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  if (v9 >= 0)
    v4 = __p;
  else
    v4 = (void **)__p[0];
  if (v9 >= 0)
    v5 = HIBYTE(v9);
  else
    v5 = (std::string::size_type)__p[1];
  std::string::append(a1, (const std::string::value_type *)v4, v5);
  if (SHIBYTE(v9) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v7.__r_.__value_.__l.__data_);
  return 0;
}

void sub_241AA97E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

uint64_t CLMicroLocationDatabaseColumns::ColumnList<ULLabelTable::DatabaseColumns::TriggerUUID,ULLabelTable::DatabaseColumns::ClientID,ULLabelTable::DatabaseColumns::LabelUUID,ULLabelTable::DatabaseColumns::ReceivedTimestamp,ULLabelTable::DatabaseColumns::RowId>::addColumnName<1ul>(std::string *a1)
{
  std::string *v2;
  __int128 v3;
  void **v4;
  std::string::size_type v5;
  std::string v7;
  void *__p[2];
  int64_t v9;

  *((_BYTE *)&v7.__r_.__value_.__s + 23) = 2;
  strcpy((char *)&v7, ", ");
  v2 = std::string::append(&v7, "ClientID");
  v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  v9 = v2->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v3;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  if (v9 >= 0)
    v4 = __p;
  else
    v4 = (void **)__p[0];
  if (v9 >= 0)
    v5 = HIBYTE(v9);
  else
    v5 = (std::string::size_type)__p[1];
  std::string::append(a1, (const std::string::value_type *)v4, v5);
  if (SHIBYTE(v9) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v7.__r_.__value_.__l.__data_);
  return 0;
}

void sub_241AA98BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

uint64_t CLMicroLocationDatabaseColumns::ColumnList<ULLabelTable::DatabaseColumns::TriggerUUID,ULLabelTable::DatabaseColumns::ClientID,ULLabelTable::DatabaseColumns::LabelUUID,ULLabelTable::DatabaseColumns::ReceivedTimestamp,ULLabelTable::DatabaseColumns::RowId>::addColumnName<2ul>(std::string *a1)
{
  std::string *v2;
  __int128 v3;
  void **v4;
  std::string::size_type v5;
  std::string v7;
  void *__p[2];
  int64_t v9;

  *((_BYTE *)&v7.__r_.__value_.__s + 23) = 2;
  strcpy((char *)&v7, ", ");
  v2 = std::string::append(&v7, "LabelUUID");
  v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  v9 = v2->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v3;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  if (v9 >= 0)
    v4 = __p;
  else
    v4 = (void **)__p[0];
  if (v9 >= 0)
    v5 = HIBYTE(v9);
  else
    v5 = (std::string::size_type)__p[1];
  std::string::append(a1, (const std::string::value_type *)v4, v5);
  if (SHIBYTE(v9) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v7.__r_.__value_.__l.__data_);
  return 0;
}

void sub_241AA9998(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

uint64_t CLMicroLocationDatabaseColumns::ColumnList<ULLabelTable::DatabaseColumns::TriggerUUID,ULLabelTable::DatabaseColumns::ClientID,ULLabelTable::DatabaseColumns::LabelUUID,ULLabelTable::DatabaseColumns::ReceivedTimestamp,ULLabelTable::DatabaseColumns::RowId>::addColumnName<3ul>(std::string *a1)
{
  std::string *v2;
  __int128 v3;
  void **v4;
  std::string::size_type v5;
  std::string v7;
  void *__p[2];
  int64_t v9;

  *((_BYTE *)&v7.__r_.__value_.__s + 23) = 2;
  strcpy((char *)&v7, ", ");
  v2 = std::string::append(&v7, "ReceivedTimestamp");
  v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  v9 = v2->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v3;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  if (v9 >= 0)
    v4 = __p;
  else
    v4 = (void **)__p[0];
  if (v9 >= 0)
    v5 = HIBYTE(v9);
  else
    v5 = (std::string::size_type)__p[1];
  std::string::append(a1, (const std::string::value_type *)v4, v5);
  if (SHIBYTE(v9) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v7.__r_.__value_.__l.__data_);
  return 0;
}

void sub_241AA9A74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

uint64_t CLMicroLocationDatabaseColumns::ColumnList<ULLabelTable::DatabaseColumns::TriggerUUID,ULLabelTable::DatabaseColumns::ClientID,ULLabelTable::DatabaseColumns::LabelUUID,ULLabelTable::DatabaseColumns::ReceivedTimestamp,ULLabelTable::DatabaseColumns::RowId>::addColumnName<4ul>(std::string *a1)
{
  std::string *v2;
  __int128 v3;
  void **v4;
  std::string::size_type v5;
  std::string v7;
  void *__p[2];
  int64_t v9;

  *((_BYTE *)&v7.__r_.__value_.__s + 23) = 2;
  strcpy((char *)&v7, ", ");
  v2 = std::string::append(&v7, "RowId");
  v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  v9 = v2->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v3;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  if (v9 >= 0)
    v4 = __p;
  else
    v4 = (void **)__p[0];
  if (v9 >= 0)
    v5 = HIBYTE(v9);
  else
    v5 = (std::string::size_type)__p[1];
  std::string::append(a1, (const std::string::value_type *)v4, v5);
  if (SHIBYTE(v9) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v7.__r_.__value_.__l.__data_);
  return 0;
}

void sub_241AA9B50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<CLMicroLocationRecordingLabelsTable::Entry>::__emplace_back_slow_path<boost::uuids::uuid &,std::string &,boost::uuids::uuid &,std::chrono::time_point<cl::chrono::CFAbsoluteTimeClock,std::chrono::duration<long double,std::ratio<1l,1l>>> &>(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t *a4, double *a5)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  uint64_t v15;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  uint64_t *v21;

  v6 = (a1[1] - *a1) >> 6;
  v7 = v6 + 1;
  if ((unint64_t)(v6 + 1) >> 58)
    std::vector<CLMicroLocationProto::ConfidenceReason>::__throw_length_error[abi:ne180100]();
  v12 = a1[2] - *a1;
  if (v12 >> 5 > v7)
    v7 = v12 >> 5;
  if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFC0)
    v13 = 0x3FFFFFFFFFFFFFFLL;
  else
    v13 = v7;
  v21 = a1 + 2;
  if (v13)
    v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CLMicroLocationRecordingLabelsTable::Entry>>((uint64_t)(a1 + 2), v13);
  else
    v14 = 0;
  v17 = v14;
  v18 = &v14[64 * v6];
  v20 = &v14[64 * v13];
  std::allocator<CLMicroLocationRecordingLabelsTable::Entry>::construct[abi:ne180100]<CLMicroLocationRecordingLabelsTable::Entry,boost::uuids::uuid &,std::string &,boost::uuids::uuid &,std::chrono::time_point<cl::chrono::CFAbsoluteTimeClock,std::chrono::duration<long double,std::ratio<1l,1l>>> &>((uint64_t)(a1 + 2), (uint64_t)v18, a2, a3, a4, a5);
  v19 = v18 + 64;
  std::vector<CLMicroLocationRecordingLabelsTable::Entry>::__swap_out_circular_buffer(a1, &v17);
  v15 = a1[1];
  std::__split_buffer<CLMicroLocationRecordingLabelsTable::Entry>::~__split_buffer((uint64_t)&v17);
  return v15;
}

void sub_241AA9C84(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<CLMicroLocationRecordingLabelsTable::Entry>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::allocator<CLMicroLocationRecordingLabelsTable::Entry>::construct[abi:ne180100]<CLMicroLocationRecordingLabelsTable::Entry,boost::uuids::uuid &,std::string &,boost::uuids::uuid &,std::chrono::time_point<cl::chrono::CFAbsoluteTimeClock,std::chrono::duration<long double,std::ratio<1l,1l>>> &>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t *a5, double *a6)
{
  uint64_t v9;
  uint64_t v10;
  std::string __p;

  v9 = *a3;
  v10 = a3[1];
  if (*(char *)(a4 + 23) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a4, *(_QWORD *)(a4 + 8));
  else
    __p = *(std::string *)a4;
  CLMicroLocationRecordingLabelsTable::Entry::Entry(a2, v9, v10, (__int128 *)&__p, *a5, a5[1], *a6);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_241AA9D2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t CLMicroLocationDatabaseColumns::ColumnList<ULServiceTable::DatabaseColumns::ServiceUUID,ULServiceTable::DatabaseColumns::LastActiveTimestamp,ULServiceTable::DatabaseColumns::ServiceType,ULServiceTable::DatabaseColumns::ClientID,ULServiceTable::DatabaseColumns::LocationTypes,ULServiceTable::DatabaseColumns::RowId,ULServiceTable::DatabaseColumns::UserId>::commaSeperatedNamesGenerator<0ul,1ul,2ul,3ul,4ul,5ul,6ul>(std::string *a1)
{
  CLMicroLocationDatabaseColumns::ColumnList<ULServiceTable::DatabaseColumns::ServiceUUID,ULServiceTable::DatabaseColumns::LastActiveTimestamp,ULServiceTable::DatabaseColumns::ServiceType,ULServiceTable::DatabaseColumns::ClientID,ULServiceTable::DatabaseColumns::LocationTypes,ULServiceTable::DatabaseColumns::RowId,ULServiceTable::DatabaseColumns::UserId>::addColumnName<0ul>(a1);
  CLMicroLocationDatabaseColumns::ColumnList<ULServiceTable::DatabaseColumns::ServiceUUID,ULServiceTable::DatabaseColumns::LastActiveTimestamp,ULServiceTable::DatabaseColumns::ServiceType,ULServiceTable::DatabaseColumns::ClientID,ULServiceTable::DatabaseColumns::LocationTypes,ULServiceTable::DatabaseColumns::RowId,ULServiceTable::DatabaseColumns::UserId>::addColumnName<1ul>(a1);
  CLMicroLocationDatabaseColumns::ColumnList<ULServiceTable::DatabaseColumns::ServiceUUID,ULServiceTable::DatabaseColumns::LastActiveTimestamp,ULServiceTable::DatabaseColumns::ServiceType,ULServiceTable::DatabaseColumns::ClientID,ULServiceTable::DatabaseColumns::LocationTypes,ULServiceTable::DatabaseColumns::RowId,ULServiceTable::DatabaseColumns::UserId>::addColumnName<2ul>(a1);
  CLMicroLocationDatabaseColumns::ColumnList<ULServiceTable::DatabaseColumns::ServiceUUID,ULServiceTable::DatabaseColumns::LastActiveTimestamp,ULServiceTable::DatabaseColumns::ServiceType,ULServiceTable::DatabaseColumns::ClientID,ULServiceTable::DatabaseColumns::LocationTypes,ULServiceTable::DatabaseColumns::RowId,ULServiceTable::DatabaseColumns::UserId>::addColumnName<3ul>(a1);
  CLMicroLocationDatabaseColumns::ColumnList<ULServiceTable::DatabaseColumns::ServiceUUID,ULServiceTable::DatabaseColumns::LastActiveTimestamp,ULServiceTable::DatabaseColumns::ServiceType,ULServiceTable::DatabaseColumns::ClientID,ULServiceTable::DatabaseColumns::LocationTypes,ULServiceTable::DatabaseColumns::RowId,ULServiceTable::DatabaseColumns::UserId>::addColumnName<4ul>(a1);
  CLMicroLocationDatabaseColumns::ColumnList<ULServiceTable::DatabaseColumns::ServiceUUID,ULServiceTable::DatabaseColumns::LastActiveTimestamp,ULServiceTable::DatabaseColumns::ServiceType,ULServiceTable::DatabaseColumns::ClientID,ULServiceTable::DatabaseColumns::LocationTypes,ULServiceTable::DatabaseColumns::RowId,ULServiceTable::DatabaseColumns::UserId>::addColumnName<5ul>(a1);
  return CLMicroLocationDatabaseColumns::ColumnList<ULServiceTable::DatabaseColumns::ServiceUUID,ULServiceTable::DatabaseColumns::LastActiveTimestamp,ULServiceTable::DatabaseColumns::ServiceType,ULServiceTable::DatabaseColumns::ClientID,ULServiceTable::DatabaseColumns::LocationTypes,ULServiceTable::DatabaseColumns::RowId,ULServiceTable::DatabaseColumns::UserId>::addColumnName<6ul>(a1);
}

uint64_t CLMicroLocationDatabaseColumns::ColumnList<ULServiceTable::DatabaseColumns::ServiceUUID,ULServiceTable::DatabaseColumns::LastActiveTimestamp,ULServiceTable::DatabaseColumns::ServiceType,ULServiceTable::DatabaseColumns::ClientID,ULServiceTable::DatabaseColumns::LocationTypes,ULServiceTable::DatabaseColumns::RowId,ULServiceTable::DatabaseColumns::UserId>::addColumnName<0ul>(std::string *a1)
{
  std::string *v2;
  __int128 v3;
  void **v4;
  std::string::size_type v5;
  std::string v7;
  void *__p[2];
  int64_t v9;

  *((_BYTE *)&v7.__r_.__value_.__s + 23) = 0;
  v7.__r_.__value_.__s.__data_[0] = 0;
  v2 = std::string::append(&v7, "ServiceUUID");
  v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  v9 = v2->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v3;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  if (v9 >= 0)
    v4 = __p;
  else
    v4 = (void **)__p[0];
  if (v9 >= 0)
    v5 = HIBYTE(v9);
  else
    v5 = (std::string::size_type)__p[1];
  std::string::append(a1, (const std::string::value_type *)v4, v5);
  if (SHIBYTE(v9) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v7.__r_.__value_.__l.__data_);
  return 0;
}

void sub_241AA9E30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

uint64_t CLMicroLocationDatabaseColumns::ColumnList<ULServiceTable::DatabaseColumns::ServiceUUID,ULServiceTable::DatabaseColumns::LastActiveTimestamp,ULServiceTable::DatabaseColumns::ServiceType,ULServiceTable::DatabaseColumns::ClientID,ULServiceTable::DatabaseColumns::LocationTypes,ULServiceTable::DatabaseColumns::RowId,ULServiceTable::DatabaseColumns::UserId>::addColumnName<1ul>(std::string *a1)
{
  std::string *v2;
  __int128 v3;
  void **v4;
  std::string::size_type v5;
  std::string v7;
  void *__p[2];
  int64_t v9;

  *((_BYTE *)&v7.__r_.__value_.__s + 23) = 2;
  strcpy((char *)&v7, ", ");
  v2 = std::string::append(&v7, "LastActiveTimestamp");
  v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  v9 = v2->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v3;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  if (v9 >= 0)
    v4 = __p;
  else
    v4 = (void **)__p[0];
  if (v9 >= 0)
    v5 = HIBYTE(v9);
  else
    v5 = (std::string::size_type)__p[1];
  std::string::append(a1, (const std::string::value_type *)v4, v5);
  if (SHIBYTE(v9) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v7.__r_.__value_.__l.__data_);
  return 0;
}

void sub_241AA9F0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

uint64_t CLMicroLocationDatabaseColumns::ColumnList<ULServiceTable::DatabaseColumns::ServiceUUID,ULServiceTable::DatabaseColumns::LastActiveTimestamp,ULServiceTable::DatabaseColumns::ServiceType,ULServiceTable::DatabaseColumns::ClientID,ULServiceTable::DatabaseColumns::LocationTypes,ULServiceTable::DatabaseColumns::RowId,ULServiceTable::DatabaseColumns::UserId>::addColumnName<2ul>(std::string *a1)
{
  std::string *v2;
  __int128 v3;
  void **v4;
  std::string::size_type v5;
  std::string v7;
  void *__p[2];
  int64_t v9;

  *((_BYTE *)&v7.__r_.__value_.__s + 23) = 2;
  strcpy((char *)&v7, ", ");
  v2 = std::string::append(&v7, "ServiceType");
  v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  v9 = v2->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v3;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  if (v9 >= 0)
    v4 = __p;
  else
    v4 = (void **)__p[0];
  if (v9 >= 0)
    v5 = HIBYTE(v9);
  else
    v5 = (std::string::size_type)__p[1];
  std::string::append(a1, (const std::string::value_type *)v4, v5);
  if (SHIBYTE(v9) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v7.__r_.__value_.__l.__data_);
  return 0;
}

void sub_241AA9FE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

uint64_t CLMicroLocationDatabaseColumns::ColumnList<ULServiceTable::DatabaseColumns::ServiceUUID,ULServiceTable::DatabaseColumns::LastActiveTimestamp,ULServiceTable::DatabaseColumns::ServiceType,ULServiceTable::DatabaseColumns::ClientID,ULServiceTable::DatabaseColumns::LocationTypes,ULServiceTable::DatabaseColumns::RowId,ULServiceTable::DatabaseColumns::UserId>::addColumnName<3ul>(std::string *a1)
{
  std::string *v2;
  __int128 v3;
  void **v4;
  std::string::size_type v5;
  std::string v7;
  void *__p[2];
  int64_t v9;

  *((_BYTE *)&v7.__r_.__value_.__s + 23) = 2;
  strcpy((char *)&v7, ", ");
  v2 = std::string::append(&v7, "ClientID");
  v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  v9 = v2->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v3;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  if (v9 >= 0)
    v4 = __p;
  else
    v4 = (void **)__p[0];
  if (v9 >= 0)
    v5 = HIBYTE(v9);
  else
    v5 = (std::string::size_type)__p[1];
  std::string::append(a1, (const std::string::value_type *)v4, v5);
  if (SHIBYTE(v9) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v7.__r_.__value_.__l.__data_);
  return 0;
}

void sub_241AAA0C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

uint64_t CLMicroLocationDatabaseColumns::ColumnList<ULServiceTable::DatabaseColumns::ServiceUUID,ULServiceTable::DatabaseColumns::LastActiveTimestamp,ULServiceTable::DatabaseColumns::ServiceType,ULServiceTable::DatabaseColumns::ClientID,ULServiceTable::DatabaseColumns::LocationTypes,ULServiceTable::DatabaseColumns::RowId,ULServiceTable::DatabaseColumns::UserId>::addColumnName<4ul>(std::string *a1)
{
  std::string *v2;
  __int128 v3;
  void **v4;
  std::string::size_type v5;
  std::string v7;
  void *__p[2];
  int64_t v9;

  *((_BYTE *)&v7.__r_.__value_.__s + 23) = 2;
  strcpy((char *)&v7, ", ");
  v2 = std::string::append(&v7, "LocationTypes");
  v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  v9 = v2->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v3;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  if (v9 >= 0)
    v4 = __p;
  else
    v4 = (void **)__p[0];
  if (v9 >= 0)
    v5 = HIBYTE(v9);
  else
    v5 = (std::string::size_type)__p[1];
  std::string::append(a1, (const std::string::value_type *)v4, v5);
  if (SHIBYTE(v9) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v7.__r_.__value_.__l.__data_);
  return 0;
}

void sub_241AAA1A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

uint64_t CLMicroLocationDatabaseColumns::ColumnList<ULServiceTable::DatabaseColumns::ServiceUUID,ULServiceTable::DatabaseColumns::LastActiveTimestamp,ULServiceTable::DatabaseColumns::ServiceType,ULServiceTable::DatabaseColumns::ClientID,ULServiceTable::DatabaseColumns::LocationTypes,ULServiceTable::DatabaseColumns::RowId,ULServiceTable::DatabaseColumns::UserId>::addColumnName<5ul>(std::string *a1)
{
  std::string *v2;
  __int128 v3;
  void **v4;
  std::string::size_type v5;
  std::string v7;
  void *__p[2];
  int64_t v9;

  *((_BYTE *)&v7.__r_.__value_.__s + 23) = 2;
  strcpy((char *)&v7, ", ");
  v2 = std::string::append(&v7, "RowId");
  v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  v9 = v2->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v3;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  if (v9 >= 0)
    v4 = __p;
  else
    v4 = (void **)__p[0];
  if (v9 >= 0)
    v5 = HIBYTE(v9);
  else
    v5 = (std::string::size_type)__p[1];
  std::string::append(a1, (const std::string::value_type *)v4, v5);
  if (SHIBYTE(v9) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v7.__r_.__value_.__l.__data_);
  return 0;
}

void sub_241AAA27C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

uint64_t CLMicroLocationDatabaseColumns::ColumnList<ULServiceTable::DatabaseColumns::ServiceUUID,ULServiceTable::DatabaseColumns::LastActiveTimestamp,ULServiceTable::DatabaseColumns::ServiceType,ULServiceTable::DatabaseColumns::ClientID,ULServiceTable::DatabaseColumns::LocationTypes,ULServiceTable::DatabaseColumns::RowId,ULServiceTable::DatabaseColumns::UserId>::addColumnName<6ul>(std::string *a1)
{
  std::string *v2;
  __int128 v3;
  void **v4;
  std::string::size_type v5;
  std::string v7;
  void *__p[2];
  int64_t v9;

  *((_BYTE *)&v7.__r_.__value_.__s + 23) = 2;
  strcpy((char *)&v7, ", ");
  v2 = std::string::append(&v7, "UserId");
  v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  v9 = v2->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v3;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  if (v9 >= 0)
    v4 = __p;
  else
    v4 = (void **)__p[0];
  if (v9 >= 0)
    v5 = HIBYTE(v9);
  else
    v5 = (std::string::size_type)__p[1];
  std::string::append(a1, (const std::string::value_type *)v4, v5);
  if (SHIBYTE(v9) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v7.__r_.__value_.__l.__data_);
  return 0;
}

void sub_241AAA358(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<CLMiLoServiceTable::Entry>::__emplace_back_slow_path<boost::uuids::uuid &,std::chrono::time_point<cl::chrono::CFAbsoluteTimeClock,std::chrono::duration<long double,std::ratio<1l,1l>>> &,unsigned long long &,std::string &,unsigned long long &,std::string &>(uint64_t *a1, _QWORD *a2, double *a3, unsigned int *a4, uint64_t a5, _QWORD *a6, uint64_t a7)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  char *v20;
  uint64_t v21;
  void *v23;
  char *v24;
  char *v25;
  char *v26;
  uint64_t *v27;

  v8 = *a1;
  v9 = 0x2E8BA2E8BA2E8BA3 * ((a1[1] - *a1) >> 3);
  v10 = v9 + 1;
  if ((unint64_t)(v9 + 1) > 0x2E8BA2E8BA2E8BALL)
    std::vector<CLMicroLocationProto::ConfidenceReason>::__throw_length_error[abi:ne180100]();
  v17 = (uint64_t)(a1 + 2);
  v18 = 0x2E8BA2E8BA2E8BA3 * ((a1[2] - v8) >> 3);
  if (2 * v18 > v10)
    v10 = 2 * v18;
  if (v18 >= 0x1745D1745D1745DLL)
    v19 = 0x2E8BA2E8BA2E8BALL;
  else
    v19 = v10;
  v27 = a1 + 2;
  if (v19)
    v20 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CLMiLoServiceTable::Entry>>(v17, v19);
  else
    v20 = 0;
  v23 = v20;
  v24 = &v20[88 * v9];
  v25 = v24;
  v26 = &v20[88 * v19];
  CLMiLoServiceTable::Entry::Entry(v24, *a2, a2[1], *a4, a5, *a6, a7, *a3);
  v25 = v24 + 88;
  std::vector<CLMiLoServiceTable::Entry>::__swap_out_circular_buffer(a1, &v23);
  v21 = a1[1];
  std::__split_buffer<CLMiLoServiceTable::Entry>::~__split_buffer(&v23);
  return v21;
}

void sub_241AAA4CC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<CLMiLoServiceTable::Entry>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t CLMicroLocationDatabaseColumns::ColumnList<ULLoiTable::DatabaseColumns::RowId,ULLoiTable::DatabaseColumns::LastSeenTimeStamp,ULLoiTable::DatabaseColumns::LoiId,ULLoiTable::DatabaseColumns::LoiGroupId,ULLoiTable::DatabaseColumns::LoiType>::commaSeperatedNamesGenerator<0ul,1ul,2ul,3ul,4ul>(std::string *a1)
{
  CLMicroLocationDatabaseColumns::ColumnList<ULLoiTable::DatabaseColumns::RowId,ULLoiTable::DatabaseColumns::LastSeenTimeStamp,ULLoiTable::DatabaseColumns::LoiId,ULLoiTable::DatabaseColumns::LoiGroupId,ULLoiTable::DatabaseColumns::LoiType>::addColumnName<0ul>(a1);
  CLMicroLocationDatabaseColumns::ColumnList<ULLoiTable::DatabaseColumns::RowId,ULLoiTable::DatabaseColumns::LastSeenTimeStamp,ULLoiTable::DatabaseColumns::LoiId,ULLoiTable::DatabaseColumns::LoiGroupId,ULLoiTable::DatabaseColumns::LoiType>::addColumnName<1ul>(a1);
  CLMicroLocationDatabaseColumns::ColumnList<ULLoiTable::DatabaseColumns::RowId,ULLoiTable::DatabaseColumns::LastSeenTimeStamp,ULLoiTable::DatabaseColumns::LoiId,ULLoiTable::DatabaseColumns::LoiGroupId,ULLoiTable::DatabaseColumns::LoiType>::addColumnName<2ul>(a1);
  CLMicroLocationDatabaseColumns::ColumnList<ULLoiTable::DatabaseColumns::RowId,ULLoiTable::DatabaseColumns::LastSeenTimeStamp,ULLoiTable::DatabaseColumns::LoiId,ULLoiTable::DatabaseColumns::LoiGroupId,ULLoiTable::DatabaseColumns::LoiType>::addColumnName<3ul>(a1);
  return CLMicroLocationDatabaseColumns::ColumnList<ULLoiTable::DatabaseColumns::RowId,ULLoiTable::DatabaseColumns::LastSeenTimeStamp,ULLoiTable::DatabaseColumns::LoiId,ULLoiTable::DatabaseColumns::LoiGroupId,ULLoiTable::DatabaseColumns::LoiType>::addColumnName<4ul>(a1);
}

uint64_t CLMicroLocationDatabaseColumns::ColumnList<ULLoiTable::DatabaseColumns::RowId,ULLoiTable::DatabaseColumns::LastSeenTimeStamp,ULLoiTable::DatabaseColumns::LoiId,ULLoiTable::DatabaseColumns::LoiGroupId,ULLoiTable::DatabaseColumns::LoiType>::addColumnName<0ul>(std::string *a1)
{
  std::string *v2;
  __int128 v3;
  void **v4;
  std::string::size_type v5;
  std::string v7;
  void *__p[2];
  int64_t v9;

  *((_BYTE *)&v7.__r_.__value_.__s + 23) = 0;
  v7.__r_.__value_.__s.__data_[0] = 0;
  v2 = std::string::append(&v7, "RowId");
  v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  v9 = v2->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v3;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  if (v9 >= 0)
    v4 = __p;
  else
    v4 = (void **)__p[0];
  if (v9 >= 0)
    v5 = HIBYTE(v9);
  else
    v5 = (std::string::size_type)__p[1];
  std::string::append(a1, (const std::string::value_type *)v4, v5);
  if (SHIBYTE(v9) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v7.__r_.__value_.__l.__data_);
  return 0;
}

void sub_241AAA5B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

uint64_t CLMicroLocationDatabaseColumns::ColumnList<ULLoiTable::DatabaseColumns::RowId,ULLoiTable::DatabaseColumns::LastSeenTimeStamp,ULLoiTable::DatabaseColumns::LoiId,ULLoiTable::DatabaseColumns::LoiGroupId,ULLoiTable::DatabaseColumns::LoiType>::addColumnName<1ul>(std::string *a1)
{
  std::string *v2;
  __int128 v3;
  void **v4;
  std::string::size_type v5;
  std::string v7;
  void *__p[2];
  int64_t v9;

  *((_BYTE *)&v7.__r_.__value_.__s + 23) = 2;
  strcpy((char *)&v7, ", ");
  v2 = std::string::append(&v7, "LastSeenTimeStamp");
  v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  v9 = v2->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v3;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  if (v9 >= 0)
    v4 = __p;
  else
    v4 = (void **)__p[0];
  if (v9 >= 0)
    v5 = HIBYTE(v9);
  else
    v5 = (std::string::size_type)__p[1];
  std::string::append(a1, (const std::string::value_type *)v4, v5);
  if (SHIBYTE(v9) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v7.__r_.__value_.__l.__data_);
  return 0;
}

void sub_241AAA694(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

uint64_t CLMicroLocationDatabaseColumns::ColumnList<ULLoiTable::DatabaseColumns::RowId,ULLoiTable::DatabaseColumns::LastSeenTimeStamp,ULLoiTable::DatabaseColumns::LoiId,ULLoiTable::DatabaseColumns::LoiGroupId,ULLoiTable::DatabaseColumns::LoiType>::addColumnName<2ul>(std::string *a1)
{
  std::string *v2;
  __int128 v3;
  void **v4;
  std::string::size_type v5;
  std::string v7;
  void *__p[2];
  int64_t v9;

  *((_BYTE *)&v7.__r_.__value_.__s + 23) = 2;
  strcpy((char *)&v7, ", ");
  v2 = std::string::append(&v7, "LoiId");
  v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  v9 = v2->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v3;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  if (v9 >= 0)
    v4 = __p;
  else
    v4 = (void **)__p[0];
  if (v9 >= 0)
    v5 = HIBYTE(v9);
  else
    v5 = (std::string::size_type)__p[1];
  std::string::append(a1, (const std::string::value_type *)v4, v5);
  if (SHIBYTE(v9) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v7.__r_.__value_.__l.__data_);
  return 0;
}

void sub_241AAA770(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

uint64_t CLMicroLocationDatabaseColumns::ColumnList<ULLoiTable::DatabaseColumns::RowId,ULLoiTable::DatabaseColumns::LastSeenTimeStamp,ULLoiTable::DatabaseColumns::LoiId,ULLoiTable::DatabaseColumns::LoiGroupId,ULLoiTable::DatabaseColumns::LoiType>::addColumnName<3ul>(std::string *a1)
{
  std::string *v2;
  __int128 v3;
  void **v4;
  std::string::size_type v5;
  std::string v7;
  void *__p[2];
  int64_t v9;

  *((_BYTE *)&v7.__r_.__value_.__s + 23) = 2;
  strcpy((char *)&v7, ", ");
  v2 = std::string::append(&v7, "LoiGroupId");
  v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  v9 = v2->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v3;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  if (v9 >= 0)
    v4 = __p;
  else
    v4 = (void **)__p[0];
  if (v9 >= 0)
    v5 = HIBYTE(v9);
  else
    v5 = (std::string::size_type)__p[1];
  std::string::append(a1, (const std::string::value_type *)v4, v5);
  if (SHIBYTE(v9) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v7.__r_.__value_.__l.__data_);
  return 0;
}

void sub_241AAA84C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

uint64_t CLMicroLocationDatabaseColumns::ColumnList<ULLoiTable::DatabaseColumns::RowId,ULLoiTable::DatabaseColumns::LastSeenTimeStamp,ULLoiTable::DatabaseColumns::LoiId,ULLoiTable::DatabaseColumns::LoiGroupId,ULLoiTable::DatabaseColumns::LoiType>::addColumnName<4ul>(std::string *a1)
{
  std::string *v2;
  __int128 v3;
  void **v4;
  std::string::size_type v5;
  std::string v7;
  void *__p[2];
  int64_t v9;

  *((_BYTE *)&v7.__r_.__value_.__s + 23) = 2;
  strcpy((char *)&v7, ", ");
  v2 = std::string::append(&v7, "LoiType");
  v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  v9 = v2->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v3;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  if (v9 >= 0)
    v4 = __p;
  else
    v4 = (void **)__p[0];
  if (v9 >= 0)
    v5 = HIBYTE(v9);
  else
    v5 = (std::string::size_type)__p[1];
  std::string::append(a1, (const std::string::value_type *)v4, v5);
  if (SHIBYTE(v9) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v7.__r_.__value_.__l.__data_);
  return 0;
}

void sub_241AAA928(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<CLMiLoLoiTable::Entry>::__emplace_back_slow_path<std::chrono::time_point<cl::chrono::CFAbsoluteTimeClock,std::chrono::duration<long double,std::ratio<1l,1l>>> &,boost::uuids::uuid,boost::uuids::uuid,std::string &>(uint64_t *a1, double *a2, uint64_t *a3, uint64_t *a4, uint64_t a5)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  uint64_t v15;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  uint64_t *v21;

  v6 = (a1[1] - *a1) >> 6;
  v7 = v6 + 1;
  if ((unint64_t)(v6 + 1) >> 58)
    std::vector<CLMicroLocationProto::ConfidenceReason>::__throw_length_error[abi:ne180100]();
  v12 = a1[2] - *a1;
  if (v12 >> 5 > v7)
    v7 = v12 >> 5;
  if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFC0)
    v13 = 0x3FFFFFFFFFFFFFFLL;
  else
    v13 = v7;
  v21 = a1 + 2;
  if (v13)
    v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CLMicroLocationRecordingLabelsTable::Entry>>((uint64_t)(a1 + 2), v13);
  else
    v14 = 0;
  v17 = v14;
  v18 = &v14[64 * v6];
  v20 = &v14[64 * v13];
  std::allocator<CLMiLoLoiTable::Entry>::construct[abi:ne180100]<CLMiLoLoiTable::Entry,std::chrono::time_point<cl::chrono::CFAbsoluteTimeClock,std::chrono::duration<long double,std::ratio<1l,1l>>> &,boost::uuids::uuid,boost::uuids::uuid,std::string &>((uint64_t)(a1 + 2), (uint64_t)v18, a2, a3, a4, a5);
  v19 = v18 + 64;
  std::vector<CLMiLoLoiTable::Entry>::__swap_out_circular_buffer(a1, &v17);
  v15 = a1[1];
  std::__split_buffer<CLMiLoLoiTable::Entry>::~__split_buffer((uint64_t)&v17);
  return v15;
}

void sub_241AAAA5C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<CLMiLoLoiTable::Entry>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::allocator<CLMiLoLoiTable::Entry>::construct[abi:ne180100]<CLMiLoLoiTable::Entry,std::chrono::time_point<cl::chrono::CFAbsoluteTimeClock,std::chrono::duration<long double,std::ratio<1l,1l>>> &,boost::uuids::uuid,boost::uuids::uuid,std::string &>(uint64_t a1, uint64_t a2, double *a3, uint64_t *a4, uint64_t *a5, uint64_t a6)
{
  double v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::string __p;

  v7 = *a3;
  v8 = *a4;
  v9 = a4[1];
  v10 = *a5;
  v11 = a5[1];
  if (*(char *)(a6 + 23) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a6, *(_QWORD *)(a6 + 8));
  else
    __p = *(std::string *)a6;
  CLMiLoLoiTable::Entry::Entry(a2, v8, v9, v10, v11, (__int128 *)&__p, v7);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_241AAAB10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t CLMicroLocationDatabaseColumns::ColumnList<ULRapportTable::DatabaseColumns::GenerationTimestamp,ULRapportTable::DatabaseColumns::RTLOIType,ULRapportTable::DatabaseColumns::Device,ULRapportTable::DatabaseColumns::RowId,ULRapportTable::DatabaseColumns::RtLoiGroupId>::commaSeperatedNamesGenerator<0ul,1ul,2ul,3ul,4ul>(std::string *a1)
{
  CLMicroLocationDatabaseColumns::ColumnList<ULRapportTable::DatabaseColumns::GenerationTimestamp,ULRapportTable::DatabaseColumns::RTLOIType,ULRapportTable::DatabaseColumns::Device,ULRapportTable::DatabaseColumns::RowId,ULRapportTable::DatabaseColumns::RtLoiGroupId>::addColumnName<0ul>(a1);
  CLMicroLocationDatabaseColumns::ColumnList<ULRapportTable::DatabaseColumns::GenerationTimestamp,ULRapportTable::DatabaseColumns::RTLOIType,ULRapportTable::DatabaseColumns::Device,ULRapportTable::DatabaseColumns::RowId,ULRapportTable::DatabaseColumns::RtLoiGroupId>::addColumnName<1ul>(a1);
  CLMicroLocationDatabaseColumns::ColumnList<ULRapportTable::DatabaseColumns::GenerationTimestamp,ULRapportTable::DatabaseColumns::RTLOIType,ULRapportTable::DatabaseColumns::Device,ULRapportTable::DatabaseColumns::RowId,ULRapportTable::DatabaseColumns::RtLoiGroupId>::addColumnName<2ul>(a1);
  CLMicroLocationDatabaseColumns::ColumnList<ULRapportTable::DatabaseColumns::GenerationTimestamp,ULRapportTable::DatabaseColumns::RTLOIType,ULRapportTable::DatabaseColumns::Device,ULRapportTable::DatabaseColumns::RowId,ULRapportTable::DatabaseColumns::RtLoiGroupId>::addColumnName<3ul>(a1);
  return CLMicroLocationDatabaseColumns::ColumnList<ULRapportTable::DatabaseColumns::GenerationTimestamp,ULRapportTable::DatabaseColumns::RTLOIType,ULRapportTable::DatabaseColumns::Device,ULRapportTable::DatabaseColumns::RowId,ULRapportTable::DatabaseColumns::RtLoiGroupId>::addColumnName<4ul>(a1);
}

uint64_t CLMicroLocationDatabaseColumns::ColumnList<ULRapportTable::DatabaseColumns::GenerationTimestamp,ULRapportTable::DatabaseColumns::RTLOIType,ULRapportTable::DatabaseColumns::Device,ULRapportTable::DatabaseColumns::RowId,ULRapportTable::DatabaseColumns::RtLoiGroupId>::addColumnName<0ul>(std::string *a1)
{
  std::string *v2;
  __int128 v3;
  void **v4;
  std::string::size_type v5;
  std::string v7;
  void *__p[2];
  int64_t v9;

  *((_BYTE *)&v7.__r_.__value_.__s + 23) = 0;
  v7.__r_.__value_.__s.__data_[0] = 0;
  v2 = std::string::append(&v7, "GenerationTimestamp");
  v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  v9 = v2->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v3;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  if (v9 >= 0)
    v4 = __p;
  else
    v4 = (void **)__p[0];
  if (v9 >= 0)
    v5 = HIBYTE(v9);
  else
    v5 = (std::string::size_type)__p[1];
  std::string::append(a1, (const std::string::value_type *)v4, v5);
  if (SHIBYTE(v9) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v7.__r_.__value_.__l.__data_);
  return 0;
}

void sub_241AAAC04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

uint64_t CLMicroLocationDatabaseColumns::ColumnList<ULRapportTable::DatabaseColumns::GenerationTimestamp,ULRapportTable::DatabaseColumns::RTLOIType,ULRapportTable::DatabaseColumns::Device,ULRapportTable::DatabaseColumns::RowId,ULRapportTable::DatabaseColumns::RtLoiGroupId>::addColumnName<1ul>(std::string *a1)
{
  std::string *v2;
  __int128 v3;
  void **v4;
  std::string::size_type v5;
  std::string v7;
  void *__p[2];
  int64_t v9;

  *((_BYTE *)&v7.__r_.__value_.__s + 23) = 2;
  strcpy((char *)&v7, ", ");
  v2 = std::string::append(&v7, "RTLOIType");
  v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  v9 = v2->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v3;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  if (v9 >= 0)
    v4 = __p;
  else
    v4 = (void **)__p[0];
  if (v9 >= 0)
    v5 = HIBYTE(v9);
  else
    v5 = (std::string::size_type)__p[1];
  std::string::append(a1, (const std::string::value_type *)v4, v5);
  if (SHIBYTE(v9) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v7.__r_.__value_.__l.__data_);
  return 0;
}

void sub_241AAACE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

uint64_t CLMicroLocationDatabaseColumns::ColumnList<ULRapportTable::DatabaseColumns::GenerationTimestamp,ULRapportTable::DatabaseColumns::RTLOIType,ULRapportTable::DatabaseColumns::Device,ULRapportTable::DatabaseColumns::RowId,ULRapportTable::DatabaseColumns::RtLoiGroupId>::addColumnName<2ul>(std::string *a1)
{
  std::string *v2;
  __int128 v3;
  void **v4;
  std::string::size_type v5;
  std::string v7;
  void *__p[2];
  int64_t v9;

  *((_BYTE *)&v7.__r_.__value_.__s + 23) = 2;
  strcpy((char *)&v7, ", ");
  v2 = std::string::append(&v7, "Device");
  v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  v9 = v2->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v3;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  if (v9 >= 0)
    v4 = __p;
  else
    v4 = (void **)__p[0];
  if (v9 >= 0)
    v5 = HIBYTE(v9);
  else
    v5 = (std::string::size_type)__p[1];
  std::string::append(a1, (const std::string::value_type *)v4, v5);
  if (SHIBYTE(v9) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v7.__r_.__value_.__l.__data_);
  return 0;
}

void sub_241AAADBC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

uint64_t CLMicroLocationDatabaseColumns::ColumnList<ULRapportTable::DatabaseColumns::GenerationTimestamp,ULRapportTable::DatabaseColumns::RTLOIType,ULRapportTable::DatabaseColumns::Device,ULRapportTable::DatabaseColumns::RowId,ULRapportTable::DatabaseColumns::RtLoiGroupId>::addColumnName<3ul>(std::string *a1)
{
  std::string *v2;
  __int128 v3;
  void **v4;
  std::string::size_type v5;
  std::string v7;
  void *__p[2];
  int64_t v9;

  *((_BYTE *)&v7.__r_.__value_.__s + 23) = 2;
  strcpy((char *)&v7, ", ");
  v2 = std::string::append(&v7, "RowId");
  v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  v9 = v2->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v3;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  if (v9 >= 0)
    v4 = __p;
  else
    v4 = (void **)__p[0];
  if (v9 >= 0)
    v5 = HIBYTE(v9);
  else
    v5 = (std::string::size_type)__p[1];
  std::string::append(a1, (const std::string::value_type *)v4, v5);
  if (SHIBYTE(v9) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v7.__r_.__value_.__l.__data_);
  return 0;
}

void sub_241AAAE98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

uint64_t CLMicroLocationDatabaseColumns::ColumnList<ULRapportTable::DatabaseColumns::GenerationTimestamp,ULRapportTable::DatabaseColumns::RTLOIType,ULRapportTable::DatabaseColumns::Device,ULRapportTable::DatabaseColumns::RowId,ULRapportTable::DatabaseColumns::RtLoiGroupId>::addColumnName<4ul>(std::string *a1)
{
  std::string *v2;
  __int128 v3;
  void **v4;
  std::string::size_type v5;
  std::string v7;
  void *__p[2];
  int64_t v9;

  *((_BYTE *)&v7.__r_.__value_.__s + 23) = 2;
  strcpy((char *)&v7, ", ");
  v2 = std::string::append(&v7, "RtLoiGroupId");
  v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  v9 = v2->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v3;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  if (v9 >= 0)
    v4 = __p;
  else
    v4 = (void **)__p[0];
  if (v9 >= 0)
    v5 = HIBYTE(v9);
  else
    v5 = (std::string::size_type)__p[1];
  std::string::append(a1, (const std::string::value_type *)v4, v5);
  if (SHIBYTE(v9) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v7.__r_.__value_.__l.__data_);
  return 0;
}

void sub_241AAAF74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<CLMicroLocationRapportTable::Entry>::__emplace_back_slow_path<std::string &,CLMicroLocationProto::RapportDevice &,boost::uuids::uuid,std::chrono::time_point<cl::chrono::CFAbsoluteTimeClock,std::chrono::duration<long double,std::ratio<1l,1l>>> &>(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v6;
  unint64_t v7;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  void *v16;
  char *v17;
  char *v18;
  char *v19;
  uint64_t *v20;

  v6 = 0xCCCCCCCCCCCCCCCDLL * ((a1[1] - *a1) >> 4);
  v7 = v6 + 1;
  if (v6 + 1 > 0x333333333333333)
    std::vector<CLMicroLocationProto::ConfidenceReason>::__throw_length_error[abi:ne180100]();
  if (0x999999999999999ALL * ((a1[2] - *a1) >> 4) > v7)
    v7 = 0x999999999999999ALL * ((a1[2] - *a1) >> 4);
  if (0xCCCCCCCCCCCCCCCDLL * ((a1[2] - *a1) >> 4) >= 0x199999999999999)
    v12 = 0x333333333333333;
  else
    v12 = v7;
  v20 = a1 + 2;
  if (v12)
    v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CLMicroLocationRapportMonitor::Item>>((uint64_t)(a1 + 2), v12);
  else
    v13 = 0;
  v16 = v13;
  v17 = &v13[80 * v6];
  v19 = &v13[80 * v12];
  std::allocator<CLMicroLocationRapportTable::Entry>::construct[abi:ne180100]<CLMicroLocationRapportTable::Entry,std::string &,CLMicroLocationProto::RapportDevice &,boost::uuids::uuid,std::chrono::time_point<cl::chrono::CFAbsoluteTimeClock,std::chrono::duration<long double,std::ratio<1l,1l>>> &>((uint64_t)(a1 + 2), (uint64_t)v17, a2, a3, a4, a5);
  v18 = v17 + 80;
  std::vector<CLMicroLocationRapportTable::Entry>::__swap_out_circular_buffer(a1, &v16);
  v14 = a1[1];
  std::__split_buffer<CLMicroLocationRapportTable::Entry>::~__split_buffer(&v16);
  return v14;
}

void sub_241AAB0C8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<CLMicroLocationRapportTable::Entry>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

void std::allocator<CLMicroLocationRapportTable::Entry>::construct[abi:ne180100]<CLMicroLocationRapportTable::Entry,std::string &,CLMicroLocationProto::RapportDevice &,boost::uuids::uuid,std::chrono::time_point<cl::chrono::CFAbsoluteTimeClock,std::chrono::duration<long double,std::ratio<1l,1l>>> &>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  std::string __p;

  if (*(char *)(a3 + 23) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  else
    __p = *(std::string *)a3;
  CLMicroLocationRapportTable::Entry::Entry(a2, &__p, a4, a5, a6);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_241AAB164(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<CLMicroLocationRapportTable::Entry>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<CLMicroLocationRapportTable::Entry>,std::reverse_iterator<CLMicroLocationRapportTable::Entry*>,std::reverse_iterator<CLMicroLocationRapportTable::Entry*>,std::reverse_iterator<CLMicroLocationRapportTable::Entry*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<CLMicroLocationRapportTable::Entry>,std::reverse_iterator<CLMicroLocationRapportTable::Entry*>,std::reverse_iterator<CLMicroLocationRapportTable::Entry*>,std::reverse_iterator<CLMicroLocationRapportTable::Entry*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v9;
  uint64_t v11;
  _QWORD v13[3];
  char v14;
  __int128 v15;
  __int128 v16;

  v7 = a7;
  *(_QWORD *)&v16 = a6;
  *((_QWORD *)&v16 + 1) = a7;
  v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  v13[2] = &v16;
  v14 = 0;
  if (a3 == a5)
  {
    v11 = a6;
  }
  else
  {
    v9 = a3;
    do
    {
      v9 -= 80;
      std::allocator<CLMicroLocationRapportTable::Entry>::construct[abi:ne180100]<CLMicroLocationRapportTable::Entry,CLMicroLocationRapportTable::Entry const&>(a1, (__n128 *)(v7 - 80), v9);
      v7 = *((_QWORD *)&v16 + 1) - 80;
      *((_QWORD *)&v16 + 1) -= 80;
    }
    while (v9 != a5);
    v11 = v16;
  }
  v14 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<CLMicroLocationRapportTable::Entry>,std::reverse_iterator<CLMicroLocationRapportTable::Entry*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v13);
  return v11;
}

void sub_241AAB2A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<CLMicroLocationRapportTable::Entry>,std::reverse_iterator<CLMicroLocationRapportTable::Entry*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

__n128 std::allocator<CLMicroLocationRapportTable::Entry>::construct[abi:ne180100]<CLMicroLocationRapportTable::Entry,CLMicroLocationRapportTable::Entry const&>(uint64_t a1, __n128 *a2, uint64_t a3)
{
  std::string *v5;
  __int128 v6;
  __n128 result;

  a2->n128_u64[0] = *(_QWORD *)a3;
  v5 = (std::string *)&a2->n128_i8[8];
  if (*(char *)(a3 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)(a3 + 8), *(_QWORD *)(a3 + 16));
  }
  else
  {
    v6 = *(_OWORD *)(a3 + 8);
    a2[1].n128_u64[1] = *(_QWORD *)(a3 + 24);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  CLMicroLocationProto::RapportDevice::RapportDevice((CLMicroLocationProto::RapportDevice *)&a2[2], (const CLMicroLocationProto::RapportDevice *)(a3 + 32));
  result = *(__n128 *)(a3 + 64);
  a2[4] = result;
  return result;
}

void sub_241AAB330(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 31) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<CLMicroLocationRapportTable::Entry>,std::reverse_iterator<CLMicroLocationRapportTable::Entry*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<CLMicroLocationRapportTable::Entry>,std::reverse_iterator<CLMicroLocationRapportTable::Entry*>>::operator()[abi:ne180100]((uint64_t *)a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<CLMicroLocationRapportTable::Entry>,std::reverse_iterator<CLMicroLocationRapportTable::Entry*>>::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(a1[2] + 8);
  v2 = *(_QWORD *)(a1[1] + 8);
  if (v1 != v2)
  {
    v3 = *a1;
    do
    {
      std::allocator<CLMicroLocationRapportTable::Entry>::destroy[abi:ne180100](v3, v1);
      v1 += 80;
    }
    while (v1 != v2);
  }
}

void **std::__split_buffer<CLMicroLocationRapportTable::Entry>::~__split_buffer(void **a1)
{
  std::__split_buffer<CLMicroLocationRapportTable::Entry>::clear[abi:ne180100](a1);
  if (*a1)
    operator delete(*a1);
  return a1;
}

void std::__split_buffer<CLMicroLocationRapportTable::Entry>::clear[abi:ne180100](_QWORD *a1)
{
  uint64_t i;
  uint64_t v2;
  uint64_t v4;

  v2 = a1[1];
  for (i = a1[2]; i != v2; i = a1[2])
  {
    v4 = a1[4];
    a1[2] = i - 80;
    std::allocator<CLMicroLocationRapportTable::Entry>::destroy[abi:ne180100](v4, i - 80);
  }
}

uint64_t CLMicroLocationDatabaseColumns::ColumnList<ULAssociatedStateTable::DatabaseColumns::LoiType,ULAssociatedStateTable::DatabaseColumns::LoiGroupId,ULAssociatedStateTable::DatabaseColumns::Timestamp,ULAssociatedStateTable::DatabaseColumns::IsAssociated,ULAssociatedStateTable::DatabaseColumns::MacAddress,ULAssociatedStateTable::DatabaseColumns::Band,ULAssociatedStateTable::DatabaseColumns::Channel,ULAssociatedStateTable::DatabaseColumns::RowId>::commaSeperatedNamesGenerator<0ul,1ul,2ul,3ul,4ul,5ul,6ul,7ul>(std::string *a1)
{
  CLMicroLocationDatabaseColumns::ColumnList<ULAssociatedStateTable::DatabaseColumns::LoiType,ULAssociatedStateTable::DatabaseColumns::LoiGroupId,ULAssociatedStateTable::DatabaseColumns::Timestamp,ULAssociatedStateTable::DatabaseColumns::IsAssociated,ULAssociatedStateTable::DatabaseColumns::MacAddress,ULAssociatedStateTable::DatabaseColumns::Band,ULAssociatedStateTable::DatabaseColumns::Channel,ULAssociatedStateTable::DatabaseColumns::RowId>::addColumnName<0ul>(a1);
  CLMicroLocationDatabaseColumns::ColumnList<ULAssociatedStateTable::DatabaseColumns::LoiType,ULAssociatedStateTable::DatabaseColumns::LoiGroupId,ULAssociatedStateTable::DatabaseColumns::Timestamp,ULAssociatedStateTable::DatabaseColumns::IsAssociated,ULAssociatedStateTable::DatabaseColumns::MacAddress,ULAssociatedStateTable::DatabaseColumns::Band,ULAssociatedStateTable::DatabaseColumns::Channel,ULAssociatedStateTable::DatabaseColumns::RowId>::addColumnName<1ul>(a1);
  CLMicroLocationDatabaseColumns::ColumnList<ULAssociatedStateTable::DatabaseColumns::LoiType,ULAssociatedStateTable::DatabaseColumns::LoiGroupId,ULAssociatedStateTable::DatabaseColumns::Timestamp,ULAssociatedStateTable::DatabaseColumns::IsAssociated,ULAssociatedStateTable::DatabaseColumns::MacAddress,ULAssociatedStateTable::DatabaseColumns::Band,ULAssociatedStateTable::DatabaseColumns::Channel,ULAssociatedStateTable::DatabaseColumns::RowId>::addColumnName<2ul>(a1);
  CLMicroLocationDatabaseColumns::ColumnList<ULAssociatedStateTable::DatabaseColumns::LoiType,ULAssociatedStateTable::DatabaseColumns::LoiGroupId,ULAssociatedStateTable::DatabaseColumns::Timestamp,ULAssociatedStateTable::DatabaseColumns::IsAssociated,ULAssociatedStateTable::DatabaseColumns::MacAddress,ULAssociatedStateTable::DatabaseColumns::Band,ULAssociatedStateTable::DatabaseColumns::Channel,ULAssociatedStateTable::DatabaseColumns::RowId>::addColumnName<3ul>(a1);
  CLMicroLocationDatabaseColumns::ColumnList<ULAssociatedStateTable::DatabaseColumns::LoiType,ULAssociatedStateTable::DatabaseColumns::LoiGroupId,ULAssociatedStateTable::DatabaseColumns::Timestamp,ULAssociatedStateTable::DatabaseColumns::IsAssociated,ULAssociatedStateTable::DatabaseColumns::MacAddress,ULAssociatedStateTable::DatabaseColumns::Band,ULAssociatedStateTable::DatabaseColumns::Channel,ULAssociatedStateTable::DatabaseColumns::RowId>::addColumnName<4ul>(a1);
  CLMicroLocationDatabaseColumns::ColumnList<ULAssociatedStateTable::DatabaseColumns::LoiType,ULAssociatedStateTable::DatabaseColumns::LoiGroupId,ULAssociatedStateTable::DatabaseColumns::Timestamp,ULAssociatedStateTable::DatabaseColumns::IsAssociated,ULAssociatedStateTable::DatabaseColumns::MacAddress,ULAssociatedStateTable::DatabaseColumns::Band,ULAssociatedStateTable::DatabaseColumns::Channel,ULAssociatedStateTable::DatabaseColumns::RowId>::addColumnName<5ul>(a1);
  CLMicroLocationDatabaseColumns::ColumnList<ULAssociatedStateTable::DatabaseColumns::LoiType,ULAssociatedStateTable::DatabaseColumns::LoiGroupId,ULAssociatedStateTable::DatabaseColumns::Timestamp,ULAssociatedStateTable::DatabaseColumns::IsAssociated,ULAssociatedStateTable::DatabaseColumns::MacAddress,ULAssociatedStateTable::DatabaseColumns::Band,ULAssociatedStateTable::DatabaseColumns::Channel,ULAssociatedStateTable::DatabaseColumns::RowId>::addColumnName<6ul>(a1);
  return CLMicroLocationDatabaseColumns::ColumnList<ULAssociatedStateTable::DatabaseColumns::LoiType,ULAssociatedStateTable::DatabaseColumns::LoiGroupId,ULAssociatedStateTable::DatabaseColumns::Timestamp,ULAssociatedStateTable::DatabaseColumns::IsAssociated,ULAssociatedStateTable::DatabaseColumns::MacAddress,ULAssociatedStateTable::DatabaseColumns::Band,ULAssociatedStateTable::DatabaseColumns::Channel,ULAssociatedStateTable::DatabaseColumns::RowId>::addColumnName<7ul>(a1);
}

uint64_t CLMicroLocationDatabaseColumns::ColumnList<ULAssociatedStateTable::DatabaseColumns::LoiType,ULAssociatedStateTable::DatabaseColumns::LoiGroupId,ULAssociatedStateTable::DatabaseColumns::Timestamp,ULAssociatedStateTable::DatabaseColumns::IsAssociated,ULAssociatedStateTable::DatabaseColumns::MacAddress,ULAssociatedStateTable::DatabaseColumns::Band,ULAssociatedStateTable::DatabaseColumns::Channel,ULAssociatedStateTable::DatabaseColumns::RowId>::addColumnName<0ul>(std::string *a1)
{
  std::string *v2;
  __int128 v3;
  void **v4;
  std::string::size_type v5;
  std::string v7;
  void *__p[2];
  int64_t v9;

  *((_BYTE *)&v7.__r_.__value_.__s + 23) = 0;
  v7.__r_.__value_.__s.__data_[0] = 0;
  v2 = std::string::append(&v7, "LoiType");
  v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  v9 = v2->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v3;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  if (v9 >= 0)
    v4 = __p;
  else
    v4 = (void **)__p[0];
  if (v9 >= 0)
    v5 = HIBYTE(v9);
  else
    v5 = (std::string::size_type)__p[1];
  std::string::append(a1, (const std::string::value_type *)v4, v5);
  if (SHIBYTE(v9) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v7.__r_.__value_.__l.__data_);
  return 0;
}

void sub_241AAB534(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

uint64_t CLMicroLocationDatabaseColumns::ColumnList<ULAssociatedStateTable::DatabaseColumns::LoiType,ULAssociatedStateTable::DatabaseColumns::LoiGroupId,ULAssociatedStateTable::DatabaseColumns::Timestamp,ULAssociatedStateTable::DatabaseColumns::IsAssociated,ULAssociatedStateTable::DatabaseColumns::MacAddress,ULAssociatedStateTable::DatabaseColumns::Band,ULAssociatedStateTable::DatabaseColumns::Channel,ULAssociatedStateTable::DatabaseColumns::RowId>::addColumnName<1ul>(std::string *a1)
{
  std::string *v2;
  __int128 v3;
  void **v4;
  std::string::size_type v5;
  std::string v7;
  void *__p[2];
  int64_t v9;

  *((_BYTE *)&v7.__r_.__value_.__s + 23) = 2;
  strcpy((char *)&v7, ", ");
  v2 = std::string::append(&v7, "LoiGroupId");
  v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  v9 = v2->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v3;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  if (v9 >= 0)
    v4 = __p;
  else
    v4 = (void **)__p[0];
  if (v9 >= 0)
    v5 = HIBYTE(v9);
  else
    v5 = (std::string::size_type)__p[1];
  std::string::append(a1, (const std::string::value_type *)v4, v5);
  if (SHIBYTE(v9) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v7.__r_.__value_.__l.__data_);
  return 0;
}

void sub_241AAB610(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

uint64_t CLMicroLocationDatabaseColumns::ColumnList<ULAssociatedStateTable::DatabaseColumns::LoiType,ULAssociatedStateTable::DatabaseColumns::LoiGroupId,ULAssociatedStateTable::DatabaseColumns::Timestamp,ULAssociatedStateTable::DatabaseColumns::IsAssociated,ULAssociatedStateTable::DatabaseColumns::MacAddress,ULAssociatedStateTable::DatabaseColumns::Band,ULAssociatedStateTable::DatabaseColumns::Channel,ULAssociatedStateTable::DatabaseColumns::RowId>::addColumnName<2ul>(std::string *a1)
{
  std::string *v2;
  __int128 v3;
  void **v4;
  std::string::size_type v5;
  std::string v7;
  void *__p[2];
  int64_t v9;

  *((_BYTE *)&v7.__r_.__value_.__s + 23) = 2;
  strcpy((char *)&v7, ", ");
  v2 = std::string::append(&v7, "Timestamp");
  v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  v9 = v2->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v3;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  if (v9 >= 0)
    v4 = __p;
  else
    v4 = (void **)__p[0];
  if (v9 >= 0)
    v5 = HIBYTE(v9);
  else
    v5 = (std::string::size_type)__p[1];
  std::string::append(a1, (const std::string::value_type *)v4, v5);
  if (SHIBYTE(v9) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v7.__r_.__value_.__l.__data_);
  return 0;
}

void sub_241AAB6EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

uint64_t CLMicroLocationDatabaseColumns::ColumnList<ULAssociatedStateTable::DatabaseColumns::LoiType,ULAssociatedStateTable::DatabaseColumns::LoiGroupId,ULAssociatedStateTable::DatabaseColumns::Timestamp,ULAssociatedStateTable::DatabaseColumns::IsAssociated,ULAssociatedStateTable::DatabaseColumns::MacAddress,ULAssociatedStateTable::DatabaseColumns::Band,ULAssociatedStateTable::DatabaseColumns::Channel,ULAssociatedStateTable::DatabaseColumns::RowId>::addColumnName<3ul>(std::string *a1)
{
  std::string *v2;
  __int128 v3;
  void **v4;
  std::string::size_type v5;
  std::string v7;
  void *__p[2];
  int64_t v9;

  *((_BYTE *)&v7.__r_.__value_.__s + 23) = 2;
  strcpy((char *)&v7, ", ");
  v2 = std::string::append(&v7, "IsAssociated");
  v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  v9 = v2->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v3;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  if (v9 >= 0)
    v4 = __p;
  else
    v4 = (void **)__p[0];
  if (v9 >= 0)
    v5 = HIBYTE(v9);
  else
    v5 = (std::string::size_type)__p[1];
  std::string::append(a1, (const std::string::value_type *)v4, v5);
  if (SHIBYTE(v9) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v7.__r_.__value_.__l.__data_);
  return 0;
}

void sub_241AAB7C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

uint64_t CLMicroLocationDatabaseColumns::ColumnList<ULAssociatedStateTable::DatabaseColumns::LoiType,ULAssociatedStateTable::DatabaseColumns::LoiGroupId,ULAssociatedStateTable::DatabaseColumns::Timestamp,ULAssociatedStateTable::DatabaseColumns::IsAssociated,ULAssociatedStateTable::DatabaseColumns::MacAddress,ULAssociatedStateTable::DatabaseColumns::Band,ULAssociatedStateTable::DatabaseColumns::Channel,ULAssociatedStateTable::DatabaseColumns::RowId>::addColumnName<4ul>(std::string *a1)
{
  std::string *v2;
  __int128 v3;
  void **v4;
  std::string::size_type v5;
  std::string v7;
  void *__p[2];
  int64_t v9;

  *((_BYTE *)&v7.__r_.__value_.__s + 23) = 2;
  strcpy((char *)&v7, ", ");
  v2 = std::string::append(&v7, "MacAddress");
  v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  v9 = v2->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v3;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  if (v9 >= 0)
    v4 = __p;
  else
    v4 = (void **)__p[0];
  if (v9 >= 0)
    v5 = HIBYTE(v9);
  else
    v5 = (std::string::size_type)__p[1];
  std::string::append(a1, (const std::string::value_type *)v4, v5);
  if (SHIBYTE(v9) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v7.__r_.__value_.__l.__data_);
  return 0;
}

void sub_241AAB8A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

uint64_t CLMicroLocationDatabaseColumns::ColumnList<ULAssociatedStateTable::DatabaseColumns::LoiType,ULAssociatedStateTable::DatabaseColumns::LoiGroupId,ULAssociatedStateTable::DatabaseColumns::Timestamp,ULAssociatedStateTable::DatabaseColumns::IsAssociated,ULAssociatedStateTable::DatabaseColumns::MacAddress,ULAssociatedStateTable::DatabaseColumns::Band,ULAssociatedStateTable::DatabaseColumns::Channel,ULAssociatedStateTable::DatabaseColumns::RowId>::addColumnName<5ul>(std::string *a1)
{
  std::string *v2;
  __int128 v3;
  void **v4;
  std::string::size_type v5;
  std::string v7;
  void *__p[2];
  int64_t v9;

  *((_BYTE *)&v7.__r_.__value_.__s + 23) = 2;
  strcpy((char *)&v7, ", ");
  v2 = std::string::append(&v7, "Band");
  v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  v9 = v2->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v3;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  if (v9 >= 0)
    v4 = __p;
  else
    v4 = (void **)__p[0];
  if (v9 >= 0)
    v5 = HIBYTE(v9);
  else
    v5 = (std::string::size_type)__p[1];
  std::string::append(a1, (const std::string::value_type *)v4, v5);
  if (SHIBYTE(v9) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v7.__r_.__value_.__l.__data_);
  return 0;
}

void sub_241AAB980(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

uint64_t CLMicroLocationDatabaseColumns::ColumnList<ULAssociatedStateTable::DatabaseColumns::LoiType,ULAssociatedStateTable::DatabaseColumns::LoiGroupId,ULAssociatedStateTable::DatabaseColumns::Timestamp,ULAssociatedStateTable::DatabaseColumns::IsAssociated,ULAssociatedStateTable::DatabaseColumns::MacAddress,ULAssociatedStateTable::DatabaseColumns::Band,ULAssociatedStateTable::DatabaseColumns::Channel,ULAssociatedStateTable::DatabaseColumns::RowId>::addColumnName<6ul>(std::string *a1)
{
  std::string *v2;
  __int128 v3;
  void **v4;
  std::string::size_type v5;
  std::string v7;
  void *__p[2];
  int64_t v9;

  *((_BYTE *)&v7.__r_.__value_.__s + 23) = 2;
  strcpy((char *)&v7, ", ");
  v2 = std::string::append(&v7, "Channel");
  v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  v9 = v2->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v3;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  if (v9 >= 0)
    v4 = __p;
  else
    v4 = (void **)__p[0];
  if (v9 >= 0)
    v5 = HIBYTE(v9);
  else
    v5 = (std::string::size_type)__p[1];
  std::string::append(a1, (const std::string::value_type *)v4, v5);
  if (SHIBYTE(v9) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v7.__r_.__value_.__l.__data_);
  return 0;
}

void sub_241AABA5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

uint64_t CLMicroLocationDatabaseColumns::ColumnList<ULAssociatedStateTable::DatabaseColumns::LoiType,ULAssociatedStateTable::DatabaseColumns::LoiGroupId,ULAssociatedStateTable::DatabaseColumns::Timestamp,ULAssociatedStateTable::DatabaseColumns::IsAssociated,ULAssociatedStateTable::DatabaseColumns::MacAddress,ULAssociatedStateTable::DatabaseColumns::Band,ULAssociatedStateTable::DatabaseColumns::Channel,ULAssociatedStateTable::DatabaseColumns::RowId>::addColumnName<7ul>(std::string *a1)
{
  std::string *v2;
  __int128 v3;
  void **v4;
  std::string::size_type v5;
  std::string v7;
  void *__p[2];
  int64_t v9;

  *((_BYTE *)&v7.__r_.__value_.__s + 23) = 2;
  strcpy((char *)&v7, ", ");
  v2 = std::string::append(&v7, "RowId");
  v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  v9 = v2->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v3;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  if (v9 >= 0)
    v4 = __p;
  else
    v4 = (void **)__p[0];
  if (v9 >= 0)
    v5 = HIBYTE(v9);
  else
    v5 = (std::string::size_type)__p[1];
  std::string::append(a1, (const std::string::value_type *)v4, v5);
  if (SHIBYTE(v9) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v7.__r_.__value_.__l.__data_);
  return 0;
}

void sub_241AABB38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<CLMicroLocationAssociatedStateTable::Entry>::__emplace_back_slow_path<std::string &,boost::uuids::uuid &,std::chrono::time_point<cl::chrono::CFAbsoluteTimeClock,std::chrono::duration<long double,std::ratio<1l,1l>>> &,BOOL &,CLMacAddress,CLMicroLocationAssociatedStateTable::Entry::Band,long long &>(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned __int8 *a5, uint64_t a6, unsigned int *a7, unsigned int *a8)
{
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char *v22;
  uint64_t v23;
  char *v25;
  char *v26;
  char *v27;
  char *v28;
  uint64_t *v29;

  v9 = *a1;
  v10 = 0x8E38E38E38E38E39 * ((a1[1] - *a1) >> 3);
  v11 = v10 + 1;
  if (v10 + 1 > 0x38E38E38E38E38ELL)
    std::vector<CLMicroLocationProto::ConfidenceReason>::__throw_length_error[abi:ne180100]();
  v19 = (uint64_t)(a1 + 2);
  v20 = 0x8E38E38E38E38E39 * ((a1[2] - v9) >> 3);
  if (2 * v20 > v11)
    v11 = 2 * v20;
  if (v20 >= 0x1C71C71C71C71C7)
    v21 = 0x38E38E38E38E38ELL;
  else
    v21 = v11;
  v29 = a1 + 2;
  if (v21)
    v22 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CLMicroLocationAssociatedStateTable::Entry>>(v19, v21);
  else
    v22 = 0;
  v25 = v22;
  v26 = &v22[72 * v10];
  v27 = v26;
  v28 = &v22[72 * v21];
  CLMicroLocationAssociatedStateTable::Entry::Entry(v26, a2, a3, a4, *a5, a6, *a7, *a8);
  v27 = v26 + 72;
  std::vector<CLMicroLocationAssociatedStateTable::Entry>::__swap_out_circular_buffer(a1, &v25);
  v23 = a1[1];
  std::__split_buffer<CLMicroLocationAssociatedStateTable::Entry>::~__split_buffer((uint64_t)&v25);
  return v23;
}

void sub_241AABCBC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<CLMicroLocationAssociatedStateTable::Entry>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t CLMicroLocationDatabaseColumns::ColumnList<ULBlueToothIdentityTable::DatabaseColumns::RowId,ULBlueToothIdentityTable::DatabaseColumns::LastSeenTimeStamp,ULBlueToothIdentityTable::DatabaseColumns::BluetoothId,ULBlueToothIdentityTable::DatabaseColumns::DeviceName,ULBlueToothIdentityTable::DatabaseColumns::StableIdentifier>::commaSeperatedNamesGenerator<0ul,1ul,2ul,3ul,4ul>(std::string *a1)
{
  CLMicroLocationDatabaseColumns::ColumnList<ULBlueToothIdentityTable::DatabaseColumns::RowId,ULBlueToothIdentityTable::DatabaseColumns::LastSeenTimeStamp,ULBlueToothIdentityTable::DatabaseColumns::BluetoothId,ULBlueToothIdentityTable::DatabaseColumns::DeviceName,ULBlueToothIdentityTable::DatabaseColumns::StableIdentifier>::addColumnName<0ul>(a1);
  CLMicroLocationDatabaseColumns::ColumnList<ULBlueToothIdentityTable::DatabaseColumns::RowId,ULBlueToothIdentityTable::DatabaseColumns::LastSeenTimeStamp,ULBlueToothIdentityTable::DatabaseColumns::BluetoothId,ULBlueToothIdentityTable::DatabaseColumns::DeviceName,ULBlueToothIdentityTable::DatabaseColumns::StableIdentifier>::addColumnName<1ul>(a1);
  CLMicroLocationDatabaseColumns::ColumnList<ULBlueToothIdentityTable::DatabaseColumns::RowId,ULBlueToothIdentityTable::DatabaseColumns::LastSeenTimeStamp,ULBlueToothIdentityTable::DatabaseColumns::BluetoothId,ULBlueToothIdentityTable::DatabaseColumns::DeviceName,ULBlueToothIdentityTable::DatabaseColumns::StableIdentifier>::addColumnName<2ul>(a1);
  CLMicroLocationDatabaseColumns::ColumnList<ULBlueToothIdentityTable::DatabaseColumns::RowId,ULBlueToothIdentityTable::DatabaseColumns::LastSeenTimeStamp,ULBlueToothIdentityTable::DatabaseColumns::BluetoothId,ULBlueToothIdentityTable::DatabaseColumns::DeviceName,ULBlueToothIdentityTable::DatabaseColumns::StableIdentifier>::addColumnName<3ul>(a1);
  return CLMicroLocationDatabaseColumns::ColumnList<ULBlueToothIdentityTable::DatabaseColumns::RowId,ULBlueToothIdentityTable::DatabaseColumns::LastSeenTimeStamp,ULBlueToothIdentityTable::DatabaseColumns::BluetoothId,ULBlueToothIdentityTable::DatabaseColumns::DeviceName,ULBlueToothIdentityTable::DatabaseColumns::StableIdentifier>::addColumnName<4ul>(a1);
}

uint64_t CLMicroLocationDatabaseColumns::ColumnList<ULBlueToothIdentityTable::DatabaseColumns::RowId,ULBlueToothIdentityTable::DatabaseColumns::LastSeenTimeStamp,ULBlueToothIdentityTable::DatabaseColumns::BluetoothId,ULBlueToothIdentityTable::DatabaseColumns::DeviceName,ULBlueToothIdentityTable::DatabaseColumns::StableIdentifier>::addColumnName<0ul>(std::string *a1)
{
  std::string *v2;
  __int128 v3;
  void **v4;
  std::string::size_type v5;
  std::string v7;
  void *__p[2];
  int64_t v9;

  *((_BYTE *)&v7.__r_.__value_.__s + 23) = 0;
  v7.__r_.__value_.__s.__data_[0] = 0;
  v2 = std::string::append(&v7, "RowId");
  v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  v9 = v2->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v3;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  if (v9 >= 0)
    v4 = __p;
  else
    v4 = (void **)__p[0];
  if (v9 >= 0)
    v5 = HIBYTE(v9);
  else
    v5 = (std::string::size_type)__p[1];
  std::string::append(a1, (const std::string::value_type *)v4, v5);
  if (SHIBYTE(v9) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v7.__r_.__value_.__l.__data_);
  return 0;
}

void sub_241AABDA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

uint64_t CLMicroLocationDatabaseColumns::ColumnList<ULBlueToothIdentityTable::DatabaseColumns::RowId,ULBlueToothIdentityTable::DatabaseColumns::LastSeenTimeStamp,ULBlueToothIdentityTable::DatabaseColumns::BluetoothId,ULBlueToothIdentityTable::DatabaseColumns::DeviceName,ULBlueToothIdentityTable::DatabaseColumns::StableIdentifier>::addColumnName<1ul>(std::string *a1)
{
  std::string *v2;
  __int128 v3;
  void **v4;
  std::string::size_type v5;
  std::string v7;
  void *__p[2];
  int64_t v9;

  *((_BYTE *)&v7.__r_.__value_.__s + 23) = 2;
  strcpy((char *)&v7, ", ");
  v2 = std::string::append(&v7, "LastSeenTimeStamp");
  v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  v9 = v2->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v3;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  if (v9 >= 0)
    v4 = __p;
  else
    v4 = (void **)__p[0];
  if (v9 >= 0)
    v5 = HIBYTE(v9);
  else
    v5 = (std::string::size_type)__p[1];
  std::string::append(a1, (const std::string::value_type *)v4, v5);
  if (SHIBYTE(v9) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v7.__r_.__value_.__l.__data_);
  return 0;
}

void sub_241AABE84(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

uint64_t CLMicroLocationDatabaseColumns::ColumnList<ULBlueToothIdentityTable::DatabaseColumns::RowId,ULBlueToothIdentityTable::DatabaseColumns::LastSeenTimeStamp,ULBlueToothIdentityTable::DatabaseColumns::BluetoothId,ULBlueToothIdentityTable::DatabaseColumns::DeviceName,ULBlueToothIdentityTable::DatabaseColumns::StableIdentifier>::addColumnName<2ul>(std::string *a1)
{
  std::string *v2;
  __int128 v3;
  void **v4;
  std::string::size_type v5;
  std::string v7;
  void *__p[2];
  int64_t v9;

  *((_BYTE *)&v7.__r_.__value_.__s + 23) = 2;
  strcpy((char *)&v7, ", ");
  v2 = std::string::append(&v7, "BluetoothId");
  v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  v9 = v2->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v3;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  if (v9 >= 0)
    v4 = __p;
  else
    v4 = (void **)__p[0];
  if (v9 >= 0)
    v5 = HIBYTE(v9);
  else
    v5 = (std::string::size_type)__p[1];
  std::string::append(a1, (const std::string::value_type *)v4, v5);
  if (SHIBYTE(v9) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v7.__r_.__value_.__l.__data_);
  return 0;
}

void sub_241AABF60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

uint64_t CLMicroLocationDatabaseColumns::ColumnList<ULBlueToothIdentityTable::DatabaseColumns::RowId,ULBlueToothIdentityTable::DatabaseColumns::LastSeenTimeStamp,ULBlueToothIdentityTable::DatabaseColumns::BluetoothId,ULBlueToothIdentityTable::DatabaseColumns::DeviceName,ULBlueToothIdentityTable::DatabaseColumns::StableIdentifier>::addColumnName<3ul>(std::string *a1)
{
  std::string *v2;
  __int128 v3;
  void **v4;
  std::string::size_type v5;
  std::string v7;
  void *__p[2];
  int64_t v9;

  *((_BYTE *)&v7.__r_.__value_.__s + 23) = 2;
  strcpy((char *)&v7, ", ");
  v2 = std::string::append(&v7, "DeviceName");
  v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  v9 = v2->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v3;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  if (v9 >= 0)
    v4 = __p;
  else
    v4 = (void **)__p[0];
  if (v9 >= 0)
    v5 = HIBYTE(v9);
  else
    v5 = (std::string::size_type)__p[1];
  std::string::append(a1, (const std::string::value_type *)v4, v5);
  if (SHIBYTE(v9) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v7.__r_.__value_.__l.__data_);
  return 0;
}

void sub_241AAC03C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

uint64_t CLMicroLocationDatabaseColumns::ColumnList<ULBlueToothIdentityTable::DatabaseColumns::RowId,ULBlueToothIdentityTable::DatabaseColumns::LastSeenTimeStamp,ULBlueToothIdentityTable::DatabaseColumns::BluetoothId,ULBlueToothIdentityTable::DatabaseColumns::DeviceName,ULBlueToothIdentityTable::DatabaseColumns::StableIdentifier>::addColumnName<4ul>(std::string *a1)
{
  std::string *v2;
  __int128 v3;
  void **v4;
  std::string::size_type v5;
  std::string v7;
  void *__p[2];
  int64_t v9;

  *((_BYTE *)&v7.__r_.__value_.__s + 23) = 2;
  strcpy((char *)&v7, ", ");
  v2 = std::string::append(&v7, "StableIdentifier");
  v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  v9 = v2->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v3;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  if (v9 >= 0)
    v4 = __p;
  else
    v4 = (void **)__p[0];
  if (v9 >= 0)
    v5 = HIBYTE(v9);
  else
    v5 = (std::string::size_type)__p[1];
  std::string::append(a1, (const std::string::value_type *)v4, v5);
  if (SHIBYTE(v9) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v7.__r_.__value_.__l.__data_);
  return 0;
}

void sub_241AAC118(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<CLMicroLocationBluetoothIdentityTable::Entry>::__emplace_back_slow_path<boost::uuids::uuid,std::string &,std::string &,std::chrono::time_point<cl::chrono::CFAbsoluteTimeClock,std::chrono::duration<long double,std::ratio<1l,1l>>> &>(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4, double *a5)
{
  unint64_t v6;
  unint64_t v7;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  void *v16;
  char *v17;
  char *v18;
  char *v19;
  uint64_t *v20;

  v6 = 0x8E38E38E38E38E39 * ((a1[1] - *a1) >> 3);
  v7 = v6 + 1;
  if (v6 + 1 > 0x38E38E38E38E38ELL)
    std::vector<CLMicroLocationProto::ConfidenceReason>::__throw_length_error[abi:ne180100]();
  if (0x1C71C71C71C71C72 * ((a1[2] - *a1) >> 3) > v7)
    v7 = 0x1C71C71C71C71C72 * ((a1[2] - *a1) >> 3);
  if (0x8E38E38E38E38E39 * ((a1[2] - *a1) >> 3) >= 0x1C71C71C71C71C7)
    v12 = 0x38E38E38E38E38ELL;
  else
    v12 = v7;
  v20 = a1 + 2;
  if (v12)
    v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CLMicroLocationAssociatedStateTable::Entry>>((uint64_t)(a1 + 2), v12);
  else
    v13 = 0;
  v16 = v13;
  v17 = &v13[72 * v6];
  v19 = &v13[72 * v12];
  std::allocator<CLMicroLocationBluetoothIdentityTable::Entry>::construct[abi:ne180100]<CLMicroLocationBluetoothIdentityTable::Entry,boost::uuids::uuid,std::string &,std::string &,std::chrono::time_point<cl::chrono::CFAbsoluteTimeClock,std::chrono::duration<long double,std::ratio<1l,1l>>> &>((uint64_t)(a1 + 2), (uint64_t)v17, a2, a3, a4, a5);
  v18 = v17 + 72;
  std::vector<CLMicroLocationBluetoothIdentityTable::Entry>::__swap_out_circular_buffer(a1, &v16);
  v14 = a1[1];
  std::__split_buffer<CLMicroLocationBluetoothIdentityTable::Entry>::~__split_buffer(&v16);
  return v14;
}

void sub_241AAC284(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<CLMicroLocationBluetoothIdentityTable::Entry>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

void std::allocator<CLMicroLocationBluetoothIdentityTable::Entry>::construct[abi:ne180100]<CLMicroLocationBluetoothIdentityTable::Entry,boost::uuids::uuid,std::string &,std::string &,std::chrono::time_point<cl::chrono::CFAbsoluteTimeClock,std::chrono::duration<long double,std::ratio<1l,1l>>> &>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, double *a6)
{
  uint64_t v9;
  uint64_t v10;
  std::string __p;
  std::string v12;

  v9 = *a3;
  v10 = a3[1];
  if (*(char *)(a4 + 23) < 0)
    std::string::__init_copy_ctor_external(&v12, *(const std::string::value_type **)a4, *(_QWORD *)(a4 + 8));
  else
    v12 = *(std::string *)a4;
  if (*(char *)(a5 + 23) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a5, *(_QWORD *)(a5 + 8));
  else
    __p = *(std::string *)a5;
  CLMicroLocationBluetoothIdentityTable::Entry::Entry(a2, v9, v10, &v12, &__p, *a6);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v12.__r_.__value_.__l.__data_);
}

void sub_241AAC364(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<CLMicroLocationBluetoothIdentityTable::Entry>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<CLMicroLocationBluetoothIdentityTable::Entry>,std::reverse_iterator<CLMicroLocationBluetoothIdentityTable::Entry*>,std::reverse_iterator<CLMicroLocationBluetoothIdentityTable::Entry*>,std::reverse_iterator<CLMicroLocationBluetoothIdentityTable::Entry*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<CLMicroLocationBluetoothIdentityTable::Entry>,std::reverse_iterator<CLMicroLocationBluetoothIdentityTable::Entry*>,std::reverse_iterator<CLMicroLocationBluetoothIdentityTable::Entry*>,std::reverse_iterator<CLMicroLocationBluetoothIdentityTable::Entry*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  _QWORD v12[3];
  char v13;
  __int128 v14;
  __int128 v15;

  v7 = a7;
  *(_QWORD *)&v15 = a6;
  *((_QWORD *)&v15 + 1) = a7;
  v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  if (a3 == a5)
  {
    v10 = a6;
  }
  else
  {
    do
    {
      *(_OWORD *)(v7 - 72) = *(_OWORD *)(a3 - 72);
      v8 = *(_OWORD *)(a3 - 56);
      *(_QWORD *)(v7 - 40) = *(_QWORD *)(a3 - 40);
      *(_OWORD *)(v7 - 56) = v8;
      *(_QWORD *)(a3 - 48) = 0;
      *(_QWORD *)(a3 - 40) = 0;
      *(_QWORD *)(a3 - 56) = 0;
      v9 = *(_OWORD *)(a3 - 32);
      *(_QWORD *)(v7 - 16) = *(_QWORD *)(a3 - 16);
      *(_OWORD *)(v7 - 32) = v9;
      *(_QWORD *)(a3 - 24) = 0;
      *(_QWORD *)(a3 - 16) = 0;
      *(_QWORD *)(a3 - 32) = 0;
      *(_QWORD *)(v7 - 8) = *(_QWORD *)(a3 - 8);
      v7 = *((_QWORD *)&v15 + 1) - 72;
      *((_QWORD *)&v15 + 1) -= 72;
      a3 -= 72;
    }
    while (a3 != a5);
    v10 = v15;
  }
  v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<CLMicroLocationBluetoothIdentityTable::Entry>,std::reverse_iterator<CLMicroLocationBluetoothIdentityTable::Entry*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return v10;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<CLMicroLocationBluetoothIdentityTable::Entry>,std::reverse_iterator<CLMicroLocationBluetoothIdentityTable::Entry*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<CLMicroLocationBluetoothIdentityTable::Entry>,std::reverse_iterator<CLMicroLocationBluetoothIdentityTable::Entry*>>::operator()[abi:ne180100]((uint64_t *)a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<CLMicroLocationBluetoothIdentityTable::Entry>,std::reverse_iterator<CLMicroLocationBluetoothIdentityTable::Entry*>>::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(a1[2] + 8);
  v2 = *(_QWORD *)(a1[1] + 8);
  if (v1 != v2)
  {
    v3 = *a1;
    do
    {
      std::allocator<CLMicroLocationRapportMonitor::Item>::destroy[abi:ne180100](v3, v1);
      v1 += 72;
    }
    while (v1 != v2);
  }
}

void **std::__split_buffer<CLMicroLocationBluetoothIdentityTable::Entry>::~__split_buffer(void **a1)
{
  std::__split_buffer<CLMicroLocationBluetoothIdentityTable::Entry>::clear[abi:ne180100](a1);
  if (*a1)
    operator delete(*a1);
  return a1;
}

void std::__split_buffer<CLMicroLocationBluetoothIdentityTable::Entry>::clear[abi:ne180100](_QWORD *a1)
{
  uint64_t i;
  uint64_t v2;
  uint64_t v4;

  v2 = a1[1];
  for (i = a1[2]; i != v2; i = a1[2])
  {
    v4 = a1[4];
    a1[2] = i - 72;
    std::allocator<CLMicroLocationRapportMonitor::Item>::destroy[abi:ne180100](v4, i - 72);
  }
}

uint64_t CLMicroLocationDatabaseColumns::ColumnList<ULConfigurationTable::DatabaseColumns::GenerationTimestamp,ULConfigurationTable::DatabaseColumns::RTLOIType,ULConfigurationTable::DatabaseColumns::ConfigurationType,ULConfigurationTable::DatabaseColumns::Configuration,ULConfigurationTable::DatabaseColumns::RowId,ULConfigurationTable::DatabaseColumns::RtLoiGroupId>::commaSeperatedNamesGenerator<0ul,1ul,2ul,3ul,4ul,5ul>(std::string *a1)
{
  CLMicroLocationDatabaseColumns::ColumnList<ULConfigurationTable::DatabaseColumns::GenerationTimestamp,ULConfigurationTable::DatabaseColumns::RTLOIType,ULConfigurationTable::DatabaseColumns::ConfigurationType,ULConfigurationTable::DatabaseColumns::Configuration,ULConfigurationTable::DatabaseColumns::RowId,ULConfigurationTable::DatabaseColumns::RtLoiGroupId>::addColumnName<0ul>(a1);
  CLMicroLocationDatabaseColumns::ColumnList<ULConfigurationTable::DatabaseColumns::GenerationTimestamp,ULConfigurationTable::DatabaseColumns::RTLOIType,ULConfigurationTable::DatabaseColumns::ConfigurationType,ULConfigurationTable::DatabaseColumns::Configuration,ULConfigurationTable::DatabaseColumns::RowId,ULConfigurationTable::DatabaseColumns::RtLoiGroupId>::addColumnName<1ul>(a1);
  CLMicroLocationDatabaseColumns::ColumnList<ULConfigurationTable::DatabaseColumns::GenerationTimestamp,ULConfigurationTable::DatabaseColumns::RTLOIType,ULConfigurationTable::DatabaseColumns::ConfigurationType,ULConfigurationTable::DatabaseColumns::Configuration,ULConfigurationTable::DatabaseColumns::RowId,ULConfigurationTable::DatabaseColumns::RtLoiGroupId>::addColumnName<2ul>(a1);
  CLMicroLocationDatabaseColumns::ColumnList<ULConfigurationTable::DatabaseColumns::GenerationTimestamp,ULConfigurationTable::DatabaseColumns::RTLOIType,ULConfigurationTable::DatabaseColumns::ConfigurationType,ULConfigurationTable::DatabaseColumns::Configuration,ULConfigurationTable::DatabaseColumns::RowId,ULConfigurationTable::DatabaseColumns::RtLoiGroupId>::addColumnName<3ul>(a1);
  CLMicroLocationDatabaseColumns::ColumnList<ULConfigurationTable::DatabaseColumns::GenerationTimestamp,ULConfigurationTable::DatabaseColumns::RTLOIType,ULConfigurationTable::DatabaseColumns::ConfigurationType,ULConfigurationTable::DatabaseColumns::Configuration,ULConfigurationTable::DatabaseColumns::RowId,ULConfigurationTable::DatabaseColumns::RtLoiGroupId>::addColumnName<4ul>(a1);
  return CLMicroLocationDatabaseColumns::ColumnList<ULConfigurationTable::DatabaseColumns::GenerationTimestamp,ULConfigurationTable::DatabaseColumns::RTLOIType,ULConfigurationTable::DatabaseColumns::ConfigurationType,ULConfigurationTable::DatabaseColumns::Configuration,ULConfigurationTable::DatabaseColumns::RowId,ULConfigurationTable::DatabaseColumns::RtLoiGroupId>::addColumnName<5ul>(a1);
}

uint64_t CLMicroLocationDatabaseColumns::ColumnList<ULConfigurationTable::DatabaseColumns::GenerationTimestamp,ULConfigurationTable::DatabaseColumns::RTLOIType,ULConfigurationTable::DatabaseColumns::ConfigurationType,ULConfigurationTable::DatabaseColumns::Configuration,ULConfigurationTable::DatabaseColumns::RowId,ULConfigurationTable::DatabaseColumns::RtLoiGroupId>::addColumnName<0ul>(std::string *a1)
{
  std::string *v2;
  __int128 v3;
  void **v4;
  std::string::size_type v5;
  std::string v7;
  void *__p[2];
  int64_t v9;

  *((_BYTE *)&v7.__r_.__value_.__s + 23) = 0;
  v7.__r_.__value_.__s.__data_[0] = 0;
  v2 = std::string::append(&v7, "GenerationTimestamp");
  v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  v9 = v2->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v3;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  if (v9 >= 0)
    v4 = __p;
  else
    v4 = (void **)__p[0];
  if (v9 >= 0)
    v5 = HIBYTE(v9);
  else
    v5 = (std::string::size_type)__p[1];
  std::string::append(a1, (const std::string::value_type *)v4, v5);
  if (SHIBYTE(v9) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v7.__r_.__value_.__l.__data_);
  return 0;
}

void sub_241AAC6AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

uint64_t CLMicroLocationDatabaseColumns::ColumnList<ULConfigurationTable::DatabaseColumns::GenerationTimestamp,ULConfigurationTable::DatabaseColumns::RTLOIType,ULConfigurationTable::DatabaseColumns::ConfigurationType,ULConfigurationTable::DatabaseColumns::Configuration,ULConfigurationTable::DatabaseColumns::RowId,ULConfigurationTable::DatabaseColumns::RtLoiGroupId>::addColumnName<1ul>(std::string *a1)
{
  std::string *v2;
  __int128 v3;
  void **v4;
  std::string::size_type v5;
  std::string v7;
  void *__p[2];
  int64_t v9;

  *((_BYTE *)&v7.__r_.__value_.__s + 23) = 2;
  strcpy((char *)&v7, ", ");
  v2 = std::string::append(&v7, "RTLOIType");
  v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  v9 = v2->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v3;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  if (v9 >= 0)
    v4 = __p;
  else
    v4 = (void **)__p[0];
  if (v9 >= 0)
    v5 = HIBYTE(v9);
  else
    v5 = (std::string::size_type)__p[1];
  std::string::append(a1, (const std::string::value_type *)v4, v5);
  if (SHIBYTE(v9) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v7.__r_.__value_.__l.__data_);
  return 0;
}

void sub_241AAC788(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

uint64_t CLMicroLocationDatabaseColumns::ColumnList<ULConfigurationTable::DatabaseColumns::GenerationTimestamp,ULConfigurationTable::DatabaseColumns::RTLOIType,ULConfigurationTable::DatabaseColumns::ConfigurationType,ULConfigurationTable::DatabaseColumns::Configuration,ULConfigurationTable::DatabaseColumns::RowId,ULConfigurationTable::DatabaseColumns::RtLoiGroupId>::addColumnName<2ul>(std::string *a1)
{
  std::string *v2;
  __int128 v3;
  void **v4;
  std::string::size_type v5;
  std::string v7;
  void *__p[2];
  int64_t v9;

  *((_BYTE *)&v7.__r_.__value_.__s + 23) = 2;
  strcpy((char *)&v7, ", ");
  v2 = std::string::append(&v7, "ConfigurationType");
  v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  v9 = v2->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v3;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  if (v9 >= 0)
    v4 = __p;
  else
    v4 = (void **)__p[0];
  if (v9 >= 0)
    v5 = HIBYTE(v9);
  else
    v5 = (std::string::size_type)__p[1];
  std::string::append(a1, (const std::string::value_type *)v4, v5);
  if (SHIBYTE(v9) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v7.__r_.__value_.__l.__data_);
  return 0;
}

void sub_241AAC864(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

uint64_t CLMicroLocationDatabaseColumns::ColumnList<ULConfigurationTable::DatabaseColumns::GenerationTimestamp,ULConfigurationTable::DatabaseColumns::RTLOIType,ULConfigurationTable::DatabaseColumns::ConfigurationType,ULConfigurationTable::DatabaseColumns::Configuration,ULConfigurationTable::DatabaseColumns::RowId,ULConfigurationTable::DatabaseColumns::RtLoiGroupId>::addColumnName<3ul>(std::string *a1)
{
  std::string *v2;
  __int128 v3;
  void **v4;
  std::string::size_type v5;
  std::string v7;
  void *__p[2];
  int64_t v9;

  *((_BYTE *)&v7.__r_.__value_.__s + 23) = 2;
  strcpy((char *)&v7, ", ");
  v2 = std::string::append(&v7, "Configuration");
  v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  v9 = v2->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v3;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  if (v9 >= 0)
    v4 = __p;
  else
    v4 = (void **)__p[0];
  if (v9 >= 0)
    v5 = HIBYTE(v9);
  else
    v5 = (std::string::size_type)__p[1];
  std::string::append(a1, (const std::string::value_type *)v4, v5);
  if (SHIBYTE(v9) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v7.__r_.__value_.__l.__data_);
  return 0;
}

void sub_241AAC940(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

uint64_t CLMicroLocationDatabaseColumns::ColumnList<ULConfigurationTable::DatabaseColumns::GenerationTimestamp,ULConfigurationTable::DatabaseColumns::RTLOIType,ULConfigurationTable::DatabaseColumns::ConfigurationType,ULConfigurationTable::DatabaseColumns::Configuration,ULConfigurationTable::DatabaseColumns::RowId,ULConfigurationTable::DatabaseColumns::RtLoiGroupId>::addColumnName<4ul>(std::string *a1)
{
  std::string *v2;
  __int128 v3;
  void **v4;
  std::string::size_type v5;
  std::string v7;
  void *__p[2];
  int64_t v9;

  *((_BYTE *)&v7.__r_.__value_.__s + 23) = 2;
  strcpy((char *)&v7, ", ");
  v2 = std::string::append(&v7, "RowId");
  v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  v9 = v2->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v3;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  if (v9 >= 0)
    v4 = __p;
  else
    v4 = (void **)__p[0];
  if (v9 >= 0)
    v5 = HIBYTE(v9);
  else
    v5 = (std::string::size_type)__p[1];
  std::string::append(a1, (const std::string::value_type *)v4, v5);
  if (SHIBYTE(v9) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v7.__r_.__value_.__l.__data_);
  return 0;
}

void sub_241AACA1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

uint64_t CLMicroLocationDatabaseColumns::ColumnList<ULConfigurationTable::DatabaseColumns::GenerationTimestamp,ULConfigurationTable::DatabaseColumns::RTLOIType,ULConfigurationTable::DatabaseColumns::ConfigurationType,ULConfigurationTable::DatabaseColumns::Configuration,ULConfigurationTable::DatabaseColumns::RowId,ULConfigurationTable::DatabaseColumns::RtLoiGroupId>::addColumnName<5ul>(std::string *a1)
{
  std::string *v2;
  __int128 v3;
  void **v4;
  std::string::size_type v5;
  std::string v7;
  void *__p[2];
  int64_t v9;

  *((_BYTE *)&v7.__r_.__value_.__s + 23) = 2;
  strcpy((char *)&v7, ", ");
  v2 = std::string::append(&v7, "RtLoiGroupId");
  v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  v9 = v2->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v3;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  if (v9 >= 0)
    v4 = __p;
  else
    v4 = (void **)__p[0];
  if (v9 >= 0)
    v5 = HIBYTE(v9);
  else
    v5 = (std::string::size_type)__p[1];
  std::string::append(a1, (const std::string::value_type *)v4, v5);
  if (SHIBYTE(v9) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v7.__r_.__value_.__l.__data_);
  return 0;
}

void sub_241AACAF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<CLMicroLocationConfigurationTable::Entry>::__emplace_back_slow_path<std::string &,CLMicroLocationProto::Configuration &,boost::uuids::uuid>(uint64_t *a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v5;
  unint64_t v6;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  void *v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t *v18;

  v5 = 0x6DB6DB6DB6DB6DB7 * ((a1[1] - *a1) >> 4);
  v6 = v5 + 1;
  if ((unint64_t)(v5 + 1) > 0x249249249249249)
    std::vector<CLMicroLocationProto::ConfidenceReason>::__throw_length_error[abi:ne180100]();
  if (0xDB6DB6DB6DB6DB6ELL * ((a1[2] - *a1) >> 4) > v6)
    v6 = 0xDB6DB6DB6DB6DB6ELL * ((a1[2] - *a1) >> 4);
  if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((a1[2] - *a1) >> 4)) >= 0x124924924924924)
    v10 = 0x249249249249249;
  else
    v10 = v6;
  v18 = a1 + 2;
  if (v10)
    v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CLMicroLocationConfigurationTable::Entry>>((uint64_t)(a1 + 2), v10);
  else
    v11 = 0;
  v14 = v11;
  v15 = &v11[112 * v5];
  v17 = &v11[112 * v10];
  std::allocator<CLMicroLocationConfigurationTable::Entry>::construct[abi:ne180100]<CLMicroLocationConfigurationTable::Entry,std::string &,CLMicroLocationProto::Configuration &,boost::uuids::uuid>((uint64_t)(a1 + 2), (uint64_t)v15, a2, a3, a4);
  v16 = v15 + 112;
  std::vector<CLMicroLocationConfigurationTable::Entry>::__swap_out_circular_buffer(a1, &v14);
  v12 = a1[1];
  std::__split_buffer<CLMicroLocationConfigurationTable::Entry>::~__split_buffer(&v14);
  return v12;
}

void sub_241AACC54(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<CLMicroLocationConfigurationTable::Entry>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

void std::allocator<CLMicroLocationConfigurationTable::Entry>::construct[abi:ne180100]<CLMicroLocationConfigurationTable::Entry,std::string &,CLMicroLocationProto::Configuration &,boost::uuids::uuid>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  std::string __p;

  if (*(char *)(a3 + 23) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  else
    __p = *(std::string *)a3;
  CLMicroLocationConfigurationTable::Entry::Entry(a2, &__p, a4, *a5, a5[1]);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_241AACCE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t CLMicroLocationDatabaseColumns::ColumnList<ULModelTable::DatabaseColumns::ModelUUID,ULModelTable::DatabaseColumns::GenerationTimestamp,ULModelTable::DatabaseColumns::ModelType,ULModelTable::DatabaseColumns::Model,ULModelTable::DatabaseColumns::RowId,ULModelTable::DatabaseColumns::ClientID,ULModelTable::DatabaseColumns::LoiGroupId>::commaSeperatedNamesGenerator<0ul,1ul,2ul,3ul,4ul,5ul,6ul>(std::string *a1)
{
  CLMicroLocationDatabaseColumns::ColumnList<ULModelTable::DatabaseColumns::ModelUUID,ULModelTable::DatabaseColumns::GenerationTimestamp,ULModelTable::DatabaseColumns::ModelType,ULModelTable::DatabaseColumns::Model,ULModelTable::DatabaseColumns::RowId,ULModelTable::DatabaseColumns::ClientID,ULModelTable::DatabaseColumns::LoiGroupId>::addColumnName<0ul>(a1);
  CLMicroLocationDatabaseColumns::ColumnList<ULModelTable::DatabaseColumns::ModelUUID,ULModelTable::DatabaseColumns::GenerationTimestamp,ULModelTable::DatabaseColumns::ModelType,ULModelTable::DatabaseColumns::Model,ULModelTable::DatabaseColumns::RowId,ULModelTable::DatabaseColumns::ClientID,ULModelTable::DatabaseColumns::LoiGroupId>::addColumnName<1ul>(a1);
  CLMicroLocationDatabaseColumns::ColumnList<ULModelTable::DatabaseColumns::ModelUUID,ULModelTable::DatabaseColumns::GenerationTimestamp,ULModelTable::DatabaseColumns::ModelType,ULModelTable::DatabaseColumns::Model,ULModelTable::DatabaseColumns::RowId,ULModelTable::DatabaseColumns::ClientID,ULModelTable::DatabaseColumns::LoiGroupId>::addColumnName<2ul>(a1);
  CLMicroLocationDatabaseColumns::ColumnList<ULModelTable::DatabaseColumns::ModelUUID,ULModelTable::DatabaseColumns::GenerationTimestamp,ULModelTable::DatabaseColumns::ModelType,ULModelTable::DatabaseColumns::Model,ULModelTable::DatabaseColumns::RowId,ULModelTable::DatabaseColumns::ClientID,ULModelTable::DatabaseColumns::LoiGroupId>::addColumnName<3ul>(a1);
  CLMicroLocationDatabaseColumns::ColumnList<ULModelTable::DatabaseColumns::ModelUUID,ULModelTable::DatabaseColumns::GenerationTimestamp,ULModelTable::DatabaseColumns::ModelType,ULModelTable::DatabaseColumns::Model,ULModelTable::DatabaseColumns::RowId,ULModelTable::DatabaseColumns::ClientID,ULModelTable::DatabaseColumns::LoiGroupId>::addColumnName<4ul>(a1);
  CLMicroLocationDatabaseColumns::ColumnList<ULModelTable::DatabaseColumns::ModelUUID,ULModelTable::DatabaseColumns::GenerationTimestamp,ULModelTable::DatabaseColumns::ModelType,ULModelTable::DatabaseColumns::Model,ULModelTable::DatabaseColumns::RowId,ULModelTable::DatabaseColumns::ClientID,ULModelTable::DatabaseColumns::LoiGroupId>::addColumnName<5ul>(a1);
  return CLMicroLocationDatabaseColumns::ColumnList<ULModelTable::DatabaseColumns::ModelUUID,ULModelTable::DatabaseColumns::GenerationTimestamp,ULModelTable::DatabaseColumns::ModelType,ULModelTable::DatabaseColumns::Model,ULModelTable::DatabaseColumns::RowId,ULModelTable::DatabaseColumns::ClientID,ULModelTable::DatabaseColumns::LoiGroupId>::addColumnName<6ul>(a1);
}

uint64_t CLMicroLocationDatabaseColumns::ColumnList<ULModelTable::DatabaseColumns::ModelUUID,ULModelTable::DatabaseColumns::GenerationTimestamp,ULModelTable::DatabaseColumns::ModelType,ULModelTable::DatabaseColumns::Model,ULModelTable::DatabaseColumns::RowId,ULModelTable::DatabaseColumns::ClientID,ULModelTable::DatabaseColumns::LoiGroupId>::addColumnName<0ul>(std::string *a1)
{
  std::string *v2;
  __int128 v3;
  void **v4;
  std::string::size_type v5;
  std::string v7;
  void *__p[2];
  int64_t v9;

  *((_BYTE *)&v7.__r_.__value_.__s + 23) = 0;
  v7.__r_.__value_.__s.__data_[0] = 0;
  v2 = std::string::append(&v7, "ModelUUID");
  v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  v9 = v2->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v3;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  if (v9 >= 0)
    v4 = __p;
  else
    v4 = (void **)__p[0];
  if (v9 >= 0)
    v5 = HIBYTE(v9);
  else
    v5 = (std::string::size_type)__p[1];
  std::string::append(a1, (const std::string::value_type *)v4, v5);
  if (SHIBYTE(v9) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v7.__r_.__value_.__l.__data_);
  return 0;
}

void sub_241AACDEC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

uint64_t CLMicroLocationDatabaseColumns::ColumnList<ULModelTable::DatabaseColumns::ModelUUID,ULModelTable::DatabaseColumns::GenerationTimestamp,ULModelTable::DatabaseColumns::ModelType,ULModelTable::DatabaseColumns::Model,ULModelTable::DatabaseColumns::RowId,ULModelTable::DatabaseColumns::ClientID,ULModelTable::DatabaseColumns::LoiGroupId>::addColumnName<1ul>(std::string *a1)
{
  std::string *v2;
  __int128 v3;
  void **v4;
  std::string::size_type v5;
  std::string v7;
  void *__p[2];
  int64_t v9;

  *((_BYTE *)&v7.__r_.__value_.__s + 23) = 2;
  strcpy((char *)&v7, ", ");
  v2 = std::string::append(&v7, "GenerationTimestamp");
  v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  v9 = v2->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v3;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  if (v9 >= 0)
    v4 = __p;
  else
    v4 = (void **)__p[0];
  if (v9 >= 0)
    v5 = HIBYTE(v9);
  else
    v5 = (std::string::size_type)__p[1];
  std::string::append(a1, (const std::string::value_type *)v4, v5);
  if (SHIBYTE(v9) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v7.__r_.__value_.__l.__data_);
  return 0;
}

void sub_241AACEC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

uint64_t CLMicroLocationDatabaseColumns::ColumnList<ULModelTable::DatabaseColumns::ModelUUID,ULModelTable::DatabaseColumns::GenerationTimestamp,ULModelTable::DatabaseColumns::ModelType,ULModelTable::DatabaseColumns::Model,ULModelTable::DatabaseColumns::RowId,ULModelTable::DatabaseColumns::ClientID,ULModelTable::DatabaseColumns::LoiGroupId>::addColumnName<2ul>(std::string *a1)
{
  std::string *v2;
  __int128 v3;
  void **v4;
  std::string::size_type v5;
  std::string v7;
  void *__p[2];
  int64_t v9;

  *((_BYTE *)&v7.__r_.__value_.__s + 23) = 2;
  strcpy((char *)&v7, ", ");
  v2 = std::string::append(&v7, "ModelType");
  v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  v9 = v2->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v3;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  if (v9 >= 0)
    v4 = __p;
  else
    v4 = (void **)__p[0];
  if (v9 >= 0)
    v5 = HIBYTE(v9);
  else
    v5 = (std::string::size_type)__p[1];
  std::string::append(a1, (const std::string::value_type *)v4, v5);
  if (SHIBYTE(v9) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v7.__r_.__value_.__l.__data_);
  return 0;
}

void sub_241AACFA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

uint64_t CLMicroLocationDatabaseColumns::ColumnList<ULModelTable::DatabaseColumns::ModelUUID,ULModelTable::DatabaseColumns::GenerationTimestamp,ULModelTable::DatabaseColumns::ModelType,ULModelTable::DatabaseColumns::Model,ULModelTable::DatabaseColumns::RowId,ULModelTable::DatabaseColumns::ClientID,ULModelTable::DatabaseColumns::LoiGroupId>::addColumnName<3ul>(std::string *a1)
{
  std::string *v2;
  __int128 v3;
  void **v4;
  std::string::size_type v5;
  std::string v7;
  void *__p[2];
  int64_t v9;

  *((_BYTE *)&v7.__r_.__value_.__s + 23) = 2;
  strcpy((char *)&v7, ", ");
  v2 = std::string::append(&v7, "Model");
  v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  v9 = v2->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v3;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  if (v9 >= 0)
    v4 = __p;
  else
    v4 = (void **)__p[0];
  if (v9 >= 0)
    v5 = HIBYTE(v9);
  else
    v5 = (std::string::size_type)__p[1];
  std::string::append(a1, (const std::string::value_type *)v4, v5);
  if (SHIBYTE(v9) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v7.__r_.__value_.__l.__data_);
  return 0;
}

void sub_241AAD080(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

uint64_t CLMicroLocationDatabaseColumns::ColumnList<ULModelTable::DatabaseColumns::ModelUUID,ULModelTable::DatabaseColumns::GenerationTimestamp,ULModelTable::DatabaseColumns::ModelType,ULModelTable::DatabaseColumns::Model,ULModelTable::DatabaseColumns::RowId,ULModelTable::DatabaseColumns::ClientID,ULModelTable::DatabaseColumns::LoiGroupId>::addColumnName<4ul>(std::string *a1)
{
  std::string *v2;
  __int128 v3;
  void **v4;
  std::string::size_type v5;
  std::string v7;
  void *__p[2];
  int64_t v9;

  *((_BYTE *)&v7.__r_.__value_.__s + 23) = 2;
  strcpy((char *)&v7, ", ");
  v2 = std::string::append(&v7, "RowId");
  v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  v9 = v2->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v3;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  if (v9 >= 0)
    v4 = __p;
  else
    v4 = (void **)__p[0];
  if (v9 >= 0)
    v5 = HIBYTE(v9);
  else
    v5 = (std::string::size_type)__p[1];
  std::string::append(a1, (const std::string::value_type *)v4, v5);
  if (SHIBYTE(v9) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v7.__r_.__value_.__l.__data_);
  return 0;
}

void sub_241AAD15C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

uint64_t CLMicroLocationDatabaseColumns::ColumnList<ULModelTable::DatabaseColumns::ModelUUID,ULModelTable::DatabaseColumns::GenerationTimestamp,ULModelTable::DatabaseColumns::ModelType,ULModelTable::DatabaseColumns::Model,ULModelTable::DatabaseColumns::RowId,ULModelTable::DatabaseColumns::ClientID,ULModelTable::DatabaseColumns::LoiGroupId>::addColumnName<5ul>(std::string *a1)
{
  std::string *v2;
  __int128 v3;
  void **v4;
  std::string::size_type v5;
  std::string v7;
  void *__p[2];
  int64_t v9;

  *((_BYTE *)&v7.__r_.__value_.__s + 23) = 2;
  strcpy((char *)&v7, ", ");
  v2 = std::string::append(&v7, "ClientID");
  v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  v9 = v2->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v3;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  if (v9 >= 0)
    v4 = __p;
  else
    v4 = (void **)__p[0];
  if (v9 >= 0)
    v5 = HIBYTE(v9);
  else
    v5 = (std::string::size_type)__p[1];
  std::string::append(a1, (const std::string::value_type *)v4, v5);
  if (SHIBYTE(v9) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v7.__r_.__value_.__l.__data_);
  return 0;
}

void sub_241AAD238(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

uint64_t CLMicroLocationDatabaseColumns::ColumnList<ULModelTable::DatabaseColumns::ModelUUID,ULModelTable::DatabaseColumns::GenerationTimestamp,ULModelTable::DatabaseColumns::ModelType,ULModelTable::DatabaseColumns::Model,ULModelTable::DatabaseColumns::RowId,ULModelTable::DatabaseColumns::ClientID,ULModelTable::DatabaseColumns::LoiGroupId>::addColumnName<6ul>(std::string *a1)
{
  std::string *v2;
  __int128 v3;
  void **v4;
  std::string::size_type v5;
  std::string v7;
  void *__p[2];
  int64_t v9;

  *((_BYTE *)&v7.__r_.__value_.__s + 23) = 2;
  strcpy((char *)&v7, ", ");
  v2 = std::string::append(&v7, "LoiGroupId");
  v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  v9 = v2->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v3;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  if (v9 >= 0)
    v4 = __p;
  else
    v4 = (void **)__p[0];
  if (v9 >= 0)
    v5 = HIBYTE(v9);
  else
    v5 = (std::string::size_type)__p[1];
  std::string::append(a1, (const std::string::value_type *)v4, v5);
  if (SHIBYTE(v9) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v7.__r_.__value_.__l.__data_);
  return 0;
}

void sub_241AAD314(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<CLMicroLocationModelTable::Entry>::__emplace_back_slow_path<boost::uuids::uuid &,std::chrono::time_point<cl::chrono::CFAbsoluteTimeClock,std::chrono::duration<long double,std::ratio<1l,1l>>> &,CLMicroLocationProto::Model,std::string &,std::optional<boost::uuids::uuid> &,boost::uuids::uuid>(uint64_t *a1, uint64_t *a2, double *a3, uint64_t a4, uint64_t a5, __int128 *a6, _QWORD *a7)
{
  uint64_t v8;
  unint64_t v9;
  unint64_t v16;
  char *v17;
  uint64_t v18;
  void *v20;
  char *v21;
  char *v22;
  char *v23;
  uint64_t *v24;

  v8 = 0x6F96F96F96F96F97 * ((a1[1] - *a1) >> 3);
  v9 = v8 + 1;
  if ((unint64_t)(v8 + 1) > 0xD20D20D20D20D2)
    std::vector<CLMicroLocationProto::ConfidenceReason>::__throw_length_error[abi:ne180100]();
  if (0xDF2DF2DF2DF2DF2ELL * ((a1[2] - *a1) >> 3) > v9)
    v9 = 0xDF2DF2DF2DF2DF2ELL * ((a1[2] - *a1) >> 3);
  if ((unint64_t)(0x6F96F96F96F96F97 * ((a1[2] - *a1) >> 3)) >= 0x69069069069069)
    v16 = 0xD20D20D20D20D2;
  else
    v16 = v9;
  v24 = a1 + 2;
  if (v16)
    v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CLMicroLocationModelTable::Entry>>((uint64_t)(a1 + 2), v16);
  else
    v17 = 0;
  v20 = v17;
  v21 = &v17[312 * v8];
  v23 = &v17[312 * v16];
  std::allocator<CLMicroLocationModelTable::Entry>::construct[abi:ne180100]<CLMicroLocationModelTable::Entry,boost::uuids::uuid &,std::chrono::time_point<cl::chrono::CFAbsoluteTimeClock,std::chrono::duration<long double,std::ratio<1l,1l>>> &,CLMicroLocationProto::Model,std::string &,std::optional<boost::uuids::uuid> &,boost::uuids::uuid>((uint64_t)(a1 + 2), (uint64_t)v21, a2, a3, a4, a5, a6, a7);
  v22 = v21 + 312;
  std::vector<CLMicroLocationModelTable::Entry>::__swap_out_circular_buffer(a1, &v20);
  v18 = a1[1];
  std::__split_buffer<CLMicroLocationModelTable::Entry>::~__split_buffer(&v20);
  return v18;
}

void sub_241AAD498(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<CLMicroLocationModelTable::Entry>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

void std::allocator<CLMicroLocationModelTable::Entry>::construct[abi:ne180100]<CLMicroLocationModelTable::Entry,boost::uuids::uuid &,std::chrono::time_point<cl::chrono::CFAbsoluteTimeClock,std::chrono::duration<long double,std::ratio<1l,1l>>> &,CLMicroLocationProto::Model,std::string &,std::optional<boost::uuids::uuid> &,boost::uuids::uuid>(uint64_t a1, uint64_t a2, uint64_t *a3, double *a4, uint64_t a5, uint64_t a6, __int128 *a7, _QWORD *a8)
{
  uint64_t v12;
  uint64_t v13;
  double v14;
  std::string __p;
  char v16;
  __int128 v17;
  char v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v12 = *a3;
  v13 = a3[1];
  v14 = *a4;
  if (*(char *)(a6 + 23) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a6, *(_QWORD *)(a6 + 8));
  else
    __p = *(std::string *)a6;
  v16 = 1;
  v17 = *a7;
  v18 = *((_BYTE *)a7 + 16);
  CLMicroLocationModelTable::Entry::Entry(a2, v12, v13, a5, &__p, &v17, *a8, a8[1], v14);
  if (v16)
  {
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_241AAD5A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  _Unwind_Resume(exception_object);
}

uint64_t CLMicroLocationDatabaseColumns::ColumnList<ULLoggedEventTable::DatabaseColumns::EventUUID,ULLoggedEventTable::DatabaseColumns::ReceivedTimestamp,ULLoggedEventTable::DatabaseColumns::EventType,ULLoggedEventTable::DatabaseColumns::Event,ULLoggedEventTable::DatabaseColumns::RowId>::commaSeperatedNamesGenerator<0ul,1ul,2ul,3ul,4ul>(std::string *a1)
{
  CLMicroLocationDatabaseColumns::ColumnList<ULLoggedEventTable::DatabaseColumns::EventUUID,ULLoggedEventTable::DatabaseColumns::ReceivedTimestamp,ULLoggedEventTable::DatabaseColumns::EventType,ULLoggedEventTable::DatabaseColumns::Event,ULLoggedEventTable::DatabaseColumns::RowId>::addColumnName<0ul>(a1);
  CLMicroLocationDatabaseColumns::ColumnList<ULLoggedEventTable::DatabaseColumns::EventUUID,ULLoggedEventTable::DatabaseColumns::ReceivedTimestamp,ULLoggedEventTable::DatabaseColumns::EventType,ULLoggedEventTable::DatabaseColumns::Event,ULLoggedEventTable::DatabaseColumns::RowId>::addColumnName<1ul>(a1);
  CLMicroLocationDatabaseColumns::ColumnList<ULLoggedEventTable::DatabaseColumns::EventUUID,ULLoggedEventTable::DatabaseColumns::ReceivedTimestamp,ULLoggedEventTable::DatabaseColumns::EventType,ULLoggedEventTable::DatabaseColumns::Event,ULLoggedEventTable::DatabaseColumns::RowId>::addColumnName<2ul>(a1);
  CLMicroLocationDatabaseColumns::ColumnList<ULLoggedEventTable::DatabaseColumns::EventUUID,ULLoggedEventTable::DatabaseColumns::ReceivedTimestamp,ULLoggedEventTable::DatabaseColumns::EventType,ULLoggedEventTable::DatabaseColumns::Event,ULLoggedEventTable::DatabaseColumns::RowId>::addColumnName<3ul>(a1);
  return CLMicroLocationDatabaseColumns::ColumnList<ULLoggedEventTable::DatabaseColumns::EventUUID,ULLoggedEventTable::DatabaseColumns::ReceivedTimestamp,ULLoggedEventTable::DatabaseColumns::EventType,ULLoggedEventTable::DatabaseColumns::Event,ULLoggedEventTable::DatabaseColumns::RowId>::addColumnName<4ul>(a1);
}

uint64_t CLMicroLocationDatabaseColumns::ColumnList<ULLoggedEventTable::DatabaseColumns::EventUUID,ULLoggedEventTable::DatabaseColumns::ReceivedTimestamp,ULLoggedEventTable::DatabaseColumns::EventType,ULLoggedEventTable::DatabaseColumns::Event,ULLoggedEventTable::DatabaseColumns::RowId>::addColumnName<0ul>(std::string *a1)
{
  std::string *v2;
  __int128 v3;
  void **v4;
  std::string::size_type v5;
  std::string v7;
  void *__p[2];
  int64_t v9;

  *((_BYTE *)&v7.__r_.__value_.__s + 23) = 0;
  v7.__r_.__value_.__s.__data_[0] = 0;
  v2 = std::string::append(&v7, "EventUUID");
  v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  v9 = v2->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v3;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  if (v9 >= 0)
    v4 = __p;
  else
    v4 = (void **)__p[0];
  if (v9 >= 0)
    v5 = HIBYTE(v9);
  else
    v5 = (std::string::size_type)__p[1];
  std::string::append(a1, (const std::string::value_type *)v4, v5);
  if (SHIBYTE(v9) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v7.__r_.__value_.__l.__data_);
  return 0;
}

void sub_241AAD6A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

uint64_t CLMicroLocationDatabaseColumns::ColumnList<ULLoggedEventTable::DatabaseColumns::EventUUID,ULLoggedEventTable::DatabaseColumns::ReceivedTimestamp,ULLoggedEventTable::DatabaseColumns::EventType,ULLoggedEventTable::DatabaseColumns::Event,ULLoggedEventTable::DatabaseColumns::RowId>::addColumnName<1ul>(std::string *a1)
{
  std::string *v2;
  __int128 v3;
  void **v4;
  std::string::size_type v5;
  std::string v7;
  void *__p[2];
  int64_t v9;

  *((_BYTE *)&v7.__r_.__value_.__s + 23) = 2;
  strcpy((char *)&v7, ", ");
  v2 = std::string::append(&v7, "ReceivedTimestamp");
  v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  v9 = v2->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v3;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  if (v9 >= 0)
    v4 = __p;
  else
    v4 = (void **)__p[0];
  if (v9 >= 0)
    v5 = HIBYTE(v9);
  else
    v5 = (std::string::size_type)__p[1];
  std::string::append(a1, (const std::string::value_type *)v4, v5);
  if (SHIBYTE(v9) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v7.__r_.__value_.__l.__data_);
  return 0;
}

void sub_241AAD784(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

uint64_t CLMicroLocationDatabaseColumns::ColumnList<ULLoggedEventTable::DatabaseColumns::EventUUID,ULLoggedEventTable::DatabaseColumns::ReceivedTimestamp,ULLoggedEventTable::DatabaseColumns::EventType,ULLoggedEventTable::DatabaseColumns::Event,ULLoggedEventTable::DatabaseColumns::RowId>::addColumnName<2ul>(std::string *a1)
{
  std::string *v2;
  __int128 v3;
  void **v4;
  std::string::size_type v5;
  std::string v7;
  void *__p[2];
  int64_t v9;

  *((_BYTE *)&v7.__r_.__value_.__s + 23) = 2;
  strcpy((char *)&v7, ", ");
  v2 = std::string::append(&v7, "EventType");
  v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  v9 = v2->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v3;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  if (v9 >= 0)
    v4 = __p;
  else
    v4 = (void **)__p[0];
  if (v9 >= 0)
    v5 = HIBYTE(v9);
  else
    v5 = (std::string::size_type)__p[1];
  std::string::append(a1, (const std::string::value_type *)v4, v5);
  if (SHIBYTE(v9) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v7.__r_.__value_.__l.__data_);
  return 0;
}

void sub_241AAD860(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

uint64_t CLMicroLocationDatabaseColumns::ColumnList<ULLoggedEventTable::DatabaseColumns::EventUUID,ULLoggedEventTable::DatabaseColumns::ReceivedTimestamp,ULLoggedEventTable::DatabaseColumns::EventType,ULLoggedEventTable::DatabaseColumns::Event,ULLoggedEventTable::DatabaseColumns::RowId>::addColumnName<3ul>(std::string *a1)
{
  std::string *v2;
  __int128 v3;
  void **v4;
  std::string::size_type v5;
  std::string v7;
  void *__p[2];
  int64_t v9;

  *((_BYTE *)&v7.__r_.__value_.__s + 23) = 2;
  strcpy((char *)&v7, ", ");
  v2 = std::string::append(&v7, "Event");
  v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  v9 = v2->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v3;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  if (v9 >= 0)
    v4 = __p;
  else
    v4 = (void **)__p[0];
  if (v9 >= 0)
    v5 = HIBYTE(v9);
  else
    v5 = (std::string::size_type)__p[1];
  std::string::append(a1, (const std::string::value_type *)v4, v5);
  if (SHIBYTE(v9) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v7.__r_.__value_.__l.__data_);
  return 0;
}

void sub_241AAD93C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

uint64_t CLMicroLocationDatabaseColumns::ColumnList<ULLoggedEventTable::DatabaseColumns::EventUUID,ULLoggedEventTable::DatabaseColumns::ReceivedTimestamp,ULLoggedEventTable::DatabaseColumns::EventType,ULLoggedEventTable::DatabaseColumns::Event,ULLoggedEventTable::DatabaseColumns::RowId>::addColumnName<4ul>(std::string *a1)
{
  std::string *v2;
  __int128 v3;
  void **v4;
  std::string::size_type v5;
  std::string v7;
  void *__p[2];
  int64_t v9;

  *((_BYTE *)&v7.__r_.__value_.__s + 23) = 2;
  strcpy((char *)&v7, ", ");
  v2 = std::string::append(&v7, "RowId");
  v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  v9 = v2->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v3;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  if (v9 >= 0)
    v4 = __p;
  else
    v4 = (void **)__p[0];
  if (v9 >= 0)
    v5 = HIBYTE(v9);
  else
    v5 = (std::string::size_type)__p[1];
  std::string::append(a1, (const std::string::value_type *)v4, v5);
  if (SHIBYTE(v9) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v7.__r_.__value_.__l.__data_);
  return 0;
}

void sub_241AADA18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<CLMicroLocationLoggedEventsTable::Entry>::__emplace_back_slow_path<boost::uuids::uuid &,std::chrono::time_point<cl::chrono::CFAbsoluteTimeClock,std::chrono::duration<long double,std::ratio<1l,1l>>> &,CLMicroLocationProto::EventType &,CLMicroLocationProto::ReceivedEvent &>(uint64_t *a1, _OWORD *a2, double *a3, int *a4, CLMicroLocationProto::ReceivedEvent *a5)
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  char *v19;
  char *v20;
  uint64_t v21;
  char *v22;
  uint64_t *v23;

  v6 = *a1;
  v7 = 0xCF3CF3CF3CF3CF3DLL * ((a1[1] - *a1) >> 4);
  v8 = v7 + 1;
  if (v7 + 1 > 0xC30C30C30C30C3)
    std::vector<CLMicroLocationProto::ConfidenceReason>::__throw_length_error[abi:ne180100]();
  v13 = (uint64_t)(a1 + 2);
  v14 = 0xCF3CF3CF3CF3CF3DLL * ((a1[2] - v6) >> 4);
  if (2 * v14 > v8)
    v8 = 2 * v14;
  if (v14 >= 0x61861861861861)
    v15 = 0xC30C30C30C30C3;
  else
    v15 = v8;
  v23 = a1 + 2;
  if (v15)
    v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CLMicroLocationLoggedEventsTable::Entry>>(v13, v15);
  else
    v16 = 0;
  v19 = v16;
  v20 = &v16[336 * v7];
  v21 = (uint64_t)v20;
  v22 = &v16[336 * v15];
  CLMicroLocationLoggedEventsTable::Entry::Entry((uint64_t)v20, a2, *a4, a5, *a3);
  v21 = (uint64_t)(v20 + 336);
  std::vector<CLMicroLocationLoggedEventsTable::Entry>::__swap_out_circular_buffer(a1, &v19);
  v17 = a1[1];
  std::__split_buffer<CLMicroLocationLoggedEventsTable::Entry>::~__split_buffer((uint64_t)&v19);
  return v17;
}

void sub_241AADB74(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<CLMicroLocationLoggedEventsTable::Entry>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<CLMicroLocationLoggedEventsTable::Entry>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<CLMicroLocationLoggedEventsTable::Entry>,std::reverse_iterator<CLMicroLocationLoggedEventsTable::Entry*>,std::reverse_iterator<CLMicroLocationLoggedEventsTable::Entry*>,std::reverse_iterator<CLMicroLocationLoggedEventsTable::Entry*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<CLMicroLocationLoggedEventsTable::Entry>,std::reverse_iterator<CLMicroLocationLoggedEventsTable::Entry*>,std::reverse_iterator<CLMicroLocationLoggedEventsTable::Entry*>,std::reverse_iterator<CLMicroLocationLoggedEventsTable::Entry*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t i;
  uint64_t v12;
  _OWORD *v13;
  __int128 v14;
  CLMicroLocationProto::ReceivedEvent *v15;

  for (i = 368; ; i -= 336)
  {
    v12 = a3 + i;
    if (a3 + i - 368 == a5)
      break;
    v13 = (_OWORD *)(a7 + i - 704);
    v14 = *(_OWORD *)(v12 - 704);
    *(_OWORD *)((char *)v13 + 12) = *(_OWORD *)(v12 - 692);
    *v13 = v14;
    v15 = (CLMicroLocationProto::ReceivedEvent *)(a7 + i - 672);
    CLMicroLocationProto::ReceivedEvent::ReceivedEvent(v15, (const CLMicroLocationProto::ReceivedEvent *)(v12 - 672));
  }
  return a6;
}

uint64_t std::__split_buffer<CLMicroLocationLoggedEventsTable::Entry>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 336;
    CLMicroLocationProto::ReceivedEvent::~ReceivedEvent((CLMicroLocationProto::ReceivedEvent *)(i - 304));
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t CLMicroLocationDatabaseColumns::ColumnList<ULCustomLoiTable::DatabaseColumns::RowId,ULCustomLoiTable::DatabaseColumns::ServiceId,ULCustomLoiTable::DatabaseColumns::LoiId,ULCustomLoiTable::DatabaseColumns::LastSeenTimeStamp>::commaSeperatedNamesGenerator<0ul,1ul,2ul,3ul>(std::string *a1)
{
  CLMicroLocationDatabaseColumns::ColumnList<ULCustomLoiTable::DatabaseColumns::RowId,ULCustomLoiTable::DatabaseColumns::ServiceId,ULCustomLoiTable::DatabaseColumns::LoiId,ULCustomLoiTable::DatabaseColumns::LastSeenTimeStamp>::addColumnName<0ul>(a1);
  CLMicroLocationDatabaseColumns::ColumnList<ULCustomLoiTable::DatabaseColumns::RowId,ULCustomLoiTable::DatabaseColumns::ServiceId,ULCustomLoiTable::DatabaseColumns::LoiId,ULCustomLoiTable::DatabaseColumns::LastSeenTimeStamp>::addColumnName<1ul>(a1);
  CLMicroLocationDatabaseColumns::ColumnList<ULCustomLoiTable::DatabaseColumns::RowId,ULCustomLoiTable::DatabaseColumns::ServiceId,ULCustomLoiTable::DatabaseColumns::LoiId,ULCustomLoiTable::DatabaseColumns::LastSeenTimeStamp>::addColumnName<2ul>(a1);
  return CLMicroLocationDatabaseColumns::ColumnList<ULCustomLoiTable::DatabaseColumns::RowId,ULCustomLoiTable::DatabaseColumns::ServiceId,ULCustomLoiTable::DatabaseColumns::LoiId,ULCustomLoiTable::DatabaseColumns::LastSeenTimeStamp>::addColumnName<3ul>(a1);
}

uint64_t CLMicroLocationDatabaseColumns::ColumnList<ULCustomLoiTable::DatabaseColumns::RowId,ULCustomLoiTable::DatabaseColumns::ServiceId,ULCustomLoiTable::DatabaseColumns::LoiId,ULCustomLoiTable::DatabaseColumns::LastSeenTimeStamp>::addColumnName<0ul>(std::string *a1)
{
  std::string *v2;
  __int128 v3;
  void **v4;
  std::string::size_type v5;
  std::string v7;
  void *__p[2];
  int64_t v9;

  *((_BYTE *)&v7.__r_.__value_.__s + 23) = 0;
  v7.__r_.__value_.__s.__data_[0] = 0;
  v2 = std::string::append(&v7, "RowId");
  v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  v9 = v2->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v3;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  if (v9 >= 0)
    v4 = __p;
  else
    v4 = (void **)__p[0];
  if (v9 >= 0)
    v5 = HIBYTE(v9);
  else
    v5 = (std::string::size_type)__p[1];
  std::string::append(a1, (const std::string::value_type *)v4, v5);
  if (SHIBYTE(v9) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v7.__r_.__value_.__l.__data_);
  return 0;
}

void sub_241AADDC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

uint64_t CLMicroLocationDatabaseColumns::ColumnList<ULCustomLoiTable::DatabaseColumns::RowId,ULCustomLoiTable::DatabaseColumns::ServiceId,ULCustomLoiTable::DatabaseColumns::LoiId,ULCustomLoiTable::DatabaseColumns::LastSeenTimeStamp>::addColumnName<1ul>(std::string *a1)
{
  std::string *v2;
  __int128 v3;
  void **v4;
  std::string::size_type v5;
  std::string v7;
  void *__p[2];
  int64_t v9;

  *((_BYTE *)&v7.__r_.__value_.__s + 23) = 2;
  strcpy((char *)&v7, ", ");
  v2 = std::string::append(&v7, "ServiceId");
  v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  v9 = v2->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v3;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  if (v9 >= 0)
    v4 = __p;
  else
    v4 = (void **)__p[0];
  if (v9 >= 0)
    v5 = HIBYTE(v9);
  else
    v5 = (std::string::size_type)__p[1];
  std::string::append(a1, (const std::string::value_type *)v4, v5);
  if (SHIBYTE(v9) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v7.__r_.__value_.__l.__data_);
  return 0;
}

void sub_241AADEA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

uint64_t CLMicroLocationDatabaseColumns::ColumnList<ULCustomLoiTable::DatabaseColumns::RowId,ULCustomLoiTable::DatabaseColumns::ServiceId,ULCustomLoiTable::DatabaseColumns::LoiId,ULCustomLoiTable::DatabaseColumns::LastSeenTimeStamp>::addColumnName<2ul>(std::string *a1)
{
  std::string *v2;
  __int128 v3;
  void **v4;
  std::string::size_type v5;
  std::string v7;
  void *__p[2];
  int64_t v9;

  *((_BYTE *)&v7.__r_.__value_.__s + 23) = 2;
  strcpy((char *)&v7, ", ");
  v2 = std::string::append(&v7, "LoiId");
  v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  v9 = v2->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v3;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  if (v9 >= 0)
    v4 = __p;
  else
    v4 = (void **)__p[0];
  if (v9 >= 0)
    v5 = HIBYTE(v9);
  else
    v5 = (std::string::size_type)__p[1];
  std::string::append(a1, (const std::string::value_type *)v4, v5);
  if (SHIBYTE(v9) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v7.__r_.__value_.__l.__data_);
  return 0;
}

void sub_241AADF80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

uint64_t CLMicroLocationDatabaseColumns::ColumnList<ULCustomLoiTable::DatabaseColumns::RowId,ULCustomLoiTable::DatabaseColumns::ServiceId,ULCustomLoiTable::DatabaseColumns::LoiId,ULCustomLoiTable::DatabaseColumns::LastSeenTimeStamp>::addColumnName<3ul>(std::string *a1)
{
  std::string *v2;
  __int128 v3;
  void **v4;
  std::string::size_type v5;
  std::string v7;
  void *__p[2];
  int64_t v9;

  *((_BYTE *)&v7.__r_.__value_.__s + 23) = 2;
  strcpy((char *)&v7, ", ");
  v2 = std::string::append(&v7, "LastSeenTimeStamp");
  v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  v9 = v2->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v3;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  if (v9 >= 0)
    v4 = __p;
  else
    v4 = (void **)__p[0];
  if (v9 >= 0)
    v5 = HIBYTE(v9);
  else
    v5 = (std::string::size_type)__p[1];
  std::string::append(a1, (const std::string::value_type *)v4, v5);
  if (SHIBYTE(v9) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v7.__r_.__value_.__l.__data_);
  return 0;
}

void sub_241AAE05C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<CLMiLoCustomLoiTable::Entry>::__emplace_back_slow_path<boost::uuids::uuid,boost::uuids::uuid,std::chrono::time_point<cl::chrono::CFAbsoluteTimeClock,std::chrono::duration<long double,std::ratio<1l,1l>>> &>(uint64_t *a1, uint64_t *a2, uint64_t *a3, double *a4)
{
  char *v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  __int128 v21;
  __int128 v22;

  v5 = (char *)*a1;
  v6 = 0xCCCCCCCCCCCCCCCDLL * ((a1[1] - *a1) >> 3);
  v7 = v6 + 1;
  if (v6 + 1 > 0x666666666666666)
    std::vector<CLMicroLocationProto::ConfidenceReason>::__throw_length_error[abi:ne180100]();
  v11 = (uint64_t)(a1 + 2);
  v12 = 0xCCCCCCCCCCCCCCCDLL * ((a1[2] - (uint64_t)v5) >> 3);
  if (2 * v12 > v7)
    v7 = 2 * v12;
  if (v12 >= 0x333333333333333)
    v13 = 0x666666666666666;
  else
    v13 = v7;
  if (v13)
  {
    v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CLMiLoCustomLoiTable::Entry>>(v11, v13);
    v16 = v15;
  }
  else
  {
    v14 = 0;
    v16 = 0;
  }
  v17 = CLMiLoCustomLoiTable::Entry::Entry((uint64_t)&v14[40 * v6], *a2, a2[1], *a3, a3[1], *a4);
  v18 = v17 + 40;
  v20 = (char *)*a1;
  v19 = (char *)a1[1];
  if (v19 != (char *)*a1)
  {
    do
    {
      v21 = *(_OWORD *)(v19 - 40);
      v22 = *(_OWORD *)(v19 - 24);
      *(_QWORD *)(v17 - 8) = *((_QWORD *)v19 - 1);
      *(_OWORD *)(v17 - 24) = v22;
      *(_OWORD *)(v17 - 40) = v21;
      v17 -= 40;
      v19 -= 40;
    }
    while (v19 != v20);
    v19 = (char *)*a1;
  }
  *a1 = v17;
  a1[1] = v18;
  a1[2] = (uint64_t)&v14[40 * v16];
  if (v19)
    operator delete(v19);
  return v18;
}

void sub_241AAE1C4(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<CLMiLoCustomLoiTable::Entry>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x666666666666667)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(40 * a2);
}

std::runtime_error *CLMicroLocationFingerprintDataSources::IInterruptibleDataSource::CancelledException::CancelledException(std::runtime_error *a1, const std::string *a2)
{
  std::runtime_error *result;

  result = std::runtime_error::runtime_error(a1, a2);
  result->__vftable = (std::runtime_error_vtbl *)&off_2511D6000;
  return result;
}

_QWORD *CLMicroLocationFingerprintDataSources::create@<X0>(unsigned int a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, _QWORD *a6@<X8>)
{
  _QWORD *result;
  uint64_t v8;

  if (a1 >= 2)
  {
    CLMicroLocationFingerprintDataSources::create();
    return _CLLogObjectForCategory_MicroLocation_Default();
  }
  else
  {
    if (a1)
      result = std::make_unique[abi:ne180100]<CLMicroLocationFingerprintStdVectorSource,std::function<BOOL ()(void)> &,std::function<CLMicroLocationFingerprintConfiguration ()(void)> &,std::vector<CLMicroLocationRecordingEventsTable::Entry> const&,ULDatabase &>(a2, a3, a4, a5, &v8);
    else
      result = std::make_unique[abi:ne180100]<CLMicroLocationFingerprintDatabaseSource,std::function<BOOL ()(void)> &,std::function<CLMicroLocationFingerprintConfiguration ()(void)> &,std::vector<CLMicroLocationRecordingEventsTable::Entry> const&,ULDatabase &>(a2, a3, a4, a5, &v8);
    *a6 = v8;
  }
  return result;
}

_QWORD *std::make_unique[abi:ne180100]<CLMicroLocationFingerprintDatabaseSource,std::function<BOOL ()(void)> &,std::function<CLMicroLocationFingerprintConfiguration ()(void)> &,std::vector<CLMicroLocationRecordingEventsTable::Entry> const&,ULDatabase &>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *result;
  uint64_t v14;
  _BYTE v15[24];
  _BYTE *v16;
  _BYTE v17[24];
  _BYTE *v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v10 = operator new();
  std::__function::__value_func<double ()(CLMicroLocationFingerprint const&,CLMicroLocationFingerprint const&)>::__value_func[abi:ne180100]((uint64_t)v17, a1);
  std::__function::__value_func<double ()(CLMicroLocationFingerprint const&,CLMicroLocationFingerprint const&)>::__value_func[abi:ne180100]((uint64_t)v15, a2);
  CLMicroLocationFingerprintDatabaseSource::CLMicroLocationFingerprintDatabaseSource(v10, v17, v15, a3, a4);
  *a5 = v10;
  v11 = v16;
  if (v16 == v15)
  {
    v12 = 4;
    v11 = v15;
  }
  else
  {
    if (!v16)
      goto LABEL_6;
    v12 = 5;
  }
  (*(void (**)(void))(*v11 + 8 * v12))();
LABEL_6:
  result = v18;
  if (v18 == v17)
  {
    v14 = 4;
    result = v17;
  }
  else
  {
    if (!v18)
      return result;
    v14 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v14))();
}

void sub_241AAE40C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13, char a14, uint64_t a15, uint64_t a16, char *a17)
{
  uint64_t v17;
  char *v18;
  char *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;

  v20 = a13;
  if (a13 == v18)
  {
    v21 = 4;
    v20 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v21 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v20 + 8 * v21))();
LABEL_6:
  v22 = a17;
  if (a17 == &a14)
  {
    v23 = 4;
    v22 = &a14;
  }
  else
  {
    if (!a17)
      goto LABEL_11;
    v23 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v22 + 8 * v23))();
LABEL_11:
  MEMORY[0x2426A04D4](v17, 0x10B3C40564B07AALL);
  _Unwind_Resume(a1);
}

_QWORD *std::make_unique[abi:ne180100]<CLMicroLocationFingerprintStdVectorSource,std::function<BOOL ()(void)> &,std::function<CLMicroLocationFingerprintConfiguration ()(void)> &,std::vector<CLMicroLocationRecordingEventsTable::Entry> const&,ULDatabase &>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *result;
  uint64_t v14;
  _BYTE v15[24];
  _BYTE *v16;
  _BYTE v17[24];
  _BYTE *v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v10 = operator new();
  std::__function::__value_func<double ()(CLMicroLocationFingerprint const&,CLMicroLocationFingerprint const&)>::__value_func[abi:ne180100]((uint64_t)v17, a1);
  std::__function::__value_func<double ()(CLMicroLocationFingerprint const&,CLMicroLocationFingerprint const&)>::__value_func[abi:ne180100]((uint64_t)v15, a2);
  CLMicroLocationFingerprintStdVectorSource::CLMicroLocationFingerprintStdVectorSource(v10, v17, v15, a3, a4);
  *a5 = v10;
  v11 = v16;
  if (v16 == v15)
  {
    v12 = 4;
    v11 = v15;
  }
  else
  {
    if (!v16)
      goto LABEL_6;
    v12 = 5;
  }
  (*(void (**)(void))(*v11 + 8 * v12))();
LABEL_6:
  result = v18;
  if (v18 == v17)
  {
    v14 = 4;
    result = v17;
  }
  else
  {
    if (!v18)
      return result;
    v14 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v14))();
}

void sub_241AAE5BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13, char a14, uint64_t a15, uint64_t a16, char *a17)
{
  uint64_t v17;
  char *v18;
  char *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;

  v20 = a13;
  if (a13 == v18)
  {
    v21 = 4;
    v20 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v21 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v20 + 8 * v21))();
LABEL_6:
  v22 = a17;
  if (a17 == &a14)
  {
    v23 = 4;
    v22 = &a14;
  }
  else
  {
    if (!a17)
      goto LABEL_11;
    v23 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v22 + 8 * v23))();
LABEL_11:
  MEMORY[0x2426A04D4](v17, 0xA1C4030951706);
  _Unwind_Resume(a1);
}

void ___ZL45_CLLogObjectForCategory_MicroLocation_Defaultv_block_invoke_53()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.MicroLocation", "MicroLocation");
  v1 = (void *)logObject_MicroLocation_Default;
  logObject_MicroLocation_Default = (uint64_t)v0;

}

double CLCommonConvertTicksToSeconds(unint64_t a1)
{
  double v2;
  uint32_t denom;
  uint32_t numer;
  uint32_t v5;
  unsigned int v6;
  uint32_t v7;
  uint32_t v8;
  mach_timebase_info info;

  v2 = *(double *)&CLCommonConvertTicksToSeconds::ticksToSeconds;
  if (*(double *)&CLCommonConvertTicksToSeconds::ticksToSeconds == 0.0)
  {
    mach_timebase_info(&info);
    if (info.denom)
    {
      denom = info.denom;
      numer = info.numer;
      do
      {
        v5 = denom;
        denom = numer % denom;
        numer = v5;
      }
      while (denom);
    }
    else
    {
      v5 = info.numer;
    }
    v6 = 1000000000;
    v7 = info.numer / v5;
    do
    {
      v8 = v7;
      v7 = v6;
      v6 = v8 % v6;
    }
    while (v6);
    v2 = (double)(info.numer / v5 / v7) / (double)(0x3B9ACA00 / v7 * (unint64_t)(info.denom / v5));
    *(double *)&CLCommonConvertTicksToSeconds::ticksToSeconds = v2;
  }
  return v2 * (double)a1;
}

double CLCommonGetMachContinuousTime()
{
  uint64_t v0;

  v0 = mach_continuous_time();
  return CLCommonConvertTicksToSeconds(v0);
}

void CLMicroLocationLegacyEventHomeKit::handleEvent(void *a1@<X1>, double *a2@<X2>, _BYTE *a3@<X8>)
{
  void *v5;
  id v6;

  v6 = a1;
  objc_msgSend(v6, "objectForKeyedSubscript:", CFSTR("private.HomeKit.scene.actionSetUUID"));
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  if (v5)
    CLMicroLocationLegacyEventHomeKit::handleEventScene(v6, a2, a3);
  else
    CLMicroLocationLegacyEventHomeKit::handleEventAccessory(v6, a2, a3);

}

void sub_241AAE7E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void CLMicroLocationLegacyEventHomeKit::handleEventScene(void *a1@<X1>, double *a2@<X2>, _BYTE *a3@<X8>)
{
  id v5;
  void *v6;
  BOOL v7;
  void *v8;
  unsigned __int8 v9;
  void *v10;
  BOOL v11;
  void *v12;
  unsigned __int8 v13;
  void *v14;
  BOOL v15;
  _QWORD *v16;
  id v17;
  _QWORD *v18;
  void *v19;
  BOOL v20;
  id v21;
  _QWORD *v22;
  void *v23;
  BOOL v24;
  id v25;
  _QWORD *v26;
  void *v27;
  BOOL v28;
  id v29;
  _QWORD *v30;
  void *v31;
  BOOL v32;
  id v33;
  _QWORD *v34;
  void *v35;
  BOOL v36;
  id v37;
  _QWORD *v38;
  NSObject *v39;
  _QWORD *v40;
  _QWORD *v41;
  _QWORD *v42;
  _QWORD *v43;
  _QWORD *v44;
  _QWORD *v45;
  _BYTE v46[144];
  char v47[8];
  _QWORD *v48;
  _QWORD *v49;
  _QWORD *v50;
  _QWORD *v51;
  unsigned __int8 v52;
  unsigned __int8 v53;
  _QWORD *v54;
  _QWORD *v55;
  int v56;
  uint64_t buf;
  __int16 v58;
  const char *v59;
  __int16 v60;
  _QWORD *v61;
  __int16 v62;
  _QWORD *v63;
  __int16 v64;
  _QWORD *v65;
  __int16 v66;
  _QWORD *v67;
  __int16 v68;
  _QWORD *v69;
  __int16 v70;
  _QWORD *v71;
  __int16 v72;
  int v73;
  __int16 v74;
  int v75;
  uint64_t v76;

  v76 = *MEMORY[0x24BDAC8D0];
  v5 = a1;
  CLMicroLocationProto::HomeKitScene::HomeKitScene((uint64_t)v47);
  objc_msgSend(v5, "objectForKeyedSubscript:", CFSTR("shouldTriggerLocalizationScan"));
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = v6 == 0;

  if (!v7)
  {
    objc_msgSend(v5, "objectForKeyedSubscript:", CFSTR("shouldTriggerLocalizationScan"));
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = objc_msgSend(v8, "BOOLValue");
    v56 |= 0x100u;
    v52 = v9;

  }
  objc_msgSend(v5, "objectForKeyedSubscript:", CFSTR("shouldTriggerRecordingScan"));
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v11 = v10 == 0;

  if (!v11)
  {
    objc_msgSend(v5, "objectForKeyedSubscript:", CFSTR("shouldTriggerRecordingScan"));
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    v13 = objc_msgSend(v12, "BOOLValue");
    v56 |= 0x200u;
    v53 = v13;

  }
  objc_msgSend(v5, "objectForKeyedSubscript:", CFSTR("private.HomeKit.scene.actionSetUUID"));
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  v15 = v14 == 0;

  v16 = (_QWORD *)MEMORY[0x24BEDD958];
  if (!v15)
  {
    objc_msgSend(v5, "objectForKeyedSubscript:", CFSTR("private.HomeKit.scene.actionSetUUID"));
    v17 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
    objc_msgSend(v17, "UTF8String");
    v56 |= 2u;
    if (v48 == v16)
    {
      v18 = (_QWORD *)operator new();
      *v18 = 0;
      v18[1] = 0;
      v18[2] = 0;
      v48 = v18;
    }
    MEMORY[0x2426A02C4]();

  }
  objc_msgSend(v5, "objectForKeyedSubscript:", CFSTR("private.HomeKit.scene.actionSetName"));
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  v20 = v19 == 0;

  if (!v20)
  {
    objc_msgSend(v5, "objectForKeyedSubscript:", CFSTR("private.HomeKit.scene.actionSetName"));
    v21 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
    objc_msgSend(v21, "UTF8String");
    v56 |= 4u;
    if (v49 == v16)
    {
      v22 = (_QWORD *)operator new();
      *v22 = 0;
      v22[1] = 0;
      v22[2] = 0;
      v49 = v22;
    }
    MEMORY[0x2426A02C4]();

  }
  objc_msgSend(v5, "objectForKeyedSubscript:", CFSTR("private.HomeKit.scene.actionSetType"));
  v23 = (void *)objc_claimAutoreleasedReturnValue();
  v24 = v23 == 0;

  if (!v24)
  {
    objc_msgSend(v5, "objectForKeyedSubscript:", CFSTR("private.HomeKit.scene.actionSetType"));
    v25 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
    objc_msgSend(v25, "UTF8String");
    v56 |= 8u;
    if (v50 == v16)
    {
      v26 = (_QWORD *)operator new();
      *v26 = 0;
      v26[1] = 0;
      v26[2] = 0;
      v50 = v26;
    }
    MEMORY[0x2426A02C4]();

  }
  objc_msgSend(v5, "objectForKeyedSubscript:", CFSTR("private.HomeKit.scene.clientName"));
  v27 = (void *)objc_claimAutoreleasedReturnValue();
  v28 = v27 == 0;

  if (!v28)
  {
    objc_msgSend(v5, "objectForKeyedSubscript:", CFSTR("private.HomeKit.scene.clientName"));
    v29 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
    objc_msgSend(v29, "UTF8String");
    v56 |= 0x20u;
    if (v51 == v16)
    {
      v30 = (_QWORD *)operator new();
      *v30 = 0;
      v30[1] = 0;
      v30[2] = 0;
      v51 = v30;
    }
    MEMORY[0x2426A02C4]();

  }
  objc_msgSend(v5, "objectForKeyedSubscript:", CFSTR("private.HomeKit.scene.source"));
  v31 = (void *)objc_claimAutoreleasedReturnValue();
  v32 = v31 == 0;

  if (!v32)
  {
    objc_msgSend(v5, "objectForKeyedSubscript:", CFSTR("private.HomeKit.scene.source"));
    v33 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
    objc_msgSend(v33, "UTF8String");
    v56 |= 0x80u;
    if (v54 == v16)
    {
      v34 = (_QWORD *)operator new();
      *v34 = 0;
      v34[1] = 0;
      v34[2] = 0;
      v54 = v34;
    }
    MEMORY[0x2426A02C4]();

  }
  objc_msgSend(v5, "objectForKeyedSubscript:", CFSTR("private.HomeKit.scene.homeName"));
  v35 = (void *)objc_claimAutoreleasedReturnValue();
  v36 = v35 == 0;

  if (!v36)
  {
    objc_msgSend(v5, "objectForKeyedSubscript:", CFSTR("private.HomeKit.scene.homeName"));
    v37 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
    objc_msgSend(v37, "UTF8String");
    v56 |= 0x400u;
    if (v55 == v16)
    {
      v38 = (_QWORD *)operator new();
      *v38 = 0;
      v38[1] = 0;
      v38[2] = 0;
      v55 = v38;
    }
    MEMORY[0x2426A02C4]();

  }
  if (onceToken_MicroLocation_Default != -1)
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_63);
  if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEBUG))
  {
    if (onceToken_MicroLocation_Default != -1)
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_63);
    v39 = logObject_MicroLocation_Default;
    if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEBUG))
    {
      v40 = v48;
      if (*((char *)v48 + 23) < 0)
        v40 = (_QWORD *)*v48;
      v41 = v49;
      if (*((char *)v49 + 23) < 0)
        v41 = (_QWORD *)*v49;
      v42 = v50;
      if (*((char *)v50 + 23) < 0)
        v42 = (_QWORD *)*v50;
      v43 = v51;
      if (*((char *)v51 + 23) < 0)
        v43 = (_QWORD *)*v51;
      v44 = v54;
      if (*((char *)v54 + 23) < 0)
        v44 = (_QWORD *)*v54;
      v45 = v55;
      if (*((char *)v55 + 23) < 0)
        v45 = (_QWORD *)*v55;
      buf = 68291075;
      v58 = 2082;
      v59 = "";
      v60 = 2081;
      v61 = v40;
      v62 = 2081;
      v63 = v41;
      v64 = 2081;
      v65 = v42;
      v66 = 2081;
      v67 = v43;
      v68 = 2081;
      v69 = v44;
      v70 = 2081;
      v71 = v45;
      v72 = 1025;
      v73 = v52;
      v74 = 1025;
      v75 = v53;
      _os_log_impl(&dword_2419D9000, v39, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"HomeKit Scene\", \"actionSetUUID\":%{private, location:escape_only}s, \"actionSetName\":%{private, location:escape_only}s, \"actionSetType\":%{private, location:escape_only}s, \"clientName\":%{private, location:escape_only}s, \"source\":%{private, location:escape_only}s, \"homeName\":%{private, location:escape_only}s, \"triggerLocalization\":%{private}hhd, \"triggerRecording\":%{private}hhd}", (uint8_t *)&buf, 0x5Au);
    }
  }
  CLMicroLocationProtobufHelper::createRecordingEvent<CLMicroLocationProto::HomeKitScene>((CLMicroLocationProto::RecordingEvent *)v47, 0, 0, 0, (CLMicroLocationProto *)3, (uint64_t)v46, *a2);
  LOBYTE(buf) = 1;
  CLMicroLocationProto::RecordingEvent::RecordingEvent((CLMicroLocationProto::RecordingEvent *)&v58, (const CLMicroLocationProto::RecordingEvent *)v46);
  *a3 = buf;
  CLMicroLocationProto::RecordingEvent::RecordingEvent((CLMicroLocationProto::RecordingEvent *)(a3 + 8), (const CLMicroLocationProto::RecordingEvent *)&v58);
  CLMicroLocationProto::RecordingEvent::~RecordingEvent((CLMicroLocationProto::RecordingEvent *)&v58);
  CLMicroLocationProto::RecordingEvent::~RecordingEvent((CLMicroLocationProto::RecordingEvent *)v46);
  CLMicroLocationProto::HomeKitScene::~HomeKitScene((CLMicroLocationProto::HomeKitScene *)v47);

}

void sub_241AAEE7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  void *v28;
  void *v29;

  CLMicroLocationProto::HomeKitScene::~HomeKitScene((CLMicroLocationProto::HomeKitScene *)&a28);
  _Unwind_Resume(a1);
}

void CLMicroLocationLegacyEventHomeKit::handleEventAccessory(void *a1@<X1>, double *a2@<X2>, _BYTE *a3@<X8>)
{
  id v5;
  void *v6;
  BOOL v7;
  void *v8;
  unsigned __int8 v9;
  void *v10;
  BOOL v11;
  void *v12;
  unsigned __int8 v13;
  void *v14;
  BOOL v15;
  _QWORD *v16;
  id v17;
  _QWORD *v18;
  void *v19;
  BOOL v20;
  id v21;
  _QWORD *v22;
  void *v23;
  BOOL v24;
  id v25;
  _QWORD *v26;
  void *v27;
  BOOL v28;
  id v29;
  _QWORD *v30;
  void *v31;
  BOOL v32;
  id v33;
  _QWORD *v34;
  void *v35;
  BOOL v36;
  id v37;
  _QWORD *v38;
  void *v39;
  BOOL v40;
  id v41;
  _QWORD *v42;
  void *v43;
  BOOL v44;
  id v45;
  _QWORD *v46;
  NSObject *v47;
  _QWORD *v48;
  _QWORD *v49;
  _QWORD *v50;
  _QWORD *v51;
  _QWORD *v52;
  _QWORD *v53;
  _QWORD *v54;
  _QWORD *v55;
  _BYTE v56[144];
  char v57[8];
  _QWORD *v58;
  _QWORD *v59;
  _QWORD *v60;
  unsigned __int8 v61;
  unsigned __int8 v62;
  _QWORD *v63;
  _QWORD *v64;
  _QWORD *v65;
  _QWORD *v66;
  _QWORD *v67;
  int v68;
  uint8_t buf[4];
  int v70;
  __int16 v71;
  const char *v72;
  __int16 v73;
  _QWORD *v74;
  __int16 v75;
  _QWORD *v76;
  __int16 v77;
  _QWORD *v78;
  __int16 v79;
  _QWORD *v80;
  __int16 v81;
  _QWORD *v82;
  __int16 v83;
  _QWORD *v84;
  __int16 v85;
  _QWORD *v86;
  __int16 v87;
  _QWORD *v88;
  __int16 v89;
  int v90;
  __int16 v91;
  int v92;
  uint64_t v93;

  v93 = *MEMORY[0x24BDAC8D0];
  v5 = a1;
  CLMicroLocationProto::HomeKitAccessory::HomeKitAccessory((uint64_t)v57);
  objc_msgSend(v5, "objectForKeyedSubscript:", CFSTR("shouldTriggerLocalizationScan"));
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = v6 == 0;

  if (!v7)
  {
    objc_msgSend(v5, "objectForKeyedSubscript:", CFSTR("shouldTriggerLocalizationScan"));
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = objc_msgSend(v8, "BOOLValue");
    v68 |= 0x400u;
    v61 = v9;

  }
  objc_msgSend(v5, "objectForKeyedSubscript:", CFSTR("shouldTriggerRecordingScan"));
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v11 = v10 == 0;

  if (!v11)
  {
    objc_msgSend(v5, "objectForKeyedSubscript:", CFSTR("shouldTriggerRecordingScan"));
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    v13 = objc_msgSend(v12, "BOOLValue");
    v68 |= 0x800u;
    v62 = v13;

  }
  objc_msgSend(v5, "objectForKeyedSubscript:", CFSTR("private.HomeKit.accessory.accessoryUUID"));
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  v15 = v14 == 0;

  v16 = (_QWORD *)MEMORY[0x24BEDD958];
  if (!v15)
  {
    objc_msgSend(v5, "objectForKeyedSubscript:", CFSTR("private.HomeKit.accessory.accessoryUUID"));
    v17 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
    objc_msgSend(v17, "UTF8String");
    v68 |= 2u;
    if (v58 == v16)
    {
      v18 = (_QWORD *)operator new();
      *v18 = 0;
      v18[1] = 0;
      v18[2] = 0;
      v58 = v18;
    }
    MEMORY[0x2426A02C4]();

  }
  objc_msgSend(v5, "objectForKeyedSubscript:", CFSTR("private.HomeKit.accessory.serviceType"));
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  v20 = v19 == 0;

  if (!v20)
  {
    objc_msgSend(v5, "objectForKeyedSubscript:", CFSTR("private.HomeKit.accessory.serviceType"));
    v21 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
    objc_msgSend(v21, "UTF8String");
    v68 |= 0x10u;
    if (v59 == v16)
    {
      v22 = (_QWORD *)operator new();
      *v22 = 0;
      v22[1] = 0;
      v22[2] = 0;
      v59 = v22;
    }
    MEMORY[0x2426A02C4]();

  }
  objc_msgSend(v5, "objectForKeyedSubscript:", CFSTR("private.HomeKit.accessory.characteristicType"));
  v23 = (void *)objc_claimAutoreleasedReturnValue();
  v24 = v23 == 0;

  if (!v24)
  {
    objc_msgSend(v5, "objectForKeyedSubscript:", CFSTR("private.HomeKit.accessory.characteristicType"));
    v25 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
    objc_msgSend(v25, "UTF8String");
    v68 |= 0x20u;
    if (v60 == v16)
    {
      v26 = (_QWORD *)operator new();
      *v26 = 0;
      v26[1] = 0;
      v26[2] = 0;
      v60 = v26;
    }
    MEMORY[0x2426A02C4]();

  }
  objc_msgSend(v5, "objectForKeyedSubscript:", CFSTR("private.HomeKit.accessory.source"));
  v27 = (void *)objc_claimAutoreleasedReturnValue();
  v28 = v27 == 0;

  if (!v28)
  {
    objc_msgSend(v5, "objectForKeyedSubscript:", CFSTR("private.HomeKit.accessory.source"));
    v29 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
    objc_msgSend(v29, "UTF8String");
    v68 |= 0x100u;
    if (v63 == v16)
    {
      v30 = (_QWORD *)operator new();
      *v30 = 0;
      v30[1] = 0;
      v30[2] = 0;
      v63 = v30;
    }
    MEMORY[0x2426A02C4]();

  }
  objc_msgSend(v5, "objectForKeyedSubscript:", CFSTR("private.HomeKit.accessory.stateString"));
  v31 = (void *)objc_claimAutoreleasedReturnValue();
  v32 = v31 == 0;

  if (!v32)
  {
    objc_msgSend(v5, "objectForKeyedSubscript:", CFSTR("private.HomeKit.accessory.stateString"));
    v33 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
    objc_msgSend(v33, "UTF8String");
    v68 |= 0x1000u;
    if (v65 == v16)
    {
      v34 = (_QWORD *)operator new();
      *v34 = 0;
      v34[1] = 0;
      v34[2] = 0;
      v65 = v34;
    }
    MEMORY[0x2426A02C4]();

  }
  objc_msgSend(v5, "objectForKeyedSubscript:", CFSTR("private.HomeKit.accessory.serviceUUID"));
  v35 = (void *)objc_claimAutoreleasedReturnValue();
  v36 = v35 == 0;

  if (!v36)
  {
    objc_msgSend(v5, "objectForKeyedSubscript:", CFSTR("private.HomeKit.accessory.serviceUUID"));
    v37 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
    objc_msgSend(v37, "UTF8String");
    v68 |= 0x200u;
    if (v64 == v16)
    {
      v38 = (_QWORD *)operator new();
      *v38 = 0;
      v38[1] = 0;
      v38[2] = 0;
      v64 = v38;
    }
    MEMORY[0x2426A02C4]();

  }
  objc_msgSend(v5, "objectForKeyedSubscript:", CFSTR("private.HomeKit.accessory.serviceGroupUUID"));
  v39 = (void *)objc_claimAutoreleasedReturnValue();
  v40 = v39 == 0;

  if (!v40)
  {
    objc_msgSend(v5, "objectForKeyedSubscript:", CFSTR("private.HomeKit.accessory.serviceGroupUUID"));
    v41 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
    objc_msgSend(v41, "UTF8String");
    v68 |= 0x2000u;
    if (v66 == v16)
    {
      v42 = (_QWORD *)operator new();
      *v42 = 0;
      v42[1] = 0;
      v42[2] = 0;
      v66 = v42;
    }
    MEMORY[0x2426A02C4]();

  }
  objc_msgSend(v5, "objectForKeyedSubscript:", CFSTR("private.HomeKit.accessory.roomUUID"));
  v43 = (void *)objc_claimAutoreleasedReturnValue();
  v44 = v43 == 0;

  if (!v44)
  {
    objc_msgSend(v5, "objectForKeyedSubscript:", CFSTR("private.HomeKit.accessory.roomUUID"));
    v45 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
    objc_msgSend(v45, "UTF8String");
    v68 |= 0x4000u;
    if (v67 == v16)
    {
      v46 = (_QWORD *)operator new();
      *v46 = 0;
      v46[1] = 0;
      v46[2] = 0;
      v67 = v46;
    }
    MEMORY[0x2426A02C4]();

  }
  if (onceToken_MicroLocation_Default != -1)
    dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_63);
  if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEBUG))
  {
    if (onceToken_MicroLocation_Default != -1)
      dispatch_once(&onceToken_MicroLocation_Default, &__block_literal_global_63);
    v47 = logObject_MicroLocation_Default;
    if (os_log_type_enabled((os_log_t)logObject_MicroLocation_Default, OS_LOG_TYPE_DEBUG))
    {
      v48 = v58;
      if (*((char *)v58 + 23) < 0)
        v48 = (_QWORD *)*v58;
      v49 = v65;
      if (*((char *)v65 + 23) < 0)
        v49 = (_QWORD *)*v65;
      v50 = v64;
      if (*((char *)v64 + 23) < 0)
        v50 = (_QWORD *)*v64;
      v51 = v66;
      if (*((char *)v66 + 23) < 0)
        v51 = (_QWORD *)*v66;
      v52 = v59;
      if (*((char *)v59 + 23) < 0)
        v52 = (_QWORD *)*v59;
      v53 = v60;
      if (*((char *)v60 + 23) < 0)
        v53 = (_QWORD *)*v60;
      v54 = v63;
      if (*((char *)v63 + 23) < 0)
        v54 = (_QWORD *)*v63;
      v55 = v67;
      if (*((char *)v67 + 23) < 0)
        v55 = (_QWORD *)*v67;
      *(_DWORD *)buf = 68291587;
      v71 = 2082;
      v70 = 0;
      v72 = "";
      v73 = 2081;
      v74 = v48;
      v75 = 2081;
      v76 = v49;
      v77 = 2081;
      v78 = v50;
      v79 = 2081;
      v80 = v51;
      v81 = 2081;
      v82 = v52;
      v83 = 2081;
      v84 = v53;
      v85 = 2081;
      v86 = v54;
      v87 = 2081;
      v88 = v55;
      v89 = 1025;
      v90 = v61;
      v91 = 1025;
      v92 = v62;
      _os_log_impl(&dword_2419D9000, v47, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"HomeKit Accessory\", \"accessoryUUID\":%{private, location:escape_only}s, \"accessoryState\":%{private, location:escape_only}s, \"serviceUUID\":%{private, location:escape_only}s, \"serviceGroupUUID\":%{private, location:escape_only}s, \"serviceType\":%{private, location:escape_only}s, \"characteristicType\":%{private, location:escape_only}s, \"source\":%{private, location:escape_only}s, \"roomUUID\":%{private, location:escape_only}s, \"triggerLocalization\":%{private}hhd, \"triggerRecording\":%{private}hhd}", buf, 0x6Eu);
    }
  }
  CLMicroLocationProtobufHelper::createRecordingEvent<CLMicroLocationProto::HomeKitAccessory>((CLMicroLocationProto::RecordingEvent *)v57, 0, 0, 0, (CLMicroLocationProto *)3, (uint64_t)v56, *a2);
  buf[0] = 1;
  CLMicroLocationProto::RecordingEvent::RecordingEvent((CLMicroLocationProto::RecordingEvent *)&v71, (const CLMicroLocationProto::RecordingEvent *)v56);
  *a3 = buf[0];
  CLMicroLocationProto::RecordingEvent::RecordingEvent((CLMicroLocationProto::RecordingEvent *)(a3 + 8), (const CLMicroLocationProto::RecordingEvent *)&v71);
  CLMicroLocationProto::RecordingEvent::~RecordingEvent((CLMicroLocationProto::RecordingEvent *)&v71);
  CLMicroLocationProto::RecordingEvent::~RecordingEvent((CLMicroLocationProto::RecordingEvent *)v56);
  CLMicroLocationProto::HomeKitAccessory::~HomeKitAccessory((CLMicroLocationProto::HomeKitAccessory *)v57);

}

void sub_241AAF708(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  void *v28;
  void *v29;

  CLMicroLocationProto::HomeKitAccessory::~HomeKitAccessory((CLMicroLocationProto::HomeKitAccessory *)&a28);
  _Unwind_Resume(a1);
}

BOOL CLMicroLocationLegacyEventHomeKit::isHomeControlSuggestionRequest(CLMicroLocationLegacyEventHomeKit *this, NSDictionary *a2)
{
  NSDictionary *v2;
  NSDictionary *v3;
  void *v4;
  _BOOL8 v5;
  void *v6;

  v2 = a2;
  v3 = v2;
  if (v2)
  {
    -[NSDictionary objectForKeyedSubscript:](v2, "objectForKeyedSubscript:", CFSTR("private.HomeKit.accessory.accessoryUUID"));
    v4 = (void *)objc_claimAutoreleasedReturnValue();

    if (v4)
    {
      v5 = 1;
    }
    else
    {
      -[NSDictionary objectForKeyedSubscript:](v3, "objectForKeyedSubscript:", CFSTR("private.HomeKit.scene.actionSetUUID"));
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      v5 = v6 != 0;

    }
  }
  else
  {
    v5 = 0;
  }

  return v5;
}

void sub_241AAF850(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void CLMicroLocationProtobufHelper::createRecordingEvent<CLMicroLocationProto::HomeKitScene>(CLMicroLocationProto::RecordingEvent *a1@<X0>, CLMicroLocationProto *a2@<X1>, char a3@<W2>, char a4@<W3>, CLMicroLocationProto *a5@<X4>, uint64_t a6@<X8>, double a7@<D0>)
{
  unsigned int v14;
  int v15;
  const CLMicroLocationProto::HomeKitScene *v16;
  const char *v17;
  int v18;
  const char *v19;

  CLMicroLocationProto::RecordingEvent::RecordingEvent((CLMicroLocationProto::RecordingEvent *)a6);
  v14 = *((_DWORD *)a1 + 12);
  if (!CLMicroLocationProto::EventType_IsValid((CLMicroLocationProto *)v14))
  {
    v17 = "::CLMicroLocationProto::EventType_IsValid(value)";
    v18 = 20192;
    v19 = "set_eventtype";
    goto LABEL_10;
  }
  v15 = *(_DWORD *)(a6 + 140);
  *(_DWORD *)(a6 + 72) = v14;
  *(double *)(a6 + 8) = a7;
  *(_BYTE *)(a6 + 77) = a3;
  *(_DWORD *)(a6 + 140) = v15 | 0x2803;
  *(_BYTE *)(a6 + 76) = a4;
  if (!CLMicroLocationProto::ConfidenceLevel_IsValid(a5))
  {
    v17 = "::CLMicroLocationProto::ConfidenceLevel_IsValid(value)";
    v18 = 20701;
    v19 = "set_confidencelevel";
    goto LABEL_10;
  }
  *(_DWORD *)(a6 + 140) |= 0x4000u;
  *(_DWORD *)(a6 + 120) = (_DWORD)a5;
  if (((unint64_t)a2 & 0xFF00000000) != 0)
  {
    if (CLMicroLocationProto::MotionState_IsValid(a2))
    {
      *(_DWORD *)(a6 + 140) |= 0x20000u;
      *(_DWORD *)(a6 + 124) = (_DWORD)a2;
      goto LABEL_6;
    }
    v17 = "::CLMicroLocationProto::MotionState_IsValid(value)";
    v18 = 20793;
    v19 = "set_motionstate";
LABEL_10:
    __assert_rtn(v19, "microlocation.pb.h", v18, v17);
  }
LABEL_6:
  CLMicroLocationProtobufHelper::setSpecificRecordingEvent((CLMicroLocationProtobufHelper *)a6, a1, v16);
}

void sub_241AAF98C(_Unwind_Exception *a1)
{
  CLMicroLocationProto::RecordingEvent *v1;

  CLMicroLocationProto::RecordingEvent::~RecordingEvent(v1);
  _Unwind_Resume(a1);
}

void CLMicroLocationProtobufHelper::createRecordingEvent<CLMicroLocationProto::HomeKitAccessory>(CLMicroLocationProto::RecordingEvent *a1@<X0>, CLMicroLocationProto *a2@<X1>, char a3@<W2>, char a4@<W3>, CLMicroLocationProto *a5@<X4>, uint64_t a6@<X8>, double a7@<D0>)
{
  unsigned int v14;
  int v15;
  const CLMicroLocationProto::HomeKitAccessory *v16;
  const char *v17;
  int v18;
  const char *v19;

  CLMicroLocationProto::RecordingEvent::RecordingEvent((CLMicroLocationProto::RecordingEvent *)a6);
  v14 = *((_DWORD *)a1 + 16);
  if (!CLMicroLocationProto::EventType_IsValid((CLMicroLocationProto *)v14))
  {
    v17 = "::CLMicroLocationProto::EventType_IsValid(value)";
    v18 = 20192;
    v19 = "set_eventtype";
    goto LABEL_10;
  }
  v15 = *(_DWORD *)(a6 + 140);
  *(_DWORD *)(a6 + 72) = v14;
  *(double *)(a6 + 8) = a7;
  *(_BYTE *)(a6 + 77) = a3;
  *(_DWORD *)(a6 + 140) = v15 | 0x2803;
  *(_BYTE *)(a6 + 76) = a4;
  if (!CLMicroLocationProto::ConfidenceLevel_IsValid(a5))
  {
    v17 = "::CLMicroLocationProto::ConfidenceLevel_IsValid(value)";
    v18 = 20701;
    v19 = "set_confidencelevel";
    goto LABEL_10;
  }
  *(_DWORD *)(a6 + 140) |= 0x4000u;
  *(_DWORD *)(a6 + 120) = (_DWORD)a5;
  if (((unint64_t)a2 & 0xFF00000000) != 0)
  {
    if (CLMicroLocationProto::MotionState_IsValid(a2))
    {
      *(_DWORD *)(a6 + 140) |= 0x20000u;
      *(_DWORD *)(a6 + 124) = (_DWORD)a2;
      goto LABEL_6;
    }
    v17 = "::CLMicroLocationProto::MotionState_IsValid(value)";
    v18 = 20793;
    v19 = "set_motionstate";
LABEL_10:
    __assert_rtn(v19, "microlocation.pb.h", v18, v17);
  }
LABEL_6:
  CLMicroLocationProtobufHelper::setSpecificRecordingEvent((CLMicroLocationProtobufHelper *)a6, a1, v16);
}

void sub_241AAFACC(_Unwind_Exception *a1)
{
  CLMicroLocationProto::RecordingEvent *v1;

  CLMicroLocationProto::RecordingEvent::~RecordingEvent(v1);
  _Unwind_Resume(a1);
}

void ___ZL45_CLLogObjectForCategory_MicroLocation_Defaultv_block_invoke_54()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.MicroLocation", "MicroLocation");
  v1 = (void *)logObject_MicroLocation_Default;
  logObject_MicroLocation_Default = (uint64_t)v0;

}

void sub_241AB0404(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__10(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__10(uint64_t a1)
{

}

uint64_t CLMicroLocationProto::protobuf_ShutdownFile_microlocation_2eproto(CLMicroLocationProto *this)
{
  uint64_t result;

  if (CLMicroLocationProto::BleLeechedBeacons::default_instance_)
    (*(void (**)(uint64_t))(*(_QWORD *)CLMicroLocationProto::BleLeechedBeacons::default_instance_ + 8))(CLMicroLocationProto::BleLeechedBeacons::default_instance_);
  if (CLMicroLocationProto::WiFiRssi::default_instance_)
    (*(void (**)(uint64_t))(*(_QWORD *)CLMicroLocationProto::WiFiRssi::default_instance_ + 8))(CLMicroLocationProto::WiFiRssi::default_instance_);
  if (CLMicroLocationProto::Direction::default_instance_)
    (*(void (**)(uint64_t))(*(_QWORD *)CLMicroLocationProto::Direction::default_instance_ + 8))(CLMicroLocationProto::Direction::default_instance_);
  if (CLMicroLocationProto::UwbRange::default_instance_)
    (*(void (**)(uint64_t))(*(_QWORD *)CLMicroLocationProto::UwbRange::default_instance_ + 8))(CLMicroLocationProto::UwbRange::default_instance_);
  if (CLMicroLocationProto::WiFiRange::default_instance_)
    (*(void (**)(uint64_t))(*(_QWORD *)CLMicroLocationProto::WiFiRange::default_instance_ + 8))(CLMicroLocationProto::WiFiRange::default_instance_);
  if (CLMicroLocationProto::ATVAirplayBluetoothRssi::default_instance_)
    (*(void (**)(uint64_t))(*(_QWORD *)CLMicroLocationProto::ATVAirplayBluetoothRssi::default_instance_ + 8))(CLMicroLocationProto::ATVAirplayBluetoothRssi::default_instance_);
  if (CLMicroLocationProto::HomeKitBluetoothRssi::default_instance_)
    (*(void (**)(uint64_t))(*(_QWORD *)CLMicroLocationProto::HomeKitBluetoothRssi::default_instance_ + 8))(CLMicroLocationProto::HomeKitBluetoothRssi::default_instance_);
  if (CLMicroLocationProto::Measurement::default_instance_)
    (*(void (**)(uint64_t))(*(_QWORD *)CLMicroLocationProto::Measurement::default_instance_ + 8))(CLMicroLocationProto::Measurement::default_instance_);
  if (CLMicroLocationProto::DeviceId::default_instance_)
    (*(void (**)(uint64_t))(*(_QWORD *)CLMicroLocationProto::DeviceId::default_instance_ + 8))(CLMicroLocationProto::DeviceId::default_instance_);
  if (CLMicroLocationProto::FingerprintMeasurement::default_instance_)
    (*(void (**)(uint64_t))(*(_QWORD *)CLMicroLocationProto::FingerprintMeasurement::default_instance_ + 8))(CLMicroLocationProto::FingerprintMeasurement::default_instance_);
  if (CLMicroLocationProto::Fingerprint::default_instance_)
    (*(void (**)(uint64_t))(*(_QWORD *)CLMicroLocationProto::Fingerprint::default_instance_ + 8))(CLMicroLocationProto::Fingerprint::default_instance_);
  if (CLMicroLocationProto::ClusterRecordings::default_instance_)
    (*(void (**)(uint64_t))(*(_QWORD *)CLMicroLocationProto::ClusterRecordings::default_instance_ + 8))(CLMicroLocationProto::ClusterRecordings::default_instance_);
  if (CLMicroLocationProto::AnchorMetadata::default_instance_)
    (*(void (**)(uint64_t))(*(_QWORD *)CLMicroLocationProto::AnchorMetadata::default_instance_ + 8))(CLMicroLocationProto::AnchorMetadata::default_instance_);
  if (CLMicroLocationProto::AnchorAppearance::default_instance_)
    (*(void (**)(uint64_t))(*(_QWORD *)CLMicroLocationProto::AnchorAppearance::default_instance_ + 8))(CLMicroLocationProto::AnchorAppearance::default_instance_);
  if (CLMicroLocationProto::anchorAppearancesVector::default_instance_)
    (*(void (**)(uint64_t))(*(_QWORD *)CLMicroLocationProto::anchorAppearancesVector::default_instance_ + 8))(CLMicroLocationProto::anchorAppearancesVector::default_instance_);
  if (CLMicroLocationProto::AnchorValueStatistics::default_instance_)
    (*(void (**)(uint64_t))(*(_QWORD *)CLMicroLocationProto::AnchorValueStatistics::default_instance_ + 8))(CLMicroLocationProto::AnchorValueStatistics::default_instance_);
  if (CLMicroLocationProto::ClusterAnchorValueStatistics::default_instance_)
    (*(void (**)(uint64_t))(*(_QWORD *)CLMicroLocationProto::ClusterAnchorValueStatistics::default_instance_
                                    + 8))(CLMicroLocationProto::ClusterAnchorValueStatistics::default_instance_);
  if (CLMicroLocationProto::ClusterAnchorValueStatisticsVector::default_instance_)
    (*(void (**)(uint64_t))(*(_QWORD *)CLMicroLocationProto::ClusterAnchorValueStatisticsVector::default_instance_
                                    + 8))(CLMicroLocationProto::ClusterAnchorValueStatisticsVector::default_instance_);
  if (CLMicroLocationProto::LocationSimilarityListElement::default_instance_)
    (*(void (**)(uint64_t))(*(_QWORD *)CLMicroLocationProto::LocationSimilarityListElement::default_instance_
                                    + 8))(CLMicroLocationProto::LocationSimilarityListElement::default_instance_);
  if (CLMicroLocationProto::LocationSimilarityListData::default_instance_)
    (*(void (**)(uint64_t))(*(_QWORD *)CLMicroLocationProto::LocationSimilarityListData::default_instance_
                                    + 8))(CLMicroLocationProto::LocationSimilarityListData::default_instance_);
  if (CLMicroLocationProto::BlueAtlasData::default_instance_)
    (*(void (**)(uint64_t))(*(_QWORD *)CLMicroLocationProto::BlueAtlasData::default_instance_ + 8))(CLMicroLocationProto::BlueAtlasData::default_instance_);
  if (CLMicroLocationProto::Model::default_instance_)
    (*(void (**)(uint64_t))(*(_QWORD *)CLMicroLocationProto::Model::default_instance_ + 8))(CLMicroLocationProto::Model::default_instance_);
  if (CLMicroLocationProto::BundleIdFeatures::default_instance_)
    (*(void (**)(uint64_t))(*(_QWORD *)CLMicroLocationProto::BundleIdFeatures::default_instance_ + 8))(CLMicroLocationProto::BundleIdFeatures::default_instance_);
  if (CLMicroLocationProto::ReceivedEventAction::default_instance_)
    (*(void (**)(uint64_t))(*(_QWORD *)CLMicroLocationProto::ReceivedEventAction::default_instance_ + 8))(CLMicroLocationProto::ReceivedEventAction::default_instance_);
  if (CLMicroLocationProto::RecordingRequest::default_instance_)
    (*(void (**)(uint64_t))(*(_QWORD *)CLMicroLocationProto::RecordingRequest::default_instance_ + 8))(CLMicroLocationProto::RecordingRequest::default_instance_);
  if (CLMicroLocationProto::AppLaunch::default_instance_)
    (*(void (**)(uint64_t))(*(_QWORD *)CLMicroLocationProto::AppLaunch::default_instance_ + 8))(CLMicroLocationProto::AppLaunch::default_instance_);
  if (CLMicroLocationProto::BacklightOn::default_instance_)
    (*(void (**)(uint64_t))(*(_QWORD *)CLMicroLocationProto::BacklightOn::default_instance_ + 8))(CLMicroLocationProto::BacklightOn::default_instance_);
  if (CLMicroLocationProto::BatteryChargerConnected::default_instance_)
    (*(void (**)(uint64_t))(*(_QWORD *)CLMicroLocationProto::BatteryChargerConnected::default_instance_ + 8))(CLMicroLocationProto::BatteryChargerConnected::default_instance_);
  if (CLMicroLocationProto::TruthLabelDonation::default_instance_)
    (*(void (**)(uint64_t))(*(_QWORD *)CLMicroLocationProto::TruthLabelDonation::default_instance_ + 8))(CLMicroLocationProto::TruthLabelDonation::default_instance_);
  if (CLMicroLocationProto::ForcedRecording::default_instance_)
    (*(void (**)(uint64_t))(*(_QWORD *)CLMicroLocationProto::ForcedRecording::default_instance_ + 8))(CLMicroLocationProto::ForcedRecording::default_instance_);
  if (CLMicroLocationProto::HomeKitAccessory::default_instance_)
    (*(void (**)(uint64_t))(*(_QWORD *)CLMicroLocationProto::HomeKitAccessory::default_instance_ + 8))(CLMicroLocationProto::HomeKitAccessory::default_instance_);
  if (CLMicroLocationProto::HomeKitScene::default_instance_)
    (*(void (**)(uint64_t))(*(_QWORD *)CLMicroLocationProto::HomeKitScene::default_instance_ + 8))(CLMicroLocationProto::HomeKitScene::default_instance_);
  if (CLMicroLocationProto::NowPlayingOutputDevice::default_instance_)
    (*(void (**)(uint64_t))(*(_QWORD *)CLMicroLocationProto::NowPlayingOutputDevice::default_instance_ + 8))(CLMicroLocationProto::NowPlayingOutputDevice::default_instance_);
  if (CLMicroLocationProto::NowPlaying::default_instance_)
    (*(void (**)(uint64_t))(*(_QWORD *)CLMicroLocationProto::NowPlaying::default_instance_ + 8))(CLMicroLocationProto::NowPlaying::default_instance_);
  if (CLMicroLocationProto::LearnModel::default_instance_)
    (*(void (**)(uint64_t))(*(_QWORD *)CLMicroLocationProto::LearnModel::default_instance_ + 8))(CLMicroLocationProto::LearnModel::default_instance_);
  if (CLMicroLocationProto::LearnCompleted::default_instance_)
    (*(void (**)(uint64_t))(*(_QWORD *)CLMicroLocationProto::LearnCompleted::default_instance_ + 8))(CLMicroLocationProto::LearnCompleted::default_instance_);
  if (CLMicroLocationProto::SensorsScanComplete::default_instance_)
    (*(void (**)(uint64_t))(*(_QWORD *)CLMicroLocationProto::SensorsScanComplete::default_instance_ + 8))(CLMicroLocationProto::SensorsScanComplete::default_instance_);
  if (CLMicroLocationProto::StartSpectating::default_instance_)
    (*(void (**)(uint64_t))(*(_QWORD *)CLMicroLocationProto::StartSpectating::default_instance_ + 8))(CLMicroLocationProto::StartSpectating::default_instance_);
  if (CLMicroLocationProto::StopSpectating::default_instance_)
    (*(void (**)(uint64_t))(*(_QWORD *)CLMicroLocationProto::StopSpectating::default_instance_ + 8))(CLMicroLocationProto::StopSpectating::default_instance_);
  if (CLMicroLocationProto::ServiceCreate::default_instance_)
    (*(void (**)(uint64_t))(*(_QWORD *)CLMicroLocationProto::ServiceCreate::default_instance_ + 8))(CLMicroLocationProto::ServiceCreate::default_instance_);
  if (CLMicroLocationProto::ServiceDelete::default_instance_)
    (*(void (**)(uint64_t))(*(_QWORD *)CLMicroLocationProto::ServiceDelete::default_instance_ + 8))(CLMicroLocationProto::ServiceDelete::default_instance_);
  if (CLMicroLocationProto::ServiceConnect::default_instance_)
    (*(void (**)(uint64_t))(*(_QWORD *)CLMicroLocationProto::ServiceConnect::default_instance_ + 8))(CLMicroLocationProto::ServiceConnect::default_instance_);
  if (CLMicroLocationProto::ServiceDisconnect::default_instance_)
    (*(void (**)(uint64_t))(*(_QWORD *)CLMicroLocationProto::ServiceDisconnect::default_instance_ + 8))(CLMicroLocationProto::ServiceDisconnect::default_instance_);
  if (CLMicroLocationProto::ServiceStartUpdating::default_instance_)
    (*(void (**)(uint64_t))(*(_QWORD *)CLMicroLocationProto::ServiceStartUpdating::default_instance_ + 8))(CLMicroLocationProto::ServiceStartUpdating::default_instance_);
  if (CLMicroLocationProto::ServiceStopUpdating::default_instance_)
    (*(void (**)(uint64_t))(*(_QWORD *)CLMicroLocationProto::ServiceStopUpdating::default_instance_ + 8))(CLMicroLocationProto::ServiceStopUpdating::default_instance_);
  if (CLMicroLocationProto::RequestObservation::default_instance_)
    (*(void (**)(uint64_t))(*(_QWORD *)CLMicroLocationProto::RequestObservation::default_instance_ + 8))(CLMicroLocationProto::RequestObservation::default_instance_);
  if (CLMicroLocationProto::RequestPrediction::default_instance_)
    (*(void (**)(uint64_t))(*(_QWORD *)CLMicroLocationProto::RequestPrediction::default_instance_ + 8))(CLMicroLocationProto::RequestPrediction::default_instance_);
  if (CLMicroLocationProto::MiloInit::default_instance_)
    (*(void (**)(uint64_t))(*(_QWORD *)CLMicroLocationProto::MiloInit::default_instance_ + 8))(CLMicroLocationProto::MiloInit::default_instance_);
  if (CLMicroLocationProto::MotionEvent::default_instance_)
    (*(void (**)(uint64_t))(*(_QWORD *)CLMicroLocationProto::MotionEvent::default_instance_ + 8))(CLMicroLocationProto::MotionEvent::default_instance_);
  if (CLMicroLocationProto::LegacyThrottle::default_instance_)
    (*(void (**)(uint64_t))(*(_QWORD *)CLMicroLocationProto::LegacyThrottle::default_instance_ + 8))(CLMicroLocationProto::LegacyThrottle::default_instance_);
  if (CLMicroLocationProto::RetrievedLoi::default_instance_)
    (*(void (**)(uint64_t))(*(_QWORD *)CLMicroLocationProto::RetrievedLoi::default_instance_ + 8))(CLMicroLocationProto::RetrievedLoi::default_instance_);
  if (CLMicroLocationProto::ReceivedEvent::default_instance_)
    (*(void (**)(uint64_t))(*(_QWORD *)CLMicroLocationProto::ReceivedEvent::default_instance_ + 8))(CLMicroLocationProto::ReceivedEvent::default_instance_);
  if (CLMicroLocationProto::AssociatedAccessPointInfo::default_instance_)
    (*(void (**)(uint64_t))(*(_QWORD *)CLMicroLocationProto::AssociatedAccessPointInfo::default_instance_ + 8))(CLMicroLocationProto::AssociatedAccessPointInfo::default_instance_);
  if (CLMicroLocationProto::RecordingEvent::default_instance_)
    (*(void (**)(uint64_t))(*(_QWORD *)CLMicroLocationProto::RecordingEvent::default_instance_ + 8))(CLMicroLocationProto::RecordingEvent::default_instance_);
  if (CLMicroLocationProto::TriggerEvent::default_instance_)
    (*(void (**)(uint64_t))(*(_QWORD *)CLMicroLocationProto::TriggerEvent::default_instance_ + 8))(CLMicroLocationProto::TriggerEvent::default_instance_);
  if (CLMicroLocationProto::LegacyClientStatusUpdate::default_instance_)
    (*(void (**)(uint64_t))(*(_QWORD *)CLMicroLocationProto::LegacyClientStatusUpdate::default_instance_ + 8))(CLMicroLocationProto::LegacyClientStatusUpdate::default_instance_);
  if (CLMicroLocationProto::SpectatingMotionUpdate::default_instance_)
    (*(void (**)(uint64_t))(*(_QWORD *)CLMicroLocationProto::SpectatingMotionUpdate::default_instance_ + 8))(CLMicroLocationProto::SpectatingMotionUpdate::default_instance_);
  if (CLMicroLocationProto::EnabledStateUpdate::default_instance_)
    (*(void (**)(uint64_t))(*(_QWORD *)CLMicroLocationProto::EnabledStateUpdate::default_instance_ + 8))(CLMicroLocationProto::EnabledStateUpdate::default_instance_);
  if (CLMicroLocationProto::ScreenStateUpdate::default_instance_)
    (*(void (**)(uint64_t))(*(_QWORD *)CLMicroLocationProto::ScreenStateUpdate::default_instance_ + 8))(CLMicroLocationProto::ScreenStateUpdate::default_instance_);
  if (CLMicroLocationProto::CloudBackupExport::default_instance_)
    (*(void (**)(uint64_t))(*(_QWORD *)CLMicroLocationProto::CloudBackupExport::default_instance_ + 8))(CLMicroLocationProto::CloudBackupExport::default_instance_);
  if (CLMicroLocationProto::CloudBackupImport::default_instance_)
    (*(void (**)(uint64_t))(*(_QWORD *)CLMicroLocationProto::CloudBackupImport::default_instance_ + 8))(CLMicroLocationProto::CloudBackupImport::default_instance_);
  if (CLMicroLocationProto::DataMigration::default_instance_)
    (*(void (**)(uint64_t))(*(_QWORD *)CLMicroLocationProto::DataMigration::default_instance_ + 8))(CLMicroLocationProto::DataMigration::default_instance_);
  if (CLMicroLocationProto::ChannelAndCount::default_instance_)
    (*(void (**)(uint64_t))(*(_QWORD *)CLMicroLocationProto::ChannelAndCount::default_instance_ + 8))(CLMicroLocationProto::ChannelAndCount::default_instance_);
  if (CLMicroLocationProto::WifiHistogram::default_instance_)
    (*(void (**)(uint64_t))(*(_QWORD *)CLMicroLocationProto::WifiHistogram::default_instance_ + 8))(CLMicroLocationProto::WifiHistogram::default_instance_);
  if (CLMicroLocationProto::AnchorAppearanceConfiguration::default_instance_)
    (*(void (**)(uint64_t))(*(_QWORD *)CLMicroLocationProto::AnchorAppearanceConfiguration::default_instance_
                                    + 8))(CLMicroLocationProto::AnchorAppearanceConfiguration::default_instance_);
  if (CLMicroLocationProto::AnchorValueStatisticsConfiguration::default_instance_)
    (*(void (**)(uint64_t))(*(_QWORD *)CLMicroLocationProto::AnchorValueStatisticsConfiguration::default_instance_
                                    + 8))(CLMicroLocationProto::AnchorValueStatisticsConfiguration::default_instance_);
  if (CLMicroLocationProto::Configuration::default_instance_)
    (*(void (**)(uint64_t))(*(_QWORD *)CLMicroLocationProto::Configuration::default_instance_ + 8))(CLMicroLocationProto::Configuration::default_instance_);
  result = CLMicroLocationProto::RapportDevice::default_instance_;
  if (CLMicroLocationProto::RapportDevice::default_instance_)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)CLMicroLocationProto::RapportDevice::default_instance_ + 8))(CLMicroLocationProto::RapportDevice::default_instance_);
  return result;
}

uint64_t CLMicroLocationProto::protobuf_AddDesc_microlocation_2eproto_impl(CLMicroLocationProto *this, uint64_t a2, uint64_t a3, const char *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  _QWORD *v72;
  uint64_t v73;
  _QWORD *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  void (*v84)(void);

  wireless_diagnostics::google::protobuf::internal::VerifyVersion((wireless_diagnostics::google::protobuf::internal *)0x1E9808, 2005000, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/MicroLocation/MicroLocationLogic/proto/microlocation.pb.cc", a4);
  v4 = operator new();
  *(_QWORD *)v4 = &off_2511D68A8;
  *(_QWORD *)(v4 + 8) = 0;
  v5 = MEMORY[0x24BEDD958];
  *(_QWORD *)(v4 + 16) = 5;
  *(_QWORD *)(v4 + 24) = v5;
  *(_QWORD *)(v4 + 56) = 0;
  *(_QWORD *)(v4 + 32) = 0;
  *(_QWORD *)(v4 + 40) = v5;
  *(_QWORD *)(v4 + 48) = v5;
  *(_DWORD *)(v4 + 64) = 0;
  CLMicroLocationProto::BleLeechedBeacons::default_instance_ = v4;
  v6 = operator new();
  *(_DWORD *)(v6 + 16) = 1;
  *(_QWORD *)v6 = &off_2511D6920;
  *(_QWORD *)(v6 + 8) = 0;
  *(_QWORD *)(v6 + 36) = 0;
  *(_QWORD *)(v6 + 28) = 0;
  *(_QWORD *)(v6 + 20) = 0;
  CLMicroLocationProto::WiFiRssi::default_instance_ = v6;
  v7 = operator new();
  *(_QWORD *)(v7 + 8) = 0;
  *(_QWORD *)(v7 + 16) = 0;
  *(_QWORD *)v7 = &off_2511D6998;
  *(_DWORD *)(v7 + 24) = 0;
  CLMicroLocationProto::Direction::default_instance_ = v7;
  v8 = operator new();
  *(_QWORD *)v8 = &off_2511D6A10;
  *(_QWORD *)(v8 + 8) = 0;
  *(_QWORD *)(v8 + 16) = 6;
  *(_QWORD *)(v8 + 24) = 0;
  *(_QWORD *)(v8 + 32) = v5;
  *(_DWORD *)(v8 + 44) = 0;
  *(_DWORD *)(v8 + 48) = 0;
  *(_DWORD *)(v8 + 40) = 1;
  *(_QWORD *)(v8 + 52) = 0;
  CLMicroLocationProto::UwbRange::default_instance_ = v8;
  v9 = operator new();
  *(_QWORD *)v9 = &off_2511D6A88;
  *(_QWORD *)(v9 + 8) = 0;
  *(_DWORD *)(v9 + 32) = 0;
  *(_QWORD *)(v9 + 16) = 2;
  *(_QWORD *)(v9 + 24) = v5;
  *(_QWORD *)(v9 + 36) = 0;
  CLMicroLocationProto::WiFiRange::default_instance_ = v9;
  v10 = operator new();
  *(_QWORD *)v10 = &off_2511D6B00;
  *(_QWORD *)(v10 + 8) = 0;
  *(_QWORD *)(v10 + 16) = 3;
  *(_QWORD *)(v10 + 24) = v5;
  *(_OWORD *)(v10 + 32) = 0u;
  CLMicroLocationProto::ATVAirplayBluetoothRssi::default_instance_ = v10;
  v11 = operator new();
  *(_QWORD *)v11 = &off_2511D6B78;
  *(_QWORD *)(v11 + 8) = 0;
  *(_QWORD *)(v11 + 16) = 4;
  *(_QWORD *)(v11 + 24) = v5;
  *(_OWORD *)(v11 + 32) = xmmword_241BB7100;
  CLMicroLocationProto::HomeKitBluetoothRssi::default_instance_ = v11;
  v12 = operator new();
  *(_QWORD *)v12 = &off_2511D6BF0;
  *(_QWORD *)(v12 + 64) = 1;
  *(_DWORD *)(v12 + 72) = 0;
  *(_OWORD *)(v12 + 8) = 0u;
  *(_OWORD *)(v12 + 24) = 0u;
  *(_OWORD *)(v12 + 40) = 0u;
  *(_QWORD *)(v12 + 56) = 0;
  CLMicroLocationProto::Measurement::default_instance_ = v12;
  v13 = (_QWORD *)operator new();
  *v13 = &off_2511D6C68;
  v13[1] = 0;
  v13[2] = v5;
  v13[3] = 0;
  CLMicroLocationProto::DeviceId::default_instance_ = (uint64_t)v13;
  v14 = (_QWORD *)operator new();
  *v14 = &off_2511D6CE0;
  v14[1] = 0;
  v14[2] = 1;
  v14[3] = 0;
  v14[4] = 0;
  CLMicroLocationProto::FingerprintMeasurement::default_instance_ = (uint64_t)v14;
  v15 = operator new();
  *(_QWORD *)(v15 + 8) = 0;
  *(_QWORD *)(v15 + 16) = 0;
  *(_QWORD *)v15 = &off_2511D6D58;
  *(_DWORD *)(v15 + 24) = 0;
  *(_QWORD *)(v15 + 72) = 0;
  *(_QWORD *)(v15 + 80) = 0;
  *(_DWORD *)(v15 + 88) = 0;
  *(_QWORD *)(v15 + 32) = 0;
  *(_QWORD *)(v15 + 40) = 0;
  *(_QWORD *)(v15 + 48) = 0;
  *(_QWORD *)(v15 + 56) = v5;
  *(_QWORD *)(v15 + 64) = v5;
  *(_WORD *)(v15 + 96) = 0;
  *(_QWORD *)(v15 + 100) = 0;
  CLMicroLocationProto::Fingerprint::default_instance_ = v15;
  v16 = operator new();
  *(_QWORD *)(v16 + 16) = 0;
  *(_QWORD *)(v16 + 24) = 0;
  *(_DWORD *)(v16 + 32) = 0;
  *(_QWORD *)v16 = &off_2511D6DD0;
  *(_QWORD *)(v16 + 8) = v5;
  *(_QWORD *)(v16 + 40) = 0;
  CLMicroLocationProto::ClusterRecordings::default_instance_ = v16;
  v17 = operator new();
  *(_QWORD *)(v17 + 8) = 0;
  *(_QWORD *)(v17 + 16) = 0;
  *(_QWORD *)v17 = &off_2511D6E48;
  *(_DWORD *)(v17 + 24) = 1;
  *(_WORD *)(v17 + 28) = 0;
  *(_QWORD *)(v17 + 40) = 1;
  *(_QWORD *)(v17 + 32) = v5;
  *(_DWORD *)(v17 + 48) = 0;
  CLMicroLocationProto::AnchorMetadata::default_instance_ = v17;
  v18 = operator new();
  *(_QWORD *)(v18 + 32) = 0;
  *(_QWORD *)v18 = &off_2511D6EC0;
  *(_QWORD *)(v18 + 8) = 0;
  *(_QWORD *)(v18 + 16) = 0;
  *(_QWORD *)(v18 + 24) = v5;
  *(_DWORD *)(v18 + 40) = 0;
  CLMicroLocationProto::AnchorAppearance::default_instance_ = v18;
  v19 = operator new();
  *(_QWORD *)(v19 + 8) = 0;
  *(_QWORD *)(v19 + 16) = 0;
  *(_QWORD *)v19 = &off_2511D6F38;
  *(_DWORD *)(v19 + 24) = 0;
  *(_QWORD *)(v19 + 32) = 0;
  CLMicroLocationProto::anchorAppearancesVector::default_instance_ = v19;
  v20 = (_QWORD *)operator new();
  *v20 = &off_2511D6FB0;
  v20[1] = 0;
  v20[2] = 0;
  v20[3] = v5;
  v20[4] = 0;
  CLMicroLocationProto::AnchorValueStatistics::default_instance_ = (uint64_t)v20;
  v21 = operator new();
  *(_QWORD *)(v21 + 8) = 0;
  *(_QWORD *)(v21 + 16) = 0;
  *(_QWORD *)v21 = &off_2511D7028;
  *(_DWORD *)(v21 + 24) = 0;
  *(_QWORD *)(v21 + 32) = v5;
  *(_QWORD *)(v21 + 40) = 0;
  CLMicroLocationProto::ClusterAnchorValueStatistics::default_instance_ = v21;
  v22 = operator new();
  *(_QWORD *)(v22 + 8) = 0;
  *(_QWORD *)(v22 + 16) = 0;
  *(_QWORD *)v22 = &off_2511D70A0;
  *(_DWORD *)(v22 + 24) = 0;
  *(_QWORD *)(v22 + 32) = 0;
  CLMicroLocationProto::ClusterAnchorValueStatisticsVector::default_instance_ = v22;
  v23 = (_QWORD *)operator new();
  v23[3] = 0;
  v23[4] = 0;
  v23[1] = v5;
  v23[2] = 0;
  *v23 = &off_2511D7118;
  CLMicroLocationProto::LocationSimilarityListElement::default_instance_ = (uint64_t)v23;
  v24 = operator new();
  *(_QWORD *)(v24 + 8) = 0;
  *(_QWORD *)(v24 + 16) = 0;
  *(_QWORD *)v24 = &off_2511D7190;
  *(_DWORD *)(v24 + 24) = 0;
  *(_QWORD *)(v24 + 32) = 0;
  *(_QWORD *)(v24 + 40) = 0;
  *(_DWORD *)(v24 + 48) = 0;
  *(_QWORD *)(v24 + 64) = 0;
  *(_QWORD *)(v24 + 72) = 0;
  *(_QWORD *)(v24 + 56) = 0;
  CLMicroLocationProto::LocationSimilarityListData::default_instance_ = v24;
  v25 = operator new();
  *(_QWORD *)(v25 + 8) = 0;
  *(_QWORD *)(v25 + 16) = 0;
  *(_QWORD *)v25 = &off_2511D7208;
  *(_DWORD *)(v25 + 24) = 0;
  *(_OWORD *)(v25 + 32) = 0u;
  *(_OWORD *)(v25 + 48) = 0u;
  CLMicroLocationProto::BlueAtlasData::default_instance_ = v25;
  v26 = operator new();
  *(_QWORD *)(v26 + 8) = 0;
  *(_QWORD *)(v26 + 16) = 0;
  *(_QWORD *)v26 = &off_2511D7280;
  *(_DWORD *)(v26 + 24) = 0;
  *(_QWORD *)(v26 + 80) = 0;
  *(_QWORD *)(v26 + 88) = 0;
  *(_DWORD *)(v26 + 96) = 0;
  *(_BYTE *)(v26 + 104) = 0;
  *(_QWORD *)(v26 + 192) = 0;
  *(_OWORD *)(v26 + 32) = 0u;
  *(_OWORD *)(v26 + 48) = 0u;
  *(_OWORD *)(v26 + 60) = 0u;
  *(_OWORD *)(v26 + 108) = 0u;
  *(_OWORD *)(v26 + 124) = 0u;
  *(_OWORD *)(v26 + 140) = 0u;
  *(_OWORD *)(v26 + 156) = 0u;
  *(_DWORD *)(v26 + 172) = 0;
  *(_QWORD *)(v26 + 176) = v5;
  *(_QWORD *)(v26 + 184) = 0;
  *(_DWORD *)(v26 + 200) = 0;
  CLMicroLocationProto::Model::default_instance_ = v26;
  v27 = operator new();
  *(_QWORD *)v27 = &off_2511D72F8;
  *(_WORD *)(v27 + 8) = 0;
  *(_QWORD *)(v27 + 12) = 0;
  CLMicroLocationProto::BundleIdFeatures::default_instance_ = v27;
  v28 = (_QWORD *)operator new();
  *v28 = &off_2511D7370;
  v28[1] = 0x100000001;
  v28[2] = v5;
  v28[3] = v5;
  v28[4] = v5;
  v28[5] = 0;
  CLMicroLocationProto::ReceivedEventAction::default_instance_ = (uint64_t)v28;
  v29 = (_QWORD *)operator new();
  *v29 = &off_2511D73E8;
  v29[1] = 0x10000000DLL;
  v29[2] = v5;
  v29[3] = v5;
  v29[4] = v5;
  v29[5] = 0;
  CLMicroLocationProto::RecordingRequest::default_instance_ = (uint64_t)v29;
  v30 = operator new();
  *(_QWORD *)(v30 + 32) = 2;
  *(_QWORD *)v30 = &off_2511D7460;
  *(_QWORD *)(v30 + 8) = v5;
  *(_QWORD *)(v30 + 16) = 0;
  *(_QWORD *)(v30 + 24) = v5;
  *(_DWORD *)(v30 + 40) = 0;
  CLMicroLocationProto::AppLaunch::default_instance_ = v30;
  v31 = operator new();
  *(_QWORD *)(v31 + 16) = 4;
  *(_QWORD *)v31 = &off_2511D74D8;
  *(_QWORD *)(v31 + 8) = v5;
  *(_DWORD *)(v31 + 24) = 0;
  CLMicroLocationProto::BacklightOn::default_instance_ = v31;
  v32 = operator new();
  *(_QWORD *)v32 = &off_2511D7550;
  *(_QWORD *)(v32 + 8) = 5;
  *(_DWORD *)(v32 + 16) = 0;
  CLMicroLocationProto::BatteryChargerConnected::default_instance_ = v32;
  v33 = operator new();
  *(_QWORD *)(v33 + 32) = 14;
  *(_QWORD *)v33 = &off_2511D75C8;
  *(_QWORD *)(v33 + 8) = v5;
  *(_QWORD *)(v33 + 16) = v5;
  *(_QWORD *)(v33 + 24) = v5;
  *(_DWORD *)(v33 + 40) = 0;
  CLMicroLocationProto::TruthLabelDonation::default_instance_ = v33;
  v34 = operator new();
  *(_QWORD *)v34 = &off_2511D7640;
  *(_QWORD *)(v34 + 8) = 7;
  *(_DWORD *)(v34 + 16) = 0;
  CLMicroLocationProto::ForcedRecording::default_instance_ = v34;
  v35 = operator new();
  *(_DWORD *)(v35 + 64) = 9;
  *(_QWORD *)v35 = &off_2511D76B8;
  *(_QWORD *)(v35 + 8) = v5;
  *(_QWORD *)(v35 + 16) = v5;
  *(_QWORD *)(v35 + 24) = v5;
  *(_QWORD *)(v35 + 32) = v5;
  *(_QWORD *)(v35 + 40) = v5;
  *(_QWORD *)(v35 + 48) = v5;
  *(_QWORD *)(v35 + 56) = v5;
  *(_QWORD *)(v35 + 72) = v5;
  *(_QWORD *)(v35 + 80) = v5;
  *(_WORD *)(v35 + 68) = 0;
  *(_QWORD *)(v35 + 88) = v5;
  *(_QWORD *)(v35 + 96) = v5;
  *(_QWORD *)(v35 + 104) = v5;
  *(_QWORD *)(v35 + 112) = 0;
  CLMicroLocationProto::HomeKitAccessory::default_instance_ = v35;
  v36 = operator new();
  *(_DWORD *)(v36 + 48) = 10;
  *(_QWORD *)v36 = &off_2511D7730;
  *(_QWORD *)(v36 + 8) = v5;
  *(_QWORD *)(v36 + 16) = v5;
  *(_QWORD *)(v36 + 24) = v5;
  *(_QWORD *)(v36 + 32) = v5;
  *(_QWORD *)(v36 + 40) = v5;
  *(_QWORD *)(v36 + 56) = v5;
  *(_QWORD *)(v36 + 64) = v5;
  *(_WORD *)(v36 + 52) = 0;
  *(_QWORD *)(v36 + 72) = v5;
  *(_QWORD *)(v36 + 80) = 0;
  CLMicroLocationProto::HomeKitScene::default_instance_ = v36;
  v37 = (_QWORD *)operator new();
  *v37 = &off_2511D77A8;
  v37[1] = 0;
  v37[2] = v5;
  v37[3] = 0;
  CLMicroLocationProto::NowPlayingOutputDevice::default_instance_ = (uint64_t)v37;
  v38 = operator new();
  *(_QWORD *)(v38 + 32) = 0;
  *(_QWORD *)(v38 + 40) = 0;
  *(_DWORD *)(v38 + 48) = 0;
  *(_QWORD *)v38 = &off_2511D7820;
  *(_QWORD *)(v38 + 8) = v5;
  *(_QWORD *)(v38 + 16) = 12;
  *(_QWORD *)(v38 + 24) = v5;
  *(_QWORD *)(v38 + 56) = 0;
  *(_QWORD *)(v38 + 64) = 0;
  CLMicroLocationProto::NowPlaying::default_instance_ = v38;
  v39 = operator new();
  *(_QWORD *)v39 = &off_2511D7898;
  *(_QWORD *)(v39 + 8) = 31;
  *(_DWORD *)(v39 + 16) = 0;
  CLMicroLocationProto::LearnModel::default_instance_ = v39;
  v40 = operator new();
  *(_QWORD *)v40 = &off_2511D7910;
  *(_QWORD *)(v40 + 8) = 32;
  *(_DWORD *)(v40 + 16) = 0;
  CLMicroLocationProto::LearnCompleted::default_instance_ = v40;
  v41 = operator new();
  *(_QWORD *)v41 = &off_2511D7988;
  *(_QWORD *)(v41 + 8) = 33;
  *(_DWORD *)(v41 + 16) = 0;
  CLMicroLocationProto::SensorsScanComplete::default_instance_ = v41;
  v42 = operator new();
  *(_QWORD *)v42 = &off_2511D7A00;
  *(_QWORD *)(v42 + 8) = 34;
  *(_DWORD *)(v42 + 16) = 0;
  CLMicroLocationProto::StartSpectating::default_instance_ = v42;
  v43 = operator new();
  *(_QWORD *)v43 = &off_2511D7A78;
  *(_QWORD *)(v43 + 8) = 35;
  *(_DWORD *)(v43 + 16) = 0;
  CLMicroLocationProto::StopSpectating::default_instance_ = v43;
  v44 = operator new();
  *(_QWORD *)(v44 + 24) = 36;
  *(_QWORD *)v44 = &off_2511D7AF0;
  *(_QWORD *)(v44 + 8) = v5;
  *(_QWORD *)(v44 + 16) = 0;
  *(_DWORD *)(v44 + 32) = 0;
  CLMicroLocationProto::ServiceCreate::default_instance_ = v44;
  v45 = operator new();
  *(_QWORD *)(v45 + 24) = 37;
  *(_QWORD *)v45 = &off_2511D7B68;
  *(_QWORD *)(v45 + 8) = v5;
  *(_QWORD *)(v45 + 16) = v5;
  *(_DWORD *)(v45 + 32) = 0;
  CLMicroLocationProto::ServiceDelete::default_instance_ = v45;
  v46 = operator new();
  *(_QWORD *)(v46 + 24) = 38;
  *(_QWORD *)v46 = &off_2511D7BE0;
  *(_QWORD *)(v46 + 8) = v5;
  *(_QWORD *)(v46 + 16) = v5;
  *(_DWORD *)(v46 + 32) = 0;
  CLMicroLocationProto::ServiceConnect::default_instance_ = v46;
  v47 = operator new();
  *(_QWORD *)(v47 + 24) = 39;
  *(_QWORD *)v47 = &off_2511D7C58;
  *(_QWORD *)(v47 + 8) = v5;
  *(_QWORD *)(v47 + 16) = v5;
  *(_DWORD *)(v47 + 32) = 0;
  CLMicroLocationProto::ServiceDisconnect::default_instance_ = v47;
  v48 = operator new();
  *(_DWORD *)(v48 + 16) = 40;
  *(_QWORD *)v48 = &off_2511D7CD0;
  *(_QWORD *)(v48 + 8) = v5;
  *(_QWORD *)(v48 + 24) = v5;
  *(_BYTE *)(v48 + 20) = 0;
  *(_QWORD *)(v48 + 32) = 0;
  CLMicroLocationProto::ServiceStartUpdating::default_instance_ = v48;
  v49 = operator new();
  *(_QWORD *)(v49 + 24) = 41;
  *(_QWORD *)v49 = &off_2511D7D48;
  *(_QWORD *)(v49 + 8) = v5;
  *(_QWORD *)(v49 + 16) = v5;
  *(_DWORD *)(v49 + 32) = 0;
  CLMicroLocationProto::ServiceStopUpdating::default_instance_ = v49;
  v50 = operator new();
  *(_QWORD *)(v50 + 40) = 42;
  *(_QWORD *)v50 = &off_2511D7DC0;
  *(_QWORD *)(v50 + 8) = v5;
  *(_QWORD *)(v50 + 16) = v5;
  *(_QWORD *)(v50 + 24) = v5;
  *(_QWORD *)(v50 + 32) = v5;
  *(_DWORD *)(v50 + 48) = 0;
  CLMicroLocationProto::RequestObservation::default_instance_ = v50;
  v51 = operator new();
  *(_QWORD *)(v51 + 32) = 43;
  *(_QWORD *)v51 = &off_2511D7E38;
  *(_QWORD *)(v51 + 8) = v5;
  *(_QWORD *)(v51 + 16) = v5;
  *(_QWORD *)(v51 + 24) = v5;
  *(_DWORD *)(v51 + 40) = 0;
  CLMicroLocationProto::RequestPrediction::default_instance_ = v51;
  v52 = operator new();
  *(_QWORD *)(v52 + 16) = 44;
  *(_QWORD *)v52 = &off_2511D7EB0;
  *(_QWORD *)(v52 + 8) = v5;
  *(_DWORD *)(v52 + 24) = 0;
  CLMicroLocationProto::MiloInit::default_instance_ = v52;
  v53 = operator new();
  *(_QWORD *)v53 = &off_2511D7F28;
  *(_QWORD *)(v53 + 8) = v5;
  *(_QWORD *)(v53 + 16) = 45;
  *(_QWORD *)(v53 + 24) = v5;
  *(_OWORD *)(v53 + 32) = 0u;
  CLMicroLocationProto::MotionEvent::default_instance_ = v53;
  v54 = operator new();
  *(_QWORD *)(v54 + 16) = 46;
  *(_QWORD *)v54 = &off_2511D7FA0;
  *(_QWORD *)(v54 + 8) = v5;
  *(_DWORD *)(v54 + 24) = 0;
  CLMicroLocationProto::LegacyThrottle::default_instance_ = v54;
  v55 = operator new();
  *(_QWORD *)v55 = &off_2511D8018;
  *(_QWORD *)(v55 + 8) = v5;
  *(_QWORD *)(v55 + 16) = v5;
  *(_QWORD *)(v55 + 32) = v5;
  *(_QWORD *)(v55 + 24) = 0x10000002FLL;
  *(_BYTE *)(v55 + 40) = 0;
  *(_QWORD *)(v55 + 44) = 0;
  CLMicroLocationProto::RetrievedLoi::default_instance_ = v55;
  v56 = operator new();
  *(_QWORD *)v56 = &off_2511D8090;
  *(_OWORD *)(v56 + 24) = 0u;
  *(_OWORD *)(v56 + 40) = 0u;
  *(_OWORD *)(v56 + 56) = 0u;
  *(_OWORD *)(v56 + 72) = 0u;
  *(_OWORD *)(v56 + 88) = 0u;
  *(_OWORD *)(v56 + 104) = 0u;
  *(_OWORD *)(v56 + 120) = 0u;
  *(_OWORD *)(v56 + 136) = 0u;
  *(_OWORD *)(v56 + 152) = 0u;
  *(_OWORD *)(v56 + 168) = 0u;
  *(_OWORD *)(v56 + 184) = 0u;
  *(_OWORD *)(v56 + 200) = 0u;
  *(_OWORD *)(v56 + 216) = 0u;
  *(_OWORD *)(v56 + 232) = 0u;
  *(_OWORD *)(v56 + 248) = 0u;
  *(_DWORD *)(v56 + 296) = 0;
  CLMicroLocationProto::ReceivedEvent::default_instance_ = v56;
  *(_OWORD *)(v56 + 8) = 0u;
  v56 += 8;
  *(_OWORD *)(v56 + 256) = 0u;
  *(_OWORD *)(v56 + 272) = 0u;
  v57 = operator new();
  *(_QWORD *)v57 = &off_2511D8108;
  *(_QWORD *)(v57 + 8) = 0;
  *(_QWORD *)(v57 + 16) = 0;
  *(_DWORD *)(v57 + 24) = 0;
  CLMicroLocationProto::AssociatedAccessPointInfo::default_instance_ = v57;
  v58 = operator new();
  *(_QWORD *)v58 = &off_2511D8180;
  *(_DWORD *)(v58 + 72) = 1;
  *(_WORD *)(v58 + 76) = 0;
  *(_QWORD *)(v58 + 136) = 0;
  *(_OWORD *)(v58 + 8) = 0u;
  *(_OWORD *)(v58 + 24) = 0u;
  *(_OWORD *)(v58 + 40) = 0u;
  *(_OWORD *)(v58 + 56) = 0u;
  *(_QWORD *)(v58 + 80) = 0;
  *(_QWORD *)(v58 + 88) = 0;
  *(_QWORD *)(v58 + 96) = 0;
  *(_QWORD *)(v58 + 104) = 0;
  *(_QWORD *)(v58 + 112) = 0;
  *(_QWORD *)(v58 + 120) = 0;
  *(_QWORD *)(v58 + 128) = 0;
  CLMicroLocationProto::RecordingEvent::default_instance_ = v58;
  v59 = operator new();
  *(_DWORD *)(v59 + 24) = 48;
  *(_QWORD *)v59 = &off_2511D81F8;
  *(_QWORD *)(v59 + 8) = 0;
  *(_WORD *)(v59 + 28) = 0;
  *(_QWORD *)(v59 + 16) = v5;
  *(_QWORD *)(v59 + 32) = v5;
  *(_QWORD *)(v59 + 40) = v5;
  *(_QWORD *)(v59 + 48) = v5;
  *(_QWORD *)(v59 + 56) = 0;
  *(_QWORD *)(v59 + 64) = v5;
  *(_OWORD *)(v59 + 72) = 0u;
  CLMicroLocationProto::TriggerEvent::default_instance_ = v59;
  v60 = operator new();
  *(_QWORD *)v60 = &off_2511D8270;
  *(_OWORD *)(v60 + 8) = xmmword_241BB7110;
  *(_DWORD *)(v60 + 24) = 0;
  CLMicroLocationProto::LegacyClientStatusUpdate::default_instance_ = v60;
  v61 = operator new();
  *(_QWORD *)v61 = &off_2511D82E8;
  *(_DWORD *)(v61 + 8) = 50;
  *(_BYTE *)(v61 + 12) = 0;
  *(_QWORD *)(v61 + 16) = 0;
  CLMicroLocationProto::SpectatingMotionUpdate::default_instance_ = v61;
  v62 = operator new();
  *(_QWORD *)v62 = &off_2511D8360;
  *(_DWORD *)(v62 + 8) = 51;
  *(_QWORD *)(v62 + 20) = 0;
  *(_QWORD *)(v62 + 12) = 0;
  CLMicroLocationProto::EnabledStateUpdate::default_instance_ = v62;
  v63 = operator new();
  *(_QWORD *)v63 = &off_2511D83D8;
  *(_DWORD *)(v63 + 8) = 52;
  *(_BYTE *)(v63 + 12) = 0;
  *(_QWORD *)(v63 + 16) = 0;
  CLMicroLocationProto::ScreenStateUpdate::default_instance_ = v63;
  v64 = operator new();
  *(_QWORD *)v64 = &off_2511D8450;
  *(_QWORD *)(v64 + 8) = 53;
  *(_DWORD *)(v64 + 16) = 0;
  CLMicroLocationProto::CloudBackupExport::default_instance_ = v64;
  v65 = operator new();
  *(_QWORD *)v65 = &off_2511D84C8;
  *(_QWORD *)(v65 + 8) = 54;
  *(_DWORD *)(v65 + 16) = 0;
  CLMicroLocationProto::CloudBackupImport::default_instance_ = v65;
  v66 = operator new();
  *(_QWORD *)v66 = &off_2511D8540;
  *(_QWORD *)(v66 + 8) = 55;
  *(_DWORD *)(v66 + 16) = 0;
  CLMicroLocationProto::DataMigration::default_instance_ = v66;
  v67 = operator new();
  *(_QWORD *)v67 = &off_2511D85B8;
  *(_QWORD *)(v67 + 8) = 0;
  *(_QWORD *)(v67 + 16) = 0;
  *(_DWORD *)(v67 + 24) = 0;
  CLMicroLocationProto::ChannelAndCount::default_instance_ = v67;
  v68 = operator new();
  *(_QWORD *)v68 = &off_2511D8630;
  *(_QWORD *)(v68 + 8) = 0;
  *(_QWORD *)(v68 + 16) = 0;
  *(_DWORD *)(v68 + 24) = 0;
  *(_QWORD *)(v68 + 32) = 0;
  *(_DWORD *)(v68 + 40) = 0;
  CLMicroLocationProto::WifiHistogram::default_instance_ = v68;
  v69 = operator new();
  *(_QWORD *)(v69 + 16) = 1;
  *(_QWORD *)v69 = &off_2511D86A8;
  *(_QWORD *)(v69 + 8) = 0;
  *(_DWORD *)(v69 + 24) = 0;
  CLMicroLocationProto::AnchorAppearanceConfiguration::default_instance_ = v69;
  v70 = operator new();
  *(_QWORD *)(v70 + 24) = 2;
  *(_QWORD *)v70 = &off_2511D8720;
  *(_QWORD *)(v70 + 8) = 0;
  *(_QWORD *)(v70 + 16) = v5;
  *(_DWORD *)(v70 + 32) = 0;
  CLMicroLocationProto::AnchorValueStatisticsConfiguration::default_instance_ = v70;
  v71 = operator new();
  *(_QWORD *)v71 = &off_2511D8798;
  *(_OWORD *)(v71 + 8) = 0u;
  *(_OWORD *)(v71 + 24) = 0u;
  *(_OWORD *)(v71 + 36) = 0u;
  CLMicroLocationProto::Configuration::default_instance_ = v71;
  v72 = (_QWORD *)operator new();
  *v72 = &off_2511D8810;
  v72[1] = v5;
  v72[2] = v5;
  v72[3] = 0;
  CLMicroLocationProto::RapportDevice::default_instance_ = (uint64_t)v72;
  v73 = CLMicroLocationProto::UwbRange::default_instance_;
  *(_QWORD *)(CLMicroLocationProto::UwbRange::default_instance_ + 24) = CLMicroLocationProto::Direction::default_instance_;
  v74 = (_QWORD *)CLMicroLocationProto::Measurement::default_instance_;
  v75 = CLMicroLocationProto::WiFiRange::default_instance_;
  *(_QWORD *)(CLMicroLocationProto::Measurement::default_instance_ + 16) = CLMicroLocationProto::WiFiRssi::default_instance_;
  v74[3] = v75;
  v76 = CLMicroLocationProto::HomeKitBluetoothRssi::default_instance_;
  v74[4] = CLMicroLocationProto::ATVAirplayBluetoothRssi::default_instance_;
  v74[5] = v76;
  v74[6] = CLMicroLocationProto::BleLeechedBeacons::default_instance_;
  v74[7] = v73;
  *(_QWORD *)(CLMicroLocationProto::FingerprintMeasurement::default_instance_ + 24) = CLMicroLocationProto::DeviceId::default_instance_;
  v77 = CLMicroLocationProto::BlueAtlasData::default_instance_;
  *(_QWORD *)(CLMicroLocationProto::BlueAtlasData::default_instance_ + 48) = CLMicroLocationProto::AssociatedAccessPointInfo::default_instance_;
  v78 = CLMicroLocationProto::Model::default_instance_;
  v79 = CLMicroLocationProto::LocationSimilarityListData::default_instance_;
  *(_QWORD *)(CLMicroLocationProto::Model::default_instance_ + 112) = CLMicroLocationProto::anchorAppearancesVector::default_instance_;
  *(_QWORD *)(v78 + 120) = v79;
  *(_QWORD *)(v78 + 184) = v77;
  v80 = CLMicroLocationProto::BundleIdFeatures::default_instance_;
  *(_QWORD *)(CLMicroLocationProto::AppLaunch::default_instance_ + 16) = CLMicroLocationProto::BundleIdFeatures::default_instance_;
  *(_QWORD *)(CLMicroLocationProto::NowPlaying::default_instance_ + 56) = v80;
  CLMicroLocationProto::ReceivedEvent::InitAsDefaultInstance((_QWORD *)CLMicroLocationProto::ReceivedEvent::default_instance_);
  CLMicroLocationProto::RecordingEvent::InitAsDefaultInstance((_QWORD *)CLMicroLocationProto::RecordingEvent::default_instance_);
  v81 = CLMicroLocationProto::AnchorAppearanceConfiguration::default_instance_;
  *(_QWORD *)(CLMicroLocationProto::AnchorAppearanceConfiguration::default_instance_ + 8) = CLMicroLocationProto::anchorAppearancesVector::default_instance_;
  v82 = CLMicroLocationProto::AnchorValueStatisticsConfiguration::default_instance_;
  *(_QWORD *)(CLMicroLocationProto::AnchorValueStatisticsConfiguration::default_instance_ + 8) = CLMicroLocationProto::ClusterAnchorValueStatisticsVector::default_instance_;
  v83 = CLMicroLocationProto::Configuration::default_instance_;
  *(_QWORD *)(CLMicroLocationProto::Configuration::default_instance_ + 16) = CLMicroLocationProto::WifiHistogram::default_instance_;
  *(_QWORD *)(v83 + 24) = v81;
  *(_QWORD *)(v83 + 32) = v82;
  return wireless_diagnostics::google::protobuf::internal::OnShutdown((wireless_diagnostics::google::protobuf::internal *)CLMicroLocationProto::protobuf_ShutdownFile_microlocation_2eproto, v84);
}

uint64_t CLMicroLocationProto::BleLeechedBeacons::BleLeechedBeacons(uint64_t this)
{
  uint64_t v1;

  *(_QWORD *)this = &off_2511D68A8;
  *(_QWORD *)(this + 8) = 0;
  v1 = MEMORY[0x24BEDD958];
  *(_QWORD *)(this + 16) = 5;
  *(_QWORD *)(this + 24) = v1;
  *(_QWORD *)(this + 48) = v1;
  *(_QWORD *)(this + 56) = 0;
  *(_QWORD *)(this + 32) = 0;
  *(_QWORD *)(this + 40) = v1;
  *(_DWORD *)(this + 64) = 0;
  return this;
}

uint64_t CLMicroLocationProto::WiFiRssi::WiFiRssi(uint64_t this)
{
  *(_DWORD *)(this + 16) = 1;
  *(_QWORD *)this = &off_2511D6920;
  *(_QWORD *)(this + 8) = 0;
  *(_DWORD *)(this + 36) = 0;
  *(_DWORD *)(this + 40) = 0;
  *(_QWORD *)(this + 28) = 0;
  *(_QWORD *)(this + 20) = 0;
  return this;
}

uint64_t CLMicroLocationProto::Direction::Direction(uint64_t this)
{
  *(_QWORD *)(this + 8) = 0;
  *(_QWORD *)(this + 16) = 0;
  *(_QWORD *)this = &off_2511D6998;
  *(_DWORD *)(this + 24) = 0;
  return this;
}

uint64_t CLMicroLocationProto::UwbRange::UwbRange(uint64_t this)
{
  *(_QWORD *)this = &off_2511D6A10;
  *(_QWORD *)(this + 8) = 0;
  *(_QWORD *)(this + 16) = 6;
  *(_QWORD *)(this + 24) = 0;
  *(_QWORD *)(this + 32) = MEMORY[0x24BEDD958];
  *(_QWORD *)(this + 40) = 1;
  *(_DWORD *)(this + 56) = 0;
  *(_QWORD *)(this + 48) = 0;
  return this;
}

double CLMicroLocationProto::Measurement::Measurement(CLMicroLocationProto::Measurement *this)
{
  double result;

  *(_QWORD *)this = &off_2511D6BF0;
  *((_QWORD *)this + 8) = 1;
  *((_DWORD *)this + 18) = 0;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *((_QWORD *)this + 7) = 0;
  return result;
}

_QWORD *CLMicroLocationProto::DeviceId::DeviceId(_QWORD *this)
{
  *this = &off_2511D6C68;
  this[1] = 0;
  this[2] = MEMORY[0x24BEDD958];
  this[3] = 0;
  return this;
}

_QWORD *CLMicroLocationProto::FingerprintMeasurement::FingerprintMeasurement(_QWORD *this)
{
  *this = &off_2511D6CE0;
  this[1] = 0;
  this[2] = 1;
  this[3] = 0;
  this[4] = 0;
  return this;
}

uint64_t CLMicroLocationProto::Fingerprint::Fingerprint(uint64_t this)
{
  uint64_t v1;

  *(_QWORD *)(this + 8) = 0;
  *(_QWORD *)(this + 16) = 0;
  *(_QWORD *)this = &off_2511D6D58;
  *(_DWORD *)(this + 24) = 0;
  *(_QWORD *)(this + 80) = 0;
  *(_DWORD *)(this + 88) = 0;
  *(_QWORD *)(this + 32) = 0;
  *(_QWORD *)(this + 40) = 0;
  v1 = MEMORY[0x24BEDD958];
  *(_QWORD *)(this + 48) = 0;
  *(_QWORD *)(this + 56) = v1;
  *(_QWORD *)(this + 64) = v1;
  *(_QWORD *)(this + 72) = 0;
  *(_WORD *)(this + 96) = 0;
  *(_DWORD *)(this + 100) = 0;
  *(_DWORD *)(this + 104) = 0;
  return this;
}

uint64_t CLMicroLocationProto::ClusterRecordings::ClusterRecordings(uint64_t this)
{
  uint64_t v1;

  *(_QWORD *)(this + 16) = 0;
  *(_QWORD *)(this + 24) = 0;
  v1 = MEMORY[0x24BEDD958];
  *(_DWORD *)(this + 32) = 0;
  *(_QWORD *)this = &off_2511D6DD0;
  *(_QWORD *)(this + 8) = v1;
  *(_QWORD *)(this + 40) = 0;
  return this;
}

uint64_t CLMicroLocationProto::AnchorAppearance::AnchorAppearance(uint64_t this)
{
  uint64_t v1;

  *(_QWORD *)(this + 32) = 0;
  *(_QWORD *)this = &off_2511D6EC0;
  *(_QWORD *)(this + 8) = 0;
  v1 = MEMORY[0x24BEDD958];
  *(_QWORD *)(this + 16) = 0;
  *(_QWORD *)(this + 24) = v1;
  *(_DWORD *)(this + 40) = 0;
  return this;
}

uint64_t CLMicroLocationProto::anchorAppearancesVector::anchorAppearancesVector(uint64_t this)
{
  *(_QWORD *)(this + 8) = 0;
  *(_QWORD *)(this + 16) = 0;
  *(_QWORD *)this = &off_2511D6F38;
  *(_DWORD *)(this + 24) = 0;
  *(_QWORD *)(this + 32) = 0;
  return this;
}

_QWORD *CLMicroLocationProto::AnchorValueStatistics::AnchorValueStatistics(_QWORD *this)
{
  uint64_t v1;

  v1 = MEMORY[0x24BEDD958];
  *this = &off_2511D6FB0;
  this[1] = 0;
  this[2] = 0;
  this[3] = v1;
  this[4] = 0;
  return this;
}

uint64_t CLMicroLocationProto::ClusterAnchorValueStatistics::ClusterAnchorValueStatistics(uint64_t this)
{
  *(_QWORD *)(this + 8) = 0;
  *(_QWORD *)(this + 16) = 0;
  *(_QWORD *)this = &off_2511D7028;
  *(_DWORD *)(this + 24) = 0;
  *(_QWORD *)(this + 32) = MEMORY[0x24BEDD958];
  *(_QWORD *)(this + 40) = 0;
  return this;
}

uint64_t CLMicroLocationProto::ClusterAnchorValueStatisticsVector::ClusterAnchorValueStatisticsVector(uint64_t this)
{
  *(_QWORD *)(this + 8) = 0;
  *(_QWORD *)(this + 16) = 0;
  *(_QWORD *)this = &off_2511D70A0;
  *(_DWORD *)(this + 24) = 0;
  *(_QWORD *)(this + 32) = 0;
  return this;
}

_QWORD *CLMicroLocationProto::LocationSimilarityListElement::LocationSimilarityListElement(_QWORD *this)
{
  uint64_t v1;

  this[3] = 0;
  this[4] = 0;
  this[2] = 0;
  v1 = MEMORY[0x24BEDD958];
  *this = &off_2511D7118;
  this[1] = v1;
  return this;
}

uint64_t CLMicroLocationProto::LocationSimilarityListData::LocationSimilarityListData(uint64_t this)
{
  *(_QWORD *)(this + 8) = 0;
  *(_QWORD *)(this + 16) = 0;
  *(_QWORD *)this = &off_2511D7190;
  *(_DWORD *)(this + 24) = 0;
  *(_QWORD *)(this + 32) = 0;
  *(_QWORD *)(this + 40) = 0;
  *(_DWORD *)(this + 48) = 0;
  *(_QWORD *)(this + 64) = 0;
  *(_QWORD *)(this + 72) = 0;
  *(_QWORD *)(this + 56) = 0;
  return this;
}

double CLMicroLocationProto::BlueAtlasData::BlueAtlasData(CLMicroLocationProto::BlueAtlasData *this)
{
  double result;

  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *(_QWORD *)this = &off_2511D7208;
  *((_DWORD *)this + 6) = 0;
  result = 0.0;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  return result;
}

double CLMicroLocationProto::Model::Model(CLMicroLocationProto::Model *this)
{
  double result;

  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *(_QWORD *)this = &off_2511D7280;
  *((_DWORD *)this + 6) = 0;
  *((_QWORD *)this + 10) = 0;
  *((_QWORD *)this + 11) = 0;
  *((_DWORD *)this + 24) = 0;
  *((_BYTE *)this + 104) = 0;
  *((_QWORD *)this + 24) = 0;
  result = 0.0;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *(_OWORD *)((char *)this + 60) = 0u;
  *(_OWORD *)((char *)this + 108) = 0u;
  *(_OWORD *)((char *)this + 124) = 0u;
  *(_OWORD *)((char *)this + 140) = 0u;
  *(_OWORD *)((char *)this + 156) = 0u;
  *((_DWORD *)this + 43) = 0;
  *((_QWORD *)this + 22) = MEMORY[0x24BEDD958];
  *((_QWORD *)this + 23) = 0;
  *((_DWORD *)this + 50) = 0;
  return result;
}

double CLMicroLocationProto::ReceivedEventAction::ReceivedEventAction(CLMicroLocationProto::ReceivedEventAction *this)
{
  double result;
  uint64_t v2;

  *(_QWORD *)this = &off_2511D7370;
  *(_QWORD *)&result = 0x100000001;
  *((_QWORD *)this + 1) = 0x100000001;
  v2 = MEMORY[0x24BEDD958];
  *((_QWORD *)this + 2) = MEMORY[0x24BEDD958];
  *((_QWORD *)this + 3) = v2;
  *((_QWORD *)this + 4) = v2;
  *((_QWORD *)this + 5) = 0;
  return result;
}

double CLMicroLocationProto::RecordingRequest::RecordingRequest(CLMicroLocationProto::RecordingRequest *this)
{
  double result;
  uint64_t v2;

  *(_QWORD *)this = &off_2511D73E8;
  *(_QWORD *)&result = 0x10000000DLL;
  *((_QWORD *)this + 1) = 0x10000000DLL;
  v2 = MEMORY[0x24BEDD958];
  *((_QWORD *)this + 2) = MEMORY[0x24BEDD958];
  *((_QWORD *)this + 3) = v2;
  *((_QWORD *)this + 4) = v2;
  *((_QWORD *)this + 5) = 0;
  return result;
}

double CLMicroLocationProto::BacklightOn::BacklightOn(CLMicroLocationProto::BacklightOn *this)
{
  double result;
  uint64_t v2;

  *(_QWORD *)&result = 4;
  *((_QWORD *)this + 2) = 4;
  v2 = MEMORY[0x24BEDD958];
  *(_QWORD *)this = &off_2511D74D8;
  *((_QWORD *)this + 1) = v2;
  *((_DWORD *)this + 6) = 0;
  return result;
}

double CLMicroLocationProto::BatteryChargerConnected::BatteryChargerConnected(CLMicroLocationProto::BatteryChargerConnected *this)
{
  double result;

  *(_QWORD *)this = &off_2511D7550;
  *(_QWORD *)&result = 5;
  *((_QWORD *)this + 1) = 5;
  *((_DWORD *)this + 4) = 0;
  return result;
}

double CLMicroLocationProto::TruthLabelDonation::TruthLabelDonation(CLMicroLocationProto::TruthLabelDonation *this)
{
  double result;
  uint64_t v2;

  *(_QWORD *)&result = 14;
  *((_QWORD *)this + 4) = 14;
  v2 = MEMORY[0x24BEDD958];
  *(_QWORD *)this = &off_2511D75C8;
  *((_QWORD *)this + 1) = v2;
  *((_QWORD *)this + 2) = v2;
  *((_QWORD *)this + 3) = v2;
  *((_DWORD *)this + 10) = 0;
  return result;
}

double CLMicroLocationProto::ForcedRecording::ForcedRecording(CLMicroLocationProto::ForcedRecording *this)
{
  double result;

  *(_QWORD *)this = &off_2511D7640;
  *(_QWORD *)&result = 7;
  *((_QWORD *)this + 1) = 7;
  *((_DWORD *)this + 4) = 0;
  return result;
}

uint64_t CLMicroLocationProto::HomeKitAccessory::HomeKitAccessory(uint64_t this)
{
  uint64_t v1;

  v1 = MEMORY[0x24BEDD958];
  *(_DWORD *)(this + 64) = 9;
  *(_QWORD *)this = &off_2511D76B8;
  *(_QWORD *)(this + 8) = v1;
  *(_QWORD *)(this + 16) = v1;
  *(_QWORD *)(this + 24) = v1;
  *(_QWORD *)(this + 32) = v1;
  *(_QWORD *)(this + 40) = v1;
  *(_QWORD *)(this + 48) = v1;
  *(_QWORD *)(this + 56) = v1;
  *(_QWORD *)(this + 72) = v1;
  *(_QWORD *)(this + 80) = v1;
  *(_WORD *)(this + 68) = 0;
  *(_QWORD *)(this + 88) = v1;
  *(_QWORD *)(this + 96) = v1;
  *(_QWORD *)(this + 104) = v1;
  *(_QWORD *)(this + 112) = 0;
  return this;
}

uint64_t CLMicroLocationProto::HomeKitScene::HomeKitScene(uint64_t this)
{
  uint64_t v1;

  *(_DWORD *)(this + 48) = 10;
  v1 = MEMORY[0x24BEDD958];
  *(_QWORD *)this = &off_2511D7730;
  *(_QWORD *)(this + 8) = v1;
  *(_QWORD *)(this + 16) = v1;
  *(_QWORD *)(this + 24) = v1;
  *(_QWORD *)(this + 32) = v1;
  *(_QWORD *)(this + 40) = v1;
  *(_QWORD *)(this + 56) = v1;
  *(_QWORD *)(this + 64) = v1;
  *(_WORD *)(this + 52) = 0;
  *(_QWORD *)(this + 72) = v1;
  *(_QWORD *)(this + 80) = 0;
  return this;
}

double CLMicroLocationProto::LearnModel::LearnModel(CLMicroLocationProto::LearnModel *this)
{
  double result;

  *(_QWORD *)this = &off_2511D7898;
  *(_QWORD *)&result = 31;
  *((_QWORD *)this + 1) = 31;
  *((_DWORD *)this + 4) = 0;
  return result;
}

double CLMicroLocationProto::LearnCompleted::LearnCompleted(CLMicroLocationProto::LearnCompleted *this)
{
  double result;

  *(_QWORD *)this = &off_2511D7910;
  *(_QWORD *)&result = 32;
  *((_QWORD *)this + 1) = 32;
  *((_DWORD *)this + 4) = 0;
  return result;
}

double CLMicroLocationProto::SensorsScanComplete::SensorsScanComplete(CLMicroLocationProto::SensorsScanComplete *this)
{
  double result;

  *(_QWORD *)this = &off_2511D7988;
  *(_QWORD *)&result = 33;
  *((_QWORD *)this + 1) = 33;
  *((_DWORD *)this + 4) = 0;
  return result;
}

double CLMicroLocationProto::StartSpectating::StartSpectating(CLMicroLocationProto::StartSpectating *this)
{
  double result;

  *(_QWORD *)this = &off_2511D7A00;
  *(_QWORD *)&result = 34;
  *((_QWORD *)this + 1) = 34;
  *((_DWORD *)this + 4) = 0;
  return result;
}

double CLMicroLocationProto::StopSpectating::StopSpectating(CLMicroLocationProto::StopSpectating *this)
{
  double result;

  *(_QWORD *)this = &off_2511D7A78;
  *(_QWORD *)&result = 35;
  *((_QWORD *)this + 1) = 35;
  *((_DWORD *)this + 4) = 0;
  return result;
}

double CLMicroLocationProto::ServiceDelete::ServiceDelete(CLMicroLocationProto::ServiceDelete *this)
{
  double result;
  uint64_t v2;

  *(_QWORD *)&result = 37;
  v2 = MEMORY[0x24BEDD958];
  *((_QWORD *)this + 3) = 37;
  *(_QWORD *)this = &off_2511D7B68;
  *((_QWORD *)this + 1) = v2;
  *((_QWORD *)this + 2) = v2;
  *((_DWORD *)this + 8) = 0;
  return result;
}

double CLMicroLocationProto::ServiceConnect::ServiceConnect(CLMicroLocationProto::ServiceConnect *this)
{
  double result;
  uint64_t v2;

  *(_QWORD *)&result = 38;
  v2 = MEMORY[0x24BEDD958];
  *((_QWORD *)this + 3) = 38;
  *(_QWORD *)this = &off_2511D7BE0;
  *((_QWORD *)this + 1) = v2;
  *((_QWORD *)this + 2) = v2;
  *((_DWORD *)this + 8) = 0;
  return result;
}

double CLMicroLocationProto::ServiceDisconnect::ServiceDisconnect(CLMicroLocationProto::ServiceDisconnect *this)
{
  double result;
  uint64_t v2;

  *(_QWORD *)&result = 39;
  v2 = MEMORY[0x24BEDD958];
  *((_QWORD *)this + 3) = 39;
  *(_QWORD *)this = &off_2511D7C58;
  *((_QWORD *)this + 1) = v2;
  *((_QWORD *)this + 2) = v2;
  *((_DWORD *)this + 8) = 0;
  return result;
}

uint64_t CLMicroLocationProto::ServiceStartUpdating::ServiceStartUpdating(uint64_t this)
{
  uint64_t v1;

  *(_DWORD *)(this + 16) = 40;
  v1 = MEMORY[0x24BEDD958];
  *(_QWORD *)this = &off_2511D7CD0;
  *(_QWORD *)(this + 8) = v1;
  *(_QWORD *)(this + 24) = v1;
  *(_QWORD *)(this + 32) = 0;
  *(_BYTE *)(this + 20) = 0;
  return this;
}

double CLMicroLocationProto::ServiceStopUpdating::ServiceStopUpdating(CLMicroLocationProto::ServiceStopUpdating *this)
{
  double result;
  uint64_t v2;

  *(_QWORD *)&result = 41;
  v2 = MEMORY[0x24BEDD958];
  *((_QWORD *)this + 3) = 41;
  *(_QWORD *)this = &off_2511D7D48;
  *((_QWORD *)this + 1) = v2;
  *((_QWORD *)this + 2) = v2;
  *((_DWORD *)this + 8) = 0;
  return result;
}

double CLMicroLocationProto::RequestObservation::RequestObservation(CLMicroLocationProto::RequestObservation *this)
{
  double result;
  uint64_t v2;

  *(_QWORD *)&result = 42;
  *((_QWORD *)this + 5) = 42;
  v2 = MEMORY[0x24BEDD958];
  *(_QWORD *)this = &off_2511D7DC0;
  *((_QWORD *)this + 1) = v2;
  *((_QWORD *)this + 2) = v2;
  *((_QWORD *)this + 3) = v2;
  *((_QWORD *)this + 4) = v2;
  *((_DWORD *)this + 12) = 0;
  return result;
}

double CLMicroLocationProto::RequestPrediction::RequestPrediction(CLMicroLocationProto::RequestPrediction *this)
{
  double result;
  uint64_t v2;

  *(_QWORD *)&result = 43;
  *((_QWORD *)this + 4) = 43;
  v2 = MEMORY[0x24BEDD958];
  *(_QWORD *)this = &off_2511D7E38;
  *((_QWORD *)this + 1) = v2;
  *((_QWORD *)this + 2) = v2;
  *((_QWORD *)this + 3) = v2;
  *((_DWORD *)this + 10) = 0;
  return result;
}

double CLMicroLocationProto::MiloInit::MiloInit(CLMicroLocationProto::MiloInit *this)
{
  double result;
  uint64_t v2;

  *(_QWORD *)&result = 44;
  *((_QWORD *)this + 2) = 44;
  v2 = MEMORY[0x24BEDD958];
  *(_QWORD *)this = &off_2511D7EB0;
  *((_QWORD *)this + 1) = v2;
  *((_DWORD *)this + 6) = 0;
  return result;
}

double CLMicroLocationProto::MotionEvent::MotionEvent(CLMicroLocationProto::MotionEvent *this)
{
  uint64_t v1;
  double result;

  v1 = MEMORY[0x24BEDD958];
  *(_QWORD *)this = &off_2511D7F28;
  *((_QWORD *)this + 1) = v1;
  *(_QWORD *)&result = 45;
  *((_QWORD *)this + 2) = 45;
  *((_QWORD *)this + 3) = v1;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = 0;
  return result;
}

double CLMicroLocationProto::LegacyThrottle::LegacyThrottle(CLMicroLocationProto::LegacyThrottle *this)
{
  double result;
  uint64_t v2;

  *(_QWORD *)&result = 46;
  *((_QWORD *)this + 2) = 46;
  v2 = MEMORY[0x24BEDD958];
  *(_QWORD *)this = &off_2511D7FA0;
  *((_QWORD *)this + 1) = v2;
  *((_DWORD *)this + 6) = 0;
  return result;
}

double CLMicroLocationProto::RetrievedLoi::RetrievedLoi(CLMicroLocationProto::RetrievedLoi *this)
{
  uint64_t v1;
  double result;

  v1 = MEMORY[0x24BEDD958];
  *(_QWORD *)this = &off_2511D8018;
  *((_QWORD *)this + 1) = v1;
  *((_QWORD *)this + 2) = v1;
  *((_QWORD *)this + 4) = v1;
  *(_QWORD *)&result = 0x10000002FLL;
  *((_QWORD *)this + 3) = 0x10000002FLL;
  *((_BYTE *)this + 40) = 0;
  *((_DWORD *)this + 11) = 0;
  *((_DWORD *)this + 12) = 0;
  return result;
}

uint64_t CLMicroLocationProto::AssociatedAccessPointInfo::AssociatedAccessPointInfo(uint64_t this)
{
  *(_QWORD *)(this + 8) = 0;
  *(_QWORD *)(this + 16) = 0;
  *(_QWORD *)this = &off_2511D8108;
  *(_DWORD *)(this + 24) = 0;
  return this;
}

double CLMicroLocationProto::RecordingEvent::RecordingEvent(CLMicroLocationProto::RecordingEvent *this)
{
  double result;

  *(_QWORD *)this = &off_2511D8180;
  *((_DWORD *)this + 18) = 1;
  *((_WORD *)this + 38) = 0;
  *((_QWORD *)this + 16) = 0;
  *((_QWORD *)this + 17) = 0;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = 0;
  *((_QWORD *)this + 10) = 0;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 14) = 0;
  *((_QWORD *)this + 15) = 0;
  return result;
}

uint64_t CLMicroLocationProto::TriggerEvent::TriggerEvent(uint64_t this)
{
  uint64_t v1;

  *(_DWORD *)(this + 24) = 48;
  *(_QWORD *)this = &off_2511D81F8;
  *(_QWORD *)(this + 8) = 0;
  *(_WORD *)(this + 28) = 0;
  v1 = MEMORY[0x24BEDD958];
  *(_QWORD *)(this + 16) = MEMORY[0x24BEDD958];
  *(_QWORD *)(this + 32) = v1;
  *(_QWORD *)(this + 40) = v1;
  *(_QWORD *)(this + 48) = v1;
  *(_QWORD *)(this + 56) = 0;
  *(_QWORD *)(this + 64) = v1;
  *(_QWORD *)(this + 72) = 0;
  *(_QWORD *)(this + 80) = 0;
  return this;
}

double CLMicroLocationProto::LegacyClientStatusUpdate::LegacyClientStatusUpdate(CLMicroLocationProto::LegacyClientStatusUpdate *this)
{
  double result;

  *(_QWORD *)this = &off_2511D8270;
  *(_QWORD *)&result = 0x100000031;
  *(_OWORD *)((char *)this + 8) = xmmword_241BB7110;
  *((_DWORD *)this + 6) = 0;
  return result;
}

uint64_t CLMicroLocationProto::SpectatingMotionUpdate::SpectatingMotionUpdate(uint64_t this)
{
  *(_QWORD *)this = &off_2511D82E8;
  *(_DWORD *)(this + 8) = 50;
  *(_BYTE *)(this + 12) = 0;
  *(_QWORD *)(this + 16) = 0;
  return this;
}

uint64_t CLMicroLocationProto::EnabledStateUpdate::EnabledStateUpdate(uint64_t this)
{
  *(_QWORD *)this = &off_2511D8360;
  *(_DWORD *)(this + 8) = 51;
  *(_DWORD *)(this + 20) = 0;
  *(_DWORD *)(this + 24) = 0;
  *(_QWORD *)(this + 12) = 0;
  return this;
}

uint64_t CLMicroLocationProto::ScreenStateUpdate::ScreenStateUpdate(uint64_t this)
{
  *(_QWORD *)this = &off_2511D83D8;
  *(_DWORD *)(this + 8) = 52;
  *(_BYTE *)(this + 12) = 0;
  *(_QWORD *)(this + 16) = 0;
  return this;
}

double CLMicroLocationProto::CloudBackupExport::CloudBackupExport(CLMicroLocationProto::CloudBackupExport *this)
{
  double result;

  *(_QWORD *)this = &off_2511D8450;
  *(_QWORD *)&result = 53;
  *((_QWORD *)this + 1) = 53;
  *((_DWORD *)this + 4) = 0;
  return result;
}

double CLMicroLocationProto::CloudBackupImport::CloudBackupImport(CLMicroLocationProto::CloudBackupImport *this)
{
  double result;

  *(_QWORD *)this = &off_2511D84C8;
  *(_QWORD *)&result = 54;
  *((_QWORD *)this + 1) = 54;
  *((_DWORD *)this + 4) = 0;
  return result;
}

double CLMicroLocationProto::DataMigration::DataMigration(CLMicroLocationProto::DataMigration *this)
{
  double result;

  *(_QWORD *)this = &off_2511D8540;
  *(_QWORD *)&result = 55;
  *((_QWORD *)this + 1) = 55;
  *((_DWORD *)this + 4) = 0;
  return result;
}

uint64_t CLMicroLocationProto::ChannelAndCount::ChannelAndCount(uint64_t this)
{
  *(_QWORD *)(this + 8) = 0;
  *(_QWORD *)(this + 16) = 0;
  *(_QWORD *)this = &off_2511D85B8;
  *(_DWORD *)(this + 24) = 0;
  return this;
}

uint64_t CLMicroLocationProto::WifiHistogram::WifiHistogram(uint64_t this)
{
  *(_QWORD *)(this + 8) = 0;
  *(_QWORD *)(this + 16) = 0;
  *(_QWORD *)this = &off_2511D8630;
  *(_DWORD *)(this + 24) = 0;
  *(_QWORD *)(this + 32) = 0;
  *(_DWORD *)(this + 40) = 0;
  return this;
}

double CLMicroLocationProto::AnchorAppearanceConfiguration::AnchorAppearanceConfiguration(CLMicroLocationProto::AnchorAppearanceConfiguration *this)
{
  double result;

  *(_QWORD *)&result = 1;
  *((_QWORD *)this + 2) = 1;
  *(_QWORD *)this = &off_2511D86A8;
  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 6) = 0;
  return result;
}

double CLMicroLocationProto::AnchorValueStatisticsConfiguration::AnchorValueStatisticsConfiguration(CLMicroLocationProto::AnchorValueStatisticsConfiguration *this)
{
  double result;

  *(_QWORD *)&result = 2;
  *((_QWORD *)this + 3) = 2;
  *(_QWORD *)this = &off_2511D8720;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = MEMORY[0x24BEDD958];
  *((_DWORD *)this + 8) = 0;
  return result;
}

double CLMicroLocationProto::Configuration::Configuration(CLMicroLocationProto::Configuration *this)
{
  double result;

  *(_QWORD *)this = &off_2511D8798;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 36) = 0u;
  return result;
}

_QWORD *CLMicroLocationProto::RapportDevice::RapportDevice(_QWORD *this)
{
  uint64_t v1;

  v1 = MEMORY[0x24BEDD958];
  *this = &off_2511D8810;
  this[1] = v1;
  this[2] = v1;
  this[3] = 0;
  return this;
}

_QWORD *CLMicroLocationProto::ReceivedEvent::InitAsDefaultInstance(_QWORD *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v1 = CLMicroLocationProto::AppLaunch::default_instance_;
  this[1] = CLMicroLocationProto::ReceivedEventAction::default_instance_;
  this[2] = v1;
  v2 = CLMicroLocationProto::BatteryChargerConnected::default_instance_;
  this[3] = CLMicroLocationProto::BacklightOn::default_instance_;
  this[4] = v2;
  v3 = CLMicroLocationProto::HomeKitAccessory::default_instance_;
  this[5] = CLMicroLocationProto::ForcedRecording::default_instance_;
  this[6] = v3;
  v4 = CLMicroLocationProto::NowPlaying::default_instance_;
  this[7] = CLMicroLocationProto::HomeKitScene::default_instance_;
  this[8] = v4;
  v5 = CLMicroLocationProto::TruthLabelDonation::default_instance_;
  this[9] = CLMicroLocationProto::RecordingRequest::default_instance_;
  this[10] = v5;
  v6 = CLMicroLocationProto::LearnCompleted::default_instance_;
  this[11] = CLMicroLocationProto::LearnModel::default_instance_;
  this[12] = v6;
  v7 = CLMicroLocationProto::StartSpectating::default_instance_;
  this[13] = CLMicroLocationProto::SensorsScanComplete::default_instance_;
  this[14] = v7;
  v8 = CLMicroLocationProto::ServiceCreate::default_instance_;
  this[15] = CLMicroLocationProto::StopSpectating::default_instance_;
  this[16] = v8;
  v9 = CLMicroLocationProto::ServiceConnect::default_instance_;
  this[17] = CLMicroLocationProto::ServiceDelete::default_instance_;
  this[18] = v9;
  v10 = CLMicroLocationProto::ServiceStartUpdating::default_instance_;
  this[19] = CLMicroLocationProto::ServiceDisconnect::default_instance_;
  this[20] = v10;
  v11 = CLMicroLocationProto::RequestObservation::default_instance_;
  this[21] = CLMicroLocationProto::ServiceStopUpdating::default_instance_;
  this[22] = v11;
  v12 = CLMicroLocationProto::MiloInit::default_instance_;
  this[23] = CLMicroLocationProto::RequestPrediction::default_instance_;
  this[24] = v12;
  v13 = CLMicroLocationProto::LegacyThrottle::default_instance_;
  this[25] = CLMicroLocationProto::MotionEvent::default_instance_;
  this[26] = v13;
  v14 = CLMicroLocationProto::TriggerEvent::default_instance_;
  this[27] = CLMicroLocationProto::RetrievedLoi::default_instance_;
  this[28] = v14;
  v15 = CLMicroLocationProto::SpectatingMotionUpdate::default_instance_;
  this[29] = CLMicroLocationProto::LegacyClientStatusUpdate::default_instance_;
  this[30] = v15;
  v16 = CLMicroLocationProto::ScreenStateUpdate::default_instance_;
  this[31] = CLMicroLocationProto::EnabledStateUpdate::default_instance_;
  this[32] = v16;
  v17 = CLMicroLocationProto::CloudBackupImport::default_instance_;
  this[33] = CLMicroLocationProto::CloudBackupExport::default_instance_;
  this[34] = v17;
  this[35] = CLMicroLocationProto::DataMigration::default_instance_;
  return this;
}

_QWORD *CLMicroLocationProto::RecordingEvent::InitAsDefaultInstance(_QWORD *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = CLMicroLocationProto::AppLaunch::default_instance_;
  this[2] = CLMicroLocationProto::ReceivedEventAction::default_instance_;
  this[3] = v1;
  v2 = CLMicroLocationProto::BatteryChargerConnected::default_instance_;
  this[4] = CLMicroLocationProto::BacklightOn::default_instance_;
  this[5] = v2;
  v3 = CLMicroLocationProto::HomeKitAccessory::default_instance_;
  this[6] = CLMicroLocationProto::ForcedRecording::default_instance_;
  this[7] = v3;
  this[8] = CLMicroLocationProto::HomeKitScene::default_instance_;
  v4 = CLMicroLocationProto::RecordingRequest::default_instance_;
  this[10] = CLMicroLocationProto::NowPlaying::default_instance_;
  this[11] = v4;
  this[12] = CLMicroLocationProto::TruthLabelDonation::default_instance_;
  this[16] = CLMicroLocationProto::AssociatedAccessPointInfo::default_instance_;
  return this;
}

BOOL CLMicroLocationProto::DataType_IsValid(CLMicroLocationProto *this)
{
  return ((_DWORD)this - 1) < 6;
}

uint64_t CLMicroLocationProto::ConfidenceLevel_IsValid(CLMicroLocationProto *this)
{
  return (this < 0x10) & (0x800Fu >> (char)this);
}

BOOL CLMicroLocationProto::ConfidenceReason_IsValid(CLMicroLocationProto *this)
{
  return this < 8;
}

BOOL CLMicroLocationProto::ServiceQualityReasonEnum_IsValid(CLMicroLocationProto *this)
{
  return this < 9;
}

uint64_t CLMicroLocationProto::EventType_IsValid(CLMicroLocationProto *this)
{
  return (this < 0x38) & (0xFFFFFF800076B6uLL >> (char)this);
}

BOOL CLMicroLocationProto::ReceivedEventActionType_IsValid(CLMicroLocationProto *this)
{
  return ((_DWORD)this - 1) < 4;
}

BOOL CLMicroLocationProto::RecordingRequestType_IsValid(CLMicroLocationProto *this)
{
  return ((_DWORD)this - 1) < 2;
}

BOOL CLMicroLocationProto::TriggerRequestType_IsValid(CLMicroLocationProto *this)
{
  return this < 2;
}

BOOL CLMicroLocationProto::TriggerReason_IsValid(CLMicroLocationProto *this)
{
  return this < 6;
}

BOOL CLMicroLocationProto::MotionState_IsValid(CLMicroLocationProto *this)
{
  return this < 4;
}

BOOL CLMicroLocationProto::ChangedLoiReason_IsValid(CLMicroLocationProto *this)
{
  return ((_DWORD)this - 1) < 0xC;
}

BOOL CLMicroLocationProto::NumberOfObservationsStates_IsValid(CLMicroLocationProto *this)
{
  return ((_DWORD)this - 1) < 2 || (_DWORD)this == 255;
}

BOOL CLMicroLocationProto::ConfigurationType_IsValid(CLMicroLocationProto *this)
{
  return this < 3;
}

CLMicroLocationProto::BleLeechedBeacons *CLMicroLocationProto::BleLeechedBeacons::BleLeechedBeacons(CLMicroLocationProto::BleLeechedBeacons *this, const CLMicroLocationProto::BleLeechedBeacons *a2)
{
  uint64_t v3;

  *(_QWORD *)this = &off_2511D68A8;
  *((_QWORD *)this + 1) = 0;
  v3 = MEMORY[0x24BEDD958];
  *((_QWORD *)this + 2) = 5;
  *((_QWORD *)this + 3) = v3;
  *((_QWORD *)this + 6) = v3;
  *((_QWORD *)this + 7) = 0;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = v3;
  *((_DWORD *)this + 16) = 0;
  CLMicroLocationProto::BleLeechedBeacons::MergeFrom(this, a2);
  return this;
}

void sub_241AB2A18(_Unwind_Exception *a1)
{
  wireless_diagnostics::google::protobuf::MessageLite *v1;

  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(v1);
  _Unwind_Resume(a1);
}

void CLMicroLocationProto::BleLeechedBeacons::MergeFrom(CLMicroLocationProto::BleLeechedBeacons *this, const CLMicroLocationProto::BleLeechedBeacons *a2)
{
  int v4;
  int v5;
  uint64_t v6;
  int v7;
  const std::string *v8;
  std::string *v9;
  int v10;
  uint64_t v11;
  const std::string *v12;
  std::string *v13;
  const std::string *v14;
  std::string *v15;
  _BYTE v16[48];

  if (a2 == this)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v16);
  }
  LOBYTE(v4) = *((_BYTE *)a2 + 64);
  if (!(_BYTE)v4)
    return;
  if ((*((_BYTE *)a2 + 64) & 1) != 0)
  {
    v5 = *((_DWORD *)a2 + 4);
    if ((v5 - 1) >= 6)
      CLMicroLocationProto::BleLeechedBeacons::MergeFrom();
    *((_DWORD *)this + 16) |= 1u;
    *((_DWORD *)this + 4) = v5;
    v4 = *((_DWORD *)a2 + 16);
  }
  if ((v4 & 2) != 0)
  {
    v6 = *((_QWORD *)a2 + 1);
    *((_DWORD *)this + 16) |= 2u;
    *((_QWORD *)this + 1) = v6;
    v4 = *((_DWORD *)a2 + 16);
    if ((v4 & 4) == 0)
    {
LABEL_9:
      if ((v4 & 8) == 0)
        goto LABEL_10;
      goto LABEL_17;
    }
  }
  else if ((v4 & 4) == 0)
  {
    goto LABEL_9;
  }
  v7 = *((_DWORD *)a2 + 5);
  *((_DWORD *)this + 16) |= 4u;
  *((_DWORD *)this + 5) = v7;
  v4 = *((_DWORD *)a2 + 16);
  if ((v4 & 8) == 0)
  {
LABEL_10:
    if ((v4 & 0x10) == 0)
      goto LABEL_11;
    goto LABEL_20;
  }
LABEL_17:
  v8 = (const std::string *)*((_QWORD *)a2 + 3);
  *((_DWORD *)this + 16) |= 8u;
  v9 = (std::string *)*((_QWORD *)this + 3);
  if (v9 == (std::string *)MEMORY[0x24BEDD958])
  {
    v9 = (std::string *)operator new();
    v9->__r_.__value_.__l.__size_ = 0;
    v9->__r_.__value_.__r.__words[2] = 0;
    v9->__r_.__value_.__r.__words[0] = 0;
    *((_QWORD *)this + 3) = v9;
  }
  std::string::operator=(v9, v8);
  v4 = *((_DWORD *)a2 + 16);
  if ((v4 & 0x10) == 0)
  {
LABEL_11:
    if ((v4 & 0x20) == 0)
      goto LABEL_12;
LABEL_21:
    v11 = *((_QWORD *)a2 + 4);
    *((_DWORD *)this + 16) |= 0x20u;
    *((_QWORD *)this + 4) = v11;
    v4 = *((_DWORD *)a2 + 16);
    if ((v4 & 0x40) == 0)
    {
LABEL_13:
      if ((v4 & 0x80) == 0)
        return;
      goto LABEL_25;
    }
    goto LABEL_22;
  }
LABEL_20:
  v10 = *((_DWORD *)a2 + 14);
  *((_DWORD *)this + 16) |= 0x10u;
  *((_DWORD *)this + 14) = v10;
  v4 = *((_DWORD *)a2 + 16);
  if ((v4 & 0x20) != 0)
    goto LABEL_21;
LABEL_12:
  if ((v4 & 0x40) == 0)
    goto LABEL_13;
LABEL_22:
  v12 = (const std::string *)*((_QWORD *)a2 + 5);
  *((_DWORD *)this + 16) |= 0x40u;
  v13 = (std::string *)*((_QWORD *)this + 5);
  if (v13 == (std::string *)MEMORY[0x24BEDD958])
  {
    v13 = (std::string *)operator new();
    v13->__r_.__value_.__l.__size_ = 0;
    v13->__r_.__value_.__r.__words[2] = 0;
    v13->__r_.__value_.__r.__words[0] = 0;
    *((_QWORD *)this + 5) = v13;
  }
  std::string::operator=(v13, v12);
  if ((*((_DWORD *)a2 + 16) & 0x80) != 0)
  {
LABEL_25:
    v14 = (const std::string *)*((_QWORD *)a2 + 6);
    *((_DWORD *)this + 16) |= 0x80u;
    v15 = (std::string *)*((_QWORD *)this + 6);
    if (v15 == (std::string *)MEMORY[0x24BEDD958])
    {
      v15 = (std::string *)operator new();
      v15->__r_.__value_.__l.__size_ = 0;
      v15->__r_.__value_.__r.__words[2] = 0;
      v15->__r_.__value_.__r.__words[0] = 0;
      *((_QWORD *)this + 6) = v15;
    }
    std::string::operator=(v15, v14);
  }
}

void sub_241AB2C64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void CLMicroLocationProto::BleLeechedBeacons::~BleLeechedBeacons(CLMicroLocationProto::BleLeechedBeacons *this)
{
  *(_QWORD *)this = &off_2511D68A8;
  CLMicroLocationProto::BleLeechedBeacons::SharedDtor(this);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

{
  CLMicroLocationProto::BleLeechedBeacons::~BleLeechedBeacons(this);
  JUMPOUT(0x2426A04D4);
}

void CLMicroLocationProto::BleLeechedBeacons::SharedDtor(CLMicroLocationProto::BleLeechedBeacons *this)
{
  CLMicroLocationProto::BleLeechedBeacons *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v7;

  v1 = this;
  v2 = *((_QWORD *)this + 3);
  v3 = MEMORY[0x24BEDD958];
  if (v2 != MEMORY[0x24BEDD958] && v2 != 0)
  {
    if (*(char *)(v2 + 23) < 0)
      operator delete(*(void **)v2);
    this = (CLMicroLocationProto::BleLeechedBeacons *)MEMORY[0x2426A04D4](v2, 0x1012C40EC159624);
  }
  v5 = *((_QWORD *)v1 + 5);
  if (v5 != v3 && v5 != 0)
  {
    if (*(char *)(v5 + 23) < 0)
      operator delete(*(void **)v5);
    this = (CLMicroLocationProto::BleLeechedBeacons *)MEMORY[0x2426A04D4](v5, 0x1012C40EC159624);
  }
  v7 = *((_QWORD *)v1 + 6);
  if (v7 != v3 && v7 != 0)
  {
    if (*(char *)(v7 + 23) < 0)
      operator delete(*(void **)v7);
    this = (CLMicroLocationProto::BleLeechedBeacons *)MEMORY[0x2426A04D4](v7, 0x1012C40EC159624);
  }
  CLMicroLocationProto::protobuf_AddDesc_microlocation_2eproto(this);
}

uint64_t CLMicroLocationProto::BleLeechedBeacons::New(CLMicroLocationProto::BleLeechedBeacons *this)
{
  uint64_t result;
  uint64_t v2;

  result = operator new();
  *(_QWORD *)result = &off_2511D68A8;
  *(_QWORD *)(result + 8) = 0;
  v2 = MEMORY[0x24BEDD958];
  *(_QWORD *)(result + 16) = 5;
  *(_QWORD *)(result + 24) = v2;
  *(_QWORD *)(result + 48) = v2;
  *(_QWORD *)(result + 56) = 0;
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)(result + 40) = v2;
  *(_DWORD *)(result + 64) = 0;
  return result;
}

uint64_t CLMicroLocationProto::BleLeechedBeacons::Clear(uint64_t this)
{
  char v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *(_BYTE *)(this + 64);
  if (v1)
  {
    *(_QWORD *)(this + 8) = 0;
    *(_QWORD *)(this + 16) = 5;
    v2 = MEMORY[0x24BEDD958];
    if ((v1 & 8) != 0)
    {
      v3 = *(_QWORD *)(this + 24);
      if (v3 != MEMORY[0x24BEDD958])
      {
        if (*(char *)(v3 + 23) < 0)
        {
          **(_BYTE **)v3 = 0;
          *(_QWORD *)(v3 + 8) = 0;
        }
        else
        {
          *(_BYTE *)v3 = 0;
          *(_BYTE *)(v3 + 23) = 0;
        }
      }
    }
    *(_DWORD *)(this + 56) = 0;
    *(_QWORD *)(this + 32) = 0;
    if ((*(_BYTE *)(this + 64) & 0x40) != 0)
    {
      v4 = *(_QWORD *)(this + 40);
      if (v4 != v2)
      {
        if (*(char *)(v4 + 23) < 0)
        {
          **(_BYTE **)v4 = 0;
          *(_QWORD *)(v4 + 8) = 0;
        }
        else
        {
          *(_BYTE *)v4 = 0;
          *(_BYTE *)(v4 + 23) = 0;
        }
      }
    }
    if ((*(_BYTE *)(this + 64) & 0x80) != 0)
    {
      v5 = *(_QWORD *)(this + 48);
      if (v5 != v2)
      {
        if (*(char *)(v5 + 23) < 0)
        {
          **(_BYTE **)v5 = 0;
          *(_QWORD *)(v5 + 8) = 0;
        }
        else
        {
          *(_BYTE *)v5 = 0;
          *(_BYTE *)(v5 + 23) = 0;
        }
      }
    }
  }
  *(_DWORD *)(this + 64) = 0;
  return this;
}

uint64_t CLMicroLocationProto::BleLeechedBeacons::MergePartialFromCodedStream(CLMicroLocationProto::BleLeechedBeacons *this, wireless_diagnostics::google::protobuf::io::CodedInputStream *a2)
{
  unint64_t *v4;
  uint64_t v5;
  char *v6;
  uint64_t TagFallback;
  int v8;
  char *v9;
  unsigned int v10;
  int v11;
  unint64_t v12;
  char *v13;
  char *v14;
  int v15;
  uint64_t result;
  _BYTE *v17;
  _BYTE *v18;
  _BYTE *v19;
  _QWORD *v20;
  _BYTE *v21;
  unsigned int v22;
  _BYTE *v23;
  _BYTE *v24;
  _QWORD *v25;
  _BYTE *v26;
  _QWORD *v27;
  unsigned int v28[2];

  v4 = (unint64_t *)((char *)this + 32);
  v5 = MEMORY[0x24BEDD958];
  while (2)
  {
    v6 = (char *)*((_QWORD *)a2 + 1);
    if ((unint64_t)v6 >= *((_QWORD *)a2 + 2) || *v6 < 0)
    {
      TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(a2);
      *((_DWORD *)a2 + 8) = TagFallback;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    else
    {
      TagFallback = *v6;
      *((_DWORD *)a2 + 8) = TagFallback;
      *((_QWORD *)a2 + 1) = v6 + 1;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    switch(TagFallback >> 3)
    {
      case 1u:
        v8 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_26;
        v28[0] = 0;
        v9 = (char *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v9 >= *((_QWORD *)a2 + 2) || *v9 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v28);
          if (!(_DWORD)result)
            return result;
          v10 = v28[0];
        }
        else
        {
          v10 = *v9;
          *((_QWORD *)a2 + 1) = v9 + 1;
        }
        if (v10 - 1 <= 5)
        {
          *((_DWORD *)this + 16) |= 1u;
          *((_DWORD *)this + 4) = v10;
        }
        v17 = (_BYTE *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v17 < *((_QWORD *)a2 + 2) && *v17 == 17)
        {
          *((_QWORD *)a2 + 1) = v17 + 1;
          goto LABEL_36;
        }
        continue;
      case 2u:
        v8 = TagFallback & 7;
        if (v8 != 1)
          goto LABEL_26;
LABEL_36:
        *(_QWORD *)v28 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(a2, (unint64_t *)v28) & 1) == 0)return 0;
        *((_QWORD *)this + 1) = *(_QWORD *)v28;
        *((_DWORD *)this + 16) |= 2u;
        v18 = (_BYTE *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v18 >= *((_QWORD *)a2 + 2) || *v18 != 29)
          continue;
        *((_QWORD *)a2 + 1) = v18 + 1;
LABEL_40:
        v28[0] = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback(a2, v28) & 1) != 0)
        {
          *((_DWORD *)this + 5) = v28[0];
          v11 = *((_DWORD *)this + 16) | 4;
          *((_DWORD *)this + 16) = v11;
          v19 = (_BYTE *)*((_QWORD *)a2 + 1);
          if ((unint64_t)v19 < *((_QWORD *)a2 + 2) && *v19 == 34)
          {
            *((_QWORD *)a2 + 1) = v19 + 1;
LABEL_44:
            *((_DWORD *)this + 16) = v11 | 8;
            if (*((_QWORD *)this + 3) == v5)
            {
              v20 = (_QWORD *)operator new();
              v20[1] = 0;
              v20[2] = 0;
              *v20 = 0;
              *((_QWORD *)this + 3) = v20;
            }
            result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadBytes();
            if (!(_DWORD)result)
              return result;
            v21 = (_BYTE *)*((_QWORD *)a2 + 1);
            v12 = *((_QWORD *)a2 + 2);
            if ((unint64_t)v21 < v12 && *v21 == 40)
            {
              v13 = v21 + 1;
              *((_QWORD *)a2 + 1) = v13;
LABEL_50:
              v28[0] = 0;
              if ((unint64_t)v13 >= v12 || *v13 < 0)
              {
                result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v28);
                if (!(_DWORD)result)
                  return result;
                v22 = v28[0];
                v23 = (_BYTE *)*((_QWORD *)a2 + 1);
                v12 = *((_QWORD *)a2 + 2);
              }
              else
              {
                v22 = *v13;
                v23 = v13 + 1;
                *((_QWORD *)a2 + 1) = v23;
              }
              *((_DWORD *)this + 14) = v22;
              *((_DWORD *)this + 16) |= 0x10u;
              if ((unint64_t)v23 < v12 && *v23 == 48)
              {
                v14 = v23 + 1;
                *((_QWORD *)a2 + 1) = v14;
LABEL_58:
                if ((unint64_t)v14 >= v12 || *v14 < 0)
                {
                  result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint64Fallback(a2, v4);
                  if (!(_DWORD)result)
                    return result;
                  v24 = (_BYTE *)*((_QWORD *)a2 + 1);
                  v12 = *((_QWORD *)a2 + 2);
                }
                else
                {
                  *v4 = *v14;
                  v24 = v14 + 1;
                  *((_QWORD *)a2 + 1) = v24;
                }
                v15 = *((_DWORD *)this + 16) | 0x20;
                *((_DWORD *)this + 16) = v15;
                if ((unint64_t)v24 < v12 && *v24 == 58)
                {
                  *((_QWORD *)a2 + 1) = v24 + 1;
LABEL_66:
                  *((_DWORD *)this + 16) = v15 | 0x40;
                  if (*((_QWORD *)this + 5) == v5)
                  {
                    v25 = (_QWORD *)operator new();
                    v25[1] = 0;
                    v25[2] = 0;
                    *v25 = 0;
                    *((_QWORD *)this + 5) = v25;
                  }
                  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString();
                  if (!(_DWORD)result)
                    return result;
                  v26 = (_BYTE *)*((_QWORD *)a2 + 1);
                  if ((unint64_t)v26 < *((_QWORD *)a2 + 2) && *v26 == 66)
                  {
                    *((_QWORD *)a2 + 1) = v26 + 1;
LABEL_72:
                    *((_DWORD *)this + 16) |= 0x80u;
                    if (*((_QWORD *)this + 6) == v5)
                    {
                      v27 = (_QWORD *)operator new();
                      v27[1] = 0;
                      v27[2] = 0;
                      *v27 = 0;
                      *((_QWORD *)this + 6) = v27;
                    }
                    result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadBytes();
                    if (!(_DWORD)result)
                      return result;
                    if (*((_QWORD *)a2 + 1) == *((_QWORD *)a2 + 2)
                      && (*((_DWORD *)a2 + 11) || *((_DWORD *)a2 + 6) == *((_DWORD *)a2 + 10)))
                    {
                      *((_DWORD *)a2 + 8) = 0;
                      result = 1;
                      *((_BYTE *)a2 + 36) = 1;
                      return result;
                    }
                  }
                }
              }
            }
          }
          continue;
        }
        return 0;
      case 3u:
        v8 = TagFallback & 7;
        if (v8 == 5)
          goto LABEL_40;
        goto LABEL_26;
      case 4u:
        v8 = TagFallback & 7;
        if (v8 != 2)
          goto LABEL_26;
        v11 = *((_DWORD *)this + 16);
        goto LABEL_44;
      case 5u:
        v8 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_26;
        v13 = (char *)*((_QWORD *)a2 + 1);
        v12 = *((_QWORD *)a2 + 2);
        goto LABEL_50;
      case 6u:
        v8 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_26;
        v14 = (char *)*((_QWORD *)a2 + 1);
        v12 = *((_QWORD *)a2 + 2);
        goto LABEL_58;
      case 7u:
        v8 = TagFallback & 7;
        if (v8 != 2)
          goto LABEL_26;
        v15 = *((_DWORD *)this + 16);
        goto LABEL_66;
      case 8u:
        v8 = TagFallback & 7;
        if (v8 != 2)
          goto LABEL_26;
        goto LABEL_72;
      default:
        v8 = TagFallback & 7;
LABEL_26:
        if (v8 == 4)
          return 1;
        if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(a2, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback) & 1) == 0)return 0;
        continue;
    }
  }
}

uint64_t CLMicroLocationProto::BleLeechedBeacons::SerializeWithCachedSizes(uint64_t this, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a2, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  int v6;

  v5 = this;
  v6 = *(_DWORD *)(this + 64);
  if ((v6 & 1) != 0)
  {
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(unsigned int *)(this + 16), (uint64_t)a2, a4);
    v6 = *(_DWORD *)(v5 + 64);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0)
        goto LABEL_4;
      goto LABEL_12;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, (uint64_t)a2, *(double *)(v5 + 8), a3);
  v6 = *(_DWORD *)(v5 + 64);
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0)
      goto LABEL_5;
    goto LABEL_13;
  }
LABEL_12:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteFloat((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, (uint64_t)a2, *(float *)(v5 + 20), a3);
  v6 = *(_DWORD *)(v5 + 64);
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_14;
  }
LABEL_13:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBytes();
  v6 = *(_DWORD *)(v5 + 64);
  if ((v6 & 0x10) == 0)
  {
LABEL_6:
    if ((v6 & 0x20) == 0)
      goto LABEL_7;
    goto LABEL_15;
  }
LABEL_14:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5, *(unsigned int *)(v5 + 56), (uint64_t)a2, a4);
  v6 = *(_DWORD *)(v5 + 64);
  if ((v6 & 0x20) == 0)
  {
LABEL_7:
    if ((v6 & 0x40) == 0)
      goto LABEL_8;
    goto LABEL_16;
  }
LABEL_15:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt64((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)6, *(_QWORD *)(v5 + 32), (uint64_t)a2, a4);
  v6 = *(_DWORD *)(v5 + 64);
  if ((v6 & 0x40) == 0)
  {
LABEL_8:
    if ((v6 & 0x80) == 0)
      return this;
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBytes();
  }
LABEL_16:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString();
  if ((*(_DWORD *)(v5 + 64) & 0x80) != 0)
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBytes();
  return this;
}

uint64_t CLMicroLocationProto::BleLeechedBeacons::ByteSize(CLMicroLocationProto::BleLeechedBeacons *this)
{
  int v2;
  unsigned int v3;
  uint64_t v4;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v5;
  uint64_t v6;
  int v7;
  char v8;
  uint64_t v9;
  unint64_t v10;
  int v11;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v12;
  int v13;
  uint64_t v14;
  int v15;
  char v16;
  uint64_t v17;
  unint64_t v18;
  int v19;
  uint64_t v20;
  int v21;
  char v22;
  uint64_t v23;
  unint64_t v24;
  int v25;

  LOBYTE(v2) = *((_BYTE *)this + 64);
  if (!(_BYTE)v2)
  {
    v4 = 0;
    goto LABEL_55;
  }
  if ((*((_BYTE *)this + 64) & 1) != 0)
  {
    v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 4);
    if ((v5 & 0x80000000) != 0)
    {
      v3 = 11;
    }
    else if (v5 >= 0x80)
    {
      v3 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v5) + 1;
      v2 = *((_DWORD *)this + 16);
    }
    else
    {
      v3 = 2;
    }
  }
  else
  {
    v3 = 0;
  }
  if ((v2 & 2) != 0)
    v3 += 9;
  if ((v2 & 4) != 0)
    v4 = v3 + 5;
  else
    v4 = v3;
  if ((v2 & 8) != 0)
  {
    v6 = *((_QWORD *)this + 3);
    v7 = *(unsigned __int8 *)(v6 + 23);
    v8 = v7;
    v9 = *(_QWORD *)(v6 + 8);
    if ((v7 & 0x80u) == 0)
      v10 = *(unsigned __int8 *)(v6 + 23);
    else
      v10 = v9;
    if (v10 >= 0x80)
    {
      v11 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v10);
      v7 = *(unsigned __int8 *)(v6 + 23);
      v9 = *(_QWORD *)(v6 + 8);
      v2 = *((_DWORD *)this + 16);
      v8 = *(_BYTE *)(v6 + 23);
    }
    else
    {
      v11 = 1;
    }
    if (v8 < 0)
      v7 = v9;
    v4 = (v4 + v11 + v7 + 1);
    if ((v2 & 0x10) == 0)
    {
LABEL_17:
      if ((v2 & 0x20) == 0)
        goto LABEL_18;
      goto LABEL_36;
    }
  }
  else if ((v2 & 0x10) == 0)
  {
    goto LABEL_17;
  }
  v12 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 14);
  if ((v12 & 0x80000000) != 0)
  {
    v13 = 11;
  }
  else if (v12 >= 0x80)
  {
    v13 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v12) + 1;
    v2 = *((_DWORD *)this + 16);
  }
  else
  {
    v13 = 2;
  }
  v4 = (v13 + v4);
  if ((v2 & 0x20) == 0)
  {
LABEL_18:
    if ((v2 & 0x40) == 0)
      goto LABEL_19;
    goto LABEL_37;
  }
LABEL_36:
  v4 = v4
     + wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize64(*((wireless_diagnostics::google::protobuf::io::CodedOutputStream **)this
                                                                                                 + 4))
     + 1;
  v2 = *((_DWORD *)this + 16);
  if ((v2 & 0x40) == 0)
  {
LABEL_19:
    if ((v2 & 0x80) == 0)
      goto LABEL_55;
    goto LABEL_46;
  }
LABEL_37:
  v14 = *((_QWORD *)this + 5);
  v15 = *(unsigned __int8 *)(v14 + 23);
  v16 = v15;
  v17 = *(_QWORD *)(v14 + 8);
  if ((v15 & 0x80u) == 0)
    v18 = *(unsigned __int8 *)(v14 + 23);
  else
    v18 = v17;
  if (v18 >= 0x80)
  {
    v19 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v18);
    v15 = *(unsigned __int8 *)(v14 + 23);
    v17 = *(_QWORD *)(v14 + 8);
    v2 = *((_DWORD *)this + 16);
    v16 = *(_BYTE *)(v14 + 23);
  }
  else
  {
    v19 = 1;
  }
  if (v16 < 0)
    v15 = v17;
  v4 = (v4 + v19 + v15 + 1);
  if ((v2 & 0x80) != 0)
  {
LABEL_46:
    v20 = *((_QWORD *)this + 6);
    v21 = *(unsigned __int8 *)(v20 + 23);
    v22 = v21;
    v23 = *(_QWORD *)(v20 + 8);
    if ((v21 & 0x80u) == 0)
      v24 = *(unsigned __int8 *)(v20 + 23);
    else
      v24 = v23;
    if (v24 >= 0x80)
    {
      v25 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v24);
      v21 = *(unsigned __int8 *)(v20 + 23);
      v23 = *(_QWORD *)(v20 + 8);
      v22 = *(_BYTE *)(v20 + 23);
    }
    else
    {
      v25 = 1;
    }
    if (v22 < 0)
      v21 = v23;
    v4 = (v4 + v25 + v21 + 1);
  }
LABEL_55:
  *((_DWORD *)this + 15) = v4;
  return v4;
}

void CLMicroLocationProto::BleLeechedBeacons::CheckTypeAndMergeFrom(CLMicroLocationProto::BleLeechedBeacons *this, const wireless_diagnostics::google::protobuf::MessageLite *lpsrc)
{
  uint64_t v4;
  uint64_t v5;

  CLMicroLocationProto::BleLeechedBeacons::MergeFrom(this, lpsrc);
}

void CLMicroLocationProto::BleLeechedBeacons::CopyFrom(CLMicroLocationProto::BleLeechedBeacons *this, const CLMicroLocationProto::BleLeechedBeacons *a2)
{
  if (a2 != this)
  {
    (*(void (**)(CLMicroLocationProto::BleLeechedBeacons *))(*(_QWORD *)this + 32))(this);
    CLMicroLocationProto::BleLeechedBeacons::MergeFrom(this, a2);
  }
}

uint64_t CLMicroLocationProto::BleLeechedBeacons::IsInitialized(CLMicroLocationProto::BleLeechedBeacons *this)
{
  return 1;
}

_QWORD *CLMicroLocationProto::BleLeechedBeacons::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CLMicroLocationProto.BleLeechedBeacons");
}

CLMicroLocationProto::WiFiRssi *CLMicroLocationProto::WiFiRssi::WiFiRssi(CLMicroLocationProto::WiFiRssi *this, const CLMicroLocationProto::WiFiRssi *a2)
{
  *((_DWORD *)this + 4) = 1;
  *(_QWORD *)this = &off_2511D6920;
  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 9) = 0;
  *((_DWORD *)this + 10) = 0;
  *(_QWORD *)((char *)this + 28) = 0;
  *(_QWORD *)((char *)this + 20) = 0;
  CLMicroLocationProto::WiFiRssi::MergeFrom(this, a2);
  return this;
}

void sub_241AB3710(_Unwind_Exception *a1)
{
  wireless_diagnostics::google::protobuf::MessageLite *v1;

  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(v1);
  _Unwind_Resume(a1);
}

void CLMicroLocationProto::WiFiRssi::MergeFrom(CLMicroLocationProto::WiFiRssi *this, const CLMicroLocationProto::WiFiRssi *a2)
{
  int v4;
  int v5;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  _BYTE v10[48];

  if (a2 == this)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v10);
  }
  LOBYTE(v4) = *((_BYTE *)a2 + 40);
  if (!(_BYTE)v4)
    return;
  if ((*((_BYTE *)a2 + 40) & 1) != 0)
  {
    v5 = *((_DWORD *)a2 + 4);
    if ((v5 - 1) >= 6)
      CLMicroLocationProto::WiFiRssi::MergeFrom();
    *((_DWORD *)this + 10) |= 1u;
    *((_DWORD *)this + 4) = v5;
    v4 = *((_DWORD *)a2 + 10);
  }
  if ((v4 & 2) == 0)
  {
    if ((v4 & 4) == 0)
      goto LABEL_9;
LABEL_14:
    v8 = *((_DWORD *)a2 + 5);
    *((_DWORD *)this + 10) |= 4u;
    *((_DWORD *)this + 5) = v8;
    v4 = *((_DWORD *)a2 + 10);
    if ((v4 & 8) == 0)
    {
LABEL_10:
      if ((v4 & 0x10) == 0)
        return;
      goto LABEL_11;
    }
    goto LABEL_15;
  }
  v7 = *((_QWORD *)a2 + 1);
  *((_DWORD *)this + 10) |= 2u;
  *((_QWORD *)this + 1) = v7;
  v4 = *((_DWORD *)a2 + 10);
  if ((v4 & 4) != 0)
    goto LABEL_14;
LABEL_9:
  if ((v4 & 8) == 0)
    goto LABEL_10;
LABEL_15:
  v9 = *((_QWORD *)a2 + 3);
  *((_DWORD *)this + 10) |= 8u;
  *((_QWORD *)this + 3) = v9;
  if ((*((_DWORD *)a2 + 10) & 0x10) != 0)
  {
LABEL_11:
    v6 = *((_DWORD *)a2 + 8);
    *((_DWORD *)this + 10) |= 0x10u;
    *((_DWORD *)this + 8) = v6;
  }
}

void sub_241AB3840(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void CLMicroLocationProto::WiFiRssi::~WiFiRssi(CLMicroLocationProto::WiFiRssi *this)
{
  *(_QWORD *)this = &off_2511D6920;
  CLMicroLocationProto::protobuf_AddDesc_microlocation_2eproto(this);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

{
  CLMicroLocationProto::WiFiRssi::~WiFiRssi(this);
  JUMPOUT(0x2426A04D4);
}

uint64_t CLMicroLocationProto::WiFiRssi::New(CLMicroLocationProto::WiFiRssi *this)
{
  uint64_t result;

  result = operator new();
  *(_DWORD *)(result + 16) = 1;
  *(_QWORD *)result = &off_2511D6920;
  *(_QWORD *)(result + 8) = 0;
  *(_DWORD *)(result + 36) = 0;
  *(_DWORD *)(result + 40) = 0;
  *(_QWORD *)(result + 28) = 0;
  *(_QWORD *)(result + 20) = 0;
  return result;
}

uint64_t CLMicroLocationProto::WiFiRssi::Clear(uint64_t this)
{
  if (*(_BYTE *)(this + 40))
  {
    *(_DWORD *)(this + 16) = 1;
    *(_QWORD *)(this + 8) = 0;
    *(_QWORD *)(this + 28) = 0;
    *(_QWORD *)(this + 20) = 0;
  }
  *(_DWORD *)(this + 40) = 0;
  return this;
}

uint64_t CLMicroLocationProto::WiFiRssi::MergePartialFromCodedStream(CLMicroLocationProto::WiFiRssi *this, wireless_diagnostics::google::protobuf::io::CodedInputStream *a2)
{
  unint64_t *v4;
  char *v5;
  uint64_t TagFallback;
  int v7;
  char *v8;
  unsigned int v9;
  unint64_t v10;
  char *v11;
  char *v12;
  uint64_t result;
  _BYTE *v14;
  _BYTE *v15;
  _BYTE *v16;
  _BYTE *v17;
  unsigned int v18;
  unsigned __int8 *v19;
  unsigned int v20[2];

  v4 = (unint64_t *)((char *)this + 24);
  while (2)
  {
    v5 = (char *)*((_QWORD *)a2 + 1);
    if ((unint64_t)v5 >= *((_QWORD *)a2 + 2) || *v5 < 0)
    {
      TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(a2);
      *((_DWORD *)a2 + 8) = TagFallback;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    else
    {
      TagFallback = *v5;
      *((_DWORD *)a2 + 8) = TagFallback;
      *((_QWORD *)a2 + 1) = v5 + 1;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    switch(TagFallback >> 3)
    {
      case 1u:
        v7 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_20;
        v20[0] = 0;
        v8 = (char *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v8 >= *((_QWORD *)a2 + 2) || *v8 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v20);
          if (!(_DWORD)result)
            return result;
          v9 = v20[0];
        }
        else
        {
          v9 = *v8;
          *((_QWORD *)a2 + 1) = v8 + 1;
        }
        if (v9 - 1 <= 5)
        {
          *((_DWORD *)this + 10) |= 1u;
          *((_DWORD *)this + 4) = v9;
        }
        v14 = (_BYTE *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v14 < *((_QWORD *)a2 + 2) && *v14 == 17)
        {
          *((_QWORD *)a2 + 1) = v14 + 1;
          goto LABEL_31;
        }
        continue;
      case 2u:
        v7 = TagFallback & 7;
        if (v7 != 1)
          goto LABEL_20;
LABEL_31:
        *(_QWORD *)v20 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(a2, (unint64_t *)v20) & 1) == 0)return 0;
        *((_QWORD *)this + 1) = *(_QWORD *)v20;
        *((_DWORD *)this + 10) |= 2u;
        v15 = (_BYTE *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v15 >= *((_QWORD *)a2 + 2) || *v15 != 29)
          continue;
        *((_QWORD *)a2 + 1) = v15 + 1;
LABEL_35:
        v20[0] = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback(a2, v20) & 1) != 0)
        {
          *((_DWORD *)this + 5) = v20[0];
          *((_DWORD *)this + 10) |= 4u;
          v16 = (_BYTE *)*((_QWORD *)a2 + 1);
          v10 = *((_QWORD *)a2 + 2);
          if ((unint64_t)v16 < v10 && *v16 == 32)
          {
            v11 = v16 + 1;
            *((_QWORD *)a2 + 1) = v11;
LABEL_39:
            if ((unint64_t)v11 >= v10 || *v11 < 0)
            {
              result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint64Fallback(a2, v4);
              if (!(_DWORD)result)
                return result;
              v17 = (_BYTE *)*((_QWORD *)a2 + 1);
              v10 = *((_QWORD *)a2 + 2);
            }
            else
            {
              *v4 = *v11;
              v17 = v11 + 1;
              *((_QWORD *)a2 + 1) = v17;
            }
            *((_DWORD *)this + 10) |= 8u;
            if ((unint64_t)v17 < v10 && *v17 == 40)
            {
              v12 = v17 + 1;
              *((_QWORD *)a2 + 1) = v12;
LABEL_47:
              v20[0] = 0;
              if ((unint64_t)v12 >= v10 || *v12 < 0)
              {
                result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v20);
                if (!(_DWORD)result)
                  return result;
                v18 = v20[0];
                v19 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
                v10 = *((_QWORD *)a2 + 2);
              }
              else
              {
                v18 = *v12;
                v19 = (unsigned __int8 *)(v12 + 1);
                *((_QWORD *)a2 + 1) = v19;
              }
              *((_DWORD *)this + 8) = v18;
              *((_DWORD *)this + 10) |= 0x10u;
              if (v19 == (unsigned __int8 *)v10
                && (*((_DWORD *)a2 + 11) || *((_DWORD *)a2 + 6) == *((_DWORD *)a2 + 10)))
              {
                *((_DWORD *)a2 + 8) = 0;
                result = 1;
                *((_BYTE *)a2 + 36) = 1;
                return result;
              }
            }
          }
          continue;
        }
        return 0;
      case 3u:
        v7 = TagFallback & 7;
        if (v7 == 5)
          goto LABEL_35;
        goto LABEL_20;
      case 4u:
        v7 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_20;
        v11 = (char *)*((_QWORD *)a2 + 1);
        v10 = *((_QWORD *)a2 + 2);
        goto LABEL_39;
      case 5u:
        v7 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_20;
        v12 = (char *)*((_QWORD *)a2 + 1);
        v10 = *((_QWORD *)a2 + 2);
        goto LABEL_47;
      default:
        v7 = TagFallback & 7;
LABEL_20:
        if (v7 == 4)
          return 1;
        if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(a2, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback) & 1) == 0)return 0;
        continue;
    }
  }
}

uint64_t CLMicroLocationProto::WiFiRssi::SerializeWithCachedSizes(uint64_t this, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a2, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  int v6;

  v5 = this;
  v6 = *(_DWORD *)(this + 40);
  if ((v6 & 1) != 0)
  {
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(unsigned int *)(this + 16), (uint64_t)a2, a4);
    v6 = *(_DWORD *)(v5 + 40);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0)
        goto LABEL_4;
      goto LABEL_9;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, (uint64_t)a2, *(double *)(v5 + 8), a3);
  v6 = *(_DWORD *)(v5 + 40);
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0)
      goto LABEL_5;
    goto LABEL_10;
  }
LABEL_9:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteFloat((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, (uint64_t)a2, *(float *)(v5 + 20), a3);
  v6 = *(_DWORD *)(v5 + 40);
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0)
      return this;
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5, *(unsigned int *)(v5 + 32), (uint64_t)a2, a4);
  }
LABEL_10:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt64((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4, *(_QWORD *)(v5 + 24), (uint64_t)a2, a4);
  if ((*(_DWORD *)(v5 + 40) & 0x10) != 0)
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5, *(unsigned int *)(v5 + 32), (uint64_t)a2, a4);
  return this;
}

uint64_t CLMicroLocationProto::WiFiRssi::ByteSize(CLMicroLocationProto::WiFiRssi *this)
{
  int v2;
  unsigned int v3;
  uint64_t v4;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v5;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v6;
  int v7;

  LOBYTE(v2) = *((_BYTE *)this + 40);
  if ((_BYTE)v2)
  {
    if ((*((_BYTE *)this + 40) & 1) != 0)
    {
      v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 4);
      if ((v5 & 0x80000000) != 0)
      {
        v3 = 11;
      }
      else if (v5 >= 0x80)
      {
        v3 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v5) + 1;
        v2 = *((_DWORD *)this + 10);
      }
      else
      {
        v3 = 2;
      }
    }
    else
    {
      v3 = 0;
    }
    if ((v2 & 2) != 0)
      v3 += 9;
    if ((v2 & 4) != 0)
      v4 = v3 + 5;
    else
      v4 = v3;
    if ((v2 & 8) != 0)
    {
      v4 = v4
         + wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize64(*((wireless_diagnostics::google::protobuf::io::CodedOutputStream **)this + 3))
         + 1;
      v2 = *((_DWORD *)this + 10);
    }
    if ((v2 & 0x10) != 0)
    {
      v6 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 8);
      if ((v6 & 0x80000000) != 0)
      {
        v7 = 11;
      }
      else if (v6 >= 0x80)
      {
        v7 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v6) + 1;
      }
      else
      {
        v7 = 2;
      }
      v4 = (v7 + v4);
    }
  }
  else
  {
    v4 = 0;
  }
  *((_DWORD *)this + 9) = v4;
  return v4;
}

void CLMicroLocationProto::WiFiRssi::CheckTypeAndMergeFrom(CLMicroLocationProto::WiFiRssi *this, const wireless_diagnostics::google::protobuf::MessageLite *lpsrc)
{
  uint64_t v4;
  uint64_t v5;

  CLMicroLocationProto::WiFiRssi::MergeFrom(this, lpsrc);
}

void CLMicroLocationProto::WiFiRssi::CopyFrom(CLMicroLocationProto::WiFiRssi *this, const CLMicroLocationProto::WiFiRssi *a2)
{
  if (a2 != this)
  {
    (*(void (**)(CLMicroLocationProto::WiFiRssi *))(*(_QWORD *)this + 32))(this);
    CLMicroLocationProto::WiFiRssi::MergeFrom(this, a2);
  }
}

uint64_t CLMicroLocationProto::WiFiRssi::IsInitialized(CLMicroLocationProto::WiFiRssi *this)
{
  return 1;
}

_QWORD *CLMicroLocationProto::WiFiRssi::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CLMicroLocationProto.WiFiRssi");
}

float CLMicroLocationProto::Direction::MergeFrom(CLMicroLocationProto::Direction *this, const CLMicroLocationProto::Direction *a2)
{
  float result;
  int v5;
  _BYTE v6[48];

  if (a2 == this)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v6);
  }
  LOBYTE(v5) = *((_BYTE *)a2 + 24);
  if ((_BYTE)v5)
  {
    if ((*((_BYTE *)a2 + 24) & 1) != 0)
    {
      result = *((float *)a2 + 2);
      *((_DWORD *)this + 6) |= 1u;
      *((float *)this + 2) = result;
      v5 = *((_DWORD *)a2 + 6);
      if ((v5 & 2) == 0)
      {
LABEL_6:
        if ((v5 & 4) == 0)
          return result;
        goto LABEL_7;
      }
    }
    else if ((*((_BYTE *)a2 + 24) & 2) == 0)
    {
      goto LABEL_6;
    }
    result = *((float *)a2 + 3);
    *((_DWORD *)this + 6) |= 2u;
    *((float *)this + 3) = result;
    if ((*((_DWORD *)a2 + 6) & 4) == 0)
      return result;
LABEL_7:
    result = *((float *)a2 + 4);
    *((_DWORD *)this + 6) |= 4u;
    *((float *)this + 4) = result;
  }
  return result;
}

void sub_241AB3F08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void CLMicroLocationProto::Direction::~Direction(CLMicroLocationProto::Direction *this)
{
  *(_QWORD *)this = &off_2511D6998;
  CLMicroLocationProto::protobuf_AddDesc_microlocation_2eproto(this);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

{
  CLMicroLocationProto::Direction::~Direction(this);
  JUMPOUT(0x2426A04D4);
}

uint64_t CLMicroLocationProto::Direction::New(CLMicroLocationProto::Direction *this)
{
  uint64_t result;

  result = operator new();
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)result = &off_2511D6998;
  *(_DWORD *)(result + 24) = 0;
  return result;
}

uint64_t CLMicroLocationProto::Direction::Clear(uint64_t this)
{
  if (*(_BYTE *)(this + 24))
  {
    *(_QWORD *)(this + 8) = 0;
    *(_DWORD *)(this + 16) = 0;
  }
  *(_DWORD *)(this + 24) = 0;
  return this;
}

uint64_t CLMicroLocationProto::Direction::MergePartialFromCodedStream(CLMicroLocationProto::Direction *this, wireless_diagnostics::google::protobuf::io::CodedInputStream *a2)
{
  char *v4;
  uint64_t TagFallback;
  unsigned int v6;
  int v7;
  _BYTE *v8;
  _BYTE *v9;
  uint64_t result;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;

  do
  {
    while (1)
    {
      while (1)
      {
        v4 = (char *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v4 >= *((_QWORD *)a2 + 2) || *v4 < 0)
        {
          TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(a2);
          *((_DWORD *)a2 + 8) = TagFallback;
          if (!(_DWORD)TagFallback)
            return 1;
        }
        else
        {
          TagFallback = *v4;
          *((_DWORD *)a2 + 8) = TagFallback;
          *((_QWORD *)a2 + 1) = v4 + 1;
          if (!(_DWORD)TagFallback)
            return 1;
        }
        v6 = TagFallback >> 3;
        if (TagFallback >> 3 != 1)
          break;
        v7 = TagFallback & 7;
        if (v7 != 5)
          goto LABEL_27;
        v13 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback(a2, &v13) & 1) == 0)
          return 0;
        *((_DWORD *)this + 2) = v13;
        *((_DWORD *)this + 6) |= 1u;
        v8 = (_BYTE *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v8 < *((_QWORD *)a2 + 2) && *v8 == 21)
        {
          *((_QWORD *)a2 + 1) = v8 + 1;
LABEL_17:
          v12 = 0;
          if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback(a2, &v12) & 1) == 0)
            return 0;
          *((_DWORD *)this + 3) = v12;
          *((_DWORD *)this + 6) |= 2u;
          v9 = (_BYTE *)*((_QWORD *)a2 + 1);
          if ((unint64_t)v9 < *((_QWORD *)a2 + 2) && *v9 == 29)
          {
            *((_QWORD *)a2 + 1) = v9 + 1;
            goto LABEL_21;
          }
        }
      }
      if (v6 == 2)
      {
        v7 = TagFallback & 7;
        if (v7 != 5)
          goto LABEL_27;
        goto LABEL_17;
      }
      if (v6 != 3)
      {
        v7 = TagFallback & 7;
        goto LABEL_27;
      }
      v7 = TagFallback & 7;
      if (v7 == 5)
        break;
LABEL_27:
      if (v7 == 4)
        return 1;
      if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(a2, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback) & 1) == 0)return 0;
    }
LABEL_21:
    v11 = 0;
    if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback(a2, &v11) & 1) == 0)
      return 0;
    *((_DWORD *)this + 4) = v11;
    *((_DWORD *)this + 6) |= 4u;
  }
  while (*((_QWORD *)a2 + 1) != *((_QWORD *)a2 + 2)
       || !*((_DWORD *)a2 + 11) && *((_DWORD *)a2 + 6) != *((_DWORD *)a2 + 10));
  *((_DWORD *)a2 + 8) = 0;
  result = 1;
  *((_BYTE *)a2 + 36) = 1;
  return result;
}

uint64_t CLMicroLocationProto::Direction::SerializeWithCachedSizes(uint64_t this, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a2, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a3)
{
  uint64_t v4;
  int v5;

  v4 = this;
  v5 = *(_DWORD *)(this + 24);
  if ((v5 & 1) != 0)
  {
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteFloat((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, (uint64_t)a2, *(float *)(this + 8), a3);
    v5 = *(_DWORD *)(v4 + 24);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0)
        return this;
      return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteFloat((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, (uint64_t)a2, *(float *)(v4 + 16), a3);
    }
  }
  else if ((v5 & 2) == 0)
  {
    goto LABEL_3;
  }
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteFloat((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, (uint64_t)a2, *(float *)(v4 + 12), a3);
  if ((*(_DWORD *)(v4 + 24) & 4) != 0)
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteFloat((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, (uint64_t)a2, *(float *)(v4 + 16), a3);
  return this;
}

uint64_t CLMicroLocationProto::Direction::ByteSize(CLMicroLocationProto::Direction *this)
{
  uint64_t v1;
  unsigned int v2;

  v1 = *((unsigned __int8 *)this + 24);
  if (*((_BYTE *)this + 24))
  {
    v2 = ((int)((_DWORD)v1 << 31) >> 31) & 5;
    if ((v1 & 2) != 0)
      v2 += 5;
    if ((v1 & 4) != 0)
      v1 = v2 + 5;
    else
      v1 = v2;
  }
  *((_DWORD *)this + 5) = v1;
  return v1;
}

float CLMicroLocationProto::Direction::CheckTypeAndMergeFrom(CLMicroLocationProto::Direction *this, const wireless_diagnostics::google::protobuf::MessageLite *lpsrc)
{
  uint64_t v4;
  uint64_t v5;

  return CLMicroLocationProto::Direction::MergeFrom(this, lpsrc);
}

uint64_t CLMicroLocationProto::Direction::IsInitialized(CLMicroLocationProto::Direction *this)
{
  return 1;
}

_QWORD *CLMicroLocationProto::Direction::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CLMicroLocationProto.Direction");
}

CLMicroLocationProto::UwbRange *CLMicroLocationProto::UwbRange::UwbRange(CLMicroLocationProto::UwbRange *this, const CLMicroLocationProto::UwbRange *a2)
{
  *(_QWORD *)this = &off_2511D6A10;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 6;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = MEMORY[0x24BEDD958];
  *((_QWORD *)this + 5) = 1;
  *((_DWORD *)this + 14) = 0;
  *((_QWORD *)this + 6) = 0;
  CLMicroLocationProto::UwbRange::MergeFrom(this, a2);
  return this;
}

void sub_241AB42FC(_Unwind_Exception *a1)
{
  wireless_diagnostics::google::protobuf::MessageLite *v1;

  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(v1);
  _Unwind_Resume(a1);
}

float CLMicroLocationProto::UwbRange::MergeFrom(CLMicroLocationProto::UwbRange *this, const CLMicroLocationProto::UwbRange *a2)
{
  CLMicroLocationProto::UwbRange *v3;
  uint64_t v4;
  int v5;
  int v6;
  CLMicroLocationProto::Direction *v7;
  const CLMicroLocationProto::Direction *v8;
  const std::string *v9;
  std::string *v10;
  int v11;
  _BYTE v13[48];

  v3 = this;
  if (a2 == this)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v13);
  }
  LOBYTE(v5) = *((_BYTE *)a2 + 56);
  if ((_BYTE)v5)
  {
    if ((*((_BYTE *)a2 + 56) & 1) != 0)
    {
      v6 = *((_DWORD *)a2 + 4);
      if ((v6 - 1) >= 6)
        CLMicroLocationProto::UwbRange::MergeFrom();
      *((_DWORD *)v3 + 14) |= 1u;
      *((_DWORD *)v3 + 4) = v6;
      v5 = *((_DWORD *)a2 + 14);
    }
    if ((v5 & 2) != 0)
    {
      v4 = *((_QWORD *)a2 + 1);
      *((_DWORD *)v3 + 14) |= 2u;
      *((_QWORD *)v3 + 1) = v4;
      v5 = *((_DWORD *)a2 + 14);
      if ((v5 & 4) == 0)
      {
LABEL_9:
        if ((v5 & 8) == 0)
          goto LABEL_10;
        goto LABEL_19;
      }
    }
    else if ((v5 & 4) == 0)
    {
      goto LABEL_9;
    }
    LODWORD(v4) = *((_DWORD *)a2 + 5);
    *((_DWORD *)v3 + 14) |= 4u;
    *((_DWORD *)v3 + 5) = v4;
    v5 = *((_DWORD *)a2 + 14);
    if ((v5 & 8) == 0)
    {
LABEL_10:
      if ((v5 & 0x10) == 0)
        goto LABEL_11;
      goto LABEL_24;
    }
LABEL_19:
    *((_DWORD *)v3 + 14) |= 8u;
    v7 = (CLMicroLocationProto::Direction *)*((_QWORD *)v3 + 3);
    if (!v7)
    {
      this = (CLMicroLocationProto::UwbRange *)operator new();
      v7 = this;
      *((_QWORD *)this + 1) = 0;
      *((_QWORD *)this + 2) = 0;
      *(_QWORD *)this = &off_2511D6998;
      *((_DWORD *)this + 6) = 0;
      *((_QWORD *)v3 + 3) = this;
    }
    v8 = (const CLMicroLocationProto::Direction *)*((_QWORD *)a2 + 3);
    if (!v8)
    {
      CLMicroLocationProto::protobuf_AddDesc_microlocation_2eproto(this);
      v8 = *(const CLMicroLocationProto::Direction **)(CLMicroLocationProto::UwbRange::default_instance_ + 24);
    }
    *(float *)&v4 = CLMicroLocationProto::Direction::MergeFrom(v7, v8);
    v5 = *((_DWORD *)a2 + 14);
    if ((v5 & 0x10) == 0)
    {
LABEL_11:
      if ((v5 & 0x20) == 0)
        goto LABEL_12;
      goto LABEL_27;
    }
LABEL_24:
    v9 = (const std::string *)*((_QWORD *)a2 + 4);
    *((_DWORD *)v3 + 14) |= 0x10u;
    v10 = (std::string *)*((_QWORD *)v3 + 4);
    if (v10 == (std::string *)MEMORY[0x24BEDD958])
    {
      v10 = (std::string *)operator new();
      v10->__r_.__value_.__l.__size_ = 0;
      v10->__r_.__value_.__r.__words[2] = 0;
      v10->__r_.__value_.__r.__words[0] = 0;
      *((_QWORD *)v3 + 4) = v10;
    }
    std::string::operator=(v10, v9);
    v5 = *((_DWORD *)a2 + 14);
    if ((v5 & 0x20) == 0)
    {
LABEL_12:
      if ((v5 & 0x40) == 0)
        goto LABEL_14;
      goto LABEL_13;
    }
LABEL_27:
    v11 = *((_DWORD *)a2 + 10);
    if ((v11 - 1) >= 2)
      CLMicroLocationProto::UwbRange::MergeFrom();
    *((_DWORD *)v3 + 14) |= 0x20u;
    *((_DWORD *)v3 + 10) = v11;
    v5 = *((_DWORD *)a2 + 14);
    if ((v5 & 0x40) == 0)
      goto LABEL_14;
LABEL_13:
    LODWORD(v4) = *((_DWORD *)a2 + 11);
    *((_DWORD *)v3 + 14) |= 0x40u;
    *((_DWORD *)v3 + 11) = v4;
    v5 = *((_DWORD *)a2 + 14);
LABEL_14:
    if ((v5 & 0x80) != 0)
    {
      LODWORD(v4) = *((_DWORD *)a2 + 12);
      *((_DWORD *)v3 + 14) |= 0x80u;
      *((_DWORD *)v3 + 12) = v4;
    }
  }
  return *(float *)&v4;
}

void sub_241AB4530(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void CLMicroLocationProto::UwbRange::~UwbRange(CLMicroLocationProto::UwbRange *this)
{
  *(_QWORD *)this = &off_2511D6A10;
  CLMicroLocationProto::UwbRange::SharedDtor(this);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

{
  CLMicroLocationProto::UwbRange::~UwbRange(this);
  JUMPOUT(0x2426A04D4);
}

void CLMicroLocationProto::UwbRange::SharedDtor(CLMicroLocationProto::UwbRange *this)
{
  CLMicroLocationProto::UwbRange *v1;
  uint64_t v2;
  uint64_t v4;

  v1 = this;
  v2 = *((_QWORD *)this + 4);
  if (v2 != MEMORY[0x24BEDD958] && v2 != 0)
  {
    if (*(char *)(v2 + 23) < 0)
      operator delete(*(void **)v2);
    this = (CLMicroLocationProto::UwbRange *)MEMORY[0x2426A04D4](v2, 0x1012C40EC159624);
  }
  CLMicroLocationProto::protobuf_AddDesc_microlocation_2eproto(this);
  if ((CLMicroLocationProto::UwbRange *)CLMicroLocationProto::UwbRange::default_instance_ != v1)
  {
    v4 = *((_QWORD *)v1 + 3);
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  }
}

uint64_t CLMicroLocationProto::UwbRange::New(CLMicroLocationProto::UwbRange *this)
{
  uint64_t result;

  result = operator new();
  *(_QWORD *)result = &off_2511D6A10;
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = 6;
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 32) = MEMORY[0x24BEDD958];
  *(_QWORD *)(result + 40) = 1;
  *(_DWORD *)(result + 56) = 0;
  *(_QWORD *)(result + 48) = 0;
  return result;
}

uint64_t CLMicroLocationProto::UwbRange::Clear(uint64_t this)
{
  int v1;
  uint64_t v2;
  uint64_t v3;

  LOBYTE(v1) = *(_BYTE *)(this + 56);
  if ((_BYTE)v1)
  {
    *(_QWORD *)(this + 8) = 0;
    *(_QWORD *)(this + 16) = 6;
    if ((v1 & 8) != 0)
    {
      v2 = *(_QWORD *)(this + 24);
      if (v2)
      {
        if (*(_BYTE *)(v2 + 24))
        {
          *(_QWORD *)(v2 + 8) = 0;
          *(_DWORD *)(v2 + 16) = 0;
        }
        *(_DWORD *)(v2 + 24) = 0;
        v1 = *(_DWORD *)(this + 56);
      }
    }
    if ((v1 & 0x10) != 0)
    {
      v3 = *(_QWORD *)(this + 32);
      if (v3 != MEMORY[0x24BEDD958])
      {
        if (*(char *)(v3 + 23) < 0)
        {
          **(_BYTE **)v3 = 0;
          *(_QWORD *)(v3 + 8) = 0;
        }
        else
        {
          *(_BYTE *)v3 = 0;
          *(_BYTE *)(v3 + 23) = 0;
        }
      }
    }
    *(_DWORD *)(this + 44) = 0;
    *(_DWORD *)(this + 48) = 0;
    *(_DWORD *)(this + 40) = 1;
  }
  *(_DWORD *)(this + 56) = 0;
  return this;
}

uint64_t CLMicroLocationProto::UwbRange::MergePartialFromCodedStream(CLMicroLocationProto::UwbRange *this, wireless_diagnostics::google::protobuf::io::CodedInputStream *a2)
{
  uint64_t v4;
  char *v5;
  uint64_t TagFallback;
  int v7;
  char *v8;
  unsigned int v9;
  int v10;
  unint64_t v11;
  char *v12;
  uint64_t result;
  _BYTE *v14;
  _BYTE *v15;
  _BYTE *v16;
  uint64_t v17;
  char *v18;
  int v19;
  int v20;
  int v21;
  BOOL v22;
  int v23;
  _BYTE *v24;
  _QWORD *v25;
  _BYTE *v26;
  unsigned int v27;
  _BYTE *v28;
  _BYTE *v29;
  unsigned int v30[2];

  v4 = MEMORY[0x24BEDD958];
  while (2)
  {
    v5 = (char *)*((_QWORD *)a2 + 1);
    if ((unint64_t)v5 >= *((_QWORD *)a2 + 2) || *v5 < 0)
    {
      TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(a2);
      *((_DWORD *)a2 + 8) = TagFallback;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    else
    {
      TagFallback = *v5;
      *((_DWORD *)a2 + 8) = TagFallback;
      *((_QWORD *)a2 + 1) = v5 + 1;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    switch(TagFallback >> 3)
    {
      case 1u:
        v7 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_26;
        v30[0] = 0;
        v8 = (char *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v8 >= *((_QWORD *)a2 + 2) || *v8 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v30);
          if (!(_DWORD)result)
            return result;
          v9 = v30[0];
        }
        else
        {
          v9 = *v8;
          *((_QWORD *)a2 + 1) = v8 + 1;
        }
        if (v9 - 1 <= 5)
        {
          *((_DWORD *)this + 14) |= 1u;
          *((_DWORD *)this + 4) = v9;
        }
        v14 = (_BYTE *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v14 < *((_QWORD *)a2 + 2) && *v14 == 17)
        {
          *((_QWORD *)a2 + 1) = v14 + 1;
          goto LABEL_36;
        }
        continue;
      case 2u:
        v7 = TagFallback & 7;
        if (v7 != 1)
          goto LABEL_26;
LABEL_36:
        *(_QWORD *)v30 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(a2, (unint64_t *)v30) & 1) == 0)return 0;
        *((_QWORD *)this + 1) = *(_QWORD *)v30;
        *((_DWORD *)this + 14) |= 2u;
        v15 = (_BYTE *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v15 >= *((_QWORD *)a2 + 2) || *v15 != 29)
          continue;
        *((_QWORD *)a2 + 1) = v15 + 1;
LABEL_40:
        v30[0] = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback(a2, v30) & 1) == 0)
          return 0;
        *((_DWORD *)this + 5) = v30[0];
        v10 = *((_DWORD *)this + 14) | 4;
        *((_DWORD *)this + 14) = v10;
        v16 = (_BYTE *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v16 >= *((_QWORD *)a2 + 2) || *v16 != 34)
          continue;
        *((_QWORD *)a2 + 1) = v16 + 1;
LABEL_44:
        *((_DWORD *)this + 14) = v10 | 8;
        v17 = *((_QWORD *)this + 3);
        if (!v17)
        {
          v17 = operator new();
          *(_QWORD *)(v17 + 8) = 0;
          *(_QWORD *)(v17 + 16) = 0;
          *(_QWORD *)v17 = &off_2511D6998;
          *(_DWORD *)(v17 + 24) = 0;
          *((_QWORD *)this + 3) = v17;
        }
        v30[0] = 0;
        v18 = (char *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v18 >= *((_QWORD *)a2 + 2) || *v18 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v30))return 0;
        }
        else
        {
          v30[0] = *v18;
          *((_QWORD *)a2 + 1) = v18 + 1;
        }
        v19 = *((_DWORD *)a2 + 14);
        v20 = *((_DWORD *)a2 + 15);
        *((_DWORD *)a2 + 14) = v19 + 1;
        if (v19 >= v20)
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(a2);
        if (!CLMicroLocationProto::Direction::MergePartialFromCodedStream((CLMicroLocationProto::Direction *)v17, a2)|| !*((_BYTE *)a2 + 36))
        {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(a2);
        v21 = *((_DWORD *)a2 + 14);
        v22 = __OFSUB__(v21, 1);
        v23 = v21 - 1;
        if (v23 < 0 == v22)
          *((_DWORD *)a2 + 14) = v23;
        v24 = (_BYTE *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v24 >= *((_QWORD *)a2 + 2) || *v24 != 42)
          continue;
        *((_QWORD *)a2 + 1) = v24 + 1;
LABEL_58:
        *((_DWORD *)this + 14) |= 0x10u;
        if (*((_QWORD *)this + 4) == v4)
        {
          v25 = (_QWORD *)operator new();
          v25[1] = 0;
          v25[2] = 0;
          *v25 = 0;
          *((_QWORD *)this + 4) = v25;
        }
        result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadBytes();
        if (!(_DWORD)result)
          return result;
        v26 = (_BYTE *)*((_QWORD *)a2 + 1);
        v11 = *((_QWORD *)a2 + 2);
        if ((unint64_t)v26 >= v11 || *v26 != 48)
          continue;
        v12 = v26 + 1;
        *((_QWORD *)a2 + 1) = v12;
LABEL_64:
        v30[0] = 0;
        if ((unint64_t)v12 >= v11 || *v12 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v30);
          if (!(_DWORD)result)
            return result;
          v27 = v30[0];
        }
        else
        {
          v27 = *v12;
          *((_QWORD *)a2 + 1) = v12 + 1;
        }
        if (v27 - 1 <= 1)
        {
          *((_DWORD *)this + 14) |= 0x20u;
          *((_DWORD *)this + 10) = v27;
        }
        v28 = (_BYTE *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v28 >= *((_QWORD *)a2 + 2) || *v28 != 61)
          continue;
        *((_QWORD *)a2 + 1) = v28 + 1;
LABEL_74:
        v30[0] = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback(a2, v30) & 1) == 0)
          return 0;
        *((_DWORD *)this + 11) = v30[0];
        *((_DWORD *)this + 14) |= 0x40u;
        v29 = (_BYTE *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v29 >= *((_QWORD *)a2 + 2) || *v29 != 69)
          continue;
        *((_QWORD *)a2 + 1) = v29 + 1;
LABEL_78:
        v30[0] = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback(a2, v30) & 1) != 0)
        {
          *((_DWORD *)this + 12) = v30[0];
          *((_DWORD *)this + 14) |= 0x80u;
          if (*((_QWORD *)a2 + 1) == *((_QWORD *)a2 + 2)
            && (*((_DWORD *)a2 + 11) || *((_DWORD *)a2 + 6) == *((_DWORD *)a2 + 10)))
          {
            *((_DWORD *)a2 + 8) = 0;
            result = 1;
            *((_BYTE *)a2 + 36) = 1;
            return result;
          }
          continue;
        }
        return 0;
      case 3u:
        v7 = TagFallback & 7;
        if (v7 == 5)
          goto LABEL_40;
        goto LABEL_26;
      case 4u:
        v7 = TagFallback & 7;
        if (v7 != 2)
          goto LABEL_26;
        v10 = *((_DWORD *)this + 14);
        goto LABEL_44;
      case 5u:
        v7 = TagFallback & 7;
        if (v7 == 2)
          goto LABEL_58;
        goto LABEL_26;
      case 6u:
        v7 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_26;
        v12 = (char *)*((_QWORD *)a2 + 1);
        v11 = *((_QWORD *)a2 + 2);
        goto LABEL_64;
      case 7u:
        v7 = TagFallback & 7;
        if (v7 == 5)
          goto LABEL_74;
        goto LABEL_26;
      case 8u:
        v7 = TagFallback & 7;
        if (v7 != 5)
          goto LABEL_26;
        goto LABEL_78;
      default:
        v7 = TagFallback & 7;
LABEL_26:
        if (v7 == 4)
          return 1;
        if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(a2, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback) & 1) == 0)return 0;
        continue;
    }
  }
}

unsigned int *CLMicroLocationProto::UwbRange::SerializeWithCachedSizes(unsigned int *this, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a2, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  unsigned int *v5;
  unsigned int v6;
  uint64_t v7;

  v5 = this;
  v6 = this[14];
  if ((v6 & 1) != 0)
  {
    this = (unsigned int *)wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, this[4], (uint64_t)a2, a4);
    v6 = v5[14];
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0)
        goto LABEL_4;
      goto LABEL_12;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  this = (unsigned int *)wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, (uint64_t)a2, *((double *)v5 + 1), a3);
  v6 = v5[14];
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0)
      goto LABEL_5;
    goto LABEL_13;
  }
LABEL_12:
  this = (unsigned int *)wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteFloat((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, (uint64_t)a2, *((float *)v5 + 5), a3);
  v6 = v5[14];
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_16;
  }
LABEL_13:
  v7 = *((_QWORD *)v5 + 3);
  if (!v7)
  {
    CLMicroLocationProto::protobuf_AddDesc_microlocation_2eproto((CLMicroLocationProto *)this);
    v7 = *(_QWORD *)(CLMicroLocationProto::UwbRange::default_instance_ + 24);
  }
  this = (unsigned int *)wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4, v7, a2, a4);
  v6 = v5[14];
  if ((v6 & 0x10) == 0)
  {
LABEL_6:
    if ((v6 & 0x20) == 0)
      goto LABEL_7;
    goto LABEL_17;
  }
LABEL_16:
  this = (unsigned int *)wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBytes();
  v6 = v5[14];
  if ((v6 & 0x20) == 0)
  {
LABEL_7:
    if ((v6 & 0x40) == 0)
      goto LABEL_8;
    goto LABEL_18;
  }
LABEL_17:
  this = (unsigned int *)wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)6, v5[10], (uint64_t)a2, a4);
  v6 = v5[14];
  if ((v6 & 0x40) == 0)
  {
LABEL_8:
    if ((v6 & 0x80) == 0)
      return this;
    return (unsigned int *)wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteFloat((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)8, (uint64_t)a2, *((float *)v5 + 12), a3);
  }
LABEL_18:
  this = (unsigned int *)wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteFloat((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)7, (uint64_t)a2, *((float *)v5 + 11), a3);
  if ((v5[14] & 0x80) != 0)
    return (unsigned int *)wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteFloat((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)8, (uint64_t)a2, *((float *)v5 + 12), a3);
  return this;
}

uint64_t CLMicroLocationProto::UwbRange::ByteSize(CLMicroLocationProto::UwbRange *this)
{
  CLMicroLocationProto::UwbRange *v1;
  int v2;
  int v3;
  uint64_t result;
  int v5;
  uint64_t v6;
  int v7;
  int v8;
  int v9;
  uint64_t v10;
  int v11;
  char v12;
  uint64_t v13;
  unint64_t v14;
  int v15;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v16;
  int v17;
  unsigned int v18;

  v1 = this;
  LOBYTE(v2) = *((_BYTE *)this + 56);
  if (!(_BYTE)v2)
  {
    result = 0;
    goto LABEL_49;
  }
  if ((*((_BYTE *)this + 56) & 1) != 0)
  {
    this = (CLMicroLocationProto::UwbRange *)*((unsigned int *)this + 4);
    if ((this & 0x80000000) != 0)
    {
      v3 = 11;
    }
    else if (this >= 0x80)
    {
      this = (CLMicroLocationProto::UwbRange *)wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(this);
      v3 = (_DWORD)this + 1;
      v2 = *((_DWORD *)v1 + 14);
    }
    else
    {
      v3 = 2;
    }
  }
  else
  {
    v3 = 0;
  }
  if ((v2 & 2) != 0)
    v3 += 9;
  if ((v2 & 4) != 0)
    v5 = v3 + 5;
  else
    v5 = v3;
  if ((v2 & 8) != 0)
  {
    v6 = *((_QWORD *)v1 + 3);
    if (!v6)
    {
      CLMicroLocationProto::protobuf_AddDesc_microlocation_2eproto(this);
      v6 = *(_QWORD *)(CLMicroLocationProto::UwbRange::default_instance_ + 24);
    }
    v7 = *(unsigned __int8 *)(v6 + 24);
    v8 = (v7 << 31 >> 31) & 5;
    if ((v7 & 2) != 0)
      v8 += 5;
    if ((v7 & 4) != 0)
      v8 += 5;
    if (*(_BYTE *)(v6 + 24))
      v9 = v8;
    else
      v9 = 0;
    *(_DWORD *)(v6 + 20) = v9;
    v5 += v9 + 2;
    v2 = *((_DWORD *)v1 + 14);
    if ((v2 & 0x10) == 0)
    {
LABEL_17:
      if ((v2 & 0x20) == 0)
        goto LABEL_44;
      goto LABEL_38;
    }
  }
  else if ((v2 & 0x10) == 0)
  {
    goto LABEL_17;
  }
  v10 = *((_QWORD *)v1 + 4);
  v11 = *(unsigned __int8 *)(v10 + 23);
  v12 = v11;
  v13 = *(_QWORD *)(v10 + 8);
  if ((v11 & 0x80u) == 0)
    v14 = *(unsigned __int8 *)(v10 + 23);
  else
    v14 = v13;
  if (v14 >= 0x80)
  {
    v15 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v14);
    v11 = *(unsigned __int8 *)(v10 + 23);
    v13 = *(_QWORD *)(v10 + 8);
    v2 = *((_DWORD *)v1 + 14);
    v12 = *(_BYTE *)(v10 + 23);
  }
  else
  {
    v15 = 1;
  }
  if (v12 < 0)
    v11 = v13;
  v5 += v15 + v11 + 1;
  if ((v2 & 0x20) == 0)
    goto LABEL_44;
LABEL_38:
  v16 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)v1 + 10);
  if ((v16 & 0x80000000) != 0)
  {
    v17 = 11;
  }
  else if (v16 >= 0x80)
  {
    v17 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v16) + 1;
    v2 = *((_DWORD *)v1 + 14);
  }
  else
  {
    v17 = 2;
  }
  v5 += v17;
LABEL_44:
  v18 = v5 + 5;
  if ((v2 & 0x40) == 0)
    v18 = v5;
  if ((v2 & 0x80) != 0)
    result = v18 + 5;
  else
    result = v18;
LABEL_49:
  *((_DWORD *)v1 + 13) = result;
  return result;
}

float CLMicroLocationProto::UwbRange::CheckTypeAndMergeFrom(CLMicroLocationProto::UwbRange *this, const wireless_diagnostics::google::protobuf::MessageLite *lpsrc)
{
  uint64_t v4;
  uint64_t v5;

  return CLMicroLocationProto::UwbRange::MergeFrom(this, lpsrc);
}

float CLMicroLocationProto::UwbRange::CopyFrom(CLMicroLocationProto::UwbRange *this, const CLMicroLocationProto::UwbRange *a2)
{
  float result;

  if (a2 != this)
  {
    (*(void (**)(CLMicroLocationProto::UwbRange *))(*(_QWORD *)this + 32))(this);
    return CLMicroLocationProto::UwbRange::MergeFrom(this, a2);
  }
  return result;
}

uint64_t CLMicroLocationProto::UwbRange::IsInitialized(CLMicroLocationProto::UwbRange *this)
{
  return 1;
}

_QWORD *CLMicroLocationProto::UwbRange::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CLMicroLocationProto.UwbRange");
}

void CLMicroLocationProto::WiFiRange::MergeFrom(CLMicroLocationProto::WiFiRange *this, const CLMicroLocationProto::WiFiRange *a2)
{
  int v4;
  int v5;
  uint64_t v6;
  int v7;
  int v8;
  const std::string *v9;
  std::string *v10;
  _BYTE v11[48];

  if (a2 == this)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v11);
  }
  LOBYTE(v4) = *((_BYTE *)a2 + 40);
  if ((_BYTE)v4)
  {
    if ((*((_BYTE *)a2 + 40) & 1) != 0)
    {
      v5 = *((_DWORD *)a2 + 4);
      if ((v5 - 1) >= 6)
        CLMicroLocationProto::WiFiRange::MergeFrom();
      *((_DWORD *)this + 10) |= 1u;
      *((_DWORD *)this + 4) = v5;
      v4 = *((_DWORD *)a2 + 10);
    }
    if ((v4 & 2) != 0)
    {
      v6 = *((_QWORD *)a2 + 1);
      *((_DWORD *)this + 10) |= 2u;
      *((_QWORD *)this + 1) = v6;
      v4 = *((_DWORD *)a2 + 10);
      if ((v4 & 4) == 0)
      {
LABEL_9:
        if ((v4 & 8) == 0)
          goto LABEL_10;
        goto LABEL_14;
      }
    }
    else if ((v4 & 4) == 0)
    {
      goto LABEL_9;
    }
    v7 = *((_DWORD *)a2 + 5);
    *((_DWORD *)this + 10) |= 4u;
    *((_DWORD *)this + 5) = v7;
    v4 = *((_DWORD *)a2 + 10);
    if ((v4 & 8) == 0)
    {
LABEL_10:
      if ((v4 & 0x10) == 0)
        return;
LABEL_15:
      v9 = (const std::string *)*((_QWORD *)a2 + 3);
      *((_DWORD *)this + 10) |= 0x10u;
      v10 = (std::string *)*((_QWORD *)this + 3);
      if (v10 == (std::string *)MEMORY[0x24BEDD958])
      {
        v10 = (std::string *)operator new();
        v10->__r_.__value_.__l.__size_ = 0;
        v10->__r_.__value_.__r.__words[2] = 0;
        v10->__r_.__value_.__r.__words[0] = 0;
        *((_QWORD *)this + 3) = v10;
      }
      std::string::operator=(v10, v9);
      return;
    }
LABEL_14:
    v8 = *((_DWORD *)a2 + 8);
    *((_DWORD *)this + 10) |= 8u;
    *((_DWORD *)this + 8) = v8;
    if ((*((_DWORD *)a2 + 10) & 0x10) == 0)
      return;
    goto LABEL_15;
  }
}

void sub_241AB508C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void CLMicroLocationProto::WiFiRange::~WiFiRange(CLMicroLocationProto::WiFiRange *this)
{
  *(_QWORD *)this = &off_2511D6A88;
  CLMicroLocationProto::WiFiRange::SharedDtor(this);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

{
  CLMicroLocationProto::WiFiRange::~WiFiRange(this);
  JUMPOUT(0x2426A04D4);
}

void CLMicroLocationProto::WiFiRange::SharedDtor(CLMicroLocationProto::WiFiRange *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 3);
  if (v1 != MEMORY[0x24BEDD958] && v1 != 0)
  {
    if (*(char *)(v1 + 23) < 0)
      operator delete(*(void **)v1);
    this = (CLMicroLocationProto::WiFiRange *)MEMORY[0x2426A04D4](v1, 0x1012C40EC159624);
  }
  CLMicroLocationProto::protobuf_AddDesc_microlocation_2eproto(this);
}

uint64_t CLMicroLocationProto::WiFiRange::New(CLMicroLocationProto::WiFiRange *this)
{
  uint64_t result;
  uint64_t v2;

  result = operator new();
  *(_QWORD *)result = &off_2511D6A88;
  *(_QWORD *)(result + 8) = 0;
  v2 = MEMORY[0x24BEDD958];
  *(_QWORD *)(result + 16) = 2;
  *(_QWORD *)(result + 24) = v2;
  *(_DWORD *)(result + 40) = 0;
  *(_QWORD *)(result + 32) = 0;
  return result;
}

uint64_t CLMicroLocationProto::WiFiRange::Clear(uint64_t this)
{
  char v1;
  uint64_t v2;

  v1 = *(_BYTE *)(this + 40);
  if (v1)
  {
    *(_QWORD *)(this + 8) = 0;
    *(_QWORD *)(this + 16) = 2;
    *(_DWORD *)(this + 32) = 0;
    if ((v1 & 0x10) != 0)
    {
      v2 = *(_QWORD *)(this + 24);
      if (v2 != MEMORY[0x24BEDD958])
      {
        if (*(char *)(v2 + 23) < 0)
        {
          **(_BYTE **)v2 = 0;
          *(_QWORD *)(v2 + 8) = 0;
        }
        else
        {
          *(_BYTE *)v2 = 0;
          *(_BYTE *)(v2 + 23) = 0;
        }
      }
    }
  }
  *(_DWORD *)(this + 40) = 0;
  return this;
}

uint64_t CLMicroLocationProto::WiFiRange::MergePartialFromCodedStream(CLMicroLocationProto::WiFiRange *this, wireless_diagnostics::google::protobuf::io::CodedInputStream *a2)
{
  uint64_t v4;
  char *v5;
  uint64_t TagFallback;
  int v7;
  char *v8;
  unsigned int v9;
  int v10;
  uint64_t result;
  _BYTE *v12;
  _BYTE *v13;
  _BYTE *v14;
  _BYTE *v15;
  _QWORD *v16;
  unsigned int v17[2];

  v4 = MEMORY[0x24BEDD958];
  while (2)
  {
    v5 = (char *)*((_QWORD *)a2 + 1);
    if ((unint64_t)v5 >= *((_QWORD *)a2 + 2) || *v5 < 0)
    {
      TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(a2);
      *((_DWORD *)a2 + 8) = TagFallback;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    else
    {
      TagFallback = *v5;
      *((_DWORD *)a2 + 8) = TagFallback;
      *((_QWORD *)a2 + 1) = v5 + 1;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    switch(TagFallback >> 3)
    {
      case 1u:
        v7 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_21;
        v17[0] = 0;
        v8 = (char *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v8 >= *((_QWORD *)a2 + 2) || *v8 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v17);
          if (!(_DWORD)result)
            return result;
          v9 = v17[0];
        }
        else
        {
          v9 = *v8;
          *((_QWORD *)a2 + 1) = v8 + 1;
        }
        if (v9 - 1 <= 5)
        {
          *((_DWORD *)this + 10) |= 1u;
          *((_DWORD *)this + 4) = v9;
        }
        v12 = (_BYTE *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v12 < *((_QWORD *)a2 + 2) && *v12 == 17)
        {
          *((_QWORD *)a2 + 1) = v12 + 1;
          goto LABEL_31;
        }
        continue;
      case 2u:
        v7 = TagFallback & 7;
        if (v7 != 1)
          goto LABEL_21;
LABEL_31:
        *(_QWORD *)v17 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(a2, (unint64_t *)v17) & 1) == 0)return 0;
        *((_QWORD *)this + 1) = *(_QWORD *)v17;
        *((_DWORD *)this + 10) |= 2u;
        v13 = (_BYTE *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v13 >= *((_QWORD *)a2 + 2) || *v13 != 29)
          continue;
        *((_QWORD *)a2 + 1) = v13 + 1;
LABEL_35:
        v17[0] = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback(a2, v17) & 1) == 0)
          return 0;
        *((_DWORD *)this + 5) = v17[0];
        *((_DWORD *)this + 10) |= 4u;
        v14 = (_BYTE *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v14 >= *((_QWORD *)a2 + 2) || *v14 != 37)
          continue;
        *((_QWORD *)a2 + 1) = v14 + 1;
LABEL_39:
        v17[0] = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback(a2, v17) & 1) != 0)
        {
          *((_DWORD *)this + 8) = v17[0];
          v10 = *((_DWORD *)this + 10) | 8;
          *((_DWORD *)this + 10) = v10;
          v15 = (_BYTE *)*((_QWORD *)a2 + 1);
          if ((unint64_t)v15 < *((_QWORD *)a2 + 2) && *v15 == 42)
          {
            *((_QWORD *)a2 + 1) = v15 + 1;
LABEL_43:
            *((_DWORD *)this + 10) = v10 | 0x10;
            if (*((_QWORD *)this + 3) == v4)
            {
              v16 = (_QWORD *)operator new();
              v16[1] = 0;
              v16[2] = 0;
              *v16 = 0;
              *((_QWORD *)this + 3) = v16;
            }
            result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadBytes();
            if (!(_DWORD)result)
              return result;
            if (*((_QWORD *)a2 + 1) == *((_QWORD *)a2 + 2)
              && (*((_DWORD *)a2 + 11) || *((_DWORD *)a2 + 6) == *((_DWORD *)a2 + 10)))
            {
              *((_DWORD *)a2 + 8) = 0;
              result = 1;
              *((_BYTE *)a2 + 36) = 1;
              return result;
            }
          }
          continue;
        }
        return 0;
      case 3u:
        v7 = TagFallback & 7;
        if (v7 == 5)
          goto LABEL_35;
        goto LABEL_21;
      case 4u:
        v7 = TagFallback & 7;
        if (v7 == 5)
          goto LABEL_39;
        goto LABEL_21;
      case 5u:
        v7 = TagFallback & 7;
        if (v7 != 2)
          goto LABEL_21;
        v10 = *((_DWORD *)this + 10);
        goto LABEL_43;
      default:
        v7 = TagFallback & 7;
LABEL_21:
        if (v7 == 4)
          return 1;
        if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(a2, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback) & 1) == 0)return 0;
        continue;
    }
  }
}

uint64_t CLMicroLocationProto::WiFiRange::SerializeWithCachedSizes(uint64_t this, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a2, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  int v6;

  v5 = this;
  v6 = *(_DWORD *)(this + 40);
  if ((v6 & 1) != 0)
  {
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(unsigned int *)(this + 16), (uint64_t)a2, a4);
    v6 = *(_DWORD *)(v5 + 40);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0)
        goto LABEL_4;
      goto LABEL_9;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, (uint64_t)a2, *(double *)(v5 + 8), a3);
  v6 = *(_DWORD *)(v5 + 40);
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0)
      goto LABEL_5;
    goto LABEL_10;
  }
LABEL_9:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteFloat((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, (uint64_t)a2, *(float *)(v5 + 20), a3);
  v6 = *(_DWORD *)(v5 + 40);
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0)
      return this;
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBytes();
  }
LABEL_10:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteFloat((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4, (uint64_t)a2, *(float *)(v5 + 32), a3);
  if ((*(_DWORD *)(v5 + 40) & 0x10) != 0)
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBytes();
  return this;
}

uint64_t CLMicroLocationProto::WiFiRange::ByteSize(CLMicroLocationProto::WiFiRange *this)
{
  int v2;
  unsigned int v3;
  uint64_t v4;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v5;
  uint64_t v6;
  int v7;
  char v8;
  uint64_t v9;
  unint64_t v10;
  int v11;

  LOBYTE(v2) = *((_BYTE *)this + 40);
  if ((_BYTE)v2)
  {
    if ((*((_BYTE *)this + 40) & 1) != 0)
    {
      v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 4);
      if ((v5 & 0x80000000) != 0)
      {
        v3 = 11;
      }
      else if (v5 >= 0x80)
      {
        v3 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v5) + 1;
        v2 = *((_DWORD *)this + 10);
      }
      else
      {
        v3 = 2;
      }
    }
    else
    {
      v3 = 0;
    }
    if ((v2 & 2) != 0)
      v3 += 9;
    if ((v2 & 4) != 0)
      v3 += 5;
    if ((v2 & 8) != 0)
      v4 = v3 + 5;
    else
      v4 = v3;
    if ((v2 & 0x10) != 0)
    {
      v6 = *((_QWORD *)this + 3);
      v7 = *(unsigned __int8 *)(v6 + 23);
      v8 = v7;
      v9 = *(_QWORD *)(v6 + 8);
      if ((v7 & 0x80u) == 0)
        v10 = *(unsigned __int8 *)(v6 + 23);
      else
        v10 = v9;
      if (v10 >= 0x80)
      {
        v11 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v10);
        v7 = *(unsigned __int8 *)(v6 + 23);
        v9 = *(_QWORD *)(v6 + 8);
        v8 = *(_BYTE *)(v6 + 23);
      }
      else
      {
        v11 = 1;
      }
      if (v8 < 0)
        v7 = v9;
      v4 = (v4 + v11 + v7 + 1);
    }
  }
  else
  {
    v4 = 0;
  }
  *((_DWORD *)this + 9) = v4;
  return v4;
}

void CLMicroLocationProto::WiFiRange::CheckTypeAndMergeFrom(CLMicroLocationProto::WiFiRange *this, const wireless_diagnostics::google::protobuf::MessageLite *lpsrc)
{
  uint64_t v4;
  uint64_t v5;

  CLMicroLocationProto::WiFiRange::MergeFrom(this, lpsrc);
}

uint64_t CLMicroLocationProto::WiFiRange::IsInitialized(CLMicroLocationProto::WiFiRange *this)
{
  return 1;
}

_QWORD *CLMicroLocationProto::WiFiRange::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CLMicroLocationProto.WiFiRange");
}

void CLMicroLocationProto::ATVAirplayBluetoothRssi::MergeFrom(CLMicroLocationProto::ATVAirplayBluetoothRssi *this, const CLMicroLocationProto::ATVAirplayBluetoothRssi *a2)
{
  int v4;
  int v5;
  int v6;
  uint64_t v7;
  int v8;
  int v9;
  const std::string *v10;
  std::string *v11;
  _BYTE v12[48];

  if (a2 == this)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v12);
  }
  LOBYTE(v4) = *((_BYTE *)a2 + 44);
  if (!(_BYTE)v4)
    return;
  if ((*((_BYTE *)a2 + 44) & 1) != 0)
  {
    v5 = *((_DWORD *)a2 + 4);
    if ((v5 - 1) >= 6)
      CLMicroLocationProto::ATVAirplayBluetoothRssi::MergeFrom();
    *((_DWORD *)this + 11) |= 1u;
    *((_DWORD *)this + 4) = v5;
    v4 = *((_DWORD *)a2 + 11);
  }
  if ((v4 & 2) != 0)
  {
    v7 = *((_QWORD *)a2 + 1);
    *((_DWORD *)this + 11) |= 2u;
    *((_QWORD *)this + 1) = v7;
    v4 = *((_DWORD *)a2 + 11);
    if ((v4 & 4) == 0)
    {
LABEL_9:
      if ((v4 & 8) == 0)
        goto LABEL_10;
LABEL_16:
      v9 = *((_DWORD *)a2 + 8);
      *((_DWORD *)this + 11) |= 8u;
      *((_DWORD *)this + 8) = v9;
      v4 = *((_DWORD *)a2 + 11);
      if ((v4 & 0x10) == 0)
      {
LABEL_11:
        if ((v4 & 0x20) == 0)
          return;
        goto LABEL_12;
      }
      goto LABEL_17;
    }
  }
  else if ((v4 & 4) == 0)
  {
    goto LABEL_9;
  }
  v8 = *((_DWORD *)a2 + 5);
  *((_DWORD *)this + 11) |= 4u;
  *((_DWORD *)this + 5) = v8;
  v4 = *((_DWORD *)a2 + 11);
  if ((v4 & 8) != 0)
    goto LABEL_16;
LABEL_10:
  if ((v4 & 0x10) == 0)
    goto LABEL_11;
LABEL_17:
  v10 = (const std::string *)*((_QWORD *)a2 + 3);
  *((_DWORD *)this + 11) |= 0x10u;
  v11 = (std::string *)*((_QWORD *)this + 3);
  if (v11 == (std::string *)MEMORY[0x24BEDD958])
  {
    v11 = (std::string *)operator new();
    v11->__r_.__value_.__l.__size_ = 0;
    v11->__r_.__value_.__r.__words[2] = 0;
    v11->__r_.__value_.__r.__words[0] = 0;
    *((_QWORD *)this + 3) = v11;
  }
  std::string::operator=(v11, v10);
  if ((*((_DWORD *)a2 + 11) & 0x20) != 0)
  {
LABEL_12:
    v6 = *((_DWORD *)a2 + 9);
    *((_DWORD *)this + 11) |= 0x20u;
    *((_DWORD *)this + 9) = v6;
  }
}

void sub_241AB585C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void CLMicroLocationProto::ATVAirplayBluetoothRssi::~ATVAirplayBluetoothRssi(CLMicroLocationProto::ATVAirplayBluetoothRssi *this)
{
  *(_QWORD *)this = &off_2511D6B00;
  CLMicroLocationProto::WiFiRange::SharedDtor(this);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

{
  CLMicroLocationProto::ATVAirplayBluetoothRssi::~ATVAirplayBluetoothRssi(this);
  JUMPOUT(0x2426A04D4);
}

_QWORD *CLMicroLocationProto::ATVAirplayBluetoothRssi::New(CLMicroLocationProto::ATVAirplayBluetoothRssi *this)
{
  _QWORD *result;
  uint64_t v2;

  result = (_QWORD *)operator new();
  *result = &off_2511D6B00;
  result[1] = 0;
  v2 = MEMORY[0x24BEDD958];
  result[2] = 3;
  result[3] = v2;
  result[4] = 0;
  result[5] = 0;
  return result;
}

uint64_t CLMicroLocationProto::ATVAirplayBluetoothRssi::Clear(uint64_t this)
{
  char v1;
  uint64_t v2;

  v1 = *(_BYTE *)(this + 44);
  if (v1)
  {
    *(_QWORD *)(this + 8) = 0;
    *(_QWORD *)(this + 16) = 3;
    *(_DWORD *)(this + 32) = 0;
    if ((v1 & 0x10) != 0)
    {
      v2 = *(_QWORD *)(this + 24);
      if (v2 != MEMORY[0x24BEDD958])
      {
        if (*(char *)(v2 + 23) < 0)
        {
          **(_BYTE **)v2 = 0;
          *(_QWORD *)(v2 + 8) = 0;
        }
        else
        {
          *(_BYTE *)v2 = 0;
          *(_BYTE *)(v2 + 23) = 0;
        }
      }
    }
    *(_DWORD *)(this + 36) = 0;
  }
  *(_DWORD *)(this + 44) = 0;
  return this;
}

uint64_t CLMicroLocationProto::ATVAirplayBluetoothRssi::MergePartialFromCodedStream(CLMicroLocationProto::ATVAirplayBluetoothRssi *this, wireless_diagnostics::google::protobuf::io::CodedInputStream *a2)
{
  unsigned int *v4;
  uint64_t v5;
  char *v6;
  uint64_t TagFallback;
  int v8;
  char *v9;
  unsigned int v10;
  unint64_t v11;
  char *v12;
  int v13;
  unint64_t v14;
  char *v15;
  uint64_t result;
  _BYTE *v17;
  _BYTE *v18;
  _BYTE *v19;
  _BYTE *v20;
  _QWORD *v21;
  _BYTE *v22;
  unsigned int v23;
  unsigned __int8 *v24;
  unsigned int v25[2];

  v4 = (unsigned int *)((char *)this + 32);
  v5 = MEMORY[0x24BEDD958];
  while (2)
  {
    v6 = (char *)*((_QWORD *)a2 + 1);
    if ((unint64_t)v6 >= *((_QWORD *)a2 + 2) || *v6 < 0)
    {
      TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(a2);
      *((_DWORD *)a2 + 8) = TagFallback;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    else
    {
      TagFallback = *v6;
      *((_DWORD *)a2 + 8) = TagFallback;
      *((_QWORD *)a2 + 1) = v6 + 1;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    switch(TagFallback >> 3)
    {
      case 1u:
        v8 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_22;
        v25[0] = 0;
        v9 = (char *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v9 >= *((_QWORD *)a2 + 2) || *v9 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v25);
          if (!(_DWORD)result)
            return result;
          v10 = v25[0];
        }
        else
        {
          v10 = *v9;
          *((_QWORD *)a2 + 1) = v9 + 1;
        }
        if (v10 - 1 <= 5)
        {
          *((_DWORD *)this + 11) |= 1u;
          *((_DWORD *)this + 4) = v10;
        }
        v17 = (_BYTE *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v17 < *((_QWORD *)a2 + 2) && *v17 == 17)
        {
          *((_QWORD *)a2 + 1) = v17 + 1;
          goto LABEL_33;
        }
        continue;
      case 2u:
        v8 = TagFallback & 7;
        if (v8 != 1)
          goto LABEL_22;
LABEL_33:
        *(_QWORD *)v25 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(a2, (unint64_t *)v25) & 1) == 0)return 0;
        *((_QWORD *)this + 1) = *(_QWORD *)v25;
        *((_DWORD *)this + 11) |= 2u;
        v18 = (_BYTE *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v18 >= *((_QWORD *)a2 + 2) || *v18 != 29)
          continue;
        *((_QWORD *)a2 + 1) = v18 + 1;
LABEL_37:
        v25[0] = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback(a2, v25) & 1) != 0)
        {
          *((_DWORD *)this + 5) = v25[0];
          *((_DWORD *)this + 11) |= 4u;
          v19 = (_BYTE *)*((_QWORD *)a2 + 1);
          v11 = *((_QWORD *)a2 + 2);
          if ((unint64_t)v19 < v11 && *v19 == 32)
          {
            v12 = v19 + 1;
            *((_QWORD *)a2 + 1) = v12;
LABEL_41:
            if ((unint64_t)v12 >= v11 || *v12 < 0)
            {
              result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v4);
              if (!(_DWORD)result)
                return result;
              v20 = (_BYTE *)*((_QWORD *)a2 + 1);
              v11 = *((_QWORD *)a2 + 2);
            }
            else
            {
              *v4 = *v12;
              v20 = v12 + 1;
              *((_QWORD *)a2 + 1) = v20;
            }
            v13 = *((_DWORD *)this + 11) | 8;
            *((_DWORD *)this + 11) = v13;
            if ((unint64_t)v20 < v11 && *v20 == 42)
            {
              *((_QWORD *)a2 + 1) = v20 + 1;
LABEL_49:
              *((_DWORD *)this + 11) = v13 | 0x10;
              if (*((_QWORD *)this + 3) == v5)
              {
                v21 = (_QWORD *)operator new();
                v21[1] = 0;
                v21[2] = 0;
                *v21 = 0;
                *((_QWORD *)this + 3) = v21;
              }
              result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadBytes();
              if (!(_DWORD)result)
                return result;
              v22 = (_BYTE *)*((_QWORD *)a2 + 1);
              v14 = *((_QWORD *)a2 + 2);
              if ((unint64_t)v22 < v14 && *v22 == 48)
              {
                v15 = v22 + 1;
                *((_QWORD *)a2 + 1) = v15;
LABEL_55:
                v25[0] = 0;
                if ((unint64_t)v15 >= v14 || *v15 < 0)
                {
                  result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v25);
                  if (!(_DWORD)result)
                    return result;
                  v23 = v25[0];
                  v24 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
                  v14 = *((_QWORD *)a2 + 2);
                }
                else
                {
                  v23 = *v15;
                  v24 = (unsigned __int8 *)(v15 + 1);
                  *((_QWORD *)a2 + 1) = v24;
                }
                *((_DWORD *)this + 9) = v23;
                *((_DWORD *)this + 11) |= 0x20u;
                if (v24 == (unsigned __int8 *)v14
                  && (*((_DWORD *)a2 + 11) || *((_DWORD *)a2 + 6) == *((_DWORD *)a2 + 10)))
                {
                  *((_DWORD *)a2 + 8) = 0;
                  result = 1;
                  *((_BYTE *)a2 + 36) = 1;
                  return result;
                }
              }
            }
          }
          continue;
        }
        return 0;
      case 3u:
        v8 = TagFallback & 7;
        if (v8 == 5)
          goto LABEL_37;
        goto LABEL_22;
      case 4u:
        v8 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_22;
        v12 = (char *)*((_QWORD *)a2 + 1);
        v11 = *((_QWORD *)a2 + 2);
        goto LABEL_41;
      case 5u:
        v8 = TagFallback & 7;
        if (v8 != 2)
          goto LABEL_22;
        v13 = *((_DWORD *)this + 11);
        goto LABEL_49;
      case 6u:
        v8 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_22;
        v15 = (char *)*((_QWORD *)a2 + 1);
        v14 = *((_QWORD *)a2 + 2);
        goto LABEL_55;
      default:
        v8 = TagFallback & 7;
LABEL_22:
        if (v8 == 4)
          return 1;
        if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(a2, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback) & 1) == 0)return 0;
        continue;
    }
  }
}

uint64_t CLMicroLocationProto::ATVAirplayBluetoothRssi::SerializeWithCachedSizes(uint64_t this, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a2, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  int v6;

  v5 = this;
  v6 = *(_DWORD *)(this + 44);
  if ((v6 & 1) != 0)
  {
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(unsigned int *)(this + 16), (uint64_t)a2, a4);
    v6 = *(_DWORD *)(v5 + 44);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0)
        goto LABEL_4;
      goto LABEL_10;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, (uint64_t)a2, *(double *)(v5 + 8), a3);
  v6 = *(_DWORD *)(v5 + 44);
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0)
      goto LABEL_5;
    goto LABEL_11;
  }
LABEL_10:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteFloat((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, (uint64_t)a2, *(float *)(v5 + 20), a3);
  v6 = *(_DWORD *)(v5 + 44);
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_12;
  }
LABEL_11:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4, *(unsigned int *)(v5 + 32), (uint64_t)a2, a4);
  v6 = *(_DWORD *)(v5 + 44);
  if ((v6 & 0x10) == 0)
  {
LABEL_6:
    if ((v6 & 0x20) == 0)
      return this;
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)6, *(unsigned int *)(v5 + 36), (uint64_t)a2, a4);
  }
LABEL_12:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBytes();
  if ((*(_DWORD *)(v5 + 44) & 0x20) != 0)
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)6, *(unsigned int *)(v5 + 36), (uint64_t)a2, a4);
  return this;
}

uint64_t CLMicroLocationProto::ATVAirplayBluetoothRssi::ByteSize(CLMicroLocationProto::ATVAirplayBluetoothRssi *this)
{
  int v2;
  unsigned int v3;
  uint64_t v4;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v5;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v6;
  int v7;
  uint64_t v8;
  int v9;
  char v10;
  uint64_t v11;
  unint64_t v12;
  int v13;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v14;
  int v15;

  LOBYTE(v2) = *((_BYTE *)this + 44);
  if (!(_BYTE)v2)
  {
    v4 = 0;
    goto LABEL_38;
  }
  if ((*((_BYTE *)this + 44) & 1) != 0)
  {
    v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 4);
    if ((v5 & 0x80000000) != 0)
    {
      v3 = 11;
    }
    else if (v5 >= 0x80)
    {
      v3 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v5) + 1;
      v2 = *((_DWORD *)this + 11);
    }
    else
    {
      v3 = 2;
    }
  }
  else
  {
    v3 = 0;
  }
  if ((v2 & 2) != 0)
    v3 += 9;
  if ((v2 & 4) != 0)
    v4 = v3 + 5;
  else
    v4 = v3;
  if ((v2 & 8) != 0)
  {
    v6 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 8);
    if (v6 >= 0x80)
    {
      v7 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v6) + 1;
      v2 = *((_DWORD *)this + 11);
    }
    else
    {
      v7 = 2;
    }
    v4 = (v7 + v4);
    if ((v2 & 0x10) == 0)
    {
LABEL_17:
      if ((v2 & 0x20) == 0)
        goto LABEL_38;
      goto LABEL_32;
    }
  }
  else if ((v2 & 0x10) == 0)
  {
    goto LABEL_17;
  }
  v8 = *((_QWORD *)this + 3);
  v9 = *(unsigned __int8 *)(v8 + 23);
  v10 = v9;
  v11 = *(_QWORD *)(v8 + 8);
  if ((v9 & 0x80u) == 0)
    v12 = *(unsigned __int8 *)(v8 + 23);
  else
    v12 = v11;
  if (v12 >= 0x80)
  {
    v13 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v12);
    v9 = *(unsigned __int8 *)(v8 + 23);
    v11 = *(_QWORD *)(v8 + 8);
    v2 = *((_DWORD *)this + 11);
    v10 = *(_BYTE *)(v8 + 23);
  }
  else
  {
    v13 = 1;
  }
  if (v10 < 0)
    v9 = v11;
  v4 = (v4 + v13 + v9 + 1);
  if ((v2 & 0x20) != 0)
  {
LABEL_32:
    v14 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 9);
    if ((v14 & 0x80000000) != 0)
    {
      v15 = 11;
    }
    else if (v14 >= 0x80)
    {
      v15 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v14) + 1;
    }
    else
    {
      v15 = 2;
    }
    v4 = (v15 + v4);
  }
LABEL_38:
  *((_DWORD *)this + 10) = v4;
  return v4;
}

void CLMicroLocationProto::ATVAirplayBluetoothRssi::CheckTypeAndMergeFrom(CLMicroLocationProto::ATVAirplayBluetoothRssi *this, const wireless_diagnostics::google::protobuf::MessageLite *lpsrc)
{
  uint64_t v4;
  uint64_t v5;

  CLMicroLocationProto::ATVAirplayBluetoothRssi::MergeFrom(this, lpsrc);
}

uint64_t CLMicroLocationProto::ATVAirplayBluetoothRssi::IsInitialized(CLMicroLocationProto::ATVAirplayBluetoothRssi *this)
{
  return 1;
}

_QWORD *CLMicroLocationProto::ATVAirplayBluetoothRssi::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CLMicroLocationProto.ATVAirplayBluetoothRssi");
}

void CLMicroLocationProto::HomeKitBluetoothRssi::MergeFrom(CLMicroLocationProto::HomeKitBluetoothRssi *this, const CLMicroLocationProto::HomeKitBluetoothRssi *a2)
{
  int v4;
  int v5;
  uint64_t v6;
  int v7;
  const std::string *v8;
  std::string *v9;
  int v10;
  int v11;
  _BYTE v12[48];

  if (a2 == this)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v12);
  }
  LOBYTE(v4) = *((_BYTE *)a2 + 44);
  if (!(_BYTE)v4)
    return;
  if ((*((_BYTE *)a2 + 44) & 1) != 0)
  {
    v5 = *((_DWORD *)a2 + 4);
    if ((v5 - 1) >= 6)
      CLMicroLocationProto::HomeKitBluetoothRssi::MergeFrom();
    *((_DWORD *)this + 11) |= 1u;
    *((_DWORD *)this + 4) = v5;
    v4 = *((_DWORD *)a2 + 11);
  }
  if ((v4 & 2) != 0)
  {
    v6 = *((_QWORD *)a2 + 1);
    *((_DWORD *)this + 11) |= 2u;
    *((_QWORD *)this + 1) = v6;
    v4 = *((_DWORD *)a2 + 11);
    if ((v4 & 4) == 0)
    {
LABEL_9:
      if ((v4 & 8) == 0)
        goto LABEL_10;
LABEL_15:
      v8 = (const std::string *)*((_QWORD *)a2 + 3);
      *((_DWORD *)this + 11) |= 8u;
      v9 = (std::string *)*((_QWORD *)this + 3);
      if (v9 == (std::string *)MEMORY[0x24BEDD958])
      {
        v9 = (std::string *)operator new();
        v9->__r_.__value_.__l.__size_ = 0;
        v9->__r_.__value_.__r.__words[2] = 0;
        v9->__r_.__value_.__r.__words[0] = 0;
        *((_QWORD *)this + 3) = v9;
      }
      std::string::operator=(v9, v8);
      v4 = *((_DWORD *)a2 + 11);
      if ((v4 & 0x10) == 0)
      {
LABEL_11:
        if ((v4 & 0x20) == 0)
          return;
        goto LABEL_20;
      }
      goto LABEL_18;
    }
  }
  else if ((v4 & 4) == 0)
  {
    goto LABEL_9;
  }
  v7 = *((_DWORD *)a2 + 5);
  *((_DWORD *)this + 11) |= 4u;
  *((_DWORD *)this + 5) = v7;
  v4 = *((_DWORD *)a2 + 11);
  if ((v4 & 8) != 0)
    goto LABEL_15;
LABEL_10:
  if ((v4 & 0x10) == 0)
    goto LABEL_11;
LABEL_18:
  v10 = *((_DWORD *)a2 + 8);
  if ((v10 - 1) >= 0xF)
    CLMicroLocationProto::HomeKitBluetoothRssi::MergeFrom();
  *((_DWORD *)this + 11) |= 0x10u;
  *((_DWORD *)this + 8) = v10;
  if ((*((_DWORD *)a2 + 11) & 0x20) != 0)
  {
LABEL_20:
    v11 = *((_DWORD *)a2 + 9);
    if ((v11 - 1) >= 2)
      CLMicroLocationProto::HomeKitBluetoothRssi::MergeFrom();
    *((_DWORD *)this + 11) |= 0x20u;
    *((_DWORD *)this + 9) = v11;
  }
}

void sub_241AB6108(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void CLMicroLocationProto::HomeKitBluetoothRssi::~HomeKitBluetoothRssi(CLMicroLocationProto::HomeKitBluetoothRssi *this)
{
  *(_QWORD *)this = &off_2511D6B78;
  CLMicroLocationProto::WiFiRange::SharedDtor(this);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

{
  CLMicroLocationProto::HomeKitBluetoothRssi::~HomeKitBluetoothRssi(this);
  JUMPOUT(0x2426A04D4);
}

double CLMicroLocationProto::HomeKitBluetoothRssi::New(CLMicroLocationProto::HomeKitBluetoothRssi *this)
{
  uint64_t v1;
  uint64_t v2;
  double result;

  v1 = operator new();
  *(_QWORD *)v1 = &off_2511D6B78;
  *(_QWORD *)(v1 + 8) = 0;
  v2 = MEMORY[0x24BEDD958];
  *(_QWORD *)(v1 + 16) = 4;
  *(_QWORD *)(v1 + 24) = v2;
  *(_QWORD *)&result = 0x100000001;
  *(_OWORD *)(v1 + 32) = xmmword_241BB7100;
  return result;
}

uint64_t CLMicroLocationProto::HomeKitBluetoothRssi::Clear(uint64_t this)
{
  char v1;
  uint64_t v2;

  v1 = *(_BYTE *)(this + 44);
  if (v1)
  {
    *(_QWORD *)(this + 8) = 0;
    *(_QWORD *)(this + 16) = 4;
    if ((v1 & 8) != 0)
    {
      v2 = *(_QWORD *)(this + 24);
      if (v2 != MEMORY[0x24BEDD958])
      {
        if (*(char *)(v2 + 23) < 0)
        {
          **(_BYTE **)v2 = 0;
          *(_QWORD *)(v2 + 8) = 0;
        }
        else
        {
          *(_BYTE *)v2 = 0;
          *(_BYTE *)(v2 + 23) = 0;
        }
      }
    }
    *(_QWORD *)(this + 32) = 0x100000001;
  }
  *(_DWORD *)(this + 44) = 0;
  return this;
}

uint64_t CLMicroLocationProto::HomeKitBluetoothRssi::MergePartialFromCodedStream(CLMicroLocationProto::HomeKitBluetoothRssi *this, wireless_diagnostics::google::protobuf::io::CodedInputStream *a2)
{
  uint64_t v4;
  char *v5;
  uint64_t TagFallback;
  int v7;
  char *v8;
  unsigned int v9;
  int v10;
  unint64_t v11;
  char *v12;
  unint64_t v13;
  char *v14;
  uint64_t result;
  _BYTE *v16;
  _BYTE *v17;
  _BYTE *v18;
  _QWORD *v19;
  _BYTE *v20;
  unsigned int v21;
  _BYTE *v22;
  unsigned int v23;
  unsigned int v24[2];

  v4 = MEMORY[0x24BEDD958];
  while (2)
  {
    v5 = (char *)*((_QWORD *)a2 + 1);
    if ((unint64_t)v5 >= *((_QWORD *)a2 + 2) || *v5 < 0)
    {
      TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(a2);
      *((_DWORD *)a2 + 8) = TagFallback;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    else
    {
      TagFallback = *v5;
      *((_DWORD *)a2 + 8) = TagFallback;
      *((_QWORD *)a2 + 1) = v5 + 1;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    switch(TagFallback >> 3)
    {
      case 1u:
        v7 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_22;
        v24[0] = 0;
        v8 = (char *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v8 >= *((_QWORD *)a2 + 2) || *v8 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v24);
          if (!(_DWORD)result)
            return result;
          v9 = v24[0];
        }
        else
        {
          v9 = *v8;
          *((_QWORD *)a2 + 1) = v8 + 1;
        }
        if (v9 - 1 <= 5)
        {
          *((_DWORD *)this + 11) |= 1u;
          *((_DWORD *)this + 4) = v9;
        }
        v16 = (_BYTE *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v16 < *((_QWORD *)a2 + 2) && *v16 == 17)
        {
          *((_QWORD *)a2 + 1) = v16 + 1;
          goto LABEL_33;
        }
        continue;
      case 2u:
        v7 = TagFallback & 7;
        if (v7 != 1)
          goto LABEL_22;
LABEL_33:
        *(_QWORD *)v24 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(a2, (unint64_t *)v24) & 1) == 0)return 0;
        *((_QWORD *)this + 1) = *(_QWORD *)v24;
        *((_DWORD *)this + 11) |= 2u;
        v17 = (_BYTE *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v17 >= *((_QWORD *)a2 + 2) || *v17 != 29)
          continue;
        *((_QWORD *)a2 + 1) = v17 + 1;
LABEL_37:
        v24[0] = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback(a2, v24) & 1) != 0)
        {
          *((_DWORD *)this + 5) = v24[0];
          v10 = *((_DWORD *)this + 11) | 4;
          *((_DWORD *)this + 11) = v10;
          v18 = (_BYTE *)*((_QWORD *)a2 + 1);
          if ((unint64_t)v18 < *((_QWORD *)a2 + 2) && *v18 == 34)
          {
            *((_QWORD *)a2 + 1) = v18 + 1;
LABEL_41:
            *((_DWORD *)this + 11) = v10 | 8;
            if (*((_QWORD *)this + 3) == v4)
            {
              v19 = (_QWORD *)operator new();
              v19[1] = 0;
              v19[2] = 0;
              *v19 = 0;
              *((_QWORD *)this + 3) = v19;
            }
            result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadBytes();
            if (!(_DWORD)result)
              return result;
            v20 = (_BYTE *)*((_QWORD *)a2 + 1);
            v11 = *((_QWORD *)a2 + 2);
            if ((unint64_t)v20 < v11 && *v20 == 40)
            {
              v12 = v20 + 1;
              *((_QWORD *)a2 + 1) = v12;
LABEL_47:
              v24[0] = 0;
              if ((unint64_t)v12 >= v11 || *v12 < 0)
              {
                result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v24);
                if (!(_DWORD)result)
                  return result;
                v21 = v24[0];
              }
              else
              {
                v21 = *v12;
                *((_QWORD *)a2 + 1) = v12 + 1;
              }
              if (v21 - 1 <= 0xE)
              {
                *((_DWORD *)this + 11) |= 0x10u;
                *((_DWORD *)this + 8) = v21;
              }
              v22 = (_BYTE *)*((_QWORD *)a2 + 1);
              v13 = *((_QWORD *)a2 + 2);
              if ((unint64_t)v22 < v13 && *v22 == 48)
              {
                v14 = v22 + 1;
                *((_QWORD *)a2 + 1) = v14;
LABEL_57:
                v24[0] = 0;
                if ((unint64_t)v14 >= v13 || *v14 < 0)
                {
                  result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v24);
                  if (!(_DWORD)result)
                    return result;
                  v23 = v24[0];
                }
                else
                {
                  v23 = *v14;
                  *((_QWORD *)a2 + 1) = v14 + 1;
                }
                if (v23 - 1 <= 1)
                {
                  *((_DWORD *)this + 11) |= 0x20u;
                  *((_DWORD *)this + 9) = v23;
                }
                if (*((_QWORD *)a2 + 1) == *((_QWORD *)a2 + 2)
                  && (*((_DWORD *)a2 + 11) || *((_DWORD *)a2 + 6) == *((_DWORD *)a2 + 10)))
                {
                  *((_DWORD *)a2 + 8) = 0;
                  result = 1;
                  *((_BYTE *)a2 + 36) = 1;
                  return result;
                }
              }
            }
          }
          continue;
        }
        return 0;
      case 3u:
        v7 = TagFallback & 7;
        if (v7 == 5)
          goto LABEL_37;
        goto LABEL_22;
      case 4u:
        v7 = TagFallback & 7;
        if (v7 != 2)
          goto LABEL_22;
        v10 = *((_DWORD *)this + 11);
        goto LABEL_41;
      case 5u:
        v7 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_22;
        v12 = (char *)*((_QWORD *)a2 + 1);
        v11 = *((_QWORD *)a2 + 2);
        goto LABEL_47;
      case 6u:
        v7 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_22;
        v14 = (char *)*((_QWORD *)a2 + 1);
        v13 = *((_QWORD *)a2 + 2);
        goto LABEL_57;
      default:
        v7 = TagFallback & 7;
LABEL_22:
        if (v7 == 4)
          return 1;
        if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(a2, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback) & 1) == 0)return 0;
        continue;
    }
  }
}

uint64_t CLMicroLocationProto::HomeKitBluetoothRssi::SerializeWithCachedSizes(uint64_t this, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a2, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  int v6;

  v5 = this;
  v6 = *(_DWORD *)(this + 44);
  if ((v6 & 1) != 0)
  {
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(unsigned int *)(this + 16), (uint64_t)a2, a4);
    v6 = *(_DWORD *)(v5 + 44);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0)
        goto LABEL_4;
      goto LABEL_10;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, (uint64_t)a2, *(double *)(v5 + 8), a3);
  v6 = *(_DWORD *)(v5 + 44);
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0)
      goto LABEL_5;
    goto LABEL_11;
  }
LABEL_10:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteFloat((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, (uint64_t)a2, *(float *)(v5 + 20), a3);
  v6 = *(_DWORD *)(v5 + 44);
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_12;
  }
LABEL_11:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBytes();
  v6 = *(_DWORD *)(v5 + 44);
  if ((v6 & 0x10) == 0)
  {
LABEL_6:
    if ((v6 & 0x20) == 0)
      return this;
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)6, *(unsigned int *)(v5 + 36), (uint64_t)a2, a4);
  }
LABEL_12:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5, *(unsigned int *)(v5 + 32), (uint64_t)a2, a4);
  if ((*(_DWORD *)(v5 + 44) & 0x20) != 0)
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)6, *(unsigned int *)(v5 + 36), (uint64_t)a2, a4);
  return this;
}

uint64_t CLMicroLocationProto::HomeKitBluetoothRssi::ByteSize(CLMicroLocationProto::HomeKitBluetoothRssi *this)
{
  int v2;
  unsigned int v3;
  uint64_t v4;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v5;
  uint64_t v6;
  int v7;
  char v8;
  uint64_t v9;
  unint64_t v10;
  int v11;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v12;
  int v13;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v14;
  int v15;

  LOBYTE(v2) = *((_BYTE *)this + 44);
  if (!(_BYTE)v2)
  {
    v4 = 0;
    goto LABEL_40;
  }
  if ((*((_BYTE *)this + 44) & 1) != 0)
  {
    v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 4);
    if ((v5 & 0x80000000) != 0)
    {
      v3 = 11;
    }
    else if (v5 >= 0x80)
    {
      v3 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v5) + 1;
      v2 = *((_DWORD *)this + 11);
    }
    else
    {
      v3 = 2;
    }
  }
  else
  {
    v3 = 0;
  }
  if ((v2 & 2) != 0)
    v3 += 9;
  if ((v2 & 4) != 0)
    v4 = v3 + 5;
  else
    v4 = v3;
  if ((v2 & 8) != 0)
  {
    v6 = *((_QWORD *)this + 3);
    v7 = *(unsigned __int8 *)(v6 + 23);
    v8 = v7;
    v9 = *(_QWORD *)(v6 + 8);
    if ((v7 & 0x80u) == 0)
      v10 = *(unsigned __int8 *)(v6 + 23);
    else
      v10 = v9;
    if (v10 >= 0x80)
    {
      v11 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v10);
      v7 = *(unsigned __int8 *)(v6 + 23);
      v9 = *(_QWORD *)(v6 + 8);
      v2 = *((_DWORD *)this + 11);
      v8 = *(_BYTE *)(v6 + 23);
    }
    else
    {
      v11 = 1;
    }
    if (v8 < 0)
      v7 = v9;
    v4 = (v4 + v11 + v7 + 1);
    if ((v2 & 0x10) == 0)
    {
LABEL_17:
      if ((v2 & 0x20) == 0)
        goto LABEL_40;
      goto LABEL_34;
    }
  }
  else if ((v2 & 0x10) == 0)
  {
    goto LABEL_17;
  }
  v12 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 8);
  if ((v12 & 0x80000000) != 0)
  {
    v13 = 11;
  }
  else if (v12 >= 0x80)
  {
    v13 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v12) + 1;
    v2 = *((_DWORD *)this + 11);
  }
  else
  {
    v13 = 2;
  }
  v4 = (v13 + v4);
  if ((v2 & 0x20) != 0)
  {
LABEL_34:
    v14 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 9);
    if ((v14 & 0x80000000) != 0)
    {
      v15 = 11;
    }
    else if (v14 >= 0x80)
    {
      v15 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v14) + 1;
    }
    else
    {
      v15 = 2;
    }
    v4 = (v15 + v4);
  }
LABEL_40:
  *((_DWORD *)this + 10) = v4;
  return v4;
}

void CLMicroLocationProto::HomeKitBluetoothRssi::CheckTypeAndMergeFrom(CLMicroLocationProto::HomeKitBluetoothRssi *this, const wireless_diagnostics::google::protobuf::MessageLite *lpsrc)
{
  uint64_t v4;
  uint64_t v5;

  CLMicroLocationProto::HomeKitBluetoothRssi::MergeFrom(this, lpsrc);
}

uint64_t CLMicroLocationProto::HomeKitBluetoothRssi::IsInitialized(CLMicroLocationProto::HomeKitBluetoothRssi *this)
{
  return 1;
}

_QWORD *CLMicroLocationProto::HomeKitBluetoothRssi::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CLMicroLocationProto.HomeKitBluetoothRssi");
}

CLMicroLocationProto::Measurement *CLMicroLocationProto::Measurement::Measurement(CLMicroLocationProto::Measurement *this, const CLMicroLocationProto::Measurement *a2)
{
  *(_QWORD *)this = &off_2511D6BF0;
  *((_QWORD *)this + 8) = 1;
  *((_DWORD *)this + 18) = 0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *((_QWORD *)this + 7) = 0;
  CLMicroLocationProto::Measurement::MergeFrom(this, a2);
  return this;
}

void sub_241AB6890(_Unwind_Exception *a1)
{
  wireless_diagnostics::google::protobuf::MessageLite *v1;

  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(v1);
  _Unwind_Resume(a1);
}

float CLMicroLocationProto::Measurement::MergeFrom(CLMicroLocationProto::Measurement *this, const CLMicroLocationProto::Measurement *a2)
{
  CLMicroLocationProto::Measurement *v3;
  uint64_t v4;
  int v5;
  int v6;
  CLMicroLocationProto::WiFiRssi *v7;
  const CLMicroLocationProto::WiFiRssi *v8;
  CLMicroLocationProto::WiFiRange *v9;
  uint64_t v10;
  const CLMicroLocationProto::WiFiRange *v11;
  CLMicroLocationProto::ATVAirplayBluetoothRssi *v12;
  uint64_t v13;
  const CLMicroLocationProto::ATVAirplayBluetoothRssi *v14;
  CLMicroLocationProto::HomeKitBluetoothRssi *v15;
  uint64_t v16;
  const CLMicroLocationProto::HomeKitBluetoothRssi *v17;
  CLMicroLocationProto::BleLeechedBeacons *v18;
  uint64_t v19;
  const CLMicroLocationProto::BleLeechedBeacons *v20;
  CLMicroLocationProto::UwbRange *v21;
  const CLMicroLocationProto::UwbRange *v22;
  _BYTE v24[48];

  v3 = this;
  if (a2 == this)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v24);
  }
  LOBYTE(v5) = *((_BYTE *)a2 + 72);
  if (!(_BYTE)v5)
    return *(float *)&v4;
  if ((*((_BYTE *)a2 + 72) & 1) != 0)
  {
    v6 = *((_DWORD *)a2 + 16);
    if ((v6 - 1) >= 6)
      CLMicroLocationProto::Measurement::MergeFrom();
    *((_DWORD *)v3 + 18) |= 1u;
    *((_DWORD *)v3 + 16) = v6;
    v5 = *((_DWORD *)a2 + 18);
  }
  if ((v5 & 2) != 0)
  {
    v4 = *((_QWORD *)a2 + 1);
    *((_DWORD *)v3 + 18) |= 2u;
    *((_QWORD *)v3 + 1) = v4;
    v5 = *((_DWORD *)a2 + 18);
    if ((v5 & 4) == 0)
    {
LABEL_9:
      if ((v5 & 8) == 0)
        goto LABEL_10;
      goto LABEL_21;
    }
  }
  else if ((v5 & 4) == 0)
  {
    goto LABEL_9;
  }
  *((_DWORD *)v3 + 18) |= 4u;
  v7 = (CLMicroLocationProto::WiFiRssi *)*((_QWORD *)v3 + 2);
  if (!v7)
  {
    this = (CLMicroLocationProto::Measurement *)operator new();
    v7 = this;
    *((_DWORD *)this + 4) = 1;
    *(_QWORD *)this = &off_2511D6920;
    *((_QWORD *)this + 1) = 0;
    *((_DWORD *)this + 9) = 0;
    *((_DWORD *)this + 10) = 0;
    *(_QWORD *)((char *)this + 28) = 0;
    *(_QWORD *)((char *)this + 20) = 0;
    *((_QWORD *)v3 + 2) = this;
  }
  v8 = (const CLMicroLocationProto::WiFiRssi *)*((_QWORD *)a2 + 2);
  if (!v8)
  {
    CLMicroLocationProto::protobuf_AddDesc_microlocation_2eproto(this);
    v8 = *(const CLMicroLocationProto::WiFiRssi **)(CLMicroLocationProto::Measurement::default_instance_ + 16);
  }
  CLMicroLocationProto::WiFiRssi::MergeFrom(v7, v8);
  v5 = *((_DWORD *)a2 + 18);
  if ((v5 & 8) == 0)
  {
LABEL_10:
    if ((v5 & 0x10) == 0)
      goto LABEL_11;
    goto LABEL_26;
  }
LABEL_21:
  *((_DWORD *)v3 + 18) |= 8u;
  v9 = (CLMicroLocationProto::WiFiRange *)*((_QWORD *)v3 + 3);
  if (!v9)
  {
    this = (CLMicroLocationProto::Measurement *)operator new();
    v9 = this;
    *(_QWORD *)this = &off_2511D6A88;
    *((_QWORD *)this + 1) = 0;
    v10 = MEMORY[0x24BEDD958];
    *((_QWORD *)this + 2) = 2;
    *((_QWORD *)this + 3) = v10;
    *((_DWORD *)this + 10) = 0;
    *((_QWORD *)this + 4) = 0;
    *((_QWORD *)v3 + 3) = this;
  }
  v11 = (const CLMicroLocationProto::WiFiRange *)*((_QWORD *)a2 + 3);
  if (!v11)
  {
    CLMicroLocationProto::protobuf_AddDesc_microlocation_2eproto(this);
    v11 = *(const CLMicroLocationProto::WiFiRange **)(CLMicroLocationProto::Measurement::default_instance_ + 24);
  }
  CLMicroLocationProto::WiFiRange::MergeFrom(v9, v11);
  v5 = *((_DWORD *)a2 + 18);
  if ((v5 & 0x10) == 0)
  {
LABEL_11:
    if ((v5 & 0x20) == 0)
      goto LABEL_12;
LABEL_31:
    *((_DWORD *)v3 + 18) |= 0x20u;
    v15 = (CLMicroLocationProto::HomeKitBluetoothRssi *)*((_QWORD *)v3 + 5);
    if (!v15)
    {
      this = (CLMicroLocationProto::Measurement *)operator new();
      v15 = this;
      *(_QWORD *)this = &off_2511D6B78;
      *((_QWORD *)this + 1) = 0;
      v16 = MEMORY[0x24BEDD958];
      *((_QWORD *)this + 2) = 4;
      *((_QWORD *)this + 3) = v16;
      *((_OWORD *)this + 2) = xmmword_241BB7100;
      *((_QWORD *)v3 + 5) = this;
    }
    v17 = (const CLMicroLocationProto::HomeKitBluetoothRssi *)*((_QWORD *)a2 + 5);
    if (!v17)
    {
      CLMicroLocationProto::protobuf_AddDesc_microlocation_2eproto(this);
      v17 = *(const CLMicroLocationProto::HomeKitBluetoothRssi **)(CLMicroLocationProto::Measurement::default_instance_
                                                                 + 40);
    }
    CLMicroLocationProto::HomeKitBluetoothRssi::MergeFrom(v15, v17);
    v5 = *((_DWORD *)a2 + 18);
    if ((v5 & 0x40) == 0)
    {
LABEL_13:
      if ((v5 & 0x80) == 0)
        return *(float *)&v4;
      goto LABEL_41;
    }
    goto LABEL_36;
  }
LABEL_26:
  *((_DWORD *)v3 + 18) |= 0x10u;
  v12 = (CLMicroLocationProto::ATVAirplayBluetoothRssi *)*((_QWORD *)v3 + 4);
  if (!v12)
  {
    this = (CLMicroLocationProto::Measurement *)operator new();
    v12 = this;
    *(_QWORD *)this = &off_2511D6B00;
    *((_QWORD *)this + 1) = 0;
    v13 = MEMORY[0x24BEDD958];
    *((_QWORD *)this + 2) = 3;
    *((_QWORD *)this + 3) = v13;
    *((_QWORD *)this + 4) = 0;
    *((_QWORD *)this + 5) = 0;
    *((_QWORD *)v3 + 4) = this;
  }
  v14 = (const CLMicroLocationProto::ATVAirplayBluetoothRssi *)*((_QWORD *)a2 + 4);
  if (!v14)
  {
    CLMicroLocationProto::protobuf_AddDesc_microlocation_2eproto(this);
    v14 = *(const CLMicroLocationProto::ATVAirplayBluetoothRssi **)(CLMicroLocationProto::Measurement::default_instance_
                                                                  + 32);
  }
  CLMicroLocationProto::ATVAirplayBluetoothRssi::MergeFrom(v12, v14);
  v5 = *((_DWORD *)a2 + 18);
  if ((v5 & 0x20) != 0)
    goto LABEL_31;
LABEL_12:
  if ((v5 & 0x40) == 0)
    goto LABEL_13;
LABEL_36:
  *((_DWORD *)v3 + 18) |= 0x40u;
  v18 = (CLMicroLocationProto::BleLeechedBeacons *)*((_QWORD *)v3 + 6);
  if (!v18)
  {
    this = (CLMicroLocationProto::Measurement *)operator new();
    v18 = this;
    *(_QWORD *)this = &off_2511D68A8;
    *((_QWORD *)this + 1) = 0;
    v19 = MEMORY[0x24BEDD958];
    *((_QWORD *)this + 2) = 5;
    *((_QWORD *)this + 3) = v19;
    *((_QWORD *)this + 6) = v19;
    *((_QWORD *)this + 7) = 0;
    *((_QWORD *)this + 4) = 0;
    *((_QWORD *)this + 5) = v19;
    *((_DWORD *)this + 16) = 0;
    *((_QWORD *)v3 + 6) = this;
  }
  v20 = (const CLMicroLocationProto::BleLeechedBeacons *)*((_QWORD *)a2 + 6);
  if (!v20)
  {
    CLMicroLocationProto::protobuf_AddDesc_microlocation_2eproto(this);
    v20 = *(const CLMicroLocationProto::BleLeechedBeacons **)(CLMicroLocationProto::Measurement::default_instance_ + 48);
  }
  CLMicroLocationProto::BleLeechedBeacons::MergeFrom(v18, v20);
  if ((*((_DWORD *)a2 + 18) & 0x80) != 0)
  {
LABEL_41:
    *((_DWORD *)v3 + 18) |= 0x80u;
    v21 = (CLMicroLocationProto::UwbRange *)*((_QWORD *)v3 + 7);
    if (!v21)
    {
      this = (CLMicroLocationProto::Measurement *)operator new();
      v21 = this;
      *(_QWORD *)this = &off_2511D6A10;
      *((_QWORD *)this + 1) = 0;
      *((_QWORD *)this + 2) = 6;
      *((_QWORD *)this + 3) = 0;
      *((_QWORD *)this + 4) = MEMORY[0x24BEDD958];
      *((_QWORD *)this + 5) = 1;
      *((_DWORD *)this + 14) = 0;
      *((_QWORD *)this + 6) = 0;
      *((_QWORD *)v3 + 7) = this;
    }
    v22 = (const CLMicroLocationProto::UwbRange *)*((_QWORD *)a2 + 7);
    if (!v22)
    {
      CLMicroLocationProto::protobuf_AddDesc_microlocation_2eproto(this);
      v22 = *(const CLMicroLocationProto::UwbRange **)(CLMicroLocationProto::Measurement::default_instance_ + 56);
    }
    *(float *)&v4 = CLMicroLocationProto::UwbRange::MergeFrom(v21, v22);
  }
  return *(float *)&v4;
}

void sub_241AB6C8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void CLMicroLocationProto::Measurement::~Measurement(CLMicroLocationProto::Measurement *this)
{
  *(_QWORD *)this = &off_2511D6BF0;
  CLMicroLocationProto::Measurement::SharedDtor(this);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

{
  CLMicroLocationProto::Measurement::~Measurement(this);
  JUMPOUT(0x2426A04D4);
}

void CLMicroLocationProto::Measurement::SharedDtor(CLMicroLocationProto::Measurement *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  CLMicroLocationProto::protobuf_AddDesc_microlocation_2eproto(this);
  if ((CLMicroLocationProto::Measurement *)CLMicroLocationProto::Measurement::default_instance_ != this)
  {
    v2 = *((_QWORD *)this + 2);
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
    v3 = *((_QWORD *)this + 3);
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    v4 = *((_QWORD *)this + 4);
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    v5 = *((_QWORD *)this + 5);
    if (v5)
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
    v6 = *((_QWORD *)this + 6);
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
    v7 = *((_QWORD *)this + 7);
    if (v7)
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  }
}

uint64_t CLMicroLocationProto::Measurement::default_instance(CLMicroLocationProto::Measurement *this)
{
  CLMicroLocationProto::protobuf_AddDesc_microlocation_2eproto(this);
  return CLMicroLocationProto::Measurement::default_instance_;
}

double CLMicroLocationProto::Measurement::New(CLMicroLocationProto::Measurement *this)
{
  uint64_t v1;
  double result;

  v1 = operator new();
  *(_QWORD *)v1 = &off_2511D6BF0;
  *(_QWORD *)(v1 + 64) = 1;
  *(_DWORD *)(v1 + 72) = 0;
  result = 0.0;
  *(_OWORD *)(v1 + 8) = 0u;
  *(_OWORD *)(v1 + 24) = 0u;
  *(_OWORD *)(v1 + 40) = 0u;
  *(_QWORD *)(v1 + 56) = 0;
  return result;
}

uint64_t CLMicroLocationProto::Measurement::Clear(uint64_t this)
{
  uint64_t v1;
  int v2;
  uint64_t v3;

  v1 = this;
  LOBYTE(v2) = *(_BYTE *)(this + 72);
  if ((_BYTE)v2)
  {
    *(_DWORD *)(this + 64) = 1;
    *(_QWORD *)(this + 8) = 0;
    if ((v2 & 4) != 0)
    {
      v3 = *(_QWORD *)(this + 16);
      if (v3)
      {
        if (*(_BYTE *)(v3 + 40))
        {
          *(_DWORD *)(v3 + 16) = 1;
          *(_QWORD *)(v3 + 8) = 0;
          *(_QWORD *)(v3 + 28) = 0;
          *(_QWORD *)(v3 + 20) = 0;
        }
        *(_DWORD *)(v3 + 40) = 0;
        v2 = *(_DWORD *)(this + 72);
      }
    }
    if ((v2 & 8) != 0)
    {
      this = *(_QWORD *)(this + 24);
      if (this)
      {
        this = CLMicroLocationProto::WiFiRange::Clear(this);
        v2 = *(_DWORD *)(v1 + 72);
      }
    }
    if ((v2 & 0x10) != 0)
    {
      this = *(_QWORD *)(v1 + 32);
      if (this)
      {
        this = CLMicroLocationProto::ATVAirplayBluetoothRssi::Clear(this);
        v2 = *(_DWORD *)(v1 + 72);
      }
    }
    if ((v2 & 0x20) != 0)
    {
      this = *(_QWORD *)(v1 + 40);
      if (this)
      {
        this = CLMicroLocationProto::HomeKitBluetoothRssi::Clear(this);
        v2 = *(_DWORD *)(v1 + 72);
      }
    }
    if ((v2 & 0x40) != 0)
    {
      this = *(_QWORD *)(v1 + 48);
      if (this)
      {
        this = CLMicroLocationProto::BleLeechedBeacons::Clear(this);
        v2 = *(_DWORD *)(v1 + 72);
      }
    }
    if ((v2 & 0x80) != 0)
    {
      this = *(_QWORD *)(v1 + 56);
      if (this)
        this = CLMicroLocationProto::UwbRange::Clear(this);
    }
  }
  *(_DWORD *)(v1 + 72) = 0;
  return this;
}

uint64_t CLMicroLocationProto::Measurement::MergePartialFromCodedStream(CLMicroLocationProto::Measurement *this, wireless_diagnostics::google::protobuf::io::CodedInputStream *a2)
{
  uint64_t v4;
  char *v5;
  uint64_t TagFallback;
  int v7;
  char *v8;
  unsigned int v9;
  int v10;
  uint64_t result;
  _BYTE *v12;
  _BYTE *v13;
  uint64_t v14;
  char *v15;
  int v16;
  int v17;
  int v18;
  BOOL v19;
  int v20;
  _BYTE *v21;
  uint64_t v22;
  char *v23;
  int v24;
  int v25;
  int v26;
  int v27;
  _BYTE *v28;
  CLMicroLocationProto::ATVAirplayBluetoothRssi *v29;
  char *v30;
  int v31;
  int v32;
  int v33;
  int v34;
  _BYTE *v35;
  uint64_t v36;
  char *v37;
  int v38;
  int v39;
  int v40;
  int v41;
  _BYTE *v42;
  uint64_t v43;
  char *v44;
  int v45;
  int v46;
  int v47;
  int v48;
  _BYTE *v49;
  uint64_t v50;
  char *v51;
  int v52;
  int v53;
  int v54;
  int v55;
  unsigned int v56[2];

  v4 = MEMORY[0x24BEDD958];
  while (1)
  {
    v5 = (char *)*((_QWORD *)a2 + 1);
    if ((unint64_t)v5 < *((_QWORD *)a2 + 2) && (*v5 & 0x80000000) == 0)
    {
      TagFallback = *v5;
      *((_DWORD *)a2 + 8) = TagFallback;
      *((_QWORD *)a2 + 1) = v5 + 1;
      if (!(_DWORD)TagFallback)
        return 1;
      goto LABEL_7;
    }
    TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(a2);
    *((_DWORD *)a2 + 8) = TagFallback;
    if (!(_DWORD)TagFallback)
      return 1;
LABEL_7:
    switch(TagFallback >> 3)
    {
      case 1u:
        v7 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_26;
        v56[0] = 0;
        v8 = (char *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v8 >= *((_QWORD *)a2 + 2) || *v8 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v56);
          if (!(_DWORD)result)
            return result;
          v9 = v56[0];
        }
        else
        {
          v9 = *v8;
          *((_QWORD *)a2 + 1) = v8 + 1;
        }
        if (v9 - 1 <= 5)
        {
          *((_DWORD *)this + 18) |= 1u;
          *((_DWORD *)this + 16) = v9;
        }
        v12 = (_BYTE *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v12 < *((_QWORD *)a2 + 2) && *v12 == 17)
        {
          *((_QWORD *)a2 + 1) = v12 + 1;
          goto LABEL_36;
        }
        continue;
      case 2u:
        v7 = TagFallback & 7;
        if (v7 != 1)
          goto LABEL_26;
LABEL_36:
        *(_QWORD *)v56 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(a2, (unint64_t *)v56) & 1) == 0)return 0;
        *((_QWORD *)this + 1) = *(_QWORD *)v56;
        v10 = *((_DWORD *)this + 18) | 2;
        *((_DWORD *)this + 18) = v10;
        v13 = (_BYTE *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v13 >= *((_QWORD *)a2 + 2) || *v13 != 26)
          continue;
        *((_QWORD *)a2 + 1) = v13 + 1;
LABEL_40:
        *((_DWORD *)this + 18) = v10 | 4;
        v14 = *((_QWORD *)this + 2);
        if (!v14)
        {
          v14 = operator new();
          *(_DWORD *)(v14 + 16) = 1;
          *(_QWORD *)v14 = &off_2511D6920;
          *(_QWORD *)(v14 + 8) = 0;
          *(_DWORD *)(v14 + 36) = 0;
          *(_DWORD *)(v14 + 40) = 0;
          *(_QWORD *)(v14 + 28) = 0;
          *(_QWORD *)(v14 + 20) = 0;
          *((_QWORD *)this + 2) = v14;
        }
        v56[0] = 0;
        v15 = (char *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v15 >= *((_QWORD *)a2 + 2) || *v15 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v56))return 0;
        }
        else
        {
          v56[0] = *v15;
          *((_QWORD *)a2 + 1) = v15 + 1;
        }
        v16 = *((_DWORD *)a2 + 14);
        v17 = *((_DWORD *)a2 + 15);
        *((_DWORD *)a2 + 14) = v16 + 1;
        if (v16 >= v17)
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(a2);
        if (!CLMicroLocationProto::WiFiRssi::MergePartialFromCodedStream((CLMicroLocationProto::WiFiRssi *)v14, a2)|| !*((_BYTE *)a2 + 36))
        {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(a2);
        v18 = *((_DWORD *)a2 + 14);
        v19 = __OFSUB__(v18, 1);
        v20 = v18 - 1;
        if (v20 < 0 == v19)
          *((_DWORD *)a2 + 14) = v20;
        v21 = (_BYTE *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v21 >= *((_QWORD *)a2 + 2) || *v21 != 34)
          continue;
        *((_QWORD *)a2 + 1) = v21 + 1;
LABEL_54:
        *((_DWORD *)this + 18) |= 8u;
        v22 = *((_QWORD *)this + 3);
        if (!v22)
        {
          v22 = operator new();
          *(_QWORD *)v22 = &off_2511D6A88;
          *(_QWORD *)(v22 + 8) = 0;
          *(_QWORD *)(v22 + 16) = 2;
          *(_QWORD *)(v22 + 24) = v4;
          *(_DWORD *)(v22 + 40) = 0;
          *(_QWORD *)(v22 + 32) = 0;
          *((_QWORD *)this + 3) = v22;
        }
        v56[0] = 0;
        v23 = (char *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v23 >= *((_QWORD *)a2 + 2) || *v23 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v56))return 0;
        }
        else
        {
          v56[0] = *v23;
          *((_QWORD *)a2 + 1) = v23 + 1;
        }
        v24 = *((_DWORD *)a2 + 14);
        v25 = *((_DWORD *)a2 + 15);
        *((_DWORD *)a2 + 14) = v24 + 1;
        if (v24 >= v25)
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(a2);
        if (!CLMicroLocationProto::WiFiRange::MergePartialFromCodedStream((CLMicroLocationProto::WiFiRange *)v22, a2)|| !*((_BYTE *)a2 + 36))
        {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(a2);
        v26 = *((_DWORD *)a2 + 14);
        v19 = __OFSUB__(v26, 1);
        v27 = v26 - 1;
        if (v27 < 0 == v19)
          *((_DWORD *)a2 + 14) = v27;
        v28 = (_BYTE *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v28 >= *((_QWORD *)a2 + 2) || *v28 != 42)
          continue;
        *((_QWORD *)a2 + 1) = v28 + 1;
LABEL_68:
        *((_DWORD *)this + 18) |= 0x10u;
        v29 = (CLMicroLocationProto::ATVAirplayBluetoothRssi *)*((_QWORD *)this + 4);
        if (!v29)
        {
          v29 = (CLMicroLocationProto::ATVAirplayBluetoothRssi *)operator new();
          *(_QWORD *)v29 = &off_2511D6B00;
          *((_QWORD *)v29 + 1) = 0;
          *((_QWORD *)v29 + 2) = 3;
          *((_QWORD *)v29 + 3) = v4;
          *((_QWORD *)v29 + 4) = 0;
          *((_QWORD *)v29 + 5) = 0;
          *((_QWORD *)this + 4) = v29;
        }
        v56[0] = 0;
        v30 = (char *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v30 >= *((_QWORD *)a2 + 2) || *v30 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v56))return 0;
        }
        else
        {
          v56[0] = *v30;
          *((_QWORD *)a2 + 1) = v30 + 1;
        }
        v31 = *((_DWORD *)a2 + 14);
        v32 = *((_DWORD *)a2 + 15);
        *((_DWORD *)a2 + 14) = v31 + 1;
        if (v31 >= v32)
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(a2);
        if (!CLMicroLocationProto::ATVAirplayBluetoothRssi::MergePartialFromCodedStream(v29, a2)
          || !*((_BYTE *)a2 + 36))
        {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(a2);
        v33 = *((_DWORD *)a2 + 14);
        v19 = __OFSUB__(v33, 1);
        v34 = v33 - 1;
        if (v34 < 0 == v19)
          *((_DWORD *)a2 + 14) = v34;
        v35 = (_BYTE *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v35 >= *((_QWORD *)a2 + 2) || *v35 != 50)
          continue;
        *((_QWORD *)a2 + 1) = v35 + 1;
LABEL_82:
        *((_DWORD *)this + 18) |= 0x20u;
        v36 = *((_QWORD *)this + 5);
        if (!v36)
        {
          v36 = operator new();
          *(_QWORD *)v36 = &off_2511D6B78;
          *(_QWORD *)(v36 + 8) = 0;
          *(_QWORD *)(v36 + 16) = 4;
          *(_QWORD *)(v36 + 24) = v4;
          *(_OWORD *)(v36 + 32) = xmmword_241BB7100;
          *((_QWORD *)this + 5) = v36;
        }
        v56[0] = 0;
        v37 = (char *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v37 >= *((_QWORD *)a2 + 2) || *v37 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v56))return 0;
        }
        else
        {
          v56[0] = *v37;
          *((_QWORD *)a2 + 1) = v37 + 1;
        }
        v38 = *((_DWORD *)a2 + 14);
        v39 = *((_DWORD *)a2 + 15);
        *((_DWORD *)a2 + 14) = v38 + 1;
        if (v38 >= v39)
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(a2);
        if (!CLMicroLocationProto::HomeKitBluetoothRssi::MergePartialFromCodedStream((CLMicroLocationProto::HomeKitBluetoothRssi *)v36, a2)|| !*((_BYTE *)a2 + 36))
        {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(a2);
        v40 = *((_DWORD *)a2 + 14);
        v19 = __OFSUB__(v40, 1);
        v41 = v40 - 1;
        if (v41 < 0 == v19)
          *((_DWORD *)a2 + 14) = v41;
        v42 = (_BYTE *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v42 >= *((_QWORD *)a2 + 2) || *v42 != 58)
          continue;
        *((_QWORD *)a2 + 1) = v42 + 1;
LABEL_96:
        *((_DWORD *)this + 18) |= 0x40u;
        v43 = *((_QWORD *)this + 6);
        if (!v43)
        {
          v43 = operator new();
          *(_QWORD *)v43 = &off_2511D68A8;
          *(_QWORD *)(v43 + 8) = 0;
          *(_QWORD *)(v43 + 16) = 5;
          *(_QWORD *)(v43 + 24) = v4;
          *(_QWORD *)(v43 + 48) = v4;
          *(_QWORD *)(v43 + 56) = 0;
          *(_QWORD *)(v43 + 32) = 0;
          *(_QWORD *)(v43 + 40) = v4;
          *(_DWORD *)(v43 + 64) = 0;
          *((_QWORD *)this + 6) = v43;
        }
        v56[0] = 0;
        v44 = (char *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v44 >= *((_QWORD *)a2 + 2) || *v44 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v56))return 0;
        }
        else
        {
          v56[0] = *v44;
          *((_QWORD *)a2 + 1) = v44 + 1;
        }
        v45 = *((_DWORD *)a2 + 14);
        v46 = *((_DWORD *)a2 + 15);
        *((_DWORD *)a2 + 14) = v45 + 1;
        if (v45 >= v46)
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(a2);
        if (!CLMicroLocationProto::BleLeechedBeacons::MergePartialFromCodedStream((CLMicroLocationProto::BleLeechedBeacons *)v43, a2)|| !*((_BYTE *)a2 + 36))
        {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(a2);
        v47 = *((_DWORD *)a2 + 14);
        v19 = __OFSUB__(v47, 1);
        v48 = v47 - 1;
        if (v48 < 0 == v19)
          *((_DWORD *)a2 + 14) = v48;
        v49 = (_BYTE *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v49 >= *((_QWORD *)a2 + 2) || *v49 != 66)
          continue;
        *((_QWORD *)a2 + 1) = v49 + 1;
LABEL_110:
        *((_DWORD *)this + 18) |= 0x80u;
        v50 = *((_QWORD *)this + 7);
        if (!v50)
        {
          v50 = operator new();
          *(_QWORD *)v50 = &off_2511D6A10;
          *(_QWORD *)(v50 + 8) = 0;
          *(_QWORD *)(v50 + 16) = 6;
          *(_QWORD *)(v50 + 24) = 0;
          *(_QWORD *)(v50 + 32) = v4;
          *(_QWORD *)(v50 + 40) = 1;
          *(_DWORD *)(v50 + 56) = 0;
          *(_QWORD *)(v50 + 48) = 0;
          *((_QWORD *)this + 7) = v50;
        }
        v56[0] = 0;
        v51 = (char *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v51 >= *((_QWORD *)a2 + 2) || *v51 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v56))return 0;
        }
        else
        {
          v56[0] = *v51;
          *((_QWORD *)a2 + 1) = v51 + 1;
        }
        v52 = *((_DWORD *)a2 + 14);
        v53 = *((_DWORD *)a2 + 15);
        *((_DWORD *)a2 + 14) = v52 + 1;
        if (v52 >= v53)
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(a2);
        if (!CLMicroLocationProto::UwbRange::MergePartialFromCodedStream((CLMicroLocationProto::UwbRange *)v50, a2)|| !*((_BYTE *)a2 + 36))
        {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(a2);
        v54 = *((_DWORD *)a2 + 14);
        v19 = __OFSUB__(v54, 1);
        v55 = v54 - 1;
        if (v55 < 0 == v19)
          *((_DWORD *)a2 + 14) = v55;
        if (*((_QWORD *)a2 + 1) == *((_QWORD *)a2 + 2)
          && (*((_DWORD *)a2 + 11) || *((_DWORD *)a2 + 6) == *((_DWORD *)a2 + 10)))
        {
          *((_DWORD *)a2 + 8) = 0;
          result = 1;
          *((_BYTE *)a2 + 36) = 1;
          return result;
        }
        break;
      case 3u:
        v7 = TagFallback & 7;
        if (v7 != 2)
          goto LABEL_26;
        v10 = *((_DWORD *)this + 18);
        goto LABEL_40;
      case 4u:
        v7 = TagFallback & 7;
        if (v7 == 2)
          goto LABEL_54;
        goto LABEL_26;
      case 5u:
        v7 = TagFallback & 7;
        if (v7 == 2)
          goto LABEL_68;
        goto LABEL_26;
      case 6u:
        v7 = TagFallback & 7;
        if (v7 == 2)
          goto LABEL_82;
        goto LABEL_26;
      case 7u:
        v7 = TagFallback & 7;
        if (v7 == 2)
          goto LABEL_96;
        goto LABEL_26;
      case 8u:
        v7 = TagFallback & 7;
        if (v7 != 2)
          goto LABEL_26;
        goto LABEL_110;
      default:
        v7 = TagFallback & 7;
LABEL_26:
        if (v7 == 4)
          return 1;
        if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(a2, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback) & 1) == 0)return 0;
        continue;
    }
  }
}

unsigned int *CLMicroLocationProto::Measurement::SerializeWithCachedSizes(unsigned int *this, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a2, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  unsigned int *v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v5 = this;
  v6 = this[18];
  if ((v6 & 1) != 0)
  {
    this = (unsigned int *)wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, this[16], (uint64_t)a2, a4);
    v6 = v5[18];
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0)
        goto LABEL_4;
      goto LABEL_12;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  this = (unsigned int *)wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, (uint64_t)a2, *((double *)v5 + 1), a3);
  v6 = v5[18];
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0)
      goto LABEL_5;
    goto LABEL_15;
  }
LABEL_12:
  v7 = *((_QWORD *)v5 + 2);
  if (!v7)
  {
    CLMicroLocationProto::protobuf_AddDesc_microlocation_2eproto((CLMicroLocationProto *)this);
    v7 = *(_QWORD *)(CLMicroLocationProto::Measurement::default_instance_ + 16);
  }
  this = (unsigned int *)wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, v7, a2, a4);
  v6 = v5[18];
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_18;
  }
LABEL_15:
  v8 = *((_QWORD *)v5 + 3);
  if (!v8)
  {
    CLMicroLocationProto::protobuf_AddDesc_microlocation_2eproto((CLMicroLocationProto *)this);
    v8 = *(_QWORD *)(CLMicroLocationProto::Measurement::default_instance_ + 24);
  }
  this = (unsigned int *)wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4, v8, a2, a4);
  v6 = v5[18];
  if ((v6 & 0x10) == 0)
  {
LABEL_6:
    if ((v6 & 0x20) == 0)
      goto LABEL_7;
    goto LABEL_21;
  }
LABEL_18:
  v9 = *((_QWORD *)v5 + 4);
  if (!v9)
  {
    CLMicroLocationProto::protobuf_AddDesc_microlocation_2eproto((CLMicroLocationProto *)this);
    v9 = *(_QWORD *)(CLMicroLocationProto::Measurement::default_instance_ + 32);
  }
  this = (unsigned int *)wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5, v9, a2, a4);
  v6 = v5[18];
  if ((v6 & 0x20) == 0)
  {
LABEL_7:
    if ((v6 & 0x40) == 0)
      goto LABEL_8;
    goto LABEL_24;
  }
LABEL_21:
  v10 = *((_QWORD *)v5 + 5);
  if (!v10)
  {
    CLMicroLocationProto::protobuf_AddDesc_microlocation_2eproto((CLMicroLocationProto *)this);
    v10 = *(_QWORD *)(CLMicroLocationProto::Measurement::default_instance_ + 40);
  }
  this = (unsigned int *)wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)6, v10, a2, a4);
  v6 = v5[18];
  if ((v6 & 0x40) == 0)
  {
LABEL_8:
    if ((v6 & 0x80) == 0)
      return this;
    goto LABEL_27;
  }
LABEL_24:
  v11 = *((_QWORD *)v5 + 6);
  if (!v11)
  {
    CLMicroLocationProto::protobuf_AddDesc_microlocation_2eproto((CLMicroLocationProto *)this);
    v11 = *(_QWORD *)(CLMicroLocationProto::Measurement::default_instance_ + 48);
  }
  this = (unsigned int *)wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)7, v11, a2, a4);
  if ((v5[18] & 0x80) != 0)
  {
LABEL_27:
    v12 = *((_QWORD *)v5 + 7);
    if (!v12)
    {
      CLMicroLocationProto::protobuf_AddDesc_microlocation_2eproto((CLMicroLocationProto *)this);
      v12 = *(_QWORD *)(CLMicroLocationProto::Measurement::default_instance_ + 56);
    }
    return (unsigned int *)wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)8, v12, a2, a4);
  }
  return this;
}

uint64_t CLMicroLocationProto::Measurement::ByteSize(CLMicroLocationProto::Measurement *this)
{
  int v2;
  unsigned int v3;
  uint64_t v4;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v5;
  int v6;
  CLMicroLocationProto::WiFiRssi *v7;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v8;
  int v9;
  int v10;
  CLMicroLocationProto::WiFiRange *v11;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v12;
  int v13;
  int v14;
  CLMicroLocationProto::ATVAirplayBluetoothRssi *v15;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v16;
  int v17;
  int v18;
  CLMicroLocationProto::HomeKitBluetoothRssi *v19;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v20;
  int v21;
  int v22;
  CLMicroLocationProto::BleLeechedBeacons *v23;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v24;
  int v25;
  int v26;
  CLMicroLocationProto::UwbRange *v27;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v28;
  int v29;
  int v30;

  LOBYTE(v2) = *((_BYTE *)this + 72);
  if (!(_BYTE)v2)
  {
    v4 = 0;
    goto LABEL_57;
  }
  if ((*((_BYTE *)this + 72) & 1) != 0)
  {
    v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 16);
    if ((v5 & 0x80000000) != 0)
    {
      v6 = 10;
    }
    else if (v5 >= 0x80)
    {
      v6 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v5);
      v2 = *((_DWORD *)this + 18);
    }
    else
    {
      v6 = 1;
    }
    v3 = v6 + 1;
  }
  else
  {
    v3 = 0;
  }
  if ((v2 & 2) != 0)
    v4 = v3 + 9;
  else
    v4 = v3;
  if ((v2 & 4) != 0)
  {
    v7 = (CLMicroLocationProto::WiFiRssi *)*((_QWORD *)this + 2);
    if (!v7)
    {
      CLMicroLocationProto::protobuf_AddDesc_microlocation_2eproto(0);
      v7 = *(CLMicroLocationProto::WiFiRssi **)(CLMicroLocationProto::Measurement::default_instance_ + 16);
    }
    v8 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)CLMicroLocationProto::WiFiRssi::ByteSize(v7);
    v9 = (int)v8;
    if (v8 >= 0x80)
      v10 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v8);
    else
      v10 = 1;
    v4 = (v4 + v9 + v10 + 1);
    v2 = *((_DWORD *)this + 18);
    if ((v2 & 8) == 0)
    {
LABEL_16:
      if ((v2 & 0x10) == 0)
        goto LABEL_17;
      goto LABEL_33;
    }
  }
  else if ((v2 & 8) == 0)
  {
    goto LABEL_16;
  }
  v11 = (CLMicroLocationProto::WiFiRange *)*((_QWORD *)this + 3);
  if (!v11)
  {
    CLMicroLocationProto::protobuf_AddDesc_microlocation_2eproto(0);
    v11 = *(CLMicroLocationProto::WiFiRange **)(CLMicroLocationProto::Measurement::default_instance_ + 24);
  }
  v12 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)CLMicroLocationProto::WiFiRange::ByteSize(v11);
  v13 = (int)v12;
  if (v12 >= 0x80)
    v14 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v12);
  else
    v14 = 1;
  v4 = (v4 + v13 + v14 + 1);
  v2 = *((_DWORD *)this + 18);
  if ((v2 & 0x10) == 0)
  {
LABEL_17:
    if ((v2 & 0x20) == 0)
      goto LABEL_18;
    goto LABEL_39;
  }
LABEL_33:
  v15 = (CLMicroLocationProto::ATVAirplayBluetoothRssi *)*((_QWORD *)this + 4);
  if (!v15)
  {
    CLMicroLocationProto::protobuf_AddDesc_microlocation_2eproto(0);
    v15 = *(CLMicroLocationProto::ATVAirplayBluetoothRssi **)(CLMicroLocationProto::Measurement::default_instance_ + 32);
  }
  v16 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)CLMicroLocationProto::ATVAirplayBluetoothRssi::ByteSize(v15);
  v17 = (int)v16;
  if (v16 >= 0x80)
    v18 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v16);
  else
    v18 = 1;
  v4 = (v4 + v17 + v18 + 1);
  v2 = *((_DWORD *)this + 18);
  if ((v2 & 0x20) == 0)
  {
LABEL_18:
    if ((v2 & 0x40) == 0)
      goto LABEL_19;
    goto LABEL_45;
  }
LABEL_39:
  v19 = (CLMicroLocationProto::HomeKitBluetoothRssi *)*((_QWORD *)this + 5);
  if (!v19)
  {
    CLMicroLocationProto::protobuf_AddDesc_microlocation_2eproto(0);
    v19 = *(CLMicroLocationProto::HomeKitBluetoothRssi **)(CLMicroLocationProto::Measurement::default_instance_ + 40);
  }
  v20 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)CLMicroLocationProto::HomeKitBluetoothRssi::ByteSize(v19);
  v21 = (int)v20;
  if (v20 >= 0x80)
    v22 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v20);
  else
    v22 = 1;
  v4 = (v4 + v21 + v22 + 1);
  v2 = *((_DWORD *)this + 18);
  if ((v2 & 0x40) == 0)
  {
LABEL_19:
    if ((v2 & 0x80) == 0)
      goto LABEL_57;
    goto LABEL_51;
  }
LABEL_45:
  v23 = (CLMicroLocationProto::BleLeechedBeacons *)*((_QWORD *)this + 6);
  if (!v23)
  {
    CLMicroLocationProto::protobuf_AddDesc_microlocation_2eproto(0);
    v23 = *(CLMicroLocationProto::BleLeechedBeacons **)(CLMicroLocationProto::Measurement::default_instance_ + 48);
  }
  v24 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)CLMicroLocationProto::BleLeechedBeacons::ByteSize(v23);
  v25 = (int)v24;
  if (v24 >= 0x80)
    v26 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v24);
  else
    v26 = 1;
  v4 = (v4 + v25 + v26 + 1);
  if ((*((_DWORD *)this + 18) & 0x80) != 0)
  {
LABEL_51:
    v27 = (CLMicroLocationProto::UwbRange *)*((_QWORD *)this + 7);
    if (!v27)
    {
      CLMicroLocationProto::protobuf_AddDesc_microlocation_2eproto(0);
      v27 = *(CLMicroLocationProto::UwbRange **)(CLMicroLocationProto::Measurement::default_instance_ + 56);
    }
    v28 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)CLMicroLocationProto::UwbRange::ByteSize(v27);
    v29 = (int)v28;
    if (v28 >= 0x80)
      v30 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v28);
    else
      v30 = 1;
    v4 = (v4 + v29 + v30 + 1);
  }
LABEL_57:
  *((_DWORD *)this + 17) = v4;
  return v4;
}

float CLMicroLocationProto::Measurement::CheckTypeAndMergeFrom(CLMicroLocationProto::Measurement *this, const wireless_diagnostics::google::protobuf::MessageLite *lpsrc)
{
  uint64_t v4;
  uint64_t v5;

  return CLMicroLocationProto::Measurement::MergeFrom(this, lpsrc);
}

float CLMicroLocationProto::Measurement::CopyFrom(CLMicroLocationProto::Measurement *this, const CLMicroLocationProto::Measurement *a2)
{
  float result;

  if (a2 != this)
  {
    (*(void (**)(CLMicroLocationProto::Measurement *))(*(_QWORD *)this + 32))(this);
    return CLMicroLocationProto::Measurement::MergeFrom(this, a2);
  }
  return result;
}

uint64_t CLMicroLocationProto::Measurement::IsInitialized(CLMicroLocationProto::Measurement *this)
{
  return 1;
}

double CLMicroLocationProto::Measurement::Swap(CLMicroLocationProto::Measurement *this, CLMicroLocationProto::Measurement *a2)
{
  int v2;
  double result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (a2 != this)
  {
    v2 = *((_DWORD *)this + 16);
    *((_DWORD *)this + 16) = *((_DWORD *)a2 + 16);
    *((_DWORD *)a2 + 16) = v2;
    result = *((double *)this + 1);
    *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
    *((double *)a2 + 1) = result;
    v4 = *((_QWORD *)this + 2);
    *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
    *((_QWORD *)a2 + 2) = v4;
    v5 = *((_QWORD *)this + 3);
    *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
    *((_QWORD *)a2 + 3) = v5;
    v6 = *((_QWORD *)this + 4);
    *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
    *((_QWORD *)a2 + 4) = v6;
    v7 = *((_QWORD *)this + 5);
    *((_QWORD *)this + 5) = *((_QWORD *)a2 + 5);
    *((_QWORD *)a2 + 5) = v7;
    v8 = *((_QWORD *)this + 6);
    *((_QWORD *)this + 6) = *((_QWORD *)a2 + 6);
    *((_QWORD *)a2 + 6) = v8;
    v9 = *((_QWORD *)this + 7);
    *((_QWORD *)this + 7) = *((_QWORD *)a2 + 7);
    *((_QWORD *)a2 + 7) = v9;
    LODWORD(v9) = *((_DWORD *)this + 18);
    *((_DWORD *)this + 18) = *((_DWORD *)a2 + 18);
    *((_DWORD *)a2 + 18) = v9;
    LODWORD(v9) = *((_DWORD *)this + 17);
    *((_DWORD *)this + 17) = *((_DWORD *)a2 + 17);
    *((_DWORD *)a2 + 17) = v9;
  }
  return result;
}

_QWORD *CLMicroLocationProto::Measurement::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CLMicroLocationProto.Measurement");
}

void CLMicroLocationProto::DeviceId::MergeFrom(CLMicroLocationProto::DeviceId *this, const CLMicroLocationProto::DeviceId *a2)
{
  int v4;
  uint64_t v5;
  const std::string *v6;
  std::string *v7;
  _BYTE v8[48];

  if (a2 == this)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v8);
  }
  LOBYTE(v4) = *((_BYTE *)a2 + 28);
  if ((_BYTE)v4)
  {
    if ((*((_BYTE *)a2 + 28) & 1) != 0)
    {
      v5 = *((_QWORD *)a2 + 1);
      *((_DWORD *)this + 7) |= 1u;
      *((_QWORD *)this + 1) = v5;
      v4 = *((_DWORD *)a2 + 7);
    }
    if ((v4 & 2) != 0)
    {
      v6 = (const std::string *)*((_QWORD *)a2 + 2);
      *((_DWORD *)this + 7) |= 2u;
      v7 = (std::string *)*((_QWORD *)this + 2);
      if (v7 == (std::string *)MEMORY[0x24BEDD958])
      {
        v7 = (std::string *)operator new();
        v7->__r_.__value_.__l.__size_ = 0;
        v7->__r_.__value_.__r.__words[2] = 0;
        v7->__r_.__value_.__r.__words[0] = 0;
        *((_QWORD *)this + 2) = v7;
      }
      std::string::operator=(v7, v6);
    }
  }
}

void sub_241AB7D54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void CLMicroLocationProto::DeviceId::~DeviceId(CLMicroLocationProto::DeviceId *this)
{
  *(_QWORD *)this = &off_2511D6C68;
  CLMicroLocationProto::DeviceId::SharedDtor(this);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

{
  CLMicroLocationProto::DeviceId::~DeviceId(this);
  JUMPOUT(0x2426A04D4);
}

void CLMicroLocationProto::DeviceId::SharedDtor(CLMicroLocationProto::DeviceId *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 2);
  if (v1 != MEMORY[0x24BEDD958] && v1 != 0)
  {
    if (*(char *)(v1 + 23) < 0)
      operator delete(*(void **)v1);
    this = (CLMicroLocationProto::DeviceId *)MEMORY[0x2426A04D4](v1, 0x1012C40EC159624);
  }
  CLMicroLocationProto::protobuf_AddDesc_microlocation_2eproto(this);
}

_QWORD *CLMicroLocationProto::DeviceId::New(CLMicroLocationProto::DeviceId *this)
{
  _QWORD *result;

  result = (_QWORD *)operator new();
  *result = &off_2511D6C68;
  result[1] = 0;
  result[2] = MEMORY[0x24BEDD958];
  result[3] = 0;
  return result;
}

uint64_t CLMicroLocationProto::DeviceId::Clear(uint64_t this)
{
  char v1;
  uint64_t v2;

  v1 = *(_BYTE *)(this + 28);
  if (v1)
  {
    *(_QWORD *)(this + 8) = 0;
    if ((v1 & 2) != 0)
    {
      v2 = *(_QWORD *)(this + 16);
      if (v2 != MEMORY[0x24BEDD958])
      {
        if (*(char *)(v2 + 23) < 0)
        {
          **(_BYTE **)v2 = 0;
          *(_QWORD *)(v2 + 8) = 0;
        }
        else
        {
          *(_BYTE *)v2 = 0;
          *(_BYTE *)(v2 + 23) = 0;
        }
      }
    }
  }
  *(_DWORD *)(this + 28) = 0;
  return this;
}

uint64_t CLMicroLocationProto::DeviceId::MergePartialFromCodedStream(CLMicroLocationProto::DeviceId *this, wireless_diagnostics::google::protobuf::io::CodedInputStream *a2)
{
  unint64_t *v4;
  uint64_t v5;
  char *v6;
  uint64_t TagFallback;
  int v8;
  int v9;
  unint64_t v10;
  char *v11;
  _BYTE *v12;
  _QWORD *v13;
  uint64_t result;

  v4 = (unint64_t *)((char *)this + 8);
  v5 = MEMORY[0x24BEDD958];
  while (1)
  {
    while (1)
    {
      while (1)
      {
        v6 = (char *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v6 >= *((_QWORD *)a2 + 2) || *v6 < 0)
        {
          TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(a2);
          *((_DWORD *)a2 + 8) = TagFallback;
          if (!(_DWORD)TagFallback)
            return 1;
        }
        else
        {
          TagFallback = *v6;
          *((_DWORD *)a2 + 8) = TagFallback;
          *((_QWORD *)a2 + 1) = v6 + 1;
          if (!(_DWORD)TagFallback)
            return 1;
        }
        if (TagFallback >> 3 != 1)
          break;
        v8 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_16;
        v11 = (char *)*((_QWORD *)a2 + 1);
        v10 = *((_QWORD *)a2 + 2);
        if ((unint64_t)v11 >= v10 || *v11 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint64Fallback(a2, v4);
          if (!(_DWORD)result)
            return result;
          v12 = (_BYTE *)*((_QWORD *)a2 + 1);
          v10 = *((_QWORD *)a2 + 2);
        }
        else
        {
          *v4 = *v11;
          v12 = v11 + 1;
          *((_QWORD *)a2 + 1) = v12;
        }
        v9 = *((_DWORD *)this + 7) | 1;
        *((_DWORD *)this + 7) = v9;
        if ((unint64_t)v12 < v10 && *v12 == 18)
        {
          *((_QWORD *)a2 + 1) = v12 + 1;
          goto LABEL_24;
        }
      }
      if (TagFallback >> 3 != 2)
        break;
      v8 = TagFallback & 7;
      if (v8 != 2)
        goto LABEL_16;
      v9 = *((_DWORD *)this + 7);
LABEL_24:
      *((_DWORD *)this + 7) = v9 | 2;
      if (*((_QWORD *)this + 2) == v5)
      {
        v13 = (_QWORD *)operator new();
        v13[1] = 0;
        v13[2] = 0;
        *v13 = 0;
        *((_QWORD *)this + 2) = v13;
      }
      result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadBytes();
      if (!(_DWORD)result)
        return result;
      if (*((_QWORD *)a2 + 1) == *((_QWORD *)a2 + 2)
        && (*((_DWORD *)a2 + 11) || *((_DWORD *)a2 + 6) == *((_DWORD *)a2 + 10)))
      {
        *((_DWORD *)a2 + 8) = 0;
        result = 1;
        *((_BYTE *)a2 + 36) = 1;
        return result;
      }
    }
    v8 = TagFallback & 7;
LABEL_16:
    if (v8 == 4)
      return 1;
    if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(a2, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback) & 1) == 0)return 0;
  }
}

uint64_t CLMicroLocationProto::DeviceId::SerializeWithCachedSizes(uint64_t this, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v4;
  int v5;

  v4 = this;
  v5 = *(_DWORD *)(this + 28);
  if ((v5 & 1) != 0)
  {
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt64((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(_QWORD *)(this + 8), (uint64_t)a2, a4);
    v5 = *(_DWORD *)(v4 + 28);
  }
  if ((v5 & 2) != 0)
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBytes();
  return this;
}

uint64_t CLMicroLocationProto::DeviceId::ByteSize(wireless_diagnostics::google::protobuf::io::CodedOutputStream **this)
{
  uint64_t v2;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v3;
  int v4;
  char v5;
  uint64_t v6;
  unint64_t v7;
  int v8;

  if (*((_BYTE *)this + 28))
  {
    if ((*((_BYTE *)this + 28) & 1) != 0)
    {
      v2 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize64(this[1]) + 1;
      if ((*((_DWORD *)this + 7) & 2) == 0)
        goto LABEL_16;
    }
    else
    {
      v2 = 0;
      if ((*((_BYTE *)this + 28) & 2) == 0)
        goto LABEL_16;
    }
    v3 = this[2];
    v4 = *((unsigned __int8 *)v3 + 23);
    v5 = v4;
    v6 = *((_QWORD *)v3 + 1);
    if ((v4 & 0x80u) == 0)
      v7 = *((unsigned __int8 *)v3 + 23);
    else
      v7 = v6;
    if (v7 >= 0x80)
    {
      v8 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v7);
      v4 = *((unsigned __int8 *)v3 + 23);
      v6 = *((_QWORD *)v3 + 1);
      v5 = *((_BYTE *)v3 + 23);
    }
    else
    {
      v8 = 1;
    }
    if (v5 < 0)
      v4 = v6;
    v2 = (v2 + v8 + v4 + 1);
  }
  else
  {
    v2 = 0;
  }
LABEL_16:
  *((_DWORD *)this + 6) = v2;
  return v2;
}

void CLMicroLocationProto::DeviceId::CheckTypeAndMergeFrom(CLMicroLocationProto::DeviceId *this, const wireless_diagnostics::google::protobuf::MessageLite *lpsrc)
{
  uint64_t v4;
  uint64_t v5;

  CLMicroLocationProto::DeviceId::MergeFrom(this, lpsrc);
}

uint64_t CLMicroLocationProto::DeviceId::IsInitialized(CLMicroLocationProto::DeviceId *this)
{
  return 1;
}

_QWORD *CLMicroLocationProto::DeviceId::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CLMicroLocationProto.DeviceId");
}

void CLMicroLocationProto::FingerprintMeasurement::MergeFrom(CLMicroLocationProto::FingerprintMeasurement *this, const CLMicroLocationProto::FingerprintMeasurement *a2)
{
  CLMicroLocationProto::FingerprintMeasurement *v3;
  int v4;
  uint64_t v5;
  int v6;
  int v7;
  CLMicroLocationProto::DeviceId *v8;
  const CLMicroLocationProto::DeviceId *v9;
  _BYTE v10[48];

  v3 = this;
  if (a2 == this)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v10);
  }
  LOBYTE(v4) = *((_BYTE *)a2 + 36);
  if ((_BYTE)v4)
  {
    if ((*((_BYTE *)a2 + 36) & 1) != 0)
    {
      v5 = *((_QWORD *)a2 + 1);
      *((_DWORD *)v3 + 9) |= 1u;
      *((_QWORD *)v3 + 1) = v5;
      v4 = *((_DWORD *)a2 + 9);
    }
    if ((v4 & 2) != 0)
    {
      v6 = *((_DWORD *)a2 + 4);
      if ((v6 - 1) >= 6)
        CLMicroLocationProto::FingerprintMeasurement::MergeFrom();
      *((_DWORD *)v3 + 9) |= 2u;
      *((_DWORD *)v3 + 4) = v6;
      v4 = *((_DWORD *)a2 + 9);
    }
    if ((v4 & 4) != 0)
    {
      v7 = *((_DWORD *)a2 + 5);
      *((_DWORD *)v3 + 9) |= 4u;
      *((_DWORD *)v3 + 5) = v7;
      v4 = *((_DWORD *)a2 + 9);
    }
    if ((v4 & 8) != 0)
    {
      *((_DWORD *)v3 + 9) |= 8u;
      v8 = (CLMicroLocationProto::DeviceId *)*((_QWORD *)v3 + 3);
      if (!v8)
      {
        this = (CLMicroLocationProto::FingerprintMeasurement *)operator new();
        v8 = this;
        *(_QWORD *)this = &off_2511D6C68;
        *((_QWORD *)this + 1) = 0;
        *((_QWORD *)this + 2) = MEMORY[0x24BEDD958];
        *((_QWORD *)this + 3) = 0;
        *((_QWORD *)v3 + 3) = this;
      }
      v9 = (const CLMicroLocationProto::DeviceId *)*((_QWORD *)a2 + 3);
      if (!v9)
      {
        CLMicroLocationProto::protobuf_AddDesc_microlocation_2eproto(this);
        v9 = *(const CLMicroLocationProto::DeviceId **)(CLMicroLocationProto::FingerprintMeasurement::default_instance_
                                                      + 24);
      }
      CLMicroLocationProto::DeviceId::MergeFrom(v8, v9);
    }
  }
}

void sub_241AB8314(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void CLMicroLocationProto::FingerprintMeasurement::~FingerprintMeasurement(CLMicroLocationProto::FingerprintMeasurement *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_2511D6CE0;
  CLMicroLocationProto::protobuf_AddDesc_microlocation_2eproto(this);
  if ((CLMicroLocationProto::FingerprintMeasurement *)CLMicroLocationProto::FingerprintMeasurement::default_instance_ != this)
  {
    v2 = *((_QWORD *)this + 3);
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  }
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

{
  CLMicroLocationProto::FingerprintMeasurement::~FingerprintMeasurement(this);
  JUMPOUT(0x2426A04D4);
}

uint64_t CLMicroLocationProto::FingerprintMeasurement::default_instance(CLMicroLocationProto::FingerprintMeasurement *this)
{
  CLMicroLocationProto::protobuf_AddDesc_microlocation_2eproto(this);
  return CLMicroLocationProto::FingerprintMeasurement::default_instance_;
}

_QWORD *CLMicroLocationProto::FingerprintMeasurement::New(CLMicroLocationProto::FingerprintMeasurement *this)
{
  _QWORD *result;

  result = (_QWORD *)operator new();
  *result = &off_2511D6CE0;
  result[1] = 0;
  result[2] = 1;
  result[3] = 0;
  result[4] = 0;
  return result;
}

uint64_t CLMicroLocationProto::FingerprintMeasurement::Clear(uint64_t this)
{
  uint64_t v1;
  char v2;

  v1 = this;
  v2 = *(_BYTE *)(this + 36);
  if (v2)
  {
    *(_QWORD *)(this + 8) = 0;
    *(_QWORD *)(this + 16) = 1;
    if ((v2 & 8) != 0)
    {
      this = *(_QWORD *)(this + 24);
      if (this)
        this = CLMicroLocationProto::DeviceId::Clear(this);
    }
  }
  *(_DWORD *)(v1 + 36) = 0;
  return this;
}

uint64_t CLMicroLocationProto::FingerprintMeasurement::MergePartialFromCodedStream(CLMicroLocationProto::FingerprintMeasurement *this, wireless_diagnostics::google::protobuf::io::CodedInputStream *a2)
{
  uint64_t v4;
  char *v5;
  uint64_t TagFallback;
  int v7;
  unint64_t v8;
  _BYTE *v9;
  char *v10;
  unsigned int v11;
  int v12;
  uint64_t result;
  _BYTE *v14;
  _BYTE *v15;
  CLMicroLocationProto::DeviceId *v16;
  char *v17;
  int v18;
  int v19;
  int v20;
  BOOL v21;
  int v22;
  unsigned int v23[2];

  v4 = MEMORY[0x24BEDD958];
  while (2)
  {
    v5 = (char *)*((_QWORD *)a2 + 1);
    if ((unint64_t)v5 >= *((_QWORD *)a2 + 2) || *v5 < 0)
    {
      TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(a2);
      *((_DWORD *)a2 + 8) = TagFallback;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    else
    {
      TagFallback = *v5;
      *((_DWORD *)a2 + 8) = TagFallback;
      *((_QWORD *)a2 + 1) = v5 + 1;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    switch(TagFallback >> 3)
    {
      case 1u:
        v7 = TagFallback & 7;
        if (v7 != 1)
          goto LABEL_23;
        *(_QWORD *)v23 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(a2, (unint64_t *)v23) & 1) == 0)return 0;
        *((_QWORD *)this + 1) = *(_QWORD *)v23;
        *((_DWORD *)this + 9) |= 1u;
        v9 = (_BYTE *)*((_QWORD *)a2 + 1);
        v8 = *((_QWORD *)a2 + 2);
        if ((unint64_t)v9 >= v8 || *v9 != 16)
          continue;
        v10 = v9 + 1;
        *((_QWORD *)a2 + 1) = v10;
        goto LABEL_16;
      case 2u:
        v7 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_23;
        v10 = (char *)*((_QWORD *)a2 + 1);
        v8 = *((_QWORD *)a2 + 2);
LABEL_16:
        v23[0] = 0;
        if ((unint64_t)v10 >= v8 || *v10 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v23);
          if (!(_DWORD)result)
            return result;
          v11 = v23[0];
        }
        else
        {
          v11 = *v10;
          *((_QWORD *)a2 + 1) = v10 + 1;
        }
        if (v11 - 1 <= 5)
        {
          *((_DWORD *)this + 9) |= 2u;
          *((_DWORD *)this + 4) = v11;
        }
        v14 = (_BYTE *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v14 >= *((_QWORD *)a2 + 2) || *v14 != 29)
          continue;
        *((_QWORD *)a2 + 1) = v14 + 1;
LABEL_33:
        v23[0] = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback(a2, v23) & 1) == 0)
          return 0;
        *((_DWORD *)this + 5) = v23[0];
        v12 = *((_DWORD *)this + 9) | 4;
        *((_DWORD *)this + 9) = v12;
        v15 = (_BYTE *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v15 >= *((_QWORD *)a2 + 2) || *v15 != 34)
          continue;
        *((_QWORD *)a2 + 1) = v15 + 1;
LABEL_37:
        *((_DWORD *)this + 9) = v12 | 8;
        v16 = (CLMicroLocationProto::DeviceId *)*((_QWORD *)this + 3);
        if (!v16)
        {
          v16 = (CLMicroLocationProto::DeviceId *)operator new();
          *(_QWORD *)v16 = &off_2511D6C68;
          *((_QWORD *)v16 + 1) = 0;
          *((_QWORD *)v16 + 2) = v4;
          *((_QWORD *)v16 + 3) = 0;
          *((_QWORD *)this + 3) = v16;
        }
        v23[0] = 0;
        v17 = (char *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v17 >= *((_QWORD *)a2 + 2) || *v17 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v23))return 0;
        }
        else
        {
          v23[0] = *v17;
          *((_QWORD *)a2 + 1) = v17 + 1;
        }
        v18 = *((_DWORD *)a2 + 14);
        v19 = *((_DWORD *)a2 + 15);
        *((_DWORD *)a2 + 14) = v18 + 1;
        if (v18 < v19)
        {
          wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(a2);
          if (CLMicroLocationProto::DeviceId::MergePartialFromCodedStream(v16, a2))
          {
            if (*((_BYTE *)a2 + 36))
            {
              wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(a2);
              v20 = *((_DWORD *)a2 + 14);
              v21 = __OFSUB__(v20, 1);
              v22 = v20 - 1;
              if (v22 < 0 == v21)
                *((_DWORD *)a2 + 14) = v22;
              if (*((_QWORD *)a2 + 1) == *((_QWORD *)a2 + 2)
                && (*((_DWORD *)a2 + 11) || *((_DWORD *)a2 + 6) == *((_DWORD *)a2 + 10)))
              {
                *((_DWORD *)a2 + 8) = 0;
                result = 1;
                *((_BYTE *)a2 + 36) = 1;
                return result;
              }
              continue;
            }
          }
        }
        return 0;
      case 3u:
        v7 = TagFallback & 7;
        if (v7 == 5)
          goto LABEL_33;
        goto LABEL_23;
      case 4u:
        v7 = TagFallback & 7;
        if (v7 != 2)
          goto LABEL_23;
        v12 = *((_DWORD *)this + 9);
        goto LABEL_37;
      default:
        v7 = TagFallback & 7;
LABEL_23:
        if (v7 == 4)
          return 1;
        if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(a2, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback) & 1) == 0)return 0;
        continue;
    }
  }
}

uint64_t CLMicroLocationProto::FingerprintMeasurement::SerializeWithCachedSizes(uint64_t this, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a2, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  int v6;
  uint64_t v7;

  v5 = this;
  v6 = *(_DWORD *)(this + 36);
  if ((v6 & 1) != 0)
  {
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, (uint64_t)a2, *(double *)(this + 8), a3);
    v6 = *(_DWORD *)(v5 + 36);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0)
        goto LABEL_4;
LABEL_8:
      this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteFloat((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, (uint64_t)a2, *(float *)(v5 + 20), a3);
      if ((*(_DWORD *)(v5 + 36) & 8) == 0)
        return this;
      goto LABEL_9;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, *(unsigned int *)(v5 + 16), (uint64_t)a2, a4);
  v6 = *(_DWORD *)(v5 + 36);
  if ((v6 & 4) != 0)
    goto LABEL_8;
LABEL_4:
  if ((v6 & 8) == 0)
    return this;
LABEL_9:
  v7 = *(_QWORD *)(v5 + 24);
  if (!v7)
  {
    CLMicroLocationProto::protobuf_AddDesc_microlocation_2eproto((CLMicroLocationProto *)this);
    v7 = *(_QWORD *)(CLMicroLocationProto::FingerprintMeasurement::default_instance_ + 24);
  }
  return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4, v7, a2, a4);
}

uint64_t CLMicroLocationProto::FingerprintMeasurement::ByteSize(CLMicroLocationProto::FingerprintMeasurement *this)
{
  int v2;
  uint64_t v3;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v4;
  int v5;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream **v6;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v7;
  int v8;
  int v9;

  v2 = *((unsigned __int8 *)this + 36);
  if (*((_BYTE *)this + 36))
  {
    LODWORD(v3) = (v2 << 31 >> 31) & 9;
    if ((v2 & 2) != 0)
    {
      v4 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 4);
      if ((v4 & 0x80000000) != 0)
      {
        v5 = 11;
      }
      else if (v4 >= 0x80)
      {
        v5 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v4) + 1;
        v2 = *((_DWORD *)this + 9);
      }
      else
      {
        v5 = 2;
      }
      LODWORD(v3) = v5 + v3;
    }
    if ((v2 & 4) != 0)
      v3 = (v3 + 5);
    else
      v3 = v3;
    if ((v2 & 8) != 0)
    {
      v6 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream **)*((_QWORD *)this + 3);
      if (!v6)
      {
        CLMicroLocationProto::protobuf_AddDesc_microlocation_2eproto(0);
        v6 = *(wireless_diagnostics::google::protobuf::io::CodedOutputStream ***)(CLMicroLocationProto::FingerprintMeasurement::default_instance_
                                                                                + 24);
      }
      v7 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)CLMicroLocationProto::DeviceId::ByteSize(v6);
      v8 = (int)v7;
      if (v7 >= 0x80)
        v9 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v7);
      else
        v9 = 1;
      v3 = (v3 + v8 + v9 + 1);
    }
  }
  else
  {
    v3 = 0;
  }
  *((_DWORD *)this + 8) = v3;
  return v3;
}

void CLMicroLocationProto::FingerprintMeasurement::CheckTypeAndMergeFrom(CLMicroLocationProto::FingerprintMeasurement *this, const wireless_diagnostics::google::protobuf::MessageLite *lpsrc)
{
  uint64_t v4;
  uint64_t v5;

  CLMicroLocationProto::FingerprintMeasurement::MergeFrom(this, lpsrc);
}

void CLMicroLocationProto::FingerprintMeasurement::CopyFrom(CLMicroLocationProto::FingerprintMeasurement *this, const CLMicroLocationProto::FingerprintMeasurement *a2)
{
  if (a2 != this)
  {
    (*(void (**)(CLMicroLocationProto::FingerprintMeasurement *))(*(_QWORD *)this + 32))(this);
    CLMicroLocationProto::FingerprintMeasurement::MergeFrom(this, a2);
  }
}

uint64_t CLMicroLocationProto::FingerprintMeasurement::IsInitialized(CLMicroLocationProto::FingerprintMeasurement *this)
{
  return 1;
}

_QWORD *CLMicroLocationProto::FingerprintMeasurement::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CLMicroLocationProto.FingerprintMeasurement");
}

void CLMicroLocationProto::Fingerprint::MergeFrom(CLMicroLocationProto::Fingerprint *this, const CLMicroLocationProto::Fingerprint *a2)
{
  uint64_t v4;
  const CLMicroLocationProto::Measurement *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  const CLMicroLocationProto::FingerprintMeasurement *v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  CLMicroLocationProto::FingerprintMeasurement *v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  std::string *v22;
  char v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  const std::string *v27;
  std::string *v28;
  const std::string *v29;
  std::string *v30;
  _BYTE v31[48];

  if (a2 == this)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v31);
  }
  wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((CLMicroLocationProto::Fingerprint *)((char *)this + 8));
  if (*((int *)a2 + 4) >= 1)
  {
    v4 = 0;
    do
    {
      v5 = *(const CLMicroLocationProto::Measurement **)(*((_QWORD *)a2 + 1) + 8 * v4);
      v6 = *((_DWORD *)this + 5);
      v7 = *((int *)this + 4);
      if ((int)v7 >= v6)
      {
        if (v6 == *((_DWORD *)this + 6))
        {
          wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((CLMicroLocationProto::Fingerprint *)((char *)this + 8));
          v6 = *((_DWORD *)this + 5);
        }
        *((_DWORD *)this + 5) = v6 + 1;
        v9 = operator new();
        *(_QWORD *)v9 = &off_2511D6BF0;
        *(_QWORD *)(v9 + 64) = 1;
        *(_DWORD *)(v9 + 72) = 0;
        *(_OWORD *)(v9 + 8) = 0u;
        *(_OWORD *)(v9 + 24) = 0u;
        *(_OWORD *)(v9 + 40) = 0u;
        *(_QWORD *)(v9 + 56) = 0;
        v10 = *((_QWORD *)this + 1);
        v11 = *((int *)this + 4);
        *((_DWORD *)this + 4) = v11 + 1;
        *(_QWORD *)(v10 + 8 * v11) = v9;
      }
      else
      {
        v8 = *((_QWORD *)this + 1);
        *((_DWORD *)this + 4) = v7 + 1;
        v9 = *(_QWORD *)(v8 + 8 * v7);
      }
      CLMicroLocationProto::Measurement::MergeFrom((CLMicroLocationProto::Measurement *)v9, v5);
      ++v4;
    }
    while (v4 < *((int *)a2 + 4));
  }
  wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((CLMicroLocationProto::Fingerprint *)((char *)this + 72));
  if (*((int *)a2 + 20) >= 1)
  {
    v12 = 0;
    do
    {
      v13 = *(const CLMicroLocationProto::FingerprintMeasurement **)(*((_QWORD *)a2 + 9) + 8 * v12);
      v14 = *((_DWORD *)this + 21);
      v15 = *((int *)this + 20);
      if ((int)v15 >= v14)
      {
        if (v14 == *((_DWORD *)this + 22))
        {
          wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((CLMicroLocationProto::Fingerprint *)((char *)this + 72));
          v14 = *((_DWORD *)this + 21);
        }
        *((_DWORD *)this + 21) = v14 + 1;
        v17 = (CLMicroLocationProto::FingerprintMeasurement *)operator new();
        *(_QWORD *)v17 = &off_2511D6CE0;
        *((_QWORD *)v17 + 1) = 0;
        *((_QWORD *)v17 + 2) = 1;
        *((_QWORD *)v17 + 3) = 0;
        *((_QWORD *)v17 + 4) = 0;
        v18 = *((_QWORD *)this + 9);
        v19 = *((int *)this + 20);
        *((_DWORD *)this + 20) = v19 + 1;
        *(_QWORD *)(v18 + 8 * v19) = v17;
      }
      else
      {
        v16 = *((_QWORD *)this + 9);
        *((_DWORD *)this + 20) = v15 + 1;
        v17 = *(CLMicroLocationProto::FingerprintMeasurement **)(v16 + 8 * v15);
      }
      CLMicroLocationProto::FingerprintMeasurement::MergeFrom(v17, v13);
      ++v12;
    }
    while (v12 < *((int *)a2 + 20));
  }
  v20 = *((_DWORD *)a2 + 26);
  if ((v20 & 0x1FE) == 0)
    goto LABEL_28;
  if ((v20 & 2) == 0)
  {
    if ((v20 & 4) == 0)
      goto LABEL_22;
LABEL_32:
    v26 = *((_QWORD *)a2 + 5);
    *((_DWORD *)this + 26) |= 4u;
    *((_QWORD *)this + 5) = v26;
    v20 = *((_DWORD *)a2 + 26);
    if ((v20 & 8) == 0)
      goto LABEL_24;
    goto LABEL_23;
  }
  v25 = *((_QWORD *)a2 + 4);
  *((_DWORD *)this + 26) |= 2u;
  *((_QWORD *)this + 4) = v25;
  v20 = *((_DWORD *)a2 + 26);
  if ((v20 & 4) != 0)
    goto LABEL_32;
LABEL_22:
  if ((v20 & 8) != 0)
  {
LABEL_23:
    v21 = *((_QWORD *)a2 + 6);
    *((_DWORD *)this + 26) |= 8u;
    *((_QWORD *)this + 6) = v21;
    v20 = *((_DWORD *)a2 + 26);
  }
LABEL_24:
  v22 = (std::string *)MEMORY[0x24BEDD958];
  if ((v20 & 0x10) != 0)
  {
    v27 = (const std::string *)*((_QWORD *)a2 + 7);
    *((_DWORD *)this + 26) |= 0x10u;
    v28 = (std::string *)*((_QWORD *)this + 7);
    if (v28 == v22)
    {
      v28 = (std::string *)operator new();
      v28->__r_.__value_.__l.__size_ = 0;
      v28->__r_.__value_.__r.__words[2] = 0;
      v28->__r_.__value_.__r.__words[0] = 0;
      *((_QWORD *)this + 7) = v28;
    }
    std::string::operator=(v28, v27);
    v20 = *((_DWORD *)a2 + 26);
    if ((v20 & 0x20) == 0)
    {
LABEL_26:
      if ((v20 & 0x80) == 0)
        goto LABEL_28;
      goto LABEL_27;
    }
  }
  else if ((v20 & 0x20) == 0)
  {
    goto LABEL_26;
  }
  v29 = (const std::string *)*((_QWORD *)a2 + 8);
  *((_DWORD *)this + 26) |= 0x20u;
  v30 = (std::string *)*((_QWORD *)this + 8);
  if (v30 == v22)
  {
    v30 = (std::string *)operator new();
    v30->__r_.__value_.__l.__size_ = 0;
    v30->__r_.__value_.__r.__words[2] = 0;
    v30->__r_.__value_.__r.__words[0] = 0;
    *((_QWORD *)this + 8) = v30;
  }
  std::string::operator=(v30, v29);
  v20 = *((_DWORD *)a2 + 26);
  if ((v20 & 0x80) != 0)
  {
LABEL_27:
    v23 = *((_BYTE *)a2 + 96);
    *((_DWORD *)this + 26) |= 0x80u;
    *((_BYTE *)this + 96) = v23;
    v20 = *((_DWORD *)a2 + 26);
  }
LABEL_28:
  if ((v20 & 0x100) != 0)
  {
    v24 = *((_BYTE *)a2 + 97);
    *((_DWORD *)this + 26) |= 0x100u;
    *((_BYTE *)this + 97) = v24;
  }
}

void sub_241AB8D2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void CLMicroLocationProto::Fingerprint::~Fingerprint(CLMicroLocationProto::Fingerprint *this)
{
  *(_QWORD *)this = &off_2511D6D58;
  CLMicroLocationProto::Fingerprint::SharedDtor(this);
  wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Destroy<wireless_diagnostics::google::protobuf::RepeatedPtrField<CLMicroLocationProto::Measurement>::TypeHandler>((uint64_t *)this + 9);
  wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Destroy<wireless_diagnostics::google::protobuf::RepeatedPtrField<CLMicroLocationProto::Measurement>::TypeHandler>((uint64_t *)this + 1);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

{
  CLMicroLocationProto::Fingerprint::~Fingerprint(this);
  JUMPOUT(0x2426A04D4);
}

void CLMicroLocationProto::Fingerprint::SharedDtor(CLMicroLocationProto::Fingerprint *this)
{
  CLMicroLocationProto::Fingerprint *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  v1 = this;
  v2 = *((_QWORD *)this + 7);
  v3 = MEMORY[0x24BEDD958];
  if (v2 != MEMORY[0x24BEDD958] && v2 != 0)
  {
    if (*(char *)(v2 + 23) < 0)
      operator delete(*(void **)v2);
    this = (CLMicroLocationProto::Fingerprint *)MEMORY[0x2426A04D4](v2, 0x1012C40EC159624);
  }
  v5 = *((_QWORD *)v1 + 8);
  if (v5 != v3 && v5 != 0)
  {
    if (*(char *)(v5 + 23) < 0)
      operator delete(*(void **)v5);
    this = (CLMicroLocationProto::Fingerprint *)MEMORY[0x2426A04D4](v5, 0x1012C40EC159624);
  }
  CLMicroLocationProto::protobuf_AddDesc_microlocation_2eproto(this);
}

uint64_t CLMicroLocationProto::Fingerprint::New(CLMicroLocationProto::Fingerprint *this)
{
  uint64_t result;
  uint64_t v2;

  result = operator new();
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)result = &off_2511D6D58;
  *(_DWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 80) = 0;
  *(_DWORD *)(result + 88) = 0;
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)(result + 40) = 0;
  v2 = MEMORY[0x24BEDD958];
  *(_QWORD *)(result + 48) = 0;
  *(_QWORD *)(result + 56) = v2;
  *(_QWORD *)(result + 64) = v2;
  *(_QWORD *)(result + 72) = 0;
  *(_WORD *)(result + 96) = 0;
  *(_DWORD *)(result + 100) = 0;
  *(_DWORD *)(result + 104) = 0;
  return result;
}

uint64_t CLMicroLocationProto::Fingerprint::Clear(uint64_t this)
{
  uint64_t v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v1 = this;
  v2 = *(_DWORD *)(this + 104);
  if ((v2 & 0x1FE) != 0)
  {
    *(_QWORD *)(this + 32) = 0;
    *(_QWORD *)(this + 40) = 0;
    *(_QWORD *)(this + 48) = 0;
    v3 = MEMORY[0x24BEDD958];
    if ((v2 & 0x10) != 0)
    {
      v4 = *(_QWORD *)(this + 56);
      if (v4 != MEMORY[0x24BEDD958])
      {
        if (*(char *)(v4 + 23) < 0)
        {
          **(_BYTE **)v4 = 0;
          *(_QWORD *)(v4 + 8) = 0;
        }
        else
        {
          *(_BYTE *)v4 = 0;
          *(_BYTE *)(v4 + 23) = 0;
        }
      }
    }
    if ((*(_BYTE *)(this + 104) & 0x20) != 0)
    {
      v5 = *(_QWORD *)(this + 64);
      if (v5 != v3)
      {
        if (*(char *)(v5 + 23) < 0)
        {
          **(_BYTE **)v5 = 0;
          *(_QWORD *)(v5 + 8) = 0;
        }
        else
        {
          *(_BYTE *)v5 = 0;
          *(_BYTE *)(v5 + 23) = 0;
        }
      }
    }
    *(_BYTE *)(this + 96) = 0;
    v2 = *(_DWORD *)(this + 104);
  }
  if ((v2 & 0xFF00) != 0)
    *(_BYTE *)(this + 97) = 0;
  if (*(int *)(this + 16) >= 1)
  {
    v6 = 0;
    do
    {
      v7 = *(_QWORD *)(*(_QWORD *)(v1 + 8) + 8 * v6);
      this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 32))(v7);
      ++v6;
    }
    while (v6 < *(int *)(v1 + 16));
  }
  *(_DWORD *)(v1 + 16) = 0;
  if (*(int *)(v1 + 80) >= 1)
  {
    v8 = 0;
    do
    {
      v9 = *(_QWORD *)(*(_QWORD *)(v1 + 72) + 8 * v8);
      this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 32))(v9);
      ++v8;
    }
    while (v8 < *(int *)(v1 + 80));
  }
  *(_DWORD *)(v1 + 80) = 0;
  *(_DWORD *)(v1 + 104) = 0;
  return this;
}

uint64_t CLMicroLocationProto::Fingerprint::MergePartialFromCodedStream(CLMicroLocationProto::Fingerprint *this, wireless_diagnostics::google::protobuf::io::CodedInputStream *a2)
{
  wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *v4;
  unint64_t *v5;
  wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *v6;
  uint64_t v7;
  char *v8;
  uint64_t TagFallback;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  int v18;
  int v19;
  int v20;
  BOOL v21;
  int v22;
  unint64_t v23;
  unsigned __int8 *v24;
  int v25;
  char *v26;
  _BYTE *v27;
  int v28;
  unint64_t v29;
  char *v30;
  char *v31;
  uint64_t result;
  _BYTE *v33;
  _BYTE *v34;
  _QWORD *v35;
  _BYTE *v36;
  _QWORD *v37;
  _BYTE *v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  CLMicroLocationProto::FingerprintMeasurement *v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  unsigned int v51;
  _BYTE *v52;
  unsigned int v53;
  unsigned __int8 *v54;
  unsigned int v55[2];

  v4 = (CLMicroLocationProto::Fingerprint *)((char *)this + 8);
  v5 = (unint64_t *)((char *)this + 32);
  v6 = (CLMicroLocationProto::Fingerprint *)((char *)this + 72);
  v7 = MEMORY[0x24BEDD958];
  while (1)
  {
LABEL_2:
    v8 = (char *)*((_QWORD *)a2 + 1);
    if ((unint64_t)v8 < *((_QWORD *)a2 + 2) && (*v8 & 0x80000000) == 0)
    {
      TagFallback = *v8;
      *((_DWORD *)a2 + 8) = TagFallback;
      *((_QWORD *)a2 + 1) = v8 + 1;
      if (!(_DWORD)TagFallback)
        return 1;
      goto LABEL_7;
    }
    TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(a2);
    *((_DWORD *)a2 + 8) = TagFallback;
    if (!(_DWORD)TagFallback)
      return 1;
LABEL_7:
    switch(TagFallback >> 3)
    {
      case 1u:
        v10 = TagFallback & 7;
        if (v10 != 2)
          goto LABEL_45;
        while (1)
        {
          v11 = *((_DWORD *)this + 5);
          v12 = *((int *)this + 4);
          if ((int)v12 >= v11)
          {
            if (v11 == *((_DWORD *)this + 6))
            {
              wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve(v4);
              v11 = *((_DWORD *)this + 5);
            }
            *((_DWORD *)this + 5) = v11 + 1;
            v14 = operator new();
            *(_QWORD *)v14 = &off_2511D6BF0;
            *(_QWORD *)(v14 + 64) = 1;
            *(_DWORD *)(v14 + 72) = 0;
            *(_OWORD *)(v14 + 8) = 0u;
            *(_OWORD *)(v14 + 24) = 0u;
            *(_OWORD *)(v14 + 40) = 0u;
            *(_QWORD *)(v14 + 56) = 0;
            v15 = *((_QWORD *)this + 1);
            v16 = *((int *)this + 4);
            *((_DWORD *)this + 4) = v16 + 1;
            *(_QWORD *)(v15 + 8 * v16) = v14;
          }
          else
          {
            v13 = *((_QWORD *)this + 1);
            *((_DWORD *)this + 4) = v12 + 1;
            v14 = *(_QWORD *)(v13 + 8 * v12);
          }
          v55[0] = 0;
          v17 = (char *)*((_QWORD *)a2 + 1);
          if ((unint64_t)v17 >= *((_QWORD *)a2 + 2) || *v17 < 0)
          {
            if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v55))return 0;
          }
          else
          {
            v55[0] = *v17;
            *((_QWORD *)a2 + 1) = v17 + 1;
          }
          v18 = *((_DWORD *)a2 + 14);
          v19 = *((_DWORD *)a2 + 15);
          *((_DWORD *)a2 + 14) = v18 + 1;
          if (v18 >= v19)
            return 0;
          wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(a2);
          if (!CLMicroLocationProto::Measurement::MergePartialFromCodedStream((CLMicroLocationProto::Measurement *)v14, a2)|| !*((_BYTE *)a2 + 36))
          {
            return 0;
          }
          wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(a2);
          v20 = *((_DWORD *)a2 + 14);
          v21 = __OFSUB__(v20, 1);
          v22 = v20 - 1;
          if (v22 < 0 == v21)
            *((_DWORD *)a2 + 14) = v22;
          v24 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
          v23 = *((_QWORD *)a2 + 2);
          if ((unint64_t)v24 >= v23)
            goto LABEL_2;
          v25 = *v24;
          if (v25 != 10)
            break;
          *((_QWORD *)a2 + 1) = v24 + 1;
        }
        if (v25 != 16)
          continue;
        v26 = (char *)(v24 + 1);
        *((_QWORD *)a2 + 1) = v26;
        goto LABEL_29;
      case 2u:
        v10 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_45;
        v26 = (char *)*((_QWORD *)a2 + 1);
        v23 = *((_QWORD *)a2 + 2);
LABEL_29:
        if ((unint64_t)v26 >= v23 || *v26 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint64Fallback(a2, v5);
          if (!(_DWORD)result)
            return result;
          v27 = (_BYTE *)*((_QWORD *)a2 + 1);
          v23 = *((_QWORD *)a2 + 2);
        }
        else
        {
          *v5 = *v26;
          v27 = v26 + 1;
          *((_QWORD *)a2 + 1) = v27;
        }
        *((_DWORD *)this + 26) |= 2u;
        if ((unint64_t)v27 >= v23 || *v27 != 25)
          continue;
        *((_QWORD *)a2 + 1) = v27 + 1;
LABEL_56:
        *(_QWORD *)v55 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(a2, (unint64_t *)v55) & 1) == 0)return 0;
        *((_QWORD *)this + 5) = *(_QWORD *)v55;
        *((_DWORD *)this + 26) |= 4u;
        v33 = (_BYTE *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v33 >= *((_QWORD *)a2 + 2) || *v33 != 33)
          continue;
        *((_QWORD *)a2 + 1) = v33 + 1;
LABEL_60:
        *(_QWORD *)v55 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(a2, (unint64_t *)v55) & 1) == 0)return 0;
        *((_QWORD *)this + 6) = *(_QWORD *)v55;
        v28 = *((_DWORD *)this + 26) | 8;
        *((_DWORD *)this + 26) = v28;
        v34 = (_BYTE *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v34 < *((_QWORD *)a2 + 2) && *v34 == 42)
        {
          *((_QWORD *)a2 + 1) = v34 + 1;
LABEL_64:
          *((_DWORD *)this + 26) = v28 | 0x10;
          if (*((_QWORD *)this + 7) == v7)
          {
            v35 = (_QWORD *)operator new();
            v35[1] = 0;
            v35[2] = 0;
            *v35 = 0;
            *((_QWORD *)this + 7) = v35;
          }
          result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadBytes();
          if (!(_DWORD)result)
            return result;
          v36 = (_BYTE *)*((_QWORD *)a2 + 1);
          if ((unint64_t)v36 < *((_QWORD *)a2 + 2) && *v36 == 50)
          {
            *((_QWORD *)a2 + 1) = v36 + 1;
LABEL_70:
            *((_DWORD *)this + 26) |= 0x20u;
            if (*((_QWORD *)this + 8) == v7)
            {
              v37 = (_QWORD *)operator new();
              v37[1] = 0;
              v37[2] = 0;
              *v37 = 0;
              *((_QWORD *)this + 8) = v37;
            }
            result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadBytes();
            if (!(_DWORD)result)
              return result;
            v38 = (_BYTE *)*((_QWORD *)a2 + 1);
            if ((unint64_t)v38 < *((_QWORD *)a2 + 2) && *v38 == 58)
            {
              do
              {
                *((_QWORD *)a2 + 1) = v38 + 1;
LABEL_76:
                v39 = *((_DWORD *)this + 21);
                v40 = *((int *)this + 20);
                if ((int)v40 >= v39)
                {
                  if (v39 == *((_DWORD *)this + 22))
                  {
                    wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve(v6);
                    v39 = *((_DWORD *)this + 21);
                  }
                  *((_DWORD *)this + 21) = v39 + 1;
                  v42 = (CLMicroLocationProto::FingerprintMeasurement *)operator new();
                  *(_QWORD *)v42 = &off_2511D6CE0;
                  *((_QWORD *)v42 + 1) = 0;
                  *((_QWORD *)v42 + 2) = 1;
                  *((_QWORD *)v42 + 3) = 0;
                  *((_QWORD *)v42 + 4) = 0;
                  v43 = *((_QWORD *)this + 9);
                  v44 = *((int *)this + 20);
                  *((_DWORD *)this + 20) = v44 + 1;
                  *(_QWORD *)(v43 + 8 * v44) = v42;
                }
                else
                {
                  v41 = *((_QWORD *)this + 9);
                  *((_DWORD *)this + 20) = v40 + 1;
                  v42 = *(CLMicroLocationProto::FingerprintMeasurement **)(v41 + 8 * v40);
                }
                v55[0] = 0;
                v45 = (char *)*((_QWORD *)a2 + 1);
                if ((unint64_t)v45 >= *((_QWORD *)a2 + 2) || *v45 < 0)
                {
                  if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v55))return 0;
                }
                else
                {
                  v55[0] = *v45;
                  *((_QWORD *)a2 + 1) = v45 + 1;
                }
                v46 = *((_DWORD *)a2 + 14);
                v47 = *((_DWORD *)a2 + 15);
                *((_DWORD *)a2 + 14) = v46 + 1;
                if (v46 >= v47)
                  return 0;
                wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(a2);
                if (!CLMicroLocationProto::FingerprintMeasurement::MergePartialFromCodedStream(v42, a2)
                  || !*((_BYTE *)a2 + 36))
                {
                  return 0;
                }
                wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(a2);
                v48 = *((_DWORD *)a2 + 14);
                v21 = __OFSUB__(v48, 1);
                v49 = v48 - 1;
                if (v49 < 0 == v21)
                  *((_DWORD *)a2 + 14) = v49;
                v38 = (_BYTE *)*((_QWORD *)a2 + 1);
                v29 = *((_QWORD *)a2 + 2);
                if ((unint64_t)v38 >= v29)
                  goto LABEL_2;
                v50 = *v38;
              }
              while (v50 == 58);
              if (v50 == 64)
              {
                v30 = v38 + 1;
                *((_QWORD *)a2 + 1) = v30;
LABEL_94:
                v55[0] = 0;
                if ((unint64_t)v30 >= v29 || *v30 < 0)
                {
                  result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v55);
                  if (!(_DWORD)result)
                    return result;
                  v51 = v55[0];
                  v52 = (_BYTE *)*((_QWORD *)a2 + 1);
                  v29 = *((_QWORD *)a2 + 2);
                }
                else
                {
                  v51 = *v30;
                  v52 = v30 + 1;
                  *((_QWORD *)a2 + 1) = v52;
                }
                *((_BYTE *)this + 96) = v51 != 0;
                *((_DWORD *)this + 26) |= 0x80u;
                if ((unint64_t)v52 < v29 && *v52 == 72)
                {
                  v31 = v52 + 1;
                  *((_QWORD *)a2 + 1) = v31;
LABEL_102:
                  v55[0] = 0;
                  if ((unint64_t)v31 >= v29 || *v31 < 0)
                  {
                    result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v55);
                    if (!(_DWORD)result)
                      return result;
                    v53 = v55[0];
                    v54 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
                    v29 = *((_QWORD *)a2 + 2);
                  }
                  else
                  {
                    v53 = *v31;
                    v54 = (unsigned __int8 *)(v31 + 1);
                    *((_QWORD *)a2 + 1) = v54;
                  }
                  *((_BYTE *)this + 97) = v53 != 0;
                  *((_DWORD *)this + 26) |= 0x100u;
                  if (v54 == (unsigned __int8 *)v29
                    && (*((_DWORD *)a2 + 11) || *((_DWORD *)a2 + 6) == *((_DWORD *)a2 + 10)))
                  {
                    *((_DWORD *)a2 + 8) = 0;
                    result = 1;
                    *((_BYTE *)a2 + 36) = 1;
                    return result;
                  }
                }
              }
            }
          }
        }
        break;
      case 3u:
        v10 = TagFallback & 7;
        if (v10 == 1)
          goto LABEL_56;
        goto LABEL_45;
      case 4u:
        v10 = TagFallback & 7;
        if (v10 == 1)
          goto LABEL_60;
        goto LABEL_45;
      case 5u:
        v10 = TagFallback & 7;
        if (v10 != 2)
          goto LABEL_45;
        v28 = *((_DWORD *)this + 26);
        goto LABEL_64;
      case 6u:
        v10 = TagFallback & 7;
        if (v10 == 2)
          goto LABEL_70;
        goto LABEL_45;
      case 7u:
        v10 = TagFallback & 7;
        if (v10 == 2)
          goto LABEL_76;
        goto LABEL_45;
      case 8u:
        v10 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_45;
        v30 = (char *)*((_QWORD *)a2 + 1);
        v29 = *((_QWORD *)a2 + 2);
        goto LABEL_94;
      case 9u:
        v10 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_45;
        v31 = (char *)*((_QWORD *)a2 + 1);
        v29 = *((_QWORD *)a2 + 2);
        goto LABEL_102;
      default:
        v10 = TagFallback & 7;
LABEL_45:
        if (v10 == 4)
          return 1;
        if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(a2, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback) & 1) == 0)return 0;
        continue;
    }
  }
}

uint64_t CLMicroLocationProto::Fingerprint::SerializeWithCachedSizes(uint64_t this, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a2, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  int v9;

  v5 = this;
  if (*(int *)(this + 16) >= 1)
  {
    v6 = 0;
    do
      this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(_QWORD *)(*(_QWORD *)(v5 + 8) + 8 * v6++), a2, a4);
    while (v6 < *(int *)(v5 + 16));
  }
  v7 = *(_DWORD *)(v5 + 104);
  if ((v7 & 2) != 0)
  {
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt64((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, *(_QWORD *)(v5 + 32), (uint64_t)a2, a4);
    v7 = *(_DWORD *)(v5 + 104);
    if ((v7 & 4) == 0)
    {
LABEL_6:
      if ((v7 & 8) == 0)
        goto LABEL_7;
      goto LABEL_19;
    }
  }
  else if ((v7 & 4) == 0)
  {
    goto LABEL_6;
  }
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, (uint64_t)a2, *(double *)(v5 + 40), a3);
  v7 = *(_DWORD *)(v5 + 104);
  if ((v7 & 8) == 0)
  {
LABEL_7:
    if ((v7 & 0x10) == 0)
      goto LABEL_8;
    goto LABEL_20;
  }
LABEL_19:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4, (uint64_t)a2, *(double *)(v5 + 48), a3);
  v7 = *(_DWORD *)(v5 + 104);
  if ((v7 & 0x10) == 0)
  {
LABEL_8:
    if ((v7 & 0x20) == 0)
      goto LABEL_10;
    goto LABEL_9;
  }
LABEL_20:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBytes();
  if ((*(_DWORD *)(v5 + 104) & 0x20) != 0)
LABEL_9:
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBytes();
LABEL_10:
  if (*(int *)(v5 + 80) >= 1)
  {
    v8 = 0;
    do
      this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)7, *(_QWORD *)(*(_QWORD *)(v5 + 72) + 8 * v8++), a2, a4);
    while (v8 < *(int *)(v5 + 80));
  }
  v9 = *(_DWORD *)(v5 + 104);
  if ((v9 & 0x80) != 0)
  {
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)8, *(unsigned __int8 *)(v5 + 96), (uint64_t)a2, a4);
    v9 = *(_DWORD *)(v5 + 104);
  }
  if ((v9 & 0x100) != 0)
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)9, *(unsigned __int8 *)(v5 + 97), (uint64_t)a2, a4);
  return this;
}

uint64_t CLMicroLocationProto::Fingerprint::ByteSize(CLMicroLocationProto::Fingerprint *this)
{
  int v2;
  int v3;
  int v4;
  int v5;
  uint64_t v6;
  int v7;
  char v8;
  uint64_t v9;
  unint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  char v14;
  uint64_t v15;
  unint64_t v16;
  int v17;
  int v18;
  int v19;
  int v20;
  uint64_t v21;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v22;
  int v23;
  int v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v28;
  int v29;
  int v30;

  v2 = *((_DWORD *)this + 26);
  if ((v2 & 0x1FE) != 0)
  {
    if ((v2 & 2) != 0)
    {
      v3 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize64(*((wireless_diagnostics::google::protobuf::io::CodedOutputStream **)this
                                                                                       + 4))
         + 1;
      v2 = *((_DWORD *)this + 26);
    }
    else
    {
      v3 = 0;
    }
    if ((v2 & 4) != 0)
      v3 += 9;
    if ((v2 & 8) != 0)
      v5 = v3 + 9;
    else
      v5 = v3;
    if ((v2 & 0x10) != 0)
    {
      v6 = *((_QWORD *)this + 7);
      v7 = *(unsigned __int8 *)(v6 + 23);
      v8 = v7;
      v9 = *(_QWORD *)(v6 + 8);
      if ((v7 & 0x80u) == 0)
        v10 = *(unsigned __int8 *)(v6 + 23);
      else
        v10 = v9;
      if (v10 >= 0x80)
      {
        v11 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v10);
        v7 = *(unsigned __int8 *)(v6 + 23);
        v9 = *(_QWORD *)(v6 + 8);
        v2 = *((_DWORD *)this + 26);
        v8 = *(_BYTE *)(v6 + 23);
      }
      else
      {
        v11 = 1;
      }
      if (v8 < 0)
        v7 = v9;
      v5 += v11 + v7 + 1;
    }
    if ((v2 & 0x20) != 0)
    {
      v12 = *((_QWORD *)this + 8);
      v13 = *(unsigned __int8 *)(v12 + 23);
      v14 = v13;
      v15 = *(_QWORD *)(v12 + 8);
      if ((v13 & 0x80u) == 0)
        v16 = *(unsigned __int8 *)(v12 + 23);
      else
        v16 = v15;
      if (v16 >= 0x80)
      {
        v17 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v16);
        v13 = *(unsigned __int8 *)(v12 + 23);
        v15 = *(_QWORD *)(v12 + 8);
        v2 = *((_DWORD *)this + 26);
        v14 = *(_BYTE *)(v12 + 23);
      }
      else
      {
        v17 = 1;
      }
      if (v14 < 0)
        v13 = v15;
      v5 += v17 + v13 + 1;
    }
    v4 = v5 + 2;
    if ((v2 & 0x80) == 0)
      v4 = v5;
  }
  else
  {
    v4 = 0;
  }
  if ((v2 & 0x100) != 0)
    v18 = v4 + 2;
  else
    v18 = v4;
  v19 = *((_DWORD *)this + 4);
  v20 = v18 + v19;
  if (v19 >= 1)
  {
    v21 = 0;
    do
    {
      v22 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)CLMicroLocationProto::Measurement::ByteSize(*(CLMicroLocationProto::Measurement **)(*((_QWORD *)this + 1) + 8 * v21));
      v23 = (int)v22;
      if (v22 >= 0x80)
        v24 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v22);
      else
        v24 = 1;
      v20 += v23 + v24;
      ++v21;
    }
    while (v21 < *((int *)this + 4));
  }
  v25 = *((_DWORD *)this + 20);
  v26 = (v25 + v20);
  if (v25 >= 1)
  {
    v27 = 0;
    do
    {
      v28 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)CLMicroLocationProto::FingerprintMeasurement::ByteSize(*(CLMicroLocationProto::FingerprintMeasurement **)(*((_QWORD *)this + 9) + 8 * v27));
      v29 = (int)v28;
      if (v28 >= 0x80)
        v30 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v28);
      else
        v30 = 1;
      v26 = (v29 + v26 + v30);
      ++v27;
    }
    while (v27 < *((int *)this + 20));
  }
  *((_DWORD *)this + 25) = v26;
  return v26;
}

void CLMicroLocationProto::Fingerprint::CheckTypeAndMergeFrom(CLMicroLocationProto::Fingerprint *this, const wireless_diagnostics::google::protobuf::MessageLite *lpsrc)
{
  uint64_t v4;
  uint64_t v5;

  CLMicroLocationProto::Fingerprint::MergeFrom(this, lpsrc);
}

void CLMicroLocationProto::Fingerprint::CopyFrom(CLMicroLocationProto::Fingerprint *this, const CLMicroLocationProto::Fingerprint *a2)
{
  if (a2 != this)
  {
    (*(void (**)(CLMicroLocationProto::Fingerprint *))(*(_QWORD *)this + 32))(this);
    CLMicroLocationProto::Fingerprint::MergeFrom(this, a2);
  }
}

uint64_t CLMicroLocationProto::Fingerprint::IsInitialized(CLMicroLocationProto::Fingerprint *this)
{
  return 1;
}

_QWORD *CLMicroLocationProto::Fingerprint::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CLMicroLocationProto.Fingerprint");
}

std::string *CLMicroLocationProto::ClusterRecordings::MergeFrom(CLMicroLocationProto::ClusterRecordings *this, const CLMicroLocationProto::ClusterRecordings *a2)
{
  std::string *result;
  uint64_t v5;
  const std::string *v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  std::string *v10;
  uint64_t v11;
  uint64_t v12;
  const std::string *v13;
  std::string *v14;
  _BYTE v15[48];

  if (a2 == this)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v15);
  }
  result = (std::string *)wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((CLMicroLocationProto::ClusterRecordings *)((char *)this + 16));
  if (*((int *)a2 + 6) >= 1)
  {
    v5 = 0;
    do
    {
      v6 = *(const std::string **)(*((_QWORD *)a2 + 2) + 8 * v5);
      v7 = *((_DWORD *)this + 7);
      v8 = *((int *)this + 6);
      if ((int)v8 >= v7)
      {
        if (v7 == *((_DWORD *)this + 8))
        {
          result = (std::string *)wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((CLMicroLocationProto::ClusterRecordings *)((char *)this + 16));
          v7 = *((_DWORD *)this + 7);
        }
        *((_DWORD *)this + 7) = v7 + 1;
        v10 = (std::string *)wireless_diagnostics::google::protobuf::internal::StringTypeHandlerBase::New((wireless_diagnostics::google::protobuf::internal::StringTypeHandlerBase *)result);
        v11 = *((_QWORD *)this + 2);
        v12 = *((int *)this + 6);
        *((_DWORD *)this + 6) = v12 + 1;
        *(_QWORD *)(v11 + 8 * v12) = v10;
      }
      else
      {
        v9 = *((_QWORD *)this + 2);
        *((_DWORD *)this + 6) = v8 + 1;
        v10 = *(std::string **)(v9 + 8 * v8);
      }
      result = std::string::operator=(v10, v6);
      ++v5;
    }
    while (v5 < *((int *)a2 + 6));
  }
  if ((*((_BYTE *)a2 + 44) & 1) != 0)
  {
    v13 = (const std::string *)*((_QWORD *)a2 + 1);
    *((_DWORD *)this + 11) |= 1u;
    v14 = (std::string *)*((_QWORD *)this + 1);
    if (v14 == (std::string *)MEMORY[0x24BEDD958])
    {
      v14 = (std::string *)operator new();
      v14->__r_.__value_.__l.__size_ = 0;
      v14->__r_.__value_.__r.__words[2] = 0;
      v14->__r_.__value_.__r.__words[0] = 0;
      *((_QWORD *)this + 1) = v14;
    }
    return std::string::operator=(v14, v13);
  }
  return result;
}

void sub_241AB9C30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void CLMicroLocationProto::ClusterRecordings::~ClusterRecordings(CLMicroLocationProto::ClusterRecordings *this)
{
  *(_QWORD *)this = &off_2511D6DD0;
  CLMicroLocationProto::ClusterRecordings::SharedDtor(this);
  wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Destroy<wireless_diagnostics::google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((int *)this + 4);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

{
  CLMicroLocationProto::ClusterRecordings::~ClusterRecordings(this);
  JUMPOUT(0x2426A04D4);
}

void CLMicroLocationProto::ClusterRecordings::SharedDtor(CLMicroLocationProto::ClusterRecordings *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 1);
  if (v1 != MEMORY[0x24BEDD958] && v1 != 0)
  {
    if (*(char *)(v1 + 23) < 0)
      operator delete(*(void **)v1);
    this = (CLMicroLocationProto::ClusterRecordings *)MEMORY[0x2426A04D4](v1, 0x1012C40EC159624);
  }
  CLMicroLocationProto::protobuf_AddDesc_microlocation_2eproto(this);
}

uint64_t CLMicroLocationProto::ClusterRecordings::New(CLMicroLocationProto::ClusterRecordings *this)
{
  uint64_t result;
  uint64_t v2;

  result = operator new();
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = 0;
  v2 = MEMORY[0x24BEDD958];
  *(_DWORD *)(result + 32) = 0;
  *(_QWORD *)result = &off_2511D6DD0;
  *(_QWORD *)(result + 8) = v2;
  *(_QWORD *)(result + 40) = 0;
  return result;
}

uint64_t CLMicroLocationProto::ClusterRecordings::Clear(CLMicroLocationProto::ClusterRecordings *this)
{
  uint64_t v2;
  uint64_t result;

  if ((*((_BYTE *)this + 44) & 1) != 0)
  {
    v2 = *((_QWORD *)this + 1);
    if (v2 != MEMORY[0x24BEDD958])
    {
      if (*(char *)(v2 + 23) < 0)
      {
        **(_BYTE **)v2 = 0;
        *(_QWORD *)(v2 + 8) = 0;
      }
      else
      {
        *(_BYTE *)v2 = 0;
        *(_BYTE *)(v2 + 23) = 0;
      }
    }
  }
  result = wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Clear<wireless_diagnostics::google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((uint64_t)this + 16);
  *((_DWORD *)this + 11) = 0;
  return result;
}

uint64_t CLMicroLocationProto::ClusterRecordings::MergePartialFromCodedStream(uint64_t this, wireless_diagnostics::google::protobuf::io::CodedInputStream *a2)
{
  uint64_t v3;
  wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *v4;
  uint64_t v5;
  char *v6;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *v7;
  int v8;
  _QWORD *v9;
  _BYTE *v10;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;

  v3 = this;
  v4 = (wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(this + 16);
  v5 = MEMORY[0x24BEDD958];
  while (1)
  {
    while (1)
    {
      while (1)
      {
        v6 = (char *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v6 >= *((_QWORD *)a2 + 2) || *v6 < 0)
        {
          this = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(a2);
          v7 = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)this;
          *((_DWORD *)a2 + 8) = this;
          if (!(_DWORD)this)
            return 1;
        }
        else
        {
          v7 = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v6;
          *((_DWORD *)a2 + 8) = (_DWORD)v7;
          *((_QWORD *)a2 + 1) = v6 + 1;
          if (!(_DWORD)v7)
            return 1;
        }
        if (v7 >> 3 != 1)
          break;
        v8 = v7 & 7;
        if (v8 != 2)
          goto LABEL_19;
        *(_DWORD *)(v3 + 44) |= 1u;
        if (*(_QWORD *)(v3 + 8) == v5)
        {
          v9 = (_QWORD *)operator new();
          v9[1] = 0;
          v9[2] = 0;
          *v9 = 0;
          *(_QWORD *)(v3 + 8) = v9;
        }
        this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadBytes();
        if (!(_DWORD)this)
          return this;
        v10 = (_BYTE *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v10 < *((_QWORD *)a2 + 2) && *v10 == 18)
          goto LABEL_22;
      }
      if (v7 >> 3 != 2)
        break;
      v8 = v7 & 7;
      if (v8 != 2)
        goto LABEL_19;
      while (1)
      {
        v11 = *(_DWORD *)(v3 + 28);
        v12 = *(_DWORD *)(v3 + 24);
        if (v12 >= v11)
        {
          if (v11 == *(_DWORD *)(v3 + 32))
          {
            this = wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve(v4);
            v11 = *(_DWORD *)(v3 + 28);
          }
          *(_DWORD *)(v3 + 28) = v11 + 1;
          v13 = wireless_diagnostics::google::protobuf::internal::StringTypeHandlerBase::New((wireless_diagnostics::google::protobuf::internal::StringTypeHandlerBase *)this);
          v14 = *(_QWORD *)(v3 + 16);
          v15 = *(int *)(v3 + 24);
          *(_DWORD *)(v3 + 24) = v15 + 1;
          *(_QWORD *)(v14 + 8 * v15) = v13;
        }
        else
        {
          *(_DWORD *)(v3 + 24) = v12 + 1;
        }
        this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadBytes();
        if (!(_DWORD)this)
          return this;
        v10 = (_BYTE *)*((_QWORD *)a2 + 1);
        v16 = (_BYTE *)*((_QWORD *)a2 + 2);
        if (v10 >= v16 || *v10 != 18)
          break;
LABEL_22:
        *((_QWORD *)a2 + 1) = v10 + 1;
      }
      if (v10 == v16 && (*((_DWORD *)a2 + 11) || *((_DWORD *)a2 + 6) == *((_DWORD *)a2 + 10)))
      {
        *((_DWORD *)a2 + 8) = 0;
        this = 1;
        *((_BYTE *)a2 + 36) = 1;
        return this;
      }
    }
    v8 = v7 & 7;
LABEL_19:
    if (v8 == 4)
      return 1;
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(a2, v7);
    if ((this & 1) == 0)
      return 0;
  }
}

uint64_t CLMicroLocationProto::ClusterRecordings::SerializeWithCachedSizes(uint64_t this, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = this;
  if ((*(_BYTE *)(this + 44) & 1) != 0)
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBytes();
  if (*(int *)(v2 + 24) >= 1)
  {
    v3 = 0;
    do
    {
      this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBytes();
      ++v3;
    }
    while (v3 < *(int *)(v2 + 24));
  }
  return this;
}

uint64_t CLMicroLocationProto::ClusterRecordings::ByteSize(CLMicroLocationProto::ClusterRecordings *this)
{
  int v2;
  uint64_t v3;
  int v4;
  char v5;
  uint64_t v6;
  unint64_t v7;
  int v8;
  int v9;
  int v10;
  uint64_t v11;
  uint64_t i;
  uint64_t v13;
  int v14;
  char v15;
  uint64_t v16;
  unint64_t v17;
  int v18;

  if ((*((_BYTE *)this + 44) & 1) != 0)
  {
    v3 = *((_QWORD *)this + 1);
    v4 = *(unsigned __int8 *)(v3 + 23);
    v5 = v4;
    v6 = *(_QWORD *)(v3 + 8);
    if ((v4 & 0x80u) == 0)
      v7 = *(unsigned __int8 *)(v3 + 23);
    else
      v7 = v6;
    if (v7 >= 0x80)
    {
      v9 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v7);
      v4 = *(unsigned __int8 *)(v3 + 23);
      v6 = *(_QWORD *)(v3 + 8);
      v8 = v9 + 1;
      v5 = *(_BYTE *)(v3 + 23);
    }
    else
    {
      v8 = 2;
    }
    if (v5 < 0)
      v4 = v6;
    v2 = v8 + v4;
  }
  else
  {
    v2 = 0;
  }
  v10 = *((_DWORD *)this + 6);
  v11 = (v10 + v2);
  if (v10 >= 1)
  {
    for (i = 0; i < v10; ++i)
    {
      v13 = *(_QWORD *)(*((_QWORD *)this + 2) + 8 * i);
      v14 = *(unsigned __int8 *)(v13 + 23);
      v15 = v14;
      v16 = *(_QWORD *)(v13 + 8);
      if ((v14 & 0x80u) == 0)
        v17 = *(unsigned __int8 *)(v13 + 23);
      else
        v17 = v16;
      if (v17 >= 0x80)
      {
        v18 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v17);
        v14 = *(unsigned __int8 *)(v13 + 23);
        v16 = *(_QWORD *)(v13 + 8);
        v10 = *((_DWORD *)this + 6);
        v15 = *(_BYTE *)(v13 + 23);
      }
      else
      {
        v18 = 1;
      }
      if (v15 < 0)
        v14 = v16;
      v11 = (v18 + v11 + v14);
    }
  }
  *((_DWORD *)this + 10) = v11;
  return v11;
}

std::string *CLMicroLocationProto::ClusterRecordings::CheckTypeAndMergeFrom(CLMicroLocationProto::ClusterRecordings *this, const wireless_diagnostics::google::protobuf::MessageLite *lpsrc)
{
  uint64_t v4;
  uint64_t v5;

  return CLMicroLocationProto::ClusterRecordings::MergeFrom(this, lpsrc);
}

uint64_t CLMicroLocationProto::ClusterRecordings::IsInitialized(CLMicroLocationProto::ClusterRecordings *this)
{
  return 1;
}

_QWORD *CLMicroLocationProto::ClusterRecordings::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CLMicroLocationProto.ClusterRecordings");
}

void CLMicroLocationProto::AnchorMetadata::MergeFrom(CLMicroLocationProto::AnchorMetadata *this, const CLMicroLocationProto::AnchorMetadata *a2)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  char v8;
  char v9;
  int v10;
  const std::string *v11;
  std::string *v12;
  _BYTE v13[48];

  if (a2 == this)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v13);
  }
  LOBYTE(v4) = *((_BYTE *)a2 + 48);
  if (!(_BYTE)v4)
    return;
  if ((*((_BYTE *)a2 + 48) & 1) != 0)
  {
    v5 = *((_QWORD *)a2 + 1);
    *((_DWORD *)this + 12) |= 1u;
    *((_QWORD *)this + 1) = v5;
    v4 = *((_DWORD *)a2 + 12);
    if ((v4 & 2) == 0)
    {
LABEL_6:
      if ((v4 & 4) == 0)
        goto LABEL_7;
      goto LABEL_14;
    }
  }
  else if ((*((_BYTE *)a2 + 48) & 2) == 0)
  {
    goto LABEL_6;
  }
  v6 = *((_QWORD *)a2 + 2);
  *((_DWORD *)this + 12) |= 2u;
  *((_QWORD *)this + 2) = v6;
  v4 = *((_DWORD *)a2 + 12);
  if ((v4 & 4) == 0)
  {
LABEL_7:
    if ((v4 & 8) == 0)
      goto LABEL_8;
    goto LABEL_16;
  }
LABEL_14:
  v7 = *((_DWORD *)a2 + 6);
  if ((v7 - 1) >= 2)
    CLMicroLocationProto::AnchorMetadata::MergeFrom();
  *((_DWORD *)this + 12) |= 4u;
  *((_DWORD *)this + 6) = v7;
  v4 = *((_DWORD *)a2 + 12);
  if ((v4 & 8) == 0)
  {
LABEL_8:
    if ((v4 & 0x10) == 0)
      goto LABEL_9;
LABEL_17:
    v9 = *((_BYTE *)a2 + 29);
    *((_DWORD *)this + 12) |= 0x10u;
    *((_BYTE *)this + 29) = v9;
    v4 = *((_DWORD *)a2 + 12);
    if ((v4 & 0x20) == 0)
    {
LABEL_10:
      if ((v4 & 0x40) == 0)
        return;
      goto LABEL_20;
    }
    goto LABEL_18;
  }
LABEL_16:
  v8 = *((_BYTE *)a2 + 28);
  *((_DWORD *)this + 12) |= 8u;
  *((_BYTE *)this + 28) = v8;
  v4 = *((_DWORD *)a2 + 12);
  if ((v4 & 0x10) != 0)
    goto LABEL_17;
LABEL_9:
  if ((v4 & 0x20) == 0)
    goto LABEL_10;
LABEL_18:
  v10 = *((_DWORD *)a2 + 10);
  if ((v10 - 1) >= 6)
    CLMicroLocationProto::AnchorMetadata::MergeFrom();
  *((_DWORD *)this + 12) |= 0x20u;
  *((_DWORD *)this + 10) = v10;
  if ((*((_DWORD *)a2 + 12) & 0x40) != 0)
  {
LABEL_20:
    v11 = (const std::string *)*((_QWORD *)a2 + 4);
    *((_DWORD *)this + 12) |= 0x40u;
    v12 = (std::string *)*((_QWORD *)this + 4);
    if (v12 == (std::string *)MEMORY[0x24BEDD958])
    {
      v12 = (std::string *)operator new();
      v12->__r_.__value_.__l.__size_ = 0;
      v12->__r_.__value_.__r.__words[2] = 0;
      v12->__r_.__value_.__r.__words[0] = 0;
      *((_QWORD *)this + 4) = v12;
    }
    std::string::operator=(v12, v11);
  }
}

void sub_241ABA328(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void CLMicroLocationProto::AnchorMetadata::~AnchorMetadata(CLMicroLocationProto::AnchorMetadata *this)
{
  *(_QWORD *)this = &off_2511D6E48;
  CLMicroLocationProto::AnchorMetadata::SharedDtor(this);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

{
  CLMicroLocationProto::AnchorMetadata::~AnchorMetadata(this);
  JUMPOUT(0x2426A04D4);
}

void CLMicroLocationProto::AnchorMetadata::SharedDtor(CLMicroLocationProto::AnchorMetadata *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 4);
  if (v1 != MEMORY[0x24BEDD958] && v1 != 0)
  {
    if (*(char *)(v1 + 23) < 0)
      operator delete(*(void **)v1);
    this = (CLMicroLocationProto::AnchorMetadata *)MEMORY[0x2426A04D4](v1, 0x1012C40EC159624);
  }
  CLMicroLocationProto::protobuf_AddDesc_microlocation_2eproto(this);
}

double CLMicroLocationProto::AnchorMetadata::New(CLMicroLocationProto::AnchorMetadata *this)
{
  uint64_t v1;
  double result;

  v1 = operator new();
  *(_QWORD *)(v1 + 8) = 0;
  *(_QWORD *)(v1 + 16) = 0;
  *(_QWORD *)v1 = &off_2511D6E48;
  *(_DWORD *)(v1 + 24) = 1;
  *(_WORD *)(v1 + 28) = 0;
  *(_QWORD *)&result = 1;
  *(_QWORD *)(v1 + 40) = 1;
  *(_QWORD *)(v1 + 32) = MEMORY[0x24BEDD958];
  *(_DWORD *)(v1 + 48) = 0;
  return result;
}

uint64_t CLMicroLocationProto::AnchorMetadata::Clear(uint64_t this)
{
  char v1;
  uint64_t v2;

  v1 = *(_BYTE *)(this + 48);
  if (v1)
  {
    *(_QWORD *)(this + 8) = 0;
    *(_QWORD *)(this + 16) = 0;
    *(_DWORD *)(this + 24) = 1;
    *(_WORD *)(this + 28) = 0;
    *(_DWORD *)(this + 40) = 1;
    if ((v1 & 0x40) != 0)
    {
      v2 = *(_QWORD *)(this + 32);
      if (v2 != MEMORY[0x24BEDD958])
      {
        if (*(char *)(v2 + 23) < 0)
        {
          **(_BYTE **)v2 = 0;
          *(_QWORD *)(v2 + 8) = 0;
        }
        else
        {
          *(_BYTE *)v2 = 0;
          *(_BYTE *)(v2 + 23) = 0;
        }
      }
    }
  }
  *(_DWORD *)(this + 48) = 0;
  return this;
}

uint64_t CLMicroLocationProto::AnchorMetadata::MergePartialFromCodedStream(CLMicroLocationProto::AnchorMetadata *this, wireless_diagnostics::google::protobuf::io::CodedInputStream *a2)
{
  uint64_t v4;
  char *v5;
  uint64_t TagFallback;
  int v7;
  _BYTE *v8;
  unint64_t v9;
  _BYTE *v10;
  char *v11;
  unsigned int v12;
  unint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  uint64_t result;
  _BYTE *v18;
  unsigned int v19;
  _BYTE *v20;
  unsigned int v21;
  _BYTE *v22;
  unsigned int v23;
  _BYTE *v24;
  _QWORD *v25;
  unsigned int v26[2];

  v4 = MEMORY[0x24BEDD958];
  while (2)
  {
    v5 = (char *)*((_QWORD *)a2 + 1);
    if ((unint64_t)v5 >= *((_QWORD *)a2 + 2) || *v5 < 0)
    {
      TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(a2);
      *((_DWORD *)a2 + 8) = TagFallback;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    else
    {
      TagFallback = *v5;
      *((_DWORD *)a2 + 8) = TagFallback;
      *((_QWORD *)a2 + 1) = v5 + 1;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    switch(TagFallback >> 3)
    {
      case 1u:
        v7 = TagFallback & 7;
        if (v7 != 1)
          goto LABEL_31;
        *(_QWORD *)v26 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(a2, (unint64_t *)v26) & 1) == 0)return 0;
        *((_QWORD *)this + 1) = *(_QWORD *)v26;
        *((_DWORD *)this + 12) |= 1u;
        v8 = (_BYTE *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v8 >= *((_QWORD *)a2 + 2) || *v8 != 17)
          continue;
        *((_QWORD *)a2 + 1) = v8 + 1;
        goto LABEL_15;
      case 2u:
        v7 = TagFallback & 7;
        if (v7 != 1)
          goto LABEL_31;
LABEL_15:
        *(_QWORD *)v26 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(a2, (unint64_t *)v26) & 1) == 0)return 0;
        *((_QWORD *)this + 2) = *(_QWORD *)v26;
        *((_DWORD *)this + 12) |= 2u;
        v10 = (_BYTE *)*((_QWORD *)a2 + 1);
        v9 = *((_QWORD *)a2 + 2);
        if ((unint64_t)v10 >= v9 || *v10 != 24)
          continue;
        v11 = v10 + 1;
        *((_QWORD *)a2 + 1) = v11;
LABEL_21:
        v26[0] = 0;
        if ((unint64_t)v11 >= v9 || *v11 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v26);
          if (!(_DWORD)result)
            return result;
          v12 = v26[0];
        }
        else
        {
          v12 = *v11;
          *((_QWORD *)a2 + 1) = v11 + 1;
        }
        if (v12 - 1 <= 1)
        {
          *((_DWORD *)this + 12) |= 4u;
          *((_DWORD *)this + 6) = v12;
        }
        v18 = (_BYTE *)*((_QWORD *)a2 + 1);
        v13 = *((_QWORD *)a2 + 2);
        if ((unint64_t)v18 >= v13 || *v18 != 32)
          continue;
        v14 = v18 + 1;
        *((_QWORD *)a2 + 1) = v14;
LABEL_41:
        v26[0] = 0;
        if ((unint64_t)v14 >= v13 || *v14 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v26);
          if (!(_DWORD)result)
            return result;
          v19 = v26[0];
          v20 = (_BYTE *)*((_QWORD *)a2 + 1);
          v13 = *((_QWORD *)a2 + 2);
        }
        else
        {
          v19 = *v14;
          v20 = v14 + 1;
          *((_QWORD *)a2 + 1) = v20;
        }
        *((_BYTE *)this + 28) = v19 != 0;
        *((_DWORD *)this + 12) |= 8u;
        if ((unint64_t)v20 >= v13 || *v20 != 40)
          continue;
        v15 = v20 + 1;
        *((_QWORD *)a2 + 1) = v15;
LABEL_49:
        v26[0] = 0;
        if ((unint64_t)v15 >= v13 || *v15 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v26);
          if (!(_DWORD)result)
            return result;
          v21 = v26[0];
          v22 = (_BYTE *)*((_QWORD *)a2 + 1);
          v13 = *((_QWORD *)a2 + 2);
        }
        else
        {
          v21 = *v15;
          v22 = v15 + 1;
          *((_QWORD *)a2 + 1) = v22;
        }
        *((_BYTE *)this + 29) = v21 != 0;
        *((_DWORD *)this + 12) |= 0x10u;
        if ((unint64_t)v22 >= v13 || *v22 != 48)
          continue;
        v16 = v22 + 1;
        *((_QWORD *)a2 + 1) = v16;
LABEL_57:
        v26[0] = 0;
        if ((unint64_t)v16 >= v13 || *v16 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v26);
          if (!(_DWORD)result)
            return result;
          v23 = v26[0];
        }
        else
        {
          v23 = *v16;
          *((_QWORD *)a2 + 1) = v16 + 1;
        }
        if (v23 - 1 <= 5)
        {
          *((_DWORD *)this + 12) |= 0x20u;
          *((_DWORD *)this + 10) = v23;
        }
        v24 = (_BYTE *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v24 >= *((_QWORD *)a2 + 2) || *v24 != 58)
          continue;
        *((_QWORD *)a2 + 1) = v24 + 1;
LABEL_67:
        *((_DWORD *)this + 12) |= 0x40u;
        if (*((_QWORD *)this + 4) == v4)
        {
          v25 = (_QWORD *)operator new();
          v25[1] = 0;
          v25[2] = 0;
          *v25 = 0;
          *((_QWORD *)this + 4) = v25;
        }
        result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString();
        if (!(_DWORD)result)
          return result;
        if (*((_QWORD *)a2 + 1) != *((_QWORD *)a2 + 2)
          || !*((_DWORD *)a2 + 11) && *((_DWORD *)a2 + 6) != *((_DWORD *)a2 + 10))
        {
          continue;
        }
        *((_DWORD *)a2 + 8) = 0;
        result = 1;
        *((_BYTE *)a2 + 36) = 1;
        break;
      case 3u:
        v7 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_31;
        v11 = (char *)*((_QWORD *)a2 + 1);
        v9 = *((_QWORD *)a2 + 2);
        goto LABEL_21;
      case 4u:
        v7 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_31;
        v14 = (char *)*((_QWORD *)a2 + 1);
        v13 = *((_QWORD *)a2 + 2);
        goto LABEL_41;
      case 5u:
        v7 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_31;
        v15 = (char *)*((_QWORD *)a2 + 1);
        v13 = *((_QWORD *)a2 + 2);
        goto LABEL_49;
      case 6u:
        v7 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_31;
        v16 = (char *)*((_QWORD *)a2 + 1);
        v13 = *((_QWORD *)a2 + 2);
        goto LABEL_57;
      case 7u:
        v7 = TagFallback & 7;
        if (v7 != 2)
          goto LABEL_31;
        goto LABEL_67;
      default:
        v7 = TagFallback & 7;
LABEL_31:
        if (v7 == 4)
          return 1;
        if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(a2, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback) & 1) != 0)continue;
        return 0;
    }
    return result;
  }
}

uint64_t CLMicroLocationProto::AnchorMetadata::SerializeWithCachedSizes(uint64_t this, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a2, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  int v6;

  v5 = this;
  v6 = *(_DWORD *)(this + 48);
  if ((v6 & 1) != 0)
  {
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, (uint64_t)a2, *(double *)(this + 8), a3);
    v6 = *(_DWORD *)(v5 + 48);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0)
        goto LABEL_4;
      goto LABEL_11;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, (uint64_t)a2, *(double *)(v5 + 16), a3);
  v6 = *(_DWORD *)(v5 + 48);
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0)
      goto LABEL_5;
    goto LABEL_12;
  }
LABEL_11:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, *(unsigned int *)(v5 + 24), (uint64_t)a2, a4);
  v6 = *(_DWORD *)(v5 + 48);
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_13;
  }
LABEL_12:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4, *(unsigned __int8 *)(v5 + 28), (uint64_t)a2, a4);
  v6 = *(_DWORD *)(v5 + 48);
  if ((v6 & 0x10) == 0)
  {
LABEL_6:
    if ((v6 & 0x20) == 0)
      goto LABEL_7;
    goto LABEL_14;
  }
LABEL_13:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5, *(unsigned __int8 *)(v5 + 29), (uint64_t)a2, a4);
  v6 = *(_DWORD *)(v5 + 48);
  if ((v6 & 0x20) == 0)
  {
LABEL_7:
    if ((v6 & 0x40) == 0)
      return this;
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString();
  }
LABEL_14:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)6, *(unsigned int *)(v5 + 40), (uint64_t)a2, a4);
  if ((*(_DWORD *)(v5 + 48) & 0x40) != 0)
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString();
  return this;
}

uint64_t CLMicroLocationProto::AnchorMetadata::ByteSize(CLMicroLocationProto::AnchorMetadata *this)
{
  int v2;
  int v3;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v4;
  int v5;
  uint64_t v6;
  unsigned int v7;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v8;
  int v9;
  uint64_t v10;
  int v11;
  char v12;
  uint64_t v13;
  unint64_t v14;
  int v15;

  v2 = *((unsigned __int8 *)this + 48);
  if (*((_BYTE *)this + 48))
  {
    if ((v2 & 2) != 0)
      v3 = ((v2 << 31 >> 31) & 9) + 9;
    else
      v3 = (v2 << 31 >> 31) & 9;
    if ((v2 & 4) != 0)
    {
      v4 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 6);
      if ((v4 & 0x80000000) != 0)
      {
        v5 = 11;
      }
      else if (v4 >= 0x80)
      {
        v5 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v4) + 1;
        v2 = *((_DWORD *)this + 12);
      }
      else
      {
        v5 = 2;
      }
      v3 += v5;
    }
    v7 = v3 + 2;
    if ((v2 & 8) == 0)
      v7 = v3;
    if ((v2 & 0x10) != 0)
      v6 = v7 + 2;
    else
      v6 = v7;
    if ((v2 & 0x20) != 0)
    {
      v8 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 10);
      if ((v8 & 0x80000000) != 0)
      {
        v9 = 11;
      }
      else if (v8 >= 0x80)
      {
        v9 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v8) + 1;
        v2 = *((_DWORD *)this + 12);
      }
      else
      {
        v9 = 2;
      }
      v6 = (v9 + v6);
    }
    if ((v2 & 0x40) != 0)
    {
      v10 = *((_QWORD *)this + 4);
      v11 = *(unsigned __int8 *)(v10 + 23);
      v12 = v11;
      v13 = *(_QWORD *)(v10 + 8);
      if ((v11 & 0x80u) == 0)
        v14 = *(unsigned __int8 *)(v10 + 23);
      else
        v14 = v13;
      if (v14 >= 0x80)
      {
        v15 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v14);
        v11 = *(unsigned __int8 *)(v10 + 23);
        v13 = *(_QWORD *)(v10 + 8);
        v12 = *(_BYTE *)(v10 + 23);
      }
      else
      {
        v15 = 1;
      }
      if (v12 < 0)
        v11 = v13;
      v6 = (v6 + v15 + v11 + 1);
    }
  }
  else
  {
    v6 = 0;
  }
  *((_DWORD *)this + 11) = v6;
  return v6;
}

void CLMicroLocationProto::AnchorMetadata::CheckTypeAndMergeFrom(CLMicroLocationProto::AnchorMetadata *this, const wireless_diagnostics::google::protobuf::MessageLite *lpsrc)
{
  uint64_t v4;
  uint64_t v5;

  CLMicroLocationProto::AnchorMetadata::MergeFrom(this, lpsrc);
}

uint64_t CLMicroLocationProto::AnchorMetadata::IsInitialized(CLMicroLocationProto::AnchorMetadata *this)
{
  return 1;
}

_QWORD *CLMicroLocationProto::AnchorMetadata::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CLMicroLocationProto.AnchorMetadata");
}

void CLMicroLocationProto::AnchorAppearance::MergeFrom(CLMicroLocationProto::AnchorAppearance *this, const CLMicroLocationProto::AnchorAppearance *a2)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  const std::string *v8;
  std::string *v9;
  _BYTE v10[48];

  if (a2 == this)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v10);
  }
  LOBYTE(v4) = *((_BYTE *)a2 + 40);
  if ((_BYTE)v4)
  {
    if ((*((_BYTE *)a2 + 40) & 1) != 0)
    {
      v5 = *((_QWORD *)a2 + 1);
      *((_DWORD *)this + 10) |= 1u;
      *((_QWORD *)this + 1) = v5;
      v4 = *((_DWORD *)a2 + 10);
      if ((v4 & 2) == 0)
      {
LABEL_6:
        if ((v4 & 4) == 0)
          goto LABEL_7;
        goto LABEL_11;
      }
    }
    else if ((*((_BYTE *)a2 + 40) & 2) == 0)
    {
      goto LABEL_6;
    }
    v6 = *((_QWORD *)a2 + 2);
    *((_DWORD *)this + 10) |= 2u;
    *((_QWORD *)this + 2) = v6;
    v4 = *((_DWORD *)a2 + 10);
    if ((v4 & 4) == 0)
    {
LABEL_7:
      if ((v4 & 8) == 0)
        return;
      goto LABEL_12;
    }
LABEL_11:
    v7 = *((_DWORD *)a2 + 8);
    *((_DWORD *)this + 10) |= 4u;
    *((_DWORD *)this + 8) = v7;
    if ((*((_DWORD *)a2 + 10) & 8) == 0)
      return;
LABEL_12:
    v8 = (const std::string *)*((_QWORD *)a2 + 3);
    *((_DWORD *)this + 10) |= 8u;
    v9 = (std::string *)*((_QWORD *)this + 3);
    if (v9 == (std::string *)MEMORY[0x24BEDD958])
    {
      v9 = (std::string *)operator new();
      v9->__r_.__value_.__l.__size_ = 0;
      v9->__r_.__value_.__r.__words[2] = 0;
      v9->__r_.__value_.__r.__words[0] = 0;
      *((_QWORD *)this + 3) = v9;
    }
    std::string::operator=(v9, v8);
  }
}

void sub_241ABAC5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void CLMicroLocationProto::AnchorAppearance::~AnchorAppearance(CLMicroLocationProto::AnchorAppearance *this)
{
  *(_QWORD *)this = &off_2511D6EC0;
  CLMicroLocationProto::WiFiRange::SharedDtor(this);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

{
  CLMicroLocationProto::AnchorAppearance::~AnchorAppearance(this);
  JUMPOUT(0x2426A04D4);
}

uint64_t CLMicroLocationProto::AnchorAppearance::New(CLMicroLocationProto::AnchorAppearance *this)
{
  uint64_t result;
  uint64_t v2;

  result = operator new();
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)result = &off_2511D6EC0;
  *(_QWORD *)(result + 8) = 0;
  v2 = MEMORY[0x24BEDD958];
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = v2;
  *(_DWORD *)(result + 40) = 0;
  return result;
}

uint64_t CLMicroLocationProto::AnchorAppearance::Clear(uint64_t this)
{
  char v1;
  uint64_t v2;

  v1 = *(_BYTE *)(this + 40);
  if (v1)
  {
    *(_DWORD *)(this + 32) = 0;
    *(_QWORD *)(this + 8) = 0;
    *(_QWORD *)(this + 16) = 0;
    if ((v1 & 8) != 0)
    {
      v2 = *(_QWORD *)(this + 24);
      if (v2 != MEMORY[0x24BEDD958])
      {
        if (*(char *)(v2 + 23) < 0)
        {
          **(_BYTE **)v2 = 0;
          *(_QWORD *)(v2 + 8) = 0;
        }
        else
        {
          *(_BYTE *)v2 = 0;
          *(_BYTE *)(v2 + 23) = 0;
        }
      }
    }
  }
  *(_DWORD *)(this + 40) = 0;
  return this;
}

uint64_t CLMicroLocationProto::AnchorAppearance::MergePartialFromCodedStream(CLMicroLocationProto::AnchorAppearance *this, wireless_diagnostics::google::protobuf::io::CodedInputStream *a2)
{
  unsigned int *v4;
  uint64_t v5;
  char *v6;
  uint64_t TagFallback;
  int v8;
  _BYTE *v9;
  unint64_t v10;
  _BYTE *v11;
  char *v12;
  _BYTE *v13;
  int v14;
  uint64_t result;
  _QWORD *v16;
  unint64_t v17;

  v4 = (unsigned int *)((char *)this + 32);
  v5 = MEMORY[0x24BEDD958];
  while (2)
  {
    v6 = (char *)*((_QWORD *)a2 + 1);
    if ((unint64_t)v6 >= *((_QWORD *)a2 + 2) || *v6 < 0)
    {
      TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(a2);
      *((_DWORD *)a2 + 8) = TagFallback;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    else
    {
      TagFallback = *v6;
      *((_DWORD *)a2 + 8) = TagFallback;
      *((_QWORD *)a2 + 1) = v6 + 1;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    switch(TagFallback >> 3)
    {
      case 1u:
        v8 = TagFallback & 7;
        if (v8 != 1)
          goto LABEL_26;
        v17 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(a2, &v17) & 1) == 0)
          return 0;
        *((_QWORD *)this + 1) = v17;
        *((_DWORD *)this + 10) |= 1u;
        v9 = (_BYTE *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v9 >= *((_QWORD *)a2 + 2) || *v9 != 17)
          continue;
        *((_QWORD *)a2 + 1) = v9 + 1;
        goto LABEL_15;
      case 2u:
        v8 = TagFallback & 7;
        if (v8 != 1)
          goto LABEL_26;
LABEL_15:
        v17 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(a2, &v17) & 1) == 0)
          return 0;
        *((_QWORD *)this + 2) = v17;
        *((_DWORD *)this + 10) |= 2u;
        v11 = (_BYTE *)*((_QWORD *)a2 + 1);
        v10 = *((_QWORD *)a2 + 2);
        if ((unint64_t)v11 >= v10 || *v11 != 24)
          continue;
        v12 = v11 + 1;
        *((_QWORD *)a2 + 1) = v12;
LABEL_21:
        if ((unint64_t)v12 >= v10 || *v12 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v4);
          if (!(_DWORD)result)
            return result;
          v13 = (_BYTE *)*((_QWORD *)a2 + 1);
          v10 = *((_QWORD *)a2 + 2);
        }
        else
        {
          *v4 = *v12;
          v13 = v12 + 1;
          *((_QWORD *)a2 + 1) = v13;
        }
        v14 = *((_DWORD *)this + 10) | 4;
        *((_DWORD *)this + 10) = v14;
        if ((unint64_t)v13 >= v10 || *v13 != 34)
          continue;
        *((_QWORD *)a2 + 1) = v13 + 1;
LABEL_34:
        *((_DWORD *)this + 10) = v14 | 8;
        if (*((_QWORD *)this + 3) == v5)
        {
          v16 = (_QWORD *)operator new();
          v16[1] = 0;
          v16[2] = 0;
          *v16 = 0;
          *((_QWORD *)this + 3) = v16;
        }
        result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadBytes();
        if (!(_DWORD)result)
          return result;
        if (*((_QWORD *)a2 + 1) != *((_QWORD *)a2 + 2)
          || !*((_DWORD *)a2 + 11) && *((_DWORD *)a2 + 6) != *((_DWORD *)a2 + 10))
        {
          continue;
        }
        *((_DWORD *)a2 + 8) = 0;
        result = 1;
        *((_BYTE *)a2 + 36) = 1;
        break;
      case 3u:
        v8 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_26;
        v12 = (char *)*((_QWORD *)a2 + 1);
        v10 = *((_QWORD *)a2 + 2);
        goto LABEL_21;
      case 4u:
        v8 = TagFallback & 7;
        if (v8 != 2)
          goto LABEL_26;
        v14 = *((_DWORD *)this + 10);
        goto LABEL_34;
      default:
        v8 = TagFallback & 7;
LABEL_26:
        if (v8 == 4)
          return 1;
        if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(a2, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback) & 1) != 0)continue;
        return 0;
    }
    return result;
  }
}

uint64_t CLMicroLocationProto::AnchorAppearance::SerializeWithCachedSizes(uint64_t this, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a2, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  int v6;

  v5 = this;
  v6 = *(_DWORD *)(this + 40);
  if ((v6 & 1) != 0)
  {
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, (uint64_t)a2, *(double *)(this + 8), a3);
    v6 = *(_DWORD *)(v5 + 40);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0)
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, (uint64_t)a2, *(double *)(v5 + 16), a3);
  v6 = *(_DWORD *)(v5 + 40);
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0)
      return this;
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBytes();
  }
LABEL_8:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, *(unsigned int *)(v5 + 32), (uint64_t)a2, a4);
  if ((*(_DWORD *)(v5 + 40) & 8) != 0)
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBytes();
  return this;
}

uint64_t CLMicroLocationProto::AnchorAppearance::ByteSize(CLMicroLocationProto::AnchorAppearance *this)
{
  int v2;
  unsigned int v3;
  uint64_t v4;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v5;
  int v6;
  uint64_t v7;
  int v8;
  char v9;
  uint64_t v10;
  unint64_t v11;
  int v12;

  v2 = *((unsigned __int8 *)this + 40);
  if (*((_BYTE *)this + 40))
  {
    v3 = (v2 << 31 >> 31) & 9;
    if ((v2 & 2) != 0)
      v4 = v3 + 9;
    else
      v4 = v3;
    if ((v2 & 4) != 0)
    {
      v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 8);
      if (v5 >= 0x80)
      {
        v6 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v5) + 1;
        v2 = *((_DWORD *)this + 10);
      }
      else
      {
        v6 = 2;
      }
      v4 = (v6 + v4);
    }
    if ((v2 & 8) != 0)
    {
      v7 = *((_QWORD *)this + 3);
      v8 = *(unsigned __int8 *)(v7 + 23);
      v9 = v8;
      v10 = *(_QWORD *)(v7 + 8);
      if ((v8 & 0x80u) == 0)
        v11 = *(unsigned __int8 *)(v7 + 23);
      else
        v11 = v10;
      if (v11 >= 0x80)
      {
        v12 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v11);
        v8 = *(unsigned __int8 *)(v7 + 23);
        v10 = *(_QWORD *)(v7 + 8);
        v9 = *(_BYTE *)(v7 + 23);
      }
      else
      {
        v12 = 1;
      }
      if (v9 < 0)
        v8 = v10;
      v4 = (v4 + v12 + v8 + 1);
    }
  }
  else
  {
    v4 = 0;
  }
  *((_DWORD *)this + 9) = v4;
  return v4;
}

void CLMicroLocationProto::AnchorAppearance::CheckTypeAndMergeFrom(CLMicroLocationProto::AnchorAppearance *this, const wireless_diagnostics::google::protobuf::MessageLite *lpsrc)
{
  uint64_t v4;
  uint64_t v5;

  CLMicroLocationProto::AnchorAppearance::MergeFrom(this, lpsrc);
}

void CLMicroLocationProto::AnchorAppearance::CopyFrom(CLMicroLocationProto::AnchorAppearance *this, const CLMicroLocationProto::AnchorAppearance *a2)
{
  if (a2 != this)
  {
    (*(void (**)(CLMicroLocationProto::AnchorAppearance *))(*(_QWORD *)this + 32))(this);
    CLMicroLocationProto::AnchorAppearance::MergeFrom(this, a2);
  }
}

uint64_t CLMicroLocationProto::AnchorAppearance::IsInitialized(CLMicroLocationProto::AnchorAppearance *this)
{
  return 1;
}

_QWORD *CLMicroLocationProto::AnchorAppearance::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CLMicroLocationProto.AnchorAppearance");
}

void CLMicroLocationProto::anchorAppearancesVector::MergeFrom(CLMicroLocationProto::anchorAppearancesVector *this, const CLMicroLocationProto::anchorAppearancesVector *a2)
{
  uint64_t v4;
  uint64_t v5;
  const CLMicroLocationProto::AnchorAppearance *v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE v13[48];

  if (a2 == this)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v13);
  }
  wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((CLMicroLocationProto::anchorAppearancesVector *)((char *)this + 8));
  if (*((int *)a2 + 4) >= 1)
  {
    v4 = 0;
    v5 = MEMORY[0x24BEDD958];
    do
    {
      v6 = *(const CLMicroLocationProto::AnchorAppearance **)(*((_QWORD *)a2 + 1) + 8 * v4);
      v7 = *((_DWORD *)this + 5);
      v8 = *((int *)this + 4);
      if ((int)v8 >= v7)
      {
        if (v7 == *((_DWORD *)this + 6))
        {
          wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((CLMicroLocationProto::anchorAppearancesVector *)((char *)this + 8));
          v7 = *((_DWORD *)this + 5);
        }
        *((_DWORD *)this + 5) = v7 + 1;
        v10 = operator new();
        *(_QWORD *)(v10 + 24) = v5;
        *(_QWORD *)(v10 + 32) = 0;
        *(_QWORD *)v10 = &off_2511D6EC0;
        *(_QWORD *)(v10 + 8) = 0;
        *(_QWORD *)(v10 + 16) = 0;
        *(_DWORD *)(v10 + 40) = 0;
        v11 = *((_QWORD *)this + 1);
        v12 = *((int *)this + 4);
        *((_DWORD *)this + 4) = v12 + 1;
        *(_QWORD *)(v11 + 8 * v12) = v10;
      }
      else
      {
        v9 = *((_QWORD *)this + 1);
        *((_DWORD *)this + 4) = v8 + 1;
        v10 = *(_QWORD *)(v9 + 8 * v8);
      }
      CLMicroLocationProto::AnchorAppearance::MergeFrom((CLMicroLocationProto::AnchorAppearance *)v10, v6);
      ++v4;
    }
    while (v4 < *((int *)a2 + 4));
  }
}

void sub_241ABB354(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void CLMicroLocationProto::anchorAppearancesVector::~anchorAppearancesVector(CLMicroLocationProto::anchorAppearancesVector *this)
{
  *(_QWORD *)this = &off_2511D6F38;
  CLMicroLocationProto::protobuf_AddDesc_microlocation_2eproto(this);
  wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Destroy<wireless_diagnostics::google::protobuf::RepeatedPtrField<CLMicroLocationProto::Measurement>::TypeHandler>((uint64_t *)this + 1);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

{
  CLMicroLocationProto::anchorAppearancesVector::~anchorAppearancesVector(this);
  JUMPOUT(0x2426A04D4);
}

uint64_t CLMicroLocationProto::anchorAppearancesVector::New(CLMicroLocationProto::anchorAppearancesVector *this)
{
  uint64_t result;

  result = operator new();
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)result = &off_2511D6F38;
  *(_DWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 32) = 0;
  return result;
}

uint64_t CLMicroLocationProto::anchorAppearancesVector::Clear(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = this;
  if (*(int *)(this + 16) >= 1)
  {
    v2 = 0;
    do
    {
      v3 = *(_QWORD *)(*(_QWORD *)(v1 + 8) + 8 * v2);
      this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 32))(v3);
      ++v2;
    }
    while (v2 < *(int *)(v1 + 16));
  }
  *(_DWORD *)(v1 + 16) = 0;
  *(_DWORD *)(v1 + 36) = 0;
  return this;
}

uint64_t CLMicroLocationProto::anchorAppearancesVector::MergePartialFromCodedStream(CLMicroLocationProto::anchorAppearancesVector *this, wireless_diagnostics::google::protobuf::io::CodedInputStream *a2)
{
  wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *v4;
  uint64_t v5;
  char *v6;
  uint64_t TagFallback;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  int v15;
  int v16;
  int v17;
  BOOL v18;
  int v19;
  _BYTE *v20;
  _BYTE *v21;
  uint64_t result;
  unsigned int v23;

  v4 = (CLMicroLocationProto::anchorAppearancesVector *)((char *)this + 8);
  v5 = MEMORY[0x24BEDD958];
  while (1)
  {
LABEL_2:
    v6 = (char *)*((_QWORD *)a2 + 1);
    if ((unint64_t)v6 >= *((_QWORD *)a2 + 2) || *v6 < 0)
    {
      TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(a2);
      *((_DWORD *)a2 + 8) = TagFallback;
    }
    else
    {
      TagFallback = *v6;
      *((_DWORD *)a2 + 8) = TagFallback;
      *((_QWORD *)a2 + 1) = v6 + 1;
    }
    if ((_DWORD)TagFallback == 10)
    {
      while (1)
      {
        v8 = *((_DWORD *)this + 5);
        v9 = *((int *)this + 4);
        if ((int)v9 >= v8)
        {
          if (v8 == *((_DWORD *)this + 6))
          {
            wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve(v4);
            v8 = *((_DWORD *)this + 5);
          }
          *((_DWORD *)this + 5) = v8 + 1;
          v11 = operator new();
          *(_QWORD *)(v11 + 24) = v5;
          *(_QWORD *)(v11 + 32) = 0;
          *(_QWORD *)v11 = &off_2511D6EC0;
          *(_QWORD *)(v11 + 8) = 0;
          *(_QWORD *)(v11 + 16) = 0;
          *(_DWORD *)(v11 + 40) = 0;
          v12 = *((_QWORD *)this + 1);
          v13 = *((int *)this + 4);
          *((_DWORD *)this + 4) = v13 + 1;
          *(_QWORD *)(v12 + 8 * v13) = v11;
        }
        else
        {
          v10 = *((_QWORD *)this + 1);
          *((_DWORD *)this + 4) = v9 + 1;
          v11 = *(_QWORD *)(v10 + 8 * v9);
        }
        v23 = 0;
        v14 = (char *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v14 >= *((_QWORD *)a2 + 2) || *v14 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v23))return 0;
        }
        else
        {
          v23 = *v14;
          *((_QWORD *)a2 + 1) = v14 + 1;
        }
        v15 = *((_DWORD *)a2 + 14);
        v16 = *((_DWORD *)a2 + 15);
        *((_DWORD *)a2 + 14) = v15 + 1;
        if (v15 >= v16)
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(a2);
        if (!CLMicroLocationProto::AnchorAppearance::MergePartialFromCodedStream((CLMicroLocationProto::AnchorAppearance *)v11, a2)|| !*((_BYTE *)a2 + 36))
        {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(a2);
        v17 = *((_DWORD *)a2 + 14);
        v18 = __OFSUB__(v17, 1);
        v19 = v17 - 1;
        if (v19 < 0 == v18)
          *((_DWORD *)a2 + 14) = v19;
        v20 = (_BYTE *)*((_QWORD *)a2 + 1);
        v21 = (_BYTE *)*((_QWORD *)a2 + 2);
        if (v20 >= v21 || *v20 != 10)
        {
          if (v20 == v21 && (*((_DWORD *)a2 + 11) || *((_DWORD *)a2 + 6) == *((_DWORD *)a2 + 10)))
          {
            *((_DWORD *)a2 + 8) = 0;
            result = 1;
            *((_BYTE *)a2 + 36) = 1;
            return result;
          }
          goto LABEL_2;
        }
        *((_QWORD *)a2 + 1) = v20 + 1;
      }
    }
    if (!(_DWORD)TagFallback || (TagFallback & 7) == 4)
      return 1;
    if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(a2, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback) & 1) == 0)return 0;
  }
}

uint64_t CLMicroLocationProto::anchorAppearancesVector::SerializeWithCachedSizes(uint64_t this, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  uint64_t v6;

  if (*(int *)(this + 16) >= 1)
  {
    v5 = this;
    v6 = 0;
    do
      this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(_QWORD *)(*(_QWORD *)(v5 + 8) + 8 * v6++), a2, a4);
    while (v6 < *(int *)(v5 + 16));
  }
  return this;
}

uint64_t CLMicroLocationProto::anchorAppearancesVector::ByteSize(CLMicroLocationProto::anchorAppearancesVector *this)
{
  uint64_t v2;
  uint64_t v3;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v4;
  int v5;
  int v6;

  v2 = *((unsigned int *)this + 4);
  if ((int)v2 >= 1)
  {
    v3 = 0;
    do
    {
      v4 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)CLMicroLocationProto::AnchorAppearance::ByteSize(*(CLMicroLocationProto::AnchorAppearance **)(*((_QWORD *)this + 1) + 8 * v3));
      v5 = (int)v4;
      if (v4 >= 0x80)
        v6 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v4);
      else
        v6 = 1;
      v2 = (v5 + v2 + v6);
      ++v3;
    }
    while (v3 < *((int *)this + 4));
  }
  *((_DWORD *)this + 8) = v2;
  return v2;
}

void CLMicroLocationProto::anchorAppearancesVector::CheckTypeAndMergeFrom(CLMicroLocationProto::anchorAppearancesVector *this, const wireless_diagnostics::google::protobuf::MessageLite *lpsrc)
{
  uint64_t v4;
  uint64_t v5;

  CLMicroLocationProto::anchorAppearancesVector::MergeFrom(this, lpsrc);
}

void CLMicroLocationProto::anchorAppearancesVector::CopyFrom(CLMicroLocationProto::anchorAppearancesVector *this, const CLMicroLocationProto::anchorAppearancesVector *a2)
{
  if (a2 != this)
  {
    (*(void (**)(CLMicroLocationProto::anchorAppearancesVector *))(*(_QWORD *)this + 32))(this);
    CLMicroLocationProto::anchorAppearancesVector::MergeFrom(this, a2);
  }
}

uint64_t CLMicroLocationProto::anchorAppearancesVector::IsInitialized(CLMicroLocationProto::anchorAppearancesVector *this)
{
  return 1;
}

_QWORD *CLMicroLocationProto::anchorAppearancesVector::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CLMicroLocationProto.anchorAppearancesVector");
}

void CLMicroLocationProto::AnchorValueStatistics::MergeFrom(CLMicroLocationProto::AnchorValueStatistics *this, const CLMicroLocationProto::AnchorValueStatistics *a2)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  const std::string *v7;
  std::string *v8;
  _BYTE v9[48];

  if (a2 == this)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v9);
  }
  LOBYTE(v4) = *((_BYTE *)a2 + 36);
  if ((_BYTE)v4)
  {
    if ((*((_BYTE *)a2 + 36) & 1) != 0)
    {
      v5 = *((_QWORD *)a2 + 1);
      *((_DWORD *)this + 9) |= 1u;
      *((_QWORD *)this + 1) = v5;
      v4 = *((_DWORD *)a2 + 9);
      if ((v4 & 2) == 0)
      {
LABEL_6:
        if ((v4 & 4) == 0)
          return;
        goto LABEL_10;
      }
    }
    else if ((*((_BYTE *)a2 + 36) & 2) == 0)
    {
      goto LABEL_6;
    }
    v6 = *((_QWORD *)a2 + 2);
    *((_DWORD *)this + 9) |= 2u;
    *((_QWORD *)this + 2) = v6;
    if ((*((_DWORD *)a2 + 9) & 4) == 0)
      return;
LABEL_10:
    v7 = (const std::string *)*((_QWORD *)a2 + 3);
    *((_DWORD *)this + 9) |= 4u;
    v8 = (std::string *)*((_QWORD *)this + 3);
    if (v8 == (std::string *)MEMORY[0x24BEDD958])
    {
      v8 = (std::string *)operator new();
      v8->__r_.__value_.__l.__size_ = 0;
      v8->__r_.__value_.__r.__words[2] = 0;
      v8->__r_.__value_.__r.__words[0] = 0;
      *((_QWORD *)this + 3) = v8;
    }
    std::string::operator=(v8, v7);
  }
}

void sub_241ABB920(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void CLMicroLocationProto::AnchorValueStatistics::~AnchorValueStatistics(CLMicroLocationProto::AnchorValueStatistics *this)
{
  *(_QWORD *)this = &off_2511D6FB0;
  CLMicroLocationProto::WiFiRange::SharedDtor(this);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

{
  CLMicroLocationProto::AnchorValueStatistics::~AnchorValueStatistics(this);
  JUMPOUT(0x2426A04D4);
}

_QWORD *CLMicroLocationProto::AnchorValueStatistics::New(CLMicroLocationProto::AnchorValueStatistics *this)
{
  _QWORD *result;
  uint64_t v2;

  result = (_QWORD *)operator new();
  v2 = MEMORY[0x24BEDD958];
  *result = &off_2511D6FB0;
  result[1] = 0;
  result[2] = 0;
  result[3] = v2;
  result[4] = 0;
  return result;
}

uint64_t CLMicroLocationProto::AnchorValueStatistics::Clear(uint64_t this)
{
  char v1;
  uint64_t v2;

  v1 = *(_BYTE *)(this + 36);
  if (v1)
  {
    *(_QWORD *)(this + 8) = 0;
    *(_QWORD *)(this + 16) = 0;
    if ((v1 & 4) != 0)
    {
      v2 = *(_QWORD *)(this + 24);
      if (v2 != MEMORY[0x24BEDD958])
      {
        if (*(char *)(v2 + 23) < 0)
        {
          **(_BYTE **)v2 = 0;
          *(_QWORD *)(v2 + 8) = 0;
        }
        else
        {
          *(_BYTE *)v2 = 0;
          *(_BYTE *)(v2 + 23) = 0;
        }
      }
    }
  }
  *(_DWORD *)(this + 36) = 0;
  return this;
}

uint64_t CLMicroLocationProto::AnchorValueStatistics::MergePartialFromCodedStream(CLMicroLocationProto::AnchorValueStatistics *this, wireless_diagnostics::google::protobuf::io::CodedInputStream *a2)
{
  uint64_t v4;
  char *v5;
  uint64_t TagFallback;
  unsigned int v7;
  int v8;
  int v9;
  _BYTE *v10;
  _BYTE *v11;
  _QWORD *v12;
  uint64_t result;
  unint64_t v14;

  v4 = MEMORY[0x24BEDD958];
  while (1)
  {
    while (1)
    {
      while (1)
      {
        v5 = (char *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v5 >= *((_QWORD *)a2 + 2) || *v5 < 0)
        {
          TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(a2);
          *((_DWORD *)a2 + 8) = TagFallback;
          if (!(_DWORD)TagFallback)
            return 1;
        }
        else
        {
          TagFallback = *v5;
          *((_DWORD *)a2 + 8) = TagFallback;
          *((_QWORD *)a2 + 1) = v5 + 1;
          if (!(_DWORD)TagFallback)
            return 1;
        }
        v7 = TagFallback >> 3;
        if (TagFallback >> 3 != 1)
          break;
        v8 = TagFallback & 7;
        if (v8 != 1)
          goto LABEL_30;
        v14 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(a2, &v14) & 1) == 0)
          return 0;
        *((_QWORD *)this + 1) = v14;
        *((_DWORD *)this + 9) |= 1u;
        v10 = (_BYTE *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v10 < *((_QWORD *)a2 + 2) && *v10 == 17)
        {
          *((_QWORD *)a2 + 1) = v10 + 1;
          goto LABEL_18;
        }
      }
      if (v7 == 2)
        break;
      if (v7 == 3)
      {
        v8 = TagFallback & 7;
        if (v8 == 2)
        {
          v9 = *((_DWORD *)this + 9);
          goto LABEL_22;
        }
      }
      else
      {
        v8 = TagFallback & 7;
      }
LABEL_30:
      if (v8 == 4)
        return 1;
      if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(a2, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback) & 1) == 0)return 0;
    }
    v8 = TagFallback & 7;
    if (v8 != 1)
      goto LABEL_30;
LABEL_18:
    v14 = 0;
    if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(a2, &v14) & 1) == 0)
      return 0;
    *((_QWORD *)this + 2) = v14;
    v9 = *((_DWORD *)this + 9) | 2;
    *((_DWORD *)this + 9) = v9;
    v11 = (_BYTE *)*((_QWORD *)a2 + 1);
    if ((unint64_t)v11 < *((_QWORD *)a2 + 2) && *v11 == 26)
    {
      *((_QWORD *)a2 + 1) = v11 + 1;
LABEL_22:
      *((_DWORD *)this + 9) = v9 | 4;
      if (*((_QWORD *)this + 3) == v4)
      {
        v12 = (_QWORD *)operator new();
        v12[1] = 0;
        v12[2] = 0;
        *v12 = 0;
        *((_QWORD *)this + 3) = v12;
      }
      result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadBytes();
      if (!(_DWORD)result)
        return result;
      if (*((_QWORD *)a2 + 1) == *((_QWORD *)a2 + 2)
        && (*((_DWORD *)a2 + 11) || *((_DWORD *)a2 + 6) == *((_DWORD *)a2 + 10)))
      {
        break;
      }
    }
  }
  *((_DWORD *)a2 + 8) = 0;
  result = 1;
  *((_BYTE *)a2 + 36) = 1;
  return result;
}

uint64_t CLMicroLocationProto::AnchorValueStatistics::SerializeWithCachedSizes(uint64_t this, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a2, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a3)
{
  uint64_t v4;
  int v5;

  v4 = this;
  v5 = *(_DWORD *)(this + 36);
  if ((v5 & 1) != 0)
  {
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, (uint64_t)a2, *(double *)(this + 8), a3);
    v5 = *(_DWORD *)(v4 + 36);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0)
        return this;
      return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBytes();
    }
  }
  else if ((v5 & 2) == 0)
  {
    goto LABEL_3;
  }
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, (uint64_t)a2, *(double *)(v4 + 16), a3);
  if ((*(_DWORD *)(v4 + 36) & 4) != 0)
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBytes();
  return this;
}

uint64_t CLMicroLocationProto::AnchorValueStatistics::ByteSize(CLMicroLocationProto::AnchorValueStatistics *this)
{
  int v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  char v7;
  uint64_t v8;
  unint64_t v9;
  int v10;

  v2 = *((unsigned __int8 *)this + 36);
  if (*((_BYTE *)this + 36))
  {
    v3 = (v2 << 31 >> 31) & 9;
    if ((v2 & 2) != 0)
      v4 = v3 + 9;
    else
      v4 = v3;
    if ((v2 & 4) != 0)
    {
      v5 = *((_QWORD *)this + 3);
      v6 = *(unsigned __int8 *)(v5 + 23);
      v7 = v6;
      v8 = *(_QWORD *)(v5 + 8);
      if ((v6 & 0x80u) == 0)
        v9 = *(unsigned __int8 *)(v5 + 23);
      else
        v9 = v8;
      if (v9 >= 0x80)
      {
        v10 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v9);
        v6 = *(unsigned __int8 *)(v5 + 23);
        v8 = *(_QWORD *)(v5 + 8);
        v7 = *(_BYTE *)(v5 + 23);
      }
      else
      {
        v10 = 1;
      }
      if (v7 < 0)
        v6 = v8;
      v4 = (v4 + v10 + v6 + 1);
    }
  }
  else
  {
    v4 = 0;
  }
  *((_DWORD *)this + 8) = v4;
  return v4;
}

void CLMicroLocationProto::AnchorValueStatistics::CheckTypeAndMergeFrom(CLMicroLocationProto::AnchorValueStatistics *this, const wireless_diagnostics::google::protobuf::MessageLite *lpsrc)
{
  uint64_t v4;
  uint64_t v5;

  CLMicroLocationProto::AnchorValueStatistics::MergeFrom(this, lpsrc);
}

uint64_t CLMicroLocationProto::AnchorValueStatistics::IsInitialized(CLMicroLocationProto::AnchorValueStatistics *this)
{
  return 1;
}

_QWORD *CLMicroLocationProto::AnchorValueStatistics::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CLMicroLocationProto.AnchorValueStatistics");
}

void CLMicroLocationProto::ClusterAnchorValueStatistics::MergeFrom(CLMicroLocationProto::ClusterAnchorValueStatistics *this, const CLMicroLocationProto::ClusterAnchorValueStatistics *a2)
{
  std::string *v4;
  uint64_t v5;
  const CLMicroLocationProto::AnchorValueStatistics *v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  CLMicroLocationProto::AnchorValueStatistics *v10;
  uint64_t v11;
  uint64_t v12;
  const std::string *v13;
  std::string *v14;
  _BYTE v15[48];

  if (a2 == this)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v15);
  }
  wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((CLMicroLocationProto::ClusterAnchorValueStatistics *)((char *)this + 8));
  v4 = (std::string *)MEMORY[0x24BEDD958];
  if (*((int *)a2 + 4) >= 1)
  {
    v5 = 0;
    do
    {
      v6 = *(const CLMicroLocationProto::AnchorValueStatistics **)(*((_QWORD *)a2 + 1) + 8 * v5);
      v7 = *((_DWORD *)this + 5);
      v8 = *((int *)this + 4);
      if ((int)v8 >= v7)
      {
        if (v7 == *((_DWORD *)this + 6))
        {
          wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((CLMicroLocationProto::ClusterAnchorValueStatistics *)((char *)this + 8));
          v7 = *((_DWORD *)this + 5);
        }
        *((_DWORD *)this + 5) = v7 + 1;
        v10 = (CLMicroLocationProto::AnchorValueStatistics *)operator new();
        *(_QWORD *)v10 = &off_2511D6FB0;
        *((_QWORD *)v10 + 1) = 0;
        *((_QWORD *)v10 + 2) = 0;
        *((_QWORD *)v10 + 3) = v4;
        *((_QWORD *)v10 + 4) = 0;
        v11 = *((_QWORD *)this + 1);
        v12 = *((int *)this + 4);
        *((_DWORD *)this + 4) = v12 + 1;
        *(_QWORD *)(v11 + 8 * v12) = v10;
      }
      else
      {
        v9 = *((_QWORD *)this + 1);
        *((_DWORD *)this + 4) = v8 + 1;
        v10 = *(CLMicroLocationProto::AnchorValueStatistics **)(v9 + 8 * v8);
      }
      CLMicroLocationProto::AnchorValueStatistics::MergeFrom(v10, v6);
      ++v5;
    }
    while (v5 < *((int *)a2 + 4));
  }
  if ((*((_BYTE *)a2 + 44) & 2) != 0)
  {
    v13 = (const std::string *)*((_QWORD *)a2 + 4);
    *((_DWORD *)this + 11) |= 2u;
    v14 = (std::string *)*((_QWORD *)this + 4);
    if (v14 == v4)
    {
      v14 = (std::string *)operator new();
      v14->__r_.__value_.__l.__size_ = 0;
      v14->__r_.__value_.__r.__words[2] = 0;
      v14->__r_.__value_.__r.__words[0] = 0;
      *((_QWORD *)this + 4) = v14;
    }
    std::string::operator=(v14, v13);
  }
}

void sub_241ABBF4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void CLMicroLocationProto::ClusterAnchorValueStatistics::~ClusterAnchorValueStatistics(CLMicroLocationProto::ClusterAnchorValueStatistics *this)
{
  *(_QWORD *)this = &off_2511D7028;
  CLMicroLocationProto::AnchorMetadata::SharedDtor(this);
  wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Destroy<wireless_diagnostics::google::protobuf::RepeatedPtrField<CLMicroLocationProto::Measurement>::TypeHandler>((uint64_t *)this + 1);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

{
  CLMicroLocationProto::ClusterAnchorValueStatistics::~ClusterAnchorValueStatistics(this);
  JUMPOUT(0x2426A04D4);
}

uint64_t CLMicroLocationProto::ClusterAnchorValueStatistics::New(CLMicroLocationProto::ClusterAnchorValueStatistics *this)
{
  uint64_t result;

  result = operator new();
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)result = &off_2511D7028;
  *(_DWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 32) = MEMORY[0x24BEDD958];
  *(_QWORD *)(result + 40) = 0;
  return result;
}

uint64_t CLMicroLocationProto::ClusterAnchorValueStatistics::Clear(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = this;
  if ((*(_BYTE *)(this + 44) & 2) != 0)
  {
    v2 = *(_QWORD *)(this + 32);
    if (v2 != MEMORY[0x24BEDD958])
    {
      if (*(char *)(v2 + 23) < 0)
      {
        **(_BYTE **)v2 = 0;
        *(_QWORD *)(v2 + 8) = 0;
      }
      else
      {
        *(_BYTE *)v2 = 0;
        *(_BYTE *)(v2 + 23) = 0;
      }
    }
  }
  if (*(int *)(this + 16) >= 1)
  {
    v3 = 0;
    do
    {
      v4 = *(_QWORD *)(*(_QWORD *)(v1 + 8) + 8 * v3);
      this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 32))(v4);
      ++v3;
    }
    while (v3 < *(int *)(v1 + 16));
  }
  *(_DWORD *)(v1 + 16) = 0;
  *(_DWORD *)(v1 + 44) = 0;
  return this;
}

uint64_t CLMicroLocationProto::ClusterAnchorValueStatistics::MergePartialFromCodedStream(CLMicroLocationProto::ClusterAnchorValueStatistics *this, wireless_diagnostics::google::protobuf::io::CodedInputStream *a2)
{
  wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *v4;
  uint64_t v5;
  char *v6;
  uint64_t TagFallback;
  int v8;
  _QWORD *v9;
  uint64_t result;
  int v11;
  uint64_t v12;
  uint64_t v13;
  CLMicroLocationProto::AnchorValueStatistics *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  int v18;
  int v19;
  int v20;
  BOOL v21;
  int v22;
  unsigned __int8 *v23;
  int v24;
  unsigned int v25;

  v4 = (CLMicroLocationProto::ClusterAnchorValueStatistics *)((char *)this + 8);
  v5 = MEMORY[0x24BEDD958];
  do
  {
    while (1)
    {
LABEL_2:
      v6 = (char *)*((_QWORD *)a2 + 1);
      if ((unint64_t)v6 >= *((_QWORD *)a2 + 2) || *v6 < 0)
      {
        TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(a2);
        *((_DWORD *)a2 + 8) = TagFallback;
        if (!(_DWORD)TagFallback)
          return 1;
      }
      else
      {
        TagFallback = *v6;
        *((_DWORD *)a2 + 8) = TagFallback;
        *((_QWORD *)a2 + 1) = v6 + 1;
        if (!(_DWORD)TagFallback)
          return 1;
      }
      if (TagFallback >> 3 != 1)
        break;
      v8 = TagFallback & 7;
      if (v8 == 2)
      {
        while (1)
        {
          v11 = *((_DWORD *)this + 5);
          v12 = *((int *)this + 4);
          if ((int)v12 >= v11)
          {
            if (v11 == *((_DWORD *)this + 6))
            {
              wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve(v4);
              v11 = *((_DWORD *)this + 5);
            }
            *((_DWORD *)this + 5) = v11 + 1;
            v14 = (CLMicroLocationProto::AnchorValueStatistics *)operator new();
            *(_QWORD *)v14 = &off_2511D6FB0;
            *((_QWORD *)v14 + 1) = 0;
            *((_QWORD *)v14 + 2) = 0;
            *((_QWORD *)v14 + 3) = v5;
            *((_QWORD *)v14 + 4) = 0;
            v15 = *((_QWORD *)this + 1);
            v16 = *((int *)this + 4);
            *((_DWORD *)this + 4) = v16 + 1;
            *(_QWORD *)(v15 + 8 * v16) = v14;
          }
          else
          {
            v13 = *((_QWORD *)this + 1);
            *((_DWORD *)this + 4) = v12 + 1;
            v14 = *(CLMicroLocationProto::AnchorValueStatistics **)(v13 + 8 * v12);
          }
          v25 = 0;
          v17 = (char *)*((_QWORD *)a2 + 1);
          if ((unint64_t)v17 >= *((_QWORD *)a2 + 2) || *v17 < 0)
          {
            if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v25))return 0;
          }
          else
          {
            v25 = *v17;
            *((_QWORD *)a2 + 1) = v17 + 1;
          }
          v18 = *((_DWORD *)a2 + 14);
          v19 = *((_DWORD *)a2 + 15);
          *((_DWORD *)a2 + 14) = v18 + 1;
          if (v18 >= v19)
            return 0;
          wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(a2);
          if (!CLMicroLocationProto::AnchorValueStatistics::MergePartialFromCodedStream(v14, a2)
            || !*((_BYTE *)a2 + 36))
          {
            return 0;
          }
          wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(a2);
          v20 = *((_DWORD *)a2 + 14);
          v21 = __OFSUB__(v20, 1);
          v22 = v20 - 1;
          if (v22 < 0 == v21)
            *((_DWORD *)a2 + 14) = v22;
          v23 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
          if ((unint64_t)v23 >= *((_QWORD *)a2 + 2))
            goto LABEL_2;
          v24 = *v23;
          if (v24 != 10)
          {
            if (v24 != 18)
              goto LABEL_2;
            *((_QWORD *)a2 + 1) = v23 + 1;
            goto LABEL_10;
          }
          *((_QWORD *)a2 + 1) = v23 + 1;
        }
      }
LABEL_36:
      if (v8 == 4)
        return 1;
      if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(a2, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback) & 1) == 0)return 0;
    }
    if (TagFallback >> 3 != 2)
    {
      v8 = TagFallback & 7;
      goto LABEL_36;
    }
    v8 = TagFallback & 7;
    if (v8 != 2)
      goto LABEL_36;
LABEL_10:
    *((_DWORD *)this + 11) |= 2u;
    if (*((_QWORD *)this + 4) == v5)
    {
      v9 = (_QWORD *)operator new();
      v9[1] = 0;
      v9[2] = 0;
      *v9 = 0;
      *((_QWORD *)this + 4) = v9;
    }
    result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadBytes();
    if (!(_DWORD)result)
      return result;
  }
  while (*((_QWORD *)a2 + 1) != *((_QWORD *)a2 + 2)
       || !*((_DWORD *)a2 + 11) && *((_DWORD *)a2 + 6) != *((_DWORD *)a2 + 10));
  *((_DWORD *)a2 + 8) = 0;
  result = 1;
  *((_BYTE *)a2 + 36) = 1;
  return result;
}

uint64_t CLMicroLocationProto::ClusterAnchorValueStatistics::SerializeWithCachedSizes(uint64_t this, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  uint64_t v6;

  v5 = this;
  if (*(int *)(this + 16) >= 1)
  {
    v6 = 0;
    do
      this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(_QWORD *)(*(_QWORD *)(v5 + 8) + 8 * v6++), a2, a4);
    while (v6 < *(int *)(v5 + 16));
  }
  if ((*(_BYTE *)(v5 + 44) & 2) != 0)
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBytes();
  return this;
}

uint64_t CLMicroLocationProto::ClusterAnchorValueStatistics::ByteSize(CLMicroLocationProto::ClusterAnchorValueStatistics *this)
{
  int v2;
  uint64_t v3;
  int v4;
  char v5;
  uint64_t v6;
  unint64_t v7;
  int v8;
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v13;
  int v14;
  int v15;

  if ((*((_BYTE *)this + 44) & 2) != 0)
  {
    v3 = *((_QWORD *)this + 4);
    v4 = *(unsigned __int8 *)(v3 + 23);
    v5 = v4;
    v6 = *(_QWORD *)(v3 + 8);
    if ((v4 & 0x80u) == 0)
      v7 = *(unsigned __int8 *)(v3 + 23);
    else
      v7 = v6;
    if (v7 >= 0x80)
    {
      v9 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v7);
      v4 = *(unsigned __int8 *)(v3 + 23);
      v6 = *(_QWORD *)(v3 + 8);
      v8 = v9 + 1;
      v5 = *(_BYTE *)(v3 + 23);
    }
    else
    {
      v8 = 2;
    }
    if (v5 < 0)
      v4 = v6;
    v2 = v8 + v4;
  }
  else
  {
    v2 = 0;
  }
  v10 = *((_DWORD *)this + 4);
  v11 = (v10 + v2);
  if (v10 >= 1)
  {
    v12 = 0;
    do
    {
      v13 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)CLMicroLocationProto::AnchorValueStatistics::ByteSize(*(CLMicroLocationProto::AnchorValueStatistics **)(*((_QWORD *)this + 1) + 8 * v12));
      v14 = (int)v13;
      if (v13 >= 0x80)
        v15 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v13);
      else
        v15 = 1;
      v11 = (v14 + v11 + v15);
      ++v12;
    }
    while (v12 < *((int *)this + 4));
  }
  *((_DWORD *)this + 10) = v11;
  return v11;
}

void CLMicroLocationProto::ClusterAnchorValueStatistics::CheckTypeAndMergeFrom(CLMicroLocationProto::ClusterAnchorValueStatistics *this, const wireless_diagnostics::google::protobuf::MessageLite *lpsrc)
{
  uint64_t v4;
  uint64_t v5;

  CLMicroLocationProto::ClusterAnchorValueStatistics::MergeFrom(this, lpsrc);
}

uint64_t CLMicroLocationProto::ClusterAnchorValueStatistics::IsInitialized(CLMicroLocationProto::ClusterAnchorValueStatistics *this)
{
  return 1;
}

_QWORD *CLMicroLocationProto::ClusterAnchorValueStatistics::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CLMicroLocationProto.ClusterAnchorValueStatistics");
}

void CLMicroLocationProto::ClusterAnchorValueStatisticsVector::MergeFrom(CLMicroLocationProto::ClusterAnchorValueStatisticsVector *this, const CLMicroLocationProto::ClusterAnchorValueStatisticsVector *a2)
{
  uint64_t v4;
  uint64_t v5;
  const CLMicroLocationProto::ClusterAnchorValueStatistics *v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE v13[48];

  if (a2 == this)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v13);
  }
  wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((CLMicroLocationProto::ClusterAnchorValueStatisticsVector *)((char *)this + 8));
  if (*((int *)a2 + 4) >= 1)
  {
    v4 = 0;
    v5 = MEMORY[0x24BEDD958];
    do
    {
      v6 = *(const CLMicroLocationProto::ClusterAnchorValueStatistics **)(*((_QWORD *)a2 + 1) + 8 * v4);
      v7 = *((_DWORD *)this + 5);
      v8 = *((int *)this + 4);
      if ((int)v8 >= v7)
      {
        if (v7 == *((_DWORD *)this + 6))
        {
          wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((CLMicroLocationProto::ClusterAnchorValueStatisticsVector *)((char *)this + 8));
          v7 = *((_DWORD *)this + 5);
        }
        *((_DWORD *)this + 5) = v7 + 1;
        v10 = operator new();
        *(_QWORD *)(v10 + 8) = 0;
        *(_QWORD *)(v10 + 16) = 0;
        *(_QWORD *)v10 = &off_2511D7028;
        *(_DWORD *)(v10 + 24) = 0;
        *(_QWORD *)(v10 + 32) = v5;
        *(_QWORD *)(v10 + 40) = 0;
        v11 = *((_QWORD *)this + 1);
        v12 = *((int *)this + 4);
        *((_DWORD *)this + 4) = v12 + 1;
        *(_QWORD *)(v11 + 8 * v12) = v10;
      }
      else
      {
        v9 = *((_QWORD *)this + 1);
        *((_DWORD *)this + 4) = v8 + 1;
        v10 = *(_QWORD *)(v9 + 8 * v8);
      }
      CLMicroLocationProto::ClusterAnchorValueStatistics::MergeFrom((CLMicroLocationProto::ClusterAnchorValueStatistics *)v10, v6);
      ++v4;
    }
    while (v4 < *((int *)a2 + 4));
  }
}

void sub_241ABC684(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void CLMicroLocationProto::ClusterAnchorValueStatisticsVector::~ClusterAnchorValueStatisticsVector(CLMicroLocationProto::ClusterAnchorValueStatisticsVector *this)
{
  *(_QWORD *)this = &off_2511D70A0;
  CLMicroLocationProto::protobuf_AddDesc_microlocation_2eproto(this);
  wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Destroy<wireless_diagnostics::google::protobuf::RepeatedPtrField<CLMicroLocationProto::Measurement>::TypeHandler>((uint64_t *)this + 1);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

{
  CLMicroLocationProto::ClusterAnchorValueStatisticsVector::~ClusterAnchorValueStatisticsVector(this);
  JUMPOUT(0x2426A04D4);
}

uint64_t CLMicroLocationProto::ClusterAnchorValueStatisticsVector::New(CLMicroLocationProto::ClusterAnchorValueStatisticsVector *this)
{
  uint64_t result;

  result = operator new();
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)result = &off_2511D70A0;
  *(_DWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 32) = 0;
  return result;
}

uint64_t CLMicroLocationProto::ClusterAnchorValueStatisticsVector::Clear(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = this;
  if (*(int *)(this + 16) >= 1)
  {
    v2 = 0;
    do
    {
      v3 = *(_QWORD *)(*(_QWORD *)(v1 + 8) + 8 * v2);
      this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 32))(v3);
      ++v2;
    }
    while (v2 < *(int *)(v1 + 16));
  }
  *(_DWORD *)(v1 + 16) = 0;
  *(_DWORD *)(v1 + 36) = 0;
  return this;
}

uint64_t CLMicroLocationProto::ClusterAnchorValueStatisticsVector::MergePartialFromCodedStream(CLMicroLocationProto::ClusterAnchorValueStatisticsVector *this, wireless_diagnostics::google::protobuf::io::CodedInputStream *a2)
{
  wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *v4;
  uint64_t v5;
  char *v6;
  uint64_t TagFallback;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  int v15;
  int v16;
  int v17;
  BOOL v18;
  int v19;
  _BYTE *v20;
  _BYTE *v21;
  uint64_t result;
  unsigned int v23;

  v4 = (CLMicroLocationProto::ClusterAnchorValueStatisticsVector *)((char *)this + 8);
  v5 = MEMORY[0x24BEDD958];
  while (1)
  {
LABEL_2:
    v6 = (char *)*((_QWORD *)a2 + 1);
    if ((unint64_t)v6 >= *((_QWORD *)a2 + 2) || *v6 < 0)
    {
      TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(a2);
      *((_DWORD *)a2 + 8) = TagFallback;
    }
    else
    {
      TagFallback = *v6;
      *((_DWORD *)a2 + 8) = TagFallback;
      *((_QWORD *)a2 + 1) = v6 + 1;
    }
    if ((_DWORD)TagFallback == 10)
    {
      while (1)
      {
        v8 = *((_DWORD *)this + 5);
        v9 = *((int *)this + 4);
        if ((int)v9 >= v8)
        {
          if (v8 == *((_DWORD *)this + 6))
          {
            wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve(v4);
            v8 = *((_DWORD *)this + 5);
          }
          *((_DWORD *)this + 5) = v8 + 1;
          v11 = operator new();
          *(_QWORD *)(v11 + 8) = 0;
          *(_QWORD *)(v11 + 16) = 0;
          *(_QWORD *)v11 = &off_2511D7028;
          *(_DWORD *)(v11 + 24) = 0;
          *(_QWORD *)(v11 + 32) = v5;
          *(_QWORD *)(v11 + 40) = 0;
          v12 = *((_QWORD *)this + 1);
          v13 = *((int *)this + 4);
          *((_DWORD *)this + 4) = v13 + 1;
          *(_QWORD *)(v12 + 8 * v13) = v11;
        }
        else
        {
          v10 = *((_QWORD *)this + 1);
          *((_DWORD *)this + 4) = v9 + 1;
          v11 = *(_QWORD *)(v10 + 8 * v9);
        }
        v23 = 0;
        v14 = (char *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v14 >= *((_QWORD *)a2 + 2) || *v14 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v23))return 0;
        }
        else
        {
          v23 = *v14;
          *((_QWORD *)a2 + 1) = v14 + 1;
        }
        v15 = *((_DWORD *)a2 + 14);
        v16 = *((_DWORD *)a2 + 15);
        *((_DWORD *)a2 + 14) = v15 + 1;
        if (v15 >= v16)
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(a2);
        if (!CLMicroLocationProto::ClusterAnchorValueStatistics::MergePartialFromCodedStream((CLMicroLocationProto::ClusterAnchorValueStatistics *)v11, a2)|| !*((_BYTE *)a2 + 36))
        {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(a2);
        v17 = *((_DWORD *)a2 + 14);
        v18 = __OFSUB__(v17, 1);
        v19 = v17 - 1;
        if (v19 < 0 == v18)
          *((_DWORD *)a2 + 14) = v19;
        v20 = (_BYTE *)*((_QWORD *)a2 + 1);
        v21 = (_BYTE *)*((_QWORD *)a2 + 2);
        if (v20 >= v21 || *v20 != 10)
        {
          if (v20 == v21 && (*((_DWORD *)a2 + 11) || *((_DWORD *)a2 + 6) == *((_DWORD *)a2 + 10)))
          {
            *((_DWORD *)a2 + 8) = 0;
            result = 1;
            *((_BYTE *)a2 + 36) = 1;
            return result;
          }
          goto LABEL_2;
        }
        *((_QWORD *)a2 + 1) = v20 + 1;
      }
    }
    if (!(_DWORD)TagFallback || (TagFallback & 7) == 4)
      return 1;
    if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(a2, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback) & 1) == 0)return 0;
  }
}

uint64_t CLMicroLocationProto::ClusterAnchorValueStatisticsVector::SerializeWithCachedSizes(uint64_t this, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  uint64_t v6;

  if (*(int *)(this + 16) >= 1)
  {
    v5 = this;
    v6 = 0;
    do
      this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(_QWORD *)(*(_QWORD *)(v5 + 8) + 8 * v6++), a2, a4);
    while (v6 < *(int *)(v5 + 16));
  }
  return this;
}

uint64_t CLMicroLocationProto::ClusterAnchorValueStatisticsVector::ByteSize(CLMicroLocationProto::ClusterAnchorValueStatisticsVector *this)
{
  uint64_t v2;
  uint64_t v3;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v4;
  int v5;
  int v6;

  v2 = *((unsigned int *)this + 4);
  if ((int)v2 >= 1)
  {
    v3 = 0;
    do
    {
      v4 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)CLMicroLocationProto::ClusterAnchorValueStatistics::ByteSize(*(CLMicroLocationProto::ClusterAnchorValueStatistics **)(*((_QWORD *)this + 1) + 8 * v3));
      v5 = (int)v4;
      if (v4 >= 0x80)
        v6 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v4);
      else
        v6 = 1;
      v2 = (v5 + v2 + v6);
      ++v3;
    }
    while (v3 < *((int *)this + 4));
  }
  *((_DWORD *)this + 8) = v2;
  return v2;
}

void CLMicroLocationProto::ClusterAnchorValueStatisticsVector::CheckTypeAndMergeFrom(CLMicroLocationProto::ClusterAnchorValueStatisticsVector *this, const wireless_diagnostics::google::protobuf::MessageLite *lpsrc)
{
  uint64_t v4;
  uint64_t v5;

  CLMicroLocationProto::ClusterAnchorValueStatisticsVector::MergeFrom(this, lpsrc);
}

void CLMicroLocationProto::ClusterAnchorValueStatisticsVector::CopyFrom(CLMicroLocationProto::ClusterAnchorValueStatisticsVector *this, const CLMicroLocationProto::ClusterAnchorValueStatisticsVector *a2)
{
  if (a2 != this)
  {
    (*(void (**)(CLMicroLocationProto::ClusterAnchorValueStatisticsVector *))(*(_QWORD *)this + 32))(this);
    CLMicroLocationProto::ClusterAnchorValueStatisticsVector::MergeFrom(this, a2);
  }
}

uint64_t CLMicroLocationProto::ClusterAnchorValueStatisticsVector::IsInitialized(CLMicroLocationProto::ClusterAnchorValueStatisticsVector *this)
{
  return 1;
}

_QWORD *CLMicroLocationProto::ClusterAnchorValueStatisticsVector::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CLMicroLocationProto.ClusterAnchorValueStatisticsVector");
}

void CLMicroLocationProto::LocationSimilarityListElement::MergeFrom(CLMicroLocationProto::LocationSimilarityListElement *this, const CLMicroLocationProto::LocationSimilarityListElement *a2)
{
  int v4;
  const std::string *v5;
  std::string *v6;
  _BYTE v7[48];

  if (a2 == this)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v7);
  }
  v4 = *((_DWORD *)a2 + 6);
  if (v4)
  {
    wireless_diagnostics::google::protobuf::RepeatedField<double>::Reserve((_DWORD *)this + 4, *((_DWORD *)this + 6) + v4);
    memcpy((void *)(*((_QWORD *)this + 2) + 8 * *((int *)this + 6)), *((const void **)a2 + 2), 8 * *((int *)a2 + 6));
    *((_DWORD *)this + 6) += *((_DWORD *)a2 + 6);
  }
  if ((*((_BYTE *)a2 + 36) & 1) != 0)
  {
    v5 = (const std::string *)*((_QWORD *)a2 + 1);
    *((_DWORD *)this + 9) |= 1u;
    v6 = (std::string *)*((_QWORD *)this + 1);
    if (v6 == (std::string *)MEMORY[0x24BEDD958])
    {
      v6 = (std::string *)operator new();
      v6->__r_.__value_.__l.__size_ = 0;
      v6->__r_.__value_.__r.__words[2] = 0;
      v6->__r_.__value_.__r.__words[0] = 0;
      *((_QWORD *)this + 1) = v6;
    }
    std::string::operator=(v6, v5);
  }
}

void sub_241ABCC4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void CLMicroLocationProto::LocationSimilarityListElement::~LocationSimilarityListElement(CLMicroLocationProto::LocationSimilarityListElement *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_2511D7118;
  CLMicroLocationProto::ClusterRecordings::SharedDtor(this);
  v2 = *((_QWORD *)this + 2);
  if (v2)
    MEMORY[0x2426A04BC](v2, 0x1000C8000313F17);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

{
  CLMicroLocationProto::LocationSimilarityListElement::~LocationSimilarityListElement(this);
  JUMPOUT(0x2426A04D4);
}

_QWORD *CLMicroLocationProto::LocationSimilarityListElement::New(CLMicroLocationProto::LocationSimilarityListElement *this)
{
  _QWORD *result;
  uint64_t v2;

  result = (_QWORD *)operator new();
  result[3] = 0;
  result[4] = 0;
  result[2] = 0;
  v2 = MEMORY[0x24BEDD958];
  *result = &off_2511D7118;
  result[1] = v2;
  return result;
}

uint64_t CLMicroLocationProto::LocationSimilarityListElement::Clear(uint64_t this)
{
  uint64_t v1;

  if ((*(_BYTE *)(this + 36) & 1) != 0)
  {
    v1 = *(_QWORD *)(this + 8);
    if (v1 != MEMORY[0x24BEDD958])
    {
      if (*(char *)(v1 + 23) < 0)
      {
        **(_BYTE **)v1 = 0;
        *(_QWORD *)(v1 + 8) = 0;
      }
      else
      {
        *(_BYTE *)v1 = 0;
        *(_BYTE *)(v1 + 23) = 0;
      }
    }
  }
  *(_DWORD *)(this + 24) = 0;
  *(_DWORD *)(this + 36) = 0;
  return this;
}

uint64_t CLMicroLocationProto::LocationSimilarityListElement::MergePartialFromCodedStream(CLMicroLocationProto::LocationSimilarityListElement *this, wireless_diagnostics::google::protobuf::io::CodedInputStream *a2)
{
  _DWORD *v4;
  char *v5;
  uint64_t TagFallback;
  int v7;
  uint64_t result;
  _QWORD *v9;
  _BYTE *v10;
  unint64_t v11;
  int v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  int v16;
  signed int v17;
  int v18;
  int v19;
  uint64_t v20;
  _BYTE *v21;
  unint64_t v22[6];

  v4 = (_DWORD *)((char *)this + 16);
  while (1)
  {
    while (1)
    {
      v5 = (char *)*((_QWORD *)a2 + 1);
      if ((unint64_t)v5 >= *((_QWORD *)a2 + 2) || *v5 < 0)
      {
        TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(a2);
        *((_DWORD *)a2 + 8) = TagFallback;
        if (!(_DWORD)TagFallback)
          return 1;
      }
      else
      {
        TagFallback = *v5;
        *((_DWORD *)a2 + 8) = TagFallback;
        *((_QWORD *)a2 + 1) = v5 + 1;
        if (!(_DWORD)TagFallback)
          return 1;
      }
      if (TagFallback >> 3 != 1)
        break;
      v7 = TagFallback & 7;
      if (v7 != 2)
        goto LABEL_21;
      *((_DWORD *)this + 9) |= 1u;
      if (*((_QWORD *)this + 1) == MEMORY[0x24BEDD958])
      {
        v9 = (_QWORD *)operator new();
        v9[1] = 0;
        v9[2] = 0;
        *v9 = 0;
        *((_QWORD *)this + 1) = v9;
      }
      result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadBytes();
      if (!(_DWORD)result)
        return result;
      v10 = (_BYTE *)*((_QWORD *)a2 + 1);
      if ((unint64_t)v10 < *((_QWORD *)a2 + 2) && *v10 == 17)
      {
        do
        {
          *((_QWORD *)a2 + 1) = v10 + 1;
LABEL_25:
          v22[0] = 0;
          if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(a2, v22) & 1) == 0)
            return 0;
          v11 = v22[0];
          v12 = *((_DWORD *)this + 6);
          if (v12 == *((_DWORD *)this + 7))
          {
            wireless_diagnostics::google::protobuf::RepeatedField<double>::Reserve(v4, v12 + 1);
            v12 = *((_DWORD *)this + 6);
          }
          v13 = *((_QWORD *)this + 2);
          v14 = v12 + 1;
          *((_DWORD *)this + 6) = v12 + 1;
          *(_QWORD *)(v13 + 8 * v12) = v11;
          v15 = *((_QWORD *)a2 + 1);
          v16 = *((_DWORD *)a2 + 4) - v15;
          if (v16 >= 1)
          {
            v17 = v16 / 9u;
            v18 = v17 >= *((_DWORD *)this + 7) - v14 ? *((_DWORD *)this + 7) - v14 : v17;
            if (v18 >= 1)
            {
              v19 = 0;
              while (*(_BYTE *)v15 == 17)
              {
                v20 = *(_QWORD *)(v15 + 1);
                if (v14 >= *((_DWORD *)this + 7))
                {
                  wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
                  wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
                  wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
                  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v22);
                  v14 = *((_DWORD *)this + 6);
                  v13 = *((_QWORD *)this + 2);
                }
                *((_DWORD *)this + 6) = v14 + 1;
                *(_QWORD *)(v13 + 8 * v14) = v20;
                ++v19;
                v15 += 9;
                ++v14;
                if (v18 == v19)
                {
                  v19 = v18;
                  break;
                }
              }
              if (v19)
                wireless_diagnostics::google::protobuf::io::CodedInputStream::Skip(a2);
            }
          }
LABEL_41:
          v10 = (_BYTE *)*((_QWORD *)a2 + 1);
          v21 = (_BYTE *)*((_QWORD *)a2 + 2);
        }
        while (v10 < v21 && *v10 == 17);
        if (v10 == v21 && (*((_DWORD *)a2 + 11) || *((_DWORD *)a2 + 6) == *((_DWORD *)a2 + 10)))
        {
          *((_DWORD *)a2 + 8) = 0;
          result = 1;
          *((_BYTE *)a2 + 36) = 1;
          return result;
        }
      }
    }
    if (TagFallback >> 3 == 2)
      break;
    v7 = TagFallback & 7;
LABEL_21:
    if (v7 == 4)
      return 1;
    if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(a2, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback) & 1) == 0)return 0;
  }
  v7 = TagFallback & 7;
  if (v7 == 1)
    goto LABEL_25;
  if (v7 != 2)
    goto LABEL_21;
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<double,(wireless_diagnostics::google::protobuf::internal::WireFormatLite::FieldType)1>(a2, v4);
  if ((_DWORD)result)
    goto LABEL_41;
  return result;
}

void sub_241ABD04C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

uint64_t wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<double,(wireless_diagnostics::google::protobuf::internal::WireFormatLite::FieldType)1>(wireless_diagnostics::google::protobuf::io::CodedInputStream *this, _DWORD *a2)
{
  char *v4;
  uint64_t result;
  unint64_t v6;
  int v7;
  uint64_t v8;
  unsigned int v9;
  unint64_t v10;

  v9 = 0;
  v4 = (char *)*((_QWORD *)this + 1);
  if ((unint64_t)v4 >= *((_QWORD *)this + 2) || *v4 < 0)
  {
    result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v9);
    if (!(_DWORD)result)
      return result;
  }
  else
  {
    v9 = *v4;
    *((_QWORD *)this + 1) = v4 + 1;
  }
  wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this);
  if ((int)wireless_diagnostics::google::protobuf::io::CodedInputStream::BytesUntilLimit(this) < 1)
  {
LABEL_10:
    wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this);
    return 1;
  }
  else
  {
    while (1)
    {
      v10 = 0;
      result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, &v10);
      if (!(_DWORD)result)
        break;
      v6 = v10;
      v7 = a2[2];
      if (v7 == a2[3])
      {
        wireless_diagnostics::google::protobuf::RepeatedField<double>::Reserve(a2, v7 + 1);
        v7 = a2[2];
      }
      v8 = *(_QWORD *)a2;
      a2[2] = v7 + 1;
      *(_QWORD *)(v8 + 8 * v7) = v6;
      if ((int)wireless_diagnostics::google::protobuf::io::CodedInputStream::BytesUntilLimit(this) <= 0)
        goto LABEL_10;
    }
  }
  return result;
}

uint64_t CLMicroLocationProto::LocationSimilarityListElement::SerializeWithCachedSizes(uint64_t this, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a2, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a3)
{
  uint64_t v4;
  uint64_t v5;

  v4 = this;
  if ((*(_BYTE *)(this + 36) & 1) != 0)
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBytes();
  if (*(int *)(v4 + 24) >= 1)
  {
    v5 = 0;
    do
      this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, (uint64_t)a2, *(double *)(*(_QWORD *)(v4 + 16) + 8 * v5++), a3);
    while (v5 < *(int *)(v4 + 24));
  }
  return this;
}

uint64_t CLMicroLocationProto::LocationSimilarityListElement::ByteSize(CLMicroLocationProto::LocationSimilarityListElement *this)
{
  int v2;
  uint64_t v3;
  int v4;
  char v5;
  uint64_t v6;
  unint64_t v7;
  int v8;
  int v9;
  uint64_t result;

  if ((*((_BYTE *)this + 36) & 1) != 0)
  {
    v3 = *((_QWORD *)this + 1);
    v4 = *(unsigned __int8 *)(v3 + 23);
    v5 = v4;
    v6 = *(_QWORD *)(v3 + 8);
    if ((v4 & 0x80u) == 0)
      v7 = *(unsigned __int8 *)(v3 + 23);
    else
      v7 = v6;
    if (v7 >= 0x80)
    {
      v9 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v7);
      v4 = *(unsigned __int8 *)(v3 + 23);
      v6 = *(_QWORD *)(v3 + 8);
      v8 = v9 + 1;
      v5 = *(_BYTE *)(v3 + 23);
    }
    else
    {
      v8 = 2;
    }
    if (v5 < 0)
      v4 = v6;
    v2 = v8 + v4;
  }
  else
  {
    v2 = 0;
  }
  result = (9 * *((_DWORD *)this + 6) + v2);
  *((_DWORD *)this + 8) = result;
  return result;
}

void CLMicroLocationProto::LocationSimilarityListElement::CheckTypeAndMergeFrom(CLMicroLocationProto::LocationSimilarityListElement *this, const wireless_diagnostics::google::protobuf::MessageLite *lpsrc)
{
  uint64_t v4;
  uint64_t v5;

  CLMicroLocationProto::LocationSimilarityListElement::MergeFrom(this, lpsrc);
}

uint64_t CLMicroLocationProto::LocationSimilarityListElement::IsInitialized(CLMicroLocationProto::LocationSimilarityListElement *this)
{
  return 1;
}

_QWORD *CLMicroLocationProto::LocationSimilarityListElement::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CLMicroLocationProto.LocationSimilarityListElement");
}

void CLMicroLocationProto::LocationSimilarityListData::MergeFrom(CLMicroLocationProto::LocationSimilarityListData *this, const CLMicroLocationProto::LocationSimilarityListData *a2)
{
  wireless_diagnostics::google::protobuf::internal::StringTypeHandlerBase *v4;
  uint64_t v5;
  const std::string *v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  std::string *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  const CLMicroLocationProto::LocationSimilarityListElement *v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  CLMicroLocationProto::LocationSimilarityListElement *v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  _BYTE v23[48];

  if (a2 == this)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v23);
  }
  v4 = (wireless_diagnostics::google::protobuf::internal::StringTypeHandlerBase *)wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((CLMicroLocationProto::LocationSimilarityListData *)((char *)this + 8));
  if (*((int *)a2 + 4) >= 1)
  {
    v5 = 0;
    do
    {
      v6 = *(const std::string **)(*((_QWORD *)a2 + 1) + 8 * v5);
      v7 = *((_DWORD *)this + 5);
      v8 = *((int *)this + 4);
      if ((int)v8 >= v7)
      {
        if (v7 == *((_DWORD *)this + 6))
        {
          v4 = (wireless_diagnostics::google::protobuf::internal::StringTypeHandlerBase *)wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((CLMicroLocationProto::LocationSimilarityListData *)((char *)this + 8));
          v7 = *((_DWORD *)this + 5);
        }
        *((_DWORD *)this + 5) = v7 + 1;
        v10 = (std::string *)wireless_diagnostics::google::protobuf::internal::StringTypeHandlerBase::New(v4);
        v11 = *((_QWORD *)this + 1);
        v12 = *((int *)this + 4);
        *((_DWORD *)this + 4) = v12 + 1;
        *(_QWORD *)(v11 + 8 * v12) = v10;
      }
      else
      {
        v9 = *((_QWORD *)this + 1);
        *((_DWORD *)this + 4) = v8 + 1;
        v10 = *(std::string **)(v9 + 8 * v8);
      }
      v4 = (wireless_diagnostics::google::protobuf::internal::StringTypeHandlerBase *)std::string::operator=(v10, v6);
      ++v5;
    }
    while (v5 < *((int *)a2 + 4));
  }
  wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((CLMicroLocationProto::LocationSimilarityListData *)((char *)this + 32));
  if (*((int *)a2 + 10) >= 1)
  {
    v13 = 0;
    v14 = MEMORY[0x24BEDD958];
    do
    {
      v15 = *(const CLMicroLocationProto::LocationSimilarityListElement **)(*((_QWORD *)a2 + 4) + 8 * v13);
      v16 = *((_DWORD *)this + 11);
      v17 = *((int *)this + 10);
      if ((int)v17 >= v16)
      {
        if (v16 == *((_DWORD *)this + 12))
        {
          wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((CLMicroLocationProto::LocationSimilarityListData *)((char *)this + 32));
          v16 = *((_DWORD *)this + 11);
        }
        *((_DWORD *)this + 11) = v16 + 1;
        v19 = (CLMicroLocationProto::LocationSimilarityListElement *)operator new();
        *((_QWORD *)v19 + 3) = 0;
        *((_QWORD *)v19 + 4) = 0;
        *((_QWORD *)v19 + 1) = v14;
        *((_QWORD *)v19 + 2) = 0;
        *(_QWORD *)v19 = &off_2511D7118;
        v20 = *((_QWORD *)this + 4);
        v21 = *((int *)this + 10);
        *((_DWORD *)this + 10) = v21 + 1;
        *(_QWORD *)(v20 + 8 * v21) = v19;
      }
      else
      {
        v18 = *((_QWORD *)this + 4);
        *((_DWORD *)this + 10) = v17 + 1;
        v19 = *(CLMicroLocationProto::LocationSimilarityListElement **)(v18 + 8 * v17);
      }
      CLMicroLocationProto::LocationSimilarityListElement::MergeFrom(v19, v15);
      ++v13;
    }
    while (v13 < *((int *)a2 + 10));
  }
  v22 = *((_DWORD *)a2 + 16);
  if (v22)
  {
    wireless_diagnostics::google::protobuf::RepeatedField<int>::Reserve((_DWORD *)this + 14, *((_DWORD *)this + 16) + v22);
    memcpy((void *)(*((_QWORD *)this + 7) + 4 * *((int *)this + 16)), *((const void **)a2 + 7), 4 * *((int *)a2 + 16));
    *((_DWORD *)this + 16) += *((_DWORD *)a2 + 16);
  }
}

void sub_241ABD504(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void CLMicroLocationProto::LocationSimilarityListData::~LocationSimilarityListData(CLMicroLocationProto::LocationSimilarityListData *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_2511D7190;
  CLMicroLocationProto::protobuf_AddDesc_microlocation_2eproto(this);
  v2 = *((_QWORD *)this + 7);
  if (v2)
    MEMORY[0x2426A04BC](v2, 0x1000C8052888210);
  wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Destroy<wireless_diagnostics::google::protobuf::RepeatedPtrField<CLMicroLocationProto::Measurement>::TypeHandler>((uint64_t *)this + 4);
  wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Destroy<wireless_diagnostics::google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((int *)this + 2);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

{
  CLMicroLocationProto::LocationSimilarityListData::~LocationSimilarityListData(this);
  JUMPOUT(0x2426A04D4);
}

uint64_t CLMicroLocationProto::LocationSimilarityListData::New(CLMicroLocationProto::LocationSimilarityListData *this)
{
  uint64_t result;

  result = operator new();
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)result = &off_2511D7190;
  *(_DWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)(result + 40) = 0;
  *(_DWORD *)(result + 48) = 0;
  *(_QWORD *)(result + 64) = 0;
  *(_QWORD *)(result + 72) = 0;
  *(_QWORD *)(result + 56) = 0;
  return result;
}

uint64_t CLMicroLocationProto::LocationSimilarityListData::Clear(CLMicroLocationProto::LocationSimilarityListData *this)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;

  result = wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Clear<wireless_diagnostics::google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((uint64_t)this + 8);
  if (*((int *)this + 10) >= 1)
  {
    v3 = 0;
    do
    {
      v4 = *(_QWORD *)(*((_QWORD *)this + 4) + 8 * v3);
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 32))(v4);
      ++v3;
    }
    while (v3 < *((int *)this + 10));
  }
  *((_DWORD *)this + 10) = 0;
  *((_DWORD *)this + 16) = 0;
  *((_DWORD *)this + 19) = 0;
  return result;
}

uint64_t CLMicroLocationProto::LocationSimilarityListData::MergePartialFromCodedStream(uint64_t this, wireless_diagnostics::google::protobuf::io::CodedInputStream *a2)
{
  uint64_t v3;
  _DWORD *v4;
  wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *v5;
  wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *v6;
  uint64_t v7;
  char *v8;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *v9;
  unsigned int v10;
  int v11;
  char *v12;
  char *v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  CLMicroLocationProto::LocationSimilarityListElement *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  int v28;
  int v29;
  int v30;
  BOOL v31;
  int v32;
  int v33;
  unsigned int v34;
  int v36;
  uint64_t v37;
  unsigned int v38;
  unsigned int v39;

  v3 = this;
  v4 = (_DWORD *)(this + 56);
  v5 = (wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(this + 8);
  v6 = (wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(this + 32);
  v7 = MEMORY[0x24BEDD958];
  while (1)
  {
    while (1)
    {
      while (1)
      {
LABEL_2:
        v8 = (char *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v8 >= *((_QWORD *)a2 + 2) || *v8 < 0)
        {
          this = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(a2);
          v9 = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)this;
          *((_DWORD *)a2 + 8) = this;
          if (!(_DWORD)this)
            return 1;
        }
        else
        {
          v9 = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v8;
          *((_DWORD *)a2 + 8) = (_DWORD)v9;
          *((_QWORD *)a2 + 1) = v8 + 1;
          if (!(_DWORD)v9)
            return 1;
        }
        v10 = v9 >> 3;
        if (v9 >> 3 != 1)
          break;
        v11 = v9 & 7;
        if (v11 != 2)
          goto LABEL_26;
        while (1)
        {
          v14 = *(_DWORD *)(v3 + 20);
          v15 = *(_DWORD *)(v3 + 16);
          if (v15 >= v14)
          {
            if (v14 == *(_DWORD *)(v3 + 24))
            {
              this = wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve(v5);
              v14 = *(_DWORD *)(v3 + 20);
            }
            *(_DWORD *)(v3 + 20) = v14 + 1;
            v16 = wireless_diagnostics::google::protobuf::internal::StringTypeHandlerBase::New((wireless_diagnostics::google::protobuf::internal::StringTypeHandlerBase *)this);
            v17 = *(_QWORD *)(v3 + 8);
            v18 = *(int *)(v3 + 16);
            *(_DWORD *)(v3 + 16) = v18 + 1;
            *(_QWORD *)(v17 + 8 * v18) = v16;
          }
          else
          {
            *(_DWORD *)(v3 + 16) = v15 + 1;
          }
          this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadBytes();
          if (!(_DWORD)this)
            return this;
          v19 = (char *)*((_QWORD *)a2 + 1);
          if ((unint64_t)v19 >= *((_QWORD *)a2 + 2))
            break;
          v20 = *v19;
          if (v20 != 10)
          {
            if (v20 != 18)
              goto LABEL_2;
            goto LABEL_32;
          }
          *((_QWORD *)a2 + 1) = v19 + 1;
        }
      }
      if (v10 != 2)
        break;
      v11 = v9 & 7;
      if (v11 != 2)
        goto LABEL_26;
      while (1)
      {
        v21 = *(_DWORD *)(v3 + 44);
        v22 = *(int *)(v3 + 40);
        if ((int)v22 >= v21)
        {
          if (v21 == *(_DWORD *)(v3 + 48))
          {
            wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve(v6);
            v21 = *(_DWORD *)(v3 + 44);
          }
          *(_DWORD *)(v3 + 44) = v21 + 1;
          v24 = (CLMicroLocationProto::LocationSimilarityListElement *)operator new();
          *((_QWORD *)v24 + 3) = 0;
          *((_QWORD *)v24 + 4) = 0;
          *((_QWORD *)v24 + 1) = v7;
          *((_QWORD *)v24 + 2) = 0;
          *(_QWORD *)v24 = &off_2511D7118;
          v25 = *(_QWORD *)(v3 + 32);
          v26 = *(int *)(v3 + 40);
          *(_DWORD *)(v3 + 40) = v26 + 1;
          *(_QWORD *)(v25 + 8 * v26) = v24;
        }
        else
        {
          v23 = *(_QWORD *)(v3 + 32);
          *(_DWORD *)(v3 + 40) = v22 + 1;
          v24 = *(CLMicroLocationProto::LocationSimilarityListElement **)(v23 + 8 * v22);
        }
        v39 = 0;
        v27 = (char *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v27 >= *((_QWORD *)a2 + 2) || *v27 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v39))return 0;
        }
        else
        {
          v39 = *v27;
          *((_QWORD *)a2 + 1) = v27 + 1;
        }
        v28 = *((_DWORD *)a2 + 14);
        v29 = *((_DWORD *)a2 + 15);
        *((_DWORD *)a2 + 14) = v28 + 1;
        if (v28 >= v29)
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(a2);
        if (!CLMicroLocationProto::LocationSimilarityListElement::MergePartialFromCodedStream(v24, a2)
          || !*((_BYTE *)a2 + 36))
        {
          return 0;
        }
        this = wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(a2);
        v30 = *((_DWORD *)a2 + 14);
        v31 = __OFSUB__(v30, 1);
        v32 = v30 - 1;
        if (v32 < 0 == v31)
          *((_DWORD *)a2 + 14) = v32;
        v19 = (char *)*((_QWORD *)a2 + 1);
        v12 = (char *)*((_QWORD *)a2 + 2);
        if (v19 >= v12)
          break;
        v33 = *v19;
        if (v33 != 18)
        {
          if (v33 == 24)
          {
            do
            {
              v13 = v19 + 1;
              *((_QWORD *)a2 + 1) = v13;
LABEL_51:
              v38 = 0;
              if (v13 >= v12 || *v13 < 0)
              {
                this = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v38);
                if (!(_DWORD)this)
                  return this;
                v34 = v38;
              }
              else
              {
                v34 = *v13;
                *((_QWORD *)a2 + 1) = v13 + 1;
              }
              if (v34 < 4 || v34 == 15)
              {
                v36 = *(_DWORD *)(v3 + 64);
                if (v36 == *(_DWORD *)(v3 + 68))
                {
                  this = (uint64_t)wireless_diagnostics::google::protobuf::RepeatedField<int>::Reserve(v4, v36 + 1);
                  v36 = *(_DWORD *)(v3 + 64);
                }
                v37 = *(_QWORD *)(v3 + 56);
                *(_DWORD *)(v3 + 64) = v36 + 1;
                *(_DWORD *)(v37 + 4 * v36) = v34;
              }
LABEL_64:
              v19 = (char *)*((_QWORD *)a2 + 1);
              v12 = (char *)*((_QWORD *)a2 + 2);
            }
            while (v19 < v12 && *v19 == 24);
            if (v19 == v12 && (*((_DWORD *)a2 + 11) || *((_DWORD *)a2 + 6) == *((_DWORD *)a2 + 10)))
            {
              *((_DWORD *)a2 + 8) = 0;
              this = 1;
              *((_BYTE *)a2 + 36) = 1;
              return this;
            }
          }
          goto LABEL_2;
        }
LABEL_32:
        *((_QWORD *)a2 + 1) = v19 + 1;
      }
    }
    if (v10 != 3)
    {
      v11 = v9 & 7;
      goto LABEL_26;
    }
    v11 = v9 & 7;
    if (v11 == 2)
      break;
    if ((v9 & 7) == 0)
    {
      v13 = (char *)*((_QWORD *)a2 + 1);
      v12 = (char *)*((_QWORD *)a2 + 2);
      goto LABEL_51;
    }
LABEL_26:
    if (v11 == 4)
      return 1;
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(a2, v9);
    if ((this & 1) == 0)
      return 0;
  }
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadPackedEnumNoInline();
  if ((_DWORD)this)
    goto LABEL_64;
  return this;
}

uint64_t CLMicroLocationProto::LocationSimilarityListData::SerializeWithCachedSizes(uint64_t this, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v5 = this;
  if (*(int *)(this + 16) >= 1)
  {
    v6 = 0;
    do
    {
      this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBytes();
      ++v6;
    }
    while (v6 < *(int *)(v5 + 16));
  }
  if (*(int *)(v5 + 40) >= 1)
  {
    v7 = 0;
    do
      this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, *(_QWORD *)(*(_QWORD *)(v5 + 32) + 8 * v7++), a2, a4);
    while (v7 < *(int *)(v5 + 40));
  }
  if (*(int *)(v5 + 64) >= 1)
  {
    v8 = 0;
    do
      this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, *(unsigned int *)(*(_QWORD *)(v5 + 56) + 4 * v8++), (uint64_t)a2, a4);
    while (v8 < *(int *)(v5 + 64));
  }
  return this;
}

uint64_t CLMicroLocationProto::LocationSimilarityListData::ByteSize(CLMicroLocationProto::LocationSimilarityListData *this)
{
  int v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  int v6;
  char v7;
  uint64_t v8;
  unint64_t v9;
  int v10;
  int v11;
  int v12;
  uint64_t v13;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v14;
  int v15;
  int v16;
  int v17;
  uint64_t v18;
  int v19;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v20;
  int v21;
  uint64_t result;

  v2 = *((_DWORD *)this + 4);
  if (v2 < 1)
  {
    v4 = *((_DWORD *)this + 4);
  }
  else
  {
    v3 = 0;
    v4 = *((_DWORD *)this + 4);
    do
    {
      v5 = *(_QWORD *)(*((_QWORD *)this + 1) + 8 * v3);
      v6 = *(unsigned __int8 *)(v5 + 23);
      v7 = v6;
      v8 = *(_QWORD *)(v5 + 8);
      if ((v6 & 0x80u) == 0)
        v9 = *(unsigned __int8 *)(v5 + 23);
      else
        v9 = v8;
      if (v9 >= 0x80)
      {
        v10 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v9);
        v6 = *(unsigned __int8 *)(v5 + 23);
        v8 = *(_QWORD *)(v5 + 8);
        v2 = *((_DWORD *)this + 4);
        v7 = *(_BYTE *)(v5 + 23);
      }
      else
      {
        v10 = 1;
      }
      if (v7 < 0)
        v6 = v8;
      v4 += v10 + v6;
      ++v3;
    }
    while (v3 < v2);
  }
  v11 = *((_DWORD *)this + 10);
  v12 = v11 + v4;
  if (v11 >= 1)
  {
    v13 = 0;
    do
    {
      v14 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)CLMicroLocationProto::LocationSimilarityListElement::ByteSize(*(CLMicroLocationProto::LocationSimilarityListElement **)(*((_QWORD *)this + 4) + 8 * v13));
      v15 = (int)v14;
      if (v14 >= 0x80)
        v16 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v14);
      else
        v16 = 1;
      v12 += v15 + v16;
      ++v13;
    }
    while (v13 < *((int *)this + 10));
  }
  v17 = *((_DWORD *)this + 16);
  if (v17 < 1)
  {
    v19 = 0;
  }
  else
  {
    v18 = 0;
    v19 = 0;
    do
    {
      v20 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(*((_QWORD *)this + 7)
                                                                                             + 4 * v18);
      if ((v20 & 0x80000000) != 0)
      {
        v21 = 10;
      }
      else if (v20 >= 0x80)
      {
        v21 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v20);
        v17 = *((_DWORD *)this + 16);
      }
      else
      {
        v21 = 1;
      }
      v19 += v21;
      ++v18;
    }
    while (v18 < v17);
  }
  result = (v19 + v12 + v17);
  *((_DWORD *)this + 18) = result;
  return result;
}

void CLMicroLocationProto::LocationSimilarityListData::CheckTypeAndMergeFrom(CLMicroLocationProto::LocationSimilarityListData *this, const wireless_diagnostics::google::protobuf::MessageLite *lpsrc)
{
  uint64_t v4;
  uint64_t v5;

  CLMicroLocationProto::LocationSimilarityListData::MergeFrom(this, lpsrc);
}

void CLMicroLocationProto::LocationSimilarityListData::CopyFrom(CLMicroLocationProto::LocationSimilarityListData *this, const CLMicroLocationProto::LocationSimilarityListData *a2)
{
  if (a2 != this)
  {
    (*(void (**)(CLMicroLocationProto::LocationSimilarityListData *))(*(_QWORD *)this + 32))(this);
    CLMicroLocationProto::LocationSimilarityListData::MergeFrom(this, a2);
  }
}

uint64_t CLMicroLocationProto::LocationSimilarityListData::IsInitialized(CLMicroLocationProto::LocationSimilarityListData *this)
{
  return 1;
}

_QWORD *CLMicroLocationProto::LocationSimilarityListData::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CLMicroLocationProto.LocationSimilarityListData");
}

float CLMicroLocationProto::BlueAtlasData::MergeFrom(CLMicroLocationProto::BlueAtlasData *this, const CLMicroLocationProto::BlueAtlasData *a2)
{
  uint64_t v4;
  float result;
  uint64_t v6;
  const std::string *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  std::string *v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  CLMicroLocationProto::AssociatedAccessPointInfo *v15;
  const CLMicroLocationProto::AssociatedAccessPointInfo *v16;
  _BYTE v17[48];

  if (a2 == this)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v17);
  }
  v4 = wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((CLMicroLocationProto::BlueAtlasData *)((char *)this + 8));
  if (*((int *)a2 + 4) >= 1)
  {
    v6 = 0;
    do
    {
      v7 = *(const std::string **)(*((_QWORD *)a2 + 1) + 8 * v6);
      v8 = *((_DWORD *)this + 5);
      v9 = *((int *)this + 4);
      if ((int)v9 >= v8)
      {
        if (v8 == *((_DWORD *)this + 6))
        {
          v4 = wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((CLMicroLocationProto::BlueAtlasData *)((char *)this + 8));
          v8 = *((_DWORD *)this + 5);
        }
        *((_DWORD *)this + 5) = v8 + 1;
        v11 = (std::string *)wireless_diagnostics::google::protobuf::internal::StringTypeHandlerBase::New((wireless_diagnostics::google::protobuf::internal::StringTypeHandlerBase *)v4);
        v12 = *((_QWORD *)this + 1);
        v13 = *((int *)this + 4);
        *((_DWORD *)this + 4) = v13 + 1;
        *(_QWORD *)(v12 + 8 * v13) = v11;
      }
      else
      {
        v10 = *((_QWORD *)this + 1);
        *((_DWORD *)this + 4) = v9 + 1;
        v11 = *(std::string **)(v10 + 8 * v9);
      }
      v4 = (uint64_t)std::string::operator=(v11, v7);
      ++v6;
    }
    while (v6 < *((int *)a2 + 4));
  }
  v14 = *((_DWORD *)a2 + 10);
  if (v14)
  {
    wireless_diagnostics::google::protobuf::RepeatedField<double>::Reserve((_DWORD *)this + 8, *((_DWORD *)this + 10) + v14);
    v4 = (uint64_t)memcpy((void *)(*((_QWORD *)this + 4) + 8 * *((int *)this + 10)), *((const void **)a2 + 4), 8 * *((int *)a2 + 10));
    *((_DWORD *)this + 10) += *((_DWORD *)a2 + 10);
  }
  if ((*((_BYTE *)a2 + 60) & 4) != 0)
  {
    *((_DWORD *)this + 15) |= 4u;
    v15 = (CLMicroLocationProto::AssociatedAccessPointInfo *)*((_QWORD *)this + 6);
    if (!v15)
    {
      v4 = operator new();
      v15 = (CLMicroLocationProto::AssociatedAccessPointInfo *)v4;
      *(_QWORD *)(v4 + 8) = 0;
      *(_QWORD *)(v4 + 16) = 0;
      *(_QWORD *)v4 = &off_2511D8108;
      *(_DWORD *)(v4 + 24) = 0;
      *((_QWORD *)this + 6) = v4;
    }
    v16 = (const CLMicroLocationProto::AssociatedAccessPointInfo *)*((_QWORD *)a2 + 6);
    if (!v16)
    {
      CLMicroLocationProto::protobuf_AddDesc_microlocation_2eproto((CLMicroLocationProto *)v4);
      v16 = *(const CLMicroLocationProto::AssociatedAccessPointInfo **)(CLMicroLocationProto::BlueAtlasData::default_instance_
                                                                      + 48);
    }
    return CLMicroLocationProto::AssociatedAccessPointInfo::MergeFrom(v15, v16);
  }
  return result;
}

void sub_241ABDECC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void CLMicroLocationProto::BlueAtlasData::~BlueAtlasData(CLMicroLocationProto::BlueAtlasData *this)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)this = &off_2511D7208;
  CLMicroLocationProto::protobuf_AddDesc_microlocation_2eproto(this);
  if ((CLMicroLocationProto::BlueAtlasData *)CLMicroLocationProto::BlueAtlasData::default_instance_ != this)
  {
    v2 = *((_QWORD *)this + 6);
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  }
  v3 = *((_QWORD *)this + 4);
  if (v3)
    MEMORY[0x2426A04BC](v3, 0x1000C8000313F17);
  wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Destroy<wireless_diagnostics::google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((int *)this + 2);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

{
  CLMicroLocationProto::BlueAtlasData::~BlueAtlasData(this);
  JUMPOUT(0x2426A04D4);
}

uint64_t CLMicroLocationProto::BlueAtlasData::default_instance(CLMicroLocationProto::BlueAtlasData *this)
{
  CLMicroLocationProto::protobuf_AddDesc_microlocation_2eproto(this);
  return CLMicroLocationProto::BlueAtlasData::default_instance_;
}

double CLMicroLocationProto::BlueAtlasData::New(CLMicroLocationProto::BlueAtlasData *this)
{
  uint64_t v1;
  double result;

  v1 = operator new();
  *(_QWORD *)(v1 + 8) = 0;
  *(_QWORD *)(v1 + 16) = 0;
  *(_QWORD *)v1 = &off_2511D7208;
  *(_DWORD *)(v1 + 24) = 0;
  result = 0.0;
  *(_OWORD *)(v1 + 32) = 0u;
  *(_OWORD *)(v1 + 48) = 0u;
  return result;
}

uint64_t CLMicroLocationProto::BlueAtlasData::Clear(CLMicroLocationProto::BlueAtlasData *this)
{
  uint64_t v2;
  uint64_t result;

  if ((*((_BYTE *)this + 60) & 4) != 0)
  {
    v2 = *((_QWORD *)this + 6);
    if (v2)
    {
      if (*(_BYTE *)(v2 + 24))
      {
        *(_QWORD *)(v2 + 8) = 0;
        *(_DWORD *)(v2 + 16) = 0;
      }
      *(_DWORD *)(v2 + 24) = 0;
    }
  }
  result = wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Clear<wireless_diagnostics::google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((uint64_t)this + 8);
  *((_DWORD *)this + 10) = 0;
  *((_DWORD *)this + 15) = 0;
  return result;
}

uint64_t CLMicroLocationProto::AssociatedAccessPointInfo::Clear(uint64_t this)
{
  if (*(_BYTE *)(this + 24))
  {
    *(_QWORD *)(this + 8) = 0;
    *(_DWORD *)(this + 16) = 0;
  }
  *(_DWORD *)(this + 24) = 0;
  return this;
}

uint64_t CLMicroLocationProto::BlueAtlasData::MergePartialFromCodedStream(uint64_t this, wireless_diagnostics::google::protobuf::io::CodedInputStream *a2)
{
  uint64_t v3;
  _DWORD *v4;
  wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *v5;
  char *v6;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *v7;
  unsigned int v8;
  int v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unsigned __int8 *v16;
  int v17;
  char *v18;
  int v19;
  int v20;
  unint64_t v21;
  uint64_t v22;
  int v23;
  int v24;
  _BYTE *v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  int v31;
  int v32;
  int v33;
  BOOL v34;
  int v35;
  unint64_t v36;
  unsigned int v37[12];

  v3 = this;
  v4 = (_DWORD *)(this + 32);
  v5 = (wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(this + 8);
  while (1)
  {
LABEL_2:
    v6 = (char *)*((_QWORD *)a2 + 1);
    if ((unint64_t)v6 >= *((_QWORD *)a2 + 2) || *v6 < 0)
    {
      this = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(a2);
      v7 = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)this;
      *((_DWORD *)a2 + 8) = this;
      if (!(_DWORD)this)
        return 1;
    }
    else
    {
      v7 = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v6;
      *((_DWORD *)a2 + 8) = (_DWORD)v7;
      *((_QWORD *)a2 + 1) = v6 + 1;
      if (!(_DWORD)v7)
        return 1;
    }
    v8 = v7 >> 3;
    if (v7 >> 3 == 1)
      break;
    if (v8 == 2)
    {
      v9 = v7 & 7;
      if (v9 == 2)
      {
        this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<unsigned long long,(wireless_diagnostics::google::protobuf::internal::WireFormatLite::FieldType)4>(a2, v4);
        if ((_DWORD)this)
          goto LABEL_51;
        return this;
      }
      if ((v7 & 7) == 0)
      {
        v18 = (char *)*((_QWORD *)a2 + 1);
        v15 = *((_QWORD *)a2 + 2);
        goto LABEL_33;
      }
LABEL_26:
      if (v9 == 4)
        return 1;
      this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(a2, v7);
      if ((this & 1) == 0)
        return 0;
    }
    else
    {
      if (v8 != 3)
      {
        v9 = v7 & 7;
        goto LABEL_26;
      }
      v9 = v7 & 7;
      if (v9 != 2)
        goto LABEL_26;
LABEL_54:
      *(_DWORD *)(v3 + 60) |= 4u;
      v29 = *(_QWORD *)(v3 + 48);
      if (!v29)
      {
        v29 = operator new();
        *(_QWORD *)(v29 + 8) = 0;
        *(_QWORD *)(v29 + 16) = 0;
        *(_QWORD *)v29 = &off_2511D8108;
        *(_DWORD *)(v29 + 24) = 0;
        *(_QWORD *)(v3 + 48) = v29;
      }
      v37[0] = 0;
      v30 = (char *)*((_QWORD *)a2 + 1);
      if ((unint64_t)v30 >= *((_QWORD *)a2 + 2) || *v30 < 0)
      {
        if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v37))
          return 0;
      }
      else
      {
        v37[0] = *v30;
        *((_QWORD *)a2 + 1) = v30 + 1;
      }
      v31 = *((_DWORD *)a2 + 14);
      v32 = *((_DWORD *)a2 + 15);
      *((_DWORD *)a2 + 14) = v31 + 1;
      if (v31 >= v32)
        return 0;
      wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(a2);
      if (!CLMicroLocationProto::AssociatedAccessPointInfo::MergePartialFromCodedStream((CLMicroLocationProto::AssociatedAccessPointInfo *)v29, a2)|| !*((_BYTE *)a2 + 36))
      {
        return 0;
      }
      this = wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(a2);
      v33 = *((_DWORD *)a2 + 14);
      v34 = __OFSUB__(v33, 1);
      v35 = v33 - 1;
      if (v35 < 0 == v34)
        *((_DWORD *)a2 + 14) = v35;
      if (*((_QWORD *)a2 + 1) == *((_QWORD *)a2 + 2)
        && (*((_DWORD *)a2 + 11) || *((_DWORD *)a2 + 6) == *((_DWORD *)a2 + 10)))
      {
        *((_DWORD *)a2 + 8) = 0;
        this = 1;
        *((_BYTE *)a2 + 36) = 1;
        return this;
      }
    }
  }
  v9 = v7 & 7;
  if (v9 != 2)
    goto LABEL_26;
  while (1)
  {
    v10 = *(_DWORD *)(v3 + 20);
    v11 = *(_DWORD *)(v3 + 16);
    if (v11 >= v10)
    {
      if (v10 == *(_DWORD *)(v3 + 24))
      {
        this = wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve(v5);
        v10 = *(_DWORD *)(v3 + 20);
      }
      *(_DWORD *)(v3 + 20) = v10 + 1;
      v12 = wireless_diagnostics::google::protobuf::internal::StringTypeHandlerBase::New((wireless_diagnostics::google::protobuf::internal::StringTypeHandlerBase *)this);
      v13 = *(_QWORD *)(v3 + 8);
      v14 = *(int *)(v3 + 16);
      *(_DWORD *)(v3 + 16) = v14 + 1;
      *(_QWORD *)(v13 + 8 * v14) = v12;
    }
    else
    {
      *(_DWORD *)(v3 + 16) = v11 + 1;
    }
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadBytes();
    if (!(_DWORD)this)
      return this;
    v16 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
    v15 = *((_QWORD *)a2 + 2);
    if ((unint64_t)v16 >= v15)
      goto LABEL_2;
    v17 = *v16;
    if (v17 != 10)
    {
      while (v17 == 16)
      {
        v18 = (char *)(v16 + 1);
        *((_QWORD *)a2 + 1) = v18;
LABEL_33:
        v36 = 0;
        if ((unint64_t)v18 >= v15 || *v18 < 0)
        {
          this = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint64Fallback(a2, &v36);
          if (!(_DWORD)this)
            return 0;
        }
        else
        {
          v36 = *v18;
          *((_QWORD *)a2 + 1) = v18 + 1;
        }
        v19 = *(_DWORD *)(v3 + 40);
        v20 = *(_DWORD *)(v3 + 44);
        if (v19 == v20)
        {
          this = (uint64_t)wireless_diagnostics::google::protobuf::RepeatedField<double>::Reserve(v4, v19 + 1);
          v19 = *(_DWORD *)(v3 + 40);
          v20 = *(_DWORD *)(v3 + 44);
        }
        v21 = v36;
        v22 = *(_QWORD *)(v3 + 32);
        v23 = v19 + 1;
        *(_DWORD *)(v3 + 40) = v19 + 1;
        *(_QWORD *)(v22 + 8 * v19) = v21;
        if (v20 - (v19 + 1) >= 1)
        {
          v24 = v20 - v19;
          do
          {
            v25 = (_BYTE *)*((_QWORD *)a2 + 1);
            v26 = *((_QWORD *)a2 + 2);
            if ((unint64_t)v25 >= v26 || *v25 != 16)
              break;
            *((_QWORD *)a2 + 1) = v25 + 1;
            if ((unint64_t)(v25 + 1) >= v26 || (char)v25[1] < 0)
            {
              this = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint64Fallback(a2, &v36);
              if (!(_DWORD)this)
                return 0;
              v23 = *(_DWORD *)(v3 + 40);
            }
            else
            {
              v36 = v25[1];
              *((_QWORD *)a2 + 1) = v25 + 2;
            }
            if (v23 >= *(_DWORD *)(v3 + 44))
            {
              wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
              wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
              wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
              wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v37);
              v23 = *(_DWORD *)(v3 + 40);
            }
            v27 = v36;
            v28 = *(_QWORD *)(v3 + 32);
            *(_DWORD *)(v3 + 40) = v23 + 1;
            *(_QWORD *)(v28 + 8 * v23) = v27;
            --v24;
            ++v23;
          }
          while (v24 > 1);
        }
LABEL_51:
        v16 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
        v15 = *((_QWORD *)a2 + 2);
        if ((unint64_t)v16 >= v15)
          break;
        v17 = *v16;
        if (v17 == 26)
        {
          *((_QWORD *)a2 + 1) = v16 + 1;
          goto LABEL_54;
        }
      }
      goto LABEL_2;
    }
    *((_QWORD *)a2 + 1) = v16 + 1;
  }
}

void sub_241ABE48C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

uint64_t wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<unsigned long long,(wireless_diagnostics::google::protobuf::internal::WireFormatLite::FieldType)4>(wireless_diagnostics::google::protobuf::io::CodedInputStream *this, _DWORD *a2)
{
  char *v4;
  uint64_t result;
  char *v6;
  int v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unsigned int v11;

  v11 = 0;
  v4 = (char *)*((_QWORD *)this + 1);
  if ((unint64_t)v4 >= *((_QWORD *)this + 2) || *v4 < 0)
  {
    result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v11);
    if (!(_DWORD)result)
      return result;
  }
  else
  {
    v11 = *v4;
    *((_QWORD *)this + 1) = v4 + 1;
  }
  wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this);
  if ((int)wireless_diagnostics::google::protobuf::io::CodedInputStream::BytesUntilLimit(this) >= 1)
  {
    do
    {
      v10 = 0;
      v6 = (char *)*((_QWORD *)this + 1);
      if ((unint64_t)v6 >= *((_QWORD *)this + 2) || *v6 < 0)
      {
        result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint64Fallback(this, &v10);
        if (!(_DWORD)result)
          return result;
      }
      else
      {
        v10 = *v6;
        *((_QWORD *)this + 1) = v6 + 1;
      }
      v7 = a2[2];
      if (v7 == a2[3])
      {
        wireless_diagnostics::google::protobuf::RepeatedField<double>::Reserve(a2, v7 + 1);
        v7 = a2[2];
      }
      v8 = v10;
      v9 = *(_QWORD *)a2;
      a2[2] = v7 + 1;
      *(_QWORD *)(v9 + 8 * v7) = v8;
    }
    while ((int)wireless_diagnostics::google::protobuf::io::CodedInputStream::BytesUntilLimit(this) > 0);
  }
  wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this);
  return 1;
}

int *CLMicroLocationProto::BlueAtlasData::SerializeWithCachedSizes(int *this, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  int *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v5 = this;
  if (this[4] >= 1)
  {
    v6 = 0;
    do
    {
      this = (int *)wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBytes();
      ++v6;
    }
    while (v6 < v5[4]);
  }
  if (v5[10] >= 1)
  {
    v7 = 0;
    do
      this = (int *)wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt64((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, *(_QWORD *)(*((_QWORD *)v5 + 4) + 8 * v7++), (uint64_t)a2, a4);
    while (v7 < v5[10]);
  }
  if ((v5[15] & 4) != 0)
  {
    v8 = *((_QWORD *)v5 + 6);
    if (!v8)
    {
      CLMicroLocationProto::protobuf_AddDesc_microlocation_2eproto((CLMicroLocationProto *)this);
      v8 = *(_QWORD *)(CLMicroLocationProto::BlueAtlasData::default_instance_ + 48);
    }
    return (int *)wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, v8, a2, a4);
  }
  return this;
}

uint64_t CLMicroLocationProto::BlueAtlasData::ByteSize(CLMicroLocationProto::BlueAtlasData *this)
{
  int v2;
  CLMicroLocationProto::AssociatedAccessPointInfo *v3;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v4;
  int v5;
  int v6;
  int v7;
  int v8;
  uint64_t i;
  uint64_t v10;
  int v11;
  char v12;
  uint64_t v13;
  unint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t result;

  if ((*((_BYTE *)this + 60) & 4) != 0)
  {
    v3 = (CLMicroLocationProto::AssociatedAccessPointInfo *)*((_QWORD *)this + 6);
    if (!v3)
    {
      CLMicroLocationProto::protobuf_AddDesc_microlocation_2eproto(0);
      v3 = *(CLMicroLocationProto::AssociatedAccessPointInfo **)(CLMicroLocationProto::BlueAtlasData::default_instance_
                                                               + 48);
    }
    v4 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)CLMicroLocationProto::AssociatedAccessPointInfo::ByteSize(v3);
    v5 = (int)v4;
    if (v4 >= 0x80)
      v6 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v4);
    else
      v6 = 1;
    v2 = v5 + v6 + 1;
  }
  else
  {
    v2 = 0;
  }
  v7 = *((_DWORD *)this + 4);
  v8 = v7 + v2;
  if (v7 >= 1)
  {
    for (i = 0; i < v7; ++i)
    {
      v10 = *(_QWORD *)(*((_QWORD *)this + 1) + 8 * i);
      v11 = *(unsigned __int8 *)(v10 + 23);
      v12 = v11;
      v13 = *(_QWORD *)(v10 + 8);
      if ((v11 & 0x80u) == 0)
        v14 = *(unsigned __int8 *)(v10 + 23);
      else
        v14 = v13;
      if (v14 >= 0x80)
      {
        v15 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v14);
        v11 = *(unsigned __int8 *)(v10 + 23);
        v13 = *(_QWORD *)(v10 + 8);
        v7 = *((_DWORD *)this + 4);
        v12 = *(_BYTE *)(v10 + 23);
      }
      else
      {
        v15 = 1;
      }
      if (v12 < 0)
        v11 = v13;
      v8 += v15 + v11;
    }
  }
  LODWORD(v16) = *((_DWORD *)this + 10);
  if ((int)v16 < 1)
  {
    v18 = 0;
  }
  else
  {
    v17 = 0;
    v18 = 0;
    do
    {
      v18 += wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize64(*(wireless_diagnostics::google::protobuf::io::CodedOutputStream **)(*((_QWORD *)this + 4) + 8 * v17++));
      v16 = *((int *)this + 10);
    }
    while (v17 < v16);
  }
  result = (v18 + v8 + v16);
  *((_DWORD *)this + 14) = result;
  return result;
}

float CLMicroLocationProto::BlueAtlasData::CheckTypeAndMergeFrom(CLMicroLocationProto::BlueAtlasData *this, const wireless_diagnostics::google::protobuf::MessageLite *lpsrc)
{
  uint64_t v4;
  uint64_t v5;

  return CLMicroLocationProto::BlueAtlasData::MergeFrom(this, lpsrc);
}

float CLMicroLocationProto::AssociatedAccessPointInfo::MergeFrom(CLMicroLocationProto::AssociatedAccessPointInfo *this, const CLMicroLocationProto::AssociatedAccessPointInfo *a2)
{
  float result;
  int v5;
  uint64_t v6;
  _BYTE v7[48];

  if (a2 == this)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v7);
  }
  LOBYTE(v5) = *((_BYTE *)a2 + 24);
  if ((_BYTE)v5)
  {
    if ((*((_BYTE *)a2 + 24) & 1) != 0)
    {
      v6 = *((_QWORD *)a2 + 1);
      *((_DWORD *)this + 6) |= 1u;
      *((_QWORD *)this + 1) = v6;
      v5 = *((_DWORD *)a2 + 6);
    }
    if ((v5 & 2) != 0)
    {
      result = *((float *)a2 + 4);
      *((_DWORD *)this + 6) |= 2u;
      *((float *)this + 4) = result;
    }
  }
  return result;
}

void sub_241ABE8A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

float CLMicroLocationProto::BlueAtlasData::CopyFrom(CLMicroLocationProto::BlueAtlasData *this, const CLMicroLocationProto::BlueAtlasData *a2)
{
  float result;

  if (a2 != this)
  {
    (*(void (**)(CLMicroLocationProto::BlueAtlasData *))(*(_QWORD *)this + 32))(this);
    return CLMicroLocationProto::BlueAtlasData::MergeFrom(this, a2);
  }
  return result;
}

uint64_t CLMicroLocationProto::BlueAtlasData::IsInitialized(CLMicroLocationProto::BlueAtlasData *this)
{
  return 1;
}

_QWORD *CLMicroLocationProto::BlueAtlasData::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CLMicroLocationProto.BlueAtlasData");
}

CLMicroLocationProto::Model *CLMicroLocationProto::Model::Model(CLMicroLocationProto::Model *this, const CLMicroLocationProto::Model *a2)
{
  *(_QWORD *)this = &off_2511D7280;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_DWORD *)this + 6) = 0;
  *((_QWORD *)this + 10) = 0;
  *((_QWORD *)this + 11) = 0;
  *((_DWORD *)this + 24) = 0;
  *((_BYTE *)this + 104) = 0;
  *((_QWORD *)this + 24) = 0;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *(_OWORD *)((char *)this + 60) = 0u;
  *(_OWORD *)((char *)this + 108) = 0u;
  *(_OWORD *)((char *)this + 124) = 0u;
  *(_OWORD *)((char *)this + 140) = 0u;
  *(_OWORD *)((char *)this + 156) = 0u;
  *((_DWORD *)this + 43) = 0;
  *((_QWORD *)this + 22) = MEMORY[0x24BEDD958];
  *((_QWORD *)this + 23) = 0;
  *((_DWORD *)this + 50) = 0;
  CLMicroLocationProto::Model::MergeFrom(this, a2);
  return this;
}

void sub_241ABE9B4(_Unwind_Exception *a1)
{
  wireless_diagnostics::google::protobuf::MessageLite *v1;
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v6;

  v6 = *((_QWORD *)v1 + 17);
  if (v6)
    MEMORY[0x2426A04BC](v6, 0x1000C8052888210);
  wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Destroy<wireless_diagnostics::google::protobuf::RepeatedPtrField<CLMicroLocationProto::Measurement>::TypeHandler>(v4);
  wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Destroy<wireless_diagnostics::google::protobuf::RepeatedPtrField<CLMicroLocationProto::Measurement>::TypeHandler>(v3);
  wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Destroy<wireless_diagnostics::google::protobuf::RepeatedPtrField<CLMicroLocationProto::Measurement>::TypeHandler>(v2);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(v1);
  _Unwind_Resume(a1);
}

float CLMicroLocationProto::Model::MergeFrom(CLMicroLocationProto::Model *this, const CLMicroLocationProto::Model *a2)
{
  uint64_t v4;
  uint64_t v5;
  const CLMicroLocationProto::ClusterRecordings *v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  int v16;
  char v17;
  int v18;
  int v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  CLMicroLocationProto::anchorAppearancesVector *v23;
  const CLMicroLocationProto::anchorAppearancesVector *v24;
  int v25;
  CLMicroLocationProto::LocationSimilarityListData *v26;
  const CLMicroLocationProto::LocationSimilarityListData *v27;
  unsigned int v28;
  unsigned int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  const std::string *v35;
  std::string *v36;
  CLMicroLocationProto::BlueAtlasData *v37;
  const CLMicroLocationProto::BlueAtlasData *v38;
  _BYTE v40[48];

  if (a2 == this)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v40);
  }
  wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<wireless_diagnostics::google::protobuf::RepeatedPtrField<CLMicroLocationProto::Fingerprint>::TypeHandler>((int *)this + 2, (uint64_t)a2 + 8);
  wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((CLMicroLocationProto::Model *)((char *)this + 56));
  if (*((int *)a2 + 16) >= 1)
  {
    v4 = 0;
    v5 = MEMORY[0x24BEDD958];
    do
    {
      v6 = *(const CLMicroLocationProto::ClusterRecordings **)(*((_QWORD *)a2 + 7) + 8 * v4);
      v7 = *((_DWORD *)this + 17);
      v8 = *((int *)this + 16);
      if ((int)v8 >= v7)
      {
        if (v7 == *((_DWORD *)this + 18))
        {
          wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((CLMicroLocationProto::Model *)((char *)this + 56));
          v7 = *((_DWORD *)this + 17);
        }
        *((_DWORD *)this + 17) = v7 + 1;
        v10 = operator new();
        *(_QWORD *)(v10 + 16) = 0;
        *(_QWORD *)(v10 + 24) = 0;
        *(_DWORD *)(v10 + 32) = 0;
        *(_QWORD *)v10 = &off_2511D6DD0;
        *(_QWORD *)(v10 + 8) = v5;
        *(_QWORD *)(v10 + 40) = 0;
        v11 = *((_QWORD *)this + 7);
        v12 = *((int *)this + 16);
        *((_DWORD *)this + 16) = v12 + 1;
        *(_QWORD *)(v11 + 8 * v12) = v10;
      }
      else
      {
        v9 = *((_QWORD *)this + 7);
        *((_DWORD *)this + 16) = v8 + 1;
        v10 = *(_QWORD *)(v9 + 8 * v8);
      }
      CLMicroLocationProto::ClusterRecordings::MergeFrom((CLMicroLocationProto::ClusterRecordings *)v10, v6);
      ++v4;
    }
    while (v4 < *((int *)a2 + 16));
  }
  wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<wireless_diagnostics::google::protobuf::RepeatedPtrField<CLMicroLocationProto::AnchorMetadata>::TypeHandler>((int *)this + 20, (uint64_t)a2 + 80);
  v15 = *((_DWORD *)a2 + 36);
  if (v15)
  {
    wireless_diagnostics::google::protobuf::RepeatedField<int>::Reserve((_DWORD *)this + 34, *((_DWORD *)this + 36) + v15);
    v13 = (uint64_t)memcpy((void *)(*((_QWORD *)this + 17) + 4 * *((int *)this + 36)), *((const void **)a2 + 17), 4 * *((int *)a2 + 36));
    *((_DWORD *)this + 36) += *((_DWORD *)a2 + 36);
  }
  v16 = *((_DWORD *)a2 + 50);
  if ((v16 & 0x1FE) == 0)
    goto LABEL_20;
  if ((v16 & 2) != 0)
  {
    v20 = *((_QWORD *)a2 + 4);
    *((_DWORD *)this + 50) |= 2u;
    *((_QWORD *)this + 4) = v20;
    v16 = *((_DWORD *)a2 + 50);
    if ((v16 & 4) == 0)
    {
LABEL_16:
      if ((v16 & 8) == 0)
        goto LABEL_17;
LABEL_41:
      v21 = *((_DWORD *)a2 + 12);
      if (v21 >= 6)
        CLMicroLocationProto::Model::MergeFrom();
      *((_DWORD *)this + 50) |= 8u;
      *((_DWORD *)this + 12) = v21;
      v16 = *((_DWORD *)a2 + 50);
      if ((v16 & 0x10) == 0)
      {
LABEL_18:
        if ((v16 & 0x80) == 0)
          goto LABEL_20;
        goto LABEL_19;
      }
      goto LABEL_43;
    }
  }
  else if ((v16 & 4) == 0)
  {
    goto LABEL_16;
  }
  v14 = *((_QWORD *)a2 + 5);
  *((_DWORD *)this + 50) |= 4u;
  *((_QWORD *)this + 5) = v14;
  v16 = *((_DWORD *)a2 + 50);
  if ((v16 & 8) != 0)
    goto LABEL_41;
LABEL_17:
  if ((v16 & 0x10) == 0)
    goto LABEL_18;
LABEL_43:
  v22 = *((_DWORD *)a2 + 13);
  if (v22 >= 4)
    CLMicroLocationProto::Model::MergeFrom();
  *((_DWORD *)this + 50) |= 0x10u;
  *((_DWORD *)this + 13) = v22;
  v16 = *((_DWORD *)a2 + 50);
  if ((v16 & 0x80) != 0)
  {
LABEL_19:
    v17 = *((_BYTE *)a2 + 104);
    *((_DWORD *)this + 50) |= 0x80u;
    *((_BYTE *)this + 104) = v17;
    v16 = *((_DWORD *)a2 + 50);
  }
LABEL_20:
  if ((v16 & 0xFF00) == 0)
    goto LABEL_30;
  if ((v16 & 0x100) != 0)
  {
    *((_DWORD *)this + 50) |= 0x100u;
    v23 = (CLMicroLocationProto::anchorAppearancesVector *)*((_QWORD *)this + 14);
    if (!v23)
    {
      v13 = operator new();
      v23 = (CLMicroLocationProto::anchorAppearancesVector *)v13;
      *(_QWORD *)(v13 + 8) = 0;
      *(_QWORD *)(v13 + 16) = 0;
      *(_QWORD *)v13 = &off_2511D6F38;
      *(_DWORD *)(v13 + 24) = 0;
      *(_QWORD *)(v13 + 32) = 0;
      *((_QWORD *)this + 14) = v13;
    }
    v24 = (const CLMicroLocationProto::anchorAppearancesVector *)*((_QWORD *)a2 + 14);
    if (!v24)
    {
      CLMicroLocationProto::protobuf_AddDesc_microlocation_2eproto((CLMicroLocationProto *)v13);
      v24 = *(const CLMicroLocationProto::anchorAppearancesVector **)(CLMicroLocationProto::Model::default_instance_
                                                                    + 112);
    }
    CLMicroLocationProto::anchorAppearancesVector::MergeFrom(v23, v24);
    v16 = *((_DWORD *)a2 + 50);
    if ((v16 & 0x200) == 0)
    {
LABEL_23:
      if ((v16 & 0x400) == 0)
        goto LABEL_24;
      goto LABEL_52;
    }
  }
  else if ((v16 & 0x200) == 0)
  {
    goto LABEL_23;
  }
  v25 = *((_DWORD *)a2 + 27);
  *((_DWORD *)this + 50) |= 0x200u;
  *((_DWORD *)this + 27) = v25;
  v16 = *((_DWORD *)a2 + 50);
  if ((v16 & 0x400) == 0)
  {
LABEL_24:
    if ((v16 & 0x800) == 0)
      goto LABEL_25;
    goto LABEL_57;
  }
LABEL_52:
  *((_DWORD *)this + 50) |= 0x400u;
  v26 = (CLMicroLocationProto::LocationSimilarityListData *)*((_QWORD *)this + 15);
  if (!v26)
  {
    v13 = operator new();
    v26 = (CLMicroLocationProto::LocationSimilarityListData *)v13;
    *(_QWORD *)(v13 + 8) = 0;
    *(_QWORD *)(v13 + 16) = 0;
    *(_QWORD *)v13 = &off_2511D7190;
    *(_DWORD *)(v13 + 24) = 0;
    *(_QWORD *)(v13 + 32) = 0;
    *(_QWORD *)(v13 + 40) = 0;
    *(_DWORD *)(v13 + 48) = 0;
    *(_QWORD *)(v13 + 64) = 0;
    *(_QWORD *)(v13 + 72) = 0;
    *(_QWORD *)(v13 + 56) = 0;
    *((_QWORD *)this + 15) = v13;
  }
  v27 = (const CLMicroLocationProto::LocationSimilarityListData *)*((_QWORD *)a2 + 15);
  if (!v27)
  {
    CLMicroLocationProto::protobuf_AddDesc_microlocation_2eproto((CLMicroLocationProto *)v13);
    v27 = *(const CLMicroLocationProto::LocationSimilarityListData **)(CLMicroLocationProto::Model::default_instance_
                                                                     + 120);
  }
  CLMicroLocationProto::LocationSimilarityListData::MergeFrom(v26, v27);
  v16 = *((_DWORD *)a2 + 50);
  if ((v16 & 0x800) == 0)
  {
LABEL_25:
    if ((v16 & 0x1000) == 0)
      goto LABEL_26;
    goto LABEL_59;
  }
LABEL_57:
  v28 = *((_DWORD *)a2 + 32);
  if (v28 >= 4)
    CLMicroLocationProto::Model::MergeFrom();
  *((_DWORD *)this + 50) |= 0x800u;
  *((_DWORD *)this + 32) = v28;
  v16 = *((_DWORD *)a2 + 50);
  if ((v16 & 0x1000) == 0)
  {
LABEL_26:
    if ((v16 & 0x4000) == 0)
      goto LABEL_28;
    goto LABEL_27;
  }
LABEL_59:
  v29 = *((_DWORD *)a2 + 33);
  if (v29 >= 4)
    CLMicroLocationProto::Model::MergeFrom();
  *((_DWORD *)this + 50) |= 0x1000u;
  *((_DWORD *)this + 33) = v29;
  v16 = *((_DWORD *)a2 + 50);
  if ((v16 & 0x4000) == 0)
    goto LABEL_28;
LABEL_27:
  v18 = *((_DWORD *)a2 + 38);
  *((_DWORD *)this + 50) |= 0x4000u;
  *((_DWORD *)this + 38) = v18;
  v16 = *((_DWORD *)a2 + 50);
LABEL_28:
  if ((v16 & 0x8000) != 0)
  {
    v19 = *((_DWORD *)a2 + 39);
    *((_DWORD *)this + 50) |= 0x8000u;
    *((_DWORD *)this + 39) = v19;
    v16 = *((_DWORD *)a2 + 50);
  }
LABEL_30:
  if ((v16 & 0xFF0000) == 0)
    return *(float *)&v14;
  if ((v16 & 0x10000) != 0)
  {
    v30 = *((_DWORD *)a2 + 40);
    *((_DWORD *)this + 50) |= 0x10000u;
    *((_DWORD *)this + 40) = v30;
    v16 = *((_DWORD *)a2 + 50);
    if ((v16 & 0x20000) == 0)
    {
LABEL_33:
      if ((v16 & 0x40000) == 0)
        goto LABEL_34;
      goto LABEL_64;
    }
  }
  else if ((v16 & 0x20000) == 0)
  {
    goto LABEL_33;
  }
  v31 = *((_DWORD *)a2 + 41);
  *((_DWORD *)this + 50) |= 0x20000u;
  *((_DWORD *)this + 41) = v31;
  v16 = *((_DWORD *)a2 + 50);
  if ((v16 & 0x40000) == 0)
  {
LABEL_34:
    if ((v16 & 0x80000) == 0)
      goto LABEL_35;
    goto LABEL_65;
  }
LABEL_64:
  v32 = *((_DWORD *)a2 + 42);
  *((_DWORD *)this + 50) |= 0x40000u;
  *((_DWORD *)this + 42) = v32;
  v16 = *((_DWORD *)a2 + 50);
  if ((v16 & 0x80000) == 0)
  {
LABEL_35:
    if ((v16 & 0x100000) == 0)
      goto LABEL_36;
    goto LABEL_66;
  }
LABEL_65:
  v33 = *((_DWORD *)a2 + 43);
  *((_DWORD *)this + 50) |= 0x80000u;
  *((_DWORD *)this + 43) = v33;
  v16 = *((_DWORD *)a2 + 50);
  if ((v16 & 0x100000) == 0)
  {
LABEL_36:
    if ((v16 & 0x200000) == 0)
      goto LABEL_37;
    goto LABEL_67;
  }
LABEL_66:
  v34 = *((_DWORD *)a2 + 48);
  *((_DWORD *)this + 50) |= 0x100000u;
  *((_DWORD *)this + 48) = v34;
  v16 = *((_DWORD *)a2 + 50);
  if ((v16 & 0x200000) == 0)
  {
LABEL_37:
    if ((v16 & 0x400000) == 0)
      return *(float *)&v14;
    goto LABEL_70;
  }
LABEL_67:
  v35 = (const std::string *)*((_QWORD *)a2 + 22);
  *((_DWORD *)this + 50) |= 0x200000u;
  v36 = (std::string *)*((_QWORD *)this + 22);
  if (v36 == (std::string *)MEMORY[0x24BEDD958])
  {
    v36 = (std::string *)operator new();
    v36->__r_.__value_.__l.__size_ = 0;
    v36->__r_.__value_.__r.__words[2] = 0;
    v36->__r_.__value_.__r.__words[0] = 0;
    *((_QWORD *)this + 22) = v36;
  }
  v13 = (uint64_t)std::string::operator=(v36, v35);
  if ((*((_DWORD *)a2 + 50) & 0x400000) != 0)
  {
LABEL_70:
    *((_DWORD *)this + 50) |= 0x400000u;
    v37 = (CLMicroLocationProto::BlueAtlasData *)*((_QWORD *)this + 23);
    if (!v37)
    {
      v13 = operator new();
      v37 = (CLMicroLocationProto::BlueAtlasData *)v13;
      *(_QWORD *)(v13 + 8) = 0;
      *(_QWORD *)(v13 + 16) = 0;
      *(_QWORD *)v13 = &off_2511D7208;
      *(_DWORD *)(v13 + 24) = 0;
      *(_OWORD *)(v13 + 32) = 0u;
      *(_OWORD *)(v13 + 48) = 0u;
      *((_QWORD *)this + 23) = v13;
    }
    v38 = (const CLMicroLocationProto::BlueAtlasData *)*((_QWORD *)a2 + 23);
    if (!v38)
    {
      CLMicroLocationProto::protobuf_AddDesc_microlocation_2eproto((CLMicroLocationProto *)v13);
      v38 = *(const CLMicroLocationProto::BlueAtlasData **)(CLMicroLocationProto::Model::default_instance_ + 184);
    }
    *(float *)&v14 = CLMicroLocationProto::BlueAtlasData::MergeFrom(v37, v38);
  }
  return *(float *)&v14;
}

void sub_241ABEFBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void CLMicroLocationProto::Model::~Model(CLMicroLocationProto::Model *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_2511D7280;
  CLMicroLocationProto::Model::SharedDtor(this);
  v2 = *((_QWORD *)this + 17);
  if (v2)
    MEMORY[0x2426A04BC](v2, 0x1000C8052888210);
  wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Destroy<wireless_diagnostics::google::protobuf::RepeatedPtrField<CLMicroLocationProto::Measurement>::TypeHandler>((uint64_t *)this + 10);
  wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Destroy<wireless_diagnostics::google::protobuf::RepeatedPtrField<CLMicroLocationProto::Measurement>::TypeHandler>((uint64_t *)this + 7);
  wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Destroy<wireless_diagnostics::google::protobuf::RepeatedPtrField<CLMicroLocationProto::Measurement>::TypeHandler>((uint64_t *)this + 1);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

{
  CLMicroLocationProto::Model::~Model(this);
  JUMPOUT(0x2426A04D4);
}

void CLMicroLocationProto::Model::SharedDtor(CLMicroLocationProto::Model *this)
{
  CLMicroLocationProto::Model *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = this;
  v2 = *((_QWORD *)this + 22);
  if (v2 != MEMORY[0x24BEDD958] && v2 != 0)
  {
    if (*(char *)(v2 + 23) < 0)
      operator delete(*(void **)v2);
    this = (CLMicroLocationProto::Model *)MEMORY[0x2426A04D4](v2, 0x1012C40EC159624);
  }
  CLMicroLocationProto::protobuf_AddDesc_microlocation_2eproto(this);
  if ((CLMicroLocationProto::Model *)CLMicroLocationProto::Model::default_instance_ != v1)
  {
    v4 = *((_QWORD *)v1 + 14);
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    v5 = *((_QWORD *)v1 + 15);
    if (v5)
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
    v6 = *((_QWORD *)v1 + 23);
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  }
}

uint64_t CLMicroLocationProto::Model::default_instance(CLMicroLocationProto::Model *this)
{
  CLMicroLocationProto::protobuf_AddDesc_microlocation_2eproto(this);
  return CLMicroLocationProto::Model::default_instance_;
}

double CLMicroLocationProto::Model::New(CLMicroLocationProto::Model *this)
{
  uint64_t v1;
  double result;

  v1 = operator new();
  *(_QWORD *)(v1 + 8) = 0;
  *(_QWORD *)(v1 + 16) = 0;
  *(_QWORD *)v1 = &off_2511D7280;
  *(_DWORD *)(v1 + 24) = 0;
  *(_QWORD *)(v1 + 80) = 0;
  *(_QWORD *)(v1 + 88) = 0;
  *(_DWORD *)(v1 + 96) = 0;
  *(_BYTE *)(v1 + 104) = 0;
  *(_QWORD *)(v1 + 192) = 0;
  result = 0.0;
  *(_OWORD *)(v1 + 32) = 0u;
  *(_OWORD *)(v1 + 48) = 0u;
  *(_OWORD *)(v1 + 60) = 0u;
  *(_OWORD *)(v1 + 108) = 0u;
  *(_OWORD *)(v1 + 124) = 0u;
  *(_OWORD *)(v1 + 140) = 0u;
  *(_OWORD *)(v1 + 156) = 0u;
  *(_DWORD *)(v1 + 172) = 0;
  *(_QWORD *)(v1 + 176) = MEMORY[0x24BEDD958];
  *(_QWORD *)(v1 + 184) = 0;
  *(_DWORD *)(v1 + 200) = 0;
  return result;
}

uint64_t CLMicroLocationProto::Model::Clear(uint64_t this)
{
  uint64_t v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v1 = this;
  v2 = *(_DWORD *)(this + 200);
  if ((v2 & 0x1FE) != 0)
  {
    *(_BYTE *)(this + 104) = 0;
    *(_QWORD *)(this + 40) = 0;
    *(_QWORD *)(this + 48) = 0;
    *(_QWORD *)(this + 32) = 0;
  }
  if ((v2 & 0xFF00) != 0)
  {
    if ((v2 & 0x100) != 0)
    {
      v3 = *(_QWORD *)(this + 112);
      if (v3)
      {
        if (*(int *)(v3 + 16) >= 1)
        {
          v4 = 0;
          do
          {
            v5 = *(_QWORD *)(*(_QWORD *)(v3 + 8) + 8 * v4);
            this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 32))(v5);
            ++v4;
          }
          while (v4 < *(int *)(v3 + 16));
        }
        *(_DWORD *)(v3 + 16) = 0;
        *(_DWORD *)(v3 + 36) = 0;
        v2 = *(_DWORD *)(v1 + 200);
      }
    }
    *(_DWORD *)(v1 + 108) = 0;
    if ((v2 & 0x400) != 0)
    {
      this = *(_QWORD *)(v1 + 120);
      if (this)
      {
        this = CLMicroLocationProto::LocationSimilarityListData::Clear((CLMicroLocationProto::LocationSimilarityListData *)this);
        v2 = *(_DWORD *)(v1 + 200);
      }
    }
    *(_QWORD *)(v1 + 128) = 0;
    *(_QWORD *)(v1 + 152) = 0;
  }
  if ((v2 & 0xFF0000) != 0)
  {
    *(_DWORD *)(v1 + 192) = 0;
    *(_QWORD *)(v1 + 160) = 0;
    *(_QWORD *)(v1 + 168) = 0;
    if ((v2 & 0x200000) != 0)
    {
      v6 = *(_QWORD *)(v1 + 176);
      if (v6 != MEMORY[0x24BEDD958])
      {
        if (*(char *)(v6 + 23) < 0)
        {
          **(_BYTE **)v6 = 0;
          *(_QWORD *)(v6 + 8) = 0;
        }
        else
        {
          *(_BYTE *)v6 = 0;
          *(_BYTE *)(v6 + 23) = 0;
        }
      }
    }
    if ((*(_BYTE *)(v1 + 202) & 0x40) != 0)
    {
      this = *(_QWORD *)(v1 + 184);
      if (this)
        this = CLMicroLocationProto::BlueAtlasData::Clear((CLMicroLocationProto::BlueAtlasData *)this);
    }
  }
  if (*(int *)(v1 + 16) >= 1)
  {
    v7 = 0;
    do
    {
      v8 = *(_QWORD *)(*(_QWORD *)(v1 + 8) + 8 * v7);
      this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 32))(v8);
      ++v7;
    }
    while (v7 < *(int *)(v1 + 16));
  }
  *(_DWORD *)(v1 + 16) = 0;
  if (*(int *)(v1 + 64) >= 1)
  {
    v9 = 0;
    do
    {
      v10 = *(_QWORD *)(*(_QWORD *)(v1 + 56) + 8 * v9);
      this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 32))(v10);
      ++v9;
    }
    while (v9 < *(int *)(v1 + 64));
  }
  *(_DWORD *)(v1 + 64) = 0;
  if (*(int *)(v1 + 88) >= 1)
  {
    v11 = 0;
    do
    {
      v12 = *(_QWORD *)(*(_QWORD *)(v1 + 80) + 8 * v11);
      this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 32))(v12);
      ++v11;
    }
    while (v11 < *(int *)(v1 + 88));
  }
  *(_DWORD *)(v1 + 88) = 0;
  *(_DWORD *)(v1 + 144) = 0;
  *(_DWORD *)(v1 + 200) = 0;
  return this;
}

uint64_t CLMicroLocationProto::Model::MergePartialFromCodedStream(CLMicroLocationProto::Model *this, wireless_diagnostics::google::protobuf::io::CodedInputStream *a2)
{
  _DWORD *v4;
  wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *v5;
  unsigned int *v6;
  unsigned int *v7;
  uint64_t v8;
  char *v9;
  uint64_t TagFallback;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  int v19;
  int v20;
  int v21;
  BOOL v22;
  int v23;
  unint64_t v24;
  unsigned __int8 *v25;
  int v26;
  char *v27;
  _BYTE *v28;
  unint64_t v29;
  char *v30;
  unint64_t v31;
  char *v32;
  unint64_t v33;
  char *v34;
  int v35;
  unint64_t v36;
  char *v37;
  int v38;
  unint64_t v39;
  char *v40;
  unint64_t v41;
  char *v42;
  unint64_t v43;
  char *v44;
  unsigned __int8 *v45;
  unsigned __int8 *v46;
  unsigned __int8 *v47;
  unsigned __int8 *v48;
  unsigned __int8 *v49;
  unsigned __int8 *v50;
  unsigned __int8 *v51;
  int v52;
  _QWORD *v53;
  uint64_t result;
  unsigned __int8 *v55;
  uint64_t v56;
  char *v57;
  int v58;
  int v59;
  int v60;
  int v61;
  _BYTE *v62;
  unsigned int v63;
  _BYTE *v64;
  unsigned int v65;
  _BYTE *v66;
  int v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  int v74;
  int v75;
  int v76;
  int v77;
  int v78;
  int v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  int v86;
  int v87;
  int v88;
  int v89;
  int v90;
  unsigned int v91;
  _BYTE *v92;
  uint64_t v93;
  char *v94;
  int v95;
  int v96;
  int v97;
  int v98;
  _BYTE *v99;
  _BYTE *v100;
  uint64_t v101;
  char *v102;
  int v103;
  int v104;
  int v105;
  int v106;
  _BYTE *v107;
  unsigned int v108;
  _BYTE *v109;
  unsigned int v110;
  unsigned __int8 *v111;
  int v112;
  unsigned int v113;
  int v114;
  uint64_t v115;
  unsigned __int8 *v116;
  unsigned __int8 *v117;
  unsigned __int8 *v118;
  unsigned __int8 *v119;
  unsigned __int8 *v120;
  unsigned __int8 *v121;
  unsigned __int8 *v122;
  wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *v123;
  wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *v124;
  unint64_t *v125;
  unsigned int *v126;
  unsigned int *v127;
  unsigned int *v128;
  unsigned int *v129;
  unsigned int *v130;
  unsigned int *v131;
  unsigned int v132[2];

  v4 = (_DWORD *)((char *)this + 136);
  v5 = (CLMicroLocationProto::Model *)((char *)this + 8);
  v123 = (CLMicroLocationProto::Model *)((char *)this + 56);
  v124 = (CLMicroLocationProto::Model *)((char *)this + 80);
  v125 = (unint64_t *)((char *)this + 32);
  v6 = (unsigned int *)((char *)this + 108);
  v7 = (unsigned int *)((char *)this + 152);
  v130 = (unsigned int *)((char *)this + 160);
  v131 = (unsigned int *)((char *)this + 156);
  v128 = (unsigned int *)((char *)this + 168);
  v129 = (unsigned int *)((char *)this + 164);
  v126 = (unsigned int *)((char *)this + 192);
  v127 = (unsigned int *)((char *)this + 172);
  v8 = MEMORY[0x24BEDD958];
LABEL_2:
  while (2)
  {
    v9 = (char *)*((_QWORD *)a2 + 1);
    if ((unint64_t)v9 >= *((_QWORD *)a2 + 2) || *v9 < 0)
    {
      TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(a2);
      *((_DWORD *)a2 + 8) = TagFallback;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    else
    {
      TagFallback = *v9;
      *((_DWORD *)a2 + 8) = TagFallback;
      *((_QWORD *)a2 + 1) = v9 + 1;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    switch(TagFallback >> 3)
    {
      case 1u:
        v11 = TagFallback & 7;
        if (v11 != 2)
          goto LABEL_86;
        while (1)
        {
          v12 = *((_DWORD *)this + 5);
          v13 = *((int *)this + 4);
          if ((int)v13 >= v12)
          {
            if (v12 == *((_DWORD *)this + 6))
            {
              wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve(v5);
              v12 = *((_DWORD *)this + 5);
            }
            *((_DWORD *)this + 5) = v12 + 1;
            v15 = operator new();
            *(_QWORD *)(v15 + 8) = 0;
            *(_QWORD *)(v15 + 16) = 0;
            *(_QWORD *)v15 = &off_2511D6D58;
            *(_DWORD *)(v15 + 24) = 0;
            *(_QWORD *)(v15 + 72) = 0;
            *(_QWORD *)(v15 + 80) = 0;
            *(_DWORD *)(v15 + 88) = 0;
            *(_QWORD *)(v15 + 32) = 0;
            *(_QWORD *)(v15 + 40) = 0;
            *(_QWORD *)(v15 + 48) = 0;
            *(_QWORD *)(v15 + 56) = v8;
            *(_QWORD *)(v15 + 64) = v8;
            *(_WORD *)(v15 + 96) = 0;
            *(_DWORD *)(v15 + 100) = 0;
            *(_DWORD *)(v15 + 104) = 0;
            v16 = *((_QWORD *)this + 1);
            v17 = *((int *)this + 4);
            *((_DWORD *)this + 4) = v17 + 1;
            *(_QWORD *)(v16 + 8 * v17) = v15;
          }
          else
          {
            v14 = *((_QWORD *)this + 1);
            *((_DWORD *)this + 4) = v13 + 1;
            v15 = *(_QWORD *)(v14 + 8 * v13);
          }
          v132[0] = 0;
          v18 = (char *)*((_QWORD *)a2 + 1);
          if ((unint64_t)v18 >= *((_QWORD *)a2 + 2) || *v18 < 0)
          {
            if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v132))return 0;
          }
          else
          {
            v132[0] = *v18;
            *((_QWORD *)a2 + 1) = v18 + 1;
          }
          v19 = *((_DWORD *)a2 + 14);
          v20 = *((_DWORD *)a2 + 15);
          *((_DWORD *)a2 + 14) = v19 + 1;
          if (v19 >= v20)
            return 0;
          wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(a2);
          if (!CLMicroLocationProto::Fingerprint::MergePartialFromCodedStream((CLMicroLocationProto::Fingerprint *)v15, a2)|| !*((_BYTE *)a2 + 36))
          {
            return 0;
          }
          wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(a2);
          v21 = *((_DWORD *)a2 + 14);
          v22 = __OFSUB__(v21, 1);
          v23 = v21 - 1;
          if (v23 < 0 == v22)
            *((_DWORD *)a2 + 14) = v23;
          v25 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
          v24 = *((_QWORD *)a2 + 2);
          if ((unint64_t)v25 >= v24)
            goto LABEL_2;
          v26 = *v25;
          if (v26 != 10)
            break;
          *((_QWORD *)a2 + 1) = v25 + 1;
        }
        if (v26 != 16)
          continue;
        v27 = (char *)(v25 + 1);
        *((_QWORD *)a2 + 1) = v27;
        goto LABEL_29;
      case 2u:
        v11 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_86;
        v27 = (char *)*((_QWORD *)a2 + 1);
        v24 = *((_QWORD *)a2 + 2);
LABEL_29:
        if ((unint64_t)v27 >= v24 || *v27 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint64Fallback(a2, v125);
          if (!(_DWORD)result)
            return result;
          v28 = (_BYTE *)*((_QWORD *)a2 + 1);
          v24 = *((_QWORD *)a2 + 2);
        }
        else
        {
          *v125 = *v27;
          v28 = v27 + 1;
          *((_QWORD *)a2 + 1) = v28;
        }
        *((_DWORD *)this + 50) |= 2u;
        if ((unint64_t)v28 >= v24 || *v28 != 25)
          continue;
        *((_QWORD *)a2 + 1) = v28 + 1;
LABEL_108:
        *(_QWORD *)v132 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(a2, (unint64_t *)v132) & 1) == 0)return 0;
        *((_QWORD *)this + 5) = *(_QWORD *)v132;
        *((_DWORD *)this + 50) |= 4u;
        v62 = (_BYTE *)*((_QWORD *)a2 + 1);
        v29 = *((_QWORD *)a2 + 2);
        if ((unint64_t)v62 >= v29 || *v62 != 32)
          continue;
        v30 = v62 + 1;
        *((_QWORD *)a2 + 1) = v30;
LABEL_112:
        v132[0] = 0;
        if ((unint64_t)v30 >= v29 || *v30 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v132);
          if (!(_DWORD)result)
            return result;
          v63 = v132[0];
        }
        else
        {
          v63 = *v30;
          *((_QWORD *)a2 + 1) = v30 + 1;
        }
        if (v63 <= 5)
        {
          *((_DWORD *)this + 50) |= 8u;
          *((_DWORD *)this + 12) = v63;
        }
        v64 = (_BYTE *)*((_QWORD *)a2 + 1);
        v31 = *((_QWORD *)a2 + 2);
        if ((unint64_t)v64 >= v31 || *v64 != 40)
          continue;
        v32 = v64 + 1;
        *((_QWORD *)a2 + 1) = v32;
LABEL_122:
        v132[0] = 0;
        if ((unint64_t)v32 >= v31 || *v32 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v132);
          if (!(_DWORD)result)
            return result;
          v65 = v132[0];
        }
        else
        {
          v65 = *v32;
          *((_QWORD *)a2 + 1) = v32 + 1;
        }
        if (v65 <= 3)
        {
          *((_DWORD *)this + 50) |= 0x10u;
          *((_DWORD *)this + 13) = v65;
        }
        v66 = (_BYTE *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v66 >= *((_QWORD *)a2 + 2) || *v66 != 50)
          continue;
        do
        {
          *((_QWORD *)a2 + 1) = v66 + 1;
LABEL_132:
          v67 = *((_DWORD *)this + 17);
          v68 = *((int *)this + 16);
          if ((int)v68 >= v67)
          {
            if (v67 == *((_DWORD *)this + 18))
            {
              wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve(v123);
              v67 = *((_DWORD *)this + 17);
            }
            *((_DWORD *)this + 17) = v67 + 1;
            v70 = operator new();
            *(_QWORD *)(v70 + 16) = 0;
            *(_QWORD *)(v70 + 24) = 0;
            *(_DWORD *)(v70 + 32) = 0;
            *(_QWORD *)v70 = &off_2511D6DD0;
            *(_QWORD *)(v70 + 8) = v8;
            *(_QWORD *)(v70 + 40) = 0;
            v71 = *((_QWORD *)this + 7);
            v72 = *((int *)this + 16);
            *((_DWORD *)this + 16) = v72 + 1;
            *(_QWORD *)(v71 + 8 * v72) = v70;
          }
          else
          {
            v69 = *((_QWORD *)this + 7);
            *((_DWORD *)this + 16) = v68 + 1;
            v70 = *(_QWORD *)(v69 + 8 * v68);
          }
          v132[0] = 0;
          v73 = (char *)*((_QWORD *)a2 + 1);
          if ((unint64_t)v73 >= *((_QWORD *)a2 + 2) || *v73 < 0)
          {
            if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v132))return 0;
          }
          else
          {
            v132[0] = *v73;
            *((_QWORD *)a2 + 1) = v73 + 1;
          }
          v74 = *((_DWORD *)a2 + 14);
          v75 = *((_DWORD *)a2 + 15);
          *((_DWORD *)a2 + 14) = v74 + 1;
          if (v74 >= v75)
            return 0;
          wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(a2);
          if (!CLMicroLocationProto::ClusterRecordings::MergePartialFromCodedStream(v70, a2)
            || !*((_BYTE *)a2 + 36))
          {
            return 0;
          }
          wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(a2);
          v76 = *((_DWORD *)a2 + 14);
          v22 = __OFSUB__(v76, 1);
          v77 = v76 - 1;
          if (v77 < 0 == v22)
            *((_DWORD *)a2 + 14) = v77;
          v66 = (_BYTE *)*((_QWORD *)a2 + 1);
          if ((unint64_t)v66 >= *((_QWORD *)a2 + 2))
            goto LABEL_2;
          v78 = *v66;
        }
        while (v78 == 50);
        if (v78 != 58)
          continue;
        do
        {
          *((_QWORD *)a2 + 1) = v66 + 1;
LABEL_150:
          v79 = *((_DWORD *)this + 23);
          v80 = *((int *)this + 22);
          if ((int)v80 >= v79)
          {
            if (v79 == *((_DWORD *)this + 24))
            {
              wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve(v124);
              v79 = *((_DWORD *)this + 23);
            }
            *((_DWORD *)this + 23) = v79 + 1;
            v82 = operator new();
            *(_QWORD *)(v82 + 8) = 0;
            *(_QWORD *)(v82 + 16) = 0;
            *(_QWORD *)v82 = &off_2511D6E48;
            *(_DWORD *)(v82 + 24) = 1;
            *(_WORD *)(v82 + 28) = 0;
            *(_QWORD *)(v82 + 40) = 1;
            *(_QWORD *)(v82 + 32) = v8;
            *(_DWORD *)(v82 + 48) = 0;
            v83 = *((_QWORD *)this + 10);
            v84 = *((int *)this + 22);
            *((_DWORD *)this + 22) = v84 + 1;
            *(_QWORD *)(v83 + 8 * v84) = v82;
          }
          else
          {
            v81 = *((_QWORD *)this + 10);
            *((_DWORD *)this + 22) = v80 + 1;
            v82 = *(_QWORD *)(v81 + 8 * v80);
          }
          v132[0] = 0;
          v85 = (char *)*((_QWORD *)a2 + 1);
          if ((unint64_t)v85 >= *((_QWORD *)a2 + 2) || *v85 < 0)
          {
            if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v132))return 0;
          }
          else
          {
            v132[0] = *v85;
            *((_QWORD *)a2 + 1) = v85 + 1;
          }
          v86 = *((_DWORD *)a2 + 14);
          v87 = *((_DWORD *)a2 + 15);
          *((_DWORD *)a2 + 14) = v86 + 1;
          if (v86 >= v87)
            return 0;
          wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(a2);
          if (!CLMicroLocationProto::AnchorMetadata::MergePartialFromCodedStream((CLMicroLocationProto::AnchorMetadata *)v82, a2)|| !*((_BYTE *)a2 + 36))
          {
            return 0;
          }
          wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(a2);
          v88 = *((_DWORD *)a2 + 14);
          v22 = __OFSUB__(v88, 1);
          v89 = v88 - 1;
          if (v89 < 0 == v22)
            *((_DWORD *)a2 + 14) = v89;
          v66 = (_BYTE *)*((_QWORD *)a2 + 1);
          v33 = *((_QWORD *)a2 + 2);
          if ((unint64_t)v66 >= v33)
            goto LABEL_2;
          v90 = *v66;
        }
        while (v90 == 58);
        if (v90 != 64)
          continue;
        v34 = v66 + 1;
        *((_QWORD *)a2 + 1) = v34;
LABEL_168:
        v132[0] = 0;
        if ((unint64_t)v34 >= v33 || *v34 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v132);
          if (!(_DWORD)result)
            return result;
          v91 = v132[0];
          v92 = (_BYTE *)*((_QWORD *)a2 + 1);
          v33 = *((_QWORD *)a2 + 2);
        }
        else
        {
          v91 = *v34;
          v92 = v34 + 1;
          *((_QWORD *)a2 + 1) = v92;
        }
        *((_BYTE *)this + 104) = v91 != 0;
        v35 = *((_DWORD *)this + 50) | 0x80;
        *((_DWORD *)this + 50) = v35;
        if ((unint64_t)v92 >= v33 || *v92 != 74)
          continue;
        *((_QWORD *)a2 + 1) = v92 + 1;
LABEL_176:
        *((_DWORD *)this + 50) = v35 | 0x100;
        v93 = *((_QWORD *)this + 14);
        if (!v93)
        {
          v93 = operator new();
          *(_QWORD *)(v93 + 8) = 0;
          *(_QWORD *)(v93 + 16) = 0;
          *(_QWORD *)v93 = &off_2511D6F38;
          *(_DWORD *)(v93 + 24) = 0;
          *(_QWORD *)(v93 + 32) = 0;
          *((_QWORD *)this + 14) = v93;
        }
        v132[0] = 0;
        v94 = (char *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v94 >= *((_QWORD *)a2 + 2) || *v94 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v132))return 0;
        }
        else
        {
          v132[0] = *v94;
          *((_QWORD *)a2 + 1) = v94 + 1;
        }
        v95 = *((_DWORD *)a2 + 14);
        v96 = *((_DWORD *)a2 + 15);
        *((_DWORD *)a2 + 14) = v95 + 1;
        if (v95 >= v96)
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(a2);
        if (!CLMicroLocationProto::anchorAppearancesVector::MergePartialFromCodedStream((CLMicroLocationProto::anchorAppearancesVector *)v93, a2)|| !*((_BYTE *)a2 + 36))
        {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(a2);
        v97 = *((_DWORD *)a2 + 14);
        v22 = __OFSUB__(v97, 1);
        v98 = v97 - 1;
        if (v98 < 0 == v22)
          *((_DWORD *)a2 + 14) = v98;
        v99 = (_BYTE *)*((_QWORD *)a2 + 1);
        v36 = *((_QWORD *)a2 + 2);
        if ((unint64_t)v99 >= v36 || *v99 != 80)
          continue;
        v37 = v99 + 1;
        *((_QWORD *)a2 + 1) = v37;
LABEL_190:
        if ((unint64_t)v37 >= v36 || *v37 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v6);
          if (!(_DWORD)result)
            return result;
          v100 = (_BYTE *)*((_QWORD *)a2 + 1);
          v36 = *((_QWORD *)a2 + 2);
        }
        else
        {
          *v6 = *v37;
          v100 = v37 + 1;
          *((_QWORD *)a2 + 1) = v100;
        }
        v38 = *((_DWORD *)this + 50) | 0x200;
        *((_DWORD *)this + 50) = v38;
        if ((unint64_t)v100 >= v36 || *v100 != 90)
          continue;
        *((_QWORD *)a2 + 1) = v100 + 1;
LABEL_198:
        *((_DWORD *)this + 50) = v38 | 0x400;
        v101 = *((_QWORD *)this + 15);
        if (!v101)
        {
          v101 = operator new();
          *(_QWORD *)(v101 + 8) = 0;
          *(_QWORD *)(v101 + 16) = 0;
          *(_QWORD *)v101 = &off_2511D7190;
          *(_DWORD *)(v101 + 24) = 0;
          *(_QWORD *)(v101 + 32) = 0;
          *(_QWORD *)(v101 + 40) = 0;
          *(_DWORD *)(v101 + 48) = 0;
          *(_QWORD *)(v101 + 64) = 0;
          *(_QWORD *)(v101 + 72) = 0;
          *(_QWORD *)(v101 + 56) = 0;
          *((_QWORD *)this + 15) = v101;
        }
        v132[0] = 0;
        v102 = (char *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v102 >= *((_QWORD *)a2 + 2) || *v102 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v132))return 0;
        }
        else
        {
          v132[0] = *v102;
          *((_QWORD *)a2 + 1) = v102 + 1;
        }
        v103 = *((_DWORD *)a2 + 14);
        v104 = *((_DWORD *)a2 + 15);
        *((_DWORD *)a2 + 14) = v103 + 1;
        if (v103 >= v104)
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(a2);
        if (!CLMicroLocationProto::LocationSimilarityListData::MergePartialFromCodedStream(v101, a2)
          || !*((_BYTE *)a2 + 36))
        {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(a2);
        v105 = *((_DWORD *)a2 + 14);
        v22 = __OFSUB__(v105, 1);
        v106 = v105 - 1;
        if (v106 < 0 == v22)
          *((_DWORD *)a2 + 14) = v106;
        v107 = (_BYTE *)*((_QWORD *)a2 + 1);
        v39 = *((_QWORD *)a2 + 2);
        if ((unint64_t)v107 >= v39 || *v107 != 96)
          continue;
        v40 = v107 + 1;
        *((_QWORD *)a2 + 1) = v40;
LABEL_212:
        v132[0] = 0;
        if ((unint64_t)v40 >= v39 || *v40 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v132);
          if (!(_DWORD)result)
            return result;
          v108 = v132[0];
        }
        else
        {
          v108 = *v40;
          *((_QWORD *)a2 + 1) = v40 + 1;
        }
        if (v108 <= 3)
        {
          *((_DWORD *)this + 50) |= 0x800u;
          *((_DWORD *)this + 32) = v108;
        }
        v109 = (_BYTE *)*((_QWORD *)a2 + 1);
        v41 = *((_QWORD *)a2 + 2);
        if ((unint64_t)v109 >= v41 || *v109 != 104)
          continue;
        v42 = v109 + 1;
        *((_QWORD *)a2 + 1) = v42;
LABEL_222:
        v132[0] = 0;
        if ((unint64_t)v42 >= v41 || *v42 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v132);
          if (!(_DWORD)result)
            return result;
          v110 = v132[0];
        }
        else
        {
          v110 = *v42;
          *((_QWORD *)a2 + 1) = v42 + 1;
        }
        if (v110 <= 3)
        {
          *((_DWORD *)this + 50) |= 0x1000u;
          *((_DWORD *)this + 33) = v110;
        }
        v111 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
        v43 = *((_QWORD *)a2 + 2);
        if ((unint64_t)v111 < v43)
        {
          v112 = *v111;
          goto LABEL_242;
        }
        continue;
      case 3u:
        v11 = TagFallback & 7;
        if (v11 == 1)
          goto LABEL_108;
        goto LABEL_86;
      case 4u:
        v11 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_86;
        v30 = (char *)*((_QWORD *)a2 + 1);
        v29 = *((_QWORD *)a2 + 2);
        goto LABEL_112;
      case 5u:
        v11 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_86;
        v32 = (char *)*((_QWORD *)a2 + 1);
        v31 = *((_QWORD *)a2 + 2);
        goto LABEL_122;
      case 6u:
        v11 = TagFallback & 7;
        if (v11 == 2)
          goto LABEL_132;
        goto LABEL_86;
      case 7u:
        v11 = TagFallback & 7;
        if (v11 == 2)
          goto LABEL_150;
        goto LABEL_86;
      case 8u:
        v11 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_86;
        v34 = (char *)*((_QWORD *)a2 + 1);
        v33 = *((_QWORD *)a2 + 2);
        goto LABEL_168;
      case 9u:
        v11 = TagFallback & 7;
        if (v11 != 2)
          goto LABEL_86;
        v35 = *((_DWORD *)this + 50);
        goto LABEL_176;
      case 0xAu:
        v11 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_86;
        v37 = (char *)*((_QWORD *)a2 + 1);
        v36 = *((_QWORD *)a2 + 2);
        goto LABEL_190;
      case 0xBu:
        v11 = TagFallback & 7;
        if (v11 != 2)
          goto LABEL_86;
        v38 = *((_DWORD *)this + 50);
        goto LABEL_198;
      case 0xCu:
        v11 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_86;
        v40 = (char *)*((_QWORD *)a2 + 1);
        v39 = *((_QWORD *)a2 + 2);
        goto LABEL_212;
      case 0xDu:
        v11 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_86;
        v42 = (char *)*((_QWORD *)a2 + 1);
        v41 = *((_QWORD *)a2 + 2);
        goto LABEL_222;
      case 0xEu:
        v11 = TagFallback & 7;
        if (v11 == 2)
        {
          result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadPackedEnumNoInline();
          if (!(_DWORD)result)
            return result;
          while (1)
          {
            v111 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
            v43 = *((_QWORD *)a2 + 2);
            if ((unint64_t)v111 >= v43)
              goto LABEL_2;
            v112 = *v111;
            if (v112 == 120)
              break;
LABEL_242:
            if (v112 != 112)
              goto LABEL_2;
            v44 = (char *)(v111 + 1);
            *((_QWORD *)a2 + 1) = v44;
LABEL_231:
            v132[0] = 0;
            if ((unint64_t)v44 >= v43 || *v44 < 0)
            {
              result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v132);
              if (!(_DWORD)result)
                return result;
              v113 = v132[0];
            }
            else
            {
              v113 = *v44;
              *((_QWORD *)a2 + 1) = v44 + 1;
            }
            if (v113 <= 8)
            {
              v114 = *((_DWORD *)this + 36);
              if (v114 == *((_DWORD *)this + 37))
              {
                wireless_diagnostics::google::protobuf::RepeatedField<int>::Reserve(v4, v114 + 1);
                v114 = *((_DWORD *)this + 36);
              }
              v115 = *((_QWORD *)this + 17);
              *((_DWORD *)this + 36) = v114 + 1;
              *(_DWORD *)(v115 + 4 * v114) = v113;
            }
          }
          v45 = v111 + 1;
          *((_QWORD *)a2 + 1) = v45;
LABEL_245:
          if ((unint64_t)v45 >= v43 || (char)*v45 < 0)
          {
            result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v7);
            if (!(_DWORD)result)
              return result;
            v116 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
            v43 = *((_QWORD *)a2 + 2);
          }
          else
          {
            *v7 = *v45;
            v116 = v45 + 1;
            *((_QWORD *)a2 + 1) = v116;
          }
          *((_DWORD *)this + 50) |= 0x4000u;
          if ((int)v43 - (int)v116 >= 2 && *v116 == 128 && v116[1] == 1)
          {
            v46 = v116 + 2;
            *((_QWORD *)a2 + 1) = v46;
LABEL_254:
            if ((unint64_t)v46 >= v43 || (char)*v46 < 0)
            {
              result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v131);
              if (!(_DWORD)result)
                return result;
              v117 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
              v43 = *((_QWORD *)a2 + 2);
            }
            else
            {
              *v131 = *v46;
              v117 = v46 + 1;
              *((_QWORD *)a2 + 1) = v117;
            }
            *((_DWORD *)this + 50) |= 0x8000u;
            if ((int)v43 - (int)v117 >= 2 && *v117 == 136 && v117[1] == 1)
            {
              v47 = v117 + 2;
              *((_QWORD *)a2 + 1) = v47;
LABEL_263:
              if ((unint64_t)v47 >= v43 || (char)*v47 < 0)
              {
                result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v130);
                if (!(_DWORD)result)
                  return result;
                v118 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
                v43 = *((_QWORD *)a2 + 2);
              }
              else
              {
                *v130 = *v47;
                v118 = v47 + 1;
                *((_QWORD *)a2 + 1) = v118;
              }
              *((_DWORD *)this + 50) |= 0x10000u;
              if ((int)v43 - (int)v118 >= 2 && *v118 == 144 && v118[1] == 1)
              {
                v48 = v118 + 2;
                *((_QWORD *)a2 + 1) = v48;
LABEL_272:
                if ((unint64_t)v48 >= v43 || (char)*v48 < 0)
                {
                  result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v129);
                  if (!(_DWORD)result)
                    return result;
                  v119 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
                  v43 = *((_QWORD *)a2 + 2);
                }
                else
                {
                  *v129 = *v48;
                  v119 = v48 + 1;
                  *((_QWORD *)a2 + 1) = v119;
                }
                *((_DWORD *)this + 50) |= 0x20000u;
                if ((int)v43 - (int)v119 >= 2 && *v119 == 152 && v119[1] == 1)
                {
                  v49 = v119 + 2;
                  *((_QWORD *)a2 + 1) = v49;
LABEL_281:
                  if ((unint64_t)v49 >= v43 || (char)*v49 < 0)
                  {
                    result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v128);
                    if (!(_DWORD)result)
                      return result;
                    v120 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
                    v43 = *((_QWORD *)a2 + 2);
                  }
                  else
                  {
                    *v128 = *v49;
                    v120 = v49 + 1;
                    *((_QWORD *)a2 + 1) = v120;
                  }
                  *((_DWORD *)this + 50) |= 0x40000u;
                  if ((int)v43 - (int)v120 >= 2 && *v120 == 160 && v120[1] == 1)
                  {
                    v50 = v120 + 2;
                    *((_QWORD *)a2 + 1) = v50;
LABEL_290:
                    if ((unint64_t)v50 >= v43 || (char)*v50 < 0)
                    {
                      result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v127);
                      if (!(_DWORD)result)
                        return result;
                      v121 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
                      v43 = *((_QWORD *)a2 + 2);
                    }
                    else
                    {
                      *v127 = *v50;
                      v121 = v50 + 1;
                      *((_QWORD *)a2 + 1) = v121;
                    }
                    *((_DWORD *)this + 50) |= 0x80000u;
                    if ((int)v43 - (int)v121 >= 2 && *v121 == 168 && v121[1] == 1)
                    {
                      v51 = v121 + 2;
                      *((_QWORD *)a2 + 1) = v51;
LABEL_299:
                      if ((unint64_t)v51 >= v43 || (char)*v51 < 0)
                      {
                        result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v126);
                        if (!(_DWORD)result)
                          return result;
                        v122 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
                        v43 = *((_QWORD *)a2 + 2);
                      }
                      else
                      {
                        *v126 = *v51;
                        v122 = v51 + 1;
                        *((_QWORD *)a2 + 1) = v122;
                      }
                      v52 = *((_DWORD *)this + 50) | 0x100000;
                      *((_DWORD *)this + 50) = v52;
                      if ((int)v43 - (int)v122 >= 2 && *v122 == 178 && v122[1] == 1)
                      {
                        *((_QWORD *)a2 + 1) = v122 + 2;
LABEL_73:
                        *((_DWORD *)this + 50) = v52 | 0x200000;
                        if (*((_QWORD *)this + 22) == v8)
                        {
                          v53 = (_QWORD *)operator new();
                          v53[1] = 0;
                          v53[2] = 0;
                          *v53 = 0;
                          *((_QWORD *)this + 22) = v53;
                        }
                        result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString();
                        if (!(_DWORD)result)
                          return result;
                        v55 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
                        if (*((_DWORD *)a2 + 4) - (int)v55 >= 2 && *v55 == 186 && v55[1] == 1)
                        {
                          *((_QWORD *)a2 + 1) = v55 + 2;
LABEL_81:
                          *((_DWORD *)this + 50) |= 0x400000u;
                          v56 = *((_QWORD *)this + 23);
                          if (!v56)
                          {
                            v56 = operator new();
                            *(_QWORD *)(v56 + 8) = 0;
                            *(_QWORD *)(v56 + 16) = 0;
                            *(_QWORD *)v56 = &off_2511D7208;
                            *(_DWORD *)(v56 + 24) = 0;
                            *(_OWORD *)(v56 + 32) = 0u;
                            *(_OWORD *)(v56 + 48) = 0u;
                            *((_QWORD *)this + 23) = v56;
                          }
                          v132[0] = 0;
                          v57 = (char *)*((_QWORD *)a2 + 1);
                          if ((unint64_t)v57 >= *((_QWORD *)a2 + 2) || *v57 < 0)
                          {
                            if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v132))return 0;
                          }
                          else
                          {
                            v132[0] = *v57;
                            *((_QWORD *)a2 + 1) = v57 + 1;
                          }
                          v58 = *((_DWORD *)a2 + 14);
                          v59 = *((_DWORD *)a2 + 15);
                          *((_DWORD *)a2 + 14) = v58 + 1;
                          if (v58 >= v59)
                            return 0;
                          wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(a2);
                          if (!CLMicroLocationProto::BlueAtlasData::MergePartialFromCodedStream(v56, a2)
                            || !*((_BYTE *)a2 + 36))
                          {
                            return 0;
                          }
                          wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(a2);
                          v60 = *((_DWORD *)a2 + 14);
                          v22 = __OFSUB__(v60, 1);
                          v61 = v60 - 1;
                          if (v61 < 0 == v22)
                            *((_DWORD *)a2 + 14) = v61;
                          if (*((_QWORD *)a2 + 1) == *((_QWORD *)a2 + 2)
                            && (*((_DWORD *)a2 + 11) || *((_DWORD *)a2 + 6) == *((_DWORD *)a2 + 10)))
                          {
                            *((_DWORD *)a2 + 8) = 0;
                            result = 1;
                            *((_BYTE *)a2 + 36) = 1;
                            return result;
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          continue;
        }
        if ((TagFallback & 7) == 0)
        {
          v44 = (char *)*((_QWORD *)a2 + 1);
          v43 = *((_QWORD *)a2 + 2);
          goto LABEL_231;
        }
LABEL_86:
        if (v11 != 4)
        {
          if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(a2, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback) & 1) == 0)return 0;
          continue;
        }
        return 1;
      case 0xFu:
        v11 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_86;
        v45 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
        v43 = *((_QWORD *)a2 + 2);
        goto LABEL_245;
      case 0x10u:
        v11 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_86;
        v46 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
        v43 = *((_QWORD *)a2 + 2);
        goto LABEL_254;
      case 0x11u:
        v11 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_86;
        v47 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
        v43 = *((_QWORD *)a2 + 2);
        goto LABEL_263;
      case 0x12u:
        v11 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_86;
        v48 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
        v43 = *((_QWORD *)a2 + 2);
        goto LABEL_272;
      case 0x13u:
        v11 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_86;
        v49 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
        v43 = *((_QWORD *)a2 + 2);
        goto LABEL_281;
      case 0x14u:
        v11 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_86;
        v50 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
        v43 = *((_QWORD *)a2 + 2);
        goto LABEL_290;
      case 0x15u:
        v11 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_86;
        v51 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
        v43 = *((_QWORD *)a2 + 2);
        goto LABEL_299;
      case 0x16u:
        v11 = TagFallback & 7;
        if (v11 != 2)
          goto LABEL_86;
        v52 = *((_DWORD *)this + 50);
        goto LABEL_73;
      case 0x17u:
        v11 = TagFallback & 7;
        if (v11 == 2)
          goto LABEL_81;
        goto LABEL_86;
      default:
        v11 = TagFallback & 7;
        goto LABEL_86;
    }
  }
}

int *CLMicroLocationProto::Model::SerializeWithCachedSizes(int *this, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a2, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  int *v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v5 = this;
  if (this[4] >= 1)
  {
    v6 = 0;
    do
      this = (int *)wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(_QWORD *)(*((_QWORD *)v5 + 1) + 8 * v6++), a2, a4);
    while (v6 < v5[4]);
  }
  v7 = v5[50];
  if ((v7 & 2) != 0)
  {
    this = (int *)wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt64((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, *((_QWORD *)v5 + 4), (uint64_t)a2, a4);
    v7 = v5[50];
    if ((v7 & 4) == 0)
    {
LABEL_6:
      if ((v7 & 8) == 0)
        goto LABEL_7;
      goto LABEL_37;
    }
  }
  else if ((v7 & 4) == 0)
  {
    goto LABEL_6;
  }
  this = (int *)wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, (uint64_t)a2, *((double *)v5 + 5), a3);
  v7 = v5[50];
  if ((v7 & 8) == 0)
  {
LABEL_7:
    if ((v7 & 0x10) == 0)
      goto LABEL_9;
    goto LABEL_8;
  }
LABEL_37:
  this = (int *)wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4, v5[12], (uint64_t)a2, a4);
  if ((v5[50] & 0x10) != 0)
LABEL_8:
    this = (int *)wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5, v5[13], (uint64_t)a2, a4);
LABEL_9:
  if (v5[16] >= 1)
  {
    v8 = 0;
    do
      this = (int *)wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)6, *(_QWORD *)(*((_QWORD *)v5 + 7) + 8 * v8++), a2, a4);
    while (v8 < v5[16]);
  }
  if (v5[22] >= 1)
  {
    v9 = 0;
    do
      this = (int *)wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)7, *(_QWORD *)(*((_QWORD *)v5 + 10) + 8 * v9++), a2, a4);
    while (v9 < v5[22]);
  }
  v10 = v5[50];
  if ((v10 & 0x80) != 0)
  {
    this = (int *)wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)8, *((unsigned __int8 *)v5 + 104), (uint64_t)a2, a4);
    v10 = v5[50];
    if ((v10 & 0x100) == 0)
    {
LABEL_17:
      if ((v10 & 0x200) == 0)
        goto LABEL_18;
      goto LABEL_43;
    }
  }
  else if ((v10 & 0x100) == 0)
  {
    goto LABEL_17;
  }
  v13 = *((_QWORD *)v5 + 14);
  if (!v13)
  {
    CLMicroLocationProto::protobuf_AddDesc_microlocation_2eproto((CLMicroLocationProto *)this);
    v13 = *(_QWORD *)(CLMicroLocationProto::Model::default_instance_ + 112);
  }
  this = (int *)wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)9, v13, a2, a4);
  v10 = v5[50];
  if ((v10 & 0x200) == 0)
  {
LABEL_18:
    if ((v10 & 0x400) == 0)
      goto LABEL_19;
    goto LABEL_44;
  }
LABEL_43:
  this = (int *)wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xA, v5[27], (uint64_t)a2, a4);
  v10 = v5[50];
  if ((v10 & 0x400) == 0)
  {
LABEL_19:
    if ((v10 & 0x800) == 0)
      goto LABEL_20;
    goto LABEL_47;
  }
LABEL_44:
  v14 = *((_QWORD *)v5 + 15);
  if (!v14)
  {
    CLMicroLocationProto::protobuf_AddDesc_microlocation_2eproto((CLMicroLocationProto *)this);
    v14 = *(_QWORD *)(CLMicroLocationProto::Model::default_instance_ + 120);
  }
  this = (int *)wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xB, v14, a2, a4);
  v10 = v5[50];
  if ((v10 & 0x800) == 0)
  {
LABEL_20:
    if ((v10 & 0x1000) == 0)
      goto LABEL_22;
    goto LABEL_21;
  }
LABEL_47:
  this = (int *)wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xC, v5[32], (uint64_t)a2, a4);
  if ((v5[50] & 0x1000) != 0)
LABEL_21:
    this = (int *)wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xD, v5[33], (uint64_t)a2, a4);
LABEL_22:
  if (v5[36] >= 1)
  {
    v11 = 0;
    do
      this = (int *)wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xE, *(unsigned int *)(*((_QWORD *)v5 + 17) + 4 * v11++), (uint64_t)a2, a4);
    while (v11 < v5[36]);
  }
  v12 = v5[50];
  if ((v12 & 0x4000) != 0)
  {
    this = (int *)wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xF, v5[38], (uint64_t)a2, a4);
    v12 = v5[50];
    if ((v12 & 0x8000) == 0)
    {
LABEL_27:
      if ((v12 & 0x10000) == 0)
        goto LABEL_28;
      goto LABEL_51;
    }
  }
  else if ((v12 & 0x8000) == 0)
  {
    goto LABEL_27;
  }
  this = (int *)wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x10, v5[39], (uint64_t)a2, a4);
  v12 = v5[50];
  if ((v12 & 0x10000) == 0)
  {
LABEL_28:
    if ((v12 & 0x20000) == 0)
      goto LABEL_29;
    goto LABEL_52;
  }
LABEL_51:
  this = (int *)wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x11, v5[40], (uint64_t)a2, a4);
  v12 = v5[50];
  if ((v12 & 0x20000) == 0)
  {
LABEL_29:
    if ((v12 & 0x40000) == 0)
      goto LABEL_30;
    goto LABEL_53;
  }
LABEL_52:
  this = (int *)wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x12, v5[41], (uint64_t)a2, a4);
  v12 = v5[50];
  if ((v12 & 0x40000) == 0)
  {
LABEL_30:
    if ((v12 & 0x80000) == 0)
      goto LABEL_31;
    goto LABEL_54;
  }
LABEL_53:
  this = (int *)wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x13, v5[42], (uint64_t)a2, a4);
  v12 = v5[50];
  if ((v12 & 0x80000) == 0)
  {
LABEL_31:
    if ((v12 & 0x100000) == 0)
      goto LABEL_32;
    goto LABEL_55;
  }
LABEL_54:
  this = (int *)wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x14, v5[43], (uint64_t)a2, a4);
  v12 = v5[50];
  if ((v12 & 0x100000) == 0)
  {
LABEL_32:
    if ((v12 & 0x200000) == 0)
      goto LABEL_33;
LABEL_56:
    this = (int *)wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString();
    if ((v5[50] & 0x400000) == 0)
      return this;
    goto LABEL_57;
  }
LABEL_55:
  this = (int *)wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x15, v5[48], (uint64_t)a2, a4);
  v12 = v5[50];
  if ((v12 & 0x200000) != 0)
    goto LABEL_56;
LABEL_33:
  if ((v12 & 0x400000) == 0)
    return this;
LABEL_57:
  v15 = *((_QWORD *)v5 + 23);
  if (!v15)
  {
    CLMicroLocationProto::protobuf_AddDesc_microlocation_2eproto((CLMicroLocationProto *)this);
    v15 = *(_QWORD *)(CLMicroLocationProto::Model::default_instance_ + 184);
  }
  return (int *)wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x17, v15, a2, a4);
}

uint64_t CLMicroLocationProto::Model::ByteSize(CLMicroLocationProto::Model *this)
{
  int v2;
  int v3;
  int v4;
  int v5;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v6;
  int v7;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v8;
  int v9;
  CLMicroLocationProto::anchorAppearancesVector *v10;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v11;
  int v12;
  int v13;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v14;
  int v15;
  CLMicroLocationProto::LocationSimilarityListData *v16;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v17;
  int v18;
  int v19;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v20;
  int v21;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v22;
  int v23;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v24;
  int v25;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v26;
  int v27;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v28;
  int v29;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v30;
  int v31;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v32;
  int v33;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v34;
  int v35;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v36;
  int v37;
  uint64_t v38;
  int v39;
  char v40;
  uint64_t v41;
  unint64_t v42;
  int v43;
  CLMicroLocationProto::BlueAtlasData *v44;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v45;
  int v46;
  int v47;
  int v48;
  int v49;
  uint64_t v50;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v51;
  int v52;
  int v53;
  int v54;
  int v55;
  uint64_t v56;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v57;
  int v58;
  int v59;
  int v60;
  int v61;
  uint64_t v62;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v63;
  int v64;
  int v65;
  int v66;
  uint64_t v67;
  int v68;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v69;
  int v70;
  uint64_t result;

  v2 = *((_DWORD *)this + 50);
  if ((v2 & 0x1FE) != 0)
  {
    if ((v2 & 2) != 0)
    {
      v3 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize64(*((wireless_diagnostics::google::protobuf::io::CodedOutputStream **)this
                                                                                       + 4))
         + 1;
      v2 = *((_DWORD *)this + 50);
    }
    else
    {
      v3 = 0;
    }
    if ((v2 & 4) != 0)
      v5 = v3 + 9;
    else
      v5 = v3;
    if ((v2 & 8) != 0)
    {
      v6 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 12);
      if ((v6 & 0x80000000) != 0)
      {
        v7 = 10;
      }
      else if (v6 >= 0x80)
      {
        v7 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v6);
        v2 = *((_DWORD *)this + 50);
      }
      else
      {
        v7 = 1;
      }
      v5 += v7 + 1;
    }
    if ((v2 & 0x10) != 0)
    {
      v8 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 13);
      if ((v8 & 0x80000000) != 0)
      {
        v9 = 10;
      }
      else if (v8 >= 0x80)
      {
        v9 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v8);
        v2 = *((_DWORD *)this + 50);
      }
      else
      {
        v9 = 1;
      }
      v5 += v9 + 1;
    }
    if ((v2 & 0x80) != 0)
      v4 = v5 + 2;
    else
      v4 = v5;
  }
  else
  {
    v4 = 0;
  }
  if ((v2 & 0xFF00) == 0)
    goto LABEL_71;
  if ((v2 & 0x100) != 0)
  {
    v10 = (CLMicroLocationProto::anchorAppearancesVector *)*((_QWORD *)this + 14);
    if (!v10)
    {
      CLMicroLocationProto::protobuf_AddDesc_microlocation_2eproto(0);
      v10 = *(CLMicroLocationProto::anchorAppearancesVector **)(CLMicroLocationProto::Model::default_instance_ + 112);
    }
    v11 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)CLMicroLocationProto::anchorAppearancesVector::ByteSize(v10);
    v12 = (int)v11;
    if (v11 >= 0x80)
      v13 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v11);
    else
      v13 = 1;
    v4 += v12 + v13 + 1;
    v2 = *((_DWORD *)this + 50);
    if ((v2 & 0x200) == 0)
    {
LABEL_29:
      if ((v2 & 0x400) == 0)
        goto LABEL_30;
      goto LABEL_45;
    }
  }
  else if ((v2 & 0x200) == 0)
  {
    goto LABEL_29;
  }
  v14 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 27);
  if (v14 >= 0x80)
  {
    v15 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v14);
    v2 = *((_DWORD *)this + 50);
  }
  else
  {
    v15 = 1;
  }
  v4 += v15 + 1;
  if ((v2 & 0x400) == 0)
  {
LABEL_30:
    if ((v2 & 0x800) == 0)
      goto LABEL_31;
    goto LABEL_51;
  }
LABEL_45:
  v16 = (CLMicroLocationProto::LocationSimilarityListData *)*((_QWORD *)this + 15);
  if (!v16)
  {
    CLMicroLocationProto::protobuf_AddDesc_microlocation_2eproto(0);
    v16 = *(CLMicroLocationProto::LocationSimilarityListData **)(CLMicroLocationProto::Model::default_instance_ + 120);
  }
  v17 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)CLMicroLocationProto::LocationSimilarityListData::ByteSize(v16);
  v18 = (int)v17;
  if (v17 >= 0x80)
    v19 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v17);
  else
    v19 = 1;
  v4 += v18 + v19 + 1;
  v2 = *((_DWORD *)this + 50);
  if ((v2 & 0x800) == 0)
  {
LABEL_31:
    if ((v2 & 0x1000) == 0)
      goto LABEL_32;
LABEL_57:
    v22 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 33);
    if ((v22 & 0x80000000) != 0)
    {
      v23 = 10;
    }
    else if (v22 >= 0x80)
    {
      v23 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v22);
      v2 = *((_DWORD *)this + 50);
    }
    else
    {
      v23 = 1;
    }
    v4 += v23 + 1;
    if ((v2 & 0x4000) == 0)
    {
LABEL_33:
      if ((v2 & 0x8000) == 0)
        goto LABEL_71;
      goto LABEL_67;
    }
    goto LABEL_63;
  }
LABEL_51:
  v20 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 32);
  if ((v20 & 0x80000000) != 0)
  {
    v21 = 10;
  }
  else if (v20 >= 0x80)
  {
    v21 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v20);
    v2 = *((_DWORD *)this + 50);
  }
  else
  {
    v21 = 1;
  }
  v4 += v21 + 1;
  if ((v2 & 0x1000) != 0)
    goto LABEL_57;
LABEL_32:
  if ((v2 & 0x4000) == 0)
    goto LABEL_33;
LABEL_63:
  v24 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 38);
  if (v24 >= 0x80)
  {
    v25 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v24);
    v2 = *((_DWORD *)this + 50);
  }
  else
  {
    v25 = 1;
  }
  v4 += v25 + 1;
  if ((v2 & 0x8000) != 0)
  {
LABEL_67:
    v26 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 39);
    if (v26 >= 0x80)
    {
      v27 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v26);
      v2 = *((_DWORD *)this + 50);
    }
    else
    {
      v27 = 1;
    }
    v4 += v27 + 2;
  }
LABEL_71:
  if ((v2 & 0xFF0000) == 0)
    goto LABEL_115;
  if ((v2 & 0x10000) != 0)
  {
    v28 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 40);
    if (v28 >= 0x80)
    {
      v29 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v28);
      v2 = *((_DWORD *)this + 50);
    }
    else
    {
      v29 = 1;
    }
    v4 += v29 + 2;
    if ((v2 & 0x20000) == 0)
    {
LABEL_74:
      if ((v2 & 0x40000) == 0)
        goto LABEL_75;
      goto LABEL_88;
    }
  }
  else if ((v2 & 0x20000) == 0)
  {
    goto LABEL_74;
  }
  v30 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 41);
  if (v30 >= 0x80)
  {
    v31 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v30);
    v2 = *((_DWORD *)this + 50);
  }
  else
  {
    v31 = 1;
  }
  v4 += v31 + 2;
  if ((v2 & 0x40000) == 0)
  {
LABEL_75:
    if ((v2 & 0x80000) == 0)
      goto LABEL_76;
    goto LABEL_92;
  }
LABEL_88:
  v32 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 42);
  if (v32 >= 0x80)
  {
    v33 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v32);
    v2 = *((_DWORD *)this + 50);
  }
  else
  {
    v33 = 1;
  }
  v4 += v33 + 2;
  if ((v2 & 0x80000) == 0)
  {
LABEL_76:
    if ((v2 & 0x100000) == 0)
      goto LABEL_77;
    goto LABEL_96;
  }
LABEL_92:
  v34 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 43);
  if (v34 >= 0x80)
  {
    v35 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v34);
    v2 = *((_DWORD *)this + 50);
  }
  else
  {
    v35 = 1;
  }
  v4 += v35 + 2;
  if ((v2 & 0x100000) == 0)
  {
LABEL_77:
    if ((v2 & 0x200000) == 0)
      goto LABEL_78;
    goto LABEL_100;
  }
LABEL_96:
  v36 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 48);
  if (v36 >= 0x80)
  {
    v37 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v36);
    v2 = *((_DWORD *)this + 50);
  }
  else
  {
    v37 = 1;
  }
  v4 += v37 + 2;
  if ((v2 & 0x200000) == 0)
  {
LABEL_78:
    if ((v2 & 0x400000) == 0)
      goto LABEL_115;
    goto LABEL_109;
  }
LABEL_100:
  v38 = *((_QWORD *)this + 22);
  v39 = *(unsigned __int8 *)(v38 + 23);
  v40 = v39;
  v41 = *(_QWORD *)(v38 + 8);
  if ((v39 & 0x80u) == 0)
    v42 = *(unsigned __int8 *)(v38 + 23);
  else
    v42 = v41;
  if (v42 >= 0x80)
  {
    v43 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v42);
    v39 = *(unsigned __int8 *)(v38 + 23);
    v41 = *(_QWORD *)(v38 + 8);
    v2 = *((_DWORD *)this + 50);
    v40 = *(_BYTE *)(v38 + 23);
  }
  else
  {
    v43 = 1;
  }
  if (v40 < 0)
    v39 = v41;
  v4 += v43 + v39 + 2;
  if ((v2 & 0x400000) != 0)
  {
LABEL_109:
    v44 = (CLMicroLocationProto::BlueAtlasData *)*((_QWORD *)this + 23);
    if (!v44)
    {
      CLMicroLocationProto::protobuf_AddDesc_microlocation_2eproto(0);
      v44 = *(CLMicroLocationProto::BlueAtlasData **)(CLMicroLocationProto::Model::default_instance_ + 184);
    }
    v45 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)CLMicroLocationProto::BlueAtlasData::ByteSize(v44);
    v46 = (int)v45;
    if (v45 >= 0x80)
      v47 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v45);
    else
      v47 = 1;
    v4 += v46 + v47 + 2;
  }
LABEL_115:
  v48 = *((_DWORD *)this + 4);
  v49 = v48 + v4;
  if (v48 >= 1)
  {
    v50 = 0;
    do
    {
      v51 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)CLMicroLocationProto::Fingerprint::ByteSize(*(CLMicroLocationProto::Fingerprint **)(*((_QWORD *)this + 1) + 8 * v50));
      v52 = (int)v51;
      if (v51 >= 0x80)
        v53 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v51);
      else
        v53 = 1;
      v49 += v52 + v53;
      ++v50;
    }
    while (v50 < *((int *)this + 4));
  }
  v54 = *((_DWORD *)this + 16);
  v55 = v54 + v49;
  if (v54 >= 1)
  {
    v56 = 0;
    do
    {
      v57 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)CLMicroLocationProto::ClusterRecordings::ByteSize(*(CLMicroLocationProto::ClusterRecordings **)(*((_QWORD *)this + 7) + 8 * v56));
      v58 = (int)v57;
      if (v57 >= 0x80)
        v59 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v57);
      else
        v59 = 1;
      v55 += v58 + v59;
      ++v56;
    }
    while (v56 < *((int *)this + 16));
  }
  v60 = *((_DWORD *)this + 22);
  v61 = v60 + v55;
  if (v60 >= 1)
  {
    v62 = 0;
    do
    {
      v63 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)CLMicroLocationProto::AnchorMetadata::ByteSize(*(CLMicroLocationProto::AnchorMetadata **)(*((_QWORD *)this + 10) + 8 * v62));
      v64 = (int)v63;
      if (v63 >= 0x80)
        v65 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v63);
      else
        v65 = 1;
      v61 += v64 + v65;
      ++v62;
    }
    while (v62 < *((int *)this + 22));
  }
  v66 = *((_DWORD *)this + 36);
  if (v66 < 1)
  {
    v68 = 0;
  }
  else
  {
    v67 = 0;
    v68 = 0;
    do
    {
      v69 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(*((_QWORD *)this + 17)
                                                                                             + 4 * v67);
      if ((v69 & 0x80000000) != 0)
      {
        v70 = 10;
      }
      else if (v69 >= 0x80)
      {
        v70 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v69);
        v66 = *((_DWORD *)this + 36);
      }
      else
      {
        v70 = 1;
      }
      v68 += v70;
      ++v67;
    }
    while (v67 < v66);
  }
  result = (v68 + v61 + v66);
  *((_DWORD *)this + 49) = result;
  return result;
}

float CLMicroLocationProto::Model::CheckTypeAndMergeFrom(CLMicroLocationProto::Model *this, const wireless_diagnostics::google::protobuf::MessageLite *lpsrc)
{
  uint64_t v4;
  uint64_t v5;

  return CLMicroLocationProto::Model::MergeFrom(this, lpsrc);
}

uint64_t CLMicroLocationProto::Model::IsInitialized(CLMicroLocationProto::Model *this)
{
  return 1;
}

double CLMicroLocationProto::Model::Swap(CLMicroLocationProto::Model *this, CLMicroLocationProto::Model *a2)
{
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  double result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  if (a2 != this)
  {
    wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Swap();
    v4 = *((_QWORD *)this + 4);
    *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
    *((_QWORD *)a2 + 4) = v4;
    v5 = *((_QWORD *)this + 5);
    *((_QWORD *)this + 5) = *((_QWORD *)a2 + 5);
    *((_QWORD *)a2 + 5) = v5;
    LODWORD(v4) = *((_DWORD *)this + 12);
    *((_DWORD *)this + 12) = *((_DWORD *)a2 + 12);
    *((_DWORD *)a2 + 12) = v4;
    LODWORD(v4) = *((_DWORD *)this + 13);
    *((_DWORD *)this + 13) = *((_DWORD *)a2 + 13);
    *((_DWORD *)a2 + 13) = v4;
    wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Swap();
    wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Swap();
    v6 = *((_BYTE *)this + 104);
    *((_BYTE *)this + 104) = *((_BYTE *)a2 + 104);
    *((_BYTE *)a2 + 104) = v6;
    v7 = *((_QWORD *)this + 14);
    *((_QWORD *)this + 14) = *((_QWORD *)a2 + 14);
    *((_QWORD *)a2 + 14) = v7;
    LODWORD(v7) = *((_DWORD *)this + 27);
    *((_DWORD *)this + 27) = *((_DWORD *)a2 + 27);
    *((_DWORD *)a2 + 27) = v7;
    v8 = *((_QWORD *)this + 15);
    *((_QWORD *)this + 15) = *((_QWORD *)a2 + 15);
    *((_QWORD *)a2 + 15) = v8;
    LODWORD(v8) = *((_DWORD *)this + 32);
    *((_DWORD *)this + 32) = *((_DWORD *)a2 + 32);
    *((_DWORD *)a2 + 32) = v8;
    LODWORD(v8) = *((_DWORD *)this + 33);
    *((_DWORD *)this + 33) = *((_DWORD *)a2 + 33);
    *((_DWORD *)a2 + 33) = v8;
    v9 = *((_QWORD *)this + 17);
    *((_QWORD *)this + 17) = *((_QWORD *)a2 + 17);
    result = *((double *)a2 + 18);
    *((_QWORD *)a2 + 17) = v9;
    v11 = *((_QWORD *)this + 18);
    *((double *)this + 18) = result;
    *((_QWORD *)a2 + 18) = v11;
    LODWORD(v9) = *((_DWORD *)this + 38);
    *((_DWORD *)this + 38) = *((_DWORD *)a2 + 38);
    *((_DWORD *)a2 + 38) = v9;
    LODWORD(v9) = *((_DWORD *)this + 39);
    *((_DWORD *)this + 39) = *((_DWORD *)a2 + 39);
    *((_DWORD *)a2 + 39) = v9;
    LODWORD(v9) = *((_DWORD *)this + 40);
    *((_DWORD *)this + 40) = *((_DWORD *)a2 + 40);
    *((_DWORD *)a2 + 40) = v9;
    LODWORD(v9) = *((_DWORD *)this + 41);
    *((_DWORD *)this + 41) = *((_DWORD *)a2 + 41);
    *((_DWORD *)a2 + 41) = v9;
    LODWORD(v9) = *((_DWORD *)this + 42);
    *((_DWORD *)this + 42) = *((_DWORD *)a2 + 42);
    *((_DWORD *)a2 + 42) = v9;
    LODWORD(v9) = *((_DWORD *)this + 43);
    *((_DWORD *)this + 43) = *((_DWORD *)a2 + 43);
    *((_DWORD *)a2 + 43) = v9;
    LODWORD(v9) = *((_DWORD *)this + 48);
    *((_DWORD *)this + 48) = *((_DWORD *)a2 + 48);
    *((_DWORD *)a2 + 48) = v9;
    v12 = *((_QWORD *)this + 22);
    *((_QWORD *)this + 22) = *((_QWORD *)a2 + 22);
    *((_QWORD *)a2 + 22) = v12;
    v13 = *((_QWORD *)this + 23);
    *((_QWORD *)this + 23) = *((_QWORD *)a2 + 23);
    *((_QWORD *)a2 + 23) = v13;
    LODWORD(v13) = *((_DWORD *)this + 50);
    *((_DWORD *)this + 50) = *((_DWORD *)a2 + 50);
    *((_DWORD *)a2 + 50) = v13;
    LODWORD(v13) = *((_DWORD *)this + 49);
    *((_DWORD *)this + 49) = *((_DWORD *)a2 + 49);
    *((_DWORD *)a2 + 49) = v13;
  }
  return result;
}

_QWORD *CLMicroLocationProto::Model::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CLMicroLocationProto.Model");
}

void CLMicroLocationProto::BundleIdFeatures::MergeFrom(CLMicroLocationProto::BundleIdFeatures *this, const CLMicroLocationProto::BundleIdFeatures *a2)
{
  int v4;
  char v5;
  char v6;
  _BYTE v7[48];

  if (a2 == this)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v7);
  }
  LOBYTE(v4) = *((_BYTE *)a2 + 16);
  if ((_BYTE)v4)
  {
    if ((*((_BYTE *)a2 + 16) & 1) != 0)
    {
      v5 = *((_BYTE *)a2 + 8);
      *((_DWORD *)this + 4) |= 1u;
      *((_BYTE *)this + 8) = v5;
      v4 = *((_DWORD *)a2 + 4);
    }
    if ((v4 & 2) != 0)
    {
      v6 = *((_BYTE *)a2 + 9);
      *((_DWORD *)this + 4) |= 2u;
      *((_BYTE *)this + 9) = v6;
    }
  }
}

void sub_241AC1078(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void CLMicroLocationProto::BundleIdFeatures::~BundleIdFeatures(CLMicroLocationProto::BundleIdFeatures *this)
{
  *(_QWORD *)this = &off_2511D72F8;
  CLMicroLocationProto::protobuf_AddDesc_microlocation_2eproto(this);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

{
  CLMicroLocationProto::BundleIdFeatures::~BundleIdFeatures(this);
  JUMPOUT(0x2426A04D4);
}

uint64_t CLMicroLocationProto::BundleIdFeatures::New(CLMicroLocationProto::BundleIdFeatures *this)
{
  uint64_t result;

  result = operator new();
  *(_QWORD *)result = &off_2511D72F8;
  *(_WORD *)(result + 8) = 0;
  *(_DWORD *)(result + 12) = 0;
  *(_DWORD *)(result + 16) = 0;
  return result;
}

uint64_t CLMicroLocationProto::BundleIdFeatures::Clear(uint64_t this)
{
  if (*(_BYTE *)(this + 16))
    *(_WORD *)(this + 8) = 0;
  *(_DWORD *)(this + 16) = 0;
  return this;
}

uint64_t CLMicroLocationProto::BundleIdFeatures::MergePartialFromCodedStream(CLMicroLocationProto::BundleIdFeatures *this, wireless_diagnostics::google::protobuf::io::CodedInputStream *a2)
{
  char *v4;
  uint64_t TagFallback;
  int v6;
  unint64_t v7;
  char *v8;
  char *v9;
  unsigned int v10;
  _BYTE *v11;
  unsigned int v12;
  unsigned __int8 *v13;
  uint64_t result;
  unsigned int v15;
  unsigned int v16;

  while (1)
  {
    while (1)
    {
      v4 = (char *)*((_QWORD *)a2 + 1);
      if ((unint64_t)v4 >= *((_QWORD *)a2 + 2) || *v4 < 0)
      {
        TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(a2);
        *((_DWORD *)a2 + 8) = TagFallback;
        if (!(_DWORD)TagFallback)
          return 1;
      }
      else
      {
        TagFallback = *v4;
        *((_DWORD *)a2 + 8) = TagFallback;
        *((_QWORD *)a2 + 1) = v4 + 1;
        if (!(_DWORD)TagFallback)
          return 1;
      }
      if (TagFallback >> 3 != 1)
        break;
      v6 = TagFallback & 7;
      if ((TagFallback & 7) != 0)
        goto LABEL_15;
      v16 = 0;
      v9 = (char *)*((_QWORD *)a2 + 1);
      v7 = *((_QWORD *)a2 + 2);
      if ((unint64_t)v9 >= v7 || *v9 < 0)
      {
        result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v16);
        if (!(_DWORD)result)
          return result;
        v10 = v16;
        v11 = (_BYTE *)*((_QWORD *)a2 + 1);
        v7 = *((_QWORD *)a2 + 2);
      }
      else
      {
        v10 = *v9;
        v11 = v9 + 1;
        *((_QWORD *)a2 + 1) = v11;
      }
      *((_BYTE *)this + 8) = v10 != 0;
      *((_DWORD *)this + 4) |= 1u;
      if ((unint64_t)v11 < v7 && *v11 == 16)
      {
        v8 = v11 + 1;
        *((_QWORD *)a2 + 1) = v8;
LABEL_23:
        v15 = 0;
        if ((unint64_t)v8 >= v7 || *v8 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v15);
          if (!(_DWORD)result)
            return result;
          v12 = v15;
          v13 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
          v7 = *((_QWORD *)a2 + 2);
        }
        else
        {
          v12 = *v8;
          v13 = (unsigned __int8 *)(v8 + 1);
          *((_QWORD *)a2 + 1) = v13;
        }
        *((_BYTE *)this + 9) = v12 != 0;
        *((_DWORD *)this + 4) |= 2u;
        if (v13 == (unsigned __int8 *)v7 && (*((_DWORD *)a2 + 11) || *((_DWORD *)a2 + 6) == *((_DWORD *)a2 + 10)))
        {
          *((_DWORD *)a2 + 8) = 0;
          result = 1;
          *((_BYTE *)a2 + 36) = 1;
          return result;
        }
      }
    }
    if (TagFallback >> 3 == 2)
    {
      v6 = TagFallback & 7;
      if ((TagFallback & 7) == 0)
      {
        v8 = (char *)*((_QWORD *)a2 + 1);
        v7 = *((_QWORD *)a2 + 2);
        goto LABEL_23;
      }
    }
    else
    {
      v6 = TagFallback & 7;
    }
LABEL_15:
    if (v6 == 4)
      return 1;
    if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(a2, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback) & 1) == 0)return 0;
  }
}

uint64_t CLMicroLocationProto::BundleIdFeatures::SerializeWithCachedSizes(uint64_t this, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  int v6;

  v5 = this;
  v6 = *(_DWORD *)(this + 16);
  if ((v6 & 1) != 0)
  {
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(unsigned __int8 *)(this + 8), (uint64_t)a2, a4);
    v6 = *(_DWORD *)(v5 + 16);
  }
  if ((v6 & 2) != 0)
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, *(unsigned __int8 *)(v5 + 9), (uint64_t)a2, a4);
  return this;
}

uint64_t CLMicroLocationProto::BundleIdFeatures::ByteSize(CLMicroLocationProto::BundleIdFeatures *this)
{
  unsigned int v1;
  uint64_t v2;

  v1 = 2 * (*((_DWORD *)this + 4) & 1);
  if ((*((_DWORD *)this + 4) & 2) != 0)
    v1 += 2;
  if (*((_DWORD *)this + 4))
    v2 = v1;
  else
    v2 = 0;
  *((_DWORD *)this + 3) = v2;
  return v2;
}

void CLMicroLocationProto::BundleIdFeatures::CheckTypeAndMergeFrom(CLMicroLocationProto::BundleIdFeatures *this, const wireless_diagnostics::google::protobuf::MessageLite *lpsrc)
{
  uint64_t v4;
  uint64_t v5;

  CLMicroLocationProto::BundleIdFeatures::MergeFrom(this, lpsrc);
}

uint64_t CLMicroLocationProto::BundleIdFeatures::IsInitialized(CLMicroLocationProto::BundleIdFeatures *this)
{
  return 1;
}

_QWORD *CLMicroLocationProto::BundleIdFeatures::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CLMicroLocationProto.BundleIdFeatures");
}

void CLMicroLocationProto::ReceivedEventAction::MergeFrom(CLMicroLocationProto::ReceivedEventAction *this, const CLMicroLocationProto::ReceivedEventAction *a2)
{
  int v4;
  unsigned int v5;
  int v6;
  std::string *v7;
  const std::string *v8;
  std::string *v9;
  const std::string *v10;
  std::string *v11;
  const std::string *v12;
  std::string *v13;
  _BYTE v14[48];

  if (a2 == this)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v14);
  }
  LOBYTE(v4) = *((_BYTE *)a2 + 44);
  if ((_BYTE)v4)
  {
    if ((*((_BYTE *)a2 + 44) & 1) != 0)
    {
      v5 = *((_DWORD *)a2 + 2);
      if (v5 - 31 >= 0x19 && (v5 > 0xE || ((1 << v5) & 0x76B6) == 0))
        CLMicroLocationProto::ReceivedEventAction::MergeFrom();
      *((_DWORD *)this + 11) |= 1u;
      *((_DWORD *)this + 2) = v5;
      v4 = *((_DWORD *)a2 + 11);
    }
    if ((v4 & 2) != 0)
    {
      v6 = *((_DWORD *)a2 + 3);
      if ((v6 - 1) >= 4)
        CLMicroLocationProto::ReceivedEventAction::MergeFrom();
      *((_DWORD *)this + 11) |= 2u;
      *((_DWORD *)this + 3) = v6;
      v4 = *((_DWORD *)a2 + 11);
    }
    v7 = (std::string *)MEMORY[0x24BEDD958];
    if ((v4 & 4) != 0)
    {
      v8 = (const std::string *)*((_QWORD *)a2 + 2);
      *((_DWORD *)this + 11) |= 4u;
      v9 = (std::string *)*((_QWORD *)this + 2);
      if (v9 == v7)
      {
        v9 = (std::string *)operator new();
        v9->__r_.__value_.__l.__size_ = 0;
        v9->__r_.__value_.__r.__words[2] = 0;
        v9->__r_.__value_.__r.__words[0] = 0;
        *((_QWORD *)this + 2) = v9;
      }
      std::string::operator=(v9, v8);
      v4 = *((_DWORD *)a2 + 11);
      if ((v4 & 8) == 0)
      {
LABEL_14:
        if ((v4 & 0x10) == 0)
          return;
        goto LABEL_22;
      }
    }
    else if ((v4 & 8) == 0)
    {
      goto LABEL_14;
    }
    v10 = (const std::string *)*((_QWORD *)a2 + 3);
    *((_DWORD *)this + 11) |= 8u;
    v11 = (std::string *)*((_QWORD *)this + 3);
    if (v11 == v7)
    {
      v11 = (std::string *)operator new();
      v11->__r_.__value_.__l.__size_ = 0;
      v11->__r_.__value_.__r.__words[2] = 0;
      v11->__r_.__value_.__r.__words[0] = 0;
      *((_QWORD *)this + 3) = v11;
    }
    std::string::operator=(v11, v10);
    if ((*((_DWORD *)a2 + 11) & 0x10) != 0)
    {
LABEL_22:
      v12 = (const std::string *)*((_QWORD *)a2 + 4);
      *((_DWORD *)this + 11) |= 0x10u;
      v13 = (std::string *)*((_QWORD *)this + 4);
      if (v13 == v7)
      {
        v13 = (std::string *)operator new();
        v13->__r_.__value_.__l.__size_ = 0;
        v13->__r_.__value_.__r.__words[2] = 0;
        v13->__r_.__value_.__r.__words[0] = 0;
        *((_QWORD *)this + 4) = v13;
      }
      std::string::operator=(v13, v12);
    }
  }
}

void sub_241AC15C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void CLMicroLocationProto::ReceivedEventAction::~ReceivedEventAction(CLMicroLocationProto::ReceivedEventAction *this)
{
  *(_QWORD *)this = &off_2511D7370;
  CLMicroLocationProto::ReceivedEventAction::SharedDtor(this);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

{
  CLMicroLocationProto::ReceivedEventAction::~ReceivedEventAction(this);
  JUMPOUT(0x2426A04D4);
}

void CLMicroLocationProto::ReceivedEventAction::SharedDtor(CLMicroLocationProto::ReceivedEventAction *this)
{
  CLMicroLocationProto::ReceivedEventAction *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v7;

  v1 = this;
  v2 = *((_QWORD *)this + 2);
  v3 = MEMORY[0x24BEDD958];
  if (v2 != MEMORY[0x24BEDD958] && v2 != 0)
  {
    if (*(char *)(v2 + 23) < 0)
      operator delete(*(void **)v2);
    this = (CLMicroLocationProto::ReceivedEventAction *)MEMORY[0x2426A04D4](v2, 0x1012C40EC159624);
  }
  v5 = *((_QWORD *)v1 + 3);
  if (v5 != v3 && v5 != 0)
  {
    if (*(char *)(v5 + 23) < 0)
      operator delete(*(void **)v5);
    this = (CLMicroLocationProto::ReceivedEventAction *)MEMORY[0x2426A04D4](v5, 0x1012C40EC159624);
  }
  v7 = *((_QWORD *)v1 + 4);
  if (v7 != v3 && v7 != 0)
  {
    if (*(char *)(v7 + 23) < 0)
      operator delete(*(void **)v7);
    this = (CLMicroLocationProto::ReceivedEventAction *)MEMORY[0x2426A04D4](v7, 0x1012C40EC159624);
  }
  CLMicroLocationProto::protobuf_AddDesc_microlocation_2eproto(this);
}

double CLMicroLocationProto::ReceivedEventAction::New(CLMicroLocationProto::ReceivedEventAction *this)
{
  _QWORD *v1;
  double result;
  uint64_t v3;

  v1 = (_QWORD *)operator new();
  *v1 = &off_2511D7370;
  *(_QWORD *)&result = 0x100000001;
  v1[1] = 0x100000001;
  v3 = MEMORY[0x24BEDD958];
  v1[2] = MEMORY[0x24BEDD958];
  v1[3] = v3;
  v1[4] = v3;
  v1[5] = 0;
  return result;
}

uint64_t CLMicroLocationProto::ReceivedEventAction::Clear(uint64_t this)
{
  char v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *(_BYTE *)(this + 44);
  if (v1)
  {
    *(_QWORD *)(this + 8) = 0x100000001;
    v2 = MEMORY[0x24BEDD958];
    if ((v1 & 4) != 0)
    {
      v3 = *(_QWORD *)(this + 16);
      if (v3 != MEMORY[0x24BEDD958])
      {
        if (*(char *)(v3 + 23) < 0)
        {
          **(_BYTE **)v3 = 0;
          *(_QWORD *)(v3 + 8) = 0;
        }
        else
        {
          *(_BYTE *)v3 = 0;
          *(_BYTE *)(v3 + 23) = 0;
        }
      }
    }
    if ((*(_BYTE *)(this + 44) & 8) != 0)
    {
      v4 = *(_QWORD *)(this + 24);
      if (v4 != v2)
      {
        if (*(char *)(v4 + 23) < 0)
        {
          **(_BYTE **)v4 = 0;
          *(_QWORD *)(v4 + 8) = 0;
        }
        else
        {
          *(_BYTE *)v4 = 0;
          *(_BYTE *)(v4 + 23) = 0;
        }
      }
    }
    if ((*(_BYTE *)(this + 44) & 0x10) != 0)
    {
      v5 = *(_QWORD *)(this + 32);
      if (v5 != v2)
      {
        if (*(char *)(v5 + 23) < 0)
        {
          **(_BYTE **)v5 = 0;
          *(_QWORD *)(v5 + 8) = 0;
        }
        else
        {
          *(_BYTE *)v5 = 0;
          *(_BYTE *)(v5 + 23) = 0;
        }
      }
    }
  }
  *(_DWORD *)(this + 44) = 0;
  return this;
}

uint64_t CLMicroLocationProto::ReceivedEventAction::MergePartialFromCodedStream(CLMicroLocationProto::ReceivedEventAction *this, wireless_diagnostics::google::protobuf::io::CodedInputStream *a2)
{
  uint64_t v4;
  char *v5;
  uint64_t TagFallback;
  int v7;
  char *v8;
  unsigned int v9;
  unint64_t v10;
  char *v11;
  BOOL v12;
  _BYTE *v13;
  unsigned int v14;
  _BYTE *v15;
  _QWORD *v16;
  _BYTE *v17;
  _QWORD *v18;
  _BYTE *v19;
  _QWORD *v20;
  uint64_t result;
  unsigned int v22;
  unsigned int v23;

  v4 = MEMORY[0x24BEDD958];
  while (2)
  {
    v5 = (char *)*((_QWORD *)a2 + 1);
    if ((unint64_t)v5 >= *((_QWORD *)a2 + 2) || *v5 < 0)
    {
      TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(a2);
      *((_DWORD *)a2 + 8) = TagFallback;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    else
    {
      TagFallback = *v5;
      *((_DWORD *)a2 + 8) = TagFallback;
      *((_QWORD *)a2 + 1) = v5 + 1;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    switch(TagFallback >> 3)
    {
      case 1u:
        v7 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_20;
        v23 = 0;
        v8 = (char *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v8 < *((_QWORD *)a2 + 2) && (*v8 & 0x80000000) == 0)
        {
          v9 = *v8;
          *((_QWORD *)a2 + 1) = v8 + 1;
LABEL_25:
          if (v9 - 31 < 0x19 || (v9 <= 0xE ? (v12 = ((1 << v9) & 0x76B6) == 0) : (v12 = 1), !v12))
          {
            if (v9 - 31 >= 0x19 && (v9 > 0xE || ((1 << v9) & 0x76B6) == 0))
              CLMicroLocationProto::ReceivedEventAction::MergeFrom();
            *((_DWORD *)this + 11) |= 1u;
            *((_DWORD *)this + 2) = v9;
          }
          v13 = (_BYTE *)*((_QWORD *)a2 + 1);
          v10 = *((_QWORD *)a2 + 2);
          if ((unint64_t)v13 < v10 && *v13 == 16)
          {
            v11 = v13 + 1;
            *((_QWORD *)a2 + 1) = v11;
            goto LABEL_37;
          }
          continue;
        }
        result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v23);
        if ((_DWORD)result)
        {
          v9 = v23;
          goto LABEL_25;
        }
        break;
      case 2u:
        v7 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_20;
        v11 = (char *)*((_QWORD *)a2 + 1);
        v10 = *((_QWORD *)a2 + 2);
LABEL_37:
        v22 = 0;
        if ((unint64_t)v11 >= v10 || *v11 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v22);
          if (!(_DWORD)result)
            return result;
          v14 = v22;
        }
        else
        {
          v14 = *v11;
          *((_QWORD *)a2 + 1) = v11 + 1;
        }
        if (v14 - 1 <= 3)
        {
          *((_DWORD *)this + 11) |= 2u;
          *((_DWORD *)this + 3) = v14;
        }
        v15 = (_BYTE *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v15 >= *((_QWORD *)a2 + 2) || *v15 != 26)
          continue;
        *((_QWORD *)a2 + 1) = v15 + 1;
LABEL_47:
        *((_DWORD *)this + 11) |= 4u;
        if (*((_QWORD *)this + 2) == v4)
        {
          v16 = (_QWORD *)operator new();
          v16[1] = 0;
          v16[2] = 0;
          *v16 = 0;
          *((_QWORD *)this + 2) = v16;
        }
        result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString();
        if (!(_DWORD)result)
          return result;
        v17 = (_BYTE *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v17 >= *((_QWORD *)a2 + 2) || *v17 != 34)
          continue;
        *((_QWORD *)a2 + 1) = v17 + 1;
LABEL_53:
        *((_DWORD *)this + 11) |= 8u;
        if (*((_QWORD *)this + 3) == v4)
        {
          v18 = (_QWORD *)operator new();
          v18[1] = 0;
          v18[2] = 0;
          *v18 = 0;
          *((_QWORD *)this + 3) = v18;
        }
        result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadBytes();
        if (!(_DWORD)result)
          return result;
        v19 = (_BYTE *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v19 >= *((_QWORD *)a2 + 2) || *v19 != 42)
          continue;
        *((_QWORD *)a2 + 1) = v19 + 1;
LABEL_59:
        *((_DWORD *)this + 11) |= 0x10u;
        if (*((_QWORD *)this + 4) == v4)
        {
          v20 = (_QWORD *)operator new();
          v20[1] = 0;
          v20[2] = 0;
          *v20 = 0;
          *((_QWORD *)this + 4) = v20;
        }
        result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadBytes();
        if (!(_DWORD)result)
          return result;
        if (*((_QWORD *)a2 + 1) != *((_QWORD *)a2 + 2)
          || !*((_DWORD *)a2 + 11) && *((_DWORD *)a2 + 6) != *((_DWORD *)a2 + 10))
        {
          continue;
        }
        *((_DWORD *)a2 + 8) = 0;
        result = 1;
        *((_BYTE *)a2 + 36) = 1;
        return result;
      case 3u:
        v7 = TagFallback & 7;
        if (v7 == 2)
          goto LABEL_47;
        goto LABEL_20;
      case 4u:
        v7 = TagFallback & 7;
        if (v7 != 2)
          goto LABEL_20;
        goto LABEL_53;
      case 5u:
        v7 = TagFallback & 7;
        if (v7 == 2)
          goto LABEL_59;
        goto LABEL_20;
      default:
        v7 = TagFallback & 7;
LABEL_20:
        if (v7 == 4)
          return 1;
        if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(a2, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback) & 1) != 0)continue;
        return 0;
    }
    return result;
  }
}

uint64_t CLMicroLocationProto::ReceivedEventAction::SerializeWithCachedSizes(uint64_t this, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  int v6;

  v5 = this;
  v6 = *(_DWORD *)(this + 44);
  if ((v6 & 1) != 0)
  {
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(unsigned int *)(this + 8), (uint64_t)a2, a4);
    v6 = *(_DWORD *)(v5 + 44);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0)
        goto LABEL_4;
      goto LABEL_9;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, *(unsigned int *)(v5 + 12), (uint64_t)a2, a4);
  v6 = *(_DWORD *)(v5 + 44);
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0)
      goto LABEL_5;
    goto LABEL_10;
  }
LABEL_9:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString();
  v6 = *(_DWORD *)(v5 + 44);
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0)
      return this;
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBytes();
  }
LABEL_10:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBytes();
  if ((*(_DWORD *)(v5 + 44) & 0x10) != 0)
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBytes();
  return this;
}

uint64_t CLMicroLocationProto::ReceivedEventAction::ByteSize(CLMicroLocationProto::ReceivedEventAction *this)
{
  int v2;
  uint64_t v3;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v4;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v5;
  int v6;
  uint64_t v7;
  int v8;
  char v9;
  uint64_t v10;
  unint64_t v11;
  int v12;
  uint64_t v13;
  int v14;
  char v15;
  uint64_t v16;
  unint64_t v17;
  int v18;
  uint64_t v19;
  int v20;
  char v21;
  uint64_t v22;
  unint64_t v23;
  int v24;

  LOBYTE(v2) = *((_BYTE *)this + 44);
  if (!(_BYTE)v2)
  {
    v3 = 0;
    goto LABEL_50;
  }
  if ((*((_BYTE *)this + 44) & 1) != 0)
  {
    v4 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 2);
    if ((v4 & 0x80000000) != 0)
    {
      v3 = 11;
      if ((v2 & 2) == 0)
        goto LABEL_19;
    }
    else if (v4 >= 0x80)
    {
      v3 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v4) + 1;
      v2 = *((_DWORD *)this + 11);
      if ((v2 & 2) == 0)
        goto LABEL_19;
    }
    else
    {
      v3 = 2;
      if ((v2 & 2) == 0)
        goto LABEL_19;
    }
  }
  else
  {
    v3 = 0;
    if ((*((_BYTE *)this + 44) & 2) == 0)
      goto LABEL_19;
  }
  v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 3);
  if ((v5 & 0x80000000) != 0)
  {
    v6 = 11;
  }
  else if (v5 >= 0x80)
  {
    v6 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v5) + 1;
    v2 = *((_DWORD *)this + 11);
  }
  else
  {
    v6 = 2;
  }
  v3 = (v6 + v3);
LABEL_19:
  if ((v2 & 4) != 0)
  {
    v7 = *((_QWORD *)this + 2);
    v8 = *(unsigned __int8 *)(v7 + 23);
    v9 = v8;
    v10 = *(_QWORD *)(v7 + 8);
    if ((v8 & 0x80u) == 0)
      v11 = *(unsigned __int8 *)(v7 + 23);
    else
      v11 = v10;
    if (v11 >= 0x80)
    {
      v12 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v11);
      v8 = *(unsigned __int8 *)(v7 + 23);
      v10 = *(_QWORD *)(v7 + 8);
      v2 = *((_DWORD *)this + 11);
      v9 = *(_BYTE *)(v7 + 23);
    }
    else
    {
      v12 = 1;
    }
    if (v9 < 0)
      v8 = v10;
    v3 = (v3 + v12 + v8 + 1);
    if ((v2 & 8) == 0)
    {
LABEL_21:
      if ((v2 & 0x10) == 0)
        goto LABEL_50;
      goto LABEL_41;
    }
  }
  else if ((v2 & 8) == 0)
  {
    goto LABEL_21;
  }
  v13 = *((_QWORD *)this + 3);
  v14 = *(unsigned __int8 *)(v13 + 23);
  v15 = v14;
  v16 = *(_QWORD *)(v13 + 8);
  if ((v14 & 0x80u) == 0)
    v17 = *(unsigned __int8 *)(v13 + 23);
  else
    v17 = v16;
  if (v17 >= 0x80)
  {
    v18 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v17);
    v14 = *(unsigned __int8 *)(v13 + 23);
    v16 = *(_QWORD *)(v13 + 8);
    v2 = *((_DWORD *)this + 11);
    v15 = *(_BYTE *)(v13 + 23);
  }
  else
  {
    v18 = 1;
  }
  if (v15 < 0)
    v14 = v16;
  v3 = (v3 + v18 + v14 + 1);
  if ((v2 & 0x10) != 0)
  {
LABEL_41:
    v19 = *((_QWORD *)this + 4);
    v20 = *(unsigned __int8 *)(v19 + 23);
    v21 = v20;
    v22 = *(_QWORD *)(v19 + 8);
    if ((v20 & 0x80u) == 0)
      v23 = *(unsigned __int8 *)(v19 + 23);
    else
      v23 = v22;
    if (v23 >= 0x80)
    {
      v24 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v23);
      v20 = *(unsigned __int8 *)(v19 + 23);
      v22 = *(_QWORD *)(v19 + 8);
      v21 = *(_BYTE *)(v19 + 23);
    }
    else
    {
      v24 = 1;
    }
    if (v21 < 0)
      v20 = v22;
    v3 = (v3 + v24 + v20 + 1);
  }
LABEL_50:
  *((_DWORD *)this + 10) = v3;
  return v3;
}

void CLMicroLocationProto::ReceivedEventAction::CheckTypeAndMergeFrom(CLMicroLocationProto::ReceivedEventAction *this, const wireless_diagnostics::google::protobuf::MessageLite *lpsrc)
{
  uint64_t v4;
  uint64_t v5;

  CLMicroLocationProto::ReceivedEventAction::MergeFrom(this, lpsrc);
}

void CLMicroLocationProto::ReceivedEventAction::CopyFrom(CLMicroLocationProto::ReceivedEventAction *this, const CLMicroLocationProto::ReceivedEventAction *a2)
{
  if (a2 != this)
  {
    (*(void (**)(CLMicroLocationProto::ReceivedEventAction *))(*(_QWORD *)this + 32))(this);
    CLMicroLocationProto::ReceivedEventAction::MergeFrom(this, a2);
  }
}

uint64_t CLMicroLocationProto::ReceivedEventAction::IsInitialized(CLMicroLocationProto::ReceivedEventAction *this)
{
  return 1;
}

_QWORD *CLMicroLocationProto::ReceivedEventAction::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CLMicroLocationProto.ReceivedEventAction");
}

void CLMicroLocationProto::RecordingRequest::MergeFrom(CLMicroLocationProto::RecordingRequest *this, const CLMicroLocationProto::RecordingRequest *a2)
{
  int v4;
  unsigned int v5;
  int v6;
  std::string *v7;
  const std::string *v8;
  std::string *v9;
  const std::string *v10;
  std::string *v11;
  const std::string *v12;
  std::string *v13;
  _BYTE v14[48];

  if (a2 == this)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v14);
  }
  LOBYTE(v4) = *((_BYTE *)a2 + 44);
  if ((_BYTE)v4)
  {
    if ((*((_BYTE *)a2 + 44) & 1) != 0)
    {
      v5 = *((_DWORD *)a2 + 2);
      if (v5 - 31 >= 0x19 && (v5 > 0xE || ((1 << v5) & 0x76B6) == 0))
        CLMicroLocationProto::RecordingRequest::MergeFrom();
      *((_DWORD *)this + 11) |= 1u;
      *((_DWORD *)this + 2) = v5;
      v4 = *((_DWORD *)a2 + 11);
    }
    if ((v4 & 2) != 0)
    {
      v6 = *((_DWORD *)a2 + 3);
      if ((v6 - 1) >= 2)
        CLMicroLocationProto::RecordingRequest::MergeFrom();
      *((_DWORD *)this + 11) |= 2u;
      *((_DWORD *)this + 3) = v6;
      v4 = *((_DWORD *)a2 + 11);
    }
    v7 = (std::string *)MEMORY[0x24BEDD958];
    if ((v4 & 4) != 0)
    {
      v8 = (const std::string *)*((_QWORD *)a2 + 2);
      *((_DWORD *)this + 11) |= 4u;
      v9 = (std::string *)*((_QWORD *)this + 2);
      if (v9 == v7)
      {
        v9 = (std::string *)operator new();
        v9->__r_.__value_.__l.__size_ = 0;
        v9->__r_.__value_.__r.__words[2] = 0;
        v9->__r_.__value_.__r.__words[0] = 0;
        *((_QWORD *)this + 2) = v9;
      }
      std::string::operator=(v9, v8);
      v4 = *((_DWORD *)a2 + 11);
      if ((v4 & 8) == 0)
      {
LABEL_14:
        if ((v4 & 0x10) == 0)
          return;
        goto LABEL_22;
      }
    }
    else if ((v4 & 8) == 0)
    {
      goto LABEL_14;
    }
    v10 = (const std::string *)*((_QWORD *)a2 + 3);
    *((_DWORD *)this + 11) |= 8u;
    v11 = (std::string *)*((_QWORD *)this + 3);
    if (v11 == v7)
    {
      v11 = (std::string *)operator new();
      v11->__r_.__value_.__l.__size_ = 0;
      v11->__r_.__value_.__r.__words[2] = 0;
      v11->__r_.__value_.__r.__words[0] = 0;
      *((_QWORD *)this + 3) = v11;
    }
    std::string::operator=(v11, v10);
    if ((*((_DWORD *)a2 + 11) & 0x10) != 0)
    {
LABEL_22:
      v12 = (const std::string *)*((_QWORD *)a2 + 4);
      *((_DWORD *)this + 11) |= 0x10u;
      v13 = (std::string *)*((_QWORD *)this + 4);
      if (v13 == v7)
      {
        v13 = (std::string *)operator new();
        v13->__r_.__value_.__l.__size_ = 0;
        v13->__r_.__value_.__r.__words[2] = 0;
        v13->__r_.__value_.__r.__words[0] = 0;
        *((_QWORD *)this + 4) = v13;
      }
      std::string::operator=(v13, v12);
    }
  }
}

void sub_241AC20B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void CLMicroLocationProto::RecordingRequest::~RecordingRequest(CLMicroLocationProto::RecordingRequest *this)
{
  *(_QWORD *)this = &off_2511D73E8;
  CLMicroLocationProto::ReceivedEventAction::SharedDtor(this);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

{
  CLMicroLocationProto::RecordingRequest::~RecordingRequest(this);
  JUMPOUT(0x2426A04D4);
}

double CLMicroLocationProto::RecordingRequest::New(CLMicroLocationProto::RecordingRequest *this)
{
  _QWORD *v1;
  double result;
  uint64_t v3;

  v1 = (_QWORD *)operator new();
  *v1 = &off_2511D73E8;
  *(_QWORD *)&result = 0x10000000DLL;
  v1[1] = 0x10000000DLL;
  v3 = MEMORY[0x24BEDD958];
  v1[2] = MEMORY[0x24BEDD958];
  v1[3] = v3;
  v1[4] = v3;
  v1[5] = 0;
  return result;
}

uint64_t CLMicroLocationProto::RecordingRequest::Clear(uint64_t this)
{
  char v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *(_BYTE *)(this + 44);
  if (v1)
  {
    *(_QWORD *)(this + 8) = 0x10000000DLL;
    v2 = MEMORY[0x24BEDD958];
    if ((v1 & 4) != 0)
    {
      v3 = *(_QWORD *)(this + 16);
      if (v3 != MEMORY[0x24BEDD958])
      {
        if (*(char *)(v3 + 23) < 0)
        {
          **(_BYTE **)v3 = 0;
          *(_QWORD *)(v3 + 8) = 0;
        }
        else
        {
          *(_BYTE *)v3 = 0;
          *(_BYTE *)(v3 + 23) = 0;
        }
      }
    }
    if ((*(_BYTE *)(this + 44) & 8) != 0)
    {
      v4 = *(_QWORD *)(this + 24);
      if (v4 != v2)
      {
        if (*(char *)(v4 + 23) < 0)
        {
          **(_BYTE **)v4 = 0;
          *(_QWORD *)(v4 + 8) = 0;
        }
        else
        {
          *(_BYTE *)v4 = 0;
          *(_BYTE *)(v4 + 23) = 0;
        }
      }
    }
    if ((*(_BYTE *)(this + 44) & 0x10) != 0)
    {
      v5 = *(_QWORD *)(this + 32);
      if (v5 != v2)
      {
        if (*(char *)(v5 + 23) < 0)
        {
          **(_BYTE **)v5 = 0;
          *(_QWORD *)(v5 + 8) = 0;
        }
        else
        {
          *(_BYTE *)v5 = 0;
          *(_BYTE *)(v5 + 23) = 0;
        }
      }
    }
  }
  *(_DWORD *)(this + 44) = 0;
  return this;
}

uint64_t CLMicroLocationProto::RecordingRequest::MergePartialFromCodedStream(CLMicroLocationProto::RecordingRequest *this, wireless_diagnostics::google::protobuf::io::CodedInputStream *a2)
{
  uint64_t v4;
  char *v5;
  uint64_t TagFallback;
  int v7;
  char *v8;
  unsigned int v9;
  unint64_t v10;
  char *v11;
  BOOL v12;
  _BYTE *v13;
  unsigned int v14;
  _BYTE *v15;
  _QWORD *v16;
  _BYTE *v17;
  _QWORD *v18;
  _BYTE *v19;
  _QWORD *v20;
  uint64_t result;
  unsigned int v22;
  unsigned int v23;

  v4 = MEMORY[0x24BEDD958];
  while (2)
  {
    v5 = (char *)*((_QWORD *)a2 + 1);
    if ((unint64_t)v5 >= *((_QWORD *)a2 + 2) || *v5 < 0)
    {
      TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(a2);
      *((_DWORD *)a2 + 8) = TagFallback;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    else
    {
      TagFallback = *v5;
      *((_DWORD *)a2 + 8) = TagFallback;
      *((_QWORD *)a2 + 1) = v5 + 1;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    switch(TagFallback >> 3)
    {
      case 1u:
        v7 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_20;
        v23 = 0;
        v8 = (char *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v8 < *((_QWORD *)a2 + 2) && (*v8 & 0x80000000) == 0)
        {
          v9 = *v8;
          *((_QWORD *)a2 + 1) = v8 + 1;
LABEL_25:
          if (v9 - 31 < 0x19 || (v9 <= 0xE ? (v12 = ((1 << v9) & 0x76B6) == 0) : (v12 = 1), !v12))
          {
            if (v9 - 31 >= 0x19 && (v9 > 0xE || ((1 << v9) & 0x76B6) == 0))
              CLMicroLocationProto::RecordingRequest::MergeFrom();
            *((_DWORD *)this + 11) |= 1u;
            *((_DWORD *)this + 2) = v9;
          }
          v13 = (_BYTE *)*((_QWORD *)a2 + 1);
          v10 = *((_QWORD *)a2 + 2);
          if ((unint64_t)v13 < v10 && *v13 == 16)
          {
            v11 = v13 + 1;
            *((_QWORD *)a2 + 1) = v11;
            goto LABEL_37;
          }
          continue;
        }
        result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v23);
        if ((_DWORD)result)
        {
          v9 = v23;
          goto LABEL_25;
        }
        break;
      case 2u:
        v7 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_20;
        v11 = (char *)*((_QWORD *)a2 + 1);
        v10 = *((_QWORD *)a2 + 2);
LABEL_37:
        v22 = 0;
        if ((unint64_t)v11 >= v10 || *v11 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v22);
          if (!(_DWORD)result)
            return result;
          v14 = v22;
        }
        else
        {
          v14 = *v11;
          *((_QWORD *)a2 + 1) = v11 + 1;
        }
        if (v14 - 1 <= 1)
        {
          *((_DWORD *)this + 11) |= 2u;
          *((_DWORD *)this + 3) = v14;
        }
        v15 = (_BYTE *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v15 >= *((_QWORD *)a2 + 2) || *v15 != 26)
          continue;
        *((_QWORD *)a2 + 1) = v15 + 1;
LABEL_47:
        *((_DWORD *)this + 11) |= 4u;
        if (*((_QWORD *)this + 2) == v4)
        {
          v16 = (_QWORD *)operator new();
          v16[1] = 0;
          v16[2] = 0;
          *v16 = 0;
          *((_QWORD *)this + 2) = v16;
        }
        result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString();
        if (!(_DWORD)result)
          return result;
        v17 = (_BYTE *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v17 >= *((_QWORD *)a2 + 2) || *v17 != 34)
          continue;
        *((_QWORD *)a2 + 1) = v17 + 1;
LABEL_53:
        *((_DWORD *)this + 11) |= 8u;
        if (*((_QWORD *)this + 3) == v4)
        {
          v18 = (_QWORD *)operator new();
          v18[1] = 0;
          v18[2] = 0;
          *v18 = 0;
          *((_QWORD *)this + 3) = v18;
        }
        result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadBytes();
        if (!(_DWORD)result)
          return result;
        v19 = (_BYTE *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v19 >= *((_QWORD *)a2 + 2) || *v19 != 42)
          continue;
        *((_QWORD *)a2 + 1) = v19 + 1;
LABEL_59:
        *((_DWORD *)this + 11) |= 0x10u;
        if (*((_QWORD *)this + 4) == v4)
        {
          v20 = (_QWORD *)operator new();
          v20[1] = 0;
          v20[2] = 0;
          *v20 = 0;
          *((_QWORD *)this + 4) = v20;
        }
        result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadBytes();
        if (!(_DWORD)result)
          return result;
        if (*((_QWORD *)a2 + 1) != *((_QWORD *)a2 + 2)
          || !*((_DWORD *)a2 + 11) && *((_DWORD *)a2 + 6) != *((_DWORD *)a2 + 10))
        {
          continue;
        }
        *((_DWORD *)a2 + 8) = 0;
        result = 1;
        *((_BYTE *)a2 + 36) = 1;
        return result;
      case 3u:
        v7 = TagFallback & 7;
        if (v7 == 2)
          goto LABEL_47;
        goto LABEL_20;
      case 4u:
        v7 = TagFallback & 7;
        if (v7 != 2)
          goto LABEL_20;
        goto LABEL_53;
      case 5u:
        v7 = TagFallback & 7;
        if (v7 == 2)
          goto LABEL_59;
        goto LABEL_20;
      default:
        v7 = TagFallback & 7;
LABEL_20:
        if (v7 == 4)
          return 1;
        if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(a2, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback) & 1) != 0)continue;
        return 0;
    }
    return result;
  }
}

uint64_t CLMicroLocationProto::RecordingRequest::SerializeWithCachedSizes(uint64_t this, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  int v6;

  v5 = this;
  v6 = *(_DWORD *)(this + 44);
  if ((v6 & 1) != 0)
  {
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(unsigned int *)(this + 8), (uint64_t)a2, a4);
    v6 = *(_DWORD *)(v5 + 44);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0)
        goto LABEL_4;
      goto LABEL_9;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, *(unsigned int *)(v5 + 12), (uint64_t)a2, a4);
  v6 = *(_DWORD *)(v5 + 44);
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0)
      goto LABEL_5;
    goto LABEL_10;
  }
LABEL_9:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString();
  v6 = *(_DWORD *)(v5 + 44);
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0)
      return this;
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBytes();
  }
LABEL_10:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBytes();
  if ((*(_DWORD *)(v5 + 44) & 0x10) != 0)
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBytes();
  return this;
}

uint64_t CLMicroLocationProto::RecordingRequest::ByteSize(CLMicroLocationProto::RecordingRequest *this)
{
  int v2;
  uint64_t v3;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v4;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v5;
  int v6;
  uint64_t v7;
  int v8;
  char v9;
  uint64_t v10;
  unint64_t v11;
  int v12;
  uint64_t v13;
  int v14;
  char v15;
  uint64_t v16;
  unint64_t v17;
  int v18;
  uint64_t v19;
  int v20;
  char v21;
  uint64_t v22;
  unint64_t v23;
  int v24;

  LOBYTE(v2) = *((_BYTE *)this + 44);
  if (!(_BYTE)v2)
  {
    v3 = 0;
    goto LABEL_50;
  }
  if ((*((_BYTE *)this + 44) & 1) != 0)
  {
    v4 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 2);
    if ((v4 & 0x80000000) != 0)
    {
      v3 = 11;
      if ((v2 & 2) == 0)
        goto LABEL_19;
    }
    else if (v4 >= 0x80)
    {
      v3 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v4) + 1;
      v2 = *((_DWORD *)this + 11);
      if ((v2 & 2) == 0)
        goto LABEL_19;
    }
    else
    {
      v3 = 2;
      if ((v2 & 2) == 0)
        goto LABEL_19;
    }
  }
  else
  {
    v3 = 0;
    if ((*((_BYTE *)this + 44) & 2) == 0)
      goto LABEL_19;
  }
  v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 3);
  if ((v5 & 0x80000000) != 0)
  {
    v6 = 11;
  }
  else if (v5 >= 0x80)
  {
    v6 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v5) + 1;
    v2 = *((_DWORD *)this + 11);
  }
  else
  {
    v6 = 2;
  }
  v3 = (v6 + v3);
LABEL_19:
  if ((v2 & 4) != 0)
  {
    v7 = *((_QWORD *)this + 2);
    v8 = *(unsigned __int8 *)(v7 + 23);
    v9 = v8;
    v10 = *(_QWORD *)(v7 + 8);
    if ((v8 & 0x80u) == 0)
      v11 = *(unsigned __int8 *)(v7 + 23);
    else
      v11 = v10;
    if (v11 >= 0x80)
    {
      v12 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v11);
      v8 = *(unsigned __int8 *)(v7 + 23);
      v10 = *(_QWORD *)(v7 + 8);
      v2 = *((_DWORD *)this + 11);
      v9 = *(_BYTE *)(v7 + 23);
    }
    else
    {
      v12 = 1;
    }
    if (v9 < 0)
      v8 = v10;
    v3 = (v3 + v12 + v8 + 1);
    if ((v2 & 8) == 0)
    {
LABEL_21:
      if ((v2 & 0x10) == 0)
        goto LABEL_50;
      goto LABEL_41;
    }
  }
  else if ((v2 & 8) == 0)
  {
    goto LABEL_21;
  }
  v13 = *((_QWORD *)this + 3);
  v14 = *(unsigned __int8 *)(v13 + 23);
  v15 = v14;
  v16 = *(_QWORD *)(v13 + 8);
  if ((v14 & 0x80u) == 0)
    v17 = *(unsigned __int8 *)(v13 + 23);
  else
    v17 = v16;
  if (v17 >= 0x80)
  {
    v18 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v17);
    v14 = *(unsigned __int8 *)(v13 + 23);
    v16 = *(_QWORD *)(v13 + 8);
    v2 = *((_DWORD *)this + 11);
    v15 = *(_BYTE *)(v13 + 23);
  }
  else
  {
    v18 = 1;
  }
  if (v15 < 0)
    v14 = v16;
  v3 = (v3 + v18 + v14 + 1);
  if ((v2 & 0x10) != 0)
  {
LABEL_41:
    v19 = *((_QWORD *)this + 4);
    v20 = *(unsigned __int8 *)(v19 + 23);
    v21 = v20;
    v22 = *(_QWORD *)(v19 + 8);
    if ((v20 & 0x80u) == 0)
      v23 = *(unsigned __int8 *)(v19 + 23);
    else
      v23 = v22;
    if (v23 >= 0x80)
    {
      v24 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v23);
      v20 = *(unsigned __int8 *)(v19 + 23);
      v22 = *(_QWORD *)(v19 + 8);
      v21 = *(_BYTE *)(v19 + 23);
    }
    else
    {
      v24 = 1;
    }
    if (v21 < 0)
      v20 = v22;
    v3 = (v3 + v24 + v20 + 1);
  }
LABEL_50:
  *((_DWORD *)this + 10) = v3;
  return v3;
}

void CLMicroLocationProto::RecordingRequest::CheckTypeAndMergeFrom(CLMicroLocationProto::RecordingRequest *this, const wireless_diagnostics::google::protobuf::MessageLite *lpsrc)
{
  uint64_t v4;
  uint64_t v5;

  CLMicroLocationProto::RecordingRequest::MergeFrom(this, lpsrc);
}

void CLMicroLocationProto::RecordingRequest::CopyFrom(CLMicroLocationProto::RecordingRequest *this, const CLMicroLocationProto::RecordingRequest *a2)
{
  if (a2 != this)
  {
    (*(void (**)(CLMicroLocationProto::RecordingRequest *))(*(_QWORD *)this + 32))(this);
    CLMicroLocationProto::RecordingRequest::MergeFrom(this, a2);
  }
}

uint64_t CLMicroLocationProto::RecordingRequest::IsInitialized(CLMicroLocationProto::RecordingRequest *this)
{
  return 1;
}

_QWORD *CLMicroLocationProto::RecordingRequest::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CLMicroLocationProto.RecordingRequest");
}

double CLMicroLocationProto::AppLaunch::New(CLMicroLocationProto::AppLaunch *this)
{
  uint64_t v1;
  double result;
  uint64_t v3;

  v1 = operator new();
  *(_QWORD *)&result = 2;
  *(_QWORD *)(v1 + 32) = 2;
  v3 = MEMORY[0x24BEDD958];
  *(_QWORD *)v1 = &off_2511D7460;
  *(_QWORD *)(v1 + 8) = v3;
  *(_QWORD *)(v1 + 16) = 0;
  *(_QWORD *)(v1 + 24) = v3;
  *(_DWORD *)(v1 + 40) = 0;
  return result;
}

uint64_t CLMicroLocationProto::AppLaunch::MergePartialFromCodedStream(CLMicroLocationProto::AppLaunch *this, wireless_diagnostics::google::protobuf::io::CodedInputStream *a2)
{
  uint64_t v4;
  char *v5;
  uint64_t TagFallback;
  int v7;
  char *v8;
  unsigned int v9;
  uint64_t result;
  BOOL v11;
  _BYTE *v12;
  _QWORD *v13;
  _BYTE *v14;
  uint64_t v15;
  char *v16;
  int v17;
  int v18;
  int v19;
  BOOL v20;
  int v21;
  _BYTE *v22;
  _QWORD *v23;
  unsigned int v24;
  unsigned int v25;

  v4 = MEMORY[0x24BEDD958];
  while (2)
  {
    v5 = (char *)*((_QWORD *)a2 + 1);
    if ((unint64_t)v5 >= *((_QWORD *)a2 + 2) || *v5 < 0)
    {
      TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(a2);
      *((_DWORD *)a2 + 8) = TagFallback;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    else
    {
      TagFallback = *v5;
      *((_DWORD *)a2 + 8) = TagFallback;
      *((_QWORD *)a2 + 1) = v5 + 1;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    switch(TagFallback >> 3)
    {
      case 1u:
        v7 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_19;
        v24 = 0;
        v8 = (char *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v8 >= *((_QWORD *)a2 + 2) || *v8 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v24);
          if (!(_DWORD)result)
            return result;
          v9 = v24;
        }
        else
        {
          v9 = *v8;
          *((_QWORD *)a2 + 1) = v8 + 1;
        }
        if (v9 - 31 < 0x19 || (v9 <= 0xE ? (v11 = ((1 << v9) & 0x76B6) == 0) : (v11 = 1), !v11))
        {
          if (v9 - 31 >= 0x19 && (v9 > 0xE || ((1 << v9) & 0x76B6) == 0))
            CLMicroLocationProto::AppLaunch::MergeFrom();
          *((_DWORD *)this + 10) |= 1u;
          *((_DWORD *)this + 8) = v9;
        }
        v12 = (_BYTE *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v12 < *((_QWORD *)a2 + 2) && *v12 == 18)
        {
          *((_QWORD *)a2 + 1) = v12 + 1;
          goto LABEL_36;
        }
        continue;
      case 2u:
        v7 = TagFallback & 7;
        if (v7 != 2)
          goto LABEL_19;
LABEL_36:
        *((_DWORD *)this + 10) |= 2u;
        if (*((_QWORD *)this + 1) == v4)
        {
          v13 = (_QWORD *)operator new();
          v13[1] = 0;
          v13[2] = 0;
          *v13 = 0;
          *((_QWORD *)this + 1) = v13;
        }
        result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString();
        if (!(_DWORD)result)
          return result;
        v14 = (_BYTE *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v14 >= *((_QWORD *)a2 + 2) || *v14 != 26)
          continue;
        *((_QWORD *)a2 + 1) = v14 + 1;
LABEL_42:
        *((_DWORD *)this + 10) |= 4u;
        v15 = *((_QWORD *)this + 2);
        if (!v15)
        {
          v15 = operator new();
          *(_QWORD *)v15 = &off_2511D72F8;
          *(_WORD *)(v15 + 8) = 0;
          *(_DWORD *)(v15 + 12) = 0;
          *(_DWORD *)(v15 + 16) = 0;
          *((_QWORD *)this + 2) = v15;
        }
        v25 = 0;
        v16 = (char *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v16 >= *((_QWORD *)a2 + 2) || *v16 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v25))return 0;
        }
        else
        {
          v25 = *v16;
          *((_QWORD *)a2 + 1) = v16 + 1;
        }
        v17 = *((_DWORD *)a2 + 14);
        v18 = *((_DWORD *)a2 + 15);
        *((_DWORD *)a2 + 14) = v17 + 1;
        if (v17 < v18)
        {
          wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(a2);
          if (CLMicroLocationProto::BundleIdFeatures::MergePartialFromCodedStream((CLMicroLocationProto::BundleIdFeatures *)v15, a2))
          {
            if (*((_BYTE *)a2 + 36))
            {
              wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(a2);
              v19 = *((_DWORD *)a2 + 14);
              v20 = __OFSUB__(v19, 1);
              v21 = v19 - 1;
              if (v21 < 0 == v20)
                *((_DWORD *)a2 + 14) = v21;
              v22 = (_BYTE *)*((_QWORD *)a2 + 1);
              if ((unint64_t)v22 < *((_QWORD *)a2 + 2) && *v22 == 34)
              {
                *((_QWORD *)a2 + 1) = v22 + 1;
LABEL_56:
                *((_DWORD *)this + 10) |= 8u;
                if (*((_QWORD *)this + 3) == v4)
                {
                  v23 = (_QWORD *)operator new();
                  v23[1] = 0;
                  v23[2] = 0;
                  *v23 = 0;
                  *((_QWORD *)this + 3) = v23;
                }
                result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString();
                if (!(_DWORD)result)
                  return result;
                if (*((_QWORD *)a2 + 1) == *((_QWORD *)a2 + 2)
                  && (*((_DWORD *)a2 + 11) || *((_DWORD *)a2 + 6) == *((_DWORD *)a2 + 10)))
                {
                  *((_DWORD *)a2 + 8) = 0;
                  result = 1;
                  *((_BYTE *)a2 + 36) = 1;
                  return result;
                }
              }
              continue;
            }
          }
        }
        return 0;
      case 3u:
        v7 = TagFallback & 7;
        if (v7 == 2)
          goto LABEL_42;
        goto LABEL_19;
      case 4u:
        v7 = TagFallback & 7;
        if (v7 == 2)
          goto LABEL_56;
        goto LABEL_19;
      default:
        v7 = TagFallback & 7;
LABEL_19:
        if (v7 == 4)
          return 1;
        if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(a2, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback) & 1) == 0)return 0;
        continue;
    }
  }
}

unsigned int *CLMicroLocationProto::AppLaunch::SerializeWithCachedSizes(unsigned int *this, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  unsigned int *v5;
  unsigned int v6;
  uint64_t v7;

  v5 = this;
  v6 = this[10];
  if ((v6 & 1) != 0)
  {
    this = (unsigned int *)wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, this[8], (uint64_t)a2, a4);
    v6 = v5[10];
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0)
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  this = (unsigned int *)wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString();
  v6 = v5[10];
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0)
      return this;
    return (unsigned int *)wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString();
  }
LABEL_8:
  v7 = *((_QWORD *)v5 + 2);
  if (!v7)
  {
    CLMicroLocationProto::protobuf_AddDesc_microlocation_2eproto((CLMicroLocationProto *)this);
    v7 = *(_QWORD *)(CLMicroLocationProto::AppLaunch::default_instance_ + 16);
  }
  this = (unsigned int *)wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, v7, a2, a4);
  if ((v5[10] & 8) != 0)
    return (unsigned int *)wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString();
  return this;
}

uint64_t CLMicroLocationProto::AppLaunch::ByteSize(uint64_t this)
{
  uint64_t v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  char v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  uint64_t v12;
  int v13;
  char v14;
  uint64_t v15;
  unint64_t v16;
  int v17;

  v1 = this;
  LOBYTE(v2) = *(_BYTE *)(this + 40);
  if (!(_BYTE)v2)
  {
    v3 = 0;
    goto LABEL_42;
  }
  if ((*(_BYTE *)(this + 40) & 1) != 0)
  {
    this = *(unsigned int *)(this + 32);
    if ((this & 0x80000000) != 0)
    {
      v3 = 11;
      if ((v2 & 2) == 0)
        goto LABEL_22;
    }
    else if (this >= 0x80)
    {
      this = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)this);
      v3 = (this + 1);
      v2 = *(_DWORD *)(v1 + 40);
      if ((v2 & 2) == 0)
        goto LABEL_22;
    }
    else
    {
      v3 = 2;
      if ((v2 & 2) == 0)
        goto LABEL_22;
    }
  }
  else
  {
    v3 = 0;
    if ((*(_BYTE *)(this + 40) & 2) == 0)
      goto LABEL_22;
  }
  v4 = *(_QWORD *)(v1 + 8);
  v5 = *(unsigned __int8 *)(v4 + 23);
  v6 = v5;
  v7 = *(_QWORD *)(v4 + 8);
  if ((v5 & 0x80u) == 0)
    v8 = *(unsigned __int8 *)(v4 + 23);
  else
    v8 = v7;
  if (v8 >= 0x80)
  {
    this = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v8);
    v5 = *(unsigned __int8 *)(v4 + 23);
    v7 = *(_QWORD *)(v4 + 8);
    v2 = *(_DWORD *)(v1 + 40);
    v6 = *(_BYTE *)(v4 + 23);
  }
  else
  {
    this = 1;
  }
  if (v6 < 0)
    v5 = v7;
  v3 = (v3 + this + v5 + 1);
LABEL_22:
  if ((v2 & 4) == 0)
  {
    if ((v2 & 8) == 0)
      goto LABEL_42;
    goto LABEL_33;
  }
  v9 = *(_QWORD *)(v1 + 16);
  if (!v9)
  {
    CLMicroLocationProto::protobuf_AddDesc_microlocation_2eproto((CLMicroLocationProto *)this);
    v9 = *(_QWORD *)(CLMicroLocationProto::AppLaunch::default_instance_ + 16);
  }
  v10 = 2 * (*(_DWORD *)(v9 + 16) & 1);
  if ((*(_DWORD *)(v9 + 16) & 2) != 0)
    v10 += 2;
  if (*(_DWORD *)(v9 + 16))
    v11 = v10;
  else
    v11 = 0;
  *(_DWORD *)(v9 + 12) = v11;
  v3 = (v3 + v11 + 2);
  if ((*(_DWORD *)(v1 + 40) & 8) != 0)
  {
LABEL_33:
    v12 = *(_QWORD *)(v1 + 24);
    v13 = *(unsigned __int8 *)(v12 + 23);
    v14 = v13;
    v15 = *(_QWORD *)(v12 + 8);
    if ((v13 & 0x80u) == 0)
      v16 = *(unsigned __int8 *)(v12 + 23);
    else
      v16 = v15;
    if (v16 >= 0x80)
    {
      v17 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v16);
      v13 = *(unsigned __int8 *)(v12 + 23);
      v15 = *(_QWORD *)(v12 + 8);
      v14 = *(_BYTE *)(v12 + 23);
    }
    else
    {
      v17 = 1;
    }
    if (v14 < 0)
      v13 = v15;
    v3 = (v3 + v17 + v13 + 1);
  }
LABEL_42:
  *(_DWORD *)(v1 + 36) = v3;
  return v3;
}

void CLMicroLocationProto::AppLaunch::CheckTypeAndMergeFrom(CLMicroLocationProto::AppLaunch *this, const wireless_diagnostics::google::protobuf::MessageLite *lpsrc)
{
  uint64_t v4;
  uint64_t v5;

  CLMicroLocationProto::AppLaunch::MergeFrom(this, lpsrc);
}

uint64_t CLMicroLocationProto::AppLaunch::IsInitialized(CLMicroLocationProto::AppLaunch *this)
{
  return 1;
}

_QWORD *CLMicroLocationProto::AppLaunch::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CLMicroLocationProto.AppLaunch");
}

void CLMicroLocationProto::BacklightOn::MergeFrom(CLMicroLocationProto::BacklightOn *this, const CLMicroLocationProto::BacklightOn *a2)
{
  int v4;
  unsigned int v5;
  const std::string *v6;
  std::string *v7;
  _BYTE v8[48];

  if (a2 == this)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v8);
  }
  LOBYTE(v4) = *((_BYTE *)a2 + 24);
  if ((_BYTE)v4)
  {
    if ((*((_BYTE *)a2 + 24) & 1) != 0)
    {
      v5 = *((_DWORD *)a2 + 4);
      if (v5 - 31 >= 0x19 && (v5 > 0xE || ((1 << v5) & 0x76B6) == 0))
        CLMicroLocationProto::BacklightOn::MergeFrom();
      *((_DWORD *)this + 6) |= 1u;
      *((_DWORD *)this + 4) = v5;
      v4 = *((_DWORD *)a2 + 6);
    }
    if ((v4 & 2) != 0)
    {
      v6 = (const std::string *)*((_QWORD *)a2 + 1);
      *((_DWORD *)this + 6) |= 2u;
      v7 = (std::string *)*((_QWORD *)this + 1);
      if (v7 == (std::string *)MEMORY[0x24BEDD958])
      {
        v7 = (std::string *)operator new();
        v7->__r_.__value_.__l.__size_ = 0;
        v7->__r_.__value_.__r.__words[2] = 0;
        v7->__r_.__value_.__r.__words[0] = 0;
        *((_QWORD *)this + 1) = v7;
      }
      std::string::operator=(v7, v6);
    }
  }
}

void sub_241AC307C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void CLMicroLocationProto::BacklightOn::~BacklightOn(CLMicroLocationProto::BacklightOn *this)
{
  *(_QWORD *)this = &off_2511D74D8;
  CLMicroLocationProto::ClusterRecordings::SharedDtor(this);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

{
  CLMicroLocationProto::BacklightOn::~BacklightOn(this);
  JUMPOUT(0x2426A04D4);
}

double CLMicroLocationProto::BacklightOn::New(CLMicroLocationProto::BacklightOn *this)
{
  uint64_t v1;
  double result;
  uint64_t v3;

  v1 = operator new();
  *(_QWORD *)&result = 4;
  *(_QWORD *)(v1 + 16) = 4;
  v3 = MEMORY[0x24BEDD958];
  *(_QWORD *)v1 = &off_2511D74D8;
  *(_QWORD *)(v1 + 8) = v3;
  *(_DWORD *)(v1 + 24) = 0;
  return result;
}

uint64_t CLMicroLocationProto::BacklightOn::Clear(uint64_t this)
{
  char v1;
  uint64_t v2;

  v1 = *(_BYTE *)(this + 24);
  if (v1)
  {
    *(_DWORD *)(this + 16) = 4;
    if ((v1 & 2) != 0)
    {
      v2 = *(_QWORD *)(this + 8);
      if (v2 != MEMORY[0x24BEDD958])
      {
        if (*(char *)(v2 + 23) < 0)
        {
          **(_BYTE **)v2 = 0;
          *(_QWORD *)(v2 + 8) = 0;
        }
        else
        {
          *(_BYTE *)v2 = 0;
          *(_BYTE *)(v2 + 23) = 0;
        }
      }
    }
  }
  *(_DWORD *)(this + 24) = 0;
  return this;
}

uint64_t CLMicroLocationProto::BacklightOn::MergePartialFromCodedStream(CLMicroLocationProto::BacklightOn *this, wireless_diagnostics::google::protobuf::io::CodedInputStream *a2)
{
  uint64_t v4;
  char *v5;
  uint64_t TagFallback;
  int v7;
  char *v8;
  unsigned int v9;
  BOOL v10;
  _BYTE *v12;
  _QWORD *v13;
  uint64_t result;
  unsigned int v15;

  v4 = MEMORY[0x24BEDD958];
  while (1)
  {
    while (1)
    {
      v5 = (char *)*((_QWORD *)a2 + 1);
      if ((unint64_t)v5 >= *((_QWORD *)a2 + 2) || *v5 < 0)
      {
        TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(a2);
        *((_DWORD *)a2 + 8) = TagFallback;
        if (!(_DWORD)TagFallback)
          return 1;
      }
      else
      {
        TagFallback = *v5;
        *((_DWORD *)a2 + 8) = TagFallback;
        *((_QWORD *)a2 + 1) = v5 + 1;
        if (!(_DWORD)TagFallback)
          return 1;
      }
      if (TagFallback >> 3 != 1)
        break;
      v7 = TagFallback & 7;
      if ((TagFallback & 7) != 0)
        goto LABEL_16;
      v15 = 0;
      v8 = (char *)*((_QWORD *)a2 + 1);
      if ((unint64_t)v8 >= *((_QWORD *)a2 + 2) || *v8 < 0)
      {
        result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v15);
        if (!(_DWORD)result)
          return result;
        v9 = v15;
      }
      else
      {
        v9 = *v8;
        *((_QWORD *)a2 + 1) = v8 + 1;
      }
      if (v9 - 31 < 0x19 || (v9 <= 0xE ? (v10 = ((1 << v9) & 0x76B6) == 0) : (v10 = 1), !v10))
      {
        if (v9 - 31 >= 0x19 && (v9 > 0xE || ((1 << v9) & 0x76B6) == 0))
          CLMicroLocationProto::BacklightOn::MergeFrom();
        *((_DWORD *)this + 6) |= 1u;
        *((_DWORD *)this + 4) = v9;
      }
      v12 = (_BYTE *)*((_QWORD *)a2 + 1);
      if ((unint64_t)v12 < *((_QWORD *)a2 + 2) && *v12 == 18)
      {
        *((_QWORD *)a2 + 1) = v12 + 1;
LABEL_35:
        *((_DWORD *)this + 6) |= 2u;
        if (*((_QWORD *)this + 1) == v4)
        {
          v13 = (_QWORD *)operator new();
          v13[1] = 0;
          v13[2] = 0;
          *v13 = 0;
          *((_QWORD *)this + 1) = v13;
        }
        result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString();
        if (!(_DWORD)result)
          return result;
        if (*((_QWORD *)a2 + 1) == *((_QWORD *)a2 + 2)
          && (*((_DWORD *)a2 + 11) || *((_DWORD *)a2 + 6) == *((_DWORD *)a2 + 10)))
        {
          *((_DWORD *)a2 + 8) = 0;
          result = 1;
          *((_BYTE *)a2 + 36) = 1;
          return result;
        }
      }
    }
    if (TagFallback >> 3 == 2)
    {
      v7 = TagFallback & 7;
      if (v7 == 2)
        goto LABEL_35;
    }
    else
    {
      v7 = TagFallback & 7;
    }
LABEL_16:
    if (v7 == 4)
      return 1;
    if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(a2, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback) & 1) == 0)return 0;
  }
}

uint64_t CLMicroLocationProto::BacklightOn::SerializeWithCachedSizes(uint64_t this, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v4;
  int v5;

  v4 = this;
  v5 = *(_DWORD *)(this + 24);
  if ((v5 & 1) != 0)
  {
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(unsigned int *)(this + 16), (uint64_t)a2, a4);
    v5 = *(_DWORD *)(v4 + 24);
  }
  if ((v5 & 2) != 0)
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString();
  return this;
}

uint64_t CLMicroLocationProto::BacklightOn::ByteSize(CLMicroLocationProto::BacklightOn *this)
{
  char v2;
  uint64_t v3;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v4;
  uint64_t v5;
  int v6;
  char v7;
  uint64_t v8;
  unint64_t v9;
  int v10;

  v2 = *((_BYTE *)this + 24);
  if (v2)
  {
    if ((*((_BYTE *)this + 24) & 1) != 0)
    {
      v4 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 4);
      if ((v4 & 0x80000000) != 0)
      {
        v3 = 11;
        if ((v2 & 2) == 0)
          goto LABEL_22;
      }
      else if (v4 >= 0x80)
      {
        v3 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v4) + 1;
        if ((*((_DWORD *)this + 6) & 2) == 0)
          goto LABEL_22;
      }
      else
      {
        v3 = 2;
        if ((v2 & 2) == 0)
          goto LABEL_22;
      }
    }
    else
    {
      v3 = 0;
      if ((*((_BYTE *)this + 24) & 2) == 0)
        goto LABEL_22;
    }
    v5 = *((_QWORD *)this + 1);
    v6 = *(unsigned __int8 *)(v5 + 23);
    v7 = v6;
    v8 = *(_QWORD *)(v5 + 8);
    if ((v6 & 0x80u) == 0)
      v9 = *(unsigned __int8 *)(v5 + 23);
    else
      v9 = v8;
    if (v9 >= 0x80)
    {
      v10 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v9);
      v6 = *(unsigned __int8 *)(v5 + 23);
      v8 = *(_QWORD *)(v5 + 8);
      v7 = *(_BYTE *)(v5 + 23);
    }
    else
    {
      v10 = 1;
    }
    if (v7 < 0)
      v6 = v8;
    v3 = (v3 + v10 + v6 + 1);
  }
  else
  {
    v3 = 0;
  }
LABEL_22:
  *((_DWORD *)this + 5) = v3;
  return v3;
}

void CLMicroLocationProto::BacklightOn::CheckTypeAndMergeFrom(CLMicroLocationProto::BacklightOn *this, const wireless_diagnostics::google::protobuf::MessageLite *lpsrc)
{
  uint64_t v4;
  uint64_t v5;

  CLMicroLocationProto::BacklightOn::MergeFrom(this, lpsrc);
}

void CLMicroLocationProto::BacklightOn::CopyFrom(CLMicroLocationProto::BacklightOn *this, const CLMicroLocationProto::BacklightOn *a2)
{
  if (a2 != this)
  {
    (*(void (**)(CLMicroLocationProto::BacklightOn *))(*(_QWORD *)this + 32))(this);
    CLMicroLocationProto::BacklightOn::MergeFrom(this, a2);
  }
}

uint64_t CLMicroLocationProto::BacklightOn::IsInitialized(CLMicroLocationProto::BacklightOn *this)
{
  return 1;
}

_QWORD *CLMicroLocationProto::BacklightOn::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CLMicroLocationProto.BacklightOn");
}

void CLMicroLocationProto::BatteryChargerConnected::MergeFrom(CLMicroLocationProto::BatteryChargerConnected *this, const CLMicroLocationProto::BatteryChargerConnected *a2)
{
  unsigned int v4;
  _BYTE v6[48];

  if (a2 == this)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v6);
  }
  if ((*((_BYTE *)a2 + 16) & 1) != 0)
  {
    v4 = *((_DWORD *)a2 + 2);
    if (v4 - 31 >= 0x19 && (v4 > 0xE || ((1 << v4) & 0x76B6) == 0))
      CLMicroLocationProto::BatteryChargerConnected::MergeFrom();
    *((_DWORD *)this + 4) |= 1u;
    *((_DWORD *)this + 2) = v4;
  }
}

void sub_241AC3618(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void CLMicroLocationProto::BatteryChargerConnected::~BatteryChargerConnected(CLMicroLocationProto::BatteryChargerConnected *this)
{
  *(_QWORD *)this = &off_2511D7550;
  CLMicroLocationProto::protobuf_AddDesc_microlocation_2eproto(this);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

{
  CLMicroLocationProto::BatteryChargerConnected::~BatteryChargerConnected(this);
  JUMPOUT(0x2426A04D4);
}

double CLMicroLocationProto::BatteryChargerConnected::New(CLMicroLocationProto::BatteryChargerConnected *this)
{
  uint64_t v1;
  double result;

  v1 = operator new();
  *(_QWORD *)v1 = &off_2511D7550;
  *(_QWORD *)&result = 5;
  *(_QWORD *)(v1 + 8) = 5;
  *(_DWORD *)(v1 + 16) = 0;
  return result;
}

uint64_t CLMicroLocationProto::BatteryChargerConnected::Clear(uint64_t this)
{
  if (*(_BYTE *)(this + 16))
    *(_DWORD *)(this + 8) = 5;
  *(_DWORD *)(this + 16) = 0;
  return this;
}

uint64_t CLMicroLocationProto::BatteryChargerConnected::MergePartialFromCodedStream(CLMicroLocationProto::BatteryChargerConnected *this, wireless_diagnostics::google::protobuf::io::CodedInputStream *a2)
{
  char *v4;
  uint64_t TagFallback;
  char *v6;
  unsigned int v7;
  BOOL v8;
  uint64_t result;
  unsigned int v11;

  while (1)
  {
    while (1)
    {
      v4 = (char *)*((_QWORD *)a2 + 1);
      if ((unint64_t)v4 >= *((_QWORD *)a2 + 2) || *v4 < 0)
      {
        TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(a2);
        *((_DWORD *)a2 + 8) = TagFallback;
      }
      else
      {
        TagFallback = *v4;
        *((_DWORD *)a2 + 8) = TagFallback;
        *((_QWORD *)a2 + 1) = v4 + 1;
      }
      if ((_DWORD)TagFallback != 8)
        break;
      v11 = 0;
      v6 = (char *)*((_QWORD *)a2 + 1);
      if ((unint64_t)v6 >= *((_QWORD *)a2 + 2) || *v6 < 0)
      {
        result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v11);
        if (!(_DWORD)result)
          return result;
        v7 = v11;
      }
      else
      {
        v7 = *v6;
        *((_QWORD *)a2 + 1) = v6 + 1;
      }
      if (v7 - 31 < 0x19 || (v7 <= 0xE ? (v8 = ((1 << v7) & 0x76B6) == 0) : (v8 = 1), !v8))
      {
        if (v7 - 31 >= 0x19 && (v7 > 0xE || ((1 << v7) & 0x76B6) == 0))
          CLMicroLocationProto::BatteryChargerConnected::MergeFrom();
        *((_DWORD *)this + 4) |= 1u;
        *((_DWORD *)this + 2) = v7;
      }
      if (*((_QWORD *)a2 + 1) == *((_QWORD *)a2 + 2)
        && (*((_DWORD *)a2 + 11) || *((_DWORD *)a2 + 6) == *((_DWORD *)a2 + 10)))
      {
        *((_DWORD *)a2 + 8) = 0;
        result = 1;
        *((_BYTE *)a2 + 36) = 1;
        return result;
      }
    }
    if (!(_DWORD)TagFallback || (TagFallback & 7) == 4)
      break;
    if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(a2, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback) & 1) == 0)return 0;
  }
  return 1;
}

uint64_t CLMicroLocationProto::BatteryChargerConnected::SerializeWithCachedSizes(uint64_t this, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  if ((*(_BYTE *)(this + 16) & 1) != 0)
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(unsigned int *)(this + 8), (uint64_t)a2, a4);
  return this;
}

uint64_t CLMicroLocationProto::BatteryChargerConnected::ByteSize(CLMicroLocationProto::BatteryChargerConnected *this)
{
  uint64_t result;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v3;

  if ((*((_BYTE *)this + 16) & 1) != 0)
  {
    v3 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 2);
    if ((v3 & 0x80000000) != 0)
    {
      result = 11;
    }
    else if (v3 >= 0x80)
    {
      result = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v3) + 1;
    }
    else
    {
      result = 2;
    }
  }
  else
  {
    result = 0;
  }
  *((_DWORD *)this + 3) = result;
  return result;
}

void CLMicroLocationProto::BatteryChargerConnected::CheckTypeAndMergeFrom(CLMicroLocationProto::BatteryChargerConnected *this, const wireless_diagnostics::google::protobuf::MessageLite *lpsrc)
{
  uint64_t v4;
  uint64_t v5;

  CLMicroLocationProto::BatteryChargerConnected::MergeFrom(this, lpsrc);
}

void CLMicroLocationProto::BatteryChargerConnected::CopyFrom(CLMicroLocationProto::BatteryChargerConnected *this, const CLMicroLocationProto::BatteryChargerConnected *a2)
{
  if (a2 != this)
  {
    (*(void (**)(CLMicroLocationProto::BatteryChargerConnected *))(*(_QWORD *)this + 32))(this);
    CLMicroLocationProto::BatteryChargerConnected::MergeFrom(this, a2);
  }
}

uint64_t CLMicroLocationProto::BatteryChargerConnected::IsInitialized(CLMicroLocationProto::BatteryChargerConnected *this)
{
  return 1;
}

_QWORD *CLMicroLocationProto::BatteryChargerConnected::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CLMicroLocationProto.BatteryChargerConnected");
}

void CLMicroLocationProto::TruthLabelDonation::MergeFrom(CLMicroLocationProto::TruthLabelDonation *this, const CLMicroLocationProto::TruthLabelDonation *a2)
{
  int v4;
  unsigned int v5;
  const std::string *v6;
  std::string *v7;
  const std::string *v8;
  std::string *v9;
  const std::string *v10;
  std::string *v11;
  _BYTE v12[48];

  if (a2 == this)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v12);
  }
  LOBYTE(v4) = *((_BYTE *)a2 + 40);
  if ((_BYTE)v4)
  {
    if ((*((_BYTE *)a2 + 40) & 1) != 0)
    {
      v5 = *((_DWORD *)a2 + 8);
      if (v5 - 31 >= 0x19 && (v5 > 0xE || ((1 << v5) & 0x76B6) == 0))
        CLMicroLocationProto::TruthLabelDonation::MergeFrom();
      *((_DWORD *)this + 10) |= 1u;
      *((_DWORD *)this + 8) = v5;
      v4 = *((_DWORD *)a2 + 10);
    }
    if ((v4 & 2) != 0)
    {
      v6 = (const std::string *)*((_QWORD *)a2 + 1);
      *((_DWORD *)this + 10) |= 2u;
      v7 = (std::string *)*((_QWORD *)this + 1);
      if (v7 == (std::string *)MEMORY[0x24BEDD958])
      {
        v7 = (std::string *)operator new();
        v7->__r_.__value_.__l.__size_ = 0;
        v7->__r_.__value_.__r.__words[2] = 0;
        v7->__r_.__value_.__r.__words[0] = 0;
        *((_QWORD *)this + 1) = v7;
      }
      std::string::operator=(v7, v6);
      v4 = *((_DWORD *)a2 + 10);
      if ((v4 & 4) == 0)
      {
LABEL_11:
        if ((v4 & 8) == 0)
          return;
        goto LABEL_19;
      }
    }
    else if ((v4 & 4) == 0)
    {
      goto LABEL_11;
    }
    v8 = (const std::string *)*((_QWORD *)a2 + 2);
    *((_DWORD *)this + 10) |= 4u;
    v9 = (std::string *)*((_QWORD *)this + 2);
    if (v9 == (std::string *)MEMORY[0x24BEDD958])
    {
      v9 = (std::string *)operator new();
      v9->__r_.__value_.__l.__size_ = 0;
      v9->__r_.__value_.__r.__words[2] = 0;
      v9->__r_.__value_.__r.__words[0] = 0;
      *((_QWORD *)this + 2) = v9;
    }
    std::string::operator=(v9, v8);
    if ((*((_DWORD *)a2 + 10) & 8) != 0)
    {
LABEL_19:
      v10 = (const std::string *)*((_QWORD *)a2 + 3);
      *((_DWORD *)this + 10) |= 8u;
      v11 = (std::string *)*((_QWORD *)this + 3);
      if (v11 == (std::string *)MEMORY[0x24BEDD958])
      {
        v11 = (std::string *)operator new();
        v11->__r_.__value_.__l.__size_ = 0;
        v11->__r_.__value_.__r.__words[2] = 0;
        v11->__r_.__value_.__r.__words[0] = 0;
        *((_QWORD *)this + 3) = v11;
      }
      std::string::operator=(v11, v10);
    }
  }
}

void sub_241AC3B38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void CLMicroLocationProto::TruthLabelDonation::~TruthLabelDonation(CLMicroLocationProto::TruthLabelDonation *this)
{
  *(_QWORD *)this = &off_2511D75C8;
  CLMicroLocationProto::TruthLabelDonation::SharedDtor(this);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

{
  CLMicroLocationProto::TruthLabelDonation::~TruthLabelDonation(this);
  JUMPOUT(0x2426A04D4);
}

void CLMicroLocationProto::TruthLabelDonation::SharedDtor(CLMicroLocationProto::TruthLabelDonation *this)
{
  CLMicroLocationProto::TruthLabelDonation *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v7;

  v1 = this;
  v2 = *((_QWORD *)this + 1);
  v3 = MEMORY[0x24BEDD958];
  if (v2 != MEMORY[0x24BEDD958] && v2 != 0)
  {
    if (*(char *)(v2 + 23) < 0)
      operator delete(*(void **)v2);
    this = (CLMicroLocationProto::TruthLabelDonation *)MEMORY[0x2426A04D4](v2, 0x1012C40EC159624);
  }
  v5 = *((_QWORD *)v1 + 2);
  if (v5 != v3 && v5 != 0)
  {
    if (*(char *)(v5 + 23) < 0)
      operator delete(*(void **)v5);
    this = (CLMicroLocationProto::TruthLabelDonation *)MEMORY[0x2426A04D4](v5, 0x1012C40EC159624);
  }
  v7 = *((_QWORD *)v1 + 3);
  if (v7 != v3 && v7 != 0)
  {
    if (*(char *)(v7 + 23) < 0)
      operator delete(*(void **)v7);
    this = (CLMicroLocationProto::TruthLabelDonation *)MEMORY[0x2426A04D4](v7, 0x1012C40EC159624);
  }
  CLMicroLocationProto::protobuf_AddDesc_microlocation_2eproto(this);
}

double CLMicroLocationProto::TruthLabelDonation::New(CLMicroLocationProto::TruthLabelDonation *this)
{
  uint64_t v1;
  double result;
  uint64_t v3;

  v1 = operator new();
  *(_QWORD *)&result = 14;
  *(_QWORD *)(v1 + 32) = 14;
  v3 = MEMORY[0x24BEDD958];
  *(_QWORD *)v1 = &off_2511D75C8;
  *(_QWORD *)(v1 + 8) = v3;
  *(_QWORD *)(v1 + 16) = v3;
  *(_QWORD *)(v1 + 24) = v3;
  *(_DWORD *)(v1 + 40) = 0;
  return result;
}

uint64_t CLMicroLocationProto::TruthLabelDonation::Clear(uint64_t this)
{
  char v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *(_BYTE *)(this + 40);
  if (v1)
  {
    *(_DWORD *)(this + 32) = 14;
    v2 = MEMORY[0x24BEDD958];
    if ((v1 & 2) != 0)
    {
      v3 = *(_QWORD *)(this + 8);
      if (v3 != MEMORY[0x24BEDD958])
      {
        if (*(char *)(v3 + 23) < 0)
        {
          **(_BYTE **)v3 = 0;
          *(_QWORD *)(v3 + 8) = 0;
        }
        else
        {
          *(_BYTE *)v3 = 0;
          *(_BYTE *)(v3 + 23) = 0;
        }
      }
    }
    if ((*(_BYTE *)(this + 40) & 4) != 0)
    {
      v4 = *(_QWORD *)(this + 16);
      if (v4 != v2)
      {
        if (*(char *)(v4 + 23) < 0)
        {
          **(_BYTE **)v4 = 0;
          *(_QWORD *)(v4 + 8) = 0;
        }
        else
        {
          *(_BYTE *)v4 = 0;
          *(_BYTE *)(v4 + 23) = 0;
        }
      }
    }
    if ((*(_BYTE *)(this + 40) & 8) != 0)
    {
      v5 = *(_QWORD *)(this + 24);
      if (v5 != v2)
      {
        if (*(char *)(v5 + 23) < 0)
        {
          **(_BYTE **)v5 = 0;
          *(_QWORD *)(v5 + 8) = 0;
        }
        else
        {
          *(_BYTE *)v5 = 0;
          *(_BYTE *)(v5 + 23) = 0;
        }
      }
    }
  }
  *(_DWORD *)(this + 40) = 0;
  return this;
}

uint64_t CLMicroLocationProto::TruthLabelDonation::MergePartialFromCodedStream(CLMicroLocationProto::TruthLabelDonation *this, wireless_diagnostics::google::protobuf::io::CodedInputStream *a2)
{
  uint64_t v4;
  char *v5;
  uint64_t TagFallback;
  int v7;
  char *v8;
  unsigned int v9;
  BOOL v10;
  _BYTE *v11;
  _QWORD *v12;
  _BYTE *v13;
  _QWORD *v14;
  _BYTE *v15;
  _QWORD *v16;
  uint64_t result;
  unsigned int v18;

  v4 = MEMORY[0x24BEDD958];
  while (2)
  {
    v5 = (char *)*((_QWORD *)a2 + 1);
    if ((unint64_t)v5 < *((_QWORD *)a2 + 2) && (*v5 & 0x80000000) == 0)
    {
      TagFallback = *v5;
      *((_DWORD *)a2 + 8) = TagFallback;
      *((_QWORD *)a2 + 1) = v5 + 1;
      if (!(_DWORD)TagFallback)
        return 1;
LABEL_7:
      switch(TagFallback >> 3)
      {
        case 1u:
          v7 = TagFallback & 7;
          if ((TagFallback & 7) != 0)
            goto LABEL_19;
          v18 = 0;
          v8 = (char *)*((_QWORD *)a2 + 1);
          if ((unint64_t)v8 >= *((_QWORD *)a2 + 2) || *v8 < 0)
          {
            result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v18);
            if (!(_DWORD)result)
              return result;
            v9 = v18;
          }
          else
          {
            v9 = *v8;
            *((_QWORD *)a2 + 1) = v8 + 1;
          }
          if (v9 - 31 < 0x19 || (v9 <= 0xE ? (v10 = ((1 << v9) & 0x76B6) == 0) : (v10 = 1), !v10))
          {
            if (v9 - 31 >= 0x19 && (v9 > 0xE || ((1 << v9) & 0x76B6) == 0))
              CLMicroLocationProto::TruthLabelDonation::MergeFrom();
            *((_DWORD *)this + 10) |= 1u;
            *((_DWORD *)this + 8) = v9;
          }
          v11 = (_BYTE *)*((_QWORD *)a2 + 1);
          if ((unint64_t)v11 < *((_QWORD *)a2 + 2) && *v11 == 18)
          {
            *((_QWORD *)a2 + 1) = v11 + 1;
            goto LABEL_36;
          }
          continue;
        case 2u:
          v7 = TagFallback & 7;
          if (v7 != 2)
            goto LABEL_19;
LABEL_36:
          *((_DWORD *)this + 10) |= 2u;
          if (*((_QWORD *)this + 1) == v4)
          {
            v12 = (_QWORD *)operator new();
            v12[1] = 0;
            v12[2] = 0;
            *v12 = 0;
            *((_QWORD *)this + 1) = v12;
          }
          result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString();
          if (!(_DWORD)result)
            return result;
          v13 = (_BYTE *)*((_QWORD *)a2 + 1);
          if ((unint64_t)v13 >= *((_QWORD *)a2 + 2) || *v13 != 26)
            continue;
          *((_QWORD *)a2 + 1) = v13 + 1;
LABEL_42:
          *((_DWORD *)this + 10) |= 4u;
          if (*((_QWORD *)this + 2) == v4)
          {
            v14 = (_QWORD *)operator new();
            v14[1] = 0;
            v14[2] = 0;
            *v14 = 0;
            *((_QWORD *)this + 2) = v14;
          }
          result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadBytes();
          if (!(_DWORD)result)
            return result;
          v15 = (_BYTE *)*((_QWORD *)a2 + 1);
          if ((unint64_t)v15 >= *((_QWORD *)a2 + 2) || *v15 != 34)
            continue;
          *((_QWORD *)a2 + 1) = v15 + 1;
LABEL_48:
          *((_DWORD *)this + 10) |= 8u;
          if (*((_QWORD *)this + 3) == v4)
          {
            v16 = (_QWORD *)operator new();
            v16[1] = 0;
            v16[2] = 0;
            *v16 = 0;
            *((_QWORD *)this + 3) = v16;
          }
          result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadBytes();
          if (!(_DWORD)result)
            return result;
          if (*((_QWORD *)a2 + 1) != *((_QWORD *)a2 + 2)
            || !*((_DWORD *)a2 + 11) && *((_DWORD *)a2 + 6) != *((_DWORD *)a2 + 10))
          {
            continue;
          }
          *((_DWORD *)a2 + 8) = 0;
          result = 1;
          *((_BYTE *)a2 + 36) = 1;
          return result;
        case 3u:
          v7 = TagFallback & 7;
          if (v7 == 2)
            goto LABEL_42;
          goto LABEL_19;
        case 4u:
          v7 = TagFallback & 7;
          if (v7 == 2)
            goto LABEL_48;
          goto LABEL_19;
        default:
          v7 = TagFallback & 7;
LABEL_19:
          if (v7 == 4)
            return 1;
          if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(a2, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback) & 1) != 0)continue;
          return 0;
      }
    }
    break;
  }
  TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(a2);
  *((_DWORD *)a2 + 8) = TagFallback;
  if ((_DWORD)TagFallback)
    goto LABEL_7;
  return 1;
}

uint64_t CLMicroLocationProto::TruthLabelDonation::SerializeWithCachedSizes(uint64_t this, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v4;
  int v5;

  v4 = this;
  v5 = *(_DWORD *)(this + 40);
  if ((v5 & 1) != 0)
  {
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(unsigned int *)(this + 32), (uint64_t)a2, a4);
    v5 = *(_DWORD *)(v4 + 40);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0)
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  else if ((v5 & 2) == 0)
  {
    goto LABEL_3;
  }
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString();
  v5 = *(_DWORD *)(v4 + 40);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0)
      return this;
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBytes();
  }
LABEL_8:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBytes();
  if ((*(_DWORD *)(v4 + 40) & 8) != 0)
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBytes();
  return this;
}

uint64_t CLMicroLocationProto::TruthLabelDonation::ByteSize(CLMicroLocationProto::TruthLabelDonation *this)
{
  int v2;
  uint64_t v3;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v4;
  uint64_t v5;
  int v6;
  char v7;
  uint64_t v8;
  unint64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  char v13;
  uint64_t v14;
  unint64_t v15;
  int v16;
  uint64_t v17;
  int v18;
  char v19;
  uint64_t v20;
  unint64_t v21;
  int v22;

  LOBYTE(v2) = *((_BYTE *)this + 40);
  if (!(_BYTE)v2)
  {
    v3 = 0;
    goto LABEL_43;
  }
  if ((*((_BYTE *)this + 40) & 1) != 0)
  {
    v4 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 8);
    if ((v4 & 0x80000000) != 0)
    {
      v3 = 11;
      if ((v2 & 2) == 0)
        goto LABEL_22;
    }
    else if (v4 >= 0x80)
    {
      v3 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v4) + 1;
      v2 = *((_DWORD *)this + 10);
      if ((v2 & 2) == 0)
        goto LABEL_22;
    }
    else
    {
      v3 = 2;
      if ((v2 & 2) == 0)
        goto LABEL_22;
    }
  }
  else
  {
    v3 = 0;
    if ((*((_BYTE *)this + 40) & 2) == 0)
      goto LABEL_22;
  }
  v5 = *((_QWORD *)this + 1);
  v6 = *(unsigned __int8 *)(v5 + 23);
  v7 = v6;
  v8 = *(_QWORD *)(v5 + 8);
  if ((v6 & 0x80u) == 0)
    v9 = *(unsigned __int8 *)(v5 + 23);
  else
    v9 = v8;
  if (v9 >= 0x80)
  {
    v10 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v9);
    v6 = *(unsigned __int8 *)(v5 + 23);
    v8 = *(_QWORD *)(v5 + 8);
    v2 = *((_DWORD *)this + 10);
    v7 = *(_BYTE *)(v5 + 23);
  }
  else
  {
    v10 = 1;
  }
  if (v7 < 0)
    v6 = v8;
  v3 = (v3 + v10 + v6 + 1);
LABEL_22:
  if ((v2 & 4) == 0)
  {
    if ((v2 & 8) == 0)
      goto LABEL_43;
    goto LABEL_34;
  }
  v11 = *((_QWORD *)this + 2);
  v12 = *(unsigned __int8 *)(v11 + 23);
  v13 = v12;
  v14 = *(_QWORD *)(v11 + 8);
  if ((v12 & 0x80u) == 0)
    v15 = *(unsigned __int8 *)(v11 + 23);
  else
    v15 = v14;
  if (v15 >= 0x80)
  {
    v16 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v15);
    v12 = *(unsigned __int8 *)(v11 + 23);
    v14 = *(_QWORD *)(v11 + 8);
    v2 = *((_DWORD *)this + 10);
    v13 = *(_BYTE *)(v11 + 23);
  }
  else
  {
    v16 = 1;
  }
  if (v13 < 0)
    v12 = v14;
  v3 = (v3 + v16 + v12 + 1);
  if ((v2 & 8) != 0)
  {
LABEL_34:
    v17 = *((_QWORD *)this + 3);
    v18 = *(unsigned __int8 *)(v17 + 23);
    v19 = v18;
    v20 = *(_QWORD *)(v17 + 8);
    if ((v18 & 0x80u) == 0)
      v21 = *(unsigned __int8 *)(v17 + 23);
    else
      v21 = v20;
    if (v21 >= 0x80)
    {
      v22 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v21);
      v18 = *(unsigned __int8 *)(v17 + 23);
      v20 = *(_QWORD *)(v17 + 8);
      v19 = *(_BYTE *)(v17 + 23);
    }
    else
    {
      v22 = 1;
    }
    if (v19 < 0)
      v18 = v20;
    v3 = (v3 + v22 + v18 + 1);
  }
LABEL_43:
  *((_DWORD *)this + 9) = v3;
  return v3;
}

void CLMicroLocationProto::TruthLabelDonation::CheckTypeAndMergeFrom(CLMicroLocationProto::TruthLabelDonation *this, const wireless_diagnostics::google::protobuf::MessageLite *lpsrc)
{
  uint64_t v4;
  uint64_t v5;

  CLMicroLocationProto::TruthLabelDonation::MergeFrom(this, lpsrc);
}

void CLMicroLocationProto::TruthLabelDonation::CopyFrom(CLMicroLocationProto::TruthLabelDonation *this, const CLMicroLocationProto::TruthLabelDonation *a2)
{
  if (a2 != this)
  {
    (*(void (**)(CLMicroLocationProto::TruthLabelDonation *))(*(_QWORD *)this + 32))(this);
    CLMicroLocationProto::TruthLabelDonation::MergeFrom(this, a2);
  }
}

uint64_t CLMicroLocationProto::TruthLabelDonation::IsInitialized(CLMicroLocationProto::TruthLabelDonation *this)
{
  return 1;
}

_QWORD *CLMicroLocationProto::TruthLabelDonation::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CLMicroLocationProto.TruthLabelDonation");
}

void CLMicroLocationProto::ForcedRecording::MergeFrom(CLMicroLocationProto::ForcedRecording *this, const CLMicroLocationProto::ForcedRecording *a2)
{
  unsigned int v4;
  _BYTE v6[48];

  if (a2 == this)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v6);
  }
  if ((*((_BYTE *)a2 + 16) & 1) != 0)
  {
    v4 = *((_DWORD *)a2 + 2);
    if (v4 - 31 >= 0x19 && (v4 > 0xE || ((1 << v4) & 0x76B6) == 0))
      CLMicroLocationProto::ForcedRecording::MergeFrom();
    *((_DWORD *)this + 4) |= 1u;
    *((_DWORD *)this + 2) = v4;
  }
}

void sub_241AC4414(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void CLMicroLocationProto::ForcedRecording::~ForcedRecording(CLMicroLocationProto::ForcedRecording *this)
{
  *(_QWORD *)this = &off_2511D7640;
  CLMicroLocationProto::protobuf_AddDesc_microlocation_2eproto(this);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

{
  CLMicroLocationProto::ForcedRecording::~ForcedRecording(this);
  JUMPOUT(0x2426A04D4);
}

double CLMicroLocationProto::ForcedRecording::New(CLMicroLocationProto::ForcedRecording *this)
{
  uint64_t v1;
  double result;

  v1 = operator new();
  *(_QWORD *)v1 = &off_2511D7640;
  *(_QWORD *)&result = 7;
  *(_QWORD *)(v1 + 8) = 7;
  *(_DWORD *)(v1 + 16) = 0;
  return result;
}

uint64_t CLMicroLocationProto::ForcedRecording::Clear(uint64_t this)
{
  if (*(_BYTE *)(this + 16))
    *(_DWORD *)(this + 8) = 7;
  *(_DWORD *)(this + 16) = 0;
  return this;
}

uint64_t CLMicroLocationProto::ForcedRecording::MergePartialFromCodedStream(CLMicroLocationProto::ForcedRecording *this, wireless_diagnostics::google::protobuf::io::CodedInputStream *a2)
{
  char *v4;
  uint64_t TagFallback;
  char *v6;
  unsigned int v7;
  BOOL v8;
  uint64_t result;
  unsigned int v11;

  while (1)
  {
    while (1)
    {
      v4 = (char *)*((_QWORD *)a2 + 1);
      if ((unint64_t)v4 >= *((_QWORD *)a2 + 2) || *v4 < 0)
      {
        TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(a2);
        *((_DWORD *)a2 + 8) = TagFallback;
      }
      else
      {
        TagFallback = *v4;
        *((_DWORD *)a2 + 8) = TagFallback;
        *((_QWORD *)a2 + 1) = v4 + 1;
      }
      if ((_DWORD)TagFallback != 8)
        break;
      v11 = 0;
      v6 = (char *)*((_QWORD *)a2 + 1);
      if ((unint64_t)v6 >= *((_QWORD *)a2 + 2) || *v6 < 0)
      {
        result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v11);
        if (!(_DWORD)result)
          return result;
        v7 = v11;
      }
      else
      {
        v7 = *v6;
        *((_QWORD *)a2 + 1) = v6 + 1;
      }
      if (v7 - 31 < 0x19 || (v7 <= 0xE ? (v8 = ((1 << v7) & 0x76B6) == 0) : (v8 = 1), !v8))
      {
        if (v7 - 31 >= 0x19 && (v7 > 0xE || ((1 << v7) & 0x76B6) == 0))
          CLMicroLocationProto::ForcedRecording::MergeFrom();
        *((_DWORD *)this + 4) |= 1u;
        *((_DWORD *)this + 2) = v7;
      }
      if (*((_QWORD *)a2 + 1) == *((_QWORD *)a2 + 2)
        && (*((_DWORD *)a2 + 11) || *((_DWORD *)a2 + 6) == *((_DWORD *)a2 + 10)))
      {
        *((_DWORD *)a2 + 8) = 0;
        result = 1;
        *((_BYTE *)a2 + 36) = 1;
        return result;
      }
    }
    if (!(_DWORD)TagFallback || (TagFallback & 7) == 4)
      break;
    if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(a2, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback) & 1) == 0)return 0;
  }
  return 1;
}

uint64_t CLMicroLocationProto::ForcedRecording::SerializeWithCachedSizes(uint64_t this, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  if ((*(_BYTE *)(this + 16) & 1) != 0)
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(unsigned int *)(this + 8), (uint64_t)a2, a4);
  return this;
}

uint64_t CLMicroLocationProto::ForcedRecording::ByteSize(CLMicroLocationProto::ForcedRecording *this)
{
  uint64_t result;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v3;

  if ((*((_BYTE *)this + 16) & 1) != 0)
  {
    v3 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 2);
    if ((v3 & 0x80000000) != 0)
    {
      result = 11;
    }
    else if (v3 >= 0x80)
    {
      result = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v3) + 1;
    }
    else
    {
      result = 2;
    }
  }
  else
  {
    result = 0;
  }
  *((_DWORD *)this + 3) = result;
  return result;
}

void CLMicroLocationProto::ForcedRecording::CheckTypeAndMergeFrom(CLMicroLocationProto::ForcedRecording *this, const wireless_diagnostics::google::protobuf::MessageLite *lpsrc)
{
  uint64_t v4;
  uint64_t v5;

  CLMicroLocationProto::ForcedRecording::MergeFrom(this, lpsrc);
}

void CLMicroLocationProto::ForcedRecording::CopyFrom(CLMicroLocationProto::ForcedRecording *this, const CLMicroLocationProto::ForcedRecording *a2)
{
  if (a2 != this)
  {
    (*(void (**)(CLMicroLocationProto::ForcedRecording *))(*(_QWORD *)this + 32))(this);
    CLMicroLocationProto::ForcedRecording::MergeFrom(this, a2);
  }
}

uint64_t CLMicroLocationProto::ForcedRecording::IsInitialized(CLMicroLocationProto::ForcedRecording *this)
{
  return 1;
}

_QWORD *CLMicroLocationProto::ForcedRecording::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CLMicroLocationProto.ForcedRecording");
}

void CLMicroLocationProto::HomeKitAccessory::MergeFrom(CLMicroLocationProto::HomeKitAccessory *this, const CLMicroLocationProto::HomeKitAccessory *a2)
{
  int v4;
  unsigned int v5;
  const std::string *v6;
  std::string *v7;
  const std::string *v8;
  std::string *v9;
  const std::string *v10;
  std::string *v11;
  const std::string *v12;
  std::string *v13;
  const std::string *v14;
  std::string *v15;
  const std::string *v16;
  std::string *v17;
  const std::string *v18;
  std::string *v19;
  const std::string *v20;
  std::string *v21;
  const std::string *v22;
  std::string *v23;
  char v24;
  char v25;
  const std::string *v26;
  std::string *v27;
  const std::string *v28;
  std::string *v29;
  const std::string *v30;
  std::string *v31;
  _BYTE v32[48];

  if (a2 == this)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v32);
  }
  v4 = *((_DWORD *)a2 + 29);
  if (!(_BYTE)v4)
    goto LABEL_38;
  if ((v4 & 1) != 0)
  {
    v5 = *((_DWORD *)a2 + 16);
    if (v5 - 31 >= 0x19 && (v5 > 0xE || ((1 << v5) & 0x76B6) == 0))
      CLMicroLocationProto::HomeKitAccessory::MergeFrom();
    *((_DWORD *)this + 29) |= 1u;
    *((_DWORD *)this + 16) = v5;
    v4 = *((_DWORD *)a2 + 29);
  }
  if ((v4 & 2) != 0)
  {
    v6 = (const std::string *)*((_QWORD *)a2 + 1);
    *((_DWORD *)this + 29) |= 2u;
    v7 = (std::string *)*((_QWORD *)this + 1);
    if (v7 == (std::string *)MEMORY[0x24BEDD958])
    {
      v7 = (std::string *)operator new();
      v7->__r_.__value_.__l.__size_ = 0;
      v7->__r_.__value_.__r.__words[2] = 0;
      v7->__r_.__value_.__r.__words[0] = 0;
      *((_QWORD *)this + 1) = v7;
    }
    std::string::operator=(v7, v6);
    v4 = *((_DWORD *)a2 + 29);
    if ((v4 & 4) == 0)
    {
LABEL_11:
      if ((v4 & 8) == 0)
        goto LABEL_12;
      goto LABEL_23;
    }
  }
  else if ((v4 & 4) == 0)
  {
    goto LABEL_11;
  }
  v8 = (const std::string *)*((_QWORD *)a2 + 2);
  *((_DWORD *)this + 29) |= 4u;
  v9 = (std::string *)*((_QWORD *)this + 2);
  if (v9 == (std::string *)MEMORY[0x24BEDD958])
  {
    v9 = (std::string *)operator new();
    v9->__r_.__value_.__l.__size_ = 0;
    v9->__r_.__value_.__r.__words[2] = 0;
    v9->__r_.__value_.__r.__words[0] = 0;
    *((_QWORD *)this + 2) = v9;
  }
  std::string::operator=(v9, v8);
  v4 = *((_DWORD *)a2 + 29);
  if ((v4 & 8) == 0)
  {
LABEL_12:
    if ((v4 & 0x10) == 0)
      goto LABEL_13;
    goto LABEL_26;
  }
LABEL_23:
  v10 = (const std::string *)*((_QWORD *)a2 + 3);
  *((_DWORD *)this + 29) |= 8u;
  v11 = (std::string *)*((_QWORD *)this + 3);
  if (v11 == (std::string *)MEMORY[0x24BEDD958])
  {
    v11 = (std::string *)operator new();
    v11->__r_.__value_.__l.__size_ = 0;
    v11->__r_.__value_.__r.__words[2] = 0;
    v11->__r_.__value_.__r.__words[0] = 0;
    *((_QWORD *)this + 3) = v11;
  }
  std::string::operator=(v11, v10);
  v4 = *((_DWORD *)a2 + 29);
  if ((v4 & 0x10) == 0)
  {
LABEL_13:
    if ((v4 & 0x20) == 0)
      goto LABEL_14;
LABEL_29:
    v14 = (const std::string *)*((_QWORD *)a2 + 5);
    *((_DWORD *)this + 29) |= 0x20u;
    v15 = (std::string *)*((_QWORD *)this + 5);
    if (v15 == (std::string *)MEMORY[0x24BEDD958])
    {
      v15 = (std::string *)operator new();
      v15->__r_.__value_.__l.__size_ = 0;
      v15->__r_.__value_.__r.__words[2] = 0;
      v15->__r_.__value_.__r.__words[0] = 0;
      *((_QWORD *)this + 5) = v15;
    }
    std::string::operator=(v15, v14);
    v4 = *((_DWORD *)a2 + 29);
    if ((v4 & 0x40) == 0)
    {
LABEL_15:
      if ((v4 & 0x80) == 0)
        goto LABEL_38;
      goto LABEL_35;
    }
    goto LABEL_32;
  }
LABEL_26:
  v12 = (const std::string *)*((_QWORD *)a2 + 4);
  *((_DWORD *)this + 29) |= 0x10u;
  v13 = (std::string *)*((_QWORD *)this + 4);
  if (v13 == (std::string *)MEMORY[0x24BEDD958])
  {
    v13 = (std::string *)operator new();
    v13->__r_.__value_.__l.__size_ = 0;
    v13->__r_.__value_.__r.__words[2] = 0;
    v13->__r_.__value_.__r.__words[0] = 0;
    *((_QWORD *)this + 4) = v13;
  }
  std::string::operator=(v13, v12);
  v4 = *((_DWORD *)a2 + 29);
  if ((v4 & 0x20) != 0)
    goto LABEL_29;
LABEL_14:
  if ((v4 & 0x40) == 0)
    goto LABEL_15;
LABEL_32:
  v16 = (const std::string *)*((_QWORD *)a2 + 6);
  *((_DWORD *)this + 29) |= 0x40u;
  v17 = (std::string *)*((_QWORD *)this + 6);
  if (v17 == (std::string *)MEMORY[0x24BEDD958])
  {
    v17 = (std::string *)operator new();
    v17->__r_.__value_.__l.__size_ = 0;
    v17->__r_.__value_.__r.__words[2] = 0;
    v17->__r_.__value_.__r.__words[0] = 0;
    *((_QWORD *)this + 6) = v17;
  }
  std::string::operator=(v17, v16);
  v4 = *((_DWORD *)a2 + 29);
  if ((v4 & 0x80) != 0)
  {
LABEL_35:
    v18 = (const std::string *)*((_QWORD *)a2 + 7);
    *((_DWORD *)this + 29) |= 0x80u;
    v19 = (std::string *)*((_QWORD *)this + 7);
    if (v19 == (std::string *)MEMORY[0x24BEDD958])
    {
      v19 = (std::string *)operator new();
      v19->__r_.__value_.__l.__size_ = 0;
      v19->__r_.__value_.__r.__words[2] = 0;
      v19->__r_.__value_.__r.__words[0] = 0;
      *((_QWORD *)this + 7) = v19;
    }
    std::string::operator=(v19, v18);
    v4 = *((_DWORD *)a2 + 29);
  }
LABEL_38:
  if ((v4 & 0xFF00) == 0)
    return;
  if ((v4 & 0x100) != 0)
  {
    v20 = (const std::string *)*((_QWORD *)a2 + 9);
    *((_DWORD *)this + 29) |= 0x100u;
    v21 = (std::string *)*((_QWORD *)this + 9);
    if (v21 == (std::string *)MEMORY[0x24BEDD958])
    {
      v21 = (std::string *)operator new();
      v21->__r_.__value_.__l.__size_ = 0;
      v21->__r_.__value_.__r.__words[2] = 0;
      v21->__r_.__value_.__r.__words[0] = 0;
      *((_QWORD *)this + 9) = v21;
    }
    std::string::operator=(v21, v20);
    v4 = *((_DWORD *)a2 + 29);
    if ((v4 & 0x200) == 0)
    {
LABEL_41:
      if ((v4 & 0x400) == 0)
        goto LABEL_42;
      goto LABEL_53;
    }
  }
  else if ((v4 & 0x200) == 0)
  {
    goto LABEL_41;
  }
  v22 = (const std::string *)*((_QWORD *)a2 + 10);
  *((_DWORD *)this + 29) |= 0x200u;
  v23 = (std::string *)*((_QWORD *)this + 10);
  if (v23 == (std::string *)MEMORY[0x24BEDD958])
  {
    v23 = (std::string *)operator new();
    v23->__r_.__value_.__l.__size_ = 0;
    v23->__r_.__value_.__r.__words[2] = 0;
    v23->__r_.__value_.__r.__words[0] = 0;
    *((_QWORD *)this + 10) = v23;
  }
  std::string::operator=(v23, v22);
  v4 = *((_DWORD *)a2 + 29);
  if ((v4 & 0x400) == 0)
  {
LABEL_42:
    if ((v4 & 0x800) == 0)
      goto LABEL_43;
    goto LABEL_54;
  }
LABEL_53:
  v24 = *((_BYTE *)a2 + 68);
  *((_DWORD *)this + 29) |= 0x400u;
  *((_BYTE *)this + 68) = v24;
  v4 = *((_DWORD *)a2 + 29);
  if ((v4 & 0x800) == 0)
  {
LABEL_43:
    if ((v4 & 0x1000) == 0)
      goto LABEL_44;
    goto LABEL_55;
  }
LABEL_54:
  v25 = *((_BYTE *)a2 + 69);
  *((_DWORD *)this + 29) |= 0x800u;
  *((_BYTE *)this + 69) = v25;
  v4 = *((_DWORD *)a2 + 29);
  if ((v4 & 0x1000) == 0)
  {
LABEL_44:
    if ((v4 & 0x2000) == 0)
      goto LABEL_45;
    goto LABEL_58;
  }
LABEL_55:
  v26 = (const std::string *)*((_QWORD *)a2 + 11);
  *((_DWORD *)this + 29) |= 0x1000u;
  v27 = (std::string *)*((_QWORD *)this + 11);
  if (v27 == (std::string *)MEMORY[0x24BEDD958])
  {
    v27 = (std::string *)operator new();
    v27->__r_.__value_.__l.__size_ = 0;
    v27->__r_.__value_.__r.__words[2] = 0;
    v27->__r_.__value_.__r.__words[0] = 0;
    *((_QWORD *)this + 11) = v27;
  }
  std::string::operator=(v27, v26);
  v4 = *((_DWORD *)a2 + 29);
  if ((v4 & 0x2000) == 0)
  {
LABEL_45:
    if ((v4 & 0x4000) == 0)
      return;
    goto LABEL_61;
  }
LABEL_58:
  v28 = (const std::string *)*((_QWORD *)a2 + 12);
  *((_DWORD *)this + 29) |= 0x2000u;
  v29 = (std::string *)*((_QWORD *)this + 12);
  if (v29 == (std::string *)MEMORY[0x24BEDD958])
  {
    v29 = (std::string *)operator new();
    v29->__r_.__value_.__l.__size_ = 0;
    v29->__r_.__value_.__r.__words[2] = 0;
    v29->__r_.__value_.__r.__words[0] = 0;
    *((_QWORD *)this + 12) = v29;
  }
  std::string::operator=(v29, v28);
  if ((*((_DWORD *)a2 + 29) & 0x4000) != 0)
  {
LABEL_61:
    v30 = (const std::string *)*((_QWORD *)a2 + 13);
    *((_DWORD *)this + 29) |= 0x4000u;
    v31 = (std::string *)*((_QWORD *)this + 13);
    if (v31 == (std::string *)MEMORY[0x24BEDD958])
    {
      v31 = (std::string *)operator new();
      v31->__r_.__value_.__l.__size_ = 0;
      v31->__r_.__value_.__r.__words[2] = 0;
      v31->__r_.__value_.__r.__words[0] = 0;
      *((_QWORD *)this + 13) = v31;
    }
    std::string::operator=(v31, v30);
  }
}

void sub_241AC4CBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void CLMicroLocationProto::HomeKitAccessory::~HomeKitAccessory(CLMicroLocationProto::HomeKitAccessory *this)
{
  *(_QWORD *)this = &off_2511D76B8;
  CLMicroLocationProto::HomeKitAccessory::SharedDtor(this);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

{
  CLMicroLocationProto::HomeKitAccessory::~HomeKitAccessory(this);
  JUMPOUT(0x2426A04D4);
}

void CLMicroLocationProto::HomeKitAccessory::SharedDtor(CLMicroLocationProto::HomeKitAccessory *this)
{
  CLMicroLocationProto::HomeKitAccessory *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v7;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v1 = this;
  v2 = *((_QWORD *)this + 1);
  v3 = MEMORY[0x24BEDD958];
  if (v2 != MEMORY[0x24BEDD958] && v2 != 0)
  {
    if (*(char *)(v2 + 23) < 0)
      operator delete(*(void **)v2);
    this = (CLMicroLocationProto::HomeKitAccessory *)MEMORY[0x2426A04D4](v2, 0x1012C40EC159624);
  }
  v5 = *((_QWORD *)v1 + 2);
  if (v5 != v3 && v5 != 0)
  {
    if (*(char *)(v5 + 23) < 0)
      operator delete(*(void **)v5);
    this = (CLMicroLocationProto::HomeKitAccessory *)MEMORY[0x2426A04D4](v5, 0x1012C40EC159624);
  }
  v7 = *((_QWORD *)v1 + 3);
  if (v7 != v3 && v7 != 0)
  {
    if (*(char *)(v7 + 23) < 0)
      operator delete(*(void **)v7);
    this = (CLMicroLocationProto::HomeKitAccessory *)MEMORY[0x2426A04D4](v7, 0x1012C40EC159624);
  }
  v9 = *((_QWORD *)v1 + 4);
  if (v9 != v3 && v9 != 0)
  {
    if (*(char *)(v9 + 23) < 0)
      operator delete(*(void **)v9);
    this = (CLMicroLocationProto::HomeKitAccessory *)MEMORY[0x2426A04D4](v9, 0x1012C40EC159624);
  }
  v11 = *((_QWORD *)v1 + 5);
  if (v11 != v3 && v11)
  {
    if (*(char *)(v11 + 23) < 0)
      operator delete(*(void **)v11);
    this = (CLMicroLocationProto::HomeKitAccessory *)MEMORY[0x2426A04D4](v11, 0x1012C40EC159624);
  }
  v12 = *((_QWORD *)v1 + 6);
  if (v12 != v3 && v12)
  {
    if (*(char *)(v12 + 23) < 0)
      operator delete(*(void **)v12);
    this = (CLMicroLocationProto::HomeKitAccessory *)MEMORY[0x2426A04D4](v12, 0x1012C40EC159624);
  }
  v13 = *((_QWORD *)v1 + 7);
  if (v13 != v3 && v13)
  {
    if (*(char *)(v13 + 23) < 0)
      operator delete(*(void **)v13);
    this = (CLMicroLocationProto::HomeKitAccessory *)MEMORY[0x2426A04D4](v13, 0x1012C40EC159624);
  }
  v14 = *((_QWORD *)v1 + 9);
  if (v14 != v3 && v14)
  {
    if (*(char *)(v14 + 23) < 0)
      operator delete(*(void **)v14);
    this = (CLMicroLocationProto::HomeKitAccessory *)MEMORY[0x2426A04D4](v14, 0x1012C40EC159624);
  }
  v15 = *((_QWORD *)v1 + 10);
  if (v15 != v3 && v15)
  {
    if (*(char *)(v15 + 23) < 0)
      operator delete(*(void **)v15);
    this = (CLMicroLocationProto::HomeKitAccessory *)MEMORY[0x2426A04D4](v15, 0x1012C40EC159624);
  }
  v16 = *((_QWORD *)v1 + 11);
  if (v16 != v3 && v16)
  {
    if (*(char *)(v16 + 23) < 0)
      operator delete(*(void **)v16);
    this = (CLMicroLocationProto::HomeKitAccessory *)MEMORY[0x2426A04D4](v16, 0x1012C40EC159624);
  }
  v17 = *((_QWORD *)v1 + 12);
  if (v17 != v3 && v17)
  {
    if (*(char *)(v17 + 23) < 0)
      operator delete(*(void **)v17);
    this = (CLMicroLocationProto::HomeKitAccessory *)MEMORY[0x2426A04D4](v17, 0x1012C40EC159624);
  }
  v18 = *((_QWORD *)v1 + 13);
  if (v18 != v3 && v18)
  {
    if (*(char *)(v18 + 23) < 0)
      operator delete(*(void **)v18);
    this = (CLMicroLocationProto::HomeKitAccessory *)MEMORY[0x2426A04D4](v18, 0x1012C40EC159624);
  }
  CLMicroLocationProto::protobuf_AddDesc_microlocation_2eproto(this);
}

uint64_t CLMicroLocationProto::HomeKitAccessory::New(CLMicroLocationProto::HomeKitAccessory *this)
{
  uint64_t result;
  uint64_t v2;

  result = operator new();
  v2 = MEMORY[0x24BEDD958];
  *(_DWORD *)(result + 64) = 9;
  *(_QWORD *)result = &off_2511D76B8;
  *(_QWORD *)(result + 8) = v2;
  *(_QWORD *)(result + 16) = v2;
  *(_QWORD *)(result + 24) = v2;
  *(_QWORD *)(result + 32) = v2;
  *(_QWORD *)(result + 40) = v2;
  *(_QWORD *)(result + 48) = v2;
  *(_QWORD *)(result + 56) = v2;
  *(_QWORD *)(result + 72) = v2;
  *(_QWORD *)(result + 80) = v2;
  *(_WORD *)(result + 68) = 0;
  *(_QWORD *)(result + 88) = v2;
  *(_QWORD *)(result + 96) = v2;
  *(_QWORD *)(result + 104) = v2;
  *(_QWORD *)(result + 112) = 0;
  return result;
}

uint64_t CLMicroLocationProto::HomeKitAccessory::Clear(uint64_t this)
{
  char v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v1 = *(_BYTE *)(this + 116);
  if (v1)
  {
    *(_DWORD *)(this + 64) = 9;
    v2 = MEMORY[0x24BEDD958];
    if ((v1 & 2) != 0)
    {
      v3 = *(_QWORD *)(this + 8);
      if (v3 != MEMORY[0x24BEDD958])
      {
        if (*(char *)(v3 + 23) < 0)
        {
          **(_BYTE **)v3 = 0;
          *(_QWORD *)(v3 + 8) = 0;
        }
        else
        {
          *(_BYTE *)v3 = 0;
          *(_BYTE *)(v3 + 23) = 0;
        }
      }
    }
    if ((*(_BYTE *)(this + 116) & 4) != 0)
    {
      v4 = *(_QWORD *)(this + 16);
      if (v4 != v2)
      {
        if (*(char *)(v4 + 23) < 0)
        {
          **(_BYTE **)v4 = 0;
          *(_QWORD *)(v4 + 8) = 0;
        }
        else
        {
          *(_BYTE *)v4 = 0;
          *(_BYTE *)(v4 + 23) = 0;
        }
      }
    }
    if ((*(_BYTE *)(this + 116) & 8) != 0)
    {
      v5 = *(_QWORD *)(this + 24);
      if (v5 != v2)
      {
        if (*(char *)(v5 + 23) < 0)
        {
          **(_BYTE **)v5 = 0;
          *(_QWORD *)(v5 + 8) = 0;
        }
        else
        {
          *(_BYTE *)v5 = 0;
          *(_BYTE *)(v5 + 23) = 0;
        }
      }
    }
    if ((*(_BYTE *)(this + 116) & 0x10) != 0)
    {
      v6 = *(_QWORD *)(this + 32);
      if (v6 != v2)
      {
        if (*(char *)(v6 + 23) < 0)
        {
          **(_BYTE **)v6 = 0;
          *(_QWORD *)(v6 + 8) = 0;
        }
        else
        {
          *(_BYTE *)v6 = 0;
          *(_BYTE *)(v6 + 23) = 0;
        }
      }
    }
    if ((*(_BYTE *)(this + 116) & 0x20) != 0)
    {
      v7 = *(_QWORD *)(this + 40);
      if (v7 != v2)
      {
        if (*(char *)(v7 + 23) < 0)
        {
          **(_BYTE **)v7 = 0;
          *(_QWORD *)(v7 + 8) = 0;
        }
        else
        {
          *(_BYTE *)v7 = 0;
          *(_BYTE *)(v7 + 23) = 0;
        }
      }
    }
    if ((*(_BYTE *)(this + 116) & 0x40) != 0)
    {
      v8 = *(_QWORD *)(this + 48);
      if (v8 != v2)
      {
        if (*(char *)(v8 + 23) < 0)
        {
          **(_BYTE **)v8 = 0;
          *(_QWORD *)(v8 + 8) = 0;
        }
        else
        {
          *(_BYTE *)v8 = 0;
          *(_BYTE *)(v8 + 23) = 0;
        }
      }
    }
    if ((*(_BYTE *)(this + 116) & 0x80) != 0)
    {
      v9 = *(_QWORD *)(this + 56);
      if (v9 != v2)
      {
        if (*(char *)(v9 + 23) < 0)
        {
          **(_BYTE **)v9 = 0;
          *(_QWORD *)(v9 + 8) = 0;
        }
        else
        {
          *(_BYTE *)v9 = 0;
          *(_BYTE *)(v9 + 23) = 0;
        }
      }
    }
  }
  v10 = *(_DWORD *)(this + 116);
  if ((v10 & 0xFF00) != 0)
  {
    if ((v10 & 0x100) != 0)
    {
      v11 = *(_QWORD *)(this + 72);
      if (v11 != MEMORY[0x24BEDD958])
      {
        if (*(char *)(v11 + 23) < 0)
        {
          **(_BYTE **)v11 = 0;
          *(_QWORD *)(v11 + 8) = 0;
        }
        else
        {
          *(_BYTE *)v11 = 0;
          *(_BYTE *)(v11 + 23) = 0;
        }
      }
    }
    if ((*(_BYTE *)(this + 117) & 2) != 0)
    {
      v12 = *(_QWORD *)(this + 80);
      if (v12 != MEMORY[0x24BEDD958])
      {
        if (*(char *)(v12 + 23) < 0)
        {
          **(_BYTE **)v12 = 0;
          *(_QWORD *)(v12 + 8) = 0;
        }
        else
        {
          *(_BYTE *)v12 = 0;
          *(_BYTE *)(v12 + 23) = 0;
        }
      }
    }
    *(_WORD *)(this + 68) = 0;
    if ((*(_BYTE *)(this + 117) & 0x10) != 0)
    {
      v13 = *(_QWORD *)(this + 88);
      if (v13 != MEMORY[0x24BEDD958])
      {
        if (*(char *)(v13 + 23) < 0)
        {
          **(_BYTE **)v13 = 0;
          *(_QWORD *)(v13 + 8) = 0;
        }
        else
        {
          *(_BYTE *)v13 = 0;
          *(_BYTE *)(v13 + 23) = 0;
        }
      }
    }
    if ((*(_BYTE *)(this + 117) & 0x20) != 0)
    {
      v14 = *(_QWORD *)(this + 96);
      if (v14 != MEMORY[0x24BEDD958])
      {
        if (*(char *)(v14 + 23) < 0)
        {
          **(_BYTE **)v14 = 0;
          *(_QWORD *)(v14 + 8) = 0;
        }
        else
        {
          *(_BYTE *)v14 = 0;
          *(_BYTE *)(v14 + 23) = 0;
        }
      }
    }
    if ((*(_BYTE *)(this + 117) & 0x40) != 0)
    {
      v15 = *(_QWORD *)(this + 104);
      if (v15 != MEMORY[0x24BEDD958])
      {
        if (*(char *)(v15 + 23) < 0)
        {
          **(_BYTE **)v15 = 0;
          *(_QWORD *)(v15 + 8) = 0;
        }
        else
        {
          *(_BYTE *)v15 = 0;
          *(_BYTE *)(v15 + 23) = 0;
        }
      }
    }
  }
  *(_DWORD *)(this + 116) = 0;
  return this;
}

uint64_t CLMicroLocationProto::HomeKitAccessory::MergePartialFromCodedStream(CLMicroLocationProto::HomeKitAccessory *this, wireless_diagnostics::google::protobuf::io::CodedInputStream *a2)
{
  uint64_t v4;
  char *v5;
  uint64_t TagFallback;
  int v7;
  char *v8;
  unsigned int v9;
  unint64_t v10;
  char *v11;
  int v12;
  char *v13;
  BOOL v14;
  _BYTE *v15;
  _QWORD *v16;
  _BYTE *v17;
  _QWORD *v18;
  _BYTE *v19;
  _QWORD *v20;
  _BYTE *v21;
  _QWORD *v22;
  _BYTE *v23;
  _QWORD *v24;
  _BYTE *v25;
  _QWORD *v26;
  _BYTE *v27;
  _QWORD *v28;
  _BYTE *v29;
  _QWORD *v30;
  _BYTE *v31;
  _QWORD *v32;
  _BYTE *v33;
  unsigned int v34;
  _BYTE *v35;
  unsigned int v36;
  _BYTE *v37;
  _QWORD *v38;
  _BYTE *v39;
  _QWORD *v40;
  _BYTE *v41;
  _QWORD *v42;
  uint64_t result;
  unsigned int v44;
  unsigned int v45;
  unsigned int v46;

  v4 = MEMORY[0x24BEDD958];
  while (2)
  {
    v5 = (char *)*((_QWORD *)a2 + 1);
    if ((unint64_t)v5 >= *((_QWORD *)a2 + 2) || *v5 < 0)
    {
      TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(a2);
      *((_DWORD *)a2 + 8) = TagFallback;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    else
    {
      TagFallback = *v5;
      *((_DWORD *)a2 + 8) = TagFallback;
      *((_QWORD *)a2 + 1) = v5 + 1;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    switch(TagFallback >> 3)
    {
      case 1u:
        v7 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_40;
        v44 = 0;
        v8 = (char *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v8 < *((_QWORD *)a2 + 2) && (*v8 & 0x80000000) == 0)
        {
          v9 = *v8;
          *((_QWORD *)a2 + 1) = v8 + 1;
LABEL_45:
          if (v9 - 31 < 0x19 || (v9 <= 0xE ? (v14 = ((1 << v9) & 0x76B6) == 0) : (v14 = 1), !v14))
          {
            if (v9 - 31 >= 0x19 && (v9 > 0xE || ((1 << v9) & 0x76B6) == 0))
              CLMicroLocationProto::HomeKitAccessory::MergeFrom();
            *((_DWORD *)this + 29) |= 1u;
            *((_DWORD *)this + 16) = v9;
          }
          v15 = (_BYTE *)*((_QWORD *)a2 + 1);
          if ((unint64_t)v15 < *((_QWORD *)a2 + 2) && *v15 == 18)
          {
            *((_QWORD *)a2 + 1) = v15 + 1;
            goto LABEL_57;
          }
          continue;
        }
        result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v44);
        if ((_DWORD)result)
        {
          v9 = v44;
          goto LABEL_45;
        }
        break;
      case 2u:
        v7 = TagFallback & 7;
        if (v7 != 2)
          goto LABEL_40;
LABEL_57:
        *((_DWORD *)this + 29) |= 2u;
        if (*((_QWORD *)this + 1) == v4)
        {
          v16 = (_QWORD *)operator new();
          v16[1] = 0;
          v16[2] = 0;
          *v16 = 0;
          *((_QWORD *)this + 1) = v16;
        }
        result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString();
        if (!(_DWORD)result)
          return result;
        v17 = (_BYTE *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v17 >= *((_QWORD *)a2 + 2) || *v17 != 26)
          continue;
        *((_QWORD *)a2 + 1) = v17 + 1;
LABEL_63:
        *((_DWORD *)this + 29) |= 4u;
        if (*((_QWORD *)this + 2) == v4)
        {
          v18 = (_QWORD *)operator new();
          v18[1] = 0;
          v18[2] = 0;
          *v18 = 0;
          *((_QWORD *)this + 2) = v18;
        }
        result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString();
        if (!(_DWORD)result)
          return result;
        v19 = (_BYTE *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v19 >= *((_QWORD *)a2 + 2) || *v19 != 34)
          continue;
        *((_QWORD *)a2 + 1) = v19 + 1;
LABEL_69:
        *((_DWORD *)this + 29) |= 8u;
        if (*((_QWORD *)this + 3) == v4)
        {
          v20 = (_QWORD *)operator new();
          v20[1] = 0;
          v20[2] = 0;
          *v20 = 0;
          *((_QWORD *)this + 3) = v20;
        }
        result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString();
        if (!(_DWORD)result)
          return result;
        v21 = (_BYTE *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v21 >= *((_QWORD *)a2 + 2) || *v21 != 42)
          continue;
        *((_QWORD *)a2 + 1) = v21 + 1;
LABEL_75:
        *((_DWORD *)this + 29) |= 0x10u;
        if (*((_QWORD *)this + 4) == v4)
        {
          v22 = (_QWORD *)operator new();
          v22[1] = 0;
          v22[2] = 0;
          *v22 = 0;
          *((_QWORD *)this + 4) = v22;
        }
        result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString();
        if (!(_DWORD)result)
          return result;
        v23 = (_BYTE *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v23 >= *((_QWORD *)a2 + 2) || *v23 != 50)
          continue;
        *((_QWORD *)a2 + 1) = v23 + 1;
LABEL_81:
        *((_DWORD *)this + 29) |= 0x20u;
        if (*((_QWORD *)this + 5) == v4)
        {
          v24 = (_QWORD *)operator new();
          v24[1] = 0;
          v24[2] = 0;
          *v24 = 0;
          *((_QWORD *)this + 5) = v24;
        }
        result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString();
        if (!(_DWORD)result)
          return result;
        v25 = (_BYTE *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v25 >= *((_QWORD *)a2 + 2) || *v25 != 58)
          continue;
        *((_QWORD *)a2 + 1) = v25 + 1;
LABEL_87:
        *((_DWORD *)this + 29) |= 0x40u;
        if (*((_QWORD *)this + 6) == v4)
        {
          v26 = (_QWORD *)operator new();
          v26[1] = 0;
          v26[2] = 0;
          *v26 = 0;
          *((_QWORD *)this + 6) = v26;
        }
        result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString();
        if (!(_DWORD)result)
          return result;
        v27 = (_BYTE *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v27 >= *((_QWORD *)a2 + 2) || *v27 != 66)
          continue;
        *((_QWORD *)a2 + 1) = v27 + 1;
LABEL_93:
        *((_DWORD *)this + 29) |= 0x80u;
        if (*((_QWORD *)this + 7) == v4)
        {
          v28 = (_QWORD *)operator new();
          v28[1] = 0;
          v28[2] = 0;
          *v28 = 0;
          *((_QWORD *)this + 7) = v28;
        }
        result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString();
        if (!(_DWORD)result)
          return result;
        v29 = (_BYTE *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v29 >= *((_QWORD *)a2 + 2) || *v29 != 74)
          continue;
        *((_QWORD *)a2 + 1) = v29 + 1;
LABEL_99:
        *((_DWORD *)this + 29) |= 0x100u;
        if (*((_QWORD *)this + 9) == v4)
        {
          v30 = (_QWORD *)operator new();
          v30[1] = 0;
          v30[2] = 0;
          *v30 = 0;
          *((_QWORD *)this + 9) = v30;
        }
        result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString();
        if (!(_DWORD)result)
          return result;
        v31 = (_BYTE *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v31 >= *((_QWORD *)a2 + 2) || *v31 != 82)
          continue;
        *((_QWORD *)a2 + 1) = v31 + 1;
LABEL_105:
        *((_DWORD *)this + 29) |= 0x200u;
        if (*((_QWORD *)this + 10) == v4)
        {
          v32 = (_QWORD *)operator new();
          v32[1] = 0;
          v32[2] = 0;
          *v32 = 0;
          *((_QWORD *)this + 10) = v32;
        }
        result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString();
        if (!(_DWORD)result)
          return result;
        v33 = (_BYTE *)*((_QWORD *)a2 + 1);
        v10 = *((_QWORD *)a2 + 2);
        if ((unint64_t)v33 >= v10 || *v33 != 88)
          continue;
        v13 = v33 + 1;
        *((_QWORD *)a2 + 1) = v13;
LABEL_111:
        v46 = 0;
        if ((unint64_t)v13 >= v10 || *v13 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v46);
          if (!(_DWORD)result)
            return result;
          v34 = v46;
          v35 = (_BYTE *)*((_QWORD *)a2 + 1);
          v10 = *((_QWORD *)a2 + 2);
        }
        else
        {
          v34 = *v13;
          v35 = v13 + 1;
          *((_QWORD *)a2 + 1) = v35;
        }
        *((_BYTE *)this + 68) = v34 != 0;
        *((_DWORD *)this + 29) |= 0x400u;
        if ((unint64_t)v35 >= v10 || *v35 != 96)
          continue;
        v11 = v35 + 1;
        *((_QWORD *)a2 + 1) = v11;
LABEL_119:
        v45 = 0;
        if ((unint64_t)v11 >= v10 || *v11 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v45);
          if (!(_DWORD)result)
            return result;
          v36 = v45;
          v37 = (_BYTE *)*((_QWORD *)a2 + 1);
          v10 = *((_QWORD *)a2 + 2);
        }
        else
        {
          v36 = *v11;
          v37 = v11 + 1;
          *((_QWORD *)a2 + 1) = v37;
        }
        *((_BYTE *)this + 69) = v36 != 0;
        v12 = *((_DWORD *)this + 29) | 0x800;
        *((_DWORD *)this + 29) = v12;
        if ((unint64_t)v37 >= v10 || *v37 != 106)
          continue;
        *((_QWORD *)a2 + 1) = v37 + 1;
LABEL_127:
        *((_DWORD *)this + 29) = v12 | 0x1000;
        if (*((_QWORD *)this + 11) == v4)
        {
          v38 = (_QWORD *)operator new();
          v38[1] = 0;
          v38[2] = 0;
          *v38 = 0;
          *((_QWORD *)this + 11) = v38;
        }
        result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString();
        if (!(_DWORD)result)
          return result;
        v39 = (_BYTE *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v39 >= *((_QWORD *)a2 + 2) || *v39 != 114)
          continue;
        *((_QWORD *)a2 + 1) = v39 + 1;
LABEL_133:
        *((_DWORD *)this + 29) |= 0x2000u;
        if (*((_QWORD *)this + 12) == v4)
        {
          v40 = (_QWORD *)operator new();
          v40[1] = 0;
          v40[2] = 0;
          *v40 = 0;
          *((_QWORD *)this + 12) = v40;
        }
        result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString();
        if (!(_DWORD)result)
          return result;
        v41 = (_BYTE *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v41 >= *((_QWORD *)a2 + 2) || *v41 != 122)
          continue;
        *((_QWORD *)a2 + 1) = v41 + 1;
LABEL_139:
        *((_DWORD *)this + 29) |= 0x4000u;
        if (*((_QWORD *)this + 13) == v4)
        {
          v42 = (_QWORD *)operator new();
          v42[1] = 0;
          v42[2] = 0;
          *v42 = 0;
          *((_QWORD *)this + 13) = v42;
        }
        result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString();
        if (!(_DWORD)result)
          return result;
        if (*((_QWORD *)a2 + 1) != *((_QWORD *)a2 + 2)
          || !*((_DWORD *)a2 + 11) && *((_DWORD *)a2 + 6) != *((_DWORD *)a2 + 10))
        {
          continue;
        }
        *((_DWORD *)a2 + 8) = 0;
        result = 1;
        *((_BYTE *)a2 + 36) = 1;
        return result;
      case 3u:
        v7 = TagFallback & 7;
        if (v7 == 2)
          goto LABEL_63;
        goto LABEL_40;
      case 4u:
        v7 = TagFallback & 7;
        if (v7 == 2)
          goto LABEL_69;
        goto LABEL_40;
      case 5u:
        v7 = TagFallback & 7;
        if (v7 == 2)
          goto LABEL_75;
        goto LABEL_40;
      case 6u:
        v7 = TagFallback & 7;
        if (v7 == 2)
          goto LABEL_81;
        goto LABEL_40;
      case 7u:
        v7 = TagFallback & 7;
        if (v7 == 2)
          goto LABEL_87;
        goto LABEL_40;
      case 8u:
        v7 = TagFallback & 7;
        if (v7 == 2)
          goto LABEL_93;
        goto LABEL_40;
      case 9u:
        v7 = TagFallback & 7;
        if (v7 == 2)
          goto LABEL_99;
        goto LABEL_40;
      case 0xAu:
        v7 = TagFallback & 7;
        if (v7 == 2)
          goto LABEL_105;
        goto LABEL_40;
      case 0xBu:
        v7 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_40;
        v13 = (char *)*((_QWORD *)a2 + 1);
        v10 = *((_QWORD *)a2 + 2);
        goto LABEL_111;
      case 0xCu:
        v7 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_40;
        v11 = (char *)*((_QWORD *)a2 + 1);
        v10 = *((_QWORD *)a2 + 2);
        goto LABEL_119;
      case 0xDu:
        v7 = TagFallback & 7;
        if (v7 != 2)
          goto LABEL_40;
        v12 = *((_DWORD *)this + 29);
        goto LABEL_127;
      case 0xEu:
        v7 = TagFallback & 7;
        if (v7 != 2)
          goto LABEL_40;
        goto LABEL_133;
      case 0xFu:
        v7 = TagFallback & 7;
        if (v7 == 2)
          goto LABEL_139;
        goto LABEL_40;
      default:
        v7 = TagFallback & 7;
LABEL_40:
        if (v7 == 4)
          return 1;
        if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(a2, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback) & 1) != 0)continue;
        return 0;
    }
    return result;
  }
}

uint64_t CLMicroLocationProto::HomeKitAccessory::SerializeWithCachedSizes(uint64_t this, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  int v6;

  v5 = this;
  v6 = *(_DWORD *)(this + 116);
  if ((v6 & 1) != 0)
  {
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(unsigned int *)(this + 64), (uint64_t)a2, a4);
    v6 = *(_DWORD *)(v5 + 116);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0)
        goto LABEL_4;
      goto LABEL_19;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString();
  v6 = *(_DWORD *)(v5 + 116);
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0)
      goto LABEL_5;
    goto LABEL_20;
  }
LABEL_19:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString();
  v6 = *(_DWORD *)(v5 + 116);
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_21;
  }
LABEL_20:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString();
  v6 = *(_DWORD *)(v5 + 116);
  if ((v6 & 0x10) == 0)
  {
LABEL_6:
    if ((v6 & 0x20) == 0)
      goto LABEL_7;
    goto LABEL_22;
  }
LABEL_21:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString();
  v6 = *(_DWORD *)(v5 + 116);
  if ((v6 & 0x20) == 0)
  {
LABEL_7:
    if ((v6 & 0x40) == 0)
      goto LABEL_8;
    goto LABEL_23;
  }
LABEL_22:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString();
  v6 = *(_DWORD *)(v5 + 116);
  if ((v6 & 0x40) == 0)
  {
LABEL_8:
    if ((v6 & 0x80) == 0)
      goto LABEL_9;
    goto LABEL_24;
  }
LABEL_23:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString();
  v6 = *(_DWORD *)(v5 + 116);
  if ((v6 & 0x80) == 0)
  {
LABEL_9:
    if ((v6 & 0x100) == 0)
      goto LABEL_10;
    goto LABEL_25;
  }
LABEL_24:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString();
  v6 = *(_DWORD *)(v5 + 116);
  if ((v6 & 0x100) == 0)
  {
LABEL_10:
    if ((v6 & 0x200) == 0)
      goto LABEL_11;
    goto LABEL_26;
  }
LABEL_25:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString();
  v6 = *(_DWORD *)(v5 + 116);
  if ((v6 & 0x200) == 0)
  {
LABEL_11:
    if ((v6 & 0x400) == 0)
      goto LABEL_12;
    goto LABEL_27;
  }
LABEL_26:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString();
  v6 = *(_DWORD *)(v5 + 116);
  if ((v6 & 0x400) == 0)
  {
LABEL_12:
    if ((v6 & 0x800) == 0)
      goto LABEL_13;
    goto LABEL_28;
  }
LABEL_27:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xB, *(unsigned __int8 *)(v5 + 68), (uint64_t)a2, a4);
  v6 = *(_DWORD *)(v5 + 116);
  if ((v6 & 0x800) == 0)
  {
LABEL_13:
    if ((v6 & 0x1000) == 0)
      goto LABEL_14;
    goto LABEL_29;
  }
LABEL_28:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xC, *(unsigned __int8 *)(v5 + 69), (uint64_t)a2, a4);
  v6 = *(_DWORD *)(v5 + 116);
  if ((v6 & 0x1000) == 0)
  {
LABEL_14:
    if ((v6 & 0x2000) == 0)
      goto LABEL_15;
    goto LABEL_30;
  }
LABEL_29:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString();
  v6 = *(_DWORD *)(v5 + 116);
  if ((v6 & 0x2000) == 0)
  {
LABEL_15:
    if ((v6 & 0x4000) == 0)
      return this;
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString();
  }
LABEL_30:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString();
  if ((*(_DWORD *)(v5 + 116) & 0x4000) != 0)
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString();
  return this;
}

uint64_t CLMicroLocationProto::HomeKitAccessory::ByteSize(CLMicroLocationProto::HomeKitAccessory *this)
{
  int v2;
  uint64_t v3;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v4;
  int v5;
  uint64_t v6;
  int v7;
  char v8;
  uint64_t v9;
  unint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  char v14;
  uint64_t v15;
  unint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  char v20;
  uint64_t v21;
  unint64_t v22;
  int v23;
  uint64_t v24;
  int v25;
  char v26;
  uint64_t v27;
  unint64_t v28;
  int v29;
  uint64_t v30;
  int v31;
  char v32;
  uint64_t v33;
  unint64_t v34;
  int v35;
  uint64_t v36;
  int v37;
  char v38;
  uint64_t v39;
  unint64_t v40;
  int v41;
  uint64_t v42;
  int v43;
  char v44;
  uint64_t v45;
  unint64_t v46;
  int v47;
  uint64_t v48;
  int v49;
  char v50;
  uint64_t v51;
  unint64_t v52;
  int v53;
  uint64_t v54;
  int v55;
  char v56;
  uint64_t v57;
  unint64_t v58;
  int v59;
  unsigned int v60;
  uint64_t v61;
  int v62;
  char v63;
  uint64_t v64;
  unint64_t v65;
  int v66;
  uint64_t v67;
  int v68;
  char v69;
  uint64_t v70;
  unint64_t v71;
  int v72;
  uint64_t v73;
  int v74;
  char v75;
  uint64_t v76;
  unint64_t v77;
  int v78;

  v2 = *((_DWORD *)this + 29);
  if (!(_BYTE)v2)
  {
    v3 = 0;
    goto LABEL_82;
  }
  if ((v2 & 1) != 0)
  {
    v4 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 16);
    if ((v4 & 0x80000000) != 0)
    {
      v5 = 10;
    }
    else if (v4 >= 0x80)
    {
      v5 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v4);
      v2 = *((_DWORD *)this + 29);
    }
    else
    {
      v5 = 1;
    }
    v3 = (v5 + 1);
    if ((v2 & 2) == 0)
      goto LABEL_21;
  }
  else
  {
    v3 = 0;
    if ((v2 & 2) == 0)
      goto LABEL_21;
  }
  v6 = *((_QWORD *)this + 1);
  v7 = *(unsigned __int8 *)(v6 + 23);
  v8 = v7;
  v9 = *(_QWORD *)(v6 + 8);
  if ((v7 & 0x80u) == 0)
    v10 = *(unsigned __int8 *)(v6 + 23);
  else
    v10 = v9;
  if (v10 >= 0x80)
  {
    v11 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v10);
    v7 = *(unsigned __int8 *)(v6 + 23);
    v9 = *(_QWORD *)(v6 + 8);
    v2 = *((_DWORD *)this + 29);
    v8 = *(_BYTE *)(v6 + 23);
  }
  else
  {
    v11 = 1;
  }
  if (v8 < 0)
    v7 = v9;
  v3 = (v3 + v11 + v7 + 1);
LABEL_21:
  if ((v2 & 4) != 0)
  {
    v12 = *((_QWORD *)this + 2);
    v13 = *(unsigned __int8 *)(v12 + 23);
    v14 = v13;
    v15 = *(_QWORD *)(v12 + 8);
    if ((v13 & 0x80u) == 0)
      v16 = *(unsigned __int8 *)(v12 + 23);
    else
      v16 = v15;
    if (v16 >= 0x80)
    {
      v17 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v16);
      v13 = *(unsigned __int8 *)(v12 + 23);
      v15 = *(_QWORD *)(v12 + 8);
      v2 = *((_DWORD *)this + 29);
      v14 = *(_BYTE *)(v12 + 23);
    }
    else
    {
      v17 = 1;
    }
    if (v14 < 0)
      v13 = v15;
    v3 = (v3 + v17 + v13 + 1);
    if ((v2 & 8) == 0)
    {
LABEL_23:
      if ((v2 & 0x10) == 0)
        goto LABEL_24;
      goto LABEL_46;
    }
  }
  else if ((v2 & 8) == 0)
  {
    goto LABEL_23;
  }
  v18 = *((_QWORD *)this + 3);
  v19 = *(unsigned __int8 *)(v18 + 23);
  v20 = v19;
  v21 = *(_QWORD *)(v18 + 8);
  if ((v19 & 0x80u) == 0)
    v22 = *(unsigned __int8 *)(v18 + 23);
  else
    v22 = v21;
  if (v22 >= 0x80)
  {
    v23 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v22);
    v19 = *(unsigned __int8 *)(v18 + 23);
    v21 = *(_QWORD *)(v18 + 8);
    v2 = *((_DWORD *)this + 29);
    v20 = *(_BYTE *)(v18 + 23);
  }
  else
  {
    v23 = 1;
  }
  if (v20 < 0)
    v19 = v21;
  v3 = (v3 + v23 + v19 + 1);
  if ((v2 & 0x10) == 0)
  {
LABEL_24:
    if ((v2 & 0x20) == 0)
      goto LABEL_25;
    goto LABEL_55;
  }
LABEL_46:
  v24 = *((_QWORD *)this + 4);
  v25 = *(unsigned __int8 *)(v24 + 23);
  v26 = v25;
  v27 = *(_QWORD *)(v24 + 8);
  if ((v25 & 0x80u) == 0)
    v28 = *(unsigned __int8 *)(v24 + 23);
  else
    v28 = v27;
  if (v28 >= 0x80)
  {
    v29 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v28);
    v25 = *(unsigned __int8 *)(v24 + 23);
    v27 = *(_QWORD *)(v24 + 8);
    v2 = *((_DWORD *)this + 29);
    v26 = *(_BYTE *)(v24 + 23);
  }
  else
  {
    v29 = 1;
  }
  if (v26 < 0)
    v25 = v27;
  v3 = (v3 + v29 + v25 + 1);
  if ((v2 & 0x20) == 0)
  {
LABEL_25:
    if ((v2 & 0x40) == 0)
      goto LABEL_26;
    goto LABEL_64;
  }
LABEL_55:
  v30 = *((_QWORD *)this + 5);
  v31 = *(unsigned __int8 *)(v30 + 23);
  v32 = v31;
  v33 = *(_QWORD *)(v30 + 8);
  if ((v31 & 0x80u) == 0)
    v34 = *(unsigned __int8 *)(v30 + 23);
  else
    v34 = v33;
  if (v34 >= 0x80)
  {
    v35 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v34);
    v31 = *(unsigned __int8 *)(v30 + 23);
    v33 = *(_QWORD *)(v30 + 8);
    v2 = *((_DWORD *)this + 29);
    v32 = *(_BYTE *)(v30 + 23);
  }
  else
  {
    v35 = 1;
  }
  if (v32 < 0)
    v31 = v33;
  v3 = (v3 + v35 + v31 + 1);
  if ((v2 & 0x40) == 0)
  {
LABEL_26:
    if ((v2 & 0x80) == 0)
      goto LABEL_82;
    goto LABEL_73;
  }
LABEL_64:
  v36 = *((_QWORD *)this + 6);
  v37 = *(unsigned __int8 *)(v36 + 23);
  v38 = v37;
  v39 = *(_QWORD *)(v36 + 8);
  if ((v37 & 0x80u) == 0)
    v40 = *(unsigned __int8 *)(v36 + 23);
  else
    v40 = v39;
  if (v40 >= 0x80)
  {
    v41 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v40);
    v37 = *(unsigned __int8 *)(v36 + 23);
    v39 = *(_QWORD *)(v36 + 8);
    v2 = *((_DWORD *)this + 29);
    v38 = *(_BYTE *)(v36 + 23);
  }
  else
  {
    v41 = 1;
  }
  if (v38 < 0)
    v37 = v39;
  v3 = (v3 + v41 + v37 + 1);
  if ((v2 & 0x80) != 0)
  {
LABEL_73:
    v42 = *((_QWORD *)this + 7);
    v43 = *(unsigned __int8 *)(v42 + 23);
    v44 = v43;
    v45 = *(_QWORD *)(v42 + 8);
    if ((v43 & 0x80u) == 0)
      v46 = *(unsigned __int8 *)(v42 + 23);
    else
      v46 = v45;
    if (v46 >= 0x80)
    {
      v47 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v46);
      v43 = *(unsigned __int8 *)(v42 + 23);
      v45 = *(_QWORD *)(v42 + 8);
      v2 = *((_DWORD *)this + 29);
      v44 = *(_BYTE *)(v42 + 23);
    }
    else
    {
      v47 = 1;
    }
    if (v44 < 0)
      v43 = v45;
    v3 = (v3 + v47 + v43 + 1);
  }
LABEL_82:
  if ((v2 & 0xFF00) == 0)
    goto LABEL_139;
  if ((v2 & 0x100) != 0)
  {
    v48 = *((_QWORD *)this + 9);
    v49 = *(unsigned __int8 *)(v48 + 23);
    v50 = v49;
    v51 = *(_QWORD *)(v48 + 8);
    if ((v49 & 0x80u) == 0)
      v52 = *(unsigned __int8 *)(v48 + 23);
    else
      v52 = v51;
    if (v52 >= 0x80)
    {
      v53 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v52);
      v49 = *(unsigned __int8 *)(v48 + 23);
      v51 = *(_QWORD *)(v48 + 8);
      v2 = *((_DWORD *)this + 29);
      v50 = *(_BYTE *)(v48 + 23);
    }
    else
    {
      v53 = 1;
    }
    if (v50 < 0)
      v49 = v51;
    LODWORD(v3) = v3 + v53 + v49 + 1;
  }
  if ((v2 & 0x200) != 0)
  {
    v54 = *((_QWORD *)this + 10);
    v55 = *(unsigned __int8 *)(v54 + 23);
    v56 = v55;
    v57 = *(_QWORD *)(v54 + 8);
    if ((v55 & 0x80u) == 0)
      v58 = *(unsigned __int8 *)(v54 + 23);
    else
      v58 = v57;
    if (v58 >= 0x80)
    {
      v59 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v58);
      v55 = *(unsigned __int8 *)(v54 + 23);
      v57 = *(_QWORD *)(v54 + 8);
      v2 = *((_DWORD *)this + 29);
      v56 = *(_BYTE *)(v54 + 23);
    }
    else
    {
      v59 = 1;
    }
    if (v56 < 0)
      v55 = v57;
    LODWORD(v3) = v3 + v59 + v55 + 1;
  }
  v60 = v3 + 2;
  if ((v2 & 0x400) == 0)
    v60 = v3;
  if ((v2 & 0x800) != 0)
    v3 = v60 + 2;
  else
    v3 = v60;
  if ((v2 & 0x1000) != 0)
  {
    v61 = *((_QWORD *)this + 11);
    v62 = *(unsigned __int8 *)(v61 + 23);
    v63 = v62;
    v64 = *(_QWORD *)(v61 + 8);
    if ((v62 & 0x80u) == 0)
      v65 = *(unsigned __int8 *)(v61 + 23);
    else
      v65 = v64;
    if (v65 >= 0x80)
    {
      v66 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v65);
      v62 = *(unsigned __int8 *)(v61 + 23);
      v64 = *(_QWORD *)(v61 + 8);
      v2 = *((_DWORD *)this + 29);
      v63 = *(_BYTE *)(v61 + 23);
    }
    else
    {
      v66 = 1;
    }
    if (v63 < 0)
      v62 = v64;
    v3 = (v3 + v66 + v62 + 1);
    if ((v2 & 0x2000) == 0)
    {
LABEL_110:
      if ((v2 & 0x4000) == 0)
        goto LABEL_139;
      goto LABEL_130;
    }
  }
  else if ((v2 & 0x2000) == 0)
  {
    goto LABEL_110;
  }
  v67 = *((_QWORD *)this + 12);
  v68 = *(unsigned __int8 *)(v67 + 23);
  v69 = v68;
  v70 = *(_QWORD *)(v67 + 8);
  if ((v68 & 0x80u) == 0)
    v71 = *(unsigned __int8 *)(v67 + 23);
  else
    v71 = v70;
  if (v71 >= 0x80)
  {
    v72 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v71);
    v68 = *(unsigned __int8 *)(v67 + 23);
    v70 = *(_QWORD *)(v67 + 8);
    v2 = *((_DWORD *)this + 29);
    v69 = *(_BYTE *)(v67 + 23);
  }
  else
  {
    v72 = 1;
  }
  if (v69 < 0)
    v68 = v70;
  v3 = (v3 + v72 + v68 + 1);
  if ((v2 & 0x4000) != 0)
  {
LABEL_130:
    v73 = *((_QWORD *)this + 13);
    v74 = *(unsigned __int8 *)(v73 + 23);
    v75 = v74;
    v76 = *(_QWORD *)(v73 + 8);
    if ((v74 & 0x80u) == 0)
      v77 = *(unsigned __int8 *)(v73 + 23);
    else
      v77 = v76;
    if (v77 >= 0x80)
    {
      v78 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v77);
      v74 = *(unsigned __int8 *)(v73 + 23);
      v76 = *(_QWORD *)(v73 + 8);
      v75 = *(_BYTE *)(v73 + 23);
    }
    else
    {
      v78 = 1;
    }
    if (v75 < 0)
      v74 = v76;
    v3 = (v3 + v78 + v74 + 1);
  }
LABEL_139:
  *((_DWORD *)this + 28) = v3;
  return v3;
}

void CLMicroLocationProto::HomeKitAccessory::CheckTypeAndMergeFrom(CLMicroLocationProto::HomeKitAccessory *this, const wireless_diagnostics::google::protobuf::MessageLite *lpsrc)
{
  uint64_t v4;
  uint64_t v5;

  CLMicroLocationProto::HomeKitAccessory::MergeFrom(this, lpsrc);
}

void CLMicroLocationProto::HomeKitAccessory::CopyFrom(CLMicroLocationProto::HomeKitAccessory *this, const CLMicroLocationProto::HomeKitAccessory *a2)
{
  if (a2 != this)
  {
    (*(void (**)(CLMicroLocationProto::HomeKitAccessory *))(*(_QWORD *)this + 32))(this);
    CLMicroLocationProto::HomeKitAccessory::MergeFrom(this, a2);
  }
}

uint64_t CLMicroLocationProto::HomeKitAccessory::IsInitialized(CLMicroLocationProto::HomeKitAccessory *this)
{
  return 1;
}

_QWORD *CLMicroLocationProto::HomeKitAccessory::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CLMicroLocationProto.HomeKitAccessory");
}

void CLMicroLocationProto::HomeKitScene::MergeFrom(CLMicroLocationProto::HomeKitScene *this, const CLMicroLocationProto::HomeKitScene *a2)
{
  int v4;
  unsigned int v5;
  const std::string *v6;
  std::string *v7;
  const std::string *v8;
  std::string *v9;
  const std::string *v10;
  std::string *v11;
  const std::string *v12;
  std::string *v13;
  const std::string *v14;
  std::string *v15;
  const std::string *v16;
  std::string *v17;
  const std::string *v18;
  std::string *v19;
  char v20;
  char v21;
  const std::string *v22;
  std::string *v23;
  _BYTE v24[48];

  if (a2 == this)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v24);
  }
  v4 = *((_DWORD *)a2 + 21);
  if (!(_BYTE)v4)
    goto LABEL_38;
  if ((v4 & 1) != 0)
  {
    v5 = *((_DWORD *)a2 + 12);
    if (v5 - 31 >= 0x19 && (v5 > 0xE || ((1 << v5) & 0x76B6) == 0))
      CLMicroLocationProto::HomeKitScene::MergeFrom();
    *((_DWORD *)this + 21) |= 1u;
    *((_DWORD *)this + 12) = v5;
    v4 = *((_DWORD *)a2 + 21);
  }
  if ((v4 & 2) != 0)
  {
    v6 = (const std::string *)*((_QWORD *)a2 + 1);
    *((_DWORD *)this + 21) |= 2u;
    v7 = (std::string *)*((_QWORD *)this + 1);
    if (v7 == (std::string *)MEMORY[0x24BEDD958])
    {
      v7 = (std::string *)operator new();
      v7->__r_.__value_.__l.__size_ = 0;
      v7->__r_.__value_.__r.__words[2] = 0;
      v7->__r_.__value_.__r.__words[0] = 0;
      *((_QWORD *)this + 1) = v7;
    }
    std::string::operator=(v7, v6);
    v4 = *((_DWORD *)a2 + 21);
    if ((v4 & 4) == 0)
    {
LABEL_11:
      if ((v4 & 8) == 0)
        goto LABEL_12;
      goto LABEL_23;
    }
  }
  else if ((v4 & 4) == 0)
  {
    goto LABEL_11;
  }
  v8 = (const std::string *)*((_QWORD *)a2 + 2);
  *((_DWORD *)this + 21) |= 4u;
  v9 = (std::string *)*((_QWORD *)this + 2);
  if (v9 == (std::string *)MEMORY[0x24BEDD958])
  {
    v9 = (std::string *)operator new();
    v9->__r_.__value_.__l.__size_ = 0;
    v9->__r_.__value_.__r.__words[2] = 0;
    v9->__r_.__value_.__r.__words[0] = 0;
    *((_QWORD *)this + 2) = v9;
  }
  std::string::operator=(v9, v8);
  v4 = *((_DWORD *)a2 + 21);
  if ((v4 & 8) == 0)
  {
LABEL_12:
    if ((v4 & 0x10) == 0)
      goto LABEL_13;
    goto LABEL_26;
  }
LABEL_23:
  v10 = (const std::string *)*((_QWORD *)a2 + 3);
  *((_DWORD *)this + 21) |= 8u;
  v11 = (std::string *)*((_QWORD *)this + 3);
  if (v11 == (std::string *)MEMORY[0x24BEDD958])
  {
    v11 = (std::string *)operator new();
    v11->__r_.__value_.__l.__size_ = 0;
    v11->__r_.__value_.__r.__words[2] = 0;
    v11->__r_.__value_.__r.__words[0] = 0;
    *((_QWORD *)this + 3) = v11;
  }
  std::string::operator=(v11, v10);
  v4 = *((_DWORD *)a2 + 21);
  if ((v4 & 0x10) == 0)
  {
LABEL_13:
    if ((v4 & 0x20) == 0)
      goto LABEL_14;
LABEL_29:
    v14 = (const std::string *)*((_QWORD *)a2 + 5);
    *((_DWORD *)this + 21) |= 0x20u;
    v15 = (std::string *)*((_QWORD *)this + 5);
    if (v15 == (std::string *)MEMORY[0x24BEDD958])
    {
      v15 = (std::string *)operator new();
      v15->__r_.__value_.__l.__size_ = 0;
      v15->__r_.__value_.__r.__words[2] = 0;
      v15->__r_.__value_.__r.__words[0] = 0;
      *((_QWORD *)this + 5) = v15;
    }
    std::string::operator=(v15, v14);
    v4 = *((_DWORD *)a2 + 21);
    if ((v4 & 0x40) == 0)
    {
LABEL_15:
      if ((v4 & 0x80) == 0)
        goto LABEL_38;
      goto LABEL_35;
    }
    goto LABEL_32;
  }
LABEL_26:
  v12 = (const std::string *)*((_QWORD *)a2 + 4);
  *((_DWORD *)this + 21) |= 0x10u;
  v13 = (std::string *)*((_QWORD *)this + 4);
  if (v13 == (std::string *)MEMORY[0x24BEDD958])
  {
    v13 = (std::string *)operator new();
    v13->__r_.__value_.__l.__size_ = 0;
    v13->__r_.__value_.__r.__words[2] = 0;
    v13->__r_.__value_.__r.__words[0] = 0;
    *((_QWORD *)this + 4) = v13;
  }
  std::string::operator=(v13, v12);
  v4 = *((_DWORD *)a2 + 21);
  if ((v4 & 0x20) != 0)
    goto LABEL_29;
LABEL_14:
  if ((v4 & 0x40) == 0)
    goto LABEL_15;
LABEL_32:
  v16 = (const std::string *)*((_QWORD *)a2 + 7);
  *((_DWORD *)this + 21) |= 0x40u;
  v17 = (std::string *)*((_QWORD *)this + 7);
  if (v17 == (std::string *)MEMORY[0x24BEDD958])
  {
    v17 = (std::string *)operator new();
    v17->__r_.__value_.__l.__size_ = 0;
    v17->__r_.__value_.__r.__words[2] = 0;
    v17->__r_.__value_.__r.__words[0] = 0;
    *((_QWORD *)this + 7) = v17;
  }
  std::string::operator=(v17, v16);
  v4 = *((_DWORD *)a2 + 21);
  if ((v4 & 0x80) != 0)
  {
LABEL_35:
    v18 = (const std::string *)*((_QWORD *)a2 + 8);
    *((_DWORD *)this + 21) |= 0x80u;
    v19 = (std::string *)*((_QWORD *)this + 8);
    if (v19 == (std::string *)MEMORY[0x24BEDD958])
    {
      v19 = (std::string *)operator new();
      v19->__r_.__value_.__l.__size_ = 0;
      v19->__r_.__value_.__r.__words[2] = 0;
      v19->__r_.__value_.__r.__words[0] = 0;
      *((_QWORD *)this + 8) = v19;
    }
    std::string::operator=(v19, v18);
    v4 = *((_DWORD *)a2 + 21);
  }
LABEL_38:
  if ((v4 & 0xFF00) == 0)
    return;
  if ((v4 & 0x100) == 0)
  {
    if ((v4 & 0x200) == 0)
      goto LABEL_41;
LABEL_44:
    v21 = *((_BYTE *)a2 + 53);
    *((_DWORD *)this + 21) |= 0x200u;
    *((_BYTE *)this + 53) = v21;
    if ((*((_DWORD *)a2 + 21) & 0x400) == 0)
      return;
    goto LABEL_45;
  }
  v20 = *((_BYTE *)a2 + 52);
  *((_DWORD *)this + 21) |= 0x100u;
  *((_BYTE *)this + 52) = v20;
  v4 = *((_DWORD *)a2 + 21);
  if ((v4 & 0x200) != 0)
    goto LABEL_44;
LABEL_41:
  if ((v4 & 0x400) == 0)
    return;
LABEL_45:
  v22 = (const std::string *)*((_QWORD *)a2 + 9);
  *((_DWORD *)this + 21) |= 0x400u;
  v23 = (std::string *)*((_QWORD *)this + 9);
  if (v23 == (std::string *)MEMORY[0x24BEDD958])
  {
    v23 = (std::string *)operator new();
    v23->__r_.__value_.__l.__size_ = 0;
    v23->__r_.__value_.__r.__words[2] = 0;
    v23->__r_.__value_.__r.__words[0] = 0;
    *((_QWORD *)this + 9) = v23;
  }
  std::string::operator=(v23, v22);
}

void sub_241AC66C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void CLMicroLocationProto::HomeKitScene::~HomeKitScene(CLMicroLocationProto::HomeKitScene *this)
{
  *(_QWORD *)this = &off_2511D7730;
  CLMicroLocationProto::HomeKitScene::SharedDtor(this);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

{
  CLMicroLocationProto::HomeKitScene::~HomeKitScene(this);
  JUMPOUT(0x2426A04D4);
}

void CLMicroLocationProto::HomeKitScene::SharedDtor(CLMicroLocationProto::HomeKitScene *this)
{
  CLMicroLocationProto::HomeKitScene *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v7;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v1 = this;
  v2 = *((_QWORD *)this + 1);
  v3 = MEMORY[0x24BEDD958];
  if (v2 != MEMORY[0x24BEDD958] && v2 != 0)
  {
    if (*(char *)(v2 + 23) < 0)
      operator delete(*(void **)v2);
    this = (CLMicroLocationProto::HomeKitScene *)MEMORY[0x2426A04D4](v2, 0x1012C40EC159624);
  }
  v5 = *((_QWORD *)v1 + 2);
  if (v5 != v3 && v5 != 0)
  {
    if (*(char *)(v5 + 23) < 0)
      operator delete(*(void **)v5);
    this = (CLMicroLocationProto::HomeKitScene *)MEMORY[0x2426A04D4](v5, 0x1012C40EC159624);
  }
  v7 = *((_QWORD *)v1 + 3);
  if (v7 != v3 && v7 != 0)
  {
    if (*(char *)(v7 + 23) < 0)
      operator delete(*(void **)v7);
    this = (CLMicroLocationProto::HomeKitScene *)MEMORY[0x2426A04D4](v7, 0x1012C40EC159624);
  }
  v9 = *((_QWORD *)v1 + 4);
  if (v9 != v3 && v9 != 0)
  {
    if (*(char *)(v9 + 23) < 0)
      operator delete(*(void **)v9);
    this = (CLMicroLocationProto::HomeKitScene *)MEMORY[0x2426A04D4](v9, 0x1012C40EC159624);
  }
  v11 = *((_QWORD *)v1 + 5);
  if (v11 != v3 && v11)
  {
    if (*(char *)(v11 + 23) < 0)
      operator delete(*(void **)v11);
    this = (CLMicroLocationProto::HomeKitScene *)MEMORY[0x2426A04D4](v11, 0x1012C40EC159624);
  }
  v12 = *((_QWORD *)v1 + 7);
  if (v12 != v3 && v12)
  {
    if (*(char *)(v12 + 23) < 0)
      operator delete(*(void **)v12);
    this = (CLMicroLocationProto::HomeKitScene *)MEMORY[0x2426A04D4](v12, 0x1012C40EC159624);
  }
  v13 = *((_QWORD *)v1 + 8);
  if (v13 != v3 && v13)
  {
    if (*(char *)(v13 + 23) < 0)
      operator delete(*(void **)v13);
    this = (CLMicroLocationProto::HomeKitScene *)MEMORY[0x2426A04D4](v13, 0x1012C40EC159624);
  }
  v14 = *((_QWORD *)v1 + 9);
  if (v14 != v3 && v14)
  {
    if (*(char *)(v14 + 23) < 0)
      operator delete(*(void **)v14);
    this = (CLMicroLocationProto::HomeKitScene *)MEMORY[0x2426A04D4](v14, 0x1012C40EC159624);
  }
  CLMicroLocationProto::protobuf_AddDesc_microlocation_2eproto(this);
}

uint64_t CLMicroLocationProto::HomeKitScene::New(CLMicroLocationProto::HomeKitScene *this)
{
  uint64_t result;
  uint64_t v2;

  result = operator new();
  *(_DWORD *)(result + 48) = 10;
  v2 = MEMORY[0x24BEDD958];
  *(_QWORD *)result = &off_2511D7730;
  *(_QWORD *)(result + 8) = v2;
  *(_QWORD *)(result + 16) = v2;
  *(_QWORD *)(result + 24) = v2;
  *(_QWORD *)(result + 32) = v2;
  *(_QWORD *)(result + 40) = v2;
  *(_QWORD *)(result + 56) = v2;
  *(_QWORD *)(result + 64) = v2;
  *(_WORD *)(result + 52) = 0;
  *(_QWORD *)(result + 72) = v2;
  *(_QWORD *)(result + 80) = 0;
  return result;
}

uint64_t CLMicroLocationProto::HomeKitScene::Clear(uint64_t this)
{
  char v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;

  v1 = *(_BYTE *)(this + 84);
  if (v1)
  {
    *(_DWORD *)(this + 48) = 10;
    v2 = MEMORY[0x24BEDD958];
    if ((v1 & 2) != 0)
    {
      v3 = *(_QWORD *)(this + 8);
      if (v3 != MEMORY[0x24BEDD958])
      {
        if (*(char *)(v3 + 23) < 0)
        {
          **(_BYTE **)v3 = 0;
          *(_QWORD *)(v3 + 8) = 0;
        }
        else
        {
          *(_BYTE *)v3 = 0;
          *(_BYTE *)(v3 + 23) = 0;
        }
      }
    }
    if ((*(_BYTE *)(this + 84) & 4) != 0)
    {
      v4 = *(_QWORD *)(this + 16);
      if (v4 != v2)
      {
        if (*(char *)(v4 + 23) < 0)
        {
          **(_BYTE **)v4 = 0;
          *(_QWORD *)(v4 + 8) = 0;
        }
        else
        {
          *(_BYTE *)v4 = 0;
          *(_BYTE *)(v4 + 23) = 0;
        }
      }
    }
    if ((*(_BYTE *)(this + 84) & 8) != 0)
    {
      v5 = *(_QWORD *)(this + 24);
      if (v5 != v2)
      {
        if (*(char *)(v5 + 23) < 0)
        {
          **(_BYTE **)v5 = 0;
          *(_QWORD *)(v5 + 8) = 0;
        }
        else
        {
          *(_BYTE *)v5 = 0;
          *(_BYTE *)(v5 + 23) = 0;
        }
      }
    }
    if ((*(_BYTE *)(this + 84) & 0x10) != 0)
    {
      v6 = *(_QWORD *)(this + 32);
      if (v6 != v2)
      {
        if (*(char *)(v6 + 23) < 0)
        {
          **(_BYTE **)v6 = 0;
          *(_QWORD *)(v6 + 8) = 0;
        }
        else
        {
          *(_BYTE *)v6 = 0;
          *(_BYTE *)(v6 + 23) = 0;
        }
      }
    }
    if ((*(_BYTE *)(this + 84) & 0x20) != 0)
    {
      v7 = *(_QWORD *)(this + 40);
      if (v7 != v2)
      {
        if (*(char *)(v7 + 23) < 0)
        {
          **(_BYTE **)v7 = 0;
          *(_QWORD *)(v7 + 8) = 0;
        }
        else
        {
          *(_BYTE *)v7 = 0;
          *(_BYTE *)(v7 + 23) = 0;
        }
      }
    }
    if ((*(_BYTE *)(this + 84) & 0x40) != 0)
    {
      v8 = *(_QWORD *)(this + 56);
      if (v8 != v2)
      {
        if (*(char *)(v8 + 23) < 0)
        {
          **(_BYTE **)v8 = 0;
          *(_QWORD *)(v8 + 8) = 0;
        }
        else
        {
          *(_BYTE *)v8 = 0;
          *(_BYTE *)(v8 + 23) = 0;
        }
      }
    }
    if ((*(_BYTE *)(this + 84) & 0x80) != 0)
    {
      v9 = *(_QWORD *)(this + 64);
      if (v9 != v2)
      {
        if (*(char *)(v9 + 23) < 0)
        {
          **(_BYTE **)v9 = 0;
          *(_QWORD *)(v9 + 8) = 0;
        }
        else
        {
          *(_BYTE *)v9 = 0;
          *(_BYTE *)(v9 + 23) = 0;
        }
      }
    }
  }
  v10 = *(_DWORD *)(this + 84);
  if ((v10 & 0xFF00) != 0)
  {
    *(_WORD *)(this + 52) = 0;
    if ((v10 & 0x400) != 0)
    {
      v11 = *(_QWORD *)(this + 72);
      if (v11 != MEMORY[0x24BEDD958])
      {
        if (*(char *)(v11 + 23) < 0)
        {
          **(_BYTE **)v11 = 0;
          *(_QWORD *)(v11 + 8) = 0;
        }
        else
        {
          *(_BYTE *)v11 = 0;
          *(_BYTE *)(v11 + 23) = 0;
        }
      }
    }
  }
  *(_DWORD *)(this + 84) = 0;
  return this;
}

uint64_t CLMicroLocationProto::HomeKitScene::MergePartialFromCodedStream(CLMicroLocationProto::HomeKitScene *this, wireless_diagnostics::google::protobuf::io::CodedInputStream *a2)
{
  uint64_t v4;
  char *v5;
  uint64_t TagFallback;
  int v7;
  char *v8;
  unsigned int v9;
  unint64_t v10;
  char *v11;
  char *v12;
  int v13;
  BOOL v14;
  _BYTE *v15;
  _QWORD *v16;
  _BYTE *v17;
  _QWORD *v18;
  _BYTE *v19;
  _QWORD *v20;
  _BYTE *v21;
  _QWORD *v22;
  _BYTE *v23;
  _QWORD *v24;
  _BYTE *v25;
  _QWORD *v26;
  _BYTE *v27;
  _QWORD *v28;
  _BYTE *v29;
  unsigned int v30;
  _BYTE *v31;
  unsigned int v32;
  _BYTE *v33;
  _QWORD *v34;
  uint64_t result;
  unsigned int v36;
  unsigned int v37;
  unsigned int v38;

  v4 = MEMORY[0x24BEDD958];
  while (2)
  {
    v5 = (char *)*((_QWORD *)a2 + 1);
    if ((unint64_t)v5 >= *((_QWORD *)a2 + 2) || *v5 < 0)
    {
      TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(a2);
      *((_DWORD *)a2 + 8) = TagFallback;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    else
    {
      TagFallback = *v5;
      *((_DWORD *)a2 + 8) = TagFallback;
      *((_QWORD *)a2 + 1) = v5 + 1;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    switch(TagFallback >> 3)
    {
      case 1u:
        v7 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_33;
        v36 = 0;
        v8 = (char *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v8 < *((_QWORD *)a2 + 2) && (*v8 & 0x80000000) == 0)
        {
          v9 = *v8;
          *((_QWORD *)a2 + 1) = v8 + 1;
LABEL_38:
          if (v9 - 31 < 0x19 || (v9 <= 0xE ? (v14 = ((1 << v9) & 0x76B6) == 0) : (v14 = 1), !v14))
          {
            if (v9 - 31 >= 0x19 && (v9 > 0xE || ((1 << v9) & 0x76B6) == 0))
              CLMicroLocationProto::HomeKitScene::MergeFrom();
            *((_DWORD *)this + 21) |= 1u;
            *((_DWORD *)this + 12) = v9;
          }
          v15 = (_BYTE *)*((_QWORD *)a2 + 1);
          if ((unint64_t)v15 < *((_QWORD *)a2 + 2) && *v15 == 18)
          {
            *((_QWORD *)a2 + 1) = v15 + 1;
            goto LABEL_50;
          }
          continue;
        }
        result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v36);
        if ((_DWORD)result)
        {
          v9 = v36;
          goto LABEL_38;
        }
        break;
      case 2u:
        v7 = TagFallback & 7;
        if (v7 != 2)
          goto LABEL_33;
LABEL_50:
        *((_DWORD *)this + 21) |= 2u;
        if (*((_QWORD *)this + 1) == v4)
        {
          v16 = (_QWORD *)operator new();
          v16[1] = 0;
          v16[2] = 0;
          *v16 = 0;
          *((_QWORD *)this + 1) = v16;
        }
        result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString();
        if (!(_DWORD)result)
          return result;
        v17 = (_BYTE *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v17 >= *((_QWORD *)a2 + 2) || *v17 != 26)
          continue;
        *((_QWORD *)a2 + 1) = v17 + 1;
LABEL_56:
        *((_DWORD *)this + 21) |= 4u;
        if (*((_QWORD *)this + 2) == v4)
        {
          v18 = (_QWORD *)operator new();
          v18[1] = 0;
          v18[2] = 0;
          *v18 = 0;
          *((_QWORD *)this + 2) = v18;
        }
        result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString();
        if (!(_DWORD)result)
          return result;
        v19 = (_BYTE *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v19 >= *((_QWORD *)a2 + 2) || *v19 != 34)
          continue;
        *((_QWORD *)a2 + 1) = v19 + 1;
LABEL_62:
        *((_DWORD *)this + 21) |= 8u;
        if (*((_QWORD *)this + 3) == v4)
        {
          v20 = (_QWORD *)operator new();
          v20[1] = 0;
          v20[2] = 0;
          *v20 = 0;
          *((_QWORD *)this + 3) = v20;
        }
        result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString();
        if (!(_DWORD)result)
          return result;
        v21 = (_BYTE *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v21 >= *((_QWORD *)a2 + 2) || *v21 != 42)
          continue;
        *((_QWORD *)a2 + 1) = v21 + 1;
LABEL_68:
        *((_DWORD *)this + 21) |= 0x10u;
        if (*((_QWORD *)this + 4) == v4)
        {
          v22 = (_QWORD *)operator new();
          v22[1] = 0;
          v22[2] = 0;
          *v22 = 0;
          *((_QWORD *)this + 4) = v22;
        }
        result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString();
        if (!(_DWORD)result)
          return result;
        v23 = (_BYTE *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v23 >= *((_QWORD *)a2 + 2) || *v23 != 50)
          continue;
        *((_QWORD *)a2 + 1) = v23 + 1;
LABEL_74:
        *((_DWORD *)this + 21) |= 0x20u;
        if (*((_QWORD *)this + 5) == v4)
        {
          v24 = (_QWORD *)operator new();
          v24[1] = 0;
          v24[2] = 0;
          *v24 = 0;
          *((_QWORD *)this + 5) = v24;
        }
        result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString();
        if (!(_DWORD)result)
          return result;
        v25 = (_BYTE *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v25 >= *((_QWORD *)a2 + 2) || *v25 != 58)
          continue;
        *((_QWORD *)a2 + 1) = v25 + 1;
LABEL_80:
        *((_DWORD *)this + 21) |= 0x40u;
        if (*((_QWORD *)this + 7) == v4)
        {
          v26 = (_QWORD *)operator new();
          v26[1] = 0;
          v26[2] = 0;
          *v26 = 0;
          *((_QWORD *)this + 7) = v26;
        }
        result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString();
        if (!(_DWORD)result)
          return result;
        v27 = (_BYTE *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v27 >= *((_QWORD *)a2 + 2) || *v27 != 66)
          continue;
        *((_QWORD *)a2 + 1) = v27 + 1;
LABEL_86:
        *((_DWORD *)this + 21) |= 0x80u;
        if (*((_QWORD *)this + 8) == v4)
        {
          v28 = (_QWORD *)operator new();
          v28[1] = 0;
          v28[2] = 0;
          *v28 = 0;
          *((_QWORD *)this + 8) = v28;
        }
        result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString();
        if (!(_DWORD)result)
          return result;
        v29 = (_BYTE *)*((_QWORD *)a2 + 1);
        v10 = *((_QWORD *)a2 + 2);
        if ((unint64_t)v29 >= v10 || *v29 != 72)
          continue;
        v12 = v29 + 1;
        *((_QWORD *)a2 + 1) = v12;
LABEL_92:
        v38 = 0;
        if ((unint64_t)v12 >= v10 || *v12 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v38);
          if (!(_DWORD)result)
            return result;
          v30 = v38;
          v31 = (_BYTE *)*((_QWORD *)a2 + 1);
          v10 = *((_QWORD *)a2 + 2);
        }
        else
        {
          v30 = *v12;
          v31 = v12 + 1;
          *((_QWORD *)a2 + 1) = v31;
        }
        *((_BYTE *)this + 52) = v30 != 0;
        *((_DWORD *)this + 21) |= 0x100u;
        if ((unint64_t)v31 >= v10 || *v31 != 80)
          continue;
        v11 = v31 + 1;
        *((_QWORD *)a2 + 1) = v11;
LABEL_100:
        v37 = 0;
        if ((unint64_t)v11 >= v10 || *v11 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v37);
          if (!(_DWORD)result)
            return result;
          v32 = v37;
          v33 = (_BYTE *)*((_QWORD *)a2 + 1);
          v10 = *((_QWORD *)a2 + 2);
        }
        else
        {
          v32 = *v11;
          v33 = v11 + 1;
          *((_QWORD *)a2 + 1) = v33;
        }
        *((_BYTE *)this + 53) = v32 != 0;
        v13 = *((_DWORD *)this + 21) | 0x200;
        *((_DWORD *)this + 21) = v13;
        if ((unint64_t)v33 >= v10 || *v33 != 90)
          continue;
        *((_QWORD *)a2 + 1) = v33 + 1;
LABEL_108:
        *((_DWORD *)this + 21) = v13 | 0x400;
        if (*((_QWORD *)this + 9) == v4)
        {
          v34 = (_QWORD *)operator new();
          v34[1] = 0;
          v34[2] = 0;
          *v34 = 0;
          *((_QWORD *)this + 9) = v34;
        }
        result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString();
        if (!(_DWORD)result)
          return result;
        if (*((_QWORD *)a2 + 1) != *((_QWORD *)a2 + 2)
          || !*((_DWORD *)a2 + 11) && *((_DWORD *)a2 + 6) != *((_DWORD *)a2 + 10))
        {
          continue;
        }
        *((_DWORD *)a2 + 8) = 0;
        result = 1;
        *((_BYTE *)a2 + 36) = 1;
        return result;
      case 3u:
        v7 = TagFallback & 7;
        if (v7 == 2)
          goto LABEL_56;
        goto LABEL_33;
      case 4u:
        v7 = TagFallback & 7;
        if (v7 == 2)
          goto LABEL_62;
        goto LABEL_33;
      case 5u:
        v7 = TagFallback & 7;
        if (v7 == 2)
          goto LABEL_68;
        goto LABEL_33;
      case 6u:
        v7 = TagFallback & 7;
        if (v7 == 2)
          goto LABEL_74;
        goto LABEL_33;
      case 7u:
        v7 = TagFallback & 7;
        if (v7 == 2)
          goto LABEL_80;
        goto LABEL_33;
      case 8u:
        v7 = TagFallback & 7;
        if (v7 == 2)
          goto LABEL_86;
        goto LABEL_33;
      case 9u:
        v7 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_33;
        v12 = (char *)*((_QWORD *)a2 + 1);
        v10 = *((_QWORD *)a2 + 2);
        goto LABEL_92;
      case 0xAu:
        v7 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_33;
        v11 = (char *)*((_QWORD *)a2 + 1);
        v10 = *((_QWORD *)a2 + 2);
        goto LABEL_100;
      case 0xBu:
        v7 = TagFallback & 7;
        if (v7 != 2)
          goto LABEL_33;
        v13 = *((_DWORD *)this + 21);
        goto LABEL_108;
      default:
        v7 = TagFallback & 7;
LABEL_33:
        if (v7 == 4)
          return 1;
        if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(a2, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback) & 1) != 0)continue;
        return 0;
    }
    return result;
  }
}

uint64_t CLMicroLocationProto::HomeKitScene::SerializeWithCachedSizes(uint64_t this, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  int v6;

  v5 = this;
  v6 = *(_DWORD *)(this + 84);
  if ((v6 & 1) != 0)
  {
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(unsigned int *)(this + 48), (uint64_t)a2, a4);
    v6 = *(_DWORD *)(v5 + 84);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0)
        goto LABEL_4;
      goto LABEL_15;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString();
  v6 = *(_DWORD *)(v5 + 84);
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0)
      goto LABEL_5;
    goto LABEL_16;
  }
LABEL_15:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString();
  v6 = *(_DWORD *)(v5 + 84);
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_17;
  }
LABEL_16:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString();
  v6 = *(_DWORD *)(v5 + 84);
  if ((v6 & 0x10) == 0)
  {
LABEL_6:
    if ((v6 & 0x20) == 0)
      goto LABEL_7;
    goto LABEL_18;
  }
LABEL_17:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString();
  v6 = *(_DWORD *)(v5 + 84);
  if ((v6 & 0x20) == 0)
  {
LABEL_7:
    if ((v6 & 0x40) == 0)
      goto LABEL_8;
    goto LABEL_19;
  }
LABEL_18:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString();
  v6 = *(_DWORD *)(v5 + 84);
  if ((v6 & 0x40) == 0)
  {
LABEL_8:
    if ((v6 & 0x80) == 0)
      goto LABEL_9;
    goto LABEL_20;
  }
LABEL_19:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString();
  v6 = *(_DWORD *)(v5 + 84);
  if ((v6 & 0x80) == 0)
  {
LABEL_9:
    if ((v6 & 0x100) == 0)
      goto LABEL_10;
    goto LABEL_21;
  }
LABEL_20:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString();
  v6 = *(_DWORD *)(v5 + 84);
  if ((v6 & 0x100) == 0)
  {
LABEL_10:
    if ((v6 & 0x200) == 0)
      goto LABEL_11;
    goto LABEL_22;
  }
LABEL_21:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)9, *(unsigned __int8 *)(v5 + 52), (uint64_t)a2, a4);
  v6 = *(_DWORD *)(v5 + 84);
  if ((v6 & 0x200) == 0)
  {
LABEL_11:
    if ((v6 & 0x400) == 0)
      return this;
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString();
  }
LABEL_22:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xA, *(unsigned __int8 *)(v5 + 53), (uint64_t)a2, a4);
  if ((*(_DWORD *)(v5 + 84) & 0x400) != 0)
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString();
  return this;
}

uint64_t CLMicroLocationProto::HomeKitScene::ByteSize(CLMicroLocationProto::HomeKitScene *this)
{
  int v2;
  uint64_t v3;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v4;
  int v5;
  uint64_t v6;
  int v7;
  char v8;
  uint64_t v9;
  unint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  char v14;
  uint64_t v15;
  unint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  char v20;
  uint64_t v21;
  unint64_t v22;
  int v23;
  uint64_t v24;
  int v25;
  char v26;
  uint64_t v27;
  unint64_t v28;
  int v29;
  uint64_t v30;
  int v31;
  char v32;
  uint64_t v33;
  unint64_t v34;
  int v35;
  uint64_t v36;
  int v37;
  char v38;
  uint64_t v39;
  unint64_t v40;
  int v41;
  uint64_t v42;
  int v43;
  char v44;
  uint64_t v45;
  unint64_t v46;
  int v47;
  unsigned int v48;
  uint64_t v49;
  int v50;
  char v51;
  uint64_t v52;
  unint64_t v53;
  int v54;

  v2 = *((_DWORD *)this + 21);
  if (!(_BYTE)v2)
  {
    v3 = 0;
    goto LABEL_82;
  }
  if ((v2 & 1) != 0)
  {
    v4 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 12);
    if ((v4 & 0x80000000) != 0)
    {
      v5 = 10;
    }
    else if (v4 >= 0x80)
    {
      v5 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v4);
      v2 = *((_DWORD *)this + 21);
    }
    else
    {
      v5 = 1;
    }
    v3 = (v5 + 1);
    if ((v2 & 2) == 0)
      goto LABEL_21;
  }
  else
  {
    v3 = 0;
    if ((v2 & 2) == 0)
      goto LABEL_21;
  }
  v6 = *((_QWORD *)this + 1);
  v7 = *(unsigned __int8 *)(v6 + 23);
  v8 = v7;
  v9 = *(_QWORD *)(v6 + 8);
  if ((v7 & 0x80u) == 0)
    v10 = *(unsigned __int8 *)(v6 + 23);
  else
    v10 = v9;
  if (v10 >= 0x80)
  {
    v11 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v10);
    v7 = *(unsigned __int8 *)(v6 + 23);
    v9 = *(_QWORD *)(v6 + 8);
    v2 = *((_DWORD *)this + 21);
    v8 = *(_BYTE *)(v6 + 23);
  }
  else
  {
    v11 = 1;
  }
  if (v8 < 0)
    v7 = v9;
  v3 = (v3 + v11 + v7 + 1);
LABEL_21:
  if ((v2 & 4) != 0)
  {
    v12 = *((_QWORD *)this + 2);
    v13 = *(unsigned __int8 *)(v12 + 23);
    v14 = v13;
    v15 = *(_QWORD *)(v12 + 8);
    if ((v13 & 0x80u) == 0)
      v16 = *(unsigned __int8 *)(v12 + 23);
    else
      v16 = v15;
    if (v16 >= 0x80)
    {
      v17 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v16);
      v13 = *(unsigned __int8 *)(v12 + 23);
      v15 = *(_QWORD *)(v12 + 8);
      v2 = *((_DWORD *)this + 21);
      v14 = *(_BYTE *)(v12 + 23);
    }
    else
    {
      v17 = 1;
    }
    if (v14 < 0)
      v13 = v15;
    v3 = (v3 + v17 + v13 + 1);
    if ((v2 & 8) == 0)
    {
LABEL_23:
      if ((v2 & 0x10) == 0)
        goto LABEL_24;
      goto LABEL_46;
    }
  }
  else if ((v2 & 8) == 0)
  {
    goto LABEL_23;
  }
  v18 = *((_QWORD *)this + 3);
  v19 = *(unsigned __int8 *)(v18 + 23);
  v20 = v19;
  v21 = *(_QWORD *)(v18 + 8);
  if ((v19 & 0x80u) == 0)
    v22 = *(unsigned __int8 *)(v18 + 23);
  else
    v22 = v21;
  if (v22 >= 0x80)
  {
    v23 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v22);
    v19 = *(unsigned __int8 *)(v18 + 23);
    v21 = *(_QWORD *)(v18 + 8);
    v2 = *((_DWORD *)this + 21);
    v20 = *(_BYTE *)(v18 + 23);
  }
  else
  {
    v23 = 1;
  }
  if (v20 < 0)
    v19 = v21;
  v3 = (v3 + v23 + v19 + 1);
  if ((v2 & 0x10) == 0)
  {
LABEL_24:
    if ((v2 & 0x20) == 0)
      goto LABEL_25;
    goto LABEL_55;
  }
LABEL_46:
  v24 = *((_QWORD *)this + 4);
  v25 = *(unsigned __int8 *)(v24 + 23);
  v26 = v25;
  v27 = *(_QWORD *)(v24 + 8);
  if ((v25 & 0x80u) == 0)
    v28 = *(unsigned __int8 *)(v24 + 23);
  else
    v28 = v27;
  if (v28 >= 0x80)
  {
    v29 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v28);
    v25 = *(unsigned __int8 *)(v24 + 23);
    v27 = *(_QWORD *)(v24 + 8);
    v2 = *((_DWORD *)this + 21);
    v26 = *(_BYTE *)(v24 + 23);
  }
  else
  {
    v29 = 1;
  }
  if (v26 < 0)
    v25 = v27;
  v3 = (v3 + v29 + v25 + 1);
  if ((v2 & 0x20) == 0)
  {
LABEL_25:
    if ((v2 & 0x40) == 0)
      goto LABEL_26;
    goto LABEL_64;
  }
LABEL_55:
  v30 = *((_QWORD *)this + 5);
  v31 = *(unsigned __int8 *)(v30 + 23);
  v32 = v31;
  v33 = *(_QWORD *)(v30 + 8);
  if ((v31 & 0x80u) == 0)
    v34 = *(unsigned __int8 *)(v30 + 23);
  else
    v34 = v33;
  if (v34 >= 0x80)
  {
    v35 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v34);
    v31 = *(unsigned __int8 *)(v30 + 23);
    v33 = *(_QWORD *)(v30 + 8);
    v2 = *((_DWORD *)this + 21);
    v32 = *(_BYTE *)(v30 + 23);
  }
  else
  {
    v35 = 1;
  }
  if (v32 < 0)
    v31 = v33;
  v3 = (v3 + v35 + v31 + 1);
  if ((v2 & 0x40) == 0)
  {
LABEL_26:
    if ((v2 & 0x80) == 0)
      goto LABEL_82;
    goto LABEL_73;
  }
LABEL_64:
  v36 = *((_QWORD *)this + 7);
  v37 = *(unsigned __int8 *)(v36 + 23);
  v38 = v37;
  v39 = *(_QWORD *)(v36 + 8);
  if ((v37 & 0x80u) == 0)
    v40 = *(unsigned __int8 *)(v36 + 23);
  else
    v40 = v39;
  if (v40 >= 0x80)
  {
    v41 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v40);
    v37 = *(unsigned __int8 *)(v36 + 23);
    v39 = *(_QWORD *)(v36 + 8);
    v2 = *((_DWORD *)this + 21);
    v38 = *(_BYTE *)(v36 + 23);
  }
  else
  {
    v41 = 1;
  }
  if (v38 < 0)
    v37 = v39;
  v3 = (v3 + v41 + v37 + 1);
  if ((v2 & 0x80) != 0)
  {
LABEL_73:
    v42 = *((_QWORD *)this + 8);
    v43 = *(unsigned __int8 *)(v42 + 23);
    v44 = v43;
    v45 = *(_QWORD *)(v42 + 8);
    if ((v43 & 0x80u) == 0)
      v46 = *(unsigned __int8 *)(v42 + 23);
    else
      v46 = v45;
    if (v46 >= 0x80)
    {
      v47 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v46);
      v43 = *(unsigned __int8 *)(v42 + 23);
      v45 = *(_QWORD *)(v42 + 8);
      v2 = *((_DWORD *)this + 21);
      v44 = *(_BYTE *)(v42 + 23);
    }
    else
    {
      v47 = 1;
    }
    if (v44 < 0)
      v43 = v45;
    v3 = (v3 + v47 + v43 + 1);
  }
LABEL_82:
  if ((v2 & 0xFF00) != 0)
  {
    v48 = v3 + 2;
    if ((v2 & 0x100) == 0)
      v48 = v3;
    if ((v2 & 0x200) != 0)
      v3 = v48 + 2;
    else
      v3 = v48;
    if ((v2 & 0x400) != 0)
    {
      v49 = *((_QWORD *)this + 9);
      v50 = *(unsigned __int8 *)(v49 + 23);
      v51 = v50;
      v52 = *(_QWORD *)(v49 + 8);
      if ((v50 & 0x80u) == 0)
        v53 = *(unsigned __int8 *)(v49 + 23);
      else
        v53 = v52;
      if (v53 >= 0x80)
      {
        v54 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v53);
        v50 = *(unsigned __int8 *)(v49 + 23);
        v52 = *(_QWORD *)(v49 + 8);
        v51 = *(_BYTE *)(v49 + 23);
      }
      else
      {
        v54 = 1;
      }
      if (v51 < 0)
        v50 = v52;
      v3 = (v3 + v54 + v50 + 1);
    }
  }
  *((_DWORD *)this + 20) = v3;
  return v3;
}

void CLMicroLocationProto::HomeKitScene::CheckTypeAndMergeFrom(CLMicroLocationProto::HomeKitScene *this, const wireless_diagnostics::google::protobuf::MessageLite *lpsrc)
{
  uint64_t v4;
  uint64_t v5;

  CLMicroLocationProto::HomeKitScene::MergeFrom(this, lpsrc);
}

void CLMicroLocationProto::HomeKitScene::CopyFrom(CLMicroLocationProto::HomeKitScene *this, const CLMicroLocationProto::HomeKitScene *a2)
{
  if (a2 != this)
  {
    (*(void (**)(CLMicroLocationProto::HomeKitScene *))(*(_QWORD *)this + 32))(this);
    CLMicroLocationProto::HomeKitScene::MergeFrom(this, a2);
  }
}

uint64_t CLMicroLocationProto::HomeKitScene::IsInitialized(CLMicroLocationProto::HomeKitScene *this)
{
  return 1;
}

_QWORD *CLMicroLocationProto::HomeKitScene::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CLMicroLocationProto.HomeKitScene");
}

void CLMicroLocationProto::NowPlayingOutputDevice::MergeFrom(CLMicroLocationProto::NowPlayingOutputDevice *this, const CLMicroLocationProto::NowPlayingOutputDevice *a2)
{
  int v4;
  int v5;
  int v6;
  const std::string *v7;
  std::string *v8;
  _BYTE v9[48];

  if (a2 == this)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v9);
  }
  LOBYTE(v4) = *((_BYTE *)a2 + 28);
  if ((_BYTE)v4)
  {
    if ((*((_BYTE *)a2 + 28) & 1) != 0)
    {
      v5 = *((_DWORD *)a2 + 2);
      *((_DWORD *)this + 7) |= 1u;
      *((_DWORD *)this + 2) = v5;
      v4 = *((_DWORD *)a2 + 7);
      if ((v4 & 2) == 0)
      {
LABEL_6:
        if ((v4 & 4) == 0)
          return;
        goto LABEL_10;
      }
    }
    else if ((*((_BYTE *)a2 + 28) & 2) == 0)
    {
      goto LABEL_6;
    }
    v6 = *((_DWORD *)a2 + 3);
    *((_DWORD *)this + 7) |= 2u;
    *((_DWORD *)this + 3) = v6;
    if ((*((_DWORD *)a2 + 7) & 4) == 0)
      return;
LABEL_10:
    v7 = (const std::string *)*((_QWORD *)a2 + 2);
    *((_DWORD *)this + 7) |= 4u;
    v8 = (std::string *)*((_QWORD *)this + 2);
    if (v8 == (std::string *)MEMORY[0x24BEDD958])
    {
      v8 = (std::string *)operator new();
      v8->__r_.__value_.__l.__size_ = 0;
      v8->__r_.__value_.__r.__words[2] = 0;
      v8->__r_.__value_.__r.__words[0] = 0;
      *((_QWORD *)this + 2) = v8;
    }
    std::string::operator=(v8, v7);
  }
}

void sub_241AC7840(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void CLMicroLocationProto::NowPlayingOutputDevice::~NowPlayingOutputDevice(CLMicroLocationProto::NowPlayingOutputDevice *this)
{
  *(_QWORD *)this = &off_2511D77A8;
  CLMicroLocationProto::DeviceId::SharedDtor(this);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

{
  CLMicroLocationProto::NowPlayingOutputDevice::~NowPlayingOutputDevice(this);
  JUMPOUT(0x2426A04D4);
}

double CLMicroLocationProto::NowPlayingOutputDevice::New(CLMicroLocationProto::NowPlayingOutputDevice *this)
{
  _QWORD *v1;
  double result;

  v1 = (_QWORD *)operator new();
  *v1 = &off_2511D77A8;
  result = 0.0;
  v1[1] = 0;
  v1[2] = MEMORY[0x24BEDD958];
  v1[3] = 0;
  return result;
}

uint64_t CLMicroLocationProto::NowPlayingOutputDevice::Clear(uint64_t this)
{
  char v1;
  uint64_t v2;

  v1 = *(_BYTE *)(this + 28);
  if (v1)
  {
    *(_QWORD *)(this + 8) = 0;
    if ((v1 & 4) != 0)
    {
      v2 = *(_QWORD *)(this + 16);
      if (v2 != MEMORY[0x24BEDD958])
      {
        if (*(char *)(v2 + 23) < 0)
        {
          **(_BYTE **)v2 = 0;
          *(_QWORD *)(v2 + 8) = 0;
        }
        else
        {
          *(_BYTE *)v2 = 0;
          *(_BYTE *)(v2 + 23) = 0;
        }
      }
    }
  }
  *(_DWORD *)(this + 28) = 0;
  return this;
}

uint64_t CLMicroLocationProto::NowPlayingOutputDevice::MergePartialFromCodedStream(CLMicroLocationProto::NowPlayingOutputDevice *this, wireless_diagnostics::google::protobuf::io::CodedInputStream *a2)
{
  unsigned int *v4;
  unsigned int *v5;
  uint64_t v6;
  char *v7;
  uint64_t TagFallback;
  unsigned int v9;
  int v10;
  int v11;
  unint64_t v12;
  char *v13;
  _BYTE *v14;
  char *v15;
  _BYTE *v16;
  _QWORD *v17;
  uint64_t result;

  v4 = (unsigned int *)((char *)this + 8);
  v5 = (unsigned int *)((char *)this + 12);
  v6 = MEMORY[0x24BEDD958];
  while (1)
  {
    while (1)
    {
      while (1)
      {
        while (1)
        {
          v7 = (char *)*((_QWORD *)a2 + 1);
          if ((unint64_t)v7 >= *((_QWORD *)a2 + 2) || *v7 < 0)
          {
            TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(a2);
            *((_DWORD *)a2 + 8) = TagFallback;
            if (!(_DWORD)TagFallback)
              return 1;
          }
          else
          {
            TagFallback = *v7;
            *((_DWORD *)a2 + 8) = TagFallback;
            *((_QWORD *)a2 + 1) = v7 + 1;
            if (!(_DWORD)TagFallback)
              return 1;
          }
          v9 = TagFallback >> 3;
          if (TagFallback >> 3 != 1)
            break;
          v10 = TagFallback & 7;
          if ((TagFallback & 7) != 0)
            goto LABEL_19;
          v13 = (char *)*((_QWORD *)a2 + 1);
          v12 = *((_QWORD *)a2 + 2);
          if ((unint64_t)v13 >= v12 || *v13 < 0)
          {
            result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v4);
            if (!(_DWORD)result)
              return result;
            v14 = (_BYTE *)*((_QWORD *)a2 + 1);
            v12 = *((_QWORD *)a2 + 2);
          }
          else
          {
            *v4 = *v13;
            v14 = v13 + 1;
            *((_QWORD *)a2 + 1) = v14;
          }
          *((_DWORD *)this + 7) |= 1u;
          if ((unint64_t)v14 < v12 && *v14 == 16)
          {
            v15 = v14 + 1;
            *((_QWORD *)a2 + 1) = v15;
            goto LABEL_27;
          }
        }
        if (v9 != 2)
          break;
        v10 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_19;
        v15 = (char *)*((_QWORD *)a2 + 1);
        v12 = *((_QWORD *)a2 + 2);
LABEL_27:
        if ((unint64_t)v15 >= v12 || *v15 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v5);
          if (!(_DWORD)result)
            return result;
          v16 = (_BYTE *)*((_QWORD *)a2 + 1);
          v12 = *((_QWORD *)a2 + 2);
        }
        else
        {
          *v5 = *v15;
          v16 = v15 + 1;
          *((_QWORD *)a2 + 1) = v16;
        }
        v11 = *((_DWORD *)this + 7) | 2;
        *((_DWORD *)this + 7) = v11;
        if ((unint64_t)v16 < v12 && *v16 == 26)
        {
          *((_QWORD *)a2 + 1) = v16 + 1;
          goto LABEL_35;
        }
      }
      if (v9 != 3)
        break;
      v10 = TagFallback & 7;
      if (v10 != 2)
        goto LABEL_19;
      v11 = *((_DWORD *)this + 7);
LABEL_35:
      *((_DWORD *)this + 7) = v11 | 4;
      if (*((_QWORD *)this + 2) == v6)
      {
        v17 = (_QWORD *)operator new();
        v17[1] = 0;
        v17[2] = 0;
        *v17 = 0;
        *((_QWORD *)this + 2) = v17;
      }
      result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString();
      if (!(_DWORD)result)
        return result;
      if (*((_QWORD *)a2 + 1) == *((_QWORD *)a2 + 2)
        && (*((_DWORD *)a2 + 11) || *((_DWORD *)a2 + 6) == *((_DWORD *)a2 + 10)))
      {
        *((_DWORD *)a2 + 8) = 0;
        result = 1;
        *((_BYTE *)a2 + 36) = 1;
        return result;
      }
    }
    v10 = TagFallback & 7;
LABEL_19:
    if (v10 == 4)
      return 1;
    if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(a2, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback) & 1) == 0)return 0;
  }
}

uint64_t CLMicroLocationProto::NowPlayingOutputDevice::SerializeWithCachedSizes(uint64_t this, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  int v6;

  v5 = this;
  v6 = *(_DWORD *)(this + 28);
  if ((v6 & 1) != 0)
  {
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(unsigned int *)(this + 8), (uint64_t)a2, a4);
    v6 = *(_DWORD *)(v5 + 28);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0)
        return this;
      return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString();
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, *(unsigned int *)(v5 + 12), (uint64_t)a2, a4);
  if ((*(_DWORD *)(v5 + 28) & 4) != 0)
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString();
  return this;
}

uint64_t CLMicroLocationProto::NowPlayingOutputDevice::ByteSize(CLMicroLocationProto::NowPlayingOutputDevice *this)
{
  int v2;
  uint64_t v3;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v4;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v5;
  int v6;
  uint64_t v7;
  int v8;
  char v9;
  uint64_t v10;
  unint64_t v11;
  int v12;

  LOBYTE(v2) = *((_BYTE *)this + 28);
  if (!(_BYTE)v2)
  {
    v3 = 0;
    goto LABEL_24;
  }
  if ((*((_BYTE *)this + 28) & 1) != 0)
  {
    v4 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 2);
    if (v4 >= 0x80)
    {
      v3 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v4) + 1;
      v2 = *((_DWORD *)this + 7);
      if ((v2 & 2) == 0)
        goto LABEL_14;
    }
    else
    {
      v3 = 2;
      if ((v2 & 2) == 0)
        goto LABEL_14;
    }
  }
  else
  {
    v3 = 0;
    if ((*((_BYTE *)this + 28) & 2) == 0)
      goto LABEL_14;
  }
  v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 3);
  if (v5 >= 0x80)
  {
    v6 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v5) + 1;
    v2 = *((_DWORD *)this + 7);
  }
  else
  {
    v6 = 2;
  }
  v3 = (v6 + v3);
LABEL_14:
  if ((v2 & 4) != 0)
  {
    v7 = *((_QWORD *)this + 2);
    v8 = *(unsigned __int8 *)(v7 + 23);
    v9 = v8;
    v10 = *(_QWORD *)(v7 + 8);
    if ((v8 & 0x80u) == 0)
      v11 = *(unsigned __int8 *)(v7 + 23);
    else
      v11 = v10;
    if (v11 >= 0x80)
    {
      v12 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v11);
      v8 = *(unsigned __int8 *)(v7 + 23);
      v10 = *(_QWORD *)(v7 + 8);
      v9 = *(_BYTE *)(v7 + 23);
    }
    else
    {
      v12 = 1;
    }
    if (v9 < 0)
      v8 = v10;
    v3 = (v3 + v12 + v8 + 1);
  }
LABEL_24:
  *((_DWORD *)this + 6) = v3;
  return v3;
}

void CLMicroLocationProto::NowPlayingOutputDevice::CheckTypeAndMergeFrom(CLMicroLocationProto::NowPlayingOutputDevice *this, const wireless_diagnostics::google::protobuf::MessageLite *lpsrc)
{
  uint64_t v4;
  uint64_t v5;

  CLMicroLocationProto::NowPlayingOutputDevice::MergeFrom(this, lpsrc);
}

uint64_t CLMicroLocationProto::NowPlayingOutputDevice::IsInitialized(CLMicroLocationProto::NowPlayingOutputDevice *this)
{
  return 1;
}

_QWORD *CLMicroLocationProto::NowPlayingOutputDevice::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CLMicroLocationProto.NowPlayingOutputDevice");
}

void CLMicroLocationProto::NowPlaying::MergeFrom(CLMicroLocationProto::NowPlaying *this, const CLMicroLocationProto::NowPlaying *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  const CLMicroLocationProto::NowPlayingOutputDevice *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  CLMicroLocationProto::NowPlayingOutputDevice *v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  unsigned int v15;
  const std::string *v16;
  std::string *v17;
  int v18;
  const std::string *v19;
  std::string *v20;
  CLMicroLocationProto::BundleIdFeatures *v21;
  const CLMicroLocationProto::BundleIdFeatures *v22;
  _BYTE v23[48];

  if (a2 == this)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v23);
  }
  v4 = wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((CLMicroLocationProto::NowPlaying *)((char *)this + 32));
  if (*((int *)a2 + 10) >= 1)
  {
    v5 = 0;
    v6 = MEMORY[0x24BEDD958];
    do
    {
      v7 = *(const CLMicroLocationProto::NowPlayingOutputDevice **)(*((_QWORD *)a2 + 4) + 8 * v5);
      v8 = *((_DWORD *)this + 11);
      v9 = *((int *)this + 10);
      if ((int)v9 >= v8)
      {
        if (v8 == *((_DWORD *)this + 12))
        {
          wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((CLMicroLocationProto::NowPlaying *)((char *)this + 32));
          v8 = *((_DWORD *)this + 11);
        }
        *((_DWORD *)this + 11) = v8 + 1;
        v11 = (CLMicroLocationProto::NowPlayingOutputDevice *)operator new();
        *(_QWORD *)v11 = &off_2511D77A8;
        *((_QWORD *)v11 + 1) = 0;
        *((_QWORD *)v11 + 2) = v6;
        *((_QWORD *)v11 + 3) = 0;
        v12 = *((_QWORD *)this + 4);
        v13 = *((int *)this + 10);
        *((_DWORD *)this + 10) = v13 + 1;
        *(_QWORD *)(v12 + 8 * v13) = v11;
      }
      else
      {
        v10 = *((_QWORD *)this + 4);
        *((_DWORD *)this + 10) = v9 + 1;
        v11 = *(CLMicroLocationProto::NowPlayingOutputDevice **)(v10 + 8 * v9);
      }
      CLMicroLocationProto::NowPlayingOutputDevice::MergeFrom(v11, v7);
      ++v5;
    }
    while (v5 < *((int *)a2 + 10));
  }
  LOBYTE(v14) = *((_BYTE *)a2 + 68);
  if (!(_BYTE)v14)
    return;
  if ((*((_BYTE *)a2 + 68) & 1) != 0)
  {
    v15 = *((_DWORD *)a2 + 4);
    if (v15 - 31 >= 0x19 && (v15 > 0xE || ((1 << v15) & 0x76B6) == 0))
      CLMicroLocationProto::NowPlaying::MergeFrom();
    *((_DWORD *)this + 17) |= 1u;
    *((_DWORD *)this + 4) = v15;
    v14 = *((_DWORD *)a2 + 17);
  }
  if ((v14 & 2) == 0)
  {
    if ((v14 & 4) == 0)
      goto LABEL_19;
LABEL_25:
    v18 = *((_DWORD *)a2 + 5);
    *((_DWORD *)this + 17) |= 4u;
    *((_DWORD *)this + 5) = v18;
    v14 = *((_DWORD *)a2 + 17);
    if ((v14 & 8) == 0)
    {
LABEL_20:
      if ((v14 & 0x20) == 0)
        return;
      goto LABEL_29;
    }
    goto LABEL_26;
  }
  v16 = (const std::string *)*((_QWORD *)a2 + 1);
  *((_DWORD *)this + 17) |= 2u;
  v17 = (std::string *)*((_QWORD *)this + 1);
  if (v17 == (std::string *)MEMORY[0x24BEDD958])
  {
    v17 = (std::string *)operator new();
    v17->__r_.__value_.__l.__size_ = 0;
    v17->__r_.__value_.__r.__words[2] = 0;
    v17->__r_.__value_.__r.__words[0] = 0;
    *((_QWORD *)this + 1) = v17;
  }
  v4 = (uint64_t)std::string::operator=(v17, v16);
  v14 = *((_DWORD *)a2 + 17);
  if ((v14 & 4) != 0)
    goto LABEL_25;
LABEL_19:
  if ((v14 & 8) == 0)
    goto LABEL_20;
LABEL_26:
  v19 = (const std::string *)*((_QWORD *)a2 + 3);
  *((_DWORD *)this + 17) |= 8u;
  v20 = (std::string *)*((_QWORD *)this + 3);
  if (v20 == (std::string *)MEMORY[0x24BEDD958])
  {
    v20 = (std::string *)operator new();
    v20->__r_.__value_.__l.__size_ = 0;
    v20->__r_.__value_.__r.__words[2] = 0;
    v20->__r_.__value_.__r.__words[0] = 0;
    *((_QWORD *)this + 3) = v20;
  }
  v4 = (uint64_t)std::string::operator=(v20, v19);
  if ((*((_DWORD *)a2 + 17) & 0x20) != 0)
  {
LABEL_29:
    *((_DWORD *)this + 17) |= 0x20u;
    v21 = (CLMicroLocationProto::BundleIdFeatures *)*((_QWORD *)this + 7);
    if (!v21)
    {
      v4 = operator new();
      v21 = (CLMicroLocationProto::BundleIdFeatures *)v4;
      *(_QWORD *)v4 = &off_2511D72F8;
      *(_WORD *)(v4 + 8) = 0;
      *(_DWORD *)(v4 + 12) = 0;
      *(_DWORD *)(v4 + 16) = 0;
      *((_QWORD *)this + 7) = v4;
    }
    v22 = (const CLMicroLocationProto::BundleIdFeatures *)*((_QWORD *)a2 + 7);
    if (!v22)
    {
      CLMicroLocationProto::protobuf_AddDesc_microlocation_2eproto((CLMicroLocationProto *)v4);
      v22 = *(const CLMicroLocationProto::BundleIdFeatures **)(CLMicroLocationProto::NowPlaying::default_instance_ + 56);
    }
    CLMicroLocationProto::BundleIdFeatures::MergeFrom(v21, v22);
  }
}

void sub_241AC8040(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void CLMicroLocationProto::NowPlaying::~NowPlaying(CLMicroLocationProto::NowPlaying *this)
{
  *(_QWORD *)this = &off_2511D7820;
  CLMicroLocationProto::NowPlaying::SharedDtor(this);
  wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Destroy<wireless_diagnostics::google::protobuf::RepeatedPtrField<CLMicroLocationProto::Measurement>::TypeHandler>((uint64_t *)this + 4);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

{
  CLMicroLocationProto::NowPlaying::~NowPlaying(this);
  JUMPOUT(0x2426A04D4);
}

void CLMicroLocationProto::NowPlaying::SharedDtor(CLMicroLocationProto::NowPlaying *this)
{
  CLMicroLocationProto::NowPlaying *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v7;

  v1 = this;
  v2 = *((_QWORD *)this + 1);
  v3 = MEMORY[0x24BEDD958];
  if (v2 != MEMORY[0x24BEDD958] && v2 != 0)
  {
    if (*(char *)(v2 + 23) < 0)
      operator delete(*(void **)v2);
    this = (CLMicroLocationProto::NowPlaying *)MEMORY[0x2426A04D4](v2, 0x1012C40EC159624);
  }
  v5 = *((_QWORD *)v1 + 3);
  if (v5 != v3 && v5 != 0)
  {
    if (*(char *)(v5 + 23) < 0)
      operator delete(*(void **)v5);
    this = (CLMicroLocationProto::NowPlaying *)MEMORY[0x2426A04D4](v5, 0x1012C40EC159624);
  }
  CLMicroLocationProto::protobuf_AddDesc_microlocation_2eproto(this);
  if ((CLMicroLocationProto::NowPlaying *)CLMicroLocationProto::NowPlaying::default_instance_ != v1)
  {
    v7 = *((_QWORD *)v1 + 7);
    if (v7)
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  }
}

double CLMicroLocationProto::NowPlaying::New(CLMicroLocationProto::NowPlaying *this)
{
  uint64_t v1;
  uint64_t v2;
  double result;

  v1 = operator new();
  *(_QWORD *)(v1 + 40) = 0;
  v2 = MEMORY[0x24BEDD958];
  *(_DWORD *)(v1 + 48) = 0;
  *(_QWORD *)v1 = &off_2511D7820;
  *(_QWORD *)(v1 + 8) = v2;
  *(_QWORD *)&result = 12;
  *(_QWORD *)(v1 + 16) = 12;
  *(_QWORD *)(v1 + 24) = v2;
  *(_QWORD *)(v1 + 32) = 0;
  *(_QWORD *)(v1 + 56) = 0;
  *(_QWORD *)(v1 + 64) = 0;
  return result;
}

uint64_t CLMicroLocationProto::NowPlaying::Clear(uint64_t this)
{
  uint64_t v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1 = this;
  v2 = *(_BYTE *)(this + 68);
  if (v2)
  {
    *(_DWORD *)(this + 16) = 12;
    v3 = MEMORY[0x24BEDD958];
    if ((v2 & 2) != 0)
    {
      v4 = *(_QWORD *)(this + 8);
      if (v4 != MEMORY[0x24BEDD958])
      {
        if (*(char *)(v4 + 23) < 0)
        {
          **(_BYTE **)v4 = 0;
          *(_QWORD *)(v4 + 8) = 0;
        }
        else
        {
          *(_BYTE *)v4 = 0;
          *(_BYTE *)(v4 + 23) = 0;
        }
      }
    }
    *(_DWORD *)(this + 20) = 0;
    if ((*(_BYTE *)(this + 68) & 8) != 0)
    {
      v5 = *(_QWORD *)(this + 24);
      if (v5 != v3)
      {
        if (*(char *)(v5 + 23) < 0)
        {
          **(_BYTE **)v5 = 0;
          *(_QWORD *)(v5 + 8) = 0;
        }
        else
        {
          *(_BYTE *)v5 = 0;
          *(_BYTE *)(v5 + 23) = 0;
        }
      }
    }
    if ((*(_BYTE *)(this + 68) & 0x20) != 0)
    {
      v6 = *(_QWORD *)(this + 56);
      if (v6)
      {
        if (*(_BYTE *)(v6 + 16))
          *(_WORD *)(v6 + 8) = 0;
        *(_DWORD *)(v6 + 16) = 0;
      }
    }
  }
  if (*(int *)(this + 40) >= 1)
  {
    v7 = 0;
    do
    {
      v8 = *(_QWORD *)(*(_QWORD *)(v1 + 32) + 8 * v7);
      this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 32))(v8);
      ++v7;
    }
    while (v7 < *(int *)(v1 + 40));
  }
  *(_DWORD *)(v1 + 40) = 0;
  *(_DWORD *)(v1 + 68) = 0;
  return this;
}

uint64_t CLMicroLocationProto::NowPlaying::MergePartialFromCodedStream(CLMicroLocationProto::NowPlaying *this, wireless_diagnostics::google::protobuf::io::CodedInputStream *a2)
{
  unsigned int *v4;
  wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *v5;
  uint64_t v6;
  char *v7;
  uint64_t TagFallback;
  int v9;
  char *v10;
  unsigned int v11;
  unint64_t v12;
  char *v13;
  int v14;
  uint64_t result;
  BOOL v16;
  _BYTE *v17;
  _QWORD *v18;
  _BYTE *v19;
  _BYTE *v20;
  _QWORD *v21;
  _BYTE *v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  CLMicroLocationProto::NowPlayingOutputDevice *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  int v30;
  int v31;
  int v32;
  BOOL v33;
  int v34;
  int v35;
  uint64_t v36;
  char *v37;
  int v38;
  int v39;
  int v40;
  int v41;
  unsigned int v42;
  unsigned int v43;
  unsigned int v44;

  v4 = (unsigned int *)((char *)this + 20);
  v5 = (CLMicroLocationProto::NowPlaying *)((char *)this + 32);
  v6 = MEMORY[0x24BEDD958];
LABEL_2:
  while (2)
  {
    v7 = (char *)*((_QWORD *)a2 + 1);
    if ((unint64_t)v7 >= *((_QWORD *)a2 + 2) || *v7 < 0)
    {
      TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(a2);
      *((_DWORD *)a2 + 8) = TagFallback;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    else
    {
      TagFallback = *v7;
      *((_DWORD *)a2 + 8) = TagFallback;
      *((_QWORD *)a2 + 1) = v7 + 1;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    switch(TagFallback >> 3)
    {
      case 1u:
        v9 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_23;
        v42 = 0;
        v10 = (char *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v10 >= *((_QWORD *)a2 + 2) || *v10 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v42);
          if (!(_DWORD)result)
            return result;
          v11 = v42;
        }
        else
        {
          v11 = *v10;
          *((_QWORD *)a2 + 1) = v10 + 1;
        }
        if (v11 - 31 < 0x19 || (v11 <= 0xE ? (v16 = ((1 << v11) & 0x76B6) == 0) : (v16 = 1), !v16))
        {
          if (v11 - 31 >= 0x19 && (v11 > 0xE || ((1 << v11) & 0x76B6) == 0))
            CLMicroLocationProto::NowPlaying::MergeFrom();
          *((_DWORD *)this + 17) |= 1u;
          *((_DWORD *)this + 4) = v11;
        }
        v17 = (_BYTE *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v17 < *((_QWORD *)a2 + 2) && *v17 == 18)
        {
          *((_QWORD *)a2 + 1) = v17 + 1;
          goto LABEL_40;
        }
        continue;
      case 2u:
        v9 = TagFallback & 7;
        if (v9 != 2)
          goto LABEL_23;
LABEL_40:
        *((_DWORD *)this + 17) |= 2u;
        if (*((_QWORD *)this + 1) == v6)
        {
          v18 = (_QWORD *)operator new();
          v18[1] = 0;
          v18[2] = 0;
          *v18 = 0;
          *((_QWORD *)this + 1) = v18;
        }
        result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString();
        if (!(_DWORD)result)
          return result;
        v19 = (_BYTE *)*((_QWORD *)a2 + 1);
        v12 = *((_QWORD *)a2 + 2);
        if ((unint64_t)v19 >= v12 || *v19 != 24)
          continue;
        v13 = v19 + 1;
        *((_QWORD *)a2 + 1) = v13;
LABEL_46:
        if ((unint64_t)v13 >= v12 || *v13 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v4);
          if (!(_DWORD)result)
            return result;
          v20 = (_BYTE *)*((_QWORD *)a2 + 1);
          v12 = *((_QWORD *)a2 + 2);
        }
        else
        {
          *v4 = *v13;
          v20 = v13 + 1;
          *((_QWORD *)a2 + 1) = v20;
        }
        v14 = *((_DWORD *)this + 17) | 4;
        *((_DWORD *)this + 17) = v14;
        if ((unint64_t)v20 >= v12 || *v20 != 34)
          continue;
        *((_QWORD *)a2 + 1) = v20 + 1;
LABEL_54:
        *((_DWORD *)this + 17) = v14 | 8;
        if (*((_QWORD *)this + 3) == v6)
        {
          v21 = (_QWORD *)operator new();
          v21[1] = 0;
          v21[2] = 0;
          *v21 = 0;
          *((_QWORD *)this + 3) = v21;
        }
        result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString();
        if (!(_DWORD)result)
          return result;
        v22 = (_BYTE *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v22 >= *((_QWORD *)a2 + 2) || *v22 != 42)
          continue;
        do
        {
          *((_QWORD *)a2 + 1) = v22 + 1;
LABEL_60:
          v23 = *((_DWORD *)this + 11);
          v24 = *((int *)this + 10);
          if ((int)v24 >= v23)
          {
            if (v23 == *((_DWORD *)this + 12))
            {
              wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve(v5);
              v23 = *((_DWORD *)this + 11);
            }
            *((_DWORD *)this + 11) = v23 + 1;
            v26 = (CLMicroLocationProto::NowPlayingOutputDevice *)operator new();
            *(_QWORD *)v26 = &off_2511D77A8;
            *((_QWORD *)v26 + 1) = 0;
            *((_QWORD *)v26 + 2) = v6;
            *((_QWORD *)v26 + 3) = 0;
            v27 = *((_QWORD *)this + 4);
            v28 = *((int *)this + 10);
            *((_DWORD *)this + 10) = v28 + 1;
            *(_QWORD *)(v27 + 8 * v28) = v26;
          }
          else
          {
            v25 = *((_QWORD *)this + 4);
            *((_DWORD *)this + 10) = v24 + 1;
            v26 = *(CLMicroLocationProto::NowPlayingOutputDevice **)(v25 + 8 * v24);
          }
          v43 = 0;
          v29 = (char *)*((_QWORD *)a2 + 1);
          if ((unint64_t)v29 >= *((_QWORD *)a2 + 2) || *v29 < 0)
          {
            if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v43))return 0;
          }
          else
          {
            v43 = *v29;
            *((_QWORD *)a2 + 1) = v29 + 1;
          }
          v30 = *((_DWORD *)a2 + 14);
          v31 = *((_DWORD *)a2 + 15);
          *((_DWORD *)a2 + 14) = v30 + 1;
          if (v30 >= v31)
            return 0;
          wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(a2);
          if (!CLMicroLocationProto::NowPlayingOutputDevice::MergePartialFromCodedStream(v26, a2)
            || !*((_BYTE *)a2 + 36))
          {
            return 0;
          }
          wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(a2);
          v32 = *((_DWORD *)a2 + 14);
          v33 = __OFSUB__(v32, 1);
          v34 = v32 - 1;
          if (v34 < 0 == v33)
            *((_DWORD *)a2 + 14) = v34;
          v22 = (_BYTE *)*((_QWORD *)a2 + 1);
          if ((unint64_t)v22 >= *((_QWORD *)a2 + 2))
            goto LABEL_2;
          v35 = *v22;
        }
        while (v35 == 42);
        if (v35 != 50)
          continue;
        *((_QWORD *)a2 + 1) = v22 + 1;
LABEL_78:
        *((_DWORD *)this + 17) |= 0x20u;
        v36 = *((_QWORD *)this + 7);
        if (!v36)
        {
          v36 = operator new();
          *(_QWORD *)v36 = &off_2511D72F8;
          *(_WORD *)(v36 + 8) = 0;
          *(_DWORD *)(v36 + 12) = 0;
          *(_DWORD *)(v36 + 16) = 0;
          *((_QWORD *)this + 7) = v36;
        }
        v44 = 0;
        v37 = (char *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v37 >= *((_QWORD *)a2 + 2) || *v37 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v44))return 0;
        }
        else
        {
          v44 = *v37;
          *((_QWORD *)a2 + 1) = v37 + 1;
        }
        v38 = *((_DWORD *)a2 + 14);
        v39 = *((_DWORD *)a2 + 15);
        *((_DWORD *)a2 + 14) = v38 + 1;
        if (v38 < v39)
        {
          wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(a2);
          if (CLMicroLocationProto::BundleIdFeatures::MergePartialFromCodedStream((CLMicroLocationProto::BundleIdFeatures *)v36, a2))
          {
            if (*((_BYTE *)a2 + 36))
            {
              wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(a2);
              v40 = *((_DWORD *)a2 + 14);
              v33 = __OFSUB__(v40, 1);
              v41 = v40 - 1;
              if (v41 < 0 == v33)
                *((_DWORD *)a2 + 14) = v41;
              if (*((_QWORD *)a2 + 1) == *((_QWORD *)a2 + 2)
                && (*((_DWORD *)a2 + 11) || *((_DWORD *)a2 + 6) == *((_DWORD *)a2 + 10)))
              {
                *((_DWORD *)a2 + 8) = 0;
                result = 1;
                *((_BYTE *)a2 + 36) = 1;
                return result;
              }
              continue;
            }
          }
        }
        return 0;
      case 3u:
        v9 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_23;
        v13 = (char *)*((_QWORD *)a2 + 1);
        v12 = *((_QWORD *)a2 + 2);
        goto LABEL_46;
      case 4u:
        v9 = TagFallback & 7;
        if (v9 != 2)
          goto LABEL_23;
        v14 = *((_DWORD *)this + 17);
        goto LABEL_54;
      case 5u:
        v9 = TagFallback & 7;
        if (v9 == 2)
          goto LABEL_60;
        goto LABEL_23;
      case 6u:
        v9 = TagFallback & 7;
        if (v9 == 2)
          goto LABEL_78;
        goto LABEL_23;
      default:
        v9 = TagFallback & 7;
LABEL_23:
        if (v9 == 4)
          return 1;
        if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(a2, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback) & 1) == 0)return 0;
        continue;
    }
  }
}

unsigned int *CLMicroLocationProto::NowPlaying::SerializeWithCachedSizes(unsigned int *this, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  unsigned int *v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;

  v5 = this;
  v6 = this[17];
  if ((v6 & 1) != 0)
  {
    this = (unsigned int *)wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, this[4], (uint64_t)a2, a4);
    v6 = v5[17];
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0)
        goto LABEL_4;
      goto LABEL_13;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  this = (unsigned int *)wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString();
  v6 = v5[17];
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
LABEL_13:
  this = (unsigned int *)wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, v5[5], (uint64_t)a2, a4);
  if ((v5[17] & 8) != 0)
LABEL_5:
    this = (unsigned int *)wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString();
LABEL_6:
  if ((int)v5[10] >= 1)
  {
    v7 = 0;
    do
      this = (unsigned int *)wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5, *(_QWORD *)(*((_QWORD *)v5 + 4) + 8 * v7++), a2, a4);
    while (v7 < (int)v5[10]);
  }
  if ((v5[17] & 0x20) != 0)
  {
    v8 = *((_QWORD *)v5 + 7);
    if (!v8)
    {
      CLMicroLocationProto::protobuf_AddDesc_microlocation_2eproto((CLMicroLocationProto *)this);
      v8 = *(_QWORD *)(CLMicroLocationProto::NowPlaying::default_instance_ + 56);
    }
    return (unsigned int *)wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)6, v8, a2, a4);
  }
  return this;
}

uint64_t CLMicroLocationProto::NowPlaying::ByteSize(uint64_t this)
{
  uint64_t v1;
  int v2;
  int v3;
  uint64_t v4;
  int v5;
  char v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  uint64_t v10;
  int v11;
  char v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  int v16;
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v21;
  int v22;
  int v23;

  v1 = this;
  LOBYTE(v2) = *(_BYTE *)(this + 68);
  if (!(_BYTE)v2)
  {
    v3 = 0;
    goto LABEL_47;
  }
  if ((*(_BYTE *)(this + 68) & 1) != 0)
  {
    this = *(unsigned int *)(this + 16);
    if ((this & 0x80000000) != 0)
    {
      v3 = 11;
      if ((v2 & 2) == 0)
        goto LABEL_22;
    }
    else if (this >= 0x80)
    {
      this = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)this);
      v3 = this + 1;
      v2 = *(_DWORD *)(v1 + 68);
      if ((v2 & 2) == 0)
        goto LABEL_22;
    }
    else
    {
      v3 = 2;
      if ((v2 & 2) == 0)
        goto LABEL_22;
    }
  }
  else
  {
    v3 = 0;
    if ((*(_BYTE *)(this + 68) & 2) == 0)
      goto LABEL_22;
  }
  v4 = *(_QWORD *)(v1 + 8);
  v5 = *(unsigned __int8 *)(v4 + 23);
  v6 = v5;
  v7 = *(_QWORD *)(v4 + 8);
  if ((v5 & 0x80u) == 0)
    v8 = *(unsigned __int8 *)(v4 + 23);
  else
    v8 = v7;
  if (v8 >= 0x80)
  {
    this = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v8);
    v5 = *(unsigned __int8 *)(v4 + 23);
    v7 = *(_QWORD *)(v4 + 8);
    v2 = *(_DWORD *)(v1 + 68);
    v6 = *(_BYTE *)(v4 + 23);
  }
  else
  {
    this = 1;
  }
  if (v6 < 0)
    v5 = v7;
  v3 += this + v5 + 1;
LABEL_22:
  if ((v2 & 4) != 0)
  {
    this = *(unsigned int *)(v1 + 20);
    if (this >= 0x80)
    {
      this = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)this);
      v9 = this + 1;
      v2 = *(_DWORD *)(v1 + 68);
    }
    else
    {
      v9 = 2;
    }
    v3 += v9;
    if ((v2 & 8) == 0)
    {
LABEL_24:
      if ((v2 & 0x20) == 0)
        goto LABEL_47;
      goto LABEL_39;
    }
  }
  else if ((v2 & 8) == 0)
  {
    goto LABEL_24;
  }
  v10 = *(_QWORD *)(v1 + 24);
  v11 = *(unsigned __int8 *)(v10 + 23);
  v12 = v11;
  v13 = *(_QWORD *)(v10 + 8);
  if ((v11 & 0x80u) == 0)
    v14 = *(unsigned __int8 *)(v10 + 23);
  else
    v14 = v13;
  if (v14 >= 0x80)
  {
    this = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v14);
    v11 = *(unsigned __int8 *)(v10 + 23);
    v13 = *(_QWORD *)(v10 + 8);
    v2 = *(_DWORD *)(v1 + 68);
    v12 = *(_BYTE *)(v10 + 23);
  }
  else
  {
    this = 1;
  }
  if (v12 < 0)
    v11 = v13;
  v3 += this + v11 + 1;
  if ((v2 & 0x20) != 0)
  {
LABEL_39:
    v15 = *(_QWORD *)(v1 + 56);
    if (!v15)
    {
      CLMicroLocationProto::protobuf_AddDesc_microlocation_2eproto((CLMicroLocationProto *)this);
      v15 = *(_QWORD *)(CLMicroLocationProto::NowPlaying::default_instance_ + 56);
    }
    v16 = 2 * (*(_DWORD *)(v15 + 16) & 1);
    if ((*(_DWORD *)(v15 + 16) & 2) != 0)
      v16 += 2;
    if (*(_DWORD *)(v15 + 16))
      v17 = v16;
    else
      v17 = 0;
    *(_DWORD *)(v15 + 12) = v17;
    v3 += v17 + 2;
  }
LABEL_47:
  v18 = *(_DWORD *)(v1 + 40);
  v19 = (v18 + v3);
  if (v18 >= 1)
  {
    v20 = 0;
    do
    {
      v21 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)CLMicroLocationProto::NowPlayingOutputDevice::ByteSize(*(CLMicroLocationProto::NowPlayingOutputDevice **)(*(_QWORD *)(v1 + 32) + 8 * v20));
      v22 = (int)v21;
      if (v21 >= 0x80)
        v23 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v21);
      else
        v23 = 1;
      v19 = (v22 + v19 + v23);
      ++v20;
    }
    while (v20 < *(int *)(v1 + 40));
  }
  *(_DWORD *)(v1 + 64) = v19;
  return v19;
}

void CLMicroLocationProto::NowPlaying::CheckTypeAndMergeFrom(CLMicroLocationProto::NowPlaying *this, const wireless_diagnostics::google::protobuf::MessageLite *lpsrc)
{
  uint64_t v4;
  uint64_t v5;

  CLMicroLocationProto::NowPlaying::MergeFrom(this, lpsrc);
}

uint64_t CLMicroLocationProto::NowPlaying::IsInitialized(CLMicroLocationProto::NowPlaying *this)
{
  return 1;
}

_QWORD *CLMicroLocationProto::NowPlaying::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CLMicroLocationProto.NowPlaying");
}

void CLMicroLocationProto::LearnModel::MergeFrom(CLMicroLocationProto::LearnModel *this, const CLMicroLocationProto::LearnModel *a2)
{
  unsigned int v4;
  _BYTE v6[48];

  if (a2 == this)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v6);
  }
  if ((*((_BYTE *)a2 + 16) & 1) != 0)
  {
    v4 = *((_DWORD *)a2 + 2);
    if (v4 - 31 >= 0x19 && (v4 > 0xE || ((1 << v4) & 0x76B6) == 0))
      CLMicroLocationProto::LearnModel::MergeFrom();
    *((_DWORD *)this + 4) |= 1u;
    *((_DWORD *)this + 2) = v4;
  }
}

void sub_241AC8C8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void CLMicroLocationProto::LearnModel::~LearnModel(CLMicroLocationProto::LearnModel *this)
{
  *(_QWORD *)this = &off_2511D7898;
  CLMicroLocationProto::protobuf_AddDesc_microlocation_2eproto(this);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

{
  CLMicroLocationProto::LearnModel::~LearnModel(this);
  JUMPOUT(0x2426A04D4);
}

double CLMicroLocationProto::LearnModel::New(CLMicroLocationProto::LearnModel *this)
{
  uint64_t v1;
  double result;

  v1 = operator new();
  *(_QWORD *)v1 = &off_2511D7898;
  *(_QWORD *)&result = 31;
  *(_QWORD *)(v1 + 8) = 31;
  *(_DWORD *)(v1 + 16) = 0;
  return result;
}

uint64_t CLMicroLocationProto::LearnModel::Clear(uint64_t this)
{
  if (*(_BYTE *)(this + 16))
    *(_DWORD *)(this + 8) = 31;
  *(_DWORD *)(this + 16) = 0;
  return this;
}

uint64_t CLMicroLocationProto::LearnModel::MergePartialFromCodedStream(CLMicroLocationProto::LearnModel *this, wireless_diagnostics::google::protobuf::io::CodedInputStream *a2)
{
  char *v4;
  uint64_t TagFallback;
  char *v6;
  unsigned int v7;
  BOOL v8;
  uint64_t result;
  unsigned int v11;

  while (1)
  {
    while (1)
    {
      v4 = (char *)*((_QWORD *)a2 + 1);
      if ((unint64_t)v4 >= *((_QWORD *)a2 + 2) || *v4 < 0)
      {
        TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(a2);
        *((_DWORD *)a2 + 8) = TagFallback;
      }
      else
      {
        TagFallback = *v4;
        *((_DWORD *)a2 + 8) = TagFallback;
        *((_QWORD *)a2 + 1) = v4 + 1;
      }
      if ((_DWORD)TagFallback != 8)
        break;
      v11 = 0;
      v6 = (char *)*((_QWORD *)a2 + 1);
      if ((unint64_t)v6 >= *((_QWORD *)a2 + 2) || *v6 < 0)
      {
        result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v11);
        if (!(_DWORD)result)
          return result;
        v7 = v11;
      }
      else
      {
        v7 = *v6;
        *((_QWORD *)a2 + 1) = v6 + 1;
      }
      if (v7 - 31 < 0x19 || (v7 <= 0xE ? (v8 = ((1 << v7) & 0x76B6) == 0) : (v8 = 1), !v8))
      {
        if (v7 - 31 >= 0x19 && (v7 > 0xE || ((1 << v7) & 0x76B6) == 0))
          CLMicroLocationProto::LearnModel::MergeFrom();
        *((_DWORD *)this + 4) |= 1u;
        *((_DWORD *)this + 2) = v7;
      }
      if (*((_QWORD *)a2 + 1) == *((_QWORD *)a2 + 2)
        && (*((_DWORD *)a2 + 11) || *((_DWORD *)a2 + 6) == *((_DWORD *)a2 + 10)))
      {
        *((_DWORD *)a2 + 8) = 0;
        result = 1;
        *((_BYTE *)a2 + 36) = 1;
        return result;
      }
    }
    if (!(_DWORD)TagFallback || (TagFallback & 7) == 4)
      break;
    if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(a2, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback) & 1) == 0)return 0;
  }
  return 1;
}

uint64_t CLMicroLocationProto::LearnModel::SerializeWithCachedSizes(uint64_t this, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  if ((*(_BYTE *)(this + 16) & 1) != 0)
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(unsigned int *)(this + 8), (uint64_t)a2, a4);
  return this;
}

uint64_t CLMicroLocationProto::LearnModel::ByteSize(CLMicroLocationProto::LearnModel *this)
{
  uint64_t result;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v3;

  if ((*((_BYTE *)this + 16) & 1) != 0)
  {
    v3 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 2);
    if ((v3 & 0x80000000) != 0)
    {
      result = 11;
    }
    else if (v3 >= 0x80)
    {
      result = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v3) + 1;
    }
    else
    {
      result = 2;
    }
  }
  else
  {
    result = 0;
  }
  *((_DWORD *)this + 3) = result;
  return result;
}

void CLMicroLocationProto::LearnModel::CheckTypeAndMergeFrom(CLMicroLocationProto::LearnModel *this, const wireless_diagnostics::google::protobuf::MessageLite *lpsrc)
{
  uint64_t v4;
  uint64_t v5;

  CLMicroLocationProto::LearnModel::MergeFrom(this, lpsrc);
}

void CLMicroLocationProto::LearnModel::CopyFrom(CLMicroLocationProto::LearnModel *this, const CLMicroLocationProto::LearnModel *a2)
{
  if (a2 != this)
  {
    (*(void (**)(CLMicroLocationProto::LearnModel *))(*(_QWORD *)this + 32))(this);
    CLMicroLocationProto::LearnModel::MergeFrom(this, a2);
  }
}

uint64_t CLMicroLocationProto::LearnModel::IsInitialized(CLMicroLocationProto::LearnModel *this)
{
  return 1;
}

_QWORD *CLMicroLocationProto::LearnModel::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CLMicroLocationProto.LearnModel");
}

void CLMicroLocationProto::LearnCompleted::MergeFrom(CLMicroLocationProto::LearnCompleted *this, const CLMicroLocationProto::LearnCompleted *a2)
{
  unsigned int v4;
  _BYTE v6[48];

  if (a2 == this)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v6);
  }
  if ((*((_BYTE *)a2 + 16) & 1) != 0)
  {
    v4 = *((_DWORD *)a2 + 2);
    if (v4 - 31 >= 0x19 && (v4 > 0xE || ((1 << v4) & 0x76B6) == 0))
      CLMicroLocationProto::LearnCompleted::MergeFrom();
    *((_DWORD *)this + 4) |= 1u;
    *((_DWORD *)this + 2) = v4;
  }
}

void sub_241AC908C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void CLMicroLocationProto::LearnCompleted::~LearnCompleted(CLMicroLocationProto::LearnCompleted *this)
{
  *(_QWORD *)this = &off_2511D7910;
  CLMicroLocationProto::protobuf_AddDesc_microlocation_2eproto(this);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

{
  CLMicroLocationProto::LearnCompleted::~LearnCompleted(this);
  JUMPOUT(0x2426A04D4);
}

double CLMicroLocationProto::LearnCompleted::New(CLMicroLocationProto::LearnCompleted *this)
{
  uint64_t v1;
  double result;

  v1 = operator new();
  *(_QWORD *)v1 = &off_2511D7910;
  *(_QWORD *)&result = 32;
  *(_QWORD *)(v1 + 8) = 32;
  *(_DWORD *)(v1 + 16) = 0;
  return result;
}

uint64_t CLMicroLocationProto::LearnCompleted::Clear(uint64_t this)
{
  if (*(_BYTE *)(this + 16))
    *(_DWORD *)(this + 8) = 32;
  *(_DWORD *)(this + 16) = 0;
  return this;
}

uint64_t CLMicroLocationProto::LearnCompleted::MergePartialFromCodedStream(CLMicroLocationProto::LearnCompleted *this, wireless_diagnostics::google::protobuf::io::CodedInputStream *a2)
{
  char *v4;
  uint64_t TagFallback;
  char *v6;
  unsigned int v7;
  BOOL v8;
  uint64_t result;
  unsigned int v11;

  while (1)
  {
    while (1)
    {
      v4 = (char *)*((_QWORD *)a2 + 1);
      if ((unint64_t)v4 >= *((_QWORD *)a2 + 2) || *v4 < 0)
      {
        TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(a2);
        *((_DWORD *)a2 + 8) = TagFallback;
      }
      else
      {
        TagFallback = *v4;
        *((_DWORD *)a2 + 8) = TagFallback;
        *((_QWORD *)a2 + 1) = v4 + 1;
      }
      if ((_DWORD)TagFallback != 8)
        break;
      v11 = 0;
      v6 = (char *)*((_QWORD *)a2 + 1);
      if ((unint64_t)v6 >= *((_QWORD *)a2 + 2) || *v6 < 0)
      {
        result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v11);
        if (!(_DWORD)result)
          return result;
        v7 = v11;
      }
      else
      {
        v7 = *v6;
        *((_QWORD *)a2 + 1) = v6 + 1;
      }
      if (v7 - 31 < 0x19 || (v7 <= 0xE ? (v8 = ((1 << v7) & 0x76B6) == 0) : (v8 = 1), !v8))
      {
        if (v7 - 31 >= 0x19 && (v7 > 0xE || ((1 << v7) & 0x76B6) == 0))
          CLMicroLocationProto::LearnCompleted::MergeFrom();
        *((_DWORD *)this + 4) |= 1u;
        *((_DWORD *)this + 2) = v7;
      }
      if (*((_QWORD *)a2 + 1) == *((_QWORD *)a2 + 2)
        && (*((_DWORD *)a2 + 11) || *((_DWORD *)a2 + 6) == *((_DWORD *)a2 + 10)))
      {
        *((_DWORD *)a2 + 8) = 0;
        result = 1;
        *((_BYTE *)a2 + 36) = 1;
        return result;
      }
    }
    if (!(_DWORD)TagFallback || (TagFallback & 7) == 4)
      break;
    if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(a2, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback) & 1) == 0)return 0;
  }
  return 1;
}

uint64_t CLMicroLocationProto::LearnCompleted::SerializeWithCachedSizes(uint64_t this, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  if ((*(_BYTE *)(this + 16) & 1) != 0)
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(unsigned int *)(this + 8), (uint64_t)a2, a4);
  return this;
}

uint64_t CLMicroLocationProto::LearnCompleted::ByteSize(CLMicroLocationProto::LearnCompleted *this)
{
  uint64_t result;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v3;

  if ((*((_BYTE *)this + 16) & 1) != 0)
  {
    v3 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 2);
    if ((v3 & 0x80000000) != 0)
    {
      result = 11;
    }
    else if (v3 >= 0x80)
    {
      result = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v3) + 1;
    }
    else
    {
      result = 2;
    }
  }
  else
  {
    result = 0;
  }
  *((_DWORD *)this + 3) = result;
  return result;
}

void CLMicroLocationProto::LearnCompleted::CheckTypeAndMergeFrom(CLMicroLocationProto::LearnCompleted *this, const wireless_diagnostics::google::protobuf::MessageLite *lpsrc)
{
  uint64_t v4;
  uint64_t v5;

  CLMicroLocationProto::LearnCompleted::MergeFrom(this, lpsrc);
}

void CLMicroLocationProto::LearnCompleted::CopyFrom(CLMicroLocationProto::LearnCompleted *this, const CLMicroLocationProto::LearnCompleted *a2)
{
  if (a2 != this)
  {
    (*(void (**)(CLMicroLocationProto::LearnCompleted *))(*(_QWORD *)this + 32))(this);
    CLMicroLocationProto::LearnCompleted::MergeFrom(this, a2);
  }
}

uint64_t CLMicroLocationProto::LearnCompleted::IsInitialized(CLMicroLocationProto::LearnCompleted *this)
{
  return 1;
}

_QWORD *CLMicroLocationProto::LearnCompleted::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CLMicroLocationProto.LearnCompleted");
}

void CLMicroLocationProto::SensorsScanComplete::MergeFrom(CLMicroLocationProto::SensorsScanComplete *this, const CLMicroLocationProto::SensorsScanComplete *a2)
{
  unsigned int v4;
  _BYTE v6[48];

  if (a2 == this)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v6);
  }
  if ((*((_BYTE *)a2 + 16) & 1) != 0)
  {
    v4 = *((_DWORD *)a2 + 2);
    if (v4 - 31 >= 0x19 && (v4 > 0xE || ((1 << v4) & 0x76B6) == 0))
      CLMicroLocationProto::SensorsScanComplete::MergeFrom();
    *((_DWORD *)this + 4) |= 1u;
    *((_DWORD *)this + 2) = v4;
  }
}

void sub_241AC948C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void CLMicroLocationProto::SensorsScanComplete::~SensorsScanComplete(CLMicroLocationProto::SensorsScanComplete *this)
{
  *(_QWORD *)this = &off_2511D7988;
  CLMicroLocationProto::protobuf_AddDesc_microlocation_2eproto(this);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

{
  CLMicroLocationProto::SensorsScanComplete::~SensorsScanComplete(this);
  JUMPOUT(0x2426A04D4);
}

double CLMicroLocationProto::SensorsScanComplete::New(CLMicroLocationProto::SensorsScanComplete *this)
{
  uint64_t v1;
  double result;

  v1 = operator new();
  *(_QWORD *)v1 = &off_2511D7988;
  *(_QWORD *)&result = 33;
  *(_QWORD *)(v1 + 8) = 33;
  *(_DWORD *)(v1 + 16) = 0;
  return result;
}

uint64_t CLMicroLocationProto::SensorsScanComplete::Clear(uint64_t this)
{
  if (*(_BYTE *)(this + 16))
    *(_DWORD *)(this + 8) = 33;
  *(_DWORD *)(this + 16) = 0;
  return this;
}

uint64_t CLMicroLocationProto::SensorsScanComplete::MergePartialFromCodedStream(CLMicroLocationProto::SensorsScanComplete *this, wireless_diagnostics::google::protobuf::io::CodedInputStream *a2)
{
  char *v4;
  uint64_t TagFallback;
  char *v6;
  unsigned int v7;
  BOOL v8;
  uint64_t result;
  unsigned int v11;

  while (1)
  {
    while (1)
    {
      v4 = (char *)*((_QWORD *)a2 + 1);
      if ((unint64_t)v4 >= *((_QWORD *)a2 + 2) || *v4 < 0)
      {
        TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(a2);
        *((_DWORD *)a2 + 8) = TagFallback;
      }
      else
      {
        TagFallback = *v4;
        *((_DWORD *)a2 + 8) = TagFallback;
        *((_QWORD *)a2 + 1) = v4 + 1;
      }
      if ((_DWORD)TagFallback != 8)
        break;
      v11 = 0;
      v6 = (char *)*((_QWORD *)a2 + 1);
      if ((unint64_t)v6 >= *((_QWORD *)a2 + 2) || *v6 < 0)
      {
        result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v11);
        if (!(_DWORD)result)
          return result;
        v7 = v11;
      }
      else
      {
        v7 = *v6;
        *((_QWORD *)a2 + 1) = v6 + 1;
      }
      if (v7 - 31 < 0x19 || (v7 <= 0xE ? (v8 = ((1 << v7) & 0x76B6) == 0) : (v8 = 1), !v8))
      {
        if (v7 - 31 >= 0x19 && (v7 > 0xE || ((1 << v7) & 0x76B6) == 0))
          CLMicroLocationProto::SensorsScanComplete::MergeFrom();
        *((_DWORD *)this + 4) |= 1u;
        *((_DWORD *)this + 2) = v7;
      }
      if (*((_QWORD *)a2 + 1) == *((_QWORD *)a2 + 2)
        && (*((_DWORD *)a2 + 11) || *((_DWORD *)a2 + 6) == *((_DWORD *)a2 + 10)))
      {
        *((_DWORD *)a2 + 8) = 0;
        result = 1;
        *((_BYTE *)a2 + 36) = 1;
        return result;
      }
    }
    if (!(_DWORD)TagFallback || (TagFallback & 7) == 4)
      break;
    if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(a2, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback) & 1) == 0)return 0;
  }
  return 1;
}

uint64_t CLMicroLocationProto::SensorsScanComplete::SerializeWithCachedSizes(uint64_t this, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  if ((*(_BYTE *)(this + 16) & 1) != 0)
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(unsigned int *)(this + 8), (uint64_t)a2, a4);
  return this;
}

uint64_t CLMicroLocationProto::SensorsScanComplete::ByteSize(CLMicroLocationProto::SensorsScanComplete *this)
{
  uint64_t result;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v3;

  if ((*((_BYTE *)this + 16) & 1) != 0)
  {
    v3 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 2);
    if ((v3 & 0x80000000) != 0)
    {
      result = 11;
    }
    else if (v3 >= 0x80)
    {
      result = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v3) + 1;
    }
    else
    {
      result = 2;
    }
  }
  else
  {
    result = 0;
  }
  *((_DWORD *)this + 3) = result;
  return result;
}

void CLMicroLocationProto::SensorsScanComplete::CheckTypeAndMergeFrom(CLMicroLocationProto::SensorsScanComplete *this, const wireless_diagnostics::google::protobuf::MessageLite *lpsrc)
{
  uint64_t v4;
  uint64_t v5;

  CLMicroLocationProto::SensorsScanComplete::MergeFrom(this, lpsrc);
}

void CLMicroLocationProto::SensorsScanComplete::CopyFrom(CLMicroLocationProto::SensorsScanComplete *this, const CLMicroLocationProto::SensorsScanComplete *a2)
{
  if (a2 != this)
  {
    (*(void (**)(CLMicroLocationProto::SensorsScanComplete *))(*(_QWORD *)this + 32))(this);
    CLMicroLocationProto::SensorsScanComplete::MergeFrom(this, a2);
  }
}

uint64_t CLMicroLocationProto::SensorsScanComplete::IsInitialized(CLMicroLocationProto::SensorsScanComplete *this)
{
  return 1;
}

_QWORD *CLMicroLocationProto::SensorsScanComplete::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CLMicroLocationProto.SensorsScanComplete");
}

void CLMicroLocationProto::StartSpectating::MergeFrom(CLMicroLocationProto::StartSpectating *this, const CLMicroLocationProto::StartSpectating *a2)
{
  unsigned int v4;
  _BYTE v6[48];

  if (a2 == this)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v6);
  }
  if ((*((_BYTE *)a2 + 16) & 1) != 0)
  {
    v4 = *((_DWORD *)a2 + 2);
    if (v4 - 31 >= 0x19 && (v4 > 0xE || ((1 << v4) & 0x76B6) == 0))
      CLMicroLocationProto::StartSpectating::MergeFrom();
    *((_DWORD *)this + 4) |= 1u;
    *((_DWORD *)this + 2) = v4;
  }
}

void sub_241AC988C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void CLMicroLocationProto::StartSpectating::~StartSpectating(CLMicroLocationProto::StartSpectating *this)
{
  *(_QWORD *)this = &off_2511D7A00;
  CLMicroLocationProto::protobuf_AddDesc_microlocation_2eproto(this);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

{
  CLMicroLocationProto::StartSpectating::~StartSpectating(this);
  JUMPOUT(0x2426A04D4);
}

double CLMicroLocationProto::StartSpectating::New(CLMicroLocationProto::StartSpectating *this)
{
  uint64_t v1;
  double result;

  v1 = operator new();
  *(_QWORD *)v1 = &off_2511D7A00;
  *(_QWORD *)&result = 34;
  *(_QWORD *)(v1 + 8) = 34;
  *(_DWORD *)(v1 + 16) = 0;
  return result;
}

uint64_t CLMicroLocationProto::StartSpectating::Clear(uint64_t this)
{
  if (*(_BYTE *)(this + 16))
    *(_DWORD *)(this + 8) = 34;
  *(_DWORD *)(this + 16) = 0;
  return this;
}

uint64_t CLMicroLocationProto::StartSpectating::MergePartialFromCodedStream(CLMicroLocationProto::StartSpectating *this, wireless_diagnostics::google::protobuf::io::CodedInputStream *a2)
{
  char *v4;
  uint64_t TagFallback;
  char *v6;
  unsigned int v7;
  BOOL v8;
  uint64_t result;
  unsigned int v11;

  while (1)
  {
    while (1)
    {
      v4 = (char *)*((_QWORD *)a2 + 1);
      if ((unint64_t)v4 >= *((_QWORD *)a2 + 2) || *v4 < 0)
      {
        TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(a2);
        *((_DWORD *)a2 + 8) = TagFallback;
      }
      else
      {
        TagFallback = *v4;
        *((_DWORD *)a2 + 8) = TagFallback;
        *((_QWORD *)a2 + 1) = v4 + 1;
      }
      if ((_DWORD)TagFallback != 8)
        break;
      v11 = 0;
      v6 = (char *)*((_QWORD *)a2 + 1);
      if ((unint64_t)v6 >= *((_QWORD *)a2 + 2) || *v6 < 0)
      {
        result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v11);
        if (!(_DWORD)result)
          return result;
        v7 = v11;
      }
      else
      {
        v7 = *v6;
        *((_QWORD *)a2 + 1) = v6 + 1;
      }
      if (v7 - 31 < 0x19 || (v7 <= 0xE ? (v8 = ((1 << v7) & 0x76B6) == 0) : (v8 = 1), !v8))
      {
        if (v7 - 31 >= 0x19 && (v7 > 0xE || ((1 << v7) & 0x76B6) == 0))
          CLMicroLocationProto::StartSpectating::MergeFrom();
        *((_DWORD *)this + 4) |= 1u;
        *((_DWORD *)this + 2) = v7;
      }
      if (*((_QWORD *)a2 + 1) == *((_QWORD *)a2 + 2)
        && (*((_DWORD *)a2 + 11) || *((_DWORD *)a2 + 6) == *((_DWORD *)a2 + 10)))
      {
        *((_DWORD *)a2 + 8) = 0;
        result = 1;
        *((_BYTE *)a2 + 36) = 1;
        return result;
      }
    }
    if (!(_DWORD)TagFallback || (TagFallback & 7) == 4)
      break;
    if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(a2, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback) & 1) == 0)return 0;
  }
  return 1;
}

uint64_t CLMicroLocationProto::StartSpectating::SerializeWithCachedSizes(uint64_t this, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  if ((*(_BYTE *)(this + 16) & 1) != 0)
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(unsigned int *)(this + 8), (uint64_t)a2, a4);
  return this;
}

uint64_t CLMicroLocationProto::StartSpectating::ByteSize(CLMicroLocationProto::StartSpectating *this)
{
  uint64_t result;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v3;

  if ((*((_BYTE *)this + 16) & 1) != 0)
  {
    v3 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 2);
    if ((v3 & 0x80000000) != 0)
    {
      result = 11;
    }
    else if (v3 >= 0x80)
    {
      result = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v3) + 1;
    }
    else
    {
      result = 2;
    }
  }
  else
  {
    result = 0;
  }
  *((_DWORD *)this + 3) = result;
  return result;
}

void CLMicroLocationProto::StartSpectating::CheckTypeAndMergeFrom(CLMicroLocationProto::StartSpectating *this, const wireless_diagnostics::google::protobuf::MessageLite *lpsrc)
{
  uint64_t v4;
  uint64_t v5;

  CLMicroLocationProto::StartSpectating::MergeFrom(this, lpsrc);
}

void CLMicroLocationProto::StartSpectating::CopyFrom(CLMicroLocationProto::StartSpectating *this, const CLMicroLocationProto::StartSpectating *a2)
{
  if (a2 != this)
  {
    (*(void (**)(CLMicroLocationProto::StartSpectating *))(*(_QWORD *)this + 32))(this);
    CLMicroLocationProto::StartSpectating::MergeFrom(this, a2);
  }
}

uint64_t CLMicroLocationProto::StartSpectating::IsInitialized(CLMicroLocationProto::StartSpectating *this)
{
  return 1;
}

_QWORD *CLMicroLocationProto::StartSpectating::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CLMicroLocationProto.StartSpectating");
}

void CLMicroLocationProto::StopSpectating::MergeFrom(CLMicroLocationProto::StopSpectating *this, const CLMicroLocationProto::StopSpectating *a2)
{
  unsigned int v4;
  _BYTE v6[48];

  if (a2 == this)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v6);
  }
  if ((*((_BYTE *)a2 + 16) & 1) != 0)
  {
    v4 = *((_DWORD *)a2 + 2);
    if (v4 - 31 >= 0x19 && (v4 > 0xE || ((1 << v4) & 0x76B6) == 0))
      CLMicroLocationProto::StopSpectating::MergeFrom();
    *((_DWORD *)this + 4) |= 1u;
    *((_DWORD *)this + 2) = v4;
  }
}

void sub_241AC9C8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void CLMicroLocationProto::StopSpectating::~StopSpectating(CLMicroLocationProto::StopSpectating *this)
{
  *(_QWORD *)this = &off_2511D7A78;
  CLMicroLocationProto::protobuf_AddDesc_microlocation_2eproto(this);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

{
  CLMicroLocationProto::StopSpectating::~StopSpectating(this);
  JUMPOUT(0x2426A04D4);
}

double CLMicroLocationProto::StopSpectating::New(CLMicroLocationProto::StopSpectating *this)
{
  uint64_t v1;
  double result;

  v1 = operator new();
  *(_QWORD *)v1 = &off_2511D7A78;
  *(_QWORD *)&result = 35;
  *(_QWORD *)(v1 + 8) = 35;
  *(_DWORD *)(v1 + 16) = 0;
  return result;
}

uint64_t CLMicroLocationProto::StopSpectating::Clear(uint64_t this)
{
  if (*(_BYTE *)(this + 16))
    *(_DWORD *)(this + 8) = 35;
  *(_DWORD *)(this + 16) = 0;
  return this;
}

uint64_t CLMicroLocationProto::StopSpectating::MergePartialFromCodedStream(CLMicroLocationProto::StopSpectating *this, wireless_diagnostics::google::protobuf::io::CodedInputStream *a2)
{
  char *v4;
  uint64_t TagFallback;
  char *v6;
  unsigned int v7;
  BOOL v8;
  uint64_t result;
  unsigned int v11;

  while (1)
  {
    while (1)
    {
      v4 = (char *)*((_QWORD *)a2 + 1);
      if ((unint64_t)v4 >= *((_QWORD *)a2 + 2) || *v4 < 0)
      {
        TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(a2);
        *((_DWORD *)a2 + 8) = TagFallback;
      }
      else
      {
        TagFallback = *v4;
        *((_DWORD *)a2 + 8) = TagFallback;
        *((_QWORD *)a2 + 1) = v4 + 1;
      }
      if ((_DWORD)TagFallback != 8)
        break;
      v11 = 0;
      v6 = (char *)*((_QWORD *)a2 + 1);
      if ((unint64_t)v6 >= *((_QWORD *)a2 + 2) || *v6 < 0)
      {
        result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v11);
        if (!(_DWORD)result)
          return result;
        v7 = v11;
      }
      else
      {
        v7 = *v6;
        *((_QWORD *)a2 + 1) = v6 + 1;
      }
      if (v7 - 31 < 0x19 || (v7 <= 0xE ? (v8 = ((1 << v7) & 0x76B6) == 0) : (v8 = 1), !v8))
      {
        if (v7 - 31 >= 0x19 && (v7 > 0xE || ((1 << v7) & 0x76B6) == 0))
          CLMicroLocationProto::StopSpectating::MergeFrom();
        *((_DWORD *)this + 4) |= 1u;
        *((_DWORD *)this + 2) = v7;
      }
      if (*((_QWORD *)a2 + 1) == *((_QWORD *)a2 + 2)
        && (*((_DWORD *)a2 + 11) || *((_DWORD *)a2 + 6) == *((_DWORD *)a2 + 10)))
      {
        *((_DWORD *)a2 + 8) = 0;
        result = 1;
        *((_BYTE *)a2 + 36) = 1;
        return result;
      }
    }
    if (!(_DWORD)TagFallback || (TagFallback & 7) == 4)
      break;
    if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(a2, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback) & 1) == 0)return 0;
  }
  return 1;
}

uint64_t CLMicroLocationProto::StopSpectating::SerializeWithCachedSizes(uint64_t this, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  if ((*(_BYTE *)(this + 16) & 1) != 0)
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(unsigned int *)(this + 8), (uint64_t)a2, a4);
  return this;
}

uint64_t CLMicroLocationProto::StopSpectating::ByteSize(CLMicroLocationProto::StopSpectating *this)
{
  uint64_t result;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v3;

  if ((*((_BYTE *)this + 16) & 1) != 0)
  {
    v3 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 2);
    if ((v3 & 0x80000000) != 0)
    {
      result = 11;
    }
    else if (v3 >= 0x80)
    {
      result = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v3) + 1;
    }
    else
    {
      result = 2;
    }
  }
  else
  {
    result = 0;
  }
  *((_DWORD *)this + 3) = result;
  return result;
}

void CLMicroLocationProto::StopSpectating::CheckTypeAndMergeFrom(CLMicroLocationProto::StopSpectating *this, const wireless_diagnostics::google::protobuf::MessageLite *lpsrc)
{
  uint64_t v4;
  uint64_t v5;

  CLMicroLocationProto::StopSpectating::MergeFrom(this, lpsrc);
}

void CLMicroLocationProto::StopSpectating::CopyFrom(CLMicroLocationProto::StopSpectating *this, const CLMicroLocationProto::StopSpectating *a2)
{
  if (a2 != this)
  {
    (*(void (**)(CLMicroLocationProto::StopSpectating *))(*(_QWORD *)this + 32))(this);
    CLMicroLocationProto::StopSpectating::MergeFrom(this, a2);
  }
}

uint64_t CLMicroLocationProto::StopSpectating::IsInitialized(CLMicroLocationProto::StopSpectating *this)
{
  return 1;
}

_QWORD *CLMicroLocationProto::StopSpectating::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CLMicroLocationProto.StopSpectating");
}

void CLMicroLocationProto::ServiceCreate::MergeFrom(CLMicroLocationProto::ServiceCreate *this, const CLMicroLocationProto::ServiceCreate *a2)
{
  int v4;
  unsigned int v5;
  const std::string *v6;
  std::string *v7;
  uint64_t v8;
  _BYTE v9[48];

  if (a2 == this)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v9);
  }
  LOBYTE(v4) = *((_BYTE *)a2 + 32);
  if ((_BYTE)v4)
  {
    if ((*((_BYTE *)a2 + 32) & 1) != 0)
    {
      v5 = *((_DWORD *)a2 + 6);
      if (v5 - 31 >= 0x19 && (v5 > 0xE || ((1 << v5) & 0x76B6) == 0))
        CLMicroLocationProto::ServiceCreate::MergeFrom();
      *((_DWORD *)this + 8) |= 1u;
      *((_DWORD *)this + 6) = v5;
      v4 = *((_DWORD *)a2 + 8);
    }
    if ((v4 & 2) != 0)
    {
      v6 = (const std::string *)*((_QWORD *)a2 + 1);
      *((_DWORD *)this + 8) |= 2u;
      v7 = (std::string *)*((_QWORD *)this + 1);
      if (v7 == (std::string *)MEMORY[0x24BEDD958])
      {
        v7 = (std::string *)operator new();
        v7->__r_.__value_.__l.__size_ = 0;
        v7->__r_.__value_.__r.__words[2] = 0;
        v7->__r_.__value_.__r.__words[0] = 0;
        *((_QWORD *)this + 1) = v7;
      }
      std::string::operator=(v7, v6);
      v4 = *((_DWORD *)a2 + 8);
    }
    if ((v4 & 4) != 0)
    {
      v8 = *((_QWORD *)a2 + 2);
      *((_DWORD *)this + 8) |= 4u;
      *((_QWORD *)this + 2) = v8;
    }
  }
}

void sub_241ACA10C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void CLMicroLocationProto::ServiceCreate::~ServiceCreate(CLMicroLocationProto::ServiceCreate *this)
{
  *(_QWORD *)this = &off_2511D7AF0;
  CLMicroLocationProto::ClusterRecordings::SharedDtor(this);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

{
  CLMicroLocationProto::ServiceCreate::~ServiceCreate(this);
  JUMPOUT(0x2426A04D4);
}

double CLMicroLocationProto::ServiceCreate::New(CLMicroLocationProto::ServiceCreate *this)
{
  uint64_t v1;
  double result;
  uint64_t v3;

  v1 = operator new();
  *(_QWORD *)&result = 36;
  v3 = MEMORY[0x24BEDD958];
  *(_QWORD *)(v1 + 24) = 36;
  *(_QWORD *)v1 = &off_2511D7AF0;
  *(_QWORD *)(v1 + 8) = v3;
  *(_QWORD *)(v1 + 16) = 0;
  *(_DWORD *)(v1 + 32) = 0;
  return result;
}

uint64_t CLMicroLocationProto::ServiceCreate::Clear(uint64_t this)
{
  char v1;
  uint64_t v2;

  v1 = *(_BYTE *)(this + 32);
  if (v1)
  {
    *(_DWORD *)(this + 24) = 36;
    if ((v1 & 2) != 0)
    {
      v2 = *(_QWORD *)(this + 8);
      if (v2 != MEMORY[0x24BEDD958])
      {
        if (*(char *)(v2 + 23) < 0)
        {
          **(_BYTE **)v2 = 0;
          *(_QWORD *)(v2 + 8) = 0;
        }
        else
        {
          *(_BYTE *)v2 = 0;
          *(_BYTE *)(v2 + 23) = 0;
        }
      }
    }
    *(_QWORD *)(this + 16) = 0;
  }
  *(_DWORD *)(this + 32) = 0;
  return this;
}

uint64_t CLMicroLocationProto::ServiceCreate::MergePartialFromCodedStream(CLMicroLocationProto::ServiceCreate *this, wireless_diagnostics::google::protobuf::io::CodedInputStream *a2)
{
  unint64_t *v4;
  uint64_t v5;
  char *v6;
  uint64_t TagFallback;
  unsigned int v8;
  int v9;
  unint64_t v10;
  char *v11;
  char *v12;
  unsigned int v13;
  BOOL v14;
  _BYTE *v16;
  _QWORD *v17;
  _BYTE *v18;
  unsigned __int8 *v19;
  uint64_t result;
  unsigned int v21;

  v4 = (unint64_t *)((char *)this + 16);
  v5 = MEMORY[0x24BEDD958];
  while (1)
  {
    while (1)
    {
      while (1)
      {
        v6 = (char *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v6 >= *((_QWORD *)a2 + 2) || *v6 < 0)
        {
          TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(a2);
          *((_DWORD *)a2 + 8) = TagFallback;
          if (!(_DWORD)TagFallback)
            return 1;
        }
        else
        {
          TagFallback = *v6;
          *((_DWORD *)a2 + 8) = TagFallback;
          *((_QWORD *)a2 + 1) = v6 + 1;
          if (!(_DWORD)TagFallback)
            return 1;
        }
        v8 = TagFallback >> 3;
        if (TagFallback >> 3 != 1)
          break;
        v9 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_19;
        v21 = 0;
        v12 = (char *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v12 >= *((_QWORD *)a2 + 2) || *v12 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v21);
          if (!(_DWORD)result)
            return result;
          v13 = v21;
        }
        else
        {
          v13 = *v12;
          *((_QWORD *)a2 + 1) = v12 + 1;
        }
        if (v13 - 31 < 0x19 || (v13 <= 0xE ? (v14 = ((1 << v13) & 0x76B6) == 0) : (v14 = 1), !v14))
        {
          if (v13 - 31 >= 0x19 && (v13 > 0xE || ((1 << v13) & 0x76B6) == 0))
            CLMicroLocationProto::ServiceCreate::MergeFrom();
          *((_DWORD *)this + 8) |= 1u;
          *((_DWORD *)this + 6) = v13;
        }
        v16 = (_BYTE *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v16 < *((_QWORD *)a2 + 2) && *v16 == 18)
        {
          *((_QWORD *)a2 + 1) = v16 + 1;
          goto LABEL_38;
        }
      }
      if (v8 != 2)
        break;
      v9 = TagFallback & 7;
      if (v9 != 2)
        goto LABEL_19;
LABEL_38:
      *((_DWORD *)this + 8) |= 2u;
      if (*((_QWORD *)this + 1) == v5)
      {
        v17 = (_QWORD *)operator new();
        v17[1] = 0;
        v17[2] = 0;
        *v17 = 0;
        *((_QWORD *)this + 1) = v17;
      }
      result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString();
      if (!(_DWORD)result)
        return result;
      v18 = (_BYTE *)*((_QWORD *)a2 + 1);
      v10 = *((_QWORD *)a2 + 2);
      if ((unint64_t)v18 < v10 && *v18 == 24)
      {
        v11 = v18 + 1;
        *((_QWORD *)a2 + 1) = v11;
LABEL_44:
        if ((unint64_t)v11 >= v10 || *v11 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint64Fallback(a2, v4);
          if (!(_DWORD)result)
            return result;
          v19 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
          v10 = *((_QWORD *)a2 + 2);
        }
        else
        {
          *v4 = *v11;
          v19 = (unsigned __int8 *)(v11 + 1);
          *((_QWORD *)a2 + 1) = v19;
        }
        *((_DWORD *)this + 8) |= 4u;
        if (v19 == (unsigned __int8 *)v10 && (*((_DWORD *)a2 + 11) || *((_DWORD *)a2 + 6) == *((_DWORD *)a2 + 10)))
        {
          *((_DWORD *)a2 + 8) = 0;
          result = 1;
          *((_BYTE *)a2 + 36) = 1;
          return result;
        }
      }
    }
    if (v8 == 3)
    {
      v9 = TagFallback & 7;
      if ((TagFallback & 7) == 0)
      {
        v11 = (char *)*((_QWORD *)a2 + 1);
        v10 = *((_QWORD *)a2 + 2);
        goto LABEL_44;
      }
    }
    else
    {
      v9 = TagFallback & 7;
    }
LABEL_19:
    if (v9 == 4)
      return 1;
    if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(a2, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback) & 1) == 0)return 0;
  }
}

uint64_t CLMicroLocationProto::ServiceCreate::SerializeWithCachedSizes(uint64_t this, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  int v6;

  v5 = this;
  v6 = *(_DWORD *)(this + 32);
  if ((v6 & 1) != 0)
  {
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(unsigned int *)(this + 24), (uint64_t)a2, a4);
    v6 = *(_DWORD *)(v5 + 32);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0)
        return this;
      return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt64((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, *(_QWORD *)(v5 + 16), (uint64_t)a2, a4);
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString();
  if ((*(_DWORD *)(v5 + 32) & 4) != 0)
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt64((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, *(_QWORD *)(v5 + 16), (uint64_t)a2, a4);
  return this;
}

uint64_t CLMicroLocationProto::ServiceCreate::ByteSize(CLMicroLocationProto::ServiceCreate *this)
{
  int v2;
  uint64_t v3;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v4;
  uint64_t v5;
  int v6;
  char v7;
  uint64_t v8;
  unint64_t v9;
  int v10;

  LOBYTE(v2) = *((_BYTE *)this + 32);
  if (!(_BYTE)v2)
  {
    v3 = 0;
    goto LABEL_24;
  }
  if ((*((_BYTE *)this + 32) & 1) == 0)
  {
    v3 = 0;
    if ((*((_BYTE *)this + 32) & 2) == 0)
      goto LABEL_22;
LABEL_13:
    v5 = *((_QWORD *)this + 1);
    v6 = *(unsigned __int8 *)(v5 + 23);
    v7 = v6;
    v8 = *(_QWORD *)(v5 + 8);
    if ((v6 & 0x80u) == 0)
      v9 = *(unsigned __int8 *)(v5 + 23);
    else
      v9 = v8;
    if (v9 >= 0x80)
    {
      v10 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v9);
      v6 = *(unsigned __int8 *)(v5 + 23);
      v8 = *(_QWORD *)(v5 + 8);
      v2 = *((_DWORD *)this + 8);
      v7 = *(_BYTE *)(v5 + 23);
    }
    else
    {
      v10 = 1;
    }
    if (v7 < 0)
      v6 = v8;
    v3 = (v3 + v10 + v6 + 1);
    goto LABEL_22;
  }
  v4 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 6);
  if ((v4 & 0x80000000) != 0)
  {
    v3 = 11;
    if ((v2 & 2) != 0)
      goto LABEL_13;
  }
  else
  {
    if (v4 >= 0x80)
    {
      v3 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v4) + 1;
      v2 = *((_DWORD *)this + 8);
      if ((v2 & 2) == 0)
        goto LABEL_22;
      goto LABEL_13;
    }
    v3 = 2;
    if ((v2 & 2) != 0)
      goto LABEL_13;
  }
LABEL_22:
  if ((v2 & 4) != 0)
    v3 = v3
       + wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize64(*((wireless_diagnostics::google::protobuf::io::CodedOutputStream **)this + 2))
       + 1;
LABEL_24:
  *((_DWORD *)this + 7) = v3;
  return v3;
}

void CLMicroLocationProto::ServiceCreate::CheckTypeAndMergeFrom(CLMicroLocationProto::ServiceCreate *this, const wireless_diagnostics::google::protobuf::MessageLite *lpsrc)
{
  uint64_t v4;
  uint64_t v5;

  CLMicroLocationProto::ServiceCreate::MergeFrom(this, lpsrc);
}

uint64_t CLMicroLocationProto::ServiceCreate::IsInitialized(CLMicroLocationProto::ServiceCreate *this)
{
  return 1;
}

_QWORD *CLMicroLocationProto::ServiceCreate::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CLMicroLocationProto.ServiceCreate");
}

void CLMicroLocationProto::ServiceDelete::MergeFrom(CLMicroLocationProto::ServiceDelete *this, const CLMicroLocationProto::ServiceDelete *a2)
{
  int v4;
  unsigned int v5;
  const std::string *v6;
  std::string *v7;
  const std::string *v8;
  std::string *v9;
  _BYTE v10[48];

  if (a2 == this)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v10);
  }
  LOBYTE(v4) = *((_BYTE *)a2 + 32);
  if ((_BYTE)v4)
  {
    if ((*((_BYTE *)a2 + 32) & 1) != 0)
    {
      v5 = *((_DWORD *)a2 + 6);
      if (v5 - 31 >= 0x19 && (v5 > 0xE || ((1 << v5) & 0x76B6) == 0))
        CLMicroLocationProto::ServiceDelete::MergeFrom();
      *((_DWORD *)this + 8) |= 1u;
      *((_DWORD *)this + 6) = v5;
      v4 = *((_DWORD *)a2 + 8);
    }
    if ((v4 & 2) != 0)
    {
      v6 = (const std::string *)*((_QWORD *)a2 + 1);
      *((_DWORD *)this + 8) |= 2u;
      v7 = (std::string *)*((_QWORD *)this + 1);
      if (v7 == (std::string *)MEMORY[0x24BEDD958])
      {
        v7 = (std::string *)operator new();
        v7->__r_.__value_.__l.__size_ = 0;
        v7->__r_.__value_.__r.__words[2] = 0;
        v7->__r_.__value_.__r.__words[0] = 0;
        *((_QWORD *)this + 1) = v7;
      }
      std::string::operator=(v7, v6);
      v4 = *((_DWORD *)a2 + 8);
    }
    if ((v4 & 4) != 0)
    {
      v8 = (const std::string *)*((_QWORD *)a2 + 2);
      *((_DWORD *)this + 8) |= 4u;
      v9 = (std::string *)*((_QWORD *)this + 2);
      if (v9 == (std::string *)MEMORY[0x24BEDD958])
      {
        v9 = (std::string *)operator new();
        v9->__r_.__value_.__l.__size_ = 0;
        v9->__r_.__value_.__r.__words[2] = 0;
        v9->__r_.__value_.__r.__words[0] = 0;
        *((_QWORD *)this + 2) = v9;
      }
      std::string::operator=(v9, v8);
    }
  }
}

void sub_241ACA7E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void CLMicroLocationProto::ServiceDelete::~ServiceDelete(CLMicroLocationProto::ServiceDelete *this)
{
  *(_QWORD *)this = &off_2511D7B68;
  CLMicroLocationProto::ServiceDelete::SharedDtor(this);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

{
  CLMicroLocationProto::ServiceDelete::~ServiceDelete(this);
  JUMPOUT(0x2426A04D4);
}

void CLMicroLocationProto::ServiceDelete::SharedDtor(CLMicroLocationProto::ServiceDelete *this)
{
  CLMicroLocationProto::ServiceDelete *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  v1 = this;
  v2 = *((_QWORD *)this + 1);
  v3 = MEMORY[0x24BEDD958];
  if (v2 != MEMORY[0x24BEDD958] && v2 != 0)
  {
    if (*(char *)(v2 + 23) < 0)
      operator delete(*(void **)v2);
    this = (CLMicroLocationProto::ServiceDelete *)MEMORY[0x2426A04D4](v2, 0x1012C40EC159624);
  }
  v5 = *((_QWORD *)v1 + 2);
  if (v5 != v3 && v5 != 0)
  {
    if (*(char *)(v5 + 23) < 0)
      operator delete(*(void **)v5);
    this = (CLMicroLocationProto::ServiceDelete *)MEMORY[0x2426A04D4](v5, 0x1012C40EC159624);
  }
  CLMicroLocationProto::protobuf_AddDesc_microlocation_2eproto(this);
}

double CLMicroLocationProto::ServiceDelete::New(CLMicroLocationProto::ServiceDelete *this)
{
  uint64_t v1;
  double result;
  uint64_t v3;

  v1 = operator new();
  *(_QWORD *)&result = 37;
  v3 = MEMORY[0x24BEDD958];
  *(_QWORD *)(v1 + 24) = 37;
  *(_QWORD *)v1 = &off_2511D7B68;
  *(_QWORD *)(v1 + 8) = v3;
  *(_QWORD *)(v1 + 16) = v3;
  *(_DWORD *)(v1 + 32) = 0;
  return result;
}

uint64_t CLMicroLocationProto::ServiceDelete::Clear(uint64_t this)
{
  char v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(_BYTE *)(this + 32);
  if (v1)
  {
    *(_DWORD *)(this + 24) = 37;
    v2 = MEMORY[0x24BEDD958];
    if ((v1 & 2) != 0)
    {
      v3 = *(_QWORD *)(this + 8);
      if (v3 != MEMORY[0x24BEDD958])
      {
        if (*(char *)(v3 + 23) < 0)
        {
          **(_BYTE **)v3 = 0;
          *(_QWORD *)(v3 + 8) = 0;
        }
        else
        {
          *(_BYTE *)v3 = 0;
          *(_BYTE *)(v3 + 23) = 0;
        }
      }
    }
    if ((*(_BYTE *)(this + 32) & 4) != 0)
    {
      v4 = *(_QWORD *)(this + 16);
      if (v4 != v2)
      {
        if (*(char *)(v4 + 23) < 0)
        {
          **(_BYTE **)v4 = 0;
          *(_QWORD *)(v4 + 8) = 0;
        }
        else
        {
          *(_BYTE *)v4 = 0;
          *(_BYTE *)(v4 + 23) = 0;
        }
      }
    }
  }
  *(_DWORD *)(this + 32) = 0;
  return this;
}

uint64_t CLMicroLocationProto::ServiceDelete::MergePartialFromCodedStream(CLMicroLocationProto::ServiceDelete *this, wireless_diagnostics::google::protobuf::io::CodedInputStream *a2)
{
  uint64_t v4;
  char *v5;
  uint64_t TagFallback;
  unsigned int v7;
  int v8;
  char *v9;
  unsigned int v10;
  BOOL v11;
  _BYTE *v13;
  _QWORD *v14;
  _BYTE *v15;
  _QWORD *v16;
  uint64_t result;
  unsigned int v18;

  v4 = MEMORY[0x24BEDD958];
  while (1)
  {
    while (1)
    {
      while (1)
      {
        v5 = (char *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v5 >= *((_QWORD *)a2 + 2) || *v5 < 0)
        {
          TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(a2);
          *((_DWORD *)a2 + 8) = TagFallback;
          if (!(_DWORD)TagFallback)
            return 1;
        }
        else
        {
          TagFallback = *v5;
          *((_DWORD *)a2 + 8) = TagFallback;
          *((_QWORD *)a2 + 1) = v5 + 1;
          if (!(_DWORD)TagFallback)
            return 1;
        }
        v7 = TagFallback >> 3;
        if (TagFallback >> 3 != 1)
          break;
        v8 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_19;
        v18 = 0;
        v9 = (char *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v9 >= *((_QWORD *)a2 + 2) || *v9 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v18);
          if (!(_DWORD)result)
            return result;
          v10 = v18;
        }
        else
        {
          v10 = *v9;
          *((_QWORD *)a2 + 1) = v9 + 1;
        }
        if (v10 - 31 < 0x19 || (v10 <= 0xE ? (v11 = ((1 << v10) & 0x76B6) == 0) : (v11 = 1), !v11))
        {
          if (v10 - 31 >= 0x19 && (v10 > 0xE || ((1 << v10) & 0x76B6) == 0))
            CLMicroLocationProto::ServiceDelete::MergeFrom();
          *((_DWORD *)this + 8) |= 1u;
          *((_DWORD *)this + 6) = v10;
        }
        v13 = (_BYTE *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v13 < *((_QWORD *)a2 + 2) && *v13 == 18)
        {
          *((_QWORD *)a2 + 1) = v13 + 1;
          goto LABEL_38;
        }
      }
      if (v7 != 2)
        break;
      v8 = TagFallback & 7;
      if (v8 != 2)
        goto LABEL_19;
LABEL_38:
      *((_DWORD *)this + 8) |= 2u;
      if (*((_QWORD *)this + 1) == v4)
      {
        v14 = (_QWORD *)operator new();
        v14[1] = 0;
        v14[2] = 0;
        *v14 = 0;
        *((_QWORD *)this + 1) = v14;
      }
      result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString();
      if (!(_DWORD)result)
        return result;
      v15 = (_BYTE *)*((_QWORD *)a2 + 1);
      if ((unint64_t)v15 < *((_QWORD *)a2 + 2) && *v15 == 26)
      {
        *((_QWORD *)a2 + 1) = v15 + 1;
LABEL_44:
        *((_DWORD *)this + 8) |= 4u;
        if (*((_QWORD *)this + 2) == v4)
        {
          v16 = (_QWORD *)operator new();
          v16[1] = 0;
          v16[2] = 0;
          *v16 = 0;
          *((_QWORD *)this + 2) = v16;
        }
        result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadBytes();
        if (!(_DWORD)result)
          return result;
        if (*((_QWORD *)a2 + 1) == *((_QWORD *)a2 + 2)
          && (*((_DWORD *)a2 + 11) || *((_DWORD *)a2 + 6) == *((_DWORD *)a2 + 10)))
        {
          *((_DWORD *)a2 + 8) = 0;
          result = 1;
          *((_BYTE *)a2 + 36) = 1;
          return result;
        }
      }
    }
    if (v7 == 3)
    {
      v8 = TagFallback & 7;
      if (v8 == 2)
        goto LABEL_44;
    }
    else
    {
      v8 = TagFallback & 7;
    }
LABEL_19:
    if (v8 == 4)
      return 1;
    if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(a2, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback) & 1) == 0)return 0;
  }
}

uint64_t CLMicroLocationProto::ServiceDelete::SerializeWithCachedSizes(uint64_t this, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v4;
  int v5;

  v4 = this;
  v5 = *(_DWORD *)(this + 32);
  if ((v5 & 1) != 0)
  {
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(unsigned int *)(this + 24), (uint64_t)a2, a4);
    v5 = *(_DWORD *)(v4 + 32);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0)
        return this;
      return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBytes();
    }
  }
  else if ((v5 & 2) == 0)
  {
    goto LABEL_3;
  }
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString();
  if ((*(_DWORD *)(v4 + 32) & 4) != 0)
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBytes();
  return this;
}

uint64_t CLMicroLocationProto::ServiceDelete::ByteSize(CLMicroLocationProto::ServiceDelete *this)
{
  int v2;
  uint64_t v3;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v4;
  uint64_t v5;
  int v6;
  char v7;
  uint64_t v8;
  unint64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  char v13;
  uint64_t v14;
  unint64_t v15;
  int v16;

  LOBYTE(v2) = *((_BYTE *)this + 32);
  if (!(_BYTE)v2)
  {
    v3 = 0;
    goto LABEL_32;
  }
  if ((*((_BYTE *)this + 32) & 1) == 0)
  {
    v3 = 0;
    if ((*((_BYTE *)this + 32) & 2) == 0)
      goto LABEL_22;
LABEL_13:
    v5 = *((_QWORD *)this + 1);
    v6 = *(unsigned __int8 *)(v5 + 23);
    v7 = v6;
    v8 = *(_QWORD *)(v5 + 8);
    if ((v6 & 0x80u) == 0)
      v9 = *(unsigned __int8 *)(v5 + 23);
    else
      v9 = v8;
    if (v9 >= 0x80)
    {
      v10 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v9);
      v6 = *(unsigned __int8 *)(v5 + 23);
      v8 = *(_QWORD *)(v5 + 8);
      v2 = *((_DWORD *)this + 8);
      v7 = *(_BYTE *)(v5 + 23);
    }
    else
    {
      v10 = 1;
    }
    if (v7 < 0)
      v6 = v8;
    v3 = (v3 + v10 + v6 + 1);
    goto LABEL_22;
  }
  v4 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 6);
  if ((v4 & 0x80000000) != 0)
  {
    v3 = 11;
    if ((v2 & 2) != 0)
      goto LABEL_13;
  }
  else
  {
    if (v4 >= 0x80)
    {
      v3 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v4) + 1;
      v2 = *((_DWORD *)this + 8);
      if ((v2 & 2) == 0)
        goto LABEL_22;
      goto LABEL_13;
    }
    v3 = 2;
    if ((v2 & 2) != 0)
      goto LABEL_13;
  }
LABEL_22:
  if ((v2 & 4) != 0)
  {
    v11 = *((_QWORD *)this + 2);
    v12 = *(unsigned __int8 *)(v11 + 23);
    v13 = v12;
    v14 = *(_QWORD *)(v11 + 8);
    if ((v12 & 0x80u) == 0)
      v15 = *(unsigned __int8 *)(v11 + 23);
    else
      v15 = v14;
    if (v15 >= 0x80)
    {
      v16 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v15);
      v12 = *(unsigned __int8 *)(v11 + 23);
      v14 = *(_QWORD *)(v11 + 8);
      v13 = *(_BYTE *)(v11 + 23);
    }
    else
    {
      v16 = 1;
    }
    if (v13 < 0)
      v12 = v14;
    v3 = (v3 + v16 + v12 + 1);
  }
LABEL_32:
  *((_DWORD *)this + 7) = v3;
  return v3;
}

void CLMicroLocationProto::ServiceDelete::CheckTypeAndMergeFrom(CLMicroLocationProto::ServiceDelete *this, const wireless_diagnostics::google::protobuf::MessageLite *lpsrc)
{
  uint64_t v4;
  uint64_t v5;

  CLMicroLocationProto::ServiceDelete::MergeFrom(this, lpsrc);
}

void CLMicroLocationProto::ServiceDelete::CopyFrom(CLMicroLocationProto::ServiceDelete *this, const CLMicroLocationProto::ServiceDelete *a2)
{
  if (a2 != this)
  {
    (*(void (**)(CLMicroLocationProto::ServiceDelete *))(*(_QWORD *)this + 32))(this);
    CLMicroLocationProto::ServiceDelete::MergeFrom(this, a2);
  }
}

uint64_t CLMicroLocationProto::ServiceDelete::IsInitialized(CLMicroLocationProto::ServiceDelete *this)
{
  return 1;
}

_QWORD *CLMicroLocationProto::ServiceDelete::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CLMicroLocationProto.ServiceDelete");
}

void CLMicroLocationProto::ServiceConnect::MergeFrom(CLMicroLocationProto::ServiceConnect *this, const CLMicroLocationProto::ServiceConnect *a2)
{
  int v4;
  unsigned int v5;
  const std::string *v6;
  std::string *v7;
  const std::string *v8;
  std::string *v9;
  _BYTE v10[48];

  if (a2 == this)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v10);
  }
  LOBYTE(v4) = *((_BYTE *)a2 + 32);
  if ((_BYTE)v4)
  {
    if ((*((_BYTE *)a2 + 32) & 1) != 0)
    {
      v5 = *((_DWORD *)a2 + 6);
      if (v5 - 31 >= 0x19 && (v5 > 0xE || ((1 << v5) & 0x76B6) == 0))
        CLMicroLocationProto::ServiceConnect::MergeFrom();
      *((_DWORD *)this + 8) |= 1u;
      *((_DWORD *)this + 6) = v5;
      v4 = *((_DWORD *)a2 + 8);
    }
    if ((v4 & 2) != 0)
    {
      v6 = (const std::string *)*((_QWORD *)a2 + 1);
      *((_DWORD *)this + 8) |= 2u;
      v7 = (std::string *)*((_QWORD *)this + 1);
      if (v7 == (std::string *)MEMORY[0x24BEDD958])
      {
        v7 = (std::string *)operator new();
        v7->__r_.__value_.__l.__size_ = 0;
        v7->__r_.__value_.__r.__words[2] = 0;
        v7->__r_.__value_.__r.__words[0] = 0;
        *((_QWORD *)this + 1) = v7;
      }
      std::string::operator=(v7, v6);
      v4 = *((_DWORD *)a2 + 8);
    }
    if ((v4 & 4) != 0)
    {
      v8 = (const std::string *)*((_QWORD *)a2 + 2);
      *((_DWORD *)this + 8) |= 4u;
      v9 = (std::string *)*((_QWORD *)this + 2);
      if (v9 == (std::string *)MEMORY[0x24BEDD958])
      {
        v9 = (std::string *)operator new();
        v9->__r_.__value_.__l.__size_ = 0;
        v9->__r_.__value_.__r.__words[2] = 0;
        v9->__r_.__value_.__r.__words[0] = 0;
        *((_QWORD *)this + 2) = v9;
      }
      std::string::operator=(v9, v8);
    }
  }
}

void sub_241ACB008(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void CLMicroLocationProto::ServiceConnect::~ServiceConnect(CLMicroLocationProto::ServiceConnect *this)
{
  *(_QWORD *)this = &off_2511D7BE0;
  CLMicroLocationProto::ServiceDelete::SharedDtor(this);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

{
  CLMicroLocationProto::ServiceConnect::~ServiceConnect(this);
  JUMPOUT(0x2426A04D4);
}

double CLMicroLocationProto::ServiceConnect::New(CLMicroLocationProto::ServiceConnect *this)
{
  uint64_t v1;
  double result;
  uint64_t v3;

  v1 = operator new();
  *(_QWORD *)&result = 38;
  v3 = MEMORY[0x24BEDD958];
  *(_QWORD *)(v1 + 24) = 38;
  *(_QWORD *)v1 = &off_2511D7BE0;
  *(_QWORD *)(v1 + 8) = v3;
  *(_QWORD *)(v1 + 16) = v3;
  *(_DWORD *)(v1 + 32) = 0;
  return result;
}

uint64_t CLMicroLocationProto::ServiceConnect::Clear(uint64_t this)
{
  char v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(_BYTE *)(this + 32);
  if (v1)
  {
    *(_DWORD *)(this + 24) = 38;
    v2 = MEMORY[0x24BEDD958];
    if ((v1 & 2) != 0)
    {
      v3 = *(_QWORD *)(this + 8);
      if (v3 != MEMORY[0x24BEDD958])
      {
        if (*(char *)(v3 + 23) < 0)
        {
          **(_BYTE **)v3 = 0;
          *(_QWORD *)(v3 + 8) = 0;
        }
        else
        {
          *(_BYTE *)v3 = 0;
          *(_BYTE *)(v3 + 23) = 0;
        }
      }
    }
    if ((*(_BYTE *)(this + 32) & 4) != 0)
    {
      v4 = *(_QWORD *)(this + 16);
      if (v4 != v2)
      {
        if (*(char *)(v4 + 23) < 0)
        {
          **(_BYTE **)v4 = 0;
          *(_QWORD *)(v4 + 8) = 0;
        }
        else
        {
          *(_BYTE *)v4 = 0;
          *(_BYTE *)(v4 + 23) = 0;
        }
      }
    }
  }
  *(_DWORD *)(this + 32) = 0;
  return this;
}

uint64_t CLMicroLocationProto::ServiceConnect::MergePartialFromCodedStream(CLMicroLocationProto::ServiceConnect *this, wireless_diagnostics::google::protobuf::io::CodedInputStream *a2)
{
  uint64_t v4;
  char *v5;
  uint64_t TagFallback;
  unsigned int v7;
  int v8;
  char *v9;
  unsigned int v10;
  BOOL v11;
  _BYTE *v13;
  _QWORD *v14;
  _BYTE *v15;
  _QWORD *v16;
  uint64_t result;
  unsigned int v18;

  v4 = MEMORY[0x24BEDD958];
  while (1)
  {
    while (1)
    {
      while (1)
      {
        v5 = (char *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v5 >= *((_QWORD *)a2 + 2) || *v5 < 0)
        {
          TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(a2);
          *((_DWORD *)a2 + 8) = TagFallback;
          if (!(_DWORD)TagFallback)
            return 1;
        }
        else
        {
          TagFallback = *v5;
          *((_DWORD *)a2 + 8) = TagFallback;
          *((_QWORD *)a2 + 1) = v5 + 1;
          if (!(_DWORD)TagFallback)
            return 1;
        }
        v7 = TagFallback >> 3;
        if (TagFallback >> 3 != 1)
          break;
        v8 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_19;
        v18 = 0;
        v9 = (char *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v9 >= *((_QWORD *)a2 + 2) || *v9 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v18);
          if (!(_DWORD)result)
            return result;
          v10 = v18;
        }
        else
        {
          v10 = *v9;
          *((_QWORD *)a2 + 1) = v9 + 1;
        }
        if (v10 - 31 < 0x19 || (v10 <= 0xE ? (v11 = ((1 << v10) & 0x76B6) == 0) : (v11 = 1), !v11))
        {
          if (v10 - 31 >= 0x19 && (v10 > 0xE || ((1 << v10) & 0x76B6) == 0))
            CLMicroLocationProto::ServiceConnect::MergeFrom();
          *((_DWORD *)this + 8) |= 1u;
          *((_DWORD *)this + 6) = v10;
        }
        v13 = (_BYTE *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v13 < *((_QWORD *)a2 + 2) && *v13 == 18)
        {
          *((_QWORD *)a2 + 1) = v13 + 1;
          goto LABEL_38;
        }
      }
      if (v7 != 2)
        break;
      v8 = TagFallback & 7;
      if (v8 != 2)
        goto LABEL_19;
LABEL_38:
      *((_DWORD *)this + 8) |= 2u;
      if (*((_QWORD *)this + 1) == v4)
      {
        v14 = (_QWORD *)operator new();
        v14[1] = 0;
        v14[2] = 0;
        *v14 = 0;
        *((_QWORD *)this + 1) = v14;
      }
      result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString();
      if (!(_DWORD)result)
        return result;
      v15 = (_BYTE *)*((_QWORD *)a2 + 1);
      if ((unint64_t)v15 < *((_QWORD *)a2 + 2) && *v15 == 26)
      {
        *((_QWORD *)a2 + 1) = v15 + 1;
LABEL_44:
        *((_DWORD *)this + 8) |= 4u;
        if (*((_QWORD *)this + 2) == v4)
        {
          v16 = (_QWORD *)operator new();
          v16[1] = 0;
          v16[2] = 0;
          *v16 = 0;
          *((_QWORD *)this + 2) = v16;
        }
        result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadBytes();
        if (!(_DWORD)result)
          return result;
        if (*((_QWORD *)a2 + 1) == *((_QWORD *)a2 + 2)
          && (*((_DWORD *)a2 + 11) || *((_DWORD *)a2 + 6) == *((_DWORD *)a2 + 10)))
        {
          *((_DWORD *)a2 + 8) = 0;
          result = 1;
          *((_BYTE *)a2 + 36) = 1;
          return result;
        }
      }
    }
    if (v7 == 3)
    {
      v8 = TagFallback & 7;
      if (v8 == 2)
        goto LABEL_44;
    }
    else
    {
      v8 = TagFallback & 7;
    }
LABEL_19:
    if (v8 == 4)
      return 1;
    if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(a2, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback) & 1) == 0)return 0;
  }
}

uint64_t CLMicroLocationProto::ServiceConnect::SerializeWithCachedSizes(uint64_t this, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v4;
  int v5;

  v4 = this;
  v5 = *(_DWORD *)(this + 32);
  if ((v5 & 1) != 0)
  {
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(unsigned int *)(this + 24), (uint64_t)a2, a4);
    v5 = *(_DWORD *)(v4 + 32);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0)
        return this;
      return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBytes();
    }
  }
  else if ((v5 & 2) == 0)
  {
    goto LABEL_3;
  }
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString();
  if ((*(_DWORD *)(v4 + 32) & 4) != 0)
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBytes();
  return this;
}

uint64_t CLMicroLocationProto::ServiceConnect::ByteSize(CLMicroLocationProto::ServiceConnect *this)
{
  int v2;
  uint64_t v3;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v4;
  uint64_t v5;
  int v6;
  char v7;
  uint64_t v8;
  unint64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  char v13;
  uint64_t v14;
  unint64_t v15;
  int v16;

  LOBYTE(v2) = *((_BYTE *)this + 32);
  if (!(_BYTE)v2)
  {
    v3 = 0;
    goto LABEL_32;
  }
  if ((*((_BYTE *)this + 32) & 1) == 0)
  {
    v3 = 0;
    if ((*((_BYTE *)this + 32) & 2) == 0)
      goto LABEL_22;
LABEL_13:
    v5 = *((_QWORD *)this + 1);
    v6 = *(unsigned __int8 *)(v5 + 23);
    v7 = v6;
    v8 = *(_QWORD *)(v5 + 8);
    if ((v6 & 0x80u) == 0)
      v9 = *(unsigned __int8 *)(v5 + 23);
    else
      v9 = v8;
    if (v9 >= 0x80)
    {
      v10 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v9);
      v6 = *(unsigned __int8 *)(v5 + 23);
      v8 = *(_QWORD *)(v5 + 8);
      v2 = *((_DWORD *)this + 8);
      v7 = *(_BYTE *)(v5 + 23);
    }
    else
    {
      v10 = 1;
    }
    if (v7 < 0)
      v6 = v8;
    v3 = (v3 + v10 + v6 + 1);
    goto LABEL_22;
  }
  v4 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 6);
  if ((v4 & 0x80000000) != 0)
  {
    v3 = 11;
    if ((v2 & 2) != 0)
      goto LABEL_13;
  }
  else
  {
    if (v4 >= 0x80)
    {
      v3 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v4) + 1;
      v2 = *((_DWORD *)this + 8);
      if ((v2 & 2) == 0)
        goto LABEL_22;
      goto LABEL_13;
    }
    v3 = 2;
    if ((v2 & 2) != 0)
      goto LABEL_13;
  }
LABEL_22:
  if ((v2 & 4) != 0)
  {
    v11 = *((_QWORD *)this + 2);
    v12 = *(unsigned __int8 *)(v11 + 23);
    v13 = v12;
    v14 = *(_QWORD *)(v11 + 8);
    if ((v12 & 0x80u) == 0)
      v15 = *(unsigned __int8 *)(v11 + 23);
    else
      v15 = v14;
    if (v15 >= 0x80)
    {
      v16 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v15);
      v12 = *(unsigned __int8 *)(v11 + 23);
      v14 = *(_QWORD *)(v11 + 8);
      v13 = *(_BYTE *)(v11 + 23);
    }
    else
    {
      v16 = 1;
    }
    if (v13 < 0)
      v12 = v14;
    v3 = (v3 + v16 + v12 + 1);
  }
LABEL_32:
  *((_DWORD *)this + 7) = v3;
  return v3;
}

void CLMicroLocationProto::ServiceConnect::CheckTypeAndMergeFrom(CLMicroLocationProto::ServiceConnect *this, const wireless_diagnostics::google::protobuf::MessageLite *lpsrc)
{
  uint64_t v4;
  uint64_t v5;

  CLMicroLocationProto::ServiceConnect::MergeFrom(this, lpsrc);
}

void CLMicroLocationProto::ServiceConnect::CopyFrom(CLMicroLocationProto::ServiceConnect *this, const CLMicroLocationProto::ServiceConnect *a2)
{
  if (a2 != this)
  {
    (*(void (**)(CLMicroLocationProto::ServiceConnect *))(*(_QWORD *)this + 32))(this);
    CLMicroLocationProto::ServiceConnect::MergeFrom(this, a2);
  }
}

uint64_t CLMicroLocationProto::ServiceConnect::IsInitialized(CLMicroLocationProto::ServiceConnect *this)
{
  return 1;
}

_QWORD *CLMicroLocationProto::ServiceConnect::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CLMicroLocationProto.ServiceConnect");
}

void CLMicroLocationProto::ServiceDisconnect::MergeFrom(CLMicroLocationProto::ServiceDisconnect *this, const CLMicroLocationProto::ServiceDisconnect *a2)
{
  int v4;
  unsigned int v5;
  const std::string *v6;
  std::string *v7;
  const std::string *v8;
  std::string *v9;
  _BYTE v10[48];

  if (a2 == this)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v10);
  }
  LOBYTE(v4) = *((_BYTE *)a2 + 32);
  if ((_BYTE)v4)
  {
    if ((*((_BYTE *)a2 + 32) & 1) != 0)
    {
      v5 = *((_DWORD *)a2 + 6);
      if (v5 - 31 >= 0x19 && (v5 > 0xE || ((1 << v5) & 0x76B6) == 0))
        CLMicroLocationProto::ServiceDisconnect::MergeFrom();
      *((_DWORD *)this + 8) |= 1u;
      *((_DWORD *)this + 6) = v5;
      v4 = *((_DWORD *)a2 + 8);
    }
    if ((v4 & 2) != 0)
    {
      v6 = (const std::string *)*((_QWORD *)a2 + 1);
      *((_DWORD *)this + 8) |= 2u;
      v7 = (std::string *)*((_QWORD *)this + 1);
      if (v7 == (std::string *)MEMORY[0x24BEDD958])
      {
        v7 = (std::string *)operator new();
        v7->__r_.__value_.__l.__size_ = 0;
        v7->__r_.__value_.__r.__words[2] = 0;
        v7->__r_.__value_.__r.__words[0] = 0;
        *((_QWORD *)this + 1) = v7;
      }
      std::string::operator=(v7, v6);
      v4 = *((_DWORD *)a2 + 8);
    }
    if ((v4 & 4) != 0)
    {
      v8 = (const std::string *)*((_QWORD *)a2 + 2);
      *((_DWORD *)this + 8) |= 4u;
      v9 = (std::string *)*((_QWORD *)this + 2);
      if (v9 == (std::string *)MEMORY[0x24BEDD958])
      {
        v9 = (std::string *)operator new();
        v9->__r_.__value_.__l.__size_ = 0;
        v9->__r_.__value_.__r.__words[2] = 0;
        v9->__r_.__value_.__r.__words[0] = 0;
        *((_QWORD *)this + 2) = v9;
      }
      std::string::operator=(v9, v8);
    }
  }
}

void sub_241ACB794(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void CLMicroLocationProto::ServiceDisconnect::~ServiceDisconnect(CLMicroLocationProto::ServiceDisconnect *this)
{
  *(_QWORD *)this = &off_2511D7C58;
  CLMicroLocationProto::ServiceDelete::SharedDtor(this);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

{
  CLMicroLocationProto::ServiceDisconnect::~ServiceDisconnect(this);
  JUMPOUT(0x2426A04D4);
}

double CLMicroLocationProto::ServiceDisconnect::New(CLMicroLocationProto::ServiceDisconnect *this)
{
  uint64_t v1;
  double result;
  uint64_t v3;

  v1 = operator new();
  *(_QWORD *)&result = 39;
  v3 = MEMORY[0x24BEDD958];
  *(_QWORD *)(v1 + 24) = 39;
  *(_QWORD *)v1 = &off_2511D7C58;
  *(_QWORD *)(v1 + 8) = v3;
  *(_QWORD *)(v1 + 16) = v3;
  *(_DWORD *)(v1 + 32) = 0;
  return result;
}

uint64_t CLMicroLocationProto::ServiceDisconnect::Clear(uint64_t this)
{
  char v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(_BYTE *)(this + 32);
  if (v1)
  {
    *(_DWORD *)(this + 24) = 39;
    v2 = MEMORY[0x24BEDD958];
    if ((v1 & 2) != 0)
    {
      v3 = *(_QWORD *)(this + 8);
      if (v3 != MEMORY[0x24BEDD958])
      {
        if (*(char *)(v3 + 23) < 0)
        {
          **(_BYTE **)v3 = 0;
          *(_QWORD *)(v3 + 8) = 0;
        }
        else
        {
          *(_BYTE *)v3 = 0;
          *(_BYTE *)(v3 + 23) = 0;
        }
      }
    }
    if ((*(_BYTE *)(this + 32) & 4) != 0)
    {
      v4 = *(_QWORD *)(this + 16);
      if (v4 != v2)
      {
        if (*(char *)(v4 + 23) < 0)
        {
          **(_BYTE **)v4 = 0;
          *(_QWORD *)(v4 + 8) = 0;
        }
        else
        {
          *(_BYTE *)v4 = 0;
          *(_BYTE *)(v4 + 23) = 0;
        }
      }
    }
  }
  *(_DWORD *)(this + 32) = 0;
  return this;
}

uint64_t CLMicroLocationProto::ServiceDisconnect::MergePartialFromCodedStream(CLMicroLocationProto::ServiceDisconnect *this, wireless_diagnostics::google::protobuf::io::CodedInputStream *a2)
{
  uint64_t v4;
  char *v5;
  uint64_t TagFallback;
  unsigned int v7;
  int v8;
  char *v9;
  unsigned int v10;
  BOOL v11;
  _BYTE *v13;
  _QWORD *v14;
  _BYTE *v15;
  _QWORD *v16;
  uint64_t result;
  unsigned int v18;

  v4 = MEMORY[0x24BEDD958];
  while (1)
  {
    while (1)
    {
      while (1)
      {
        v5 = (char *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v5 >= *((_QWORD *)a2 + 2) || *v5 < 0)
        {
          TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(a2);
          *((_DWORD *)a2 + 8) = TagFallback;
          if (!(_DWORD)TagFallback)
            return 1;
        }
        else
        {
          TagFallback = *v5;
          *((_DWORD *)a2 + 8) = TagFallback;
          *((_QWORD *)a2 + 1) = v5 + 1;
          if (!(_DWORD)TagFallback)
            return 1;
        }
        v7 = TagFallback >> 3;
        if (TagFallback >> 3 != 1)
          break;
        v8 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_19;
        v18 = 0;
        v9 = (char *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v9 >= *((_QWORD *)a2 + 2) || *v9 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v18);
          if (!(_DWORD)result)
            return result;
          v10 = v18;
        }
        else
        {
          v10 = *v9;
          *((_QWORD *)a2 + 1) = v9 + 1;
        }
        if (v10 - 31 < 0x19 || (v10 <= 0xE ? (v11 = ((1 << v10) & 0x76B6) == 0) : (v11 = 1), !v11))
        {
          if (v10 - 31 >= 0x19 && (v10 > 0xE || ((1 << v10) & 0x76B6) == 0))
            CLMicroLocationProto::ServiceDisconnect::MergeFrom();
          *((_DWORD *)this + 8) |= 1u;
          *((_DWORD *)this + 6) = v10;
        }
        v13 = (_BYTE *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v13 < *((_QWORD *)a2 + 2) && *v13 == 18)
        {
          *((_QWORD *)a2 + 1) = v13 + 1;
          goto LABEL_38;
        }
      }
      if (v7 != 2)
        break;
      v8 = TagFallback & 7;
      if (v8 != 2)
        goto LABEL_19;
LABEL_38:
      *((_DWORD *)this + 8) |= 2u;
      if (*((_QWORD *)this + 1) == v4)
      {
        v14 = (_QWORD *)operator new();
        v14[1] = 0;
        v14[2] = 0;
        *v14 = 0;
        *((_QWORD *)this + 1) = v14;
      }
      result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString();
      if (!(_DWORD)result)
        return result;
      v15 = (_BYTE *)*((_QWORD *)a2 + 1);
      if ((unint64_t)v15 < *((_QWORD *)a2 + 2) && *v15 == 26)
      {
        *((_QWORD *)a2 + 1) = v15 + 1;
LABEL_44:
        *((_DWORD *)this + 8) |= 4u;
        if (*((_QWORD *)this + 2) == v4)
        {
          v16 = (_QWORD *)operator new();
          v16[1] = 0;
          v16[2] = 0;
          *v16 = 0;
          *((_QWORD *)this + 2) = v16;
        }
        result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadBytes();
        if (!(_DWORD)result)
          return result;
        if (*((_QWORD *)a2 + 1) == *((_QWORD *)a2 + 2)
          && (*((_DWORD *)a2 + 11) || *((_DWORD *)a2 + 6) == *((_DWORD *)a2 + 10)))
        {
          *((_DWORD *)a2 + 8) = 0;
          result = 1;
          *((_BYTE *)a2 + 36) = 1;
          return result;
        }
      }
    }
    if (v7 == 3)
    {
      v8 = TagFallback & 7;
      if (v8 == 2)
        goto LABEL_44;
    }
    else
    {
      v8 = TagFallback & 7;
    }
LABEL_19:
    if (v8 == 4)
      return 1;
    if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(a2, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback) & 1) == 0)return 0;
  }
}

uint64_t CLMicroLocationProto::ServiceDisconnect::SerializeWithCachedSizes(uint64_t this, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v4;
  int v5;

  v4 = this;
  v5 = *(_DWORD *)(this + 32);
  if ((v5 & 1) != 0)
  {
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(unsigned int *)(this + 24), (uint64_t)a2, a4);
    v5 = *(_DWORD *)(v4 + 32);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0)
        return this;
      return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBytes();
    }
  }
  else if ((v5 & 2) == 0)
  {
    goto LABEL_3;
  }
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString();
  if ((*(_DWORD *)(v4 + 32) & 4) != 0)
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBytes();
  return this;
}

uint64_t CLMicroLocationProto::ServiceDisconnect::ByteSize(CLMicroLocationProto::ServiceDisconnect *this)
{
  int v2;
  uint64_t v3;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v4;
  uint64_t v5;
  int v6;
  char v7;
  uint64_t v8;
  unint64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  char v13;
  uint64_t v14;
  unint64_t v15;
  int v16;

  LOBYTE(v2) = *((_BYTE *)this + 32);
  if (!(_BYTE)v2)
  {
    v3 = 0;
    goto LABEL_32;
  }
  if ((*((_BYTE *)this + 32) & 1) == 0)
  {
    v3 = 0;
    if ((*((_BYTE *)this + 32) & 2) == 0)
      goto LABEL_22;
LABEL_13:
    v5 = *((_QWORD *)this + 1);
    v6 = *(unsigned __int8 *)(v5 + 23);
    v7 = v6;
    v8 = *(_QWORD *)(v5 + 8);
    if ((v6 & 0x80u) == 0)
      v9 = *(unsigned __int8 *)(v5 + 23);
    else
      v9 = v8;
    if (v9 >= 0x80)
    {
      v10 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v9);
      v6 = *(unsigned __int8 *)(v5 + 23);
      v8 = *(_QWORD *)(v5 + 8);
      v2 = *((_DWORD *)this + 8);
      v7 = *(_BYTE *)(v5 + 23);
    }
    else
    {
      v10 = 1;
    }
    if (v7 < 0)
      v6 = v8;
    v3 = (v3 + v10 + v6 + 1);
    goto LABEL_22;
  }
  v4 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 6);
  if ((v4 & 0x80000000) != 0)
  {
    v3 = 11;
    if ((v2 & 2) != 0)
      goto LABEL_13;
  }
  else
  {
    if (v4 >= 0x80)
    {
      v3 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v4) + 1;
      v2 = *((_DWORD *)this + 8);
      if ((v2 & 2) == 0)
        goto LABEL_22;
      goto LABEL_13;
    }
    v3 = 2;
    if ((v2 & 2) != 0)
      goto LABEL_13;
  }
LABEL_22:
  if ((v2 & 4) != 0)
  {
    v11 = *((_QWORD *)this + 2);
    v12 = *(unsigned __int8 *)(v11 + 23);
    v13 = v12;
    v14 = *(_QWORD *)(v11 + 8);
    if ((v12 & 0x80u) == 0)
      v15 = *(unsigned __int8 *)(v11 + 23);
    else
      v15 = v14;
    if (v15 >= 0x80)
    {
      v16 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v15);
      v12 = *(unsigned __int8 *)(v11 + 23);
      v14 = *(_QWORD *)(v11 + 8);
      v13 = *(_BYTE *)(v11 + 23);
    }
    else
    {
      v16 = 1;
    }
    if (v13 < 0)
      v12 = v14;
    v3 = (v3 + v16 + v12 + 1);
  }
LABEL_32:
  *((_DWORD *)this + 7) = v3;
  return v3;
}

void CLMicroLocationProto::ServiceDisconnect::CheckTypeAndMergeFrom(CLMicroLocationProto::ServiceDisconnect *this, const wireless_diagnostics::google::protobuf::MessageLite *lpsrc)
{
  uint64_t v4;
  uint64_t v5;

  CLMicroLocationProto::ServiceDisconnect::MergeFrom(this, lpsrc);
}

void CLMicroLocationProto::ServiceDisconnect::CopyFrom(CLMicroLocationProto::ServiceDisconnect *this, const CLMicroLocationProto::ServiceDisconnect *a2)
{
  if (a2 != this)
  {
    (*(void (**)(CLMicroLocationProto::ServiceDisconnect *))(*(_QWORD *)this + 32))(this);
    CLMicroLocationProto::ServiceDisconnect::MergeFrom(this, a2);
  }
}

uint64_t CLMicroLocationProto::ServiceDisconnect::IsInitialized(CLMicroLocationProto::ServiceDisconnect *this)
{
  return 1;
}

_QWORD *CLMicroLocationProto::ServiceDisconnect::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CLMicroLocationProto.ServiceDisconnect");
}

void CLMicroLocationProto::ServiceStartUpdating::MergeFrom(CLMicroLocationProto::ServiceStartUpdating *this, const CLMicroLocationProto::ServiceStartUpdating *a2)
{
  int v4;
  unsigned int v5;
  char v6;
  const std::string *v7;
  std::string *v8;
  const std::string *v9;
  std::string *v10;
  _BYTE v11[48];

  if (a2 == this)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v11);
  }
  LOBYTE(v4) = *((_BYTE *)a2 + 36);
  if ((_BYTE)v4)
  {
    if ((*((_BYTE *)a2 + 36) & 1) != 0)
    {
      v5 = *((_DWORD *)a2 + 4);
      if (v5 - 31 >= 0x19 && (v5 > 0xE || ((1 << v5) & 0x76B6) == 0))
        CLMicroLocationProto::ServiceStartUpdating::MergeFrom();
      *((_DWORD *)this + 9) |= 1u;
      *((_DWORD *)this + 4) = v5;
      v4 = *((_DWORD *)a2 + 9);
    }
    if ((v4 & 2) != 0)
    {
      v7 = (const std::string *)*((_QWORD *)a2 + 1);
      *((_DWORD *)this + 9) |= 2u;
      v8 = (std::string *)*((_QWORD *)this + 1);
      if (v8 == (std::string *)MEMORY[0x24BEDD958])
      {
        v8 = (std::string *)operator new();
        v8->__r_.__value_.__l.__size_ = 0;
        v8->__r_.__value_.__r.__words[2] = 0;
        v8->__r_.__value_.__r.__words[0] = 0;
        *((_QWORD *)this + 1) = v8;
      }
      std::string::operator=(v8, v7);
      v4 = *((_DWORD *)a2 + 9);
      if ((v4 & 4) == 0)
      {
LABEL_11:
        if ((v4 & 8) == 0)
          return;
        goto LABEL_12;
      }
    }
    else if ((v4 & 4) == 0)
    {
      goto LABEL_11;
    }
    v9 = (const std::string *)*((_QWORD *)a2 + 3);
    *((_DWORD *)this + 9) |= 4u;
    v10 = (std::string *)*((_QWORD *)this + 3);
    if (v10 == (std::string *)MEMORY[0x24BEDD958])
    {
      v10 = (std::string *)operator new();
      v10->__r_.__value_.__l.__size_ = 0;
      v10->__r_.__value_.__r.__words[2] = 0;
      v10->__r_.__value_.__r.__words[0] = 0;
      *((_QWORD *)this + 3) = v10;
    }
    std::string::operator=(v10, v9);
    if ((*((_DWORD *)a2 + 9) & 8) != 0)
    {
LABEL_12:
      v6 = *((_BYTE *)a2 + 20);
      *((_DWORD *)this + 9) |= 8u;
      *((_BYTE *)this + 20) = v6;
    }
  }
}

void sub_241ACBF48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void CLMicroLocationProto::ServiceStartUpdating::~ServiceStartUpdating(CLMicroLocationProto::ServiceStartUpdating *this)
{
  *(_QWORD *)this = &off_2511D7CD0;
  CLMicroLocationProto::ServiceStartUpdating::SharedDtor(this);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

{
  CLMicroLocationProto::ServiceStartUpdating::~ServiceStartUpdating(this);
  JUMPOUT(0x2426A04D4);
}

void CLMicroLocationProto::ServiceStartUpdating::SharedDtor(CLMicroLocationProto::ServiceStartUpdating *this)
{
  CLMicroLocationProto::ServiceStartUpdating *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  v1 = this;
  v2 = *((_QWORD *)this + 1);
  v3 = MEMORY[0x24BEDD958];
  if (v2 != MEMORY[0x24BEDD958] && v2 != 0)
  {
    if (*(char *)(v2 + 23) < 0)
      operator delete(*(void **)v2);
    this = (CLMicroLocationProto::ServiceStartUpdating *)MEMORY[0x2426A04D4](v2, 0x1012C40EC159624);
  }
  v5 = *((_QWORD *)v1 + 3);
  if (v5 != v3 && v5 != 0)
  {
    if (*(char *)(v5 + 23) < 0)
      operator delete(*(void **)v5);
    this = (CLMicroLocationProto::ServiceStartUpdating *)MEMORY[0x2426A04D4](v5, 0x1012C40EC159624);
  }
  CLMicroLocationProto::protobuf_AddDesc_microlocation_2eproto(this);
}

uint64_t CLMicroLocationProto::ServiceStartUpdating::New(CLMicroLocationProto::ServiceStartUpdating *this)
{
  uint64_t result;
  uint64_t v2;

  result = operator new();
  *(_DWORD *)(result + 16) = 40;
  v2 = MEMORY[0x24BEDD958];
  *(_QWORD *)result = &off_2511D7CD0;
  *(_QWORD *)(result + 8) = v2;
  *(_QWORD *)(result + 24) = v2;
  *(_QWORD *)(result + 32) = 0;
  *(_BYTE *)(result + 20) = 0;
  return result;
}

uint64_t CLMicroLocationProto::ServiceStartUpdating::Clear(uint64_t this)
{
  char v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(_BYTE *)(this + 36);
  if (v1)
  {
    *(_DWORD *)(this + 16) = 40;
    v2 = MEMORY[0x24BEDD958];
    if ((v1 & 2) != 0)
    {
      v3 = *(_QWORD *)(this + 8);
      if (v3 != MEMORY[0x24BEDD958])
      {
        if (*(char *)(v3 + 23) < 0)
        {
          **(_BYTE **)v3 = 0;
          *(_QWORD *)(v3 + 8) = 0;
        }
        else
        {
          *(_BYTE *)v3 = 0;
          *(_BYTE *)(v3 + 23) = 0;
        }
      }
    }
    if ((*(_BYTE *)(this + 36) & 4) != 0)
    {
      v4 = *(_QWORD *)(this + 24);
      if (v4 != v2)
      {
        if (*(char *)(v4 + 23) < 0)
        {
          **(_BYTE **)v4 = 0;
          *(_QWORD *)(v4 + 8) = 0;
        }
        else
        {
          *(_BYTE *)v4 = 0;
          *(_BYTE *)(v4 + 23) = 0;
        }
      }
    }
    *(_BYTE *)(this + 20) = 0;
  }
  *(_DWORD *)(this + 36) = 0;
  return this;
}

uint64_t CLMicroLocationProto::ServiceStartUpdating::MergePartialFromCodedStream(CLMicroLocationProto::ServiceStartUpdating *this, wireless_diagnostics::google::protobuf::io::CodedInputStream *a2)
{
  uint64_t v4;
  char *v5;
  uint64_t TagFallback;
  int v7;
  char *v8;
  unsigned int v9;
  unint64_t v10;
  char *v11;
  BOOL v12;
  _BYTE *v13;
  _QWORD *v14;
  _BYTE *v15;
  _QWORD *v16;
  _BYTE *v17;
  unsigned int v18;
  unsigned __int8 *v19;
  uint64_t result;
  unsigned int v21;
  unsigned int v22;

  v4 = MEMORY[0x24BEDD958];
  while (2)
  {
    v5 = (char *)*((_QWORD *)a2 + 1);
    if ((unint64_t)v5 >= *((_QWORD *)a2 + 2) || *v5 < 0)
    {
      TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(a2);
      *((_DWORD *)a2 + 8) = TagFallback;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    else
    {
      TagFallback = *v5;
      *((_DWORD *)a2 + 8) = TagFallback;
      *((_QWORD *)a2 + 1) = v5 + 1;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    switch(TagFallback >> 3)
    {
      case 1u:
        v7 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_19;
        v21 = 0;
        v8 = (char *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v8 < *((_QWORD *)a2 + 2) && (*v8 & 0x80000000) == 0)
        {
          v9 = *v8;
          *((_QWORD *)a2 + 1) = v8 + 1;
LABEL_24:
          if (v9 - 31 < 0x19 || (v9 <= 0xE ? (v12 = ((1 << v9) & 0x76B6) == 0) : (v12 = 1), !v12))
          {
            if (v9 - 31 >= 0x19 && (v9 > 0xE || ((1 << v9) & 0x76B6) == 0))
              CLMicroLocationProto::ServiceStartUpdating::MergeFrom();
            *((_DWORD *)this + 9) |= 1u;
            *((_DWORD *)this + 4) = v9;
          }
          v13 = (_BYTE *)*((_QWORD *)a2 + 1);
          if ((unint64_t)v13 < *((_QWORD *)a2 + 2) && *v13 == 18)
          {
            *((_QWORD *)a2 + 1) = v13 + 1;
            goto LABEL_36;
          }
          continue;
        }
        result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v21);
        if ((_DWORD)result)
        {
          v9 = v21;
          goto LABEL_24;
        }
        break;
      case 2u:
        v7 = TagFallback & 7;
        if (v7 != 2)
          goto LABEL_19;
LABEL_36:
        *((_DWORD *)this + 9) |= 2u;
        if (*((_QWORD *)this + 1) == v4)
        {
          v14 = (_QWORD *)operator new();
          v14[1] = 0;
          v14[2] = 0;
          *v14 = 0;
          *((_QWORD *)this + 1) = v14;
        }
        result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString();
        if (!(_DWORD)result)
          return result;
        v15 = (_BYTE *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v15 >= *((_QWORD *)a2 + 2) || *v15 != 26)
          continue;
        *((_QWORD *)a2 + 1) = v15 + 1;
LABEL_42:
        *((_DWORD *)this + 9) |= 4u;
        if (*((_QWORD *)this + 3) == v4)
        {
          v16 = (_QWORD *)operator new();
          v16[1] = 0;
          v16[2] = 0;
          *v16 = 0;
          *((_QWORD *)this + 3) = v16;
        }
        result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadBytes();
        if (!(_DWORD)result)
          return result;
        v17 = (_BYTE *)*((_QWORD *)a2 + 1);
        v10 = *((_QWORD *)a2 + 2);
        if ((unint64_t)v17 >= v10 || *v17 != 32)
          continue;
        v11 = v17 + 1;
        *((_QWORD *)a2 + 1) = v11;
LABEL_48:
        v22 = 0;
        if ((unint64_t)v11 >= v10 || *v11 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v22);
          if (!(_DWORD)result)
            return result;
          v18 = v22;
          v19 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
          v10 = *((_QWORD *)a2 + 2);
        }
        else
        {
          v18 = *v11;
          v19 = (unsigned __int8 *)(v11 + 1);
          *((_QWORD *)a2 + 1) = v19;
        }
        *((_BYTE *)this + 20) = v18 != 0;
        *((_DWORD *)this + 9) |= 8u;
        if (v19 != (unsigned __int8 *)v10 || !*((_DWORD *)a2 + 11) && *((_DWORD *)a2 + 6) != *((_DWORD *)a2 + 10))
          continue;
        *((_DWORD *)a2 + 8) = 0;
        result = 1;
        *((_BYTE *)a2 + 36) = 1;
        return result;
      case 3u:
        v7 = TagFallback & 7;
        if (v7 == 2)
          goto LABEL_42;
        goto LABEL_19;
      case 4u:
        v7 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_19;
        v11 = (char *)*((_QWORD *)a2 + 1);
        v10 = *((_QWORD *)a2 + 2);
        goto LABEL_48;
      default:
        v7 = TagFallback & 7;
LABEL_19:
        if (v7 == 4)
          return 1;
        if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(a2, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback) & 1) != 0)continue;
        return 0;
    }
    return result;
  }
}

uint64_t CLMicroLocationProto::ServiceStartUpdating::SerializeWithCachedSizes(uint64_t this, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  int v6;

  v5 = this;
  v6 = *(_DWORD *)(this + 36);
  if ((v6 & 1) != 0)
  {
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(unsigned int *)(this + 16), (uint64_t)a2, a4);
    v6 = *(_DWORD *)(v5 + 36);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0)
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString();
  v6 = *(_DWORD *)(v5 + 36);
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0)
      return this;
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4, *(unsigned __int8 *)(v5 + 20), (uint64_t)a2, a4);
  }
LABEL_8:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBytes();
  if ((*(_DWORD *)(v5 + 36) & 8) != 0)
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4, *(unsigned __int8 *)(v5 + 20), (uint64_t)a2, a4);
  return this;
}

uint64_t CLMicroLocationProto::ServiceStartUpdating::ByteSize(CLMicroLocationProto::ServiceStartUpdating *this)
{
  int v2;
  unsigned int v3;
  uint64_t result;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v5;
  uint64_t v6;
  int v7;
  char v8;
  uint64_t v9;
  unint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  char v14;
  uint64_t v15;
  unint64_t v16;
  int v17;

  LOBYTE(v2) = *((_BYTE *)this + 36);
  if (!(_BYTE)v2)
  {
    result = 0;
    goto LABEL_35;
  }
  if ((*((_BYTE *)this + 36) & 1) == 0)
  {
    v3 = 0;
    if ((*((_BYTE *)this + 36) & 2) == 0)
      goto LABEL_22;
LABEL_13:
    v6 = *((_QWORD *)this + 1);
    v7 = *(unsigned __int8 *)(v6 + 23);
    v8 = v7;
    v9 = *(_QWORD *)(v6 + 8);
    if ((v7 & 0x80u) == 0)
      v10 = *(unsigned __int8 *)(v6 + 23);
    else
      v10 = v9;
    if (v10 >= 0x80)
    {
      v11 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v10);
      v7 = *(unsigned __int8 *)(v6 + 23);
      v9 = *(_QWORD *)(v6 + 8);
      v2 = *((_DWORD *)this + 9);
      v8 = *(_BYTE *)(v6 + 23);
    }
    else
    {
      v11 = 1;
    }
    if (v8 < 0)
      v7 = v9;
    v3 += v11 + v7 + 1;
    goto LABEL_22;
  }
  v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 4);
  if ((v5 & 0x80000000) != 0)
  {
    v3 = 11;
    if ((v2 & 2) == 0)
      goto LABEL_22;
    goto LABEL_13;
  }
  if (v5 < 0x80)
  {
    v3 = 2;
    if ((v2 & 2) == 0)
      goto LABEL_22;
    goto LABEL_13;
  }
  v3 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v5) + 1;
  v2 = *((_DWORD *)this + 9);
  if ((v2 & 2) != 0)
    goto LABEL_13;
LABEL_22:
  if ((v2 & 4) != 0)
  {
    v12 = *((_QWORD *)this + 3);
    v13 = *(unsigned __int8 *)(v12 + 23);
    v14 = v13;
    v15 = *(_QWORD *)(v12 + 8);
    if ((v13 & 0x80u) == 0)
      v16 = *(unsigned __int8 *)(v12 + 23);
    else
      v16 = v15;
    if (v16 >= 0x80)
    {
      v17 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v16);
      v13 = *(unsigned __int8 *)(v12 + 23);
      v15 = *(_QWORD *)(v12 + 8);
      v2 = *((_DWORD *)this + 9);
      v14 = *(_BYTE *)(v12 + 23);
    }
    else
    {
      v17 = 1;
    }
    if (v14 < 0)
      v13 = v15;
    v3 += v17 + v13 + 1;
  }
  if ((v2 & 8) != 0)
    result = v3 + 2;
  else
    result = v3;
LABEL_35:
  *((_DWORD *)this + 8) = result;
  return result;
}

void CLMicroLocationProto::ServiceStartUpdating::CheckTypeAndMergeFrom(CLMicroLocationProto::ServiceStartUpdating *this, const wireless_diagnostics::google::protobuf::MessageLite *lpsrc)
{
  uint64_t v4;
  uint64_t v5;

  CLMicroLocationProto::ServiceStartUpdating::MergeFrom(this, lpsrc);
}

void CLMicroLocationProto::ServiceStartUpdating::CopyFrom(CLMicroLocationProto::ServiceStartUpdating *this, const CLMicroLocationProto::ServiceStartUpdating *a2)
{
  if (a2 != this)
  {
    (*(void (**)(CLMicroLocationProto::ServiceStartUpdating *))(*(_QWORD *)this + 32))(this);
    CLMicroLocationProto::ServiceStartUpdating::MergeFrom(this, a2);
  }
}

uint64_t CLMicroLocationProto::ServiceStartUpdating::IsInitialized(CLMicroLocationProto::ServiceStartUpdating *this)
{
  return 1;
}

_QWORD *CLMicroLocationProto::ServiceStartUpdating::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CLMicroLocationProto.ServiceStartUpdating");
}

void CLMicroLocationProto::ServiceStopUpdating::MergeFrom(CLMicroLocationProto::ServiceStopUpdating *this, const CLMicroLocationProto::ServiceStopUpdating *a2)
{
  int v4;
  unsigned int v5;
  const std::string *v6;
  std::string *v7;
  const std::string *v8;
  std::string *v9;
  _BYTE v10[48];

  if (a2 == this)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v10);
  }
  LOBYTE(v4) = *((_BYTE *)a2 + 32);
  if ((_BYTE)v4)
  {
    if ((*((_BYTE *)a2 + 32) & 1) != 0)
    {
      v5 = *((_DWORD *)a2 + 6);
      if (v5 - 31 >= 0x19 && (v5 > 0xE || ((1 << v5) & 0x76B6) == 0))
        CLMicroLocationProto::ServiceStopUpdating::MergeFrom();
      *((_DWORD *)this + 8) |= 1u;
      *((_DWORD *)this + 6) = v5;
      v4 = *((_DWORD *)a2 + 8);
    }
    if ((v4 & 2) != 0)
    {
      v6 = (const std::string *)*((_QWORD *)a2 + 1);
      *((_DWORD *)this + 8) |= 2u;
      v7 = (std::string *)*((_QWORD *)this + 1);
      if (v7 == (std::string *)MEMORY[0x24BEDD958])
      {
        v7 = (std::string *)operator new();
        v7->__r_.__value_.__l.__size_ = 0;
        v7->__r_.__value_.__r.__words[2] = 0;
        v7->__r_.__value_.__r.__words[0] = 0;
        *((_QWORD *)this + 1) = v7;
      }
      std::string::operator=(v7, v6);
      v4 = *((_DWORD *)a2 + 8);
    }
    if ((v4 & 4) != 0)
    {
      v8 = (const std::string *)*((_QWORD *)a2 + 2);
      *((_DWORD *)this + 8) |= 4u;
      v9 = (std::string *)*((_QWORD *)this + 2);
      if (v9 == (std::string *)MEMORY[0x24BEDD958])
      {
        v9 = (std::string *)operator new();
        v9->__r_.__value_.__l.__size_ = 0;
        v9->__r_.__value_.__r.__words[2] = 0;
        v9->__r_.__value_.__r.__words[0] = 0;
        *((_QWORD *)this + 2) = v9;
      }
      std::string::operator=(v9, v8);
    }
  }
}

void sub_241ACC82C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void CLMicroLocationProto::ServiceStopUpdating::~ServiceStopUpdating(CLMicroLocationProto::ServiceStopUpdating *this)
{
  *(_QWORD *)this = &off_2511D7D48;
  CLMicroLocationProto::ServiceDelete::SharedDtor(this);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

{
  CLMicroLocationProto::ServiceStopUpdating::~ServiceStopUpdating(this);
  JUMPOUT(0x2426A04D4);
}

double CLMicroLocationProto::ServiceStopUpdating::New(CLMicroLocationProto::ServiceStopUpdating *this)
{
  uint64_t v1;
  double result;
  uint64_t v3;

  v1 = operator new();
  *(_QWORD *)&result = 41;
  v3 = MEMORY[0x24BEDD958];
  *(_QWORD *)(v1 + 24) = 41;
  *(_QWORD *)v1 = &off_2511D7D48;
  *(_QWORD *)(v1 + 8) = v3;
  *(_QWORD *)(v1 + 16) = v3;
  *(_DWORD *)(v1 + 32) = 0;
  return result;
}

uint64_t CLMicroLocationProto::ServiceStopUpdating::Clear(uint64_t this)
{
  char v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(_BYTE *)(this + 32);
  if (v1)
  {
    *(_DWORD *)(this + 24) = 41;
    v2 = MEMORY[0x24BEDD958];
    if ((v1 & 2) != 0)
    {
      v3 = *(_QWORD *)(this + 8);
      if (v3 != MEMORY[0x24BEDD958])
      {
        if (*(char *)(v3 + 23) < 0)
        {
          **(_BYTE **)v3 = 0;
          *(_QWORD *)(v3 + 8) = 0;
        }
        else
        {
          *(_BYTE *)v3 = 0;
          *(_BYTE *)(v3 + 23) = 0;
        }
      }
    }
    if ((*(_BYTE *)(this + 32) & 4) != 0)
    {
      v4 = *(_QWORD *)(this + 16);
      if (v4 != v2)
      {
        if (*(char *)(v4 + 23) < 0)
        {
          **(_BYTE **)v4 = 0;
          *(_QWORD *)(v4 + 8) = 0;
        }
        else
        {
          *(_BYTE *)v4 = 0;
          *(_BYTE *)(v4 + 23) = 0;
        }
      }
    }
  }
  *(_DWORD *)(this + 32) = 0;
  return this;
}

uint64_t CLMicroLocationProto::ServiceStopUpdating::MergePartialFromCodedStream(CLMicroLocationProto::ServiceStopUpdating *this, wireless_diagnostics::google::protobuf::io::CodedInputStream *a2)
{
  uint64_t v4;
  char *v5;
  uint64_t TagFallback;
  unsigned int v7;
  int v8;
  char *v9;
  unsigned int v10;
  BOOL v11;
  _BYTE *v13;
  _QWORD *v14;
  _BYTE *v15;
  _QWORD *v16;
  uint64_t result;
  unsigned int v18;

  v4 = MEMORY[0x24BEDD958];
  while (1)
  {
    while (1)
    {
      while (1)
      {
        v5 = (char *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v5 >= *((_QWORD *)a2 + 2) || *v5 < 0)
        {
          TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(a2);
          *((_DWORD *)a2 + 8) = TagFallback;
          if (!(_DWORD)TagFallback)
            return 1;
        }
        else
        {
          TagFallback = *v5;
          *((_DWORD *)a2 + 8) = TagFallback;
          *((_QWORD *)a2 + 1) = v5 + 1;
          if (!(_DWORD)TagFallback)
            return 1;
        }
        v7 = TagFallback >> 3;
        if (TagFallback >> 3 != 1)
          break;
        v8 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_19;
        v18 = 0;
        v9 = (char *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v9 >= *((_QWORD *)a2 + 2) || *v9 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v18);
          if (!(_DWORD)result)
            return result;
          v10 = v18;
        }
        else
        {
          v10 = *v9;
          *((_QWORD *)a2 + 1) = v9 + 1;
        }
        if (v10 - 31 < 0x19 || (v10 <= 0xE ? (v11 = ((1 << v10) & 0x76B6) == 0) : (v11 = 1), !v11))
        {
          if (v10 - 31 >= 0x19 && (v10 > 0xE || ((1 << v10) & 0x76B6) == 0))
            CLMicroLocationProto::ServiceStopUpdating::MergeFrom();
          *((_DWORD *)this + 8) |= 1u;
          *((_DWORD *)this + 6) = v10;
        }
        v13 = (_BYTE *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v13 < *((_QWORD *)a2 + 2) && *v13 == 18)
        {
          *((_QWORD *)a2 + 1) = v13 + 1;
          goto LABEL_38;
        }
      }
      if (v7 != 2)
        break;
      v8 = TagFallback & 7;
      if (v8 != 2)
        goto LABEL_19;
LABEL_38:
      *((_DWORD *)this + 8) |= 2u;
      if (*((_QWORD *)this + 1) == v4)
      {
        v14 = (_QWORD *)operator new();
        v14[1] = 0;
        v14[2] = 0;
        *v14 = 0;
        *((_QWORD *)this + 1) = v14;
      }
      result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString();
      if (!(_DWORD)result)
        return result;
      v15 = (_BYTE *)*((_QWORD *)a2 + 1);
      if ((unint64_t)v15 < *((_QWORD *)a2 + 2) && *v15 == 26)
      {
        *((_QWORD *)a2 + 1) = v15 + 1;
LABEL_44:
        *((_DWORD *)this + 8) |= 4u;
        if (*((_QWORD *)this + 2) == v4)
        {
          v16 = (_QWORD *)operator new();
          v16[1] = 0;
          v16[2] = 0;
          *v16 = 0;
          *((_QWORD *)this + 2) = v16;
        }
        result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadBytes();
        if (!(_DWORD)result)
          return result;
        if (*((_QWORD *)a2 + 1) == *((_QWORD *)a2 + 2)
          && (*((_DWORD *)a2 + 11) || *((_DWORD *)a2 + 6) == *((_DWORD *)a2 + 10)))
        {
          *((_DWORD *)a2 + 8) = 0;
          result = 1;
          *((_BYTE *)a2 + 36) = 1;
          return result;
        }
      }
    }
    if (v7 == 3)
    {
      v8 = TagFallback & 7;
      if (v8 == 2)
        goto LABEL_44;
    }
    else
    {
      v8 = TagFallback & 7;
    }
LABEL_19:
    if (v8 == 4)
      return 1;
    if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(a2, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback) & 1) == 0)return 0;
  }
}

uint64_t CLMicroLocationProto::ServiceStopUpdating::SerializeWithCachedSizes(uint64_t this, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v4;
  int v5;

  v4 = this;
  v5 = *(_DWORD *)(this + 32);
  if ((v5 & 1) != 0)
  {
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(unsigned int *)(this + 24), (uint64_t)a2, a4);
    v5 = *(_DWORD *)(v4 + 32);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0)
        return this;
      return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBytes();
    }
  }
  else if ((v5 & 2) == 0)
  {
    goto LABEL_3;
  }
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString();
  if ((*(_DWORD *)(v4 + 32) & 4) != 0)
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBytes();
  return this;
}

uint64_t CLMicroLocationProto::ServiceStopUpdating::ByteSize(CLMicroLocationProto::ServiceStopUpdating *this)
{
  int v2;
  uint64_t v3;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v4;
  uint64_t v5;
  int v6;
  char v7;
  uint64_t v8;
  unint64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  char v13;
  uint64_t v14;
  unint64_t v15;
  int v16;

  LOBYTE(v2) = *((_BYTE *)this + 32);
  if (!(_BYTE)v2)
  {
    v3 = 0;
    goto LABEL_32;
  }
  if ((*((_BYTE *)this + 32) & 1) == 0)
  {
    v3 = 0;
    if ((*((_BYTE *)this + 32) & 2) == 0)
      goto LABEL_22;
LABEL_13:
    v5 = *((_QWORD *)this + 1);
    v6 = *(unsigned __int8 *)(v5 + 23);
    v7 = v6;
    v8 = *(_QWORD *)(v5 + 8);
    if ((v6 & 0x80u) == 0)
      v9 = *(unsigned __int8 *)(v5 + 23);
    else
      v9 = v8;
    if (v9 >= 0x80)
    {
      v10 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v9);
      v6 = *(unsigned __int8 *)(v5 + 23);
      v8 = *(_QWORD *)(v5 + 8);
      v2 = *((_DWORD *)this + 8);
      v7 = *(_BYTE *)(v5 + 23);
    }
    else
    {
      v10 = 1;
    }
    if (v7 < 0)
      v6 = v8;
    v3 = (v3 + v10 + v6 + 1);
    goto LABEL_22;
  }
  v4 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 6);
  if ((v4 & 0x80000000) != 0)
  {
    v3 = 11;
    if ((v2 & 2) != 0)
      goto LABEL_13;
  }
  else
  {
    if (v4 >= 0x80)
    {
      v3 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v4) + 1;
      v2 = *((_DWORD *)this + 8);
      if ((v2 & 2) == 0)
        goto LABEL_22;
      goto LABEL_13;
    }
    v3 = 2;
    if ((v2 & 2) != 0)
      goto LABEL_13;
  }
LABEL_22:
  if ((v2 & 4) != 0)
  {
    v11 = *((_QWORD *)this + 2);
    v12 = *(unsigned __int8 *)(v11 + 23);
    v13 = v12;
    v14 = *(_QWORD *)(v11 + 8);
    if ((v12 & 0x80u) == 0)
      v15 = *(unsigned __int8 *)(v11 + 23);
    else
      v15 = v14;
    if (v15 >= 0x80)
    {
      v16 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v15);
      v12 = *(unsigned __int8 *)(v11 + 23);
      v14 = *(_QWORD *)(v11 + 8);
      v13 = *(_BYTE *)(v11 + 23);
    }
    else
    {
      v16 = 1;
    }
    if (v13 < 0)
      v12 = v14;
    v3 = (v3 + v16 + v12 + 1);
  }
LABEL_32:
  *((_DWORD *)this + 7) = v3;
  return v3;
}

void CLMicroLocationProto::ServiceStopUpdating::CheckTypeAndMergeFrom(CLMicroLocationProto::ServiceStopUpdating *this, const wireless_diagnostics::google::protobuf::MessageLite *lpsrc)
{
  uint64_t v4;
  uint64_t v5;

  CLMicroLocationProto::ServiceStopUpdating::MergeFrom(this, lpsrc);
}

void CLMicroLocationProto::ServiceStopUpdating::CopyFrom(CLMicroLocationProto::ServiceStopUpdating *this, const CLMicroLocationProto::ServiceStopUpdating *a2)
{
  if (a2 != this)
  {
    (*(void (**)(CLMicroLocationProto::ServiceStopUpdating *))(*(_QWORD *)this + 32))(this);
    CLMicroLocationProto::ServiceStopUpdating::MergeFrom(this, a2);
  }
}

uint64_t CLMicroLocationProto::ServiceStopUpdating::IsInitialized(CLMicroLocationProto::ServiceStopUpdating *this)
{
  return 1;
}

_QWORD *CLMicroLocationProto::ServiceStopUpdating::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CLMicroLocationProto.ServiceStopUpdating");
}

void CLMicroLocationProto::RequestObservation::MergeFrom(CLMicroLocationProto::RequestObservation *this, const CLMicroLocationProto::RequestObservation *a2)
{
  int v4;
  unsigned int v5;
  const std::string *v6;
  std::string *v7;
  const std::string *v8;
  std::string *v9;
  const std::string *v10;
  std::string *v11;
  const std::string *v12;
  std::string *v13;
  _BYTE v14[48];

  if (a2 == this)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v14);
  }
  LOBYTE(v4) = *((_BYTE *)a2 + 48);
  if (!(_BYTE)v4)
    return;
  if ((*((_BYTE *)a2 + 48) & 1) != 0)
  {
    v5 = *((_DWORD *)a2 + 10);
    if (v5 - 31 >= 0x19 && (v5 > 0xE || ((1 << v5) & 0x76B6) == 0))
      CLMicroLocationProto::RequestObservation::MergeFrom();
    *((_DWORD *)this + 12) |= 1u;
    *((_DWORD *)this + 10) = v5;
    v4 = *((_DWORD *)a2 + 12);
  }
  if ((v4 & 2) == 0)
  {
    if ((v4 & 4) == 0)
      goto LABEL_11;
LABEL_17:
    v8 = (const std::string *)*((_QWORD *)a2 + 2);
    *((_DWORD *)this + 12) |= 4u;
    v9 = (std::string *)*((_QWORD *)this + 2);
    if (v9 == (std::string *)MEMORY[0x24BEDD958])
    {
      v9 = (std::string *)operator new();
      v9->__r_.__value_.__l.__size_ = 0;
      v9->__r_.__value_.__r.__words[2] = 0;
      v9->__r_.__value_.__r.__words[0] = 0;
      *((_QWORD *)this + 2) = v9;
    }
    std::string::operator=(v9, v8);
    v4 = *((_DWORD *)a2 + 12);
    if ((v4 & 8) == 0)
    {
LABEL_12:
      if ((v4 & 0x10) == 0)
        return;
      goto LABEL_23;
    }
    goto LABEL_20;
  }
  v6 = (const std::string *)*((_QWORD *)a2 + 1);
  *((_DWORD *)this + 12) |= 2u;
  v7 = (std::string *)*((_QWORD *)this + 1);
  if (v7 == (std::string *)MEMORY[0x24BEDD958])
  {
    v7 = (std::string *)operator new();
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    *((_QWORD *)this + 1) = v7;
  }
  std::string::operator=(v7, v6);
  v4 = *((_DWORD *)a2 + 12);
  if ((v4 & 4) != 0)
    goto LABEL_17;
LABEL_11:
  if ((v4 & 8) == 0)
    goto LABEL_12;
LABEL_20:
  v10 = (const std::string *)*((_QWORD *)a2 + 3);
  *((_DWORD *)this + 12) |= 8u;
  v11 = (std::string *)*((_QWORD *)this + 3);
  if (v11 == (std::string *)MEMORY[0x24BEDD958])
  {
    v11 = (std::string *)operator new();
    v11->__r_.__value_.__l.__size_ = 0;
    v11->__r_.__value_.__r.__words[2] = 0;
    v11->__r_.__value_.__r.__words[0] = 0;
    *((_QWORD *)this + 3) = v11;
  }
  std::string::operator=(v11, v10);
  if ((*((_DWORD *)a2 + 12) & 0x10) != 0)
  {
LABEL_23:
    v12 = (const std::string *)*((_QWORD *)a2 + 4);
    *((_DWORD *)this + 12) |= 0x10u;
    v13 = (std::string *)*((_QWORD *)this + 4);
    if (v13 == (std::string *)MEMORY[0x24BEDD958])
    {
      v13 = (std::string *)operator new();
      v13->__r_.__value_.__l.__size_ = 0;
      v13->__r_.__value_.__r.__words[2] = 0;
      v13->__r_.__value_.__r.__words[0] = 0;
      *((_QWORD *)this + 4) = v13;
    }
    std::string::operator=(v13, v12);
  }
}

void sub_241ACD078(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void CLMicroLocationProto::RequestObservation::~RequestObservation(CLMicroLocationProto::RequestObservation *this)
{
  *(_QWORD *)this = &off_2511D7DC0;
  CLMicroLocationProto::RequestObservation::SharedDtor(this);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

{
  CLMicroLocationProto::RequestObservation::~RequestObservation(this);
  JUMPOUT(0x2426A04D4);
}

void CLMicroLocationProto::RequestObservation::SharedDtor(CLMicroLocationProto::RequestObservation *this)
{
  CLMicroLocationProto::RequestObservation *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v7;
  uint64_t v9;

  v1 = this;
  v2 = *((_QWORD *)this + 1);
  v3 = MEMORY[0x24BEDD958];
  if (v2 != MEMORY[0x24BEDD958] && v2 != 0)
  {
    if (*(char *)(v2 + 23) < 0)
      operator delete(*(void **)v2);
    this = (CLMicroLocationProto::RequestObservation *)MEMORY[0x2426A04D4](v2, 0x1012C40EC159624);
  }
  v5 = *((_QWORD *)v1 + 2);
  if (v5 != v3 && v5 != 0)
  {
    if (*(char *)(v5 + 23) < 0)
      operator delete(*(void **)v5);
    this = (CLMicroLocationProto::RequestObservation *)MEMORY[0x2426A04D4](v5, 0x1012C40EC159624);
  }
  v7 = *((_QWORD *)v1 + 3);
  if (v7 != v3 && v7 != 0)
  {
    if (*(char *)(v7 + 23) < 0)
      operator delete(*(void **)v7);
    this = (CLMicroLocationProto::RequestObservation *)MEMORY[0x2426A04D4](v7, 0x1012C40EC159624);
  }
  v9 = *((_QWORD *)v1 + 4);
  if (v9 != v3 && v9 != 0)
  {
    if (*(char *)(v9 + 23) < 0)
      operator delete(*(void **)v9);
    this = (CLMicroLocationProto::RequestObservation *)MEMORY[0x2426A04D4](v9, 0x1012C40EC159624);
  }
  CLMicroLocationProto::protobuf_AddDesc_microlocation_2eproto(this);
}

double CLMicroLocationProto::RequestObservation::New(CLMicroLocationProto::RequestObservation *this)
{
  uint64_t v1;
  double result;
  uint64_t v3;

  v1 = operator new();
  *(_QWORD *)&result = 42;
  *(_QWORD *)(v1 + 40) = 42;
  v3 = MEMORY[0x24BEDD958];
  *(_QWORD *)v1 = &off_2511D7DC0;
  *(_QWORD *)(v1 + 8) = v3;
  *(_QWORD *)(v1 + 16) = v3;
  *(_QWORD *)(v1 + 24) = v3;
  *(_QWORD *)(v1 + 32) = v3;
  *(_DWORD *)(v1 + 48) = 0;
  return result;
}

uint64_t CLMicroLocationProto::RequestObservation::Clear(uint64_t this)
{
  char v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *(_BYTE *)(this + 48);
  if (v1)
  {
    *(_DWORD *)(this + 40) = 42;
    v2 = MEMORY[0x24BEDD958];
    if ((v1 & 2) != 0)
    {
      v3 = *(_QWORD *)(this + 8);
      if (v3 != MEMORY[0x24BEDD958])
      {
        if (*(char *)(v3 + 23) < 0)
        {
          **(_BYTE **)v3 = 0;
          *(_QWORD *)(v3 + 8) = 0;
        }
        else
        {
          *(_BYTE *)v3 = 0;
          *(_BYTE *)(v3 + 23) = 0;
        }
      }
    }
    if ((*(_BYTE *)(this + 48) & 4) != 0)
    {
      v4 = *(_QWORD *)(this + 16);
      if (v4 != v2)
      {
        if (*(char *)(v4 + 23) < 0)
        {
          **(_BYTE **)v4 = 0;
          *(_QWORD *)(v4 + 8) = 0;
        }
        else
        {
          *(_BYTE *)v4 = 0;
          *(_BYTE *)(v4 + 23) = 0;
        }
      }
    }
    if ((*(_BYTE *)(this + 48) & 8) != 0)
    {
      v5 = *(_QWORD *)(this + 24);
      if (v5 != v2)
      {
        if (*(char *)(v5 + 23) < 0)
        {
          **(_BYTE **)v5 = 0;
          *(_QWORD *)(v5 + 8) = 0;
        }
        else
        {
          *(_BYTE *)v5 = 0;
          *(_BYTE *)(v5 + 23) = 0;
        }
      }
    }
    if ((*(_BYTE *)(this + 48) & 0x10) != 0)
    {
      v6 = *(_QWORD *)(this + 32);
      if (v6 != v2)
      {
        if (*(char *)(v6 + 23) < 0)
        {
          **(_BYTE **)v6 = 0;
          *(_QWORD *)(v6 + 8) = 0;
        }
        else
        {
          *(_BYTE *)v6 = 0;
          *(_BYTE *)(v6 + 23) = 0;
        }
      }
    }
  }
  *(_DWORD *)(this + 48) = 0;
  return this;
}

uint64_t CLMicroLocationProto::RequestObservation::MergePartialFromCodedStream(CLMicroLocationProto::RequestObservation *this, wireless_diagnostics::google::protobuf::io::CodedInputStream *a2)
{
  uint64_t v4;
  char *v5;
  uint64_t TagFallback;
  int v7;
  char *v8;
  unsigned int v9;
  BOOL v10;
  _BYTE *v11;
  _QWORD *v12;
  _BYTE *v13;
  _QWORD *v14;
  _BYTE *v15;
  _QWORD *v16;
  _BYTE *v17;
  _QWORD *v18;
  uint64_t result;
  unsigned int v20;

  v4 = MEMORY[0x24BEDD958];
  while (2)
  {
    v5 = (char *)*((_QWORD *)a2 + 1);
    if ((unint64_t)v5 < *((_QWORD *)a2 + 2) && (*v5 & 0x80000000) == 0)
    {
      TagFallback = *v5;
      *((_DWORD *)a2 + 8) = TagFallback;
      *((_QWORD *)a2 + 1) = v5 + 1;
      if (!(_DWORD)TagFallback)
        return 1;
LABEL_7:
      switch(TagFallback >> 3)
      {
        case 1u:
          v7 = TagFallback & 7;
          if ((TagFallback & 7) != 0)
            goto LABEL_20;
          v20 = 0;
          v8 = (char *)*((_QWORD *)a2 + 1);
          if ((unint64_t)v8 >= *((_QWORD *)a2 + 2) || *v8 < 0)
          {
            result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v20);
            if (!(_DWORD)result)
              return result;
            v9 = v20;
          }
          else
          {
            v9 = *v8;
            *((_QWORD *)a2 + 1) = v8 + 1;
          }
          if (v9 - 31 < 0x19 || (v9 <= 0xE ? (v10 = ((1 << v9) & 0x76B6) == 0) : (v10 = 1), !v10))
          {
            if (v9 - 31 >= 0x19 && (v9 > 0xE || ((1 << v9) & 0x76B6) == 0))
              CLMicroLocationProto::RequestObservation::MergeFrom();
            *((_DWORD *)this + 12) |= 1u;
            *((_DWORD *)this + 10) = v9;
          }
          v11 = (_BYTE *)*((_QWORD *)a2 + 1);
          if ((unint64_t)v11 < *((_QWORD *)a2 + 2) && *v11 == 18)
          {
            *((_QWORD *)a2 + 1) = v11 + 1;
            goto LABEL_37;
          }
          continue;
        case 2u:
          v7 = TagFallback & 7;
          if (v7 != 2)
            goto LABEL_20;
LABEL_37:
          *((_DWORD *)this + 12) |= 2u;
          if (*((_QWORD *)this + 1) == v4)
          {
            v12 = (_QWORD *)operator new();
            v12[1] = 0;
            v12[2] = 0;
            *v12 = 0;
            *((_QWORD *)this + 1) = v12;
          }
          result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString();
          if (!(_DWORD)result)
            return result;
          v13 = (_BYTE *)*((_QWORD *)a2 + 1);
          if ((unint64_t)v13 >= *((_QWORD *)a2 + 2) || *v13 != 26)
            continue;
          *((_QWORD *)a2 + 1) = v13 + 1;
LABEL_43:
          *((_DWORD *)this + 12) |= 4u;
          if (*((_QWORD *)this + 2) == v4)
          {
            v14 = (_QWORD *)operator new();
            v14[1] = 0;
            v14[2] = 0;
            *v14 = 0;
            *((_QWORD *)this + 2) = v14;
          }
          result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadBytes();
          if (!(_DWORD)result)
            return result;
          v15 = (_BYTE *)*((_QWORD *)a2 + 1);
          if ((unint64_t)v15 >= *((_QWORD *)a2 + 2) || *v15 != 34)
            continue;
          *((_QWORD *)a2 + 1) = v15 + 1;
LABEL_49:
          *((_DWORD *)this + 12) |= 8u;
          if (*((_QWORD *)this + 3) == v4)
          {
            v16 = (_QWORD *)operator new();
            v16[1] = 0;
            v16[2] = 0;
            *v16 = 0;
            *((_QWORD *)this + 3) = v16;
          }
          result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadBytes();
          if (!(_DWORD)result)
            return result;
          v17 = (_BYTE *)*((_QWORD *)a2 + 1);
          if ((unint64_t)v17 >= *((_QWORD *)a2 + 2) || *v17 != 42)
            continue;
          *((_QWORD *)a2 + 1) = v17 + 1;
LABEL_55:
          *((_DWORD *)this + 12) |= 0x10u;
          if (*((_QWORD *)this + 4) == v4)
          {
            v18 = (_QWORD *)operator new();
            v18[1] = 0;
            v18[2] = 0;
            *v18 = 0;
            *((_QWORD *)this + 4) = v18;
          }
          result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadBytes();
          if (!(_DWORD)result)
            return result;
          if (*((_QWORD *)a2 + 1) != *((_QWORD *)a2 + 2)
            || !*((_DWORD *)a2 + 11) && *((_DWORD *)a2 + 6) != *((_DWORD *)a2 + 10))
          {
            continue;
          }
          *((_DWORD *)a2 + 8) = 0;
          result = 1;
          *((_BYTE *)a2 + 36) = 1;
          return result;
        case 3u:
          v7 = TagFallback & 7;
          if (v7 == 2)
            goto LABEL_43;
          goto LABEL_20;
        case 4u:
          v7 = TagFallback & 7;
          if (v7 != 2)
            goto LABEL_20;
          goto LABEL_49;
        case 5u:
          v7 = TagFallback & 7;
          if (v7 == 2)
            goto LABEL_55;
          goto LABEL_20;
        default:
          v7 = TagFallback & 7;
LABEL_20:
          if (v7 == 4)
            return 1;
          if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(a2, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback) & 1) != 0)continue;
          return 0;
      }
    }
    break;
  }
  TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(a2);
  *((_DWORD *)a2 + 8) = TagFallback;
  if ((_DWORD)TagFallback)
    goto LABEL_7;
  return 1;
}

uint64_t CLMicroLocationProto::RequestObservation::SerializeWithCachedSizes(uint64_t this, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v4;
  int v5;

  v4 = this;
  v5 = *(_DWORD *)(this + 48);
  if ((v5 & 1) != 0)
  {
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(unsigned int *)(this + 40), (uint64_t)a2, a4);
    v5 = *(_DWORD *)(v4 + 48);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0)
        goto LABEL_4;
      goto LABEL_9;
    }
  }
  else if ((v5 & 2) == 0)
  {
    goto LABEL_3;
  }
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString();
  v5 = *(_DWORD *)(v4 + 48);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0)
      goto LABEL_5;
    goto LABEL_10;
  }
LABEL_9:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBytes();
  v5 = *(_DWORD *)(v4 + 48);
  if ((v5 & 8) == 0)
  {
LABEL_5:
    if ((v5 & 0x10) == 0)
      return this;
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBytes();
  }
LABEL_10:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBytes();
  if ((*(_DWORD *)(v4 + 48) & 0x10) != 0)
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBytes();
  return this;
}

uint64_t CLMicroLocationProto::RequestObservation::ByteSize(CLMicroLocationProto::RequestObservation *this)
{
  int v2;
  uint64_t v3;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v4;
  uint64_t v5;
  int v6;
  char v7;
  uint64_t v8;
  unint64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  char v13;
  uint64_t v14;
  unint64_t v15;
  int v16;
  uint64_t v17;
  int v18;
  char v19;
  uint64_t v20;
  unint64_t v21;
  int v22;
  uint64_t v23;
  int v24;
  char v25;
  uint64_t v26;
  unint64_t v27;
  int v28;

  LOBYTE(v2) = *((_BYTE *)this + 48);
  if (!(_BYTE)v2)
  {
    v3 = 0;
    goto LABEL_53;
  }
  if ((*((_BYTE *)this + 48) & 1) != 0)
  {
    v4 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 10);
    if ((v4 & 0x80000000) != 0)
    {
      v3 = 11;
      if ((v2 & 2) == 0)
        goto LABEL_22;
    }
    else if (v4 >= 0x80)
    {
      v3 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v4) + 1;
      v2 = *((_DWORD *)this + 12);
      if ((v2 & 2) == 0)
        goto LABEL_22;
    }
    else
    {
      v3 = 2;
      if ((v2 & 2) == 0)
        goto LABEL_22;
    }
  }
  else
  {
    v3 = 0;
    if ((*((_BYTE *)this + 48) & 2) == 0)
      goto LABEL_22;
  }
  v5 = *((_QWORD *)this + 1);
  v6 = *(unsigned __int8 *)(v5 + 23);
  v7 = v6;
  v8 = *(_QWORD *)(v5 + 8);
  if ((v6 & 0x80u) == 0)
    v9 = *(unsigned __int8 *)(v5 + 23);
  else
    v9 = v8;
  if (v9 >= 0x80)
  {
    v10 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v9);
    v6 = *(unsigned __int8 *)(v5 + 23);
    v8 = *(_QWORD *)(v5 + 8);
    v2 = *((_DWORD *)this + 12);
    v7 = *(_BYTE *)(v5 + 23);
  }
  else
  {
    v10 = 1;
  }
  if (v7 < 0)
    v6 = v8;
  v3 = (v3 + v10 + v6 + 1);
LABEL_22:
  if ((v2 & 4) != 0)
  {
    v11 = *((_QWORD *)this + 2);
    v12 = *(unsigned __int8 *)(v11 + 23);
    v13 = v12;
    v14 = *(_QWORD *)(v11 + 8);
    if ((v12 & 0x80u) == 0)
      v15 = *(unsigned __int8 *)(v11 + 23);
    else
      v15 = v14;
    if (v15 >= 0x80)
    {
      v16 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v15);
      v12 = *(unsigned __int8 *)(v11 + 23);
      v14 = *(_QWORD *)(v11 + 8);
      v2 = *((_DWORD *)this + 12);
      v13 = *(_BYTE *)(v11 + 23);
    }
    else
    {
      v16 = 1;
    }
    if (v13 < 0)
      v12 = v14;
    v3 = (v3 + v16 + v12 + 1);
    if ((v2 & 8) == 0)
    {
LABEL_24:
      if ((v2 & 0x10) == 0)
        goto LABEL_53;
      goto LABEL_44;
    }
  }
  else if ((v2 & 8) == 0)
  {
    goto LABEL_24;
  }
  v17 = *((_QWORD *)this + 3);
  v18 = *(unsigned __int8 *)(v17 + 23);
  v19 = v18;
  v20 = *(_QWORD *)(v17 + 8);
  if ((v18 & 0x80u) == 0)
    v21 = *(unsigned __int8 *)(v17 + 23);
  else
    v21 = v20;
  if (v21 >= 0x80)
  {
    v22 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v21);
    v18 = *(unsigned __int8 *)(v17 + 23);
    v20 = *(_QWORD *)(v17 + 8);
    v2 = *((_DWORD *)this + 12);
    v19 = *(_BYTE *)(v17 + 23);
  }
  else
  {
    v22 = 1;
  }
  if (v19 < 0)
    v18 = v20;
  v3 = (v3 + v22 + v18 + 1);
  if ((v2 & 0x10) != 0)
  {
LABEL_44:
    v23 = *((_QWORD *)this + 4);
    v24 = *(unsigned __int8 *)(v23 + 23);
    v25 = v24;
    v26 = *(_QWORD *)(v23 + 8);
    if ((v24 & 0x80u) == 0)
      v27 = *(unsigned __int8 *)(v23 + 23);
    else
      v27 = v26;
    if (v27 >= 0x80)
    {
      v28 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v27);
      v24 = *(unsigned __int8 *)(v23 + 23);
      v26 = *(_QWORD *)(v23 + 8);
      v25 = *(_BYTE *)(v23 + 23);
    }
    else
    {
      v28 = 1;
    }
    if (v25 < 0)
      v24 = v26;
    v3 = (v3 + v28 + v24 + 1);
  }
LABEL_53:
  *((_DWORD *)this + 11) = v3;
  return v3;
}

void CLMicroLocationProto::RequestObservation::CheckTypeAndMergeFrom(CLMicroLocationProto::RequestObservation *this, const wireless_diagnostics::google::protobuf::MessageLite *lpsrc)
{
  uint64_t v4;
  uint64_t v5;

  CLMicroLocationProto::RequestObservation::MergeFrom(this, lpsrc);
}

void CLMicroLocationProto::RequestObservation::CopyFrom(CLMicroLocationProto::RequestObservation *this, const CLMicroLocationProto::RequestObservation *a2)
{
  if (a2 != this)
  {
    (*(void (**)(CLMicroLocationProto::RequestObservation *))(*(_QWORD *)this + 32))(this);
    CLMicroLocationProto::RequestObservation::MergeFrom(this, a2);
  }
}

uint64_t CLMicroLocationProto::RequestObservation::IsInitialized(CLMicroLocationProto::RequestObservation *this)
{
  return 1;
}

_QWORD *CLMicroLocationProto::RequestObservation::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CLMicroLocationProto.RequestObservation");
}

void CLMicroLocationProto::RequestPrediction::MergeFrom(CLMicroLocationProto::RequestPrediction *this, const CLMicroLocationProto::RequestPrediction *a2)
{
  int v4;
  unsigned int v5;
  const std::string *v6;
  std::string *v7;
  const std::string *v8;
  std::string *v9;
  const std::string *v10;
  std::string *v11;
  _BYTE v12[48];

  if (a2 == this)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v12);
  }
  LOBYTE(v4) = *((_BYTE *)a2 + 40);
  if ((_BYTE)v4)
  {
    if ((*((_BYTE *)a2 + 40) & 1) != 0)
    {
      v5 = *((_DWORD *)a2 + 8);
      if (v5 - 31 >= 0x19 && (v5 > 0xE || ((1 << v5) & 0x76B6) == 0))
        CLMicroLocationProto::RequestPrediction::MergeFrom();
      *((_DWORD *)this + 10) |= 1u;
      *((_DWORD *)this + 8) = v5;
      v4 = *((_DWORD *)a2 + 10);
    }
    if ((v4 & 2) != 0)
    {
      v6 = (const std::string *)*((_QWORD *)a2 + 1);
      *((_DWORD *)this + 10) |= 2u;
      v7 = (std::string *)*((_QWORD *)this + 1);
      if (v7 == (std::string *)MEMORY[0x24BEDD958])
      {
        v7 = (std::string *)operator new();
        v7->__r_.__value_.__l.__size_ = 0;
        v7->__r_.__value_.__r.__words[2] = 0;
        v7->__r_.__value_.__r.__words[0] = 0;
        *((_QWORD *)this + 1) = v7;
      }
      std::string::operator=(v7, v6);
      v4 = *((_DWORD *)a2 + 10);
      if ((v4 & 4) == 0)
      {
LABEL_11:
        if ((v4 & 8) == 0)
          return;
        goto LABEL_19;
      }
    }
    else if ((v4 & 4) == 0)
    {
      goto LABEL_11;
    }
    v8 = (const std::string *)*((_QWORD *)a2 + 2);
    *((_DWORD *)this + 10) |= 4u;
    v9 = (std::string *)*((_QWORD *)this + 2);
    if (v9 == (std::string *)MEMORY[0x24BEDD958])
    {
      v9 = (std::string *)operator new();
      v9->__r_.__value_.__l.__size_ = 0;
      v9->__r_.__value_.__r.__words[2] = 0;
      v9->__r_.__value_.__r.__words[0] = 0;
      *((_QWORD *)this + 2) = v9;
    }
    std::string::operator=(v9, v8);
    if ((*((_DWORD *)a2 + 10) & 8) != 0)
    {
LABEL_19:
      v10 = (const std::string *)*((_QWORD *)a2 + 3);
      *((_DWORD *)this + 10) |= 8u;
      v11 = (std::string *)*((_QWORD *)this + 3);
      if (v11 == (std::string *)MEMORY[0x24BEDD958])
      {
        v11 = (std::string *)operator new();
        v11->__r_.__value_.__l.__size_ = 0;
        v11->__r_.__value_.__r.__words[2] = 0;
        v11->__r_.__value_.__r.__words[0] = 0;
        *((_QWORD *)this + 3) = v11;
      }
      std::string::operator=(v11, v10);
    }
  }
}

void sub_241ACDBD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void CLMicroLocationProto::RequestPrediction::~RequestPrediction(CLMicroLocationProto::RequestPrediction *this)
{
  *(_QWORD *)this = &off_2511D7E38;
  CLMicroLocationProto::TruthLabelDonation::SharedDtor(this);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

{
  CLMicroLocationProto::RequestPrediction::~RequestPrediction(this);
  JUMPOUT(0x2426A04D4);
}

double CLMicroLocationProto::RequestPrediction::New(CLMicroLocationProto::RequestPrediction *this)
{
  uint64_t v1;
  double result;
  uint64_t v3;

  v1 = operator new();
  *(_QWORD *)&result = 43;
  *(_QWORD *)(v1 + 32) = 43;
  v3 = MEMORY[0x24BEDD958];
  *(_QWORD *)v1 = &off_2511D7E38;
  *(_QWORD *)(v1 + 8) = v3;
  *(_QWORD *)(v1 + 16) = v3;
  *(_QWORD *)(v1 + 24) = v3;
  *(_DWORD *)(v1 + 40) = 0;
  return result;
}

uint64_t CLMicroLocationProto::RequestPrediction::Clear(uint64_t this)
{
  char v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *(_BYTE *)(this + 40);
  if (v1)
  {
    *(_DWORD *)(this + 32) = 43;
    v2 = MEMORY[0x24BEDD958];
    if ((v1 & 2) != 0)
    {
      v3 = *(_QWORD *)(this + 8);
      if (v3 != MEMORY[0x24BEDD958])
      {
        if (*(char *)(v3 + 23) < 0)
        {
          **(_BYTE **)v3 = 0;
          *(_QWORD *)(v3 + 8) = 0;
        }
        else
        {
          *(_BYTE *)v3 = 0;
          *(_BYTE *)(v3 + 23) = 0;
        }
      }
    }
    if ((*(_BYTE *)(this + 40) & 4) != 0)
    {
      v4 = *(_QWORD *)(this + 16);
      if (v4 != v2)
      {
        if (*(char *)(v4 + 23) < 0)
        {
          **(_BYTE **)v4 = 0;
          *(_QWORD *)(v4 + 8) = 0;
        }
        else
        {
          *(_BYTE *)v4 = 0;
          *(_BYTE *)(v4 + 23) = 0;
        }
      }
    }
    if ((*(_BYTE *)(this + 40) & 8) != 0)
    {
      v5 = *(_QWORD *)(this + 24);
      if (v5 != v2)
      {
        if (*(char *)(v5 + 23) < 0)
        {
          **(_BYTE **)v5 = 0;
          *(_QWORD *)(v5 + 8) = 0;
        }
        else
        {
          *(_BYTE *)v5 = 0;
          *(_BYTE *)(v5 + 23) = 0;
        }
      }
    }
  }
  *(_DWORD *)(this + 40) = 0;
  return this;
}

uint64_t CLMicroLocationProto::RequestPrediction::MergePartialFromCodedStream(CLMicroLocationProto::RequestPrediction *this, wireless_diagnostics::google::protobuf::io::CodedInputStream *a2)
{
  uint64_t v4;
  char *v5;
  uint64_t TagFallback;
  int v7;
  char *v8;
  unsigned int v9;
  BOOL v10;
  _BYTE *v11;
  _QWORD *v12;
  _BYTE *v13;
  _QWORD *v14;
  _BYTE *v15;
  _QWORD *v16;
  uint64_t result;
  unsigned int v18;

  v4 = MEMORY[0x24BEDD958];
  while (2)
  {
    v5 = (char *)*((_QWORD *)a2 + 1);
    if ((unint64_t)v5 < *((_QWORD *)a2 + 2) && (*v5 & 0x80000000) == 0)
    {
      TagFallback = *v5;
      *((_DWORD *)a2 + 8) = TagFallback;
      *((_QWORD *)a2 + 1) = v5 + 1;
      if (!(_DWORD)TagFallback)
        return 1;
LABEL_7:
      switch(TagFallback >> 3)
      {
        case 1u:
          v7 = TagFallback & 7;
          if ((TagFallback & 7) != 0)
            goto LABEL_19;
          v18 = 0;
          v8 = (char *)*((_QWORD *)a2 + 1);
          if ((unint64_t)v8 >= *((_QWORD *)a2 + 2) || *v8 < 0)
          {
            result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v18);
            if (!(_DWORD)result)
              return result;
            v9 = v18;
          }
          else
          {
            v9 = *v8;
            *((_QWORD *)a2 + 1) = v8 + 1;
          }
          if (v9 - 31 < 0x19 || (v9 <= 0xE ? (v10 = ((1 << v9) & 0x76B6) == 0) : (v10 = 1), !v10))
          {
            if (v9 - 31 >= 0x19 && (v9 > 0xE || ((1 << v9) & 0x76B6) == 0))
              CLMicroLocationProto::RequestPrediction::MergeFrom();
            *((_DWORD *)this + 10) |= 1u;
            *((_DWORD *)this + 8) = v9;
          }
          v11 = (_BYTE *)*((_QWORD *)a2 + 1);
          if ((unint64_t)v11 < *((_QWORD *)a2 + 2) && *v11 == 18)
          {
            *((_QWORD *)a2 + 1) = v11 + 1;
            goto LABEL_36;
          }
          continue;
        case 2u:
          v7 = TagFallback & 7;
          if (v7 != 2)
            goto LABEL_19;
LABEL_36:
          *((_DWORD *)this + 10) |= 2u;
          if (*((_QWORD *)this + 1) == v4)
          {
            v12 = (_QWORD *)operator new();
            v12[1] = 0;
            v12[2] = 0;
            *v12 = 0;
            *((_QWORD *)this + 1) = v12;
          }
          result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString();
          if (!(_DWORD)result)
            return result;
          v13 = (_BYTE *)*((_QWORD *)a2 + 1);
          if ((unint64_t)v13 >= *((_QWORD *)a2 + 2) || *v13 != 26)
            continue;
          *((_QWORD *)a2 + 1) = v13 + 1;
LABEL_42:
          *((_DWORD *)this + 10) |= 4u;
          if (*((_QWORD *)this + 2) == v4)
          {
            v14 = (_QWORD *)operator new();
            v14[1] = 0;
            v14[2] = 0;
            *v14 = 0;
            *((_QWORD *)this + 2) = v14;
          }
          result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadBytes();
          if (!(_DWORD)result)
            return result;
          v15 = (_BYTE *)*((_QWORD *)a2 + 1);
          if ((unint64_t)v15 >= *((_QWORD *)a2 + 2) || *v15 != 34)
            continue;
          *((_QWORD *)a2 + 1) = v15 + 1;
LABEL_48:
          *((_DWORD *)this + 10) |= 8u;
          if (*((_QWORD *)this + 3) == v4)
          {
            v16 = (_QWORD *)operator new();
            v16[1] = 0;
            v16[2] = 0;
            *v16 = 0;
            *((_QWORD *)this + 3) = v16;
          }
          result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadBytes();
          if (!(_DWORD)result)
            return result;
          if (*((_QWORD *)a2 + 1) != *((_QWORD *)a2 + 2)
            || !*((_DWORD *)a2 + 11) && *((_DWORD *)a2 + 6) != *((_DWORD *)a2 + 10))
          {
            continue;
          }
          *((_DWORD *)a2 + 8) = 0;
          result = 1;
          *((_BYTE *)a2 + 36) = 1;
          return result;
        case 3u:
          v7 = TagFallback & 7;
          if (v7 == 2)
            goto LABEL_42;
          goto LABEL_19;
        case 4u:
          v7 = TagFallback & 7;
          if (v7 == 2)
            goto LABEL_48;
          goto LABEL_19;
        default:
          v7 = TagFallback & 7;
LABEL_19:
          if (v7 == 4)
            return 1;
          if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(a2, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback) & 1) != 0)continue;
          return 0;
      }
    }
    break;
  }
  TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(a2);
  *((_DWORD *)a2 + 8) = TagFallback;
  if ((_DWORD)TagFallback)
    goto LABEL_7;
  return 1;
}

uint64_t CLMicroLocationProto::RequestPrediction::SerializeWithCachedSizes(uint64_t this, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v4;
  int v5;

  v4 = this;
  v5 = *(_DWORD *)(this + 40);
  if ((v5 & 1) != 0)
  {
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(unsigned int *)(this + 32), (uint64_t)a2, a4);
    v5 = *(_DWORD *)(v4 + 40);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0)
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  else if ((v5 & 2) == 0)
  {
    goto LABEL_3;
  }
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString();
  v5 = *(_DWORD *)(v4 + 40);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0)
      return this;
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBytes();
  }
LABEL_8:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBytes();
  if ((*(_DWORD *)(v4 + 40) & 8) != 0)
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBytes();
  return this;
}

uint64_t CLMicroLocationProto::RequestPrediction::ByteSize(CLMicroLocationProto::RequestPrediction *this)
{
  int v2;
  uint64_t v3;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v4;
  uint64_t v5;
  int v6;
  char v7;
  uint64_t v8;
  unint64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  char v13;
  uint64_t v14;
  unint64_t v15;
  int v16;
  uint64_t v17;
  int v18;
  char v19;
  uint64_t v20;
  unint64_t v21;
  int v22;

  LOBYTE(v2) = *((_BYTE *)this + 40);
  if (!(_BYTE)v2)
  {
    v3 = 0;
    goto LABEL_43;
  }
  if ((*((_BYTE *)this + 40) & 1) != 0)
  {
    v4 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 8);
    if ((v4 & 0x80000000) != 0)
    {
      v3 = 11;
      if ((v2 & 2) == 0)
        goto LABEL_22;
    }
    else if (v4 >= 0x80)
    {
      v3 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v4) + 1;
      v2 = *((_DWORD *)this + 10);
      if ((v2 & 2) == 0)
        goto LABEL_22;
    }
    else
    {
      v3 = 2;
      if ((v2 & 2) == 0)
        goto LABEL_22;
    }
  }
  else
  {
    v3 = 0;
    if ((*((_BYTE *)this + 40) & 2) == 0)
      goto LABEL_22;
  }
  v5 = *((_QWORD *)this + 1);
  v6 = *(unsigned __int8 *)(v5 + 23);
  v7 = v6;
  v8 = *(_QWORD *)(v5 + 8);
  if ((v6 & 0x80u) == 0)
    v9 = *(unsigned __int8 *)(v5 + 23);
  else
    v9 = v8;
  if (v9 >= 0x80)
  {
    v10 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v9);
    v6 = *(unsigned __int8 *)(v5 + 23);
    v8 = *(_QWORD *)(v5 + 8);
    v2 = *((_DWORD *)this + 10);
    v7 = *(_BYTE *)(v5 + 23);
  }
  else
  {
    v10 = 1;
  }
  if (v7 < 0)
    v6 = v8;
  v3 = (v3 + v10 + v6 + 1);
LABEL_22:
  if ((v2 & 4) == 0)
  {
    if ((v2 & 8) == 0)
      goto LABEL_43;
    goto LABEL_34;
  }
  v11 = *((_QWORD *)this + 2);
  v12 = *(unsigned __int8 *)(v11 + 23);
  v13 = v12;
  v14 = *(_QWORD *)(v11 + 8);
  if ((v12 & 0x80u) == 0)
    v15 = *(unsigned __int8 *)(v11 + 23);
  else
    v15 = v14;
  if (v15 >= 0x80)
  {
    v16 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v15);
    v12 = *(unsigned __int8 *)(v11 + 23);
    v14 = *(_QWORD *)(v11 + 8);
    v2 = *((_DWORD *)this + 10);
    v13 = *(_BYTE *)(v11 + 23);
  }
  else
  {
    v16 = 1;
  }
  if (v13 < 0)
    v12 = v14;
  v3 = (v3 + v16 + v12 + 1);
  if ((v2 & 8) != 0)
  {
LABEL_34:
    v17 = *((_QWORD *)this + 3);
    v18 = *(unsigned __int8 *)(v17 + 23);
    v19 = v18;
    v20 = *(_QWORD *)(v17 + 8);
    if ((v18 & 0x80u) == 0)
      v21 = *(unsigned __int8 *)(v17 + 23);
    else
      v21 = v20;
    if (v21 >= 0x80)
    {
      v22 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v21);
      v18 = *(unsigned __int8 *)(v17 + 23);
      v20 = *(_QWORD *)(v17 + 8);
      v19 = *(_BYTE *)(v17 + 23);
    }
    else
    {
      v22 = 1;
    }
    if (v19 < 0)
      v18 = v20;
    v3 = (v3 + v22 + v18 + 1);
  }
LABEL_43:
  *((_DWORD *)this + 9) = v3;
  return v3;
}

void CLMicroLocationProto::RequestPrediction::CheckTypeAndMergeFrom(CLMicroLocationProto::RequestPrediction *this, const wireless_diagnostics::google::protobuf::MessageLite *lpsrc)
{
  uint64_t v4;
  uint64_t v5;

  CLMicroLocationProto::RequestPrediction::MergeFrom(this, lpsrc);
}

void CLMicroLocationProto::RequestPrediction::CopyFrom(CLMicroLocationProto::RequestPrediction *this, const CLMicroLocationProto::RequestPrediction *a2)
{
  if (a2 != this)
  {
    (*(void (**)(CLMicroLocationProto::RequestPrediction *))(*(_QWORD *)this + 32))(this);
    CLMicroLocationProto::RequestPrediction::MergeFrom(this, a2);
  }
}

uint64_t CLMicroLocationProto::RequestPrediction::IsInitialized(CLMicroLocationProto::RequestPrediction *this)
{
  return 1;
}

_QWORD *CLMicroLocationProto::RequestPrediction::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CLMicroLocationProto.RequestPrediction");
}

void CLMicroLocationProto::MiloInit::MergeFrom(CLMicroLocationProto::MiloInit *this, const CLMicroLocationProto::MiloInit *a2)
{
  int v4;
  unsigned int v5;
  const std::string *v6;
  std::string *v7;
  _BYTE v8[48];

  if (a2 == this)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v8);
  }
  LOBYTE(v4) = *((_BYTE *)a2 + 24);
  if ((_BYTE)v4)
  {
    if ((*((_BYTE *)a2 + 24) & 1) != 0)
    {
      v5 = *((_DWORD *)a2 + 4);
      if (v5 - 31 >= 0x19 && (v5 > 0xE || ((1 << v5) & 0x76B6) == 0))
        CLMicroLocationProto::MiloInit::MergeFrom();
      *((_DWORD *)this + 6) |= 1u;
      *((_DWORD *)this + 4) = v5;
      v4 = *((_DWORD *)a2 + 6);
    }
    if ((v4 & 2) != 0)
    {
      v6 = (const std::string *)*((_QWORD *)a2 + 1);
      *((_DWORD *)this + 6) |= 2u;
      v7 = (std::string *)*((_QWORD *)this + 1);
      if (v7 == (std::string *)MEMORY[0x24BEDD958])
      {
        v7 = (std::string *)operator new();
        v7->__r_.__value_.__l.__size_ = 0;
        v7->__r_.__value_.__r.__words[2] = 0;
        v7->__r_.__value_.__r.__words[0] = 0;
        *((_QWORD *)this + 1) = v7;
      }
      std::string::operator=(v7, v6);
    }
  }
}

void sub_241ACE43C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void CLMicroLocationProto::MiloInit::~MiloInit(CLMicroLocationProto::MiloInit *this)
{
  *(_QWORD *)this = &off_2511D7EB0;
  CLMicroLocationProto::ClusterRecordings::SharedDtor(this);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

{
  CLMicroLocationProto::MiloInit::~MiloInit(this);
  JUMPOUT(0x2426A04D4);
}

double CLMicroLocationProto::MiloInit::New(CLMicroLocationProto::MiloInit *this)
{
  uint64_t v1;
  double result;
  uint64_t v3;

  v1 = operator new();
  *(_QWORD *)&result = 44;
  *(_QWORD *)(v1 + 16) = 44;
  v3 = MEMORY[0x24BEDD958];
  *(_QWORD *)v1 = &off_2511D7EB0;
  *(_QWORD *)(v1 + 8) = v3;
  *(_DWORD *)(v1 + 24) = 0;
  return result;
}

uint64_t CLMicroLocationProto::MiloInit::Clear(uint64_t this)
{
  char v1;
  uint64_t v2;

  v1 = *(_BYTE *)(this + 24);
  if (v1)
  {
    *(_DWORD *)(this + 16) = 44;
    if ((v1 & 2) != 0)
    {
      v2 = *(_QWORD *)(this + 8);
      if (v2 != MEMORY[0x24BEDD958])
      {
        if (*(char *)(v2 + 23) < 0)
        {
          **(_BYTE **)v2 = 0;
          *(_QWORD *)(v2 + 8) = 0;
        }
        else
        {
          *(_BYTE *)v2 = 0;
          *(_BYTE *)(v2 + 23) = 0;
        }
      }
    }
  }
  *(_DWORD *)(this + 24) = 0;
  return this;
}

uint64_t CLMicroLocationProto::MiloInit::MergePartialFromCodedStream(CLMicroLocationProto::MiloInit *this, wireless_diagnostics::google::protobuf::io::CodedInputStream *a2)
{
  uint64_t v4;
  char *v5;
  uint64_t TagFallback;
  int v7;
  char *v8;
  unsigned int v9;
  BOOL v10;
  _BYTE *v12;
  _QWORD *v13;
  uint64_t result;
  unsigned int v15;

  v4 = MEMORY[0x24BEDD958];
  while (1)
  {
    while (1)
    {
      v5 = (char *)*((_QWORD *)a2 + 1);
      if ((unint64_t)v5 >= *((_QWORD *)a2 + 2) || *v5 < 0)
      {
        TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(a2);
        *((_DWORD *)a2 + 8) = TagFallback;
        if (!(_DWORD)TagFallback)
          return 1;
      }
      else
      {
        TagFallback = *v5;
        *((_DWORD *)a2 + 8) = TagFallback;
        *((_QWORD *)a2 + 1) = v5 + 1;
        if (!(_DWORD)TagFallback)
          return 1;
      }
      if (TagFallback >> 3 != 1)
        break;
      v7 = TagFallback & 7;
      if ((TagFallback & 7) != 0)
        goto LABEL_16;
      v15 = 0;
      v8 = (char *)*((_QWORD *)a2 + 1);
      if ((unint64_t)v8 >= *((_QWORD *)a2 + 2) || *v8 < 0)
      {
        result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v15);
        if (!(_DWORD)result)
          return result;
        v9 = v15;
      }
      else
      {
        v9 = *v8;
        *((_QWORD *)a2 + 1) = v8 + 1;
      }
      if (v9 - 31 < 0x19 || (v9 <= 0xE ? (v10 = ((1 << v9) & 0x76B6) == 0) : (v10 = 1), !v10))
      {
        if (v9 - 31 >= 0x19 && (v9 > 0xE || ((1 << v9) & 0x76B6) == 0))
          CLMicroLocationProto::MiloInit::MergeFrom();
        *((_DWORD *)this + 6) |= 1u;
        *((_DWORD *)this + 4) = v9;
      }
      v12 = (_BYTE *)*((_QWORD *)a2 + 1);
      if ((unint64_t)v12 < *((_QWORD *)a2 + 2) && *v12 == 18)
      {
        *((_QWORD *)a2 + 1) = v12 + 1;
LABEL_35:
        *((_DWORD *)this + 6) |= 2u;
        if (*((_QWORD *)this + 1) == v4)
        {
          v13 = (_QWORD *)operator new();
          v13[1] = 0;
          v13[2] = 0;
          *v13 = 0;
          *((_QWORD *)this + 1) = v13;
        }
        result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString();
        if (!(_DWORD)result)
          return result;
        if (*((_QWORD *)a2 + 1) == *((_QWORD *)a2 + 2)
          && (*((_DWORD *)a2 + 11) || *((_DWORD *)a2 + 6) == *((_DWORD *)a2 + 10)))
        {
          *((_DWORD *)a2 + 8) = 0;
          result = 1;
          *((_BYTE *)a2 + 36) = 1;
          return result;
        }
      }
    }
    if (TagFallback >> 3 == 2)
    {
      v7 = TagFallback & 7;
      if (v7 == 2)
        goto LABEL_35;
    }
    else
    {
      v7 = TagFallback & 7;
    }
LABEL_16:
    if (v7 == 4)
      return 1;
    if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(a2, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback) & 1) == 0)return 0;
  }
}

uint64_t CLMicroLocationProto::MiloInit::SerializeWithCachedSizes(uint64_t this, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v4;
  int v5;

  v4 = this;
  v5 = *(_DWORD *)(this + 24);
  if ((v5 & 1) != 0)
  {
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(unsigned int *)(this + 16), (uint64_t)a2, a4);
    v5 = *(_DWORD *)(v4 + 24);
  }
  if ((v5 & 2) != 0)
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString();
  return this;
}

uint64_t CLMicroLocationProto::MiloInit::ByteSize(CLMicroLocationProto::MiloInit *this)
{
  char v2;
  uint64_t v3;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v4;
  uint64_t v5;
  int v6;
  char v7;
  uint64_t v8;
  unint64_t v9;
  int v10;

  v2 = *((_BYTE *)this + 24);
  if (v2)
  {
    if ((*((_BYTE *)this + 24) & 1) != 0)
    {
      v4 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 4);
      if ((v4 & 0x80000000) != 0)
      {
        v3 = 11;
        if ((v2 & 2) == 0)
          goto LABEL_22;
      }
      else if (v4 >= 0x80)
      {
        v3 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v4) + 1;
        if ((*((_DWORD *)this + 6) & 2) == 0)
          goto LABEL_22;
      }
      else
      {
        v3 = 2;
        if ((v2 & 2) == 0)
          goto LABEL_22;
      }
    }
    else
    {
      v3 = 0;
      if ((*((_BYTE *)this + 24) & 2) == 0)
        goto LABEL_22;
    }
    v5 = *((_QWORD *)this + 1);
    v6 = *(unsigned __int8 *)(v5 + 23);
    v7 = v6;
    v8 = *(_QWORD *)(v5 + 8);
    if ((v6 & 0x80u) == 0)
      v9 = *(unsigned __int8 *)(v5 + 23);
    else
      v9 = v8;
    if (v9 >= 0x80)
    {
      v10 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v9);
      v6 = *(unsigned __int8 *)(v5 + 23);
      v8 = *(_QWORD *)(v5 + 8);
      v7 = *(_BYTE *)(v5 + 23);
    }
    else
    {
      v10 = 1;
    }
    if (v7 < 0)
      v6 = v8;
    v3 = (v3 + v10 + v6 + 1);
  }
  else
  {
    v3 = 0;
  }
LABEL_22:
  *((_DWORD *)this + 5) = v3;
  return v3;
}

void CLMicroLocationProto::MiloInit::CheckTypeAndMergeFrom(CLMicroLocationProto::MiloInit *this, const wireless_diagnostics::google::protobuf::MessageLite *lpsrc)
{
  uint64_t v4;
  uint64_t v5;

  CLMicroLocationProto::MiloInit::MergeFrom(this, lpsrc);
}

void CLMicroLocationProto::MiloInit::CopyFrom(CLMicroLocationProto::MiloInit *this, const CLMicroLocationProto::MiloInit *a2)
{
  if (a2 != this)
  {
    (*(void (**)(CLMicroLocationProto::MiloInit *))(*(_QWORD *)this + 32))(this);
    CLMicroLocationProto::MiloInit::MergeFrom(this, a2);
  }
}

uint64_t CLMicroLocationProto::MiloInit::IsInitialized(CLMicroLocationProto::MiloInit *this)
{
  return 1;
}

_QWORD *CLMicroLocationProto::MiloInit::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CLMicroLocationProto.MiloInit");
}

BOOL CLMicroLocationProto::MotionEvent_Status_IsValid(CLMicroLocationProto *this)
{
  return this < 0xB;
}

void CLMicroLocationProto::MotionEvent::MergeFrom(CLMicroLocationProto::MotionEvent *this, const CLMicroLocationProto::MotionEvent *a2)
{
  int v4;
  unsigned int v5;
  const std::string *v6;
  std::string *v7;
  unsigned int v8;
  const std::string *v9;
  std::string *v10;
  unsigned int v11;
  int v12;
  _BYTE v13[48];

  if (a2 == this)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v13);
  }
  LOBYTE(v4) = *((_BYTE *)a2 + 44);
  if ((_BYTE)v4)
  {
    if ((*((_BYTE *)a2 + 44) & 1) != 0)
    {
      v5 = *((_DWORD *)a2 + 4);
      if (v5 - 31 >= 0x19 && (v5 > 0xE || ((1 << v5) & 0x76B6) == 0))
        CLMicroLocationProto::MotionEvent::MergeFrom();
      *((_DWORD *)this + 11) |= 1u;
      *((_DWORD *)this + 4) = v5;
      v4 = *((_DWORD *)a2 + 11);
    }
    if ((v4 & 2) != 0)
    {
      v6 = (const std::string *)*((_QWORD *)a2 + 1);
      *((_DWORD *)this + 11) |= 2u;
      v7 = (std::string *)*((_QWORD *)this + 1);
      if (v7 == (std::string *)MEMORY[0x24BEDD958])
      {
        v7 = (std::string *)operator new();
        v7->__r_.__value_.__l.__size_ = 0;
        v7->__r_.__value_.__r.__words[2] = 0;
        v7->__r_.__value_.__r.__words[0] = 0;
        *((_QWORD *)this + 1) = v7;
      }
      std::string::operator=(v7, v6);
      v4 = *((_DWORD *)a2 + 11);
    }
    if ((v4 & 4) != 0)
    {
      v8 = *((_DWORD *)a2 + 5);
      if (v8 >= 0xB)
        CLMicroLocationProto::MotionEvent::MergeFrom();
      *((_DWORD *)this + 11) |= 4u;
      *((_DWORD *)this + 5) = v8;
      v4 = *((_DWORD *)a2 + 11);
    }
    if ((v4 & 8) != 0)
    {
      v9 = (const std::string *)*((_QWORD *)a2 + 3);
      *((_DWORD *)this + 11) |= 8u;
      v10 = (std::string *)*((_QWORD *)this + 3);
      if (v10 == (std::string *)MEMORY[0x24BEDD958])
      {
        v10 = (std::string *)operator new();
        v10->__r_.__value_.__l.__size_ = 0;
        v10->__r_.__value_.__r.__words[2] = 0;
        v10->__r_.__value_.__r.__words[0] = 0;
        *((_QWORD *)this + 3) = v10;
      }
      std::string::operator=(v10, v9);
      v4 = *((_DWORD *)a2 + 11);
    }
    if ((v4 & 0x10) != 0)
    {
      v11 = *((_DWORD *)a2 + 8);
      if (v11 >= 3)
        CLMicroLocationProto::MotionEvent::MergeFrom();
      *((_DWORD *)this + 11) |= 0x10u;
      *((_DWORD *)this + 8) = v11;
      v4 = *((_DWORD *)a2 + 11);
    }
    if ((v4 & 0x20) != 0)
    {
      v12 = *((_DWORD *)a2 + 9);
      *((_DWORD *)this + 11) |= 0x20u;
      *((_DWORD *)this + 9) = v12;
    }
  }
}

void sub_241ACEB0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void CLMicroLocationProto::MotionEvent::~MotionEvent(CLMicroLocationProto::MotionEvent *this)
{
  *(_QWORD *)this = &off_2511D7F28;
  CLMicroLocationProto::ServiceStartUpdating::SharedDtor(this);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

{
  CLMicroLocationProto::MotionEvent::~MotionEvent(this);
  JUMPOUT(0x2426A04D4);
}

double CLMicroLocationProto::MotionEvent::New(CLMicroLocationProto::MotionEvent *this)
{
  _QWORD *v1;
  uint64_t v2;
  double result;

  v1 = (_QWORD *)operator new();
  v2 = MEMORY[0x24BEDD958];
  *v1 = &off_2511D7F28;
  v1[1] = v2;
  *(_QWORD *)&result = 45;
  v1[2] = 45;
  v1[3] = v2;
  v1[4] = 0;
  v1[5] = 0;
  return result;
}

uint64_t CLMicroLocationProto::MotionEvent::Clear(uint64_t this)
{
  char v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(_BYTE *)(this + 44);
  if (v1)
  {
    *(_DWORD *)(this + 16) = 45;
    v2 = MEMORY[0x24BEDD958];
    if ((v1 & 2) != 0)
    {
      v3 = *(_QWORD *)(this + 8);
      if (v3 != MEMORY[0x24BEDD958])
      {
        if (*(char *)(v3 + 23) < 0)
        {
          **(_BYTE **)v3 = 0;
          *(_QWORD *)(v3 + 8) = 0;
        }
        else
        {
          *(_BYTE *)v3 = 0;
          *(_BYTE *)(v3 + 23) = 0;
        }
      }
    }
    *(_DWORD *)(this + 20) = 0;
    if ((*(_BYTE *)(this + 44) & 8) != 0)
    {
      v4 = *(_QWORD *)(this + 24);
      if (v4 != v2)
      {
        if (*(char *)(v4 + 23) < 0)
        {
          **(_BYTE **)v4 = 0;
          *(_QWORD *)(v4 + 8) = 0;
        }
        else
        {
          *(_BYTE *)v4 = 0;
          *(_BYTE *)(v4 + 23) = 0;
        }
      }
    }
    *(_QWORD *)(this + 32) = 0;
  }
  *(_DWORD *)(this + 44) = 0;
  return this;
}

uint64_t CLMicroLocationProto::MotionEvent::MergePartialFromCodedStream(CLMicroLocationProto::MotionEvent *this, wireless_diagnostics::google::protobuf::io::CodedInputStream *a2)
{
  unsigned int *v4;
  uint64_t v5;
  char *v6;
  uint64_t TagFallback;
  int v8;
  char *v9;
  unsigned int v10;
  unint64_t v11;
  char *v12;
  unint64_t v13;
  char *v14;
  unint64_t v15;
  char *v16;
  BOOL v17;
  _BYTE *v18;
  _QWORD *v19;
  _BYTE *v20;
  unsigned int v21;
  _BYTE *v22;
  _QWORD *v23;
  _BYTE *v24;
  unsigned int v25;
  _BYTE *v26;
  unsigned __int8 *v27;
  uint64_t result;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;

  v4 = (unsigned int *)((char *)this + 36);
  v5 = MEMORY[0x24BEDD958];
  while (2)
  {
    v6 = (char *)*((_QWORD *)a2 + 1);
    if ((unint64_t)v6 >= *((_QWORD *)a2 + 2) || *v6 < 0)
    {
      TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(a2);
      *((_DWORD *)a2 + 8) = TagFallback;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    else
    {
      TagFallback = *v6;
      *((_DWORD *)a2 + 8) = TagFallback;
      *((_QWORD *)a2 + 1) = v6 + 1;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    switch(TagFallback >> 3)
    {
      case 1u:
        v8 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_22;
        v31 = 0;
        v9 = (char *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v9 < *((_QWORD *)a2 + 2) && (*v9 & 0x80000000) == 0)
        {
          v10 = *v9;
          *((_QWORD *)a2 + 1) = v9 + 1;
LABEL_28:
          if (v10 - 31 < 0x19 || (v10 <= 0xE ? (v17 = ((1 << v10) & 0x76B6) == 0) : (v17 = 1), !v17))
          {
            if (v10 - 31 >= 0x19 && (v10 > 0xE || ((1 << v10) & 0x76B6) == 0))
              CLMicroLocationProto::MotionEvent::MergeFrom();
            *((_DWORD *)this + 11) |= 1u;
            *((_DWORD *)this + 4) = v10;
          }
          v18 = (_BYTE *)*((_QWORD *)a2 + 1);
          if ((unint64_t)v18 < *((_QWORD *)a2 + 2) && *v18 == 18)
          {
            *((_QWORD *)a2 + 1) = v18 + 1;
            goto LABEL_40;
          }
          continue;
        }
        result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v31);
        if ((_DWORD)result)
        {
          v10 = v31;
          goto LABEL_28;
        }
        break;
      case 2u:
        v8 = TagFallback & 7;
        if (v8 != 2)
          goto LABEL_22;
LABEL_40:
        *((_DWORD *)this + 11) |= 2u;
        if (*((_QWORD *)this + 1) == v5)
        {
          v19 = (_QWORD *)operator new();
          v19[1] = 0;
          v19[2] = 0;
          *v19 = 0;
          *((_QWORD *)this + 1) = v19;
        }
        result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString();
        if (!(_DWORD)result)
          return result;
        v20 = (_BYTE *)*((_QWORD *)a2 + 1);
        v11 = *((_QWORD *)a2 + 2);
        if ((unint64_t)v20 >= v11 || *v20 != 24)
          continue;
        v12 = v20 + 1;
        *((_QWORD *)a2 + 1) = v12;
LABEL_46:
        v30 = 0;
        if ((unint64_t)v12 >= v11 || *v12 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v30);
          if (!(_DWORD)result)
            return result;
          v21 = v30;
        }
        else
        {
          v21 = *v12;
          *((_QWORD *)a2 + 1) = v12 + 1;
        }
        if (v21 <= 0xA)
        {
          *((_DWORD *)this + 11) |= 4u;
          *((_DWORD *)this + 5) = v21;
        }
        v22 = (_BYTE *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v22 >= *((_QWORD *)a2 + 2) || *v22 != 34)
          continue;
        *((_QWORD *)a2 + 1) = v22 + 1;
LABEL_56:
        *((_DWORD *)this + 11) |= 8u;
        if (*((_QWORD *)this + 3) == v5)
        {
          v23 = (_QWORD *)operator new();
          v23[1] = 0;
          v23[2] = 0;
          *v23 = 0;
          *((_QWORD *)this + 3) = v23;
        }
        result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString();
        if (!(_DWORD)result)
          return result;
        v24 = (_BYTE *)*((_QWORD *)a2 + 1);
        v13 = *((_QWORD *)a2 + 2);
        if ((unint64_t)v24 >= v13 || *v24 != 40)
          continue;
        v14 = v24 + 1;
        *((_QWORD *)a2 + 1) = v14;
LABEL_62:
        v29 = 0;
        if ((unint64_t)v14 >= v13 || *v14 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v29);
          if (!(_DWORD)result)
            return result;
          v25 = v29;
        }
        else
        {
          v25 = *v14;
          *((_QWORD *)a2 + 1) = v14 + 1;
        }
        if (v25 <= 2)
        {
          *((_DWORD *)this + 11) |= 0x10u;
          *((_DWORD *)this + 8) = v25;
        }
        v26 = (_BYTE *)*((_QWORD *)a2 + 1);
        v15 = *((_QWORD *)a2 + 2);
        if ((unint64_t)v26 >= v15 || *v26 != 48)
          continue;
        v16 = v26 + 1;
        *((_QWORD *)a2 + 1) = v16;
LABEL_72:
        if ((unint64_t)v16 >= v15 || *v16 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v4);
          if (!(_DWORD)result)
            return result;
          v27 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
          v15 = *((_QWORD *)a2 + 2);
        }
        else
        {
          *v4 = *v16;
          v27 = (unsigned __int8 *)(v16 + 1);
          *((_QWORD *)a2 + 1) = v27;
        }
        *((_DWORD *)this + 11) |= 0x20u;
        if (v27 != (unsigned __int8 *)v15 || !*((_DWORD *)a2 + 11) && *((_DWORD *)a2 + 6) != *((_DWORD *)a2 + 10))
          continue;
        *((_DWORD *)a2 + 8) = 0;
        result = 1;
        *((_BYTE *)a2 + 36) = 1;
        return result;
      case 3u:
        v8 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_22;
        v12 = (char *)*((_QWORD *)a2 + 1);
        v11 = *((_QWORD *)a2 + 2);
        goto LABEL_46;
      case 4u:
        v8 = TagFallback & 7;
        if (v8 == 2)
          goto LABEL_56;
        goto LABEL_22;
      case 5u:
        v8 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_22;
        v14 = (char *)*((_QWORD *)a2 + 1);
        v13 = *((_QWORD *)a2 + 2);
        goto LABEL_62;
      case 6u:
        v8 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_22;
        v16 = (char *)*((_QWORD *)a2 + 1);
        v15 = *((_QWORD *)a2 + 2);
        goto LABEL_72;
      default:
        v8 = TagFallback & 7;
LABEL_22:
        if (v8 == 4)
          return 1;
        if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(a2, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback) & 1) != 0)continue;
        return 0;
    }
    return result;
  }
}

unsigned int *CLMicroLocationProto::MotionEvent::SerializeWithCachedSizes(unsigned int *this, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  unsigned int *v5;
  unsigned int v6;

  v5 = this;
  v6 = this[11];
  if ((v6 & 1) != 0)
  {
    this = (unsigned int *)wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, this[4], (uint64_t)a2, a4);
    v6 = v5[11];
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0)
        goto LABEL_4;
      goto LABEL_10;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  this = (unsigned int *)wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString();
  v6 = v5[11];
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0)
      goto LABEL_5;
    goto LABEL_11;
  }
LABEL_10:
  this = (unsigned int *)wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, v5[5], (uint64_t)a2, a4);
  v6 = v5[11];
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_12;
  }
LABEL_11:
  this = (unsigned int *)wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString();
  v6 = v5[11];
  if ((v6 & 0x10) == 0)
  {
LABEL_6:
    if ((v6 & 0x20) == 0)
      return this;
    return (unsigned int *)wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)6, v5[9], (uint64_t)a2, a4);
  }
LABEL_12:
  this = (unsigned int *)wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5, v5[8], (uint64_t)a2, a4);
  if ((v5[11] & 0x20) != 0)
    return (unsigned int *)wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)6, v5[9], (uint64_t)a2, a4);
  return this;
}

uint64_t CLMicroLocationProto::MotionEvent::ByteSize(CLMicroLocationProto::MotionEvent *this)
{
  int v2;
  uint64_t v3;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v4;
  uint64_t v5;
  int v6;
  char v7;
  uint64_t v8;
  unint64_t v9;
  int v10;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v11;
  int v12;
  uint64_t v13;
  int v14;
  char v15;
  uint64_t v16;
  unint64_t v17;
  int v18;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v19;
  int v20;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v21;
  int v22;

  LOBYTE(v2) = *((_BYTE *)this + 44);
  if (!(_BYTE)v2)
  {
    v3 = 0;
    goto LABEL_52;
  }
  if ((*((_BYTE *)this + 44) & 1) != 0)
  {
    v4 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 4);
    if ((v4 & 0x80000000) != 0)
    {
      v3 = 11;
      if ((v2 & 2) == 0)
        goto LABEL_22;
    }
    else if (v4 >= 0x80)
    {
      v3 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v4) + 1;
      v2 = *((_DWORD *)this + 11);
      if ((v2 & 2) == 0)
        goto LABEL_22;
    }
    else
    {
      v3 = 2;
      if ((v2 & 2) == 0)
        goto LABEL_22;
    }
  }
  else
  {
    v3 = 0;
    if ((*((_BYTE *)this + 44) & 2) == 0)
      goto LABEL_22;
  }
  v5 = *((_QWORD *)this + 1);
  v6 = *(unsigned __int8 *)(v5 + 23);
  v7 = v6;
  v8 = *(_QWORD *)(v5 + 8);
  if ((v6 & 0x80u) == 0)
    v9 = *(unsigned __int8 *)(v5 + 23);
  else
    v9 = v8;
  if (v9 >= 0x80)
  {
    v10 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v9);
    v6 = *(unsigned __int8 *)(v5 + 23);
    v8 = *(_QWORD *)(v5 + 8);
    v2 = *((_DWORD *)this + 11);
    v7 = *(_BYTE *)(v5 + 23);
  }
  else
  {
    v10 = 1;
  }
  if (v7 < 0)
    v6 = v8;
  v3 = (v3 + v10 + v6 + 1);
LABEL_22:
  if ((v2 & 4) != 0)
  {
    v11 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 5);
    if ((v11 & 0x80000000) != 0)
    {
      v12 = 11;
    }
    else if (v11 >= 0x80)
    {
      v12 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v11) + 1;
      v2 = *((_DWORD *)this + 11);
    }
    else
    {
      v12 = 2;
    }
    v3 = (v12 + v3);
    if ((v2 & 8) == 0)
    {
LABEL_24:
      if ((v2 & 0x10) == 0)
        goto LABEL_25;
      goto LABEL_42;
    }
  }
  else if ((v2 & 8) == 0)
  {
    goto LABEL_24;
  }
  v13 = *((_QWORD *)this + 3);
  v14 = *(unsigned __int8 *)(v13 + 23);
  v15 = v14;
  v16 = *(_QWORD *)(v13 + 8);
  if ((v14 & 0x80u) == 0)
    v17 = *(unsigned __int8 *)(v13 + 23);
  else
    v17 = v16;
  if (v17 >= 0x80)
  {
    v18 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v17);
    v14 = *(unsigned __int8 *)(v13 + 23);
    v16 = *(_QWORD *)(v13 + 8);
    v2 = *((_DWORD *)this + 11);
    v15 = *(_BYTE *)(v13 + 23);
  }
  else
  {
    v18 = 1;
  }
  if (v15 < 0)
    v14 = v16;
  v3 = (v3 + v18 + v14 + 1);
  if ((v2 & 0x10) == 0)
  {
LABEL_25:
    if ((v2 & 0x20) == 0)
      goto LABEL_52;
    goto LABEL_48;
  }
LABEL_42:
  v19 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 8);
  if ((v19 & 0x80000000) != 0)
  {
    v20 = 11;
  }
  else if (v19 >= 0x80)
  {
    v20 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v19) + 1;
    v2 = *((_DWORD *)this + 11);
  }
  else
  {
    v20 = 2;
  }
  v3 = (v20 + v3);
  if ((v2 & 0x20) != 0)
  {
LABEL_48:
    v21 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 9);
    if (v21 >= 0x80)
      v22 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v21) + 1;
    else
      v22 = 2;
    v3 = (v22 + v3);
  }
LABEL_52:
  *((_DWORD *)this + 10) = v3;
  return v3;
}

void CLMicroLocationProto::MotionEvent::CheckTypeAndMergeFrom(CLMicroLocationProto::MotionEvent *this, const wireless_diagnostics::google::protobuf::MessageLite *lpsrc)
{
  uint64_t v4;
  uint64_t v5;

  CLMicroLocationProto::MotionEvent::MergeFrom(this, lpsrc);
}

void CLMicroLocationProto::MotionEvent::CopyFrom(CLMicroLocationProto::MotionEvent *this, const CLMicroLocationProto::MotionEvent *a2)
{
  if (a2 != this)
  {
    (*(void (**)(CLMicroLocationProto::MotionEvent *))(*(_QWORD *)this + 32))(this);
    CLMicroLocationProto::MotionEvent::MergeFrom(this, a2);
  }
}

uint64_t CLMicroLocationProto::MotionEvent::IsInitialized(CLMicroLocationProto::MotionEvent *this)
{
  return 1;
}

_QWORD *CLMicroLocationProto::MotionEvent::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CLMicroLocationProto.MotionEvent");
}

void CLMicroLocationProto::LegacyThrottle::MergeFrom(CLMicroLocationProto::LegacyThrottle *this, const CLMicroLocationProto::LegacyThrottle *a2)
{
  int v4;
  unsigned int v5;
  const std::string *v6;
  std::string *v7;
  _BYTE v8[48];

  if (a2 == this)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v8);
  }
  LOBYTE(v4) = *((_BYTE *)a2 + 24);
  if ((_BYTE)v4)
  {
    if ((*((_BYTE *)a2 + 24) & 1) != 0)
    {
      v5 = *((_DWORD *)a2 + 4);
      if (v5 - 31 >= 0x19 && (v5 > 0xE || ((1 << v5) & 0x76B6) == 0))
        CLMicroLocationProto::LegacyThrottle::MergeFrom();
      *((_DWORD *)this + 6) |= 1u;
      *((_DWORD *)this + 4) = v5;
      v4 = *((_DWORD *)a2 + 6);
    }
    if ((v4 & 2) != 0)
    {
      v6 = (const std::string *)*((_QWORD *)a2 + 1);
      *((_DWORD *)this + 6) |= 2u;
      v7 = (std::string *)*((_QWORD *)this + 1);
      if (v7 == (std::string *)MEMORY[0x24BEDD958])
      {
        v7 = (std::string *)operator new();
        v7->__r_.__value_.__l.__size_ = 0;
        v7->__r_.__value_.__r.__words[2] = 0;
        v7->__r_.__value_.__r.__words[0] = 0;
        *((_QWORD *)this + 1) = v7;
      }
      std::string::operator=(v7, v6);
    }
  }
}

void sub_241ACF4C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void CLMicroLocationProto::LegacyThrottle::~LegacyThrottle(CLMicroLocationProto::LegacyThrottle *this)
{
  *(_QWORD *)this = &off_2511D7FA0;
  CLMicroLocationProto::ClusterRecordings::SharedDtor(this);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

{
  CLMicroLocationProto::LegacyThrottle::~LegacyThrottle(this);
  JUMPOUT(0x2426A04D4);
}

double CLMicroLocationProto::LegacyThrottle::New(CLMicroLocationProto::LegacyThrottle *this)
{
  uint64_t v1;
  double result;
  uint64_t v3;

  v1 = operator new();
  *(_QWORD *)&result = 46;
  *(_QWORD *)(v1 + 16) = 46;
  v3 = MEMORY[0x24BEDD958];
  *(_QWORD *)v1 = &off_2511D7FA0;
  *(_QWORD *)(v1 + 8) = v3;
  *(_DWORD *)(v1 + 24) = 0;
  return result;
}

uint64_t CLMicroLocationProto::LegacyThrottle::Clear(uint64_t this)
{
  char v1;
  uint64_t v2;

  v1 = *(_BYTE *)(this + 24);
  if (v1)
  {
    *(_DWORD *)(this + 16) = 46;
    if ((v1 & 2) != 0)
    {
      v2 = *(_QWORD *)(this + 8);
      if (v2 != MEMORY[0x24BEDD958])
      {
        if (*(char *)(v2 + 23) < 0)
        {
          **(_BYTE **)v2 = 0;
          *(_QWORD *)(v2 + 8) = 0;
        }
        else
        {
          *(_BYTE *)v2 = 0;
          *(_BYTE *)(v2 + 23) = 0;
        }
      }
    }
  }
  *(_DWORD *)(this + 24) = 0;
  return this;
}

uint64_t CLMicroLocationProto::LegacyThrottle::MergePartialFromCodedStream(CLMicroLocationProto::LegacyThrottle *this, wireless_diagnostics::google::protobuf::io::CodedInputStream *a2)
{
  uint64_t v4;
  char *v5;
  uint64_t TagFallback;
  int v7;
  char *v8;
  unsigned int v9;
  BOOL v10;
  _BYTE *v12;
  _QWORD *v13;
  uint64_t result;
  unsigned int v15;

  v4 = MEMORY[0x24BEDD958];
  while (1)
  {
    while (1)
    {
      v5 = (char *)*((_QWORD *)a2 + 1);
      if ((unint64_t)v5 >= *((_QWORD *)a2 + 2) || *v5 < 0)
      {
        TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(a2);
        *((_DWORD *)a2 + 8) = TagFallback;
        if (!(_DWORD)TagFallback)
          return 1;
      }
      else
      {
        TagFallback = *v5;
        *((_DWORD *)a2 + 8) = TagFallback;
        *((_QWORD *)a2 + 1) = v5 + 1;
        if (!(_DWORD)TagFallback)
          return 1;
      }
      if (TagFallback >> 3 != 1)
        break;
      v7 = TagFallback & 7;
      if ((TagFallback & 7) != 0)
        goto LABEL_16;
      v15 = 0;
      v8 = (char *)*((_QWORD *)a2 + 1);
      if ((unint64_t)v8 >= *((_QWORD *)a2 + 2) || *v8 < 0)
      {
        result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v15);
        if (!(_DWORD)result)
          return result;
        v9 = v15;
      }
      else
      {
        v9 = *v8;
        *((_QWORD *)a2 + 1) = v8 + 1;
      }
      if (v9 - 31 < 0x19 || (v9 <= 0xE ? (v10 = ((1 << v9) & 0x76B6) == 0) : (v10 = 1), !v10))
      {
        if (v9 - 31 >= 0x19 && (v9 > 0xE || ((1 << v9) & 0x76B6) == 0))
          CLMicroLocationProto::LegacyThrottle::MergeFrom();
        *((_DWORD *)this + 6) |= 1u;
        *((_DWORD *)this + 4) = v9;
      }
      v12 = (_BYTE *)*((_QWORD *)a2 + 1);
      if ((unint64_t)v12 < *((_QWORD *)a2 + 2) && *v12 == 18)
      {
        *((_QWORD *)a2 + 1) = v12 + 1;
LABEL_35:
        *((_DWORD *)this + 6) |= 2u;
        if (*((_QWORD *)this + 1) == v4)
        {
          v13 = (_QWORD *)operator new();
          v13[1] = 0;
          v13[2] = 0;
          *v13 = 0;
          *((_QWORD *)this + 1) = v13;
        }
        result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString();
        if (!(_DWORD)result)
          return result;
        if (*((_QWORD *)a2 + 1) == *((_QWORD *)a2 + 2)
          && (*((_DWORD *)a2 + 11) || *((_DWORD *)a2 + 6) == *((_DWORD *)a2 + 10)))
        {
          *((_DWORD *)a2 + 8) = 0;
          result = 1;
          *((_BYTE *)a2 + 36) = 1;
          return result;
        }
      }
    }
    if (TagFallback >> 3 == 2)
    {
      v7 = TagFallback & 7;
      if (v7 == 2)
        goto LABEL_35;
    }
    else
    {
      v7 = TagFallback & 7;
    }
LABEL_16:
    if (v7 == 4)
      return 1;
    if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(a2, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback) & 1) == 0)return 0;
  }
}

uint64_t CLMicroLocationProto::LegacyThrottle::SerializeWithCachedSizes(uint64_t this, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v4;
  int v5;

  v4 = this;
  v5 = *(_DWORD *)(this + 24);
  if ((v5 & 1) != 0)
  {
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(unsigned int *)(this + 16), (uint64_t)a2, a4);
    v5 = *(_DWORD *)(v4 + 24);
  }
  if ((v5 & 2) != 0)
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString();
  return this;
}

uint64_t CLMicroLocationProto::LegacyThrottle::ByteSize(CLMicroLocationProto::LegacyThrottle *this)
{
  char v2;
  uint64_t v3;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v4;
  uint64_t v5;
  int v6;
  char v7;
  uint64_t v8;
  unint64_t v9;
  int v10;

  v2 = *((_BYTE *)this + 24);
  if (v2)
  {
    if ((*((_BYTE *)this + 24) & 1) != 0)
    {
      v4 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 4);
      if ((v4 & 0x80000000) != 0)
      {
        v3 = 11;
        if ((v2 & 2) == 0)
          goto LABEL_22;
      }
      else if (v4 >= 0x80)
      {
        v3 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v4) + 1;
        if ((*((_DWORD *)this + 6) & 2) == 0)
          goto LABEL_22;
      }
      else
      {
        v3 = 2;
        if ((v2 & 2) == 0)
          goto LABEL_22;
      }
    }
    else
    {
      v3 = 0;
      if ((*((_BYTE *)this + 24) & 2) == 0)
        goto LABEL_22;
    }
    v5 = *((_QWORD *)this + 1);
    v6 = *(unsigned __int8 *)(v5 + 23);
    v7 = v6;
    v8 = *(_QWORD *)(v5 + 8);
    if ((v6 & 0x80u) == 0)
      v9 = *(unsigned __int8 *)(v5 + 23);
    else
      v9 = v8;
    if (v9 >= 0x80)
    {
      v10 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v9);
      v6 = *(unsigned __int8 *)(v5 + 23);
      v8 = *(_QWORD *)(v5 + 8);
      v7 = *(_BYTE *)(v5 + 23);
    }
    else
    {
      v10 = 1;
    }
    if (v7 < 0)
      v6 = v8;
    v3 = (v3 + v10 + v6 + 1);
  }
  else
  {
    v3 = 0;
  }
LABEL_22:
  *((_DWORD *)this + 5) = v3;
  return v3;
}

void CLMicroLocationProto::LegacyThrottle::CheckTypeAndMergeFrom(CLMicroLocationProto::LegacyThrottle *this, const wireless_diagnostics::google::protobuf::MessageLite *lpsrc)
{
  uint64_t v4;
  uint64_t v5;

  CLMicroLocationProto::LegacyThrottle::MergeFrom(this, lpsrc);
}

void CLMicroLocationProto::LegacyThrottle::CopyFrom(CLMicroLocationProto::LegacyThrottle *this, const CLMicroLocationProto::LegacyThrottle *a2)
{
  if (a2 != this)
  {
    (*(void (**)(CLMicroLocationProto::LegacyThrottle *))(*(_QWORD *)this + 32))(this);
    CLMicroLocationProto::LegacyThrottle::MergeFrom(this, a2);
  }
}

uint64_t CLMicroLocationProto::LegacyThrottle::IsInitialized(CLMicroLocationProto::LegacyThrottle *this)
{
  return 1;
}

_QWORD *CLMicroLocationProto::LegacyThrottle::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CLMicroLocationProto.LegacyThrottle");
}

void CLMicroLocationProto::RetrievedLoi::MergeFrom(CLMicroLocationProto::RetrievedLoi *this, const CLMicroLocationProto::RetrievedLoi *a2)
{
  int v4;
  unsigned int v5;
  char v6;
  const std::string *v7;
  std::string *v8;
  const std::string *v9;
  std::string *v10;
  const std::string *v11;
  std::string *v12;
  int v13;
  _BYTE v14[48];

  if (a2 == this)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v14);
  }
  LOBYTE(v4) = *((_BYTE *)a2 + 48);
  if (!(_BYTE)v4)
    return;
  if ((*((_BYTE *)a2 + 48) & 1) != 0)
  {
    v5 = *((_DWORD *)a2 + 6);
    if (v5 - 31 >= 0x19 && (v5 > 0xE || ((1 << v5) & 0x76B6) == 0))
      CLMicroLocationProto::RetrievedLoi::MergeFrom();
    *((_DWORD *)this + 12) |= 1u;
    *((_DWORD *)this + 6) = v5;
    v4 = *((_DWORD *)a2 + 12);
  }
  if ((v4 & 2) != 0)
  {
    v7 = (const std::string *)*((_QWORD *)a2 + 1);
    *((_DWORD *)this + 12) |= 2u;
    v8 = (std::string *)*((_QWORD *)this + 1);
    if (v8 == (std::string *)MEMORY[0x24BEDD958])
    {
      v8 = (std::string *)operator new();
      v8->__r_.__value_.__l.__size_ = 0;
      v8->__r_.__value_.__r.__words[2] = 0;
      v8->__r_.__value_.__r.__words[0] = 0;
      *((_QWORD *)this + 1) = v8;
    }
    std::string::operator=(v8, v7);
    v4 = *((_DWORD *)a2 + 12);
    if ((v4 & 4) == 0)
    {
LABEL_11:
      if ((v4 & 8) == 0)
        goto LABEL_12;
LABEL_22:
      v11 = (const std::string *)*((_QWORD *)a2 + 4);
      *((_DWORD *)this + 12) |= 8u;
      v12 = (std::string *)*((_QWORD *)this + 4);
      if (v12 == (std::string *)MEMORY[0x24BEDD958])
      {
        v12 = (std::string *)operator new();
        v12->__r_.__value_.__l.__size_ = 0;
        v12->__r_.__value_.__r.__words[2] = 0;
        v12->__r_.__value_.__r.__words[0] = 0;
        *((_QWORD *)this + 4) = v12;
      }
      std::string::operator=(v12, v11);
      v4 = *((_DWORD *)a2 + 12);
      if ((v4 & 0x10) == 0)
      {
LABEL_13:
        if ((v4 & 0x20) == 0)
          return;
        goto LABEL_14;
      }
      goto LABEL_25;
    }
  }
  else if ((v4 & 4) == 0)
  {
    goto LABEL_11;
  }
  v9 = (const std::string *)*((_QWORD *)a2 + 2);
  *((_DWORD *)this + 12) |= 4u;
  v10 = (std::string *)*((_QWORD *)this + 2);
  if (v10 == (std::string *)MEMORY[0x24BEDD958])
  {
    v10 = (std::string *)operator new();
    v10->__r_.__value_.__l.__size_ = 0;
    v10->__r_.__value_.__r.__words[2] = 0;
    v10->__r_.__value_.__r.__words[0] = 0;
    *((_QWORD *)this + 2) = v10;
  }
  std::string::operator=(v10, v9);
  v4 = *((_DWORD *)a2 + 12);
  if ((v4 & 8) != 0)
    goto LABEL_22;
LABEL_12:
  if ((v4 & 0x10) == 0)
    goto LABEL_13;
LABEL_25:
  v13 = *((_DWORD *)a2 + 7);
  if ((v13 - 1) >= 0xC)
    CLMicroLocationProto::RetrievedLoi::MergeFrom();
  *((_DWORD *)this + 12) |= 0x10u;
  *((_DWORD *)this + 7) = v13;
  if ((*((_DWORD *)a2 + 12) & 0x20) != 0)
  {
LABEL_14:
    v6 = *((_BYTE *)a2 + 40);
    *((_DWORD *)this + 12) |= 0x20u;
    *((_BYTE *)this + 40) = v6;
  }
}

void sub_241ACFBCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void CLMicroLocationProto::RetrievedLoi::~RetrievedLoi(CLMicroLocationProto::RetrievedLoi *this)
{
  *(_QWORD *)this = &off_2511D8018;
  CLMicroLocationProto::RetrievedLoi::SharedDtor(this);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

{
  CLMicroLocationProto::RetrievedLoi::~RetrievedLoi(this);
  JUMPOUT(0x2426A04D4);
}

void CLMicroLocationProto::RetrievedLoi::SharedDtor(CLMicroLocationProto::RetrievedLoi *this)
{
  CLMicroLocationProto::RetrievedLoi *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v7;

  v1 = this;
  v2 = *((_QWORD *)this + 1);
  v3 = MEMORY[0x24BEDD958];
  if (v2 != MEMORY[0x24BEDD958] && v2 != 0)
  {
    if (*(char *)(v2 + 23) < 0)
      operator delete(*(void **)v2);
    this = (CLMicroLocationProto::RetrievedLoi *)MEMORY[0x2426A04D4](v2, 0x1012C40EC159624);
  }
  v5 = *((_QWORD *)v1 + 2);
  if (v5 != v3 && v5 != 0)
  {
    if (*(char *)(v5 + 23) < 0)
      operator delete(*(void **)v5);
    this = (CLMicroLocationProto::RetrievedLoi *)MEMORY[0x2426A04D4](v5, 0x1012C40EC159624);
  }
  v7 = *((_QWORD *)v1 + 4);
  if (v7 != v3 && v7 != 0)
  {
    if (*(char *)(v7 + 23) < 0)
      operator delete(*(void **)v7);
    this = (CLMicroLocationProto::RetrievedLoi *)MEMORY[0x2426A04D4](v7, 0x1012C40EC159624);
  }
  CLMicroLocationProto::protobuf_AddDesc_microlocation_2eproto(this);
}

double CLMicroLocationProto::RetrievedLoi::New(CLMicroLocationProto::RetrievedLoi *this)
{
  uint64_t v1;
  uint64_t v2;
  double result;

  v1 = operator new();
  v2 = MEMORY[0x24BEDD958];
  *(_QWORD *)v1 = &off_2511D8018;
  *(_QWORD *)(v1 + 8) = v2;
  *(_QWORD *)(v1 + 16) = v2;
  *(_QWORD *)(v1 + 32) = v2;
  *(_QWORD *)&result = 0x10000002FLL;
  *(_QWORD *)(v1 + 24) = 0x10000002FLL;
  *(_BYTE *)(v1 + 40) = 0;
  *(_DWORD *)(v1 + 44) = 0;
  *(_DWORD *)(v1 + 48) = 0;
  return result;
}

uint64_t CLMicroLocationProto::RetrievedLoi::Clear(uint64_t this)
{
  char v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *(_BYTE *)(this + 48);
  if (v1)
  {
    *(_DWORD *)(this + 24) = 47;
    v2 = MEMORY[0x24BEDD958];
    if ((v1 & 2) != 0)
    {
      v3 = *(_QWORD *)(this + 8);
      if (v3 != MEMORY[0x24BEDD958])
      {
        if (*(char *)(v3 + 23) < 0)
        {
          **(_BYTE **)v3 = 0;
          *(_QWORD *)(v3 + 8) = 0;
        }
        else
        {
          *(_BYTE *)v3 = 0;
          *(_BYTE *)(v3 + 23) = 0;
        }
      }
    }
    if ((*(_BYTE *)(this + 48) & 4) != 0)
    {
      v4 = *(_QWORD *)(this + 16);
      if (v4 != v2)
      {
        if (*(char *)(v4 + 23) < 0)
        {
          **(_BYTE **)v4 = 0;
          *(_QWORD *)(v4 + 8) = 0;
        }
        else
        {
          *(_BYTE *)v4 = 0;
          *(_BYTE *)(v4 + 23) = 0;
        }
      }
    }
    if ((*(_BYTE *)(this + 48) & 8) != 0)
    {
      v5 = *(_QWORD *)(this + 32);
      if (v5 != v2)
      {
        if (*(char *)(v5 + 23) < 0)
        {
          **(_BYTE **)v5 = 0;
          *(_QWORD *)(v5 + 8) = 0;
        }
        else
        {
          *(_BYTE *)v5 = 0;
          *(_BYTE *)(v5 + 23) = 0;
        }
      }
    }
    *(_DWORD *)(this + 28) = 1;
    *(_BYTE *)(this + 40) = 0;
  }
  *(_DWORD *)(this + 48) = 0;
  return this;
}

uint64_t CLMicroLocationProto::RetrievedLoi::MergePartialFromCodedStream(CLMicroLocationProto::RetrievedLoi *this, wireless_diagnostics::google::protobuf::io::CodedInputStream *a2)
{
  uint64_t v4;
  char *v5;
  uint64_t TagFallback;
  int v7;
  char *v8;
  unsigned int v9;
  unint64_t v10;
  char *v11;
  unint64_t v12;
  char *v13;
  BOOL v14;
  _BYTE *v15;
  _QWORD *v16;
  _BYTE *v17;
  _QWORD *v18;
  _BYTE *v19;
  _QWORD *v20;
  _BYTE *v21;
  unsigned int v22;
  _BYTE *v23;
  unsigned int v24;
  unsigned __int8 *v25;
  uint64_t result;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;

  v4 = MEMORY[0x24BEDD958];
  while (2)
  {
    v5 = (char *)*((_QWORD *)a2 + 1);
    if ((unint64_t)v5 >= *((_QWORD *)a2 + 2) || *v5 < 0)
    {
      TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(a2);
      *((_DWORD *)a2 + 8) = TagFallback;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    else
    {
      TagFallback = *v5;
      *((_DWORD *)a2 + 8) = TagFallback;
      *((_QWORD *)a2 + 1) = v5 + 1;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    switch(TagFallback >> 3)
    {
      case 1u:
        v7 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_23;
        v28 = 0;
        v8 = (char *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v8 < *((_QWORD *)a2 + 2) && (*v8 & 0x80000000) == 0)
        {
          v9 = *v8;
          *((_QWORD *)a2 + 1) = v8 + 1;
LABEL_28:
          if (v9 - 31 < 0x19 || (v9 <= 0xE ? (v14 = ((1 << v9) & 0x76B6) == 0) : (v14 = 1), !v14))
          {
            if (v9 - 31 >= 0x19 && (v9 > 0xE || ((1 << v9) & 0x76B6) == 0))
              CLMicroLocationProto::RetrievedLoi::MergeFrom();
            *((_DWORD *)this + 12) |= 1u;
            *((_DWORD *)this + 6) = v9;
          }
          v15 = (_BYTE *)*((_QWORD *)a2 + 1);
          if ((unint64_t)v15 < *((_QWORD *)a2 + 2) && *v15 == 18)
          {
            *((_QWORD *)a2 + 1) = v15 + 1;
            goto LABEL_40;
          }
          continue;
        }
        result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v28);
        if ((_DWORD)result)
        {
          v9 = v28;
          goto LABEL_28;
        }
        break;
      case 2u:
        v7 = TagFallback & 7;
        if (v7 != 2)
          goto LABEL_23;
LABEL_40:
        *((_DWORD *)this + 12) |= 2u;
        if (*((_QWORD *)this + 1) == v4)
        {
          v16 = (_QWORD *)operator new();
          v16[1] = 0;
          v16[2] = 0;
          *v16 = 0;
          *((_QWORD *)this + 1) = v16;
        }
        result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadBytes();
        if (!(_DWORD)result)
          return result;
        v17 = (_BYTE *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v17 >= *((_QWORD *)a2 + 2) || *v17 != 26)
          continue;
        *((_QWORD *)a2 + 1) = v17 + 1;
LABEL_46:
        *((_DWORD *)this + 12) |= 4u;
        if (*((_QWORD *)this + 2) == v4)
        {
          v18 = (_QWORD *)operator new();
          v18[1] = 0;
          v18[2] = 0;
          *v18 = 0;
          *((_QWORD *)this + 2) = v18;
        }
        result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString();
        if (!(_DWORD)result)
          return result;
        v19 = (_BYTE *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v19 >= *((_QWORD *)a2 + 2) || *v19 != 34)
          continue;
        *((_QWORD *)a2 + 1) = v19 + 1;
LABEL_52:
        *((_DWORD *)this + 12) |= 8u;
        if (*((_QWORD *)this + 4) == v4)
        {
          v20 = (_QWORD *)operator new();
          v20[1] = 0;
          v20[2] = 0;
          *v20 = 0;
          *((_QWORD *)this + 4) = v20;
        }
        result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadBytes();
        if (!(_DWORD)result)
          return result;
        v21 = (_BYTE *)*((_QWORD *)a2 + 1);
        v10 = *((_QWORD *)a2 + 2);
        if ((unint64_t)v21 >= v10 || *v21 != 40)
          continue;
        v11 = v21 + 1;
        *((_QWORD *)a2 + 1) = v11;
LABEL_58:
        v27 = 0;
        if ((unint64_t)v11 >= v10 || *v11 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v27);
          if (!(_DWORD)result)
            return result;
          v22 = v27;
        }
        else
        {
          v22 = *v11;
          *((_QWORD *)a2 + 1) = v11 + 1;
        }
        if (v22 - 1 <= 0xB)
        {
          *((_DWORD *)this + 12) |= 0x10u;
          *((_DWORD *)this + 7) = v22;
        }
        v23 = (_BYTE *)*((_QWORD *)a2 + 1);
        v12 = *((_QWORD *)a2 + 2);
        if ((unint64_t)v23 >= v12 || *v23 != 48)
          continue;
        v13 = v23 + 1;
        *((_QWORD *)a2 + 1) = v13;
LABEL_68:
        v29 = 0;
        if ((unint64_t)v13 >= v12 || *v13 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v29);
          if (!(_DWORD)result)
            return result;
          v24 = v29;
          v25 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
          v12 = *((_QWORD *)a2 + 2);
        }
        else
        {
          v24 = *v13;
          v25 = (unsigned __int8 *)(v13 + 1);
          *((_QWORD *)a2 + 1) = v25;
        }
        *((_BYTE *)this + 40) = v24 != 0;
        *((_DWORD *)this + 12) |= 0x20u;
        if (v25 != (unsigned __int8 *)v12 || !*((_DWORD *)a2 + 11) && *((_DWORD *)a2 + 6) != *((_DWORD *)a2 + 10))
          continue;
        *((_DWORD *)a2 + 8) = 0;
        result = 1;
        *((_BYTE *)a2 + 36) = 1;
        return result;
      case 3u:
        v7 = TagFallback & 7;
        if (v7 == 2)
          goto LABEL_46;
        goto LABEL_23;
      case 4u:
        v7 = TagFallback & 7;
        if (v7 == 2)
          goto LABEL_52;
        goto LABEL_23;
      case 5u:
        v7 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_23;
        v11 = (char *)*((_QWORD *)a2 + 1);
        v10 = *((_QWORD *)a2 + 2);
        goto LABEL_58;
      case 6u:
        v7 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_23;
        v13 = (char *)*((_QWORD *)a2 + 1);
        v12 = *((_QWORD *)a2 + 2);
        goto LABEL_68;
      default:
        v7 = TagFallback & 7;
LABEL_23:
        if (v7 == 4)
          return 1;
        if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(a2, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback) & 1) != 0)continue;
        return 0;
    }
    return result;
  }
}

uint64_t CLMicroLocationProto::RetrievedLoi::SerializeWithCachedSizes(uint64_t this, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  int v6;

  v5 = this;
  v6 = *(_DWORD *)(this + 48);
  if ((v6 & 1) != 0)
  {
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(unsigned int *)(this + 24), (uint64_t)a2, a4);
    v6 = *(_DWORD *)(v5 + 48);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0)
        goto LABEL_4;
      goto LABEL_10;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBytes();
  v6 = *(_DWORD *)(v5 + 48);
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0)
      goto LABEL_5;
    goto LABEL_11;
  }
LABEL_10:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString();
  v6 = *(_DWORD *)(v5 + 48);
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_12;
  }
LABEL_11:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBytes();
  v6 = *(_DWORD *)(v5 + 48);
  if ((v6 & 0x10) == 0)
  {
LABEL_6:
    if ((v6 & 0x20) == 0)
      return this;
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)6, *(unsigned __int8 *)(v5 + 40), (uint64_t)a2, a4);
  }
LABEL_12:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5, *(unsigned int *)(v5 + 28), (uint64_t)a2, a4);
  if ((*(_DWORD *)(v5 + 48) & 0x20) != 0)
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)6, *(unsigned __int8 *)(v5 + 40), (uint64_t)a2, a4);
  return this;
}

uint64_t CLMicroLocationProto::RetrievedLoi::ByteSize(CLMicroLocationProto::RetrievedLoi *this)
{
  int v2;
  unsigned int v3;
  uint64_t result;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v5;
  uint64_t v6;
  int v7;
  char v8;
  uint64_t v9;
  unint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  char v14;
  uint64_t v15;
  unint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  char v20;
  uint64_t v21;
  unint64_t v22;
  int v23;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v24;
  int v25;

  LOBYTE(v2) = *((_BYTE *)this + 48);
  if (!(_BYTE)v2)
  {
    result = 0;
    goto LABEL_53;
  }
  if ((*((_BYTE *)this + 48) & 1) != 0)
  {
    v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 6);
    if ((v5 & 0x80000000) != 0)
    {
      v3 = 11;
      if ((v2 & 2) == 0)
        goto LABEL_22;
    }
    else if (v5 >= 0x80)
    {
      v3 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v5) + 1;
      v2 = *((_DWORD *)this + 12);
      if ((v2 & 2) == 0)
        goto LABEL_22;
    }
    else
    {
      v3 = 2;
      if ((v2 & 2) == 0)
        goto LABEL_22;
    }
  }
  else
  {
    v3 = 0;
    if ((*((_BYTE *)this + 48) & 2) == 0)
      goto LABEL_22;
  }
  v6 = *((_QWORD *)this + 1);
  v7 = *(unsigned __int8 *)(v6 + 23);
  v8 = v7;
  v9 = *(_QWORD *)(v6 + 8);
  if ((v7 & 0x80u) == 0)
    v10 = *(unsigned __int8 *)(v6 + 23);
  else
    v10 = v9;
  if (v10 >= 0x80)
  {
    v11 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v10);
    v7 = *(unsigned __int8 *)(v6 + 23);
    v9 = *(_QWORD *)(v6 + 8);
    v2 = *((_DWORD *)this + 12);
    v8 = *(_BYTE *)(v6 + 23);
  }
  else
  {
    v11 = 1;
  }
  if (v8 < 0)
    v7 = v9;
  v3 += v11 + v7 + 1;
LABEL_22:
  if ((v2 & 4) == 0)
  {
    if ((v2 & 8) == 0)
      goto LABEL_24;
LABEL_35:
    v18 = *((_QWORD *)this + 4);
    v19 = *(unsigned __int8 *)(v18 + 23);
    v20 = v19;
    v21 = *(_QWORD *)(v18 + 8);
    if ((v19 & 0x80u) == 0)
      v22 = *(unsigned __int8 *)(v18 + 23);
    else
      v22 = v21;
    if (v22 >= 0x80)
    {
      v23 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v22);
      v19 = *(unsigned __int8 *)(v18 + 23);
      v21 = *(_QWORD *)(v18 + 8);
      v2 = *((_DWORD *)this + 12);
      v20 = *(_BYTE *)(v18 + 23);
    }
    else
    {
      v23 = 1;
    }
    if (v20 < 0)
      v19 = v21;
    v3 += v23 + v19 + 1;
    if ((v2 & 0x10) == 0)
      goto LABEL_50;
    goto LABEL_44;
  }
  v12 = *((_QWORD *)this + 2);
  v13 = *(unsigned __int8 *)(v12 + 23);
  v14 = v13;
  v15 = *(_QWORD *)(v12 + 8);
  if ((v13 & 0x80u) == 0)
    v16 = *(unsigned __int8 *)(v12 + 23);
  else
    v16 = v15;
  if (v16 >= 0x80)
  {
    v17 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v16);
    v13 = *(unsigned __int8 *)(v12 + 23);
    v15 = *(_QWORD *)(v12 + 8);
    v2 = *((_DWORD *)this + 12);
    v14 = *(_BYTE *)(v12 + 23);
  }
  else
  {
    v17 = 1;
  }
  if (v14 < 0)
    v13 = v15;
  v3 += v17 + v13 + 1;
  if ((v2 & 8) != 0)
    goto LABEL_35;
LABEL_24:
  if ((v2 & 0x10) != 0)
  {
LABEL_44:
    v24 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 7);
    if ((v24 & 0x80000000) != 0)
    {
      v25 = 11;
    }
    else if (v24 >= 0x80)
    {
      v25 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v24) + 1;
      v2 = *((_DWORD *)this + 12);
    }
    else
    {
      v25 = 2;
    }
    v3 += v25;
  }
LABEL_50:
  if ((v2 & 0x20) != 0)
    result = v3 + 2;
  else
    result = v3;
LABEL_53:
  *((_DWORD *)this + 11) = result;
  return result;
}

void CLMicroLocationProto::RetrievedLoi::CheckTypeAndMergeFrom(CLMicroLocationProto::RetrievedLoi *this, const wireless_diagnostics::google::protobuf::MessageLite *lpsrc)
{
  uint64_t v4;
  uint64_t v5;

  CLMicroLocationProto::RetrievedLoi::MergeFrom(this, lpsrc);
}

void CLMicroLocationProto::RetrievedLoi::CopyFrom(CLMicroLocationProto::RetrievedLoi *this, const CLMicroLocationProto::RetrievedLoi *a2)
{
  if (a2 != this)
  {
    (*(void (**)(CLMicroLocationProto::RetrievedLoi *))(*(_QWORD *)this + 32))(this);
    CLMicroLocationProto::RetrievedLoi::MergeFrom(this, a2);
  }
}

uint64_t CLMicroLocationProto::RetrievedLoi::IsInitialized(CLMicroLocationProto::RetrievedLoi *this)
{
  return 1;
}

_QWORD *CLMicroLocationProto::RetrievedLoi::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CLMicroLocationProto.RetrievedLoi");
}

uint64_t CLMicroLocationProto::ReceivedEvent::default_instance(CLMicroLocationProto::ReceivedEvent *this)
{
  CLMicroLocationProto::protobuf_AddDesc_microlocation_2eproto(this);
  return CLMicroLocationProto::ReceivedEvent::default_instance_;
}

double CLMicroLocationProto::ReceivedEvent::New(CLMicroLocationProto::ReceivedEvent *this)
{
  uint64_t v1;
  double result;

  v1 = operator new();
  *(_QWORD *)v1 = &off_2511D8090;
  result = 0.0;
  *(_OWORD *)(v1 + 24) = 0u;
  *(_OWORD *)(v1 + 40) = 0u;
  *(_OWORD *)(v1 + 56) = 0u;
  *(_OWORD *)(v1 + 72) = 0u;
  *(_OWORD *)(v1 + 88) = 0u;
  *(_OWORD *)(v1 + 104) = 0u;
  *(_OWORD *)(v1 + 120) = 0u;
  *(_OWORD *)(v1 + 136) = 0u;
  *(_OWORD *)(v1 + 152) = 0u;
  *(_OWORD *)(v1 + 168) = 0u;
  *(_OWORD *)(v1 + 184) = 0u;
  *(_OWORD *)(v1 + 200) = 0u;
  *(_OWORD *)(v1 + 216) = 0u;
  *(_OWORD *)(v1 + 232) = 0u;
  *(_OWORD *)(v1 + 248) = 0u;
  *(_DWORD *)(v1 + 296) = 0;
  *(_OWORD *)(v1 + 8) = 0u;
  *(_OWORD *)(v1 + 264) = 0u;
  *(_OWORD *)(v1 + 280) = 0u;
  return result;
}

uint64_t CLMicroLocationProto::ReceivedEvent::Clear(uint64_t this)
{
  uint64_t v1;
  unsigned int *v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v1 = this;
  v2 = (unsigned int *)(this + 292);
  v3 = *(_DWORD *)(this + 292);
  if ((_BYTE)v3)
  {
    if ((v3 & 1) != 0)
    {
      this = *(_QWORD *)(this + 8);
      if (this)
      {
        this = CLMicroLocationProto::ReceivedEventAction::Clear(this);
        v3 = *v2;
      }
    }
    if ((v3 & 2) != 0)
    {
      this = *(_QWORD *)(v1 + 16);
      if (this)
      {
        this = CLMicroLocationProto::AppLaunch::Clear(this);
        v3 = *v2;
      }
    }
    if ((v3 & 4) != 0)
    {
      this = *(_QWORD *)(v1 + 24);
      if (this)
      {
        this = CLMicroLocationProto::BacklightOn::Clear(this);
        v3 = *v2;
      }
    }
    if ((v3 & 8) != 0)
    {
      v4 = *(_QWORD *)(v1 + 32);
      if (v4)
      {
        if (*(_BYTE *)(v4 + 16))
          *(_DWORD *)(v4 + 8) = 5;
        *(_DWORD *)(v4 + 16) = 0;
        v3 = *v2;
      }
    }
    if ((v3 & 0x10) != 0)
    {
      v5 = *(_QWORD *)(v1 + 40);
      if (v5)
      {
        if (*(_BYTE *)(v5 + 16))
          *(_DWORD *)(v5 + 8) = 7;
        *(_DWORD *)(v5 + 16) = 0;
        v3 = *v2;
      }
    }
    if ((v3 & 0x20) != 0)
    {
      this = *(_QWORD *)(v1 + 48);
      if (this)
      {
        this = CLMicroLocationProto::HomeKitAccessory::Clear(this);
        v3 = *v2;
      }
    }
    if ((v3 & 0x40) != 0)
    {
      this = *(_QWORD *)(v1 + 56);
      if (this)
      {
        this = CLMicroLocationProto::HomeKitScene::Clear(this);
        v3 = *v2;
      }
    }
    if ((v3 & 0x80) != 0)
    {
      this = *(_QWORD *)(v1 + 64);
      if (this)
      {
        this = CLMicroLocationProto::NowPlaying::Clear(this);
        v3 = *v2;
      }
    }
  }
  if ((v3 & 0xFF00) != 0)
  {
    if ((v3 & 0x100) != 0)
    {
      this = *(_QWORD *)(v1 + 72);
      if (this)
      {
        this = CLMicroLocationProto::RecordingRequest::Clear(this);
        v3 = *v2;
      }
    }
    if ((v3 & 0x200) != 0)
    {
      this = *(_QWORD *)(v1 + 80);
      if (this)
      {
        this = CLMicroLocationProto::TruthLabelDonation::Clear(this);
        v3 = *v2;
      }
    }
    if ((v3 & 0x400) != 0)
    {
      v6 = *(_QWORD *)(v1 + 88);
      if (v6)
      {
        if (*(_BYTE *)(v6 + 16))
          *(_DWORD *)(v6 + 8) = 31;
        *(_DWORD *)(v6 + 16) = 0;
        v3 = *v2;
      }
    }
    if ((v3 & 0x800) != 0)
    {
      v7 = *(_QWORD *)(v1 + 96);
      if (v7)
      {
        if (*(_BYTE *)(v7 + 16))
          *(_DWORD *)(v7 + 8) = 32;
        *(_DWORD *)(v7 + 16) = 0;
        v3 = *v2;
      }
    }
    if ((v3 & 0x1000) != 0)
    {
      v8 = *(_QWORD *)(v1 + 104);
      if (v8)
      {
        if (*(_BYTE *)(v8 + 16))
          *(_DWORD *)(v8 + 8) = 33;
        *(_DWORD *)(v8 + 16) = 0;
        v3 = *v2;
      }
    }
    if ((v3 & 0x2000) != 0)
    {
      v9 = *(_QWORD *)(v1 + 112);
      if (v9)
      {
        if (*(_BYTE *)(v9 + 16))
          *(_DWORD *)(v9 + 8) = 34;
        *(_DWORD *)(v9 + 16) = 0;
        v3 = *v2;
      }
    }
    if ((v3 & 0x4000) != 0)
    {
      v10 = *(_QWORD *)(v1 + 120);
      if (v10)
      {
        if (*(_BYTE *)(v10 + 16))
          *(_DWORD *)(v10 + 8) = 35;
        *(_DWORD *)(v10 + 16) = 0;
        v3 = *v2;
      }
    }
    if ((v3 & 0x8000) != 0)
    {
      this = *(_QWORD *)(v1 + 128);
      if (this)
      {
        this = CLMicroLocationProto::ServiceCreate::Clear(this);
        v3 = *v2;
      }
    }
  }
  if ((v3 & 0xFF0000) != 0)
  {
    if ((v3 & 0x10000) != 0)
    {
      this = *(_QWORD *)(v1 + 136);
      if (this)
      {
        this = CLMicroLocationProto::ServiceDelete::Clear(this);
        v3 = *v2;
      }
    }
    if ((v3 & 0x20000) != 0)
    {
      this = *(_QWORD *)(v1 + 144);
      if (this)
      {
        this = CLMicroLocationProto::ServiceConnect::Clear(this);
        v3 = *v2;
      }
    }
    if ((v3 & 0x40000) != 0)
    {
      this = *(_QWORD *)(v1 + 152);
      if (this)
      {
        this = CLMicroLocationProto::ServiceDisconnect::Clear(this);
        v3 = *v2;
      }
    }
    if ((v3 & 0x80000) != 0)
    {
      this = *(_QWORD *)(v1 + 160);
      if (this)
      {
        this = CLMicroLocationProto::ServiceStartUpdating::Clear(this);
        v3 = *v2;
      }
    }
    if ((v3 & 0x100000) != 0)
    {
      this = *(_QWORD *)(v1 + 168);
      if (this)
      {
        this = CLMicroLocationProto::ServiceStopUpdating::Clear(this);
        v3 = *v2;
      }
    }
    if ((v3 & 0x200000) != 0)
    {
      this = *(_QWORD *)(v1 + 176);
      if (this)
      {
        this = CLMicroLocationProto::RequestObservation::Clear(this);
        v3 = *v2;
      }
    }
    if ((v3 & 0x400000) != 0)
    {
      this = *(_QWORD *)(v1 + 184);
      if (this)
      {
        this = CLMicroLocationProto::RequestPrediction::Clear(this);
        v3 = *v2;
      }
    }
    if ((v3 & 0x800000) != 0)
    {
      this = *(_QWORD *)(v1 + 192);
      if (this)
      {
        this = CLMicroLocationProto::MiloInit::Clear(this);
        v3 = *v2;
      }
    }
  }
  if (HIBYTE(v3))
  {
    if ((v3 & 0x1000000) != 0)
    {
      this = *(_QWORD *)(v1 + 200);
      if (this)
      {
        this = CLMicroLocationProto::MotionEvent::Clear(this);
        v3 = *v2;
      }
    }
    if ((v3 & 0x2000000) != 0)
    {
      this = *(_QWORD *)(v1 + 208);
      if (this)
      {
        this = CLMicroLocationProto::LegacyThrottle::Clear(this);
        v3 = *v2;
      }
    }
    if ((v3 & 0x4000000) != 0)
    {
      this = *(_QWORD *)(v1 + 216);
      if (this)
      {
        this = CLMicroLocationProto::RetrievedLoi::Clear(this);
        v3 = *v2;
      }
    }
    if ((v3 & 0x8000000) != 0)
    {
      this = *(_QWORD *)(v1 + 224);
      if (this)
      {
        this = CLMicroLocationProto::TriggerEvent::Clear(this);
        v3 = *v2;
      }
    }
    if ((v3 & 0x10000000) != 0)
    {
      v11 = *(_QWORD *)(v1 + 232);
      if (v11)
      {
        if (*(_BYTE *)(v11 + 24))
        {
          *(_QWORD *)(v11 + 8) = 0x100000031;
          *(_DWORD *)(v11 + 16) = 0;
        }
        *(_DWORD *)(v11 + 24) = 0;
        v3 = *v2;
      }
    }
    if ((v3 & 0x20000000) != 0)
    {
      v12 = *(_QWORD *)(v1 + 240);
      if (v12)
      {
        if (*(_BYTE *)(v12 + 20))
        {
          *(_DWORD *)(v12 + 8) = 50;
          *(_BYTE *)(v12 + 12) = 0;
        }
        *(_DWORD *)(v12 + 20) = 0;
        v3 = *v2;
      }
    }
    if ((v3 & 0x40000000) != 0)
    {
      v13 = *(_QWORD *)(v1 + 248);
      if (v13)
      {
        v14 = *(_DWORD *)(v13 + 24);
        if ((_BYTE)v14)
        {
          *(_QWORD *)(v13 + 8) = 51;
          *(_DWORD *)(v13 + 15) = 0;
        }
        if ((v14 & 0xFF00) != 0)
          *(_BYTE *)(v13 + 19) = 0;
        *(_DWORD *)(v13 + 24) = 0;
        v3 = *v2;
      }
    }
    if ((v3 & 0x80000000) != 0)
    {
      v15 = *(_QWORD *)(v1 + 256);
      if (v15)
      {
        if (*(_BYTE *)(v15 + 20))
        {
          *(_DWORD *)(v15 + 8) = 52;
          *(_BYTE *)(v15 + 12) = 0;
        }
        *(_DWORD *)(v15 + 20) = 0;
      }
    }
  }
  LOBYTE(v16) = *(_BYTE *)(v1 + 296);
  if ((_BYTE)v16)
  {
    if ((*(_BYTE *)(v1 + 296) & 1) != 0)
    {
      v17 = *(_QWORD *)(v1 + 264);
      if (v17)
      {
        if (*(_BYTE *)(v17 + 16))
          *(_DWORD *)(v17 + 8) = 53;
        *(_DWORD *)(v17 + 16) = 0;
        v16 = *(_DWORD *)(v1 + 296);
      }
    }
    if ((v16 & 2) != 0)
    {
      v18 = *(_QWORD *)(v1 + 272);
      if (v18)
      {
        if (*(_BYTE *)(v18 + 16))
          *(_DWORD *)(v18 + 8) = 54;
        *(_DWORD *)(v18 + 16) = 0;
        v16 = *(_DWORD *)(v1 + 296);
      }
    }
    if ((v16 & 4) != 0)
    {
      v19 = *(_QWORD *)(v1 + 280);
      if (v19)
      {
        if (*(_BYTE *)(v19 + 16))
          *(_DWORD *)(v19 + 8) = 55;
        *(_DWORD *)(v19 + 16) = 0;
      }
    }
  }
  *(_QWORD *)v2 = 0;
  return this;
}

uint64_t CLMicroLocationProto::TriggerEvent::Clear(uint64_t this)
{
  int v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = *(_DWORD *)(this + 84);
  if ((_BYTE)v1)
  {
    *(_DWORD *)(this + 24) = 48;
    *(_QWORD *)(this + 8) = 0;
    *(_BYTE *)(this + 28) = 0;
    v2 = MEMORY[0x24BEDD958];
    if ((v1 & 8) != 0)
    {
      v3 = *(_QWORD *)(this + 16);
      if (v3 != MEMORY[0x24BEDD958])
      {
        if (*(char *)(v3 + 23) < 0)
        {
          **(_BYTE **)v3 = 0;
          *(_QWORD *)(v3 + 8) = 0;
        }
        else
        {
          *(_BYTE *)v3 = 0;
          *(_BYTE *)(v3 + 23) = 0;
        }
      }
    }
    if ((*(_BYTE *)(this + 84) & 0x10) != 0)
    {
      v4 = *(_QWORD *)(this + 32);
      if (v4 != v2)
      {
        if (*(char *)(v4 + 23) < 0)
        {
          **(_BYTE **)v4 = 0;
          *(_QWORD *)(v4 + 8) = 0;
        }
        else
        {
          *(_BYTE *)v4 = 0;
          *(_BYTE *)(v4 + 23) = 0;
        }
      }
    }
    if ((*(_BYTE *)(this + 84) & 0x20) != 0)
    {
      v5 = *(_QWORD *)(this + 40);
      if (v5 != v2)
      {
        if (*(char *)(v5 + 23) < 0)
        {
          **(_BYTE **)v5 = 0;
          *(_QWORD *)(v5 + 8) = 0;
        }
        else
        {
          *(_BYTE *)v5 = 0;
          *(_BYTE *)(v5 + 23) = 0;
        }
      }
    }
    if ((*(_BYTE *)(this + 84) & 0x40) != 0)
    {
      v6 = *(_QWORD *)(this + 48);
      if (v6 != v2)
      {
        if (*(char *)(v6 + 23) < 0)
        {
          **(_BYTE **)v6 = 0;
          *(_QWORD *)(v6 + 8) = 0;
        }
        else
        {
          *(_BYTE *)v6 = 0;
          *(_BYTE *)(v6 + 23) = 0;
        }
      }
    }
    *(_BYTE *)(this + 29) = 0;
    v1 = *(_DWORD *)(this + 84);
  }
  if ((v1 & 0xFF00) != 0)
  {
    *(_QWORD *)(this + 56) = 0;
    *(_DWORD *)(this + 72) = 0;
    if ((v1 & 0x800) != 0)
    {
      v7 = *(_QWORD *)(this + 64);
      if (v7 != MEMORY[0x24BEDD958])
      {
        if (*(char *)(v7 + 23) < 0)
        {
          **(_BYTE **)v7 = 0;
          *(_QWORD *)(v7 + 8) = 0;
        }
        else
        {
          *(_BYTE *)v7 = 0;
          *(_BYTE *)(v7 + 23) = 0;
        }
      }
    }
    *(_DWORD *)(this + 76) = 0;
  }
  *(_DWORD *)(this + 84) = 0;
  return this;
}

uint64_t CLMicroLocationProto::LegacyClientStatusUpdate::Clear(uint64_t this)
{
  if (*(_BYTE *)(this + 24))
  {
    *(_QWORD *)(this + 8) = 0x100000031;
    *(_DWORD *)(this + 16) = 0;
  }
  *(_DWORD *)(this + 24) = 0;
  return this;
}

uint64_t CLMicroLocationProto::SpectatingMotionUpdate::Clear(uint64_t this)
{
  if (*(_BYTE *)(this + 20))
  {
    *(_DWORD *)(this + 8) = 50;
    *(_BYTE *)(this + 12) = 0;
  }
  *(_DWORD *)(this + 20) = 0;
  return this;
}

uint64_t CLMicroLocationProto::EnabledStateUpdate::Clear(uint64_t this)
{
  int v1;

  v1 = *(_DWORD *)(this + 24);
  if ((_BYTE)v1)
  {
    *(_QWORD *)(this + 8) = 51;
    *(_DWORD *)(this + 15) = 0;
  }
  if ((v1 & 0xFF00) != 0)
    *(_BYTE *)(this + 19) = 0;
  *(_DWORD *)(this + 24) = 0;
  return this;
}

uint64_t CLMicroLocationProto::ScreenStateUpdate::Clear(uint64_t this)
{
  if (*(_BYTE *)(this + 20))
  {
    *(_DWORD *)(this + 8) = 52;
    *(_BYTE *)(this + 12) = 0;
  }
  *(_DWORD *)(this + 20) = 0;
  return this;
}

uint64_t CLMicroLocationProto::CloudBackupExport::Clear(uint64_t this)
{
  if (*(_BYTE *)(this + 16))
    *(_DWORD *)(this + 8) = 53;
  *(_DWORD *)(this + 16) = 0;
  return this;
}

uint64_t CLMicroLocationProto::CloudBackupImport::Clear(uint64_t this)
{
  if (*(_BYTE *)(this + 16))
    *(_DWORD *)(this + 8) = 54;
  *(_DWORD *)(this + 16) = 0;
  return this;
}

uint64_t CLMicroLocationProto::DataMigration::Clear(uint64_t this)
{
  if (*(_BYTE *)(this + 16))
    *(_DWORD *)(this + 8) = 55;
  *(_DWORD *)(this + 16) = 0;
  return this;
}

uint64_t CLMicroLocationProto::ReceivedEvent::MergePartialFromCodedStream(CLMicroLocationProto::ReceivedEvent *this, wireless_diagnostics::google::protobuf::io::CodedInputStream *a2)
{
  char *v4;
  uint64_t TagFallback;
  int v6;
  CLMicroLocationProto::ReceivedEventAction *v7;
  uint64_t v8;
  char *v9;
  int v10;
  int v11;
  int v12;
  BOOL v13;
  int v14;
  _BYTE *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  int v19;
  int v20;
  int v21;
  int v22;
  _BYTE *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  int v27;
  int v28;
  int v29;
  int v30;
  _BYTE *v31;
  uint64_t v32;
  char *v33;
  int v34;
  int v35;
  int v36;
  int v37;
  _BYTE *v38;
  uint64_t v39;
  char *v40;
  int v41;
  int v42;
  int v43;
  int v44;
  _BYTE *v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  int v49;
  int v50;
  int v51;
  int v52;
  _BYTE *v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  int v57;
  int v58;
  int v59;
  int v60;
  _BYTE *v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  int v65;
  int v66;
  int v67;
  int v68;
  _BYTE *v69;
  CLMicroLocationProto::RecordingRequest *v70;
  uint64_t v71;
  char *v72;
  int v73;
  int v74;
  int v75;
  int v76;
  _BYTE *v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  int v81;
  int v82;
  int v83;
  int v84;
  _BYTE *v85;
  uint64_t v86;
  char *v87;
  int v88;
  int v89;
  int v90;
  int v91;
  _BYTE *v92;
  uint64_t v93;
  char *v94;
  int v95;
  int v96;
  int v97;
  int v98;
  unsigned __int8 *v99;
  uint64_t v100;
  char *v101;
  int v102;
  int v103;
  int v104;
  int v105;
  unsigned __int8 *v106;
  uint64_t v107;
  char *v108;
  int v109;
  int v110;
  int v111;
  int v112;
  unsigned __int8 *v113;
  uint64_t v114;
  char *v115;
  int v116;
  int v117;
  int v118;
  int v119;
  unsigned __int8 *v120;
  uint64_t v121;
  uint64_t v122;
  char *v123;
  int v124;
  int v125;
  int v126;
  int v127;
  unsigned __int8 *v128;
  uint64_t v129;
  uint64_t v130;
  char *v131;
  int v132;
  int v133;
  int v134;
  int v135;
  unsigned __int8 *v136;
  uint64_t v137;
  uint64_t v138;
  char *v139;
  int v140;
  int v141;
  int v142;
  int v143;
  unsigned __int8 *v144;
  uint64_t v145;
  uint64_t v146;
  char *v147;
  int v148;
  int v149;
  int v150;
  int v151;
  unsigned __int8 *v152;
  uint64_t v153;
  uint64_t v154;
  char *v155;
  int v156;
  int v157;
  int v158;
  int v159;
  unsigned __int8 *v160;
  uint64_t v161;
  uint64_t v162;
  char *v163;
  int v164;
  int v165;
  int v166;
  int v167;
  unsigned __int8 *v168;
  uint64_t v169;
  uint64_t v170;
  char *v171;
  int v172;
  int v173;
  int v174;
  int v175;
  unsigned __int8 *v176;
  uint64_t v177;
  uint64_t v178;
  char *v179;
  int v180;
  int v181;
  int v182;
  int v183;
  unsigned __int8 *v184;
  uint64_t v185;
  uint64_t v186;
  char *v187;
  int v188;
  int v189;
  int v190;
  int v191;
  unsigned __int8 *v192;
  CLMicroLocationProto::MotionEvent *v193;
  uint64_t v194;
  char *v195;
  int v196;
  int v197;
  int v198;
  int v199;
  unsigned __int8 *v200;
  uint64_t v201;
  uint64_t v202;
  char *v203;
  int v204;
  int v205;
  int v206;
  int v207;
  unsigned __int8 *v208;
  uint64_t v209;
  uint64_t v210;
  char *v211;
  int v212;
  int v213;
  int v214;
  int v215;
  unsigned __int8 *v216;
  uint64_t v217;
  uint64_t v218;
  char *v219;
  int v220;
  int v221;
  int v222;
  int v223;
  unsigned __int8 *v224;
  uint64_t v225;
  char *v226;
  int v227;
  int v228;
  int v229;
  int v230;
  unsigned __int8 *v231;
  uint64_t v232;
  char *v233;
  int v234;
  int v235;
  int v236;
  int v237;
  unsigned __int8 *v238;
  uint64_t v239;
  char *v240;
  int v241;
  int v242;
  int v243;
  int v244;
  unsigned __int8 *v245;
  uint64_t v246;
  char *v247;
  int v248;
  int v249;
  int v250;
  int v251;
  unsigned __int8 *v252;
  uint64_t v253;
  char *v254;
  int v255;
  int v256;
  int v257;
  int v258;
  unsigned __int8 *v259;
  uint64_t v260;
  char *v261;
  int v262;
  int v263;
  int v264;
  int v265;
  unsigned __int8 *v266;
  uint64_t v267;
  char *v268;
  int v269;
  int v270;
  int v271;
  int v272;
  uint64_t result;
  unsigned int v274;

  while (1)
  {
    v4 = (char *)*((_QWORD *)a2 + 1);
    if ((unint64_t)v4 < *((_QWORD *)a2 + 2) && (*v4 & 0x80000000) == 0)
    {
      TagFallback = *v4;
      *((_DWORD *)a2 + 8) = TagFallback;
      *((_QWORD *)a2 + 1) = v4 + 1;
      if (!(_DWORD)TagFallback)
        return 1;
      goto LABEL_6;
    }
    TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(a2);
    *((_DWORD *)a2 + 8) = TagFallback;
    if (!(_DWORD)TagFallback)
      return 1;
LABEL_6:
    switch(TagFallback >> 3)
    {
      case 1u:
        v6 = TagFallback & 7;
        if (v6 != 2)
          goto LABEL_81;
        *((_DWORD *)this + 73) |= 1u;
        v7 = (CLMicroLocationProto::ReceivedEventAction *)*((_QWORD *)this + 1);
        if (!v7)
        {
          v7 = (CLMicroLocationProto::ReceivedEventAction *)operator new();
          *(_QWORD *)v7 = &off_2511D7370;
          *((_QWORD *)v7 + 1) = 0x100000001;
          v8 = MEMORY[0x24BEDD958];
          *((_QWORD *)v7 + 2) = MEMORY[0x24BEDD958];
          *((_QWORD *)v7 + 3) = v8;
          *((_QWORD *)v7 + 4) = v8;
          *((_QWORD *)v7 + 5) = 0;
          *((_QWORD *)this + 1) = v7;
        }
        v274 = 0;
        v9 = (char *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v9 >= *((_QWORD *)a2 + 2) || *v9 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v274))return 0;
        }
        else
        {
          v274 = *v9;
          *((_QWORD *)a2 + 1) = v9 + 1;
        }
        v10 = *((_DWORD *)a2 + 14);
        v11 = *((_DWORD *)a2 + 15);
        *((_DWORD *)a2 + 14) = v10 + 1;
        if (v10 >= v11)
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(a2);
        if (!CLMicroLocationProto::ReceivedEventAction::MergePartialFromCodedStream(v7, a2)
          || !*((_BYTE *)a2 + 36))
        {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(a2);
        v12 = *((_DWORD *)a2 + 14);
        v13 = __OFSUB__(v12, 1);
        v14 = v12 - 1;
        if (v14 < 0 == v13)
          *((_DWORD *)a2 + 14) = v14;
        v15 = (_BYTE *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v15 >= *((_QWORD *)a2 + 2) || *v15 != 18)
          continue;
        *((_QWORD *)a2 + 1) = v15 + 1;
        goto LABEL_93;
      case 2u:
        v6 = TagFallback & 7;
        if (v6 != 2)
          goto LABEL_81;
LABEL_93:
        *((_DWORD *)this + 73) |= 2u;
        v16 = *((_QWORD *)this + 2);
        if (!v16)
        {
          v16 = operator new();
          *(_QWORD *)(v16 + 32) = 2;
          v17 = MEMORY[0x24BEDD958];
          *(_QWORD *)v16 = &off_2511D7460;
          *(_QWORD *)(v16 + 8) = v17;
          *(_QWORD *)(v16 + 16) = 0;
          *(_QWORD *)(v16 + 24) = v17;
          *(_DWORD *)(v16 + 40) = 0;
          *((_QWORD *)this + 2) = v16;
        }
        v274 = 0;
        v18 = (char *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v18 >= *((_QWORD *)a2 + 2) || *v18 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v274))return 0;
        }
        else
        {
          v274 = *v18;
          *((_QWORD *)a2 + 1) = v18 + 1;
        }
        v19 = *((_DWORD *)a2 + 14);
        v20 = *((_DWORD *)a2 + 15);
        *((_DWORD *)a2 + 14) = v19 + 1;
        if (v19 >= v20)
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(a2);
        if (!CLMicroLocationProto::AppLaunch::MergePartialFromCodedStream((CLMicroLocationProto::AppLaunch *)v16, a2)|| !*((_BYTE *)a2 + 36))
        {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(a2);
        v21 = *((_DWORD *)a2 + 14);
        v13 = __OFSUB__(v21, 1);
        v22 = v21 - 1;
        if (v22 < 0 == v13)
          *((_DWORD *)a2 + 14) = v22;
        v23 = (_BYTE *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v23 >= *((_QWORD *)a2 + 2) || *v23 != 34)
          continue;
        *((_QWORD *)a2 + 1) = v23 + 1;
LABEL_107:
        *((_DWORD *)this + 73) |= 4u;
        v24 = *((_QWORD *)this + 3);
        if (!v24)
        {
          v24 = operator new();
          *(_QWORD *)(v24 + 16) = 4;
          v25 = MEMORY[0x24BEDD958];
          *(_QWORD *)v24 = &off_2511D74D8;
          *(_QWORD *)(v24 + 8) = v25;
          *(_DWORD *)(v24 + 24) = 0;
          *((_QWORD *)this + 3) = v24;
        }
        v274 = 0;
        v26 = (char *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v26 >= *((_QWORD *)a2 + 2) || *v26 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v274))return 0;
        }
        else
        {
          v274 = *v26;
          *((_QWORD *)a2 + 1) = v26 + 1;
        }
        v27 = *((_DWORD *)a2 + 14);
        v28 = *((_DWORD *)a2 + 15);
        *((_DWORD *)a2 + 14) = v27 + 1;
        if (v27 >= v28)
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(a2);
        if (!CLMicroLocationProto::BacklightOn::MergePartialFromCodedStream((CLMicroLocationProto::BacklightOn *)v24, a2)|| !*((_BYTE *)a2 + 36))
        {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(a2);
        v29 = *((_DWORD *)a2 + 14);
        v13 = __OFSUB__(v29, 1);
        v30 = v29 - 1;
        if (v30 < 0 == v13)
          *((_DWORD *)a2 + 14) = v30;
        v31 = (_BYTE *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v31 >= *((_QWORD *)a2 + 2) || *v31 != 42)
          continue;
        *((_QWORD *)a2 + 1) = v31 + 1;
LABEL_121:
        *((_DWORD *)this + 73) |= 8u;
        v32 = *((_QWORD *)this + 4);
        if (!v32)
        {
          v32 = operator new();
          *(_QWORD *)v32 = &off_2511D7550;
          *(_QWORD *)(v32 + 8) = 5;
          *(_DWORD *)(v32 + 16) = 0;
          *((_QWORD *)this + 4) = v32;
        }
        v274 = 0;
        v33 = (char *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v33 >= *((_QWORD *)a2 + 2) || *v33 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v274))return 0;
        }
        else
        {
          v274 = *v33;
          *((_QWORD *)a2 + 1) = v33 + 1;
        }
        v34 = *((_DWORD *)a2 + 14);
        v35 = *((_DWORD *)a2 + 15);
        *((_DWORD *)a2 + 14) = v34 + 1;
        if (v34 >= v35)
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(a2);
        if (!CLMicroLocationProto::BatteryChargerConnected::MergePartialFromCodedStream((CLMicroLocationProto::BatteryChargerConnected *)v32, a2)|| !*((_BYTE *)a2 + 36))
        {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(a2);
        v36 = *((_DWORD *)a2 + 14);
        v13 = __OFSUB__(v36, 1);
        v37 = v36 - 1;
        if (v37 < 0 == v13)
          *((_DWORD *)a2 + 14) = v37;
        v38 = (_BYTE *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v38 >= *((_QWORD *)a2 + 2) || *v38 != 58)
          continue;
        *((_QWORD *)a2 + 1) = v38 + 1;
LABEL_135:
        *((_DWORD *)this + 73) |= 0x10u;
        v39 = *((_QWORD *)this + 5);
        if (!v39)
        {
          v39 = operator new();
          *(_QWORD *)v39 = &off_2511D7640;
          *(_QWORD *)(v39 + 8) = 7;
          *(_DWORD *)(v39 + 16) = 0;
          *((_QWORD *)this + 5) = v39;
        }
        v274 = 0;
        v40 = (char *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v40 >= *((_QWORD *)a2 + 2) || *v40 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v274))return 0;
        }
        else
        {
          v274 = *v40;
          *((_QWORD *)a2 + 1) = v40 + 1;
        }
        v41 = *((_DWORD *)a2 + 14);
        v42 = *((_DWORD *)a2 + 15);
        *((_DWORD *)a2 + 14) = v41 + 1;
        if (v41 >= v42)
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(a2);
        if (!CLMicroLocationProto::ForcedRecording::MergePartialFromCodedStream((CLMicroLocationProto::ForcedRecording *)v39, a2)|| !*((_BYTE *)a2 + 36))
        {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(a2);
        v43 = *((_DWORD *)a2 + 14);
        v13 = __OFSUB__(v43, 1);
        v44 = v43 - 1;
        if (v44 < 0 == v13)
          *((_DWORD *)a2 + 14) = v44;
        v45 = (_BYTE *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v45 >= *((_QWORD *)a2 + 2) || *v45 != 74)
          continue;
        *((_QWORD *)a2 + 1) = v45 + 1;
LABEL_149:
        *((_DWORD *)this + 73) |= 0x20u;
        v46 = *((_QWORD *)this + 6);
        if (!v46)
        {
          v46 = operator new();
          v47 = MEMORY[0x24BEDD958];
          *(_DWORD *)(v46 + 64) = 9;
          *(_QWORD *)v46 = &off_2511D76B8;
          *(_QWORD *)(v46 + 8) = v47;
          *(_QWORD *)(v46 + 16) = v47;
          *(_QWORD *)(v46 + 24) = v47;
          *(_QWORD *)(v46 + 32) = v47;
          *(_QWORD *)(v46 + 40) = v47;
          *(_QWORD *)(v46 + 48) = v47;
          *(_QWORD *)(v46 + 56) = v47;
          *(_QWORD *)(v46 + 72) = v47;
          *(_QWORD *)(v46 + 80) = v47;
          *(_WORD *)(v46 + 68) = 0;
          *(_QWORD *)(v46 + 88) = v47;
          *(_QWORD *)(v46 + 96) = v47;
          *(_QWORD *)(v46 + 104) = v47;
          *(_QWORD *)(v46 + 112) = 0;
          *((_QWORD *)this + 6) = v46;
        }
        v274 = 0;
        v48 = (char *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v48 >= *((_QWORD *)a2 + 2) || *v48 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v274))return 0;
        }
        else
        {
          v274 = *v48;
          *((_QWORD *)a2 + 1) = v48 + 1;
        }
        v49 = *((_DWORD *)a2 + 14);
        v50 = *((_DWORD *)a2 + 15);
        *((_DWORD *)a2 + 14) = v49 + 1;
        if (v49 >= v50)
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(a2);
        if (!CLMicroLocationProto::HomeKitAccessory::MergePartialFromCodedStream((CLMicroLocationProto::HomeKitAccessory *)v46, a2)|| !*((_BYTE *)a2 + 36))
        {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(a2);
        v51 = *((_DWORD *)a2 + 14);
        v13 = __OFSUB__(v51, 1);
        v52 = v51 - 1;
        if (v52 < 0 == v13)
          *((_DWORD *)a2 + 14) = v52;
        v53 = (_BYTE *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v53 >= *((_QWORD *)a2 + 2) || *v53 != 82)
          continue;
        *((_QWORD *)a2 + 1) = v53 + 1;
LABEL_163:
        *((_DWORD *)this + 73) |= 0x40u;
        v54 = *((_QWORD *)this + 7);
        if (!v54)
        {
          v54 = operator new();
          *(_DWORD *)(v54 + 48) = 10;
          v55 = MEMORY[0x24BEDD958];
          *(_QWORD *)v54 = &off_2511D7730;
          *(_QWORD *)(v54 + 8) = v55;
          *(_QWORD *)(v54 + 16) = v55;
          *(_QWORD *)(v54 + 24) = v55;
          *(_QWORD *)(v54 + 32) = v55;
          *(_QWORD *)(v54 + 40) = v55;
          *(_QWORD *)(v54 + 56) = v55;
          *(_QWORD *)(v54 + 64) = v55;
          *(_WORD *)(v54 + 52) = 0;
          *(_QWORD *)(v54 + 72) = v55;
          *(_QWORD *)(v54 + 80) = 0;
          *((_QWORD *)this + 7) = v54;
        }
        v274 = 0;
        v56 = (char *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v56 >= *((_QWORD *)a2 + 2) || *v56 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v274))return 0;
        }
        else
        {
          v274 = *v56;
          *((_QWORD *)a2 + 1) = v56 + 1;
        }
        v57 = *((_DWORD *)a2 + 14);
        v58 = *((_DWORD *)a2 + 15);
        *((_DWORD *)a2 + 14) = v57 + 1;
        if (v57 >= v58)
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(a2);
        if (!CLMicroLocationProto::HomeKitScene::MergePartialFromCodedStream((CLMicroLocationProto::HomeKitScene *)v54, a2)|| !*((_BYTE *)a2 + 36))
        {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(a2);
        v59 = *((_DWORD *)a2 + 14);
        v13 = __OFSUB__(v59, 1);
        v60 = v59 - 1;
        if (v60 < 0 == v13)
          *((_DWORD *)a2 + 14) = v60;
        v61 = (_BYTE *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v61 >= *((_QWORD *)a2 + 2) || *v61 != 90)
          continue;
        *((_QWORD *)a2 + 1) = v61 + 1;
LABEL_177:
        *((_DWORD *)this + 73) |= 0x80u;
        v62 = *((_QWORD *)this + 8);
        if (!v62)
        {
          v62 = operator new();
          *(_QWORD *)(v62 + 40) = 0;
          v63 = MEMORY[0x24BEDD958];
          *(_DWORD *)(v62 + 48) = 0;
          *(_QWORD *)v62 = &off_2511D7820;
          *(_QWORD *)(v62 + 8) = v63;
          *(_QWORD *)(v62 + 16) = 12;
          *(_QWORD *)(v62 + 24) = v63;
          *(_QWORD *)(v62 + 32) = 0;
          *(_QWORD *)(v62 + 56) = 0;
          *(_QWORD *)(v62 + 64) = 0;
          *((_QWORD *)this + 8) = v62;
        }
        v274 = 0;
        v64 = (char *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v64 >= *((_QWORD *)a2 + 2) || *v64 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v274))return 0;
        }
        else
        {
          v274 = *v64;
          *((_QWORD *)a2 + 1) = v64 + 1;
        }
        v65 = *((_DWORD *)a2 + 14);
        v66 = *((_DWORD *)a2 + 15);
        *((_DWORD *)a2 + 14) = v65 + 1;
        if (v65 >= v66)
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(a2);
        if (!CLMicroLocationProto::NowPlaying::MergePartialFromCodedStream((CLMicroLocationProto::NowPlaying *)v62, a2)|| !*((_BYTE *)a2 + 36))
        {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(a2);
        v67 = *((_DWORD *)a2 + 14);
        v13 = __OFSUB__(v67, 1);
        v68 = v67 - 1;
        if (v68 < 0 == v13)
          *((_DWORD *)a2 + 14) = v68;
        v69 = (_BYTE *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v69 >= *((_QWORD *)a2 + 2) || *v69 != 98)
          continue;
        *((_QWORD *)a2 + 1) = v69 + 1;
LABEL_191:
        *((_DWORD *)this + 73) |= 0x100u;
        v70 = (CLMicroLocationProto::RecordingRequest *)*((_QWORD *)this + 9);
        if (!v70)
        {
          v70 = (CLMicroLocationProto::RecordingRequest *)operator new();
          *(_QWORD *)v70 = &off_2511D73E8;
          *((_QWORD *)v70 + 1) = 0x10000000DLL;
          v71 = MEMORY[0x24BEDD958];
          *((_QWORD *)v70 + 2) = MEMORY[0x24BEDD958];
          *((_QWORD *)v70 + 3) = v71;
          *((_QWORD *)v70 + 4) = v71;
          *((_QWORD *)v70 + 5) = 0;
          *((_QWORD *)this + 9) = v70;
        }
        v274 = 0;
        v72 = (char *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v72 >= *((_QWORD *)a2 + 2) || *v72 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v274))return 0;
        }
        else
        {
          v274 = *v72;
          *((_QWORD *)a2 + 1) = v72 + 1;
        }
        v73 = *((_DWORD *)a2 + 14);
        v74 = *((_DWORD *)a2 + 15);
        *((_DWORD *)a2 + 14) = v73 + 1;
        if (v73 >= v74)
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(a2);
        if (!CLMicroLocationProto::RecordingRequest::MergePartialFromCodedStream(v70, a2)
          || !*((_BYTE *)a2 + 36))
        {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(a2);
        v75 = *((_DWORD *)a2 + 14);
        v13 = __OFSUB__(v75, 1);
        v76 = v75 - 1;
        if (v76 < 0 == v13)
          *((_DWORD *)a2 + 14) = v76;
        v77 = (_BYTE *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v77 >= *((_QWORD *)a2 + 2) || *v77 != 106)
          continue;
        *((_QWORD *)a2 + 1) = v77 + 1;
LABEL_205:
        *((_DWORD *)this + 73) |= 0x200u;
        v78 = *((_QWORD *)this + 10);
        if (!v78)
        {
          v78 = operator new();
          *(_QWORD *)(v78 + 32) = 14;
          v79 = MEMORY[0x24BEDD958];
          *(_QWORD *)v78 = &off_2511D75C8;
          *(_QWORD *)(v78 + 8) = v79;
          *(_QWORD *)(v78 + 16) = v79;
          *(_QWORD *)(v78 + 24) = v79;
          *(_DWORD *)(v78 + 40) = 0;
          *((_QWORD *)this + 10) = v78;
        }
        v274 = 0;
        v80 = (char *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v80 >= *((_QWORD *)a2 + 2) || *v80 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v274))return 0;
        }
        else
        {
          v274 = *v80;
          *((_QWORD *)a2 + 1) = v80 + 1;
        }
        v81 = *((_DWORD *)a2 + 14);
        v82 = *((_DWORD *)a2 + 15);
        *((_DWORD *)a2 + 14) = v81 + 1;
        if (v81 >= v82)
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(a2);
        if (!CLMicroLocationProto::TruthLabelDonation::MergePartialFromCodedStream((CLMicroLocationProto::TruthLabelDonation *)v78, a2)|| !*((_BYTE *)a2 + 36))
        {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(a2);
        v83 = *((_DWORD *)a2 + 14);
        v13 = __OFSUB__(v83, 1);
        v84 = v83 - 1;
        if (v84 < 0 == v13)
          *((_DWORD *)a2 + 14) = v84;
        v85 = (_BYTE *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v85 >= *((_QWORD *)a2 + 2) || *v85 != 114)
          continue;
        *((_QWORD *)a2 + 1) = v85 + 1;
LABEL_219:
        *((_DWORD *)this + 73) |= 0x400u;
        v86 = *((_QWORD *)this + 11);
        if (!v86)
        {
          v86 = operator new();
          *(_QWORD *)v86 = &off_2511D7898;
          *(_QWORD *)(v86 + 8) = 31;
          *(_DWORD *)(v86 + 16) = 0;
          *((_QWORD *)this + 11) = v86;
        }
        v274 = 0;
        v87 = (char *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v87 >= *((_QWORD *)a2 + 2) || *v87 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v274))return 0;
        }
        else
        {
          v274 = *v87;
          *((_QWORD *)a2 + 1) = v87 + 1;
        }
        v88 = *((_DWORD *)a2 + 14);
        v89 = *((_DWORD *)a2 + 15);
        *((_DWORD *)a2 + 14) = v88 + 1;
        if (v88 >= v89)
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(a2);
        if (!CLMicroLocationProto::LearnModel::MergePartialFromCodedStream((CLMicroLocationProto::LearnModel *)v86, a2)|| !*((_BYTE *)a2 + 36))
        {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(a2);
        v90 = *((_DWORD *)a2 + 14);
        v13 = __OFSUB__(v90, 1);
        v91 = v90 - 1;
        if (v91 < 0 == v13)
          *((_DWORD *)a2 + 14) = v91;
        v92 = (_BYTE *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v92 >= *((_QWORD *)a2 + 2) || *v92 != 122)
          continue;
        *((_QWORD *)a2 + 1) = v92 + 1;
LABEL_233:
        *((_DWORD *)this + 73) |= 0x800u;
        v93 = *((_QWORD *)this + 12);
        if (!v93)
        {
          v93 = operator new();
          *(_QWORD *)v93 = &off_2511D7910;
          *(_QWORD *)(v93 + 8) = 32;
          *(_DWORD *)(v93 + 16) = 0;
          *((_QWORD *)this + 12) = v93;
        }
        v274 = 0;
        v94 = (char *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v94 >= *((_QWORD *)a2 + 2) || *v94 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v274))return 0;
        }
        else
        {
          v274 = *v94;
          *((_QWORD *)a2 + 1) = v94 + 1;
        }
        v95 = *((_DWORD *)a2 + 14);
        v96 = *((_DWORD *)a2 + 15);
        *((_DWORD *)a2 + 14) = v95 + 1;
        if (v95 >= v96)
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(a2);
        if (!CLMicroLocationProto::LearnCompleted::MergePartialFromCodedStream((CLMicroLocationProto::LearnCompleted *)v93, a2)|| !*((_BYTE *)a2 + 36))
        {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(a2);
        v97 = *((_DWORD *)a2 + 14);
        v13 = __OFSUB__(v97, 1);
        v98 = v97 - 1;
        if (v98 < 0 == v13)
          *((_DWORD *)a2 + 14) = v98;
        v99 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
        if (*((_DWORD *)a2 + 4) - (int)v99 <= 1 || *v99 != 130 || v99[1] != 1)
          continue;
        *((_QWORD *)a2 + 1) = v99 + 2;
LABEL_248:
        *((_DWORD *)this + 73) |= 0x1000u;
        v100 = *((_QWORD *)this + 13);
        if (!v100)
        {
          v100 = operator new();
          *(_QWORD *)v100 = &off_2511D7988;
          *(_QWORD *)(v100 + 8) = 33;
          *(_DWORD *)(v100 + 16) = 0;
          *((_QWORD *)this + 13) = v100;
        }
        v274 = 0;
        v101 = (char *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v101 >= *((_QWORD *)a2 + 2) || *v101 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v274))return 0;
        }
        else
        {
          v274 = *v101;
          *((_QWORD *)a2 + 1) = v101 + 1;
        }
        v102 = *((_DWORD *)a2 + 14);
        v103 = *((_DWORD *)a2 + 15);
        *((_DWORD *)a2 + 14) = v102 + 1;
        if (v102 >= v103)
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(a2);
        if (!CLMicroLocationProto::SensorsScanComplete::MergePartialFromCodedStream((CLMicroLocationProto::SensorsScanComplete *)v100, a2)|| !*((_BYTE *)a2 + 36))
        {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(a2);
        v104 = *((_DWORD *)a2 + 14);
        v13 = __OFSUB__(v104, 1);
        v105 = v104 - 1;
        if (v105 < 0 == v13)
          *((_DWORD *)a2 + 14) = v105;
        v106 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
        if (*((_DWORD *)a2 + 4) - (int)v106 <= 1 || *v106 != 138 || v106[1] != 1)
          continue;
        *((_QWORD *)a2 + 1) = v106 + 2;
LABEL_263:
        *((_DWORD *)this + 73) |= 0x2000u;
        v107 = *((_QWORD *)this + 14);
        if (!v107)
        {
          v107 = operator new();
          *(_QWORD *)v107 = &off_2511D7A00;
          *(_QWORD *)(v107 + 8) = 34;
          *(_DWORD *)(v107 + 16) = 0;
          *((_QWORD *)this + 14) = v107;
        }
        v274 = 0;
        v108 = (char *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v108 >= *((_QWORD *)a2 + 2) || *v108 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v274))return 0;
        }
        else
        {
          v274 = *v108;
          *((_QWORD *)a2 + 1) = v108 + 1;
        }
        v109 = *((_DWORD *)a2 + 14);
        v110 = *((_DWORD *)a2 + 15);
        *((_DWORD *)a2 + 14) = v109 + 1;
        if (v109 >= v110)
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(a2);
        if (!CLMicroLocationProto::StartSpectating::MergePartialFromCodedStream((CLMicroLocationProto::StartSpectating *)v107, a2)|| !*((_BYTE *)a2 + 36))
        {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(a2);
        v111 = *((_DWORD *)a2 + 14);
        v13 = __OFSUB__(v111, 1);
        v112 = v111 - 1;
        if (v112 < 0 == v13)
          *((_DWORD *)a2 + 14) = v112;
        v113 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
        if (*((_DWORD *)a2 + 4) - (int)v113 <= 1 || *v113 != 146 || v113[1] != 1)
          continue;
        *((_QWORD *)a2 + 1) = v113 + 2;
LABEL_278:
        *((_DWORD *)this + 73) |= 0x4000u;
        v114 = *((_QWORD *)this + 15);
        if (!v114)
        {
          v114 = operator new();
          *(_QWORD *)v114 = &off_2511D7A78;
          *(_QWORD *)(v114 + 8) = 35;
          *(_DWORD *)(v114 + 16) = 0;
          *((_QWORD *)this + 15) = v114;
        }
        v274 = 0;
        v115 = (char *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v115 >= *((_QWORD *)a2 + 2) || *v115 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v274))return 0;
        }
        else
        {
          v274 = *v115;
          *((_QWORD *)a2 + 1) = v115 + 1;
        }
        v116 = *((_DWORD *)a2 + 14);
        v117 = *((_DWORD *)a2 + 15);
        *((_DWORD *)a2 + 14) = v116 + 1;
        if (v116 >= v117)
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(a2);
        if (!CLMicroLocationProto::StopSpectating::MergePartialFromCodedStream((CLMicroLocationProto::StopSpectating *)v114, a2)|| !*((_BYTE *)a2 + 36))
        {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(a2);
        v118 = *((_DWORD *)a2 + 14);
        v13 = __OFSUB__(v118, 1);
        v119 = v118 - 1;
        if (v119 < 0 == v13)
          *((_DWORD *)a2 + 14) = v119;
        v120 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
        if (*((_DWORD *)a2 + 4) - (int)v120 <= 1 || *v120 != 154 || v120[1] != 1)
          continue;
        *((_QWORD *)a2 + 1) = v120 + 2;
LABEL_293:
        *((_DWORD *)this + 73) |= 0x8000u;
        v121 = *((_QWORD *)this + 16);
        if (!v121)
        {
          v121 = operator new();
          v122 = MEMORY[0x24BEDD958];
          *(_QWORD *)(v121 + 24) = 36;
          *(_QWORD *)v121 = &off_2511D7AF0;
          *(_QWORD *)(v121 + 8) = v122;
          *(_QWORD *)(v121 + 16) = 0;
          *(_DWORD *)(v121 + 32) = 0;
          *((_QWORD *)this + 16) = v121;
        }
        v274 = 0;
        v123 = (char *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v123 >= *((_QWORD *)a2 + 2) || *v123 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v274))return 0;
        }
        else
        {
          v274 = *v123;
          *((_QWORD *)a2 + 1) = v123 + 1;
        }
        v124 = *((_DWORD *)a2 + 14);
        v125 = *((_DWORD *)a2 + 15);
        *((_DWORD *)a2 + 14) = v124 + 1;
        if (v124 >= v125)
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(a2);
        if (!CLMicroLocationProto::ServiceCreate::MergePartialFromCodedStream((CLMicroLocationProto::ServiceCreate *)v121, a2)|| !*((_BYTE *)a2 + 36))
        {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(a2);
        v126 = *((_DWORD *)a2 + 14);
        v13 = __OFSUB__(v126, 1);
        v127 = v126 - 1;
        if (v127 < 0 == v13)
          *((_DWORD *)a2 + 14) = v127;
        v128 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
        if (*((_DWORD *)a2 + 4) - (int)v128 <= 1 || *v128 != 162 || v128[1] != 1)
          continue;
        *((_QWORD *)a2 + 1) = v128 + 2;
LABEL_308:
        *((_DWORD *)this + 73) |= 0x10000u;
        v129 = *((_QWORD *)this + 17);
        if (!v129)
        {
          v129 = operator new();
          v130 = MEMORY[0x24BEDD958];
          *(_QWORD *)(v129 + 24) = 37;
          *(_QWORD *)v129 = &off_2511D7B68;
          *(_QWORD *)(v129 + 8) = v130;
          *(_QWORD *)(v129 + 16) = v130;
          *(_DWORD *)(v129 + 32) = 0;
          *((_QWORD *)this + 17) = v129;
        }
        v274 = 0;
        v131 = (char *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v131 >= *((_QWORD *)a2 + 2) || *v131 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v274))return 0;
        }
        else
        {
          v274 = *v131;
          *((_QWORD *)a2 + 1) = v131 + 1;
        }
        v132 = *((_DWORD *)a2 + 14);
        v133 = *((_DWORD *)a2 + 15);
        *((_DWORD *)a2 + 14) = v132 + 1;
        if (v132 >= v133)
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(a2);
        if (!CLMicroLocationProto::ServiceDelete::MergePartialFromCodedStream((CLMicroLocationProto::ServiceDelete *)v129, a2)|| !*((_BYTE *)a2 + 36))
        {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(a2);
        v134 = *((_DWORD *)a2 + 14);
        v13 = __OFSUB__(v134, 1);
        v135 = v134 - 1;
        if (v135 < 0 == v13)
          *((_DWORD *)a2 + 14) = v135;
        v136 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
        if (*((_DWORD *)a2 + 4) - (int)v136 <= 1 || *v136 != 170 || v136[1] != 1)
          continue;
        *((_QWORD *)a2 + 1) = v136 + 2;
LABEL_323:
        *((_DWORD *)this + 73) |= 0x20000u;
        v137 = *((_QWORD *)this + 18);
        if (!v137)
        {
          v137 = operator new();
          v138 = MEMORY[0x24BEDD958];
          *(_QWORD *)(v137 + 24) = 38;
          *(_QWORD *)v137 = &off_2511D7BE0;
          *(_QWORD *)(v137 + 8) = v138;
          *(_QWORD *)(v137 + 16) = v138;
          *(_DWORD *)(v137 + 32) = 0;
          *((_QWORD *)this + 18) = v137;
        }
        v274 = 0;
        v139 = (char *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v139 >= *((_QWORD *)a2 + 2) || *v139 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v274))return 0;
        }
        else
        {
          v274 = *v139;
          *((_QWORD *)a2 + 1) = v139 + 1;
        }
        v140 = *((_DWORD *)a2 + 14);
        v141 = *((_DWORD *)a2 + 15);
        *((_DWORD *)a2 + 14) = v140 + 1;
        if (v140 >= v141)
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(a2);
        if (!CLMicroLocationProto::ServiceConnect::MergePartialFromCodedStream((CLMicroLocationProto::ServiceConnect *)v137, a2)|| !*((_BYTE *)a2 + 36))
        {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(a2);
        v142 = *((_DWORD *)a2 + 14);
        v13 = __OFSUB__(v142, 1);
        v143 = v142 - 1;
        if (v143 < 0 == v13)
          *((_DWORD *)a2 + 14) = v143;
        v144 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
        if (*((_DWORD *)a2 + 4) - (int)v144 <= 1 || *v144 != 178 || v144[1] != 1)
          continue;
        *((_QWORD *)a2 + 1) = v144 + 2;
LABEL_338:
        *((_DWORD *)this + 73) |= 0x40000u;
        v145 = *((_QWORD *)this + 19);
        if (!v145)
        {
          v145 = operator new();
          v146 = MEMORY[0x24BEDD958];
          *(_QWORD *)(v145 + 24) = 39;
          *(_QWORD *)v145 = &off_2511D7C58;
          *(_QWORD *)(v145 + 8) = v146;
          *(_QWORD *)(v145 + 16) = v146;
          *(_DWORD *)(v145 + 32) = 0;
          *((_QWORD *)this + 19) = v145;
        }
        v274 = 0;
        v147 = (char *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v147 >= *((_QWORD *)a2 + 2) || *v147 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v274))return 0;
        }
        else
        {
          v274 = *v147;
          *((_QWORD *)a2 + 1) = v147 + 1;
        }
        v148 = *((_DWORD *)a2 + 14);
        v149 = *((_DWORD *)a2 + 15);
        *((_DWORD *)a2 + 14) = v148 + 1;
        if (v148 >= v149)
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(a2);
        if (!CLMicroLocationProto::ServiceDisconnect::MergePartialFromCodedStream((CLMicroLocationProto::ServiceDisconnect *)v145, a2)|| !*((_BYTE *)a2 + 36))
        {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(a2);
        v150 = *((_DWORD *)a2 + 14);
        v13 = __OFSUB__(v150, 1);
        v151 = v150 - 1;
        if (v151 < 0 == v13)
          *((_DWORD *)a2 + 14) = v151;
        v152 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
        if (*((_DWORD *)a2 + 4) - (int)v152 <= 1 || *v152 != 186 || v152[1] != 1)
          continue;
        *((_QWORD *)a2 + 1) = v152 + 2;
LABEL_353:
        *((_DWORD *)this + 73) |= 0x80000u;
        v153 = *((_QWORD *)this + 20);
        if (!v153)
        {
          v153 = operator new();
          *(_DWORD *)(v153 + 16) = 40;
          v154 = MEMORY[0x24BEDD958];
          *(_QWORD *)v153 = &off_2511D7CD0;
          *(_QWORD *)(v153 + 8) = v154;
          *(_QWORD *)(v153 + 24) = v154;
          *(_QWORD *)(v153 + 32) = 0;
          *(_BYTE *)(v153 + 20) = 0;
          *((_QWORD *)this + 20) = v153;
        }
        v274 = 0;
        v155 = (char *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v155 >= *((_QWORD *)a2 + 2) || *v155 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v274))return 0;
        }
        else
        {
          v274 = *v155;
          *((_QWORD *)a2 + 1) = v155 + 1;
        }
        v156 = *((_DWORD *)a2 + 14);
        v157 = *((_DWORD *)a2 + 15);
        *((_DWORD *)a2 + 14) = v156 + 1;
        if (v156 >= v157)
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(a2);
        if (!CLMicroLocationProto::ServiceStartUpdating::MergePartialFromCodedStream((CLMicroLocationProto::ServiceStartUpdating *)v153, a2)|| !*((_BYTE *)a2 + 36))
        {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(a2);
        v158 = *((_DWORD *)a2 + 14);
        v13 = __OFSUB__(v158, 1);
        v159 = v158 - 1;
        if (v159 < 0 == v13)
          *((_DWORD *)a2 + 14) = v159;
        v160 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
        if (*((_DWORD *)a2 + 4) - (int)v160 <= 1 || *v160 != 194 || v160[1] != 1)
          continue;
        *((_QWORD *)a2 + 1) = v160 + 2;
LABEL_368:
        *((_DWORD *)this + 73) |= 0x100000u;
        v161 = *((_QWORD *)this + 21);
        if (!v161)
        {
          v161 = operator new();
          v162 = MEMORY[0x24BEDD958];
          *(_QWORD *)(v161 + 24) = 41;
          *(_QWORD *)v161 = &off_2511D7D48;
          *(_QWORD *)(v161 + 8) = v162;
          *(_QWORD *)(v161 + 16) = v162;
          *(_DWORD *)(v161 + 32) = 0;
          *((_QWORD *)this + 21) = v161;
        }
        v274 = 0;
        v163 = (char *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v163 >= *((_QWORD *)a2 + 2) || *v163 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v274))return 0;
        }
        else
        {
          v274 = *v163;
          *((_QWORD *)a2 + 1) = v163 + 1;
        }
        v164 = *((_DWORD *)a2 + 14);
        v165 = *((_DWORD *)a2 + 15);
        *((_DWORD *)a2 + 14) = v164 + 1;
        if (v164 >= v165)
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(a2);
        if (!CLMicroLocationProto::ServiceStopUpdating::MergePartialFromCodedStream((CLMicroLocationProto::ServiceStopUpdating *)v161, a2)|| !*((_BYTE *)a2 + 36))
        {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(a2);
        v166 = *((_DWORD *)a2 + 14);
        v13 = __OFSUB__(v166, 1);
        v167 = v166 - 1;
        if (v167 < 0 == v13)
          *((_DWORD *)a2 + 14) = v167;
        v168 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
        if (*((_DWORD *)a2 + 4) - (int)v168 <= 1 || *v168 != 202 || v168[1] != 1)
          continue;
        *((_QWORD *)a2 + 1) = v168 + 2;
LABEL_383:
        *((_DWORD *)this + 73) |= 0x200000u;
        v169 = *((_QWORD *)this + 22);
        if (!v169)
        {
          v169 = operator new();
          *(_QWORD *)(v169 + 40) = 42;
          v170 = MEMORY[0x24BEDD958];
          *(_QWORD *)v169 = &off_2511D7DC0;
          *(_QWORD *)(v169 + 8) = v170;
          *(_QWORD *)(v169 + 16) = v170;
          *(_QWORD *)(v169 + 24) = v170;
          *(_QWORD *)(v169 + 32) = v170;
          *(_DWORD *)(v169 + 48) = 0;
          *((_QWORD *)this + 22) = v169;
        }
        v274 = 0;
        v171 = (char *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v171 >= *((_QWORD *)a2 + 2) || *v171 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v274))return 0;
        }
        else
        {
          v274 = *v171;
          *((_QWORD *)a2 + 1) = v171 + 1;
        }
        v172 = *((_DWORD *)a2 + 14);
        v173 = *((_DWORD *)a2 + 15);
        *((_DWORD *)a2 + 14) = v172 + 1;
        if (v172 >= v173)
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(a2);
        if (!CLMicroLocationProto::RequestObservation::MergePartialFromCodedStream((CLMicroLocationProto::RequestObservation *)v169, a2)|| !*((_BYTE *)a2 + 36))
        {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(a2);
        v174 = *((_DWORD *)a2 + 14);
        v13 = __OFSUB__(v174, 1);
        v175 = v174 - 1;
        if (v175 < 0 == v13)
          *((_DWORD *)a2 + 14) = v175;
        v176 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
        if (*((_DWORD *)a2 + 4) - (int)v176 <= 1 || *v176 != 210 || v176[1] != 1)
          continue;
        *((_QWORD *)a2 + 1) = v176 + 2;
LABEL_398:
        *((_DWORD *)this + 73) |= 0x400000u;
        v177 = *((_QWORD *)this + 23);
        if (!v177)
        {
          v177 = operator new();
          *(_QWORD *)(v177 + 32) = 43;
          v178 = MEMORY[0x24BEDD958];
          *(_QWORD *)v177 = &off_2511D7E38;
          *(_QWORD *)(v177 + 8) = v178;
          *(_QWORD *)(v177 + 16) = v178;
          *(_QWORD *)(v177 + 24) = v178;
          *(_DWORD *)(v177 + 40) = 0;
          *((_QWORD *)this + 23) = v177;
        }
        v274 = 0;
        v179 = (char *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v179 >= *((_QWORD *)a2 + 2) || *v179 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v274))return 0;
        }
        else
        {
          v274 = *v179;
          *((_QWORD *)a2 + 1) = v179 + 1;
        }
        v180 = *((_DWORD *)a2 + 14);
        v181 = *((_DWORD *)a2 + 15);
        *((_DWORD *)a2 + 14) = v180 + 1;
        if (v180 >= v181)
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(a2);
        if (!CLMicroLocationProto::RequestPrediction::MergePartialFromCodedStream((CLMicroLocationProto::RequestPrediction *)v177, a2)|| !*((_BYTE *)a2 + 36))
        {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(a2);
        v182 = *((_DWORD *)a2 + 14);
        v13 = __OFSUB__(v182, 1);
        v183 = v182 - 1;
        if (v183 < 0 == v13)
          *((_DWORD *)a2 + 14) = v183;
        v184 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
        if (*((_DWORD *)a2 + 4) - (int)v184 <= 1 || *v184 != 218 || v184[1] != 1)
          continue;
        *((_QWORD *)a2 + 1) = v184 + 2;
LABEL_413:
        *((_DWORD *)this + 73) |= 0x800000u;
        v185 = *((_QWORD *)this + 24);
        if (!v185)
        {
          v185 = operator new();
          *(_QWORD *)(v185 + 16) = 44;
          v186 = MEMORY[0x24BEDD958];
          *(_QWORD *)v185 = &off_2511D7EB0;
          *(_QWORD *)(v185 + 8) = v186;
          *(_DWORD *)(v185 + 24) = 0;
          *((_QWORD *)this + 24) = v185;
        }
        v274 = 0;
        v187 = (char *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v187 >= *((_QWORD *)a2 + 2) || *v187 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v274))return 0;
        }
        else
        {
          v274 = *v187;
          *((_QWORD *)a2 + 1) = v187 + 1;
        }
        v188 = *((_DWORD *)a2 + 14);
        v189 = *((_DWORD *)a2 + 15);
        *((_DWORD *)a2 + 14) = v188 + 1;
        if (v188 >= v189)
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(a2);
        if (!CLMicroLocationProto::MiloInit::MergePartialFromCodedStream((CLMicroLocationProto::MiloInit *)v185, a2)|| !*((_BYTE *)a2 + 36))
        {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(a2);
        v190 = *((_DWORD *)a2 + 14);
        v13 = __OFSUB__(v190, 1);
        v191 = v190 - 1;
        if (v191 < 0 == v13)
          *((_DWORD *)a2 + 14) = v191;
        v192 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
        if (*((_DWORD *)a2 + 4) - (int)v192 <= 1 || *v192 != 226 || v192[1] != 1)
          continue;
        *((_QWORD *)a2 + 1) = v192 + 2;
LABEL_428:
        *((_DWORD *)this + 73) |= 0x1000000u;
        v193 = (CLMicroLocationProto::MotionEvent *)*((_QWORD *)this + 25);
        if (!v193)
        {
          v193 = (CLMicroLocationProto::MotionEvent *)operator new();
          v194 = MEMORY[0x24BEDD958];
          *(_QWORD *)v193 = &off_2511D7F28;
          *((_QWORD *)v193 + 1) = v194;
          *((_QWORD *)v193 + 2) = 45;
          *((_QWORD *)v193 + 3) = v194;
          *((_QWORD *)v193 + 4) = 0;
          *((_QWORD *)v193 + 5) = 0;
          *((_QWORD *)this + 25) = v193;
        }
        v274 = 0;
        v195 = (char *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v195 >= *((_QWORD *)a2 + 2) || *v195 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v274))return 0;
        }
        else
        {
          v274 = *v195;
          *((_QWORD *)a2 + 1) = v195 + 1;
        }
        v196 = *((_DWORD *)a2 + 14);
        v197 = *((_DWORD *)a2 + 15);
        *((_DWORD *)a2 + 14) = v196 + 1;
        if (v196 >= v197)
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(a2);
        if (!CLMicroLocationProto::MotionEvent::MergePartialFromCodedStream(v193, a2)
          || !*((_BYTE *)a2 + 36))
        {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(a2);
        v198 = *((_DWORD *)a2 + 14);
        v13 = __OFSUB__(v198, 1);
        v199 = v198 - 1;
        if (v199 < 0 == v13)
          *((_DWORD *)a2 + 14) = v199;
        v200 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
        if (*((_DWORD *)a2 + 4) - (int)v200 <= 1 || *v200 != 234 || v200[1] != 1)
          continue;
        *((_QWORD *)a2 + 1) = v200 + 2;
LABEL_443:
        *((_DWORD *)this + 73) |= 0x2000000u;
        v201 = *((_QWORD *)this + 26);
        if (!v201)
        {
          v201 = operator new();
          *(_QWORD *)(v201 + 16) = 46;
          v202 = MEMORY[0x24BEDD958];
          *(_QWORD *)v201 = &off_2511D7FA0;
          *(_QWORD *)(v201 + 8) = v202;
          *(_DWORD *)(v201 + 24) = 0;
          *((_QWORD *)this + 26) = v201;
        }
        v274 = 0;
        v203 = (char *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v203 >= *((_QWORD *)a2 + 2) || *v203 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v274))return 0;
        }
        else
        {
          v274 = *v203;
          *((_QWORD *)a2 + 1) = v203 + 1;
        }
        v204 = *((_DWORD *)a2 + 14);
        v205 = *((_DWORD *)a2 + 15);
        *((_DWORD *)a2 + 14) = v204 + 1;
        if (v204 >= v205)
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(a2);
        if (!CLMicroLocationProto::LegacyThrottle::MergePartialFromCodedStream((CLMicroLocationProto::LegacyThrottle *)v201, a2)|| !*((_BYTE *)a2 + 36))
        {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(a2);
        v206 = *((_DWORD *)a2 + 14);
        v13 = __OFSUB__(v206, 1);
        v207 = v206 - 1;
        if (v207 < 0 == v13)
          *((_DWORD *)a2 + 14) = v207;
        v208 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
        if (*((_DWORD *)a2 + 4) - (int)v208 <= 1 || *v208 != 242 || v208[1] != 1)
          continue;
        *((_QWORD *)a2 + 1) = v208 + 2;
LABEL_458:
        *((_DWORD *)this + 73) |= 0x4000000u;
        v209 = *((_QWORD *)this + 27);
        if (!v209)
        {
          v209 = operator new();
          v210 = MEMORY[0x24BEDD958];
          *(_QWORD *)v209 = &off_2511D8018;
          *(_QWORD *)(v209 + 8) = v210;
          *(_QWORD *)(v209 + 16) = v210;
          *(_QWORD *)(v209 + 32) = v210;
          *(_QWORD *)(v209 + 24) = 0x10000002FLL;
          *(_BYTE *)(v209 + 40) = 0;
          *(_DWORD *)(v209 + 44) = 0;
          *(_DWORD *)(v209 + 48) = 0;
          *((_QWORD *)this + 27) = v209;
        }
        v274 = 0;
        v211 = (char *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v211 >= *((_QWORD *)a2 + 2) || *v211 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v274))return 0;
        }
        else
        {
          v274 = *v211;
          *((_QWORD *)a2 + 1) = v211 + 1;
        }
        v212 = *((_DWORD *)a2 + 14);
        v213 = *((_DWORD *)a2 + 15);
        *((_DWORD *)a2 + 14) = v212 + 1;
        if (v212 >= v213)
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(a2);
        if (!CLMicroLocationProto::RetrievedLoi::MergePartialFromCodedStream((CLMicroLocationProto::RetrievedLoi *)v209, a2)|| !*((_BYTE *)a2 + 36))
        {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(a2);
        v214 = *((_DWORD *)a2 + 14);
        v13 = __OFSUB__(v214, 1);
        v215 = v214 - 1;
        if (v215 < 0 == v13)
          *((_DWORD *)a2 + 14) = v215;
        v216 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
        if (*((_DWORD *)a2 + 4) - (int)v216 <= 1 || *v216 != 250 || v216[1] != 1)
          continue;
        *((_QWORD *)a2 + 1) = v216 + 2;
LABEL_473:
        *((_DWORD *)this + 73) |= 0x8000000u;
        v217 = *((_QWORD *)this + 28);
        if (!v217)
        {
          v217 = operator new();
          *(_DWORD *)(v217 + 24) = 48;
          *(_QWORD *)v217 = &off_2511D81F8;
          *(_QWORD *)(v217 + 8) = 0;
          *(_WORD *)(v217 + 28) = 0;
          v218 = MEMORY[0x24BEDD958];
          *(_QWORD *)(v217 + 16) = MEMORY[0x24BEDD958];
          *(_QWORD *)(v217 + 32) = v218;
          *(_QWORD *)(v217 + 40) = v218;
          *(_QWORD *)(v217 + 48) = v218;
          *(_QWORD *)(v217 + 56) = 0;
          *(_QWORD *)(v217 + 64) = v218;
          *(_QWORD *)(v217 + 72) = 0;
          *(_QWORD *)(v217 + 80) = 0;
          *((_QWORD *)this + 28) = v217;
        }
        v274 = 0;
        v219 = (char *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v219 >= *((_QWORD *)a2 + 2) || *v219 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v274))return 0;
        }
        else
        {
          v274 = *v219;
          *((_QWORD *)a2 + 1) = v219 + 1;
        }
        v220 = *((_DWORD *)a2 + 14);
        v221 = *((_DWORD *)a2 + 15);
        *((_DWORD *)a2 + 14) = v220 + 1;
        if (v220 >= v221)
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(a2);
        if (!CLMicroLocationProto::TriggerEvent::MergePartialFromCodedStream((CLMicroLocationProto::TriggerEvent *)v217, a2)|| !*((_BYTE *)a2 + 36))
        {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(a2);
        v222 = *((_DWORD *)a2 + 14);
        v13 = __OFSUB__(v222, 1);
        v223 = v222 - 1;
        if (v223 < 0 == v13)
          *((_DWORD *)a2 + 14) = v223;
        v224 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
        if (*((_DWORD *)a2 + 4) - (int)v224 <= 1 || *v224 != 130 || v224[1] != 2)
          continue;
        *((_QWORD *)a2 + 1) = v224 + 2;
LABEL_488:
        *((_DWORD *)this + 73) |= 0x10000000u;
        v225 = *((_QWORD *)this + 29);
        if (!v225)
        {
          v225 = operator new();
          *(_QWORD *)v225 = &off_2511D8270;
          *(_OWORD *)(v225 + 8) = xmmword_241BB7110;
          *(_DWORD *)(v225 + 24) = 0;
          *((_QWORD *)this + 29) = v225;
        }
        v274 = 0;
        v226 = (char *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v226 >= *((_QWORD *)a2 + 2) || *v226 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v274))return 0;
        }
        else
        {
          v274 = *v226;
          *((_QWORD *)a2 + 1) = v226 + 1;
        }
        v227 = *((_DWORD *)a2 + 14);
        v228 = *((_DWORD *)a2 + 15);
        *((_DWORD *)a2 + 14) = v227 + 1;
        if (v227 >= v228)
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(a2);
        if (!CLMicroLocationProto::LegacyClientStatusUpdate::MergePartialFromCodedStream((CLMicroLocationProto::LegacyClientStatusUpdate *)v225, a2)|| !*((_BYTE *)a2 + 36))
        {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(a2);
        v229 = *((_DWORD *)a2 + 14);
        v13 = __OFSUB__(v229, 1);
        v230 = v229 - 1;
        if (v230 < 0 == v13)
          *((_DWORD *)a2 + 14) = v230;
        v231 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
        if (*((_DWORD *)a2 + 4) - (int)v231 <= 1 || *v231 != 138 || v231[1] != 2)
          continue;
        *((_QWORD *)a2 + 1) = v231 + 2;
LABEL_503:
        *((_DWORD *)this + 73) |= 0x20000000u;
        v232 = *((_QWORD *)this + 30);
        if (!v232)
        {
          v232 = operator new();
          *(_QWORD *)v232 = &off_2511D82E8;
          *(_DWORD *)(v232 + 8) = 50;
          *(_BYTE *)(v232 + 12) = 0;
          *(_QWORD *)(v232 + 16) = 0;
          *((_QWORD *)this + 30) = v232;
        }
        v274 = 0;
        v233 = (char *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v233 >= *((_QWORD *)a2 + 2) || *v233 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v274))return 0;
        }
        else
        {
          v274 = *v233;
          *((_QWORD *)a2 + 1) = v233 + 1;
        }
        v234 = *((_DWORD *)a2 + 14);
        v235 = *((_DWORD *)a2 + 15);
        *((_DWORD *)a2 + 14) = v234 + 1;
        if (v234 >= v235)
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(a2);
        if (!CLMicroLocationProto::SpectatingMotionUpdate::MergePartialFromCodedStream((CLMicroLocationProto::SpectatingMotionUpdate *)v232, a2)|| !*((_BYTE *)a2 + 36))
        {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(a2);
        v236 = *((_DWORD *)a2 + 14);
        v13 = __OFSUB__(v236, 1);
        v237 = v236 - 1;
        if (v237 < 0 == v13)
          *((_DWORD *)a2 + 14) = v237;
        v238 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
        if (*((_DWORD *)a2 + 4) - (int)v238 <= 1 || *v238 != 146 || v238[1] != 2)
          continue;
        *((_QWORD *)a2 + 1) = v238 + 2;
LABEL_518:
        *((_DWORD *)this + 73) |= 0x40000000u;
        v239 = *((_QWORD *)this + 31);
        if (!v239)
        {
          v239 = operator new();
          *(_QWORD *)v239 = &off_2511D8360;
          *(_DWORD *)(v239 + 8) = 51;
          *(_DWORD *)(v239 + 20) = 0;
          *(_DWORD *)(v239 + 24) = 0;
          *(_QWORD *)(v239 + 12) = 0;
          *((_QWORD *)this + 31) = v239;
        }
        v274 = 0;
        v240 = (char *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v240 >= *((_QWORD *)a2 + 2) || *v240 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v274))return 0;
        }
        else
        {
          v274 = *v240;
          *((_QWORD *)a2 + 1) = v240 + 1;
        }
        v241 = *((_DWORD *)a2 + 14);
        v242 = *((_DWORD *)a2 + 15);
        *((_DWORD *)a2 + 14) = v241 + 1;
        if (v241 >= v242)
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(a2);
        if (!CLMicroLocationProto::EnabledStateUpdate::MergePartialFromCodedStream((CLMicroLocationProto::EnabledStateUpdate *)v239, a2)|| !*((_BYTE *)a2 + 36))
        {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(a2);
        v243 = *((_DWORD *)a2 + 14);
        v13 = __OFSUB__(v243, 1);
        v244 = v243 - 1;
        if (v244 < 0 == v13)
          *((_DWORD *)a2 + 14) = v244;
        v245 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
        if (*((_DWORD *)a2 + 4) - (int)v245 <= 1 || *v245 != 154 || v245[1] != 2)
          continue;
        *((_QWORD *)a2 + 1) = v245 + 2;
LABEL_533:
        *((_DWORD *)this + 73) |= 0x80000000;
        v246 = *((_QWORD *)this + 32);
        if (!v246)
        {
          v246 = operator new();
          *(_QWORD *)v246 = &off_2511D83D8;
          *(_DWORD *)(v246 + 8) = 52;
          *(_BYTE *)(v246 + 12) = 0;
          *(_QWORD *)(v246 + 16) = 0;
          *((_QWORD *)this + 32) = v246;
        }
        v274 = 0;
        v247 = (char *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v247 >= *((_QWORD *)a2 + 2) || *v247 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v274))return 0;
        }
        else
        {
          v274 = *v247;
          *((_QWORD *)a2 + 1) = v247 + 1;
        }
        v248 = *((_DWORD *)a2 + 14);
        v249 = *((_DWORD *)a2 + 15);
        *((_DWORD *)a2 + 14) = v248 + 1;
        if (v248 >= v249)
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(a2);
        if (!CLMicroLocationProto::ScreenStateUpdate::MergePartialFromCodedStream((CLMicroLocationProto::ScreenStateUpdate *)v246, a2)|| !*((_BYTE *)a2 + 36))
        {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(a2);
        v250 = *((_DWORD *)a2 + 14);
        v13 = __OFSUB__(v250, 1);
        v251 = v250 - 1;
        if (v251 < 0 == v13)
          *((_DWORD *)a2 + 14) = v251;
        v252 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
        if (*((_DWORD *)a2 + 4) - (int)v252 <= 1 || *v252 != 162 || v252[1] != 2)
          continue;
        *((_QWORD *)a2 + 1) = v252 + 2;
LABEL_548:
        *((_DWORD *)this + 74) |= 1u;
        v253 = *((_QWORD *)this + 33);
        if (!v253)
        {
          v253 = operator new();
          *(_QWORD *)v253 = &off_2511D8450;
          *(_QWORD *)(v253 + 8) = 53;
          *(_DWORD *)(v253 + 16) = 0;
          *((_QWORD *)this + 33) = v253;
        }
        v274 = 0;
        v254 = (char *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v254 >= *((_QWORD *)a2 + 2) || *v254 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v274))return 0;
        }
        else
        {
          v274 = *v254;
          *((_QWORD *)a2 + 1) = v254 + 1;
        }
        v255 = *((_DWORD *)a2 + 14);
        v256 = *((_DWORD *)a2 + 15);
        *((_DWORD *)a2 + 14) = v255 + 1;
        if (v255 >= v256)
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(a2);
        if (!CLMicroLocationProto::CloudBackupExport::MergePartialFromCodedStream((CLMicroLocationProto::CloudBackupExport *)v253, a2)|| !*((_BYTE *)a2 + 36))
        {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(a2);
        v257 = *((_DWORD *)a2 + 14);
        v13 = __OFSUB__(v257, 1);
        v258 = v257 - 1;
        if (v258 < 0 == v13)
          *((_DWORD *)a2 + 14) = v258;
        v259 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
        if (*((_DWORD *)a2 + 4) - (int)v259 <= 1 || *v259 != 170 || v259[1] != 2)
          continue;
        *((_QWORD *)a2 + 1) = v259 + 2;
LABEL_563:
        *((_DWORD *)this + 74) |= 2u;
        v260 = *((_QWORD *)this + 34);
        if (!v260)
        {
          v260 = operator new();
          *(_QWORD *)v260 = &off_2511D84C8;
          *(_QWORD *)(v260 + 8) = 54;
          *(_DWORD *)(v260 + 16) = 0;
          *((_QWORD *)this + 34) = v260;
        }
        v274 = 0;
        v261 = (char *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v261 >= *((_QWORD *)a2 + 2) || *v261 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v274))return 0;
        }
        else
        {
          v274 = *v261;
          *((_QWORD *)a2 + 1) = v261 + 1;
        }
        v262 = *((_DWORD *)a2 + 14);
        v263 = *((_DWORD *)a2 + 15);
        *((_DWORD *)a2 + 14) = v262 + 1;
        if (v262 >= v263)
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(a2);
        if (!CLMicroLocationProto::CloudBackupImport::MergePartialFromCodedStream((CLMicroLocationProto::CloudBackupImport *)v260, a2)|| !*((_BYTE *)a2 + 36))
        {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(a2);
        v264 = *((_DWORD *)a2 + 14);
        v13 = __OFSUB__(v264, 1);
        v265 = v264 - 1;
        if (v265 < 0 == v13)
          *((_DWORD *)a2 + 14) = v265;
        v266 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
        if (*((_DWORD *)a2 + 4) - (int)v266 <= 1 || *v266 != 178 || v266[1] != 2)
          continue;
        *((_QWORD *)a2 + 1) = v266 + 2;
LABEL_578:
        *((_DWORD *)this + 74) |= 4u;
        v267 = *((_QWORD *)this + 35);
        if (!v267)
        {
          v267 = operator new();
          *(_QWORD *)v267 = &off_2511D8540;
          *(_QWORD *)(v267 + 8) = 55;
          *(_DWORD *)(v267 + 16) = 0;
          *((_QWORD *)this + 35) = v267;
        }
        v274 = 0;
        v268 = (char *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v268 >= *((_QWORD *)a2 + 2) || *v268 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v274))return 0;
        }
        else
        {
          v274 = *v268;
          *((_QWORD *)a2 + 1) = v268 + 1;
        }
        v269 = *((_DWORD *)a2 + 14);
        v270 = *((_DWORD *)a2 + 15);
        *((_DWORD *)a2 + 14) = v269 + 1;
        if (v269 >= v270)
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(a2);
        if (!CLMicroLocationProto::DataMigration::MergePartialFromCodedStream((CLMicroLocationProto::DataMigration *)v267, a2)|| !*((_BYTE *)a2 + 36))
        {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(a2);
        v271 = *((_DWORD *)a2 + 14);
        v13 = __OFSUB__(v271, 1);
        v272 = v271 - 1;
        if (v272 < 0 == v13)
          *((_DWORD *)a2 + 14) = v272;
        if (*((_QWORD *)a2 + 1) == *((_QWORD *)a2 + 2)
          && (*((_DWORD *)a2 + 11) || *((_DWORD *)a2 + 6) == *((_DWORD *)a2 + 10)))
        {
          *((_DWORD *)a2 + 8) = 0;
          result = 1;
          *((_BYTE *)a2 + 36) = 1;
          return result;
        }
        break;
      case 4u:
        v6 = TagFallback & 7;
        if (v6 == 2)
          goto LABEL_107;
        goto LABEL_81;
      case 5u:
        v6 = TagFallback & 7;
        if (v6 == 2)
          goto LABEL_121;
        goto LABEL_81;
      case 7u:
        v6 = TagFallback & 7;
        if (v6 == 2)
          goto LABEL_135;
        goto LABEL_81;
      case 9u:
        v6 = TagFallback & 7;
        if (v6 == 2)
          goto LABEL_149;
        goto LABEL_81;
      case 0xAu:
        v6 = TagFallback & 7;
        if (v6 == 2)
          goto LABEL_163;
        goto LABEL_81;
      case 0xBu:
        v6 = TagFallback & 7;
        if (v6 == 2)
          goto LABEL_177;
        goto LABEL_81;
      case 0xCu:
        v6 = TagFallback & 7;
        if (v6 == 2)
          goto LABEL_191;
        goto LABEL_81;
      case 0xDu:
        v6 = TagFallback & 7;
        if (v6 == 2)
          goto LABEL_205;
        goto LABEL_81;
      case 0xEu:
        v6 = TagFallback & 7;
        if (v6 == 2)
          goto LABEL_219;
        goto LABEL_81;
      case 0xFu:
        v6 = TagFallback & 7;
        if (v6 == 2)
          goto LABEL_233;
        goto LABEL_81;
      case 0x10u:
        v6 = TagFallback & 7;
        if (v6 == 2)
          goto LABEL_248;
        goto LABEL_81;
      case 0x11u:
        v6 = TagFallback & 7;
        if (v6 == 2)
          goto LABEL_263;
        goto LABEL_81;
      case 0x12u:
        v6 = TagFallback & 7;
        if (v6 == 2)
          goto LABEL_278;
        goto LABEL_81;
      case 0x13u:
        v6 = TagFallback & 7;
        if (v6 == 2)
          goto LABEL_293;
        goto LABEL_81;
      case 0x14u:
        v6 = TagFallback & 7;
        if (v6 == 2)
          goto LABEL_308;
        goto LABEL_81;
      case 0x15u:
        v6 = TagFallback & 7;
        if (v6 == 2)
          goto LABEL_323;
        goto LABEL_81;
      case 0x16u:
        v6 = TagFallback & 7;
        if (v6 == 2)
          goto LABEL_338;
        goto LABEL_81;
      case 0x17u:
        v6 = TagFallback & 7;
        if (v6 == 2)
          goto LABEL_353;
        goto LABEL_81;
      case 0x18u:
        v6 = TagFallback & 7;
        if (v6 == 2)
          goto LABEL_368;
        goto LABEL_81;
      case 0x19u:
        v6 = TagFallback & 7;
        if (v6 == 2)
          goto LABEL_383;
        goto LABEL_81;
      case 0x1Au:
        v6 = TagFallback & 7;
        if (v6 == 2)
          goto LABEL_398;
        goto LABEL_81;
      case 0x1Bu:
        v6 = TagFallback & 7;
        if (v6 == 2)
          goto LABEL_413;
        goto LABEL_81;
      case 0x1Cu:
        v6 = TagFallback & 7;
        if (v6 == 2)
          goto LABEL_428;
        goto LABEL_81;
      case 0x1Du:
        v6 = TagFallback & 7;
        if (v6 == 2)
          goto LABEL_443;
        goto LABEL_81;
      case 0x1Eu:
        v6 = TagFallback & 7;
        if (v6 == 2)
          goto LABEL_458;
        goto LABEL_81;
      case 0x1Fu:
        v6 = TagFallback & 7;
        if (v6 == 2)
          goto LABEL_473;
        goto LABEL_81;
      case 0x20u:
        v6 = TagFallback & 7;
        if (v6 == 2)
          goto LABEL_488;
        goto LABEL_81;
      case 0x21u:
        v6 = TagFallback & 7;
        if (v6 == 2)
          goto LABEL_503;
        goto LABEL_81;
      case 0x22u:
        v6 = TagFallback & 7;
        if (v6 == 2)
          goto LABEL_518;
        goto LABEL_81;
      case 0x23u:
        v6 = TagFallback & 7;
        if (v6 == 2)
          goto LABEL_533;
        goto LABEL_81;
      case 0x24u:
        v6 = TagFallback & 7;
        if (v6 == 2)
          goto LABEL_548;
        goto LABEL_81;
      case 0x25u:
        v6 = TagFallback & 7;
        if (v6 == 2)
          goto LABEL_563;
        goto LABEL_81;
      case 0x26u:
        v6 = TagFallback & 7;
        if (v6 != 2)
          goto LABEL_81;
        goto LABEL_578;
      default:
        v6 = TagFallback & 7;
LABEL_81:
        if (v6 == 4)
          return 1;
        if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(a2, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback) & 1) == 0)return 0;
        continue;
    }
  }
}

uint64_t CLMicroLocationProto::ReceivedEvent::SerializeWithCachedSizes(uint64_t this, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v5 = this;
  v6 = *(_DWORD *)(this + 292);
  if ((v6 & 1) != 0)
  {
    v7 = *(_QWORD *)(this + 8);
    if (!v7)
    {
      CLMicroLocationProto::protobuf_AddDesc_microlocation_2eproto((CLMicroLocationProto *)this);
      v7 = *(_QWORD *)(CLMicroLocationProto::ReceivedEvent::default_instance_ + 8);
    }
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, v7, a2, a4);
    v6 = *(_DWORD *)(v5 + 292);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0)
        goto LABEL_4;
      goto LABEL_40;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  v8 = *(_QWORD *)(v5 + 16);
  if (!v8)
  {
    CLMicroLocationProto::protobuf_AddDesc_microlocation_2eproto((CLMicroLocationProto *)this);
    v8 = *(_QWORD *)(CLMicroLocationProto::ReceivedEvent::default_instance_ + 16);
  }
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, v8, a2, a4);
  v6 = *(_DWORD *)(v5 + 292);
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0)
      goto LABEL_5;
    goto LABEL_43;
  }
LABEL_40:
  v9 = *(_QWORD *)(v5 + 24);
  if (!v9)
  {
    CLMicroLocationProto::protobuf_AddDesc_microlocation_2eproto((CLMicroLocationProto *)this);
    v9 = *(_QWORD *)(CLMicroLocationProto::ReceivedEvent::default_instance_ + 24);
  }
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4, v9, a2, a4);
  v6 = *(_DWORD *)(v5 + 292);
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_46;
  }
LABEL_43:
  v10 = *(_QWORD *)(v5 + 32);
  if (!v10)
  {
    CLMicroLocationProto::protobuf_AddDesc_microlocation_2eproto((CLMicroLocationProto *)this);
    v10 = *(_QWORD *)(CLMicroLocationProto::ReceivedEvent::default_instance_ + 32);
  }
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5, v10, a2, a4);
  v6 = *(_DWORD *)(v5 + 292);
  if ((v6 & 0x10) == 0)
  {
LABEL_6:
    if ((v6 & 0x20) == 0)
      goto LABEL_7;
    goto LABEL_49;
  }
LABEL_46:
  v11 = *(_QWORD *)(v5 + 40);
  if (!v11)
  {
    CLMicroLocationProto::protobuf_AddDesc_microlocation_2eproto((CLMicroLocationProto *)this);
    v11 = *(_QWORD *)(CLMicroLocationProto::ReceivedEvent::default_instance_ + 40);
  }
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)7, v11, a2, a4);
  v6 = *(_DWORD *)(v5 + 292);
  if ((v6 & 0x20) == 0)
  {
LABEL_7:
    if ((v6 & 0x40) == 0)
      goto LABEL_8;
    goto LABEL_52;
  }
LABEL_49:
  v12 = *(_QWORD *)(v5 + 48);
  if (!v12)
  {
    CLMicroLocationProto::protobuf_AddDesc_microlocation_2eproto((CLMicroLocationProto *)this);
    v12 = *(_QWORD *)(CLMicroLocationProto::ReceivedEvent::default_instance_ + 48);
  }
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)9, v12, a2, a4);
  v6 = *(_DWORD *)(v5 + 292);
  if ((v6 & 0x40) == 0)
  {
LABEL_8:
    if ((v6 & 0x80) == 0)
      goto LABEL_9;
    goto LABEL_55;
  }
LABEL_52:
  v13 = *(_QWORD *)(v5 + 56);
  if (!v13)
  {
    CLMicroLocationProto::protobuf_AddDesc_microlocation_2eproto((CLMicroLocationProto *)this);
    v13 = *(_QWORD *)(CLMicroLocationProto::ReceivedEvent::default_instance_ + 56);
  }
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xA, v13, a2, a4);
  v6 = *(_DWORD *)(v5 + 292);
  if ((v6 & 0x80) == 0)
  {
LABEL_9:
    if ((v6 & 0x100) == 0)
      goto LABEL_10;
    goto LABEL_58;
  }
LABEL_55:
  v14 = *(_QWORD *)(v5 + 64);
  if (!v14)
  {
    CLMicroLocationProto::protobuf_AddDesc_microlocation_2eproto((CLMicroLocationProto *)this);
    v14 = *(_QWORD *)(CLMicroLocationProto::ReceivedEvent::default_instance_ + 64);
  }
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xB, v14, a2, a4);
  v6 = *(_DWORD *)(v5 + 292);
  if ((v6 & 0x100) == 0)
  {
LABEL_10:
    if ((v6 & 0x200) == 0)
      goto LABEL_11;
    goto LABEL_61;
  }
LABEL_58:
  v15 = *(_QWORD *)(v5 + 72);
  if (!v15)
  {
    CLMicroLocationProto::protobuf_AddDesc_microlocation_2eproto((CLMicroLocationProto *)this);
    v15 = *(_QWORD *)(CLMicroLocationProto::ReceivedEvent::default_instance_ + 72);
  }
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xC, v15, a2, a4);
  v6 = *(_DWORD *)(v5 + 292);
  if ((v6 & 0x200) == 0)
  {
LABEL_11:
    if ((v6 & 0x400) == 0)
      goto LABEL_12;
    goto LABEL_64;
  }
LABEL_61:
  v16 = *(_QWORD *)(v5 + 80);
  if (!v16)
  {
    CLMicroLocationProto::protobuf_AddDesc_microlocation_2eproto((CLMicroLocationProto *)this);
    v16 = *(_QWORD *)(CLMicroLocationProto::ReceivedEvent::default_instance_ + 80);
  }
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xD, v16, a2, a4);
  v6 = *(_DWORD *)(v5 + 292);
  if ((v6 & 0x400) == 0)
  {
LABEL_12:
    if ((v6 & 0x800) == 0)
      goto LABEL_13;
    goto LABEL_67;
  }
LABEL_64:
  v17 = *(_QWORD *)(v5 + 88);
  if (!v17)
  {
    CLMicroLocationProto::protobuf_AddDesc_microlocation_2eproto((CLMicroLocationProto *)this);
    v17 = *(_QWORD *)(CLMicroLocationProto::ReceivedEvent::default_instance_ + 88);
  }
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xE, v17, a2, a4);
  v6 = *(_DWORD *)(v5 + 292);
  if ((v6 & 0x800) == 0)
  {
LABEL_13:
    if ((v6 & 0x1000) == 0)
      goto LABEL_14;
    goto LABEL_70;
  }
LABEL_67:
  v18 = *(_QWORD *)(v5 + 96);
  if (!v18)
  {
    CLMicroLocationProto::protobuf_AddDesc_microlocation_2eproto((CLMicroLocationProto *)this);
    v18 = *(_QWORD *)(CLMicroLocationProto::ReceivedEvent::default_instance_ + 96);
  }
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xF, v18, a2, a4);
  v6 = *(_DWORD *)(v5 + 292);
  if ((v6 & 0x1000) == 0)
  {
LABEL_14:
    if ((v6 & 0x2000) == 0)
      goto LABEL_15;
    goto LABEL_73;
  }
LABEL_70:
  v19 = *(_QWORD *)(v5 + 104);
  if (!v19)
  {
    CLMicroLocationProto::protobuf_AddDesc_microlocation_2eproto((CLMicroLocationProto *)this);
    v19 = *(_QWORD *)(CLMicroLocationProto::ReceivedEvent::default_instance_ + 104);
  }
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x10, v19, a2, a4);
  v6 = *(_DWORD *)(v5 + 292);
  if ((v6 & 0x2000) == 0)
  {
LABEL_15:
    if ((v6 & 0x4000) == 0)
      goto LABEL_16;
    goto LABEL_76;
  }
LABEL_73:
  v20 = *(_QWORD *)(v5 + 112);
  if (!v20)
  {
    CLMicroLocationProto::protobuf_AddDesc_microlocation_2eproto((CLMicroLocationProto *)this);
    v20 = *(_QWORD *)(CLMicroLocationProto::ReceivedEvent::default_instance_ + 112);
  }
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x11, v20, a2, a4);
  v6 = *(_DWORD *)(v5 + 292);
  if ((v6 & 0x4000) == 0)
  {
LABEL_16:
    if ((v6 & 0x8000) == 0)
      goto LABEL_17;
    goto LABEL_79;
  }
LABEL_76:
  v21 = *(_QWORD *)(v5 + 120);
  if (!v21)
  {
    CLMicroLocationProto::protobuf_AddDesc_microlocation_2eproto((CLMicroLocationProto *)this);
    v21 = *(_QWORD *)(CLMicroLocationProto::ReceivedEvent::default_instance_ + 120);
  }
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x12, v21, a2, a4);
  v6 = *(_DWORD *)(v5 + 292);
  if ((v6 & 0x8000) == 0)
  {
LABEL_17:
    if ((v6 & 0x10000) == 0)
      goto LABEL_18;
    goto LABEL_82;
  }
LABEL_79:
  v22 = *(_QWORD *)(v5 + 128);
  if (!v22)
  {
    CLMicroLocationProto::protobuf_AddDesc_microlocation_2eproto((CLMicroLocationProto *)this);
    v22 = *(_QWORD *)(CLMicroLocationProto::ReceivedEvent::default_instance_ + 128);
  }
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x13, v22, a2, a4);
  v6 = *(_DWORD *)(v5 + 292);
  if ((v6 & 0x10000) == 0)
  {
LABEL_18:
    if ((v6 & 0x20000) == 0)
      goto LABEL_19;
    goto LABEL_85;
  }
LABEL_82:
  v23 = *(_QWORD *)(v5 + 136);
  if (!v23)
  {
    CLMicroLocationProto::protobuf_AddDesc_microlocation_2eproto((CLMicroLocationProto *)this);
    v23 = *(_QWORD *)(CLMicroLocationProto::ReceivedEvent::default_instance_ + 136);
  }
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x14, v23, a2, a4);
  v6 = *(_DWORD *)(v5 + 292);
  if ((v6 & 0x20000) == 0)
  {
LABEL_19:
    if ((v6 & 0x40000) == 0)
      goto LABEL_20;
    goto LABEL_88;
  }
LABEL_85:
  v24 = *(_QWORD *)(v5 + 144);
  if (!v24)
  {
    CLMicroLocationProto::protobuf_AddDesc_microlocation_2eproto((CLMicroLocationProto *)this);
    v24 = *(_QWORD *)(CLMicroLocationProto::ReceivedEvent::default_instance_ + 144);
  }
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x15, v24, a2, a4);
  v6 = *(_DWORD *)(v5 + 292);
  if ((v6 & 0x40000) == 0)
  {
LABEL_20:
    if ((v6 & 0x80000) == 0)
      goto LABEL_21;
    goto LABEL_91;
  }
LABEL_88:
  v25 = *(_QWORD *)(v5 + 152);
  if (!v25)
  {
    CLMicroLocationProto::protobuf_AddDesc_microlocation_2eproto((CLMicroLocationProto *)this);
    v25 = *(_QWORD *)(CLMicroLocationProto::ReceivedEvent::default_instance_ + 152);
  }
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x16, v25, a2, a4);
  v6 = *(_DWORD *)(v5 + 292);
  if ((v6 & 0x80000) == 0)
  {
LABEL_21:
    if ((v6 & 0x100000) == 0)
      goto LABEL_22;
    goto LABEL_94;
  }
LABEL_91:
  v26 = *(_QWORD *)(v5 + 160);
  if (!v26)
  {
    CLMicroLocationProto::protobuf_AddDesc_microlocation_2eproto((CLMicroLocationProto *)this);
    v26 = *(_QWORD *)(CLMicroLocationProto::ReceivedEvent::default_instance_ + 160);
  }
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x17, v26, a2, a4);
  v6 = *(_DWORD *)(v5 + 292);
  if ((v6 & 0x100000) == 0)
  {
LABEL_22:
    if ((v6 & 0x200000) == 0)
      goto LABEL_23;
    goto LABEL_97;
  }
LABEL_94:
  v27 = *(_QWORD *)(v5 + 168);
  if (!v27)
  {
    CLMicroLocationProto::protobuf_AddDesc_microlocation_2eproto((CLMicroLocationProto *)this);
    v27 = *(_QWORD *)(CLMicroLocationProto::ReceivedEvent::default_instance_ + 168);
  }
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x18, v27, a2, a4);
  v6 = *(_DWORD *)(v5 + 292);
  if ((v6 & 0x200000) == 0)
  {
LABEL_23:
    if ((v6 & 0x400000) == 0)
      goto LABEL_24;
    goto LABEL_100;
  }
LABEL_97:
  v28 = *(_QWORD *)(v5 + 176);
  if (!v28)
  {
    CLMicroLocationProto::protobuf_AddDesc_microlocation_2eproto((CLMicroLocationProto *)this);
    v28 = *(_QWORD *)(CLMicroLocationProto::ReceivedEvent::default_instance_ + 176);
  }
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x19, v28, a2, a4);
  v6 = *(_DWORD *)(v5 + 292);
  if ((v6 & 0x400000) == 0)
  {
LABEL_24:
    if ((v6 & 0x800000) == 0)
      goto LABEL_25;
    goto LABEL_103;
  }
LABEL_100:
  v29 = *(_QWORD *)(v5 + 184);
  if (!v29)
  {
    CLMicroLocationProto::protobuf_AddDesc_microlocation_2eproto((CLMicroLocationProto *)this);
    v29 = *(_QWORD *)(CLMicroLocationProto::ReceivedEvent::default_instance_ + 184);
  }
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x1A, v29, a2, a4);
  v6 = *(_DWORD *)(v5 + 292);
  if ((v6 & 0x800000) == 0)
  {
LABEL_25:
    if ((v6 & 0x1000000) == 0)
      goto LABEL_26;
    goto LABEL_106;
  }
LABEL_103:
  v30 = *(_QWORD *)(v5 + 192);
  if (!v30)
  {
    CLMicroLocationProto::protobuf_AddDesc_microlocation_2eproto((CLMicroLocationProto *)this);
    v30 = *(_QWORD *)(CLMicroLocationProto::ReceivedEvent::default_instance_ + 192);
  }
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x1B, v30, a2, a4);
  v6 = *(_DWORD *)(v5 + 292);
  if ((v6 & 0x1000000) == 0)
  {
LABEL_26:
    if ((v6 & 0x2000000) == 0)
      goto LABEL_27;
    goto LABEL_109;
  }
LABEL_106:
  v31 = *(_QWORD *)(v5 + 200);
  if (!v31)
  {
    CLMicroLocationProto::protobuf_AddDesc_microlocation_2eproto((CLMicroLocationProto *)this);
    v31 = *(_QWORD *)(CLMicroLocationProto::ReceivedEvent::default_instance_ + 200);
  }
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x1C, v31, a2, a4);
  v6 = *(_DWORD *)(v5 + 292);
  if ((v6 & 0x2000000) == 0)
  {
LABEL_27:
    if ((v6 & 0x4000000) == 0)
      goto LABEL_28;
    goto LABEL_112;
  }
LABEL_109:
  v32 = *(_QWORD *)(v5 + 208);
  if (!v32)
  {
    CLMicroLocationProto::protobuf_AddDesc_microlocation_2eproto((CLMicroLocationProto *)this);
    v32 = *(_QWORD *)(CLMicroLocationProto::ReceivedEvent::default_instance_ + 208);
  }
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x1D, v32, a2, a4);
  v6 = *(_DWORD *)(v5 + 292);
  if ((v6 & 0x4000000) == 0)
  {
LABEL_28:
    if ((v6 & 0x8000000) == 0)
      goto LABEL_29;
    goto LABEL_115;
  }
LABEL_112:
  v33 = *(_QWORD *)(v5 + 216);
  if (!v33)
  {
    CLMicroLocationProto::protobuf_AddDesc_microlocation_2eproto((CLMicroLocationProto *)this);
    v33 = *(_QWORD *)(CLMicroLocationProto::ReceivedEvent::default_instance_ + 216);
  }
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x1E, v33, a2, a4);
  v6 = *(_DWORD *)(v5 + 292);
  if ((v6 & 0x8000000) == 0)
  {
LABEL_29:
    if ((v6 & 0x10000000) == 0)
      goto LABEL_30;
    goto LABEL_118;
  }
LABEL_115:
  v34 = *(_QWORD *)(v5 + 224);
  if (!v34)
  {
    CLMicroLocationProto::protobuf_AddDesc_microlocation_2eproto((CLMicroLocationProto *)this);
    v34 = *(_QWORD *)(CLMicroLocationProto::ReceivedEvent::default_instance_ + 224);
  }
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x1F, v34, a2, a4);
  v6 = *(_DWORD *)(v5 + 292);
  if ((v6 & 0x10000000) == 0)
  {
LABEL_30:
    if ((v6 & 0x20000000) == 0)
      goto LABEL_31;
    goto LABEL_121;
  }
LABEL_118:
  v35 = *(_QWORD *)(v5 + 232);
  if (!v35)
  {
    CLMicroLocationProto::protobuf_AddDesc_microlocation_2eproto((CLMicroLocationProto *)this);
    v35 = *(_QWORD *)(CLMicroLocationProto::ReceivedEvent::default_instance_ + 232);
  }
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x20, v35, a2, a4);
  v6 = *(_DWORD *)(v5 + 292);
  if ((v6 & 0x20000000) == 0)
  {
LABEL_31:
    if ((v6 & 0x40000000) == 0)
      goto LABEL_32;
    goto LABEL_124;
  }
LABEL_121:
  v36 = *(_QWORD *)(v5 + 240);
  if (!v36)
  {
    CLMicroLocationProto::protobuf_AddDesc_microlocation_2eproto((CLMicroLocationProto *)this);
    v36 = *(_QWORD *)(CLMicroLocationProto::ReceivedEvent::default_instance_ + 240);
  }
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x21, v36, a2, a4);
  v6 = *(_DWORD *)(v5 + 292);
  if ((v6 & 0x40000000) == 0)
  {
LABEL_32:
    if ((v6 & 0x80000000) == 0)
      goto LABEL_130;
    goto LABEL_127;
  }
LABEL_124:
  v37 = *(_QWORD *)(v5 + 248);
  if (!v37)
  {
    CLMicroLocationProto::protobuf_AddDesc_microlocation_2eproto((CLMicroLocationProto *)this);
    v37 = *(_QWORD *)(CLMicroLocationProto::ReceivedEvent::default_instance_ + 248);
  }
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x22, v37, a2, a4);
  if ((*(_DWORD *)(v5 + 292) & 0x80000000) != 0)
  {
LABEL_127:
    v38 = *(_QWORD *)(v5 + 256);
    if (!v38)
    {
      CLMicroLocationProto::protobuf_AddDesc_microlocation_2eproto((CLMicroLocationProto *)this);
      v38 = *(_QWORD *)(CLMicroLocationProto::ReceivedEvent::default_instance_ + 256);
    }
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x23, v38, a2, a4);
  }
LABEL_130:
  v39 = *(_DWORD *)(v5 + 296);
  if ((v39 & 1) != 0)
  {
    v40 = *(_QWORD *)(v5 + 264);
    if (!v40)
    {
      CLMicroLocationProto::protobuf_AddDesc_microlocation_2eproto((CLMicroLocationProto *)this);
      v40 = *(_QWORD *)(CLMicroLocationProto::ReceivedEvent::default_instance_ + 264);
    }
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x24, v40, a2, a4);
    v39 = *(_DWORD *)(v5 + 296);
    if ((v39 & 2) == 0)
    {
LABEL_132:
      if ((v39 & 4) == 0)
        return this;
      goto LABEL_140;
    }
  }
  else if ((v39 & 2) == 0)
  {
    goto LABEL_132;
  }
  v41 = *(_QWORD *)(v5 + 272);
  if (!v41)
  {
    CLMicroLocationProto::protobuf_AddDesc_microlocation_2eproto((CLMicroLocationProto *)this);
    v41 = *(_QWORD *)(CLMicroLocationProto::ReceivedEvent::default_instance_ + 272);
  }
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x25, v41, a2, a4);
  if ((*(_DWORD *)(v5 + 296) & 4) != 0)
  {
LABEL_140:
    v42 = *(_QWORD *)(v5 + 280);
    if (!v42)
    {
      CLMicroLocationProto::protobuf_AddDesc_microlocation_2eproto((CLMicroLocationProto *)this);
      v42 = *(_QWORD *)(CLMicroLocationProto::ReceivedEvent::default_instance_ + 280);
    }
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x26, v42, a2, a4);
  }
  return this;
}

uint64_t CLMicroLocationProto::ReceivedEvent::ByteSize(CLMicroLocationProto::ReceivedEvent *this)
{
  unsigned int v2;
  uint64_t v3;
  CLMicroLocationProto::ReceivedEventAction *v4;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v5;
  int v6;
  int v7;
  uint64_t v8;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v9;
  int v10;
  int v11;
  CLMicroLocationProto::BacklightOn *v12;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v13;
  int v14;
  int v15;
  CLMicroLocationProto::BatteryChargerConnected *v16;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v17;
  int v18;
  int v19;
  CLMicroLocationProto::ForcedRecording *v20;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v21;
  int v22;
  int v23;
  CLMicroLocationProto::HomeKitAccessory *v24;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v25;
  int v26;
  int v27;
  CLMicroLocationProto::HomeKitScene *v28;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v29;
  int v30;
  int v31;
  uint64_t v32;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v33;
  int v34;
  int v35;
  CLMicroLocationProto::RecordingRequest *v36;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v37;
  int v38;
  int v39;
  CLMicroLocationProto::TruthLabelDonation *v40;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v41;
  int v42;
  int v43;
  CLMicroLocationProto::LearnModel *v44;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v45;
  int v46;
  int v47;
  CLMicroLocationProto::LearnCompleted *v48;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v49;
  int v50;
  int v51;
  CLMicroLocationProto::SensorsScanComplete *v52;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v53;
  int v54;
  int v55;
  CLMicroLocationProto::StartSpectating *v56;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v57;
  int v58;
  int v59;
  CLMicroLocationProto::StopSpectating *v60;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v61;
  int v62;
  int v63;
  CLMicroLocationProto::ServiceCreate *v64;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v65;
  int v66;
  int v67;
  CLMicroLocationProto::ServiceDelete *v68;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v69;
  int v70;
  int v71;
  CLMicroLocationProto::ServiceConnect *v72;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v73;
  int v74;
  int v75;
  CLMicroLocationProto::ServiceDisconnect *v76;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v77;
  int v78;
  int v79;
  CLMicroLocationProto::ServiceStartUpdating *v80;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v81;
  int v82;
  int v83;
  CLMicroLocationProto::ServiceStopUpdating *v84;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v85;
  int v86;
  int v87;
  CLMicroLocationProto::RequestObservation *v88;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v89;
  int v90;
  int v91;
  CLMicroLocationProto::RequestPrediction *v92;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v93;
  int v94;
  int v95;
  CLMicroLocationProto::MiloInit *v96;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v97;
  int v98;
  int v99;
  CLMicroLocationProto::MotionEvent *v100;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v101;
  int v102;
  int v103;
  CLMicroLocationProto::LegacyThrottle *v104;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v105;
  int v106;
  int v107;
  CLMicroLocationProto::RetrievedLoi *v108;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v109;
  int v110;
  int v111;
  CLMicroLocationProto::TriggerEvent *v112;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v113;
  int v114;
  int v115;
  CLMicroLocationProto::LegacyClientStatusUpdate *v116;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v117;
  int v118;
  int v119;
  CLMicroLocationProto::SpectatingMotionUpdate *v120;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v121;
  int v122;
  int v123;
  CLMicroLocationProto::EnabledStateUpdate *v124;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v125;
  int v126;
  int v127;
  CLMicroLocationProto::ScreenStateUpdate *v128;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v129;
  int v130;
  int v131;
  int v132;
  CLMicroLocationProto::CloudBackupExport *v133;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v134;
  int v135;
  int v136;
  CLMicroLocationProto::CloudBackupImport *v137;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v138;
  int v139;
  int v140;
  CLMicroLocationProto::DataMigration *v141;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v142;
  int v143;
  int v144;

  v2 = *((_DWORD *)this + 73);
  if (!(_BYTE)v2)
  {
    v3 = 0;
    goto LABEL_61;
  }
  if ((v2 & 1) == 0)
  {
    v3 = 0;
    if ((v2 & 2) == 0)
      goto LABEL_18;
    goto LABEL_12;
  }
  v4 = (CLMicroLocationProto::ReceivedEventAction *)*((_QWORD *)this + 1);
  if (!v4)
  {
    CLMicroLocationProto::protobuf_AddDesc_microlocation_2eproto(0);
    v4 = *(CLMicroLocationProto::ReceivedEventAction **)(CLMicroLocationProto::ReceivedEvent::default_instance_ + 8);
  }
  v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)CLMicroLocationProto::ReceivedEventAction::ByteSize(v4);
  v6 = (int)v5;
  if (v5 >= 0x80)
    v7 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v5);
  else
    v7 = 1;
  v3 = (v6 + v7 + 1);
  v2 = *((_DWORD *)this + 73);
  if ((v2 & 2) != 0)
  {
LABEL_12:
    v8 = *((_QWORD *)this + 2);
    if (!v8)
    {
      CLMicroLocationProto::protobuf_AddDesc_microlocation_2eproto(0);
      v8 = *(_QWORD *)(CLMicroLocationProto::ReceivedEvent::default_instance_ + 16);
    }
    v9 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)CLMicroLocationProto::AppLaunch::ByteSize(v8);
    v10 = (int)v9;
    if (v9 >= 0x80)
      v11 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v9);
    else
      v11 = 1;
    v3 = (v3 + v10 + v11 + 1);
    v2 = *((_DWORD *)this + 73);
  }
LABEL_18:
  if ((v2 & 4) != 0)
  {
    v12 = (CLMicroLocationProto::BacklightOn *)*((_QWORD *)this + 3);
    if (!v12)
    {
      CLMicroLocationProto::protobuf_AddDesc_microlocation_2eproto(0);
      v12 = *(CLMicroLocationProto::BacklightOn **)(CLMicroLocationProto::ReceivedEvent::default_instance_ + 24);
    }
    v13 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)CLMicroLocationProto::BacklightOn::ByteSize(v12);
    v14 = (int)v13;
    if (v13 >= 0x80)
      v15 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v13);
    else
      v15 = 1;
    v3 = (v3 + v14 + v15 + 1);
    v2 = *((_DWORD *)this + 73);
    if ((v2 & 8) == 0)
    {
LABEL_20:
      if ((v2 & 0x10) == 0)
        goto LABEL_21;
      goto LABEL_37;
    }
  }
  else if ((v2 & 8) == 0)
  {
    goto LABEL_20;
  }
  v16 = (CLMicroLocationProto::BatteryChargerConnected *)*((_QWORD *)this + 4);
  if (!v16)
  {
    CLMicroLocationProto::protobuf_AddDesc_microlocation_2eproto(0);
    v16 = *(CLMicroLocationProto::BatteryChargerConnected **)(CLMicroLocationProto::ReceivedEvent::default_instance_ + 32);
  }
  v17 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)CLMicroLocationProto::BatteryChargerConnected::ByteSize(v16);
  v18 = (int)v17;
  if (v17 >= 0x80)
    v19 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v17);
  else
    v19 = 1;
  v3 = (v3 + v18 + v19 + 1);
  v2 = *((_DWORD *)this + 73);
  if ((v2 & 0x10) == 0)
  {
LABEL_21:
    if ((v2 & 0x20) == 0)
      goto LABEL_22;
    goto LABEL_43;
  }
LABEL_37:
  v20 = (CLMicroLocationProto::ForcedRecording *)*((_QWORD *)this + 5);
  if (!v20)
  {
    CLMicroLocationProto::protobuf_AddDesc_microlocation_2eproto(0);
    v20 = *(CLMicroLocationProto::ForcedRecording **)(CLMicroLocationProto::ReceivedEvent::default_instance_ + 40);
  }
  v21 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)CLMicroLocationProto::ForcedRecording::ByteSize(v20);
  v22 = (int)v21;
  if (v21 >= 0x80)
    v23 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v21);
  else
    v23 = 1;
  v3 = (v3 + v22 + v23 + 1);
  v2 = *((_DWORD *)this + 73);
  if ((v2 & 0x20) == 0)
  {
LABEL_22:
    if ((v2 & 0x40) == 0)
      goto LABEL_23;
    goto LABEL_49;
  }
LABEL_43:
  v24 = (CLMicroLocationProto::HomeKitAccessory *)*((_QWORD *)this + 6);
  if (!v24)
  {
    CLMicroLocationProto::protobuf_AddDesc_microlocation_2eproto(0);
    v24 = *(CLMicroLocationProto::HomeKitAccessory **)(CLMicroLocationProto::ReceivedEvent::default_instance_ + 48);
  }
  v25 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)CLMicroLocationProto::HomeKitAccessory::ByteSize(v24);
  v26 = (int)v25;
  if (v25 >= 0x80)
    v27 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v25);
  else
    v27 = 1;
  v3 = (v3 + v26 + v27 + 1);
  v2 = *((_DWORD *)this + 73);
  if ((v2 & 0x40) == 0)
  {
LABEL_23:
    if ((v2 & 0x80) == 0)
      goto LABEL_61;
    goto LABEL_55;
  }
LABEL_49:
  v28 = (CLMicroLocationProto::HomeKitScene *)*((_QWORD *)this + 7);
  if (!v28)
  {
    CLMicroLocationProto::protobuf_AddDesc_microlocation_2eproto(0);
    v28 = *(CLMicroLocationProto::HomeKitScene **)(CLMicroLocationProto::ReceivedEvent::default_instance_ + 56);
  }
  v29 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)CLMicroLocationProto::HomeKitScene::ByteSize(v28);
  v30 = (int)v29;
  if (v29 >= 0x80)
    v31 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v29);
  else
    v31 = 1;
  v3 = (v3 + v30 + v31 + 1);
  v2 = *((_DWORD *)this + 73);
  if ((v2 & 0x80) != 0)
  {
LABEL_55:
    v32 = *((_QWORD *)this + 8);
    if (!v32)
    {
      CLMicroLocationProto::protobuf_AddDesc_microlocation_2eproto(0);
      v32 = *(_QWORD *)(CLMicroLocationProto::ReceivedEvent::default_instance_ + 64);
    }
    v33 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)CLMicroLocationProto::NowPlaying::ByteSize(v32);
    v34 = (int)v33;
    if (v33 >= 0x80)
      v35 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v33);
    else
      v35 = 1;
    v3 = (v3 + v34 + v35 + 1);
    v2 = *((_DWORD *)this + 73);
  }
LABEL_61:
  if ((v2 & 0xFF00) == 0)
    goto LABEL_119;
  if ((v2 & 0x100) != 0)
  {
    v36 = (CLMicroLocationProto::RecordingRequest *)*((_QWORD *)this + 9);
    if (!v36)
    {
      CLMicroLocationProto::protobuf_AddDesc_microlocation_2eproto(0);
      v36 = *(CLMicroLocationProto::RecordingRequest **)(CLMicroLocationProto::ReceivedEvent::default_instance_ + 72);
    }
    v37 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)CLMicroLocationProto::RecordingRequest::ByteSize(v36);
    v38 = (int)v37;
    if (v37 >= 0x80)
      v39 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v37);
    else
      v39 = 1;
    v3 = (v3 + v38 + v39 + 1);
    v2 = *((_DWORD *)this + 73);
    if ((v2 & 0x200) == 0)
    {
LABEL_64:
      if ((v2 & 0x400) == 0)
        goto LABEL_65;
      goto LABEL_83;
    }
  }
  else if ((v2 & 0x200) == 0)
  {
    goto LABEL_64;
  }
  v40 = (CLMicroLocationProto::TruthLabelDonation *)*((_QWORD *)this + 10);
  if (!v40)
  {
    CLMicroLocationProto::protobuf_AddDesc_microlocation_2eproto(0);
    v40 = *(CLMicroLocationProto::TruthLabelDonation **)(CLMicroLocationProto::ReceivedEvent::default_instance_ + 80);
  }
  v41 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)CLMicroLocationProto::TruthLabelDonation::ByteSize(v40);
  v42 = (int)v41;
  if (v41 >= 0x80)
    v43 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v41);
  else
    v43 = 1;
  v3 = (v3 + v42 + v43 + 1);
  v2 = *((_DWORD *)this + 73);
  if ((v2 & 0x400) == 0)
  {
LABEL_65:
    if ((v2 & 0x800) == 0)
      goto LABEL_66;
    goto LABEL_89;
  }
LABEL_83:
  v44 = (CLMicroLocationProto::LearnModel *)*((_QWORD *)this + 11);
  if (!v44)
  {
    CLMicroLocationProto::protobuf_AddDesc_microlocation_2eproto(0);
    v44 = *(CLMicroLocationProto::LearnModel **)(CLMicroLocationProto::ReceivedEvent::default_instance_ + 88);
  }
  v45 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)CLMicroLocationProto::LearnModel::ByteSize(v44);
  v46 = (int)v45;
  if (v45 >= 0x80)
    v47 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v45);
  else
    v47 = 1;
  v3 = (v3 + v46 + v47 + 1);
  v2 = *((_DWORD *)this + 73);
  if ((v2 & 0x800) == 0)
  {
LABEL_66:
    if ((v2 & 0x1000) == 0)
      goto LABEL_67;
    goto LABEL_95;
  }
LABEL_89:
  v48 = (CLMicroLocationProto::LearnCompleted *)*((_QWORD *)this + 12);
  if (!v48)
  {
    CLMicroLocationProto::protobuf_AddDesc_microlocation_2eproto(0);
    v48 = *(CLMicroLocationProto::LearnCompleted **)(CLMicroLocationProto::ReceivedEvent::default_instance_ + 96);
  }
  v49 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)CLMicroLocationProto::LearnCompleted::ByteSize(v48);
  v50 = (int)v49;
  if (v49 >= 0x80)
    v51 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v49);
  else
    v51 = 1;
  v3 = (v3 + v50 + v51 + 1);
  v2 = *((_DWORD *)this + 73);
  if ((v2 & 0x1000) == 0)
  {
LABEL_67:
    if ((v2 & 0x2000) == 0)
      goto LABEL_68;
    goto LABEL_101;
  }
LABEL_95:
  v52 = (CLMicroLocationProto::SensorsScanComplete *)*((_QWORD *)this + 13);
  if (!v52)
  {
    CLMicroLocationProto::protobuf_AddDesc_microlocation_2eproto(0);
    v52 = *(CLMicroLocationProto::SensorsScanComplete **)(CLMicroLocationProto::ReceivedEvent::default_instance_ + 104);
  }
  v53 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)CLMicroLocationProto::SensorsScanComplete::ByteSize(v52);
  v54 = (int)v53;
  if (v53 >= 0x80)
    v55 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v53);
  else
    v55 = 1;
  v3 = (v3 + v54 + v55 + 2);
  v2 = *((_DWORD *)this + 73);
  if ((v2 & 0x2000) == 0)
  {
LABEL_68:
    if ((v2 & 0x4000) == 0)
      goto LABEL_69;
    goto LABEL_107;
  }
LABEL_101:
  v56 = (CLMicroLocationProto::StartSpectating *)*((_QWORD *)this + 14);
  if (!v56)
  {
    CLMicroLocationProto::protobuf_AddDesc_microlocation_2eproto(0);
    v56 = *(CLMicroLocationProto::StartSpectating **)(CLMicroLocationProto::ReceivedEvent::default_instance_ + 112);
  }
  v57 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)CLMicroLocationProto::StartSpectating::ByteSize(v56);
  v58 = (int)v57;
  if (v57 >= 0x80)
    v59 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v57);
  else
    v59 = 1;
  v3 = (v3 + v58 + v59 + 2);
  v2 = *((_DWORD *)this + 73);
  if ((v2 & 0x4000) == 0)
  {
LABEL_69:
    if ((v2 & 0x8000) == 0)
      goto LABEL_119;
    goto LABEL_113;
  }
LABEL_107:
  v60 = (CLMicroLocationProto::StopSpectating *)*((_QWORD *)this + 15);
  if (!v60)
  {
    CLMicroLocationProto::protobuf_AddDesc_microlocation_2eproto(0);
    v60 = *(CLMicroLocationProto::StopSpectating **)(CLMicroLocationProto::ReceivedEvent::default_instance_ + 120);
  }
  v61 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)CLMicroLocationProto::StopSpectating::ByteSize(v60);
  v62 = (int)v61;
  if (v61 >= 0x80)
    v63 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v61);
  else
    v63 = 1;
  v3 = (v3 + v62 + v63 + 2);
  v2 = *((_DWORD *)this + 73);
  if ((v2 & 0x8000) != 0)
  {
LABEL_113:
    v64 = (CLMicroLocationProto::ServiceCreate *)*((_QWORD *)this + 16);
    if (!v64)
    {
      CLMicroLocationProto::protobuf_AddDesc_microlocation_2eproto(0);
      v64 = *(CLMicroLocationProto::ServiceCreate **)(CLMicroLocationProto::ReceivedEvent::default_instance_ + 128);
    }
    v65 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)CLMicroLocationProto::ServiceCreate::ByteSize(v64);
    v66 = (int)v65;
    if (v65 >= 0x80)
      v67 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v65);
    else
      v67 = 1;
    v3 = (v3 + v66 + v67 + 2);
    v2 = *((_DWORD *)this + 73);
  }
LABEL_119:
  if ((v2 & 0xFF0000) == 0)
    goto LABEL_177;
  if ((v2 & 0x10000) != 0)
  {
    v68 = (CLMicroLocationProto::ServiceDelete *)*((_QWORD *)this + 17);
    if (!v68)
    {
      CLMicroLocationProto::protobuf_AddDesc_microlocation_2eproto(0);
      v68 = *(CLMicroLocationProto::ServiceDelete **)(CLMicroLocationProto::ReceivedEvent::default_instance_ + 136);
    }
    v69 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)CLMicroLocationProto::ServiceDelete::ByteSize(v68);
    v70 = (int)v69;
    if (v69 >= 0x80)
      v71 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v69);
    else
      v71 = 1;
    v3 = (v3 + v70 + v71 + 2);
    v2 = *((_DWORD *)this + 73);
    if ((v2 & 0x20000) == 0)
    {
LABEL_122:
      if ((v2 & 0x40000) == 0)
        goto LABEL_123;
      goto LABEL_141;
    }
  }
  else if ((v2 & 0x20000) == 0)
  {
    goto LABEL_122;
  }
  v72 = (CLMicroLocationProto::ServiceConnect *)*((_QWORD *)this + 18);
  if (!v72)
  {
    CLMicroLocationProto::protobuf_AddDesc_microlocation_2eproto(0);
    v72 = *(CLMicroLocationProto::ServiceConnect **)(CLMicroLocationProto::ReceivedEvent::default_instance_ + 144);
  }
  v73 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)CLMicroLocationProto::ServiceConnect::ByteSize(v72);
  v74 = (int)v73;
  if (v73 >= 0x80)
    v75 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v73);
  else
    v75 = 1;
  v3 = (v3 + v74 + v75 + 2);
  v2 = *((_DWORD *)this + 73);
  if ((v2 & 0x40000) == 0)
  {
LABEL_123:
    if ((v2 & 0x80000) == 0)
      goto LABEL_124;
    goto LABEL_147;
  }
LABEL_141:
  v76 = (CLMicroLocationProto::ServiceDisconnect *)*((_QWORD *)this + 19);
  if (!v76)
  {
    CLMicroLocationProto::protobuf_AddDesc_microlocation_2eproto(0);
    v76 = *(CLMicroLocationProto::ServiceDisconnect **)(CLMicroLocationProto::ReceivedEvent::default_instance_ + 152);
  }
  v77 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)CLMicroLocationProto::ServiceDisconnect::ByteSize(v76);
  v78 = (int)v77;
  if (v77 >= 0x80)
    v79 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v77);
  else
    v79 = 1;
  v3 = (v3 + v78 + v79 + 2);
  v2 = *((_DWORD *)this + 73);
  if ((v2 & 0x80000) == 0)
  {
LABEL_124:
    if ((v2 & 0x100000) == 0)
      goto LABEL_125;
    goto LABEL_153;
  }
LABEL_147:
  v80 = (CLMicroLocationProto::ServiceStartUpdating *)*((_QWORD *)this + 20);
  if (!v80)
  {
    CLMicroLocationProto::protobuf_AddDesc_microlocation_2eproto(0);
    v80 = *(CLMicroLocationProto::ServiceStartUpdating **)(CLMicroLocationProto::ReceivedEvent::default_instance_ + 160);
  }
  v81 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)CLMicroLocationProto::ServiceStartUpdating::ByteSize(v80);
  v82 = (int)v81;
  if (v81 >= 0x80)
    v83 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v81);
  else
    v83 = 1;
  v3 = (v3 + v82 + v83 + 2);
  v2 = *((_DWORD *)this + 73);
  if ((v2 & 0x100000) == 0)
  {
LABEL_125:
    if ((v2 & 0x200000) == 0)
      goto LABEL_126;
    goto LABEL_159;
  }
LABEL_153:
  v84 = (CLMicroLocationProto::ServiceStopUpdating *)*((_QWORD *)this + 21);
  if (!v84)
  {
    CLMicroLocationProto::protobuf_AddDesc_microlocation_2eproto(0);
    v84 = *(CLMicroLocationProto::ServiceStopUpdating **)(CLMicroLocationProto::ReceivedEvent::default_instance_ + 168);
  }
  v85 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)CLMicroLocationProto::ServiceStopUpdating::ByteSize(v84);
  v86 = (int)v85;
  if (v85 >= 0x80)
    v87 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v85);
  else
    v87 = 1;
  v3 = (v3 + v86 + v87 + 2);
  v2 = *((_DWORD *)this + 73);
  if ((v2 & 0x200000) == 0)
  {
LABEL_126:
    if ((v2 & 0x400000) == 0)
      goto LABEL_127;
    goto LABEL_165;
  }
LABEL_159:
  v88 = (CLMicroLocationProto::RequestObservation *)*((_QWORD *)this + 22);
  if (!v88)
  {
    CLMicroLocationProto::protobuf_AddDesc_microlocation_2eproto(0);
    v88 = *(CLMicroLocationProto::RequestObservation **)(CLMicroLocationProto::ReceivedEvent::default_instance_ + 176);
  }
  v89 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)CLMicroLocationProto::RequestObservation::ByteSize(v88);
  v90 = (int)v89;
  if (v89 >= 0x80)
    v91 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v89);
  else
    v91 = 1;
  v3 = (v3 + v90 + v91 + 2);
  v2 = *((_DWORD *)this + 73);
  if ((v2 & 0x400000) == 0)
  {
LABEL_127:
    if ((v2 & 0x800000) == 0)
      goto LABEL_177;
    goto LABEL_171;
  }
LABEL_165:
  v92 = (CLMicroLocationProto::RequestPrediction *)*((_QWORD *)this + 23);
  if (!v92)
  {
    CLMicroLocationProto::protobuf_AddDesc_microlocation_2eproto(0);
    v92 = *(CLMicroLocationProto::RequestPrediction **)(CLMicroLocationProto::ReceivedEvent::default_instance_ + 184);
  }
  v93 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)CLMicroLocationProto::RequestPrediction::ByteSize(v92);
  v94 = (int)v93;
  if (v93 >= 0x80)
    v95 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v93);
  else
    v95 = 1;
  v3 = (v3 + v94 + v95 + 2);
  v2 = *((_DWORD *)this + 73);
  if ((v2 & 0x800000) != 0)
  {
LABEL_171:
    v96 = (CLMicroLocationProto::MiloInit *)*((_QWORD *)this + 24);
    if (!v96)
    {
      CLMicroLocationProto::protobuf_AddDesc_microlocation_2eproto(0);
      v96 = *(CLMicroLocationProto::MiloInit **)(CLMicroLocationProto::ReceivedEvent::default_instance_ + 192);
    }
    v97 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)CLMicroLocationProto::MiloInit::ByteSize(v96);
    v98 = (int)v97;
    if (v97 >= 0x80)
      v99 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v97);
    else
      v99 = 1;
    v3 = (v3 + v98 + v99 + 2);
    v2 = *((_DWORD *)this + 73);
  }
LABEL_177:
  if (!HIBYTE(v2))
    goto LABEL_235;
  if ((v2 & 0x1000000) != 0)
  {
    v100 = (CLMicroLocationProto::MotionEvent *)*((_QWORD *)this + 25);
    if (!v100)
    {
      CLMicroLocationProto::protobuf_AddDesc_microlocation_2eproto(0);
      v100 = *(CLMicroLocationProto::MotionEvent **)(CLMicroLocationProto::ReceivedEvent::default_instance_ + 200);
    }
    v101 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)CLMicroLocationProto::MotionEvent::ByteSize(v100);
    v102 = (int)v101;
    if (v101 >= 0x80)
      v103 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v101);
    else
      v103 = 1;
    v3 = (v3 + v102 + v103 + 2);
    v2 = *((_DWORD *)this + 73);
    if ((v2 & 0x2000000) == 0)
    {
LABEL_180:
      if ((v2 & 0x4000000) == 0)
        goto LABEL_181;
      goto LABEL_199;
    }
  }
  else if ((v2 & 0x2000000) == 0)
  {
    goto LABEL_180;
  }
  v104 = (CLMicroLocationProto::LegacyThrottle *)*((_QWORD *)this + 26);
  if (!v104)
  {
    CLMicroLocationProto::protobuf_AddDesc_microlocation_2eproto(0);
    v104 = *(CLMicroLocationProto::LegacyThrottle **)(CLMicroLocationProto::ReceivedEvent::default_instance_ + 208);
  }
  v105 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)CLMicroLocationProto::LegacyThrottle::ByteSize(v104);
  v106 = (int)v105;
  if (v105 >= 0x80)
    v107 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v105);
  else
    v107 = 1;
  v3 = (v3 + v106 + v107 + 2);
  v2 = *((_DWORD *)this + 73);
  if ((v2 & 0x4000000) == 0)
  {
LABEL_181:
    if ((v2 & 0x8000000) == 0)
      goto LABEL_182;
    goto LABEL_205;
  }
LABEL_199:
  v108 = (CLMicroLocationProto::RetrievedLoi *)*((_QWORD *)this + 27);
  if (!v108)
  {
    CLMicroLocationProto::protobuf_AddDesc_microlocation_2eproto(0);
    v108 = *(CLMicroLocationProto::RetrievedLoi **)(CLMicroLocationProto::ReceivedEvent::default_instance_ + 216);
  }
  v109 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)CLMicroLocationProto::RetrievedLoi::ByteSize(v108);
  v110 = (int)v109;
  if (v109 >= 0x80)
    v111 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v109);
  else
    v111 = 1;
  v3 = (v3 + v110 + v111 + 2);
  v2 = *((_DWORD *)this + 73);
  if ((v2 & 0x8000000) == 0)
  {
LABEL_182:
    if ((v2 & 0x10000000) == 0)
      goto LABEL_183;
    goto LABEL_211;
  }
LABEL_205:
  v112 = (CLMicroLocationProto::TriggerEvent *)*((_QWORD *)this + 28);
  if (!v112)
  {
    CLMicroLocationProto::protobuf_AddDesc_microlocation_2eproto(0);
    v112 = *(CLMicroLocationProto::TriggerEvent **)(CLMicroLocationProto::ReceivedEvent::default_instance_ + 224);
  }
  v113 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)CLMicroLocationProto::TriggerEvent::ByteSize(v112);
  v114 = (int)v113;
  if (v113 >= 0x80)
    v115 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v113);
  else
    v115 = 1;
  v3 = (v3 + v114 + v115 + 2);
  v2 = *((_DWORD *)this + 73);
  if ((v2 & 0x10000000) == 0)
  {
LABEL_183:
    if ((v2 & 0x20000000) == 0)
      goto LABEL_184;
    goto LABEL_217;
  }
LABEL_211:
  v116 = (CLMicroLocationProto::LegacyClientStatusUpdate *)*((_QWORD *)this + 29);
  if (!v116)
  {
    CLMicroLocationProto::protobuf_AddDesc_microlocation_2eproto(0);
    v116 = *(CLMicroLocationProto::LegacyClientStatusUpdate **)(CLMicroLocationProto::ReceivedEvent::default_instance_
                                                              + 232);
  }
  v117 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)CLMicroLocationProto::LegacyClientStatusUpdate::ByteSize(v116);
  v118 = (int)v117;
  if (v117 >= 0x80)
    v119 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v117);
  else
    v119 = 1;
  v3 = (v3 + v118 + v119 + 2);
  v2 = *((_DWORD *)this + 73);
  if ((v2 & 0x20000000) == 0)
  {
LABEL_184:
    if ((v2 & 0x40000000) == 0)
      goto LABEL_185;
    goto LABEL_223;
  }
LABEL_217:
  v120 = (CLMicroLocationProto::SpectatingMotionUpdate *)*((_QWORD *)this + 30);
  if (!v120)
  {
    CLMicroLocationProto::protobuf_AddDesc_microlocation_2eproto(0);
    v120 = *(CLMicroLocationProto::SpectatingMotionUpdate **)(CLMicroLocationProto::ReceivedEvent::default_instance_
                                                            + 240);
  }
  v121 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)CLMicroLocationProto::SpectatingMotionUpdate::ByteSize(v120);
  v122 = (int)v121;
  if (v121 >= 0x80)
    v123 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v121);
  else
    v123 = 1;
  v3 = (v3 + v122 + v123 + 2);
  v2 = *((_DWORD *)this + 73);
  if ((v2 & 0x40000000) == 0)
  {
LABEL_185:
    if ((v2 & 0x80000000) == 0)
      goto LABEL_235;
    goto LABEL_229;
  }
LABEL_223:
  v124 = (CLMicroLocationProto::EnabledStateUpdate *)*((_QWORD *)this + 31);
  if (!v124)
  {
    CLMicroLocationProto::protobuf_AddDesc_microlocation_2eproto(0);
    v124 = *(CLMicroLocationProto::EnabledStateUpdate **)(CLMicroLocationProto::ReceivedEvent::default_instance_ + 248);
  }
  v125 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)CLMicroLocationProto::EnabledStateUpdate::ByteSize(v124);
  v126 = (int)v125;
  if (v125 >= 0x80)
    v127 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v125);
  else
    v127 = 1;
  v3 = (v3 + v126 + v127 + 2);
  if ((*((_DWORD *)this + 73) & 0x80000000) != 0)
  {
LABEL_229:
    v128 = (CLMicroLocationProto::ScreenStateUpdate *)*((_QWORD *)this + 32);
    if (!v128)
    {
      CLMicroLocationProto::protobuf_AddDesc_microlocation_2eproto(0);
      v128 = *(CLMicroLocationProto::ScreenStateUpdate **)(CLMicroLocationProto::ReceivedEvent::default_instance_ + 256);
    }
    v129 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)CLMicroLocationProto::ScreenStateUpdate::ByteSize(v128);
    v130 = (int)v129;
    if (v129 >= 0x80)
      v131 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v129);
    else
      v131 = 1;
    v3 = (v3 + v130 + v131 + 2);
  }
LABEL_235:
  LOBYTE(v132) = *((_BYTE *)this + 296);
  if (!(_BYTE)v132)
    goto LABEL_258;
  if ((*((_BYTE *)this + 296) & 1) != 0)
  {
    v133 = (CLMicroLocationProto::CloudBackupExport *)*((_QWORD *)this + 33);
    if (!v133)
    {
      CLMicroLocationProto::protobuf_AddDesc_microlocation_2eproto(0);
      v133 = *(CLMicroLocationProto::CloudBackupExport **)(CLMicroLocationProto::ReceivedEvent::default_instance_ + 264);
    }
    v134 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)CLMicroLocationProto::CloudBackupExport::ByteSize(v133);
    v135 = (int)v134;
    if (v134 >= 0x80)
      v136 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v134);
    else
      v136 = 1;
    v3 = (v3 + v135 + v136 + 2);
    v132 = *((_DWORD *)this + 74);
    if ((v132 & 2) == 0)
    {
LABEL_238:
      if ((v132 & 4) == 0)
        goto LABEL_258;
      goto LABEL_252;
    }
  }
  else if ((*((_BYTE *)this + 296) & 2) == 0)
  {
    goto LABEL_238;
  }
  v137 = (CLMicroLocationProto::CloudBackupImport *)*((_QWORD *)this + 34);
  if (!v137)
  {
    CLMicroLocationProto::protobuf_AddDesc_microlocation_2eproto(0);
    v137 = *(CLMicroLocationProto::CloudBackupImport **)(CLMicroLocationProto::ReceivedEvent::default_instance_ + 272);
  }
  v138 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)CLMicroLocationProto::CloudBackupImport::ByteSize(v137);
  v139 = (int)v138;
  if (v138 >= 0x80)
    v140 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v138);
  else
    v140 = 1;
  v3 = (v3 + v139 + v140 + 2);
  if ((*((_DWORD *)this + 74) & 4) != 0)
  {
LABEL_252:
    v141 = (CLMicroLocationProto::DataMigration *)*((_QWORD *)this + 35);
    if (!v141)
    {
      CLMicroLocationProto::protobuf_AddDesc_microlocation_2eproto(0);
      v141 = *(CLMicroLocationProto::DataMigration **)(CLMicroLocationProto::ReceivedEvent::default_instance_ + 280);
    }
    v142 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)CLMicroLocationProto::DataMigration::ByteSize(v141);
    v143 = (int)v142;
    if (v142 >= 0x80)
      v144 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v142);
    else
      v144 = 1;
    v3 = (v3 + v143 + v144 + 2);
  }
LABEL_258:
  *((_DWORD *)this + 72) = v3;
  return v3;
}

void CLMicroLocationProto::ReceivedEvent::CheckTypeAndMergeFrom(CLMicroLocationProto::ReceivedEvent *this, const wireless_diagnostics::google::protobuf::MessageLite *lpsrc)
{
  uint64_t v4;
  uint64_t v5;

  CLMicroLocationProto::ReceivedEvent::MergeFrom(this, lpsrc);
}

void CLMicroLocationProto::TriggerEvent::MergeFrom(CLMicroLocationProto::TriggerEvent *this, const CLMicroLocationProto::TriggerEvent *a2)
{
  int v4;
  unsigned int v5;
  char v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  const std::string *v10;
  std::string *v11;
  unsigned int v12;
  uint64_t v13;
  char v14;
  const std::string *v15;
  std::string *v16;
  const std::string *v17;
  std::string *v18;
  const std::string *v19;
  std::string *v20;
  const std::string *v21;
  std::string *v22;
  _BYTE v23[48];

  if (a2 == this)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v23);
  }
  v4 = *((_DWORD *)a2 + 21);
  if (!(_BYTE)v4)
    goto LABEL_17;
  if ((v4 & 1) != 0)
  {
    v5 = *((_DWORD *)a2 + 6);
    if (v5 - 31 >= 0x19 && (v5 > 0xE || ((1 << v5) & 0x76B6) == 0))
      CLMicroLocationProto::TriggerEvent::MergeFrom();
    *((_DWORD *)this + 21) |= 1u;
    *((_DWORD *)this + 6) = v5;
    v4 = *((_DWORD *)a2 + 21);
  }
  if ((v4 & 2) != 0)
  {
    v13 = *((_QWORD *)a2 + 1);
    *((_DWORD *)this + 21) |= 2u;
    *((_QWORD *)this + 1) = v13;
    v4 = *((_DWORD *)a2 + 21);
    if ((v4 & 4) == 0)
    {
LABEL_11:
      if ((v4 & 8) == 0)
        goto LABEL_12;
      goto LABEL_37;
    }
  }
  else if ((v4 & 4) == 0)
  {
    goto LABEL_11;
  }
  v14 = *((_BYTE *)a2 + 28);
  *((_DWORD *)this + 21) |= 4u;
  *((_BYTE *)this + 28) = v14;
  v4 = *((_DWORD *)a2 + 21);
  if ((v4 & 8) == 0)
  {
LABEL_12:
    if ((v4 & 0x10) == 0)
      goto LABEL_13;
    goto LABEL_40;
  }
LABEL_37:
  v15 = (const std::string *)*((_QWORD *)a2 + 2);
  *((_DWORD *)this + 21) |= 8u;
  v16 = (std::string *)*((_QWORD *)this + 2);
  if (v16 == (std::string *)MEMORY[0x24BEDD958])
  {
    v16 = (std::string *)operator new();
    v16->__r_.__value_.__l.__size_ = 0;
    v16->__r_.__value_.__r.__words[2] = 0;
    v16->__r_.__value_.__r.__words[0] = 0;
    *((_QWORD *)this + 2) = v16;
  }
  std::string::operator=(v16, v15);
  v4 = *((_DWORD *)a2 + 21);
  if ((v4 & 0x10) == 0)
  {
LABEL_13:
    if ((v4 & 0x20) == 0)
      goto LABEL_14;
LABEL_43:
    v19 = (const std::string *)*((_QWORD *)a2 + 5);
    *((_DWORD *)this + 21) |= 0x20u;
    v20 = (std::string *)*((_QWORD *)this + 5);
    if (v20 == (std::string *)MEMORY[0x24BEDD958])
    {
      v20 = (std::string *)operator new();
      v20->__r_.__value_.__l.__size_ = 0;
      v20->__r_.__value_.__r.__words[2] = 0;
      v20->__r_.__value_.__r.__words[0] = 0;
      *((_QWORD *)this + 5) = v20;
    }
    std::string::operator=(v20, v19);
    v4 = *((_DWORD *)a2 + 21);
    if ((v4 & 0x40) == 0)
    {
LABEL_15:
      if ((v4 & 0x80) == 0)
        goto LABEL_17;
      goto LABEL_16;
    }
    goto LABEL_46;
  }
LABEL_40:
  v17 = (const std::string *)*((_QWORD *)a2 + 4);
  *((_DWORD *)this + 21) |= 0x10u;
  v18 = (std::string *)*((_QWORD *)this + 4);
  if (v18 == (std::string *)MEMORY[0x24BEDD958])
  {
    v18 = (std::string *)operator new();
    v18->__r_.__value_.__l.__size_ = 0;
    v18->__r_.__value_.__r.__words[2] = 0;
    v18->__r_.__value_.__r.__words[0] = 0;
    *((_QWORD *)this + 4) = v18;
  }
  std::string::operator=(v18, v17);
  v4 = *((_DWORD *)a2 + 21);
  if ((v4 & 0x20) != 0)
    goto LABEL_43;
LABEL_14:
  if ((v4 & 0x40) == 0)
    goto LABEL_15;
LABEL_46:
  v21 = (const std::string *)*((_QWORD *)a2 + 6);
  *((_DWORD *)this + 21) |= 0x40u;
  v22 = (std::string *)*((_QWORD *)this + 6);
  if (v22 == (std::string *)MEMORY[0x24BEDD958])
  {
    v22 = (std::string *)operator new();
    v22->__r_.__value_.__l.__size_ = 0;
    v22->__r_.__value_.__r.__words[2] = 0;
    v22->__r_.__value_.__r.__words[0] = 0;
    *((_QWORD *)this + 6) = v22;
  }
  std::string::operator=(v22, v21);
  v4 = *((_DWORD *)a2 + 21);
  if ((v4 & 0x80) != 0)
  {
LABEL_16:
    v6 = *((_BYTE *)a2 + 29);
    *((_DWORD *)this + 21) |= 0x80u;
    *((_BYTE *)this + 29) = v6;
    v4 = *((_DWORD *)a2 + 21);
  }
LABEL_17:
  if ((v4 & 0xFF00) != 0)
  {
    if ((v4 & 0x100) != 0)
    {
      v7 = *((_DWORD *)a2 + 14);
      if (v7 >= 2)
        CLMicroLocationProto::TriggerEvent::MergeFrom();
      *((_DWORD *)this + 21) |= 0x100u;
      *((_DWORD *)this + 14) = v7;
      v4 = *((_DWORD *)a2 + 21);
    }
    if ((v4 & 0x200) != 0)
    {
      v8 = *((_DWORD *)a2 + 15);
      if (v8 >= 6)
        CLMicroLocationProto::TriggerEvent::MergeFrom();
      *((_DWORD *)this + 21) |= 0x200u;
      *((_DWORD *)this + 15) = v8;
      v4 = *((_DWORD *)a2 + 21);
    }
    if ((v4 & 0x400) != 0)
    {
      v9 = *((_DWORD *)a2 + 18);
      if (v9 >= 6)
        CLMicroLocationProto::TriggerEvent::MergeFrom();
      *((_DWORD *)this + 21) |= 0x400u;
      *((_DWORD *)this + 18) = v9;
      v4 = *((_DWORD *)a2 + 21);
    }
    if ((v4 & 0x800) != 0)
    {
      v10 = (const std::string *)*((_QWORD *)a2 + 8);
      *((_DWORD *)this + 21) |= 0x800u;
      v11 = (std::string *)*((_QWORD *)this + 8);
      if (v11 == (std::string *)MEMORY[0x24BEDD958])
      {
        v11 = (std::string *)operator new();
        v11->__r_.__value_.__l.__size_ = 0;
        v11->__r_.__value_.__r.__words[2] = 0;
        v11->__r_.__value_.__r.__words[0] = 0;
        *((_QWORD *)this + 8) = v11;
      }
      std::string::operator=(v11, v10);
      v4 = *((_DWORD *)a2 + 21);
    }
    if ((v4 & 0x1000) != 0)
    {
      v12 = *((_DWORD *)a2 + 19);
      if (v12 >= 4)
        CLMicroLocationProto::TriggerEvent::MergeFrom();
      *((_DWORD *)this + 21) |= 0x1000u;
      *((_DWORD *)this + 19) = v12;
    }
  }
}

void sub_241AD4BC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void CLMicroLocationProto::LegacyClientStatusUpdate::MergeFrom(CLMicroLocationProto::LegacyClientStatusUpdate *this, const CLMicroLocationProto::LegacyClientStatusUpdate *a2)
{
  int v4;
  unsigned int v5;
  int v6;
  int v7;
  _BYTE v8[48];

  if (a2 == this)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v8);
  }
  LOBYTE(v4) = *((_BYTE *)a2 + 24);
  if ((_BYTE)v4)
  {
    if ((*((_BYTE *)a2 + 24) & 1) != 0)
    {
      v5 = *((_DWORD *)a2 + 2);
      if (v5 - 31 >= 0x19 && (v5 > 0xE || ((1 << v5) & 0x76B6) == 0))
        CLMicroLocationProto::LegacyClientStatusUpdate::MergeFrom();
      *((_DWORD *)this + 6) |= 1u;
      *((_DWORD *)this + 2) = v5;
      v4 = *((_DWORD *)a2 + 6);
    }
    if ((v4 & 2) != 0)
    {
      v6 = *((_DWORD *)a2 + 3);
      if ((v6 - 1) >= 2 && v6 != 255)
        CLMicroLocationProto::LegacyClientStatusUpdate::MergeFrom();
      *((_DWORD *)this + 6) |= 2u;
      *((_DWORD *)this + 3) = v6;
      v4 = *((_DWORD *)a2 + 6);
    }
    if ((v4 & 4) != 0)
    {
      v7 = *((_DWORD *)a2 + 4);
      *((_DWORD *)this + 6) |= 4u;
      *((_DWORD *)this + 4) = v7;
    }
  }
}

void sub_241AD4CE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void CLMicroLocationProto::SpectatingMotionUpdate::MergeFrom(CLMicroLocationProto::SpectatingMotionUpdate *this, const CLMicroLocationProto::SpectatingMotionUpdate *a2)
{
  int v4;
  unsigned int v5;
  char v6;
  _BYTE v7[48];

  if (a2 == this)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v7);
  }
  LOBYTE(v4) = *((_BYTE *)a2 + 20);
  if ((_BYTE)v4)
  {
    if ((*((_BYTE *)a2 + 20) & 1) != 0)
    {
      v5 = *((_DWORD *)a2 + 2);
      if (v5 - 31 >= 0x19 && (v5 > 0xE || ((1 << v5) & 0x76B6) == 0))
        CLMicroLocationProto::SpectatingMotionUpdate::MergeFrom();
      *((_DWORD *)this + 5) |= 1u;
      *((_DWORD *)this + 2) = v5;
      v4 = *((_DWORD *)a2 + 5);
    }
    if ((v4 & 2) != 0)
    {
      v6 = *((_BYTE *)a2 + 12);
      *((_DWORD *)this + 5) |= 2u;
      *((_BYTE *)this + 12) = v6;
    }
  }
}

void sub_241AD4DD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void CLMicroLocationProto::EnabledStateUpdate::MergeFrom(CLMicroLocationProto::EnabledStateUpdate *this, const CLMicroLocationProto::EnabledStateUpdate *a2)
{
  int v4;
  unsigned int v5;
  char v6;
  char v7;
  char v8;
  char v9;
  char v10;
  char v11;
  char v12;
  char v13;
  _BYTE v14[48];

  if (a2 == this)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v14);
  }
  v4 = *((_DWORD *)a2 + 6);
  if (!(_BYTE)v4)
    goto LABEL_17;
  if ((v4 & 1) != 0)
  {
    v5 = *((_DWORD *)a2 + 2);
    if (v5 - 31 >= 0x19 && (v5 > 0xE || ((1 << v5) & 0x76B6) == 0))
      CLMicroLocationProto::EnabledStateUpdate::MergeFrom();
    *((_DWORD *)this + 6) |= 1u;
    *((_DWORD *)this + 2) = v5;
    v4 = *((_DWORD *)a2 + 6);
  }
  if ((v4 & 2) != 0)
  {
    v8 = *((_BYTE *)a2 + 12);
    *((_DWORD *)this + 6) |= 2u;
    *((_BYTE *)this + 12) = v8;
    v4 = *((_DWORD *)a2 + 6);
    if ((v4 & 4) == 0)
    {
LABEL_11:
      if ((v4 & 8) == 0)
        goto LABEL_12;
      goto LABEL_22;
    }
  }
  else if ((v4 & 4) == 0)
  {
    goto LABEL_11;
  }
  v9 = *((_BYTE *)a2 + 13);
  *((_DWORD *)this + 6) |= 4u;
  *((_BYTE *)this + 13) = v9;
  v4 = *((_DWORD *)a2 + 6);
  if ((v4 & 8) == 0)
  {
LABEL_12:
    if ((v4 & 0x10) == 0)
      goto LABEL_13;
    goto LABEL_23;
  }
LABEL_22:
  v10 = *((_BYTE *)a2 + 14);
  *((_DWORD *)this + 6) |= 8u;
  *((_BYTE *)this + 14) = v10;
  v4 = *((_DWORD *)a2 + 6);
  if ((v4 & 0x10) == 0)
  {
LABEL_13:
    if ((v4 & 0x20) == 0)
      goto LABEL_14;
LABEL_24:
    v12 = *((_BYTE *)a2 + 16);
    *((_DWORD *)this + 6) |= 0x20u;
    *((_BYTE *)this + 16) = v12;
    v4 = *((_DWORD *)a2 + 6);
    if ((v4 & 0x40) == 0)
    {
LABEL_15:
      if ((v4 & 0x80) == 0)
        goto LABEL_17;
      goto LABEL_16;
    }
    goto LABEL_25;
  }
LABEL_23:
  v11 = *((_BYTE *)a2 + 15);
  *((_DWORD *)this + 6) |= 0x10u;
  *((_BYTE *)this + 15) = v11;
  v4 = *((_DWORD *)a2 + 6);
  if ((v4 & 0x20) != 0)
    goto LABEL_24;
LABEL_14:
  if ((v4 & 0x40) == 0)
    goto LABEL_15;
LABEL_25:
  v13 = *((_BYTE *)a2 + 17);
  *((_DWORD *)this + 6) |= 0x40u;
  *((_BYTE *)this + 17) = v13;
  v4 = *((_DWORD *)a2 + 6);
  if ((v4 & 0x80) != 0)
  {
LABEL_16:
    v6 = *((_BYTE *)a2 + 18);
    *((_DWORD *)this + 6) |= 0x80u;
    *((_BYTE *)this + 18) = v6;
    v4 = *((_DWORD *)a2 + 6);
  }
LABEL_17:
  if ((v4 & 0x100) != 0)
  {
    v7 = *((_BYTE *)a2 + 19);
    *((_DWORD *)this + 6) |= 0x100u;
    *((_BYTE *)this + 19) = v7;
  }
}

void sub_241AD4FA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void CLMicroLocationProto::ScreenStateUpdate::MergeFrom(CLMicroLocationProto::ScreenStateUpdate *this, const CLMicroLocationProto::ScreenStateUpdate *a2)
{
  int v4;
  unsigned int v5;
  char v6;
  _BYTE v7[48];

  if (a2 == this)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v7);
  }
  LOBYTE(v4) = *((_BYTE *)a2 + 20);
  if ((_BYTE)v4)
  {
    if ((*((_BYTE *)a2 + 20) & 1) != 0)
    {
      v5 = *((_DWORD *)a2 + 2);
      if (v5 - 31 >= 0x19 && (v5 > 0xE || ((1 << v5) & 0x76B6) == 0))
        CLMicroLocationProto::ScreenStateUpdate::MergeFrom();
      *((_DWORD *)this + 5) |= 1u;
      *((_DWORD *)this + 2) = v5;
      v4 = *((_DWORD *)a2 + 5);
    }
    if ((v4 & 2) != 0)
    {
      v6 = *((_BYTE *)a2 + 12);
      *((_DWORD *)this + 5) |= 2u;
      *((_BYTE *)this + 12) = v6;
    }
  }
}

void sub_241AD5090(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void CLMicroLocationProto::CloudBackupExport::MergeFrom(CLMicroLocationProto::CloudBackupExport *this, const CLMicroLocationProto::CloudBackupExport *a2)
{
  unsigned int v4;
  _BYTE v6[48];

  if (a2 == this)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v6);
  }
  if ((*((_BYTE *)a2 + 16) & 1) != 0)
  {
    v4 = *((_DWORD *)a2 + 2);
    if (v4 - 31 >= 0x19 && (v4 > 0xE || ((1 << v4) & 0x76B6) == 0))
      CLMicroLocationProto::CloudBackupExport::MergeFrom();
    *((_DWORD *)this + 4) |= 1u;
    *((_DWORD *)this + 2) = v4;
  }
}

void sub_241AD515C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void CLMicroLocationProto::CloudBackupImport::MergeFrom(CLMicroLocationProto::CloudBackupImport *this, const CLMicroLocationProto::CloudBackupImport *a2)
{
  unsigned int v4;
  _BYTE v6[48];

  if (a2 == this)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v6);
  }
  if ((*((_BYTE *)a2 + 16) & 1) != 0)
  {
    v4 = *((_DWORD *)a2 + 2);
    if (v4 - 31 >= 0x19 && (v4 > 0xE || ((1 << v4) & 0x76B6) == 0))
      CLMicroLocationProto::CloudBackupImport::MergeFrom();
    *((_DWORD *)this + 4) |= 1u;
    *((_DWORD *)this + 2) = v4;
  }
}

void sub_241AD5228(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void CLMicroLocationProto::DataMigration::MergeFrom(CLMicroLocationProto::DataMigration *this, const CLMicroLocationProto::DataMigration *a2)
{
  unsigned int v4;
  _BYTE v6[48];

  if (a2 == this)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v6);
  }
  if ((*((_BYTE *)a2 + 16) & 1) != 0)
  {
    v4 = *((_DWORD *)a2 + 2);
    if (v4 - 31 >= 0x19 && (v4 > 0xE || ((1 << v4) & 0x76B6) == 0))
      CLMicroLocationProto::DataMigration::MergeFrom();
    *((_DWORD *)this + 4) |= 1u;
    *((_DWORD *)this + 2) = v4;
  }
}

void sub_241AD52F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

uint64_t CLMicroLocationProto::ReceivedEvent::IsInitialized(CLMicroLocationProto::ReceivedEvent *this)
{
  return 1;
}

_QWORD *CLMicroLocationProto::ReceivedEvent::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CLMicroLocationProto.ReceivedEvent");
}

CLMicroLocationProto::AssociatedAccessPointInfo *CLMicroLocationProto::AssociatedAccessPointInfo::AssociatedAccessPointInfo(CLMicroLocationProto::AssociatedAccessPointInfo *this, const CLMicroLocationProto::AssociatedAccessPointInfo *a2)
{
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *(_QWORD *)this = &off_2511D8108;
  *((_DWORD *)this + 6) = 0;
  CLMicroLocationProto::AssociatedAccessPointInfo::MergeFrom(this, a2);
  return this;
}

void sub_241AD535C(_Unwind_Exception *a1)
{
  wireless_diagnostics::google::protobuf::MessageLite *v1;

  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(v1);
  _Unwind_Resume(a1);
}

void CLMicroLocationProto::AssociatedAccessPointInfo::~AssociatedAccessPointInfo(CLMicroLocationProto::AssociatedAccessPointInfo *this)
{
  *(_QWORD *)this = &off_2511D8108;
  CLMicroLocationProto::protobuf_AddDesc_microlocation_2eproto(this);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

{
  CLMicroLocationProto::AssociatedAccessPointInfo::~AssociatedAccessPointInfo(this);
  JUMPOUT(0x2426A04D4);
}

uint64_t CLMicroLocationProto::AssociatedAccessPointInfo::New(CLMicroLocationProto::AssociatedAccessPointInfo *this)
{
  uint64_t result;

  result = operator new();
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)result = &off_2511D8108;
  *(_DWORD *)(result + 24) = 0;
  return result;
}

uint64_t CLMicroLocationProto::AssociatedAccessPointInfo::MergePartialFromCodedStream(CLMicroLocationProto::AssociatedAccessPointInfo *this, wireless_diagnostics::google::protobuf::io::CodedInputStream *a2)
{
  unint64_t *v4;
  char *v5;
  uint64_t TagFallback;
  int v7;
  unint64_t v8;
  char *v9;
  _BYTE *v10;
  uint64_t result;
  unsigned int v12;

  v4 = (unint64_t *)((char *)this + 8);
  do
  {
    while (1)
    {
      while (1)
      {
        v5 = (char *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v5 >= *((_QWORD *)a2 + 2) || *v5 < 0)
        {
          TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(a2);
          *((_DWORD *)a2 + 8) = TagFallback;
          if (!(_DWORD)TagFallback)
            return 1;
        }
        else
        {
          TagFallback = *v5;
          *((_DWORD *)a2 + 8) = TagFallback;
          *((_QWORD *)a2 + 1) = v5 + 1;
          if (!(_DWORD)TagFallback)
            return 1;
        }
        if (TagFallback >> 3 != 1)
          break;
        v7 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_16;
        v9 = (char *)*((_QWORD *)a2 + 1);
        v8 = *((_QWORD *)a2 + 2);
        if ((unint64_t)v9 >= v8 || *v9 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint64Fallback(a2, v4);
          if (!(_DWORD)result)
            return result;
          v10 = (_BYTE *)*((_QWORD *)a2 + 1);
          v8 = *((_QWORD *)a2 + 2);
        }
        else
        {
          *v4 = *v9;
          v10 = v9 + 1;
          *((_QWORD *)a2 + 1) = v10;
        }
        *((_DWORD *)this + 6) |= 1u;
        if ((unint64_t)v10 < v8 && *v10 == 21)
        {
          *((_QWORD *)a2 + 1) = v10 + 1;
          goto LABEL_24;
        }
      }
      if (TagFallback >> 3 != 2)
        break;
      v7 = TagFallback & 7;
      if (v7 != 5)
        goto LABEL_16;
LABEL_24:
      v12 = 0;
      if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback(a2, &v12) & 1) == 0)
        return 0;
      *((_DWORD *)this + 4) = v12;
      *((_DWORD *)this + 6) |= 2u;
      if (*((_QWORD *)a2 + 1) == *((_QWORD *)a2 + 2)
        && (*((_DWORD *)a2 + 11) || *((_DWORD *)a2 + 6) == *((_DWORD *)a2 + 10)))
      {
        *((_DWORD *)a2 + 8) = 0;
        result = 1;
        *((_BYTE *)a2 + 36) = 1;
        return result;
      }
    }
    v7 = TagFallback & 7;
LABEL_16:
    if (v7 == 4)
      return 1;
  }
  while ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(a2, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback) & 1) != 0);
  return 0;
}

uint64_t CLMicroLocationProto::AssociatedAccessPointInfo::SerializeWithCachedSizes(uint64_t this, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a2, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  int v6;

  v5 = this;
  v6 = *(_DWORD *)(this + 24);
  if ((v6 & 1) != 0)
  {
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt64((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(_QWORD *)(this + 8), (uint64_t)a2, a4);
    v6 = *(_DWORD *)(v5 + 24);
  }
  if ((v6 & 2) != 0)
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteFloat((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, (uint64_t)a2, *(float *)(v5 + 16), a3);
  return this;
}

uint64_t CLMicroLocationProto::AssociatedAccessPointInfo::ByteSize(CLMicroLocationProto::AssociatedAccessPointInfo *this)
{
  int v2;
  unsigned int v3;
  uint64_t result;

  LOBYTE(v2) = *((_BYTE *)this + 24);
  if ((_BYTE)v2)
  {
    if ((*((_BYTE *)this + 24) & 1) != 0)
    {
      v3 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize64(*((wireless_diagnostics::google::protobuf::io::CodedOutputStream **)this
                                                                                       + 1))
         + 1;
      v2 = *((_DWORD *)this + 6);
    }
    else
    {
      v3 = 0;
    }
    if ((v2 & 2) != 0)
      result = v3 + 5;
    else
      result = v3;
  }
  else
  {
    result = 0;
  }
  *((_DWORD *)this + 5) = result;
  return result;
}

float CLMicroLocationProto::AssociatedAccessPointInfo::CheckTypeAndMergeFrom(CLMicroLocationProto::AssociatedAccessPointInfo *this, const wireless_diagnostics::google::protobuf::MessageLite *lpsrc)
{
  uint64_t v4;
  uint64_t v5;

  return CLMicroLocationProto::AssociatedAccessPointInfo::MergeFrom(this, lpsrc);
}

float CLMicroLocationProto::AssociatedAccessPointInfo::CopyFrom(CLMicroLocationProto::AssociatedAccessPointInfo *this, const CLMicroLocationProto::AssociatedAccessPointInfo *a2)
{
  float result;

  if (a2 != this)
  {
    (*(void (**)(CLMicroLocationProto::AssociatedAccessPointInfo *))(*(_QWORD *)this + 32))(this);
    return CLMicroLocationProto::AssociatedAccessPointInfo::MergeFrom(this, a2);
  }
  return result;
}

uint64_t CLMicroLocationProto::AssociatedAccessPointInfo::IsInitialized(CLMicroLocationProto::AssociatedAccessPointInfo *this)
{
  return 1;
}

_QWORD *CLMicroLocationProto::AssociatedAccessPointInfo::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CLMicroLocationProto.AssociatedAccessPointInfo");
}

uint64_t CLMicroLocationProto::RecordingEvent::default_instance(CLMicroLocationProto::RecordingEvent *this)
{
  CLMicroLocationProto::protobuf_AddDesc_microlocation_2eproto(this);
  return CLMicroLocationProto::RecordingEvent::default_instance_;
}

double CLMicroLocationProto::RecordingEvent::New(CLMicroLocationProto::RecordingEvent *this)
{
  uint64_t v1;
  double result;

  v1 = operator new();
  *(_QWORD *)v1 = &off_2511D8180;
  *(_DWORD *)(v1 + 72) = 1;
  *(_WORD *)(v1 + 76) = 0;
  *(_QWORD *)(v1 + 128) = 0;
  *(_QWORD *)(v1 + 136) = 0;
  result = 0.0;
  *(_OWORD *)(v1 + 8) = 0u;
  *(_OWORD *)(v1 + 24) = 0u;
  *(_OWORD *)(v1 + 40) = 0u;
  *(_OWORD *)(v1 + 56) = 0u;
  *(_QWORD *)(v1 + 96) = 0;
  *(_QWORD *)(v1 + 104) = 0;
  *(_QWORD *)(v1 + 80) = 0;
  *(_QWORD *)(v1 + 88) = 0;
  *(_QWORD *)(v1 + 112) = 0;
  *(_QWORD *)(v1 + 120) = 0;
  return result;
}

uint64_t CLMicroLocationProto::RecordingEvent::Clear(uint64_t this)
{
  uint64_t v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = this;
  v2 = *(_DWORD *)(this + 140);
  if ((_BYTE)v2)
  {
    *(_DWORD *)(this + 72) = 1;
    *(_QWORD *)(this + 8) = 0;
    if ((v2 & 4) != 0)
    {
      this = *(_QWORD *)(this + 16);
      if (this)
      {
        this = CLMicroLocationProto::ReceivedEventAction::Clear(this);
        v2 = *(_DWORD *)(v1 + 140);
      }
    }
    if ((v2 & 8) != 0)
    {
      this = *(_QWORD *)(v1 + 24);
      if (this)
      {
        this = CLMicroLocationProto::AppLaunch::Clear(this);
        v2 = *(_DWORD *)(v1 + 140);
      }
    }
    if ((v2 & 0x10) != 0)
    {
      this = *(_QWORD *)(v1 + 32);
      if (this)
      {
        this = CLMicroLocationProto::BacklightOn::Clear(this);
        v2 = *(_DWORD *)(v1 + 140);
      }
    }
    if ((v2 & 0x20) != 0)
    {
      v3 = *(_QWORD *)(v1 + 40);
      if (v3)
      {
        if (*(_BYTE *)(v3 + 16))
          *(_DWORD *)(v3 + 8) = 5;
        *(_DWORD *)(v3 + 16) = 0;
        v2 = *(_DWORD *)(v1 + 140);
      }
    }
    if ((v2 & 0x40) != 0)
    {
      v4 = *(_QWORD *)(v1 + 48);
      if (v4)
      {
        if (*(_BYTE *)(v4 + 16))
          *(_DWORD *)(v4 + 8) = 7;
        *(_DWORD *)(v4 + 16) = 0;
        v2 = *(_DWORD *)(v1 + 140);
      }
    }
    if ((v2 & 0x80) != 0)
    {
      this = *(_QWORD *)(v1 + 56);
      if (this)
      {
        this = CLMicroLocationProto::HomeKitAccessory::Clear(this);
        v2 = *(_DWORD *)(v1 + 140);
      }
    }
  }
  if ((v2 & 0xFF00) != 0)
  {
    if ((v2 & 0x100) != 0)
    {
      this = *(_QWORD *)(v1 + 64);
      if (this)
      {
        this = CLMicroLocationProto::HomeKitScene::Clear(this);
        v2 = *(_DWORD *)(v1 + 140);
      }
    }
    if ((v2 & 0x200) != 0)
    {
      this = *(_QWORD *)(v1 + 80);
      if (this)
      {
        this = CLMicroLocationProto::NowPlaying::Clear(this);
        v2 = *(_DWORD *)(v1 + 140);
      }
    }
    if ((v2 & 0x400) != 0)
    {
      this = *(_QWORD *)(v1 + 88);
      if (this)
      {
        this = CLMicroLocationProto::RecordingRequest::Clear(this);
        v2 = *(_DWORD *)(v1 + 140);
      }
    }
    *(_BYTE *)(v1 + 76) = 0;
    if ((v2 & 0x1000) != 0)
    {
      this = *(_QWORD *)(v1 + 96);
      if (this)
      {
        this = CLMicroLocationProto::TruthLabelDonation::Clear(this);
        v2 = *(_DWORD *)(v1 + 140);
      }
    }
    *(_BYTE *)(v1 + 77) = 0;
    *(_DWORD *)(v1 + 120) = 0;
  }
  if ((v2 & 0xFF0000) != 0)
  {
    if ((v2 & 0x10000) != 0)
    {
      v5 = *(_QWORD *)(v1 + 128);
      if (v5)
      {
        if (*(_BYTE *)(v5 + 24))
        {
          *(_QWORD *)(v5 + 8) = 0;
          *(_DWORD *)(v5 + 16) = 0;
        }
        *(_DWORD *)(v5 + 24) = 0;
      }
    }
    *(_DWORD *)(v1 + 124) = 0;
  }
  *(_DWORD *)(v1 + 112) = 0;
  *(_DWORD *)(v1 + 140) = 0;
  return this;
}

uint64_t CLMicroLocationProto::RecordingEvent::MergePartialFromCodedStream(CLMicroLocationProto::RecordingEvent *this, wireless_diagnostics::google::protobuf::io::CodedInputStream *a2)
{
  _DWORD *v4;
  uint64_t v5;
  char *v6;
  uint64_t TagFallback;
  int v8;
  char *v9;
  unsigned int v10;
  unint64_t v11;
  unsigned __int8 *v12;
  unint64_t v13;
  unsigned __int8 *v14;
  int v15;
  int v16;
  char *v17;
  unint64_t v18;
  char *v19;
  unint64_t v20;
  char *v21;
  uint64_t result;
  BOOL v23;
  _BYTE *v24;
  _BYTE *v25;
  CLMicroLocationProto::ReceivedEventAction *v26;
  char *v27;
  int v28;
  int v29;
  int v30;
  BOOL v31;
  int v32;
  _BYTE *v33;
  uint64_t v34;
  char *v35;
  int v36;
  int v37;
  int v38;
  int v39;
  _BYTE *v40;
  uint64_t v41;
  char *v42;
  int v43;
  int v44;
  int v45;
  int v46;
  _BYTE *v47;
  uint64_t v48;
  char *v49;
  int v50;
  int v51;
  int v52;
  int v53;
  _BYTE *v54;
  uint64_t v55;
  char *v56;
  int v57;
  int v58;
  int v59;
  int v60;
  _BYTE *v61;
  uint64_t v62;
  char *v63;
  int v64;
  int v65;
  int v66;
  int v67;
  _BYTE *v68;
  uint64_t v69;
  char *v70;
  int v71;
  int v72;
  int v73;
  int v74;
  _BYTE *v75;
  uint64_t v76;
  char *v77;
  int v78;
  int v79;
  int v80;
  int v81;
  _BYTE *v82;
  CLMicroLocationProto::RecordingRequest *v83;
  char *v84;
  int v85;
  int v86;
  int v87;
  int v88;
  unsigned __int8 *v89;
  unsigned int v90;
  unsigned __int8 *v91;
  uint64_t v92;
  char *v93;
  int v94;
  int v95;
  int v96;
  int v97;
  unsigned __int8 *v98;
  unsigned int v99;
  unsigned __int8 *v100;
  unsigned int v101;
  unsigned __int8 *v103;
  unsigned int v104;
  int v105;
  uint64_t v106;
  int v107;
  uint64_t v108;
  char *v109;
  int v110;
  int v111;
  int v112;
  int v113;
  unsigned __int8 *v114;
  unsigned int v115;
  unsigned int v116[2];

  v4 = (_DWORD *)((char *)this + 104);
  v5 = MEMORY[0x24BEDD958];
LABEL_2:
  while (2)
  {
    v6 = (char *)*((_QWORD *)a2 + 1);
    if ((unint64_t)v6 >= *((_QWORD *)a2 + 2) || *v6 < 0)
    {
      TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(a2);
      *((_DWORD *)a2 + 8) = TagFallback;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    else
    {
      TagFallback = *v6;
      *((_DWORD *)a2 + 8) = TagFallback;
      *((_QWORD *)a2 + 1) = v6 + 1;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    switch(TagFallback >> 3)
    {
      case 1u:
        v8 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_47;
        v116[0] = 0;
        v9 = (char *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v9 >= *((_QWORD *)a2 + 2) || *v9 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v116);
          if (!(_DWORD)result)
            return result;
          v10 = v116[0];
        }
        else
        {
          v10 = *v9;
          *((_QWORD *)a2 + 1) = v9 + 1;
        }
        if (v10 - 31 < 0x19 || (v10 <= 0xE ? (v23 = ((1 << v10) & 0x76B6) == 0) : (v23 = 1), !v23))
        {
          if (v10 - 31 >= 0x19 && (v10 > 0xE || ((1 << v10) & 0x76B6) == 0))
            CLMicroLocationProto::RecordingEvent::MergeFrom();
          *((_DWORD *)this + 35) |= 1u;
          *((_DWORD *)this + 18) = v10;
        }
        v24 = (_BYTE *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v24 < *((_QWORD *)a2 + 2) && *v24 == 17)
        {
          *((_QWORD *)a2 + 1) = v24 + 1;
          goto LABEL_67;
        }
        continue;
      case 2u:
        v8 = TagFallback & 7;
        if (v8 != 1)
          goto LABEL_47;
LABEL_67:
        *(_QWORD *)v116 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(a2, (unint64_t *)v116) & 1) == 0)return 0;
        *((_QWORD *)this + 1) = *(_QWORD *)v116;
        v16 = *((_DWORD *)this + 35) | 2;
        *((_DWORD *)this + 35) = v16;
        v25 = (_BYTE *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v25 >= *((_QWORD *)a2 + 2) || *v25 != 26)
          continue;
        *((_QWORD *)a2 + 1) = v25 + 1;
LABEL_71:
        *((_DWORD *)this + 35) = v16 | 4;
        v26 = (CLMicroLocationProto::ReceivedEventAction *)*((_QWORD *)this + 2);
        if (!v26)
        {
          v26 = (CLMicroLocationProto::ReceivedEventAction *)operator new();
          *(_QWORD *)v26 = &off_2511D7370;
          *((_QWORD *)v26 + 1) = 0x100000001;
          *((_QWORD *)v26 + 2) = v5;
          *((_QWORD *)v26 + 3) = v5;
          *((_QWORD *)v26 + 4) = v5;
          *((_QWORD *)v26 + 5) = 0;
          *((_QWORD *)this + 2) = v26;
        }
        v116[0] = 0;
        v27 = (char *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v27 >= *((_QWORD *)a2 + 2) || *v27 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v116))return 0;
        }
        else
        {
          v116[0] = *v27;
          *((_QWORD *)a2 + 1) = v27 + 1;
        }
        v28 = *((_DWORD *)a2 + 14);
        v29 = *((_DWORD *)a2 + 15);
        *((_DWORD *)a2 + 14) = v28 + 1;
        if (v28 >= v29)
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(a2);
        if (!CLMicroLocationProto::ReceivedEventAction::MergePartialFromCodedStream(v26, a2)
          || !*((_BYTE *)a2 + 36))
        {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(a2);
        v30 = *((_DWORD *)a2 + 14);
        v31 = __OFSUB__(v30, 1);
        v32 = v30 - 1;
        if (v32 < 0 == v31)
          *((_DWORD *)a2 + 14) = v32;
        v33 = (_BYTE *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v33 >= *((_QWORD *)a2 + 2) || *v33 != 34)
          continue;
        *((_QWORD *)a2 + 1) = v33 + 1;
LABEL_85:
        *((_DWORD *)this + 35) |= 8u;
        v34 = *((_QWORD *)this + 3);
        if (!v34)
        {
          v34 = operator new();
          *(_QWORD *)(v34 + 32) = 2;
          *(_QWORD *)v34 = &off_2511D7460;
          *(_QWORD *)(v34 + 8) = v5;
          *(_QWORD *)(v34 + 16) = 0;
          *(_QWORD *)(v34 + 24) = v5;
          *(_DWORD *)(v34 + 40) = 0;
          *((_QWORD *)this + 3) = v34;
        }
        v116[0] = 0;
        v35 = (char *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v35 >= *((_QWORD *)a2 + 2) || *v35 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v116))return 0;
        }
        else
        {
          v116[0] = *v35;
          *((_QWORD *)a2 + 1) = v35 + 1;
        }
        v36 = *((_DWORD *)a2 + 14);
        v37 = *((_DWORD *)a2 + 15);
        *((_DWORD *)a2 + 14) = v36 + 1;
        if (v36 >= v37)
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(a2);
        if (!CLMicroLocationProto::AppLaunch::MergePartialFromCodedStream((CLMicroLocationProto::AppLaunch *)v34, a2)|| !*((_BYTE *)a2 + 36))
        {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(a2);
        v38 = *((_DWORD *)a2 + 14);
        v31 = __OFSUB__(v38, 1);
        v39 = v38 - 1;
        if (v39 < 0 == v31)
          *((_DWORD *)a2 + 14) = v39;
        v40 = (_BYTE *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v40 >= *((_QWORD *)a2 + 2) || *v40 != 50)
          continue;
        *((_QWORD *)a2 + 1) = v40 + 1;
LABEL_99:
        *((_DWORD *)this + 35) |= 0x10u;
        v41 = *((_QWORD *)this + 4);
        if (!v41)
        {
          v41 = operator new();
          *(_QWORD *)(v41 + 16) = 4;
          *(_QWORD *)v41 = &off_2511D74D8;
          *(_QWORD *)(v41 + 8) = v5;
          *(_DWORD *)(v41 + 24) = 0;
          *((_QWORD *)this + 4) = v41;
        }
        v116[0] = 0;
        v42 = (char *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v42 >= *((_QWORD *)a2 + 2) || *v42 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v116))return 0;
        }
        else
        {
          v116[0] = *v42;
          *((_QWORD *)a2 + 1) = v42 + 1;
        }
        v43 = *((_DWORD *)a2 + 14);
        v44 = *((_DWORD *)a2 + 15);
        *((_DWORD *)a2 + 14) = v43 + 1;
        if (v43 >= v44)
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(a2);
        if (!CLMicroLocationProto::BacklightOn::MergePartialFromCodedStream((CLMicroLocationProto::BacklightOn *)v41, a2)|| !*((_BYTE *)a2 + 36))
        {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(a2);
        v45 = *((_DWORD *)a2 + 14);
        v31 = __OFSUB__(v45, 1);
        v46 = v45 - 1;
        if (v46 < 0 == v31)
          *((_DWORD *)a2 + 14) = v46;
        v47 = (_BYTE *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v47 >= *((_QWORD *)a2 + 2) || *v47 != 58)
          continue;
        *((_QWORD *)a2 + 1) = v47 + 1;
LABEL_113:
        *((_DWORD *)this + 35) |= 0x20u;
        v48 = *((_QWORD *)this + 5);
        if (!v48)
        {
          v48 = operator new();
          *(_QWORD *)v48 = &off_2511D7550;
          *(_QWORD *)(v48 + 8) = 5;
          *(_DWORD *)(v48 + 16) = 0;
          *((_QWORD *)this + 5) = v48;
        }
        v116[0] = 0;
        v49 = (char *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v49 >= *((_QWORD *)a2 + 2) || *v49 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v116))return 0;
        }
        else
        {
          v116[0] = *v49;
          *((_QWORD *)a2 + 1) = v49 + 1;
        }
        v50 = *((_DWORD *)a2 + 14);
        v51 = *((_DWORD *)a2 + 15);
        *((_DWORD *)a2 + 14) = v50 + 1;
        if (v50 >= v51)
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(a2);
        if (!CLMicroLocationProto::BatteryChargerConnected::MergePartialFromCodedStream((CLMicroLocationProto::BatteryChargerConnected *)v48, a2)|| !*((_BYTE *)a2 + 36))
        {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(a2);
        v52 = *((_DWORD *)a2 + 14);
        v31 = __OFSUB__(v52, 1);
        v53 = v52 - 1;
        if (v53 < 0 == v31)
          *((_DWORD *)a2 + 14) = v53;
        v54 = (_BYTE *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v54 >= *((_QWORD *)a2 + 2) || *v54 != 74)
          continue;
        *((_QWORD *)a2 + 1) = v54 + 1;
LABEL_127:
        *((_DWORD *)this + 35) |= 0x40u;
        v55 = *((_QWORD *)this + 6);
        if (!v55)
        {
          v55 = operator new();
          *(_QWORD *)v55 = &off_2511D7640;
          *(_QWORD *)(v55 + 8) = 7;
          *(_DWORD *)(v55 + 16) = 0;
          *((_QWORD *)this + 6) = v55;
        }
        v116[0] = 0;
        v56 = (char *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v56 >= *((_QWORD *)a2 + 2) || *v56 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v116))return 0;
        }
        else
        {
          v116[0] = *v56;
          *((_QWORD *)a2 + 1) = v56 + 1;
        }
        v57 = *((_DWORD *)a2 + 14);
        v58 = *((_DWORD *)a2 + 15);
        *((_DWORD *)a2 + 14) = v57 + 1;
        if (v57 >= v58)
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(a2);
        if (!CLMicroLocationProto::ForcedRecording::MergePartialFromCodedStream((CLMicroLocationProto::ForcedRecording *)v55, a2)|| !*((_BYTE *)a2 + 36))
        {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(a2);
        v59 = *((_DWORD *)a2 + 14);
        v31 = __OFSUB__(v59, 1);
        v60 = v59 - 1;
        if (v60 < 0 == v31)
          *((_DWORD *)a2 + 14) = v60;
        v61 = (_BYTE *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v61 >= *((_QWORD *)a2 + 2) || *v61 != 90)
          continue;
        *((_QWORD *)a2 + 1) = v61 + 1;
LABEL_141:
        *((_DWORD *)this + 35) |= 0x80u;
        v62 = *((_QWORD *)this + 7);
        if (!v62)
        {
          v62 = operator new();
          *(_DWORD *)(v62 + 64) = 9;
          *(_QWORD *)v62 = &off_2511D76B8;
          *(_QWORD *)(v62 + 8) = v5;
          *(_QWORD *)(v62 + 16) = v5;
          *(_QWORD *)(v62 + 24) = v5;
          *(_QWORD *)(v62 + 32) = v5;
          *(_QWORD *)(v62 + 40) = v5;
          *(_QWORD *)(v62 + 48) = v5;
          *(_QWORD *)(v62 + 56) = v5;
          *(_QWORD *)(v62 + 72) = v5;
          *(_QWORD *)(v62 + 80) = v5;
          *(_WORD *)(v62 + 68) = 0;
          *(_QWORD *)(v62 + 88) = v5;
          *(_QWORD *)(v62 + 96) = v5;
          *(_QWORD *)(v62 + 104) = v5;
          *(_QWORD *)(v62 + 112) = 0;
          *((_QWORD *)this + 7) = v62;
        }
        v116[0] = 0;
        v63 = (char *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v63 >= *((_QWORD *)a2 + 2) || *v63 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v116))return 0;
        }
        else
        {
          v116[0] = *v63;
          *((_QWORD *)a2 + 1) = v63 + 1;
        }
        v64 = *((_DWORD *)a2 + 14);
        v65 = *((_DWORD *)a2 + 15);
        *((_DWORD *)a2 + 14) = v64 + 1;
        if (v64 >= v65)
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(a2);
        if (!CLMicroLocationProto::HomeKitAccessory::MergePartialFromCodedStream((CLMicroLocationProto::HomeKitAccessory *)v62, a2)|| !*((_BYTE *)a2 + 36))
        {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(a2);
        v66 = *((_DWORD *)a2 + 14);
        v31 = __OFSUB__(v66, 1);
        v67 = v66 - 1;
        if (v67 < 0 == v31)
          *((_DWORD *)a2 + 14) = v67;
        v68 = (_BYTE *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v68 >= *((_QWORD *)a2 + 2) || *v68 != 98)
          continue;
        *((_QWORD *)a2 + 1) = v68 + 1;
LABEL_155:
        *((_DWORD *)this + 35) |= 0x100u;
        v69 = *((_QWORD *)this + 8);
        if (!v69)
        {
          v69 = operator new();
          *(_DWORD *)(v69 + 48) = 10;
          *(_QWORD *)v69 = &off_2511D7730;
          *(_QWORD *)(v69 + 8) = v5;
          *(_QWORD *)(v69 + 16) = v5;
          *(_QWORD *)(v69 + 24) = v5;
          *(_QWORD *)(v69 + 32) = v5;
          *(_QWORD *)(v69 + 40) = v5;
          *(_QWORD *)(v69 + 56) = v5;
          *(_QWORD *)(v69 + 64) = v5;
          *(_WORD *)(v69 + 52) = 0;
          *(_QWORD *)(v69 + 72) = v5;
          *(_QWORD *)(v69 + 80) = 0;
          *((_QWORD *)this + 8) = v69;
        }
        v116[0] = 0;
        v70 = (char *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v70 >= *((_QWORD *)a2 + 2) || *v70 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v116))return 0;
        }
        else
        {
          v116[0] = *v70;
          *((_QWORD *)a2 + 1) = v70 + 1;
        }
        v71 = *((_DWORD *)a2 + 14);
        v72 = *((_DWORD *)a2 + 15);
        *((_DWORD *)a2 + 14) = v71 + 1;
        if (v71 >= v72)
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(a2);
        if (!CLMicroLocationProto::HomeKitScene::MergePartialFromCodedStream((CLMicroLocationProto::HomeKitScene *)v69, a2)|| !*((_BYTE *)a2 + 36))
        {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(a2);
        v73 = *((_DWORD *)a2 + 14);
        v31 = __OFSUB__(v73, 1);
        v74 = v73 - 1;
        if (v74 < 0 == v31)
          *((_DWORD *)a2 + 14) = v74;
        v75 = (_BYTE *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v75 >= *((_QWORD *)a2 + 2) || *v75 != 114)
          continue;
        *((_QWORD *)a2 + 1) = v75 + 1;
LABEL_169:
        *((_DWORD *)this + 35) |= 0x200u;
        v76 = *((_QWORD *)this + 10);
        if (!v76)
        {
          v76 = operator new();
          *(_QWORD *)(v76 + 32) = 0;
          *(_QWORD *)(v76 + 40) = 0;
          *(_DWORD *)(v76 + 48) = 0;
          *(_QWORD *)v76 = &off_2511D7820;
          *(_QWORD *)(v76 + 8) = v5;
          *(_QWORD *)(v76 + 16) = 12;
          *(_QWORD *)(v76 + 24) = v5;
          *(_QWORD *)(v76 + 56) = 0;
          *(_QWORD *)(v76 + 64) = 0;
          *((_QWORD *)this + 10) = v76;
        }
        v116[0] = 0;
        v77 = (char *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v77 >= *((_QWORD *)a2 + 2) || *v77 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v116))return 0;
        }
        else
        {
          v116[0] = *v77;
          *((_QWORD *)a2 + 1) = v77 + 1;
        }
        v78 = *((_DWORD *)a2 + 14);
        v79 = *((_DWORD *)a2 + 15);
        *((_DWORD *)a2 + 14) = v78 + 1;
        if (v78 >= v79)
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(a2);
        if (!CLMicroLocationProto::NowPlaying::MergePartialFromCodedStream((CLMicroLocationProto::NowPlaying *)v76, a2)|| !*((_BYTE *)a2 + 36))
        {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(a2);
        v80 = *((_DWORD *)a2 + 14);
        v31 = __OFSUB__(v80, 1);
        v81 = v80 - 1;
        if (v81 < 0 == v31)
          *((_DWORD *)a2 + 14) = v81;
        v82 = (_BYTE *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v82 >= *((_QWORD *)a2 + 2) || *v82 != 122)
          continue;
        *((_QWORD *)a2 + 1) = v82 + 1;
LABEL_183:
        *((_DWORD *)this + 35) |= 0x400u;
        v83 = (CLMicroLocationProto::RecordingRequest *)*((_QWORD *)this + 11);
        if (!v83)
        {
          v83 = (CLMicroLocationProto::RecordingRequest *)operator new();
          *(_QWORD *)v83 = &off_2511D73E8;
          *((_QWORD *)v83 + 1) = 0x10000000DLL;
          *((_QWORD *)v83 + 2) = v5;
          *((_QWORD *)v83 + 3) = v5;
          *((_QWORD *)v83 + 4) = v5;
          *((_QWORD *)v83 + 5) = 0;
          *((_QWORD *)this + 11) = v83;
        }
        v116[0] = 0;
        v84 = (char *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v84 >= *((_QWORD *)a2 + 2) || *v84 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v116))return 0;
        }
        else
        {
          v116[0] = *v84;
          *((_QWORD *)a2 + 1) = v84 + 1;
        }
        v85 = *((_DWORD *)a2 + 14);
        v86 = *((_DWORD *)a2 + 15);
        *((_DWORD *)a2 + 14) = v85 + 1;
        if (v85 >= v86)
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(a2);
        if (!CLMicroLocationProto::RecordingRequest::MergePartialFromCodedStream(v83, a2)
          || !*((_BYTE *)a2 + 36))
        {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(a2);
        v87 = *((_DWORD *)a2 + 14);
        v31 = __OFSUB__(v87, 1);
        v88 = v87 - 1;
        if (v88 < 0 == v31)
          *((_DWORD *)a2 + 14) = v88;
        v89 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
        v13 = *((_QWORD *)a2 + 2);
        if ((int)v13 - (int)v89 <= 1 || *v89 != 128 || v89[1] != 1)
          continue;
        v14 = v89 + 2;
        *((_QWORD *)a2 + 1) = v14;
LABEL_198:
        v116[0] = 0;
        if ((unint64_t)v14 >= v13 || (char)*v14 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v116);
          if (!(_DWORD)result)
            return result;
          v90 = v116[0];
          v91 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
          v13 = *((_QWORD *)a2 + 2);
        }
        else
        {
          v90 = *v14;
          v91 = v14 + 1;
          *((_QWORD *)a2 + 1) = v91;
        }
        *((_BYTE *)this + 76) = v90 != 0;
        v15 = *((_DWORD *)this + 35) | 0x800;
        *((_DWORD *)this + 35) = v15;
        if ((int)v13 - (int)v91 < 2 || *v91 != 138 || v91[1] != 1)
          continue;
        *((_QWORD *)a2 + 1) = v91 + 2;
LABEL_207:
        *((_DWORD *)this + 35) = v15 | 0x1000;
        v92 = *((_QWORD *)this + 12);
        if (!v92)
        {
          v92 = operator new();
          *(_QWORD *)(v92 + 32) = 14;
          *(_QWORD *)v92 = &off_2511D75C8;
          *(_QWORD *)(v92 + 8) = v5;
          *(_QWORD *)(v92 + 16) = v5;
          *(_QWORD *)(v92 + 24) = v5;
          *(_DWORD *)(v92 + 40) = 0;
          *((_QWORD *)this + 12) = v92;
        }
        v116[0] = 0;
        v93 = (char *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v93 >= *((_QWORD *)a2 + 2) || *v93 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v116))return 0;
        }
        else
        {
          v116[0] = *v93;
          *((_QWORD *)a2 + 1) = v93 + 1;
        }
        v94 = *((_DWORD *)a2 + 14);
        v95 = *((_DWORD *)a2 + 15);
        *((_DWORD *)a2 + 14) = v94 + 1;
        if (v94 >= v95)
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(a2);
        if (!CLMicroLocationProto::TruthLabelDonation::MergePartialFromCodedStream((CLMicroLocationProto::TruthLabelDonation *)v92, a2)|| !*((_BYTE *)a2 + 36))
        {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(a2);
        v96 = *((_DWORD *)a2 + 14);
        v31 = __OFSUB__(v96, 1);
        v97 = v96 - 1;
        if (v97 < 0 == v31)
          *((_DWORD *)a2 + 14) = v97;
        v98 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
        v11 = *((_QWORD *)a2 + 2);
        if ((int)v11 - (int)v98 <= 1 || *v98 != 144 || v98[1] != 1)
          continue;
        v12 = v98 + 2;
        *((_QWORD *)a2 + 1) = v12;
LABEL_222:
        v116[0] = 0;
        if ((unint64_t)v12 >= v11 || (char)*v12 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v116);
          if (!(_DWORD)result)
            return result;
          v99 = v116[0];
          v100 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
          v11 = *((_QWORD *)a2 + 2);
        }
        else
        {
          v99 = *v12;
          v100 = v12 + 1;
          *((_QWORD *)a2 + 1) = v100;
        }
        *((_BYTE *)this + 77) = v99 != 0;
        *((_DWORD *)this + 35) |= 0x2000u;
        if ((int)v11 - (int)v100 < 2 || *v100 != 152 || v100[1] != 1)
          continue;
        v17 = (char *)(v100 + 2);
        *((_QWORD *)a2 + 1) = v17;
LABEL_231:
        v116[0] = 0;
        if ((unint64_t)v17 >= v11 || *v17 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v116);
          if (!(_DWORD)result)
            return result;
          v101 = v116[0];
        }
        else
        {
          v101 = *v17;
          *((_QWORD *)a2 + 1) = v17 + 1;
        }
        if (v101 < 4 || v101 == 15)
        {
          *((_DWORD *)this + 35) |= 0x4000u;
          *((_DWORD *)this + 30) = v101;
        }
        v103 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
        v18 = *((_QWORD *)a2 + 2);
        if ((int)v18 - (int)v103 >= 2 && *v103 == 160 && v103[1] == 1)
          goto LABEL_245;
        continue;
      case 3u:
        v8 = TagFallback & 7;
        if (v8 != 2)
          goto LABEL_47;
        v16 = *((_DWORD *)this + 35);
        goto LABEL_71;
      case 4u:
        v8 = TagFallback & 7;
        if (v8 == 2)
          goto LABEL_85;
        goto LABEL_47;
      case 6u:
        v8 = TagFallback & 7;
        if (v8 == 2)
          goto LABEL_99;
        goto LABEL_47;
      case 7u:
        v8 = TagFallback & 7;
        if (v8 == 2)
          goto LABEL_113;
        goto LABEL_47;
      case 9u:
        v8 = TagFallback & 7;
        if (v8 == 2)
          goto LABEL_127;
        goto LABEL_47;
      case 0xBu:
        v8 = TagFallback & 7;
        if (v8 == 2)
          goto LABEL_141;
        goto LABEL_47;
      case 0xCu:
        v8 = TagFallback & 7;
        if (v8 == 2)
          goto LABEL_155;
        goto LABEL_47;
      case 0xEu:
        v8 = TagFallback & 7;
        if (v8 == 2)
          goto LABEL_169;
        goto LABEL_47;
      case 0xFu:
        v8 = TagFallback & 7;
        if (v8 == 2)
          goto LABEL_183;
        goto LABEL_47;
      case 0x10u:
        v8 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_47;
        v14 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
        v13 = *((_QWORD *)a2 + 2);
        goto LABEL_198;
      case 0x11u:
        v8 = TagFallback & 7;
        if (v8 != 2)
          goto LABEL_47;
        v15 = *((_DWORD *)this + 35);
        goto LABEL_207;
      case 0x12u:
        v8 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_47;
        v12 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
        v11 = *((_QWORD *)a2 + 2);
        goto LABEL_222;
      case 0x13u:
        v8 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_47;
        v17 = (char *)*((_QWORD *)a2 + 1);
        v11 = *((_QWORD *)a2 + 2);
        goto LABEL_231;
      case 0x14u:
        v8 = TagFallback & 7;
        if (v8 == 2)
        {
          result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadPackedEnumNoInline();
          if (!(_DWORD)result)
            return result;
          while (1)
          {
            v103 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
            v18 = *((_QWORD *)a2 + 2);
            if ((int)v18 - (int)v103 < 2)
              goto LABEL_2;
            v107 = *v103;
            if (v107 == 170)
              break;
            if (v107 != 160 || v103[1] != 1)
              goto LABEL_2;
LABEL_245:
            v19 = (char *)(v103 + 2);
            *((_QWORD *)a2 + 1) = v19;
LABEL_246:
            v116[0] = 0;
            if ((unint64_t)v19 >= v18 || *v19 < 0)
            {
              result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v116);
              if (!(_DWORD)result)
                return result;
              v104 = v116[0];
            }
            else
            {
              v104 = *v19;
              *((_QWORD *)a2 + 1) = v19 + 1;
            }
            if (v104 <= 7)
            {
              v105 = *((_DWORD *)this + 28);
              if (v105 == *((_DWORD *)this + 29))
              {
                wireless_diagnostics::google::protobuf::RepeatedField<int>::Reserve(v4, v105 + 1);
                v105 = *((_DWORD *)this + 28);
              }
              v106 = *((_QWORD *)this + 13);
              *((_DWORD *)this + 28) = v105 + 1;
              *(_DWORD *)(v106 + 4 * v105) = v104;
            }
          }
          if (v103[1] == 1)
          {
            *((_QWORD *)a2 + 1) = v103 + 2;
LABEL_262:
            *((_DWORD *)this + 35) |= 0x10000u;
            v108 = *((_QWORD *)this + 16);
            if (!v108)
            {
              v108 = operator new();
              *(_QWORD *)(v108 + 8) = 0;
              *(_QWORD *)(v108 + 16) = 0;
              *(_QWORD *)v108 = &off_2511D8108;
              *(_DWORD *)(v108 + 24) = 0;
              *((_QWORD *)this + 16) = v108;
            }
            v116[0] = 0;
            v109 = (char *)*((_QWORD *)a2 + 1);
            if ((unint64_t)v109 >= *((_QWORD *)a2 + 2) || *v109 < 0)
            {
              if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v116))return 0;
            }
            else
            {
              v116[0] = *v109;
              *((_QWORD *)a2 + 1) = v109 + 1;
            }
            v110 = *((_DWORD *)a2 + 14);
            v111 = *((_DWORD *)a2 + 15);
            *((_DWORD *)a2 + 14) = v110 + 1;
            if (v110 >= v111)
              return 0;
            wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(a2);
            if (!CLMicroLocationProto::AssociatedAccessPointInfo::MergePartialFromCodedStream((CLMicroLocationProto::AssociatedAccessPointInfo *)v108, a2)|| !*((_BYTE *)a2 + 36))
            {
              return 0;
            }
            wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(a2);
            v112 = *((_DWORD *)a2 + 14);
            v31 = __OFSUB__(v112, 1);
            v113 = v112 - 1;
            if (v113 < 0 == v31)
              *((_DWORD *)a2 + 14) = v113;
            v114 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
            v20 = *((_QWORD *)a2 + 2);
            if ((int)v20 - (int)v114 > 1 && *v114 == 176 && v114[1] == 1)
            {
              v21 = (char *)(v114 + 2);
              *((_QWORD *)a2 + 1) = v21;
LABEL_277:
              v116[0] = 0;
              if ((unint64_t)v21 >= v20 || *v21 < 0)
              {
                result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v116);
                if (!(_DWORD)result)
                  return result;
                v115 = v116[0];
              }
              else
              {
                v115 = *v21;
                *((_QWORD *)a2 + 1) = v21 + 1;
              }
              if (v115 <= 3)
              {
                *((_DWORD *)this + 35) |= 0x20000u;
                *((_DWORD *)this + 31) = v115;
              }
              if (*((_QWORD *)a2 + 1) == *((_QWORD *)a2 + 2)
                && (*((_DWORD *)a2 + 11) || *((_DWORD *)a2 + 6) == *((_DWORD *)a2 + 10)))
              {
                *((_DWORD *)a2 + 8) = 0;
                result = 1;
                *((_BYTE *)a2 + 36) = 1;
                return result;
              }
            }
          }
          continue;
        }
        if ((TagFallback & 7) == 0)
        {
          v19 = (char *)*((_QWORD *)a2 + 1);
          v18 = *((_QWORD *)a2 + 2);
          goto LABEL_246;
        }
LABEL_47:
        if (v8 != 4)
        {
          if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(a2, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback) & 1) == 0)return 0;
          continue;
        }
        return 1;
      case 0x15u:
        v8 = TagFallback & 7;
        if (v8 == 2)
          goto LABEL_262;
        goto LABEL_47;
      case 0x16u:
        v8 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_47;
        v21 = (char *)*((_QWORD *)a2 + 1);
        v20 = *((_QWORD *)a2 + 2);
        goto LABEL_277;
      default:
        v8 = TagFallback & 7;
        goto LABEL_47;
    }
  }
}

unsigned int *CLMicroLocationProto::RecordingEvent::SerializeWithCachedSizes(unsigned int *this, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a2, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  unsigned int *v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v5 = this;
  v6 = this[35];
  if ((v6 & 1) != 0)
  {
    this = (unsigned int *)wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, this[18], (uint64_t)a2, a4);
    v6 = v5[35];
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0)
        goto LABEL_4;
      goto LABEL_25;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  this = (unsigned int *)wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, (uint64_t)a2, *((double *)v5 + 1), a3);
  v6 = v5[35];
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0)
      goto LABEL_5;
    goto LABEL_28;
  }
LABEL_25:
  v9 = *((_QWORD *)v5 + 2);
  if (!v9)
  {
    CLMicroLocationProto::protobuf_AddDesc_microlocation_2eproto((CLMicroLocationProto *)this);
    v9 = *(_QWORD *)(CLMicroLocationProto::RecordingEvent::default_instance_ + 16);
  }
  this = (unsigned int *)wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, v9, a2, a4);
  v6 = v5[35];
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_31;
  }
LABEL_28:
  v10 = *((_QWORD *)v5 + 3);
  if (!v10)
  {
    CLMicroLocationProto::protobuf_AddDesc_microlocation_2eproto((CLMicroLocationProto *)this);
    v10 = *(_QWORD *)(CLMicroLocationProto::RecordingEvent::default_instance_ + 24);
  }
  this = (unsigned int *)wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4, v10, a2, a4);
  v6 = v5[35];
  if ((v6 & 0x10) == 0)
  {
LABEL_6:
    if ((v6 & 0x20) == 0)
      goto LABEL_7;
    goto LABEL_34;
  }
LABEL_31:
  v11 = *((_QWORD *)v5 + 4);
  if (!v11)
  {
    CLMicroLocationProto::protobuf_AddDesc_microlocation_2eproto((CLMicroLocationProto *)this);
    v11 = *(_QWORD *)(CLMicroLocationProto::RecordingEvent::default_instance_ + 32);
  }
  this = (unsigned int *)wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)6, v11, a2, a4);
  v6 = v5[35];
  if ((v6 & 0x20) == 0)
  {
LABEL_7:
    if ((v6 & 0x40) == 0)
      goto LABEL_8;
    goto LABEL_37;
  }
LABEL_34:
  v12 = *((_QWORD *)v5 + 5);
  if (!v12)
  {
    CLMicroLocationProto::protobuf_AddDesc_microlocation_2eproto((CLMicroLocationProto *)this);
    v12 = *(_QWORD *)(CLMicroLocationProto::RecordingEvent::default_instance_ + 40);
  }
  this = (unsigned int *)wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)7, v12, a2, a4);
  v6 = v5[35];
  if ((v6 & 0x40) == 0)
  {
LABEL_8:
    if ((v6 & 0x80) == 0)
      goto LABEL_9;
    goto LABEL_40;
  }
LABEL_37:
  v13 = *((_QWORD *)v5 + 6);
  if (!v13)
  {
    CLMicroLocationProto::protobuf_AddDesc_microlocation_2eproto((CLMicroLocationProto *)this);
    v13 = *(_QWORD *)(CLMicroLocationProto::RecordingEvent::default_instance_ + 48);
  }
  this = (unsigned int *)wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)9, v13, a2, a4);
  v6 = v5[35];
  if ((v6 & 0x80) == 0)
  {
LABEL_9:
    if ((v6 & 0x100) == 0)
      goto LABEL_10;
    goto LABEL_43;
  }
LABEL_40:
  v14 = *((_QWORD *)v5 + 7);
  if (!v14)
  {
    CLMicroLocationProto::protobuf_AddDesc_microlocation_2eproto((CLMicroLocationProto *)this);
    v14 = *(_QWORD *)(CLMicroLocationProto::RecordingEvent::default_instance_ + 56);
  }
  this = (unsigned int *)wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xB, v14, a2, a4);
  v6 = v5[35];
  if ((v6 & 0x100) == 0)
  {
LABEL_10:
    if ((v6 & 0x200) == 0)
      goto LABEL_11;
    goto LABEL_46;
  }
LABEL_43:
  v15 = *((_QWORD *)v5 + 8);
  if (!v15)
  {
    CLMicroLocationProto::protobuf_AddDesc_microlocation_2eproto((CLMicroLocationProto *)this);
    v15 = *(_QWORD *)(CLMicroLocationProto::RecordingEvent::default_instance_ + 64);
  }
  this = (unsigned int *)wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xC, v15, a2, a4);
  v6 = v5[35];
  if ((v6 & 0x200) == 0)
  {
LABEL_11:
    if ((v6 & 0x400) == 0)
      goto LABEL_12;
    goto LABEL_49;
  }
LABEL_46:
  v16 = *((_QWORD *)v5 + 10);
  if (!v16)
  {
    CLMicroLocationProto::protobuf_AddDesc_microlocation_2eproto((CLMicroLocationProto *)this);
    v16 = *(_QWORD *)(CLMicroLocationProto::RecordingEvent::default_instance_ + 80);
  }
  this = (unsigned int *)wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xE, v16, a2, a4);
  v6 = v5[35];
  if ((v6 & 0x400) == 0)
  {
LABEL_12:
    if ((v6 & 0x800) == 0)
      goto LABEL_13;
    goto LABEL_52;
  }
LABEL_49:
  v17 = *((_QWORD *)v5 + 11);
  if (!v17)
  {
    CLMicroLocationProto::protobuf_AddDesc_microlocation_2eproto((CLMicroLocationProto *)this);
    v17 = *(_QWORD *)(CLMicroLocationProto::RecordingEvent::default_instance_ + 88);
  }
  this = (unsigned int *)wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xF, v17, a2, a4);
  v6 = v5[35];
  if ((v6 & 0x800) == 0)
  {
LABEL_13:
    if ((v6 & 0x1000) == 0)
      goto LABEL_14;
    goto LABEL_53;
  }
LABEL_52:
  this = (unsigned int *)wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x10, *((unsigned __int8 *)v5 + 76), (uint64_t)a2, a4);
  v6 = v5[35];
  if ((v6 & 0x1000) == 0)
  {
LABEL_14:
    if ((v6 & 0x2000) == 0)
      goto LABEL_15;
    goto LABEL_56;
  }
LABEL_53:
  v18 = *((_QWORD *)v5 + 12);
  if (!v18)
  {
    CLMicroLocationProto::protobuf_AddDesc_microlocation_2eproto((CLMicroLocationProto *)this);
    v18 = *(_QWORD *)(CLMicroLocationProto::RecordingEvent::default_instance_ + 96);
  }
  this = (unsigned int *)wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x11, v18, a2, a4);
  v6 = v5[35];
  if ((v6 & 0x2000) == 0)
  {
LABEL_15:
    if ((v6 & 0x4000) == 0)
      goto LABEL_17;
    goto LABEL_16;
  }
LABEL_56:
  this = (unsigned int *)wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x12, *((unsigned __int8 *)v5 + 77), (uint64_t)a2, a4);
  if ((v5[35] & 0x4000) != 0)
LABEL_16:
    this = (unsigned int *)wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x13, v5[30], (uint64_t)a2, a4);
LABEL_17:
  if ((int)v5[28] >= 1)
  {
    v7 = 0;
    do
      this = (unsigned int *)wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x14, *(unsigned int *)(*((_QWORD *)v5 + 13) + 4 * v7++), (uint64_t)a2, a4);
    while (v7 < (int)v5[28]);
  }
  v8 = v5[35];
  if ((v8 & 0x10000) == 0)
  {
    if ((v8 & 0x20000) == 0)
      return this;
    return (unsigned int *)wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x16, v5[31], (uint64_t)a2, a4);
  }
  v19 = *((_QWORD *)v5 + 16);
  if (!v19)
  {
    CLMicroLocationProto::protobuf_AddDesc_microlocation_2eproto((CLMicroLocationProto *)this);
    v19 = *(_QWORD *)(CLMicroLocationProto::RecordingEvent::default_instance_ + 128);
  }
  this = (unsigned int *)wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x15, v19, a2, a4);
  if ((v5[35] & 0x20000) != 0)
    return (unsigned int *)wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x16, v5[31], (uint64_t)a2, a4);
  return this;
}

uint64_t CLMicroLocationProto::RecordingEvent::ByteSize(CLMicroLocationProto::RecordingEvent *this)
{
  int v2;
  int v3;
  int v4;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v5;
  int v6;
  CLMicroLocationProto::ReceivedEventAction *v7;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v8;
  int v9;
  int v10;
  uint64_t v11;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v12;
  int v13;
  int v14;
  CLMicroLocationProto::BacklightOn *v15;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v16;
  int v17;
  int v18;
  CLMicroLocationProto::BatteryChargerConnected *v19;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v20;
  int v21;
  int v22;
  CLMicroLocationProto::ForcedRecording *v23;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v24;
  int v25;
  int v26;
  CLMicroLocationProto::HomeKitAccessory *v27;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v28;
  int v29;
  int v30;
  CLMicroLocationProto::HomeKitScene *v31;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v32;
  int v33;
  int v34;
  uint64_t v35;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v36;
  int v37;
  int v38;
  CLMicroLocationProto::RecordingRequest *v39;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v40;
  int v41;
  int v42;
  CLMicroLocationProto::TruthLabelDonation *v43;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v44;
  int v45;
  int v46;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v47;
  int v48;
  CLMicroLocationProto::AssociatedAccessPointInfo *v49;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v50;
  int v51;
  int v52;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v53;
  int v54;
  int v55;
  uint64_t v56;
  int v57;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v58;
  int v59;
  uint64_t result;

  v2 = *((_DWORD *)this + 35);
  if (!(_BYTE)v2)
  {
    v4 = 0;
    goto LABEL_57;
  }
  if ((v2 & 1) != 0)
  {
    v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 18);
    if ((v5 & 0x80000000) != 0)
    {
      v6 = 10;
    }
    else if (v5 >= 0x80)
    {
      v6 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v5);
      v2 = *((_DWORD *)this + 35);
    }
    else
    {
      v6 = 1;
    }
    v3 = v6 + 1;
  }
  else
  {
    v3 = 0;
  }
  if ((v2 & 2) != 0)
    v4 = v3 + 9;
  else
    v4 = v3;
  if ((v2 & 4) != 0)
  {
    v7 = (CLMicroLocationProto::ReceivedEventAction *)*((_QWORD *)this + 2);
    if (!v7)
    {
      CLMicroLocationProto::protobuf_AddDesc_microlocation_2eproto(0);
      v7 = *(CLMicroLocationProto::ReceivedEventAction **)(CLMicroLocationProto::RecordingEvent::default_instance_ + 16);
    }
    v8 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)CLMicroLocationProto::ReceivedEventAction::ByteSize(v7);
    v9 = (int)v8;
    if (v8 >= 0x80)
      v10 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v8);
    else
      v10 = 1;
    v4 += v9 + v10 + 1;
    v2 = *((_DWORD *)this + 35);
    if ((v2 & 8) == 0)
    {
LABEL_16:
      if ((v2 & 0x10) == 0)
        goto LABEL_17;
      goto LABEL_33;
    }
  }
  else if ((v2 & 8) == 0)
  {
    goto LABEL_16;
  }
  v11 = *((_QWORD *)this + 3);
  if (!v11)
  {
    CLMicroLocationProto::protobuf_AddDesc_microlocation_2eproto(0);
    v11 = *(_QWORD *)(CLMicroLocationProto::RecordingEvent::default_instance_ + 24);
  }
  v12 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)CLMicroLocationProto::AppLaunch::ByteSize(v11);
  v13 = (int)v12;
  if (v12 >= 0x80)
    v14 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v12);
  else
    v14 = 1;
  v4 += v13 + v14 + 1;
  v2 = *((_DWORD *)this + 35);
  if ((v2 & 0x10) == 0)
  {
LABEL_17:
    if ((v2 & 0x20) == 0)
      goto LABEL_18;
    goto LABEL_39;
  }
LABEL_33:
  v15 = (CLMicroLocationProto::BacklightOn *)*((_QWORD *)this + 4);
  if (!v15)
  {
    CLMicroLocationProto::protobuf_AddDesc_microlocation_2eproto(0);
    v15 = *(CLMicroLocationProto::BacklightOn **)(CLMicroLocationProto::RecordingEvent::default_instance_ + 32);
  }
  v16 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)CLMicroLocationProto::BacklightOn::ByteSize(v15);
  v17 = (int)v16;
  if (v16 >= 0x80)
    v18 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v16);
  else
    v18 = 1;
  v4 += v17 + v18 + 1;
  v2 = *((_DWORD *)this + 35);
  if ((v2 & 0x20) == 0)
  {
LABEL_18:
    if ((v2 & 0x40) == 0)
      goto LABEL_19;
    goto LABEL_45;
  }
LABEL_39:
  v19 = (CLMicroLocationProto::BatteryChargerConnected *)*((_QWORD *)this + 5);
  if (!v19)
  {
    CLMicroLocationProto::protobuf_AddDesc_microlocation_2eproto(0);
    v19 = *(CLMicroLocationProto::BatteryChargerConnected **)(CLMicroLocationProto::RecordingEvent::default_instance_
                                                            + 40);
  }
  v20 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)CLMicroLocationProto::BatteryChargerConnected::ByteSize(v19);
  v21 = (int)v20;
  if (v20 >= 0x80)
    v22 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v20);
  else
    v22 = 1;
  v4 += v21 + v22 + 1;
  v2 = *((_DWORD *)this + 35);
  if ((v2 & 0x40) == 0)
  {
LABEL_19:
    if ((v2 & 0x80) == 0)
      goto LABEL_57;
    goto LABEL_51;
  }
LABEL_45:
  v23 = (CLMicroLocationProto::ForcedRecording *)*((_QWORD *)this + 6);
  if (!v23)
  {
    CLMicroLocationProto::protobuf_AddDesc_microlocation_2eproto(0);
    v23 = *(CLMicroLocationProto::ForcedRecording **)(CLMicroLocationProto::RecordingEvent::default_instance_ + 48);
  }
  v24 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)CLMicroLocationProto::ForcedRecording::ByteSize(v23);
  v25 = (int)v24;
  if (v24 >= 0x80)
    v26 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v24);
  else
    v26 = 1;
  v4 += v25 + v26 + 1;
  v2 = *((_DWORD *)this + 35);
  if ((v2 & 0x80) != 0)
  {
LABEL_51:
    v27 = (CLMicroLocationProto::HomeKitAccessory *)*((_QWORD *)this + 7);
    if (!v27)
    {
      CLMicroLocationProto::protobuf_AddDesc_microlocation_2eproto(0);
      v27 = *(CLMicroLocationProto::HomeKitAccessory **)(CLMicroLocationProto::RecordingEvent::default_instance_ + 56);
    }
    v28 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)CLMicroLocationProto::HomeKitAccessory::ByteSize(v27);
    v29 = (int)v28;
    if (v28 >= 0x80)
      v30 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v28);
    else
      v30 = 1;
    v4 += v29 + v30 + 1;
    v2 = *((_DWORD *)this + 35);
  }
LABEL_57:
  if ((v2 & 0xFF00) == 0)
    goto LABEL_98;
  if ((v2 & 0x100) == 0)
  {
    if ((v2 & 0x200) == 0)
      goto LABEL_60;
LABEL_68:
    v35 = *((_QWORD *)this + 10);
    if (!v35)
    {
      CLMicroLocationProto::protobuf_AddDesc_microlocation_2eproto(0);
      v35 = *(_QWORD *)(CLMicroLocationProto::RecordingEvent::default_instance_ + 80);
    }
    v36 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)CLMicroLocationProto::NowPlaying::ByteSize(v35);
    v37 = (int)v36;
    if (v36 >= 0x80)
      v38 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v36);
    else
      v38 = 1;
    v4 += v37 + v38 + 1;
    v2 = *((_DWORD *)this + 35);
    if ((v2 & 0x400) == 0)
      goto LABEL_80;
    goto LABEL_74;
  }
  v31 = (CLMicroLocationProto::HomeKitScene *)*((_QWORD *)this + 8);
  if (!v31)
  {
    CLMicroLocationProto::protobuf_AddDesc_microlocation_2eproto(0);
    v31 = *(CLMicroLocationProto::HomeKitScene **)(CLMicroLocationProto::RecordingEvent::default_instance_ + 64);
  }
  v32 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)CLMicroLocationProto::HomeKitScene::ByteSize(v31);
  v33 = (int)v32;
  if (v32 >= 0x80)
    v34 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v32);
  else
    v34 = 1;
  v4 += v33 + v34 + 1;
  v2 = *((_DWORD *)this + 35);
  if ((v2 & 0x200) != 0)
    goto LABEL_68;
LABEL_60:
  if ((v2 & 0x400) != 0)
  {
LABEL_74:
    v39 = (CLMicroLocationProto::RecordingRequest *)*((_QWORD *)this + 11);
    if (!v39)
    {
      CLMicroLocationProto::protobuf_AddDesc_microlocation_2eproto(0);
      v39 = *(CLMicroLocationProto::RecordingRequest **)(CLMicroLocationProto::RecordingEvent::default_instance_ + 88);
    }
    v40 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)CLMicroLocationProto::RecordingRequest::ByteSize(v39);
    v41 = (int)v40;
    if (v40 >= 0x80)
      v42 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v40);
    else
      v42 = 1;
    v4 += v41 + v42 + 1;
    v2 = *((_DWORD *)this + 35);
  }
LABEL_80:
  if ((v2 & 0x800) != 0)
    v4 += 3;
  if ((v2 & 0x1000) != 0)
  {
    v43 = (CLMicroLocationProto::TruthLabelDonation *)*((_QWORD *)this + 12);
    if (!v43)
    {
      CLMicroLocationProto::protobuf_AddDesc_microlocation_2eproto(0);
      v43 = *(CLMicroLocationProto::TruthLabelDonation **)(CLMicroLocationProto::RecordingEvent::default_instance_ + 96);
    }
    v44 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)CLMicroLocationProto::TruthLabelDonation::ByteSize(v43);
    v45 = (int)v44;
    if (v44 >= 0x80)
      v46 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v44);
    else
      v46 = 1;
    v4 += v45 + v46 + 2;
    v2 = *((_DWORD *)this + 35);
  }
  if ((v2 & 0x2000) != 0)
    v4 += 3;
  if ((v2 & 0x4000) != 0)
  {
    v47 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 30);
    if ((v47 & 0x80000000) != 0)
    {
      v48 = 12;
    }
    else if (v47 >= 0x80)
    {
      v48 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v47) + 2;
      v2 = *((_DWORD *)this + 35);
    }
    else
    {
      v48 = 3;
    }
    v4 += v48;
  }
LABEL_98:
  if ((v2 & 0xFF0000) != 0)
  {
    if ((v2 & 0x10000) != 0)
    {
      v49 = (CLMicroLocationProto::AssociatedAccessPointInfo *)*((_QWORD *)this + 16);
      if (!v49)
      {
        CLMicroLocationProto::protobuf_AddDesc_microlocation_2eproto(0);
        v49 = *(CLMicroLocationProto::AssociatedAccessPointInfo **)(CLMicroLocationProto::RecordingEvent::default_instance_
                                                                  + 128);
      }
      v50 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)CLMicroLocationProto::AssociatedAccessPointInfo::ByteSize(v49);
      v51 = (int)v50;
      if (v50 >= 0x80)
        v52 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v50);
      else
        v52 = 1;
      v4 += v51 + v52 + 2;
      v2 = *((_DWORD *)this + 35);
    }
    if ((v2 & 0x20000) != 0)
    {
      v53 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 31);
      if ((v53 & 0x80000000) != 0)
      {
        v54 = 12;
      }
      else if (v53 >= 0x80)
      {
        v54 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v53) + 2;
      }
      else
      {
        v54 = 3;
      }
      v4 += v54;
    }
  }
  v55 = *((_DWORD *)this + 28);
  if (v55 < 1)
  {
    v57 = 0;
  }
  else
  {
    v56 = 0;
    v57 = 0;
    do
    {
      v58 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(*((_QWORD *)this + 13)
                                                                                             + 4 * v56);
      if ((v58 & 0x80000000) != 0)
      {
        v59 = 10;
      }
      else if (v58 >= 0x80)
      {
        v59 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v58);
        v55 = *((_DWORD *)this + 28);
      }
      else
      {
        v59 = 1;
      }
      v57 += v59;
      ++v56;
    }
    while (v56 < v55);
  }
  result = (v57 + v4 + 2 * v55);
  *((_DWORD *)this + 34) = result;
  return result;
}

void CLMicroLocationProto::RecordingEvent::CheckTypeAndMergeFrom(CLMicroLocationProto::RecordingEvent *this, const wireless_diagnostics::google::protobuf::MessageLite *lpsrc)
{
  uint64_t v4;
  uint64_t v5;

  CLMicroLocationProto::RecordingEvent::MergeFrom(this, lpsrc);
}

void CLMicroLocationProto::RecordingEvent::CopyFrom(CLMicroLocationProto::RecordingEvent *this, const CLMicroLocationProto::RecordingEvent *a2)
{
  if (a2 != this)
  {
    (*(void (**)(CLMicroLocationProto::RecordingEvent *))(*(_QWORD *)this + 32))(this);
    CLMicroLocationProto::RecordingEvent::MergeFrom(this, a2);
  }
}

uint64_t CLMicroLocationProto::RecordingEvent::IsInitialized(CLMicroLocationProto::RecordingEvent *this)
{
  return 1;
}

_QWORD *CLMicroLocationProto::RecordingEvent::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CLMicroLocationProto.RecordingEvent");
}

CLMicroLocationProto::TriggerEvent *CLMicroLocationProto::TriggerEvent::TriggerEvent(CLMicroLocationProto::TriggerEvent *this, const CLMicroLocationProto::TriggerEvent *a2)
{
  uint64_t v3;

  *((_DWORD *)this + 6) = 48;
  *(_QWORD *)this = &off_2511D81F8;
  *((_QWORD *)this + 1) = 0;
  v3 = MEMORY[0x24BEDD958];
  *((_WORD *)this + 14) = 0;
  *((_QWORD *)this + 2) = v3;
  *((_QWORD *)this + 4) = v3;
  *((_QWORD *)this + 5) = v3;
  *((_QWORD *)this + 6) = v3;
  *((_QWORD *)this + 7) = 0;
  *((_QWORD *)this + 8) = v3;
  *((_QWORD *)this + 9) = 0;
  *((_QWORD *)this + 10) = 0;
  CLMicroLocationProto::TriggerEvent::MergeFrom(this, a2);
  return this;
}

void sub_241AD7374(_Unwind_Exception *a1)
{
  wireless_diagnostics::google::protobuf::MessageLite *v1;

  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(v1);
  _Unwind_Resume(a1);
}

void CLMicroLocationProto::TriggerEvent::~TriggerEvent(CLMicroLocationProto::TriggerEvent *this)
{
  *(_QWORD *)this = &off_2511D81F8;
  CLMicroLocationProto::TriggerEvent::SharedDtor(this);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

{
  CLMicroLocationProto::TriggerEvent::~TriggerEvent(this);
  JUMPOUT(0x2426A04D4);
}

void CLMicroLocationProto::TriggerEvent::SharedDtor(CLMicroLocationProto::TriggerEvent *this)
{
  CLMicroLocationProto::TriggerEvent *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v7;
  uint64_t v9;
  uint64_t v11;

  v1 = this;
  v2 = *((_QWORD *)this + 2);
  v3 = MEMORY[0x24BEDD958];
  if (v2 != MEMORY[0x24BEDD958] && v2 != 0)
  {
    if (*(char *)(v2 + 23) < 0)
      operator delete(*(void **)v2);
    this = (CLMicroLocationProto::TriggerEvent *)MEMORY[0x2426A04D4](v2, 0x1012C40EC159624);
  }
  v5 = *((_QWORD *)v1 + 4);
  if (v5 != v3 && v5 != 0)
  {
    if (*(char *)(v5 + 23) < 0)
      operator delete(*(void **)v5);
    this = (CLMicroLocationProto::TriggerEvent *)MEMORY[0x2426A04D4](v5, 0x1012C40EC159624);
  }
  v7 = *((_QWORD *)v1 + 5);
  if (v7 != v3 && v7 != 0)
  {
    if (*(char *)(v7 + 23) < 0)
      operator delete(*(void **)v7);
    this = (CLMicroLocationProto::TriggerEvent *)MEMORY[0x2426A04D4](v7, 0x1012C40EC159624);
  }
  v9 = *((_QWORD *)v1 + 6);
  if (v9 != v3 && v9 != 0)
  {
    if (*(char *)(v9 + 23) < 0)
      operator delete(*(void **)v9);
    this = (CLMicroLocationProto::TriggerEvent *)MEMORY[0x2426A04D4](v9, 0x1012C40EC159624);
  }
  v11 = *((_QWORD *)v1 + 8);
  if (v11 != v3 && v11)
  {
    if (*(char *)(v11 + 23) < 0)
      operator delete(*(void **)v11);
    this = (CLMicroLocationProto::TriggerEvent *)MEMORY[0x2426A04D4](v11, 0x1012C40EC159624);
  }
  CLMicroLocationProto::protobuf_AddDesc_microlocation_2eproto(this);
}

uint64_t CLMicroLocationProto::TriggerEvent::New(CLMicroLocationProto::TriggerEvent *this)
{
  uint64_t result;
  uint64_t v2;

  result = operator new();
  *(_DWORD *)(result + 24) = 48;
  *(_QWORD *)result = &off_2511D81F8;
  *(_QWORD *)(result + 8) = 0;
  *(_WORD *)(result + 28) = 0;
  v2 = MEMORY[0x24BEDD958];
  *(_QWORD *)(result + 16) = MEMORY[0x24BEDD958];
  *(_QWORD *)(result + 32) = v2;
  *(_QWORD *)(result + 40) = v2;
  *(_QWORD *)(result + 48) = v2;
  *(_QWORD *)(result + 56) = 0;
  *(_QWORD *)(result + 64) = v2;
  *(_QWORD *)(result + 72) = 0;
  *(_QWORD *)(result + 80) = 0;
  return result;
}

uint64_t CLMicroLocationProto::TriggerEvent::MergePartialFromCodedStream(CLMicroLocationProto::TriggerEvent *this, wireless_diagnostics::google::protobuf::io::CodedInputStream *a2)
{
  uint64_t v4;
  char *v5;
  uint64_t TagFallback;
  int v7;
  char *v8;
  unsigned int v9;
  unint64_t v10;
  char *v11;
  unint64_t v12;
  char *v13;
  unint64_t v14;
  char *v15;
  int v16;
  unint64_t v17;
  char *v18;
  char *v19;
  unint64_t v20;
  char *v21;
  uint64_t result;
  BOOL v23;
  _BYTE *v24;
  _BYTE *v25;
  unsigned int v26;
  _BYTE *v27;
  _QWORD *v28;
  _BYTE *v29;
  _QWORD *v30;
  _BYTE *v31;
  _QWORD *v32;
  _BYTE *v33;
  _QWORD *v34;
  _BYTE *v35;
  unsigned int v36;
  _BYTE *v37;
  unsigned int v38;
  _BYTE *v39;
  unsigned int v40;
  _BYTE *v41;
  unsigned int v42;
  _BYTE *v43;
  _QWORD *v44;
  _BYTE *v45;
  unsigned int v46;
  unsigned int v47[2];

  v4 = MEMORY[0x24BEDD958];
  while (2)
  {
    v5 = (char *)*((_QWORD *)a2 + 1);
    if ((unint64_t)v5 >= *((_QWORD *)a2 + 2) || *v5 < 0)
    {
      TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(a2);
      *((_DWORD *)a2 + 8) = TagFallback;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    else
    {
      TagFallback = *v5;
      *((_DWORD *)a2 + 8) = TagFallback;
      *((_QWORD *)a2 + 1) = v5 + 1;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    switch(TagFallback >> 3)
    {
      case 1u:
        v7 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_36;
        v47[0] = 0;
        v8 = (char *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v8 < *((_QWORD *)a2 + 2) && (*v8 & 0x80000000) == 0)
        {
          v9 = *v8;
          *((_QWORD *)a2 + 1) = v8 + 1;
LABEL_42:
          if (v9 - 31 < 0x19 || (v9 <= 0xE ? (v23 = ((1 << v9) & 0x76B6) == 0) : (v23 = 1), !v23))
          {
            if (v9 - 31 >= 0x19 && (v9 > 0xE || ((1 << v9) & 0x76B6) == 0))
              CLMicroLocationProto::TriggerEvent::MergeFrom();
            *((_DWORD *)this + 21) |= 1u;
            *((_DWORD *)this + 6) = v9;
          }
          v24 = (_BYTE *)*((_QWORD *)a2 + 1);
          if ((unint64_t)v24 < *((_QWORD *)a2 + 2) && *v24 == 17)
          {
            *((_QWORD *)a2 + 1) = v24 + 1;
            goto LABEL_54;
          }
          continue;
        }
        result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v47);
        if ((_DWORD)result)
        {
          v9 = v47[0];
          goto LABEL_42;
        }
        break;
      case 2u:
        v7 = TagFallback & 7;
        if (v7 != 1)
          goto LABEL_36;
LABEL_54:
        *(_QWORD *)v47 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(a2, (unint64_t *)v47) & 1) == 0)return 0;
        *((_QWORD *)this + 1) = *(_QWORD *)v47;
        *((_DWORD *)this + 21) |= 2u;
        v25 = (_BYTE *)*((_QWORD *)a2 + 1);
        v10 = *((_QWORD *)a2 + 2);
        if ((unint64_t)v25 >= v10 || *v25 != 24)
          continue;
        v11 = v25 + 1;
        *((_QWORD *)a2 + 1) = v11;
LABEL_58:
        v47[0] = 0;
        if ((unint64_t)v11 >= v10 || *v11 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v47);
          if (!(_DWORD)result)
            return result;
          v26 = v47[0];
          v27 = (_BYTE *)*((_QWORD *)a2 + 1);
          v10 = *((_QWORD *)a2 + 2);
        }
        else
        {
          v26 = *v11;
          v27 = v11 + 1;
          *((_QWORD *)a2 + 1) = v27;
        }
        *((_BYTE *)this + 28) = v26 != 0;
        v16 = *((_DWORD *)this + 21) | 4;
        *((_DWORD *)this + 21) = v16;
        if ((unint64_t)v27 >= v10 || *v27 != 34)
          continue;
        *((_QWORD *)a2 + 1) = v27 + 1;
LABEL_66:
        *((_DWORD *)this + 21) = v16 | 8;
        if (*((_QWORD *)this + 2) == v4)
        {
          v28 = (_QWORD *)operator new();
          v28[1] = 0;
          v28[2] = 0;
          *v28 = 0;
          *((_QWORD *)this + 2) = v28;
        }
        result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString();
        if (!(_DWORD)result)
          return result;
        v29 = (_BYTE *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v29 >= *((_QWORD *)a2 + 2) || *v29 != 42)
          continue;
        *((_QWORD *)a2 + 1) = v29 + 1;
LABEL_72:
        *((_DWORD *)this + 21) |= 0x10u;
        if (*((_QWORD *)this + 4) == v4)
        {
          v30 = (_QWORD *)operator new();
          v30[1] = 0;
          v30[2] = 0;
          *v30 = 0;
          *((_QWORD *)this + 4) = v30;
        }
        result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString();
        if (!(_DWORD)result)
          return result;
        v31 = (_BYTE *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v31 >= *((_QWORD *)a2 + 2) || *v31 != 50)
          continue;
        *((_QWORD *)a2 + 1) = v31 + 1;
LABEL_78:
        *((_DWORD *)this + 21) |= 0x20u;
        if (*((_QWORD *)this + 5) == v4)
        {
          v32 = (_QWORD *)operator new();
          v32[1] = 0;
          v32[2] = 0;
          *v32 = 0;
          *((_QWORD *)this + 5) = v32;
        }
        result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString();
        if (!(_DWORD)result)
          return result;
        v33 = (_BYTE *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v33 >= *((_QWORD *)a2 + 2) || *v33 != 58)
          continue;
        *((_QWORD *)a2 + 1) = v33 + 1;
LABEL_84:
        *((_DWORD *)this + 21) |= 0x40u;
        if (*((_QWORD *)this + 6) == v4)
        {
          v34 = (_QWORD *)operator new();
          v34[1] = 0;
          v34[2] = 0;
          *v34 = 0;
          *((_QWORD *)this + 6) = v34;
        }
        result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadBytes();
        if (!(_DWORD)result)
          return result;
        v35 = (_BYTE *)*((_QWORD *)a2 + 1);
        v17 = *((_QWORD *)a2 + 2);
        if ((unint64_t)v35 >= v17 || *v35 != 64)
          continue;
        v18 = v35 + 1;
        *((_QWORD *)a2 + 1) = v18;
LABEL_90:
        v47[0] = 0;
        if ((unint64_t)v18 >= v17 || *v18 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v47);
          if (!(_DWORD)result)
            return result;
          v36 = v47[0];
          v37 = (_BYTE *)*((_QWORD *)a2 + 1);
          v17 = *((_QWORD *)a2 + 2);
        }
        else
        {
          v36 = *v18;
          v37 = v18 + 1;
          *((_QWORD *)a2 + 1) = v37;
        }
        *((_BYTE *)this + 29) = v36 != 0;
        *((_DWORD *)this + 21) |= 0x80u;
        if ((unint64_t)v37 >= v17 || *v37 != 72)
          continue;
        v19 = v37 + 1;
        *((_QWORD *)a2 + 1) = v19;
LABEL_98:
        v47[0] = 0;
        if ((unint64_t)v19 >= v17 || *v19 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v47);
          if (!(_DWORD)result)
            return result;
          v38 = v47[0];
        }
        else
        {
          v38 = *v19;
          *((_QWORD *)a2 + 1) = v19 + 1;
        }
        if (v38 <= 1)
        {
          *((_DWORD *)this + 21) |= 0x100u;
          *((_DWORD *)this + 14) = v38;
        }
        v39 = (_BYTE *)*((_QWORD *)a2 + 1);
        v12 = *((_QWORD *)a2 + 2);
        if ((unint64_t)v39 >= v12 || *v39 != 80)
          continue;
        v13 = v39 + 1;
        *((_QWORD *)a2 + 1) = v13;
LABEL_108:
        v47[0] = 0;
        if ((unint64_t)v13 >= v12 || *v13 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v47);
          if (!(_DWORD)result)
            return result;
          v40 = v47[0];
        }
        else
        {
          v40 = *v13;
          *((_QWORD *)a2 + 1) = v13 + 1;
        }
        if (v40 <= 5)
        {
          *((_DWORD *)this + 21) |= 0x200u;
          *((_DWORD *)this + 15) = v40;
        }
        v41 = (_BYTE *)*((_QWORD *)a2 + 1);
        v20 = *((_QWORD *)a2 + 2);
        if ((unint64_t)v41 >= v20 || *v41 != 88)
          continue;
        v21 = v41 + 1;
        *((_QWORD *)a2 + 1) = v21;
LABEL_118:
        v47[0] = 0;
        if ((unint64_t)v21 >= v20 || *v21 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v47);
          if (!(_DWORD)result)
            return result;
          v42 = v47[0];
        }
        else
        {
          v42 = *v21;
          *((_QWORD *)a2 + 1) = v21 + 1;
        }
        if (v42 <= 5)
        {
          *((_DWORD *)this + 21) |= 0x400u;
          *((_DWORD *)this + 18) = v42;
        }
        v43 = (_BYTE *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v43 >= *((_QWORD *)a2 + 2) || *v43 != 98)
          continue;
        *((_QWORD *)a2 + 1) = v43 + 1;
LABEL_128:
        *((_DWORD *)this + 21) |= 0x800u;
        if (*((_QWORD *)this + 8) == v4)
        {
          v44 = (_QWORD *)operator new();
          v44[1] = 0;
          v44[2] = 0;
          *v44 = 0;
          *((_QWORD *)this + 8) = v44;
        }
        result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadBytes();
        if (!(_DWORD)result)
          return result;
        v45 = (_BYTE *)*((_QWORD *)a2 + 1);
        v14 = *((_QWORD *)a2 + 2);
        if ((unint64_t)v45 >= v14 || *v45 != 104)
          continue;
        v15 = v45 + 1;
        *((_QWORD *)a2 + 1) = v15;
LABEL_134:
        v47[0] = 0;
        if ((unint64_t)v15 >= v14 || *v15 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v47);
          if (!(_DWORD)result)
            return result;
          v46 = v47[0];
        }
        else
        {
          v46 = *v15;
          *((_QWORD *)a2 + 1) = v15 + 1;
        }
        if (v46 <= 3)
        {
          *((_DWORD *)this + 21) |= 0x1000u;
          *((_DWORD *)this + 19) = v46;
        }
        if (*((_QWORD *)a2 + 1) != *((_QWORD *)a2 + 2)
          || !*((_DWORD *)a2 + 11) && *((_DWORD *)a2 + 6) != *((_DWORD *)a2 + 10))
        {
          continue;
        }
        *((_DWORD *)a2 + 8) = 0;
        result = 1;
        *((_BYTE *)a2 + 36) = 1;
        return result;
      case 3u:
        v7 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_36;
        v11 = (char *)*((_QWORD *)a2 + 1);
        v10 = *((_QWORD *)a2 + 2);
        goto LABEL_58;
      case 4u:
        v7 = TagFallback & 7;
        if (v7 != 2)
          goto LABEL_36;
        v16 = *((_DWORD *)this + 21);
        goto LABEL_66;
      case 5u:
        v7 = TagFallback & 7;
        if (v7 == 2)
          goto LABEL_72;
        goto LABEL_36;
      case 6u:
        v7 = TagFallback & 7;
        if (v7 == 2)
          goto LABEL_78;
        goto LABEL_36;
      case 7u:
        v7 = TagFallback & 7;
        if (v7 == 2)
          goto LABEL_84;
        goto LABEL_36;
      case 8u:
        v7 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_36;
        v18 = (char *)*((_QWORD *)a2 + 1);
        v17 = *((_QWORD *)a2 + 2);
        goto LABEL_90;
      case 9u:
        v7 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_36;
        v19 = (char *)*((_QWORD *)a2 + 1);
        v17 = *((_QWORD *)a2 + 2);
        goto LABEL_98;
      case 0xAu:
        v7 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_36;
        v13 = (char *)*((_QWORD *)a2 + 1);
        v12 = *((_QWORD *)a2 + 2);
        goto LABEL_108;
      case 0xBu:
        v7 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_36;
        v21 = (char *)*((_QWORD *)a2 + 1);
        v20 = *((_QWORD *)a2 + 2);
        goto LABEL_118;
      case 0xCu:
        v7 = TagFallback & 7;
        if (v7 == 2)
          goto LABEL_128;
        goto LABEL_36;
      case 0xDu:
        v7 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_36;
        v15 = (char *)*((_QWORD *)a2 + 1);
        v14 = *((_QWORD *)a2 + 2);
        goto LABEL_134;
      default:
        v7 = TagFallback & 7;
LABEL_36:
        if (v7 == 4)
          return 1;
        if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(a2, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback) & 1) != 0)continue;
        return 0;
    }
    return result;
  }
}

uint64_t CLMicroLocationProto::TriggerEvent::SerializeWithCachedSizes(uint64_t this, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a2, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  int v6;

  v5 = this;
  v6 = *(_DWORD *)(this + 84);
  if ((v6 & 1) != 0)
  {
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(unsigned int *)(this + 24), (uint64_t)a2, a4);
    v6 = *(_DWORD *)(v5 + 84);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0)
        goto LABEL_4;
      goto LABEL_17;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, (uint64_t)a2, *(double *)(v5 + 8), a3);
  v6 = *(_DWORD *)(v5 + 84);
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0)
      goto LABEL_5;
    goto LABEL_18;
  }
LABEL_17:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, *(unsigned __int8 *)(v5 + 28), (uint64_t)a2, a4);
  v6 = *(_DWORD *)(v5 + 84);
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_19;
  }
LABEL_18:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString();
  v6 = *(_DWORD *)(v5 + 84);
  if ((v6 & 0x10) == 0)
  {
LABEL_6:
    if ((v6 & 0x20) == 0)
      goto LABEL_7;
    goto LABEL_20;
  }
LABEL_19:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString();
  v6 = *(_DWORD *)(v5 + 84);
  if ((v6 & 0x20) == 0)
  {
LABEL_7:
    if ((v6 & 0x40) == 0)
      goto LABEL_8;
    goto LABEL_21;
  }
LABEL_20:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString();
  v6 = *(_DWORD *)(v5 + 84);
  if ((v6 & 0x40) == 0)
  {
LABEL_8:
    if ((v6 & 0x80) == 0)
      goto LABEL_9;
    goto LABEL_22;
  }
LABEL_21:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBytes();
  v6 = *(_DWORD *)(v5 + 84);
  if ((v6 & 0x80) == 0)
  {
LABEL_9:
    if ((v6 & 0x100) == 0)
      goto LABEL_10;
    goto LABEL_23;
  }
LABEL_22:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)8, *(unsigned __int8 *)(v5 + 29), (uint64_t)a2, a4);
  v6 = *(_DWORD *)(v5 + 84);
  if ((v6 & 0x100) == 0)
  {
LABEL_10:
    if ((v6 & 0x200) == 0)
      goto LABEL_11;
    goto LABEL_24;
  }
LABEL_23:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)9, *(unsigned int *)(v5 + 56), (uint64_t)a2, a4);
  v6 = *(_DWORD *)(v5 + 84);
  if ((v6 & 0x200) == 0)
  {
LABEL_11:
    if ((v6 & 0x400) == 0)
      goto LABEL_12;
    goto LABEL_25;
  }
LABEL_24:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xA, *(unsigned int *)(v5 + 60), (uint64_t)a2, a4);
  v6 = *(_DWORD *)(v5 + 84);
  if ((v6 & 0x400) == 0)
  {
LABEL_12:
    if ((v6 & 0x800) == 0)
      goto LABEL_13;
    goto LABEL_26;
  }
LABEL_25:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xB, *(unsigned int *)(v5 + 72), (uint64_t)a2, a4);
  v6 = *(_DWORD *)(v5 + 84);
  if ((v6 & 0x800) == 0)
  {
LABEL_13:
    if ((v6 & 0x1000) == 0)
      return this;
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xD, *(unsigned int *)(v5 + 76), (uint64_t)a2, a4);
  }
LABEL_26:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBytes();
  if ((*(_DWORD *)(v5 + 84) & 0x1000) != 0)
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xD, *(unsigned int *)(v5 + 76), (uint64_t)a2, a4);
  return this;
}

uint64_t CLMicroLocationProto::TriggerEvent::ByteSize(CLMicroLocationProto::TriggerEvent *this)
{
  int v2;
  int v3;
  uint64_t v4;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v5;
  int v6;
  uint64_t v7;
  int v8;
  char v9;
  uint64_t v10;
  unint64_t v11;
  int v12;
  uint64_t v13;
  int v14;
  char v15;
  uint64_t v16;
  unint64_t v17;
  int v18;
  uint64_t v19;
  int v20;
  char v21;
  uint64_t v22;
  unint64_t v23;
  int v24;
  uint64_t v25;
  int v26;
  char v27;
  uint64_t v28;
  unint64_t v29;
  int v30;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v31;
  int v32;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v33;
  int v34;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v35;
  int v36;
  uint64_t v37;
  int v38;
  char v39;
  uint64_t v40;
  unint64_t v41;
  int v42;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v43;
  int v44;

  v2 = *((_DWORD *)this + 21);
  if (!(_BYTE)v2)
  {
    v4 = 0;
    goto LABEL_60;
  }
  if ((v2 & 1) != 0)
  {
    v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 6);
    if ((v5 & 0x80000000) != 0)
    {
      v6 = 10;
    }
    else if (v5 >= 0x80)
    {
      v6 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v5);
      v2 = *((_DWORD *)this + 21);
    }
    else
    {
      v6 = 1;
    }
    v3 = v6 + 1;
  }
  else
  {
    v3 = 0;
  }
  if ((v2 & 2) != 0)
    v3 += 9;
  if ((v2 & 4) != 0)
    LODWORD(v4) = v3 + 2;
  else
    LODWORD(v4) = v3;
  if ((v2 & 8) != 0)
  {
    v7 = *((_QWORD *)this + 2);
    v8 = *(unsigned __int8 *)(v7 + 23);
    v9 = v8;
    v10 = *(_QWORD *)(v7 + 8);
    if ((v8 & 0x80u) == 0)
      v11 = *(unsigned __int8 *)(v7 + 23);
    else
      v11 = v10;
    if (v11 >= 0x80)
    {
      v12 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v11);
      v8 = *(unsigned __int8 *)(v7 + 23);
      v10 = *(_QWORD *)(v7 + 8);
      v2 = *((_DWORD *)this + 21);
      v9 = *(_BYTE *)(v7 + 23);
    }
    else
    {
      v12 = 1;
    }
    if (v9 < 0)
      v8 = v10;
    LODWORD(v4) = v4 + v12 + v8 + 1;
    if ((v2 & 0x10) == 0)
    {
LABEL_18:
      if ((v2 & 0x20) == 0)
        goto LABEL_19;
LABEL_39:
      v19 = *((_QWORD *)this + 5);
      v20 = *(unsigned __int8 *)(v19 + 23);
      v21 = v20;
      v22 = *(_QWORD *)(v19 + 8);
      if ((v20 & 0x80u) == 0)
        v23 = *(unsigned __int8 *)(v19 + 23);
      else
        v23 = v22;
      if (v23 >= 0x80)
      {
        v24 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v23);
        v20 = *(unsigned __int8 *)(v19 + 23);
        v22 = *(_QWORD *)(v19 + 8);
        v2 = *((_DWORD *)this + 21);
        v21 = *(_BYTE *)(v19 + 23);
      }
      else
      {
        v24 = 1;
      }
      if (v21 < 0)
        v20 = v22;
      LODWORD(v4) = v4 + v24 + v20 + 1;
      if ((v2 & 0x40) == 0)
        goto LABEL_57;
      goto LABEL_48;
    }
  }
  else if ((v2 & 0x10) == 0)
  {
    goto LABEL_18;
  }
  v13 = *((_QWORD *)this + 4);
  v14 = *(unsigned __int8 *)(v13 + 23);
  v15 = v14;
  v16 = *(_QWORD *)(v13 + 8);
  if ((v14 & 0x80u) == 0)
    v17 = *(unsigned __int8 *)(v13 + 23);
  else
    v17 = v16;
  if (v17 >= 0x80)
  {
    v18 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v17);
    v14 = *(unsigned __int8 *)(v13 + 23);
    v16 = *(_QWORD *)(v13 + 8);
    v2 = *((_DWORD *)this + 21);
    v15 = *(_BYTE *)(v13 + 23);
  }
  else
  {
    v18 = 1;
  }
  if (v15 < 0)
    v14 = v16;
  LODWORD(v4) = v4 + v18 + v14 + 1;
  if ((v2 & 0x20) != 0)
    goto LABEL_39;
LABEL_19:
  if ((v2 & 0x40) != 0)
  {
LABEL_48:
    v25 = *((_QWORD *)this + 6);
    v26 = *(unsigned __int8 *)(v25 + 23);
    v27 = v26;
    v28 = *(_QWORD *)(v25 + 8);
    if ((v26 & 0x80u) == 0)
      v29 = *(unsigned __int8 *)(v25 + 23);
    else
      v29 = v28;
    if (v29 >= 0x80)
    {
      v30 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v29);
      v26 = *(unsigned __int8 *)(v25 + 23);
      v28 = *(_QWORD *)(v25 + 8);
      v2 = *((_DWORD *)this + 21);
      v27 = *(_BYTE *)(v25 + 23);
    }
    else
    {
      v30 = 1;
    }
    if (v27 < 0)
      v26 = v28;
    LODWORD(v4) = v4 + v30 + v26 + 1;
  }
LABEL_57:
  if ((v2 & 0x80) != 0)
    v4 = (v4 + 2);
  else
    v4 = v4;
LABEL_60:
  if ((v2 & 0xFF00) == 0)
    goto LABEL_100;
  if ((v2 & 0x100) != 0)
  {
    v31 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 14);
    if ((v31 & 0x80000000) != 0)
    {
      v32 = 11;
    }
    else if (v31 >= 0x80)
    {
      v32 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v31) + 1;
      v2 = *((_DWORD *)this + 21);
    }
    else
    {
      v32 = 2;
    }
    v4 = (v32 + v4);
    if ((v2 & 0x200) == 0)
    {
LABEL_63:
      if ((v2 & 0x400) == 0)
        goto LABEL_64;
      goto LABEL_79;
    }
  }
  else if ((v2 & 0x200) == 0)
  {
    goto LABEL_63;
  }
  v33 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 15);
  if ((v33 & 0x80000000) != 0)
  {
    v34 = 11;
  }
  else if (v33 >= 0x80)
  {
    v34 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v33) + 1;
    v2 = *((_DWORD *)this + 21);
  }
  else
  {
    v34 = 2;
  }
  v4 = (v34 + v4);
  if ((v2 & 0x400) == 0)
  {
LABEL_64:
    if ((v2 & 0x800) == 0)
      goto LABEL_65;
    goto LABEL_85;
  }
LABEL_79:
  v35 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 18);
  if ((v35 & 0x80000000) != 0)
  {
    v36 = 11;
  }
  else if (v35 >= 0x80)
  {
    v36 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v35) + 1;
    v2 = *((_DWORD *)this + 21);
  }
  else
  {
    v36 = 2;
  }
  v4 = (v36 + v4);
  if ((v2 & 0x800) == 0)
  {
LABEL_65:
    if ((v2 & 0x1000) == 0)
      goto LABEL_100;
    goto LABEL_94;
  }
LABEL_85:
  v37 = *((_QWORD *)this + 8);
  v38 = *(unsigned __int8 *)(v37 + 23);
  v39 = v38;
  v40 = *(_QWORD *)(v37 + 8);
  if ((v38 & 0x80u) == 0)
    v41 = *(unsigned __int8 *)(v37 + 23);
  else
    v41 = v40;
  if (v41 >= 0x80)
  {
    v42 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v41);
    v38 = *(unsigned __int8 *)(v37 + 23);
    v40 = *(_QWORD *)(v37 + 8);
    v2 = *((_DWORD *)this + 21);
    v39 = *(_BYTE *)(v37 + 23);
  }
  else
  {
    v42 = 1;
  }
  if (v39 < 0)
    v38 = v40;
  v4 = (v4 + v42 + v38 + 1);
  if ((v2 & 0x1000) != 0)
  {
LABEL_94:
    v43 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 19);
    if ((v43 & 0x80000000) != 0)
    {
      v44 = 11;
    }
    else if (v43 >= 0x80)
    {
      v44 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v43) + 1;
    }
    else
    {
      v44 = 2;
    }
    v4 = (v44 + v4);
  }
LABEL_100:
  *((_DWORD *)this + 20) = v4;
  return v4;
}

void CLMicroLocationProto::TriggerEvent::CheckTypeAndMergeFrom(CLMicroLocationProto::TriggerEvent *this, const wireless_diagnostics::google::protobuf::MessageLite *lpsrc)
{
  uint64_t v4;
  uint64_t v5;

  CLMicroLocationProto::TriggerEvent::MergeFrom(this, lpsrc);
}

void CLMicroLocationProto::TriggerEvent::CopyFrom(CLMicroLocationProto::TriggerEvent *this, const CLMicroLocationProto::TriggerEvent *a2)
{
  if (a2 != this)
  {
    (*(void (**)(CLMicroLocationProto::TriggerEvent *))(*(_QWORD *)this + 32))(this);
    CLMicroLocationProto::TriggerEvent::MergeFrom(this, a2);
  }
}

uint64_t CLMicroLocationProto::TriggerEvent::IsInitialized(CLMicroLocationProto::TriggerEvent *this)
{
  return 1;
}

_QWORD *CLMicroLocationProto::TriggerEvent::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CLMicroLocationProto.TriggerEvent");
}

CLMicroLocationProto::LegacyClientStatusUpdate *CLMicroLocationProto::LegacyClientStatusUpdate::LegacyClientStatusUpdate(CLMicroLocationProto::LegacyClientStatusUpdate *this, const CLMicroLocationProto::LegacyClientStatusUpdate *a2)
{
  *(_QWORD *)this = &off_2511D8270;
  *(_OWORD *)((char *)this + 8) = xmmword_241BB7110;
  *((_DWORD *)this + 6) = 0;
  CLMicroLocationProto::LegacyClientStatusUpdate::MergeFrom(this, a2);
  return this;
}

void sub_241AD82B0(_Unwind_Exception *a1)
{
  wireless_diagnostics::google::protobuf::MessageLite *v1;

  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(v1);
  _Unwind_Resume(a1);
}

void CLMicroLocationProto::LegacyClientStatusUpdate::~LegacyClientStatusUpdate(CLMicroLocationProto::LegacyClientStatusUpdate *this)
{
  *(_QWORD *)this = &off_2511D8270;
  CLMicroLocationProto::protobuf_AddDesc_microlocation_2eproto(this);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

{
  CLMicroLocationProto::LegacyClientStatusUpdate::~LegacyClientStatusUpdate(this);
  JUMPOUT(0x2426A04D4);
}

double CLMicroLocationProto::LegacyClientStatusUpdate::New(CLMicroLocationProto::LegacyClientStatusUpdate *this)
{
  uint64_t v1;
  double result;

  v1 = operator new();
  *(_QWORD *)v1 = &off_2511D8270;
  *(_QWORD *)&result = 0x100000031;
  *(_OWORD *)(v1 + 8) = xmmword_241BB7110;
  *(_DWORD *)(v1 + 24) = 0;
  return result;
}

uint64_t CLMicroLocationProto::LegacyClientStatusUpdate::MergePartialFromCodedStream(CLMicroLocationProto::LegacyClientStatusUpdate *this, wireless_diagnostics::google::protobuf::io::CodedInputStream *a2)
{
  unsigned int *v4;
  char *v5;
  uint64_t TagFallback;
  unsigned int v7;
  int v8;
  unint64_t v9;
  char *v10;
  char *v11;
  unsigned int v12;
  unint64_t v13;
  char *v14;
  BOOL v15;
  _BYTE *v17;
  unsigned int v18;
  _BYTE *v19;
  unsigned __int8 *v20;
  uint64_t result;
  unsigned int v22;
  unsigned int v23;

  v4 = (unsigned int *)((char *)this + 16);
  while (1)
  {
    while (1)
    {
      while (1)
      {
        v5 = (char *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v5 >= *((_QWORD *)a2 + 2) || *v5 < 0)
        {
          TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(a2);
          *((_DWORD *)a2 + 8) = TagFallback;
          if (!(_DWORD)TagFallback)
            return 1;
        }
        else
        {
          TagFallback = *v5;
          *((_DWORD *)a2 + 8) = TagFallback;
          *((_QWORD *)a2 + 1) = v5 + 1;
          if (!(_DWORD)TagFallback)
            return 1;
        }
        v7 = TagFallback >> 3;
        if (TagFallback >> 3 != 1)
          break;
        v8 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_19;
        v23 = 0;
        v11 = (char *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v11 >= *((_QWORD *)a2 + 2) || *v11 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v23);
          if (!(_DWORD)result)
            return result;
          v12 = v23;
        }
        else
        {
          v12 = *v11;
          *((_QWORD *)a2 + 1) = v11 + 1;
        }
        if (v12 - 31 < 0x19 || (v12 <= 0xE ? (v15 = ((1 << v12) & 0x76B6) == 0) : (v15 = 1), !v15))
        {
          if (v12 - 31 >= 0x19 && (v12 > 0xE || ((1 << v12) & 0x76B6) == 0))
            CLMicroLocationProto::LegacyClientStatusUpdate::MergeFrom();
          *((_DWORD *)this + 6) |= 1u;
          *((_DWORD *)this + 2) = v12;
        }
        v17 = (_BYTE *)*((_QWORD *)a2 + 1);
        v13 = *((_QWORD *)a2 + 2);
        if ((unint64_t)v17 < v13 && *v17 == 16)
        {
          v14 = v17 + 1;
          *((_QWORD *)a2 + 1) = v14;
          goto LABEL_38;
        }
      }
      if (v7 != 2)
        break;
      v8 = TagFallback & 7;
      if ((TagFallback & 7) != 0)
        goto LABEL_19;
      v14 = (char *)*((_QWORD *)a2 + 1);
      v13 = *((_QWORD *)a2 + 2);
LABEL_38:
      v22 = 0;
      if ((unint64_t)v14 >= v13 || *v14 < 0)
      {
        result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v22);
        if (!(_DWORD)result)
          return result;
        v18 = v22;
      }
      else
      {
        v18 = *v14;
        *((_QWORD *)a2 + 1) = v14 + 1;
      }
      if (v18 - 1 < 2 || v18 == 255)
      {
        *((_DWORD *)this + 6) |= 2u;
        *((_DWORD *)this + 3) = v18;
      }
      v19 = (_BYTE *)*((_QWORD *)a2 + 1);
      v9 = *((_QWORD *)a2 + 2);
      if ((unint64_t)v19 < v9 && *v19 == 24)
      {
        v10 = v19 + 1;
        *((_QWORD *)a2 + 1) = v10;
LABEL_49:
        if ((unint64_t)v10 >= v9 || *v10 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v4);
          if (!(_DWORD)result)
            return result;
          v20 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
          v9 = *((_QWORD *)a2 + 2);
        }
        else
        {
          *v4 = *v10;
          v20 = (unsigned __int8 *)(v10 + 1);
          *((_QWORD *)a2 + 1) = v20;
        }
        *((_DWORD *)this + 6) |= 4u;
        if (v20 == (unsigned __int8 *)v9 && (*((_DWORD *)a2 + 11) || *((_DWORD *)a2 + 6) == *((_DWORD *)a2 + 10)))
        {
          *((_DWORD *)a2 + 8) = 0;
          result = 1;
          *((_BYTE *)a2 + 36) = 1;
          return result;
        }
      }
    }
    if (v7 == 3)
    {
      v8 = TagFallback & 7;
      if ((TagFallback & 7) == 0)
      {
        v10 = (char *)*((_QWORD *)a2 + 1);
        v9 = *((_QWORD *)a2 + 2);
        goto LABEL_49;
      }
    }
    else
    {
      v8 = TagFallback & 7;
    }
LABEL_19:
    if (v8 == 4)
      return 1;
    if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(a2, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback) & 1) == 0)return 0;
  }
}

unsigned int *CLMicroLocationProto::LegacyClientStatusUpdate::SerializeWithCachedSizes(unsigned int *this, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  unsigned int *v5;
  unsigned int v6;

  v5 = this;
  v6 = this[6];
  if ((v6 & 1) != 0)
  {
    this = (unsigned int *)wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, this[2], (uint64_t)a2, a4);
    v6 = v5[6];
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0)
        return this;
      return (unsigned int *)wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, v5[4], (uint64_t)a2, a4);
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  this = (unsigned int *)wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, v5[3], (uint64_t)a2, a4);
  if ((v5[6] & 4) != 0)
    return (unsigned int *)wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, v5[4], (uint64_t)a2, a4);
  return this;
}

uint64_t CLMicroLocationProto::LegacyClientStatusUpdate::ByteSize(CLMicroLocationProto::LegacyClientStatusUpdate *this)
{
  int v2;
  uint64_t v3;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v4;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v5;
  int v6;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v7;
  int v8;

  LOBYTE(v2) = *((_BYTE *)this + 24);
  if (!(_BYTE)v2)
  {
    v3 = 0;
    goto LABEL_24;
  }
  if ((*((_BYTE *)this + 24) & 1) != 0)
  {
    v4 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 2);
    if ((v4 & 0x80000000) != 0)
    {
      v3 = 11;
      if ((v2 & 2) == 0)
        goto LABEL_19;
    }
    else if (v4 >= 0x80)
    {
      v3 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v4) + 1;
      v2 = *((_DWORD *)this + 6);
      if ((v2 & 2) == 0)
        goto LABEL_19;
    }
    else
    {
      v3 = 2;
      if ((v2 & 2) == 0)
        goto LABEL_19;
    }
  }
  else
  {
    v3 = 0;
    if ((*((_BYTE *)this + 24) & 2) == 0)
      goto LABEL_19;
  }
  v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 3);
  if ((v5 & 0x80000000) != 0)
  {
    v6 = 11;
  }
  else if (v5 >= 0x80)
  {
    v6 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v5) + 1;
    v2 = *((_DWORD *)this + 6);
  }
  else
  {
    v6 = 2;
  }
  v3 = (v6 + v3);
LABEL_19:
  if ((v2 & 4) != 0)
  {
    v7 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 4);
    if (v7 >= 0x80)
      v8 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v7) + 1;
    else
      v8 = 2;
    v3 = (v8 + v3);
  }
LABEL_24:
  *((_DWORD *)this + 5) = v3;
  return v3;
}

void CLMicroLocationProto::LegacyClientStatusUpdate::CheckTypeAndMergeFrom(CLMicroLocationProto::LegacyClientStatusUpdate *this, const wireless_diagnostics::google::protobuf::MessageLite *lpsrc)
{
  uint64_t v4;
  uint64_t v5;

  CLMicroLocationProto::LegacyClientStatusUpdate::MergeFrom(this, lpsrc);
}

void CLMicroLocationProto::LegacyClientStatusUpdate::CopyFrom(CLMicroLocationProto::LegacyClientStatusUpdate *this, const CLMicroLocationProto::LegacyClientStatusUpdate *a2)
{
  if (a2 != this)
  {
    (*(void (**)(CLMicroLocationProto::LegacyClientStatusUpdate *))(*(_QWORD *)this + 32))(this);
    CLMicroLocationProto::LegacyClientStatusUpdate::MergeFrom(this, a2);
  }
}

uint64_t CLMicroLocationProto::LegacyClientStatusUpdate::IsInitialized(CLMicroLocationProto::LegacyClientStatusUpdate *this)
{
  return 1;
}

_QWORD *CLMicroLocationProto::LegacyClientStatusUpdate::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CLMicroLocationProto.LegacyClientStatusUpdate");
}

void CLMicroLocationProto::SpectatingMotionUpdate::~SpectatingMotionUpdate(CLMicroLocationProto::SpectatingMotionUpdate *this)
{
  *(_QWORD *)this = &off_2511D82E8;
  CLMicroLocationProto::protobuf_AddDesc_microlocation_2eproto(this);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

{
  CLMicroLocationProto::SpectatingMotionUpdate::~SpectatingMotionUpdate(this);
  JUMPOUT(0x2426A04D4);
}

uint64_t CLMicroLocationProto::SpectatingMotionUpdate::New(CLMicroLocationProto::SpectatingMotionUpdate *this)
{
  uint64_t result;

  result = operator new();
  *(_QWORD *)result = &off_2511D82E8;
  *(_DWORD *)(result + 8) = 50;
  *(_BYTE *)(result + 12) = 0;
  *(_QWORD *)(result + 16) = 0;
  return result;
}

uint64_t CLMicroLocationProto::SpectatingMotionUpdate::MergePartialFromCodedStream(CLMicroLocationProto::SpectatingMotionUpdate *this, wireless_diagnostics::google::protobuf::io::CodedInputStream *a2)
{
  char *v4;
  uint64_t TagFallback;
  int v6;
  unint64_t v7;
  char *v8;
  char *v9;
  unsigned int v10;
  BOOL v11;
  _BYTE *v13;
  unsigned int v14;
  unsigned __int8 *v15;
  uint64_t result;
  unsigned int v17;
  unsigned int v18;

  while (1)
  {
    while (1)
    {
      v4 = (char *)*((_QWORD *)a2 + 1);
      if ((unint64_t)v4 >= *((_QWORD *)a2 + 2) || *v4 < 0)
      {
        TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(a2);
        *((_DWORD *)a2 + 8) = TagFallback;
        if (!(_DWORD)TagFallback)
          return 1;
      }
      else
      {
        TagFallback = *v4;
        *((_DWORD *)a2 + 8) = TagFallback;
        *((_QWORD *)a2 + 1) = v4 + 1;
        if (!(_DWORD)TagFallback)
          return 1;
      }
      if (TagFallback >> 3 != 1)
        break;
      v6 = TagFallback & 7;
      if ((TagFallback & 7) != 0)
        goto LABEL_15;
      v17 = 0;
      v9 = (char *)*((_QWORD *)a2 + 1);
      if ((unint64_t)v9 >= *((_QWORD *)a2 + 2) || *v9 < 0)
      {
        result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v17);
        if (!(_DWORD)result)
          return result;
        v10 = v17;
      }
      else
      {
        v10 = *v9;
        *((_QWORD *)a2 + 1) = v9 + 1;
      }
      if (v10 - 31 < 0x19 || (v10 <= 0xE ? (v11 = ((1 << v10) & 0x76B6) == 0) : (v11 = 1), !v11))
      {
        if (v10 - 31 >= 0x19 && (v10 > 0xE || ((1 << v10) & 0x76B6) == 0))
          CLMicroLocationProto::SpectatingMotionUpdate::MergeFrom();
        *((_DWORD *)this + 5) |= 1u;
        *((_DWORD *)this + 2) = v10;
      }
      v13 = (_BYTE *)*((_QWORD *)a2 + 1);
      v7 = *((_QWORD *)a2 + 2);
      if ((unint64_t)v13 < v7 && *v13 == 16)
      {
        v8 = v13 + 1;
        *((_QWORD *)a2 + 1) = v8;
LABEL_34:
        v18 = 0;
        if ((unint64_t)v8 >= v7 || *v8 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v18);
          if (!(_DWORD)result)
            return result;
          v14 = v18;
          v15 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
          v7 = *((_QWORD *)a2 + 2);
        }
        else
        {
          v14 = *v8;
          v15 = (unsigned __int8 *)(v8 + 1);
          *((_QWORD *)a2 + 1) = v15;
        }
        *((_BYTE *)this + 12) = v14 != 0;
        *((_DWORD *)this + 5) |= 2u;
        if (v15 == (unsigned __int8 *)v7 && (*((_DWORD *)a2 + 11) || *((_DWORD *)a2 + 6) == *((_DWORD *)a2 + 10)))
        {
          *((_DWORD *)a2 + 8) = 0;
          result = 1;
          *((_BYTE *)a2 + 36) = 1;
          return result;
        }
      }
    }
    if (TagFallback >> 3 == 2)
    {
      v6 = TagFallback & 7;
      if ((TagFallback & 7) == 0)
      {
        v8 = (char *)*((_QWORD *)a2 + 1);
        v7 = *((_QWORD *)a2 + 2);
        goto LABEL_34;
      }
    }
    else
    {
      v6 = TagFallback & 7;
    }
LABEL_15:
    if (v6 == 4)
      return 1;
    if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(a2, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback) & 1) == 0)return 0;
  }
}

uint64_t CLMicroLocationProto::SpectatingMotionUpdate::SerializeWithCachedSizes(uint64_t this, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  int v6;

  v5 = this;
  v6 = *(_DWORD *)(this + 20);
  if ((v6 & 1) != 0)
  {
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(unsigned int *)(this + 8), (uint64_t)a2, a4);
    v6 = *(_DWORD *)(v5 + 20);
  }
  if ((v6 & 2) != 0)
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, *(unsigned __int8 *)(v5 + 12), (uint64_t)a2, a4);
  return this;
}

uint64_t CLMicroLocationProto::SpectatingMotionUpdate::ByteSize(CLMicroLocationProto::SpectatingMotionUpdate *this)
{
  int v2;
  unsigned int v3;
  uint64_t result;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v5;

  LOBYTE(v2) = *((_BYTE *)this + 20);
  if ((_BYTE)v2)
  {
    if ((*((_BYTE *)this + 20) & 1) != 0)
    {
      v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 2);
      if ((v5 & 0x80000000) != 0)
      {
        v3 = 11;
      }
      else if (v5 >= 0x80)
      {
        v3 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v5) + 1;
        v2 = *((_DWORD *)this + 5);
      }
      else
      {
        v3 = 2;
      }
    }
    else
    {
      v3 = 0;
    }
    if ((v2 & 2) != 0)
      result = v3 + 2;
    else
      result = v3;
  }
  else
  {
    result = 0;
  }
  *((_DWORD *)this + 4) = result;
  return result;
}

void CLMicroLocationProto::SpectatingMotionUpdate::CheckTypeAndMergeFrom(CLMicroLocationProto::SpectatingMotionUpdate *this, const wireless_diagnostics::google::protobuf::MessageLite *lpsrc)
{
  uint64_t v4;
  uint64_t v5;

  CLMicroLocationProto::SpectatingMotionUpdate::MergeFrom(this, lpsrc);
}

void CLMicroLocationProto::SpectatingMotionUpdate::CopyFrom(CLMicroLocationProto::SpectatingMotionUpdate *this, const CLMicroLocationProto::SpectatingMotionUpdate *a2)
{
  if (a2 != this)
  {
    (*(void (**)(CLMicroLocationProto::SpectatingMotionUpdate *))(*(_QWORD *)this + 32))(this);
    CLMicroLocationProto::SpectatingMotionUpdate::MergeFrom(this, a2);
  }
}

uint64_t CLMicroLocationProto::SpectatingMotionUpdate::IsInitialized(CLMicroLocationProto::SpectatingMotionUpdate *this)
{
  return 1;
}

_QWORD *CLMicroLocationProto::SpectatingMotionUpdate::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CLMicroLocationProto.SpectatingMotionUpdate");
}

void CLMicroLocationProto::EnabledStateUpdate::~EnabledStateUpdate(CLMicroLocationProto::EnabledStateUpdate *this)
{
  *(_QWORD *)this = &off_2511D8360;
  CLMicroLocationProto::protobuf_AddDesc_microlocation_2eproto(this);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

{
  CLMicroLocationProto::EnabledStateUpdate::~EnabledStateUpdate(this);
  JUMPOUT(0x2426A04D4);
}

uint64_t CLMicroLocationProto::EnabledStateUpdate::New(CLMicroLocationProto::EnabledStateUpdate *this)
{
  uint64_t result;

  result = operator new();
  *(_QWORD *)result = &off_2511D8360;
  *(_DWORD *)(result + 8) = 51;
  *(_DWORD *)(result + 20) = 0;
  *(_DWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 12) = 0;
  return result;
}

uint64_t CLMicroLocationProto::EnabledStateUpdate::MergePartialFromCodedStream(CLMicroLocationProto::EnabledStateUpdate *this, wireless_diagnostics::google::protobuf::io::CodedInputStream *a2)
{
  char *v4;
  uint64_t TagFallback;
  int v6;
  char *v7;
  unsigned int v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  BOOL v18;
  _BYTE *v19;
  unsigned int v20;
  _BYTE *v21;
  unsigned int v22;
  _BYTE *v23;
  unsigned int v24;
  _BYTE *v25;
  unsigned int v26;
  _BYTE *v27;
  unsigned int v28;
  _BYTE *v29;
  unsigned int v30;
  _BYTE *v31;
  unsigned int v32;
  _BYTE *v33;
  unsigned int v34;
  unsigned __int8 *v35;
  uint64_t result;
  unsigned int v37;

  while (2)
  {
    v4 = (char *)*((_QWORD *)a2 + 1);
    if ((unint64_t)v4 >= *((_QWORD *)a2 + 2) || *v4 < 0)
    {
      TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(a2);
      *((_DWORD *)a2 + 8) = TagFallback;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    else
    {
      TagFallback = *v4;
      *((_DWORD *)a2 + 8) = TagFallback;
      *((_QWORD *)a2 + 1) = v4 + 1;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    switch(TagFallback >> 3)
    {
      case 1u:
        v6 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_28;
        v37 = 0;
        v7 = (char *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v7 < *((_QWORD *)a2 + 2) && (*v7 & 0x80000000) == 0)
        {
          v8 = *v7;
          *((_QWORD *)a2 + 1) = v7 + 1;
LABEL_33:
          if (v8 - 31 < 0x19 || (v8 <= 0xE ? (v18 = ((1 << v8) & 0x76B6) == 0) : (v18 = 1), !v18))
          {
            if (v8 - 31 >= 0x19 && (v8 > 0xE || ((1 << v8) & 0x76B6) == 0))
              CLMicroLocationProto::EnabledStateUpdate::MergeFrom();
            *((_DWORD *)this + 6) |= 1u;
            *((_DWORD *)this + 2) = v8;
          }
          v19 = (_BYTE *)*((_QWORD *)a2 + 1);
          v9 = *((_QWORD *)a2 + 2);
          if ((unint64_t)v19 < v9 && *v19 == 16)
          {
            v12 = v19 + 1;
            *((_QWORD *)a2 + 1) = v12;
            goto LABEL_45;
          }
          continue;
        }
        result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v37);
        if ((_DWORD)result)
        {
          v8 = v37;
          goto LABEL_33;
        }
        break;
      case 2u:
        v6 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_28;
        v12 = (char *)*((_QWORD *)a2 + 1);
        v9 = *((_QWORD *)a2 + 2);
LABEL_45:
        v37 = 0;
        if ((unint64_t)v12 >= v9 || *v12 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v37);
          if (!(_DWORD)result)
            return result;
          v20 = v37;
          v21 = (_BYTE *)*((_QWORD *)a2 + 1);
          v9 = *((_QWORD *)a2 + 2);
        }
        else
        {
          v20 = *v12;
          v21 = v12 + 1;
          *((_QWORD *)a2 + 1) = v21;
        }
        *((_BYTE *)this + 12) = v20 != 0;
        *((_DWORD *)this + 6) |= 2u;
        if ((unint64_t)v21 >= v9 || *v21 != 24)
          continue;
        v10 = v21 + 1;
        *((_QWORD *)a2 + 1) = v10;
LABEL_53:
        v37 = 0;
        if ((unint64_t)v10 >= v9 || *v10 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v37);
          if (!(_DWORD)result)
            return result;
          v22 = v37;
          v23 = (_BYTE *)*((_QWORD *)a2 + 1);
          v9 = *((_QWORD *)a2 + 2);
        }
        else
        {
          v22 = *v10;
          v23 = v10 + 1;
          *((_QWORD *)a2 + 1) = v23;
        }
        *((_BYTE *)this + 13) = v22 != 0;
        *((_DWORD *)this + 6) |= 4u;
        if ((unint64_t)v23 >= v9 || *v23 != 32)
          continue;
        v13 = v23 + 1;
        *((_QWORD *)a2 + 1) = v13;
LABEL_61:
        v37 = 0;
        if ((unint64_t)v13 >= v9 || *v13 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v37);
          if (!(_DWORD)result)
            return result;
          v24 = v37;
          v25 = (_BYTE *)*((_QWORD *)a2 + 1);
          v9 = *((_QWORD *)a2 + 2);
        }
        else
        {
          v24 = *v13;
          v25 = v13 + 1;
          *((_QWORD *)a2 + 1) = v25;
        }
        *((_BYTE *)this + 14) = v24 != 0;
        *((_DWORD *)this + 6) |= 8u;
        if ((unint64_t)v25 >= v9 || *v25 != 40)
          continue;
        v11 = v25 + 1;
        *((_QWORD *)a2 + 1) = v11;
LABEL_69:
        v37 = 0;
        if ((unint64_t)v11 >= v9 || *v11 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v37);
          if (!(_DWORD)result)
            return result;
          v26 = v37;
          v27 = (_BYTE *)*((_QWORD *)a2 + 1);
          v9 = *((_QWORD *)a2 + 2);
        }
        else
        {
          v26 = *v11;
          v27 = v11 + 1;
          *((_QWORD *)a2 + 1) = v27;
        }
        *((_BYTE *)this + 15) = v26 != 0;
        *((_DWORD *)this + 6) |= 0x10u;
        if ((unint64_t)v27 >= v9 || *v27 != 48)
          continue;
        v14 = v27 + 1;
        *((_QWORD *)a2 + 1) = v14;
LABEL_77:
        v37 = 0;
        if ((unint64_t)v14 >= v9 || *v14 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v37);
          if (!(_DWORD)result)
            return result;
          v28 = v37;
          v29 = (_BYTE *)*((_QWORD *)a2 + 1);
          v9 = *((_QWORD *)a2 + 2);
        }
        else
        {
          v28 = *v14;
          v29 = v14 + 1;
          *((_QWORD *)a2 + 1) = v29;
        }
        *((_BYTE *)this + 16) = v28 != 0;
        *((_DWORD *)this + 6) |= 0x20u;
        if ((unint64_t)v29 >= v9 || *v29 != 56)
          continue;
        v16 = v29 + 1;
        *((_QWORD *)a2 + 1) = v16;
LABEL_85:
        v37 = 0;
        if ((unint64_t)v16 >= v9 || *v16 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v37);
          if (!(_DWORD)result)
            return result;
          v30 = v37;
          v31 = (_BYTE *)*((_QWORD *)a2 + 1);
          v9 = *((_QWORD *)a2 + 2);
        }
        else
        {
          v30 = *v16;
          v31 = v16 + 1;
          *((_QWORD *)a2 + 1) = v31;
        }
        *((_BYTE *)this + 17) = v30 != 0;
        *((_DWORD *)this + 6) |= 0x40u;
        if ((unint64_t)v31 >= v9 || *v31 != 64)
          continue;
        v15 = v31 + 1;
        *((_QWORD *)a2 + 1) = v15;
LABEL_93:
        v37 = 0;
        if ((unint64_t)v15 >= v9 || *v15 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v37);
          if (!(_DWORD)result)
            return result;
          v32 = v37;
          v33 = (_BYTE *)*((_QWORD *)a2 + 1);
          v9 = *((_QWORD *)a2 + 2);
        }
        else
        {
          v32 = *v15;
          v33 = v15 + 1;
          *((_QWORD *)a2 + 1) = v33;
        }
        *((_BYTE *)this + 18) = v32 != 0;
        *((_DWORD *)this + 6) |= 0x80u;
        if ((unint64_t)v33 >= v9 || *v33 != 72)
          continue;
        v17 = v33 + 1;
        *((_QWORD *)a2 + 1) = v17;
LABEL_101:
        v37 = 0;
        if ((unint64_t)v17 >= v9 || *v17 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v37);
          if (!(_DWORD)result)
            return result;
          v34 = v37;
          v35 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
          v9 = *((_QWORD *)a2 + 2);
        }
        else
        {
          v34 = *v17;
          v35 = (unsigned __int8 *)(v17 + 1);
          *((_QWORD *)a2 + 1) = v35;
        }
        *((_BYTE *)this + 19) = v34 != 0;
        *((_DWORD *)this + 6) |= 0x100u;
        if (v35 != (unsigned __int8 *)v9 || !*((_DWORD *)a2 + 11) && *((_DWORD *)a2 + 6) != *((_DWORD *)a2 + 10))
          continue;
        *((_DWORD *)a2 + 8) = 0;
        result = 1;
        *((_BYTE *)a2 + 36) = 1;
        return result;
      case 3u:
        v6 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_28;
        v10 = (char *)*((_QWORD *)a2 + 1);
        v9 = *((_QWORD *)a2 + 2);
        goto LABEL_53;
      case 4u:
        v6 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_28;
        v13 = (char *)*((_QWORD *)a2 + 1);
        v9 = *((_QWORD *)a2 + 2);
        goto LABEL_61;
      case 5u:
        v6 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_28;
        v11 = (char *)*((_QWORD *)a2 + 1);
        v9 = *((_QWORD *)a2 + 2);
        goto LABEL_69;
      case 6u:
        v6 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_28;
        v14 = (char *)*((_QWORD *)a2 + 1);
        v9 = *((_QWORD *)a2 + 2);
        goto LABEL_77;
      case 7u:
        v6 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_28;
        v16 = (char *)*((_QWORD *)a2 + 1);
        v9 = *((_QWORD *)a2 + 2);
        goto LABEL_85;
      case 8u:
        v6 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_28;
        v15 = (char *)*((_QWORD *)a2 + 1);
        v9 = *((_QWORD *)a2 + 2);
        goto LABEL_93;
      case 9u:
        v6 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_28;
        v17 = (char *)*((_QWORD *)a2 + 1);
        v9 = *((_QWORD *)a2 + 2);
        goto LABEL_101;
      default:
        v6 = TagFallback & 7;
LABEL_28:
        if (v6 == 4)
          return 1;
        if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(a2, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback) & 1) != 0)continue;
        return 0;
    }
    return result;
  }
}

uint64_t CLMicroLocationProto::EnabledStateUpdate::SerializeWithCachedSizes(uint64_t this, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  int v6;

  v5 = this;
  v6 = *(_DWORD *)(this + 24);
  if ((v6 & 1) != 0)
  {
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(unsigned int *)(this + 8), (uint64_t)a2, a4);
    v6 = *(_DWORD *)(v5 + 24);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0)
        goto LABEL_4;
      goto LABEL_13;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, *(unsigned __int8 *)(v5 + 12), (uint64_t)a2, a4);
  v6 = *(_DWORD *)(v5 + 24);
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0)
      goto LABEL_5;
    goto LABEL_14;
  }
LABEL_13:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, *(unsigned __int8 *)(v5 + 13), (uint64_t)a2, a4);
  v6 = *(_DWORD *)(v5 + 24);
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_15;
  }
LABEL_14:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4, *(unsigned __int8 *)(v5 + 14), (uint64_t)a2, a4);
  v6 = *(_DWORD *)(v5 + 24);
  if ((v6 & 0x10) == 0)
  {
LABEL_6:
    if ((v6 & 0x20) == 0)
      goto LABEL_7;
    goto LABEL_16;
  }
LABEL_15:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5, *(unsigned __int8 *)(v5 + 15), (uint64_t)a2, a4);
  v6 = *(_DWORD *)(v5 + 24);
  if ((v6 & 0x20) == 0)
  {
LABEL_7:
    if ((v6 & 0x40) == 0)
      goto LABEL_8;
    goto LABEL_17;
  }
LABEL_16:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)6, *(unsigned __int8 *)(v5 + 16), (uint64_t)a2, a4);
  v6 = *(_DWORD *)(v5 + 24);
  if ((v6 & 0x40) == 0)
  {
LABEL_8:
    if ((v6 & 0x80) == 0)
      goto LABEL_9;
    goto LABEL_18;
  }
LABEL_17:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)7, *(unsigned __int8 *)(v5 + 17), (uint64_t)a2, a4);
  v6 = *(_DWORD *)(v5 + 24);
  if ((v6 & 0x80) == 0)
  {
LABEL_9:
    if ((v6 & 0x100) == 0)
      return this;
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)9, *(unsigned __int8 *)(v5 + 19), (uint64_t)a2, a4);
  }
LABEL_18:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)8, *(unsigned __int8 *)(v5 + 18), (uint64_t)a2, a4);
  if ((*(_DWORD *)(v5 + 24) & 0x100) != 0)
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)9, *(unsigned __int8 *)(v5 + 19), (uint64_t)a2, a4);
  return this;
}

uint64_t CLMicroLocationProto::EnabledStateUpdate::ByteSize(CLMicroLocationProto::EnabledStateUpdate *this)
{
  int v2;
  unsigned int v3;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v4;
  uint64_t result;

  v2 = *((_DWORD *)this + 6);
  if ((_BYTE)v2)
  {
    if ((v2 & 1) != 0)
    {
      v4 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 2);
      if ((v4 & 0x80000000) != 0)
      {
        v3 = 11;
      }
      else if (v4 >= 0x80)
      {
        v3 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v4) + 1;
        v2 = *((_DWORD *)this + 6);
      }
      else
      {
        v3 = 2;
      }
    }
    else
    {
      v3 = 0;
    }
    if ((v2 & 2) != 0)
      v3 += 2;
    if ((v2 & 4) != 0)
      v3 += 2;
    if ((v2 & 8) != 0)
      v3 += 2;
    if ((v2 & 0x10) != 0)
      v3 += 2;
    if ((v2 & 0x20) != 0)
      v3 += 2;
    if ((v2 & 0x40) != 0)
      v3 += 2;
    if ((v2 & 0x80) != 0)
      v3 += 2;
  }
  else
  {
    v3 = 0;
  }
  if ((v2 & 0x100) != 0)
    result = v3 + 2;
  else
    result = v3;
  *((_DWORD *)this + 5) = result;
  return result;
}

void CLMicroLocationProto::EnabledStateUpdate::CheckTypeAndMergeFrom(CLMicroLocationProto::EnabledStateUpdate *this, const wireless_diagnostics::google::protobuf::MessageLite *lpsrc)
{
  uint64_t v4;
  uint64_t v5;

  CLMicroLocationProto::EnabledStateUpdate::MergeFrom(this, lpsrc);
}

void CLMicroLocationProto::EnabledStateUpdate::CopyFrom(CLMicroLocationProto::EnabledStateUpdate *this, const CLMicroLocationProto::EnabledStateUpdate *a2)
{
  if (a2 != this)
  {
    (*(void (**)(CLMicroLocationProto::EnabledStateUpdate *))(*(_QWORD *)this + 32))(this);
    CLMicroLocationProto::EnabledStateUpdate::MergeFrom(this, a2);
  }
}

uint64_t CLMicroLocationProto::EnabledStateUpdate::IsInitialized(CLMicroLocationProto::EnabledStateUpdate *this)
{
  return 1;
}

_QWORD *CLMicroLocationProto::EnabledStateUpdate::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CLMicroLocationProto.EnabledStateUpdate");
}

void CLMicroLocationProto::ScreenStateUpdate::~ScreenStateUpdate(CLMicroLocationProto::ScreenStateUpdate *this)
{
  *(_QWORD *)this = &off_2511D83D8;
  CLMicroLocationProto::protobuf_AddDesc_microlocation_2eproto(this);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

{
  CLMicroLocationProto::ScreenStateUpdate::~ScreenStateUpdate(this);
  JUMPOUT(0x2426A04D4);
}

uint64_t CLMicroLocationProto::ScreenStateUpdate::New(CLMicroLocationProto::ScreenStateUpdate *this)
{
  uint64_t result;

  result = operator new();
  *(_QWORD *)result = &off_2511D83D8;
  *(_DWORD *)(result + 8) = 52;
  *(_BYTE *)(result + 12) = 0;
  *(_QWORD *)(result + 16) = 0;
  return result;
}

uint64_t CLMicroLocationProto::ScreenStateUpdate::MergePartialFromCodedStream(CLMicroLocationProto::ScreenStateUpdate *this, wireless_diagnostics::google::protobuf::io::CodedInputStream *a2)
{
  char *v4;
  uint64_t TagFallback;
  int v6;
  unint64_t v7;
  char *v8;
  char *v9;
  unsigned int v10;
  BOOL v11;
  _BYTE *v13;
  unsigned int v14;
  unsigned __int8 *v15;
  uint64_t result;
  unsigned int v17;
  unsigned int v18;

  while (1)
  {
    while (1)
    {
      v4 = (char *)*((_QWORD *)a2 + 1);
      if ((unint64_t)v4 >= *((_QWORD *)a2 + 2) || *v4 < 0)
      {
        TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(a2);
        *((_DWORD *)a2 + 8) = TagFallback;
        if (!(_DWORD)TagFallback)
          return 1;
      }
      else
      {
        TagFallback = *v4;
        *((_DWORD *)a2 + 8) = TagFallback;
        *((_QWORD *)a2 + 1) = v4 + 1;
        if (!(_DWORD)TagFallback)
          return 1;
      }
      if (TagFallback >> 3 != 1)
        break;
      v6 = TagFallback & 7;
      if ((TagFallback & 7) != 0)
        goto LABEL_15;
      v17 = 0;
      v9 = (char *)*((_QWORD *)a2 + 1);
      if ((unint64_t)v9 >= *((_QWORD *)a2 + 2) || *v9 < 0)
      {
        result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v17);
        if (!(_DWORD)result)
          return result;
        v10 = v17;
      }
      else
      {
        v10 = *v9;
        *((_QWORD *)a2 + 1) = v9 + 1;
      }
      if (v10 - 31 < 0x19 || (v10 <= 0xE ? (v11 = ((1 << v10) & 0x76B6) == 0) : (v11 = 1), !v11))
      {
        if (v10 - 31 >= 0x19 && (v10 > 0xE || ((1 << v10) & 0x76B6) == 0))
          CLMicroLocationProto::ScreenStateUpdate::MergeFrom();
        *((_DWORD *)this + 5) |= 1u;
        *((_DWORD *)this + 2) = v10;
      }
      v13 = (_BYTE *)*((_QWORD *)a2 + 1);
      v7 = *((_QWORD *)a2 + 2);
      if ((unint64_t)v13 < v7 && *v13 == 16)
      {
        v8 = v13 + 1;
        *((_QWORD *)a2 + 1) = v8;
LABEL_34:
        v18 = 0;
        if ((unint64_t)v8 >= v7 || *v8 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v18);
          if (!(_DWORD)result)
            return result;
          v14 = v18;
          v15 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
          v7 = *((_QWORD *)a2 + 2);
        }
        else
        {
          v14 = *v8;
          v15 = (unsigned __int8 *)(v8 + 1);
          *((_QWORD *)a2 + 1) = v15;
        }
        *((_BYTE *)this + 12) = v14 != 0;
        *((_DWORD *)this + 5) |= 2u;
        if (v15 == (unsigned __int8 *)v7 && (*((_DWORD *)a2 + 11) || *((_DWORD *)a2 + 6) == *((_DWORD *)a2 + 10)))
        {
          *((_DWORD *)a2 + 8) = 0;
          result = 1;
          *((_BYTE *)a2 + 36) = 1;
          return result;
        }
      }
    }
    if (TagFallback >> 3 == 2)
    {
      v6 = TagFallback & 7;
      if ((TagFallback & 7) == 0)
      {
        v8 = (char *)*((_QWORD *)a2 + 1);
        v7 = *((_QWORD *)a2 + 2);
        goto LABEL_34;
      }
    }
    else
    {
      v6 = TagFallback & 7;
    }
LABEL_15:
    if (v6 == 4)
      return 1;
    if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(a2, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback) & 1) == 0)return 0;
  }
}

uint64_t CLMicroLocationProto::ScreenStateUpdate::SerializeWithCachedSizes(uint64_t this, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  int v6;

  v5 = this;
  v6 = *(_DWORD *)(this + 20);
  if ((v6 & 1) != 0)
  {
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(unsigned int *)(this + 8), (uint64_t)a2, a4);
    v6 = *(_DWORD *)(v5 + 20);
  }
  if ((v6 & 2) != 0)
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, *(unsigned __int8 *)(v5 + 12), (uint64_t)a2, a4);
  return this;
}

uint64_t CLMicroLocationProto::ScreenStateUpdate::ByteSize(CLMicroLocationProto::ScreenStateUpdate *this)
{
  int v2;
  unsigned int v3;
  uint64_t result;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v5;

  LOBYTE(v2) = *((_BYTE *)this + 20);
  if ((_BYTE)v2)
  {
    if ((*((_BYTE *)this + 20) & 1) != 0)
    {
      v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 2);
      if ((v5 & 0x80000000) != 0)
      {
        v3 = 11;
      }
      else if (v5 >= 0x80)
      {
        v3 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v5) + 1;
        v2 = *((_DWORD *)this + 5);
      }
      else
      {
        v3 = 2;
      }
    }
    else
    {
      v3 = 0;
    }
    if ((v2 & 2) != 0)
      result = v3 + 2;
    else
      result = v3;
  }
  else
  {
    result = 0;
  }
  *((_DWORD *)this + 4) = result;
  return result;
}

void CLMicroLocationProto::ScreenStateUpdate::CheckTypeAndMergeFrom(CLMicroLocationProto::ScreenStateUpdate *this, const wireless_diagnostics::google::protobuf::MessageLite *lpsrc)
{
  uint64_t v4;
  uint64_t v5;

  CLMicroLocationProto::ScreenStateUpdate::MergeFrom(this, lpsrc);
}

void CLMicroLocationProto::ScreenStateUpdate::CopyFrom(CLMicroLocationProto::ScreenStateUpdate *this, const CLMicroLocationProto::ScreenStateUpdate *a2)
{
  if (a2 != this)
  {
    (*(void (**)(CLMicroLocationProto::ScreenStateUpdate *))(*(_QWORD *)this + 32))(this);
    CLMicroLocationProto::ScreenStateUpdate::MergeFrom(this, a2);
  }
}

uint64_t CLMicroLocationProto::ScreenStateUpdate::IsInitialized(CLMicroLocationProto::ScreenStateUpdate *this)
{
  return 1;
}

_QWORD *CLMicroLocationProto::ScreenStateUpdate::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CLMicroLocationProto.ScreenStateUpdate");
}

void CLMicroLocationProto::CloudBackupExport::~CloudBackupExport(CLMicroLocationProto::CloudBackupExport *this)
{
  *(_QWORD *)this = &off_2511D8450;
  CLMicroLocationProto::protobuf_AddDesc_microlocation_2eproto(this);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

{
  CLMicroLocationProto::CloudBackupExport::~CloudBackupExport(this);
  JUMPOUT(0x2426A04D4);
}

double CLMicroLocationProto::CloudBackupExport::New(CLMicroLocationProto::CloudBackupExport *this)
{
  uint64_t v1;
  double result;

  v1 = operator new();
  *(_QWORD *)v1 = &off_2511D8450;
  *(_QWORD *)&result = 53;
  *(_QWORD *)(v1 + 8) = 53;
  *(_DWORD *)(v1 + 16) = 0;
  return result;
}

uint64_t CLMicroLocationProto::CloudBackupExport::MergePartialFromCodedStream(CLMicroLocationProto::CloudBackupExport *this, wireless_diagnostics::google::protobuf::io::CodedInputStream *a2)
{
  char *v4;
  uint64_t TagFallback;
  char *v6;
  unsigned int v7;
  BOOL v8;
  uint64_t result;
  unsigned int v11;

  while (1)
  {
    while (1)
    {
      v4 = (char *)*((_QWORD *)a2 + 1);
      if ((unint64_t)v4 >= *((_QWORD *)a2 + 2) || *v4 < 0)
      {
        TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(a2);
        *((_DWORD *)a2 + 8) = TagFallback;
      }
      else
      {
        TagFallback = *v4;
        *((_DWORD *)a2 + 8) = TagFallback;
        *((_QWORD *)a2 + 1) = v4 + 1;
      }
      if ((_DWORD)TagFallback != 8)
        break;
      v11 = 0;
      v6 = (char *)*((_QWORD *)a2 + 1);
      if ((unint64_t)v6 >= *((_QWORD *)a2 + 2) || *v6 < 0)
      {
        result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v11);
        if (!(_DWORD)result)
          return result;
        v7 = v11;
      }
      else
      {
        v7 = *v6;
        *((_QWORD *)a2 + 1) = v6 + 1;
      }
      if (v7 - 31 < 0x19 || (v7 <= 0xE ? (v8 = ((1 << v7) & 0x76B6) == 0) : (v8 = 1), !v8))
      {
        if (v7 - 31 >= 0x19 && (v7 > 0xE || ((1 << v7) & 0x76B6) == 0))
          CLMicroLocationProto::CloudBackupExport::MergeFrom();
        *((_DWORD *)this + 4) |= 1u;
        *((_DWORD *)this + 2) = v7;
      }
      if (*((_QWORD *)a2 + 1) == *((_QWORD *)a2 + 2)
        && (*((_DWORD *)a2 + 11) || *((_DWORD *)a2 + 6) == *((_DWORD *)a2 + 10)))
      {
        *((_DWORD *)a2 + 8) = 0;
        result = 1;
        *((_BYTE *)a2 + 36) = 1;
        return result;
      }
    }
    if (!(_DWORD)TagFallback || (TagFallback & 7) == 4)
      break;
    if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(a2, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback) & 1) == 0)return 0;
  }
  return 1;
}

uint64_t CLMicroLocationProto::CloudBackupExport::SerializeWithCachedSizes(uint64_t this, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  if ((*(_BYTE *)(this + 16) & 1) != 0)
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(unsigned int *)(this + 8), (uint64_t)a2, a4);
  return this;
}

uint64_t CLMicroLocationProto::CloudBackupExport::ByteSize(CLMicroLocationProto::CloudBackupExport *this)
{
  uint64_t result;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v3;

  if ((*((_BYTE *)this + 16) & 1) != 0)
  {
    v3 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 2);
    if ((v3 & 0x80000000) != 0)
    {
      result = 11;
    }
    else if (v3 >= 0x80)
    {
      result = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v3) + 1;
    }
    else
    {
      result = 2;
    }
  }
  else
  {
    result = 0;
  }
  *((_DWORD *)this + 3) = result;
  return result;
}

void CLMicroLocationProto::CloudBackupExport::CheckTypeAndMergeFrom(CLMicroLocationProto::CloudBackupExport *this, const wireless_diagnostics::google::protobuf::MessageLite *lpsrc)
{
  uint64_t v4;
  uint64_t v5;

  CLMicroLocationProto::CloudBackupExport::MergeFrom(this, lpsrc);
}

void CLMicroLocationProto::CloudBackupExport::CopyFrom(CLMicroLocationProto::CloudBackupExport *this, const CLMicroLocationProto::CloudBackupExport *a2)
{
  if (a2 != this)
  {
    (*(void (**)(CLMicroLocationProto::CloudBackupExport *))(*(_QWORD *)this + 32))(this);
    CLMicroLocationProto::CloudBackupExport::MergeFrom(this, a2);
  }
}

uint64_t CLMicroLocationProto::CloudBackupExport::IsInitialized(CLMicroLocationProto::CloudBackupExport *this)
{
  return 1;
}

_QWORD *CLMicroLocationProto::CloudBackupExport::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CLMicroLocationProto.CloudBackupExport");
}

void CLMicroLocationProto::CloudBackupImport::~CloudBackupImport(CLMicroLocationProto::CloudBackupImport *this)
{
  *(_QWORD *)this = &off_2511D84C8;
  CLMicroLocationProto::protobuf_AddDesc_microlocation_2eproto(this);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

{
  CLMicroLocationProto::CloudBackupImport::~CloudBackupImport(this);
  JUMPOUT(0x2426A04D4);
}

double CLMicroLocationProto::CloudBackupImport::New(CLMicroLocationProto::CloudBackupImport *this)
{
  uint64_t v1;
  double result;

  v1 = operator new();
  *(_QWORD *)v1 = &off_2511D84C8;
  *(_QWORD *)&result = 54;
  *(_QWORD *)(v1 + 8) = 54;
  *(_DWORD *)(v1 + 16) = 0;
  return result;
}

uint64_t CLMicroLocationProto::CloudBackupImport::MergePartialFromCodedStream(CLMicroLocationProto::CloudBackupImport *this, wireless_diagnostics::google::protobuf::io::CodedInputStream *a2)
{
  char *v4;
  uint64_t TagFallback;
  char *v6;
  unsigned int v7;
  BOOL v8;
  uint64_t result;
  unsigned int v11;

  while (1)
  {
    while (1)
    {
      v4 = (char *)*((_QWORD *)a2 + 1);
      if ((unint64_t)v4 >= *((_QWORD *)a2 + 2) || *v4 < 0)
      {
        TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(a2);
        *((_DWORD *)a2 + 8) = TagFallback;
      }
      else
      {
        TagFallback = *v4;
        *((_DWORD *)a2 + 8) = TagFallback;
        *((_QWORD *)a2 + 1) = v4 + 1;
      }
      if ((_DWORD)TagFallback != 8)
        break;
      v11 = 0;
      v6 = (char *)*((_QWORD *)a2 + 1);
      if ((unint64_t)v6 >= *((_QWORD *)a2 + 2) || *v6 < 0)
      {
        result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v11);
        if (!(_DWORD)result)
          return result;
        v7 = v11;
      }
      else
      {
        v7 = *v6;
        *((_QWORD *)a2 + 1) = v6 + 1;
      }
      if (v7 - 31 < 0x19 || (v7 <= 0xE ? (v8 = ((1 << v7) & 0x76B6) == 0) : (v8 = 1), !v8))
      {
        if (v7 - 31 >= 0x19 && (v7 > 0xE || ((1 << v7) & 0x76B6) == 0))
          CLMicroLocationProto::CloudBackupImport::MergeFrom();
        *((_DWORD *)this + 4) |= 1u;
        *((_DWORD *)this + 2) = v7;
      }
      if (*((_QWORD *)a2 + 1) == *((_QWORD *)a2 + 2)
        && (*((_DWORD *)a2 + 11) || *((_DWORD *)a2 + 6) == *((_DWORD *)a2 + 10)))
      {
        *((_DWORD *)a2 + 8) = 0;
        result = 1;
        *((_BYTE *)a2 + 36) = 1;
        return result;
      }
    }
    if (!(_DWORD)TagFallback || (TagFallback & 7) == 4)
      break;
    if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(a2, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback) & 1) == 0)return 0;
  }
  return 1;
}

uint64_t CLMicroLocationProto::CloudBackupImport::SerializeWithCachedSizes(uint64_t this, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  if ((*(_BYTE *)(this + 16) & 1) != 0)
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(unsigned int *)(this + 8), (uint64_t)a2, a4);
  return this;
}

uint64_t CLMicroLocationProto::CloudBackupImport::ByteSize(CLMicroLocationProto::CloudBackupImport *this)
{
  uint64_t result;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v3;

  if ((*((_BYTE *)this + 16) & 1) != 0)
  {
    v3 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 2);
    if ((v3 & 0x80000000) != 0)
    {
      result = 11;
    }
    else if (v3 >= 0x80)
    {
      result = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v3) + 1;
    }
    else
    {
      result = 2;
    }
  }
  else
  {
    result = 0;
  }
  *((_DWORD *)this + 3) = result;
  return result;
}

void CLMicroLocationProto::CloudBackupImport::CheckTypeAndMergeFrom(CLMicroLocationProto::CloudBackupImport *this, const wireless_diagnostics::google::protobuf::MessageLite *lpsrc)
{
  uint64_t v4;
  uint64_t v5;

  CLMicroLocationProto::CloudBackupImport::MergeFrom(this, lpsrc);
}

void CLMicroLocationProto::CloudBackupImport::CopyFrom(CLMicroLocationProto::CloudBackupImport *this, const CLMicroLocationProto::CloudBackupImport *a2)
{
  if (a2 != this)
  {
    (*(void (**)(CLMicroLocationProto::CloudBackupImport *))(*(_QWORD *)this + 32))(this);
    CLMicroLocationProto::CloudBackupImport::MergeFrom(this, a2);
  }
}

uint64_t CLMicroLocationProto::CloudBackupImport::IsInitialized(CLMicroLocationProto::CloudBackupImport *this)
{
  return 1;
}

_QWORD *CLMicroLocationProto::CloudBackupImport::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CLMicroLocationProto.CloudBackupImport");
}

void CLMicroLocationProto::DataMigration::~DataMigration(CLMicroLocationProto::DataMigration *this)
{
  *(_QWORD *)this = &off_2511D8540;
  CLMicroLocationProto::protobuf_AddDesc_microlocation_2eproto(this);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

{
  CLMicroLocationProto::DataMigration::~DataMigration(this);
  JUMPOUT(0x2426A04D4);
}

double CLMicroLocationProto::DataMigration::New(CLMicroLocationProto::DataMigration *this)
{
  uint64_t v1;
  double result;

  v1 = operator new();
  *(_QWORD *)v1 = &off_2511D8540;
  *(_QWORD *)&result = 55;
  *(_QWORD *)(v1 + 8) = 55;
  *(_DWORD *)(v1 + 16) = 0;
  return result;
}

uint64_t CLMicroLocationProto::DataMigration::MergePartialFromCodedStream(CLMicroLocationProto::DataMigration *this, wireless_diagnostics::google::protobuf::io::CodedInputStream *a2)
{
  char *v4;
  uint64_t TagFallback;
  char *v6;
  unsigned int v7;
  BOOL v8;
  uint64_t result;
  unsigned int v11;

  while (1)
  {
    while (1)
    {
      v4 = (char *)*((_QWORD *)a2 + 1);
      if ((unint64_t)v4 >= *((_QWORD *)a2 + 2) || *v4 < 0)
      {
        TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(a2);
        *((_DWORD *)a2 + 8) = TagFallback;
      }
      else
      {
        TagFallback = *v4;
        *((_DWORD *)a2 + 8) = TagFallback;
        *((_QWORD *)a2 + 1) = v4 + 1;
      }
      if ((_DWORD)TagFallback != 8)
        break;
      v11 = 0;
      v6 = (char *)*((_QWORD *)a2 + 1);
      if ((unint64_t)v6 >= *((_QWORD *)a2 + 2) || *v6 < 0)
      {
        result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v11);
        if (!(_DWORD)result)
          return result;
        v7 = v11;
      }
      else
      {
        v7 = *v6;
        *((_QWORD *)a2 + 1) = v6 + 1;
      }
      if (v7 - 31 < 0x19 || (v7 <= 0xE ? (v8 = ((1 << v7) & 0x76B6) == 0) : (v8 = 1), !v8))
      {
        if (v7 - 31 >= 0x19 && (v7 > 0xE || ((1 << v7) & 0x76B6) == 0))
          CLMicroLocationProto::DataMigration::MergeFrom();
        *((_DWORD *)this + 4) |= 1u;
        *((_DWORD *)this + 2) = v7;
      }
      if (*((_QWORD *)a2 + 1) == *((_QWORD *)a2 + 2)
        && (*((_DWORD *)a2 + 11) || *((_DWORD *)a2 + 6) == *((_DWORD *)a2 + 10)))
      {
        *((_DWORD *)a2 + 8) = 0;
        result = 1;
        *((_BYTE *)a2 + 36) = 1;
        return result;
      }
    }
    if (!(_DWORD)TagFallback || (TagFallback & 7) == 4)
      break;
    if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(a2, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback) & 1) == 0)return 0;
  }
  return 1;
}

uint64_t CLMicroLocationProto::DataMigration::SerializeWithCachedSizes(uint64_t this, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  if ((*(_BYTE *)(this + 16) & 1) != 0)
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(unsigned int *)(this + 8), (uint64_t)a2, a4);
  return this;
}

uint64_t CLMicroLocationProto::DataMigration::ByteSize(CLMicroLocationProto::DataMigration *this)
{
  uint64_t result;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v3;

  if ((*((_BYTE *)this + 16) & 1) != 0)
  {
    v3 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 2);
    if ((v3 & 0x80000000) != 0)
    {
      result = 11;
    }
    else if (v3 >= 0x80)
    {
      result = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v3) + 1;
    }
    else
    {
      result = 2;
    }
  }
  else
  {
    result = 0;
  }
  *((_DWORD *)this + 3) = result;
  return result;
}

void CLMicroLocationProto::DataMigration::CheckTypeAndMergeFrom(CLMicroLocationProto::DataMigration *this, const wireless_diagnostics::google::protobuf::MessageLite *lpsrc)
{
  uint64_t v4;
  uint64_t v5;

  CLMicroLocationProto::DataMigration::MergeFrom(this, lpsrc);
}

void CLMicroLocationProto::DataMigration::CopyFrom(CLMicroLocationProto::DataMigration *this, const CLMicroLocationProto::DataMigration *a2)
{
  if (a2 != this)
  {
    (*(void (**)(CLMicroLocationProto::DataMigration *))(*(_QWORD *)this + 32))(this);
    CLMicroLocationProto::DataMigration::MergeFrom(this, a2);
  }
}

uint64_t CLMicroLocationProto::DataMigration::IsInitialized(CLMicroLocationProto::DataMigration *this)
{
  return 1;
}

_QWORD *CLMicroLocationProto::DataMigration::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CLMicroLocationProto.DataMigration");
}

CLMicroLocationProto::ChannelAndCount *CLMicroLocationProto::ChannelAndCount::ChannelAndCount(CLMicroLocationProto::ChannelAndCount *this, const CLMicroLocationProto::ChannelAndCount *a2)
{
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *(_QWORD *)this = &off_2511D85B8;
  *((_DWORD *)this + 6) = 0;
  CLMicroLocationProto::ChannelAndCount::MergeFrom(this, a2);
  return this;
}

void sub_241ADA24C(_Unwind_Exception *a1)
{
  wireless_diagnostics::google::protobuf::MessageLite *v1;

  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(v1);
  _Unwind_Resume(a1);
}

void CLMicroLocationProto::ChannelAndCount::MergeFrom(CLMicroLocationProto::ChannelAndCount *this, const CLMicroLocationProto::ChannelAndCount *a2)
{
  int v4;
  int v5;
  uint64_t v6;
  _BYTE v7[48];

  if (a2 == this)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v7);
  }
  LOBYTE(v4) = *((_BYTE *)a2 + 24);
  if ((_BYTE)v4)
  {
    if ((*((_BYTE *)a2 + 24) & 1) != 0)
    {
      v5 = *((_DWORD *)a2 + 4);
      *((_DWORD *)this + 6) |= 1u;
      *((_DWORD *)this + 4) = v5;
      v4 = *((_DWORD *)a2 + 6);
    }
    if ((v4 & 2) != 0)
    {
      v6 = *((_QWORD *)a2 + 1);
      *((_DWORD *)this + 6) |= 2u;
      *((_QWORD *)this + 1) = v6;
    }
  }
}

void sub_241ADA308(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void CLMicroLocationProto::ChannelAndCount::~ChannelAndCount(CLMicroLocationProto::ChannelAndCount *this)
{
  *(_QWORD *)this = &off_2511D85B8;
  CLMicroLocationProto::protobuf_AddDesc_microlocation_2eproto(this);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

{
  CLMicroLocationProto::ChannelAndCount::~ChannelAndCount(this);
  JUMPOUT(0x2426A04D4);
}

uint64_t CLMicroLocationProto::ChannelAndCount::New(CLMicroLocationProto::ChannelAndCount *this)
{
  uint64_t result;

  result = operator new();
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)result = &off_2511D85B8;
  *(_DWORD *)(result + 24) = 0;
  return result;
}

uint64_t CLMicroLocationProto::ChannelAndCount::Clear(uint64_t this)
{
  if (*(_BYTE *)(this + 24))
  {
    *(_DWORD *)(this + 16) = 0;
    *(_QWORD *)(this + 8) = 0;
  }
  *(_DWORD *)(this + 24) = 0;
  return this;
}

uint64_t CLMicroLocationProto::ChannelAndCount::MergePartialFromCodedStream(CLMicroLocationProto::ChannelAndCount *this, wireless_diagnostics::google::protobuf::io::CodedInputStream *a2)
{
  unsigned int *v4;
  unint64_t *v5;
  char *v6;
  uint64_t TagFallback;
  int v8;
  unint64_t v9;
  char *v10;
  char *v11;
  _BYTE *v12;
  unsigned __int8 *v13;
  uint64_t result;

  v4 = (unsigned int *)((char *)this + 16);
  v5 = (unint64_t *)((char *)this + 8);
  while (1)
  {
    while (1)
    {
      v6 = (char *)*((_QWORD *)a2 + 1);
      if ((unint64_t)v6 >= *((_QWORD *)a2 + 2) || *v6 < 0)
      {
        TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(a2);
        *((_DWORD *)a2 + 8) = TagFallback;
        if (!(_DWORD)TagFallback)
          return 1;
      }
      else
      {
        TagFallback = *v6;
        *((_DWORD *)a2 + 8) = TagFallback;
        *((_QWORD *)a2 + 1) = v6 + 1;
        if (!(_DWORD)TagFallback)
          return 1;
      }
      if (TagFallback >> 3 != 1)
        break;
      v8 = TagFallback & 7;
      if ((TagFallback & 7) != 0)
        goto LABEL_16;
      v11 = (char *)*((_QWORD *)a2 + 1);
      v9 = *((_QWORD *)a2 + 2);
      if ((unint64_t)v11 >= v9 || *v11 < 0)
      {
        result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v4);
        if (!(_DWORD)result)
          return result;
        v12 = (_BYTE *)*((_QWORD *)a2 + 1);
        v9 = *((_QWORD *)a2 + 2);
      }
      else
      {
        *v4 = *v11;
        v12 = v11 + 1;
        *((_QWORD *)a2 + 1) = v12;
      }
      *((_DWORD *)this + 6) |= 1u;
      if ((unint64_t)v12 < v9 && *v12 == 16)
      {
        v10 = v12 + 1;
        *((_QWORD *)a2 + 1) = v10;
LABEL_24:
        if ((unint64_t)v10 >= v9 || *v10 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint64Fallback(a2, v5);
          if (!(_DWORD)result)
            return result;
          v13 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
          v9 = *((_QWORD *)a2 + 2);
        }
        else
        {
          *v5 = *v10;
          v13 = (unsigned __int8 *)(v10 + 1);
          *((_QWORD *)a2 + 1) = v13;
        }
        *((_DWORD *)this + 6) |= 2u;
        if (v13 == (unsigned __int8 *)v9 && (*((_DWORD *)a2 + 11) || *((_DWORD *)a2 + 6) == *((_DWORD *)a2 + 10)))
        {
          *((_DWORD *)a2 + 8) = 0;
          result = 1;
          *((_BYTE *)a2 + 36) = 1;
          return result;
        }
      }
    }
    if (TagFallback >> 3 == 2)
    {
      v8 = TagFallback & 7;
      if ((TagFallback & 7) == 0)
      {
        v10 = (char *)*((_QWORD *)a2 + 1);
        v9 = *((_QWORD *)a2 + 2);
        goto LABEL_24;
      }
    }
    else
    {
      v8 = TagFallback & 7;
    }
LABEL_16:
    if (v8 == 4)
      return 1;
    if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(a2, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback) & 1) == 0)return 0;
  }
}

uint64_t CLMicroLocationProto::ChannelAndCount::SerializeWithCachedSizes(uint64_t this, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  int v6;

  v5 = this;
  v6 = *(_DWORD *)(this + 24);
  if ((v6 & 1) != 0)
  {
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(unsigned int *)(this + 16), (uint64_t)a2, a4);
    v6 = *(_DWORD *)(v5 + 24);
  }
  if ((v6 & 2) != 0)
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt64((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, *(_QWORD *)(v5 + 8), (uint64_t)a2, a4);
  return this;
}

uint64_t CLMicroLocationProto::ChannelAndCount::ByteSize(CLMicroLocationProto::ChannelAndCount *this)
{
  char v2;
  uint64_t v3;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v4;

  v2 = *((_BYTE *)this + 24);
  if (v2)
  {
    if ((*((_BYTE *)this + 24) & 1) == 0)
    {
      v3 = 0;
      if ((*((_BYTE *)this + 24) & 2) == 0)
        goto LABEL_11;
      goto LABEL_10;
    }
    v4 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 4);
    if (v4 < 0x80)
    {
      v3 = 2;
      if ((v2 & 2) == 0)
        goto LABEL_11;
      goto LABEL_10;
    }
    v3 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v4) + 1;
    if ((*((_DWORD *)this + 6) & 2) != 0)
LABEL_10:
      v3 = v3
         + wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize64(*((wireless_diagnostics::google::protobuf::io::CodedOutputStream **)this + 1))
         + 1;
  }
  else
  {
    v3 = 0;
  }
LABEL_11:
  *((_DWORD *)this + 5) = v3;
  return v3;
}

void CLMicroLocationProto::ChannelAndCount::CheckTypeAndMergeFrom(CLMicroLocationProto::ChannelAndCount *this, const wireless_diagnostics::google::protobuf::MessageLite *lpsrc)
{
  uint64_t v4;
  uint64_t v5;

  CLMicroLocationProto::ChannelAndCount::MergeFrom(this, lpsrc);
}

uint64_t CLMicroLocationProto::ChannelAndCount::IsInitialized(CLMicroLocationProto::ChannelAndCount *this)
{
  return 1;
}

_QWORD *CLMicroLocationProto::ChannelAndCount::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CLMicroLocationProto.ChannelAndCount");
}

void CLMicroLocationProto::WifiHistogram::MergeFrom(CLMicroLocationProto::WifiHistogram *this, const CLMicroLocationProto::WifiHistogram *a2)
{
  uint64_t v4;
  const CLMicroLocationProto::ChannelAndCount *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  _BYTE v13[48];

  if (a2 == this)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v13);
  }
  wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((CLMicroLocationProto::WifiHistogram *)((char *)this + 8));
  if (*((int *)a2 + 4) >= 1)
  {
    v4 = 0;
    do
    {
      v5 = *(const CLMicroLocationProto::ChannelAndCount **)(*((_QWORD *)a2 + 1) + 8 * v4);
      v6 = *((_DWORD *)this + 5);
      v7 = *((int *)this + 4);
      if ((int)v7 >= v6)
      {
        if (v6 == *((_DWORD *)this + 6))
        {
          wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((CLMicroLocationProto::WifiHistogram *)((char *)this + 8));
          v6 = *((_DWORD *)this + 5);
        }
        *((_DWORD *)this + 5) = v6 + 1;
        v9 = operator new();
        *(_QWORD *)(v9 + 8) = 0;
        *(_QWORD *)(v9 + 16) = 0;
        *(_QWORD *)v9 = &off_2511D85B8;
        *(_DWORD *)(v9 + 24) = 0;
        v10 = *((_QWORD *)this + 1);
        v11 = *((int *)this + 4);
        *((_DWORD *)this + 4) = v11 + 1;
        *(_QWORD *)(v10 + 8 * v11) = v9;
      }
      else
      {
        v8 = *((_QWORD *)this + 1);
        *((_DWORD *)this + 4) = v7 + 1;
        v9 = *(_QWORD *)(v8 + 8 * v7);
      }
      CLMicroLocationProto::ChannelAndCount::MergeFrom((CLMicroLocationProto::ChannelAndCount *)v9, v5);
      ++v4;
    }
    while (v4 < *((int *)a2 + 4));
  }
  if ((*((_BYTE *)a2 + 40) & 1) != 0)
  {
    v12 = *((_DWORD *)a2 + 8);
    if (v12 >= 3)
      CLMicroLocationProto::WifiHistogram::MergeFrom();
    *((_DWORD *)this + 10) |= 1u;
    *((_DWORD *)this + 8) = v12;
  }
}

void sub_241ADA81C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void CLMicroLocationProto::WifiHistogram::~WifiHistogram(CLMicroLocationProto::WifiHistogram *this)
{
  *(_QWORD *)this = &off_2511D8630;
  CLMicroLocationProto::protobuf_AddDesc_microlocation_2eproto(this);
  wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Destroy<wireless_diagnostics::google::protobuf::RepeatedPtrField<CLMicroLocationProto::Measurement>::TypeHandler>((uint64_t *)this + 1);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

{
  CLMicroLocationProto::WifiHistogram::~WifiHistogram(this);
  JUMPOUT(0x2426A04D4);
}

uint64_t CLMicroLocationProto::WifiHistogram::New(CLMicroLocationProto::WifiHistogram *this)
{
  uint64_t result;

  result = operator new();
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)result = &off_2511D8630;
  *(_DWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 32) = 0;
  *(_DWORD *)(result + 40) = 0;
  return result;
}

uint64_t CLMicroLocationProto::WifiHistogram::Clear(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = this;
  if (*(_BYTE *)(this + 40))
    *(_DWORD *)(this + 32) = 0;
  if (*(int *)(this + 16) >= 1)
  {
    v2 = 0;
    do
    {
      v3 = *(_QWORD *)(*(_QWORD *)(v1 + 8) + 8 * v2);
      this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 32))(v3);
      ++v2;
    }
    while (v2 < *(int *)(v1 + 16));
  }
  *(_DWORD *)(v1 + 16) = 0;
  *(_DWORD *)(v1 + 40) = 0;
  return this;
}

uint64_t CLMicroLocationProto::WifiHistogram::MergePartialFromCodedStream(CLMicroLocationProto::WifiHistogram *this, wireless_diagnostics::google::protobuf::io::CodedInputStream *a2)
{
  wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *v4;
  char *v5;
  uint64_t TagFallback;
  int v7;
  char *v8;
  unsigned int v9;
  uint64_t result;
  _BYTE *v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  int v19;
  int v20;
  int v21;
  BOOL v22;
  int v23;
  _BYTE *v24;
  unsigned int v25;
  unsigned int v26;

  v4 = (CLMicroLocationProto::WifiHistogram *)((char *)this + 8);
  while (1)
  {
    while (1)
    {
      while (1)
      {
        v5 = (char *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v5 >= *((_QWORD *)a2 + 2) || *v5 < 0)
        {
          TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(a2);
          *((_DWORD *)a2 + 8) = TagFallback;
          if (!(_DWORD)TagFallback)
            return 1;
        }
        else
        {
          TagFallback = *v5;
          *((_DWORD *)a2 + 8) = TagFallback;
          *((_QWORD *)a2 + 1) = v5 + 1;
          if (!(_DWORD)TagFallback)
            return 1;
        }
        if (TagFallback >> 3 != 1)
          break;
        v7 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_16;
        v25 = 0;
        v8 = (char *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v8 >= *((_QWORD *)a2 + 2) || *v8 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v25);
          if (!(_DWORD)result)
            return result;
          v9 = v25;
        }
        else
        {
          v9 = *v8;
          *((_QWORD *)a2 + 1) = v8 + 1;
        }
        if (v9 <= 2)
        {
          *((_DWORD *)this + 10) |= 1u;
          *((_DWORD *)this + 8) = v9;
        }
        v11 = (_BYTE *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v11 < *((_QWORD *)a2 + 2) && *v11 == 18)
          goto LABEL_25;
      }
      if (TagFallback >> 3 != 2)
        break;
      v7 = TagFallback & 7;
      if (v7 != 2)
        goto LABEL_16;
      while (1)
      {
        v12 = *((_DWORD *)this + 5);
        v13 = *((int *)this + 4);
        if ((int)v13 >= v12)
        {
          if (v12 == *((_DWORD *)this + 6))
          {
            wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve(v4);
            v12 = *((_DWORD *)this + 5);
          }
          *((_DWORD *)this + 5) = v12 + 1;
          v15 = operator new();
          *(_QWORD *)(v15 + 8) = 0;
          *(_QWORD *)(v15 + 16) = 0;
          *(_QWORD *)v15 = &off_2511D85B8;
          *(_DWORD *)(v15 + 24) = 0;
          v16 = *((_QWORD *)this + 1);
          v17 = *((int *)this + 4);
          *((_DWORD *)this + 4) = v17 + 1;
          *(_QWORD *)(v16 + 8 * v17) = v15;
        }
        else
        {
          v14 = *((_QWORD *)this + 1);
          *((_DWORD *)this + 4) = v13 + 1;
          v15 = *(_QWORD *)(v14 + 8 * v13);
        }
        v26 = 0;
        v18 = (char *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v18 >= *((_QWORD *)a2 + 2) || *v18 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v26))return 0;
        }
        else
        {
          v26 = *v18;
          *((_QWORD *)a2 + 1) = v18 + 1;
        }
        v19 = *((_DWORD *)a2 + 14);
        v20 = *((_DWORD *)a2 + 15);
        *((_DWORD *)a2 + 14) = v19 + 1;
        if (v19 >= v20)
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(a2);
        if (!CLMicroLocationProto::ChannelAndCount::MergePartialFromCodedStream((CLMicroLocationProto::ChannelAndCount *)v15, a2)|| !*((_BYTE *)a2 + 36))
        {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(a2);
        v21 = *((_DWORD *)a2 + 14);
        v22 = __OFSUB__(v21, 1);
        v23 = v21 - 1;
        if (v23 < 0 == v22)
          *((_DWORD *)a2 + 14) = v23;
        v11 = (_BYTE *)*((_QWORD *)a2 + 1);
        v24 = (_BYTE *)*((_QWORD *)a2 + 2);
        if (v11 >= v24 || *v11 != 18)
          break;
LABEL_25:
        *((_QWORD *)a2 + 1) = v11 + 1;
      }
      if (v11 == v24 && (*((_DWORD *)a2 + 11) || *((_DWORD *)a2 + 6) == *((_DWORD *)a2 + 10)))
      {
        *((_DWORD *)a2 + 8) = 0;
        result = 1;
        *((_BYTE *)a2 + 36) = 1;
        return result;
      }
    }
    v7 = TagFallback & 7;
LABEL_16:
    if (v7 == 4)
      return 1;
    if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(a2, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback) & 1) == 0)return 0;
  }
}

uint64_t CLMicroLocationProto::WifiHistogram::SerializeWithCachedSizes(uint64_t this, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  uint64_t v6;

  v5 = this;
  if ((*(_BYTE *)(this + 40) & 1) != 0)
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(unsigned int *)(this + 32), (uint64_t)a2, a4);
  if (*(int *)(v5 + 16) >= 1)
  {
    v6 = 0;
    do
      this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, *(_QWORD *)(*(_QWORD *)(v5 + 8) + 8 * v6++), a2, a4);
    while (v6 < *(int *)(v5 + 16));
  }
  return this;
}

uint64_t CLMicroLocationProto::WifiHistogram::ByteSize(CLMicroLocationProto::WifiHistogram *this)
{
  int v2;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v7;
  int v8;
  int v9;

  if ((*((_BYTE *)this + 40) & 1) != 0)
  {
    v3 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 8);
    if ((v3 & 0x80000000) != 0)
    {
      v2 = 11;
    }
    else if (v3 >= 0x80)
    {
      v2 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v3) + 1;
    }
    else
    {
      v2 = 2;
    }
  }
  else
  {
    v2 = 0;
  }
  v4 = *((_DWORD *)this + 4);
  v5 = (v4 + v2);
  if (v4 >= 1)
  {
    v6 = 0;
    do
    {
      v7 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)CLMicroLocationProto::ChannelAndCount::ByteSize(*(CLMicroLocationProto::ChannelAndCount **)(*((_QWORD *)this + 1) + 8 * v6));
      v8 = (int)v7;
      if (v7 >= 0x80)
        v9 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v7);
      else
        v9 = 1;
      v5 = (v8 + v5 + v9);
      ++v6;
    }
    while (v6 < *((int *)this + 4));
  }
  *((_DWORD *)this + 9) = v5;
  return v5;
}

void CLMicroLocationProto::WifiHistogram::CheckTypeAndMergeFrom(CLMicroLocationProto::WifiHistogram *this, const wireless_diagnostics::google::protobuf::MessageLite *lpsrc)
{
  uint64_t v4;
  uint64_t v5;

  CLMicroLocationProto::WifiHistogram::MergeFrom(this, lpsrc);
}

void CLMicroLocationProto::WifiHistogram::CopyFrom(CLMicroLocationProto::WifiHistogram *this, const CLMicroLocationProto::WifiHistogram *a2)
{
  if (a2 != this)
  {
    (*(void (**)(CLMicroLocationProto::WifiHistogram *))(*(_QWORD *)this + 32))(this);
    CLMicroLocationProto::WifiHistogram::MergeFrom(this, a2);
  }
}

uint64_t CLMicroLocationProto::WifiHistogram::IsInitialized(CLMicroLocationProto::WifiHistogram *this)
{
  return 1;
}

_QWORD *CLMicroLocationProto::WifiHistogram::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CLMicroLocationProto.WifiHistogram");
}

void CLMicroLocationProto::AnchorAppearanceConfiguration::MergeFrom(CLMicroLocationProto::AnchorAppearanceConfiguration *this, const CLMicroLocationProto::AnchorAppearanceConfiguration *a2)
{
  CLMicroLocationProto::AnchorAppearanceConfiguration *v3;
  int v4;
  unsigned int v5;
  CLMicroLocationProto::anchorAppearancesVector *v6;
  const CLMicroLocationProto::anchorAppearancesVector *v7;
  _BYTE v8[48];

  v3 = this;
  if (a2 == this)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v8);
  }
  LOBYTE(v4) = *((_BYTE *)a2 + 24);
  if ((_BYTE)v4)
  {
    if ((*((_BYTE *)a2 + 24) & 1) != 0)
    {
      v5 = *((_DWORD *)a2 + 4);
      if (v5 >= 3)
        CLMicroLocationProto::AnchorAppearanceConfiguration::MergeFrom();
      *((_DWORD *)v3 + 6) |= 1u;
      *((_DWORD *)v3 + 4) = v5;
      v4 = *((_DWORD *)a2 + 6);
    }
    if ((v4 & 2) != 0)
    {
      *((_DWORD *)v3 + 6) |= 2u;
      v6 = (CLMicroLocationProto::anchorAppearancesVector *)*((_QWORD *)v3 + 1);
      if (!v6)
      {
        this = (CLMicroLocationProto::AnchorAppearanceConfiguration *)operator new();
        v6 = this;
        *((_QWORD *)this + 1) = 0;
        *((_QWORD *)this + 2) = 0;
        *(_QWORD *)this = &off_2511D6F38;
        *((_DWORD *)this + 6) = 0;
        *((_QWORD *)this + 4) = 0;
        *((_QWORD *)v3 + 1) = this;
      }
      v7 = (const CLMicroLocationProto::anchorAppearancesVector *)*((_QWORD *)a2 + 1);
      if (!v7)
      {
        CLMicroLocationProto::protobuf_AddDesc_microlocation_2eproto(this);
        v7 = *(const CLMicroLocationProto::anchorAppearancesVector **)(CLMicroLocationProto::AnchorAppearanceConfiguration::default_instance_
                                                                     + 8);
      }
      CLMicroLocationProto::anchorAppearancesVector::MergeFrom(v6, v7);
    }
  }
}

void sub_241ADAED4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void CLMicroLocationProto::AnchorAppearanceConfiguration::~AnchorAppearanceConfiguration(CLMicroLocationProto::AnchorAppearanceConfiguration *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_2511D86A8;
  CLMicroLocationProto::protobuf_AddDesc_microlocation_2eproto(this);
  if ((CLMicroLocationProto::AnchorAppearanceConfiguration *)CLMicroLocationProto::AnchorAppearanceConfiguration::default_instance_ != this)
  {
    v2 = *((_QWORD *)this + 1);
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  }
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

{
  CLMicroLocationProto::AnchorAppearanceConfiguration::~AnchorAppearanceConfiguration(this);
  JUMPOUT(0x2426A04D4);
}

uint64_t CLMicroLocationProto::AnchorAppearanceConfiguration::default_instance(CLMicroLocationProto::AnchorAppearanceConfiguration *this)
{
  CLMicroLocationProto::protobuf_AddDesc_microlocation_2eproto(this);
  return CLMicroLocationProto::AnchorAppearanceConfiguration::default_instance_;
}

double CLMicroLocationProto::AnchorAppearanceConfiguration::New(CLMicroLocationProto::AnchorAppearanceConfiguration *this)
{
  uint64_t v1;
  double result;

  v1 = operator new();
  *(_QWORD *)&result = 1;
  *(_QWORD *)(v1 + 16) = 1;
  *(_QWORD *)v1 = &off_2511D86A8;
  *(_QWORD *)(v1 + 8) = 0;
  *(_DWORD *)(v1 + 24) = 0;
  return result;
}

uint64_t CLMicroLocationProto::AnchorAppearanceConfiguration::Clear(uint64_t this)
{
  uint64_t v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = this;
  v2 = *(_BYTE *)(this + 24);
  if (v2)
  {
    *(_DWORD *)(this + 16) = 1;
    if ((v2 & 2) != 0)
    {
      v3 = *(_QWORD *)(this + 8);
      if (v3)
      {
        if (*(int *)(v3 + 16) >= 1)
        {
          v4 = 0;
          do
          {
            v5 = *(_QWORD *)(*(_QWORD *)(v3 + 8) + 8 * v4);
            this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 32))(v5);
            ++v4;
          }
          while (v4 < *(int *)(v3 + 16));
        }
        *(_DWORD *)(v3 + 16) = 0;
        *(_DWORD *)(v3 + 36) = 0;
      }
    }
  }
  *(_DWORD *)(v1 + 24) = 0;
  return this;
}

uint64_t CLMicroLocationProto::AnchorAppearanceConfiguration::MergePartialFromCodedStream(CLMicroLocationProto::AnchorAppearanceConfiguration *this, wireless_diagnostics::google::protobuf::io::CodedInputStream *a2)
{
  char *v4;
  uint64_t TagFallback;
  int v6;
  char *v7;
  unsigned int v8;
  uint64_t result;
  _BYTE *v10;
  uint64_t v11;
  char *v12;
  int v13;
  int v14;
  int v15;
  BOOL v16;
  int v17;
  unsigned int v18;
  unsigned int v19;

  while (1)
  {
    while (1)
    {
      while (1)
      {
        v4 = (char *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v4 >= *((_QWORD *)a2 + 2) || *v4 < 0)
        {
          TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(a2);
          *((_DWORD *)a2 + 8) = TagFallback;
          if (!(_DWORD)TagFallback)
            return 1;
        }
        else
        {
          TagFallback = *v4;
          *((_DWORD *)a2 + 8) = TagFallback;
          *((_QWORD *)a2 + 1) = v4 + 1;
          if (!(_DWORD)TagFallback)
            return 1;
        }
        if (TagFallback >> 3 != 1)
          break;
        v6 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_15;
        v18 = 0;
        v7 = (char *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v7 >= *((_QWORD *)a2 + 2) || *v7 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v18);
          if (!(_DWORD)result)
            return result;
          v8 = v18;
        }
        else
        {
          v8 = *v7;
          *((_QWORD *)a2 + 1) = v7 + 1;
        }
        if (v8 <= 2)
        {
          *((_DWORD *)this + 6) |= 1u;
          *((_DWORD *)this + 4) = v8;
        }
        v10 = (_BYTE *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v10 < *((_QWORD *)a2 + 2) && *v10 == 18)
        {
          *((_QWORD *)a2 + 1) = v10 + 1;
          goto LABEL_25;
        }
      }
      if (TagFallback >> 3 != 2)
      {
        v6 = TagFallback & 7;
        goto LABEL_15;
      }
      v6 = TagFallback & 7;
      if (v6 == 2)
        break;
LABEL_15:
      if (v6 == 4)
        return 1;
      if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(a2, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback) & 1) == 0)return 0;
    }
LABEL_25:
    *((_DWORD *)this + 6) |= 2u;
    v11 = *((_QWORD *)this + 1);
    if (!v11)
    {
      v11 = operator new();
      *(_QWORD *)(v11 + 8) = 0;
      *(_QWORD *)(v11 + 16) = 0;
      *(_QWORD *)v11 = &off_2511D6F38;
      *(_DWORD *)(v11 + 24) = 0;
      *(_QWORD *)(v11 + 32) = 0;
      *((_QWORD *)this + 1) = v11;
    }
    v19 = 0;
    v12 = (char *)*((_QWORD *)a2 + 1);
    if ((unint64_t)v12 >= *((_QWORD *)a2 + 2) || *v12 < 0)
    {
      if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v19))
        return 0;
    }
    else
    {
      v19 = *v12;
      *((_QWORD *)a2 + 1) = v12 + 1;
    }
    v13 = *((_DWORD *)a2 + 14);
    v14 = *((_DWORD *)a2 + 15);
    *((_DWORD *)a2 + 14) = v13 + 1;
    if (v13 >= v14)
      return 0;
    wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(a2);
    if (!CLMicroLocationProto::anchorAppearancesVector::MergePartialFromCodedStream((CLMicroLocationProto::anchorAppearancesVector *)v11, a2)|| !*((_BYTE *)a2 + 36))
    {
      return 0;
    }
    wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(a2);
    v15 = *((_DWORD *)a2 + 14);
    v16 = __OFSUB__(v15, 1);
    v17 = v15 - 1;
    if (v17 < 0 == v16)
      *((_DWORD *)a2 + 14) = v17;
    if (*((_QWORD *)a2 + 1) == *((_QWORD *)a2 + 2)
      && (*((_DWORD *)a2 + 11) || *((_DWORD *)a2 + 6) == *((_DWORD *)a2 + 10)))
    {
      *((_DWORD *)a2 + 8) = 0;
      result = 1;
      *((_BYTE *)a2 + 36) = 1;
      return result;
    }
  }
}

unsigned int *CLMicroLocationProto::AnchorAppearanceConfiguration::SerializeWithCachedSizes(unsigned int *this, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  unsigned int *v5;
  unsigned int v6;
  uint64_t v7;

  v5 = this;
  v6 = this[6];
  if ((v6 & 1) != 0)
  {
    this = (unsigned int *)wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, this[4], (uint64_t)a2, a4);
    if ((v5[6] & 2) == 0)
      return this;
  }
  else if ((v6 & 2) == 0)
  {
    return this;
  }
  v7 = *((_QWORD *)v5 + 1);
  if (!v7)
  {
    CLMicroLocationProto::protobuf_AddDesc_microlocation_2eproto((CLMicroLocationProto *)this);
    v7 = *(_QWORD *)(CLMicroLocationProto::AnchorAppearanceConfiguration::default_instance_ + 8);
  }
  return (unsigned int *)wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, v7, a2, a4);
}

uint64_t CLMicroLocationProto::AnchorAppearanceConfiguration::ByteSize(CLMicroLocationProto::AnchorAppearanceConfiguration *this)
{
  char v2;
  uint64_t v3;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v4;
  CLMicroLocationProto::anchorAppearancesVector *v5;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v6;
  int v7;
  int v8;

  v2 = *((_BYTE *)this + 24);
  if (v2)
  {
    if ((*((_BYTE *)this + 24) & 1) != 0)
    {
      v4 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 4);
      if ((v4 & 0x80000000) != 0)
      {
        v3 = 11;
        if ((v2 & 2) == 0)
          goto LABEL_19;
      }
      else if (v4 >= 0x80)
      {
        v3 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v4) + 1;
        if ((*((_DWORD *)this + 6) & 2) == 0)
          goto LABEL_19;
      }
      else
      {
        v3 = 2;
        if ((v2 & 2) == 0)
          goto LABEL_19;
      }
    }
    else
    {
      v3 = 0;
      if ((*((_BYTE *)this + 24) & 2) == 0)
        goto LABEL_19;
    }
    v5 = (CLMicroLocationProto::anchorAppearancesVector *)*((_QWORD *)this + 1);
    if (!v5)
    {
      CLMicroLocationProto::protobuf_AddDesc_microlocation_2eproto(0);
      v5 = *(CLMicroLocationProto::anchorAppearancesVector **)(CLMicroLocationProto::AnchorAppearanceConfiguration::default_instance_
                                                             + 8);
    }
    v6 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)CLMicroLocationProto::anchorAppearancesVector::ByteSize(v5);
    v7 = (int)v6;
    if (v6 >= 0x80)
      v8 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v6);
    else
      v8 = 1;
    v3 = (v3 + v7 + v8 + 1);
  }
  else
  {
    v3 = 0;
  }
LABEL_19:
  *((_DWORD *)this + 5) = v3;
  return v3;
}

void CLMicroLocationProto::AnchorAppearanceConfiguration::CheckTypeAndMergeFrom(CLMicroLocationProto::AnchorAppearanceConfiguration *this, const wireless_diagnostics::google::protobuf::MessageLite *lpsrc)
{
  uint64_t v4;
  uint64_t v5;

  CLMicroLocationProto::AnchorAppearanceConfiguration::MergeFrom(this, lpsrc);
}

void CLMicroLocationProto::AnchorAppearanceConfiguration::CopyFrom(CLMicroLocationProto::AnchorAppearanceConfiguration *this, const CLMicroLocationProto::AnchorAppearanceConfiguration *a2)
{
  if (a2 != this)
  {
    (*(void (**)(CLMicroLocationProto::AnchorAppearanceConfiguration *))(*(_QWORD *)this + 32))(this);
    CLMicroLocationProto::AnchorAppearanceConfiguration::MergeFrom(this, a2);
  }
}

uint64_t CLMicroLocationProto::AnchorAppearanceConfiguration::IsInitialized(CLMicroLocationProto::AnchorAppearanceConfiguration *this)
{
  return 1;
}

_QWORD *CLMicroLocationProto::AnchorAppearanceConfiguration::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CLMicroLocationProto.AnchorAppearanceConfiguration");
}

void CLMicroLocationProto::AnchorValueStatisticsConfiguration::MergeFrom(CLMicroLocationProto::AnchorValueStatisticsConfiguration *this, const CLMicroLocationProto::AnchorValueStatisticsConfiguration *a2)
{
  CLMicroLocationProto::AnchorValueStatisticsConfiguration *v3;
  int v4;
  unsigned int v5;
  CLMicroLocationProto::ClusterAnchorValueStatisticsVector *v6;
  const CLMicroLocationProto::ClusterAnchorValueStatisticsVector *v7;
  const std::string *v8;
  std::string *v9;
  _BYTE v10[48];

  v3 = this;
  if (a2 == this)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v10);
  }
  LOBYTE(v4) = *((_BYTE *)a2 + 32);
  if ((_BYTE)v4)
  {
    if ((*((_BYTE *)a2 + 32) & 1) != 0)
    {
      v5 = *((_DWORD *)a2 + 6);
      if (v5 >= 3)
        CLMicroLocationProto::AnchorValueStatisticsConfiguration::MergeFrom();
      *((_DWORD *)v3 + 8) |= 1u;
      *((_DWORD *)v3 + 6) = v5;
      v4 = *((_DWORD *)a2 + 8);
    }
    if ((v4 & 2) != 0)
    {
      *((_DWORD *)v3 + 8) |= 2u;
      v6 = (CLMicroLocationProto::ClusterAnchorValueStatisticsVector *)*((_QWORD *)v3 + 1);
      if (!v6)
      {
        this = (CLMicroLocationProto::AnchorValueStatisticsConfiguration *)operator new();
        v6 = this;
        *((_QWORD *)this + 1) = 0;
        *((_QWORD *)this + 2) = 0;
        *(_QWORD *)this = &off_2511D70A0;
        *((_DWORD *)this + 6) = 0;
        *((_QWORD *)this + 4) = 0;
        *((_QWORD *)v3 + 1) = this;
      }
      v7 = (const CLMicroLocationProto::ClusterAnchorValueStatisticsVector *)*((_QWORD *)a2 + 1);
      if (!v7)
      {
        CLMicroLocationProto::protobuf_AddDesc_microlocation_2eproto(this);
        v7 = *(const CLMicroLocationProto::ClusterAnchorValueStatisticsVector **)(CLMicroLocationProto::AnchorValueStatisticsConfiguration::default_instance_
                                                                                + 8);
      }
      CLMicroLocationProto::ClusterAnchorValueStatisticsVector::MergeFrom(v6, v7);
      v4 = *((_DWORD *)a2 + 8);
    }
    if ((v4 & 4) != 0)
    {
      v8 = (const std::string *)*((_QWORD *)a2 + 2);
      *((_DWORD *)v3 + 8) |= 4u;
      v9 = (std::string *)*((_QWORD *)v3 + 2);
      if (v9 == (std::string *)MEMORY[0x24BEDD958])
      {
        v9 = (std::string *)operator new();
        v9->__r_.__value_.__l.__size_ = 0;
        v9->__r_.__value_.__r.__words[2] = 0;
        v9->__r_.__value_.__r.__words[0] = 0;
        *((_QWORD *)v3 + 2) = v9;
      }
      std::string::operator=(v9, v8);
    }
  }
}

void sub_241ADB5E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void CLMicroLocationProto::AnchorValueStatisticsConfiguration::~AnchorValueStatisticsConfiguration(CLMicroLocationProto::AnchorValueStatisticsConfiguration *this)
{
  *(_QWORD *)this = &off_2511D8720;
  CLMicroLocationProto::AnchorValueStatisticsConfiguration::SharedDtor(this);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

{
  CLMicroLocationProto::AnchorValueStatisticsConfiguration::~AnchorValueStatisticsConfiguration(this);
  JUMPOUT(0x2426A04D4);
}

void CLMicroLocationProto::AnchorValueStatisticsConfiguration::SharedDtor(CLMicroLocationProto::AnchorValueStatisticsConfiguration *this)
{
  CLMicroLocationProto::AnchorValueStatisticsConfiguration *v1;
  uint64_t v2;
  uint64_t v4;

  v1 = this;
  v2 = *((_QWORD *)this + 2);
  if (v2 != MEMORY[0x24BEDD958] && v2 != 0)
  {
    if (*(char *)(v2 + 23) < 0)
      operator delete(*(void **)v2);
    this = (CLMicroLocationProto::AnchorValueStatisticsConfiguration *)MEMORY[0x2426A04D4](v2, 0x1012C40EC159624);
  }
  CLMicroLocationProto::protobuf_AddDesc_microlocation_2eproto(this);
  if ((CLMicroLocationProto::AnchorValueStatisticsConfiguration *)CLMicroLocationProto::AnchorValueStatisticsConfiguration::default_instance_ != v1)
  {
    v4 = *((_QWORD *)v1 + 1);
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  }
}

uint64_t CLMicroLocationProto::AnchorValueStatisticsConfiguration::default_instance(CLMicroLocationProto::AnchorValueStatisticsConfiguration *this)
{
  CLMicroLocationProto::protobuf_AddDesc_microlocation_2eproto(this);
  return CLMicroLocationProto::AnchorValueStatisticsConfiguration::default_instance_;
}

double CLMicroLocationProto::AnchorValueStatisticsConfiguration::New(CLMicroLocationProto::AnchorValueStatisticsConfiguration *this)
{
  uint64_t v1;
  double result;

  v1 = operator new();
  *(_QWORD *)&result = 2;
  *(_QWORD *)(v1 + 24) = 2;
  *(_QWORD *)v1 = &off_2511D8720;
  *(_QWORD *)(v1 + 8) = 0;
  *(_QWORD *)(v1 + 16) = MEMORY[0x24BEDD958];
  *(_DWORD *)(v1 + 32) = 0;
  return result;
}

uint64_t CLMicroLocationProto::AnchorValueStatisticsConfiguration::Clear(uint64_t this)
{
  uint64_t v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = this;
  LOBYTE(v2) = *(_BYTE *)(this + 32);
  if ((_BYTE)v2)
  {
    *(_DWORD *)(this + 24) = 2;
    if ((v2 & 2) != 0)
    {
      v3 = *(_QWORD *)(this + 8);
      if (v3)
      {
        if (*(int *)(v3 + 16) >= 1)
        {
          v4 = 0;
          do
          {
            v5 = *(_QWORD *)(*(_QWORD *)(v3 + 8) + 8 * v4);
            this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 32))(v5);
            ++v4;
          }
          while (v4 < *(int *)(v3 + 16));
        }
        *(_DWORD *)(v3 + 16) = 0;
        *(_DWORD *)(v3 + 36) = 0;
        v2 = *(_DWORD *)(v1 + 32);
      }
    }
    if ((v2 & 4) != 0)
    {
      v6 = *(_QWORD *)(v1 + 16);
      if (v6 != MEMORY[0x24BEDD958])
      {
        if (*(char *)(v6 + 23) < 0)
        {
          **(_BYTE **)v6 = 0;
          *(_QWORD *)(v6 + 8) = 0;
        }
        else
        {
          *(_BYTE *)v6 = 0;
          *(_BYTE *)(v6 + 23) = 0;
        }
      }
    }
  }
  *(_DWORD *)(v1 + 32) = 0;
  return this;
}

uint64_t CLMicroLocationProto::AnchorValueStatisticsConfiguration::MergePartialFromCodedStream(CLMicroLocationProto::AnchorValueStatisticsConfiguration *this, wireless_diagnostics::google::protobuf::io::CodedInputStream *a2)
{
  uint64_t v4;
  char *v5;
  uint64_t TagFallback;
  unsigned int v7;
  int v8;
  char *v9;
  unsigned int v10;
  uint64_t result;
  _BYTE *v12;
  uint64_t v13;
  char *v14;
  int v15;
  int v16;
  int v17;
  BOOL v18;
  int v19;
  _BYTE *v20;
  _QWORD *v21;
  unsigned int v22;
  unsigned int v23;

  v4 = MEMORY[0x24BEDD958];
  while (1)
  {
    while (1)
    {
      while (1)
      {
        v5 = (char *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v5 >= *((_QWORD *)a2 + 2) || *v5 < 0)
        {
          TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(a2);
          *((_DWORD *)a2 + 8) = TagFallback;
          if (!(_DWORD)TagFallback)
            return 1;
        }
        else
        {
          TagFallback = *v5;
          *((_DWORD *)a2 + 8) = TagFallback;
          *((_QWORD *)a2 + 1) = v5 + 1;
          if (!(_DWORD)TagFallback)
            return 1;
        }
        v7 = TagFallback >> 3;
        if (TagFallback >> 3 != 1)
          break;
        v8 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_19;
        v22 = 0;
        v9 = (char *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v9 >= *((_QWORD *)a2 + 2) || *v9 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v22);
          if (!(_DWORD)result)
            return result;
          v10 = v22;
        }
        else
        {
          v10 = *v9;
          *((_QWORD *)a2 + 1) = v9 + 1;
        }
        if (v10 <= 2)
        {
          *((_DWORD *)this + 8) |= 1u;
          *((_DWORD *)this + 6) = v10;
        }
        v12 = (_BYTE *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v12 < *((_QWORD *)a2 + 2) && *v12 == 18)
        {
          *((_QWORD *)a2 + 1) = v12 + 1;
          goto LABEL_29;
        }
      }
      if (v7 == 2)
        break;
      if (v7 == 3)
      {
        v8 = TagFallback & 7;
        if (v8 == 2)
          goto LABEL_43;
      }
      else
      {
        v8 = TagFallback & 7;
      }
LABEL_19:
      if (v8 == 4)
        return 1;
      if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(a2, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback) & 1) == 0)return 0;
    }
    v8 = TagFallback & 7;
    if (v8 != 2)
      goto LABEL_19;
LABEL_29:
    *((_DWORD *)this + 8) |= 2u;
    v13 = *((_QWORD *)this + 1);
    if (!v13)
    {
      v13 = operator new();
      *(_QWORD *)(v13 + 8) = 0;
      *(_QWORD *)(v13 + 16) = 0;
      *(_QWORD *)v13 = &off_2511D70A0;
      *(_DWORD *)(v13 + 24) = 0;
      *(_QWORD *)(v13 + 32) = 0;
      *((_QWORD *)this + 1) = v13;
    }
    v23 = 0;
    v14 = (char *)*((_QWORD *)a2 + 1);
    if ((unint64_t)v14 >= *((_QWORD *)a2 + 2) || *v14 < 0)
    {
      if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v23))
        return 0;
    }
    else
    {
      v23 = *v14;
      *((_QWORD *)a2 + 1) = v14 + 1;
    }
    v15 = *((_DWORD *)a2 + 14);
    v16 = *((_DWORD *)a2 + 15);
    *((_DWORD *)a2 + 14) = v15 + 1;
    if (v15 >= v16)
      return 0;
    wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(a2);
    if (!CLMicroLocationProto::ClusterAnchorValueStatisticsVector::MergePartialFromCodedStream((CLMicroLocationProto::ClusterAnchorValueStatisticsVector *)v13, a2)|| !*((_BYTE *)a2 + 36))
    {
      return 0;
    }
    wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(a2);
    v17 = *((_DWORD *)a2 + 14);
    v18 = __OFSUB__(v17, 1);
    v19 = v17 - 1;
    if (v19 < 0 == v18)
      *((_DWORD *)a2 + 14) = v19;
    v20 = (_BYTE *)*((_QWORD *)a2 + 1);
    if ((unint64_t)v20 < *((_QWORD *)a2 + 2) && *v20 == 26)
    {
      *((_QWORD *)a2 + 1) = v20 + 1;
LABEL_43:
      *((_DWORD *)this + 8) |= 4u;
      if (*((_QWORD *)this + 2) == v4)
      {
        v21 = (_QWORD *)operator new();
        v21[1] = 0;
        v21[2] = 0;
        *v21 = 0;
        *((_QWORD *)this + 2) = v21;
      }
      result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadBytes();
      if (!(_DWORD)result)
        return result;
      if (*((_QWORD *)a2 + 1) == *((_QWORD *)a2 + 2)
        && (*((_DWORD *)a2 + 11) || *((_DWORD *)a2 + 6) == *((_DWORD *)a2 + 10)))
      {
        *((_DWORD *)a2 + 8) = 0;
        result = 1;
        *((_BYTE *)a2 + 36) = 1;
        return result;
      }
    }
  }
}

unsigned int *CLMicroLocationProto::AnchorValueStatisticsConfiguration::SerializeWithCachedSizes(unsigned int *this, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  unsigned int *v5;
  unsigned int v6;
  uint64_t v7;

  v5 = this;
  v6 = this[8];
  if ((v6 & 1) != 0)
  {
    this = (unsigned int *)wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, this[6], (uint64_t)a2, a4);
    v6 = v5[8];
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0)
        return this;
      return (unsigned int *)wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBytes();
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  v7 = *((_QWORD *)v5 + 1);
  if (!v7)
  {
    CLMicroLocationProto::protobuf_AddDesc_microlocation_2eproto((CLMicroLocationProto *)this);
    v7 = *(_QWORD *)(CLMicroLocationProto::AnchorValueStatisticsConfiguration::default_instance_ + 8);
  }
  this = (unsigned int *)wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, v7, a2, a4);
  if ((v5[8] & 4) != 0)
    return (unsigned int *)wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBytes();
  return this;
}

uint64_t CLMicroLocationProto::AnchorValueStatisticsConfiguration::ByteSize(CLMicroLocationProto::AnchorValueStatisticsConfiguration *this)
{
  int v2;
  uint64_t v3;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v4;
  CLMicroLocationProto::ClusterAnchorValueStatisticsVector *v5;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v6;
  int v7;
  int v8;
  uint64_t v9;
  int v10;
  char v11;
  uint64_t v12;
  unint64_t v13;
  int v14;

  LOBYTE(v2) = *((_BYTE *)this + 32);
  if (!(_BYTE)v2)
  {
    v3 = 0;
    goto LABEL_29;
  }
  if ((*((_BYTE *)this + 32) & 1) == 0)
  {
    v3 = 0;
    if ((*((_BYTE *)this + 32) & 2) == 0)
      goto LABEL_19;
LABEL_13:
    v5 = (CLMicroLocationProto::ClusterAnchorValueStatisticsVector *)*((_QWORD *)this + 1);
    if (!v5)
    {
      CLMicroLocationProto::protobuf_AddDesc_microlocation_2eproto(0);
      v5 = *(CLMicroLocationProto::ClusterAnchorValueStatisticsVector **)(CLMicroLocationProto::AnchorValueStatisticsConfiguration::default_instance_
                                                                        + 8);
    }
    v6 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)CLMicroLocationProto::ClusterAnchorValueStatisticsVector::ByteSize(v5);
    v7 = (int)v6;
    if (v6 >= 0x80)
      v8 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v6);
    else
      v8 = 1;
    v3 = (v3 + v7 + v8 + 1);
    v2 = *((_DWORD *)this + 8);
    goto LABEL_19;
  }
  v4 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 6);
  if ((v4 & 0x80000000) != 0)
  {
    v3 = 11;
    if ((v2 & 2) != 0)
      goto LABEL_13;
  }
  else
  {
    if (v4 >= 0x80)
    {
      v3 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v4) + 1;
      v2 = *((_DWORD *)this + 8);
      if ((v2 & 2) == 0)
        goto LABEL_19;
      goto LABEL_13;
    }
    v3 = 2;
    if ((v2 & 2) != 0)
      goto LABEL_13;
  }
LABEL_19:
  if ((v2 & 4) != 0)
  {
    v9 = *((_QWORD *)this + 2);
    v10 = *(unsigned __int8 *)(v9 + 23);
    v11 = v10;
    v12 = *(_QWORD *)(v9 + 8);
    if ((v10 & 0x80u) == 0)
      v13 = *(unsigned __int8 *)(v9 + 23);
    else
      v13 = v12;
    if (v13 >= 0x80)
    {
      v14 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v13);
      v10 = *(unsigned __int8 *)(v9 + 23);
      v12 = *(_QWORD *)(v9 + 8);
      v11 = *(_BYTE *)(v9 + 23);
    }
    else
    {
      v14 = 1;
    }
    if (v11 < 0)
      v10 = v12;
    v3 = (v3 + v14 + v10 + 1);
  }
LABEL_29:
  *((_DWORD *)this + 7) = v3;
  return v3;
}

