uint64_t Attribute.init<A>(body:value:flags:update:)(void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t *a7)
{
  uint64_t CurrentGraphContext;
  uint64_t v11;
  unsigned int v12;
  uint64_t result;

  CurrentGraphContext = AGSubgraphGetCurrentGraphContext();
  if (CurrentGraphContext)
  {
    v11 = MEMORY[0x1E0C80A78](CurrentGraphContext);
    v12 = AGGraphInternAttributeType(v11, a7, sub_1AB932CB8);
    return AGGraphCreateAttribute(v12, a1, a2);
  }
  else
  {
    sub_1AB962150();
    sub_1AB962108();
    sub_1AB96224C();
    sub_1AB962108();
    swift_bridgeObjectRelease();
    result = sub_1AB96215C();
    __break(1u);
  }
  return result;
}

uint64_t type metadata accessor for Attribute(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for Attribute);
}

uint64_t AGGraphCreateOffsetAttribute2(uint64_t a1, const char *a2, unint64_t a3)
{
}

uint64_t type metadata accessor for PointerOffset(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for PointerOffset);
}

uint64_t dispatch thunk of StatefulRule.updateValue()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t dispatch thunk of Rule.value.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t sub_1AB92EC68()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t __swift_instantiateGenericMetadata(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD v6[3];

  v6[0] = a2;
  v6[1] = a3;
  v6[2] = a4;
  return MEMORY[0x1AF431B74](a1, v6, a5);
}

uint64_t AGGraphContextGetGraph(uint64_t a1)
{
  return a1 - 16;
}

uint64_t AGGraphSetUpdate(uint64_t result)
{
  uint64_t v1;

  v1 = AG::Graph::_current_update_key;
  *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v1) = result;
  return result;
}

unint64_t AGCreateWeakAttribute(unsigned int a1)
{
  unint64_t v1;

  if (a1 < 4)
    v1 = 0;
  else
    v1 = (unint64_t)(*(_DWORD *)(*(_QWORD *)(AG::data::_shared_table_bytes + (a1 & 0xFFFFFE00)) + 24) & 0x7FFFFFFF) << 32;
  return v1 | a1;
}

uint64_t AGGraphGetCurrentAttribute()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v0 = AG::Graph::_current_update_key;
  v1 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v0);
  result = 2;
  if ((v1 & 1) == 0)
  {
    v3 = v1 & 0xFFFFFFFFFFFFFFFELL;
    if (v3)
    {
      v4 = v3 + 32;
      v6 = *(_QWORD *)(v3 + 96);
      v5 = *(_QWORD *)(v3 + 104);
      if (v6)
        v4 = v6;
      return *(unsigned int *)(v4 + 8 * v5 - 8);
    }
  }
  return result;
}

void sub_1AB92ED3C()
{
  JUMPOUT(0x1AF4312ECLL);
}

uint64_t AGGraphClearUpdate()
{
  uint64_t v0;
  unint64_t StatusReg;
  uint64_t result;
  BOOL v3;

  v0 = AG::Graph::_current_update_key;
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  result = *(_QWORD *)(StatusReg + 8 * v0);
  if (result)
    v3 = (*(_QWORD *)(StatusReg + 8 * v0) & 1) == 0;
  else
    v3 = 0;
  if (v3)
    *(_QWORD *)(StatusReg + 8 * v0) = result | 1;
  return result;
}

uint64_t sub_1AB92ED78()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t AGSubgraphGetCurrent()
{
  uint64_t v0;
  uint64_t v1;

  v0 = AG::Subgraph::_current_subgraph_key;
  v1 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v0);
  if (v1)
    return *(_QWORD *)(v1 + 32);
  else
    return 0;
}

uint64_t type metadata accessor for External(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for External);
}

uint64_t `anonymous namespace'::create_offset_attribute(uint64_t a1, const char *a2, unint64_t a3, char a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  unint64_t v11;
  char v12;
  int v13;

  v7 = a1;
  if (a2)
  {
    if ((unint64_t)a2 >= 0x3FFFFFFF)
      AG::precondition_failure((AG *)"invalid offset: %u, %lu", a2, a1, a2);
  }
  else if (a4)
  {
    v13 = a1;
    if ((a1 & 3) == 1)
    {
      v11 = AG::AttributeID::size((AG::AttributeID *)&v13);
      if (v12)
      {
        if (v11 == a3)
          return v7;
      }
    }
  }
  v8 = AG::Subgraph::_current_subgraph_key;
  v9 = *(uint64_t **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v8);
  if (!v9)
    AG::precondition_failure((AG *)"no subgraph active while adding attribute", 0);
  return AG::Graph::add_indirect_attribute(v9[5], (AG::data::zone *)v9, v7, (uint64_t)a2, a3, a4, 0) | 1;
}

uint64_t AG::Graph::add_indirect_attribute(uint64_t a1, AG::data::zone *this, unsigned int a3, uint64_t a4, unint64_t a5, char a6, char a7)
{
  const char *v13;
  unint64_t v14;
  unint64_t v15;
  const char *v16;
  uint64_t v17;
  AG::data::zone *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  int v28;
  __int16 v30;
  _BOOL4 v31;
  AG::data::zone *v32;
  uint64_t v33;
  unsigned int v34;
  int v35;
  __int16 v37;
  unsigned int v39;

  v39 = a3;
  if (*((_QWORD *)this + 5) != *(_QWORD *)(*(_QWORD *)(AG::data::_shared_table_bytes + (a3 & 0xFFFFFE00)) + 40))
    AG::precondition_failure((AG *)"attribute references can't cross graph namespaces", (const char *)this);
  if ((a3 & 3) != 0)
    a3 = AG::AttributeID::resolve_slow((AG::AttributeID *)&v39, (const char *)4);
  else
    v13 = 0;
  v39 = a3;
  v14 = (unint64_t)&v13[a4];
  if (__CFADD__(v13, a4) || v14 >= 0x3FFFFFFF)
    AG::precondition_failure((AG *)"indirect attribute overflowed: %lu + %lu", v13, v13, a4);
  if (a6)
  {
    v15 = AG::AttributeID::size((AG::AttributeID *)&v39);
    if ((_BYTE)v16)
    {
      if (v14 + a5 > v15)
        AG::precondition_failure((AG *)"invalid size for indirect attribute: %d vs %u", v16, a5 - v14, v15);
    }
  }
  v17 = AG::data::_shared_table_bytes;
  v18 = *(AG::data::zone **)(AG::data::_shared_table_bytes + (v39 & 0xFFFFFE00));
  v19 = *((_QWORD *)v18 + 6);
  v20 = *((_QWORD *)this + 6);
  if ((a7 & 1) != 0)
  {
    v21 = *((unsigned int *)this + 4);
    if ((_DWORD)v21
      && (v22 = (*(_DWORD *)(AG::data::_shared_table_bytes + v21 + 16) + 3) & 0xFFFFFFFC,
          v22 + 40 <= *(_DWORD *)(AG::data::_shared_table_bytes + v21 + 12)))
    {
      *(_DWORD *)(AG::data::_shared_table_bytes + v21 + 16) = v22 + 40;
      v23 = v22 + v21;
    }
    else
    {
      v23 = AG::data::zone::alloc_slow(this, 0x28u, 3);
      v17 = AG::data::_shared_table_bytes;
    }
    v33 = v17 + v23;
    v34 = v39;
    *(_DWORD *)v33 = v39;
    if (v34 < 4)
      v35 = 0;
    else
      v35 = *(_DWORD *)(*(_QWORD *)(v17 + (v34 & 0xFFFFFE00)) + 24) & 0x7FFFFFFF;
    *(_DWORD *)(v33 + 4) = v35;
    *(_DWORD *)(v33 + 8) = (2 * (v19 != v20)) | (4 * v14) | 1;
    if (a5 >= 0xFFFF || a6 == 0)
      v37 = -1;
    else
      v37 = a5;
    *(_WORD *)(v33 + 12) = v37;
    *(_QWORD *)(v33 + 16) = 0;
    *(_DWORD *)(v33 + 24) = 0;
    *(_QWORD *)(v33 + 28) = *(_QWORD *)v33;
    *(_DWORD *)(v33 + 36) = v14;
    AG::Graph::add_input_dependencies(a1, v23 | 1, v39);
    v32 = this;
    v24 = v23;
    v31 = 1;
  }
  else
  {
    v23 = AG::data::zone::alloc_bytes_recycle(this, 0x10u, 3);
    v24 = v23;
    v25 = AG::data::_shared_table_bytes;
    v26 = AG::data::_shared_table_bytes + v23;
    v27 = v39;
    *(_DWORD *)v26 = v39;
    if (v27 < 4)
      v28 = 0;
    else
      v28 = *(_DWORD *)(*(_QWORD *)(v25 + (v27 & 0xFFFFFE00)) + 24) & 0x7FFFFFFF;
    *(_DWORD *)(v26 + 4) = v28;
    *(_DWORD *)(v26 + 8) = (2 * (v19 != v20)) | (4 * v14);
    if (a5 >= 0xFFFF || a6 == 0)
      v30 = -1;
    else
      v30 = a5;
    *(_WORD *)(v26 + 12) = v30;
    v31 = v18 != this;
    v32 = this;
  }
  AG::Subgraph::add_indirect((uint64_t)v32, v24, v31);
  return v23;
}

unint64_t AG::AttributeID::size(AG::AttributeID *this)
{
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  int v4;

  v1 = *(unsigned int *)this;
  if ((*(_DWORD *)this & 3) == 1)
  {
    v4 = *(unsigned __int16 *)(AG::data::_shared_table_bytes + (v1 & 0xFFFFFFFC) + 12);
    if (v4 == 0xFFFF)
      LODWORD(v2) = 0;
    else
      LODWORD(v2) = v4;
    v3 = v2 >> 8;
  }
  else if ((v1 & 3) != 0)
  {
    LOBYTE(v2) = 0;
    v3 = 0;
  }
  else
  {
    v2 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(AG::data::_shared_table_bytes
                                                                                           + (v1 & 0xFFFFFE00))
                                                                               + 40)
                                                                   + 128)
                                                       + (((unint64_t)*(unsigned int *)(AG::data::_shared_table_bytes
                                                                                             + v1) >> 5) & 0x7FFFFF8))
                                           + 8)
                               - 8)
                   + 64);
    v3 = v2 >> 8;
  }
  return v2 | (v3 << 8);
}

char *AGGraphGetValue(unint64_t a1, const char *a2, AG::swift::metadata *a3, uint64_t a4, uint64_t a5)
{
  AG::swift::metadata *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  __n128 *v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  _BYTE *v20;
  uint64_t v22;
  __n128 *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  unint64_t v34;
  char v35;
  char v36;
  AG::swift::metadata *v38;
  int v39;
  int v40;
  __n128 *v41;
  __n128 *v42;
  char v43;
  char v44;
  int v45;

  v5 = a3;
  if ((a2 & 4) == 0)
  {
    v6 = AG::Graph::_current_update_key;
    v7 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v6);
    if ((v7 & 1) == 0)
    {
      v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
      if ((v7 & 0xFFFFFFFFFFFFFFFELL) != 0)
      {
        v9 = (char)a2;
        v44 = 0;
        v10 = *(__n128 **)v8;
        v11 = v8 + 32;
        v13 = *(_QWORD *)(v8 + 96);
        v12 = *(_QWORD *)(v8 + 104);
        if (v13)
          v11 = v13;
        v14 = *(unsigned int *)(v11 + 8 * v12 - 8);
        v45 = a1;
        v15 = v9 & 3;
        v16 = AG::data::_shared_table_bytes + v14;
        v17 = *(unsigned int *)(AG::data::_shared_table_bytes + v14 + 12);
        if (v17 > 0x11F)
        {
          v33 = a1;
          v39 = v14;
          v41 = v10;
          v35 = v9;
          v31 = AG::data::_shared_table_bytes + v14;
          a1 = AG::Graph::index_of_input_slow((uint64_t)v10, AG::data::_shared_table_bytes + v14, a1 | (unint64_t)(v15 << 40) | 0x700000000);
          LODWORD(v14) = v39;
          v10 = v41;
          v9 = v35;
          v5 = a3;
          v18 = a1;
          v16 = v31;
          LODWORD(a1) = v33;
        }
        else
        {
          if (v17 < 0x20)
          {
LABEL_12:
            v18 = -1;
            return AG::Graph::input_value_ref_slow(v10, v14, (const char *)a1, 0, v9, v5, &v44, v18);
          }
          v18 = 0;
          v19 = v17 >> 5;
          v20 = (_BYTE *)(*(unsigned int *)(v16 + 16) + AG::data::_shared_table_bytes + 4);
          while (*((_DWORD *)v20 - 1) != (_DWORD)a1 || (*v20 & 7) != (_DWORD)v15)
          {
            ++v18;
            v20 += 5;
            if (v19 == v18)
              goto LABEL_12;
          }
        }
        if ((v18 & 0x8000000000000000) == 0)
        {
          v24 = *(unsigned int *)(v16 + 16);
          v25 = AG::data::_shared_table_bytes;
          if ((a1 & 3) != 0)
          {
            v40 = v14;
            v42 = v10;
            v38 = v5;
            v36 = v9;
            v32 = *(unsigned int *)(v16 + 16);
            v34 = v18;
            v30 = AG::data::_shared_table_bytes;
            LODWORD(a1) = AG::AttributeID::resolve_slow((AG::AttributeID *)&v45, (const char *)3);
            v25 = v30;
            v24 = v32;
            v18 = v34;
            v9 = v36;
            v5 = v38;
            v26 = v14;
            LODWORD(v14) = v40;
            v10 = v42;
          }
          else
          {
            v26 = 0;
          }
          v27 = AG::data::_shared_table_bytes;
          v28 = AG::data::_shared_table_bytes + a1;
          if ((*(_DWORD *)v28 & 0x11) == 0x10)
          {
            *(_BYTE *)(v25 + v24 + 5 * v18 + 4) |= 0x10u;
            v29 = (_QWORD *)(v27 + *(unsigned int *)(v28 + 8));
            if ((*(_BYTE *)(v28 + 7) & 2) != 0)
              v29 = (_QWORD *)*v29;
            return (char *)v29 + v26;
          }
          LODWORD(a1) = v45;
        }
        return AG::Graph::input_value_ref_slow(v10, v14, (const char *)a1, 0, v9, v5, &v44, v18);
      }
    }
  }
  if (dword_1ECEF30D0 <= (a1 & 0xFFFFFFFC))
    AG::precondition_failure((AG *)"invalid data offset: %u", a2, a3, a4, a5, a3, a1 & 0xFFFFFFFC);
  v22 = *(_QWORD *)(AG::data::_shared_table_bytes + (a1 & 0xFFFFFE00));
  if (!v22)
    AG::precondition_failure((AG *)"no graph: %u", a2, a3, a4, a5, a3, a1);
  v23 = *(__n128 **)(v22 + 40);
  v43 = 0;
  return AG::Graph::value_ref(v23, (const char *)a1, 0, a3, &v43);
}

char *AG::Graph::input_value_ref_slow(__n128 *a1, unsigned int a2, const char *a3, int a4, char a5, AG::swift::metadata *a6, _BYTE *a7, unint64_t a8)
{
  const char *v11;
  uint64_t v14;
  const char *v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  char *result;
  int v20;
  AG::swift::metadata *v21;
  const char *v22;
  unsigned int v23;
  const char *v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int *v27;
  uint64_t v28;
  uint64_t v29;
  __n128 *v31;
  unsigned int *v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  AG::swift::metadata *v37;
  _BYTE *v38;
  unint64_t v39;
  AG::swift::metadata *v40;
  _BYTE *v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  AG::swift::metadata *v45;
  _QWORD *v46;
  uint64_t v47;
  AG::swift::metadata *v48;
  uint64_t v49;
  uint64_t v50;
  const char *v51;
  AG::swift::metadata *v52;
  _BYTE *v53;
  int v54;
  _BYTE *v55;
  AG::swift::metadata *v56;
  uint64_t v57;
  const char *v58;
  const char *v59;
  int v60;
  int v61;

  v11 = a3;
  v61 = (int)a3;
  v14 = AG::data::_shared_table_bytes + a2;
  if ((a5 & 2) != 0)
  {
    v37 = a6;
    v38 = a7;
    v39 = AG::Graph::index_of_input((uint64_t)a1, AG::data::_shared_table_bytes + a2, a3 | ((unint64_t)(a5 & 1) << 40) | 0x500000000);
    a7 = v38;
    a6 = v37;
    a8 = v39;
  }
  v15 = (const char *)a2;
  if (a4)
    v16 = 17;
  else
    v16 = 3;
  if ((a8 & 0x8000000000000000) == 0)
  {
    v17 = a5 & 1;
    goto LABEL_20;
  }
  if (dword_1ECEF30D0 <= (v11 & 0xFFFFFFFC))
    AG::precondition_failure((AG *)"invalid data offset: %u", (const char *)a2, v11 & 0xFFFFFFFC);
  v18 = *(_QWORD *)(AG::data::_shared_table_bytes + (v11 & 0xFFFFFE00));
  if (!v18 || *(__n128 **)(v18 + 40) != a1)
    AG::precondition_failure((AG *)"accessing attribute in a different namespace: %u", (const char *)a2, v11);
  if ((*(_BYTE *)v14 & 1) != 0)
  {
    v57 = v14;
    v20 = v16;
    v16 = (uint64_t)a7;
    v21 = a6;
    goto LABEL_18;
  }
  if ((v11 & 3) != 0)
  {
    v11 = (const char *)a2;
    v52 = a6;
    v53 = a7;
    v54 = AG::AttributeID::resolve_slow((AG::AttributeID *)&v61, (const char *)v16);
    v15 = v11;
    a7 = v53;
    a6 = v52;
    LODWORD(v11) = v54;
    if (a4)
      goto LABEL_14;
  }
  else if (a4)
  {
LABEL_14:
    result = 0;
    if (v11 < 4 || (v11 & 3) != 0)
      return result;
  }
  v57 = v14;
  v20 = v16;
  v16 = (uint64_t)a7;
  v21 = a6;
  v22 = v15;
  AG::Graph::update_attribute(a1, v11, 0);
  v15 = v22;
  LODWORD(v11) = v61;
LABEL_18:
  v17 = a5 & 1;
  v23 = v11;
  v24 = v15;
  v25 = AG::Graph::add_input((uint64_t)a1, v15, v23, a4 != 0, a5 & 1);
  if (v25 < 0)
    return 0;
  a8 = v25;
  a6 = v21;
  a7 = (_BYTE *)v16;
  v15 = v24;
  LODWORD(v16) = v20;
  v14 = v57;
LABEL_20:
  v26 = AG::data::_shared_table_bytes + *(unsigned int *)(v14 + 16);
  v27 = (unsigned int *)(v26 + 5 * a8);
  *((_BYTE *)v27 + 4) |= (v17 != 0) | 0x10;
  v28 = *v27;
  v60 = v28;
  if ((v28 & 3) != 0)
  {
    v59 = v15;
    v40 = a6;
    v41 = a7;
    v42 = AG::AttributeID::resolve_slow((AG::AttributeID *)&v60, (const char *)(v16 | 8));
    a7 = v41;
    a6 = v40;
    v28 = v42;
    v29 = v43;
    v15 = v59;
    if (a4)
      goto LABEL_22;
  }
  else
  {
    v29 = 0;
    if (a4)
    {
LABEL_22:
      if (v28 < 4 || (v28 & 3) != 0)
        return 0;
      v31 = a1;
      v32 = (unsigned int *)(AG::data::_shared_table_bytes + v28);
      if ((*v32 & 0x11) == 0x10)
        goto LABEL_39;
      v56 = a6;
      v58 = v15;
      v55 = a7;
      v33 = AG::data::table::raw_page_seed((uint64_t)&AG::data::_shared_table_bytes, (const char *)(v28 & 0xFFFFFE00));
      AG::Graph::update_attribute(v31, v28, 0);
      if ((v33 & 0xFF00000000) != 0)
      {
        v34 = v33 & 0x7FFFFFFF;
        v35 = AG::data::table::raw_page_seed((uint64_t)&AG::data::_shared_table_bytes, (const char *)(v28 & 0xFFFFFE00));
        if ((v35 & 0xFF00000000) == 0 || v34 != (_DWORD)v35)
          return 0;
      }
      goto LABEL_38;
    }
  }
  v31 = a1;
  v32 = (unsigned int *)(AG::data::_shared_table_bytes + v28);
  if ((*v32 & 0x11) != 0x10)
  {
    v56 = a6;
    v58 = v15;
    v55 = a7;
    AG::Graph::update_attribute(v31, v28, 0);
LABEL_38:
    a6 = v56;
    v26 = AG::data::_shared_table_bytes + *(unsigned int *)&v58[AG::data::_shared_table_bytes + 16];
    a7 = v55;
  }
LABEL_39:
  if ((*(_BYTE *)(v26 + 5 * a8 + 4) & 8) != 0)
    *a7 |= 1u;
  if ((a5 & 2) != 0 && (*((_BYTE *)v32 + 7) & 0x20) != 0 && (*(_BYTE *)(*((_QWORD *)a6 - 1) + 82) & 1) != 0)
  {
    *(_DWORD *)v14 |= 8u;
    *a7 |= 2u;
  }
  v44 = *v32;
  if (!v29)
  {
    v45 = *(AG::swift::metadata **)(*(_QWORD *)(v31[8].n128_u64[0] + ((v44 >> 5) & 0x7FFFFF8)) + 8);
    if (v45 != a6)
    {
      v48 = a6;
      v49 = AG::swift::metadata::name(v45, 0);
      v50 = AG::swift::metadata::name(v48, 0);
      AG::precondition_failure((AG *)"invalid value type for attribute: %u (saw %s, expected %s)", v51, v28, v49, v50);
    }
  }
  if ((v44 & 0x10) == 0)
    AG::precondition_failure((AG *)"attribute being read has no value: %u", v15, v28);
  v46 = (_QWORD *)(AG::data::_shared_table_bytes + v32[2]);
  if ((*((_BYTE *)v32 + 7) & 2) != 0)
    v46 = (_QWORD *)*v46;
  v47 = v29 - 1;
  if (!v29)
    v47 = 0;
  return (char *)v46 + v47;
}

uint64_t AG::Graph::add_input(uint64_t a1, const char *a2, unsigned int a3, int a4, uint64_t a5)
{
  unsigned int v9;
  unint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  unsigned int v19;
  _DWORD *v20;
  char v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unsigned int *v34;
  char *v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  unsigned int v41;
  uint64_t v42;
  uint64_t v43;
  unsigned int v44;
  uint64_t v45;
  uint64_t v46;
  unsigned int v47;

  v47 = a3;
  v9 = a3;
  if ((a3 & 3) == 0)
  {
    if (a4)
      goto LABEL_3;
LABEL_6:
    if (v9 <= 3)
      AG::precondition_failure((AG *)"reading from invalid source attribute: %u", a2, v47);
    goto LABEL_7;
  }
  v9 = AG::AttributeID::resolve_slow((AG::AttributeID *)&v47, (const char *)0x10);
  if (!a4)
    goto LABEL_6;
LABEL_3:
  if (v9 < 4)
    return -1;
LABEL_7:
  if (v9 == (_DWORD)a2)
    AG::precondition_failure((AG *)"cyclic edge: %u -> %u", a2, a2, a2);
  v11 = *(_DWORD *)(a1 + 232);
  v12 = a2;
  if (v11)
  {
    v41 = v11 - 1;
    do
    {
      v42 = v41;
      v43 = *(_QWORD *)(*(_QWORD *)(a1 + 224) + 8 * v41);
      (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v43 + 232))(v43, a2, v47, a5);
      --v41;
    }
    while (v42);
  }
  v13 = AG::data::_shared_table_bytes + a2;
  v14 = a2 & 0xFFFFFE00;
  v15 = *(_QWORD *)(AG::data::_shared_table_bytes + v14);
  if (v15)
    v15 = *(_QWORD *)(v15 + 48);
  v16 = *(_QWORD *)(AG::data::_shared_table_bytes + (v9 & 0xFFFFFE00));
  if (v16)
    v17 = *(_QWORD *)(v16 + 48);
  else
    v17 = 0;
  v18 = *(_BYTE *)(v13 + 7);
  if (v15 != v17)
  {
    v18 |= 4u;
    *(_BYTE *)(v13 + 7) = v18;
  }
  v19 = v47;
  v20 = (_DWORD *)(v13 + 12);
  v21 = *(_BYTE *)v13;
  v22 = a5 & 5 | (8 * (*(_BYTE *)v13 & 1));
  if ((v18 & 8) != 0)
  {
    v10 = (unint64_t)*v20 >> 5;
    v29 = AG::data::_shared_table_bytes;
    if ((*v20 & 0x1F) == 0 || *v20 >> 5 >> *v20 != 0)
    {
      AG::data::vector<AG::InputEdge>::reserve_slow((unsigned int *)(v13 + 12), *(AG::data::zone **)(AG::data::_shared_table_bytes + v14), v10 + 1);
      v29 = AG::data::_shared_table_bytes;
    }
    v31 = v29 + *(unsigned int *)(v13 + 16) + 5 * v10;
    *(_DWORD *)v31 = v19;
    *(_BYTE *)(v31 + 4) = v22;
    *(_DWORD *)(v13 + 12) += 32;
    *(_BYTE *)(v13 + 7) |= 8u;
  }
  else
  {
    v23 = AG::data::_shared_table_bytes;
    v25 = *(unsigned int *)(v13 + 12);
    v24 = *(unsigned int *)(v13 + 16);
    v26 = AG::data::_shared_table_bytes + v24;
    v27 = v25 >> 5;
    if (v25 >= 0x20)
    {
      v28 = (char *)(AG::data::_shared_table_bytes + v24);
      v32 = v25 >> 5;
      do
      {
        v33 = v32 >> 1;
        v34 = (unsigned int *)&v28[5 * (v32 >> 1)];
        v36 = *v34;
        v35 = (char *)v34 + 5;
        v32 += ~(v32 >> 1);
        if (v36 < v47)
          v28 = v35;
        else
          v32 = v33;
      }
      while (v32);
    }
    else
    {
      v28 = (char *)(v26 + 5 * (v25 >> 5));
    }
    v10 = 0xCCCCCCCCCCCCCCCDLL * (_QWORD)&v28[-v26];
    if ((v25 & 0x1F) == 0 || v27 >> v25)
    {
      AG::data::vector<AG::InputEdge>::reserve_slow((unsigned int *)(v13 + 12), *(AG::data::zone **)(AG::data::_shared_table_bytes + v14), v27 + 1);
      v24 = *(unsigned int *)(v13 + 16);
      v23 = AG::data::_shared_table_bytes;
    }
    v37 = v23 + v24;
    if (v27 > v10)
      memmove((void *)(v37 + 5 * v10 + 5), (const void *)(v37 + 5 * v10), 5 * (v27 - v10));
    v38 = v37 + 5 * v10;
    *(_DWORD *)v38 = v19;
    *(_BYTE *)(v38 + 4) = v22;
    *v20 += 32;
  }
  AG::Graph::add_input_dependencies(a1, v12, v47);
  if ((*(_BYTE *)v13 & 0xC0) != 0)
    AG::Graph::reset_update(a1, v12);
  if (8 * (v21 & 1))
  {
    v39 = *(_DWORD *)(a1 + 232);
    if (v39)
    {
      v44 = v39 - 1;
      do
      {
        v45 = v44;
        v46 = *(_QWORD *)(*(_QWORD *)(a1 + 224) + 8 * v44);
        (*(void (**)(uint64_t, uint64_t, unint64_t, uint64_t))(*(_QWORD *)v46 + 248))(v46, v12, v10, 1);
        --v44;
      }
      while (v45);
    }
  }
  return v10;
}

void AG::Graph::add_input_dependencies(uint64_t a1, unsigned int a2, unsigned int a3)
{
  unsigned int v5;

  v5 = a3;
  if ((a3 & 3) != 0)
    a3 = AG::AttributeID::resolve_slow((AG::AttributeID *)&v5, (const char *)4);
  if ((a3 & 3) != 0)
  {
    if ((a3 & 3) == 1)
      AG::Graph::add_output_edge<AG::Node>(a1, a3 & 0xFFFFFFFC, a2);
  }
  else
  {
    AG::Graph::add_output_edge<AG::Node>(a1, a3, a2);
  }
  AG::Graph::update_main_refs(a1, a2);
}

void AG::Graph::update_main_refs(uint64_t a1, unsigned int a2)
{
  unsigned int *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unsigned int *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  char v15;
  _BYTE *v16;
  char v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unsigned int *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  _BYTE *v43;
  char v44;
  char v45;
  unsigned int *v46;
  unsigned int *v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  _QWORD *v54;
  char v55;
  char v56;
  unsigned int v57;
  _QWORD __dst[128];
  __int128 v59;
  unint64_t v60;
  uint64_t v61;

  v61 = *MEMORY[0x1E0C80C00];
  v59 = 0u;
  v60 = 64;
  if ((a2 & 3) == 1)
  {
    v11 = AG::data::_shared_table_bytes + (a2 & 0xFFFFFFFC);
    if ((*(_BYTE *)(v11 + 8) & 1) != 0)
    {
      v12 = *(unsigned int *)(v11 + 24);
      v13 = (unint64_t)*(unsigned int *)(v11 + 20) >> 5;
      __dst[0] = AG::data::_shared_table_bytes + v12;
      __dst[1] = v13;
      v14 = 1;
LABEL_24:
      *((_QWORD *)&v59 + 1) = v14;
    }
  }
  else
  {
    if ((a2 & 3) != 0)
      return;
    v4 = (unsigned int *)(AG::data::_shared_table_bytes + a2);
    v5 = *v4;
    v6 = *(_QWORD *)(*(_QWORD *)(a1 + 128) + ((v5 >> 5) & 0x7FFFFF8));
    if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v6 + 8) - 8) + 82) & 1) != 0 && (*(_BYTE *)(v6 + 40) & 0x20) == 0)
    {
      if ((v5 & 8) != 0)
      {
LABEL_63:
        v56 = *((_BYTE *)v4 + 7);
        v16 = (char *)v4 + 7;
        v15 = v56;
        if ((v56 & 0x20) != 0)
          goto LABEL_25;
        v18 = 32;
        goto LABEL_19;
      }
      v7 = v4[3];
      if (v7 >= 0x20)
      {
        v8 = (unsigned int *)(AG::data::_shared_table_bytes + v4[4]);
        v9 = 5 * (v7 >> 5);
        do
        {
          v57 = *v8;
          v10 = v57;
          if ((v57 & 3) != 0)
            v10 = AG::AttributeID::resolve_slow((AG::AttributeID *)&v57, (const char *)0x10);
          if ((v10 & 3) == 0 && (*(_BYTE *)(AG::data::_shared_table_bytes + v10 + 7) & 0x20) != 0)
            goto LABEL_63;
          v8 = (unsigned int *)((char *)v8 + 5);
          v9 -= 5;
        }
        while (v9);
      }
    }
    v17 = *((_BYTE *)v4 + 7);
    v16 = (char *)v4 + 7;
    v15 = v17;
    if ((v17 & 0x20) != 0)
    {
      v18 = 0;
LABEL_19:
      v19 = a2;
      *v16 = v15 & 0xDF | v18;
      v20 = AG::data::_shared_table_bytes;
      v21 = *(unsigned int *)(AG::data::_shared_table_bytes + v19 + 20);
      v22 = *(unsigned int *)(AG::data::_shared_table_bytes + v19 + 24);
      v23 = *((_QWORD *)&v59 + 1);
      if (v60 < *((_QWORD *)&v59 + 1) + 1)
      {
        AG::vector<AG::ConstOutputEdgeArrayRef,64ul,unsigned long>::reserve_slow(__dst, *((_QWORD *)&v59 + 1) + 1);
        v23 = *((_QWORD *)&v59 + 1);
      }
      v24 = (_QWORD *)v59;
      if (!(_QWORD)v59)
        v24 = __dst;
      v25 = &v24[2 * v23];
      *v25 = v20 + v22;
      v25[1] = v21 >> 5;
      v14 = *((_QWORD *)&v59 + 1) + 1;
      goto LABEL_24;
    }
  }
LABEL_25:
  v26 = *((_QWORD *)&v59 + 1);
  if (*((_QWORD *)&v59 + 1))
  {
    while (1)
    {
      v27 = (_QWORD *)v59;
      if (!(_QWORD)v59)
        v27 = __dst;
      --v26;
      v28 = &v27[2 * v26];
      v30 = *v28;
      v29 = v28[1];
      *((_QWORD *)&v59 + 1) = v26;
      v31 = v29 - 1;
      if (v29 - 1 >= 0)
        break;
LABEL_59:
      if (!v26)
        goto LABEL_60;
    }
    while (1)
    {
      while (1)
      {
        v32 = *(unsigned int *)(v30 + 4 * v31);
        if ((*(_DWORD *)(v30 + 4 * v31) & 3) != 1)
          break;
        v40 = AG::data::_shared_table_bytes;
        v41 = AG::data::_shared_table_bytes + (v32 & 0xFFFFFFFC);
        if ((*(_BYTE *)(v41 + 8) & 1) == 0)
          goto LABEL_54;
LABEL_47:
        v46 = (unsigned int *)(v41 + 20);
        v47 = (unsigned int *)(v41 + 24);
        v48 = *v46;
        if (v48 < 0x20)
          goto LABEL_54;
        v49 = *v47;
        v50 = v40 + v49;
        v51 = v48 >> 5;
        if (v31)
        {
          v52 = *((_QWORD *)&v59 + 1);
          if (v60 < *((_QWORD *)&v59 + 1) + 1)
          {
            AG::vector<AG::ConstOutputEdgeArrayRef,64ul,unsigned long>::reserve_slow(__dst, *((_QWORD *)&v59 + 1) + 1);
            v52 = *((_QWORD *)&v59 + 1);
          }
          v53 = (_QWORD *)v59;
          if (!(_QWORD)v59)
            v53 = __dst;
          v54 = &v53[2 * v52];
          *v54 = v50;
          v54[1] = v51;
          ++*((_QWORD *)&v59 + 1);
          goto LABEL_54;
        }
        v31 = v51 - 1;
        v30 = v40 + v49;
      }
      if ((v32 & 3) == 0)
      {
        v33 = AG::data::_shared_table_bytes + v32;
        v34 = *(unsigned int *)(AG::data::_shared_table_bytes + v32);
        v35 = *(_QWORD *)(*(_QWORD *)(a1 + 128) + ((v34 >> 5) & 0x7FFFFF8));
        if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v35 + 8) - 8) + 82) & 1) != 0 && (*(_BYTE *)(v35 + 40) & 0x20) == 0)
        {
          if ((v34 & 8) != 0)
            goto LABEL_56;
          v36 = *(unsigned int *)(v33 + 12);
          if (v36 >= 0x20)
          {
            v37 = (unsigned int *)(AG::data::_shared_table_bytes + *(unsigned int *)(v33 + 16));
            v38 = 5 * (v36 >> 5);
            while (1)
            {
              v57 = *v37;
              v39 = v57;
              if ((v57 & 3) != 0)
                v39 = AG::AttributeID::resolve_slow((AG::AttributeID *)&v57, (const char *)0x10);
              if ((v39 & 3) == 0 && (*(_BYTE *)(AG::data::_shared_table_bytes + v39 + 7) & 0x20) != 0)
                break;
              v37 = (unsigned int *)((char *)v37 + 5);
              v38 -= 5;
              if (!v38)
                goto LABEL_44;
            }
LABEL_56:
            v55 = *(_BYTE *)(v33 + 7);
            v43 = (_BYTE *)(v33 + 7);
            v42 = v55;
            if ((v55 & 0x20) != 0)
              goto LABEL_54;
            v45 = 32;
LABEL_46:
            *v43 = v42 & 0xDF | v45;
            v40 = AG::data::_shared_table_bytes;
            v41 = AG::data::_shared_table_bytes + v32;
            goto LABEL_47;
          }
        }
LABEL_44:
        v44 = *(_BYTE *)(v33 + 7);
        v43 = (_BYTE *)(v33 + 7);
        v42 = v44;
        if ((v44 & 0x20) != 0)
        {
          v45 = 0;
          goto LABEL_46;
        }
      }
LABEL_54:
      if ((--v31 & 0x8000000000000000) != 0)
      {
        v26 = *((_QWORD *)&v59 + 1);
        goto LABEL_59;
      }
    }
  }
LABEL_60:
  if ((_QWORD)v59)
    free((void *)v59);
}

void sub_1AB92FFCC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)(v1 + 1024);
  if (v3)
    free(v3);
  _Unwind_Resume(exception_object);
}

uint64_t AG::AttributeID::resolve_slow(AG::AttributeID *this, const char *a2)
{
  char v2;
  unsigned int v4;
  int v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = (char)a2;
  v4 = *(_DWORD *)this;
  v5 = *(_DWORD *)this & 3;
  if (v5 == 1)
  {
    v6 = 0;
    do
    {
      if (v6)
        v7 = 1;
      else
        v7 = (v2 & 8) == 0;
      if (!v7)
        v6 = 1;
      v8 = AG::data::_shared_table_bytes + (v4 & 0xFFFFFFFC);
      if ((*(_BYTE *)(v8 + 8) & 1) != 0)
      {
        if ((v2 & 4) != 0)
          return v4;
        if ((v2 & 1) != 0)
        {
          a2 = (const char *)*(unsigned int *)(v8 + 16);
          if ((_DWORD)a2)
          {
            v9 = *(_QWORD *)(AG::data::_shared_table_bytes + (a2 & 0xFFFFFE00));
            if (v9)
              AG::Graph::update_attribute(*(__n128 **)(v9 + 40), a2, 0);
          }
        }
      }
      if ((v2 & 0x10) != 0)
      {
        v10 = AG::data::table::raw_page_seed((uint64_t)&AG::data::_shared_table_bytes, (const char *)(*(_DWORD *)v8 & 0xFFFFFE00));
        if ((v10 & 0xFF00000000) == 0 || *(_DWORD *)(v8 + 4) != (v10 & 0x7FFFFFFF))
        {
          if ((v2 & 2) != 0)
            AG::precondition_failure((AG *)"invalid indirect ref: %u", a2, *(unsigned int *)this);
          return 2;
        }
      }
      v6 += (unint64_t)*(unsigned int *)(v8 + 8) >> 2;
      v4 = *(_DWORD *)v8;
      v5 = *(_DWORD *)v8 & 3;
    }
    while (v5 == 1);
    if ((v2 & 2) != 0)
      goto LABEL_24;
  }
  else if ((a2 & 2) != 0)
  {
LABEL_24:
    if (v5)
      AG::precondition_failure((AG *)"invalid attribute id: %u", a2, *(unsigned int *)this);
  }
  return v4;
}

uint64_t AG::data::table::raw_page_seed(uint64_t a1, const char *a2)
{
  unsigned int v2;
  os_unfair_lock_s *v4;
  unsigned int v5;
  unsigned int v6;
  int v7;
  uint64_t v8;

  v2 = a2;
  if (*(_DWORD *)(a1 + 24) <= a2)
    AG::precondition_failure((AG *)"invalid data offset: %u", a2, a2);
  v4 = (os_unfair_lock_s *)(a1 + 16);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 16));
  v5 = (v2 >> 9) - 1;
  if (v5 >> 6 < *(_DWORD *)(a1 + 88) && ((*(_QWORD *)(*(_QWORD *)(a1 + 80) + 8 * (v5 >> 6)) >> v5) & 1) != 0)
  {
    v6 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)a1 + v2) + 24) & 0xFFFFFF00;
    v7 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)a1 + v2) + 24);
    v8 = 0x100000000;
  }
  else
  {
    v8 = 0;
    v7 = 0;
    v6 = 0;
  }
  os_unfair_lock_unlock(v4);
  return v8 | v6 | v7;
}

unsigned int *AG::Graph::add_output_edge<AG::Node>(uint64_t a1, unsigned int a2, int a3)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int *result;
  unsigned int v7;
  unint64_t v8;
  unsigned int v9;

  v4 = AG::data::_shared_table_bytes;
  v5 = AG::data::_shared_table_bytes + a2;
  v7 = *(_DWORD *)(v5 + 20);
  result = (unsigned int *)(v5 + 20);
  v8 = (unint64_t)v7 >> 5;
  v9 = v8 >> v7;
  if ((v7 & 0x1F) == 0 || v9 != 0)
  {
    result = (unsigned int *)AG::data::vector<AG::OutputEdge>::reserve_slow(result, *(AG::data::zone **)(AG::data::_shared_table_bytes + (a2 & 0xFFFFFE00)), (int)v8 + 1);
    v4 = AG::data::_shared_table_bytes;
  }
  *(_DWORD *)(v4 + *(unsigned int *)(v5 + 24) + 4 * v8) = a3;
  *(_DWORD *)(v5 + 20) += 32;
  return result;
}

void AG::Graph::reset_update(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t i;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  _DWORD *v8;

  v2 = AG::Graph::_current_update_key;
  for (i = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v2); i; i = v4[2])
  {
    v4 = (_QWORD *)(i & 0xFFFFFFFFFFFFFFFELL);
    v5 = v4 + 4;
    v6 = v4[13];
    if (v4[12])
      v5 = (_QWORD *)v4[12];
    if (v6)
    {
      v7 = 8 * v6;
      v8 = (_DWORD *)v5 + 1;
      do
      {
        if (*(v8 - 1) == a2)
          *v8 &= 0xFu;
        v8 += 2;
        v7 -= 8;
      }
      while (v7);
    }
  }
}

uint64_t AG::Graph::add_attribute(int64x2_t *this, AG::Subgraph *a2, unsigned int a3, const void *a4, unint64_t a5)
{
  uint64_t v9;
  int v10;
  int64x2_t *v11;
  unsigned __int8 *v12;
  uint64_t v13;
  size_t v14;
  void *v15;
  int v16;
  unsigned int v17;
  const char *v18;
  int v19;
  unsigned int v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  unsigned __int8 *v25;
  int v26;
  int v27;
  unsigned __int8 v28;
  uint64_t v29;
  uint64_t v30;
  unsigned __int8 *v31;
  int v32;
  unsigned int v33;

  v9 = *(_QWORD *)(this[8].i64[0] + 8 * a3);
  v10 = *(_DWORD *)(v9 + 40);
  if ((v10 & 0x10) != 0)
    v11 = this;
  else
    v11 = 0;
  if (a5 | *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v9 + 8) - 8) + 64))
    v12 = (unsigned __int8 *)a5;
  else
    v12 = (unsigned __int8 *)v11;
  v13 = *(_QWORD *)(*(_QWORD *)v9 - 8);
  v14 = *(_QWORD *)(v13 + 64);
  if ((*(_DWORD *)(v13 + 80) & 0x100000) != 0 || v14 > 0x80)
  {
    v15 = AG::data::zone::alloc_persistent(a2, v14);
    LODWORD(v14) = 8;
    v16 = 7;
  }
  else
  {
    v15 = 0;
    v16 = *(_DWORD *)(v13 + 80);
  }
  v17 = v10 & 8;
  v18 = (const char *)(((v16 + 28) & ~v16) + v14);
  v19 = v16 | 3;
  if (v18 > 0x10)
  {
    v21 = *((unsigned int *)a2 + 4);
    if ((_DWORD)v21
      && (v22 = (*(_DWORD *)(AG::data::_shared_table_bytes + v21 + 16) + v19) & ~v19,
          (v22 + (_DWORD)v18) <= *(_DWORD *)(AG::data::_shared_table_bytes + v21 + 12)))
    {
      *(_DWORD *)(AG::data::_shared_table_bytes + v21 + 16) = v22 + (_DWORD)v18;
      v20 = v22 + v21;
    }
    else
    {
      v20 = AG::data::zone::alloc_slow(a2, v18, v19);
    }
  }
  else
  {
    v20 = AG::data::zone::alloc_bytes_recycle(a2, v18, v19);
  }
  v23 = AG::data::_shared_table_bytes + v20;
  *(_DWORD *)v23 = (v17 >> 1) | (a3 << 8) | v17;
  *(_BYTE *)(v23 + 7) = 32;
  *(_QWORD *)(v23 + 8) = 0;
  *(_QWORD *)(v23 + 16) = 0;
  *(_DWORD *)(v23 + 24) = 0;
  if (a3 >= 0x100000)
    AG::precondition_failure((AG *)"too many node types allocated", v18);
  v24 = v20;
  v25 = (unsigned __int8 *)(AG::data::_shared_table_bytes + v20);
  v26 = *(_DWORD *)v25;
  *(_DWORD *)v25 |= 0x20u;
  if ((v26 & 8) != 0 && (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v9 + 8) - 8) + 82) & 1) != 0)
    v27 = ~*(_DWORD *)(v9 + 40) & 0x20;
  else
    LOBYTE(v27) = 0;
  v28 = v25[7] & 0xDF | v27;
  v25[7] = v28;
  if (v15)
  {
    v25[7] = v28 | 1;
    *(_QWORD *)(AG::data::_shared_table_bytes + v20 + *(unsigned int *)(v9 + 44)) = v15;
  }
  v29 = *(_QWORD *)(*(_QWORD *)(v9 + 8) - 8);
  if ((*(_BYTE *)(v29 + 82) & 0x10) != 0 || *(_QWORD *)(v29 + 64) >= 0x81uLL)
    v25[7] |= 2u;
  this[16] = vaddq_s64(this[16], vdupq_n_s64(1uLL));
  v30 = *(_QWORD *)(*(_QWORD *)v9 - 8);
  if (*(_QWORD *)(v30 + 64))
  {
    v31 = &v25[*(unsigned int *)(v9 + 44)];
    if ((v25[7] & 1) != 0)
      v31 = *(unsigned __int8 **)v31;
    (*(void (**)(unsigned __int8 *, const void *))(v30 + 16))(v31, a4);
  }
  if (v12)
  {
    AG::Graph::value_set_internal((AG::Graph *)this, v24, (AG::Node *)v25, v12, *(AG::LayoutDescriptor **)(v9 + 8));
  }
  else
  {
    *(_DWORD *)v25 |= 3u;
    v32 = v25[6];
    v33 = *((_DWORD *)a2 + 25);
    if ((v32 & ~HIWORD(v33)) != 0)
    {
      *((_DWORD *)a2 + 25) = v33 & 0xFF00FFFF | ((BYTE2(v33) | v32) << 16);
      AG::Subgraph::propagate_dirty_flags(a2);
    }
  }
  AG::Subgraph::add_node((uint64_t)a2, v24);
  return v24;
}

void AG::Subgraph::add_node(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  _DWORD *v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t *v20;

  v4 = a2;
  *(_BYTE *)(AG::data::_shared_table_bytes + a2 + 6) = 0;
  AG::Subgraph::insert_attribute(a1, a2, 1);
  if (*(_DWORD *)(a1 + 96))
  {
    v7 = *(_QWORD *)(a1 + 40);
    v8 = *(_QWORD *)(v7 + 328);
    if (!v8)
    {
      v9 = (uint64_t *)(v7 + 328);
      v10 = operator new();
      *(_OWORD *)v10 = 0u;
      *(_OWORD *)(v10 + 16) = 0u;
      *(_DWORD *)(v10 + 32) = 1065353216;
      std::unique_ptr<std::unordered_map<AG::Subgraph *,AG::Graph::TreeDataElement>>::reset[abi:ne180100](v9, v10);
      v8 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 328);
    }
    v19 = a1;
    v20 = &v19;
    v11 = std::__hash_table<std::__hash_value_type<AG::Subgraph *,AG::Graph::TreeDataElement>,std::__unordered_map_hasher<AG::Subgraph *,std::__hash_value_type<AG::Subgraph *,AG::Graph::TreeDataElement>,std::hash<AG::Subgraph *>,std::equal_to<AG::Subgraph *>,true>,std::__unordered_map_equal<AG::Subgraph *,std::__hash_value_type<AG::Subgraph *,AG::Graph::TreeDataElement>,std::equal_to<AG::Subgraph *>,std::hash<AG::Subgraph *>,true>,std::allocator<std::__hash_value_type<AG::Subgraph *,AG::Graph::TreeDataElement>>>::__emplace_unique_key_args<AG::Subgraph *,std::piecewise_construct_t const&,std::tuple<AG::Subgraph *&&>,std::tuple<>>(v8, &v19, (uint64_t)&std::piecewise_construct, &v20);
    v12 = *((_QWORD *)v11 + 4);
    v13 = v12 + 1;
    if (*((_QWORD *)v11 + 5) < (unint64_t)(v12 + 1))
    {
      v18 = v11;
      AG::vector<std::unique_ptr<char const,util::free_deleter>,0ul,unsigned long>::reserve_slow((uint64_t)(v11 + 24), v13);
      v11 = v18;
      v12 = *((_QWORD *)v18 + 4);
      v13 = v12 + 1;
    }
    v14 = (_DWORD *)(*((_QWORD *)v11 + 3) + 8 * v12);
    *v14 = *(_DWORD *)(a1 + 96);
    v14[1] = a2;
    *((_QWORD *)v11 + 4) = v13;
    v11[48] = 0;
  }
  v5 = *(_QWORD *)(a1 + 40);
  v6 = *(_DWORD *)(v5 + 232);
  if (v6)
  {
    v15 = v6 - 1;
    do
    {
      v16 = v15;
      v17 = *(_QWORD *)(*(_QWORD *)(v5 + 224) + 8 * v15);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v17 + 224))(v17, v4);
      --v15;
    }
    while (v16);
  }
}

void AG::Subgraph::insert_attribute(uint64_t a1, unsigned int a2, int a3)
{
  unsigned int v3;
  int v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  _WORD *v10;
  uint64_t v11;
  int v12;
  _WORD *v13;
  uint64_t v14;
  _WORD *v15;

  v3 = a2 & 0xFFFFFE00;
  v4 = a2 & 3;
  if (!a3)
    goto LABEL_12;
  if ((a2 & 3) == 0 && *(_BYTE *)(AG::data::_shared_table_bytes + a2 + 6))
  {
    v8 = 2;
    goto LABEL_19;
  }
  v5 = AG::data::_shared_table_bytes + (a2 & 0xFFFFFE00);
  v6 = *(unsigned __int16 *)(v5 + 20);
  if (*(_WORD *)(v5 + 20))
  {
    v7 = AG::data::_shared_table_bytes + 4;
    v8 = 2;
    do
    {
      while ((v6 & 3) != 0)
      {
        if ((v6 & 3u) - 1 < 2 || !v6)
          goto LABEL_13;
      }
      v9 = v6 + v3;
      if (!*(_BYTE *)(AG::data::_shared_table_bytes + 6 + v9))
        break;
      v6 = *(unsigned __int16 *)(v7 + v9);
      v8 = v9;
    }
    while (*(_WORD *)(v7 + v9));
  }
  else
  {
LABEL_12:
    v8 = 2;
  }
LABEL_13:
  if (v4 == 1)
  {
    v10 = (_WORD *)(AG::data::_shared_table_bytes + (a2 & 0xFFFFFFFC) + 14);
    LOWORD(v4) = 1;
    goto LABEL_20;
  }
  if ((a2 & 3) != 0)
  {
    v10 = 0;
    goto LABEL_20;
  }
LABEL_19:
  LOWORD(v4) = 0;
  v10 = (_WORD *)(AG::data::_shared_table_bytes + a2 + 4);
LABEL_20:
  v11 = v8;
  v12 = v8 & 3;
  if (v12 == 1)
  {
    v13 = (_WORD *)(AG::data::_shared_table_bytes + (v11 & 0xFFFFFFFC) + 14);
  }
  else if (v12)
  {
    v14 = AG::data::_shared_table_bytes + (a2 & 0xFFFFFE00);
    v15 = (_WORD *)(v14 + 22);
    v13 = (_WORD *)(v14 + 20);
    if (!a3)
      v13 = v15;
  }
  else
  {
    v13 = (_WORD *)(AG::data::_shared_table_bytes + v11 + 4);
  }
  *v10 = *v13;
  *v13 = ((a2 & 0xFFFC) - v3) | v4;
}

uint64_t AGSubgraphGetCurrentGraphContext()
{
  uint64_t v0;
  uint64_t v1;

  v0 = AG::Subgraph::_current_subgraph_key;
  v1 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v0);
  if (v1)
    return *(_QWORD *)(v1 + 40);
  else
    return 0;
}

uint64_t AGGraphCreateAttribute(unsigned int a1, void *a2, void *a3)
{
  uint64_t v4;
  int64x2_t **v5;

  v4 = AG::Subgraph::_current_subgraph_key;
  v5 = *(int64x2_t ***)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v4);
  if (!v5)
    AG::precondition_failure((AG *)"no subgraph active while adding attribute", 0, a3, a2);
  return AG::Graph::add_attribute(v5[5], (AG::Subgraph *)v5, a1, a2, (unint64_t)a3);
}

AG *AG::`anonymous namespace'::TypeDescriptorCache::fetch(uint64_t a1, unint64_t a2, int a3, int a4, int a5)
{
  uint64_t v10;
  unint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  AG *layout;
  AG *v15;
  unsigned __int8 v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  NSObject *global_queue;
  double v25;
  AG::_anonymous_namespace_ *v26;
  double v27;
  double v28;
  double v29;
  FILE *v30;
  const char *v31;
  void *v33;

  v10 = a3;
  v11 = ~a2 & 0xFFFFFFFFFFFFFFFCLL;
  if (!a4)
    v11 = a2;
  v12 = (uint64_t *)(v11 | a3);
  os_unfair_lock_lock((os_unfair_lock_t)a1);
  v33 = 0;
  v13 = util::UntypedTable::lookup((util::UntypedTable *)(a1 + 8), v12, &v33);
  if (v33)
  {
    layout = (AG *)v13;
    ++*(_QWORD *)(a1 + 288);
LABEL_25:
    os_unfair_lock_unlock((os_unfair_lock_t)a1);
    return layout;
  }
  ++*(_QWORD *)(a1 + 296);
  os_unfair_lock_unlock((os_unfair_lock_t)a1);
  if ((v16 & 1) == 0)
  {
    if ((_DWORD)v15)
    {
    }
  }
  if ((a3 & 0x200) != 0
  {
    v25 = AG::current_time(v15);
    layout = (AG *)AG::LayoutDescriptor::make_layout((AG::swift::metadata *)a2, v10, a4);
    v27 = AG::current_time(layout);
    if (a3 < 0)
    {
      os_unfair_lock_lock((os_unfair_lock_t)a1);
    }
    else
    {
      v28 = v27;
      {
        v30 = (FILE *)*MEMORY[0x1E0C80C10];
        v31 = (const char *)AG::swift::metadata::name((AG::swift::metadata *)a2, 0);
        v29 = v28 - v25;
        fprintf(v30, "!! synchronous layout creation for %s: %g ms\n", v31, v29 * 1000.0);
      }
      else
      {
        v29 = v28 - v25;
      }
      os_unfair_lock_lock((os_unfair_lock_t)a1);
      *(double *)(a1 + 312) = v29 + *(double *)(a1 + 312);
    }
    util::UntypedTable::insert((util::UntypedTable *)(a1 + 8), v12, layout);
    goto LABEL_25;
  }
  os_unfair_lock_lock((os_unfair_lock_t)a1);
  util::UntypedTable::insert((util::UntypedTable *)(a1 + 8), v12, 0);
  v17 = *(_QWORD *)(a1 + 224);
  if (*(_QWORD *)(a1 + 232) < (unint64_t)(v17 + 1))
  {
    AG::vector<std::pair<char const*,unsigned long>,8ul,unsigned long>::reserve_slow((void *)(a1 + 88), v17 + 1);
    v17 = *(_QWORD *)(a1 + 224);
  }
  v18 = v10 & 0xFF00FFFF | (a4 << 16);
  v19 = *(_QWORD *)(a1 + 216);
  if (!v19)
    v19 = a1 + 88;
  v20 = v19 + 16 * v17;
  *(_QWORD *)v20 = a2;
  *(_DWORD *)(v20 + 8) = v18;
  *(_DWORD *)(v20 + 12) = a5;
  v21 = *(_QWORD *)(a1 + 216);
  v22 = *(_QWORD *)(a1 + 224) + 1;
  *(_QWORD *)(a1 + 224) = v22;
  if (v21)
    v23 = v21;
  else
    v23 = a1 + 88;
  if (!*(_BYTE *)(a1 + 248))
  {
    *(_BYTE *)(a1 + 248) = 1;
    global_queue = dispatch_get_global_queue(-2, 0);
  }
  os_unfair_lock_unlock((os_unfair_lock_t)a1);
  return 0;
}

void sub_1AB930AE8(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t AGGraphInternAttributeType(uint64_t a1, uint64_t *a2, uint64_t (*a3)(void))
{
  return AG::Graph::intern_type(a1, a2, a3);
}

uint64_t *util::UntypedTable::lookup(util::UntypedTable *this, uint64_t *a2, void **a3)
{
  uint64_t v6;
  uint64_t **v7;
  uint64_t v8;
  uint64_t *result;

  if (*((_QWORD *)this + 7))
  {
    v6 = (*(uint64_t (**)(uint64_t *))this)(a2);
    v7 = *(uint64_t ***)(*((_QWORD *)this + 6) + 8 * (*((_QWORD *)this + 8) & v6));
    if (*((_BYTE *)this + 77))
    {
      if (v7)
      {
        while (v7[1] != a2)
        {
          v7 = (uint64_t **)*v7;
          if (!v7)
            goto LABEL_12;
        }
        if (a3)
          *a3 = a2;
        return v7[2];
      }
    }
    else if (v7)
    {
      v8 = v6;
      while (v7[3] != (uint64_t *)v8 || !(*((unsigned int (**)(uint64_t *, uint64_t *))this + 1))(v7[1], a2))
      {
        v7 = (uint64_t **)*v7;
        if (!v7)
          goto LABEL_12;
      }
      if (a3)
        *a3 = v7[1];
      return v7[2];
    }
  }
LABEL_12:
  result = 0;
  if (a3)
    *a3 = 0;
  return result;
}

unint64_t util::pointer_hash(util *this, const void *a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;

  v2 = ((unint64_t)this + ~((_QWORD)this << 32)) ^ (((unint64_t)this + ~((_QWORD)this << 32)) >> 22);
  v3 = 9 * ((v2 + ~(v2 << 13)) ^ ((v2 + ~(v2 << 13)) >> 8));
  v4 = (v3 ^ (v3 >> 15)) + ~((v3 ^ (v3 >> 15)) << 27);
  return v4 ^ (v4 >> 31);
}

AG::data::zone *AG::data::vector<AG::OutputEdge>::reserve_slow(unsigned int *a1, AG::data::zone *this, unsigned int a3)
{
  unsigned int v4;
  int v5;
  int v6;
  int v7;
  unsigned int v8;
  AG::data::zone *result;
  unsigned int v10;
  unsigned int v11;

  v4 = 32 - __clz(a3 - 1);
  v5 = 4 << *a1;
  v6 = *a1 & 0x1F;
  if (a3 <= 1)
    v7 = 1;
  else
    v7 = v4;
  v11 = a1[1];
  if (v6)
    v8 = v5;
  else
    v8 = 0;
  result = AG::data::zone::realloc_bytes(this, &v11, v8, 4 << v7, 3);
  v10 = v11;
  *a1 = *a1 & 0xFFFFFFE0 | v7;
  a1[1] = v10;
  return result;
}

AG::data::zone *AG::data::zone::realloc_bytes(AG::data::zone *this, _DWORD *a2, unsigned int a3, unsigned int a4, int a5)
{
  AG::data::zone *v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  _DWORD *v15;

  if (a4 > a3)
  {
    v7 = this;
    if (*a2
      && (v8 = AG::data::_shared_table_bytes + (*a2 & 0xFFFFFE00),
          v9 = *a2 & 0x1FF,
          v10 = *(_DWORD *)(v8 + 16),
          v10 == v9 + a3)
      && *(_DWORD *)(v8 + 12) - v9 >= a4)
    {
      *(_DWORD *)(v8 + 16) = a4 - a3 + v10;
    }
    else
    {
      this = (AG::data::zone *)AG::data::zone::alloc_bytes_recycle(this, a4, a5);
      v11 = (int)this;
      v12 = *a2;
      if ((_DWORD)v12)
      {
        this = (AG::data::zone *)memcpy((void *)(AG::data::_shared_table_bytes + this), (const void *)(AG::data::_shared_table_bytes + v12), a3);
        v13 = (*a2 + 3) & 0xFFFFFFFC;
        v14 = *a2 - v13 + a3;
        if (v14 >= 8)
        {
          v15 = (_DWORD *)(AG::data::_shared_table_bytes + v13);
          v15[1] = v14;
          *v15 = *((_DWORD *)v7 + 5);
          *((_DWORD *)v7 + 5) = v13;
        }
      }
      *a2 = v11;
    }
  }
  return this;
}

uint64_t AG::data::zone::alloc_bytes_recycle(AG::data::zone *this, unsigned int a2, int a3)
{
  _DWORD *v3;
  unsigned int v4;
  uint64_t v5;
  _DWORD *v6;
  _DWORD *v7;
  unsigned int v8;
  uint64_t v9;
  int v10;
  BOOL v11;
  int v12;
  uint64_t v13;
  int v14;
  int v16;
  uint64_t v17;
  int v18;
  _DWORD *v19;

  v3 = (_DWORD *)((char *)this + 20);
  v4 = *((_DWORD *)this + 5);
  if (v4)
  {
    v5 = AG::data::_shared_table_bytes;
    v6 = (_DWORD *)((char *)this + 20);
    while (1)
    {
      v7 = v6;
      v6 = (_DWORD *)(AG::data::_shared_table_bytes + v4);
      v8 = v6[1];
      if (a2 <= v8)
      {
        v9 = (v4 + a3) & ~a3;
        v10 = v8 + v4 - v9;
        v11 = __OFSUB__(v10, a2);
        v12 = v10 - a2;
        if (v12 < 0 == v11 && a2 - v8 <= 0xFF)
          break;
      }
      v4 = *v6;
      if (!*v6)
        goto LABEL_7;
    }
    *v7 = *v6;
    v16 = v9 + a2;
    if ((((_DWORD)v9 + a2) ^ v9) <= 0x1FF)
    {
      v17 = (v16 + 3) & 0xFFFFFFFC;
      v18 = v12 + v16 - v17;
      if (v18 >= 8)
      {
        v19 = (_DWORD *)(v5 + v17);
        v19[1] = v18;
        *v19 = *v3;
        *v3 = v17;
      }
    }
  }
  else
  {
LABEL_7:
    v13 = *((unsigned int *)this + 4);
    if (!(_DWORD)v13)
      return AG::data::zone::alloc_slow(this, a2, a3);
    v14 = (*(_DWORD *)(AG::data::_shared_table_bytes + v13 + 16) + a3) & ~a3;
    if (v14 + a2 > *(_DWORD *)(AG::data::_shared_table_bytes + v13 + 12))
      return AG::data::zone::alloc_slow(this, a2, a3);
    *(_DWORD *)(AG::data::_shared_table_bytes + v13 + 16) = v14 + a2;
    return (v14 + v13);
  }
  return v9;
}

AG::data::zone *AG::data::vector<AG::InputEdge>::reserve_slow(unsigned int *a1, AG::data::zone *this, unsigned int a3)
{
  unsigned int v4;
  int v5;
  int v6;
  int v7;
  unsigned int v8;
  AG::data::zone *result;
  unsigned int v10;
  unsigned int v11;

  v4 = 32 - __clz(a3 - 1);
  v5 = 5 << *a1;
  v6 = *a1 & 0x1F;
  if (a3 <= 1)
    v7 = 1;
  else
    v7 = v4;
  v11 = a1[1];
  if (v6)
    v8 = v5;
  else
    v8 = 0;
  result = AG::data::zone::realloc_bytes(this, &v11, v8, 5 << v7, 0);
  v10 = v11;
  *a1 = *a1 & 0xFFFFFFE0 | v7;
  a1[1] = v10;
  return result;
}

void AG::Subgraph::add_indirect(uint64_t a1, unsigned int a2, int a3)
{
  uint64_t v5;
  int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;

  AG::Subgraph::insert_attribute(a1, a2 & 0xFFFFFFFE | 1, a3);
  v5 = *(_QWORD *)(a1 + 40);
  v6 = *(_DWORD *)(v5 + 232);
  if (v6)
  {
    v7 = v6 - 1;
    do
    {
      v8 = v7;
      v9 = *(_QWORD *)(*(_QWORD *)(v5 + 224) + 8 * v7);
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v9 + 288))(v9, a2);
      --v7;
    }
    while (v8);
  }
}

uint64_t util::UntypedTable::insert(util::UntypedTable *this, void *a2, void *a3)
{
  uint64_t v6;
  _QWORD *v7;
  util::Heap *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  void (*v14)(_QWORD);
  void (*v15)(_QWORD);

  if (!*((_QWORD *)this + 6))
    util::UntypedTable::create_buckets(this);
  v6 = (*(uint64_t (**)(void *))this)(a2);
  v7 = *(_QWORD **)(*((_QWORD *)this + 6) + 8 * (*((_QWORD *)this + 8) & v6));
  if (v7)
  {
    while (v7[3] != v6 || !(*((unsigned int (**)(_QWORD, void *))this + 1))(v7[1], a2))
    {
      v7 = (_QWORD *)*v7;
      if (!v7)
        goto LABEL_7;
    }
    v14 = (void (*)(_QWORD))*((_QWORD *)this + 2);
    if (v14)
      v14(v7[1]);
    v15 = (void (*)(_QWORD))*((_QWORD *)this + 3);
    if (v15)
      v15(v7[2]);
    result = 0;
    v7[1] = a2;
    v7[2] = a3;
  }
  else
  {
LABEL_7:
    if (*((_QWORD *)this + 7) + 1 > (unint64_t)(4 << *((_DWORD *)this + 18)))
      util::UntypedTable::grow_buckets(this);
    v8 = (util::Heap *)*((_QWORD *)this + 4);
    if (!v8)
    {
      v8 = (util::Heap *)operator new();
      util::Heap::Heap(v8, 0, 0, 0x400uLL);
      *((_QWORD *)this + 4) = v8;
    }
    v9 = (char *)*((_QWORD *)this + 5);
    if (v9)
      *((_QWORD *)this + 5) = *(_QWORD *)v9;
    else
      v9 = util::Heap::alloc_(v8, 0x20uLL);
    *((_QWORD *)v9 + 1) = a2;
    *((_QWORD *)v9 + 2) = a3;
    *((_QWORD *)v9 + 3) = v6;
    v10 = *((_QWORD *)this + 7);
    v11 = *((_QWORD *)this + 8) & v6;
    v12 = *((_QWORD *)this + 6);
    *(_QWORD *)v9 = *(_QWORD *)(v12 + 8 * v11);
    *(_QWORD *)(v12 + 8 * v11) = v9;
    *((_QWORD *)this + 7) = v10 + 1;
    return 1;
  }
  return result;
}

void sub_1AB9310D0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF431538](v1, 0x1030C4075AECAACLL);
  _Unwind_Resume(a1);
}

char *util::Heap::alloc_(util::Heap *this, size_t a2)
{
  size_t v4;
  BOOL v5;
  size_t v6;
  _QWORD *v7;
  char *result;
  void *v9;
  uint64_t v10;
  _QWORD *v11;

  v4 = *((_QWORD *)this + 3);
  v5 = v4 >= a2;
  v6 = v4 - a2;
  if (v5)
  {
    result = (char *)*((_QWORD *)this + 2);
    *((_QWORD *)this + 2) = &result[a2];
    *((_QWORD *)this + 3) = v6;
  }
  else if (a2 < 0x401)
  {
    v9 = malloc_type_malloc(*(_QWORD *)this, 0x3D2812E6uLL);
    v10 = *(_QWORD *)this;
    *((_QWORD *)this + 2) = v9;
    *((_QWORD *)this + 3) = v10;
    v11 = (_QWORD *)util::Heap::alloc_(this, 0x10uLL);
    result = (char *)*((_QWORD *)this + 2);
    *v11 = *((_QWORD *)this + 1);
    v11[1] = v9;
    *((_QWORD *)this + 1) = v11;
    *((_QWORD *)this + 2) = &result[a2];
    *((_QWORD *)this + 3) -= a2;
  }
  else
  {
    v7 = (_QWORD *)util::Heap::alloc_(this, 0x10uLL);
    result = (char *)malloc_type_malloc(a2, 0xD522008BuLL);
    if (result)
    {
      *v7 = *((_QWORD *)this + 1);
      v7[1] = result;
      *((_QWORD *)this + 1) = v7;
    }
  }
  return result;
}

uint64_t AG::LayoutDescriptor::make_layout(AG::swift::metadata *a1, uint64_t a2, int a3)
{
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  void **v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char v15;
  unsigned int v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  unint64_t v21;
  void **v23;
  uint64_t (**v24)(AG::swift::metadata_visitor *__hidden);
  unsigned int v25;
  int v26;
  __int128 v27;
  void *v28[2];
  __int128 v29;

  v5 = AG::LayoutDescriptor::mode_for_type(a1, a2);
  v24 = &off_1E5A601A0;
  v25 = v5;
  v26 = a3;
  v27 = 0u;
  *(_OWORD *)v28 = 0u;
  v29 = 0u;
  if (a3 == 2)
  {
    v15 = AG::swift::metadata::visit_heap(a1, (AG::swift::metadata_visitor *)&v24, 2);
  }
  else if (a3 == 1)
  {
    if ((unint64_t)(*(_QWORD *)a1 - 2048) <= 0xFFFFFFFFFFFFF800)
    {
      v16 = (*(_BYTE *)(*((_QWORD *)a1 - 1) + 82) & 1) != 0 ? 2 : 3;
      if (v5 >= v16)
      {
        v7 = AG::swift::metadata::equatable(a1);
        if (v7)
        {
          v8 = v27;
          if (v28[0])
            v9 = (void **)((char *)v28[0] + 16);
          else
            v9 = &v28[1];
          v10 = *(_QWORD *)(*((_QWORD *)a1 - 1) + 64);
          if (v28[0])
            v11 = (uint64_t *)((char *)v28[0] + 24);
          else
            v11 = (uint64_t *)&v29;
          v12 = *v11;
          v13 = *v11 + 1;
          v17 = (char *)v28[0] + 32;
          if (!v28[0])
            v17 = (char *)&v29 + 8;
          if (*(_QWORD *)v17 >= v13)
            goto LABEL_35;
LABEL_48:
          v23 = v9;
          AG::vector<std::variant<AG::LayoutDescriptor::Builder::DataItem,AG::LayoutDescriptor::Builder::EqualsItem,AG::LayoutDescriptor::Builder::IndirectItem,AG::LayoutDescriptor::Builder::ExistentialItem,AG::LayoutDescriptor::Builder::HeapRefItem,AG::LayoutDescriptor::Builder::NestedItem,AG::LayoutDescriptor::Builder::EnumItem>,0ul,unsigned long>::reserve_slow((uint64_t)v9, v13);
          v12 = *v11;
          v9 = v23;
LABEL_35:
          v18 = (uint64_t)*v9 + 56 * v12;
          *(_QWORD *)v18 = v8;
          *(_QWORD *)(v18 + 8) = v10;
          *(_QWORD *)(v18 + 16) = a1;
          *(_QWORD *)(v18 + 24) = v7;
          *(_DWORD *)(v18 + 48) = 1;
          ++*v11;
LABEL_39:
          v19 = AG::LayoutDescriptor::Builder::commit((AG::LayoutDescriptor::Builder *)&v24, a1);
          goto LABEL_41;
        }
      }
    }
    v15 = AG::swift::metadata::visit_heap(a1, (AG::swift::metadata_visitor *)&v24, 5);
  }
  else
  {
    if (a3)
      goto LABEL_40;
    if ((*(_BYTE *)(*((_QWORD *)a1 - 1) + 82) & 1) != 0)
      v6 = 2;
    else
      v6 = 3;
    if (v5 >= v6)
    {
      v7 = AG::swift::metadata::equatable(a1);
      if (v7)
      {
        v8 = v27;
        if (v28[0])
          v9 = (void **)((char *)v28[0] + 16);
        else
          v9 = &v28[1];
        v10 = *(_QWORD *)(*((_QWORD *)a1 - 1) + 64);
        if (v28[0])
          v11 = (uint64_t *)((char *)v28[0] + 24);
        else
          v11 = (uint64_t *)&v29;
        v12 = *v11;
        v13 = *v11 + 1;
        v14 = (char *)v28[0] + 32;
        if (!v28[0])
          v14 = (char *)&v29 + 8;
        if (*(_QWORD *)v14 >= v13)
          goto LABEL_35;
        goto LABEL_48;
      }
    }
    v15 = AG::swift::metadata::visit(a1, (AG::swift::metadata_visitor *)&v24);
  }
  if ((v15 & 1) != 0)
    goto LABEL_39;
LABEL_40:
  v19 = 0;
LABEL_41:
  v24 = &off_1E5A601A0;
  v20 = v28[1];
  if ((_QWORD)v29)
  {
    v21 = 0;
    do
    {
      ++v21;
      v20 = (void *)(std::__variant_detail::__dtor<std::__variant_detail::__traits<AG::LayoutDescriptor::Builder::DataItem,AG::LayoutDescriptor::Builder::EqualsItem,AG::LayoutDescriptor::Builder::IndirectItem,AG::LayoutDescriptor::Builder::ExistentialItem,AG::LayoutDescriptor::Builder::HeapRefItem,AG::LayoutDescriptor::Builder::NestedItem,AG::LayoutDescriptor::Builder::EnumItem>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)v20)
                   + 56);
    }
    while (v21 < (unint64_t)v29);
    v20 = v28[1];
  }
  if (v20)
    free(v20);
  return v19;
}

void sub_1AB931404(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  AG::LayoutDescriptor::Builder::~Builder((AG::LayoutDescriptor::Builder *)va);
  _Unwind_Resume(a1);
}

uint64_t std::__variant_detail::__dtor<std::__variant_detail::__traits<AG::LayoutDescriptor::Builder::DataItem,AG::LayoutDescriptor::Builder::EqualsItem,AG::LayoutDescriptor::Builder::IndirectItem,AG::LayoutDescriptor::Builder::ExistentialItem,AG::LayoutDescriptor::Builder::HeapRefItem,AG::LayoutDescriptor::Builder::NestedItem,AG::LayoutDescriptor::Builder::EnumItem>,(std::__variant_detail::_Trait)1>::~__dtor(uint64_t a1)
{
  uint64_t v2;
  char v4;

  v2 = *(unsigned int *)(a1 + 48);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, uint64_t))off_1E5A60860[v2])(&v4, a1);
  *(_DWORD *)(a1 + 48) = -1;
  return a1;
}

uint64_t AG::swift::metadata::visit(AG::swift::metadata *this, AG::swift::metadata_visitor *a2)
{
  uint64_t v4;
  _DWORD *v5;
  _DWORD *v6;
  _DWORD *v7;
  uint64_t v8;
  char *v9;
  unsigned __int8 v10;
  uint64_t v11;
  uint64_t (*v12)(AG::swift::metadata_visitor *, AG::swift::metadata *);
  _DWORD *v13;
  _DWORD *v14;
  uint64_t v15;
  _DWORD *v16;
  unint64_t v17;
  char *v18;
  unint64_t v19;
  BOOL v22;
  unint64_t v24;
  uint64_t v25;
  _DWORD *v26;
  unint64_t v27;
  char *v28;
  unint64_t v29;
  char v30;

  v4 = *(_QWORD *)this;
  if (*(_QWORD *)this > 0x7FFuLL)
    v4 = 0;
  if (v4 > 767)
  {
    switch(v4)
    {
      case 768:
        if ((v10 & 1) == 0
        {
          AG::swift::metadata::visit(AG::swift::metadata_visitor &)const::native_object = AG::swift::metadata::mangled_type_name_ref(this, "Bo", 1, 0);
        }
        v11 = *(_QWORD *)a2;
        if ((AG::swift::metadata *)AG::swift::metadata::visit(AG::swift::metadata_visitor &)const::native_object != this)
          return (*(uint64_t (**)(AG::swift::metadata_visitor *))v11)(a2);
        v12 = *(uint64_t (**)(AG::swift::metadata_visitor *, AG::swift::metadata *))(v11 + 56);
        return v12(a2, this);
      case 769:
        v17 = *((_QWORD *)this + 1);
        if (!v17)
          return 1;
        v18 = (char *)this + 48;
        v19 = 1;
        break;
      case 770:
        v12 = *(uint64_t (**)(AG::swift::metadata_visitor *, AG::swift::metadata *))(*(_QWORD *)a2 + 48);
        return v12(a2, this);
      case 771:
        v12 = *(uint64_t (**)(AG::swift::metadata_visitor *, AG::swift::metadata *))(*(_QWORD *)a2 + 40);
        return v12(a2, this);
      default:
        goto LABEL_44;
    }
    while (1)
    {
      if (*((_QWORD *)v18 - 3))
      {
        if (!(*(unsigned int (**)(AG::swift::metadata_visitor *))(*(_QWORD *)a2 + 8))(a2))
          return 0;
        v17 = *((_QWORD *)this + 1);
      }
      v18 += 16;
      if (v19++ >= v17)
        return 1;
    }
  }
  if ((unint64_t)(v4 - 513) < 2)
  {
    v13 = (_DWORD *)AG::swift::metadata::descriptor(this);
    if (v13)
    {
      if ((*v13 & 0x1Fu) - 17 <= 1)
      {
        v14 = v13 + 4;
        v15 = (int)v13[4];
        if ((_DWORD)v15)
        {
          v16 = (v15 & 3) == 1
              ? *(_DWORD **)((char *)v14 + (v15 & 0xFFFFFFFFFFFFFFFCLL))
              : (_DWORD *)((char *)v14 + v15);
          if ((v13[5] & 0xFFFFFF) != 0)
          {
            v24 = v16[3];
            if ((_DWORD)v24)
            {
              v25 = 0;
              v22 = 0;
              v26 = v16 + 4;
              do
              {
                if (v26[1]
                  && !(*(unsigned int (**)(AG::swift::metadata_visitor *, AG::swift::metadata *, _DWORD *, uint64_t))(*(_QWORD *)a2 + 24))(a2, this, v26, v25))
                {
                  break;
                }
                v22 = ++v25 >= v24;
                v26 += 3;
              }
              while (v24 != v25);
            }
            else
            {
              return 1;
            }
            return v22;
          }
        }
      }
    }
    goto LABEL_44;
  }
  if (v4)
  {
    if (v4 == 512)
    {
      v5 = (_DWORD *)AG::swift::metadata::descriptor(this);
      if (v5)
      {
        v6 = v5;
        if ((*v5 & 0x1Fu) - 17 <= 1)
        {
          v7 = v5 + 4;
          v8 = (int)v5[4];
          if ((_DWORD)v8)
          {
            if (v5[6] && v5[5])
            {
              if ((v8 & 3) == 1)
                v9 = *(char **)((char *)v7 + (v8 & 0xFFFFFFFFFFFFFFFCLL));
              else
                v9 = (char *)v7 + v8;
              v27 = 0;
              v28 = v9 + 16;
              do
              {
                v29 = v6[5];
                v22 = v27 >= v29;
                if (v27 >= v29)
                  break;
                v30 = (*(uint64_t (**)(AG::swift::metadata_visitor *, AG::swift::metadata *, char *))(*(_QWORD *)a2 + 16))(a2, this, v28);
                v28 += 12;
                ++v27;
              }
              while ((v30 & 1) != 0);
              return v22;
            }
          }
        }
      }
    }
LABEL_44:
    v11 = *(_QWORD *)a2;
    return (*(uint64_t (**)(AG::swift::metadata_visitor *))v11)(a2);
  }
  v12 = *(uint64_t (**)(AG::swift::metadata_visitor *, AG::swift::metadata *))(*(_QWORD *)a2 + 32);
  return v12(a2, this);
}

void sub_1AB9317D4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t AG::swift::metadata_visitor::visit_field(uint64_t a1, AG::swift::metadata *a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  uint64_t v6;
  _BYTE *v7;
  BOOL v8;
  _QWORD *v11;
  unint64_t v12;
  unint64_t v13;
  unsigned int v15;

  v6 = *(int *)(a3 + 4);
  v7 = (_BYTE *)(v6 + a3 + 4);
  if ((_DWORD)v6)
    v8 = v7 == 0;
  else
    v8 = 1;
  if (v8)
    return (**(uint64_t (***)(uint64_t))a1)(a1);
  v15 = 0;
  v11 = (_QWORD *)AG::swift::metadata::mangled_type_name_ref(a2, v7, 0, (int *)&v15);
  if (!v11)
    return (**(uint64_t (***)(uint64_t))a1)(a1);
  if (*(_QWORD *)(*(v11 - 1) + 64) >= a5)
    v12 = a5;
  else
    v12 = *(_QWORD *)(*(v11 - 1) + 64);
  if (*v11 == 772)
    v13 = v12;
  else
    v13 = *(_QWORD *)(*(v11 - 1) + 64);
  return (*(uint64_t (**)(uint64_t, _QWORD *, _QWORD, uint64_t, unint64_t))(*(_QWORD *)a1 + 8))(a1, v11, v15, a4, v13);
}

uint64_t AG::swift::metadata::mangled_type_name_ref(AG::swift::metadata *a1, _BYTE *a2, int a3, int *a4)
{
  AG::swift::class_type_descriptor *v8;
  AG::swift::class_type_descriptor *v9;
  int v10;
  char *v11;
  uint64_t v12;
  unsigned int v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  BOOL v18;
  unsigned __int8 *v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  char v23;
  std::string::size_type v24;
  uint64_t TypeName;
  const char *v26;
  std::string *v27;
  int v28;
  int v29;
  int *v31;
  std::string v32;

  if (!a2)
    return 0;
  v8 = (AG::swift::class_type_descriptor *)AG::swift::metadata::descriptor(a1);
  v9 = v8;
  if (!v8 || (*(_DWORD *)v8 & 0x80) == 0)
    goto LABEL_9;
  v10 = *(_DWORD *)v8 & 0x1F;
  if ((v10 - 17) < 2)
  {
    v11 = (char *)a1 + 16;
    goto LABEL_10;
  }
  if (v10 == 16)
    v11 = (char *)a1 + 8 * AG::swift::class_type_descriptor::immediate_members_offset(v8);
  else
LABEL_9:
    v11 = 0;
LABEL_10:
  v13 = *a2;
  v14 = a2;
  if (*a2)
  {
    v14 = a2;
    do
    {
      if (v13 >= 0x20)
        v15 = 1;
      else
        v15 = 9;
      if (v13 >= 0x18)
        v16 = v15;
      else
        v16 = 5;
      v14 += v16;
      v13 = *v14;
    }
    while (*v14);
  }
  v17 = v14 - a2;
  v12 = MEMORY[0x1AF431BB0](a2, v14 - a2, v9, v11);
  if (v12)
    v18 = 1;
  else
    v18 = a3 == 0;
  if (!v18)
  {
    memset(&v32, 0, sizeof(v32));
    if (v14 == a2)
    {
      v24 = 0;
      v23 = 0;
    }
    else
    {
      v31 = a4;
      v19 = a2;
      v20 = v14 - a2;
      do
      {
        v22 = *v19++;
        v21 = v22;
        if (v22 == 92)
        {
          std::string::append(&v32, "\\\\", 2uLL);
        }
        else
        {
          if (v21 - 32 > 0x5E)
          {
            std::string::push_back(&v32, 92);
            std::string::push_back(&v32, (v21 >> 6) | 0x30);
            std::string::push_back(&v32, (v21 >> 3) & 7 | 0x30);
            LOBYTE(v21) = v21 & 7 | 0x30;
          }
          std::string::push_back(&v32, v21);
        }
        --v20;
      }
      while (v20);
      v23 = HIBYTE(v32.__r_.__value_.__r.__words[2]);
      a4 = v31;
      v24 = v32.__r_.__value_.__r.__words[0];
    }
    TypeName = swift_getTypeName();
    v27 = &v32;
    if (v23 < 0)
      v27 = (std::string *)v24;
    AG::non_fatal_precondition_failure((AG *)"Swift metadata failure: \"%s\", context %s (%p), args %p", v26, v27, TypeName, v9, v11);
    if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v32.__r_.__value_.__l.__data_);
  }
  if (a4)
  {
    if (v12)
    {
      *a4 = 0;
      if (v17 >= 3 && a2[v17 - 2] == 88)
      {
        v28 = (char)a2[v17 - 1];
        switch(v28)
        {
          case 'o':
            v29 = 2;
            goto LABEL_47;
          case 'w':
            v29 = 1;
            goto LABEL_47;
          case 'u':
            v29 = 3;
LABEL_47:
            *a4 = v29;
            break;
        }
      }
    }
  }
  return v12;
}

void sub_1AB931AE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t AG::LayoutDescriptor::mode_for_type(AG::swift::metadata *a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  os_unfair_lock_s *v6;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  unint64_t v10;
  unint64_t *v11;
  _QWORD *v12;
  unint64_t v13;

  if (a1)
  {
    v3 = AG::swift::metadata::descriptor(a1);
    if (v3)
    {
      v4 = v3;
      v7 = *(_QWORD *)(v5 + 264);
      if (v7)
      {
        v8 = *(_QWORD **)(v5 + 256);
        v9 = &v8[2 * v7];
        do
        {
          v10 = v7 >> 1;
          v11 = &v8[2 * (v7 >> 1)];
          v13 = *v11;
          v12 = v11 + 2;
          v7 += ~(v7 >> 1);
          if (v4 > v13)
            v8 = v12;
          else
            v7 = v10;
        }
        while (v7);
        if (v8 != v9 && *v8 == v4)
          a2 = *((unsigned int *)v8 + 2);
      }
      os_unfair_lock_unlock(v6);
    }
  }
  return a2;
}

uint64_t AG::swift::metadata::descriptor(AG::swift::metadata *this)
{
  uint64_t v1;
  char *v2;
  uint64_t v3;

  if (*(_QWORD *)this <= 0x7FFuLL)
    v1 = *(_QWORD *)this;
  else
    v1 = 0;
  if ((unint64_t)(v1 - 512) >= 3)
  {
    v3 = 0;
    if (v1)
      return v3;
    if ((*((_BYTE *)this + 32) & 3) == 0)
      return 0;
    v2 = (char *)this + 64;
  }
  else
  {
    v2 = (char *)this + 8;
  }
  return *(_QWORD *)v2;
}

uint64_t AG::LayoutDescriptor::Builder::visit_element(AG::LayoutDescriptor::Builder *this, AG::swift::metadata *a2, int a3, uint64_t a4, uint64_t a5)
{
  unsigned int v9;
  uint64_t v10;
  AG::LayoutDescriptor::Builder *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  unint64_t i;
  unint64_t v20;
  BOOL v21;
  __int128 v23;

  if (a5)
  {
    *((_QWORD *)this + 2) += a4;
    if (a3)
    {
      AG::LayoutDescriptor::Builder::add_field(this, a5);
    }
    else
    {
      v9 = *((_DWORD *)this + 2);
      *((_DWORD *)this + 2) = AG::LayoutDescriptor::mode_for_type(a2, v9);
      if (AG::LayoutDescriptor::Builder::should_visit_fields(this, a2, 0))
      {
        v10 = *((_QWORD *)this + 4);
        v11 = v10 ? (AG::LayoutDescriptor::Builder *)(v10 + 16) : (AG::LayoutDescriptor::Builder *)((char *)this + 40);
        v12 = *((_QWORD *)v11 + 1);
        if (v12 && (v13 = *(_QWORD *)v11) != 0 && (v14 = v13 + 56 * v12 - 56, !*(_DWORD *)(v14 + 48)))
        {
          v16 = *(_QWORD *)v14;
          v15 = *(_QWORD *)(v14 + 8);
        }
        else
        {
          v15 = 0;
          v16 = -1;
        }
        if ((AG::swift::metadata::visit(a2, this) & 1) == 0)
        {
          *(_QWORD *)&v23 = v16;
          *((_QWORD *)&v23 + 1) = v15;
          v17 = *((_QWORD *)this + 4);
          if (v17)
            v18 = (_QWORD *)(v17 + 16);
          else
            v18 = (_QWORD *)((char *)this + 40);
          for (i = v18[1]; i > v12; i = v18[1])
          {
            v20 = i - 1;
            v18[1] = v20;
            std::__variant_detail::__dtor<std::__variant_detail::__traits<AG::LayoutDescriptor::Builder::DataItem,AG::LayoutDescriptor::Builder::EqualsItem,AG::LayoutDescriptor::Builder::IndirectItem,AG::LayoutDescriptor::Builder::ExistentialItem,AG::LayoutDescriptor::Builder::HeapRefItem,AG::LayoutDescriptor::Builder::NestedItem,AG::LayoutDescriptor::Builder::EnumItem>,(std::__variant_detail::_Trait)1>::~__dtor(*v18 + 56 * v20);
          }
          if (i)
            v21 = v16 == -1;
          else
            v21 = 1;
          if (!v21)
            std::variant<AG::LayoutDescriptor::Builder::DataItem,AG::LayoutDescriptor::Builder::EqualsItem,AG::LayoutDescriptor::Builder::IndirectItem,AG::LayoutDescriptor::Builder::ExistentialItem,AG::LayoutDescriptor::Builder::HeapRefItem,AG::LayoutDescriptor::Builder::NestedItem,AG::LayoutDescriptor::Builder::EnumItem>::operator=[abi:ne180100]<AG::LayoutDescriptor::Builder::DataItem&,0,AG::LayoutDescriptor::Builder::DataItem,0ul,0>(*v18 + 56 * i - 56, &v23);
          AG::LayoutDescriptor::Builder::add_field(this, a5);
        }
      }
      *((_DWORD *)this + 2) = v9;
    }
    *((_QWORD *)this + 2) -= a4;
  }
  return 1;
}

void sub_1AB931DA4(_Unwind_Exception *a1)
{
  uint64_t v1;
  int v2;

  *(_DWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t AG::LayoutDescriptor::Builder::should_visit_fields(AG::LayoutDescriptor::Builder *this, const AG::swift::metadata *a2, char a3)
{
  AG *v5;
  AG *v6;
  uint64_t result;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  AG *v26;

  if ((a3 & 1) != 0
    || (v5 = AG::LayoutDescriptor::fetch(a2, (const AG::swift::metadata *)(*((_DWORD *)this + 2) | 0x80000200), 1)) == 0)
  {
    if ((*(_BYTE *)(*((_QWORD *)a2 - 1) + 82) & 1) != 0)
      v8 = 2;
    else
      v8 = 3;
    if (*((_DWORD *)this + 2) < v8)
      return 1;
    v9 = AG::swift::metadata::equatable(a2);
    if (!v9)
      return 1;
    v10 = v9;
    v11 = *((_QWORD *)this + 4);
    if (v11)
      v12 = (_QWORD *)(v11 + 16);
    else
      v12 = (_QWORD *)((char *)this + 40);
    v13 = *((_QWORD *)this + 2);
    v14 = *(_QWORD *)(*((_QWORD *)a2 - 1) + 64);
    v15 = v12[1];
    if (v12[2] < (unint64_t)(v15 + 1))
    {
      v23 = *(_QWORD *)(*((_QWORD *)a2 - 1) + 64);
      v25 = v9;
      v22 = v12;
      AG::vector<std::variant<AG::LayoutDescriptor::Builder::DataItem,AG::LayoutDescriptor::Builder::EqualsItem,AG::LayoutDescriptor::Builder::IndirectItem,AG::LayoutDescriptor::Builder::ExistentialItem,AG::LayoutDescriptor::Builder::HeapRefItem,AG::LayoutDescriptor::Builder::NestedItem,AG::LayoutDescriptor::Builder::EnumItem>,0ul,unsigned long>::reserve_slow((uint64_t)v12, v15 + 1);
      v12 = v22;
      v14 = v23;
      v10 = v25;
      v15 = v22[1];
    }
    result = 0;
    v16 = *v12 + 56 * v15;
    *(_QWORD *)v16 = v13;
    *(_QWORD *)(v16 + 8) = v14;
    *(_QWORD *)(v16 + 16) = a2;
    *(_QWORD *)(v16 + 24) = v10;
    *(_DWORD *)(v16 + 48) = 1;
  }
  else
  {
    v6 = v5;
    if (v5 == (AG *)1)
    {
      AG::LayoutDescriptor::Builder::add_field(this, *(_QWORD *)(*((_QWORD *)a2 - 1) + 64));
      return 0;
    }
    v17 = *((_QWORD *)this + 4);
    if (v17)
      v12 = (_QWORD *)(v17 + 16);
    else
      v12 = (_QWORD *)((char *)this + 40);
    v18 = *((_QWORD *)this + 2);
    v19 = *(_QWORD *)(*((_QWORD *)a2 - 1) + 64);
    v20 = v12[1];
    if (v12[2] < (unint64_t)(v20 + 1))
    {
      v24 = v12;
      v26 = v5;
      AG::vector<std::variant<AG::LayoutDescriptor::Builder::DataItem,AG::LayoutDescriptor::Builder::EqualsItem,AG::LayoutDescriptor::Builder::IndirectItem,AG::LayoutDescriptor::Builder::ExistentialItem,AG::LayoutDescriptor::Builder::HeapRefItem,AG::LayoutDescriptor::Builder::NestedItem,AG::LayoutDescriptor::Builder::EnumItem>,0ul,unsigned long>::reserve_slow((uint64_t)v12, v20 + 1);
      v12 = v24;
      v6 = v26;
      v20 = v24[1];
    }
    result = 0;
    v21 = *v12 + 56 * v20;
    *(_QWORD *)v21 = v18;
    *(_QWORD *)(v21 + 8) = v19;
    *(_QWORD *)(v21 + 16) = v6;
    *(_DWORD *)(v21 + 48) = 5;
  }
  ++v12[1];
  return result;
}

AG *AG::LayoutDescriptor::fetch(AG::LayoutDescriptor *this, const AG::swift::metadata *a2, int a3)
{
  int v4;

  v4 = (int)a2;
}

void *AG::vector<std::variant<AG::LayoutDescriptor::Builder::DataItem,AG::LayoutDescriptor::Builder::EqualsItem,AG::LayoutDescriptor::Builder::IndirectItem,AG::LayoutDescriptor::Builder::ExistentialItem,AG::LayoutDescriptor::Builder::HeapRefItem,AG::LayoutDescriptor::Builder::NestedItem,AG::LayoutDescriptor::Builder::EnumItem>,0ul,unsigned long>::reserve_slow(uint64_t a1, unint64_t a2)
{
  uint64_t v3;
  void *result;

  if (*(_QWORD *)(a1 + 16) + (*(_QWORD *)(a1 + 16) >> 1) <= a2)
    v3 = a2;
  else
    v3 = *(_QWORD *)(a1 + 16) + (*(_QWORD *)(a1 + 16) >> 1);
  result = AG::details::realloc_vector<unsigned long,56ul>(*(void **)a1, (unint64_t *)(a1 + 16), v3);
  *(_QWORD *)a1 = result;
  return result;
}

void *AG::details::realloc_vector<unsigned long,56ul>(void *a1, unint64_t *a2, uint64_t a3)
{
  void *v4;
  size_t v5;
  unint64_t v6;
  void *v7;
  const char *v8;

  v4 = a1;
  if (a3)
  {
    v5 = malloc_good_size(56 * a3);
    v6 = v5 / 0x38;
    if (v5 / 0x38 != *a2)
    {
      v7 = malloc_type_realloc(v4, v5, 0xF3138078uLL);
      if (!v7)
        AG::precondition_failure((AG *)"allocation failure", v8);
      v4 = v7;
      *a2 = v6;
    }
  }
  else
  {
    *a2 = 0;
    free(a1);
    return 0;
  }
  return v4;
}

uint64_t AG::swift::metadata::equatable(AG::swift::metadata *this)
{
  uint64_t v1;
  uint64_t result;
  unsigned __int8 v3;

  v1 = *(_QWORD *)this;
  if (*(_QWORD *)this > 0x7FFuLL)
    v1 = 0;
  if ((unint64_t)(v1 - 512) < 3)
    return swift_conformsToProtocol();
  if (v1)
  {
    result = 0;
    if (v1 == 769)
      return swift_conformsToProtocol();
  }
  else
  {
    if ((v3 & 1) == 0
    {
      AG::swift::metadata::equatable(void)const::nsobject_conformance = AG::swift::metadata::equatable(void)const::$_1::operator()();
    }
    result = swift_conformsToProtocol();
    if (result == AG::swift::metadata::equatable(void)const::nsobject_conformance)
      return 0;
  }
  return result;
}

void sub_1AB932144(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t AG::LayoutDescriptor::Builder::commit(AG::LayoutDescriptor::Builder *this, const AG::swift::metadata *a2)
{
  size_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  unint64_t v11;
  size_t v12;
  uint64_t v13;
  _BYTE *v14;
  AG::_anonymous_namespace_ *v15;
  uint64_t v16;
  FILE *v17;
  std::string __p;
  _BYTE *v20;
  unint64_t v21;
  BOOL v22;
  _BYTE __dst[512];
  size_t size[2];
  uint64_t v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v4 = *((_QWORD *)this + 6);
  if (*((_DWORD *)this + 3))
  {
    v5 = *((_QWORD *)this + 5);
    if (v4 != 1)
      goto LABEL_12;
  }
  else
  {
    if (!v4)
      return 1;
    if (v4 != 1)
    {
      v5 = *((_QWORD *)this + 5);
      goto LABEL_12;
    }
    v5 = *((_QWORD *)this + 5);
    if (!*(_DWORD *)(v5 + 48))
      return 1;
  }
  if (v5 && *(_DWORD *)(v5 + 48) == 5 && !*(_QWORD *)v5)
    return *(_QWORD *)(v5 + 16);
  v4 = 1;
LABEL_12:
  *(_OWORD *)size = 0u;
  v7 = 512;
  v25 = 512;
  v20 = __dst;
  v21 = 0;
  v22 = 0;
  if (v4)
  {
    v8 = 56 * v4;
    do
    {
      v9 = *(unsigned int *)(v5 + 48);
      if ((_DWORD)v9 == -1)
        std::__throw_bad_variant_access[abi:ne180100]();
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v20;
      ((void (*)(std::string *, uint64_t))off_1E5A60898[v9])(&__p, v5);
      v5 += 56;
      v8 -= 56;
    }
    while (v8);
    v4 = size[1];
    v7 = v25;
  }
  if (v7 < v4 + 1)
  {
    AG::vector<unsigned char,512ul,unsigned long>::reserve_slow(__dst, v4 + 1);
    v4 = size[1];
  }
  v10 = (_BYTE *)size[0];
  if (!size[0])
    v10 = __dst;
  v10[v4] = 0;
  ++size[1];
  if (*((_DWORD *)this + 3))
  {
    if (v22)
    {
      v6 = 0;
      goto LABEL_45;
    }
LABEL_27:
    os_unfair_lock_lock(&AG::LayoutDescriptor::Builder::_lock);
    v12 = size[1];
    if (size[1] < 0x400)
    {
      v13 = AG::LayoutDescriptor::Builder::_avail;
      if (AG::LayoutDescriptor::Builder::_avail >= size[1])
      {
        v6 = AG::LayoutDescriptor::Builder::_buffer;
      }
      else
      {
        AG::LayoutDescriptor::Builder::_avail = 4096;
        v6 = (uint64_t)malloc_type_malloc(0x1000uLL, 0xC3AEE56EuLL);
        AG::LayoutDescriptor::Builder::_buffer = v6;
        v12 = size[1];
        v13 = AG::LayoutDescriptor::Builder::_avail;
      }
      AG::LayoutDescriptor::Builder::_buffer = v6 + v12;
      AG::LayoutDescriptor::Builder::_avail = v13 - v12;
    }
    else
    {
      v6 = (uint64_t)malloc_type_malloc(size[1], 0x229FBE5FuLL);
    }
    os_unfair_lock_unlock(&AG::LayoutDescriptor::Builder::_lock);
    if (size[0])
      v14 = (_BYTE *)size[0];
    else
      v14 = __dst;
    v15 = (AG::_anonymous_namespace_ *)memcpy((void *)v6, v14, size[1]);
    {
      memset(&__p, 0, sizeof(__p));
      AG::LayoutDescriptor::print(&__p, (AG::LayoutDescriptor *)v6);
      if (*((_DWORD *)this + 3))
      {
        fprintf((FILE *)*MEMORY[0x1E0C80C10], "== Unknown heap type %p ==\n%s");
      }
      else
      {
        v16 = AG::swift::metadata::name(a2, 0);
        v17 = (FILE *)*MEMORY[0x1E0C80C10];
        if (v16)
          fprintf(v17, "== %s, %d bytes ==\n%s");
        else
          fprintf(v17, "== Unknown type %p ==\n%s");
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
    }
    goto LABEL_45;
  }
  if (!v22)
  {
    v11 = *(_QWORD *)(*((_QWORD *)a2 - 1) + 64);
    v22 = v21 > v11;
    if (v21 <= v11)
      goto LABEL_27;
  }
  v6 = 1;
LABEL_45:
  if (size[0])
    free((void *)size[0]);
  return v6;
}

void sub_1AB9324A8(_Unwind_Exception *a1)
{
  if (STACK[0x250])
    free((void *)STACK[0x250]);
  _Unwind_Resume(a1);
}

unint64_t AG::Graph::index_of_input_slow(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t result;
  unint64_t v10;
  uint64_t v11;
  unsigned int *v12;
  char *v13;
  unsigned int v14;
  BOOL v15;
  uint64_t v16;

  v4 = *(unsigned int *)(a2 + 12);
  v5 = AG::data::_shared_table_bytes + *(unsigned int *)(a2 + 16);
  v6 = v4 >> 5;
  if ((*(_BYTE *)(a2 + 7) & 8) != 0)
  {
    *(_BYTE *)(a2 + 7) &= ~8u;
    v7 = 126 - 2 * __clz(v6);
    if (v4 >= 0x20)
      v8 = v7;
    else
      v8 = 0;
    std::__introsort<std::_ClassicAlgPolicy,AG::Graph::index_of_input_slow(AG::Node &,AG::InputEdge::Comparator)::$_0 &,AG::InputEdge*,false>(v5, v5 + 5 * v6, v8, 1);
  }
  result = -1;
  if (v4 >= 0x20)
  {
    v10 = v5 + 5 * v6;
    v11 = v5;
    do
    {
      v12 = (unsigned int *)(v11 + 5 * (v6 >> 1));
      v14 = *v12;
      v13 = (char *)v12 + 5;
      v15 = v14 >= a3;
      if (v14 >= a3)
        v6 >>= 1;
      else
        v6 += ~(v6 >> 1);
      if (!v15)
        v11 = (uint64_t)v13;
    }
    while (v6);
    if (v11 != v10)
    {
      v16 = v11 - v5;
      while (*(_DWORD *)v11 == (_DWORD)a3)
      {
        if ((*(_BYTE *)(v11 + 4) & BYTE4(a3)) == BYTE5(a3))
          return 0xCCCCCCCCCCCCCCCDLL * v16;
        v16 += 5;
        v11 += 5;
        if (v11 == v10)
          return -1;
      }
    }
    return -1;
  }
  return result;
}

void *AG::data::zone::alloc_persistent(AG::data::zone *this, size_t a2)
{
  void *v4;
  const char *v5;
  void *v6;
  unsigned int v7;
  unsigned int v8;

  if (!a2)
    return 0;
  v4 = malloc_type_zone_malloc((malloc_zone_t *)AG::data::table::_malloc_zone, a2, 0x331258A3uLL);
  if (!v4)
    AG::precondition_failure((AG *)"memory allocation failure (%lu bytes)", v5, a2);
  v6 = v4;
  v7 = *((_DWORD *)this + 2);
  v8 = v7 + 1;
  if (*((_DWORD *)this + 3) < v7 + 1)
  {
    AG::vector<std::pair<unsigned int,BOOL>,0ul,unsigned int>::reserve_slow((uint64_t)this, v8);
    v7 = *((_DWORD *)this + 2);
    v8 = v7 + 1;
  }
  *(_QWORD *)(*(_QWORD *)this + 8 * v7) = v6;
  *((_DWORD *)this + 2) = v8;
  return v6;
}

_QWORD *AG::LayoutDescriptor::Builder::add_field(_QWORD *this, uint64_t a2)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if (a2)
  {
    v3 = this[4];
    if (v3)
      v4 = (_QWORD *)(v3 + 16);
    else
      v4 = this + 5;
    v5 = v4[1];
    if (v5
      && *v4
      && !*(_DWORD *)(*v4 + 56 * v5 - 8)
      && (v6 = *(_QWORD *)(*v4 + 56 * v5 - 48), v6 + *(_QWORD *)(*v4 + 56 * v5 - 56) == this[2]))
    {
      *(_QWORD *)(*v4 + 56 * v5 - 48) = v6 + a2;
    }
    else
    {
      v7 = this[2];
      if (v4[2] < (unint64_t)(v5 + 1))
      {
        this = AG::vector<std::variant<AG::LayoutDescriptor::Builder::DataItem,AG::LayoutDescriptor::Builder::EqualsItem,AG::LayoutDescriptor::Builder::IndirectItem,AG::LayoutDescriptor::Builder::ExistentialItem,AG::LayoutDescriptor::Builder::HeapRefItem,AG::LayoutDescriptor::Builder::NestedItem,AG::LayoutDescriptor::Builder::EnumItem>,0ul,unsigned long>::reserve_slow((uint64_t)v4, v5 + 1);
        v5 = v4[1];
      }
      v8 = *v4 + 56 * v5;
      *(_QWORD *)v8 = v7;
      *(_QWORD *)(v8 + 8) = a2;
      *(_DWORD *)(v8 + 48) = 0;
      ++v4[1];
    }
  }
  return this;
}

BOOL util::pointer_compare(util *this, util *a2, const void *a3)
{
  return this == a2;
}

uint64_t AG::swift::metadata_visitor::unknown_result(AG::swift::metadata_visitor *this)
{
  return 0;
}

uint64_t AG::LayoutDescriptor::Builder::visit_case(AG::LayoutDescriptor::Builder *this, AG::swift::metadata *a2, int *a3, int a4)
{
  uint64_t result;
  uint64_t v9;
  char *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  _DWORD *v25;
  uint64_t v26;
  uint64_t v27;
  AG::swift::metadata *v28;
  unsigned int v29;
  uint64_t v30;
  char *v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  void *v56;
  uint64_t v57;
  void *v58;
  unint64_t v59;
  unint64_t v60[3];
  __int128 v61;
  AG::swift::metadata *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;

  if (*((_QWORD *)this + 3) > 7uLL)
    return 0;
  v9 = *((_QWORD *)this + 4);
  v10 = (char *)this + 40;
  if (v9)
    v11 = (uint64_t *)(v9 + 16);
  else
    v11 = (uint64_t *)((char *)this + 40);
  if (a4)
  {
    v12 = v11[1];
  }
  else
  {
    v13 = *(_QWORD *)(*((_QWORD *)a2 - 1) + 64);
    *(_QWORD *)&v61 = *((_QWORD *)this + 2);
    *((_QWORD *)&v61 + 1) = v13;
    v62 = a2;
    v63 = 0;
    v64 = 0;
    v65 = 0;
    v14 = v11[1];
    if (v11[2] < (unint64_t)(v14 + 1))
    {
      AG::vector<std::variant<AG::LayoutDescriptor::Builder::DataItem,AG::LayoutDescriptor::Builder::EqualsItem,AG::LayoutDescriptor::Builder::IndirectItem,AG::LayoutDescriptor::Builder::ExistentialItem,AG::LayoutDescriptor::Builder::HeapRefItem,AG::LayoutDescriptor::Builder::NestedItem,AG::LayoutDescriptor::Builder::EnumItem>,0ul,unsigned long>::reserve_slow((uint64_t)v11, v14 + 1);
      v14 = v11[1];
    }
    v15 = *v11 + 56 * v14;
    *(_OWORD *)v15 = v61;
    *(_QWORD *)(v15 + 16) = a2;
    *(_QWORD *)(v15 + 24) = 0;
    *(_QWORD *)(v15 + 32) = 0;
    *(_QWORD *)(v15 + 40) = 0;
    *(_DWORD *)(v15 + 48) = 6;
    v12 = v11[1] + 1;
    v11[1] = v12;
  }
  v16 = *v11 + 56 * v12;
  if (*(_DWORD *)(v16 - 8) != 6)
    std::__throw_bad_variant_access[abi:ne180100]();
  v17 = (_QWORD *)(v16 - 56);
  v18 = *(_QWORD *)(v16 - 24);
  if (v17[5] < (unint64_t)(v18 + 1))
  {
    AG::vector<AG::LayoutDescriptor::Builder::EnumItem::Case,0ul,unsigned long>::reserve_slow((uint64_t)(v17 + 3), v18 + 1);
    v18 = v17[4];
  }
  v19 = v17[3] + 40 * v18;
  v20 = *((_QWORD *)this + 2);
  *(_DWORD *)v19 = a4;
  *(_QWORD *)(v19 + 8) = v20;
  *(_QWORD *)(v19 + 16) = 0;
  *(_QWORD *)(v19 + 24) = 0;
  *(_QWORD *)(v19 + 32) = 0;
  v22 = v17[3];
  v21 = v17[4];
  v17[4] = v21 + 1;
  ++*((_QWORD *)this + 3);
  *((_QWORD *)this + 4) = v22 + 40 * v21;
  v23 = *a3;
  if ((*a3 & 1) != 0 && !*((_DWORD *)this + 2))
  {
    AG::LayoutDescriptor::Builder::add_field(this, 8);
LABEL_43:
    if (!*(_QWORD *)(*((_QWORD *)this + 4) + 24))
    {
      v53 = v17[3];
      v54 = v17[4] - 1;
      v17[4] = v54;
      v55 = v53 + 40 * v54;
      v58 = *(void **)(v55 + 16);
      v57 = v55 + 16;
      v56 = v58;
      if (*(_QWORD *)(v57 + 8))
      {
        v59 = 0;
        do
        {
          ++v59;
          v56 = (void *)(std::__variant_detail::__dtor<std::__variant_detail::__traits<AG::LayoutDescriptor::Builder::DataItem,AG::LayoutDescriptor::Builder::EqualsItem,AG::LayoutDescriptor::Builder::IndirectItem,AG::LayoutDescriptor::Builder::ExistentialItem,AG::LayoutDescriptor::Builder::HeapRefItem,AG::LayoutDescriptor::Builder::NestedItem,AG::LayoutDescriptor::Builder::EnumItem>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)v56)
                       + 56);
        }
        while (v59 < *(_QWORD *)(v57 + 8));
        v56 = *(void **)v57;
      }
      if (v56)
        free(v56);
    }
    result = 1;
    goto LABEL_51;
  }
  v26 = a3[1];
  v25 = a3 + 1;
  v24 = v26;
  if ((_DWORD)v26)
  {
    if ((_DWORD *)((char *)v25 + v24))
    {
      v27 = AG::swift::metadata::mangled_type_name_ref(a2, (_BYTE *)v25 + v24, 0, 0);
      if (v27)
      {
        v28 = (AG::swift::metadata *)v27;
        if ((v23 & 1) != 0)
        {
          if (*(_QWORD *)(*(_QWORD *)(v27 - 8) + 64))
          {
            v48 = (_QWORD *)*((_QWORD *)this + 4);
            v49 = *((_QWORD *)this + 2);
            v50 = *(_QWORD *)(*((_QWORD *)a2 - 1) + 64);
            v51 = v48[3];
            if (v48[4] < (unint64_t)(v51 + 1))
            {
              AG::vector<std::variant<AG::LayoutDescriptor::Builder::DataItem,AG::LayoutDescriptor::Builder::EqualsItem,AG::LayoutDescriptor::Builder::IndirectItem,AG::LayoutDescriptor::Builder::ExistentialItem,AG::LayoutDescriptor::Builder::HeapRefItem,AG::LayoutDescriptor::Builder::NestedItem,AG::LayoutDescriptor::Builder::EnumItem>,0ul,unsigned long>::reserve_slow((uint64_t)(v48 + 2), v51 + 1);
              v51 = v48[3];
            }
            v52 = v48[2] + 56 * v51;
            *(_QWORD *)v52 = v49;
            *(_QWORD *)(v52 + 8) = v50;
            *(_QWORD *)(v52 + 16) = v28;
            *(_DWORD *)(v52 + 48) = 2;
            ++v48[3];
          }
        }
        else
        {
          v29 = *((_DWORD *)this + 2);
          *((_DWORD *)this + 2) = AG::LayoutDescriptor::mode_for_type(a2, v29);
          if (AG::LayoutDescriptor::Builder::should_visit_fields(this, v28, 0))
          {
            v30 = *((_QWORD *)this + 4);
            v31 = v30 ? (char *)(v30 + 16) : v10;
            v32 = *((_QWORD *)v31 + 1);
            if (v32 && (v33 = *(_QWORD *)v31) != 0 && (v34 = v33 + 56 * v32 - 56, !*(_DWORD *)(v34 + 48)))
            {
              v36 = *(_QWORD *)v34;
              v35 = *(_QWORD *)(v34 + 8);
            }
            else
            {
              v35 = 0;
              v36 = -1;
            }
            if ((AG::swift::metadata::visit(v28, this) & 1) == 0)
            {
              v60[0] = v32;
              v60[1] = v36;
              v60[2] = v35;
              AG::LayoutDescriptor::Builder::revert((uint64_t)this, v60);
              v37 = *((_QWORD *)this + 4);
              v38 = *(_QWORD *)(v37 + 24);
              if (v38)
              {
                v39 = *(_QWORD *)(v37 + 16);
                v40 = 56 * v38;
                do
                {
                  v39 = std::__variant_detail::__dtor<std::__variant_detail::__traits<AG::LayoutDescriptor::Builder::DataItem,AG::LayoutDescriptor::Builder::EqualsItem,AG::LayoutDescriptor::Builder::IndirectItem,AG::LayoutDescriptor::Builder::ExistentialItem,AG::LayoutDescriptor::Builder::HeapRefItem,AG::LayoutDescriptor::Builder::NestedItem,AG::LayoutDescriptor::Builder::EnumItem>,(std::__variant_detail::_Trait)1>::~__dtor(v39)
                      + 56;
                  v40 -= 56;
                }
                while (v40);
              }
              *(_QWORD *)(v37 + 24) = 0;
              v41 = *(_QWORD *)(*((_QWORD *)v28 - 1) + 64);
              if (v41)
              {
                v42 = (_QWORD *)*((_QWORD *)this + 4);
                v43 = *((_QWORD *)this + 2);
                v44 = v42[3];
                if (v42[4] < (unint64_t)(v44 + 1))
                {
                  AG::vector<std::variant<AG::LayoutDescriptor::Builder::DataItem,AG::LayoutDescriptor::Builder::EqualsItem,AG::LayoutDescriptor::Builder::IndirectItem,AG::LayoutDescriptor::Builder::ExistentialItem,AG::LayoutDescriptor::Builder::HeapRefItem,AG::LayoutDescriptor::Builder::NestedItem,AG::LayoutDescriptor::Builder::EnumItem>,0ul,unsigned long>::reserve_slow((uint64_t)(v42 + 2), v44 + 1);
                  v44 = v42[3];
                }
                v45 = v42[2] + 56 * v44;
                *(_QWORD *)v45 = v43;
                *(_QWORD *)(v45 + 8) = v41;
                *(_DWORD *)(v45 + 48) = 0;
                ++v42[3];
              }
            }
          }
          *((_DWORD *)this + 2) = v29;
        }
        goto LABEL_43;
      }
    }
  }
  v46 = *v11;
  v47 = v11[1] - 1;
  v11[1] = v47;
  std::__variant_detail::__dtor<std::__variant_detail::__traits<AG::LayoutDescriptor::Builder::DataItem,AG::LayoutDescriptor::Builder::EqualsItem,AG::LayoutDescriptor::Builder::IndirectItem,AG::LayoutDescriptor::Builder::ExistentialItem,AG::LayoutDescriptor::Builder::HeapRefItem,AG::LayoutDescriptor::Builder::NestedItem,AG::LayoutDescriptor::Builder::EnumItem>,(std::__variant_detail::_Trait)1>::~__dtor(v46 + 56 * v47);
  result = 0;
LABEL_51:
  --*((_QWORD *)this + 3);
  *((_QWORD *)this + 4) = v9;
  return result;
}

void sub_1AB932B24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  uint64_t v13;
  int v14;

  *(_DWORD *)(v13 + 8) = v14;
  _Unwind_Resume(exception_object);
}

uint64_t AGTypeApplyFields2::Visitor::visit_field(uint64_t a1, AG::swift::metadata *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  const char *v13;

  v8 = *(int *)(a3 + 4);
  if ((_DWORD)v8)
    v9 = (_BYTE *)(v8 + a3 + 4);
  else
    v9 = 0;
  v10 = AG::swift::metadata::mangled_type_name_ref(a2, v9, 1, 0);
  if (!v10)
    return (**(uint64_t (***)(uint64_t))a1)(a1);
  v11 = v10;
  v12 = *(int *)(a3 + 8);
  if ((_DWORD)v12)
    v13 = (const char *)(v12 + a3 + 8);
  else
    v13 = "";
  return (**(uint64_t (***)(const char *, uint64_t, uint64_t))(a1 + 8))(v13, a4, v11) & 1;
}

double util::UntypedTable::create_buckets(util::UntypedTable *this)
{
  util::Heap *v2;
  char *v3;
  double result;

  if (!*((_QWORD *)this + 6))
  {
    *((_DWORD *)this + 18) = 4;
    *((_QWORD *)this + 8) = 15;
    v2 = (util::Heap *)*((_QWORD *)this + 4);
    if (!v2)
    {
      v2 = (util::Heap *)operator new();
      util::Heap::Heap(v2, 0, 0, 0x400uLL);
      *((_QWORD *)this + 4) = v2;
    }
    v3 = util::Heap::alloc_(v2, 0x80uLL);
    *((_QWORD *)this + 6) = v3;
    if (!v3)
      util::UntypedTable::create_buckets();
    result = 0.0;
    *((_OWORD *)v3 + 6) = 0u;
    *((_OWORD *)v3 + 7) = 0u;
    *((_OWORD *)v3 + 4) = 0u;
    *((_OWORD *)v3 + 5) = 0u;
    *((_OWORD *)v3 + 2) = 0u;
    *((_OWORD *)v3 + 3) = 0u;
    *(_OWORD *)v3 = 0u;
    *((_OWORD *)v3 + 1) = 0u;
  }
  return result;
}

void sub_1AB932C88(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF431538](v1, 0x1030C4075AECAACLL);
  _Unwind_Resume(a1);
}

uint64_t AG::swift::metadata_visitor::visit_class(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

uint64_t sub_1AB932CB8()
{
  uint64_t v0;

  return sub_1AB932CCC(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_DWORD *)(v0 + 40), *(uint64_t (**)(void))(v0 + 48));
}

uint64_t sub_1AB932CCC(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t (*a5)(void))
{
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  _OWORD v15[4];
  uint64_t v16;

  v10 = swift_slowAlloc();
  v11 = a5();
  sub_1AB933618(a1, a2, a3, a4, v11, (uint64_t)v15);
  swift_release();
  v12 = v15[3];
  *(_OWORD *)(v10 + 32) = v15[2];
  *(_OWORD *)(v10 + 48) = v12;
  *(_QWORD *)(v10 + 64) = v16;
  v13 = v15[1];
  *(_OWORD *)v10 = v15[0];
  *(_OWORD *)(v10 + 16) = v13;
  return v10;
}

unint64_t AG::Graph::index_of_input(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t result;
  unint64_t v5;
  _BYTE *i;

  v3 = *(unsigned int *)(a2 + 12);
  if (v3 > 0x11F)
    return AG::Graph::index_of_input_slow(a1, a2, a3);
  if (v3 < 0x20)
    return -1;
  result = 0;
  v5 = v3 >> 5;
  for (i = (_BYTE *)(*(unsigned int *)(a2 + 16) + AG::data::_shared_table_bytes + 4);
        *((_DWORD *)i - 1) != (_DWORD)a3 || (*i & BYTE4(a3)) != BYTE5(a3);
        i += 5)
  {
    if (v5 == ++result)
      return -1;
  }
  return result;
}

uint64_t AG::LayoutDescriptor::Builder::visit_function(AG::LayoutDescriptor::Builder *this, uint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;

  if (*(_BYTE *)(a2 + 10) || !*((_DWORD *)this + 2))
    return 0;
  AG::LayoutDescriptor::Builder::add_field(this, 8);
  v4 = *((_QWORD *)this + 4);
  if (v4)
    v5 = (_QWORD *)(v4 + 16);
  else
    v5 = (_QWORD *)((char *)this + 40);
  v6 = *((_QWORD *)this + 2) + 8;
  v7 = v5[1];
  if (v5[2] < (unint64_t)(v7 + 1))
  {
    v9 = v5;
    v10 = v6;
    AG::vector<std::variant<AG::LayoutDescriptor::Builder::DataItem,AG::LayoutDescriptor::Builder::EqualsItem,AG::LayoutDescriptor::Builder::IndirectItem,AG::LayoutDescriptor::Builder::ExistentialItem,AG::LayoutDescriptor::Builder::HeapRefItem,AG::LayoutDescriptor::Builder::NestedItem,AG::LayoutDescriptor::Builder::EnumItem>,0ul,unsigned long>::reserve_slow((uint64_t)v5, v7 + 1);
    v6 = v10;
    v5 = v9;
    v7 = v9[1];
  }
  v8 = *v5 + 56 * v7;
  *(_QWORD *)v8 = v6;
  *(_QWORD *)(v8 + 8) = 8;
  result = 1;
  *(_BYTE *)(v8 + 16) = 1;
  *(_DWORD *)(v8 + 48) = 4;
  ++v5[1];
  return result;
}

uint64_t sub_1AB932EBC(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_retain();
  return a1;
}

uint64_t AG::LayoutDescriptor::Builder::revert(uint64_t result, unint64_t *a2)
{
  uint64_t v2;
  _QWORD *v3;
  _OWORD *v4;
  unint64_t i;
  unint64_t v7;
  BOOL v8;

  v2 = *(_QWORD *)(result + 32);
  if (v2)
    v3 = (_QWORD *)(v2 + 16);
  else
    v3 = (_QWORD *)(result + 40);
  v4 = a2 + 1;
  for (i = v3[1]; i > *a2; i = v3[1])
  {
    v7 = i - 1;
    v3[1] = v7;
    result = std::__variant_detail::__dtor<std::__variant_detail::__traits<AG::LayoutDescriptor::Builder::DataItem,AG::LayoutDescriptor::Builder::EqualsItem,AG::LayoutDescriptor::Builder::IndirectItem,AG::LayoutDescriptor::Builder::ExistentialItem,AG::LayoutDescriptor::Builder::HeapRefItem,AG::LayoutDescriptor::Builder::NestedItem,AG::LayoutDescriptor::Builder::EnumItem>,(std::__variant_detail::_Trait)1>::~__dtor(*v3 + 56 * v7);
  }
  if (i)
    v8 = *(_QWORD *)v4 == -1;
  else
    v8 = 1;
  if (!v8)
    return std::variant<AG::LayoutDescriptor::Builder::DataItem,AG::LayoutDescriptor::Builder::EqualsItem,AG::LayoutDescriptor::Builder::IndirectItem,AG::LayoutDescriptor::Builder::ExistentialItem,AG::LayoutDescriptor::Builder::HeapRefItem,AG::LayoutDescriptor::Builder::NestedItem,AG::LayoutDescriptor::Builder::EnumItem>::operator=[abi:ne180100]<AG::LayoutDescriptor::Builder::DataItem&,0,AG::LayoutDescriptor::Builder::DataItem,0ul,0>(*v3 + 56 * i - 56, v4);
  return result;
}

uint64_t AG::swift::metadata::visit_heap_locals(AG::swift::metadata *this, AG::swift::metadata_visitor *a2)
{
  unsigned int *v3;
  uint64_t result;
  uint64_t v6;
  int v7;
  unsigned __int8 v8;
  unsigned int *v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unsigned int v17;

  v3 = (unsigned int *)*((_QWORD *)this + 2);
  if (!v3)
    return (**(uint64_t (***)(AG::swift::metadata_visitor *))a2)(a2);
  if (v3[1])
    return (**(uint64_t (***)(AG::swift::metadata_visitor *))a2)(a2);
  v6 = *((unsigned int *)this + 2);
  if (!(_DWORD)v6)
    return (**(uint64_t (***)(AG::swift::metadata_visitor *))a2)(a2);
  if (v3[2])
  {
    v7 = 0;
    do
    {
      if ((v8 & 1) == 0
      {
        AG::swift::metadata::visit_heap_locals(AG::swift::metadata_visitor &)const::pointer_type = AG::swift::metadata::mangled_type_name_ref(this, "Bp", 1, 0);
      }
      if (!AG::swift::metadata::visit_heap_locals(AG::swift::metadata_visitor &)const::pointer_type)
        return (**(uint64_t (***)(AG::swift::metadata_visitor *))a2)(a2);
      result = (*(uint64_t (**)(AG::swift::metadata_visitor *, uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 8))(a2, AG::swift::metadata::visit_heap_locals(AG::swift::metadata_visitor &)const::pointer_type, 3, v6, *(_QWORD *)(*((_QWORD *)this - 1) + 64));
      if (!(_DWORD)result)
        return result;
      v6 += 8;
    }
    while (++v7 < v3[2]);
  }
  if (!*v3)
    return 1;
  v9 = v3 + 3;
  v10 = 3;
  while (1)
  {
    v17 = 0;
    v11 = (int)v3[v10];
    if ((_DWORD)v11)
      v12 = (char *)v9 + v11;
    else
      v12 = 0;
    v13 = AG::swift::metadata::mangled_type_name_ref(this, v12, 0, (int *)&v17);
    if (!v13)
      return (**(uint64_t (***)(AG::swift::metadata_visitor *))a2)(a2);
    v14 = *(_QWORD *)(v13 - 8);
    v15 = (v6 + *(unsigned __int8 *)(v14 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80);
    v16 = *(_QWORD *)(v14 + 64);
    if (((*(uint64_t (**)(AG::swift::metadata_visitor *, uint64_t, _QWORD, unint64_t, uint64_t))(*(_QWORD *)a2 + 8))(a2, v13, v17, v15, v16) & 1) == 0)break;
    ++v10;
    v6 = v15 + v16;
    ++v9;
    if (v10 - 3 >= (unint64_t)*v3)
      return 1;
  }
  return 0;
}

void sub_1AB933160(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t AG::swift::metadata::visit_heap(AG::swift::metadata *this, AG::swift::metadata_visitor *a2, char a3)
{
  uint64_t v3;
  uint64_t v5;

  v3 = *(_QWORD *)this;
  if (*(_QWORD *)this > 0x7FFuLL)
    v3 = 0;
  if (v3 == 1280)
  {
    if ((a3 & 4) != 0)
    {
      v5 = *((_QWORD *)this + 2);
      if (v5)
        return (*(uint64_t (**)(AG::swift::metadata_visitor *, uint64_t, _QWORD, unint64_t, _QWORD))(*(_QWORD *)a2 + 8))(a2, v5, 0, (*(unsigned __int8 *)(*(_QWORD *)(v5 - 8) + 80) + (unint64_t)*((unsigned int *)this + 2)) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v5 - 8) + 80), *(_QWORD *)(*(_QWORD *)(v5 - 8) + 64));
    }
    return (**(uint64_t (***)(AG::swift::metadata_visitor *))a2)(a2);
  }
  if (v3 != 1024)
  {
    if (!v3 && (a3 & 1) != 0)
      return AG::swift::metadata::visit_heap_class(this, a2);
    return (**(uint64_t (***)(AG::swift::metadata_visitor *))a2)(a2);
  }
  if ((a3 & 2) == 0)
    return (**(uint64_t (***)(AG::swift::metadata_visitor *))a2)(a2);
  return AG::swift::metadata::visit_heap_locals(this, a2);
}

void util::UntypedTable::grow_buckets(util::UntypedTable *this)
{
  unsigned int v1;
  _QWORD *v3;
  char v4;
  util::Heap *v5;
  size_t v6;
  _QWORD *v7;
  _QWORD *v8;
  int v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;

  v1 = *((_DWORD *)this + 18);
  if (v1 <= 0x1E)
  {
    v3 = (_QWORD *)*((_QWORD *)this + 6);
    v4 = v1 + 1;
    *((_DWORD *)this + 18) = v1 + 1;
    if (v1 > 3)
    {
      v6 = 8 << v4;
      v7 = malloc_type_malloc(v6, 0x2004093837F09uLL);
    }
    else
    {
      v5 = (util::Heap *)*((_QWORD *)this + 4);
      if (!v5)
      {
        v5 = (util::Heap *)operator new();
        util::Heap::Heap(v5, 0, 0, 0x400uLL);
        *((_QWORD *)this + 4) = v5;
      }
      v6 = 8 << v4;
      v7 = util::Heap::alloc_(v5, v6);
    }
    v8 = v7;
    bzero(v7, v6);
    v9 = *((_DWORD *)this + 18);
    if (v8)
    {
      v10 = 0;
      v11 = ~(-1 << v9);
      *((_QWORD *)this + 8) = v11;
      do
      {
        v12 = (_QWORD *)v3[v10];
        if (v12)
        {
          do
          {
            v13 = (_QWORD *)*v12;
            v14 = v12[3] & v11;
            *v12 = v8[v14];
            v8[v14] = v12;
            v12 = v13;
          }
          while (v13);
        }
        ++v10;
      }
      while (!(v10 >> v1));
      *((_QWORD *)this + 6) = v8;
      if (v1 > 4)
        free(v3);
    }
    else
    {
      *((_DWORD *)this + 18) = v9 - 1;
    }
  }
}

void sub_1AB933338(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF431538](v1, 0x1030C4075AECAACLL);
  _Unwind_Resume(a1);
}

uint64_t AG::LayoutDescriptor::Builder::visit_existential(AG::LayoutDescriptor::Builder *this, const AG::swift::existential_type_metadata *a2)
{
  int v2;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v2 = *((_DWORD *)this + 2);
  if (!v2 || v2 == 1 && AG::swift::existential_type_metadata::representation(a2) == 1)
    return 0;
  v6 = *((_QWORD *)this + 4);
  if (v6)
    v7 = (_QWORD *)(v6 + 16);
  else
    v7 = (_QWORD *)((char *)this + 40);
  v8 = *((_QWORD *)this + 2);
  v9 = *(_QWORD *)(*((_QWORD *)a2 - 1) + 64);
  v10 = v7[1];
  if (v7[2] < (unint64_t)(v10 + 1))
  {
    AG::vector<std::variant<AG::LayoutDescriptor::Builder::DataItem,AG::LayoutDescriptor::Builder::EqualsItem,AG::LayoutDescriptor::Builder::IndirectItem,AG::LayoutDescriptor::Builder::ExistentialItem,AG::LayoutDescriptor::Builder::HeapRefItem,AG::LayoutDescriptor::Builder::NestedItem,AG::LayoutDescriptor::Builder::EnumItem>,0ul,unsigned long>::reserve_slow((uint64_t)v7, v10 + 1);
    v10 = v7[1];
  }
  v11 = *v7 + 56 * v10;
  *(_QWORD *)v11 = v8;
  *(_QWORD *)(v11 + 8) = v9;
  *(_QWORD *)(v11 + 16) = a2;
  *(_DWORD *)(v11 + 48) = 3;
  ++v7[1];
  return 1;
}

uint64_t AGTypeApplyFields2::Visitor::visit_case(uint64_t a1, AG::swift::metadata *a2, uint64_t a3, unsigned int a4)
{
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  const char *v13;

  v8 = *(int *)(a3 + 4);
  if ((_DWORD)v8)
    v9 = (_BYTE *)(v8 + a3 + 4);
  else
    v9 = 0;
  v10 = AG::swift::metadata::mangled_type_name_ref(a2, v9, 1, 0);
  if (!v10)
    return (**(uint64_t (***)(uint64_t))a1)(a1);
  v11 = v10;
  v12 = *(int *)(a3 + 8);
  if ((_DWORD)v12)
    v13 = (const char *)(v12 + a3 + 8);
  else
    v13 = "";
  return (**(uint64_t (***)(const char *, _QWORD, uint64_t))(a1 + 8))(v13, a4, v11) & 1;
}

void AG::precondition_failure(AG *this, const char *a2, ...)
{
  AG *v2;
  NSObject *v3;
  const char *v4;
  char *v5[2];
  _BYTE buf[24];
  uint64_t v7;
  va_list va;

  va_start(va, a2);
  v7 = *MEMORY[0x1E0C80C00];
  v5[0] = 0;
  va_copy((va_list)&v5[1], va);
  v2 = (AG *)vasprintf(v5, (const char *)this, va);
  if (v5[0])
  {
    v3 = AG::error_log(v2);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315138;
      *(char **)&buf[4] = v5[0];
      _os_log_error_impl(&dword_1AB92D000, v3, OS_LOG_TYPE_ERROR, "precondition failure: %s", buf, 0xCu);
    }
    AG::Graph::trace_assertion_failure((AG::Graph *)1, (uint64_t)"precondition failure: %s", v4, v5[0]);
    if (!qword_1EEC35B08)
    {
      *(_QWORD *)buf = 0;
      asprintf((char **)buf, "AttributeGraph precondition failure: %s.\n", v5[0]);
      qword_1EEC35B08 = *(_QWORD *)buf;
    }
    free(v5[0]);
  }
  abort();
}

uint64_t AG::swift::metadata::equatable(void)const::$_1::operator()()
{
  if (objc_getClass("NSObject") && swift_getObjCClassMetadata())
    return swift_conformsToProtocol();
  else
    return 0;
}

uint64_t sub_1AB9335D8(unint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = a2(255);
    result = MEMORY[0x1AF431BE0](a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1AB933618@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  int v12;
  int v13;
  unsigned __int8 v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;

  v12 = (*(uint64_t (**)(void))(a2 + 40))();
  v13 = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 32))(a1, a2);
  v14 = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 16))(a1, a2);
  result = AGRetainClosure(a5);
  v16 = result;
  v18 = v17;
  if (qword_1ECEF2F00 != -1)
    result = swift_once();
  v19 = qword_1ECEF2F40;
  v20 = v12 | a4 | v13;
  *(_QWORD *)a6 = a1;
  *(_QWORD *)(a6 + 8) = a3;
  if ((v14 & ((v20 & 4) == 0)) != 0)
    v20 |= 4u;
  *(_QWORD *)(a6 + 16) = v16;
  *(_QWORD *)(a6 + 24) = v18;
  *(_QWORD *)(a6 + 32) = v19;
  *(_DWORD *)(a6 + 40) = v20;
  *(_DWORD *)(a6 + 44) = 0;
  *(_QWORD *)(a6 + 48) = 0;
  *(_QWORD *)(a6 + 56) = a1;
  *(_QWORD *)(a6 + 64) = a2;
  return result;
}

uint64_t AGRetainClosure(uint64_t a1)
{
  swift_retain();
  return a1;
}

uint64_t sub_1AB933748()
{
  return 0;
}

uint64_t sub_1AB933750()
{
  return 3;
}

uint64_t static External.flags.getter()
{
  unsigned int v1;

  type metadata accessor for Flags(0);
  sub_1AB933844();
  sub_1AB933800();
  sub_1AB962240();
  return v1;
}

void sub_1AB9337A8(uint64_t a1, unint64_t *a2)
{
  unint64_t ForeignTypeMetadata;
  uint64_t v4;

  if (!*a2)
  {
    ForeignTypeMetadata = swift_getForeignTypeMetadata();
    if (!v4)
      atomic_store(ForeignTypeMetadata, a2);
  }
}

void type metadata accessor for Flags(uint64_t a1)
{
  sub_1AB9337A8(a1, &qword_1ECEF2F30);
}

unint64_t sub_1AB933800()
{
  unint64_t result;

  result = qword_1ECEF2F38;
  if (!qword_1ECEF2F38)
  {
    result = MEMORY[0x1AF431BE0](MEMORY[0x1E0DEE148], MEMORY[0x1E0DEE0F8]);
    atomic_store(result, (unint64_t *)&qword_1ECEF2F38);
  }
  return result;
}

unint64_t sub_1AB933844()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1ECEF2F28;
  if (!qword_1ECEF2F28)
  {
    type metadata accessor for Flags(255);
    result = MEMORY[0x1AF431BE0](&unk_1AB963620, v1);
    atomic_store(result, (unint64_t *)&qword_1ECEF2F28);
  }
  return result;
}

uint64_t sub_1AB933890()
{
  return 2;
}

uint64_t _s14AttributeGraph3MapV5flagsSo20AGAttributeTypeFlagsVvgZ_0()
{
  unsigned int v1;

  type metadata accessor for Flags(0);
  sub_1AB933844();
  sub_1AB933800();
  sub_1AB962240();
  return v1;
}

uint64_t AGGraphCreateIndirectAttribute2(unsigned int a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
}

_DWORD *sub_1AB9338F8@<X0>(_DWORD *result@<X0>, _DWORD *a2@<X8>)
{
  *a2 = *result;
  return result;
}

BOOL AGSubgraphIsValid(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 16);
  return v1 && *(_BYTE *)(v1 + 104) == 0;
}

char *AGGraphGetInputValue(unint64_t a1, const char *a2, uint64_t a3, AG::swift::metadata *a4)
{
  AG::swift::metadata *v4;
  char v5;
  unsigned int v6;
  uint64_t v8;
  __n128 *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  unsigned int v23;
  unint64_t v24;
  char v25;
  char v26;
  __n128 *v27;
  __n128 *v28;
  AG::swift::metadata *v30;
  int v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  unsigned int v36;

  v4 = a4;
  v5 = a3;
  v6 = a2;
  if ((a3 & 4) != 0 || (_DWORD)a1 == 2)
    return AGGraphGetValue((unint64_t)a2, (const char *)a3, a4, (uint64_t)a4, a3);
  if ((a1 & 3) != 0)
    AG::precondition_failure((AG *)"non-direct attribute id: %u", a2, a1);
  if (dword_1ECEF30D0 <= (a1 & 0xFFFFFFFC))
    AG::precondition_failure((AG *)"invalid data offset: %u", a2, a1 & 0xFFFFFFFC);
  v8 = *(_QWORD *)(AG::data::_shared_table_bytes + (a1 & 0xFFFFFE00));
  if (!v8)
    AG::precondition_failure((AG *)"no graph: %u", a2, a1);
  v9 = *(__n128 **)(v8 + 40);
  v35 = 0;
  v36 = a2;
  v10 = a3 & 3;
  v11 = AG::data::_shared_table_bytes + a1;
  v12 = *(unsigned int *)(v11 + 12);
  if (v12 > 0x11F)
  {
    v31 = a1;
    v33 = AG::data::_shared_table_bytes + a1;
    v27 = v9;
    v25 = a3;
    v23 = a2;
    a1 = AG::Graph::index_of_input_slow((uint64_t)v9, v11, a2 | (unint64_t)(v10 << 40) | 0x700000000);
    v9 = v27;
    v4 = a4;
    v6 = v23;
    v5 = v25;
    v13 = a1;
    LODWORD(a1) = v31;
    v11 = v33;
  }
  else
  {
    if (v12 < 0x20)
    {
LABEL_13:
      v13 = -1;
      return AG::Graph::input_value_ref_slow(v9, a1, (const char *)v6, 0, v5, v4, &v35, v13);
    }
    v13 = 0;
    v14 = v12 >> 5;
    v15 = (_BYTE *)(*(unsigned int *)(v11 + 16) + AG::data::_shared_table_bytes + 4);
    while (*((_DWORD *)v15 - 1) != (_DWORD)a2 || (*v15 & 7) != (_DWORD)v10)
    {
      ++v13;
      v15 += 5;
      if (v14 == v13)
        goto LABEL_13;
    }
  }
  if ((v13 & 0x8000000000000000) != 0)
    return AG::Graph::input_value_ref_slow(v9, a1, (const char *)v6, 0, v5, v4, &v35, v13);
  v16 = *(unsigned int *)(v11 + 16);
  v17 = AG::data::_shared_table_bytes;
  if ((v6 & 3) != 0)
  {
    v32 = a1;
    v28 = v9;
    v30 = v4;
    v26 = v5;
    v22 = v16;
    v24 = v13;
    v34 = AG::data::_shared_table_bytes;
    LODWORD(a1) = AG::AttributeID::resolve_slow((AG::AttributeID *)&v36, (const char *)3);
    v16 = v22;
    v13 = v24;
    v9 = v28;
    v4 = v30;
    v5 = v26;
    v6 = a1;
    LODWORD(a1) = v32;
    v17 = v34;
  }
  else
  {
    v18 = 0;
  }
  v19 = AG::data::_shared_table_bytes;
  v20 = AG::data::_shared_table_bytes + v6;
  if ((*(_DWORD *)v20 & 0x11) != 0x10)
  {
    v6 = v36;
    return AG::Graph::input_value_ref_slow(v9, a1, (const char *)v6, 0, v5, v4, &v35, v13);
  }
  *(_BYTE *)(v17 + v16 + 5 * v13 + 4) |= 0x10u;
  v21 = (_QWORD *)(v19 + *(unsigned int *)(v20 + 8));
  if ((*(_BYTE *)(v20 + 7) & 2) != 0)
    v21 = (_QWORD *)*v21;
  return (char *)v21 + v18;
}

uint64_t sub_1AB933B70()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t AGWeakAttributeGetAttribute(unint64_t a1)
{
  uint64_t v1;
  unsigned int v2;
  unint64_t v3;
  uint64_t v4;

  v1 = 2;
  v2 = a1;
  if (a1 >= 4)
  {
    v3 = HIDWORD(a1);
    v4 = AG::data::table::raw_page_seed((uint64_t)&AG::data::_shared_table_bytes, (const char *)(a1 & 0xFFFFFE00));
    if ((_DWORD)v3 != (_DWORD)v4 || (v4 & 0xFF00000000) == 0)
      return 2;
    else
      return v2;
  }
  return v1;
}

void AGGraphSetFlags(char *a1, const char *a2)
{
  if ((a1 & 3) != 0)
    AG::precondition_failure((AG *)"non-direct attribute id: %u", a2, a1);
  AG::Subgraph::set_flags(*(_QWORD *)(AG::data::_shared_table_bytes + (a1 & 0xFFFFFE00)), a1, a2);
}

uint64_t AGSubgraphCreate(uint64_t a1)
{
  return AGSubgraphCreate2(a1, (const char *)2);
}

uint64_t AGCompareValues(AG::LayoutDescriptor *a1, unsigned __int8 *a2, AG::LayoutDescriptor *this, AG::swift::metadata *a4)
{
  AG::LayoutDescriptor **v8;

  v8 = (AG::LayoutDescriptor **)AG::LayoutDescriptor::fetch(this, a4, 0);
  if (v8 == (AG::LayoutDescriptor **)1)
    v8 = 0;
  return AG::LayoutDescriptor::compare(v8, a1, a2, *(char **)(*((_QWORD *)this - 1) + 64), (unint64_t *)a4);
}

void AGSubgraphSetCurrent(_QWORD *a1)
{
  uint64_t v1;
  unint64_t StatusReg;
  uint64_t v3;
  uint64_t v4;
  const void *v5;

  v1 = AG::Subgraph::_current_subgraph_key;
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v3 = *(_QWORD *)(StatusReg + 8 * v1);
  if (!a1)
  {
    *(_QWORD *)(StatusReg + 8 * v1) = 0;
    if (!v3)
      return;
    goto LABEL_7;
  }
  v4 = a1[2];
  *(_QWORD *)(StatusReg + 8 * v1) = v4;
  if (v4)
    CFRetain(a1);
  if (v3)
  {
LABEL_7:
    v5 = *(const void **)(v3 + 32);
    if (v5)
      CFRelease(v5);
  }
}

uint64_t AGGraphGetContext(uint64_t a1, const char *a2)
{
  if (*(_BYTE *)(a1 + 88))
    AG::precondition_failure((AG *)"invalidated graph", a2);
  return *(_QWORD *)(a1 + 24);
}

uint64_t AGGraphGetOutputValue(AG::swift::metadata *a1, const char *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;

  v2 = AG::Graph::_current_update_key;
  v3 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v2);
  if ((v3 & 1) != 0 || (v4 = (uint64_t *)(v3 & 0xFFFFFFFFFFFFFFFELL)) == 0)
    AG::precondition_failure((AG *)"no attribute updating", a2);
  v6 = *v4;
  v7 = v4 + 4;
  v9 = v4[12];
  v8 = v4[13];
  if (v9)
    v7 = (uint64_t *)v9;
  return AG::Graph::output_value_ref(v6, (const char *)LODWORD(v7[v8 - 1]), a1);
}

BOOL sub_1AB933D74(_DWORD *a1, _DWORD *a2)
{
  return *a1 == *a2;
}

uint64_t type metadata accessor for Focus(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for Focus);
}

uint64_t type metadata accessor for WeakAttribute(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for WeakAttribute);
}

uint64_t AGGraphCreateIndirectAttribute(unsigned int a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
}

void AGGraphMutateAttribute(char *a1, const char *a2, char a3, void (*a4)(_QWORD *), uint64_t a5)
{
  uint64_t v5;

  if ((a1 & 3) != 0)
    AG::precondition_failure((AG *)"non-direct attribute id: %u", a2, a1);
  if (dword_1ECEF30D0 <= (a1 & 0xFFFFFFFC))
    AG::precondition_failure((AG *)"invalid data offset: %u", a2, a1 & 0xFFFFFFFC);
  v5 = *(_QWORD *)(AG::data::_shared_table_bytes + (a1 & 0xFFFFFE00));
  if (!v5)
    AG::precondition_failure((AG *)"no graph: %u", a2, a1);
  AG::Graph::attribute_modify(*(_QWORD *)(v5 + 40), (const char *)a1, (uint64_t)a2, a4, a5, a3 & 1);
}

uint64_t AGGraphSetValue(char *a1, char *a2, AG::LayoutDescriptor *a3)
{
  uint64_t v3;

  if ((a1 & 3) != 0)
    AG::precondition_failure((AG *)"non-direct attribute id: %u", a2, a1);
  if (dword_1ECEF30D0 <= (a1 & 0xFFFFFFFC))
    AG::precondition_failure((AG *)"invalid data offset: %u", a2, a1 & 0xFFFFFFFC);
  v3 = *(_QWORD *)(AG::data::_shared_table_bytes + (a1 & 0xFFFFFE00));
  if (!v3)
    AG::precondition_failure((AG *)"no graph: %u", a2, a1);
  return AG::Graph::value_set(*(AG::Graph **)(v3 + 40), (const char *)a1, a3, (unsigned __int8 *)a2);
}

void AGSubgraphUpdate(uint64_t a1, uint64_t a2)
{
  AG::Subgraph *v2;

  v2 = *(AG::Subgraph **)(a1 + 16);
  if (v2)
    AG::Subgraph::update(v2, a2);
}

void *AG::vector<util::cf_ptr<AGSubgraphStorage *>,32ul,unsigned long>::reserve_slow(void *__dst, size_t a2)
{
  size_t v3;
  void *result;

  if (*((_QWORD *)__dst + 34) + (*((_QWORD *)__dst + 34) >> 1) <= a2)
    v3 = a2;
  else
    v3 = *((_QWORD *)__dst + 34) + (*((_QWORD *)__dst + 34) >> 1);
  result = AG::details::realloc_vector<unsigned long,8ul>(*((void **)__dst + 32), __dst, 0x20uLL, (size_t *)__dst + 34, v3);
  *((_QWORD *)__dst + 32) = result;
  return result;
}

void AG::Graph::value_mark(uint64_t a1, const char *a2)
{
  unsigned int v2;
  int *v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  AG::Subgraph *v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;

  v2 = a2;
  v4 = (int *)(AG::data::_shared_table_bytes + a2);
  v5 = *v4;
  v6 = *(_QWORD *)(*(_QWORD *)(a1 + 128) + ((v5 >> 5) & 0x7FFFFF8));
  v7 = AG::Graph::_current_update_key;
  v8 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v7);
  if ((v8 & 1) == 0)
  {
    v9 = (_QWORD *)(v8 & 0xFFFFFFFFFFFFFFFELL);
    if (v9)
    {
      if (*v9 == a1 && ((v5 & 0xC0) != 0 || v4[5] >= 0x20))
        AG::precondition_failure((AG *)"setting value during update: %u", a2, a2);
    }
  }
  v10 = *(_DWORD *)(a1 + 232);
  if (v10)
  {
    v17 = v10 - 1;
    do
    {
      v18 = v17;
      v19 = *(_QWORD *)(*(_QWORD *)(a1 + 224) + 8 * v17);
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v19 + 280))(v19, v2);
      --v17;
    }
    while (v18);
  }
  if ((*(_BYTE *)(v6 + 40) & 0x10) != 0)
  {
    AG::Graph::mark_changed(a1, v2, 0, 0, 0);
  }
  else
  {
    *((_BYTE *)v4 + 7) |= 0x40u;
    v11 = *v4;
    if ((*v4 & 1) == 0)
    {
      v12 = *(_DWORD *)(a1 + 232);
      if (v12)
      {
        v20 = v12 - 1;
        do
        {
          v21 = v20;
          v22 = *(_QWORD *)(*(_QWORD *)(a1 + 224) + 8 * v20);
          (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v22 + 256))(v22, v2, 1);
          --v20;
        }
        while (v21);
        v11 = *v4;
      }
      v11 |= 1u;
      *v4 = v11;
    }
    if ((v11 & 2) == 0)
    {
      v13 = *(_DWORD *)(a1 + 232);
      if (v13)
      {
        v23 = v13 - 1;
        do
        {
          v24 = v23;
          v25 = *(_QWORD *)(*(_QWORD *)(a1 + 224) + 8 * v23);
          (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v25 + 264))(v25, v2, 1);
          --v23;
        }
        while (v24);
        v11 = *v4;
      }
      *v4 = v11 | 2;
    }
    v14 = *((unsigned __int8 *)v4 + 6);
    if (*((_BYTE *)v4 + 6))
    {
      v15 = *(AG::Subgraph **)(AG::data::_shared_table_bytes + (v2 & 0xFFFFFE00));
      if (v15)
      {
        v16 = *((_DWORD *)v15 + 25);
        if ((v14 & ~HIWORD(v16)) != 0)
        {
          *((_DWORD *)v15 + 25) = v16 & 0xFF00FFFF | ((BYTE2(v16) | v14) << 16);
          AG::Subgraph::propagate_dirty_flags(v15);
        }
      }
    }
  }
  AG::Graph::propagate_dirty(a1);
}

void AG::Subgraph::update(AG::Subgraph *this, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  unsigned int v7;
  unsigned int v8;
  const void *v9;
  const void *v10;
  unint64_t v11;
  char v12;
  _QWORD *v13;
  const void *v14;
  CFTypeRef v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  unsigned int v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  size_t v29;
  _BYTE *v30;
  unsigned int *v31;
  uint64_t v32;
  unsigned int v33;
  int v34;
  BOOL v35;
  unsigned int v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  unint64_t v40;
  const void *v41;
  const void *v42;
  uint64_t v43;
  void *v44;
  unint64_t v45;
  _QWORD *v46;
  unint64_t v47;
  const void *v48;
  unsigned int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t i;
  uint64_t v53;
  AG::Subgraph *v54;
  CFTypeRef v55;
  char v56;
  CFTypeRef v57;
  CFTypeRef cf;
  _QWORD v59[32];
  void *v60;
  unint64_t v61;
  uint64_t v62;
  _BYTE __dst[769];
  __int128 v64;
  unint64_t v65;
  uint64_t v66;

  v66 = *MEMORY[0x1E0C80C00];
  v4 = *((_QWORD *)this + 5);
  if (*(_BYTE *)(v4 + 409) && !AG::Graph::thread_is_updating(*((AG::Graph **)this + 5)))
    AG::Graph::call_update(v4);
  if (*((_BYTE *)this + 104))
  {
    v5 = *((_QWORD *)this + 5);
LABEL_6:
    AG::Graph::invalidate_subgraphs((AG::Graph *)v5);
    return;
  }
  v5 = *((_QWORD *)this + 5);
  if (((BYTE2(*((_DWORD *)this + 25)) | HIBYTE(*((_DWORD *)this + 25))) & a2) == 0)
    goto LABEL_6;
  v6 = *(_DWORD *)(v5 + 232);
  if (v6)
  {
    v49 = v6 - 1;
    do
    {
      v50 = v49;
      v51 = *(_QWORD *)(*(_QWORD *)(v5 + 224) + 8 * v49);
      (*(void (**)(uint64_t, AG::Subgraph *, uint64_t))(*(_QWORD *)v51 + 48))(v51, this, a2);
      --v49;
    }
    while (v50);
  }
  do
  {
    v7 = __ldaxr((unsigned int *)&AG::Subgraph::_last_traversal_seed);
    v8 = v7 + 1;
  }
  while (__stlxr(v7 + 1, (unsigned int *)&AG::Subgraph::_last_traversal_seed));
  v64 = 0u;
  v65 = 256;
  v60 = 0;
  v61 = 0;
  v62 = 32;
  v9 = (const void *)AG::Subgraph::to_cf(this);
  v10 = v9;
  if (v9)
    CFRetain(v9);
  cf = v10;
  std::stack<util::cf_ptr<AGSubgraphStorage *>,AG::vector<util::cf_ptr<AGSubgraphStorage *>,32ul,unsigned long>>::emplace[abi:ne180100]<util::cf_ptr<AGSubgraphStorage *>>(v59, &cf);
  if (cf)
    CFRelease(cf);
  v54 = this;
  *((_DWORD *)this + 21) = v8;
  v11 = v61;
  if (v61)
  {
    v12 = 0;
    v56 = ~(_BYTE)a2;
    do
    {
      v13 = v60;
      if (!v60)
        v13 = v59;
      v14 = (const void *)v13[v11 - 1];
      if (v14)
        v15 = CFRetain(v14);
      else
        v15 = 0;
      cf = v15;
      std::stack<util::cf_ptr<AGSubgraphStorage *>,AG::vector<util::cf_ptr<AGSubgraphStorage *>,32ul,unsigned long>>::pop[abi:ne180100]((uint64_t)v59);
      v55 = v15;
      v16 = AG::Subgraph::from_cf((uint64_t)v15);
      v17 = v16;
      if (v16)
      {
        if (!*(_BYTE *)(v16 + 104))
        {
          while (1)
          {
            v18 = *(_DWORD *)(v17 + 100);
            if ((BYTE2(v18) & a2) == 0)
              break;
            v19 = v18 & 0xFF00FFFF | ((BYTE2(v18) & v56) << 16);
            *(_DWORD *)(v17 + 100) = v19;
            if (!(_DWORD)a2 || (a2 & v19) != 0)
            {
              v20 = *(_DWORD *)(v17 + 16);
              if (v20)
              {
                v21 = AG::data::_shared_table_bytes;
                do
                {
                  v22 = v20;
                  v23 = v21 + v20;
                  v24 = *(unsigned __int16 *)(v23 + 20);
                  if (*(_WORD *)(v23 + 20))
                  {
                    do
                    {
                      v25 = v24 + v22;
                      v26 = (v24 + v22) & 3;
                      if (v26)
                      {
                        if (v26 == 1)
                        {
                          v24 = *(unsigned __int16 *)(AG::data::_shared_table_bytes + (v25 & 0xFFFFFFFC) + 14);
                          if ((_DWORD)a2)
                            break;
                        }
                        else if (v26 == 2)
                        {
                          break;
                        }
                      }
                      else
                      {
                        v27 = AG::data::_shared_table_bytes + v25;
                        v24 = *(unsigned __int16 *)(v27 + 4);
                        if (!(_DWORD)a2)
                          goto LABEL_43;
                        if (!*(_BYTE *)(v27 + 6))
                          break;
                        if ((*(_BYTE *)(v27 + 6) & a2) != 0)
                        {
LABEL_43:
                          if ((*(_BYTE *)v27 & 1) != 0)
                          {
                            v28 = *((_QWORD *)&v64 + 1);
                            v29 = *((_QWORD *)&v64 + 1) + 1;
                            if (v65 < *((_QWORD *)&v64 + 1) + 1)
                            {
                              AG::vector<AG::data::ptr<AG::Node>,256ul,unsigned long>::reserve_slow(__dst, v29);
                              v28 = *((_QWORD *)&v64 + 1);
                              v29 = *((_QWORD *)&v64 + 1) + 1;
                            }
                            v30 = (_BYTE *)v64;
                            if (!(_QWORD)v64)
                              v30 = __dst;
                            *(_DWORD *)&v30[4 * v28] = v25;
                            *((_QWORD *)&v64 + 1) = v29;
                          }
                        }
                      }
                    }
                    while (v24);
                    v21 = AG::data::_shared_table_bytes;
                  }
                  v20 = *(_DWORD *)(v21 + v22 + 8);
                }
                while (v20);
              }
            }
            if (!*((_QWORD *)&v64 + 1))
            {
              if (*(_BYTE *)(v17 + 104))
                goto LABEL_23;
              break;
            }
            if ((_QWORD)v64)
              v31 = (unsigned int *)v64;
            else
              v31 = (unsigned int *)__dst;
            v32 = 4 * *((_QWORD *)&v64 + 1) - 4;
            do
            {
              v33 = *v31;
              if ((v12 & 1) == 0 && !AG::Graph::thread_is_updating((AG::Graph *)v5))
                ++*(_QWORD *)(v5 + 440);
              AG::Graph::update_attribute((__n128 *)v5, v33, 1);
              v34 = *(unsigned __int8 *)(v17 + 104);
              ++v31;
              if (*(_BYTE *)(v17 + 104))
                v35 = 1;
              else
                v35 = v32 == 0;
              v32 -= 4;
              v12 = 1;
            }
            while (!v35);
            *((_QWORD *)&v64 + 1) = 0;
            if (v34)
              goto LABEL_23;
          }
          v36 = *(_DWORD *)(v17 + 100);
          if ((a2 & HIBYTE(v36)) != 0)
          {
            *(_DWORD *)(v17 + 100) = v36 & 0xFFFFFF | ((HIBYTE(v36) & v56) << 24);
            v37 = *(unsigned int *)(v17 + 72);
            if ((_DWORD)v37)
            {
              v38 = *(_QWORD **)(v17 + 64);
              v39 = 8 * v37;
              do
              {
                v40 = *v38 & 0xFFFFFFFFFFFFFFFCLL;
                if (((BYTE2(*(_DWORD *)(v40 + 100)) | HIBYTE(*(_DWORD *)(v40 + 100))) & a2) != 0
                  && *(_DWORD *)(v40 + 84) != v8)
                {
                  v41 = (const void *)AG::Subgraph::to_cf((AG::Subgraph *)(*v38 & 0xFFFFFFFFFFFFFFFCLL));
                  v42 = v41;
                  if (v41)
                    CFRetain(v41);
                  v57 = v42;
                  std::stack<util::cf_ptr<AGSubgraphStorage *>,AG::vector<util::cf_ptr<AGSubgraphStorage *>,32ul,unsigned long>>::emplace[abi:ne180100]<util::cf_ptr<AGSubgraphStorage *>>(v59, &v57);
                  if (v57)
                    CFRelease(v57);
                  *(_DWORD *)(v40 + 84) = v8;
                }
                ++v38;
                v39 -= 8;
              }
              while (v39);
            }
          }
        }
LABEL_23:
        AG::Graph::invalidate_subgraphs((AG::Graph *)v5);
      }
      if (v55)
        CFRelease(v55);
      v11 = v61;
    }
    while (v61);
  }
  AG::Graph::invalidate_subgraphs((AG::Graph *)v5);
  v43 = *(unsigned int *)(v5 + 232);
  if ((_DWORD)v43)
  {
    for (i = 8 * v43 - 8; i != -8; i -= 8)
    {
      v53 = *(_QWORD *)(*(_QWORD *)(v5 + 224) + i);
      (*(void (**)(uint64_t, AG::Subgraph *))(*(_QWORD *)v53 + 56))(v53, v54);
    }
  }
  v44 = v60;
  v45 = v61;
  if (v60)
    v46 = v60;
  else
    v46 = v59;
  if (v61)
  {
    v47 = 0;
    do
    {
      v48 = (const void *)v46[v47];
      if (v48)
      {
        CFRelease(v48);
        v45 = v61;
      }
      ++v47;
    }
    while (v47 < v45);
    v44 = v60;
  }
  if (v44)
    free(v44);
  if ((_QWORD)v64)
    free((void *)v64);
}

void sub_1AB934618(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  std::stack<util::cf_ptr<AGSubgraphStorage *>,AG::vector<util::cf_ptr<AGSubgraphStorage *>,32ul,unsigned long>>::~stack(va);
  if (STACK[0x548])
    free((void *)STACK[0x548]);
  _Unwind_Resume(a1);
}

uint64_t AG::Graph::update_attribute(__n128 *this, unsigned int a2, uint64_t a3)
{
  unsigned int *v6;
  unsigned int v7;
  uint64_t v8;
  unint64_t StatusReg;
  uint64_t v10;
  unint64_t v11;
  int v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  unsigned int *v18;
  _DWORD *v19;
  const char *v20;
  __n128 v21;
  uint64_t v22;
  unsigned int *v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  __n128 *v27;
  uint64_t i;
  uint64_t v30;
  uint64_t j;
  uint64_t v32;
  __n128 **v33;
  unsigned int v34;
  __n128 *v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  _BYTE v39[64];
  void *v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  uint64_t v44;

  v44 = *MEMORY[0x1E0C80C00];
  if ((a3 & 1) == 0 && this[25].n128_u8[9] && !AG::Graph::thread_is_updating((AG::Graph *)this))
    AG::Graph::call_update((uint64_t)this);
  v6 = (unsigned int *)(AG::data::_shared_table_bytes + a2);
  v7 = *v6;
  if ((*v6 & 0x11) == 0x10)
    return 0;
  ++this[28].n128_u64[0];
  if ((v7 & 4) != 0)
    ++this[28].n128_u64[1];
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v35 = this;
  v36 = StatusReg - 224;
  v10 = *(_QWORD *)(StatusReg + 8 * AG::Graph::_current_update_key);
  v11 = atomic_load(this[26].n128_u64);
  v37 = v10;
  v38 = v11;
  v40 = 0;
  v41 = 0;
  v42 = 8;
  v43 = a3;
  v12 = a3;
  if (v10)
  {
    v12 = *(_DWORD *)((v10 & 0xFFFFFFFFFFFFFFFELL) + 120) & 4 | a3;
    v43 = v12;
  }
  v13 = a2;
  this[26].n128_u64[0] = v36;
  if (!this[25].n128_u8[8])
  {
    this[25].n128_u8[8] = 1;
    v43 = v12 | 0x10;
  }
  v14 = a3 & 1;
  *(_QWORD *)(StatusReg + 8 * AG::Graph::_current_update_key) = (unint64_t)&v35 | (a3 >> 3) & 1;
  v15 = this[14].n128_u32[2];
  if ((_DWORD)v15)
  {
    for (i = 8 * v15 - 8; i != -8; i -= 8)
    {
      v30 = *(_QWORD *)(this[14].n128_u64[0] + i);
      (*(void (**)(uint64_t, __n128 **, _QWORD, uint64_t))(*(_QWORD *)v30 + 64))(v30, &v35, a2, a3);
    }
    v16 = v41;
    if (v41 == v42)
      goto LABEL_45;
  }
  else
  {
    v16 = 0;
  }
  if ((*v6 & 0xC0) == 0)
  {
    *v6 += 64;
    if (v40)
      v17 = v40;
    else
      v17 = v39;
    v18 = (unsigned int *)&v17[8 * v16];
    *v18 = a2;
    v18[1] = 0;
    v19 = v18 + 1;
    if ((*v6 & 2) != 0 || !(*v6 & 0x10 | v14))
      *v19 = 1;
    v41 = v16 + 1;
    goto LABEL_23;
  }
LABEL_45:
  if (AG::Graph::UpdateStack::push_slow((uint64_t *)&v35, (const char *)a2, v6, 0, v14 == 0))
  {
LABEL_23:
    v8 = AG::Graph::UpdateStack::update((AG::Graph::UpdateStack *)&v35);
    if ((_DWORD)v8 == 3)
    {
      v33 = &v35;
      v34 = 3;
      v21 = AG::Graph::call_main_handler(this, &v33, (void (*)(const void *))AG::Graph::update_attribute(AG::data::ptr<AG::Node>,unsigned int)::$_0::__invoke);
      v8 = v34;
      ++this[28].n128_u64[1];
    }
    goto LABEL_25;
  }
  v8 = 1;
LABEL_25:
  v22 = this[14].n128_u32[2];
  if ((_DWORD)v22)
  {
    for (j = 8 * v22 - 8; j != -8; j -= 8)
    {
      v32 = *(_QWORD *)(this[14].n128_u64[0] + j);
      (*(void (**)(uint64_t, __n128 **, uint64_t, uint64_t, __n128))(*(_QWORD *)v32 + 72))(v32, &v35, v13, v8, v21);
    }
  }
  v23 = (unsigned int *)v40;
  if (!v40)
    v23 = (unsigned int *)v39;
  if (v41)
  {
    v24 = AG::data::_shared_table_bytes;
    v25 = 8 * v41;
    do
    {
      v26 = *v23;
      v23 += 2;
      *(_DWORD *)(v24 + v26) -= 64;
      v25 -= 8;
    }
    while (v25);
  }
  v27 = v35;
  if (v36 != v35[26].n128_u64[0])
  {
    AG::non_fatal_precondition_failure((AG *)"invalid graph update (access from multiple threads?)", v20, v21.n128_f64[0]);
    v27 = v35;
  }
  v27[26].n128_u64[0] = v38;
  *(_QWORD *)(StatusReg + 8 * AG::Graph::_current_update_key) = v37;
  if ((v43 & 0x10) != 0)
    v35[25].n128_u8[8] = 0;
  if (v40)
    free(v40);
  return v8;
}

void sub_1AB9349F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t AG::Graph::UpdateStack::update(AG::Graph::UpdateStack *this)
{
  char *v2;
  uint64_t v3;
  char *v4;
  char *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int *v8;
  unsigned int v9;
  _BYTE *v10;
  unint64_t v11;
  uint64_t v12;
  unsigned int v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int *v17;
  const char *v18;
  char v19;
  unsigned int *v20;
  int v21;
  uint64_t v22;
  char v24;
  unsigned int *v25;
  const char *v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  unint64_t v34;
  uint64_t v35;
  int v36;
  BOOL v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  char *v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  uint64_t v47;
  unsigned int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unsigned int v52;
  uint64_t v53;
  unsigned int v54;
  uint64_t v55;
  char v56;
  uint64_t v57;
  char *v58;
  char v59;
  char v60;
  char v61;
  uint64_t v62;
  int v63;
  uint64_t v64;
  int v65;
  uint64_t v66;
  int v67;
  unint64_t v68;
  uint64_t v69;
  void (*v70)(uint64_t, _QWORD *);
  _QWORD *v71;
  uint64_t v72;
  unsigned int v73;
  uint64_t v74;
  uint64_t v75;
  unsigned int v76;
  uint64_t v77;
  uint64_t v78;
  AG::LayoutDescriptor *v79;
  unsigned int v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unsigned int v85;
  uint64_t v86;
  uint64_t v87;
  AG::Graph::UpdateStack *v88;
  char *v89;
  char *v90;
  unsigned int *v91;
  char *v93;
  char *v94;
  uint64_t v95;
  uint64_t result;
  AG::swift::metadata *v97;
  uint64_t v98;
  uint64_t v99;
  const char *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  char *v106;
  unsigned int v107;
  unsigned __int8 v108;

  v2 = (char *)this + 32;
  v106 = (char *)this + 32;
LABEL_2:
  while (2)
  {
    v3 = *((_QWORD *)this + 13);
    while (1)
    {
      v4 = (char *)*((_QWORD *)this + 12);
      if (!v4)
        v4 = v2;
      v5 = &v4[8 * v3];
      v7 = *((_DWORD *)v5 - 2);
      v6 = (unsigned int *)(v5 - 8);
      v8 = (unsigned int *)(AG::data::_shared_table_bytes + v7);
      v10 = v6 + 1;
      v9 = v6[1];
      if ((*((_BYTE *)this + 120) & 4) != 0)
      {
        if ((v9 & 8) == 0 && *(_QWORD *)(*(_QWORD *)this + 432) != -1)
        {
          v88 = (AG::Graph::UpdateStack *)AG::Graph::passed_deadline_slow(*(AG::Graph **)this);
          v2 = v106;
          if ((_DWORD)v88)
          {
            AG::Graph::UpdateStack::cancel(v88);
            v2 = v106;
          }
        }
      }
      else if ((v9 & 8) == 0)
      {
        goto LABEL_7;
      }
      if ((*v10 & 8) != 0)
        break;
LABEL_7:
      v11 = v8[3];
      v12 = AG::data::_shared_table_bytes + v8[4];
      v13 = *(_DWORD *)v10;
      v14 = *(_DWORD *)v10 >= 0x10u && (*(_DWORD *)v10 & 1) == 0;
      if (v14 && (*(_BYTE *)(v12 + 5 * ((v13 >> 4) - 1) + 4) & 8) != 0)
      {
        v13 |= 1u;
        *(_DWORD *)v10 = v13;
      }
      v15 = v11 >> 5;
      if ((v11 >> 5) > v13 >> 4)
      {
        v16 = v13 >> 4;
        while (1)
        {
          v17 = (unsigned int *)(v12 + 5 * v16);
          v18 = (const char *)*v17;
          v19 = *((_BYTE *)v17 + 4);
          if ((v18 & 3) != 0)
            break;
LABEL_17:
          if ((v19 & 8) != 0)
          {
            v13 |= 1u;
            *(_DWORD *)v10 = v13;
          }
          v20 = (unsigned int *)&v18[AG::data::_shared_table_bytes];
          v21 = *(_DWORD *)&v18[AG::data::_shared_table_bytes];
          if ((v21 & 0x11) != 0x10)
          {
            if ((v19 & 1) == 0
              && !*(_BYTE *)(*(_QWORD *)(AG::data::_shared_table_bytes + (v18 & 0xFFFFFE00)) + 104))
            {
              *(_DWORD *)v10 = (v13 & 0xF | (16 * v16)) + 16;
              v22 = *((_QWORD *)this + 13);
              if ((v21 & 0xC0) == 0 && v22 != *((_QWORD *)this + 14))
              {
                *v20 = v21 + 64;
                v89 = (char *)*((_QWORD *)this + 12);
                if (!v89)
                  v89 = v2;
                v90 = &v89[8 * v22];
                *(_DWORD *)v90 = (_DWORD)v18;
                *((_DWORD *)v90 + 1) = (*v20 & 0x12) != 16;
                goto LABEL_130;
              }
              v24 = AG::Graph::UpdateStack::push_slow((uint64_t *)this, v18, v20, 1, 1);
              v2 = v106;
              if ((v24 & 1) != 0)
                goto LABEL_2;
              v13 = *(_DWORD *)v10;
            }
            v13 |= 1u;
            *(_DWORD *)v10 = v13;
          }
LABEL_30:
          if (++v16 == v15)
            goto LABEL_39;
        }
        while (1)
        {
          if ((v18 & 3) != 1)
          {
            if ((v18 & 3) == 0)
              goto LABEL_17;
            goto LABEL_30;
          }
          v25 = (unsigned int *)(AG::data::_shared_table_bytes + (v18 & 0xFFFFFFFC));
          v18 = (const char *)*v25;
          if ((v25[2] & 1) != 0)
          {
            v26 = (const char *)v25[4];
            if ((_DWORD)v26)
            {
              v27 = *(_DWORD *)&v26[AG::data::_shared_table_bytes];
              if ((v27 & 0x11) != 0x10)
                break;
            }
          }
        }
        v91 = (unsigned int *)&v26[AG::data::_shared_table_bytes];
        *(_DWORD *)v10 = v13 & 0xF | (16 * v16);
        v22 = *((_QWORD *)this + 13);
        if ((v27 & 0xC0) != 0 || v22 == *((_QWORD *)this + 14))
        {
          AG::Graph::UpdateStack::push_slow((uint64_t *)this, v26, v91, 0, 0);
          v2 = v106;
          goto LABEL_2;
        }
        *v91 = v27 + 64;
        v93 = (char *)*((_QWORD *)this + 12);
        if (!v93)
          v93 = v2;
        v94 = &v93[8 * v22];
        *(_DWORD *)v94 = (_DWORD)v26;
        *((_DWORD *)v94 + 1) = (*v91 >> 1) & 1;
LABEL_130:
        *((_QWORD *)this + 13) = v22 + 1;
        goto LABEL_2;
      }
LABEL_39:
      if ((v13 & 1) != 0)
      {
        v29 = *(_QWORD *)this;
        if (*(_QWORD *)(*(_QWORD *)this + 240) && (*(_BYTE *)v8 & 8) != 0)
          return 3;
        v30 = *(_DWORD *)(v29 + 232);
        if (v30)
        {
          v76 = v30 - 1;
          do
          {
            v77 = v76;
            v78 = *(_QWORD *)(*(_QWORD *)(v29 + 224) + 8 * v76);
            (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v78 + 80))(v78, *v6);
            --v76;
          }
          while (v77);
          v29 = *(_QWORD *)this;
        }
        v31 = *(_QWORD *)(v29 + 464);
        v32 = *(_QWORD *)(*(_QWORD *)(v29 + 128) + (((unint64_t)*v8 >> 5) & 0x7FFFFF8));
        v33 = (_QWORD *)((char *)v8 + *(unsigned int *)(v32 + 44));
        if ((*((_BYTE *)v8 + 7) & 1) != 0)
          v33 = (_QWORD *)*v33;
        (*(void (**)(_QWORD *, _QWORD))(v32 + 16))(v33, *v6);
        v34 = *v8;
        if ((v34 & 0x10) == 0)
        {
          v79 = *(AG::LayoutDescriptor **)(v32 + 8);
          if (*(_QWORD *)(*((_QWORD *)v79 - 1) + 64))
          {
            v97 = **(AG::swift::metadata ***)(*(_QWORD *)(*(_QWORD *)this + 128) + ((v34 >> 5) & 0x7FFFFF8));
            v98 = *v6;
            v99 = AG::swift::metadata::name(v97, 0);
            AG::precondition_failure((AG *)"attribute failed to set an initial value: %u, %s", v100, v98, v99);
          }
          AGGraphSetOutputValue(&v108, v79);
        }
        v35 = *(_QWORD *)this;
        v28 = *(_QWORD *)(*(_QWORD *)this + 464) ^ v31;
        v36 = *(_DWORD *)(*(_QWORD *)this + 232);
        if (v36)
        {
          v80 = v36 - 1;
          do
          {
            v81 = v80;
            v82 = *(_QWORD *)(*(_QWORD *)(v35 + 224) + 8 * v80);
            v83 = v28;
            (*(void (**)(uint64_t, _QWORD, BOOL))(*(_QWORD *)v82 + 88))(v82, *v6, v28 != 0);
            v28 = v83;
            --v80;
          }
          while (v81);
        }
        v12 = AG::data::_shared_table_bytes + v8[4];
        LODWORD(v15) = v8[3] >> 5;
        v13 = *(_DWORD *)v10;
        v2 = v106;
      }
      else
      {
        v28 = 0;
      }
      v15 = v15;
      if ((v13 & 1) != 0)
      {
        if ((v13 & 0xC) == 0)
        {
          if ((_DWORD)v15)
          {
            do
            {
              --v15;
              v57 = v12 + 5 * v15;
              v60 = *(_BYTE *)(v57 + 4);
              v58 = (char *)(v57 + 4);
              v59 = v60;
              v61 = v60;
              if ((v60 & 8) != 0)
              {
                v62 = *(_QWORD *)this;
                v63 = *(_DWORD *)(*(_QWORD *)this + 232);
                v56 = v59;
                if (v63)
                {
                  v102 = v28;
                  v54 = v63 - 1;
                  do
                  {
                    v105 = v54;
                    v55 = *(_QWORD *)(*(_QWORD *)(v62 + 224) + 8 * v54);
                    (*(void (**)(uint64_t, _QWORD, uint64_t, _QWORD))(*(_QWORD *)v55 + 248))(v55, *v6, v15, 0);
                    --v54;
                  }
                  while (v105);
                  v56 = *v58;
                  v2 = v106;
                  v28 = v102;
                }
                v61 = v56 & 0xF7;
              }
              *v58 = v61 & 0xEF;
              if ((v59 & 0x10) == 0 && (v61 & 4) == 0)
              {
                v53 = v28;
                AG::Graph::remove_input(*(_QWORD *)this, *v6, v15);
                v28 = v53;
                v2 = v106;
              }
            }
            while (v15);
          }
LABEL_88:
          v52 = *v8 - 64;
          *v8 = v52;
LABEL_89:
          if ((*((_BYTE *)v8 + 7) & 0x40) != 0)
            *((_BYTE *)v8 + 7) &= ~0x40u;
          if ((v52 & 1) != 0)
          {
            v64 = *(_QWORD *)this;
            v65 = *(_DWORD *)(*(_QWORD *)this + 232);
            if (v65)
            {
              v84 = v28;
              v85 = v65 - 1;
              do
              {
                v86 = v85;
                v87 = *(_QWORD *)(*(_QWORD *)(v64 + 224) + 8 * v85);
                (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v87 + 256))(v87, *v6, 0);
                --v85;
              }
              while (v86);
              v52 = *v8;
              v2 = v106;
              v28 = v84;
            }
            v52 &= ~1u;
          }
          v52 &= (v52 >> 1) | 0xFFFFFFFB;
          *v8 = v52;
          if ((v52 & 2) == 0)
            goto LABEL_97;
LABEL_95:
          v66 = *(_QWORD *)this;
          v67 = *(_DWORD *)(*(_QWORD *)this + 232);
          if (v67)
          {
            v72 = v28;
            v73 = v67 - 1;
            do
            {
              v74 = v73;
              v75 = *(_QWORD *)(*(_QWORD *)(v66 + 224) + 8 * v73);
              (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v75 + 264))(v75, *v6, 0);
              --v73;
            }
            while (v74);
            v52 = *v8;
            v2 = v106;
            v28 = v72;
          }
          *v8 = v52 & 0xFFFFFFFD;
          goto LABEL_97;
        }
      }
      else if ((v13 & 0xC) == 0)
      {
        goto LABEL_88;
      }
      v37 = (v13 & 8) == 0;
      if ((_DWORD)v15)
      {
        do
        {
          --v15;
          v107 = *(_DWORD *)(v12 + 5 * v15);
          v38 = v107;
          if ((v107 & 3) != 0)
          {
            v47 = v28;
            v48 = AG::AttributeID::resolve_slow((AG::AttributeID *)&v107, 0);
            v28 = v47;
            v2 = v106;
            v38 = v48;
          }
          if ((v38 & 3) != 0 || (*(_BYTE *)(AG::data::_shared_table_bytes + v38) & 1) != 0)
          {
            v37 = 0;
          }
          else if ((*(_DWORD *)v10 & 1) != 0 && (*(_DWORD *)v10 & 8) == 0)
          {
            v39 = v12 + 5 * v15;
            v42 = *(_BYTE *)(v39 + 4);
            v41 = (char *)(v39 + 4);
            v40 = v42;
            if ((v42 & 8) != 0)
            {
              v43 = *(_QWORD *)this;
              v44 = *(unsigned int *)(*(_QWORD *)this + 232);
              if ((_DWORD)v44)
              {
                v101 = v28;
                v50 = v44 - 1;
                do
                {
                  v103 = v50;
                  v104 = v50;
                  v51 = *(_QWORD *)(*(_QWORD *)(v43 + 224) + 8 * v50);
                  (*(void (**)(uint64_t, _QWORD, uint64_t, _QWORD))(*(_QWORD *)v51 + 248))(v51, *v6, v15, 0);
                  v50 = v104 - 1;
                }
                while (v103);
                v40 = *v41;
                v2 = v106;
                v28 = v101;
              }
              *v41 = v40 & 0xF7;
            }
          }
          if ((*(_DWORD *)v10 & 9) == 1)
          {
            v45 = v12 + 5 * v15;
            v46 = *(_BYTE *)(v45 + 4);
            *(_BYTE *)(v45 + 4) = v46 & 0xEF;
            if ((v46 & 0x10) == 0 && (v46 & 4) == 0)
            {
              v49 = v28;
              AG::Graph::remove_input(*(_QWORD *)this, *v6, v15);
              v28 = v49;
              v2 = v106;
            }
          }
        }
        while (v15);
      }
      v52 = *v8 - 64;
      *v8 = v52;
      if (v37)
        goto LABEL_89;
      if ((v52 & 2) != 0)
        goto LABEL_95;
LABEL_97:
      v3 = *((_QWORD *)this + 13) - 1;
      *((_QWORD *)this + 13) = v3;
      if (!v3)
        return v28 != 0;
    }
    if ((*((_BYTE *)this + 120) & 2) != 0)
      return 2;
    v68 = *v8;
    if ((v68 & 0x10) == 0)
    {
      v69 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 128) + ((v68 >> 5) & 0x7FFFFF8));
      v70 = *(void (**)(uint64_t, _QWORD *))(*(_QWORD *)(v69 + 32) + 40);
      if (v70)
      {
        v71 = (_QWORD *)((char *)v8 + *(unsigned int *)(v69 + 44));
        if ((*((_BYTE *)v8 + 7) & 1) != 0)
          v71 = (_QWORD *)*v71;
        v70(v69, v71);
        result = 1;
        v2 = v106;
      }
      else
      {
        result = 0;
      }
      v8 = (unsigned int *)(AG::data::_shared_table_bytes + *v6);
      LODWORD(v68) = *v8;
      if ((*v8 & 0x10) != 0)
        goto LABEL_139;
      goto LABEL_7;
    }
    result = 0;
LABEL_139:
    v95 = *((_QWORD *)this + 13);
    *v8 = v68 - 64;
    *((_QWORD *)this + 13) = v95 - 1;
    if (v95 != 1)
      continue;
    return result;
  }
}

uint64_t AGGraphSetOutputValue(unsigned __int8 *a1, AG::LayoutDescriptor *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v11;
  int v12;
  uint64_t v13;
  AG::swift::metadata *v14;
  AG::LayoutDescriptor *v15;
  int v16;
  unint64_t *v17;
  AG::LayoutDescriptor **v18;
  uint64_t result;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unsigned __int8 *v27;
  uint64_t v28;
  int v29;
  char v30;
  uint64_t v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  const char *v37;
  _QWORD *v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;

  v2 = AG::Graph::_current_update_key;
  v3 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v2);
  if ((v3 & 1) != 0 || (v4 = (uint64_t *)(v3 & 0xFFFFFFFFFFFFFFFELL), (v3 & 0xFFFFFFFFFFFFFFFELL) == 0))
    AG::precondition_failure((AG *)"no attribute updating", (const char *)this);
  v5 = v4 + 4;
  if (v4[12])
    v5 = (_QWORD *)v4[12];
  v6 = LODWORD(v5[v4[13] - 1]);
  v7 = AG::data::_shared_table_bytes + v6;
  v8 = *(_DWORD *)(AG::data::_shared_table_bytes + v6);
  if ((v8 & 0xC0) == 0)
    AG::precondition_failure((AG *)"writing attribute that is not evaluating: %u", (const char *)this, v6);
  v11 = *v4;
  v12 = *(_DWORD *)(*v4 + 232);
  if (v12)
  {
    v32 = v12 - 1;
    do
    {
      v33 = v32;
      v34 = *(_QWORD *)(*(_QWORD *)(v11 + 224) + 8 * v32);
      (*(void (**)(uint64_t, uint64_t, unsigned __int8 *))(*(_QWORD *)v34 + 272))(v34, v6, a1);
      --v32;
    }
    while (v33);
    v8 = *(_DWORD *)v7;
  }
  v13 = *(_QWORD *)(*(_QWORD *)(v11 + 128) + 8 * (v8 >> 8));
  v14 = *(AG::swift::metadata **)(v13 + 8);
  if (v14 != this)
  {
    v35 = AG::swift::metadata::name(v14, 0);
    v36 = AG::swift::metadata::name(this, 0);
    AG::precondition_failure((AG *)"invalid value type for attribute: %u (saw %s, expected %s)", v37, v6, v35, v36);
  }
  if ((v8 & 0x10) != 0)
  {
    v15 = (AG::LayoutDescriptor *)(AG::data::_shared_table_bytes + *(unsigned int *)(v7 + 8));
    if ((*(_BYTE *)(v7 + 7) & 2) != 0)
      v15 = *(AG::LayoutDescriptor **)v15;
    v16 = *(_DWORD *)(v13 + 40);
    v17 = (unint64_t *)(v16 & 3 | 0x80000100);
    v18 = *(AG::LayoutDescriptor ***)(v13 + 48);
    if (!v18)
    {
      v18 = (AG::LayoutDescriptor **)AG::LayoutDescriptor::fetch(this, (const AG::swift::metadata *)(v16 & 3 | 0x80000100), 0);
      *(_QWORD *)(v13 + 48) = v18;
    }
    if (v18 == (AG::LayoutDescriptor **)1)
      v18 = 0;
    result = AG::LayoutDescriptor::compare(v18, v15, a1, *(char **)(*((_QWORD *)this - 1) + 64), v17);
    if ((result & 1) == 0)
    {
      if (*(_DWORD *)(v11 + 232))
      {
        v31 = v11;
      }
      else
      {
        v40 = (uint64_t)v15;
        v41 = (uint64_t)a1;
        v20 = *(unsigned int *)(AG::data::_shared_table_bytes + v6 + 20);
        if (v20 < 0x20)
        {
LABEL_33:
          ++*(_QWORD *)(v11 + 464);
          v15 = (AG::LayoutDescriptor *)v40;
          a1 = (unsigned __int8 *)v41;
          return (*(uint64_t (**)(AG::LayoutDescriptor *, unsigned __int8 *, AG::LayoutDescriptor *))(*((_QWORD *)this - 1) + 24))(v15, a1, this);
        }
        v21 = 0;
        v22 = AG::data::_shared_table_bytes + *(unsigned int *)(AG::data::_shared_table_bytes + v6 + 24);
        v23 = v20 >> 5;
        while (1)
        {
          v24 = *(unsigned int *)(v22 + 4 * v21);
          if ((v24 & 3) != 0)
            break;
          v25 = AG::data::_shared_table_bytes + v24;
          v26 = *(unsigned int *)(AG::data::_shared_table_bytes + v24 + 12);
          if (v26 >= 0x20)
          {
            v27 = (unsigned __int8 *)(AG::data::_shared_table_bytes + *(unsigned int *)(v25 + 16) + 4);
            v28 = 5 * (v26 >> 5);
            while (1)
            {
              v29 = *((_DWORD *)v27 - 1);
              v42 = v29;
              if ((v29 & 3) != 0)
                v29 = AG::AttributeID::resolve_slow((AG::AttributeID *)&v42, 0);
              if (v29 == (_DWORD)v6)
              {
                v30 = *v27;
                if ((*v27 & 8) == 0)
                {
                  if ((*(v27 - 4) & 3) == 0)
                    goto LABEL_31;
                  v39 = v39 & 0xFFFFFF0000000000 | *((unsigned int *)v27 - 1) | ((unint64_t)*v27 << 32);
                  if ((AG::Graph::compare_edge_values(v11, *((_DWORD *)v27 - 1), v13, v40, v41) & 1) == 0)
                    break;
                }
              }
              v27 += 5;
              v28 -= 5;
              if (!v28)
                goto LABEL_32;
            }
            v30 = *v27;
LABEL_31:
            *v27 = v30 | 8;
          }
LABEL_32:
          if (++v21 == v23)
            goto LABEL_33;
        }
        v31 = v11;
        v15 = (AG::LayoutDescriptor *)v40;
        a1 = (unsigned __int8 *)v41;
      }
      AG::Graph::mark_changed(v31);
      return (*(uint64_t (**)(AG::LayoutDescriptor *, unsigned __int8 *, AG::LayoutDescriptor *))(*((_QWORD *)this - 1) + 24))(v15, a1, this);
    }
  }
  else
  {
    AG::Node::allocate_value((unsigned int *)v7, (AG::Graph *)v11, *(AG::data::zone **)(AG::data::_shared_table_bytes + (v6 & 0xFFFFFE00)));
    *(_DWORD *)v7 |= 0x10u;
    AG::Graph::mark_changed(v11, v6, 0, 0, 0);
    v38 = (_QWORD *)(AG::data::_shared_table_bytes + *(unsigned int *)(v7 + 8));
    if ((*(_BYTE *)(v7 + 7) & 2) != 0)
      v38 = (_QWORD *)*v38;
    return (*(uint64_t (**)(_QWORD *, unsigned __int8 *, AG::LayoutDescriptor *))(*((_QWORD *)this - 1) + 16))(v38, a1, this);
  }
  return result;
}

uint64_t AG::LayoutDescriptor::compare(AG::LayoutDescriptor **this, AG::LayoutDescriptor *a2, unsigned __int8 *a3, char *a4, unint64_t *a5)
{
  uint64_t v5;
  void *v6;
  void **v7;
  char *v8;
  uint64_t v9;
  void *v11[64];
  void *v12[2];
  uint64_t v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  if (a2 == (AG::LayoutDescriptor *)a3)
    return 1;
  if (this)
  {
    *(_OWORD *)v12 = 0u;
    v13 = 8;
    v5 = AG::LayoutDescriptor::Compare::operator()(v11, this, (uint64_t)a2, (uint64_t)a3, 0, (uint64_t)a4, a5);
    v6 = v12[0];
    if (v12[0])
      v7 = (void **)v12[0];
    else
      v7 = v11;
    if (v12[1])
    {
      v8 = 0;
      do
      {
        AG::LayoutDescriptor::Compare::Enum::~Enum((AG::LayoutDescriptor::Compare::Enum *)v7);
        ++v8;
        v7 = (void **)(v9 + 64);
      }
      while (v8 < v12[1]);
      v6 = v12[0];
    }
    if (v6)
      free(v6);
    return v5;
  }
  return AG::LayoutDescriptor::compare_bytes_top_level(a2, a3, a4, (int)a5, a5);
}

void sub_1AB935720(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  AG::LayoutDescriptor::Compare::~Compare((AG::LayoutDescriptor::Compare *)&a9);
  _Unwind_Resume(a1);
}

void AG::Graph::mark_changed(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v7;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unsigned __int8 *v15;
  uint64_t v16;
  int v17;
  char v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;

  if (!*(_DWORD *)(a1 + 232))
  {
    v7 = *(unsigned int *)(AG::data::_shared_table_bytes + a2 + 20);
    if (v7 < 0x20)
      goto LABEL_19;
    v9 = 0;
    v10 = AG::data::_shared_table_bytes + *(unsigned int *)(AG::data::_shared_table_bytes + a2 + 24);
    v11 = v7 >> 5;
    while (1)
    {
      v12 = *(unsigned int *)(v10 + 4 * v9);
      if ((v12 & 3) != 0)
      {
        AG::Graph::mark_changed(a1);
        return;
      }
      v13 = AG::data::_shared_table_bytes + v12;
      v14 = *(unsigned int *)(AG::data::_shared_table_bytes + v12 + 12);
      if (v14 < 0x20)
        goto LABEL_18;
      v15 = (unsigned __int8 *)(AG::data::_shared_table_bytes + *(unsigned int *)(v13 + 16) + 4);
      v16 = 5 * (v14 >> 5);
      while (1)
      {
        v17 = *((_DWORD *)v15 - 1);
        v24 = v17;
        if ((v17 & 3) != 0)
        {
          v21 = a4;
          v23 = a5;
          v17 = AG::AttributeID::resolve_slow((AG::AttributeID *)&v24, 0);
          a4 = v21;
          a5 = v23;
        }
        if (v17 != a2)
          goto LABEL_14;
        v18 = *v15;
        if ((*v15 & 8) != 0)
          goto LABEL_14;
        if ((*(v15 - 4) & 3) == 0)
          goto LABEL_17;
        v19 = v19 & 0xFFFFFF0000000000 | *((unsigned int *)v15 - 1) | ((unint64_t)*v15 << 32);
        v20 = a4;
        v22 = a5;
        if ((AG::Graph::compare_edge_values(a1, *((_DWORD *)v15 - 1), a3, a4, a5) & 1) == 0)
          break;
        a4 = v20;
        a5 = v22;
LABEL_14:
        v15 += 5;
        v16 -= 5;
        if (!v16)
          goto LABEL_18;
      }
      v18 = *v15;
      a4 = v20;
      a5 = v22;
LABEL_17:
      *v15 = v18 | 8;
LABEL_18:
      if (++v9 == v11)
      {
LABEL_19:
        ++*(_QWORD *)(a1 + 464);
        return;
      }
    }
  }
  AG::Graph::mark_changed(a1);
}

unsigned int *AG::Node::allocate_value(unsigned int *this, AG::Graph *a2, AG::data::zone *a3)
{
  unsigned int *v5;
  uint64_t v6;
  size_t v7;
  int v8;
  unsigned int v9;
  uint64_t v10;
  int v11;

  if (!this[2])
  {
    v5 = this;
    v6 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 16) + (((unint64_t)*this >> 5) & 0x7FFFFF8)) + 8)
                   - 8);
    v7 = *(unsigned int *)(v6 + 64);
    v8 = *(unsigned __int8 *)(v6 + 80);
    if ((*((_BYTE *)this + 7) & 2) != 0)
    {
      v9 = AG::data::zone::alloc_bytes_recycle(a3, 8u, 7);
      this = (unsigned int *)AG::data::zone::alloc_persistent(a3, v7);
      *(_QWORD *)(AG::data::_shared_table_bytes + v9) = this;
    }
    else
    {
      if (v7 > 0x10)
      {
        v10 = *((unsigned int *)a3 + 4);
        if ((_DWORD)v10)
        {
          v11 = (*(_DWORD *)(AG::data::_shared_table_bytes + v10 + 16) + v8) & ~v8;
          if ((v11 + v7) <= *(_DWORD *)(AG::data::_shared_table_bytes + v10 + 12))
          {
            *(_DWORD *)(AG::data::_shared_table_bytes + v10 + 16) = v11 + v7;
            v9 = v11 + v10;
            goto LABEL_11;
          }
        }
        this = (unsigned int *)AG::data::zone::alloc_slow(a3, v7, v8);
      }
      else
      {
        this = (unsigned int *)AG::data::zone::alloc_bytes_recycle(a3, v7, v8);
      }
      v9 = this;
    }
LABEL_11:
    v5[2] = v9;
    *((_QWORD *)a2 + 36) += v7;
  }
  return this;
}

uint64_t AGDispatchEquatable()
{
  return sub_1AB9620B4() & 1;
}

void AG::LayoutDescriptor::Compare::Enum::~Enum(AG::LayoutDescriptor::Compare::Enum *this)
{
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)this - 8);
  (*(void (**)(_QWORD, _QWORD))(v2 + 104))(*((_QWORD *)this + 5), *((unsigned int *)this + 12));
  (*(void (**)(_QWORD, _QWORD, _QWORD))(v2 + 104))(*((_QWORD *)this + 4), *((unsigned int *)this + 12), *(_QWORD *)this);
  if (*((_DWORD *)this + 13) == 1)
  {
    (*(void (**)(_QWORD, _QWORD))(v2 + 8))(*((_QWORD *)this + 5), *(_QWORD *)this);
    (*(void (**)(_QWORD, _QWORD))(v2 + 8))(*((_QWORD *)this + 4), *(_QWORD *)this);
  }
  if (*((_BYTE *)this + 56))
  {
    free(*((void **)this + 4));
    if (*((_BYTE *)this + 56))
      free(*((void **)this + 5));
  }
}

_QWORD *AG::LayoutDescriptor::Compare::Enum::Enum(_QWORD *a1, uint64_t a2, int a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10)
{
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;

  v10 = a2;
  v12 = a9;
  *a1 = a2;
  a1[1] = a5;
  a1[2] = a6;
  a1[3] = a7;
  a1[4] = a8;
  a1[5] = a9;
  *((_DWORD *)a1 + 12) = a4;
  *((_DWORD *)a1 + 13) = a3;
  *((_BYTE *)a1 + 56) = a10;
  v13 = *(_QWORD *)(a2 - 8);
  if (a3 == 1)
  {
    (*(void (**)(void))(v13 + 16))();
    (*(void (**)(_QWORD, _QWORD, _QWORD))(v13 + 16))(a1[4], a1[2], *a1);
    v12 = a1[5];
    v10 = *a1;
  }
  (*(void (**)(uint64_t, uint64_t))(v13 + 96))(v12, v10);
  (*(void (**)(_QWORD, _QWORD))(v13 + 96))(a1[4], *a1);
  return a1;
}

void AG::Graph::invalidate_subgraphs(AG::Graph *this)
{
  unsigned int v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  int i;
  char *v9;
  int v10;
  AG::Subgraph *v11;

  if (!*((_BYTE *)this + 408) && !*((_QWORD *)this + 30))
  {
    if (*((_DWORD *)this + 92))
    {
      v2 = 0;
      do
      {
        v3 = *(_QWORD *)(*((_QWORD *)this + 45) + 8 * v2);
        *(_BYTE *)(v3 + 105) |= 2u;
        AG::Subgraph::cache_collect(v3);
        v4 = *(_BYTE *)(v3 + 105);
        *(_BYTE *)(v3 + 105) = v4 & 0xFD;
        if ((v4 & 1) != 0)
        {
          ++v2;
          v6 = *((_DWORD *)this + 92);
        }
        else
        {
          v5 = *((_QWORD *)this + 45);
          v6 = *((_DWORD *)this + 92) - 1;
          v7 = *(_QWORD *)(v5 + 8 * v2);
          *(_QWORD *)(v5 + 8 * v2) = *(_QWORD *)(v5 + 8 * v6);
          *(_QWORD *)(v5 + 8 * v6) = v7;
          *((_DWORD *)this + 92) = v6;
        }
      }
      while (v2 < v6);
    }
    for (i = *((_DWORD *)this + 100); i; i = *((_DWORD *)this + 100))
    {
      v9 = (char *)*((_QWORD *)this + 49);
      if (!v9)
        v9 = (char *)this + 376;
      v10 = i - 1;
      v11 = *(AG::Subgraph **)&v9[8 * v10];
      *((_DWORD *)this + 100) = v10;
      AG::Subgraph::invalidate_now(v11, this);
    }
  }
}

uint64_t AG::Graph::compare_edge_values(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t result;
  int v6;
  char *v7;
  unsigned int v11;
  AG::LayoutDescriptor *v12;
  const unsigned __int8 *v13;
  unsigned int v14;
  AG::LayoutDescriptor *v15;
  AG::LayoutDescriptor *v16;
  AG *v17;
  unsigned int v18;
  const unsigned __int8 *v19;
  int v20;

  result = 0;
  if (a3 && (a2 & 3) == 1)
  {
    result = 0;
    v6 = *(unsigned __int16 *)(AG::data::_shared_table_bytes + (a2 & 0xFFFFFFFC) + 12);
    v7 = v6 == 0xFFFF ? 0 : (char *)*(unsigned __int16 *)(AG::data::_shared_table_bytes + (a2 & 0xFFFFFFFC) + 12);
    if (v6 != 0xFFFF)
    {
      if (*(_WORD *)(AG::data::_shared_table_bytes + (a2 & 0xFFFFFFFC) + 12))
      {
        v20 = a2;
        AG::AttributeID::resolve_slow((AG::AttributeID *)&v20, 0);
        v12 = *(AG::LayoutDescriptor **)(a3 + 8);
        v13 = (const unsigned __int8 *)v11;
        if (v11 || *(char **)(*((_QWORD *)v12 - 1) + 64) != v7)
        {
          v14 = *(_DWORD *)(a3 + 40) & 3 | 0x100;
          v15 = *(AG::LayoutDescriptor **)(a3 + 48);
          if (!v15)
          {
            v19 = (const unsigned __int8 *)v11;
            v18 = *(_DWORD *)(a3 + 40) & 3 | 0x100;
            v17 = AG::LayoutDescriptor::fetch(v12, (const AG::swift::metadata *)v18, 0);
            v14 = v18;
            v13 = v19;
            v15 = v17;
            *(_QWORD *)(a3 + 48) = v17;
          }
          if (v15 == (AG::LayoutDescriptor *)1)
            v16 = 0;
          else
            v16 = v15;
          return AG::LayoutDescriptor::compare_partial(v16, (AG::LayoutDescriptor *)&v13[a4], (unsigned __int8 *)&v13[a5], v13, v7, v14);
        }
        else
        {
          return 0;
        }
      }
      else
      {
        return 1;
      }
    }
  }
  return result;
}

uint64_t AG::LayoutDescriptor::compare_partial(AG::LayoutDescriptor *this, AG::LayoutDescriptor *a2, unsigned __int8 *a3, const unsigned __int8 *a4, char *a5, unsigned int a6)
{
  char *v7;
  char *partial;
  char *v11;
  AG::LayoutDescriptor **v12;
  char *v13;
  uint64_t v14;
  void *v15;
  void **v16;
  char *v17;
  uint64_t v18;
  void *v20[64];
  void *v21[2];
  uint64_t v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  if (a2 == (AG::LayoutDescriptor *)a3)
    return 1;
  v7 = a5;
  if (!this)
    return AG::LayoutDescriptor::compare_bytes_top_level(a2, a3, v7, a6, (unint64_t *)a5);
  partial = AG::LayoutDescriptor::find_partial((char *)this, a4, (unint64_t)a5);
  if (!partial)
    return AG::LayoutDescriptor::compare_bytes_top_level(a2, a3, v7, a6, (unint64_t *)a5);
  v12 = (AG::LayoutDescriptor **)partial;
  v13 = v11;
  if (!v11)
    goto LABEL_9;
  if (AG::LayoutDescriptor::compare_bytes_top_level(a2, a3, v11, a6, (unint64_t *)a5))
  {
    if (v7 >= v13)
      v7 -= (uint64_t)v13;
    else
      v7 = 0;
LABEL_9:
    *(_OWORD *)v21 = 0u;
    v22 = 8;
    v14 = AG::LayoutDescriptor::Compare::operator()(v20, v12, (uint64_t)a2, (uint64_t)a3, (unint64_t *)v13, (uint64_t)v7, a6);
    v15 = v21[0];
    if (v21[0])
      v16 = (void **)v21[0];
    else
      v16 = v20;
    if (v21[1])
    {
      v17 = 0;
      do
      {
        AG::LayoutDescriptor::Compare::Enum::~Enum((AG::LayoutDescriptor::Compare::Enum *)v16);
        ++v17;
        v16 = (void **)(v18 + 64);
      }
      while (v17 < v21[1]);
      v15 = v21[0];
    }
    if (v15)
      free(v15);
    return v14;
  }
  return 0;
}

void sub_1AB935ECC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  AG::LayoutDescriptor::Compare::~Compare((AG::LayoutDescriptor::Compare *)&a9);
  _Unwind_Resume(a1);
}

uint64_t AG::Subgraph::to_cf(AG::Subgraph *this)
{
  return *((_QWORD *)this + 4);
}

uint64_t AG::Subgraph::from_cf(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16);
}

uint64_t AG::data::zone::alloc_slow(AG::data::zone *this, unsigned int a2, int a3)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  int v10;
  int v11;
  uint64_t v12;
  int v13;
  _DWORD *v14;
  int v15;
  unsigned int v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;

  v6 = *((unsigned int *)this + 4);
  if ((_DWORD)v6)
  {
    v7 = AG::data::_shared_table_bytes + v6;
    v8 = *(_DWORD *)(AG::data::_shared_table_bytes + v6 + 16);
    v9 = v8 + v6;
    if (((v8 + (_DWORD)v6) & 0xFFFFFE00) == (_DWORD)v6)
    {
      v10 = *(_DWORD *)(v7 + 12);
      v11 = v10 - v8;
      v12 = (v9 + 3) & 0xFFFFFFFC;
      v13 = v11 + v9 - v12;
      if (v13 >= 8)
      {
        v14 = (_DWORD *)(AG::data::_shared_table_bytes + v12);
        v14[1] = v13;
        *v14 = *((_DWORD *)this + 5);
        *((_DWORD *)this + 5) = v12;
        v10 = *(_DWORD *)(v7 + 12);
      }
      *(_DWORD *)(v7 + 16) = v10;
    }
  }
  if (a2 < 0x101)
  {
    v16 = AG::data::table::alloc_page((os_unfair_lock_s *)&AG::data::_shared_table_bytes, this, 512);
    v21 = v16;
    v19 = AG::data::_shared_table_bytes;
    *(_DWORD *)(AG::data::_shared_table_bytes + v16 + 8) = *((_DWORD *)this + 4);
    *((_DWORD *)this + 4) = v16;
    v15 = ~a3;
  }
  else
  {
    v15 = ~a3;
    v16 = AG::data::table::alloc_page((os_unfair_lock_s *)&AG::data::_shared_table_bytes, this, (a2 + ((a3 + 24) & ~a3) + 511) & 0xFFFFFE00);
    v18 = *((unsigned int *)this + 4);
    if ((_DWORD)v18)
    {
      v19 = AG::data::_shared_table_bytes;
      v20 = AG::data::_shared_table_bytes + v18;
      v21 = v16;
      *(_DWORD *)(AG::data::_shared_table_bytes + v16 + 8) = *(_DWORD *)(v20 + 8);
      *(_DWORD *)(v20 + 8) = v16;
    }
    else
    {
      *((_DWORD *)this + 4) = v16;
      v19 = AG::data::_shared_table_bytes;
      v21 = v16;
    }
  }
  v22 = v19 + v21;
  v23 = (*(_DWORD *)(v22 + 16) + a3) & v15;
  if (v23 + a2 > *(_DWORD *)(v22 + 12))
    AG::precondition_failure((AG *)"internal error", v17);
  *(_DWORD *)(v22 + 16) = v23 + a2;
  return v23 + v16;
}

uint64_t AG::data::table::alloc_page(os_unfair_lock_s *this, AG::data::zone *a2, int a3)
{
  os_unfair_lock_s *v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int os_unfair_lock_opaque;
  unsigned int v11;
  uint32_t v12;
  int v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unsigned int v23;
  unsigned int v24;
  int v25;
  os_unfair_lock_s *v26;
  int v27;
  unsigned int v28;
  uint64_t v29;
  unsigned int v30;
  uint32_t v31;
  uint32_t v32;
  unsigned int v33;
  uint64_t v34;
  unsigned int v36;
  os_unfair_lock_s *v37;

  v6 = this + 4;
  os_unfair_lock_lock(this + 4);
  v8 = a3 + 511;
  v9 = (a3 + 511) >> 9;
  os_unfair_lock_opaque = this[18]._os_unfair_lock_opaque;
  v11 = os_unfair_lock_opaque << 6;
  v12 = this[7]._os_unfair_lock_opaque + v9;
  if (v12 <= os_unfair_lock_opaque << 6 && os_unfair_lock_opaque != 0)
  {
    v14 = 0;
    v15 = *(_QWORD *)&this[16]._os_unfair_lock_opaque;
    v16 = this[9]._os_unfair_lock_opaque;
    if (v9 <= 2)
      v17 = 2;
    else
      v17 = (a3 + 511) >> 9;
    v18 = v17 - 1;
    do
    {
      if ((int)v16 + v14 >= os_unfair_lock_opaque)
        v19 = os_unfair_lock_opaque;
      else
        v19 = 0;
      v20 = (_DWORD)v16 + v14 - v19;
      v21 = *(_QWORD *)(v15 + 8 * v20);
      if (v21 == -1)
      {
LABEL_21:
        v20 = v16;
      }
      else
      {
        v22 = ~v21;
LABEL_14:
        v7 = __clz(__rbit64(v22));
        if (v8 >= 0x400)
        {
          v23 = (((_DWORD)v20 << 6) | 1) + v7;
          v24 = v18;
          while (os_unfair_lock_opaque != v23 >> 6)
          {
            if (((*(_QWORD *)(v15 + 8 * (v23 >> 6)) >> v23) & 1) != 0)
            {
              v7 = 1 << v7;
              v22 &= ~v7;
              if (v22)
                goto LABEL_14;
              goto LABEL_21;
            }
            ++v23;
            if (!--v24)
              break;
          }
        }
        v11 = ((_DWORD)v20 << 6) | v7;
        this[9]._os_unfair_lock_opaque = v20;
      }
      ++v14;
      v16 = v20;
    }
    while (v14 != os_unfair_lock_opaque);
  }
  if (v8 >= 0x200)
  {
    v37 = v6;
    v25 = 0;
    v26 = this + 16;
    v36 = v9;
    if (v9 <= 1)
      v27 = 1;
    else
      v27 = v9;
    do
    {
      v28 = v11 + v25;
      v29 = (v11 + v25) >> 6;
      if (this[18]._os_unfair_lock_opaque == (v11 + v25) >> 6)
      {
        v30 = v29 + 1;
        if (this[19]._os_unfair_lock_opaque <= v29)
        {
          AG::vector<std::pair<unsigned int,BOOL>,0ul,unsigned int>::reserve_slow((uint64_t)&this[16], v30);
          v31 = this[18]._os_unfair_lock_opaque;
          v30 = v31 + 1;
        }
        else
        {
          v31 = v28 >> 6;
        }
        *(_QWORD *)(*(_QWORD *)&this[16]._os_unfair_lock_opaque + 8 * v31) = 0;
        this[18]._os_unfair_lock_opaque = v30;
        v32 = this[22]._os_unfair_lock_opaque;
        v7 = v32 + 1;
        if (this[23]._os_unfair_lock_opaque < v7)
        {
          AG::vector<std::pair<unsigned int,BOOL>,0ul,unsigned int>::reserve_slow((uint64_t)&this[20], v7);
          v32 = this[22]._os_unfair_lock_opaque;
          v7 = v32 + 1;
        }
        *(_QWORD *)(*(_QWORD *)&this[20]._os_unfair_lock_opaque + 8 * v32) = 0;
        this[22]._os_unfair_lock_opaque = v7;
      }
      else if (!*(_QWORD *)(*(_QWORD *)&v26->_os_unfair_lock_opaque + 8 * v29))
      {
        AG::data::table::make_pages_reusable((AG::data::table *)this, v11 + v25, 0);
      }
      *(_QWORD *)(*(_QWORD *)&v26->_os_unfair_lock_opaque + 8 * v29) |= 1 << v28;
      if (!v25)
        *(_QWORD *)(*(_QWORD *)&this[20]._os_unfair_lock_opaque + 8 * v29) |= 1 << v28;
      ++v25;
    }
    while (v27 != v25);
    v9 = v36;
    v12 = this[7]._os_unfair_lock_opaque + v36;
    v6 = v37;
  }
  this[7]._os_unfair_lock_opaque = v12;
  v33 = (v11 + v9) << 9;
  while (this[5]._os_unfair_lock_opaque < v33)
    AG::data::table::grow_region((AG::data::table *)this, (const char *)v7);
  v34 = *(_QWORD *)&this->_os_unfair_lock_opaque + (v11 << 9) + 512;
  *(_DWORD *)(v34 + 8) = 0;
  *(_DWORD *)(v34 + 12) = v8 & 0xFFFFFE00;
  *(_QWORD *)v34 = a2;
  *(_QWORD *)(v34 + 16) = 24;
  os_unfair_lock_unlock(v6);
  return (v11 << 9) + 512;
}

void sub_1AB9362E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, os_unfair_lock_t lock)
{
  os_unfair_lock_unlock(lock);
  _Unwind_Resume(a1);
}

char *AG::LayoutDescriptor::find_partial(char *this, const unsigned __int8 *a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  char *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  int v11;
  int v12;
  int v13;
  uint64_t v14;
  int v15;
  int v16;
  int v17;
  int v18;
  uint64_t v19;
  int v20;
  char *v21;
  char v22;
  const unsigned __int8 *v23;

  if (a2)
  {
    v3 = 0;
    v4 = 0;
    do
    {
      v5 = this + 1;
      v6 = *this;
      if ((v6 - 64) >= 0x40)
      {
        switch(*this)
        {
          case 0:
            return 0;
          case 1:
          case 2:
            v8 = *(_QWORD *)(this + 1);
            this += 17;
            goto LABEL_36;
          case 3:
            v8 = *(_QWORD *)(this + 1);
            this += 9;
LABEL_36:
            v3 += *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64);
            continue;
          case 4:
          case 5:
            v3 += 8;
            goto LABEL_6;
          case 6:
            v19 = 0;
            v20 = 0;
            v21 = this + 9;
            do
            {
              v22 = *v21++;
              v19 |= (unint64_t)(v22 & 0x7F) << v20;
              v20 += 7;
            }
            while (v22 < 0);
            this = *(char **)(this + 1);
            goto LABEL_41;
          case 7:
            v19 = *(unsigned __int16 *)(this + 5);
            v21 = this + 7;
            this = &AG::LayoutDescriptor::base_address[*(int *)(this + 1)];
LABEL_41:
            if (v19 + v3 > (unint64_t)a2 && (v23 = &a2[-v3], v19 - (uint64_t)&a2[-v3] >= a3))
            {
              v3 = 0;
              a2 = v23;
            }
            else
            {
              this = v21;
              v3 += v19;
            }
            continue;
          case 8:
            do
              v9 = *v5++;
            while (v9 < 0);
            goto LABEL_12;
          case 9:
          case 10:
          case 11:
LABEL_12:
            v10 = *(_QWORD *)v5;
            v5 += 8;
            v4 = v10;
            goto LABEL_13;
          case 12:
            do
              v18 = *v5++;
            while (v18 < 0);
            goto LABEL_13;
          case 13:
          case 14:
          case 15:
          case 16:
          case 17:
          case 18:
          case 19:
          case 20:
          case 21:
LABEL_13:
            v11 = 0;
            while (1)
            {
              this = v5;
              v12 = *v5++;
              v13 = v11;
              v14 = 1;
              switch(v12)
              {
                case 0:
                  goto LABEL_7;
                case 1:
                case 2:
                  v14 = 9;
                  goto LABEL_20;
                case 3:
LABEL_20:
                  v5 = &this[v14 + 8];
                  continue;
                case 6:
                  v5 = this + 9;
                  do
                    v16 = *v5++;
                  while (v16 < 0);
                  continue;
                case 7:
                  v5 = this + 7;
                  continue;
                case 8:
                  do
                    v15 = *++this;
                  while (v15 < 0);
                  goto LABEL_18;
                case 9:
                case 10:
                case 11:
LABEL_18:
                  v5 = this + 9;
                  ++v11;
                  continue;
                case 12:
                  if (!v11)
                    goto LABEL_7;
                  do
                    v17 = *v5++;
                  while (v17 < 0);
                  break;
                case 13:
                case 14:
                case 15:
                case 16:
                case 17:
                case 18:
                case 19:
                case 20:
                case 21:
                  if (v11)
                    continue;
                  goto LABEL_7;
                case 22:
                  --v11;
                  if (v13)
                    continue;
                  goto LABEL_7;
                default:
                  continue;
              }
            }
          case 22:
            v3 += *(_QWORD *)(*(_QWORD *)(v4 - 8) + 64);
            ++this;
            v4 = 0;
            continue;
          default:
            if ((v6 & 0x80) == 0)
              goto LABEL_6;
            v7 = v6 & 0x7F;
            break;
        }
      }
      else
      {
        v7 = v6 & 0x3F;
      }
      v3 += v7 + 1;
LABEL_6:
      ++this;
LABEL_7:
      ;
    }
    while (v3 < (unint64_t)a2);
  }
  return this;
}

uint64_t AG::LayoutDescriptor::compare_indirect(AG::LayoutDescriptor **a1, uint64_t a2, AG::LayoutDescriptor *a3, int a4, const void *a5, const void *a6)
{
  uint64_t v12;
  size_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t *v17;
  void (*v18)(uint64_t *, uint64_t);
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  AG::LayoutDescriptor *v25;
  uint64_t v26;
  _QWORD v28[2];

  v28[1] = *MEMORY[0x1E0C80C00];
  v12 = *(_QWORD *)(a2 - 8);
  v13 = *(_QWORD *)(v12 + 64);
  if (v13 > 0x1000)
  {
    v14 = (uint64_t *)malloc_type_malloc(*(_QWORD *)(v12 + 64), 0x100004077774924uLL);
    v17 = (uint64_t *)malloc_type_malloc(v13, 0x100004077774924uLL);
    v16 = v17;
    if (!v14 || !v17)
    {
      free(v17);
      v26 = 0;
LABEL_15:
      free(v14);
      return v26;
    }
  }
  else
  {
    MEMORY[0x1E0C80A78](a1);
    v14 = (_QWORD *)((char *)v28 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
    bzero(v14, v13);
    MEMORY[0x1E0C80A78](v15);
    v16 = v14;
    bzero(v14, v13);
  }
  memcpy(v14, a5, v13);
  memcpy(v16, a6, v13);
  v18 = *(void (**)(uint64_t *, uint64_t))(*(_QWORD *)(a2 - 8) + 96);
  v18(v14, a2);
  v18(v16, a2);
  v20 = *v14;
  v21 = *v16;
  if (*v14 == *v16)
  {
    v26 = 1;
  }
  else
  {
    v22 = *((_QWORD *)a3 - 1);
    v23 = *(unsigned __int8 *)(v22 + 80);
    v24 = a4 & 0xFFFFFEFF;
    v25 = *a1;
    if (!*a1)
    {
      v25 = AG::LayoutDescriptor::fetch(a3, (const AG::swift::metadata *)v24, 0);
      *a1 = v25;
      v22 = *((_QWORD *)a3 - 1);
    }
    if (v25 == (AG::LayoutDescriptor *)1)
      v25 = 0;
    v26 = AG::LayoutDescriptor::compare(v25, (AG::LayoutDescriptor *)(v20 + ((v23 + 16) & ~v23)), (const unsigned __int8 *)(v21 + ((v23 + 16) & ~v23)), *(const unsigned __int8 **)(v22 + 64), v24, v19);
  }
  if (v13 > 0x1000)
  {
    free(v16);
    goto LABEL_15;
  }
  return v26;
}

void sub_1AB93670C(_Unwind_Exception *exception_object)
{
  void *v1;
  unint64_t v2;
  void *v3;

  if (v2 > 0x1000)
  {
    free(v3);
    free(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t AG::Graph::UpdateStack::push_slow(uint64_t *a1, const char *a2, unsigned int *a3, char a4, int a5)
{
  unsigned int v9;
  int v10;
  uint64_t *v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  void (*v16)(void);
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  _DWORD *v20;
  _DWORD *v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t *v24;
  int *v25;
  int v26;

  v9 = *a3;
  v10 = *a3 >> 6;
  if (*a3 >> 6)
  {
    if ((a4 & 1) != 0)
      return 0;
    if (a1)
    {
      v11 = a1;
      while (1)
      {
        v12 = (_QWORD *)((unint64_t)v11 & 0xFFFFFFFFFFFFFFFELL);
        v13 = v12[13];
        if (v13)
          break;
        v11 = (uint64_t *)v12[2];
        if (!v11)
          goto LABEL_12;
      }
      v14 = v12 + 4;
      v15 = (_QWORD *)v12[12];
      if (!v15)
        v15 = v14;
      if ((v15[v13 - 1] & 0x200000000) == 0)
      {
        AG::Graph::print_cycle(*a1, (const char *)a2);
        v9 = *a3;
      }
    }
LABEL_12:
    if ((v9 & 0x10) != 0)
      return 0;
    v16 = *(void (**)(void))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*a1 + 128) + 8 * (v9 >> 8)) + 32) + 40);
    if (v16)
    {
      v17 = a1 + 4;
      v18 = a1[13];
      if (a1[14] < (unint64_t)(v18 + 1))
      {
        AG::vector<AG::swift::metadata const*,8ul,unsigned long>::reserve_slow(a1 + 4, v18 + 1);
        v17 = a1 + 4;
        v18 = a1[13];
      }
      v19 = a1[12];
      if (!v19)
        v19 = (uint64_t)v17;
      v20 = (_DWORD *)(v19 + 8 * v18);
      *v20 = (_DWORD)a2;
      v20[1] = 0;
      v21 = v20 + 1;
      if ((*a3 & 2) != 0 || (*a3 & 0x10) == 0 && a5)
        *v21 = 1;
      a1[13] = v18 + 1;
      v16();
      --a1[13];
      v9 = *a3;
      if ((*a3 & 0x10) != 0)
        return 0;
    }
    if (v10 == 3)
      AG::precondition_failure((AG *)"cyclic graph: %u", a2, a2);
  }
  *a3 = v9 + 64;
  v22 = a1[13];
  if (a1[14] < (unint64_t)(v22 + 1))
  {
    AG::vector<AG::swift::metadata const*,8ul,unsigned long>::reserve_slow(a1 + 4, v22 + 1);
    v22 = a1[13];
  }
  if (a1[12])
    v23 = (uint64_t *)a1[12];
  else
    v23 = a1 + 4;
  v24 = &v23[v22];
  *(_DWORD *)v24 = (_DWORD)a2;
  *((_DWORD *)v24 + 1) = 0;
  v25 = (int *)v24 + 1;
  if ((*a3 & 2) != 0 || (v26 = 2, (*a3 & 0x10) == 0) && a5)
  {
    *v25 = 1;
    v26 = 3;
  }
  a1[13] = v22 + 1;
  if (v10)
    *v25 = v26;
  return 1;
}

void *AG::vector<AG::swift::metadata const*,8ul,unsigned long>::reserve_slow(void *__dst, size_t a2)
{
  size_t v3;
  void *result;

  if (*((_QWORD *)__dst + 10) + (*((_QWORD *)__dst + 10) >> 1) <= a2)
    v3 = a2;
  else
    v3 = *((_QWORD *)__dst + 10) + (*((_QWORD *)__dst + 10) >> 1);
  result = AG::details::realloc_vector<unsigned long,8ul>(*((void **)__dst + 8), __dst, 8uLL, (size_t *)__dst + 10, v3);
  *((_QWORD *)__dst + 8) = result;
  return result;
}

void *AG::details::realloc_vector<unsigned long,8ul>(void *__src, void *__dst, size_t a3, size_t *a4, size_t a5)
{
  void *v7;
  size_t v8;
  size_t v9;
  void *v10;
  const char *v11;
  void *v12;

  v7 = __src;
  if (a5 <= a3)
  {
    if (__src)
    {
      v9 = a3;
      memcpy(__dst, __src, 8 * a5);
      free(v7);
      v12 = 0;
LABEL_8:
      *a4 = v9;
      return v12;
    }
  }
  else
  {
    v8 = malloc_good_size(8 * a5);
    v9 = v8 >> 3;
    if (v8 >> 3 != *a4)
    {
      v10 = malloc_type_realloc(v7, v8, 0x8734B07FuLL);
      if (!v10)
        AG::precondition_failure((AG *)"allocation failure", v11);
      v12 = v10;
      if (!v7)
        memcpy(v10, __dst, 8 * *a4);
      goto LABEL_8;
    }
  }
  return v7;
}

uint64_t AG::LayoutDescriptor::compare_existential_values(AG::LayoutDescriptor *this, const AG::swift::existential_type_metadata *a2, unsigned __int8 *a3, const unsigned __int8 *a4)
{
  unint64_t v4;
  uint64_t result;
  AG::LayoutDescriptor *v9;
  AG::LayoutDescriptor *v10;
  const unsigned __int8 *v11;
  const unsigned __int8 *v12;
  AG::LayoutDescriptor *v14;
  unsigned int v15;

  LODWORD(v4) = (_DWORD)a4;
  result = AG::swift::existential_type_metadata::dynamic_type(this, a2);
  if (result)
  {
    v9 = (AG::LayoutDescriptor *)result;
    if (result == AG::swift::existential_type_metadata::dynamic_type(this, a3))
    {
      v10 = (AG::LayoutDescriptor *)AG::swift::existential_type_metadata::project_value(this, a2);
      v11 = (const unsigned __int8 *)AG::swift::existential_type_metadata::project_value(this, a3);
      if (v10 == (AG::LayoutDescriptor *)v11)
      {
        return 1;
      }
      else
      {
        v12 = v11;
        if (v11 == a3 && v10 == a2)
          v4 = v4;
        else
          v4 = v4 & 0xFFFFFEFF;
        v14 = AG::LayoutDescriptor::fetch(v9, (const AG::swift::metadata *)v4, 0);
        if (v14 == (AG::LayoutDescriptor *)1)
          v14 = 0;
        return AG::LayoutDescriptor::compare(v14, v10, v12, *(const unsigned __int8 **)(*((_QWORD *)v9 - 1) + 64), v4, v15);
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t AG::swift::existential_type_metadata::dynamic_type(AG::swift::existential_type_metadata *this, _QWORD *a2)
{
  int v2;
  int v3;

  v2 = *((_DWORD *)this + 2);
  if ((v2 & 0x3F000000) != 0)
    v3 = 2;
  else
    v3 = v2 >= 0;
  if (!v3)
    return a2[3];
  if (v3 == 1)
    return swift_getObjectType();
  return 0;
}

_QWORD *AG::swift::existential_type_metadata::project_value(AG::swift::existential_type_metadata *this, _QWORD *a2)
{
  int v2;
  int v3;
  int v4;

  v2 = *((_DWORD *)this + 2);
  if ((v2 & 0x3F000000) != 0)
    v3 = 2;
  else
    v3 = v2 >= 0;
  if (v3 == 2)
    return 0;
  if (!v3)
  {
    v4 = *(_DWORD *)(*(_QWORD *)(a2[3] - 8) + 80);
    if ((v4 & 0x20000) != 0)
      return (_QWORD *)(*a2 + ((v4 + 16) & ~(unint64_t)v4));
  }
  return a2;
}

uint64_t AG::LayoutDescriptor::compare_heap_objects(AG::LayoutDescriptor *this, const unsigned __int8 *a2, const void *a3, int a4)
{
  uint64_t result;
  unint64_t v7;
  int v8;
  int v9;
  AG::LayoutDescriptor *v10;
  unsigned int v11;
  int v12;
  int v13;
  unint64_t v14;

  if (this == (AG::LayoutDescriptor *)a2)
    return 1;
  result = 0;
  if ((uint64_t)this >= 1 && (uint64_t)a2 >= 1)
  {
    v7 = *(_QWORD *)this;
    if (*(_QWORD *)this != *(_QWORD *)a2)
      return 0;
    v8 = (int)a3;
    v9 = a4 ? 2 : 1;
    LODWORD(a3) = a3;
    {
      v14 = *(_QWORD *)this;
      v12 = v9;
      v13 = a3;
      v9 = v12;
      LODWORD(a3) = v13;
      v7 = v14;
    }
    if ((unint64_t)v10 >= 2)
      return AG::LayoutDescriptor::compare(v10, this, a2, (const unsigned __int8 *)0xFFFFFFFFFFFFFFFFLL, v8 & 0xFFFFFEFF, v11);
    else
      return 0;
  }
  return result;
}

uint64_t AG::Subgraph::cache_collect(uint64_t this)
{
  uint64_t v1;
  _QWORD v2[2];

  *(_BYTE *)(this + 105) &= ~1u;
  v1 = *(unsigned int *)(this + 92);
  if ((_DWORD)v1)
  {
    if (!*(_BYTE *)(this + 104))
    {
      v2[0] = this;
      v2[1] = AG::data::_shared_table_bytes + v1;
      return util::UntypedTable::for_each(AG::data::_shared_table_bytes + v1 + 40, (void (*)(const void *, const void *, const void *))util::Table<AG::swift::metadata const*,AG::data::ptr<AG::Subgraph::NodeCache::Type>>::for_each<AG::Subgraph::cache_collect(void)::$_0>(AG::Subgraph::cache_collect(void)::$_0 const&)const::{lambda(void const*,void const*,void const*)#1}::__invoke, v2);
    }
  }
  return this;
}

uint64_t util::UntypedTable::for_each(uint64_t this, void (*a2)(const void *, const void *, const void *), const void *a3)
{
  uint64_t v5;
  unint64_t v6;
  int v7;
  _QWORD *i;

  if (*(_QWORD *)(this + 56))
  {
    v5 = this;
    v6 = 0;
    v7 = *(_DWORD *)(this + 72);
    do
    {
      for (i = *(_QWORD **)(*(_QWORD *)(v5 + 48) + 8 * v6); i; i = (_QWORD *)*i)
        this = ((uint64_t (*)(_QWORD, _QWORD, const void *))a2)(i[1], i[2], a3);
      ++v6;
    }
    while (!(v6 >> v7));
  }
  return this;
}

void AG::Graph::mark_changed(uint64_t a1)
{
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int *v14;
  unsigned int *v15;
  char *v16;
  char *v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  uint64_t v21;
  _DWORD *v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  _BYTE *v29;
  int v30;
  uint64_t v31;
  uint64_t i;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  _BYTE v40[32];
  char v41[8192];
  uint64_t v42;

  v1 = MEMORY[0x1E0C80A78](a1);
  v3 = v2;
  v5 = v4;
  v7 = v6;
  v9 = v8;
  v11 = v10;
  v38 = v1;
  v42 = *MEMORY[0x1E0C80C00];
  util::Heap::Heap((util::Heap *)v40, v41, 0x2000, 0);
  if ((v11 & 3) == 1)
  {
    v35 = v9;
    v36 = v7;
    v37 = v5;
    v12 = AG::data::_shared_table_bytes;
    v13 = AG::data::_shared_table_bytes + (v11 & 0xFFFFFFFC);
    goto LABEL_5;
  }
  if ((v11 & 3) == 0)
  {
    v35 = v9;
    v36 = v7;
    v37 = v5;
    v12 = AG::data::_shared_table_bytes;
    v13 = AG::data::_shared_table_bytes + v11;
LABEL_5:
    v14 = (unsigned int *)(v13 + 20);
    v15 = (unsigned int *)(v13 + 24);
    v16 = 0;
    v17 = 0;
    v18 = v12 + *v15;
    v19 = (unint64_t)*v14 >> 5;
    while (1)
    {
      while (v3 >= v19)
      {
        v20 = v16;
LABEL_34:
        if (!v20)
        {
          ++*(_QWORD *)(v38 + 464);
          goto LABEL_38;
        }
        v3 = 0;
        v16 = *(char **)v20;
        v18 = *((_QWORD *)v20 + 1);
        v19 = *((_QWORD *)v20 + 2);
        *(_QWORD *)v20 = v17;
        v17 = v20;
        v11 = *((_DWORD *)v20 + 6);
      }
      v20 = v16;
      while (1)
      {
        v21 = *(unsigned int *)(v18 + 4 * v3);
        if ((v21 & 3) == 0)
        {
          v26 = *(unsigned int *)(AG::data::_shared_table_bytes + v21 + 12);
          if (v26 >= 0x20)
          {
            v27 = 0;
            v28 = v26 >> 5;
            v29 = (_BYTE *)(AG::data::_shared_table_bytes
                          + *(unsigned int *)(AG::data::_shared_table_bytes + v21 + 16)
                          + 4);
            while (1)
            {
              v30 = *((_DWORD *)v29 - 1);
              v39 = v30;
              if ((v30 & 3) != 0)
                v30 = AG::AttributeID::resolve_slow((AG::AttributeID *)&v39, 4u);
              if (v30 == v11 && (*v29 & 8) == 0)
              {
                if ((*(v29 - 4) & 3) == 0)
                  break;
                v34 = v34 & 0xFFFFFF0000000000 | *((unsigned int *)v29 - 1) | ((unint64_t)*v29 << 32);
                if ((AG::Graph::compare_edge_values(v38, *((_DWORD *)v29 - 1), v35, v36, v37) & 1) == 0)
                  break;
              }
              ++v27;
              v29 += 5;
              if (v28 == v27)
                goto LABEL_28;
            }
            v31 = *(unsigned int *)(v38 + 232);
            if ((_DWORD)v31)
            {
              for (i = 8 * v31 - 8; i != -8; i -= 8)
              {
                v33 = *(_QWORD *)(*(_QWORD *)(v38 + 224) + i);
                (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v33 + 248))(v33, v21, v27, 1);
              }
            }
            *v29 |= 8u;
          }
          goto LABEL_28;
        }
        if ((*(_DWORD *)(v18 + 4 * v3) & 3) == 1)
        {
          v22 = (_DWORD *)(AG::data::_shared_table_bytes + (v21 & 0xFFFFFFFC));
          if (v22[4] != v11)
            break;
        }
LABEL_28:
        if (++v3 >= v19)
          goto LABEL_34;
      }
      v23 = AG::data::_shared_table_bytes + v22[6];
      v24 = (unint64_t)v22[5] >> 5;
      if (v3 != v19 - 1)
        break;
      v3 = 0;
      v19 = (unint64_t)v22[5] >> 5;
      v18 = AG::data::_shared_table_bytes + v22[6];
      v16 = v20;
      v11 = v21;
    }
    if (v17)
    {
      v25 = *(char **)v17;
    }
    else
    {
      v17 = util::Heap::alloc_((util::Heap *)v40, 0x20uLL);
      v25 = 0;
    }
    *(_QWORD *)v17 = v20;
    *((_QWORD *)v17 + 1) = v23;
    *((_QWORD *)v17 + 2) = v24;
    *((_DWORD *)v17 + 6) = v21;
    v20 = v17;
    v17 = v25;
    goto LABEL_28;
  }
LABEL_38:
  util::Heap::reset((util::Heap *)v40, 0, 0);
}

void sub_1AB93709C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  util::InlineHeap<8192ul>::~InlineHeap((util::Heap *)va);
  _Unwind_Resume(a1);
}

BOOL sub_1AB9370D4(_DWORD *a1, _DWORD *a2)
{
  return *a1 == *a2 && a1[1] == a2[1];
}

void *AG::vector<std::pair<unsigned int,BOOL>,0ul,unsigned int>::reserve_slow(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  void *result;

  if (*(_DWORD *)(a1 + 12) + (*(_DWORD *)(a1 + 12) >> 1) <= a2)
    v3 = a2;
  else
    v3 = *(_DWORD *)(a1 + 12) + (*(_DWORD *)(a1 + 12) >> 1);
  result = AG::details::realloc_vector<unsigned int,8ul>(*(void **)a1, (_DWORD *)(a1 + 12), v3);
  *(_QWORD *)a1 = result;
  return result;
}

unsigned int *AG::Node::destroy_value(unsigned int *result, uint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v2 = *result;
  if ((v2 & 0x10) != 0)
  {
    *result = v2 & 0xFFFFFFEF;
    v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 128) + ((v2 >> 5) & 0x7FFFFF8)) + 8);
    v4 = (_QWORD *)(AG::data::_shared_table_bytes + result[2]);
    if ((*((_BYTE *)result + 7) & 2) != 0)
      v4 = (_QWORD *)*v4;
    return (unsigned int *)(*(uint64_t (**)(_QWORD *))(*(_QWORD *)(v3 - 8) + 8))(v4);
  }
  return result;
}

unsigned int *AG::Node::destroy_self(unsigned int *result, uint64_t a2)
{
  unint64_t v2;
  unsigned int *v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;

  v2 = *result;
  if ((v2 & 0x20) != 0)
  {
    v3 = result;
    *result = v2 & 0xFFFFFFDF;
    v4 = *(_QWORD *)(*(_QWORD *)(a2 + 128) + ((v2 >> 5) & 0x7FFFFF8));
    if ((*(_BYTE *)(v4 + 40) & 4) != 0)
    {
      v5 = (_QWORD *)((char *)result + *(unsigned int *)(v4 + 44));
      if ((*((_BYTE *)result + 7) & 1) != 0)
        v5 = (_QWORD *)*v5;
      (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)(v4 + 32) + 16))(v4, v5);
    }
    v6 = (_QWORD *)((char *)v3 + *(unsigned int *)(v4 + 44));
    if ((*((_BYTE *)v3 + 7) & 1) != 0)
      v6 = (_QWORD *)*v6;
    return (unsigned int *)(*(uint64_t (**)(_QWORD *))(*(_QWORD *)(*(_QWORD *)v4 - 8) + 8))(v6);
  }
  return result;
}

uint64_t AG::Graph::output_value_ref(uint64_t a1, const char *a2, AG::swift::metadata *a3)
{
  unsigned int *v4;
  unint64_t v5;
  uint64_t result;
  AG::swift::metadata *v8;
  uint64_t v9;
  uint64_t v10;
  const char *v11;

  v4 = (unsigned int *)(AG::data::_shared_table_bytes + a2);
  v5 = *v4;
  if ((v5 & 0xC0) == 0)
    AG::precondition_failure((AG *)"attribute is not evaluating: %u", a2, a2);
  if ((v5 & 0x10) == 0)
    return 0;
  v8 = *(AG::swift::metadata **)(*(_QWORD *)(*(_QWORD *)(a1 + 128) + ((v5 >> 5) & 0x7FFFFF8)) + 8);
  if (v8 != a3)
  {
    v9 = AG::swift::metadata::name(v8, 0);
    v10 = AG::swift::metadata::name(a3, 0);
    AG::precondition_failure((AG *)"invalid value type for attribute: %u (saw %s, expected %s)", v11, a2, v9, v10);
  }
  result = AG::data::_shared_table_bytes + v4[2];
  if ((*((_BYTE *)v4 + 7) & 2) != 0)
    return *(_QWORD *)result;
  return result;
}

AG::Subgraph *AGSubgraphAddChild(uint64_t a1, uint64_t a2)
{
  return AGSubgraphAddChild2(a1, a2, 0);
}

uint64_t AGTypeGetEnumTag(AG::swift::metadata *this, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  const char *v5;

  v2 = *((_QWORD *)this - 1);
  if ((*(_BYTE *)(v2 + 82) & 0x20) == 0)
  {
    v4 = AG::swift::metadata::name(this, 0);
    AG::precondition_failure((AG *)"not an enum type: %s", v5, v4);
  }
  return (*(unsigned int (**)(uint64_t, AG::swift::metadata *))(v2 + 88))(a2, this);
}

BOOL AGSubgraphIsDirty(uint64_t a1, char a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 16);
  return v2 && ((BYTE2(*(_DWORD *)(v2 + 100)) | HIBYTE(*(_DWORD *)(v2 + 100))) & a2) != 0;
}

_QWORD *__swift_memcpy8_4(_QWORD *result, _QWORD *a2)
{
  *result = *a2;
  return result;
}

void *AG::vector<AG::LayoutDescriptor::Builder::EnumItem::Case,0ul,unsigned long>::reserve_slow(uint64_t a1, unint64_t a2)
{
  uint64_t v3;
  void *result;

  if (*(_QWORD *)(a1 + 16) + (*(_QWORD *)(a1 + 16) >> 1) <= a2)
    v3 = a2;
  else
    v3 = *(_QWORD *)(a1 + 16) + (*(_QWORD *)(a1 + 16) >> 1);
  result = AG::details::realloc_vector<unsigned long,40ul>(*(void **)a1, (unint64_t *)(a1 + 16), v3);
  *(_QWORD *)a1 = result;
  return result;
}

void *AG::details::realloc_vector<unsigned long,40ul>(void *a1, unint64_t *a2, uint64_t a3)
{
  void *v4;
  size_t v5;
  unint64_t v6;
  void *v7;
  const char *v8;

  v4 = a1;
  if (a3)
  {
    v5 = malloc_good_size(40 * a3);
    v6 = v5 / 0x28;
    if (v5 / 0x28 != *a2)
    {
      v7 = malloc_type_realloc(v4, v5, 0xF3138078uLL);
      if (!v7)
        AG::precondition_failure((AG *)"allocation failure", v8);
      v4 = v7;
      *a2 = v6;
    }
  }
  else
  {
    *a2 = 0;
    free(a1);
    return 0;
  }
  return v4;
}

uint64_t type metadata accessor for OptionalAttribute(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for OptionalAttribute);
}

uint64_t AGTypeProjectEnumData(AG::swift::metadata *this, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  const char *v5;

  v2 = *((_QWORD *)this - 1);
  if ((*(_BYTE *)(v2 + 82) & 0x20) == 0)
  {
    v4 = AG::swift::metadata::name(this, 0);
    AG::precondition_failure((AG *)"not an enum type: %s", v5, v4);
  }
  return (*(uint64_t (**)(uint64_t, AG::swift::metadata *))(v2 + 96))(a2, this);
}

uint64_t AGTypeInjectEnumTag(AG::swift::metadata *this, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  const char *v6;

  v3 = *((_QWORD *)this - 1);
  if ((*(_BYTE *)(v3 + 82) & 0x20) == 0)
  {
    v5 = AG::swift::metadata::name(this, 0);
    AG::precondition_failure((AG *)"not an enum type: %s", v6, v5);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, AG::swift::metadata *))(v3 + 104))(a3, a2, this);
}

void AG::Graph::mark_pending(uint64_t a1, unsigned int a2, int *a3)
{
  int v6;
  int v7;
  int v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  AG::Subgraph *v15;

  v6 = *a3;
  if ((*a3 & 2) == 0)
  {
    v7 = *(_DWORD *)(a1 + 232);
    if (v7)
    {
      v9 = v7 - 1;
      do
      {
        v10 = v9;
        v11 = *(_QWORD *)(*(_QWORD *)(a1 + 224) + 8 * v9);
        (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v11 + 264))(v11, a2, 1);
        --v9;
      }
      while (v10);
      v6 = *a3;
    }
    v6 |= 2u;
    *a3 = v6;
  }
  if ((v6 & 1) == 0)
  {
    v8 = *(_DWORD *)(a1 + 232);
    if (v8)
    {
      v12 = v8 - 1;
      do
      {
        v13 = v12;
        v14 = *(_QWORD *)(*(_QWORD *)(a1 + 224) + 8 * v12);
        (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v14 + 256))(v14, a2, 1);
        --v12;
      }
      while (v13);
      v6 = *a3;
    }
    *a3 = v6 | 1;
    if (*((_BYTE *)a3 + 6))
    {
      v15 = *(AG::Subgraph **)(AG::data::_shared_table_bytes + (a2 & 0xFFFFFE00));
      if (v15)
        AG::Subgraph::add_dirty_flags(v15, *((_BYTE *)a3 + 6));
    }
    AG::Graph::propagate_dirty(a1);
  }
}

AG::Subgraph *AG::Subgraph::add_dirty_flags(AG::Subgraph *this, unsigned __int8 a2)
{
  unsigned int v2;

  v2 = *((_DWORD *)this + 25);
  if ((a2 & ~HIWORD(v2)) != 0)
  {
    *((_DWORD *)this + 25) = v2 & 0xFF00FFFF | ((BYTE2(v2) | a2) << 16);
    return (AG::Subgraph *)AG::Subgraph::propagate_dirty_flags(this);
  }
  return this;
}

AG::swift::metadata *AGTypeApplyMutableEnumData(AG::swift::metadata *this, void **a2, void (*a3)(_QWORD, AG::swift::metadata *, uint64_t))
{
  uint64_t v4;
  uint64_t v7;
  AG::swift::metadata *result;
  int *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  AG::swift::metadata *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  const char *v20;

  v4 = *((_QWORD *)this - 1);
  if ((*(_BYTE *)(v4 + 82) & 0x20) == 0)
  {
    v19 = AG::swift::metadata::name(this, 0);
    AG::precondition_failure((AG *)"not an enum type: %s", v20, v19);
  }
  v7 = (*(uint64_t (**)(void **, AG::swift::metadata *))(v4 + 88))(a2, this);
  result = (AG::swift::metadata *)AG::swift::metadata::nominal_descriptor(this);
  if (result)
  {
    v9 = (int *)((char *)result + 16);
    v10 = *((int *)result + 4);
    if ((_DWORD)v10
      && ((v10 & 3) != 1 ? (v11 = (uint64_t)v9 + v10) : (v11 = *(_QWORD *)((char *)v9 + (v10 & 0xFFFFFFFFFFFFFFFCLL))),
          v7 < (*((_DWORD *)result + 5) & 0xFFFFFFu)
       && (v12 = v11 + 12 * v7, v15 = *(int *)(v12 + 20), v14 = v12 + 20, v13 = v15, (_DWORD)v15)))
    {
      result = (AG::swift::metadata *)AG::swift::metadata::mangled_type_name_ref_cached(this, (_BYTE *)(v13 + v14), 0);
      if (result)
      {
        v16 = result;
        (*(void (**)(void **, AG::swift::metadata *))(*((_QWORD *)this - 1) + 96))(a2, this);
        v17 = (uint64_t)a2;
        if ((*(_BYTE *)(v14 - 4) & 1) != 0)
        {
          AG::swift::metadata::copy_on_write_heap_object(v16, a2);
          v18 = *(unsigned __int8 *)(*((_QWORD *)v16 - 1) + 80);
          v17 = (uint64_t)*a2 + ((v18 + 16) & ~v18);
        }
        a3(v7, v16, v17);
        (*(void (**)(void **, uint64_t, AG::swift::metadata *))(*((_QWORD *)this - 1) + 104))(a2, v7, this);
        return (AG::swift::metadata *)1;
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

_DWORD *AG::swift::metadata::nominal_descriptor(AG::swift::metadata *this)
{
  _DWORD *result;

  result = (_DWORD *)AG::swift::metadata::descriptor(this);
  if (result)
  {
    if ((*result & 0x1Fu) - 17 >= 2)
      return 0;
  }
  return result;
}

_BYTE *AG::swift::metadata::mangled_type_name_ref_cached(AG::swift::metadata *a1, _BYTE *a2, _DWORD *a3)
{
  _BYTE *v3;
  unsigned __int8 v6;
  os_unfair_lock_s *v7;
  uint64_t *v8;
  os_unfair_lock_s *v9;
  char *v10;
  char *v11;
  AG::swift::_anonymous_namespace_::TypeCache *v13;
  int v14;
  __int128 v15;

  v3 = a2;
  if (a2)
  {
    if ((v6 & 1) == 0
    {
      v13 = (AG::swift::_anonymous_namespace_::TypeCache *)operator new();
      AG::swift::metadata::mangled_type_name_ref_cached(char const*,AG::swift::metadata::ref_kind *)const::cache = (uint64_t)v13;
    }
    *(_QWORD *)&v15 = a1;
    *((_QWORD *)&v15 + 1) = v3;
    v7 = (os_unfair_lock_s *)AG::swift::metadata::mangled_type_name_ref_cached(char const*,AG::swift::metadata::ref_kind *)const::cache;
    os_unfair_lock_lock((os_unfair_lock_t)AG::swift::metadata::mangled_type_name_ref_cached(char const*,AG::swift::metadata::ref_kind *)const::cache);
    v8 = util::UntypedTable::lookup((util::UntypedTable *)(AG::swift::metadata::mangled_type_name_ref_cached(char const*,AG::swift::metadata::ref_kind *)const::cache+ 4136), (uint64_t *)&v15, 0);
    if (v8)
    {
      if (a3)
        *a3 = *((_DWORD *)v8 + 2);
      v3 = (_BYTE *)*v8;
      os_unfair_lock_unlock(v7);
    }
    else
    {
      os_unfair_lock_unlock(v7);
      v14 = 0;
      v3 = (_BYTE *)AG::swift::metadata::mangled_type_name_ref(a1, v3, 1, &v14);
      v9 = (os_unfair_lock_s *)AG::swift::metadata::mangled_type_name_ref_cached(char const*,AG::swift::metadata::ref_kind *)const::cache;
      os_unfair_lock_lock((os_unfair_lock_t)AG::swift::metadata::mangled_type_name_ref_cached(char const*,AG::swift::metadata::ref_kind *)const::cache);
      v10 = util::Heap::alloc_((util::Heap *)(AG::swift::metadata::mangled_type_name_ref_cached(char const*,AG::swift::metadata::ref_kind *)const::cache+ 8), 0x10uLL);
      *(_OWORD *)v10 = v15;
      v11 = util::Heap::alloc_((util::Heap *)(AG::swift::metadata::mangled_type_name_ref_cached(char const*,AG::swift::metadata::ref_kind *)const::cache+ 8), 0x10uLL);
      *(_QWORD *)v11 = v3;
      *((_DWORD *)v11 + 2) = v14;
      util::UntypedTable::insert((util::UntypedTable *)(AG::swift::metadata::mangled_type_name_ref_cached(char const*,AG::swift::metadata::ref_kind *)const::cache+ 4136), v10, v11);
      os_unfair_lock_unlock(v9);
      if (a3)
        *a3 = v14;
    }
  }
  return v3;
}

void sub_1AB937950(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF431538](v1, 0x10B0C40925F0199);
  _Unwind_Resume(a1);
}

AG::swift::_anonymous_namespace_::TypeCache *AG::swift::`anonymous namespace'::TypeCache::TypeCache(AG::swift::_anonymous_namespace_::TypeCache *this)
{
  util::Heap *v2;

  *(_DWORD *)this = 0;
  v2 = (AG::swift::_anonymous_namespace_::TypeCache *)((char *)this + 8);
  util::Heap::Heap((AG::swift::_anonymous_namespace_::TypeCache *)((char *)this + 8), (char *)this + 40, 4096, 0);
  return this;
}

void sub_1AB937A0C(_Unwind_Exception *a1)
{
  util::Heap *v1;

  util::Heap::reset(v1, 0, 0);
  _Unwind_Resume(a1);
}

uint64_t AGGraphTraceEventEnabled(uint64_t a1, const char *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;

  v3 = AG::Graph::Context::from_cf(a1, a2);
  v4 = *(unsigned int *)(*(_QWORD *)v3 + 232);
  if (!(_DWORD)v4)
    return 0;
  v5 = *(uint64_t **)(*(_QWORD *)v3 + 224);
  v6 = 8 * v4 - 8;
  do
  {
    v7 = *v5++;
    result = (*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)v7 + 352))(v7, a2);
    if ((result & 1) != 0)
      break;
    v9 = v6;
    v6 -= 8;
  }
  while (v9);
  return result;
}

uint64_t AGSubgraphCreate2(uint64_t a1, const char *a2)
{
  unsigned int v2;
  int64x2_t **v3;
  uint64_t Instance;
  const char *v5;
  uint64_t v6;
  unint64_t v7;

  v2 = a2;
  v3 = (int64x2_t **)AG::Graph::Context::from_cf(a1, a2);
  AGSubgraphGetTypeID();
  Instance = _CFRuntimeCreateInstance();
  if (!Instance)
    AG::precondition_failure((AG *)"Memory allocation failure.", v5);
  v6 = Instance;
  v7 = operator new();
  AG::Subgraph::Subgraph(v7, v6, v3, v2);
  *(_QWORD *)(v6 + 16) = v7;
  return v6;
}

void sub_1AB937B24(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF431538](v1, 0x1022C407ABFD236);
  _Unwind_Resume(a1);
}

uint64_t AG::Graph::Context::from_cf(uint64_t a1, const char *a2)
{
  if (*(_BYTE *)(a1 + 88))
    AG::precondition_failure((AG *)"invalidated graph", a2);
  return a1 + 16;
}

unint64_t AG::Subgraph::Subgraph(unint64_t a1, uint64_t a2, int64x2_t **a3, unsigned int a4)
{
  unsigned int v7;
  unsigned int v8;
  int64x2_t *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t *v15;
  _QWORD *v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  unsigned int *v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  unsigned int v27;
  uint64_t v28;
  int64x2_t *v29;
  uint64_t v30;
  uint64_t i;
  uint64_t v33;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  do
  {
    v7 = __ldxr(dword_1ECEF30E0);
    v8 = v7 + 1;
  }
  while (__stxr(v8, dword_1ECEF30E0));
  *(_DWORD *)(a1 + 24) = v8 & 0x7FFFFFFF;
  v9 = *a3;
  *(_QWORD *)(a1 + 32) = a2;
  *(_QWORD *)(a1 + 40) = v9;
  *(_QWORD *)(a1 + 48) = a3[2];
  *(_OWORD *)(a1 + 56) = 0u;
  *(_BYTE *)(a1 + 104) = 0;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_BYTE *)(a1 + 105) &= 0xFCu;
  if (a1 == 1)
  {
    AG::Subgraph::print((AG::Subgraph *)1, 0);
    v9 = (int64x2_t *)MEMORY[0x29];
  }
  v10 = v9[21].i64[1];
  v11 = v9[22].u32[0];
  if ((_DWORD)v11)
  {
    v12 = v9[21].i64[1];
    v13 = v9[22].u32[0];
    do
    {
      v14 = v13 >> 1;
      v15 = (unint64_t *)(v12 + 8 * (v13 >> 1));
      v17 = *v15;
      v16 = v15 + 1;
      v13 += ~(v13 >> 1);
      if (v17 < a1)
        v12 = (uint64_t)v16;
      else
        v13 = v14;
    }
    while (v13);
  }
  else
  {
    v12 = v9[21].i64[1];
  }
  v18 = v9[21].i64[1];
  if (v9[22].i32[1] < (v11 + 1))
  {
    AG::vector<std::pair<unsigned int,BOOL>,0ul,unsigned int>::reserve_slow((uint64_t)&v9[21].i64[1], v11 + 1);
    v18 = v9[21].i64[1];
    v11 = v9[22].u32[0];
  }
  v19 = (v12 - v10) >> 3;
  if (v11 > v19)
  {
    memmove((void *)(v18 + 8 * v19 + 8), (const void *)(v18 + 8 * v19), 8 * (v11 - v19));
    LODWORD(v11) = v9[22].i32[0];
  }
  *(_QWORD *)(v18 + 8 * v19) = a1;
  v9[22].i32[0] = v11 + 1;
  v9[17] = vaddq_s64(v9[17], vdupq_n_s64(1uLL));
  if (AGSubgraphShouldRecordTree())
  {
    if (a4 <= 3)
    {
      v20 = AG::Graph::_current_update_key;
      v21 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v20);
      if ((v21 & 1) == 0)
      {
        v22 = (_QWORD *)(v21 & 0xFFFFFFFFFFFFFFFELL);
        if ((v21 & 0xFFFFFFFFFFFFFFFELL) != 0 && *v22 == *(_QWORD *)(a1 + 40))
        {
          v23 = (unsigned int *)AG::Graph::UpdateStack::global_top((unint64_t)v22);
          if (v23)
            a4 = *v23;
        }
      }
    }
    v24 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v24
      && (v25 = AG::data::_shared_table_bytes,
          v26 = (*(_DWORD *)(AG::data::_shared_table_bytes + v24 + 16) + 7) & 0xFFFFFFF8,
          v26 + 32 <= *(_DWORD *)(AG::data::_shared_table_bytes + v24 + 12)))
    {
      *(_DWORD *)(AG::data::_shared_table_bytes + v24 + 16) = v26 + 32;
      v27 = v26 + v24;
    }
    else
    {
      v27 = AG::data::zone::alloc_slow((AG::data::zone *)a1, 0x20u, 7);
      v25 = AG::data::_shared_table_bytes;
    }
    v28 = v25 + v27;
    *(_QWORD *)v28 = 0;
    *(_DWORD *)(v28 + 8) = a4;
    *(_QWORD *)(v28 + 20) = 0;
    *(_QWORD *)(v28 + 12) = 0;
    *(_DWORD *)(v28 + 28) = 0;
    *(_DWORD *)(a1 + 96) = v27;
  }
  v29 = *a3;
  v30 = v29[14].u32[2];
  if ((_DWORD)v30)
  {
    for (i = 8 * v30 - 8; i != -8; i -= 8)
    {
      v33 = *(_QWORD *)(v29[14].i64[0] + i);
      (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v33 + 184))(v33, a1);
    }
  }
  return a1;
}

{
  return AG::Subgraph::Subgraph(a1, a2, a3, a4);
}

void sub_1AB937DD0(_Unwind_Exception *a1)
{
  AG::data::zone *v1;
  uint64_t *v2;
  void *v4;

  v4 = (void *)*((_QWORD *)v1 + 8);
  if (v4)
    free(v4);
  AG::indirect_pointer_vector<AG::Subgraph,unsigned long>::~indirect_pointer_vector(v2);
  AG::data::zone::~zone(v1);
  _Unwind_Resume(a1);
}

uint64_t AGSubgraphShouldRecordTree()
{
  if (should_record_tree_once != -1)
    dispatch_once_f(&should_record_tree_once, 0, (dispatch_function_t)init_should_record_tree);
  return should_record_tree;
}

uint64_t AGSubgraphGetTypeID()
{
  unsigned __int8 v0;

  {
    AGSubgraphGetTypeID::type = _CFRuntimeRegisterClass();
  }
  return AGSubgraphGetTypeID::type;
}

void sub_1AB937EB0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *AG::details::realloc_vector<unsigned int,8ul>(void *a1, _DWORD *a2, unsigned int a3)
{
  void *v4;
  size_t v5;
  size_t v6;
  void *v7;
  const char *v8;

  v4 = a1;
  if (a3)
  {
    v5 = malloc_good_size(8 * a3);
    v6 = v5 >> 3;
    if (*a2 != (v5 >> 3))
    {
      v7 = malloc_type_realloc(v4, v5, 0xF3138078uLL);
      if (!v7)
        AG::precondition_failure((AG *)"allocation failure", v8);
      v4 = v7;
      *a2 = v6;
    }
  }
  else
  {
    *a2 = 0;
    free(a1);
    return 0;
  }
  return v4;
}

double AG::`anonymous namespace'::TypeDescriptorCache::init_shared_cache(AG::_anonymous_namespace_::TypeDescriptorCache *this, void *a2)
{
  uint64_t v2;
  double result;

  v2 = operator new();
  *(_DWORD *)v2 = 0;
  util::UntypedTable::UntypedTable(v2 + 8, 0, 0, 0, 0, 0);
  *(_QWORD *)(v2 + 216) = 0;
  *(_QWORD *)(v2 + 224) = 0;
  *(_QWORD *)(v2 + 232) = 8;
  *(_BYTE *)(v2 + 248) = 0;
  *(_QWORD *)(v2 + 264) = 0;
  *(_QWORD *)(v2 + 272) = 0;
  *(_QWORD *)(v2 + 256) = 0;
  *(_DWORD *)(v2 + 280) = 0;
  result = 0.0;
  *(_OWORD *)(v2 + 288) = 0u;
  *(_OWORD *)(v2 + 304) = 0u;
  ++AG::LayoutDescriptor::base_address[0];
  return result;
}

void sub_1AB937FDC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF431538](v1, 0x10A0C406AC5BF46);
  _Unwind_Resume(a1);
}

AG::Graph *AG::Graph::Graph(AG::Graph *this)
{
  util::Heap *v2;
  AG::data::table *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned __int8 v6;

  v2 = (AG::Graph *)((char *)this + 16);
  util::Heap::Heap((AG::Graph *)((char *)this + 16), 0, 0, 0);
  util::UntypedTable::UntypedTable((uint64_t)this + 48, 0, 0, 0, 0, v2);
  *((_QWORD *)this + 16) = 0;
  *((_QWORD *)this + 17) = 0;
  util::UntypedTable::UntypedTable((uint64_t)this + 144, 0, 0, 0, 0, v2);
  *((_OWORD *)this + 14) = 0u;
  *((_QWORD *)this + 34) = 0;
  *((_QWORD *)this + 36) = 0;
  *((_BYTE *)this + 296) = 0;
  *((_OWORD *)this + 19) = 0u;
  *((_OWORD *)this + 21) = 0u;
  *((_QWORD *)this + 49) = 0;
  *((_OWORD *)this + 15) = 0u;
  *((_QWORD *)this + 32) = 0;
  *((_OWORD *)this + 20) = 0u;
  *((_OWORD *)this + 22) = 0u;
  *((_QWORD *)this + 46) = 0;
  *((_QWORD *)this + 50) = 0x200000000;
  *((_WORD *)this + 204) = 0;
  *((_DWORD *)this + 103) = 1;
  *((_QWORD *)this + 52) = 0;
  v3 = (AG::data::table *)AGMakeUniqueID();
  *((_QWORD *)this + 53) = v3;
  *((_QWORD *)this + 54) = -1;
  *((_DWORD *)this + 118) = 0;
  *(_OWORD *)((char *)this + 440) = 0u;
  *(_OWORD *)((char *)this + 456) = 0u;
  AG::data::table::ensure_shared(v3);
  if (this == (AG::Graph *)1)
  {
    AG::Graph::print((AG::Graph *)1);
    AG::Graph::print_attribute(1, 0);
    AG::Graph::print_stack((AG::Graph *)1);
    AG::Graph::print_data((AG::Graph *)1);
    AG::Graph::write_to_file(0, 0, 0);
  }
  if (AG::Graph::Graph(void)::make_keys != -1)
    dispatch_once_f(&AG::Graph::Graph(void)::make_keys, 0, (dispatch_function_t)AG::Graph::Graph(void)::$_0::__invoke);
  v4 = *((_DWORD *)this + 34);
  v5 = v4 + 1;
  if (*((_DWORD *)this + 35) < v4 + 1)
  {
    AG::vector<std::pair<unsigned int,BOOL>,0ul,unsigned int>::reserve_slow((uint64_t)this + 128, v5);
    v4 = *((_DWORD *)this + 34);
    v5 = v4 + 1;
  }
  *(_QWORD *)(*((_QWORD *)this + 16) + 8 * v4) = 0;
  *((_DWORD *)this + 34) = v5;
  v6 = atomic_load((unsigned __int8 *)_ZGVZN2AG5GraphC1EvEDC14profiler_flags11trace_flags16trace_subsystemsE);
  if ((v6 & 1) == 0 && __cxa_guard_acquire(_ZGVZN2AG5GraphC1EvEDC14profiler_flags11trace_flags16trace_subsystemsE))
  {
    AG::Graph::Graph(void)::$_1::operator()();
    __cxa_atexit((void (*)(void *))std::tuple<unsigned int,unsigned int,AG::vector<char const*,0ul,unsigned long>>::~tuple, &_ZZN2AG5GraphC1EvEDC14profiler_flags11trace_flags16trace_subsystemsE, &dword_1AB92D000);
    __cxa_guard_release(_ZGVZN2AG5GraphC1EvEDC14profiler_flags11trace_flags16trace_subsystemsE);
  }
  if (dword_1ECEF3364 || (_QWORD)xmmword_1ECEF3370)
    AG::Graph::start_tracing(this, dword_1ECEF3364, (const char **)qword_1ECEF3368, xmmword_1ECEF3370);
  if (_ZZN2AG5GraphC1EvEDC14profiler_flags11trace_flags16trace_subsystemsE)
    AG::Graph::start_profiling(this, _ZZN2AG5GraphC1EvEDC14profiler_flags11trace_flags16trace_subsystemsE);
  os_unfair_lock_lock((os_unfair_lock_t)&AG::Graph::_all_graphs_lock);
  *(_QWORD *)this = AG::Graph::_all_graphs;
  *((_QWORD *)this + 1) = 0;
  AG::Graph::_all_graphs = (uint64_t)this;
  if (*(_QWORD *)this)
    *(_QWORD *)(*(_QWORD *)this + 8) = this;
  os_unfair_lock_unlock((os_unfair_lock_t)&AG::Graph::_all_graphs_lock);
  return this;
}

void sub_1AB938278(_Unwind_Exception *a1)
{
  util::Heap *v1;
  util::UntypedTable *v2;
  uint64_t v3;
  util::UntypedTable *v4;
  _QWORD *v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  void *v10;
  void *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;

  __cxa_guard_abort(_ZGVZN2AG5GraphC1EvEDC14profiler_flags11trace_flags16trace_subsystemsE);
  v10 = (void *)v5[49];
  if (v10)
    free(v10);
  v11 = (void *)v5[45];
  if (v11)
    free(v11);
  v12 = (void *)v5[43];
  if (v12)
    free(v12);
  v13 = *v7;
  *v7 = 0;
  if (v13)
    std::default_delete<AG::Graph::KeyTable>::operator()[abi:ne180100]((uint64_t)v7, v13);
  std::unique_ptr<std::unordered_map<AG::Subgraph *,AG::Graph::TreeDataElement>>::reset[abi:ne180100]((uint64_t *)(v8 + 104), 0);
  v14 = *v6;
  *v6 = 0;
  if (v14)
    std::default_delete<AG::Graph::ProfileData>::operator()[abi:ne180100]((uint64_t)v6, v14);
  if (*(_QWORD *)v8)
    free(*(void **)v8);
  util::UntypedTable::~UntypedTable(v4);
  AG::vector<std::unique_ptr<AG::AttributeType,AG::AttributeType::deleter>,0ul,unsigned int>::~vector(v3);
  util::UntypedTable::~UntypedTable(v2);
  util::Heap::~Heap(v1);
  _Unwind_Resume(a1);
}

char *static Rule<>._cachedValue(options:owner:hashValue:bodyPtr:update:)(char a1, uint64_t a2, const char *a3, const void *a4, uint64_t a5, uint64_t a6, uint64_t *a7, uint64_t a8, uint64_t a9)
{
  unsigned int v16;
  AG::swift::metadata *AssociatedTypeWitness;
  _BYTE v19[16];
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  if ((a2 & 0x100000000) != 0)
    v16 = 2;
  else
    v16 = a2;
  AssociatedTypeWitness = (AG::swift::metadata *)swift_getAssociatedTypeWitness();
  v20 = a7;
  v21 = a8;
  v22 = a9;
  v23 = a5;
  v24 = a6;
  return AGGraphReadCachedAttribute(a3, a7, a4, AssociatedTypeWitness, a1, v16, 0, sub_1AB9385BC, (uint64_t)v19);
}

char *AGGraphReadCachedAttribute(const char *a1, uint64_t *a2, const void *a3, AG::swift::metadata *a4, char a5, unsigned int a6, _BYTE *a7, uint64_t (*a8)(_QWORD), uint64_t a9)
{
  char *result;
  char v11;

  v11 = 0;
  if (a7)
    *a7 = v11 & 1;
  return result;
}

AG::Subgraph::NodeCache *AG::Subgraph::NodeCache::NodeCache(AG::Subgraph::NodeCache *this)
{
  util::Heap *v2;

  v2 = (AG::Subgraph::NodeCache *)((char *)this + 8);
  util::Heap::Heap((AG::Subgraph::NodeCache *)((char *)this + 8), 0, 0, 0);
  util::UntypedTable::UntypedTable((uint64_t)this + 40, 0, 0, 0, 0, v2);
  util::UntypedTable::UntypedTable((uint64_t)this + 120, (unint64_t (*)(util *, const void *))AG::Subgraph::NodeCache::NodeCache(void)::$_0::__invoke, (BOOL (*)(util *, util *, const void *))AG::Subgraph::NodeCache::NodeCache(void)::$_1::__invoke, 0, 0, v2);
  util::UntypedTable::UntypedTable((uint64_t)this + 200, 0, 0, 0, 0, v2);
  return this;
}

void sub_1AB9384EC(_Unwind_Exception *a1)
{
  util::Heap *v1;
  util::UntypedTable *v2;
  util::UntypedTable *v3;

  util::UntypedTable::~UntypedTable(v3);
  util::UntypedTable::~UntypedTable(v2);
  util::Heap::~Heap(v1);
  _Unwind_Resume(a1);
}

uint64_t util::UntypedTable::UntypedTable(uint64_t this, unint64_t (*a2)(util *this, const void *a2), BOOL (*a3)(util *this, util *a2, const void *a3), void (*a4)(void *), void (*a5)(void *), util::Heap *a6)
{
  unint64_t (*v6)(util *, const void *);
  BOOL (*v7)(util *, util *, const void *);
  BOOL v8;

  v6 = util::pointer_hash;
  if (a2)
    v6 = a2;
  if (a3)
    v7 = a3;
  else
    v7 = util::pointer_compare;
  *(_QWORD *)this = v6;
  *(_QWORD *)(this + 8) = v7;
  v8 = a3 == 0;
  *(_QWORD *)(this + 16) = a4;
  *(_QWORD *)(this + 24) = a5;
  *(_QWORD *)(this + 32) = a6;
  *(_OWORD *)(this + 40) = 0u;
  *(_OWORD *)(this + 56) = 0u;
  *(_DWORD *)(this + 72) = 0;
  *(_BYTE *)(this + 76) = a6 == 0;
  if (a3 == util::pointer_compare)
    v8 = 1;
  *(_BYTE *)(this + 77) = v8;
  return this;
}

util::Heap *util::Heap::Heap(util::Heap *this, char *a2, uint64_t a3, unint64_t a4)
{
  uint64_t v5;

  v5 = 1024;
  if (a4 > 0x400)
    v5 = a4;
  if (!a4)
    v5 = 0x2000;
  *(_QWORD *)this = v5;
  *((_QWORD *)this + 1) = 0;
  util::Heap::reset(this, a2, a3);
  return this;
}

uint64_t sub_1AB9385BC(uint64_t a1)
{
  uint64_t v1;

  return sub_1AB9385CC(a1, *(_QWORD *)(v1 + 40), *(_QWORD *)(v1 + 48), *(uint64_t **)(v1 + 16));
}

uint64_t sub_1AB9385CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  swift_getAssociatedTypeWitness();
  return AGGraphInternAttributeType(a1, a4, sub_1AB932CB8);
}

uint64_t AGGraphCreateShared(uint64_t a1)
{
  uint64_t Instance;
  const char *v3;
  uint64_t v4;
  AG::Graph *v5;
  int v6;

  AGGraphGetTypeID();
  Instance = _CFRuntimeCreateInstance();
  if (!Instance)
    AG::precondition_failure((AG *)"memory allocation failure.", v3);
  v4 = Instance;
  if (a1)
  {
    if (*(_BYTE *)(a1 + 88))
      AG::precondition_failure((AG *)"invalidated graph", v3);
    v5 = *(AG::Graph **)(a1 + 16);
    ++*((_DWORD *)v5 + 103);
  }
  else
  {
    v5 = (AG::Graph *)operator new();
    AG::Graph::Graph(v5);
  }
  AG::Graph::Context::Context((AG::Graph::Context *)(v4 + 16), v5);
  v6 = *((_DWORD *)v5 + 103) - 1;
  *((_DWORD *)v5 + 103) = v6;
  if (!v6)
  {
    AG::Graph::~Graph(v5);
    MEMORY[0x1AF431538]();
  }
  *(_BYTE *)(v4 + 88) = 0;
  return v4;
}

void sub_1AB938730(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF431538](v1, 0x10F2C40657E8E6BLL);
  _Unwind_Resume(a1);
}

AG::Graph::Context *AG::Graph::Context::Context(AG::Graph::Context *this, AG::Graph *a2)
{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)this = a2;
  *((_QWORD *)this + 1) = 0;
  v3 = (void *)AGMakeUniqueID();
  *((_QWORD *)this + 2) = v3;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *((_QWORD *)this + 7) = -1;
  *((_DWORD *)this + 16) = 0;
  *((_BYTE *)this + 68) = 0;
  v4 = *(_QWORD *)this;
  *(_DWORD *)(v4 + 412) = *(_DWORD *)(*(_QWORD *)this + 412) + 1;
  util::UntypedTable::insert((util::UntypedTable *)(v4 + 144), v3, this);
  v5 = *(_QWORD *)this;
  v6 = *(_DWORD *)(*(_QWORD *)this + 232);
  if (v6)
  {
    v8 = v6 - 1;
    do
    {
      v9 = v8;
      v10 = *(_QWORD *)(*(_QWORD *)(v5 + 224) + 8 * v8);
      (*(void (**)(uint64_t, AG::Graph::Context *))(*(_QWORD *)v10 + 160))(v10, this);
      --v8;
    }
    while (v9);
  }
  return this;
}

unint64_t AGMakeUniqueID()
{
  unint64_t result;

  do
    result = __ldxr(&AGMakeUniqueID::counter);
  while (__stxr(result + 1, &AGMakeUniqueID::counter));
  return result;
}

uint64_t AGGraphGetTypeID()
{
  unsigned __int8 v0;

  {
    AGGraphGetTypeID::type = _CFRuntimeRegisterClass();
  }
  return AGGraphGetTypeID::type;
}

void sub_1AB93887C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *AG::details::realloc_vector<unsigned long,24ul>(void *a1, unint64_t *a2, uint64_t a3)
{
  void *v4;
  size_t v5;
  unint64_t v6;
  void *v7;
  const char *v8;

  v4 = a1;
  if (a3)
  {
    v5 = malloc_good_size(24 * a3);
    v6 = v5 / 0x18;
    if (v5 / 0x18 != *a2)
    {
      v7 = malloc_type_realloc(v4, v5, 0xF3138078uLL);
      if (!v7)
        AG::precondition_failure((AG *)"allocation failure", v8);
      v4 = v7;
      *a2 = v6;
    }
  }
  else
  {
    *a2 = 0;
    free(a1);
    return 0;
  }
  return v4;
}

uint64_t *AG::data::table::ensure_shared(AG::data::table *this)
{
  if (AG::data::table::ensure_shared(void)::once != -1)
    dispatch_once_f(&AG::data::table::ensure_shared(void)::once, 0, (dispatch_function_t)AG::data::table::ensure_shared(void)::$_0::__invoke);
  return &AG::data::_shared_table_bytes;
}

uint64_t AG::Node::update_self(unsigned int *a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(_QWORD *, uint64_t);
  _QWORD *v7;

  v3 = *a1;
  v4 = *(_QWORD *)(*(_QWORD *)(a2 + 128) + ((v3 >> 5) & 0x7FFFFF8));
  v5 = *(_QWORD *)(*(_QWORD *)v4 - 8);
  if ((v3 & 0x20) != 0)
  {
    v6 = *(uint64_t (**)(_QWORD *, uint64_t))(v5 + 24);
  }
  else
  {
    v6 = *(uint64_t (**)(_QWORD *, uint64_t))(v5 + 16);
    *a1 = v3 | 0x20;
  }
  v7 = (_QWORD *)((char *)a1 + *(unsigned int *)(v4 + 44));
  if ((*((_BYTE *)a1 + 7) & 1) != 0)
    v7 = (_QWORD *)*v7;
  return v6(v7, a3);
}

void AG::Subgraph::set_flags(uint64_t a1, unsigned int a2, unsigned __int8 a3)
{
  _BYTE *v3;
  int v5;
  uint64_t v7;
  int v8;
  unsigned int v9;
  int v10;
  int v11;

  v3 = (_BYTE *)(AG::data::_shared_table_bytes + a2);
  if (v3[6] != a3)
  {
    v5 = a3;
    if (a3 && v3[6])
    {
      v3[6] = a3;
    }
    else
    {
      AG::Subgraph::unlink_attribute(a1, a2);
      v3[6] = v5;
      AG::Subgraph::insert_attribute(v7, a2, 1);
    }
    v8 = *(_DWORD *)(a1 + 100);
    if ((v5 & ~v8) != 0)
    {
      *(_DWORD *)(a1 + 100) = v8 | v5;
      v10 = (v8 | v5 | BYTE1(v8));
      AG::Subgraph::foreach_ancestor<AG::Subgraph::propagate_flags(void)::$_0>(a1, &v10);
    }
    if ((*v3 & 1) != 0)
    {
      v9 = *(_DWORD *)(a1 + 100);
      if ((v5 & ~HIWORD(v9)) != 0)
      {
        *(_DWORD *)(a1 + 100) = v9 & 0xFF00FFFF | ((BYTE2(v9) | v5) << 16);
        v11 = (BYTE2(v9) | v5) | HIBYTE(v9);
        AG::Subgraph::foreach_ancestor<AG::Subgraph::propagate_dirty_flags(void)::$_0>(a1, &v11);
      }
    }
  }
}

void AG::Subgraph::unlink_attribute(uint64_t a1, unsigned int a2)
{
  uint64_t v2;
  _WORD *v3;
  int v4;
  int v5;
  unsigned int v6;
  unsigned int v7;
  int v8;
  unsigned __int16 *v9;
  _WORD *v10;

  v2 = AG::data::_shared_table_bytes + (a2 & 0xFFFFFE00);
  v5 = *(unsigned __int16 *)(v2 + 20);
  v3 = (_WORD *)(v2 + 20);
  v4 = v5;
  if (!v5)
    goto LABEL_17;
  v6 = 2;
  do
  {
    while (1)
    {
      v7 = v4 + (a2 & 0xFFFFFE00);
      v8 = v4 & 3;
      if ((v4 & 3) != 0)
        break;
      if (v7 == a2)
        goto LABEL_13;
      v9 = (unsigned __int16 *)(AG::data::_shared_table_bytes + 4 + v7);
LABEL_12:
      v4 = *v9;
      v6 = v7;
      if (!v4)
        goto LABEL_13;
    }
    if (v8 == 1)
    {
      if (v7 == a2)
        break;
      v9 = (unsigned __int16 *)(AG::data::_shared_table_bytes + 14 + (v7 & 0xFFFFFFFC));
      goto LABEL_12;
    }
  }
  while (v8 != 2 && v4);
LABEL_13:
  if ((v6 & 3) == 0)
    v3 = (_WORD *)(AG::data::_shared_table_bytes + v6 + 4);
  if ((v6 & 3) == 1)
    v3 = (_WORD *)(AG::data::_shared_table_bytes + (v6 & 0xFFFFFFFC) + 14);
LABEL_17:
  v10 = (_WORD *)(AG::data::_shared_table_bytes + a2 + 4);
  if ((a2 & 3) != 0)
    v10 = (_WORD *)(AG::data::_shared_table_bytes + (a2 & 0xFFFFFFFC) + 14);
  *v3 = *v10;
  *v10 = 0;
}

uint64_t AG::Graph::value_set(AG::Graph *a1, const char *a2, AG::LayoutDescriptor *a3, unsigned __int8 *a4)
{
  AG::Node *v6;
  uint64_t v7;
  uint64_t v8;
  AG::Graph **v9;
  uint64_t v10;

  v6 = (AG::Node *)(AG::data::_shared_table_bytes + a2);
  if (*((_DWORD *)v6 + 3) >= 0x20u && (*(_BYTE *)v6 & 0x10) != 0)
    AG::precondition_failure((AG *)"can only set initial value of computed attributes: %u", a2, a2);
  v7 = AG::Graph::_current_update_key;
  v8 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v7);
  if ((v8 & 1) == 0)
  {
    v9 = (AG::Graph **)(v8 & 0xFFFFFFFFFFFFFFFELL);
    if (v9)
    {
      if (*v9 == a1 && (*((_DWORD *)v6 + 5) > 0x1Fu || (*(_BYTE *)v6 & 0xC0) != 0))
        AG::precondition_failure((AG *)"setting value during update: %u", a2, a2);
    }
  }
  v10 = AG::Graph::value_set_internal(a1, a2, v6, a4, a3);
  if ((_DWORD)v10)
    AG::Graph::propagate_dirty((uint64_t)a1);
  return v10;
}

uint64_t AG::Graph::value_set_internal(AG::Graph *a1, uint64_t a2, AG::Node *this, unsigned __int8 *a4, AG::LayoutDescriptor *a5)
{
  int v10;
  unint64_t v11;
  uint64_t v12;
  AG::swift::metadata *v13;
  AG::LayoutDescriptor *v14;
  int v15;
  unint64_t *v16;
  AG::LayoutDescriptor **v17;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unsigned __int8 *v27;
  uint64_t v28;
  int v29;
  char v30;
  AG::Graph *v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  const char *v37;
  _QWORD *v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unsigned __int8 *v43;
  int v44;

  v10 = *((_DWORD *)a1 + 58);
  if (v10)
  {
    v32 = v10 - 1;
    do
    {
      v33 = v32;
      v34 = *(_QWORD *)(*((_QWORD *)a1 + 28) + 8 * v32);
      (*(void (**)(uint64_t, _QWORD, unsigned __int8 *))(*(_QWORD *)v34 + 272))(v34, a2, a4);
      --v32;
    }
    while (v33);
  }
  v11 = *(unsigned int *)this;
  v12 = *(_QWORD *)(*((_QWORD *)a1 + 16) + ((v11 >> 5) & 0x7FFFFF8));
  v13 = *(AG::swift::metadata **)(v12 + 8);
  if (v13 != a5)
  {
    v35 = AG::swift::metadata::name(v13, 0);
    v36 = AG::swift::metadata::name(a5, 0);
    AG::precondition_failure((AG *)"invalid value type for attribute: %u (saw %s, expected %s)", v37, a2, v35, v36);
  }
  if ((v11 & 0x10) != 0)
  {
    v14 = (AG::LayoutDescriptor *)(AG::data::_shared_table_bytes + *((unsigned int *)this + 2));
    if ((*((_BYTE *)this + 7) & 2) != 0)
      v14 = *(AG::LayoutDescriptor **)v14;
    v15 = *(_DWORD *)(v12 + 40);
    v16 = (unint64_t *)(v15 & 3 | 0x80000100);
    v17 = *(AG::LayoutDescriptor ***)(v12 + 48);
    if (!v17)
    {
      v17 = (AG::LayoutDescriptor **)AG::LayoutDescriptor::fetch(a5, (const AG::swift::metadata *)(v15 & 3 | 0x80000100), 0);
      *(_QWORD *)(v12 + 48) = v17;
    }
    if (v17 == (AG::LayoutDescriptor **)1)
      v17 = 0;
    if ((AG::LayoutDescriptor::compare(v17, v14, a4, *(char **)(*((_QWORD *)a5 - 1) + 64), v16) & 1) != 0)
      return 0;
    v19 = a2;
    if (*((_DWORD *)a1 + 58))
    {
      v31 = a1;
      goto LABEL_34;
    }
    v42 = (uint64_t)v14;
    v43 = a4;
    v20 = *(unsigned int *)(AG::data::_shared_table_bytes + a2 + 20);
    if (v20 < 0x20)
      goto LABEL_30;
    v21 = 0;
    v22 = AG::data::_shared_table_bytes + *(unsigned int *)(AG::data::_shared_table_bytes + a2 + 24);
    v23 = v20 >> 5;
LABEL_15:
    v24 = *(unsigned int *)(v22 + 4 * v21);
    if ((v24 & 3) == 0)
    {
      v25 = AG::data::_shared_table_bytes + v24;
      v26 = *(unsigned int *)(AG::data::_shared_table_bytes + v24 + 12);
      if (v26 < 0x20)
        goto LABEL_29;
      v27 = (unsigned __int8 *)(AG::data::_shared_table_bytes + *(unsigned int *)(v25 + 16) + 4);
      v28 = 5 * (v26 >> 5);
      while (1)
      {
        v29 = *((_DWORD *)v27 - 1);
        v44 = v29;
        if ((v29 & 3) != 0)
        {
          v41 = v19;
          v29 = AG::AttributeID::resolve_slow((AG::AttributeID *)&v44, 0);
          v19 = v41;
        }
        if (v29 == (_DWORD)a2)
        {
          v30 = *v27;
          if ((*v27 & 8) == 0)
          {
            if ((*(v27 - 4) & 3) == 0)
              goto LABEL_28;
            v40 = v19;
            v39 = v39 & 0xFFFFFF0000000000 | *((unsigned int *)v27 - 1) | ((unint64_t)*v27 << 32);
            if ((AG::Graph::compare_edge_values((uint64_t)a1, *((_DWORD *)v27 - 1), v12, v42, (uint64_t)v43) & 1) == 0)
            {
              v30 = *v27;
              v19 = v40;
LABEL_28:
              *v27 = v30 | 8;
LABEL_29:
              if (++v21 == v23)
              {
LABEL_30:
                ++*((_QWORD *)a1 + 58);
                v14 = (AG::LayoutDescriptor *)v42;
                a4 = v43;
                goto LABEL_31;
              }
              goto LABEL_15;
            }
            v19 = v40;
          }
        }
        v27 += 5;
        v28 -= 5;
        if (!v28)
          goto LABEL_29;
      }
    }
    v31 = a1;
    v14 = (AG::LayoutDescriptor *)v42;
    a4 = v43;
LABEL_34:
    AG::Graph::mark_changed((uint64_t)v31);
LABEL_31:
    (*(void (**)(AG::LayoutDescriptor *, unsigned __int8 *, AG::LayoutDescriptor *))(*((_QWORD *)a5 - 1)
                                                                                              + 24))(v14, a4, a5);
  }
  else
  {
    AG::Node::allocate_value((unsigned int *)this, a1, *(AG::data::zone **)(AG::data::_shared_table_bytes + (a2 & 0xFFFFFE00)));
    *(_DWORD *)this |= 0x10u;
    AG::Graph::mark_changed((uint64_t)a1, a2, 0, 0, 0);
    v38 = (_QWORD *)(AG::data::_shared_table_bytes + *((unsigned int *)this + 2));
    if ((*((_BYTE *)this + 7) & 2) != 0)
      v38 = (_QWORD *)*v38;
    (*(void (**)(_QWORD *, unsigned __int8 *, AG::LayoutDescriptor *))(*((_QWORD *)a5 - 1) + 16))(v38, a4, a5);
  }
  return 1;
}

void AG::Graph::propagate_dirty(uint64_t a1)
{
  uint64_t v1;
  unsigned int v2;
  unsigned int v3;
  uint64_t *v4;
  unsigned int *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int *v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  char *v14;
  char *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  int *v28;
  int v29;
  uint64_t v30;
  int v31;
  unint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t i;
  uint64_t v43;
  AG::Subgraph *v44;
  unsigned int v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  _QWORD *v50;
  _DWORD *v51;
  uint64_t v52;
  util::UntypedTable *v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  unsigned int v57;
  _BYTE v58[32];
  char v59[8192];
  uint64_t v60;

  v1 = MEMORY[0x1E0C80A78](a1);
  v3 = v2;
  v55 = v1;
  v60 = *MEMORY[0x1E0C80C00];
  util::Heap::Heap((util::Heap *)v58, v59, 0x2000, 0);
  if ((v3 & 3) == 2)
    goto LABEL_72;
  v4 = &AG::data::_shared_table_bytes;
  if ((v3 & 3) == 1)
  {
    v8 = AG::data::_shared_table_bytes;
    v9 = (unsigned int *)(AG::data::_shared_table_bytes + (v3 & 0xFFFFFFFC));
    v11 = v9[5];
    v10 = v9[6];
    v12 = *v9;
    v57 = v12;
    if ((v12 & 3) != 0)
      v12 = AG::AttributeID::resolve_slow((AG::AttributeID *)&v57, 0);
    v6 = v8 + v10;
    LODWORD(v7) = v11 >> 5;
    if ((v12 & 3) == 0)
    {
      v5 = (unsigned int *)(AG::data::_shared_table_bytes + v12);
      goto LABEL_9;
    }
LABEL_11:
    v13 = 0;
    goto LABEL_12;
  }
  if ((v3 & 3) != 0)
  {
    LODWORD(v7) = 0;
    v6 = 0;
    goto LABEL_11;
  }
  v5 = (unsigned int *)(AG::data::_shared_table_bytes + v3);
  v6 = AG::data::_shared_table_bytes + v5[6];
  LODWORD(v7) = v5[5] >> 5;
LABEL_9:
  v13 = *v5;
LABEL_12:
  v14 = 0;
  v15 = 0;
  v53 = (util::UntypedTable *)(v55 + 144);
  v54 = v3 & 0xFFFFFE00;
  v52 = v3;
  v7 = v7;
  while (1)
  {
    v16 = v7 - 1;
    if (v7 - 1 >= 0)
    {
      v56 = v14;
      while (1)
      {
        v17 = *(unsigned int *)(v6 + 4 * v16);
        if ((v17 & 3) != 0)
        {
          if ((*(_DWORD *)(v6 + 4 * v16) & 3) != 1)
            goto LABEL_51;
          v18 = *v4;
          v19 = *v4 + (v17 & 0xFFFFFFFC);
          v20 = *(_DWORD *)(v19 + 8);
          if ((v20 & 1) == 0)
            goto LABEL_51;
          v22 = v19 + 20;
          v21 = *(unsigned int *)(v19 + 20);
          v23 = v18 + *(unsigned int *)(v22 + 4);
          v24 = v21 >> 5;
          if ((v20 & 2) == 0)
          {
            v25 = v13;
            goto LABEL_28;
          }
          if (v21 >= 0x20)
          {
            v34 = *(_QWORD *)(v18 + (v17 & 0xFFFFFE00));
            if (v34
              && (v35 = *(uint64_t **)(v34 + 48)) != 0
              && ((v36 = *(_QWORD *)(v18 + v54)) == 0 || v35 != *(uint64_t **)(v36 + 48))
              && (v37 = util::UntypedTable::lookup(v53, v35, 0)) != 0
              && *((_DWORD *)v37 + 16) != *(_DWORD *)(*v37 + 472))
            {
              AG::Graph::Context::call_invalidation(v37, v52);
              v25 = v13;
            }
            else
            {
              v25 = v13;
            }
LABEL_29:
            if (v16)
            {
              if (v15)
              {
                v33 = *(char **)v15;
              }
              else
              {
                v15 = util::Heap::alloc_((util::Heap *)v58, 0x20uLL);
                v33 = 0;
              }
              *(_QWORD *)v15 = v56;
              *((_QWORD *)v15 + 1) = v23;
              *((_QWORD *)v15 + 2) = v24;
              v56 = v15;
              *((_DWORD *)v15 + 6) = v25;
              v15 = v33;
            }
            else
            {
              v6 = v23;
              v16 = v24;
              v13 = v25;
            }
          }
        }
        else
        {
          v24 = 0;
          v26 = v4;
          v27 = *v4;
          v28 = (int *)(*v4 + v17);
          v29 = *v28;
          v23 = 0;
          if ((v13 & 4) != 0 && (v29 & 4) == 0)
          {
            v29 |= 4u;
            *v28 = v29;
            v23 = v27 + v28[6];
            v24 = (unint64_t)v28[5] >> 5;
          }
          v25 = v29 | v13;
          if ((v29 & 1) != 0)
            goto LABEL_27;
          v30 = *(unsigned int *)(v55 + 232);
          if ((_DWORD)v30)
          {
            for (i = 8 * v30 - 8; i != -8; i -= 8)
            {
              v43 = *(_QWORD *)(*(_QWORD *)(v55 + 224) + i);
              (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v43 + 256))(v43, v17, 1);
            }
            v29 = *v28;
            v27 = *v26;
          }
          *v28 = v29 | 1;
          v31 = *((unsigned __int8 *)v28 + 6);
          if (*((_BYTE *)v28 + 6))
          {
            v44 = *(AG::Subgraph **)(v27 + (v17 & 0xFFFFFE00));
            if (v44)
            {
              v45 = *((_DWORD *)v44 + 25);
              if ((v31 & ~HIWORD(v45)) != 0)
              {
                *((_DWORD *)v44 + 25) = v45 & 0xFF00FFFF | ((BYTE2(v45) | v31) << 16);
                AG::Subgraph::propagate_dirty_flags(v44);
                v27 = *v26;
              }
            }
          }
          v32 = v28[5];
          v23 = v27 + v28[6];
          v24 = v32 >> 5;
          if ((*((_BYTE *)v28 + 7) & 4) == 0)
          {
LABEL_27:
            v4 = v26;
LABEL_28:
            if (v24)
              goto LABEL_29;
            goto LABEL_51;
          }
          v4 = v26;
          if (v32 >= 0x20)
          {
            v38 = *(_QWORD *)(v27 + (v17 & 0xFFFFFE00));
            if (v38)
            {
              v39 = *(uint64_t **)(v38 + 48);
              if (v39)
              {
                v40 = *(_QWORD *)(v27 + v54);
                if (!v40 || v39 != *(uint64_t **)(v40 + 48))
                {
                  v41 = util::UntypedTable::lookup(v53, v39, 0);
                  if (v41)
                  {
                    if (*((_DWORD *)v41 + 16) != *(_DWORD *)(*v41 + 472))
                      AG::Graph::Context::call_invalidation(v41, v52);
                  }
                }
              }
            }
            goto LABEL_29;
          }
        }
LABEL_51:
        if ((--v16 & 0x8000000000000000) != 0)
          goto LABEL_62;
      }
    }
    v56 = v14;
LABEL_62:
    if (!v56)
      break;
    v14 = *(char **)v56;
    v6 = *((_QWORD *)v56 + 1);
    v7 = *((_QWORD *)v56 + 2);
    *(_QWORD *)v56 = v15;
    v15 = v56;
    v13 = *((unsigned int *)v56 + 6);
  }
  v46 = AG::Graph::_current_update_key;
  v47 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v46);
  if (v47)
  {
    while (1)
    {
      v48 = (_QWORD *)(v47 & 0xFFFFFFFFFFFFFFFELL);
      v49 = v48[13];
      if (v49)
        break;
LABEL_71:
      v47 = v48[2];
      if (!v47)
        goto LABEL_72;
    }
    v50 = v48 + 4;
    if (v48[12])
      v50 = (_QWORD *)v48[12];
    v51 = (_DWORD *)&v50[v49 - 1] + 1;
    while ((*v51 & 4) == 0)
    {
      *v51 |= 4u;
      v51 -= 2;
      if (!--v49)
        goto LABEL_71;
    }
  }
LABEL_72:
  util::Heap::reset((util::Heap *)v58, 0, 0);
}

void sub_1AB9393FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  util::InlineHeap<8192ul>::~InlineHeap((util::Heap *)va);
  _Unwind_Resume(a1);
}

uint64_t AG::Subgraph::propagate_dirty_flags(AG::Subgraph *this)
{
  int v2;

  v2 = BYTE2(*((_DWORD *)this + 25)) | HIBYTE(*((_DWORD *)this + 25));
  return AG::Subgraph::foreach_ancestor<AG::Subgraph::propagate_dirty_flags(void)::$_0>((uint64_t)this, &v2);
}

void util::Heap::reset(util::Heap *this, char *a2, uint64_t a3)
{
  _QWORD *i;
  void *v7;
  char *v8;
  char *v9;
  char *v10;

  for (i = (_QWORD *)*((_QWORD *)this + 1); i; i = (_QWORD *)*((_QWORD *)this + 1))
  {
    v7 = (void *)i[1];
    *((_QWORD *)this + 1) = *i;
    free(v7);
  }
  v8 = (char *)((unint64_t)(a2 + 7) & 0xFFFFFFFFFFFFFFF8);
  v9 = (char *)(a2 - v8);
  if ((a2 & 7) == 0)
    v9 = 0;
  v10 = &v9[a3];
  if ((a2 & 7) == 0)
    v8 = a2;
  *((_QWORD *)this + 2) = v8;
  *((_QWORD *)this + 3) = v10;
}

uint64_t *AGGraphGetAttributeGraph(uint64_t a1, char *a2)
{
  uint64_t v3;
  uint64_t *v4;

  if (dword_1ECEF30D0 <= (a1 & 0xFFFFFFFC))
    AG::precondition_failure((AG *)"invalid data offset: %u", a2, a1 & 0xFFFFFFFC);
  v3 = *(_QWORD *)(AG::data::_shared_table_bytes + (a1 & 0xFFFFFE00));
  if (!v3
    || (a2 = *(char **)(v3 + 48)) == 0
    || (v4 = util::UntypedTable::lookup((util::UntypedTable *)(*(_QWORD *)(v3 + 40) + 144), (uint64_t *)a2, 0)) == 0)
  {
    AG::precondition_failure((AG *)"no graph: %u", a2, a1);
  }
  return v4 - 2;
}

uint64_t AGSubgraphGetGraph(uint64_t a1, const char *a2)
{
  uint64_t v2;
  char *v3;
  uint64_t *v4;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
    AG::precondition_failure((AG *)"accessing invalidated subgraph", a2);
  v3 = *(char **)(v2 + 48);
  if (!v3
    || (v4 = util::UntypedTable::lookup((util::UntypedTable *)(*(_QWORD *)(v2 + 40) + 144), (uint64_t *)v3, 0)) == 0)
  {
    AG::precondition_failure((AG *)"accessing invalidated context", v3);
  }
  return AGGraphContextGetGraph((uint64_t)v4);
}

_QWORD *AG::Graph::Context::call_invalidation(_QWORD *result, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  unint64_t StatusReg;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t i;
  uint64_t v12;
  uint64_t v13;
  uint64_t j;
  uint64_t v15;

  *((_DWORD *)result + 16) = *(_DWORD *)(*result + 472);
  if (result[3])
  {
    v3 = result;
    v4 = AG::Graph::_current_update_key;
    StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    v6 = *(_QWORD *)(StatusReg + 8 * v4);
    v7 = v6 | 1;
    if (!v6)
      v7 = 0;
    *(_QWORD *)(StatusReg + 8 * v4) = v7;
    v8 = *result;
    v9 = *(unsigned int *)(*result + 232);
    if ((_DWORD)v9)
    {
      for (i = 8 * v9 - 8; i != -8; i -= 8)
      {
        v12 = *(_QWORD *)(*(_QWORD *)(v8 + 224) + i);
        (*(void (**)(uint64_t, _QWORD *, _QWORD))(*(_QWORD *)v12 + 112))(v12, v3, a2);
      }
    }
    result = (_QWORD *)((uint64_t (*)(uint64_t))v3[3])(a2);
    v10 = *(unsigned int *)(v8 + 232);
    if ((_DWORD)v10)
    {
      v13 = a2;
      for (j = 8 * v10 - 8; j != -8; j -= 8)
      {
        v15 = *(_QWORD *)(*(_QWORD *)(v8 + 224) + j);
        result = (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v15 + 120))(v15, v3, v13);
      }
    }
    *(_QWORD *)(StatusReg + 8 * AG::Graph::_current_update_key) = v6;
  }
  return result;
}

void sub_1AB9396B0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)(v1 + 8 * *(_QWORD *)(v2 + 168)) = v3;
  _Unwind_Resume(a1);
}

char *AGGraphGetWeakValue(unint64_t a1, char a2, AG::swift::metadata *a3)
{
  uint64_t v3;
  unint64_t v6;
  uint64_t v7;
  const char *v8;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  __n128 *v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  _BYTE *v24;
  uint64_t v25;
  __n128 *v26;
  __n128 *v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  int v35;
  unint64_t v36;
  uint64_t v37;
  __n128 *v38;
  int v39;
  int v40;
  char v41;
  char v42;
  int v43;

  v3 = a1;
  if (a1 < 4)
    return 0;
  v6 = HIDWORD(a1);
  v7 = AG::data::table::raw_page_seed((uint64_t)&AG::data::_shared_table_bytes, (const char *)(a1 & 0xFFFFFE00));
  if ((v7 & 0xFF00000000) == 0 || (_DWORD)v6 != (_DWORD)v7)
    return 0;
  if ((a2 & 4) == 0)
  {
    v11 = AG::Graph::_current_update_key;
    v12 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v11);
    if ((v12 & 1) == 0)
    {
      v13 = v12 & 0xFFFFFFFFFFFFFFFELL;
      if (v13)
      {
        v42 = 0;
        v14 = *(__n128 **)v13;
        v15 = v13 + 32;
        v17 = *(_QWORD *)(v13 + 96);
        v16 = *(_QWORD *)(v13 + 104);
        if (v17)
          v15 = v17;
        v18 = *(unsigned int *)(v15 + 8 * v16 - 8);
        v43 = v3;
        v19 = a2 & 3;
        v20 = AG::data::_shared_table_bytes + v18;
        v21 = *(unsigned int *)(AG::data::_shared_table_bytes + v18 + 12);
        if (v21 > 0x11F)
        {
          v27 = v14;
          v37 = AG::data::_shared_table_bytes + v18;
          v39 = v18;
          v28 = AG::Graph::index_of_input_slow((uint64_t)v14, AG::data::_shared_table_bytes + v18, v3 | (unint64_t)(v19 << 40) | 0x700000000);
          v20 = v37;
          LODWORD(v18) = v39;
          v22 = v28;
          v14 = v27;
        }
        else
        {
          if (v21 < 0x20)
          {
LABEL_18:
            v22 = -1;
            return AG::Graph::input_value_ref_slow(v14, v18, (const char *)v3, v6, a2, a3, &v42, v22);
          }
          v22 = 0;
          v23 = v21 >> 5;
          v24 = (_BYTE *)(*(unsigned int *)(v20 + 16) + AG::data::_shared_table_bytes + 4);
          while (*((_DWORD *)v24 - 1) != (_DWORD)v3 || (*v24 & 7) != (_DWORD)v19)
          {
            ++v22;
            v24 += 5;
            if (v23 == v22)
              goto LABEL_18;
          }
        }
        if ((v22 & 0x8000000000000000) == 0)
        {
          v29 = *(unsigned int *)(v20 + 16);
          v30 = AG::data::_shared_table_bytes;
          if ((v3 & 3) != 0)
          {
            v38 = v14;
            v40 = v18;
            v36 = v22;
            v3 = AG::data::_shared_table_bytes;
            v35 = AG::AttributeID::resolve_slow((AG::AttributeID *)&v43, (const char *)3);
            v30 = v3;
            LODWORD(v3) = v35;
            v22 = v36;
            v14 = v38;
            v31 = v18;
            LODWORD(v18) = v40;
          }
          else
          {
            v31 = 0;
          }
          v32 = AG::data::_shared_table_bytes;
          v33 = AG::data::_shared_table_bytes + v3;
          if ((*(_DWORD *)v33 & 0x11) == 0x10)
          {
            *(_BYTE *)(v30 + v29 + 5 * v22 + 4) |= 0x10u;
            v34 = (_QWORD *)(v32 + *(unsigned int *)(v33 + 8));
            if ((*(_BYTE *)(v33 + 7) & 2) != 0)
              v34 = (_QWORD *)*v34;
            return (char *)v34 + v31;
          }
          LODWORD(v3) = v43;
        }
        return AG::Graph::input_value_ref_slow(v14, v18, (const char *)v3, v6, a2, a3, &v42, v22);
      }
    }
  }
  if (dword_1ECEF30D0 <= (v3 & 0xFFFFFFFC))
    AG::precondition_failure((AG *)"invalid data offset: %u", v8, v3 & 0xFFFFFFFC);
  v25 = *(_QWORD *)(AG::data::_shared_table_bytes + (v3 & 0xFFFFFE00));
  if (!v25)
    AG::precondition_failure((AG *)"no graph: %u", v8, v3);
  v26 = *(__n128 **)(v25 + 40);
  v41 = 0;
  return AG::Graph::value_ref(v26, (const char *)v3, HIDWORD(v3), a3, &v41);
}

char *AG::Graph::value_ref(__n128 *a1, const char *a2, unsigned int a3, AG::swift::metadata *a4, _BYTE *a5)
{
  unsigned int v7;
  uint64_t v8;
  const char *v10;
  char *result;
  unsigned int *v12;
  uint64_t v13;
  __n128 *v14;
  __n128 **v15;
  uint64_t v16;
  int v17;
  int v18;
  int v19;
  int v20;
  uint64_t v21;
  unint64_t v23;
  AG::swift::metadata *v24;
  uint64_t v25;
  const char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  const char *v30;
  int v31;

  v7 = a3;
  v8 = (uint64_t)a2;
  v31 = (int)a2;
  ++a1[29].n128_u32[2];
  if ((a2 & 3) != 0)
  {
    if (a3)
      v27 = 25;
    else
      v27 = 11;
    v8 = AG::AttributeID::resolve_slow((AG::AttributeID *)&v31, (const char *)v27);
    v10 = a2;
    if (v7)
    {
LABEL_3:
      result = 0;
      if (v8 < 4 || (v8 & 3) != 0)
        return result;
    }
  }
  else
  {
    v10 = 0;
    if (a3)
      goto LABEL_3;
  }
  v12 = (unsigned int *)(AG::data::_shared_table_bytes + v8);
  if ((*(_BYTE *)(*(_QWORD *)(a1[8].n128_u64[0] + (((unint64_t)*v12 >> 5) & 0x7FFFFF8)) + 40) & 0x10) != 0)
    goto LABEL_23;
  v13 = AG::Graph::_current_update_key;
  v14 = *(__n128 **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v13);
  if (v14)
  {
    while (1)
    {
      v15 = (__n128 **)((unint64_t)v14 & 0xFFFFFFFFFFFFFFFELL);
      if (*v15 == a1)
        break;
      v14 = v15[2];
      if (!v14)
        goto LABEL_9;
    }
  }
  else
  {
LABEL_9:
    ++a1[27].n128_u64[1];
  }
  if (v7)
  {
    v16 = AG::data::table::raw_page_seed((uint64_t)&AG::data::_shared_table_bytes, (const char *)(v8 & 0xFFFFFE00));
    v17 = v16 & 0x7FFFFFFF;
    if ((v16 & 0xFF00000000) == 0)
      v17 = v16;
    v7 = v17 & 0xFFFFFF00;
    v18 = BYTE4(v16);
    v19 = v17;
  }
  else
  {
    v18 = 0;
    v19 = 0;
  }
  if (AG::Graph::update_attribute(a1, v8, 0))
    *a5 |= 1u;
  if (v18)
  {
    v20 = v7 | v19;
    v21 = AG::data::table::raw_page_seed((uint64_t)&AG::data::_shared_table_bytes, (const char *)(v8 & 0xFFFFFE00));
    if ((v21 & 0xFF00000000) == 0 || v20 != (_DWORD)v21)
      return 0;
  }
LABEL_23:
  v23 = *v12;
  if (!v10)
  {
    v24 = *(AG::swift::metadata **)(*(_QWORD *)(a1[8].n128_u64[0] + ((v23 >> 5) & 0x7FFFFF8)) + 8);
    if (v24 != a4)
    {
      v28 = AG::swift::metadata::name(v24, 0);
      v29 = AG::swift::metadata::name(a4, 0);
      AG::precondition_failure((AG *)"invalid value type for attribute: %u (saw %s, expected %s)", v30, v8, v28, v29);
    }
  }
  if ((v23 & 0x10) == 0)
    AG::precondition_failure((AG *)"attribute being read has no value: %u", a2, v8);
  v25 = AG::data::_shared_table_bytes + v12[2];
  if ((*((_BYTE *)v12 + 7) & 2) != 0)
    v25 = *(_QWORD *)v25;
  v26 = v10 - 1;
  if (!v10)
    v26 = 0;
  return (char *)&v26[v25];
}

uint64_t `anonymous namespace'::create_indirect_attribute(unsigned int a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t *v6;

  v5 = AG::Subgraph::_current_subgraph_key;
  v6 = *(uint64_t **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v5);
  if (!v6)
    AG::precondition_failure((AG *)"no subgraph active while making indirection", 0, a3, a4, a2);
  return AG::Graph::add_indirect_attribute(v6[5], (AG::data::zone *)v6, a1, 0, a2, a3, 1) | 1;
}

uint64_t AGGraphGetCounter(uint64_t a1, const char *a2)
{
  AG::Graph::Context *v3;
  uint64_t result;

  if (*(_BYTE *)(a1 + 88))
    AG::precondition_failure((AG *)"invalidated graph", a2);
  v3 = (AG::Graph::Context *)(a1 + 16);
  switch((int)a2)
  {
    case 0:
      result = *(_QWORD *)(*(_QWORD *)v3 + 256);
      break;
    case 1:
      result = *(_QWORD *)(*(_QWORD *)v3 + 440);
      break;
    case 2:
      result = *(_QWORD *)(*(_QWORD *)v3 + 448);
      break;
    case 3:
      result = *(_QWORD *)(*(_QWORD *)v3 + 464);
      break;
    case 4:
      result = *(_QWORD *)(a1 + 32);
      break;
    case 5:
      result = *(_QWORD *)(*(_QWORD *)v3 + 424);
      break;
    case 6:
      LODWORD(result) = AG::Graph::Context::thread_is_updating(v3);
      goto LABEL_12;
    case 7:
      LODWORD(result) = AG::Graph::thread_is_updating(*(AG::Graph **)v3);
LABEL_12:
      result = result;
      break;
    case 8:
      result = *(unsigned __int8 *)(a1 + 84);
      break;
    case 9:
      result = *(unsigned __int8 *)(*(_QWORD *)v3 + 409);
      break;
    case 10:
      result = *(_QWORD *)(*(_QWORD *)v3 + 456);
      break;
    case 11:
      result = *(_QWORD *)(*(_QWORD *)v3 + 264);
      break;
    case 12:
      result = *(_QWORD *)(*(_QWORD *)v3 + 272);
      break;
    case 13:
      result = *(_QWORD *)(*(_QWORD *)v3 + 280);
      break;
    default:
      result = 0;
      break;
  }
  return result;
}

BOOL AG::Graph::thread_is_updating(AG::Graph *this)
{
  uint64_t v1;
  AG::Graph *v2;
  AG::Graph **v3;
  _BOOL8 v4;

  v1 = AG::Graph::_current_update_key;
  v2 = *(AG::Graph **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v1);
  if (!v2)
    return 0;
  do
  {
    v3 = (AG::Graph **)((unint64_t)v2 & 0xFFFFFFFFFFFFFFFELL);
    v4 = *v3 == this;
    if (*v3 == this)
      break;
    v2 = v3[2];
  }
  while (v2);
  return v4;
}

uint64_t AG::Graph::Context::thread_is_updating(AG::Graph::Context *this)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  v1 = AG::Graph::_current_update_key;
  v2 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v1);
  if (!v2)
    return 0;
  while (1)
  {
    v3 = (_QWORD *)(v2 & 0xFFFFFFFFFFFFFFFELL);
    if (*v3 == *(_QWORD *)this)
      break;
    v2 = v3[2];
    if (!v2)
      return 0;
  }
  return AG::Graph::is_context_updating(*(AG::Graph **)this, *((_QWORD *)this + 2));
}

uint64_t AGTypeGetKind(uint64_t *a1)
{
  uint64_t v1;
  uint64_t result;

  v1 = *a1;
  if ((unint64_t)*a1 > 0x7FF)
    v1 = 0;
  if (v1 > 513)
  {
    switch(v1)
    {
      case 769:
        result = 5;
        break;
      case 770:
        result = 6;
        break;
      case 771:
        result = 7;
        break;
      case 772:
        result = 8;
        break;
      default:
        if (v1 != 514)
          return 0;
        result = 4;
        break;
    }
  }
  else if (v1)
  {
    if (v1 == 512)
    {
      return 2;
    }
    else if (v1 == 513)
    {
      return 3;
    }
    else
    {
      return 0;
    }
  }
  else
  {
    return 1;
  }
  return result;
}

void *AG::LayoutDescriptor::Builder::Emitter<AG::vector<unsigned char,512ul,unsigned long>>::operator()(uint64_t *a1, unint64_t *a2)
{
  void *result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v18;

  result = AG::LayoutDescriptor::Builder::Emitter<AG::vector<unsigned char,512ul,unsigned long>>::enter(a1, a2);
  v5 = *a1;
  v6 = *(_QWORD *)(*a1 + 520);
  if (*(_QWORD *)(*a1 + 528) < (unint64_t)(v6 + 1))
  {
    result = AG::vector<unsigned char,512ul,unsigned long>::reserve_slow((void *)*a1, v6 + 1);
    v6 = *(_QWORD *)(v5 + 520);
  }
  v7 = *(_QWORD *)(v5 + 512);
  if (!v7)
    v7 = v5;
  *(_BYTE *)(v7 + v6) = 2;
  ++*(_QWORD *)(v5 + 520);
  v8 = *a1;
  v9 = a2[2];
  v10 = *(_QWORD *)(*a1 + 520);
  v11 = v10 + 8;
  if (v10 <= 0xFFFFFFFFFFFFFFF7 && *(_QWORD *)(*a1 + 528) < v11)
    result = AG::vector<unsigned char,512ul,unsigned long>::reserve_slow((void *)*a1, v10 + 8);
  *(_QWORD *)(v8 + 520) = v11;
  v13 = *(_QWORD *)(v8 + 512);
  if (!v13)
    v13 = v8;
  *(_QWORD *)(v13 + v10) = v9;
  v14 = *a1;
  v15 = *(_QWORD *)(*a1 + 520);
  v16 = v15 + 8;
  if (v15 <= 0xFFFFFFFFFFFFFFF7 && *(_QWORD *)(*a1 + 528) < v16)
    result = AG::vector<unsigned char,512ul,unsigned long>::reserve_slow((void *)*a1, v15 + 8);
  *(_QWORD *)(v14 + 520) = v16;
  v18 = *(_QWORD *)(v14 + 512);
  if (!v18)
    v18 = v14;
  *(_QWORD *)(v18 + v15) = 0;
  a1[1] += a2[1];
  return result;
}

{
  void *result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v13;

  result = AG::LayoutDescriptor::Builder::Emitter<AG::vector<unsigned char,512ul,unsigned long>>::enter(a1, a2);
  v5 = *a1;
  v6 = *(_QWORD *)(*a1 + 520);
  if (*(_QWORD *)(*a1 + 528) < (unint64_t)(v6 + 1))
  {
    result = AG::vector<unsigned char,512ul,unsigned long>::reserve_slow((void *)*a1, v6 + 1);
    v6 = *(_QWORD *)(v5 + 520);
  }
  v7 = *(_QWORD *)(v5 + 512);
  if (!v7)
    v7 = v5;
  *(_BYTE *)(v7 + v6) = 3;
  ++*(_QWORD *)(v5 + 520);
  v8 = *a1;
  v9 = a2[2];
  v10 = *(_QWORD *)(*a1 + 520);
  v11 = v10 + 8;
  if (v10 <= 0xFFFFFFFFFFFFFFF7 && *(_QWORD *)(*a1 + 528) < v11)
    result = AG::vector<unsigned char,512ul,unsigned long>::reserve_slow((void *)*a1, v10 + 8);
  *(_QWORD *)(v8 + 520) = v11;
  v13 = *(_QWORD *)(v8 + 512);
  if (!v13)
    v13 = v8;
  *(_QWORD *)(v13 + v10) = v9;
  a1[1] += a2[1];
  return result;
}

{
  void *result;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  char v8;
  char v9;
  int v10;
  unsigned int v11;
  unsigned int v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  unsigned int v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  BOOL v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unsigned __int8 v51;
  uint64_t *v52;

  result = AG::LayoutDescriptor::Builder::Emitter<AG::vector<unsigned char,512ul,unsigned long>>::enter(a1, a2);
  v5 = a2[4];
  if (v5)
  {
    v6 = a2[3];
    v7 = v6 + 40 * v5;
    v8 = 1;
    do
    {
      if ((v8 & 1) != 0)
        v9 = 8;
      else
        v9 = 12;
      if ((v8 & 1) != 0)
        v10 = 9;
      else
        v10 = 13;
      if ((v8 & 1) != 0)
        v11 = 11;
      else
        v11 = 21;
      v12 = *(_DWORD *)v6 + v10;
      v13 = (_QWORD *)*a1;
      if (v12 <= v11)
      {
        v20 = v13[65];
        if (v13[66] < (unint64_t)(v20 + 1))
        {
          result = AG::vector<unsigned char,512ul,unsigned long>::reserve_slow((void *)*a1, v20 + 1);
          v20 = v13[65];
        }
        v21 = (_QWORD *)v13[64];
        if (!v21)
          v21 = v13;
        *((_BYTE *)v21 + v20) = v12;
        ++v13[65];
      }
      else
      {
        v14 = v13[65];
        if (v13[66] < (unint64_t)(v14 + 1))
        {
          result = AG::vector<unsigned char,512ul,unsigned long>::reserve_slow((void *)*a1, v14 + 1);
          v14 = v13[65];
        }
        v15 = (_QWORD *)v13[64];
        if (!v15)
          v15 = v13;
        *((_BYTE *)v15 + v14) = v9;
        ++v13[65];
        v16 = (_QWORD *)*a1;
        v17 = *(_DWORD *)v6;
        v18 = *(_QWORD *)(*a1 + 520);
        do
        {
          if (v16[66] < (unint64_t)(v18 + 1))
          {
            result = AG::vector<unsigned char,512ul,unsigned long>::reserve_slow(v16, v18 + 1);
            v18 = v16[65];
          }
          v19 = (_QWORD *)v16[64];
          if (!v19)
            v19 = v16;
          *((_BYTE *)v19 + v18) = v17 & 0x7F | ((v17 > 0x7F) << 7);
          v18 = v16[65] + 1;
          v16[65] = v18;
          v35 = v17 > 0x7F;
          v17 >>= 7;
        }
        while (v35);
      }
      if ((v8 & 1) != 0)
      {
        v22 = *a1;
        v23 = a2[2];
        v24 = *(_QWORD *)(*a1 + 520);
        v25 = v24 + 8;
        if (v24 <= 0xFFFFFFFFFFFFFFF7 && *(_QWORD *)(*a1 + 528) < v25)
          result = AG::vector<unsigned char,512ul,unsigned long>::reserve_slow((void *)*a1, v24 + 8);
        *(_QWORD *)(v22 + 520) = v25;
        v27 = *(_QWORD *)(v22 + 512);
        if (!v27)
          v27 = v22;
        *(_QWORD *)(v27 + v24) = v23;
      }
      v28 = a1[1];
      v49 = *a1;
      v50 = v28;
      v51 = 0;
      v29 = *(_QWORD *)(v6 + 24);
      if (v29)
      {
        v30 = *(_QWORD *)(v6 + 16);
        v31 = 56 * v29;
        do
        {
          v32 = *(unsigned int *)(v30 + 48);
          if ((_DWORD)v32 == -1)
            std::__throw_bad_variant_access[abi:ne180100]();
          v52 = &v49;
          result = (void *)((uint64_t (*)(uint64_t **, uint64_t))off_1E5A60898[v32])(&v52, v30);
          v30 += 56;
          v31 -= 56;
        }
        while (v31);
        v33 = a1[1];
        LODWORD(v29) = v51;
        v28 = v50;
      }
      else
      {
        v33 = v28;
      }
      v8 = 0;
      v34 = *(_QWORD *)(*(_QWORD *)(a2[2] - 8) + 64) + v33;
      if (*((unsigned __int8 *)a1 + 16) | v29)
        v35 = 1;
      else
        v35 = v28 > v34;
      v36 = v35;
      *((_BYTE *)a1 + 16) = v36;
      v6 += 40;
    }
    while (v6 != v7);
  }
  else
  {
    v37 = *a1;
    v38 = *(_QWORD *)(*a1 + 520);
    if (*(_QWORD *)(*a1 + 528) < (unint64_t)(v38 + 1))
    {
      result = AG::vector<unsigned char,512ul,unsigned long>::reserve_slow((void *)*a1, v38 + 1);
      v38 = *(_QWORD *)(v37 + 520);
    }
    v39 = *(_QWORD *)(v37 + 512);
    if (!v39)
      v39 = v37;
    *(_BYTE *)(v39 + v38) = 9;
    ++*(_QWORD *)(v37 + 520);
    v40 = *a1;
    v41 = a2[2];
    v42 = *(_QWORD *)(*a1 + 520);
    v43 = v42 + 8;
    if (v42 <= 0xFFFFFFFFFFFFFFF7 && *(_QWORD *)(*a1 + 528) < v43)
      result = AG::vector<unsigned char,512ul,unsigned long>::reserve_slow((void *)*a1, v42 + 8);
    *(_QWORD *)(v40 + 520) = v43;
    v45 = *(_QWORD *)(v40 + 512);
    if (!v45)
      v45 = v40;
    *(_QWORD *)(v45 + v42) = v41;
  }
  v46 = *a1;
  v47 = *(_QWORD *)(*a1 + 520);
  if (*(_QWORD *)(*a1 + 528) < (unint64_t)(v47 + 1))
  {
    result = AG::vector<unsigned char,512ul,unsigned long>::reserve_slow((void *)*a1, v47 + 1);
    v47 = *(_QWORD *)(v46 + 520);
  }
  v48 = *(_QWORD *)(v46 + 512);
  if (!v48)
    v48 = v46;
  *(_BYTE *)(v48 + v47) = 22;
  ++*(_QWORD *)(v46 + 520);
  a1[1] += a2[1];
  return result;
}

{
  void *result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v19;

  result = AG::LayoutDescriptor::Builder::Emitter<AG::vector<unsigned char,512ul,unsigned long>>::enter(a1, a2);
  v5 = *a1;
  v6 = *(_QWORD *)(*a1 + 520);
  if (*(_QWORD *)(*a1 + 528) < (unint64_t)(v6 + 1))
  {
    result = AG::vector<unsigned char,512ul,unsigned long>::reserve_slow((void *)*a1, v6 + 1);
    v6 = *(_QWORD *)(v5 + 520);
  }
  v7 = *(_QWORD *)(v5 + 512);
  if (!v7)
    v7 = v5;
  *(_BYTE *)(v7 + v6) = 1;
  ++*(_QWORD *)(v5 + 520);
  v8 = *a1;
  v9 = a2[2];
  v10 = *(_QWORD *)(*a1 + 520);
  v11 = v10 + 8;
  if (v10 <= 0xFFFFFFFFFFFFFFF7 && *(_QWORD *)(*a1 + 528) < v11)
    result = AG::vector<unsigned char,512ul,unsigned long>::reserve_slow((void *)*a1, v10 + 8);
  *(_QWORD *)(v8 + 520) = v11;
  v13 = *(_QWORD *)(v8 + 512);
  if (!v13)
    v13 = v8;
  *(_QWORD *)(v13 + v10) = v9;
  v14 = *a1;
  v15 = a2[3];
  v16 = *(_QWORD *)(*a1 + 520);
  v17 = v16 + 8;
  if (v16 <= 0xFFFFFFFFFFFFFFF7 && *(_QWORD *)(*a1 + 528) < v17)
    result = AG::vector<unsigned char,512ul,unsigned long>::reserve_slow((void *)*a1, v16 + 8);
  *(_QWORD *)(v14 + 520) = v17;
  v19 = *(_QWORD *)(v14 + 512);
  if (!v19)
    v19 = v14;
  *(_QWORD *)(v19 + v16) = v15;
  a1[1] += a2[1];
  return result;
}

void *AG::LayoutDescriptor::Builder::Emitter<AG::vector<unsigned char,512ul,unsigned long>>::operator()(uint64_t *a1, uint64_t a2)
{
  void *result;
  uint64_t v5;
  int v6;
  uint64_t v7;
  char v8;
  uint64_t v9;

  result = AG::LayoutDescriptor::Builder::Emitter<AG::vector<unsigned char,512ul,unsigned long>>::enter(a1, (unint64_t *)a2);
  v5 = *a1;
  v6 = *(unsigned __int8 *)(a2 + 16);
  v7 = *(_QWORD *)(*a1 + 520);
  if (*(_QWORD *)(*a1 + 528) < (unint64_t)(v7 + 1))
  {
    result = AG::vector<unsigned char,512ul,unsigned long>::reserve_slow((void *)*a1, v7 + 1);
    v7 = *(_QWORD *)(v5 + 520);
  }
  if (v6)
    v8 = 5;
  else
    v8 = 4;
  v9 = *(_QWORD *)(v5 + 512);
  if (!v9)
    v9 = v5;
  *(_BYTE *)(v9 + v7) = v8;
  ++*(_QWORD *)(v5 + 520);
  a1[1] += *(_QWORD *)(a2 + 8);
  return result;
}

void *AG::LayoutDescriptor::Builder::Emitter<AG::vector<unsigned char,512ul,unsigned long>>::operator()(uint64_t a1, unint64_t *a2)
{
  void *result;
  _QWORD *v5;
  unint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  char v9;
  uint64_t v10;
  _QWORD *v11;

  result = AG::LayoutDescriptor::Builder::Emitter<AG::vector<unsigned char,512ul,unsigned long>>::enter((_BYTE *)a1, a2);
  v5 = *(_QWORD **)a1;
  v6 = a2[1];
  if (v6 >= 0x81)
  {
    v7 = v5[65];
    do
    {
      if (v5[66] < (unint64_t)(v7 + 1))
      {
        result = AG::vector<unsigned char,512ul,unsigned long>::reserve_slow(v5, v7 + 1);
        v7 = v5[65];
      }
      v8 = (_QWORD *)v5[64];
      if (!v8)
        v8 = v5;
      *((_BYTE *)v8 + v7) = -1;
      v7 = v5[65] + 1;
      v5[65] = v7;
      v6 -= 128;
    }
    while (v6 > 0x80);
  }
  if (v6)
  {
    v9 = (v6 - 1) | 0x80;
    v10 = v5[65];
    if (v5[66] < (unint64_t)(v10 + 1))
    {
      result = AG::vector<unsigned char,512ul,unsigned long>::reserve_slow(v5, v10 + 1);
      v10 = v5[65];
    }
    v11 = (_QWORD *)v5[64];
    if (!v11)
      v11 = v5;
    *((_BYTE *)v11 + v10) = v9;
    ++v5[65];
  }
  *(_QWORD *)(a1 + 8) += a2[1];
  return result;
}

char *AG::LayoutDescriptor::Builder::Emitter<AG::vector<unsigned char,512ul,unsigned long>>::operator()(uint64_t *a1, uint64_t a2)
{
  AG::LayoutDescriptor *v4;
  const unsigned __int8 *v5;
  char *result;
  size_t v7;
  _QWORD *v8;
  size_t v9;
  size_t v10;
  uint64_t v11;
  size_t v12;
  size_t v13;
  int64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v22;
  _QWORD *v23;
  __int16 v24;
  unint64_t v25;
  unint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v36;
  _QWORD *v37;
  unint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  BOOL v41;
  uint64_t v42;
  _QWORD *v43;
  unint64_t v44;
  int v45;
  __int16 v46;

  AG::LayoutDescriptor::Builder::Emitter<AG::vector<unsigned char,512ul,unsigned long>>::enter(a1, (unint64_t *)a2);
  v4 = *(AG::LayoutDescriptor **)(a2 + 16);
  result = (char *)AG::LayoutDescriptor::length(v4, v5);
  v7 = (size_t)(result - 1);
  if ((unint64_t)(result - 1) > 0x1E)
  {
    v14 = v4 - (AG::LayoutDescriptor *)AG::LayoutDescriptor::base_address;
    if (v4 - (AG::LayoutDescriptor *)AG::LayoutDescriptor::base_address == (int)(v4
                                                                                - (AG::LayoutDescriptor *)AG::LayoutDescriptor::base_address)
      && *(_QWORD *)(a2 + 8) <= 0xFFFEuLL)
    {
      v15 = *a1;
      v16 = *(_QWORD *)(*a1 + 520);
      if (*(_QWORD *)(*a1 + 528) < (unint64_t)(v16 + 1))
      {
        result = (char *)AG::vector<unsigned char,512ul,unsigned long>::reserve_slow((void *)*a1, v16 + 1);
        v14 = v4 - (AG::LayoutDescriptor *)AG::LayoutDescriptor::base_address;
        v16 = *(_QWORD *)(v15 + 520);
      }
      v17 = *(_QWORD *)(v15 + 512);
      if (!v17)
        v17 = v15;
      *(_BYTE *)(v17 + v16) = 7;
      ++*(_QWORD *)(v15 + 520);
      v18 = *a1;
      v19 = *(_QWORD *)(*a1 + 520);
      v20 = v19 + 4;
      if (v19 <= 0xFFFFFFFFFFFFFFFBLL && *(_QWORD *)(*a1 + 528) < v20)
      {
        v45 = v14;
        result = (char *)AG::vector<unsigned char,512ul,unsigned long>::reserve_slow((void *)*a1, v19 + 4);
        LODWORD(v14) = v45;
      }
      *(_QWORD *)(v18 + 520) = v20;
      v22 = *(_QWORD *)(v18 + 512);
      if (!v22)
        v22 = v18;
      *(_DWORD *)(v22 + v19) = v14;
      v23 = (_QWORD *)*a1;
      v24 = *(_WORD *)(a2 + 8);
      v25 = *(_QWORD *)(*a1 + 520);
      v26 = v25 + 2;
      if (v25 <= 0xFFFFFFFFFFFFFFFDLL && v23[66] < v26)
      {
        v46 = *(_WORD *)(a2 + 8);
        result = (char *)AG::vector<unsigned char,512ul,unsigned long>::reserve_slow((void *)*a1, v25 + 2);
        v24 = v46;
      }
      v23[65] = v26;
      v27 = (_QWORD *)v23[64];
      if (!v27)
        v27 = v23;
      *(_WORD *)((char *)v27 + v25) = v24;
    }
    else
    {
      v28 = *a1;
      v29 = *(_QWORD *)(*a1 + 520);
      if (*(_QWORD *)(*a1 + 528) < (unint64_t)(v29 + 1))
      {
        result = (char *)AG::vector<unsigned char,512ul,unsigned long>::reserve_slow((void *)*a1, v29 + 1);
        v29 = *(_QWORD *)(v28 + 520);
      }
      v30 = *(_QWORD *)(v28 + 512);
      if (!v30)
        v30 = v28;
      *(_BYTE *)(v30 + v29) = 6;
      ++*(_QWORD *)(v28 + 520);
      v31 = *a1;
      v32 = *(_QWORD *)(a2 + 16);
      v33 = *(_QWORD *)(*a1 + 520);
      v34 = v33 + 8;
      if (v33 <= 0xFFFFFFFFFFFFFFF7 && *(_QWORD *)(*a1 + 528) < v34)
      {
        v44 = *(_QWORD *)(*a1 + 520);
        result = (char *)AG::vector<unsigned char,512ul,unsigned long>::reserve_slow((void *)*a1, v33 + 8);
        v33 = v44;
      }
      *(_QWORD *)(v31 + 520) = v34;
      v36 = *(_QWORD *)(v31 + 512);
      if (!v36)
        v36 = v31;
      *(_QWORD *)(v36 + v33) = v32;
      v37 = (_QWORD *)*a1;
      v38 = *(_QWORD *)(a2 + 8);
      v39 = *(_QWORD *)(*a1 + 520);
      do
      {
        if (v37[66] < (unint64_t)(v39 + 1))
        {
          result = (char *)AG::vector<unsigned char,512ul,unsigned long>::reserve_slow(v37, v39 + 1);
          v39 = v37[65];
        }
        v40 = (_QWORD *)v37[64];
        if (!v40)
          v40 = v37;
        *((_BYTE *)v40 + v39) = v38 & 0x7F | ((v38 > 0x7F) << 7);
        v39 = v37[65] + 1;
        v37[65] = v39;
        v41 = v38 > 0x7F;
        v38 >>= 7;
      }
      while (v41);
    }
  }
  else
  {
    v8 = (_QWORD *)*a1;
    v9 = *(_QWORD *)(*a1 + 520);
    v10 = v9 + v7;
    if (v9 >= v9 + v7)
    {
      v11 = *a1;
    }
    else
    {
      v11 = *a1;
      if (v8[66] < v10)
      {
        v43 = (_QWORD *)*a1;
        v12 = v9 + v7;
        v13 = *(_QWORD *)(*a1 + 520);
        AG::vector<unsigned char,512ul,unsigned long>::reserve_slow(v8, v9 + v7);
        v9 = v13;
        v10 = v12;
        v8 = v43;
        v11 = *a1;
        v4 = *(AG::LayoutDescriptor **)(a2 + 16);
      }
    }
    v8[65] = v10;
    v42 = *(_QWORD *)(v11 + 512);
    if (!v42)
      v42 = v11;
    result = (char *)memcpy((void *)(v42 + v9), v4, v7);
  }
  a1[1] += *(_QWORD *)(a2 + 8);
  return result;
}

_BYTE *AG::LayoutDescriptor::Builder::Emitter<AG::vector<unsigned char,512ul,unsigned long>>::enter(_BYTE *result, unint64_t *a2)
{
  _BYTE *v3;
  unint64_t v4;
  BOOL v5;
  unint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  char v10;
  uint64_t v11;
  _QWORD *v12;

  v3 = result;
  if (result[16])
  {
    result[16] = 1;
  }
  else
  {
    v4 = *((_QWORD *)result + 1);
    v5 = *a2 >= v4;
    v6 = *a2 - v4;
    result[16] = *a2 < v4;
    if (v5)
    {
      v7 = *(_QWORD **)result;
      if (v6 >= 0x41)
      {
        v8 = v7[65];
        do
        {
          if (v7[66] < (unint64_t)(v8 + 1))
          {
            result = AG::vector<unsigned char,512ul,unsigned long>::reserve_slow(v7, v8 + 1);
            v8 = v7[65];
          }
          v9 = (_QWORD *)v7[64];
          if (!v9)
            v9 = v7;
          *((_BYTE *)v9 + v8) = 127;
          v8 = v7[65] + 1;
          v7[65] = v8;
          v6 -= 64;
        }
        while (v6 > 0x40);
      }
      if (v6)
      {
        v10 = (v6 - 1) | 0x40;
        v11 = v7[65];
        if (v7[66] < (unint64_t)(v11 + 1))
        {
          result = AG::vector<unsigned char,512ul,unsigned long>::reserve_slow(v7, v11 + 1);
          v11 = v7[65];
        }
        v12 = (_QWORD *)v7[64];
        if (!v12)
          v12 = v7;
        *((_BYTE *)v12 + v11) = v10;
        ++v7[65];
      }
    }
  }
  *((_QWORD *)v3 + 1) = *a2;
  return result;
}

uint64_t AG::LayoutDescriptor::length(AG::LayoutDescriptor *this, const unsigned __int8 *a2)
{
  int v2;
  AG::LayoutDescriptor *v3;
  AG::LayoutDescriptor *v4;
  int v5;
  int v6;
  uint64_t v7;
  int v8;
  int v9;
  int v10;

  v2 = 0;
  v3 = this;
  while (1)
  {
    v4 = v3;
    v5 = *(unsigned __int8 *)v3;
    v3 = (AG::LayoutDescriptor *)((char *)v3 + 1);
    v6 = v2;
    v7 = 1;
    switch(v5)
    {
      case 0:
        return v4 - this + 1;
      case 1:
      case 2:
        v7 = 9;
        goto LABEL_8;
      case 3:
LABEL_8:
        v3 = (AG::LayoutDescriptor *)((char *)v4 + v7 + 8);
        continue;
      case 6:
        v3 = (AG::LayoutDescriptor *)((char *)v4 + 9);
        do
        {
          v9 = *(char *)v3;
          v3 = (AG::LayoutDescriptor *)((char *)v3 + 1);
        }
        while (v9 < 0);
        continue;
      case 7:
        v3 = (AG::LayoutDescriptor *)((char *)v4 + 7);
        continue;
      case 8:
        do
        {
          v8 = *((char *)v4 + 1);
          v4 = (AG::LayoutDescriptor *)((char *)v4 + 1);
        }
        while (v8 < 0);
        goto LABEL_6;
      case 9:
      case 10:
      case 11:
LABEL_6:
        v3 = (AG::LayoutDescriptor *)((char *)v4 + 9);
        ++v2;
        continue;
      case 12:
        if (!v2)
          return v4 - this + 1;
        do
        {
          v10 = *(char *)v3;
          v3 = (AG::LayoutDescriptor *)((char *)v3 + 1);
        }
        while (v10 < 0);
        break;
      case 13:
      case 14:
      case 15:
      case 16:
      case 17:
      case 18:
      case 19:
      case 20:
      case 21:
        if (v2)
          continue;
        return v4 - this + 1;
      case 22:
        --v2;
        if (v6)
          continue;
        return v4 - this + 1;
      default:
        continue;
    }
  }
}

void *AG::vector<unsigned char,512ul,unsigned long>::reserve_slow(void *__dst, size_t a2)
{
  size_t v3;
  void *result;

  if (*((_QWORD *)__dst + 66) + (*((_QWORD *)__dst + 66) >> 1) <= a2)
    v3 = a2;
  else
    v3 = *((_QWORD *)__dst + 66) + (*((_QWORD *)__dst + 66) >> 1);
  result = AG::details::realloc_vector<unsigned long,1ul>(*((void **)__dst + 64), __dst, 0x200uLL, (size_t *)__dst + 66, v3);
  *((_QWORD *)__dst + 64) = result;
  return result;
}

void *AG::details::realloc_vector<unsigned long,1ul>(void *__src, void *__dst, size_t a3, size_t *a4, size_t __n)
{
  void *v7;
  size_t v8;
  size_t v9;
  void *v10;
  const char *v11;
  void *v12;

  v7 = __src;
  if (__n <= a3)
  {
    if (__src)
    {
      v9 = a3;
      memcpy(__dst, __src, __n);
      free(v7);
      v12 = 0;
LABEL_8:
      *a4 = v9;
      return v12;
    }
  }
  else
  {
    v8 = malloc_good_size(__n);
    if (v8 != *a4)
    {
      v9 = v8;
      v10 = malloc_type_realloc(v7, v8, 0x8734B07FuLL);
      if (!v10)
        AG::precondition_failure((AG *)"allocation failure", v11);
      v12 = v10;
      if (!v7)
        memcpy(v10, __dst, *a4);
      goto LABEL_8;
    }
  }
  return v7;
}

uint64_t AGGraphGetFlags(uint64_t a1, const char *a2)
{
  if ((a1 & 3) != 0)
    AG::precondition_failure((AG *)"non-direct attribute id: %u", a2, a1);
  return *(unsigned __int8 *)(AG::data::_shared_table_bytes + a1 + 6);
}

BOOL static WeakAttribute.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return a1 == a2;
}

uint64_t AGTupleElementOffset(_QWORD *a1, const char *a2)
{
  if (*a1 == 769)
  {
    if (a1[1] > (unint64_t)a2)
      return a1[2 * (_QWORD)a2 + 4];
LABEL_7:
    AG::precondition_failure((AG *)"index out of range: %d", a2, a2);
  }
  if (a2)
    goto LABEL_7;
  return 0;
}

uint64_t AGGraphGetAttributeInfo(uint64_t a1, const char *a2)
{
  uint64_t v2;
  uint64_t v3;
  char *v5;

  if ((a1 & 3) != 0)
    AG::precondition_failure((AG *)"non-direct attribute id: %u", a2, a1);
  if (dword_1ECEF30D0 <= (a1 & 0xFFFFFFFC))
    AG::precondition_failure((AG *)"invalid data offset: %u", a2, a1 & 0xFFFFFFFC);
  v2 = *(_QWORD *)(AG::data::_shared_table_bytes + (a1 & 0xFFFFFE00));
  if (!v2)
    AG::precondition_failure((AG *)"no graph: %u", a2, a1);
  v3 = *(_QWORD *)(v2 + 40);
  v5 = 0;
  return AG::Graph::attribute_ref(v3, a1, &v5);
}

uint64_t AG::Graph::attribute_ref(uint64_t a1, unsigned int a2, _QWORD *a3)
{
  unsigned int *v3;
  uint64_t result;
  _QWORD *v5;

  v3 = (unsigned int *)(AG::data::_shared_table_bytes + a2);
  result = *(_QWORD *)(*(_QWORD *)(a1 + 128) + (((unint64_t)*v3 >> 5) & 0x7FFFFF8));
  if (a3)
  {
    v5 = (_QWORD *)((char *)v3 + *(unsigned int *)(result + 44));
    if ((*((_BYTE *)v3 + 7) & 1) != 0)
      v5 = (_QWORD *)*v5;
    *a3 = v5;
  }
  return result;
}

uint64_t util::UntypedTable::remove_ptr(util::UntypedTable *this, void *a2)
{
  _QWORD *v4;
  _QWORD *v5;
  void (*v6)(_QWORD);
  void (*v7)(_QWORD);

  if (*((_QWORD *)this + 7))
  {
    v4 = (_QWORD *)(*((_QWORD *)this + 6) + 8 * (*((_QWORD *)this + 8) & (*(uint64_t (**)(void *))this)(a2)));
    while (1)
    {
      v5 = v4;
      v4 = (_QWORD *)*v4;
      if (!v4)
        break;
      if ((void *)v4[1] == a2)
      {
        *v5 = *v4;
        v6 = (void (*)(_QWORD))*((_QWORD *)this + 2);
        if (v6)
          v6(v4[1]);
        v7 = (void (*)(_QWORD))*((_QWORD *)this + 3);
        if (v7)
          v7(v4[2]);
        *v4 = *((_QWORD *)this + 5);
        *((_QWORD *)this + 5) = v4;
        --*((_QWORD *)this + 7);
        return 1;
      }
    }
  }
  return 0;
}

uint64_t AG::indirect_pointer_vector<AG::Subgraph,unsigned long>::push_back(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  size_t v7;
  _QWORD *v8;

  v3 = *(_QWORD *)result;
  if ((*(_QWORD *)result & 1) != 0)
  {
    v5 = (_QWORD *)(v3 & 0xFFFFFFFFFFFFFFFELL);
    v6 = *(_QWORD *)((v3 & 0xFFFFFFFFFFFFFFFELL) + 40);
    v7 = v6 + 1;
    if (v5[6] < (unint64_t)(v6 + 1))
    {
      result = (uint64_t)AG::vector<AG::Subgraph *,4ul,unsigned long>::reserve_slow(v5, v7);
      v6 = v5[5];
      v7 = v6 + 1;
    }
    v8 = (_QWORD *)v5[4];
    if (!v8)
      v8 = v5;
    v8[v6] = a2;
    v5[5] = v7;
  }
  else
  {
    v4 = (_QWORD *)result;
    if (v3)
    {
      result = operator new();
      *(_QWORD *)(result + 48) = 4;
      *(_OWORD *)(result + 32) = xmmword_1AB962CD0;
      *(_QWORD *)result = *v4;
      *(_QWORD *)(result + 8) = a2;
      *v4 = result | 1;
    }
    else
    {
      *(_QWORD *)result = a2;
    }
  }
  return result;
}

void AGSubgraphApply(uint64_t a1, int a2, void (*a3)(void))
{
  unint64_t v3;

  v3 = *(_QWORD *)(a1 + 16);
  if (v3)
    AG::Subgraph::apply(v3, a2, a3);
}

uint64_t AGTupleCount(_QWORD *a1)
{
  if (*a1 == 769)
    return a1[1];
  else
    return 1;
}

void type metadata accessor for AnyWeakAttribute(uint64_t a1)
{
  sub_1AB9337A8(a1, &qword_1ECEF2CB8);
}

void *AG::vector<AG::ConstOutputEdgeArrayRef,64ul,unsigned long>::reserve_slow(void *__dst, size_t a2)
{
  size_t v3;
  void *result;

  if (*((_QWORD *)__dst + 130) + (*((_QWORD *)__dst + 130) >> 1) <= a2)
    v3 = a2;
  else
    v3 = *((_QWORD *)__dst + 130) + (*((_QWORD *)__dst + 130) >> 1);
  result = AG::details::realloc_vector<unsigned long,16ul>(*((void **)__dst + 128), __dst, 0x40uLL, (size_t *)__dst + 130, v3);
  *((_QWORD *)__dst + 128) = result;
  return result;
}

void *AG::vector<std::pair<char const*,unsigned long>,8ul,unsigned long>::reserve_slow(void *__dst, size_t a2)
{
  size_t v3;
  void *result;

  if (*((_QWORD *)__dst + 18) + (*((_QWORD *)__dst + 18) >> 1) <= a2)
    v3 = a2;
  else
    v3 = *((_QWORD *)__dst + 18) + (*((_QWORD *)__dst + 18) >> 1);
  result = AG::details::realloc_vector<unsigned long,16ul>(*((void **)__dst + 16), __dst, 8uLL, (size_t *)__dst + 18, v3);
  *((_QWORD *)__dst + 16) = result;
  return result;
}

void AG::`anonymous namespace'::TypeDescriptorCache::drain_queue(AG::_anonymous_namespace_::TypeDescriptorCache *this, void *a2)
{
  double v3;
  AG *v4;
  uint64_t v5;
  int v6;
  char *v7;
  unint64_t v8;
  int v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  int v17;
  char *v18;
  unint64_t v19;
  uint64_t *v20;
  BOOL v21;
  void *layout;
  AG::_anonymous_namespace_ *v23;
  double v24;
  void *v25[2];

  v3 = AG::current_time(this);
  os_unfair_lock_lock((os_unfair_lock_t)this);
  v5 = *((_QWORD *)this + 28);
  if (v5)
  {
    v6 = 0;
    do
    {
      if (*((_QWORD *)this + 27))
        v7 = (char *)*((_QWORD *)this + 27);
      else
        v7 = (char *)this + 88;
      v8 = *(_QWORD *)v7;
      v9 = *((_DWORD *)v7 + 2);
      if (v5 >= 2)
      {
        v10 = 0;
        v11 = &v7[16 * v5];
        *(_OWORD *)v25 = *(_OWORD *)v7;
        v12 = v7;
        do
        {
          v13 = &v12[16 * v10 + 16];
          v14 = (2 * v10) | 1;
          v15 = 2 * v10 + 2;
          if (v15 < v5)
          {
            v16 = *((_DWORD *)v13 + 3);
            v17 = *((_DWORD *)v13 + 7);
            v13 += 16 * (v16 < v17);
            if (v16 < v17)
              v14 = v15;
          }
          *(_OWORD *)v12 = *(_OWORD *)v13;
          v12 = v13;
          v10 = v14;
        }
        while (v14 <= (uint64_t)((unint64_t)(v5 - 2) >> 1));
        v18 = v11 - 16;
        if (v13 == v11 - 16)
        {
          *(_OWORD *)v13 = *(_OWORD *)v25;
        }
        else
        {
          *(_OWORD *)v13 = *(_OWORD *)v18;
          *(_OWORD *)v18 = *(_OWORD *)v25;
        }
        v5 = *((_QWORD *)this + 28);
      }
      *((_QWORD *)this + 28) = v5 - 1;
      v19 = ~v8 & 0xFFFFFFFFFFFFFFFCLL;
      if (!BYTE2(v9))
        v19 = v8;
      v20 = (uint64_t *)(v19 | (unsigned __int16)v9);
      v25[0] = 0;
      v4 = (AG *)util::UntypedTable::lookup((AG::_anonymous_namespace_::TypeDescriptorCache *)((char *)this + 8), v20, v25);
      if (v4)
        v21 = 1;
      else
        v21 = v25[0] == 0;
      if (!v21)
      {
        os_unfair_lock_unlock((os_unfair_lock_t)this);
        layout = (void *)AG::LayoutDescriptor::make_layout((AG::swift::metadata *)v8, (unsigned __int16)v9, v9 << 8 >> 24);
        os_unfair_lock_lock((os_unfair_lock_t)this);
        v4 = (AG *)util::UntypedTable::insert((AG::_anonymous_namespace_::TypeDescriptorCache *)((char *)this + 8), v20, layout);
        ++v6;
      }
      v5 = *((_QWORD *)this + 28);
    }
    while (v5);
  }
  else
  {
    v6 = 0;
  }
  if (*((_QWORD *)this + 29))
  {
    v4 = (AG *)AG::details::realloc_vector<unsigned long,16ul>(*((void **)this + 27), (char *)this + 88, 8uLL, (size_t *)this + 29, 0);
    *((_QWORD *)this + 27) = v4;
  }
  *((_BYTE *)this + 248) = 0;
  v24 = AG::current_time(v4) - v3;
    fprintf((FILE *)*MEMORY[0x1E0C80C10], "## bg queue ran for %g ms, created %u layouts (%u extant). Totals: %g ms async, %g ms sync. %u hits, %u misses.\n", v24 * 1000.0, v6, *((_QWORD *)this + 8), *((double *)this + 38) * 1000.0, *((double *)this + 39) * 1000.0, *((_QWORD *)this + 36), *((_QWORD *)this + 37));
  *((double *)this + 38) = v24 + *((double *)this + 38);
  os_unfair_lock_unlock((os_unfair_lock_t)this);
}

void sub_1AB93B184(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void *AG::details::realloc_vector<unsigned long,16ul>(void *__src, void *__dst, size_t a3, size_t *a4, size_t a5)
{
  void *v7;
  size_t v8;
  size_t v9;
  void *v10;
  const char *v11;
  void *v12;

  v7 = __src;
  if (a5 <= a3)
  {
    if (__src)
    {
      v9 = a3;
      memcpy(__dst, __src, 16 * a5);
      free(v7);
      v12 = 0;
LABEL_8:
      *a4 = v9;
      return v12;
    }
  }
  else
  {
    v8 = malloc_good_size(16 * a5);
    v9 = v8 >> 4;
    if (v8 >> 4 != *a4)
    {
      v10 = malloc_type_realloc(v7, v8, 0x8734B07FuLL);
      if (!v10)
        AG::precondition_failure((AG *)"allocation failure", v11);
      v12 = v10;
      if (!v7)
        memcpy(v10, __dst, 16 * *a4);
      goto LABEL_8;
    }
  }
  return v7;
}

_QWORD *AGTupleElementType(_QWORD *result, const char *a2)
{
  if (*result == 769)
  {
    if (result[1] > (unint64_t)a2)
      return (_QWORD *)result[2 * (_QWORD)a2 + 3];
LABEL_5:
    AG::precondition_failure((AG *)"index out of range: %d", a2, a2);
  }
  if (a2)
    goto LABEL_5;
  return result;
}

void AGTupleWithBuffer(uint64_t a1, uint64_t a2, void (*a3)(uint64_t, char *))
{
  uint64_t v5;
  size_t v6;
  char *v7;
  const char *v8;
  _QWORD v9[2];

  v9[1] = *MEMORY[0x1E0C80C00];
  v5 = *(_QWORD *)(*(_QWORD *)(a1 - 8) + 72);
  v6 = v5 * a2;
  if ((unint64_t)(v5 * a2) > 0x1000)
  {
    v7 = (char *)malloc_type_malloc(v5 * a2, 0x100004077774924uLL);
    if (!v7)
      AG::precondition_failure((AG *)"memory allocation failure", v8);
  }
  else
  {
    MEMORY[0x1E0C80A78](a1);
    v7 = (char *)v9 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
    bzero(v7, v6);
  }
  a3(a1, v7);
  if (v6 > 0x1000)
    free(v7);
}

uint64_t AGGraphCurrentAttributeWasModified()
{
  uint64_t result;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  result = 0;
  v1 = AG::Graph::_current_update_key;
  v2 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v1);
  if ((v2 & 1) == 0)
  {
    v3 = v2 & 0xFFFFFFFFFFFFFFFELL;
    if (v3)
    {
      v4 = v3 + 32;
      v6 = *(_QWORD *)(v3 + 96);
      v5 = *(_QWORD *)(v3 + 104);
      if (v6)
        v4 = v6;
      v7 = *(unsigned int *)(v4 + 8 * v5 - 8);
      if ((_DWORD)v7)
        return (*(unsigned __int8 *)(AG::data::_shared_table_bytes + v7 + 7) >> 6) & 1;
      else
        return 0;
    }
  }
  return result;
}

uint64_t AGTypeApplyFields2(AG::swift::metadata *a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD v8[2];
  int v9;
  _QWORD v10[2];

  v4 = 0;
  v10[0] = a3;
  v10[1] = a4;
  v8[0] = &off_1E5A606E0;
  v8[1] = v10;
  v9 = a2;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > 0x7FFuLL)
    v5 = 0;
  if (v5 <= 512)
  {
    if (!v5)
    {
      if ((a2 & 1) != 0)
        return AG::swift::metadata::visit_heap(a1, (AG::swift::metadata_visitor *)v8, 1);
      return 0;
    }
    if (v5 != 512)
      return v4;
LABEL_11:
    if ((a2 & 5) == 0)
      return AG::swift::metadata::visit(a1, (AG::swift::metadata_visitor *)v8);
    return 0;
  }
  if ((unint64_t)(v5 - 513) < 2)
  {
    if ((a2 & 4) == 0)
      return 0;
    return AG::swift::metadata::visit(a1, (AG::swift::metadata_visitor *)v8);
  }
  if (v5 == 769)
    goto LABEL_11;
  return v4;
}

uint64_t AGTypeApplyFields2::Visitor::unknown_result(AGTypeApplyFields2::Visitor *this)
{
  return (*((unsigned __int8 *)this + 16) >> 1) & 1;
}

_BYTE *AGGraphSetNeedsUpdate(uint64_t a1, const char *a2)
{
  if (*(_BYTE *)(a1 + 88))
    AG::precondition_failure((AG *)"invalidated graph", a2);
  return AG::Graph::Context::set_needs_update((_BYTE *)(a1 + 16));
}

uint64_t AGGraphSetContext(uint64_t result, const char *a2)
{
  if (*(_BYTE *)(result + 88))
    AG::precondition_failure((AG *)"invalidated graph", a2);
  *(_QWORD *)(result + 24) = a2;
  return result;
}

void AGGraphSetIndirectDependency(uint64_t a1, const char *a2)
{
  uint64_t v2;

  if ((a1 & 3) != 1 || (v2 = *(_QWORD *)(AG::data::_shared_table_bytes + (a1 & 0xFFFFFE00))) == 0)
    AG::precondition_failure((AG *)"invalid indirect attribute: %u", a2, a1);
  AG::Graph::indirect_attribute_set_dependency(*(_QWORD *)(v2 + 40), (const char *)(a1 & 0xFFFFFFFC), a2);
}

void AGGraphSetIndirectAttribute(uint64_t a1, const char *a2)
{
  const char *v2;
  uint64_t v3;
  uint64_t v4;

  if ((a1 & 3) != 1
    || (v2 = (const char *)(a1 & 0xFFFFFFFC),
        (v3 = *(_QWORD *)(AG::data::_shared_table_bytes + (a1 & 0xFFFFFE00))) == 0))
  {
    AG::precondition_failure((AG *)"invalid indirect attribute: %u", a2, a1);
  }
  v4 = *(_QWORD *)(v3 + 40);
  if ((_DWORD)a2 == 2)
    AG::Graph::indirect_attribute_reset(v4, v2, 0);
  else
    AG::Graph::indirect_attribute_set(v4, v2, a2);
}

uint64_t AGGraphAddInput(char *a1, const char *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  if ((a1 & 3) != 0)
    AG::precondition_failure((AG *)"non-direct attribute id: %u", a2, a1);
  if (dword_1ECEF30D0 <= (a1 & 0xFFFFFFFC))
    AG::precondition_failure((AG *)"invalid data offset: %u", a2, a1 & 0xFFFFFFFC);
  v3 = *(_QWORD *)(AG::data::_shared_table_bytes + (a1 & 0xFFFFFE00));
  if (!v3)
    AG::precondition_failure((AG *)"no graph: %u", a2, a1);
  if (dword_1ECEF30D0 <= (a2 & 0xFFFFFFFC))
    AG::precondition_failure((AG *)"invalid data offset: %u", a2, a2 & 0xFFFFFFFC);
  v4 = *(_QWORD *)(AG::data::_shared_table_bytes + (a2 & 0xFFFFFE00));
  if (!v4 || (v5 = *(_QWORD *)(v3 + 40), *(_QWORD *)(v4 + 40) != v5))
    AG::precondition_failure((AG *)"accessing attribute in a different namespace: %u", a2, a2);
  return AG::Graph::add_input(v5, (const char *)a1, a2, 0, a3);
}

uint64_t AGGraphGetAttributeSubgraph(int a1, const char *a2)
{
  AG::Subgraph *v2;

  v2 = *(AG::Subgraph **)(AG::data::_shared_table_bytes + (a1 & 0xFFFFFE00));
  if (!v2)
    AG::precondition_failure((AG *)"internal error", a2);
  return AG::Subgraph::to_cf(v2);
}

void AGGraphInvalidate(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 88))
  {
    AG::Graph::Context::~Context((AG::Graph::Context *)(a1 + 16));
    *(_BYTE *)(a1 + 88) = 1;
  }
}

void `anonymous namespace'::subgraph_type_id(void)::$_0::__invoke<void const*>(uint64_t a1)
{
  AG::Subgraph *v1;

  v1 = *(AG::Subgraph **)(a1 + 16);
  if (v1)
  {
    AG::Subgraph::clear_object(*(AG::Subgraph **)(a1 + 16));
    AG::Subgraph::invalidate_and_delete_(v1, 0);
  }
}

uint64_t AG::Graph::remove_all_inputs(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;

  v4 = AG::data::_shared_table_bytes + a2;
  v5 = *(unsigned int *)(v4 + 12);
  if (v5 >= 0x20)
  {
    v6 = (v5 >> 5) - 1;
    v7 = (unsigned int *)(5 * (v5 >> 5) + *(unsigned int *)(v4 + 16) + AG::data::_shared_table_bytes - 5);
    do
    {
      v8 = *v7;
      v7 = (unsigned int *)((char *)v7 - 5);
      AG::Graph::remove_input_dependencies(a1, a2, v8);
      AG::Graph::remove_input_edge(a1, a2, v4, v6--);
    }
    while (v6 != -1);
  }
  return AG::Graph::all_inputs_removed(a1, a2);
}

void AG::Graph::remove_input(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v6;

  v6 = AG::data::_shared_table_bytes + a2;
  AG::Graph::remove_input_dependencies(a1, a2, *(_DWORD *)(AG::data::_shared_table_bytes + *(unsigned int *)(v6 + 16) + 5 * a3));
  AG::Graph::remove_input_edge(a1, a2, v6, a3);
}

void AG::Graph::indirect_attribute_set(uint64_t a1, const char *a2, unsigned int a3)
{
  unsigned int v3;
  unsigned int v4;
  int v6;
  int v7;
  unsigned int *v8;
  unsigned int v9;
  unint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  int v18;
  unsigned int v19;

  v3 = a3;
  v4 = a2;
  v19 = a3;
  if ((*(_BYTE *)(AG::data::_shared_table_bytes + a2 + 8) & 1) == 0)
    AG::precondition_failure((AG *)"not an indirect attribute: %u", a2, a2 | 1);
  if (*(_QWORD *)(*(_QWORD *)(AG::data::_shared_table_bytes + (a2 & 0xFFFFFE00)) + 40) != *(_QWORD *)(*(_QWORD *)(AG::data::_shared_table_bytes + (a3 & 0xFFFFFE00)) + 40))
    AG::precondition_failure((AG *)"attribute references can't cross graph namespaces", a2);
  v6 = *(_DWORD *)(a1 + 232);
  if (v6)
  {
    v14 = v6 - 1;
    do
    {
      v15 = v14;
      v16 = *(_QWORD *)(*(_QWORD *)(a1 + 224) + 8 * v14);
      (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v16 + 296))(v16, v4, v3);
      --v14;
    }
    while (v15);
  }
  if ((v3 & 3) != 0)
  {
    v17 = AG::AttributeID::resolve_slow((AG::AttributeID *)&v19, (const char *)4);
    v7 = v18;
    v3 = v17;
  }
  else
  {
    v7 = 0;
  }
  v19 = v3;
  v8 = (unsigned int *)(AG::data::_shared_table_bytes + v4);
  v9 = *v8;
  if (v3 == *v8)
  {
    if (v7 == v8[2] >> 2)
      return;
  }
  else
  {
    AG::Graph::remove_input_dependencies(a1, v4 & 0xFFFFFFFE | 1, *v8);
    v3 = v19;
  }
  if (v3 < 4)
    v10 = 0;
  else
    v10 = (unint64_t)(*(_DWORD *)(*(_QWORD *)(AG::data::_shared_table_bytes + (v3 & 0xFFFFFE00)) + 24) & 0x7FFFFFFF) << 32;
  AG::IndirectNode::modify((uint64_t)v8, v10 | v3, v7);
  v11 = v19;
  v12 = *(_QWORD *)(AG::data::_shared_table_bytes + (v19 & 0xFFFFFE00));
  if (v12)
    v12 = *(_QWORD *)(v12 + 48);
  v13 = *(_QWORD *)(AG::data::_shared_table_bytes + (v4 & 0xFFFFFE00));
  if (v13)
    v13 = *(_QWORD *)(v13 + 48);
  v8[2] = v8[2] & 0xFFFFFFFD | (2 * (v12 != v13));
  if (v11 != v9)
    AG::Graph::add_input_dependencies(a1, v4 & 0xFFFFFFFE | 1, v19);
  AG::Graph::mark_changed(a1);
  AG::Graph::propagate_dirty(a1);
}

uint64_t AG::Graph::remove_input_dependencies(uint64_t a1, int a2, unsigned int a3)
{
  uint64_t v3;
  unsigned int v6;

  LODWORD(v3) = a2;
  v6 = a3;
  if ((a3 & 3) != 0)
    a3 = AG::AttributeID::resolve_slow((AG::AttributeID *)&v6, 4u);
  if ((a3 & 3) != 0)
  {
    v3 = v3;
    if ((a3 & 3) == 1)
      AG::Graph::remove_output_edge<AG::MutableIndirectNode>(a1, a3 & 0xFFFFFFFC, v3);
  }
  else
  {
    v3 = v3;
    AG::Graph::remove_output_edge<AG::Node>(a1, a3, v3);
  }
  return AG::Graph::update_main_refs(a1, v3);
}

void AG::Subgraph::invalidate_now(AG::Subgraph *this, AG::Graph *a2)
{
  int v3;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  size_t v11;
  size_t v12;
  _BYTE *v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  unint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  unsigned int v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t *v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t i;
  uint64_t v46;
  _BYTE *v47;
  _BYTE *v48;
  unsigned int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  const char *v54;
  int v55;
  uint64_t v56;
  int v57;
  _BYTE *v58;
  _BYTE *v59;
  unsigned int v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  int v64;
  uint64_t v65;
  int v66;
  uint64_t v67;
  int v68;
  AG::Subgraph **v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  AG::Subgraph *v74;
  _QWORD v75[16];
  void *v76;
  uint64_t v77;
  uint64_t v78;
  _BYTE __dst[128];
  void *v80;
  size_t v81;
  unint64_t v82;
  uint64_t v83;

  v83 = *MEMORY[0x1E0C80C00];
  *((_BYTE *)a2 + 408) = 1;
  v80 = 0;
  v81 = 0;
  v82 = 16;
  v76 = 0;
  v77 = 0;
  v78 = 16;
  v74 = this;
  v3 = *((unsigned __int8 *)this + 104);
  if (v3 != 2)
  {
    *((_BYTE *)this + 104) = 2;
    if (!v3)
    {
      v5 = *((unsigned int *)a2 + 58);
      if ((_DWORD)v5)
      {
        v71 = v5 - 1;
        do
        {
          v72 = *(_QWORD *)(*((_QWORD *)a2 + 28) + 8 * v71);
          (*(void (**)(uint64_t, AG::Subgraph *))(*(_QWORD *)v72 + 192))(v72, this);
        }
        while ((unint64_t)v71--);
      }
    }
    AG::Subgraph::clear_object(this);
    std::stack<AG::Subgraph *,AG::vector<AG::Subgraph *,16ul,unsigned long>>::push[abi:ne180100](v75, &v74);
    v6 = v77;
    if (v77)
    {
      while (1)
      {
        v7 = v76;
        if (!v76)
          v7 = v75;
        v8 = v6 - 1;
        v9 = v7[v8];
        v77 = v8;
        v10 = *((unsigned int *)a2 + 58);
        if ((_DWORD)v10)
        {
          for (i = 8 * v10 - 8; i != -8; i -= 8)
          {
            v46 = *(_QWORD *)(*((_QWORD *)a2 + 28) + i);
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v46 + 200))(v46, v9);
          }
        }
        AG::Subgraph::notify_observers(v9);
        AG::Graph::remove_subgraph(a2, (AG::Subgraph *)v9);
        *(_DWORD *)(v9 + 24) |= 0x80000000;
        v11 = v81;
        v12 = v81 + 1;
        if (v82 < v81 + 1)
        {
          AG::vector<AG::Subgraph *,16ul,unsigned long>::reserve_slow(__dst, v12);
          v11 = v81;
          v12 = v81 + 1;
        }
        v13 = v80;
        if (!v80)
          v13 = __dst;
        *(_QWORD *)&v13[8 * v11] = v9;
        v81 = v12;
        v14 = *(unsigned int *)(v9 + 72);
        if ((_DWORD)v14)
          break;
LABEL_54:
        *(_DWORD *)(v9 + 72) = 0;
        v6 = v77;
        if (!v77)
          goto LABEL_59;
      }
      v15 = *(_QWORD **)(v9 + 64);
      v16 = &v15[v14];
      while (1)
      {
        v17 = *v15 & 0xFFFFFFFFFFFFFFFCLL;
        v18 = (uint64_t *)(v17 + 56);
        v19 = *(_QWORD *)(v17 + 56);
        if (*(_QWORD *)(v17 + 48) == *((_QWORD *)this + 6))
        {
          if ((v19 & 1) != 0)
          {
            v27 = v19 & 0xFFFFFFFFFFFFFFFELL;
            v21 = *(uint64_t **)(v27 + 32);
            if (!v21)
              v21 = (uint64_t *)v27;
            v20 = &v21[*(_QWORD *)(v27 + 40)];
          }
          else
          {
            v20 = &v18[v19 != 0];
            v21 = (uint64_t *)(v17 + 56);
          }
          while (v21 != v20)
          {
            v28 = *v21;
            if (*v21 != v9)
            {
              v29 = *(unsigned int *)(v28 + 72);
              if ((_DWORD)v29)
              {
                v30 = 8 * v29;
                v31 = *(_QWORD **)(v28 + 64);
                while ((*v31 & 0xFFFFFFFFFFFFFFFCLL) != v17)
                {
                  ++v31;
                  v30 -= 8;
                  if (!v30)
                    goto LABEL_38;
                }
                v32 = v29 - 1;
                *v31 = *(_QWORD *)(*(_QWORD *)(v28 + 64) + 8 * v32);
                *(_DWORD *)(v28 + 72) = v32;
              }
            }
LABEL_38:
            ++v21;
          }
          AG::indirect_pointer_vector<AG::Subgraph,unsigned long>::clear(v18);
          v74 = (AG::Subgraph *)v17;
          v33 = *(unsigned __int8 *)(v17 + 104);
          if (v33 != 2)
          {
            *(_BYTE *)(v17 + 104) = 2;
            if (!v33)
            {
              v34 = *((unsigned int *)a2 + 58);
              if ((_DWORD)v34)
              {
                v42 = v34 - 1;
                do
                {
                  v43 = *(_QWORD *)(*((_QWORD *)a2 + 28) + 8 * v42);
                  (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v43 + 192))(v43, v17);
                }
                while ((unint64_t)v42--);
              }
            }
            AG::Subgraph::clear_object((AG::Subgraph *)v17);
            std::stack<AG::Subgraph *,AG::vector<AG::Subgraph *,16ul,unsigned long>>::push[abi:ne180100](v75, &v74);
          }
          goto LABEL_49;
        }
        v22 = 0;
        v23 = 0;
        v24 = v19 & 0xFFFFFFFFFFFFFFFELL;
        if ((v19 & 1) != 0)
          break;
LABEL_18:
        if (!v23 && v19)
        {
          if (v9 != v19)
            goto LABEL_26;
          v35 = v9;
          v36 = (uint64_t *)(v17 + 56);
          v37 = (uint64_t *)(v17 + 56);
          goto LABEL_45;
        }
LABEL_49:
        if (++v15 == v16)
          goto LABEL_54;
      }
      while (1)
      {
        v25 = *(_QWORD *)(v24 + 40);
        if (v23 >= v25)
          goto LABEL_49;
        v26 = *(_QWORD *)(v24 + 32);
        if (!v26)
          v26 = v19 & 0xFFFFFFFFFFFFFFFELL;
        if (*(_QWORD *)(v26 + 8 * v23) == v9)
          break;
LABEL_26:
        ++v23;
        v22 -= 8;
        if ((v19 & 1) == 0)
          goto LABEL_18;
      }
      v36 = (uint64_t *)(v26 - v22);
      v38 = v26 + 8 * v25;
      v39 = *(_QWORD *)(v38 - 8);
      v37 = (uint64_t *)(v38 - 8);
      v35 = v39;
LABEL_45:
      *v36 = v35;
      *v37 = v9;
      v40 = *v18;
      if ((*v18 & 1) != 0)
        v41 = *(_QWORD *)((v40 & 0xFFFFFFFFFFFFFFFELL) + 40);
      else
        v41 = v40 != 0;
      AG::indirect_pointer_vector<AG::Subgraph,unsigned long>::resize((uint64_t)v18, v41 - 1);
      goto LABEL_49;
    }
  }
LABEL_59:
  if (v80)
    v47 = v80;
  else
    v47 = __dst;
  if (!v81)
    goto LABEL_110;
  v48 = &v47[8 * v81];
  do
  {
    v49 = *(_DWORD *)(*(_QWORD *)v47 + 16);
    if (v49)
    {
      v50 = AG::data::_shared_table_bytes;
      do
      {
        v51 = v49;
        v52 = v50 + v49;
        v53 = *(unsigned __int16 *)(v52 + 20);
        if (*(_WORD *)(v52 + 20))
        {
          do
          {
            v54 = (const char *)(v53 + v51);
            v55 = ((_BYTE)v53 + (_BYTE)v51) & 3;
            if ((((_BYTE)v53 + (_BYTE)v51) & 3) != 0)
            {
              if (v55 == 1)
              {
                v56 = v54 & 0xFFFFFFFC;
                v53 = *(unsigned __int16 *)(AG::data::_shared_table_bytes + v56 + 14);
                AG::Graph::remove_indirect_node((uint64_t)a2, v56);
              }
              else if (v55 == 2)
              {
                v57 = 1;
                goto LABEL_76;
              }
            }
            else
            {
              v53 = *(unsigned __int16 *)(AG::data::_shared_table_bytes + v54 + 4);
              AG::Graph::remove_node((uint64_t)a2, v54);
            }
          }
          while (v53);
          v57 = 0;
LABEL_76:
          v50 = AG::data::_shared_table_bytes;
          if (v57)
            break;
        }
        v49 = *(_DWORD *)(v50 + v51 + 8);
      }
      while (v49);
    }
    v47 += 8;
  }
  while (v47 != v48);
  if (v80)
    v58 = v80;
  else
    v58 = __dst;
  if (!v81)
    goto LABEL_110;
  v59 = &v58[8 * v81];
  do
  {
    v60 = *(_DWORD *)(*(_QWORD *)v58 + 16);
    if (!v60)
      goto LABEL_101;
    v61 = AG::data::_shared_table_bytes;
    while (2)
    {
      v62 = v60;
      v63 = v61 + v60;
      v64 = *(unsigned __int16 *)(v63 + 20);
      if (!*(_WORD *)(v63 + 20))
        goto LABEL_100;
      do
      {
        while (1)
        {
          v65 = (v64 + v62);
          v66 = ((_BYTE)v64 + (_BYTE)v62) & 3;
          if ((((_BYTE)v64 + (_BYTE)v62) & 3) == 0)
            break;
          if (v66 != 1)
          {
            if (v66 == 2)
            {
              v68 = 1;
              goto LABEL_99;
            }
            goto LABEL_94;
          }
          v64 = *(unsigned __int16 *)(AG::data::_shared_table_bytes + (v65 & 0xFFFFFFFC) + 14);
          if ((v65 & 3) == 0)
          {
            AG::Node::destroy((unsigned int *)(AG::data::_shared_table_bytes + v65), a2);
            goto LABEL_96;
          }
LABEL_94:
          if (!v64)
            goto LABEL_97;
        }
        v67 = AG::data::_shared_table_bytes + v65;
        v64 = *(unsigned __int16 *)(v67 + 4);
        AG::Node::destroy((unsigned int *)v67, a2);
LABEL_96:
        --*((_QWORD *)a2 + 32);
      }
      while (v64);
LABEL_97:
      v68 = 0;
LABEL_99:
      v61 = AG::data::_shared_table_bytes;
      if (!v68)
      {
LABEL_100:
        v60 = *(_DWORD *)(v61 + v62 + 8);
        if (!v60)
          break;
        continue;
      }
      break;
    }
LABEL_101:
    v58 += 8;
  }
  while (v58 != v59);
  if (v80)
    v69 = (AG::Subgraph **)v80;
  else
    v69 = (AG::Subgraph **)__dst;
  if (v81)
  {
    v70 = 8 * v81;
    do
    {
      if (*v69)
      {
        AG::Subgraph::~Subgraph(*v69);
        MEMORY[0x1AF431538]();
      }
      ++v69;
      v70 -= 8;
    }
    while (v70);
  }
LABEL_110:
  *((_BYTE *)a2 + 408) = 0;
  if (v76)
    free(v76);
  if (v80)
    free(v80);
}

void sub_1AB93C0F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,void *a46)
{
  if (a27)
    free(a27);
  if (a46)
    free(a46);
  _Unwind_Resume(exception_object);
}

uint64_t AG::Graph::remove_node(uint64_t a1, const char *a2)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int v5;
  unint64_t v6;
  unsigned int *v7;
  uint64_t v8;
  unsigned int v9;
  unint64_t v10;
  unsigned int *v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t result;

  v2 = AG::data::_shared_table_bytes;
  v3 = AG::data::_shared_table_bytes + a2;
  if ((*(_BYTE *)v3 & 0xC0) != 0)
    AG::precondition_failure((AG *)"deleting updating attribute: %u\n", a2, a2);
  v5 = a2;
  v6 = *(unsigned int *)(v3 + 12);
  if (v6 >= 0x20)
  {
    v7 = (unsigned int *)(AG::data::_shared_table_bytes + *(unsigned int *)(v3 + 16));
    v8 = 5 * (v6 >> 5);
    do
    {
      v9 = *v7;
      v7 = (unsigned int *)((char *)v7 + 5);
      AG::Graph::remove_removed_input(a1, v5, v9);
      v8 -= 5;
    }
    while (v8);
    v2 = AG::data::_shared_table_bytes;
  }
  v10 = *(unsigned int *)(v3 + 20);
  if (v10 >= 0x20)
  {
    v11 = (unsigned int *)(v2 + *(unsigned int *)(v3 + 24));
    v12 = 4 * (v10 >> 5);
    do
    {
      v13 = *v11++;
      AG::Graph::remove_removed_output(a1, v5, v13);
      v12 -= 4;
    }
    while (v12);
  }
  result = *(_QWORD *)(a1 + 304);
  if (result)
    return AG::Graph::ProfileData::remove_node(result, v5, *(_DWORD *)v3 >> 8);
  return result;
}

uint64_t AG::Graph::remove_removed_output(uint64_t a1, int a2, unsigned int a3)
{
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  int *v9;
  unint64_t v10;
  int v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  int v20;
  unsigned int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  int v26;
  BOOL v27;
  int v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  int v36;

  if (*(_BYTE *)(*(_QWORD *)(AG::data::_shared_table_bytes + (a3 & 0xFFFFFE00)) + 104) == 2)
    return 0;
  if ((a3 & 3) != 1)
  {
    if ((a3 & 3) == 0)
    {
      v5 = AG::data::_shared_table_bytes + a3;
      v6 = *(unsigned int *)(v5 + 12);
      if (v6 >= 0x20)
      {
        v7 = 0;
        v9 = (int *)(AG::data::_shared_table_bytes + *(unsigned int *)(v5 + 16));
        v10 = v6 >> 5;
        while (1)
        {
          v12 = *v9;
          v9 = (int *)((char *)v9 + 5);
          v36 = v12;
          if ((AG::AttributeID::traverses(&v36, a2, 4) & 1) != 0)
            break;
          if (v10 == ++v7)
            return 0;
        }
        AG::Graph::remove_input_edge(a1, a3, v5, v7);
        return 1;
      }
    }
    return 0;
  }
  v13 = a3 & 0xFFFFFFFC;
  v14 = AG::data::_shared_table_bytes + v13;
  if (*(_DWORD *)(AG::data::_shared_table_bytes + v13) == a2)
  {
    if ((*(_BYTE *)(v14 + 8) & 1) != 0
      && (v15 = *(_QWORD *)(v14 + 28), (v15 & 0xFFFFFFFC) != 0)
      && ((v16 = HIDWORD(v15),
           v17 = AG::data::table::raw_page_seed((uint64_t)&AG::data::_shared_table_bytes, (const char *)(*(_QWORD *)(v14 + 28) & 0xFFFFFE00)), (v17 & 0xFF00000000) != 0)? (v18 = (_DWORD)v16 == (_DWORD)v17): (v18 = 0), v18))
    {
      v21 = *(_DWORD *)(v14 + 28);
      v19 = *(unsigned int *)(v14 + 32);
      v20 = *(_DWORD *)(v14 + 36);
    }
    else
    {
      v19 = 0;
      v20 = 0;
      v21 = 2;
    }
    v22 = *(_DWORD *)(a1 + 232);
    v23 = v21;
    if (v22)
    {
      v30 = v22 - 1;
      do
      {
        v31 = v30;
        v32 = *(_QWORD *)(*(_QWORD *)(a1 + 224) + 8 * v30);
        (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v32 + 296))(v32, a3 & 0xFFFFFFFC, v23);
        --v30;
      }
      while (v31);
    }
    AG::IndirectNode::modify(v14, v23 | (v19 << 32), v20);
    if (v23 >= 4)
    {
      v24 = AG::data::table::raw_page_seed((uint64_t)&AG::data::_shared_table_bytes, (const char *)(v23 & 0xFFFFFE00));
      if ((v24 & 0xFF00000000) != 0 && (_DWORD)v19 == (_DWORD)v24)
        AG::Graph::add_input_dependencies(a1, a3, v23);
    }
  }
  else
  {
    v26 = *(_DWORD *)(v14 + 16);
    if (v26)
      v27 = v26 == a2;
    else
      v27 = 0;
    if (!v27)
      return 0;
    v29 = *(_DWORD *)(a1 + 232);
    if (v29)
    {
      v33 = v29 - 1;
      do
      {
        v34 = v33;
        v35 = *(_QWORD *)(*(_QWORD *)(a1 + 224) + 8 * v33);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v35 + 304))(v35, v13, 2);
        --v33;
      }
      while (v34);
    }
    *(_DWORD *)(v14 + 16) = 0;
  }
  return 1;
}

void AG::Graph::remove_removed_input(uint64_t a1, int a2, unsigned int a3)
{
  uint64_t v5;
  unsigned int *v6;
  uint64_t v7;

  while ((a3 & 3) == 1)
  {
    v5 = a3 & 0xFFFFFFFC;
    v6 = (unsigned int *)(AG::data::_shared_table_bytes + v5);
    if ((*(_BYTE *)(AG::data::_shared_table_bytes + v5 + 8) & 1) != 0)
    {
      if (*(_BYTE *)(*(_QWORD *)(AG::data::_shared_table_bytes + (a3 & 0xFFFFFE00)) + 104) != 2)
        AG::Graph::remove_output_edge<AG::MutableIndirectNode>(a1, v5, a2);
      return;
    }
    v7 = AG::data::table::raw_page_seed((uint64_t)&AG::data::_shared_table_bytes, (const char *)(*v6 & 0xFFFFFE00));
    if ((v7 & 0xFF00000000) == 0 || v6[1] != (v7 & 0x7FFFFFFF))
      return;
    a3 = *v6;
  }
  if ((a3 & 3) == 0 && *(_BYTE *)(*(_QWORD *)(AG::data::_shared_table_bytes + (a3 & 0xFFFFFE00)) + 104) != 2)
    AG::Graph::remove_output_edge<AG::Node>(a1, a3, a2);
}

unsigned int *AG::Node::destroy(unsigned int *this, AG::Graph *a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;

  v3 = (uint64_t)this;
  v4 = *this;
  v5 = *(_QWORD *)(*((_QWORD *)a2 + 16) + ((v4 >> 5) & 0x7FFFFF8));
  if ((v4 & 0x10) != 0)
  {
    v6 = (_QWORD *)(AG::data::_shared_table_bytes + this[2]);
    if ((*(_BYTE *)(v3 + 7) & 2) != 0)
      v6 = (_QWORD *)*v6;
    this = (unsigned int *)(*(uint64_t (**)(_QWORD *))(*(_QWORD *)(*(_QWORD *)(v5 + 8) - 8) + 8))(v6);
  }
  if (*(_DWORD *)(v3 + 8))
    *((_QWORD *)a2 + 36) -= *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v5 + 8) - 8) + 64);
  if ((*(_BYTE *)v3 & 0x20) != 0)
  {
    if ((*(_BYTE *)(v5 + 40) & 4) != 0)
    {
      v7 = (_QWORD *)(v3 + *(unsigned int *)(v5 + 44));
      if ((*(_BYTE *)(v3 + 7) & 1) != 0)
        v7 = (_QWORD *)*v7;
      (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)(v5 + 32) + 16))(v5, v7);
    }
    v8 = (_QWORD *)(v3 + *(unsigned int *)(v5 + 44));
    if ((*(_BYTE *)(v3 + 7) & 1) != 0)
      v8 = (_QWORD *)*v8;
    return (unsigned int *)(*(uint64_t (**)(_QWORD *))(*(_QWORD *)(*(_QWORD *)v5 - 8) + 8))(v8);
  }
  return this;
}

uint64_t AG::AttributeID::traverses(int *a1, int a2, char a3)
{
  int v3;

  while (1)
  {
    v3 = *a1;
    if ((*a1 & 3) != 1)
      return v3 == a2;
    if ((v3 & 0xFFFFFFFC | 1) == a2)
      break;
    a1 = (int *)(AG::data::_shared_table_bytes + (v3 & 0xFFFFFFFC));
    if ((a3 & 4) != 0 && (a1[2] & 1) != 0)
      return v3 == a2;
  }
  return 1;
}

_QWORD *AG::Graph::remove_output_edge<AG::Node>(uint64_t a1, unsigned int a2, int a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  _DWORD *v7;
  _QWORD *result;

  v3 = AG::data::_shared_table_bytes;
  v4 = AG::data::_shared_table_bytes + a2;
  v5 = *(unsigned int *)(v4 + 20);
  if (v5 < 0x20)
    goto LABEL_8;
  v6 = v5 >> 5;
  v7 = (_DWORD *)(AG::data::_shared_table_bytes + *(unsigned int *)(v4 + 24));
  while (*v7 != a3)
  {
    ++v7;
    if (!--v6)
      goto LABEL_7;
  }
  *v7 = *(_DWORD *)(AG::data::_shared_table_bytes + *(unsigned int *)(v4 + 24) + 4 * (v5 >> 5) - 4);
  LODWORD(v5) = *(_DWORD *)(v4 + 20) - 32;
  *(_DWORD *)(v4 + 20) = v5;
LABEL_7:
  if (v5 <= 0x1F)
  {
LABEL_8:
    if ((*(_BYTE *)(v4 + 7) & 0x10) != 0)
      return AG::Subgraph::cache_insert(*(_QWORD **)(v3 + (a2 & 0xFFFFFE00)), a2);
  }
  return result;
}

void AG::Graph::remove_input_edge(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4)
{
  int v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  int v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;

  v8 = *(_DWORD *)(a1 + 232);
  if (v8)
  {
    v15 = v8 - 1;
    do
    {
      v16 = v15;
      v17 = *(_QWORD *)(*(_QWORD *)(a1 + 224) + 8 * v15);
      (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v17 + 240))(v17, a2, a4);
      --v15;
    }
    while (v16);
  }
  v9 = *(unsigned int *)(a3 + 12);
  if (a4 + 1 < v9 >> 5)
  {
    v10 = AG::data::_shared_table_bytes + 5 * a4 + *(unsigned int *)(a3 + 16);
    v11 = ~a4 + (v9 >> 5);
    v12 = v10;
    do
    {
      v13 = *(_DWORD *)(v12 + 5);
      v12 += 5;
      *(_DWORD *)v10 = v13;
      *(_BYTE *)(v10 + 4) = *(_BYTE *)(v10 + 9);
      v10 = v12;
      --v11;
    }
    while (v11);
    LODWORD(v9) = *(_DWORD *)(a3 + 12);
  }
  v14 = v9 - 32;
  *(_DWORD *)(a3 + 12) = v14;
  if (v14 < 0x20)
    AG::Graph::all_inputs_removed(a1, a2);
  if ((*(_BYTE *)a3 & 0xC0) != 0)
    AG::Graph::reset_update(a1, a2);
}

void AG::Graph::remove_indirect_node(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int *v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v12;
  unsigned int v13;
  unint64_t v14;
  unsigned int *v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  unsigned int *v19;
  unsigned int *v20;
  uint64_t v21;
  unint64_t v22;
  unsigned int *v23;
  unsigned int v24;
  uint64_t v25;
  unsigned int v26;
  size_t v27;
  size_t v28;
  _BYTE *v29;
  void *v30;
  int *v31;
  uint64_t v32;
  _BYTE v33[32];
  void *v34;
  size_t v35;
  unint64_t v36;
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  v4 = AG::data::_shared_table_bytes + a2;
  v5 = *(_DWORD *)v4;
  if ((*(_BYTE *)(v4 + 8) & 1) != 0)
  {
    v12 = a2 & 0xFFFFFFFE | 1;
    AG::Graph::remove_removed_input(a1, v12, v5);
    v13 = *(_DWORD *)(v4 + 16);
    if (v13)
      AG::Graph::remove_removed_input(a1, v12, v13);
    v14 = *(unsigned int *)(v4 + 20);
    if (v14 >= 0x20)
    {
      v15 = (unsigned int *)(AG::data::_shared_table_bytes + *(unsigned int *)(v4 + 24));
      v16 = 4 * (v14 >> 5);
      do
      {
        v17 = *v15++;
        AG::Graph::remove_removed_output(a1, v12, v17);
        v16 -= 4;
      }
      while (v16);
    }
  }
  else
  {
    v6 = AG::data::table::raw_page_seed((uint64_t)&AG::data::_shared_table_bytes, (const char *)(v5 & 0xFFFFFE00));
    if ((v6 & 0xFF00000000) != 0 && *(_DWORD *)(v4 + 4) == (v6 & 0x7FFFFFFF))
    {
      v8 = (unsigned int *)v4;
      while (1)
      {
        v9 = *v8;
        if (*(_BYTE *)(*(_QWORD *)(AG::data::_shared_table_bytes + (v9 & 0xFFFFFE00)) + 104) == 2)
          return;
        if ((*v8 & 3) != 1)
          break;
        v8 = (unsigned int *)(AG::data::_shared_table_bytes + (v9 & 0xFFFFFFFC));
        if ((v8[2] & 1) != 0)
        {
          v19 = v8 + 5;
          v20 = v8 + 6;
LABEL_25:
          v21 = *v20;
          v22 = *v19;
          v34 = 0;
          v35 = 0;
          v36 = 8;
          if (v22 >= 0x20)
          {
            v23 = (unsigned int *)(AG::data::_shared_table_bytes + v21);
            v24 = a2 & 0xFFFFFFFE | 1;
            v25 = 4 * (v22 >> 5);
            do
            {
              v26 = *v23;
              if (AG::Graph::remove_removed_output(a1, v24, *v23))
              {
                v27 = v35;
                v28 = v35 + 1;
                if (v36 < v35 + 1)
                {
                  AG::vector<AG::AttributeID,8ul,unsigned long>::reserve_slow(v33, v28);
                  v27 = v35;
                  v28 = v35 + 1;
                }
                v29 = v34;
                if (!v34)
                  v29 = v33;
                *(_DWORD *)&v29[4 * v27] = v26;
                v35 = v28;
              }
              ++v23;
              v25 -= 4;
            }
            while (v25);
            v30 = v34;
            if (v34)
              v31 = (int *)v34;
            else
              v31 = (int *)v33;
            if (v35)
            {
              v32 = 4 * v35;
              do
              {
                AG::Graph::remove_removed_input(a1, *v31++, v24);
                v32 -= 4;
              }
              while (v32);
              v30 = v34;
            }
            if (v30)
              free(v30);
          }
          return;
        }
        v10 = AG::data::table::raw_page_seed((uint64_t)&AG::data::_shared_table_bytes, (const char *)(*(_DWORD *)v4 & 0xFFFFFE00));
        if ((v10 & 0xFF00000000) == 0 || *(_DWORD *)(v4 + 4) != (v10 & 0x7FFFFFFF))
          return;
      }
      if ((v9 & 3) != 0)
        return;
      v18 = AG::data::_shared_table_bytes + v9;
      v19 = (unsigned int *)(AG::data::_shared_table_bytes + v9 + 20);
      v20 = (unsigned int *)(v18 + 24);
      goto LABEL_25;
    }
  }
}

void sub_1AB93CABC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  if (a13)
    free(a13);
  _Unwind_Resume(exception_object);
}

void AG::Subgraph::clear_object(AG::Subgraph *this)
{
  _QWORD *v2;
  uint64_t v3;
  unint64_t StatusReg;

  v2 = (_QWORD *)*((_QWORD *)this + 4);
  if (v2)
  {
    v2[2] = 0;
    *((_QWORD *)this + 4) = 0;
    v3 = AG::Subgraph::_current_subgraph_key;
    StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    if (*(AG::Subgraph **)(StatusReg + 8 * v3) == this)
    {
      *(_QWORD *)(StatusReg + 8 * v3) = 0;
      CFRelease(v2);
    }
  }
}

void AG::Subgraph::~Subgraph(AG::Subgraph *this)
{
  void *v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  unint64_t v6;
  void *v7;
  void **v8;
  unint64_t v9;

  if (*((_DWORD *)this + 20))
  {
    AG::Subgraph::notify_observers((uint64_t)this);
    v2 = *(void **)(AG::data::_shared_table_bytes + *((unsigned int *)this + 20));
    if (v2)
      free(v2);
  }
  v3 = *((unsigned int *)this + 23);
  if ((_DWORD)v3)
    AG::Subgraph::NodeCache::~NodeCache((AG::Subgraph::NodeCache *)(AG::data::_shared_table_bytes + v3));
  v4 = (void *)*((_QWORD *)this + 8);
  if (v4)
    free(v4);
  v5 = *((_QWORD *)this + 7);
  if ((v5 & 1) != 0)
  {
    v6 = v5 & 0xFFFFFFFFFFFFFFFELL;
    if ((v5 & 0xFFFFFFFFFFFFFFFELL) != 0)
    {
      v7 = *(void **)(v6 + 32);
      if (v7)
        free(v7);
      MEMORY[0x1AF431538](v6, 0x1080C4034992649);
    }
  }
  AG::data::zone::clear(this);
  v8 = *(void ***)this;
  if (*((_DWORD *)this + 2))
  {
    v9 = 0;
    do
    {
      std::unique_ptr<void,AG::data::table::malloc_zone_deleter>::reset[abi:ne180100](v8, 0);
      ++v9;
      ++v8;
    }
    while (v9 < *((unsigned int *)this + 2));
    v8 = *(void ***)this;
  }
  if (v8)
    free(v8);
}

uint64_t AG::Subgraph::notify_observers(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void (**v4)(void);
  uint64_t v5;

  v1 = *(unsigned int *)(this + 80);
  if ((_DWORD)v1)
  {
    v2 = AG::data::_shared_table_bytes + v1;
    v3 = *(_QWORD *)(AG::data::_shared_table_bytes + v1 + 8);
    if (v3)
    {
      v4 = *(void (***)(void))v2;
      v5 = *(_QWORD *)v2 + 24 * v3;
      do
      {
        (*v4)();
        this = swift_release();
        v4 += 3;
      }
      while (v4 != (void (**)(void))v5);
      *(_QWORD *)(v2 + 8) = 0;
    }
  }
  return this;
}

uint64_t *AG::Graph::remove_subgraph(AG::Graph *this, AG::Subgraph *a2)
{
  uint64_t v4;
  AG::Subgraph **v5;
  AG::Subgraph **v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t *v9;
  AG::Subgraph **v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *result;
  AG::Subgraph **v15;
  uint64_t v16;
  AG::Subgraph **v17;
  uint64_t v18;
  int v19;
  AG::Subgraph *v20;

  v4 = *((unsigned int *)this + 88);
  if ((_DWORD)v4)
  {
    v5 = (AG::Subgraph **)*((_QWORD *)this + 43);
    v6 = v5;
    v7 = *((unsigned int *)this + 88);
    do
    {
      v8 = v7 >> 1;
      v9 = (unint64_t *)&v6[v7 >> 1];
      v11 = *v9;
      v10 = (AG::Subgraph **)(v9 + 1);
      v7 += ~(v7 >> 1);
      if (v11 < (unint64_t)a2)
        v6 = v10;
      else
        v7 = v8;
    }
    while (v7);
    if (v6 != &v5[v4] && *v6 == a2)
    {
      v12 = (char *)v6 - (char *)v5;
    }
    else
    {
      v12 = 0;
      while (*(AG::Subgraph **)((char *)v5 + v12) != a2)
      {
        v12 += 8;
        if (8 * v4 == v12)
          goto LABEL_16;
      }
    }
    v13 = (v4 - 1);
    *((_DWORD *)this + 88) = v13;
    if (v13 != v12 >> 3)
      memmove(&v5[v12 >> 3], &v5[(v12 >> 3) + 1], 8 * (v13 - (v12 >> 3)));
  }
LABEL_16:
  result = (uint64_t *)*((_QWORD *)this + 41);
  if (result)
  {
    v20 = a2;
    result = std::__hash_table<std::__hash_value_type<AG::Subgraph *,AG::Graph::TreeDataElement>,std::__unordered_map_hasher<AG::Subgraph *,std::__hash_value_type<AG::Subgraph *,AG::Graph::TreeDataElement>,std::hash<AG::Subgraph *>,std::equal_to<AG::Subgraph *>,true>,std::__unordered_map_equal<AG::Subgraph *,std::__hash_value_type<AG::Subgraph *,AG::Graph::TreeDataElement>,std::equal_to<AG::Subgraph *>,std::hash<AG::Subgraph *>,true>,std::allocator<std::__hash_value_type<AG::Subgraph *,AG::Graph::TreeDataElement>>>::find<AG::Subgraph *>(result, &v20);
    if (result)
      result = (uint64_t *)std::__hash_table<std::__hash_value_type<AG::Subgraph *,AG::Graph::TreeDataElement>,std::__unordered_map_hasher<AG::Subgraph *,std::__hash_value_type<AG::Subgraph *,AG::Graph::TreeDataElement>,std::hash<AG::Subgraph *>,std::equal_to<AG::Subgraph *>,true>,std::__unordered_map_equal<AG::Subgraph *,std::__hash_value_type<AG::Subgraph *,AG::Graph::TreeDataElement>,std::equal_to<AG::Subgraph *>,std::hash<AG::Subgraph *>,true>,std::allocator<std::__hash_value_type<AG::Subgraph *,AG::Graph::TreeDataElement>>>::erase(*((_QWORD **)this + 41), result);
  }
  if ((*((_BYTE *)a2 + 105) & 1) != 0)
  {
    *((_BYTE *)a2 + 105) &= ~1u;
    v15 = (AG::Subgraph **)*((_QWORD *)this + 45);
    v16 = *((unsigned int *)this + 92);
    v17 = v15;
    if ((_DWORD)v16)
    {
      v18 = 8 * v16;
      v17 = (AG::Subgraph **)*((_QWORD *)this + 45);
      while (*v17 != a2)
      {
        ++v17;
        v18 -= 8;
        if (!v18)
        {
          v17 = &v15[v16];
          break;
        }
      }
    }
    v19 = v16 - 1;
    *v17 = v15[v19];
    *((_DWORD *)this + 92) = v19;
  }
  --*((_QWORD *)this + 34);
  return result;
}

void AG::data::zone::clear(AG::data::zone *this)
{
  uint64_t v2;

  os_unfair_lock_lock((os_unfair_lock_t)&unk_1ECEF30C8);
  while (1)
  {
    v2 = *((unsigned int *)this + 4);
    if (!(_DWORD)v2)
      break;
    *((_DWORD *)this + 4) = *(_DWORD *)(AG::data::_shared_table_bytes + v2 + 8);
    AG::data::table::dealloc_page_locked((AG::data::table *)&AG::data::_shared_table_bytes, v2);
  }
  os_unfair_lock_unlock((os_unfair_lock_t)&unk_1ECEF30C8);
}

void sub_1AB93CE34(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock((os_unfair_lock_t)&unk_1ECEF30C8);
  _Unwind_Resume(a1);
}

void AG::data::table::dealloc_page_locked(AG::data::table *this, unsigned int a2)
{
  unsigned int v2;
  int v4;
  unsigned int v5;
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;

  v2 = *(_DWORD *)(*(_QWORD *)this + a2 + 12);
  *((_DWORD *)this + 7) -= v2 >> 9;
  if (v2 >= 0x200)
  {
    v4 = 0;
    v5 = v2 >> 9;
    v6 = (a2 >> 9) - 1;
    if (v5 <= 1)
      v7 = 1;
    else
      v7 = v5;
    do
    {
      v8 = (v6 + v4) >> 6;
      v9 = 1 << (v6 + v4);
      v10 = *((_QWORD *)this + 8);
      v11 = (*(_QWORD *)(v10 + 8 * v8) & ~v9) == 0;
      *(_QWORD *)(v10 + 8 * v8) &= ~v9;
      if (v11)
      {
        AG::data::table::make_pages_reusable(this, v6 + v4, 1);
        if (!v4)
LABEL_10:
          *(_QWORD *)(*((_QWORD *)this + 10) + 8 * v8) &= ~v9;
      }
      else if (!v4)
      {
        goto LABEL_10;
      }
      ++v4;
    }
    while (v7 != v4);
  }
}

uint64_t AG::Graph::all_inputs_removed(uint64_t result, unsigned int a2)
{
  unsigned int *v2;
  unint64_t v3;

  v2 = (unsigned int *)(AG::data::_shared_table_bytes + a2);
  *((_BYTE *)v2 + 7) &= 0xF3u;
  v3 = *v2;
  if ((v3 & 8) != 0 && (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(result + 128) + ((v3 >> 5) & 0x7FFFFF8)) + 40) & 8) == 0)
    *v2 = v3 & 0xFFFFFFF7;
  return result;
}

uint64_t sub_1AB93CF60(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)(a1 + 64) + 8))(a2, *(_QWORD *)(a1 + 56));
}

uint64_t sub_1AB93CF8C()
{
  return swift_release();
}

void AG::Subgraph::NodeCache::~NodeCache(AG::Subgraph::NodeCache *this)
{
  util::UntypedTable *v2;
  char v3;

  v2 = (AG::Subgraph::NodeCache *)((char *)this + 200);
  util::UntypedTable::for_each((uint64_t)this + 200, (void (*)(const void *, const void *, const void *))util::Table<AG::data::ptr<AG::Node>,AG::Subgraph::NodeCache::Item *>::for_each<AG::Subgraph::NodeCache::~()::$_0>(AG::Subgraph::NodeCache::~()::$_0 const&)const::{lambda(void const*,void const*,void const*)#1}::__invoke, &v3);
  util::UntypedTable::~UntypedTable(v2);
  util::UntypedTable::~UntypedTable((AG::Subgraph::NodeCache *)((char *)this + 120));
  util::UntypedTable::~UntypedTable((AG::Subgraph::NodeCache *)((char *)this + 40));
  util::Heap::reset((AG::Subgraph::NodeCache *)((char *)this + 8), 0, 0);
}

void util::UntypedTable::~UntypedTable(util::UntypedTable *this)
{
  unint64_t v2;
  int v3;
  _QWORD *i;
  void (*v5)(_QWORD);
  void (*v6)(_QWORD);
  uint64_t v7;

  if ((*((_QWORD *)this + 2) || *((_QWORD *)this + 3)) && *((_QWORD *)this + 7))
  {
    v2 = 0;
    v3 = *((_DWORD *)this + 18);
    do
    {
      for (i = *(_QWORD **)(*((_QWORD *)this + 6) + 8 * v2); i; i = (_QWORD *)*i)
      {
        v5 = (void (*)(_QWORD))*((_QWORD *)this + 2);
        if (v5)
          v5(i[1]);
        v6 = (void (*)(_QWORD))*((_QWORD *)this + 3);
        if (v6)
          v6(i[2]);
      }
      ++v2;
    }
    while (!(v2 >> v3));
  }
  if (*((_DWORD *)this + 18) >= 5u)
    free(*((void **)this + 6));
  if (*((_BYTE *)this + 76))
  {
    v7 = *((_QWORD *)this + 4);
    if (v7)
    {
      util::Heap::reset(*((util::Heap **)this + 4), 0, 0);
      MEMORY[0x1AF431538](v7, 0x1030C4075AECAACLL);
    }
  }
}

void AG::Graph::Context::~Context(void **this)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  unsigned __int8 *v6;
  int v7;
  uint64_t v8;
  AG::Subgraph **v9;
  uint64_t v10;
  AG::Graph *v11;
  int v12;
  uint64_t i;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;

  v2 = *this;
  v3 = *((unsigned int *)*this + 58);
  if ((_DWORD)v3)
  {
    for (i = 8 * v3 - 8; i != -8; i -= 8)
    {
      v14 = *(_QWORD *)(v2[28] + i);
      (*(void (**)(uint64_t, void **))(*(_QWORD *)v14 + 168))(v14, this);
    }
    v2 = *this;
  }
  if (util::UntypedTable::remove((util::UntypedTable *)(v2 + 18), this[2]) && this[7] != (void *)-1)
  {
    v4 = *this;
    v5 = (uint64_t)*this + 144;
    v15 = &v16;
    v16 = -1;
    util::UntypedTable::for_each(v5, (void (*)(const void *, const void *, const void *))util::Table<unsigned long,AG::Graph::Context *>::for_each<AG::Graph::update_deadline(void)::$_0>(AG::Graph::update_deadline(void)::$_0 const&)const::{lambda(void const*,void const*,void const*)#1}::__invoke, &v15);
    v4[54] = v16;
  }
  v6 = (unsigned __int8 *)*this;
  if (*((_DWORD *)*this + 103) != 1)
  {
    v7 = v6[408];
    v6[408] = 1;
    v8 = *((unsigned int *)v6 + 88);
    if ((_DWORD)v8)
    {
      v9 = (AG::Subgraph **)*((_QWORD *)v6 + 43);
      v10 = 8 * v8;
      do
      {
        if (*((void **)*v9 + 6) == this[2])
          AG::Subgraph::invalidate_and_delete_(*v9, 1);
        ++v9;
        v10 -= 8;
      }
      while (v10);
    }
    if (v6 && !v7)
    {
      v6[408] = 0;
      AG::Graph::invalidate_subgraphs((AG::Graph *)v6);
    }
  }
  v11 = (AG::Graph *)*this;
  v12 = *((_DWORD *)*this + 103) - 1;
  *((_DWORD *)v11 + 103) = v12;
  if (v11 && !v12)
  {
    AG::Graph::~Graph(v11);
    MEMORY[0x1AF431538]();
  }
  swift_release();
  swift_release();
}

void AG::Subgraph::invalidate_and_delete_(AG::Subgraph *this, int a2)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  int v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;

  if (a2)
    *((_DWORD *)this + 6) |= 0x80000000;
  if (*((unsigned __int8 *)this + 104) - 1 >= 3)
  {
    v3 = *((_QWORD *)this + 7);
    if ((v3 & 1) != 0)
    {
      v6 = v3 & 0xFFFFFFFFFFFFFFFELL;
      if (*(_QWORD *)(v6 + 32))
        v5 = *(uint64_t **)(v6 + 32);
      else
        v5 = (uint64_t *)v6;
      v4 = &v5[*(_QWORD *)(v6 + 40)];
    }
    else
    {
      v4 = (uint64_t *)((char *)this + 8 * (v3 != 0) + 56);
      v5 = (uint64_t *)((char *)this + 56);
    }
    while (v5 != v4)
    {
      v7 = *v5++;
      AG::Subgraph::remove_child(v7, this, 1);
    }
    AG::indirect_pointer_vector<AG::Subgraph,unsigned long>::clear((_QWORD *)this + 7);
    v8 = *((_QWORD *)this + 5);
    if (*(_BYTE *)(v8 + 408) || *(_QWORD *)(v8 + 240))
    {
      v9 = *((unsigned __int8 *)this + 104);
      if (v9 != 1)
      {
        v10 = v8 + 376;
        v11 = *(_DWORD *)(v8 + 400);
        v12 = v11 + 1;
        if (*(_DWORD *)(v8 + 404) < v11 + 1)
        {
          AG::vector<AG::Subgraph *,2ul,unsigned int>::reserve_slow((void *)(v8 + 376), v12);
          v10 = v8 + 376;
          v11 = *(_DWORD *)(v8 + 400);
          v9 = *((unsigned __int8 *)this + 104);
          v12 = v11 + 1;
        }
        if (*(_QWORD *)(v8 + 392))
          v10 = *(_QWORD *)(v8 + 392);
        *(_QWORD *)(v10 + 8 * v11) = this;
        *(_DWORD *)(v8 + 400) = v12;
        *((_BYTE *)this + 104) = 1;
        if (!v9)
        {
          v13 = *(_DWORD *)(v8 + 232);
          if (v13)
          {
            v14 = v13 - 1;
            do
            {
              v15 = v14;
              v16 = *(_QWORD *)(*(_QWORD *)(v8 + 224) + 8 * v14);
              (*(void (**)(uint64_t, AG::Subgraph *))(*(_QWORD *)v16 + 192))(v16, this);
              --v14;
            }
            while (v15);
          }
        }
      }
    }
    else
    {
      AG::Subgraph::invalidate_now(this, *((AG::Graph **)this + 5));
      AG::Graph::invalidate_subgraphs((AG::Graph *)v8);
    }
  }
}

uint64_t AG::Subgraph::remove_child(uint64_t this, AG::Subgraph *a2, char a3)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *i;
  unint64_t v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;

  v4 = this;
  v5 = (_QWORD *)((char *)a2 + 56);
  v6 = *((_QWORD *)a2 + 7);
  if ((v6 & 1) != 0)
  {
    v8 = (_QWORD *)(v6 & 0xFFFFFFFFFFFFFFFELL);
    if (*(_QWORD *)((v6 & 0xFFFFFFFFFFFFFFFELL) + 32))
      v8 = *(_QWORD **)((v6 & 0xFFFFFFFFFFFFFFFELL) + 32);
    v7 = &v8[*(_QWORD *)((v6 & 0xFFFFFFFFFFFFFFFELL) + 40)];
  }
  else
  {
    v7 = &v5[v6 != 0];
    v8 = (_QWORD *)((char *)a2 + 56);
  }
  while (v8 != v7)
  {
    if (*v8 == this)
    {
      if ((v6 & 1) != 0)
      {
        v14 = v6 & 0xFFFFFFFFFFFFFFFELL;
        v15 = *(_QWORD *)(v14 + 40);
        if (*(_QWORD *)(v14 + 32))
          v14 = *(_QWORD *)(v14 + 32);
        v6 = *(_QWORD *)(v14 + 8 * v15 - 8);
      }
      *v8 = v6;
      if ((*v5 & 1) != 0)
        --*(_QWORD *)((*v5 & 0xFFFFFFFFFFFFFFFELL) + 40);
      else
        *v5 = 0;
      break;
    }
    ++v8;
  }
  if ((a3 & 1) == 0)
  {
    v9 = *(_QWORD *)(this + 40);
    v10 = *(_DWORD *)(v9 + 232);
    if (v10)
    {
      v17 = v10 - 1;
      do
      {
        v18 = v17;
        v19 = *(_QWORD *)(*(_QWORD *)(v9 + 224) + 8 * v17);
        this = (*(uint64_t (**)(uint64_t, uint64_t, AG::Subgraph *))(*(_QWORD *)v19 + 216))(v19, v4, a2);
        --v17;
      }
      while (v18);
    }
  }
  v11 = *(unsigned int *)(v4 + 72);
  if ((_DWORD)v11)
  {
    v12 = 8 * v11;
    for (i = *(_QWORD **)(v4 + 64); (AG::Subgraph *)(*i & 0xFFFFFFFFFFFFFFFCLL) != a2; ++i)
    {
      v12 -= 8;
      if (!v12)
        return this;
    }
    v16 = v11 - 1;
    *i = *(_QWORD *)(*(_QWORD *)(v4 + 64) + 8 * v16);
    *(_DWORD *)(v4 + 72) = v16;
  }
  return this;
}

_QWORD *AG::indirect_pointer_vector<AG::Subgraph,unsigned long>::clear(_QWORD *result)
{
  _QWORD *v1;
  uint64_t v2;
  unint64_t v3;
  void *v4;

  v1 = result;
  v2 = *result;
  if ((*result & 1) != 0)
  {
    v3 = v2 & 0xFFFFFFFFFFFFFFFELL;
    if ((v2 & 0xFFFFFFFFFFFFFFFELL) != 0)
    {
      v4 = *(void **)(v3 + 32);
      if (v4)
        free(v4);
      result = (_QWORD *)MEMORY[0x1AF431538](v3, 0x1080C4034992649);
    }
  }
  *v1 = 0;
  return result;
}

void *AG::vector<AG::Subgraph *,2ul,unsigned int>::reserve_slow(void *__dst, unsigned int a2)
{
  unsigned int v3;
  void *result;

  if (*((_DWORD *)__dst + 7) + (*((_DWORD *)__dst + 7) >> 1) <= a2)
    v3 = a2;
  else
    v3 = *((_DWORD *)__dst + 7) + (*((_DWORD *)__dst + 7) >> 1);
  result = AG::details::realloc_vector<unsigned int,8ul>(*((void **)__dst + 2), __dst, 2u, (_DWORD *)__dst + 7, v3);
  *((_QWORD *)__dst + 2) = result;
  return result;
}

void *AG::details::realloc_vector<unsigned int,8ul>(void *__src, void *__dst, unsigned int a3, _DWORD *a4, unsigned int a5)
{
  void *v7;
  size_t v8;
  size_t v9;
  void *v10;
  const char *v11;
  void *v12;

  v7 = __src;
  if (a5 <= a3)
  {
    if (__src)
    {
      LODWORD(v9) = a3;
      memcpy(__dst, __src, 8 * a5);
      free(v7);
      v12 = 0;
LABEL_8:
      *a4 = v9;
      return v12;
    }
  }
  else
  {
    v8 = malloc_good_size(8 * a5);
    v9 = v8 >> 3;
    if (*a4 != (v8 >> 3))
    {
      v10 = malloc_type_realloc(v7, v8, 0x8734B07FuLL);
      if (!v10)
        AG::precondition_failure((AG *)"allocation failure", v11);
      v12 = v10;
      if (!v7)
        memcpy(v10, __dst, 8 * *a4);
      goto LABEL_8;
    }
  }
  return v7;
}

_QWORD *AG::Subgraph::cache_insert(_QWORD *result, unsigned int a2)
{
  unsigned int *v2;
  unint64_t v3;
  _QWORD *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;

  if (!*((_BYTE *)result + 104))
  {
    v2 = (unsigned int *)(AG::data::_shared_table_bytes + a2);
    if ((*((_BYTE *)v2 + 7) & 0x10) != 0)
    {
      v3 = *v2;
      if ((v3 & 0xC0) == 0 && v2[5] <= 0x1F)
      {
        v4 = result;
        v5 = (uint64_t *)a2;
        v6 = AG::data::_shared_table_bytes + *((unsigned int *)result + 23);
        v7 = AG::data::_shared_table_bytes
           + util::UntypedTable::lookup((util::UntypedTable *)(v6 + 40), **(uint64_t ***)(*(_QWORD *)(result[5] + 128) + ((v3 >> 5) & 0x7FFFFF8)), 0);
        result = util::UntypedTable::lookup((util::UntypedTable *)(v6 + 200), v5, 0);
        ++*result;
        v8 = *(_QWORD *)(v7 + 16);
        result[2] = v8;
        result[3] = 0;
        *(_QWORD *)(v7 + 16) = result;
        if (!v8)
          v8 = v7;
        *(_QWORD *)(v8 + 24) = result;
        v9 = *((_BYTE *)v4 + 105);
        if ((v9 & 1) == 0)
        {
          if ((*((_BYTE *)v4 + 105) & 2) == 0)
          {
            v10 = v4[5];
            v11 = *(_DWORD *)(v10 + 368);
            v12 = v11 + 1;
            if (*(_DWORD *)(v10 + 372) < v11 + 1)
            {
              result = AG::vector<std::pair<unsigned int,BOOL>,0ul,unsigned int>::reserve_slow(v10 + 360, v12);
              v11 = *(_DWORD *)(v10 + 368);
              v12 = v11 + 1;
            }
            *(_QWORD *)(*(_QWORD *)(v10 + 360) + 8 * v11) = v4;
            *(_DWORD *)(v10 + 368) = v12;
            v9 = *((_BYTE *)v4 + 105);
          }
          *((_BYTE *)v4 + 105) = v9 | 1;
        }
      }
    }
  }
  return result;
}

void AG::data::table::make_pages_reusable(AG::data::table *this, int a2, int a3)
{
  void *v5;
  int v6;
  unsigned __int8 v7;
  _BYTE *v8;
  int v9;
  int v10;
  int v11;

  v5 = (void *)(*((_QWORD *)this + 1) + ((a2 << 9) & 0xFFFF8000));
  if (a3)
    v6 = 7;
  else
    v6 = 8;
  madvise((void *)(*((_QWORD *)this + 1) + ((a2 << 9) & 0xFFFF8000)), 0x8000uLL, v6);
  v8 = &unk_1ECEF3000;
  if ((v7 & 1) == 0)
  {
    v8 = (_BYTE *)&unk_1ECEF3000;
    if (v11)
    {
      AG::data::table::make_pages_reusable(unsigned int,BOOL)::unmap_reusable = AG::data::table::make_pages_reusable(unsigned int,BOOL)::$_0::operator()();
      v8 = (_BYTE *)&unk_1ECEF3000;
    }
  }
  if (v8[584])
  {
    if (a3)
      v9 = 0;
    else
      v9 = 3;
    mprotect(v5, 0x8000uLL, v9);
  }
  if (a3)
    v10 = 0x8000;
  else
    v10 = -32768;
  *((_DWORD *)this + 8) += v10;
}

void *AG::vector<AG::Subgraph *,16ul,unsigned long>::reserve_slow(void *__dst, size_t a2)
{
  size_t v3;
  void *result;

  if (*((_QWORD *)__dst + 18) + (*((_QWORD *)__dst + 18) >> 1) <= a2)
    v3 = a2;
  else
    v3 = *((_QWORD *)__dst + 18) + (*((_QWORD *)__dst + 18) >> 1);
  result = AG::details::realloc_vector<unsigned long,8ul>(*((void **)__dst + 16), __dst, 0x10uLL, (size_t *)__dst + 18, v3);
  *((_QWORD *)__dst + 16) = result;
  return result;
}

void AGGraphInvalidateValue(char *a1, const char *a2)
{
  uint64_t v2;

  if ((a1 & 3) != 0)
    AG::precondition_failure((AG *)"non-direct attribute id: %u", a2, a1);
  if (dword_1ECEF30D0 <= (a1 & 0xFFFFFFFC))
    AG::precondition_failure((AG *)"invalid data offset: %u", a2, a1 & 0xFFFFFFFC);
  v2 = *(_QWORD *)(AG::data::_shared_table_bytes + (a1 & 0xFFFFFE00));
  if (!v2)
    AG::precondition_failure((AG *)"no graph: %u", a2, a1);
  AG::Graph::value_mark(*(_QWORD *)(v2 + 40), (const char *)a1);
}

void AGSubgraphInvalidate(uint64_t a1)
{
  AG::Subgraph *v1;

  v1 = *(AG::Subgraph **)(a1 + 16);
  if (v1)
    AG::Subgraph::invalidate_and_delete_(v1, 0);
}

uint64_t AG::Graph::call_update(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  char v3;

  if (*(_BYTE *)(this + 409))
  {
    v1 = this;
    v2 = this + 144;
    do
    {
      *(_BYTE *)(v1 + 409) = 0;
      this = util::UntypedTable::for_each(v2, (void (*)(const void *, const void *, const void *))util::Table<unsigned long,AG::Graph::Context *>::for_each<AG::Graph::call_update(void)::$_0>(AG::Graph::call_update(void)::$_0 const&)const::{lambda(void const*,void const*,void const*)#1}::__invoke, &v3);
    }
    while (*(_BYTE *)(v1 + 409));
  }
  return this;
}

void AG::Graph::Context::call_update(AG::Graph::Context *this)
{
  uint64_t v2;
  unint64_t StatusReg;
  uint64_t v4;
  unint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  uint64_t v11;
  unsigned int *v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t i;
  uint64_t v18;
  uint64_t j;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  if (*((_BYTE *)this + 68))
  {
    *((_BYTE *)this + 68) = 0;
    if (*((_QWORD *)this + 5))
    {
      v2 = *(_QWORD *)this;
      StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
      v21 = v2;
      v22 = StatusReg - 224;
      v4 = *(_QWORD *)(StatusReg + 8 * AG::Graph::_current_update_key);
      v5 = atomic_load((unint64_t *)(v2 + 416));
      v23 = v4;
      v24 = v5;
      v26 = 0;
      v27 = 0;
      v28 = 8;
      v29 = 8;
      if (v4)
      {
        v6 = *(_DWORD *)((v4 & 0xFFFFFFFFFFFFFFFELL) + 120) & 4;
        v29 = v6 | 8;
        v7 = v6 | 0x18;
      }
      else
      {
        v7 = 24;
      }
      *(_QWORD *)(v2 + 416) = v22;
      if (!*(_BYTE *)(v2 + 408))
      {
        *(_BYTE *)(v2 + 408) = 1;
        v29 = v7;
      }
      *(_QWORD *)(StatusReg + 8 * AG::Graph::_current_update_key) = (char *)&v21 + 1;
      v8 = *(_QWORD *)this;
      v9 = *(unsigned int *)(*(_QWORD *)this + 232);
      if ((_DWORD)v9)
      {
        for (i = 8 * v9 - 8; i != -8; i -= 8)
        {
          v18 = *(_QWORD *)(*(_QWORD *)(v8 + 224) + i);
          (*(void (**)(uint64_t, AG::Graph::Context *))(*(_QWORD *)v18 + 96))(v18, this);
        }
      }
      (*((void (**)(void))this + 5))();
      v11 = *(unsigned int *)(v8 + 232);
      if ((_DWORD)v11)
      {
        for (j = 8 * v11 - 8; j != -8; j -= 8)
        {
          v20 = *(_QWORD *)(*(_QWORD *)(v8 + 224) + j);
          (*(void (**)(uint64_t, AG::Graph::Context *))(*(_QWORD *)v20 + 104))(v20, this);
        }
      }
      v12 = (unsigned int *)&v25;
      if (v26)
        v12 = (unsigned int *)v26;
      if (v27)
      {
        v13 = AG::data::_shared_table_bytes;
        v14 = 8 * v27;
        do
        {
          v15 = *v12;
          v12 += 2;
          *(_DWORD *)(v13 + v15) -= 64;
          v14 -= 8;
        }
        while (v14);
      }
      v16 = v21;
      if (v22 != *(_QWORD *)(v21 + 416))
      {
        AG::non_fatal_precondition_failure((AG *)"invalid graph update (access from multiple threads?)", v10);
        v16 = v21;
      }
      *(_QWORD *)(v16 + 416) = v24;
      *(_QWORD *)(StatusReg + 8 * AG::Graph::_current_update_key) = v23;
      if ((v29 & 0x10) != 0)
        *(_BYTE *)(v16 + 408) = 0;
      if (v26)
        free(v26);
    }
  }
}

void sub_1AB93DBA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t AGGraphAnyInputsChanged(__int32 *__s, const char *__n)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;

  v2 = AG::Graph::_current_update_key;
  v3 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v2);
  if ((v3 & 1) != 0 || (v4 = (uint64_t *)(v3 & 0xFFFFFFFFFFFFFFFELL)) == 0)
    AG::precondition_failure((AG *)"no attribute updating", __n);
  v6 = *v4;
  v7 = v4 + 4;
  v9 = (_QWORD *)v4[12];
  v8 = v4[13];
  if (v9)
    v7 = v9;
  return AG::Graph::any_inputs_changed(v6, v7[v8 - 1], __s, (size_t)__n);
}

uint64_t AGGraphSetUpdateCallback(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t result;

  if (*(_BYTE *)(a1 + 88))
    AG::precondition_failure((AG *)"invalidated graph", a2);
  swift_release();
  result = swift_retain();
  *(_QWORD *)(a1 + 56) = a2;
  *(_QWORD *)(a1 + 64) = a3;
  return result;
}

uint64_t AGGraphSetInvalidationCallback(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t result;

  if (*(_BYTE *)(a1 + 88))
    AG::precondition_failure((AG *)"invalidated graph", a2);
  swift_release();
  result = swift_retain();
  *(_QWORD *)(a1 + 40) = a2;
  *(_QWORD *)(a1 + 48) = a3;
  return result;
}

uint64_t AGGraphGetValueState(char *a1, const char *a2)
{
  uint64_t v2;

  if (dword_1ECEF30D0 <= (a1 & 0xFFFFFFFC))
    AG::precondition_failure((AG *)"invalid data offset: %u", a2, a1 & 0xFFFFFFFC);
  v2 = *(_QWORD *)(AG::data::_shared_table_bytes + (a1 & 0xFFFFFE00));
  if (!v2)
    AG::precondition_failure((AG *)"no graph: %u", a2, a1);
  return AG::Graph::value_state(*(_QWORD *)(v2 + 40), a1);
}

_BYTE *AG::Graph::Context::set_needs_update(_BYTE *this)
{
  _BYTE *v1;
  uint64_t v2;
  int v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;

  if (!this[68])
  {
    v1 = this;
    v2 = *(_QWORD *)this;
    v3 = *(_DWORD *)(*(_QWORD *)this + 232);
    if (v3)
    {
      v4 = v3 - 1;
      do
      {
        v5 = v4;
        v6 = *(_QWORD *)(*(_QWORD *)(v2 + 224) + 8 * v4);
        this = (_BYTE *)(*(uint64_t (**)(uint64_t, _BYTE *))(*(_QWORD *)v6 + 176))(v6, v1);
        --v4;
      }
      while (v5);
      v2 = *(_QWORD *)v1;
    }
    v1[68] = 1;
    *(_BYTE *)(v2 + 409) = 1;
  }
  return this;
}

uint64_t AG::Graph::any_inputs_changed(int a1, unsigned int a2, __int32 *__s, size_t __n)
{
  uint64_t v4;
  unint64_t v5;
  __int32 *v8;
  uint64_t v9;
  _BYTE *i;
  char v11;
  __int32 *v12;
  __int32 *v13;

  v4 = AG::data::_shared_table_bytes + a2;
  v5 = *(unsigned int *)(v4 + 12);
  if (v5 < 0x20)
    return 0;
  v8 = &__s[__n];
  v9 = 5 * (v5 >> 5);
  for (i = (_BYTE *)(*(unsigned int *)(v4 + 16) + AG::data::_shared_table_bytes + 4); ; i += 5)
  {
    v11 = *i;
    *i |= 0x10u;
    if ((v11 & 8) != 0)
    {
      v12 = wmemchr(__s, *((_DWORD *)i - 1), __n);
      v13 = v12 ? v12 : v8;
      if (__n == v13 - __s)
        break;
    }
    v9 -= 5;
    if (!v9)
      return 0;
  }
  return 1;
}

uint64_t AGSubgraphRemoveChild(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  AG::Subgraph *v3;

  result = *(_QWORD *)(a1 + 16);
  if (!result)
    AG::precondition_failure((AG *)"accessing invalidated subgraph", (const char *)a2);
  v3 = *(AG::Subgraph **)(a2 + 16);
  if (v3)
    return AG::Subgraph::remove_child(result, v3, 0);
  return result;
}

void type metadata accessor for AnyAttribute(uint64_t a1)
{
  sub_1AB9337A8(a1, qword_1ECEF2D78);
}

uint64_t sub_1AB93DEB4(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 8) = v3;
  return result;
}

uint64_t AG::Graph::value_state(uint64_t a1, unsigned int a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;

  v5 = a2;
  if ((a2 & 3) != 0)
    a2 = AG::AttributeID::resolve_slow((AG::AttributeID *)&v5, (const char *)2);
  if ((a2 & 3) != 0)
    return 0;
  v3 = AG::data::_shared_table_bytes + a2;
  v4 = *(_DWORD *)v3 & 3;
  if ((*(_DWORD *)v3 & 0xC0) != 0)
    v4 = *(_DWORD *)v3 & 3 | 4;
  return (*(_DWORD *)v3 >> 1) & 8 | (16 * ((*(_DWORD *)v3 >> 2) & 1)) & 0xFFFFFF3F | (((*(_DWORD *)v3 >> 3) & 1) << 6) & 0xFFFFFF7F | v4 & 0xFFFFFF7F | *(_BYTE *)(v3 + 7) & 0x20 | (((*(unsigned __int8 *)(v3 + 7) >> 6) & 1) << 7);
}

void AG::Graph::indirect_attribute_set_dependency(uint64_t a1, const char *a2, unsigned int a3)
{
  int v3;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;

  v3 = (int)a2;
  if (a3 < 4)
  {
    v5 = AG::data::_shared_table_bytes;
    if ((*(_BYTE *)(AG::data::_shared_table_bytes + a2 + 8) & 1) != 0)
    {
      v6 = 0;
      v7 = a2;
      goto LABEL_8;
    }
LABEL_16:
    AG::precondition_failure((AG *)"not an indirect attribute: %u", a2, a2 | 1);
  }
  if ((a3 & 3) != 0)
    AG::precondition_failure((AG *)"indirect dependencies must be attributes", a2);
  v5 = AG::data::_shared_table_bytes;
  if (*(_QWORD *)(AG::data::_shared_table_bytes + (a2 & 0xFFFFFE00)) != *(_QWORD *)(AG::data::_shared_table_bytes
                                                                                                 + (a3 & 0xFFFFFE00)))
    AG::precondition_failure((AG *)"indirect dependencies must share a subgraph with their attribute", a2);
  if ((*(_BYTE *)(AG::data::_shared_table_bytes + a2 + 8) & 1) == 0)
    goto LABEL_16;
  v7 = a2;
  v6 = a3;
LABEL_8:
  v8 = *(_DWORD *)(a1 + 232);
  if (v8)
  {
    v11 = a3;
    v12 = v8 - 1;
    do
    {
      v13 = v12;
      v14 = *(_QWORD *)(*(_QWORD *)(a1 + 224) + 8 * v12);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v14 + 304))(v14, v7, v11);
      --v12;
    }
    while (v13);
    v5 = AG::data::_shared_table_bytes;
  }
  v9 = v5 + v7;
  v10 = *(_DWORD *)(v9 + 16);
  if (v6 != v10)
  {
    if (v10)
      AG::Graph::remove_output_edge<AG::Node>(a1, v10, v3 & 0xFFFFFFFE | 1);
    *(_DWORD *)(v9 + 16) = v6;
    if (v6)
    {
      AG::Graph::add_output_edge<AG::Node>(a1, v6, v3 & 0xFFFFFFFE | 1);
      if ((*(_BYTE *)(AG::data::_shared_table_bytes + v6) & 1) != 0)
        AG::Graph::propagate_dirty(a1);
    }
  }
}

uint64_t AGGraphCreate()
{
  return AGGraphCreateShared(0);
}

unint64_t AGSubgraphAddObserver(uint64_t a1, const char *a2, uint64_t a3)
{
  AG::data::zone *v3;

  v3 = *(AG::data::zone **)(a1 + 16);
  if (!v3)
    AG::precondition_failure((AG *)"accessing invalidated subgraph", a2);
  return AG::Subgraph::add_observer(v3, (uint64_t)a2, a3);
}

unsigned int *AGGraphWithUpdate(char *a1, uint64_t (*a2)(void))
{
  uint64_t v2;
  unint64_t StatusReg;
  uint64_t v4;
  uint64_t v5;
  unsigned int *result;
  uint64_t v7;

  if ((_DWORD)a1 == 2)
  {
    v2 = AG::Graph::_current_update_key;
    StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    v4 = *(_QWORD *)(StatusReg + 8 * v2);
    v5 = v4 | 1;
    if (!v4)
      v5 = 0;
    *(_QWORD *)(StatusReg + 8 * v2) = v5;
    result = (unsigned int *)a2();
    *(_QWORD *)(StatusReg + 8 * AG::Graph::_current_update_key) = v4;
  }
  else
  {
    if ((a1 & 3) != 0)
      AG::precondition_failure((AG *)"non-direct attribute id: %u", (const char *)a2, a2, a1);
    if (dword_1ECEF30D0 <= (a1 & 0xFFFFFFFC))
      AG::precondition_failure((AG *)"invalid data offset: %u", (const char *)a2, a2, a1 & 0xFFFFFFFC);
    v7 = *(_QWORD *)(AG::data::_shared_table_bytes + (a1 & 0xFFFFFE00));
    if (!v7)
      AG::precondition_failure((AG *)"no graph: %u", (const char *)a2, a2, a1);
    return AG::Graph::with_update(*(_QWORD *)(v7 + 40), a1, (void (*)(void))a2);
  }
  return result;
}

void sub_1AB93E230(_Unwind_Exception *a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  *(_QWORD *)(v1 + 8 * *v2) = v3;
  _Unwind_Resume(a1);
}

void `anonymous namespace'::graph_type_id(void)::$_0::__invoke<void const*>(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 88))
    AG::Graph::Context::~Context((AG::Graph::Context *)(a1 + 16));
}

AG::data::table *AG::data::table::ensure_shared(void)::$_0::__invoke()
{
  return AG::data::table::table((AG::data::table *)&AG::data::_shared_table_bytes);
}

uint64_t AG::Subgraph::make_current_subgraph_key(AG::Subgraph *this)
{
  return pthread_key_create((pthread_key_t *)&AG::Subgraph::_current_subgraph_key, 0);
}

__n128 AGGraphWithMainThreadHandler(uint64_t a1, const char *a2, uint64_t a3, unint64_t a4, unint64_t a5)
{
  __n128 *v5;
  __n128 *v6;
  __n128 result;
  __n128 v8;

  if (*(_BYTE *)(a1 + 88))
    AG::precondition_failure((AG *)"invalidated graph", a2);
  v5 = *(__n128 **)(a1 + 16);
  v6 = v5 + 15;
  v8 = v5[15];
  v5[15].n128_u64[0] = a4;
  v5[15].n128_u64[1] = a5;
  ((void (*)(void))a2)();
  result = v8;
  *v6 = v8;
  return result;
}

void sub_1AB93E2C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __int128 a9)
{
  _OWORD *v9;

  *v9 = a9;
  _Unwind_Resume(a1);
}

const char *init_should_record_tree(void *a1)
{
  const char *result;
  BOOL v2;

  result = getenv("AG_TREE");
  if (result)
  {
    result = (const char *)atoi(result);
    v2 = (_DWORD)result != 0;
  }
  else
  {
    v2 = 0;
  }
  should_record_tree = v2;
  return result;
}

void *AG::data::table::grow_region(AG::data::table *this, const char *a2)
{
  unsigned int v2;
  uint64_t v3;
  void *result;
  const char *v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  vm_address_t v10;
  int *v11;
  const char *v12;
  vm_prot_t v13;
  vm_prot_t cur_protection;
  vm_address_t target_address;

  v2 = *((_DWORD *)this + 5);
  v3 = 4 * v2;
  if (v3 <= v2)
    AG::precondition_failure((AG *)"exhausted data space", a2);
  target_address = (vm_address_t)mmap(0, 4 * v2, 3, 4098, -1, 0);
  if (target_address == -1)
  {
    v11 = __error();
    AG::precondition_failure((AG *)"memory allocation failure (%u bytes, %u)", v12, v3, *v11);
  }
  cur_protection = 0;
  v13 = 0;
  result = (void *)vm_remap(*MEMORY[0x1E0C83DA0], &target_address, *((unsigned int *)this + 5), 0, 0x4000, *MEMORY[0x1E0C83DA0], *((_QWORD *)this + 1), 0, &cur_protection, &v13, 2u);
  if ((_DWORD)result)
    AG::precondition_failure((AG *)"vm_remap failure: 0x%x", v6, result);
  v7 = *((_DWORD *)this + 14);
  v8 = v7 + 1;
  if (*((_DWORD *)this + 15) < v7 + 1)
  {
    result = AG::vector<std::pair<unsigned char *,unsigned int>,0ul,unsigned int>::reserve_slow((uint64_t)this + 48, v8);
    v7 = *((_DWORD *)this + 14);
    v8 = v7 + 1;
  }
  v9 = *((_QWORD *)this + 6) + 16 * v7;
  *(_QWORD *)v9 = *((_QWORD *)this + 1);
  *(_DWORD *)(v9 + 8) = *((_DWORD *)this + 5);
  *((_DWORD *)this + 14) = v8;
  v10 = target_address;
  AGGraphVMRegionBaseAddress = target_address;
  *(_QWORD *)this = target_address - 512;
  *((_QWORD *)this + 1) = v10;
  *((_DWORD *)this + 5) = v3;
  *((_DWORD *)this + 6) = v3 + 512;
  return result;
}

void *AG::vector<std::pair<unsigned char *,unsigned int>,0ul,unsigned int>::reserve_slow(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  void *result;

  if (*(_DWORD *)(a1 + 12) + (*(_DWORD *)(a1 + 12) >> 1) <= a2)
    v3 = a2;
  else
    v3 = *(_DWORD *)(a1 + 12) + (*(_DWORD *)(a1 + 12) >> 1);
  result = AG::details::realloc_vector<unsigned int,16ul>(*(void **)a1, (_DWORD *)(a1 + 12), v3);
  *(_QWORD *)a1 = result;
  return result;
}

uint64_t AGGraphRegisterNamedTraceEvent(const char *a1, char *a2)
{
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  char *v8;
  unsigned int v9;
  unsigned int v10;
  char **v11;

  os_unfair_lock_lock((os_unfair_lock_t)&NamedEvents::lock);
  v4 = NamedEvents::names;
  if (!NamedEvents::names)
  {
    v5 = (_QWORD *)operator new();
    *v5 = 0;
    v5[1] = 0;
    NamedEvents::names = (uint64_t)v5;
    AG::vector<std::pair<unsigned char *,unsigned int>,0ul,unsigned int>::reserve_slow((uint64_t)v5, 1u);
    v4 = NamedEvents::names;
    v6 = (_QWORD *)(*v5 + 16 * *((unsigned int *)v5 + 2));
    *v6 = 0;
    v6[1] = 0;
    ++*((_DWORD *)v5 + 2);
  }
  v7 = *(unsigned int *)(v4 + 8);
  if (a2)
    a2 = strdup(a2);
  v8 = strdup(a1);
  v9 = v7 + 1;
  if (*(_DWORD *)(v4 + 12) < (v7 + 1))
  {
    AG::vector<std::pair<unsigned char *,unsigned int>,0ul,unsigned int>::reserve_slow(v4, v9);
    v10 = *(_DWORD *)(v4 + 8);
    v9 = v10 + 1;
  }
  else
  {
    v10 = v7;
  }
  v11 = (char **)(*(_QWORD *)v4 + 16 * v10);
  *v11 = a2;
  v11[1] = v8;
  *(_DWORD *)(v4 + 8) = v9;
  os_unfair_lock_unlock((os_unfair_lock_t)&NamedEvents::lock);
  return v7;
}

void sub_1AB93E580(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock((os_unfair_lock_t)&NamedEvents::lock);
  _Unwind_Resume(a1);
}

void *AG::details::realloc_vector<unsigned int,16ul>(void *a1, _DWORD *a2, unsigned int a3)
{
  void *v4;
  size_t v5;
  size_t v6;
  void *v7;
  const char *v8;

  v4 = a1;
  if (a3)
  {
    v5 = malloc_good_size(16 * a3);
    v6 = v5 >> 4;
    if (*a2 != (v5 >> 4))
    {
      v7 = malloc_type_realloc(v4, v5, 0xF3138078uLL);
      if (!v7)
        AG::precondition_failure((AG *)"allocation failure", v8);
      v4 = v7;
      *a2 = v6;
    }
  }
  else
  {
    *a2 = 0;
    free(a1);
    return 0;
  }
  return v4;
}

AG::data::table *AG::data::table::table(AG::data::table *this)
{
  char *v2;
  uint64_t v4;
  int *v5;
  const char *v6;

  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *(_QWORD *)((char *)this + 36) = 0;
  *(_QWORD *)((char *)this + 28) = 0;
  *((_OWORD *)this + 5) = 0u;
  *((_QWORD *)this + 2) = 0x10000000000000;
  v2 = (char *)mmap(0, 0x100000uLL, 3, 4098, -1, 0);
  *((_QWORD *)this + 1) = v2;
  AGGraphVMRegionBaseAddress = (uint64_t)v2;
  if (v2 == (char *)-1)
  {
    v4 = *((unsigned int *)this + 5);
    v5 = __error();
    AG::precondition_failure((AG *)"memory allocation failure (%u bytes, %u)", v6, v4, *v5);
  }
  *(_QWORD *)this = v2 - 512;
  *((_DWORD *)this + 6) = *((_DWORD *)this + 5) + 512;
  if (!AG::data::table::_malloc_zone)
  {
    AG::data::table::_malloc_zone = (uint64_t)malloc_create_zone(0, 0);
    malloc_set_zone_name((malloc_zone_t *)AG::data::table::_malloc_zone, "AttributeGraph graph data");
  }
  return this;
}

void sub_1AB93E710(_Unwind_Exception *a1)
{
  void **v1;
  void **v2;
  uint64_t v3;
  void *v5;

  v5 = *(void **)(v3 + 80);
  if (v5)
    free(v5);
  AG::data::table::table(v2, v1);
  _Unwind_Resume(a1);
}

void *AG::details::realloc_vector<unsigned long,64ul>(void *__src, void *__dst, size_t a3, size_t *a4, size_t a5)
{
  void *v7;
  size_t v8;
  size_t v9;
  void *v10;
  const char *v11;
  void *v12;

  v7 = __src;
  if (a5 <= a3)
  {
    if (__src)
    {
      v9 = a3;
      memcpy(__dst, __src, a5 << 6);
      free(v7);
      v12 = 0;
LABEL_8:
      *a4 = v9;
      return v12;
    }
  }
  else
  {
    v8 = malloc_good_size(a5 << 6);
    v9 = v8 >> 6;
    if (v8 >> 6 != *a4)
    {
      v10 = malloc_type_realloc(v7, v8, 0x8734B07FuLL);
      if (!v10)
        AG::precondition_failure((AG *)"allocation failure", v11);
      v12 = v10;
      if (!v7)
        memcpy(v10, __dst, *a4 << 6);
      goto LABEL_8;
    }
  }
  return v7;
}

void *AG::vector<AG::LayoutDescriptor::Compare::Enum,8ul,unsigned long>::reserve_slow(void *__dst, size_t a2)
{
  size_t v3;
  void *result;

  if (*((_QWORD *)__dst + 66) + (*((_QWORD *)__dst + 66) >> 1) <= a2)
    v3 = a2;
  else
    v3 = *((_QWORD *)__dst + 66) + (*((_QWORD *)__dst + 66) >> 1);
  result = AG::details::realloc_vector<unsigned long,64ul>(*((void **)__dst + 64), __dst, 8uLL, (size_t *)__dst + 66, v3);
  *((_QWORD *)__dst + 64) = result;
  return result;
}

void type metadata accessor for Metadata(uint64_t a1)
{
  sub_1AB9337A8(a1, qword_1ECEF2CE8);
}

unint64_t sub_1AB93E858()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1ECEF2CE0;
  if (!qword_1ECEF2CE0)
  {
    type metadata accessor for Metadata(255);
    result = MEMORY[0x1AF431BE0](&unk_1AB9635C8, v1);
    atomic_store(result, (unint64_t *)&qword_1ECEF2CE0);
  }
  return result;
}

uint64_t sub_1AB93E8A0()
{
  return sub_1AB9335D8(&qword_1ECEF2F18, (uint64_t (*)(uint64_t))type metadata accessor for Flags, (uint64_t)&unk_1AB963308);
}

uint64_t sub_1AB93E8CC()
{
  return sub_1AB9335D8(&qword_1ECEF2F10, (uint64_t (*)(uint64_t))type metadata accessor for Flags, (uint64_t)&unk_1AB9632CC);
}

uint64_t sub_1AB93E8F8()
{
  return sub_1AB9335D8(&qword_1ECEF2F20, (uint64_t (*)(uint64_t))type metadata accessor for Flags, (uint64_t)&unk_1AB96326C);
}

uint64_t sub_1AB93E924()
{
  return sub_1AB9335D8(&qword_1ECEF2F08, (uint64_t (*)(uint64_t))type metadata accessor for Flags, (uint64_t)&unk_1AB9632A0);
}

unint64_t sub_1AB93E954()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1ECEF2D70;
  if (!qword_1ECEF2D70)
  {
    type metadata accessor for AnyAttribute(255);
    result = MEMORY[0x1AF431BE0](&unk_1AB9635F4, v1);
    atomic_store(result, (unint64_t *)&qword_1ECEF2D70);
  }
  return result;
}

_QWORD *sub_1AB93E99C()
{
  _QWORD *result;

  result = (_QWORD *)swift_slowAlloc();
  *result = 0;
  result[1] = sub_1AB95DD68;
  result[2] = sub_1AB93CF60;
  result[3] = sub_1AB95DD74;
  result[4] = sub_1AB95DDD0;
  result[5] = sub_1AB95DE2C;
  qword_1ECEF2F40 = (uint64_t)result;
  return result;
}

uint64_t AG::Graph::TraceRecorder::TraceRecorder(uint64_t a1, uint64_t a2, int a3, const char **a4, uint64_t a5)
{
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char *v13;
  unint64_t v14;
  void *array;
  image_offset image_offsets;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)a1 = &off_1E5A60510;
  v10 = AGMakeUniqueID();
  *(_QWORD *)a1 = &off_1E5A60370;
  *(_QWORD *)(a1 + 8) = v10;
  *(_QWORD *)(a1 + 16) = &unk_1E5A604F8;
  *(_QWORD *)(a1 + 24) = a2;
  AG::Encoder::Encoder(a1 + 32, a1 + 16, 0x10000);
  *(_QWORD *)(a1 + 112) = 0;
  *(_DWORD *)(a1 + 104) = a3;
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  util::Heap::Heap((util::Heap *)(a1 + 136), (char *)(a1 + 168), 256, 0);
  *(_QWORD *)(a1 + 520) = 0;
  *(_BYTE *)(a1 + 528) = 0;
  *(_QWORD *)(a1 + 532) = 1;
  *(_OWORD *)(a1 + 544) = 0u;
  if (a5)
  {
    v11 = *(_QWORD *)(a1 + 120);
    v12 = 8 * a5;
    do
    {
      v13 = strdup(*a4);
      v14 = v11 + 1;
      if (*(_QWORD *)(a1 + 128) < v11 + 1)
      {
        AG::vector<std::unique_ptr<char const,util::free_deleter>,0ul,unsigned long>::reserve_slow(a1 + 112, v14);
        v11 = *(_QWORD *)(a1 + 120);
        v14 = v11 + 1;
      }
      *(_QWORD *)(*(_QWORD *)(a1 + 112) + 8 * v11) = v13;
      *(_QWORD *)(a1 + 120) = v14;
      ++a4;
      v11 = v14;
      v12 -= 8;
    }
    while (v12);
  }
  array = AGGraphCreate;
  backtrace_image_offsets(&array, &image_offsets, 1);
  uuid_copy((unsigned __int8 *)(a1 + 504), image_offsets.uuid);
  return a1;
}

void sub_1AB93EBA4(_Unwind_Exception *a1)
{
  AG::Encoder *v1;
  uint64_t v2;
  uint64_t v3;
  util::Heap *v4;
  util::UntypedTable *v5;
  void *v7;
  uint64_t v8;

  v7 = *(void **)(v3 + 544);
  if (v7)
    free(v7);
  v8 = *(_QWORD *)(v3 + 520);
  *(_QWORD *)(v3 + 520) = 0;
  if (v8)
    MEMORY[0x1AF431538](v8, 0x1000C4077774924);
  util::UntypedTable::~UntypedTable(v5);
  util::InlineHeap<256ul>::~InlineHeap(v4);
  AG::vector<std::unique_ptr<char const,util::free_deleter>,0ul,unsigned long>::~vector(v2);
  AG::Encoder::~Encoder(v1);
  _Unwind_Resume(a1);
}

uint64_t AG::`anonymous namespace'::uuid_hash(AG::_anonymous_namespace_ *this, unsigned __int8 *a2)
{
  return *(_QWORD *)this;
}

BOOL AG::`anonymous namespace'::uuid_equal(AG::_anonymous_namespace_ *this, unsigned __int8 *a2, unsigned __int8 *a3)
{
  return uuid_compare((const unsigned __int8 *)this, a2) == 0;
}

util::Heap *util::InlineHeap<256ul>::~InlineHeap(util::Heap *a1)
{
  util::Heap::reset(a1, 0, 0);
  return a1;
}

uint64_t AG::vector<std::unique_ptr<char const,util::free_deleter>,0ul,unsigned long>::~vector(uint64_t a1)
{
  unint64_t v2;
  _QWORD *v3;
  unint64_t i;
  void *v5;

  v3 = *(_QWORD **)a1;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2)
  {
    for (i = 0; i < v2; ++i)
    {
      v5 = (void *)v3[i];
      v3[i] = 0;
      if (v5)
      {
        free(v5);
        v2 = *(_QWORD *)(a1 + 8);
      }
    }
    v3 = *(_QWORD **)a1;
  }
  if (v3)
    free(v3);
  return a1;
}

void AG::Encoder::~Encoder(AG::Encoder *this)
{
  void *v2;
  void *v3;

  v2 = (void *)*((_QWORD *)this + 6);
  if (v2)
    free(v2);
  v3 = (void *)*((_QWORD *)this + 3);
  if (v3)
    free(v3);
}

void AG::Graph::TraceRecorder::~TraceRecorder(AG::Graph::TraceRecorder *this)
{
  void *v2;
  uint64_t v3;
  unint64_t v4;
  _QWORD *v5;
  unint64_t i;
  void *v7;
  void *v8;
  void *v9;

  AG::Encoder::flush((uint64_t *)this + 4);
  v2 = (void *)*((_QWORD *)this + 68);
  if (v2)
    free(v2);
  v3 = *((_QWORD *)this + 65);
  *((_QWORD *)this + 65) = 0;
  if (v3)
    MEMORY[0x1AF431538](v3, 0x1000C4077774924);
  util::UntypedTable::~UntypedTable((AG::Graph::TraceRecorder *)((char *)this + 424));
  util::Heap::reset((AG::Graph::TraceRecorder *)((char *)this + 136), 0, 0);
  v5 = (_QWORD *)*((_QWORD *)this + 14);
  v4 = *((_QWORD *)this + 15);
  if (v4)
  {
    for (i = 0; i < v4; ++i)
    {
      v7 = (void *)v5[i];
      v5[i] = 0;
      if (v7)
      {
        free(v7);
        v4 = *((_QWORD *)this + 15);
      }
    }
    v5 = (_QWORD *)*((_QWORD *)this + 14);
  }
  if (v5)
    free(v5);
  v8 = (void *)*((_QWORD *)this + 10);
  if (v8)
    free(v8);
  v9 = (void *)*((_QWORD *)this + 7);
  if (v9)
    free(v9);
}

{
  AG::Graph::TraceRecorder::~TraceRecorder(this);
  JUMPOUT(0x1AF431538);
}

void __clang_call_terminate(void *a1)
{
  __cxa_begin_catch(a1);
  std::terminate();
}

void AG::Graph::TraceRecorder::field_timestamp(AG::Graph::TraceRecorder *this, AG::Encoder *a2)
{
  double v3;
  uint64_t v4;

  v3 = AG::current_time(this);
  if (v3 != 0.0)
  {
    v4 = *(_QWORD *)&v3;
    AG::Encoder::encode_varint(a2, 0x11uLL);
    AG::Encoder::encode_fixed64(a2, v4);
  }
}

void AG::Graph::TraceRecorder::field_backtrace(AG::Graph::TraceRecorder *this, AG::Encoder *a2, uint64_t a3)
{
  int v6;
  unsigned __int8 v7;
  int v8;
  uint64_t v9;
  image_offset *p_image_offsets;
  unint64_t v11;
  unsigned int v12;
  unint64_t v13;
  char *v14;
  const void *v15;
  const char *dli_fname;
  size_t v17;
  unint64_t v18;
  void *dli_fbase;
  uint64_t v20;
  kern_return_t v21;
  mach_vm_size_t v22;
  unint64_t offset;
  uint64_t v24;
  util::UntypedTable *v25;
  Dl_info v26;
  mach_port_t object_name;
  mach_msg_type_number_t infoCnt;
  int info[9];
  mach_vm_size_t size;
  mach_vm_address_t address;
  image_offset image_offsets;
  void *array[2];
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  uuid_string_t out;
  uint64_t v66;

  v66 = *MEMORY[0x1E0C80C00];
  if ((*((_BYTE *)this + 104) & 4) != 0)
  {
    v64 = 0u;
    v63 = 0u;
    v62 = 0u;
    v61 = 0u;
    v60 = 0u;
    v59 = 0u;
    v58 = 0u;
    v57 = 0u;
    v56 = 0u;
    v55 = 0u;
    v54 = 0u;
    v53 = 0u;
    v52 = 0u;
    v51 = 0u;
    v50 = 0u;
    v49 = 0u;
    v48 = 0u;
    v47 = 0u;
    v46 = 0u;
    v45 = 0u;
    v44 = 0u;
    v43 = 0u;
    v42 = 0u;
    v41 = 0u;
    v40 = 0u;
    v39 = 0u;
    v38 = 0u;
    v37 = 0u;
    v36 = 0u;
    v35 = 0u;
    v34 = 0u;
    *(_OWORD *)array = 0u;
    v6 = backtrace(array, 64);
    backtrace_image_offsets(array, &image_offsets, v6);
    if ((v7 & 1) == 0
    {
      AG::Graph::TraceRecorder::field_backtrace(AG::Encoder &,unsigned long)::n_stack_frames = AG::Graph::TraceRecorder::field_backtrace(AG::Encoder &,unsigned long)::$_0::operator()();
    }
    if (v6 >= 1)
    {
      v8 = AG::Graph::TraceRecorder::field_backtrace(AG::Encoder &,unsigned long)::n_stack_frames;
      if (AG::Graph::TraceRecorder::field_backtrace(AG::Encoder &,unsigned long)::n_stack_frames >= 1)
      {
        v9 = 0;
        p_image_offsets = &image_offsets;
        v24 = (8 * a3) | 2;
        v25 = (AG::Graph::TraceRecorder *)((char *)this + 424);
        v11 = v6;
        do
        {
          if (p_image_offsets->offset
            && !uuid_is_null(p_image_offsets->uuid)
            && uuid_compare(p_image_offsets->uuid, (const unsigned __int8 *)this + 504))
          {
            AG::Encoder::encode_varint(a2, v24);
            AG::Encoder::begin_length_delimited(a2);
            *(_QWORD *)out = 0;
            v12 = util::UntypedTable::lookup(v25, (uint64_t *)p_image_offsets, (void **)out);
            if (*(_QWORD *)out)
            {
              v13 = v12;
            }
            else
            {
              v13 = *((unsigned int *)this + 120);
              v14 = util::Heap::alloc_((AG::Graph::TraceRecorder *)((char *)this + 136), 0x10uLL);
              *(_OWORD *)v14 = *(_OWORD *)p_image_offsets->uuid;
              util::UntypedTable::insert(v25, v14, (void *)v13);
              v15 = array[v9];
              AG::Encoder::encode_varint(a2, 0x1AuLL);
              AG::Encoder::begin_length_delimited(a2);
              memset(out, 0, sizeof(out));
              uuid_unparse((const unsigned __int8 *)v14, out);
              AG::Encoder::encode_varint(a2, 0xAuLL);
              AG::Encoder::encode_data(a2, out, 0x24uLL);
              if (dladdr(v15, &v26))
              {
                dli_fname = v26.dli_fname;
                if (v26.dli_fname)
                {
                  v17 = strlen(v26.dli_fname);
                  if (v17)
                  {
                    v18 = v17;
                    AG::Encoder::encode_varint(a2, 0x12uLL);
                    AG::Encoder::encode_data(a2, dli_fname, v18);
                  }
                }
                dli_fbase = v26.dli_fbase;
                if (v26.dli_fbase)
                {
                  AG::Encoder::encode_varint(a2, 0x18uLL);
                  AG::Encoder::encode_varint(a2, (unint64_t)dli_fbase);
                  v20 = ~*MEMORY[0x1E0C85AC0];
                  size = 0;
                  address = v20 & (uint64_t)v26.dli_fbase;
                  object_name = 0;
                  infoCnt = 9;
                  v21 = mach_vm_region(*MEMORY[0x1E0C83DA0], &address, &size, 9, info, &infoCnt, &object_name);
                  if (object_name)
                    mach_port_deallocate(*MEMORY[0x1E0C83DA0], object_name);
                  if (!v21)
                  {
                    v22 = size;
                    if (size)
                    {
                      AG::Encoder::encode_varint(a2, 0x20uLL);
                      AG::Encoder::encode_varint(a2, v22);
                    }
                  }
                }
              }
              AG::Encoder::end_length_delimited(a2);
            }
            if (v13)
            {
              AG::Encoder::encode_varint(a2, 8uLL);
              AG::Encoder::encode_varint(a2, v13);
            }
            offset = p_image_offsets->offset;
            if ((_DWORD)offset)
            {
              AG::Encoder::encode_varint(a2, 0x10uLL);
              AG::Encoder::encode_varint(a2, offset);
            }
            AG::Encoder::end_length_delimited(a2);
            --v8;
          }
          if (++v9 >= v11)
            break;
          ++p_image_offsets;
        }
        while (v8 > 0);
      }
    }
  }
}

uint64_t AG::Graph::TraceRecorder::field_backtrace(AG::Encoder &,unsigned long)::$_0::operator()()
{
  char *v0;

  v0 = getenv("AG_TRACE_STACK_FRAMES");
  if (v0)
    return atoi(v0);
  else
    return 8;
}

_QWORD *AG::Graph::TraceRecorder::encode_stack(_QWORD *this)
{
  uint64_t v1;
  uint64_t v2;
  AG::Encoder *v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v1 = AG::Graph::_current_update_key;
  v2 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v1);
  if (v2)
  {
    v3 = (AG::Encoder *)(this + 4);
    AG::Encoder::encode_varint(this + 4, 0x2AuLL);
    AG::Encoder::begin_length_delimited(v3);
    do
    {
      v4 = v2 & 0xFFFFFFFFFFFFFFFELL;
      v5 = *(_QWORD *)((v2 & 0xFFFFFFFFFFFFFFFELL) + 104);
      if (v5)
      {
        v6 = 8 * v5 - 4;
        do
        {
          AG::Encoder::encode_varint(v3, 0xAuLL);
          AG::Encoder::begin_length_delimited(v3);
          v7 = *(_QWORD *)(v4 + 96);
          if (v7)
            v8 = *(_QWORD *)(v4 + 96);
          else
            v8 = v4 + 32;
          v9 = *(unsigned int *)(v8 + v6 - 4);
          if ((_DWORD)v9)
          {
            AG::Encoder::encode_varint(v3, 8uLL);
            AG::Encoder::encode_varint(v3, v9);
            v7 = *(_QWORD *)(v4 + 96);
          }
          if (v7)
            v10 = v7;
          else
            v10 = v4 + 32;
          if ((*(_BYTE *)(v10 + v6) & 1) != 0)
          {
            AG::Encoder::encode_varint(v3, 0x10uLL);
            AG::Encoder::encode_varint(v3, 1uLL);
            v7 = *(_QWORD *)(v4 + 96);
          }
          if (!v7)
            v7 = v4 + 32;
          if ((*(_BYTE *)(v7 + v6) & 2) != 0)
          {
            AG::Encoder::encode_varint(v3, 0x18uLL);
            AG::Encoder::encode_varint(v3, 1uLL);
          }
          --v5;
          AG::Encoder::end_length_delimited(v3);
          v6 -= 8;
        }
        while (v5);
      }
      v2 = *(_QWORD *)(v4 + 16);
    }
    while (v2);
    return AG::Encoder::end_length_delimited(v3);
  }
  return this;
}

_QWORD *AG::Graph::TraceRecorder::encode_types(_QWORD *this)
{
  unsigned int v1;
  unsigned int v2;
  _QWORD *v3;
  AG::Encoder *v4;
  uint64_t v5;
  const char *v6;
  size_t v7;
  unint64_t v8;
  const char *v9;
  size_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;

  v1 = *(_DWORD *)(this[3] + 136);
  v2 = *((_DWORD *)this + 133);
  if (v1 > v2)
  {
    v3 = this;
    v4 = (AG::Encoder *)(this + 4);
    do
    {
      v5 = *(_QWORD *)(*(_QWORD *)(v3[3] + 128) + 8 * v2);
      AG::Encoder::encode_varint(v4, 0x1AuLL);
      AG::Encoder::begin_length_delimited(v4);
      if (v2)
      {
        AG::Encoder::encode_varint(v4, 8uLL);
        AG::Encoder::encode_varint(v4, v2);
      }
      v6 = (const char *)AG::swift::metadata::name(*(AG::swift::metadata **)v5, 0);
      v7 = strlen(v6);
      if (v7)
      {
        v8 = v7;
        AG::Encoder::encode_varint(v4, 0x12uLL);
        AG::Encoder::encode_data(v4, v6, v8);
      }
      v9 = (const char *)AG::swift::metadata::name(*(AG::swift::metadata **)(v5 + 8), 0);
      v10 = strlen(v9);
      if (v10)
      {
        v11 = v10;
        AG::Encoder::encode_varint(v4, 0x1AuLL);
        AG::Encoder::encode_data(v4, v9, v11);
      }
      v12 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v5 - 8) + 64);
      if (v12)
      {
        AG::Encoder::encode_varint(v4, 0x20uLL);
        AG::Encoder::encode_varint(v4, v12);
      }
      v13 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v5 + 8) - 8) + 64);
      if (v13)
      {
        AG::Encoder::encode_varint(v4, 0x28uLL);
        AG::Encoder::encode_varint(v4, v13);
      }
      v14 = *(unsigned int *)(v5 + 40);
      if ((_DWORD)v14)
      {
        AG::Encoder::encode_varint(v4, 0x30uLL);
        AG::Encoder::encode_varint(v4, v14);
      }
      this = AG::Encoder::end_length_delimited(v4);
      v2 = *((_DWORD *)v3 + 133) + 1;
      *((_DWORD *)v3 + 133) = v2;
    }
    while (v1 > v2);
  }
  return this;
}

uint64_t AG::Graph::TraceRecorder::encode_keys(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  unsigned int v3;
  unint64_t i;
  const char *v5;
  unint64_t v6;
  size_t v7;
  unint64_t v8;

  v1 = *(_QWORD *)(*(_QWORD *)(this + 24) + 336);
  if (v1)
  {
    v2 = this;
    v3 = *(_DWORD *)(v1 + 8);
    for (i = *(unsigned int *)(this + 536); v3 > i; *(_DWORD *)(v2 + 536) = i)
    {
      this = AG::Graph::key_name(*(AG::Graph **)(v2 + 24), (const char *)i);
      if (this)
      {
        v5 = (const char *)this;
        v6 = *(unsigned int *)(v2 + 536);
        AG::Encoder::encode_varint((_QWORD *)(v2 + 32), 0x22uLL);
        AG::Encoder::begin_length_delimited((_QWORD *)(v2 + 32));
        if ((_DWORD)v6)
        {
          AG::Encoder::encode_varint((_QWORD *)(v2 + 32), 8uLL);
          AG::Encoder::encode_varint((_QWORD *)(v2 + 32), v6);
        }
        v7 = strlen(v5);
        if (v7)
        {
          v8 = v7;
          AG::Encoder::encode_varint((_QWORD *)(v2 + 32), 0x12uLL);
          AG::Encoder::encode_data((AG::Encoder *)(v2 + 32), v5, v8);
        }
        this = (uint64_t)AG::Encoder::end_length_delimited((AG::Encoder *)(v2 + 32));
      }
      i = (*(_DWORD *)(v2 + 536) + 1);
    }
  }
  return this;
}

_QWORD *AG::Graph::TraceRecorder::encode_snapshot(_QWORD *this)
{
  _QWORD *v1;
  AG::Graph::TraceRecorder *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  AG::Graph::TraceRecorder *v8;

  if ((this[13] & 0x10) == 0)
  {
    v1 = this;
    AG::Graph::TraceRecorder::encode_types(this);
    AG::Graph::TraceRecorder::encode_keys((uint64_t)v1);
    AG::Encoder::encode_varint(v1 + 4, 0xAuLL);
    AG::Encoder::begin_length_delimited(v1 + 4);
    AG::Encoder::encode_varint(v1 + 4, 8uLL);
    v2 = (AG::Graph::TraceRecorder *)AG::Encoder::encode_varint(v1 + 4, 0x11uLL);
    AG::Graph::TraceRecorder::field_timestamp(v2, (AG::Encoder *)(v1 + 4));
    AG::Encoder::end_length_delimited((AG::Encoder *)(v1 + 4));
    v3 = v1[3];
    v4 = *(unsigned int *)(v3 + 352);
    if ((_DWORD)v4)
    {
      v5 = *(_QWORD *)(v3 + 344);
      v6 = 8 * v4;
      do
      {
        v7 = *(_QWORD **)v5;
        if (!*(_BYTE *)(*(_QWORD *)v5 + 104))
        {
          AG::Encoder::encode_varint(v1 + 4, 0x12uLL);
          AG::Encoder::begin_length_delimited(v1 + 4);
          AG::Subgraph::encode(v7, (AG::Encoder *)(v1 + 4));
          AG::Encoder::end_length_delimited((AG::Encoder *)(v1 + 4));
        }
        v5 += 8;
        v6 -= 8;
      }
      while (v6);
    }
    AG::Graph::TraceRecorder::encode_stack(v1);
    AG::Encoder::encode_varint(v1 + 4, 0xAuLL);
    AG::Encoder::begin_length_delimited(v1 + 4);
    AG::Encoder::encode_varint(v1 + 4, 8uLL);
    v8 = (AG::Graph::TraceRecorder *)AG::Encoder::encode_varint(v1 + 4, 0x12uLL);
    AG::Graph::TraceRecorder::field_timestamp(v8, (AG::Encoder *)(v1 + 4));
    return AG::Encoder::end_length_delimited((AG::Encoder *)(v1 + 4));
  }
  return this;
}

uint64_t AG::Graph::TraceRecorder::flush_encoder(const char **this, AG::Encoder *a2)
{
  uint64_t result;
  int v5;
  char *v6;
  const char *v7;
  const char *v8;
  const char *v9;
  char *v10;
  const char *v11;
  int v12;
  AG *v13;
  NSObject *v15;
  const char *v16;
  FILE *v17;
  size_t v18;
  char *v19;
  ssize_t v20;
  _BYTE buf[24];
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  if (*((_BYTE *)this + 528))
  {
    result = open(this[65], 9, 438);
    v5 = result;
  }
  else
  {
    *((_BYTE *)this + 528) = 1;
    v6 = getenv("AG_TRACE_FILE");
    if (v6)
      v7 = v6;
    else
      v7 = "trace";
    v8 = "";
    v9 = "";
    if (*v7 != 47)
    {
      v10 = getenv("TMPDIR");
      if (!v10 || (v11 = v10, !*v10))
        v11 = "/tmp";
      if (v11[strlen(v11) - 1] == 47)
        v9 = "";
      else
        v9 = "/";
      v8 = v11;
    }
    v12 = 1;
    while (1)
    {
      *(_QWORD *)buf = 0;
      asprintf((char **)buf, "%s%s%s-%04d.ag-trace", v8, v9, v7, v12);
      v5 = open(*(const char **)buf, 2569, 438);
      if ((v5 & 0x80000000) == 0)
        break;
      free(*(void **)buf);
      v13 = (AG *)__error();
      if (*(_DWORD *)v13 == 17 && v12++ != 999)
        continue;
      goto LABEL_22;
    }
    v13 = (AG *)this[65];
    this[65] = *(const char **)buf;
    if (v13)
      v13 = (AG *)MEMORY[0x1AF431538](v13, 0x1000C4077774924);
LABEL_22:
    if (this[65])
    {
      v15 = AG::misc_log(v13);
      if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
      {
        v16 = this[65];
        *(_DWORD *)buf = 136315138;
        *(_QWORD *)&buf[4] = v16;
        _os_log_impl(&dword_1AB92D000, v15, OS_LOG_TYPE_DEFAULT, "created trace file %s", buf, 0xCu);
      }
      v17 = (FILE *)*MEMORY[0x1E0C80C10];
      getpid();
      result = fprintf(v17, "created trace file \"%s\" (pid %d)\n");
    }
    else
    {
      result = fprintf((FILE *)*MEMORY[0x1E0C80C10], "failed to create trace file: %s%s%s-XXXX.ag-trace\n");
    }
  }
  if (v5 == -1)
    return result;
  v18 = *((_QWORD *)a2 + 4);
  if (!v18)
    return close(v5);
  v19 = (char *)*((_QWORD *)a2 + 3);
  while (1)
  {
    v20 = write(v5, v19, v18);
    if (v20 < 0)
      break;
    v19 += v20;
    v18 -= v20;
LABEL_33:
    if (!v18)
      return close(v5);
  }
  if (*__error() == 4)
    goto LABEL_33;
  unlink(this[65]);
  return close(v5);
}

uint64_t `non-virtual thunk to'AG::Graph::TraceRecorder::flush_encoder(const char **this, AG::Encoder *a2)
{
  return AG::Graph::TraceRecorder::flush_encoder(this - 2, a2);
}

_QWORD *AG::Graph::TraceRecorder::begin_trace(AG::Graph::TraceRecorder *this, AG::Graph *a2)
{
  AG::Encoder *v2;
  AG::Graph::TraceRecorder *v3;

  v2 = (AG::Graph::TraceRecorder *)((char *)this + 32);
  AG::Encoder::encode_varint((_QWORD *)this + 4, 0xAuLL);
  AG::Encoder::begin_length_delimited(v2);
  AG::Encoder::encode_varint(v2, 8uLL);
  v3 = (AG::Graph::TraceRecorder *)AG::Encoder::encode_varint(v2, 1uLL);
  AG::Graph::TraceRecorder::field_timestamp(v3, v2);
  return AG::Encoder::end_length_delimited(v2);
}

_QWORD *AG::Graph::TraceRecorder::end_trace(AG::Graph::TraceRecorder *this, AG::Graph *a2)
{
  AG::Encoder *v3;
  AG::Graph::TraceRecorder *v4;

  v3 = (AG::Graph::TraceRecorder *)((char *)this + 32);
  AG::Encoder::encode_varint((_QWORD *)this + 4, 0xAuLL);
  AG::Encoder::begin_length_delimited(v3);
  AG::Encoder::encode_varint(v3, 8uLL);
  v4 = (AG::Graph::TraceRecorder *)AG::Encoder::encode_varint(v3, 2uLL);
  AG::Graph::TraceRecorder::field_timestamp(v4, v3);
  AG::Encoder::end_length_delimited(v3);
  return AG::Graph::TraceRecorder::encode_snapshot(this);
}

uint64_t *AG::Graph::TraceRecorder::sync_trace(AG::Graph::TraceRecorder *this)
{
  AG::Graph::TraceRecorder::encode_snapshot(this);
  return AG::Encoder::flush((uint64_t *)this + 4);
}

void AG::Graph::TraceRecorder::log_message_v(AG::Graph::TraceRecorder *this, const char *__s1, va_list a3)
{
  int v6;
  void *v7;
  void **v8;
  AG::Graph::TraceRecorder *v9;
  size_t v10;
  unint64_t v11;
  void *v12;
  va_list v13;

  v12 = 0;
  v13 = a3;
  v6 = strcmp(__s1, "%s");
  if (v6)
  {
    vasprintf((char **)&v12, __s1, a3);
    v7 = v12;
    if (!v12)
      return;
  }
  else
  {
    v8 = (void **)v13;
    v13 += 8;
    v7 = *v8;
    v12 = v7;
    if (!v7)
      return;
  }
  AG::Encoder::encode_varint((_QWORD *)this + 4, 0xAuLL);
  AG::Encoder::begin_length_delimited((_QWORD *)this + 4);
  AG::Encoder::encode_varint((_QWORD *)this + 4, 8uLL);
  v9 = (AG::Graph::TraceRecorder *)AG::Encoder::encode_varint((_QWORD *)this + 4, 0x33uLL);
  AG::Graph::TraceRecorder::field_timestamp(v9, (AG::Graph::TraceRecorder *)((char *)this + 32));
  AG::Graph::TraceRecorder::field_backtrace(this, (AG::Graph::TraceRecorder *)((char *)this + 32), 8);
  v10 = strlen((const char *)v7);
  if (v10)
  {
    v11 = v10;
    AG::Encoder::encode_varint((_QWORD *)this + 4, 0x4AuLL);
    AG::Encoder::encode_data((AG::Graph::TraceRecorder *)((char *)this + 32), v7, v11);
  }
  AG::Encoder::end_length_delimited((AG::Graph::TraceRecorder *)((char *)this + 32));
  AG::Graph::TraceRecorder::encode_stack(this);
  if (v6)
    free(v12);
}

_QWORD *AG::Graph::TraceRecorder::begin_update(_QWORD *this, AG::Subgraph *a2, unsigned int a3)
{
  AG::Encoder *v5;
  AG::Graph::TraceRecorder *v6;
  int v7;
  unint64_t v8;

  if ((this[13] & 0x10) == 0)
  {
    v5 = (AG::Encoder *)(this + 4);
    AG::Encoder::encode_varint(this + 4, 0xAuLL);
    AG::Encoder::begin_length_delimited(v5);
    AG::Encoder::encode_varint(v5, 8uLL);
    v6 = (AG::Graph::TraceRecorder *)AG::Encoder::encode_varint(v5, 3uLL);
    AG::Graph::TraceRecorder::field_timestamp(v6, v5);
    v7 = *((_DWORD *)a2 + 6);
    v8 = v7 & 0x7FFFFFFF;
    if ((v7 & 0x7FFFFFFF) != 0)
    {
      AG::Encoder::encode_varint(v5, 0x18uLL);
      AG::Encoder::encode_varint(v5, v8);
    }
    if (a3)
    {
      AG::Encoder::encode_varint(v5, 0x20uLL);
      AG::Encoder::encode_varint(v5, a3);
    }
    return AG::Encoder::end_length_delimited(v5);
  }
  return this;
}

_QWORD *AG::Graph::TraceRecorder::end_update(_QWORD *this, AG::Subgraph *a2)
{
  AG::Encoder *v3;
  AG::Graph::TraceRecorder *v4;
  int v5;
  unint64_t v6;

  if ((this[13] & 0x10) == 0)
  {
    v3 = (AG::Encoder *)(this + 4);
    AG::Encoder::encode_varint(this + 4, 0xAuLL);
    AG::Encoder::begin_length_delimited(v3);
    AG::Encoder::encode_varint(v3, 8uLL);
    v4 = (AG::Graph::TraceRecorder *)AG::Encoder::encode_varint(v3, 4uLL);
    AG::Graph::TraceRecorder::field_timestamp(v4, v3);
    v5 = *((_DWORD *)a2 + 6);
    v6 = v5 & 0x7FFFFFFF;
    if ((v5 & 0x7FFFFFFF) != 0)
    {
      AG::Encoder::encode_varint(v3, 0x18uLL);
      AG::Encoder::encode_varint(v3, v6);
    }
    return AG::Encoder::end_length_delimited(v3);
  }
  return this;
}

_QWORD *AG::Graph::TraceRecorder::begin_update(_QWORD *result, uint64_t a2, unsigned int a3, unsigned int a4)
{
  AG::Encoder *v6;
  AG::Graph::TraceRecorder *v7;

  if ((result[13] & 0x10) == 0)
  {
    v6 = (AG::Encoder *)(result + 4);
    AG::Encoder::encode_varint(result + 4, 0xAuLL);
    AG::Encoder::begin_length_delimited(v6);
    AG::Encoder::encode_varint(v6, 8uLL);
    v7 = (AG::Graph::TraceRecorder *)AG::Encoder::encode_varint(v6, 5uLL);
    AG::Graph::TraceRecorder::field_timestamp(v7, v6);
    if (a3)
    {
      AG::Encoder::encode_varint(v6, 0x18uLL);
      AG::Encoder::encode_varint(v6, a3);
    }
    if (a4)
    {
      AG::Encoder::encode_varint(v6, 0x20uLL);
      AG::Encoder::encode_varint(v6, a4);
    }
    return AG::Encoder::end_length_delimited(v6);
  }
  return result;
}

_QWORD *AG::Graph::TraceRecorder::end_update(_QWORD *result, uint64_t a2, unsigned int a3, int a4)
{
  AG::Encoder *v6;
  AG::Graph::TraceRecorder *v7;

  if ((result[13] & 0x10) == 0)
  {
    v6 = (AG::Encoder *)(result + 4);
    AG::Encoder::encode_varint(result + 4, 0xAuLL);
    AG::Encoder::begin_length_delimited(v6);
    AG::Encoder::encode_varint(v6, 8uLL);
    v7 = (AG::Graph::TraceRecorder *)AG::Encoder::encode_varint(v6, 6uLL);
    AG::Graph::TraceRecorder::field_timestamp(v7, v6);
    if (a3)
    {
      AG::Encoder::encode_varint(v6, 0x18uLL);
      AG::Encoder::encode_varint(v6, a3);
    }
    if (a4 == 1)
    {
      AG::Encoder::encode_varint(v6, 0x20uLL);
      AG::Encoder::encode_varint(v6, 1uLL);
    }
    return AG::Encoder::end_length_delimited(v6);
  }
  return result;
}

_QWORD *AG::Graph::TraceRecorder::begin_update(_QWORD *result, unsigned int a2)
{
  AG::Encoder *v3;
  AG::Graph::TraceRecorder *v4;

  if ((result[13] & 0x10) == 0)
  {
    v3 = (AG::Encoder *)(result + 4);
    AG::Encoder::encode_varint(result + 4, 0xAuLL);
    AG::Encoder::begin_length_delimited(v3);
    AG::Encoder::encode_varint(v3, 8uLL);
    v4 = (AG::Graph::TraceRecorder *)AG::Encoder::encode_varint(v3, 7uLL);
    AG::Graph::TraceRecorder::field_timestamp(v4, v3);
    if (a2)
    {
      AG::Encoder::encode_varint(v3, 0x18uLL);
      AG::Encoder::encode_varint(v3, a2);
    }
    return AG::Encoder::end_length_delimited(v3);
  }
  return result;
}

_QWORD *AG::Graph::TraceRecorder::end_update(_QWORD *result, unsigned int a2, int a3)
{
  AG::Encoder *v5;
  AG::Graph::TraceRecorder *v6;

  if ((result[13] & 0x10) == 0)
  {
    v5 = (AG::Encoder *)(result + 4);
    AG::Encoder::encode_varint(result + 4, 0xAuLL);
    AG::Encoder::begin_length_delimited(v5);
    AG::Encoder::encode_varint(v5, 8uLL);
    v6 = (AG::Graph::TraceRecorder *)AG::Encoder::encode_varint(v5, 8uLL);
    AG::Graph::TraceRecorder::field_timestamp(v6, v5);
    if (a2)
    {
      AG::Encoder::encode_varint(v5, 0x18uLL);
      AG::Encoder::encode_varint(v5, a2);
    }
    if (a3)
    {
      AG::Encoder::encode_varint(v5, 0x20uLL);
      AG::Encoder::encode_varint(v5, 1uLL);
    }
    return AG::Encoder::end_length_delimited(v5);
  }
  return result;
}

_QWORD *AG::Graph::TraceRecorder::begin_update(_QWORD *this, AG::Graph::Context *a2)
{
  AG::Encoder *v3;
  AG::Graph::TraceRecorder *v4;
  unint64_t v5;

  if ((this[13] & 0x10) == 0)
  {
    v3 = (AG::Encoder *)(this + 4);
    AG::Encoder::encode_varint(this + 4, 0xAuLL);
    AG::Encoder::begin_length_delimited(v3);
    AG::Encoder::encode_varint(v3, 8uLL);
    v4 = (AG::Graph::TraceRecorder *)AG::Encoder::encode_varint(v3, 9uLL);
    AG::Graph::TraceRecorder::field_timestamp(v4, v3);
    v5 = *((unsigned int *)a2 + 4);
    if (v5)
    {
      AG::Encoder::encode_varint(v3, 0x18uLL);
      AG::Encoder::encode_varint(v3, v5);
    }
    return AG::Encoder::end_length_delimited(v3);
  }
  return this;
}

_QWORD *AG::Graph::TraceRecorder::end_update(_QWORD *this, AG::Graph::Context *a2)
{
  AG::Encoder *v3;
  AG::Graph::TraceRecorder *v4;
  unint64_t v5;

  if ((this[13] & 0x10) == 0)
  {
    v3 = (AG::Encoder *)(this + 4);
    AG::Encoder::encode_varint(this + 4, 0xAuLL);
    AG::Encoder::begin_length_delimited(v3);
    AG::Encoder::encode_varint(v3, 8uLL);
    v4 = (AG::Graph::TraceRecorder *)AG::Encoder::encode_varint(v3, 0xAuLL);
    AG::Graph::TraceRecorder::field_timestamp(v4, v3);
    v5 = *((unsigned int *)a2 + 4);
    if (v5)
    {
      AG::Encoder::encode_varint(v3, 0x18uLL);
      AG::Encoder::encode_varint(v3, v5);
    }
    return AG::Encoder::end_length_delimited(v3);
  }
  return this;
}

_QWORD *AG::Graph::TraceRecorder::begin_invalidation(_QWORD *result, uint64_t a2, unsigned int a3)
{
  AG::Encoder *v5;
  AG::Graph::TraceRecorder *v6;
  unint64_t v7;

  if ((result[13] & 0x12) == 2)
  {
    v5 = (AG::Encoder *)(result + 4);
    AG::Encoder::encode_varint(result + 4, 0xAuLL);
    AG::Encoder::begin_length_delimited(v5);
    AG::Encoder::encode_varint(v5, 8uLL);
    v6 = (AG::Graph::TraceRecorder *)AG::Encoder::encode_varint(v5, 0xBuLL);
    AG::Graph::TraceRecorder::field_timestamp(v6, v5);
    if (a3)
    {
      AG::Encoder::encode_varint(v5, 0x18uLL);
      AG::Encoder::encode_varint(v5, a3);
    }
    v7 = *(unsigned int *)(a2 + 16);
    if (v7)
    {
      AG::Encoder::encode_varint(v5, 0x20uLL);
      AG::Encoder::encode_varint(v5, v7);
    }
    return AG::Encoder::end_length_delimited(v5);
  }
  return result;
}

_QWORD *AG::Graph::TraceRecorder::end_invalidation(_QWORD *result, uint64_t a2, unsigned int a3)
{
  AG::Encoder *v5;
  AG::Graph::TraceRecorder *v6;
  unint64_t v7;

  if ((result[13] & 0x12) == 2)
  {
    v5 = (AG::Encoder *)(result + 4);
    AG::Encoder::encode_varint(result + 4, 0xAuLL);
    AG::Encoder::begin_length_delimited(v5);
    AG::Encoder::encode_varint(v5, 8uLL);
    v6 = (AG::Graph::TraceRecorder *)AG::Encoder::encode_varint(v5, 0xCuLL);
    AG::Graph::TraceRecorder::field_timestamp(v6, v5);
    if (a3)
    {
      AG::Encoder::encode_varint(v5, 0x18uLL);
      AG::Encoder::encode_varint(v5, a3);
    }
    v7 = *(unsigned int *)(a2 + 16);
    if (v7)
    {
      AG::Encoder::encode_varint(v5, 0x20uLL);
      AG::Encoder::encode_varint(v5, v7);
    }
    return AG::Encoder::end_length_delimited(v5);
  }
  return result;
}

_QWORD *AG::Graph::TraceRecorder::begin_modify(_QWORD *result, unsigned int a2)
{
  AG::Encoder *v3;
  AG::Graph::TraceRecorder *v4;

  if ((result[13] & 0x12) == 2)
  {
    v3 = (AG::Encoder *)(result + 4);
    AG::Encoder::encode_varint(result + 4, 0xAuLL);
    AG::Encoder::begin_length_delimited(v3);
    AG::Encoder::encode_varint(v3, 8uLL);
    v4 = (AG::Graph::TraceRecorder *)AG::Encoder::encode_varint(v3, 0xDuLL);
    AG::Graph::TraceRecorder::field_timestamp(v4, v3);
    if (a2)
    {
      AG::Encoder::encode_varint(v3, 0x18uLL);
      AG::Encoder::encode_varint(v3, a2);
    }
    return AG::Encoder::end_length_delimited(v3);
  }
  return result;
}

_QWORD *AG::Graph::TraceRecorder::end_modify(_QWORD *result, int a2)
{
  _QWORD *v3;
  AG::Encoder *v4;
  AG::Graph::TraceRecorder *v5;

  if ((result[13] & 0x12) == 2)
  {
    v3 = result;
    v4 = (AG::Encoder *)(result + 4);
    AG::Encoder::encode_varint(result + 4, 0xAuLL);
    AG::Encoder::begin_length_delimited(v4);
    AG::Encoder::encode_varint(v4, 8uLL);
    v5 = (AG::Graph::TraceRecorder *)AG::Encoder::encode_varint(v4, 0xEuLL);
    AG::Graph::TraceRecorder::field_timestamp(v5, v4);
    if (a2 || (v3[13] & 0x10) != 0)
    {
      AG::Encoder::encode_varint(v4, 0x18uLL);
      AG::Encoder::encode_varint(v4, 1uLL);
    }
    return AG::Encoder::end_length_delimited(v4);
  }
  return result;
}

_QWORD *AG::Graph::TraceRecorder::begin_event(_QWORD *result, unsigned int a2, unsigned int a3)
{
  AG::Encoder *v5;
  AG::Graph::TraceRecorder *v6;

  if ((result[13] & 0x10) == 0)
  {
    v5 = (AG::Encoder *)(result + 4);
    AG::Encoder::encode_varint(result + 4, 0xAuLL);
    AG::Encoder::begin_length_delimited(v5);
    AG::Encoder::encode_varint(v5, 8uLL);
    v6 = (AG::Graph::TraceRecorder *)AG::Encoder::encode_varint(v5, 0xFuLL);
    AG::Graph::TraceRecorder::field_timestamp(v6, v5);
    if (a2)
    {
      AG::Encoder::encode_varint(v5, 0x18uLL);
      AG::Encoder::encode_varint(v5, a2);
    }
    if (a3)
    {
      AG::Encoder::encode_varint(v5, 0x20uLL);
      AG::Encoder::encode_varint(v5, a3);
    }
    return AG::Encoder::end_length_delimited(v5);
  }
  return result;
}

_QWORD *AG::Graph::TraceRecorder::end_event(_QWORD *result, unsigned int a2, unsigned int a3)
{
  AG::Encoder *v5;
  AG::Graph::TraceRecorder *v6;

  if ((result[13] & 0x10) == 0)
  {
    v5 = (AG::Encoder *)(result + 4);
    AG::Encoder::encode_varint(result + 4, 0xAuLL);
    AG::Encoder::begin_length_delimited(v5);
    AG::Encoder::encode_varint(v5, 8uLL);
    v6 = (AG::Graph::TraceRecorder *)AG::Encoder::encode_varint(v5, 0x10uLL);
    AG::Graph::TraceRecorder::field_timestamp(v6, v5);
    if (a2)
    {
      AG::Encoder::encode_varint(v5, 0x18uLL);
      AG::Encoder::encode_varint(v5, a2);
    }
    if (a3)
    {
      AG::Encoder::encode_varint(v5, 0x20uLL);
      AG::Encoder::encode_varint(v5, a3);
    }
    return AG::Encoder::end_length_delimited(v5);
  }
  return result;
}

_QWORD *AG::Graph::TraceRecorder::created(_QWORD *this, AG::Graph::Context *a2)
{
  AG::Graph::TraceRecorder *v3;
  AG::Encoder *v4;
  unint64_t v5;

  if ((this[13] & 0x10) == 0)
  {
    v3 = (AG::Graph::TraceRecorder *)this;
    v4 = (AG::Encoder *)(this + 4);
    AG::Encoder::encode_varint(this + 4, 0xAuLL);
    AG::Encoder::begin_length_delimited(v4);
    AG::Encoder::encode_varint(v4, 8uLL);
    AG::Encoder::encode_varint(v4, 0x20uLL);
    v5 = *((_QWORD *)a2 + 2);
    if (v5)
    {
      AG::Encoder::encode_varint(v4, 0x18uLL);
      AG::Encoder::encode_varint(v4, v5);
    }
    AG::Graph::TraceRecorder::field_backtrace(v3, v4, 8);
    return AG::Encoder::end_length_delimited(v4);
  }
  return this;
}

_QWORD *AG::Graph::TraceRecorder::destroy(_QWORD *this, AG::Graph::Context *a2)
{
  AG::Graph::TraceRecorder *v3;
  AG::Encoder *v4;
  unint64_t v5;

  if ((this[13] & 0x10) == 0)
  {
    v3 = (AG::Graph::TraceRecorder *)this;
    v4 = (AG::Encoder *)(this + 4);
    AG::Encoder::encode_varint(this + 4, 0xAuLL);
    AG::Encoder::begin_length_delimited(v4);
    AG::Encoder::encode_varint(v4, 8uLL);
    AG::Encoder::encode_varint(v4, 0x21uLL);
    v5 = *((_QWORD *)a2 + 2);
    if (v5)
    {
      AG::Encoder::encode_varint(v4, 0x18uLL);
      AG::Encoder::encode_varint(v4, v5);
    }
    AG::Graph::TraceRecorder::field_backtrace(v3, v4, 8);
    return AG::Encoder::end_length_delimited(v4);
  }
  return this;
}

_QWORD *AG::Graph::TraceRecorder::needs_update(_QWORD *this, AG::Graph::Context *a2)
{
  AG::Encoder *v3;
  unint64_t v4;

  if ((this[13] & 0x12) == 2)
  {
    v3 = (AG::Encoder *)(this + 4);
    AG::Encoder::encode_varint(this + 4, 0xAuLL);
    AG::Encoder::begin_length_delimited(v3);
    AG::Encoder::encode_varint(v3, 8uLL);
    AG::Encoder::encode_varint(v3, 0x22uLL);
    v4 = *((_QWORD *)a2 + 2);
    if (v4)
    {
      AG::Encoder::encode_varint(v3, 0x18uLL);
      AG::Encoder::encode_varint(v3, v4);
    }
    return AG::Encoder::end_length_delimited(v3);
  }
  return this;
}

_QWORD *AG::Graph::TraceRecorder::created(_QWORD *this, AG::Subgraph *a2)
{
  AG::Graph::TraceRecorder *v3;
  AG::Encoder *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;

  if ((this[13] & 0x10) == 0)
  {
    v3 = (AG::Graph::TraceRecorder *)this;
    v4 = (AG::Encoder *)(this + 4);
    AG::Encoder::encode_varint(this + 4, 0xAuLL);
    AG::Encoder::begin_length_delimited(v4);
    AG::Encoder::encode_varint(v4, 8uLL);
    AG::Encoder::encode_varint(v4, 0x23uLL);
    v5 = *((_DWORD *)a2 + 6);
    v6 = v5 & 0x7FFFFFFF;
    if ((v5 & 0x7FFFFFFF) != 0)
    {
      AG::Encoder::encode_varint(v4, 0x18uLL);
      AG::Encoder::encode_varint(v4, v6);
    }
    v7 = *((_QWORD *)a2 + 6);
    if (v7)
    {
      AG::Encoder::encode_varint(v4, 0x20uLL);
      AG::Encoder::encode_varint(v4, v7);
    }
    AG::Graph::TraceRecorder::field_backtrace(v3, v4, 8);
    return AG::Encoder::end_length_delimited(v4);
  }
  return this;
}

_QWORD *AG::Graph::TraceRecorder::invalidate(_QWORD *this, AG::Subgraph *a2)
{
  AG::Graph::TraceRecorder *v3;
  AG::Encoder *v4;
  int v5;
  unint64_t v6;

  if ((this[13] & 0x10) == 0)
  {
    v3 = (AG::Graph::TraceRecorder *)this;
    v4 = (AG::Encoder *)(this + 4);
    AG::Encoder::encode_varint(this + 4, 0xAuLL);
    AG::Encoder::begin_length_delimited(v4);
    AG::Encoder::encode_varint(v4, 8uLL);
    AG::Encoder::encode_varint(v4, 0x24uLL);
    v5 = *((_DWORD *)a2 + 6);
    v6 = v5 & 0x7FFFFFFF;
    if ((v5 & 0x7FFFFFFF) != 0)
    {
      AG::Encoder::encode_varint(v4, 0x18uLL);
      AG::Encoder::encode_varint(v4, v6);
    }
    AG::Graph::TraceRecorder::field_backtrace(v3, v4, 8);
    AG::Encoder::end_length_delimited(v4);
    AG::Encoder::encode_varint(v4, 0x12uLL);
    AG::Encoder::begin_length_delimited(v4);
    AG::Subgraph::encode(a2, v4);
    return AG::Encoder::end_length_delimited(v4);
  }
  return this;
}

_QWORD *AG::Graph::TraceRecorder::destroy(_QWORD *this, AG::Subgraph *a2)
{
  AG::Graph::TraceRecorder *v3;
  AG::Encoder *v4;
  int v5;
  unint64_t v6;

  if ((this[13] & 0x10) == 0)
  {
    v3 = (AG::Graph::TraceRecorder *)this;
    v4 = (AG::Encoder *)(this + 4);
    AG::Encoder::encode_varint(this + 4, 0xAuLL);
    AG::Encoder::begin_length_delimited(v4);
    AG::Encoder::encode_varint(v4, 8uLL);
    AG::Encoder::encode_varint(v4, 0x35uLL);
    v5 = *((_DWORD *)a2 + 6);
    v6 = v5 & 0x7FFFFFFF;
    if ((v5 & 0x7FFFFFFF) != 0)
    {
      AG::Encoder::encode_varint(v4, 0x18uLL);
      AG::Encoder::encode_varint(v4, v6);
    }
    AG::Graph::TraceRecorder::field_backtrace(v3, v4, 8);
    return AG::Encoder::end_length_delimited(v4);
  }
  return this;
}

_QWORD *AG::Graph::TraceRecorder::add_child(_QWORD *this, AG::Subgraph *a2, AG::Subgraph *a3)
{
  AG::Encoder *v5;
  int v6;
  unint64_t v7;
  int v8;
  unint64_t v9;

  if ((this[13] & 0x10) == 0)
  {
    v5 = (AG::Encoder *)(this + 4);
    AG::Encoder::encode_varint(this + 4, 0xAuLL);
    AG::Encoder::begin_length_delimited(v5);
    AG::Encoder::encode_varint(v5, 8uLL);
    AG::Encoder::encode_varint(v5, 0x25uLL);
    v6 = *((_DWORD *)a2 + 6);
    v7 = v6 & 0x7FFFFFFF;
    if ((v6 & 0x7FFFFFFF) != 0)
    {
      AG::Encoder::encode_varint(v5, 0x18uLL);
      AG::Encoder::encode_varint(v5, v7);
    }
    v8 = *((_DWORD *)a3 + 6);
    v9 = v8 & 0x7FFFFFFF;
    if ((v8 & 0x7FFFFFFF) != 0)
    {
      AG::Encoder::encode_varint(v5, 0x20uLL);
      AG::Encoder::encode_varint(v5, v9);
    }
    return AG::Encoder::end_length_delimited(v5);
  }
  return this;
}

_QWORD *AG::Graph::TraceRecorder::remove_child(_QWORD *this, AG::Subgraph *a2, AG::Subgraph *a3)
{
  AG::Encoder *v5;
  int v6;
  unint64_t v7;
  int v8;
  unint64_t v9;

  if ((this[13] & 0x10) == 0)
  {
    v5 = (AG::Encoder *)(this + 4);
    AG::Encoder::encode_varint(this + 4, 0xAuLL);
    AG::Encoder::begin_length_delimited(v5);
    AG::Encoder::encode_varint(v5, 8uLL);
    AG::Encoder::encode_varint(v5, 0x26uLL);
    v6 = *((_DWORD *)a2 + 6);
    v7 = v6 & 0x7FFFFFFF;
    if ((v6 & 0x7FFFFFFF) != 0)
    {
      AG::Encoder::encode_varint(v5, 0x18uLL);
      AG::Encoder::encode_varint(v5, v7);
    }
    v8 = *((_DWORD *)a3 + 6);
    v9 = v8 & 0x7FFFFFFF;
    if ((v8 & 0x7FFFFFFF) != 0)
    {
      AG::Encoder::encode_varint(v5, 0x20uLL);
      AG::Encoder::encode_varint(v5, v9);
    }
    return AG::Encoder::end_length_delimited(v5);
  }
  return this;
}

_QWORD *AG::Graph::TraceRecorder::added(_QWORD *result, unsigned int a2)
{
  AG::Graph::TraceRecorder *v3;
  AG::Encoder *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;

  if ((result[13] & 0x10) == 0)
  {
    v3 = (AG::Graph::TraceRecorder *)result;
    v4 = (AG::Encoder *)(result + 4);
    AG::Encoder::encode_varint(result + 4, 0xAuLL);
    AG::Encoder::begin_length_delimited(v4);
    AG::Encoder::encode_varint(v4, 8uLL);
    AG::Encoder::encode_varint(v4, 0x27uLL);
    v5 = a2;
    if (a2)
    {
      AG::Encoder::encode_varint(v4, 0x18uLL);
      AG::Encoder::encode_varint(v4, a2);
    }
    v6 = AG::data::_shared_table_bytes;
    v7 = *(_DWORD *)(*(_QWORD *)(AG::data::_shared_table_bytes + (a2 & 0xFFFFFE00)) + 24);
    v8 = v7 & 0x7FFFFFFF;
    if ((v7 & 0x7FFFFFFF) != 0)
    {
      AG::Encoder::encode_varint(v4, 0x20uLL);
      AG::Encoder::encode_varint(v4, v8);
      v6 = AG::data::_shared_table_bytes;
    }
    v9 = *(unsigned int *)(v6 + v5);
    if (v9 >= 0x100)
    {
      v10 = v9 >> 8;
      AG::Encoder::encode_varint(v4, 0x28uLL);
      AG::Encoder::encode_varint(v4, v10);
    }
    AG::Graph::TraceRecorder::field_backtrace(v3, v4, 8);
    return AG::Encoder::end_length_delimited(v4);
  }
  return result;
}

_QWORD *AG::Graph::TraceRecorder::add_edge(_QWORD *result, unsigned int a2, unsigned int a3)
{
  AG::Graph::TraceRecorder *v5;
  AG::Encoder *v6;

  if ((result[13] & 0x10) == 0)
  {
    v5 = (AG::Graph::TraceRecorder *)result;
    v6 = (AG::Encoder *)(result + 4);
    AG::Encoder::encode_varint(result + 4, 0xAuLL);
    AG::Encoder::begin_length_delimited(v6);
    AG::Encoder::encode_varint(v6, 8uLL);
    AG::Encoder::encode_varint(v6, 0x2FuLL);
    if (a2)
    {
      AG::Encoder::encode_varint(v6, 0x18uLL);
      AG::Encoder::encode_varint(v6, a2);
    }
    if (a3)
    {
      AG::Encoder::encode_varint(v6, 0x20uLL);
      AG::Encoder::encode_varint(v6, a3);
    }
    AG::Graph::TraceRecorder::field_backtrace(v5, v6, 8);
    return AG::Encoder::end_length_delimited(v6);
  }
  return result;
}

_QWORD *AG::Graph::TraceRecorder::remove_edge(_QWORD *result, unsigned int a2, uint64_t a3)
{
  AG::Graph::TraceRecorder *v3;
  unint64_t v4;
  unint64_t v5;
  AG::Encoder *v6;

  if ((result[13] & 0x10) == 0)
  {
    v3 = (AG::Graph::TraceRecorder *)result;
    v4 = a2;
    v5 = *(unsigned int *)(AG::data::_shared_table_bytes
                         + *(unsigned int *)(AG::data::_shared_table_bytes + a2 + 16)
                         + 5 * a3);
    v6 = (AG::Encoder *)(result + 4);
    AG::Encoder::encode_varint(result + 4, 0xAuLL);
    AG::Encoder::begin_length_delimited(v6);
    AG::Encoder::encode_varint(v6, 8uLL);
    AG::Encoder::encode_varint(v6, 0x30uLL);
    if (v4)
    {
      AG::Encoder::encode_varint(v6, 0x18uLL);
      AG::Encoder::encode_varint(v6, v4);
    }
    if ((_DWORD)v5)
    {
      AG::Encoder::encode_varint(v6, 0x20uLL);
      AG::Encoder::encode_varint(v6, v5);
    }
    AG::Graph::TraceRecorder::field_backtrace(v3, v6, 8);
    return AG::Encoder::end_length_delimited(v6);
  }
  return result;
}

_QWORD *AG::Graph::TraceRecorder::set_edge_pending(_QWORD *result, unsigned int a2, uint64_t a3, int a4)
{
  unint64_t v5;
  unint64_t v6;
  AG::Encoder *v7;

  if ((result[13] & 0x12) == 2)
  {
    v5 = a2;
    v6 = *(unsigned int *)(AG::data::_shared_table_bytes
                         + *(unsigned int *)(AG::data::_shared_table_bytes + a2 + 16)
                         + 5 * a3);
    v7 = (AG::Encoder *)(result + 4);
    AG::Encoder::encode_varint(result + 4, 0xAuLL);
    AG::Encoder::begin_length_delimited(v7);
    AG::Encoder::encode_varint(v7, 8uLL);
    AG::Encoder::encode_varint(v7, 0x31uLL);
    if (v5)
    {
      AG::Encoder::encode_varint(v7, 0x18uLL);
      AG::Encoder::encode_varint(v7, v5);
    }
    if ((_DWORD)v6)
    {
      AG::Encoder::encode_varint(v7, 0x20uLL);
      AG::Encoder::encode_varint(v7, v6);
    }
    if (a4)
    {
      AG::Encoder::encode_varint(v7, 0x28uLL);
      AG::Encoder::encode_varint(v7, 1uLL);
    }
    return AG::Encoder::end_length_delimited(v7);
  }
  return result;
}

_QWORD *AG::Graph::TraceRecorder::set_dirty(_QWORD *result, unsigned int a2, int a3)
{
  AG::Encoder *v5;

  if ((result[13] & 0x12) == 2)
  {
    v5 = (AG::Encoder *)(result + 4);
    AG::Encoder::encode_varint(result + 4, 0xAuLL);
    AG::Encoder::begin_length_delimited(v5);
    AG::Encoder::encode_varint(v5, 8uLL);
    AG::Encoder::encode_varint(v5, 0x28uLL);
    if (a2)
    {
      AG::Encoder::encode_varint(v5, 0x18uLL);
      AG::Encoder::encode_varint(v5, a2);
    }
    if (a3)
    {
      AG::Encoder::encode_varint(v5, 0x20uLL);
      AG::Encoder::encode_varint(v5, 1uLL);
    }
    return AG::Encoder::end_length_delimited(v5);
  }
  return result;
}

_QWORD *AG::Graph::TraceRecorder::set_pending(_QWORD *result, unsigned int a2, int a3)
{
  AG::Encoder *v5;

  if ((result[13] & 0x12) == 2)
  {
    v5 = (AG::Encoder *)(result + 4);
    AG::Encoder::encode_varint(result + 4, 0xAuLL);
    AG::Encoder::begin_length_delimited(v5);
    AG::Encoder::encode_varint(v5, 8uLL);
    AG::Encoder::encode_varint(v5, 0x29uLL);
    if (a2)
    {
      AG::Encoder::encode_varint(v5, 0x18uLL);
      AG::Encoder::encode_varint(v5, a2);
    }
    if (a3)
    {
      AG::Encoder::encode_varint(v5, 0x20uLL);
      AG::Encoder::encode_varint(v5, 1uLL);
    }
    return AG::Encoder::end_length_delimited(v5);
  }
  return result;
}

_QWORD *AG::Graph::TraceRecorder::set_value(_QWORD *result, unsigned int a2)
{
  AG::Encoder *v3;

  if ((result[13] & 0x12) == 2)
  {
    v3 = (AG::Encoder *)(result + 4);
    AG::Encoder::encode_varint(result + 4, 0xAuLL);
    AG::Encoder::begin_length_delimited(v3);
    AG::Encoder::encode_varint(v3, 8uLL);
    AG::Encoder::encode_varint(v3, 0x2AuLL);
    if (a2)
    {
      AG::Encoder::encode_varint(v3, 0x18uLL);
      AG::Encoder::encode_varint(v3, a2);
    }
    return AG::Encoder::end_length_delimited(v3);
  }
  return result;
}

_QWORD *AG::Graph::TraceRecorder::mark_value(_QWORD *result, unsigned int a2)
{
  AG::Encoder *v3;

  if ((result[13] & 0x12) == 2)
  {
    v3 = (AG::Encoder *)(result + 4);
    AG::Encoder::encode_varint(result + 4, 0xAuLL);
    AG::Encoder::begin_length_delimited(v3);
    AG::Encoder::encode_varint(v3, 8uLL);
    AG::Encoder::encode_varint(v3, 0x2BuLL);
    if (a2)
    {
      AG::Encoder::encode_varint(v3, 0x18uLL);
      AG::Encoder::encode_varint(v3, a2);
    }
    return AG::Encoder::end_length_delimited(v3);
  }
  return result;
}

_QWORD *AG::Graph::TraceRecorder::added(_QWORD *result, int a2)
{
  AG::Graph::TraceRecorder *v3;
  AG::Encoder *v4;
  int v5;
  unint64_t v6;

  if ((result[13] & 0x10) == 0)
  {
    v3 = (AG::Graph::TraceRecorder *)result;
    v4 = (AG::Encoder *)(result + 4);
    AG::Encoder::encode_varint(result + 4, 0xAuLL);
    AG::Encoder::begin_length_delimited(v4);
    AG::Encoder::encode_varint(v4, 8uLL);
    AG::Encoder::encode_varint(v4, 0x2CuLL);
    AG::Encoder::encode_varint(v4, 0x18uLL);
    AG::Encoder::encode_varint(v4, a2 & 0xFFFFFFFE | 1);
    v5 = *(_DWORD *)(*(_QWORD *)(AG::data::_shared_table_bytes + (a2 & 0xFFFFFE00)) + 24);
    v6 = v5 & 0x7FFFFFFF;
    if ((v5 & 0x7FFFFFFF) != 0)
    {
      AG::Encoder::encode_varint(v4, 0x20uLL);
      AG::Encoder::encode_varint(v4, v6);
    }
    AG::Graph::TraceRecorder::field_backtrace(v3, v4, 8);
    return AG::Encoder::end_length_delimited(v4);
  }
  return result;
}

_QWORD *AG::Graph::TraceRecorder::set_source(_QWORD *result, unsigned int a2)
{
  AG::Graph::TraceRecorder *v3;
  unsigned int *v4;
  unint64_t v5;
  unint64_t v6;
  AG::Encoder *v7;

  if ((result[13] & 0x10) == 0)
  {
    v3 = (AG::Graph::TraceRecorder *)result;
    v4 = (unsigned int *)(AG::data::_shared_table_bytes + a2);
    v6 = *v4;
    v5 = v4[1];
    v7 = (AG::Encoder *)(result + 4);
    AG::Encoder::encode_varint(result + 4, 0xAuLL);
    AG::Encoder::begin_length_delimited(v7);
    AG::Encoder::encode_varint(v7, 8uLL);
    AG::Encoder::encode_varint(v7, 0x2DuLL);
    AG::Encoder::encode_varint(v7, 0x18uLL);
    AG::Encoder::encode_varint(v7, a2 & 0xFFFFFFFE | 1);
    if ((_DWORD)v6)
    {
      AG::Encoder::encode_varint(v7, 0x20uLL);
      AG::Encoder::encode_varint(v7, v6);
    }
    if ((_DWORD)v5)
    {
      AG::Encoder::encode_varint(v7, 0x28uLL);
      AG::Encoder::encode_varint(v7, v5);
    }
    AG::Graph::TraceRecorder::field_backtrace(v3, v7, 8);
    return AG::Encoder::end_length_delimited(v7);
  }
  return result;
}

_QWORD *AG::Graph::TraceRecorder::set_dependency(_QWORD *result, unsigned int a2)
{
  AG::Graph::TraceRecorder *v3;
  unint64_t v4;
  AG::Encoder *v5;

  if ((result[13] & 0x10) == 0)
  {
    v3 = (AG::Graph::TraceRecorder *)result;
    v4 = *(unsigned int *)(AG::data::_shared_table_bytes + a2 + 16);
    v5 = (AG::Encoder *)(result + 4);
    AG::Encoder::encode_varint(result + 4, 0xAuLL);
    AG::Encoder::begin_length_delimited(v5);
    AG::Encoder::encode_varint(v5, 8uLL);
    AG::Encoder::encode_varint(v5, 0x2EuLL);
    AG::Encoder::encode_varint(v5, 0x18uLL);
    AG::Encoder::encode_varint(v5, a2 & 0xFFFFFFFE | 1);
    if ((_DWORD)v4)
    {
      AG::Encoder::encode_varint(v5, 0x20uLL);
      AG::Encoder::encode_varint(v5, v4);
    }
    AG::Graph::TraceRecorder::field_backtrace(v3, v5, 8);
    return AG::Encoder::end_length_delimited(v5);
  }
  return result;
}

_QWORD *AG::Graph::TraceRecorder::set_deadline(_QWORD *this, unint64_t a2)
{
  AG::Graph::TraceRecorder *v3;
  AG::Encoder *v4;
  AG::Graph::TraceRecorder *v5;
  unint64_t v6;

  if ((this[13] & 0x10) == 0)
  {
    v3 = (AG::Graph::TraceRecorder *)this;
    v4 = (AG::Encoder *)(this + 4);
    AG::Encoder::encode_varint(this + 4, 0xAuLL);
    AG::Encoder::begin_length_delimited(v4);
    AG::Encoder::encode_varint(v4, 8uLL);
    v5 = (AG::Graph::TraceRecorder *)AG::Encoder::encode_varint(v4, 0x37uLL);
    AG::Graph::TraceRecorder::field_timestamp(v5, v4);
    if ((_DWORD)a2)
    {
      AG::Encoder::encode_varint(v4, 0x18uLL);
      AG::Encoder::encode_varint(v4, a2);
    }
    v6 = HIDWORD(a2);
    if (v6)
    {
      AG::Encoder::encode_varint(v4, 0x20uLL);
      AG::Encoder::encode_varint(v4, v6);
    }
    AG::Graph::TraceRecorder::field_backtrace(v3, v4, 8);
    return AG::Encoder::end_length_delimited(v4);
  }
  return this;
}

_QWORD *AG::Graph::TraceRecorder::passed_deadline(_QWORD *this)
{
  AG::Graph::TraceRecorder *v1;
  AG::Encoder *v2;
  AG::Graph::TraceRecorder *v3;

  if ((this[13] & 0x10) == 0)
  {
    v1 = (AG::Graph::TraceRecorder *)this;
    v2 = (AG::Encoder *)(this + 4);
    AG::Encoder::encode_varint(this + 4, 0xAuLL);
    AG::Encoder::begin_length_delimited(v2);
    AG::Encoder::encode_varint(v2, 8uLL);
    v3 = (AG::Graph::TraceRecorder *)AG::Encoder::encode_varint(v2, 0x38uLL);
    AG::Graph::TraceRecorder::field_timestamp(v3, v2);
    AG::Graph::TraceRecorder::field_backtrace(v1, v2, 8);
    AG::Encoder::end_length_delimited(v2);
    return AG::Graph::TraceRecorder::encode_stack(v1);
  }
  return this;
}

_QWORD *AG::Graph::TraceRecorder::mark_profile(AG::Graph::TraceRecorder *this, AG::Graph *a2, unsigned int a3)
{
  AG::Encoder *v5;
  AG::Graph::TraceRecorder *v6;

  v5 = (AG::Graph::TraceRecorder *)((char *)this + 32);
  AG::Encoder::encode_varint((_QWORD *)this + 4, 0xAuLL);
  AG::Encoder::begin_length_delimited(v5);
  AG::Encoder::encode_varint(v5, 8uLL);
  v6 = (AG::Graph::TraceRecorder *)AG::Encoder::encode_varint(v5, 0x32uLL);
  AG::Graph::TraceRecorder::field_timestamp(v6, v5);
  if (a3)
  {
    AG::Encoder::encode_varint(v5, 0x18uLL);
    AG::Encoder::encode_varint(v5, a3);
  }
  AG::Graph::TraceRecorder::field_backtrace(this, v5, 8);
  return AG::Encoder::end_length_delimited(v5);
}

_QWORD *AG::Graph::TraceRecorder::custom_event(_QWORD *a1, uint64_t a2, const char *a3)
{
  AG::Encoder *v5;
  AG::Graph::TraceRecorder *v6;
  size_t v7;
  unint64_t v8;

  v5 = (AG::Encoder *)(a1 + 4);
  AG::Encoder::encode_varint(a1 + 4, 0xAuLL);
  AG::Encoder::begin_length_delimited(v5);
  AG::Encoder::encode_varint(v5, 8uLL);
  v6 = (AG::Graph::TraceRecorder *)AG::Encoder::encode_varint(v5, 0x34uLL);
  AG::Graph::TraceRecorder::field_timestamp(v6, v5);
  AG::Graph::TraceRecorder::field_backtrace((AG::Graph::TraceRecorder *)a1, v5, 8);
  v7 = strlen(a3);
  if (v7)
  {
    v8 = v7;
    AG::Encoder::encode_varint(v5, 0x4AuLL);
    AG::Encoder::encode_data(v5, a3, v8);
  }
  return AG::Encoder::end_length_delimited(v5);
}

uint64_t AG::Graph::TraceRecorder::named_event(AG::Graph::TraceRecorder *this, AG::Graph::Context *a2, uint64_t a3, unint64_t a4, unsigned int *a5, const __CFData *a6, unsigned int a7)
{
  unsigned int v11;
  uint64_t result;
  AG::Encoder *v14;
  AG::Graph::TraceRecorder *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unsigned int v20;
  const UInt8 *BytePtr;
  CFIndex Length;
  unint64_t v23;

  v11 = a3;
  result = AG::Graph::TraceRecorder::named_event_enabled(this, a3);
  if (!(_DWORD)result)
    return result;
  v14 = (AG::Graph::TraceRecorder *)((char *)this + 32);
  AG::Encoder::encode_varint((_QWORD *)this + 4, 0xAuLL);
  AG::Encoder::begin_length_delimited((_QWORD *)this + 4);
  AG::Encoder::encode_varint((_QWORD *)this + 4, 8uLL);
  v15 = (AG::Graph::TraceRecorder *)AG::Encoder::encode_varint((_QWORD *)this + 4, 0x36uLL);
  if (v11)
  {
    AG::Encoder::encode_varint((_QWORD *)this + 4, 0x50uLL);
    v15 = (AG::Graph::TraceRecorder *)AG::Encoder::encode_varint((_QWORD *)this + 4, v11);
  }
  AG::Graph::TraceRecorder::field_timestamp(v15, (AG::Graph::TraceRecorder *)((char *)this + 32));
  if ((a7 & 0x80000000) != 0)
  {
    AG::Graph::TraceRecorder::field_backtrace(this, (AG::Graph::TraceRecorder *)((char *)this + 32), 8);
    a7 &= ~0x80000000;
    if (!a7)
      goto LABEL_7;
    goto LABEL_6;
  }
  if (a7)
  {
LABEL_6:
    AG::Encoder::encode_varint((_QWORD *)this + 4, 0x18uLL);
    AG::Encoder::encode_varint((_QWORD *)this + 4, a7);
  }
LABEL_7:
  v16 = 4;
  if (a4 < 4)
    v16 = a4;
  if (v16)
  {
    v17 = 0;
    v18 = 8 * v16;
    do
    {
      v20 = *a5++;
      v19 = v20;
      if (v20)
      {
        AG::Encoder::encode_varint(v14, v17 + 32);
        AG::Encoder::encode_varint(v14, v19);
      }
      v17 += 8;
    }
    while (v18 != v17);
  }
  if (a6)
  {
    BytePtr = CFDataGetBytePtr(a6);
    Length = CFDataGetLength(a6);
    if (Length)
    {
      v23 = Length;
      AG::Encoder::encode_varint(v14, 0x4AuLL);
      AG::Encoder::encode_data(v14, BytePtr, v23);
    }
  }
  return (uint64_t)AG::Encoder::end_length_delimited(v14);
}

BOOL AG::Graph::TraceRecorder::named_event_enabled(AG::Graph::TraceRecorder *this, uint64_t a2)
{
  _DWORD *v4;
  unint64_t v5;
  _DWORD *v6;
  unint64_t v7;
  unsigned int *v8;
  _DWORD *v9;
  unsigned int v10;
  uint64_t TraceEventName;
  const char *v13;
  const char *v14;
  const char *TraceEventSubsystem;
  unsigned int v16;
  int v17;
  uint64_t v18;
  const char **v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unsigned int v23;
  uint64_t v24;
  AG::Encoder *v25;
  size_t v26;
  unint64_t v27;
  size_t v28;
  unint64_t v29;

  v4 = (_DWORD *)*((_QWORD *)this + 68);
  v5 = *((unsigned int *)this + 138);
  v6 = &v4[2 * v5];
  if ((_DWORD)v5)
  {
    do
    {
      v7 = v5 >> 1;
      v8 = &v4[2 * (v5 >> 1)];
      v10 = *v8;
      v9 = v8 + 2;
      v5 += ~(v5 >> 1);
      if (v10 < a2)
        v4 = v9;
      else
        v5 = v7;
    }
    while (v5);
    if (v4 != v6)
    {
      if (*v4 == (_DWORD)a2)
        return *((_BYTE *)v4 + 4) != 0;
      v6 = v4;
    }
  }
  TraceEventName = AGGraphGetTraceEventName(a2);
  if (!TraceEventName)
    AG::precondition_failure((AG *)"invalid named trace event: %u", v13, a2);
  v14 = (const char *)TraceEventName;
  TraceEventSubsystem = (const char *)AGGraphGetTraceEventSubsystem(a2);
  if (!TraceEventSubsystem)
    goto LABEL_18;
  v16 = *((_DWORD *)this + 26);
  if ((v16 & 0x20) != 0)
    goto LABEL_18;
  v17 = (v16 >> 5) & 1;
  v18 = *((_QWORD *)this + 15);
  if (v18)
  {
    v19 = (const char **)*((_QWORD *)this + 14);
    v20 = 8 * v18;
    while (strcasecmp(*v19, TraceEventSubsystem))
    {
      ++v19;
      v20 -= 8;
      if (!v20)
        goto LABEL_19;
    }
LABEL_18:
    v17 = 1;
  }
LABEL_19:
  v21 = *((_QWORD *)this + 68);
  v22 = ((uint64_t)v6 - v21) >> 3;
  v23 = *((_DWORD *)this + 138);
  if (*((_DWORD *)this + 139) < v23 + 1)
  {
    AG::vector<std::pair<unsigned int,BOOL>,0ul,unsigned int>::reserve_slow((uint64_t)this + 544, v23 + 1);
    v21 = *((_QWORD *)this + 68);
    v23 = *((_DWORD *)this + 138);
  }
  if (v23 > v22)
  {
    memmove((void *)(v21 + 8 * v22 + 8), (const void *)(v21 + 8 * v22), 8 * (v23 - v22));
    v23 = *((_DWORD *)this + 138);
  }
  v24 = v21 + 8 * v22;
  *(_DWORD *)v24 = a2;
  *(_BYTE *)(v24 + 4) = v17;
  *((_DWORD *)this + 138) = v23 + 1;
  if (!v17)
    return 0;
  v25 = (AG::Graph::TraceRecorder *)((char *)this + 32);
  AG::Encoder::encode_varint(v25, 0x32uLL);
  AG::Encoder::begin_length_delimited(v25);
  if ((_DWORD)a2)
  {
    AG::Encoder::encode_varint(v25, 8uLL);
    AG::Encoder::encode_varint(v25, a2);
  }
  v26 = strlen(v14);
  if (v26)
  {
    v27 = v26;
    AG::Encoder::encode_varint(v25, 0x12uLL);
    AG::Encoder::encode_data(v25, v14, v27);
  }
  if (TraceEventSubsystem)
  {
    v28 = strlen(TraceEventSubsystem);
    if (v28)
    {
      v29 = v28;
      AG::Encoder::encode_varint(v25, 0x1AuLL);
      AG::Encoder::encode_data(v25, TraceEventSubsystem, v29);
    }
  }
  AG::Encoder::end_length_delimited(v25);
  return 1;
}

void AG::Graph::start_tracing(_QWORD *a1, int a2, const char **a3, uint64_t a4)
{
  AG::Trace *v8;

  if ((a2 & 1) != 0 && !a1[40])
  {
    v8 = (AG::Trace *)operator new();
    AG::Graph::TraceRecorder::TraceRecorder((uint64_t)v8, (uint64_t)a1, a2, a3, a4);
    a1[40] = v8;
    if ((a2 & 8) != 0)
    {
      AG::Graph::prepare_trace((uint64_t)a1, (uint64_t)v8);
      v8 = (AG::Trace *)a1[40];
    }
    AG::Graph::add_trace(a1, v8);
    if (AG::Graph::start_tracing(unsigned int,std::span<char const*,18446744073709551615ul>)::cleanup != -1)
      dispatch_once(&AG::Graph::start_tracing(unsigned int,std::span<char const*,18446744073709551615ul>)::cleanup, &__block_literal_global);
  }
}

void sub_1AB941AB4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF431538](v1, 0x10F1C40EB2A2F89);
  _Unwind_Resume(a1);
}

uint64_t AG::Graph::prepare_trace(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  unsigned __int16 *v23;
  int *v24;
  int v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char *v31;
  char v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  uint64_t v38;
  char v39;
  uint64_t v40;

  v40 = a2;
  result = util::UntypedTable::for_each(a1 + 144, (void (*)(const void *, const void *, const void *))util::Table<unsigned long,AG::Graph::Context *>::for_each<AG::Graph::prepare_trace(AG::Trace &)::$_0>(AG::Graph::prepare_trace(AG::Trace &)::$_0 const&)const::{lambda(void const*,void const*,void const*)#1}::__invoke, &v40);
  v35 = a1;
  v5 = *(unsigned int *)(a1 + 352);
  if ((_DWORD)v5)
  {
    v6 = 0;
    while (1)
    {
      if (v6 > 3)
        return result;
      v7 = *(_QWORD **)(v35 + 344);
      v36 = &v7[v5];
      do
      {
        v8 = *v7;
        v37 = v7;
        if (v6 == 1)
        {
          v9 = *(unsigned int *)(v8 + 72);
          if ((_DWORD)v9)
          {
            v10 = *(uint64_t **)(v8 + 64);
            v11 = 8 * v9;
            do
            {
              v12 = *v10++;
              result = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)a2 + 208))(a2, v8, v12 & 0xFFFFFFFFFFFFFFFCLL);
              v11 -= 8;
            }
            while (v11);
          }
          goto LABEL_51;
        }
        if (!v6)
        {
          result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 184))(a2, v8);
          goto LABEL_51;
        }
        v13 = 1;
        v38 = *v7;
        do
        {
          v39 = v13;
          v14 = *(_DWORD *)(v8 + 16);
          if (!v14)
            goto LABEL_50;
          v15 = AG::data::_shared_table_bytes;
          while (2)
          {
            v16 = v14;
            v17 = v15 + v14;
            v18 = 20;
            if ((v39 & 1) != 0)
              v18 = 22;
            v19 = *(unsigned __int16 *)(v17 + v18);
            if (!*(_WORD *)(v17 + v18))
              goto LABEL_49;
            do
            {
              v20 = (v19 + v16);
              v21 = ((_BYTE)v19 + (_BYTE)v16) & 3;
              if ((((_BYTE)v19 + (_BYTE)v16) & 3) != 0)
              {
                if (v21 != 1)
                {
                  if (v21 == 2)
                  {
                    v34 = 1;
                    goto LABEL_48;
                  }
                  continue;
                }
                v22 = AG::data::_shared_table_bytes;
                v23 = (unsigned __int16 *)(AG::data::_shared_table_bytes + (v20 & 0xFFFFFFFC) + 14);
              }
              else
              {
                v22 = AG::data::_shared_table_bytes;
                v23 = (unsigned __int16 *)(AG::data::_shared_table_bytes + v20 + 4);
              }
              v19 = *v23;
              if ((v20 & 3) == 1)
              {
                v26 = v20 & 0xFFFFFFFC;
                if (v6 == 3)
                {
                  v33 = v22 + v26;
                  result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 296))(a2, v26, *(unsigned int *)(v22 + v26));
                  if ((*(_BYTE *)(v33 + 8) & 1) != 0 && *(_DWORD *)(v33 + 16))
                    result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 304))(a2, v26);
                }
                else
                {
                  result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 288))(a2, v26);
                }
              }
              else
              {
                if ((v20 & 3) != 0)
                  continue;
                v24 = (int *)(v22 + v20);
                if (v6 == 3)
                {
                  v27 = v24[3];
                  if (v27 >= 0x20)
                  {
                    v28 = 0;
                    v29 = v24[4];
                    v30 = v27 >> 5;
                    v31 = (char *)(v22 + v29 + 4);
                    do
                    {
                      v32 = *v31;
                      result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD))(*(_QWORD *)a2 + 232))(a2, v20, *((unsigned int *)v31 - 1), *v31 & 4);
                      if ((v32 & 8) != 0)
                        result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 248))(a2, v20, v28, 1);
                      v31 += 5;
                      ++v28;
                    }
                    while (v30 != v28);
                  }
                }
                else
                {
                  result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 224))(a2, v20);
                  v25 = *v24;
                  if ((*v24 & 1) != 0)
                  {
                    result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 256))(a2, v20, 1);
                    v25 = *v24;
                    if ((*v24 & 2) != 0)
                    {
LABEL_43:
                      result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 264))(a2, v20, 1);
                      if ((*v24 & 0x10) == 0)
                        continue;
LABEL_44:
                      result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 272))(a2, v20);
                      continue;
                    }
                  }
                  else if ((v25 & 2) != 0)
                  {
                    goto LABEL_43;
                  }
                  if ((v25 & 0x10) != 0)
                    goto LABEL_44;
                }
              }
            }
            while (v19);
            v34 = 0;
LABEL_48:
            v15 = AG::data::_shared_table_bytes;
            if (!v34)
            {
LABEL_49:
              v14 = *(_DWORD *)(v15 + v16 + 8);
              if (!v14)
                break;
              continue;
            }
            break;
          }
LABEL_50:
          v13 = 0;
          v8 = v38;
        }
        while ((v39 & 1) != 0);
LABEL_51:
        v7 = v37 + 1;
      }
      while (v37 + 1 != v36);
      v5 = *(unsigned int *)(v35 + 352);
      do
        ++v6;
      while (!*(_DWORD *)(v35 + 352));
    }
  }
  return result;
}

uint64_t ___ZN2AG5Graph13start_tracingEjNSt3__14spanIPKcLm18446744073709551615EEE_block_invoke()
{
  return atexit_b(&__block_literal_global_13);
}

void ___ZN2AG5Graph13start_tracingEjNSt3__14spanIPKcLm18446744073709551615EEE_block_invoke_2(uint64_t a1, uint64_t a2, const char *a3)
{
  AG::Graph::trace_assertion_failure((AG::Graph *)1, (uint64_t)"process exiting", a3);
}

void AG::Graph::trace_assertion_failure(AG::Graph *this, uint64_t a2, const char *a3, ...)
{
  int v4;
  BOOL v5;
  uint64_t i;
  int v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  va_list va;

  va_start(va, a3);
  v4 = (int)this;
  v5 = os_unfair_lock_trylock((os_unfair_lock_t)&AG::Graph::_all_graphs_lock);
  for (i = AG::Graph::_all_graphs; i; i = *(_QWORD *)i)
  {
    v7 = *(_DWORD *)(i + 232);
    if (v7)
    {
      v9 = v7 - 1;
      do
      {
        v10 = v9;
        v11 = *(_QWORD *)(*(_QWORD *)(i + 224) + 8 * v9);
        (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)v11 + 40))(v11, a2, (uint64_t *)va);
        --v9;
      }
      while (v10);
    }
    if (v4)
    {
      v8 = *(_QWORD *)(i + 320);
      if (v8)
      {
        AG::Graph::remove_trace((_DWORD *)i, *(_QWORD *)(v8 + 8));
        *(_QWORD *)(i + 320) = 0;
      }
    }
  }
  if (v5)
    os_unfair_lock_unlock((os_unfair_lock_t)&AG::Graph::_all_graphs_lock);
}

_DWORD *AG::Graph::stop_tracing(_DWORD *this)
{
  uint64_t v1;
  _DWORD *v2;

  v1 = *((_QWORD *)this + 40);
  if (v1)
  {
    v2 = this;
    this = AG::Graph::remove_trace(this, *(_QWORD *)(v1 + 8));
    *((_QWORD *)v2 + 40) = 0;
  }
  return this;
}

uint64_t AG::Graph::sync_tracing(uint64_t this)
{
  int v1;
  uint64_t v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *(_DWORD *)(this + 232);
  if (v1)
  {
    v2 = this;
    v3 = v1 - 1;
    do
    {
      v4 = v3;
      v5 = *(_QWORD *)(*(_QWORD *)(v2 + 224) + 8 * v3);
      this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 32))(v5);
      --v3;
    }
    while (v4);
  }
  return this;
}

CFStringRef AG::Graph::copy_trace_path(AG::Graph *this)
{
  uint64_t v1;
  const char *v2;

  v1 = *((_QWORD *)this + 40);
  if (v1 && (v2 = *(const char **)(v1 + 520)) != 0)
    return CFStringCreateWithCString(0, v2, 0x8000100u);
  else
    return 0;
}

void AG::Graph::all_start_tracing(int a1, const char **a2, uint64_t a3)
{
  uint64_t *i;

  os_unfair_lock_lock((os_unfair_lock_t)&AG::Graph::_all_graphs_lock);
  for (i = &AG::Graph::_all_graphs; ; AG::Graph::start_tracing(i, a1, a2, a3))
  {
    i = (uint64_t *)*i;
    if (!i)
      break;
  }
  os_unfair_lock_unlock((os_unfair_lock_t)&AG::Graph::_all_graphs_lock);
}

void sub_1AB942054(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock((os_unfair_lock_t)&AG::Graph::_all_graphs_lock);
  _Unwind_Resume(a1);
}

void AG::Graph::all_stop_tracing(AG::Graph *this)
{
  uint64_t i;
  uint64_t v2;

  os_unfair_lock_lock((os_unfair_lock_t)&AG::Graph::_all_graphs_lock);
  for (i = AG::Graph::_all_graphs; i; i = *(_QWORD *)i)
  {
    v2 = *(_QWORD *)(i + 320);
    if (v2)
    {
      AG::Graph::remove_trace((_DWORD *)i, *(_QWORD *)(v2 + 8));
      *(_QWORD *)(i + 320) = 0;
    }
  }
  os_unfair_lock_unlock((os_unfair_lock_t)&AG::Graph::_all_graphs_lock);
}

void sub_1AB9420C8(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock((os_unfair_lock_t)&AG::Graph::_all_graphs_lock);
  _Unwind_Resume(a1);
}

void AG::Graph::all_sync_tracing(AG::Graph *this)
{
  uint64_t i;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  os_unfair_lock_lock((os_unfair_lock_t)&AG::Graph::_all_graphs_lock);
  for (i = AG::Graph::_all_graphs; i; i = *(_QWORD *)i)
  {
    v2 = *(unsigned int *)(i + 232);
    if ((_DWORD)v2)
    {
      v3 = v2 - 1;
      do
      {
        v4 = *(_QWORD *)(*(_QWORD *)(i + 224) + 8 * v3);
        (*(void (**)(uint64_t))(*(_QWORD *)v4 + 32))(v4);
      }
      while ((unint64_t)v3--);
    }
  }
  os_unfair_lock_unlock((os_unfair_lock_t)&AG::Graph::_all_graphs_lock);
}

void sub_1AB942158(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock((os_unfair_lock_t)&AG::Graph::_all_graphs_lock);
  _Unwind_Resume(a1);
}

CFStringRef AG::Graph::all_copy_trace_path(AG::Graph *this)
{
  uint64_t v1;
  const char *v2;
  CFStringRef v3;

  os_unfair_lock_lock((os_unfair_lock_t)&AG::Graph::_all_graphs_lock);
  if (AG::Graph::_all_graphs
    && (v1 = *(_QWORD *)(AG::Graph::_all_graphs + 320)) != 0
    && (v2 = *(const char **)(v1 + 520)) != 0)
  {
    v3 = CFStringCreateWithCString(0, v2, 0x8000100u);
  }
  else
  {
    v3 = 0;
  }
  os_unfair_lock_unlock((os_unfair_lock_t)&AG::Graph::_all_graphs_lock);
  return v3;
}

void sub_1AB9421E0(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock((os_unfair_lock_t)&AG::Graph::_all_graphs_lock);
  _Unwind_Resume(a1);
}

void AG::Trace::~Trace(AG::Trace *this)
{
  JUMPOUT(0x1AF431538);
}

uint64_t AG::Trace::named_event_enabled(AG::Trace *this)
{
  return 0;
}

void *AG::vector<std::unique_ptr<char const,util::free_deleter>,0ul,unsigned long>::reserve_slow(uint64_t a1, unint64_t a2)
{
  uint64_t v3;
  void *result;

  if (*(_QWORD *)(a1 + 16) + (*(_QWORD *)(a1 + 16) >> 1) <= a2)
    v3 = a2;
  else
    v3 = *(_QWORD *)(a1 + 16) + (*(_QWORD *)(a1 + 16) >> 1);
  result = AG::details::realloc_vector<unsigned long,8ul>(*(void **)a1, (size_t *)(a1 + 16), v3);
  *(_QWORD *)a1 = result;
  return result;
}

void *AG::details::realloc_vector<unsigned long,8ul>(void *a1, size_t *a2, uint64_t a3)
{
  void *v4;
  size_t v5;
  size_t v6;
  void *v7;
  const char *v8;

  v4 = a1;
  if (a3)
  {
    v5 = malloc_good_size(8 * a3);
    v6 = v5 >> 3;
    if (v5 >> 3 != *a2)
    {
      v7 = malloc_type_realloc(v4, v5, 0xF3138078uLL);
      if (!v7)
        AG::precondition_failure((AG *)"allocation failure", v8);
      v4 = v7;
      *a2 = v6;
    }
  }
  else
  {
    *a2 = 0;
    free(a1);
    return 0;
  }
  return v4;
}

uint64_t util::Table<unsigned long,AG::Graph::Context *>::for_each<AG::Graph::prepare_trace(AG::Trace &)::$_0>(AG::Graph::prepare_trace(AG::Trace &)::$_0 const&)const::{lambda(void const*,void const*,void const*)#1}::__invoke(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  return (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a3 + 160))(*a3);
}

char *AG::data::table::make_pages_reusable(unsigned int,BOOL)::$_0::operator()()
{
  char *result;

  result = getenv("AG_UNMAP_REUSABLE");
  if (result)
    return (char *)(atoi(result) != 0);
  return result;
}

void AG::data::table::print(os_unfair_lock_s *this)
{
  os_unfair_lock_s *v2;
  unint64_t v3;

  v2 = this + 4;
  os_unfair_lock_lock(this + 4);
  LODWORD(v3) = this[8];
  fprintf((FILE *)*MEMORY[0x1E0C80C10], "data::table %p:\n  %.2fKB allocated, %.2fKB used, %.2fKB reusable.\n", this, (double)(this[5]._os_unfair_lock_opaque - 512) * 0.0009765625, (double)(this[7]._os_unfair_lock_opaque << 9) * 0.0009765625, (double)v3 * 0.0009765625);
  os_unfair_lock_unlock(v2);
}

uint64_t AG::data::zone::print(const void ***this)
{
  uint64_t v2;
  uint64_t v3;
  uint64x2_t v4;
  uint64_t v5;
  float64x2_t v6;
  uint64_t v7;
  unint64_t v8;
  const void **v9;
  uint64_t v10;
  const void *v11;
  double v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  float64x2_t v18;

  v2 = *((unsigned int *)this + 4);
  v3 = 0;
  if ((_DWORD)v2)
  {
    v4 = 0uLL;
    do
    {
      v5 = AG::data::_shared_table_bytes + v2;
      ++v3;
      v4 = vaddw_u32(v4, *(uint32x2_t *)(v5 + 12));
      v2 = *(unsigned int *)(v5 + 8);
    }
    while ((_DWORD)v2);
    v6 = vmulq_f64(vcvtq_f64_u64(v4), (float64x2_t)vdupq_n_s64(0x3F50000000000000uLL));
  }
  else
  {
    v6 = 0uLL;
  }
  v7 = *((unsigned int *)this + 2);
  if ((_DWORD)v7)
  {
    v18 = v6;
    v8 = 0;
    v9 = *this;
    v10 = 8 * v7;
    do
    {
      v11 = *v9++;
      v8 += malloc_size(v11);
      v10 -= 8;
    }
    while (v10);
    v12 = (double)v8 * 0.0009765625;
    v6 = v18;
  }
  else
  {
    v12 = 0.0;
  }
  v13 = *((unsigned int *)this + 5);
  if ((_DWORD)v13)
  {
    v14 = 0;
    v15 = 0;
    do
    {
      ++v15;
      v16 = AG::data::_shared_table_bytes + v13;
      v13 = *(unsigned int *)(AG::data::_shared_table_bytes + v13);
      v14 += *(unsigned int *)(v16 + 4);
    }
    while ((_DWORD)v13);
  }
  else
  {
    v15 = 0;
    v14 = 0;
  }
  return fprintf((FILE *)*MEMORY[0x1E0C80C10], "%-16p %6lu %8.2f %8.2f    %6lu %6lu     %6lu %8.2f\n", this, v3, v6.f64[0], v6.f64[1], v15, v14, *((unsigned int *)this + 2), v12);
}

uint64_t AG::data::zone::print_header(AG::data::zone *this)
{
  return fprintf((FILE *)*MEMORY[0x1E0C80C10], "Zones\n%-16s %6s %8s %8s    %6s %6s     %6s %8s\n", "zone ptr", "pages", "total", "in-use", "free", "bytes", "malloc", "total");
}

uint64_t AG::swift::context_descriptor::generic_params_info::generic_params_info(uint64_t a1, AG::swift::class_type_descriptor *this, uint64_t a3)
{
  int v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  int *v8;
  int v9;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  if ((*(_DWORD *)this & 0x80) != 0)
  {
    v4 = *(_DWORD *)this & 0x1F;
    if ((v4 - 19) >= 0xFFFFFFFE)
    {
      v5 = (char *)this + 28;
      *(_QWORD *)a1 = (char *)this + 28;
      v6 = a3 + 16;
      if (!a3)
        v6 = 0;
    }
    else
    {
      if (v4 != 16)
        return a1;
      v5 = (char *)this + 44;
      *(_QWORD *)a1 = (char *)this + 44;
      if (a3)
        v6 = a3 + 8 * AG::swift::class_type_descriptor::immediate_members_offset(this);
      else
        v6 = 0;
    }
    *(_QWORD *)(a1 + 48) = v6;
    v7 = *((unsigned __int16 *)v5 + 4);
    if (*((_WORD *)v5 + 4))
    {
      *(_QWORD *)(a1 + 8) = v5 + 16;
      *(_QWORD *)(a1 + 16) = v7;
      if ((v5[14] & 1) != 0)
      {
        v8 = (int *)(((unint64_t)&v5[v7 + 19] & 0xFFFFFFFFFFFFFFFCLL) + 12 * *((unsigned __int16 *)v5 + 5));
        v9 = *v8;
        *(_DWORD *)(a1 + 24) = *v8;
        *(_QWORD *)(a1 + 32) = v8 + 1;
        *(_QWORD *)(a1 + 40) = (unsigned __int16)v9;
      }
    }
  }
  return a1;
}

uint64_t AG::swift::context_descriptor::push_generic_args(AG::swift::class_type_descriptor *this, uint64_t a2, _QWORD *a3)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  int v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  unint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  char v20[8];
  char *v21;
  uint64_t v22;
  unsigned __int16 v23;
  uint64_t v24;
  uint64_t v25;

  result = AG::swift::context_descriptor::generic_params_info::generic_params_info((uint64_t)v20, this, a2);
  v5 = v22;
  if (v22)
  {
    v6 = 0;
    v7 = v21;
    v8 = v23;
    while (1)
    {
      v9 = *v7;
      if (v9 < 0)
        break;
LABEL_21:
      ++v7;
      if (!--v5)
        return result;
    }
    v10 = v9 & 0x3F;
    if ((v9 & 0x3F) == 1)
    {
      v16 = *(_QWORD *)(v25 + 8 * v8);
      if (v16)
      {
        v17 = v16 & 0xFFFFFFFFFFFFFFFELL;
        v15 = *(_QWORD *)(v25 + 8 * *(unsigned __int16 *)(v24 + 8 * v6 + 4));
      }
      else
      {
        v15 = 0;
        v17 = 0;
      }
      v18 = a3[25];
      if (a3[26] < (unint64_t)(v18 + 1))
      {
        result = (uint64_t)AG::vector<AG::swift::context_descriptor::generic_arg,8ul,unsigned long>::reserve_slow(a3, v18 + 1);
        v18 = a3[25];
      }
      ++v6;
      v19 = (_QWORD *)a3[24];
      if (!v19)
        v19 = a3;
      v14 = &v19[3 * v18];
      *v14 = v17;
    }
    else
    {
      if ((v9 & 0x3F) != 0)
      {
LABEL_20:
        ++v8;
        goto LABEL_21;
      }
      v11 = v25;
      v12 = a3[25];
      if (a3[26] < (unint64_t)(v12 + 1))
      {
        result = (uint64_t)AG::vector<AG::swift::context_descriptor::generic_arg,8ul,unsigned long>::reserve_slow(a3, v12 + 1);
        v12 = a3[25];
      }
      v13 = (_QWORD *)a3[24];
      if (!v13)
        v13 = a3;
      v14 = &v13[3 * v12];
      *v14 = v11 + 8 * v8;
      v15 = 1;
    }
    v14[1] = v15;
    *((_BYTE *)v14 + 16) = v10;
    ++a3[25];
    goto LABEL_20;
  }
  return result;
}

uint64_t AG::swift::context_descriptor::count_generic_args(AG::swift::context_descriptor *this)
{
  uint64_t v1;
  uint64_t result;
  char *v3;
  char v4;
  _BYTE v5[8];
  char *v6;
  uint64_t v7;

  AG::swift::context_descriptor::generic_params_info::generic_params_info((uint64_t)v5, this, 0);
  v1 = v7;
  if (!v7)
    return 0;
  result = 0;
  v3 = v6;
  do
  {
    v4 = *v3++;
    if ((v4 & 0xBE) == 0x80)
      ++result;
    --v1;
  }
  while (v1);
  return result;
}

uint64_t AG::swift::metadata::visit_heap_class(AG::swift::metadata *this, AG::swift::metadata_visitor *a2)
{
  int *v4;
  AG::swift::metadata *v5;
  int *v6;
  uint64_t v7;
  char *v8;
  int v9;
  Ivar *v10;
  Ivar *v11;
  int v12;
  size_t v13;
  char *v14;
  unint64_t v15;
  _BOOL8 v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  unint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  if (!this)
    return (**(uint64_t (***)(AG::swift::metadata_visitor *))a2)(a2);
  if ((*((_QWORD *)this + 4) & 3) == 0)
    return (**(uint64_t (***)(AG::swift::metadata_visitor *))a2)(a2);
  v4 = (int *)*((_QWORD *)this + 8);
  if (!v4)
    return (**(uint64_t (***)(AG::swift::metadata_visitor *))a2)(a2);
  if (v4[5])
  {
    v5 = (AG::swift::metadata *)*((_QWORD *)this + 1);
    if (v5)
    {
      if ((unint64_t)(*(_QWORD *)v5 - 2048) >= 0xFFFFFFFFFFFFF801)
        return (**(uint64_t (***)(AG::swift::metadata_visitor *))a2)(a2);
      if (!AG::swift::metadata::visit_heap_class(v5, a2))
        return 0;
    }
  }
  v6 = v4 + 4;
  v7 = v4[4];
  if ((_DWORD)v7)
  {
    if ((v7 & 3) == 1)
    {
      v8 = *(char **)((char *)v6 + (v7 & 0xFFFFFFFFFFFFFFFCLL));
      if (!v8)
        return 1;
    }
    else
    {
      v8 = (char *)v6 + v7;
      if (!(int *)((char *)v6 + v7))
        return 1;
    }
    v9 = *((_DWORD *)v8 + 3);
    if (v9)
    {
      if (v9 == v4[9])
      {
        if ((*((_BYTE *)this + 40) & 2) != 0)
        {
          v18 = *((_QWORD *)this + 8);
          v19 = *(unsigned int *)(v18 + 40);
          if (!(_DWORD)v19)
            return (**(uint64_t (***)(AG::swift::metadata_visitor *))a2)(a2);
          if ((*(_BYTE *)(v18 + 3) & 0x20) != 0)
            v19 += (unint64_t)AG::swift::class_type_descriptor::immediate_members_offset((AG::swift::class_type_descriptor *)v18) >> 3;
          v14 = (char *)this + 8 * v19;
        }
        else
        {
          HIDWORD(v24) = 0;
          v10 = class_copyIvarList(this, (unsigned int *)&v24 + 1);
          v11 = v10;
          if (v10)
          {
            v12 = HIDWORD(v24);
            if (HIDWORD(v24) == *((_DWORD *)v8 + 3))
            {
              MEMORY[0x1E0C80A78](v10);
              v14 = (char *)&v24 - ((v13 + 15) & 0xFFFFFFFF0);
              bzero(v14, v13);
              if (v12)
              {
                v15 = 0;
                do
                {
                  *(_QWORD *)&v14[8 * v15] = ivar_getOffset(v11[v15]);
                  ++v15;
                }
                while (v15 < HIDWORD(v24));
              }
            }
            else
            {
              v14 = 0;
            }
            free(v11);
          }
          else
          {
            v14 = 0;
          }
        }
        if (v14 && *(_QWORD *)v14)
        {
          v20 = 0;
          v21 = v8 + 16;
          do
          {
            v22 = *((unsigned int *)v8 + 3);
            v17 = v20 >= v22;
            if (v20 >= v22)
              break;
            v23 = (*(uint64_t (**)(AG::swift::metadata_visitor *, AG::swift::metadata *, char *))(*(_QWORD *)a2 + 16))(a2, this, v21);
            v21 += 12;
            ++v20;
          }
          while ((v23 & 1) != 0);
          return v17;
        }
        return (**(uint64_t (***)(AG::swift::metadata_visitor *))a2)(a2);
      }
      return (**(uint64_t (***)(AG::swift::metadata_visitor *))a2)(a2);
    }
  }
  return 1;
}

void sub_1AB942B14(_Unwind_Exception *a1)
{
  void *v1;

  free(v1);
  _Unwind_Resume(a1);
}

void AG::swift::metadata::append_description(AG::swift::metadata *this, __CFString *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  AG::swift::metadata *v7;
  const char *v8;
  unint64_t v9;
  AG::swift::metadata **v10;
  AG::swift::metadata *v11;
  uint64_t v12;
  int *v13;
  size_t v14;
  int *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  size_t v19;
  _BYTE *v20;
  _QWORD *v21;
  uint64_t v22;
  int *v23;
  uint64_t v24;
  uint64_t TypeName;
  size_t v26;
  size_t v27;
  _BYTE *v28;
  uint64_t *v29;
  AG::swift::class_type_descriptor *v30;
  size_t v31;
  uint64_t v32;
  uint64_t v33;
  _BYTE *v34;
  _BYTE *v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  unint64_t v40;
  size_t v41;
  uint64_t v42;
  _QWORD v43[24];
  void *v44;
  uint64_t v45;
  uint64_t v46;
  _BYTE __dst[128];
  void *v48;
  size_t v49;
  unint64_t v50;
  uint64_t v51;

  v51 = *MEMORY[0x1E0C80C00];
  while (1)
  {
    v4 = *(_QWORD *)this;
    if (*(_QWORD *)this > 0x7FFuLL)
      v4 = 0;
    if (v4 != 770)
      break;
    CFStringAppendCString(a2, "(", 0x8000100u);
    if (*((_WORD *)this + 4))
    {
      v5 = 0;
      v6 = 8 * *((unsigned __int16 *)this + 4);
      do
      {
        v7 = *(AG::swift::metadata **)((char *)this + v5 + 24);
        if (v5)
          CFStringAppendCString(a2, ", ", 0x8000100u);
        if (v7)
          AG::swift::metadata::append_description(v7, a2);
        else
          CFStringAppendCString(a2, "nil", 0x8000100u);
        v5 += 8;
      }
      while (v6 != v5);
    }
    CFStringAppendCString(a2, ")", 0x8000100u);
    this = (AG::swift::metadata *)*((_QWORD *)this + 2);
    CFStringAppendCString(a2, " -> ", 0x8000100u);
    if (!this)
    {
      v8 = "nil";
LABEL_80:
      CFStringAppendCString(a2, v8, 0x8000100u);
      return;
    }
  }
  if (v4 == 769)
  {
    if (*((_QWORD *)this + 1))
    {
      CFStringAppendCString(a2, "(", 0x8000100u);
      if (*((_QWORD *)this + 1))
      {
        v9 = 0;
        v10 = (AG::swift::metadata **)((char *)this + 24);
        do
        {
          v11 = *v10;
          if (v9)
            CFStringAppendCString(a2, ", ", 0x8000100u);
          if (v11)
            AG::swift::metadata::append_description(v11, a2);
          else
            CFStringAppendCString(a2, "nil", 0x8000100u);
          ++v9;
          v10 += 2;
        }
        while (v9 < *((_QWORD *)this + 1));
      }
      v8 = ")";
    }
    else
    {
      v8 = "Void";
    }
    goto LABEL_80;
  }
  v48 = 0;
  v49 = 0;
  v50 = 8;
  v12 = AG::swift::metadata::descriptor(this);
  if (!v12)
    goto LABEL_43;
  v13 = (int *)v12;
  v14 = 0;
  while (1)
  {
    if ((*v13 & 0x1Fu) - 19 >= 0xFFFFFFFE || (*v13 & 0x1F) == 0x10)
    {
      v15 = v13 + 2;
      v16 = v13[2];
      if ((_DWORD)v16)
      {
        v17 = (char *)v15 + v16;
        if ((int *)((char *)v15 + v16))
        {
          v18 = AG::swift::context_descriptor::count_generic_args((AG::swift::context_descriptor *)v13);
          v19 = v49;
          v14 = v49 + 1;
          if (v50 < v49 + 1)
          {
            AG::vector<std::pair<char const*,unsigned long>,8ul,unsigned long>::reserve_slow(__dst, v14);
            v19 = v49;
            v14 = v49 + 1;
          }
          v20 = v48;
          if (!v48)
            v20 = __dst;
          v21 = &v20[16 * v19];
          *v21 = v17;
          v21[1] = v18;
          v49 = v14;
        }
      }
    }
    v24 = v13[1];
    v23 = v13 + 1;
    v22 = v24;
    if (!(_DWORD)v24)
      break;
    if ((v22 & 3) == 1)
    {
      v13 = *(int **)((char *)v23 + (v22 & 0xFFFFFFFFFFFFFFFCLL));
      if (!v13)
        break;
    }
    else
    {
      v13 = (int *)((char *)v23 + v22);
      if (!v13)
        break;
    }
  }
  if (!v14)
  {
LABEL_43:
    TypeName = swift_getTypeName();
    if (TypeName)
    {
      v26 = v49;
      v27 = v49 + 1;
      if (v50 < v49 + 1)
      {
        AG::vector<std::pair<char const*,unsigned long>,8ul,unsigned long>::reserve_slow(__dst, v27);
        v26 = v49;
        v27 = v49 + 1;
      }
      v28 = v48;
      if (!v48)
        v28 = __dst;
      v29 = (uint64_t *)&v28[16 * v26];
      *v29 = TypeName;
      v29[1] = 0;
      v49 = v27;
    }
  }
  v44 = 0;
  v45 = 0;
  v46 = 8;
  v30 = (AG::swift::class_type_descriptor *)AG::swift::metadata::descriptor(this);
  if (v30)
    AG::swift::context_descriptor::push_generic_args(v30, (uint64_t)this, v43);
  v31 = v49;
  if (v49)
  {
    v32 = 0;
    v33 = 0;
    while (1)
    {
      --v31;
      v34 = v48;
      if (!v48)
        v34 = __dst;
      v35 = &v34[16 * v31];
      v42 = *((_QWORD *)v35 + 1);
      CFStringAppendCString(a2, *(const char **)v35, 0x8000100u);
      if (v42 != v32)
      {
        CFStringAppendCString(a2, "<", 0x8000100u);
        v41 = v31;
        v36 = 0;
        v37 = v42 - v32;
        do
        {
          if (v36)
            CFStringAppendCString(a2, ", ", 0x8000100u);
          v38 = (char *)v44;
          if (!v44)
            v38 = (char *)v43;
          v39 = &v38[24 * v36 + 24 * v33];
          if (v39[16])
            CFStringAppendCString(a2, "Pack{", 0x8000100u);
          if (*((_QWORD *)v39 + 1))
          {
            v40 = 0;
            do
            {
              if (v40)
                CFStringAppendCString(a2, ", ", 0x8000100u);
              AG::swift::metadata::append_description(*(AG::swift::metadata **)(*(_QWORD *)v39 + 8 * v40++), a2);
            }
            while (v40 < *((_QWORD *)v39 + 1));
          }
          if (v39[16])
            CFStringAppendCString(a2, "}", 0x8000100u);
          ++v36;
        }
        while (v36 != v37);
        CFStringAppendCString(a2, ">", 0x8000100u);
        v31 = v41;
        v33 += v37;
      }
      if (!v31)
        break;
      CFStringAppendCString(a2, ".", 0x8000100u);
      v32 = v42;
    }
  }
  if (v44)
    free(v44);
  if (v48)
    free(v48);
}

void sub_1AB9430A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,void *a54)
{
  if (a54)
    free(a54);
  _Unwind_Resume(exception_object);
}

unsigned __int8 *AG::swift::metadata::signature(AG::swift::metadata *this)
{
  unsigned __int8 v2;
  uint64_t v3;
  util::UntypedTable *v4;
  unsigned __int8 *v5;
  void *v6;
  uint64_t v7;
  _QWORD *v8;
  AG::swift::metadata *v9;
  AG::swift::class_type_descriptor *v10;
  AG::swift::class_type_descriptor *v11;
  size_t v12;
  size_t v13;
  _BYTE *v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t *v18;
  size_t v19;
  uint64_t v20;
  uint64_t v21;
  size_t v22;
  _QWORD *v23;
  AG::swift::metadata *v24;
  size_t v25;
  char *v26;
  char *v27;
  char *v28;
  AG::swift::_anonymous_namespace_::TypeSignatureCache *v30;
  AG::swift::metadata *v31;
  CC_SHA1_CTX c;
  void *v33[32];
  void *v34;
  size_t v35;
  uint64_t v36;
  _QWORD v37[24];
  void *v38;
  uint64_t v39;
  uint64_t v40;
  _BYTE v41[64];
  void *v42;
  size_t v43;
  unint64_t v44;
  _QWORD __dst[8];
  _QWORD *v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;

  v49 = *MEMORY[0x1E0C80C00];
  {
    v30 = (AG::swift::_anonymous_namespace_::TypeSignatureCache *)operator new();
    AG::swift::metadata::signature(void)const::cache = (uint64_t)v30;
  }
  v3 = AG::swift::metadata::signature(void)const::cache;
  os_unfair_lock_lock((os_unfair_lock_t)AG::swift::metadata::signature(void)const::cache);
  v4 = *(util::UntypedTable **)(v3 + 8);
  v33[0] = 0;
  v5 = (unsigned __int8 *)util::UntypedTable::lookup(v4, (uint64_t *)this, v33);
  v6 = v33[0];
  os_unfair_lock_unlock((os_unfair_lock_t)v3);
  if (!v6)
  {
    v47 = 0;
    v48 = 8;
    v43 = 0;
    v42 = 0;
    v44 = 8;
    v39 = 0;
    v38 = 0;
    v40 = 8;
    v7 = 1;
    v46 = 0;
    v31 = this;
    __dst[0] = this;
    do
    {
      v8 = v46;
      if (!v46)
        v8 = __dst;
      v9 = (AG::swift::metadata *)v8[--v7];
      v47 = v7;
      v39 = 0;
      v10 = (AG::swift::class_type_descriptor *)AG::swift::metadata::descriptor(v9);
      if (v10)
      {
        v11 = v10;
        AG::swift::context_descriptor::push_generic_args(v10, (uint64_t)v9, v37);
        v12 = v43;
        v13 = v43 + 1;
        if (v44 < v43 + 1)
        {
          AG::vector<AG::swift::metadata const*,8ul,unsigned long>::reserve_slow(v41, v13);
          v12 = v43;
          v13 = v43 + 1;
        }
        v14 = v42;
        if (!v42)
          v14 = v41;
        *(_QWORD *)&v14[8 * v12] = v11;
        v43 = v13;
        if (v38)
          v15 = (char *)v38;
        else
          v15 = (char *)v37;
        if (v39)
        {
          v16 = &v15[24 * v39];
          do
          {
            v17 = *((_QWORD *)v15 + 1);
            if (v17)
            {
              v18 = *(uint64_t **)v15;
              v19 = v47;
              v20 = 8 * v17;
              do
              {
                v21 = *v18;
                v22 = v19 + 1;
                if (v48 < v19 + 1)
                {
                  AG::vector<AG::swift::metadata const*,8ul,unsigned long>::reserve_slow(__dst, v22);
                  v19 = v47;
                  v22 = v47 + 1;
                }
                v23 = v46;
                if (!v46)
                  v23 = __dst;
                v23[v19] = v21;
                v47 = v22;
                ++v18;
                v19 = v22;
                v20 -= 8;
              }
              while (v20);
            }
            v15 += 24;
          }
          while (v15 != v16);
        }
        v7 = v47;
      }
    }
    while (v7);
    if (v43)
    {
      CC_SHA1_Init(&c);
      v24 = v31;
      CC_SHA1_Update(&c, "AGTypeSignature", 0xFu);
      v34 = 0;
      v35 = 0;
      v36 = 8;
      v25 = v43;
      if (v43 > 8)
        AG::vector<dyld_image_uuid_offset,8ul,unsigned long>::reserve_slow(v33, v43);
      v35 = v25;
      _dyld_images_for_addresses();
      if (v34)
        v26 = (char *)v34;
      else
        v26 = (char *)v33;
      if (v35)
      {
        v27 = &v26[32 * v35];
        do
        {
          CC_SHA1_Update(&c, v26, 0x10u);
          v28 = v26 + 16;
          CC_SHA1_Update(&c, v28, 8u);
          v26 = v28 + 16;
        }
        while (v26 != v27);
      }
      v5 = (unsigned __int8 *)malloc_type_malloc(0x14uLL, 0x2A3671A4uLL);
      CC_SHA1_Final(v5, &c);
      if (v34)
        free(v34);
    }
    else
    {
      v5 = 0;
      v24 = v31;
    }
    os_unfair_lock_lock((os_unfair_lock_t)v3);
    util::UntypedTable::insert(*(util::UntypedTable **)(v3 + 8), v24, v5);
    os_unfair_lock_unlock((os_unfair_lock_t)v3);
    if (v38)
      free(v38);
    if (v42)
      free(v42);
    if (v46)
      free(v46);
  }
  return v5;
}

void sub_1AB943480(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF431538](v1, 0x1020C40D5A9D86FLL);
  _Unwind_Resume(a1);
}

AG::swift::_anonymous_namespace_::TypeSignatureCache *AG::swift::`anonymous namespace'::TypeSignatureCache::TypeSignatureCache(AG::swift::_anonymous_namespace_::TypeSignatureCache *this)
{
  uint64_t v2;

  *(_DWORD *)this = 0;
  v2 = operator new();
  util::UntypedTable::UntypedTable(v2, 0, 0, 0, 0, 0);
  *((_QWORD *)this + 1) = v2;
  return this;
}

void sub_1AB943584(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF431538](v1, 0x10A0C405E99A6A3);
  _Unwind_Resume(a1);
}

uint64_t AG::swift::metadata::copy_on_write_heap_object(AG::swift::metadata *this, void **a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;

  result = swift_isUniquelyReferencedNonObjC();
  if ((result & 1) == 0)
  {
    v5 = (uint64_t)*a2;
    v6 = *(unsigned __int8 *)(*((_QWORD *)this - 1) + 80);
    v7 = (v6 + 16) & ~v6;
    v8 = (char *)swift_allocObject();
    (*(void (**)(char *, uint64_t, AG::swift::metadata *))(*((_QWORD *)this - 1) + 16))(&v8[v7], v5 + v7, this);
    result = swift_release();
    *a2 = v8;
  }
  return result;
}

uint64_t AG::swift::class_type_descriptor::immediate_members_offset(AG::swift::class_type_descriptor *this)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;

  if ((*(_DWORD *)this & 0x20000000) != 0)
  {
    v4 = *((int *)this + 6);
    v2 = (char *)this + 24;
    v3 = v4;
    if ((v4 & 7) == 1)
      v5 = *(char **)&v2[v3 & 0xFFFFFFFFFFFFFFF8];
    else
      v5 = &v2[v3];
    return *(_QWORD *)v5 >> 3;
  }
  else if ((*(_DWORD *)this & 0x10000000) != 0)
  {
    return -(uint64_t)*((unsigned int *)this + 6);
  }
  else
  {
    return (*((_DWORD *)this + 7) - *((_DWORD *)this + 8));
  }
}

uint64_t AG::swift::existential_type_metadata::representation(AG::swift::existential_type_metadata *this)
{
  int v1;

  v1 = *((_DWORD *)this + 2);
  if ((v1 & 0x3F000000) != 0)
    return 2;
  else
    return v1 >= 0;
}

uint64_t AG::swift::metadata_visitor::visit_element(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

uint64_t AG::swift::metadata_visitor::visit_case(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

uint64_t AG::swift::metadata_visitor::visit_existential(AG::swift::metadata_visitor *this, const AG::swift::existential_type_metadata *a2)
{
  return (**(uint64_t (***)(AG::swift::metadata_visitor *))this)(this);
}

uint64_t AG::swift::metadata_visitor::visit_function(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

uint64_t AG::swift::metadata_visitor::visit_native_object(AG::swift::metadata_visitor *this, const AG::swift::metadata *a2)
{
  return (**(uint64_t (***)(AG::swift::metadata_visitor *))this)(this);
}

uint64_t AG::swift::`anonymous namespace'::TypeCache::TypeCache(void)::$_0::__invoke(_QWORD *a1)
{
  return (33 * *a1) ^ a1[1];
}

BOOL AG::swift::`anonymous namespace'::TypeCache::TypeCache(void)::$_1::__invoke(_QWORD *a1, _QWORD *a2)
{
  return *a1 == *a2 && a1[1] == a2[1];
}

void *AG::vector<dyld_image_uuid_offset,8ul,unsigned long>::reserve_slow(void *__dst, size_t a2)
{
  size_t v3;
  void *result;

  if (*((_QWORD *)__dst + 34) + (*((_QWORD *)__dst + 34) >> 1) <= a2)
    v3 = a2;
  else
    v3 = *((_QWORD *)__dst + 34) + (*((_QWORD *)__dst + 34) >> 1);
  result = AG::details::realloc_vector<unsigned long,32ul>(*((void **)__dst + 32), __dst, 8uLL, (size_t *)__dst + 34, v3);
  *((_QWORD *)__dst + 32) = result;
  return result;
}

void *AG::details::realloc_vector<unsigned long,32ul>(void *__src, void *__dst, size_t a3, size_t *a4, size_t a5)
{
  void *v7;
  size_t v8;
  size_t v9;
  void *v10;
  const char *v11;
  void *v12;

  v7 = __src;
  if (a5 <= a3)
  {
    if (__src)
    {
      v9 = a3;
      memcpy(__dst, __src, 32 * a5);
      free(v7);
      v12 = 0;
LABEL_8:
      *a4 = v9;
      return v12;
    }
  }
  else
  {
    v8 = malloc_good_size(32 * a5);
    v9 = v8 >> 5;
    if (v8 >> 5 != *a4)
    {
      v10 = malloc_type_realloc(v7, v8, 0x8734B07FuLL);
      if (!v10)
        AG::precondition_failure((AG *)"allocation failure", v11);
      v12 = v10;
      if (!v7)
        memcpy(v10, __dst, 32 * *a4);
      goto LABEL_8;
    }
  }
  return v7;
}

void *AG::vector<AG::swift::context_descriptor::generic_arg,8ul,unsigned long>::reserve_slow(void *__dst, unint64_t a2)
{
  unint64_t v3;
  void *result;

  if (*((_QWORD *)__dst + 26) + (*((_QWORD *)__dst + 26) >> 1) <= a2)
    v3 = a2;
  else
    v3 = *((_QWORD *)__dst + 26) + (*((_QWORD *)__dst + 26) >> 1);
  result = AG::details::realloc_vector<unsigned long,24ul>(*((void **)__dst + 24), __dst, 8uLL, (unint64_t *)__dst + 26, v3);
  *((_QWORD *)__dst + 24) = result;
  return result;
}

void *AG::details::realloc_vector<unsigned long,24ul>(void *__src, void *__dst, unint64_t a3, unint64_t *a4, unint64_t a5)
{
  void *v7;
  size_t v8;
  unint64_t v9;
  void *v10;
  const char *v11;
  void *v12;

  v7 = __src;
  if (a5 <= a3)
  {
    if (__src)
    {
      v9 = a3;
      memcpy(__dst, __src, 24 * a5);
      free(v7);
      v12 = 0;
LABEL_8:
      *a4 = v9;
      return v12;
    }
  }
  else
  {
    v8 = malloc_good_size(24 * a5);
    v9 = v8 / 0x18;
    if (v8 / 0x18 != *a4)
    {
      v10 = malloc_type_realloc(v7, v8, 0x8734B07FuLL);
      if (!v10)
        AG::precondition_failure((AG *)"allocation failure", v11);
      v12 = v10;
      if (!v7)
        memcpy(v10, __dst, 24 * *a4);
      goto LABEL_8;
    }
  }
  return v7;
}

uint64_t AGNewTupleType(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  const char *v3;

  if (a1 == 1)
    return *(_QWORD *)a2;
  result = swift_getTupleTypeMetadata();
  if (v3)
    AG::precondition_failure((AG *)"invalid tuple type.", v3);
  return result;
}

uint64_t AGTupleSize(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 - 8) + 64);
}

uint64_t AGTupleElementSize(_QWORD *a1, const char *a2)
{
  if (*a1 != 769)
  {
    if (!a2)
      return *(_QWORD *)(*(a1 - 1) + 64);
LABEL_6:
    AG::precondition_failure((AG *)"index out of range: %d", a2, a2);
  }
  if (a1[1] <= (unint64_t)a2)
    goto LABEL_6;
  a1 = (_QWORD *)a1[2 * (_QWORD)a2 + 3];
  return *(_QWORD *)(*(a1 - 1) + 64);
}

uint64_t AGTupleElementOffsetChecked(_QWORD *a1, const char *a2, _QWORD *a3)
{
  _QWORD *v3;

  if (*a1 == 769)
  {
    if (a1[1] > (unint64_t)a2)
    {
      v3 = &a1[2 * (_QWORD)a2];
      if ((_QWORD *)v3[3] == a3)
        return v3[4];
LABEL_10:
      AG::precondition_failure((AG *)"element type mismatch", a2);
    }
LABEL_9:
    AG::precondition_failure((AG *)"index out of range: %d", a2, a2);
  }
  if (a2)
    goto LABEL_9;
  if (a1 != a3)
    goto LABEL_10;
  return 0;
}

uint64_t AGTupleSetElement(AG::swift::metadata *a1, char *a2, unint64_t a3, const char *a4, AG::swift::metadata *a5, uint64_t a6)
{
  _QWORD *v6;

  if (*(_QWORD *)a1 == 769)
  {
    if (*((_QWORD *)a1 + 1) > a3)
    {
      v6 = (_QWORD *)((char *)a1 + 16 * a3);
      a1 = (AG::swift::metadata *)v6[3];
      a2 += v6[4];
      goto LABEL_5;
    }
LABEL_7:
    AG::precondition_failure((AG *)"index out of range: %d", a2, a3);
  }
  if (a3)
    goto LABEL_7;
LABEL_5:
  if (a1 != a5)
    AG::precondition_failure((AG *)"element type mismatch", a2);
  return update(a2, a4, a5, a6);
}

uint64_t update(void *a1, const char *a2, const AG::swift::metadata *a3, uint64_t a4)
{
  uint64_t (**v4)(void *, const char *);
  uint64_t (**v5)(void *, const char *);

  v4 = (uint64_t (**)(void *, const char *))*((_QWORD *)a3 - 1);
  switch((int)a4)
  {
    case 0:
      v5 = v4 + 3;
      break;
    case 1:
      v5 = v4 + 2;
      break;
    case 2:
      v5 = v4 + 5;
      break;
    case 3:
      v5 = v4 + 4;
      break;
    default:
      AG::precondition_failure((AG *)"unknown copy options: %d", a2, a4);
  }
  return (*v5)(a1, a2);
}

uint64_t AGTupleGetElement(AG::swift::metadata *a1, const char *a2, unint64_t a3, void *a4, AG::swift::metadata *a5, uint64_t a6)
{
  _QWORD *v6;

  if (*(_QWORD *)a1 == 769)
  {
    if (*((_QWORD *)a1 + 1) > a3)
    {
      v6 = (_QWORD *)((char *)a1 + 16 * a3);
      a1 = (AG::swift::metadata *)v6[3];
      a2 += v6[4];
      goto LABEL_5;
    }
LABEL_7:
    AG::precondition_failure((AG *)"index out of range: %d", a2, a3);
  }
  if (a3)
    goto LABEL_7;
LABEL_5:
  if (a1 != a5)
    AG::precondition_failure((AG *)"element type mismatch", a2);
  return update(a4, a2, a5, a6);
}

uint64_t AGTupleDestroy(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 8))(a2, a1);
}

uint64_t AGTupleDestroyElement(_QWORD *a1, const char *a2, unint64_t a3)
{
  if (*a1 == 769)
  {
    if (a1[1] > a3)
      return (*(uint64_t (**)(const char *, _QWORD))(*(_QWORD *)(a1[2 * a3 + 3] - 8) + 8))(&a2[a1[2 * a3 + 4]], a1[2 * a3 + 3]);
LABEL_7:
    AG::precondition_failure((AG *)"index out of range: %d", a2, a3);
  }
  if (a3)
    goto LABEL_7;
  return (*(uint64_t (**)(const char *, _QWORD *))(*(a1 - 1) + 8))(a2, a1);
}

util::Heap *util::InlineHeap<8192ul>::~InlineHeap(util::Heap *a1)
{
  util::Heap::reset(a1, 0, 0);
  return a1;
}

unint64_t AG::Graph::UpdateStack::global_top(unint64_t this)
{
  unint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;

  if (this)
  {
    while (1)
    {
      v1 = this & 0xFFFFFFFFFFFFFFFELL;
      v2 = *(_QWORD *)((this & 0xFFFFFFFFFFFFFFFELL) + 104);
      if (v2)
        break;
      this = *(_QWORD *)(v1 + 16);
      if (!this)
        return this;
    }
    v3 = v1 + 32;
    v4 = *(_QWORD *)(v1 + 96);
    if (!v4)
      v4 = v3;
    return v4 + 8 * v2 - 8;
  }
  return this;
}

void AG::Graph::UpdateStack::cancel(AG::Graph::UpdateStack *this)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _DWORD *v6;

  v1 = AG::Graph::_current_update_key;
  v2 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v1);
  if (v2)
  {
    while (1)
    {
      v3 = v2 & 0xFFFFFFFFFFFFFFFELL;
      v4 = *(_QWORD *)(v3 + 104);
      if (v4)
        break;
LABEL_8:
      if ((*(_BYTE *)(v3 + 120) & 2) == 0)
      {
        v2 = *(_QWORD *)(v3 + 16);
        if (v2)
          continue;
      }
      return;
    }
    v5 = v3 + 32;
    if (*(_QWORD *)(v3 + 96))
      v5 = *(_QWORD *)(v3 + 96);
    v6 = (_DWORD *)(v5 + 8 * v4 - 4);
    while ((*v6 & 8) == 0)
    {
      *v6 |= 8u;
      v6 -= 2;
      if (!--v4)
        goto LABEL_8;
    }
  }
}

void AG::Graph::UpdateStack::~UpdateStack(AG::Graph::UpdateStack *this, const char *a2)
{
  unsigned int *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;

  v3 = (unsigned int *)((char *)this + 32);
  v4 = *((_QWORD *)this + 13);
  if (*((_QWORD *)this + 12))
    v3 = (unsigned int *)*((_QWORD *)this + 12);
  if (v4)
  {
    v5 = AG::data::_shared_table_bytes;
    v6 = 8 * v4;
    do
    {
      v7 = *v3;
      v3 += 2;
      *(_DWORD *)(v5 + v7) -= 64;
      v6 -= 8;
    }
    while (v6);
  }
  v8 = *(_QWORD *)this;
  if (*((_QWORD *)this + 1) != *(_QWORD *)(*(_QWORD *)this + 416))
  {
    AG::non_fatal_precondition_failure((AG *)"invalid graph update (access from multiple threads?)", a2);
    v8 = *(_QWORD *)this;
  }
  *(_QWORD *)(v8 + 416) = *((_QWORD *)this + 3);
  v9 = *((_QWORD *)this + 2);
  v10 = AG::Graph::_current_update_key;
  *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v10) = v9;
  if ((*((_BYTE *)this + 120) & 0x10) != 0)
    *(_BYTE *)(*(_QWORD *)this + 408) = 0;
  v11 = (void *)*((_QWORD *)this + 12);
  if (v11)
    free(v11);
}

unsigned int *AG::Graph::with_update(uint64_t a1, unsigned int a2, void (*a3)(void))
{
  unint64_t StatusReg;
  unint64_t v4;
  int v5;
  const char *v6;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unsigned int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v8 = a1;
  v9 = StatusReg - 224;
  v10 = *(_QWORD *)(StatusReg + 8 * AG::Graph::_current_update_key);
  v4 = atomic_load((unint64_t *)(a1 + 416));
  v11 = v4;
  v14 = 0;
  v15 = 0;
  v16 = 8;
  v17 = 0;
  if (v10)
  {
    v17 = *(_DWORD *)((v10 & 0xFFFFFFFFFFFFFFFELL) + 120) & 4;
    v5 = v17 | 0x10;
  }
  else
  {
    v5 = 16;
  }
  *(_QWORD *)(a1 + 416) = v9;
  if (!*(_BYTE *)(a1 + 408))
  {
    *(_BYTE *)(a1 + 408) = 1;
    v17 = v5;
  }
  *(_QWORD *)(StatusReg + 8 * AG::Graph::_current_update_key) = &v8;
  v12 = a2;
  v13 = (*(_DWORD *)(AG::data::_shared_table_bytes + a2) >> 1) & 1;
  v15 = 1;
  a3();
  return _ZZN2AG5Graph11with_updateENS_4data3ptrINS_4NodeEEENS_15ClosureFunctionIvJEEEEN13scoped_updateD1Ev((unsigned int *)&v8, v6);
}

void sub_1AB943EE8(_Unwind_Exception *a1, const char *a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  _ZZN2AG5Graph11with_updateENS_4data3ptrINS_4NodeEEENS_15ClosureFunctionIvJEEEEN13scoped_updateD1Ev((unsigned int *)va, a2);
  _Unwind_Resume(a1);
}

unsigned int *_ZZN2AG5Graph11with_updateENS_4data3ptrINS_4NodeEEENS_15ClosureFunctionIvJEEEEN13scoped_updateD1Ev(unsigned int *a1, const char *a2)
{
  unsigned int *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;

  v3 = a1 + 8;
  v4 = *((_QWORD *)a1 + 13);
  if (*((_QWORD *)a1 + 12))
    v3 = (unsigned int *)*((_QWORD *)a1 + 12);
  *((_QWORD *)a1 + 13) = v4 - 1;
  if (v4 != 1)
  {
    v5 = AG::data::_shared_table_bytes;
    v6 = 8 * v4 - 8;
    do
    {
      v7 = *v3;
      v3 += 2;
      *(_DWORD *)(v5 + v7) -= 64;
      v6 -= 8;
    }
    while (v6);
  }
  v8 = *(_QWORD *)a1;
  if (*((_QWORD *)a1 + 1) != *(_QWORD *)(*(_QWORD *)a1 + 416))
  {
    AG::non_fatal_precondition_failure((AG *)"invalid graph update (access from multiple threads?)", a2);
    v8 = *(_QWORD *)a1;
  }
  *(_QWORD *)(v8 + 416) = *((_QWORD *)a1 + 3);
  v9 = *((_QWORD *)a1 + 2);
  v10 = AG::Graph::_current_update_key;
  *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v10) = v9;
  if ((a1[30] & 0x10) != 0)
    *(_BYTE *)(*(_QWORD *)a1 + 408) = 0;
  v11 = (void *)*((_QWORD *)a1 + 12);
  if (v11)
    free(v11);
  return a1;
}

void *AG::Graph::collect_stack(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t i;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  void *result;

  v2 = AG::Graph::_current_update_key;
  for (i = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v2); i; i = *(_QWORD *)(v5 + 16))
  {
    v5 = i & 0xFFFFFFFFFFFFFFFELL;
    v6 = *(_QWORD *)((i & 0xFFFFFFFFFFFFFFFELL) + 104);
    if (v6)
    {
      v7 = a2[1];
      v8 = 8 * v6 - 8;
      do
      {
        if (*(_QWORD *)(v5 + 96))
          v9 = *(_QWORD *)(v5 + 96);
        else
          v9 = v5 + 32;
        v10 = v7 + 1;
        if (a2[2] < v7 + 1)
        {
          result = AG::vector<AG::data::ptr<AG::Node>,0ul,unsigned long>::reserve_slow((uint64_t)a2, v10);
          v7 = a2[1];
          v10 = v7 + 1;
        }
        *(_DWORD *)(*a2 + 4 * v7) = *(_DWORD *)(v9 + v8);
        a2[1] = v10;
        v8 -= 8;
        v7 = v10;
        --v6;
      }
      while (v6);
    }
  }
  return result;
}

uint64_t AG::Graph::is_context_updating(AG::Graph *this, uint64_t a2)
{
  uint64_t v2;
  uint64_t i;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;

  v2 = AG::Graph::_current_update_key;
  for (i = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v2); i; i = v4[2])
  {
    v4 = (_QWORD *)(i & 0xFFFFFFFFFFFFFFFELL);
    v5 = v4[13];
    v6 = 8 * v5 - 8;
    v7 = v5 + 1;
    while (--v7)
    {
      v8 = (_QWORD *)v4[12];
      if (!v8)
        v8 = v4 + 4;
      v9 = *(_QWORD *)(AG::data::_shared_table_bytes + (*(_DWORD *)((_BYTE *)v8 + v6) & 0xFFFFFE00));
      if (v9)
        v9 = *(_QWORD *)(v9 + 48);
      v6 -= 8;
      if (v9 == a2)
        return 1;
    }
  }
  return 0;
}

uint64_t AG::Graph::UpdateStack::cancelled(uint64_t this)
{
  unint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;

  if (this)
  {
    while (1)
    {
      v1 = this & 0xFFFFFFFFFFFFFFFELL;
      v2 = *(_QWORD *)((this & 0xFFFFFFFFFFFFFFFELL) + 104);
      if (v2)
        break;
      this = *(_QWORD *)(v1 + 16);
      if (!this)
        return this;
    }
    v3 = v1 + 32;
    v4 = *(_QWORD *)(v1 + 96);
    if (!v4)
      v4 = v3;
    return (*(unsigned __int8 *)(v4 + 8 * v2 - 4) >> 3) & 1;
  }
  return this;
}

void AG::Graph::print_stack(AG::Graph *this)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  FILE **v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unsigned int v10;
  uint64_t v11;
  FILE *v12;
  int v13;
  int v14;
  unsigned int v15;
  const char *v16;
  const char *v17;
  const char *v18;
  const char *v19;
  unint64_t v20;

  v1 = AG::Graph::_current_update_key;
  v2 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v1);
  if (v2)
  {
    v3 = -1;
    v4 = v2;
    do
    {
      ++v3;
      v4 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFFFFELL) + 16);
    }
    while (v4);
    v5 = (FILE **)MEMORY[0x1E0C80C10];
    do
    {
      v20 = v2 & 0xFFFFFFFFFFFFFFFELL;
      v6 = *(_QWORD *)((v2 & 0xFFFFFFFFFFFFFFFELL) + 104);
      if (v6)
      {
        v7 = 8 * v6;
        do
        {
          --v6;
          v8 = *(_QWORD *)(v20 + 96);
          if (!v8)
            v8 = v20 + 32;
          v9 = v8 + v7;
          v11 = *(unsigned int *)(v9 - 8);
          v10 = *(_DWORD *)(v9 - 4);
          v12 = *v5;
          v13 = *(_DWORD *)(AG::data::_shared_table_bytes + v11);
          v14 = v13 >> 6;
          v15 = v10 >> 4;
          if ((v10 & 1) != 0)
            v16 = "P";
          else
            v16 = "";
          if ((v10 & 8) != 0)
            v17 = "C";
          else
            v17 = "";
          if ((v13 & 1) != 0)
            v18 = "D";
          else
            v18 = "";
          if ((v13 & 0x10) != 0)
            v19 = "V";
          else
            v19 = "";
          fprintf(v12, "frame %d.%d: attribute %u; count=%d, index=%d/%d %s%s%s%s\n",
            v3,
            v6,
            v11,
            v14,
            v15,
            *(_DWORD *)(AG::data::_shared_table_bytes + v11 + 12) >> 5,
            v16,
            v17,
            v18,
            v19);
          v5 = (FILE **)MEMORY[0x1E0C80C10];
          v7 -= 8;
        }
        while (v6);
      }
      v2 = *(_QWORD *)(v20 + 16);
      --v3;
    }
    while (v2);
  }
}

uint64_t AG::Graph::update_attribute(AG::data::ptr<AG::Node>,unsigned int)::$_0::__invoke(uint64_t a1)
{
  AG::Graph::UpdateStack *v2;
  uint64_t v3;
  unint64_t StatusReg;
  uint64_t v5;
  uint64_t result;

  v2 = *(AG::Graph::UpdateStack **)a1;
  v3 = AG::Graph::_current_update_key;
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v5 = *(_QWORD *)(StatusReg + 8 * v3);
  *(_QWORD *)(StatusReg + 8 * v3) = v2;
  result = AG::Graph::UpdateStack::update(*(AG::Graph::UpdateStack **)a1);
  *(_DWORD *)(a1 + 8) = result;
  *(_QWORD *)(StatusReg + 8 * AG::Graph::_current_update_key) = v5;
  return result;
}

void sub_1AB94430C(_Unwind_Exception *a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  *(_QWORD *)(v1 + 8 * *v2) = v3;
  _Unwind_Resume(a1);
}

void *AG::vector<AG::data::ptr<AG::Node>,0ul,unsigned long>::reserve_slow(uint64_t a1, unint64_t a2)
{
  uint64_t v3;
  void *result;

  if (*(_QWORD *)(a1 + 16) + (*(_QWORD *)(a1 + 16) >> 1) <= a2)
    v3 = a2;
  else
    v3 = *(_QWORD *)(a1 + 16) + (*(_QWORD *)(a1 + 16) >> 1);
  result = AG::details::realloc_vector<unsigned long,4ul>(*(void **)a1, (size_t *)(a1 + 16), v3);
  *(_QWORD *)a1 = result;
  return result;
}

void *AG::details::realloc_vector<unsigned long,4ul>(void *a1, size_t *a2, uint64_t a3)
{
  void *v4;
  size_t v5;
  size_t v6;
  void *v7;
  const char *v8;

  v4 = a1;
  if (a3)
  {
    v5 = malloc_good_size(4 * a3);
    v6 = v5 >> 2;
    if (v5 >> 2 != *a2)
    {
      v7 = malloc_type_realloc(v4, v5, 0xF3138078uLL);
      if (!v7)
        AG::precondition_failure((AG *)"allocation failure", v8);
      v4 = v7;
      *a2 = v6;
    }
  }
  else
  {
    *a2 = 0;
    free(a1);
    return 0;
  }
  return v4;
}

_QWORD *AG::Graph::ProfileTrace::begin_update(_QWORD *result, unint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t *v6;

  if (*(_BYTE *)(*(_QWORD *)a2 + 296))
  {
    v3 = result;
    v4 = mach_absolute_time();
    v5 = a2;
    v6 = &v5;
    result = std::__hash_table<std::__hash_value_type<unsigned long,AG::Graph::ProfileTrace::UpdateData>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,AG::Graph::ProfileTrace::UpdateData>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,AG::Graph::ProfileTrace::UpdateData>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,AG::Graph::ProfileTrace::UpdateData>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>((uint64_t)(v3 + 2), &v5, (uint64_t)&std::piecewise_construct, (uint64_t **)&v6);
    result[4] = 0;
    result[5] = 0;
    result[3] = v4;
  }
  return result;
}

uint64_t *AG::Graph::ProfileTrace::end_update(uint64_t a1, unint64_t a2)
{
  _QWORD *v3;
  uint64_t *result;
  uint64_t v5;
  unint64_t v6;
  uint64_t *v7;
  unint64_t v8;

  v3 = (_QWORD *)(a1 + 16);
  v8 = a2;
  result = std::__hash_table<std::__hash_value_type<unsigned long,AG::Graph::ProfileTrace::UpdateData>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,AG::Graph::ProfileTrace::UpdateData>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,AG::Graph::ProfileTrace::UpdateData>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,AG::Graph::ProfileTrace::UpdateData>>>::find<unsigned long>((_QWORD *)(a1 + 16), &v8);
  if (result)
  {
    v5 = result[3];
    result = (uint64_t *)std::__hash_table<std::__hash_value_type<unsigned long,AG::Graph::ProfileTrace::UpdateData>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,AG::Graph::ProfileTrace::UpdateData>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,AG::Graph::ProfileTrace::UpdateData>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,AG::Graph::ProfileTrace::UpdateData>>>::erase(v3, result);
    if (v5)
    {
      v6 = *(_QWORD *)(a2 + 16) & 0xFFFFFFFFFFFFFFFELL;
      if (v6)
      {
        if (*(_BYTE *)(*(_QWORD *)v6 + 296))
        {
          v8 = v6;
          result = std::__hash_table<std::__hash_value_type<unsigned long,AG::Graph::ProfileTrace::UpdateData>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,AG::Graph::ProfileTrace::UpdateData>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,AG::Graph::ProfileTrace::UpdateData>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,AG::Graph::ProfileTrace::UpdateData>>>::find<unsigned long>(v3, &v8);
          if (result)
          {
            v7 = result;
            if (*(_BYTE *)(*(_QWORD *)v6 + 296))
              result = (uint64_t *)mach_absolute_time();
            else
              result = 0;
            v7[4] += (uint64_t)result - v5;
          }
        }
      }
    }
  }
  return result;
}

uint64_t AG::Graph::ProfileTrace::begin_update(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t result;
  uint64_t v5;
  unint64_t v6;

  v1 = AG::Graph::_current_update_key;
  v2 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v1);
  if ((v2 & 1) != 0)
    v3 = 0;
  else
    v3 = v2 & 0xFFFFFFFFFFFFFFFELL;
  v6 = v3;
  result = (uint64_t)std::__hash_table<std::__hash_value_type<unsigned long,AG::Graph::ProfileTrace::UpdateData>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,AG::Graph::ProfileTrace::UpdateData>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,AG::Graph::ProfileTrace::UpdateData>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,AG::Graph::ProfileTrace::UpdateData>>>::find<unsigned long>((_QWORD *)(a1 + 16), &v6);
  if (result)
  {
    v5 = result;
    if (*(_BYTE *)(*(_QWORD *)v3 + 296))
      result = mach_absolute_time();
    else
      result = 0;
    *(_QWORD *)(v5 + 40) = result;
  }
  return result;
}

char *AG::Graph::ProfileTrace::end_update(uint64_t a1, unsigned int a2, int a3)
{
  uint64_t v5;
  uint64_t v6;
  char **v7;
  char *result;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  unint64_t v16;
  unint64_t v17;
  char **v18;

  v5 = AG::Graph::_current_update_key;
  v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v5);
  if ((v6 & 1) != 0)
    v7 = 0;
  else
    v7 = (char **)(v6 & 0xFFFFFFFFFFFFFFFELL);
  v18 = v7;
  result = (char *)std::__hash_table<std::__hash_value_type<unsigned long,AG::Graph::ProfileTrace::UpdateData>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,AG::Graph::ProfileTrace::UpdateData>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,AG::Graph::ProfileTrace::UpdateData>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,AG::Graph::ProfileTrace::UpdateData>>>::find<unsigned long>((_QWORD *)(a1 + 16), (unint64_t *)&v18);
  if (result)
  {
    v9 = result;
    v10 = *((_QWORD *)result + 5);
    if (v10)
    {
      v11 = *v7;
      if (v11[296])
      {
        v12 = mach_absolute_time();
        v10 = *((_QWORD *)v9 + 5);
      }
      else
      {
        v12 = 0;
      }
      v13 = v12 - v10;
      v14 = *((_QWORD *)v9 + 4);
      v15 = v13 >= v14;
      v16 = v13 - v14;
      if (v15)
        v17 = v16;
      else
        v17 = 0;
      *((_QWORD *)v9 + 4) = 0;
      return AG::Graph::add_profile_update(v11, a2, v17, a3);
    }
  }
  return result;
}

char *AG::Graph::add_profile_update(char *result, unsigned int a2, unint64_t a3, int a4)
{
  char *v7;
  uint64_t v8;
  const AG::Graph *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;

  if (result[296])
  {
    v7 = result;
    v8 = *((_QWORD *)result + 38);
    if (!v8)
    {
      v8 = operator new();
      AG::Graph::ProfileData::ProfileData((AG::Graph::ProfileData *)v8, v9);
      v10 = (uint64_t *)(v7 + 304);
      v11 = *v10;
      *v10 = v8;
      if (v11)
      {
        std::default_delete<AG::Graph::ProfileData>::operator()[abi:ne180100]((uint64_t)v10, v11);
        v8 = *v10;
      }
    }
    if (a3 >= *(_QWORD *)v8)
      v12 = a3 - *(_QWORD *)v8;
    else
      v12 = 0;
    result = AG::Graph::ProfileData::Category::add_update((_QWORD *)(v8 + 8), a2, v12, a4);
    *(_BYTE *)(v8 + 184) = 1;
  }
  return result;
}

void sub_1AB9446D0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF431538](v1, 0x10A0C40A5AAE56ELL);
  _Unwind_Resume(a1);
}

int64x2_t *AG::Graph::ProfileData::Item::operator+=(int64x2_t *a1, int64x2_t *a2)
{
  int64x2_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64x2_t *v8;
  int64x2_t *v9;
  int64x2_t *v10;
  unint64_t v11;
  unint64_t v12;
  int64x2_t v13;
  uint64_t v14;
  unint64_t v15;
  BOOL v16;
  unint64_t v17;
  uint64_t v18;
  _OWORD *v19;
  __int128 v20;
  __int128 v21;

  v3 = vaddq_s64(a1[1], a2[1]);
  *a1 = vaddq_s64(*a1, *a2);
  a1[1] = v3;
  v4 = a2[2].i64[1];
  if (v4)
  {
    v5 = a2[2].i64[0];
    v6 = v5 + 48 * v4;
    v8 = (int64x2_t *)a1[2].i64[0];
    v7 = a1[2].u64[1];
    v9 = v8;
    do
    {
      v10 = &v8[3 * v7];
      if (v9 == v10)
        goto LABEL_10;
      v11 = *(_QWORD *)(v5 + 8);
      while (1)
      {
        v12 = v9->u64[1];
        if (v12 >= v11)
          break;
        v9 += 3;
        if (v9 == v10)
        {
          v9 = &v8[3 * v7];
          goto LABEL_10;
        }
      }
      if (v12 != v11)
      {
LABEL_10:
        v14 = (uint64_t)v8;
        if (a1[3].i64[0] < v7 + 1)
        {
          AG::vector<AG::Graph::ProfileData::Mark,0ul,unsigned long>::reserve_slow((uint64_t)a1[2].i64, v7 + 1);
          v14 = a1[2].i64[0];
          v7 = a1[2].u64[1];
        }
        v15 = 0xAAAAAAAAAAAAAAABLL * (v9 - v8);
        v16 = v7 > v15;
        v17 = v7 - v15;
        if (v16)
          memmove((void *)(v14 + 48 * v15 + 48), (const void *)(v14 + 48 * v15), 48 * v17);
        v18 = 3 * v15;
        v19 = (_OWORD *)(v14 + 48 * v15);
        v20 = *(_OWORD *)v5;
        v21 = *(_OWORD *)(v5 + 32);
        v19[1] = *(_OWORD *)(v5 + 16);
        v19[2] = v21;
        *v19 = v20;
        v8 = (int64x2_t *)a1[2].i64[0];
        v7 = a1[2].i64[1] + 1;
        a1[2].i64[1] = v7;
        v9 = &v8[v18 + 3];
      }
      else
      {
        v13 = vaddq_s64(v9[2], *(int64x2_t *)(v5 + 32));
        v9[1] = vaddq_s64(v9[1], *(int64x2_t *)(v5 + 16));
        v9[2] = v13;
      }
      v5 += 48;
    }
    while (v5 != v6);
  }
  return a1;
}

double AG::Graph::ProfileData::Item::mark(AG::Graph::ProfileData::Item *this, int a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  double result;

  if (*(_QWORD *)this)
  {
    v6 = *((_QWORD *)this + 5);
    if (*((_QWORD *)this + 6) < (unint64_t)(v6 + 1))
    {
      AG::vector<AG::Graph::ProfileData::Mark,0ul,unsigned long>::reserve_slow((uint64_t)this + 32, v6 + 1);
      v6 = *((_QWORD *)this + 5);
    }
    v7 = *((_QWORD *)this + 4) + 48 * v6;
    v9 = *(_OWORD *)this;
    v8 = *((_OWORD *)this + 1);
    *(_DWORD *)v7 = a2;
    *(_QWORD *)(v7 + 8) = a3;
    *(_OWORD *)(v7 + 16) = v9;
    *(_OWORD *)(v7 + 32) = v8;
    ++*((_QWORD *)this + 5);
    result = 0.0;
    *(_OWORD *)this = 0u;
    *((_OWORD *)this + 1) = 0u;
  }
  return result;
}

char *AG::Graph::ProfileData::Category::add_update(_QWORD *a1, unsigned int a2, uint64_t a3, int a4)
{
  char *result;
  unsigned int v7;
  unsigned int *v8;

  v7 = a2;
  ++*a1;
  a1[2] += a3;
  if (a4)
  {
    ++a1[1];
    a1[3] += a3;
  }
  v8 = &v7;
  result = std::__hash_table<std::__hash_value_type<AG::data::ptr<AG::Node>,AG::Graph::ProfileData::Item>,std::__unordered_map_hasher<AG::data::ptr<AG::Node>,std::__hash_value_type<AG::data::ptr<AG::Node>,AG::Graph::ProfileData::Item>,std::hash<AG::data::ptr<AG::Node>>,std::equal_to<AG::data::ptr<AG::Node>>,true>,std::__unordered_map_equal<AG::data::ptr<AG::Node>,std::__hash_value_type<AG::data::ptr<AG::Node>,AG::Graph::ProfileData::Item>,std::equal_to<AG::data::ptr<AG::Node>>,std::hash<AG::data::ptr<AG::Node>>,true>,std::allocator<std::__hash_value_type<AG::data::ptr<AG::Node>,AG::Graph::ProfileData::Item>>>::__emplace_unique_key_args<AG::data::ptr<AG::Node>,std::piecewise_construct_t const&,std::tuple<AG::data::ptr<AG::Node> const&>,std::tuple<>>((uint64_t)(a1 + 7), &v7, (uint64_t)&std::piecewise_construct, &v8);
  ++*((_QWORD *)result + 3);
  *((_QWORD *)result + 5) += a3;
  if (a4)
  {
    ++*((_QWORD *)result + 4);
    *((_QWORD *)result + 6) += a3;
  }
  return result;
}

AG::Graph::ProfileData *AG::Graph::ProfileData::ProfileData(AG::Graph::ProfileData *this, const AG::Graph *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_OWORD *)((char *)this + 8) = 0u;
  *((_QWORD *)this + 11) = 0;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *((_DWORD *)this + 24) = 1065353216;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *((_DWORD *)this + 34) = 1065353216;
  *((_OWORD *)this + 9) = 0u;
  *((_OWORD *)this + 10) = 0u;
  *((_DWORD *)this + 44) = 1065353216;
  *((_BYTE *)this + 184) = 0;
  *(_QWORD *)this = 0;
  v3 = mach_absolute_time();
  v4 = 16;
  do
  {
    v5 = mach_absolute_time();
    v6 = v5 - v3 + *(_QWORD *)this;
    *(_QWORD *)this = v6;
    v3 = v5;
    --v4;
  }
  while (v4);
  *(_QWORD *)this = v6 >> 4;
  return this;
}

void sub_1AB944A3C(_Unwind_Exception *a1)
{
  AG::Graph::ProfileData::Category *v1;
  uint64_t v2;

  std::__hash_table<std::__hash_value_type<unsigned int,AG::Graph::ProfileData::Category>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,AG::Graph::ProfileData::Category>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,AG::Graph::ProfileData::Category>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,AG::Graph::ProfileData::Category>>>::~__hash_table(v2);
  AG::Graph::ProfileData::Category::~Category(v1);
  _Unwind_Resume(a1);
}

void AG::Graph::ProfileData::Category::~Category(AG::Graph::ProfileData::Category *this)
{
  void *v2;

  std::__hash_table<std::__hash_value_type<unsigned int,AG::Graph::ProfileData::Item>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,AG::Graph::ProfileData::Item>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,AG::Graph::ProfileData::Item>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,AG::Graph::ProfileData::Item>>>::~__hash_table((uint64_t)this + 96);
  std::__hash_table<std::__hash_value_type<unsigned int,AG::Graph::ProfileData::Item>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,AG::Graph::ProfileData::Item>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,AG::Graph::ProfileData::Item>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,AG::Graph::ProfileData::Item>>>::~__hash_table((uint64_t)this + 56);
  v2 = (void *)*((_QWORD *)this + 4);
  if (v2)
    free(v2);
}

void AG::Graph::ProfileData::Category::mark(AG::Graph::ProfileData::Category *this, int a2, uint64_t a3)
{
  _QWORD *i;
  _QWORD *j;

  AG::Graph::ProfileData::Item::mark(this, a2, a3);
  for (i = (_QWORD *)*((_QWORD *)this + 9); i; i = (_QWORD *)*i)
    AG::Graph::ProfileData::Item::mark((AG::Graph::ProfileData::Item *)(i + 3), a2, a3);
  for (j = (_QWORD *)*((_QWORD *)this + 14); j; j = (_QWORD *)*j)
    AG::Graph::ProfileData::Item::mark((AG::Graph::ProfileData::Item *)(j + 3), a2, a3);
}

uint64_t AG::Graph::ProfileData::remove_node(uint64_t a1, unsigned int a2, unsigned int a3)
{
  _QWORD *v4;
  uint64_t result;
  uint64_t *v6;
  int64x2_t *v7;
  char *v8;
  _QWORD *i;
  uint64_t *v10;
  int64x2_t *v11;
  char *v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int *v15;

  v13 = a2;
  v14 = a3;
  v4 = (_QWORD *)(a1 + 64);
  result = (uint64_t)std::__hash_table<std::__hash_value_type<AG::data::ptr<AG::Node>,AG::Graph::ProfileData::Item>,std::__unordered_map_hasher<AG::data::ptr<AG::Node>,std::__hash_value_type<AG::data::ptr<AG::Node>,AG::Graph::ProfileData::Item>,std::hash<AG::data::ptr<AG::Node>>,std::equal_to<AG::data::ptr<AG::Node>>,true>,std::__unordered_map_equal<AG::data::ptr<AG::Node>,std::__hash_value_type<AG::data::ptr<AG::Node>,AG::Graph::ProfileData::Item>,std::equal_to<AG::data::ptr<AG::Node>>,std::hash<AG::data::ptr<AG::Node>>,true>,std::allocator<std::__hash_value_type<AG::data::ptr<AG::Node>,AG::Graph::ProfileData::Item>>>::find<AG::data::ptr<AG::Node>>((_QWORD *)(a1 + 64), &v13);
  if (result)
  {
    v6 = (uint64_t *)result;
    v7 = (int64x2_t *)(result + 24);
    v15 = &v14;
    v8 = std::__hash_table<std::__hash_value_type<unsigned int,AG::Graph::ProfileData::Item>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,AG::Graph::ProfileData::Item>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,AG::Graph::ProfileData::Item>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,AG::Graph::ProfileData::Item>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(a1 + 104, &v14, (uint64_t)&std::piecewise_construct, &v15);
    AG::Graph::ProfileData::Item::operator+=((int64x2_t *)(v8 + 24), v7);
    result = std::__hash_table<std::__hash_value_type<AG::data::ptr<AG::Node>,AG::Graph::ProfileData::Item>,std::__unordered_map_hasher<AG::data::ptr<AG::Node>,std::__hash_value_type<AG::data::ptr<AG::Node>,AG::Graph::ProfileData::Item>,std::hash<AG::data::ptr<AG::Node>>,std::equal_to<AG::data::ptr<AG::Node>>,true>,std::__unordered_map_equal<AG::data::ptr<AG::Node>,std::__hash_value_type<AG::data::ptr<AG::Node>,AG::Graph::ProfileData::Item>,std::equal_to<AG::data::ptr<AG::Node>>,std::hash<AG::data::ptr<AG::Node>>,true>,std::allocator<std::__hash_value_type<AG::data::ptr<AG::Node>,AG::Graph::ProfileData::Item>>>::erase(v4, v6);
  }
  for (i = *(_QWORD **)(a1 + 160); i; i = (_QWORD *)*i)
  {
    result = (uint64_t)std::__hash_table<std::__hash_value_type<AG::data::ptr<AG::Node>,AG::Graph::ProfileData::Item>,std::__unordered_map_hasher<AG::data::ptr<AG::Node>,std::__hash_value_type<AG::data::ptr<AG::Node>,AG::Graph::ProfileData::Item>,std::hash<AG::data::ptr<AG::Node>>,std::equal_to<AG::data::ptr<AG::Node>>,true>,std::__unordered_map_equal<AG::data::ptr<AG::Node>,std::__hash_value_type<AG::data::ptr<AG::Node>,AG::Graph::ProfileData::Item>,std::equal_to<AG::data::ptr<AG::Node>>,std::hash<AG::data::ptr<AG::Node>>,true>,std::allocator<std::__hash_value_type<AG::data::ptr<AG::Node>,AG::Graph::ProfileData::Item>>>::find<AG::data::ptr<AG::Node>>(i + 10, &v13);
    if (result)
    {
      v10 = (uint64_t *)result;
      v11 = (int64x2_t *)(result + 24);
      v15 = &v14;
      v12 = std::__hash_table<std::__hash_value_type<unsigned int,AG::Graph::ProfileData::Item>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,AG::Graph::ProfileData::Item>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,AG::Graph::ProfileData::Item>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,AG::Graph::ProfileData::Item>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((uint64_t)(i + 15), &v14, (uint64_t)&std::piecewise_construct, &v15);
      AG::Graph::ProfileData::Item::operator+=((int64x2_t *)(v12 + 24), v11);
      result = std::__hash_table<std::__hash_value_type<AG::data::ptr<AG::Node>,AG::Graph::ProfileData::Item>,std::__unordered_map_hasher<AG::data::ptr<AG::Node>,std::__hash_value_type<AG::data::ptr<AG::Node>,AG::Graph::ProfileData::Item>,std::hash<AG::data::ptr<AG::Node>>,std::equal_to<AG::data::ptr<AG::Node>>,true>,std::__unordered_map_equal<AG::data::ptr<AG::Node>,std::__hash_value_type<AG::data::ptr<AG::Node>,AG::Graph::ProfileData::Item>,std::equal_to<AG::data::ptr<AG::Node>>,std::hash<AG::data::ptr<AG::Node>>,true>,std::allocator<std::__hash_value_type<AG::data::ptr<AG::Node>,AG::Graph::ProfileData::Item>>>::erase(i + 10, v10);
    }
  }
  return result;
}

void AG::Graph::start_profiling(AG::Graph *this, char a2)
{
  int v3;
  void *v4;
  void *v5;
  CFRunLoopRef Main;
  __CFRunLoop *v7;
  __CFRunLoopObserver *v8;
  uint64_t v9;
  unint64_t v10;

  v3 = a2 & 1;
  *((_BYTE *)this + 296) = a2 & 1;
  if ((a2 & 2) != 0)
  {
    if (NSClassFromString(CFSTR("UIApplication")))
    {
      objc_msgSend(MEMORY[0x1E0CB37D0], "defaultCenter");
      v4 = (void *)objc_claimAutoreleasedReturnValue();
      objc_opt_class();
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v4, "addObserver:selector:name:object:", v5, sel_background_, CFSTR("UIApplicationDidEnterBackgroundNotification"), 0);
      objc_msgSend(v4, "addObserver:selector:name:object:", v5, sel_foreground_, CFSTR("UIApplicationWillEnterForegroundNotification"), 0);

    }
    Main = CFRunLoopGetMain();
    if (Main)
    {
      v7 = Main;
      v8 = CFRunLoopObserverCreate(0, 0xA0uLL, 1u, 2500000, (CFRunLoopObserverCallBack)AG::Graph::start_profiling::$_0::__invoke<__CFRunLoopObserver *,unsigned long,void *>, 0);
      if (v8)
        CFRunLoopAddObserver(v7, v8, (CFRunLoopMode)*MEMORY[0x1E0C9B270]);
    }
    v3 = *((unsigned __int8 *)this + 296);
  }
  if (v3)
  {
    if (!*((_QWORD *)this + 39))
    {
      v9 = operator new();
      *(_QWORD *)v9 = &off_1E5A60510;
      v10 = AGMakeUniqueID();
      *(_QWORD *)v9 = &off_1E5A601F0;
      *(_QWORD *)(v9 + 8) = v10;
      *(_OWORD *)(v9 + 16) = 0u;
      *(_OWORD *)(v9 + 32) = 0u;
      *(_DWORD *)(v9 + 48) = 1065353216;
      *((_QWORD *)this + 39) = v9;
      AG::Graph::add_trace(this, (AG::Trace *)v9);
    }
  }
}

void sub_1AB944D74(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF431538](v1, 0x10A1C404A7C5E8ELL);
  _Unwind_Resume(a1);
}

_DWORD *AG::Graph::stop_profiling(_DWORD *this)
{
  _DWORD *v1;
  uint64_t v2;

  v1 = this;
  v2 = *((_QWORD *)this + 39);
  if (v2)
  {
    this = AG::Graph::remove_trace(this, *(_QWORD *)(v2 + 8));
    *((_QWORD *)v1 + 39) = 0;
  }
  *((_BYTE *)v1 + 296) = 0;
  return this;
}

void AG::Graph::reset_profile(AG::Graph *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 38);
  *((_QWORD *)this + 38) = 0;
  if (v1)
    std::default_delete<AG::Graph::ProfileData>::operator()[abi:ne180100]((uint64_t)this + 304, v1);
}

void AG::Graph::mark_profile(AG::Graph *this, uint64_t a2, uint64_t a3)
{
  int v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;

  v6 = *((_DWORD *)this + 58);
  if (v6)
  {
    v10 = v6 - 1;
    do
    {
      v11 = v10;
      v12 = *(_QWORD *)(*((_QWORD *)this + 28) + 8 * v10);
      (*(void (**)(uint64_t, AG::Graph *, uint64_t))(*(_QWORD *)v12 + 328))(v12, this, a2);
      --v10;
    }
    while (v11);
  }
  v7 = *((_QWORD *)this + 38);
  if (v7 && *(_BYTE *)(v7 + 184))
  {
    if (!a3)
    {
      a3 = mach_absolute_time();
      v7 = *((_QWORD *)this + 38);
    }
    AG::Graph::ProfileData::Category::mark((AG::Graph::ProfileData::Category *)(v7 + 8), a2, a3);
    v8 = *((_QWORD *)this + 38);
    v9 = *(_QWORD **)(v8 + 160);
    if (v9)
    {
      do
      {
        AG::Graph::ProfileData::Category::mark((AG::Graph::ProfileData::Category *)(v9 + 3), a2, a3);
        v9 = (_QWORD *)*v9;
      }
      while (v9);
      v8 = *((_QWORD *)this + 38);
    }
    *(_BYTE *)(v8 + 184) = 0;
  }
}

void AG::Graph::all_start_profiling(AG::Graph *this)
{
  char v1;
  AG::Graph *i;

  v1 = (char)this;
  os_unfair_lock_lock((os_unfair_lock_t)&AG::Graph::_all_graphs_lock);
  for (i = (AG::Graph *)&AG::Graph::_all_graphs; ; AG::Graph::start_profiling(i, v1))
  {
    i = *(AG::Graph **)i;
    if (!i)
      break;
  }
  os_unfair_lock_unlock((os_unfair_lock_t)&AG::Graph::_all_graphs_lock);
}

void sub_1AB944F18(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock((os_unfair_lock_t)&AG::Graph::_all_graphs_lock);
  _Unwind_Resume(a1);
}

void AG::Graph::all_stop_profiling(AG::Graph *this)
{
  uint64_t i;
  uint64_t v2;

  os_unfair_lock_lock((os_unfair_lock_t)&AG::Graph::_all_graphs_lock);
  for (i = AG::Graph::_all_graphs; i; i = *(_QWORD *)i)
  {
    v2 = *(_QWORD *)(i + 312);
    if (v2)
    {
      AG::Graph::remove_trace((_DWORD *)i, *(_QWORD *)(v2 + 8));
      *(_QWORD *)(i + 312) = 0;
    }
    *(_BYTE *)(i + 296) = 0;
  }
  os_unfair_lock_unlock((os_unfair_lock_t)&AG::Graph::_all_graphs_lock);
}

void sub_1AB944F90(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock((os_unfair_lock_t)&AG::Graph::_all_graphs_lock);
  _Unwind_Resume(a1);
}

void AG::Graph::all_reset_profile(AG::Graph *this)
{
  _QWORD *v1;
  uint64_t v2;

  os_unfair_lock_lock((os_unfair_lock_t)&AG::Graph::_all_graphs_lock);
  v1 = (_QWORD *)AG::Graph::_all_graphs;
  if (AG::Graph::_all_graphs)
  {
    do
    {
      v2 = v1[38];
      v1[38] = 0;
      if (v2)
        std::default_delete<AG::Graph::ProfileData>::operator()[abi:ne180100]((uint64_t)(v1 + 38), v2);
      v1 = (_QWORD *)*v1;
    }
    while (v1);
  }
  os_unfair_lock_unlock((os_unfair_lock_t)&AG::Graph::_all_graphs_lock);
}

void AG::Graph::all_mark_profile(AG::Graph *this, const char *a2)
{
  uint64_t v3;
  AG::Graph *i;
  uint64_t *v5;

  v3 = mach_absolute_time();
  os_unfair_lock_lock((os_unfair_lock_t)&AG::Graph::_all_graphs_lock);
  for (i = (AG::Graph *)&AG::Graph::_all_graphs; ; AG::Graph::mark_profile(i, (uint64_t)v5, v3))
  {
    i = *(AG::Graph **)i;
    if (!i)
      break;
    v5 = AG::Graph::intern_key(i, (char *)this);
  }
  os_unfair_lock_unlock((os_unfair_lock_t)&AG::Graph::_all_graphs_lock);
}

void sub_1AB945070(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock((os_unfair_lock_t)&AG::Graph::_all_graphs_lock);
  _Unwind_Resume(a1);
}

uint64_t AG::Graph::begin_profile_event(AG::Graph *this, unsigned int a2, char *a3)
{
  int v4;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;

  v4 = *((_DWORD *)this + 58);
  if (v4)
  {
    v7 = a2;
    v8 = v4 - 1;
    do
    {
      v9 = v8;
      v10 = *(_QWORD *)(*((_QWORD *)this + 28) + 8 * v8);
      v11 = AG::Graph::intern_key(this, a3);
      (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)v10 + 144))(v10, v7, v11);
      --v8;
    }
    while (v9);
  }
  if (*((_BYTE *)this + 296))
    return mach_absolute_time();
  else
    return 0;
}

void *AG::Graph::end_profile_event(uint64_t a1, unsigned int a2, char *a3, uint64_t a4, int a5)
{
  void *result;
  void *v10;
  uint64_t *v11;
  AG::Graph::ProfileData *v12;
  const AG::Graph *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  int v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  unsigned int *v24;

  result = AG::Graph::intern_key((AG::Graph *)a1, a3);
  v10 = result;
  if (*(_BYTE *)(a1 + 296))
  {
    v11 = (uint64_t *)(a1 + 304);
    if (!*(_QWORD *)(a1 + 304))
    {
      v12 = (AG::Graph::ProfileData *)operator new();
      AG::Graph::ProfileData::ProfileData(v12, v13);
      v14 = *v11;
      *v11 = (uint64_t)v12;
      if (v14)
        std::default_delete<AG::Graph::ProfileData>::operator()[abi:ne180100](a1 + 304, v14);
    }
    v15 = mach_absolute_time();
    v16 = *v11;
    v23 = v10;
    if (v15 - a4 >= *(_QWORD *)v16)
      v17 = v15 - a4 - *(_QWORD *)v16;
    else
      v17 = 0;
    v24 = &v23;
    v18 = std::__hash_table<std::__hash_value_type<unsigned int,AG::Graph::ProfileData::Category>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,AG::Graph::ProfileData::Category>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,AG::Graph::ProfileData::Category>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,AG::Graph::ProfileData::Category>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(v16 + 144, &v23, (uint64_t)&std::piecewise_construct, &v24);
    result = AG::Graph::ProfileData::Category::add_update(v18 + 3, a2, v17, a5);
    *(_BYTE *)(v16 + 184) = 1;
  }
  v19 = *(_DWORD *)(a1 + 232);
  if (v19)
  {
    v20 = v19 - 1;
    do
    {
      v21 = v20;
      v22 = *(_QWORD *)(*(_QWORD *)(a1 + 224) + 8 * v20);
      result = (void *)(*(uint64_t (**)(uint64_t, _QWORD, void *))(*(_QWORD *)v22 + 152))(v22, a2, v10);
      --v20;
    }
    while (v21);
  }
  return result;
}

void sub_1AB94525C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF431538](v1, 0x10A0C40A5AAE56ELL);
  _Unwind_Resume(a1);
}

void AG::Graph::ProfileTrace::~ProfileTrace(AG::Graph::ProfileTrace *this)
{
  *(_QWORD *)this = &off_1E5A601F0;
  std::__hash_table<std::__hash_value_type<unsigned long,AG::Graph::ProfileTrace::UpdateData>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,AG::Graph::ProfileTrace::UpdateData>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,AG::Graph::ProfileTrace::UpdateData>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,AG::Graph::ProfileTrace::UpdateData>>>::~__hash_table((uint64_t)this + 16);
}

{
  *(_QWORD *)this = &off_1E5A601F0;
  std::__hash_table<std::__hash_value_type<unsigned long,AG::Graph::ProfileTrace::UpdateData>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,AG::Graph::ProfileTrace::UpdateData>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,AG::Graph::ProfileTrace::UpdateData>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,AG::Graph::ProfileTrace::UpdateData>>>::~__hash_table((uint64_t)this + 16);
  JUMPOUT(0x1AF431538);
}

uint64_t std::__hash_table<std::__hash_value_type<unsigned int,AG::Graph::ProfileData::Item>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,AG::Graph::ProfileData::Item>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,AG::Graph::ProfileData::Item>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,AG::Graph::ProfileData::Item>>>::~__hash_table(uint64_t a1)
{
  void *v2;

  std::__hash_table<std::__hash_value_type<unsigned int,AG::Graph::ProfileData::Item>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,AG::Graph::ProfileData::Item>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,AG::Graph::ProfileData::Item>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,AG::Graph::ProfileData::Item>>>::__deallocate_node(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void std::__hash_table<std::__hash_value_type<unsigned int,AG::Graph::ProfileData::Item>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,AG::Graph::ProfileData::Item>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,AG::Graph::ProfileData::Item>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,AG::Graph::ProfileData::Item>>>::__deallocate_node(int a1, _QWORD *__p)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  if (__p)
  {
    v2 = __p;
    do
    {
      v3 = (_QWORD *)*v2;
      v4 = (void *)v2[7];
      if (v4)
        free(v4);
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

uint64_t *std::__hash_table<std::__hash_value_type<AG::data::ptr<AG::Node>,AG::Graph::ProfileData::Item>,std::__unordered_map_hasher<AG::data::ptr<AG::Node>,std::__hash_value_type<AG::data::ptr<AG::Node>,AG::Graph::ProfileData::Item>,std::hash<AG::data::ptr<AG::Node>>,std::equal_to<AG::data::ptr<AG::Node>>,true>,std::__unordered_map_equal<AG::data::ptr<AG::Node>,std::__hash_value_type<AG::data::ptr<AG::Node>,AG::Graph::ProfileData::Item>,std::equal_to<AG::data::ptr<AG::Node>>,std::hash<AG::data::ptr<AG::Node>>,true>,std::allocator<std::__hash_value_type<AG::data::ptr<AG::Node>,AG::Graph::ProfileData::Item>>>::find<AG::data::ptr<AG::Node>>(_QWORD *a1, unsigned int *a2)
{
  int8x8_t v2;
  unint64_t v3;
  uint8x8_t v4;
  unint64_t v5;
  uint64_t **v6;
  uint64_t *result;
  unint64_t v8;

  v2 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v2)
    return 0;
  v3 = *a2;
  v4 = (uint8x8_t)vcnt_s8(v2);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    v5 = *a2;
    if (*(_QWORD *)&v2 <= v3)
      v5 = v3 % *(_QWORD *)&v2;
  }
  else
  {
    v5 = (v2.i32[0] - 1) & v3;
  }
  v6 = *(uint64_t ***)(*a1 + 8 * v5);
  if (!v6)
    return 0;
  for (result = *v6; result; result = (uint64_t *)*result)
  {
    v8 = result[1];
    if (v8 == v3)
    {
      if (*((_DWORD *)result + 4) == (_DWORD)v3)
        return result;
    }
    else
    {
      if (v4.u32[0] > 1uLL)
      {
        if (v8 >= *(_QWORD *)&v2)
          v8 %= *(_QWORD *)&v2;
      }
      else
      {
        v8 &= *(_QWORD *)&v2 - 1;
      }
      if (v8 != v5)
        return 0;
    }
  }
  return result;
}

char *std::__hash_table<std::__hash_value_type<unsigned int,AG::Graph::ProfileData::Item>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,AG::Graph::ProfileData::Item>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,AG::Graph::ProfileData::Item>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,AG::Graph::ProfileData::Item>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(uint64_t a1, unsigned int *a2, uint64_t a3, _DWORD **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  void **v10;
  char *v11;
  unint64_t v12;
  _QWORD *v13;
  float v14;
  float v15;
  _BOOL8 v16;
  unint64_t v17;
  unint64_t v18;
  size_t v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t v22;

  v7 = *a2;
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v4 = *a2;
      if (v8 <= v7)
        v4 = v7 % v8;
    }
    else
    {
      v4 = ((_DWORD)v8 - 1) & v7;
    }
    v10 = *(void ***)(*(_QWORD *)a1 + 8 * v4);
    if (v10)
    {
      v11 = (char *)*v10;
      if (*v10)
      {
        do
        {
          v12 = *((_QWORD *)v11 + 1);
          if (v12 == v7)
          {
            if (*((_DWORD *)v11 + 4) == (_DWORD)v7)
              return v11;
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8)
                v12 %= v8;
            }
            else
            {
              v12 &= v8 - 1;
            }
            if (v12 != v4)
              break;
          }
          v11 = *(char **)v11;
        }
        while (v11);
      }
    }
  }
  v13 = (_QWORD *)(a1 + 16);
  v11 = (char *)operator new(0x50uLL);
  *(_QWORD *)v11 = 0;
  *((_QWORD *)v11 + 1) = v7;
  *((_DWORD *)v11 + 4) = **a4;
  *((_QWORD *)v11 + 9) = 0;
  *(_OWORD *)(v11 + 56) = 0u;
  *(_OWORD *)(v11 + 40) = 0u;
  *(_OWORD *)(v11 + 24) = 0u;
  v14 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v15 = *(float *)(a1 + 32);
  if (!v8 || (float)(v15 * (float)v8) < v14)
  {
    v16 = 1;
    if (v8 >= 3)
      v16 = (v8 & (v8 - 1)) != 0;
    v17 = v16 | (2 * v8);
    v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18)
      v19 = v18;
    else
      v19 = v17;
    std::__hash_table<std::__hash_value_type<unsigned int,AG::Graph::ProfileData::Item>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,AG::Graph::ProfileData::Item>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,AG::Graph::ProfileData::Item>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,AG::Graph::ProfileData::Item>>>::__rehash<true>(a1, v19);
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v8 <= v7)
        v4 = v7 % v8;
      else
        v4 = v7;
    }
    else
    {
      v4 = ((_DWORD)v8 - 1) & v7;
    }
  }
  v20 = *(_QWORD *)a1;
  v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v21)
  {
    *(_QWORD *)v11 = *v21;
LABEL_38:
    *v21 = v11;
    goto LABEL_39;
  }
  *(_QWORD *)v11 = *v13;
  *v13 = v11;
  *(_QWORD *)(v20 + 8 * v4) = v13;
  if (*(_QWORD *)v11)
  {
    v22 = *(_QWORD *)(*(_QWORD *)v11 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v22 >= v8)
        v22 %= v8;
    }
    else
    {
      v22 &= v8 - 1;
    }
    v21 = (_QWORD *)(*(_QWORD *)a1 + 8 * v22);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return v11;
}

void sub_1AB945678(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  _QWORD *v10;
  uint64_t v11;

  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned int,AG::Graph::ProfileData::Item>,void *>>>::operator()[abi:ne180100](v11, v10);
  _Unwind_Resume(a1);
}

void std::__throw_bad_array_new_length[abi:ne180100]()
{
  std::bad_array_new_length *exception;
  std::bad_array_new_length *v1;

  exception = (std::bad_array_new_length *)__cxa_allocate_exception(8uLL);
  v1 = std::bad_array_new_length::bad_array_new_length(exception);
}

void std::__hash_table<std::__hash_value_type<unsigned int,AG::Graph::ProfileData::Item>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,AG::Graph::ProfileData::Item>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,AG::Graph::ProfileData::Item>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,AG::Graph::ProfileData::Item>>>::__rehash<true>(uint64_t a1, size_t __n)
{
  size_t prime;
  int8x8_t v4;
  unint64_t v5;
  uint8x8_t v6;
  uint64_t v7;

  if (__n == 1)
  {
    prime = 2;
  }
  else
  {
    prime = __n;
    if ((__n & (__n - 1)) != 0)
      prime = std::__next_prime(__n);
  }
  v4 = *(int8x8_t *)(a1 + 8);
  if (prime > *(_QWORD *)&v4)
    goto LABEL_16;
  if (prime < *(_QWORD *)&v4)
  {
    v5 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(_QWORD *)&v4 < 3uLL || (v6 = (uint8x8_t)vcnt_s8(v4), v6.i16[0] = vaddlv_u8(v6), v6.u32[0] > 1uLL))
    {
      v5 = std::__next_prime(v5);
    }
    else
    {
      v7 = 1 << -(char)__clz(v5 - 1);
      if (v5 >= 2)
        v5 = v7;
    }
    if (prime <= v5)
      prime = v5;
    if (prime < *(_QWORD *)&v4)
LABEL_16:
      std::__hash_table<std::__hash_value_type<unsigned int,AG::Graph::ProfileData::Item>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,AG::Graph::ProfileData::Item>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,AG::Graph::ProfileData::Item>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,AG::Graph::ProfileData::Item>>>::__do_rehash<true>(a1, prime);
  }
}

void std::__hash_table<std::__hash_value_type<unsigned int,AG::Graph::ProfileData::Item>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,AG::Graph::ProfileData::Item>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,AG::Graph::ProfileData::Item>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,AG::Graph::ProfileData::Item>>>::__do_rehash<true>(uint64_t a1, unint64_t a2)
{
  void *v4;
  void *v5;
  uint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  uint8x8_t v9;
  void *v10;
  _QWORD *v11;
  unint64_t v12;

  if (a2)
  {
    if (a2 >> 61)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v4 = operator new(8 * a2);
    v5 = *(void **)a1;
    *(_QWORD *)a1 = v4;
    if (v5)
      operator delete(v5);
    v6 = 0;
    *(_QWORD *)(a1 + 8) = a2;
    do
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v6++) = 0;
    while (a2 != v6);
    v7 = *(_QWORD **)(a1 + 16);
    if (v7)
    {
      v8 = v7[1];
      v9 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
      v9.i16[0] = vaddlv_u8(v9);
      if (v9.u32[0] > 1uLL)
      {
        if (v8 >= a2)
          v8 %= a2;
      }
      else
      {
        v8 &= a2 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v8) = a1 + 16;
      v11 = (_QWORD *)*v7;
      if (*v7)
      {
        do
        {
          v12 = v11[1];
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= a2)
              v12 %= a2;
          }
          else
          {
            v12 &= a2 - 1;
          }
          if (v12 != v8)
          {
            if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v12))
            {
              *(_QWORD *)(*(_QWORD *)a1 + 8 * v12) = v7;
              goto LABEL_24;
            }
            *v7 = *v11;
            *v11 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v12);
            **(_QWORD **)(*(_QWORD *)a1 + 8 * v12) = v11;
            v11 = v7;
          }
          v12 = v8;
LABEL_24:
          v7 = v11;
          v11 = (_QWORD *)*v11;
          v8 = v12;
        }
        while (v11);
      }
    }
  }
  else
  {
    v10 = *(void **)a1;
    *(_QWORD *)a1 = 0;
    if (v10)
      operator delete(v10);
    *(_QWORD *)(a1 + 8) = 0;
  }
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned int,AG::Graph::ProfileData::Item>,void *>>>::operator()[abi:ne180100](uint64_t a1, _QWORD *__p)
{
  void *v3;

  if (*(_BYTE *)(a1 + 8))
  {
    v3 = (void *)__p[7];
    if (v3)
      free(v3);
  }
  else if (!__p)
  {
    return;
  }
  operator delete(__p);
}

uint64_t std::__hash_table<std::__hash_value_type<AG::data::ptr<AG::Node>,AG::Graph::ProfileData::Item>,std::__unordered_map_hasher<AG::data::ptr<AG::Node>,std::__hash_value_type<AG::data::ptr<AG::Node>,AG::Graph::ProfileData::Item>,std::hash<AG::data::ptr<AG::Node>>,std::equal_to<AG::data::ptr<AG::Node>>,true>,std::__unordered_map_equal<AG::data::ptr<AG::Node>,std::__hash_value_type<AG::data::ptr<AG::Node>,AG::Graph::ProfileData::Item>,std::equal_to<AG::data::ptr<AG::Node>>,std::hash<AG::data::ptr<AG::Node>>,true>,std::allocator<std::__hash_value_type<AG::data::ptr<AG::Node>,AG::Graph::ProfileData::Item>>>::erase(_QWORD *a1, uint64_t *a2)
{
  uint64_t v2;
  _QWORD *v3;
  void *__p;
  uint64_t v6;

  v2 = *a2;
  std::__hash_table<std::__hash_value_type<AG::data::ptr<AG::Node>,AG::Graph::ProfileData::Item>,std::__unordered_map_hasher<AG::data::ptr<AG::Node>,std::__hash_value_type<AG::data::ptr<AG::Node>,AG::Graph::ProfileData::Item>,std::hash<AG::data::ptr<AG::Node>>,std::equal_to<AG::data::ptr<AG::Node>>,true>,std::__unordered_map_equal<AG::data::ptr<AG::Node>,std::__hash_value_type<AG::data::ptr<AG::Node>,AG::Graph::ProfileData::Item>,std::equal_to<AG::data::ptr<AG::Node>>,std::hash<AG::data::ptr<AG::Node>>,true>,std::allocator<std::__hash_value_type<AG::data::ptr<AG::Node>,AG::Graph::ProfileData::Item>>>::remove(a1, a2, (uint64_t)&__p);
  v3 = __p;
  __p = 0;
  if (v3)
    std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned int,AG::Graph::ProfileData::Item>,void *>>>::operator()[abi:ne180100]((uint64_t)&v6, v3);
  return v2;
}

_QWORD *std::__hash_table<std::__hash_value_type<AG::data::ptr<AG::Node>,AG::Graph::ProfileData::Item>,std::__unordered_map_hasher<AG::data::ptr<AG::Node>,std::__hash_value_type<AG::data::ptr<AG::Node>,AG::Graph::ProfileData::Item>,std::hash<AG::data::ptr<AG::Node>>,std::equal_to<AG::data::ptr<AG::Node>>,true>,std::__unordered_map_equal<AG::data::ptr<AG::Node>,std::__hash_value_type<AG::data::ptr<AG::Node>,AG::Graph::ProfileData::Item>,std::equal_to<AG::data::ptr<AG::Node>>,std::hash<AG::data::ptr<AG::Node>>,true>,std::allocator<std::__hash_value_type<AG::data::ptr<AG::Node>,AG::Graph::ProfileData::Item>>>::remove@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  int8x8_t v3;
  unint64_t v4;
  uint8x8_t v5;
  _QWORD *v6;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;

  v3 = (int8x8_t)result[1];
  v4 = a2[1];
  v5 = (uint8x8_t)vcnt_s8(v3);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    if (v4 >= *(_QWORD *)&v3)
      v4 %= *(_QWORD *)&v3;
  }
  else
  {
    v4 &= *(_QWORD *)&v3 - 1;
  }
  v6 = *(_QWORD **)(*result + 8 * v4);
  do
  {
    v7 = v6;
    v6 = (_QWORD *)*v6;
  }
  while (v6 != a2);
  if (v7 == result + 2)
    goto LABEL_18;
  v8 = v7[1];
  if (v5.u32[0] > 1uLL)
  {
    if (v8 >= *(_QWORD *)&v3)
      v8 %= *(_QWORD *)&v3;
  }
  else
  {
    v8 &= *(_QWORD *)&v3 - 1;
  }
  if (v8 != v4)
  {
LABEL_18:
    if (!*a2)
      goto LABEL_19;
    v9 = *(_QWORD *)(*a2 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v9 >= *(_QWORD *)&v3)
        v9 %= *(_QWORD *)&v3;
    }
    else
    {
      v9 &= *(_QWORD *)&v3 - 1;
    }
    if (v9 != v4)
LABEL_19:
      *(_QWORD *)(*result + 8 * v4) = 0;
  }
  v10 = *a2;
  if (*a2)
  {
    v11 = *(_QWORD *)(v10 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v11 >= *(_QWORD *)&v3)
        v11 %= *(_QWORD *)&v3;
    }
    else
    {
      v11 &= *(_QWORD *)&v3 - 1;
    }
    if (v11 != v4)
    {
      *(_QWORD *)(*result + 8 * v11) = v7;
      v10 = *a2;
    }
  }
  *v7 = v10;
  *a2 = 0;
  --result[3];
  *(_QWORD *)a3 = a2;
  *(_QWORD *)(a3 + 8) = result + 2;
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void AG::Graph::start_profiling(unsigned int)::$_0::__invoke<__CFRunLoopObserver *,unsigned long,void *>(uint64_t a1, const char *a2)
{
  AG::Graph::all_mark_profile((AG::Graph *)"app/runloop", a2);
}

uint64_t *std::__hash_table<std::__hash_value_type<unsigned int,AG::Graph::ProfileData::Category>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,AG::Graph::ProfileData::Category>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,AG::Graph::ProfileData::Category>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,AG::Graph::ProfileData::Category>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(uint64_t a1, unsigned int *a2, uint64_t a3, _DWORD **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  uint64_t **v10;
  uint64_t *i;
  unint64_t v12;
  uint64_t v13;
  char *v14;
  float v15;
  float v16;
  _BOOL8 v17;
  unint64_t v18;
  unint64_t v19;
  size_t v20;
  _QWORD *v21;
  unint64_t v22;
  _QWORD v24[2];
  char v25;

  v7 = *a2;
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v4 = *a2;
      if (v8 <= v7)
        v4 = v7 % v8;
    }
    else
    {
      v4 = ((_DWORD)v8 - 1) & v7;
    }
    v10 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v4);
    if (v10)
    {
      for (i = *v10; i; i = (uint64_t *)*i)
      {
        v12 = i[1];
        if (v12 == v7)
        {
          if (*((_DWORD *)i + 4) == (_DWORD)v7)
            return i;
        }
        else
        {
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= v8)
              v12 %= v8;
          }
          else
          {
            v12 &= v8 - 1;
          }
          if (v12 != v4)
            break;
        }
      }
    }
  }
  v13 = a1 + 16;
  v14 = (char *)operator new(0xA0uLL);
  v24[0] = v14;
  v24[1] = a1 + 16;
  *(_QWORD *)v14 = 0;
  *((_QWORD *)v14 + 1) = v7;
  *((_DWORD *)v14 + 4) = **a4;
  *(_OWORD *)(v14 + 104) = 0u;
  *((_QWORD *)v14 + 19) = 0;
  *(_OWORD *)(v14 + 136) = 0u;
  *(_OWORD *)(v14 + 120) = 0u;
  *(_OWORD *)(v14 + 88) = 0u;
  *(_OWORD *)(v14 + 72) = 0u;
  *(_OWORD *)(v14 + 56) = 0u;
  *(_OWORD *)(v14 + 40) = 0u;
  *(_OWORD *)(v14 + 24) = 0u;
  *((_DWORD *)v14 + 28) = 1065353216;
  *((_DWORD *)v14 + 38) = 1065353216;
  v25 = 1;
  v15 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v16 = *(float *)(a1 + 32);
  if (!v8 || (float)(v16 * (float)v8) < v15)
  {
    v17 = 1;
    if (v8 >= 3)
      v17 = (v8 & (v8 - 1)) != 0;
    v18 = v17 | (2 * v8);
    v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19)
      v20 = v19;
    else
      v20 = v18;
    std::__hash_table<std::__hash_value_type<unsigned int,AG::Graph::ProfileData::Item>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,AG::Graph::ProfileData::Item>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,AG::Graph::ProfileData::Item>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,AG::Graph::ProfileData::Item>>>::__rehash<true>(a1, v20);
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v8 <= v7)
        v4 = v7 % v8;
      else
        v4 = v7;
    }
    else
    {
      v4 = ((_DWORD)v8 - 1) & v7;
    }
  }
  v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v21)
  {
    *(_QWORD *)v24[0] = *v21;
    *v21 = v24[0];
  }
  else
  {
    *(_QWORD *)v24[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v24[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = v13;
    if (*(_QWORD *)v24[0])
    {
      v22 = *(_QWORD *)(*(_QWORD *)v24[0] + 8);
      if ((v8 & (v8 - 1)) != 0)
      {
        if (v22 >= v8)
          v22 %= v8;
      }
      else
      {
        v22 &= v8 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v22) = v24[0];
    }
  }
  i = (uint64_t *)v24[0];
  v24[0] = 0;
  ++*(_QWORD *)(a1 + 24);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned int,AG::Graph::ProfileData::Category>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned int,AG::Graph::ProfileData::Category>,void *>>>>::reset[abi:ne180100]((uint64_t)v24, 0);
  return i;
}

void sub_1AB945D38(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned int,AG::Graph::ProfileData::Category>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned int,AG::Graph::ProfileData::Category>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned int,AG::Graph::ProfileData::Category>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned int,AG::Graph::ProfileData::Category>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<unsigned int const,AG::Graph::ProfileData::Category>,0>((uint64_t)v2 + 16);
    operator delete(v2);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<unsigned int const,AG::Graph::ProfileData::Category>,0>(uint64_t a1)
{
  void *v2;

  std::__hash_table<std::__hash_value_type<unsigned int,AG::Graph::ProfileData::Item>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,AG::Graph::ProfileData::Item>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,AG::Graph::ProfileData::Item>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,AG::Graph::ProfileData::Item>>>::~__hash_table(a1 + 104);
  std::__hash_table<std::__hash_value_type<unsigned int,AG::Graph::ProfileData::Item>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,AG::Graph::ProfileData::Item>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,AG::Graph::ProfileData::Item>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,AG::Graph::ProfileData::Item>>>::~__hash_table(a1 + 64);
  v2 = *(void **)(a1 + 40);
  if (v2)
    free(v2);
}

uint64_t std::__hash_table<std::__hash_value_type<unsigned long,AG::Graph::ProfileTrace::UpdateData>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,AG::Graph::ProfileTrace::UpdateData>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,AG::Graph::ProfileTrace::UpdateData>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,AG::Graph::ProfileTrace::UpdateData>>>::~__hash_table(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  v2 = *(_QWORD **)(a1 + 16);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v4)
    operator delete(v4);
  return a1;
}

_QWORD *std::__hash_table<std::__hash_value_type<unsigned long,AG::Graph::ProfileTrace::UpdateData>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,AG::Graph::ProfileTrace::UpdateData>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,AG::Graph::ProfileTrace::UpdateData>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,AG::Graph::ProfileTrace::UpdateData>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  _QWORD **v10;
  _QWORD *i;
  unint64_t v12;
  uint64_t v13;
  float v14;
  float v15;
  _BOOL8 v16;
  unint64_t v17;
  unint64_t v18;
  size_t v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t v22;

  v7 = *a2;
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v4 = *a2;
      if (v7 >= v8)
        v4 = v7 % v8;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
    v10 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v4);
    if (v10)
    {
      for (i = *v10; i; i = (_QWORD *)*i)
      {
        v12 = i[1];
        if (v12 == v7)
        {
          if (i[2] == v7)
            return i;
        }
        else
        {
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= v8)
              v12 %= v8;
          }
          else
          {
            v12 &= v8 - 1;
          }
          if (v12 != v4)
            break;
        }
      }
    }
  }
  i = operator new(0x30uLL);
  *i = 0;
  i[1] = v7;
  v13 = **a4;
  i[4] = 0;
  i[5] = 0;
  i[2] = v13;
  i[3] = 0;
  v14 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v15 = *(float *)(a1 + 32);
  if (!v8 || (float)(v15 * (float)v8) < v14)
  {
    v16 = 1;
    if (v8 >= 3)
      v16 = (v8 & (v8 - 1)) != 0;
    v17 = v16 | (2 * v8);
    v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18)
      v19 = v18;
    else
      v19 = v17;
    std::__hash_table<std::__hash_value_type<unsigned int,AG::Graph::ProfileData::Item>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,AG::Graph::ProfileData::Item>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,AG::Graph::ProfileData::Item>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,AG::Graph::ProfileData::Item>>>::__rehash<true>(a1, v19);
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8)
        v4 = v7 % v8;
      else
        v4 = v7;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
  }
  v20 = *(_QWORD *)a1;
  v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v21)
  {
    *i = *v21;
LABEL_38:
    *v21 = i;
    goto LABEL_39;
  }
  *i = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = i;
  *(_QWORD *)(v20 + 8 * v4) = a1 + 16;
  if (*i)
  {
    v22 = *(_QWORD *)(*i + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v22 >= v8)
        v22 %= v8;
    }
    else
    {
      v22 &= v8 - 1;
    }
    v21 = (_QWORD *)(*(_QWORD *)a1 + 8 * v22);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return i;
}

void sub_1AB946028(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<std::__hash_value_type<unsigned long,AG::Graph::ProfileTrace::UpdateData>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,AG::Graph::ProfileTrace::UpdateData>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,AG::Graph::ProfileTrace::UpdateData>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,AG::Graph::ProfileTrace::UpdateData>>>::find<unsigned long>(_QWORD *a1, unint64_t *a2)
{
  int8x8_t v2;
  unint64_t v3;
  uint8x8_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *result;
  unint64_t v8;

  v2 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v2)
    return 0;
  v3 = *a2;
  v4 = (uint8x8_t)vcnt_s8(v2);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    v5 = *a2;
    if (v3 >= *(_QWORD *)&v2)
      v5 = v3 % *(_QWORD *)&v2;
  }
  else
  {
    v5 = (*(_QWORD *)&v2 - 1) & v3;
  }
  v6 = *(_QWORD **)(*a1 + 8 * v5);
  if (!v6)
    return 0;
  result = (_QWORD *)*v6;
  if (*v6)
  {
    do
    {
      v8 = result[1];
      if (v8 == v3)
      {
        if (result[2] == v3)
          return result;
      }
      else
      {
        if (v4.u32[0] > 1uLL)
        {
          if (v8 >= *(_QWORD *)&v2)
            v8 %= *(_QWORD *)&v2;
        }
        else
        {
          v8 &= *(_QWORD *)&v2 - 1;
        }
        if (v8 != v5)
          return 0;
      }
      result = (_QWORD *)*result;
    }
    while (result);
  }
  return result;
}

uint64_t std::__hash_table<std::__hash_value_type<unsigned long,AG::Graph::ProfileTrace::UpdateData>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,AG::Graph::ProfileTrace::UpdateData>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,AG::Graph::ProfileTrace::UpdateData>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,AG::Graph::ProfileTrace::UpdateData>>>::erase(_QWORD *a1, uint64_t *a2)
{
  uint64_t v2;
  void *v3;
  void *__p;

  v2 = *a2;
  std::__hash_table<std::__hash_value_type<AG::data::ptr<AG::Node>,AG::Graph::ProfileData::Item>,std::__unordered_map_hasher<AG::data::ptr<AG::Node>,std::__hash_value_type<AG::data::ptr<AG::Node>,AG::Graph::ProfileData::Item>,std::hash<AG::data::ptr<AG::Node>>,std::equal_to<AG::data::ptr<AG::Node>>,true>,std::__unordered_map_equal<AG::data::ptr<AG::Node>,std::__hash_value_type<AG::data::ptr<AG::Node>,AG::Graph::ProfileData::Item>,std::equal_to<AG::data::ptr<AG::Node>>,std::hash<AG::data::ptr<AG::Node>>,true>,std::allocator<std::__hash_value_type<AG::data::ptr<AG::Node>,AG::Graph::ProfileData::Item>>>::remove(a1, a2, (uint64_t)&__p);
  v3 = __p;
  __p = 0;
  if (v3)
    operator delete(v3);
  return v2;
}

void *AG::vector<AG::Graph::ProfileData::Mark,0ul,unsigned long>::reserve_slow(uint64_t a1, unint64_t a2)
{
  uint64_t v3;
  void *result;

  if (*(_QWORD *)(a1 + 16) + (*(_QWORD *)(a1 + 16) >> 1) <= a2)
    v3 = a2;
  else
    v3 = *(_QWORD *)(a1 + 16) + (*(_QWORD *)(a1 + 16) >> 1);
  result = AG::details::realloc_vector<unsigned long,48ul>(*(void **)a1, (unint64_t *)(a1 + 16), v3);
  *(_QWORD *)a1 = result;
  return result;
}

void *AG::details::realloc_vector<unsigned long,48ul>(void *a1, unint64_t *a2, uint64_t a3)
{
  void *v4;
  size_t v5;
  unint64_t v6;
  void *v7;
  const char *v8;

  v4 = a1;
  if (a3)
  {
    v5 = malloc_good_size(48 * a3);
    v6 = v5 / 0x30;
    if (v5 / 0x30 != *a2)
    {
      v7 = malloc_type_realloc(v4, v5, 0xF3138078uLL);
      if (!v7)
        AG::precondition_failure((AG *)"allocation failure", v8);
      v4 = v7;
      *a2 = v6;
    }
  }
  else
  {
    *a2 = 0;
    free(a1);
    return 0;
  }
  return v4;
}

char *std::__hash_table<std::__hash_value_type<AG::data::ptr<AG::Node>,AG::Graph::ProfileData::Item>,std::__unordered_map_hasher<AG::data::ptr<AG::Node>,std::__hash_value_type<AG::data::ptr<AG::Node>,AG::Graph::ProfileData::Item>,std::hash<AG::data::ptr<AG::Node>>,std::equal_to<AG::data::ptr<AG::Node>>,true>,std::__unordered_map_equal<AG::data::ptr<AG::Node>,std::__hash_value_type<AG::data::ptr<AG::Node>,AG::Graph::ProfileData::Item>,std::equal_to<AG::data::ptr<AG::Node>>,std::hash<AG::data::ptr<AG::Node>>,true>,std::allocator<std::__hash_value_type<AG::data::ptr<AG::Node>,AG::Graph::ProfileData::Item>>>::__emplace_unique_key_args<AG::data::ptr<AG::Node>,std::piecewise_construct_t const&,std::tuple<AG::data::ptr<AG::Node> const&>,std::tuple<>>(uint64_t a1, unsigned int *a2, uint64_t a3, _DWORD **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  void **v10;
  char *v11;
  unint64_t v12;
  _QWORD *v13;
  float v14;
  float v15;
  _BOOL8 v16;
  unint64_t v17;
  unint64_t v18;
  size_t v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t v22;

  v7 = *a2;
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v4 = *a2;
      if (v8 <= v7)
        v4 = v7 % v8;
    }
    else
    {
      v4 = ((_DWORD)v8 - 1) & v7;
    }
    v10 = *(void ***)(*(_QWORD *)a1 + 8 * v4);
    if (v10)
    {
      v11 = (char *)*v10;
      if (*v10)
      {
        do
        {
          v12 = *((_QWORD *)v11 + 1);
          if (v12 == v7)
          {
            if (*((_DWORD *)v11 + 4) == (_DWORD)v7)
              return v11;
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8)
                v12 %= v8;
            }
            else
            {
              v12 &= v8 - 1;
            }
            if (v12 != v4)
              break;
          }
          v11 = *(char **)v11;
        }
        while (v11);
      }
    }
  }
  v13 = (_QWORD *)(a1 + 16);
  v11 = (char *)operator new(0x50uLL);
  *(_QWORD *)v11 = 0;
  *((_QWORD *)v11 + 1) = v7;
  *((_DWORD *)v11 + 4) = **a4;
  *((_QWORD *)v11 + 9) = 0;
  *(_OWORD *)(v11 + 56) = 0u;
  *(_OWORD *)(v11 + 40) = 0u;
  *(_OWORD *)(v11 + 24) = 0u;
  v14 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v15 = *(float *)(a1 + 32);
  if (!v8 || (float)(v15 * (float)v8) < v14)
  {
    v16 = 1;
    if (v8 >= 3)
      v16 = (v8 & (v8 - 1)) != 0;
    v17 = v16 | (2 * v8);
    v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18)
      v19 = v18;
    else
      v19 = v17;
    std::__hash_table<std::__hash_value_type<unsigned int,AG::Graph::ProfileData::Item>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,AG::Graph::ProfileData::Item>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,AG::Graph::ProfileData::Item>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,AG::Graph::ProfileData::Item>>>::__rehash<true>(a1, v19);
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v8 <= v7)
        v4 = v7 % v8;
      else
        v4 = v7;
    }
    else
    {
      v4 = ((_DWORD)v8 - 1) & v7;
    }
  }
  v20 = *(_QWORD *)a1;
  v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v21)
  {
    *(_QWORD *)v11 = *v21;
LABEL_38:
    *v21 = v11;
    goto LABEL_39;
  }
  *(_QWORD *)v11 = *v13;
  *v13 = v11;
  *(_QWORD *)(v20 + 8 * v4) = v13;
  if (*(_QWORD *)v11)
  {
    v22 = *(_QWORD *)(*(_QWORD *)v11 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v22 >= v8)
        v22 %= v8;
    }
    else
    {
      v22 &= v8 - 1;
    }
    v21 = (_QWORD *)(*(_QWORD *)a1 + 8 * v22);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return v11;
}

void sub_1AB94644C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  _QWORD *v10;
  uint64_t v11;

  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned int,AG::Graph::ProfileData::Item>,void *>>>::operator()[abi:ne180100](v11, v10);
  _Unwind_Resume(a1);
}

uint64_t std::__hash_table<std::__hash_value_type<unsigned int,AG::Graph::ProfileData::Category>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,AG::Graph::ProfileData::Category>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,AG::Graph::ProfileData::Category>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,AG::Graph::ProfileData::Category>>>::~__hash_table(uint64_t a1)
{
  void *v2;

  std::__hash_table<std::__hash_value_type<unsigned int,AG::Graph::ProfileData::Category>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,AG::Graph::ProfileData::Category>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,AG::Graph::ProfileData::Category>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,AG::Graph::ProfileData::Category>>>::__deallocate_node(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void std::__hash_table<std::__hash_value_type<unsigned int,AG::Graph::ProfileData::Category>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,AG::Graph::ProfileData::Category>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,AG::Graph::ProfileData::Category>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,AG::Graph::ProfileData::Category>>>::__deallocate_node(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = (_QWORD *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<unsigned int const,AG::Graph::ProfileData::Category>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

void std::default_delete<AG::Graph::ProfileData>::operator()[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v3;

  if (a2)
  {
    std::__hash_table<std::__hash_value_type<unsigned int,AG::Graph::ProfileData::Category>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,AG::Graph::ProfileData::Category>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,AG::Graph::ProfileData::Category>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,AG::Graph::ProfileData::Category>>>::~__hash_table(a2 + 144);
    std::__hash_table<std::__hash_value_type<unsigned int,AG::Graph::ProfileData::Item>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,AG::Graph::ProfileData::Item>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,AG::Graph::ProfileData::Item>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,AG::Graph::ProfileData::Item>>>::~__hash_table(a2 + 104);
    std::__hash_table<std::__hash_value_type<unsigned int,AG::Graph::ProfileData::Item>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,AG::Graph::ProfileData::Item>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,AG::Graph::ProfileData::Item>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,AG::Graph::ProfileData::Item>>>::~__hash_table(a2 + 64);
    v3 = *(void **)(a2 + 40);
    if (v3)
      free(v3);
    JUMPOUT(0x1AF431538);
  }
}

uint64_t AGReleaseClosure()
{
  return swift_release();
}

uint64_t AGTypeApplyFields(AG::swift::metadata *a1, uint64_t a2, uint64_t a3)
{
  _QWORD v4[3];

  v4[0] = &off_1E5A60690;
  v4[1] = a2;
  v4[2] = a3;
  return AG::swift::metadata::visit(a1, (AG::swift::metadata_visitor *)v4);
}

uint64_t AGTypeApplyEnumData(AG::swift::metadata *this, _QWORD *a2, void (*a3)(_QWORD, uint64_t, uint64_t))
{
  uint64_t v4;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  const char *v20;

  v4 = *((_QWORD *)this - 1);
  if ((*(_BYTE *)(v4 + 82) & 0x20) == 0)
  {
    v19 = AG::swift::metadata::name(this, 0);
    AG::precondition_failure((AG *)"not an enum type: %s", v20, v19);
  }
  v7 = (*(uint64_t (**)(_QWORD *, AG::swift::metadata *))(v4 + 88))(a2, this);
  result = (uint64_t)AG::swift::metadata::nominal_descriptor(this);
  if (result)
  {
    v9 = result + 16;
    v10 = *(int *)(result + 16);
    if ((_DWORD)v10
      && ((v10 & 3) != 1 ? (v11 = v10 + v9) : (v11 = *(_QWORD *)((v10 & 0xFFFFFFFFFFFFFFFCLL) + v9)),
          v7 < (*(_DWORD *)(result + 20) & 0xFFFFFFu)
       && (v12 = v11 + 12 * v7, v15 = *(int *)(v12 + 20), v14 = v12 + 20, v13 = v15, (_DWORD)v15)))
    {
      result = (uint64_t)AG::swift::metadata::mangled_type_name_ref_cached(this, (_BYTE *)(v13 + v14), 0);
      if (result)
      {
        v16 = result;
        (*(void (**)(_QWORD *, AG::swift::metadata *))(*((_QWORD *)this - 1) + 96))(a2, this);
        v17 = (uint64_t)a2;
        if ((*(_BYTE *)(v14 - 4) & 1) != 0)
        {
          v18 = *(unsigned __int8 *)(*(_QWORD *)(v16 - 8) + 80);
          v17 = *a2 + ((v18 + 16) & ~v18);
        }
        a3(v7, v16, v17);
        (*(void (**)(_QWORD *, uint64_t, AG::swift::metadata *))(*((_QWORD *)this - 1) + 104))(a2, v7, this);
        return 1;
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

__CFString *AGTypeDescription(AG::swift::metadata *a1)
{
  __CFString *Mutable;

  Mutable = CFStringCreateMutable(0, 0);
  AG::swift::metadata::append_description(a1, Mutable);
  return Mutable;
}

unsigned __int8 *AGTypeGetSignature@<X0>(AG::swift::metadata *a1@<X0>, uint64_t a2@<X8>)
{
  unsigned __int8 *result;

  result = AG::swift::metadata::signature(a1);
  if (result)
  {
    *(_OWORD *)a2 = *(_OWORD *)result;
    *(_DWORD *)(a2 + 16) = *((_DWORD *)result + 4);
  }
  else
  {
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_DWORD *)(a2 + 16) = 0;
  }
  return result;
}

_DWORD *AGTypeNominalDescriptorName(AG::swift::metadata *a1)
{
  _DWORD *result;
  uint64_t v2;

  result = AG::swift::metadata::nominal_descriptor(a1);
  if (result)
  {
    v2 = (int)result[2];
    if ((_DWORD)v2)
      return (_DWORD *)((char *)result + v2 + 8);
    else
      return 0;
  }
  return result;
}

uint64_t AGTypeApplyFields::Visitor::unknown_result(AGTypeApplyFields::Visitor *this)
{
  return 1;
}

uint64_t AGTypeApplyFields::Visitor::visit_field(uint64_t a1, AG::swift::metadata *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  const char *v13;

  v8 = *(int *)(a3 + 4);
  if ((_DWORD)v8)
    v9 = (_BYTE *)(v8 + a3 + 4);
  else
    v9 = 0;
  v10 = AG::swift::metadata::mangled_type_name_ref(a2, v9, 1, 0);
  if (v10)
  {
    v11 = v10;
    v12 = *(int *)(a3 + 8);
    if ((_DWORD)v12)
      v13 = (const char *)(v12 + a3 + 8);
    else
      v13 = "";
    (*(void (**)(const char *, uint64_t, uint64_t))(a1 + 8))(v13, a4, v11);
  }
  return 1;
}

uint64_t util::UntypedTable::remove(util::UntypedTable *this, void *a2)
{
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  void (*v10)(_QWORD);
  void (*v11)(_QWORD);

  if (!*((_QWORD *)this + 7))
    return 0;
  if (*((_BYTE *)this + 77))
    return util::UntypedTable::remove_ptr(this, a2);
  v5 = (*(uint64_t (**)(void *))this)(a2);
  v6 = (_QWORD *)(*((_QWORD *)this + 6) + 8 * (*((_QWORD *)this + 8) & v5));
  v7 = (_QWORD *)*v6;
  if (!*v6)
    return 0;
  v8 = v5;
  while (1)
  {
    v9 = v7;
    if (v7[3] == v8)
    {
      if ((*((unsigned int (**)(_QWORD, void *))this + 1))(v7[1], a2))
        break;
    }
    v7 = (_QWORD *)*v9;
    v6 = v9;
    if (!*v9)
      return 0;
  }
  *v6 = *v9;
  v10 = (void (*)(_QWORD))*((_QWORD *)this + 2);
  if (v10)
    v10(v9[1]);
  v11 = (void (*)(_QWORD))*((_QWORD *)this + 3);
  if (v11)
    v11(v9[2]);
  *v9 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = v9;
  --*((_QWORD *)this + 7);
  return 1;
}

uint64_t util::string_hash(util *this, const void *a2)
{
  char v2;
  uint64_t result;
  unsigned __int8 *v5;
  int v6;

  v2 = *(_BYTE *)this;
  if (!*(_BYTE *)this)
    return 0;
  result = 0;
  v5 = (unsigned __int8 *)this + 1;
  do
  {
    result = 33 * result + v2;
    v6 = *v5++;
    v2 = v6;
  }
  while (v6);
  return result;
}

uint64_t *AG::Graph::Context::set_deadline(uint64_t *this, uint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;

  if (this[7] != a2)
  {
    v3 = this;
    this[7] = a2;
    v4 = *this;
    v5 = *(_DWORD *)(*this + 232);
    if (v5)
    {
      v6 = v5 - 1;
      do
      {
        v7 = v6;
        v8 = *(_QWORD *)(*(_QWORD *)(v4 + 224) + 8 * v6);
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v8 + 312))(v8, a2);
        --v6;
      }
      while (v7);
      v4 = *v3;
    }
    v9 = &v10;
    v10 = -1;
    this = (uint64_t *)util::UntypedTable::for_each(v4 + 144, (void (*)(const void *, const void *, const void *))util::Table<unsigned long,AG::Graph::Context *>::for_each<AG::Graph::update_deadline(void)::$_0>(AG::Graph::update_deadline(void)::$_0 const&)const::{lambda(void const*,void const*,void const*)#1}::__invoke, &v9);
    *(_QWORD *)(v4 + 432) = v10;
  }
  return this;
}

const char *AG::Graph::Graph(void)::$_1::operator()()
{
  char *v0;
  AG::DebugServer *v1;
  char *v2;
  int v3;
  const char *result;
  int v5;
  char *v6;
  __int128 v7;
  const char *v8;
  size_t v9;
  void *v10;
  uint64_t v11;
  unint64_t v12;
  int v13;
  const char *v14;
  uint64_t v15;
  char *__s;
  uint64_t v17;
  __int128 v18;

  v0 = getenv("AG_DEBUG_SERVER");
  if (v0)
  {
    v1 = (AG::DebugServer *)strtol(v0, 0, 0);
    AG::DebugServer::start(v1);
  }
  v17 = 0;
  v18 = 0uLL;
  v2 = getenv("AG_PROFILE");
  if (v2)
    v3 = atoi(v2);
  else
    v3 = 0;
  result = getenv("AG_TRACE");
  if (!result)
  {
    v15 = 0;
    v5 = 0;
LABEL_30:
    v7 = 0uLL;
    goto LABEL_31;
  }
  __s = 0;
  result = (const char *)strtol(result, &__s, 0);
  v5 = (int)result;
  v6 = __s;
  v7 = 0uLL;
  if (!__s)
  {
    v15 = 0;
    goto LABEL_31;
  }
  result = (const char *)strspn(__s, ", \t\n\f\r");
  v8 = &result[(_QWORD)v6];
  if (!result[(_QWORD)v6])
  {
    v15 = 0;
    goto LABEL_30;
  }
  do
  {
    v9 = strcspn(v8, ", \t\n\f\r");
    v10 = malloc_type_malloc(v9 + 1, 0x6E63CC73uLL);
    memcpy(v10, v8, v9);
    *((_BYTE *)v10 + v9) = 0;
    if (!strcasecmp((const char *)v10, "enabled"))
    {
      v13 = 1;
LABEL_24:
      v5 |= v13;
      free(v10);
      goto LABEL_25;
    }
    if (!strcasecmp((const char *)v10, "full"))
    {
      v13 = 2;
      goto LABEL_24;
    }
    if (!strcasecmp((const char *)v10, "backtrace"))
    {
      v13 = 4;
      goto LABEL_24;
    }
    if (!strcasecmp((const char *)v10, "prepare"))
    {
      v13 = 8;
      goto LABEL_24;
    }
    if (!strcasecmp((const char *)v10, "custom"))
    {
      v13 = 16;
      goto LABEL_24;
    }
    if (!strcasecmp((const char *)v10, "all"))
    {
      v13 = 32;
      goto LABEL_24;
    }
    v11 = v18;
    v12 = v18 + 1;
    if (*((_QWORD *)&v18 + 1) < (unint64_t)(v18 + 1))
    {
      AG::vector<std::unique_ptr<char const,util::free_deleter>,0ul,unsigned long>::reserve_slow((uint64_t)&v17, v12);
      v11 = v18;
      v12 = v18 + 1;
    }
    *(_QWORD *)(v17 + 8 * v11) = v10;
    *(_QWORD *)&v18 = v12;
LABEL_25:
    v14 = &v8[v9];
    result = (const char *)strspn(v14, ", \t\n\f\r");
    v8 = &result[(_QWORD)v14];
  }
  while (*v8);
  v15 = v17;
  v7 = v18;
LABEL_31:
  _ZZN2AG5GraphC1EvEDC14profiler_flags11trace_flags16trace_subsystemsE = v3;
  dword_1ECEF3364 = v5;
  qword_1ECEF3368 = v15;
  xmmword_1ECEF3370 = v7;
  return result;
}

void sub_1AB946C44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10)
{
  if (a10)
    free(a10);
  _Unwind_Resume(exception_object);
}

uint64_t std::tuple<unsigned int,unsigned int,AG::vector<char const*,0ul,unsigned long>>::~tuple(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 8);
  if (v2)
    free(v2);
  return a1;
}

uint64_t AG::vector<std::unique_ptr<AG::AttributeType,AG::AttributeType::deleter>,0ul,unsigned int>::~vector(uint64_t a1)
{
  uint64_t *v2;
  unint64_t v3;

  v2 = *(uint64_t **)a1;
  if (*(_DWORD *)(a1 + 8))
  {
    v3 = 0;
    do
    {
      std::unique_ptr<AG::AttributeType,AG::AttributeType::deleter>::reset[abi:ne180100](v2, 0);
      ++v3;
      ++v2;
    }
    while (v3 < *(unsigned int *)(a1 + 8));
    v2 = *(uint64_t **)a1;
  }
  if (v2)
    free(v2);
  return a1;
}

void util::Heap::~Heap(util::Heap *this)
{
  util::Heap::reset(this, 0, 0);
}

void AG::Graph::~Graph(AG::Graph *this)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  void (***v5)(_QWORD);
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  AG::Subgraph **v9;
  uint64_t v10;
  void *v11;
  void *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t *v17;
  unint64_t v18;

  v2 = *((unsigned int *)this + 58);
  if ((_DWORD)v2)
  {
    v3 = (_QWORD *)*((_QWORD *)this + 28);
    v4 = 8 * v2;
    do
    {
      v5 = (void (***)(_QWORD))*v3;
      (*(void (**)(_QWORD, AG::Graph *))(*(_QWORD *)*v3 + 24))(*v3, this);
      (**v5)(v5);
      ++v3;
      v4 -= 8;
    }
    while (v4);
  }
  os_unfair_lock_lock((os_unfair_lock_t)&AG::Graph::_all_graphs_lock);
  v6 = *((_QWORD *)this + 1);
  v7 = &AG::Graph::_all_graphs;
  if (v6)
    v7 = (uint64_t *)*((_QWORD *)this + 1);
  *v7 = *(_QWORD *)this;
  if (*(_QWORD *)this)
    *(_QWORD *)(*(_QWORD *)this + 8) = v6;
  os_unfair_lock_unlock((os_unfair_lock_t)&AG::Graph::_all_graphs_lock);
  v8 = *((unsigned int *)this + 88);
  if ((_DWORD)v8)
  {
    v9 = (AG::Subgraph **)*((_QWORD *)this + 43);
    v10 = 8 * v8;
    do
    {
      AG::Subgraph::graph_destroyed(*v9++);
      v10 -= 8;
    }
    while (v10);
  }
  v11 = (void *)*((_QWORD *)this + 49);
  if (v11)
    free(v11);
  v12 = (void *)*((_QWORD *)this + 45);
  if (v12)
    free(v12);
  v13 = (void *)*((_QWORD *)this + 43);
  if (v13)
    free(v13);
  v14 = *((_QWORD *)this + 42);
  *((_QWORD *)this + 42) = 0;
  if (v14)
    std::default_delete<AG::Graph::KeyTable>::operator()[abi:ne180100]((uint64_t)this + 336, v14);
  std::unique_ptr<std::unordered_map<AG::Subgraph *,AG::Graph::TreeDataElement>>::reset[abi:ne180100]((uint64_t *)this + 41, 0);
  v15 = *((_QWORD *)this + 38);
  *((_QWORD *)this + 38) = 0;
  if (v15)
    std::default_delete<AG::Graph::ProfileData>::operator()[abi:ne180100]((uint64_t)this + 304, v15);
  v16 = (void *)*((_QWORD *)this + 28);
  if (v16)
    free(v16);
  util::UntypedTable::~UntypedTable((AG::Graph *)((char *)this + 144));
  v17 = (uint64_t *)*((_QWORD *)this + 16);
  if (*((_DWORD *)this + 34))
  {
    v18 = 0;
    do
    {
      std::unique_ptr<AG::AttributeType,AG::AttributeType::deleter>::reset[abi:ne180100](v17, 0);
      ++v18;
      ++v17;
    }
    while (v18 < *((unsigned int *)this + 34));
    v17 = (uint64_t *)*((_QWORD *)this + 16);
  }
  if (v17)
    free(v17);
  util::UntypedTable::~UntypedTable((AG::Graph *)((char *)this + 48));
  util::Heap::reset((AG::Graph *)((char *)this + 16), 0, 0);
}

uint64_t AG::Graph::main_context(AG::Graph *this)
{
  _QWORD v2[2];
  uint64_t v3;
  uint64_t v4;

  v4 = 0;
  v2[0] = &v4;
  v2[1] = &v3;
  v3 = -1;
  util::UntypedTable::for_each((uint64_t)this + 144, (void (*)(const void *, const void *, const void *))util::Table<unsigned long,AG::Graph::Context *>::for_each<AG::Graph::main_context(void)::$_0>(AG::Graph::main_context(void)::$_0 const&)const::{lambda(void const*,void const*,void const*)#1}::__invoke, v2);
  return v4;
}

void *AG::Graph::add_trace(void *this, AG::Trace *a2)
{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;

  if (a2)
  {
    v3 = (uint64_t)this;
    this = (void *)(*(uint64_t (**)(AG::Trace *, void *))(*(_QWORD *)a2 + 16))(a2, this);
    v4 = *(_DWORD *)(v3 + 232);
    v5 = v4 + 1;
    if (*(_DWORD *)(v3 + 236) < v4 + 1)
    {
      this = AG::vector<std::pair<unsigned int,BOOL>,0ul,unsigned int>::reserve_slow(v3 + 224, v5);
      v4 = *(_DWORD *)(v3 + 232);
      v5 = v4 + 1;
    }
    *(_QWORD *)(*(_QWORD *)(v3 + 224) + 8 * v4) = a2;
    *(_DWORD *)(v3 + 232) = v5;
  }
  return this;
}

_DWORD *AG::Graph::remove_trace(_DWORD *this, uint64_t a2)
{
  unsigned int v2;
  _DWORD *v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;

  v2 = this[58];
  if (v2)
  {
    v4 = this;
    v5 = 0;
    do
    {
      this = (_DWORD *)(*((_QWORD *)v4 + 28) + 8 * v5);
      v6 = *(_QWORD *)this;
      if (*(_QWORD *)(*(_QWORD *)this + 8) == a2)
      {
        v7 = v2 - 1;
        v4[58] = v7;
        if (v5 != (_DWORD)v7)
          memmove(this, this + 2, 8 * (v7 - v5));
        (*(void (**)(uint64_t, _DWORD *))(*(_QWORD *)v6 + 24))(v6, v4);
        this = (_DWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
        v2 = v4[58];
      }
      else
      {
        ++v5;
      }
    }
    while (v5 < v2);
  }
  return this;
}

__n128 AG::Graph::call_main_handler(__n128 *this, const void *a2, void (*a3)(const void *))
{
  unint64_t v3;
  void (*v4)(uint64_t (*)(), AG::Graph **);
  __n128 *v5;
  __n128 result;
  __n128 v7;
  AG::Graph *v8;
  unint64_t v9;
  const void *v10;
  void (*v11)(const void *);

  v3 = this[26].n128_u64[0];
  v8 = (AG::Graph *)this;
  v9 = v3;
  v10 = a2;
  v11 = a3;
  this[26].n128_u64[0] = 0;
  v5 = this + 15;
  v7 = this[15];
  v4 = (void (*)(uint64_t (*)(), AG::Graph **))this[15].n128_u64[0];
  this[15].n128_u64[0] = 0;
  this[15].n128_u64[1] = 0;
  v4(AG::Graph::call_main_handler(void const*,void (*)(void const*))::MainTrampoline::thunk, &v8);
  result = v7;
  *v5 = v7;
  *((_QWORD *)v8 + 52) = v9;
  return result;
}

void sub_1AB947080(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __int128 a9, uint64_t a10, uint64_t a11)
{
  _OWORD *v11;

  *v11 = a9;
  *(_QWORD *)(a10 + 416) = a11;
  _Unwind_Resume(a1);
}

uint64_t AG::Graph::call_main_handler(void const*,void (*)(void const*))::MainTrampoline::thunk()
{
  uint64_t v0;

  return (*(uint64_t (**)(_QWORD))(v0 + 24))(*(_QWORD *)(v0 + 16));
}

uint64_t AG::Graph::passed_deadline_slow(AG::Graph *this)
{
  int v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;

  if (*((_QWORD *)this + 54))
  {
    if (mach_absolute_time() < *((_QWORD *)this + 54))
      return 0;
    v3 = *((_DWORD *)this + 58);
    if (v3)
    {
      v4 = v3 - 1;
      do
      {
        v5 = v4;
        v6 = *(_QWORD *)(*((_QWORD *)this + 28) + 8 * v4);
        (*(void (**)(uint64_t))(*(_QWORD *)v6 + 320))(v6);
        --v4;
      }
      while (v5);
    }
    *((_QWORD *)this + 54) = 0;
  }
  return 1;
}

uint64_t *AG::Graph::intern_type(uint64_t a1, uint64_t *a2, uint64_t (*a3)(void))
{
  util::UntypedTable *v6;
  uint64_t *v7;
  uint64_t v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  unsigned __int8 v13;
  unsigned int v14;
  AG *v15;
  NSObject *v16;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  AG::swift::metadata **v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint8_t buf[4];
  int v26;
  __int16 v27;
  uint64_t v28;
  __int16 v29;
  uint64_t v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  v6 = (util::UntypedTable *)(a1 + 48);
  v7 = util::UntypedTable::lookup((util::UntypedTable *)(a1 + 48), a2, 0);
  if (!(_DWORD)v7)
  {
    v8 = a3();
    v10 = v8;
    v11 = *(_QWORD *)(*(_QWORD *)v8 - 8);
    v12 = 7;
    if ((*(_DWORD *)(v11 + 80) & 0x100000) == 0)
    {
      if (*(_QWORD *)(v11 + 64) <= 0x80uLL)
        v12 = *(_DWORD *)(v11 + 80);
      else
        v12 = 7;
    }
    *(_DWORD *)(v8 + 44) = (v12 + 28) & ~v12;
    v13 = atomic_load((unsigned __int8 *)&_ZGVZN2AG5Graph11intern_typeEPKNS_5swift8metadataENS_15ClosureFunctionIPvJEEEE16prefetch_layouts);
    if ((v13 & 1) == 0
      && __cxa_guard_acquire(&_ZGVZN2AG5Graph11intern_typeEPKNS_5swift8metadataENS_15ClosureFunctionIPvJEEEE16prefetch_layouts))
    {
      _ZZN2AG5Graph11intern_typeEPKNS_5swift8metadataENS_15ClosureFunctionIPvJEEEE16prefetch_layouts = _ZZN2AG5Graph11intern_typeEPKNS_5swift8metadataENS_15ClosureFunctionIPvJEEEENK3__0clEv();
      __cxa_guard_release(&_ZGVZN2AG5Graph11intern_typeEPKNS_5swift8metadataENS_15ClosureFunctionIPvJEEEE16prefetch_layouts);
    }
    if (_ZZN2AG5Graph11intern_typeEPKNS_5swift8metadataENS_15ClosureFunctionIPvJEEEE16prefetch_layouts
      && !*(_QWORD *)(v10 + 48))
    {
      *(_QWORD *)(v10 + 48) = AG::LayoutDescriptor::fetch(*(AG::LayoutDescriptor **)(v10 + 8), (const AG::swift::metadata *)(*(_DWORD *)(v10 + 40) & 3), -1);
    }
    v7 = (uint64_t *)*(unsigned int *)(a1 + 136);
    if (v7 >= 0xFFFFFF)
      AG::precondition_failure((AG *)"overflowed max type id: %u", v9, *(unsigned int *)(a1 + 136));
    v14 = *(_DWORD *)(a1 + 136);
    if (*(_DWORD *)(a1 + 140) <= v7)
    {
      AG::vector<std::pair<unsigned int,BOOL>,0ul,unsigned int>::reserve_slow(a1 + 128, (_DWORD)v7 + 1);
      v14 = *(_DWORD *)(a1 + 136);
    }
    *(_QWORD *)(*(_QWORD *)(a1 + 128) + 8 * v14) = v10;
    *(_DWORD *)(a1 + 136) = v14 + 1;
    v15 = (AG *)util::UntypedTable::insert(v6, a2, v7);
    if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v10 - 8) + 64) >= 0x2000uLL)
    {
      v16 = AG::misc_log(v15);
      v15 = (AG *)os_log_type_enabled(v16, OS_LOG_TYPE_INFO);
      if ((_DWORD)v15)
      {
        v17 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v10 + 8) - 8) + 64);
        v18 = AG::swift::metadata::name(*(AG::swift::metadata **)v10, 0);
        *(_DWORD *)buf = 67109378;
        v26 = v17;
        v27 = 2080;
        v28 = v18;
        _os_log_impl(&dword_1AB92D000, v16, OS_LOG_TYPE_INFO, "large attribute self: %u bytes, %s", buf, 0x12u);
      }
    }
    if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v10 + 8) - 8) + 64) >= 0x2000uLL)
    {
      v19 = AG::misc_log(v15);
      if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
      {
        v20 = (AG::swift::metadata **)(v10 + 8);
        v21 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v10 + 8) - 8) + 64);
        v22 = AG::swift::metadata::name(*(AG::swift::metadata **)v10, 0);
        v23 = AG::swift::metadata::name(*v20, 0);
        *(_DWORD *)buf = 67109634;
        v26 = v21;
        v27 = 2080;
        v28 = v22;
        v29 = 2080;
        v30 = v23;
        _os_log_impl(&dword_1AB92D000, v19, OS_LOG_TYPE_INFO, "large attribute value: %u bytes, %s -> %s", buf, 0x1Cu);
      }
    }
  }
  return v7;
}

char *_ZZN2AG5Graph11intern_typeEPKNS_5swift8metadataENS_15ClosureFunctionIPvJEEEENK3__0clEv()
{
  char *result;

  result = getenv("AG_PREFETCH_LAYOUTS");
  if (result)
    return (char *)(atoi(result) != 0);
  return result;
}

void AG::Graph::remove_output_edge<AG::MutableIndirectNode>(uint64_t a1, unsigned int a2, int a3)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  _DWORD *i;

  v3 = AG::data::_shared_table_bytes + a2;
  v4 = *(unsigned int *)(v3 + 20);
  if (v4 >= 0x20)
  {
    v5 = v4 >> 5;
    v6 = v5;
    for (i = (_DWORD *)(AG::data::_shared_table_bytes + *(unsigned int *)(v3 + 24)); *i != a3; ++i)
    {
      if (!--v6)
        return;
    }
    *i = *(_DWORD *)(AG::data::_shared_table_bytes + *(unsigned int *)(v3 + 24) + 4 * v5 - 4);
    *(_DWORD *)(v3 + 20) -= 32;
  }
}

void AG::Graph::attribute_modify(uint64_t a1, const char *a2, uint64_t a3, void (*a4)(_QWORD *), uint64_t a5, int a6)
{
  unsigned int *v6;
  unint64_t v7;
  uint64_t v9;
  uint64_t v12;
  int v13;
  _QWORD *v14;
  int v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;

  v6 = (unsigned int *)(AG::data::_shared_table_bytes + a2);
  v7 = *v6;
  if ((v7 & 0x20) == 0)
    AG::precondition_failure((AG *)"no self data: %u", a2, a2);
  v9 = *(_QWORD *)(*(_QWORD *)(a1 + 128) + ((v7 >> 5) & 0x7FFFFF8));
  if (*(_QWORD *)v9 != a3)
    AG::precondition_failure((AG *)"self type mismatch: %u", a2, a2);
  v12 = a2;
  v13 = *(_DWORD *)(a1 + 232);
  if (v13)
  {
    v16 = v13 - 1;
    do
    {
      v17 = v16;
      v18 = *(_QWORD *)(*(_QWORD *)(a1 + 224) + 8 * v16);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v18 + 128))(v18, v12);
      --v16;
    }
    while (v17);
  }
  v14 = (_QWORD *)((char *)v6 + *(unsigned int *)(v9 + 44));
  if ((*((_BYTE *)v6 + 7) & 1) != 0)
    v14 = (_QWORD *)*v14;
  a4(v14);
  v15 = *(_DWORD *)(a1 + 232);
  if (v15)
  {
    v19 = v15 - 1;
    do
    {
      v20 = v19;
      v21 = *(_QWORD *)(*(_QWORD *)(a1 + 224) + 8 * v19);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v21 + 136))(v21, v12);
      --v19;
    }
    while (v20);
  }
  if (a6)
  {
    *((_BYTE *)v6 + 7) |= 0x40u;
    AG::Graph::mark_pending(a1, v12, (int *)v6);
  }
}

uint64_t AG::Graph::indirect_attribute_reset(uint64_t a1, const char *a2, char a3)
{
  unsigned int v3;
  uint64_t v4;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t result;
  uint64_t v13;
  int v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  unsigned int v19;
  uint64_t v20;
  int v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;

  v3 = a2;
  v4 = AG::data::_shared_table_bytes + a2;
  if ((*(_BYTE *)(v4 + 8) & 1) == 0)
    AG::precondition_failure((AG *)"not an indirect attribute: %u", a2, a2 | 1);
  v7 = *(_QWORD *)v4;
  v8 = *(_QWORD *)(v4 + 28);
  if ((v8 & 0xFFFFFFFC) != 0
    && ((v9 = HIDWORD(v8),
         v10 = AG::data::table::raw_page_seed((uint64_t)&AG::data::_shared_table_bytes, (const char *)(*(_QWORD *)(v4 + 28) & 0xFFFFFE00)), (v10 & 0xFF00000000) != 0)? (v11 = (_DWORD)v9 == (_DWORD)v10): (v11 = 0), v11))
  {
    v15 = *(_DWORD *)(v4 + 28);
    v13 = *(unsigned int *)(v4 + 32);
    v14 = *(_DWORD *)(v4 + 36);
  }
  else
  {
    result = 0;
    if ((a3 & 1) != 0)
      return result;
    v13 = 0;
    v14 = 0;
    v15 = 2;
  }
  v16 = 2;
  if (v7 >= 4)
  {
    v17 = AG::data::table::raw_page_seed((uint64_t)&AG::data::_shared_table_bytes, (const char *)(v7 & 0xFFFFFE00));
    if (HIDWORD(v7) != (_DWORD)v17 || (v17 & 0xFF00000000) == 0)
      v16 = 2;
    else
      v16 = v7;
  }
  v19 = 2;
  if (v15 >= 4)
  {
    v20 = AG::data::table::raw_page_seed((uint64_t)&AG::data::_shared_table_bytes, (const char *)(v15 & 0xFFFFFE00));
    if ((_DWORD)v13 != (_DWORD)v20 || (v20 & 0xFF00000000) == 0)
      v19 = 2;
    else
      v19 = v15;
  }
  v22 = *(_DWORD *)(a1 + 232);
  if (v22)
  {
    v26 = v22 - 1;
    do
    {
      v28 = v26;
      v27 = *(_QWORD *)(*(_QWORD *)(a1 + 224) + 8 * v26);
      (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v27 + 296))(v27, v3, v19);
      --v26;
    }
    while (v28);
  }
  if (v16 != v19)
    AG::Graph::remove_input_dependencies(a1, v3 & 0xFFFFFFFE | 1, v16);
  AG::IndirectNode::modify(v4, v15 | (unint64_t)(v13 << 32), v14);
  if (v19 >= 4)
  {
    v23 = *(_QWORD *)(AG::data::_shared_table_bytes + (v19 & 0xFFFFFE00));
    if (v23)
      v23 = *(_QWORD *)(v23 + 48);
    v24 = *(_QWORD *)(AG::data::_shared_table_bytes + (v3 & 0xFFFFFE00));
    if (v24)
      v24 = *(_QWORD *)(v24 + 48);
    *(_DWORD *)(v4 + 8) = *(_DWORD *)(v4 + 8) & 0xFFFFFFFD | (2 * (v23 != v24));
  }
  v25 = v3 & 0xFFFFFFFE | 1;
  if (v16 != v19)
    AG::Graph::add_input_dependencies(a1, v25, v19);
  AG::Graph::mark_changed(a1);
  AG::Graph::propagate_dirty(a1);
  return 1;
}

uint64_t AG::Graph::indirect_attribute_dependency(uint64_t a1, const char *a2)
{
  uint64_t v2;

  v2 = AG::data::_shared_table_bytes + a2;
  if ((*(_BYTE *)(v2 + 8) & 1) == 0)
    AG::precondition_failure((AG *)"not an indirect attribute: %u", a2, a2 | 1);
  return *(unsigned int *)(v2 + 16);
}

uint64_t AG::Graph::value_exists(uint64_t a1, unsigned int a2)
{
  return (*(unsigned __int8 *)(AG::data::_shared_table_bytes + a2) >> 4) & 1;
}

uint64_t AG::Graph::value_mark_all(uint64_t this, const char *a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  AG::Subgraph **v7;
  AG::Subgraph **v8;
  AG::Subgraph *v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  int v16;
  unsigned int *v17;
  unint64_t v18;
  int v19;
  unsigned int v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  int v26;
  unsigned int v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v2 = AG::Graph::_current_update_key;
  v3 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v2);
  if (v3 >= 2 && (v3 & 1) == 0)
    AG::precondition_failure((AG *)"invalidating all values during update", a2);
  v5 = this;
  v6 = *(unsigned int *)(this + 352);
  if ((_DWORD)v6)
  {
    v7 = *(AG::Subgraph ***)(this + 344);
    v8 = &v7[v6];
    do
    {
      v9 = *v7;
      v10 = *((_DWORD *)*v7 + 4);
      if (v10)
      {
        v11 = AG::data::_shared_table_bytes;
        do
        {
          v12 = v10;
          v13 = v11 + v10;
          v14 = *(unsigned __int16 *)(v13 + 20);
          if (*(_WORD *)(v13 + 20))
          {
            do
            {
              v15 = (v14 + v12);
              v16 = ((_BYTE)v14 + (_BYTE)v12) & 3;
              if ((((_BYTE)v14 + (_BYTE)v12) & 3) != 0)
              {
                if (v16 == 1)
                {
                  v14 = *(unsigned __int16 *)(v11 + (v15 & 0xFFFFFFFC) + 14);
                  if ((v15 & 3) == 0)
                  {
                    v24 = v11 + v15;
                    v25 = *(unsigned int *)(v11 + v15);
                    if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v5 + 128) + ((v25 >> 5) & 0x7FFFFF8)) + 40) & 0x10) == 0)
                    {
                      *(_DWORD *)v24 = v25 | 3;
                      v26 = *(unsigned __int8 *)(v24 + 6);
                      v27 = *((_DWORD *)v9 + 25);
                      if ((v26 & ~HIWORD(v27)) != 0)
                      {
                        *((_DWORD *)v9 + 25) = v27 & 0xFF00FFFF | ((BYTE2(v27) | v26) << 16);
                        this = AG::Subgraph::propagate_dirty_flags(v9);
                        v11 = AG::data::_shared_table_bytes;
                      }
                    }
                    v28 = *(unsigned int *)(v24 + 12);
                    if (v28 >= 0x20)
                    {
                      v29 = 5 * (v28 >> 5);
                      v30 = *(unsigned int *)(v24 + 16) + 4;
                      do
                      {
                        *(_BYTE *)(v11 + v30) |= 8u;
                        v30 += 5;
                        v29 -= 5;
                      }
                      while (v29);
                    }
                  }
                }
                else if (v16 == 2)
                {
                  break;
                }
              }
              else
              {
                v17 = (unsigned int *)(v11 + v15);
                v14 = *((unsigned __int16 *)v17 + 2);
                v18 = *v17;
                if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v5 + 128) + ((v18 >> 5) & 0x7FFFFF8)) + 40) & 0x10) == 0)
                {
                  *v17 = v18 | 3;
                  v19 = *((unsigned __int8 *)v17 + 6);
                  v20 = *((_DWORD *)v9 + 25);
                  if ((v19 & ~HIWORD(v20)) != 0)
                  {
                    *((_DWORD *)v9 + 25) = v20 & 0xFF00FFFF | ((BYTE2(v20) | v19) << 16);
                    this = AG::Subgraph::propagate_dirty_flags(v9);
                    v11 = AG::data::_shared_table_bytes;
                  }
                }
                v21 = v17[3];
                if (v21 >= 0x20)
                {
                  v22 = 5 * (v21 >> 5);
                  v23 = v17[4] + 4;
                  do
                  {
                    *(_BYTE *)(v11 + v23) |= 8u;
                    v23 += 5;
                    v22 -= 5;
                  }
                  while (v22);
                }
              }
            }
            while (v14);
          }
          v10 = *(_DWORD *)(v11 + v12 + 8);
        }
        while (v10);
      }
      ++v7;
    }
    while (v7 != v8);
  }
  return this;
}

unint64_t AG::Graph::input_value_add(uint64_t a1, const char *a2, unsigned int a3, char a4)
{
  uint64_t v5;
  const char *v6;
  uint64_t v7;
  unint64_t v9;
  unint64_t result;
  unint64_t v11;
  _BYTE *v12;
  uint64_t v13;

  if (dword_1ECEF30D0 <= (a3 & 0xFFFFFFFC))
    AG::precondition_failure((AG *)"invalid data offset: %u", a2, a3 & 0xFFFFFFFC);
  v5 = a4 & 1;
  v6 = (const char *)a2;
  v7 = AG::data::_shared_table_bytes + a2;
  v9 = *(unsigned int *)(v7 + 12);
  if (v9 <= 0x11F)
  {
    if (v9 >= 0x20)
    {
      result = 0;
      v11 = v9 >> 5;
      v12 = (_BYTE *)(*(unsigned int *)(v7 + 16) + AG::data::_shared_table_bytes + 4);
      while (*((_DWORD *)v12 - 1) != a3 || (*v12 & 5) != (_DWORD)v5)
      {
        ++result;
        v12 += 5;
        if (v11 == result)
          goto LABEL_8;
      }
LABEL_9:
      if ((result & 0x8000000000000000) != 0)
        return result;
      goto LABEL_10;
    }
LABEL_8:
    result = AG::Graph::add_input(a1, v6, a3, 0, v5);
    goto LABEL_9;
  }
  result = AG::Graph::index_of_input_slow(a1, v7, a3 | (unint64_t)(v5 << 40) | 0x500000000);
  if ((result & 0x8000000000000000) != 0)
    goto LABEL_8;
LABEL_10:
  v13 = AG::data::_shared_table_bytes + 5 * result + *(unsigned int *)&v6[AG::data::_shared_table_bytes + 16];
  *(_BYTE *)(v13 + 4) |= 0x10u;
  return result;
}

uint64_t *AG::Graph::intern_key(AG::Graph *this, char *a2)
{
  uint64_t *v3;
  _QWORD *v4;
  uint64_t v6;
  uint64_t *v7;
  void *v8;
  char *v9;
  const char *v10;
  char *v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  void *v16;

  v3 = (uint64_t *)((char *)this + 336);
  v4 = (_QWORD *)*((_QWORD *)this + 42);
  if (!v4)
  {
    v4 = (_QWORD *)operator new();
    *v4 = 0;
    v4[1] = 0;
    util::UntypedTable::UntypedTable((uint64_t)(v4 + 2), (unint64_t (*)(util *, const void *))AG::Graph::KeyTable::KeyTable(util::Heap &)::{lambda(char const*)#1}::__invoke, (BOOL (*)(util *, util *, const void *))AG::Graph::KeyTable::KeyTable(util::Heap &)::{lambda(char const*,char const*)#1}::__invoke, 0, 0, (AG::Graph *)((char *)this + 16));
    v6 = *v3;
    *v3 = (uint64_t)v4;
    if (v6)
    {
      std::default_delete<AG::Graph::KeyTable>::operator()[abi:ne180100]((uint64_t)v3, v6);
      v4 = (_QWORD *)*v3;
    }
  }
  v16 = 0;
  v7 = util::UntypedTable::lookup((util::UntypedTable *)(v4 + 2), (uint64_t *)a2, &v16);
  if (v16)
    return v7;
  v9 = strdup(a2);
  if (!v9)
    AG::precondition_failure((AG *)"memory allocation failure", v10);
  v11 = v9;
  v12 = *v3;
  v8 = (void *)*(unsigned int *)(*v3 + 8);
  v13 = (_DWORD)v8 + 1;
  if (*(_DWORD *)(*v3 + 12) < ((_DWORD)v8 + 1))
  {
    AG::vector<std::pair<unsigned int,BOOL>,0ul,unsigned int>::reserve_slow(*v3, v13);
    v14 = *(_DWORD *)(v12 + 8);
    v13 = v14 + 1;
  }
  else
  {
    v14 = *(_DWORD *)(*v3 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v12 + 8 * v14) = v11;
  *(_DWORD *)(v12 + 8) = v13;
  util::UntypedTable::insert((util::UntypedTable *)(*v3 + 16), v11, v8);
  return (uint64_t *)v8;
}

void sub_1AB947C9C(_Unwind_Exception *a1)
{
  uint64_t v1;
  _QWORD *v3;
  unint64_t v4;
  unint64_t i;
  void *v6;

  v3 = *(_QWORD **)v1;
  v4 = *(unsigned int *)(v1 + 8);
  if ((_DWORD)v4)
  {
    for (i = 0; i < v4; ++i)
    {
      v6 = (void *)v3[i];
      v3[i] = 0;
      if (v6)
      {
        free(v6);
        v4 = *(unsigned int *)(v1 + 8);
      }
    }
    v3 = *(_QWORD **)v1;
  }
  if (v3)
    free(v3);
  MEMORY[0x1AF431538](v1, 0x10A0C40627C3B6DLL);
  _Unwind_Resume(a1);
}

uint64_t AG::Graph::key_name(AG::Graph *this, const char *a2)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 42);
  if (!v2 || *(_DWORD *)(v2 + 8) <= a2)
    AG::precondition_failure((AG *)"invalid string key id: %u", a2, a2);
  return *(_QWORD *)(*(_QWORD *)v2 + 8 * a2);
}

uint64_t AG::Graph::TreeDataElement::sort_nodes(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;

  if (!*(_BYTE *)(this + 24))
  {
    v1 = this;
    v2 = *(_QWORD *)this;
    v3 = *(_QWORD *)(v1 + 8);
    v4 = 126 - 2 * __clz(v3);
    if (v3)
      v5 = v4;
    else
      v5 = 0;
    this = std::__introsort<std::_ClassicAlgPolicy,AG::Graph::TreeDataElement::sort_nodes(void)::$_0 &,std::pair<AG::data::ptr<AG::Graph::TreeElement>,AG::data::ptr<AG::Node>> *,false>(v2, (unsigned int *)(v2 + 8 * v3), v5, 1);
    *(_BYTE *)(v1 + 24) = 1;
  }
  return this;
}

uint64_t AG::Graph::Graph(void)::$_0::__invoke()
{
  AG::Subgraph *v0;

  v0 = (AG::Subgraph *)pthread_key_create((pthread_key_t *)&AG::Graph::_current_update_key, 0);
  return AG::Subgraph::make_current_subgraph_key(v0);
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,AG::Graph::index_of_input_slow(AG::Node &,AG::InputEdge::Comparator)::$_0 &,AG::InputEdge*,false>(uint64_t result, unint64_t a2, uint64_t a3, char a4)
{
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unsigned int *v14;
  unsigned int *v15;
  char v16;
  unsigned int v17;
  uint64_t v18;
  char v19;
  unsigned int v20;
  unint64_t v21;
  unint64_t v22;
  unsigned int v23;
  unsigned int v24;
  unint64_t v25;
  int v26;
  unsigned int v27;
  unsigned int v28;
  int v29;
  BOOL v30;
  unsigned int v31;
  unint64_t v32;
  unint64_t v33;
  unsigned int v34;
  char v35;
  int v36;
  unsigned int v37;
  unsigned int v38;
  int v39;
  unint64_t v40;
  unsigned int v41;
  int v42;
  unsigned int *v43;
  unsigned int *v44;
  unsigned int *v45;
  unint64_t v46;
  unsigned int v47;
  unsigned int v48;
  char v49;
  char v50;
  char v51;
  unsigned int v52;
  char v53;
  unsigned int v54;
  unint64_t v55;
  BOOL v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  unsigned int v61;
  char v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  int64_t v66;
  int64_t v67;
  int64_t v68;
  uint64_t v69;
  unsigned int *v70;
  unsigned int v71;
  BOOL v72;
  unsigned int *v73;
  unsigned int v74;
  char v75;
  unsigned int *v76;
  unsigned int v77;
  uint64_t v78;
  unsigned int v79;
  int64_t v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unsigned int v86;
  int v87;
  uint64_t v88;
  unint64_t v89;
  unsigned int *v90;
  unsigned int v91;
  char v92;
  uint64_t v93;
  unsigned int v94;
  unint64_t v95;
  uint64_t v97;
  unsigned int v98;
  char v99;
  uint64_t v100;
  uint64_t v101;
  int v102;
  unsigned int v103;
  unsigned int v104;
  unsigned int v105;
  unsigned int v106;
  unsigned int v107;
  unsigned int v108;
  char v109;
  char v110;
  char v111;
  char v112;
  char v113;
  char v114;

  v7 = result;
LABEL_2:
  v8 = v7;
  while (2)
  {
    v7 = v8;
    v9 = a2 - v8;
    v10 = 0xCCCCCCCCCCCCCCCDLL * (a2 - v8);
    switch(v10)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v41 = *(_DWORD *)(a2 - 5);
        v40 = a2 - 5;
        if (v41 < *(_DWORD *)v8)
        {
          v112 = *(_BYTE *)(v8 + 4);
          v106 = *(_DWORD *)v8;
          v42 = *(_DWORD *)v40;
          *(_BYTE *)(v8 + 4) = *(_BYTE *)(v40 + 4);
          *(_DWORD *)v8 = v42;
          *(_BYTE *)(v40 + 4) = v112;
          *(_DWORD *)v40 = v106;
        }
        return result;
      case 3uLL:
        return (uint64_t)std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,AG::Graph::index_of_input_slow(AG::Node &,AG::InputEdge::Comparator)::$_0 &,AG::InputEdge*>((unsigned int *)v8, (unsigned int *)(v8 + 5), (unsigned int *)(a2 - 5));
      case 4uLL:
        return (uint64_t)std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,AG::Graph::index_of_input_slow(AG::Node &,AG::InputEdge::Comparator)::$_0 &,AG::InputEdge*>(v8, v8 + 5, v8 + 10, a2 - 5);
      case 5uLL:
        v43 = (unsigned int *)(v8 + 5);
        v44 = (unsigned int *)(v8 + 10);
        v45 = (unsigned int *)(v8 + 15);
        result = (uint64_t)std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,AG::Graph::index_of_input_slow(AG::Node &,AG::InputEdge::Comparator)::$_0 &,AG::InputEdge*>(v8, v8 + 5, v8 + 10, v8 + 15);
        v47 = *(_DWORD *)(a2 - 5);
        v46 = a2 - 5;
        if (v47 < *(_DWORD *)(v8 + 15))
        {
          v48 = *v45;
          v49 = *(_BYTE *)(v8 + 19);
          v50 = *(_BYTE *)(v46 + 4);
          *v45 = *(_DWORD *)v46;
          *(_BYTE *)(v8 + 19) = v50;
          *(_BYTE *)(v46 + 4) = v49;
          *(_DWORD *)v46 = v48;
          if (*v45 < *v44)
          {
            v51 = *(_BYTE *)(v8 + 14);
            v52 = *v44;
            *v44 = *v45;
            *(_BYTE *)(v8 + 14) = *(_BYTE *)(v8 + 19);
            *v45 = v52;
            *(_BYTE *)(v8 + 19) = v51;
            if (*v44 < *v43)
            {
              v53 = *(_BYTE *)(v8 + 9);
              v54 = *v43;
              *v43 = *v44;
              *(_BYTE *)(v8 + 9) = *(_BYTE *)(v8 + 14);
              *v44 = v54;
              *(_BYTE *)(v8 + 14) = v53;
              if (*(_DWORD *)(v8 + 5) < *(_DWORD *)v8)
              {
                v113 = *(_BYTE *)(v8 + 4);
                v107 = *(_DWORD *)v8;
                *(_DWORD *)v8 = *v43;
                *(_BYTE *)(v8 + 4) = *(_BYTE *)(v8 + 9);
                *v43 = v107;
                *(_BYTE *)(v8 + 9) = v113;
              }
            }
          }
        }
        return result;
      default:
        if (v9 <= 119)
        {
          v55 = v8 + 5;
          v57 = v8 == a2 || v55 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v57)
            {
              v58 = 0;
              v59 = v8;
              do
              {
                v60 = v55;
                v61 = *(_DWORD *)(v59 + 5);
                if (v61 < *(_DWORD *)v59)
                {
                  v62 = *(_BYTE *)(v59 + 9);
                  v63 = v58;
                  while (1)
                  {
                    v64 = v8 + v63;
                    *(_DWORD *)(v64 + 5) = *(_DWORD *)(v8 + v63);
                    *(_BYTE *)(v64 + 9) = *(_BYTE *)(v8 + v63 + 4);
                    if (!v63)
                      break;
                    v63 -= 5;
                    if (v61 >= *(_DWORD *)(v64 - 5))
                    {
                      v65 = v8 + v63 + 5;
                      goto LABEL_77;
                    }
                  }
                  v65 = v8;
LABEL_77:
                  *(_DWORD *)v65 = v61;
                  *(_BYTE *)(v65 + 4) = v62;
                }
                v55 = v60 + 5;
                v58 += 5;
                v59 = v60;
              }
              while (v60 + 5 != a2);
            }
          }
          else if (!v57)
          {
            do
            {
              v97 = v55;
              v98 = *(_DWORD *)(v7 + 5);
              if (v98 < *(_DWORD *)v7)
              {
                v99 = *(_BYTE *)(v7 + 9);
                v100 = v97;
                do
                {
                  v101 = v100;
                  v102 = *(_DWORD *)(v100 - 5);
                  v100 -= 5;
                  *(_DWORD *)v101 = v102;
                  *(_BYTE *)(v101 + 4) = *(_BYTE *)(v101 - 1);
                }
                while (v98 < *(_DWORD *)(v101 - 10));
                *(_DWORD *)v100 = v98;
                *(_BYTE *)(v100 + 4) = v99;
              }
              v55 = v97 + 5;
              v7 = v97;
            }
            while (v97 + 5 != a2);
          }
          return result;
        }
        if (!a3)
        {
          if (v8 != a2)
          {
            v66 = (v10 - 2) >> 1;
            v67 = v66;
            do
            {
              v68 = v67;
              if (v66 >= v67)
              {
                v69 = (2 * v67) | 1;
                v70 = (unsigned int *)(v8 + 5 * v69);
                if (2 * v68 + 2 >= (uint64_t)v10)
                {
                  v71 = *v70;
                }
                else
                {
                  v71 = *(unsigned int *)((char *)v70 + 5);
                  v72 = *v70 >= v71;
                  if (*v70 > v71)
                    v71 = *v70;
                  if (!v72)
                  {
                    v70 = (unsigned int *)((char *)v70 + 5);
                    v69 = 2 * v68 + 2;
                  }
                }
                v73 = (unsigned int *)(v8 + 5 * v68);
                v74 = *v73;
                if (v71 >= *v73)
                {
                  v75 = *((_BYTE *)v73 + 4);
                  do
                  {
                    v76 = v73;
                    v73 = v70;
                    v77 = *v70;
                    result = *((unsigned __int8 *)v73 + 4);
                    *((_BYTE *)v76 + 4) = result;
                    *v76 = v77;
                    if (v66 < v69)
                      break;
                    v78 = (2 * v69) | 1;
                    v70 = (unsigned int *)(v8 + 5 * v78);
                    v69 = 2 * v69 + 2;
                    if (v69 >= (uint64_t)v10)
                    {
                      result = *v70;
                      v69 = v78;
                    }
                    else
                    {
                      LODWORD(result) = *v70;
                      v79 = *(unsigned int *)((char *)v70 + 5);
                      result = *v70 <= v79 ? v79 : result;
                      if (*v70 >= v79)
                        v69 = v78;
                      else
                        v70 = (unsigned int *)((char *)v70 + 5);
                    }
                  }
                  while (result >= v74);
                  *v73 = v74;
                  *((_BYTE *)v73 + 4) = v75;
                }
              }
              v67 = v68 - 1;
            }
            while (v68);
            v80 = v9 / 5uLL;
            do
            {
              v81 = 0;
              v114 = *(_BYTE *)(v8 + 4);
              v108 = *(_DWORD *)v8;
              v82 = v8;
              do
              {
                v83 = 5 * v81 + v82 + 5;
                v84 = (2 * v81) | 1;
                v85 = 2 * v81 + 2;
                if (v85 < v80 && *(_DWORD *)v83 < *(_DWORD *)(v83 + 5))
                {
                  v83 += 5;
                  v84 = v85;
                }
                v86 = *(_DWORD *)v83;
                *(_BYTE *)(v82 + 4) = *(_BYTE *)(v83 + 4);
                *(_DWORD *)v82 = v86;
                v82 = v83;
                v81 = v84;
              }
              while (v84 <= (uint64_t)((unint64_t)(v80 - 2) >> 1));
              a2 -= 5;
              if (v83 == a2)
              {
                *(_BYTE *)(v83 + 4) = v114;
                *(_DWORD *)v83 = v108;
              }
              else
              {
                v87 = *(_DWORD *)a2;
                *(_BYTE *)(v83 + 4) = *(_BYTE *)(a2 + 4);
                *(_DWORD *)v83 = v87;
                *(_BYTE *)(a2 + 4) = v114;
                *(_DWORD *)a2 = v108;
                v88 = v83 - v8 + 5;
                if (v88 >= 6)
                {
                  v89 = (v88 / 5uLL - 2) >> 1;
                  v90 = (unsigned int *)(v8 + 5 * v89);
                  v91 = *(_DWORD *)v83;
                  if (*v90 < *(_DWORD *)v83)
                  {
                    v92 = *(_BYTE *)(v83 + 4);
                    do
                    {
                      v93 = v83;
                      v83 = (uint64_t)v90;
                      v94 = *v90;
                      *(_BYTE *)(v93 + 4) = *(_BYTE *)(v83 + 4);
                      *(_DWORD *)v93 = v94;
                      if (!v89)
                        break;
                      v95 = v89 - 1;
                      v89 = (v89 - 1) >> 1;
                      v90 = (unsigned int *)(v8 + 4 * v89 + (v95 >> 1));
                    }
                    while (*v90 < v91);
                    *(_DWORD *)v83 = v91;
                    *(_BYTE *)(v83 + 4) = v92;
                  }
                }
              }
            }
            while (v80-- > 2);
          }
          return result;
        }
        v11 = v10 >> 1;
        v12 = v8 + 5 * (v10 >> 1);
        if ((unint64_t)v9 < 0x281)
        {
          result = (uint64_t)std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,AG::Graph::index_of_input_slow(AG::Node &,AG::InputEdge::Comparator)::$_0 &,AG::InputEdge*>((unsigned int *)(v7 + 5 * (v10 >> 1)), (unsigned int *)v7, (unsigned int *)(a2 - 5));
        }
        else
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,AG::Graph::index_of_input_slow(AG::Node &,AG::InputEdge::Comparator)::$_0 &,AG::InputEdge*>((unsigned int *)v7, (unsigned int *)(v7 + 5 * (v10 >> 1)), (unsigned int *)(a2 - 5));
          v13 = 5 * v11;
          v14 = (unsigned int *)(5 * v11 + v7 - 5);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,AG::Graph::index_of_input_slow(AG::Node &,AG::InputEdge::Comparator)::$_0 &,AG::InputEdge*>((unsigned int *)(v7 + 5), v14, (unsigned int *)(a2 - 10));
          v15 = (unsigned int *)(v7 + 5 + v13);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,AG::Graph::index_of_input_slow(AG::Node &,AG::InputEdge::Comparator)::$_0 &,AG::InputEdge*>((unsigned int *)(v7 + 10), v15, (unsigned int *)(a2 - 15));
          result = (uint64_t)std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,AG::Graph::index_of_input_slow(AG::Node &,AG::InputEdge::Comparator)::$_0 &,AG::InputEdge*>(v14, (unsigned int *)v12, v15);
          v109 = *(_BYTE *)(v7 + 4);
          v103 = *(_DWORD *)v7;
          v16 = *(_BYTE *)(v12 + 4);
          *(_DWORD *)v7 = *(_DWORD *)v12;
          *(_BYTE *)(v7 + 4) = v16;
          *(_BYTE *)(v12 + 4) = v109;
          *(_DWORD *)v12 = v103;
        }
        --a3;
        v17 = *(_DWORD *)v7;
        if ((a4 & 1) == 0 && *(_DWORD *)(v7 - 5) >= v17)
        {
          if (v17 >= *(_DWORD *)(a2 - 5))
          {
            v32 = v7 + 5;
            do
            {
              v8 = v32;
              if (v32 >= a2)
                break;
              v32 += 5;
            }
            while (v17 >= *(_DWORD *)v8);
          }
          else
          {
            v8 = v7;
            do
            {
              v31 = *(_DWORD *)(v8 + 5);
              v8 += 5;
            }
            while (v17 >= v31);
          }
          v33 = a2;
          if (v8 < a2)
          {
            v33 = a2;
            do
            {
              v34 = *(_DWORD *)(v33 - 5);
              v33 -= 5;
            }
            while (v17 < v34);
          }
          v35 = *(_BYTE *)(v7 + 4);
          while (v8 < v33)
          {
            v111 = *(_BYTE *)(v8 + 4);
            v105 = *(_DWORD *)v8;
            v36 = *(_DWORD *)v33;
            *(_BYTE *)(v8 + 4) = *(_BYTE *)(v33 + 4);
            *(_DWORD *)v8 = v36;
            *(_BYTE *)(v33 + 4) = v111;
            *(_DWORD *)v33 = v105;
            do
            {
              v37 = *(_DWORD *)(v8 + 5);
              v8 += 5;
            }
            while (v17 >= v37);
            do
            {
              v38 = *(_DWORD *)(v33 - 5);
              v33 -= 5;
            }
            while (v17 < v38);
          }
          if (v8 - 5 != v7)
          {
            v39 = *(_DWORD *)(v8 - 5);
            *(_BYTE *)(v7 + 4) = *(_BYTE *)(v8 - 1);
            *(_DWORD *)v7 = v39;
          }
          a4 = 0;
          *(_DWORD *)(v8 - 5) = v17;
          *(_BYTE *)(v8 - 1) = v35;
          continue;
        }
        v18 = 0;
        v19 = *(_BYTE *)(v7 + 4);
        do
        {
          v20 = *(_DWORD *)(v7 + v18 + 5);
          v18 += 5;
        }
        while (v20 < v17);
        v21 = v7 + v18;
        v22 = a2;
        if (v18 == 5)
        {
          v22 = a2;
          do
          {
            if (v21 >= v22)
              break;
            v24 = *(_DWORD *)(v22 - 5);
            v22 -= 5;
          }
          while (v24 >= v17);
        }
        else
        {
          do
          {
            v23 = *(_DWORD *)(v22 - 5);
            v22 -= 5;
          }
          while (v23 >= v17);
        }
        v8 = v7 + v18;
        if (v21 < v22)
        {
          v25 = v22;
          do
          {
            v110 = *(_BYTE *)(v8 + 4);
            v104 = *(_DWORD *)v8;
            v26 = *(_DWORD *)v25;
            *(_BYTE *)(v8 + 4) = *(_BYTE *)(v25 + 4);
            *(_DWORD *)v8 = v26;
            *(_BYTE *)(v25 + 4) = v110;
            *(_DWORD *)v25 = v104;
            do
            {
              v27 = *(_DWORD *)(v8 + 5);
              v8 += 5;
            }
            while (v27 < v17);
            do
            {
              v28 = *(_DWORD *)(v25 - 5);
              v25 -= 5;
            }
            while (v28 >= v17);
          }
          while (v8 < v25);
        }
        if (v8 - 5 != v7)
        {
          v29 = *(_DWORD *)(v8 - 5);
          *(_BYTE *)(v7 + 4) = *(_BYTE *)(v8 - 1);
          *(_DWORD *)v7 = v29;
        }
        *(_DWORD *)(v8 - 5) = v17;
        *(_BYTE *)(v8 - 1) = v19;
        if (v21 < v22)
        {
LABEL_30:
          result = std::__introsort<std::_ClassicAlgPolicy,AG::Graph::index_of_input_slow(AG::Node &,AG::InputEdge::Comparator)::$_0 &,AG::InputEdge*,false>(v7, v8 - 5, a3, a4 & 1);
          a4 = 0;
          continue;
        }
        v30 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,AG::Graph::index_of_input_slow(AG::Node &,AG::InputEdge::Comparator)::$_0 &,AG::InputEdge*>(v7, v8 - 5);
        result = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,AG::Graph::index_of_input_slow(AG::Node &,AG::InputEdge::Comparator)::$_0 &,AG::InputEdge*>(v8, a2);
        if (!(_DWORD)result)
        {
          if (v30)
            continue;
          goto LABEL_30;
        }
        a2 = v8 - 5;
        if (!v30)
          goto LABEL_2;
        return result;
    }
  }
}

unsigned int *std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,AG::Graph::index_of_input_slow(AG::Node &,AG::InputEdge::Comparator)::$_0 &,AG::InputEdge*>(unsigned int *result, unsigned int *a2, unsigned int *a3)
{
  unsigned int v3;
  unsigned int v4;
  char v5;
  unsigned int v6;
  char v7;
  char v8;
  unsigned int v9;
  char v10;
  char v11;
  unsigned int v12;
  char v13;
  char v14;
  unsigned int v15;
  char v16;
  char v17;

  v3 = *a2;
  v4 = *a3;
  if (*a2 >= *result)
  {
    if (v4 < v3)
    {
      v8 = *((_BYTE *)a2 + 4);
      v9 = *a2;
      v10 = *((_BYTE *)a3 + 4);
      *a2 = *a3;
      *((_BYTE *)a2 + 4) = v10;
      *a3 = v9;
      *((_BYTE *)a3 + 4) = v8;
      if (*a2 < *result)
      {
        v11 = *((_BYTE *)result + 4);
        v12 = *result;
        v13 = *((_BYTE *)a2 + 4);
        *result = *a2;
        *((_BYTE *)result + 4) = v13;
        *a2 = v12;
        *((_BYTE *)a2 + 4) = v11;
      }
    }
  }
  else
  {
    if (v4 >= v3)
    {
      v14 = *((_BYTE *)result + 4);
      v15 = *result;
      v16 = *((_BYTE *)a2 + 4);
      *result = *a2;
      *((_BYTE *)result + 4) = v16;
      *a2 = v15;
      *((_BYTE *)a2 + 4) = v14;
      if (*a3 >= v15)
        return result;
      v5 = *((_BYTE *)a2 + 4);
      v6 = *a2;
      v17 = *((_BYTE *)a3 + 4);
      *a2 = *a3;
      *((_BYTE *)a2 + 4) = v17;
    }
    else
    {
      v5 = *((_BYTE *)result + 4);
      v6 = *result;
      v7 = *((_BYTE *)a3 + 4);
      *result = *a3;
      *((_BYTE *)result + 4) = v7;
    }
    *a3 = v6;
    *((_BYTE *)a3 + 4) = v5;
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,AG::Graph::index_of_input_slow(AG::Node &,AG::InputEdge::Comparator)::$_0 &,AG::InputEdge*>(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  _BOOL8 result;
  unsigned int *v6;
  char v7;
  unsigned int v8;
  char v9;
  _DWORD *v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  unsigned int v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int *v19;
  unsigned int *v20;
  unsigned int *v21;
  uint64_t v22;
  unsigned int v23;
  char v24;
  unsigned int v25;
  char v26;
  char v27;
  unsigned int v28;
  char v29;
  unsigned int v30;
  char v31;
  unsigned int v32;

  v4 = 0xCCCCCCCCCCCCCCCDLL * (a2 - a1);
  result = 1;
  switch(v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      v6 = (unsigned int *)(a2 - 5);
      if (*(_DWORD *)(a2 - 5) < *(_DWORD *)a1)
      {
        v7 = *(_BYTE *)(a1 + 4);
        v8 = *(_DWORD *)a1;
        v9 = *(_BYTE *)(a2 - 1);
        *(_DWORD *)a1 = *v6;
        *(_BYTE *)(a1 + 4) = v9;
        *v6 = v8;
        *(_BYTE *)(a2 - 1) = v7;
      }
      return result;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,AG::Graph::index_of_input_slow(AG::Node &,AG::InputEdge::Comparator)::$_0 &,AG::InputEdge*>((unsigned int *)a1, (unsigned int *)(a1 + 5), (unsigned int *)(a2 - 5));
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,AG::Graph::index_of_input_slow(AG::Node &,AG::InputEdge::Comparator)::$_0 &,AG::InputEdge*>(a1, a1 + 5, a1 + 10, a2 - 5);
      return 1;
    case 5uLL:
      v19 = (unsigned int *)(a1 + 5);
      v20 = (unsigned int *)(a1 + 10);
      v21 = (unsigned int *)(a1 + 15);
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,AG::Graph::index_of_input_slow(AG::Node &,AG::InputEdge::Comparator)::$_0 &,AG::InputEdge*>(a1, a1 + 5, a1 + 10, a1 + 15);
      v23 = *(_DWORD *)(a2 - 5);
      v22 = a2 - 5;
      if (v23 < *(_DWORD *)(a1 + 15))
      {
        v24 = *(_BYTE *)(a1 + 19);
        v25 = *v21;
        v26 = *(_BYTE *)(v22 + 4);
        *v21 = *(_DWORD *)v22;
        *(_BYTE *)(a1 + 19) = v26;
        *(_DWORD *)v22 = v25;
        *(_BYTE *)(v22 + 4) = v24;
        if (*v21 < *v20)
        {
          v27 = *(_BYTE *)(a1 + 14);
          v28 = *v20;
          *v20 = *v21;
          *(_BYTE *)(a1 + 14) = *(_BYTE *)(a1 + 19);
          *v21 = v28;
          *(_BYTE *)(a1 + 19) = v27;
          if (*v20 < *v19)
          {
            v29 = *(_BYTE *)(a1 + 9);
            v30 = *v19;
            *v19 = *v20;
            *(_BYTE *)(a1 + 9) = *(_BYTE *)(a1 + 14);
            *v20 = v30;
            *(_BYTE *)(a1 + 14) = v29;
            if (*(_DWORD *)(a1 + 5) < *(_DWORD *)a1)
            {
              v31 = *(_BYTE *)(a1 + 4);
              v32 = *(_DWORD *)a1;
              *(_DWORD *)a1 = *v19;
              *(_BYTE *)(a1 + 4) = *(_BYTE *)(a1 + 9);
              *v19 = v32;
              *(_BYTE *)(a1 + 9) = v31;
            }
          }
        }
      }
      return 1;
    default:
      v10 = (_DWORD *)(a1 + 10);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,AG::Graph::index_of_input_slow(AG::Node &,AG::InputEdge::Comparator)::$_0 &,AG::InputEdge*>((unsigned int *)a1, (unsigned int *)(a1 + 5), (unsigned int *)(a1 + 10));
      v11 = a1 + 15;
      if (a1 + 15 == a2)
        return 1;
      v12 = 0;
      v13 = 0;
      break;
  }
  while (1)
  {
    v14 = *(_DWORD *)v11;
    if (*(_DWORD *)v11 < *v10)
    {
      v15 = *(_BYTE *)(v11 + 4);
      v16 = v12;
      while (1)
      {
        v17 = a1 + v16;
        *(_DWORD *)(v17 + 15) = *(_DWORD *)(a1 + v16 + 10);
        *(_BYTE *)(v17 + 19) = *(_BYTE *)(a1 + v16 + 14);
        if (v16 == -10)
          break;
        v16 -= 5;
        if (v14 >= *(_DWORD *)(v17 + 5))
        {
          v18 = a1 + v16 + 15;
          goto LABEL_13;
        }
      }
      v18 = a1;
LABEL_13:
      *(_DWORD *)v18 = v14;
      *(_BYTE *)(v18 + 4) = v15;
      if (++v13 == 8)
        return v11 + 5 == a2;
    }
    v10 = (_DWORD *)v11;
    v12 += 5;
    v11 += 5;
    if (v11 == a2)
      return 1;
  }
}

unsigned int *std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,AG::Graph::index_of_input_slow(AG::Node &,AG::InputEdge::Comparator)::$_0 &,AG::InputEdge*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unsigned int *result;
  char v9;
  unsigned int v10;
  char v11;
  char v12;
  unsigned int v13;
  char v14;
  char v15;
  unsigned int v16;
  char v17;

  result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,AG::Graph::index_of_input_slow(AG::Node &,AG::InputEdge::Comparator)::$_0 &,AG::InputEdge*>((unsigned int *)a1, (unsigned int *)a2, (unsigned int *)a3);
  if (*(_DWORD *)a4 < *(_DWORD *)a3)
  {
    v9 = *(_BYTE *)(a3 + 4);
    v10 = *(_DWORD *)a3;
    v11 = *(_BYTE *)(a4 + 4);
    *(_DWORD *)a3 = *(_DWORD *)a4;
    *(_BYTE *)(a3 + 4) = v11;
    *(_DWORD *)a4 = v10;
    *(_BYTE *)(a4 + 4) = v9;
    if (*(_DWORD *)a3 < *(_DWORD *)a2)
    {
      v12 = *(_BYTE *)(a2 + 4);
      v13 = *(_DWORD *)a2;
      v14 = *(_BYTE *)(a3 + 4);
      *(_DWORD *)a2 = *(_DWORD *)a3;
      *(_BYTE *)(a2 + 4) = v14;
      *(_DWORD *)a3 = v13;
      *(_BYTE *)(a3 + 4) = v12;
      if (*(_DWORD *)a2 < *(_DWORD *)a1)
      {
        v15 = *(_BYTE *)(a1 + 4);
        v16 = *(_DWORD *)a1;
        v17 = *(_BYTE *)(a2 + 4);
        *(_DWORD *)a1 = *(_DWORD *)a2;
        *(_BYTE *)(a1 + 4) = v17;
        *(_DWORD *)a2 = v16;
        *(_BYTE *)(a2 + 4) = v15;
      }
    }
  }
  return result;
}

BOOL AG::Graph::KeyTable::KeyTable(util::Heap &)::{lambda(char const*,char const*)#1}::__invoke(const char *a1, const char *a2)
{
  return strcmp(a1, a2) == 0;
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,AG::Graph::TreeDataElement::sort_nodes(void)::$_0 &,std::pair<AG::data::ptr<AG::Graph::TreeElement>,AG::data::ptr<AG::Node>> *,false>(uint64_t result, unsigned int *a2, uint64_t a3, char a4)
{
  unsigned int *v7;
  unsigned int *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unsigned int *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int *v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int *v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  BOOL v26;
  uint64_t v27;
  unsigned int v28;
  unsigned int *v29;
  unsigned int *v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int v42;
  unsigned int v43;
  unsigned int v44;
  unsigned int v45;
  unsigned int v46;
  unsigned int v47;
  unsigned int v48;
  unsigned int v49;
  unsigned int v50;
  unsigned int *v51;
  BOOL v53;
  uint64_t v54;
  unsigned int *v55;
  unsigned int v56;
  unsigned int v57;
  unsigned int v58;
  unsigned int v59;
  uint64_t v60;
  char *v61;
  int v62;
  unsigned int *v63;
  int64_t v64;
  int64_t v65;
  int64_t v66;
  uint64_t v67;
  unsigned int *v68;
  unsigned int v69;
  unsigned int v70;
  unsigned int *v71;
  unsigned int v72;
  unsigned int v73;
  unsigned int v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unsigned int *v78;
  unsigned int *v79;
  uint64_t v80;
  unsigned int v81;
  unsigned int v82;
  uint64_t v83;
  unint64_t v84;
  unsigned int *v85;
  unsigned int v86;
  unsigned int v87;
  unsigned int v88;
  unsigned int *v89;
  unsigned int *v91;
  unsigned int v92;
  unsigned int v93;
  uint64_t v94;
  unsigned int *v95;
  unsigned int *v96;
  unsigned int v97;

  v7 = (unsigned int *)result;
LABEL_2:
  v8 = v7;
  while (2)
  {
    v7 = v8;
    v9 = (char *)a2 - (char *)v8;
    v10 = ((char *)a2 - (char *)v8) >> 3;
    switch(v10)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v37 = *(a2 - 2);
        v38 = *v8;
        if (v37 < *v8)
        {
          *v8 = v37;
          *(a2 - 2) = v38;
          v39 = v8[1];
          v8[1] = *(a2 - 1);
          *(a2 - 1) = v39;
        }
        return result;
      case 3uLL:
        return (uint64_t)std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,AG::Graph::TreeDataElement::sort_nodes(void)::$_0 &,std::pair<AG::data::ptr<AG::Graph::TreeElement>,AG::data::ptr<AG::Node>> *>(v8, v8 + 2, a2 - 2);
      case 4uLL:
        return (uint64_t)std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,AG::Graph::TreeDataElement::sort_nodes(void)::$_0 &,std::pair<AG::data::ptr<AG::Graph::TreeElement>,AG::data::ptr<AG::Node>> *>(v8, v8 + 2, v8 + 4, a2 - 2);
      case 5uLL:
        result = (uint64_t)std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,AG::Graph::TreeDataElement::sort_nodes(void)::$_0 &,std::pair<AG::data::ptr<AG::Graph::TreeElement>,AG::data::ptr<AG::Node>> *>(v8, v8 + 2, v8 + 4, v8 + 6);
        v40 = *(a2 - 2);
        v41 = v8[6];
        if (v40 < v41)
        {
          v8[6] = v40;
          *(a2 - 2) = v41;
          v42 = v8[7];
          v8[7] = *(a2 - 1);
          *(a2 - 1) = v42;
          v43 = v8[6];
          v44 = v8[4];
          if (v43 < v44)
          {
            v45 = v8[5];
            v46 = v8[7];
            v8[4] = v43;
            v8[5] = v46;
            v8[6] = v44;
            v8[7] = v45;
            v47 = v8[2];
            if (v43 < v47)
            {
              v48 = v8[3];
              v8[2] = v43;
              v8[3] = v46;
              v8[4] = v47;
              v8[5] = v48;
              v49 = *v8;
              if (v43 < *v8)
              {
                v50 = v8[1];
                *v8 = v43;
                v8[1] = v46;
                v8[2] = v49;
                v8[3] = v50;
              }
            }
          }
        }
        return result;
      default:
        if (v9 <= 191)
        {
          v51 = v8 + 2;
          v53 = v8 == a2 || v51 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v53)
            {
              v54 = 0;
              v55 = v8;
              do
              {
                v56 = v55[2];
                v57 = *v55;
                v55 = v51;
                if (v56 < v57)
                {
                  v59 = *v51;
                  v58 = v51[1];
                  v60 = v54;
                  while (1)
                  {
                    v61 = (char *)v8 + v60;
                    v62 = *(unsigned int *)((char *)v8 + v60 + 4);
                    *((_DWORD *)v61 + 2) = v57;
                    *((_DWORD *)v61 + 3) = v62;
                    if (!v60)
                      break;
                    v57 = *((_DWORD *)v61 - 2);
                    v60 -= 8;
                    if (v57 <= v59)
                    {
                      v63 = (unsigned int *)((char *)v8 + v60 + 8);
                      goto LABEL_79;
                    }
                  }
                  v63 = v8;
LABEL_79:
                  *v63 = v59;
                  v63[1] = v58;
                }
                v51 = v55 + 2;
                v54 += 8;
              }
              while (v55 + 2 != a2);
            }
          }
          else if (!v53)
          {
            v91 = v8 + 3;
            do
            {
              v92 = v7[2];
              v93 = *v7;
              v7 = v51;
              if (v92 < v93)
              {
                v94 = *(_QWORD *)v51;
                v95 = v91;
                do
                {
                  v96 = v95;
                  *(v95 - 1) = v93;
                  v97 = *(v95 - 2);
                  v95 -= 2;
                  *v96 = v97;
                  v93 = *(v96 - 5);
                }
                while (v93 > v94);
                *(_QWORD *)(v95 - 1) = v94;
              }
              v51 = v7 + 2;
              v91 += 2;
            }
            while (v7 + 2 != a2);
          }
          return result;
        }
        if (!a3)
        {
          if (v8 != a2)
          {
            v64 = (v10 - 2) >> 1;
            v65 = v64;
            do
            {
              v66 = v65;
              if (v64 >= v65)
              {
                v67 = (2 * v65) | 1;
                v68 = &v8[2 * v67];
                if (2 * v66 + 2 >= (uint64_t)v10)
                {
                  v69 = *v68;
                }
                else
                {
                  v69 = *v68;
                  v70 = v68[2];
                  if (*v68 <= v70)
                    v69 = v68[2];
                  if (*v68 < v70)
                  {
                    v68 += 2;
                    v67 = 2 * v66 + 2;
                  }
                }
                v71 = &v8[2 * v66];
                if (v69 >= *v71)
                {
                  v72 = *v71;
                  v73 = v71[1];
                  do
                  {
                    result = (uint64_t)v71;
                    v71 = v68;
                    *(_DWORD *)result = v69;
                    *(_DWORD *)(result + 4) = v68[1];
                    if (v64 < v67)
                      break;
                    result = (2 * v67) | 1;
                    v68 = &v8[2 * result];
                    v67 = 2 * v67 + 2;
                    if (v67 >= (uint64_t)v10)
                    {
                      v69 = *v68;
                      v67 = result;
                    }
                    else
                    {
                      v69 = *v68;
                      v74 = v68[2];
                      if (*v68 <= v74)
                        v69 = v68[2];
                      if (*v68 >= v74)
                        v67 = result;
                      else
                        v68 += 2;
                    }
                  }
                  while (v69 >= v72);
                  *v71 = v72;
                  v71[1] = v73;
                }
              }
              v65 = v66 - 1;
            }
            while (v66);
            v75 = (unint64_t)v9 >> 3;
            do
            {
              v76 = 0;
              v77 = *(_QWORD *)v8;
              v78 = v8;
              do
              {
                v79 = &v78[2 * v76 + 2];
                v80 = (2 * v76) | 1;
                v76 = 2 * v76 + 2;
                if (v76 >= v75)
                {
                  v81 = *v79;
                  v76 = v80;
                }
                else
                {
                  v81 = *v79;
                  v82 = v79[2];
                  if (*v79 <= v82)
                    v81 = v79[2];
                  if (*v79 >= v82)
                    v76 = v80;
                  else
                    v79 += 2;
                }
                *v78 = v81;
                v78[1] = v79[1];
                v78 = v79;
              }
              while (v76 <= (uint64_t)((unint64_t)(v75 - 2) >> 1));
              if (v79 == a2 - 2)
              {
                *(_QWORD *)v79 = v77;
              }
              else
              {
                *v79 = *(a2 - 2);
                v79[1] = *(a2 - 1);
                *((_QWORD *)a2 - 1) = v77;
                v83 = (char *)v79 - (char *)v8 + 8;
                if (v83 >= 9)
                {
                  v84 = (((unint64_t)v83 >> 3) - 2) >> 1;
                  v85 = &v8[2 * v84];
                  v86 = *v85;
                  if (*v85 < *v79)
                  {
                    v87 = *v79;
                    v88 = v79[1];
                    do
                    {
                      v89 = v79;
                      v79 = v85;
                      *v89 = v86;
                      v89[1] = v85[1];
                      if (!v84)
                        break;
                      v84 = (v84 - 1) >> 1;
                      v85 = &v8[2 * v84];
                      v86 = *v85;
                    }
                    while (*v85 < v87);
                    *v79 = v87;
                    v79[1] = v88;
                  }
                }
              }
              a2 -= 2;
            }
            while (v75-- > 2);
          }
          return result;
        }
        v11 = v10 >> 1;
        v12 = &v8[2 * (v10 >> 1)];
        if ((unint64_t)v9 < 0x401)
        {
          result = (uint64_t)std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,AG::Graph::TreeDataElement::sort_nodes(void)::$_0 &,std::pair<AG::data::ptr<AG::Graph::TreeElement>,AG::data::ptr<AG::Node>> *>(&v7[2 * (v10 >> 1)], v7, a2 - 2);
        }
        else
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,AG::Graph::TreeDataElement::sort_nodes(void)::$_0 &,std::pair<AG::data::ptr<AG::Graph::TreeElement>,AG::data::ptr<AG::Node>> *>(v7, &v7[2 * (v10 >> 1)], a2 - 2);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,AG::Graph::TreeDataElement::sort_nodes(void)::$_0 &,std::pair<AG::data::ptr<AG::Graph::TreeElement>,AG::data::ptr<AG::Node>> *>(v7 + 2, v12 - 2, a2 - 4);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,AG::Graph::TreeDataElement::sort_nodes(void)::$_0 &,std::pair<AG::data::ptr<AG::Graph::TreeElement>,AG::data::ptr<AG::Node>> *>(v7 + 4, &v7[2 * v11 + 2], a2 - 6);
          result = (uint64_t)std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,AG::Graph::TreeDataElement::sort_nodes(void)::$_0 &,std::pair<AG::data::ptr<AG::Graph::TreeElement>,AG::data::ptr<AG::Node>> *>(v12 - 2, v12, &v7[2 * v11 + 2]);
          v13 = *(_QWORD *)v7;
          *(_QWORD *)v7 = *(_QWORD *)v12;
          *(_QWORD *)v12 = v13;
        }
        --a3;
        if ((a4 & 1) == 0 && *(v7 - 2) >= *v7)
        {
          v27 = *(_QWORD *)v7;
          if (*(a2 - 2) <= *(_QWORD *)v7)
          {
            v29 = v7 + 2;
            do
            {
              v8 = v29;
              if (v29 >= a2)
                break;
              v29 += 2;
            }
            while (*v8 <= v27);
          }
          else
          {
            v8 = v7;
            do
            {
              v28 = v8[2];
              v8 += 2;
            }
            while (v28 <= v27);
          }
          v30 = a2;
          if (v8 < a2)
          {
            v30 = a2;
            do
            {
              v31 = *(v30 - 2);
              v30 -= 2;
            }
            while (v31 > v27);
          }
          if (v8 < v30)
          {
            v32 = *v8;
            v33 = *v30;
            do
            {
              *v8 = v33;
              *v30 = v32;
              v34 = v8[1];
              v8[1] = v30[1];
              v30[1] = v34;
              do
              {
                v35 = v8[2];
                v8 += 2;
                v32 = v35;
              }
              while (v35 <= v27);
              do
              {
                v36 = *(v30 - 2);
                v30 -= 2;
                v33 = v36;
              }
              while (v36 > v27);
            }
            while (v8 < v30);
          }
          if (v8 - 2 != v7)
          {
            *v7 = *(v8 - 2);
            v7[1] = *(v8 - 1);
          }
          a4 = 0;
          *((_QWORD *)v8 - 1) = v27;
          continue;
        }
        v14 = 0;
        v15 = *(_QWORD *)v7;
        do
        {
          v16 = v7[v14 + 2];
          v14 += 2;
        }
        while (v16 < v15);
        v17 = &v7[v14];
        v18 = a2;
        if (v14 == 2)
        {
          v18 = a2;
          do
          {
            if (v17 >= v18)
              break;
            v20 = *(v18 - 2);
            v18 -= 2;
          }
          while (v20 >= v15);
        }
        else
        {
          do
          {
            v19 = *(v18 - 2);
            v18 -= 2;
          }
          while (v19 >= v15);
        }
        if (v17 >= v18)
        {
          v8 = &v7[v14];
        }
        else
        {
          v21 = *v18;
          v8 = &v7[v14];
          v22 = v18;
          do
          {
            *v8 = v21;
            *v22 = v16;
            v23 = v8[1];
            v8[1] = v22[1];
            v22[1] = v23;
            do
            {
              v24 = v8[2];
              v8 += 2;
              v16 = v24;
            }
            while (v24 < v15);
            do
            {
              v25 = *(v22 - 2);
              v22 -= 2;
              v21 = v25;
            }
            while (v25 >= v15);
          }
          while (v8 < v22);
        }
        if (v8 - 2 != v7)
        {
          *v7 = *(v8 - 2);
          v7[1] = *(v8 - 1);
        }
        *((_QWORD *)v8 - 1) = v15;
        if (v17 < v18)
        {
LABEL_32:
          result = std::__introsort<std::_ClassicAlgPolicy,AG::Graph::TreeDataElement::sort_nodes(void)::$_0 &,std::pair<AG::data::ptr<AG::Graph::TreeElement>,AG::data::ptr<AG::Node>> *,false>(v7, v8 - 2, a3, a4 & 1);
          a4 = 0;
          continue;
        }
        v26 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,AG::Graph::TreeDataElement::sort_nodes(void)::$_0 &,std::pair<AG::data::ptr<AG::Graph::TreeElement>,AG::data::ptr<AG::Node>> *>(v7, v8 - 2);
        result = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,AG::Graph::TreeDataElement::sort_nodes(void)::$_0 &,std::pair<AG::data::ptr<AG::Graph::TreeElement>,AG::data::ptr<AG::Node>> *>(v8, a2);
        if (!(_DWORD)result)
        {
          if (v26)
            continue;
          goto LABEL_32;
        }
        a2 = v8 - 2;
        if (!v26)
          goto LABEL_2;
        return result;
    }
  }
}

unsigned int *std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,AG::Graph::TreeDataElement::sort_nodes(void)::$_0 &,std::pair<AG::data::ptr<AG::Graph::TreeElement>,AG::data::ptr<AG::Node>> *>(unsigned int *result, unsigned int *a2, unsigned int *a3)
{
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;

  v3 = *a2;
  v4 = *result;
  v5 = *a3;
  if (*a2 < *result)
  {
    if (v5 >= v3)
    {
      *result = v3;
      *a2 = v4;
      v10 = result[1];
      result[1] = a2[1];
      a2[1] = v10;
      v11 = *a2;
      if (*a3 >= *a2)
        return result;
      *a2 = *a3;
      *a3 = v11;
      v6 = a3 + 1;
      result = a2 + 1;
    }
    else
    {
      *result++ = v5;
      *a3 = v4;
      v6 = a3 + 1;
    }
    v7 = v6;
    goto LABEL_10;
  }
  if (v5 < v3)
  {
    *a2 = v5;
    *a3 = v3;
    v7 = a2 + 1;
    v8 = a2[1];
    a2[1] = a3[1];
    a3[1] = v8;
    v9 = *result;
    if (*a2 < *result)
    {
      *result++ = *a2;
      *a2 = v9;
LABEL_10:
      v12 = *result;
      *result = *v7;
      *v7 = v12;
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,AG::Graph::TreeDataElement::sort_nodes(void)::$_0 &,std::pair<AG::data::ptr<AG::Graph::TreeElement>,AG::data::ptr<AG::Node>> *>(unsigned int *a1, unsigned int *a2)
{
  uint64_t v4;
  _BOOL8 result;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int *v9;
  unsigned int *v10;
  uint64_t v11;
  int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  _DWORD *v17;
  int v18;
  unsigned int *v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;

  v4 = ((char *)a2 - (char *)a1) >> 3;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = *(a2 - 2);
      v7 = *a1;
      if (v6 < *a1)
      {
        *a1 = v6;
        *(a2 - 2) = v7;
        v8 = a1[1];
        a1[1] = *(a2 - 1);
        *(a2 - 1) = v8;
      }
      return result;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,AG::Graph::TreeDataElement::sort_nodes(void)::$_0 &,std::pair<AG::data::ptr<AG::Graph::TreeElement>,AG::data::ptr<AG::Node>> *>(a1, a1 + 2, a2 - 2);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,AG::Graph::TreeDataElement::sort_nodes(void)::$_0 &,std::pair<AG::data::ptr<AG::Graph::TreeElement>,AG::data::ptr<AG::Node>> *>(a1, a1 + 2, a1 + 4, a2 - 2);
      return 1;
    case 5:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,AG::Graph::TreeDataElement::sort_nodes(void)::$_0 &,std::pair<AG::data::ptr<AG::Graph::TreeElement>,AG::data::ptr<AG::Node>> *>(a1, a1 + 2, a1 + 4, a1 + 6);
      v20 = *(a2 - 2);
      v21 = a1[6];
      if (v20 < v21)
      {
        a1[6] = v20;
        *(a2 - 2) = v21;
        v22 = a1[7];
        a1[7] = *(a2 - 1);
        *(a2 - 1) = v22;
        v23 = a1[6];
        v24 = a1[4];
        if (v23 < v24)
        {
          v25 = a1[5];
          v26 = a1[7];
          a1[4] = v23;
          a1[5] = v26;
          a1[6] = v24;
          a1[7] = v25;
          v27 = a1[2];
          if (v23 < v27)
          {
            v28 = a1[3];
            a1[2] = v23;
            a1[3] = v26;
            a1[4] = v27;
            a1[5] = v28;
            v29 = *a1;
            if (v23 < *a1)
            {
              v30 = a1[1];
              *a1 = v23;
              a1[1] = v26;
              a1[2] = v29;
              a1[3] = v30;
            }
          }
        }
      }
      return 1;
    default:
      v9 = a1 + 4;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,AG::Graph::TreeDataElement::sort_nodes(void)::$_0 &,std::pair<AG::data::ptr<AG::Graph::TreeElement>,AG::data::ptr<AG::Node>> *>(a1, a1 + 2, a1 + 4);
      v10 = a1 + 6;
      if (a1 + 6 == a2)
        return 1;
      v11 = 0;
      v12 = 0;
      break;
  }
  while (1)
  {
    v13 = *v9;
    if (*v10 < *v9)
    {
      v15 = *v10;
      v14 = v10[1];
      v16 = v11;
      while (1)
      {
        v17 = (unsigned int *)((char *)a1 + v16);
        v18 = *(unsigned int *)((char *)a1 + v16 + 20);
        v17[6] = v13;
        v17[7] = v18;
        if (v16 == -16)
          break;
        v13 = v17[2];
        v16 -= 8;
        if (v13 <= v15)
        {
          v19 = (unsigned int *)((char *)a1 + v16 + 24);
          goto LABEL_13;
        }
      }
      v19 = a1;
LABEL_13:
      *v19 = v15;
      v19[1] = v14;
      if (++v12 == 8)
        return v10 + 2 == a2;
    }
    v9 = v10;
    v11 += 8;
    v10 += 2;
    if (v10 == a2)
      return 1;
  }
}

unsigned int *std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,AG::Graph::TreeDataElement::sort_nodes(void)::$_0 &,std::pair<AG::data::ptr<AG::Graph::TreeElement>,AG::data::ptr<AG::Node>> *>(unsigned int *a1, unsigned int *a2, unsigned int *a3, unsigned int *a4)
{
  unsigned int *result;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;

  result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,AG::Graph::TreeDataElement::sort_nodes(void)::$_0 &,std::pair<AG::data::ptr<AG::Graph::TreeElement>,AG::data::ptr<AG::Node>> *>(a1, a2, a3);
  v9 = *a3;
  if (*a4 < *a3)
  {
    *a3 = *a4;
    *a4 = v9;
    v10 = a3[1];
    a3[1] = a4[1];
    a4[1] = v10;
    v11 = *a2;
    if (*a3 < *a2)
    {
      *a2 = *a3;
      *a3 = v11;
      v12 = a2[1];
      a2[1] = a3[1];
      a3[1] = v12;
      v13 = *a1;
      if (*a2 < *a1)
      {
        *a1 = *a2;
        *a2 = v13;
        v14 = a1[1];
        a1[1] = a2[1];
        a2[1] = v14;
      }
    }
  }
  return result;
}

uint64_t std::unique_ptr<AG::AttributeType,AG::AttributeType::deleter>::reset[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t (*v4)(void);

  result = *a1;
  *a1 = a2;
  if (result)
  {
    v4 = *(uint64_t (**)(void))(*(_QWORD *)(result + 32) + 8);
    if (v4)
      return v4();
  }
  return result;
}

uint64_t std::unique_ptr<std::unordered_map<AG::Subgraph *,AG::Graph::TreeDataElement>>::reset[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  uint64_t result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    std::__hash_table<std::__hash_value_type<AG::Subgraph *,AG::Graph::TreeDataElement>,std::__unordered_map_hasher<AG::Subgraph *,std::__hash_value_type<AG::Subgraph *,AG::Graph::TreeDataElement>,std::hash<AG::Subgraph *>,std::equal_to<AG::Subgraph *>,true>,std::__unordered_map_equal<AG::Subgraph *,std::__hash_value_type<AG::Subgraph *,AG::Graph::TreeDataElement>,std::equal_to<AG::Subgraph *>,std::hash<AG::Subgraph *>,true>,std::allocator<std::__hash_value_type<AG::Subgraph *,AG::Graph::TreeDataElement>>>::~__hash_table(result);
    JUMPOUT(0x1AF431538);
  }
  return result;
}

uint64_t std::__hash_table<std::__hash_value_type<AG::Subgraph *,AG::Graph::TreeDataElement>,std::__unordered_map_hasher<AG::Subgraph *,std::__hash_value_type<AG::Subgraph *,AG::Graph::TreeDataElement>,std::hash<AG::Subgraph *>,std::equal_to<AG::Subgraph *>,true>,std::__unordered_map_equal<AG::Subgraph *,std::__hash_value_type<AG::Subgraph *,AG::Graph::TreeDataElement>,std::equal_to<AG::Subgraph *>,std::hash<AG::Subgraph *>,true>,std::allocator<std::__hash_value_type<AG::Subgraph *,AG::Graph::TreeDataElement>>>::~__hash_table(uint64_t a1)
{
  void *v2;

  std::__hash_table<std::__hash_value_type<AG::Subgraph *,AG::Graph::TreeDataElement>,std::__unordered_map_hasher<AG::Subgraph *,std::__hash_value_type<AG::Subgraph *,AG::Graph::TreeDataElement>,std::hash<AG::Subgraph *>,std::equal_to<AG::Subgraph *>,true>,std::__unordered_map_equal<AG::Subgraph *,std::__hash_value_type<AG::Subgraph *,AG::Graph::TreeDataElement>,std::equal_to<AG::Subgraph *>,std::hash<AG::Subgraph *>,true>,std::allocator<std::__hash_value_type<AG::Subgraph *,AG::Graph::TreeDataElement>>>::__deallocate_node(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void std::__hash_table<std::__hash_value_type<AG::Subgraph *,AG::Graph::TreeDataElement>,std::__unordered_map_hasher<AG::Subgraph *,std::__hash_value_type<AG::Subgraph *,AG::Graph::TreeDataElement>,std::hash<AG::Subgraph *>,std::equal_to<AG::Subgraph *>,true>,std::__unordered_map_equal<AG::Subgraph *,std::__hash_value_type<AG::Subgraph *,AG::Graph::TreeDataElement>,std::equal_to<AG::Subgraph *>,std::hash<AG::Subgraph *>,true>,std::allocator<std::__hash_value_type<AG::Subgraph *,AG::Graph::TreeDataElement>>>::__deallocate_node(int a1, _QWORD *__p)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  if (__p)
  {
    v2 = __p;
    do
    {
      v3 = (_QWORD *)*v2;
      v4 = (void *)v2[3];
      if (v4)
        free(v4);
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

unint64_t util::Table<unsigned long,AG::Graph::Context *>::for_each<AG::Graph::main_context(void)::$_0>(AG::Graph::main_context(void)::$_0 const&)const::{lambda(void const*,void const*,void const*)#1}::__invoke(unint64_t result, uint64_t a2, _QWORD **a3)
{
  unint64_t *v3;

  v3 = a3[1];
  if (*v3 > result)
  {
    *v3 = result;
    **a3 = a2;
  }
  return result;
}

void util::Table<unsigned long,AG::Graph::Context *>::for_each<AG::Graph::call_update(void)::$_0>(AG::Graph::call_update(void)::$_0 const&)const::{lambda(void const*,void const*,void const*)#1}::__invoke(int a1, AG::Graph::Context *this)
{
  AG::Graph::Context::call_update(this);
}

void util::Table<unsigned long,AG::Graph::Context *>::for_each<AG::Graph::update_deadline(void)::$_0>(AG::Graph::update_deadline(void)::$_0 const&)const::{lambda(void const*,void const*,void const*)#1}::__invoke(uint64_t a1, uint64_t a2, unint64_t **a3)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 56);
  if (v3 >= **a3)
    v3 = **a3;
  **a3 = v3;
}

void *AG::vector<AG::AttributeID,8ul,unsigned long>::reserve_slow(void *__dst, size_t a2)
{
  size_t v3;
  void *result;

  if (*((_QWORD *)__dst + 6) + (*((_QWORD *)__dst + 6) >> 1) <= a2)
    v3 = a2;
  else
    v3 = *((_QWORD *)__dst + 6) + (*((_QWORD *)__dst + 6) >> 1);
  result = AG::details::realloc_vector<unsigned long,4ul>(*((void **)__dst + 4), __dst, 8uLL, (size_t *)__dst + 6, v3);
  *((_QWORD *)__dst + 4) = result;
  return result;
}

void *AG::details::realloc_vector<unsigned long,4ul>(void *__src, void *__dst, size_t a3, size_t *a4, size_t a5)
{
  void *v7;
  size_t v8;
  size_t v9;
  void *v10;
  const char *v11;
  void *v12;

  v7 = __src;
  if (a5 <= a3)
  {
    if (__src)
    {
      v9 = a3;
      memcpy(__dst, __src, 4 * a5);
      free(v7);
      v12 = 0;
LABEL_8:
      *a4 = v9;
      return v12;
    }
  }
  else
  {
    v8 = malloc_good_size(4 * a5);
    v9 = v8 >> 2;
    if (v8 >> 2 != *a4)
    {
      v10 = malloc_type_realloc(v7, v8, 0x8734B07FuLL);
      if (!v10)
        AG::precondition_failure((AG *)"allocation failure", v11);
      v12 = v10;
      if (!v7)
        memcpy(v10, __dst, 4 * *a4);
      goto LABEL_8;
    }
  }
  return v7;
}

void std::default_delete<AG::Graph::KeyTable>::operator()[abi:ne180100](uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  unint64_t v4;
  unint64_t i;
  void *v6;

  if (a2)
  {
    util::UntypedTable::~UntypedTable((util::UntypedTable *)(a2 + 16));
    v3 = *(_QWORD **)a2;
    v4 = *(unsigned int *)(a2 + 8);
    if ((_DWORD)v4)
    {
      for (i = 0; i < v4; ++i)
      {
        v6 = (void *)v3[i];
        v3[i] = 0;
        if (v6)
        {
          free(v6);
          v4 = *(unsigned int *)(a2 + 8);
        }
      }
      v3 = *(_QWORD **)a2;
    }
    if (v3)
      free(v3);
    JUMPOUT(0x1AF431538);
  }
}

AG::DebugServer *AG::DebugServer::start(AG::DebugServer *this)
{
  AG::DebugServer *v1;
  char v2;

  v1 = (AG::DebugServer *)AG::DebugServer::_shared_server;
  if ((this & 1) != 0 && !AG::DebugServer::_shared_server)
  {
    v2 = (char)this;
    if ((os_variant_has_internal_diagnostics() & 1) != 0)
    {
      v1 = (AG::DebugServer *)operator new();
      AG::DebugServer::DebugServer(v1, v2);
      AG::DebugServer::_shared_server = (uint64_t)v1;
    }
    else
    {
      return (AG::DebugServer *)AG::DebugServer::_shared_server;
    }
  }
  return v1;
}

void sub_1AB949818(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF431538](v1, 0x10A0C40F9356B9ALL);
  _Unwind_Resume(a1);
}

uint64_t AG::DebugServer::stop(AG::DebugServer *this)
{
  uint64_t result;

  result = AG::DebugServer::_shared_server;
  if (AG::DebugServer::_shared_server)
  {
    AG::DebugServer::~DebugServer((id *)AG::DebugServer::_shared_server);
    result = MEMORY[0x1AF431538]();
    AG::DebugServer::_shared_server = 0;
  }
  return result;
}

AG::DebugServer *AG::DebugServer::DebugServer(AG::DebugServer *this, char a2)
{
  uint32_t v4;
  int v5;
  int v6;
  ifaddrs *v7;
  sockaddr *ifa_addr;
  unsigned int v9;
  const char *v10;
  NSObject *v11;
  AG *v12;
  NSObject *v13;
  int v14;
  int v15;
  socklen_t v17;
  int v18;
  uint8_t buf[4];
  ifaddrs **v20;
  __int16 v21;
  int v22;
  __int16 v23;
  int v24;
  ifaddrs *v25[4];
  sockaddr v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)this = 0xFFFFFFFFLL;
  *((_WORD *)this + 4) = 0;
  v4 = arc4random();
  *((_OWORD *)this + 1) = 0u;
  *((_DWORD *)this + 3) = v4;
  *((_OWORD *)this + 2) = 0u;
  v5 = socket(2, 1, 0);
  *(_DWORD *)this = v5;
  if (v5 < 0)
  {
    perror("AGDebugServer: socket");
    return this;
  }
  fcntl(v5, 2, 1);
  v18 = 1;
  setsockopt(*(_DWORD *)this, 0xFFFF, 4130, &v18, 4u);
  v26.sa_family = 2;
  *(_WORD *)v26.sa_data = 0;
  if ((a2 & 2) != 0)
    v6 = 0;
  else
    v6 = 16777343;
  *(_DWORD *)&v26.sa_data[2] = v6;
  if (bind(*(_DWORD *)this, &v26, 0x10u))
  {
    perror("AGDebugServer: bind");
    AG::DebugServer::shutdown(this);
    return this;
  }
  v17 = 16;
  if (getsockname(*(_DWORD *)this, &v26, &v17))
  {
    v10 = "AGDebugServer: getsockname";
LABEL_27:
    perror(v10);
    AG::DebugServer::shutdown(this);
    return this;
  }
  *((_DWORD *)this + 1) = bswap32(*(unsigned int *)&v26.sa_data[2]);
  *((_WORD *)this + 4) = bswap32(*(unsigned __int16 *)v26.sa_data) >> 16;
  if ((a2 & 2) != 0)
  {
    v25[0] = 0;
    if (!getifaddrs(v25))
    {
      if (v25[0])
      {
        v7 = v25[0];
        while (1)
        {
          ifa_addr = v7->ifa_addr;
          if (ifa_addr)
          {
            if (ifa_addr->sa_family == 2)
            {
              v9 = *(_DWORD *)&ifa_addr->sa_data[2];
              if (v9 != 16777343)
                break;
            }
          }
          v7 = v7->ifa_next;
          if (!v7)
            goto LABEL_20;
        }
        *((_DWORD *)this + 1) = bswap32(v9);
      }
LABEL_20:
      MEMORY[0x1AF43173C]();
    }
  }
  if (listen(*(_DWORD *)this, 5))
  {
    v10 = "AGDebugServer: listen";
    goto LABEL_27;
  }
  v11 = dispatch_source_create(MEMORY[0x1E0C80DB8], *(int *)this, 0, MEMORY[0x1E0C80D38]);

  *((_QWORD *)this + 2) = v11;
  dispatch_set_context(v11, this);
  dispatch_source_set_event_handler_f(*((dispatch_source_t *)this + 2), (dispatch_function_t)AG::DebugServer::accept_handler);
  dispatch_resume(*((dispatch_object_t *)this + 2));
  *(_DWORD *)&v26.sa_data[2] = bswap32(*((_DWORD *)this + 1));
  v12 = (AG *)inet_ntop(2, &v26.sa_data[2], (char *)v25, 0x20u);
  v13 = AG::misc_log(v12);
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
  {
    v14 = *((unsigned __int16 *)this + 4);
    v15 = *((_DWORD *)this + 3);
    *(_DWORD *)buf = 136315650;
    v20 = v25;
    v21 = 1024;
    v22 = v14;
    v23 = 1024;
    v24 = v15;
    _os_log_impl(&dword_1AB92D000, v13, OS_LOG_TYPE_DEFAULT, "debug server graph://%s:%d/?token=%u", buf, 0x18u);
  }
  fprintf((FILE *)*MEMORY[0x1E0C80C10], "debug server graph://%s:%d/?token=%u\n", (const char *)v25, *((unsigned __int16 *)this + 4), *((_DWORD *)this + 3));
  return this;
}

void sub_1AB949B78(_Unwind_Exception *a1)
{
  uint64_t v1;
  id *v2;

  AG::vector<std::unique_ptr<AG::DebugServer::Connection>,0ul,unsigned long>::~vector(v1 + 24);
  util::objc_ptr<NSObject  {objcproto18OS_dispatch_source}*>::~objc_ptr(v2);
  _Unwind_Resume(a1);
}

uint64_t AG::DebugServer::shutdown(AG::DebugServer *this)
{
  NSObject *v2;
  uint64_t result;

  v2 = *((_QWORD *)this + 2);
  if (v2)
  {
    dispatch_source_set_event_handler_f(v2, 0);
    dispatch_set_context(*((dispatch_object_t *)this + 2), 0);

    *((_QWORD *)this + 2) = 0;
  }
  result = *(unsigned int *)this;
  if ((result & 0x80000000) == 0)
  {
    result = close(result);
    *(_DWORD *)this = -1;
  }
  return result;
}

void AG::DebugServer::accept_handler(AG::DebugServer *this, void *a2)
{
  int v3;
  AG::DebugServer::Connection *v4;
  uint64_t v5;
  unint64_t v6;
  socklen_t v7;
  sockaddr v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v7 = 16;
  v3 = accept(*(_DWORD *)this, &v8, &v7);
  if (v3 < 0)
  {
    perror("AGDebugServer: accept");
  }
  else
  {
    fcntl(*(_DWORD *)this, 2, 1);
    v4 = (AG::DebugServer::Connection *)operator new();
    AG::DebugServer::Connection::Connection(v4, this, v3);
    v5 = *((_QWORD *)this + 4);
    v6 = v5 + 1;
    if (*((_QWORD *)this + 5) < (unint64_t)(v5 + 1))
    {
      AG::vector<std::unique_ptr<char const,util::free_deleter>,0ul,unsigned long>::reserve_slow((uint64_t)this + 24, v6);
      v5 = *((_QWORD *)this + 4);
      v6 = v5 + 1;
    }
    *(_QWORD *)(*((_QWORD *)this + 3) + 8 * v5) = v4;
    *((_QWORD *)this + 4) = v6;
  }
}

void sub_1AB949CF8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF431538](v1, 0x10A0C408A00E5F2);
  _Unwind_Resume(a1);
}

uint64_t AG::vector<std::unique_ptr<AG::DebugServer::Connection>,0ul,unsigned long>::~vector(uint64_t a1)
{
  AG::DebugServer::Connection **v2;
  unint64_t v3;

  v2 = *(AG::DebugServer::Connection ***)a1;
  if (*(_QWORD *)(a1 + 8))
  {
    v3 = 0;
    do
    {
      std::unique_ptr<AG::DebugServer::Connection>::reset[abi:ne180100](v2, 0);
      ++v3;
      ++v2;
    }
    while (v3 < *(_QWORD *)(a1 + 8));
    v2 = *(AG::DebugServer::Connection ***)a1;
  }
  if (v2)
    free(v2);
  return a1;
}

id *util::objc_ptr<NSObject  {objcproto18OS_dispatch_source}*>::~objc_ptr(id *a1)
{

  return a1;
}

void AG::DebugServer::~DebugServer(id *this)
{
  AG::DebugServer::Connection **v2;
  unint64_t v3;

  AG::DebugServer::shutdown((AG::DebugServer *)this);
  v2 = (AG::DebugServer::Connection **)this[3];
  if (this[4])
  {
    v3 = 0;
    do
    {
      std::unique_ptr<AG::DebugServer::Connection>::reset[abi:ne180100](v2, 0);
      ++v3;
      ++v2;
    }
    while (v3 < (unint64_t)this[4]);
    v2 = (AG::DebugServer::Connection **)this[3];
  }
  if (v2)
    free(v2);

}

CFURLRef AG::DebugServer::copy_url(AG::DebugServer *this)
{
  CFIndex v2;
  unsigned int v4;
  char __s[256];
  char v6[32];
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  if ((*(_DWORD *)this & 0x80000000) != 0)
    return 0;
  v4 = bswap32(*((_DWORD *)this + 1));
  inet_ntop(2, &v4, v6, 0x20u);
  snprintf_l(__s, 0x100uLL, 0, "graph://%s:%d/?token=%u", v6, *((unsigned __int16 *)this + 4), *((_DWORD *)this + 3));
  v2 = strlen(__s);
  return CFURLCreateWithBytes(0, (const UInt8 *)__s, v2, 0x8000100u, 0);
}

void AG::DebugServer::run(AG::DebugServer *this, int a2)
{
  char v3;
  __darwin_time_t v4;
  int v5;
  int v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  int v13;
  void *v14;
  uint64_t v15;
  int v16;
  int v17;
  void *v18;
  timeval v19;
  fd_set v20;

  v3 = 0;
  v4 = a2;
LABEL_2:
  while ((v3 & 1) == 0 || *((_QWORD *)this + 4))
  {
    memset(&v20, 0, sizeof(v20));
    v5 = *(_DWORD *)this;
    if (__darwin_check_fd_set_overflow(*(_DWORD *)this, &v20, 0))
      *(__int32_t *)((char *)v20.fds_bits + (((unint64_t)v5 >> 3) & 0x1FFFFFFFFFFFFFFCLL)) |= 1 << v5;
    v6 = *(_DWORD *)this;
    v7 = *((_QWORD *)this + 4);
    if (v7)
    {
      v8 = (uint64_t *)*((_QWORD *)this + 3);
      v9 = 8 * v7;
      do
      {
        v10 = *(_DWORD *)(*v8 + 8);
        if (__darwin_check_fd_set_overflow(v10, &v20, 0))
          *(__int32_t *)((char *)v20.fds_bits + (((unint64_t)v10 >> 3) & 0x1FFFFFFFFFFFFFFCLL)) |= 1 << v10;
        v11 = *v8++;
        v12 = *(_DWORD *)(v11 + 8);
        if (v6 <= v12)
          v6 = v12;
        v9 -= 8;
      }
      while (v9);
    }
    v19.tv_sec = v4;
    v19.tv_usec = 0;
    if (select(v6 + 1, 0, &v20, 0, &v19) <= 0)
    {
      if (*__error() != 35)
      {
        perror("AGDebugServer: select");
        return;
      }
    }
    else
    {
      v13 = *(_DWORD *)this;
      if (__darwin_check_fd_set_overflow(*(_DWORD *)this, &v20, 0)
        && ((*(unsigned int *)((char *)v20.fds_bits + (((unint64_t)v13 >> 3) & 0x1FFFFFFFFFFFFFFCLL)) >> v13) & 1) != 0)
      {
        AG::DebugServer::accept_handler(this, v14);
        v3 = 1;
      }
      if (*((_QWORD *)this + 4))
      {
        v15 = 0;
        do
        {
          while (1)
          {
            v16 = *(_DWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8 * v15) + 8);
            if (__darwin_check_fd_set_overflow(v16, &v20, 0))
            {
              if (((*(unsigned int *)((char *)v20.fds_bits + (((unint64_t)v16 >> 3) & 0x1FFFFFFFFFFFFFFCLL)) >> v16) & 1) != 0)
                break;
            }
            if ((unint64_t)++v15 >= *((_QWORD *)this + 4))
              goto LABEL_2;
          }
          v17 = *(_DWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8 * v15) + 8);
          if (__darwin_check_fd_set_overflow(v17, &v20, 0))
            *(__int32_t *)((char *)v20.fds_bits + (((unint64_t)v17 >> 3) & 0x1FFFFFFFFFFFFFFCLL)) &= ~(1 << v17);
          AG::DebugServer::Connection::handler(*(AG::DebugServer::Connection **)(*((_QWORD *)this + 3) + 8 * v15), v18);
          v15 = 0;
        }
        while (*((_QWORD *)this + 4));
      }
    }
  }
}

void AG::DebugServer::Connection::handler(AG::DebugServer::Connection *this, void *a2)
{
  unsigned int *v2;
  CFIndex v3;
  const __CFData *Mutable;
  __CFData *v5;
  AG::_anonymous_namespace_ *v6;
  UInt8 *MutableBytePtr;
  const __CFData *v8;
  unint64_t Length;
  AG::_anonymous_namespace_ *v10;
  const UInt8 *BytePtr;
  CFDataRef theData[2];
  int v13;
  unsigned int capacity;
  int capacity_4;

  v2 = (unsigned int *)this;
  capacity_4 = 0;
  if (v13 != *(_DWORD *)(*(_QWORD *)v2 + 12))
    goto LABEL_12;
  v3 = capacity;
  Mutable = CFDataCreateMutable(0, capacity);
  v5 = Mutable;
  theData[1] = Mutable;
  if (!Mutable)
    goto LABEL_12;
  CFDataSetLength(Mutable, v3);
  v6 = (AG::_anonymous_namespace_ *)v2[2];
  MutableBytePtr = CFDataGetMutableBytePtr(v5);
  {
    AG::DebugServer::receive((uint64_t)v5, theData);
    v8 = theData[0];
    if (theData[0])
    {
      Length = CFDataGetLength(theData[0]);
      capacity = Length;
      if (!HIDWORD(Length)
      {
        v10 = (AG::_anonymous_namespace_ *)v2[2];
        BytePtr = CFDataGetBytePtr(v8);
          v2 = 0;
      }
      CFRelease(v8);
    }
  }
  CFRelease(v5);
  if (v2)
LABEL_12:
    AG::DebugServer::close_connection(*(AG::DebugServer::Connection **)v2, (AG::DebugServer::Connection *)v2);
}

void sub_1AB94A270(_Unwind_Exception *a1, uint64_t a2, ...)
{
  AG::DebugServer::Connection **v2;
  va_list va;

  va_start(va, a2);
  util::cf_ptr<__CFData *>::~cf_ptr((const void **)va);
  AG::DebugServer::close_connection(*v2, (AG::DebugServer::Connection *)v2);
  _Unwind_Resume(a1);
}

AG::DebugServer::Connection *AG::DebugServer::close_connection(AG::DebugServer::Connection *this, AG::DebugServer::Connection *a2)
{
  uint64_t v2;
  AG::DebugServer::Connection **v3;
  uint64_t v4;
  AG::DebugServer::Connection **i;
  uint64_t v6;

  v2 = *((_QWORD *)this + 4);
  if (v2)
  {
    v3 = (AG::DebugServer::Connection **)*((_QWORD *)this + 3);
    v4 = *((_QWORD *)this + 4);
    for (i = v3; *i != a2; ++i)
    {
      if (!--v4)
        return this;
    }
    v6 = v2 - 1;
    *i = v3[v6];
    v3[v6] = a2;
    *((_QWORD *)this + 4) = v6;
    return std::unique_ptr<AG::DebugServer::Connection>::reset[abi:ne180100]((AG::DebugServer::Connection **)(*((_QWORD *)this + 3) + 8 * v6), 0);
  }
  return this;
}

void AG::DebugServer::receive(uint64_t a1@<X3>, _QWORD *a2@<X8>)
{
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  NSDictionary *v8;
  NSDictionary *v9;
  id v10;
  const void *v11;
  const void *v12;
  void *v13;
  uint64_t v14;
  AG::Graph *v15;
  AG::Graph *v16;
  void *v17;
  AG::Graph *v18;
  const char *v19;
  void *v20;
  int v21;
  AG::Graph *v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t i;
  void *v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  const char **v31;
  uint64_t v32;
  AG::Graph *v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  void *v38;
  unint64_t v39;
  unint64_t v40;
  _BYTE v41[128];
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  v4 = (void *)MEMORY[0x1AF4318C8]();
  v5 = objc_msgSend(MEMORY[0x1E0CB36D8], "JSONObjectWithData:options:error:", a1, 0, 0);
  if (!v5)
    goto LABEL_14;
  v6 = (void *)v5;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
    goto LABEL_14;
  v7 = (void *)objc_msgSend(v6, "objectForKeyedSubscript:", CFSTR("command"));
  if (!objc_msgSend(v7, "isEqual:", CFSTR("graph/description")))
  {
    if (objc_msgSend(v7, "isEqual:", CFSTR("profiler/start")))
    {
      v13 = (void *)objc_msgSend(v6, "objectForKeyedSubscript:", CFSTR("flags"));
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) != 0)
        v14 = objc_msgSend(v13, "unsignedIntValue") | 1;
      else
        v14 = 1;
      AG::Graph::all_start_profiling((AG::Graph *)v14);
    }
    else
    {
      v15 = (AG::Graph *)objc_msgSend(v7, "isEqual:", CFSTR("profiler/stop"));
      if ((_DWORD)v15)
      {
        AG::Graph::all_stop_profiling(v15);
      }
      else
      {
        v16 = (AG::Graph *)objc_msgSend(v7, "isEqual:", CFSTR("profiler/reset"));
        if ((_DWORD)v16)
        {
          AG::Graph::all_reset_profile(v16);
        }
        else if (objc_msgSend(v7, "isEqual:", CFSTR("profiler/mark")))
        {
          v17 = (void *)objc_msgSend(v6, "objectForKeyedSubscript:", CFSTR("name"));
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) != 0)
          {
            v18 = (AG::Graph *)objc_msgSend(v17, "UTF8String");
            AG::Graph::all_mark_profile(v18, v19);
          }
        }
        else if (objc_msgSend(v7, "isEqual:", CFSTR("tracing/start")))
        {
          v20 = (void *)objc_msgSend(v6, "objectForKeyedSubscript:", CFSTR("flags"));
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) != 0)
            v21 = objc_msgSend(v20, "unsignedIntValue") | 1;
          else
            v21 = 1;
          v38 = 0;
          v39 = 0;
          v40 = 0;
          v23 = (void *)objc_msgSend(v6, "objectForKeyedSubscript:", CFSTR("subsystems"));
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) != 0
            && (v36 = 0u,
                v37 = 0u,
                v34 = 0u,
                v35 = 0u,
                (v24 = objc_msgSend(v23, "countByEnumeratingWithState:objects:count:", &v34, v41, 16)) != 0))
          {
            v25 = *(_QWORD *)v35;
            do
            {
              for (i = 0; i != v24; ++i)
              {
                if (*(_QWORD *)v35 != v25)
                  objc_enumerationMutation(v23);
                v27 = *(void **)(*((_QWORD *)&v34 + 1) + 8 * i);
                objc_opt_class();
                if ((objc_opt_isKindOfClass() & 1) != 0)
                {
                  v28 = objc_msgSend(v27, "UTF8String");
                  v29 = v39;
                  v30 = v39 + 1;
                  if (v40 < v39 + 1)
                  {
                    AG::vector<std::unique_ptr<char const,util::free_deleter>,0ul,unsigned long>::reserve_slow((uint64_t)&v38, v30);
                    v29 = v39;
                    v30 = v39 + 1;
                  }
                  *((_QWORD *)v38 + v29) = v28;
                  v39 = v30;
                }
              }
              v24 = objc_msgSend(v23, "countByEnumeratingWithState:objects:count:", &v34, v41, 16);
            }
            while (v24);
            v31 = (const char **)v38;
            v32 = v39;
          }
          else
          {
            v32 = 0;
            v31 = 0;
          }
          AG::Graph::all_start_tracing(v21, v31, v32);
          if (v38)
            free(v38);
        }
        else
        {
          v22 = (AG::Graph *)objc_msgSend(v7, "isEqual:", CFSTR("tracing/stop"));
          if ((_DWORD)v22)
          {
            AG::Graph::all_stop_tracing(v22);
          }
          else
          {
            v33 = (AG::Graph *)objc_msgSend(v7, "isEqual:", CFSTR("tracing/sync"));
            if ((_DWORD)v33)
              AG::Graph::all_sync_tracing(v33);
          }
        }
      }
    }
    goto LABEL_14;
  }
  v8 = (NSDictionary *)objc_msgSend(MEMORY[0x1E0C99E08], "dictionaryWithDictionary:", v6);
  -[NSDictionary setObject:forKeyedSubscript:](v8, "setObject:forKeyedSubscript:", CFSTR("graph/dict"), CFSTR("format"));
  v10 = AG::Graph::description(0, v8, v9);
  if (!v10)
  {
LABEL_14:
    v12 = 0;
    goto LABEL_15;
  }
  v11 = (const void *)objc_msgSend(MEMORY[0x1E0CB36D8], "dataWithJSONObject:options:error:", v10, 0, 0);
  v12 = v11;
  if (v11)
    CFRetain(v11);
LABEL_15:
  *a2 = v12;
  objc_autoreleasePoolPop(v4);
}

void sub_1AB94A708(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17)
{
  if (a17)
    free(a17);
  _Unwind_Resume(exception_object);
}

AG::DebugServer::Connection *AG::DebugServer::Connection::Connection(AG::DebugServer::Connection *this, AG::DebugServer *a2, int a3)
{
  id *v4;
  NSObject *v5;

  *(_QWORD *)this = a2;
  *((_DWORD *)this + 2) = a3;
  *((_QWORD *)this + 2) = 0;
  v4 = (id *)((char *)this + 16);
  v5 = dispatch_source_create(MEMORY[0x1E0C80DB8], a3, 0, MEMORY[0x1E0C80D38]);

  *((_QWORD *)this + 2) = v5;
  dispatch_set_context(v5, this);
  dispatch_source_set_event_handler_f(*((dispatch_source_t *)this + 2), (dispatch_function_t)AG::DebugServer::Connection::handler);
  dispatch_resume(*((dispatch_object_t *)this + 2));
  return this;
}

void sub_1AB94A7C4(_Unwind_Exception *a1)
{
  id *v1;

  util::objc_ptr<NSObject  {objcproto18OS_dispatch_source}*>::~objc_ptr(v1);
  _Unwind_Resume(a1);
}

void AG::DebugServer::Connection::~Connection(AG::DebugServer::Connection *this)
{
  dispatch_source_set_event_handler_f(*((dispatch_source_t *)this + 2), 0);
  dispatch_set_context(*((dispatch_object_t *)this + 2), 0);
  close(*((_DWORD *)this + 2));

}

BOOL AG::`anonymous namespace'::blocking_read(AG::_anonymous_namespace_ *this, uint64_t a2, unint64_t a3)
{
  int v5;
  unint64_t v6;
  ssize_t v7;
  _BOOL8 v8;

  if (!a3)
    return 1;
  v5 = (int)this;
  v6 = 0;
  do
  {
    v7 = read(v5, (void *)(a2 + v6), a3 - v6);
    v8 = v7 != 0;
    if (!v7)
      break;
    if (v7 < 1)
    {
      if (*__error() != 4)
      {
        if (*__error() == 35 || *__error() == 35)
        perror("AGDebugServer: read");
        return 0;
      }
    }
    else
    {
      v6 += v7;
    }
  }
  while (v6 < a3);
  return v8;
}

BOOL AG::`anonymous namespace'::blocking_write(AG::_anonymous_namespace_ *this, uint64_t a2, unint64_t a3)
{
  int v5;
  unint64_t v6;
  ssize_t v7;
  _BOOL8 v8;

  if (!a3)
    return 1;
  v5 = (int)this;
  v6 = 0;
  do
  {
    v7 = write(v5, (const void *)(a2 + v6), a3 - v6);
    v8 = v7 != 0;
    if (!v7)
      break;
    if (v7 < 1)
    {
      if (*__error() != 4)
      {
        if (*__error() == 35 || *__error() == 35)
        perror("AGDebugServer: write");
        return 0;
      }
    }
    else
    {
      v6 += v7;
    }
  }
  while (v6 < a3);
  return v8;
}

const void **util::cf_ptr<__CFData const*>::~cf_ptr(const void **a1)
{
  const void *v2;

  v2 = *a1;
  if (v2)
    CFRelease(v2);
  return a1;
}

const void **util::cf_ptr<__CFData *>::~cf_ptr(const void **a1)
{
  const void *v2;

  v2 = *a1;
  if (v2)
    CFRelease(v2);
  return a1;
}

AG::DebugServer::Connection *std::unique_ptr<AG::DebugServer::Connection>::reset[abi:ne180100](AG::DebugServer::Connection **a1, AG::DebugServer::Connection *a2)
{
  AG::DebugServer::Connection *result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    AG::DebugServer::Connection::~Connection(result);
    JUMPOUT(0x1AF431538);
  }
  return result;
}

__n128 AG::Encoder::Encoder(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __n128 result;

  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = a3;
  *(_BYTE *)(a1 + 16) = 0;
  result = 0uLL;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  if (!a2)
  {
    if (a3)
      AG::precondition_failure((AG *)"need a delegate if flush interval is non-zero", 0);
  }
  return result;
}

void sub_1AB94AAA8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *(void **)(v1 + 48);
  if (v4)
    free(v4);
  if (*v2)
    free(*v2);
  _Unwind_Resume(exception_object);
}

uint64_t *AG::Encoder::flush(uint64_t *this)
{
  uint64_t *v1;

  if (this[4])
  {
    v1 = this;
    this = (uint64_t *)*this;
    if (this)
    {
      this = (uint64_t *)(*(uint64_t (**)(uint64_t *, uint64_t *))*this)(this, v1);
      v1[4] = 0;
    }
  }
  return this;
}

_QWORD *AG::Encoder::encode_varint(_QWORD *this, unint64_t a2)
{
  unint64_t v2;
  _QWORD *v3;
  unint64_t v4;
  unsigned __int8 v5;
  uint64_t v6;
  size_t v7;
  _BYTE *v8;
  BOOL v9;
  char v10;
  char v11;

  v2 = a2;
  v3 = this;
  if (a2 > 0x7F)
  {
    v5 = 70 - __clz(a2);
    v6 = (((v5 - ((unsigned __int16)(37 * v5) >> 8)) >> 1) + ((37 * v5) >> 8)) >> 2;
    v4 = this[4];
  }
  else
  {
    v4 = this[4];
    if (this[5] > v4)
    {
      *(_BYTE *)(this[3] + v4) = a2;
      ++this[4];
      return this;
    }
    v6 = 1;
  }
  v7 = v4 + v6;
  if (v4 < v4 + v6 && this[5] < v7)
    this = AG::vector<unsigned char,0ul,unsigned long>::reserve_slow((uint64_t)(this + 3), v7);
  v3[4] = v7;
  v8 = (_BYTE *)(v3[3] + v4);
  do
  {
    v9 = v2 > 0x7F;
    v10 = v2 > 0x7F;
    v11 = v2 & 0x7F;
    v2 >>= 7;
    *v8++ = v11 | (v10 << 7);
  }
  while (v9);
  return this;
}

_QWORD *AG::Encoder::encode_fixed64(_QWORD *this, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;

  v3 = (uint64_t)this;
  v4 = this[4];
  v5 = v4 + 8;
  if (v4 <= 0xFFFFFFFFFFFFFFF7 && this[5] < v5)
    this = AG::vector<unsigned char,0ul,unsigned long>::reserve_slow((uint64_t)(this + 3), v4 + 8);
  *(_QWORD *)(v3 + 32) = v5;
  *(_QWORD *)(*(_QWORD *)(v3 + 24) + v4) = a2;
  return this;
}

_QWORD *AG::Encoder::encode_data(AG::Encoder *this, const void *a2, unint64_t a3)
{
  _QWORD *result;
  unint64_t v7;
  unint64_t v8;

  result = AG::Encoder::encode_varint(this, a3);
  if (a3)
  {
    v7 = *((_QWORD *)this + 4);
    v8 = v7 + a3;
    if (v7 < v7 + a3 && *((_QWORD *)this + 5) < v8)
      AG::vector<unsigned char,0ul,unsigned long>::reserve_slow((uint64_t)this + 24, v7 + a3);
    *((_QWORD *)this + 4) = v8;
    return memcpy((void *)(*((_QWORD *)this + 3) + v7), a2, a3);
  }
  return result;
}

_QWORD *AG::Encoder::begin_length_delimited(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  v1 = this;
  v2 = this[4];
  v3 = v2 + 1;
  if (v2 != -1 && this[5] < v3)
    this = AG::vector<unsigned char,0ul,unsigned long>::reserve_slow((uint64_t)(this + 3), v2 + 1);
  v1[4] = v3;
  v4 = v1[7];
  if (v1[8] < (unint64_t)(v4 + 1))
  {
    this = AG::vector<std::unique_ptr<char const,util::free_deleter>,0ul,unsigned long>::reserve_slow((uint64_t)(v1 + 6), v4 + 1);
    v4 = v1[7];
  }
  *(_QWORD *)(v1[6] + 8 * v4) = v2;
  ++v1[7];
  return this;
}

_QWORD *AG::Encoder::end_length_delimited(AG::Encoder *this)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *result;
  size_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  char v9;
  uint64_t v10;
  size_t v11;
  _BYTE *v12;
  BOOL v13;
  char v14;
  char v15;
  uint64_t v16;
  uint64_t v17;

  v2 = *((_QWORD *)this + 7) - 1;
  v3 = *(_QWORD *)(*((_QWORD *)this + 6) + 8 * v2);
  *((_QWORD *)this + 7) = v2;
  result = (_QWORD *)((char *)this + 24);
  v5 = *((_QWORD *)this + 4);
  v6 = v3 + 1;
  v7 = v5 - (v3 + 1);
  if (v7 > 0x7F)
  {
    v9 = __clz(v7);
    v10 = (((70 - v9 - ((unsigned __int16)(37 * (70 - v9)) >> 8)) >> 1)
         + ((37 * (70 - v9)) >> 8)) >> 2;
    v11 = v5 + v10 - 1;
    if (v5 < v11 && *((_QWORD *)this + 5) < v11)
    {
      v17 = v5 + v10 - 1;
      v16 = v10;
      AG::vector<unsigned char,0ul,unsigned long>::reserve_slow((uint64_t)result, v11);
      v10 = v16;
      v6 = v3 + 1;
      v11 = v17;
    }
    *((_QWORD *)this + 4) = v11;
    result = memmove((void *)(*((_QWORD *)this + 3) + v3 + v10), (const void *)(*((_QWORD *)this + 3) + v6), v7);
    v12 = (_BYTE *)(*((_QWORD *)this + 3) + v3);
    do
    {
      v13 = v7 > 0x7F;
      v14 = v7 > 0x7F;
      v15 = v7 & 0x7F;
      v7 >>= 7;
      *v12++ = v15 | (v14 << 7);
    }
    while (v13);
  }
  else
  {
    *(_BYTE *)(*result + v3) = v7;
  }
  if (!*((_QWORD *)this + 7))
  {
    v8 = *((_QWORD *)this + 1);
    if (v8)
    {
      if (*((_QWORD *)this + 4) >= v8)
      {
        result = *(_QWORD **)this;
        if (*(_QWORD *)this)
        {
          result = (_QWORD *)(*(uint64_t (**)(_QWORD *, AG::Encoder *))*result)(result, this);
          *((_QWORD *)this + 4) = 0;
        }
      }
    }
  }
  return result;
}

void *AG::vector<unsigned char,0ul,unsigned long>::reserve_slow(uint64_t a1, size_t a2)
{
  size_t v3;
  void *result;

  if (*(_QWORD *)(a1 + 16) + (*(_QWORD *)(a1 + 16) >> 1) <= a2)
    v3 = a2;
  else
    v3 = *(_QWORD *)(a1 + 16) + (*(_QWORD *)(a1 + 16) >> 1);
  result = AG::details::realloc_vector<unsigned long,1ul>(*(void **)a1, (size_t *)(a1 + 16), v3);
  *(_QWORD *)a1 = result;
  return result;
}

void *AG::details::realloc_vector<unsigned long,1ul>(void *a1, size_t *a2, size_t size)
{
  void *v4;
  size_t v5;
  size_t v6;
  void *v7;
  const char *v8;

  v4 = a1;
  if (size)
  {
    v5 = malloc_good_size(size);
    if (v5 != *a2)
    {
      v6 = v5;
      v7 = malloc_type_realloc(v4, v5, 0xF3138078uLL);
      if (!v7)
        AG::precondition_failure((AG *)"allocation failure", v8);
      v4 = v7;
      *a2 = v6;
    }
  }
  else
  {
    *a2 = 0;
    free(a1);
    return 0;
  }
  return v4;
}

size_t AG::Subgraph::print(AG::Subgraph *this, uint64_t a2)
{
  size_t v3;
  uint64_t v4;
  char *v5;
  size_t v6;
  FILE **v7;
  unsigned int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  unsigned int v14;
  int v15;
  uint64_t v16;
  int v17;
  const char *v18;
  size_t result;
  uint64_t v20;
  uint64_t *v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD v25[2];

  v25[1] = *MEMORY[0x1E0C80C00];
  v25[0] = a2;
  v3 = 2 * (int)a2;
  MEMORY[0x1E0C80A78](this);
  v5 = (char *)v25 - v4;
  bzero((char *)v25 - v4, v6);
  memset(v5, 32, v3);
  v5[v3] = 0;
  v7 = (FILE **)MEMORY[0x1E0C80C10];
  fprintf((FILE *)*MEMORY[0x1E0C80C10], "%s+ %p: %u in %lu [", v5, this, *((_DWORD *)this + 6) & 0x7FFFFFFF, *((_QWORD *)this + 6));
  v8 = *((_DWORD *)this + 4);
  if (v8)
  {
    v9 = 1;
    v10 = AG::data::_shared_table_bytes;
    do
    {
      v11 = v8;
      v12 = v10 + v8;
      v13 = *(unsigned __int16 *)(v12 + 20);
      if (*(_WORD *)(v12 + 20))
      {
        do
        {
          while (1)
          {
            v14 = v13 + v11;
            v15 = (v13 + v11) & 3;
            if (v15)
              break;
            v16 = AG::data::_shared_table_bytes + v14;
            v13 = *(unsigned __int16 *)(v16 + 4);
            v17 = *(unsigned __int8 *)(v16 + 6);
            if (v9)
              v18 = "";
            else
              v18 = " ";
            fprintf(*v7, "%s%u", v18, v14);
            if (v17)
              fprintf(*v7, "(%u)", v17);
            v9 = 0;
            if (!v13)
              goto LABEL_17;
          }
          if (v15 == 1)
          {
            v13 = *(unsigned __int16 *)(AG::data::_shared_table_bytes + (v14 & 0xFFFFFFFC) + 14);
          }
          else if (v15 == 2)
          {
            break;
          }
        }
        while (v13);
LABEL_17:
        v10 = AG::data::_shared_table_bytes;
      }
      v8 = *(_DWORD *)(v10 + v11 + 8);
    }
    while (v8);
  }
  result = fwrite("]\n", 2uLL, 1uLL, *v7);
  v20 = *((unsigned int *)this + 18);
  if ((_DWORD)v20)
  {
    v21 = (uint64_t *)*((_QWORD *)this + 8);
    v22 = LODWORD(v25[0]) + 1;
    v23 = 8 * v20;
    do
    {
      v24 = *v21++;
      result = AG::Subgraph::print((AG::Subgraph *)(v24 & 0xFFFFFFFFFFFFFFFCLL), v22);
      v23 -= 8;
    }
    while (v23);
  }
  return result;
}

uint64_t *AG::indirect_pointer_vector<AG::Subgraph,unsigned long>::~indirect_pointer_vector(uint64_t *a1)
{
  uint64_t v2;
  unint64_t v3;
  void *v4;

  v2 = *a1;
  if ((*a1 & 1) != 0)
  {
    v3 = v2 & 0xFFFFFFFFFFFFFFFELL;
    if ((v2 & 0xFFFFFFFFFFFFFFFELL) != 0)
    {
      v4 = *(void **)(v3 + 32);
      if (v4)
        free(v4);
      MEMORY[0x1AF431538](v3, 0x1080C4034992649);
    }
  }
  return a1;
}

void AG::data::zone::~zone(AG::data::zone *this)
{
  void **v2;
  unint64_t v3;

  AG::data::zone::clear(this);
  v2 = *(void ***)this;
  if (*((_DWORD *)this + 2))
  {
    v3 = 0;
    do
    {
      std::unique_ptr<void,AG::data::table::malloc_zone_deleter>::reset[abi:ne180100](v2, 0);
      ++v3;
      ++v2;
    }
    while (v3 < *((unsigned int *)this + 2));
    v2 = *(void ***)this;
  }
  if (v2)
    free(v2);
}

void AG::Subgraph::graph_destroyed(AG::Subgraph *this)
{
  int v2;
  uint64_t v3;
  int v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;

  v2 = *((unsigned __int8 *)this + 104);
  *((_BYTE *)this + 104) = 3;
  if (!v2)
  {
    v3 = *((_QWORD *)this + 5);
    v4 = *(_DWORD *)(v3 + 232);
    if (v4)
    {
      v14 = v4 - 1;
      do
      {
        v15 = v14;
        v16 = *(_QWORD *)(*(_QWORD *)(v3 + 224) + 8 * v14);
        (*(void (**)(uint64_t, AG::Subgraph *))(*(_QWORD *)v16 + 192))(v16, this);
        --v14;
      }
      while (v15);
    }
  }
  AG::Subgraph::notify_observers((uint64_t)this);
  v5 = *((_DWORD *)this + 4);
  if (!v5)
    goto LABEL_20;
  v6 = AG::data::_shared_table_bytes;
  while (2)
  {
    v7 = v5;
    v8 = v6 + v5;
    v9 = *(unsigned __int16 *)(v8 + 20);
    if (!*(_WORD *)(v8 + 20))
      goto LABEL_19;
    do
    {
      while (1)
      {
        v10 = (v9 + v7);
        v11 = ((_BYTE)v9 + (_BYTE)v7) & 3;
        if ((((_BYTE)v9 + (_BYTE)v7) & 3) == 0)
        {
          v12 = AG::data::_shared_table_bytes + v10;
          v9 = *(unsigned __int16 *)(v12 + 4);
          goto LABEL_15;
        }
        if (v11 != 1)
        {
          if (v11 == 2)
          {
            v13 = 1;
            goto LABEL_18;
          }
          goto LABEL_12;
        }
        v9 = *(unsigned __int16 *)(AG::data::_shared_table_bytes + (v10 & 0xFFFFFFFC) + 14);
        if ((v10 & 3) == 0)
          break;
LABEL_12:
        if (!v9)
          goto LABEL_16;
      }
      v12 = AG::data::_shared_table_bytes + v10;
LABEL_15:
      AG::Node::destroy((unsigned int *)v12, *((AG::Graph **)this + 5));
    }
    while (v9);
LABEL_16:
    v13 = 0;
LABEL_18:
    v6 = AG::data::_shared_table_bytes;
    if (!v13)
    {
LABEL_19:
      v5 = *(_DWORD *)(v6 + v7 + 8);
      if (!v5)
        break;
      continue;
    }
    break;
  }
LABEL_20:
  AG::indirect_pointer_vector<AG::Subgraph,unsigned long>::clear((_QWORD *)this + 7);
  *((_DWORD *)this + 18) = 0;
  AG::data::zone::clear(this);
}

unint64_t AG::Subgraph::add_observer(AG::data::zone *this, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  _QWORD *v10;
  unint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;

  if (!*((_DWORD *)this + 20))
  {
    v6 = *((unsigned int *)this + 4);
    if ((_DWORD)v6
      && (v7 = AG::data::_shared_table_bytes,
          v8 = (*(_DWORD *)(AG::data::_shared_table_bytes + v6 + 16) + 7) & 0xFFFFFFF8,
          v8 + 24 <= *(_DWORD *)(AG::data::_shared_table_bytes + v6 + 12)))
    {
      *(_DWORD *)(AG::data::_shared_table_bytes + v6 + 16) = v8 + 24;
      v9 = v8 + v6;
    }
    else
    {
      v9 = AG::data::zone::alloc_slow(this, 0x18u, 7);
      v7 = AG::data::_shared_table_bytes;
    }
    v10 = (_QWORD *)(v7 + v9);
    *v10 = 0;
    v10[1] = 0;
    v10[2] = 0;
    *((_DWORD *)this + 20) = v9;
  }
  v11 = AGMakeUniqueID();
  v12 = (_QWORD *)(AG::data::_shared_table_bytes + *((unsigned int *)this + 20));
  swift_retain();
  v13 = v12[1];
  if (v12[2] < (unint64_t)(v13 + 1))
  {
    AG::vector<std::pair<AG::ClosureFunction<void>,unsigned long>,0ul,unsigned long>::reserve_slow((uint64_t)v12, v13 + 1);
    v13 = v12[1];
  }
  v14 = (_QWORD *)(*v12 + 24 * v13);
  *v14 = a2;
  v14[1] = a3;
  v14[2] = v11;
  ++v12[1];
  return v11;
}

__n128 AG::Subgraph::remove_observer(AG::Subgraph *this, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t i;
  __n128 *v6;
  uint64_t v7;
  __n128 result;
  unint64_t v9;

  v2 = *((unsigned int *)this + 20);
  if ((_DWORD)v2)
  {
    v3 = (_QWORD *)(AG::data::_shared_table_bytes + v2);
    v4 = *(_QWORD *)(AG::data::_shared_table_bytes + v2 + 8);
    if (v4)
    {
      for (i = 0; *(_QWORD *)(*v3 + i + 16) != a2; i += 24)
      {
        if (!--v4)
          return result;
      }
      swift_release();
      v6 = (__n128 *)(*v3 + i);
      v7 = *v3 + 24 * v3[1];
      result = *v6;
      *v6 = *(__n128 *)(v7 - 24);
      *(__n128 *)(v7 - 24) = result;
      v9 = v6[1].n128_u64[0];
      v6[1].n128_u64[0] = *(_QWORD *)(v7 - 8);
      *(_QWORD *)(v7 - 8) = v9;
      --v3[1];
    }
  }
  return result;
}

uint64_t AG::indirect_pointer_vector<AG::Subgraph,unsigned long>::resize(uint64_t result, size_t a2)
{
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;

  v3 = *(_QWORD *)result;
  if ((*(_QWORD *)result & 1) != 0)
  {
LABEL_10:
    v5 = (_QWORD *)(v3 & 0xFFFFFFFFFFFFFFFELL);
    if (*(_QWORD *)((v3 & 0xFFFFFFFFFFFFFFFELL) + 40) < a2 && v5[6] < a2)
      result = (uint64_t)AG::vector<AG::Subgraph *,4ul,unsigned long>::reserve_slow(v5, a2);
    v5[5] = a2;
    return result;
  }
  v4 = (_QWORD *)result;
  if (a2 != 1)
  {
    if (!a2)
    {
      *(_QWORD *)result = 0;
      return result;
    }
    result = operator new();
    *(_QWORD *)(result + 32) = 0;
    *(_QWORD *)(result + 40) = 0;
    *(_QWORD *)(result + 48) = 4;
    if (*v4)
    {
      *(_QWORD *)result = *v4;
      *(_QWORD *)(result + 40) = 1;
    }
    v3 = result | 1;
    *v4 = result | 1;
    goto LABEL_10;
  }
  if (!v3)
    *(_QWORD *)result = 2;
  return result;
}

uint64_t AG::Subgraph::foreach_ancestor<AG::Subgraph::propagate_flags(void)::$_0>(uint64_t result, _DWORD *a2)
{
  uint64_t i;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unsigned int v8;

  for (i = result; ; i = result)
  {
    v4 = *(_QWORD *)(i + 56);
    v5 = (v4 & 1) != 0 ? *(_QWORD *)((v4 & 0xFFFFFFFFFFFFFFFELL) + 40) : v4 != 0;
    v6 = v5 - 1;
    if (v5 - 1 < 0)
      break;
    while (1)
    {
      result = *(_QWORD *)(i + 56);
      if ((result & 1) != 0)
      {
        v7 = result & 0xFFFFFFFFFFFFFFFELL;
        if (*(_QWORD *)((result & 0xFFFFFFFFFFFFFFFELL) + 32))
          v7 = *(_QWORD *)((result & 0xFFFFFFFFFFFFFFFELL) + 32);
        result = *(_QWORD *)(v7 + 8 * v6);
      }
      v8 = *(_DWORD *)(result + 100);
      if (((~(v8 >> 8) | 0xFFFFFF00) & *a2) == 0)
        goto LABEL_13;
      *(_DWORD *)(result + 100) = v8 & 0xFFFF00FF | ((BYTE1(v8) | *a2) << 8);
      if (!v6)
        break;
      result = AG::Subgraph::foreach_ancestor<AG::Subgraph::propagate_flags(void)::$_0>();
LABEL_13:
      if (v6-- <= 0)
        return result;
    }
  }
  return result;
}

uint64_t AG::Subgraph::foreach_ancestor<AG::Subgraph::propagate_dirty_flags(void)::$_0>(uint64_t result, _DWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unsigned int v8;

LABEL_1:
  v3 = result;
  v4 = *(_QWORD *)(result + 56);
  if ((v4 & 1) != 0)
    v5 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFFFFELL) + 40);
  else
    v5 = v4 != 0;
  v6 = v5 - 1;
  if (v5 - 1 >= 0)
  {
    do
    {
      result = *(_QWORD *)(v3 + 56);
      if ((result & 1) != 0)
      {
        v7 = result & 0xFFFFFFFFFFFFFFFELL;
        if (*(_QWORD *)((result & 0xFFFFFFFFFFFFFFFELL) + 32))
          v7 = *(_QWORD *)((result & 0xFFFFFFFFFFFFFFFELL) + 32);
        result = *(_QWORD *)(v7 + 8 * v6);
      }
      v8 = *(_DWORD *)(result + 100);
      if ((*a2 & ~HIBYTE(v8)) != 0)
      {
        *(_DWORD *)(result + 100) = v8 & 0xFFFFFF | ((*a2 | HIBYTE(v8)) << 24);
        if (!v6)
          goto LABEL_1;
        result = AG::Subgraph::foreach_ancestor<AG::Subgraph::propagate_dirty_flags(void)::$_0>();
      }
    }
    while (v6-- > 0);
  }
  return result;
}

uint64_t AG::Subgraph::add_child(AG::Subgraph *this, unint64_t a2, char a3)
{
  uint64_t v3;
  uint64_t v7;
  char *v8;
  AG::Subgraph **v9;
  AG::Subgraph **v10;
  unint64_t v11;
  int v12;
  unint64_t v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  int v17;
  unsigned int v18;
  int v19;
  int v20;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  int v26;

  v3 = *(_QWORD *)(a2 + 40);
  if (v3 != *((_QWORD *)this + 5))
    AG::precondition_failure((AG *)"child subgraph must have same graph", (const char *)a2);
  v8 = (char *)(a2 + 56);
  v7 = *(_QWORD *)(a2 + 56);
  if ((v7 & 1) != 0)
  {
    v11 = v7 & 0xFFFFFFFFFFFFFFFELL;
    v10 = *(AG::Subgraph ***)(v11 + 32);
    if (!v10)
      v10 = (AG::Subgraph **)v11;
    v9 = &v10[*(_QWORD *)(v11 + 40)];
  }
  else
  {
    v9 = (AG::Subgraph **)&v8[8 * (v7 != 0)];
    v10 = (AG::Subgraph **)(a2 + 56);
  }
  while (v10 != v9)
  {
    if (*v10 == this)
      AG::precondition_failure((AG *)"child already attached to new parent", (const char *)a2);
    ++v10;
  }
  v12 = *(_DWORD *)(v3 + 232);
  if (v12)
  {
    v22 = v12 - 1;
    do
    {
      v23 = v22;
      v24 = *(_QWORD *)(*(_QWORD *)(v3 + 224) + 8 * v22);
      (*(void (**)(uint64_t, AG::Subgraph *, unint64_t))(*(_QWORD *)v24 + 208))(v24, this, a2);
      --v22;
    }
    while (v23);
  }
  v13 = a3 & 3 | a2;
  v14 = *((_DWORD *)this + 18);
  v15 = v14 + 1;
  if (*((_DWORD *)this + 19) < v14 + 1)
  {
    AG::vector<std::pair<unsigned int,BOOL>,0ul,unsigned int>::reserve_slow((uint64_t)this + 64, v15);
    v14 = *((_DWORD *)this + 18);
    v15 = v14 + 1;
  }
  *(_QWORD *)(*((_QWORD *)this + 8) + 8 * v14) = v13;
  *((_DWORD *)this + 18) = v15;
  v16 = *(_DWORD *)(a2 + 100);
  v17 = v16 | (v16 >> 8);
  v18 = *((_DWORD *)this + 25);
  if (((v16 | BYTE1(v16)) & ~(v18 >> 8)) != 0)
  {
    *((_DWORD *)this + 25) = v18 & 0xFFFF00FF | ((BYTE1(v18) | v17) << 8);
    v25 = (BYTE1(v18) | v17 | v18);
    AG::Subgraph::foreach_ancestor<AG::Subgraph::propagate_flags(void)::$_0>((uint64_t)this, &v25);
    v16 = *(_DWORD *)(a2 + 100);
    v18 = *((_DWORD *)this + 25);
  }
  v19 = BYTE2(v16) | HIBYTE(v16);
  if ((v19 & ~HIBYTE(v18)) != 0)
  {
    v20 = v19 | HIBYTE(v18);
    *((_DWORD *)this + 25) = v18 & 0xFFFFFF | (v20 << 24);
    v26 = v20 | BYTE2(v18);
    AG::Subgraph::foreach_ancestor<AG::Subgraph::propagate_dirty_flags(void)::$_0>((uint64_t)this, &v26);
  }
  return AG::indirect_pointer_vector<AG::Subgraph,unsigned long>::push_back((uint64_t)v8, (uint64_t)this);
}

uint64_t AG::Subgraph::ancestor_of(AG::Subgraph *this, const AG::Subgraph *a2)
{
  const AG::Subgraph *v4;
  void *v5;
  _QWORD *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v15[32];
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v16 = 0;
  v17 = 0;
  v18 = 32;
  while (1)
  {
    v4 = a2;
    if (a2)
      goto LABEL_8;
    v5 = v16;
    if (!v17)
      break;
    if (v16)
      v6 = v16;
    else
      v6 = v15;
    v4 = (const AG::Subgraph *)v6[--v17];
LABEL_8:
    if (v4 == this)
    {
      v13 = 1;
      v5 = v16;
      if (!v16)
        return v13;
      goto LABEL_21;
    }
    v7 = *((_QWORD *)v4 + 7);
    if ((v7 & 1) != 0)
    {
      a2 = 0;
      v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
      if (*(_QWORD *)((v7 & 0xFFFFFFFFFFFFFFFELL) + 40))
      {
        v9 = 0;
        if (*(_QWORD *)(v8 + 32))
          v8 = *(_QWORD *)(v8 + 32);
        a2 = *(const AG::Subgraph **)v8;
        v10 = 8;
        do
        {
          v11 = v7 & 0xFFFFFFFFFFFFFFFELL;
          v12 = v10 + 8;
          if ((unint64_t)++v9 >= *(_QWORD *)(v11 + 40))
            break;
          if (*(_QWORD *)(v11 + 32))
            v11 = *(_QWORD *)(v11 + 32);
          std::stack<AG::Subgraph const*,AG::vector<AG::Subgraph const*,32ul,unsigned long>>::push[abi:ne180100](v15, (_QWORD *)(v11 + v10));
          v7 = *((_QWORD *)v4 + 7);
          v10 = v12;
        }
        while ((v7 & 1) != 0);
      }
    }
    else
    {
      a2 = (const AG::Subgraph *)*((_QWORD *)v4 + 7);
    }
  }
  v13 = 0;
  if (v16)
LABEL_21:
    free(v5);
  return v13;
}

void sub_1AB94BA34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *a41)
{
  if (a41)
    free(a41);
  _Unwind_Resume(exception_object);
}

_QWORD *std::stack<AG::Subgraph const*,AG::vector<AG::Subgraph const*,32ul,unsigned long>>::push[abi:ne180100](_QWORD *__dst, _QWORD *a2)
{
  _QWORD *v3;
  uint64_t v4;
  size_t v5;
  _QWORD *v6;

  v3 = __dst;
  v4 = __dst[33];
  v5 = v4 + 1;
  if (__dst[34] < (unint64_t)(v4 + 1))
  {
    __dst = AG::vector<util::cf_ptr<AGSubgraphStorage *>,32ul,unsigned long>::reserve_slow(__dst, v5);
    v4 = v3[33];
    v5 = v4 + 1;
  }
  v6 = (_QWORD *)v3[32];
  if (!v6)
    v6 = v3;
  v6[v4] = *a2;
  v3[33] = v5;
  return __dst;
}

_QWORD *std::stack<util::cf_ptr<AGSubgraphStorage *>,AG::vector<util::cf_ptr<AGSubgraphStorage *>,32ul,unsigned long>>::emplace[abi:ne180100]<util::cf_ptr<AGSubgraphStorage *>>(_QWORD *__dst, _QWORD *a2)
{
  _QWORD *v3;
  uint64_t v4;
  size_t v5;
  _QWORD *v6;

  v3 = __dst;
  v4 = __dst[33];
  v5 = v4 + 1;
  if (__dst[34] < (unint64_t)(v4 + 1))
  {
    __dst = AG::vector<util::cf_ptr<AGSubgraphStorage *>,32ul,unsigned long>::reserve_slow(__dst, v5);
    v4 = v3[33];
    v5 = v4 + 1;
  }
  v6 = (_QWORD *)v3[32];
  if (!v6)
    v6 = v3;
  v6[v4] = *a2;
  *a2 = 0;
  v3[33] = v5;
  return __dst;
}

const void **util::cf_ptr<AGSubgraphStorage *>::~cf_ptr(const void **a1)
{
  const void *v2;

  v2 = *a1;
  if (v2)
    CFRelease(v2);
  return a1;
}

void std::stack<util::cf_ptr<AGSubgraphStorage *>,AG::vector<util::cf_ptr<AGSubgraphStorage *>,32ul,unsigned long>>::pop[abi:ne180100](uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  const void *v3;

  v1 = *(_QWORD *)(a1 + 256);
  v2 = *(_QWORD *)(a1 + 264) - 1;
  *(_QWORD *)(a1 + 264) = v2;
  if (!v1)
    v1 = a1;
  v3 = *(const void **)(v1 + 8 * v2);
  if (v3)
    CFRelease(v3);
}

_QWORD *std::stack<util::cf_ptr<AGSubgraphStorage *>,AG::vector<util::cf_ptr<AGSubgraphStorage *>,32ul,unsigned long>>::~stack(_QWORD *a1)
{
  _QWORD *v2;
  unint64_t v3;
  _QWORD *v4;
  unint64_t i;
  const void *v6;

  v2 = (_QWORD *)a1[32];
  v3 = a1[33];
  if (v2)
    v4 = v2;
  else
    v4 = a1;
  if (v3)
  {
    for (i = 0; i < v3; ++i)
    {
      v6 = (const void *)v4[i];
      if (v6)
      {
        CFRelease(v6);
        v3 = a1[33];
      }
    }
    v2 = (_QWORD *)a1[32];
  }
  if (v2)
    free(v2);
  return a1;
}

void AG::Subgraph::apply(unint64_t a1, int a2, void (*a3)(void))
{
  int v5;
  unsigned int v7;
  unsigned int v8;
  uint64_t i;
  _QWORD *v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  unsigned int v17;
  int v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  unint64_t v24;
  AG::Graph *v25;
  unint64_t v26;
  unint64_t v27;
  AG::Graph *v28;
  char v29;
  _QWORD __dst[32];
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  if (!*(_BYTE *)(a1 + 104))
  {
    v5 = a2;
    if ((a2 & (*(_DWORD *)(a1 + 100) | (*(_DWORD *)(a1 + 100) >> 8))) != 0)
    {
      v28 = *(AG::Graph **)(a1 + 40);
      v29 = *((_BYTE *)v28 + 408);
      *((_BYTE *)v28 + 408) = 1;
      do
      {
        v7 = __ldaxr((unsigned int *)&AG::Subgraph::_last_traversal_seed);
        v8 = v7 + 1;
      }
      while (__stlxr(v7 + 1, (unsigned int *)&AG::Subgraph::_last_traversal_seed));
      v31 = 0;
      v32 = 0;
      v33 = 32;
      v27 = a1;
      std::stack<AG::Subgraph const*,AG::vector<AG::Subgraph const*,32ul,unsigned long>>::push[abi:ne180100](__dst, &v27);
      v26 = a1;
      *(_DWORD *)(a1 + 84) = v8;
      for (i = v32; v32; i = v32)
      {
        while (1)
        {
          v10 = v31;
          if (!v31)
            v10 = __dst;
          v11 = v10[--i];
          v32 = i;
          if (!*(_BYTE *)(v11 + 104))
            break;
          if (!i)
            goto LABEL_39;
        }
        if ((a2 & 0x1000000) != 0 || *(_QWORD *)(v11 + 48) == *(_QWORD *)(v26 + 48))
        {
          if (!a2 || (v5 & *(_DWORD *)(v11 + 100)) != 0)
          {
            v12 = *(_DWORD *)(v11 + 16);
            if (v12)
            {
              v13 = AG::data::_shared_table_bytes;
              do
              {
                v14 = v12;
                v15 = v13 + v12;
                v16 = *(unsigned __int16 *)(v15 + 20);
                if (*(_WORD *)(v15 + 20))
                {
                  do
                  {
                    v17 = v16 + v14;
                    v18 = (v16 + v14) & 3;
                    if (v18)
                    {
                      if (v18 == 1)
                      {
                        v16 = *(unsigned __int16 *)(AG::data::_shared_table_bytes + (v17 & 0xFFFFFFFC) + 14);
                        if (a2)
                          break;
                      }
                      else if (v18 == 2)
                      {
                        break;
                      }
                    }
                    else
                    {
                      v19 = AG::data::_shared_table_bytes + v17;
                      v16 = *(unsigned __int16 *)(v19 + 4);
                      if (!a2)
                        goto LABEL_28;
                      v20 = *(unsigned __int8 *)(v19 + 6);
                      if (!v20)
                        break;
                      if ((v20 & a2) != 0)
LABEL_28:
                        a3();
                    }
                  }
                  while (v16);
                  v13 = AG::data::_shared_table_bytes;
                }
                v12 = *(_DWORD *)(v13 + v14 + 8);
              }
              while (v12);
            }
          }
          v21 = *(unsigned int *)(v11 + 72);
          if ((_DWORD)v21)
          {
            v22 = *(_QWORD **)(v11 + 64);
            v23 = 8 * v21;
            do
            {
              v24 = *v22 & 0xFFFFFFFFFFFFFFFCLL;
              v27 = v24;
              if ((v5 & (*(_DWORD *)(v24 + 100) | (*(_DWORD *)(v24 + 100) >> 8))) != 0 && *(_DWORD *)(v24 + 84) != v8)
              {
                std::stack<AG::Subgraph const*,AG::vector<AG::Subgraph const*,32ul,unsigned long>>::push[abi:ne180100](__dst, &v27);
                *(_DWORD *)(v27 + 84) = v8;
              }
              ++v22;
              v23 -= 8;
            }
            while (v23);
          }
        }
      }
LABEL_39:
      if (v31)
        free(v31);
      v25 = v28;
      if (v28)
      {
        if (!v29)
        {
          *((_BYTE *)v28 + 408) = 0;
          AG::Graph::invalidate_subgraphs(v25);
        }
      }
    }
  }
}

void sub_1AB94BE54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,void *a46)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void AG::Graph::without_invalidating::~without_invalidating(AG::Graph **this)
{
  AG::Graph *v2;

  v2 = *this;
  if (v2)
  {
    if (!*((_BYTE *)this + 8))
    {
      *((_BYTE *)v2 + 408) = 0;
      AG::Graph::invalidate_subgraphs(v2);
    }
  }
}

uint64_t AG::Subgraph::cache_fetch(AG::data::zone *this, uint64_t a2, uint64_t *a3, const void *a4, uint64_t (*a5)(_QWORD))
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int v35;
  uint64_t v37;
  unsigned int *v38;
  uint64_t v39;
  const char *v40;
  uint64_t v41;
  unsigned int v42;
  int v43;
  const void *v44;

  v10 = *((unsigned int *)this + 23);
  if (!(_DWORD)v10)
  {
    v11 = *((unsigned int *)this + 4);
    if ((_DWORD)v11
      && (v12 = AG::data::_shared_table_bytes,
          v13 = (*(_DWORD *)(AG::data::_shared_table_bytes + v11 + 16) + 7) & 0xFFFFFFF8,
          v13 + 280 <= *(_DWORD *)(AG::data::_shared_table_bytes + v11 + 12)))
    {
      *(_DWORD *)(AG::data::_shared_table_bytes + v11 + 16) = v13 + 280;
      v14 = v13 + v11;
    }
    else
    {
      v14 = AG::data::zone::alloc_slow(this, 0x118u, 7);
      v12 = AG::data::_shared_table_bytes;
    }
    v10 = v14;
    AG::Subgraph::NodeCache::NodeCache((AG::Subgraph::NodeCache *)(v12 + v14));
    *((_DWORD *)this + 23) = v14;
  }
  v15 = AG::data::_shared_table_bytes + v10;
  v16 = util::UntypedTable::lookup((util::UntypedTable *)(AG::data::_shared_table_bytes + v10 + 40), a3, 0);
  if (!v16)
  {
    v17 = AG::swift::metadata::equatable((AG::swift::metadata *)a3);
    if (!v17)
    {
      v39 = AG::swift::metadata::name((AG::swift::metadata *)a3, 0);
      AG::precondition_failure((AG *)"cache key must be equatable: %s", v40, v39);
    }
    v18 = v17;
    v19 = a5(*((_QWORD *)this + 5));
    v20 = *((unsigned int *)this + 4);
    if ((_DWORD)v20
      && (v21 = AG::data::_shared_table_bytes,
          v22 = (*(_DWORD *)(AG::data::_shared_table_bytes + v20 + 16) + 7) & 0xFFFFFFF8,
          v22 + 40 <= *(_DWORD *)(AG::data::_shared_table_bytes + v20 + 12)))
    {
      *(_DWORD *)(AG::data::_shared_table_bytes + v20 + 16) = v22 + 40;
      v16 = v22 + v20;
    }
    else
    {
      v16 = AG::data::zone::alloc_slow(this, 0x28u, 7);
      v21 = AG::data::_shared_table_bytes;
    }
    v23 = v21 + v16;
    *(_QWORD *)v23 = a3;
    *(_QWORD *)(v23 + 8) = v18;
    *(_QWORD *)(v23 + 16) = 0;
    *(_QWORD *)(v23 + 24) = 0;
    *(_DWORD *)(v23 + 32) = v19;
    util::UntypedTable::insert((util::UntypedTable *)(v15 + 40), a3, (void *)v16);
  }
  v24 = a2 << 8;
  v41 = a2 << 8;
  v42 = v16;
  v43 = 0;
  v44 = a4;
  v25 = util::UntypedTable::lookup((util::UntypedTable *)(v15 + 120), &v41, 0);
  if (v25)
  {
    v26 = v25;
    v27 = *v25;
    if (*v25)
    {
      v28 = AG::data::_shared_table_bytes + v16;
      v29 = v25[2];
      v30 = v25[3];
      if (v29)
      {
        *(_QWORD *)(v29 + 24) = v30;
        v30 = v25[3];
      }
      else
      {
        *(_QWORD *)(v28 + 24) = v30;
      }
      if (v30)
        v28 = v30;
      *(_QWORD *)(v28 + 16) = v29;
    }
  }
  else
  {
    if (!a5)
      return 0;
    v31 = AG::data::_shared_table_bytes + v16;
    v26 = *(_QWORD **)(v31 + 24);
    if (v26 && (v32 = *(unsigned __int8 *)v26, v32 >= 2))
    {
      v33 = v26[2];
      v34 = v26[3];
      if (v33)
      {
        *(_QWORD *)(v33 + 24) = v34;
        v34 = v26[3];
      }
      else
      {
        *(_QWORD *)(v31 + 24) = v34;
      }
      if (v34)
        v31 = v34;
      *(_QWORD *)(v31 + 16) = v33;
      if (v32 != 255)
        util::UntypedTable::remove_ptr((util::UntypedTable *)(v15 + 120), v26);
      v37 = *((unsigned int *)v26 + 3);
      v38 = (unsigned int *)(AG::data::_shared_table_bytes + v37);
      AG::Graph::remove_all_inputs(*((_QWORD *)this + 5), v37);
      *v38 |= 3u;
      AG::Node::update_self(v38, *((_QWORD *)this + 5), (uint64_t)a4);
      *v26 = *(unsigned __int8 *)v26 | (unint64_t)v24;
    }
    else
    {
      v35 = AG::Graph::add_attribute(*((int64x2_t **)this + 5), this, *(_DWORD *)(v31 + 32), a4, 0);
      v26 = (_QWORD *)operator new();
      *v26 = v24;
      *((_DWORD *)v26 + 2) = v16;
      *((_DWORD *)v26 + 3) = v35;
      *(_BYTE *)(AG::data::_shared_table_bytes + v35 + 7) |= 0x10u;
      util::UntypedTable::insert((util::UntypedTable *)(v15 + 200), (void *)v35, v26);
    }
    util::UntypedTable::insert((util::UntypedTable *)(v15 + 120), v26, v26);
    v27 = *v26;
  }
  *v26 = v27 & 0xFFFFFFFFFFFFFF00;
  return *((unsigned int *)v26 + 3);
}

uint64_t AG::Subgraph::set_tree_owner(uint64_t result, const char *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(unsigned int *)(result + 96);
  if ((_DWORD)v2)
  {
    v3 = AG::data::_shared_table_bytes + v2;
    if (*(_DWORD *)(v3 + 16))
      AG::precondition_failure((AG *)"setting owner of non-root tree", a2);
    *(_DWORD *)(v3 + 8) = (_DWORD)a2;
  }
  return result;
}

uint64_t AG::Subgraph::begin_tree(unsigned int *a1, int a2, uint64_t a3, int a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v8 = a1[24];
  v9 = a1[4];
  if ((_DWORD)v9
    && (v10 = AG::data::_shared_table_bytes,
        v11 = (*(_DWORD *)(AG::data::_shared_table_bytes + v9 + 16) + 7) & 0xFFFFFFF8,
        v11 + 32 <= *(_DWORD *)(AG::data::_shared_table_bytes + v9 + 12)))
  {
    *(_DWORD *)(AG::data::_shared_table_bytes + v9 + 16) = v11 + 32;
    result = v11 + v9;
  }
  else
  {
    result = AG::data::zone::alloc_slow((AG::data::zone *)a1, 0x20u, 7);
    v10 = AG::data::_shared_table_bytes;
  }
  v13 = v10 + result;
  *(_QWORD *)v13 = a3;
  *(_DWORD *)(v13 + 8) = a2;
  *(_DWORD *)(v13 + 12) = a4;
  *(_QWORD *)(v13 + 16) = 0;
  *(_QWORD *)(v13 + 24) = 0;
  a1[24] = result;
  v14 = AG::data::_shared_table_bytes;
  v15 = AG::data::_shared_table_bytes + result;
  *(_DWORD *)(v15 + 16) = v8;
  if ((_DWORD)v8)
  {
    v16 = v14 + v8;
    *(_DWORD *)(v15 + 24) = *(_DWORD *)(v16 + 20);
    *(_DWORD *)(v16 + 20) = a1[24];
  }
  return result;
}

uint64_t AG::Subgraph::add_tree_value(uint64_t result, int a2, uint64_t a3, char *a4, int a5)
{
  uint64_t v5;
  unsigned int *v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  int v15;
  uint64_t v16;

  v5 = *(unsigned int *)(result + 96);
  if ((_DWORD)v5)
  {
    v9 = (unsigned int *)result;
    v10 = AG::Graph::intern_key(*(AG::Graph **)(result + 40), a4);
    v11 = AG::data::_shared_table_bytes;
    v12 = AG::data::_shared_table_bytes + v5;
    v13 = v9[4];
    if ((_DWORD)v13
      && (v14 = (*(_DWORD *)(AG::data::_shared_table_bytes + v13 + 16) + 7) & 0xFFFFFFF8,
          v14 + 24 <= *(_DWORD *)(AG::data::_shared_table_bytes + v13 + 12)))
    {
      *(_DWORD *)(AG::data::_shared_table_bytes + v13 + 16) = v14 + 24;
      result = v14 + v13;
    }
    else
    {
      result = AG::data::zone::alloc_slow((AG::data::zone *)v9, 0x18u, 7);
      v11 = AG::data::_shared_table_bytes;
    }
    v15 = *(_DWORD *)(v12 + 28);
    v16 = v11 + result;
    *(_QWORD *)v16 = a3;
    *(_DWORD *)(v16 + 8) = a2;
    *(_DWORD *)(v16 + 12) = v10;
    *(_DWORD *)(v16 + 16) = a5;
    *(_DWORD *)(v16 + 20) = v15;
    *(_DWORD *)(v12 + 28) = result;
  }
  return result;
}

uint64_t AG::Subgraph::end_tree(uint64_t result)
{
  uint64_t v1;
  int v2;

  v1 = *(unsigned int *)(result + 96);
  if ((_DWORD)v1)
  {
    v2 = *(_DWORD *)(AG::data::_shared_table_bytes + v1 + 16);
    if (v2)
      *(_DWORD *)(result + 96) = v2;
  }
  return result;
}

uint64_t AG::Subgraph::tree_subgraph_child(uint64_t a1, unsigned int a2)
{
  _QWORD *v3;
  _QWORD *v5;
  _QWORD *v6;
  unint64_t v7;
  _DWORD *v8;
  _DWORD *v9;
  unint64_t v10;
  unsigned int *v11;
  _DWORD *v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  AG::AttributeID *v22;
  unsigned int v23;
  uint64_t v24;
  _DWORD *v25;
  size_t v26;
  size_t v27;
  _QWORD *v28;
  uint64_t v29;
  unint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  unint64_t v34;
  uint64_t v35;
  void *v36;
  uint64_t *v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD v42[32];
  _QWORD *v43;
  size_t v44;
  unint64_t v45;
  uint64_t v46;

  v46 = *MEMORY[0x1E0C80C00];
  v3 = *(_QWORD **)(*(_QWORD *)(a1 + 40) + 328);
  if (!v3)
    return 0;
  v42[0] = a1;
  v5 = std::__hash_table<std::__hash_value_type<AG::Subgraph *,AG::Graph::TreeDataElement>,std::__unordered_map_hasher<AG::Subgraph *,std::__hash_value_type<AG::Subgraph *,AG::Graph::TreeDataElement>,std::hash<AG::Subgraph *>,std::equal_to<AG::Subgraph *>,true>,std::__unordered_map_equal<AG::Subgraph *,std::__hash_value_type<AG::Subgraph *,AG::Graph::TreeDataElement>,std::equal_to<AG::Subgraph *>,std::hash<AG::Subgraph *>,true>,std::allocator<std::__hash_value_type<AG::Subgraph *,AG::Graph::TreeDataElement>>>::find<AG::Subgraph *>(v3, v42);
  v6 = v5;
  if (!v5)
    return 0;
  AG::Graph::TreeDataElement::sort_nodes((uint64_t)(v5 + 3));
  v7 = v6[4];
  if (!v7)
    return 0;
  v8 = (_DWORD *)v6[3];
  v9 = &v8[2 * v7];
  do
  {
    v10 = v7 >> 1;
    v11 = &v8[2 * (v7 >> 1)];
    v13 = *v11;
    v12 = v11 + 2;
    v7 += ~(v7 >> 1);
    if (v13 < a2)
      v8 = v12;
    else
      v7 = v10;
  }
  while (v7);
  if (v8 == v9)
    return 0;
  v43 = 0;
  v44 = 0;
  v45 = 32;
  v14 = *(_QWORD *)(a1 + 40);
  v15 = *(unsigned int *)(v14 + 352);
  if ((_DWORD)v15)
  {
    v16 = *(uint64_t **)(v14 + 344);
    v17 = &v16[v15];
    do
    {
      v18 = *v16;
      if (!*(_BYTE *)(*v16 + 104))
      {
        v19 = *(unsigned int *)(v18 + 96);
        if ((_DWORD)v19)
        {
          v20 = AG::data::_shared_table_bytes + v19;
          v23 = *(_DWORD *)(v20 + 8);
          v22 = (AG::AttributeID *)(v20 + 8);
          v21 = v23;
          if (v23 >= 4)
          {
            if ((v21 & 3) != 0)
              v21 = AG::AttributeID::resolve_slow(v22, 0);
            if ((v21 & 3) == 0)
            {
              v24 = v6[3] + 8 * v6[4];
              v25 = v8;
              if (v8 != (_DWORD *)v24)
              {
                while (*v25 == a2)
                {
                  if (v25[1] == v21)
                  {
                    v26 = v44;
                    v27 = v44 + 1;
                    if (v45 < v44 + 1)
                    {
                      AG::vector<util::cf_ptr<AGSubgraphStorage *>,32ul,unsigned long>::reserve_slow(v42, v27);
                      v26 = v44;
                      v27 = v44 + 1;
                    }
                    v28 = v43;
                    if (!v43)
                      v28 = v42;
                    v28[v26] = v18;
                    v44 = v27;
                    break;
                  }
                  v25 += 2;
                  if (v25 == (_DWORD *)v24)
                    break;
                }
              }
            }
          }
        }
      }
      ++v16;
    }
    while (v16 != v17);
    v32 = v43;
    v31 = v44;
  }
  else
  {
    v31 = 0;
    v32 = 0;
  }
  if (v32)
    v33 = v32;
  else
    v33 = v42;
  v34 = 126 - 2 * __clz(v31);
  if (v31)
    v35 = v34;
  else
    v35 = 0;
  std::__introsort<std::_ClassicAlgPolicy,AG::Subgraph::tree_subgraph_child(AG::data::ptr<AG::Graph::TreeElement>)::$_1 &,AG::Subgraph**,false>((uint64_t)v33, &v33[v31], v35, 1);
  v36 = v43;
  if (v43)
    v37 = v43;
  else
    v37 = v42;
  if (!v44)
  {
    v29 = 0;
    if (!v43)
      return v29;
LABEL_48:
    free(v36);
    return v29;
  }
  v38 = 0;
  v39 = AG::data::_shared_table_bytes + 24;
  v40 = 8 * v44;
  do
  {
    v41 = *v37++;
    v29 = *(unsigned int *)(v41 + 96);
    *(_DWORD *)(v39 + v29) = v38;
    v38 = v29;
    v40 -= 8;
  }
  while (v40);
  if (v36)
    goto LABEL_48;
  return v29;
}

void sub_1AB94C658(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *a41)
{
  if (a41)
    free(a41);
  _Unwind_Resume(exception_object);
}

uint64_t AG::Subgraph::tree_node_at_index(uint64_t a1, unsigned int a2, uint64_t a3)
{
  _QWORD *v4;
  _QWORD *v7;
  _QWORD *v8;
  unint64_t v9;
  _DWORD *v10;
  _DWORD *v11;
  unint64_t v12;
  unsigned int *v13;
  _DWORD *v14;
  unsigned int v15;
  _DWORD *v16;
  uint64_t v17;
  uint64_t v19;

  v4 = *(_QWORD **)(*(_QWORD *)(a1 + 40) + 328);
  if (v4)
  {
    v19 = a1;
    v7 = std::__hash_table<std::__hash_value_type<AG::Subgraph *,AG::Graph::TreeDataElement>,std::__unordered_map_hasher<AG::Subgraph *,std::__hash_value_type<AG::Subgraph *,AG::Graph::TreeDataElement>,std::hash<AG::Subgraph *>,std::equal_to<AG::Subgraph *>,true>,std::__unordered_map_equal<AG::Subgraph *,std::__hash_value_type<AG::Subgraph *,AG::Graph::TreeDataElement>,std::equal_to<AG::Subgraph *>,std::hash<AG::Subgraph *>,true>,std::allocator<std::__hash_value_type<AG::Subgraph *,AG::Graph::TreeDataElement>>>::find<AG::Subgraph *>(v4, &v19);
    if (v7)
    {
      v8 = v7;
      AG::Graph::TreeDataElement::sort_nodes((uint64_t)(v7 + 3));
      v9 = v8[4];
      if (v9)
      {
        v10 = (_DWORD *)v8[3];
        v11 = &v10[2 * v9];
        do
        {
          v12 = v9 >> 1;
          v13 = &v10[2 * (v9 >> 1)];
          v15 = *v13;
          v14 = v13 + 2;
          v9 += ~(v9 >> 1);
          if (v15 < a2)
            v10 = v14;
          else
            v9 = v12;
        }
        while (v9);
        if (v10 != v11)
        {
          v16 = &v10[2 * a3];
          v17 = a3 + 1;
          while (*v10 == a2)
          {
            if (!--v17)
              return v16[1];
            v10 += 2;
            if (v10 == v11)
              return 2;
          }
        }
      }
    }
  }
  return 2;
}

_QWORD *AG::Subgraph::encode(_QWORD *this, AG::Encoder *a2)
{
  uint64_t v3;
  int v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  int v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  int v16;
  unint64_t v17;
  unsigned int i;
  uint64_t v19;
  char v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  unint64_t v25;
  int v26;
  unsigned __int16 *v27;

  v3 = (uint64_t)this;
  v4 = *((_DWORD *)this + 6);
  v5 = v4 & 0x7FFFFFFF;
  if ((v4 & 0x7FFFFFFF) != 0)
  {
    AG::Encoder::encode_varint(a2, 8uLL);
    this = AG::Encoder::encode_varint(a2, v5);
  }
  v6 = *(_QWORD *)(v3 + 48);
  if (v6)
  {
    AG::Encoder::encode_varint(a2, 0x10uLL);
    this = AG::Encoder::encode_varint(a2, v6);
  }
  v8 = v3 + 56;
  v7 = *(_QWORD *)(v3 + 56);
  if ((v7 & 1) != 0)
  {
    v10 = v7 & 0xFFFFFFFFFFFFFFFELL;
    if (*(_QWORD *)(v10 + 32))
      v8 = *(_QWORD *)(v10 + 32);
    else
      v8 = v10;
    v9 = v8 + 8 * *(_QWORD *)(v10 + 40);
  }
  else
  {
    v9 = v8 + 8 * (v7 != 0);
  }
  while (v8 != v9)
  {
    v11 = *(_DWORD *)(*(_QWORD *)v8 + 24);
    v12 = v11 & 0x7FFFFFFF;
    if ((v11 & 0x7FFFFFFF) != 0)
    {
      AG::Encoder::encode_varint(a2, 0x18uLL);
      this = AG::Encoder::encode_varint(a2, v12);
    }
    v8 += 8;
  }
  v13 = *(unsigned int *)(v3 + 72);
  if ((_DWORD)v13)
  {
    v14 = *(_QWORD **)(v3 + 64);
    v15 = 8 * v13;
    do
    {
      v16 = *(_DWORD *)((*v14 & 0xFFFFFFFFFFFFFFFCLL) + 24);
      v17 = v16 & 0x7FFFFFFF;
      if ((v16 & 0x7FFFFFFF) != 0)
      {
        AG::Encoder::encode_varint(a2, 0x20uLL);
        this = AG::Encoder::encode_varint(a2, v17);
      }
      ++v14;
      v15 -= 8;
    }
    while (v15);
  }
  if (*(_BYTE *)(v3 + 104))
  {
    AG::Encoder::encode_varint(a2, 0x28uLL);
    this = AG::Encoder::encode_varint(a2, 1uLL);
  }
  for (i = *(_DWORD *)(v3 + 16); i; i = *(_DWORD *)(AG::data::_shared_table_bytes + v19 + 8))
  {
    v19 = i;
    v20 = 1;
    do
    {
      v21 = v20;
      v22 = AG::data::_shared_table_bytes + v19;
      if ((v21 & 1) != 0)
        v23 = 20;
      else
        v23 = 22;
      v24 = *(unsigned __int16 *)(v22 + v23);
      if (*(_WORD *)(v22 + v23))
      {
        while (1)
        {
          v25 = (v24 + v19);
          v26 = ((_BYTE)v24 + (_BYTE)v19) & 3;
          if ((((_BYTE)v24 + (_BYTE)v19) & 3) == 0)
            break;
          if (v26 == 1)
          {
            v27 = (unsigned __int16 *)(AG::data::_shared_table_bytes + (v25 & 0xFFFFFFFC) + 14);
LABEL_35:
            v24 = *v27;
            AG::Encoder::encode_varint(a2, 0x32uLL);
            AG::Encoder::begin_length_delimited(a2);
            if (!(_DWORD)v25)
              goto LABEL_38;
            AG::Encoder::encode_varint(a2, 8uLL);
            AG::Encoder::encode_varint(a2, v25);
            if ((v25 & 3) == 1)
            {
              AG::Encoder::encode_varint(a2, 0x1AuLL);
              AG::Encoder::begin_length_delimited(a2);
              AG::Graph::encode_indirect_node(*(_QWORD *)(v3 + 40), a2, (unsigned int *)(AG::data::_shared_table_bytes + (v25 & 0xFFFFFFFC)));
              goto LABEL_40;
            }
            if ((v25 & 3) == 0)
            {
LABEL_38:
              AG::Encoder::encode_varint(a2, 0x12uLL);
              AG::Encoder::begin_length_delimited(a2);
              AG::Graph::encode_node(*(const __CFString **)(v3 + 40), a2, (const AG::Node *)(AG::data::_shared_table_bytes + v25), 0);
LABEL_40:
              AG::Encoder::end_length_delimited(a2);
            }
            this = AG::Encoder::end_length_delimited(a2);
            if (!v24)
              goto LABEL_42;
          }
          else if (v26 == 2 || !v24)
          {
            goto LABEL_42;
          }
        }
        v27 = (unsigned __int16 *)(AG::data::_shared_table_bytes + v25 + 4);
        goto LABEL_35;
      }
LABEL_42:
      v20 = 0;
    }
    while ((v21 & 1) != 0);
  }
  if (*(_DWORD *)(v3 + 96))
  {
    AG::Encoder::encode_varint(a2, 0x3AuLL);
    AG::Encoder::begin_length_delimited(a2);
    AG::Graph::encode_tree(*(_QWORD *)(v3 + 40), a2, *(_DWORD *)(v3 + 96));
    return AG::Encoder::end_length_delimited(a2);
  }
  return this;
}

void std::unique_ptr<void,AG::data::table::malloc_zone_deleter>::reset[abi:ne180100](void **a1, void *a2)
{
  void *v3;

  v3 = *a1;
  *a1 = a2;
  if (v3)
    malloc_zone_free((malloc_zone_t *)AG::data::table::_malloc_zone, v3);
}

_QWORD *std::stack<AG::Subgraph *,AG::vector<AG::Subgraph *,16ul,unsigned long>>::push[abi:ne180100](_QWORD *__dst, _QWORD *a2)
{
  _QWORD *v3;
  uint64_t v4;
  size_t v5;
  _QWORD *v6;

  v3 = __dst;
  v4 = __dst[17];
  v5 = v4 + 1;
  if (__dst[18] < (unint64_t)(v4 + 1))
  {
    __dst = AG::vector<AG::Subgraph *,16ul,unsigned long>::reserve_slow(__dst, v5);
    v4 = v3[17];
    v5 = v4 + 1;
  }
  v6 = (_QWORD *)v3[16];
  if (!v6)
    v6 = v3;
  v6[v4] = *a2;
  v3[17] = v5;
  return __dst;
}

uint64_t std::__hash_table<std::__hash_value_type<AG::Subgraph *,AG::Graph::TreeDataElement>,std::__unordered_map_hasher<AG::Subgraph *,std::__hash_value_type<AG::Subgraph *,AG::Graph::TreeDataElement>,std::hash<AG::Subgraph *>,std::equal_to<AG::Subgraph *>,true>,std::__unordered_map_equal<AG::Subgraph *,std::__hash_value_type<AG::Subgraph *,AG::Graph::TreeDataElement>,std::equal_to<AG::Subgraph *>,std::hash<AG::Subgraph *>,true>,std::allocator<std::__hash_value_type<AG::Subgraph *,AG::Graph::TreeDataElement>>>::erase(_QWORD *a1, uint64_t *a2)
{
  uint64_t v2;
  _QWORD *v3;
  void *__p;
  uint64_t v6;

  v2 = *a2;
  std::__hash_table<std::__hash_value_type<AG::data::ptr<AG::Node>,AG::Graph::ProfileData::Item>,std::__unordered_map_hasher<AG::data::ptr<AG::Node>,std::__hash_value_type<AG::data::ptr<AG::Node>,AG::Graph::ProfileData::Item>,std::hash<AG::data::ptr<AG::Node>>,std::equal_to<AG::data::ptr<AG::Node>>,true>,std::__unordered_map_equal<AG::data::ptr<AG::Node>,std::__hash_value_type<AG::data::ptr<AG::Node>,AG::Graph::ProfileData::Item>,std::equal_to<AG::data::ptr<AG::Node>>,std::hash<AG::data::ptr<AG::Node>>,true>,std::allocator<std::__hash_value_type<AG::data::ptr<AG::Node>,AG::Graph::ProfileData::Item>>>::remove(a1, a2, (uint64_t)&__p);
  v3 = __p;
  __p = 0;
  if (v3)
    std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<AG::Subgraph *,AG::Graph::TreeDataElement>,void *>>>::operator()[abi:ne180100]((uint64_t)&v6, v3);
  return v2;
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<AG::Subgraph *,AG::Graph::TreeDataElement>,void *>>>::operator()[abi:ne180100](uint64_t a1, _QWORD *__p)
{
  void *v3;

  if (*(_BYTE *)(a1 + 8))
  {
    v3 = (void *)__p[3];
    if (v3)
      free(v3);
  }
  else if (!__p)
  {
    return;
  }
  operator delete(__p);
}

uint64_t AG::Subgraph::NodeCache::NodeCache(void)::$_0::__invoke(_QWORD *a1)
{
  return *a1 >> 8;
}

uint64_t AG::Subgraph::NodeCache::NodeCache(void)::$_1::__invoke(uint64_t a1, uint64_t a2)
{
  char v2;

  if (a1 == a2)
  {
    v2 = 1;
  }
  else if (*(_DWORD *)(a1 + 8) == *(_DWORD *)(a2 + 8) && (*(_QWORD *)a2 ^ *(_QWORD *)a1) <= 255)
  {
    v2 = AGDispatchEquatable();
  }
  else
  {
    v2 = 0;
  }
  return v2 & 1;
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,AG::Subgraph::tree_subgraph_child(AG::data::ptr<AG::Graph::TreeElement>)::$_1 &,AG::Subgraph**,false>(uint64_t result, uint64_t *a2, uint64_t a3, char a4)
{
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  BOOL v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t *v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unsigned int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t *v50;
  BOOL v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  unsigned int v57;
  uint64_t v58;
  uint64_t *v59;
  int64_t v60;
  int64_t v61;
  int64_t v62;
  uint64_t v63;
  uint64_t *v64;
  uint64_t v65;
  uint64_t *v66;
  uint64_t v67;
  unsigned int v68;
  uint64_t *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t *v74;
  uint64_t *v75;
  uint64_t *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t *v83;
  uint64_t v84;
  uint64_t v85;
  unsigned int v86;
  uint64_t *v87;
  uint64_t v89;
  uint64_t v90;
  unsigned int v91;

  v7 = (uint64_t *)result;
LABEL_2:
  v8 = v7;
  while (2)
  {
    v7 = v8;
    v9 = (char *)a2 - (char *)v8;
    v10 = a2 - v8;
    switch(v10)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v38 = *(a2 - 1);
        v39 = *v8;
        if (*(_DWORD *)(v38 + 88) > *(_DWORD *)(*v8 + 88))
        {
          *v8 = v38;
          *(a2 - 1) = v39;
        }
        return result;
      case 3uLL:
        return (uint64_t)std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,AG::Subgraph::tree_subgraph_child(AG::data::ptr<AG::Graph::TreeElement>)::$_1 &,AG::Subgraph**>(v8, v8 + 1, a2 - 1);
      case 4uLL:
        return (uint64_t)std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,AG::Subgraph::tree_subgraph_child(AG::data::ptr<AG::Graph::TreeElement>)::$_1 &,AG::Subgraph**>(v8, v8 + 1, v8 + 2, a2 - 1);
      case 5uLL:
        v40 = v8 + 1;
        v41 = v8 + 2;
        v42 = v8 + 3;
        result = (uint64_t)std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,AG::Subgraph::tree_subgraph_child(AG::data::ptr<AG::Graph::TreeElement>)::$_1 &,AG::Subgraph**>(v8, v8 + 1, v8 + 2, v8 + 3);
        v43 = *(a2 - 1);
        v44 = v8[3];
        if (*(_DWORD *)(v43 + 88) > *(_DWORD *)(v44 + 88))
        {
          *v42 = v43;
          *(a2 - 1) = v44;
          v45 = *v42;
          v46 = *v41;
          v47 = *(_DWORD *)(*v42 + 88);
          if (v47 > *(_DWORD *)(*v41 + 88))
          {
            *v41 = v45;
            *v42 = v46;
            v48 = *v40;
            if (v47 > *(_DWORD *)(*v40 + 88))
            {
              v8[1] = v45;
              v8[2] = v48;
              v49 = *v8;
              if (v47 > *(_DWORD *)(*v8 + 88))
              {
                *v8 = v45;
                v8[1] = v49;
              }
            }
          }
        }
        return result;
      default:
        if (v9 <= 191)
        {
          v50 = v8 + 1;
          v52 = v8 == a2 || v50 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v52)
            {
              v53 = 0;
              v54 = v8;
              do
              {
                v56 = *v54;
                v55 = v54[1];
                v54 = v50;
                v57 = *(_DWORD *)(v55 + 88);
                if (v57 > *(_DWORD *)(v56 + 88))
                {
                  v58 = v53;
                  while (1)
                  {
                    *(uint64_t *)((char *)v8 + v58 + 8) = v56;
                    if (!v58)
                      break;
                    v56 = *(uint64_t *)((char *)v8 + v58 - 8);
                    v58 -= 8;
                    if (v57 <= *(_DWORD *)(v56 + 88))
                    {
                      v59 = (uint64_t *)((char *)v8 + v58 + 8);
                      goto LABEL_80;
                    }
                  }
                  v59 = v8;
LABEL_80:
                  *v59 = v55;
                }
                v50 = v54 + 1;
                v53 += 8;
              }
              while (v54 + 1 != a2);
            }
          }
          else if (!v52)
          {
            do
            {
              v90 = *v7;
              v89 = v7[1];
              v7 = v50;
              v91 = *(_DWORD *)(v89 + 88);
              if (v91 > *(_DWORD *)(v90 + 88))
              {
                do
                {
                  *v50 = v90;
                  v90 = *(v50 - 2);
                  --v50;
                }
                while (v91 > *(_DWORD *)(v90 + 88));
                *v50 = v89;
              }
              v50 = v7 + 1;
            }
            while (v7 + 1 != a2);
          }
          return result;
        }
        if (!a3)
        {
          if (v8 != a2)
          {
            v60 = (v10 - 2) >> 1;
            v61 = v60;
            do
            {
              v62 = v61;
              if (v60 >= v61)
              {
                v63 = (2 * v61) | 1;
                v64 = &v8[v63];
                v65 = *v64;
                if (2 * v62 + 2 < (uint64_t)v10)
                {
                  result = *(unsigned int *)(v65 + 88);
                  if (result > *(_DWORD *)(v64[1] + 88))
                  {
                    v65 = v64[1];
                    ++v64;
                    v63 = 2 * v62 + 2;
                  }
                }
                v66 = &v8[v62];
                v67 = *v66;
                v68 = *(_DWORD *)(*v66 + 88);
                if (*(_DWORD *)(v65 + 88) <= v68)
                {
                  do
                  {
                    v69 = v64;
                    *v66 = v65;
                    if (v60 < v63)
                      break;
                    result = (2 * v63) | 1;
                    v64 = &v8[result];
                    v70 = 2 * v63 + 2;
                    v65 = *v64;
                    if (v70 < (uint64_t)v10 && *(_DWORD *)(v65 + 88) > *(_DWORD *)(v64[1] + 88))
                    {
                      v65 = v64[1];
                      ++v64;
                      result = v70;
                    }
                    v66 = v69;
                    v63 = result;
                  }
                  while (*(_DWORD *)(v65 + 88) <= v68);
                  *v69 = v67;
                }
              }
              v61 = v62 - 1;
            }
            while (v62);
            v71 = (unint64_t)v9 >> 3;
            do
            {
              v72 = 0;
              v73 = *v8;
              v74 = v8;
              do
              {
                v75 = &v74[v72];
                v78 = v75[1];
                v76 = v75 + 1;
                v77 = v78;
                v79 = (2 * v72) | 1;
                v80 = 2 * v72 + 2;
                if (v80 < v71)
                {
                  result = *(unsigned int *)(v77 + 88);
                  if (result > *(_DWORD *)(v76[1] + 88))
                  {
                    v77 = v76[1];
                    ++v76;
                    v79 = v80;
                  }
                }
                *v74 = v77;
                v74 = v76;
                v72 = v79;
              }
              while (v79 <= (uint64_t)((unint64_t)(v71 - 2) >> 1));
              if (v76 == --a2)
              {
                *v76 = v73;
              }
              else
              {
                *v76 = *a2;
                *a2 = v73;
                v81 = (char *)v76 - (char *)v8 + 8;
                if (v81 >= 9)
                {
                  v82 = (((unint64_t)v81 >> 3) - 2) >> 1;
                  v83 = &v8[v82];
                  v84 = *v83;
                  v85 = *v76;
                  v86 = *(_DWORD *)(*v76 + 88);
                  if (*(_DWORD *)(*v83 + 88) > v86)
                  {
                    do
                    {
                      v87 = v83;
                      *v76 = v84;
                      if (!v82)
                        break;
                      v82 = (v82 - 1) >> 1;
                      v83 = &v8[v82];
                      v84 = *v83;
                      v76 = v87;
                    }
                    while (*(_DWORD *)(*v83 + 88) > v86);
                    *v87 = v85;
                  }
                }
              }
            }
            while (v71-- > 2);
          }
          return result;
        }
        v11 = v10 >> 1;
        v12 = &v8[v10 >> 1];
        if ((unint64_t)v9 < 0x401)
        {
          result = (uint64_t)std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,AG::Subgraph::tree_subgraph_child(AG::data::ptr<AG::Graph::TreeElement>)::$_1 &,AG::Subgraph**>(&v7[v10 >> 1], v7, a2 - 1);
        }
        else
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,AG::Subgraph::tree_subgraph_child(AG::data::ptr<AG::Graph::TreeElement>)::$_1 &,AG::Subgraph**>(v7, &v7[v10 >> 1], a2 - 1);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,AG::Subgraph::tree_subgraph_child(AG::data::ptr<AG::Graph::TreeElement>)::$_1 &,AG::Subgraph**>(v7 + 1, v12 - 1, a2 - 2);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,AG::Subgraph::tree_subgraph_child(AG::data::ptr<AG::Graph::TreeElement>)::$_1 &,AG::Subgraph**>(v7 + 2, &v7[v11 + 1], a2 - 3);
          result = (uint64_t)std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,AG::Subgraph::tree_subgraph_child(AG::data::ptr<AG::Graph::TreeElement>)::$_1 &,AG::Subgraph**>(v12 - 1, v12, &v7[v11 + 1]);
          v13 = *v7;
          *v7 = *v12;
          *v12 = v13;
        }
        --a3;
        v14 = *v7;
        if ((a4 & 1) == 0)
        {
          v15 = *(_DWORD *)(v14 + 88);
          if (*(_DWORD *)(*(v7 - 1) + 88) > v15)
            goto LABEL_12;
          if (v15 <= *(_DWORD *)(*(a2 - 1) + 88))
          {
            v30 = v7 + 1;
            do
            {
              v8 = v30;
              if (v30 >= a2)
                break;
              ++v30;
            }
            while (v15 <= *(_DWORD *)(*v8 + 88));
          }
          else
          {
            v8 = v7;
            do
            {
              v29 = v8[1];
              ++v8;
            }
            while (v15 <= *(_DWORD *)(v29 + 88));
          }
          v31 = a2;
          if (v8 < a2)
          {
            v31 = a2;
            do
              v32 = *--v31;
            while (v15 > *(_DWORD *)(v32 + 88));
          }
          if (v8 < v31)
          {
            v33 = *v8;
            v34 = *v31;
            do
            {
              *v8 = v34;
              *v31 = v33;
              do
              {
                v35 = v8[1];
                ++v8;
                v33 = v35;
              }
              while (v15 <= *(_DWORD *)(v35 + 88));
              do
              {
                v36 = *--v31;
                v34 = v36;
              }
              while (v15 > *(_DWORD *)(v36 + 88));
            }
            while (v8 < v31);
          }
          v37 = v8 - 1;
          if (v8 - 1 != v7)
            *v7 = *v37;
          a4 = 0;
          *v37 = v14;
          continue;
        }
        v15 = *(_DWORD *)(v14 + 88);
LABEL_12:
        v16 = 0;
        do
          v17 = v7[++v16];
        while (*(_DWORD *)(v17 + 88) > v15);
        v18 = &v7[v16];
        v19 = a2;
        if (v16 == 1)
        {
          v19 = a2;
          do
          {
            if (v18 >= v19)
              break;
            v21 = *--v19;
          }
          while (*(_DWORD *)(v21 + 88) <= v15);
        }
        else
        {
          do
            v20 = *--v19;
          while (*(_DWORD *)(v20 + 88) <= v15);
        }
        if (v18 >= v19)
        {
          v27 = v18 - 1;
        }
        else
        {
          v22 = *v19;
          v23 = &v7[v16];
          v24 = v19;
          do
          {
            *v23 = v22;
            *v24 = v17;
            do
            {
              v25 = v23[1];
              ++v23;
              v17 = v25;
            }
            while (*(_DWORD *)(v25 + 88) > v15);
            do
            {
              v26 = *--v24;
              v22 = v26;
            }
            while (*(_DWORD *)(v26 + 88) <= v15);
          }
          while (v23 < v24);
          v27 = v23 - 1;
        }
        if (v27 != v7)
          *v7 = *v27;
        *v27 = v14;
        if (v18 < v19)
        {
LABEL_33:
          result = std::__introsort<std::_ClassicAlgPolicy,AG::Subgraph::tree_subgraph_child(AG::data::ptr<AG::Graph::TreeElement>)::$_1 &,AG::Subgraph**,false>(v7, v27, a3, a4 & 1);
          a4 = 0;
          v8 = v27 + 1;
          continue;
        }
        v28 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,AG::Subgraph::tree_subgraph_child(AG::data::ptr<AG::Graph::TreeElement>)::$_1 &,AG::Subgraph**>(v7, v27);
        v8 = v27 + 1;
        result = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,AG::Subgraph::tree_subgraph_child(AG::data::ptr<AG::Graph::TreeElement>)::$_1 &,AG::Subgraph**>(v27 + 1, a2);
        if (!(_DWORD)result)
        {
          if (v28)
            continue;
          goto LABEL_33;
        }
        a2 = v27;
        if (!v28)
          goto LABEL_2;
        return result;
    }
  }
}

uint64_t *std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,AG::Subgraph::tree_subgraph_child(AG::data::ptr<AG::Graph::TreeElement>)::$_1 &,AG::Subgraph**>(uint64_t *result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;

  v3 = *a2;
  v4 = *result;
  v5 = *(_DWORD *)(*a2 + 88);
  v6 = *(_DWORD *)(*result + 88);
  v7 = *a3;
  v8 = *(_DWORD *)(*a3 + 88);
  if (v5 <= v6)
  {
    if (v8 > v5)
    {
      *a2 = v7;
      *a3 = v3;
      v9 = *result;
      if (*(_DWORD *)(*a2 + 88) > *(_DWORD *)(*result + 88))
      {
        *result = *a2;
        *a2 = v9;
      }
    }
  }
  else
  {
    if (v8 <= v5)
    {
      *result = v3;
      *a2 = v4;
      if (*(_DWORD *)(*a3 + 88) <= v6)
        return result;
      *a2 = *a3;
    }
    else
    {
      *result = v7;
    }
    *a3 = v4;
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,AG::Subgraph::tree_subgraph_child(AG::data::ptr<AG::Graph::TreeElement>)::$_1 &,AG::Subgraph**>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  _BOOL8 result;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;

  v4 = a2 - a1;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = *(a2 - 1);
      v7 = *a1;
      if (*(_DWORD *)(v6 + 88) > *(_DWORD *)(*a1 + 88))
      {
        *a1 = v6;
        *(a2 - 1) = v7;
      }
      return result;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,AG::Subgraph::tree_subgraph_child(AG::data::ptr<AG::Graph::TreeElement>)::$_1 &,AG::Subgraph**>(a1, a1 + 1, a2 - 1);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,AG::Subgraph::tree_subgraph_child(AG::data::ptr<AG::Graph::TreeElement>)::$_1 &,AG::Subgraph**>(a1, a1 + 1, a1 + 2, a2 - 1);
      return 1;
    case 5:
      v18 = a1 + 1;
      v19 = a1 + 2;
      v20 = a1 + 3;
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,AG::Subgraph::tree_subgraph_child(AG::data::ptr<AG::Graph::TreeElement>)::$_1 &,AG::Subgraph**>(a1, a1 + 1, a1 + 2, a1 + 3);
      v21 = *(a2 - 1);
      v22 = a1[3];
      if (*(_DWORD *)(v21 + 88) > *(_DWORD *)(v22 + 88))
      {
        *v20 = v21;
        *(a2 - 1) = v22;
        v23 = *v20;
        v24 = *v19;
        v25 = *(_DWORD *)(*v20 + 88);
        if (v25 > *(_DWORD *)(*v19 + 88))
        {
          *v19 = v23;
          *v20 = v24;
          v26 = *v18;
          if (v25 > *(_DWORD *)(*v18 + 88))
          {
            a1[1] = v23;
            a1[2] = v26;
            v27 = *a1;
            if (v25 > *(_DWORD *)(*a1 + 88))
            {
              *a1 = v23;
              a1[1] = v27;
            }
          }
        }
      }
      return 1;
    default:
      v8 = a1 + 2;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,AG::Subgraph::tree_subgraph_child(AG::data::ptr<AG::Graph::TreeElement>)::$_1 &,AG::Subgraph**>(a1, a1 + 1, a1 + 2);
      v9 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v10 = 0;
      v11 = 24;
      break;
  }
  while (1)
  {
    v12 = *v9;
    v13 = *v8;
    v14 = *(_DWORD *)(*v9 + 88);
    if (v14 > *(_DWORD *)(*v8 + 88))
    {
      v15 = v11;
      while (1)
      {
        *(uint64_t *)((char *)a1 + v15) = v13;
        v16 = v15 - 8;
        if (v15 == 8)
          break;
        v13 = *(uint64_t *)((char *)a1 + v15 - 16);
        v15 -= 8;
        if (v14 <= *(_DWORD *)(v13 + 88))
        {
          v17 = (uint64_t *)((char *)a1 + v16);
          goto LABEL_13;
        }
      }
      v17 = a1;
LABEL_13:
      *v17 = v12;
      if (++v10 == 8)
        return v9 + 1 == a2;
    }
    v8 = v9;
    v11 += 8;
    if (++v9 == a2)
      return 1;
  }
}

uint64_t *std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,AG::Subgraph::tree_subgraph_child(AG::data::ptr<AG::Graph::TreeElement>)::$_1 &,AG::Subgraph**>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t *result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,AG::Subgraph::tree_subgraph_child(AG::data::ptr<AG::Graph::TreeElement>)::$_1 &,AG::Subgraph**>(a1, a2, a3);
  v9 = *a3;
  if (*(_DWORD *)(*a4 + 88) > *(_DWORD *)(*a3 + 88))
  {
    *a3 = *a4;
    *a4 = v9;
    v10 = *a2;
    if (*(_DWORD *)(*a3 + 88) > *(_DWORD *)(*a2 + 88))
    {
      *a2 = *a3;
      *a3 = v10;
      v11 = *a1;
      if (*(_DWORD *)(*a2 + 88) > *(_DWORD *)(*a1 + 88))
      {
        *a1 = *a2;
        *a2 = v11;
      }
    }
  }
  return result;
}

_QWORD *std::__hash_table<std::__hash_value_type<AG::Subgraph *,AG::Graph::TreeDataElement>,std::__unordered_map_hasher<AG::Subgraph *,std::__hash_value_type<AG::Subgraph *,AG::Graph::TreeDataElement>,std::hash<AG::Subgraph *>,std::equal_to<AG::Subgraph *>,true>,std::__unordered_map_equal<AG::Subgraph *,std::__hash_value_type<AG::Subgraph *,AG::Graph::TreeDataElement>,std::equal_to<AG::Subgraph *>,std::hash<AG::Subgraph *>,true>,std::allocator<std::__hash_value_type<AG::Subgraph *,AG::Graph::TreeDataElement>>>::find<AG::Subgraph *>(_QWORD *a1, _QWORD *a2)
{
  int8x8_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint8x8_t v6;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *result;
  unint64_t v10;

  v2 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v2)
    return 0;
  v3 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ HIDWORD(*a2));
  v4 = 0x9DDFEA08EB382D69 * (HIDWORD(*a2) ^ (v3 >> 47) ^ v3);
  v5 = 0x9DDFEA08EB382D69 * (v4 ^ (v4 >> 47));
  v6 = (uint8x8_t)vcnt_s8(v2);
  v6.i16[0] = vaddlv_u8(v6);
  if (v6.u32[0] > 1uLL)
  {
    v7 = v5;
    if (v5 >= *(_QWORD *)&v2)
      v7 = v5 % *(_QWORD *)&v2;
  }
  else
  {
    v7 = v5 & (*(_QWORD *)&v2 - 1);
  }
  v8 = *(_QWORD **)(*a1 + 8 * v7);
  if (!v8)
    return 0;
  result = (_QWORD *)*v8;
  if (*v8)
  {
    do
    {
      v10 = result[1];
      if (v10 == v5)
      {
        if (result[2] == *a2)
          return result;
      }
      else
      {
        if (v6.u32[0] > 1uLL)
        {
          if (v10 >= *(_QWORD *)&v2)
            v10 %= *(_QWORD *)&v2;
        }
        else
        {
          v10 &= *(_QWORD *)&v2 - 1;
        }
        if (v10 != v7)
          return 0;
      }
      result = (_QWORD *)*result;
    }
    while (result);
  }
  return result;
}

void *AG::vector<std::pair<AG::ClosureFunction<void>,unsigned long>,0ul,unsigned long>::reserve_slow(uint64_t a1, unint64_t a2)
{
  uint64_t v3;
  void *result;

  if (*(_QWORD *)(a1 + 16) + (*(_QWORD *)(a1 + 16) >> 1) <= a2)
    v3 = a2;
  else
    v3 = *(_QWORD *)(a1 + 16) + (*(_QWORD *)(a1 + 16) >> 1);
  result = AG::details::realloc_vector<unsigned long,24ul>(*(void **)a1, (unint64_t *)(a1 + 16), v3);
  *(_QWORD *)a1 = result;
  return result;
}

void *AG::vector<AG::Subgraph *,4ul,unsigned long>::reserve_slow(void *__dst, size_t a2)
{
  size_t v3;
  void *result;

  if (*((_QWORD *)__dst + 6) + (*((_QWORD *)__dst + 6) >> 1) <= a2)
    v3 = a2;
  else
    v3 = *((_QWORD *)__dst + 6) + (*((_QWORD *)__dst + 6) >> 1);
  result = AG::details::realloc_vector<unsigned long,8ul>(*((void **)__dst + 4), __dst, 4uLL, (size_t *)__dst + 6, v3);
  *((_QWORD *)__dst + 4) = result;
  return result;
}

char *std::__hash_table<std::__hash_value_type<AG::Subgraph *,AG::Graph::TreeDataElement>,std::__unordered_map_hasher<AG::Subgraph *,std::__hash_value_type<AG::Subgraph *,AG::Graph::TreeDataElement>,std::hash<AG::Subgraph *>,std::equal_to<AG::Subgraph *>,true>,std::__unordered_map_equal<AG::Subgraph *,std::__hash_value_type<AG::Subgraph *,AG::Graph::TreeDataElement>,std::equal_to<AG::Subgraph *>,std::hash<AG::Subgraph *>,true>,std::allocator<std::__hash_value_type<AG::Subgraph *,AG::Graph::TreeDataElement>>>::__emplace_unique_key_args<AG::Subgraph *,std::piecewise_construct_t const&,std::tuple<AG::Subgraph *&&>,std::tuple<>>(uint64_t a1, _QWORD *a2, uint64_t a3, _QWORD **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  void **v12;
  char *v13;
  unint64_t v14;
  _QWORD *v15;
  float v16;
  float v17;
  _BOOL8 v18;
  unint64_t v19;
  unint64_t v20;
  size_t v21;
  uint64_t v22;
  _QWORD *v23;
  unint64_t v24;

  v7 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ HIDWORD(*a2));
  v8 = 0x9DDFEA08EB382D69 * (HIDWORD(*a2) ^ (v7 >> 47) ^ v7);
  v9 = 0x9DDFEA08EB382D69 * (v8 ^ (v8 >> 47));
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    if (v11.u32[0] > 1uLL)
    {
      v4 = 0x9DDFEA08EB382D69 * (v8 ^ (v8 >> 47));
      if (v9 >= v10)
        v4 = v9 % v10;
    }
    else
    {
      v4 = v9 & (v10 - 1);
    }
    v12 = *(void ***)(*(_QWORD *)a1 + 8 * v4);
    if (v12)
    {
      v13 = (char *)*v12;
      if (*v12)
      {
        do
        {
          v14 = *((_QWORD *)v13 + 1);
          if (v14 == v9)
          {
            if (*((_QWORD *)v13 + 2) == *a2)
              return v13;
          }
          else
          {
            if (v11.u32[0] > 1uLL)
            {
              if (v14 >= v10)
                v14 %= v10;
            }
            else
            {
              v14 &= v10 - 1;
            }
            if (v14 != v4)
              break;
          }
          v13 = *(char **)v13;
        }
        while (v13);
      }
    }
  }
  v15 = (_QWORD *)(a1 + 16);
  v13 = (char *)operator new(0x38uLL);
  *(_QWORD *)v13 = 0;
  *((_QWORD *)v13 + 1) = v9;
  *((_QWORD *)v13 + 2) = **a4;
  *(_OWORD *)(v13 + 24) = 0u;
  *(_OWORD *)(v13 + 40) = 0u;
  v16 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v17 = *(float *)(a1 + 32);
  if (!v10 || (float)(v17 * (float)v10) < v16)
  {
    v18 = 1;
    if (v10 >= 3)
      v18 = (v10 & (v10 - 1)) != 0;
    v19 = v18 | (2 * v10);
    v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20)
      v21 = v20;
    else
      v21 = v19;
    std::__hash_table<std::__hash_value_type<unsigned int,AG::Graph::ProfileData::Item>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,AG::Graph::ProfileData::Item>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,AG::Graph::ProfileData::Item>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,AG::Graph::ProfileData::Item>>>::__rehash<true>(a1, v21);
    v10 = *(_QWORD *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
        v4 = v9 % v10;
      else
        v4 = v9;
    }
    else
    {
      v4 = (v10 - 1) & v9;
    }
  }
  v22 = *(_QWORD *)a1;
  v23 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v23)
  {
    *(_QWORD *)v13 = *v23;
LABEL_38:
    *v23 = v13;
    goto LABEL_39;
  }
  *(_QWORD *)v13 = *v15;
  *v15 = v13;
  *(_QWORD *)(v22 + 8 * v4) = v15;
  if (*(_QWORD *)v13)
  {
    v24 = *(_QWORD *)(*(_QWORD *)v13 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v24 >= v10)
        v24 %= v10;
    }
    else
    {
      v24 &= v10 - 1;
    }
    v23 = (_QWORD *)(*(_QWORD *)a1 + 8 * v24);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return v13;
}

void sub_1AB94DA40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  _QWORD *v10;
  uint64_t v11;

  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<AG::Subgraph *,AG::Graph::TreeDataElement>,void *>>>::operator()[abi:ne180100](v11, v10);
  _Unwind_Resume(a1);
}

void *AG::vector<AG::data::ptr<AG::Node>,256ul,unsigned long>::reserve_slow(void *__dst, size_t a2)
{
  size_t v3;
  void *result;

  if (*((_QWORD *)__dst + 130) + (*((_QWORD *)__dst + 130) >> 1) <= a2)
    v3 = a2;
  else
    v3 = *((_QWORD *)__dst + 130) + (*((_QWORD *)__dst + 130) >> 1);
  result = AG::details::realloc_vector<unsigned long,4ul>(*((void **)__dst + 128), __dst, 0x100uLL, (size_t *)__dst + 130, v3);
  *((_QWORD *)__dst + 128) = result;
  return result;
}

void util::Table<AG::data::ptr<AG::Node>,AG::Subgraph::NodeCache::Item *>::for_each<AG::Subgraph::NodeCache::~()::$_0>(AG::Subgraph::NodeCache::~()::$_0 const&)const::{lambda(void const*,void const*,void const*)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  if (a2)
    JUMPOUT(0x1AF431538);
}

uint64_t util::Table<AG::swift::metadata const*,AG::data::ptr<AG::Subgraph::NodeCache::Type>>::for_each<AG::Subgraph::cache_collect(void)::$_0>(AG::Subgraph::cache_collect(void)::$_0 const&)const::{lambda(void const*,void const*,void const*)#1}::__invoke(uint64_t a1, unsigned int a2, uint64_t *a3)
{
  unsigned int *v3;
  uint64_t v5;
  uint64_t v6;
  unsigned int *v7;
  uint64_t result;

  v3 = *(unsigned int **)(AG::data::_shared_table_bytes + a2 + 16);
  if (v3)
  {
    v5 = *a3;
    do
    {
      if (*(_BYTE *)v3 == 0xFF)
        break;
      v6 = *(_QWORD *)v3 + 1;
      *(_QWORD *)v3 = v6;
      if ((_BYTE)v6 == 0xFF)
      {
        util::UntypedTable::remove_ptr((util::UntypedTable *)(a3[1] + 120), v3);
        v7 = (unsigned int *)(AG::data::_shared_table_bytes + v3[3]);
        AG::Node::destroy_self(v7, *(_QWORD *)(v5 + 40));
        AG::Node::destroy_value(v7, *(_QWORD *)(v5 + 40));
        result = AG::Graph::remove_all_inputs(*(_QWORD *)(v5 + 40), v3[3]);
      }
      else
      {
        *(_BYTE *)(v5 + 105) |= 1u;
      }
      v3 = (unsigned int *)*((_QWORD *)v3 + 2);
    }
    while (v3);
  }
  return result;
}

uint64_t AG::LayoutDescriptor::compare_bytes(AG::LayoutDescriptor *this, _QWORD *a2, char *a3, _QWORD *a4, unint64_t *a5)
{
  AG::LayoutDescriptor *v5;
  uint64_t v6;
  uint64_t result;

  if ((unint64_t)a3 < 8 || ((a2 | this) & 7) != 0)
  {
    v5 = this;
    if (!a3)
      return 1;
  }
  else
  {
    v5 = this;
    while (*a2 == *(_QWORD *)v5)
    {
      ++a2;
      v5 = (AG::LayoutDescriptor *)((char *)v5 + 8);
      a3 -= 8;
      if ((unint64_t)a3 < 8)
      {
        if (a3)
          goto LABEL_11;
        return 1;
      }
    }
    if (!a4)
      return 0;
  }
LABEL_11:
  v6 = v5 - this;
  while (*(unsigned __int8 *)a2 == *(unsigned __int8 *)v5)
  {
    a2 = (_QWORD *)((char *)a2 + 1);
    v5 = (AG::LayoutDescriptor *)((char *)v5 + 1);
    ++v6;
    if (!--a3)
      return 1;
  }
  if (!a4)
    return 0;
  result = 0;
  *a4 = v6;
  return result;
}

uint64_t AG::LayoutDescriptor::Compare::failed(AG::LayoutDescriptor::Compare *this, int a2, uint64_t a3, uint64_t a4, const AG::swift::metadata *a5)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  int v9;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;

  if (a2 < 0)
  {
    v5 = AG::Graph::_current_update_key;
    v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v5);
    if ((v6 & 1) == 0)
    {
      v7 = (_QWORD *)(v6 & 0xFFFFFFFFFFFFFFFELL);
      if (v7)
      {
        v8 = *v7;
        v9 = *(_DWORD *)(*v7 + 232);
        if (v9)
        {
          v13 = v7 + 4;
          v15 = (_QWORD *)v7[12];
          v14 = v7[13];
          if (v15)
            v13 = v15;
          v16 = LODWORD(v13[v14 - 1]);
          v17 = v9 - 1;
          do
          {
            v18 = v17;
            v19 = *(_QWORD *)(*(_QWORD *)(v8 + 224) + 8 * v17);
            result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, const AG::swift::metadata *))(*(_QWORD *)v19 + 360))(v19, v16, a3, a4, a5);
            --v17;
          }
          while (v18);
        }
      }
    }
  }
  return result;
}

uint64_t AG::LayoutDescriptor::Compare::operator()(_QWORD *a1, AG::LayoutDescriptor **a2, uint64_t a3, uint64_t a4, unint64_t *a5, uint64_t a6, unsigned int a7)
{
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  AG::LayoutDescriptor **v11;
  AG::LayoutDescriptor **v13;
  int v14;
  int v15;
  unint64_t v16;
  int v17;
  AG::LayoutDescriptor *v18;
  const unsigned __int8 *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  int v26;
  char v27;
  const AG::swift::metadata *v28;
  const AG::swift::metadata *v29;
  uint64_t (*v30)(void);
  uint64_t v31;
  AG::LayoutDescriptor::Compare *v32;
  uint64_t v33;
  size_t v34;
  _BYTE *v35;
  char v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  _BOOL4 v41;
  uint64_t v42;
  _QWORD *v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  AG::LayoutDescriptor *v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  char v55;
  _QWORD *v56;
  int v57;
  AG::LayoutDescriptor **v58;
  int v59;
  int v60;
  uint64_t v61;
  int v62;
  int v63;
  int v64;
  int v65;
  char v66;
  _QWORD *v67;
  uint64_t v68;
  _QWORD *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  _QWORD *v74;
  unint64_t v75;
  unint64_t v76;
  unint64_t v77;
  _QWORD *v78;
  char v80;
  _BYTE v81[12];
  unsigned int v82;
  _BYTE *v83;
  _BYTE *v84;
  _BOOL4 v85;
  unsigned int v86;
  int v87;
  uint64_t v88;
  uint64_t v89;
  AG::LayoutDescriptor *v90;
  _QWORD *v91;
  unint64_t v92;
  uint64_t v93;

  v86 = a7;
  v88 = a3;
  v89 = a4;
  v93 = *MEMORY[0x1E0C80C00];
  v7 = a1[65];
  v91 = a1;
  v92 = v7;
  if (a6 == -1)
    v8 = -1;
  else
    v8 = (unint64_t)a5 + a6;
  v9 = 1;
  if (v8 <= (unint64_t)a5)
    goto LABEL_90;
  v10 = (uint64_t)a5;
  v11 = a2;
  v82 = v86 & 0x7FFFFFFF;
  v85 = ((v86 >> 8) & 1) == 0;
  v13 = a2;
  while (1)
  {
    v15 = *(unsigned __int8 *)v13;
    v13 = (AG::LayoutDescriptor **)((char *)v13 + 1);
    v14 = v15;
    if ((v15 - 64) >= 0x40)
      break;
    v16 = (v14 & 0x3F) + v10 + 1;
LABEL_8:
    v11 = v13;
    v10 = v16;
    if (v16 >= v8)
    {
      v9 = 1;
      goto LABEL_90;
    }
  }
  v9 = 1;
  switch(v14)
  {
    case 0:
      goto LABEL_90;
    case 1:
      v49 = *(AG::LayoutDescriptor **)((char *)v11 + 1);
      v13 = (AG::LayoutDescriptor **)((char *)v11 + 17);
      v16 = *(_QWORD *)(*((_QWORD *)v49 - 1) + 64) + v10;
      if (v16 <= v8)
        v52 = AGDispatchEquatable();
      else
        v52 = AG::LayoutDescriptor::compare_bytes((AG::LayoutDescriptor *)(v88 + v10), (_QWORD *)(v89 + v10), (char *)(v8 - v10), 0, a5);
      if ((v52 & 1) != 0)
        goto LABEL_8;
      goto LABEL_98;
    case 2:
      v49 = *(AG::LayoutDescriptor **)((char *)v11 + 1);
      v90 = *(AG::LayoutDescriptor **)((char *)v11 + 9);
      v50 = *(_QWORD *)(*((_QWORD *)v49 - 1) + 64);
      v51 = (_QWORD *)a1[64];
      if (!v51)
        v51 = a1;
      v52 = AG::LayoutDescriptor::compare_indirect(&v90, v51[8 * a1[65] - 8], v49, v82, (const void *)(v88 + v10), (const void *)(v89 + v10));
      *(AG::LayoutDescriptor **)((char *)v11 + 9) = v90;
      if (!(_DWORD)v52)
        goto LABEL_98;
      v13 = (AG::LayoutDescriptor **)((char *)v11 + 17);
      v16 = v50 + v10;
      goto LABEL_8;
    case 3:
      v49 = *v13;
      v53 = *(_QWORD *)(*((_QWORD *)*v13 - 1) + 64);
      v52 = AG::LayoutDescriptor::compare_existential_values(v49, (const AG::swift::existential_type_metadata *)(v88 + v10), (unsigned __int8 *)(v89 + v10), (const unsigned __int8 *)v82);
      if ((v52 & 1) != 0)
      {
        v16 = v53 + v10;
        v13 = (AG::LayoutDescriptor **)((char *)v11 + 9);
        goto LABEL_8;
      }
LABEL_98:
      AG::LayoutDescriptor::Compare::failed((AG::LayoutDescriptor::Compare *)v52, v86, v10, *(_QWORD *)(*((_QWORD *)v49 - 1) + 64), v49);
LABEL_99:
      v9 = 0;
LABEL_90:
      v74 = v91;
      v75 = v92;
      while (1)
      {
        v76 = v74[65];
        if (v76 <= v75)
          break;
        v77 = v76 - 1;
        v74[65] = v77;
        v78 = (_QWORD *)v74[64];
        if (!v78)
          v78 = v74;
        AG::LayoutDescriptor::Compare::Enum::~Enum((AG::LayoutDescriptor::Compare::Enum *)&v78[8 * v77]);
      }
      return v9;
    case 4:
    case 5:
      v18 = *(AG::LayoutDescriptor **)(v88 + v10);
      v19 = *(const unsigned __int8 **)(v89 + v10);
      if (v18 != (AG::LayoutDescriptor *)v19)
      {
        v20 = AG::LayoutDescriptor::compare_heap_objects(v18, v19, (const void *)v82, v14 == 5);
        if ((v20 & 1) == 0)
        {
          AG::LayoutDescriptor::Compare::failed((AG::LayoutDescriptor::Compare *)v20, v86, v10, 8, 0);
          goto LABEL_99;
        }
      }
      v16 = v10 + 8;
      goto LABEL_8;
    case 6:
      v24 = 0;
      v65 = 0;
      v25 = *(char **)((char *)v11 + 1);
      v13 = (AG::LayoutDescriptor **)((char *)v11 + 9);
      do
      {
        v66 = *(_BYTE *)v13;
        v13 = (AG::LayoutDescriptor **)((char *)v13 + 1);
        v24 |= (unint64_t)(v66 & 0x7F) << v65;
        v65 += 7;
      }
      while (v66 < 0);
      goto LABEL_75;
    case 7:
      v24 = *(unsigned __int16 *)((char *)v11 + 5);
      v13 = (AG::LayoutDescriptor **)((char *)v11 + 7);
      v25 = &AG::LayoutDescriptor::base_address[*(int *)((char *)v11 + 1)];
LABEL_75:
      if (v24 >= v8 - v10)
        v22 = (char *)(v8 - v10);
      else
        v22 = (char *)v24;
      if (AG::LayoutDescriptor::Compare::operator()(a1, v25, v88, v89, v10, v22, v86))
        goto LABEL_79;
      goto LABEL_99;
    case 8:
      v17 = 0;
      v26 = 0;
      do
      {
        v27 = *(_BYTE *)v13;
        v13 = (AG::LayoutDescriptor **)((char *)v13 + 1);
        v17 |= (v27 & 0x7F) << v26;
        v26 += 7;
      }
      while (v27 < 0);
      goto LABEL_25;
    case 9:
    case 10:
    case 11:
      v17 = v14 - 9;
LABEL_25:
      v29 = *v13++;
      v28 = v29;
      v30 = *(uint64_t (**)(void))(*((_QWORD *)v29 - 1) + 88);
      v84 = (_BYTE *)(v89 + v10);
      v87 = v30();
      v31 = v88 + v10;
      v32 = (AG::LayoutDescriptor::Compare *)((uint64_t (*)(uint64_t, const AG::swift::metadata *))v30)(v88 + v10, v29);
      if (v87 != (_DWORD)v32)
      {
        AG::LayoutDescriptor::Compare::failed(v32, v86, v10, *(_QWORD *)(*((_QWORD *)v28 - 1) + 64), v28);
        goto LABEL_99;
      }
      if (v85)
      {
        v33 = *((_QWORD *)v28 - 1);
        v34 = *(_QWORD *)(v33 + 64);
        if (v34 <= 0x1000)
        {
          MEMORY[0x1E0C80A78](v32);
          v37 = (v34 + 15) & 0xFFFFFFFFFFFFFFF0;
          v83 = &v81[-v37];
          bzero(&v81[-v37], v34);
          MEMORY[0x1E0C80A78](v38);
          v35 = &v81[-v37];
          bzero(v35, v34);
          v36 = 0;
        }
        else
        {
          v83 = malloc_type_malloc(*(_QWORD *)(v33 + 64), 0x100004077774924uLL);
          v35 = malloc_type_malloc(v34, 0x100004077774924uLL);
          v36 = 1;
        }
      }
      else
      {
        v36 = 0;
        v83 = v84;
        v35 = (_BYTE *)v31;
      }
      v39 = a1[65];
      if (a1[66] < (unint64_t)(v39 + 1))
      {
        AG::vector<AG::LayoutDescriptor::Compare::Enum,8ul,unsigned long>::reserve_slow(a1, v39 + 1);
        v39 = a1[65];
      }
      v40 = (_QWORD *)a1[64];
      if (!v40)
        v40 = a1;
      v80 = v36;
      v41 = v85;
      AG::LayoutDescriptor::Compare::Enum::Enum(&v40[8 * v39], (uint64_t)v28, v85, v87, v10, (uint64_t)v84, v31, (uint64_t)v83, (uint64_t)v35, v80);
      v42 = a1[65];
      a1[65] = v42 + 1;
      v43 = (_QWORD *)a1[64];
      if (!v43)
        v43 = a1;
      v44 = &v43[8 * v42 + 4];
      v45 = v44[1] - v10;
      v46 = *v44 - v10;
      v47 = v89;
      if (v41)
        v47 = v46;
      v48 = v88;
      if (v41)
        v48 = v45;
      v88 = v48;
      v89 = v47;
LABEL_50:
      v56 = (_QWORD *)a1[64];
      if (!v56)
        v56 = a1;
      if (v17 != LODWORD(v56[8 * a1[65] - 2]))
      {
        v57 = 0;
        v58 = v13;
        while (1)
        {
          v13 = v58;
          v59 = *(unsigned __int8 *)v58;
          v58 = (AG::LayoutDescriptor **)((char *)v58 + 1);
          v60 = v57;
          v61 = 1;
          v16 = v10;
          switch(v59)
          {
            case 0:
              goto LABEL_8;
            case 1:
            case 2:
              v61 = 9;
              goto LABEL_61;
            case 3:
LABEL_61:
              v58 = (AG::LayoutDescriptor **)((char *)v13 + v61 + 8);
              continue;
            case 6:
              v58 = (AG::LayoutDescriptor **)((char *)v13 + 9);
              do
              {
                v64 = *(char *)v58;
                v58 = (AG::LayoutDescriptor **)((char *)v58 + 1);
              }
              while (v64 < 0);
              continue;
            case 7:
              v58 = (AG::LayoutDescriptor **)((char *)v13 + 7);
              continue;
            case 8:
              do
              {
                v62 = *((char *)v13 + 1);
                v13 = (AG::LayoutDescriptor **)((char *)v13 + 1);
              }
              while (v62 < 0);
              goto LABEL_59;
            case 9:
            case 10:
            case 11:
LABEL_59:
              v58 = (AG::LayoutDescriptor **)((char *)v13 + 9);
              ++v57;
              break;
            case 12:
              if (!v57)
                goto LABEL_53;
              do
              {
                v63 = *(char *)v58;
                v58 = (AG::LayoutDescriptor **)((char *)v58 + 1);
              }
              while (v63 < 0);
              break;
            case 13:
            case 14:
            case 15:
            case 16:
            case 17:
            case 18:
            case 19:
            case 20:
            case 21:
              if (!v57)
                goto LABEL_53;
              continue;
            case 22:
              --v57;
              if (!v60)
                goto LABEL_53;
              continue;
            default:
              continue;
          }
        }
      }
LABEL_53:
      v16 = v10;
      goto LABEL_8;
    case 12:
      v17 = 0;
      v54 = 0;
      do
      {
        v55 = *(_BYTE *)v13;
        v13 = (AG::LayoutDescriptor **)((char *)v13 + 1);
        v17 |= (v55 & 0x7F) << v54;
        v54 += 7;
      }
      while (v55 < 0);
      goto LABEL_50;
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
      v17 = v14 - 13;
      goto LABEL_50;
    case 22:
      v67 = (_QWORD *)a1[64];
      if (!v67)
        v67 = a1;
      v68 = a1[65] - 1;
      v69 = &v67[8 * v68];
      v71 = *v69;
      v70 = v69[1];
      v72 = v89;
      if (*((_DWORD *)v69 + 13) == 1)
        v72 = v69[2] - v70;
      v73 = v88;
      if (*((_DWORD *)v69 + 13) == 1)
        v73 = v69[3] - v70;
      v88 = v73;
      v89 = v72;
      v16 = *(_QWORD *)(*(_QWORD *)(v71 - 8) + 64) + v70;
      a1[65] = v68;
      AG::LayoutDescriptor::Compare::Enum::~Enum((AG::LayoutDescriptor::Compare::Enum *)v69);
      goto LABEL_8;
    default:
      if ((v14 & 0x80) == 0)
        goto LABEL_53;
      v21 = v14 & 0x7F;
      if (v8 - v10 >= v21 + 1)
        v22 = (char *)(v21 + 1);
      else
        v22 = (char *)(v8 - v10);
      v90 = 0;
      v23 = AG::LayoutDescriptor::compare_bytes((AG::LayoutDescriptor *)(v88 + v10), (_QWORD *)(v89 + v10), v22, &v90, a5);
      if ((v23 & 1) == 0)
      {
        AG::LayoutDescriptor::Compare::failed((AG::LayoutDescriptor::Compare *)v23, v86, (uint64_t)v90 + v10, 1, 0);
        goto LABEL_99;
      }
LABEL_79:
      v16 = (unint64_t)&v22[v10];
      goto LABEL_8;
  }
}

void sub_1AB94E3E0(_Unwind_Exception *a1)
{
  uint64_t v1;

  AG::LayoutDescriptor::Compare::Frame::~Frame((AG::LayoutDescriptor::Compare::Frame *)(v1 - 104));
  _Unwind_Resume(a1);
}

void AG::LayoutDescriptor::Compare::Frame::~Frame(AG::LayoutDescriptor::Compare::Frame *this)
{
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;

  v1 = *(_QWORD *)this;
  v2 = *((_QWORD *)this + 1);
  while (1)
  {
    v3 = *(_QWORD *)(v1 + 520);
    if (v3 <= v2)
      break;
    v4 = v3 - 1;
    *(_QWORD *)(v1 + 520) = v4;
    v5 = *(_QWORD *)(v1 + 512);
    if (!v5)
      v5 = v1;
    AG::LayoutDescriptor::Compare::Enum::~Enum((AG::LayoutDescriptor::Compare::Enum *)(v5 + (v4 << 6)));
  }
}

uint64_t AG::LayoutDescriptor::compare_bytes_top_level(AG::LayoutDescriptor *this, unsigned __int8 *a2, char *a3, int a4, unint64_t *a5)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  int v12;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v21 = 0;
  v6 = AG::LayoutDescriptor::compare_bytes(this, a2, a3, &v21, a5);
  v7 = v6;
  if (a4 < 0 && (v6 & 1) == 0)
  {
    v8 = AG::Graph::_current_update_key;
    v9 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v8);
    if ((v9 & 1) == 0)
    {
      v10 = (_QWORD *)(v9 & 0xFFFFFFFFFFFFFFFELL);
      if (v10)
      {
        v11 = *v10;
        v12 = *(_DWORD *)(*v10 + 232);
        if (v12)
        {
          v14 = v10 + 4;
          v16 = (_QWORD *)v10[12];
          v15 = v10[13];
          if (v16)
            v14 = v16;
          v17 = LODWORD(v14[v15 - 1]);
          v18 = v12 - 1;
          do
          {
            v19 = v18;
            v20 = *(_QWORD *)(*(_QWORD *)(v11 + 224) + 8 * v18);
            (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)v20 + 360))(v20, v17, v21, 1, 0);
            --v18;
          }
          while (v19);
        }
      }
    }
  }
  return v7;
}

void AG::LayoutDescriptor::Compare::~Compare(AG::LayoutDescriptor::Compare *this)
{
  AG::LayoutDescriptor::Compare *v1;
  void *v2;
  unint64_t v3;
  uint64_t v4;

  v1 = this;
  v2 = (void *)*((_QWORD *)this + 64);
  if (v2)
    this = (AG::LayoutDescriptor::Compare *)*((_QWORD *)this + 64);
  if (*((_QWORD *)v1 + 65))
  {
    v3 = 0;
    do
    {
      AG::LayoutDescriptor::Compare::Enum::~Enum(this);
      ++v3;
      this = (AG::LayoutDescriptor::Compare *)(v4 + 64);
    }
    while (v3 < *((_QWORD *)v1 + 65));
    v2 = (void *)*((_QWORD *)v1 + 64);
  }
  if (v2)
    free(v2);
}

std::string *AG::LayoutDescriptor::print(std::string *a1, AG::LayoutDescriptor *this)
{
  AG::LayoutDescriptor *v2;
  int v4;
  int v5;
  AG::swift::metadata **v6;
  int v7;
  int v8;
  AG::swift::metadata *v9;
  uint64_t v10;
  const char *v11;
  AG::swift::metadata *v12;
  uint64_t v13;
  const char *v14;
  AG::swift::metadata *v15;
  uint64_t v16;
  const char *v17;
  uint64_t v18;
  int v19;
  char *v20;
  char v21;
  uint64_t v22;
  const char *v23;
  int v24;
  char v25;
  AG::swift::metadata *v26;
  uint64_t v27;
  const char *v28;
  int v29;
  int v30;
  char v31;
  std::string *v33;

  v2 = this;
  v33 = a1;
  v4 = AG::LayoutDescriptor::length(this, (const unsigned __int8 *)this);
  AG::LayoutDescriptor::print(std::string &,unsigned char const*)::$_1::operator()(&v33, "(layout #:length %d #:address %p", v4, v2);
  v5 = 3;
  while (1)
  {
    v6 = (AG::swift::metadata **)((char *)v2 + 1);
    v7 = *(unsigned __int8 *)v2;
    if ((v7 - 64) >= 0x40)
    {
      switch(*(_BYTE *)v2)
      {
        case 0:
          return AG::LayoutDescriptor::print(std::string &,unsigned char const*)::$_1::operator()(&v33, ")\n");
        case 1:
          v9 = *(AG::swift::metadata **)((char *)v2 + 1);
          v2 = (AG::LayoutDescriptor *)((char *)v2 + 17);
          std::string::push_back(a1, 10);
          std::string::append(a1, 2 * v5, 32);
          v10 = *(_QWORD *)(*((_QWORD *)v9 - 1) + 64);
          v11 = (const char *)AG::swift::metadata::name(v9, 0);
          AG::LayoutDescriptor::print(std::string &,unsigned char const*)::$_1::operator()(&v33, "(== #:size %d #:type %s)", v10, v11);
          continue;
        case 2:
          v12 = *(AG::swift::metadata **)((char *)v2 + 1);
          v2 = (AG::LayoutDescriptor *)((char *)v2 + 17);
          std::string::push_back(a1, 10);
          std::string::append(a1, 2 * v5, 32);
          v13 = *(_QWORD *)(*((_QWORD *)v12 - 1) + 64);
          v14 = (const char *)AG::swift::metadata::name(v12, 0);
          AG::LayoutDescriptor::print(std::string &,unsigned char const*)::$_1::operator()(&v33, "(indirect #:size %d #:type %s)", v13, v14);
          continue;
        case 3:
          v15 = *(AG::swift::metadata **)((char *)v2 + 1);
          v2 = (AG::LayoutDescriptor *)((char *)v2 + 9);
          std::string::push_back(a1, 10);
          std::string::append(a1, 2 * v5, 32);
          v16 = *(_QWORD *)(*((_QWORD *)v15 - 1) + 64);
          v17 = (const char *)AG::swift::metadata::name(v15, 0);
          AG::LayoutDescriptor::print(std::string &,unsigned char const*)::$_1::operator()(&v33, "(existential #:size %d #:type %s)", v16, v17);
          continue;
        case 4:
        case 5:
          std::string::push_back(a1, 10);
          std::string::append(a1, 2 * v5, 32);
          AG::LayoutDescriptor::print(std::string &,unsigned char const*)::$_1::operator()(&v33, "(%s)");
          break;
        case 6:
          v18 = 0;
          v19 = 0;
          v20 = *(char **)((char *)v2 + 1);
          v2 = (AG::LayoutDescriptor *)((char *)v2 + 9);
          do
          {
            v21 = *(_BYTE *)v2;
            v2 = (AG::LayoutDescriptor *)((char *)v2 + 1);
            v18 |= (unint64_t)(v21 & 0x7F) << v19;
            v19 += 7;
          }
          while (v21 < 0);
          goto LABEL_18;
        case 7:
          v22 = *(int *)((char *)v2 + 1);
          LODWORD(v18) = *(unsigned __int16 *)((char *)v2 + 5);
          v2 = (AG::LayoutDescriptor *)((char *)v2 + 7);
          v20 = &AG::LayoutDescriptor::base_address[v22];
LABEL_18:
          std::string::push_back(a1, 10);
          std::string::append(a1, 2 * v5, 32);
          v23 = "";
          if (v7 == 7)
            v23 = "*";
          AG::LayoutDescriptor::print(std::string &,unsigned char const*)::$_1::operator()(&v33, "(nested%s #:size %d #:layout %p)", v23, v18, v20);
          continue;
        case 8:
          v8 = 0;
          v24 = 0;
          do
          {
            v25 = *(_BYTE *)v6;
            v6 = (AG::swift::metadata **)((char *)v6 + 1);
            v8 |= (v25 & 0x7F) << v24;
            v24 += 7;
          }
          while (v25 < 0);
          goto LABEL_23;
        case 9:
        case 0xA:
        case 0xB:
          v8 = v7 - 9;
LABEL_23:
          v26 = *v6;
          std::string::push_back(a1, 10);
          std::string::append(a1, 2 * v5, 32);
          v27 = *(_QWORD *)(*((_QWORD *)v26 - 1) + 64);
          v28 = (const char *)AG::swift::metadata::name(v26, 0);
          AG::LayoutDescriptor::print(std::string &,unsigned char const*)::$_1::operator()(&v33, "(enum #:size %d #:type %s", v27, v28);
          std::string::push_back(a1, 10);
          std::string::append(a1, 2 * v5 + 4, 32);
          AG::LayoutDescriptor::print(std::string &,unsigned char const*)::$_1::operator()(&v33, "(case %d", v8);
          v5 += 4;
          v2 = (AG::LayoutDescriptor *)(v6 + 1);
          continue;
        case 0xC:
          v29 = 0;
          v30 = 0;
          do
          {
            v31 = *(_BYTE *)v6;
            v6 = (AG::swift::metadata **)((char *)v6 + 1);
            v29 |= (v31 & 0x7F) << v30;
            v30 += 7;
          }
          while (v31 < 0);
          goto LABEL_6;
        case 0xD:
        case 0xE:
        case 0xF:
        case 0x10:
        case 0x11:
        case 0x12:
        case 0x13:
        case 0x14:
        case 0x15:
LABEL_6:
          std::string::append(a1, 1uLL, 41);
          std::string::push_back(a1, 10);
          std::string::append(a1, 2 * v5 - 4, 32);
          AG::LayoutDescriptor::print(std::string &,unsigned char const*)::$_1::operator()(&v33, "(case %d");
          break;
        case 0x16:
          v5 -= 4;
          std::string::append(a1, 2uLL, 41);
          v2 = (AG::LayoutDescriptor *)((char *)v2 + 1);
          continue;
        default:
          v2 = (AG::LayoutDescriptor *)((char *)v2 + 1);
          if ((v7 & 0x80) == 0)
            continue;
          std::string::push_back(a1, 10);
          std::string::append(a1, 2 * v5, 32);
          AG::LayoutDescriptor::print(std::string &,unsigned char const*)::$_1::operator()(&v33, "(read %u)");
          break;
      }
    }
    else
    {
      std::string::push_back(a1, 10);
      std::string::append(a1, 2 * v5, 32);
      AG::LayoutDescriptor::print(std::string &,unsigned char const*)::$_1::operator()(&v33, "(skip %u)");
    }
    v2 = (AG::LayoutDescriptor *)v6;
  }
}

std::string *AG::LayoutDescriptor::print(std::string &,unsigned char const*)::$_1::operator()(std::string **a1, char *__format, ...)
{
  size_t v3;
  char __str[256];
  uint64_t v6;
  va_list va;

  va_start(va, __format);
  v6 = *MEMORY[0x1E0C80C00];
  vsnprintf(__str, 0x100uLL, __format, va);
  v3 = strlen(__str);
  return std::string::append(*a1, __str, v3);
}

void AG::LayoutDescriptor::Builder::EnumItem::~EnumItem(AG::LayoutDescriptor::Builder::EnumItem *this)
{
  char *v2;
  unint64_t v3;
  char *v4;
  void *v5;
  char *v6;
  void *v7;
  unint64_t v8;

  v2 = (char *)*((_QWORD *)this + 3);
  if (*((_QWORD *)this + 4))
  {
    v3 = 0;
    do
    {
      v4 = &v2[40 * v3];
      v7 = (void *)*((_QWORD *)v4 + 2);
      v6 = v4 + 16;
      v5 = v7;
      if (*((_QWORD *)v6 + 1))
      {
        v8 = 0;
        do
        {
          ++v8;
          v5 = (void *)(std::__variant_detail::__dtor<std::__variant_detail::__traits<AG::LayoutDescriptor::Builder::DataItem,AG::LayoutDescriptor::Builder::EqualsItem,AG::LayoutDescriptor::Builder::IndirectItem,AG::LayoutDescriptor::Builder::ExistentialItem,AG::LayoutDescriptor::Builder::HeapRefItem,AG::LayoutDescriptor::Builder::NestedItem,AG::LayoutDescriptor::Builder::EnumItem>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)v5)
                      + 56);
        }
        while (v8 < *((_QWORD *)v6 + 1));
        v5 = *(void **)v6;
      }
      if (v5)
        free(v5);
      ++v3;
    }
    while (v3 < *((_QWORD *)this + 4));
    v2 = (char *)*((_QWORD *)this + 3);
  }
  if (v2)
    free(v2);
}

BOOL AG::LayoutDescriptor::Builder::visit_native_object(AG::LayoutDescriptor::Builder *this, const AG::swift::metadata *a2)
{
  int v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = *((_DWORD *)this + 3);
  if (v2 == 2)
  {
    v3 = *((_QWORD *)this + 4);
    if (v3)
      v4 = (_QWORD *)(v3 + 16);
    else
      v4 = (_QWORD *)((char *)this + 40);
    v5 = *((_QWORD *)this + 2);
    v6 = v4[1];
    if (v4[2] < (unint64_t)(v6 + 1))
    {
      AG::vector<std::variant<AG::LayoutDescriptor::Builder::DataItem,AG::LayoutDescriptor::Builder::EqualsItem,AG::LayoutDescriptor::Builder::IndirectItem,AG::LayoutDescriptor::Builder::ExistentialItem,AG::LayoutDescriptor::Builder::HeapRefItem,AG::LayoutDescriptor::Builder::NestedItem,AG::LayoutDescriptor::Builder::EnumItem>,0ul,unsigned long>::reserve_slow((uint64_t)v4, v6 + 1);
      v6 = v4[1];
    }
    v7 = *v4 + 56 * v6;
    *(_QWORD *)v7 = v5;
    *(_QWORD *)(v7 + 8) = 8;
    *(_BYTE *)(v7 + 16) = 0;
    *(_DWORD *)(v7 + 48) = 4;
    ++v4[1];
  }
  return v2 == 2;
}

uint64_t AG::`anonymous namespace'::print_layouts(AG::_anonymous_namespace_ *this)
{
  unsigned __int8 v1;
  unsigned int *v2;
  int v4;

  v2 = (unsigned int *)&unk_1ECEF3000;
  if ((v1 & 1) == 0)
  {
    v2 = (_DWORD *)&unk_1ECEF3000;
    if (v4)
    {
      v2 = (_DWORD *)&unk_1ECEF3000;
    }
  }
  return v2[104];
}

void AG::LayoutDescriptor::Builder::~Builder(AG::LayoutDescriptor::Builder *this)
{
  void *v2;
  unint64_t v3;

  *(_QWORD *)this = &off_1E5A601A0;
  v2 = (void *)*((_QWORD *)this + 5);
  if (*((_QWORD *)this + 6))
  {
    v3 = 0;
    do
    {
      ++v3;
      v2 = (void *)(std::__variant_detail::__dtor<std::__variant_detail::__traits<AG::LayoutDescriptor::Builder::DataItem,AG::LayoutDescriptor::Builder::EqualsItem,AG::LayoutDescriptor::Builder::IndirectItem,AG::LayoutDescriptor::Builder::ExistentialItem,AG::LayoutDescriptor::Builder::HeapRefItem,AG::LayoutDescriptor::Builder::NestedItem,AG::LayoutDescriptor::Builder::EnumItem>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)v2)
                  + 56);
    }
    while (v3 < *((_QWORD *)this + 6));
    v2 = (void *)*((_QWORD *)this + 5);
  }
  if (v2)
    free(v2);
}

void AG::LayoutDescriptor::add_type_descriptor_override(unint64_t a1, int a2)
{
  _QWORD *v4;
  os_unfair_lock_s *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t *v13;
  _QWORD *v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;

  if (a1)
  {
    v7 = v4[32];
    v6 = v4[33];
    v8 = v7;
    v9 = (_QWORD *)(v7 + 16 * v6);
    if (v6)
    {
      v10 = (_QWORD *)v4[32];
      v11 = v4[33];
      do
      {
        v12 = v11 >> 1;
        v13 = &v10[2 * (v11 >> 1)];
        v15 = *v13;
        v14 = v13 + 2;
        v11 += ~(v11 >> 1);
        if (v15 < a1)
          v10 = v14;
        else
          v11 = v12;
      }
      while (v11);
      if (v10 != v9)
      {
        if (*v10 == a1)
        {
          *((_DWORD *)v10 + 2) = a2;
LABEL_18:
          os_unfair_lock_unlock(v5);
          return;
        }
        v9 = v10;
      }
    }
    if (v4[34] < v6 + 1)
    {
      AG::vector<std::pair<void const*,AGComparisonMode>,0ul,unsigned long>::reserve_slow((uint64_t)(v4 + 32), v6 + 1);
      v8 = v4[32];
      v6 = v4[33];
    }
    v16 = ((uint64_t)v9 - v7) >> 4;
    if (v6 > v16)
    {
      memmove((void *)(v8 + 16 * v16 + 16), (const void *)(v8 + 16 * v16), 16 * (v6 - v16));
      v6 = v4[33];
    }
    v17 = v8 + 16 * v16;
    *(_QWORD *)v17 = a1;
    *(_DWORD *)(v17 + 8) = a2;
    v4[33] = v6 + 1;
    goto LABEL_18;
  }
}

void sub_1AB94EDDC(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t std::variant<AG::LayoutDescriptor::Builder::DataItem,AG::LayoutDescriptor::Builder::EqualsItem,AG::LayoutDescriptor::Builder::IndirectItem,AG::LayoutDescriptor::Builder::ExistentialItem,AG::LayoutDescriptor::Builder::HeapRefItem,AG::LayoutDescriptor::Builder::NestedItem,AG::LayoutDescriptor::Builder::EnumItem>::operator=[abi:ne180100]<AG::LayoutDescriptor::Builder::DataItem&,0,AG::LayoutDescriptor::Builder::DataItem,0ul,0>(uint64_t a1, _OWORD *a2)
{
  if (*(_DWORD *)(a1 + 48))
    std::__variant_detail::__assignment<std::__variant_detail::__traits<AG::LayoutDescriptor::Builder::DataItem,AG::LayoutDescriptor::Builder::EqualsItem,AG::LayoutDescriptor::Builder::IndirectItem,AG::LayoutDescriptor::Builder::ExistentialItem,AG::LayoutDescriptor::Builder::HeapRefItem,AG::LayoutDescriptor::Builder::NestedItem,AG::LayoutDescriptor::Builder::EnumItem>>::__emplace[abi:ne180100]<0ul,AG::LayoutDescriptor::Builder::DataItem&>(a1, a2);
  else
    *(_OWORD *)a1 = *a2;
  return a1;
}

uint64_t std::__variant_detail::__assignment<std::__variant_detail::__traits<AG::LayoutDescriptor::Builder::DataItem,AG::LayoutDescriptor::Builder::EqualsItem,AG::LayoutDescriptor::Builder::IndirectItem,AG::LayoutDescriptor::Builder::ExistentialItem,AG::LayoutDescriptor::Builder::HeapRefItem,AG::LayoutDescriptor::Builder::NestedItem,AG::LayoutDescriptor::Builder::EnumItem>>::__emplace[abi:ne180100]<0ul,AG::LayoutDescriptor::Builder::DataItem&>(uint64_t a1, _OWORD *a2)
{
  uint64_t v4;
  char v6;

  v4 = *(unsigned int *)(a1 + 48);
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, uint64_t))off_1E5A60860[v4])(&v6, a1);
  *(_DWORD *)(a1 + 48) = -1;
  *(_OWORD *)a1 = *a2;
  *(_DWORD *)(a1 + 48) = 0;
  return a1;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm6EEE10__dispatchB8ne180100IOZNS0_6__dtorINS0_8__traitsIJN2AG16LayoutDescriptor7Builder8DataItemENSA_10EqualsItemENSA_12IndirectItemENSA_15ExistentialItemENSA_11HeapRefItemENSA_10NestedItemENSA_8EnumItemEEEELNS0_6_TraitE1EE9__destroyB8ne180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSB_SC_SD_SE_SF_SG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, uint64_t a2)
{
  char *v2;
  unint64_t v4;
  char *v5;
  void *v6;
  char *v7;
  void *v8;
  unint64_t v9;

  v2 = *(char **)(a2 + 24);
  if (*(_QWORD *)(a2 + 32))
  {
    v4 = 0;
    do
    {
      v5 = &v2[40 * v4];
      v8 = (void *)*((_QWORD *)v5 + 2);
      v7 = v5 + 16;
      v6 = v8;
      if (*((_QWORD *)v7 + 1))
      {
        v9 = 0;
        do
        {
          ++v9;
          v6 = (void *)(std::__variant_detail::__dtor<std::__variant_detail::__traits<AG::LayoutDescriptor::Builder::DataItem,AG::LayoutDescriptor::Builder::EqualsItem,AG::LayoutDescriptor::Builder::IndirectItem,AG::LayoutDescriptor::Builder::ExistentialItem,AG::LayoutDescriptor::Builder::HeapRefItem,AG::LayoutDescriptor::Builder::NestedItem,AG::LayoutDescriptor::Builder::EnumItem>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)v6)
                      + 56);
        }
        while (v9 < *((_QWORD *)v7 + 1));
        v6 = *(void **)v7;
      }
      if (v6)
        free(v6);
      ++v4;
    }
    while (v4 < *(_QWORD *)(a2 + 32));
    v2 = *(char **)(a2 + 24);
  }
  if (v2)
    free(v2);
}

void std::__throw_bad_variant_access[abi:ne180100]()
{
  _QWORD *exception;

  exception = __cxa_allocate_exception(8uLL);
  *exception = MEMORY[0x1E0DE5040] + 16;
}

void *std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<AG::LayoutDescriptor::Builder::Emitter<AG::vector<unsigned char,512ul,unsigned long>> &> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,AG::LayoutDescriptor::Builder::DataItem,AG::LayoutDescriptor::Builder::EqualsItem,AG::LayoutDescriptor::Builder::IndirectItem,AG::LayoutDescriptor::Builder::ExistentialItem,AG::LayoutDescriptor::Builder::HeapRefItem,AG::LayoutDescriptor::Builder::NestedItem,AG::LayoutDescriptor::Builder::EnumItem> const&>(uint64_t *a1, unint64_t *a2)
{
  return AG::LayoutDescriptor::Builder::Emitter<AG::vector<unsigned char,512ul,unsigned long>>::operator()(*a1, a2);
}

void *std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<AG::LayoutDescriptor::Builder::Emitter<AG::vector<unsigned char,512ul,unsigned long>> &> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,AG::LayoutDescriptor::Builder::DataItem,AG::LayoutDescriptor::Builder::EqualsItem,AG::LayoutDescriptor::Builder::IndirectItem,AG::LayoutDescriptor::Builder::ExistentialItem,AG::LayoutDescriptor::Builder::HeapRefItem,AG::LayoutDescriptor::Builder::NestedItem,AG::LayoutDescriptor::Builder::EnumItem> const&>(uint64_t **a1, unint64_t *a2)
{
  return AG::LayoutDescriptor::Builder::Emitter<AG::vector<unsigned char,512ul,unsigned long>>::operator()(*a1, a2);
}

void *std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<AG::LayoutDescriptor::Builder::Emitter<AG::vector<unsigned char,512ul,unsigned long>> &> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,AG::LayoutDescriptor::Builder::DataItem,AG::LayoutDescriptor::Builder::EqualsItem,AG::LayoutDescriptor::Builder::IndirectItem,AG::LayoutDescriptor::Builder::ExistentialItem,AG::LayoutDescriptor::Builder::HeapRefItem,AG::LayoutDescriptor::Builder::NestedItem,AG::LayoutDescriptor::Builder::EnumItem> const&>(uint64_t **a1, unint64_t *a2)
{
  return AG::LayoutDescriptor::Builder::Emitter<AG::vector<unsigned char,512ul,unsigned long>>::operator()(*a1, a2);
}

void *std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<AG::LayoutDescriptor::Builder::Emitter<AG::vector<unsigned char,512ul,unsigned long>> &> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,AG::LayoutDescriptor::Builder::DataItem,AG::LayoutDescriptor::Builder::EqualsItem,AG::LayoutDescriptor::Builder::IndirectItem,AG::LayoutDescriptor::Builder::ExistentialItem,AG::LayoutDescriptor::Builder::HeapRefItem,AG::LayoutDescriptor::Builder::NestedItem,AG::LayoutDescriptor::Builder::EnumItem> const&>(uint64_t **a1, unint64_t *a2)
{
  return AG::LayoutDescriptor::Builder::Emitter<AG::vector<unsigned char,512ul,unsigned long>>::operator()(*a1, a2);
}

void *std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<AG::LayoutDescriptor::Builder::Emitter<AG::vector<unsigned char,512ul,unsigned long>> &> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,AG::LayoutDescriptor::Builder::DataItem,AG::LayoutDescriptor::Builder::EqualsItem,AG::LayoutDescriptor::Builder::IndirectItem,AG::LayoutDescriptor::Builder::ExistentialItem,AG::LayoutDescriptor::Builder::HeapRefItem,AG::LayoutDescriptor::Builder::NestedItem,AG::LayoutDescriptor::Builder::EnumItem> const&>(uint64_t **a1, uint64_t a2)
{
  return AG::LayoutDescriptor::Builder::Emitter<AG::vector<unsigned char,512ul,unsigned long>>::operator()(*a1, a2);
}

char *std::__variant_detail::__visitation::__base::__dispatcher<5ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<AG::LayoutDescriptor::Builder::Emitter<AG::vector<unsigned char,512ul,unsigned long>> &> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,AG::LayoutDescriptor::Builder::DataItem,AG::LayoutDescriptor::Builder::EqualsItem,AG::LayoutDescriptor::Builder::IndirectItem,AG::LayoutDescriptor::Builder::ExistentialItem,AG::LayoutDescriptor::Builder::HeapRefItem,AG::LayoutDescriptor::Builder::NestedItem,AG::LayoutDescriptor::Builder::EnumItem> const&>(uint64_t **a1, uint64_t a2)
{
  return AG::LayoutDescriptor::Builder::Emitter<AG::vector<unsigned char,512ul,unsigned long>>::operator()(*a1, a2);
}

void *std::__variant_detail::__visitation::__base::__dispatcher<6ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<AG::LayoutDescriptor::Builder::Emitter<AG::vector<unsigned char,512ul,unsigned long>> &> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,AG::LayoutDescriptor::Builder::DataItem,AG::LayoutDescriptor::Builder::EqualsItem,AG::LayoutDescriptor::Builder::IndirectItem,AG::LayoutDescriptor::Builder::ExistentialItem,AG::LayoutDescriptor::Builder::HeapRefItem,AG::LayoutDescriptor::Builder::NestedItem,AG::LayoutDescriptor::Builder::EnumItem> const&>(uint64_t **a1, unint64_t *a2)
{
  return AG::LayoutDescriptor::Builder::Emitter<AG::vector<unsigned char,512ul,unsigned long>>::operator()(*a1, a2);
}

char *AG::`anonymous namespace'::print_layouts(void)::$_0::operator()()
{
  char *result;

  result = getenv("AG_PRINT_LAYOUTS");
  if (result)
    return (char *)atoi(result);
  return result;
}

BOOL AG::`anonymous namespace'::TypeDescriptorCache::fetch(AG::swift::metadata const*,unsigned int,AG::LayoutDescriptor::HeapMode,int)::$_0::operator()()
{
  char *v0;

  v0 = getenv("AG_ASYNC_LAYOUTS");
  return !v0 || atoi(v0) != 0;
}

uint64_t std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,std::less<AG::`anonymous namespace'::TypeDescriptorCache::QueueEntry> &,AG::`anonymous namespace'::TypeDescriptorCache::QueueEntry*>(uint64_t result, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v4;
  int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  _OWORD *v9;
  uint64_t v10;
  int v11;

  v3 = a3 - 2;
  if (a3 >= 2)
  {
    v4 = v3 >> 1;
    v5 = *(_DWORD *)(result + 16 * (v3 >> 1) + 12);
    v6 = *(_DWORD *)(a2 - 4);
    if (v5 < v6)
    {
      v8 = *(_QWORD *)(a2 - 16);
      v7 = a2 - 16;
      v10 = v8;
      v11 = *(_DWORD *)(v7 + 8);
      do
      {
        v9 = (_OWORD *)v7;
        v7 = result + 16 * v4;
        *v9 = *(_OWORD *)v7;
        if (!v4)
          break;
        v4 = (v4 - 1) >> 1;
      }
      while (*(_DWORD *)(result + 16 * v4 + 12) < v6);
      *(_QWORD *)v7 = v10;
      *(_DWORD *)(v7 + 8) = v11;
      *(_DWORD *)(v7 + 12) = v6;
    }
  }
  return result;
}

void *AG::vector<std::pair<void const*,AGComparisonMode>,0ul,unsigned long>::reserve_slow(uint64_t a1, unint64_t a2)
{
  uint64_t v3;
  void *result;

  if (*(_QWORD *)(a1 + 16) + (*(_QWORD *)(a1 + 16) >> 1) <= a2)
    v3 = a2;
  else
    v3 = *(_QWORD *)(a1 + 16) + (*(_QWORD *)(a1 + 16) >> 1);
  result = AG::details::realloc_vector<unsigned long,16ul>(*(void **)a1, (size_t *)(a1 + 16), v3);
  *(_QWORD *)a1 = result;
  return result;
}

void *AG::details::realloc_vector<unsigned long,16ul>(void *a1, size_t *a2, uint64_t a3)
{
  void *v4;
  size_t v5;
  size_t v6;
  void *v7;
  const char *v8;

  v4 = a1;
  if (a3)
  {
    v5 = malloc_good_size(16 * a3);
    v6 = v5 >> 4;
    if (v5 >> 4 != *a2)
    {
      v7 = malloc_type_realloc(v4, v5, 0xF3138078uLL);
      if (!v7)
        AG::precondition_failure((AG *)"allocation failure", v8);
      v4 = v7;
      *a2 = v6;
    }
  }
  else
  {
    *a2 = 0;
    free(a1);
    return 0;
  }
  return v4;
}

uint64_t AG::Graph::breadth_first_search(uint64_t a1, unsigned int a2, char a3, uint64_t (*a4)(uint64_t))
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  unint64_t v9;
  unsigned int *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unsigned int *v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unsigned int *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _OWORD v33[2];
  __int128 v34;
  _OWORD v35[2];
  int v36;
  unsigned int v37;
  unsigned int v38;

  v37 = a2;
  memset(v35, 0, sizeof(v35));
  v36 = 1065353216;
  v34 = 0u;
  memset(v33, 0, sizeof(v33));
  if ((a2 & 3) != 0)
    a2 = AG::AttributeID::resolve_slow((AG::AttributeID *)&v37, (const char *)4);
  v37 = a2;
  if (a2 >= 4)
  {
    std::__hash_table<AG::AttributeID,std::hash<AG::AttributeID>,std::equal_to<AG::AttributeID>,std::allocator<AG::AttributeID>>::__emplace_unique_key_args<AG::AttributeID,AG::AttributeID const&>((uint64_t)v35, &v37, &v37);
    std::deque<AG::AttributeID>::push_back(v33, &v37);
    v6 = *((_QWORD *)&v34 + 1);
    if (*((_QWORD *)&v34 + 1))
    {
      while (1)
      {
        v7 = *(unsigned int *)(*(_QWORD *)(*((_QWORD *)&v33[0] + 1)
                                         + (((unint64_t)v34 >> 7) & 0x1FFFFFFFFFFFFF8))
                             + 4 * (v34 & 0x3FF));
        *(_QWORD *)&v34 = v34 + 1;
        *((_QWORD *)&v34 + 1) = v6 - 1;
        if ((unint64_t)v34 >= 0x800)
        {
          operator delete(**((void ***)&v33[0] + 1));
          *((_QWORD *)&v33[0] + 1) += 8;
          *(_QWORD *)&v34 = v34 - 1024;
        }
        v8 = v7 & 3;
        if ((v7 & 3) == 0 && (a4(v7) & 1) != 0)
        {
          v31 = 1;
          goto LABEL_66;
        }
        if ((a3 & 1) == 0)
          goto LABEL_10;
        if (v8 != 2)
          break;
LABEL_53:
        v6 = *((_QWORD *)&v34 + 1);
        if (!*((_QWORD *)&v34 + 1))
          goto LABEL_65;
      }
      if (v8 == 1)
      {
        v28 = *(_DWORD *)(AG::data::_shared_table_bytes + (v7 & 0xFFFFFFFC));
        v38 = v28;
        if ((v28 & 3) != 0)
          v28 = AG::AttributeID::resolve_slow((AG::AttributeID *)&v38, (const char *)4);
        v38 = v28;
        if (!std::__hash_table<std::__hash_value_type<AG::data::ptr<AG::Node>,AG::Graph::ProfileData::Item>,std::__unordered_map_hasher<AG::data::ptr<AG::Node>,std::__hash_value_type<AG::data::ptr<AG::Node>,AG::Graph::ProfileData::Item>,std::hash<AG::data::ptr<AG::Node>>,std::equal_to<AG::data::ptr<AG::Node>>,true>,std::__unordered_map_equal<AG::data::ptr<AG::Node>,std::__hash_value_type<AG::data::ptr<AG::Node>,AG::Graph::ProfileData::Item>,std::equal_to<AG::data::ptr<AG::Node>>,std::hash<AG::data::ptr<AG::Node>>,true>,std::allocator<std::__hash_value_type<AG::data::ptr<AG::Node>,AG::Graph::ProfileData::Item>>>::find<AG::data::ptr<AG::Node>>(v35, &v38))
        {
          if ((a3 & 4) != 0)
            goto LABEL_64;
          v29 = *(_QWORD *)(AG::data::_shared_table_bytes + (v7 & 0xFFFFFE00));
          if (v29)
            v29 = *(_QWORD *)(v29 + 48);
          v30 = *(_QWORD *)(AG::data::_shared_table_bytes + (v38 & 0xFFFFFE00));
          if (v30)
            v30 = *(_QWORD *)(v30 + 48);
          if (v29 == v30)
          {
LABEL_64:
            std::__hash_table<AG::AttributeID,std::hash<AG::AttributeID>,std::equal_to<AG::AttributeID>,std::allocator<AG::AttributeID>>::__emplace_unique_key_args<AG::AttributeID,AG::AttributeID const&>((uint64_t)v35, &v38, &v38);
            std::deque<AG::AttributeID>::push_back(v33, &v38);
          }
        }
      }
      else if ((v7 & 3) == 0)
      {
        v15 = *(unsigned int *)(AG::data::_shared_table_bytes + v7 + 12);
        if (v15 >= 0x20)
        {
          v16 = (unsigned int *)(AG::data::_shared_table_bytes
                               + *(unsigned int *)(AG::data::_shared_table_bytes + v7 + 16));
          v17 = 5 * (v15 >> 5);
          do
          {
            v18 = *v16;
            v38 = v18;
            if ((v18 & 3) != 0)
              v18 = AG::AttributeID::resolve_slow((AG::AttributeID *)&v38, (const char *)4);
            v38 = v18;
            if (!std::__hash_table<std::__hash_value_type<AG::data::ptr<AG::Node>,AG::Graph::ProfileData::Item>,std::__unordered_map_hasher<AG::data::ptr<AG::Node>,std::__hash_value_type<AG::data::ptr<AG::Node>,AG::Graph::ProfileData::Item>,std::hash<AG::data::ptr<AG::Node>>,std::equal_to<AG::data::ptr<AG::Node>>,true>,std::__unordered_map_equal<AG::data::ptr<AG::Node>,std::__hash_value_type<AG::data::ptr<AG::Node>,AG::Graph::ProfileData::Item>,std::equal_to<AG::data::ptr<AG::Node>>,std::hash<AG::data::ptr<AG::Node>>,true>,std::allocator<std::__hash_value_type<AG::data::ptr<AG::Node>,AG::Graph::ProfileData::Item>>>::find<AG::data::ptr<AG::Node>>(v35, &v38))
            {
              if ((a3 & 4) != 0)
                goto LABEL_39;
              v19 = *(_QWORD *)(AG::data::_shared_table_bytes + (v7 & 0xFFFFFE00));
              if (v19)
                v19 = *(_QWORD *)(v19 + 48);
              v20 = *(_QWORD *)(AG::data::_shared_table_bytes + (v38 & 0xFFFFFE00));
              if (v20)
                v20 = *(_QWORD *)(v20 + 48);
              if (v19 == v20)
              {
LABEL_39:
                std::__hash_table<AG::AttributeID,std::hash<AG::AttributeID>,std::equal_to<AG::AttributeID>,std::allocator<AG::AttributeID>>::__emplace_unique_key_args<AG::AttributeID,AG::AttributeID const&>((uint64_t)v35, &v38, &v38);
                std::deque<AG::AttributeID>::push_back(v33, &v38);
              }
            }
            v16 = (unsigned int *)((char *)v16 + 5);
            v17 -= 5;
          }
          while (v17);
        }
      }
LABEL_10:
      if ((a3 & 2) != 0)
      {
        if (v8 == 1)
        {
          v21 = AG::data::_shared_table_bytes + (v7 & 0xFFFFFFFC);
          v22 = *(unsigned int *)(v21 + 20);
          if (v22 >= 0x20)
          {
            v23 = (unsigned int *)(AG::data::_shared_table_bytes + *(unsigned int *)(v21 + 24));
            v24 = v7 & 0xFFFFFE00;
            v25 = 4 * (v22 >> 5);
            do
            {
              v38 = *v23;
              if (!std::__hash_table<std::__hash_value_type<AG::data::ptr<AG::Node>,AG::Graph::ProfileData::Item>,std::__unordered_map_hasher<AG::data::ptr<AG::Node>,std::__hash_value_type<AG::data::ptr<AG::Node>,AG::Graph::ProfileData::Item>,std::hash<AG::data::ptr<AG::Node>>,std::equal_to<AG::data::ptr<AG::Node>>,true>,std::__unordered_map_equal<AG::data::ptr<AG::Node>,std::__hash_value_type<AG::data::ptr<AG::Node>,AG::Graph::ProfileData::Item>,std::equal_to<AG::data::ptr<AG::Node>>,std::hash<AG::data::ptr<AG::Node>>,true>,std::allocator<std::__hash_value_type<AG::data::ptr<AG::Node>,AG::Graph::ProfileData::Item>>>::find<AG::data::ptr<AG::Node>>(v35, &v38))
              {
                if ((a3 & 4) != 0)
                  goto LABEL_51;
                v26 = *(_QWORD *)(AG::data::_shared_table_bytes + (v38 & 0xFFFFFE00));
                if (v26)
                  v26 = *(_QWORD *)(v26 + 48);
                v27 = *(_QWORD *)(AG::data::_shared_table_bytes + v24);
                if (v27)
                  v27 = *(_QWORD *)(v27 + 48);
                if (v26 == v27)
                {
LABEL_51:
                  std::__hash_table<AG::AttributeID,std::hash<AG::AttributeID>,std::equal_to<AG::AttributeID>,std::allocator<AG::AttributeID>>::__emplace_unique_key_args<AG::AttributeID,AG::AttributeID const&>((uint64_t)v35, &v38, &v38);
                  std::deque<AG::AttributeID>::push_back(v33, &v38);
                }
              }
              ++v23;
              v25 -= 4;
            }
            while (v25);
          }
        }
        else if ((v7 & 3) == 0)
        {
          v9 = *(unsigned int *)(AG::data::_shared_table_bytes + v7 + 20);
          if (v9 >= 0x20)
          {
            v10 = (unsigned int *)(AG::data::_shared_table_bytes
                                 + *(unsigned int *)(AG::data::_shared_table_bytes + v7 + 24));
            v11 = v7 & 0xFFFFFE00;
            v12 = 4 * (v9 >> 5);
            do
            {
              v38 = *v10;
              if (!std::__hash_table<std::__hash_value_type<AG::data::ptr<AG::Node>,AG::Graph::ProfileData::Item>,std::__unordered_map_hasher<AG::data::ptr<AG::Node>,std::__hash_value_type<AG::data::ptr<AG::Node>,AG::Graph::ProfileData::Item>,std::hash<AG::data::ptr<AG::Node>>,std::equal_to<AG::data::ptr<AG::Node>>,true>,std::__unordered_map_equal<AG::data::ptr<AG::Node>,std::__hash_value_type<AG::data::ptr<AG::Node>,AG::Graph::ProfileData::Item>,std::equal_to<AG::data::ptr<AG::Node>>,std::hash<AG::data::ptr<AG::Node>>,true>,std::allocator<std::__hash_value_type<AG::data::ptr<AG::Node>,AG::Graph::ProfileData::Item>>>::find<AG::data::ptr<AG::Node>>(v35, &v38))
              {
                if ((a3 & 4) != 0)
                  goto LABEL_22;
                v13 = *(_QWORD *)(AG::data::_shared_table_bytes + (v38 & 0xFFFFFE00));
                if (v13)
                  v13 = *(_QWORD *)(v13 + 48);
                v14 = *(_QWORD *)(AG::data::_shared_table_bytes + v11);
                if (v14)
                  v14 = *(_QWORD *)(v14 + 48);
                if (v13 == v14)
                {
LABEL_22:
                  std::__hash_table<AG::AttributeID,std::hash<AG::AttributeID>,std::equal_to<AG::AttributeID>,std::allocator<AG::AttributeID>>::__emplace_unique_key_args<AG::AttributeID,AG::AttributeID const&>((uint64_t)v35, &v38, &v38);
                  std::deque<AG::AttributeID>::push_back(v33, &v38);
                }
              }
              ++v10;
              v12 -= 4;
            }
            while (v12);
          }
        }
      }
      goto LABEL_53;
    }
  }
LABEL_65:
  v31 = 0;
LABEL_66:
  std::deque<AG::AttributeID>::~deque[abi:ne180100](v33);
  std::__hash_table<std::__hash_value_type<unsigned long,AG::Graph::ProfileTrace::UpdateData>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,AG::Graph::ProfileTrace::UpdateData>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,AG::Graph::ProfileTrace::UpdateData>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,AG::Graph::ProfileTrace::UpdateData>>>::~__hash_table((uint64_t)v35);
  return v31;
}

void sub_1AB94F59C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  std::deque<AG::AttributeID>::~deque[abi:ne180100](&a9);
  std::__hash_table<std::__hash_value_type<unsigned long,AG::Graph::ProfileTrace::UpdateData>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,AG::Graph::ProfileTrace::UpdateData>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,AG::Graph::ProfileTrace::UpdateData>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,AG::Graph::ProfileTrace::UpdateData>>>::~__hash_table((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t std::deque<AG::AttributeID>::~deque[abi:ne180100](_QWORD *a1)
{
  void **v2;
  void **v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  void *v7;

  v2 = (void **)a1[1];
  v3 = (void **)a1[2];
  a1[5] = 0;
  v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = (void **)a1[2];
      v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v5 = v4 >> 3;
  if (v5 == 1)
  {
    v6 = 512;
  }
  else
  {
    if (v5 != 2)
      goto LABEL_9;
    v6 = 1024;
  }
  a1[4] = v6;
LABEL_9:
  while (v2 != v3)
  {
    v7 = *v2++;
    operator delete(v7);
  }
  return std::__split_buffer<AG::AttributeID *>::~__split_buffer((uint64_t)a1);
}

uint64_t std::__split_buffer<AG::AttributeID *>::~__split_buffer(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != v3)
    *(_QWORD *)(a1 + 16) = v2 + ((v3 - v2 + 7) & 0xFFFFFFFFFFFFFFF8);
  v4 = *(void **)a1;
  if (*(_QWORD *)a1)
    operator delete(v4);
  return a1;
}

_QWORD *std::__hash_table<AG::AttributeID,std::hash<AG::AttributeID>,std::equal_to<AG::AttributeID>,std::allocator<AG::AttributeID>>::__emplace_unique_key_args<AG::AttributeID,AG::AttributeID const&>(uint64_t a1, unsigned int *a2, _DWORD *a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  void **v9;
  _QWORD *v10;
  unint64_t v11;
  float v12;
  float v13;
  _BOOL8 v14;
  unint64_t v15;
  unint64_t v16;
  size_t v17;
  uint64_t v18;
  _QWORD *v19;
  unint64_t v20;

  v6 = *a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = *a2;
      if (v7 <= v6)
        v3 = v6 % v7;
    }
    else
    {
      v3 = ((_DWORD)v7 - 1) & v6;
    }
    v9 = *(void ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      v10 = *v9;
      if (*v9)
      {
        do
        {
          v11 = v10[1];
          if (v11 == v6)
          {
            if (*((_DWORD *)v10 + 4) == (_DWORD)v6)
              return v10;
          }
          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v11 >= v7)
                v11 %= v7;
            }
            else
            {
              v11 &= v7 - 1;
            }
            if (v11 != v3)
              break;
          }
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
    }
  }
  v10 = operator new(0x18uLL);
  *v10 = 0;
  v10[1] = v6;
  *((_DWORD *)v10 + 4) = *a3;
  v12 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v13 = *(float *)(a1 + 32);
  if (!v7 || (float)(v13 * (float)v7) < v12)
  {
    v14 = 1;
    if (v7 >= 3)
      v14 = (v7 & (v7 - 1)) != 0;
    v15 = v14 | (2 * v7);
    v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16)
      v17 = v16;
    else
      v17 = v15;
    std::__hash_table<std::__hash_value_type<unsigned int,AG::Graph::ProfileData::Item>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,AG::Graph::ProfileData::Item>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,AG::Graph::ProfileData::Item>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,AG::Graph::ProfileData::Item>>>::__rehash<true>(a1, v17);
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6)
        v3 = v6 % v7;
      else
        v3 = v6;
    }
    else
    {
      v3 = ((_DWORD)v7 - 1) & v6;
    }
  }
  v18 = *(_QWORD *)a1;
  v19 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v19)
  {
    *v10 = *v19;
LABEL_38:
    *v19 = v10;
    goto LABEL_39;
  }
  *v10 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v10;
  *(_QWORD *)(v18 + 8 * v3) = a1 + 16;
  if (*v10)
  {
    v20 = *(_QWORD *)(*v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v20 >= v7)
        v20 %= v7;
    }
    else
    {
      v20 &= v7 - 1;
    }
    v19 = (_QWORD *)(*(_QWORD *)a1 + 8 * v20);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return v10;
}

void sub_1AB94F8B8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::deque<AG::AttributeID>::push_back(_QWORD *a1, _DWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;

  v4 = a1[2];
  v5 = a1[1];
  if (v4 == v5)
    v6 = 0;
  else
    v6 = ((v4 - v5) << 7) - 1;
  v7 = a1[5];
  v8 = v7 + a1[4];
  if (v6 == v8)
  {
    std::deque<AG::AttributeID>::__add_back_capacity(a1);
    v5 = a1[1];
    v7 = a1[5];
    v8 = a1[4] + v7;
  }
  *(_DWORD *)(*(_QWORD *)(v5 + ((v8 >> 7) & 0x1FFFFFFFFFFFFF8)) + 4 * (v8 & 0x3FF)) = *a2;
  a1[5] = v7 + 1;
}

void std::deque<AG::AttributeID>::__add_back_capacity(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void *v53;
  __int128 v54;
  __int128 v55;
  _QWORD *v56;

  v2 = a1[4];
  v3 = v2 >= 0x400;
  v4 = v2 - 1024;
  if (v3)
  {
    v5 = (uint64_t)(a1 + 3);
    v6 = (char *)a1[3];
    a1[4] = v4;
    v7 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v11 = *v7;
    v9 = (char *)(v7 + 1);
    v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(_QWORD *)v8 = v10;
      a1[2] += 8;
      return;
    }
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v33 = 1;
      else
        v33 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<AG::AttributeID *>>(v5, v33);
      v35 = &v34[8 * (v33 >> 2)];
      v37 = &v34[8 * v36];
      v38 = (uint64_t *)a1[1];
      v8 = v35;
      v39 = a1[2] - (_QWORD)v38;
      if (v39)
      {
        v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        v40 = 8 * (v39 >> 3);
        v41 = &v34[8 * (v33 >> 2)];
        do
        {
          v42 = *v38++;
          *(_QWORD *)v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    v13 = v12 >> 3;
    v14 = v12 >> 3 < -1;
    v15 = (v12 >> 3) + 2;
    if (v14)
      v16 = v15;
    else
      v16 = v13 + 1;
    v17 = -(v16 >> 1);
    v18 = v16 >> 1;
    v19 = &v9[-8 * v18];
    v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      v9 = (char *)a1[1];
    }
    v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  v21 = a1[2];
  v22 = (v21 - a1[1]) >> 3;
  v23 = a1[3];
  v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(_QWORD *)&v54 = operator new(0x1000uLL);
      std::__split_buffer<AG::AttributeID *>::push_back(a1, &v54);
      return;
    }
    *(_QWORD *)&v54 = operator new(0x1000uLL);
    std::__split_buffer<AG::AttributeID *>::push_front((uint64_t)a1, &v54);
    v44 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v45 = *v44;
    v9 = (char *)(v44 + 1);
    v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3])
      goto LABEL_33;
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v46 = 1;
      else
        v46 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<AG::AttributeID *>>((uint64_t)(a1 + 3), v46);
      v35 = &v34[8 * (v46 >> 2)];
      v37 = &v34[8 * v47];
      v48 = (uint64_t *)a1[1];
      v8 = v35;
      v49 = a1[2] - (_QWORD)v48;
      if (v49)
      {
        v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        v50 = 8 * (v49 >> 3);
        v51 = &v34[8 * (v46 >> 2)];
        do
        {
          v52 = *v48++;
          *(_QWORD *)v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1)
    v25 = 1;
  else
    v25 = v24 >> 2;
  v56 = a1 + 3;
  *(_QWORD *)&v54 = std::__allocate_at_least[abi:ne180100]<std::allocator<AG::AttributeID *>>((uint64_t)(a1 + 3), v25);
  *((_QWORD *)&v54 + 1) = v54 + 8 * v22;
  *(_QWORD *)&v55 = *((_QWORD *)&v54 + 1);
  *((_QWORD *)&v55 + 1) = v54 + 8 * v26;
  v53 = operator new(0x1000uLL);
  std::__split_buffer<AG::AttributeID *>::push_back(&v54, &v53);
  v27 = (_QWORD *)a1[2];
  v28 = -7 - (_QWORD)v27;
  while (v27 != (_QWORD *)a1[1])
  {
    --v27;
    v28 += 8;
    std::__split_buffer<AG::AttributeID *>::push_front((uint64_t)&v54, v27);
  }
  v29 = (char *)*a1;
  v30 = v54;
  v31 = v55;
  *(_QWORD *)&v54 = *a1;
  *((_QWORD *)&v54 + 1) = v27;
  v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  v55 = v32;
  if (v27 != (_QWORD *)v32)
    *(_QWORD *)&v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  if (v29)
    operator delete(v29);
}

void sub_1AB94FC18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  void *v13;

  operator delete(v13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void std::__split_buffer<AG::AttributeID *>::push_back(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  int64_t v16;
  char *v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;

  v5 = (char *)a1[3];
  v4 = (uint64_t)(a1 + 3);
  v6 = *(char **)(v4 - 8);
  if (v6 == v5)
  {
    v7 = (char *)a1[1];
    v8 = (uint64_t)&v7[-*a1];
    if ((unint64_t)v7 <= *a1)
    {
      if (v6 == (char *)*a1)
        v18 = 1;
      else
        v18 = (uint64_t)&v6[-*a1] >> 2;
      v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<AG::AttributeID *>>(v4, v18);
      v21 = &v19[8 * (v18 >> 2)];
      v22 = (uint64_t *)a1[1];
      v6 = v21;
      v23 = a1[2] - (_QWORD)v22;
      if (v23)
      {
        v6 = &v21[v23 & 0xFFFFFFFFFFFFFFF8];
        v24 = 8 * (v23 >> 3);
        v25 = &v19[8 * (v18 >> 2)];
        do
        {
          v26 = *v22++;
          *(_QWORD *)v25 = v26;
          v25 += 8;
          v24 -= 8;
        }
        while (v24);
      }
      v27 = (char *)*a1;
      *a1 = v19;
      a1[1] = v21;
      a1[2] = v6;
      a1[3] = &v19[8 * v20];
      if (v27)
      {
        operator delete(v27);
        v6 = (char *)a1[2];
      }
    }
    else
    {
      v9 = v8 >> 3;
      v10 = v8 >> 3 < -1;
      v11 = (v8 >> 3) + 2;
      if (v10)
        v12 = v11;
      else
        v12 = v9 + 1;
      v13 = -(v12 >> 1);
      v14 = v12 >> 1;
      v15 = &v7[-8 * v14];
      v16 = v6 - v7;
      if (v6 != v7)
      {
        memmove(&v7[-8 * v14], v7, v6 - v7);
        v6 = (char *)a1[1];
      }
      v17 = &v6[8 * v13];
      v6 = &v15[v16];
      a1[1] = v17;
      a1[2] = &v15[v16];
    }
  }
  *(_QWORD *)v6 = *a2;
  a1[2] += 8;
}

{
  char *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  int64_t v14;
  char *v15;
  unint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;

  v4 = (char *)a1[2];
  if (v4 == (char *)a1[3])
  {
    v5 = (char *)a1[1];
    v6 = (uint64_t)&v5[-*a1];
    if ((unint64_t)v5 <= *a1)
    {
      if (v4 == (char *)*a1)
        v16 = 1;
      else
        v16 = (uint64_t)&v4[-*a1] >> 2;
      v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<AG::AttributeID *>>(a1[4], v16);
      v19 = &v17[8 * (v16 >> 2)];
      v20 = (uint64_t *)a1[1];
      v4 = v19;
      v21 = a1[2] - (_QWORD)v20;
      if (v21)
      {
        v4 = &v19[v21 & 0xFFFFFFFFFFFFFFF8];
        v22 = 8 * (v21 >> 3);
        v23 = &v17[8 * (v16 >> 2)];
        do
        {
          v24 = *v20++;
          *(_QWORD *)v23 = v24;
          v23 += 8;
          v22 -= 8;
        }
        while (v22);
      }
      v25 = (char *)*a1;
      *a1 = v17;
      a1[1] = v19;
      a1[2] = v4;
      a1[3] = &v17[8 * v18];
      if (v25)
      {
        operator delete(v25);
        v4 = (char *)a1[2];
      }
    }
    else
    {
      v7 = v6 >> 3;
      v8 = v6 >> 3 < -1;
      v9 = (v6 >> 3) + 2;
      if (v8)
        v10 = v9;
      else
        v10 = v7 + 1;
      v11 = -(v10 >> 1);
      v12 = v10 >> 1;
      v13 = &v5[-8 * v12];
      v14 = v4 - v5;
      if (v4 != v5)
      {
        memmove(&v5[-8 * v12], v5, v4 - v5);
        v4 = (char *)a1[1];
      }
      v15 = &v4[8 * v11];
      v4 = &v13[v14];
      a1[1] = v15;
      a1[2] = &v13[v14];
    }
  }
  *(_QWORD *)v4 = *a2;
  a1[2] += 8;
}

void std::__split_buffer<AG::AttributeID *>::push_front(uint64_t a1, _QWORD *a2)
{
  char *v4;
  char *v5;
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;

  v4 = *(char **)(a1 + 8);
  if (v4 == *(char **)a1)
  {
    v6 = a1 + 24;
    v7 = *(_BYTE **)(a1 + 24);
    v8 = *(_BYTE **)(a1 + 16);
    if (v8 >= v7)
    {
      if (v7 == v4)
        v12 = 1;
      else
        v12 = (v7 - v4) >> 2;
      v13 = 2 * v12;
      v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<AG::AttributeID *>>(v6, v12);
      v5 = &v14[(v13 + 6) & 0xFFFFFFFFFFFFFFF8];
      v16 = *(uint64_t **)(a1 + 8);
      v17 = v5;
      v18 = *(_QWORD *)(a1 + 16) - (_QWORD)v16;
      if (v18)
      {
        v17 = &v5[v18 & 0xFFFFFFFFFFFFFFF8];
        v19 = 8 * (v18 >> 3);
        v20 = v5;
        do
        {
          v21 = *v16++;
          *(_QWORD *)v20 = v21;
          v20 += 8;
          v19 -= 8;
        }
        while (v19);
      }
      v22 = *(char **)a1;
      *(_QWORD *)a1 = v14;
      *(_QWORD *)(a1 + 8) = v5;
      *(_QWORD *)(a1 + 16) = v17;
      *(_QWORD *)(a1 + 24) = &v14[8 * v15];
      if (v22)
      {
        operator delete(v22);
        v5 = *(char **)(a1 + 8);
      }
    }
    else
    {
      v9 = (v7 - v8) >> 3;
      if (v9 >= -1)
        v10 = v9 + 1;
      else
        v10 = v9 + 2;
      v11 = v10 >> 1;
      v5 = &v4[8 * (v10 >> 1)];
      if (v8 != v4)
      {
        memmove(&v4[8 * (v10 >> 1)], v4, v8 - v4);
        v4 = *(char **)(a1 + 16);
      }
      *(_QWORD *)(a1 + 8) = v5;
      *(_QWORD *)(a1 + 16) = &v4[8 * v11];
    }
  }
  else
  {
    v5 = *(char **)(a1 + 8);
  }
  *((_QWORD *)v5 - 1) = *a2;
  *(_QWORD *)(a1 + 8) -= 8;
}

{
  char *v4;
  char *v5;
  _BYTE *v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;

  v4 = *(char **)(a1 + 8);
  if (v4 == *(char **)a1)
  {
    v6 = *(_BYTE **)(a1 + 16);
    v7 = *(_BYTE **)(a1 + 24);
    if (v6 >= v7)
    {
      if (v7 == v4)
        v11 = 1;
      else
        v11 = (v7 - v4) >> 2;
      v12 = 2 * v11;
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<AG::AttributeID *>>(*(_QWORD *)(a1 + 32), v11);
      v5 = &v13[(v12 + 6) & 0xFFFFFFFFFFFFFFF8];
      v15 = *(uint64_t **)(a1 + 8);
      v16 = v5;
      v17 = *(_QWORD *)(a1 + 16) - (_QWORD)v15;
      if (v17)
      {
        v16 = &v5[v17 & 0xFFFFFFFFFFFFFFF8];
        v18 = 8 * (v17 >> 3);
        v19 = v5;
        do
        {
          v20 = *v15++;
          *(_QWORD *)v19 = v20;
          v19 += 8;
          v18 -= 8;
        }
        while (v18);
      }
      v21 = *(char **)a1;
      *(_QWORD *)a1 = v13;
      *(_QWORD *)(a1 + 8) = v5;
      *(_QWORD *)(a1 + 16) = v16;
      *(_QWORD *)(a1 + 24) = &v13[8 * v14];
      if (v21)
      {
        operator delete(v21);
        v5 = *(char **)(a1 + 8);
      }
    }
    else
    {
      v8 = (v7 - v6) >> 3;
      if (v8 >= -1)
        v9 = v8 + 1;
      else
        v9 = v8 + 2;
      v10 = v9 >> 1;
      v5 = &v4[8 * (v9 >> 1)];
      if (v6 != v4)
      {
        memmove(&v4[8 * (v9 >> 1)], v4, v6 - v4);
        v4 = *(char **)(a1 + 16);
      }
      *(_QWORD *)(a1 + 8) = v5;
      *(_QWORD *)(a1 + 16) = &v4[8 * v10];
    }
  }
  else
  {
    v5 = *(char **)(a1 + 8);
  }
  *((_QWORD *)v5 - 1) = *a2;
  *(_QWORD *)(a1 + 8) -= 8;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<AG::AttributeID *>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 61)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(8 * a2);
}

uint64_t AG::IndirectNode::modify(uint64_t result, uint64_t a2, int a3)
{
  *(_QWORD *)result = a2;
  *(_DWORD *)(result + 8) = *(_DWORD *)(result + 8) & 3 | (4 * a3);
  return result;
}

const __CFString *AG::Graph::encode_node(const __CFString *this, AG::Encoder *a2, const AG::Node *a3, int a4)
{
  const __CFString *v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t (*v10)(void);
  const __CFString *v11;
  CFIndex v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  char *v16;
  unint64_t v17;
  char v18;
  unint64_t v19;
  unsigned int *v20;
  uint64_t v21;
  unint64_t v22;
  int v23;
  unint64_t v24;
  unint64_t v25;
  int v26;
  int v27;
  char v28;
  CFIndex usedBufLen;
  UInt8 buffer[1024];
  uint64_t v31;
  CFRange v32;

  v7 = this;
  v31 = *MEMORY[0x1E0C80C00];
  v8 = *(unsigned int *)a3;
  if (v8 >= 0x100)
  {
    v9 = v8 >> 8;
    AG::Encoder::encode_varint(a2, 8uLL);
    this = (const __CFString *)AG::Encoder::encode_varint(a2, v9);
  }
  if (a4)
  {
    this = *(const __CFString **)((char *)v7[4].isa + (((unint64_t)*(unsigned int *)a3 >> 5) & 0x7FFFFF8));
    v10 = (uint64_t (*)(void))*((_QWORD *)this[1].isa + 4);
    if (v10)
    {
      this = (const __CFString *)v10();
      if (this)
      {
        v11 = this;
        v32.length = CFStringGetLength(this);
        usedBufLen = 0;
        v32.location = 0;
        this = (const __CFString *)CFStringGetBytes(v11, v32, 0x8000100u, 0x3Fu, 1u, buffer, 1024, &usedBufLen);
        v12 = usedBufLen;
        if (usedBufLen)
        {
          AG::Encoder::encode_varint(a2, 0x12uLL);
          this = (const __CFString *)AG::Encoder::encode_data(a2, buffer, v12);
        }
      }
    }
  }
  v13 = AG::data::_shared_table_bytes;
  v14 = *((unsigned int *)a3 + 3);
  if (v14 >= 0x20)
  {
    v15 = 5 * (v14 >> 5);
    v16 = (char *)(*((unsigned int *)a3 + 4) + AG::data::_shared_table_bytes + 4);
    while (1)
    {
      AG::Encoder::encode_varint(a2, 0x1AuLL);
      AG::Encoder::begin_length_delimited(a2);
      v17 = *((unsigned int *)v16 - 1);
      if ((_DWORD)v17)
      {
        AG::Encoder::encode_varint(a2, 8uLL);
        AG::Encoder::encode_varint(a2, v17);
      }
      v18 = *v16;
      if ((*v16 & 1) != 0)
      {
        AG::Encoder::encode_varint(a2, 0x10uLL);
        AG::Encoder::encode_varint(a2, 1uLL);
        v18 = *v16;
        if ((*v16 & 4) == 0)
        {
LABEL_14:
          if ((v18 & 8) != 0)
            goto LABEL_21;
          goto LABEL_15;
        }
      }
      else if ((*v16 & 4) == 0)
      {
        goto LABEL_14;
      }
      AG::Encoder::encode_varint(a2, 0x18uLL);
      AG::Encoder::encode_varint(a2, 1uLL);
      v18 = *v16;
      if ((*v16 & 8) != 0)
      {
LABEL_21:
        AG::Encoder::encode_varint(a2, 0x20uLL);
        AG::Encoder::encode_varint(a2, 1uLL);
        if ((*v16 & 0x10) == 0)
          goto LABEL_17;
LABEL_16:
        AG::Encoder::encode_varint(a2, 0x30uLL);
        AG::Encoder::encode_varint(a2, 1uLL);
        goto LABEL_17;
      }
LABEL_15:
      if ((v18 & 0x10) != 0)
        goto LABEL_16;
LABEL_17:
      this = (const __CFString *)AG::Encoder::end_length_delimited(a2);
      v16 += 5;
      v15 -= 5;
      if (!v15)
      {
        v13 = AG::data::_shared_table_bytes;
        break;
      }
    }
  }
  v19 = *((unsigned int *)a3 + 5);
  if (v19 >= 0x20)
  {
    v20 = (unsigned int *)(v13 + *((unsigned int *)a3 + 6));
    v21 = 4 * (v19 >> 5);
    do
    {
      v22 = *v20;
      AG::Encoder::encode_varint(a2, 0x22uLL);
      AG::Encoder::begin_length_delimited(a2);
      if ((_DWORD)v22)
      {
        AG::Encoder::encode_varint(a2, 8uLL);
        AG::Encoder::encode_varint(a2, v22);
      }
      this = (const __CFString *)AG::Encoder::end_length_delimited(a2);
      ++v20;
      v21 -= 4;
    }
    while (v21);
  }
  v23 = *(_DWORD *)a3;
  if ((*(_DWORD *)a3 & 1) != 0)
  {
    AG::Encoder::encode_varint(a2, 0x28uLL);
    this = (const __CFString *)AG::Encoder::encode_varint(a2, 1uLL);
    v23 = *(_DWORD *)a3;
  }
  if ((v23 & 2) != 0)
  {
    AG::Encoder::encode_varint(a2, 0x30uLL);
    this = (const __CFString *)AG::Encoder::encode_varint(a2, 1uLL);
    v23 = *(_DWORD *)a3;
  }
  v24 = v23 >> 6;
  if (v23 >> 6)
  {
    AG::Encoder::encode_varint(a2, 0x38uLL);
    this = (const __CFString *)AG::Encoder::encode_varint(a2, v24);
  }
  v25 = *((unsigned __int8 *)a3 + 6);
  if (*((_BYTE *)a3 + 6))
  {
    AG::Encoder::encode_varint(a2, 0x40uLL);
    this = (const __CFString *)AG::Encoder::encode_varint(a2, v25);
  }
  v26 = *(_DWORD *)a3;
  if ((*(_DWORD *)a3 & 4) != 0)
  {
    AG::Encoder::encode_varint(a2, 0x48uLL);
    this = (const __CFString *)AG::Encoder::encode_varint(a2, 1uLL);
    v26 = *(_DWORD *)a3;
  }
  if ((v26 & 8) != 0)
  {
    AG::Encoder::encode_varint(a2, 0x50uLL);
    this = (const __CFString *)AG::Encoder::encode_varint(a2, 1uLL);
  }
  if ((*((_BYTE *)a3 + 7) & 0x20) != 0)
  {
    AG::Encoder::encode_varint(a2, 0x58uLL);
    this = (const __CFString *)AG::Encoder::encode_varint(a2, 1uLL);
  }
  v27 = *(_DWORD *)a3;
  if ((*(_DWORD *)a3 & 0x10) != 0)
  {
    AG::Encoder::encode_varint(a2, 0x60uLL);
    this = (const __CFString *)AG::Encoder::encode_varint(a2, 1uLL);
    v27 = *(_DWORD *)a3;
  }
  if ((v27 & 0x20) != 0)
  {
    AG::Encoder::encode_varint(a2, 0x68uLL);
    this = (const __CFString *)AG::Encoder::encode_varint(a2, 1uLL);
  }
  v28 = *((_BYTE *)a3 + 7);
  if ((v28 & 0x10) != 0)
  {
    AG::Encoder::encode_varint(a2, 0x70uLL);
    this = (const __CFString *)AG::Encoder::encode_varint(a2, 1uLL);
    v28 = *((_BYTE *)a3 + 7);
  }
  if ((v28 & 0x40) != 0)
  {
    AG::Encoder::encode_varint(a2, 0x78uLL);
    return (const __CFString *)AG::Encoder::encode_varint(a2, 1uLL);
  }
  return this;
}

_QWORD *AG::Graph::encode_indirect_node(int a1, AG::Encoder *this, unsigned int *a3)
{
  unint64_t v5;
  _QWORD *result;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  int v10;
  unint64_t v11;
  unint64_t v13;
  unint64_t v14;
  unsigned int *v15;
  uint64_t v16;
  unint64_t v17;

  v5 = *a3;
  if ((_DWORD)v5)
  {
    AG::Encoder::encode_varint(this, 8uLL);
    result = AG::Encoder::encode_varint(this, v5);
  }
  v7 = a3[1];
  if ((_DWORD)v7)
  {
    AG::Encoder::encode_varint(this, 0x10uLL);
    result = AG::Encoder::encode_varint(this, v7);
  }
  v8 = a3[2];
  if (v8 >= 4)
  {
    v9 = v8 >> 2;
    AG::Encoder::encode_varint(this, 0x18uLL);
    result = AG::Encoder::encode_varint(this, v9);
  }
  v10 = *((unsigned __int16 *)a3 + 6);
  if (v10 == 0xFFFF)
    v11 = 0;
  else
    v11 = *((unsigned __int16 *)a3 + 6);
  if (v10 != 0xFFFF && (_DWORD)v11 != 0)
  {
    AG::Encoder::encode_varint(this, 0x20uLL);
    result = AG::Encoder::encode_varint(this, v11);
  }
  if ((a3[2] & 1) != 0)
  {
    v13 = a3[4];
    if ((_DWORD)v13)
    {
      AG::Encoder::encode_varint(this, 0x28uLL);
      result = AG::Encoder::encode_varint(this, v13);
    }
    v14 = a3[5];
    if (v14 >= 0x20)
    {
      v15 = (unsigned int *)(AG::data::_shared_table_bytes + a3[6]);
      v16 = 4 * (v14 >> 5);
      do
      {
        v17 = *v15;
        AG::Encoder::encode_varint(this, 0x32uLL);
        AG::Encoder::begin_length_delimited(this);
        if ((_DWORD)v17)
        {
          AG::Encoder::encode_varint(this, 8uLL);
          AG::Encoder::encode_varint(this, v17);
        }
        result = AG::Encoder::end_length_delimited(this);
        ++v15;
        v16 -= 4;
      }
      while (v16);
    }
  }
  return result;
}

_QWORD *AG::Graph::encode_tree(uint64_t a1, AG::Encoder *a2, unsigned int a3)
{
  unsigned int *v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t i;
  uint64_t j;
  unsigned int *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD *result;
  _QWORD *v16;
  _DWORD *v17;
  unint64_t v18;
  unint64_t v19;
  unsigned int *v20;
  _DWORD *v21;
  unsigned int v22;
  int *v23;
  unint64_t v24;
  int v25;
  uint64_t v26;

  v6 = (unsigned int *)(AG::data::_shared_table_bytes + a3);
  v7 = v6[2];
  if (v7 >= 4)
  {
    AG::Encoder::encode_varint(a2, 0x10uLL);
    AG::Encoder::encode_varint(a2, v7);
  }
  v8 = v6[3];
  if ((_DWORD)v8)
  {
    AG::Encoder::encode_varint(a2, 0x18uLL);
    AG::Encoder::encode_varint(a2, v8);
  }
  for (i = v6[5]; (_DWORD)i; i = *(unsigned int *)(AG::data::_shared_table_bytes + i + 24))
  {
    AG::Encoder::encode_varint(a2, 0x22uLL);
    AG::Encoder::begin_length_delimited(a2);
    AG::Graph::encode_tree(a1, a2, i);
    AG::Encoder::end_length_delimited(a2);
  }
  for (j = v6[7]; (_DWORD)j; j = v11[5])
  {
    v11 = (unsigned int *)(AG::data::_shared_table_bytes + j);
    AG::Encoder::encode_varint(a2, 0x2AuLL);
    AG::Encoder::begin_length_delimited(a2);
    v12 = v11[2];
    if (v12 >= 4)
    {
      AG::Encoder::encode_varint(a2, 0x10uLL);
      AG::Encoder::encode_varint(a2, v12);
    }
    v13 = v11[3];
    if ((_DWORD)v13)
    {
      AG::Encoder::encode_varint(a2, 0x18uLL);
      AG::Encoder::encode_varint(a2, v13);
    }
    v14 = v11[4];
    if ((_DWORD)v14)
    {
      AG::Encoder::encode_varint(a2, 0x20uLL);
      AG::Encoder::encode_varint(a2, v14);
    }
    AG::Encoder::end_length_delimited(a2);
  }
  result = *(_QWORD **)(a1 + 328);
  if (result)
  {
    v26 = *(_QWORD *)(AG::data::_shared_table_bytes + (a3 & 0xFFFFFE00));
    result = std::__hash_table<std::__hash_value_type<AG::Subgraph *,AG::Graph::TreeDataElement>,std::__unordered_map_hasher<AG::Subgraph *,std::__hash_value_type<AG::Subgraph *,AG::Graph::TreeDataElement>,std::hash<AG::Subgraph *>,std::equal_to<AG::Subgraph *>,true>,std::__unordered_map_equal<AG::Subgraph *,std::__hash_value_type<AG::Subgraph *,AG::Graph::TreeDataElement>,std::equal_to<AG::Subgraph *>,std::hash<AG::Subgraph *>,true>,std::allocator<std::__hash_value_type<AG::Subgraph *,AG::Graph::TreeDataElement>>>::find<AG::Subgraph *>(result, &v26);
    if (result)
    {
      v16 = result;
      result = (_QWORD *)AG::Graph::TreeDataElement::sort_nodes((uint64_t)(result + 3));
      v17 = (_DWORD *)v16[3];
      v18 = v16[4];
      if (v18)
      {
        do
        {
          v19 = v18 >> 1;
          v20 = &v17[2 * (v18 >> 1)];
          v22 = *v20;
          v21 = v20 + 2;
          v18 += ~(v18 >> 1);
          if (v22 < a3)
            v17 = v21;
          else
            v18 = v19;
        }
        while (v18);
        if (!v17)
          return result;
      }
      else if (!v17)
      {
        return result;
      }
      if (*v17 == a3)
      {
        v23 = v17 + 2;
        do
        {
          v24 = *(v23 - 1);
          if ((_DWORD)v24)
          {
            AG::Encoder::encode_varint(a2, 0x30uLL);
            result = AG::Encoder::encode_varint(a2, v24);
          }
          v25 = *v23;
          v23 += 2;
        }
        while (v25 == a3);
      }
    }
  }
  return result;
}

double AGSubgraphRemoveObserver(uint64_t a1, uint64_t a2)
{
  AG::Subgraph *v2;
  double result;

  v2 = *(AG::Subgraph **)(a1 + 16);
  if (v2)
    *(_QWORD *)&result = AG::Subgraph::remove_observer(v2, a2).n128_u64[0];
  return result;
}

AG::Subgraph *AGSubgraphAddChild2(uint64_t a1, uint64_t a2, char a3)
{
  AG::Subgraph *result;
  unint64_t v4;

  result = *(AG::Subgraph **)(a1 + 16);
  if (!result)
    AG::precondition_failure((AG *)"accessing invalidated subgraph", (const char *)a2);
  v4 = *(_QWORD *)(a2 + 16);
  if (v4)
    return (AG::Subgraph *)AG::Subgraph::add_child(result, v4, a3);
  return result;
}

uint64_t AGSubgraphGetChildCount(uint64_t a1, const char *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
    AG::precondition_failure((AG *)"accessing invalidated subgraph", a2);
  return *(unsigned int *)(v2 + 72);
}

uint64_t AGSubgraphGetChild(uint64_t a1, const char *a2, _DWORD *a3)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
    AG::precondition_failure((AG *)"accessing invalidated subgraph", a2);
  if (*(unsigned int *)(v3 + 72) <= (unint64_t)a2)
    AG::precondition_failure((AG *)"invalid child index: %u", a2, a2);
  v4 = *(_QWORD *)(*(_QWORD *)(v3 + 64) + 8 * a2);
  if (a3)
    *a3 = v4 & 3;
  return *(_QWORD *)((v4 & 0xFFFFFFFFFFFFFFFCLL) + 32);
}

uint64_t AGSubgraphSetIndex(uint64_t result, const char *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 16);
  if (!v2)
    AG::precondition_failure((AG *)"accessing invalidated subgraph", a2);
  *(_DWORD *)(v2 + 88) = (_DWORD)a2;
  return result;
}

uint64_t AGSubgraphGetIndex(uint64_t a1, const char *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
    AG::precondition_failure((AG *)"accessing invalidated subgraph", a2);
  return *(unsigned int *)(v2 + 88);
}

uint64_t AGSubgraphGetParentCount(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return 0;
  v2 = *(_QWORD *)(v1 + 56);
  if ((v2 & 1) != 0)
    return *(_QWORD *)((v2 & 0xFFFFFFFFFFFFFFFELL) + 40);
  else
    return v2 != 0;
}

uint64_t AGSubgraphGetParent(uint64_t a1, const char *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
    AG::precondition_failure((AG *)"accessing invalidated subgraph", a2);
  v3 = *(_QWORD *)(v2 + 56);
  if ((v3 & 1) != 0)
  {
    v4 = v3 & 0xFFFFFFFFFFFFFFFELL;
    if (*(_QWORD *)(v4 + 40) <= (unint64_t)a2)
      goto LABEL_12;
    if (*(_QWORD *)(v4 + 32))
      v4 = *(_QWORD *)(v4 + 32);
    v3 = *(_QWORD *)(v4 + 8 * (_QWORD)a2);
  }
  else if (a2 || !v3)
  {
LABEL_12:
    AG::precondition_failure((AG *)"invalid parent index: %u", a2, a2);
  }
  return *(_QWORD *)(v3 + 32);
}

uint64_t AGSubgraphIsAncestor(uint64_t a1, uint64_t a2)
{
  AG::Subgraph *v2;
  const AG::Subgraph *v3;
  BOOL v4;

  v2 = *(AG::Subgraph **)(a1 + 16);
  v3 = *(const AG::Subgraph **)(a2 + 16);
  if (v2)
    v4 = v3 == 0;
  else
    v4 = 1;
  if (v4)
    return 0;
  else
    return AG::Subgraph::ancestor_of(v2, v3);
}

BOOL AGSubgraphIntersects(uint64_t a1, char a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 16);
  return v2 && (a2 & (*(_BYTE *)(v2 + 100) | BYTE1(*(_DWORD *)(v2 + 100)))) != 0;
}

void AGSubgraphSetShouldRecordTree()
{
  if (should_record_tree_once != -1)
    dispatch_once_f(&should_record_tree_once, 0, (dispatch_function_t)init_should_record_tree);
  should_record_tree = 1;
}

uint64_t AGSubgraphSetTreeOwner(uint64_t a1, char *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
    AG::precondition_failure((AG *)"accessing invalidated subgraph", a2);
  return AG::Subgraph::set_tree_owner(v2, (const char *)a2);
}

uint64_t AGSubgraphBeginTreeElement(uint64_t result, uint64_t a2, int a3)
{
  uint64_t v3;
  unsigned int *v4;

  v3 = AG::Subgraph::_current_subgraph_key;
  v4 = *(unsigned int **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v3);
  if (v4)
    return AG::Subgraph::begin_tree(v4, result, a2, a3);
  return result;
}

uint64_t AGSubgraphAddTreeValue(uint64_t result, uint64_t a2, char *a3, int a4)
{
  uint64_t v4;
  uint64_t v5;

  v4 = AG::Subgraph::_current_subgraph_key;
  v5 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v4);
  if (v5)
    return AG::Subgraph::add_tree_value(v5, result, a2, a3, a4);
  return result;
}

uint64_t AGSubgraphEndTreeElement()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;

  v0 = AG::Subgraph::_current_subgraph_key;
  v1 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v0);
  if (v1)
    return AG::Subgraph::end_tree(v1);
  return result;
}

uint64_t AGSubgraphGetTreeRoot(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return 0;
  result = *(unsigned int *)(v1 + 96);
  if (!(_DWORD)result)
    return 0;
  return result;
}

uint64_t AGTreeElementGetParent(unsigned int a1)
{
  return *(unsigned int *)(AG::data::_shared_table_bytes + a1 + 16);
}

uint64_t AGTreeElementGetType(unsigned int a1)
{
  return *(_QWORD *)(AG::data::_shared_table_bytes + a1);
}

uint64_t AGTreeElementGetValue(unsigned int a1)
{
  return *(unsigned int *)(AG::data::_shared_table_bytes + a1 + 8);
}

uint64_t AGTreeElementGetFlags(unsigned int a1)
{
  return *(unsigned int *)(AG::data::_shared_table_bytes + a1 + 12);
}

uint64_t AGTreeElementMakeChildIterator@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  v2 = *(unsigned int *)(AG::data::_shared_table_bytes + result + 20);
  *a2 = result;
  a2[1] = v2;
  a2[2] = 0;
  return result;
}

uint64_t AGTreeElementGetNextChild(uint64_t a1)
{
  uint64_t result;

  result = *(unsigned int *)(a1 + 8);
  if (result)
    goto LABEL_2;
  if (!*(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = 1;
    LODWORD(result) = AG::Subgraph::tree_subgraph_child(*(_QWORD *)(AG::data::_shared_table_bytes + (*(_QWORD *)a1 & 0xFFFFFE00)), *(_QWORD *)a1);
    if ((_DWORD)result)
    {
      result = result;
LABEL_2:
      *(_QWORD *)(a1 + 8) = *(unsigned int *)(AG::data::_shared_table_bytes + result + 24);
      return result;
    }
  }
  return 0;
}

uint64_t AGTreeElementMakeValueIterator(uint64_t result)
{
  return result;
}

uint64_t AGTreeElementGetNextValue(uint64_t a1)
{
  uint64_t result;

  result = *(unsigned int *)(a1 + 8);
  if (result)
    *(_QWORD *)(a1 + 8) = *(unsigned int *)(AG::data::_shared_table_bytes + result + 20);
  return result;
}

uint64_t AGTreeElementGetNextNode(_QWORD *a1)
{
  uint64_t result;

  result = AG::Subgraph::tree_node_at_index(*(_QWORD *)(AG::data::_shared_table_bytes + (*a1 & 0xFFFFFE00)), *a1, a1[1]);
  if (result <= 3)
    return 2;
  ++a1[1];
  return result;
}

uint64_t AGTreeValueGetType(unsigned int a1)
{
  return *(_QWORD *)(AG::data::_shared_table_bytes + a1);
}

uint64_t AGTreeValueGetValue(unsigned int a1)
{
  return *(unsigned int *)(AG::data::_shared_table_bytes + a1 + 8);
}

uint64_t AGTreeValueGetKey(unsigned int a1)
{
  return AG::Graph::key_name(*(AG::Graph **)(*(_QWORD *)(AG::data::_shared_table_bytes + (a1 & 0xFFFFFE00)) + 40), (const char *)*(unsigned int *)(AG::data::_shared_table_bytes + a1 + 12));
}

uint64_t AGTreeValueGetFlags(unsigned int a1)
{
  return *(unsigned int *)(AG::data::_shared_table_bytes + a1 + 16);
}

void *AG::Graph::ProfileData::json_data(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  void *v4;
  uint64_t v5;
  AG *v6;
  uint64_t v7;
  AG *v8;
  uint64_t v9;

  if (*a2)
  {
    v3 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLong:");
    v4 = (void *)objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
    objc_msgSend(v4, "setObject:forKeyedSubscript:", v3, CFSTR("update_count"));
  }
  else
  {
    v4 = 0;
  }
  if (a2[1])
  {
    v5 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLong:");
    if (!v4)
      v4 = (void *)objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
    objc_msgSend(v4, "setObject:forKeyedSubscript:", v5, CFSTR("change_count"));
  }
  v6 = (AG *)a2[2];
  if (v6)
  {
    v7 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", AG::absolute_time_to_seconds(v6));
    if (!v4)
      v4 = (void *)objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
    objc_msgSend(v4, "setObject:forKeyedSubscript:", v7, CFSTR("update_total"));
  }
  v8 = (AG *)a2[3];
  if (v8)
  {
    v9 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", AG::absolute_time_to_seconds(v8));
    if (!v4)
      v4 = (void *)objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
    objc_msgSend(v4, "setObject:forKeyedSubscript:", v9, CFSTR("changed_total"));
  }
  return v4;
}

void *AG::Graph::ProfileData::json_data(uint64_t a1, _QWORD *a2, AG::Graph *a3)
{
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  void *v12;
  void *v14;

  v5 = AG::Graph::ProfileData::json_data(a1, a2);
  v6 = v5;
  if (a2[5])
  {
    v14 = v5;
    v7 = (void *)objc_msgSend(MEMORY[0x1E0C99DE8], "array");
    v8 = v7;
    v9 = a2[5];
    if (v9)
    {
      v10 = 48 * v9;
      v11 = (_QWORD *)(a2[4] + 16);
      do
      {
        v7 = AG::Graph::ProfileData::json_data((uint64_t)v7, v11);
        if (v7)
        {
          v12 = v7;
          objc_msgSend(v7, "setObject:forKeyedSubscript:", objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", AG::Graph::key_name(a3, (const char *)*((unsigned int *)v11 - 4))), CFSTR("name"));
          objc_msgSend(v12, "setObject:forKeyedSubscript:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", AG::absolute_time_to_seconds((AG *)*(v11 - 1))), CFSTR("timestamp"));
          v7 = (void *)objc_msgSend(v8, "addObject:", v12);
        }
        v11 += 6;
        v10 -= 48;
      }
      while (v10);
    }
    v6 = v14;
    if (!v14)
      v6 = (void *)objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
    objc_msgSend(v6, "setObject:forKeyedSubscript:", v8, CFSTR("marks"));
  }
  return v6;
}

id AG::Graph::description(AG::Graph *this, NSDictionary *a2, NSDictionary *a3)
{
  id v5;
  void *v6;
  NSDictionary *v7;
  void *v8;
  int v9;
  id v10;
  uint64_t v12;
  uint64_t v13;
  AG::Graph *v14;

  v5 = -[NSDictionary objectForKeyedSubscript:](a2, "objectForKeyedSubscript:", CFSTR("format"));
  v6 = (void *)MEMORY[0x1AF4318C8]();
  if (objc_msgSend(v5, "isEqualToString:", CFSTR("graph/dict")))
  {
    v8 = AG::Graph::description_graph(this, (const AG::Graph *)a2, v7);
  }
  else
  {
    v9 = objc_msgSend(v5, "isEqualToString:", CFSTR("graph/dot"));
    if (!this || !v9)
    {
      if (objc_msgSend(v5, "hasPrefix:", CFSTR("stack/")))
      {
        if (this
          || (v12 = AG::Graph::_current_update_key,
              (v13 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v12)) != 0)
          && (this = *(AG::Graph **)(v13 & 0xFFFFFFFFFFFFFFFELL)) != 0)
        {
          if (objc_msgSend(v5, "isEqualToString:", CFSTR("stack/text")))
          {
            v8 = AG::Graph::description_stack(this, a2);
            goto LABEL_6;
          }
          v14 = (AG::Graph *)objc_msgSend(v5, "isEqualToString:", CFSTR("stack/nodes"));
          if ((_DWORD)v14)
          {
            v8 = AG::Graph::description_stack_nodes(v14, a2);
            goto LABEL_6;
          }
          if (objc_msgSend(v5, "isEqualToString:", CFSTR("stack/frame")))
          {
            v8 = AG::Graph::description_stack_frame(this, a2);
            goto LABEL_6;
          }
        }
      }
      v10 = 0;
      goto LABEL_7;
    }
    v8 = AG::Graph::description_graph_dot(this, a2);
  }
LABEL_6:
  v10 = v8;
LABEL_7:
  objc_autoreleasePoolPop(v6);
  return v10;
}

void *AG::Graph::description_graph(AG::Graph *this, const AG::Graph *a2, NSDictionary *a3)
{
  void *v5;
  void *v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  void *v11;
  uint64_t i;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  void *v16;
  AG::Graph *v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  unsigned __int16 *v35;
  uint64_t v36;
  unsigned int *v37;
  uint64_t *v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  void *v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t (*v47)(_QWORD, _QWORD *);
  _QWORD *v48;
  _anonymous_namespace_ *v49;
  uint64_t (*v50)(uint64_t, _QWORD *);
  _QWORD *v51;
  _anonymous_namespace_ *v52;
  int v53;
  _QWORD *v54;
  uint64_t *v55;
  void *v56;
  void *v57;
  uint64_t **j;
  uint64_t *v59;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  unsigned int v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  uint64_t v68;
  int v69;
  uint64_t v70;
  unsigned __int16 *v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  int v76;
  char v77;
  void *v78;
  int v79;
  uint64_t v80;
  int v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  unint64_t v85;
  unint64_t v86;
  _QWORD *k;
  unint64_t v88;
  unint64_t v89;
  unint64_t m;
  void *v91;
  uint64_t v92;
  _anonymous_namespace_ *v93;
  _anonymous_namespace_ *v94;
  _QWORD *v95;
  uint64_t *v96;
  void *v97;
  void *v98;
  uint64_t **n;
  uint64_t *v100;
  void *v101;
  AG::Graph *v102;
  uint64_t v103;
  const __CFString **v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  _QWORD *v108;
  uint64_t v109;
  void *v110;
  void *v111;
  _QWORD *v112;
  uint64_t v113;
  _QWORD *v114;
  unint64_t v115;
  _QWORD *v116;
  _QWORD *v117;
  uint64_t v118;
  void *v119;
  uint64_t v120;
  _QWORD *v121;
  uint64_t v122;
  unint64_t v123;
  unint64_t v124;
  void *v125;
  uint64_t v126;
  _QWORD *v127;
  uint64_t v128;
  unint64_t v129;
  _QWORD *v130;
  uint64_t v131;
  void *v132;
  uint64_t v133;
  _QWORD *v134;
  uint64_t v135;
  unint64_t v136;
  unint64_t v137;
  void *v138;
  unsigned int v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  int v143;
  uint64_t v144;
  int v145;
  uint64_t v146;
  unsigned __int16 *v147;
  uint64_t v148;
  uint64_t v149;
  void *v150;
  uint64_t v151;
  unint64_t *v152;
  unint64_t *v153;
  uint64_t v154;
  unint64_t v155;
  unint64_t v156;
  uint64_t v157;
  unint64_t v158;
  unint64_t v159;
  uint64_t v160;
  int v161;
  unint64_t v162;
  int v163;
  unint64_t v164;
  uint64_t v165;
  char *v166;
  __CFString *v167;
  uint64_t isa_low;
  uint64_t v169;
  void *v170;
  uint64_t v171;
  unsigned int v172;
  uint64_t v173;
  uint64_t v176;
  _anonymous_namespace_ *v177;
  void *v178;
  int ii;
  uint64_t v180;
  char *v181;
  unint64_t v182;
  _DWORD *v183;
  unint64_t v184;
  unsigned int *v185;
  _DWORD *v186;
  unsigned int v187;
  void *v188;
  _DWORD *v189;
  int v190;
  uint64_t v191;
  void *v192;
  __CFString *v193;
  uint64_t v194;
  unsigned int v195;
  uint64_t v196;
  void *v197;
  uint64_t v198;
  uint64_t v199;
  void *v200;
  uint64_t v201;
  _QWORD *v202;
  void *v203;
  void *v204;
  void *v205;
  uint64_t **jj;
  void *v207;
  _QWORD *v209;
  void *v210;
  void *v211;
  uint64_t v212;
  _QWORD *v213;
  unsigned int *v214;
  uint64_t v215;
  uint64_t v216;
  void *v217;
  void *v218;
  void *v219;
  uint64_t v220;
  int v221;
  void *v222;
  void *v223;
  AG::Graph *v224;
  _QWORD *v225[2];
  unsigned int v226;
  __int128 v227;
  __int128 v228;
  int v229;
  __int128 v230;
  __int128 v231;
  int v232;
  void *v233;
  unint64_t v234;
  unint64_t v235;
  _QWORD *v236[4];
  int v237;
  _QWORD *v238;
  unint64_t v239;
  unint64_t v240;
  _QWORD v241[4];
  int v242;
  unint64_t v243;
  const __CFString *v244;
  unint64_t v245;
  unint64_t v246;
  const __CFString **v247;
  uint64_t v248;
  unint64_t v249;
  uint64_t v250;

  v250 = *MEMORY[0x1E0C80C00];
  v5 = (void *)-[AG::Graph objectForKeyedSubscript:](a2, "objectForKeyedSubscript:", CFSTR("include-values"));
  if (v5)
    v221 = objc_msgSend(v5, "BOOLValue");
  else
    v221 = 0;
  v6 = (void *)-[AG::Graph objectForKeyedSubscript:](a2, "objectForKeyedSubscript:", CFSTR("truncation-limit"));
  if (v6)
    v220 = objc_msgSend(v6, "unsignedLongValue");
  else
    v220 = 1024;
  v7 = 0x1E0C99000uLL;
  v219 = (void *)objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  memset(v241, 0, sizeof(v241));
  v242 = 1065353216;
  v238 = 0;
  v239 = 0;
  v240 = 0;
  if (this)
  {
    v236[0] = *((_QWORD **)this + 53);
    if (!std::__hash_table<std::__hash_value_type<unsigned long,AG::Graph::ProfileTrace::UpdateData>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,AG::Graph::ProfileTrace::UpdateData>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,AG::Graph::ProfileTrace::UpdateData>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,AG::Graph::ProfileTrace::UpdateData>>>::find<unsigned long>(v241, (unint64_t *)v236))
    {
      v8 = objc_msgSend(v219, "count");
      objc_msgSend(v219, "addObject:", objc_msgSend(MEMORY[0x1E0C99E38], "null"));
      *(_QWORD *)&v230 = *((_QWORD *)this + 53);
      v236[0] = &v230;
      std::__hash_table<std::__hash_value_type<unsigned long,unsigned long>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,unsigned long>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>((uint64_t)v241, (unint64_t *)&v230, (uint64_t)&std::piecewise_construct, v236)[3] = v8;
      v9 = v239;
      v10 = v239 + 1;
      if (v240 < v239 + 1)
      {
        AG::vector<std::unique_ptr<char const,util::free_deleter>,0ul,unsigned long>::reserve_slow((uint64_t)&v238, v10);
        v9 = v239;
        v10 = v239 + 1;
      }
      v238[v9] = this;
      v239 = v10;
    }
  }
  v11 = (void *)-[AG::Graph objectForKeyedSubscript:](a2, "objectForKeyedSubscript:", CFSTR("graph_ids"));
  if (v11)
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
    {
      os_unfair_lock_lock((os_unfair_lock_t)&AG::Graph::_all_graphs_lock);
      for (i = AG::Graph::_all_graphs; i; i = *(_QWORD *)i)
      {
        if (objc_msgSend(v11, "containsObject:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLong:", *(_QWORD *)(i + 424))))
        {
          v236[0] = *(_QWORD **)(i + 424);
          if (!std::__hash_table<std::__hash_value_type<unsigned long,AG::Graph::ProfileTrace::UpdateData>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,AG::Graph::ProfileTrace::UpdateData>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,AG::Graph::ProfileTrace::UpdateData>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,AG::Graph::ProfileTrace::UpdateData>>>::find<unsigned long>(v241, (unint64_t *)v236))
          {
            v13 = objc_msgSend(v219, "count");
            objc_msgSend(v219, "addObject:", objc_msgSend(MEMORY[0x1E0C99E38], "null"));
            *(_QWORD *)&v230 = *(_QWORD *)(i + 424);
            v236[0] = &v230;
            std::__hash_table<std::__hash_value_type<unsigned long,unsigned long>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,unsigned long>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>((uint64_t)v241, (unint64_t *)&v230, (uint64_t)&std::piecewise_construct, v236)[3] = v13;
            v14 = v239;
            v15 = v239 + 1;
            if (v240 < v239 + 1)
            {
              AG::vector<std::unique_ptr<char const,util::free_deleter>,0ul,unsigned long>::reserve_slow((uint64_t)&v238, v15);
              v14 = v239;
              v15 = v239 + 1;
            }
            v238[v14] = i;
            v239 = v15;
          }
        }
      }
      os_unfair_lock_unlock((os_unfair_lock_t)&AG::Graph::_all_graphs_lock);
    }
  }
  v16 = (void *)-[AG::Graph objectForKeyedSubscript:](a2, "objectForKeyedSubscript:", CFSTR("all_graphs"));
  if (v16 && objc_msgSend(v16, "BOOLValue"))
  {
    os_unfair_lock_lock((os_unfair_lock_t)&AG::Graph::_all_graphs_lock);
    v17 = (AG::Graph *)AG::Graph::_all_graphs;
    if (AG::Graph::_all_graphs)
    {
      do
      {
        if (v17 != this)
        {
          v236[0] = *((_QWORD **)v17 + 53);
          if (!std::__hash_table<std::__hash_value_type<unsigned long,AG::Graph::ProfileTrace::UpdateData>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,AG::Graph::ProfileTrace::UpdateData>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,AG::Graph::ProfileTrace::UpdateData>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,AG::Graph::ProfileTrace::UpdateData>>>::find<unsigned long>(v241, (unint64_t *)v236))
          {
            v18 = objc_msgSend(v219, "count");
            objc_msgSend(v219, "addObject:", objc_msgSend(MEMORY[0x1E0C99E38], "null"));
            *(_QWORD *)&v230 = *((_QWORD *)v17 + 53);
            v236[0] = &v230;
            std::__hash_table<std::__hash_value_type<unsigned long,unsigned long>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,unsigned long>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>((uint64_t)v241, (unint64_t *)&v230, (uint64_t)&std::piecewise_construct, v236)[3] = v18;
            v19 = v239;
            v20 = v239 + 1;
            if (v240 < v239 + 1)
            {
              AG::vector<std::unique_ptr<char const,util::free_deleter>,0ul,unsigned long>::reserve_slow((uint64_t)&v238, v20);
              v19 = v239;
              v20 = v239 + 1;
            }
            v238[v19] = v17;
            v239 = v20;
          }
        }
        v17 = *(AG::Graph **)v17;
      }
      while (v17);
    }
    os_unfair_lock_unlock((os_unfair_lock_t)&AG::Graph::_all_graphs_lock);
  }
  v21 = v239;
  if (v239)
  {
    v22 = 0x1E0CB3000uLL;
    do
    {
      v23 = v21 - 1;
      v24 = v238[v23];
      v239 = v23;
      v222 = (void *)objc_msgSend(*(id *)(v7 + 3560), "array");
      v223 = (void *)objc_msgSend(*(id *)(v7 + 3560), "array");
      memset(v236, 0, sizeof(v236));
      v237 = 1065353216;
      v233 = 0;
      v234 = 0;
      v235 = 0;
      v230 = 0u;
      v231 = 0u;
      v232 = 1065353216;
      v224 = (AG::Graph *)v24;
      v25 = *(unsigned int *)(v24 + 352);
      if (!(_DWORD)v25)
        goto LABEL_120;
      v26 = *(_QWORD *)(v24 + 344);
      v215 = v26 + 8 * v25;
      do
      {
        v27 = *(_DWORD *)(*(_QWORD *)v26 + 16);
        if (!v27)
          goto LABEL_84;
        v28 = AG::data::_shared_table_bytes;
        do
        {
          v29 = v27;
          v30 = v28 + v27;
          v31 = *(unsigned __int16 *)(v30 + 20);
          if (!*(_WORD *)(v30 + 20))
            goto LABEL_83;
          do
          {
            v32 = (v31 + v29);
            v33 = ((_BYTE)v31 + (_BYTE)v29) & 3;
            if ((((_BYTE)v31 + (_BYTE)v29) & 3) == 0)
            {
              v34 = AG::data::_shared_table_bytes;
              v35 = (unsigned __int16 *)(AG::data::_shared_table_bytes + v32 + 4);
LABEL_45:
              v31 = *v35;
              if ((v32 & 3) == 0)
              {
                LODWORD(v244) = v32;
                v36 = *((_QWORD *)&v231 + 1);
                *(_QWORD *)&v227 = &v244;
                v37 = (unsigned int *)(v34 + v32);
                std::__hash_table<std::__hash_value_type<AG::data::ptr<AG::Node>,unsigned long>,std::__unordered_map_hasher<AG::data::ptr<AG::Node>,std::__hash_value_type<AG::data::ptr<AG::Node>,unsigned long>,std::hash<AG::data::ptr<AG::Node>>,std::equal_to<AG::data::ptr<AG::Node>>,true>,std::__unordered_map_equal<AG::data::ptr<AG::Node>,std::__hash_value_type<AG::data::ptr<AG::Node>,unsigned long>,std::equal_to<AG::data::ptr<AG::Node>>,std::hash<AG::data::ptr<AG::Node>>,true>,std::allocator<std::__hash_value_type<AG::data::ptr<AG::Node>,unsigned long>>>::__emplace_unique_key_args<AG::data::ptr<AG::Node>,std::piecewise_construct_t const&,std::tuple<AG::data::ptr<AG::Node> const&>,std::tuple<>>((uint64_t)&v230, (unsigned int *)&v244, (uint64_t)&std::piecewise_construct, (_DWORD **)&v227)[3] = v36;
                LODWORD(v247) = *(_DWORD *)(v34 + v32) >> 8;
                v38 = std::__hash_table<std::__hash_value_type<AG::data::ptr<AG::Node>,AG::Graph::ProfileData::Item>,std::__unordered_map_hasher<AG::data::ptr<AG::Node>,std::__hash_value_type<AG::data::ptr<AG::Node>,AG::Graph::ProfileData::Item>,std::hash<AG::data::ptr<AG::Node>>,std::equal_to<AG::data::ptr<AG::Node>>,true>,std::__unordered_map_equal<AG::data::ptr<AG::Node>,std::__hash_value_type<AG::data::ptr<AG::Node>,AG::Graph::ProfileData::Item>,std::equal_to<AG::data::ptr<AG::Node>>,std::hash<AG::data::ptr<AG::Node>>,true>,std::allocator<std::__hash_value_type<AG::data::ptr<AG::Node>,AG::Graph::ProfileData::Item>>>::find<AG::data::ptr<AG::Node>>(v236, (unsigned int *)&v247);
                if (v38)
                {
                  v39 = v38[3];
                }
                else
                {
                  v40 = v234;
                  *(_QWORD *)&v227 = v234;
                  v41 = v234 + 1;
                  if (v235 < v234 + 1)
                  {
                    AG::vector<AG::data::ptr<AG::Node>,0ul,unsigned long>::reserve_slow((uint64_t)&v233, v41);
                    v40 = v234;
                    v41 = v234 + 1;
                  }
                  *((_DWORD *)v233 + v40) = (_DWORD)v247;
                  v234 = v41;
                  std::__hash_table<std::__hash_value_type<unsigned int,unsigned long>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned long>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned long>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned long>>>::__emplace_unique_key_args<unsigned int,unsigned int &,unsigned long &>((uint64_t)v236, (unsigned int *)&v247, &v247, &v227);
                  v39 = v227;
                }
                v42 = (void *)objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
                objc_msgSend(v42, "setObject:forKeyedSubscript:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLong:", v39), CFSTR("type"));
                objc_msgSend(v42, "setObject:forKeyedSubscript:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInt:", v244), CFSTR("id"));
                v43 = *v37;
                v44 = *((_QWORD *)v224 + 16);
                v45 = (v43 >> 5) & 0x7FFFFF8;
                v46 = *(_QWORD *)(v44 + v45);
                if ((v43 & 0x20) != 0)
                {
                  v47 = *(uint64_t (**)(_QWORD, _QWORD *))(*(_QWORD *)(v46 + 32) + 24);
                  if (v47)
                  {
                    v48 = (_QWORD *)((char *)v37 + *(unsigned int *)(v46 + 44));
                    if ((*((_BYTE *)v37 + 7) & 1) != 0)
                      v48 = (_QWORD *)*v48;
                    v49 = (_anonymous_namespace_ *)v47(*(_QWORD *)(v44 + v45), v48);
                    if (v49)
                  }
                }
                if (v221)
                {
                  if ((*(_BYTE *)v37 & 0x10) != 0)
                  {
                    v50 = *(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)(v46 + 32) + 32);
                    if (v50)
                    {
                      v51 = (_QWORD *)(AG::data::_shared_table_bytes + v37[2]);
                      if ((*((_BYTE *)v37 + 7) & 2) != 0)
                        v51 = (_QWORD *)*v51;
                      v52 = (_anonymous_namespace_ *)v50(v46, v51);
                      if (v52)
                    }
                  }
                }
                v53 = *v37 & 3;
                if ((*v37 & 0xC0) != 0)
                  v53 = *v37 & 3 | 4;
                if ((*v37 >> 1) & 8 | (16 * ((*v37 >> 2) & 1)) & 0xFFFFFF3F | (((*v37 >> 3) & 1) << 6) & 0xFFFFFF7F | v53 & 0xFFFFFF7F | *((_BYTE *)v37 + 7) & 0x20 | (((*((unsigned __int8 *)v37 + 7) >> 6) & 1) << 7))
                  objc_msgSend(v42, "setObject:forKeyedSubscript:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInt:"), CFSTR("flags"));
                v54 = (_QWORD *)*((_QWORD *)v224 + 38);
                if (v54)
                {
                  v55 = std::__hash_table<std::__hash_value_type<AG::data::ptr<AG::Node>,AG::Graph::ProfileData::Item>,std::__unordered_map_hasher<AG::data::ptr<AG::Node>,std::__hash_value_type<AG::data::ptr<AG::Node>,AG::Graph::ProfileData::Item>,std::hash<AG::data::ptr<AG::Node>>,std::equal_to<AG::data::ptr<AG::Node>>,true>,std::__unordered_map_equal<AG::data::ptr<AG::Node>,std::__hash_value_type<AG::data::ptr<AG::Node>,AG::Graph::ProfileData::Item>,std::equal_to<AG::data::ptr<AG::Node>>,std::hash<AG::data::ptr<AG::Node>>,true>,std::allocator<std::__hash_value_type<AG::data::ptr<AG::Node>,AG::Graph::ProfileData::Item>>>::find<AG::data::ptr<AG::Node>>(v54 + 8, (unsigned int *)&v244);
                  if (v55)
                  {
                    v56 = AG::Graph::ProfileData::json_data((uint64_t)v55, v55 + 3, v224);
                    if (v56)
                      objc_msgSend(v42, "setObject:forKeyedSubscript:", v56, CFSTR("profile"));
                  }
                  if (v54[21])
                  {
                    v57 = (void *)objc_msgSend(MEMORY[0x1E0C99E08], "dictionary", v56);
                    for (j = (uint64_t **)v54[20]; j; j = (uint64_t **)*j)
                    {
                      v59 = std::__hash_table<std::__hash_value_type<AG::data::ptr<AG::Node>,AG::Graph::ProfileData::Item>,std::__unordered_map_hasher<AG::data::ptr<AG::Node>,std::__hash_value_type<AG::data::ptr<AG::Node>,AG::Graph::ProfileData::Item>,std::hash<AG::data::ptr<AG::Node>>,std::equal_to<AG::data::ptr<AG::Node>>,true>,std::__unordered_map_equal<AG::data::ptr<AG::Node>,std::__hash_value_type<AG::data::ptr<AG::Node>,AG::Graph::ProfileData::Item>,std::equal_to<AG::data::ptr<AG::Node>>,std::hash<AG::data::ptr<AG::Node>>,true>,std::allocator<std::__hash_value_type<AG::data::ptr<AG::Node>,AG::Graph::ProfileData::Item>>>::find<AG::data::ptr<AG::Node>>(j + 10, (unsigned int *)&v244);
                      if (v59)
                      {
                        v60 = AG::Graph::ProfileData::json_data((uint64_t)v59, v59 + 3, v224);
                        if (v60)
                          objc_msgSend(v57, "setObject:forKeyedSubscript:", v60, objc_msgSend(*(id *)(v22 + 2368), "stringWithUTF8String:", AG::Graph::key_name(v224, (const char *)*((unsigned int *)j + 4))));
                      }
                    }
                    if (objc_msgSend(v57, "count"))
                      objc_msgSend(v42, "setObject:forKeyedSubscript:", v57, CFSTR("events"));
                  }
                }
                objc_msgSend(v222, "addObject:", v42);
              }
              continue;
            }
            if (v33 == 1)
            {
              v34 = AG::data::_shared_table_bytes;
              v35 = (unsigned __int16 *)(AG::data::_shared_table_bytes + (v32 & 0xFFFFFFFC) + 14);
              goto LABEL_45;
            }
            if (v33 == 2)
              break;
          }
          while (v31);
          v28 = AG::data::_shared_table_bytes;
LABEL_83:
          v27 = *(_DWORD *)(v28 + v29 + 8);
        }
        while (v27);
LABEL_84:
        v26 += 8;
      }
      while (v26 != v215);
      v61 = *((unsigned int *)v224 + 88);
      if ((_DWORD)v61)
      {
        v62 = *((_QWORD *)v224 + 43);
        v212 = v62 + 8 * v61;
        do
        {
          v216 = v62;
          v63 = *(_DWORD *)(*(_QWORD *)v62 + 16);
          if (!v63)
            goto LABEL_119;
          v64 = AG::data::_shared_table_bytes;
          do
          {
            v65 = v63;
            v66 = v64 + v63;
            v67 = *(unsigned __int16 *)(v66 + 20);
            if (!*(_WORD *)(v66 + 20))
              goto LABEL_118;
            do
            {
              while (1)
              {
                v68 = (v67 + v65);
                v69 = ((_BYTE)v67 + (_BYTE)v65) & 3;
                if ((((_BYTE)v67 + (_BYTE)v65) & 3) != 0)
                {
                  if (v69 != 1)
                  {
                    if (v69 == 2)
                      goto LABEL_117;
                    goto LABEL_97;
                  }
                  v70 = AG::data::_shared_table_bytes;
                  v71 = (unsigned __int16 *)(AG::data::_shared_table_bytes + (v68 & 0xFFFFFFFC) + 14);
                }
                else
                {
                  v70 = AG::data::_shared_table_bytes;
                  v71 = (unsigned __int16 *)(AG::data::_shared_table_bytes + v68 + 4);
                }
                v67 = *v71;
                if ((v68 & 3) == 0)
                  break;
LABEL_97:
                if (!v67)
                  goto LABEL_117;
              }
              LODWORD(v247) = v68;
              v72 = v70 + v68;
              v73 = *(unsigned int *)(v70 + v68 + 12);
              if (v73 >= 0x20)
              {
                v74 = v70 + *(unsigned int *)(v72 + 16);
                v75 = v74 + 5 * (v73 >> 5);
                do
                {
                  v76 = *(_DWORD *)v74;
                  v77 = *(_BYTE *)(v74 + 4);
                  v78 = (void *)objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
                  LODWORD(v227) = v76;
                  v79 = v76 & 3;
                  if ((v76 & 3) != 0)
                  {
                    v76 = AG::AttributeID::resolve_slow((AG::AttributeID *)&v227, 0);
                    v80 = v82;
                  }
                  else
                  {
                    v80 = 0;
                  }
                  if ((v76 & 3) == 0)
                  {
                    LODWORD(v244) = v76;
                    *(_QWORD *)&v227 = &v244;
                    objc_msgSend(v78, "setObject:forKeyedSubscript:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLong:", std::__hash_table<std::__hash_value_type<AG::data::ptr<AG::Node>,unsigned long>,std::__unordered_map_hasher<AG::data::ptr<AG::Node>,std::__hash_value_type<AG::data::ptr<AG::Node>,unsigned long>,std::hash<AG::data::ptr<AG::Node>>,std::equal_to<AG::data::ptr<AG::Node>>,true>,std::__unordered_map_equal<AG::data::ptr<AG::Node>,std::__hash_value_type<AG::data::ptr<AG::Node>,unsigned long>,std::equal_to<AG::data::ptr<AG::Node>>,std::hash<AG::data::ptr<AG::Node>>,true>,std::allocator<std::__hash_value_type<AG::data::ptr<AG::Node>,unsigned long>>>::__emplace_unique_key_args<AG::data::ptr<AG::Node>,std::piecewise_construct_t const&,std::tuple<AG::data::ptr<AG::Node>&&>,std::tuple<>>((uint64_t)&v230, (unsigned int *)&v244, (uint64_t)&std::piecewise_construct, (_DWORD **)&v227)[3]), CFSTR("src"));
                    *(_QWORD *)&v227 = &v247;
                    objc_msgSend(v78, "setObject:forKeyedSubscript:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLong:", std::__hash_table<std::__hash_value_type<AG::data::ptr<AG::Node>,unsigned long>,std::__unordered_map_hasher<AG::data::ptr<AG::Node>,std::__hash_value_type<AG::data::ptr<AG::Node>,unsigned long>,std::hash<AG::data::ptr<AG::Node>>,std::equal_to<AG::data::ptr<AG::Node>>,true>,std::__unordered_map_equal<AG::data::ptr<AG::Node>,std::__hash_value_type<AG::data::ptr<AG::Node>,unsigned long>,std::equal_to<AG::data::ptr<AG::Node>>,std::hash<AG::data::ptr<AG::Node>>,true>,std::allocator<std::__hash_value_type<AG::data::ptr<AG::Node>,unsigned long>>>::__emplace_unique_key_args<AG::data::ptr<AG::Node>,std::piecewise_construct_t const&,std::tuple<AG::data::ptr<AG::Node> const&>,std::tuple<>>((uint64_t)&v230, (unsigned int *)&v247, (uint64_t)&std::piecewise_construct, (_DWORD **)&v227)[3]), CFSTR("dst"));
                    if (v79 == 1)
                    {
                      if (v80)
                        objc_msgSend(v78, "setObject:forKeyedSubscript:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLong:", v80), CFSTR("offset"));
                      v81 = 1;
                    }
                    else
                    {
                      v81 = 0;
                    }
                    if (v81 | v77 & 0x1C | (32 * (v77 & 1)))
                      objc_msgSend(v78, "setObject:forKeyedSubscript:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInt:"), CFSTR("flags"));
                    objc_msgSend(v223, "addObject:", v78);
                  }
                  v74 += 5;
                }
                while (v74 != v75);
              }
              v7 = 0x1E0C99000;
              v22 = 0x1E0CB3000;
            }
            while (v67);
LABEL_117:
            v64 = AG::data::_shared_table_bytes;
LABEL_118:
            v63 = *(_DWORD *)(v64 + v65 + 8);
          }
          while (v63);
LABEL_119:
          v62 = v216 + 8;
        }
        while (v216 + 8 != v212);
      }
LABEL_120:
      v83 = *((_QWORD *)v224 + 38);
      if (v83 && *((_DWORD *)v224 + 34) >= 2u)
      {
        v84 = 1;
        do
        {
          LODWORD(v244) = v84;
          if (!std::__hash_table<std::__hash_value_type<AG::data::ptr<AG::Node>,AG::Graph::ProfileData::Item>,std::__unordered_map_hasher<AG::data::ptr<AG::Node>,std::__hash_value_type<AG::data::ptr<AG::Node>,AG::Graph::ProfileData::Item>,std::hash<AG::data::ptr<AG::Node>>,std::equal_to<AG::data::ptr<AG::Node>>,true>,std::__unordered_map_equal<AG::data::ptr<AG::Node>,std::__hash_value_type<AG::data::ptr<AG::Node>,AG::Graph::ProfileData::Item>,std::equal_to<AG::data::ptr<AG::Node>>,std::hash<AG::data::ptr<AG::Node>>,true>,std::allocator<std::__hash_value_type<AG::data::ptr<AG::Node>,AG::Graph::ProfileData::Item>>>::find<AG::data::ptr<AG::Node>>(v236, (unsigned int *)&v244))
          {
            if (std::__hash_table<std::__hash_value_type<AG::data::ptr<AG::Node>,AG::Graph::ProfileData::Item>,std::__unordered_map_hasher<AG::data::ptr<AG::Node>,std::__hash_value_type<AG::data::ptr<AG::Node>,AG::Graph::ProfileData::Item>,std::hash<AG::data::ptr<AG::Node>>,std::equal_to<AG::data::ptr<AG::Node>>,true>,std::__unordered_map_equal<AG::data::ptr<AG::Node>,std::__hash_value_type<AG::data::ptr<AG::Node>,AG::Graph::ProfileData::Item>,std::equal_to<AG::data::ptr<AG::Node>>,std::hash<AG::data::ptr<AG::Node>>,true>,std::allocator<std::__hash_value_type<AG::data::ptr<AG::Node>,AG::Graph::ProfileData::Item>>>::find<AG::data::ptr<AG::Node>>((_QWORD *)(v83 + 104), (unsigned int *)&v244))
            {
              LODWORD(v247) = (_DWORD)v244;
              if (!std::__hash_table<std::__hash_value_type<AG::data::ptr<AG::Node>,AG::Graph::ProfileData::Item>,std::__unordered_map_hasher<AG::data::ptr<AG::Node>,std::__hash_value_type<AG::data::ptr<AG::Node>,AG::Graph::ProfileData::Item>,std::hash<AG::data::ptr<AG::Node>>,std::equal_to<AG::data::ptr<AG::Node>>,true>,std::__unordered_map_equal<AG::data::ptr<AG::Node>,std::__hash_value_type<AG::data::ptr<AG::Node>,AG::Graph::ProfileData::Item>,std::equal_to<AG::data::ptr<AG::Node>>,std::hash<AG::data::ptr<AG::Node>>,true>,std::allocator<std::__hash_value_type<AG::data::ptr<AG::Node>,AG::Graph::ProfileData::Item>>>::find<AG::data::ptr<AG::Node>>(v236, (unsigned int *)&v247))
              {
                v85 = v234;
                *(_QWORD *)&v227 = v234;
                v86 = v234 + 1;
                if (v235 < v234 + 1)
                {
                  AG::vector<AG::data::ptr<AG::Node>,0ul,unsigned long>::reserve_slow((uint64_t)&v233, v86);
                  v85 = v234;
                  v86 = v234 + 1;
                }
                *((_DWORD *)v233 + v85) = (_DWORD)v247;
                v234 = v86;
                std::__hash_table<std::__hash_value_type<unsigned int,unsigned long>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned long>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned long>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned long>>>::__emplace_unique_key_args<unsigned int,unsigned int &,unsigned long &>((uint64_t)v236, (unsigned int *)&v247, &v247, &v227);
              }
            }
            else
            {
              for (k = *(_QWORD **)(v83 + 160); k; k = (_QWORD *)*k)
              {
                if (std::__hash_table<std::__hash_value_type<AG::data::ptr<AG::Node>,AG::Graph::ProfileData::Item>,std::__unordered_map_hasher<AG::data::ptr<AG::Node>,std::__hash_value_type<AG::data::ptr<AG::Node>,AG::Graph::ProfileData::Item>,std::hash<AG::data::ptr<AG::Node>>,std::equal_to<AG::data::ptr<AG::Node>>,true>,std::__unordered_map_equal<AG::data::ptr<AG::Node>,std::__hash_value_type<AG::data::ptr<AG::Node>,AG::Graph::ProfileData::Item>,std::equal_to<AG::data::ptr<AG::Node>>,std::hash<AG::data::ptr<AG::Node>>,true>,std::allocator<std::__hash_value_type<AG::data::ptr<AG::Node>,AG::Graph::ProfileData::Item>>>::find<AG::data::ptr<AG::Node>>(k + 15, (unsigned int *)&v244))
                {
                  LODWORD(v247) = (_DWORD)v244;
                  if (!std::__hash_table<std::__hash_value_type<AG::data::ptr<AG::Node>,AG::Graph::ProfileData::Item>,std::__unordered_map_hasher<AG::data::ptr<AG::Node>,std::__hash_value_type<AG::data::ptr<AG::Node>,AG::Graph::ProfileData::Item>,std::hash<AG::data::ptr<AG::Node>>,std::equal_to<AG::data::ptr<AG::Node>>,true>,std::__unordered_map_equal<AG::data::ptr<AG::Node>,std::__hash_value_type<AG::data::ptr<AG::Node>,AG::Graph::ProfileData::Item>,std::equal_to<AG::data::ptr<AG::Node>>,std::hash<AG::data::ptr<AG::Node>>,true>,std::allocator<std::__hash_value_type<AG::data::ptr<AG::Node>,AG::Graph::ProfileData::Item>>>::find<AG::data::ptr<AG::Node>>(v236, (unsigned int *)&v247))
                  {
                    v88 = v234;
                    *(_QWORD *)&v227 = v234;
                    v89 = v234 + 1;
                    if (v235 < v234 + 1)
                    {
                      AG::vector<AG::data::ptr<AG::Node>,0ul,unsigned long>::reserve_slow((uint64_t)&v233, v89);
                      v88 = v234;
                      v89 = v234 + 1;
                    }
                    *((_DWORD *)v233 + v88) = (_DWORD)v247;
                    v234 = v89;
                    std::__hash_table<std::__hash_value_type<unsigned int,unsigned long>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned long>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned long>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned long>>>::__emplace_unique_key_args<unsigned int,unsigned int &,unsigned long &>((uint64_t)v236, (unsigned int *)&v247, &v247, &v227);
                  }
                }
              }
            }
          }
          ++v84;
        }
        while (v84 < *((unsigned int *)v224 + 34));
      }
      v211 = (void *)objc_msgSend(*(id *)(v7 + 3560), "array");
      if (v234)
      {
        for (m = 0; m < v234; ++m)
        {
          v91 = (void *)objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
          LODWORD(v227) = 0;
          LODWORD(v227) = *((_DWORD *)v233 + m);
          v92 = *(_QWORD *)(*((_QWORD *)v224 + 16) + 8 * v227);
          objc_msgSend(v91, "setObject:forKeyedSubscript:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInt:"), CFSTR("id"));
          v93 = (_anonymous_namespace_ *)objc_msgSend(*(id *)(v22 + 2368), "stringWithUTF8String:", AG::swift::metadata::name(*(AG::swift::metadata **)v92, 0));
          v94 = (_anonymous_namespace_ *)objc_msgSend(*(id *)(v22 + 2368), "stringWithUTF8String:", AG::swift::metadata::name(*(AG::swift::metadata **)(v92 + 8), 0));
          objc_msgSend(v91, "setObject:forKeyedSubscript:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLong:", *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v92 + 8) - 8) + 64)+ *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v92 - 8) + 64)), CFSTR("size"));
          objc_msgSend(v91, "setObject:forKeyedSubscript:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInt:", *(unsigned int *)(v92 + 40)), CFSTR("flags"));
          v95 = (_QWORD *)*((_QWORD *)v224 + 38);
          if (v95)
          {
            v96 = std::__hash_table<std::__hash_value_type<AG::data::ptr<AG::Node>,AG::Graph::ProfileData::Item>,std::__unordered_map_hasher<AG::data::ptr<AG::Node>,std::__hash_value_type<AG::data::ptr<AG::Node>,AG::Graph::ProfileData::Item>,std::hash<AG::data::ptr<AG::Node>>,std::equal_to<AG::data::ptr<AG::Node>>,true>,std::__unordered_map_equal<AG::data::ptr<AG::Node>,std::__hash_value_type<AG::data::ptr<AG::Node>,AG::Graph::ProfileData::Item>,std::equal_to<AG::data::ptr<AG::Node>>,std::hash<AG::data::ptr<AG::Node>>,true>,std::allocator<std::__hash_value_type<AG::data::ptr<AG::Node>,AG::Graph::ProfileData::Item>>>::find<AG::data::ptr<AG::Node>>(v95 + 13, (unsigned int *)&v227);
            if (v96)
            {
              v97 = AG::Graph::ProfileData::json_data((uint64_t)v96, v96 + 3, v224);
              if (v97)
                objc_msgSend(v91, "setObject:forKeyedSubscript:", v97, CFSTR("profile"));
            }
            if (v95[21])
            {
              v98 = (void *)objc_msgSend(MEMORY[0x1E0C99E08], "dictionary", v97);
              for (n = (uint64_t **)v95[20]; n; n = (uint64_t **)*n)
              {
                v100 = std::__hash_table<std::__hash_value_type<AG::data::ptr<AG::Node>,AG::Graph::ProfileData::Item>,std::__unordered_map_hasher<AG::data::ptr<AG::Node>,std::__hash_value_type<AG::data::ptr<AG::Node>,AG::Graph::ProfileData::Item>,std::hash<AG::data::ptr<AG::Node>>,std::equal_to<AG::data::ptr<AG::Node>>,true>,std::__unordered_map_equal<AG::data::ptr<AG::Node>,std::__hash_value_type<AG::data::ptr<AG::Node>,AG::Graph::ProfileData::Item>,std::equal_to<AG::data::ptr<AG::Node>>,std::hash<AG::data::ptr<AG::Node>>,true>,std::allocator<std::__hash_value_type<AG::data::ptr<AG::Node>,AG::Graph::ProfileData::Item>>>::find<AG::data::ptr<AG::Node>>(n + 15, (unsigned int *)&v227);
                if (v100)
                {
                  v101 = AG::Graph::ProfileData::json_data((uint64_t)v100, v100 + 3, v224);
                  if (v101)
                    objc_msgSend(v98, "setObject:forKeyedSubscript:", v101, objc_msgSend(*(id *)(v22 + 2368), "stringWithUTF8String:", AG::Graph::key_name(v224, (const char *)*((unsigned int *)n + 4))));
                }
              }
              if (objc_msgSend(v98, "count"))
                objc_msgSend(v91, "setObject:forKeyedSubscript:", v98, CFSTR("events"));
            }
          }
          objc_msgSend(v211, "addObject:", v91);
        }
      }
      v210 = (void *)objc_msgSend(*(id *)(v7 + 3560), "array");
      v227 = 0u;
      v228 = 0u;
      v229 = 1065353216;
      v102 = v224;
      v103 = *((unsigned int *)v224 + 88);
      if ((_DWORD)v103)
      {
        v104 = (const __CFString **)*((_QWORD *)v224 + 43);
        v105 = 8 * v103;
        do
        {
          v244 = 0;
          v244 = *v104;
          v106 = *((_QWORD *)&v228 + 1);
          v247 = &v244;
          std::__hash_table<std::__hash_value_type<AG::Subgraph const*,unsigned long>,std::__unordered_map_hasher<AG::Subgraph const*,std::__hash_value_type<AG::Subgraph const*,unsigned long>,std::hash<AG::Subgraph const*>,std::equal_to<AG::Subgraph const*>,true>,std::__unordered_map_equal<AG::Subgraph const*,std::__hash_value_type<AG::Subgraph const*,unsigned long>,std::equal_to<AG::Subgraph const*>,std::hash<AG::Subgraph const*>,true>,std::allocator<std::__hash_value_type<AG::Subgraph const*,unsigned long>>>::__emplace_unique_key_args<AG::Subgraph const*,std::piecewise_construct_t const&,std::tuple<AG::Subgraph const* const&>,std::tuple<>>((uint64_t)&v227, &v244, (uint64_t)&std::piecewise_construct, &v247)[3] = v106;
          ++v104;
          v105 -= 8;
        }
        while (v105);
        v102 = v224;
        v107 = *((unsigned int *)v224 + 88);
        if ((_DWORD)v107)
        {
          v108 = (_QWORD *)*((_QWORD *)v224 + 43);
          v209 = &v108[v107];
          do
          {
            v109 = *v108;
            v110 = (void *)objc_msgSend(MEMORY[0x1E0C99E08], "dictionary", v209);
            objc_msgSend(v110, "setObject:forKeyedSubscript:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInt:", *(_DWORD *)(v109 + 24) & 0x7FFFFFFF), CFSTR("id"));
            objc_msgSend(v110, "setObject:forKeyedSubscript:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLong:", *(_QWORD *)(v109 + 48)), CFSTR("context_id"));
            if (*(_BYTE *)(v109 + 104))
              objc_msgSend(v110, "setObject:forKeyedSubscript:", MEMORY[0x1E0C9AAB0], CFSTR("invalid"));
            v213 = v108;
            v111 = (void *)objc_msgSend(*(id *)(v7 + 3560), "array");
            v217 = v110;
            v112 = (_QWORD *)(v109 + 56);
            v113 = *(_QWORD *)(v109 + 56);
            if ((v113 & 1) != 0)
            {
              v115 = v113 & 0xFFFFFFFFFFFFFFFELL;
              if (*(_QWORD *)(v115 + 32))
                v112 = *(_QWORD **)(v115 + 32);
              else
                v112 = (_QWORD *)v115;
              v114 = &v112[*(_QWORD *)(v115 + 40)];
            }
            else
            {
              v114 = &v112[v113 != 0];
            }
            while (v112 != v114)
            {
              v116 = (_QWORD *)*v112;
              v225[0] = *(_QWORD **)v112;
              v117 = std::__hash_table<std::__hash_value_type<AG::Subgraph *,AG::Graph::TreeDataElement>,std::__unordered_map_hasher<AG::Subgraph *,std::__hash_value_type<AG::Subgraph *,AG::Graph::TreeDataElement>,std::hash<AG::Subgraph *>,std::equal_to<AG::Subgraph *>,true>,std::__unordered_map_equal<AG::Subgraph *,std::__hash_value_type<AG::Subgraph *,AG::Graph::TreeDataElement>,std::equal_to<AG::Subgraph *>,std::hash<AG::Subgraph *>,true>,std::allocator<std::__hash_value_type<AG::Subgraph *,AG::Graph::TreeDataElement>>>::find<AG::Subgraph *>(&v227, v225);
              if (v117)
              {
                v118 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLong:", v117[3]);
              }
              else
              {
                v244 = CFSTR("graph");
                v119 = (void *)MEMORY[0x1E0CB37E8];
                v120 = v116[5];
                v225[0] = *(_QWORD **)(v120 + 424);
                v121 = std::__hash_table<std::__hash_value_type<unsigned long,AG::Graph::ProfileTrace::UpdateData>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,AG::Graph::ProfileTrace::UpdateData>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,AG::Graph::ProfileTrace::UpdateData>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,AG::Graph::ProfileTrace::UpdateData>>>::find<unsigned long>(v241, (unint64_t *)v225);
                if (v121)
                {
                  v122 = v121[3];
                }
                else
                {
                  v122 = objc_msgSend(v219, "count");
                  objc_msgSend(v219, "addObject:", objc_msgSend(MEMORY[0x1E0C99E38], "null"));
                  v243 = *(_QWORD *)(v120 + 424);
                  v225[0] = &v243;
                  std::__hash_table<std::__hash_value_type<unsigned long,unsigned long>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,unsigned long>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>((uint64_t)v241, &v243, (uint64_t)&std::piecewise_construct, v225)[3] = v122;
                  v123 = v239;
                  v124 = v239 + 1;
                  if (v240 < v239 + 1)
                  {
                    AG::vector<std::unique_ptr<char const,util::free_deleter>,0ul,unsigned long>::reserve_slow((uint64_t)&v238, v124);
                    v123 = v239;
                    v124 = v239 + 1;
                  }
                  v238[v123] = v120;
                  v239 = v124;
                }
                v247 = (const __CFString **)objc_msgSend(v119, "numberWithUnsignedLong:", v122);
                v245 = (unint64_t)CFSTR("subgraph_id");
                v248 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInt:", v116[3] & 0x7FFFFFFF);
                v118 = objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v247, &v244, 2);
              }
              objc_msgSend(v111, "addObject:", v118);
              ++v112;
            }
            if (objc_msgSend(v111, "count") && v111)
              objc_msgSend(v217, "setObject:forKeyedSubscript:", v111, CFSTR("parents"));
            v125 = (void *)objc_msgSend(*(id *)(v7 + 3560), "array");
            v126 = *(unsigned int *)(v109 + 72);
            if ((_DWORD)v126)
            {
              v127 = *(_QWORD **)(v109 + 64);
              v128 = 8 * v126;
              do
              {
                v129 = *v127 & 0xFFFFFFFFFFFFFFFCLL;
                v225[0] = (_QWORD *)v129;
                v130 = std::__hash_table<std::__hash_value_type<AG::Subgraph *,AG::Graph::TreeDataElement>,std::__unordered_map_hasher<AG::Subgraph *,std::__hash_value_type<AG::Subgraph *,AG::Graph::TreeDataElement>,std::hash<AG::Subgraph *>,std::equal_to<AG::Subgraph *>,true>,std::__unordered_map_equal<AG::Subgraph *,std::__hash_value_type<AG::Subgraph *,AG::Graph::TreeDataElement>,std::equal_to<AG::Subgraph *>,std::hash<AG::Subgraph *>,true>,std::allocator<std::__hash_value_type<AG::Subgraph *,AG::Graph::TreeDataElement>>>::find<AG::Subgraph *>(&v227, v225);
                if (v130)
                {
                  v131 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLong:", v130[3]);
                }
                else
                {
                  v244 = CFSTR("graph");
                  v132 = (void *)MEMORY[0x1E0CB37E8];
                  v133 = *(_QWORD *)(v129 + 40);
                  v225[0] = *(_QWORD **)(v133 + 424);
                  v134 = std::__hash_table<std::__hash_value_type<unsigned long,AG::Graph::ProfileTrace::UpdateData>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,AG::Graph::ProfileTrace::UpdateData>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,AG::Graph::ProfileTrace::UpdateData>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,AG::Graph::ProfileTrace::UpdateData>>>::find<unsigned long>(v241, (unint64_t *)v225);
                  if (v134)
                  {
                    v135 = v134[3];
                  }
                  else
                  {
                    v135 = objc_msgSend(v219, "count");
                    objc_msgSend(v219, "addObject:", objc_msgSend(MEMORY[0x1E0C99E38], "null"));
                    v243 = *(_QWORD *)(v133 + 424);
                    v225[0] = &v243;
                    std::__hash_table<std::__hash_value_type<unsigned long,unsigned long>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,unsigned long>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>((uint64_t)v241, &v243, (uint64_t)&std::piecewise_construct, v225)[3] = v135;
                    v136 = v239;
                    v137 = v239 + 1;
                    if (v240 < v239 + 1)
                    {
                      AG::vector<std::unique_ptr<char const,util::free_deleter>,0ul,unsigned long>::reserve_slow((uint64_t)&v238, v137);
                      v136 = v239;
                      v137 = v239 + 1;
                    }
                    v238[v136] = v133;
                    v239 = v137;
                  }
                  v247 = (const __CFString **)objc_msgSend(v132, "numberWithUnsignedLong:", v135);
                  v245 = (unint64_t)CFSTR("subgraph_id");
                  v248 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInt:", *(_DWORD *)(v129 + 24) & 0x7FFFFFFF);
                  v131 = objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v247, &v244, 2);
                }
                objc_msgSend(v125, "addObject:", v131);
                ++v127;
                v128 -= 8;
              }
              while (v128);
            }
            if (objc_msgSend(v125, "count") && v125)
              objc_msgSend(v217, "setObject:forKeyedSubscript:", v125, CFSTR("children"));
            v138 = (void *)objc_msgSend(*(id *)(v7 + 3560), "array");
            v139 = *(_DWORD *)(v109 + 16);
            if (!v139)
              goto LABEL_211;
            v140 = AG::data::_shared_table_bytes;
            do
            {
              v141 = v139;
              v142 = v140 + v139;
              v143 = *(unsigned __int16 *)(v142 + 20);
              if (!*(_WORD *)(v142 + 20))
                goto LABEL_210;
              do
              {
                v144 = (v143 + v141);
                v145 = ((_BYTE)v143 + (_BYTE)v141) & 3;
                if ((((_BYTE)v143 + (_BYTE)v141) & 3) == 0)
                {
                  v146 = AG::data::_shared_table_bytes;
                  v147 = (unsigned __int16 *)(AG::data::_shared_table_bytes + v144 + 4);
                  goto LABEL_203;
                }
                if (v145 == 1)
                {
                  v146 = AG::data::_shared_table_bytes;
                  v147 = (unsigned __int16 *)(AG::data::_shared_table_bytes + (v144 & 0xFFFFFFFC) + 14);
LABEL_203:
                  v143 = *v147;
                  if ((v144 & 3) == 0)
                  {
                    v148 = *(unsigned __int8 *)(v146 + v144 + 6);
                    LODWORD(v244) = v144;
                    if (std::__hash_table<std::__hash_value_type<AG::data::ptr<AG::Node>,AG::Graph::ProfileData::Item>,std::__unordered_map_hasher<AG::data::ptr<AG::Node>,std::__hash_value_type<AG::data::ptr<AG::Node>,AG::Graph::ProfileData::Item>,std::hash<AG::data::ptr<AG::Node>>,std::equal_to<AG::data::ptr<AG::Node>>,true>,std::__unordered_map_equal<AG::data::ptr<AG::Node>,std::__hash_value_type<AG::data::ptr<AG::Node>,AG::Graph::ProfileData::Item>,std::equal_to<AG::data::ptr<AG::Node>>,std::hash<AG::data::ptr<AG::Node>>,true>,std::allocator<std::__hash_value_type<AG::data::ptr<AG::Node>,AG::Graph::ProfileData::Item>>>::find<AG::data::ptr<AG::Node>>(&v230, (unsigned int *)&v244))
                    {
                      v247 = &v244;
                      v149 = std::__hash_table<std::__hash_value_type<AG::data::ptr<AG::Node>,unsigned long>,std::__unordered_map_hasher<AG::data::ptr<AG::Node>,std::__hash_value_type<AG::data::ptr<AG::Node>,unsigned long>,std::hash<AG::data::ptr<AG::Node>>,std::equal_to<AG::data::ptr<AG::Node>>,true>,std::__unordered_map_equal<AG::data::ptr<AG::Node>,std::__hash_value_type<AG::data::ptr<AG::Node>,unsigned long>,std::equal_to<AG::data::ptr<AG::Node>>,std::hash<AG::data::ptr<AG::Node>>,true>,std::allocator<std::__hash_value_type<AG::data::ptr<AG::Node>,unsigned long>>>::__emplace_unique_key_args<AG::data::ptr<AG::Node>,std::piecewise_construct_t const&,std::tuple<AG::data::ptr<AG::Node> const&>,std::tuple<>>((uint64_t)&v230, (unsigned int *)&v244, (uint64_t)&std::piecewise_construct, (_DWORD **)&v247)[3];
                      objc_msgSend(v138, "addObject:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLong:", v149));
                      if ((_DWORD)v148)
                      {
                        v150 = (void *)objc_msgSend((id)objc_msgSend(v222, "objectAtIndexedSubscript:", v149), "mutableCopy");
                        objc_msgSend(v150, "setObject:forKeyedSubscript:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedChar:", v148), CFSTR("subgraph_flags"));
                        objc_msgSend(v222, "setObject:atIndexedSubscript:", v150, v149);

                      }
                    }
                  }
                  continue;
                }
                if (v145 == 2)
                  break;
              }
              while (v143);
              v140 = AG::data::_shared_table_bytes;
LABEL_210:
              v139 = *(_DWORD *)(v140 + v141 + 8);
            }
            while (v139);
LABEL_211:
            if (objc_msgSend(v138, "count"))
              objc_msgSend(v217, "setObject:forKeyedSubscript:", v138, CFSTR("nodes"));
            objc_msgSend(v210, "addObject:", v217);
            v108 = v213 + 1;
            v102 = v224;
          }
          while (v213 + 1 != v209);
        }
      }
      std::__hash_table<std::__hash_value_type<unsigned long,AG::Graph::ProfileTrace::UpdateData>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,AG::Graph::ProfileTrace::UpdateData>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,AG::Graph::ProfileTrace::UpdateData>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,AG::Graph::ProfileTrace::UpdateData>>>::~__hash_table((uint64_t)&v227);
      if (*((_QWORD *)v102 + 41))
      {
        v218 = (void *)objc_msgSend(*(id *)(v7 + 3560), "array");
        v227 = 0u;
        v228 = 0u;
        v229 = 1065353216;
        v247 = 0;
        v248 = 0;
        v249 = 0;
        v244 = 0;
        v245 = 0;
        v246 = 0;
        v151 = *((unsigned int *)v102 + 88);
        if ((_DWORD)v151)
        {
          v152 = (unint64_t *)*((_QWORD *)v102 + 43);
          v153 = &v152[v151];
          do
          {
            v243 = 0;
            v243 = *v152;
            v154 = *(unsigned int *)(v243 + 96);
            v155 = v248;
            if ((_DWORD)v154)
            {
              *(_DWORD *)(AG::data::_shared_table_bytes + v154 + 24) = 0;
              v156 = v155 + 1;
              if (v249 < v155 + 1)
              {
                AG::vector<AG::data::ptr<AG::Node>,0ul,unsigned long>::reserve_slow((uint64_t)&v247, v156);
                v155 = v248;
                v156 = v248 + 1;
              }
              *((_DWORD *)v247 + v155) = v154;
              v248 = v156;
              v155 = v156;
            }
            while (v155)
            {
              v157 = v155 - 1;
              v226 = *((_DWORD *)v247 + v157);
              v248 = v157;
              if (std::__hash_table<std::__hash_value_type<AG::data::ptr<AG::Node>,AG::Graph::ProfileData::Item>,std::__unordered_map_hasher<AG::data::ptr<AG::Node>,std::__hash_value_type<AG::data::ptr<AG::Node>,AG::Graph::ProfileData::Item>,std::hash<AG::data::ptr<AG::Node>>,std::equal_to<AG::data::ptr<AG::Node>>,true>,std::__unordered_map_equal<AG::data::ptr<AG::Node>,std::__hash_value_type<AG::data::ptr<AG::Node>,AG::Graph::ProfileData::Item>,std::equal_to<AG::data::ptr<AG::Node>>,std::hash<AG::data::ptr<AG::Node>>,true>,std::allocator<std::__hash_value_type<AG::data::ptr<AG::Node>,AG::Graph::ProfileData::Item>>>::find<AG::data::ptr<AG::Node>>(&v227, &v226))
              {
                v155 = v248;
              }
              else
              {
                v225[0] = (_QWORD *)v226;
                v225[1] = (_QWORD *)v245;
                std::__hash_table<std::__hash_value_type<AG::data::ptr<AG::Graph::TreeElement>,unsigned long>,std::__unordered_map_hasher<AG::data::ptr<AG::Graph::TreeElement>,std::__hash_value_type<AG::data::ptr<AG::Graph::TreeElement>,unsigned long>,std::hash<AG::data::ptr<AG::Graph::TreeElement>>,std::equal_to<AG::data::ptr<AG::Graph::TreeElement>>,true>,std::__unordered_map_equal<AG::data::ptr<AG::Graph::TreeElement>,std::__hash_value_type<AG::data::ptr<AG::Graph::TreeElement>,unsigned long>,std::equal_to<AG::data::ptr<AG::Graph::TreeElement>>,std::hash<AG::data::ptr<AG::Graph::TreeElement>>,true>,std::allocator<std::__hash_value_type<AG::data::ptr<AG::Graph::TreeElement>,unsigned long>>>::__emplace_unique_key_args<AG::data::ptr<AG::Graph::TreeElement>,std::pair<AG::data::ptr<AG::Graph::TreeElement>,unsigned long>>((uint64_t)&v227, (unsigned int *)v225, (uint64_t)v225);
                v158 = v245;
                v159 = v245 + 1;
                if (v246 < v245 + 1)
                {
                  AG::vector<AG::data::ptr<AG::Node>,0ul,unsigned long>::reserve_slow((uint64_t)&v244, v159);
                  v158 = v245;
                  v159 = v245 + 1;
                }
                *((_DWORD *)&v244->isa + v158) = v226;
                v245 = v159;
                v160 = AG::data::_shared_table_bytes + v226;
                v161 = *(_DWORD *)(v160 + 20);
                v155 = v248;
                if (v161)
                {
                  v162 = v248 + 1;
                  if (v249 < v248 + 1)
                  {
                    AG::vector<AG::data::ptr<AG::Node>,0ul,unsigned long>::reserve_slow((uint64_t)&v247, v162);
                    v155 = v248;
                    v161 = *(_DWORD *)(v160 + 20);
                    v162 = v248 + 1;
                  }
                  *((_DWORD *)v247 + v155) = v161;
                  v248 = v162;
                  v155 = v162;
                }
                v163 = *(_DWORD *)(v160 + 24);
                if (v163)
                {
                  v164 = v155 + 1;
                  if (v249 < v155 + 1)
                  {
                    AG::vector<AG::data::ptr<AG::Node>,0ul,unsigned long>::reserve_slow((uint64_t)&v247, v164);
                    v155 = v248;
                    v163 = *(_DWORD *)(v160 + 24);
                    v164 = v248 + 1;
                  }
                  *((_DWORD *)v247 + v155) = v163;
                  v248 = v164;
                  v155 = v164;
                }
              }
            }
            v165 = *((_QWORD *)v224 + 41);
            v225[0] = &v243;
            v166 = std::__hash_table<std::__hash_value_type<AG::Subgraph *,AG::Graph::TreeDataElement>,std::__unordered_map_hasher<AG::Subgraph *,std::__hash_value_type<AG::Subgraph *,AG::Graph::TreeDataElement>,std::hash<AG::Subgraph *>,std::equal_to<AG::Subgraph *>,true>,std::__unordered_map_equal<AG::Subgraph *,std::__hash_value_type<AG::Subgraph *,AG::Graph::TreeDataElement>,std::equal_to<AG::Subgraph *>,std::hash<AG::Subgraph *>,true>,std::allocator<std::__hash_value_type<AG::Subgraph *,AG::Graph::TreeDataElement>>>::__emplace_unique_key_args<AG::Subgraph *,std::piecewise_construct_t const&,std::tuple<AG::Subgraph * const&>,std::tuple<>>(v165, &v243, (uint64_t)&std::piecewise_construct, v225);
            AG::Graph::TreeDataElement::sort_nodes((uint64_t)(v166 + 24));
            ++v152;
          }
          while (v152 != v153);
          v167 = (__CFString *)v244;
          v214 = (unsigned int *)v244 + v245;
          if (v245)
          {
            while (1)
            {
              isa_low = LODWORD(v167->isa);
              v169 = AG::data::_shared_table_bytes;
              v170 = (void *)objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
              v171 = v169 + isa_low;
              v172 = *(_DWORD *)(v169 + isa_low + 8);
              v173 = *(_QWORD *)(v169 + isa_low);
              if (v172 < 4 || v173 == 0)
              {
                if (v172 < 4 || v173 != 0)
                {
                  if (*(_DWORD *)(v171 + 16))
                    goto LABEL_256;
LABEL_247:
                  objc_msgSend(v170, "setObject:forKeyedSubscript:", MEMORY[0x1E0C9AAB0], CFSTR("root"));
                  goto LABEL_256;
                }
                LODWORD(v243) = *(_DWORD *)(v169 + isa_low + 8);
                v225[0] = &v243;
                objc_msgSend(v170, "setObject:forKeyedSubscript:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLong:", std::__hash_table<std::__hash_value_type<AG::data::ptr<AG::Node>,unsigned long>,std::__unordered_map_hasher<AG::data::ptr<AG::Node>,std::__hash_value_type<AG::data::ptr<AG::Node>,unsigned long>,std::hash<AG::data::ptr<AG::Node>>,std::equal_to<AG::data::ptr<AG::Node>>,true>,std::__unordered_map_equal<AG::data::ptr<AG::Node>,std::__hash_value_type<AG::data::ptr<AG::Node>,unsigned long>,std::equal_to<AG::data::ptr<AG::Node>>,std::hash<AG::data::ptr<AG::Node>>,true>,std::allocator<std::__hash_value_type<AG::data::ptr<AG::Node>,unsigned long>>>::__emplace_unique_key_args<AG::data::ptr<AG::Node>,std::piecewise_construct_t const&,std::tuple<AG::data::ptr<AG::Node>&&>,std::tuple<>>((uint64_t)&v230, (unsigned int *)&v243, (uint64_t)&std::piecewise_construct, (_DWORD **)v225)[3]), CFSTR("creator"));
              }
              else
              {
                if ((v172 & 3) != 0)
                {
                  v172 = AG::AttributeID::resolve_slow((AG::AttributeID *)(v169 + isa_low + 8), 8u);
                  v176 = v199;
                }
                else
                {
                  v176 = 0;
                }
                if ((v172 & 3) == 0)
                {
                  LODWORD(v243) = v172;
                  v225[0] = &v243;
                  objc_msgSend(v170, "setObject:forKeyedSubscript:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLong:", std::__hash_table<std::__hash_value_type<AG::data::ptr<AG::Node>,unsigned long>,std::__unordered_map_hasher<AG::data::ptr<AG::Node>,std::__hash_value_type<AG::data::ptr<AG::Node>,unsigned long>,std::hash<AG::data::ptr<AG::Node>>,std::equal_to<AG::data::ptr<AG::Node>>,true>,std::__unordered_map_equal<AG::data::ptr<AG::Node>,std::__hash_value_type<AG::data::ptr<AG::Node>,unsigned long>,std::equal_to<AG::data::ptr<AG::Node>>,std::hash<AG::data::ptr<AG::Node>>,true>,std::allocator<std::__hash_value_type<AG::data::ptr<AG::Node>,unsigned long>>>::__emplace_unique_key_args<AG::data::ptr<AG::Node>,std::piecewise_construct_t const&,std::tuple<AG::data::ptr<AG::Node>&&>,std::tuple<>>((uint64_t)&v230, (unsigned int *)&v243, (uint64_t)&std::piecewise_construct, (_DWORD **)v225)[3]), CFSTR("node"));
                  if (v176)
                    objc_msgSend(v170, "setObject:forKeyedSubscript:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLong:", v176 - 1), CFSTR("offset"));
                }
                v177 = (_anonymous_namespace_ *)objc_msgSend(*(id *)(v22 + 2368), "stringWithUTF8String:", AG::swift::metadata::name(*(AG::swift::metadata **)v171, 0));
                if (!*(_DWORD *)(v171 + 16))
                  goto LABEL_247;
              }
LABEL_256:
              if (*(_DWORD *)(v171 + 12))
                objc_msgSend(v170, "setObject:forKeyedSubscript:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInt:"), CFSTR("flags"));
              if (*(_DWORD *)(v171 + 20))
              {
                v178 = (void *)objc_msgSend(*(id *)(v7 + 3560), "array");
                for (ii = *(_DWORD *)(v171 + 20);
                      ;
                      ii = *(_DWORD *)(AG::data::_shared_table_bytes + v243 + 24))
                {
                  LODWORD(v243) = ii;
                  if (!ii)
                    break;
                  v225[0] = &v243;
                  objc_msgSend(v178, "addObject:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLong:", std::__hash_table<std::__hash_value_type<AG::data::ptr<AG::Graph::TreeElement>,unsigned long>,std::__unordered_map_hasher<AG::data::ptr<AG::Graph::TreeElement>,std::__hash_value_type<AG::data::ptr<AG::Graph::TreeElement>,unsigned long>,std::hash<AG::data::ptr<AG::Graph::TreeElement>>,std::equal_to<AG::data::ptr<AG::Graph::TreeElement>>,true>,std::__unordered_map_equal<AG::data::ptr<AG::Graph::TreeElement>,std::__hash_value_type<AG::data::ptr<AG::Graph::TreeElement>,unsigned long>,std::equal_to<AG::data::ptr<AG::Graph::TreeElement>>,std::hash<AG::data::ptr<AG::Graph::TreeElement>>,true>,std::allocator<std::__hash_value_type<AG::data::ptr<AG::Graph::TreeElement>,unsigned long>>>::__emplace_unique_key_args<AG::data::ptr<AG::Graph::TreeElement>,std::piecewise_construct_t const&,std::tuple<AG::data::ptr<AG::Graph::TreeElement> const&>,std::tuple<>>((uint64_t)&v227, (unsigned int *)&v243, (uint64_t)&std::piecewise_construct, (_DWORD **)v225)[3]));
                }
                objc_msgSend(v170, "setObject:forKeyedSubscript:", v178, CFSTR("children"));
              }
              v243 = 0;
              v243 = *(_QWORD *)(AG::data::_shared_table_bytes + (isa_low & 0xFFFFFE00));
              v180 = *((_QWORD *)v224 + 41);
              v225[0] = &v243;
              v181 = std::__hash_table<std::__hash_value_type<AG::Subgraph *,AG::Graph::TreeDataElement>,std::__unordered_map_hasher<AG::Subgraph *,std::__hash_value_type<AG::Subgraph *,AG::Graph::TreeDataElement>,std::hash<AG::Subgraph *>,std::equal_to<AG::Subgraph *>,true>,std::__unordered_map_equal<AG::Subgraph *,std::__hash_value_type<AG::Subgraph *,AG::Graph::TreeDataElement>,std::equal_to<AG::Subgraph *>,std::hash<AG::Subgraph *>,true>,std::allocator<std::__hash_value_type<AG::Subgraph *,AG::Graph::TreeDataElement>>>::__emplace_unique_key_args<AG::Subgraph *,std::piecewise_construct_t const&,std::tuple<AG::Subgraph * const&>,std::tuple<>>(v180, &v243, (uint64_t)&std::piecewise_construct, v225);
              v183 = (_DWORD *)*((_QWORD *)v181 + 3);
              v182 = *((_QWORD *)v181 + 4);
              if (v182)
              {
                do
                {
                  v184 = v182 >> 1;
                  v185 = &v183[2 * (v182 >> 1)];
                  v187 = *v185;
                  v186 = v185 + 2;
                  v182 += ~(v182 >> 1);
                  if (v187 < isa_low)
                    v183 = v186;
                  else
                    v182 = v184;
                }
                while (v182);
                if (v183)
                {
LABEL_271:
                  if (*v183 == (_DWORD)isa_low)
                  {
                    v188 = (void *)objc_msgSend(*(id *)(v7 + 3560), "array");
                    if (*v183 == (_DWORD)isa_low)
                    {
                      v189 = v183 + 1;
                      do
                      {
                        v225[0] = v189;
                        objc_msgSend(v188, "addObject:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLong:", std::__hash_table<std::__hash_value_type<AG::data::ptr<AG::Node>,unsigned long>,std::__unordered_map_hasher<AG::data::ptr<AG::Node>,std::__hash_value_type<AG::data::ptr<AG::Node>,unsigned long>,std::hash<AG::data::ptr<AG::Node>>,std::equal_to<AG::data::ptr<AG::Node>>,true>,std::__unordered_map_equal<AG::data::ptr<AG::Node>,std::__hash_value_type<AG::data::ptr<AG::Node>,unsigned long>,std::equal_to<AG::data::ptr<AG::Node>>,std::hash<AG::data::ptr<AG::Node>>,true>,std::allocator<std::__hash_value_type<AG::data::ptr<AG::Node>,unsigned long>>>::__emplace_unique_key_args<AG::data::ptr<AG::Node>,std::piecewise_construct_t const&,std::tuple<AG::data::ptr<AG::Node> const&>,std::tuple<>>((uint64_t)&v230, v189, (uint64_t)&std::piecewise_construct, (_DWORD **)v225)[3]));
                        v190 = v189[1];
                        v189 += 2;
                      }
                      while (v190 == (_DWORD)isa_low);
                    }
                    objc_msgSend(v170, "setObject:forKeyedSubscript:", v188, CFSTR("nodes"));
                  }
                }
              }
              else if (v183)
              {
                goto LABEL_271;
              }
              v191 = *(unsigned int *)(v171 + 28);
              if ((_DWORD)v191)
              {
                v192 = (void *)objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
                v193 = v167;
                do
                {
                  v194 = AG::data::_shared_table_bytes + v191;
                  v195 = *(_DWORD *)(AG::data::_shared_table_bytes + v191 + 8);
                  if ((v195 & 3) != 0)
                  {
                    v195 = AG::AttributeID::resolve_slow((AG::AttributeID *)(AG::data::_shared_table_bytes + v191 + 8), 0);
                    v196 = v198;
                  }
                  else
                  {
                    v196 = 0;
                  }
                  if ((v195 & 3) == 0)
                  {
                    v197 = (void *)objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
                    v226 = v195;
                    v225[0] = &v226;
                    objc_msgSend(v197, "setObject:forKeyedSubscript:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLong:", std::__hash_table<std::__hash_value_type<AG::data::ptr<AG::Node>,unsigned long>,std::__unordered_map_hasher<AG::data::ptr<AG::Node>,std::__hash_value_type<AG::data::ptr<AG::Node>,unsigned long>,std::hash<AG::data::ptr<AG::Node>>,std::equal_to<AG::data::ptr<AG::Node>>,true>,std::__unordered_map_equal<AG::data::ptr<AG::Node>,std::__hash_value_type<AG::data::ptr<AG::Node>,unsigned long>,std::equal_to<AG::data::ptr<AG::Node>>,std::hash<AG::data::ptr<AG::Node>>,true>,std::allocator<std::__hash_value_type<AG::data::ptr<AG::Node>,unsigned long>>>::__emplace_unique_key_args<AG::data::ptr<AG::Node>,std::piecewise_construct_t const&,std::tuple<AG::data::ptr<AG::Node>&&>,std::tuple<>>((uint64_t)&v230, &v226, (uint64_t)&std::piecewise_construct, (_DWORD **)v225)[3]), CFSTR("node"));
                    if (v196)
                      objc_msgSend(v197, "setObject:forKeyedSubscript:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLong:", v196), CFSTR("offset"));
                    objc_msgSend(v192, "setObject:forKeyedSubscript:", v197, objc_msgSend(*(id *)(v22 + 2368), "stringWithUTF8String:", AG::Graph::key_name(v224, (const char *)*(unsigned int *)(v194 + 12))));
                  }
                  v191 = *(unsigned int *)(v194 + 20);
                }
                while ((_DWORD)v191);
                objc_msgSend(v170, "setObject:forKeyedSubscript:", v192, CFSTR("values"));
                v167 = v193;
              }
              objc_msgSend(v218, "addObject:", v170);
              v167 = (__CFString *)((char *)v167 + 4);
              if (v167 == (__CFString *)v214)
              {
                v167 = (__CFString *)v244;
                break;
              }
            }
          }
          v102 = v224;
          if (v167)
            free(v167);
        }
        if (v247)
          free(v247);
        std::__hash_table<std::__hash_value_type<unsigned long,AG::Graph::ProfileTrace::UpdateData>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,AG::Graph::ProfileTrace::UpdateData>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,AG::Graph::ProfileTrace::UpdateData>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,AG::Graph::ProfileTrace::UpdateData>>>::~__hash_table((uint64_t)&v227);
      }
      else
      {
        v218 = 0;
      }
      v200 = (void *)objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
      objc_msgSend(v200, "setObject:forKeyedSubscript:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLong:", *((_QWORD *)v102 + 53)), CFSTR("id"));
      objc_msgSend(v200, "setObject:forKeyedSubscript:", v211, CFSTR("types"));
      objc_msgSend(v200, "setObject:forKeyedSubscript:", v222, CFSTR("nodes"));
      objc_msgSend(v200, "setObject:forKeyedSubscript:", v223, CFSTR("edges"));
      objc_msgSend(v200, "setObject:forKeyedSubscript:", v210, CFSTR("subgraphs"));
      if (v218)
        objc_msgSend(v200, "setObject:forKeyedSubscript:", v218, CFSTR("trees"));
      v201 = objc_msgSend(v200, "setObject:forKeyedSubscript:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLong:", *((_QWORD *)v102 + 55)), CFSTR("transaction_count"));
      v202 = (_QWORD *)*((_QWORD *)v102 + 38);
      if (v202)
      {
        v203 = AG::Graph::ProfileData::json_data(v201, v202 + 1, v102);
        if (v203)
          objc_msgSend(v200, "addEntriesFromDictionary:", v203);
        if (v202[21])
        {
          v204 = (void *)objc_msgSend(MEMORY[0x1E0C99E08], "dictionary", v203);
          v205 = v204;
          for (jj = (uint64_t **)v202[20]; jj; jj = (uint64_t **)*jj)
          {
            v204 = AG::Graph::ProfileData::json_data((uint64_t)v204, jj + 3, v224);
            if (v204)
              v204 = (void *)objc_msgSend(v205, "setObject:forKeyedSubscript:", v204, objc_msgSend(*(id *)(v22 + 2368), "stringWithUTF8String:", AG::Graph::key_name(v224, (const char *)*((unsigned int *)jj + 4))));
          }
          if (objc_msgSend(v205, "count"))
            objc_msgSend(v200, "setObject:forKeyedSubscript:", v205, CFSTR("events"));
        }
      }
      else
      {
        objc_msgSend(v200, "setObject:forKeyedSubscript:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLong:", *((_QWORD *)v102 + 56)), CFSTR("update_count"));
        objc_msgSend(v200, "setObject:forKeyedSubscript:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLong:", *((_QWORD *)v224 + 58)), CFSTR("change_count"));
      }
      v247 = (const __CFString **)*((_QWORD *)v224 + 53);
      *(_QWORD *)&v227 = &v247;
      objc_msgSend(v219, "setObject:atIndexedSubscript:", v200, std::__hash_table<std::__hash_value_type<unsigned long,unsigned long>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,unsigned long>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>((uint64_t)v241, (unint64_t *)&v247, (uint64_t)&std::piecewise_construct, (_QWORD **)&v227)[3]);
      std::__hash_table<std::__hash_value_type<unsigned long,AG::Graph::ProfileTrace::UpdateData>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,AG::Graph::ProfileTrace::UpdateData>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,AG::Graph::ProfileTrace::UpdateData>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,AG::Graph::ProfileTrace::UpdateData>>>::~__hash_table((uint64_t)&v230);
      if (v233)
        free(v233);
      std::__hash_table<std::__hash_value_type<unsigned long,AG::Graph::ProfileTrace::UpdateData>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,AG::Graph::ProfileTrace::UpdateData>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,AG::Graph::ProfileTrace::UpdateData>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,AG::Graph::ProfileTrace::UpdateData>>>::~__hash_table((uint64_t)v236);
      v21 = v239;
    }
    while (v239);
  }
  v207 = (void *)objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
  objc_msgSend(v207, "setObject:forKeyedSubscript:", &unk_1E5A621E0, CFSTR("version"));
  objc_msgSend(v207, "setObject:forKeyedSubscript:", v219, CFSTR("graphs"));
  if (v238)
    free(v238);
  std::__hash_table<std::__hash_value_type<unsigned long,AG::Graph::ProfileTrace::UpdateData>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,AG::Graph::ProfileTrace::UpdateData>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,AG::Graph::ProfileTrace::UpdateData>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,AG::Graph::ProfileTrace::UpdateData>>>::~__hash_table((uint64_t)v241);
  return v207;
}

void sub_1AB952F18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,uint64_t a36,char a37)
{
  uint64_t v37;
  void *v39;
  void *v40;
  void *v41;

  v39 = *(void **)(v37 - 152);
  if (v39)
    free(v39);
  v40 = *(void **)(v37 - 128);
  if (v40)
    free(v40);
  std::__hash_table<std::__hash_value_type<unsigned long,AG::Graph::ProfileTrace::UpdateData>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,AG::Graph::ProfileTrace::UpdateData>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,AG::Graph::ProfileTrace::UpdateData>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,AG::Graph::ProfileTrace::UpdateData>>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<std::__hash_value_type<unsigned long,AG::Graph::ProfileTrace::UpdateData>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,AG::Graph::ProfileTrace::UpdateData>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,AG::Graph::ProfileTrace::UpdateData>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,AG::Graph::ProfileTrace::UpdateData>>>::~__hash_table((uint64_t)&a29);
  if (a34)
    free(a34);
  std::__hash_table<std::__hash_value_type<unsigned long,AG::Graph::ProfileTrace::UpdateData>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,AG::Graph::ProfileTrace::UpdateData>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,AG::Graph::ProfileTrace::UpdateData>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,AG::Graph::ProfileTrace::UpdateData>>>::~__hash_table((uint64_t)&a37);
  v41 = *(void **)(v37 - 232);
  if (v41)
    free(v41);
  std::__hash_table<std::__hash_value_type<unsigned long,AG::Graph::ProfileTrace::UpdateData>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,AG::Graph::ProfileTrace::UpdateData>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,AG::Graph::ProfileTrace::UpdateData>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,AG::Graph::ProfileTrace::UpdateData>>>::~__hash_table(v37 - 208);
  _Unwind_Resume(a1);
}

void *AG::Graph::description_graph_dot(AG::Graph *this, NSDictionary *a2)
{
  id v4;
  id v5;
  id v6;
  void *v7;
  id v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  unsigned __int16 *v20;
  unsigned int *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t (*v26)(_QWORD, _QWORD *);
  _QWORD *v27;
  _anonymous_namespace_ *v28;
  uint64_t (*v29)(uint64_t, _QWORD *);
  _QWORD *v30;
  _anonymous_namespace_ *v31;
  uint64_t v32;
  double v33;
  uint64_t *v34;
  unint64_t v35;
  double v36;
  double v37;
  unint64_t v38;
  double v39;
  int v40;
  const __CFString *v41;
  int v42;
  const __CFString *v43;
  const char *v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unsigned int v48;
  char v49;
  unsigned int v50;
  unsigned int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unsigned int v55;
  uint64_t v56;
  uint64_t **i;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unsigned int v61;
  uint64_t v62;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  AG::Graph *v67;
  int v68;
  uint64_t v69;
  __int128 v70;
  __int128 v71;
  int v72;
  int v73;
  unsigned int v74;
  unsigned int v75[3];

  v4 = -[NSDictionary objectForKeyedSubscript:](a2, "objectForKeyedSubscript:", CFSTR("include-values"));
  if (v4)
    v68 = objc_msgSend(v4, "BOOLValue");
  else
    v68 = 0;
  v5 = -[NSDictionary objectForKeyedSubscript:](a2, "objectForKeyedSubscript:", CFSTR("attribute-ids"));
  if (v5)
  {
    v6 = v5;
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
      v7 = v6;
    else
      v7 = 0;
  }
  else
  {
    v7 = 0;
  }
  v8 = -[NSDictionary objectForKeyedSubscript:](a2, "objectForKeyedSubscript:", CFSTR("truncation-limit"));
  if (v8)
    v66 = objc_msgSend(v8, "unsignedLongValue");
  else
    v66 = 40;
  v9 = (void *)objc_msgSend(MEMORY[0x1E0CB37A0], "string");
  objc_msgSend(v9, "appendString:", CFSTR("digraph {\n"));
  v70 = 0u;
  v71 = 0u;
  v72 = 1065353216;
  v10 = *((unsigned int *)this + 88);
  if (!(_DWORD)v10)
    goto LABEL_105;
  v11 = *((_QWORD *)this + 43);
  v64 = v11 + 8 * v10;
  v67 = this;
  do
  {
    v65 = v11;
    v12 = *(_DWORD *)(*(_QWORD *)v11 + 16);
    if (!v12)
      goto LABEL_95;
    v13 = AG::data::_shared_table_bytes;
    do
    {
      v14 = v12;
      v15 = v13 + v12;
      v16 = *(unsigned __int16 *)(v15 + 20);
      if (!*(_WORD *)(v15 + 20))
        goto LABEL_94;
      v69 = v14;
      do
      {
        while (1)
        {
          v17 = (v16 + v14);
          v18 = ((_BYTE)v16 + (_BYTE)v14) & 3;
          if ((((_BYTE)v16 + (_BYTE)v14) & 3) != 0)
          {
            if (v18 != 1)
            {
              if (v18 == 2)
                goto LABEL_93;
              goto LABEL_25;
            }
            v19 = AG::data::_shared_table_bytes;
            v20 = (unsigned __int16 *)(AG::data::_shared_table_bytes + (v17 & 0xFFFFFFFC) + 14);
          }
          else
          {
            v19 = AG::data::_shared_table_bytes;
            v20 = (unsigned __int16 *)(AG::data::_shared_table_bytes + v17 + 4);
          }
          v16 = *v20;
          if ((v17 & 3) == 0)
            break;
LABEL_25:
          if (!v16)
            goto LABEL_93;
        }
        v75[0] = v17;
        if (!v7 || objc_msgSend(v7, "containsIndex:", v17))
        {
          objc_msgSend(v9, "appendFormat:", CFSTR("  _%d[label=\"%d"), v17, v17);
          v21 = (unsigned int *)(v19 + v17);
          v22 = *v21;
          v23 = *((_QWORD *)v67 + 16);
          v24 = (v22 >> 5) & 0x7FFFFF8;
          v25 = *(_QWORD *)(v23 + v24);
          if ((v22 & 0x20) != 0)
          {
            v26 = *(uint64_t (**)(_QWORD, _QWORD *))(*(_QWORD *)(v25 + 32) + 24);
            if (v26)
            {
              v27 = (_QWORD *)((char *)v21 + *(unsigned int *)(v25 + 44));
              if ((*((_BYTE *)v21 + 7) & 1) != 0)
                v27 = (_QWORD *)*v27;
              v28 = (_anonymous_namespace_ *)v26(*(_QWORD *)(v23 + v24), v27);
              if (v28)
              {
                objc_msgSend(v9, "appendString:", CFSTR(": "));
              }
            }
          }
          if (v68)
          {
            if ((*(_BYTE *)v21 & 0x10) != 0)
            {
              v29 = *(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)(v25 + 32) + 32);
              if (v29)
              {
                v30 = (_QWORD *)(AG::data::_shared_table_bytes + v21[2]);
                if ((*((_BYTE *)v21 + 7) & 2) != 0)
                  v30 = (_QWORD *)*v30;
                v31 = (_anonymous_namespace_ *)v29(v25, v30);
                if (v31)
                {
                  objc_msgSend(v9, "appendString:", CFSTR(" → "));
                }
              }
            }
          }
          v32 = *((_QWORD *)v67 + 38);
          v33 = 0.0;
          if (v32)
          {
            v34 = std::__hash_table<std::__hash_value_type<AG::data::ptr<AG::Node>,AG::Graph::ProfileData::Item>,std::__unordered_map_hasher<AG::data::ptr<AG::Node>,std::__hash_value_type<AG::data::ptr<AG::Node>,AG::Graph::ProfileData::Item>,std::hash<AG::data::ptr<AG::Node>>,std::equal_to<AG::data::ptr<AG::Node>>,true>,std::__unordered_map_equal<AG::data::ptr<AG::Node>,std::__hash_value_type<AG::data::ptr<AG::Node>,AG::Graph::ProfileData::Item>,std::equal_to<AG::data::ptr<AG::Node>>,std::hash<AG::data::ptr<AG::Node>>,true>,std::allocator<std::__hash_value_type<AG::data::ptr<AG::Node>,AG::Graph::ProfileData::Item>>>::find<AG::data::ptr<AG::Node>>((_QWORD *)(v32 + 64), v75);
            if (v34)
            {
              v35 = v34[3];
              if (v35)
              {
                v36 = (double)v35;
                v37 = (double)(unint64_t)v34[5];
                v38 = *(_QWORD *)(*((_QWORD *)v67 + 38) + 24);
                v39 = AG::absolute_time_to_seconds((AG *)(v37 / (double)v35));
                v33 = v37 / (double)v38 * 100.0;
                objc_msgSend(v9, "appendFormat:", CFSTR("\\n%.2g%%: %g × %.2fμs"), *(_QWORD *)&v33, *(_QWORD *)&v36, v39 * 1000000.0);
              }
            }
          }
          objc_msgSend(v9, "appendString:", CFSTR("\""));
          v40 = *v21;
          v41 = CFSTR(" fillcolor=cyan");
          if ((*v21 & 0xC0) != 0
            || (v41 = CFSTR(" fillcolor=orangered"), v33 > 10.0)
            || (v41 = CFSTR(" fillcolor=orange"), v33 > 5.0)
            || (v41 = CFSTR(" fillcolor=yellow"), v33 > 1.0))
          {
            objc_msgSend(v9, "appendString:", v41);
            v40 = *v21;
            v42 = 1;
          }
          else
          {
            v42 = 0;
          }
          v43 = CFSTR(" style=\"dashed%s\"");
          if ((v40 & 0x10) != 0 && (v43 = CFSTR(" style=\"bold%s\""), v21[3] >= 0x20) && v21[5] > 0x1F)
          {
            if (v42)
              objc_msgSend(v9, "appendFormat:", CFSTR(" style=filled"));
          }
          else
          {
            v44 = "";
            if (v42)
              v44 = ",filled";
            objc_msgSend(v9, "appendFormat:", v43, v44);
          }
          if ((*(_BYTE *)v21 & 1) != 0)
            objc_msgSend(v9, "appendString:", CFSTR(" color=red"));
          objc_msgSend(v9, "appendString:", CFSTR("];\n"));
          v45 = v21[3];
          if (v45 >= 0x20)
          {
            v46 = AG::data::_shared_table_bytes + v21[4];
            v47 = v46 + 5 * (v45 >> 5);
            do
            {
              v49 = *(_BYTE *)(v46 + 4);
              v74 = *(_DWORD *)v46;
              v48 = v74;
              v50 = v74;
              v51 = v74 & 3;
              if ((v74 & 3) != 0)
                v50 = AG::AttributeID::resolve_slow((AG::AttributeID *)&v74, 0);
              if ((v50 & 3) == 0 && (!v7 || objc_msgSend(v7, "containsIndex:", v50)))
              {
                v74 = v48;
                if (v51)
                {
                  v55 = AG::AttributeID::resolve_slow((AG::AttributeID *)&v74, 4u);
                  v52 = v56;
                  v48 = v55;
                }
                else
                {
                  v52 = 0;
                }
                objc_msgSend(v9, "appendFormat:", CFSTR("  _%d -> _%d["), v48 & 0xFFFFFFFC, v75[0]);
                while ((v48 & 3) == 1)
                {
                  v74 = v48 & 0xFFFFFFFC;
                  if (!std::__hash_table<std::__hash_value_type<AG::data::ptr<AG::Node>,AG::Graph::ProfileData::Item>,std::__unordered_map_hasher<AG::data::ptr<AG::Node>,std::__hash_value_type<AG::data::ptr<AG::Node>,AG::Graph::ProfileData::Item>,std::hash<AG::data::ptr<AG::Node>>,std::equal_to<AG::data::ptr<AG::Node>>,true>,std::__unordered_map_equal<AG::data::ptr<AG::Node>,std::__hash_value_type<AG::data::ptr<AG::Node>,AG::Graph::ProfileData::Item>,std::equal_to<AG::data::ptr<AG::Node>>,std::hash<AG::data::ptr<AG::Node>>,true>,std::allocator<std::__hash_value_type<AG::data::ptr<AG::Node>,AG::Graph::ProfileData::Item>>>::find<AG::data::ptr<AG::Node>>(&v70, &v74))std::__hash_table<AG::data::ptr<AG::IndirectNode>,std::hash<AG::data::ptr<AG::IndirectNode>>,std::equal_to<AG::data::ptr<AG::IndirectNode>>,std::allocator<AG::data::ptr<AG::IndirectNode>>>::__emplace_unique_key_args<AG::data::ptr<AG::IndirectNode>,AG::data::ptr<AG::IndirectNode> const&>((uint64_t)&v70, &v74, &v74);
                  v73 = *(_DWORD *)(AG::data::_shared_table_bytes + v74);
                  if ((v73 & 3) == 0)
                    break;
                  v48 = AG::AttributeID::resolve_slow((AG::AttributeID *)&v73, 4u);
                }
                if ((v49 & 8) != 0)
                  objc_msgSend(v9, "appendString:", CFSTR(" color=red"));
                v53 = *(_QWORD *)(AG::data::_shared_table_bytes + (v50 & 0xFFFFFE00));
                if (v53)
                  v53 = *(_QWORD *)(v53 + 48);
                v54 = *(_QWORD *)(AG::data::_shared_table_bytes + (v75[0] & 0xFFFFFE00));
                if (v54)
                  v54 = *(_QWORD *)(v54 + 48);
                if (v53 != v54)
                  objc_msgSend(v9, "appendString:", CFSTR(" penwidth=2"));
                if (v51 == 1)
                  objc_msgSend(v9, "appendFormat:", CFSTR(" label=\"@%d\""), v52);
                objc_msgSend(v9, "appendString:", CFSTR("];\n"));
              }
              v46 += 5;
            }
            while (v46 != v47);
          }
        }
        v14 = v69;
      }
      while (v16);
LABEL_93:
      v13 = AG::data::_shared_table_bytes;
LABEL_94:
      v12 = *(_DWORD *)(v13 + v14 + 8);
    }
    while (v12);
LABEL_95:
    v11 = v65 + 8;
  }
  while (v65 + 8 != v64);
  for (i = (uint64_t **)v71; i; i = (uint64_t **)*i)
  {
    v58 = *((unsigned int *)i + 4);
    v59 = AG::data::_shared_table_bytes;
    objc_msgSend(v9, "appendFormat:", CFSTR("  _%d[label=\"%d\" shape=box];\n"), v58, v58);
    v60 = v59 + v58;
    v61 = *(_DWORD *)v60;
    v75[0] = v61;
    if ((v61 & 3) != 0)
      v61 = AG::AttributeID::resolve_slow((AG::AttributeID *)v75, 4u);
    else
      v62 = 0;
    objc_msgSend(v9, "appendFormat:", CFSTR("  _%d -> _%d[label=\"@%d\"];\n"), v61 & 0xFFFFFFFC, v58, v62);
    if ((*(_BYTE *)(v60 + 8) & 1) != 0 && *(_DWORD *)(v60 + 16))
      objc_msgSend(v9, "appendFormat:", CFSTR("  _%d -> _%d[color=blue];\n"), *(unsigned int *)(v60 + 16), v58);
  }
LABEL_105:
  objc_msgSend(v9, "appendString:", CFSTR("}\n"));
  std::__hash_table<std::__hash_value_type<unsigned long,AG::Graph::ProfileTrace::UpdateData>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,AG::Graph::ProfileTrace::UpdateData>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,AG::Graph::ProfileTrace::UpdateData>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,AG::Graph::ProfileTrace::UpdateData>>>::~__hash_table((uint64_t)&v70);
  return v9;
}

void sub_1AB9537B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  std::__hash_table<std::__hash_value_type<unsigned long,AG::Graph::ProfileTrace::UpdateData>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,AG::Graph::ProfileTrace::UpdateData>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,AG::Graph::ProfileTrace::UpdateData>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,AG::Graph::ProfileTrace::UpdateData>>>::~__hash_table((uint64_t)va);
  _Unwind_Resume(a1);
}

void *AG::Graph::description_stack(AG::Graph *this, NSDictionary *a2)
{
  void *v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t *v9;
  const __CFString *v10;
  const __CFString *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unsigned int *v17;
  AG::swift::metadata **v18;
  uint64_t v19;
  unint64_t v20;
  unsigned int *v21;
  unsigned int *v22;
  uint64_t v23;
  char v24;
  const __CFString *v25;
  const __CFString *v26;
  uint64_t *v27;
  AG::swift::metadata **v28;
  uint64_t v29;
  AG::swift::metadata *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  int v40;

  v3 = (void *)objc_msgSend(MEMORY[0x1E0CB37A0], "string");
  v4 = -[NSDictionary objectForKeyedSubscript:](a2, "objectForKeyedSubscript:", CFSTR("max-frames"));
  if (v4)
    v5 = objc_msgSend(v4, "unsignedIntValue");
  else
    v5 = -1;
  v35 = v5;
  v6 = AG::Graph::_current_update_key;
  v7 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v6);
  if (v7)
  {
    v8 = 0;
    v9 = &AG::data::_shared_table_bytes;
    v10 = CFSTR("    %u");
    v11 = CFSTR("\n");
    do
    {
      v12 = v7 & 0xFFFFFFFFFFFFFFFELL;
      v36 = v12 + 32;
      v37 = v12;
      v13 = *(_QWORD *)(v12 + 104);
      while (v13)
      {
        v14 = v13 - 1;
        v15 = *(_QWORD *)(v37 + 96);
        if (!v15)
          v15 = v36;
        v38 = v14;
        v16 = *(unsigned int *)(v15 + 8 * v14);
        v17 = (unsigned int *)(*v9 + v16);
        v18 = *(AG::swift::metadata ***)(*((_QWORD *)this + 16) + (((unint64_t)*v17 >> 5) & 0x7FFFFF8));
        v19 = AG::swift::metadata::name(*v18, 0);
        objc_msgSend(v3, "appendFormat:", CFSTR("  #%d: %u %s -> %s\n"), v8, v16, v19, AG::swift::metadata::name(v18[1], 0));
        if (v8 || v17[3] < 0x20)
          goto LABEL_14;
        objc_msgSend(v3, "appendString:", CFSTR("  -- inputs:\n"));
        v20 = v17[3];
        if (v20 >= 0x20)
        {
          v21 = (unsigned int *)(*v9 + v17[4]);
          v22 = (unsigned int *)((char *)v21 + 5 * (v20 >> 5));
          do
          {
            v23 = *v21;
            v24 = *((_BYTE *)v21 + 4);
            v40 = v23;
            if ((v23 & 3) != 0)
            {
              v31 = AG::AttributeID::resolve_slow((AG::AttributeID *)&v40, 8u);
              LODWORD(v23) = v31;
              v33 = v32;
              objc_msgSend(v3, "appendFormat:", v10, v31);
              if (v33)
                objc_msgSend(v3, "appendFormat:", CFSTR("[@%d]"), (v33 - 1));
            }
            else
            {
              objc_msgSend(v3, "appendFormat:", v10, v23);
            }
            if ((v23 & 3) != 0)
            {
              if ((v24 & 8) == 0)
                goto LABEL_21;
            }
            else
            {
              v25 = v11;
              v26 = v10;
              v27 = v9;
              v28 = *(AG::swift::metadata ***)(*((_QWORD *)this + 16)
                                             + (((unint64_t)*(unsigned int *)(*v9 + v23) >> 5) & 0x7FFFFF8));
              v29 = AG::swift::metadata::name(*v28, 0);
              v30 = v28[1];
              v9 = v27;
              v10 = v26;
              v11 = v25;
              objc_msgSend(v3, "appendFormat:", CFSTR(" %s -> %s"), v29, AG::swift::metadata::name(v30, 0));
              if ((v24 & 8) == 0)
              {
LABEL_21:
                if ((v24 & 4) != 0)
                  goto LABEL_28;
                goto LABEL_22;
              }
            }
            objc_msgSend(v3, "appendString:", CFSTR(", changed"));
            if ((v24 & 4) != 0)
            {
LABEL_28:
              objc_msgSend(v3, "appendString:", CFSTR(", always-enabled"));
              if ((v24 & 1) == 0)
                goto LABEL_24;
LABEL_23:
              objc_msgSend(v3, "appendString:", CFSTR(", unprefetched"));
              goto LABEL_24;
            }
LABEL_22:
            if ((v24 & 1) != 0)
              goto LABEL_23;
LABEL_24:
            objc_msgSend(v3, "appendString:", v11);
            v21 = (unsigned int *)((char *)v21 + 5);
          }
          while (v21 != v22);
        }
        objc_msgSend(v3, "appendString:", CFSTR("  --\n"));
LABEL_14:
        ++v8;
        v13 = v38;
        if (v8 >= v35)
          return v3;
      }
      v7 = *(_QWORD *)(v37 + 16);
    }
    while (v7);
  }
  return v3;
}

void *AG::Graph::description_stack_nodes(AG::Graph *this, NSDictionary *a2)
{
  void *v3;
  id v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;

  v3 = (void *)objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  v4 = -[NSDictionary objectForKeyedSubscript:](a2, "objectForKeyedSubscript:", CFSTR("max-frames"));
  if (v4)
    v5 = objc_msgSend(v4, "unsignedIntValue");
  else
    v5 = -1;
  v6 = AG::Graph::_current_update_key;
  v7 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v6);
  if (v7)
  {
    v8 = 0;
    do
    {
      v9 = v7 & 0xFFFFFFFFFFFFFFFELL;
      v10 = (v7 & 0xFFFFFFFFFFFFFFFELL) + 32;
      v11 = *(_QWORD *)((v7 & 0xFFFFFFFFFFFFFFFELL) + 104);
      v12 = 8 * v11 - 8;
      while (v11)
      {
        --v11;
        v13 = *(_QWORD *)(v9 + 96);
        if (!v13)
          v13 = v10;
        objc_msgSend(v3, "addObject:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInt:", *(unsigned int *)(v13 + v12)));
        ++v8;
        v12 -= 8;
        if (v8 >= v5)
          return v3;
      }
      v7 = *(_QWORD *)(v9 + 16);
    }
    while (v7);
  }
  return v3;
}

void *AG::Graph::description_stack_frame(AG::Graph *this, NSDictionary *a2)
{
  id v4;
  uint64_t v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  unsigned int *v14;
  unint64_t v15;
  uint64_t v16;
  void *v17;
  unint64_t v18;
  unsigned int *v20;
  unsigned int *v21;
  uint64_t v22;
  char v23;
  unint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  int v28;

  v4 = -[NSDictionary objectForKeyedSubscript:](a2, "objectForKeyedSubscript:", CFSTR("frame_index"));
  if (v4)
    v5 = objc_msgSend(v4, "unsignedIntValue");
  else
    v5 = -1;
  v6 = -[NSDictionary objectForKeyedSubscript:](a2, "objectForKeyedSubscript:", CFSTR("frame_node"));
  if (v6)
    LODWORD(v6) = objc_msgSend(v6, "unsignedIntValue");
  v7 = AG::Graph::_current_update_key;
  v8 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v7);
  if (!v8)
    return (void *)MEMORY[0x1E0C9AA70];
  v9 = (void *)MEMORY[0x1E0C9AA70];
  while (1)
  {
    v10 = (_QWORD *)(v8 & 0xFFFFFFFFFFFFFFFELL);
    v11 = v10[13];
    if (v11)
      break;
LABEL_15:
    v8 = v10[2];
    if (!v8)
      return v9;
  }
  v12 = 0;
  v13 = v10 + 4;
  if (v10[12])
    v13 = (_QWORD *)v10[12];
  v14 = (unsigned int *)&v13[v11 - 1];
  while (v5 != v12)
  {
    if (*v14 == (_DWORD)v6)
    {
      v5 = v12;
      break;
    }
    ++v12;
    v14 -= 2;
    if (v11 == v12)
      goto LABEL_15;
  }
  v15 = 0x1E0C99000uLL;
  v9 = (void *)objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
  objc_msgSend(v9, "setObject:forKeyedSubscript:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLong:", v5), CFSTR("index"));
  objc_msgSend(v9, "setObject:forKeyedSubscript:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInt:", *v14), CFSTR("node-id"));
  v16 = AG::data::_shared_table_bytes + *v14;
  AGSetTypeForKey(v9, CFSTR("self-type"));
  AGSetTypeForKey(v9, CFSTR("value-type"));
  if (*(_DWORD *)(v16 + 12) >= 0x20u)
  {
    v17 = (void *)objc_msgSend(MEMORY[0x1E0C99DE8], "array", this);
    v18 = *(unsigned int *)(v16 + 12);
    if (v18 < 0x20)
    {
LABEL_21:
      objc_msgSend(v9, "setObject:forKeyedSubscript:", v17, CFSTR("inputs"));
      return v9;
    }
    v20 = (unsigned int *)(AG::data::_shared_table_bytes + *(unsigned int *)(v16 + 16));
    v21 = (unsigned int *)((char *)v20 + 5 * (v18 >> 5));
    while (1)
    {
      v22 = *v20;
      v23 = *((_BYTE *)v20 + 4);
      v24 = v15;
      v25 = (void *)objc_msgSend(*(id *)(v15 + 3592), "dictionary");
      objc_msgSend(v25, "setObject:forKeyedSubscript:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInt:", v22), CFSTR("id"));
      v28 = v22;
      if ((v22 & 3) != 0)
      {
        v22 = AG::AttributeID::resolve_slow((AG::AttributeID *)&v28, 8u);
        v26 = v27;
      }
      else
      {
        v26 = 0;
      }
      objc_msgSend(v25, "setObject:forKeyedSubscript:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInt:", v22), CFSTR("node"));
      if (v26)
        objc_msgSend(v25, "setObject:forKeyedSubscript:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLong:", v26 - 1), CFSTR("offset"));
      if ((v22 & 3) == 0)
      {
        AGSetTypeForKey(v25, CFSTR("self-type"));
        AGSetTypeForKey(v25, CFSTR("value-type"));
      }
      v15 = v24;
      if ((v23 & 8) != 0)
      {
        objc_msgSend(v25, "setObject:forKeyedSubscript:", MEMORY[0x1E0C9AAB0], CFSTR("changed"));
        if ((v23 & 4) != 0)
        {
LABEL_37:
          objc_msgSend(v25, "setObject:forKeyedSubscript:", MEMORY[0x1E0C9AAB0], CFSTR("always-enabled"));
          if ((v23 & 1) == 0)
            goto LABEL_34;
LABEL_33:
          objc_msgSend(v25, "setObject:forKeyedSubscript:", MEMORY[0x1E0C9AAA0], CFSTR("prefetched"));
          goto LABEL_34;
        }
      }
      else if ((v23 & 4) != 0)
      {
        goto LABEL_37;
      }
      if ((v23 & 1) != 0)
        goto LABEL_33;
LABEL_34:
      objc_msgSend(v17, "addObject:", v25);
      v20 = (unsigned int *)((char *)v20 + 5);
      if (v20 == v21)
        goto LABEL_21;
    }
  }
  return v9;
}

void AG::Graph::print(AG::Graph *this)
{
  void *v2;
  void *v3;
  const char *v4;

  v2 = (void *)MEMORY[0x1AF4318C8]();
  v3 = AG::Graph::description_graph_dot(this, 0);
  if (v3)
  {
    v4 = (const char *)objc_msgSend(v3, "UTF8String");
    fputs(v4, (FILE *)*MEMORY[0x1E0C80C10]);
  }
  objc_autoreleasePoolPop(v2);
}

void AG::Graph::print_cycle(uint64_t a1, const char *a2)
{
  int v4;
  unsigned __int8 v5;
  FILE **v6;
  void *v7;
  unsigned int *v8;
  uint64_t v9;
  void *v10;
  NSDictionary *v11;
  NSDictionary *v12;
  id v13;
  unsigned __int8 v14;
  unsigned int v15;
  uint64_t v16;
  AG::_anonymous_namespace_ *v17;
  AG::_anonymous_namespace_ *v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD v22[2];
  _QWORD v23[3];

  v23[2] = *MEMORY[0x1E0C80C00];
  v4 = *(_DWORD *)(a1 + 232);
  if (v4)
  {
    v15 = v4 - 1;
    do
    {
      v16 = v15;
      AG::Trace::log_message(*(AG::Trace **)(*(_QWORD *)(a1 + 224) + 8 * v15--), "cycle detected through attribute: %u", (_DWORD)a2);
    }
    while (v16);
  }
  if ((v5 & 1) == 0)
  {
    if ((_DWORD)v17)
    {
    }
  }
  if (AG::Graph::print_cycle(AG::data::ptr<AG::Node>)const::verbosity >= 1)
  {
    v6 = (FILE **)MEMORY[0x1E0C80C10];
    fprintf((FILE *)*MEMORY[0x1E0C80C10], "=== AttributeGraph: cycle detected through attribute %u ===\n", (_DWORD)a2);
    if (AG::Graph::print_cycle(AG::data::ptr<AG::Node>)const::verbosity >= 2)
    {
      if (AG::Graph::print_cycle(AG::data::ptr<AG::Node>)const::verbosity != 2)
      {
        v19 = 0;
        v20 = 0;
        v21 = 0;
        AG::Graph::collect_stack(a1, &v19);
        v7 = (void *)objc_msgSend(MEMORY[0x1E0CB3788], "indexSet");
        if (v20)
        {
          v8 = (unsigned int *)v19;
          v9 = 4 * v20;
          do
          {
            objc_msgSend(v7, "addIndex:", *v8++);
            v9 -= 4;
          }
          while (v9);
        }
        v10 = (void *)MEMORY[0x1AF4318C8]();
        v22[0] = CFSTR("format");
        v22[1] = CFSTR("attribute-ids");
        v23[0] = CFSTR("graph/dot");
        v23[1] = v7;
        v11 = (NSDictionary *)objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v23, v22, 2);
        v13 = AG::Graph::description((AG::Graph *)a1, v11, v12);
        if (v13)
          fputs((const char *)objc_msgSend(v13, "UTF8String"), *v6);
        objc_autoreleasePoolPop(v10);
        fwrite("=== Evaluation stack ===\n", 0x19uLL, 1uLL, *v6);
        if (v19)
          free(v19);
      }
      AG::Graph::print_stack((AG::Graph *)a1);
      fwrite("===\n", 4uLL, 1uLL, *v6);
      if (AG::Graph::print_cycle(AG::data::ptr<AG::Node>)const::verbosity >= 4
        && os_variant_has_internal_diagnostics())
      {
        AGGraphArchiveJSON((AG::Graph *)"cycle.ag-json");
      }
    }
  }
  if ((v14 & 1) == 0)
  {
    if ((_DWORD)v18)
    {
    }
  }
  if (AG::Graph::print_cycle(AG::data::ptr<AG::Node>)const::traps)
    AG::precondition_failure((AG *)"cyclic graph: %u", a2, a2);
}

void sub_1AB954238(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11)
{
  if (a11)
    free(a11);
  _Unwind_Resume(exception_object);
}

uint64_t AG::Trace::log_message(AG::Trace *this, const char *a2, ...)
{
  va_list va;

  va_start(va, a2);
  return (*(uint64_t (**)(AG::Trace *, const char *, uint64_t *))(*(_QWORD *)this + 40))(this, a2, (uint64_t *)va);
}

uint64_t AG::`anonymous namespace'::cycle_verbosity(AG::_anonymous_namespace_ *this)
{
  char *v1;

  v1 = getenv("AG_PRINT_CYCLES");
  if (v1)
    return atoi(v1);
  else
    return 1;
}

char *AG::`anonymous namespace'::trap_cycles(AG::_anonymous_namespace_ *this)
{
  char *result;

  result = getenv("AG_TRAP_CYCLES");
  if (result)
    return (char *)(atoi(result) != 0);
  return result;
}

uint64_t AG::Graph::description(uint64_t a1, uint64_t a2)
{
  void *v4;
  unsigned int *v5;
  uint64_t v6;
  uint64_t (*v7)(uint64_t, _QWORD *);
  _QWORD *v8;
  uint64_t v9;
  uint64_t (*v10)(uint64_t, _QWORD *);
  _QWORD *v11;
  uint64_t v12;

  v4 = (void *)objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  v5 = (unsigned int *)(AG::data::_shared_table_bytes + a2);
  v6 = *(_QWORD *)(*(_QWORD *)(a1 + 128) + (((unint64_t)*v5 >> 5) & 0x7FFFFF8));
  objc_msgSend(v4, "addObject:", objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("identifier = %u"), a2));
  objc_msgSend(v4, "addObject:", objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("type = %u"), *v5 >> 8));
  objc_msgSend(v4, "addObject:", objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("self_size = %d"), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v6 - 8) + 64)));
  objc_msgSend(v4, "addObject:", objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("value_size = %d"), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v6 + 8) - 8) + 64)));
  if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)v6 - 8) + 82) & 1) == 0)
    objc_msgSend(v4, "addObject:", CFSTR("pod_self = true"));
  if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v6 + 8) - 8) + 82) & 1) == 0)
    objc_msgSend(v4, "addObject:", CFSTR("pod_value = true"));
  if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)v6 - 8) + 82) & 0x10) == 0)
    objc_msgSend(v4, "addObject:", CFSTR("bitwise_takable_self = true"));
  if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v6 + 8) - 8) + 82) & 0x10) == 0)
    objc_msgSend(v4, "addObject:", CFSTR("bitwise_takable_value = true"));
  objc_msgSend(v4, "addObject:", objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("input_count = %d"), v5[3] >> 5));
  objc_msgSend(v4, "addObject:", objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("output_count = %d"), v5[5] >> 5));
  objc_msgSend(v4, "addObject:", objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("dirty = %d"), *v5 & 1));
  objc_msgSend(v4, "addObject:", objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("updating = %d"), (*v5 & 0xC0) != 0));
  v7 = *(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)(v6 + 32) + 24);
  if (v7 && (*(_BYTE *)v5 & 0x20) != 0)
  {
    v8 = (_QWORD *)((char *)v5 + *(unsigned int *)(v6 + 44));
    if ((*((_BYTE *)v5 + 7) & 1) != 0)
      v8 = (_QWORD *)*v8;
    v9 = v7(v6, v8);
    if (v9)
      objc_msgSend(v4, "addObject:", objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("self = %@"), v9));
  }
  if ((*(_BYTE *)v5 & 0x10) != 0)
  {
    v10 = *(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)(v6 + 32) + 32);
    if (v10)
    {
      v11 = (_QWORD *)(AG::data::_shared_table_bytes + v5[2]);
      if ((*((_BYTE *)v5 + 7) & 2) != 0)
        v11 = (_QWORD *)*v11;
      v12 = v10(v6, v11);
      if (v12)
        objc_msgSend(v4, "addObject:", objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("value = %@"), v12));
    }
  }
  return objc_msgSend(v4, "componentsJoinedByString:", CFSTR(", "));
}

void AG::Graph::print_attribute(uint64_t a1, unsigned int a2)
{
  void *v4;
  void *v5;

  v4 = (void *)MEMORY[0x1AF4318C8]();
  v5 = (void *)AG::Graph::description(a1, a2);
  if (v5)
    fprintf((FILE *)*MEMORY[0x1E0C80C10], "%s\n", (const char *)objc_msgSend(v5, "UTF8String"));
  objc_autoreleasePoolPop(v4);
}

void AG::Graph::write_to_file(AG::Graph *this, const AG::Graph *a2, const char *a3)
{
  char v3;
  void *v6;
  NSDictionary *v7;
  NSDictionary *v8;
  id v9;
  const char *v10;
  void *v11;
  NSString *v12;
  gzFile v13;
  gzFile_s *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  FILE *v19;
  FILE *v20;
  id v21;
  _QWORD v22[3];
  _QWORD v23[4];

  v3 = (char)a3;
  v23[3] = *MEMORY[0x1E0C80C00];
  v6 = (void *)MEMORY[0x1AF4318C8]();
  v23[0] = CFSTR("graph/dict");
  v22[0] = CFSTR("format");
  v22[1] = CFSTR("include-values");
  v23[1] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", (v3 & 1) == 0);
  v22[2] = CFSTR("all_graphs");
  v23[2] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", this == 0);
  v7 = (NSDictionary *)objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v23, v22, 3);
  v9 = AG::Graph::description(this, v7, v8);
  if (v9)
  {
    if (a2)
      v10 = (const char *)a2;
    else
      v10 = "graph.ag-gzon";
    v11 = (void *)objc_msgSend(MEMORY[0x1E0CB36D8], "dataWithJSONObject:options:error:", v9, 0, 0);
    v12 = (NSString *)objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v10);
    if (*v10 != 47)
      v12 = -[NSString stringByAppendingPathComponent:](NSTemporaryDirectory(), "stringByAppendingPathComponent:", v12);
    v21 = 0;
    if (-[NSString isEqualToString:](-[NSString pathExtension](v12, "pathExtension"), "isEqualToString:", CFSTR("ag-gzon")))
    {
      v13 = gzopen(-[NSString fileSystemRepresentation](v12, "fileSystemRepresentation"), "wb");
      if (v13)
      {
        v14 = v13;
        v15 = (char *)objc_msgSend(v11, "bytes");
        v16 = objc_msgSend(v11, "length");
        if (v16)
        {
          v17 = v16;
          while (1)
          {
            v18 = gzwrite(v14, v15, v17);
            if (v18 <= 0)
              break;
            v15 += v18;
            v17 -= v18;
            if (!v17)
              goto LABEL_13;
          }
          gzclose(v14);
          goto LABEL_17;
        }
LABEL_13:
        gzclose(v14);
      }
    }
    else if (!objc_msgSend(v11, "writeToFile:options:error:", v12, 0, &v21))
    {
LABEL_17:
      v20 = (FILE *)*MEMORY[0x1E0C80C10];
      -[NSString UTF8String](v12, "UTF8String");
      objc_msgSend((id)objc_msgSend(v21, "description"), "UTF8String");
      fprintf(v20, "Unable to write to \"%s\": %s\n");
      goto LABEL_18;
    }
    v19 = (FILE *)*MEMORY[0x1E0C80C10];
    -[NSString UTF8String](v12, "UTF8String");
    fprintf(v19, "Wrote graph data to \"%s\".\n");
  }
LABEL_18:
  objc_autoreleasePoolPop(v6);
}

uint64_t AG::Graph::print_data(AG::Graph *this)
{
  AG::data::zone *v2;
  uint64_t result;
  uint64_t v4;
  const void ****v5;
  uint64_t v6;
  const void ***v7;

  AG::data::table::print((os_unfair_lock_s *)&AG::data::_shared_table_bytes);
  result = AG::data::zone::print_header(v2);
  v4 = *((unsigned int *)this + 88);
  if ((_DWORD)v4)
  {
    v5 = (const void ****)*((_QWORD *)this + 43);
    v6 = 8 * v4;
    do
    {
      v7 = *v5++;
      result = AG::data::zone::print(v7);
      v6 -= 8;
    }
    while (v6);
  }
  return result;
}

_QWORD *std::__hash_table<std::__hash_value_type<unsigned int,unsigned long>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned long>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned long>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned long>>>::__emplace_unique_key_args<unsigned int,unsigned int &,unsigned long &>(uint64_t a1, unsigned int *a2, _DWORD *a3, _QWORD *a4)
{
  unint64_t v4;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  void **v11;
  _QWORD *v12;
  unint64_t v13;
  float v14;
  float v15;
  _BOOL8 v16;
  unint64_t v17;
  unint64_t v18;
  size_t v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t v22;

  v8 = *a2;
  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      v4 = *a2;
      if (v9 <= v8)
        v4 = v8 % v9;
    }
    else
    {
      v4 = ((_DWORD)v9 - 1) & v8;
    }
    v11 = *(void ***)(*(_QWORD *)a1 + 8 * v4);
    if (v11)
    {
      v12 = *v11;
      if (*v11)
      {
        do
        {
          v13 = v12[1];
          if (v13 == v8)
          {
            if (*((_DWORD *)v12 + 4) == (_DWORD)v8)
              return v12;
          }
          else
          {
            if (v10.u32[0] > 1uLL)
            {
              if (v13 >= v9)
                v13 %= v9;
            }
            else
            {
              v13 &= v9 - 1;
            }
            if (v13 != v4)
              break;
          }
          v12 = (_QWORD *)*v12;
        }
        while (v12);
      }
    }
  }
  v12 = operator new(0x20uLL);
  *v12 = 0;
  v12[1] = v8;
  *((_DWORD *)v12 + 4) = *a3;
  v12[3] = *a4;
  v14 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v15 = *(float *)(a1 + 32);
  if (!v9 || (float)(v15 * (float)v9) < v14)
  {
    v16 = 1;
    if (v9 >= 3)
      v16 = (v9 & (v9 - 1)) != 0;
    v17 = v16 | (2 * v9);
    v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18)
      v19 = v18;
    else
      v19 = v17;
    std::__hash_table<std::__hash_value_type<unsigned int,AG::Graph::ProfileData::Item>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,AG::Graph::ProfileData::Item>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,AG::Graph::ProfileData::Item>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,AG::Graph::ProfileData::Item>>>::__rehash<true>(a1, v19);
    v9 = *(_QWORD *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v9 <= v8)
        v4 = v8 % v9;
      else
        v4 = v8;
    }
    else
    {
      v4 = ((_DWORD)v9 - 1) & v8;
    }
  }
  v20 = *(_QWORD *)a1;
  v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v21)
  {
    *v12 = *v21;
LABEL_38:
    *v21 = v12;
    goto LABEL_39;
  }
  *v12 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v12;
  *(_QWORD *)(v20 + 8 * v4) = a1 + 16;
  if (*v12)
  {
    v22 = *(_QWORD *)(*v12 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v22 >= v9)
        v22 %= v9;
    }
    else
    {
      v22 &= v9 - 1;
    }
    v21 = (_QWORD *)(*(_QWORD *)a1 + 8 * v22);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return v12;
}

void sub_1AB954B1C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t `anonymous namespace'::escaped_string(_anonymous_namespace_ *this, NSString *a2)
{
  _anonymous_namespace_ *v3;

  v3 = this;
  if (-[_anonymous_namespace_ length](this, "length") > (unint64_t)a2)
    v3 = (_anonymous_namespace_ *)objc_msgSend((id)-[_anonymous_namespace_ substringToIndex:](v3, "substringToIndex:", a2), "stringByAppendingString:", CFSTR("…"));
  return -[_anonymous_namespace_ stringByReplacingOccurrencesOfString:withString:](v3, "stringByReplacingOccurrencesOfString:withString:", CFSTR("\""), CFSTR("\\\""));
}

_QWORD *std::__hash_table<std::__hash_value_type<unsigned long,unsigned long>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,unsigned long>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(uint64_t a1, unint64_t *a2, uint64_t a3, _QWORD **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  _QWORD **v10;
  _QWORD *i;
  unint64_t v12;
  float v13;
  float v14;
  _BOOL8 v15;
  unint64_t v16;
  unint64_t v17;
  size_t v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t v21;

  v7 = *a2;
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v4 = *a2;
      if (v7 >= v8)
        v4 = v7 % v8;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
    v10 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v4);
    if (v10)
    {
      for (i = *v10; i; i = (_QWORD *)*i)
      {
        v12 = i[1];
        if (v12 == v7)
        {
          if (i[2] == v7)
            return i;
        }
        else
        {
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= v8)
              v12 %= v8;
          }
          else
          {
            v12 &= v8 - 1;
          }
          if (v12 != v4)
            break;
        }
      }
    }
  }
  i = operator new(0x20uLL);
  *i = 0;
  i[1] = v7;
  i[2] = **a4;
  i[3] = 0;
  v13 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v14 = *(float *)(a1 + 32);
  if (!v8 || (float)(v14 * (float)v8) < v13)
  {
    v15 = 1;
    if (v8 >= 3)
      v15 = (v8 & (v8 - 1)) != 0;
    v16 = v15 | (2 * v8);
    v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17)
      v18 = v17;
    else
      v18 = v16;
    std::__hash_table<std::__hash_value_type<unsigned int,AG::Graph::ProfileData::Item>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,AG::Graph::ProfileData::Item>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,AG::Graph::ProfileData::Item>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,AG::Graph::ProfileData::Item>>>::__rehash<true>(a1, v18);
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8)
        v4 = v7 % v8;
      else
        v4 = v7;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
  }
  v19 = *(_QWORD *)a1;
  v20 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v20)
  {
    *i = *v20;
LABEL_38:
    *v20 = i;
    goto LABEL_39;
  }
  *i = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = i;
  *(_QWORD *)(v19 + 8 * v4) = a1 + 16;
  if (*i)
  {
    v21 = *(_QWORD *)(*i + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v21 >= v8)
        v21 %= v8;
    }
    else
    {
      v21 &= v8 - 1;
    }
    v20 = (_QWORD *)(*(_QWORD *)a1 + 8 * v21);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return i;
}

void sub_1AB954D94(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<std::__hash_value_type<AG::data::ptr<AG::Node>,unsigned long>,std::__unordered_map_hasher<AG::data::ptr<AG::Node>,std::__hash_value_type<AG::data::ptr<AG::Node>,unsigned long>,std::hash<AG::data::ptr<AG::Node>>,std::equal_to<AG::data::ptr<AG::Node>>,true>,std::__unordered_map_equal<AG::data::ptr<AG::Node>,std::__hash_value_type<AG::data::ptr<AG::Node>,unsigned long>,std::equal_to<AG::data::ptr<AG::Node>>,std::hash<AG::data::ptr<AG::Node>>,true>,std::allocator<std::__hash_value_type<AG::data::ptr<AG::Node>,unsigned long>>>::__emplace_unique_key_args<AG::data::ptr<AG::Node>,std::piecewise_construct_t const&,std::tuple<AG::data::ptr<AG::Node> const&>,std::tuple<>>(uint64_t a1, unsigned int *a2, uint64_t a3, _DWORD **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  void **v10;
  _QWORD *v11;
  unint64_t v12;
  float v13;
  float v14;
  _BOOL8 v15;
  unint64_t v16;
  unint64_t v17;
  size_t v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t v21;

  v7 = *a2;
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v4 = *a2;
      if (v8 <= v7)
        v4 = v7 % v8;
    }
    else
    {
      v4 = ((_DWORD)v8 - 1) & v7;
    }
    v10 = *(void ***)(*(_QWORD *)a1 + 8 * v4);
    if (v10)
    {
      v11 = *v10;
      if (*v10)
      {
        do
        {
          v12 = v11[1];
          if (v12 == v7)
          {
            if (*((_DWORD *)v11 + 4) == (_DWORD)v7)
              return v11;
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8)
                v12 %= v8;
            }
            else
            {
              v12 &= v8 - 1;
            }
            if (v12 != v4)
              break;
          }
          v11 = (_QWORD *)*v11;
        }
        while (v11);
      }
    }
  }
  v11 = operator new(0x20uLL);
  *v11 = 0;
  v11[1] = v7;
  *((_DWORD *)v11 + 4) = **a4;
  v11[3] = 0;
  v13 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v14 = *(float *)(a1 + 32);
  if (!v8 || (float)(v14 * (float)v8) < v13)
  {
    v15 = 1;
    if (v8 >= 3)
      v15 = (v8 & (v8 - 1)) != 0;
    v16 = v15 | (2 * v8);
    v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17)
      v18 = v17;
    else
      v18 = v16;
    std::__hash_table<std::__hash_value_type<unsigned int,AG::Graph::ProfileData::Item>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,AG::Graph::ProfileData::Item>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,AG::Graph::ProfileData::Item>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,AG::Graph::ProfileData::Item>>>::__rehash<true>(a1, v18);
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v8 <= v7)
        v4 = v7 % v8;
      else
        v4 = v7;
    }
    else
    {
      v4 = ((_DWORD)v8 - 1) & v7;
    }
  }
  v19 = *(_QWORD *)a1;
  v20 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v20)
  {
    *v11 = *v20;
LABEL_38:
    *v20 = v11;
    goto LABEL_39;
  }
  *v11 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v11;
  *(_QWORD *)(v19 + 8 * v4) = a1 + 16;
  if (*v11)
  {
    v21 = *(_QWORD *)(*v11 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v21 >= v8)
        v21 %= v8;
    }
    else
    {
      v21 &= v8 - 1;
    }
    v20 = (_QWORD *)(*(_QWORD *)a1 + 8 * v21);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return v11;
}

void sub_1AB954FB8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<std::__hash_value_type<AG::data::ptr<AG::Node>,unsigned long>,std::__unordered_map_hasher<AG::data::ptr<AG::Node>,std::__hash_value_type<AG::data::ptr<AG::Node>,unsigned long>,std::hash<AG::data::ptr<AG::Node>>,std::equal_to<AG::data::ptr<AG::Node>>,true>,std::__unordered_map_equal<AG::data::ptr<AG::Node>,std::__hash_value_type<AG::data::ptr<AG::Node>,unsigned long>,std::equal_to<AG::data::ptr<AG::Node>>,std::hash<AG::data::ptr<AG::Node>>,true>,std::allocator<std::__hash_value_type<AG::data::ptr<AG::Node>,unsigned long>>>::__emplace_unique_key_args<AG::data::ptr<AG::Node>,std::piecewise_construct_t const&,std::tuple<AG::data::ptr<AG::Node>&&>,std::tuple<>>(uint64_t a1, unsigned int *a2, uint64_t a3, _DWORD **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  void **v10;
  _QWORD *v11;
  unint64_t v12;
  float v13;
  float v14;
  _BOOL8 v15;
  unint64_t v16;
  unint64_t v17;
  size_t v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t v21;

  v7 = *a2;
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v4 = *a2;
      if (v8 <= v7)
        v4 = v7 % v8;
    }
    else
    {
      v4 = ((_DWORD)v8 - 1) & v7;
    }
    v10 = *(void ***)(*(_QWORD *)a1 + 8 * v4);
    if (v10)
    {
      v11 = *v10;
      if (*v10)
      {
        do
        {
          v12 = v11[1];
          if (v12 == v7)
          {
            if (*((_DWORD *)v11 + 4) == (_DWORD)v7)
              return v11;
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8)
                v12 %= v8;
            }
            else
            {
              v12 &= v8 - 1;
            }
            if (v12 != v4)
              break;
          }
          v11 = (_QWORD *)*v11;
        }
        while (v11);
      }
    }
  }
  v11 = operator new(0x20uLL);
  *v11 = 0;
  v11[1] = v7;
  *((_DWORD *)v11 + 4) = **a4;
  v11[3] = 0;
  v13 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v14 = *(float *)(a1 + 32);
  if (!v8 || (float)(v14 * (float)v8) < v13)
  {
    v15 = 1;
    if (v8 >= 3)
      v15 = (v8 & (v8 - 1)) != 0;
    v16 = v15 | (2 * v8);
    v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17)
      v18 = v17;
    else
      v18 = v16;
    std::__hash_table<std::__hash_value_type<unsigned int,AG::Graph::ProfileData::Item>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,AG::Graph::ProfileData::Item>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,AG::Graph::ProfileData::Item>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,AG::Graph::ProfileData::Item>>>::__rehash<true>(a1, v18);
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v8 <= v7)
        v4 = v7 % v8;
      else
        v4 = v7;
    }
    else
    {
      v4 = ((_DWORD)v8 - 1) & v7;
    }
  }
  v19 = *(_QWORD *)a1;
  v20 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v20)
  {
    *v11 = *v20;
LABEL_38:
    *v20 = v11;
    goto LABEL_39;
  }
  *v11 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v11;
  *(_QWORD *)(v19 + 8 * v4) = a1 + 16;
  if (*v11)
  {
    v21 = *(_QWORD *)(*v11 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v21 >= v8)
        v21 %= v8;
    }
    else
    {
      v21 &= v8 - 1;
    }
    v20 = (_QWORD *)(*(_QWORD *)a1 + 8 * v21);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return v11;
}

void sub_1AB9551DC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<std::__hash_value_type<AG::Subgraph const*,unsigned long>,std::__unordered_map_hasher<AG::Subgraph const*,std::__hash_value_type<AG::Subgraph const*,unsigned long>,std::hash<AG::Subgraph const*>,std::equal_to<AG::Subgraph const*>,true>,std::__unordered_map_equal<AG::Subgraph const*,std::__hash_value_type<AG::Subgraph const*,unsigned long>,std::equal_to<AG::Subgraph const*>,std::hash<AG::Subgraph const*>,true>,std::allocator<std::__hash_value_type<AG::Subgraph const*,unsigned long>>>::__emplace_unique_key_args<AG::Subgraph const*,std::piecewise_construct_t const&,std::tuple<AG::Subgraph const* const&>,std::tuple<>>(uint64_t a1, _QWORD *a2, uint64_t a3, _QWORD **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  _QWORD **v12;
  _QWORD *i;
  unint64_t v14;
  float v15;
  float v16;
  _BOOL8 v17;
  unint64_t v18;
  unint64_t v19;
  size_t v20;
  uint64_t v21;
  _QWORD *v22;
  unint64_t v23;

  v7 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ HIDWORD(*a2));
  v8 = 0x9DDFEA08EB382D69 * (HIDWORD(*a2) ^ (v7 >> 47) ^ v7);
  v9 = 0x9DDFEA08EB382D69 * (v8 ^ (v8 >> 47));
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    if (v11.u32[0] > 1uLL)
    {
      v4 = 0x9DDFEA08EB382D69 * (v8 ^ (v8 >> 47));
      if (v9 >= v10)
        v4 = v9 % v10;
    }
    else
    {
      v4 = v9 & (v10 - 1);
    }
    v12 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v4);
    if (v12)
    {
      for (i = *v12; i; i = (_QWORD *)*i)
      {
        v14 = i[1];
        if (v14 == v9)
        {
          if (i[2] == *a2)
            return i;
        }
        else
        {
          if (v11.u32[0] > 1uLL)
          {
            if (v14 >= v10)
              v14 %= v10;
          }
          else
          {
            v14 &= v10 - 1;
          }
          if (v14 != v4)
            break;
        }
      }
    }
  }
  i = operator new(0x20uLL);
  *i = 0;
  i[1] = v9;
  i[2] = **a4;
  i[3] = 0;
  v15 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v16 = *(float *)(a1 + 32);
  if (!v10 || (float)(v16 * (float)v10) < v15)
  {
    v17 = 1;
    if (v10 >= 3)
      v17 = (v10 & (v10 - 1)) != 0;
    v18 = v17 | (2 * v10);
    v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19)
      v20 = v19;
    else
      v20 = v18;
    std::__hash_table<std::__hash_value_type<unsigned int,AG::Graph::ProfileData::Item>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,AG::Graph::ProfileData::Item>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,AG::Graph::ProfileData::Item>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,AG::Graph::ProfileData::Item>>>::__rehash<true>(a1, v20);
    v10 = *(_QWORD *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
        v4 = v9 % v10;
      else
        v4 = v9;
    }
    else
    {
      v4 = (v10 - 1) & v9;
    }
  }
  v21 = *(_QWORD *)a1;
  v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v22)
  {
    *i = *v22;
LABEL_38:
    *v22 = i;
    goto LABEL_39;
  }
  *i = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = i;
  *(_QWORD *)(v21 + 8 * v4) = a1 + 16;
  if (*i)
  {
    v23 = *(_QWORD *)(*i + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v23 >= v10)
        v23 %= v10;
    }
    else
    {
      v23 &= v10 - 1;
    }
    v22 = (_QWORD *)(*(_QWORD *)a1 + 8 * v23);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return i;
}

void sub_1AB955430(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<std::__hash_value_type<AG::data::ptr<AG::Graph::TreeElement>,unsigned long>,std::__unordered_map_hasher<AG::data::ptr<AG::Graph::TreeElement>,std::__hash_value_type<AG::data::ptr<AG::Graph::TreeElement>,unsigned long>,std::hash<AG::data::ptr<AG::Graph::TreeElement>>,std::equal_to<AG::data::ptr<AG::Graph::TreeElement>>,true>,std::__unordered_map_equal<AG::data::ptr<AG::Graph::TreeElement>,std::__hash_value_type<AG::data::ptr<AG::Graph::TreeElement>,unsigned long>,std::equal_to<AG::data::ptr<AG::Graph::TreeElement>>,std::hash<AG::data::ptr<AG::Graph::TreeElement>>,true>,std::allocator<std::__hash_value_type<AG::data::ptr<AG::Graph::TreeElement>,unsigned long>>>::__emplace_unique_key_args<AG::data::ptr<AG::Graph::TreeElement>,std::pair<AG::data::ptr<AG::Graph::TreeElement>,unsigned long>>(uint64_t a1, unsigned int *a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  void **v9;
  _QWORD *v10;
  unint64_t v11;
  float v12;
  float v13;
  _BOOL8 v14;
  unint64_t v15;
  unint64_t v16;
  size_t v17;
  uint64_t v18;
  _QWORD *v19;
  unint64_t v20;

  v6 = *a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = *a2;
      if (v7 <= v6)
        v3 = v6 % v7;
    }
    else
    {
      v3 = ((_DWORD)v7 - 1) & v6;
    }
    v9 = *(void ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      v10 = *v9;
      if (*v9)
      {
        do
        {
          v11 = v10[1];
          if (v11 == v6)
          {
            if (*((_DWORD *)v10 + 4) == (_DWORD)v6)
              return v10;
          }
          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v11 >= v7)
                v11 %= v7;
            }
            else
            {
              v11 &= v7 - 1;
            }
            if (v11 != v3)
              break;
          }
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
    }
  }
  v10 = operator new(0x20uLL);
  *v10 = 0;
  v10[1] = v6;
  *((_DWORD *)v10 + 4) = *(_DWORD *)a3;
  v10[3] = *(_QWORD *)(a3 + 8);
  v12 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v13 = *(float *)(a1 + 32);
  if (!v7 || (float)(v13 * (float)v7) < v12)
  {
    v14 = 1;
    if (v7 >= 3)
      v14 = (v7 & (v7 - 1)) != 0;
    v15 = v14 | (2 * v7);
    v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16)
      v17 = v16;
    else
      v17 = v15;
    std::__hash_table<std::__hash_value_type<unsigned int,AG::Graph::ProfileData::Item>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,AG::Graph::ProfileData::Item>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,AG::Graph::ProfileData::Item>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,AG::Graph::ProfileData::Item>>>::__rehash<true>(a1, v17);
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6)
        v3 = v6 % v7;
      else
        v3 = v6;
    }
    else
    {
      v3 = ((_DWORD)v7 - 1) & v6;
    }
  }
  v18 = *(_QWORD *)a1;
  v19 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v19)
  {
    *v10 = *v19;
LABEL_38:
    *v19 = v10;
    goto LABEL_39;
  }
  *v10 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v10;
  *(_QWORD *)(v18 + 8 * v3) = a1 + 16;
  if (*v10)
  {
    v20 = *(_QWORD *)(*v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v20 >= v7)
        v20 %= v7;
    }
    else
    {
      v20 &= v7 - 1;
    }
    v19 = (_QWORD *)(*(_QWORD *)a1 + 8 * v20);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return v10;
}

void sub_1AB955654(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

char *std::__hash_table<std::__hash_value_type<AG::Subgraph *,AG::Graph::TreeDataElement>,std::__unordered_map_hasher<AG::Subgraph *,std::__hash_value_type<AG::Subgraph *,AG::Graph::TreeDataElement>,std::hash<AG::Subgraph *>,std::equal_to<AG::Subgraph *>,true>,std::__unordered_map_equal<AG::Subgraph *,std::__hash_value_type<AG::Subgraph *,AG::Graph::TreeDataElement>,std::equal_to<AG::Subgraph *>,std::hash<AG::Subgraph *>,true>,std::allocator<std::__hash_value_type<AG::Subgraph *,AG::Graph::TreeDataElement>>>::__emplace_unique_key_args<AG::Subgraph *,std::piecewise_construct_t const&,std::tuple<AG::Subgraph * const&>,std::tuple<>>(uint64_t a1, _QWORD *a2, uint64_t a3, _QWORD **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  void **v12;
  char *v13;
  unint64_t v14;
  _QWORD *v15;
  float v16;
  float v17;
  _BOOL8 v18;
  unint64_t v19;
  unint64_t v20;
  size_t v21;
  uint64_t v22;
  _QWORD *v23;
  unint64_t v24;

  v7 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ HIDWORD(*a2));
  v8 = 0x9DDFEA08EB382D69 * (HIDWORD(*a2) ^ (v7 >> 47) ^ v7);
  v9 = 0x9DDFEA08EB382D69 * (v8 ^ (v8 >> 47));
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    if (v11.u32[0] > 1uLL)
    {
      v4 = 0x9DDFEA08EB382D69 * (v8 ^ (v8 >> 47));
      if (v9 >= v10)
        v4 = v9 % v10;
    }
    else
    {
      v4 = v9 & (v10 - 1);
    }
    v12 = *(void ***)(*(_QWORD *)a1 + 8 * v4);
    if (v12)
    {
      v13 = (char *)*v12;
      if (*v12)
      {
        do
        {
          v14 = *((_QWORD *)v13 + 1);
          if (v14 == v9)
          {
            if (*((_QWORD *)v13 + 2) == *a2)
              return v13;
          }
          else
          {
            if (v11.u32[0] > 1uLL)
            {
              if (v14 >= v10)
                v14 %= v10;
            }
            else
            {
              v14 &= v10 - 1;
            }
            if (v14 != v4)
              break;
          }
          v13 = *(char **)v13;
        }
        while (v13);
      }
    }
  }
  v15 = (_QWORD *)(a1 + 16);
  v13 = (char *)operator new(0x38uLL);
  *(_QWORD *)v13 = 0;
  *((_QWORD *)v13 + 1) = v9;
  *((_QWORD *)v13 + 2) = **a4;
  *(_OWORD *)(v13 + 24) = 0u;
  *(_OWORD *)(v13 + 40) = 0u;
  v16 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v17 = *(float *)(a1 + 32);
  if (!v10 || (float)(v17 * (float)v10) < v16)
  {
    v18 = 1;
    if (v10 >= 3)
      v18 = (v10 & (v10 - 1)) != 0;
    v19 = v18 | (2 * v10);
    v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20)
      v21 = v20;
    else
      v21 = v19;
    std::__hash_table<std::__hash_value_type<unsigned int,AG::Graph::ProfileData::Item>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,AG::Graph::ProfileData::Item>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,AG::Graph::ProfileData::Item>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,AG::Graph::ProfileData::Item>>>::__rehash<true>(a1, v21);
    v10 = *(_QWORD *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
        v4 = v9 % v10;
      else
        v4 = v9;
    }
    else
    {
      v4 = (v10 - 1) & v9;
    }
  }
  v22 = *(_QWORD *)a1;
  v23 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v23)
  {
    *(_QWORD *)v13 = *v23;
LABEL_38:
    *v23 = v13;
    goto LABEL_39;
  }
  *(_QWORD *)v13 = *v15;
  *v15 = v13;
  *(_QWORD *)(v22 + 8 * v4) = v15;
  if (*(_QWORD *)v13)
  {
    v24 = *(_QWORD *)(*(_QWORD *)v13 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v24 >= v10)
        v24 %= v10;
    }
    else
    {
      v24 &= v10 - 1;
    }
    v23 = (_QWORD *)(*(_QWORD *)a1 + 8 * v24);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return v13;
}

void sub_1AB9558D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  _QWORD *v10;
  uint64_t v11;

  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<AG::Subgraph *,AG::Graph::TreeDataElement>,void *>>>::operator()[abi:ne180100](v11, v10);
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<std::__hash_value_type<AG::data::ptr<AG::Graph::TreeElement>,unsigned long>,std::__unordered_map_hasher<AG::data::ptr<AG::Graph::TreeElement>,std::__hash_value_type<AG::data::ptr<AG::Graph::TreeElement>,unsigned long>,std::hash<AG::data::ptr<AG::Graph::TreeElement>>,std::equal_to<AG::data::ptr<AG::Graph::TreeElement>>,true>,std::__unordered_map_equal<AG::data::ptr<AG::Graph::TreeElement>,std::__hash_value_type<AG::data::ptr<AG::Graph::TreeElement>,unsigned long>,std::equal_to<AG::data::ptr<AG::Graph::TreeElement>>,std::hash<AG::data::ptr<AG::Graph::TreeElement>>,true>,std::allocator<std::__hash_value_type<AG::data::ptr<AG::Graph::TreeElement>,unsigned long>>>::__emplace_unique_key_args<AG::data::ptr<AG::Graph::TreeElement>,std::piecewise_construct_t const&,std::tuple<AG::data::ptr<AG::Graph::TreeElement> const&>,std::tuple<>>(uint64_t a1, unsigned int *a2, uint64_t a3, _DWORD **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  void **v10;
  _QWORD *v11;
  unint64_t v12;
  float v13;
  float v14;
  _BOOL8 v15;
  unint64_t v16;
  unint64_t v17;
  size_t v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t v21;

  v7 = *a2;
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v4 = *a2;
      if (v8 <= v7)
        v4 = v7 % v8;
    }
    else
    {
      v4 = ((_DWORD)v8 - 1) & v7;
    }
    v10 = *(void ***)(*(_QWORD *)a1 + 8 * v4);
    if (v10)
    {
      v11 = *v10;
      if (*v10)
      {
        do
        {
          v12 = v11[1];
          if (v12 == v7)
          {
            if (*((_DWORD *)v11 + 4) == (_DWORD)v7)
              return v11;
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8)
                v12 %= v8;
            }
            else
            {
              v12 &= v8 - 1;
            }
            if (v12 != v4)
              break;
          }
          v11 = (_QWORD *)*v11;
        }
        while (v11);
      }
    }
  }
  v11 = operator new(0x20uLL);
  *v11 = 0;
  v11[1] = v7;
  *((_DWORD *)v11 + 4) = **a4;
  v11[3] = 0;
  v13 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v14 = *(float *)(a1 + 32);
  if (!v8 || (float)(v14 * (float)v8) < v13)
  {
    v15 = 1;
    if (v8 >= 3)
      v15 = (v8 & (v8 - 1)) != 0;
    v16 = v15 | (2 * v8);
    v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17)
      v18 = v17;
    else
      v18 = v16;
    std::__hash_table<std::__hash_value_type<unsigned int,AG::Graph::ProfileData::Item>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,AG::Graph::ProfileData::Item>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,AG::Graph::ProfileData::Item>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,AG::Graph::ProfileData::Item>>>::__rehash<true>(a1, v18);
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v8 <= v7)
        v4 = v7 % v8;
      else
        v4 = v7;
    }
    else
    {
      v4 = ((_DWORD)v8 - 1) & v7;
    }
  }
  v19 = *(_QWORD *)a1;
  v20 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v20)
  {
    *v11 = *v20;
LABEL_38:
    *v20 = v11;
    goto LABEL_39;
  }
  *v11 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v11;
  *(_QWORD *)(v19 + 8 * v4) = a1 + 16;
  if (*v11)
  {
    v21 = *(_QWORD *)(*v11 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v21 >= v8)
        v21 %= v8;
    }
    else
    {
      v21 &= v8 - 1;
    }
    v20 = (_QWORD *)(*(_QWORD *)a1 + 8 * v21);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return v11;
}

void sub_1AB955B04(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<AG::data::ptr<AG::IndirectNode>,std::hash<AG::data::ptr<AG::IndirectNode>>,std::equal_to<AG::data::ptr<AG::IndirectNode>>,std::allocator<AG::data::ptr<AG::IndirectNode>>>::__emplace_unique_key_args<AG::data::ptr<AG::IndirectNode>,AG::data::ptr<AG::IndirectNode> const&>(uint64_t a1, unsigned int *a2, _DWORD *a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  void **v9;
  _QWORD *v10;
  unint64_t v11;
  float v12;
  float v13;
  _BOOL8 v14;
  unint64_t v15;
  unint64_t v16;
  size_t v17;
  uint64_t v18;
  _QWORD *v19;
  unint64_t v20;

  v6 = *a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = *a2;
      if (v7 <= v6)
        v3 = v6 % v7;
    }
    else
    {
      v3 = ((_DWORD)v7 - 1) & v6;
    }
    v9 = *(void ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      v10 = *v9;
      if (*v9)
      {
        do
        {
          v11 = v10[1];
          if (v11 == v6)
          {
            if (*((_DWORD *)v10 + 4) == (_DWORD)v6)
              return v10;
          }
          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v11 >= v7)
                v11 %= v7;
            }
            else
            {
              v11 &= v7 - 1;
            }
            if (v11 != v3)
              break;
          }
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
    }
  }
  v10 = operator new(0x18uLL);
  *v10 = 0;
  v10[1] = v6;
  *((_DWORD *)v10 + 4) = *a3;
  v12 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v13 = *(float *)(a1 + 32);
  if (!v7 || (float)(v13 * (float)v7) < v12)
  {
    v14 = 1;
    if (v7 >= 3)
      v14 = (v7 & (v7 - 1)) != 0;
    v15 = v14 | (2 * v7);
    v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16)
      v17 = v16;
    else
      v17 = v15;
    std::__hash_table<std::__hash_value_type<unsigned int,AG::Graph::ProfileData::Item>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,AG::Graph::ProfileData::Item>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,AG::Graph::ProfileData::Item>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,AG::Graph::ProfileData::Item>>>::__rehash<true>(a1, v17);
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6)
        v3 = v6 % v7;
      else
        v3 = v6;
    }
    else
    {
      v3 = ((_DWORD)v7 - 1) & v6;
    }
  }
  v18 = *(_QWORD *)a1;
  v19 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v19)
  {
    *v10 = *v19;
LABEL_38:
    *v19 = v10;
    goto LABEL_39;
  }
  *v10 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v10;
  *(_QWORD *)(v18 + 8 * v3) = a1 + 16;
  if (*v10)
  {
    v20 = *(_QWORD *)(*v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v20 >= v7)
        v20 %= v7;
    }
    else
    {
      v20 &= v7 - 1;
    }
    v19 = (_QWORD *)(*(_QWORD *)a1 + 8 * v20);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return v10;
}

void sub_1AB955D20(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t AG::Graph::Context::to_cf(AG::Graph::Context *this)
{
  return (uint64_t)this - 16;
}

uint64_t AGGraphGetGraphContext(uint64_t a1, const char *a2)
{
  if (*(_BYTE *)(a1 + 88))
    AG::precondition_failure((AG *)"invalidated graph", a2);
  return *(_QWORD *)(a1 + 16);
}

uint64_t AGGraphBeginDeferringSubgraphInvalidation(uint64_t a1, const char *a2)
{
  uint64_t v2;
  uint64_t result;

  if (*(_BYTE *)(a1 + 88))
    AG::precondition_failure((AG *)"invalidated graph", a2);
  v2 = *(_QWORD *)(a1 + 16);
  result = *(unsigned __int8 *)(v2 + 408);
  *(_BYTE *)(v2 + 408) = 1;
  return result;
}

void AGGraphEndDeferringSubgraphInvalidation(uint64_t a1, const char *a2)
{
  AG::Graph *v2;

  if (*(_BYTE *)(a1 + 88))
    AG::precondition_failure((AG *)"invalidated graph", a2);
  if (!a2)
  {
    v2 = *(AG::Graph **)(a1 + 16);
    if (v2)
    {
      *((_BYTE *)v2 + 408) = 0;
      AG::Graph::invalidate_subgraphs(v2);
    }
  }
}

uint64_t AGGraphWithoutUpdate(uint64_t (*a1)(void))
{
  uint64_t v1;
  unint64_t StatusReg;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  v1 = AG::Graph::_current_update_key;
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v3 = *(_QWORD *)(StatusReg + 8 * v1);
  v4 = v3 | 1;
  if (!v3)
    v4 = 0;
  *(_QWORD *)(StatusReg + 8 * v1) = v4;
  result = a1();
  *(_QWORD *)(StatusReg + 8 * AG::Graph::_current_update_key) = v3;
  return result;
}

void sub_1AB955E28(_Unwind_Exception *a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  *(_QWORD *)(v1 + 8 * *v2) = v3;
  _Unwind_Resume(a1);
}

uint64_t AGGraphGetDeadline(uint64_t a1, const char *a2)
{
  if (*(_BYTE *)(a1 + 88))
    AG::precondition_failure((AG *)"invalidated graph", a2);
  return *(_QWORD *)(a1 + 72);
}

uint64_t *AGGraphSetDeadline(uint64_t a1, const char *a2)
{
  if (*(_BYTE *)(a1 + 88))
    AG::precondition_failure((AG *)"invalidated graph", a2);
  return AG::Graph::Context::set_deadline((uint64_t *)(a1 + 16), (uint64_t)a2);
}

uint64_t AGGraphHasDeadlinePassed()
{
  uint64_t v0;
  AG::Graph **v1;

  v0 = AG::Graph::_current_update_key;
  v1 = (AG::Graph **)(*(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v0) & 0xFFFFFFFFFFFFFFFELL);
  if (v1 && *((_QWORD *)*v1 + 54) != -1)
    return AG::Graph::passed_deadline_slow(*v1);
  else
    return 0;
}

char *`anonymous namespace'::read_cached_attribute(const char *a1, uint64_t *a2, const void *a3, AG::swift::metadata *a4, char a5, unsigned int a6, _BYTE *a7, int a8, uint64_t (*a9)(_QWORD), uint64_t a10)
{
  uint64_t v13;
  unint64_t StatusReg;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  AG::data::zone **v19;
  AG::data::zone *v20;
  __n128 *v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  _BYTE *v31;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  char v41;
  char v42;
  _QWORD *v43;
  uint64_t v44;
  unsigned int v45;
  unint64_t v46;
  unsigned int v47;

  v13 = AG::Graph::_current_update_key;
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v15 = *(_QWORD *)(StatusReg + 8 * v13);
  if ((v15 & 1) != 0)
    v16 = 0;
  else
    v16 = v15 & 0xFFFFFFFFFFFFFFFELL;
  if (a6 >= 4)
  {
    if (dword_1ECEF30D0 <= (a6 & 0xFFFFFFFC))
      AG::precondition_failure((AG *)"invalid data offset: %u", a1, a2, a3, a6 & 0xFFFFFFFC);
    v17 = a6 & 0xFFFFFE00;
LABEL_11:
    v19 = (AG::data::zone **)(AG::data::_shared_table_bytes + v17);
    goto LABEL_12;
  }
  if (v16)
  {
    v18 = v16 + 32;
    if (*(_QWORD *)(v16 + 96))
      v18 = *(_QWORD *)(v16 + 96);
    v17 = *(_DWORD *)(v18 + 8 * *(_QWORD *)(v16 + 104) - 8) & 0xFFFFFE00;
    goto LABEL_11;
  }
  v19 = (AG::data::zone **)(StatusReg + 8 * AG::Subgraph::_current_subgraph_key);
LABEL_12:
  v20 = *v19;
  if (!*v19)
    AG::precondition_failure((AG *)"no subgraph", a1, a2, a3);
  v21 = (__n128 *)*((_QWORD *)v20 + 5);
  v22 = AG::Subgraph::cache_fetch(*v19, (uint64_t)a1, a2, a3, a9);
  if (!v22)
    return 0;
  v23 = v22;
  if (!v16)
  {
    v33 = AG::Graph::value_ref(v21, (const char *)v22, 0, a4, a7);
    AG::Subgraph::cache_insert(v20, v23);
    return v33;
  }
  v24 = (a5 & 1) == 0;
  v25 = v16 + 32;
  if (*(_QWORD *)(v16 + 96))
    v25 = *(_QWORD *)(v16 + 96);
  v26 = *(unsigned int *)(v25 + 8 * *(_QWORD *)(v16 + 104) - 8);
  v47 = v22;
  v27 = AG::data::_shared_table_bytes + v26;
  v28 = *(unsigned int *)(AG::data::_shared_table_bytes + v26 + 12);
  if (v28 > 0x11F)
  {
    v29 = AG::Graph::index_of_input_slow((uint64_t)v21, AG::data::_shared_table_bytes + v26, v22 | (unint64_t)(v24 << 40) | 0x700000000);
  }
  else
  {
    if (v28 < 0x20)
    {
LABEL_23:
      v29 = -1;
      return AG::Graph::input_value_ref_slow(v21, v26, (const char *)v23, 0, v24, a4, a7, v29);
    }
    v29 = 0;
    v30 = v28 >> 5;
    v31 = (_BYTE *)(*(unsigned int *)(v27 + 16) + AG::data::_shared_table_bytes + 4);
    while (*((_DWORD *)v31 - 1) != v22 || (*v31 & 7) != (_DWORD)v24)
    {
      ++v29;
      v31 += 5;
      if (v30 == v29)
        goto LABEL_23;
    }
  }
  if ((v29 & 0x8000000000000000) != 0)
    return AG::Graph::input_value_ref_slow(v21, v26, (const char *)v23, 0, v24, a4, a7, v29);
  v34 = *(unsigned int *)(v27 + 16);
  v35 = AG::data::_shared_table_bytes;
  if ((v23 & 3) != 0)
  {
    v46 = v29;
    v44 = AG::data::_shared_table_bytes;
    v45 = AG::AttributeID::resolve_slow((AG::AttributeID *)&v47, (const char *)3);
    v35 = v44;
    v29 = v46;
    v23 = v45;
  }
  else
  {
    v36 = 0;
  }
  v37 = AG::data::_shared_table_bytes;
  v38 = AG::data::_shared_table_bytes + v23;
  if ((*(_DWORD *)v38 & 0x11) != 0x10)
  {
    v23 = v47;
    return AG::Graph::input_value_ref_slow(v21, v26, (const char *)v23, 0, v24, a4, a7, v29);
  }
  v39 = v35 + v34 + 5 * v29;
  v42 = *(_BYTE *)(v39 + 4);
  v40 = (char *)(v39 + 4);
  v41 = v42;
  if ((v42 & 8) != 0)
  {
    *a7 |= 1u;
    v41 = *v40;
    v37 = AG::data::_shared_table_bytes;
  }
  *v40 = v41 | 0x10;
  v43 = (_QWORD *)(v37 + *(unsigned int *)(v38 + 8));
  if ((*(_BYTE *)(v38 + 7) & 2) != 0)
    v43 = (_QWORD *)*v43;
  return (char *)v43 + v36;
}

char *AGGraphReadCachedAttributeIfExists(const char *a1, uint64_t *a2, const void *a3, AG::swift::metadata *a4, char a5, unsigned int a6, _BYTE *a7, int a8)
{
  char *result;
  char v10;

  v10 = 0;
  if (a7)
    *a7 = v10 & 1;
  return result;
}

uint64_t AGGraphCreateOffsetAttribute(uint64_t a1, const char *a2)
{
}

uint64_t AGGraphGetIndirectAttribute(uint64_t result)
{
  if ((result & 3) == 1)
    return *(unsigned int *)(AG::data::_shared_table_bytes + (result & 0xFFFFFFFC));
  return result;
}

uint64_t AGGraphResetIndirectAttribute(uint64_t a1, const char *a2, const char *a3)
{
  uint64_t v3;

  if ((a1 & 3) != 1
    || (a3 = a2,
        a2 = (const char *)(a1 & 0xFFFFFFFC),
        (v3 = *(_QWORD *)(AG::data::_shared_table_bytes + (a1 & 0xFFFFFE00))) == 0))
  {
    AG::precondition_failure((AG *)"invalid indirect attribute: %u", a2, a3, a1);
  }
  return AG::Graph::indirect_attribute_reset(*(_QWORD *)(v3 + 40), a2, (char)a3);
}

uint64_t AGGraphGetIndirectDependency(uint64_t a1, const char *a2)
{
  uint64_t v2;

  if ((a1 & 3) != 1
    || (a2 = (const char *)(a1 & 0xFFFFFFFC),
        (v2 = *(_QWORD *)(AG::data::_shared_table_bytes + (a1 & 0xFFFFFE00))) == 0))
  {
    AG::precondition_failure((AG *)"invalid indirect attribute: %u", a2, a1);
  }
  return AG::Graph::indirect_attribute_dependency(*(_QWORD *)(v2 + 40), a2);
}

uint64_t AGGraphVerifyType(uint64_t result, AG::swift::metadata *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  const char *v8;

  if (dword_1ECEF30D0 <= (result & 0xFFFFFFFC))
    AG::precondition_failure((AG *)"invalid data offset: %u", (const char *)this, result & 0xFFFFFFFC);
  v2 = *(_QWORD *)(AG::data::_shared_table_bytes + (result & 0xFFFFFE00));
  if (!v2)
    AG::precondition_failure((AG *)"no graph: %u", (const char *)this, result);
  if ((result & 3) == 0)
  {
    v3 = *(_QWORD *)(v2 + 40);
    if (*(AG::swift::metadata **)(*(_QWORD *)(*(_QWORD *)(v3 + 128)
                                             + (((unint64_t)*(unsigned int *)(AG::data::_shared_table_bytes
                                                                                   + result) >> 5) & 0x7FFFFF8))
                                 + 8) != this)
    {
      v4 = result;
      v5 = result;
      v6 = AG::swift::metadata::name(this, 0);
      v7 = AG::swift::metadata::name(*(AG::swift::metadata **)(*(_QWORD *)(*(_QWORD *)(v3 + 128)+ (((unint64_t)*(unsigned int *)(AG::data::_shared_table_bytes+ v4) >> 5) & 0x7FFFFF8))+ 8), 0);
      AG::precondition_failure((AG *)"type check failed: %u, expected %s, got %s", v8, v5, v6, v7);
    }
  }
  return result;
}

uint64_t AGGraphInvalidateAllValues(uint64_t a1, const char *a2)
{
  if (*(_BYTE *)(a1 + 88))
    AG::precondition_failure((AG *)"invalidated graph", a2);
  return AG::Graph::value_mark_all(*(_QWORD *)(a1 + 16), a2);
}

uint64_t AGGraphHasValue(char *a1, const char *a2)
{
  uint64_t v2;

  if ((a1 & 3) != 0)
    AG::precondition_failure((AG *)"non-direct attribute id: %u", a2, a1);
  if (dword_1ECEF30D0 <= (a1 & 0xFFFFFFFC))
    AG::precondition_failure((AG *)"invalid data offset: %u", a2, a1 & 0xFFFFFFFC);
  v2 = *(_QWORD *)(AG::data::_shared_table_bytes + (a1 & 0xFFFFFE00));
  if (!v2)
    AG::precondition_failure((AG *)"no graph: %u", a2, a1);
  return AG::Graph::value_exists(*(_QWORD *)(v2 + 40), a1);
}

unint64_t AGGraphRegisterDependency(unsigned int a1, const char *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;

  v2 = AG::Graph::_current_update_key;
  v3 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v2);
  if ((v3 & 1) != 0 || (v4 = (uint64_t *)(v3 & 0xFFFFFFFFFFFFFFFELL), (v3 & 0xFFFFFFFFFFFFFFFELL) == 0))
    AG::precondition_failure((AG *)"no attribute updating", a2);
  v5 = *v4;
  v6 = v4 + 4;
  v8 = v4[12];
  v7 = v4[13];
  if (v8)
    v6 = (uint64_t *)v8;
  return AG::Graph::input_value_add(v5, (const char *)LODWORD(v6[v7 - 1]), a1, (char)a2);
}

uint64_t AGGraphUpdateValue(char *a1, const char *a2)
{
  uint64_t v2;

  if ((a1 & 3) != 0)
    AG::precondition_failure((AG *)"non-direct attribute id: %u", a2, a1);
  if (dword_1ECEF30D0 <= (a1 & 0xFFFFFFFC))
    AG::precondition_failure((AG *)"invalid data offset: %u", a2, a1 & 0xFFFFFFFC);
  v2 = *(_QWORD *)(AG::data::_shared_table_bytes + (a1 & 0xFFFFFE00));
  if (!v2)
    AG::precondition_failure((AG *)"no graph: %u", a2, a1);
  return AG::Graph::update_attribute(*(__n128 **)(v2 + 40), a1, 0);
}

uint64_t AGGraphPrefetchValue(uint64_t a1, const char *a2)
{
  unsigned int v3;
  uint64_t v4;
  __n128 *v5;
  uint64_t result;
  int v7;

  v7 = a1;
  v3 = a1;
  if ((a1 & 3) != 0)
    v3 = AG::AttributeID::resolve_slow((AG::AttributeID *)&v7, (const char *)2);
  if (dword_1ECEF30D0 <= (a1 & 0xFFFFFFFC))
    AG::precondition_failure((AG *)"invalid data offset: %u", a2, a1 & 0xFFFFFFFC);
  v4 = *(_QWORD *)(AG::data::_shared_table_bytes + (a1 & 0xFFFFFE00));
  if (!v4)
    AG::precondition_failure((AG *)"no graph: %u", a2, a1);
  v5 = *(__n128 **)(v4 + 40);
  if (v5[27].n128_u64[0] == -1)
    return AG::Graph::update_attribute(v5, v3, 6);
  result = AG::Graph::passed_deadline_slow((AG::Graph *)v5);
  if ((result & 1) == 0)
    return AG::Graph::update_attribute(v5, v3, 6);
  return result;
}

void AGGraphCancelUpdate(uint64_t a1, const char *a2)
{
  uint64_t v2;
  AG::Graph::UpdateStack *v3;

  v2 = AG::Graph::_current_update_key;
  v3 = (AG::Graph::UpdateStack *)(*(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v2) & 0xFFFFFFFFFFFFFFFELL);
  if (!v3)
    AG::precondition_failure((AG *)"no attribute updating", a2);
  AG::Graph::UpdateStack::cancel(v3);
}

uint64_t AGGraphCancelUpdateIfNeeded(uint64_t a1, const char *a2)
{
  uint64_t v2;
  uint64_t v3;
  AG::Graph **v4;
  uint64_t result;

  v2 = AG::Graph::_current_update_key;
  v3 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v2);
  v4 = (AG::Graph **)(v3 & 0xFFFFFFFFFFFFFFFELL);
  if ((v3 & 0xFFFFFFFFFFFFFFFELL) == 0)
    AG::precondition_failure((AG *)"no attribute updating", a2);
  if ((AG::Graph::UpdateStack::cancelled(v3 & 0xFFFFFFFFFFFFFFFELL) & 1) != 0)
    return 1;
  if (*((_QWORD *)*v4 + 54) == -1)
    return 0;
  result = AG::Graph::passed_deadline_slow(*v4);
  if ((_DWORD)result)
  {
    AG::Graph::UpdateStack::cancel((AG::Graph::UpdateStack *)v4);
    return 1;
  }
  return result;
}

uint64_t AGGraphUpdateWasCancelled(uint64_t a1, const char *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = AG::Graph::_current_update_key;
  v3 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v2);
  if ((v3 & 1) != 0 || (v3 & 0xFFFFFFFFFFFFFFFELL) == 0)
    AG::precondition_failure((AG *)"no attribute updating", a2);
  return AG::Graph::UpdateStack::cancelled(v3 & 0xFFFFFFFFFFFFFFFELL);
}

uint64_t AGGraphSearch(uint64_t a1, const char *a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v3;

  if (dword_1ECEF30D0 <= (a1 & 0xFFFFFFFC))
    AG::precondition_failure((AG *)"invalid data offset: %u", a2, a1 & 0xFFFFFFFC);
  v3 = *(_QWORD *)(AG::data::_shared_table_bytes + (a1 & 0xFFFFFE00));
  if (!v3)
    AG::precondition_failure((AG *)"no graph: %u", a2, a1);
  return AG::Graph::breadth_first_search(*(_QWORD *)(v3 + 40), a1, (char)a2, a3);
}

void AGGraphStartProfiling(uint64_t a1, const char *a2)
{
  if (a1)
  {
    if (*(_BYTE *)(a1 + 88))
      AG::precondition_failure((AG *)"invalidated graph", a2);
    AG::Graph::start_profiling(*(AG::Graph **)(a1 + 16), 1);
  }
  else
  {
    AG::Graph::all_start_profiling((AG::Graph *)1);
  }
}

void AGGraphStopProfiling(uint64_t a1, const char *a2)
{
  if (a1)
  {
    if (*(_BYTE *)(a1 + 88))
      AG::precondition_failure((AG *)"invalidated graph", a2);
    AG::Graph::stop_profiling(*(_DWORD **)(a1 + 16));
  }
  else
  {
    AG::Graph::all_stop_profiling(0);
  }
}

uint64_t AGGraphIsProfilingEnabled(uint64_t a1, const char *a2)
{
  uint64_t v2;

  if (dword_1ECEF30D0 <= (a1 & 0xFFFFFFFC))
    AG::precondition_failure((AG *)"invalid data offset: %u", a2, a1 & 0xFFFFFFFC);
  v2 = *(_QWORD *)(AG::data::_shared_table_bytes + (a1 & 0xFFFFFE00));
  if (!v2)
    AG::precondition_failure((AG *)"no graph: %u", a2, a1);
  return *(unsigned __int8 *)(*(_QWORD *)(v2 + 40) + 296);
}

void AGGraphResetProfile(uint64_t a1, const char *a2)
{
  if (a1)
  {
    if (*(_BYTE *)(a1 + 88))
      AG::precondition_failure((AG *)"invalidated graph", a2);
    AG::Graph::reset_profile(*(AG::Graph **)(a1 + 16));
  }
  else
  {
    AG::Graph::all_reset_profile(0);
  }
}

void AGGraphMarkProfile(uint64_t a1, AG::Graph *this)
{
  AG::Graph *v2;
  uint64_t *v3;

  if (a1)
  {
    if (*(_BYTE *)(a1 + 88))
      AG::precondition_failure((AG *)"invalidated graph", (const char *)this);
    v2 = *(AG::Graph **)(a1 + 16);
    v3 = AG::Graph::intern_key(v2, (char *)this);
    AG::Graph::mark_profile(v2, (uint64_t)v3, 0);
  }
  else
  {
    AG::Graph::all_mark_profile(this, (const char *)this);
  }
}

uint64_t AGGraphBeginProfileEvent(uint64_t a1, char *a2)
{
  uint64_t v3;
  uint64_t v4;
  int v6;

  v3 = a1;
  v6 = a1;
  if ((a1 & 3) != 0)
    LODWORD(a1) = AG::AttributeID::resolve_slow((AG::AttributeID *)&v6, (const char *)2);
  if (dword_1ECEF30D0 <= (v3 & 0xFFFFFFFC))
    AG::precondition_failure((AG *)"invalid data offset: %u", a2, v3 & 0xFFFFFFFC);
  v4 = *(_QWORD *)(AG::data::_shared_table_bytes + (v3 & 0xFFFFFE00));
  if (!v4)
    AG::precondition_failure((AG *)"no graph: %u", a2, v3);
  return AG::Graph::begin_profile_event(*(AG::Graph **)(v4 + 40), a1, a2);
}

void *AGGraphEndProfileEvent(uint64_t a1, char *a2, uint64_t a3, int a4)
{
  uint64_t v7;
  uint64_t v8;
  int v10;

  v7 = a1;
  v10 = a1;
  if ((a1 & 3) != 0)
    LODWORD(a1) = AG::AttributeID::resolve_slow((AG::AttributeID *)&v10, (const char *)2);
  if (dword_1ECEF30D0 <= (v7 & 0xFFFFFFFC))
    AG::precondition_failure((AG *)"invalid data offset: %u", a2, v7 & 0xFFFFFFFC);
  v8 = *(_QWORD *)(AG::data::_shared_table_bytes + (v7 & 0xFFFFFE00));
  if (!v8)
    AG::precondition_failure((AG *)"no graph: %u", a2, v7);
  return AG::Graph::end_profile_event(*(_QWORD *)(v8 + 40), a1, a2, a3, a4);
}

void AGGraphStartTracing(uint64_t a1, const char *a2)
{
  AGGraphStartTracing2(a1, a2, 0);
}

void AGGraphStartTracing2(uint64_t a1, const char *a2, CFArrayRef theArray)
{
  int v3;
  CFIndex Count;
  CFIndex i;
  void *ValueAtIndex;
  CFTypeID v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  const char *v13;
  unint64_t v14;

  v3 = (int)a2;
  v12 = 0;
  v13 = 0;
  v14 = 0;
  if (theArray)
  {
    Count = CFArrayGetCount(theArray);
    if (Count)
    {
      for (i = 0; i != Count; ++i)
      {
        ValueAtIndex = (void *)CFArrayGetValueAtIndex(theArray, i);
        v9 = CFGetTypeID(ValueAtIndex);
        if (v9 == CFStringGetTypeID())
        {
          v10 = objc_msgSend(objc_retainAutorelease(ValueAtIndex), "UTF8String");
          v11 = (uint64_t)v13;
          a2 = v13 + 1;
          if (v14 < (unint64_t)(v13 + 1))
          {
            AG::vector<std::unique_ptr<char const,util::free_deleter>,0ul,unsigned long>::reserve_slow((uint64_t)&v12, (unint64_t)a2);
            v11 = (uint64_t)v13;
            a2 = v13 + 1;
          }
          *((_QWORD *)v12 + v11) = v10;
          v13 = a2;
        }
      }
    }
  }
  if (a1)
  {
    if (*(_BYTE *)(a1 + 88))
      AG::precondition_failure((AG *)"invalidated graph", a2);
    AG::Graph::start_tracing(*(_QWORD **)(a1 + 16), v3, (const char **)v12, (uint64_t)v13);
  }
  else
  {
    AG::Graph::all_start_tracing(v3, (const char **)v12, (uint64_t)v13);
  }
  if (v12)
    free(v12);
}

void sub_1AB956B54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10)
{
  if (a10)
    free(a10);
  _Unwind_Resume(exception_object);
}

void AGGraphStopTracing(uint64_t a1, const char *a2)
{
  if (a1)
  {
    if (*(_BYTE *)(a1 + 88))
      AG::precondition_failure((AG *)"invalidated graph", a2);
    AG::Graph::stop_tracing(*(_DWORD **)(a1 + 16));
  }
  else
  {
    AG::Graph::all_stop_tracing(0);
  }
}

void AGGraphSyncTracing(uint64_t a1, const char *a2)
{
  if (a1)
  {
    if (*(_BYTE *)(a1 + 88))
      AG::precondition_failure((AG *)"invalidated graph", a2);
    AG::Graph::sync_tracing(*(_QWORD *)(a1 + 16));
  }
  else
  {
    AG::Graph::all_sync_tracing(0);
  }
}

CFStringRef AGGraphCopyTracePath(uint64_t a1, const char *a2)
{
  if (!a1)
    return AG::Graph::all_copy_trace_path(0);
  if (*(_BYTE *)(a1 + 88))
    AG::precondition_failure((AG *)"invalidated graph", a2);
  return AG::Graph::copy_trace_path(*(AG::Graph **)(a1 + 16));
}

id AGGraphDescription(uint64_t a1, void *a2)
{
  const char *v3;
  NSDictionary *v4;
  NSDictionary *v5;
  uint64_t v6;
  void *v7;

  v5 = a2;
  if (a1)
  {
    if (*(_BYTE *)(a1 + 88))
      AG::precondition_failure((AG *)"invalidated graph", v3);
    AG::Graph::description(*(AG::Graph **)(a1 + 16), v5, v4);
    v6 = objc_claimAutoreleasedReturnValue();
  }
  else
  {
    AG::Graph::description(0, v5, v4);
    v6 = objc_claimAutoreleasedReturnValue();
  }
  v7 = (void *)v6;

  return v7;
}

void sub_1AB956C88(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void AGGraphArchiveJSON(AG::Graph *a1)
{
  AG::Graph::write_to_file(0, a1, 0);
}

void AGGraphArchiveJSON2(AG::Graph *a1, char *a2)
{
  AG::Graph::write_to_file(0, a1, a2);
}

uint64_t AG::misc_log(AG *this)
{
  unsigned __int8 v1;
  unint64_t v2;
  int v4;

  v2 = 0x1EEC35000uLL;
  if ((v1 & 1) == 0)
  {
    v2 = 0x1EEC35000;
    if (v4)
    {
      AG::misc_log(void)::log = (uint64_t)os_log_create("com.apple.attributegraph", "misc");
      v2 = 0x1EEC35000;
    }
  }
  return *(_QWORD *)(v2 + 3048);
}

uint64_t AG::error_log(AG *this)
{
  unsigned __int8 v1;
  unint64_t v2;
  int v4;

  v2 = 0x1EEC35000uLL;
  if ((v1 & 1) == 0)
  {
    v2 = 0x1EEC35000;
    if (v4)
    {
      AG::error_log(void)::log = (uint64_t)os_log_create("com.apple.attributegraph", "error");
      v2 = 0x1EEC35000;
    }
  }
  return *(_QWORD *)(v2 + 3224);
}

void AG::non_fatal_precondition_failure(AG *this, const char *a2, ...)
{
  AG *v2;
  NSObject *v3;
  const char *v4;
  char *v5[2];
  va_list va;

  va_start(va, a2);
  v5[0] = 0;
  va_copy((va_list)&v5[1], va);
  v2 = (AG *)vasprintf(v5, (const char *)this, va);
  if (v5[0])
  {
    v3 = AG::error_log(v2);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_FAULT))
      AG::non_fatal_precondition_failure((uint64_t *)v5, v3);
    AG::Graph::trace_assertion_failure(0, (uint64_t)"precondition failure: %s", v4, v5[0]);
    free(v5[0]);
  }
}

double AG::current_time(AG *this)
{
  AG *v1;

  v1 = (AG *)mach_absolute_time();
  return AG::absolute_time_to_seconds(v1);
}

double AG::absolute_time_to_seconds(AG *this)
{
  unsigned __int8 v2;

  if ((v2 & 1) == 0
  {
    AG::absolute_time_to_seconds(unsigned long long)::time_scale = AG::absolute_time_to_seconds(unsigned long long)::$_0::operator()();
  }
  return *(double *)&AG::absolute_time_to_seconds(unsigned long long)::time_scale * (double)(unint64_t)this;
}

void sub_1AB956E90(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

double AG::absolute_time_to_seconds(unsigned long long)::$_0::operator()()
{
  unint64_t v0;
  unint64_t v1;
  mach_timebase_info info;

  if (mach_timebase_info(&info))
    return NAN;
  LODWORD(v0) = info.numer;
  LODWORD(v1) = info.denom;
  return (double)v0 / (double)v1 * 0.000000001;
}

uint64_t AGGraphPrepareTrace(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t *v5;
  _QWORD v7[4];

  v5 = (uint64_t *)AG::Graph::Context::from_cf(a1, a2);
  v7[0] = &off_1E5A60020;
  v7[1] = AGMakeUniqueID();
  v7[2] = a2;
  v7[3] = a3;
  return AG::Graph::prepare_trace(*v5, (uint64_t)v7);
}

BOOL AGGraphIsTracingActive(uint64_t a1, const char *a2)
{
  return *(_DWORD *)(*(_QWORD *)AG::Graph::Context::from_cf(a1, a2) + 232) != 0;
}

void *AGGraphSetTrace(uint64_t a1, const char *a2, uint64_t a3)
{
  void **v5;
  AG::Trace *v6;

  v5 = (void **)AG::Graph::Context::from_cf(a1, a2);
  AG::Graph::remove_trace(*v5, 0);
  v6 = (AG::Trace *)operator new();
  *(_QWORD *)v6 = &off_1E5A60510;
  AGMakeUniqueID();
  *((_QWORD *)v6 + 2) = a2;
  *((_QWORD *)v6 + 3) = a3;
  *(_QWORD *)v6 = &off_1E5A60020;
  *((_QWORD *)v6 + 1) = 0;
  return AG::Graph::add_trace(*v5, v6);
}

void sub_1AB956FF4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF431538](v1, 0x10E1C404BDB33FELL);
  _Unwind_Resume(a1);
}

_DWORD *AGGraphResetTrace(uint64_t a1, const char *a2)
{
  _DWORD **v2;

  v2 = (_DWORD **)AG::Graph::Context::from_cf(a1, a2);
  return AG::Graph::remove_trace(*v2, 0);
}

uint64_t AGGraphAddTrace(uint64_t a1, const char *a2, uint64_t a3)
{
  void **v5;
  AG::Trace *v6;
  unint64_t v7;

  v5 = (void **)AG::Graph::Context::from_cf(a1, a2);
  v6 = (AG::Trace *)operator new();
  *(_QWORD *)v6 = &off_1E5A60510;
  v7 = AGMakeUniqueID();
  *(_QWORD *)v6 = &off_1E5A60020;
  *((_QWORD *)v6 + 1) = v7;
  *((_QWORD *)v6 + 2) = a2;
  *((_QWORD *)v6 + 3) = a3;
  AG::Graph::add_trace(*v5, v6);
  return *((_QWORD *)v6 + 1);
}

void sub_1AB9570B0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF431538](v1, 0x10E1C404BDB33FELL);
  _Unwind_Resume(a1);
}

_DWORD *AGGraphRemoveTrace(uint64_t a1, const char *a2)
{
  _DWORD **v3;

  v3 = (_DWORD **)AG::Graph::Context::from_cf(a1, a2);
  return AG::Graph::remove_trace(*v3, (uint64_t)a2);
}

uint64_t AGGraphAddTraceEvent(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v8;
  int v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;

  result = AG::Graph::Context::from_cf(a1, a2);
  v8 = *(_QWORD *)result;
  v9 = *(_DWORD *)(*(_QWORD *)result + 232);
  if (v9)
  {
    v10 = result;
    v11 = v9 - 1;
    do
    {
      v12 = v11;
      v13 = *(_QWORD *)(*(_QWORD *)(v8 + 224) + 8 * v11);
      result = (*(uint64_t (**)(uint64_t, uint64_t, const char *, uint64_t, uint64_t))(*(_QWORD *)v13 + 336))(v13, v10, a2, a3, a4);
      --v11;
    }
    while (v12);
  }
  return result;
}

uint64_t AGGraphGetTraceEventSubsystem(unsigned int a1)
{
  uint64_t v2;

  os_unfair_lock_lock((os_unfair_lock_t)&NamedEvents::lock);
  if (NamedEvents::names && *(_DWORD *)(NamedEvents::names + 8) > a1)
    v2 = *(_QWORD *)(*(_QWORD *)NamedEvents::names + 16 * a1);
  else
    v2 = 0;
  os_unfair_lock_unlock((os_unfair_lock_t)&NamedEvents::lock);
  return v2;
}

uint64_t AGGraphGetTraceEventName(unsigned int a1)
{
  uint64_t v2;

  os_unfair_lock_lock((os_unfair_lock_t)&NamedEvents::lock);
  if (NamedEvents::names && *(_DWORD *)(NamedEvents::names + 8) > a1)
    v2 = *(_QWORD *)(*(_QWORD *)NamedEvents::names + 16 * a1 + 8);
  else
    v2 = 0;
  os_unfair_lock_unlock((os_unfair_lock_t)&NamedEvents::lock);
  return v2;
}

uint64_t AGGraphAddNamedTraceEvent(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t result;
  uint64_t v12;
  int v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;

  result = AG::Graph::Context::from_cf(a1, a2);
  v12 = *(_QWORD *)result;
  v13 = *(_DWORD *)(*(_QWORD *)result + 232);
  if (v13)
  {
    v14 = result;
    v15 = v13 - 1;
    do
    {
      v16 = v15;
      v17 = *(_QWORD *)(*(_QWORD *)(v12 + 224) + 8 * v15);
      result = (*(uint64_t (**)(uint64_t, uint64_t, const char *, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v17 + 344))(v17, v14, a2, a3, a4, a5, a6);
      --v15;
    }
    while (v16);
  }
  return result;
}

uint64_t AGComparisonStateGetFieldRange(uint64_t a1)
{
  return *(_QWORD *)a1;
}

uint64_t AGComparisonStateGetFieldType(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16);
}

void ExternalTrace::~ExternalTrace(ExternalTrace *this)
{
  JUMPOUT(0x1AF431538);
}

uint64_t ExternalTrace::begin_trace(ExternalTrace *this, AG::Graph *a2)
{
  AG::Graph::Context *v3;
  uint64_t result;
  uint64_t (*v5)(_QWORD, uint64_t);

  v5 = *(uint64_t (**)(_QWORD, uint64_t))(*((_QWORD *)this + 2) + 8);
  v3 = (AG::Graph::Context *)AG::Graph::main_context(a2);
  result = AG::Graph::Context::to_cf(v3);
  if (v5)
    return v5(*((_QWORD *)this + 3), result);
  return result;
}

uint64_t ExternalTrace::end_trace(ExternalTrace *this, AG::Graph *a2)
{
  AG::Graph::Context *v3;
  uint64_t result;
  uint64_t (*v5)(_QWORD, uint64_t);

  v5 = *(uint64_t (**)(_QWORD, uint64_t))(*((_QWORD *)this + 2) + 16);
  v3 = (AG::Graph::Context *)AG::Graph::main_context(a2);
  result = AG::Graph::Context::to_cf(v3);
  if (v5)
    return v5(*((_QWORD *)this + 3), result);
  return result;
}

uint64_t ExternalTrace::begin_update(ExternalTrace *this, AG::Subgraph *a2, uint64_t a3)
{
  uint64_t result;
  uint64_t (*v6)(_QWORD, uint64_t, uint64_t);

  v6 = *(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*((_QWORD *)this + 2) + 24);
  result = AG::Subgraph::to_cf(a2);
  if (v6)
    return v6(*((_QWORD *)this + 3), result, a3);
  return result;
}

uint64_t ExternalTrace::end_update(ExternalTrace *this, AG::Subgraph *a2)
{
  uint64_t result;
  uint64_t (*v4)(_QWORD, uint64_t);

  v4 = *(uint64_t (**)(_QWORD, uint64_t))(*((_QWORD *)this + 2) + 32);
  result = AG::Subgraph::to_cf(a2);
  if (v4)
    return v4(*((_QWORD *)this + 3), result);
  return result;
}

uint64_t ExternalTrace::begin_update(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t (*v3)(_QWORD, uint64_t);

  v3 = *(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)(result + 16) + 40);
  if (v3)
    return v3(*(_QWORD *)(result + 24), a3);
  return result;
}

uint64_t ExternalTrace::end_update(uint64_t result, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t (*v4)(_QWORD, uint64_t, BOOL);

  v4 = *(uint64_t (**)(_QWORD, uint64_t, BOOL))(*(_QWORD *)(result + 16) + 48);
  if (v4)
    return v4(*(_QWORD *)(result + 24), a3, a4 == 1);
  return result;
}

uint64_t ExternalTrace::begin_update(uint64_t result)
{
  uint64_t (*v1)(_QWORD);

  v1 = *(uint64_t (**)(_QWORD))(*(_QWORD *)(result + 16) + 56);
  if (v1)
    return v1(*(_QWORD *)(result + 24));
  return result;
}

uint64_t ExternalTrace::end_update(uint64_t result)
{
  uint64_t (*v1)(_QWORD);

  v1 = *(uint64_t (**)(_QWORD))(*(_QWORD *)(result + 16) + 64);
  if (v1)
    return v1(*(_QWORD *)(result + 24));
  return result;
}

uint64_t ExternalTrace::begin_update(ExternalTrace *this, AG::Graph::Context *a2)
{
  uint64_t result;
  uint64_t (*v4)(_QWORD, uint64_t);

  v4 = *(uint64_t (**)(_QWORD, uint64_t))(*((_QWORD *)this + 2) + 72);
  result = AG::Graph::Context::to_cf(a2);
  if (v4)
    return v4(*((_QWORD *)this + 3), result);
  return result;
}

uint64_t ExternalTrace::end_update(ExternalTrace *this, AG::Graph::Context *a2)
{
  uint64_t result;
  uint64_t (*v4)(_QWORD, uint64_t);

  v4 = *(uint64_t (**)(_QWORD, uint64_t))(*((_QWORD *)this + 2) + 80);
  result = AG::Graph::Context::to_cf(a2);
  if (v4)
    return v4(*((_QWORD *)this + 3), result);
  return result;
}

uint64_t ExternalTrace::begin_invalidation(uint64_t a1, AG::Graph::Context *a2, uint64_t a3)
{
  uint64_t result;
  uint64_t (*v6)(_QWORD, uint64_t, uint64_t);

  v6 = *(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)(a1 + 16) + 88);
  result = AG::Graph::Context::to_cf(a2);
  if (v6)
    return v6(*(_QWORD *)(a1 + 24), result, a3);
  return result;
}

uint64_t ExternalTrace::end_invalidation(uint64_t a1, AG::Graph::Context *a2, uint64_t a3)
{
  uint64_t result;
  uint64_t (*v6)(_QWORD, uint64_t, uint64_t);

  v6 = *(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)(a1 + 16) + 96);
  result = AG::Graph::Context::to_cf(a2);
  if (v6)
    return v6(*(_QWORD *)(a1 + 24), result, a3);
  return result;
}

uint64_t ExternalTrace::begin_modify(uint64_t result)
{
  uint64_t (*v1)(_QWORD);

  v1 = *(uint64_t (**)(_QWORD))(*(_QWORD *)(result + 16) + 104);
  if (v1)
    return v1(*(_QWORD *)(result + 24));
  return result;
}

uint64_t ExternalTrace::end_modify(uint64_t result)
{
  uint64_t (*v1)(_QWORD);

  v1 = *(uint64_t (**)(_QWORD))(*(_QWORD *)(result + 16) + 112);
  if (v1)
    return v1(*(_QWORD *)(result + 24));
  return result;
}

uint64_t ExternalTrace::begin_event(uint64_t result, uint64_t a2, const char *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(_QWORD, uint64_t, uint64_t);

  if (*(_QWORD *)(*(_QWORD *)(result + 16) + 120))
  {
    v4 = *(_QWORD *)(AG::data::_shared_table_bytes + (a2 & 0xFFFFFE00));
    if (v4)
    {
      v5 = result;
      result = AG::Graph::key_name(*(AG::Graph **)(v4 + 40), a3);
      v6 = *(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)(v5 + 16) + 120);
      if (v6)
        return v6(*(_QWORD *)(v5 + 24), a2, result);
    }
  }
  return result;
}

uint64_t ExternalTrace::end_event(uint64_t result, uint64_t a2, const char *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(_QWORD, uint64_t, uint64_t);

  if (*(_QWORD *)(*(_QWORD *)(result + 16) + 128))
  {
    v4 = *(_QWORD *)(AG::data::_shared_table_bytes + (a2 & 0xFFFFFE00));
    if (v4)
    {
      v5 = result;
      result = AG::Graph::key_name(*(AG::Graph **)(v4 + 40), a3);
      v6 = *(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)(v5 + 16) + 128);
      if (v6)
        return v6(*(_QWORD *)(v5 + 24), a2, result);
    }
  }
  return result;
}

uint64_t ExternalTrace::created(ExternalTrace *this, AG::Graph::Context *a2)
{
  uint64_t result;
  uint64_t (*v4)(_QWORD, uint64_t);

  v4 = *(uint64_t (**)(_QWORD, uint64_t))(*((_QWORD *)this + 2) + 136);
  result = AG::Graph::Context::to_cf(a2);
  if (v4)
    return v4(*((_QWORD *)this + 3), result);
  return result;
}

uint64_t ExternalTrace::destroy(ExternalTrace *this, AG::Graph::Context *a2)
{
  uint64_t result;
  uint64_t (*v4)(_QWORD, uint64_t);

  v4 = *(uint64_t (**)(_QWORD, uint64_t))(*((_QWORD *)this + 2) + 144);
  result = AG::Graph::Context::to_cf(a2);
  if (v4)
    return v4(*((_QWORD *)this + 3), result);
  return result;
}

uint64_t ExternalTrace::needs_update(ExternalTrace *this, AG::Graph::Context *a2)
{
  uint64_t result;
  uint64_t (*v4)(_QWORD, uint64_t);

  v4 = *(uint64_t (**)(_QWORD, uint64_t))(*((_QWORD *)this + 2) + 152);
  result = AG::Graph::Context::to_cf(a2);
  if (v4)
    return v4(*((_QWORD *)this + 3), result);
  return result;
}

uint64_t ExternalTrace::created(ExternalTrace *this, AG::Subgraph *a2)
{
  uint64_t result;
  uint64_t (*v4)(_QWORD, uint64_t);

  v4 = *(uint64_t (**)(_QWORD, uint64_t))(*((_QWORD *)this + 2) + 160);
  result = AG::Subgraph::to_cf(a2);
  if (v4)
    return v4(*((_QWORD *)this + 3), result);
  return result;
}

uint64_t ExternalTrace::invalidate(ExternalTrace *this, AG::Subgraph *a2)
{
  uint64_t result;
  uint64_t (*v4)(_QWORD, uint64_t);

  v4 = *(uint64_t (**)(_QWORD, uint64_t))(*((_QWORD *)this + 2) + 168);
  result = AG::Subgraph::to_cf(a2);
  if (v4)
    return v4(*((_QWORD *)this + 3), result);
  return result;
}

uint64_t ExternalTrace::add_child(ExternalTrace *this, AG::Subgraph *a2, AG::Subgraph *a3)
{
  uint64_t v5;
  uint64_t result;
  uint64_t (*v7)(_QWORD, uint64_t, uint64_t);

  v7 = *(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*((_QWORD *)this + 2) + 176);
  v5 = AG::Subgraph::to_cf(a2);
  result = AG::Subgraph::to_cf(a3);
  if (v7)
    return v7(*((_QWORD *)this + 3), v5, result);
  return result;
}

uint64_t ExternalTrace::remove_child(ExternalTrace *this, AG::Subgraph *a2, AG::Subgraph *a3)
{
  uint64_t v5;
  uint64_t result;
  uint64_t (*v7)(_QWORD, uint64_t, uint64_t);

  v7 = *(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*((_QWORD *)this + 2) + 184);
  v5 = AG::Subgraph::to_cf(a2);
  result = AG::Subgraph::to_cf(a3);
  if (v7)
    return v7(*((_QWORD *)this + 3), v5, result);
  return result;
}

uint64_t ExternalTrace::added(uint64_t result)
{
  uint64_t (*v1)(_QWORD);

  v1 = *(uint64_t (**)(_QWORD))(*(_QWORD *)(result + 16) + 192);
  if (v1)
    return v1(*(_QWORD *)(result + 24));
  return result;
}

uint64_t ExternalTrace::add_edge(uint64_t result)
{
  uint64_t (*v1)(_QWORD);

  v1 = *(uint64_t (**)(_QWORD))(*(_QWORD *)(result + 16) + 200);
  if (v1)
    return v1(*(_QWORD *)(result + 24));
  return result;
}

uint64_t ExternalTrace::remove_edge(uint64_t result, int a2)
{
  uint64_t (*v2)(_QWORD);

  v2 = *(uint64_t (**)(_QWORD))(*(_QWORD *)(result + 16) + 208);
  if (v2)
  {
    if (*(_QWORD *)(AG::data::_shared_table_bytes + (a2 & 0xFFFFFE00)))
      return v2(*(_QWORD *)(result + 24));
  }
  return result;
}

uint64_t ExternalTrace::set_edge_pending(uint64_t result, int a2)
{
  uint64_t (*v2)(_QWORD);

  v2 = *(uint64_t (**)(_QWORD))(*(_QWORD *)(result + 16) + 216);
  if (v2)
  {
    if (*(_QWORD *)(AG::data::_shared_table_bytes + (a2 & 0xFFFFFE00)))
      return v2(*(_QWORD *)(result + 24));
  }
  return result;
}

uint64_t ExternalTrace::set_dirty(uint64_t result)
{
  uint64_t (*v1)(_QWORD);

  v1 = *(uint64_t (**)(_QWORD))(*(_QWORD *)(result + 16) + 224);
  if (v1)
    return v1(*(_QWORD *)(result + 24));
  return result;
}

uint64_t ExternalTrace::set_pending(uint64_t result)
{
  uint64_t (*v1)(_QWORD);

  v1 = *(uint64_t (**)(_QWORD))(*(_QWORD *)(result + 16) + 232);
  if (v1)
    return v1(*(_QWORD *)(result + 24));
  return result;
}

uint64_t ExternalTrace::set_value(uint64_t result)
{
  uint64_t (*v1)(_QWORD);

  v1 = *(uint64_t (**)(_QWORD))(*(_QWORD *)(result + 16) + 240);
  if (v1)
    return v1(*(_QWORD *)(result + 24));
  return result;
}

uint64_t ExternalTrace::mark_value(uint64_t result)
{
  uint64_t (*v1)(_QWORD);

  v1 = *(uint64_t (**)(_QWORD))(*(_QWORD *)(result + 16) + 248);
  if (v1)
    return v1(*(_QWORD *)(result + 24));
  return result;
}

uint64_t ExternalTrace::added(uint64_t result, int a2)
{
  uint64_t (*v2)(_QWORD, _QWORD);

  v2 = *(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(result + 16) + 256);
  if (v2)
    return v2(*(_QWORD *)(result + 24), a2 | 1u);
  return result;
}

uint64_t ExternalTrace::set_source(uint64_t result, int a2)
{
  uint64_t (*v2)(_QWORD, _QWORD);

  v2 = *(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(result + 16) + 264);
  if (v2)
    return v2(*(_QWORD *)(result + 24), a2 | 1u);
  return result;
}

uint64_t ExternalTrace::set_dependency(uint64_t result, int a2)
{
  uint64_t (*v2)(_QWORD, _QWORD);

  v2 = *(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(result + 16) + 272);
  if (v2)
    return v2(*(_QWORD *)(result + 24), a2 | 1u);
  return result;
}

uint64_t ExternalTrace::set_deadline(uint64_t this)
{
  _QWORD *v1;
  uint64_t (*v2)(_QWORD);

  v1 = *(_QWORD **)(this + 16);
  if (*v1 >= 3uLL)
  {
    v2 = (uint64_t (*)(_QWORD))v1[39];
    if (v2)
      return v2(*(_QWORD *)(this + 24));
  }
  return this;
}

uint64_t ExternalTrace::passed_deadline(uint64_t this)
{
  _QWORD *v1;
  uint64_t (*v2)(_QWORD);

  v1 = *(_QWORD **)(this + 16);
  if (*v1 >= 3uLL)
  {
    v2 = (uint64_t (*)(_QWORD))v1[40];
    if (v2)
      return v2(*(_QWORD *)(this + 24));
  }
  return this;
}

uint64_t ExternalTrace::mark_profile(uint64_t this, AG::Graph *a2, const char *a3)
{
  uint64_t v3;
  uint64_t (*v4)(_QWORD, uint64_t);

  if (*(_QWORD *)(*(_QWORD *)(this + 16) + 280))
  {
    v3 = this;
    this = AG::Graph::key_name(a2, a3);
    v4 = *(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)(v3 + 16) + 280);
    if (v4)
      return v4(*(_QWORD *)(v3 + 24), this);
  }
  return this;
}

uint64_t ExternalTrace::custom_event(uint64_t result, AG::Graph::Context *this, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v9;
  uint64_t (*v10)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t);

  v5 = *(_QWORD **)(result + 16);
  if (*v5)
  {
    v9 = result;
    v10 = (uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t))v5[36];
    result = AG::Graph::Context::to_cf(this);
    if (v10)
      return v10(*(_QWORD *)(v9 + 24), result, a3, a4, a5);
  }
  return result;
}

uint64_t ExternalTrace::named_event(uint64_t this, AG::Graph::Context *a2, uint64_t a3, uint64_t a4, const unsigned int *a5, const __CFData *a6, uint64_t a7)
{
  _QWORD *v7;
  uint64_t v13;
  uint64_t (*v14)(_QWORD, uint64_t, uint64_t, uint64_t, const unsigned int *, const __CFData *, uint64_t);

  v7 = *(_QWORD **)(this + 16);
  if (*v7 >= 2uLL)
  {
    v13 = this;
    v14 = (uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t, const unsigned int *, const __CFData *, uint64_t))v7[37];
    this = AG::Graph::Context::to_cf(a2);
    if (v14)
      return v14(*(_QWORD *)(v13 + 24), this, a3, a4, a5, a6, a7);
  }
  return this;
}

uint64_t ExternalTrace::named_event_enabled(ExternalTrace *this)
{
  _QWORD *v1;
  uint64_t (*v2)(_QWORD);

  v1 = (_QWORD *)*((_QWORD *)this + 2);
  if (*v1 < 2uLL)
    return 0;
  v2 = (uint64_t (*)(_QWORD))v1[38];
  if (v2)
    return v2(*((_QWORD *)this + 3));
  else
    return v1[37] != 0;
}

uint64_t ExternalTrace::compare_failed(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t (*v6)(_QWORD, uint64_t, _QWORD *);
  _QWORD v7[4];

  v7[3] = *MEMORY[0x1E0C80C00];
  v5 = *(_QWORD **)(result + 16);
  if (*v5 >= 4uLL)
  {
    v7[0] = a3;
    v7[1] = a4;
    v7[2] = a5;
    v6 = (uint64_t (*)(_QWORD, uint64_t, _QWORD *))v5[41];
    if (v6)
      return v6(*(_QWORD *)(result + 24), a2, v7);
  }
  return result;
}

CFURLRef AGDebugServerCopyURL()
{
  CFURLRef result;

  result = (CFURLRef)AG::DebugServer::_shared_server;
  if (AG::DebugServer::_shared_server)
    return AG::DebugServer::copy_url((AG::DebugServer *)AG::DebugServer::_shared_server);
  return result;
}

void AGDebugServerRun(int a1)
{
  if (AG::DebugServer::_shared_server)
    AG::DebugServer::run((AG::DebugServer *)AG::DebugServer::_shared_server, a1);
}

unint64_t AGWeakAttribute.init(_:)(uint64_t a1)
{
  if ((a1 & 0x100000000) != 0)
    LODWORD(a1) = 2;
  return AGCreateWeakAttribute(a1);
}

uint64_t AGWeakAttribute.unsafeCast<A>(to:)(uint64_t a1, uint64_t a2)
{
  return a2;
}

unint64_t AGWeakAttribute.attribute.getter(unint64_t a1)
{
  unsigned int Attribute;
  uint64_t v2;

  Attribute = AGWeakAttributeGetAttribute(a1);
  if (Attribute == 2)
    v2 = 0;
  else
    v2 = Attribute;
  return v2 | ((unint64_t)(Attribute == 2) << 32);
}

uint64_t sub_1AB957EA4@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  int v4;

  result = AGWeakAttributeGetAttribute(*a1);
  if ((_DWORD)result == 2)
    v4 = 0;
  else
    v4 = result;
  *(_DWORD *)a2 = v4;
  *(_BYTE *)(a2 + 4) = (_DWORD)result == 2;
  return result;
}

unint64_t sub_1AB957EE8(uint64_t a1, unint64_t *a2)
{
  unsigned int *v3;
  unint64_t result;

  if (*(_BYTE *)(a1 + 4))
    v3 = (unsigned int *)&AGAttributeNil;
  else
    v3 = (unsigned int *)a1;
  result = AGCreateWeakAttribute(*v3);
  *a2 = result;
  return result;
}

unint64_t AGWeakAttribute.attribute.setter(uint64_t a1)
{
  unint64_t *v1;
  unint64_t result;

  if ((a1 & 0x100000000) != 0)
    LODWORD(a1) = 2;
  result = AGCreateWeakAttribute(a1);
  *v1 = result;
  return result;
}

uint64_t (*AGWeakAttribute.attribute.modify(uint64_t a1))()
{
  unint64_t *v1;
  int Attribute;
  int v4;
  uint64_t v5;

  *(_QWORD *)a1 = v1;
  Attribute = AGWeakAttributeGetAttribute(*v1);
  if (Attribute == 2)
    v4 = 0;
  else
    v4 = Attribute;
  *(_DWORD *)(a1 + 8) = v4;
  v5 = a1 + 8;
  *(_DWORD *)(v5 + 8) = 2;
  *(_BYTE *)(v5 + 4) = Attribute == 2;
  return sub_1AB957FA8;
}

BOOL static AGWeakAttribute.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return a1 == a2;
}

uint64_t AGWeakAttribute.hash(into:)()
{
  sub_1AB9621EC();
  return sub_1AB9621EC();
}

uint64_t AGWeakAttribute.description.getter(unint64_t a1)
{
  if (AGWeakAttributeGetAttribute(a1) == 2)
    return 7104878;
  else
    return AGAttribute.description.getter();
}

uint64_t AGWeakAttribute.hashValue.getter()
{
  sub_1AB9621D4();
  sub_1AB9621EC();
  sub_1AB9621EC();
  return sub_1AB9621F8();
}

uint64_t sub_1AB958084()
{
  sub_1AB9621D4();
  sub_1AB9621EC();
  sub_1AB9621EC();
  return sub_1AB9621F8();
}

uint64_t sub_1AB9580DC()
{
  sub_1AB9621EC();
  return sub_1AB9621EC();
}

uint64_t sub_1AB958114()
{
  sub_1AB9621D4();
  sub_1AB9621EC();
  sub_1AB9621EC();
  return sub_1AB9621F8();
}

uint64_t sub_1AB958168()
{
  unint64_t *v0;

  return AGWeakAttribute.description.getter(*v0);
}

uint64_t WeakAttribute.base.setter(uint64_t result)
{
  _QWORD *v1;

  *v1 = result;
  return result;
}

uint64_t (*WeakAttribute.base.modify())()
{
  return nullsub_1;
}

uint64_t WeakAttribute.init()()
{
  return 0;
}

unint64_t WeakAttribute.init(_:)(uint64_t a1)
{
  if ((a1 & 0x100000000) != 0)
    LODWORD(a1) = 2;
  return AGCreateWeakAttribute(a1);
}

unint64_t WeakAttribute.attribute.getter(unint64_t a1)
{
  unsigned int Attribute;
  uint64_t v2;

  Attribute = AGWeakAttributeGetAttribute(a1);
  if (Attribute == 2)
    v2 = 0;
  else
    v2 = Attribute;
  return v2 | ((unint64_t)(Attribute == 2) << 32);
}

uint64_t (*WeakAttribute.attribute.modify(uint64_t a1))()
{
  unint64_t *v1;
  int Attribute;
  int v4;
  uint64_t v5;

  *(_QWORD *)a1 = v1;
  Attribute = AGWeakAttributeGetAttribute(*v1);
  if (Attribute == 2)
    v4 = 0;
  else
    v4 = Attribute;
  *(_DWORD *)(a1 + 8) = v4;
  v5 = a1 + 8;
  *(_DWORD *)(v5 + 8) = 2;
  *(_BYTE *)(v5 + 4) = Attribute == 2;
  return sub_1AB957FA8;
}

uint64_t WeakAttribute.value.getter@<X0>(unint64_t a1@<X0>, AG::swift::metadata *a2@<X1>, uint64_t a3@<X8>)
{
  char *WeakValue;
  uint64_t v6;
  uint64_t v7;

  WeakValue = AGGraphGetWeakValue(a1, 0, a2);
  v6 = *((_QWORD *)a2 - 1);
  if (WeakValue)
  {
    (*(void (**)(uint64_t, char *, AG::swift::metadata *))(v6 + 16))(a3, WeakValue, a2);
    v7 = 0;
  }
  else
  {
    v7 = 1;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, AG::swift::metadata *))(v6 + 56))(a3, v7, 1, a2);
}

uint64_t WeakAttribute.changedValue(options:)@<X0>(char a1@<W0>, unint64_t a2@<X1>, AG::swift::metadata *a3@<X2>, uint64_t a4@<X8>)
{
  char *WeakValue;
  char v7;
  char *v8;
  char v9;
  uint64_t TupleTypeMetadata2;
  uint64_t v11;
  uint64_t (*v12)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  WeakValue = AGGraphGetWeakValue(a2, a1, a3);
  if (WeakValue)
  {
    v8 = WeakValue;
    v9 = v7;
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    v11 = *(int *)(TupleTypeMetadata2 + 48);
    (*(void (**)(uint64_t, char *, AG::swift::metadata *))(*((_QWORD *)a3 - 1) + 16))(a4, v8, a3);
    *(_BYTE *)(a4 + v11) = v9 & 1;
    v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(TupleTypeMetadata2 - 8) + 56);
    v13 = a4;
    v14 = 0;
    v15 = TupleTypeMetadata2;
  }
  else
  {
    v15 = swift_getTupleTypeMetadata2();
    v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56);
    v13 = a4;
    v14 = 1;
  }
  return v12(v13, v14, 1, v15);
}

uint64_t WeakAttribute.wrappedValue.getter@<X0>(unint64_t a1@<X0>, AG::swift::metadata *a2@<X1>, uint64_t a3@<X8>)
{
  char *WeakValue;
  uint64_t v6;
  uint64_t v7;

  WeakValue = AGGraphGetWeakValue(a1, 0, a2);
  v6 = *((_QWORD *)a2 - 1);
  if (WeakValue)
  {
    (*(void (**)(uint64_t, char *, AG::swift::metadata *))(v6 + 16))(a3, WeakValue, a2);
    v7 = 0;
  }
  else
  {
    v7 = 1;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, AG::swift::metadata *))(v6 + 56))(a3, v7, 1, a2);
}

unint64_t WeakAttribute.projectedValue.getter(unint64_t a1)
{
  unsigned int Attribute;
  uint64_t v2;

  Attribute = AGWeakAttributeGetAttribute(a1);
  if (Attribute == 2)
    v2 = 0;
  else
    v2 = Attribute;
  return v2 | ((unint64_t)(Attribute == 2) << 32);
}

unint64_t _s14AttributeGraph04WeakA0V9attributeAA0A0VyxGSgvs_0(uint64_t a1)
{
  unint64_t *v1;
  unint64_t result;

  if ((a1 & 0x100000000) != 0)
    LODWORD(a1) = 2;
  result = AGCreateWeakAttribute(a1);
  *v1 = result;
  return result;
}

uint64_t (*WeakAttribute.projectedValue.modify(uint64_t a1))()
{
  unint64_t *v1;
  int Attribute;
  int v4;
  uint64_t v5;

  *(_QWORD *)a1 = v1;
  Attribute = AGWeakAttributeGetAttribute(*v1);
  if (Attribute == 2)
    v4 = 0;
  else
    v4 = Attribute;
  *(_DWORD *)(a1 + 8) = v4;
  v5 = a1 + 8;
  *(_DWORD *)(v5 + 8) = 2;
  *(_BYTE *)(v5 + 4) = Attribute == 2;
  return sub_1AB957FA8;
}

unint64_t sub_1AB9584E4(uint64_t a1)
{
  unsigned int *v1;
  unint64_t *v2;
  unint64_t result;

  v1 = (unsigned int *)(a1 + 8);
  v2 = *(unint64_t **)a1;
  if (*(_BYTE *)(a1 + 12))
    v1 = (unsigned int *)(a1 + 16);
  result = AGCreateWeakAttribute(*v1);
  *v2 = result;
  return result;
}

unint64_t WeakAttribute.subscript.getter(_QWORD *a1, unint64_t a2)
{
  uint64_t v3;
  uint64_t Attribute;
  unsigned int OffsetAttribute2;
  const char *v6;
  char v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  int v20;
  _QWORD *v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v3 = *a1;
  Attribute = AGWeakAttributeGetAttribute(a2);
  if ((_DWORD)Attribute == 2)
  {
    OffsetAttribute2 = 0;
  }
  else
  {
    v6 = (const char *)sub_1AB962138();
    if ((v7 & 1) != 0)
    {
      v20 = Attribute;
      v21 = a1;
      MEMORY[0x1E0C80A78](v6);
      v8 = (uint64_t *)(v3 + *MEMORY[0x1E0DEE2A8]);
      v16 = v8[1];
      v17 = type metadata accessor for Focus(0, *v8, v16, v9);
      v18 = MEMORY[0x1AF431BE0](&protocol conformance descriptor for Focus<A, B>, v17);
      v12 = type metadata accessor for Attribute(0, v16, v10, v11);
      swift_retain();
      sub_1AB9587C0((uint64_t)&v20, (uint64_t)sub_1AB958FBC, (uint64_t)&v15, v17, MEMORY[0x1E0DEDCE8], v12, MEMORY[0x1E0DEDD18], v13);
      swift_release();
      OffsetAttribute2 = v19;
    }
    else
    {
      OffsetAttribute2 = AGGraphCreateOffsetAttribute2(Attribute, v6, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*MEMORY[0x1E0DEE2A8] + v3 + 8) - 8) + 64));
    }
  }
  return OffsetAttribute2 | ((unint64_t)((_DWORD)Attribute == 2) << 32);
}

uint64_t WeakAttribute.hash(into:)()
{
  sub_1AB9621EC();
  return sub_1AB9621EC();
}

uint64_t WeakAttribute.hashValue.getter()
{
  sub_1AB9621D4();
  sub_1AB9621EC();
  sub_1AB9621EC();
  return sub_1AB9621F8();
}

uint64_t sub_1AB95875C()
{
  return WeakAttribute.hashValue.getter();
}

uint64_t sub_1AB958764()
{
  sub_1AB9621D4();
  sub_1AB9621EC();
  sub_1AB9621EC();
  return sub_1AB9621F8();
}

uint64_t sub_1AB9587AC()
{
  _QWORD *v0;

  return WeakAttribute.description.getter(*v0);
}

BOOL sub_1AB9587B4(uint64_t *a1, uint64_t *a2)
{
  return static WeakAttribute.== infix(_:_:)(*a1, *a2);
}

uint64_t sub_1AB9587C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t (*v15)(uint64_t, char *);
  uint64_t result;
  uint64_t v17;

  v11 = *(_QWORD *)(a5 - 8);
  v12 = MEMORY[0x1E0C80A78]();
  v14 = (char *)&v17 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = v15(v12, v14);
  if (v8)
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v11 + 32))(a8, v14, a5);
  return result;
}

uint64_t sub_1AB95884C()
{
  return sub_1AB962204();
}

uint64_t sub_1AB958854(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  int v4;
  char v5;
  int v6;
  char v7;

  v6 = 0;
  v7 = 1;
  result = MEMORY[0x1AF431340](a1, &v6);
  v4 = v6;
  v5 = v7;
  if (v7)
    v4 = 0;
  *(_DWORD *)a2 = v4;
  *(_BYTE *)(a2 + 4) = v5;
  return result;
}

uint64_t sub_1AB9588A4(uint64_t a1, uint64_t a2)
{
  char v3;

  v3 = sub_1AB96221C();
  *(_DWORD *)a2 = 0;
  *(_BYTE *)(a2 + 4) = 1;
  return v3 & 1;
}

uint64_t sub_1AB9588F8@<X0>(_DWORD *a1@<X8>)
{
  uint64_t result;

  result = sub_1AB962228();
  *a1 = result;
  return result;
}

_DWORD *sub_1AB95891C@<X0>(_DWORD *result@<X0>, int *a2@<X8>)
{
  _DWORD *v2;

  *a2 = *v2 & *result;
  return result;
}

_DWORD *sub_1AB958930@<X0>(_DWORD *result@<X0>, int *a2@<X8>)
{
  _DWORD *v2;

  *a2 = *v2 ^ *result;
  return result;
}

_DWORD *sub_1AB958944(_DWORD *result)
{
  _DWORD *v1;

  *v1 |= *result;
  return result;
}

_DWORD *sub_1AB958958(_DWORD *result)
{
  _DWORD *v1;

  *v1 &= *result;
  return result;
}

_DWORD *sub_1AB95896C(_DWORD *result)
{
  _DWORD *v1;

  *v1 ^= *result;
  return result;
}

uint64_t sub_1AB958980(uint64_t a1, uint64_t a2)
{
  return sub_1AB958AC8(a1, a2, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB1940]);
}

uint64_t sub_1AB95898C(uint64_t a1, id *a2)
{
  uint64_t result;

  result = sub_1AB9620CC();
  *a2 = 0;
  return result;
}

uint64_t sub_1AB958A00(uint64_t a1, id *a2)
{
  char v3;

  v3 = sub_1AB9620D8();
  *a2 = 0;
  return v3 & 1;
}

uint64_t sub_1AB958A7C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;

  sub_1AB9620E4();
  v2 = sub_1AB9620C0();
  result = swift_bridgeObjectRelease();
  *a1 = v2;
  return result;
}

uint64_t sub_1AB958ABC(uint64_t a1, uint64_t a2)
{
  return sub_1AB958AC8(a1, a2, MEMORY[0x1E0DEA950]);
}

uint64_t sub_1AB958AC8(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v4;
  uint64_t v5;

  v4 = sub_1AB9620E4();
  v5 = a3(v4);
  swift_bridgeObjectRelease();
  return v5;
}

uint64_t sub_1AB958B04()
{
  sub_1AB9620E4();
  sub_1AB9620FC();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1AB958B44()
{
  uint64_t v0;

  sub_1AB9620E4();
  sub_1AB9621D4();
  sub_1AB9620FC();
  v0 = sub_1AB9621F8();
  swift_bridgeObjectRelease();
  return v0;
}

BOOL sub_1AB958BB4(_QWORD *a1, _QWORD *a2)
{
  return *a1 == *a2;
}

_DWORD *sub_1AB958BC8@<X0>(_DWORD *result@<X0>, uint64_t a2@<X8>)
{
  *(_DWORD *)a2 = *result;
  *(_BYTE *)(a2 + 4) = 0;
  return result;
}

void sub_1AB958BD8(_DWORD *a1@<X8>)
{
  _DWORD *v1;

  *a1 = *v1;
}

uint64_t sub_1AB958BE4()
{
  sub_1AB9335D8(&qword_1EEC359D8, (uint64_t (*)(uint64_t))type metadata accessor for AnyAttribute, (uint64_t)&protocol conformance descriptor for AGAttribute);
  sub_1AB9335D8(&qword_1EEC359E0, (uint64_t (*)(uint64_t))type metadata accessor for AnyAttribute, (uint64_t)&unk_1AB96343C);
  return sub_1AB962174();
}

void sub_1AB958C78(_DWORD *a1@<X8>)
{
  *a1 = 0;
}

_DWORD *sub_1AB958C80@<X0>(_DWORD *result@<X0>, int *a2@<X8>)
{
  _DWORD *v2;

  *a2 = *v2 | *result;
  return result;
}

BOOL sub_1AB958C94(_DWORD *a1, int *a2)
{
  _DWORD *v2;
  int v3;
  int v4;

  v3 = *a2;
  v4 = *v2 & *a2;
  if (v4 != *a2)
    *v2 |= v3;
  *a1 = v3;
  return v4 != v3;
}

_DWORD *sub_1AB958CC4@<X0>(_DWORD *result@<X0>, uint64_t a2@<X8>)
{
  _DWORD *v2;
  int v3;

  v3 = *v2 & *result;
  if (v3)
    *v2 &= ~*result;
  *(_DWORD *)a2 = v3;
  *(_BYTE *)(a2 + 4) = v3 == 0;
  return result;
}

int *sub_1AB958CF0@<X0>(int *result@<X0>, uint64_t a2@<X8>)
{
  int *v2;
  int v3;
  int v4;
  int v5;

  v3 = *result;
  v4 = *v2;
  *v2 |= *result;
  v5 = v4 & v3;
  *(_DWORD *)a2 = v5;
  *(_BYTE *)(a2 + 4) = v5 == 0;
  return result;
}

_DWORD *sub_1AB958D14@<X0>(_DWORD *result@<X0>, int *a2@<X8>)
{
  _DWORD *v2;

  *a2 = *v2 & ~*result;
  return result;
}

BOOL sub_1AB958D28(_DWORD *a1)
{
  _DWORD *v1;

  return (*v1 & ~*a1) == 0;
}

BOOL sub_1AB958D3C(_DWORD *a1)
{
  _DWORD *v1;

  return (*v1 & *a1) == 0;
}

BOOL sub_1AB958D50(_DWORD *a1)
{
  _DWORD *v1;

  return (*a1 & ~*v1) == 0;
}

BOOL sub_1AB958D64()
{
  _DWORD *v0;

  return *v0 == 0;
}

uint64_t sub_1AB958D74()
{
  return sub_1AB962144();
}

_DWORD *sub_1AB958D8C(_DWORD *result)
{
  _DWORD *v1;

  *v1 &= ~*result;
  return result;
}

uint64_t sub_1AB958DA0(uint64_t a1)
{
  MEMORY[0x1AF431BE0](&unk_1AB963500, a1);
  return sub_1AB962084();
}

uint64_t sub_1AB958DDC()
{
  MEMORY[0x1AF431BE0](&unk_1AB963500);
  return sub_1AB962078();
}

uint64_t sub_1AB958E24(uint64_t a1, uint64_t a2)
{
  sub_1AB9621D4();
  MEMORY[0x1AF431BE0](&unk_1AB963500, a2);
  sub_1AB962078();
  return sub_1AB9621F8();
}

uint64_t sub_1AB958E7C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v5;

  v0 = sub_1AB9620E4();
  v2 = v1;
  if (v0 == sub_1AB9620E4() && v2 == v3)
    v5 = 1;
  else
    v5 = sub_1AB962198();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v5 & 1;
}

_QWORD *sub_1AB958F04@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = *result;
  return result;
}

void sub_1AB958F10(_QWORD *a1@<X8>)
{
  _QWORD *v1;

  *a1 = *v1;
}

uint64_t sub_1AB958F1C()
{
  sub_1AB9335D8(&qword_1EEC359C0, (uint64_t (*)(uint64_t))type metadata accessor for Metadata, (uint64_t)&protocol conformance descriptor for AGTypeID);
  sub_1AB9335D8(&qword_1EEC359C8, (uint64_t (*)(uint64_t))type metadata accessor for Metadata, (uint64_t)&unk_1AB963594);
  sub_1AB95955C();
  return sub_1AB962174();
}

uint64_t sub_1AB958FBC@<X0>(void *a1@<X0>, _DWORD *a2@<X8>)
{
  uint64_t v2;

  return sub_1AB959A18(a1, *(_QWORD *)(v2 + 16), *(uint64_t **)(v2 + 24), *(_QWORD *)(v2 + 32), a2);
}

uint64_t sub_1AB958FDC()
{
  return sub_1AB9335D8(&qword_1EEC35930, (uint64_t (*)(uint64_t))type metadata accessor for AnyWeakAttribute, (uint64_t)&protocol conformance descriptor for AGWeakAttribute);
}

void sub_1AB959008()
{
  JUMPOUT(0x1AF431BE0);
}

uint64_t sub_1AB959018()
{
  return 8;
}

_QWORD *sub_1AB959024(_QWORD *result, _QWORD *a2)
{
  *a2 = *result;
  return result;
}

uint64_t sub_1AB959030()
{
  return 8;
}

uint64_t sub_1AB95903C(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 8))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

__n128 __swift_memcpy16_8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  *a1 = *a2;
  return result;
}

uint64_t sub_1AB959068(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 16))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t sub_1AB959088(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)result = (a2 - 1);
    *(_QWORD *)(result + 8) = 0;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 16) = v3;
  return result;
}

void type metadata accessor for Nodes(uint64_t a1)
{
  sub_1AB9337A8(a1, &qword_1EEC35938);
}

_QWORD *__swift_memcpy8_8(_QWORD *result, _QWORD *a2)
{
  *result = *a2;
  return result;
}

void type metadata accessor for TreeValue(uint64_t a1)
{
  sub_1AB9337A8(a1, &qword_1EEC35940);
}

void type metadata accessor for Values(uint64_t a1)
{
  sub_1AB9337A8(a1, &qword_1EEC35948);
}

void type metadata accessor for TreeElement(uint64_t a1)
{
  sub_1AB9337A8(a1, &qword_1EEC35950);
}

__n128 __swift_memcpy24_8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

uint64_t sub_1AB959128(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 24))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t sub_1AB959148(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 24) = v3;
  return result;
}

void type metadata accessor for Children(uint64_t a1)
{
  sub_1AB9337A8(a1, &qword_1EEC35958);
}

__n128 __swift_memcpy20_1(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u32[0] = a2[1].n128_u32[0];
  *a1 = result;
  return result;
}

uint64_t sub_1AB95919C(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 20))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t sub_1AB9591BC(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_DWORD *)(result + 16) = 0;
    *(_QWORD *)result = (a2 - 1);
    *(_QWORD *)(result + 8) = 0;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 20) = v3;
  return result;
}

void type metadata accessor for Signature(uint64_t a1)
{
  sub_1AB9337A8(a1, &qword_1EEC35960);
}

uint64_t sub_1AB9591FC(uint64_t a1, int a2)
{
  int v3;

  if (!a2)
    return 0;
  if (a2 != 1 && *(_BYTE *)(a1 + 8))
    return (*(_DWORD *)a1 + 2);
  if (*(_QWORD *)a1)
    v3 = -1;
  else
    v3 = 0;
  return (v3 + 1);
}

uint64_t sub_1AB959240(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 1)
  {
    *(_QWORD *)result = a2 - 2;
    if (a3 >= 2)
      *(_BYTE *)(result + 8) = 1;
  }
  else
  {
    if (a3 >= 2)
      *(_BYTE *)(result + 8) = 0;
    if (a2)
      *(_QWORD *)result = 0;
  }
  return result;
}

void type metadata accessor for Graph(uint64_t a1)
{
  sub_1AB9337A8(a1, &qword_1EEC35968);
}

void type metadata accessor for AGDescriptionOption(uint64_t a1)
{
  sub_1AB9337A8(a1, &qword_1EEC35970);
}

uint64_t sub_1AB9592A4@<X0>(uint64_t a1@<X0>, _DWORD *a2@<X8>)
{
  int v3;
  uint64_t result;

  v3 = sub_1AB9595EC(a1);
  result = swift_bridgeObjectRelease();
  *a2 = v3;
  return result;
}

uint64_t sub_1AB9592E0@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;

  v2 = sub_1AB9620C0();
  result = swift_bridgeObjectRelease();
  *a1 = v2;
  return result;
}

uint64_t sub_1AB959324@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = sub_1AB9620E4();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_1AB95934C()
{
  sub_1AB9335D8((unint64_t *)&qword_1EEC359E8, (uint64_t (*)(uint64_t))type metadata accessor for AGDescriptionOption, (uint64_t)&unk_1AB96365C);
  sub_1AB9335D8(&qword_1EEC359F0, (uint64_t (*)(uint64_t))type metadata accessor for AGDescriptionOption, (uint64_t)&unk_1AB9631C0);
  return sub_1AB962174();
}

uint64_t sub_1AB9593D0()
{
  return sub_1AB9335D8(&qword_1EEC35978, (uint64_t (*)(uint64_t))type metadata accessor for AGDescriptionOption, (uint64_t)&unk_1AB963184);
}

uint64_t sub_1AB9593FC()
{
  return sub_1AB9335D8(&qword_1EEC35980, (uint64_t (*)(uint64_t))type metadata accessor for AGDescriptionOption, (uint64_t)&unk_1AB963158);
}

uint64_t sub_1AB959428()
{
  return sub_1AB9335D8(&qword_1EEC35988, (uint64_t (*)(uint64_t))type metadata accessor for AnyAttribute, (uint64_t)&unk_1AB963400);
}

uint64_t sub_1AB959454()
{
  return sub_1AB9335D8(&qword_1EEC35990, (uint64_t (*)(uint64_t))type metadata accessor for AnyAttribute, (uint64_t)&unk_1AB9633D4);
}

uint64_t sub_1AB959480()
{
  return sub_1AB9335D8(&qword_1EEC35998, (uint64_t (*)(uint64_t))type metadata accessor for Graph, (uint64_t)&protocol conformance descriptor for AGGraphRef);
}

uint64_t sub_1AB9594AC()
{
  return sub_1AB9335D8(&qword_1EEC359A0, (uint64_t (*)(uint64_t))type metadata accessor for Graph, (uint64_t)&unk_1AB9634BC);
}

uint64_t sub_1AB9594D8()
{
  return sub_1AB9335D8(&qword_1EEC359A8, (uint64_t (*)(uint64_t))type metadata accessor for Metadata, (uint64_t)&unk_1AB963558);
}

uint64_t sub_1AB959504()
{
  return sub_1AB9335D8(&qword_1EEC359B0, (uint64_t (*)(uint64_t))type metadata accessor for Metadata, (uint64_t)&unk_1AB96352C);
}

uint64_t sub_1AB959530()
{
  return sub_1AB9335D8(&qword_1EEC359B8, (uint64_t (*)(uint64_t))type metadata accessor for AGDescriptionOption, (uint64_t)&unk_1AB9631F4);
}

unint64_t sub_1AB95955C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1EEC359D0;
  if (!qword_1EEC359D0)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1ECEF2CC0);
    result = MEMORY[0x1AF431BE0](MEMORY[0x1E0DEA550], v1);
    atomic_store(result, (unint64_t *)&qword_1EEC359D0);
  }
  return result;
}

uint64_t __swift_instantiateConcreteTypeFromMangledNameAbstract(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result < 0)
  {
    result = MEMORY[0x1AF431BC8](255, (char *)a1 + (int)result, -(result >> 32), 0, 0);
    *a1 = result;
  }
  return result;
}

uint64_t sub_1AB9595EC(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  int *v3;
  int v4;
  int v5;

  v1 = *(_QWORD *)(result + 16);
  if (!v1)
    return 0;
  v2 = result;
  LODWORD(result) = 0;
  v3 = (int *)(v2 + 32);
  do
  {
    v5 = *v3++;
    v4 = v5;
    if ((v5 & ~(_DWORD)result) == 0)
      v4 = 0;
    result = v4 | result;
    --v1;
  }
  while (v1);
  return result;
}

void type metadata accessor for _Metadata(uint64_t a1)
{
  sub_1AB9337A8(a1, &qword_1ECEF2CC8);
}

void type metadata accessor for AnyWeakAttribute.__Unnamed_struct__details(uint64_t a1)
{
  sub_1AB9337A8(a1, &qword_1ECEF2CB0);
}

__n128 __swift_memcpy48_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v3;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t sub_1AB959660(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 48))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t sub_1AB9596BC(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 48) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 48) = 0;
    if (a2)
      *(_QWORD *)(result + 8) = a2;
  }
  return result;
}

void type metadata accessor for _AttributeVTable(uint64_t a1)
{
  sub_1AB9337A8(a1, &qword_1ECEF2CD0);
}

uint64_t sub_1AB959730(uint64_t a1, int a2)
{
  int v3;

  if (!a2)
    return 0;
  if (a2 != 1 && *(_BYTE *)(a1 + 16))
    return (*(_DWORD *)a1 + 2);
  if (*(_QWORD *)a1)
    v3 = -1;
  else
    v3 = 0;
  return (v3 + 1);
}

uint64_t sub_1AB959774(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 1)
  {
    *(_QWORD *)result = a2 - 2;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 2)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if (a3 >= 2)
      *(_BYTE *)(result + 16) = 0;
    if (a2)
      *(_QWORD *)result = 0;
  }
  return result;
}

void type metadata accessor for _AGClosureStorage(uint64_t a1)
{
  sub_1AB9337A8(a1, &qword_1EEC359F8);
}

uint64_t sub_1AB9597C4(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a2;
  *a1 = *a2;
  v3 = v2 + 16;
  swift_retain();
  return v3;
}

__n128 __swift_memcpy56_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t sub_1AB959810(uint64_t a1, int a2)
{
  int v3;

  if (!a2)
    return 0;
  if (a2 != 1 && *(_BYTE *)(a1 + 56))
    return (*(_DWORD *)a1 + 2);
  if (*(_QWORD *)a1)
    v3 = -1;
  else
    v3 = 0;
  return (v3 + 1);
}

uint64_t sub_1AB959854(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 1)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 - 2;
    if (a3 >= 2)
      *(_BYTE *)(result + 56) = 1;
  }
  else
  {
    if (a3 >= 2)
      *(_BYTE *)(result + 56) = 0;
    if (a2)
      *(_QWORD *)result = 0;
  }
  return result;
}

void type metadata accessor for _AttributeType(uint64_t a1)
{
  sub_1AB9337A8(a1, &qword_1EEC35A00);
}

uint64_t sub_1AB9598F0@<X0>(uint64_t a1@<X8>)
{
  uint64_t AssociatedTypeWitness;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 56))(a1, 1, 1, AssociatedTypeWitness);
}

uint64_t static Rule.initialValue.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t AssociatedTypeWitness;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 56))(a1, 1, 1, AssociatedTypeWitness);
}

uint64_t Attribute.init<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[7];
  unsigned int v10;

  v9[2] = a2;
  v9[3] = a3;
  v9[4] = a4;
  v6 = type metadata accessor for Attribute(0, a2, a3, a4);
  sub_1AB9587C0(a1, (uint64_t)sub_1AB959A9C, (uint64_t)v9, a3, MEMORY[0x1E0DEDCE8], v6, MEMORY[0x1E0DEDD18], v7);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 8))(a1, a3);
  return v10;
}

{
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[7];
  unsigned int v10;

  v9[2] = a2;
  v9[3] = a3;
  v9[4] = a4;
  v6 = type metadata accessor for Attribute(0, a2, a3, a4);
  sub_1AB9587C0(a1, (uint64_t)sub_1AB95A9C4, (uint64_t)v9, a3, MEMORY[0x1E0DEDCE8], v6, MEMORY[0x1E0DEDD18], v7);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 8))(a1, a3);
  return v10;
}

uint64_t sub_1AB959A18@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X3>, _DWORD *a5@<X8>)
{
  uint64_t v9;
  uint64_t result;
  _QWORD v11[6];

  v11[2] = a2;
  v11[3] = a3;
  v11[4] = a4;
  v9 = sub_1AB933748();
  result = Attribute.init<A>(body:value:flags:update:)(a1, 0, v9, (uint64_t)sub_1AB95A7F0, (uint64_t)v11, a2, a3);
  *a5 = result;
  return result;
}

uint64_t sub_1AB959A9C@<X0>(void *a1@<X0>, _DWORD *a2@<X8>)
{
  _QWORD *v2;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  _QWORD v10[6];

  v5 = v2[2];
  v6 = (uint64_t *)v2[3];
  v7 = v2[4];
  v10[2] = v5;
  v10[3] = v6;
  v10[4] = v7;
  v8 = sub_1AB933748();
  result = Attribute.init<A>(body:value:flags:update:)(a1, 0, v8, (uint64_t)sub_1AB95A7F0, (uint64_t)v10, v5, v6);
  *a2 = result;
  return result;
}

uint64_t static Rule._update(_:attribute:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t AssociatedTypeWitness;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  _BYTE v16[16];
  _BYTE v17[16];
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v7 = *(_QWORD *)(a3 - 8);
  MEMORY[0x1E0C80A78](a1);
  v9 = &v16[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v11 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v13 = &v16[-v12];
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v7 + 16))(v9, a1, a3);
  (*(void (**)(uint64_t, uint64_t))(a4 + 32))(a3, a4);
  (*(void (**)(_BYTE *, uint64_t))(v7 + 8))(v9, a3);
  v18 = a3;
  v19 = a4;
  sub_1AB9587C0((uint64_t)v13, (uint64_t)sub_1AB95A114, (uint64_t)v17, AssociatedTypeWitness, MEMORY[0x1E0DEDCE8], MEMORY[0x1E0DEE9C0] + 8, MEMORY[0x1E0DEDD18], v14);
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v11 + 8))(v13, AssociatedTypeWitness);
}

uint64_t Attribute.init<A>(_:initialValue:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[7];
  unsigned int v13;

  v12[2] = a3;
  v12[3] = a4;
  v12[4] = a5;
  v12[5] = a2;
  v9 = type metadata accessor for Attribute(0, a3, a3, a4);
  sub_1AB9587C0(a1, (uint64_t)sub_1AB95A128, (uint64_t)v12, a4, MEMORY[0x1E0DEDCE8], v9, MEMORY[0x1E0DEDD18], v10);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a4 - 8) + 8))(a1, a4);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 8))(a2, a3);
  return v13;
}

{
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[7];
  unsigned int v13;

  v12[2] = a3;
  v12[3] = a4;
  v12[4] = a5;
  v12[5] = a2;
  v9 = type metadata accessor for Attribute(0, a3, a3, a4);
  sub_1AB9587C0(a1, (uint64_t)sub_1AB95ABA4, (uint64_t)v12, a4, MEMORY[0x1E0DEDCE8], v9, MEMORY[0x1E0DEDD18], v10);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a4 - 8) + 8))(a1, a4);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 8))(a2, a3);
  return v13;
}

uint64_t sub_1AB959D38(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[6];

  v10[2] = a3;
  v10[3] = a4;
  v10[4] = a5;
  v10[5] = a1;
  v7 = type metadata accessor for Attribute(0, a3, a3, a4);
  return sub_1AB9587C0(a2, (uint64_t)sub_1AB95A6E8, (uint64_t)v10, a3, MEMORY[0x1E0DEDCE8], v7, MEMORY[0x1E0DEDD18], v8);
}

uint64_t sub_1AB959DB8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  uint64_t v19;
  _BYTE v21[16];
  _BYTE v22[16];
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v11 = *(_QWORD *)(a5 - 8);
  v12 = MEMORY[0x1E0C80A78](a1);
  v14 = &v21[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v16 = *(_QWORD *)(v15 - 8);
  MEMORY[0x1E0C80A78](v12);
  v18 = &v21[-((v17 + 15) & 0xFFFFFFFFFFFFFFF0)];
  (*(void (**)(_BYTE *))(v11 + 16))(v14);
  (*(void (**)(uint64_t, uint64_t))(a6 + 32))(a5, a6);
  (*(void (**)(_BYTE *, uint64_t))(v11 + 8))(v14, a5);
  v23 = a5;
  v24 = a6;
  sub_1AB9587C0((uint64_t)v18, a7, (uint64_t)v22, a4, MEMORY[0x1E0DEDCE8], MEMORY[0x1E0DEE9C0] + 8, MEMORY[0x1E0DEDD18], v19);
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v16 + 8))(v18, a4);
}

uint64_t Rule.attribute.getter()
{
  uint64_t result;

  result = AGGraphGetCurrentAttribute();
  if ((_DWORD)result == 2)
    __break(1u);
  return result;
}

uint64_t Rule.context.getter()
{
  uint64_t result;

  result = AGGraphGetCurrentAttribute();
  if ((_DWORD)result == 2)
    __break(1u);
  return result;
}

uint64_t static Rule._updateDefault(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v15;
  uint64_t v16;
  _QWORD v17[2];

  v17[1] = *MEMORY[0x1E0C80C00];
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v6 = sub_1AB962120();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = MEMORY[0x1E0C80A78](v6);
  v10 = (char *)v17 - v9;
  v11 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](v8);
  v13 = (char *)v17 - v12;
  (*(void (**)(uint64_t, uint64_t))(a3 + 24))(a2, a3);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v10, 1, AssociatedTypeWitness) == 1)
    return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v10, v6);
  v15 = (*(uint64_t (**)(char *, char *, uint64_t))(v11 + 32))(v13, v10, AssociatedTypeWitness);
  MEMORY[0x1E0C80A78](v15);
  v17[-2] = a2;
  v17[-1] = a3;
  sub_1AB9587C0((uint64_t)v13, (uint64_t)sub_1AB95A114, (uint64_t)&v17[-4], AssociatedTypeWitness, MEMORY[0x1E0DEDCE8], MEMORY[0x1E0DEE9C0] + 8, MEMORY[0x1E0DEDD18], v16);
  return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v13, AssociatedTypeWitness);
}

uint64_t sub_1AB95A114(unsigned __int8 *a1)
{
  return sub_1AB95A84C(a1);
}

uint64_t sub_1AB95A128(uint64_t a1)
{
  uint64_t *v1;

  return sub_1AB959D38(a1, v1[5], v1[2], v1[3], v1[4]);
}

uint64_t Rule<>.cachedValue(options:owner:)(int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t AssociatedTypeWitness;
  uint64_t v8;
  _QWORD v10[5];
  int v11;
  int v12;
  char v13;

  v10[2] = a3;
  v10[3] = a4;
  v10[4] = a5;
  v11 = a1;
  v12 = a2;
  v13 = BYTE4(a2) & 1;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  return sub_1AB9587C0(v5, (uint64_t)sub_1AB95A5FC, (uint64_t)v10, a3, MEMORY[0x1E0DEDCE8], AssociatedTypeWitness, MEMORY[0x1E0DEDD18], v8);
}

uint64_t sub_1AB95A1E0@<X0>(const void *a1@<X0>, char a2@<W1>, unint64_t a3@<X2>, uint64_t *a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X8>)
{
  const char *v14;
  char *v15;
  uint64_t AssociatedTypeWitness;
  _BYTE v18[16];
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;

  v14 = (const char *)sub_1AB96209C();
  v19 = a4;
  v20 = a5;
  v21 = a6;
  v15 = static Rule<>._cachedValue(options:owner:hashValue:bodyPtr:update:)(a2, a3 | ((HIDWORD(a3) & 1) << 32), v14, a1, (uint64_t)sub_1AB95A680, (uint64_t)v18, a4, a5, a6);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 16))(a7, v15, AssociatedTypeWitness);
}

uint64_t sub_1AB95A2CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t AssociatedTypeWitness;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  _BYTE v17[16];
  _BYTE v18[16];
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v8 = *(_QWORD *)(a4 - 8);
  MEMORY[0x1E0C80A78](a1);
  v10 = &v17[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v12 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v14 = &v17[-v13];
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v8 + 16))(v10, a1, a4);
  (*(void (**)(uint64_t, uint64_t))(a5 + 32))(a4, a5);
  (*(void (**)(_BYTE *, uint64_t))(v8 + 8))(v10, a4);
  v19 = a4;
  v20 = a5;
  sub_1AB9587C0((uint64_t)v14, (uint64_t)sub_1AB95A114, (uint64_t)v18, AssociatedTypeWitness, MEMORY[0x1E0DEDCE8], MEMORY[0x1E0DEE9C0] + 8, MEMORY[0x1E0DEDD18], v15);
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v12 + 8))(v14, AssociatedTypeWitness);
}

uint64_t Rule<>.cachedValueIfExists(options:owner:)(int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[5];
  int v11;
  int v12;
  char v13;

  v10[2] = a3;
  v10[3] = a4;
  v10[4] = a5;
  v11 = a1;
  v12 = a2;
  v13 = BYTE4(a2) & 1;
  swift_getAssociatedTypeWitness();
  v7 = sub_1AB962120();
  return sub_1AB9587C0(v5, (uint64_t)sub_1AB95A63C, (uint64_t)v10, a3, MEMORY[0x1E0DEDCE8], v7, MEMORY[0x1E0DEDD18], v8);
}

uint64_t sub_1AB95A4DC@<X0>(const void *a1@<X0>, char a2@<W2>, uint64_t a3@<X3>, uint64_t *a4@<X4>, uint64_t a5@<X8>)
{
  const char *v10;
  AG::swift::metadata *AssociatedTypeWitness;
  int v12;
  char *CachedAttributeIfExists;
  uint64_t v14;
  uint64_t v15;

  v10 = (const char *)sub_1AB96209C();
  if ((a3 & 0x100000000) != 0)
    LODWORD(a3) = 2;
  AssociatedTypeWitness = (AG::swift::metadata *)swift_getAssociatedTypeWitness();
  CachedAttributeIfExists = AGGraphReadCachedAttributeIfExists(v10, a4, a1, AssociatedTypeWitness, a2, a3, 0, v12);
  v14 = *((_QWORD *)AssociatedTypeWitness - 1);
  if (CachedAttributeIfExists)
  {
    (*(void (**)(uint64_t, char *, AG::swift::metadata *))(v14 + 16))(a5, CachedAttributeIfExists, AssociatedTypeWitness);
    v15 = 0;
  }
  else
  {
    v15 = 1;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, AG::swift::metadata *))(v14 + 56))(a5, v15, 1, AssociatedTypeWitness);
}

uint64_t sub_1AB95A5E0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 24) - 8) + 56))(a2, 1, 1);
}

uint64_t sub_1AB95A5FC@<X0>(const void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1AB95A1E0(a1, *(_DWORD *)(v2 + 40), *(unsigned int *)(v2 + 44) | ((unint64_t)*(unsigned __int8 *)(v2 + 48) << 32), *(uint64_t **)(v2 + 16), *(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 32), a2);
}

uint64_t sub_1AB95A63C@<X0>(const void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1AB95A4DC(a1, *(_DWORD *)(v2 + 48), *(unsigned int *)(v2 + 52) | ((unint64_t)*(unsigned __int8 *)(v2 + 56) << 32), *(uint64_t **)(v2 + 16), a2);
}

uint64_t dispatch thunk of static Rule.initialValue.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t (*sub_1AB95A680())(uint64_t a1, uint64_t a2)
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  __int128 v3;

  v1 = *(_QWORD *)(v0 + 32);
  v2 = swift_allocObject();
  v3 = *(_OWORD *)(v0 + 16);
  *(_OWORD *)(v2 + 16) = v3;
  *(_QWORD *)(v2 + 32) = v1;
  *(_QWORD *)(v2 + 40) = v3;
  return sub_1AB95A6DC;
}

uint64_t sub_1AB95A6CC()
{
  return swift_deallocObject();
}

uint64_t sub_1AB95A6DC(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;

  return sub_1AB95A2CC(a1, a2, v2[5], v2[2], v2[3]);
}

uint64_t sub_1AB95A6E8@<X0>(void *a1@<X0>, _DWORD *a2@<X8>)
{
  _QWORD *v2;
  uint64_t v5;
  uint64_t *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  _QWORD v11[6];

  v5 = v2[2];
  v6 = (uint64_t *)v2[3];
  v8 = v2[4];
  v7 = (void *)v2[5];
  v11[2] = v5;
  v11[3] = v6;
  v11[4] = v8;
  v9 = sub_1AB933748();
  result = Attribute.init<A>(body:value:flags:update:)(v7, a1, v9, (uint64_t)sub_1AB95A770, (uint64_t)v11, v5, v6);
  *a2 = result;
  return result;
}

uint64_t (*sub_1AB95A770())(uint64_t a1, uint64_t a2)
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  __int128 v3;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = swift_allocObject();
  *(_QWORD *)(v2 + 16) = v1;
  v3 = *(_OWORD *)(v0 + 24);
  *(_OWORD *)(v2 + 24) = v3;
  *(_QWORD *)(v2 + 40) = v3;
  return sub_1AB95A7CC;
}

uint64_t sub_1AB95A7BC()
{
  return swift_deallocObject();
}

uint64_t sub_1AB95A7CC(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;

  return sub_1AB959DB8(a1, a2, v2[5], v2[2], v2[3], v2[4], (uint64_t)sub_1AB95A114);
}

uint64_t (*sub_1AB95A7F0())(uint64_t a1, uint64_t a2)
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  __int128 v3;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = swift_allocObject();
  *(_QWORD *)(v2 + 16) = v1;
  v3 = *(_OWORD *)(v0 + 24);
  *(_OWORD *)(v2 + 24) = v3;
  *(_QWORD *)(v2 + 40) = v3;
  return sub_1AB95A7CC;
}

uint64_t sub_1AB95A83C()
{
  return swift_deallocObject();
}

uint64_t sub_1AB95A84C(unsigned __int8 *a1)
{
  AG::LayoutDescriptor *AssociatedTypeWitness;

  AssociatedTypeWitness = (AG::LayoutDescriptor *)swift_getAssociatedTypeWitness();
  return AGGraphSetOutputValue(a1, AssociatedTypeWitness);
}

uint64_t sub_1AB95A89C@<X0>(uint64_t a1@<X8>)
{
  uint64_t AssociatedTypeWitness;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 56))(a1, 1, 1, AssociatedTypeWitness);
}

uint64_t static StatefulRule.initialValue.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t AssociatedTypeWitness;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 56))(a1, 1, 1, AssociatedTypeWitness);
}

uint64_t sub_1AB95A9C4@<X0>(void *a1@<X0>, _DWORD *a2@<X8>)
{
  _QWORD *v2;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  _QWORD v10[6];

  v5 = v2[2];
  v6 = (uint64_t *)v2[3];
  v7 = v2[4];
  v10[2] = v5;
  v10[3] = v6;
  v10[4] = v7;
  v8 = sub_1AB933748();
  result = Attribute.init<A>(body:value:flags:update:)(a1, 0, v8, (uint64_t)sub_1AB95B4C0, (uint64_t)v10, v5, v6);
  *a2 = result;
  return result;
}

uint64_t static StatefulRule._update(_:attribute:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a4 + 32))(a3, a4);
}

uint64_t sub_1AB95AB24(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[6];

  v10[2] = a3;
  v10[3] = a4;
  v10[4] = a5;
  v10[5] = a1;
  v7 = type metadata accessor for Attribute(0, a3, a3, a4);
  return sub_1AB9587C0(a2, (uint64_t)sub_1AB95B3D8, (uint64_t)v10, a3, MEMORY[0x1E0DEDCE8], v7, MEMORY[0x1E0DEDD18], v8);
}

uint64_t sub_1AB95ABA4(uint64_t a1)
{
  uint64_t *v1;

  return sub_1AB95AB24(a1, v1[5], v1[2], v1[3], v1[4]);
}

uint64_t StatefulRule.attribute.getter()
{
  uint64_t result;

  result = AGGraphGetCurrentAttribute();
  if ((_DWORD)result == 2)
    __break(1u);
  return result;
}

BOOL StatefulRule.hasValue.getter()
{
  AG::swift::metadata *AssociatedTypeWitness;
  const char *v1;

  AssociatedTypeWitness = (AG::swift::metadata *)swift_getAssociatedTypeWitness();
  return AGGraphGetOutputValue(AssociatedTypeWitness, v1) != 0;
}

uint64_t StatefulRule.value.getter@<X0>(uint64_t a1@<X8>)
{
  AG::swift::metadata *AssociatedTypeWitness;
  const char *v3;
  uint64_t result;

  AssociatedTypeWitness = (AG::swift::metadata *)swift_getAssociatedTypeWitness();
  result = AGGraphGetOutputValue(AssociatedTypeWitness, v3);
  if (result)
    return (*(uint64_t (**)(uint64_t, uint64_t, AG::swift::metadata *))(*((_QWORD *)AssociatedTypeWitness - 1)
                                                                              + 16))(a1, result, AssociatedTypeWitness);
  __break(1u);
  return result;
}

uint64_t sub_1AB95AC7C@<X0>(uint64_t a1@<X8>)
{
  AG::swift::metadata *AssociatedTypeWitness;
  const char *v3;
  uint64_t result;

  AssociatedTypeWitness = (AG::swift::metadata *)swift_getAssociatedTypeWitness();
  result = AGGraphGetOutputValue(AssociatedTypeWitness, v3);
  if (result)
    return (*(uint64_t (**)(uint64_t, uint64_t, AG::swift::metadata *))(*((_QWORD *)AssociatedTypeWitness - 1)
                                                                              + 16))(a1, result, AssociatedTypeWitness);
  __break(1u);
  return result;
}

uint64_t StatefulRule.value.unsafeAddressor()
{
  AG::swift::metadata *AssociatedTypeWitness;
  const char *v1;
  uint64_t result;

  AssociatedTypeWitness = (AG::swift::metadata *)swift_getAssociatedTypeWitness();
  result = AGGraphGetOutputValue(AssociatedTypeWitness, v1);
  if (!result)
    __break(1u);
  return result;
}

uint64_t sub_1AB95AD10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t AssociatedTypeWitness;
  uint64_t v8;
  double v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  _BYTE v14[16];
  _BYTE v15[16];
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v5 = *(_QWORD *)(a4 + a3 - 16);
  v6 = *(_QWORD *)(a4 + a3 - 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v8 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v9 = MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v11 = &v14[-v10];
  (*(void (**)(_BYTE *, uint64_t, uint64_t, double))(v8 + 16))(&v14[-v10], a1, AssociatedTypeWitness, v9);
  v16 = v5;
  v17 = v6;
  sub_1AB9587C0((uint64_t)v11, (uint64_t)sub_1AB95B310, (uint64_t)v15, AssociatedTypeWitness, MEMORY[0x1E0DEDCE8], MEMORY[0x1E0DEE9C0] + 8, MEMORY[0x1E0DEDD18], v12);
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v8 + 8))(v11, AssociatedTypeWitness);
}

uint64_t StatefulRule.value.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  _QWORD v7[6];

  v7[2] = a2;
  v7[3] = a3;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  sub_1AB9587C0(a1, (uint64_t)sub_1AB95B310, (uint64_t)v7, AssociatedTypeWitness, MEMORY[0x1E0DEDCE8], MEMORY[0x1E0DEE9C0] + 8, MEMORY[0x1E0DEDD18], v5);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 8))(a1, AssociatedTypeWitness);
}

void (*StatefulRule.value.modify(_QWORD *a1, uint64_t a2, uint64_t a3))(void **a1, char a2)
{
  _QWORD *v6;
  AG::swift::metadata *AssociatedTypeWitness;
  uint64_t v8;
  size_t v9;
  void *v10;
  const char *v11;
  uint64_t OutputValue;
  void (*v13)(void *, uint64_t, AG::swift::metadata *);

  v6 = malloc(0x38uLL);
  *a1 = v6;
  *v6 = a2;
  v6[1] = a3;
  AssociatedTypeWitness = (AG::swift::metadata *)swift_getAssociatedTypeWitness();
  v6[2] = AssociatedTypeWitness;
  v8 = *((_QWORD *)AssociatedTypeWitness - 1);
  v6[3] = v8;
  v9 = *(_QWORD *)(v8 + 64);
  v6[4] = malloc(v9);
  v10 = malloc(v9);
  v6[5] = v10;
  OutputValue = AGGraphGetOutputValue(AssociatedTypeWitness, v11);
  if (!OutputValue)
    __break(1u);
  v13 = *(void (**)(void *, uint64_t, AG::swift::metadata *))(v8 + 16);
  v6[6] = v13;
  v13(v10, OutputValue, AssociatedTypeWitness);
  return sub_1AB95AFB8;
}

void sub_1AB95AFB8(void **a1, char a2)
{
  _QWORD *v2;
  uint64_t (*v3)(void *, void *, uint64_t);
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void *, uint64_t);
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  _BYTE v15[16];
  __int128 v16;
  __int128 v17;

  v2 = *a1;
  if ((a2 & 1) != 0)
  {
    v4 = (void *)v2[5];
    v3 = (uint64_t (*)(void *, void *, uint64_t))v2[6];
    v6 = v2[3];
    v5 = (void *)v2[4];
    v7 = v2[2];
    v17 = *(_OWORD *)v2;
    v8 = v3(v5, v4, v7);
    MEMORY[0x1E0C80A78](v8);
    v16 = v17;
    sub_1AB9587C0((uint64_t)v5, (uint64_t)sub_1AB95B310, (uint64_t)v15, v7, MEMORY[0x1E0DEDCE8], MEMORY[0x1E0DEE9C0] + 8, MEMORY[0x1E0DEDD18], v9);
    v10 = *(void (**)(void *, uint64_t))(v6 + 8);
    v10(v5, v7);
    v10(v4, v7);
  }
  else
  {
    v5 = (void *)v2[4];
    v4 = (void *)v2[5];
    v11 = v2[2];
    v12 = v2[3];
    *(double *)&v13 = MEMORY[0x1E0C80A78](a1);
    v16 = v13;
    sub_1AB9587C0((uint64_t)v4, (uint64_t)sub_1AB95B310, (uint64_t)v15, v11, MEMORY[0x1E0DEDCE8], MEMORY[0x1E0DEE9C0] + 8, MEMORY[0x1E0DEDD18], v14);
    (*(void (**)(void *, uint64_t))(v12 + 8))(v4, v11);
  }
  free(v4);
  free(v5);
  free(v2);
}

uint64_t StatefulRule.context.getter()
{
  uint64_t result;

  result = AGGraphGetCurrentAttribute();
  if ((_DWORD)result == 2)
    __break(1u);
  return result;
}

uint64_t static StatefulRule._updateDefault(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  double v12;
  uint64_t v13;
  char *v14;
  uint64_t v16;
  uint64_t v17;
  _QWORD v18[2];

  v18[1] = *MEMORY[0x1E0C80C00];
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v6 = sub_1AB962120();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)v18 - v8;
  v10 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v12 = MEMORY[0x1E0C80A78](v11);
  v14 = (char *)v18 - v13;
  (*(void (**)(uint64_t, uint64_t, double))(a3 + 24))(a2, a3, v12);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v9, 1, AssociatedTypeWitness) == 1)
    return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  v16 = (*(uint64_t (**)(char *, char *, uint64_t))(v10 + 32))(v14, v9, AssociatedTypeWitness);
  MEMORY[0x1E0C80A78](v16);
  v18[-2] = a2;
  v18[-1] = a3;
  sub_1AB9587C0((uint64_t)v14, (uint64_t)sub_1AB95B310, (uint64_t)&v18[-4], AssociatedTypeWitness, MEMORY[0x1E0DEDCE8], MEMORY[0x1E0DEE9C0] + 8, MEMORY[0x1E0DEDD18], v17);
  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v14, AssociatedTypeWitness);
}

uint64_t sub_1AB95B310(unsigned __int8 *a1)
{
  return sub_1AB95B38C(a1);
}

uint64_t sub_1AB95B328(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1AB95AD10(a1, a2, a3, a4);
}

uint64_t sub_1AB95B36C()
{
  return 16;
}

__n128 sub_1AB95B378(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t dispatch thunk of static StatefulRule.initialValue.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t sub_1AB95B38C(unsigned __int8 *a1)
{
  AG::LayoutDescriptor *AssociatedTypeWitness;

  AssociatedTypeWitness = (AG::LayoutDescriptor *)swift_getAssociatedTypeWitness();
  return AGGraphSetOutputValue(a1, AssociatedTypeWitness);
}

uint64_t sub_1AB95B3D8@<X0>(void *a1@<X0>, _DWORD *a2@<X8>)
{
  _QWORD *v2;
  uint64_t v5;
  uint64_t *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  _QWORD v11[6];

  v5 = v2[2];
  v6 = (uint64_t *)v2[3];
  v8 = v2[4];
  v7 = (void *)v2[5];
  v11[2] = v5;
  v11[3] = v6;
  v11[4] = v8;
  v9 = sub_1AB933748();
  result = Attribute.init<A>(body:value:flags:update:)(v7, a1, v9, (uint64_t)sub_1AB95B460, (uint64_t)v11, v5, v6);
  *a2 = result;
  return result;
}

uint64_t (*sub_1AB95B460())()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  __int128 v3;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = swift_allocObject();
  *(_QWORD *)(v2 + 16) = v1;
  v3 = *(_OWORD *)(v0 + 24);
  *(_OWORD *)(v2 + 24) = v3;
  *(_QWORD *)(v2 + 40) = v3;
  return sub_1AB95B4BC;
}

uint64_t sub_1AB95B4AC()
{
  return swift_deallocObject();
}

uint64_t (*sub_1AB95B4C0())()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  __int128 v3;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = swift_allocObject();
  *(_QWORD *)(v2 + 16) = v1;
  v3 = *(_OWORD *)(v0 + 24);
  *(_OWORD *)(v2 + 24) = v3;
  *(_QWORD *)(v2 + 40) = v3;
  return sub_1AB95B4BC;
}

uint64_t sub_1AB95B50C()
{
  return swift_deallocObject();
}

uint64_t sub_1AB95B51C()
{
  uint64_t v0;

  return (*(uint64_t (**)(_QWORD))(*(_QWORD *)(v0 + 32) + 32))(*(_QWORD *)(v0 + 24));
}

BOOL static AGAttribute.== infix(_:_:)(int a1, int a2)
{
  return a1 == a2;
}

uint64_t AGAttribute.description.getter()
{
  sub_1AB962180();
  sub_1AB962108();
  swift_bridgeObjectRelease();
  return 35;
}

uint64_t AGAttribute.unsafeCast<A>(to:)(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t Attribute.subscript.getter(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  const char *v5;
  char v6;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  int v19;
  _QWORD *v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v4 = *a1;
  v5 = (const char *)sub_1AB962138();
  if ((v6 & 1) == 0)
    return AGGraphCreateOffsetAttribute2(a2, v5, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*MEMORY[0x1E0DEE2A8] + v4 + 8) - 8) + 64));
  v19 = a2;
  v20 = a1;
  MEMORY[0x1E0C80A78](v5);
  v8 = (uint64_t *)(v4 + *MEMORY[0x1E0DEE2A8]);
  v15 = v8[1];
  v16 = type metadata accessor for Focus(0, *v8, v15, v9);
  v17 = MEMORY[0x1AF431BE0](&protocol conformance descriptor for Focus<A, B>, v16);
  v12 = type metadata accessor for Attribute(0, v15, v10, v11);
  swift_retain();
  sub_1AB9587C0((uint64_t)&v19, (uint64_t)sub_1AB958FBC, (uint64_t)&v14, v16, MEMORY[0x1E0DEDCE8], v12, MEMORY[0x1E0DEDD18], v13);
  swift_release();
  return v18;
}

{
  uint64_t v4;
  const char *v5;
  char v6;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  int v19;
  _QWORD *v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v4 = *a1;
  v5 = (const char *)sub_1AB962138();
  if ((v6 & 1) == 0)
    return AGGraphCreateOffsetAttribute2(a2, v5, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*MEMORY[0x1E0DEE2A8] + v4 + 8) - 8) + 64));
  v19 = a2;
  v20 = a1;
  MEMORY[0x1E0C80A78](v5);
  v8 = (uint64_t *)(v4 + *MEMORY[0x1E0DEE2A8]);
  v15 = v8[1];
  v16 = type metadata accessor for Focus(0, *v8, v15, v9);
  v17 = MEMORY[0x1AF431BE0](&protocol conformance descriptor for Focus<A, B>, v16);
  v12 = type metadata accessor for Attribute(0, v15, v10, v11);
  swift_retain();
  sub_1AB9587C0((uint64_t)&v19, (uint64_t)sub_1AB95CB88, (uint64_t)&v14, v16, MEMORY[0x1E0DEDCE8], v12, MEMORY[0x1E0DEDD18], v13);
  swift_release();
  return v18;
}

unint64_t static AGAttribute.current.getter()
{
  unsigned int CurrentAttribute;
  uint64_t v1;

  CurrentAttribute = AGGraphGetCurrentAttribute();
  if (CurrentAttribute == 2)
    v1 = 0;
  else
    v1 = CurrentAttribute;
  return v1 | ((unint64_t)(CurrentAttribute == 2) << 32);
}

uint64_t AGAttribute.unsafeOffset(at:)(const char *a1, uint64_t a2)
{
  return AGGraphCreateOffsetAttribute(a2, a1);
}

void AGAttribute.setFlags(_:mask:)(int a1, const char *a2, char *a3)
{
  const char *v4;

  v4 = (const char *)(AGGraphGetFlags((uint64_t)a3, a2) & ~(_DWORD)a2 | a2 & a1);
  AGGraphSetFlags(a3, v4);
}

uint64_t AGAttribute.addInput(_:options:token:)(const char *a1, uint64_t a2, int a3, char *a4)
{
  return AGGraphAddInput(a4, a1, a2);
}

uint64_t AGAttribute.visitBody<A>(_:)(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t AttributeInfo;
  uint64_t v8;

  AttributeInfo = AGGraphGetAttributeInfo((uint64_t)a2, a2);
  return sub_1AB95CBB4(a1, v8, *(_QWORD *)(AttributeInfo + 56), a3, *(_QWORD *)(AttributeInfo + 64), a4);
}

void AGAttribute.mutateBody<A>(as:invalidating:_:)(int a1, char a2, uint64_t a3, uint64_t a4, char *a5, const char *a6)
{
  _QWORD v6[6];

  v6[2] = a6;
  v6[3] = a3;
  v6[4] = a4;
  AGGraphMutateAttribute(a5, a6, a2, (void (*)(_QWORD *))sub_1AB95C76C, (uint64_t)v6);
}

uint64_t AGAttribute.breadthFirstSearch(options:_:)(const char *a1, uint64_t (*a2)(uint64_t), uint64_t a3, uint64_t a4)
{
  return AGGraphSearch(a4, a1, a2);
}

unint64_t AGAttribute.indirectDependency.getter(uint64_t a1, const char *a2)
{
  unsigned int IndirectDependency;
  uint64_t v3;

  IndirectDependency = AGGraphGetIndirectDependency(a1, a2);
  if (IndirectDependency == 2)
    v3 = 0;
  else
    v3 = IndirectDependency;
  return v3 | ((unint64_t)(IndirectDependency == 2) << 32);
}

void AGAttribute.indirectDependency.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  if ((a1 & 0x100000000) != 0)
    v3 = 2;
  else
    v3 = a1;
  AGGraphSetIndirectDependency(a2, (const char *)v3);
}

void (*AGAttribute.indirectDependency.modify(uint64_t a1, const char *a2))(unsigned int *a1)
{
  int IndirectDependency;
  int v4;

  *(_DWORD *)(a1 + 8) = (_DWORD)a2;
  IndirectDependency = AGGraphGetIndirectDependency((uint64_t)a2, a2);
  *(_DWORD *)(a1 + 12) = 2;
  if (IndirectDependency == 2)
    v4 = 0;
  else
    v4 = IndirectDependency;
  *(_DWORD *)a1 = v4;
  *(_BYTE *)(a1 + 4) = IndirectDependency == 2;
  return sub_1AB95B95C;
}

void sub_1AB95B95C(unsigned int *a1)
{
  unsigned int *v1;

  v1 = a1 + 3;
  if (!*((_BYTE *)a1 + 4))
    v1 = a1;
  AGGraphSetIndirectDependency(a1[2], (const char *)*v1);
}

uint64_t AGAttribute._bodyType.getter(uint64_t a1, const char *a2)
{
  return *(_QWORD *)AGGraphGetAttributeInfo(a1, a2);
}

uint64_t AGAttribute._bodyPointer.getter(uint64_t a1, const char *a2)
{
  uint64_t v2;

  AGGraphGetAttributeInfo(a1, a2);
  return v2;
}

uint64_t AGAttribute.valueType.getter(uint64_t a1, const char *a2)
{
  return *(_QWORD *)(AGGraphGetAttributeInfo(a1, a2) + 8);
}

uint64_t AGAttribute.hash(into:)()
{
  return sub_1AB9621EC();
}

uint64_t sub_1AB95B9E8()
{
  return sub_1AB962234();
}

uint64_t sub_1AB95B9F0()
{
  return sub_1AB9621EC();
}

uint64_t sub_1AB95BA18()
{
  return AGAttribute.description.getter();
}

uint64_t Attribute.identifier.setter(uint64_t result)
{
  _DWORD *v1;

  *v1 = result;
  return result;
}

uint64_t (*Attribute.identifier.modify())()
{
  return nullsub_1;
}

uint64_t *Attribute.graph.getter(uint64_t a1, char *a2)
{
  return AGGraphGetAttributeGraph(a1, a2);
}

uint64_t Attribute.unsafeCast<A>(to:)(uint64_t a1, uint64_t a2)
{
  return a2;
}

void Attribute.flags.setter(const char *a1, char *a2)
{
  AGGraphSetFlags(a2, a1);
}

void (*Attribute.flags.modify(_DWORD *a1, const char *a2))(unsigned int *a1)
{
  a1[1] = (_DWORD)a2;
  *a1 = AGGraphGetFlags((uint64_t)a2, a2);
  return sub_1AB95BAB0;
}

void sub_1AB95BAB0(unsigned int *a1)
{
  AGGraphSetFlags((char *)a1[1], (const char *)*a1);
}

void Attribute.setFlags(_:mask:)(int a1, const char *a2, char *a3)
{
  const char *v4;

  v4 = (const char *)(AGGraphGetFlags((uint64_t)a3, a2) & ~(_DWORD)a2 | a2 & a1);
  AGGraphSetFlags(a3, v4);
}

uint64_t Attribute.value.setter(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return sub_1AB95BE64(a1, a2, a3, (uint64_t)sub_1AB95C78C, a5, a6, a7, a8);
}

uint64_t Attribute.setValue(_:)(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD v9[3];
  int v10;
  unsigned __int8 v11;

  v9[2] = a3;
  v10 = a2;
  sub_1AB9587C0(a1, (uint64_t)sub_1AB95C78C, (uint64_t)v9, a3, MEMORY[0x1E0DEDCE8], MEMORY[0x1E0DEAFA0], MEMORY[0x1E0DEDD18], a8);
  return v11;
}

void (*Attribute.value.modify(_QWORD *a1, unint64_t a2, AG::swift::metadata *a3))(void **a1, char a2)
{
  _DWORD *v6;
  uint64_t v7;
  size_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  char *Value;
  void (*v13)(void *, char *, AG::swift::metadata *);

  v6 = malloc(0x30uLL);
  *a1 = v6;
  v6[10] = a2;
  v7 = *((_QWORD *)a3 - 1);
  *(_QWORD *)v6 = a3;
  *((_QWORD *)v6 + 1) = v7;
  v8 = *(_QWORD *)(v7 + 64);
  *((_QWORD *)v6 + 2) = malloc(v8);
  v9 = malloc(v8);
  *((_QWORD *)v6 + 3) = v9;
  Value = AGGraphGetValue(a2, 0, a3, v10, v11);
  v13 = *(void (**)(void *, char *, AG::swift::metadata *))(v7 + 16);
  *((_QWORD *)v6 + 4) = v13;
  v13(v9, Value, a3);
  return sub_1AB95BC4C;
}

void sub_1AB95BC4C(void **a1, char a2)
{
  sub_1AB95BFB8(a1, a2, (uint64_t)sub_1AB95C78C, (uint64_t)sub_1AB95C78C);
}

uint64_t Attribute.valueAndFlags(options:)(uint64_t a1, const char *a2, unint64_t a3, AG::swift::metadata *a4, uint64_t a5)
{
  char *Value;
  uint64_t v8;
  uint64_t v9;

  Value = AGGraphGetValue(a3, a2, a4, (uint64_t)a4, a5);
  v9 = v8;
  (*(void (**)(uint64_t, char *, AG::swift::metadata *))(*((_QWORD *)a4 - 1) + 16))(a1, Value, a4);
  return v9;
}

uint64_t Attribute.changedValue(options:)(uint64_t a1, const char *a2, unint64_t a3, AG::swift::metadata *a4, uint64_t a5)
{
  char *Value;
  char v8;
  char v9;

  Value = AGGraphGetValue(a3, a2, a4, (uint64_t)a4, a5);
  v9 = v8;
  (*(void (**)(uint64_t, char *, AG::swift::metadata *))(*((_QWORD *)a4 - 1) + 16))(a1, Value, a4);
  return v9 & 1;
}

uint64_t _s14AttributeGraph0A0V5valuexvg_0@<X0>(unint64_t a1@<X0>, AG::swift::metadata *a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  char *Value;

  Value = AGGraphGetValue(a1, 0, a2, a3, a4);
  return (*(uint64_t (**)(uint64_t, char *, AG::swift::metadata *))(*((_QWORD *)a2 - 1) + 16))(a5, Value, a2);
}

char *Attribute.wrappedValue.unsafeAddressor(unint64_t a1, AG::swift::metadata *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return AGGraphGetValue(a1, 0, a2, a4, a5);
}

uint64_t sub_1AB95BD60(uint64_t a1, int *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  _BYTE *v11;
  int v12;
  uint64_t v13;
  _BYTE v15[15];
  _BYTE v16[16];
  uint64_t v17;
  int v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v7 = *(_QWORD *)(a4 + a3 - 8);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = MEMORY[0x1E0C80A78](a1);
  v11 = &v15[-v10];
  (*(void (**)(_BYTE *, double))(v8 + 16))(&v15[-v10], v9);
  v12 = *a2;
  v17 = v7;
  v18 = v12;
  sub_1AB9587C0((uint64_t)v11, a5, (uint64_t)v16, v7, MEMORY[0x1E0DEDCE8], MEMORY[0x1E0DEAFA0], MEMORY[0x1E0DEDD18], v13);
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v8 + 8))(v11, v7);
}

uint64_t Attribute.wrappedValue.setter(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return sub_1AB95BE64(a1, a2, a3, (uint64_t)sub_1AB95C78C, a5, a6, a7, a8);
}

uint64_t sub_1AB95BE64(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD v11[3];
  int v12;

  v11[2] = a3;
  v12 = a2;
  sub_1AB9587C0(a1, a4, (uint64_t)v11, a3, MEMORY[0x1E0DEDCE8], MEMORY[0x1E0DEAFA0], MEMORY[0x1E0DEDD18], a8);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 8))(a1, a3);
}

void (*Attribute.wrappedValue.modify(_QWORD *a1, unint64_t a2, AG::swift::metadata *a3))(void **a1, char a2)
{
  _DWORD *v6;
  uint64_t v7;
  size_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  char *Value;
  void (*v13)(void *, char *, AG::swift::metadata *);

  v6 = malloc(0x30uLL);
  *a1 = v6;
  v6[10] = a2;
  v7 = *((_QWORD *)a3 - 1);
  *(_QWORD *)v6 = a3;
  *((_QWORD *)v6 + 1) = v7;
  v8 = *(_QWORD *)(v7 + 64);
  *((_QWORD *)v6 + 2) = malloc(v8);
  v9 = malloc(v8);
  *((_QWORD *)v6 + 3) = v9;
  Value = AGGraphGetValue(a2, 0, a3, v10, v11);
  v13 = *(void (**)(void *, char *, AG::swift::metadata *))(v7 + 16);
  *((_QWORD *)v6 + 4) = v13;
  v13(v9, Value, a3);
  return sub_1AB95BC4C;
}

void sub_1AB95BFB8(void **a1, char a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(void *, uint64_t);
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE v19[16];
  uint64_t v20;
  int v21;

  v4 = (uint64_t *)*a1;
  if ((a2 & 1) != 0)
  {
    v6 = (void *)v4[3];
    v8 = v4[1];
    v7 = (void *)v4[2];
    v9 = *v4;
    v10 = *((_DWORD *)v4 + 10);
    v11 = ((uint64_t (*)(void *, void *, uint64_t))v4[4])(v7, v6, *v4);
    MEMORY[0x1E0C80A78](v11);
    v20 = v9;
    v21 = v10;
    sub_1AB9587C0((uint64_t)v7, a4, (uint64_t)v19, v9, MEMORY[0x1E0DEDCE8], MEMORY[0x1E0DEAFA0], MEMORY[0x1E0DEDD18], v12);
    v13 = *(void (**)(void *, uint64_t))(v8 + 8);
    v13(v7, v9);
    v13(v6, v9);
  }
  else
  {
    v7 = (void *)v4[2];
    v6 = (void *)v4[3];
    v14 = *v4;
    v15 = v4[1];
    MEMORY[0x1E0C80A78](a1);
    v20 = v14;
    v21 = v16;
    sub_1AB9587C0((uint64_t)v6, v17, (uint64_t)v19, v14, MEMORY[0x1E0DEDCE8], MEMORY[0x1E0DEAFA0], MEMORY[0x1E0DEDD18], v18);
    (*(void (**)(void *, uint64_t))(v15 + 8))(v6, v14);
  }
  free(v6);
  free(v7);
  free(v4);
}

uint64_t Attribute.projectedValue.setter(uint64_t result)
{
  _DWORD *v1;

  *v1 = result;
  return result;
}

uint64_t (*Attribute.projectedValue.modify(uint64_t a1))(uint64_t result)
{
  _DWORD *v1;

  *(_QWORD *)a1 = v1;
  *(_DWORD *)(a1 + 8) = *v1;
  return sub_1AB95C160;
}

uint64_t sub_1AB95C160(uint64_t result)
{
  **(_DWORD **)result = *(_DWORD *)(result + 8);
  return result;
}

uint64_t Attribute.unsafeOffset<A>(at:as:)(const char *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return AGGraphCreateOffsetAttribute2(a3, a1, *(_QWORD *)(*(_QWORD *)(a5 - 8) + 64));
}

uint64_t Attribute.applying<A>(offset:)(const char *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return AGGraphCreateOffsetAttribute2(a2, a1, *(_QWORD *)(*(_QWORD *)(a4 - 8) + 64));
}

uint64_t Attribute.subscript.getter(uint64_t (*a1)(uint64_t), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v6;
  const char *v7;

  v6 = *(_QWORD *)(*(_QWORD *)(a5 - 8) + 64);
  if (v6)
    v7 = (const char *)a1(1);
  else
    v7 = 0;
  return AGGraphCreateOffsetAttribute2(a3, v7, v6);
}

uint64_t Attribute.addInput<A>(_:options:token:)(const char *a1, uint64_t a2, int a3, char *a4)
{
  return AGGraphAddInput(a4, a1, a2);
}

uint64_t _sSo11AGAttributea14AttributeGraphE8addInput_7options5tokenyAC0B0VyxG_So14AGInputOptionsVSitlF_0(const char *a1, uint64_t a2, int a3, char *a4)
{
  return AGGraphAddInput(a4, a1, a2);
}

uint64_t sub_1AB95C3BC@<X0>(char *a1@<X1>, char *a2@<X0>, AG::LayoutDescriptor *a3@<X2>, _BYTE *a4@<X8>)
{
  uint64_t result;

  result = AGGraphSetValue(a1, a2, a3);
  *a4 = result;
  return result;
}

uint64_t Attribute.hasValue.getter(char *a1, const char *a2)
{
  return AGGraphHasValue(a1, a2);
}

id Attribute.subgraph.getter(int a1, const char *a2)
{
  return (id)AGGraphGetAttributeSubgraph(a1, a2);
}

uint64_t Attribute.visitBody<A>(_:)(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t AttributeInfo;
  uint64_t v9;

  AttributeInfo = AGGraphGetAttributeInfo((uint64_t)a2, a2);
  return sub_1AB95CBB4(a1, v9, *(_QWORD *)(AttributeInfo + 56), a4, *(_QWORD *)(AttributeInfo + 64), a5);
}

uint64_t Attribute.breadthFirstSearch(options:_:)(const char *a1, uint64_t (*a2)(uint64_t), uint64_t a3, uint64_t a4)
{
  return AGGraphSearch(a4, a1, a2);
}

void Attribute.mutateBody<A>(as:invalidating:_:)(int a1, char a2, uint64_t a3, uint64_t a4, char *a5, uint64_t a6, const char *a7)
{
  _QWORD v7[6];

  v7[2] = a7;
  v7[3] = a3;
  v7[4] = a4;
  AGGraphMutateAttribute(a5, a7, a2, (void (*)(_QWORD *))sub_1AB95CBA8, (uint64_t)v7);
}

BOOL static Attribute.== infix(_:_:)(int a1, int a2)
{
  return a1 == a2;
}

uint64_t Attribute.hash(into:)()
{
  return sub_1AB9621EC();
}

uint64_t Attribute.hashValue.getter()
{
  sub_1AB9621D4();
  sub_1AB9621EC();
  return sub_1AB9621F8();
}

uint64_t sub_1AB95C544()
{
  return Attribute.hashValue.getter();
}

uint64_t sub_1AB95C54C()
{
  sub_1AB9621D4();
  sub_1AB9621EC();
  return sub_1AB9621F8();
}

uint64_t sub_1AB95C588()
{
  unsigned int *v0;

  return Attribute.description.getter(*v0);
}

uint64_t Attribute.init(value:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[5];
  unsigned int v10;

  v9[2] = a2;
  v6 = type metadata accessor for Attribute(0, a2, a3, a4);
  sub_1AB9587C0(a1, (uint64_t)sub_1AB95C7A0, (uint64_t)v9, a2, MEMORY[0x1E0DEDCE8], v6, MEMORY[0x1E0DEDD18], v7);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 8))(a1, a2);
  return v10;
}

uint64_t sub_1AB95C618(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v11[6];

  v11[5] = *MEMORY[0x1E0C80C00];
  v11[2] = a2;
  v11[3] = a1;
  v5 = type metadata accessor for External(0, a2, a3, a4);
  v8 = type metadata accessor for Attribute(0, a2, v6, v7);
  return sub_1AB9587C0(v8, (uint64_t)sub_1AB95CAB4, (uint64_t)v11, v5, MEMORY[0x1E0DEDCE8], v8, MEMORY[0x1E0DEDD18], v9);
}

uint64_t Attribute.init(type:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v11;
  _BYTE v12[16];
  uint64_t v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v13 = a2;
  v5 = type metadata accessor for External(0, a2, a3, a4);
  v8 = type metadata accessor for Attribute(0, a2, v6, v7);
  sub_1AB9587C0(v8, (uint64_t)sub_1AB95C7BC, (uint64_t)v12, v5, MEMORY[0x1E0DEDCE8], v8, MEMORY[0x1E0DEDD18], v9);
  return v11;
}

uint64_t sub_1AB95C76C()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 24))();
}

uint64_t sub_1AB95C78C@<X0>(char *a1@<X0>, _BYTE *a2@<X8>)
{
  return sub_1AB95CA2C(a1, a2);
}

uint64_t sub_1AB95C7A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  return sub_1AB95C618(a1, *(_QWORD *)(v4 + 16), a2, a4);
}

uint64_t sub_1AB95C7BC@<X0>(void *a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, _DWORD *a4@<X8>)
{
  uint64_t v4;
  uint64_t *v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;

  v10 = *(_QWORD *)(v4 + 16);
  v7 = (uint64_t *)type metadata accessor for External(0, v10, a2, a3);
  result = Attribute.init<A>(body:value:flags:update:)(a1, 0, 16, (uint64_t)sub_1AB95CA64, (uint64_t)&v9, v10, v7);
  *a4 = result;
  return result;
}

void sub_1AB95C838()
{
  JUMPOUT(0x1AF431BE0);
}

uint64_t sub_1AB95C848@<X0>(unsigned int *a1@<X0>, const char *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result;
  int v5;

  result = AGGraphGetIndirectDependency(*a1, a2);
  if ((_DWORD)result == 2)
    v5 = 0;
  else
    v5 = result;
  *(_DWORD *)a3 = v5;
  *(_BYTE *)(a3 + 4) = (_DWORD)result == 2;
  return result;
}

void sub_1AB95C88C(uint64_t a1, unsigned int *a2)
{
  int *v2;

  if (*(_BYTE *)(a1 + 4))
    v2 = &AGAttributeNil;
  else
    v2 = (int *)a1;
  AGGraphSetIndirectDependency(*a2, (const char *)*v2);
}

uint64_t sub_1AB95C8B0@<X0>(unsigned int *a1@<X0>, const char *a2@<X1>, _DWORD *a3@<X8>)
{
  uint64_t result;

  result = AGGraphGetFlags(*a1, a2);
  *a3 = result;
  return result;
}

void sub_1AB95C8D8(unsigned int *a1, unsigned int *a2)
{
  AGGraphSetFlags((char *)*a2, (const char *)*a1);
}

uint64_t sub_1AB95C8E8()
{
  return 8;
}

_QWORD *sub_1AB95C8F4(_QWORD *result, _QWORD *a2)
{
  *a2 = *result;
  return result;
}

uint64_t sub_1AB95C904(uint64_t a1, int *a2, uint64_t a3, uint64_t a4)
{
  return sub_1AB95BD60(a1, a2, a3, a4, (uint64_t)sub_1AB95C78C);
}

uint64_t sub_1AB95C954()
{
  return 8;
}

uint64_t keypath_get_11Tm@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  AG::swift::metadata *v7;
  char *Value;

  v7 = *(AG::swift::metadata **)(a3 + a2 - 8);
  Value = AGGraphGetValue(*a1, 0, v7, a4, a5);
  return (*(uint64_t (**)(uint64_t, char *, AG::swift::metadata *))(*((_QWORD *)v7 - 1) + 16))(a6, Value, v7);
}

uint64_t sub_1AB95C9AC(uint64_t a1, int *a2, uint64_t a3, uint64_t a4)
{
  return sub_1AB95BD60(a1, a2, a3, a4, (uint64_t)sub_1AB95C78C);
}

uint64_t sub_1AB95C9FC()
{
  return 8;
}

_DWORD *sub_1AB95CA08@<X0>(_DWORD *result@<X0>, _DWORD *a2@<X8>)
{
  *a2 = *result;
  return result;
}

_DWORD *sub_1AB95CA14(_DWORD *result, _DWORD *a2)
{
  *a2 = *result;
  return result;
}

uint64_t sub_1AB95CA20()
{
  return 8;
}

uint64_t sub_1AB95CA2C@<X0>(char *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;

  result = AGGraphSetValue((char *)*(unsigned int *)(v2 + 24), a1, *(AG::LayoutDescriptor **)(v2 + 16));
  *a2 = result;
  return result;
}

uint64_t (*sub_1AB95CA64())()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  *(_QWORD *)(swift_allocObject() + 16) = v1;
  return nullsub_1;
}

uint64_t sub_1AB95CAA4()
{
  return swift_deallocObject();
}

uint64_t sub_1AB95CAB4@<X0>(void *a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, _DWORD *a4@<X8>)
{
  uint64_t v4;
  void *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t result;
  _QWORD v11[4];

  v8 = *(_QWORD *)(v4 + 16);
  v7 = *(void **)(v4 + 24);
  v11[2] = v8;
  v9 = (uint64_t *)type metadata accessor for External(0, v8, a2, a3);
  result = Attribute.init<A>(body:value:flags:update:)(a1, v7, 16, (uint64_t)sub_1AB95CB38, (uint64_t)v11, v8, v9);
  *a4 = result;
  return result;
}

uint64_t (*sub_1AB95CB38())()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  *(_QWORD *)(swift_allocObject() + 16) = v1;
  return nullsub_1;
}

uint64_t sub_1AB95CB78()
{
  return swift_deallocObject();
}

uint64_t sub_1AB95CB88@<X0>(void *a1@<X0>, _DWORD *a2@<X8>)
{
  return sub_1AB958FBC(a1, a2);
}

uint64_t sub_1AB95CBB4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a6 + 8))(a2, a3, a5, a4, a6);
}

uint64_t static _AttributeBody._hasDestroySelf.getter()
{
  return 0;
}

uint64_t static _AttributeBody.comparisonMode.getter()
{
  return 2;
}

uint64_t sub_1AB95CBFC()
{
  return 8;
}

uint64_t static _AttributeBody.flags.getter()
{
  return 8;
}

uint64_t static ObservedAttribute._destroySelf(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a3 + 16))(a2, a3);
}

uint64_t static ObservedAttribute._hasDestroySelf.getter()
{
  return 1;
}

uint64_t dispatch thunk of static _AttributeBody._destroySelf(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 8))();
}

uint64_t dispatch thunk of static _AttributeBody._hasDestroySelf.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of static _AttributeBody._updateDefault(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

uint64_t dispatch thunk of static _AttributeBody.comparisonMode.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t dispatch thunk of static _AttributeBody.flags.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

uint64_t dispatch thunk of ObservedAttribute.destroy()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of AttributeBodyVisitor.visit<A>(body:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 8))();
}

uint64_t static AGGraphRef.withoutUpdate<A>(_:)(void (*a1)(void))
{
  uint64_t v2;

  v2 = AGGraphClearUpdate();
  a1();
  return AGGraphSetUpdate(v2);
}

void AGGraphRef.withoutSubgraphInvalidation<A>(_:)(void (*a1)(void), const char *a2)
{
  uint64_t v2;
  const char *v4;

  v4 = (const char *)AGGraphBeginDeferringSubgraphInvalidation(v2, a2);
  a1();
  AGGraphEndDeferringSubgraphInvalidation(v2, v4);
}

uint64_t *AGGraphRef.withDeadline<A>(_:_:)(const char *a1, const char *a2)
{
  uint64_t v2;
  const char *Deadline;
  uint64_t *v6;

  Deadline = (const char *)AGGraphGetDeadline(v2, a2);
  v6 = AGGraphSetDeadline(v2, a1);
  ((void (*)(uint64_t *))a2)(v6);
  return AGGraphSetDeadline(v2, Deadline);
}

uint64_t AGGraphRef.onInvalidation(_:)(const char *a1, uint64_t a2)
{
  uint64_t v2;

  return AGGraphSetInvalidationCallback(v2, a1, a2);
}

uint64_t AGGraphRef.onUpdate(_:)(const char *a1, uint64_t a2)
{
  uint64_t v2;

  return AGGraphSetUpdateCallback(v2, a1, a2);
}

double AGGraphRef.withMainThreadHandler(_:do:)(unint64_t a1, unint64_t a2, const char *a3, uint64_t a4)
{
  uint64_t v4;
  double result;

  *(_QWORD *)&result = AGGraphWithMainThreadHandler(v4, a3, a4, a1, a2).n128_u64[0];
  return result;
}

void static AGGraphRef.startProfiling()(uint64_t a1, const char *a2)
{
  AGGraphStartProfiling(0, a2);
}

void static AGGraphRef.stopProfiling()(uint64_t a1, const char *a2)
{
  AGGraphStopProfiling(0, a2);
}

void static AGGraphRef.resetProfile()(uint64_t a1, const char *a2)
{
  AGGraphResetProfile(0, a2);
}

void static AGGraphRef.markProfile(name:)(AG::Graph *this)
{
  AGGraphMarkProfile(0, this);
}

uint64_t AGGraphRef.addTraceEvent<A>(_:context:)(const char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return AGGraphAddTraceEvent(v3, a1, a2, a3);
}

uint64_t AGGraphRef.addTraceEvent<A>(_:value:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD v9[6];

  v9[2] = a3;
  v9[4] = a1;
  return sub_1AB9587C0(a2, (uint64_t)sub_1AB95CE4C, (uint64_t)v9, a3, MEMORY[0x1E0DEDCE8], MEMORY[0x1E0DEE9C0] + 8, MEMORY[0x1E0DEDD18], a8);
}

uint64_t sub_1AB95CE4C(uint64_t a1)
{
  uint64_t v1;

  return AGGraphAddTraceEvent(*(_QWORD *)(v1 + 24), *(const char **)(v1 + 32), a1, *(_QWORD *)(v1 + 16));
}

uint64_t sub_1AB95CE7C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x1AF431BE0](&unk_1AB963500, a3);
  return sub_1AB96206C();
}

Swift::Void __swiftcall AGGraphRef.print(includeValues:)(Swift::Bool includeValues)
{
  uint64_t v2;
  Swift::String v3;

  __swift_instantiateConcreteTypeFromMangledName(&qword_1EEC35A08);
  v2 = swift_allocObject();
  *(_OWORD *)(v2 + 16) = xmmword_1AB963950;
  v3 = AGGraphRef.graphvizDescription(includeValues:)(includeValues);
  *(_QWORD *)(v2 + 56) = MEMORY[0x1E0DEA968];
  *(Swift::String *)(v2 + 32) = v3;
  sub_1AB9621B0();
  swift_bridgeObjectRelease();
}

uint64_t __swift_instantiateConcreteTypeFromMangledName(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result < 0)
  {
    result = MEMORY[0x1AF431BBC]((char *)a1 + (int)result, -(result >> 32), 0, 0);
    *a1 = result;
  }
  return result;
}

Swift::String __swiftcall AGGraphRef.graphvizDescription(includeValues:)(Swift::Bool includeValues)
{
  uint64_t v1;
  uint64_t inited;
  uint64_t v4;
  __CFString *v5;
  __CFString *v6;
  void *v7;
  id v8;
  uint64_t v9;
  void *v10;
  Swift::String result;
  uint64_t v12;
  void *v13;
  _OWORD v14[2];
  _BYTE v15[24];
  uint64_t v16;

  __swift_instantiateConcreteTypeFromMangledName(&qword_1EEC35A10);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1AB963960;
  v4 = MEMORY[0x1E0DEA968];
  *(_QWORD *)(inited + 32) = CFSTR("format");
  *(_QWORD *)(inited + 40) = 0x6F642F6870617267;
  *(_QWORD *)(inited + 48) = 0xE900000000000074;
  *(_QWORD *)(inited + 64) = v4;
  *(_QWORD *)(inited + 72) = CFSTR("include-values");
  *(_QWORD *)(inited + 104) = MEMORY[0x1E0DEAFA0];
  *(_BYTE *)(inited + 80) = includeValues;
  v5 = CFSTR("format");
  v6 = CFSTR("include-values");
  sub_1AB95D180(inited);
  type metadata accessor for AGDescriptionOption(0);
  sub_1AB95D298();
  v7 = (void *)sub_1AB962090();
  swift_bridgeObjectRelease();
  v8 = AGGraphDescription(v1, v7);

  if (v8)
  {
    sub_1AB96212C();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v14, 0, sizeof(v14));
  }
  sub_1AB95D2E0((uint64_t)v14, (uint64_t)v15);
  if (!v16)
  {
    sub_1AB95D328((uint64_t)v15);
    goto LABEL_8;
  }
  if (!swift_dynamicCast())
  {
LABEL_8:
    v9 = 0;
    v10 = (void *)0xE000000000000000;
    goto LABEL_9;
  }
  v9 = v12;
  v10 = v13;
LABEL_9:
  result._object = v10;
  result._countAndFlagsBits = v9;
  return result;
}

uint64_t static AGGraphRef.printStack(maxFrames:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  __swift_instantiateConcreteTypeFromMangledName(&qword_1EEC35A08);
  v2 = swift_allocObject();
  *(_OWORD *)(v2 + 16) = xmmword_1AB963950;
  v3 = _sSo10AGGraphRefa14AttributeGraphE16stackDescription9maxFramesSSSi_tFZ_0(a1);
  *(_QWORD *)(v2 + 56) = MEMORY[0x1E0DEA968];
  *(_QWORD *)(v2 + 32) = v3;
  *(_QWORD *)(v2 + 40) = v4;
  sub_1AB9621B0();
  return swift_bridgeObjectRelease();
}

unint64_t sub_1AB95D180(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t result;
  char v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;

  if (!*(_QWORD *)(a1 + 16))
  {
    v3 = (_QWORD *)MEMORY[0x1E0DEE9E0];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EEC35A28);
  v2 = sub_1AB962168();
  v3 = (_QWORD *)v2;
  v4 = *(_QWORD *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  v5 = v2 + 64;
  v6 = a1 + 32;
  swift_retain();
  while (1)
  {
    sub_1AB95DD10(v6, (uint64_t)&v13);
    v7 = v13;
    result = sub_1AB95D8B8(v13);
    if ((v9 & 1) != 0)
      break;
    *(_QWORD *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    *(_QWORD *)(v3[6] + 8 * result) = v7;
    result = (unint64_t)sub_1AB95DD58(&v14, (_OWORD *)(v3[7] + 32 * result));
    v10 = v3[2];
    v11 = __OFADD__(v10, 1);
    v12 = v10 + 1;
    if (v11)
      goto LABEL_11;
    v3[2] = v12;
    v6 += 40;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1AB95D298()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1EEC359E8;
  if (!qword_1EEC359E8)
  {
    type metadata accessor for AGDescriptionOption(255);
    result = MEMORY[0x1AF431BE0](&unk_1AB96365C, v1);
    atomic_store(result, (unint64_t *)&qword_1EEC359E8);
  }
  return result;
}

uint64_t sub_1AB95D2E0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EEC35A18);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1AB95D328(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EEC35A18);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

Swift::Void __swiftcall AGGraphRef.archiveJSON(name:)(Swift::String_optional name)
{
  uint64_t v1;
  uint64_t v2;
  void *object;
  uint64_t countAndFlagsBits;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t inited;
  uint64_t v10;
  __CFString *v11;
  __CFString *v12;
  void *v13;
  id v14;
  uint64_t v15;
  unint64_t v16;
  NSString *v17;
  NSString *v18;
  void *v19;
  NSString *v20;
  void *v21;
  uint64_t v22;
  void *v23;
  id v24;
  id v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  id v32;
  unint64_t v33;
  _OWORD v35[2];
  id v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v2 = v1;
  object = name.value._object;
  countAndFlagsBits = name.value._countAndFlagsBits;
  v39 = *MEMORY[0x1E0C80C00];
  v5 = sub_1AB962048();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)v35 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EEC35A10);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1AB963960;
  v10 = MEMORY[0x1E0DEA968];
  *(_QWORD *)(inited + 32) = CFSTR("format");
  *(_QWORD *)(inited + 40) = 0x69642F6870617267;
  *(_QWORD *)(inited + 48) = 0xEA00000000007463;
  *(_QWORD *)(inited + 64) = v10;
  *(_QWORD *)(inited + 72) = CFSTR("include-values");
  *(_QWORD *)(inited + 104) = MEMORY[0x1E0DEAFA0];
  *(_BYTE *)(inited + 80) = 1;
  v11 = CFSTR("format");
  v12 = CFSTR("include-values");
  sub_1AB95D180(inited);
  type metadata accessor for AGDescriptionOption(0);
  sub_1AB95D298();
  v13 = (void *)sub_1AB962090();
  swift_bridgeObjectRelease();
  v14 = AGGraphDescription(v2, v13);

  if (v14)
  {
    sub_1AB96212C();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v35, 0, sizeof(v35));
  }
  sub_1AB95D2E0((uint64_t)v35, (uint64_t)&v36);
  if (v38)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EEC35A20);
    if ((swift_dynamicCast() & 1) != 0)
    {
      v15 = 0x6870617267;
      if (object)
      {
        v15 = countAndFlagsBits;
        v16 = (unint64_t)object;
      }
      else
      {
        v16 = 0xE500000000000000;
      }
      v36 = (id)v15;
      v37 = v16;
      swift_bridgeObjectRetain();
      sub_1AB962108();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v17 = NSTemporaryDirectory();
      if (v17)
      {
        v18 = v17;
        v19 = (void *)sub_1AB9620C0();
        swift_bridgeObjectRelease();
        v20 = -[NSString stringByAppendingPathComponent:](v18, sel_stringByAppendingPathComponent_, v19);

        sub_1AB9620E4();
        v21 = (void *)objc_opt_self();
        v22 = MEMORY[0x1E0DEA968];
        v23 = (void *)sub_1AB962090();
        swift_bridgeObjectRelease();
        v36 = 0;
        v24 = objc_msgSend(v21, sel_dataWithJSONObject_options_error_, v23, 0, &v36);

        v25 = v36;
        if (v24)
        {
          v26 = sub_1AB962054();
          v28 = v27;

          sub_1AB96203C();
          sub_1AB962060();
          __swift_instantiateConcreteTypeFromMangledName(&qword_1EEC35A08);
          v31 = swift_allocObject();
          *(_OWORD *)(v31 + 16) = xmmword_1AB963950;
          v36 = 0;
          v37 = 0xE000000000000000;
          sub_1AB962150();
          swift_bridgeObjectRelease();
          v36 = (id)0xD000000000000015;
          v37 = 0x80000001AB966720;
          sub_1AB962108();
          swift_bridgeObjectRelease();
          sub_1AB962108();
          v32 = v36;
          v33 = v37;
          *(_QWORD *)(v31 + 56) = v22;
          *(_QWORD *)(v31 + 32) = v32;
          *(_QWORD *)(v31 + 40) = v33;
          sub_1AB9621B0();
          sub_1AB95DC28(v26, v28);
          swift_bridgeObjectRelease();
          (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
        }
        else
        {
          v29 = v25;
          swift_bridgeObjectRelease();
          v30 = sub_1AB962030();

          swift_willThrow();
          MEMORY[0x1AF431B44](v30);
        }
      }
      else
      {
        __break(1u);
      }
    }
  }
  else
  {
    sub_1AB95D328((uint64_t)&v36);
  }
}

uint64_t sub_1AB95D810(uint64_t a1)
{
  return _s14AttributeGraph8ExternalV11descriptionSSvg_0(*(AG::swift::metadata **)(a1 + 16));
}

uint64_t Focus.description.getter(uint64_t a1, uint64_t a2, uint64_t a3, AG::swift::metadata *a4)
{
  return sub_1AB95DCAC(a3, a4, 547520738);
}

uint64_t sub_1AB95D840(uint64_t a1)
{
  return sub_1AB95DCAC(*(_QWORD *)(a1 + 16), *(AG::swift::metadata **)(a1 + 24), 547520738);
}

uint64_t Map.description.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, AG::swift::metadata *a5)
{
  return sub_1AB95DCAC(a4, a5, 2145230);
}

uint64_t sub_1AB95D890(uint64_t a1)
{
  return sub_1AB95DCAC(*(_QWORD *)(a1 + 16), *(AG::swift::metadata **)(a1 + 24), 2145230);
}

unint64_t sub_1AB95D8B8(uint64_t a1)
{
  uint64_t v2;

  sub_1AB9620E4();
  sub_1AB9621D4();
  sub_1AB9620FC();
  v2 = sub_1AB9621F8();
  swift_bridgeObjectRelease();
  return sub_1AB95D938(a1, v2);
}

unint64_t sub_1AB95D938(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v18;

  v3 = v2 + 64;
  v4 = -1 << *(_BYTE *)(v2 + 32);
  v5 = a2 & ~v4;
  if (((*(_QWORD *)(v2 + 64 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) != 0)
  {
    v6 = sub_1AB9620E4();
    v8 = v7;
    if (v6 == sub_1AB9620E4() && v8 == v9)
    {
LABEL_16:
      swift_bridgeObjectRelease_n();
      return v5;
    }
    v11 = sub_1AB962198();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v11 & 1) == 0)
    {
      v12 = ~v4;
      v5 = (v5 + 1) & v12;
      if (((*(_QWORD *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) != 0)
      {
        while (1)
        {
          v13 = sub_1AB9620E4();
          v15 = v14;
          if (v13 == sub_1AB9620E4() && v15 == v16)
            break;
          v18 = sub_1AB962198();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v18 & 1) == 0)
          {
            v5 = (v5 + 1) & v12;
            if (((*(_QWORD *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) != 0)
              continue;
          }
          return v5;
        }
        goto LABEL_16;
      }
    }
  }
  return v5;
}

uint64_t _sSo10AGGraphRefa14AttributeGraphE16stackDescription9maxFramesSSSi_tFZ_0(uint64_t a1)
{
  uint64_t inited;
  uint64_t v3;
  __CFString *v4;
  __CFString *v5;
  void *v6;
  id v7;
  uint64_t v9;
  _OWORD v10[2];
  _BYTE v11[24];
  uint64_t v12;

  __swift_instantiateConcreteTypeFromMangledName(&qword_1EEC35A10);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1AB963960;
  v3 = MEMORY[0x1E0DEA968];
  *(_QWORD *)(inited + 32) = CFSTR("format");
  *(_QWORD *)(inited + 40) = 0x65742F6B63617473;
  *(_QWORD *)(inited + 48) = 0xEA00000000007478;
  *(_QWORD *)(inited + 64) = v3;
  *(_QWORD *)(inited + 72) = CFSTR("max-frames");
  *(_QWORD *)(inited + 104) = MEMORY[0x1E0DEB418];
  *(_QWORD *)(inited + 80) = a1;
  v4 = CFSTR("format");
  v5 = CFSTR("max-frames");
  sub_1AB95D180(inited);
  type metadata accessor for AGDescriptionOption(0);
  sub_1AB95D298();
  v6 = (void *)sub_1AB962090();
  swift_bridgeObjectRelease();
  v7 = AGGraphDescription(0, v6);

  if (v7)
  {
    sub_1AB96212C();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v10, 0, sizeof(v10));
  }
  sub_1AB95D2E0((uint64_t)v10, (uint64_t)v11);
  if (v12)
  {
    if (swift_dynamicCast())
      return v9;
  }
  else
  {
    sub_1AB95D328((uint64_t)v11);
  }
  return 0;
}

uint64_t sub_1AB95DC28(uint64_t a1, unint64_t a2)
{
  uint64_t result;

  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2)
      return result;
    swift_release();
  }
  return swift_release();
}

uint64_t _s14AttributeGraph8ExternalV11descriptionSSvg_0(AG::swift::metadata *a1)
{
  __CFString *v1;
  uint64_t v2;

  v1 = AGTypeDescription(a1);
  v2 = sub_1AB9620E4();

  return v2;
}

uint64_t sub_1AB95DCAC(uint64_t a1, AG::swift::metadata *a2, uint64_t a3)
{
  __CFString *v3;

  v3 = AGTypeDescription(a2);
  sub_1AB9620E4();

  sub_1AB962108();
  swift_bridgeObjectRelease();
  return a3;
}

uint64_t sub_1AB95DD10(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EEC35A30);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

_OWORD *sub_1AB95DD58(_OWORD *a1, _OWORD *a2)
{
  __int128 v2;

  v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return a2;
}

void sub_1AB95DD68()
{
  JUMPOUT(0x1AF431C34);
}

id sub_1AB95DD74(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  _QWORD v6[2];

  v2 = sub_1AB95DEBC(*a1, a2, (AG::swift::metadata *)*a1);
  if (!v3)
    return 0;
  v6[0] = v2;
  v6[1] = v3;
  v4 = (void *)sub_1AB96218C();
  sub_1AB95DFC0((uint64_t)v6);
  return v4;
}

id sub_1AB95DDD0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;
  _QWORD v5[2];

  v1 = sub_1AB95DE58(*(_QWORD *)(a1 + 8));
  if (!v2)
    return 0;
  v5[0] = v1;
  v5[1] = v2;
  v3 = (void *)sub_1AB96218C();
  sub_1AB95DFC0((uint64_t)v5);
  return v3;
}

uint64_t sub_1AB95DE2C(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)(a1 + 64) + 24))(a2, *(_QWORD *)(a1 + 56));
}

uint64_t sub_1AB95DE58(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  MEMORY[0x1E0C80A78](a1);
  (*(void (**)(char *))(v2 + 16))((char *)&v4 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0));
  return sub_1AB9620F0();
}

uint64_t sub_1AB95DEBC(uint64_t a1, uint64_t a2, AG::swift::metadata *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __CFString *v7;
  __int128 v9[2];
  uint64_t v10;
  _QWORD v11[4];

  MEMORY[0x1E0C80A78](a1);
  (*(void (**)(char *))(v5 + 16))((char *)v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EEC35A38);
  if (swift_dynamicCast())
  {
    sub_1AB95E034(v9, (uint64_t)v11);
    __swift_project_boxed_opaque_existential_1(v11, v11[3]);
    v6 = sub_1AB962180();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v11);
  }
  else
  {
    v10 = 0;
    memset(v9, 0, sizeof(v9));
    sub_1AB95DFF4((uint64_t)v9);
    v7 = AGTypeDescription(a3);
    v6 = sub_1AB9620E4();

  }
  return v6;
}

uint64_t sub_1AB95DFC0(uint64_t a1)
{
  (*(void (**)(void))(*(_QWORD *)(MEMORY[0x1E0DEA968] - 8) + 8))();
  return a1;
}

uint64_t sub_1AB95DFF4(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EEC35A40);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1AB95E034(__int128 *a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;

  v2 = *a1;
  v3 = a1[1];
  *(_QWORD *)(a2 + 32) = *((_QWORD *)a1 + 4);
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + 16) = v3;
  return a2;
}

_QWORD *__swift_project_boxed_opaque_existential_1(_QWORD *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) & 0x20000) != 0)
    return (_QWORD *)(*result
                    + ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) + 16) & ~(unint64_t)*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80)));
  return result;
}

uint64_t __swift_destroy_boxed_opaque_existential_1(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 24) - 8);
  if ((*(_BYTE *)(v1 + 82) & 2) != 0)
    return swift_release();
  else
    return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t AGTupleType.init(_:)(uint64_t a1)
{
  uint64_t v1;

  v1 = AGNewTupleType(*(_QWORD *)(a1 + 16), a1 + 32);
  swift_bridgeObjectRelease();
  return v1;
}

BOOL AGTupleType.isEmpty.getter(_QWORD *a1)
{
  return AGTupleCount(a1) == 0;
}

uint64_t AGTupleType.indices.getter(_QWORD *a1)
{
  uint64_t result;

  result = AGTupleCount(a1);
  if ((result & 0x8000000000000000) == 0)
    return 0;
  __break(1u);
  return result;
}

_QWORD *AGTupleType.type(at:)(const char *a1, _QWORD *a2)
{
  return AGTupleElementType(a2, a1);
}

uint64_t AGTupleType.offset<A>(at:as:)(const char *a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  return AGTupleElementOffsetChecked(a3, a1, a4);
}

uint64_t AGTupleType.setElement<A>(in:at:from:options:)(char *a1, unint64_t a2, const char *a3, uint64_t a4, AG::swift::metadata *a5, AG::swift::metadata *a6)
{
  return AGTupleSetElement(a5, a1, a2, a3, a6, a4);
}

uint64_t AGTupleType.getElement<A>(in:at:to:options:)(const char *a1, unint64_t a2, void *a3, uint64_t a4, AG::swift::metadata *a5, AG::swift::metadata *a6)
{
  return AGTupleGetElement(a5, a1, a2, a3, a6, a4);
}

BOOL AGUnsafeTuple.isEmpty.getter(_QWORD *a1)
{
  return AGTupleCount(a1) == 0;
}

uint64_t AGUnsafeTuple.address<A>(as:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;

  if (a4 == a2)
    return a3;
  __break(1u);
  return result;
}

uint64_t AGUnsafeTuple.subscript.unsafeAddressor(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (a3 == result)
    return a2;
  __break(1u);
  return result;
}

uint64_t AGUnsafeTuple.subscript.unsafeAddressor(const char *a1, _QWORD *a2, uint64_t a3, _QWORD *a4)
{
  return a3 + AGTupleElementOffsetChecked(a2, a1, a4);
}

uint64_t AGUnsafeMutableTuple.init(with:)(uint64_t a1)
{
  AGTupleSize(a1);
  swift_slowAlloc();
  return a1;
}

uint64_t AGUnsafeMutableTuple.initialize<A>(at:to:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD v9[8];

  v9[2] = a5;
  v9[3] = a3;
  v9[4] = a4;
  v9[5] = a1;
  return sub_1AB9587C0(a2, (uint64_t)sub_1AB95E298, (uint64_t)v9, a5, MEMORY[0x1E0DEDCE8], MEMORY[0x1E0DEE9C0] + 8, MEMORY[0x1E0DEDD18], a8);
}

uint64_t sub_1AB95E298(const char *a1)
{
  uint64_t v1;

  return AGTupleSetElement(*(AG::swift::metadata **)(v1 + 24), *(char **)(v1 + 32), *(_QWORD *)(v1 + 40), a1, *(AG::swift::metadata **)(v1 + 16), 1);
}

Swift::Void __swiftcall AGUnsafeMutableTuple.deinitialize(at:)(Swift::Int at)
{
  _QWORD *v1;
  const char *v2;

  AGTupleDestroyElement(v1, v2, at);
}

Swift::Void __swiftcall AGUnsafeMutableTuple.deallocate(initialized:)(Swift::Bool initialized)
{
  uint64_t v1;
  uint64_t v2;

  if (initialized)
    AGTupleDestroy(v1, v2);
  JUMPOUT(0x1AF431C34);
}

uint64_t _sSo13AGUnsafeTuplea14AttributeGraphE7indicesSnySiGvg_0(_QWORD *a1)
{
  uint64_t result;

  result = AGTupleCount(a1);
  if ((result & 0x8000000000000000) == 0)
    return 0;
  __break(1u);
  return result;
}

uint64_t _sSo13AGUnsafeTuplea14AttributeGraphE7address2of2asSPyxGSi_xmtlF_0(const char *a1, uint64_t a2, _QWORD *a3, uint64_t a4, _QWORD *a5)
{
  return a4 + AGTupleElementOffsetChecked(a3, a1, a5);
}

uint64_t _sSo13AGUnsafeTuplea14AttributeGraphExycluig_0@<X0>(uint64_t result@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  if (a2 == result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a2 - 8) + 16))(a3);
  __break(1u);
  return result;
}

uint64_t AGUnsafeMutableTuple.subscript.setter(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a4 == a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a4 - 8) + 40))(a3, result, a4);
  __break(1u);
  return result;
}

uint64_t (*AGUnsafeMutableTuple.subscript.modify(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4))()
{
  uint64_t (*result)();

  if (a4 == a2)
    return nullsub_1;
  __break(1u);
  return result;
}

uint64_t _sSo13AGUnsafeTuplea14AttributeGraphEyxSicluig_0@<X0>(const char *a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v7;

  v7 = a3 + AGTupleElementOffsetChecked(a2, a1, a4);
  return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD *))(*(a4 - 1) + 16))(a5, v7, a4);
}

uint64_t AGUnsafeMutableTuple.subscript.setter(uint64_t a1, const char *a2, _QWORD *a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v7;

  v7 = a4 + AGTupleElementOffsetChecked(a3, a2, a5);
  return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD *))(*(a5 - 1) + 40))(v7, a1, a5);
}

uint64_t (*AGUnsafeMutableTuple.subscript.modify(uint64_t a1, const char *a2, _QWORD *a3, uint64_t a4, _QWORD *a5))()
{
  AGTupleElementOffsetChecked(a3, a2, a5);
  return nullsub_1;
}

_QWORD *sub_1AB95E4B4@<X0>(_QWORD *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;

  v4 = *(_QWORD *)(a3 + a2 - 8);
  if (v4 == *result)
    return (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)(v4 - 8) + 16))(a4, result[1]);
  __break(1u);
  return result;
}

uint64_t sub_1AB95E4E0(uint64_t result, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  v4 = *(_QWORD *)(a4 + a3 - 8);
  if (v4 == *a2)
    return (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)(v4 - 8) + 24))(a2[1], result);
  __break(1u);
  return result;
}

uint64_t sub_1AB95E510()
{
  return 8;
}

_QWORD *sub_1AB95E51C(_QWORD *result, _QWORD *a2)
{
  *a2 = *result;
  return result;
}

uint64_t sub_1AB95E528@<X0>(uint64_t a1@<X0>, const char **a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;

  v5 = *(const char **)((char *)a2 + a3 - 8);
  v6 = *(_QWORD *)(a1 + 8);
  v7 = v6 + AGTupleElementOffsetChecked(*(_QWORD **)a1, *a2, v5);
  return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD *))(*(v5 - 1) + 16))(a4, v7, v5);
}

uint64_t sub_1AB95E57C(uint64_t a1, uint64_t a2, const char **a3, uint64_t a4)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;

  v5 = *(const char **)((char *)a3 + a4 - 8);
  v6 = *(_QWORD *)(a2 + 8);
  v7 = v6 + AGTupleElementOffsetChecked(*(_QWORD **)a2, *a3, v5);
  return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD *))(*(v5 - 1) + 24))(v7, a1, v5);
}

uint64_t sub_1AB95E5D0()
{
  return 8;
}

uint64_t AGTypeID.description.getter(AG::swift::metadata *a1)
{
  __CFString *v1;
  uint64_t v2;

  v1 = AGTypeDescription(a1);
  v2 = sub_1AB9620E4();

  return v2;
}

uint64_t AGTypeID.forEachField(options:do:)(int a1, uint64_t a2, uint64_t a3, AG::swift::metadata *a4)
{
  return AGTypeApplyFields2(a4, a1, a2, a3);
}

uint64_t sub_1AB95E660()
{
  type metadata accessor for _Metadata(0);
  return sub_1AB9620A8();
}

uint64_t sub_1AB95E68C()
{
  return sub_1AB9621E0();
}

uint64_t sub_1AB95E6B4()
{
  return sub_1AB9621C8();
}

uint64_t sub_1AB95E6BC()
{
  AG::swift::metadata **v0;
  __CFString *v1;
  uint64_t v2;

  v1 = AGTypeDescription(*v0);
  v2 = sub_1AB9620E4();

  return v2;
}

BOOL static AGTypeSignature.== infix(_:_:)(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, unsigned int a6)
{
  return a1 == a4 && a2 == a5 && a3 == (unint64_t)a6;
}

BOOL sub_1AB95E854(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)a1 == *(_QWORD *)a2
      && *(_QWORD *)(a1 + 8) == *(_QWORD *)(a2 + 8)
      && *(_DWORD *)(a1 + 16) == (unint64_t)*(unsigned int *)(a2 + 16);
}

uint64_t compareValues<A>(_:_:mode:)(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD v9[4];
  int v10;
  unsigned __int8 v11;

  v9[2] = a4;
  v9[3] = a2;
  v10 = a3;
  sub_1AB9587C0(a1, (uint64_t)sub_1AB95E984, (uint64_t)v9, a4, MEMORY[0x1E0DEDCE8], MEMORY[0x1E0DEAFA0], MEMORY[0x1E0DEDD18], a8);
  return v11;
}

uint64_t compareValues<A>(_:_:options:)(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD v9[4];
  int v10;
  unsigned __int8 v11;

  v9[2] = a4;
  v9[3] = a2;
  v10 = a3;
  sub_1AB9587C0(a1, (uint64_t)sub_1AB95E984, (uint64_t)v9, a4, MEMORY[0x1E0DEDCE8], MEMORY[0x1E0DEAFA0], MEMORY[0x1E0DEDD18], a8);
  return v11;
}

uint64_t sub_1AB95E984(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return sub_1AB95E998(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t sub_1AB95E998(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;

  v9 = *(_QWORD *)(v8 + 24);
  v10 = *(_DWORD *)(v8 + 32);
  v13 = *(_QWORD *)(v8 + 16);
  v14 = a1;
  v15 = v10;
  return sub_1AB9587C0(v9, (uint64_t)sub_1AB95EAA4, (uint64_t)&v12, v13, MEMORY[0x1E0DEDCE8], MEMORY[0x1E0DEAFA0], MEMORY[0x1E0DEDD18], a8);
}

uint64_t withUnsafePointerToEnumCase<A>(of:do:)(_QWORD *a1, void (*a2)(_QWORD, uint64_t, uint64_t), int a3, AG::swift::metadata *this)
{
  return AGTypeApplyEnumData(this, a1, a2);
}

AG::swift::metadata *withUnsafeMutablePointerToEnumCase<A>(of:do:)(void **a1, void (*a2)(_QWORD, AG::swift::metadata *, uint64_t), int a3, AG::swift::metadata *this)
{
  return AGTypeApplyMutableEnumData(this, a1, a2);
}

uint64_t AGSetTypeForKey(void *a1, void *a2)
{
  id v3;
  id v4;

  v3 = a1;
  v4 = a2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ECEF2CD8);
  objc_msgSend(v3, sel_setObject_forKeyedSubscript_, sub_1AB9621A4(), v4);

  return swift_unknownObjectRelease();
}

uint64_t sub_1AB95EAA4@<X0>(unsigned __int8 *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;

  result = AGCompareValues(*(AG::LayoutDescriptor **)(v2 + 24), a1, *(AG::LayoutDescriptor **)(v2 + 16), (AG::swift::metadata *)(*(_DWORD *)(v2 + 32) | 0x100u));
  *a2 = result;
  return result;
}

uint64_t IndirectAttribute.init(source:)(unsigned int a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return AGGraphCreateIndirectAttribute2(a1, *(_QWORD *)(*(_QWORD *)(a2 - 8) + 64), a3, a4);
}

void IndirectAttribute.source.setter(const char *a1, uint64_t a2)
{
  AGGraphSetIndirectAttribute(a2, a1);
}

void (*IndirectAttribute.source.modify(_DWORD *a1, uint64_t a2))(unsigned int *a1)
{
  a1[1] = a2;
  *a1 = AGGraphGetIndirectAttribute(a2);
  return sub_1AB95EB3C;
}

void sub_1AB95EB3C(unsigned int *a1)
{
  AGGraphSetIndirectAttribute(a1[1], (const char *)*a1);
}

Swift::Void __swiftcall IndirectAttribute.resetSource()()
{
  uint64_t v0;
  const char *v1;

  AGGraphResetIndirectAttribute(v0, 0, v1);
}

unint64_t IndirectAttribute.dependency.getter(uint64_t a1, const char *a2)
{
  unsigned int IndirectDependency;
  uint64_t v3;

  IndirectDependency = AGGraphGetIndirectDependency(a1, a2);
  if (IndirectDependency == 2)
    v3 = 0;
  else
    v3 = IndirectDependency;
  return v3 | ((unint64_t)(IndirectDependency == 2) << 32);
}

void IndirectAttribute.dependency.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  if ((a1 & 0x100000000) != 0)
    v3 = 2;
  else
    v3 = a1;
  AGGraphSetIndirectDependency(a2, (const char *)v3);
}

void (*IndirectAttribute.dependency.modify(uint64_t a1, const char *a2))(unsigned int *a1)
{
  int IndirectDependency;
  int v4;

  *(_DWORD *)(a1 + 8) = (_DWORD)a2;
  IndirectDependency = AGGraphGetIndirectDependency((uint64_t)a2, a2);
  *(_DWORD *)(a1 + 12) = 2;
  if (IndirectDependency == 2)
    v4 = 0;
  else
    v4 = IndirectDependency;
  *(_DWORD *)a1 = v4;
  *(_BYTE *)(a1 + 4) = IndirectDependency == 2;
  return sub_1AB95B95C;
}

uint64_t IndirectAttribute.value.setter(uint64_t a1, int a2, uint64_t a3)
{
  return sub_1AB95EF34(a1, a2, a3, (uint64_t)sub_1AB95F4C8);
}

void (*IndirectAttribute.value.modify(_QWORD *a1, unint64_t a2, AG::swift::metadata *a3))(uint64_t **a1, char a2)
{
  _DWORD *v6;
  uint64_t v7;
  size_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  char *Value;
  void (*v13)(void *, char *, AG::swift::metadata *);

  v6 = malloc(0x38uLL);
  *a1 = v6;
  v6[12] = a2;
  v7 = *((_QWORD *)a3 - 1);
  *(_QWORD *)v6 = a3;
  *((_QWORD *)v6 + 1) = v7;
  v8 = *(_QWORD *)(v7 + 64);
  *((_QWORD *)v6 + 2) = malloc(v8);
  *((_QWORD *)v6 + 3) = malloc(v8);
  v9 = malloc(v8);
  *((_QWORD *)v6 + 4) = v9;
  Value = AGGraphGetValue(a2, 0, a3, v10, v11);
  v13 = *(void (**)(void *, char *, AG::swift::metadata *))(v7 + 16);
  *((_QWORD *)v6 + 5) = v13;
  v13(v9, Value, a3);
  return sub_1AB95ED3C;
}

void sub_1AB95ED3C(uint64_t **a1, char a2)
{
  sub_1AB95F118(a1, a2, (uint64_t)sub_1AB95F688, (uint64_t)sub_1AB95F688);
}

uint64_t IndirectAttribute.changedValue(options:)(uint64_t a1, const char *a2, unint64_t a3, AG::swift::metadata *a4, uint64_t a5)
{
  char *Value;
  char v8;
  char v9;

  Value = AGGraphGetValue(a3, a2, a4, (uint64_t)a4, a5);
  v9 = v8;
  (*(void (**)(uint64_t, char *, AG::swift::metadata *))(*((_QWORD *)a4 - 1) + 16))(a1, Value, a4);
  return v9 & 1;
}

uint64_t sub_1AB95EDAC(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  double v12;
  uint64_t v13;
  _BYTE *v14;
  void (*v15)(_BYTE *, double);
  uint64_t v16;
  void (*v17)(_BYTE *, uint64_t);
  _BYTE v19[15];
  _BYTE v20[16];
  uint64_t v21;
  int v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v7 = *(_QWORD *)(a4 + a3 - 8);
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](a1);
  v10 = &v19[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v12 = MEMORY[0x1E0C80A78](v11);
  v14 = &v19[-v13];
  v15 = *(void (**)(_BYTE *, double))(v8 + 16);
  v15(&v19[-v13], v12);
  LODWORD(a2) = *a2;
  ((void (*)(_BYTE *, _BYTE *, uint64_t))v15)(v10, v14, v7);
  v21 = v7;
  v22 = (int)a2;
  sub_1AB9587C0((uint64_t)v10, a5, (uint64_t)v20, v7, MEMORY[0x1E0DEDCE8], MEMORY[0x1E0DEAFA0], MEMORY[0x1E0DEDD18], v16);
  v17 = *(void (**)(_BYTE *, uint64_t))(v8 + 8);
  v17(v10, v7);
  return ((uint64_t (*)(_BYTE *, uint64_t))v17)(v14, v7);
}

uint64_t IndirectAttribute.wrappedValue.setter(uint64_t a1, int a2, uint64_t a3)
{
  return sub_1AB95EF34(a1, a2, a3, (uint64_t)sub_1AB95F688);
}

uint64_t sub_1AB95EF34(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  double v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  void (*v13)(char *, uint64_t);
  _BYTE v16[16];
  uint64_t v17;
  int v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v8 = *(_QWORD *)(a3 - 8);
  v9 = MEMORY[0x1E0C80A78](a1);
  v11 = &v16[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  (*(void (**)(char *, uint64_t, double))(v8 + 16))(v11, a1, v9);
  v17 = a3;
  v18 = a2;
  sub_1AB9587C0((uint64_t)v11, a4, (uint64_t)v16, a3, MEMORY[0x1E0DEDCE8], MEMORY[0x1E0DEAFA0], MEMORY[0x1E0DEDD18], v12);
  v13 = *(void (**)(char *, uint64_t))(v8 + 8);
  v13(v11, a3);
  return ((uint64_t (*)(uint64_t, uint64_t))v13)(a1, a3);
}

void (*IndirectAttribute.wrappedValue.modify(_QWORD *a1, unint64_t a2, AG::swift::metadata *a3))(uint64_t **a1, char a2)
{
  _DWORD *v6;
  uint64_t v7;
  size_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  char *Value;
  void (*v13)(void *, char *, AG::swift::metadata *);

  v6 = malloc(0x38uLL);
  *a1 = v6;
  v6[12] = a2;
  v7 = *((_QWORD *)a3 - 1);
  *(_QWORD *)v6 = a3;
  *((_QWORD *)v6 + 1) = v7;
  v8 = *(_QWORD *)(v7 + 64);
  *((_QWORD *)v6 + 2) = malloc(v8);
  *((_QWORD *)v6 + 3) = malloc(v8);
  v9 = malloc(v8);
  *((_QWORD *)v6 + 4) = v9;
  Value = AGGraphGetValue(a2, 0, a3, v10, v11);
  v13 = *(void (**)(void *, char *, AG::swift::metadata *))(v7 + 16);
  *((_QWORD *)v6 + 5) = v13;
  v13(v9, Value, a3);
  return sub_1AB95ED3C;
}

void sub_1AB95F118(uint64_t **a1, char a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(void *, uint64_t);
  uint64_t v18;
  int v19;
  uint64_t v20;
  _BYTE v21[16];
  uint64_t v22;
  int v23;

  v7 = *a1;
  v8 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))(*a1)[5])((*a1)[3], (*a1)[4], **a1);
  if ((a2 & 1) != 0)
  {
    v9 = (void *)v7[4];
    v11 = (void *)v7[2];
    v10 = (void *)v7[3];
    v12 = *v7;
    v13 = v7[1];
    v14 = *((_DWORD *)v7 + 12);
    v15 = ((uint64_t (*)(void *, void *, uint64_t))v7[5])(v11, v10, *v7);
    MEMORY[0x1E0C80A78](v15);
    v22 = v12;
    v23 = v14;
    sub_1AB9587C0((uint64_t)v11, a4, (uint64_t)v21, v12, MEMORY[0x1E0DEDCE8], MEMORY[0x1E0DEAFA0], MEMORY[0x1E0DEDD18], v16);
    v17 = *(void (**)(void *, uint64_t))(v13 + 8);
    v17(v11, v12);
  }
  else
  {
    v10 = (void *)v7[3];
    v9 = (void *)v7[4];
    v18 = v7[1];
    v11 = (void *)v7[2];
    v12 = *v7;
    MEMORY[0x1E0C80A78](v8);
    v22 = v12;
    v23 = v19;
    sub_1AB9587C0((uint64_t)v10, a3, (uint64_t)v21, v12, MEMORY[0x1E0DEDCE8], MEMORY[0x1E0DEAFA0], MEMORY[0x1E0DEDD18], v20);
    v17 = *(void (**)(void *, uint64_t))(v18 + 8);
  }
  v17(v10, v12);
  v17(v9, v12);
  free(v9);
  free(v10);
  free(v11);
  free(v7);
}

uint64_t IndirectAttribute.subscript.getter(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  const char *v5;
  char v6;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  int v19;
  _QWORD *v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v4 = *a1;
  v5 = (const char *)sub_1AB962138();
  if ((v6 & 1) == 0)
    return AGGraphCreateOffsetAttribute2(a2, v5, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*MEMORY[0x1E0DEE2A8] + v4 + 8) - 8) + 64));
  v19 = a2;
  v20 = a1;
  MEMORY[0x1E0C80A78](v5);
  v8 = (uint64_t *)(v4 + *MEMORY[0x1E0DEE2A8]);
  v15 = v8[1];
  v16 = type metadata accessor for Focus(0, *v8, v15, v9);
  v17 = MEMORY[0x1AF431BE0](&protocol conformance descriptor for Focus<A, B>, v16);
  v12 = type metadata accessor for Attribute(0, v15, v10, v11);
  swift_retain();
  sub_1AB9587C0((uint64_t)&v19, (uint64_t)sub_1AB958FBC, (uint64_t)&v14, v16, MEMORY[0x1E0DEDCE8], v12, MEMORY[0x1E0DEDD18], v13);
  swift_release();
  return v18;
}

BOOL static IndirectAttribute.== infix(_:_:)(int a1, int a2)
{
  return a1 == a2;
}

uint64_t IndirectAttribute.hash(into:)()
{
  return sub_1AB9621EC();
}

uint64_t IndirectAttribute.hashValue.getter()
{
  sub_1AB9621D4();
  sub_1AB9621EC();
  return sub_1AB9621F8();
}

uint64_t sub_1AB95F4C0()
{
  return IndirectAttribute.hashValue.getter();
}

uint64_t sub_1AB95F4C8@<X0>(char *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;

  return sub_1AB95C3BC((char *)*(unsigned int *)(v2 + 24), a1, *(AG::LayoutDescriptor **)(v2 + 16), a2);
}

void sub_1AB95F4E8()
{
  JUMPOUT(0x1AF431BE0);
}

uint64_t sub_1AB95F4F8@<X0>(unsigned int *a1@<X0>, _DWORD *a2@<X8>)
{
  uint64_t result;

  result = AGGraphGetIndirectAttribute(*a1);
  *a2 = result;
  return result;
}

void sub_1AB95F520(unsigned int *a1, unsigned int *a2)
{
  AGGraphSetIndirectAttribute(*a2, (const char *)*a1);
}

uint64_t sub_1AB95F530()
{
  return 8;
}

_QWORD *sub_1AB95F53C(_QWORD *result, _QWORD *a2)
{
  *a2 = *result;
  return result;
}

uint64_t sub_1AB95F548@<X0>(unsigned int *a1@<X0>, const char *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result;
  int v5;

  result = AGGraphGetIndirectDependency(*a1, a2);
  if ((_DWORD)result == 2)
    v5 = 0;
  else
    v5 = result;
  *(_DWORD *)a3 = v5;
  *(_BYTE *)(a3 + 4) = (_DWORD)result == 2;
  return result;
}

void sub_1AB95F58C(uint64_t a1, unsigned int *a2)
{
  int *v2;

  if (*(_BYTE *)(a1 + 4))
    v2 = &AGAttributeNil;
  else
    v2 = (int *)a1;
  AGGraphSetIndirectDependency(*a2, (const char *)*v2);
}

uint64_t sub_1AB95F5B0()
{
  return 8;
}

uint64_t sub_1AB95F5C0(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  return sub_1AB95EDAC(a1, a2, a3, a4, (uint64_t)sub_1AB95F688);
}

uint64_t sub_1AB95F610()
{
  return 8;
}

uint64_t sub_1AB95F620(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  return sub_1AB95EDAC(a1, a2, a3, a4, (uint64_t)sub_1AB95F688);
}

uint64_t sub_1AB95F670()
{
  return 8;
}

uint64_t type metadata accessor for IndirectAttribute(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for IndirectAttribute);
}

uint64_t sub_1AB95F688@<X0>(char *a1@<X0>, _BYTE *a2@<X8>)
{
  return sub_1AB95F4C8(a1, a2);
}

unint64_t AGSubgraphRef.addObserver(_:)(const char *a1, uint64_t a2)
{
  uint64_t v2;

  return AGSubgraphAddObserver(v2, a1, a2);
}

uint64_t AGSubgraphRef.apply<A>(_:)(void (*a1)(void))
{
  _QWORD *v1;
  uint64_t v3;
  _QWORD *v4;

  v3 = AGGraphClearUpdate();
  v4 = (id)AGSubgraphGetCurrent();
  AGSubgraphSetCurrent(v1);
  a1();
  AGSubgraphSetCurrent(v4);

  return AGGraphSetUpdate(v3);
}

void AGSubgraphRef.forEach(_:_:)(int a1, void (*a2)(void))
{
  uint64_t v2;

  AGSubgraphApply(v2, a1, a2);
}

uint64_t static AGSubgraphRef.beginTreeElement<A>(value:flags:)(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t result;

  result = AGSubgraphShouldRecordTree();
  if ((_DWORD)result)
    return AGSubgraphBeginTreeElement(a1, a3, a2);
  return result;
}

uint64_t static AGSubgraphRef.addTreeValue<A>(_:forKey:flags:)(uint64_t a1, char *a2, int a3, uint64_t a4)
{
  uint64_t result;

  result = AGSubgraphShouldRecordTree();
  if ((_DWORD)result)
    return AGSubgraphAddTreeValue(a1, a4, a2, a3);
  return result;
}

uint64_t static AGSubgraphRef.endTreeElement<A>(value:)()
{
  uint64_t result;

  result = AGSubgraphShouldRecordTree();
  if ((_DWORD)result)
    return AGSubgraphEndTreeElement();
  return result;
}

unint64_t AGTreeElement.value.getter(unsigned int a1)
{
  unsigned int Value;
  uint64_t v2;

  Value = AGTreeElementGetValue(a1);
  if (Value == 2)
    v2 = 0;
  else
    v2 = Value;
  return v2 | ((unint64_t)(Value == 2) << 32);
}

__n128 sub_1AB95F85C@<Q0>(__n128 *a1@<X8>)
{
  __n128 *v1;
  unint64_t v2;
  __n128 result;

  v2 = v1[1].n128_u64[0];
  result = *v1;
  *a1 = *v1;
  a1[1].n128_u64[0] = v2;
  return result;
}

uint64_t sub_1AB95F870()
{
  return 0;
}

uint64_t sub_1AB95F878()
{
  uint64_t *v0;

  return sub_1AB95FCF8(*v0, v0[1], v0[2]);
}

_QWORD *sub_1AB95F884(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;

  return sub_1AB95F890(a1, a2, a3, *v3, v3[1], v3[2]);
}

_QWORD *sub_1AB95F890(_QWORD *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t NextChild;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v6 = result;
  v11 = a4;
  v12 = a5;
  v13 = a6;
  if (!a2)
  {
    v7 = 0;
    goto LABEL_11;
  }
  v7 = a3;
  if (!a3)
  {
LABEL_11:
    *v6 = a4;
    v6[1] = a5;
    v6[2] = a6;
    return (_QWORD *)v7;
  }
  if ((a3 & 0x8000000000000000) == 0)
  {
    NextChild = AGTreeElementGetNextChild((uint64_t)&v11);
    v10 = 0;
    if (NextChild)
    {
      while (1)
      {
        *(_QWORD *)(a2 + 8 * v10) = NextChild;
        if (v7 - 1 == v10)
          break;
        NextChild = AGTreeElementGetNextChild((uint64_t)&v11);
        ++v10;
        if (!NextChild)
          goto LABEL_7;
      }
      a4 = v11;
      a5 = v12;
    }
    else
    {
LABEL_7:
      a4 = v11;
      a5 = v12;
      v7 = v10;
    }
    a6 = v13;
    goto LABEL_11;
  }
  __break(1u);
  return result;
}

_QWORD *sub_1AB95F93C(_QWORD *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t NextValue;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = result;
  v10 = a4;
  v11 = a5;
  if (!a2)
  {
    v6 = 0;
    goto LABEL_10;
  }
  v6 = a3;
  if (!a3)
  {
LABEL_10:
    *v5 = a4;
    v5[1] = a5;
    return (_QWORD *)v6;
  }
  if ((a3 & 0x8000000000000000) == 0)
  {
    NextValue = AGTreeElementGetNextValue((uint64_t)&v10);
    v9 = 0;
    if (NextValue)
    {
      while (1)
      {
        *(_QWORD *)(a2 + 8 * v9) = NextValue;
        if (v6 - 1 == v9)
          break;
        NextValue = AGTreeElementGetNextValue((uint64_t)&v10);
        ++v9;
        if (!NextValue)
          goto LABEL_7;
      }
      a4 = v10;
      a5 = v11;
    }
    else
    {
LABEL_7:
      a4 = v10;
      a5 = v11;
      v6 = v9;
    }
    goto LABEL_10;
  }
  __break(1u);
  return result;
}

uint64_t sub_1AB95F9DC()
{
  return sub_1AB962114();
}

uint64_t sub_1AB95F9FC@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;

  result = AGTreeElementGetNextChild(v1);
  *a1 = result;
  return result;
}

uint64_t sub_1AB95FA24()
{
  uint64_t *v0;

  return sub_1AB95FE5C(*v0, v0[1]);
}

_QWORD *sub_1AB95FA2C(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;

  return sub_1AB95F93C(a1, a2, a3, *v3, v3[1]);
}

uint64_t sub_1AB95FA34@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;

  result = AGTreeElementGetNextValue(v1);
  *a1 = result;
  return result;
}

unint64_t AGTreeElementNodeIterator.next()()
{
  _QWORD *v0;
  unsigned int NextNode;
  uint64_t v2;

  NextNode = AGTreeElementGetNextNode(v0);
  if (NextNode == 2)
    v2 = 0;
  else
    v2 = NextNode;
  return v2 | ((unint64_t)(NextNode == 2) << 32);
}

__n128 sub_1AB95FAA0@<Q0>(__n128 *a1@<X8>)
{
  __n128 *v1;
  __n128 result;

  result = *v1;
  *a1 = *v1;
  return result;
}

uint64_t sub_1AB95FAAC()
{
  uint64_t *v0;

  return sub_1AB95FB84(*v0, v0[1]);
}

uint64_t sub_1AB95FAB4(uint64_t a1, _DWORD *a2, uint64_t a3)
{
  uint64_t *v3;

  return sub_1AB95FFBC(a1, a2, a3, *v3, v3[1]);
}

uint64_t sub_1AB95FABC@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;
  uint64_t result;
  int v4;

  result = AGTreeElementGetNextNode(v1);
  if ((_DWORD)result == 2)
    v4 = 0;
  else
    v4 = result;
  *(_DWORD *)a1 = v4;
  *(_BYTE *)(a1 + 4) = (_DWORD)result == 2;
  return result;
}

uint64_t sub_1AB95FB00()
{
  return sub_1AB9335D8(&qword_1EEC35A48, (uint64_t (*)(uint64_t))type metadata accessor for Children, (uint64_t)&protocol conformance descriptor for AGTreeElementChildIterator);
}

uint64_t sub_1AB95FB2C()
{
  return sub_1AB9335D8(&qword_1EEC35A50, (uint64_t (*)(uint64_t))type metadata accessor for Values, (uint64_t)&protocol conformance descriptor for AGTreeElementValueIterator);
}

uint64_t sub_1AB95FB58()
{
  return sub_1AB9335D8(&qword_1EEC35A58, (uint64_t (*)(uint64_t))type metadata accessor for Nodes, (uint64_t)&protocol conformance descriptor for AGTreeElementNodeIterator);
}

uint64_t sub_1AB95FB84(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  _QWORD *v3;
  uint64_t v4;
  int v5;
  _DWORD *v6;
  unint64_t v7;
  int64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  BOOL v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD v21[2];

  v21[0] = a1;
  v21[1] = a2;
  result = AGTreeElementGetNextNode(v21);
  v3 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  if ((_DWORD)result == 2)
  {
    v4 = 0;
LABEL_22:
    v18 = v3[3];
    if (v18 < 2)
      return (uint64_t)v3;
    v19 = v18 >> 1;
    v17 = __OFSUB__(v19, v4);
    v20 = v19 - v4;
    if (!v17)
    {
      v3[2] = v20;
      return (uint64_t)v3;
    }
  }
  else
  {
    v5 = result;
    v4 = 0;
    v6 = (_DWORD *)(MEMORY[0x1E0DEE9D8] + 32);
    while (1)
    {
      if (!v4)
      {
        v7 = v3[3];
        if ((uint64_t)((v7 >> 1) + 0x4000000000000000) < 0)
          goto LABEL_27;
        v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
        if (v8 <= 1)
          v9 = 1;
        else
          v9 = v8;
        __swift_instantiateConcreteTypeFromMangledName(&qword_1EEC35A60);
        v10 = (_QWORD *)swift_allocObject();
        v11 = _swift_stdlib_malloc_size(v10);
        v12 = v11 - 32;
        if (v11 < 32)
          v12 = v11 - 29;
        v13 = v12 >> 2;
        v10[2] = v9;
        v10[3] = 2 * (v12 >> 2);
        v14 = (unint64_t)(v10 + 4);
        v15 = v3[3] >> 1;
        if (v3[2])
        {
          if (v10 != v3 || v14 >= (unint64_t)v3 + 4 * v15 + 32)
            memmove(v10 + 4, v3 + 4, 4 * v15);
          v3[2] = 0;
        }
        v6 = (_DWORD *)(v14 + 4 * v15);
        v4 = (v13 & 0x7FFFFFFFFFFFFFFFLL) - v15;
        result = swift_release();
        v3 = v10;
      }
      v17 = __OFSUB__(v4--, 1);
      if (v17)
        break;
      *v6++ = v5;
      result = AGTreeElementGetNextNode(v21);
      v5 = result;
      if ((_DWORD)result == 2)
        goto LABEL_22;
    }
    __break(1u);
LABEL_27:
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_1AB95FCF8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  unint64_t v8;
  int64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  BOOL v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  _QWORD v22[3];

  v22[0] = a1;
  v22[1] = a2;
  v22[2] = a3;
  result = AGTreeElementGetNextChild((uint64_t)v22);
  v4 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  if (result)
  {
    v5 = result;
    v6 = 0;
    v7 = (uint64_t *)(MEMORY[0x1E0DEE9D8] + 32);
    while (1)
    {
      if (!v6)
      {
        v8 = v4[3];
        if ((uint64_t)((v8 >> 1) + 0x4000000000000000) < 0)
          goto LABEL_28;
        v9 = v8 & 0xFFFFFFFFFFFFFFFELL;
        if (v9 <= 1)
          v10 = 1;
        else
          v10 = v9;
        __swift_instantiateConcreteTypeFromMangledName(qword_1EEC35A70);
        v11 = (_QWORD *)swift_allocObject();
        v12 = _swift_stdlib_malloc_size(v11);
        v13 = v12 - 32;
        if (v12 < 32)
          v13 = v12 - 25;
        v14 = v13 >> 3;
        v11[2] = v10;
        v11[3] = 2 * (v13 >> 3);
        v15 = (unint64_t)(v11 + 4);
        v16 = v4[3] >> 1;
        if (v4[2])
        {
          if (v11 != v4 || v15 >= (unint64_t)&v4[v16 + 4])
            memmove(v11 + 4, v4 + 4, 8 * v16);
          v4[2] = 0;
        }
        v7 = (uint64_t *)(v15 + 8 * v16);
        v6 = (v14 & 0x7FFFFFFFFFFFFFFFLL) - v16;
        result = swift_release();
        v4 = v11;
      }
      v18 = __OFSUB__(v6--, 1);
      if (v18)
        break;
      *v7++ = v5;
      result = AGTreeElementGetNextChild((uint64_t)v22);
      v5 = result;
      if (!result)
        goto LABEL_23;
    }
    __break(1u);
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  v6 = 0;
LABEL_23:
  v19 = v4[3];
  if (v19 < 2)
    return (uint64_t)v4;
  v20 = v19 >> 1;
  v18 = __OFSUB__(v20, v6);
  v21 = v20 - v6;
  if (!v18)
  {
    v4[2] = v21;
    return (uint64_t)v4;
  }
LABEL_29:
  __break(1u);
  return result;
}

uint64_t sub_1AB95FE5C(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  unint64_t v7;
  int64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  BOOL v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD v21[2];

  v21[0] = a1;
  v21[1] = a2;
  result = AGTreeElementGetNextValue((uint64_t)v21);
  v3 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  if (result)
  {
    v4 = result;
    v5 = 0;
    v6 = (uint64_t *)(MEMORY[0x1E0DEE9D8] + 32);
    while (1)
    {
      if (!v5)
      {
        v7 = v3[3];
        if ((uint64_t)((v7 >> 1) + 0x4000000000000000) < 0)
          goto LABEL_28;
        v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
        if (v8 <= 1)
          v9 = 1;
        else
          v9 = v8;
        __swift_instantiateConcreteTypeFromMangledName(&qword_1EEC35A68);
        v10 = (_QWORD *)swift_allocObject();
        v11 = _swift_stdlib_malloc_size(v10);
        v12 = v11 - 32;
        if (v11 < 32)
          v12 = v11 - 25;
        v13 = v12 >> 3;
        v10[2] = v9;
        v10[3] = 2 * (v12 >> 3);
        v14 = (unint64_t)(v10 + 4);
        v15 = v3[3] >> 1;
        if (v3[2])
        {
          if (v10 != v3 || v14 >= (unint64_t)&v3[v15 + 4])
            memmove(v10 + 4, v3 + 4, 8 * v15);
          v3[2] = 0;
        }
        v6 = (uint64_t *)(v14 + 8 * v15);
        v5 = (v13 & 0x7FFFFFFFFFFFFFFFLL) - v15;
        result = swift_release();
        v3 = v10;
      }
      v17 = __OFSUB__(v5--, 1);
      if (v17)
        break;
      *v6++ = v4;
      result = AGTreeElementGetNextValue((uint64_t)v21);
      v4 = result;
      if (!result)
        goto LABEL_23;
    }
    __break(1u);
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  v5 = 0;
LABEL_23:
  v18 = v3[3];
  if (v18 < 2)
    return (uint64_t)v3;
  v19 = v18 >> 1;
  v17 = __OFSUB__(v19, v5);
  v20 = v19 - v5;
  if (!v17)
  {
    v3[2] = v20;
    return (uint64_t)v3;
  }
LABEL_29:
  __break(1u);
  return result;
}

uint64_t sub_1AB95FFBC(uint64_t result, _DWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = (_QWORD *)result;
  v9 = a4;
  v10 = a5;
  if (!a2)
  {
    v6 = 0;
LABEL_14:
    *v5 = a4;
    v5[1] = a5;
    return v6;
  }
  v6 = a3;
  if (!a3)
  {
LABEL_13:
    a4 = v9;
    a5 = v10;
    goto LABEL_14;
  }
  if ((a3 & 0x8000000000000000) == 0)
  {
    result = AGTreeElementGetNextNode(&v9);
    if ((_DWORD)result == 2)
    {
      v8 = 0;
LABEL_6:
      a4 = v9;
      a5 = v10;
      v6 = v8;
      goto LABEL_14;
    }
    *a2 = result;
    if (v6 != 1)
    {
      v8 = 1;
      while (v6 != v8)
      {
        result = AGTreeElementGetNextNode(&v9);
        if ((_DWORD)result == 2)
          goto LABEL_6;
        a2[v8++] = result;
        if (v6 == v8)
          goto LABEL_13;
      }
      __break(1u);
      goto LABEL_16;
    }
    goto LABEL_13;
  }
LABEL_16:
  __break(1u);
  return result;
}

uint64_t sub_1AB960098@<X0>(void (*a1)(char *, char *)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X6>, uint64_t a6@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(char *, char *);
  uint64_t v28;

  v25 = a5;
  v26 = a2;
  v28 = a4;
  v27 = a1;
  v24 = a3;
  v9 = *(_QWORD *)(a3 - 8);
  v10 = ((uint64_t (*)(void))MEMORY[0x1E0C80A78])();
  v12 = (char *)&v24 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = *(_QWORD *)(v13 + 16);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = MEMORY[0x1E0C80A78](v10);
  v18 = (char *)&v24 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v16);
  v20 = (char *)&v24 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v21 + 16))(v20, v6);
  v22 = 1;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v20, 1, v14) != 1)
  {
    (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v18, v20, v14);
    v27(v18, v12);
    (*(void (**)(char *, uint64_t))(v15 + 8))(v18, v14);
    if (v7)
      return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v9 + 32))(v25, v12, v24);
    v22 = 0;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 56))(a6, v22, 1);
}

uint64_t AnyRuleContext.attribute.setter(uint64_t result)
{
  _DWORD *v1;

  *v1 = result;
  return result;
}

uint64_t (*AnyRuleContext.attribute.modify())()
{
  return nullsub_1;
}

uint64_t AnyRuleContext.unsafeCast<A>(to:)(uint64_t a1, uint64_t a2)
{
  return a2;
}

char *AnyRuleContext.subscript.unsafeAddressor(const char *a1, unint64_t a2, AG::swift::metadata *a3)
{
  return AGGraphGetInputValue(a2, a1, 0, a3);
}

uint64_t AnyRuleContext.subscript.getter@<X0>(const char *a1@<X0>, unint64_t a2@<X1>, AG::swift::metadata *a3@<X2>, uint64_t a4@<X8>)
{
  char *InputValue;

  InputValue = AGGraphGetInputValue(a2, a1, 0, a3);
  return (*(uint64_t (**)(uint64_t, char *, AG::swift::metadata *))(*((_QWORD *)a3 - 1) + 16))(a4, InputValue, a3);
}

uint64_t AnyRuleContext.subscript.getter@<X0>(unint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  int Attribute;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  _QWORD v13[3];
  int v14;
  int v15;
  BOOL v16;

  Attribute = AGWeakAttributeGetAttribute(a1);
  if (Attribute == 2)
    v10 = 0;
  else
    v10 = Attribute;
  v15 = v10;
  v16 = Attribute == 2;
  v13[2] = a3;
  v14 = a2;
  type metadata accessor for Attribute(255, a3, v8, v9);
  sub_1AB962120();
  return sub_1AB960098((void (*)(char *, char *))sub_1AB960C00, (uint64_t)v13, MEMORY[0x1E0DEDCE8], a3, v11, a4);
}

uint64_t AnyRuleContext.subscript.getter@<X0>(int a1@<W0>, int a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  int v7;
  uint64_t v8;
  _QWORD v10[3];
  int v11;
  int v12;
  BOOL v13;

  v10[2] = a3;
  if (a1 == 2)
    v7 = 0;
  else
    v7 = a1;
  v12 = v7;
  v13 = a1 == 2;
  v11 = a2;
  type metadata accessor for Attribute(255, a3, a3, a4);
  sub_1AB962120();
  return sub_1AB960098((void (*)(char *, char *))sub_1AB960C00, (uint64_t)v10, MEMORY[0x1E0DEDCE8], a3, v8, a5);
}

uint64_t AnyRuleContext.changedValue<A>(of:options:)(uint64_t a1, const char *a2, uint64_t a3, unint64_t a4, AG::swift::metadata *a5)
{
  char *InputValue;
  char v8;
  char v9;

  InputValue = AGGraphGetInputValue(a4, a2, a3, a5);
  v9 = v8;
  (*(void (**)(uint64_t, char *, AG::swift::metadata *))(*((_QWORD *)a5 - 1) + 16))(a1, InputValue, a5);
  return v9 & 1;
}

uint64_t AnyRuleContext.valueAndFlags<A>(of:options:)(uint64_t a1, const char *a2, uint64_t a3, unint64_t a4, AG::swift::metadata *a5)
{
  char *InputValue;
  uint64_t v8;
  uint64_t v9;

  InputValue = AGGraphGetInputValue(a4, a2, a3, a5);
  v9 = v8;
  (*(void (**)(uint64_t, char *, AG::swift::metadata *))(*((_QWORD *)a5 - 1) + 16))(a1, InputValue, a5);
  return v9;
}

unsigned int *AnyRuleContext.update(body:)(uint64_t (*a1)(void), int a2, char *a3)
{
  return AGGraphWithUpdate(a3, a1);
}

BOOL static AnyRuleContext.== infix(_:_:)(int a1, int a2)
{
  return a1 == a2;
}

uint64_t RuleContext.attribute.setter(uint64_t result)
{
  _DWORD *v1;

  *v1 = result;
  return result;
}

uint64_t (*RuleContext.attribute.modify())()
{
  return nullsub_1;
}

BOOL RuleContext.hasValue.getter(uint64_t a1, AG::swift::metadata *a2)
{
  return AGGraphGetOutputValue(a2, (const char *)a2) != 0;
}

uint64_t RuleContext.value.getter@<X0>(AG::swift::metadata *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t result;

  result = AGGraphGetOutputValue(a1, (const char *)a1);
  if (result)
    return (*(uint64_t (**)(uint64_t, uint64_t, AG::swift::metadata *))(*((_QWORD *)a1 - 1) + 16))(a2, result, a1);
  __break(1u);
  return result;
}

uint64_t sub_1AB960568@<X0>(const char *a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  AG::swift::metadata *v4;
  uint64_t result;

  v4 = *(AG::swift::metadata **)&a1[a2 - 8];
  result = AGGraphGetOutputValue(v4, a1);
  if (result)
    return (*(uint64_t (**)(uint64_t, uint64_t, AG::swift::metadata *))(*((_QWORD *)v4 - 1) + 16))(a3, result, v4);
  __break(1u);
  return result;
}

uint64_t RuleContext.value.unsafeAddressor(uint64_t a1, AG::swift::metadata *a2)
{
  uint64_t result;

  result = AGGraphGetOutputValue(a2, (const char *)a2);
  if (!result)
    __break(1u);
  return result;
}

uint64_t sub_1AB9605D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  double v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  _BYTE v11[16];
  _BYTE v12[16];
  uint64_t v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)(a4 + a3 - 8);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x1E0C80A78](a1);
  v8 = &v11[-v7];
  (*(void (**)(_BYTE *, double))(v5 + 16))(&v11[-v7], v6);
  v13 = v4;
  sub_1AB9587C0((uint64_t)v8, (uint64_t)sub_1AB960D8C, (uint64_t)v12, v4, MEMORY[0x1E0DEDCE8], MEMORY[0x1E0DEE9C0] + 8, MEMORY[0x1E0DEDD18], v9);
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v5 + 8))(v8, v4);
}

uint64_t RuleContext.value.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD v11[4];

  v11[2] = a3;
  sub_1AB9587C0(a1, (uint64_t)sub_1AB960C74, (uint64_t)v11, a3, MEMORY[0x1E0DEDCE8], MEMORY[0x1E0DEE9C0] + 8, MEMORY[0x1E0DEDD18], a8);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 8))(a1, a3);
}

void (*RuleContext.value.modify(_QWORD *a1, uint64_t a2, AG::swift::metadata *a3))(void **a1, char a2)
{
  _QWORD *v5;
  uint64_t v6;
  size_t v7;
  void *v8;
  const char *v9;
  uint64_t OutputValue;
  void (*v11)(void *, uint64_t, AG::swift::metadata *);

  v5 = malloc(0x28uLL);
  *a1 = v5;
  v6 = *((_QWORD *)a3 - 1);
  *v5 = a3;
  v5[1] = v6;
  v7 = *(_QWORD *)(v6 + 64);
  v5[2] = malloc(v7);
  v8 = malloc(v7);
  v5[3] = v8;
  OutputValue = AGGraphGetOutputValue(a3, v9);
  if (!OutputValue)
    __break(1u);
  v11 = *(void (**)(void *, uint64_t, AG::swift::metadata *))(v6 + 16);
  v5[4] = v11;
  v11(v8, OutputValue, a3);
  return sub_1AB9607F8;
}

void sub_1AB9607F8(void **a1, char a2)
{
  uint64_t *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void *, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE v13[16];
  uint64_t v14;

  v2 = (uint64_t *)*a1;
  if ((a2 & 1) != 0)
  {
    v3 = (void *)v2[3];
    v5 = v2[1];
    v4 = (void *)v2[2];
    v6 = *v2;
    v7 = ((uint64_t (*)(void *, void *, uint64_t))v2[4])(v4, v3, *v2);
    MEMORY[0x1E0C80A78](v7);
    v14 = v6;
    sub_1AB9587C0((uint64_t)v4, (uint64_t)sub_1AB960D8C, (uint64_t)v13, v6, MEMORY[0x1E0DEDCE8], MEMORY[0x1E0DEE9C0] + 8, MEMORY[0x1E0DEDD18], v8);
    v9 = *(void (**)(void *, uint64_t))(v5 + 8);
    v9(v4, v6);
    v9(v3, v6);
  }
  else
  {
    v4 = (void *)v2[2];
    v3 = (void *)v2[3];
    v10 = *v2;
    v11 = v2[1];
    MEMORY[0x1E0C80A78](a1);
    v14 = v10;
    sub_1AB9587C0((uint64_t)v3, (uint64_t)sub_1AB960D8C, (uint64_t)v13, v10, MEMORY[0x1E0DEDCE8], MEMORY[0x1E0DEE9C0] + 8, MEMORY[0x1E0DEDD18], v12);
    (*(void (**)(void *, uint64_t))(v11 + 8))(v3, v10);
  }
  free(v3);
  free(v4);
  free(v2);
}

char *RuleContext.subscript.unsafeAddressor(const char *a1, unint64_t a2, uint64_t a3, AG::swift::metadata *a4)
{
  return AGGraphGetInputValue(a2, a1, 0, a4);
}

uint64_t RuleContext.subscript.getter@<X0>(const char *a1@<X0>, unint64_t a2@<X1>, AG::swift::metadata *a3@<X3>, uint64_t a4@<X8>)
{
  char *InputValue;

  InputValue = AGGraphGetInputValue(a2, a1, 0, a3);
  return (*(uint64_t (**)(uint64_t, char *, AG::swift::metadata *))(*((_QWORD *)a3 - 1) + 16))(a4, InputValue, a3);
}

uint64_t RuleContext.subscript.getter@<X0>(unint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  int Attribute;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  _QWORD v15[4];
  int v16;
  int v17;
  BOOL v18;

  Attribute = AGWeakAttributeGetAttribute(a1);
  if (Attribute == 2)
    v12 = 0;
  else
    v12 = Attribute;
  v17 = v12;
  v18 = Attribute == 2;
  v15[2] = a3;
  v15[3] = a4;
  v16 = a2;
  type metadata accessor for Attribute(255, a4, v10, v11);
  sub_1AB962120();
  return sub_1AB960098((void (*)(char *, char *))sub_1AB960C9C, (uint64_t)v15, MEMORY[0x1E0DEDCE8], a4, v13, a5);
}

uint64_t RuleContext.subscript.getter@<X0>(int a1@<W0>, int a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  int v7;
  uint64_t v8;
  _QWORD v10[4];
  int v11;
  int v12;
  BOOL v13;

  if (a1 == 2)
    v7 = 0;
  else
    v7 = a1;
  v12 = v7;
  v13 = a1 == 2;
  v10[2] = a3;
  v10[3] = a4;
  v11 = a2;
  type metadata accessor for Attribute(255, a4, a3, a4);
  sub_1AB962120();
  return sub_1AB960098((void (*)(char *, char *))sub_1AB960C9C, (uint64_t)v10, MEMORY[0x1E0DEDCE8], a4, v8, a5);
}

uint64_t RuleContext.valueAndFlags<A>(of:options:)(uint64_t a1, const char *a2, uint64_t a3, unint64_t a4, uint64_t a5, AG::swift::metadata *a6)
{
  char *InputValue;
  uint64_t v9;
  uint64_t v10;

  InputValue = AGGraphGetInputValue(a4, a2, a3, a6);
  v10 = v9;
  (*(void (**)(uint64_t, char *, AG::swift::metadata *))(*((_QWORD *)a6 - 1) + 16))(a1, InputValue, a6);
  return v10;
}

uint64_t RuleContext.changedValue<A>(of:options:)(uint64_t a1, const char *a2, uint64_t a3, unint64_t a4, uint64_t a5, AG::swift::metadata *a6)
{
  char *InputValue;
  char v9;
  char v10;

  InputValue = AGGraphGetInputValue(a4, a2, a3, a6);
  v10 = v9;
  (*(void (**)(uint64_t, char *, AG::swift::metadata *))(*((_QWORD *)a6 - 1) + 16))(a1, InputValue, a6);
  return v10 & 1;
}

unsigned int *RuleContext.update(body:)(uint64_t (*a1)(void), int a2, char *a3)
{
  return AGGraphWithUpdate(a3, a1);
}

BOOL static RuleContext.== infix(_:_:)(int a1, int a2)
{
  return a1 == a2;
}

BOOL sub_1AB960BF4(int *a1, int *a2)
{
  return static RuleContext.== infix(_:_:)(*a1, *a2);
}

uint64_t sub_1AB960C00@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1AB960C14(a1, a2);
}

uint64_t sub_1AB960C14@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  AG::swift::metadata *v4;
  char *InputValue;

  v4 = *(AG::swift::metadata **)(v2 + 16);
  InputValue = AGGraphGetInputValue(*(unsigned int *)(v2 + 24), (const char *)*a1, 0, v4);
  return (*(uint64_t (**)(uint64_t, char *, AG::swift::metadata *))(*((_QWORD *)v4 - 1) + 16))(a2, InputValue, v4);
}

uint64_t sub_1AB960C74(unsigned __int8 *a1)
{
  uint64_t v1;

  return AGGraphSetOutputValue(a1, *(AG::LayoutDescriptor **)(v1 + 16));
}

uint64_t sub_1AB960C9C@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1AB960CB0(a1, a2);
}

uint64_t sub_1AB960CB0@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  AG::swift::metadata *v4;
  char *InputValue;

  v4 = *(AG::swift::metadata **)(v2 + 24);
  InputValue = AGGraphGetInputValue(*(unsigned int *)(v2 + 32), (const char *)*a1, 0, v4);
  return (*(uint64_t (**)(uint64_t, char *, AG::swift::metadata *))(*((_QWORD *)v4 - 1) + 16))(a2, InputValue, v4);
}

uint64_t sub_1AB960D14(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1AB9605D0(a1, a2, a3, a4);
}

uint64_t sub_1AB960D58()
{
  return 8;
}

_QWORD *sub_1AB960D64(_QWORD *result, _QWORD *a2)
{
  *a2 = *result;
  return result;
}

ValueMetadata *type metadata accessor for AnyRuleContext()
{
  return &type metadata for AnyRuleContext;
}

uint64_t type metadata accessor for RuleContext(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for RuleContext);
}

uint64_t sub_1AB960D8C(unsigned __int8 *a1)
{
  return sub_1AB960C74(a1);
}

uint64_t static External.comparisonMode.getter()
{
  return 3;
}

uint64_t Focus.root.setter(uint64_t result)
{
  _DWORD *v1;

  *v1 = result;
  return result;
}

uint64_t (*Focus.root.modify())()
{
  return nullsub_1;
}

uint64_t Focus.keyPath.getter()
{
  return swift_retain();
}

uint64_t Focus.keyPath.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_release();
  *(_QWORD *)(v1 + 8) = a1;
  return result;
}

uint64_t (*Focus.keyPath.modify())()
{
  return nullsub_1;
}

uint64_t Focus.value.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  unint64_t v7;
  AG::swift::metadata *v8;
  uint64_t v9;
  uint64_t v10;
  char *Value;
  uint64_t v13;

  v4 = *(_QWORD *)(a3 - 8);
  MEMORY[0x1E0C80A78](a1);
  v6 = (char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  Value = AGGraphGetValue(v7, 0, v8, v9, v10);
  (*(void (**)(char *, char *, uint64_t))(v4 + 16))(v6, Value, a3);
  swift_getAtKeyPath();
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, a3);
}

uint64_t sub_1AB960EB0(uint64_t a1)
{
  unsigned int *v1;
  AG::swift::metadata *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *Value;
  uint64_t v10;

  v2 = *(AG::swift::metadata **)(a1 + 16);
  v3 = *((_QWORD *)v2 - 1);
  MEMORY[0x1E0C80A78](a1);
  v5 = (char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  Value = AGGraphGetValue(*v1, 0, v2, v6, v7);
  (*(void (**)(char *, char *, AG::swift::metadata *))(v3 + 16))(v5, Value, v2);
  swift_getAtKeyPath();
  return (*(uint64_t (**)(char *, AG::swift::metadata *))(v3 + 8))(v5, v2);
}

uint64_t Map.arg.setter(uint64_t result)
{
  _DWORD *v1;

  *v1 = result;
  return result;
}

uint64_t (*Map.arg.modify())()
{
  return nullsub_1;
}

uint64_t Map.body.getter(uint64_t a1, uint64_t a2)
{
  swift_retain();
  return a2;
}

uint64_t Map.value.getter(uint64_t a1, void (*a2)(char *), uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  unint64_t v9;
  AG::swift::metadata *v10;
  uint64_t v11;
  char *Value;
  uint64_t v14;

  v6 = *(_QWORD *)(a4 - 8);
  MEMORY[0x1E0C80A78](a1);
  v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  Value = AGGraphGetValue(v9, 0, v10, (uint64_t)v10, v11);
  (*(void (**)(char *, char *, uint64_t))(v6 + 16))(v8, Value, a4);
  a2(v8);
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, a4);
}

uint64_t sub_1AB96104C(uint64_t a1)
{
  unsigned int *v1;
  AG::swift::metadata *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  void (*v6)(char *);
  uint64_t v7;
  uint64_t v8;
  char *Value;
  uint64_t v11;

  v2 = *(AG::swift::metadata **)(a1 + 16);
  v3 = *((_QWORD *)v2 - 1);
  MEMORY[0x1E0C80A78](a1);
  v5 = (char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = (void (*)(char *))*((_QWORD *)v1 + 1);
  Value = AGGraphGetValue(*v1, 0, v2, v7, v8);
  (*(void (**)(char *, char *, AG::swift::metadata *))(v3 + 16))(v5, Value, v2);
  v6(v5);
  return (*(uint64_t (**)(char *, AG::swift::metadata *))(v3 + 8))(v5, v2);
}

uint64_t sub_1AB9610F0(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t sub_1AB961130(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_release();
  return a1;
}

uint64_t sub_1AB961168(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 16))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t sub_1AB9611B0(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 16) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

uint64_t sub_1AB9611F0()
{
  return swift_release();
}

uint64_t sub_1AB9611F8(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  v3 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v3;
  swift_retain();
  return a1;
}

uint64_t sub_1AB96122C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  v3 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v3;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t sub_1AB96126C(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_release();
  return a1;
}

uint64_t sub_1AB9612A4(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 24))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t sub_1AB9612EC(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 24) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

uint64_t type metadata accessor for Map(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for Map);
}

uint64_t static PointerOffset.offset(_:)(uint64_t (*a1)(uint64_t), uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (*(_QWORD *)(*(_QWORD *)(a4 - 8) + 64))
    return a1(1);
  else
    return 0;
}

uint64_t PointerOffset.byteOffset.setter(uint64_t result)
{
  _QWORD *v1;

  *v1 = result;
  return result;
}

uint64_t (*PointerOffset.byteOffset.modify())()
{
  return nullsub_1;
}

uint64_t static PointerOffset.invalidScenePointer()()
{
  return 1;
}

uint64_t static PointerOffset.of(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[6];

  v9[2] = a2;
  v9[3] = a3;
  v6 = type metadata accessor for PointerOffset(0, a2, a3, a4);
  sub_1AB9587C0(a1, (uint64_t)sub_1AB961410, (uint64_t)v9, a3, MEMORY[0x1E0DEDCE8], v6, MEMORY[0x1E0DEDD18], v7);
  return v9[5];
}

uint64_t sub_1AB961410@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = result - 1;
  return result;
}

uint64_t static PointerOffset.+ infix<A>(_:_:)(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  uint64_t result;

  v2 = __OFADD__(a1, a2);
  result = a1 + a2;
  if (v2)
    __break(1u);
  return result;
}

uint64_t PointerOffset<>.init()()
{
  return 0;
}

uint64_t static UnsafePointer.+ infix<A>(_:_:)(uint64_t a1, uint64_t a2)
{
  return a1 + a2;
}

uint64_t UnsafePointer.subscript.unsafeAddressor(uint64_t a1, uint64_t a2)
{
  return a2 + a1;
}

uint64_t UnsafePointer.subscript.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 16))(a4, a2 + a1, a3);
}

uint64_t UnsafeMutablePointer.subscript.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a5 - 8) + 40))(a3 + a2, a1, a5);
}

uint64_t (*UnsafeMutablePointer.subscript.modify())()
{
  return nullsub_1;
}

uint64_t sub_1AB961488@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)(*(_QWORD *)((char *)a2 + a3 - 8) - 8) + 16))(a4, *a1 + *a2);
}

uint64_t sub_1AB9614AC(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t a4)
{
  return (*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(*(_QWORD *)(*(_QWORD *)((char *)a3 + a4 - 8) - 8) + 24))(*a2 + *a3, a1, *(_QWORD *)((char *)a3 + a4 - 8));
}

uint64_t sub_1AB9614D8()
{
  return 16;
}

__n128 sub_1AB9614E4(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

unint64_t AnyOptionalAttribute.attribute.getter(unsigned int a1)
{
  uint64_t v1;

  if (a1 == 2)
    v1 = 0;
  else
    v1 = a1;
  return v1 | ((unint64_t)(a1 == 2) << 32);
}

uint64_t AnyOptionalAttribute.init(_:)(uint64_t result)
{
  if ((result & 0x100000000) != 0)
    return 2;
  else
    return result;
}

unint64_t OptionalAttribute.attribute.getter(unsigned int a1)
{
  uint64_t v1;

  if (a1 == 2)
    v1 = 0;
  else
    v1 = a1;
  return v1 | ((unint64_t)(a1 == 2) << 32);
}

uint64_t AnyOptionalAttribute.identifier.setter(uint64_t result)
{
  _DWORD *v1;

  *v1 = result;
  return result;
}

uint64_t (*AnyOptionalAttribute.identifier.modify())()
{
  return nullsub_1;
}

uint64_t AnyOptionalAttribute.init()()
{
  return 2;
}

uint64_t AnyOptionalAttribute.unsafeCast<A>(to:)(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t AnyOptionalAttribute.attribute.setter(uint64_t result)
{
  int *v1;
  int v2;

  if ((result & 0x100000000) != 0)
    v2 = 2;
  else
    v2 = result;
  *v1 = v2;
  return result;
}

uint64_t (*AnyOptionalAttribute.attribute.modify(uint64_t a1))()
{
  int *v1;
  int v2;
  BOOL v3;

  *(_QWORD *)a1 = v1;
  v2 = *v1;
  *(_DWORD *)(a1 + 16) = 2;
  v3 = v2 == 2;
  if (v2 == 2)
    v2 = 0;
  *(_BYTE *)(a1 + 12) = v3;
  *(_DWORD *)(a1 + 8) = v2;
  return sub_1AB961618;
}

uint64_t AnyOptionalAttribute.map<A>(_:)@<X0>(void (*a1)(uint64_t)@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v6;

  if ((_DWORD)a2 == 2)
  {
    v6 = 1;
  }
  else
  {
    a1(a2);
    v6 = 0;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 56))(a4, v6, 1, a3);
}

BOOL static AnyOptionalAttribute.== infix(_:_:)(int a1, int a2)
{
  return a1 == a2;
}

uint64_t AnyOptionalAttribute.hash(into:)()
{
  return sub_1AB9621EC();
}

uint64_t AnyOptionalAttribute.description.getter(int a1)
{
  if (a1 == 2)
    return 7104878;
  else
    return AGAttribute.description.getter();
}

uint64_t AnyOptionalAttribute.hashValue.getter()
{
  sub_1AB9621D4();
  sub_1AB9621EC();
  return sub_1AB9621F8();
}

uint64_t sub_1AB96173C()
{
  sub_1AB9621D4();
  sub_1AB9621EC();
  return sub_1AB9621F8();
}

uint64_t sub_1AB961780()
{
  sub_1AB9621D4();
  sub_1AB9621EC();
  return sub_1AB9621F8();
}

uint64_t sub_1AB9617C0()
{
  int *v0;

  return AnyOptionalAttribute.description.getter(*v0);
}

uint64_t OptionalAttribute.base.setter(uint64_t result)
{
  _DWORD *v1;

  *v1 = result;
  return result;
}

uint64_t (*OptionalAttribute.base.modify())()
{
  return nullsub_1;
}

uint64_t OptionalAttribute.init()()
{
  return 2;
}

uint64_t OptionalAttribute.init(_:)(uint64_t result)
{
  if ((result & 0x100000000) != 0)
    return 2;
  else
    return result;
}

uint64_t OptionalAttribute.attribute.setter(uint64_t result)
{
  int *v1;
  int v2;

  if ((result & 0x100000000) != 0)
    v2 = 2;
  else
    v2 = result;
  *v1 = v2;
  return result;
}

uint64_t (*OptionalAttribute.attribute.modify(uint64_t a1))()
{
  int *v1;
  int v2;
  BOOL v3;

  *(_QWORD *)a1 = v1;
  v2 = *v1;
  *(_DWORD *)(a1 + 16) = 2;
  v3 = v2 == 2;
  if (v2 == 2)
    v2 = 0;
  *(_BYTE *)(a1 + 12) = v3;
  *(_DWORD *)(a1 + 8) = v2;
  return sub_1AB961618;
}

uint64_t sub_1AB961868(uint64_t result)
{
  _DWORD *v1;

  v1 = (_DWORD *)(result + 8);
  if (*(_BYTE *)(result + 12))
    v1 = (_DWORD *)(result + 16);
  **(_DWORD **)result = *v1;
  return result;
}

uint64_t OptionalAttribute.value.getter@<X0>(unint64_t a1@<X0>, AG::swift::metadata *a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  char *Value;

  if ((_DWORD)a1 == 2)
  {
    v7 = *((_QWORD *)a2 - 1);
    v8 = 1;
  }
  else
  {
    Value = AGGraphGetValue(a1, 0, a2, a3, a4);
    v7 = *((_QWORD *)a2 - 1);
    (*(void (**)(uint64_t, char *, AG::swift::metadata *))(v7 + 16))(a5, Value, a2);
    v8 = 0;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, AG::swift::metadata *))(v7 + 56))(a5, v8, 1, a2);
}

uint64_t OptionalAttribute.changedValue(options:)@<X0>(const char *a1@<X0>, unint64_t a2@<X1>, AG::swift::metadata *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t TupleTypeMetadata2;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *Value;
  char v15;
  char v16;

  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v11 = TupleTypeMetadata2;
  if ((_DWORD)a2 == 2)
  {
    v12 = 1;
  }
  else
  {
    v13 = *(int *)(TupleTypeMetadata2 + 48);
    Value = AGGraphGetValue(a2, a1, a3, v9, v10);
    v16 = v15;
    (*(void (**)(uint64_t, char *, AG::swift::metadata *))(*((_QWORD *)a3 - 1) + 16))(a4, Value, a3);
    v12 = 0;
    *(_BYTE *)(a4 + v13) = v16 & 1;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(a4, v12, 1, v11);
}

uint64_t OptionalAttribute.map<A>(_:)@<X0>(void (*a1)(uint64_t)@<X0>, uint64_t a2@<X2>, uint64_t a3@<X4>, uint64_t a4@<X8>)
{
  uint64_t v6;

  if ((_DWORD)a2 == 2)
  {
    v6 = 1;
  }
  else
  {
    a1(a2);
    v6 = 0;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 56))(a4, v6, 1, a3);
}

uint64_t OptionalAttribute.wrappedValue.getter@<X0>(unint64_t a1@<X0>, AG::swift::metadata *a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  char *Value;

  if ((_DWORD)a1 == 2)
  {
    v7 = *((_QWORD *)a2 - 1);
    v8 = 1;
  }
  else
  {
    Value = AGGraphGetValue(a1, 0, a2, a3, a4);
    v7 = *((_QWORD *)a2 - 1);
    (*(void (**)(uint64_t, char *, AG::swift::metadata *))(v7 + 16))(a5, Value, a2);
    v8 = 0;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, AG::swift::metadata *))(v7 + 56))(a5, v8, 1, a2);
}

unint64_t OptionalAttribute.projectedValue.getter(unsigned int a1)
{
  uint64_t v1;

  if (a1 == 2)
    v1 = 0;
  else
    v1 = a1;
  return v1 | ((unint64_t)(a1 == 2) << 32);
}

uint64_t OptionalAttribute.projectedValue.setter(uint64_t result)
{
  int *v1;
  int v2;

  if ((result & 0x100000000) != 0)
    v2 = 2;
  else
    v2 = result;
  *v1 = v2;
  return result;
}

uint64_t (*OptionalAttribute.projectedValue.modify(uint64_t a1))(uint64_t result)
{
  int *v1;
  int v2;
  BOOL v3;

  *(_QWORD *)a1 = v1;
  v2 = *v1;
  *(_DWORD *)(a1 + 16) = 2;
  v3 = v2 == 2;
  if (v2 == 2)
    v2 = 0;
  *(_BYTE *)(a1 + 12) = v3;
  *(_DWORD *)(a1 + 8) = v2;
  return sub_1AB961868;
}

unint64_t OptionalAttribute.subscript.getter(_QWORD *a1, uint64_t a2)
{
  unsigned int OffsetAttribute2;
  uint64_t v5;
  const char *v6;
  char v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  int v20;
  _QWORD *v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  if ((_DWORD)a2 == 2)
  {
    OffsetAttribute2 = 0;
  }
  else
  {
    v5 = *a1;
    v6 = (const char *)sub_1AB962138();
    if ((v7 & 1) != 0)
    {
      v20 = a2;
      v21 = a1;
      MEMORY[0x1E0C80A78](v6);
      v8 = (uint64_t *)(v5 + *MEMORY[0x1E0DEE2A8]);
      v16 = v8[1];
      v17 = type metadata accessor for Focus(0, *v8, v16, v9);
      v18 = MEMORY[0x1AF431BE0](&protocol conformance descriptor for Focus<A, B>, v17);
      v12 = type metadata accessor for Attribute(0, v16, v10, v11);
      swift_retain();
      sub_1AB9587C0((uint64_t)&v20, (uint64_t)sub_1AB958FBC, (uint64_t)&v15, v17, MEMORY[0x1E0DEDCE8], v12, MEMORY[0x1E0DEDD18], v13);
      swift_release();
      OffsetAttribute2 = v19;
    }
    else
    {
      OffsetAttribute2 = AGGraphCreateOffsetAttribute2(a2, v6, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*MEMORY[0x1E0DEE2A8] + v5 + 8) - 8) + 64));
    }
  }
  return OffsetAttribute2 | ((unint64_t)((_DWORD)a2 == 2) << 32);
}

BOOL static OptionalAttribute.== infix(_:_:)(int a1, int a2)
{
  return a1 == a2;
}

uint64_t OptionalAttribute.hash(into:)()
{
  return sub_1AB9621EC();
}

uint64_t OptionalAttribute.description.getter(uint64_t a1)
{
  if ((_DWORD)a1 == 2)
    return 7104878;
  else
    return Attribute.description.getter(a1);
}

uint64_t OptionalAttribute.hashValue.getter()
{
  sub_1AB9621D4();
  sub_1AB9621EC();
  return sub_1AB9621F8();
}

uint64_t sub_1AB961DA4()
{
  return OptionalAttribute.hashValue.getter();
}

uint64_t sub_1AB961DAC()
{
  unsigned int *v0;

  return OptionalAttribute.description.getter(*v0);
}

unint64_t sub_1AB961DC0()
{
  unint64_t result;

  result = qword_1EEC35AF8;
  if (!qword_1EEC35AF8)
  {
    result = MEMORY[0x1AF431BE0](&protocol conformance descriptor for AnyOptionalAttribute, &type metadata for AnyOptionalAttribute);
    atomic_store(result, (unint64_t *)&qword_1EEC35AF8);
  }
  return result;
}

void sub_1AB961E04()
{
  JUMPOUT(0x1AF431BE0);
}

int *sub_1AB961E14@<X0>(int *result@<X0>, uint64_t a2@<X8>)
{
  int v2;
  BOOL v3;

  v2 = *result;
  v3 = *result == 2;
  if (*result == 2)
    v2 = 0;
  *(_DWORD *)a2 = v2;
  *(_BYTE *)(a2 + 4) = v3;
  return result;
}

uint64_t sub_1AB961E3C(uint64_t result, int *a2)
{
  int *v2;

  if (*(_BYTE *)(result + 4))
    v2 = &AGAttributeNil;
  else
    v2 = (int *)result;
  *a2 = *v2;
  return result;
}

int *sub_1AB961E5C@<X0>(int *result@<X0>, uint64_t a2@<X8>)
{
  int v2;
  BOOL v3;

  v2 = *result;
  v3 = *result == 2;
  if (*result == 2)
    v2 = 0;
  *(_DWORD *)a2 = v2;
  *(_BYTE *)(a2 + 4) = v3;
  return result;
}

uint64_t sub_1AB961E84(uint64_t result, int *a2)
{
  int *v2;

  if (*(_BYTE *)(result + 4))
    v2 = &AGAttributeNil;
  else
    v2 = (int *)result;
  *a2 = *v2;
  return result;
}

uint64_t sub_1AB961EA4()
{
  return 8;
}

_QWORD *sub_1AB961EB0(_QWORD *result, _QWORD *a2)
{
  *a2 = *result;
  return result;
}

uint64_t sub_1AB961EBC(uint64_t result, int *a2)
{
  int *v2;

  if (*(_BYTE *)(result + 4))
    v2 = &AGAttributeNil;
  else
    v2 = (int *)result;
  *a2 = *v2;
  return result;
}

uint64_t sub_1AB961EDC()
{
  return 8;
}

ValueMetadata *type metadata accessor for AnyOptionalAttribute()
{
  return &type metadata for AnyOptionalAttribute;
}

void AG::data::table::table(void **a1, void **a2)
{
  void *v3;

  v3 = *a1;
  if (v3)
    free(v3);
  if (*a2)
    free(*a2);
}

void util::UntypedTable::create_buckets()
{
  __assert_rtn("create_buckets", "hash-table.cc", 155, "BOOL(_buckets)");
}

void AG::`anonymous namespace'::blocking_read()
{
  __assert_rtn("blocking_read", "ag-debug-server.mm", 42, "errno != EAGAIN && errno != EWOULDBLOCK");
}

void AG::`anonymous namespace'::blocking_write()
{
  __assert_rtn("blocking_write", "ag-debug-server.mm", 66, "errno != EAGAIN && errno != EWOULDBLOCK");
}

void AG::non_fatal_precondition_failure(uint64_t *a1, NSObject *a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  v2 = *a1;
  v3 = 136315138;
  v4 = v2;
  _os_log_fault_impl(&dword_1AB92D000, a2, OS_LOG_TYPE_FAULT, "precondition failure: %s", (uint8_t *)&v3, 0xCu);
}

uint64_t sub_1AB962030()
{
  return MEMORY[0x1E0CAF990]();
}

uint64_t sub_1AB96203C()
{
  return MEMORY[0x1E0CAFDE0]();
}

uint64_t sub_1AB962048()
{
  return MEMORY[0x1E0CAFFF8]();
}

uint64_t sub_1AB962054()
{
  return MEMORY[0x1E0CB0228]();
}

uint64_t sub_1AB962060()
{
  return MEMORY[0x1E0CB0270]();
}

uint64_t sub_1AB96206C()
{
  return MEMORY[0x1E0DEF0A0]();
}

uint64_t sub_1AB962078()
{
  return MEMORY[0x1E0DEF0A8]();
}

uint64_t sub_1AB962084()
{
  return MEMORY[0x1E0DEF0B0]();
}

uint64_t sub_1AB962090()
{
  return MEMORY[0x1E0CB17D8]();
}

uint64_t sub_1AB96209C()
{
  return MEMORY[0x1E0DEA1C8]();
}

uint64_t sub_1AB9620A8()
{
  return MEMORY[0x1E0DEA540]();
}

uint64_t sub_1AB9620B4()
{
  return MEMORY[0x1E0DEA568]();
}

uint64_t sub_1AB9620C0()
{
  return MEMORY[0x1E0CB1940]();
}

uint64_t sub_1AB9620CC()
{
  return MEMORY[0x1E0CB1960]();
}

uint64_t sub_1AB9620D8()
{
  return MEMORY[0x1E0CB1970]();
}

uint64_t sub_1AB9620E4()
{
  return MEMORY[0x1E0CB1980]();
}

uint64_t sub_1AB9620F0()
{
  return MEMORY[0x1E0DEA5F8]();
}

uint64_t sub_1AB9620FC()
{
  return MEMORY[0x1E0DEA758]();
}

uint64_t sub_1AB962108()
{
  return MEMORY[0x1E0DEA800]();
}

uint64_t sub_1AB962114()
{
  return MEMORY[0x1E0DEAAD8]();
}

uint64_t sub_1AB962120()
{
  return MEMORY[0x1E0DEB940]();
}

uint64_t sub_1AB96212C()
{
  return MEMORY[0x1E0DEBE50]();
}

uint64_t sub_1AB962138()
{
  return MEMORY[0x1E0DEBE78]();
}

uint64_t sub_1AB962144()
{
  return MEMORY[0x1E0DEC050]();
}

uint64_t sub_1AB962150()
{
  return MEMORY[0x1E0DEC2A8]();
}

uint64_t sub_1AB96215C()
{
  return MEMORY[0x1E0DECBE8]();
}

uint64_t sub_1AB962168()
{
  return MEMORY[0x1E0DECD50]();
}

uint64_t sub_1AB962174()
{
  return MEMORY[0x1E0DECE70]();
}

uint64_t sub_1AB962180()
{
  return MEMORY[0x1E0DED1D0]();
}

uint64_t sub_1AB96218C()
{
  return MEMORY[0x1E0DED5F0]();
}

uint64_t sub_1AB962198()
{
  return MEMORY[0x1E0DED600]();
}

uint64_t sub_1AB9621A4()
{
  return MEMORY[0x1E0DED9F8]();
}

uint64_t sub_1AB9621B0()
{
  return MEMORY[0x1E0DEDED8]();
}

uint64_t sub_1AB9621BC()
{
  return MEMORY[0x1E0DEDEE0]();
}

uint64_t sub_1AB9621C8()
{
  return MEMORY[0x1E0DEDEE8]();
}

uint64_t sub_1AB9621D4()
{
  return MEMORY[0x1E0DEDEF8]();
}

uint64_t sub_1AB9621E0()
{
  return MEMORY[0x1E0DEDF10]();
}

uint64_t sub_1AB9621EC()
{
  return MEMORY[0x1E0DEDF28]();
}

uint64_t sub_1AB9621F8()
{
  return MEMORY[0x1E0DEDF40]();
}

uint64_t sub_1AB962204()
{
  return MEMORY[0x1E0CB26E8]();
}

uint64_t sub_1AB962210()
{
  return MEMORY[0x1E0CB26F0]();
}

uint64_t sub_1AB96221C()
{
  return MEMORY[0x1E0CB26F8]();
}

uint64_t sub_1AB962228()
{
  return MEMORY[0x1E0CB2700]();
}

uint64_t sub_1AB962234()
{
  return MEMORY[0x1E0DEE0E8]();
}

uint64_t sub_1AB962240()
{
  return MEMORY[0x1E0DEE950]();
}

uint64_t sub_1AB96224C()
{
  return MEMORY[0x1E0DEE978]();
}

int CC_SHA1_Final(unsigned __int8 *md, CC_SHA1_CTX *c)
{
  return MEMORY[0x1E0C80330](md, c);
}

int CC_SHA1_Init(CC_SHA1_CTX *c)
{
  return MEMORY[0x1E0C80338](c);
}

int CC_SHA1_Update(CC_SHA1_CTX *c, const void *data, CC_LONG len)
{
  return MEMORY[0x1E0C80340](c, data, *(_QWORD *)&len);
}

CFIndex CFArrayGetCount(CFArrayRef theArray)
{
  return MEMORY[0x1E0C97D60](theArray);
}

const void *__cdecl CFArrayGetValueAtIndex(CFArrayRef theArray, CFIndex idx)
{
  return (const void *)MEMORY[0x1E0C97D98](theArray, idx);
}

CFMutableDataRef CFDataCreateMutable(CFAllocatorRef allocator, CFIndex capacity)
{
  return (CFMutableDataRef)MEMORY[0x1E0C983B8](allocator, capacity);
}

const UInt8 *__cdecl CFDataGetBytePtr(CFDataRef theData)
{
  return (const UInt8 *)MEMORY[0x1E0C983E0](theData);
}

CFIndex CFDataGetLength(CFDataRef theData)
{
  return MEMORY[0x1E0C983F8](theData);
}

UInt8 *__cdecl CFDataGetMutableBytePtr(CFMutableDataRef theData)
{
  return (UInt8 *)MEMORY[0x1E0C98408](theData);
}

void CFDataSetLength(CFMutableDataRef theData, CFIndex length)
{
  MEMORY[0x1E0C98430](theData, length);
}

CFTypeID CFGetTypeID(CFTypeRef cf)
{
  return MEMORY[0x1E0C98738](cf);
}

void CFRelease(CFTypeRef cf)
{
  MEMORY[0x1E0C98BC0](cf);
}

CFTypeRef CFRetain(CFTypeRef cf)
{
  return (CFTypeRef)MEMORY[0x1E0C98BD0](cf);
}

void CFRunLoopAddObserver(CFRunLoopRef rl, CFRunLoopObserverRef observer, CFRunLoopMode mode)
{
  MEMORY[0x1E0C98BE8](rl, observer, mode);
}

CFRunLoopRef CFRunLoopGetMain(void)
{
  return (CFRunLoopRef)MEMORY[0x1E0C98C40]();
}

CFRunLoopObserverRef CFRunLoopObserverCreate(CFAllocatorRef allocator, CFOptionFlags activities, Boolean repeats, CFIndex order, CFRunLoopObserverCallBack callout, CFRunLoopObserverContext *context)
{
  return (CFRunLoopObserverRef)MEMORY[0x1E0C98C60](allocator, activities, repeats, order, callout, context);
}

void CFStringAppendCString(CFMutableStringRef theString, const char *cStr, CFStringEncoding encoding)
{
  MEMORY[0x1E0C98EE0](theString, cStr, *(_QWORD *)&encoding);
}

CFMutableStringRef CFStringCreateMutable(CFAllocatorRef alloc, CFIndex maxLength)
{
  return (CFMutableStringRef)MEMORY[0x1E0C98F90](alloc, maxLength);
}

CFStringRef CFStringCreateWithCString(CFAllocatorRef alloc, const char *cStr, CFStringEncoding encoding)
{
  return (CFStringRef)MEMORY[0x1E0C98FD0](alloc, cStr, *(_QWORD *)&encoding);
}

CFIndex CFStringGetBytes(CFStringRef theString, CFRange range, CFStringEncoding encoding, UInt8 lossByte, Boolean isExternalRepresentation, UInt8 *buffer, CFIndex maxBufLen, CFIndex *usedBufLen)
{
  return MEMORY[0x1E0C99080](theString, range.location, range.length, *(_QWORD *)&encoding, lossByte, isExternalRepresentation, buffer, maxBufLen);
}

CFIndex CFStringGetLength(CFStringRef theString)
{
  return MEMORY[0x1E0C99100](theString);
}

CFTypeID CFStringGetTypeID(void)
{
  return MEMORY[0x1E0C99170]();
}

CFURLRef CFURLCreateWithBytes(CFAllocatorRef allocator, const UInt8 *URLBytes, CFIndex length, CFStringEncoding encoding, CFURLRef baseURL)
{
  return (CFURLRef)MEMORY[0x1E0C99418](allocator, URLBytes, length, *(_QWORD *)&encoding, baseURL);
}

Class NSClassFromString(NSString *aClassName)
{
  return (Class)MEMORY[0x1E0CB28A0](aClassName);
}

NSString *NSTemporaryDirectory(void)
{
  return (NSString *)MEMORY[0x1E0CB3250]();
}

uint64_t _CFRuntimeCreateInstance()
{
  return MEMORY[0x1E0C9A498]();
}

uint64_t _CFRuntimeRegisterClass()
{
  return MEMORY[0x1E0C9A4B0]();
}

void _Unwind_Resume(_Unwind_Exception *exception_object)
{
  MEMORY[0x1E0C80A20](exception_object);
}

std::bad_array_new_length *__cdecl std::bad_array_new_length::bad_array_new_length(std::bad_array_new_length *this)
{
  return (std::bad_array_new_length *)MEMORY[0x1E0DE4388](this);
}

size_t std::__next_prime(size_t __n)
{
  return MEMORY[0x1E0DE43E8](__n);
}

std::string *__cdecl std::string::append(std::string *this, const std::string::value_type *__s, std::string::size_type __n)
{
  return (std::string *)MEMORY[0x1E0DE4428](this, __s, __n);
}

std::string *__cdecl std::string::append(std::string *this, std::string::size_type __n, std::string::value_type __c)
{
  return (std::string *)MEMORY[0x1E0DE4438](this, __n, __c);
}

void std::string::push_back(std::string *this, std::string::value_type __c)
{
  MEMORY[0x1E0DE44B8](this, __c);
}

void std::exception::~exception(std::exception *this)
{
  MEMORY[0x1E0DE4DD8](this);
}

void std::terminate(void)
{
  MEMORY[0x1E0DE4E18]();
}

void operator delete(void *__p)
{
  off_1E5A5F148(__p);
}

uint64_t operator delete()
{
  return off_1E5A5F150();
}

void *__cdecl operator new(size_t __sz)
{
  return (void *)off_1E5A5F158(__sz);
}

uint64_t operator new()
{
  return off_1E5A5F160();
}

void __assert_rtn(const char *a1, const char *a2, int a3, const char *a4)
{
  MEMORY[0x1E0C80A58](a1, a2, *(_QWORD *)&a3, a4);
}

void *__cxa_allocate_exception(size_t thrown_size)
{
  return (void *)MEMORY[0x1E0DE5068](thrown_size);
}

int __cxa_atexit(void (*lpfunc)(void *), void *obj, void *lpdso_handle)
{
  return MEMORY[0x1E0C80A98](lpfunc, obj, lpdso_handle);
}

void *__cxa_begin_catch(void *a1)
{
  return (void *)MEMORY[0x1E0DE5080](a1);
}

void __cxa_guard_abort(__guard *a1)
{
  MEMORY[0x1E0DE50B0](a1);
}

int __cxa_guard_acquire(__guard *a1)
{
  return MEMORY[0x1E0DE50B8](a1);
}

void __cxa_guard_release(__guard *a1)
{
  MEMORY[0x1E0DE50C0](a1);
}

void __cxa_throw(void *a1, struct type_info *lptinfo, void (*a3)(void *))
{
  MEMORY[0x1E0DE50D8](a1, lptinfo, a3);
}

int __darwin_check_fd_set_overflow(int a1, const void *a2, int a3)
{
  return MEMORY[0x1E0C80AA0](*(_QWORD *)&a1, a2, *(_QWORD *)&a3);
}

int *__error(void)
{
  return (int *)MEMORY[0x1E0C80AC0]();
}

uint64_t _dyld_images_for_addresses()
{
  return MEMORY[0x1E0C80EC0]();
}

void _os_log_error_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x1E0C81038](dso, log, type, format, buf, *(_QWORD *)&size);
}

void _os_log_fault_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x1E0C81040](dso, log, type, format, buf, *(_QWORD *)&size);
}

void _os_log_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x1E0C81048](dso, log, type, format, buf, *(_QWORD *)&size);
}

void abort(void)
{
  MEMORY[0x1E0C813A8]();
}

int accept(int a1, sockaddr *a2, socklen_t *a3)
{
  return MEMORY[0x1E0C813C8](*(_QWORD *)&a1, a2, a3);
}

uint32_t arc4random(void)
{
  return MEMORY[0x1E0C81570]();
}

int asprintf(char **a1, const char *a2, ...)
{
  return MEMORY[0x1E0C81608](a1, a2);
}

int atexit_b(void *a1)
{
  return MEMORY[0x1E0C81650](a1);
}

int atoi(const char *a1)
{
  return MEMORY[0x1E0C81668](a1);
}

int backtrace(void **a1, int a2)
{
  return MEMORY[0x1E0C816B8](a1, *(_QWORD *)&a2);
}

void backtrace_image_offsets(void *const *array, image_offset *image_offsets, int size)
{
  MEMORY[0x1E0C816C0](array, image_offsets, *(_QWORD *)&size);
}

int bind(int a1, const sockaddr *a2, socklen_t a3)
{
  return MEMORY[0x1E0C816F0](*(_QWORD *)&a1, a2, *(_QWORD *)&a3);
}

void bzero(void *a1, size_t a2)
{
  MEMORY[0x1E0C81758](a1, a2);
}

Ivar *__cdecl class_copyIvarList(Class cls, unsigned int *outCount)
{
  return (Ivar *)MEMORY[0x1E0DE7A70](cls, outCount);
}

int close(int a1)
{
  return MEMORY[0x1E0C82688](*(_QWORD *)&a1);
}

void dispatch_async_f(dispatch_queue_t queue, void *context, dispatch_function_t work)
{
  MEMORY[0x1E0C82C18](queue, context, work);
}

dispatch_queue_global_t dispatch_get_global_queue(intptr_t identifier, uintptr_t flags)
{
  return (dispatch_queue_global_t)MEMORY[0x1E0C82D00](identifier, flags);
}

void dispatch_once(dispatch_once_t *predicate, dispatch_block_t block)
{
  MEMORY[0x1E0C82E08](predicate, block);
}

void dispatch_once_f(dispatch_once_t *predicate, void *context, dispatch_function_t function)
{
  MEMORY[0x1E0C82E10](predicate, context, function);
}

void dispatch_resume(dispatch_object_t object)
{
  MEMORY[0x1E0C82EA0](object);
}

void dispatch_set_context(dispatch_object_t object, void *context)
{
  MEMORY[0x1E0C82EE0](object, context);
}

dispatch_source_t dispatch_source_create(dispatch_source_type_t type, uintptr_t handle, uintptr_t mask, dispatch_queue_t queue)
{
  return (dispatch_source_t)MEMORY[0x1E0C82F20](type, handle, mask, queue);
}

void dispatch_source_set_event_handler_f(dispatch_source_t source, dispatch_function_t handler)
{
  MEMORY[0x1E0C82F60](source, handler);
}

int dladdr(const void *a1, Dl_info *a2)
{
  return MEMORY[0x1E0C83028](a1, a2);
}

int fcntl(int a1, int a2, ...)
{
  return MEMORY[0x1E0C83300](*(_QWORD *)&a1, *(_QWORD *)&a2);
}

int fprintf(FILE *a1, const char *a2, ...)
{
  return MEMORY[0x1E0C83478](a1, a2);
}

int fputs(const char *a1, FILE *a2)
{
  return MEMORY[0x1E0C83490](a1, a2);
}

void free(void *a1)
{
  MEMORY[0x1E0C834A8](a1);
}

void freeifaddrs(ifaddrs *a1)
{
  MEMORY[0x1E0C834D0](a1);
}

size_t fwrite(const void *__ptr, size_t __size, size_t __nitems, FILE *__stream)
{
  return MEMORY[0x1E0C835E0](__ptr, __size, __nitems, __stream);
}

char *__cdecl getenv(const char *a1)
{
  return (char *)MEMORY[0x1E0C83660](a1);
}

int getifaddrs(ifaddrs **a1)
{
  return MEMORY[0x1E0C836C8](a1);
}

pid_t getpid(void)
{
  return MEMORY[0x1E0C83760]();
}

int getsockname(int a1, sockaddr *a2, socklen_t *a3)
{
  return MEMORY[0x1E0C83810](*(_QWORD *)&a1, a2, a3);
}

int gzclose(gzFile file)
{
  return MEMORY[0x1E0DE9310](file);
}

gzFile gzopen(const char *a1, const char *a2)
{
  return (gzFile)MEMORY[0x1E0DE9358](a1, a2);
}

int gzwrite(gzFile file, voidpc buf, unsigned int len)
{
  return MEMORY[0x1E0DE9390](file, buf, *(_QWORD *)&len);
}

const char *__cdecl inet_ntop(int a1, const void *a2, char *a3, socklen_t a4)
{
  return (const char *)MEMORY[0x1E0C83968](*(_QWORD *)&a1, a2, a3, *(_QWORD *)&a4);
}

ptrdiff_t ivar_getOffset(Ivar v)
{
  return MEMORY[0x1E0DE7B30](v);
}

int listen(int a1, int a2)
{
  return MEMORY[0x1E0C83B80](*(_QWORD *)&a1, *(_QWORD *)&a2);
}

uint64_t mach_absolute_time(void)
{
  return MEMORY[0x1E0C83C50]();
}

kern_return_t mach_port_deallocate(ipc_space_t task, mach_port_name_t name)
{
  return MEMORY[0x1E0C83CF8](*(_QWORD *)&task, *(_QWORD *)&name);
}

kern_return_t mach_timebase_info(mach_timebase_info_t info)
{
  return MEMORY[0x1E0C83DB8](info);
}

kern_return_t mach_vm_region(vm_map_read_t target_task, mach_vm_address_t *address, mach_vm_size_t *size, vm_region_flavor_t flavor, vm_region_info_t info, mach_msg_type_number_t *infoCnt, mach_port_t *object_name)
{
  return MEMORY[0x1E0C83E00](*(_QWORD *)&target_task, address, size, *(_QWORD *)&flavor, info, infoCnt, object_name);
}

int madvise(void *a1, size_t a2, int a3)
{
  return MEMORY[0x1E0C83E60](a1, a2, *(_QWORD *)&a3);
}

void *__cdecl malloc(size_t __size)
{
  return (void *)MEMORY[0x1E0C83E68](__size);
}

malloc_zone_t *__cdecl malloc_create_zone(vm_size_t start_size, unsigned int flags)
{
  return (malloc_zone_t *)MEMORY[0x1E0C83E78](start_size, *(_QWORD *)&flags);
}

size_t malloc_good_size(size_t size)
{
  return MEMORY[0x1E0C83EB0](size);
}

void malloc_set_zone_name(malloc_zone_t *zone, const char *name)
{
  MEMORY[0x1E0C83ED8](zone, name);
}

size_t malloc_size(const void *ptr)
{
  return MEMORY[0x1E0C83EE0](ptr);
}

void *__cdecl malloc_type_malloc(size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x1E0C83F00](size, type_id);
}

void *__cdecl malloc_type_realloc(void *ptr, size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x1E0C83F10](ptr, size, type_id);
}

void *__cdecl malloc_type_zone_malloc(malloc_zone_t *zone, size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x1E0C83F28](zone, size, type_id);
}

void malloc_zone_free(malloc_zone_t *zone, void *ptr)
{
  MEMORY[0x1E0C83F70](zone, ptr);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return (void *)MEMORY[0x1E0C84088](__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return (void *)MEMORY[0x1E0C84098](__dst, __src, __len);
}

void *__cdecl memset(void *__b, int __c, size_t __len)
{
  return (void *)MEMORY[0x1E0C840B0](__b, *(_QWORD *)&__c, __len);
}

void *__cdecl mmap(void *a1, size_t a2, int a3, int a4, int a5, off_t a6)
{
  return (void *)MEMORY[0x1E0C841D8](a1, a2, *(_QWORD *)&a3, *(_QWORD *)&a4, *(_QWORD *)&a5, a6);
}

int mprotect(void *a1, size_t a2, int a3)
{
  return MEMORY[0x1E0C841F0](a1, a2, *(_QWORD *)&a3);
}

id objc_autorelease(id a1)
{
  return (id)MEMORY[0x1E0DE7BD0](a1);
}

void objc_autoreleasePoolPop(void *context)
{
  MEMORY[0x1E0DE7BD8](context);
}

void *objc_autoreleasePoolPush(void)
{
  return (void *)MEMORY[0x1E0DE7BE0]();
}

id objc_autoreleaseReturnValue(id a1)
{
  return (id)MEMORY[0x1E0DE7BE8](a1);
}

uint64_t objc_claimAutoreleasedReturnValue()
{
  return MEMORY[0x1E0DE7BF8]();
}

void objc_enumerationMutation(id obj)
{
  MEMORY[0x1E0DE7C90](obj);
}

Class objc_getClass(const char *name)
{
  return (Class)MEMORY[0x1E0DE7CB0](name);
}

id objc_msgSend(id a1, SEL a2, ...)
{
  return (id)MEMORY[0x1E0DE7D20](a1, a2);
}

uint64_t objc_opt_class()
{
  return MEMORY[0x1E0DE7D38]();
}

uint64_t objc_opt_isKindOfClass()
{
  return MEMORY[0x1E0DE7D40]();
}

uint64_t objc_opt_self()
{
  return MEMORY[0x1E0DE7D58]();
}

id objc_retain(id a1)
{
  return (id)MEMORY[0x1E0DE7E50](a1);
}

id objc_retainAutorelease(id a1)
{
  return (id)MEMORY[0x1E0DE7E58](a1);
}

id objc_retainAutoreleasedReturnValue(id a1)
{
  return (id)MEMORY[0x1E0DE7E68](a1);
}

int open(const char *a1, int a2, ...)
{
  return MEMORY[0x1E0C84480](a1, *(_QWORD *)&a2);
}

os_log_t os_log_create(const char *subsystem, const char *category)
{
  return (os_log_t)MEMORY[0x1E0C84728](subsystem, category);
}

BOOL os_log_type_enabled(os_log_t oslog, os_log_type_t type)
{
  return MEMORY[0x1E0C84780](oslog, type);
}

void os_unfair_lock_lock(os_unfair_lock_t lock)
{
  MEMORY[0x1E0C84998](lock);
}

BOOL os_unfair_lock_trylock(os_unfair_lock_t lock)
{
  return MEMORY[0x1E0C849A8](lock);
}

void os_unfair_lock_unlock(os_unfair_lock_t lock)
{
  MEMORY[0x1E0C849B0](lock);
}

uint64_t os_variant_has_internal_diagnostics()
{
  return MEMORY[0x1E0C849F8]();
}

void perror(const char *a1)
{
  MEMORY[0x1E0C84AF0](a1);
}

int pthread_key_create(pthread_key_t *a1, void (__cdecl *a2)(void *))
{
  return MEMORY[0x1E0C84DE0](a1, a2);
}

ssize_t read(int a1, void *a2, size_t a3)
{
  return MEMORY[0x1E0C85000](*(_QWORD *)&a1, a2, a3);
}

int select(int a1, fd_set *a2, fd_set *a3, fd_set *a4, timeval *a5)
{
  return MEMORY[0x1E0C85280](*(_QWORD *)&a1, a2, a3, a4, a5);
}

int setsockopt(int a1, int a2, int a3, const void *a4, socklen_t a5)
{
  return MEMORY[0x1E0C85388](*(_QWORD *)&a1, *(_QWORD *)&a2, *(_QWORD *)&a3, a4, *(_QWORD *)&a5);
}

int snprintf_l(char *a1, size_t a2, locale_t a3, const char *a4, ...)
{
  return MEMORY[0x1E0C85448](a1, a2, a3, a4);
}

int socket(int a1, int a2, int a3)
{
  return MEMORY[0x1E0C85450](*(_QWORD *)&a1, *(_QWORD *)&a2, *(_QWORD *)&a3);
}

int strcasecmp(const char *a1, const char *a2)
{
  return MEMORY[0x1E0C85500](a1, a2);
}

int strcmp(const char *__s1, const char *__s2)
{
  return MEMORY[0x1E0C85520](__s1, __s2);
}

size_t strcspn(const char *__s, const char *__charset)
{
  return MEMORY[0x1E0C85538](__s, __charset);
}

char *__cdecl strdup(const char *__s1)
{
  return (char *)MEMORY[0x1E0C85540](__s1);
}

size_t strlen(const char *__s)
{
  return MEMORY[0x1E0C85578](__s);
}

size_t strspn(const char *__s, const char *__charset)
{
  return MEMORY[0x1E0C85608](__s, __charset);
}

uint64_t strtol(const char *__str, char **__endptr, int __base)
{
  return MEMORY[0x1E0C85658](__str, __endptr, *(_QWORD *)&__base);
}

uint64_t swift_allocObject()
{
  return MEMORY[0x1E0DEEAB0]();
}

uint64_t swift_allocateGenericValueMetadata()
{
  return MEMORY[0x1E0DEEAC0]();
}

uint64_t swift_bridgeObjectRelease()
{
  return MEMORY[0x1E0DEEB08]();
}

uint64_t swift_bridgeObjectRelease_n()
{
  return MEMORY[0x1E0DEEB10]();
}

uint64_t swift_bridgeObjectRetain()
{
  return MEMORY[0x1E0DEEB18]();
}

uint64_t swift_conformsToProtocol()
{
  return MEMORY[0x1E0DEEB38]();
}

uint64_t swift_deallocObject()
{
  return MEMORY[0x1E0DEEB60]();
}

uint64_t swift_dynamicCast()
{
  return MEMORY[0x1E0DEEB80]();
}

uint64_t swift_errorRelease()
{
  return MEMORY[0x1E0DEEBF0]();
}

uint64_t swift_getAssociatedTypeWitness()
{
  return MEMORY[0x1E0DEEC08]();
}

uint64_t swift_getAtKeyPath()
{
  return MEMORY[0x1E0DEEC18]();
}

uint64_t swift_getForeignTypeMetadata()
{
  return MEMORY[0x1E0DEEC78]();
}

uint64_t swift_getGenericMetadata()
{
  return MEMORY[0x1E0DEECB0]();
}

uint64_t swift_getObjCClassMetadata()
{
  return MEMORY[0x1E0DEECD8]();
}

uint64_t swift_getObjectType()
{
  return MEMORY[0x1E0DEECE0]();
}

uint64_t swift_getTupleTypeMetadata()
{
  return MEMORY[0x1E0DEED18]();
}

uint64_t swift_getTupleTypeMetadata2()
{
  return MEMORY[0x1E0DEED20]();
}

uint64_t swift_getTypeByMangledNameInContext()
{
  return MEMORY[0x1E0DEED30]();
}

uint64_t swift_getTypeByMangledNameInContext2()
{
  return MEMORY[0x1E0DEED38]();
}

uint64_t swift_getTypeByMangledNameInContextInMetadataState2()
{
  return MEMORY[0x1E0DEED40]();
}

uint64_t swift_getTypeName()
{
  return MEMORY[0x1E0DEED48]();
}

uint64_t swift_getWitnessTable()
{
  return MEMORY[0x1E0DEED50]();
}

uint64_t swift_initStackObject()
{
  return MEMORY[0x1E0DEED78]();
}

uint64_t swift_isUniquelyReferencedNonObjC()
{
  return MEMORY[0x1E0DEEDB0]();
}

uint64_t swift_once()
{
  return MEMORY[0x1E0DEEE00]();
}

uint64_t swift_release()
{
  return MEMORY[0x1E0DEEE30]();
}

uint64_t swift_retain()
{
  return MEMORY[0x1E0DEEE48]();
}

uint64_t swift_slowAlloc()
{
  return MEMORY[0x1E0DEEE78]();
}

uint64_t swift_slowDealloc()
{
  return MEMORY[0x1E0DEEE80]();
}

uint64_t swift_unknownObjectRelease()
{
  return MEMORY[0x1E0DEEEC0]();
}

uint64_t swift_willThrow()
{
  return MEMORY[0x1E0DEEFC0]();
}

int unlink(const char *a1)
{
  return MEMORY[0x1E0C859B8](a1);
}

int uuid_compare(const uuid_t uu1, const uuid_t uu2)
{
  return MEMORY[0x1E0C85A08](uu1, uu2);
}

void uuid_copy(uuid_t dst, const uuid_t src)
{
  MEMORY[0x1E0C85A10](dst, src);
}

int uuid_is_null(const uuid_t uu)
{
  return MEMORY[0x1E0C85A30](uu);
}

void uuid_unparse(const uuid_t uu, uuid_string_t out)
{
  MEMORY[0x1E0C85A40](uu, out);
}

int vasprintf(char **a1, const char *a2, va_list a3)
{
  return MEMORY[0x1E0C85A58](a1, a2, a3);
}

kern_return_t vm_remap(vm_map_t target_task, vm_address_t *target_address, vm_size_t size, vm_address_t mask, int flags, vm_map_t src_task, vm_address_t src_address, BOOLean_t copy, vm_prot_t *cur_protection, vm_prot_t *max_protection, vm_inherit_t inheritance)
{
  return MEMORY[0x1E0C85B08](*(_QWORD *)&target_task, target_address, size, mask, *(_QWORD *)&flags, *(_QWORD *)&src_task, src_address, *(_QWORD *)&copy);
}

int vsnprintf(char *__str, size_t __size, const char *__format, va_list a4)
{
  return MEMORY[0x1E0C85B98](__str, __size, __format, a4);
}

__int32 *__cdecl wmemchr(__int32 *__s, __int32 __c, size_t __n)
{
  return (__int32 *)MEMORY[0x1E0C85CB8](__s, *(_QWORD *)&__c, __n);
}

ssize_t write(int __fd, const void *__buf, size_t __nbyte)
{
  return MEMORY[0x1E0C85D40](*(_QWORD *)&__fd, __buf, __nbyte);
}

