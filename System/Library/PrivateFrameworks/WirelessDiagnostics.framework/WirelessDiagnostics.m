void sub_1CC5913F8()
{
  objc_autoreleasePoolPop((void *)MEMORY[0x1D17AD778]());
}

double sub_1CC59140C()
{
  double result;

  qword_1ECD3F218 = 850045863;
  result = 0.0;
  unk_1ECD3F220 = 0u;
  unk_1ECD3F230 = 0u;
  unk_1ECD3F240 = 0u;
  qword_1ECD3F250 = 0;
  qword_1ECD3F1B8 = 0;
  qword_1ECD3F1C0 = 0;
  return result;
}

void awd::metrics::protobuf_AddDesc_SimpleMetric_2eproto(awd::metrics *this, uint64_t a2, uint64_t a3, const char *a4)
{
  uint64_t v4;
  void (*v5)(void);

  if ((byte_1ECD3F258 & 1) == 0)
  {
    byte_1ECD3F258 = 1;
    wireless_diagnostics::google::protobuf::internal::VerifyVersion((wireless_diagnostics::google::protobuf::internal *)0x1E9808, 2005000, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/WirelessDiagnostics/AWDMetrics/cpp/SimpleMetric.pb.cc", a4);
    v4 = operator new();
    *(_QWORD *)v4 = &off_1E886AF08;
    *(_QWORD *)(v4 + 8) = 0;
    *(_QWORD *)(v4 + 16) = 0;
    *(_QWORD *)(v4 + 24) = 0;
    *(_DWORD *)(v4 + 32) = 0;
    *(_QWORD *)(v4 + 40) = MEMORY[0x1E0DE8338];
    *(_QWORD *)(v4 + 48) = 0;
    *(_BYTE *)(v4 + 36) = 0;
    awd::metrics::SimpleMetric::default_instance_ = v4;
    wireless_diagnostics::google::protobuf::internal::OnShutdown((wireless_diagnostics::google::protobuf::internal *)awd::metrics::protobuf_ShutdownFile_SimpleMetric_2eproto, v5);
  }
}

void awd::profile::protobuf_AddDesc_AwdProfile_2eproto(awd::profile *this, uint64_t a2, uint64_t a3, const char *a4)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  awd::profile *inited;
  void (*v35)(void);
  uint64_t v36;
  uint64_t v37;

  if ((byte_1EF9D66A1 & 1) != 0)
    return;
  byte_1EF9D66A1 = 1;
  wireless_diagnostics::google::protobuf::internal::VerifyVersion((wireless_diagnostics::google::protobuf::internal *)0x1E9808, 2005000, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/WirelessDiagnostics/AWDMetrics/cpp/AwdProfile.pb.cc", a4);
  v4 = operator new();
  *(_QWORD *)v4 = &off_1E886B250;
  *(_QWORD *)(v4 + 44) = 0;
  *(_DWORD *)(v4 + 52) = 0;
  *(_OWORD *)(v4 + 8) = 0u;
  *(_OWORD *)(v4 + 24) = 0u;
  *(_BYTE *)(v4 + 40) = 0;
  awd::profile::ProcessingRule::default_instance_ = v4;
  v5 = (_QWORD *)operator new();
  *v5 = &off_1E886B070;
  v5[6] = 0;
  v5[7] = 0;
  v5[1] = 0x100000000;
  v5[4] = 0;
  v5[5] = 0;
  v5[2] = 0;
  v5[3] = 0;
  awd::profile::BedfTreeNode::default_instance_ = (uint64_t)v5;
  v6 = operator new();
  *(_QWORD *)v6 = &off_1E886AF80;
  *(_OWORD *)(v6 + 8) = 0u;
  *(_OWORD *)(v6 + 24) = 0u;
  *(_QWORD *)(v6 + 40) = 0;
  awd::profile::BedfConfig::default_instance_ = v6;
  v7 = operator new();
  *(_QWORD *)v7 = &off_1E886B688;
  *(_QWORD *)(v7 + 72) = 0;
  *(_QWORD *)(v7 + 80) = 0;
  *(_DWORD *)(v7 + 88) = 0;
  *(_QWORD *)(v7 + 96) = 0;
  *(_QWORD *)(v7 + 104) = 0;
  *(_DWORD *)(v7 + 112) = 0;
  *(_QWORD *)(v7 + 120) = 0;
  *(_DWORD *)(v7 + 128) = 0;
  *(_OWORD *)(v7 + 8) = 0u;
  *(_OWORD *)(v7 + 24) = 0u;
  *(_BYTE *)(v7 + 40) = 0;
  *(_QWORD *)(v7 + 44) = 0;
  *(_QWORD *)(v7 + 60) = 0;
  *(_QWORD *)(v7 + 52) = 0;
  awd::profile::Metric::default_instance_ = v7;
  v8 = operator new();
  *(_QWORD *)v8 = &off_1E886B700;
  *(_DWORD *)(v8 + 112) = 0;
  *(_BYTE *)(v8 + 116) = 0;
  *(_OWORD *)(v8 + 8) = 0u;
  *(_OWORD *)(v8 + 24) = 0u;
  *(_OWORD *)(v8 + 40) = 0u;
  *(_DWORD *)(v8 + 56) = 0;
  *(_OWORD *)(v8 + 64) = 0u;
  *(_OWORD *)(v8 + 80) = 0u;
  *(_OWORD *)(v8 + 92) = 0u;
  v9 = MEMORY[0x1E0DE8338];
  *(_QWORD *)(v8 + 120) = MEMORY[0x1E0DE8338];
  *(_QWORD *)(v8 + 128) = 0;
  awd::profile::Profile::default_instance_ = v8;
  v10 = (_QWORD *)operator new();
  *v10 = &off_1E886B0E8;
  v10[1] = v9;
  v10[2] = v9;
  v10[3] = 0;
  awd::profile::LogParameter::default_instance_ = (uint64_t)v10;
  v11 = operator new();
  *(_QWORD *)(v11 + 8) = 0;
  *(_QWORD *)(v11 + 16) = 0;
  *(_QWORD *)v11 = &off_1E886B610;
  *(_DWORD *)(v11 + 24) = 0;
  *(_QWORD *)(v11 + 32) = 0;
  awd::profile::Log::default_instance_ = v11;
  v12 = (_QWORD *)operator new();
  *v12 = &off_1E886B598;
  v12[1] = v9;
  v12[2] = 0;
  v12[3] = 0;
  awd::profile::ConfigurationParameter::default_instance_ = (uint64_t)v12;
  v13 = operator new();
  *(_QWORD *)(v13 + 8) = 0;
  *(_QWORD *)(v13 + 16) = 0;
  *(_QWORD *)v13 = &off_1E886B520;
  *(_DWORD *)(v13 + 24) = 0;
  *(_QWORD *)(v13 + 32) = 0;
  *(_QWORD *)(v13 + 40) = 0;
  *(_DWORD *)(v13 + 48) = 0;
  *(_QWORD *)(v13 + 88) = 0;
  *(_QWORD *)(v13 + 64) = 0;
  *(_QWORD *)(v13 + 72) = 0;
  *(_QWORD *)(v13 + 56) = 0;
  *(_DWORD *)(v13 + 80) = 0;
  awd::profile::ComponentConfiguration::default_instance_ = v13;
  v14 = operator new();
  *(_QWORD *)(v14 + 8) = 0;
  *(_QWORD *)(v14 + 16) = 0;
  *(_QWORD *)v14 = &off_1E886B7F0;
  *(_DWORD *)(v14 + 24) = 0;
  awd::profile::TimerSpec::default_instance_ = v14;
  v15 = operator new();
  *(_QWORD *)v15 = &off_1E886AFF8;
  *(_OWORD *)(v15 + 8) = 0u;
  *(_OWORD *)(v15 + 24) = 0u;
  *(_DWORD *)(v15 + 40) = 0;
  *(_BYTE *)(v15 + 44) = 0;
  *(_QWORD *)(v15 + 48) = v9;
  *(_QWORD *)(v15 + 56) = v9;
  *(_QWORD *)(v15 + 64) = 0;
  *(_DWORD *)(v15 + 72) = 0;
  awd::profile::TypeVariant::default_instance_ = v15;
  v16 = operator new();
  *(_QWORD *)(v16 + 8) = 0;
  *(_QWORD *)(v16 + 16) = 0;
  *(_QWORD *)v16 = &off_1E886B778;
  *(_QWORD *)(v16 + 21) = 0;
  *(_QWORD *)(v16 + 32) = 0;
  *(_QWORD *)(v16 + 40) = 0;
  *(_QWORD *)(v16 + 48) = 0;
  *(_QWORD *)(v16 + 56) = v9;
  *(_BYTE *)(v16 + 29) = 0;
  *(_QWORD *)(v16 + 64) = 0;
  awd::profile::Condition::default_instance_ = v16;
  v17 = operator new();
  *(_QWORD *)(v17 + 8) = 0;
  *(_QWORD *)(v17 + 16) = 0;
  *(_QWORD *)v17 = &off_1E886B340;
  *(_DWORD *)(v17 + 24) = 0;
  *(_QWORD *)(v17 + 32) = 0;
  awd::profile::ConditionClause::default_instance_ = v17;
  v18 = operator new();
  *(_QWORD *)v18 = &off_1E886B160;
  *(_OWORD *)(v18 + 8) = 0u;
  *(_OWORD *)(v18 + 24) = 0u;
  *(_DWORD *)(v18 + 40) = 0;
  *(_QWORD *)(v18 + 48) = v9;
  *(_QWORD *)(v18 + 56) = 0;
  awd::profile::TriggerSource::default_instance_ = v18;
  v19 = operator new();
  *(_QWORD *)v19 = &off_1E886B4A8;
  *(_QWORD *)(v19 + 48) = 0;
  *(_QWORD *)(v19 + 56) = 0;
  *(_DWORD *)(v19 + 64) = 0;
  *(_QWORD *)(v19 + 72) = 0;
  *(_DWORD *)(v19 + 80) = 0;
  *(_OWORD *)(v19 + 8) = 0u;
  *(_OWORD *)(v19 + 24) = 0u;
  *(_DWORD *)(v19 + 40) = 0;
  awd::profile::TriggerProcessingRule::default_instance_ = v19;
  v20 = operator new();
  *(_QWORD *)(v20 + 16) = 0;
  *(_QWORD *)v20 = &off_1E886B2C8;
  *(_QWORD *)(v20 + 8) = v9;
  *(_DWORD *)(v20 + 24) = 0;
  awd::profile::AggregationSpec::default_instance_ = v20;
  v21 = operator new();
  *(_QWORD *)v21 = &off_1E886B1D8;
  *(_QWORD *)(v21 + 8) = 0x100000000;
  *(_DWORD *)(v21 + 16) = 0;
  *(_BYTE *)(v21 + 20) = 0;
  *(_QWORD *)(v21 + 24) = 0;
  *(_QWORD *)(v21 + 32) = 0;
  awd::profile::MetricFileSpec::default_instance_ = v21;
  v22 = (_QWORD *)operator new();
  *v22 = &off_1E886B3B8;
  v22[1] = 0;
  v22[2] = 0;
  v22[3] = 0;
  awd::profile::TaskingCriteria::default_instance_ = (uint64_t)v22;
  v23 = operator new();
  *(_QWORD *)(v23 + 8) = 0;
  *(_QWORD *)(v23 + 16) = 0;
  *(_QWORD *)v23 = &off_1E886B430;
  *(_DWORD *)(v23 + 24) = 0;
  *(_QWORD *)(v23 + 40) = 0;
  *(_QWORD *)(v23 + 48) = 0;
  *(_DWORD *)(v23 + 56) = 0;
  *(_QWORD *)(v23 + 72) = 0;
  *(_QWORD *)(v23 + 80) = 0;
  *(_DWORD *)(v23 + 88) = 0;
  *(_QWORD *)(v23 + 96) = 0;
  *(_QWORD *)(v23 + 104) = 0;
  *(_DWORD *)(v23 + 112) = 0;
  *(_QWORD *)(v23 + 120) = 0;
  *(_QWORD *)(v23 + 128) = 0;
  *(_DWORD *)(v23 + 136) = 0;
  *(_DWORD *)(v23 + 168) = 0;
  *(_QWORD *)(v23 + 152) = 0;
  *(_QWORD *)(v23 + 160) = 0;
  *(_QWORD *)(v23 + 176) = 0;
  *(_QWORD *)(v23 + 184) = 0;
  *(_DWORD *)(v23 + 192) = 0;
  *(_DWORD *)(v23 + 32) = 0;
  *(_BYTE *)(v23 + 36) = 0;
  *(_QWORD *)(v23 + 200) = 0;
  *(_QWORD *)(v23 + 64) = v9;
  *(_QWORD *)(v23 + 144) = 0;
  *(_DWORD *)(v23 + 208) = 0;
  awd::profile::DeviceConfiguration::default_instance_ = v23;
  v24 = awd::profile::ProcessingRule::default_instance_;
  v25 = awd::profile::ProcessingRule::default_instance_;
  if (!awd::profile::ProcessingRule::default_instance_)
  {
    v23 = awd::profile::protobuf_AddDesc_AwdProfile_2eproto((awd::profile *)v23);
    v25 = awd::profile::ProcessingRule::default_instance_;
  }
  *(_QWORD *)(v24 + 32) = v25;
  v26 = awd::profile::BedfTreeNode::default_instance_;
  if (awd::profile::BedfTreeNode::default_instance_)
  {
    *(_QWORD *)(awd::profile::BedfTreeNode::default_instance_ + 16) = awd::profile::BedfTreeNode::default_instance_;
    v27 = v26;
    v28 = 0x1ECD3F000;
  }
  else
  {
    v23 = awd::profile::protobuf_AddDesc_AwdProfile_2eproto((awd::profile *)v23);
    v27 = awd::profile::BedfTreeNode::default_instance_;
    MEMORY[0x10] = awd::profile::BedfTreeNode::default_instance_;
    v28 = 0x1ECD3F000uLL;
    if (!awd::profile::BedfTreeNode::default_instance_)
    {
      v23 = awd::profile::protobuf_AddDesc_AwdProfile_2eproto((awd::profile *)v23);
      MEMORY[0x18] = awd::profile::BedfTreeNode::default_instance_;
      v29 = awd::profile::BedfConfig::default_instance_;
      if (!awd::profile::BedfTreeNode::default_instance_)
        v23 = awd::profile::protobuf_AddDesc_AwdProfile_2eproto((awd::profile *)v23);
      goto LABEL_8;
    }
  }
  *(_QWORD *)(v26 + 24) = v27;
  v29 = *(_QWORD *)(v28 + 280);
LABEL_8:
  *(_QWORD *)(v29 + 16) = awd::profile::BedfTreeNode::default_instance_;
  v30 = awd::profile::Profile::default_instance_;
  v31 = awd::profile::Log::default_instance_;
  if (!awd::profile::Log::default_instance_)
  {
    v23 = awd::profile::protobuf_AddDesc_AwdProfile_2eproto((awd::profile *)v23);
    v31 = awd::profile::Log::default_instance_;
  }
  *(_QWORD *)(v30 + 72) = v31;
  v32 = awd::profile::ConfigurationParameter::default_instance_;
  v33 = awd::profile::TypeVariant::default_instance_;
  if (!awd::profile::TypeVariant::default_instance_)
  {
    awd::profile::protobuf_AddDesc_AwdProfile_2eproto((awd::profile *)v23);
    v33 = awd::profile::TypeVariant::default_instance_;
  }
  *(_QWORD *)(v32 + 16) = v33;
  inited = (awd::profile *)awd::profile::Condition::InitAsDefaultInstance((_QWORD *)awd::profile::Condition::default_instance_);
  v36 = awd::profile::DeviceConfiguration::default_instance_;
  v37 = awd::profile::TaskingCriteria::default_instance_;
  if (!awd::profile::TaskingCriteria::default_instance_)
  {
    awd::profile::protobuf_AddDesc_AwdProfile_2eproto(inited);
    v37 = awd::profile::TaskingCriteria::default_instance_;
  }
  *(_QWORD *)(v36 + 144) = v37;
  wireless_diagnostics::google::protobuf::internal::OnShutdown((wireless_diagnostics::google::protobuf::internal *)awd::profile::protobuf_ShutdownFile_AwdProfile_2eproto, v35);
}

_QWORD *awd::profile::Condition::InitAsDefaultInstance(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  v1 = this;
  v2 = awd::profile::TypeVariant::default_instance_;
  if (awd::profile::TypeVariant::default_instance_)
  {
    this[2] = awd::profile::TypeVariant::default_instance_;
LABEL_4:
    v1[4] = v2;
LABEL_5:
    v1[5] = v2;
    goto LABEL_6;
  }
  this = (_QWORD *)awd::profile::protobuf_AddDesc_AwdProfile_2eproto((awd::profile *)this);
  v2 = awd::profile::TypeVariant::default_instance_;
  v1[2] = awd::profile::TypeVariant::default_instance_;
  if (v2)
    goto LABEL_4;
  this = (_QWORD *)awd::profile::protobuf_AddDesc_AwdProfile_2eproto((awd::profile *)this);
  v2 = awd::profile::TypeVariant::default_instance_;
  v1[4] = awd::profile::TypeVariant::default_instance_;
  if (v2)
    goto LABEL_5;
  this = (_QWORD *)awd::profile::protobuf_AddDesc_AwdProfile_2eproto((awd::profile *)this);
  v2 = awd::profile::TypeVariant::default_instance_;
  v1[5] = awd::profile::TypeVariant::default_instance_;
  if (!v2)
  {
    this = (_QWORD *)awd::profile::protobuf_AddDesc_AwdProfile_2eproto((awd::profile *)this);
    v2 = awd::profile::TypeVariant::default_instance_;
  }
LABEL_6:
  v1[6] = v2;
  return this;
}

double sub_1CC591C50()
{
  double result;

  qword_1ECD3F1D8 = 850045863;
  result = 0.0;
  unk_1ECD3F1E0 = 0u;
  unk_1ECD3F1F0 = 0u;
  unk_1ECD3F200 = 0u;
  qword_1ECD3F210 = 0;
  qword_1ECD3F1C8 = 0;
  unk_1ECD3F1D0 = 0;
  return result;
}

void awd::asString(unsigned int *a1@<X0>, std::string *a2@<X8>)
{
  std::string *v4;
  __int128 v5;
  std::string *v6;
  __int128 v7;
  void **v8;
  std::string::size_type v9;
  std::string *v10;
  __int128 v11;
  std::string *v12;
  __int128 v13;
  std::string *v14;
  std::string::size_type size;
  std::string *v16;
  __int128 v17;
  std::string *v18;
  std::string v19;
  void *__p[2];
  unsigned __int8 v21;
  std::string v22;
  std::string v23;
  std::string v24;
  std::string v25;
  std::string v26;
  std::string v27;

  ctu::hex((ctu *)*a1);
  v4 = std::string::insert(&v22, 0, "Trigger(cid=0x");
  v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  v23.__r_.__value_.__r.__words[2] = v4->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v23.__r_.__value_.__l.__data_ = v5;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  v6 = std::string::append(&v23, ", trid=0x");
  v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  v24.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v24.__r_.__value_.__l.__data_ = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  ctu::hex((ctu *)a1[1]);
  if ((v21 & 0x80u) == 0)
    v8 = __p;
  else
    v8 = (void **)__p[0];
  if ((v21 & 0x80u) == 0)
    v9 = v21;
  else
    v9 = (std::string::size_type)__p[1];
  v10 = std::string::append(&v24, (const std::string::value_type *)v8, v9);
  v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
  v25.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v25.__r_.__value_.__l.__data_ = v11;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  v12 = std::string::append(&v25, ", sid=");
  v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  v26.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v26.__r_.__value_.__l.__data_ = v13;
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v19, a1[2]);
  if ((v19.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v14 = &v19;
  else
    v14 = (std::string *)v19.__r_.__value_.__r.__words[0];
  if ((v19.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v19.__r_.__value_.__r.__words[2]);
  else
    size = v19.__r_.__value_.__l.__size_;
  v16 = std::string::append(&v26, (const std::string::value_type *)v14, size);
  v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
  v27.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v27.__r_.__value_.__l.__data_ = v17;
  v16->__r_.__value_.__l.__size_ = 0;
  v16->__r_.__value_.__r.__words[2] = 0;
  v16->__r_.__value_.__r.__words[0] = 0;
  v18 = std::string::append(&v27, ")");
  *a2 = *v18;
  v18->__r_.__value_.__l.__size_ = 0;
  v18->__r_.__value_.__r.__words[2] = 0;
  v18->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v27.__r_.__value_.__l.__data_);
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v19.__r_.__value_.__l.__data_);
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v26.__r_.__value_.__l.__data_);
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v25.__r_.__value_.__l.__data_);
  if ((char)v21 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v24.__r_.__value_.__l.__data_);
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v23.__r_.__value_.__l.__data_);
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v22.__r_.__value_.__l.__data_);
}

void sub_1CC591E7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  uint64_t v40;

  if (*(char *)(v40 - 41) < 0)
    operator delete(*(void **)(v40 - 64));
  if (a15 < 0)
    operator delete(__p);
  if (*(char *)(v40 - 73) < 0)
    operator delete(*(void **)(v40 - 96));
  if (*(char *)(v40 - 105) < 0)
    operator delete(*(void **)(v40 - 128));
  if (a21 < 0)
    operator delete(a16);
  if (a40 < 0)
    operator delete(a35);
  if (a33 < 0)
    operator delete(a28);
  if (a27 < 0)
    operator delete(a22);
  _Unwind_Resume(exception_object);
}

const char *awd::asString(unsigned int a1)
{
  if (a1 > 2)
    return "???";
  else
    return off_1E886C200[(char)a1];
}

unint64_t awd::getAWDTimestamp(awd *this)
{
  timeval v2;

  gettimeofday(&v2, 0);
  return 1000 * v2.tv_sec + v2.tv_usec / 0x3E8uLL;
}

unint64_t awd::timevalToTimestamp(awd *this, timeval *a2)
{
  return 1000 * *(_QWORD *)this + *((int *)this + 2) / 0x3E8uLL;
}

void awd::createTagForProtobuf(awd *this@<X0>, unsigned int a2@<W1>, unint64_t *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  sub_1CC592048(a3, (8 * (_DWORD)this) | 2);
  sub_1CC592048(a3, a2);
}

void sub_1CC59202C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_1CC592048(unint64_t *a1, unsigned int a2)
{
  unsigned int v2;
  _BYTE *v4;
  unsigned int v5;
  char v6;
  unint64_t v7;
  _BYTE *v8;
  unint64_t v9;
  _BYTE *v10;
  unint64_t v11;
  unint64_t v12;
  size_t v13;
  char *v14;
  char *v15;
  _BYTE *v16;
  _BYTE *v17;
  char v18;
  unsigned int v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  _BYTE *v23;
  unint64_t v24;
  unint64_t v25;
  size_t v26;
  unint64_t v27;
  char *v28;
  _BYTE *v29;
  char v30;

  LOBYTE(v2) = a2;
  if (a2 <= 0x7F)
  {
    v8 = (_BYTE *)a1[1];
  }
  else
  {
    v4 = (_BYTE *)a1[1];
    v5 = a2;
    do
    {
      v6 = v5 | 0x80;
      v7 = a1[2];
      if ((unint64_t)v4 >= v7)
      {
        v9 = *a1;
        v10 = &v4[-*a1];
        v11 = (unint64_t)(v10 + 1);
        if ((uint64_t)(v10 + 1) < 0)
          goto LABEL_42;
        v12 = v7 - v9;
        if (2 * v12 > v11)
          v11 = 2 * v12;
        if (v12 >= 0x3FFFFFFFFFFFFFFFLL)
          v13 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v13 = v11;
        if (v13)
          v14 = (char *)operator new(v13);
        else
          v14 = 0;
        v15 = &v10[(_QWORD)v14];
        v16 = &v10[(_QWORD)v14];
        *v16 = v6;
        v8 = v16 + 1;
        if (v4 != (_BYTE *)v9)
        {
          v17 = &v4[~v9];
          do
          {
            v18 = *--v4;
            (v17--)[(_QWORD)v14] = v18;
          }
          while (v4 != (_BYTE *)v9);
          v4 = (_BYTE *)*a1;
          v15 = v14;
        }
        *a1 = (unint64_t)v15;
        a1[1] = (unint64_t)v8;
        a1[2] = (unint64_t)&v14[v13];
        if (v4)
          operator delete(v4);
      }
      else
      {
        *v4 = v6;
        v8 = v4 + 1;
      }
      a1[1] = (unint64_t)v8;
      v2 = v5 >> 7;
      v19 = v5 >> 14;
      v4 = v8;
      v5 >>= 7;
    }
    while (v19);
  }
  v20 = a1[2];
  if ((unint64_t)v8 >= v20)
  {
    v22 = *a1;
    v23 = &v8[-*a1];
    v24 = (unint64_t)(v23 + 1);
    if ((uint64_t)(v23 + 1) < 0)
LABEL_42:
      sub_1CC592ABC();
    v25 = v20 - v22;
    if (2 * v25 > v24)
      v24 = 2 * v25;
    if (v25 >= 0x3FFFFFFFFFFFFFFFLL)
      v26 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v26 = v24;
    if (v26)
      v27 = (unint64_t)operator new(v26);
    else
      v27 = 0;
    v28 = (char *)(v27 + v26);
    v23[v27] = v2;
    v21 = (uint64_t)&v23[v27 + 1];
    if (v8 == (_BYTE *)v22)
    {
      v27 += (unint64_t)v23;
    }
    else
    {
      v29 = &v8[~v22];
      do
      {
        v30 = *--v8;
        (v29--)[v27] = v30;
      }
      while (v8 != (_BYTE *)v22);
      v8 = (_BYTE *)*a1;
    }
    *a1 = v27;
    a1[1] = v21;
    a1[2] = (unint64_t)v28;
    if (v8)
      operator delete(v8);
  }
  else
  {
    *v8 = v2;
    v21 = (uint64_t)(v8 + 1);
  }
  a1[1] = v21;
}

void *awd::tagSerializedProtobuf(int a1, uint64_t a2)
{
  int v3;
  char *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  size_t v9;
  uint64_t v10;
  unsigned int v11;
  size_t v12;
  void *result;
  char v14;
  _BYTE v15[5];
  _BYTE __src[5];

  v3 = *(_DWORD *)(a2 + 8);
  v4 = *(char **)a2;
  v5 = v3 - (_DWORD)v4;
  v6 = (8 * a1) | 2;
  if (v6 < 0x80)
  {
    LODWORD(v7) = 0;
  }
  else
  {
    v7 = 0;
    do
    {
      __src[v7++] = v6 | 0x80;
      v8 = v6 >> 14;
      v6 >>= 7;
    }
    while (v8);
  }
  v9 = (v7 + 1);
  __src[v7] = v6;
  if (v5 < 0x80)
  {
    LODWORD(v10) = 0;
  }
  else
  {
    v10 = 0;
    do
    {
      v15[v10++] = v5 | 0x80;
      v11 = v5 >> 14;
      v5 >>= 7;
    }
    while (v11);
  }
  v12 = (v10 + 1);
  v15[v10] = v5;
  v14 = 0;
  result = sub_1CC59231C((char **)a2, v4, (v12 + v9), &v14);
  if ((_DWORD)v9)
    result = memcpy(*(void **)a2, __src, v9);
  if ((_DWORD)v12)
    return memcpy((void *)(*(_QWORD *)a2 + v9), v15, v12);
  return result;
}

char *sub_1CC59231C(char **a1, char *__src, unint64_t a3, char *a4)
{
  char *v5;
  unint64_t v6;
  char *v8;
  char *v9;
  char *v10;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  size_t v14;
  void *v15;
  unint64_t v16;
  unint64_t v17;
  char *v18;
  char *v19;
  unint64_t v20;
  char *v21;
  char *v22;
  unint64_t v23;
  char *v24;
  char *v25;
  char *v26;
  unint64_t v27;
  char *v28;
  char *v29;
  char *v30;
  char *v31;
  char *v32;
  char *v33;
  char *v34;
  char v35;
  char *v36;
  char *v37;

  if (!a3)
    return __src;
  v5 = a4;
  v6 = a3;
  v9 = a1[1];
  v8 = a1[2];
  if (v8 - v9 >= a3)
  {
    v16 = v9 - __src;
    v17 = a3 - (v9 - __src);
    if (a3 <= v9 - __src)
    {
      v18 = a1[1];
      v20 = a3;
      goto LABEL_17;
    }
    v18 = &__src[a3];
    v19 = a1[1];
    do
    {
      *v19++ = *a4;
      --v17;
    }
    while (v17);
    a1[1] = v18;
    if (v16)
    {
      v20 = v9 - __src;
LABEL_17:
      v21 = &__src[a3];
      v22 = v18;
      if (&v18[-a3] < v9)
      {
        if (a3 <= v16)
          v23 = v9 - __src;
        else
          v23 = a3;
        v24 = &__src[-a3];
        v25 = __src;
        v26 = __src;
        do
        {
          v25[v23] = v24[v23];
          ++v26;
          ++v24;
          ++v25;
        }
        while (&v26[v23 - (_QWORD)v9 - a3]);
        if (a3 > v16)
          v16 = a3;
        v22 = &v25[v16];
      }
      a1[1] = v22;
      if (v18 != v21)
        memmove(&__src[a3], __src, v18 - v21);
      if (__src <= v5)
      {
        if (a1[1] <= v5)
          v27 = 0;
        else
          v27 = v6;
        v5 += v27;
      }
      v28 = __src;
      do
      {
        *v28++ = *v5;
        --v20;
      }
      while (v20);
    }
    return __src;
  }
  v10 = *a1;
  v11 = v9 - *a1 + a3;
  if (v11 < 0)
    sub_1CC592ABC();
  v12 = (char *)(__src - v10);
  v13 = v8 - v10;
  if (2 * v13 > v11)
    v11 = 2 * v13;
  if (v13 >= 0x3FFFFFFFFFFFFFFFLL)
    v14 = 0x7FFFFFFFFFFFFFFFLL;
  else
    v14 = v11;
  if (v14)
    v15 = operator new(v14);
  else
    v15 = 0;
  v29 = &v12[(_QWORD)v15];
  v30 = &v29[v6];
  v31 = v29;
  do
  {
    *v31++ = *v5;
    --v6;
  }
  while (v6);
  v32 = *a1;
  if (*a1 == __src)
  {
    v34 = v29;
  }
  else
  {
    v33 = __src;
    v34 = v29;
    do
    {
      v35 = *--v33;
      *--v34 = v35;
    }
    while (v33 != v32);
    v9 = a1[1];
  }
  v36 = (char *)v15 + v14;
  if (v9 != __src)
    memmove(v30, __src, v9 - __src);
  v37 = *a1;
  *a1 = v34;
  a1[1] = &v30[v9 - __src];
  a1[2] = v36;
  if (v37)
    operator delete(v37);
  return v29;
}

uint64_t awd::serializeMetric@<X0>(awd *this@<X0>, const wireless_diagnostics::google::protobuf::MessageLite *a2@<X1>, unint64_t *a3@<X8>)
{
  signed int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;

  v6 = (*(uint64_t (**)(awd *))(*(_QWORD *)this + 72))(this);
  awd::createTagForProtobuf(a2, v6, a3);
  v7 = *a3;
  v8 = a3[1] - *a3;
  v9 = v8 + v6;
  if (v8 >= v9)
  {
    if (v8 > v9)
      a3[1] = v7 + v9;
  }
  else
  {
    sub_1CC592B54(a3, v6);
    v7 = *a3;
  }
  return MEMORY[0x1D17AD388](this, v7 + v8, v6);
}

void sub_1CC5925C8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void awd::serializeMetric(uint64_t a1@<X0>, awd *a2@<X1>, uint64_t a3@<X8>)
{
  char *v6;
  char *v7;

  PB::Writer::Writer((PB::Writer *)&v6);
  (*(void (**)(uint64_t, char **))(*(_QWORD *)a1 + 24))(a1, &v6);
  awd::createTagForProtobuf(a2, (_DWORD)v6 - (_DWORD)v7, (unint64_t *)a3);
  sub_1CC592C7C(a3, *(char **)(a3 + 8), v7, v6, v6 - v7);
  PB::Writer::~Writer((PB::Writer *)&v6);
}

void sub_1CC592664(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  void *v4;
  va_list va;

  va_start(va, a2);
  v4 = *(void **)v2;
  if (*(_QWORD *)v2)
  {
    *(_QWORD *)(v2 + 8) = v4;
    operator delete(v4);
  }
  PB::Writer::~Writer((PB::Writer *)va);
  _Unwind_Resume(a1);
}

uint64_t awd::GetProtobufTag@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  return awd::GetProtobufTag(*a1, (const unsigned __int8 *)(a1[1] - *a1), a2);
}

uint64_t awd::GetProtobufTag@<X0>(uint64_t this@<X0>, const unsigned __int8 *a2@<X1>, _QWORD *a3@<X8>)
{
  int v3;
  unsigned __int8 *v5;
  unsigned int v6;
  void *exception;
  uint64_t v8;

  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  if (this)
  {
    v3 = this;
    v5 = (unsigned __int8 *)&a2[this];
    v8 = this;
    v6 = sub_1CC59278C(&v8, &a2[this]);
    if ((v6 & 7) != 2)
    {
      exception = __cxa_allocate_exception(0x10uLL);
      MEMORY[0x1D17AD3DC](exception, &unk_1CC5C89B3);
      __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
    }
    *((_DWORD *)a3 + 4) = v6 >> 3;
    this = sub_1CC59278C(&v8, v5);
    *a3 = (v8 - v3);
    a3[1] = this;
  }
  return this;
}

void sub_1CC592754(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  _QWORD *v16;
  void *v17;

  __cxa_free_exception(v17);
  __cxa_begin_catch(a1);
  v16[1] = 0;
  v16[2] = 0;
  *v16 = 0;
  __cxa_end_catch();
}

uint64_t sub_1CC59278C(_QWORD *a1, _BYTE *a2)
{
  _BYTE *v2;
  _BYTE *v3;
  int v4;
  char v5;
  uint64_t result;
  void *exception;

  v2 = (_BYTE *)*a1;
  if ((_BYTE *)*a1 == a2)
    goto LABEL_11;
  v3 = (_BYTE *)*a1;
  while ((char)*v3 < 0)
  {
    if (++v3 == a2)
    {
      v3 = a2;
      break;
    }
  }
  if (v3 == a2)
  {
LABEL_11:
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1D17AD3DC](exception, &unk_1CC5C89B3);
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  *a1 = v3 + 1;
  v4 = *v3 & 0x7F;
  if (v3 == v2)
    return *v3 & 0x7F;
  do
  {
    v5 = *--v3;
    result = v5 & 0x7F | (v4 << 7);
    v4 = v5 & 0x7F | (v4 << 7);
  }
  while (v3 != v2);
  return result;
}

void sub_1CC592838(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t awd::getComponentForMetricId(awd *this)
{
  return this >> 16;
}

uint64_t awd::getCoreAnalyticsEventName(awd *this)
{
  _QWORD *v1;
  _QWORD v3[11];
  char v4;
  uint64_t v5;

  sub_1CC59294C((uint64_t)v3);
  v1 = sub_1CC592E64(v3, (uint64_t)"com.apple.awd.0x", 16);
  *(_DWORD *)((char *)v1 + *(_QWORD *)(*v1 - 24) + 8) = *(_DWORD *)((_BYTE *)v1 + *(_QWORD *)(*v1 - 24) + 8) & 0xFFFFFFB5 | 8;
  std::ostream::operator<<();
  std::stringbuf::str();
  v3[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v3 + *(_QWORD *)(v3[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v3[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v4 < 0)
    operator delete((void *)v3[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1D17AD508](&v5);
}

void sub_1CC592938(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1CC592A38((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1CC59294C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  std::ios_base *v6;

  v2 = MEMORY[0x1E0DE4FE0];
  v3 = MEMORY[0x1E0DE4FE0] + 64;
  *(_QWORD *)(a1 + 112) = MEMORY[0x1E0DE4FE0] + 64;
  v4 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v5 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + *(_QWORD *)(v4 - 24)) = v5;
  v6 = (std::ios_base *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24));
  std::ios_base::init(v6, (void *)(a1 + 8));
  v6[1].__vftable = 0;
  v6[1].__fmtflags_ = -1;
  *(_QWORD *)a1 = v2 + 24;
  *(_QWORD *)(a1 + 112) = v3;
  std::streambuf::basic_streambuf();
  *(_QWORD *)(a1 + 8) = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_DWORD *)(a1 + 104) = 16;
  return a1;
}

void sub_1CC592A10(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x1D17AD508](v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1CC592A38(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = MEMORY[0x1E0DE4F60];
  v3 = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)a1 = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)(a1 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(a1 + 8) = MEMORY[0x1E0DE4FB8] + 16;
  if (*(char *)(a1 + 95) < 0)
    operator delete(*(void **)(a1 + 72));
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1D17AD508](a1 + 112);
  return a1;
}

void sub_1CC592ABC()
{
  sub_1CC592AE0("vector");
}

void sub_1CC592AD0(void *a1)
{
  __cxa_begin_catch(a1);
  std::terminate();
}

void sub_1CC592AE0(const char *a1)
{
  std::logic_error *exception;

  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  sub_1CC592B30(exception, a1);
  __cxa_throw(exception, (struct type_info *)off_1E886A0D8, MEMORY[0x1E0DE42D0]);
}

void sub_1CC592B1C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *sub_1CC592B30(std::logic_error *a1, const char *a2)
{
  std::logic_error *result;

  result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5020] + 16);
  return result;
}

void sub_1CC592B54(unint64_t *a1, size_t a2)
{
  char *v4;
  char *v5;
  unint64_t v6;
  char *v7;
  unint64_t v8;
  unint64_t v9;
  size_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  char v15;

  v5 = (char *)a1[1];
  v4 = (char *)a1[2];
  if (v4 - v5 >= a2)
  {
    if (a2)
    {
      bzero((void *)a1[1], a2);
      v5 += a2;
    }
    a1[1] = (unint64_t)v5;
  }
  else
  {
    v6 = *a1;
    v7 = &v5[-*a1];
    v8 = (unint64_t)&v7[a2];
    if ((uint64_t)&v7[a2] < 0)
      sub_1CC592ABC();
    v9 = (unint64_t)&v4[-v6];
    if (2 * v9 > v8)
      v8 = 2 * v9;
    if (v9 >= 0x3FFFFFFFFFFFFFFFLL)
      v10 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v10 = v8;
    if (v10)
      v11 = (unint64_t)operator new(v10);
    else
      v11 = 0;
    v12 = &v7[v11];
    v13 = (char *)(v11 + v10);
    bzero(v12, a2);
    if (v5 == (char *)v6)
    {
      v11 = (unint64_t)v12;
    }
    else
    {
      v14 = &v5[~v6];
      do
      {
        v15 = *--v5;
        (v14--)[v11] = v15;
      }
      while (v5 != (char *)v6);
      v5 = (char *)*a1;
    }
    *a1 = v11;
    a1[1] = (unint64_t)&v12[a2];
    a1[2] = (unint64_t)v13;
    if (v5)
      operator delete(v5);
  }
}

char *sub_1CC592C7C(uint64_t a1, char *__dst, char *__src, char *a4, int64_t a5)
{
  char *v5;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  char *v13;
  unint64_t v14;
  size_t v15;
  size_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  char *v21;
  char *v22;
  char *v23;
  char *v24;
  int64_t v25;
  char v26;
  char *v27;
  char *v28;
  size_t v29;
  char *v30;
  char *v31;
  char *v32;

  v5 = __dst;
  if (a5 < 1)
    return v5;
  v10 = *(char **)(a1 + 8);
  v9 = *(_QWORD *)(a1 + 16);
  if (v9 - (uint64_t)v10 < a5)
  {
    v11 = *(char **)a1;
    v12 = (uint64_t)&v10[a5 - *(_QWORD *)a1];
    if (v12 < 0)
      sub_1CC592ABC();
    v13 = (char *)(__dst - v11);
    v14 = v9 - (_QWORD)v11;
    if (2 * v14 > v12)
      v12 = 2 * v14;
    if (v14 >= 0x3FFFFFFFFFFFFFFFLL)
      v15 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v15 = v12;
    if (v15)
    {
      v16 = v15;
      v17 = (char *)operator new(v15);
    }
    else
    {
      v16 = 0;
      v17 = 0;
    }
    v27 = &v13[(_QWORD)v17];
    memcpy(&v13[(_QWORD)v17], __src, a5);
    v28 = &v13[(_QWORD)v17];
    v29 = v16;
    if (v11 != v5)
    {
      do
      {
        v13[(_QWORD)v17 - 1] = v13[(_QWORD)(v11 - 1)];
        --v13;
      }
      while (v13);
      v10 = *(char **)(a1 + 8);
      v28 = v17;
    }
    v30 = &v27[a5];
    v31 = &v17[v29];
    if (v10 != v5)
      memmove(v30, v5, v10 - v5);
    v32 = *(char **)a1;
    *(_QWORD *)a1 = v28;
    *(_QWORD *)(a1 + 8) = &v30[v10 - v5];
    *(_QWORD *)(a1 + 16) = v31;
    if (v32)
      operator delete(v32);
    return v27;
  }
  v18 = v10 - __dst;
  if (v10 - __dst >= a5)
  {
    v19 = &__src[a5];
    v21 = *(char **)(a1 + 8);
LABEL_17:
    v22 = &v5[a5];
    v23 = &v21[-a5];
    v24 = v21;
    if (&v21[-a5] < v10)
    {
      v25 = &v10[a5] - v21;
      v24 = v21;
      do
      {
        v26 = *v23++;
        *v24++ = v26;
        --v25;
      }
      while (v25);
    }
    *(_QWORD *)(a1 + 8) = v24;
    if (v21 != v22)
      memmove(&v5[a5], v5, v21 - v22);
    if (v19 != __src)
      memmove(v5, __src, v19 - __src);
    return v5;
  }
  v19 = &__src[v18];
  v20 = a4 - &__src[v18];
  if (a4 != &__src[v18])
    memmove(*(void **)(a1 + 8), &__src[v18], a4 - &__src[v18]);
  v21 = &v10[v20];
  *(_QWORD *)(a1 + 8) = &v10[v20];
  if (v18 >= 1)
    goto LABEL_17;
  return v5;
}

_QWORD *sub_1CC592E64(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  const std::locale::facet *v10;
  uint64_t v11;
  _BYTE v13[16];
  std::locale v14;

  MEMORY[0x1D17AD430](v13, a1);
  if (v13[0])
  {
    v6 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
    v7 = *(_QWORD *)(v6 + 40);
    v8 = *(_DWORD *)(v6 + 8);
    v9 = *(_DWORD *)(v6 + 144);
    if (v9 == -1)
    {
      std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)));
      v10 = std::locale::use_facet(&v14, MEMORY[0x1E0DE4A90]);
      v9 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 32);
      std::locale::~locale(&v14);
      *(_DWORD *)(v6 + 144) = v9;
    }
    if ((v8 & 0xB0) == 0x20)
      v11 = a2 + a3;
    else
      v11 = a2;
    if (!sub_1CC592FC8(v7, a2, v11, a2 + a3, v6, (char)v9))
      std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | 5);
  }
  MEMORY[0x1D17AD43C](v13);
  return a1;
}

void sub_1CC592F6C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, std::locale a12)
{
  _QWORD *v12;

  MEMORY[0x1D17AD43C](&a10);
  __cxa_begin_catch(a1);
  std::ios_base::__set_badbit_and_consider_rethrow((std::ios_base *)((char *)v12 + *(_QWORD *)(*v12 - 24)));
  __cxa_end_catch();
  JUMPOUT(0x1CC592F4CLL);
}

void sub_1CC592FB4(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t sub_1CC592FC8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int __c)
{
  uint64_t v6;
  uint64_t v11;
  int64_t v12;
  void **v13;
  uint64_t v14;
  uint64_t v15;
  void *__p[2];
  char v18;

  v6 = a1;
  if (a1)
  {
    v11 = *(_QWORD *)(a5 + 24);
    if (v11 <= a4 - a2)
      v12 = 0;
    else
      v12 = v11 - (a4 - a2);
    if (a3 - a2 >= 1 && (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 96))(a1) != a3 - a2)
      return 0;
    if (v12 >= 1)
    {
      sub_1CC593104(__p, v12, __c);
      v13 = v18 >= 0 ? __p : (void **)__p[0];
      v14 = (*(uint64_t (**)(uint64_t, void **, int64_t))(*(_QWORD *)v6 + 96))(v6, v13, v12);
      if (v18 < 0)
        operator delete(__p[0]);
      if (v14 != v12)
        return 0;
    }
    v15 = a4 - a3;
    if (v15 < 1 || (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v6 + 96))(v6, a3, v15) == v15)
      *(_QWORD *)(a5 + 24) = 0;
    else
      return 0;
  }
  return v6;
}

void sub_1CC5930E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_1CC593104(_QWORD *__b, size_t __len, int __c)
{
  void *v6;
  size_t v7;
  size_t v8;

  if (__len >= 0x7FFFFFFFFFFFFFF8)
    sub_1CC5931AC();
  if (__len >= 0x17)
  {
    v7 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17)
      v7 = __len | 7;
    v8 = v7 + 1;
    v6 = operator new(v7 + 1);
    __b[1] = __len;
    __b[2] = v8 | 0x8000000000000000;
    *__b = v6;
  }
  else
  {
    *((_BYTE *)__b + 23) = __len;
    v6 = __b;
    if (!__len)
      goto LABEL_9;
  }
  memset(v6, __c, __len);
LABEL_9:
  *((_BYTE *)v6 + __len) = 0;
  return __b;
}

void sub_1CC5931AC()
{
  sub_1CC592AE0("basic_string");
}

uint64_t awd::ServerConnectionInfo::ServerConnectionInfo(uint64_t a1, NSObject **a2, int a3, char a4)
{
  _QWORD *v7;

  v7 = sub_1CC593250((_QWORD *)a1, a2, "conn.info");
  *((_DWORD *)v7 + 10) = a3;
  *((_BYTE *)v7 + 44) = a4;
  awd::AWDLoggingMetric::AWDLoggingMetric((awd::AWDLoggingMetric *)(v7 + 6));
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 112) = a1 + 120;
  *(_QWORD *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = a1 + 144;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  return a1;
}

_QWORD *sub_1CC593250(_QWORD *a1, NSObject **a2, char *a3)
{
  NSObject *v5;

  *a1 = 0;
  a1[1] = 0;
  v5 = *a2;
  a1[2] = *a2;
  if (v5)
    dispatch_retain(v5);
  a1[3] = 0;
  ctu::OsLogLogger::OsLogLogger((ctu::OsLogLogger *)(a1 + 4), "com.apple.awd.framework", a3);
  return a1;
}

void sub_1CC5932A4(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_1CC594A2C(v1);
  _Unwind_Resume(a1);
}

void awd::ServerConnectionInfo::setComponentConfig_sync(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;

  v3 = a1 + 48;
  v4 = a2[1];
  v11 = *a2;
  v12 = (std::__shared_weak_count *)v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  awd::AWDLoggingMetric::setConfiguration(v3, &v11);
  v7 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  v10 = *(_QWORD *)(a1 + 176);
  if (v10)
    (*(void (**)(void))(v10 + 16))();
  if (*(_QWORD *)(a1 + 168))
  {
    wireless_diagnostics::google::protobuf::MessageLite::SerializeToString();
    (*(void (**)(void))(*(_QWORD *)(a1 + 168) + 16))();
  }
}

void sub_1CC5933B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t awd::ServerConnectionInfo::trigger_sync@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, unsigned int **a4@<X3>, char **a5@<X8>)
{
  unsigned int *v8;
  unsigned int *v9;
  uint64_t *v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  BOOL v15;
  uint64_t *v16;
  NSObject *v17;
  unint64_t v18;
  char *v19;
  char *v20;
  char *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char *v26;
  char *v27;
  int v28;
  const void *v29;
  void *v30;
  NSObject *global_queue;
  void *v32;
  uint64_t result;
  _QWORD block[5];
  void *aBlock;
  unsigned int v38;
  uint8_t buf[4];
  unsigned int v40;
  uint64_t v41;

  v41 = *MEMORY[0x1E0C80C00];
  awd::AWDLoggingMetric::trigger(a1 + 48, a2, a3);
  *a5 = 0;
  a5[1] = 0;
  a5[2] = 0;
  v9 = *a4;
  v8 = a4[1];
  if (v9 != v8)
  {
    v10 = (uint64_t *)(a1 + 120);
    do
    {
      v11 = *v9;
      v12 = *v10;
      if (!*v10)
        goto LABEL_14;
      v13 = a1 + 120;
      do
      {
        v14 = *(_DWORD *)(v12 + 32);
        v15 = v14 >= v11;
        if (v14 >= v11)
          v16 = (uint64_t *)v12;
        else
          v16 = (uint64_t *)(v12 + 8);
        if (v15)
          v13 = v12;
        v12 = *v16;
      }
      while (*v16);
      if ((uint64_t *)v13 != v10 && v11 >= *(_DWORD *)(v13 + 32))
      {
        v19 = a5[1];
        v18 = (unint64_t)a5[2];
        if ((unint64_t)v19 >= v18)
        {
          v21 = *a5;
          v22 = (v19 - *a5) >> 2;
          v23 = v22 + 1;
          if ((unint64_t)(v22 + 1) >> 62)
            sub_1CC592ABC();
          v24 = v18 - (_QWORD)v21;
          if (v24 >> 1 > v23)
            v23 = v24 >> 1;
          if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFFCLL)
            v25 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v25 = v23;
          if (v25)
          {
            v26 = (char *)sub_1CC594C00((uint64_t)(a5 + 2), v25);
            v21 = *a5;
            v19 = a5[1];
          }
          else
          {
            v26 = 0;
          }
          v27 = &v26[4 * v22];
          *(_DWORD *)v27 = v11;
          v20 = v27 + 4;
          while (v19 != v21)
          {
            v28 = *((_DWORD *)v19 - 1);
            v19 -= 4;
            *((_DWORD *)v27 - 1) = v28;
            v27 -= 4;
          }
          *a5 = v27;
          a5[1] = v20;
          a5[2] = &v26[4 * v25];
          if (v21)
            operator delete(v21);
        }
        else
        {
          *(_DWORD *)v19 = v11;
          v20 = v19 + 4;
        }
        a5[1] = v20;
        v29 = *(const void **)(v13 + 40);
        if (v29)
          v30 = _Block_copy(v29);
        else
          v30 = 0;
        global_queue = dispatch_get_global_queue(0, 0);
        block[0] = MEMORY[0x1E0C809B0];
        block[1] = 1174405120;
        block[2] = sub_1CC5936E0;
        block[3] = &unk_1E886BC08;
        block[4] = a1;
        v38 = v11;
        if (v30)
          v32 = _Block_copy(v30);
        else
          v32 = 0;
        aBlock = v32;
        dispatch_async(global_queue, block);
        if (aBlock)
          _Block_release(aBlock);
        if (v30)
          _Block_release(v30);
      }
      else
      {
LABEL_14:
        v17 = *(NSObject **)(a1 + 32);
        if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 67109120;
          v40 = v11;
          _os_log_impl(&dword_1CC590000, v17, OS_LOG_TYPE_INFO, "server.conn:#I No queriable callback for metric id 0x%x", buf, 8u);
        }
      }
      ++v9;
    }
    while (v9 != v8);
  }
  result = *(_QWORD *)(a1 + 160);
  if (result)
    return (*(uint64_t (**)(uint64_t, unint64_t, unint64_t, uint64_t))(result + 16))(result, HIDWORD(a2), a2, a3);
  return result;
}

void sub_1CC59369C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1CC5936E0(uint64_t a1)
{
  NSObject *v2;

  v2 = *(NSObject **)(*(_QWORD *)(a1 + 32) + 32);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
    sub_1CC5C3168(a1, v2);
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
}

void *sub_1CC593734(uint64_t a1, uint64_t a2)
{
  void *result;

  result = *(void **)(a2 + 40);
  if (result)
    result = _Block_copy(result);
  *(_QWORD *)(a1 + 40) = result;
  return result;
}

void sub_1CC593764(uint64_t a1)
{
  const void *v1;

  v1 = *(const void **)(a1 + 40);
  if (v1)
    _Block_release(v1);
}

uint64_t awd::ServerConnectionInfo::triggerAnalyticsQuery_sync(awd::ServerConnectionInfo *this, uint64_t a2, uint64_t a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  char *v7;
  unsigned int v8;
  BOOL v9;
  char **v10;
  NSObject *v11;
  NSObject *global_queue;
  const void *v14;
  void *v15;
  _QWORD *v16;
  uint64_t v17;
  uint8_t buf[8];
  uint64_t v19;

  v3 = a2;
  v19 = *MEMORY[0x1E0C80C00];
  v4 = *((_QWORD *)this + 20);
  if (v4)
  {
    v5 = 1;
    (*(void (**)(_QWORD, uint64_t, uint64_t, uint64_t))(v4 + 16))(*((_QWORD *)this + 20), a2, 1, a3);
  }
  else
  {
    v6 = (char *)*((_QWORD *)this + 15);
    if (!v6)
      goto LABEL_14;
    v7 = (char *)this + 120;
    do
    {
      v8 = *((_DWORD *)v6 + 8);
      v9 = v8 >= a2;
      if (v8 >= a2)
        v10 = (char **)v6;
      else
        v10 = (char **)(v6 + 8);
      if (v9)
        v7 = v6;
      v6 = *v10;
    }
    while (*v10);
    if (v7 != (char *)this + 120 && *((_DWORD *)v7 + 8) <= a2)
    {
      global_queue = dispatch_get_global_queue(0, 0);
      v14 = (const void *)*((_QWORD *)v7 + 5);
      if (v14)
        v15 = _Block_copy(v14);
      else
        v15 = 0;
      v16 = (_QWORD *)operator new();
      *(_DWORD *)v16 = v3;
      v16[1] = v15;
      v17 = 0;
      *(_QWORD *)buf = 0;
      dispatch_async_f(global_queue, v16, (dispatch_function_t)sub_1CC594C88);
      sub_1CC594C34(&v17);
      sub_1CC594C34((uint64_t *)buf);
      return 1;
    }
    else
    {
LABEL_14:
      v11 = *((_QWORD *)this + 4);
      if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 67109120;
        *(_DWORD *)&buf[4] = v3;
        _os_log_impl(&dword_1CC590000, v11, OS_LOG_TYPE_INFO, "server.conn:#I No queriable callback for metric id 0x%x for analytics", buf, 8u);
      }
      return 0;
    }
  }
  return v5;
}

void sub_1CC59390C(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_1CC592AD0(a1);
  _Unwind_Resume(a1);
}

void awd::ServerConnectionInfo::handleNotificationTimer24h_sync(awd::ServerConnectionInfo *this)
{
  __int128 *v1;
  uint64_t v2;
  NSObject *v3;
  void **v4;
  void **v5;
  void *v6;
  NSObject *v7;
  void *v8;
  __int128 *v9;
  __int128 *v10;
  BOOL v11;
  void **v12;
  char *v13;
  _QWORD block[4];
  void *aBlock;
  dispatch_object_t object;
  void *__p;
  char v19;
  uint64_t v20;
  void **v21;
  void **v22;
  uint64_t v23;
  void *__dst[2];
  char v25;
  uint64_t v26;
  uint64_t v27;
  void **v28;
  __int128 buf;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  v1 = (__int128 *)*((_QWORD *)this + 17);
  v13 = (char *)this + 144;
  if (v1 != (__int128 *)((char *)this + 144))
  {
    v2 = MEMORY[0x1E0C809B0];
    do
    {
      sub_1CC594A70(__dst, v1 + 2);
      v21 = 0;
      v22 = 0;
      v23 = 0;
      sub_1CC594CDC(&v21, v26, v27, (v27 - v26) >> 4);
      v3 = *((_QWORD *)this + 4);
      if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
      {
        v12 = __dst;
        if (v25 < 0)
          v12 = (void **)__dst[0];
        LODWORD(buf) = 136315138;
        *(_QWORD *)((char *)&buf + 4) = v12;
        _os_log_debug_impl(&dword_1CC590000, v3, OS_LOG_TYPE_DEBUG, "server.conn:#D Calling callback on 24h-timer: %s", (uint8_t *)&buf, 0xCu);
      }
      v5 = v21;
      v4 = v22;
      while (v5 != v4)
      {
        if (*v5)
          v6 = _Block_copy(*v5);
        else
          v6 = 0;
        *(_QWORD *)&buf = v6;
        v7 = v5[1];
        *((_QWORD *)&buf + 1) = v7;
        if (v7)
          dispatch_retain(v7);
        block[0] = v2;
        block[1] = 1174405120;
        block[2] = sub_1CC593C1C;
        block[3] = &unk_1E886BEC0;
        if (v6)
          v8 = _Block_copy(v6);
        else
          v8 = 0;
        aBlock = v8;
        object = v7;
        if (v7)
          dispatch_retain(v7);
        sub_1CC594A70(&__p, (__int128 *)__dst);
        dispatch_async(v7, block);
        v28 = (void **)&v20;
        sub_1CC594F6C(&v28);
        if (v19 < 0)
          operator delete(__p);
        if (object)
          dispatch_release(object);
        if (aBlock)
          _Block_release(aBlock);
        if (v7)
          dispatch_release(v7);
        if (v6)
          _Block_release(v6);
        v5 += 2;
      }
      *(_QWORD *)&buf = &v21;
      sub_1CC594F6C((void ***)&buf);
      v21 = (void **)&v26;
      sub_1CC594F6C(&v21);
      if (v25 < 0)
        operator delete(__dst[0]);
      v9 = (__int128 *)*((_QWORD *)v1 + 1);
      if (v9)
      {
        do
        {
          v10 = v9;
          v9 = *(__int128 **)v9;
        }
        while (v9);
      }
      else
      {
        do
        {
          v10 = (__int128 *)*((_QWORD *)v1 + 2);
          v11 = *(_QWORD *)v10 == (_QWORD)v1;
          v1 = v10;
        }
        while (!v11);
      }
      v1 = v10;
    }
    while (v10 != (__int128 *)v13);
  }
}

void sub_1CC593BC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32)
{
  sub_1CC593DC4((uint64_t)&a32);
  _Unwind_Resume(a1);
}

void sub_1CC593C1C(uint64_t a1)
{
  sub_1CC593C2C((uint64_t *)(a1 + 32), a1 + 48);
}

void sub_1CC593C2C(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  void *__p[2];
  uint64_t v4;

  v2 = *a1;
  if (*(char *)(a2 + 23) < 0)
  {
    sub_1CC594AF4(__p, *(void **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)a2;
    v4 = *(_QWORD *)(a2 + 16);
  }
  (*(void (**)(uint64_t, void **))(v2 + 16))(v2, __p);
  if (SHIBYTE(v4) < 0)
    operator delete(__p[0]);
}

void sub_1CC593C9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_1CC593CB8(_QWORD *a1, uint64_t a2)
{
  void *v4;
  NSObject *v5;

  v4 = *(void **)(a2 + 32);
  if (v4)
    v4 = _Block_copy(v4);
  v5 = *(NSObject **)(a2 + 40);
  a1[4] = v4;
  a1[5] = v5;
  if (v5)
    dispatch_retain(v5);
  return sub_1CC594A70(a1 + 6, (__int128 *)(a2 + 48));
}

void sub_1CC593D14(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1CC593D28(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1CC593D28(uint64_t a1)
{
  NSObject *v2;

  v2 = *(NSObject **)(a1 + 8);
  if (v2)
    dispatch_release(v2);
  if (*(_QWORD *)a1)
    _Block_release(*(const void **)a1);
  return a1;
}

void sub_1CC593D64(uint64_t a1)
{
  NSObject *v2;
  const void *v3;
  void **v4;

  v4 = (void **)(a1 + 72);
  sub_1CC594F6C(&v4);
  if (*(char *)(a1 + 71) < 0)
    operator delete(*(void **)(a1 + 48));
  v2 = *(NSObject **)(a1 + 40);
  if (v2)
    dispatch_release(v2);
  v3 = *(const void **)(a1 + 32);
  if (v3)
    _Block_release(v3);
}

uint64_t sub_1CC593DC4(uint64_t a1)
{
  void **v3;

  v3 = (void **)(a1 + 24);
  sub_1CC594F6C(&v3);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

awd::AWDServerConnection *awd::AWDServerConnection::AWDServerConnection(awd::AWDServerConnection *this)
{
  return awd::AWDServerConnection::AWDServerConnection(this);
}

{
  uint8_t v3[16];

  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v3 = 0;
    _os_log_impl(&dword_1CC590000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "WirelessDiagnostics is deprecated and has been removed. Please migrate to Core Analytics.", v3, 2u);
  }
  return this;
}

{
  return awd::AWDServerConnection::AWDServerConnection(this);
}

{
  return awd::AWDServerConnection::AWDServerConnection(this);
}

uint64_t awd::AWDServerConnection::getComponentId(awd::AWDServerConnection *this)
{
  uint8_t v2[16];

  if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v2 = 0;
    _os_log_impl(&dword_1CC590000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "WirelessDiagnostics is deprecated and has been removed. Please migrate to Core Analytics.", v2, 2u);
  }
  return 0;
}

uint64_t awd::AWDServerConnection::getDeviceConfigurationId(awd::AWDServerConnection *this)
{
  uint8_t v2[16];

  if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v2 = 0;
    _os_log_impl(&dword_1CC590000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "WirelessDiagnostics is deprecated and has been removed. Please migrate to Core Analytics.", v2, 2u);
  }
  return 0;
}

uint64_t awd::MetricFactory::getSharedMetricFactory(awd::MetricFactory *this)
{
  uint64_t result;
  uint8_t v2[16];

  if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v2 = 0;
    _os_log_impl(&dword_1CC590000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "WirelessDiagnostics is deprecated and has been removed. Please migrate to Core Analytics.", v2, 2u);
  }
  result = awd::MetricFactory::fSharedMetricFactory;
  if (!awd::MetricFactory::fSharedMetricFactory)
  {
    pthread_mutex_lock(&stru_1ECD3F0D0);
    if (!awd::MetricFactory::fSharedMetricFactory)
      awd::MetricFactory::fSharedMetricFactory = operator new();
    pthread_mutex_unlock(&stru_1ECD3F0D0);
    return awd::MetricFactory::fSharedMetricFactory;
  }
  return result;
}

awd::MetricContainer *awd::MetricFactory::newMetricContainerWithIdentifier(awd::MetricFactory *this, unsigned int a2)
{
  awd::MetricContainer *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v8;
  std::__shared_weak_count *v9;

  if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v8) = 0;
    _os_log_impl(&dword_1CC590000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "WirelessDiagnostics is deprecated and has been removed. Please migrate to Core Analytics.", (uint8_t *)&v8, 2u);
  }
  sub_1CC5AE3CC(&v8);
  if (v8 && sub_1CC5AFEF0())
  {
    v3 = (awd::MetricContainer *)operator new();
    awd::MetricContainer::MetricContainer(v3, a2);
  }
  else
  {
    v3 = 0;
  }
  v4 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  return v3;
}

void sub_1CC594124(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  awd::AWDServerConnection::~AWDServerConnection((awd::AWDServerConnection *)&a9);
  _Unwind_Resume(a1);
}

uint64_t awd::AWDServerConnection::SubmitMetric()
{
  uint8_t v1[16];

  if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v1 = 0;
    _os_log_impl(&dword_1CC590000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "WirelessDiagnostics is deprecated and has been removed. Please migrate to Core Analytics.", v1, 2u);
  }
  return 0;
}

{
  uint8_t v1[16];

  if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v1 = 0;
    _os_log_impl(&dword_1CC590000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "WirelessDiagnostics is deprecated and has been removed. Please migrate to Core Analytics.", v1, 2u);
  }
  return 0;
}

void awd::AWDServerConnection::MaybeSubmitMetric()
{
  uint8_t v0[16];

  if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v0 = 0;
    _os_log_impl(&dword_1CC590000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "WirelessDiagnostics is deprecated and has been removed. Please migrate to Core Analytics.", v0, 2u);
  }
}

uint64_t awd::AWDServerConnection::SubmitMetrics()
{
  uint8_t v1[16];

  if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v1 = 0;
    _os_log_impl(&dword_1CC590000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "WirelessDiagnostics is deprecated and has been removed. Please migrate to Core Analytics.", v1, 2u);
  }
  return 0;
}

uint64_t awd::AWDServerConnection::RegisterQueriableMetricCallbackForIdentifier()
{
  uint8_t v1[16];

  if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v1 = 0;
    _os_log_impl(&dword_1CC590000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "WirelessDiagnostics is deprecated and has been removed. Please migrate to Core Analytics.", v1, 2u);
  }
  return 0;
}

{
  uint8_t v1[16];

  if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v1 = 0;
    _os_log_impl(&dword_1CC590000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "WirelessDiagnostics is deprecated and has been removed. Please migrate to Core Analytics.", v1, 2u);
  }
  return 0;
}

uint64_t awd::AWDServerConnection::RegisterCallbackForTimer()
{
  uint8_t v1[16];

  if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v1 = 0;
    _os_log_impl(&dword_1CC590000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "WirelessDiagnostics is deprecated and has been removed. Please migrate to Core Analytics.", v1, 2u);
  }
  return 0;
}

uint64_t awd::AWDServerConnection::RegisterQueriableMetricCallbackForLogging()
{
  uint8_t v1[16];

  if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v1 = 0;
    _os_log_impl(&dword_1CC590000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "WirelessDiagnostics is deprecated and has been removed. Please migrate to Core Analytics.", v1, 2u);
  }
  return 0;
}

uint64_t awd::AWDServerConnection::forceMetricSubmission(awd::AWDServerConnection *this, unsigned int a2, unsigned int a3, unsigned int a4, unsigned int a5, const void *a6)
{
  uint8_t v7[16];

  if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v7 = 0;
    _os_log_impl(&dword_1CC590000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "WirelessDiagnostics is deprecated and has been removed. Please migrate to Core Analytics.", v7, 2u);
  }
  return 0;
}

uint64_t awd::AWDServerConnection::forceFinishMetricSubmission(awd::AWDServerConnection *this)
{
  uint8_t v2[16];

  if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v2 = 0;
    _os_log_impl(&dword_1CC590000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "WirelessDiagnostics is deprecated and has been removed. Please migrate to Core Analytics.", v2, 2u);
  }
  return 0;
}

uint64_t awd::AWDServerConnection::forceTriggerSend(awd::AWDServerConnection *this)
{
  uint8_t v2[16];

  if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v2 = 0;
    _os_log_impl(&dword_1CC590000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "WirelessDiagnostics is deprecated and has been removed. Please migrate to Core Analytics.", v2, 2u);
  }
  return 0;
}

uint64_t awd::AWDServerConnection::registerCallBackForTrigger()
{
  uint8_t v1[16];

  if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v1 = 0;
    _os_log_impl(&dword_1CC590000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "WirelessDiagnostics is deprecated and has been removed. Please migrate to Core Analytics.", v1, 2u);
  }
  return 0;
}

uint64_t awd::AWDServerConnection::registerCallBackForComponentConfiguration()
{
  uint8_t v1[16];

  if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v1 = 0;
    _os_log_impl(&dword_1CC590000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "WirelessDiagnostics is deprecated and has been removed. Please migrate to Core Analytics.", v1, 2u);
  }
  return 0;
}

uint64_t awd::AWDServerConnection::registerCallBackForClearProfiles()
{
  uint8_t v1[16];

  if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v1 = 0;
    _os_log_impl(&dword_1CC590000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "WirelessDiagnostics is deprecated and has been removed. Please migrate to Core Analytics.", v1, 2u);
  }
  return 0;
}

uint64_t awd::AWDServerConnection::registerCallBackForConfigChange()
{
  uint8_t v1[16];

  if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v1 = 0;
    _os_log_impl(&dword_1CC590000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "WirelessDiagnostics is deprecated and has been removed. Please migrate to Core Analytics.", v1, 2u);
  }
  return 0;
}

uint64_t awd::AWDServerConnection::registerComponentParametersChangeCallback()
{
  uint8_t v1[16];

  if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v1 = 0;
    _os_log_impl(&dword_1CC590000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "WirelessDiagnostics is deprecated and has been removed. Please migrate to Core Analytics.", v1, 2u);
  }
  return 0;
}

uint64_t awd::AWDServerConnection::copyComponentParameters(awd::AWDServerConnection *this)
{
  uint8_t v2[16];

  if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v2 = 0;
    _os_log_impl(&dword_1CC590000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "WirelessDiagnostics is deprecated and has been removed. Please migrate to Core Analytics.", v2, 2u);
  }
  return 0;
}

uint64_t awd::AWDServerConnection::loadHotship(awd::AWDServerConnection *this)
{
  uint8_t v2[16];

  if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v2 = 0;
    _os_log_impl(&dword_1CC590000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "WirelessDiagnostics is deprecated and has been removed. Please migrate to Core Analytics.", v2, 2u);
  }
  return 0;
}

uint64_t awd::AWDServerConnection::clearConfiguration(awd::AWDServerConnection *this)
{
  uint8_t v2[16];

  if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v2 = 0;
    _os_log_impl(&dword_1CC590000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "WirelessDiagnostics is deprecated and has been removed. Please migrate to Core Analytics.", v2, 2u);
  }
  return 0;
}

uint64_t awd::AWDServerConnection::logConfigurations(awd::AWDServerConnection *this)
{
  uint8_t v2[16];

  if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v2 = 0;
    _os_log_impl(&dword_1CC590000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "WirelessDiagnostics is deprecated and has been removed. Please migrate to Core Analytics.", v2, 2u);
  }
  return 0;
}

uint64_t awd::AWDServerConnection::forceUpload(awd::AWDServerConnection *this)
{
  uint8_t v2[16];

  if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v2 = 0;
    _os_log_impl(&dword_1CC590000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "WirelessDiagnostics is deprecated and has been removed. Please migrate to Core Analytics.", v2, 2u);
  }
  return 0;
}

uint64_t awd::AWDServerConnection::isMetricNecessary(awd::AWDServerConnection *this)
{
  uint8_t v2[16];

  if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v2 = 0;
    _os_log_impl(&dword_1CC590000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "WirelessDiagnostics is deprecated and has been removed. Please migrate to Core Analytics.", v2, 2u);
  }
  return 0;
}

uint64_t awd::AWDServerConnection::registerCallBackForPIIOrLocationChange()
{
  uint8_t v1[16];

  if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v1 = 0;
    _os_log_impl(&dword_1CC590000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "WirelessDiagnostics is deprecated and has been removed. Please migrate to Core Analytics.", v1, 2u);
  }
  return 0;
}

void awd::AWDServerConnection::locationUsed(awd::AWDServerConnection *this)
{
  uint8_t v1[16];

  if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v1 = 0;
    _os_log_impl(&dword_1CC590000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "WirelessDiagnostics is deprecated and has been removed. Please migrate to Core Analytics.", v1, 2u);
  }
}

void awd::AWDServerConnection::flush()
{
  uint8_t v0[16];

  if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v0 = 0;
    _os_log_impl(&dword_1CC590000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "WirelessDiagnostics is deprecated and has been removed. Please migrate to Core Analytics.", v0, 2u);
  }
}

_QWORD *sub_1CC594A2C(_QWORD *a1)
{
  NSObject *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;

  v2 = a1[3];
  if (v2)
    dispatch_release(v2);
  v3 = a1[2];
  if (v3)
    dispatch_release(v3);
  v4 = (std::__shared_weak_count *)a1[1];
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  return a1;
}

_QWORD *sub_1CC594A70(_QWORD *__dst, __int128 *a2)
{
  __int128 v4;

  if (*((char *)a2 + 23) < 0)
  {
    sub_1CC594AF4(__dst, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    __dst[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)__dst = v4;
  }
  __dst[3] = 0;
  __dst[4] = 0;
  __dst[5] = 0;
  sub_1CC594CDC(__dst + 3, *((_QWORD *)a2 + 3), *((_QWORD *)a2 + 4), (uint64_t)(*((_QWORD *)a2 + 4) - *((_QWORD *)a2 + 3)) >> 4);
  return __dst;
}

void sub_1CC594AD8(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void *sub_1CC594AF4(_BYTE *__dst, void *__src, unint64_t a3)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v5 = __dst;
  if (a3 > 0x16)
  {
    if (a3 >= 0x7FFFFFFFFFFFFFF8)
      sub_1CC5931AC();
    v6 = (a3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a3 | 7) != 0x17)
      v6 = a3 | 7;
    v7 = v6 + 1;
    v8 = operator new(v6 + 1);
    v5[1] = a3;
    v5[2] = v7 | 0x8000000000000000;
    *v5 = v8;
    v5 = v8;
  }
  else
  {
    __dst[23] = a3;
  }
  return memmove(v5, __src, a3 + 1);
}

void sub_1CC594B80()
{
  std::bad_array_new_length *exception;
  std::bad_array_new_length *v1;

  exception = (std::bad_array_new_length *)__cxa_allocate_exception(8uLL);
  v1 = std::bad_array_new_length::bad_array_new_length(exception);
  __cxa_throw(v1, MEMORY[0x1E0DE4E98], MEMORY[0x1E0DE4390]);
}

void awd::AWDServerConnection::~AWDServerConnection(awd::AWDServerConnection *this)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = (std::__shared_weak_count *)*((_QWORD *)this + 1);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void *sub_1CC594C00(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62)
    sub_1CC594B80();
  return operator new(4 * a2);
}

uint64_t *sub_1CC594C34(uint64_t *a1)
{
  uint64_t v2;
  const void *v3;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = *(const void **)(v2 + 8);
    if (v3)
      _Block_release(v3);
    MEMORY[0x1D17AD544](v2, 0x1080C407411B482);
  }
  return a1;
}

uint64_t *sub_1CC594C88(unsigned int *a1)
{
  unsigned int *v2;

  v2 = a1;
  (*(void (**)(_QWORD, _QWORD))(*((_QWORD *)a1 + 1) + 16))(*((_QWORD *)a1 + 1), *a1);
  return sub_1CC594C34((uint64_t *)&v2);
}

void sub_1CC594CC8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1CC594C34((uint64_t *)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_1CC594CDC(_QWORD *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;

  if (a4)
  {
    v6 = result;
    sub_1CC594D60(result, a4);
    result = sub_1CC594DD4((uint64_t)(v6 + 2), a2, a3, (_QWORD *)v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_1CC594D40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  sub_1CC594F6C(&a9);
  _Unwind_Resume(a1);
}

char *sub_1CC594D60(_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >> 60)
    sub_1CC592ABC();
  result = (char *)sub_1CC594DA0((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[16 * v4];
  return result;
}

void *sub_1CC594DA0(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60)
    sub_1CC594B80();
  return operator new(16 * a2);
}

_QWORD *sub_1CC594DD4(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  _QWORD *v4;
  uint64_t v6;
  _QWORD v9[3];
  char v10;
  _QWORD *v11;
  _QWORD *v12;

  v4 = a4;
  v11 = a4;
  v12 = a4;
  v9[0] = a1;
  v9[1] = &v11;
  v9[2] = &v12;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      sub_1CC594E64(a1, v4, v6);
      v6 += 16;
      v4 = v12 + 2;
      v12 += 2;
    }
    while (v6 != a3);
  }
  v10 = 1;
  sub_1CC594EB0((uint64_t)v9);
  return v4;
}

void sub_1CC594E64(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  void *v5;
  NSObject *v6;

  v5 = *(void **)a3;
  if (*(_QWORD *)a3)
    v5 = _Block_copy(v5);
  v6 = *(NSObject **)(a3 + 8);
  *a2 = v5;
  a2[1] = v6;
  if (v6)
    dispatch_retain(v6);
}

uint64_t sub_1CC594EB0(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_1CC594EE4((uint64_t *)a1);
  return a1;
}

void sub_1CC594EE4(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = (uint64_t *)a1[1];
  v1 = (uint64_t *)a1[2];
  v3 = *v1;
  v4 = *v2;
  if (*v1 != *v2)
  {
    v5 = *a1;
    do
    {
      v3 -= 16;
      sub_1CC594F34(v5, v3);
    }
    while (v3 != v4);
  }
}

void sub_1CC594F34(uint64_t a1, uint64_t a2)
{
  NSObject *v3;

  v3 = *(NSObject **)(a2 + 8);
  if (v3)
    dispatch_release(v3);
  if (*(_QWORD *)a2)
    _Block_release(*(const void **)a2);
}

void sub_1CC594F6C(void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 16;
        sub_1CC594F34((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t awd::AWDRegistrationMessage::AWDRegistrationMessage(uint64_t this, int a2, int a3, int a4, char a5)
{
  *(_DWORD *)(this + 8) = a2;
  *(_DWORD *)(this + 12) = a3;
  *(_QWORD *)this = &off_1E886AE40;
  *(_DWORD *)(this + 16) = a4;
  *(_BYTE *)(this + 20) = a5;
  return this;
}

{
  *(_DWORD *)(this + 8) = a2;
  *(_DWORD *)(this + 12) = a3;
  *(_QWORD *)this = &off_1E886AE40;
  *(_DWORD *)(this + 16) = a4;
  *(_BYTE *)(this + 20) = a5;
  return this;
}

uint64_t awd::AWDRegistrationMessage::AWDRegistrationMessage(uint64_t a1, _QWORD *a2)
{
  int v4;
  _QWORD *v6;
  const char *v7;
  xpc_object_t object;

  *(_QWORD *)a1 = &off_1E886AE40;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 16) = 0;
  if (MEMORY[0x1D17ADA60](*a2) == MEMORY[0x1E0C812F8])
  {
    v6 = a2;
    v7 = "AWDMessageType";
    sub_1CC595210((uint64_t)&v6, &object);
    v4 = xpc::dyn_cast_or_default();
    xpc_release(object);
    if (v4 == 1)
    {
      v6 = a2;
      v7 = "AWDMessageDeviceConfigurationId";
      sub_1CC595210((uint64_t)&v6, &object);
      *(_DWORD *)(a1 + 8) = xpc::dyn_cast_or_default();
      xpc_release(object);
      v6 = a2;
      v7 = "AWDMessageComponentId";
      sub_1CC595210((uint64_t)&v6, &object);
      *(_DWORD *)(a1 + 12) = xpc::dyn_cast_or_default();
      xpc_release(object);
      v6 = a2;
      v7 = "AWDMessagePid";
      sub_1CC595210((uint64_t)&v6, &object);
      *(_DWORD *)(a1 + 16) = xpc::dyn_cast_or_default();
      xpc_release(object);
      v6 = a2;
      v7 = "AWDMessageNeedsConfiguration";
      sub_1CC595210((uint64_t)&v6, &object);
      *(_BYTE *)(a1 + 20) = xpc::dyn_cast_or_default();
      xpc_release(object);
    }
  }
  return a1;
}

void sub_1CC595180(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, xpc_object_t object)
{
  xpc_release(object);
  _Unwind_Resume(a1);
}

xpc_object_t sub_1CC595210@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  xpc_object_t value;
  xpc_object_t result;

  value = xpc_dictionary_get_value(**(xpc_object_t **)a1, *(const char **)(a1 + 8));
  *a2 = value;
  if (value)
    return xpc_retain(value);
  result = xpc_null_create();
  *a2 = result;
  return result;
}

void awd::AWDRegistrationMessage::createXpcMessage(awd::AWDRegistrationMessage *this@<X0>, _QWORD *a2@<X8>)
{
  xpc_object_t v4;
  xpc_object_t v5;
  xpc_object_t v6;
  xpc_object_t v7;
  xpc_object_t v8;
  xpc_object_t v9;
  xpc_object_t v10;
  xpc_object_t v11;
  xpc_object_t v12;
  xpc_object_t v13;
  xpc_object_t object;
  _QWORD *v15;
  const char *v16;
  xpc_object_t v17;
  xpc_object_t v18;

  v4 = xpc_dictionary_create(0, 0, 0);
  v5 = v4;
  if (v4)
  {
    *a2 = v4;
  }
  else
  {
    v5 = xpc_null_create();
    *a2 = v5;
    if (!v5)
    {
      v6 = xpc_null_create();
      v5 = 0;
      goto LABEL_8;
    }
  }
  if (MEMORY[0x1D17ADA60](v5) == MEMORY[0x1E0C812F8])
  {
    xpc_retain(v5);
    goto LABEL_9;
  }
  v6 = xpc_null_create();
LABEL_8:
  *a2 = v6;
LABEL_9:
  xpc_release(v5);
  v17 = xpc_int64_create(1);
  if (!v17)
    v17 = xpc_null_create();
  v15 = a2;
  v16 = "AWDMessageType";
  sub_1CC5954D0((uint64_t)&v15, &v17, &v18);
  xpc_release(v18);
  v18 = 0;
  xpc_release(v17);
  v17 = 0;
  v13 = xpc_int64_create(*((unsigned int *)this + 2));
  if (!v13)
    v13 = xpc_null_create();
  v15 = a2;
  v16 = "AWDMessageDeviceConfigurationId";
  sub_1CC5954D0((uint64_t)&v15, &v13, &object);
  xpc_release(object);
  object = 0;
  xpc_release(v13);
  v13 = 0;
  v11 = xpc_int64_create(*((unsigned int *)this + 3));
  if (!v11)
    v11 = xpc_null_create();
  v15 = a2;
  v16 = "AWDMessageComponentId";
  sub_1CC5954D0((uint64_t)&v15, &v11, &v12);
  xpc_release(v12);
  v12 = 0;
  xpc_release(v11);
  v11 = 0;
  v9 = xpc_int64_create(*((int *)this + 4));
  if (!v9)
    v9 = xpc_null_create();
  v15 = a2;
  v16 = "AWDMessagePid";
  sub_1CC5954D0((uint64_t)&v15, &v9, &v10);
  xpc_release(v10);
  v10 = 0;
  xpc_release(v9);
  v9 = 0;
  v7 = xpc_BOOL_create(*((_BYTE *)this + 20));
  if (!v7)
    v7 = xpc_null_create();
  v15 = a2;
  v16 = "AWDMessageNeedsConfiguration";
  sub_1CC5954D0((uint64_t)&v15, &v7, &v8);
  xpc_release(v8);
  v8 = 0;
  xpc_release(v7);
}

xpc_object_t sub_1CC5954D0@<X0>(uint64_t a1@<X0>, xpc_object_t *a2@<X1>, xpc_object_t *a3@<X8>)
{
  xpc_object_t result;

  xpc_dictionary_set_value(**(xpc_object_t **)a1, *(const char **)(a1 + 8), *a2);
  *a3 = *a2;
  result = xpc_null_create();
  *a2 = result;
  return result;
}

uint64_t awd::AWDRegistrationMessage::getDeviceConfigurationId(awd::AWDRegistrationMessage *this)
{
  return *((unsigned int *)this + 2);
}

uint64_t awd::AWDRegistrationMessage::getComponentId(awd::AWDRegistrationMessage *this)
{
  return *((unsigned int *)this + 3);
}

uint64_t awd::AWDRegistrationMessage::getPid(awd::AWDRegistrationMessage *this)
{
  return *((unsigned int *)this + 4);
}

uint64_t awd::AWDRegistrationMessage::getNeedsConfiguration(awd::AWDRegistrationMessage *this)
{
  return *((unsigned __int8 *)this + 20);
}

void sub_1CC59553C()
{
  JUMPOUT(0x1D17AD544);
}

void AWDServerConsolidateDeviceDiagnostics(uint64_t a1, uint64_t a2, void *a3)
{
  id v5;
  xpc_object_t v6;
  xpc_object_t v7;
  xpc_object_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  id v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  _QWORD v19[4];
  id v20;
  xpc_object_t *v21;
  std::__shared_weak_count *v22;
  uint64_t v23;
  xpc_object_t v24;
  xpc_object_t v25;
  xpc_object_t object;
  xpc_object_t v27;
  xpc_object_t v28;
  xpc_object_t *v29;
  const char *v30;
  xpc_object_t v31;
  xpc_object_t v32;
  xpc_object_t v33;

  v5 = a3;
  v6 = xpc_dictionary_create(0, 0, 0);
  v7 = v6;
  if (v6)
  {
    v33 = v6;
  }
  else
  {
    v7 = xpc_null_create();
    v33 = v7;
    if (!v7)
    {
      v8 = xpc_null_create();
      v7 = 0;
      goto LABEL_8;
    }
  }
  if (MEMORY[0x1D17ADA60](v7) == MEMORY[0x1E0C812F8])
  {
    xpc_retain(v7);
    goto LABEL_9;
  }
  v8 = xpc_null_create();
LABEL_8:
  v33 = v8;
LABEL_9:
  xpc_release(v7);
  switch(a1)
  {
    case 2:
      v25 = xpc_string_create("feedback");
      if (!v25)
        v25 = xpc_null_create();
      v29 = &v33;
      v30 = "diagType";
      sub_1CC5954D0((uint64_t)&v29, &v25, &object);
      xpc_release(object);
      object = 0;
      xpc_release(v25);
      v25 = 0;
      break;
    case 1:
      v27 = xpc_string_create("cellular");
      if (!v27)
        v27 = xpc_null_create();
      v29 = &v33;
      v30 = "diagType";
      sub_1CC5954D0((uint64_t)&v29, &v27, &v28);
      xpc_release(v28);
      v28 = 0;
      xpc_release(v27);
      v27 = 0;
      break;
    case 0:
      v31 = xpc_string_create("wifi");
      if (!v31)
        v31 = xpc_null_create();
      v29 = &v33;
      v30 = "diagType";
      sub_1CC5954D0((uint64_t)&v29, &v31, &v32);
      xpc_release(v32);
      v32 = 0;
      xpc_release(v31);
      v31 = 0;
      break;
  }
  AWDServerConnector::create(&v29);
  v9 = (uint64_t)v29;
  v24 = v33;
  if (v33)
    xpc_retain(v33);
  else
    v24 = xpc_null_create();
  v19[0] = MEMORY[0x1E0C809B0];
  v19[1] = 3321888768;
  v19[2] = sub_1CC5958E4;
  v19[3] = &unk_1E886BBD8;
  v21 = v29;
  v22 = (std::__shared_weak_count *)v30;
  if (v30)
  {
    v10 = (unint64_t *)(v30 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  v12 = v5;
  v20 = v12;
  v23 = a2;
  AWDServerConnector::send(v9, &v24, (uint64_t)"ConsolidateDeviceDiagnostics", (uint64_t)v19);
  xpc_release(v24);
  v24 = 0;

  v13 = v22;
  if (v22)
  {
    p_shared_owners = (unint64_t *)&v22->__shared_owners_;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  v16 = (std::__shared_weak_count *)v30;
  if (v30)
  {
    v17 = (unint64_t *)(v30 + 8);
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  xpc_release(v33);

}

void sub_1CC595888(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, xpc_object_t object)
{
  void *v17;
  awd::AWDServerConnection *v18;
  uint64_t v19;

  awd::AWDServerConnection::~AWDServerConnection(v18);
  xpc_release(object);
  awd::AWDServerConnection::~AWDServerConnection((awd::AWDServerConnection *)(v19 - 88));
  xpc_release(*(xpc_object_t *)(v19 - 56));

  _Unwind_Resume(a1);
}

void sub_1CC5958E4(uint64_t a1, _QWORD *a2)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  void *v8;
  void *v9;
  void *v10;
  id v11;
  void *v12;
  void *v13;
  size_t count;
  void *v15;
  char *i;
  void *v17;
  void *p_p;
  void *v19;
  NSObject *v20;
  id v21;
  id v22;
  _QWORD block[4];
  id v24;
  id v25;
  id v26;
  xpc_object_t object;
  void *__p;
  char v29;
  _QWORD v30[2];
  void *v31[2];
  void *v32;
  char *v33;
  xpc_object_t v34;
  xpc_object_t v35;
  xpc_object_t *v36;
  const char *v37;
  uint64_t v38;

  v4 = (void *)MEMORY[0x1D17AD778]();
  v35 = (xpc_object_t)*a2;
  if (v35 && MEMORY[0x1D17ADA60](v35) == MEMORY[0x1E0C812F8])
    xpc_retain(v35);
  else
    v35 = xpc_null_create();
  if (MEMORY[0x1D17ADA60](*a2) != MEMORY[0x1E0C81350])
  {
    v36 = &v35;
    v37 = "files";
    sub_1CC595D7C((uint64_t)&v36, &v34);
    v5 = MEMORY[0x1D17ADA60](v34);
    v6 = MEMORY[0x1E0C812C8];
    if (v5 == MEMORY[0x1E0C812C8])
    {
      v13 = (void *)MEMORY[0x1E0C99DE8];
      if (MEMORY[0x1D17ADA60](v34) == v6)
        count = xpc_array_get_count(v34);
      else
        count = 0;
      objc_msgSend(v13, "arrayWithCapacity:", count);
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      v36 = (xpc_object_t *)v34;
      if (v34)
        xpc_retain(v34);
      else
        v36 = (xpc_object_t *)xpc_null_create();
      sub_1CC596420(&v32, (void **)&v36, 0);
      xpc_release(v36);
      v36 = (xpc_object_t *)v34;
      if (v34)
        xpc_retain(v34);
      else
        v36 = (xpc_object_t *)xpc_null_create();
      if (MEMORY[0x1D17ADA60](v34) == v6)
        v15 = (void *)xpc_array_get_count(v34);
      else
        v15 = 0;
      sub_1CC596420(v31, (void **)&v36, v15);
      xpc_release(v36);
      for (i = v33; i != v31[1] || v32 != v31[0]; i = ++v33)
      {
        v30[0] = &v32;
        v30[1] = i;
        v17 = (void *)MEMORY[0x1E0CB3940];
        sub_1CC595E14((uint64_t)v30, &object);
        v36 = 0;
        v37 = 0;
        v38 = 0;
        xpc::dyn_cast_or_default();
        if (SHIBYTE(v38) < 0)
          operator delete(v36);
        if (v29 >= 0)
          p_p = &__p;
        else
          p_p = __p;
        objc_msgSend(v17, "stringWithUTF8String:", p_p);
        v19 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v9, "addObject:", v19);

        if (v29 < 0)
          operator delete(__p);
        xpc_release(object);
      }
      xpc_release(v32);
      xpc_release(v32);
      if (v9)
      {
        objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjectsAndKeys:", v9, CFSTR("kAwdDiagnosticsFileArray"), 0);
        v10 = (void *)objc_claimAutoreleasedReturnValue();
        v8 = 0;
        goto LABEL_35;
      }
      v8 = 0;
    }
    else
    {
      v7 = objc_alloc(MEMORY[0x1E0CB35C8]);
      v8 = (void *)objc_msgSend(v7, "initWithDomain:code:userInfo:", *MEMORY[0x1E0CB2FE0], 2, 0);
      v9 = 0;
    }
    v10 = 0;
LABEL_35:
    v20 = *(NSObject **)(a1 + 56);
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = sub_1CC595E58;
    block[3] = &unk_1E886C228;
    v26 = *(id *)(a1 + 32);
    v21 = v8;
    v24 = v21;
    v25 = v10;
    v22 = v10;
    dispatch_async(v20, block);

    xpc_release(v34);
    goto LABEL_36;
  }
  v11 = objc_alloc(MEMORY[0x1E0CB35C8]);
  v12 = (void *)objc_msgSend(v11, "initWithDomain:code:userInfo:", *MEMORY[0x1E0CB2FE0], 4, 0);
  (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();

LABEL_36:
  xpc_release(v35);
  objc_autoreleasePoolPop(v4);
}

void sub_1CC595C8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, xpc_object_t object, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,xpc_object_t a27)
{
  void *v27;
  uint64_t v28;

  xpc_release(*(xpc_object_t *)(v28 - 104));

  xpc_release(*(xpc_object_t *)(v28 - 96));
  _Unwind_Resume(a1);
}

void sub_1CC595D7C(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  xpc_object_t value;
  xpc_object_t v4;
  xpc_object_t v5;

  value = xpc_dictionary_get_value(**(xpc_object_t **)a1, *(const char **)(a1 + 8));
  if (value)
  {
    v4 = value;
    xpc_retain(value);
    *a2 = v4;
  }
  else
  {
    v4 = xpc_null_create();
    *a2 = v4;
    if (!v4)
    {
      v5 = xpc_null_create();
      v4 = 0;
      goto LABEL_8;
    }
  }
  if (MEMORY[0x1D17ADA60](v4) != MEMORY[0x1E0C812C8])
  {
    v5 = xpc_null_create();
LABEL_8:
    *a2 = v5;
    goto LABEL_9;
  }
  xpc_retain(v4);
LABEL_9:
  xpc_release(v4);
}

xpc_object_t sub_1CC595E14@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  xpc_object_t value;
  xpc_object_t result;

  value = xpc_array_get_value(**(xpc_object_t **)a1, *(_QWORD *)(a1 + 8));
  *a2 = value;
  if (value)
    return xpc_retain(value);
  result = xpc_null_create();
  *a2 = result;
  return result;
}

uint64_t sub_1CC595E58(_QWORD *a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(a1[6] + 16))(a1[6], a1[4], a1[5]);
}

uint64_t sub_1CC595E6C(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 48) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void sub_1CC595E90(uint64_t a1)
{
  awd::AWDServerConnection::~AWDServerConnection((awd::AWDServerConnection *)(a1 + 40));
}

void AWDServerSetInvestigationId(unsigned int a1, NSObject *a2, void *a3)
{
  id v5;
  xpc_object_t v6;
  xpc_object_t v7;
  xpc_object_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  id v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  _QWORD v19[4];
  id v20;
  xpc_object_t *v21;
  std::__shared_weak_count *v22;
  dispatch_object_t v23;
  xpc_object_t v24;
  xpc_object_t v25;
  xpc_object_t object;
  xpc_object_t *v27;
  const char *v28;
  xpc_object_t v29;
  xpc_object_t v30;
  xpc_object_t v31;

  v5 = a3;
  v6 = xpc_dictionary_create(0, 0, 0);
  v7 = v6;
  if (v6)
  {
    v31 = v6;
  }
  else
  {
    v7 = xpc_null_create();
    v31 = v7;
    if (!v7)
    {
      v8 = xpc_null_create();
      v7 = 0;
      goto LABEL_8;
    }
  }
  if (MEMORY[0x1D17ADA60](v7) == MEMORY[0x1E0C812F8])
  {
    xpc_retain(v7);
    goto LABEL_9;
  }
  v8 = xpc_null_create();
LABEL_8:
  v31 = v8;
LABEL_9:
  xpc_release(v7);
  v29 = xpc_string_create("set-iid-only");
  if (!v29)
    v29 = xpc_null_create();
  v27 = &v31;
  v28 = "config";
  sub_1CC5954D0((uint64_t)&v27, &v29, &v30);
  xpc_release(v30);
  v30 = 0;
  xpc_release(v29);
  v29 = 0;
  v25 = xpc_int64_create(a1);
  if (!v25)
    v25 = xpc_null_create();
  v27 = &v31;
  v28 = "InvestigationId";
  sub_1CC5954D0((uint64_t)&v27, &v25, &object);
  xpc_release(object);
  object = 0;
  xpc_release(v25);
  v25 = 0;
  AWDServerConnector::create(&v27);
  if (a2)
    dispatch_retain(a2);
  v9 = (uint64_t)v27;
  v24 = v31;
  if (v31)
    xpc_retain(v31);
  else
    v24 = xpc_null_create();
  v19[0] = MEMORY[0x1E0C809B0];
  v19[1] = 3321888768;
  v19[2] = sub_1CC5961F0;
  v19[3] = &unk_1E886BBA0;
  v21 = v27;
  v22 = (std::__shared_weak_count *)v28;
  if (v28)
  {
    v10 = (unint64_t *)(v28 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  v23 = a2;
  if (a2)
    dispatch_retain(a2);
  v12 = v5;
  v20 = v12;
  AWDServerConnector::send(v9, &v24, (uint64_t)"SetConfig", (uint64_t)v19);
  xpc_release(v24);
  v24 = 0;

  if (v23)
    dispatch_release(v23);
  v13 = v22;
  if (v22)
  {
    p_shared_owners = (unint64_t *)&v22->__shared_owners_;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  if (a2)
    dispatch_release(a2);
  v16 = (std::__shared_weak_count *)v28;
  if (v28)
  {
    v17 = (unint64_t *)(v28 + 8);
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  xpc_release(v31);

}

void sub_1CC596164(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, dispatch_object_t object, xpc_object_t a17, uint64_t a18, uint64_t a19, char a20)
{
  NSObject *v20;
  void *v21;
  awd::AWDServerConnection *v22;
  uint64_t v23;

  if (object)
    dispatch_release(object);
  awd::AWDServerConnection::~AWDServerConnection(v22);
  xpc_release(a17);
  if (v20)
    dispatch_release(v20);
  awd::AWDServerConnection::~AWDServerConnection((awd::AWDServerConnection *)&a20);
  xpc_release(*(xpc_object_t *)(v23 - 56));

  _Unwind_Resume(a1);
}

void sub_1CC5961F0(uint64_t a1, xpc_object_t *a2)
{
  xpc_object_t v3;
  uint64_t v4;
  int v5;
  int v6;
  NSObject *v7;
  _QWORD v8[4];
  id v9;
  int v10;
  int v11;
  xpc_object_t *v12;
  const char *v13;
  xpc_object_t v14;
  xpc_object_t v15;

  if (*(_QWORD *)(a1 + 56) && *(_QWORD *)(a1 + 32))
  {
    v15 = *a2;
    v3 = v15;
    v4 = MEMORY[0x1E0C812F8];
    if (v15 && MEMORY[0x1D17ADA60](v15) == v4)
    {
      xpc_retain(v15);
    }
    else
    {
      v3 = xpc_null_create();
      v15 = v3;
    }
    if (MEMORY[0x1D17ADA60](v3) == v4)
    {
      v12 = &v15;
      v13 = "dcid";
      sub_1CC595210((uint64_t)&v12, &v14);
      v5 = xpc::dyn_cast_or_default();
      xpc_release(v14);
      v12 = &v15;
      v13 = "InvestigationId";
      sub_1CC595210((uint64_t)&v12, &v14);
      v6 = xpc::dyn_cast_or_default();
      xpc_release(v14);
    }
    else
    {
      v5 = 0;
      v6 = 0;
    }
    v7 = *(NSObject **)(a1 + 56);
    v8[0] = MEMORY[0x1E0C809B0];
    v8[1] = 3221225472;
    v8[2] = sub_1CC5963A8;
    v8[3] = &unk_1E886C250;
    v9 = *(id *)(a1 + 32);
    v10 = v5;
    v11 = v6;
    dispatch_async(v7, v8);

    xpc_release(v15);
  }
}

void sub_1CC596354(_Unwind_Exception *a1)
{
  uint64_t v1;

  xpc_release(*(xpc_object_t *)(v1 - 48));
  xpc_release(*(xpc_object_t *)(v1 - 40));
  _Unwind_Resume(a1);
}

uint64_t sub_1CC5963A8(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), *(unsigned int *)(a1 + 40), *(unsigned int *)(a1 + 44));
}

void sub_1CC5963BC(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;
  NSObject *v5;

  v2 = a2[6];
  a1[5] = a2[5];
  a1[6] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  v5 = a2[7];
  a1[7] = v5;
  if (v5)
    dispatch_retain(v5);
}

void sub_1CC5963F4(uint64_t a1)
{
  NSObject *v2;

  v2 = *(NSObject **)(a1 + 56);
  if (v2)
    dispatch_release(v2);
  awd::AWDServerConnection::~AWDServerConnection((awd::AWDServerConnection *)(a1 + 40));
}

void **sub_1CC596420(void **a1, void **a2, void *a3)
{
  void *v5;

  v5 = *a2;
  *a1 = *a2;
  if (v5)
    xpc_retain(v5);
  else
    *a1 = xpc_null_create();
  a1[1] = a3;
  return a1;
}

void sub_1CC59661C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  v5 = v4;

  _Unwind_Resume(a1);
}

__n128 awd::AWDSubmissionMessage::AWDSubmissionMessage(uint64_t a1, int a2, uint64_t a3, uint64_t a4, int a5, __n128 *a6)
{
  __n128 result;

  *(_QWORD *)a1 = &off_1E886ADC8;
  *(_DWORD *)(a1 + 8) = a2;
  *(_QWORD *)(a1 + 12) = a3;
  *(_QWORD *)(a1 + 20) = a4;
  *(_DWORD *)(a1 + 28) = a5;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  result = *a6;
  *(__n128 *)(a1 + 32) = *a6;
  *(_QWORD *)(a1 + 48) = a6[1].n128_u64[0];
  a6->n128_u64[0] = 0;
  a6->n128_u64[1] = 0;
  a6[1].n128_u64[0] = 0;
  return result;
}

{
  __n128 result;

  *(_QWORD *)a1 = &off_1E886ADC8;
  *(_DWORD *)(a1 + 8) = a2;
  *(_QWORD *)(a1 + 12) = a3;
  *(_QWORD *)(a1 + 20) = a4;
  *(_DWORD *)(a1 + 28) = a5;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  result = *a6;
  *(__n128 *)(a1 + 32) = *a6;
  *(_QWORD *)(a1 + 48) = a6[1].n128_u64[0];
  a6->n128_u64[0] = 0;
  a6->n128_u64[1] = 0;
  a6[1].n128_u64[0] = 0;
  return result;
}

{
  __n128 result;

  *(_QWORD *)a1 = &off_1E886ADC8;
  *(_DWORD *)(a1 + 8) = a2;
  *(_QWORD *)(a1 + 12) = a3;
  *(_QWORD *)(a1 + 20) = a4;
  *(_DWORD *)(a1 + 28) = a5;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  result = *a6;
  *(__n128 *)(a1 + 32) = *a6;
  *(_QWORD *)(a1 + 48) = a6[1].n128_u64[0];
  a6->n128_u64[0] = 0;
  a6->n128_u64[1] = 0;
  a6[1].n128_u64[0] = 0;
  return result;
}

{
  __n128 result;

  *(_QWORD *)a1 = &off_1E886ADC8;
  *(_DWORD *)(a1 + 8) = a2;
  *(_QWORD *)(a1 + 12) = a3;
  *(_QWORD *)(a1 + 20) = a4;
  *(_DWORD *)(a1 + 28) = a5;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  result = *a6;
  *(__n128 *)(a1 + 32) = *a6;
  *(_QWORD *)(a1 + 48) = a6[1].n128_u64[0];
  a6->n128_u64[0] = 0;
  a6->n128_u64[1] = 0;
  a6[1].n128_u64[0] = 0;
  return result;
}

uint64_t awd::AWDSubmissionMessage::AWDSubmissionMessage(uint64_t a1, xpc_object_t *a2)
{
  _DWORD *v4;
  _QWORD *v5;
  char *data;
  size_t length;

  *(_QWORD *)a1 = &off_1E886ADC8;
  *(_OWORD *)(a1 + 8) = 0u;
  v4 = (_DWORD *)(a1 + 8);
  v5 = (_QWORD *)(a1 + 32);
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  if (MEMORY[0x1D17ADA60](*a2) == MEMORY[0x1E0C812F8]
    && xpc_dictionary_get_int64(*a2, "AWDMessageType") == 2)
  {
    *(_DWORD *)(a1 + 12) = xpc_dictionary_get_int64(*a2, "AWDMessageMetricId");
    *(_DWORD *)(a1 + 16) = xpc_dictionary_get_int64(*a2, "AWDMessageProfileId");
    *v4 = xpc_dictionary_get_int64(*a2, "AWDMessageSourceComponentId");
    *(_DWORD *)(a1 + 24) = xpc_dictionary_get_int64(*a2, "AWDMessageTriggerId");
    *(_DWORD *)(a1 + 20) = xpc_dictionary_get_int64(*a2, "AWDMessageTriggeringComponentId");
    *(_DWORD *)(a1 + 28) = xpc_dictionary_get_int64(*a2, "AWDMessageSubmissionId");
    length = 0;
    data = (char *)xpc_dictionary_get_data(*a2, "AWDMessageSerializedMetrics", &length);
    sub_1CC596AA4(v5, data, &data[length], length);
  }
  return a1;
}

void sub_1CC596880(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 40) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

void awd::AWDSubmissionMessage::createXpcMessage(const void **this@<X0>, _QWORD *a2@<X8>)
{
  xpc_object_t v4;
  xpc_object_t v5;

  v4 = xpc_dictionary_create(0, 0, 0);
  xpc_dictionary_set_data(v4, "AWDMessageSerializedMetrics", this[4], (_BYTE *)this[5] - (_BYTE *)this[4]);
  xpc_dictionary_set_int64(v4, "AWDMessageType", 2);
  xpc_dictionary_set_int64(v4, "AWDMessageMetricId", *((unsigned int *)this + 3));
  xpc_dictionary_set_int64(v4, "AWDMessageProfileId", *((unsigned int *)this + 4));
  xpc_dictionary_set_int64(v4, "AWDMessageTriggerId", *((unsigned int *)this + 6));
  xpc_dictionary_set_int64(v4, "AWDMessageSourceComponentId", *((unsigned int *)this + 2));
  xpc_dictionary_set_int64(v4, "AWDMessageTriggeringComponentId", *((unsigned int *)this + 5));
  xpc_dictionary_set_int64(v4, "AWDMessageSubmissionId", *((unsigned int *)this + 7));
  if (v4)
  {
    *a2 = v4;
  }
  else
  {
    v4 = xpc_null_create();
    *a2 = v4;
    if (!v4)
    {
      v5 = xpc_null_create();
      v4 = 0;
      goto LABEL_8;
    }
  }
  if (MEMORY[0x1D17ADA60](v4) != MEMORY[0x1E0C812F8])
  {
    v5 = xpc_null_create();
LABEL_8:
    *a2 = v5;
    goto LABEL_9;
  }
  xpc_retain(v4);
LABEL_9:
  xpc_release(v4);
}

uint64_t awd::AWDSubmissionMessage::getMetricInfo(awd::AWDSubmissionMessage *this)
{
  return *(_QWORD *)((char *)this + 12);
}

uint64_t awd::AWDSubmissionMessage::getSrcComponentId(awd::AWDSubmissionMessage *this)
{
  return *((unsigned int *)this + 2);
}

uint64_t awd::AWDSubmissionMessage::getTrigger(awd::AWDSubmissionMessage *this)
{
  return *(_QWORD *)((char *)this + 20);
}

uint64_t awd::AWDSubmissionMessage::getSerializedMetrics(uint64_t a1)
{
  return a1 + 32;
}

{
  return a1 + 32;
}

_QWORD *sub_1CC596A1C(_QWORD *a1)
{
  void *v2;

  *a1 = &off_1E886ADC8;
  v2 = (void *)a1[4];
  if (v2)
  {
    a1[5] = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_1CC596A58(_QWORD *a1)
{
  void *v2;

  *a1 = &off_1E886ADC8;
  v2 = (void *)a1[4];
  if (v2)
  {
    a1[5] = v2;
    operator delete(v2);
  }
  JUMPOUT(0x1D17AD544);
}

_QWORD *sub_1CC596AA4(_QWORD *result, char *__src, char *a3, unint64_t a4)
{
  char *v6;
  _QWORD *v7;
  unint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  size_t v11;
  _BYTE *v12;
  char v13;
  _BYTE *v14;
  size_t v15;
  char *v16;
  _BYTE *v17;
  char v18;
  size_t v19;

  v6 = __src;
  v7 = result;
  v8 = result[2];
  v9 = (_BYTE *)*result;
  if (v8 - *result >= a4)
  {
    v14 = (_BYTE *)result[1];
    v15 = v14 - v9;
    if (v14 - v9 >= a4)
    {
      v19 = a3 - __src;
      if (v19)
        result = memmove((void *)*result, __src, v19);
      v12 = &v9[v19];
    }
    else
    {
      v16 = &__src[v15];
      if (v14 != v9)
      {
        result = memmove((void *)*result, __src, v15);
        v9 = (_BYTE *)v7[1];
      }
      v12 = v9;
      if (v16 != a3)
      {
        v12 = v9;
        v17 = v9;
        do
        {
          v18 = *v16++;
          *v17++ = v18;
          ++v12;
        }
        while (v16 != a3);
      }
    }
  }
  else
  {
    if (v9)
    {
      result[1] = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if ((a4 & 0x8000000000000000) != 0)
      sub_1CC592ABC();
    v10 = 2 * v8;
    if (2 * v8 <= a4)
      v10 = a4;
    if (v8 >= 0x3FFFFFFFFFFFFFFFLL)
      v11 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    result = sub_1CC596BD4(v7, v11);
    v12 = (_BYTE *)v7[1];
    while (v6 != a3)
    {
      v13 = *v6++;
      *v12++ = v13;
    }
  }
  v7[1] = v12;
  return result;
}

char *sub_1CC596BD4(_QWORD *a1, size_t __sz)
{
  char *result;

  if ((__sz & 0x8000000000000000) != 0)
    sub_1CC592ABC();
  result = (char *)operator new(__sz);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[__sz];
  return result;
}

uint64_t awd::AWDMetricBuffer::AWDMetricBuffer(uint64_t a1, int a2, uint64_t a3)
{
  _QWORD *v6;

  *(_QWORD *)a1 = dispatch_queue_create("com.apple.awd.AWDMetricBuffer", 0);
  ctu::OsLogLogger::OsLogLogger((ctu::OsLogLogger *)(a1 + 8), "com.apple.awd.framework", "metric.buffer");
  *(_DWORD *)(a1 + 16) = a2;
  v6 = operator new(0x20uLL);
  v6[2] = 0;
  *((_BYTE *)v6 + 24) = 0;
  *(_QWORD *)(a1 + 24) = v6 + 3;
  *(_QWORD *)(a1 + 32) = v6;
  *(_OWORD *)(a1 + 40) = *(_OWORD *)a3;
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *v6 = &unk_1E886B8D8;
  v6[1] = 0;
  *(_QWORD *)(a1 + 56) = a1 + 64;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = a1 + 88;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  return a1;
}

void awd::AWDMetricBuffer::~AWDMetricBuffer(awd::AWDMetricBuffer *this)
{
  awd::AWDServerConnection *v2;
  NSObject *v3;
  void *v4;
  std::__shared_weak_count *v5;
  char v6;
  _QWORD block[5];

  v2 = (awd::AWDMetricBuffer *)((char *)this + 24);
  sub_1CC596DC0((_QWORD *)this + 3);
  v3 = *(NSObject **)this;
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = nullsub_3;
  block[3] = &unk_1E886BEF0;
  block[4] = &v6;
  dispatch_sync(v3, block);
  v4 = (void *)*((_QWORD *)this + 13);
  if (v4)
  {
    *((_QWORD *)this + 14) = v4;
    operator delete(v4);
  }
  sub_1CC5988B8((uint64_t)this + 80, *((_QWORD **)this + 11));
  sub_1CC59882C((uint64_t)this + 56, *((_QWORD **)this + 8));
  v5 = (std::__shared_weak_count *)*((_QWORD *)this + 6);
  if (v5)
    std::__shared_weak_count::__release_weak(v5);
  awd::AWDServerConnection::~AWDServerConnection(v2);
  MEMORY[0x1D17AD2BC]((char *)this + 8);
  if (*(_QWORD *)this)
    dispatch_release(*(dispatch_object_t *)this);
}

void sub_1CC596DC0(_QWORD *a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = (std::__shared_weak_count *)a1[1];
  *a1 = 0;
  a1[1] = 0;
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

BOOL awd::AWDMetricBuffer::shouldBufferMetric(NSObject **this, int a2)
{
  NSObject *v2;
  _QWORD v4[2];
  int v5;
  _QWORD block[6];
  uint64_t v7;

  v5 = a2;
  v2 = *this;
  v4[0] = this;
  v4[1] = &v5;
  v7 = 0;
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = sub_1CC598904;
  block[3] = &unk_1E886BF10;
  block[4] = &v7;
  block[5] = v4;
  dispatch_sync(v2, block);
  return v7 != 0;
}

void awd::AWDMetricBuffer::buffer(NSObject **a1, uint64_t a2)
{
  NSObject *v2;
  _QWORD v3[2];
  _QWORD block[5];

  v2 = *a1;
  v3[0] = a1;
  v3[1] = a2;
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = sub_1CC598950;
  block[3] = &unk_1E886BFB0;
  block[4] = v3;
  dispatch_sync(v2, block);
}

void awd::AWDMetricBuffer::setConfiguration_sync(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  int v7;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  _DWORD *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t **v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int *v18;
  int v19;
  unsigned int v20;
  int v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t **v26;
  unsigned int v27;
  unsigned int *v28;
  uint8_t buf[8];
  unsigned int v30;
  uint64_t v31;
  _BYTE v32[20];
  _BYTE v33[20];
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  v4 = a1 + 80;
  v5 = (_QWORD *)(a1 + 88);
  sub_1CC5988B8(a1 + 80, *(_QWORD **)(a1 + 88));
  *(_QWORD *)(a1 + 80) = v5;
  *v5 = 0;
  v6 = *(_QWORD **)(a1 + 64);
  *(_QWORD *)(a1 + 96) = 0;
  sub_1CC59882C(a1 + 56, v6);
  *(_QWORD *)(a1 + 56) = a1 + 64;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a1 + 104);
  v7 = *(_DWORD *)(a1 + 16);
  if (v7 == 60 || v7 == 12)
  {
    awd::AWDMetricBuffer::setBasebandConfiguration_sync((_QWORD *)a1, a2);
  }
  else
  {
    v26 = (uint64_t **)(a1 + 56);
    v9 = *(int *)(*(_QWORD *)a2 + 16);
    if ((_DWORD)v9)
    {
      v10 = *(uint64_t **)(*(_QWORD *)a2 + 8);
      v25 = &v10[v9];
      while (1)
      {
        v11 = *v10;
        *(_QWORD *)buf = *(unsigned int *)(*v10 + 32) | ((unint64_t)*(unsigned int *)(*v10 + 8) << 32);
        v12 = sub_1CC598A50(v26, (unsigned int *)buf);
        v13 = *(int *)(v11 + 48);
        if ((_DWORD)v13)
          break;
LABEL_29:
        if (++v10 == v25)
          return;
      }
      v14 = *(uint64_t **)(v11 + 40);
      v15 = (uint64_t **)(v12 + 12);
      v16 = 8 * v13;
      while (1)
      {
        v17 = *v14;
        v27 = *(_DWORD *)(*v14 + 8);
        v28 = &v27;
        v18 = (unsigned int *)(sub_1CC598CDC(v4, &v27, (uint64_t)&unk_1CC5C73A3, &v28) + 5);
        v19 = *(_DWORD *)(v17 + 128);
        if ((v19 & 0x10) != 0)
          break;
        if ((v19 & 0x40) == 0)
        {
          v20 = 1;
LABEL_15:
          awd::MetricBuffer::addCount(v18, v20);
          goto LABEL_17;
        }
        awd::MetricBuffer::addTimeInSeconds((uint64_t)v18, *(int *)(v17 + 32));
LABEL_17:
        v21 = *(_DWORD *)(v17 + 128);
        if ((v21 & 0x80) != 0)
        {
          v22 = *(_DWORD *)(v17 + 36) & ~(*(int *)(v17 + 36) >> 31);
          if ((v21 & 0x100) == 0)
            goto LABEL_23;
        }
        else
        {
          v22 = 0;
          if ((v21 & 0x100) == 0)
            goto LABEL_23;
        }
        if (!*(_BYTE *)(v17 + 40))
        {
LABEL_23:
          if ((v21 & 0x10) != 0)
          {
            v23 = *(_DWORD *)(v17 + 24);
            *(_DWORD *)buf = v27;
            v30 = v27;
            LODWORD(v31) = 2;
            HIDWORD(v31) = v23;
            *(_QWORD *)&v32[4] = 0;
            *(_QWORD *)&v32[12] = v22;
            sub_1CC598E58(v15, (unsigned int *)buf, (uint64_t)buf);
          }
          else if ((v21 & 0x40) != 0)
          {
            v24 = *(int *)(v17 + 32);
            *(_DWORD *)buf = v27;
            v30 = v27;
            v31 = 3;
            *(_QWORD *)&v32[4] = v24;
            *(_QWORD *)&v32[12] = v22;
            sub_1CC598E58(v15, (unsigned int *)buf, (uint64_t)buf);
          }
          else
          {
            *(_DWORD *)buf = v27;
            v30 = v27;
            v31 = 1;
            *(_QWORD *)&v32[4] = 0;
            *(_QWORD *)&v32[12] = v22;
            sub_1CC598E58(v15, (unsigned int *)buf, (uint64_t)buf);
          }
          goto LABEL_28;
        }
        *(_OWORD *)&v33[4] = 0uLL;
        *(_DWORD *)buf = v27;
        v30 = v27;
        v31 = 4;
        *(_OWORD *)v32 = *(_OWORD *)v33;
        *(_DWORD *)&v32[16] = 0;
        sub_1CC598E58(v15, (unsigned int *)buf, (uint64_t)buf);
LABEL_28:
        ++v14;
        v16 -= 8;
        if (!v16)
          goto LABEL_29;
      }
      v20 = *(_DWORD *)(v17 + 24);
      goto LABEL_15;
    }
  }
}

uint64_t awd::AWDMetricBuffer::setBasebandConfiguration_sync(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t *v5;
  char **v6;
  uint64_t v7;
  int v8;
  int v9;
  unint64_t v10;
  _DWORD *v11;
  _DWORD *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  char *v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int *v25;
  unint64_t v26;
  uint64_t v27;
  char v29;

  v3 = *(int *)(*(_QWORD *)a2 + 16);
  if ((_DWORD)v3)
  {
    v4 = *(uint64_t **)(*(_QWORD *)a2 + 8);
    v5 = &v4[v3];
    v6 = (char **)(a1 + 13);
    do
    {
      v7 = *v4;
      if ((*(_BYTE *)(*v4 + 133) & 0x20) != 0 && !*(_BYTE *)(v7 + 116))
      {
        v8 = *(_DWORD *)(v7 + 32);
        v9 = *(_DWORD *)(v7 + 8);
        v11 = (_DWORD *)a1[14];
        v10 = a1[15];
        if ((unint64_t)v11 >= v10)
        {
          v13 = ((char *)v11 - *v6) >> 3;
          v14 = v13 + 1;
          if ((unint64_t)(v13 + 1) >> 61)
            sub_1CC592ABC();
          v15 = v10 - (_QWORD)*v6;
          if (v15 >> 2 > v14)
            v14 = v15 >> 2;
          if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8)
            v16 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v16 = v14;
          v18 = (char *)sub_1CC598F20((uint64_t)(a1 + 15), v16);
          v19 = &v18[8 * v13];
          *(_DWORD *)v19 = v8;
          *((_DWORD *)v19 + 1) = v9;
          v21 = (char *)a1[13];
          v20 = (char *)a1[14];
          v22 = v19;
          if (v20 != v21)
          {
            do
            {
              v23 = *((_QWORD *)v20 - 1);
              v20 -= 8;
              *((_QWORD *)v22 - 1) = v23;
              v22 -= 8;
            }
            while (v20 != v21);
            v20 = *v6;
          }
          v12 = v19 + 8;
          a1[13] = v22;
          a1[14] = v19 + 8;
          a1[15] = &v18[8 * v17];
          if (v20)
            operator delete(v20);
        }
        else
        {
          *v11 = v8;
          v11[1] = v9;
          v12 = v11 + 2;
        }
        a1[14] = v12;
      }
      ++v4;
    }
    while (v4 != v5);
  }
  v24 = a1[13];
  v25 = (unsigned int *)a1[14];
  v26 = 126 - 2 * __clz(((uint64_t)v25 - v24) >> 3);
  if (v25 == (unsigned int *)v24)
    v27 = 0;
  else
    v27 = v26;
  return sub_1CC598F54(v24, v25, (uint64_t)&v29, v27, 1);
}

double awd::AWDMetricBuffer::BufferInfo::bufferInfoByCallback@<D0>(awd::AWDMetricBuffer::BufferInfo *this@<X0>, uint64_t a2@<X8>)
{
  double result;

  *(_DWORD *)a2 = (_DWORD)this;
  *(_QWORD *)&result = 4;
  *(_QWORD *)(a2 + 4) = 4;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  return result;
}

uint64_t awd::AWDMetricBuffer::BufferInfo::bufferInfoByCount@<X0>(uint64_t result@<X0>, int a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  *(_DWORD *)a4 = result;
  *(_DWORD *)(a4 + 4) = 2;
  *(_QWORD *)(a4 + 16) = 0;
  *(_QWORD *)(a4 + 24) = a3;
  *(_DWORD *)(a4 + 8) = a2;
  return result;
}

double awd::AWDMetricBuffer::BufferInfo::bufferInfoByTimeInSeconds@<D0>(int a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  double result;

  *(_DWORD *)a4 = a1;
  *(_QWORD *)&result = 3;
  *(_QWORD *)(a4 + 4) = 3;
  *(_QWORD *)(a4 + 16) = a2;
  *(_QWORD *)(a4 + 24) = a3;
  return result;
}

double awd::AWDMetricBuffer::BufferInfo::bufferInfoByMostRecent@<D0>(int a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  double result;

  *(_DWORD *)a3 = a1;
  *(_QWORD *)&result = 1;
  *(_QWORD *)(a3 + 4) = 1;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)(a3 + 24) = a2;
  return result;
}

uint64_t *awd::AWDMetricBuffer::setConfiguration(uint64_t a1, __int128 *a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  NSObject *v7;
  char *v8;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;

  v3 = *(_QWORD *)(a1 + 24);
  v4 = *(_QWORD *)(a1 + 32);
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = *(NSObject **)a1;
  v10 = *a2;
  *(_QWORD *)a2 = 0;
  *((_QWORD *)a2 + 1) = 0;
  v8 = (char *)operator new();
  *(_QWORD *)v8 = a1;
  *((_QWORD *)v8 + 1) = v3;
  *((_QWORD *)v8 + 2) = v4;
  *(_OWORD *)(v8 + 24) = v10;
  v11 = 0;
  v12 = 0;
  dispatch_async_f(v7, v8, (dispatch_function_t)sub_1CC59A094);
  sub_1CC59A03C(&v11);
  return sub_1CC59A03C(&v12);
}

void awd::AWDMetricBuffer::_triggerOneMetric(uint64_t a1, uint64_t a2, unsigned int a3, int a4, unint64_t a5, uint64_t a6)
{
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t *v15;
  BOOL v16;
  NSObject *v17;
  const char *v18;
  NSObject *v19;
  uint32_t v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  NSObject *v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  unsigned int v28;
  BOOL v29;
  uint64_t *v30;
  NSObject *v31;
  NSObject *v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  unsigned int v36;
  BOOL v37;
  uint64_t *v38;
  awd::MetricBuffer *v39;
  NSObject *v40;
  const char *v41;
  NSObject *v42;
  NSObject *v43;
  uint32_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  _QWORD *v49;
  std::__shared_weak_count *v50;
  uint64_t v51;
  unsigned int v52;
  uint8_t v53[16];
  __int128 v54;
  uint64_t v55;
  uint8_t buf[16];
  __int128 v57;
  uint64_t v58;
  uint64_t v59;

  v59 = *MEMORY[0x1E0C80C00];
  v51 = a2;
  v52 = a3;
  v7 = *(std::__shared_weak_count **)(a1 + 48);
  if (!v7)
  {
    v11 = 0;
LABEL_14:
    v17 = *(NSObject **)(a1 + 8);
    if (!os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
      goto LABEL_17;
    *(_WORD *)buf = 0;
    v18 = "metric.buffer:#E fMetricSubmitter Null.";
    v19 = v17;
    v20 = 2;
    goto LABEL_16;
  }
  v11 = std::__shared_weak_count::lock(v7);
  v50 = v11;
  if (!v11)
    goto LABEL_14;
  v49 = *(_QWORD **)(a1 + 40);
  if (!v49)
    goto LABEL_14;
  v12 = sub_1CC59A15C(a1 + 56, (unsigned int *)&v51 + 1);
  if (v12 != v13)
  {
    while (*((_DWORD *)v12 + 10) != a4)
    {
      v14 = (uint64_t *)v12[1];
      if (v14)
      {
        do
        {
          v15 = v14;
          v14 = (uint64_t *)*v14;
        }
        while (v14);
      }
      else
      {
        do
        {
          v15 = (uint64_t *)v12[2];
          v16 = *v15 == (_QWORD)v12;
          v12 = v15;
        }
        while (!v16);
      }
      v12 = v15;
      if (v15 == v13)
        goto LABEL_40;
    }
    if (v12 != v13)
    {
      v26 = v12[7];
      v24 = v12 + 7;
      v25 = v26;
      if (!v26)
        goto LABEL_37;
      v27 = v24;
      do
      {
        v28 = *(_DWORD *)(v25 + 32);
        v29 = v28 >= a5;
        if (v28 >= a5)
          v30 = (uint64_t *)v25;
        else
          v30 = (uint64_t *)(v25 + 8);
        if (v29)
          v27 = (uint64_t *)v25;
        v25 = *v30;
      }
      while (*v30);
      if (v27 == v24 || *((_DWORD *)v27 + 8) > a5)
      {
LABEL_37:
        v31 = *(NSObject **)(a1 + 8);
        if (!os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT))
          goto LABEL_17;
        *(_DWORD *)buf = 67109120;
        *(_DWORD *)&buf[4] = a5;
        v18 = "metric.buffer:#E Could not find buffering info for metric 0x%x in timer function";
        goto LABEL_39;
      }
      v33 = *(_QWORD *)(a1 + 88);
      if (!v33)
        goto LABEL_53;
      v34 = *((_DWORD *)v27 + 11);
      v35 = a1 + 88;
      do
      {
        v36 = *(_DWORD *)(v33 + 32);
        v37 = v36 >= a5;
        if (v36 >= a5)
          v38 = (uint64_t *)v33;
        else
          v38 = (uint64_t *)(v33 + 8);
        if (v37)
          v35 = v33;
        v33 = *v38;
      }
      while (*v38);
      if (v35 != a1 + 88 && *(_DWORD *)(v35 + 32) <= a5)
      {
        v39 = (awd::MetricBuffer *)(v35 + 40);
        awd::MetricBuffer::end((awd::MetricBuffer *)(v35 + 40), (uint64_t)buf);
        switch(v34)
        {
          case 1:
            awd::MetricBuffer::lastCount(v39, 1, (uint64_t)v53);
            *(_OWORD *)buf = *(_OWORD *)v53;
            v57 = v54;
            v58 = v55;
            v40 = *(NSObject **)(a1 + 8);
            if (os_log_type_enabled(v40, OS_LOG_TYPE_INFO))
            {
              *(_DWORD *)v53 = 67109120;
              *(_DWORD *)&v53[4] = a5;
              v41 = "metric.buffer:#I Found buffering info for metric 0x%x: most recent";
              goto LABEL_66;
            }
            break;
          case 2:
            awd::MetricBuffer::lastCount(v39, *((_DWORD *)v27 + 12), (uint64_t)v53);
            *(_OWORD *)buf = *(_OWORD *)v53;
            v57 = v54;
            v58 = v55;
            v40 = *(NSObject **)(a1 + 8);
            if (os_log_type_enabled(v40, OS_LOG_TYPE_INFO))
            {
              *(_DWORD *)v53 = 67109120;
              *(_DWORD *)&v53[4] = a5;
              v41 = "metric.buffer:#I Found buffering info for metric 0x%x: num before trigger";
              goto LABEL_66;
            }
            break;
          case 3:
            awd::MetricBuffer::lastTimeInSeconds(v39, a6 - 1000 * v27[7], (uint64_t)v53);
            *(_OWORD *)buf = *(_OWORD *)v53;
            v57 = v54;
            v58 = v55;
            v40 = *(NSObject **)(a1 + 8);
            if (os_log_type_enabled(v40, OS_LOG_TYPE_INFO))
            {
              *(_DWORD *)v53 = 67109120;
              *(_DWORD *)&v53[4] = a5;
              v41 = "metric.buffer:#I Found buffering info for metric 0x%x: time before trigger";
              goto LABEL_66;
            }
            break;
          case 4:
            v40 = *(NSObject **)(a1 + 8);
            if (os_log_type_enabled(v40, OS_LOG_TYPE_INFO))
            {
              *(_DWORD *)v53 = 67109120;
              *(_DWORD *)&v53[4] = a5;
              v41 = "metric.buffer:#I Found buffering info for metric 0x%x: callback";
LABEL_66:
              v43 = v40;
              v44 = 8;
              goto LABEL_67;
            }
            break;
          default:
            v42 = *(NSObject **)(a1 + 8);
            if (os_log_type_enabled(v42, OS_LOG_TYPE_INFO))
            {
              *(_DWORD *)v53 = 67109888;
              *(_DWORD *)&v53[4] = a5;
              *(_WORD *)&v53[8] = 1024;
              *(_DWORD *)&v53[10] = v51;
              *(_WORD *)&v53[14] = 1024;
              LODWORD(v54) = HIDWORD(v51);
              WORD2(v54) = 1024;
              *(_DWORD *)((char *)&v54 + 6) = v52;
              v41 = "metric.buffer:#I Got unknown buffering info for metric 0x%x, Trigger(cid=0x%x, trid=0x%x, sid=%u)";
              v43 = v42;
              v44 = 26;
LABEL_67:
              _os_log_impl(&dword_1CC590000, v43, OS_LOG_TYPE_INFO, v41, v53, v44);
            }
            break;
        }
        while (1)
        {
          awd::MetricBuffer::end(v39, (uint64_t)v53);
          if (!awd::MetricBuffer::iterator::operator!=(buf, v53))
            break;
          v45 = v51;
          v46 = v52;
          v47 = *(_DWORD *)(a1 + 16);
          v48 = awd::MetricBuffer::iterator::operator*((uint64_t)buf);
          a5 = a5 & 0xFFFFFFFF00000000 | v46;
          awd::AWDMetricSubmitter::addMetric(v49, v45, a5, a4, v47, v48);
          awd::MetricBuffer::iterator::operator++((uint64_t)buf, (uint64_t)v53);
        }
        v11 = v50;
      }
      else
      {
LABEL_53:
        v31 = *(NSObject **)(a1 + 8);
        if (os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 67109120;
          *(_DWORD *)&buf[4] = a5;
          v18 = "metric.buffer:#E Could not find buffer for metric 0x%x";
LABEL_39:
          v19 = v31;
          v20 = 8;
          goto LABEL_16;
        }
      }
LABEL_17:
      if (!v11)
        return;
      goto LABEL_18;
    }
LABEL_40:
    v32 = *(NSObject **)(a1 + 8);
    if (!os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT))
      goto LABEL_17;
    *(_DWORD *)buf = 67109632;
    *(_DWORD *)&buf[4] = v51;
    *(_WORD *)&buf[8] = 1024;
    *(_DWORD *)&buf[10] = HIDWORD(v51);
    *(_WORD *)&buf[14] = 1024;
    LODWORD(v57) = v52;
    v18 = "metric.buffer:#E Could not find profile info for Trigger(cid=0x%x, trid=0x%x, sid=%u)in timer function.";
    v19 = v32;
    v20 = 20;
LABEL_16:
    _os_log_impl(&dword_1CC590000, v19, OS_LOG_TYPE_DEFAULT, v18, buf, v20);
    goto LABEL_17;
  }
  v23 = *(NSObject **)(a1 + 8);
  if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109632;
    *(_DWORD *)&buf[4] = v51;
    *(_WORD *)&buf[8] = 1024;
    *(_DWORD *)&buf[10] = HIDWORD(v51);
    *(_WORD *)&buf[14] = 1024;
    LODWORD(v57) = v52;
    _os_log_impl(&dword_1CC590000, v23, OS_LOG_TYPE_DEFAULT, "metric.buffer:#E Could not find buffering info for Trigger(cid=0x%x, trid=0x%x, sid=%u)in timer function.", buf, 0x14u);
  }
LABEL_18:
  p_shared_owners = (unint64_t *)&v11->__shared_owners_;
  do
    v22 = __ldaxr(p_shared_owners);
  while (__stlxr(v22 - 1, p_shared_owners));
  if (!v22)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
}

void sub_1CC597B00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  awd::AWDServerConnection::~AWDServerConnection((awd::AWDServerConnection *)&a9);
  _Unwind_Resume(a1);
}

uint64_t awd::AWDMetricBuffer::BufferInfo::getBufferingType(awd::AWDMetricBuffer::BufferInfo *this)
{
  return *((unsigned int *)this + 1);
}

uint64_t awd::AWDMetricBuffer::BufferInfo::getCount(awd::AWDMetricBuffer::BufferInfo *this)
{
  return *((unsigned int *)this + 2);
}

uint64_t awd::AWDMetricBuffer::BufferInfo::getTimeBeforeInSeconds(awd::AWDMetricBuffer::BufferInfo *this)
{
  return *((_QWORD *)this + 2);
}

void awd::AWDMetricBuffer::pushMetricToDaemon(uint64_t a1, uint64_t a2, int a3, int a4, uint64_t a5, uint64_t a6)
{
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v12;
  _QWORD *v13;
  NSObject *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  uint8_t v17[16];
  _QWORD *v18;
  std::__shared_weak_count *v19;

  v18 = 0;
  v19 = 0;
  v7 = *(std::__shared_weak_count **)(a1 + 48);
  if (v7)
  {
    v12 = std::__shared_weak_count::lock(v7);
    v19 = v12;
    if (v12)
    {
      v13 = *(_QWORD **)(a1 + 40);
      v18 = v13;
      if (v13)
      {
        awd::AWDMetricSubmitter::addMetric(v13, a2, a3, a4, *(_DWORD *)(a1 + 16), a6);
LABEL_9:
        p_shared_owners = (unint64_t *)&v12->__shared_owners_;
        do
          v16 = __ldaxr(p_shared_owners);
        while (__stlxr(v16 - 1, p_shared_owners));
        if (!v16)
        {
          ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
          std::__shared_weak_count::__release_weak(v12);
        }
        return;
      }
    }
  }
  else
  {
    v12 = 0;
  }
  v14 = *(NSObject **)(a1 + 8);
  if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v17 = 0;
    _os_log_impl(&dword_1CC590000, v14, OS_LOG_TYPE_DEFAULT, "metric.buffer:#E pushMetricToDaemon: MetricSubmitter Null.", v17, 2u);
  }
  if (v12)
    goto LABEL_9;
}

void sub_1CC597C44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  awd::AWDServerConnection::~AWDServerConnection((awd::AWDServerConnection *)va);
  _Unwind_Resume(a1);
}

void awd::AWDMetricBuffer::pushTriggerToDaemon(_QWORD *a1, uint64_t a2, int a3, uint64_t a4)
{
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v9;
  _QWORD *v10;
  NSObject *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  uint8_t v14[16];
  _QWORD *v15;
  std::__shared_weak_count *v16;

  v15 = 0;
  v16 = 0;
  v5 = (std::__shared_weak_count *)a1[6];
  if (v5)
  {
    v9 = std::__shared_weak_count::lock(v5);
    v16 = v9;
    if (v9)
    {
      v10 = (_QWORD *)a1[5];
      v15 = v10;
      if (v10)
      {
        awd::AWDMetricSubmitter::generateTrigger(v10, a2, a3, a4);
LABEL_9:
        p_shared_owners = (unint64_t *)&v9->__shared_owners_;
        do
          v13 = __ldaxr(p_shared_owners);
        while (__stlxr(v13 - 1, p_shared_owners));
        if (!v13)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
        return;
      }
    }
  }
  else
  {
    v9 = 0;
  }
  v11 = a1[1];
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v14 = 0;
    _os_log_impl(&dword_1CC590000, v11, OS_LOG_TYPE_DEFAULT, "metric.buffer:#E pushTriggerToDaemon: fMetricSubmitter Null.", v14, 2u);
  }
  if (v9)
    goto LABEL_9;
}

void sub_1CC597D48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  awd::AWDServerConnection::~AWDServerConnection((awd::AWDServerConnection *)va);
  _Unwind_Resume(a1);
}

void awd::AWDMetricBuffer::finishSubmissionToDaemon(uint64_t a1, uint64_t a2, int a3, int a4, NSObject **a5)
{
  std::__shared_weak_count *v8;
  uint64_t v9;
  unint64_t *p_shared_weak_owners;
  unint64_t v11;
  unint64_t v12;
  NSObject *v13;
  NSObject *v14;
  _QWORD *v15;
  uint64_t v16;

  if (a4 != 12 && a4 != 60)
  {
    v9 = *(_QWORD *)(a1 + 40);
    v8 = *(std::__shared_weak_count **)(a1 + 48);
    if (v8)
    {
      p_shared_weak_owners = (unint64_t *)&v8->__shared_weak_owners_;
      do
        v11 = __ldxr(p_shared_weak_owners);
      while (__stxr(v11 + 1, p_shared_weak_owners));
      do
        v12 = __ldxr(p_shared_weak_owners);
      while (__stxr(v12 + 1, p_shared_weak_owners));
    }
    v13 = *a5;
    v14 = *(NSObject **)a1;
    v15 = (_QWORD *)operator new();
    *v15 = v9;
    v15[1] = v8;
    *((_DWORD *)v15 + 4) = a4;
    *(_QWORD *)((char *)v15 + 20) = a2;
    *((_DWORD *)v15 + 7) = a3;
    v16 = 0;
    dispatch_group_notify_f(v13, v14, v15, (dispatch_function_t)sub_1CC59A244);
    sub_1CC59A1F4(&v16);
    if (v8)
      std::__shared_weak_count::__release_weak(v8);
  }
}

void sub_1CC597E3C(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;

  if (v1)
  {
    std::__shared_weak_count::__release_weak(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

void awd::AWDMetricBuffer::_trigger(uint64_t a1, uint64_t a2, int a3, dispatch_object_t *a4)
{
  int v4;
  NSObject *v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  int v11;
  uint64_t v12;
  NSObject *v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_weak_owners;
  unint64_t v17;
  dispatch_time_t v18;
  NSObject *v19;
  NSObject *v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t *v23;
  uint64_t *v24;
  BOOL v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t *v28;
  NSObject *v29;
  uint64_t *v30;
  uint64_t *v31;
  unint64_t AWDTimestamp;
  uint64_t *v34;
  int v35;
  _QWORD block[5];
  dispatch_group_t group;
  uint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t v40;
  uint64_t v41;
  int v42;
  int v43;
  int v44;
  uint64_t v45;
  int v46;
  uint8_t buf[4];
  int v48;
  __int16 v49;
  int v50;
  __int16 v51;
  int v52;
  __int16 v53;
  uint64_t v54;
  __int16 v55;
  uint64_t v56;
  uint64_t v57;

  v4 = HIDWORD(a2);
  v57 = *MEMORY[0x1E0C80C00];
  v45 = a2;
  v46 = a3;
  v6 = *(NSObject **)(a1 + 8);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 67109120;
    v48 = v4;
    _os_log_impl(&dword_1CC590000, v6, OS_LOG_TYPE_INFO, "metric.buffer:#I In _trigger with trigger 0x%x", buf, 8u);
  }
  v7 = sub_1CC59A15C(a1 + 56, (unsigned int *)&v45 + 1);
  v30 = v8;
  v9 = v7;
  if (v7 == v8)
  {
    v29 = *(NSObject **)(a1 + 8);
    if (os_log_type_enabled(v29, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 67109120;
      v48 = HIDWORD(v45);
      _os_log_impl(&dword_1CC590000, v29, OS_LOG_TYPE_INFO, "metric.buffer:#I Could not find buffering info for trigger 0x%x", buf, 8u);
    }
  }
  else
  {
    AWDTimestamp = awd::getAWDTimestamp((awd *)v7);
    do
    {
      v10 = (uint64_t *)v9[6];
      v31 = v9;
      v34 = v9 + 7;
      if (v10 != v9 + 7)
      {
        v35 = *((_DWORD *)v9 + 10);
        do
        {
          v11 = *((_DWORD *)v10 + 8);
          v12 = v10[8];
          v13 = *a4;
          if (*a4)
          {
            dispatch_retain(*a4);
            dispatch_group_enter(v13);
          }
          v14 = *(_QWORD *)(a1 + 24);
          v15 = *(std::__shared_weak_count **)(a1 + 32);
          if (v15)
          {
            p_shared_weak_owners = (unint64_t *)&v15->__shared_weak_owners_;
            do
              v17 = __ldxr(p_shared_weak_owners);
            while (__stxr(v17 + 1, p_shared_weak_owners));
          }
          v18 = dispatch_time(0, 1000000000 * v12);
          v19 = *(NSObject **)(a1 + 8);
          if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)buf = 67110144;
            v48 = HIDWORD(v45);
            v49 = 1024;
            v50 = v35;
            v51 = 1024;
            v52 = v11;
            v53 = 2048;
            v54 = v12;
            v55 = 2048;
            v56 = 1000000000 * v12;
            _os_log_impl(&dword_1CC590000, v19, OS_LOG_TYPE_INFO, "metric.buffer:#I Dispatching trigger 0x%x for profile 0x%x to metric 0x%x after %llu seconds (%llu ns).", buf, 0x28u);
          }
          v20 = *(NSObject **)a1;
          block[0] = MEMORY[0x1E0C809B0];
          block[1] = 1174405120;
          block[2] = sub_1CC598220;
          block[3] = &unk_1E886BC38;
          block[4] = a1;
          group = v13;
          if (v13)
          {
            dispatch_retain(v13);
            if (group)
              dispatch_group_enter(group);
          }
          v38 = v14;
          v39 = v15;
          if (v15)
          {
            v21 = (unint64_t *)&v15->__shared_weak_owners_;
            do
              v22 = __ldxr(v21);
            while (__stxr(v22 + 1, v21));
          }
          v41 = v45;
          v42 = v46;
          v43 = v35;
          v44 = v11;
          v40 = AWDTimestamp;
          dispatch_after(v18, v20, block);
          if (v39)
            std::__shared_weak_count::__release_weak(v39);
          if (group)
          {
            dispatch_group_leave(group);
            if (group)
              dispatch_release(group);
          }
          if (v15)
            std::__shared_weak_count::__release_weak(v15);
          if (v13)
          {
            dispatch_group_leave(v13);
            dispatch_release(v13);
          }
          v23 = (uint64_t *)v10[1];
          if (v23)
          {
            do
            {
              v24 = v23;
              v23 = (uint64_t *)*v23;
            }
            while (v23);
          }
          else
          {
            do
            {
              v24 = (uint64_t *)v10[2];
              v25 = *v24 == (_QWORD)v10;
              v10 = v24;
            }
            while (!v25);
          }
          v10 = v24;
        }
        while (v24 != v34);
      }
      v26 = v31;
      v27 = (uint64_t *)v31[1];
      if (v27)
      {
        do
        {
          v28 = v27;
          v27 = (uint64_t *)*v27;
        }
        while (v27);
      }
      else
      {
        do
        {
          v28 = (uint64_t *)v26[2];
          v25 = *v28 == (_QWORD)v26;
          v26 = v28;
        }
        while (!v25);
      }
      v9 = v28;
    }
    while (v28 != v30);
  }
}

uint64_t awd::AWDMetricBuffer::BufferInfo::getTimeAfterInSeconds(awd::AWDMetricBuffer::BufferInfo *this)
{
  return *((_QWORD *)this + 3);
}

void sub_1CC598220(uint64_t a1)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = *(std::__shared_weak_count **)(a1 + 56);
  if (v2)
  {
    v3 = *(_QWORD *)(a1 + 32);
    v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      v5 = v4;
      if (*(_QWORD *)(a1 + 48))
        awd::AWDMetricBuffer::_triggerOneMetric(v3, *(_QWORD *)(a1 + 72), *(_DWORD *)(a1 + 80), *(_DWORD *)(a1 + 84), *(unsigned int *)(a1 + 88), *(_QWORD *)(a1 + 64));
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

void sub_1CC5982C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  awd::AWDServerConnection::~AWDServerConnection((awd::AWDServerConnection *)&a9);
  _Unwind_Resume(a1);
}

void sub_1CC5982DC(_QWORD *a1, _QWORD *a2)
{
  NSObject *v4;
  NSObject *v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  v4 = a2[5];
  a1[5] = v4;
  if (v4)
  {
    dispatch_retain(v4);
    v5 = a1[5];
    if (v5)
      dispatch_group_enter(v5);
  }
  v6 = a2[7];
  a1[6] = a2[6];
  a1[7] = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
}

void sub_1CC598338(uint64_t a1)
{
  std::__shared_weak_count *v2;
  NSObject *v3;
  NSObject *v4;

  v2 = *(std::__shared_weak_count **)(a1 + 56);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = *(NSObject **)(a1 + 40);
  if (v3)
  {
    dispatch_group_leave(v3);
    v4 = *(NSObject **)(a1 + 40);
    if (v4)
      dispatch_release(v4);
  }
}

void awd::AWDMetricBuffer::trigger(NSObject **a1, uint64_t a2, int a3, uint64_t a4)
{
  NSObject *v4;
  _QWORD v5[3];
  uint64_t v6;
  int v7;
  _QWORD block[5];

  v5[2] = a4;
  v6 = a2;
  v7 = a3;
  v5[0] = a1;
  v5[1] = &v6;
  v4 = *a1;
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = sub_1CC59A304;
  block[3] = &unk_1E886C0E8;
  block[4] = v5;
  dispatch_sync(v4, block);
}

uint64_t awd::AWDMetricBuffer::BufferInfo::BufferInfo(uint64_t result, int a2, int a3, uint64_t a4)
{
  *(_DWORD *)result = a2;
  *(_DWORD *)(result + 4) = a3;
  *(_DWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = a4;
  return result;
}

{
  *(_DWORD *)result = a2;
  *(_DWORD *)(result + 4) = a3;
  *(_DWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = a4;
  return result;
}

void awd::AWDMetricBuffer::BufferInfo::debugLog(awd::AWDMetricBuffer::BufferInfo *this, os_log_t *a2)
{
  int v3;
  os_log_t v4;
  int v5;
  const char *v6;
  NSObject *v7;
  uint32_t v8;
  os_log_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  os_log_t v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  __int16 v19;
  uint64_t v20;
  __int16 v21;
  uint64_t v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v3 = *((_DWORD *)this + 1);
  switch(v3)
  {
    case 3:
      v9 = *a2;
      if (!os_log_type_enabled(*a2, OS_LOG_TYPE_INFO))
        return;
      v10 = *(_DWORD *)this;
      v11 = *((_QWORD *)this + 2);
      v12 = *((_QWORD *)this + 3);
      v17 = 67109632;
      v18 = v10;
      v19 = 2048;
      v20 = v11;
      v21 = 2048;
      v22 = v12;
      v6 = "metric.buffer:#I \t\t- METRIC 0x%x: Buffer last %llu+%llu seconds";
      v7 = v9;
      v8 = 28;
      goto LABEL_13;
    case 2:
      v13 = *a2;
      if (!os_log_type_enabled(*a2, OS_LOG_TYPE_INFO))
        return;
      v14 = *(_DWORD *)this;
      v15 = *((_DWORD *)this + 2);
      v17 = 67109376;
      v18 = v14;
      v19 = 1024;
      LODWORD(v20) = v15;
      v6 = "metric.buffer:#I \t\t- METRIC 0x%x: Buffer most recent %u metrics.";
      break;
    case 1:
      v4 = *a2;
      if (!os_log_type_enabled(*a2, OS_LOG_TYPE_INFO))
        return;
      v5 = *(_DWORD *)this;
      v17 = 67109120;
      v18 = v5;
      v6 = "metric.buffer:#I \t\t- METRIC 0x%x: Buffer most recent metric.";
      v7 = v4;
      v8 = 8;
      goto LABEL_13;
    default:
      v13 = *a2;
      if (!os_log_type_enabled(*a2, OS_LOG_TYPE_INFO))
        return;
      v16 = *(_DWORD *)this;
      v17 = 67109376;
      v18 = v16;
      v19 = 1024;
      LODWORD(v20) = v3;
      v6 = "metric.buffer:#I \t\t- METRIC 0x%x: UNKNOWN BUFFERING TYPE (%d)";
      break;
  }
  v7 = v13;
  v8 = 14;
LABEL_13:
  _os_log_impl(&dword_1CC590000, v7, OS_LOG_TYPE_INFO, v6, (uint8_t *)&v17, v8);
}

void awd::AWDMetricBuffer::_debugLog(awd::AWDMetricBuffer *this)
{
  os_log_t *v2;
  NSObject *v3;
  awd::AWDMetricBuffer *v4;
  NSObject *v5;
  int v6;
  int v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  BOOL v11;
  awd::AWDMetricBuffer *v12;
  awd::AWDMetricBuffer *v13;
  uint8_t buf[4];
  int v15;
  __int16 v16;
  int v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v2 = (os_log_t *)((char *)this + 8);
  v3 = *((_QWORD *)this + 1);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1CC590000, v3, OS_LOG_TYPE_INFO, "metric.buffer:#I The following are how much to buffer each metric for a given trigger:", buf, 2u);
  }
  v4 = (awd::AWDMetricBuffer *)*((_QWORD *)this + 7);
  if (v4 != (awd::AWDMetricBuffer *)((char *)this + 64))
  {
    do
    {
      v5 = *v2;
      if (os_log_type_enabled(*v2, OS_LOG_TYPE_INFO))
      {
        v6 = *((_DWORD *)v4 + 8);
        v7 = *((_DWORD *)v4 + 10);
        *(_DWORD *)buf = 67109376;
        v15 = v6;
        v16 = 1024;
        v17 = v7;
        _os_log_impl(&dword_1CC590000, v5, OS_LOG_TYPE_INFO, "metric.buffer:#I \t- TRIGGER: 0x%x PROFILE: 0x%x", buf, 0xEu);
      }
      v8 = (_QWORD *)*((_QWORD *)v4 + 6);
      if (v8 != (_QWORD *)((char *)v4 + 56))
      {
        do
        {
          awd::AWDMetricBuffer::BufferInfo::debugLog((awd::AWDMetricBuffer::BufferInfo *)(v8 + 5), v2);
          v9 = (_QWORD *)v8[1];
          if (v9)
          {
            do
            {
              v10 = v9;
              v9 = (_QWORD *)*v9;
            }
            while (v9);
          }
          else
          {
            do
            {
              v10 = (_QWORD *)v8[2];
              v11 = *v10 == (_QWORD)v8;
              v8 = v10;
            }
            while (!v11);
          }
          v8 = v10;
        }
        while (v10 != (_QWORD *)((char *)v4 + 56));
      }
      v12 = (awd::AWDMetricBuffer *)*((_QWORD *)v4 + 1);
      if (v12)
      {
        do
        {
          v13 = v12;
          v12 = *(awd::AWDMetricBuffer **)v12;
        }
        while (v12);
      }
      else
      {
        do
        {
          v13 = (awd::AWDMetricBuffer *)*((_QWORD *)v4 + 2);
          v11 = *(_QWORD *)v13 == (_QWORD)v4;
          v4 = v13;
        }
        while (!v11);
      }
      v4 = v13;
    }
    while (v13 != (awd::AWDMetricBuffer *)((char *)this + 64));
  }
}

void awd::AWDMetricBuffer::debugLog(NSObject **this)
{
  NSObject *v1;
  NSObject **v2;
  _QWORD block[5];

  v2 = this;
  v1 = *this;
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = sub_1CC59A31C;
  block[3] = &unk_1E886C278;
  block[4] = &v2;
  dispatch_sync(v1, block);
}

void sub_1CC5987DC(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E886B8D8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1CC5987F0(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E886B8D8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1D17AD544);
}

void sub_1CC59882C(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    sub_1CC59882C(a1, *a2);
    sub_1CC59882C(a1, a2[1]);
    sub_1CC598878((uint64_t)(a2 + 6), (_QWORD *)a2[7]);
    operator delete(a2);
  }
}

void sub_1CC598878(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    sub_1CC598878(a1, *a2);
    sub_1CC598878(a1, a2[1]);
    operator delete(a2);
  }
}

void sub_1CC5988B8(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    sub_1CC5988B8(a1, *a2);
    sub_1CC5988B8(a1, a2[1]);
    awd::MetricBuffer::~MetricBuffer((awd::MetricBuffer *)(a2 + 5));
    operator delete(a2);
  }
}

uint64_t sub_1CC598904(uint64_t result)
{
  _DWORD **v1;
  uint64_t *v2;
  unsigned int v3;
  uint64_t v4;
  unsigned int v5;

  v1 = *(_DWORD ***)(result + 40);
  v2 = (uint64_t *)*((_QWORD *)*v1 + 11);
  if (v2)
  {
    v3 = *v1[1];
    v4 = 1;
    do
    {
      v5 = *((_DWORD *)v2 + 8);
      if (v3 >= v5)
      {
        if (v5 >= v3)
          goto LABEL_8;
        ++v2;
      }
      v2 = (uint64_t *)*v2;
    }
    while (v2);
  }
  v4 = 0;
LABEL_8:
  **(_QWORD **)(result + 32) = v4;
  return result;
}

void sub_1CC598950(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  unsigned int **v4;
  unsigned int *v5;
  unsigned int v6;
  _QWORD *v7;
  unsigned int v8;
  BOOL v9;
  uint64_t *v10;
  uint64_t v11;
  unsigned int *v12;

  v1 = *(_QWORD **)(a1 + 32);
  v2 = (_QWORD *)(*v1 + 88);
  v3 = *v2;
  if (*v2)
  {
    v4 = (unsigned int **)v1[1];
    v5 = *v4;
    v6 = **v4;
    v7 = v2;
    do
    {
      v8 = *(_DWORD *)(v3 + 32);
      v9 = v8 >= v6;
      if (v8 >= v6)
        v10 = (uint64_t *)v3;
      else
        v10 = (uint64_t *)(v3 + 8);
      if (v9)
        v7 = (_QWORD *)v3;
      v3 = *v10;
    }
    while (*v10);
    if (v7 != v2 && v6 >= *((_DWORD *)v7 + 8))
    {
      *v4 = 0;
      v12 = v5;
      awd::MetricBuffer::buffer((uint64_t)(v7 + 5), (uint64_t *)&v12);
      v11 = (uint64_t)v12;
      v12 = 0;
      if (v11)
        sub_1CC598A08((uint64_t)&v12, v11);
    }
  }
}

void sub_1CC5989E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  uint64_t v11;

  v11 = a10;
  a10 = 0;
  if (v11)
    sub_1CC598A08((uint64_t)&a10, v11);
  _Unwind_Resume(exception_object);
}

void sub_1CC598A08(uint64_t a1, uint64_t a2)
{
  void *v2;

  if (a2)
  {
    v2 = *(void **)(a2 + 16);
    if (v2)
    {
      *(_QWORD *)(a2 + 24) = v2;
      operator delete(v2);
    }
    JUMPOUT(0x1D17AD544);
  }
}

_DWORD *sub_1CC598A50(uint64_t **a1, unsigned int *a2)
{
  _DWORD *v4;
  uint64_t **v5;
  uint64_t *v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t **v9;

  v4 = operator new(0x48uLL);
  v5 = a1 + 1;
  v6 = a1[1];
  v7 = *a2;
  v8 = a2[1];
  v4[8] = *a2;
  v4[10] = v8;
  *((_QWORD *)v4 + 8) = 0;
  *((_QWORD *)v4 + 7) = 0;
  *((_QWORD *)v4 + 6) = v4 + 14;
  if (v6)
  {
    do
    {
      while (1)
      {
        v5 = (uint64_t **)v6;
        if (v7 >= *((_DWORD *)v6 + 8))
          break;
        v6 = (uint64_t *)*v6;
        v9 = v5;
        if (!*v5)
          goto LABEL_8;
      }
      v6 = (uint64_t *)v6[1];
    }
    while (v6);
    v9 = v5 + 1;
  }
  else
  {
    v9 = a1 + 1;
  }
LABEL_8:
  sub_1CC598AF0(a1, (uint64_t)v5, v9, (uint64_t *)v4);
  return v4;
}

uint64_t *sub_1CC598AF0(uint64_t **a1, uint64_t a2, uint64_t **a3, uint64_t *a4)
{
  uint64_t *v5;
  uint64_t *result;

  *a4 = 0;
  a4[1] = 0;
  a4[2] = a2;
  *a3 = a4;
  v5 = (uint64_t *)**a1;
  if (v5)
  {
    *a1 = v5;
    a4 = *a3;
  }
  result = sub_1CC598B44(a1[1], a4);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return result;
}

uint64_t *sub_1CC598B44(uint64_t *result, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;
  _BYTE *v5;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t **v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  *((_BYTE *)a2 + 24) = a2 == result;
  if (a2 != result)
  {
    do
    {
      v2 = (uint64_t *)a2[2];
      if (*((_BYTE *)v2 + 24))
        return result;
      v3 = (uint64_t *)v2[2];
      v4 = (uint64_t *)*v3;
      if ((uint64_t *)*v3 == v2)
      {
        v7 = v3[1];
        if (!v7 || (v8 = *(unsigned __int8 *)(v7 + 24), v5 = (_BYTE *)(v7 + 24), v8))
        {
          if ((uint64_t *)*v2 == a2)
          {
            v9 = (uint64_t **)a2[2];
          }
          else
          {
            v9 = (uint64_t **)v2[1];
            v10 = *v9;
            v2[1] = (uint64_t)*v9;
            if (v10)
            {
              v10[2] = (uint64_t)v2;
              v3 = (uint64_t *)v2[2];
            }
            v9[2] = v3;
            *(_QWORD *)(v2[2] + 8 * (*(_QWORD *)v2[2] != (_QWORD)v2)) = v9;
            *v9 = v2;
            v2[2] = (uint64_t)v9;
            v3 = v9[2];
            v2 = (uint64_t *)*v3;
          }
          *((_BYTE *)v9 + 24) = 1;
          *((_BYTE *)v3 + 24) = 0;
          v13 = v2[1];
          *v3 = v13;
          if (v13)
            *(_QWORD *)(v13 + 16) = v3;
          v2[2] = v3[2];
          *(_QWORD *)(v3[2] + 8 * (*(_QWORD *)v3[2] != (_QWORD)v3)) = v2;
          v2[1] = (uint64_t)v3;
          goto LABEL_27;
        }
      }
      else if (!v4 || (v6 = *((unsigned __int8 *)v4 + 24), v5 = v4 + 3, v6))
      {
        if ((uint64_t *)*v2 == a2)
        {
          v11 = a2[1];
          *v2 = v11;
          if (v11)
          {
            *(_QWORD *)(v11 + 16) = v2;
            v3 = (uint64_t *)v2[2];
          }
          a2[2] = (uint64_t)v3;
          *(_QWORD *)(v2[2] + 8 * (*(_QWORD *)v2[2] != (_QWORD)v2)) = a2;
          a2[1] = (uint64_t)v2;
          v2[2] = (uint64_t)a2;
          v3 = (uint64_t *)a2[2];
        }
        else
        {
          a2 = (uint64_t *)a2[2];
        }
        *((_BYTE *)a2 + 24) = 1;
        *((_BYTE *)v3 + 24) = 0;
        v2 = (uint64_t *)v3[1];
        v12 = *v2;
        v3[1] = *v2;
        if (v12)
          *(_QWORD *)(v12 + 16) = v3;
        v2[2] = v3[2];
        *(_QWORD *)(v3[2] + 8 * (*(_QWORD *)v3[2] != (_QWORD)v3)) = v2;
        *v2 = (uint64_t)v3;
LABEL_27:
        v3[2] = (uint64_t)v2;
        return result;
      }
      *((_BYTE *)v2 + 24) = 1;
      a2 = v3;
      *((_BYTE *)v3 + 24) = v3 == result;
      *v5 = 1;
    }
    while (v3 != result);
  }
  return result;
}

uint64_t *sub_1CC598CDC(uint64_t a1, unsigned int *a2, uint64_t a3, _DWORD **a4)
{
  uint64_t v5;
  uint64_t **v6;
  unsigned int v7;
  uint64_t *v8;
  unsigned int v9;
  uint64_t *v11[3];

  v6 = (uint64_t **)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
  {
    v7 = *a2;
    while (1)
    {
      while (1)
      {
        v8 = (uint64_t *)v5;
        v9 = *(_DWORD *)(v5 + 32);
        if (v7 >= v9)
          break;
        v5 = *v8;
        v6 = (uint64_t **)v8;
        if (!*v8)
          goto LABEL_10;
      }
      if (v9 >= v7)
        break;
      v5 = v8[1];
      if (!v5)
      {
        v6 = (uint64_t **)(v8 + 1);
        goto LABEL_10;
      }
    }
  }
  else
  {
    v8 = (uint64_t *)(a1 + 8);
LABEL_10:
    sub_1CC598DA4(a1, a4, (uint64_t)v11);
    sub_1CC598AF0((uint64_t **)a1, (uint64_t)v8, v6, v11[0]);
    v8 = v11[0];
    v11[0] = 0;
    sub_1CC598E14((uint64_t *)v11, 0);
  }
  return v8;
}

uint64_t sub_1CC598DA4@<X0>(uint64_t a1@<X0>, _DWORD **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5;
  _DWORD *v6;
  uint64_t result;

  v5 = a1 + 8;
  v6 = operator new(0x58uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  v6[8] = **a2;
  result = awd::MetricBuffer::MetricBuffer((uint64_t)(v6 + 10));
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_1CC598DFC(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_1CC598E14(v1, 0);
  _Unwind_Resume(a1);
}

void sub_1CC598E14(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *a1;
  *a1 = a2;
  if (v2)
  {
    if (*((_BYTE *)a1 + 16))
      awd::MetricBuffer::~MetricBuffer((awd::MetricBuffer *)(v2 + 40));
    operator delete((void *)v2);
  }
}

uint64_t **sub_1CC598E58(uint64_t **a1, unsigned int *a2, uint64_t a3)
{
  uint64_t *v5;
  uint64_t **v6;
  unsigned int v7;
  uint64_t **v8;
  unsigned int v9;
  char *v10;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    v7 = *a2;
    while (1)
    {
      while (1)
      {
        v8 = (uint64_t **)v5;
        v9 = *((_DWORD *)v5 + 8);
        if (v7 >= v9)
          break;
        v5 = *v8;
        v6 = v8;
        if (!*v8)
          goto LABEL_10;
      }
      if (v9 >= v7)
        break;
      v5 = v8[1];
      if (!v5)
      {
        v6 = v8 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v8 = a1 + 1;
LABEL_10:
    v10 = (char *)operator new(0x48uLL);
    *((_DWORD *)v10 + 8) = *(_DWORD *)a3;
    *(_OWORD *)(v10 + 40) = *(_OWORD *)(a3 + 8);
    *(_OWORD *)(v10 + 56) = *(_OWORD *)(a3 + 24);
    sub_1CC598AF0(a1, (uint64_t)v8, v6, (uint64_t *)v10);
    return (uint64_t **)v10;
  }
  return v8;
}

void *sub_1CC598F20(uint64_t a1, unint64_t a2)
{
  if (a2 >> 61)
    sub_1CC594B80();
  return operator new(8 * a2);
}

uint64_t sub_1CC598F54(uint64_t result, unsigned int *a2, uint64_t a3, uint64_t a4, char a5)
{
  unsigned int *v8;
  unsigned int *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unsigned int *v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int *v18;
  char v19;
  BOOL v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;

  v8 = (unsigned int *)result;
LABEL_2:
  v9 = v8;
LABEL_3:
  v10 = 1 - a4;
  while (2)
  {
    v8 = v9;
    v11 = v10;
    v12 = (char *)a2 - (char *)v9;
    v13 = ((char *)a2 - (char *)v9) >> 3;
    switch(v13)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v21 = *(a2 - 2);
        v22 = *v9;
        if (v21 < *v9 || v22 >= v21 && *(a2 - 1) < v9[1])
        {
          *v9 = v21;
          *(a2 - 2) = v22;
          v23 = v9[1];
          v9[1] = *(a2 - 1);
          *(a2 - 1) = v23;
        }
        return result;
      case 3uLL:
        return sub_1CC599434(v9, v9 + 2, a2 - 2);
      case 4uLL:
        return sub_1CC5999F0(v9, v9 + 2, v9 + 4, a2 - 2);
      case 5uLL:
        return sub_1CC599AF0(v9, v9 + 2, v9 + 4, v9 + 6, a2 - 2);
      default:
        if (v12 <= 191)
        {
          if ((a5 & 1) != 0)
            return (uint64_t)sub_1CC5992C8(v9, a2);
          else
            return (uint64_t)sub_1CC59939C(v9, a2);
        }
        if (v11 != 1)
        {
          v14 = v13 >> 1;
          v15 = &v9[2 * (v13 >> 1)];
          if ((unint64_t)v12 < 0x401)
          {
            sub_1CC599434(&v9[2 * (v13 >> 1)], v9, a2 - 2);
            if ((a5 & 1) != 0)
              goto LABEL_14;
          }
          else
          {
            sub_1CC599434(v9, &v9[2 * (v13 >> 1)], a2 - 2);
            sub_1CC599434(v9 + 2, v15 - 2, a2 - 4);
            sub_1CC599434(v9 + 4, &v9[2 * v14 + 2], a2 - 6);
            sub_1CC599434(v15 - 2, v15, &v9[2 * v14 + 2]);
            v16 = *(_QWORD *)v9;
            *(_QWORD *)v9 = *(_QWORD *)v15;
            *(_QWORD *)v15 = v16;
            if ((a5 & 1) != 0)
              goto LABEL_14;
          }
          v17 = *(v9 - 2);
          if (v17 >= *v9 && (*v9 < v17 || *(v9 - 1) >= v9[1]))
          {
            result = (uint64_t)sub_1CC599588(v9, a2);
            v9 = (unsigned int *)result;
            goto LABEL_19;
          }
LABEL_14:
          v18 = sub_1CC5996BC(v9, a2);
          if ((v19 & 1) == 0)
            goto LABEL_17;
          v20 = sub_1CC5997F8(v9, v18);
          v9 = v18 + 2;
          result = sub_1CC5997F8(v18 + 2, a2);
          if (!(_DWORD)result)
          {
            v10 = v11 + 1;
            if (v20)
              continue;
LABEL_17:
            result = sub_1CC598F54(v8, v18, a3, -v11, a5 & 1);
            v9 = v18 + 2;
LABEL_19:
            a5 = 0;
            a4 = -v11;
            goto LABEL_3;
          }
          a4 = -v11;
          a2 = v18;
          if (v20)
            return result;
          goto LABEL_2;
        }
        if (v9 != a2)
          return (uint64_t)sub_1CC599C44(v9, a2, a2, a3);
        return result;
    }
  }
}

unsigned int *sub_1CC5992C8(unsigned int *result, unsigned int *a2)
{
  unsigned int *v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int *v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int *v15;

  if (result != a2)
  {
    v2 = result + 2;
    if (result + 2 != a2)
    {
      v3 = 0;
      v4 = result;
      do
      {
        v5 = v4;
        v4 = v2;
        v6 = v5[2];
        v7 = *v5;
        if (v6 < *v5 || v7 >= v6 && v5[3] < v5[1])
        {
          v9 = v5[2];
          v8 = v5[3];
          v10 = v5[1];
          v5[2] = v7;
          v4[1] = v10;
          v11 = result;
          if (v5 != result)
          {
            v12 = v3;
            do
            {
              v13 = *(unsigned int *)((char *)result + v12 - 8);
              if (v13 <= v9)
              {
                if (v13 < v9)
                {
                  v11 = v5;
                  goto LABEL_17;
                }
                v11 = (unsigned int *)((char *)result + v12);
                v14 = *(unsigned int *)((char *)result + v12 - 4);
                if (v14 <= v8)
                  goto LABEL_17;
              }
              else
              {
                v14 = *(unsigned int *)((char *)result + v12 - 4);
              }
              v5 -= 2;
              v15 = (unsigned int *)((char *)result + v12);
              *v15 = v13;
              v15[1] = v14;
              v12 -= 8;
            }
            while (v12);
            v11 = result;
          }
LABEL_17:
          *v11 = v9;
          v11[1] = v8;
        }
        v2 = v4 + 2;
        v3 += 8;
      }
      while (v4 + 2 != a2);
    }
  }
  return result;
}

unsigned int *sub_1CC59939C(unsigned int *result, unsigned int *a2)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int *i;
  unsigned int v10;

  if (result != a2)
  {
    v2 = result + 2;
    if (result + 2 != a2)
    {
      v3 = result + 1;
      do
      {
        v4 = result;
        result = v2;
        v5 = v4[2];
        v6 = *v4;
        if (v5 < *v4 || v6 >= v5 && v4[3] < v4[1])
        {
          v7 = *result;
          v8 = result[1];
          for (i = v3; ; i -= 2)
          {
            v10 = *i;
            i[1] = v6;
            i[2] = v10;
            v6 = *(i - 3);
            if (v6 <= v7 && (v6 < v7 || *(i - 2) <= v8))
              break;
          }
          *(i - 1) = v7;
          *i = v8;
        }
        v2 = result + 2;
        v3 += 2;
      }
      while (result + 2 != a2);
    }
  }
  return result;
}

uint64_t sub_1CC599434(unsigned int *a1, unsigned int *a2, unsigned int *a3)
{
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  int *v6;
  int *v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  int *v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  int v17;

  v3 = *a2;
  v4 = *a1;
  if (*a2 >= *a1 && (v4 < v3 || a2[1] >= a1[1]))
  {
    v9 = *a3;
    if (*a3 >= v3 && (v3 < v9 || a3[1] >= a2[1]))
      return 0;
    *a2 = v9;
    *a3 = v3;
    v11 = (int *)(a2 + 1);
    v10 = a2[1];
    a2[1] = a3[1];
    a3[1] = v10;
    v12 = *a2;
    v13 = *a1;
    if (*a2 >= *a1 && (v13 < v12 || *v11 >= a1[1]))
      return 1;
    *a1 = v12;
    v6 = (int *)(a1 + 1);
    *a2 = v13;
    v8 = 2;
  }
  else
  {
    v5 = *a3;
    if (*a3 < v3 || v3 >= v5 && a3[1] < a2[1])
    {
      *a1 = v5;
      v6 = (int *)(a1 + 1);
      *a3 = v4;
      v7 = (int *)(a3 + 1);
      v8 = 1;
    }
    else
    {
      *a1 = v3;
      *a2 = v4;
      v14 = a1[1];
      a1[1] = a2[1];
      a2[1] = v14;
      v15 = *a3;
      v16 = *a2;
      if (*a3 >= *a2 && (v16 < v15 || a3[1] >= v14))
        return 1;
      *a2 = v15;
      *a3 = v16;
      v7 = (int *)(a3 + 1);
      v8 = 2;
      v6 = (int *)(a2 + 1);
    }
    v11 = v7;
  }
  v17 = *v6;
  *v6 = *v11;
  *v11 = v17;
  return v8;
}

unsigned int *sub_1CC599588(unsigned int *a1, unsigned int *a2)
{
  unsigned int v2;
  unsigned int v3;
  unsigned int v4;
  unsigned int *i;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  BOOL v14;

  v3 = *a1;
  v2 = a1[1];
  v4 = *(a2 - 2);
  if (v4 <= *a1 && (v4 < v3 || *(a2 - 1) <= v2))
  {
    for (i = a1 + 2; i < a2 && *i <= v3 && (*i < v3 || i[1] <= v2); i += 2)
      ;
  }
  else
  {
    i = a1;
    do
    {
      v7 = i[2];
      i += 2;
      v6 = v7;
    }
    while (v7 <= v3 && (v6 < v3 || i[1] <= v2));
  }
  if (i < a2)
  {
    for (a2 -= 2; v4 > v3 || v4 >= v3 && a2[1] > v2; a2 -= 2)
    {
      v8 = *(a2 - 2);
      v4 = v8;
    }
  }
  if (i < a2)
  {
    v9 = *i;
    v10 = *a2;
    do
    {
      *i = v10;
      *a2 = v9;
      v11 = i[1];
      i[1] = a2[1];
      a2[1] = v11;
      do
      {
        v12 = i[2];
        i += 2;
        v9 = v12;
      }
      while (v12 <= v3 && (v9 < v3 || i[1] <= v2));
      do
      {
        do
        {
          v13 = *(a2 - 2);
          a2 -= 2;
          v10 = v13;
          v14 = v13 >= v3;
        }
        while (v13 > v3);
      }
      while (v14 && a2[1] > v2);
    }
    while (i < a2);
  }
  if (i - 2 != a1)
  {
    *a1 = *(i - 2);
    a1[1] = *(i - 1);
  }
  *(i - 2) = v3;
  *(i - 1) = v2;
  return i;
}

unsigned int *sub_1CC5996BC(unsigned int *a1, unsigned int *a2)
{
  uint64_t v2;
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  unint64_t v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v12;
  unsigned int *v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;
  BOOL v17;
  unsigned int v18;

  v2 = 0;
  v3 = *a1;
  v4 = a1[1];
  while (1)
  {
    v5 = a1[v2 + 2];
    if (v5 >= v3 && (v5 > v3 || a1[v2 + 3] >= v4))
      break;
    v2 += 2;
  }
  v6 = (unint64_t)&a1[v2 + 2];
  if (v2 * 4)
  {
    do
    {
      v8 = *(a2 - 2);
      a2 -= 2;
      v7 = v8;
    }
    while (v8 >= v3 && (v7 > v3 || a2[1] >= v4));
  }
  else
  {
LABEL_19:
    if (v6 < (unint64_t)a2)
    {
      do
      {
        v10 = *(a2 - 2);
        a2 -= 2;
        v9 = v10;
        if (v10 < v3)
          break;
        if (v9 > v3)
          goto LABEL_19;
      }
      while (a2[1] >= v4 && v6 < (unint64_t)a2);
    }
  }
  if (v6 >= (unint64_t)a2)
  {
    v13 = (unsigned int *)v6;
  }
  else
  {
    v12 = *a2;
    v13 = (unsigned int *)v6;
    v14 = a2;
    do
    {
      *v13 = v12;
      *v14 = v5;
      v15 = v13[1];
      v13[1] = v14[1];
      v14[1] = v15;
      do
      {
        do
        {
          v16 = v13[2];
          v13 += 2;
          v5 = v16;
          v17 = v16 > v3;
        }
        while (v16 < v3);
      }
      while (!v17 && v13[1] < v4);
      do
      {
        v18 = *(v14 - 2);
        v14 -= 2;
        v12 = v18;
      }
      while (v18 >= v3 && (v12 > v3 || v14[1] >= v4));
    }
    while (v13 < v14);
  }
  if (v13 - 2 != a1)
  {
    *a1 = *(v13 - 2);
    a1[1] = *(v13 - 1);
  }
  *(v13 - 2) = v3;
  *(v13 - 1) = v4;
  return v13 - 2;
}

BOOL sub_1CC5997F8(unsigned int *a1, unsigned int *a2)
{
  uint64_t v4;
  _BOOL8 result;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int *v9;
  unsigned int *v10;
  uint64_t v11;
  int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int *v16;
  uint64_t v17;
  char *v18;
  unsigned int v19;
  unsigned int v20;

  v4 = ((char *)a2 - (char *)a1) >> 3;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = *(a2 - 2);
      v7 = *a1;
      if (v6 < *a1 || v7 >= v6 && *(a2 - 1) < a1[1])
      {
        *a1 = v6;
        *(a2 - 2) = v7;
        v8 = a1[1];
        a1[1] = *(a2 - 1);
        *(a2 - 1) = v8;
      }
      return result;
    case 3:
      sub_1CC599434(a1, a1 + 2, a2 - 2);
      return 1;
    case 4:
      sub_1CC5999F0(a1, a1 + 2, a1 + 4, a2 - 2);
      return 1;
    case 5:
      sub_1CC599AF0(a1, a1 + 2, a1 + 4, a1 + 6, a2 - 2);
      return 1;
    default:
      v9 = a1 + 4;
      sub_1CC599434(a1, a1 + 2, a1 + 4);
      v10 = a1 + 6;
      if (a1 + 6 == a2)
        return 1;
      v11 = 0;
      v12 = 0;
      break;
  }
  do
  {
    v13 = *v9;
    if (*v10 >= *v9 && (v13 < *v10 || v10[1] >= v9[1]))
      goto LABEL_22;
    v14 = *v10;
    v15 = v10[1];
    *v10 = v13;
    v10[1] = v9[1];
    v16 = a1;
    if (v9 == a1)
      goto LABEL_21;
    v17 = v11;
    while (1)
    {
      v18 = (char *)a1 + v17;
      v19 = *(unsigned int *)((char *)a1 + v17 + 8);
      if (v19 <= v14)
        break;
      v20 = *((_DWORD *)v18 + 3);
LABEL_18:
      v9 -= 2;
      *((_DWORD *)v18 + 4) = v19;
      *(unsigned int *)((char *)a1 + v17 + 20) = v20;
      v17 -= 8;
      if (v17 == -16)
      {
        v16 = a1;
        goto LABEL_21;
      }
    }
    if (v19 < v14)
    {
      v16 = v9;
      goto LABEL_21;
    }
    v20 = *(unsigned int *)((char *)a1 + v17 + 12);
    if (v20 > v15)
      goto LABEL_18;
    v16 = (unsigned int *)((char *)a1 + v17 + 16);
LABEL_21:
    *v16 = v14;
    v16[1] = v15;
    if (++v12 == 8)
      return v10 + 2 == a2;
LABEL_22:
    v9 = v10;
    v11 += 8;
    v10 += 2;
  }
  while (v10 != a2);
  return 1;
}

uint64_t sub_1CC5999F0(unsigned int *a1, unsigned int *a2, unsigned int *a3, unsigned int *a4)
{
  uint64_t result;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;

  result = sub_1CC599434(a1, a2, a3);
  v9 = *a4;
  v10 = *a3;
  if (*a4 < *a3 || v10 >= v9 && a4[1] < a3[1])
  {
    *a3 = v9;
    *a4 = v10;
    v11 = a3[1];
    a3[1] = a4[1];
    a4[1] = v11;
    v12 = *a3;
    v13 = *a2;
    if (*a3 < *a2 || v13 >= v12 && a3[1] < a2[1])
    {
      *a2 = v12;
      *a3 = v13;
      v14 = a2[1];
      a2[1] = a3[1];
      a3[1] = v14;
      v15 = *a2;
      v16 = *a1;
      if (*a2 < *a1 || v16 >= v15 && a2[1] < a1[1])
      {
        *a1 = v15;
        *a2 = v16;
        v17 = a1[1];
        a1[1] = a2[1];
        a2[1] = v17;
      }
    }
  }
  return result;
}

uint64_t sub_1CC599AF0(unsigned int *a1, unsigned int *a2, unsigned int *a3, unsigned int *a4, unsigned int *a5)
{
  uint64_t result;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;

  result = sub_1CC5999F0(a1, a2, a3, a4);
  v11 = *a5;
  v12 = *a4;
  if (*a5 < *a4 || v12 >= v11 && a5[1] < a4[1])
  {
    *a4 = v11;
    *a5 = v12;
    v13 = a4[1];
    a4[1] = a5[1];
    a5[1] = v13;
    v14 = *a4;
    v15 = *a3;
    if (*a4 < *a3 || v15 >= v14 && a4[1] < a3[1])
    {
      *a3 = v14;
      *a4 = v15;
      v16 = a3[1];
      a3[1] = a4[1];
      a4[1] = v16;
      v17 = *a3;
      v18 = *a2;
      if (*a3 < *a2 || v18 >= v17 && a3[1] < a2[1])
      {
        *a2 = v17;
        *a3 = v18;
        v19 = a2[1];
        a2[1] = a3[1];
        a3[1] = v19;
        v20 = *a2;
        v21 = *a1;
        if (*a2 < *a1 || v21 >= v20 && a2[1] < a1[1])
        {
          *a1 = v20;
          *a2 = v21;
          v22 = a1[1];
          a1[1] = a2[1];
          a2[1] = v22;
        }
      }
    }
  }
  return result;
}

unsigned int *sub_1CC599C44(unsigned int *a1, unsigned int *a2, unsigned int *a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unsigned int *v12;
  unsigned int *v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  unsigned int *v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int *v22;

  if (a1 != a2)
  {
    v8 = (char *)a2 - (char *)a1;
    v9 = ((char *)a2 - (char *)a1) >> 3;
    if ((char *)a2 - (char *)a1 >= 9)
    {
      v10 = (unint64_t)(v9 - 2) >> 1;
      v11 = v10 + 1;
      v12 = &a1[2 * v10];
      do
      {
        sub_1CC599DBC((uint64_t)a1, a4, v9, v12);
        v12 -= 2;
        --v11;
      }
      while (v11);
    }
    v13 = a2;
    if (a2 != a3)
    {
      v14 = a2;
      do
      {
        v15 = *v14;
        v16 = *a1;
        if (*v14 < *a1 || v16 >= v15 && v14[1] < a1[1])
        {
          *v14 = v16;
          *a1 = v15;
          v17 = v14[1];
          v14[1] = a1[1];
          a1[1] = v17;
          sub_1CC599DBC((uint64_t)a1, a4, v9, a1);
        }
        v14 += 2;
      }
      while (v14 != a3);
      v13 = a3;
    }
    if (v8 >= 9)
    {
      v18 = (unint64_t)v8 >> 3;
      v19 = a2 - 2;
      do
      {
        v21 = *a1;
        v20 = a1[1];
        v22 = sub_1CC599F00(a1, a4, v18);
        if (v19 == v22)
        {
          *v22 = v21;
          v22[1] = v20;
        }
        else
        {
          *v22 = *v19;
          v22[1] = v19[1];
          *v19 = v21;
          v19[1] = v20;
          sub_1CC599F94((uint64_t)a1, (uint64_t)(v22 + 2), a4, ((char *)(v22 + 2) - (char *)a1) >> 3);
        }
        v19 -= 2;
      }
      while (v18-- > 2);
    }
    return v13;
  }
  return a3;
}

uint64_t sub_1CC599DBC(uint64_t result, uint64_t a2, uint64_t a3, unsigned int *a4)
{
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int *v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;

  if (a3 >= 2)
  {
    v4 = (uint64_t)a4 - result;
    v5 = (unint64_t)(a3 - 2) >> 1;
    if (v5 >= ((uint64_t)a4 - result) >> 3)
    {
      v6 = v4 >> 2;
      v7 = (v4 >> 2) + 1;
      v8 = (unsigned int *)(result + 8 * v7);
      v9 = v6 + 2;
      if (v9 < a3)
      {
        v10 = v8[2];
        if (*v8 < v10 || v10 >= *v8 && *(_DWORD *)(result + 8 * v7 + 4) < v8[3])
        {
          v8 += 2;
          v7 = v9;
        }
      }
      v11 = *v8;
      if (*v8 >= *a4 && (*a4 < v11 || v8[1] >= a4[1]))
      {
        v12 = *a4;
        v13 = a4[1];
        *a4 = v11;
        a4[1] = v8[1];
        if (v5 >= v7)
        {
          while (1)
          {
            v15 = 2 * v7;
            v7 = (2 * v7) | 1;
            v14 = (unsigned int *)(result + 8 * v7);
            v16 = v15 + 2;
            if (v16 < a3)
            {
              v17 = v14[2];
              if (*v14 < v17 || v17 >= *v14 && *(_DWORD *)(result + 8 * v7 + 4) < v14[3])
              {
                v14 += 2;
                v7 = v16;
              }
            }
            v18 = *v14;
            if (*v14 < v12 || v18 <= v12 && v14[1] < v13)
              break;
            *v8 = v18;
            v8[1] = v14[1];
            v8 = v14;
            if (v5 < v7)
              goto LABEL_22;
          }
        }
        v14 = v8;
LABEL_22:
        *v14 = v12;
        v14[1] = v13;
      }
    }
  }
  return result;
}

unsigned int *sub_1CC599F00(unsigned int *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;

  v3 = 0;
  v4 = a3 - 2;
  if (a3 < 2)
    v4 = a3 - 1;
  v5 = v4 >> 1;
  do
  {
    v6 = result;
    v7 = v3 + 1;
    result += 2 * v3 + 2;
    v8 = 2 * v3;
    v3 = (2 * v3) | 1;
    v9 = v8 + 2;
    if (v9 < a3)
    {
      v10 = result[2];
      if (*result < v10 || v10 >= *result && v6[2 * v7 + 1] < result[3])
      {
        result += 2;
        v3 = v9;
      }
    }
    *v6 = *result;
    v6[1] = result[1];
  }
  while (v3 <= v5);
  return result;
}

uint64_t sub_1CC599F94(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  unint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int *v11;
  unint64_t v12;
  unsigned int v13;
  unsigned int v14;

  v4 = a4 - 2;
  if (a4 >= 2)
  {
    v5 = v4 >> 1;
    v6 = (unsigned int *)(result + 8 * (v4 >> 1));
    v7 = *v6;
    v8 = *(_DWORD *)(a2 - 8);
    if (*v6 < v8 || v8 >= v7 && *(_DWORD *)(result + 8 * v5 + 4) < *(_DWORD *)(a2 - 4))
    {
      v9 = *(_DWORD *)(a2 - 8);
      v10 = *(_DWORD *)(a2 - 4);
      *(_DWORD *)(a2 - 8) = v7;
      *(_DWORD *)(a2 - 4) = v6[1];
      if (v4 >= 2)
      {
        while (1)
        {
          v12 = v5 - 1;
          v5 = (v5 - 1) >> 1;
          v11 = (unsigned int *)(result + 8 * v5);
          v13 = *v11;
          if (*v11 >= v9)
          {
            if (v13 > v9)
              break;
            v14 = *(_DWORD *)(result + 8 * v5 + 4);
            if (v14 >= v10)
              break;
          }
          else
          {
            v14 = v11[1];
          }
          *v6 = v13;
          v6[1] = v14;
          v6 = (unsigned int *)(result + 8 * v5);
          if (v12 <= 1)
            goto LABEL_12;
        }
      }
      v11 = v6;
LABEL_12:
      *v11 = v9;
      v11[1] = v10;
    }
  }
  return result;
}

uint64_t *sub_1CC59A03C(uint64_t *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    awd::AWDServerConnection::~AWDServerConnection((awd::AWDServerConnection *)(v2 + 24));
    v3 = *(std::__shared_weak_count **)(v2 + 16);
    if (v3)
      std::__shared_weak_count::__release_weak(v3);
    MEMORY[0x1D17AD544](v2, 0xA0C4079E112F9);
  }
  return a1;
}

uint64_t *sub_1CC59A094(uint64_t *a1)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t *v9;

  v9 = a1;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
  {
    v3 = *a1;
    v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      v5 = v4;
      if (a1[1])
        awd::AWDMetricBuffer::setConfiguration_sync(v3, (uint64_t)(a1 + 3));
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
  return sub_1CC59A03C((uint64_t *)&v9);
}

void sub_1CC59A128(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  unint64_t *v4;
  unint64_t v5;
  va_list va;

  va_start(va, a2);
  v4 = (unint64_t *)(v2 + 8);
  do
    v5 = __ldaxr(v4);
  while (__stlxr(v5 - 1, v4));
  if (!v5)
    sub_1CC5C31E0(v2);
  sub_1CC59A03C((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_1CC59A15C(uint64_t a1, unsigned int *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t *result;
  uint64_t *v7;
  unsigned int v8;
  BOOL v9;
  uint64_t **v10;
  uint64_t v11;
  uint64_t *v12;

  v2 = (uint64_t *)(a1 + 8);
  v3 = *(uint64_t **)(a1 + 8);
  if (!v3)
    return v2;
  v4 = *a2;
  while (1)
  {
    v5 = *((_DWORD *)v3 + 8);
    if (v4 >= v5)
      break;
    v2 = v3;
LABEL_7:
    v3 = (uint64_t *)*v3;
    if (!v3)
      return v2;
  }
  if (v5 < v4)
  {
    ++v3;
    goto LABEL_7;
  }
  v7 = (uint64_t *)*v3;
  result = v3;
  if (*v3)
  {
    result = v3;
    do
    {
      v8 = *((_DWORD *)v7 + 8);
      v9 = v8 >= v4;
      if (v8 >= v4)
        v10 = (uint64_t **)v7;
      else
        v10 = (uint64_t **)(v7 + 1);
      if (v9)
        result = v7;
      v7 = *v10;
    }
    while (*v10);
  }
  v11 = v3[1];
  if (v11)
  {
    do
    {
      if (v4 >= *(_DWORD *)(v11 + 32))
        v12 = (uint64_t *)(v11 + 8);
      else
        v12 = (uint64_t *)v11;
      v11 = *v12;
    }
    while (*v12);
  }
  return result;
}

uint64_t *sub_1CC59A1F4(uint64_t *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = *(std::__shared_weak_count **)(v2 + 8);
    if (v3)
      std::__shared_weak_count::__release_weak(v3);
    MEMORY[0x1D17AD544](v2, 0x1020C406C4767B9);
  }
  return a1;
}

uint64_t *sub_1CC59A244(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v8;

  v8 = a1;
  v2 = *(std::__shared_weak_count **)(a1 + 8);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      if (*(_QWORD *)a1)
        awd::AWDMetricSubmitter::doneWithMetrics(*(_QWORD **)a1, *(_DWORD *)(a1 + 16), *(_QWORD *)(a1 + 20), *(_DWORD *)(a1 + 28));
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v6 = __ldaxr(p_shared_owners);
      while (__stlxr(v6 - 1, p_shared_owners));
      if (!v6)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
  return sub_1CC59A1F4(&v8);
}

void sub_1CC59A2D0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  unint64_t *v4;
  unint64_t v5;
  va_list va;

  va_start(va, a2);
  v4 = (unint64_t *)(v2 + 8);
  do
    v5 = __ldaxr(v4);
  while (__stlxr(v5 - 1, v4));
  if (!v5)
    sub_1CC5C31E0(v2);
  sub_1CC59A1F4((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1CC59A304(uint64_t a1)
{
  awd::AWDMetricBuffer::_trigger(**(_QWORD **)(a1 + 32), **(_QWORD **)(*(_QWORD *)(a1 + 32) + 8), *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 8), *(dispatch_object_t **)(*(_QWORD *)(a1 + 32) + 16));
}

void sub_1CC59A31C(uint64_t a1)
{
  awd::AWDMetricBuffer::_debugLog(**(awd::AWDMetricBuffer ***)(a1 + 32));
}

void sub_1CC59A328(std::__shared_weak_count *this)
{
  std::__shared_weak_count::__release_weak(this);
}

uint64_t sub_1CC59A330(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
}

void awd::AWDServerFacade::create(const void *a1@<X0>, const void *a2@<X1>, const void *a3@<X2>, const void *a4@<X3>, const void *a5@<X4>, const void *a6@<X5>, _QWORD *a7@<X8>)
{
  _QWORD *v14;
  _QWORD *v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  _QWORD v22[5];
  std::__shared_weak_count *v23;

  v14 = (_QWORD *)operator new();
  awd::AWDServerFacade::AWDServerFacade(v14, a1, a2, a3, a4, a5, a6);
  sub_1CC59BC9C(a7, v14);
  v22[0] = MEMORY[0x1E0C809B0];
  v22[1] = 1174405120;
  v22[2] = sub_1CC59A48C;
  v22[3] = &unk_1E886BC68;
  v15 = (_QWORD *)*a7;
  v16 = (std::__shared_weak_count *)a7[1];
  v22[4] = *a7;
  v23 = v16;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v18 = __ldxr(p_shared_owners);
    while (__stxr(v18 + 1, p_shared_owners));
  }
  sub_1CC59BED8(v15, (uint64_t)v22);
  v19 = v23;
  if (v23)
  {
    v20 = (unint64_t *)&v23->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
}

void sub_1CC59A464(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1D17AD544](v1, 0xA0C405BD117BDLL);
  _Unwind_Resume(a1);
}

void sub_1CC59A48C(uint64_t a1)
{
  awd::AWDServerFacade::initConnection_sync(*(awd::AWDServerFacade **)(a1 + 32));
}

void awd::AWDServerFacade::initConnection_sync(awd::AWDServerFacade *this)
{
  xpc_object_t v2;
  void *mach_service;
  xpc_object_t v4;
  NSObject *v5;
  NSObject *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_weak_owners;
  unint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  dispatch_object_t object;
  xpc_object_t v15;
  uint8_t buf[8];
  std::__shared_weak_count *v17;

  v2 = xpc_null_create();
  mach_service = xpc_connection_create_mach_service("com.apple.awdd", *((dispatch_queue_t *)this + 2), 2uLL);
  if (!mach_service)
    mach_service = xpc_null_create();
  v4 = xpc_null_create();
  xpc_release(v2);
  xpc_release(v4);
  if (MEMORY[0x1D17ADA60](mach_service) == MEMORY[0x1E0C812E0])
  {
    v15 = mach_service;
    if (mach_service)
      xpc_retain(mach_service);
    else
      v15 = xpc_null_create();
    v6 = *((_QWORD *)this + 2);
    object = v6;
    if (v6)
      dispatch_retain(v6);
    sub_1CC59C014(buf, this);
    v7 = v17;
    v12 = *(_QWORD *)buf;
    v13 = v17;
    if (v17)
    {
      p_shared_weak_owners = (unint64_t *)&v17->__shared_weak_owners_;
      do
        v9 = __ldxr(p_shared_weak_owners);
      while (__stxr(v9 + 1, p_shared_weak_owners));
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
    sub_1CC59B0C0((_xpc_connection_s **)this + 5, &v15, &object, &v12);
    if (v13)
      std::__shared_weak_count::__release_weak(v13);
    if (object)
      dispatch_release(object);
    xpc_release(v15);
    v15 = 0;
  }
  else
  {
    v5 = *((_QWORD *)this + 4);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1CC590000, v5, OS_LOG_TYPE_DEFAULT, "client:#E Failed to xpc create connection.", buf, 2u);
    }
  }
  xpc_release(mach_service);
}

void sub_1CC59A628(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, dispatch_object_t object, xpc_object_t a12)
{
  void *v12;

  if (a10)
    std::__shared_weak_count::__release_weak(a10);
  if (object)
    dispatch_release(object);
  xpc_release(a12);
  xpc_release(v12);
  _Unwind_Resume(a1);
}

uint64_t sub_1CC59A6A0(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(result + 40) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void sub_1CC59A6C4(uint64_t a1)
{
  awd::AWDServerConnection::~AWDServerConnection((awd::AWDServerConnection *)(a1 + 32));
}

_QWORD *awd::AWDServerFacade::AWDServerFacade(_QWORD *a1, const void *a2, const void *a3, const void *a4, const void *a5, const void *a6, const void *a7)
{
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;

  sub_1CC59A7E8(a1, "AWDServerFacade", QOS_CLASS_DEFAULT, "server");
  a1[5] = xpc_null_create();
  if (a2)
    v14 = _Block_copy(a2);
  else
    v14 = 0;
  a1[6] = v14;
  if (a3)
    v15 = _Block_copy(a3);
  else
    v15 = 0;
  a1[7] = v15;
  if (a4)
    v16 = _Block_copy(a4);
  else
    v16 = 0;
  a1[8] = v16;
  if (a5)
    v17 = _Block_copy(a5);
  else
    v17 = 0;
  a1[9] = v17;
  if (a6)
    v18 = _Block_copy(a6);
  else
    v18 = 0;
  a1[10] = v18;
  if (a7)
    v19 = _Block_copy(a7);
  else
    v19 = 0;
  a1[11] = v19;
  return a1;
}

_QWORD *sub_1CC59A7E8(_QWORD *a1, const char *a2, dispatch_qos_class_t a3, const char *a4)
{
  dispatch_object_t object;

  object = 0;
  sub_1CC59C088(a1, a2, a3, &object);
  if (object)
    dispatch_release(object);
  ctu::OsLogLogger::OsLogLogger((ctu::OsLogLogger *)(a1 + 4), "com.apple.awd.framework", a4);
  return a1;
}

void sub_1CC59A844(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, dispatch_object_t object)
{
  _QWORD *v10;

  sub_1CC594A2C(v10);
  _Unwind_Resume(a1);
}

void awd::AWDServerFacade::~AWDServerFacade(awd::AWDServerFacade *this)
{
  const void *v2;
  const void *v3;
  const void *v4;
  const void *v5;
  const void *v6;
  const void *v7;

  v2 = (const void *)*((_QWORD *)this + 11);
  if (v2)
    _Block_release(v2);
  v3 = (const void *)*((_QWORD *)this + 10);
  if (v3)
    _Block_release(v3);
  v4 = (const void *)*((_QWORD *)this + 9);
  if (v4)
    _Block_release(v4);
  v5 = (const void *)*((_QWORD *)this + 8);
  if (v5)
    _Block_release(v5);
  v6 = (const void *)*((_QWORD *)this + 7);
  if (v6)
    _Block_release(v6);
  v7 = (const void *)*((_QWORD *)this + 6);
  if (v7)
    _Block_release(v7);
  MEMORY[0x1D17AD2EC]((char *)this + 40);
  MEMORY[0x1D17AD2BC]((char *)this + 32);
  sub_1CC594A2C(this);
}

uint64_t awd::AWDServerFacade::handleServerError(uint64_t result, _QWORD *a2)
{
  NSObject *v3;
  uint8_t v4[16];

  if (*a2 == MEMORY[0x1E0C81260] && MEMORY[0x1E0C81258] != MEMORY[0x1E0C81260])
  {
    v3 = *(NSObject **)(result + 32);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v4 = 0;
      _os_log_impl(&dword_1CC590000, v3, OS_LOG_TYPE_DEFAULT, "client:#E XPC Connection invalidated; possibly a sandbox block?",
        v4,
        2u);
    }
    return ctu::XpcClientHelper::setServer();
  }
  return result;
}

void awd::AWDServerFacade::handleMessage(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  int v5;
  NSObject *v6;
  unsigned int ComponentId;
  uint64_t v8;
  char v9;
  NSObject *v10;
  wireless_diagnostics::google::protobuf::MessageLite *v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  int v18;
  uint64_t Trigger;
  int v20;
  int v21;
  NSObject *v22;
  int ControlMessageType;
  NSObject *v24;
  int v25;
  int CollectPII;
  int CollectLocation;
  int AnalyticsShimMode;
  NSObject *v29;
  NSObject *v30;
  int TimerId;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  int v35;
  wireless_diagnostics::google::protobuf::MessageLite *v36;
  std::__shared_weak_count *v37;
  unsigned int DeviceConfigurationId;
  unsigned int v39;
  xpc_object_t v40;
  std::__shared_weak_count *v41;
  xpc_object_t object;
  std::__shared_weak_count *v43;
  int v44;
  __int16 v45;
  int v46;
  uint8_t buf[8];
  const char *v48;
  int v49;
  __int16 v50;
  int v51;
  uint8_t v52[4];
  unsigned int v53;
  uint64_t v54;

  v54 = *MEMORY[0x1E0C80C00];
  v4 = *(NSObject **)(a1 + 32);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
  {
    *(_QWORD *)buf = a2;
    v48 = "AWDMessageType";
    sub_1CC595210((uint64_t)buf, &v40);
    v35 = xpc::dyn_cast_or_default();
    LODWORD(object) = 67109120;
    HIDWORD(object) = v35;
    _os_log_debug_impl(&dword_1CC590000, v4, OS_LOG_TYPE_DEBUG, "client:#D libawd got message of type %d", (uint8_t *)&object, 8u);
    xpc_release(v40);
  }
  fflush((FILE *)*MEMORY[0x1E0C80C20]);
  *(_QWORD *)buf = a2;
  v48 = "AWDMessageType";
  sub_1CC595210((uint64_t)buf, &object);
  v5 = xpc::dyn_cast_or_default();
  xpc_release(object);
  sub_1CC5AE3CC(&v40);
  switch(v5)
  {
    case 0:
      v6 = *(NSObject **)(a1 + 32);
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_1CC590000, v6, OS_LOG_TYPE_DEFAULT, "client:#E Got an unkown message from AWDD!", buf, 2u);
      }
      break;
    case 4:
      awd::AWDSetComponentConfigurationMessage::AWDSetComponentConfigurationMessage(buf, a2);
      ComponentId = awd::AWDSetComponentConfigurationMessage::getComponentId((awd::AWDSetComponentConfigurationMessage *)buf);
      v39 = ComponentId;
      DeviceConfigurationId = awd::AWDSetComponentConfigurationMessage::getDeviceConfigurationId((awd::AWDSetComponentConfigurationMessage *)buf);
      awd::AWDSetComponentConfigurationMessage::getComponentConfiguration((uint64_t)buf, &object);
      v8 = operator new();
      awd::profile::ComponentConfiguration::ComponentConfiguration(v8);
      sub_1CC59C14C(&v36, v8);
      v9 = wireless_diagnostics::google::protobuf::MessageLite::ParseFromArray(v36, *(const void **)object);
      v10 = *(NSObject **)(a1 + 32);
      if ((v9 & 1) == 0 && os_log_type_enabled(*(os_log_t *)(a1 + 32), OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)v52 = 0;
        _os_log_impl(&dword_1CC590000, v10, OS_LOG_TYPE_DEFAULT, "client:#E Failed to parse component configuration.", v52, 2u);
        v10 = *(NSObject **)(a1 + 32);
      }
      v11 = v36;
      *((_DWORD *)v36 + 23) |= 1u;
      *((_DWORD *)v11 + 14) = ComponentId;
      if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)v52 = 67109120;
        v53 = ComponentId;
        _os_log_impl(&dword_1CC590000, v10, OS_LOG_TYPE_INFO, "client:#I Sending component configuration to component: 0x%x", v52, 8u);
      }
      sub_1CC59B01C((uint64_t *)(a1 + 48), &DeviceConfigurationId, &v39, (uint64_t *)&v36);
      v12 = v37;
      if (v37)
      {
        p_shared_owners = (unint64_t *)&v37->__shared_owners_;
        do
          v14 = __ldaxr(p_shared_owners);
        while (__stlxr(v14 - 1, p_shared_owners));
        if (!v14)
        {
          ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
          std::__shared_weak_count::__release_weak(v12);
        }
      }
      v15 = v43;
      if (v43)
      {
        v16 = (unint64_t *)&v43->__shared_owners_;
        do
          v17 = __ldaxr(v16);
        while (__stlxr(v17 - 1, v16));
        if (!v17)
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
        }
      }
      awd::AWDSetComponentConfigurationMessage::~AWDSetComponentConfigurationMessage((awd::AWDSetComponentConfigurationMessage *)buf);
      break;
    case 6:
      awd::AWDTriggerMessage::AWDTriggerMessage(buf, a2);
      v18 = awd::AWDTriggerMessage::getComponentId((awd::AWDTriggerMessage *)buf);
      Trigger = awd::AWDTriggerMessage::getTrigger((awd::AWDTriggerMessage *)buf);
      v21 = v20;
      v22 = *(NSObject **)(a1 + 32);
      if (os_log_type_enabled(v22, OS_LOG_TYPE_INFO))
      {
        object = (xpc_object_t)__PAIR64__(Trigger, 67109888);
        LOWORD(v43) = 1024;
        *(_DWORD *)((char *)&v43 + 2) = HIDWORD(Trigger);
        HIWORD(v43) = 1024;
        v44 = v21;
        v45 = 1024;
        v46 = v18;
        _os_log_impl(&dword_1CC590000, v22, OS_LOG_TYPE_INFO, "client:#I Sending Trigger(cid=0x%x, trid=0x%x, sid=%u) to component: 0x%x", (uint8_t *)&object, 0x1Au);
      }
      (*(void (**)(void))(*(_QWORD *)(a1 + 56) + 16))();
      break;
    case 7:
      awd::AWDControlMessage::AWDControlMessage(buf, a2);
      ControlMessageType = awd::AWDControlMessage::getControlMessageType((awd::AWDControlMessage *)buf);
      v24 = *(NSObject **)(a1 + 32);
      if (os_log_type_enabled(v24, OS_LOG_TYPE_INFO))
      {
        LODWORD(object) = 67109120;
        HIDWORD(object) = ControlMessageType;
        _os_log_impl(&dword_1CC590000, v24, OS_LOG_TYPE_INFO, "client:#I Got control message of type %d", (uint8_t *)&object, 8u);
      }
      if (ControlMessageType == 4)
        (*(void (**)(void))(*(_QWORD *)(a1 + 64) + 16))();
      break;
    case 8:
      awd::AWDPIILocationMessage::AWDPIILocationMessage(&object, a2);
      v25 = awd::AWDPIILocationMessage::getComponentId((awd::AWDPIILocationMessage *)&object);
      CollectPII = awd::AWDPIILocationMessage::getCollectPII((awd::AWDPIILocationMessage *)&object);
      CollectLocation = awd::AWDPIILocationMessage::getCollectLocation((awd::AWDPIILocationMessage *)&object);
      AnalyticsShimMode = awd::AWDPIILocationMessage::getAnalyticsShimMode((awd::AWDPIILocationMessage *)&object);
      v29 = *(NSObject **)(a1 + 32);
      if (os_log_type_enabled(v29, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 67109888;
        *(_DWORD *)&buf[4] = v25;
        LOWORD(v48) = 1024;
        *(_DWORD *)((char *)&v48 + 2) = CollectPII;
        HIWORD(v48) = 1024;
        v49 = CollectLocation;
        v50 = 1024;
        v51 = AnalyticsShimMode;
        _os_log_impl(&dword_1CC590000, v29, OS_LOG_TYPE_INFO, "client:#I In switch branch for pii/location message msg. cid=0x%x collectPII is %d, collectLocation is %d, shim is %d", buf, 0x1Au);
      }
      (*(void (**)(void))(*(_QWORD *)(a1 + 72) + 16))();
      break;
    case 13:
      awd::AWDTimerMessage::AWDTimerMessage(buf, a2);
      v30 = *(NSObject **)(a1 + 32);
      if (os_log_type_enabled(v30, OS_LOG_TYPE_INFO))
      {
        TimerId = awd::AWDTimerMessage::getTimerId((awd::AWDTimerMessage *)buf);
        LODWORD(object) = 67109120;
        HIDWORD(object) = TimerId;
        _os_log_impl(&dword_1CC590000, v30, OS_LOG_TYPE_INFO, "client:#I Received Timer(tid=0x%x) notification message", (uint8_t *)&object, 8u);
      }
      awd::AWDTimerMessage::getTimerId((awd::AWDTimerMessage *)buf);
      (*(void (**)(void))(*(_QWORD *)(a1 + 88) + 16))();
      break;
    default:
      break;
  }
  v32 = v41;
  if (v41)
  {
    v33 = (unint64_t *)&v41->__shared_owners_;
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
}

void sub_1CC59AF38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, xpc_object_t object, uint64_t a14, xpc_object_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  if (a2)
    sub_1CC592AD0(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_1CC59B01C(uint64_t *a1, unsigned int *a2, unsigned int *a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;

  v4 = *a1;
  v5 = *a2;
  v6 = *a3;
  v7 = (std::__shared_weak_count *)a4[1];
  v13 = *a4;
  v14 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t *))(v4 + 16))(v4, v5, v6, &v13);
  v10 = v14;
  if (v14)
  {
    v11 = (unint64_t *)&v14->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
}

void sub_1CC59B0AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  awd::AWDServerConnection::~AWDServerConnection((awd::AWDServerConnection *)&a9);
  _Unwind_Resume(a1);
}

void sub_1CC59B0C0(_xpc_connection_s **a1, xpc_object_t *a2, dispatch_queue_t *a3, uint64_t *a4)
{
  _xpc_connection_s *v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  unint64_t *p_shared_weak_owners;
  unint64_t v11;
  _QWORD handler[6];
  std::__shared_weak_count *v13;
  _xpc_connection_s *v14;
  xpc_object_t v15;

  v15 = *a2;
  if (v15)
    xpc_retain(v15);
  else
    v15 = xpc_null_create();
  ctu::XpcClientHelper::setServer_internal();
  xpc_release(v15);
  v15 = 0;
  if (MEMORY[0x1D17ADA60](*a1) == MEMORY[0x1E0C812E0])
  {
    v7 = *a1;
    handler[0] = MEMORY[0x1E0C809B0];
    handler[1] = 1174405120;
    handler[2] = sub_1CC59C244;
    handler[3] = &unk_1E886C2F8;
    v9 = *a4;
    v8 = (std::__shared_weak_count *)a4[1];
    handler[4] = a1;
    handler[5] = v9;
    v13 = v8;
    if (v8)
    {
      p_shared_weak_owners = (unint64_t *)&v8->__shared_weak_owners_;
      do
        v11 = __ldxr(p_shared_weak_owners);
      while (__stxr(v11 + 1, p_shared_weak_owners));
    }
    v14 = v7;
    xpc_connection_set_event_handler(v7, handler);
    xpc_connection_set_target_queue(v7, *a3);
    xpc_connection_resume(v7);
    if (v13)
      std::__shared_weak_count::__release_weak(v13);
  }
}

void sub_1CC59B1C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16)
{
  if (a16)
    std::__shared_weak_count::__release_weak(a16);
  _Unwind_Resume(exception_object);
}

BOOL awd::AWDServerFacade::register_sync(awd::AWDServerFacade *this, int a2, int a3, int a4)
{
  NSObject *v8;
  _BOOL8 v9;
  pid_t v10;
  uint64_t v11;
  NSObject *v12;
  xpc_object_t message;
  uint8_t v15[4];
  int v16;
  __int16 v17;
  int v18;
  __int16 v19;
  int v20;
  uint8_t buf[4];
  int v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  if (MEMORY[0x1D17ADA60](*((_QWORD *)this + 5)) == MEMORY[0x1E0C812E0])
  {
    v10 = getpid();
    awd::AWDRegistrationMessage::AWDRegistrationMessage((uint64_t)buf, a2, a3, v10, a4);
    awd::AWDRegistrationMessage::createXpcMessage((awd::AWDRegistrationMessage *)buf, &message);
    v11 = MEMORY[0x1D17ADA60](message);
    v9 = v11 == MEMORY[0x1E0C812F8];
    if (v11 == MEMORY[0x1E0C812F8])
    {
      v12 = *((_QWORD *)this + 4);
      if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)v15 = 67109632;
        v16 = a2;
        v17 = 1024;
        v18 = a3;
        v19 = 1024;
        v20 = a4;
        _os_log_impl(&dword_1CC590000, v12, OS_LOG_TYPE_INFO, "client:#I Sending message to register with dcid %d, component 0x%x, needsconfig: %d", v15, 0x14u);
      }
      xpc_connection_send_message(*((xpc_connection_t *)this + 5), message);
    }
    xpc_release(message);
  }
  else
  {
    v8 = *((_QWORD *)this + 4);
    v9 = 0;
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109120;
      v22 = a3;
      _os_log_impl(&dword_1CC590000, v8, OS_LOG_TYPE_DEFAULT, "client:#E xpc conenction NULL while registering as component 0x%x", buf, 8u);
      return 0;
    }
  }
  return v9;
}

void sub_1CC59B38C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
  if (a2)
    sub_1CC592AD0(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t awd::AWDServerFacade::registerAs(awd::AWDServerFacade *this, int a2, int a3, char a4)
{
  _QWORD v5[5];
  int v6;
  int v7;
  char v8;

  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 0x40000000;
  v5[2] = sub_1CC59B418;
  v5[3] = &unk_1E886BFD0;
  v5[4] = this;
  v6 = a2;
  v7 = a3;
  v8 = a4;
  sub_1CC59BED8(this, (uint64_t)v5);
  return 1;
}

BOOL sub_1CC59B418(uint64_t a1)
{
  return awd::AWDServerFacade::register_sync(*(awd::AWDServerFacade **)(a1 + 32), *(_DWORD *)(a1 + 40), *(_DWORD *)(a1 + 44), *(unsigned __int8 *)(a1 + 48));
}

void awd::AWDServerFacade::tryInitialize(awd::AWDServerFacade *this)
{
  _QWORD *v2;
  NSObject *v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  _QWORD *v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  uint64_t v15;

  sub_1CC59C014(&v12, this);
  v2 = (_QWORD *)operator new();
  *v2 = this;
  v3 = *((_QWORD *)this + 2);
  v4 = v12;
  v5 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  v8 = (_QWORD *)operator new();
  *v8 = v2;
  v8[1] = v4;
  v8[2] = v5;
  v14 = 0;
  v15 = 0;
  dispatch_async_f(v3, v8, (dispatch_function_t)sub_1CC59C4A8);
  sub_1CC59C45C(&v14);
  sub_1CC59C45C(&v15);
  v9 = v13;
  if (v13)
  {
    v10 = (unint64_t *)&v13->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
}

void awd::AWDServerFacade::sendMessage(_QWORD *a1, xpc_object_t *a2)
{
  xpc_object_t v3;
  _QWORD *v4;
  xpc_object_t v5;
  NSObject *v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  _QWORD *v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  uint64_t v17;
  uint64_t v18;

  v3 = *a2;
  if (*a2)
    xpc_retain(*a2);
  else
    v3 = xpc_null_create();
  sub_1CC59C014(&v15, a1);
  v4 = (_QWORD *)operator new();
  *v4 = a1;
  v4[1] = v3;
  v5 = xpc_null_create();
  v6 = a1[2];
  v7 = v15;
  v8 = v16;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  v11 = (_QWORD *)operator new();
  *v11 = v4;
  v11[1] = v7;
  v11[2] = v8;
  v17 = 0;
  v18 = 0;
  dispatch_async_f(v6, v11, (dispatch_function_t)sub_1CC59C524);
  sub_1CC59C45C(&v17);
  sub_1CC59C45C(&v18);
  v12 = v16;
  if (v16)
  {
    v13 = (unint64_t *)&v16->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  xpc_release(v5);
}

void awd::AWDServerFacade::flush(_QWORD *a1, NSObject **a2)
{
  NSObject *v3;
  _QWORD v4[5];
  dispatch_group_t group;

  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 1174405120;
  v4[2] = sub_1CC59B6FC;
  v4[3] = &unk_1E886C108;
  v3 = *a2;
  v4[4] = a1;
  group = v3;
  if (v3)
  {
    dispatch_retain(v3);
    dispatch_group_enter(v3);
  }
  sub_1CC59BED8(a1, (uint64_t)v4);
  if (group)
  {
    dispatch_group_leave(group);
    if (group)
      dispatch_release(group);
  }
}

void sub_1CC59B6FC(uint64_t a1)
{
  uint64_t v2;
  _xpc_connection_s *v3;
  NSObject *v4;
  _QWORD barrier[4];
  dispatch_group_t group;

  v2 = *(_QWORD *)(a1 + 32);
  if (MEMORY[0x1D17ADA60](*(_QWORD *)(v2 + 40)) == MEMORY[0x1E0C812E0])
  {
    v3 = *(_xpc_connection_s **)(v2 + 40);
    barrier[0] = MEMORY[0x1E0C809B0];
    barrier[1] = 1174405120;
    barrier[2] = nullsub_4;
    barrier[3] = &unk_1E886C068;
    v4 = *(NSObject **)(a1 + 40);
    group = v4;
    if (v4)
    {
      dispatch_retain(v4);
      dispatch_group_enter(v4);
    }
    xpc_connection_send_barrier(v3, barrier);
    if (group)
    {
      dispatch_group_leave(group);
      if (group)
        dispatch_release(group);
    }
  }
}

void sub_1CC59B7B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, dispatch_group_t group)
{
  if (group)
  {
    dispatch_group_leave(group);
    dispatch_release(group);
  }
  _Unwind_Resume(exception_object);
}

void sub_1CC59B7D8(uint64_t a1, uint64_t a2)
{
  NSObject *v3;
  NSObject *v4;

  v3 = *(NSObject **)(a2 + 32);
  *(_QWORD *)(a1 + 32) = v3;
  if (v3)
  {
    dispatch_retain(v3);
    v4 = *(NSObject **)(a1 + 32);
    if (v4)
      dispatch_group_enter(v4);
  }
}

void sub_1CC59B818(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;

  v2 = *(NSObject **)(a1 + 32);
  if (v2)
  {
    dispatch_group_leave(v2);
    v3 = *(NSObject **)(a1 + 32);
    if (v3)
      dispatch_release(v3);
  }
}

void sub_1CC59B854(uint64_t a1, uint64_t a2)
{
  NSObject *v3;
  NSObject *v4;

  v3 = *(NSObject **)(a2 + 40);
  *(_QWORD *)(a1 + 40) = v3;
  if (v3)
  {
    dispatch_retain(v3);
    v4 = *(NSObject **)(a1 + 40);
    if (v4)
      dispatch_group_enter(v4);
  }
}

void sub_1CC59B894(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;

  v2 = *(NSObject **)(a1 + 40);
  if (v2)
  {
    dispatch_group_leave(v2);
    v3 = *(NSObject **)(a1 + 40);
    if (v3)
      dispatch_release(v3);
  }
}

void awd::AWDServerFacade::getMetadata(awd::AWDServerFacade *this, unsigned int a2, BOOL a3)
{
  NSObject *v6;
  xpc_object_t v7;
  xpc_object_t v8;
  xpc_object_t v9;
  _xpc_connection_s *v10;
  NSObject *v11;
  _QWORD v12[5];
  unsigned int v13;
  xpc_object_t v14;
  xpc_object_t v15;
  xpc_object_t v16;
  xpc_object_t object;
  uint8_t buf[8];
  const char *v19;
  xpc_object_t v20;
  xpc_object_t v21;
  xpc_object_t v22;

  if (MEMORY[0x1D17ADA60](*((_QWORD *)this + 5)) != MEMORY[0x1E0C812E0])
  {
    v6 = *((_QWORD *)this + 4);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1CC590000, v6, OS_LOG_TYPE_DEFAULT, "client:#E CoreAnalytics shim: Error! getMetadataBase: XpcConnection is NULL", buf, 2u);
    }
    return;
  }
  v7 = xpc_dictionary_create(0, 0, 0);
  v8 = v7;
  if (v7)
  {
    v22 = v7;
  }
  else
  {
    v8 = xpc_null_create();
    v22 = v8;
    if (!v8)
    {
      v9 = xpc_null_create();
      v8 = 0;
      goto LABEL_11;
    }
  }
  if (MEMORY[0x1D17ADA60](v8) != MEMORY[0x1E0C812F8])
  {
    v9 = xpc_null_create();
LABEL_11:
    v22 = v9;
    goto LABEL_12;
  }
  xpc_retain(v8);
LABEL_12:
  xpc_release(v8);
  v20 = xpc_int64_create(12);
  if (!v20)
    v20 = xpc_null_create();
  *(_QWORD *)buf = &v22;
  v19 = "AWDMessageType";
  sub_1CC5954D0((uint64_t)buf, &v20, &v21);
  xpc_release(v21);
  v21 = 0;
  xpc_release(v20);
  v20 = 0;
  v16 = xpc_BOOL_create(a3);
  if (!v16)
    v16 = xpc_null_create();
  *(_QWORD *)buf = &v22;
  v19 = "needs_base";
  sub_1CC5954D0((uint64_t)buf, &v16, &object);
  xpc_release(object);
  object = 0;
  xpc_release(v16);
  v16 = 0;
  v14 = xpc_int64_create(a2);
  if (!v14)
    v14 = xpc_null_create();
  *(_QWORD *)buf = &v22;
  v19 = "cid";
  sub_1CC5954D0((uint64_t)buf, &v14, &v15);
  xpc_release(v15);
  v15 = 0;
  xpc_release(v14);
  v14 = 0;
  v10 = (_xpc_connection_s *)*((_QWORD *)this + 5);
  v11 = *((_QWORD *)this + 2);
  v12[0] = MEMORY[0x1E0C809B0];
  v12[1] = 0x40000000;
  v12[2] = sub_1CC59BB74;
  v12[3] = &unk_1E886C138;
  v12[4] = this;
  v13 = a2;
  xpc_connection_send_message_with_reply(v10, v22, v11, v12);
  xpc_release(v22);
}

void sub_1CC59BB2C(_Unwind_Exception *a1)
{
  uint64_t v1;

  xpc_release(*(xpc_object_t *)(v1 - 40));
  _Unwind_Resume(a1);
}

void sub_1CC59BB74(uint64_t a1, xpc_object_t object)
{
  uint64_t v3;
  xpc_object_t objecta;

  v3 = *(_QWORD *)(a1 + 32);
  objecta = object;
  if (object)
    xpc_retain(object);
  else
    objecta = xpc_null_create();
  sub_1CC59BBF0((uint64_t *)(v3 + 80), &objecta, (unsigned int *)(a1 + 40));
  xpc_release(objecta);
}

void sub_1CC59BBD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
  xpc_release(object);
  _Unwind_Resume(a1);
}

void sub_1CC59BBF0(uint64_t *a1, void **a2, unsigned int *a3)
{
  uint64_t v4;
  void *v5;
  xpc_object_t object;

  v4 = *a1;
  v5 = *a2;
  object = v5;
  if (v5 && MEMORY[0x1D17ADA60](v5) == MEMORY[0x1E0C812F8])
    xpc_retain(v5);
  else
    object = xpc_null_create();
  (*(void (**)(uint64_t, xpc_object_t *, _QWORD))(v4 + 16))(v4, &object, *a3);
  xpc_release(object);
}

void sub_1CC59BC80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
  xpc_release(object);
  _Unwind_Resume(a1);
}

_QWORD *sub_1CC59BC9C(_QWORD *a1, _QWORD *a2)
{
  _QWORD *v4;

  *a1 = a2;
  v4 = (_QWORD *)operator new();
  *v4 = &off_1E886BA28;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  sub_1CC59BD34((uint64_t)a1, a2, (uint64_t)a2);
  return a1;
}

void sub_1CC59BD00(void *a1)
{
  dispatch_queue_t *v1;

  __cxa_begin_catch(a1);
  dispatch_barrier_async_f(v1[2], v1, (dispatch_function_t)sub_1CC59BEAC);
  __cxa_rethrow();
}

void sub_1CC59BD20(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_1CC59BD34(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t *p_shared_weak_owners;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v11;

  if (a2)
  {
    v4 = (std::__shared_weak_count *)a2[1];
    if (!v4 || v4->__shared_owners_ == -1)
    {
      v5 = *(std::__shared_weak_count **)(a1 + 8);
      if (v5)
      {
        p_shared_owners = (unint64_t *)&v5->__shared_owners_;
        do
          v7 = __ldxr(p_shared_owners);
        while (__stxr(v7 + 1, p_shared_owners));
        p_shared_weak_owners = (unint64_t *)&v5->__shared_weak_owners_;
        do
          v9 = __ldxr(p_shared_weak_owners);
        while (__stxr(v9 + 1, p_shared_weak_owners));
        v4 = (std::__shared_weak_count *)a2[1];
      }
      *a2 = a3;
      a2[1] = v5;
      if (v4)
        std::__shared_weak_count::__release_weak(v4);
      if (v5)
      {
        v10 = (unint64_t *)&v5->__shared_owners_;
        do
          v11 = __ldaxr(v10);
        while (__stlxr(v11 - 1, v10));
        if (!v11)
        {
          ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
          std::__shared_weak_count::__release_weak(v5);
        }
      }
    }
  }
}

void sub_1CC59BDE8(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1D17AD544);
}

void sub_1CC59BE0C(uint64_t a1)
{
  dispatch_barrier_async_f(*(dispatch_queue_t *)(*(_QWORD *)(a1 + 24) + 16), *(void **)(a1 + 24), (dispatch_function_t)sub_1CC59BEAC);
}

uint64_t sub_1CC59BE20(uint64_t a1, uint64_t a2)
{
  if (sub_1CC59BE60(a2, (uint64_t)&unk_1E886AB38))
    return a1 + 24;
  else
    return 0;
}

BOOL sub_1CC59BE60(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a2 + 8);
  if (v2 == v3)
    return 1;
  if ((v3 & v2) < 0 != __OFSUB__(v2, v3))
    return strcmp((const char *)(v2 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL)) == 0;
  return 0;
}

awd::AWDServerFacade *sub_1CC59BEAC(awd::AWDServerFacade *result)
{
  if (result)
  {
    awd::AWDServerFacade::~AWDServerFacade(result);
    JUMPOUT(0x1D17AD544);
  }
  return result;
}

void sub_1CC59BED8(_QWORD *a1, uint64_t a2)
{
  NSObject *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  _QWORD block[6];
  std::__shared_weak_count *v14;
  uint64_t v15;
  std::__shared_weak_count *v16;

  sub_1CC59C014(&v15, a1);
  v4 = a1[2];
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 1174405120;
  block[2] = sub_1CC59BFDC;
  block[3] = &unk_1E886C2C8;
  block[5] = v15;
  v14 = v16;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  block[4] = a2;
  dispatch_async(v4, block);
  v7 = v14;
  if (v14)
  {
    v8 = (unint64_t *)&v14->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  v10 = v16;
  if (v16)
  {
    v11 = (unint64_t *)&v16->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
}

uint64_t sub_1CC59BFDC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

uint64_t sub_1CC59BFE8(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 48) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void sub_1CC59C00C(uint64_t a1)
{
  awd::AWDServerConnection::~AWDServerConnection((awd::AWDServerConnection *)(a1 + 40));
}

_QWORD *sub_1CC59C014(_QWORD *a1, _QWORD *a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;

  v3 = (std::__shared_weak_count *)a2[1];
  *a1 = *a2;
  if (!v3)
  {
    a1[1] = 0;
LABEL_5:
    sub_1CC59C054();
  }
  v4 = std::__shared_weak_count::lock(v3);
  a1[1] = v4;
  if (!v4)
    goto LABEL_5;
  return a1;
}

void sub_1CC59C054()
{
  _QWORD *exception;

  exception = __cxa_allocate_exception(8uLL);
  *exception = MEMORY[0x1E0DE4F80] + 16;
  __cxa_throw(exception, MEMORY[0x1E0DE4E28], MEMORY[0x1E0DE43F0]);
}

_QWORD *sub_1CC59C088(_QWORD *a1, const char *a2, dispatch_qos_class_t qos_class, NSObject **a4)
{
  NSObject *v7;
  NSObject *v8;
  NSObject *v9;
  NSObject *v10;

  v7 = dispatch_queue_attr_make_with_qos_class(0, qos_class, 0);
  v8 = *a4;
  if (v8)
  {
    dispatch_retain(v8);
    dispatch_retain(v8);
    v9 = dispatch_queue_create_with_target_V2(a2, v7, v8);
  }
  else
  {
    v9 = dispatch_queue_create(a2, v7);
  }
  v10 = v9;
  *a1 = 0;
  a1[1] = 0;
  a1[2] = v9;
  if (v9)
    dispatch_retain(v9);
  a1[3] = v8;
  if (v8)
    dispatch_retain(v8);
  if (v10)
    dispatch_release(v10);
  if (v8)
  {
    dispatch_release(v8);
    dispatch_release(v8);
  }
  return a1;
}

_QWORD *sub_1CC59C14C(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = a2;
  v4 = (_QWORD *)operator new();
  *v4 = &unk_1E886BAD0;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_1CC59C1A4(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

void sub_1CC59C1C8(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1D17AD544);
}

uint64_t sub_1CC59C1EC(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_1CC59C204(uint64_t a1, uint64_t a2)
{
  if (sub_1CC59BE60(a2, (uint64_t)&unk_1E886A990))
    return a1 + 24;
  else
    return 0;
}

void sub_1CC59C244(_QWORD *a1, xpc_object_t a2)
{
  std::__shared_weak_count *v3;
  _QWORD *v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  xpc_object_t v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  xpc_object_t v14;
  xpc_object_t object[2];
  std::__shared_weak_count *v16;

  v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    v5 = (_QWORD *)a1[4];
    v6 = std::__shared_weak_count::lock(v3);
    v16 = v6;
    if (v6)
    {
      v7 = v6;
      v8 = (void *)a1[5];
      object[1] = v8;
      if (!v8)
      {
LABEL_21:
        p_shared_owners = (unint64_t *)&v7->__shared_owners_;
        do
          v13 = __ldaxr(p_shared_owners);
        while (__stlxr(v13 - 1, p_shared_owners));
        if (!v13)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
        return;
      }
      v9 = MEMORY[0x1D17ADA60](a2);
      v10 = MEMORY[0x1E0C812F8];
      if (v9 != MEMORY[0x1E0C812F8])
      {
        if (v9 == MEMORY[0x1E0C81310] && *v5 == a1[7])
        {
          v14 = a2;
          if (a2)
          {
            xpc_retain(a2);
          }
          else
          {
            a2 = xpc_null_create();
            v14 = a2;
          }
          awd::AWDServerFacade::handleServerError((uint64_t)v8, &v14);
          xpc_release(a2);
          v14 = 0;
        }
        goto LABEL_21;
      }
      if (a2)
      {
        xpc_retain(a2);
        object[0] = a2;
      }
      else
      {
        a2 = xpc_null_create();
        object[0] = a2;
        if (!a2)
        {
          v11 = xpc_null_create();
          a2 = 0;
          goto LABEL_16;
        }
      }
      if (MEMORY[0x1D17ADA60](a2) == v10)
      {
        xpc_retain(a2);
        goto LABEL_17;
      }
      v11 = xpc_null_create();
LABEL_16:
      object[0] = v11;
LABEL_17:
      awd::AWDServerFacade::handleMessage((uint64_t)v8, (uint64_t)object);
      xpc_release(object[0]);
      object[0] = 0;
      xpc_release(a2);
      v7 = v16;
      if (!v16)
        return;
      goto LABEL_21;
    }
  }
}

void sub_1CC59C3C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object, char a11)
{
  void *v11;

  xpc_release(v11);
  awd::AWDServerConnection::~AWDServerConnection((awd::AWDServerConnection *)&a11);
  _Unwind_Resume(a1);
}

uint64_t sub_1CC59C428(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 48) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 16);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void sub_1CC59C44C(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

uint64_t *sub_1CC59C45C(uint64_t *a1)
{
  uint64_t v2;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    awd::AWDServerConnection::~AWDServerConnection((awd::AWDServerConnection *)(v2 + 8));
    MEMORY[0x1D17AD544](v2, 0x60C40A44E5E0CLL);
  }
  return a1;
}

uint64_t *sub_1CC59C4A8(awd::AWDServerFacade ***a1)
{
  awd::AWDServerFacade **v1;
  awd::AWDServerFacade ***v3;

  v3 = a1;
  v1 = *a1;
  awd::AWDServerFacade::initConnection_sync(**a1);
  MEMORY[0x1D17AD544](v1, 0x20C4093837F09);
  return sub_1CC59C45C((uint64_t *)&v3);
}

void sub_1CC59C4F8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  MEMORY[0x1D17AD544](v2, 0x20C4093837F09);
  sub_1CC59C45C((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_1CC59C524(xpc_object_t **a1)
{
  xpc_object_t *v1;
  xpc_object_t v2;
  NSObject *v3;
  xpc_object_t **v5;
  xpc_object_t *v6;
  uint8_t buf[16];

  v1 = *a1;
  v5 = a1;
  v6 = v1;
  v2 = *v1;
  if (MEMORY[0x1D17ADA60](*((_QWORD *)*v1 + 5)) == MEMORY[0x1E0C812E0])
  {
    xpc_connection_send_message(*((xpc_connection_t *)v2 + 5), v1[1]);
  }
  else
  {
    v3 = *((_QWORD *)v2 + 4);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1CC590000, v3, OS_LOG_TYPE_DEFAULT, "client:#E Error! sendMessage: XpcConnection is NULL", buf, 2u);
    }
  }
  sub_1CC59C5E0((uint64_t *)&v6);
  return sub_1CC59C45C((uint64_t *)&v5);
}

void sub_1CC59C5C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  sub_1CC59C5E0(&a10);
  sub_1CC59C45C(&a9);
  _Unwind_Resume(a1);
}

uint64_t *sub_1CC59C5E0(uint64_t *a1)
{
  uint64_t v2;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    xpc_release(*(xpc_object_t *)(v2 + 8));
    *(_QWORD *)(v2 + 8) = 0;
    MEMORY[0x1D17AD544](v2, 0xE0C402B90B96ALL);
  }
  return a1;
}

__n128 awd::AWDSetComponentConfigurationMessage::AWDSetComponentConfigurationMessage(__n128 *a1, unsigned __int32 a2, unsigned __int32 a3, __n128 *a4)
{
  __n128 result;

  a1->n128_u64[0] = (unint64_t)&off_1E886AEE0;
  a1->n128_u32[2] = a2;
  a1->n128_u32[3] = a3;
  result = *a4;
  a1[1] = *a4;
  a4->n128_u64[0] = 0;
  a4->n128_u64[1] = 0;
  return result;
}

{
  __n128 result;

  a1->n128_u64[0] = (unint64_t)&off_1E886AEE0;
  a1->n128_u32[2] = a2;
  a1->n128_u32[3] = a3;
  result = *a4;
  a1[1] = *a4;
  a4->n128_u64[0] = 0;
  a4->n128_u64[1] = 0;
  return result;
}

uint64_t awd::AWDSetComponentConfigurationMessage::AWDSetComponentConfigurationMessage(uint64_t a1, xpc_object_t *a2)
{
  _QWORD *v4;
  _QWORD *v5;
  int v6;
  char *data;
  size_t length[2];
  xpc_object_t object;

  *(_QWORD *)a1 = &off_1E886AEE0;
  *(_QWORD *)(a1 + 8) = 0;
  v4 = (_QWORD *)(a1 + 16);
  v5 = (_QWORD *)operator new();
  v5[1] = 0;
  v5[2] = 0;
  *v5 = 0;
  sub_1CC59CABC(v4, (uint64_t)v5);
  if (MEMORY[0x1D17ADA60](*a2) == MEMORY[0x1E0C812F8])
  {
    length[0] = (size_t)a2;
    length[1] = (size_t)"AWDMessageType";
    sub_1CC595210((uint64_t)length, &object);
    v6 = xpc::dyn_cast_or_default();
    xpc_release(object);
    if (v6 == 4)
    {
      length[0] = 0;
      data = (char *)xpc_dictionary_get_data(*a2, "AWDMessageComponentConfigurationBuffer", length);
      sub_1CC59CBF4((_QWORD *)*v4, data, &data[length[0]], length[0]);
      *(_DWORD *)(a1 + 12) = xpc_dictionary_get_int64(*a2, "AWDMessageComponentId");
      *(_DWORD *)(a1 + 8) = xpc_dictionary_get_int64(*a2, "AWDMessageDeviceConfigurationId");
    }
  }
  return a1;
}

void sub_1CC59C78C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, xpc_object_t object)
{
  awd::AWDServerConnection *v12;

  xpc_release(object);
  awd::AWDServerConnection::~AWDServerConnection(v12);
  _Unwind_Resume(a1);
}

void awd::AWDSetComponentConfigurationMessage::~AWDSetComponentConfigurationMessage(awd::AWDSetComponentConfigurationMessage *this)
{
  *(_QWORD *)this = &off_1E886AEE0;
  awd::AWDServerConnection::~AWDServerConnection((awd::AWDSetComponentConfigurationMessage *)((char *)this + 16));
}

{
  *(_QWORD *)this = &off_1E886AEE0;
  awd::AWDServerConnection::~AWDServerConnection((awd::AWDSetComponentConfigurationMessage *)((char *)this + 16));
}

{
  *(_QWORD *)this = &off_1E886AEE0;
  awd::AWDServerConnection::~AWDServerConnection((awd::AWDSetComponentConfigurationMessage *)((char *)this + 16));
  JUMPOUT(0x1D17AD544);
}

uint64_t awd::AWDSetComponentConfigurationMessage::getComponentId(awd::AWDSetComponentConfigurationMessage *this)
{
  return *((unsigned int *)this + 3);
}

uint64_t awd::AWDSetComponentConfigurationMessage::getDeviceConfigurationId(awd::AWDSetComponentConfigurationMessage *this)
{
  return *((unsigned int *)this + 2);
}

uint64_t awd::AWDSetComponentConfigurationMessage::getComponentConfiguration@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(this + 24);
  *a2 = *(_QWORD *)(this + 16);
  a2[1] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return this;
}

void awd::AWDSetComponentConfigurationMessage::createXpcMessage(awd::AWDSetComponentConfigurationMessage *this@<X0>, _QWORD *a2@<X8>)
{
  xpc_object_t v4;
  xpc_object_t v5;
  xpc_object_t v6;
  uint64_t v7;
  xpc_object_t v8;
  xpc_object_t v9;
  xpc_object_t v10;
  xpc_object_t v11;
  xpc_object_t v12;
  xpc_object_t object;
  _QWORD *v14;
  const char *v15;
  xpc_object_t v16;
  xpc_object_t v17;

  v4 = xpc_dictionary_create(0, 0, 0);
  v5 = v4;
  if (v4)
  {
    *a2 = v4;
  }
  else
  {
    v5 = xpc_null_create();
    *a2 = v5;
    if (!v5)
    {
      v6 = xpc_null_create();
      v5 = 0;
      goto LABEL_8;
    }
  }
  if (MEMORY[0x1D17ADA60](v5) == MEMORY[0x1E0C812F8])
  {
    xpc_retain(v5);
    goto LABEL_9;
  }
  v6 = xpc_null_create();
LABEL_8:
  *a2 = v6;
LABEL_9:
  xpc_release(v5);
  v16 = xpc_int64_create(4);
  if (!v16)
    v16 = xpc_null_create();
  v14 = a2;
  v15 = "AWDMessageType";
  sub_1CC5954D0((uint64_t)&v14, &v16, &v17);
  xpc_release(v17);
  v17 = 0;
  xpc_release(v16);
  v16 = 0;
  v12 = xpc_int64_create(*((unsigned int *)this + 3));
  if (!v12)
    v12 = xpc_null_create();
  v14 = a2;
  v15 = "AWDMessageComponentId";
  sub_1CC5954D0((uint64_t)&v14, &v12, &object);
  xpc_release(object);
  object = 0;
  xpc_release(v12);
  v12 = 0;
  v10 = xpc_int64_create(*((unsigned int *)this + 2));
  if (!v10)
    v10 = xpc_null_create();
  v14 = a2;
  v15 = "AWDMessageDeviceConfigurationId";
  sub_1CC5954D0((uint64_t)&v14, &v10, &v11);
  xpc_release(v11);
  v11 = 0;
  xpc_release(v10);
  v10 = 0;
  v7 = *((_QWORD *)this + 2);
  if (v7)
  {
    v8 = xpc_data_create(*(const void **)v7, *(_QWORD *)(v7 + 8) - *(_QWORD *)v7);
    if (!v8)
      v8 = xpc_null_create();
    v14 = a2;
    v15 = "AWDMessageComponentConfigurationBuffer";
    sub_1CC5954D0((uint64_t)&v14, &v8, &v9);
    xpc_release(v9);
    v9 = 0;
    xpc_release(v8);
  }
}

_QWORD *sub_1CC59CABC(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = a2;
  v4 = (_QWORD *)operator new();
  *v4 = &unk_1E886BB08;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_1CC59CB1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;

  a10 = 0;
  if (v10)
    sub_1CC59CBAC((uint64_t)&a10, v10);
  _Unwind_Resume(exception_object);
}

void sub_1CC59CB40(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1D17AD544);
}

void sub_1CC59CB64(uint64_t a1)
{
  sub_1CC59CBAC(a1 + 24, *(_QWORD *)(a1 + 24));
}

uint64_t sub_1CC59CB6C(uint64_t a1, uint64_t a2)
{
  if (sub_1CC59BE60(a2, (uint64_t)&unk_1E886A9A8))
    return a1 + 24;
  else
    return 0;
}

void sub_1CC59CBAC(uint64_t a1, uint64_t a2)
{
  void *v2;

  if (a2)
  {
    v2 = *(void **)a2;
    if (*(_QWORD *)a2)
    {
      *(_QWORD *)(a2 + 8) = v2;
      operator delete(v2);
    }
    JUMPOUT(0x1D17AD544);
  }
}

_QWORD *sub_1CC59CBF4(_QWORD *result, char *__src, char *a3, unint64_t a4)
{
  _QWORD *v7;
  unint64_t v8;
  char *v9;
  uint64_t v10;
  size_t v11;
  _BYTE *v12;
  size_t v13;
  char *v14;
  char *v15;
  size_t v16;

  v7 = result;
  v8 = result[2];
  v9 = (char *)*result;
  if (v8 - *result < a4)
  {
    if (v9)
    {
      result[1] = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if ((a4 & 0x8000000000000000) != 0)
      sub_1CC592ABC();
    v10 = 2 * v8;
    if (2 * v8 <= a4)
      v10 = a4;
    if (v8 >= 0x3FFFFFFFFFFFFFFFLL)
      v11 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    result = sub_1CC596BD4(v7, v11);
    v9 = (char *)v7[1];
    goto LABEL_17;
  }
  v12 = (_BYTE *)result[1];
  v13 = v12 - v9;
  if (v12 - v9 >= a4)
  {
LABEL_17:
    v16 = a3 - __src;
    if (v16)
      result = memmove(v9, __src, v16);
    v15 = &v9[v16];
    goto LABEL_20;
  }
  v14 = &__src[v13];
  if (v12 != v9)
  {
    result = memmove((void *)*result, __src, v13);
    v9 = (char *)v7[1];
  }
  if (a3 != v14)
    result = memmove(v9, v14, a3 - v14);
  v15 = &v9[a3 - v14];
LABEL_20:
  v7[1] = v15;
  return result;
}

uint64_t awd::MetricBuffer::MetricBuffer(uint64_t this)
{
  *(_DWORD *)this = 0;
  *(_QWORD *)(this + 8) = 0;
  *(_QWORD *)(this + 32) = 0;
  *(_QWORD *)(this + 40) = 0;
  *(_QWORD *)(this + 24) = 0;
  return this;
}

{
  *(_DWORD *)this = 0;
  *(_QWORD *)(this + 8) = 0;
  *(_QWORD *)(this + 32) = 0;
  *(_QWORD *)(this + 40) = 0;
  *(_QWORD *)(this + 24) = 0;
  return this;
}

uint64_t awd::MetricBuffer::MetricBuffer(uint64_t result, int a2, uint64_t a3)
{
  *(_DWORD *)result = a2;
  *(_QWORD *)(result + 8) = a3;
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)(result + 40) = 0;
  *(_QWORD *)(result + 24) = 0;
  return result;
}

{
  *(_DWORD *)result = a2;
  *(_QWORD *)(result + 8) = a3;
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)(result + 40) = 0;
  *(_QWORD *)(result + 24) = 0;
  return result;
}

void awd::MetricBuffer::~MetricBuffer(awd::MetricBuffer *this)
{
  void **v1;

  v1 = (void **)((char *)this + 24);
  sub_1CC59D564(&v1);
}

{
  void **v1;

  v1 = (void **)((char *)this + 24);
  sub_1CC59D564(&v1);
}

_DWORD *awd::MetricBuffer::setMaxCount(_DWORD *this, int a2)
{
  *this = a2;
  return this;
}

uint64_t awd::MetricBuffer::setMaxTimeInSeconds(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 8) = a2;
  return result;
}

unsigned int *awd::MetricBuffer::addCount(unsigned int *this, unsigned int a2)
{
  unsigned int v2;

  v2 = *this;
  if (*this <= a2)
    v2 = a2;
  *this = v2;
  return this;
}

uint64_t awd::MetricBuffer::addTimeInSeconds(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  if (a2 > v2)
    v2 = a2;
  *(_QWORD *)(result + 8) = v2 & ~(v2 >> 63);
  return result;
}

uint64_t awd::MetricBuffer::getLastSubmitted(awd::MetricBuffer *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 3);
  if (v1 == *((_QWORD *)this + 4))
    return 0;
  else
    return *(_QWORD *)v1;
}

void awd::MetricBuffer::buffer(uint64_t a1, uint64_t *a2)
{
  _BOOL8 v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int **v11;
  int **v12;
  NSObject *v13;
  int v14;
  unint64_t v15;
  uint64_t v16;
  _BOOL8 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int **v25;
  int **v26;
  NSObject *v27;
  int v28;
  unint64_t v29;
  uint64_t v30;
  int v31;
  int v32;
  __int16 v33;
  uint64_t v34;
  __int16 v35;
  unint64_t v36;
  __int16 v37;
  int v38;
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  sub_1CC59D080((uint64_t *)(a1 + 24), *(uint64_t **)(a1 + 24), a2);
  v3 = os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEBUG);
  if (v3)
    sub_1CC5C3234(v3, v4, v5, v6, v7, v8, v9, v10);
  v11 = *(int ***)(a1 + 24);
  v12 = *(int ***)(a1 + 32);
  if (v11 != v12)
  {
    v13 = MEMORY[0x1E0C81028];
    do
    {
      if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
      {
        v14 = **v11;
        v15 = *((_QWORD *)*v11 + 1);
        v16 = *((_QWORD *)*v11 + 3) - *((_QWORD *)*v11 + 2);
        v31 = 67109888;
        v32 = v14;
        v33 = 2048;
        v34 = v16;
        v35 = 2048;
        v36 = v15 / 0x3E8;
        v37 = 1024;
        v38 = v15 % 0x3E8;
        _os_log_debug_impl(&dword_1CC590000, v13, OS_LOG_TYPE_DEBUG, "metric.buffer:#D   - Metric: 0x%x %zd bytes (%llu.%03u seconds since epoch)", (uint8_t *)&v31, 0x22u);
      }
      ++v11;
    }
    while (v11 != v12);
  }
  awd::MetricBuffer::_deleteOldMetrics((uint64_t **)a1);
  v17 = os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEBUG);
  if (v17)
    sub_1CC5C31FC(v17, v18, v19, v20, v21, v22, v23, v24);
  v25 = *(int ***)(a1 + 24);
  v26 = *(int ***)(a1 + 32);
  if (v25 != v26)
  {
    v27 = MEMORY[0x1E0C81028];
    do
    {
      if (os_log_type_enabled(v27, OS_LOG_TYPE_DEBUG))
      {
        v28 = **v25;
        v29 = *((_QWORD *)*v25 + 1);
        v30 = *((_QWORD *)*v25 + 3) - *((_QWORD *)*v25 + 2);
        v31 = 67109888;
        v32 = v28;
        v33 = 2048;
        v34 = v30;
        v35 = 2048;
        v36 = v29 / 0x3E8;
        v37 = 1024;
        v38 = v29 % 0x3E8;
        _os_log_debug_impl(&dword_1CC590000, v27, OS_LOG_TYPE_DEBUG, "metric.buffer:#D   - Metric: 0x%x %zd bytes (%llu.%03u seconds since epoch)", (uint8_t *)&v31, 0x22u);
      }
      ++v25;
    }
    while (v25 != v26);
  }
}

uint64_t *sub_1CC59D080(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t *v4;
  uint64_t *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v20;
  char *v21;
  char *v22;
  char *v23;
  uint64_t v24;

  v4 = a2;
  v6 = (uint64_t *)a1[1];
  v9 = a1[2];
  v7 = (uint64_t)(a1 + 2);
  v8 = v9;
  if ((unint64_t)v6 >= v9)
  {
    v12 = *a1;
    v13 = (((uint64_t)v6 - *a1) >> 3) + 1;
    if (v13 >> 61)
      sub_1CC592ABC();
    v14 = ((uint64_t)a2 - v12) >> 3;
    v15 = v8 - v12;
    if (v15 >> 2 > v13)
      v13 = v15 >> 2;
    if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8)
      v16 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v16 = v13;
    v24 = v7;
    if (v16)
      v17 = (char *)sub_1CC598F20(v7, v16);
    else
      v17 = 0;
    v20 = (uint64_t)v17;
    v21 = &v17[8 * v14];
    v22 = v21;
    v23 = &v17[8 * v16];
    sub_1CC59D664(&v20, a3);
    v4 = (uint64_t *)sub_1CC59D78C(a1, &v20, v4);
    sub_1CC59DB1C((uint64_t)&v20);
  }
  else if (a2 == v6)
  {
    v18 = *a3;
    *a3 = 0;
    *a2 = v18;
    a1[1] = (uint64_t)(a2 + 1);
  }
  else
  {
    v10 = *a3;
    *a3 = 0;
    v20 = v10;
    v21 = (char *)v7;
    sub_1CC59D604((uint64_t)a1, a2, a1[1], (uint64_t)(a2 + 1));
    v11 = *v4;
    *v4 = v20;
    if (v11)
      sub_1CC598A08((uint64_t)v4, v11);
  }
  return v4;
}

void sub_1CC59D1B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  uint64_t v11;

  v11 = a10;
  a10 = 0;
  if (v11)
    sub_1CC598A08((uint64_t)&a10, v11);
  _Unwind_Resume(exception_object);
}

uint64_t awd::MetricBuffer::_deleteOldMetrics(uint64_t **this)
{
  unint64_t AWDTimestamp;
  uint64_t *v3;
  uint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t *v14;
  uint8_t buf[4];
  unint64_t v17;
  __int16 v18;
  unint64_t v19;
  __int16 v20;
  int v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  AWDTimestamp = awd::getAWDTimestamp((awd *)this);
  v3 = this[3];
  v4 = this[4];
  if (v3 == v4)
    return 0;
  v5 = v4 - v3;
  v6 = *(unsigned int *)this;
  if (v5 <= v6)
    return 0;
  v7 = AWDTimestamp;
  v8 = 0;
  v9 = AWDTimestamp - 1000 * (_QWORD)this[1];
  v10 = this[4];
  do
  {
    v11 = *--v10;
    v12 = *(_QWORD *)(v11 + 8);
    if (v12 < v9 || v12 > v7)
    {
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 134218496;
        v17 = v12;
        v18 = 2048;
        v19 = v5;
        v20 = 1024;
        v21 = v6;
        _os_log_debug_impl(&dword_1CC590000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEBUG, "metric.buffer:#D About to erase metric with time %llums. Size is %zd; fMaxCount is %u",
          buf,
          0x1Cu);
        v4 = this[4];
      }
      sub_1CC59D8A8((uint64_t)buf, v10 + 1, v4, v10);
      v8 = (v8 + 1);
      sub_1CC59D5A4((uint64_t)(this + 3), v14);
      v3 = this[3];
      v4 = this[4];
      v6 = *(unsigned int *)this;
    }
    if (v10 == v3)
      break;
    v5 = v4 - v3;
  }
  while (v5 > v6);
  return v8;
}

uint64_t awd::MetricBuffer::lastCount@<X0>(awd::MetricBuffer *this@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t result;
  uint64_t v4;

  v4 = *((_QWORD *)this + 3);
  result = (uint64_t)this + 24;
  *(_QWORD *)(a3 + 32) = 0;
  *(_QWORD *)a3 = v4;
  *(_QWORD *)(a3 + 8) = result;
  *(_QWORD *)(a3 + 16) = 0;
  *(_DWORD *)(a3 + 24) = a2;
  return result;
}

_QWORD *awd::MetricBuffer::iterator::metricBufferIteratorByCount@<X0>(_QWORD *result@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  *(_QWORD *)(a3 + 32) = 0;
  *(_QWORD *)a3 = *result;
  *(_QWORD *)(a3 + 8) = result;
  *(_QWORD *)(a3 + 16) = 0;
  *(_DWORD *)(a3 + 24) = a2;
  return result;
}

uint64_t awd::MetricBuffer::lastTimeInSeconds@<X0>(awd::MetricBuffer *this@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_DWORD *)(a3 + 24) = 0;
  v5 = *((_QWORD *)this + 3);
  result = (uint64_t)this + 24;
  v4 = v5;
  *(_QWORD *)a3 = v5;
  *(_QWORD *)(a3 + 8) = result;
  *(_QWORD *)(a3 + 16) = 1;
  *(_QWORD *)(a3 + 32) = a2;
  v6 = *(_QWORD *)(result + 8);
  while (v4 != v6 && *(_QWORD *)(*(_QWORD *)v4 + 8) < a2)
  {
    v4 += 8;
    *(_QWORD *)a3 = v4;
  }
  return result;
}

uint64_t *awd::MetricBuffer::iterator::metricBufferIteratorSinceTime@<X0>(uint64_t *result@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;

  *(_DWORD *)(a3 + 24) = 0;
  v3 = *result;
  v4 = result[1];
  *(_QWORD *)a3 = *result;
  *(_QWORD *)(a3 + 8) = result;
  *(_QWORD *)(a3 + 16) = 1;
  *(_QWORD *)(a3 + 32) = a2;
  while (v3 != v4 && *(_QWORD *)(*(_QWORD *)v3 + 8) < a2)
  {
    v3 += 8;
    *(_QWORD *)a3 = v3;
  }
  return result;
}

double awd::MetricBuffer::end@<D0>(awd::MetricBuffer *this@<X0>, uint64_t a2@<X8>)
{
  double result;

  *(_DWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)&result = 2;
  *(_QWORD *)(a2 + 16) = 2;
  *(_QWORD *)a2 = *((_QWORD *)this + 4);
  *(_QWORD *)(a2 + 8) = (char *)this + 24;
  return result;
}

double awd::MetricBuffer::iterator::metricBufferIteratorAtEnd@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  double result;

  *(_DWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)&result = 2;
  *(_QWORD *)(a2 + 16) = 2;
  *(_QWORD *)a2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 8) = a1;
  return result;
}

uint64_t awd::MetricBuffer::iterator::iterator(uint64_t this)
{
  *(_QWORD *)this = 0;
  *(_DWORD *)(this + 20) = 0;
  *(_DWORD *)(this + 24) = 0;
  *(_QWORD *)(this + 32) = 0;
  return this;
}

{
  *(_QWORD *)this = 0;
  *(_DWORD *)(this + 20) = 0;
  *(_DWORD *)(this + 24) = 0;
  *(_QWORD *)(this + 32) = 0;
  return this;
}

uint64_t awd::MetricBuffer::iterator::operator->(uint64_t a1)
{
  return **(_QWORD **)a1;
}

uint64_t awd::MetricBuffer::iterator::operator*(uint64_t a1)
{
  return **(_QWORD **)a1;
}

__n128 awd::MetricBuffer::iterator::operator++@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  int v2;
  unsigned int v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  __n128 result;
  __int128 v10;

  v2 = *(_DWORD *)(a1 + 16);
  switch(v2)
  {
    case 2:
      v5 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
LABEL_7:
      *(_QWORD *)a1 = v5;
      break;
    case 1:
      v6 = *(uint64_t **)(*(_QWORD *)(a1 + 8) + 8);
      if (*(uint64_t **)a1 != v6)
      {
        v7 = (uint64_t *)(*(_QWORD *)a1 + 8);
        do
        {
          *(_QWORD *)a1 = v7;
          if (v7 == v6)
            break;
          v8 = *v7++;
        }
        while (*(_QWORD *)(v8 + 8) < *(_QWORD *)(a1 + 32));
      }
      break;
    case 0:
      v3 = *(_DWORD *)(a1 + 24);
      v4 = *(_DWORD *)(a1 + 20) + 1;
      *(_DWORD *)(a1 + 20) = v4;
      if (v4 >= v3)
      {
        *(_QWORD *)a1 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
        *(_DWORD *)(a1 + 20) = v3;
        break;
      }
      v5 = *(_QWORD *)a1 + 8;
      goto LABEL_7;
  }
  result = *(__n128 *)a1;
  v10 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)a2 = *(_OWORD *)a1;
  *(_OWORD *)(a2 + 16) = v10;
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(a1 + 32);
  return result;
}

BOOL awd::MetricBuffer::iterator::operator!=(_QWORD *a1, _QWORD *a2)
{
  return *a2 != *a1;
}

void sub_1CC59D564(void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    sub_1CC59D5A4((uint64_t)v2, (uint64_t *)*v2);
    operator delete(**a1);
  }
}

void sub_1CC59D5A4(uint64_t a1, uint64_t *a2)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;

  v4 = *(uint64_t **)(a1 + 8);
  if (v4 != a2)
  {
    v5 = v4 - 1;
    do
    {
      v6 = *v5;
      *v5 = 0;
      if (v6)
        sub_1CC598A08((uint64_t)v5, v6);
    }
    while (v5-- != a2);
  }
  *(_QWORD *)(a1 + 8) = a2;
}

_QWORD *sub_1CC59D604(uint64_t a1, _QWORD *a2, unint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t *v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  char v12;

  v6 = *(_QWORD *)(a1 + 8);
  v7 = (_QWORD *)((char *)a2 + v6 - a4);
  v8 = (_QWORD *)v6;
  if ((unint64_t)v7 < a3)
  {
    v9 = v7;
    v8 = *(_QWORD **)(a1 + 8);
    do
    {
      v10 = *v9;
      *v9++ = 0;
      *v8++ = v10;
    }
    while ((unint64_t)v9 < a3);
  }
  *(_QWORD *)(a1 + 8) = v8;
  return sub_1CC59D83C((uint64_t)&v12, a2, v7, v6);
}

_QWORD *sub_1CC59D664(_QWORD *result, uint64_t *a2)
{
  _QWORD *v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  int64x2_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int64x2_t v29;
  uint64_t v30;
  uint64_t v31;

  v3 = result;
  v4 = (uint64_t *)result[2];
  if (v4 == (uint64_t *)result[3])
  {
    v5 = (uint64_t *)result[1];
    v6 = (uint64_t)v5 - *result;
    if ((unint64_t)v5 <= *result)
    {
      if (v4 == (uint64_t *)*result)
        v13 = 1;
      else
        v13 = ((uint64_t)v4 - *result) >> 2;
      v14 = result[4];
      v31 = v3[4];
      v15 = (char *)sub_1CC598F20(v14, v13);
      v17 = &v15[8 * (v13 >> 2)];
      v18 = (uint64_t *)v3[1];
      v19 = v3[2] - (_QWORD)v18;
      if (v19)
      {
        v20 = v19 >> 3;
        v21 = &v17[v19 & 0xFFFFFFFFFFFFFFF8];
        v22 = 8 * v20;
        v23 = &v15[8 * (v13 >> 2)];
        do
        {
          v24 = *v18;
          *v18++ = 0;
          *(_QWORD *)v23 = v24;
          v23 += 8;
          v22 -= 8;
        }
        while (v22);
        v25 = *(int64x2_t *)(v3 + 1);
      }
      else
      {
        v25 = vdupq_n_s64((unint64_t)v18);
        v21 = &v15[8 * (v13 >> 2)];
      }
      v28 = *v3;
      *v3 = v15;
      v3[1] = v17;
      v29 = v25;
      v26 = v3[3];
      v3[2] = v21;
      v3[3] = &v15[8 * v16];
      v30 = v26;
      result = (_QWORD *)sub_1CC59DB1C((uint64_t)&v28);
      v4 = (uint64_t *)v3[2];
    }
    else
    {
      v7 = v6 >> 3;
      v8 = v6 >> 3 < -1;
      v9 = (v6 >> 3) + 2;
      if (v8)
        v10 = v9;
      else
        v10 = v7 + 1;
      v11 = v10 >> 1;
      result = sub_1CC59D8A8((uint64_t)&v28, v5, v4, &v5[-(v10 >> 1)]);
      v4 = v12;
      v3[1] -= 8 * v11;
      v3[2] = v12;
    }
  }
  v27 = *a2;
  *a2 = 0;
  *v4 = v27;
  v3[2] += 8;
  return result;
}

uint64_t sub_1CC59D78C(uint64_t *a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;

  v6 = a2[1];
  v7 = (uint64_t)(a1 + 2);
  sub_1CC59D914((uint64_t)(a1 + 2), (uint64_t)a3, a3, *a1, (_QWORD *)*a1, v6, v6);
  a2[1] = v8;
  a2[2] = sub_1CC59D9A8(v7, a3, (uint64_t *)a1[1], (_QWORD *)a2[2]);
  v9 = *a1;
  *a1 = a2[1];
  a2[1] = v9;
  v10 = (_QWORD *)a1[1];
  a1[1] = a2[2];
  a2[2] = v10;
  v11 = (_QWORD *)a1[2];
  a1[2] = a2[3];
  a2[3] = v11;
  *a2 = a2[1];
  return v6;
}

_QWORD *sub_1CC59D83C(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t a4)
{
  uint64_t *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;

  if (a3 != a2)
  {
    v6 = (uint64_t *)(a4 - 8);
    v7 = a3;
    do
    {
      v8 = *--v7;
      *v7 = 0;
      v9 = *v6;
      *v6 = v8;
      if (v9)
        sub_1CC598A08((uint64_t)v6, v9);
      --v6;
    }
    while (v7 != a2);
  }
  return a3;
}

uint64_t *sub_1CC59D8A8(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t *v5;
  uint64_t v7;
  uint64_t v8;

  v5 = a2;
  if (a2 != a3)
  {
    do
    {
      v7 = *v5;
      *v5 = 0;
      v8 = *a4;
      *a4 = v7;
      if (v8)
        sub_1CC598A08((uint64_t)a4, v8);
      ++v5;
      ++a4;
    }
    while (v5 != a3);
    return a3;
  }
  return v5;
}

uint64_t sub_1CC59D914(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v13[3];
  char v14;
  __int128 v15;
  __int128 v16;

  v7 = a7;
  *(_QWORD *)&v16 = a6;
  *((_QWORD *)&v16 + 1) = a7;
  v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  v13[2] = &v16;
  if (a3 == a5)
  {
    v11 = a6;
  }
  else
  {
    v8 = (_QWORD *)(a7 - 8);
    v9 = (_QWORD *)(a7 - 8);
    do
    {
      v10 = *--a3;
      *a3 = 0;
      *v9-- = v10;
      *((_QWORD *)&v16 + 1) = v8;
      v7 -= 8;
      v8 = v9;
    }
    while (a3 != a5);
    v11 = v16;
  }
  v14 = 1;
  sub_1CC59DA18((uint64_t)v13);
  return v11;
}

_QWORD *sub_1CC59D9A8(uint64_t a1, uint64_t *a2, uint64_t *a3, _QWORD *a4)
{
  _QWORD *v4;
  uint64_t v5;
  _QWORD v7[3];
  char v8;
  _QWORD *v9;
  _QWORD *v10;

  v4 = a4;
  v10 = a4;
  v9 = a4;
  v7[0] = a1;
  v7[1] = &v9;
  v7[2] = &v10;
  if (a2 != a3)
  {
    do
    {
      v5 = *a2;
      *a2++ = 0;
      *v4++ = v5;
    }
    while (a2 != a3);
    v10 = v4;
  }
  v8 = 1;
  sub_1CC59DA94((uint64_t)v7);
  return v4;
}

uint64_t sub_1CC59DA18(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_1CC59DA4C(a1);
  return a1;
}

void sub_1CC59DA4C(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;

  v1 = *(uint64_t **)(*(_QWORD *)(a1 + 16) + 8);
  v2 = *(uint64_t **)(*(_QWORD *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    v3 = *v1;
    *v1 = 0;
    if (v3)
      sub_1CC598A08((uint64_t)v1, v3);
    ++v1;
  }
}

uint64_t sub_1CC59DA94(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_1CC59DAC8(a1);
  return a1;
}

void sub_1CC59DAC8(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;

  v1 = **(uint64_t ***)(a1 + 16);
  v2 = **(uint64_t ***)(a1 + 8);
  if (v1 != v2)
  {
    v3 = v1 - 1;
    do
    {
      v4 = *v3;
      *v3 = 0;
      if (v4)
        sub_1CC598A08((uint64_t)v3, v4);
    }
    while (v3-- != v2);
  }
}

uint64_t sub_1CC59DB1C(uint64_t a1)
{
  sub_1CC59DB50(a1, *(_QWORD *)(a1 + 8));
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void sub_1CC59DB50(uint64_t a1, uint64_t a2)
{
  uint64_t i;
  uint64_t v5;

  for (i = *(_QWORD *)(a1 + 16); i != a2; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 8;
    v5 = *(_QWORD *)(i - 8);
    *(_QWORD *)(i - 8) = 0;
    if (v5)
      sub_1CC598A08(i - 8, v5);
  }
}

void sub_1CC59DBA0(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_debug_impl(a1, a2, OS_LOG_TYPE_DEBUG, a4, &a9, 2u);
}

awd::MetricContainer *awd::MetricContainer::MetricContainer(awd::MetricContainer *this, int a2)
{
  _DWORD v5[2];
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  *(_DWORD *)this = a2;
  *((_QWORD *)this + 1) = 0;
  if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_INFO))
  {
    v5[0] = 67109120;
    v5[1] = a2;
    _os_log_impl(&dword_1CC590000, MEMORY[0x1E0C81028], OS_LOG_TYPE_INFO, "metric:#I Creating a metric container for metric id: 0x%x", (uint8_t *)v5, 8u);
  }
  return this;
}

void awd::MetricContainer::~MetricContainer(awd::MetricContainer *this)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  v1 = (_QWORD *)((char *)this + 8);
  v2 = v3;
  *v1 = 0;
  if (v3)
    sub_1CC598A08((uint64_t)v1, v2);
}

{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  v1 = (_QWORD *)((char *)this + 8);
  v2 = v3;
  *v1 = 0;
  if (v3)
    sub_1CC598A08((uint64_t)v1, v2);
}

double awd::MetricContainer::storeMetric(awd::MetricContainer *this, uint64_t a2, const wireless_diagnostics::google::protobuf::MessageLite *a3, const wireless_diagnostics::google::protobuf::MessageLite *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  _QWORD *v12;
  void *v13;
  double result;
  __int128 v15;
  uint64_t v16;

  v8 = operator new();
  awd::Metric::Metric(v8);
  v11 = *((_QWORD *)this + 1);
  v10 = (uint64_t *)((char *)this + 8);
  v9 = v11;
  *v10 = v8;
  if (v11)
  {
    sub_1CC598A08((uint64_t)v10, v9);
    v8 = *v10;
  }
  *(_QWORD *)(v8 + 8) = a2;
  *(_DWORD *)v8 = (_DWORD)a3;
  awd::serializeMetric(a4, a3, (unint64_t *)&v15);
  v12 = (_QWORD *)*v10;
  v13 = (void *)v12[2];
  if (v13)
  {
    v12[3] = v13;
    operator delete(v13);
    v12[2] = 0;
    v12[3] = 0;
    v12[4] = 0;
  }
  result = *(double *)&v15;
  *((_OWORD *)v12 + 1) = v15;
  v12[4] = v16;
  return result;
}

void sub_1CC59DD80(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1D17AD544](v1, 0x1010C40D8786FEELL);
  _Unwind_Resume(a1);
}

uint64_t awd::MetricContainer::takeMetric@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  v2 = *(_QWORD *)(this + 8);
  *(_QWORD *)(this + 8) = 0;
  *a2 = v2;
  return this;
}

_QWORD *awd::MetricContainer::getMetricBytes@<X0>(awd::MetricContainer *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  return sub_1CC59DDD0(a2, *(const void **)(v2 + 16), *(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 24) - *(_QWORD *)(v2 + 16));
}

_QWORD *sub_1CC59DDD0(_QWORD *result, const void *a2, uint64_t a3, size_t __sz)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (__sz)
  {
    v6 = result;
    result = sub_1CC596BD4(result, __sz);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1CC59DE2C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void platform::getCustomConfigsPaths(uint64_t a1@<X8>)
{
  uint64_t i;
  void *__p[2];
  uint64_t v5;
  void *v6[2];
  uint64_t v7;
  int v8;
  __int128 v9;
  uint64_t v10;
  int v11;
  __int128 v12;
  _QWORD v13[2];

  v13[1] = *MEMORY[0x1E0C80C00];
  sub_1CC59E69C(v6, "/var/wireless/awdd");
  ctu::path_join_impl();
  v8 = 1;
  v9 = *(_OWORD *)v6;
  v10 = v7;
  v6[0] = 0;
  v6[1] = 0;
  v7 = 0;
  sub_1CC59E69C(__p, "/AppleInternal/Library/awdd");
  ctu::path_join_impl();
  v11 = 0;
  v12 = *(_OWORD *)__p;
  v13[0] = v5;
  __p[0] = 0;
  __p[1] = 0;
  v5 = 0;
  sub_1CC59E2B4(a1, &v8, 2);
  for (i = 0; i != -8; i -= 4)
  {
    if (SHIBYTE(v13[i]) < 0)
      operator delete((void *)v13[i - 2]);
  }
  if (SHIBYTE(v5) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v7) < 0)
    operator delete(v6[0]);
}

void sub_1CC59DF78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  uint64_t v28;
  uint64_t v30;

  v30 = 0;
  while (1)
  {
    if (*(char *)(v28 + v30 + 63) < 0)
      operator delete(*(void **)(v28 + v30 + 40));
    v30 -= 32;
    if (v30 == -64)
    {
      if (a15 < 0)
        operator delete(__p);
      if (a21 < 0)
        operator delete(a16);
      _Unwind_Resume(exception_object);
    }
  }
}

const char *platform::getPlatformBaseDir(platform *this)
{
  return "/var/wireless/awdd";
}

_QWORD *platform::getLogSnapshotPath@<X0>(_QWORD *a1@<X8>)
{
  return sub_1CC59E69C(a1, "/var/wireless/Library/Logs/CrashReporter/awd");
}

uint64_t platform::getLogOutputPathInHomeDir@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  if (*(char *)(a1 + 23) < 0)
  {
    sub_1CC594AF4((_BYTE *)a2, *(void **)a1, *(_QWORD *)(a1 + 8));
  }
  else
  {
    *(_OWORD *)a2 = *(_OWORD *)a1;
    *(_QWORD *)(a2 + 16) = *(_QWORD *)(a1 + 16);
  }
  return ctu::path_join_impl();
}

void sub_1CC59E098(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void platform::getExtraLogPaths(uint64_t *a1@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  __int128 v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  __int128 v14;
  uint64_t v15;
  int v16;
  void *__p[2];
  uint64_t v18;
  void *v19[2];
  char v20;
  _QWORD v21[5];

  v3 = 0;
  a1[2] = 0;
  v4 = (uint64_t)(a1 + 2);
  *a1 = 0;
  a1[1] = 0;
  do
  {
    sub_1CC59E69C(v19, "/var");
    ctu::path_join_impl();
    platform::getLogOutputPathInHomeDir((uint64_t)v19, (uint64_t)__p);
    v6 = a1[1];
    v5 = a1[2];
    if (v6 >= v5)
    {
      v8 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v6 - *a1) >> 3);
      v9 = v8 + 1;
      if (v8 + 1 > 0xAAAAAAAAAAAAAAALL)
        sub_1CC592ABC();
      v10 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - *a1) >> 3);
      if (2 * v10 > v9)
        v9 = 2 * v10;
      if (v10 >= 0x555555555555555)
        v11 = 0xAAAAAAAAAAAAAAALL;
      else
        v11 = v9;
      v21[4] = v4;
      if (v11)
        v12 = (char *)sub_1CC59E84C(v4, v11);
      else
        v12 = 0;
      v13 = &v12[24 * v8];
      v21[0] = v12;
      v21[1] = v13;
      v21[3] = &v12[24 * v11];
      v14 = *(_OWORD *)__p;
      *((_QWORD *)v13 + 2) = v18;
      *(_OWORD *)v13 = v14;
      __p[1] = 0;
      v18 = 0;
      __p[0] = 0;
      v21[2] = v13 + 24;
      sub_1CC59E7D8(a1, v21);
      v15 = a1[1];
      sub_1CC59E9A4((uint64_t)v21);
      v16 = SHIBYTE(v18);
      a1[1] = v15;
      if (v16 < 0)
        operator delete(__p[0]);
    }
    else
    {
      v7 = *(_OWORD *)__p;
      *(_QWORD *)(v6 + 16) = v18;
      *(_OWORD *)v6 = v7;
      a1[1] = v6 + 24;
    }
    if (v20 < 0)
      operator delete(v19[0]);
    v3 += 8;
  }
  while (v3 != 24);
}

void sub_1CC59E254(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22)
{
  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  sub_1CC59E74C((void ***)&a16);
  _Unwind_Resume(a1);
}

uint64_t sub_1CC59E2B4(uint64_t a1, int *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v6;

  *(_QWORD *)(a1 + 8) = 0;
  v4 = (uint64_t *)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = a1 + 8;
  if (a3)
  {
    v6 = 32 * a3;
    do
    {
      sub_1CC59E330((uint64_t **)a1, v4, a2, (uint64_t)a2);
      a2 += 8;
      v6 -= 32;
    }
    while (v6);
  }
  return a1;
}

void sub_1CC59E318(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1CC59E64C(v1, *(char **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *sub_1CC59E330(uint64_t **a1, uint64_t *a2, int *a3, uint64_t a4)
{
  uint64_t **v6;
  uint64_t *result;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;

  v6 = (uint64_t **)sub_1CC59E3B0(a1, a2, &v10, &v9, a3);
  result = *v6;
  if (!*v6)
  {
    sub_1CC59E558((uint64_t)a1, a4, (uint64_t)&v8);
    sub_1CC598AF0(a1, (uint64_t)v10, v6, v8);
    return v8;
  }
  return result;
}

uint64_t *sub_1CC59E3B0(_QWORD *a1, uint64_t *a2, uint64_t **a3, uint64_t *a4, int *a5)
{
  uint64_t *v5;
  int v6;
  int v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  BOOL v14;
  int v15;
  uint64_t v16;
  uint64_t *v17;
  int v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t *v21;
  int v22;

  v5 = a1 + 1;
  if (a1 + 1 == a2 || (v6 = *a5, v7 = *((_DWORD *)a2 + 8), *a5 < v7))
  {
    v8 = (uint64_t *)*a2;
    if ((uint64_t *)*a1 == a2)
    {
      v10 = a2;
LABEL_17:
      if (v8)
      {
        *a3 = v10;
        return v10 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    if (v8)
    {
      v9 = (uint64_t *)*a2;
      do
      {
        v10 = v9;
        v9 = (uint64_t *)v9[1];
      }
      while (v9);
    }
    else
    {
      v13 = a2;
      do
      {
        v10 = (uint64_t *)v13[2];
        v14 = *v10 == (_QWORD)v13;
        v13 = v10;
      }
      while (v14);
    }
    v15 = *a5;
    if (*((_DWORD *)v10 + 8) < *a5)
      goto LABEL_17;
    v16 = *v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          v17 = (uint64_t *)v16;
          v18 = *(_DWORD *)(v16 + 32);
          if (v15 >= v18)
            break;
          v16 = *v17;
          v5 = v17;
          if (!*v17)
            goto LABEL_29;
        }
        if (v18 >= v15)
          break;
        v5 = v17 + 1;
        v16 = v17[1];
      }
      while (v16);
    }
    else
    {
      v17 = a1 + 1;
    }
LABEL_29:
    *a3 = v17;
    return v5;
  }
  if (v7 >= v6)
  {
    *a3 = a2;
    *a4 = (uint64_t)a2;
    return a4;
  }
  v11 = a2[1];
  if (v11)
  {
    v12 = (uint64_t *)a2[1];
    do
    {
      a4 = v12;
      v12 = (uint64_t *)*v12;
    }
    while (v12);
  }
  else
  {
    v19 = a2;
    do
    {
      a4 = (uint64_t *)v19[2];
      v14 = *a4 == (_QWORD)v19;
      v19 = a4;
    }
    while (!v14);
  }
  if (a4 != v5 && v6 >= *((_DWORD *)a4 + 8))
  {
    v20 = *v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          v21 = (uint64_t *)v20;
          v22 = *(_DWORD *)(v20 + 32);
          if (v6 >= v22)
            break;
          v20 = *v21;
          v5 = v21;
          if (!*v21)
            goto LABEL_48;
        }
        if (v22 >= v6)
          break;
        v5 = v21 + 1;
        v20 = v21[1];
      }
      while (v20);
    }
    else
    {
      v21 = a1 + 1;
    }
LABEL_48:
    *a3 = v21;
    return v5;
  }
  if (v11)
  {
    *a3 = a4;
  }
  else
  {
    *a3 = a2;
    return a2 + 1;
  }
  return a4;
}

_QWORD *sub_1CC59E558@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  _DWORD *v6;
  _QWORD *result;

  v5 = a1 + 8;
  v6 = operator new(0x40uLL);
  *(_QWORD *)(a3 + 8) = v5;
  *(_QWORD *)a3 = v6;
  *(_BYTE *)(a3 + 16) = 0;
  v6[8] = *(_DWORD *)a2;
  result = v6 + 10;
  if (*(char *)(a2 + 31) < 0)
  {
    result = sub_1CC594AF4(result, *(void **)(a2 + 8), *(_QWORD *)(a2 + 16));
  }
  else
  {
    *(_OWORD *)result = *(_OWORD *)(a2 + 8);
    result[2] = *(_QWORD *)(a2 + 24);
  }
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_1CC59E5E4(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;
  uint64_t v3;

  *v1 = 0;
  sub_1CC59E600(v3, v2);
  _Unwind_Resume(a1);
}

void sub_1CC59E600(uint64_t a1, void **__p)
{
  if (*(_BYTE *)(a1 + 8))
  {
    if (*((char *)__p + 63) < 0)
      operator delete(__p[5]);
  }
  else if (!__p)
  {
    return;
  }
  operator delete(__p);
}

void sub_1CC59E64C(uint64_t a1, char *a2)
{
  if (a2)
  {
    sub_1CC59E64C(a1, *(_QWORD *)a2);
    sub_1CC59E64C(a1, *((_QWORD *)a2 + 1));
    if (a2[63] < 0)
      operator delete(*((void **)a2 + 5));
    operator delete(a2);
  }
}

_QWORD *sub_1CC59E69C(_QWORD *a1, char *__s)
{
  size_t v4;
  size_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;

  v4 = strlen(__s);
  if (v4 >= 0x7FFFFFFFFFFFFFF8)
    sub_1CC5931AC();
  v5 = v4;
  if (v4 >= 0x17)
  {
    v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17)
      v7 = v4 | 7;
    v8 = v7 + 1;
    v6 = operator new(v7 + 1);
    a1[1] = v5;
    a1[2] = v8 | 0x8000000000000000;
    *a1 = v6;
  }
  else
  {
    *((_BYTE *)a1 + 23) = v4;
    v6 = a1;
    if (!v4)
      goto LABEL_9;
  }
  memmove(v6, __s, v5);
LABEL_9:
  *((_BYTE *)v6 + v5) = 0;
  return a1;
}

void sub_1CC59E74C(void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    sub_1CC59E78C((uint64_t *)v2);
    operator delete(**a1);
  }
}

void sub_1CC59E78C(uint64_t *a1)
{
  uint64_t v2;
  uint64_t i;

  v2 = *a1;
  for (i = a1[1]; i != v2; i -= 24)
  {
    if (*(char *)(i - 1) < 0)
      operator delete(*(void **)(i - 24));
  }
  a1[1] = v2;
}

uint64_t sub_1CC59E7D8(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = sub_1CC59E890((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *sub_1CC59E84C(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0xAAAAAAAAAAAAAABLL)
    sub_1CC594B80();
  return operator new(24 * a2);
}

uint64_t sub_1CC59E890(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v9;
  __int128 v10;
  _QWORD v12[3];
  char v13;
  __int128 v14;
  __int128 v15;

  v7 = a7;
  *(_QWORD *)&v15 = a6;
  *((_QWORD *)&v15 + 1) = a7;
  v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  if (a3 != a5)
  {
    v9 = a7;
    do
    {
      v10 = *(_OWORD *)(a3 - 24);
      *(_QWORD *)(v9 - 8) = *(_QWORD *)(a3 - 8);
      *(_OWORD *)(v9 - 24) = v10;
      v9 -= 24;
      *(_QWORD *)(a3 - 16) = 0;
      *(_QWORD *)(a3 - 8) = 0;
      *(_QWORD *)(a3 - 24) = 0;
      v7 -= 24;
      a3 -= 24;
    }
    while (a3 != a5);
    *((_QWORD *)&v15 + 1) = v9;
  }
  v13 = 1;
  sub_1CC59E92C((uint64_t)v12);
  return a6;
}

uint64_t sub_1CC59E92C(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_1CC59E960(a1);
  return a1;
}

void sub_1CC59E960(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    if (*(char *)(v1 + 23) < 0)
      operator delete(*(void **)v1);
    v1 += 24;
  }
}

uint64_t sub_1CC59E9A4(uint64_t a1)
{
  sub_1CC59E9D8(a1, *(void ***)(a1 + 8));
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void sub_1CC59E9D8(uint64_t a1, void **a2)
{
  void **v2;
  void **v5;

  v2 = *(void ***)(a1 + 16);
  if (v2 != a2)
  {
    do
    {
      v5 = v2 - 3;
      *(_QWORD *)(a1 + 16) = v2 - 3;
      if (*((char *)v2 - 1) < 0)
      {
        operator delete(*v5);
        v5 = *(void ***)(a1 + 16);
      }
      v2 = v5;
    }
    while (v5 != a2);
  }
}

double awd::SimpleMetricHelper::SimpleMetricHelper(awd::SimpleMetricHelper *this, int a2)
{
  double result;

  *(_DWORD *)this = a2;
  *((_WORD *)this + 2) = 0;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  return result;
}

{
  double result;

  *(_DWORD *)this = a2;
  *((_WORD *)this + 2) = 0;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  return result;
}

uint64_t *awd::SimpleMetricHelper::setConfiguration(awd::SimpleMetricHelper *this, const awd::profile::ComponentConfiguration *a2)
{
  char *v4;
  void **v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  char *v13;
  char *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _DWORD *v21;
  int v22;
  int *v23;
  uint64_t v25;

  v5 = (void **)((char *)this + 8);
  v4 = (char *)*((_QWORD *)this + 1);
  *((_WORD *)this + 2) = 1;
  *((_QWORD *)this + 2) = v4;
  v6 = *((int *)a2 + 4);
  if ((_DWORD)v6)
  {
    v7 = *((_QWORD *)a2 + 1);
    v25 = v7 + 8 * v6;
    v8 = (_QWORD *)((char *)this + 24);
    do
    {
      v9 = *(int *)(*(_QWORD *)v7 + 48);
      if ((_DWORD)v9)
      {
        v10 = *(_QWORD *)(*(_QWORD *)v7 + 40);
        v11 = v10 + 8 * v9;
        do
        {
          v12 = *(_DWORD *)(*(_QWORD *)v10 + 8);
          if (v12 == 0x20000)
          {
            *((_BYTE *)this + 5) = 1;
          }
          else
          {
            if ((unint64_t)v4 >= *v8)
            {
              v14 = (char *)*v5;
              v15 = (v4 - (_BYTE *)*v5) >> 2;
              v16 = v15 + 1;
              if ((unint64_t)(v15 + 1) >> 62)
                sub_1CC592ABC();
              v17 = *v8 - (_QWORD)v14;
              if (v17 >> 1 > v16)
                v16 = v17 >> 1;
              if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFFCLL)
                v18 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v18 = v16;
              if (v18)
              {
                v18 = (unint64_t)sub_1CC594C00((uint64_t)this + 24, v18);
                v20 = v19;
                v14 = (char *)*((_QWORD *)this + 1);
                v4 = (char *)*((_QWORD *)this + 2);
              }
              else
              {
                v20 = 0;
              }
              v21 = (_DWORD *)(v18 + 4 * v15);
              *v21 = v12;
              v13 = (char *)(v21 + 1);
              while (v4 != v14)
              {
                v22 = *((_DWORD *)v4 - 1);
                v4 -= 4;
                *--v21 = v22;
              }
              *((_QWORD *)this + 1) = v21;
              *((_QWORD *)this + 2) = v13;
              *((_QWORD *)this + 3) = v18 + 4 * v20;
              if (v14)
                operator delete(v14);
            }
            else
            {
              *(_DWORD *)v4 = v12;
              v13 = v4 + 4;
            }
            *((_QWORD *)this + 2) = v13;
            v4 = v13;
          }
          v10 += 8;
        }
        while (v10 != v11);
      }
      v7 += 8;
    }
    while (v7 != v25);
  }
  std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
  v23 = sub_1CC59F548(*((int **)this + 1), *((int **)this + 2));
  if (*((int **)this + 2) != v23)
    *((_QWORD *)this + 2) = v23;
  return awd::SimpleMetricHelper::filterBufferedMetrics(this);
}

uint64_t *awd::SimpleMetricHelper::filterBufferedMetrics(awd::SimpleMetricHelper *this)
{
  char *v1;
  unsigned int **v2;
  unsigned int **v3;
  unsigned int *v5;
  uint64_t *v6;
  unsigned int **v8;
  uint64_t v9;
  uint64_t v10;

  v2 = (unsigned int **)*((_QWORD *)this + 4);
  v3 = (unsigned int **)*((_QWORD *)this + 5);
  v1 = (char *)this + 32;
  if (v2 != v3)
  {
    do
    {
      v5 = *v2;
      if (!awd::SimpleMetricHelper::shouldCreateMetric(this, **v2))
      {
        *v2 = 0;
        sub_1CC598A08((uint64_t)v2, (uint64_t)v5);
      }
      ++v2;
    }
    while (v2 != v3);
    v6 = (uint64_t *)*((_QWORD *)this + 4);
    v2 = (unsigned int **)*((_QWORD *)this + 5);
    while (v6 != (uint64_t *)v2)
    {
      if (!*v6)
      {
        if (v6 != (uint64_t *)v2)
        {
          v8 = (unsigned int **)(v6 + 1);
          if (v6 + 1 != (uint64_t *)v2)
          {
            do
            {
              v9 = (uint64_t)*v8;
              if (*v8)
              {
                *v8 = 0;
                v10 = *v6;
                *v6 = v9;
                if (v10)
                  sub_1CC598A08((uint64_t)v6, v10);
                ++v6;
              }
              ++v8;
            }
            while (v8 != v2);
            v2 = (unsigned int **)*((_QWORD *)this + 5);
          }
        }
        return sub_1CC59ED98((uint64_t)v1, v6, (uint64_t *)v2);
      }
      ++v6;
    }
  }
  v6 = (uint64_t *)v2;
  return sub_1CC59ED98((uint64_t)v1, v6, (uint64_t *)v2);
}

BOOL awd::SimpleMetricHelper::shouldCreateMetric(awd::SimpleMetricHelper *this, unsigned int a2)
{
  unsigned int *v3;
  unsigned int *v4;
  unint64_t v5;
  unint64_t v6;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int v9;

  if (!*((_BYTE *)this + 4))
    return 1;
  if (a2 == 0x20000)
    return *((_BYTE *)this + 5) != 0;
  v3 = (unsigned int *)*((_QWORD *)this + 1);
  v4 = (unsigned int *)*((_QWORD *)this + 2);
  if (v4 == v3)
    return 0;
  v5 = v4 - v3;
  do
  {
    v6 = v5 >> 1;
    v7 = &v3[v5 >> 1];
    v9 = *v7;
    v8 = v7 + 1;
    v5 += ~(v5 >> 1);
    if (v9 < a2)
      v3 = v8;
    else
      v5 = v6;
  }
  while (v5);
  return v3 != v4 && *v3 <= a2;
}

uint64_t *sub_1CC59ED98(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t *v5;
  char v7;

  if (a2 != a3)
  {
    sub_1CC59D8A8((uint64_t)&v7, a3, *(uint64_t **)(a1 + 8), a2);
    sub_1CC59D5A4(a1, v5);
  }
  return a2;
}

BOOL awd::SimpleMetricHelper::mustWaitForConfig(awd::SimpleMetricHelper *this)
{
  return *((_BYTE *)this + 4) == 0;
}

uint64_t awd::SimpleMetricHelper::shouldFixupMetricId(awd::SimpleMetricHelper *this)
{
  return 0;
}

double awd::SimpleMetricHelper::saveMetric(awd::SimpleMetricHelper *this, awd::Metric *a2, awd::metrics::SimpleMetric *a3, wireless_diagnostics::google::protobuf::MessageLite *a4)
{
  void *v5;
  double result;
  __int128 v7;
  uint64_t v8;

  *(_DWORD *)a2 = (_DWORD)a4;
  awd::serializeMetric(a3, a4, (unint64_t *)&v7);
  v5 = (void *)*((_QWORD *)a2 + 2);
  if (v5)
  {
    *((_QWORD *)a2 + 3) = v5;
    operator delete(v5);
  }
  result = *(double *)&v7;
  *((_OWORD *)a2 + 1) = v7;
  *((_QWORD *)a2 + 4) = v8;
  return result;
}

uint64_t awd::SimpleMetricHelper::maybeBufferMetric(uint64_t result, uint64_t *a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  _QWORD v18[5];

  if (!*(_BYTE *)(result + 4))
  {
    v3 = result;
    v5 = *(_QWORD *)(result + 48);
    result += 48;
    v4 = v5;
    v6 = *(_QWORD **)(result - 8);
    if ((unint64_t)v6 >= v5)
    {
      v9 = (uint64_t *)(result - 16);
      v10 = *(_QWORD *)(result - 16);
      v11 = ((uint64_t)v6 - v10) >> 3;
      if ((unint64_t)(v11 + 1) >> 61)
        sub_1CC592ABC();
      v12 = v4 - v10;
      v13 = v12 >> 2;
      if (v12 >> 2 <= (unint64_t)(v11 + 1))
        v13 = v11 + 1;
      if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
        v14 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v14 = v13;
      v18[4] = result;
      if (v14)
        v15 = (char *)sub_1CC598F20(result, v14);
      else
        v15 = 0;
      v16 = &v15[8 * v11];
      v18[0] = v15;
      v18[1] = v16;
      v18[3] = &v15[8 * v14];
      v17 = *a2;
      *a2 = 0;
      *(_QWORD *)v16 = v17;
      v18[2] = v16 + 8;
      sub_1CC59F5AC(v9, v18);
      v8 = *(_QWORD **)(v3 + 40);
      result = sub_1CC59DB1C((uint64_t)v18);
    }
    else
    {
      v7 = *a2;
      *a2 = 0;
      *v6 = v7;
      v8 = v6 + 1;
      *(_QWORD *)(v3 + 40) = v8;
    }
    *(_QWORD *)(v3 + 40) = v8;
  }
  return result;
}

void sub_1CC59EF4C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1CC59DB1C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t awd::SimpleMetricHelper::makeSimpleMetric@<X0>(awd::SimpleMetricHelper *this@<X0>, wireless_diagnostics::google::protobuf::MessageLite *a2@<X1>, awd::Metric **a3@<X8>)
{
  _BOOL8 Metric;
  unint64_t AWDTimestamp;
  uint64_t v8;
  awd::SimpleMetricHelper *v9;
  _BYTE v11[8];
  unint64_t v12;
  int v13;

  *a3 = 0;
  Metric = awd::SimpleMetricHelper::shouldCreateMetric(this, a2);
  if (Metric)
  {
    AWDTimestamp = awd::getAWDTimestamp((awd *)Metric);
    v8 = operator new();
    awd::Metric::Metric(v8);
    *a3 = (awd::Metric *)v8;
    *(_QWORD *)(v8 + 8) = AWDTimestamp;
    v9 = (awd::SimpleMetricHelper *)awd::metrics::SimpleMetric::SimpleMetric((uint64_t)v11);
    v13 |= 1u;
    v12 = AWDTimestamp;
    awd::SimpleMetricHelper::saveMetric(v9, *a3, (awd::metrics::SimpleMetric *)v11, a2);
    awd::metrics::SimpleMetric::~SimpleMetric((awd::metrics::SimpleMetric *)v11);
  }
  return awd::SimpleMetricHelper::maybeBufferMetric((uint64_t)this, (uint64_t *)a3);
}

void sub_1CC59F014(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t *v2;
  uint64_t v4;
  va_list va;

  va_start(va, a2);
  awd::metrics::SimpleMetric::~SimpleMetric((awd::metrics::SimpleMetric *)va);
  v4 = *v2;
  *v2 = 0;
  if (v4)
    sub_1CC598A08((uint64_t)v2, v4);
  _Unwind_Resume(a1);
}

uint64_t awd::SimpleMetricHelper::makeSimpleMetric@<X0>(awd::SimpleMetricHelper *this@<X0>, wireless_diagnostics::google::protobuf::MessageLite *a2@<X1>, uint64_t a3@<X2>, awd::Metric **a4@<X8>)
{
  _BOOL8 Metric;
  unint64_t AWDTimestamp;
  uint64_t v10;
  awd::SimpleMetricHelper *v11;
  _BYTE v13[8];
  unint64_t v14;
  uint64_t v15;
  int v16;

  *a4 = 0;
  Metric = awd::SimpleMetricHelper::shouldCreateMetric(this, a2);
  if (Metric)
  {
    AWDTimestamp = awd::getAWDTimestamp((awd *)Metric);
    v10 = operator new();
    awd::Metric::Metric(v10);
    *a4 = (awd::Metric *)v10;
    *(_QWORD *)(v10 + 8) = AWDTimestamp;
    v11 = (awd::SimpleMetricHelper *)awd::metrics::SimpleMetric::SimpleMetric((uint64_t)v13);
    v16 |= 5u;
    v14 = AWDTimestamp;
    v15 = a3;
    awd::SimpleMetricHelper::saveMetric(v11, *a4, (awd::metrics::SimpleMetric *)v13, a2);
    awd::metrics::SimpleMetric::~SimpleMetric((awd::metrics::SimpleMetric *)v13);
  }
  return awd::SimpleMetricHelper::maybeBufferMetric((uint64_t)this, (uint64_t *)a4);
}

{
  _BOOL8 Metric;
  unint64_t AWDTimestamp;
  uint64_t v10;
  awd::SimpleMetricHelper *v11;
  _BYTE v13[8];
  unint64_t v14;
  uint64_t v15;
  int v16;

  *a4 = 0;
  Metric = awd::SimpleMetricHelper::shouldCreateMetric(this, a2);
  if (Metric)
  {
    AWDTimestamp = awd::getAWDTimestamp((awd *)Metric);
    v10 = operator new();
    awd::Metric::Metric(v10);
    *a4 = (awd::Metric *)v10;
    *(_QWORD *)(v10 + 8) = AWDTimestamp;
    v11 = (awd::SimpleMetricHelper *)awd::metrics::SimpleMetric::SimpleMetric((uint64_t)v13);
    v16 |= 9u;
    v14 = AWDTimestamp;
    v15 = a3;
    awd::SimpleMetricHelper::saveMetric(v11, *a4, (awd::metrics::SimpleMetric *)v13, a2);
    awd::metrics::SimpleMetric::~SimpleMetric((awd::metrics::SimpleMetric *)v13);
  }
  return awd::SimpleMetricHelper::maybeBufferMetric((uint64_t)this, (uint64_t *)a4);
}

void sub_1CC59F130(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t *v2;
  uint64_t v4;
  va_list va;

  va_start(va, a2);
  awd::metrics::SimpleMetric::~SimpleMetric((awd::metrics::SimpleMetric *)va);
  v4 = *v2;
  *v2 = 0;
  if (v4)
    sub_1CC598A08((uint64_t)v2, v4);
  _Unwind_Resume(a1);
}

void sub_1CC59F250(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t *v2;
  uint64_t v4;
  va_list va;

  va_start(va, a2);
  awd::metrics::SimpleMetric::~SimpleMetric((awd::metrics::SimpleMetric *)va);
  v4 = *v2;
  *v2 = 0;
  if (v4)
    sub_1CC598A08((uint64_t)v2, v4);
  _Unwind_Resume(a1);
}

uint64_t awd::SimpleMetricHelper::makeSimpleMetric@<X0>(awd::SimpleMetricHelper *this@<X0>, wireless_diagnostics::google::protobuf::MessageLite *a2@<X1>, char a3@<W2>, awd::Metric **a4@<X8>)
{
  _BOOL8 Metric;
  unint64_t AWDTimestamp;
  uint64_t v10;
  awd::SimpleMetricHelper *v11;
  _BYTE v13[8];
  unint64_t v14;
  char v15;
  int v16;

  *a4 = 0;
  Metric = awd::SimpleMetricHelper::shouldCreateMetric(this, a2);
  if (Metric)
  {
    AWDTimestamp = awd::getAWDTimestamp((awd *)Metric);
    v10 = operator new();
    awd::Metric::Metric(v10);
    *a4 = (awd::Metric *)v10;
    *(_QWORD *)(v10 + 8) = AWDTimestamp;
    v11 = (awd::SimpleMetricHelper *)awd::metrics::SimpleMetric::SimpleMetric((uint64_t)v13);
    v14 = AWDTimestamp;
    v16 |= 0x21u;
    v15 = a3;
    awd::SimpleMetricHelper::saveMetric(v11, *a4, (awd::metrics::SimpleMetric *)v13, a2);
    awd::metrics::SimpleMetric::~SimpleMetric((awd::metrics::SimpleMetric *)v13);
  }
  return awd::SimpleMetricHelper::maybeBufferMetric((uint64_t)this, (uint64_t *)a4);
}

void sub_1CC59F370(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t *v2;
  uint64_t v4;
  va_list va;

  va_start(va, a2);
  awd::metrics::SimpleMetric::~SimpleMetric((awd::metrics::SimpleMetric *)va);
  v4 = *v2;
  *v2 = 0;
  if (v4)
    sub_1CC598A08((uint64_t)v2, v4);
  _Unwind_Resume(a1);
}

uint64_t awd::SimpleMetricHelper::makeSimpleMetric@<X0>(awd::SimpleMetricHelper *a1@<X0>, wireless_diagnostics::google::protobuf::MessageLite *a2@<X1>, const std::string *a3@<X2>, awd::Metric **a4@<X8>)
{
  _BOOL8 Metric;
  unint64_t AWDTimestamp;
  uint64_t v10;
  std::string *v11;
  std::string *v12;
  _BYTE v14[8];
  unint64_t v15;
  std::string *v16;
  int v17;

  *a4 = 0;
  Metric = awd::SimpleMetricHelper::shouldCreateMetric(a1, a2);
  if (Metric)
  {
    AWDTimestamp = awd::getAWDTimestamp((awd *)Metric);
    v10 = operator new();
    awd::Metric::Metric(v10);
    *a4 = (awd::Metric *)v10;
    *(_QWORD *)(v10 + 8) = AWDTimestamp;
    awd::metrics::SimpleMetric::SimpleMetric((uint64_t)v14);
    v15 = AWDTimestamp;
    v17 |= 0x11u;
    v11 = v16;
    if (v16 == (std::string *)MEMORY[0x1E0DE8338])
    {
      v11 = (std::string *)operator new();
      v11->__r_.__value_.__r.__words[0] = 0;
      v11->__r_.__value_.__l.__size_ = 0;
      v11->__r_.__value_.__r.__words[2] = 0;
      v16 = v11;
    }
    v12 = std::string::operator=(v11, a3);
    awd::SimpleMetricHelper::saveMetric((awd::SimpleMetricHelper *)v12, *a4, (awd::metrics::SimpleMetric *)v14, a2);
    awd::metrics::SimpleMetric::~SimpleMetric((awd::metrics::SimpleMetric *)v14);
  }
  return awd::SimpleMetricHelper::maybeBufferMetric((uint64_t)a1, (uint64_t *)a4);
}

void sub_1CC59F4CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  uint64_t *v10;
  uint64_t v12;

  v12 = *v10;
  *v10 = 0;
  if (v12)
    sub_1CC598A08((uint64_t)v10, v12);
  _Unwind_Resume(exception_object);
}

__n128 awd::SimpleMetricHelper::takeBufferedMetrics@<Q0>(__n128 *this@<X0>, __n128 *a2@<X8>)
{
  __n128 result;

  result = this[2];
  *a2 = result;
  a2[1].n128_u64[0] = this[3].n128_u64[0];
  this[2].n128_u64[1] = 0;
  this[3].n128_u64[0] = 0;
  this[2].n128_u64[0] = 0;
  return result;
}

int *sub_1CC59F548(int *a1, int *a2)
{
  int *result;
  int *v4;
  int v5;
  int v6;
  int *v7;
  int v8;

  result = a2;
  if (a1 != a2)
  {
    v4 = a1 + 1;
    do
    {
      if (v4 == a2)
        return a2;
      v5 = *(v4 - 1);
      v6 = *v4++;
    }
    while (v5 != v6);
    v7 = v4 - 2;
    while (v4 != a2)
    {
      v8 = v5;
      v5 = *v4;
      if (v8 != *v4)
      {
        v7[1] = v5;
        ++v7;
      }
      ++v4;
    }
    return v7 + 1;
  }
  return result;
}

uint64_t sub_1CC59F5AC(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = sub_1CC59F620((uint64_t)(a1 + 2), a1[1], (_QWORD *)a1[1], *a1, (_QWORD *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_1CC59F620(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v13[3];
  char v14;
  __int128 v15;
  __int128 v16;

  v7 = a7;
  *(_QWORD *)&v16 = a6;
  *((_QWORD *)&v16 + 1) = a7;
  v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  v13[2] = &v16;
  if (a3 == a5)
  {
    v11 = a6;
  }
  else
  {
    v8 = (_QWORD *)(a7 - 8);
    v9 = (_QWORD *)(a7 - 8);
    do
    {
      v10 = *--a3;
      *a3 = 0;
      *v9-- = v10;
      *((_QWORD *)&v16 + 1) = v8;
      v7 -= 8;
      v8 = v9;
    }
    while (a3 != a5);
    v11 = v16;
  }
  v14 = 1;
  sub_1CC59F6B4((uint64_t)v13);
  return v11;
}

uint64_t sub_1CC59F6B4(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_1CC59DA4C(a1);
  return a1;
}

uint64_t awd::AWDTriggerMessage::AWDTriggerMessage(uint64_t result, int a2, uint64_t a3, uint64_t a4, int a5)
{
  *(_DWORD *)(result + 8) = a2;
  *(_QWORD *)result = &off_1E886AD60;
  *(_QWORD *)(result + 16) = a3;
  *(_QWORD *)(result + 24) = a4;
  *(_DWORD *)(result + 32) = a5;
  return result;
}

{
  *(_DWORD *)(result + 8) = a2;
  *(_QWORD *)result = &off_1E886AD60;
  *(_QWORD *)(result + 16) = a3;
  *(_QWORD *)(result + 24) = a4;
  *(_DWORD *)(result + 32) = a5;
  return result;
}

uint64_t awd::AWDTriggerMessage::AWDTriggerMessage(uint64_t a1, xpc_object_t *a2)
{
  *(_QWORD *)a1 = &off_1E886AD60;
  *(_DWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 32) = 0;
  if (MEMORY[0x1D17ADA60](*a2) == MEMORY[0x1E0C812F8])
  {
    *(_DWORD *)(a1 + 8) = xpc_dictionary_get_int64(*a2, "AWDMessageComponentId");
    *(_QWORD *)(a1 + 16) = xpc_dictionary_get_int64(*a2, "AWDMessageTriggerTimestampId");
    *(_DWORD *)(a1 + 28) = xpc_dictionary_get_int64(*a2, "AWDMessageTriggerId");
    *(_DWORD *)(a1 + 32) = xpc_dictionary_get_int64(*a2, "AWDMessageSubmisssionId");
    *(_DWORD *)(a1 + 24) = xpc_dictionary_get_int64(*a2, "AWDMessageTriggeringComponentId");
  }
  return a1;
}

void awd::AWDTriggerMessage::createXpcMessage(awd::AWDTriggerMessage *this@<X0>, xpc_object_t *a2@<X8>)
{
  xpc_object_t v4;
  void *v5;

  v4 = xpc_dictionary_create(0, 0, 0);
  if (v4)
  {
    v5 = v4;
    xpc_dictionary_set_int64(v4, "AWDMessageType", 6);
    xpc_dictionary_set_int64(v5, "AWDMessageComponentId", *((unsigned int *)this + 2));
    xpc_dictionary_set_int64(v5, "AWDMessageTriggerTimestampId", *((_QWORD *)this + 2));
    xpc_dictionary_set_int64(v5, "AWDMessageSubmisssionId", *((unsigned int *)this + 8));
    xpc_dictionary_set_int64(v5, "AWDMessageTriggerId", *((unsigned int *)this + 7));
    xpc_dictionary_set_int64(v5, "AWDMessageTriggeringComponentId", *((unsigned int *)this + 6));
    *a2 = v5;
    if (MEMORY[0x1D17ADA60](v5) == MEMORY[0x1E0C812F8])
      xpc_retain(v5);
    else
      *a2 = xpc_null_create();
    xpc_release(v5);
  }
  else
  {
    *a2 = xpc_null_create();
  }
}

uint64_t awd::AWDTriggerMessage::getTrigger(awd::AWDTriggerMessage *this)
{
  return *((_QWORD *)this + 3);
}

uint64_t awd::AWDTriggerMessage::getTriggerTimestamp(awd::AWDTriggerMessage *this)
{
  return *((_QWORD *)this + 2);
}

uint64_t awd::AWDTriggerMessage::getComponentId(awd::AWDTriggerMessage *this)
{
  return *((unsigned int *)this + 2);
}

void sub_1CC59F904()
{
  JUMPOUT(0x1D17AD544);
}

void AWDPostSimpleMetric(int a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  _QWORD *v5;
  std::__shared_weak_count *v6;

  sub_1CC5AE3CC((uint64_t *)&v5);
  sub_1CC5B0048(v5, a1);
  v2 = v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
}

void sub_1CC59F988(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  awd::AWDServerConnection::~AWDServerConnection((awd::AWDServerConnection *)&a9);
  _Unwind_Resume(a1);
}

void AWDPostSimpleMetricWithBool(int a1, char a2)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  _QWORD *v7;
  std::__shared_weak_count *v8;

  sub_1CC5AE3CC((uint64_t *)&v7);
  sub_1CC5B0150(v7, a1, a2);
  v4 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

void sub_1CC59FA14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  awd::AWDServerConnection::~AWDServerConnection((awd::AWDServerConnection *)&a9);
  _Unwind_Resume(a1);
}

void AWDPostSimpleMetricWithInteger(int a1, uint64_t a2)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  _QWORD *v7;
  std::__shared_weak_count *v8;

  sub_1CC5AE3CC((uint64_t *)&v7);
  sub_1CC5B0260(v7, a1, a2);
  v4 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

void sub_1CC59FAA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  awd::AWDServerConnection::~AWDServerConnection((awd::AWDServerConnection *)&a9);
  _Unwind_Resume(a1);
}

void AWDPostSimpleMetricWithUnsignedInteger(int a1, uint64_t a2)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  _QWORD *v7;
  std::__shared_weak_count *v8;

  sub_1CC5AE3CC((uint64_t *)&v7);
  sub_1CC5B0370(v7, a1, a2);
  v4 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

void sub_1CC59FB2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  awd::AWDServerConnection::~AWDServerConnection((awd::AWDServerConnection *)&a9);
  _Unwind_Resume(a1);
}

void AWDPostSimpleMetricWithString(int a1, uint64_t a2)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  _QWORD *v7;
  std::__shared_weak_count *v8;

  sub_1CC5AE3CC((uint64_t *)&v7);
  sub_1CC5B0150(v7, a1, a2 != 0);
  v4 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

{
  _QWORD *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  void *__p[2];
  uint64_t v9;
  _QWORD *v10;
  std::__shared_weak_count *v11;

  sub_1CC5AE3CC((uint64_t *)&v10);
  v4 = v10;
  if (*(char *)(a2 + 23) < 0)
  {
    sub_1CC594AF4(__p, *(void **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)a2;
    v9 = *(_QWORD *)(a2 + 16);
  }
  sub_1CC5B0480(v4, a1, (uint64_t *)__p);
  if (SHIBYTE(v9) < 0)
    operator delete(__p[0]);
  v5 = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
}

void sub_1CC59FBBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  awd::AWDServerConnection::~AWDServerConnection((awd::AWDServerConnection *)&a9);
  _Unwind_Resume(a1);
}

void sub_1CC59FC8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16)
{
  awd::AWDServerConnection::~AWDServerConnection((awd::AWDServerConnection *)&a16);
  _Unwind_Resume(a1);
}

void AWDPostMetric(awd *a1, void *a2)
{
  id v3;
  _DWORD *v4;
  awd *v5;
  uint64_t v6;
  void *v7;
  id v8;
  id v9;
  char *v10;
  uint64_t v11;
  _DWORD *v12;
  void *v13;
  _QWORD *v14;
  char **v15;
  awd *v16;
  awd *v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t AWDTimestamp;
  awd *v23;
  __int128 v24;
  uint64_t v25;
  _DWORD *v26;

  v3 = a2;
  v4 = (_DWORD *)operator new();
  awd::Metric::Metric((uint64_t)v4);
  v26 = v4;
  *v4 = (_DWORD)a1;
  if ((objc_opt_respondsToSelector() & 1) == 0 || (objc_opt_respondsToSelector() & 1) == 0)
  {
    v6 = 0;
    goto LABEL_6;
  }
  v5 = (awd *)objc_msgSend(v3, "hasTimestamp");
  if ((_DWORD)v5)
  {
    v6 = objc_msgSend(v3, "timestamp");
LABEL_6:
    *((_QWORD *)v26 + 1) = v6;
    goto LABEL_7;
  }
  AWDTimestamp = awd::getAWDTimestamp(v5);
  *((_QWORD *)v26 + 1) = AWDTimestamp;
  objc_msgSend(v3, "setTimestamp:", AWDTimestamp);
LABEL_7:
  v7 = (void *)MEMORY[0x1D17AD778]();
  v8 = objc_alloc_init(MEMORY[0x1E0D82B98]);
  objc_msgSend(v3, "writeTo:", v8);
  objc_msgSend(v8, "immutableData");
  v9 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
  v10 = (char *)objc_msgSend(v9, "bytes");
  v11 = objc_msgSend(v9, "length");
  awd::createTagForProtobuf(a1, v11, (unint64_t *)&v24);
  v12 = v26;
  v14 = v26 + 4;
  v13 = (void *)*((_QWORD *)v26 + 2);
  v15 = (char **)v26;
  if (v13)
  {
    *((_QWORD *)v26 + 3) = v13;
    operator delete(v13);
    *v14 = 0;
    v14[1] = 0;
    v14[2] = 0;
    v15 = (char **)v26;
  }
  *((_OWORD *)v12 + 1) = v24;
  *((_QWORD *)v12 + 4) = v25;
  sub_1CC592C7C((uint64_t)(v15 + 2), v15[3], v10, &v10[v11], v11);

  objc_autoreleasePoolPop(v7);
  *((_BYTE *)v26 + 40) = 0;
  sub_1CC5AE3CC((uint64_t *)&v24);
  v16 = (awd *)v26;
  v26 = 0;
  v23 = v16;
  sub_1CC5AFEF8((awd *)v24, &v23);
  v17 = v23;
  v23 = 0;
  if (v17)
    sub_1CC598A08((uint64_t)&v23, (uint64_t)v17);
  v18 = (std::__shared_weak_count *)*((_QWORD *)&v24 + 1);
  if (*((_QWORD *)&v24 + 1))
  {
    v19 = (unint64_t *)(*((_QWORD *)&v24 + 1) + 8);
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  v21 = (uint64_t)v26;
  v26 = 0;
  if (v21)
    sub_1CC598A08((uint64_t)&v26, v21);

}

void sub_1CC59FED8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  void *v14;
  uint64_t v16;
  uint64_t v17;

  v16 = a10;
  a10 = 0;
  if (v16)
    sub_1CC598A08((uint64_t)&a10, v16);
  awd::AWDServerConnection::~AWDServerConnection((awd::AWDServerConnection *)&a11);
  v17 = a14;
  a14 = 0;
  if (v17)
    sub_1CC598A08((uint64_t)&a14, v17);

  _Unwind_Resume(a1);
}

void AWDPostMetric(const wireless_diagnostics::google::protobuf::MessageLite *a1, const wireless_diagnostics::google::protobuf::MessageLite *a2)
{
  uint64_t v4;
  _QWORD *v5;
  void *v6;
  _QWORD *v7;
  awd *v8;
  awd *v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  awd *v14;
  __int128 v15;
  uint64_t v16;
  _QWORD *v17;

  v4 = operator new();
  awd::Metric::Metric(v4);
  v17 = (_QWORD *)v4;
  *(_QWORD *)(v4 + 8) = 0;
  *(_DWORD *)v4 = (_DWORD)a1;
  awd::serializeMetric(a2, a1, (unint64_t *)&v15);
  v5 = v17;
  v7 = v17 + 2;
  v6 = (void *)v17[2];
  if (v6)
  {
    v17[3] = v6;
    operator delete(v6);
    *v7 = 0;
    v7[1] = 0;
    v7[2] = 0;
  }
  *((_OWORD *)v5 + 1) = v15;
  v5[4] = v16;
  sub_1CC5AE3CC((uint64_t *)&v15);
  v8 = (awd *)v17;
  v17 = 0;
  v14 = v8;
  sub_1CC5AFEF8((awd *)v15, &v14);
  v9 = v14;
  v14 = 0;
  if (v9)
    sub_1CC598A08((uint64_t)&v14, (uint64_t)v9);
  v10 = (std::__shared_weak_count *)*((_QWORD *)&v15 + 1);
  if (*((_QWORD *)&v15 + 1))
  {
    v11 = (unint64_t *)(*((_QWORD *)&v15 + 1) + 8);
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  v13 = (uint64_t)v17;
  v17 = 0;
  if (v13)
    sub_1CC598A08((uint64_t)&v17, v13);
}

void sub_1CC5A0098(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v15;
  uint64_t v16;

  v15 = a10;
  a10 = 0;
  if (v15)
    sub_1CC598A08((uint64_t)&a10, v15);
  awd::AWDServerConnection::~AWDServerConnection((awd::AWDServerConnection *)&a11);
  v16 = a14;
  a14 = 0;
  if (v16)
    sub_1CC598A08((uint64_t)&a14, v16);
  _Unwind_Resume(a1);
}

void AWDPostMetric(awd *a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  void *v6;
  _QWORD *v7;
  awd *v8;
  awd *v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  awd *v14;
  __int128 v15;
  uint64_t v16;
  _QWORD *v17;

  v4 = operator new();
  awd::Metric::Metric(v4);
  v17 = (_QWORD *)v4;
  *(_QWORD *)(v4 + 8) = 0;
  *(_DWORD *)v4 = (_DWORD)a1;
  awd::serializeMetric(a2, a1, (uint64_t)&v15);
  v5 = v17;
  v7 = v17 + 2;
  v6 = (void *)v17[2];
  if (v6)
  {
    v17[3] = v6;
    operator delete(v6);
    *v7 = 0;
    v7[1] = 0;
    v7[2] = 0;
  }
  *((_OWORD *)v5 + 1) = v15;
  v5[4] = v16;
  sub_1CC5AE3CC((uint64_t *)&v15);
  v8 = (awd *)v17;
  v17 = 0;
  v14 = v8;
  sub_1CC5AFEF8((awd *)v15, &v14);
  v9 = v14;
  v14 = 0;
  if (v9)
    sub_1CC598A08((uint64_t)&v14, (uint64_t)v9);
  v10 = (std::__shared_weak_count *)*((_QWORD *)&v15 + 1);
  if (*((_QWORD *)&v15 + 1))
  {
    v11 = (unint64_t *)(*((_QWORD *)&v15 + 1) + 8);
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  v13 = (uint64_t)v17;
  v17 = 0;
  if (v13)
    sub_1CC598A08((uint64_t)&v17, v13);
}

void sub_1CC5A0220(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v15;
  uint64_t v16;

  v15 = a10;
  a10 = 0;
  if (v15)
    sub_1CC598A08((uint64_t)&a10, v15);
  awd::AWDServerConnection::~AWDServerConnection((awd::AWDServerConnection *)&a11);
  v16 = a14;
  a14 = 0;
  if (v16)
    sub_1CC598A08((uint64_t)&a14, v16);
  _Unwind_Resume(a1);
}

uint64_t awd::AWDRegisterTriggerMessage::AWDRegisterTriggerMessage(uint64_t result, int a2, int a3, _QWORD *a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  *(_DWORD *)(result + 8) = a2;
  *(_DWORD *)(result + 12) = a3;
  *(_QWORD *)result = &off_1E886AE68;
  *(_QWORD *)(result + 16) = *a4;
  v5 = a4 + 1;
  v6 = a4[1];
  *(_QWORD *)(result + 24) = v6;
  v7 = result + 24;
  v8 = a4[2];
  *(_QWORD *)(result + 32) = v8;
  if (v8)
  {
    *(_QWORD *)(v6 + 16) = v7;
    *a4 = v5;
    *v5 = 0;
    a4[2] = 0;
  }
  else
  {
    *(_QWORD *)(result + 16) = v7;
  }
  *(_QWORD *)(result + 40) = a5;
  return result;
}

{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  *(_DWORD *)(result + 8) = a2;
  *(_DWORD *)(result + 12) = a3;
  *(_QWORD *)result = &off_1E886AE68;
  *(_QWORD *)(result + 16) = *a4;
  v5 = a4 + 1;
  v6 = a4[1];
  *(_QWORD *)(result + 24) = v6;
  v7 = result + 24;
  v8 = a4[2];
  *(_QWORD *)(result + 32) = v8;
  if (v8)
  {
    *(_QWORD *)(v6 + 16) = v7;
    *a4 = v5;
    *v5 = 0;
    a4[2] = 0;
  }
  else
  {
    *(_QWORD *)(result + 16) = v7;
  }
  *(_QWORD *)(result + 40) = a5;
  return result;
}

uint64_t awd::AWDRegisterTriggerMessage::_metricCountsApplier(uint64_t **this, unint64_t a2, void *a3)
{
  int v5;
  unsigned int int64;
  unsigned int *p_int64;

  if (MEMORY[0x1D17ADA60](a3) == MEMORY[0x1E0C812F8])
  {
    int64 = xpc_dictionary_get_int64(a3, "AWDMessageMetricCountsArrayMetricId");
    v5 = xpc_dictionary_get_int64(a3, "AWDMessageMetricCountsArrayCount");
    p_int64 = &int64;
    *((_DWORD *)sub_1CC5A0864(this + 2, &int64, (uint64_t)&unk_1CC5C77A4, &p_int64) + 8) = v5;
  }
  return 1;
}

uint64_t awd::AWDRegisterTriggerMessage::AWDRegisterTriggerMessage(uint64_t a1, xpc_object_t *a2)
{
  xpc_object_t value;
  _QWORD applier[5];

  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)a1 = &off_1E886AE68;
  *(_QWORD *)(a1 + 16) = a1 + 24;
  *(_QWORD *)(a1 + 32) = 0;
  if (MEMORY[0x1D17ADA60](*a2) == MEMORY[0x1E0C812F8])
  {
    *(_DWORD *)(a1 + 8) = xpc_dictionary_get_int64(*a2, "AWDMessageComponentId");
    *(_DWORD *)(a1 + 12) = xpc_dictionary_get_int64(*a2, "AWDMessageTriggerId");
    value = xpc_dictionary_get_value(*a2, "AWDMessageMetricCountsArray");
    applier[0] = MEMORY[0x1E0C809B0];
    applier[1] = 0x40000000;
    applier[2] = sub_1CC5A04E8;
    applier[3] = &unk_1E886BC98;
    applier[4] = a1;
    xpc_array_apply(value, applier);
    *(_QWORD *)(a1 + 40) = xpc_dictionary_get_int64(*a2, "AWDMessageLongesttime");
  }
  return a1;
}

void sub_1CC5A04C8(_Unwind_Exception *a1)
{
  uint64_t v1;
  _QWORD **v2;

  sub_1CC598878(v1, *v2);
  _Unwind_Resume(a1);
}

uint64_t sub_1CC5A04E8(uint64_t a1, unint64_t a2, void *a3)
{
  awd::AWDRegisterTriggerMessage::_metricCountsApplier(*(uint64_t ***)(a1 + 32), a2, a3);
  return 1;
}

void awd::AWDRegisterTriggerMessage::createXpcMessage(awd::AWDRegisterTriggerMessage *this@<X0>, xpc_object_t *a2@<X8>)
{
  xpc_object_t v4;
  void *v5;
  xpc_object_t v6;
  xpc_object_t v7;
  awd::AWDRegisterTriggerMessage *v8;
  uint64_t v9;
  xpc_object_t v10;
  xpc_object_t v11;
  awd::AWDRegisterTriggerMessage *v12;
  awd::AWDRegisterTriggerMessage *v13;
  BOOL v14;

  v4 = xpc_dictionary_create(0, 0, 0);
  if (v4)
  {
    v5 = v4;
    xpc_dictionary_set_int64(v4, "AWDMessageType", 5);
    xpc_dictionary_set_int64(v5, "AWDMessageComponentId", *((unsigned int *)this + 2));
    xpc_dictionary_set_int64(v5, "AWDMessageTriggerId", *((unsigned int *)this + 3));
    xpc_dictionary_set_int64(v5, "AWDMessageLongesttime", *((_QWORD *)this + 5));
    v6 = xpc_array_create(0, 0);
    if (v6 || (v6 = xpc_null_create()) != 0)
    {
      if (MEMORY[0x1D17ADA60](v6) == MEMORY[0x1E0C812C8])
      {
        xpc_retain(v6);
        v7 = v6;
      }
      else
      {
        v7 = xpc_null_create();
      }
    }
    else
    {
      v7 = xpc_null_create();
      v6 = 0;
    }
    xpc_release(v6);
    v8 = (awd::AWDRegisterTriggerMessage *)*((_QWORD *)this + 2);
    if (v8 != (awd::AWDRegisterTriggerMessage *)((char *)this + 24))
    {
      v9 = MEMORY[0x1E0C812F8];
      do
      {
        v10 = xpc_dictionary_create(0, 0, 0);
        if (v10 || (v10 = xpc_null_create()) != 0)
        {
          if (MEMORY[0x1D17ADA60](v10) == v9)
          {
            xpc_retain(v10);
            v11 = v10;
          }
          else
          {
            v11 = xpc_null_create();
          }
        }
        else
        {
          v11 = xpc_null_create();
          v10 = 0;
        }
        xpc_release(v10);
        xpc_dictionary_set_int64(v11, "AWDMessageMetricCountsArrayMetricId", *((unsigned int *)v8 + 7));
        xpc_dictionary_set_int64(v11, "AWDMessageMetricCountsArrayCount", *((int *)v8 + 8));
        xpc_array_append_value(v7, v11);
        xpc_release(v11);
        v12 = (awd::AWDRegisterTriggerMessage *)*((_QWORD *)v8 + 1);
        if (v12)
        {
          do
          {
            v13 = v12;
            v12 = *(awd::AWDRegisterTriggerMessage **)v12;
          }
          while (v12);
        }
        else
        {
          do
          {
            v13 = (awd::AWDRegisterTriggerMessage *)*((_QWORD *)v8 + 2);
            v14 = *(_QWORD *)v13 == (_QWORD)v8;
            v8 = v13;
          }
          while (!v14);
        }
        v8 = v13;
      }
      while (v13 != (awd::AWDRegisterTriggerMessage *)((char *)this + 24));
    }
    xpc_dictionary_set_value(v5, "AWDMessageMetricCountsArray", v7);
    *a2 = v5;
    if (MEMORY[0x1D17ADA60](v5) == MEMORY[0x1E0C812F8])
      xpc_retain(v5);
    else
      *a2 = xpc_null_create();
    xpc_release(v5);
    xpc_release(v7);
  }
  else
  {
    *a2 = xpc_null_create();
  }
}

void sub_1CC5A077C(_Unwind_Exception *a1)
{
  void *v1;

  xpc_release(v1);
  _Unwind_Resume(a1);
}

uint64_t awd::AWDRegisterTriggerMessage::getComponentId(awd::AWDRegisterTriggerMessage *this)
{
  return *((unsigned int *)this + 2);
}

uint64_t awd::AWDRegisterTriggerMessage::getTriggerId(awd::AWDRegisterTriggerMessage *this)
{
  return *((unsigned int *)this + 3);
}

uint64_t awd::AWDRegisterTriggerMessage::getMetricCounts(awd::AWDRegisterTriggerMessage *this)
{
  return (uint64_t)this + 16;
}

uint64_t awd::AWDRegisterTriggerMessage::getLongestTime(awd::AWDRegisterTriggerMessage *this)
{
  return *((_QWORD *)this + 5);
}

uint64_t sub_1CC5A07EC(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E886AE68;
  sub_1CC598878(a1 + 16, *(_QWORD **)(a1 + 24));
  return a1;
}

void sub_1CC5A0820(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E886AE68;
  sub_1CC598878(a1 + 16, *(_QWORD **)(a1 + 24));
  JUMPOUT(0x1D17AD544);
}

uint64_t *sub_1CC5A0864(uint64_t **a1, unsigned int *a2, uint64_t a3, unsigned int **a4)
{
  uint64_t *v6;
  uint64_t **v7;
  unsigned int v8;
  uint64_t **v9;
  unsigned int v10;
  uint64_t *v11;

  v7 = a1 + 1;
  v6 = a1[1];
  if (v6)
  {
    v8 = *a2;
    while (1)
    {
      while (1)
      {
        v9 = (uint64_t **)v6;
        v10 = *((_DWORD *)v6 + 7);
        if (v8 >= v10)
          break;
        v6 = *v9;
        v7 = v9;
        if (!*v9)
          goto LABEL_10;
      }
      if (v10 >= v8)
        break;
      v6 = v9[1];
      if (!v6)
      {
        v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v9 = a1 + 1;
LABEL_10:
    v11 = (uint64_t *)operator new(0x28uLL);
    *(uint64_t *)((char *)v11 + 28) = **a4;
    sub_1CC598AF0(a1, (uint64_t)v9, v7, v11);
    return v11;
  }
  return (uint64_t *)v9;
}

uint64_t awd::AWDTriggerFilter::AWDTriggerFilter(ctu::OsLogLogger *a1, uint64_t a2, int a3, _QWORD *a4)
{
  uint64_t result;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;

  result = ctu::OsLogLogger::OsLogLogger(a1, "com.apple.awd.framework", "trigger");
  *(_DWORD *)(result + 8) = a3;
  v7 = a4[1];
  *(_QWORD *)(result + 16) = *a4;
  *(_QWORD *)(result + 24) = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 16);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  *(_QWORD *)(result + 48) = 0;
  *(_QWORD *)(result + 40) = 0;
  *(_QWORD *)(result + 32) = result + 40;
  return result;
}

uint64_t awd::AWDTriggerFilter::isMetricSetAsTrigger(awd::AWDTriggerFilter *this, unsigned int a2)
{
  uint64_t *v2;
  unsigned int v3;

  v2 = (uint64_t *)*((_QWORD *)this + 5);
  if (!v2)
    return 0;
  while (1)
  {
    v3 = *((_DWORD *)v2 + 8);
    if (v3 <= a2)
      break;
LABEL_5:
    v2 = (uint64_t *)*v2;
    if (!v2)
      return 0;
  }
  if (v3 < a2)
  {
    ++v2;
    goto LABEL_5;
  }
  return 1;
}

uint64_t awd::AWDTriggerFilter::shouldSubmitMetricAsTrigger(awd::AWDTriggerFilter *this, unsigned int a2)
{
  char *v2;
  char *v3;
  char *v4;
  char *v5;
  unsigned int v6;
  BOOL v7;
  char **v8;

  v4 = (char *)*((_QWORD *)this + 5);
  v2 = (char *)this + 40;
  v3 = v4;
  if (!v4)
    return 0;
  v5 = v2;
  do
  {
    v6 = *((_DWORD *)v3 + 8);
    v7 = v6 >= a2;
    if (v6 >= a2)
      v8 = (char **)v3;
    else
      v8 = (char **)(v3 + 8);
    if (v7)
      v5 = v3;
    v3 = *v8;
  }
  while (*v8);
  if (v5 == v2 || *((_DWORD *)v5 + 8) > a2)
    return 0;
  if (*((_DWORD *)v5 + 22))
    return 2;
  return 1;
}

BOOL awd::AWDTriggerFilter::evaluateRandomSamplingForTrigger(awd::AWDTriggerFilter *this, unsigned int a2)
{
  uint64_t v2;
  _DWORD *v5;
  unsigned int v6;
  BOOL v7;
  uint64_t *v8;
  unsigned int PRN10000;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  unsigned int v13;
  _BOOL8 v14;
  NSObject *v15;
  const char *v16;
  PRNGenerator *v18;
  _QWORD v19[3];

  v19[2] = *MEMORY[0x1E0C80C00];
  v2 = *((_QWORD *)this + 5);
  if (!v2)
    return 0;
  v5 = (_DWORD *)((char *)this + 40);
  do
  {
    v6 = *(_DWORD *)(v2 + 32);
    v7 = v6 >= a2;
    if (v6 >= a2)
      v8 = (uint64_t *)v2;
    else
      v8 = (uint64_t *)(v2 + 8);
    if (v7)
      v5 = (_DWORD *)v2;
    v2 = *v8;
  }
  while (*v8);
  if (v5 == (_DWORD *)((char *)this + 40) || v5[8] > a2 || !v5[22])
    return 0;
  PRNGenerator::get((uint64_t *)&v18);
  PRN10000 = PRNGenerator::generatePRN10000(v18);
  v10 = (std::__shared_weak_count *)v19[0];
  if (v19[0])
  {
    v11 = (unint64_t *)(v19[0] + 8);
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  v13 = v5[22];
  v14 = PRN10000 <= v13;
  v15 = *(NSObject **)this;
  if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
  {
    v16 = "is skip";
    if (PRN10000 <= v13)
      v16 = "is keep";
    LODWORD(v18) = 67109378;
    HIDWORD(v18) = a2;
    LOWORD(v19[0]) = 2080;
    *(_QWORD *)((char *)v19 + 2) = v16;
    _os_log_impl(&dword_1CC590000, v15, OS_LOG_TYPE_INFO, "client.trigger:#I Random sample for 0x%x %s", (uint8_t *)&v18, 0x12u);
  }
  return v14;
}

void sub_1CC5A0B98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  awd::AWDServerConnection::~AWDServerConnection((awd::AWDServerConnection *)&a9);
  _Unwind_Resume(a1);
}

void awd::AWDTriggerFilter::setConfiguration(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  NSObject *v8;
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  int v16;
  NSObject *v17;
  int v18;
  uint64_t **v19;
  uint64_t **v20;
  char *v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  char *v30;
  char *v31;
  int v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t *v35;
  void **v36;
  uint64_t v37;
  int v38;
  int v39;
  uint64_t *v40;
  unint64_t v41;
  char *v42;
  uint64_t *v43;
  char *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  char *v49;
  char *v50;
  int v51;
  int v52;
  int v53;
  NSObject *v54;
  unint64_t *p_shared_owners;
  unint64_t v56;
  std::__shared_weak_count *v57;
  uint64_t *v58;
  _QWORD *v59;
  uint64_t **v60;
  xpc_object_t object;
  uint64_t v62[3];
  unsigned int v63;
  int v64;
  uint64_t *v65;
  _QWORD *v66[2];
  _QWORD *v67;
  std::__shared_weak_count *v68;
  uint8_t buf[8];
  __int16 v70;
  int v71;
  _QWORD *v72[6];

  v72[4] = *(_QWORD **)MEMORY[0x1E0C80C00];
  v4 = (_QWORD *)(a1 + 40);
  v60 = (uint64_t **)(a1 + 32);
  sub_1CC5A165C(a1 + 32, *(_QWORD **)(a1 + 40));
  *(v4 - 1) = v4;
  *v4 = 0;
  v4[1] = 0;
  v67 = 0;
  v68 = 0;
  v5 = (std::__shared_weak_count *)*(v4 - 2);
  if (!v5)
  {
    v7 = 0;
    goto LABEL_64;
  }
  v6 = std::__shared_weak_count::lock(v5);
  v7 = v6;
  v68 = v6;
  if (!v6 || (v67 = *(_QWORD **)(a1 + 16), (v59 = v67) == 0))
  {
LABEL_64:
    v54 = *(NSObject **)a1;
    if (os_log_type_enabled(*(os_log_t *)a1, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1CC590000, v54, OS_LOG_TYPE_DEFAULT, "client.trigger:#E Unable to set configuration because AWDServerFacade is no longer valid.", buf, 2u);
    }
    goto LABEL_66;
  }
  v57 = v6;
  v66[0] = 0;
  v66[1] = 0;
  v65 = (uint64_t *)v66;
  v8 = *(NSObject **)a1;
  if (os_log_type_enabled(*(os_log_t *)a1, OS_LOG_TYPE_DEFAULT))
  {
    v9 = *(_DWORD *)(a1 + 8);
    v10 = *(_DWORD *)(*(_QWORD *)a2 + 16);
    *(_DWORD *)buf = 67109376;
    *(_DWORD *)&buf[4] = v9;
    v70 = 1024;
    v71 = v10;
    _os_log_impl(&dword_1CC590000, v8, OS_LOG_TYPE_DEFAULT, "client.trigger:#N CCFG for cid 0x%x has # of profiles: %d", buf, 0xEu);
  }
  v11 = *(int *)(*(_QWORD *)a2 + 16);
  if ((_DWORD)v11)
  {
    v12 = 0;
    v13 = *(uint64_t **)(*(_QWORD *)a2 + 8);
    v14 = &v13[v11];
    v58 = v14;
    while (1)
    {
      v15 = *v13;
      v16 = *(_DWORD *)(*v13 + 132);
      if ((v16 & 1) == 0)
        break;
      v18 = *(_DWORD *)(v15 + 8);
      if ((v16 & 8) != 0)
        goto LABEL_14;
LABEL_61:
      if (++v13 == v14)
        goto LABEL_62;
    }
    v17 = *(NSObject **)a1;
    v18 = 0;
    if (os_log_type_enabled(*(os_log_t *)a1, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1CC590000, v17, OS_LOG_TYPE_DEFAULT, "client.trigger:#E Got profile with no id!", buf, 2u);
      v18 = 0;
      v16 = *(_DWORD *)(v15 + 132);
    }
    if ((v16 & 8) == 0)
      goto LABEL_61;
LABEL_14:
    v64 = *(_DWORD *)(v15 + 32);
    *(_QWORD *)buf = &v64;
    v19 = sub_1CC5A16E8(v60, (unsigned int *)&v64, (uint64_t)&unk_1CC5C77B0, (_DWORD **)buf);
    v20 = v19;
    v21 = (char *)v19[6];
    v22 = (uint64_t)(v19 + 7);
    v23 = v19[7];
    if (v21 >= (char *)v23)
    {
      v25 = v19[5];
      v26 = (v21 - (char *)v25) >> 2;
      if ((unint64_t)(v26 + 1) >> 62)
        sub_1CC592ABC();
      v27 = (char *)v23 - (char *)v25;
      v28 = ((char *)v23 - (char *)v25) >> 1;
      if (v28 <= v26 + 1)
        v28 = v26 + 1;
      if (v27 >= 0x7FFFFFFFFFFFFFFCLL)
        v29 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v29 = v28;
      if (v29)
      {
        v30 = (char *)sub_1CC594C00(v22, v29);
        v25 = v20[5];
        v21 = (char *)v20[6];
      }
      else
      {
        v30 = 0;
      }
      v31 = &v30[4 * v26];
      *(_DWORD *)v31 = v18;
      v24 = (uint64_t *)(v31 + 4);
      while (v21 != (char *)v25)
      {
        v32 = *((_DWORD *)v21 - 1);
        v21 -= 4;
        *((_DWORD *)v31 - 1) = v32;
        v31 -= 4;
      }
      v20[5] = (uint64_t *)v31;
      v20[6] = v24;
      v20[7] = (uint64_t *)&v30[4 * v29];
      if (v25)
        operator delete(v25);
    }
    else
    {
      *(_DWORD *)v21 = v18;
      v24 = (uint64_t *)(v21 + 4);
    }
    v20[6] = v24;
    if ((*(_BYTE *)(v15 + 133) & 2) != 0)
      *((_DWORD *)v20 + 22) = *(_DWORD *)(v15 + 80);
    v33 = *(int *)(v15 + 48);
    if ((_DWORD)v33)
    {
      v34 = *(uint64_t **)(v15 + 40);
      v35 = &v34[v33];
      v36 = (void **)(v20 + 8);
      do
      {
        v37 = *v34;
        v38 = *(_DWORD *)(*v34 + 128);
        if ((v38 & 1) != 0)
        {
          v63 = *(_DWORD *)(v37 + 8);
          if ((v38 & 0x20) != 0)
          {
            v39 = *(_DWORD *)(v37 + 28);
            *(_QWORD *)buf = &v63;
            v40 = sub_1CC5A0864(&v65, &v63, (uint64_t)&unk_1CC5C77B0, (unsigned int **)buf);
            *((_DWORD *)v40 + 8) += v39;
            v38 = *(_DWORD *)(v37 + 128);
          }
          if ((v38 & 0x80) != 0 && v12 <= *(int *)(v37 + 36))
            v12 = *(int *)(v37 + 36);
          if ((v38 & 0x100) != 0 && *(_BYTE *)(v37 + 40))
          {
            v42 = (char *)v20[9];
            v41 = (unint64_t)v20[10];
            if ((unint64_t)v42 >= v41)
            {
              v44 = (char *)*v36;
              v45 = (v42 - (_BYTE *)*v36) >> 2;
              v46 = v45 + 1;
              if ((unint64_t)(v45 + 1) >> 62)
                sub_1CC592ABC();
              v47 = v41 - (_QWORD)v44;
              if (v47 >> 1 > v46)
                v46 = v47 >> 1;
              if ((unint64_t)v47 >= 0x7FFFFFFFFFFFFFFCLL)
                v48 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v48 = v46;
              if (v48)
              {
                v49 = (char *)sub_1CC594C00((uint64_t)(v20 + 10), v48);
                v44 = (char *)v20[8];
                v42 = (char *)v20[9];
              }
              else
              {
                v49 = 0;
              }
              v50 = &v49[4 * v45];
              *(_DWORD *)v50 = v63;
              v43 = (uint64_t *)(v50 + 4);
              while (v42 != v44)
              {
                v51 = *((_DWORD *)v42 - 1);
                v42 -= 4;
                *((_DWORD *)v50 - 1) = v51;
                v50 -= 4;
              }
              v20[8] = (uint64_t *)v50;
              v20[9] = v43;
              v20[10] = (uint64_t *)&v49[4 * v48];
              if (v44)
                operator delete(v44);
            }
            else
            {
              *(_DWORD *)v42 = v63;
              v43 = (uint64_t *)(v42 + 4);
            }
            v20[9] = v43;
          }
        }
        ++v34;
      }
      while (v34 != v35);
    }
    v52 = *(_DWORD *)(a1 + 8);
    v53 = v64;
    sub_1CC5A1820(v62, (uint64_t)&v65);
    awd::AWDRegisterTriggerMessage::AWDRegisterTriggerMessage((uint64_t)buf, v52, v53, v62, v12);
    v14 = v58;
    sub_1CC598878((uint64_t)v62, (_QWORD *)v62[1]);
    awd::AWDRegisterTriggerMessage::createXpcMessage((awd::AWDRegisterTriggerMessage *)buf, &object);
    awd::AWDServerFacade::sendMessage(v59, &object);
    xpc_release(object);
    object = 0;
    *(_QWORD *)buf = &off_1E886AE68;
    sub_1CC598878((uint64_t)v72, v72[1]);
    goto LABEL_61;
  }
LABEL_62:
  sub_1CC598878((uint64_t)&v65, v66[0]);
  v7 = v57;
LABEL_66:
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v56 = __ldaxr(p_shared_owners);
    while (__stlxr(v56 - 1, p_shared_owners));
    if (!v56)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

void sub_1CC5A10C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, xpc_object_t object, char a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,_QWORD *a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30)
{
  sub_1CC598878((uint64_t)&a21, a22);
  awd::AWDServerConnection::~AWDServerConnection((awd::AWDServerConnection *)&a24);
  _Unwind_Resume(a1);
}

char *awd::AWDTriggerFilter::profileIdForTriggerId@<X0>(awd::AWDTriggerFilter *this@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  char *result;
  uint64_t v4;
  uint64_t v5;
  char *v7;
  unsigned int v8;
  BOOL v9;
  uint64_t *v10;

  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  v5 = *((_QWORD *)this + 5);
  result = (char *)this + 40;
  v4 = v5;
  if (v5)
  {
    v7 = result;
    do
    {
      v8 = *(_DWORD *)(v4 + 32);
      v9 = v8 >= a2;
      if (v8 >= a2)
        v10 = (uint64_t *)v4;
      else
        v10 = (uint64_t *)(v4 + 8);
      if (v9)
        v7 = (char *)v4;
      v4 = *v10;
    }
    while (*v10);
    if (v7 != result && *((_DWORD *)v7 + 8) <= a2 && v7 + 40 != (char *)a3)
      return sub_1CC5A1B24((char *)a3, *((char **)v7 + 5), *((_QWORD *)v7 + 6), (uint64_t)(*((_QWORD *)v7 + 6) - *((_QWORD *)v7 + 5)) >> 2);
  }
  return result;
}

void sub_1CC5A11D4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void awd::AWDTriggerFilter::getAllTriggers(awd::AWDTriggerFilter *this@<X0>, char **a2@<X8>)
{
  char *v2;
  char *v3;
  char *v5;
  _QWORD *v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  int v15;
  char *v16;
  char *v17;
  BOOL v18;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v2 = (char *)*((_QWORD *)this + 4);
  v3 = (char *)this + 40;
  if (v2 != (char *)this + 40)
  {
    v5 = 0;
    v6 = a2 + 2;
    do
    {
      if ((unint64_t)v5 >= *v6)
      {
        v7 = *a2;
        v8 = (v5 - *a2) >> 2;
        v9 = v8 + 1;
        if ((unint64_t)(v8 + 1) >> 62)
          sub_1CC592ABC();
        v10 = *v6 - (_QWORD)v7;
        if (v10 >> 1 > v9)
          v9 = v10 >> 1;
        if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFFCLL)
          v11 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v11 = v9;
        if (v11)
        {
          v12 = (char *)sub_1CC594C00((uint64_t)v6, v11);
          v7 = *a2;
          v5 = a2[1];
        }
        else
        {
          v12 = 0;
        }
        v13 = &v12[4 * v8];
        *(_DWORD *)v13 = *((_DWORD *)v2 + 8);
        v14 = v13 + 4;
        while (v5 != v7)
        {
          v15 = *((_DWORD *)v5 - 1);
          v5 -= 4;
          *((_DWORD *)v13 - 1) = v15;
          v13 -= 4;
        }
        *a2 = v13;
        a2[1] = v14;
        a2[2] = &v12[4 * v11];
        if (v7)
          operator delete(v7);
        v5 = v14;
      }
      else
      {
        *(_DWORD *)v5 = *((_DWORD *)v2 + 8);
        v5 += 4;
      }
      a2[1] = v5;
      v16 = (char *)*((_QWORD *)v2 + 1);
      if (v16)
      {
        do
        {
          v17 = v16;
          v16 = *(char **)v16;
        }
        while (v16);
      }
      else
      {
        do
        {
          v17 = (char *)*((_QWORD *)v2 + 2);
          v18 = *(_QWORD *)v17 == (_QWORD)v2;
          v2 = v17;
        }
        while (!v18);
      }
      v2 = v17;
    }
    while (v17 != v3);
  }
}

void sub_1CC5A1334(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void awd::AWDTriggerFilter::getAllQueriableMetrics(awd::AWDTriggerFilter *this@<X0>, _QWORD *a2@<X8>)
{
  char *v3;
  char *v4;
  unsigned int *v5;
  unsigned int *v6;
  char *v7;
  char *v8;
  BOOL v9;
  uint64_t *v10;
  uint64_t *v11;
  _QWORD *v12[2];

  v12[0] = 0;
  v12[1] = 0;
  v11 = (uint64_t *)v12;
  v3 = (char *)*((_QWORD *)this + 4);
  v4 = (char *)this + 40;
  if (v3 == (char *)this + 40)
  {
    v10 = (uint64_t *)v12;
  }
  else
  {
    do
    {
      v5 = (unsigned int *)*((_QWORD *)v3 + 8);
      v6 = (unsigned int *)*((_QWORD *)v3 + 9);
      while (v5 != v6)
      {
        sub_1CC5A1C6C(&v11, (uint64_t *)v12, v5, v5);
        ++v5;
      }
      v7 = (char *)*((_QWORD *)v3 + 1);
      if (v7)
      {
        do
        {
          v8 = v7;
          v7 = *(char **)v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (char *)*((_QWORD *)v3 + 2);
          v9 = *(_QWORD *)v8 == (_QWORD)v3;
          v3 = v8;
        }
        while (!v9);
      }
      v3 = v8;
    }
    while (v8 != v4);
    v10 = v11;
  }
  sub_1CC5A1CF0(a2, v10, v12);
  sub_1CC598878((uint64_t)&v11, v12[0]);
}

void sub_1CC5A142C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, _QWORD *a11)
{
  sub_1CC598878((uint64_t)&a10, a11);
  _Unwind_Resume(a1);
}

char *awd::AWDTriggerFilter::getQueriableMetricsForTrigger@<X0>(awd::AWDTriggerFilter *this@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  char *result;
  uint64_t v4;
  uint64_t v5;
  char *v7;
  unsigned int v8;
  BOOL v9;
  uint64_t *v10;

  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  v5 = *((_QWORD *)this + 5);
  result = (char *)this + 40;
  v4 = v5;
  if (v5)
  {
    v7 = result;
    do
    {
      v8 = *(_DWORD *)(v4 + 32);
      v9 = v8 >= a2;
      if (v8 >= a2)
        v10 = (uint64_t *)v4;
      else
        v10 = (uint64_t *)(v4 + 8);
      if (v9)
        v7 = (char *)v4;
      v4 = *v10;
    }
    while (*v10);
    if (v7 != result && *((_DWORD *)v7 + 8) <= a2)
      return sub_1CC5A1E38((char *)a3, *((char **)v7 + 8), *((_QWORD *)v7 + 9), (uint64_t)(*((_QWORD *)v7 + 9) - *((_QWORD *)v7 + 8)) >> 2);
  }
  return result;
}

void sub_1CC5A14BC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void awd::AWDTriggerFilter::debugLog(NSObject **this)
{
  NSObject *v2;
  int v3;
  awd::AWDTriggerFilter *v4;
  int *v5;
  int *v6;
  NSObject *v7;
  int v8;
  int v9;
  awd::AWDTriggerFilter *v10;
  awd::AWDTriggerFilter *v11;
  BOOL v12;
  uint8_t buf[4];
  int v14;
  __int16 v15;
  int v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v2 = *this;
  if (os_log_type_enabled(*this, OS_LOG_TYPE_INFO))
  {
    v3 = *((_DWORD *)this + 2);
    *(_DWORD *)buf = 67109120;
    v14 = v3;
    _os_log_impl(&dword_1CC590000, v2, OS_LOG_TYPE_INFO, "client.trigger:#I  The following are Trigger IDs that component 0x%x expects:", buf, 8u);
  }
  v4 = (awd::AWDTriggerFilter *)this[4];
  if (v4 != (awd::AWDTriggerFilter *)(this + 5))
  {
    do
    {
      v5 = (int *)*((_QWORD *)v4 + 5);
      v6 = (int *)*((_QWORD *)v4 + 6);
      while (v5 != v6)
      {
        v7 = *this;
        if (os_log_type_enabled(*this, OS_LOG_TYPE_INFO))
        {
          v8 = *v5;
          v9 = *((_DWORD *)v4 + 8);
          *(_DWORD *)buf = 67109376;
          v14 = v8;
          v15 = 1024;
          v16 = v9;
          _os_log_impl(&dword_1CC590000, v7, OS_LOG_TYPE_INFO, "client.trigger:#I \t- PROFILE 0x%x TRIGGER 0x%x", buf, 0xEu);
        }
        ++v5;
      }
      v10 = (awd::AWDTriggerFilter *)*((_QWORD *)v4 + 1);
      if (v10)
      {
        do
        {
          v11 = v10;
          v10 = *(awd::AWDTriggerFilter **)v10;
        }
        while (v10);
      }
      else
      {
        do
        {
          v11 = (awd::AWDTriggerFilter *)*((_QWORD *)v4 + 2);
          v12 = *(_QWORD *)v11 == (_QWORD)v4;
          v4 = v11;
        }
        while (!v12);
      }
      v4 = v11;
    }
    while (v11 != (awd::AWDTriggerFilter *)(this + 5));
  }
}

void sub_1CC5A165C(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    sub_1CC5A165C(a1, *a2);
    sub_1CC5A165C(a1, a2[1]);
    sub_1CC5A16A4(a2 + 4);
    operator delete(a2);
  }
}

void sub_1CC5A16A4(_QWORD *a1)
{
  void *v2;
  void *v3;

  v2 = (void *)a1[4];
  if (v2)
  {
    a1[5] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[1];
  if (v3)
  {
    a1[2] = v3;
    operator delete(v3);
  }
}

uint64_t **sub_1CC5A16E8(uint64_t **a1, unsigned int *a2, uint64_t a3, _DWORD **a4)
{
  uint64_t *v6;
  uint64_t **v7;
  uint64_t **v8;
  uint64_t **v9;
  unsigned int v10;
  unsigned int v11;
  char *v12;
  _QWORD v14[2];
  char v15;

  v7 = a1 + 1;
  v6 = a1[1];
  v8 = a1 + 1;
  v9 = a1 + 1;
  if (v6)
  {
    v10 = *a2;
    while (1)
    {
      while (1)
      {
        v9 = (uint64_t **)v6;
        v11 = *((_DWORD *)v6 + 8);
        if (v10 >= v11)
          break;
        v6 = *v9;
        v8 = v9;
        if (!*v9)
          goto LABEL_9;
      }
      if (v11 >= v10)
        break;
      v6 = v9[1];
      if (!v6)
      {
        v8 = v9 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
LABEL_9:
    v12 = (char *)operator new(0x60uLL);
    v14[1] = v7;
    *((_DWORD *)v12 + 8) = **a4;
    *((_QWORD *)v12 + 11) = 0;
    *(_OWORD *)(v12 + 72) = 0u;
    *(_OWORD *)(v12 + 56) = 0u;
    *(_OWORD *)(v12 + 40) = 0u;
    v15 = 1;
    sub_1CC598AF0(a1, (uint64_t)v9, v8, (uint64_t *)v12);
    v14[0] = 0;
    sub_1CC5A17DC((uint64_t)v14, 0);
    return (uint64_t **)v12;
  }
  return v9;
}

void sub_1CC5A17DC(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;

  v2 = *(_QWORD **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      sub_1CC5A16A4(v2 + 4);
    operator delete(v2);
  }
}

uint64_t *sub_1CC5A1820(uint64_t *a1, uint64_t a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  sub_1CC5A1874(a1, *(unsigned int **)a2, (unsigned int *)(a2 + 8));
  return a1;
}

void sub_1CC5A185C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1CC598878(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *sub_1CC5A1874(uint64_t *result, unsigned int *a2, unsigned int *a3)
{
  unsigned int *v4;
  uint64_t **v5;
  uint64_t *v6;
  unsigned int *v7;
  unsigned int *v8;
  BOOL v9;

  if (a2 != a3)
  {
    v4 = a2;
    v5 = (uint64_t **)result;
    v6 = result + 1;
    do
    {
      result = sub_1CC5A18F8(v5, v6, v4 + 7, (uint64_t *)(v4 + 7));
      v7 = (unsigned int *)*((_QWORD *)v4 + 1);
      if (v7)
      {
        do
        {
          v8 = v7;
          v7 = *(unsigned int **)v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (unsigned int *)*((_QWORD *)v4 + 2);
          v9 = *(_QWORD *)v8 == (_QWORD)v4;
          v4 = v8;
        }
        while (!v9);
      }
      v4 = v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t *sub_1CC5A18F8(uint64_t **a1, uint64_t *a2, unsigned int *a3, uint64_t *a4)
{
  uint64_t *v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t v10;
  uint64_t *v11;

  v6 = sub_1CC5A197C(a1, a2, &v11, &v10, a3);
  v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    v7 = (uint64_t *)operator new(0x28uLL);
    *(uint64_t *)((char *)v7 + 28) = *a4;
    sub_1CC598AF0(a1, (uint64_t)v11, v8, v7);
  }
  return v7;
}

uint64_t *sub_1CC5A197C(_QWORD *a1, uint64_t *a2, uint64_t **a3, uint64_t *a4, unsigned int *a5)
{
  uint64_t *v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  BOOL v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t *v17;
  unsigned int v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t *v21;
  unsigned int v22;

  v5 = a1 + 1;
  if (a1 + 1 == a2 || (v6 = *a5, v7 = *((_DWORD *)a2 + 7), *a5 < v7))
  {
    v8 = (uint64_t *)*a2;
    if ((uint64_t *)*a1 == a2)
    {
      v10 = a2;
LABEL_17:
      if (v8)
      {
        *a3 = v10;
        return v10 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    if (v8)
    {
      v9 = (uint64_t *)*a2;
      do
      {
        v10 = v9;
        v9 = (uint64_t *)v9[1];
      }
      while (v9);
    }
    else
    {
      v13 = a2;
      do
      {
        v10 = (uint64_t *)v13[2];
        v14 = *v10 == (_QWORD)v13;
        v13 = v10;
      }
      while (v14);
    }
    v15 = *a5;
    if (*((_DWORD *)v10 + 7) < *a5)
      goto LABEL_17;
    v16 = *v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          v17 = (uint64_t *)v16;
          v18 = *(_DWORD *)(v16 + 28);
          if (v15 >= v18)
            break;
          v16 = *v17;
          v5 = v17;
          if (!*v17)
            goto LABEL_29;
        }
        if (v18 >= v15)
          break;
        v5 = v17 + 1;
        v16 = v17[1];
      }
      while (v16);
    }
    else
    {
      v17 = a1 + 1;
    }
LABEL_29:
    *a3 = v17;
    return v5;
  }
  if (v7 >= v6)
  {
    *a3 = a2;
    *a4 = (uint64_t)a2;
    return a4;
  }
  v11 = a2[1];
  if (v11)
  {
    v12 = (uint64_t *)a2[1];
    do
    {
      a4 = v12;
      v12 = (uint64_t *)*v12;
    }
    while (v12);
  }
  else
  {
    v19 = a2;
    do
    {
      a4 = (uint64_t *)v19[2];
      v14 = *a4 == (_QWORD)v19;
      v19 = a4;
    }
    while (!v14);
  }
  if (a4 != v5 && v6 >= *((_DWORD *)a4 + 7))
  {
    v20 = *v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          v21 = (uint64_t *)v20;
          v22 = *(_DWORD *)(v20 + 28);
          if (v6 >= v22)
            break;
          v20 = *v21;
          v5 = v21;
          if (!*v21)
            goto LABEL_48;
        }
        if (v22 >= v6)
          break;
        v5 = v21 + 1;
        v20 = v21[1];
      }
      while (v20);
    }
    else
    {
      v21 = a1 + 1;
    }
LABEL_48:
    *a3 = v21;
    return v5;
  }
  if (v11)
  {
    *a3 = a4;
  }
  else
  {
    *a3 = a2;
    return a2 + 1;
  }
  return a4;
}

char *sub_1CC5A1B24(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  void **v12;
  char *v13;
  _BYTE *v14;
  unint64_t v15;
  char *v16;
  size_t v17;
  void *v18;
  char *v19;

  v7 = result;
  v8 = *((_QWORD *)result + 2);
  v9 = *(char **)result;
  if (a4 > (v8 - *(_QWORD *)result) >> 2)
  {
    if (v9)
    {
      *((_QWORD *)result + 1) = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 >> 62)
      sub_1CC592ABC();
    v10 = v8 >> 1;
    if (v8 >> 1 <= a4)
      v10 = a4;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFFCLL)
      v11 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    result = sub_1CC5A1C2C(v7, v11);
    v13 = (char *)v7[1];
    v12 = (void **)(v7 + 1);
    v9 = v13;
LABEL_16:
    v17 = a3 - (_QWORD)__src;
    if (v17)
    {
      v18 = v9;
      v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  v12 = (void **)(result + 8);
  v14 = (_BYTE *)*((_QWORD *)result + 1);
  v15 = (v14 - v9) >> 2;
  if (v15 >= a4)
    goto LABEL_16;
  v16 = &__src[4 * v15];
  if (v14 != v9)
  {
    result = (char *)memmove(*(void **)result, __src, v14 - v9);
    v9 = (char *)*v12;
  }
  v17 = a3 - (_QWORD)v16;
  if (v17)
  {
    v18 = v9;
    v19 = v16;
LABEL_18:
    result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  *v12 = &v9[v17];
  return result;
}

char *sub_1CC5A1C2C(_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >> 62)
    sub_1CC592ABC();
  result = (char *)sub_1CC594C00((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[4 * v4];
  return result;
}

uint64_t *sub_1CC5A1C6C(uint64_t **a1, uint64_t *a2, unsigned int *a3, _DWORD *a4)
{
  uint64_t *v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t v10;
  uint64_t *v11;

  v6 = sub_1CC5A197C(a1, a2, &v11, &v10, a3);
  v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    v7 = (uint64_t *)operator new(0x20uLL);
    *((_DWORD *)v7 + 7) = *a4;
    sub_1CC598AF0(a1, (uint64_t)v11, v8, v7);
  }
  return v7;
}

_QWORD *sub_1CC5A1CF0(_QWORD *a1, _QWORD *a2, _QWORD *a3)
{
  unint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  BOOL v8;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2 == a3)
  {
    v4 = 0;
  }
  else
  {
    v4 = 0;
    v5 = a2;
    do
    {
      v6 = (_QWORD *)v5[1];
      if (v6)
      {
        do
        {
          v7 = v6;
          v6 = (_QWORD *)*v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          v7 = (_QWORD *)v5[2];
          v8 = *v7 == (_QWORD)v5;
          v5 = v7;
        }
        while (!v8);
      }
      ++v4;
      v5 = v7;
    }
    while (v7 != a3);
  }
  sub_1CC5A1D74(a1, a2, a3, v4);
  return a1;
}

_QWORD *sub_1CC5A1D74(_QWORD *result, _QWORD *a2, _QWORD *a3, unint64_t a4)
{
  uint64_t v6;

  if (a4)
  {
    v6 = (uint64_t)result;
    sub_1CC5A1C2C(result, a4);
    return (_QWORD *)sub_1CC5A1DE0(v6, a2, a3);
  }
  return result;
}

void sub_1CC5A1DC4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1CC5A1DE0(uint64_t result, _QWORD *a2, _QWORD *a3)
{
  _DWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  BOOL v6;

  v3 = *(_DWORD **)(result + 8);
  if (a2 != a3)
  {
    do
    {
      *v3 = *((_DWORD *)a2 + 7);
      v4 = (_QWORD *)a2[1];
      if (v4)
      {
        do
        {
          v5 = v4;
          v4 = (_QWORD *)*v4;
        }
        while (v4);
      }
      else
      {
        do
        {
          v5 = (_QWORD *)a2[2];
          v6 = *v5 == (_QWORD)a2;
          a2 = v5;
        }
        while (!v6);
      }
      ++v3;
      a2 = v5;
    }
    while (v5 != a3);
  }
  *(_QWORD *)(result + 8) = v3;
  return result;
}

char *sub_1CC5A1E38(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  void **v12;
  char *v13;
  _BYTE *v14;
  unint64_t v15;
  char *v16;
  size_t v17;
  void *v18;
  char *v19;

  v7 = result;
  v8 = *((_QWORD *)result + 2);
  v9 = *(char **)result;
  if (a4 > (v8 - *(_QWORD *)result) >> 2)
  {
    if (v9)
    {
      *((_QWORD *)result + 1) = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 >> 62)
      sub_1CC592ABC();
    v10 = v8 >> 1;
    if (v8 >> 1 <= a4)
      v10 = a4;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFFCLL)
      v11 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    result = sub_1CC5A1C2C(v7, v11);
    v13 = (char *)v7[1];
    v12 = (void **)(v7 + 1);
    v9 = v13;
LABEL_16:
    v17 = a3 - (_QWORD)__src;
    if (v17)
    {
      v18 = v9;
      v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  v12 = (void **)(result + 8);
  v14 = (_BYTE *)*((_QWORD *)result + 1);
  v15 = (v14 - v9) >> 2;
  if (v15 >= a4)
    goto LABEL_16;
  v16 = &__src[4 * v15];
  if (v14 != v9)
  {
    result = (char *)memmove(*(void **)result, __src, 4 * v15);
    v9 = (char *)*v12;
  }
  v17 = a3 - (_QWORD)v16;
  if (v17)
  {
    v18 = v9;
    v19 = v16;
LABEL_18:
    result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  *v12 = &v9[v17];
  return result;
}

uint64_t sGetTimestampFieldForMetricId(int a1)
{
  unsigned int v2;
  BOOL v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t result;
  int v7;
  unsigned int *v8;
  unsigned int v9;

  switch(HIWORD(a1))
  {
    case 7u:
      if (a1 == 458758)
        v2 = 4;
      else
        v2 = 1;
      v3 = a1 == 458752;
      v4 = 3;
      goto LABEL_22;
    case 8u:
      result = 2;
      switch(a1)
      {
        case 524288:
        case 524290:
        case 524299:
        case 524300:
        case 524301:
        case 524302:
        case 524303:
        case 524304:
        case 524307:
        case 524313:
        case 524352:
        case 524353:
          return 4;
        case 524289:
        case 524293:
        case 524319:
        case 524320:
        case 524321:
        case 524322:
        case 524323:
        case 524324:
        case 524325:
        case 524326:
        case 524327:
        case 524328:
        case 524329:
          goto LABEL_15;
        case 524291:
        case 524295:
        case 524314:
        case 524315:
        case 524318:
        case 524331:
        case 524332:
        case 524333:
        case 524334:
        case 524335:
        case 524336:
        case 524337:
        case 524338:
        case 524339:
        case 524340:
        case 524341:
        case 524342:
        case 524343:
        case 524344:
        case 524345:
        case 524346:
        case 524347:
        case 524348:
        case 524349:
        case 524350:
        case 524351:
        case 524354:
        case 524355:
        case 524356:
        case 524357:
        case 524358:
        case 524359:
        case 524360:
        case 524361:
        case 524362:
        case 524363:
        case 524364:
        case 524365:
        case 524366:
        case 524367:
        case 524368:
        case 524369:
        case 524370:
        case 524371:
        case 524372:
        case 524373:
        case 524374:
          return 1;
        case 524292:
        case 524312:
          return 6;
        case 524294:
        case 524308:
        case 524316:
        case 524317:
        case 524375:
          return result;
        case 524296:
        case 524298:
        case 524309:
        case 524311:
        case 524330:
          return 8;
        case 524297:
          return 7;
        case 524305:
        case 524306:
        case 524310:
          return 5;
        default:
          if (a1 != 524484)
            return 1;
LABEL_15:
          result = 3;
          break;
      }
      return result;
    case 9u:
      v7 = a1 - 589828;
      if ((a1 - 589828) >= 4)
        return 1;
      v8 = (unsigned int *)&unk_1CC5C7980;
      return v8[v7];
    case 0xAu:
    case 0xBu:
    case 0xCu:
    case 0xEu:
    case 0xFu:
    case 0x12u:
    case 0x14u:
    case 0x15u:
    case 0x16u:
      return 1;
    case 0xDu:
      if (a1 == 851968)
        v2 = 8;
      else
        v2 = 1;
      v3 = a1 == 851969;
      v4 = 6;
LABEL_22:
      if (v3)
        return v4;
      else
        return v2;
    case 0x10u:
      v7 = a1 - 1048579;
      if ((a1 - 1048579) >= 0x28)
        return 1;
      v8 = (unsigned int *)&unk_1CC5C7820;
      return v8[v7];
    case 0x11u:
      v7 = a1 - 1114113;
      if ((a1 - 1114113) >= 0x30)
        return 1;
      v8 = (unsigned int *)&unk_1CC5C78C0;
      return v8[v7];
    case 0x13u:
      if (((a1 - 1245185) & 0xFFFFFFE8) != 0)
        return 1;
      else
        return 2;
    case 0x17u:
      result = 2;
      if (a1 > 1508098)
      {
        if ((a1 - 1508099) >= 2 && (a1 - 1508355) >= 2)
        {
          v9 = a1 - 1508611;
          goto LABEL_46;
        }
      }
      else if ((a1 - 1507329) >= 2 && (a1 - 1507587) >= 2)
      {
        v9 = a1 - 1507843;
        goto LABEL_46;
      }
      return result;
    case 0x18u:
      result = 2;
      if (a1 <= 1573632)
      {
        if ((a1 - 1573121) < 2)
          return result;
        v9 = a1 - 1573377;
      }
      else
      {
        if ((a1 - 1573633) < 2 || (a1 - 1573889) < 2)
          return result;
        v9 = a1 - 1574145;
      }
LABEL_46:
      if (v9 >= 2)
        return 1;
      return result;
    default:
      if (HIWORD(a1) != 34)
        return 1;
      if ((a1 - 2228992) > 5)
      {
        if (a1 == 2229249)
          return 4;
        else
          return 1;
      }
      else
      {
        if (((1 << a1) & 0xC) != 0)
          v5 = 14;
        else
          v5 = 22;
        if (((1 << a1) & 3) != 0)
          return 17;
        else
          return v5;
      }
  }
}

uint64_t awd::metrics::protobuf_ShutdownFile_SimpleMetric_2eproto(awd::metrics *this)
{
  uint64_t result;

  result = awd::metrics::SimpleMetric::default_instance_;
  if (awd::metrics::SimpleMetric::default_instance_)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)awd::metrics::SimpleMetric::default_instance_ + 8))(awd::metrics::SimpleMetric::default_instance_);
  return result;
}

uint64_t awd::metrics::SimpleMetric::SimpleMetric(uint64_t this)
{
  uint64_t v1;

  *(_QWORD *)this = &off_1E886AF08;
  *(_QWORD *)(this + 8) = 0;
  *(_QWORD *)(this + 16) = 0;
  *(_QWORD *)(this + 24) = 0;
  v1 = MEMORY[0x1E0DE8338];
  *(_DWORD *)(this + 32) = 0;
  *(_QWORD *)(this + 40) = v1;
  *(_QWORD *)(this + 48) = 0;
  *(_BYTE *)(this + 36) = 0;
  return this;
}

{
  uint64_t v1;

  *(_QWORD *)this = &off_1E886AF08;
  *(_QWORD *)(this + 8) = 0;
  *(_QWORD *)(this + 16) = 0;
  *(_QWORD *)(this + 24) = 0;
  v1 = MEMORY[0x1E0DE8338];
  *(_DWORD *)(this + 32) = 0;
  *(_QWORD *)(this + 40) = v1;
  *(_QWORD *)(this + 48) = 0;
  *(_BYTE *)(this + 36) = 0;
  return this;
}

uint64_t awd::metrics::SimpleMetric::SharedCtor(uint64_t this)
{
  *(_QWORD *)(this + 8) = 0;
  *(_QWORD *)(this + 16) = 0;
  *(_DWORD *)(this + 32) = 0;
  *(_QWORD *)(this + 24) = 0;
  *(_QWORD *)(this + 40) = MEMORY[0x1E0DE8338];
  *(_QWORD *)(this + 48) = 0;
  *(_BYTE *)(this + 36) = 0;
  return this;
}

awd::metrics::SimpleMetric *awd::metrics::SimpleMetric::SimpleMetric(awd::metrics::SimpleMetric *this, const awd::metrics::SimpleMetric *a2)
{
  *(_QWORD *)this = &off_1E886AF08;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_DWORD *)this + 8) = 0;
  *((_QWORD *)this + 5) = MEMORY[0x1E0DE8338];
  *((_QWORD *)this + 6) = 0;
  *((_BYTE *)this + 36) = 0;
  awd::metrics::SimpleMetric::MergeFrom(this, a2);
  return this;
}

void sub_1CC5A2290(_Unwind_Exception *a1)
{
  wireless_diagnostics::google::protobuf::MessageLite *v1;

  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(v1);
  _Unwind_Resume(a1);
}

void awd::metrics::SimpleMetric::MergeFrom(awd::metrics::SimpleMetric *this, const awd::metrics::SimpleMetric *a2)
{
  int v4;
  char v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  const std::string *v10;
  std::string *v11;
  _BYTE v12[48];

  if (a2 == this)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v12);
  }
  LOBYTE(v4) = *((_BYTE *)a2 + 52);
  if (!(_BYTE)v4)
    return;
  if ((*((_BYTE *)a2 + 52) & 1) != 0)
  {
    v6 = *((_QWORD *)a2 + 1);
    *((_DWORD *)this + 13) |= 1u;
    *((_QWORD *)this + 1) = v6;
    v4 = *((_DWORD *)a2 + 13);
    if ((v4 & 2) == 0)
    {
LABEL_6:
      if ((v4 & 4) == 0)
        goto LABEL_7;
      goto LABEL_14;
    }
  }
  else if ((*((_BYTE *)a2 + 52) & 2) == 0)
  {
    goto LABEL_6;
  }
  v7 = *((_DWORD *)a2 + 8);
  *((_DWORD *)this + 13) |= 2u;
  *((_DWORD *)this + 8) = v7;
  v4 = *((_DWORD *)a2 + 13);
  if ((v4 & 4) == 0)
  {
LABEL_7:
    if ((v4 & 8) == 0)
      goto LABEL_8;
LABEL_15:
    v9 = *((_QWORD *)a2 + 3);
    *((_DWORD *)this + 13) |= 8u;
    *((_QWORD *)this + 3) = v9;
    v4 = *((_DWORD *)a2 + 13);
    if ((v4 & 0x10) == 0)
    {
LABEL_9:
      if ((v4 & 0x20) == 0)
        return;
      goto LABEL_10;
    }
    goto LABEL_16;
  }
LABEL_14:
  v8 = *((_QWORD *)a2 + 2);
  *((_DWORD *)this + 13) |= 4u;
  *((_QWORD *)this + 2) = v8;
  v4 = *((_DWORD *)a2 + 13);
  if ((v4 & 8) != 0)
    goto LABEL_15;
LABEL_8:
  if ((v4 & 0x10) == 0)
    goto LABEL_9;
LABEL_16:
  v10 = (const std::string *)*((_QWORD *)a2 + 5);
  *((_DWORD *)this + 13) |= 0x10u;
  v11 = (std::string *)*((_QWORD *)this + 5);
  if (v11 == (std::string *)MEMORY[0x1E0DE8338])
  {
    v11 = (std::string *)operator new();
    v11->__r_.__value_.__l.__size_ = 0;
    v11->__r_.__value_.__r.__words[2] = 0;
    v11->__r_.__value_.__r.__words[0] = 0;
    *((_QWORD *)this + 5) = v11;
  }
  std::string::operator=(v11, v10);
  if ((*((_DWORD *)a2 + 13) & 0x20) != 0)
  {
LABEL_10:
    v5 = *((_BYTE *)a2 + 36);
    *((_DWORD *)this + 13) |= 0x20u;
    *((_BYTE *)this + 36) = v5;
  }
}

void sub_1CC5A2418(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void awd::metrics::SimpleMetric::~SimpleMetric(awd::metrics::SimpleMetric *this)
{
  *(_QWORD *)this = &off_1E886AF08;
  awd::metrics::SimpleMetric::SharedDtor((uint64_t)this);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

{
  *(_QWORD *)this = &off_1E886AF08;
  awd::metrics::SimpleMetric::SharedDtor((uint64_t)this);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

{
  *(_QWORD *)this = &off_1E886AF08;
  awd::metrics::SimpleMetric::SharedDtor((uint64_t)this);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
  JUMPOUT(0x1D17AD544);
}

uint64_t awd::metrics::SimpleMetric::SharedDtor(uint64_t this)
{
  uint64_t v1;

  v1 = *(_QWORD *)(this + 40);
  if (v1 != MEMORY[0x1E0DE8338] && v1 != 0)
  {
    if (*(char *)(v1 + 23) < 0)
      operator delete(*(void **)v1);
    JUMPOUT(0x1D17AD544);
  }
  return this;
}

uint64_t awd::metrics::SimpleMetric::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 48) = a2;
  return this;
}

uint64_t awd::metrics::SimpleMetric::default_instance(awd::metrics::SimpleMetric *this, uint64_t a2, uint64_t a3, const char *a4)
{
  uint64_t result;

  result = awd::metrics::SimpleMetric::default_instance_;
  if (!awd::metrics::SimpleMetric::default_instance_)
  {
    awd::metrics::protobuf_AddDesc_SimpleMetric_2eproto(0, a2, a3, a4);
    return awd::metrics::SimpleMetric::default_instance_;
  }
  return result;
}

uint64_t awd::metrics::SimpleMetric::New(awd::metrics::SimpleMetric *this)
{
  uint64_t result;
  uint64_t v2;

  result = operator new();
  *(_QWORD *)result = &off_1E886AF08;
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = 0;
  v2 = MEMORY[0x1E0DE8338];
  *(_DWORD *)(result + 32) = 0;
  *(_QWORD *)(result + 40) = v2;
  *(_QWORD *)(result + 48) = 0;
  *(_BYTE *)(result + 36) = 0;
  return result;
}

uint64_t awd::metrics::SimpleMetric::Clear(uint64_t this)
{
  char v1;
  uint64_t v2;

  v1 = *(_BYTE *)(this + 52);
  if (v1)
  {
    *(_QWORD *)(this + 8) = 0;
    *(_QWORD *)(this + 16) = 0;
    *(_DWORD *)(this + 32) = 0;
    *(_QWORD *)(this + 24) = 0;
    if ((v1 & 0x10) != 0)
    {
      v2 = *(_QWORD *)(this + 40);
      if (v2 != MEMORY[0x1E0DE8338])
      {
        if (*(char *)(v2 + 23) < 0)
        {
          **(_BYTE **)v2 = 0;
          *(_QWORD *)(v2 + 8) = 0;
        }
        else
        {
          *(_BYTE *)v2 = 0;
          *(_BYTE *)(v2 + 23) = 0;
        }
      }
    }
    *(_BYTE *)(this + 36) = 0;
  }
  *(_DWORD *)(this + 52) = 0;
  return this;
}

uint64_t awd::metrics::SimpleMetric::MergePartialFromCodedStream(awd::metrics::SimpleMetric *this, wireless_diagnostics::google::protobuf::io::CodedInputStream *a2)
{
  unint64_t *v4;
  unint64_t *v5;
  unsigned int *v6;
  uint64_t v7;
  char *v8;
  uint64_t TagFallback;
  int v10;
  unint64_t v11;
  char *v12;
  _BYTE *v13;
  unint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  int v18;
  unsigned __int8 *v19;
  unint64_t v20;
  _BYTE *v21;
  _BYTE *v22;
  _QWORD *v23;
  _BYTE *v24;
  unsigned int v25;
  unsigned __int8 *v26;
  unsigned __int8 *v27;
  uint64_t result;
  unint64_t v29;
  unsigned int v30;

  v4 = (unint64_t *)((char *)this + 8);
  v5 = (unint64_t *)((char *)this + 24);
  v6 = (unsigned int *)((char *)this + 32);
  v7 = MEMORY[0x1E0DE8338];
  while (2)
  {
    v8 = (char *)*((_QWORD *)a2 + 1);
    if ((unint64_t)v8 >= *((_QWORD *)a2 + 2) || *v8 < 0)
    {
      TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(a2);
      *((_DWORD *)a2 + 8) = TagFallback;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    else
    {
      TagFallback = *v8;
      *((_DWORD *)a2 + 8) = TagFallback;
      *((_QWORD *)a2 + 1) = v8 + 1;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    switch(TagFallback >> 3)
    {
      case 1u:
        v10 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_24;
        v12 = (char *)*((_QWORD *)a2 + 1);
        v11 = *((_QWORD *)a2 + 2);
        if ((unint64_t)v12 >= v11 || *v12 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint64Fallback(a2, v4);
          if (!(_DWORD)result)
            return result;
          v13 = (_BYTE *)*((_QWORD *)a2 + 1);
          v11 = *((_QWORD *)a2 + 2);
        }
        else
        {
          *v4 = *v12;
          v13 = v12 + 1;
          *((_QWORD *)a2 + 1) = v13;
        }
        *((_DWORD *)this + 13) |= 1u;
        if ((unint64_t)v13 < v11 && *v13 == 16)
        {
          v16 = v13 + 1;
          *((_QWORD *)a2 + 1) = v16;
          goto LABEL_32;
        }
        continue;
      case 2u:
        v10 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_24;
        v16 = (char *)*((_QWORD *)a2 + 1);
        v11 = *((_QWORD *)a2 + 2);
LABEL_32:
        v29 = 0;
        if ((unint64_t)v16 >= v11 || *v16 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint64Fallback(a2, &v29);
          if (!(_DWORD)result)
            return result;
          v20 = v29;
          v21 = (_BYTE *)*((_QWORD *)a2 + 1);
          v11 = *((_QWORD *)a2 + 2);
        }
        else
        {
          v20 = *v16;
          v21 = v16 + 1;
          *((_QWORD *)a2 + 1) = v21;
        }
        *((_QWORD *)this + 2) = v20;
        *((_DWORD *)this + 13) |= 4u;
        if ((unint64_t)v21 >= v11 || *v21 != 24)
          continue;
        v17 = v21 + 1;
        *((_QWORD *)a2 + 1) = v17;
LABEL_40:
        if ((unint64_t)v17 >= v11 || *v17 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint64Fallback(a2, v5);
          if (!(_DWORD)result)
            return result;
          v22 = (_BYTE *)*((_QWORD *)a2 + 1);
          v11 = *((_QWORD *)a2 + 2);
        }
        else
        {
          *v5 = *v17;
          v22 = v17 + 1;
          *((_QWORD *)a2 + 1) = v22;
        }
        v18 = *((_DWORD *)this + 13) | 8;
        *((_DWORD *)this + 13) = v18;
        if ((unint64_t)v22 >= v11 || *v22 != 34)
          continue;
        *((_QWORD *)a2 + 1) = v22 + 1;
LABEL_48:
        *((_DWORD *)this + 13) = v18 | 0x10;
        if (*((_QWORD *)this + 5) == v7)
        {
          v23 = (_QWORD *)operator new();
          v23[1] = 0;
          v23[2] = 0;
          *v23 = 0;
          *((_QWORD *)this + 5) = v23;
        }
        result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString();
        if (!(_DWORD)result)
          return result;
        v24 = (_BYTE *)*((_QWORD *)a2 + 1);
        v14 = *((_QWORD *)a2 + 2);
        if ((unint64_t)v24 >= v14 || *v24 != 40)
          continue;
        v19 = v24 + 1;
        *((_QWORD *)a2 + 1) = v19;
LABEL_54:
        v30 = 0;
        if ((unint64_t)v19 >= v14 || (char)*v19 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v30);
          if (!(_DWORD)result)
            return result;
          v25 = v30;
          v26 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
          v14 = *((_QWORD *)a2 + 2);
        }
        else
        {
          v25 = *v19;
          v26 = v19 + 1;
          *((_QWORD *)a2 + 1) = v26;
        }
        *((_BYTE *)this + 36) = v25 != 0;
        *((_DWORD *)this + 13) |= 0x20u;
        if ((int)v14 - (int)v26 < 2 || *v26 != 128 || v26[1] != 1)
          continue;
        v15 = (char *)(v26 + 2);
        *((_QWORD *)a2 + 1) = v15;
        goto LABEL_63;
      case 3u:
        v10 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_24;
        v17 = (char *)*((_QWORD *)a2 + 1);
        v11 = *((_QWORD *)a2 + 2);
        goto LABEL_40;
      case 4u:
        v10 = TagFallback & 7;
        if (v10 != 2)
          goto LABEL_24;
        v18 = *((_DWORD *)this + 13);
        goto LABEL_48;
      case 5u:
        v10 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_24;
        v19 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
        v14 = *((_QWORD *)a2 + 2);
        goto LABEL_54;
      default:
        if (TagFallback >> 3 == 16)
        {
          v10 = TagFallback & 7;
          if ((TagFallback & 7) != 0)
            goto LABEL_24;
          v15 = (char *)*((_QWORD *)a2 + 1);
          v14 = *((_QWORD *)a2 + 2);
LABEL_63:
          if ((unint64_t)v15 >= v14 || *v15 < 0)
          {
            result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v6);
            if (!(_DWORD)result)
              return result;
            v27 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
            v14 = *((_QWORD *)a2 + 2);
          }
          else
          {
            *v6 = *v15;
            v27 = (unsigned __int8 *)(v15 + 1);
            *((_QWORD *)a2 + 1) = v27;
          }
          *((_DWORD *)this + 13) |= 2u;
          if (v27 == (unsigned __int8 *)v14 && (*((_DWORD *)a2 + 11) || *((_DWORD *)a2 + 6) == *((_DWORD *)a2 + 10)))
          {
            *((_DWORD *)a2 + 8) = 0;
            result = 1;
            *((_BYTE *)a2 + 36) = 1;
            return result;
          }
          continue;
        }
        v10 = TagFallback & 7;
LABEL_24:
        if (v10 != 4)
        {
          if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(a2, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback) & 1) == 0)return 0;
          continue;
        }
        return 1;
    }
  }
}

uint64_t awd::metrics::SimpleMetric::SerializeWithCachedSizes(uint64_t this, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  int v6;

  v5 = this;
  v6 = *(_DWORD *)(this + 52);
  if ((v6 & 1) != 0)
  {
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt64((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(_QWORD *)(this + 8), (uint64_t)a2, a4);
    v6 = *(_DWORD *)(v5 + 52);
    if ((v6 & 4) == 0)
    {
LABEL_3:
      if ((v6 & 8) == 0)
        goto LABEL_4;
      goto LABEL_10;
    }
  }
  else if ((v6 & 4) == 0)
  {
    goto LABEL_3;
  }
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteInt64((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, *(_QWORD *)(v5 + 16), (uint64_t)a2, a4);
  v6 = *(_DWORD *)(v5 + 52);
  if ((v6 & 8) == 0)
  {
LABEL_4:
    if ((v6 & 0x10) == 0)
      goto LABEL_5;
    goto LABEL_11;
  }
LABEL_10:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt64((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, *(_QWORD *)(v5 + 24), (uint64_t)a2, a4);
  v6 = *(_DWORD *)(v5 + 52);
  if ((v6 & 0x10) == 0)
  {
LABEL_5:
    if ((v6 & 0x20) == 0)
      goto LABEL_6;
    goto LABEL_12;
  }
LABEL_11:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString();
  v6 = *(_DWORD *)(v5 + 52);
  if ((v6 & 0x20) == 0)
  {
LABEL_6:
    if ((v6 & 2) == 0)
      return this;
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x10, *(unsigned int *)(v5 + 32), (uint64_t)a2, a4);
  }
LABEL_12:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5, *(unsigned __int8 *)(v5 + 36), (uint64_t)a2, a4);
  if ((*(_DWORD *)(v5 + 52) & 2) != 0)
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x10, *(unsigned int *)(v5 + 32), (uint64_t)a2, a4);
  return this;
}

uint64_t awd::metrics::SimpleMetric::ByteSize(awd::metrics::SimpleMetric *this)
{
  int v2;
  unsigned int v3;
  uint64_t result;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v5;
  int v6;
  uint64_t v7;
  int v8;
  char v9;
  uint64_t v10;
  unint64_t v11;
  int v12;

  LOBYTE(v2) = *((_BYTE *)this + 52);
  if (!(_BYTE)v2)
  {
    result = 0;
    goto LABEL_29;
  }
  if ((*((_BYTE *)this + 52) & 1) != 0)
  {
    v3 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize64(*((wireless_diagnostics::google::protobuf::io::CodedOutputStream **)this
                                                                                     + 1))
       + 1;
    v2 = *((_DWORD *)this + 13);
    if ((v2 & 2) == 0)
      goto LABEL_11;
  }
  else
  {
    v3 = 0;
    if ((*((_BYTE *)this + 52) & 2) == 0)
      goto LABEL_11;
  }
  v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 8);
  if (v5 >= 0x80)
  {
    v6 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v5) + 2;
    v2 = *((_DWORD *)this + 13);
  }
  else
  {
    v6 = 3;
  }
  v3 += v6;
LABEL_11:
  if ((v2 & 4) == 0)
  {
    if ((v2 & 8) == 0)
      goto LABEL_13;
LABEL_16:
    v3 += wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize64(*((wireless_diagnostics::google::protobuf::io::CodedOutputStream **)this
                                                                                      + 3))
        + 1;
    v2 = *((_DWORD *)this + 13);
    if ((v2 & 0x10) == 0)
      goto LABEL_26;
LABEL_17:
    v7 = *((_QWORD *)this + 5);
    v8 = *(unsigned __int8 *)(v7 + 23);
    v9 = v8;
    v10 = *(_QWORD *)(v7 + 8);
    if ((v8 & 0x80u) == 0)
      v11 = *(unsigned __int8 *)(v7 + 23);
    else
      v11 = v10;
    if (v11 >= 0x80)
    {
      v12 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v11);
      v8 = *(unsigned __int8 *)(v7 + 23);
      v10 = *(_QWORD *)(v7 + 8);
      v2 = *((_DWORD *)this + 13);
      v9 = *(_BYTE *)(v7 + 23);
    }
    else
    {
      v12 = 1;
    }
    if (v9 < 0)
      v8 = v10;
    v3 += v12 + v8 + 1;
    goto LABEL_26;
  }
  v3 += wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize64(*((wireless_diagnostics::google::protobuf::io::CodedOutputStream **)this
                                                                                    + 2))
      + 1;
  v2 = *((_DWORD *)this + 13);
  if ((v2 & 8) != 0)
    goto LABEL_16;
LABEL_13:
  if ((v2 & 0x10) != 0)
    goto LABEL_17;
LABEL_26:
  if ((v2 & 0x20) != 0)
    result = v3 + 2;
  else
    result = v3;
LABEL_29:
  *((_DWORD *)this + 12) = result;
  return result;
}

void awd::metrics::SimpleMetric::CopyFrom(awd::metrics::SimpleMetric *this, const awd::metrics::SimpleMetric *a2)
{
  if (a2 != this)
  {
    (*(void (**)(awd::metrics::SimpleMetric *))(*(_QWORD *)this + 32))(this);
    awd::metrics::SimpleMetric::MergeFrom(this, a2);
  }
}

uint64_t awd::metrics::SimpleMetric::IsInitialized(awd::metrics::SimpleMetric *this)
{
  return 1;
}

uint64_t awd::metrics::SimpleMetric::Swap(uint64_t this, awd::metrics::SimpleMetric *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  if (a2 != (awd::metrics::SimpleMetric *)this)
  {
    v2 = *(_QWORD *)(this + 8);
    *(_QWORD *)(this + 8) = *((_QWORD *)a2 + 1);
    *((_QWORD *)a2 + 1) = v2;
    LODWORD(v2) = *(_DWORD *)(this + 32);
    *(_DWORD *)(this + 32) = *((_DWORD *)a2 + 8);
    *((_DWORD *)a2 + 8) = v2;
    v3 = *(_QWORD *)(this + 16);
    *(_QWORD *)(this + 16) = *((_QWORD *)a2 + 2);
    *((_QWORD *)a2 + 2) = v3;
    v4 = *(_QWORD *)(this + 24);
    *(_QWORD *)(this + 24) = *((_QWORD *)a2 + 3);
    *((_QWORD *)a2 + 3) = v4;
    v5 = *(_QWORD *)(this + 40);
    *(_QWORD *)(this + 40) = *((_QWORD *)a2 + 5);
    *((_QWORD *)a2 + 5) = v5;
    LOBYTE(v5) = *(_BYTE *)(this + 36);
    *(_BYTE *)(this + 36) = *((_BYTE *)a2 + 36);
    *((_BYTE *)a2 + 36) = v5;
    LODWORD(v5) = *(_DWORD *)(this + 52);
    *(_DWORD *)(this + 52) = *((_DWORD *)a2 + 13);
    *((_DWORD *)a2 + 13) = v5;
    LODWORD(v5) = *(_DWORD *)(this + 48);
    *(_DWORD *)(this + 48) = *((_DWORD *)a2 + 12);
    *((_DWORD *)a2 + 12) = v5;
  }
  return this;
}

_QWORD *awd::metrics::SimpleMetric::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return sub_1CC59E69C(a1, "awd.metrics.SimpleMetric");
}

uint64_t sub_1CC5A2CB4(uint64_t a1)
{
  return *(unsigned int *)(a1 + 48);
}

uint64_t awd::AWDBundledSubmissionMessage::AWDBundledSubmissionMessage(uint64_t a1, xpc_object_t *a2)
{
  _DWORD *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *count;
  const char *i;
  int v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  xpc_object_t v17;
  int v18;
  char *data;
  size_t length;
  xpc_object_t p_xdict;
  const char *v22;
  xpc_object_t xdict;
  xpc_object_t object[2];
  xpc_object_t v25;
  const char *v26;
  xpc_object_t v27;

  *(_OWORD *)(a1 + 8) = 0u;
  v4 = (_DWORD *)(a1 + 8);
  *(_QWORD *)a1 = &off_1E886AE90;
  *(_OWORD *)(a1 + 24) = 0u;
  v5 = (uint64_t *)(a1 + 24);
  *(_QWORD *)(a1 + 40) = 0;
  v6 = MEMORY[0x1D17ADA60](*a2);
  v7 = MEMORY[0x1E0C812F8];
  if (v6 == MEMORY[0x1E0C812F8] && xpc_dictionary_get_int64(*a2, "AWDMessageType") == 10)
  {
    *(_DWORD *)(a1 + 12) = xpc_dictionary_get_int64(*a2, "AWDMessageTriggerId");
    *v4 = xpc_dictionary_get_int64(*a2, "AWDMessageTriggeringComponentId");
    *(_DWORD *)(a1 + 16) = xpc_dictionary_get_int64(*a2, "AWDMessageSubmissionId");
    *(_DWORD *)(a1 + 20) = xpc_dictionary_get_int64(*a2, "AWDMessageSourceComponentId");
    v25 = a2;
    v26 = "profiles";
    sub_1CC595D7C((uint64_t)&v25, &v27);
    v8 = MEMORY[0x1D17ADA60](v27);
    v9 = MEMORY[0x1E0C812C8];
    if (v8 == MEMORY[0x1E0C812C8])
    {
      object[0] = v27;
      if (v27)
        xpc_retain(v27);
      else
        object[0] = xpc_null_create();
      sub_1CC596420(&v25, object, 0);
      xpc_release(object[0]);
      p_xdict = v27;
      if (v27)
        xpc_retain(v27);
      else
        p_xdict = xpc_null_create();
      if (MEMORY[0x1D17ADA60](v27) == v9)
        count = (void *)xpc_array_get_count(v27);
      else
        count = 0;
      sub_1CC596420(object, &p_xdict, count);
      xpc_release(p_xdict);
      for (i = v26; i != object[1] || v25 != object[0]; i = ++v26)
      {
        p_xdict = &v25;
        v22 = i;
        sub_1CC5A306C((uint64_t)&p_xdict, &xdict);
        if (MEMORY[0x1D17ADA60](xdict) == v7)
        {
          data = 0;
          length = 0;
          data = (char *)xpc_dictionary_get_data(xdict, "data", &length);
          if (data)
          {
            v18 = 0;
            p_xdict = &xdict;
            v22 = "profile_id";
            sub_1CC595210((uint64_t)&p_xdict, &v17);
            v12 = xpc::dyn_cast_or_default();
            xpc_release(v17);
            v18 = v12;
            v17 = &data[length];
            sub_1CC5A3790(&data, (char **)&v17, &p_xdict);
            sub_1CC5A3104(v5, &v18, (uint64_t)&p_xdict);
            v13 = (std::__shared_weak_count *)v22;
            if (v22)
            {
              v14 = (unint64_t *)(v22 + 8);
              do
                v15 = __ldaxr(v14);
              while (__stlxr(v15 - 1, v14));
              if (!v15)
              {
                ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
                std::__shared_weak_count::__release_weak(v13);
              }
            }
          }
        }
        xpc_release(xdict);
      }
      xpc_release(v25);
      xpc_release(v25);
    }
    xpc_release(v27);
  }
  return a1;
}

void sub_1CC5A2FB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t a10, uint64_t a11, uint64_t a12, uint64_t a13, xpc_object_t object, uint64_t a15, xpc_object_t a16, xpc_object_t a17, uint64_t a18, xpc_object_t a19)
{
  uint64_t v19;

  xpc_release(object);
  xpc_release(a19);
  xpc_release(*(xpc_object_t *)(v19 - 80));
  sub_1CC5A371C((void ***)&a19);
  _Unwind_Resume(a1);
}

void sub_1CC5A306C(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  xpc_object_t value;
  xpc_object_t v4;
  xpc_object_t v5;

  value = xpc_array_get_value(**(xpc_object_t **)a1, *(_QWORD *)(a1 + 8));
  if (value)
  {
    v4 = value;
    xpc_retain(value);
    *a2 = v4;
  }
  else
  {
    v4 = xpc_null_create();
    *a2 = v4;
    if (!v4)
    {
      v5 = xpc_null_create();
      v4 = 0;
      goto LABEL_8;
    }
  }
  if (MEMORY[0x1D17ADA60](v4) != MEMORY[0x1E0C812F8])
  {
    v5 = xpc_null_create();
LABEL_8:
    *a2 = v5;
    goto LABEL_9;
  }
  xpc_retain(v4);
LABEL_9:
  xpc_release(v4);
}

uint64_t sub_1CC5A3104(uint64_t *a1, _DWORD *a2, uint64_t a3)
{
  uint64_t result;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  _QWORD v18[5];

  v8 = a1[2];
  result = (uint64_t)(a1 + 2);
  v7 = v8;
  v9 = *(_QWORD *)(result - 8);
  if (v9 >= v8)
  {
    v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v9 - *a1) >> 3);
    v12 = v11 + 1;
    if (v11 + 1 > 0xAAAAAAAAAAAAAAALL)
      sub_1CC592ABC();
    v13 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7 - *a1) >> 3);
    if (2 * v13 > v12)
      v12 = 2 * v13;
    if (v13 >= 0x555555555555555)
      v14 = 0xAAAAAAAAAAAAAAALL;
    else
      v14 = v12;
    v18[4] = result;
    v15 = (char *)sub_1CC59E84C(result, v14);
    v16 = &v15[24 * v11];
    v18[0] = v15;
    v18[1] = v16;
    v18[3] = &v15[24 * v17];
    *(_DWORD *)v16 = *a2;
    *(_OWORD *)(v16 + 8) = *(_OWORD *)a3;
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    v18[2] = v16 + 24;
    sub_1CC5A3928(a1, v18);
    v10 = a1[1];
    result = sub_1CC5A398C((uint64_t)v18);
  }
  else
  {
    *(_DWORD *)v9 = *a2;
    *(_OWORD *)(v9 + 8) = *(_OWORD *)a3;
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    v10 = v9 + 24;
    a1[1] = v9 + 24;
  }
  a1[1] = v10;
  return result;
}

void sub_1CC5A3218(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1CC5A398C((uint64_t)va);
  _Unwind_Resume(a1);
}

void awd::AWDBundledSubmissionMessage::createMessage(unsigned int a1@<W0>, unint64_t a2@<X1>, unsigned int a3@<W2>, _QWORD *a4@<X3>, _QWORD *a5@<X8>)
{
  unsigned int v7;
  int64_t v10;
  xpc_object_t v11;
  xpc_object_t v12;
  xpc_object_t v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  xpc_object_t v18;
  xpc_object_t v19;
  xpc_object_t v20;
  _QWORD *v21;
  _QWORD *v22;
  BOOL v23;
  xpc_object_t v24;
  xpc_object_t v25;
  xpc_object_t v26;
  xpc_object_t *p_value;
  const char *v28;
  xpc_object_t v29;
  xpc_object_t object;
  xpc_object_t value;

  v7 = a2;
  v10 = HIDWORD(a2);
  v11 = xpc_dictionary_create(0, 0, 0);
  xpc_dictionary_set_int64(v11, "AWDMessageType", 10);
  xpc_dictionary_set_int64(v11, "AWDMessageTriggerId", v10);
  xpc_dictionary_set_int64(v11, "AWDMessageTriggeringComponentId", v7);
  xpc_dictionary_set_int64(v11, "AWDMessageSubmissionId", a3);
  xpc_dictionary_set_int64(v11, "AWDMessageSourceComponentId", a1);
  v12 = xpc_array_create(0, 0);
  if (v12 || (v12 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1D17ADA60](v12) == MEMORY[0x1E0C812C8])
    {
      xpc_retain(v12);
      v13 = v12;
    }
    else
    {
      v13 = xpc_null_create();
    }
  }
  else
  {
    v13 = xpc_null_create();
    v12 = 0;
  }
  xpc_release(v12);
  v16 = (_QWORD *)*a4;
  v14 = a4 + 1;
  v15 = v16;
  if (v16 != v14)
  {
    v17 = MEMORY[0x1E0C812F8];
    do
    {
      v18 = xpc_dictionary_create(0, 0, 0);
      v19 = v18;
      if (v18)
      {
        value = v18;
      }
      else
      {
        v19 = xpc_null_create();
        value = v19;
        if (!v19)
        {
          v20 = xpc_null_create();
          v19 = 0;
          goto LABEL_16;
        }
      }
      if (MEMORY[0x1D17ADA60](v19) != v17)
      {
        v20 = xpc_null_create();
LABEL_16:
        value = v20;
        goto LABEL_17;
      }
      xpc_retain(v19);
LABEL_17:
      xpc_release(v19);
      v29 = xpc_int64_create(*((unsigned int *)v15 + 8));
      if (!v29)
        v29 = xpc_null_create();
      p_value = &value;
      v28 = "profile_id";
      sub_1CC5954D0((uint64_t)&p_value, &v29, &object);
      xpc_release(object);
      object = 0;
      xpc_release(v29);
      v29 = 0;
      v25 = xpc_data_create((const void *)v15[5], v15[6] - v15[5]);
      if (!v25)
        v25 = xpc_null_create();
      p_value = &value;
      v28 = "data";
      sub_1CC5954D0((uint64_t)&p_value, &v25, &v26);
      xpc_release(v26);
      v26 = 0;
      xpc_release(v25);
      v25 = 0;
      xpc_array_append_value(v13, value);
      xpc_release(value);
      v21 = (_QWORD *)v15[1];
      if (v21)
      {
        do
        {
          v22 = v21;
          v21 = (_QWORD *)*v21;
        }
        while (v21);
      }
      else
      {
        do
        {
          v22 = (_QWORD *)v15[2];
          v23 = *v22 == (_QWORD)v15;
          v15 = v22;
        }
        while (!v23);
      }
      v15 = v22;
    }
    while (v22 != v14);
  }
  xpc_dictionary_set_value(v11, "profiles", v13);
  if (v11)
  {
    *a5 = v11;
  }
  else
  {
    v11 = xpc_null_create();
    *a5 = v11;
    if (!v11)
    {
      v24 = xpc_null_create();
      v11 = 0;
      goto LABEL_34;
    }
  }
  if (MEMORY[0x1D17ADA60](v11) != MEMORY[0x1E0C812F8])
  {
    v24 = xpc_null_create();
LABEL_34:
    *a5 = v24;
    goto LABEL_35;
  }
  xpc_retain(v11);
LABEL_35:
  xpc_release(v11);
  xpc_release(v13);
}

void sub_1CC5A3554(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, xpc_object_t object)
{
  void *v16;

  xpc_release(v16);
  _Unwind_Resume(a1);
}

void awd::AWDBundledSubmissionMessage::createXpcMessage(_QWORD *a1@<X8>)
{
  xpc_object_t v3;
  xpc_object_t v4;
  xpc_object_t v5;

  v3 = xpc_dictionary_create(0, 0, 0);
  v4 = v3;
  if (v3)
  {
    *a1 = v3;
  }
  else
  {
    v4 = xpc_null_create();
    *a1 = v4;
    if (!v4)
    {
      v5 = xpc_null_create();
      v4 = 0;
      goto LABEL_8;
    }
  }
  if (MEMORY[0x1D17ADA60](v4) != MEMORY[0x1E0C812F8])
  {
    v5 = xpc_null_create();
LABEL_8:
    *a1 = v5;
    goto LABEL_9;
  }
  xpc_retain(v4);
LABEL_9:
  xpc_release(v4);
}

uint64_t awd::AWDBundledSubmissionMessage::getSrcComponentId(awd::AWDBundledSubmissionMessage *this)
{
  return *((unsigned int *)this + 5);
}

uint64_t awd::AWDBundledSubmissionMessage::getTrigger(awd::AWDBundledSubmissionMessage *this)
{
  return *((_QWORD *)this + 1);
}

uint64_t awd::AWDBundledSubmissionMessage::getBundledSubmission(awd::AWDBundledSubmissionMessage *this)
{
  return (uint64_t)this + 24;
}

uint64_t sub_1CC5A3680(uint64_t a1)
{
  void **v3;

  *(_QWORD *)a1 = &off_1E886AE90;
  v3 = (void **)(a1 + 24);
  sub_1CC5A371C(&v3);
  return a1;
}

uint64_t sub_1CC5A36C4(uint64_t a1)
{
  void **v3;

  *(_QWORD *)a1 = &off_1E886AE90;
  v3 = (void **)(a1 + 24);
  sub_1CC5A371C(&v3);
  return MEMORY[0x1D17AD544](a1, 0x10A1C406C85F68BLL);
}

void sub_1CC5A371C(void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  char *v6;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v6 = v4 - 24;
        awd::AWDServerConnection::~AWDServerConnection((awd::AWDServerConnection *)(v4 - 16));
        v4 = v6;
      }
      while (v6 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t sub_1CC5A3790@<X0>(char **a1@<X1>, char **a2@<X2>, _QWORD *a3@<X8>)
{
  char *v6;
  uint64_t result;

  v6 = (char *)operator new(0x30uLL);
  result = sub_1CC5A37F0((uint64_t)v6, a1, a2);
  *a3 = v6 + 24;
  a3[1] = v6;
  return result;
}

void sub_1CC5A37DC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1CC5A37F0(uint64_t a1, char **a2, char **a3)
{
  char *v4;
  char *v5;

  *(_OWORD *)(a1 + 8) = 0u;
  *(_QWORD *)a1 = &unk_1E886B8A0;
  v4 = *a2;
  v5 = *a3;
  *(_QWORD *)(a1 + 40) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  sub_1CC5A38B8((char *)(a1 + 24), v4, v5, v5 - v4);
  return a1;
}

void sub_1CC5A3840(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1CC5A3854(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E886B8A0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1CC5A3868(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E886B8A0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1D17AD544);
}

void sub_1CC5A389C(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(_QWORD *)(a1 + 32) = v2;
    operator delete(v2);
  }
}

char *sub_1CC5A38B8(char *result, char *a2, char *a3, size_t __sz)
{
  char *v6;
  _BYTE *v7;
  char v8;

  if (__sz)
  {
    v6 = result;
    result = sub_1CC596BD4(result, __sz);
    v7 = (_BYTE *)*((_QWORD *)v6 + 1);
    while (a2 != a3)
    {
      v8 = *a2++;
      *v7++ = v8;
    }
    *((_QWORD *)v6 + 1) = v7;
  }
  return result;
}

void sub_1CC5A390C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_1CC5A3928(uint64_t *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v3 = *result;
  v2 = result[1];
  v4 = a2[1];
  while (v2 != v3)
  {
    v5 = *(_DWORD *)(v2 - 24);
    v2 -= 24;
    *(_DWORD *)(v4 - 24) = v5;
    v4 -= 24;
    *(_OWORD *)(v4 + 8) = *(_OWORD *)(v2 + 8);
    *(_QWORD *)(v2 + 8) = 0;
    *(_QWORD *)(v2 + 16) = 0;
  }
  a2[1] = v4;
  v6 = *result;
  *result = v4;
  a2[1] = v6;
  v7 = result[1];
  result[1] = a2[2];
  a2[2] = v7;
  v8 = result[2];
  result[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_1CC5A398C(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 24;
    awd::AWDServerConnection::~AWDServerConnection((awd::AWDServerConnection *)(i - 16));
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t awd::maybeSetTimestamp(awd *this, awd::Metric *a2)
{
  uint64_t result;
  int v4;
  char *v5;
  uint64_t v6;
  uint64_t TagFallback;
  unint64_t v8;
  unint64_t v9;
  int Varint64Fallback;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v11;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v12;
  int v13;
  int v14;
  unsigned __int8 *v15;
  _BYTE *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  int64_t v21;
  char *v22;
  int64_t v23;
  char *v24;
  int64_t v25;
  char v26;
  void *__p;
  _BYTE *v28;
  void *v29;
  _BYTE *v30;
  unsigned int v31[2];
  uint64_t v32;
  awd *v33;
  uint64_t v34;
  char *v35;
  unint64_t v36;
  int v37;
  uint64_t v38;
  __int16 v39;
  int v40;
  __int128 v41;
  int v42;
  uint64_t v43;
  uint64_t v44;

  result = sGetTimestampFieldForMetricId(*(_DWORD *)this);
  if (!(_DWORD)result)
    return result;
  v4 = result;
  v5 = (char *)*((_QWORD *)this + 2);
  v6 = *((_QWORD *)this + 3) - (_QWORD)v5;
  v34 = 0;
  v35 = v5;
  v36 = (unint64_t)&v5[(int)v6];
  v37 = v6;
  v38 = 0;
  v39 = 0;
  v40 = v6;
  v41 = xmmword_1CC5C7A40;
  v42 = *MEMORY[0x1E0DE8248];
  v43 = 0;
  v44 = 0;
  while ((int)wireless_diagnostics::google::protobuf::io::CodedInputStream::BytesUntilLimit((wireless_diagnostics::google::protobuf::io::CodedInputStream *)&v34) >= 1)
  {
    if ((unint64_t)v35 >= v36 || *v35 < 0)
    {
      TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback((wireless_diagnostics::google::protobuf::io::CodedInputStream *)&v34);
      HIDWORD(v38) = TagFallback;
      if ((_DWORD)TagFallback)
        goto LABEL_9;
    }
    else
    {
      TagFallback = *v35;
      HIDWORD(v38) = TagFallback;
      ++v35;
      if ((_DWORD)TagFallback)
      {
LABEL_9:
        v8 = awd::reflect::decodeTag((awd::reflect *)TagFallback);
        v9 = HIDWORD(v8);
        switch((char)v8)
        {
          case 0:
            *(_QWORD *)v31 = 0;
            if ((unint64_t)v35 >= v36 || *v35 < 0)
            {
              Varint64Fallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint64Fallback((wireless_diagnostics::google::protobuf::io::CodedInputStream *)&v34, (unint64_t *)v31);
LABEL_19:
              if (!Varint64Fallback)
                continue;
            }
            else
            {
              ++v35;
            }
            if (v4 == (_DWORD)v9)
              return MEMORY[0x1D17AD124](&v34);
            break;
          case 1:
            *(_QWORD *)v31 = 0;
            Varint64Fallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback((wireless_diagnostics::google::protobuf::io::CodedInputStream *)&v34, (unint64_t *)v31);
            goto LABEL_19;
          case 2:
            v31[0] = 0;
            if ((unint64_t)v35 >= v36 || *v35 < 0)
            {
              if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback((wireless_diagnostics::google::protobuf::io::CodedInputStream *)&v34, v31))continue;
            }
            else
            {
              v31[0] = *v35++;
            }
            wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit((wireless_diagnostics::google::protobuf::io::CodedInputStream *)&v34);
            ++HIDWORD(v41);
            wireless_diagnostics::google::protobuf::io::CodedInputStream::BytesUntilLimit((wireless_diagnostics::google::protobuf::io::CodedInputStream *)&v34);
            wireless_diagnostics::google::protobuf::io::CodedInputStream::Skip((wireless_diagnostics::google::protobuf::io::CodedInputStream *)&v34);
            if (SHIDWORD(v41) >= 1)
              --HIDWORD(v41);
            wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit((wireless_diagnostics::google::protobuf::io::CodedInputStream *)&v34);
            continue;
          case 5:
            v31[0] = 0;
            Varint64Fallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback((wireless_diagnostics::google::protobuf::io::CodedInputStream *)&v34, v31);
            goto LABEL_19;
          default:
            continue;
        }
      }
    }
  }
  *(_QWORD *)v31 = 0;
  v32 = 0;
  v33 = 0;
  awd::GetProtobufTag((uint64_t *)this + 2, v31);
  v11 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((_QWORD *)this + 1);
  v12 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)(8 * v4);
  if (v12 >= 0x80)
    v13 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v12);
  else
    v13 = 1;
  v14 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize64(v11);
  sub_1CC5A3E54(&v29, v14 + v13);
  v16 = v29;
  if (v12 > 0x7F)
  {
    if (v12 >> 14)
    {
      v17 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::WriteVarint32FallbackToArray(v12, (uint64_t)v29, v15);
    }
    else
    {
      *(_BYTE *)v29 = v12 | 0x80;
      v16[1] = v12 >> 7;
      v17 = (uint64_t)(v16 + 2);
    }
  }
  else
  {
    *(_BYTE *)v29 = (_BYTE)v12;
    v17 = (uint64_t)(v16 + 1);
  }
  wireless_diagnostics::google::protobuf::io::CodedOutputStream::WriteVarint64ToArray(v11, v17, v15);
  v18 = v30 - (_BYTE *)v29 + v32;
  awd::createTagForProtobuf((awd *)v33, (_DWORD)v30 - (_DWORD)v29 + v32, (unint64_t *)&__p);
  v20 = (char *)*((_QWORD *)this + 2);
  v19 = (char *)*((_QWORD *)this + 3);
  v21 = &v28[v18] - (_BYTE *)__p + v20 - v19;
  if (v21 < 1)
  {
    if (v21 < 0)
    {
      v22 = &v19[-(&v28[v18] - (_BYTE *)__p)];
      v23 = &v28[v18] - (_BYTE *)__p;
      if (v19 != &v20[-v21])
        memmove(*((void **)this + 2), v22, v19 - &v20[-v21]);
      *((_QWORD *)this + 3) = &v20[v23];
    }
  }
  else
  {
    v26 = 0;
    sub_1CC59231C((char **)this + 2, v20, v21, &v26);
  }
  v24 = (char *)*((_QWORD *)this + 2);
  v25 = v28 - (_BYTE *)__p;
  if (v28 != __p)
    memmove(v24, __p, v28 - (_BYTE *)__p);
  if (v30 != v29)
    memmove(&v24[v25], v29, v30 - (_BYTE *)v29);
  if (__p)
  {
    v28 = __p;
    operator delete(__p);
  }
  if (v29)
  {
    v30 = v29;
    operator delete(v29);
  }
  return MEMORY[0x1D17AD124](&v34);
}

void sub_1CC5A3D48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  if (__p)
    operator delete(__p);
  if (a13)
    operator delete(a13);
  MEMORY[0x1D17AD124](&a19);
  _Unwind_Resume(a1);
}

uint64_t awd::Metric::Metric(uint64_t this)
{
  *(_QWORD *)(this + 16) = 0;
  *(_QWORD *)(this + 24) = 0;
  *(_QWORD *)(this + 32) = 0;
  *(_BYTE *)(this + 40) = 1;
  return this;
}

{
  *(_QWORD *)(this + 16) = 0;
  *(_QWORD *)(this + 24) = 0;
  *(_QWORD *)(this + 32) = 0;
  *(_BYTE *)(this + 40) = 1;
  return this;
}

uint64_t awd::Metric::Metric(uint64_t a1, int a2, uint64_t a3, uint64_t a4, char a5)
{
  *(_DWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = a3;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  sub_1CC59DDD0((_QWORD *)(a1 + 16), *(const void **)a4, *(_QWORD *)(a4 + 8), *(_QWORD *)(a4 + 8) - *(_QWORD *)a4);
  *(_BYTE *)(a1 + 40) = a5;
  return a1;
}

{
  *(_DWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = a3;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  sub_1CC59DDD0((_QWORD *)(a1 + 16), *(const void **)a4, *(_QWORD *)(a4 + 8), *(_QWORD *)(a4 + 8) - *(_QWORD *)a4);
  *(_BYTE *)(a1 + 40) = a5;
  return a1;
}

_QWORD *sub_1CC5A3E54(_QWORD *a1, size_t a2)
{
  char *v4;
  char *v5;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_1CC596BD4(a1, a2);
    v4 = (char *)a1[1];
    v5 = &v4[a2];
    bzero(v4, a2);
    a1[1] = v5;
  }
  return a1;
}

void sub_1CC5A3EA8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void PRNGenerator::get(uint64_t *a1@<X8>)
{
  std::__shared_weak_count *v3;
  unint64_t *v4;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  __int128 v17;

  sub_1CC5A4064(&qword_1ECD3F1C8, a1);
  if (!*a1)
  {
    std::mutex::lock((std::mutex *)&qword_1ECD3F1D8);
    sub_1CC5A4064(&qword_1ECD3F1C8, &v17);
    sub_1CC5A40BC((uint64_t)a1, &v17);
    v3 = (std::__shared_weak_count *)*((_QWORD *)&v17 + 1);
    if (*((_QWORD *)&v17 + 1))
    {
      v4 = (unint64_t *)(*((_QWORD *)&v17 + 1) + 8);
      do
        v5 = __ldaxr(v4);
      while (__stlxr(v5 - 1, v4));
      if (!v5)
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
    }
    if (!*a1)
    {
      PRNGenerator::create_default_global(&v17);
      sub_1CC5A40BC((uint64_t)a1, &v17);
      v6 = (std::__shared_weak_count *)*((_QWORD *)&v17 + 1);
      if (*((_QWORD *)&v17 + 1))
      {
        v7 = (unint64_t *)(*((_QWORD *)&v17 + 1) + 8);
        do
          v8 = __ldaxr(v7);
        while (__stlxr(v8 - 1, v7));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
      v9 = (std::__shared_weak_count *)a1[1];
      v15 = *a1;
      v16 = v9;
      if (v9)
      {
        p_shared_owners = (unint64_t *)&v9->__shared_owners_;
        do
          v11 = __ldxr(p_shared_owners);
        while (__stxr(v11 + 1, p_shared_owners));
      }
      sub_1CC5A42FC(&qword_1ECD3F1C8, &v15);
      v12 = v16;
      if (v16)
      {
        v13 = (unint64_t *)&v16->__shared_owners_;
        do
          v14 = __ldaxr(v13);
        while (__stlxr(v14 - 1, v13));
        if (!v14)
        {
          ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
          std::__shared_weak_count::__release_weak(v12);
        }
      }
    }
    std::mutex::unlock((std::mutex *)&qword_1ECD3F1D8);
  }
}

void sub_1CC5A4028(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  awd::AWDServerConnection *v9;

  awd::AWDServerConnection::~AWDServerConnection((awd::AWDServerConnection *)&a9);
  std::mutex::unlock((std::mutex *)&qword_1ECD3F1D8);
  awd::AWDServerConnection::~AWDServerConnection(v9);
  _Unwind_Resume(a1);
}

void sub_1CC5A4064(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  std::__sp_mut *sp_mut;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;

  sp_mut = std::__get_sp_mut(a1);
  std::__sp_mut::lock(sp_mut);
  v5 = a1[1];
  *a2 = *a1;
  a2[1] = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  std::__sp_mut::unlock(sp_mut);
}

uint64_t sub_1CC5A40BC(uint64_t a1, __int128 *a2)
{
  __int128 v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  v3 = *a2;
  *(_QWORD *)a2 = 0;
  *((_QWORD *)a2 + 1) = 0;
  v4 = *(std::__shared_weak_count **)(a1 + 8);
  *(_OWORD *)a1 = v3;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  return a1;
}

void PRNGenerator::create_default_global(_QWORD *a1@<X8>)
{
  _QWORD *v3;
  ctu::Clock *v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t i;
  int v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  std::__shared_weak_count *v11;
  unint64_t v12;
  unint64_t *p_shared_weak_owners;
  unint64_t v14;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;

  v3 = (_QWORD *)operator new();
  bzero(v3, 0x9F0uLL);
  PRNGenerator::PRNGenerator((PRNGenerator *)v3);
  *v3 = off_1E886ACA8;
  v5 = ctu::Clock::now_in_nanoseconds(v4);
  *((_DWORD *)v3 + 10) = v5;
  v6 = 1;
  for (i = 11; i != 634; ++i)
  {
    v8 = 1812433253 * (v5 ^ (v5 >> 30));
    v5 = v8 + v6;
    *((_DWORD *)v3 + i) = i + v8 - 10;
    ++v6;
  }
  v3[317] = 624;
  sub_1CC5A4600((unsigned int *)v3 + 10);
  v9 = (std::__shared_weak_count *)operator new();
  v9->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v9->__shared_owners_;
  v9->__vftable = (std::__shared_weak_count_vtbl *)&off_1E886B9F0;
  v9->__shared_weak_owners_ = 0;
  v9[1].__vftable = (std::__shared_weak_count_vtbl *)v3;
  v11 = (std::__shared_weak_count *)v3[2];
  if (v11)
  {
    if (v11->__shared_owners_ != -1)
      goto LABEL_16;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
    p_shared_weak_owners = (unint64_t *)&v9->__shared_weak_owners_;
    do
      v14 = __ldxr(p_shared_weak_owners);
    while (__stxr(v14 + 1, p_shared_weak_owners));
    v3[1] = v3;
    v3[2] = v9;
    std::__shared_weak_count::__release_weak(v11);
  }
  else
  {
    do
      v15 = __ldxr(p_shared_owners);
    while (__stxr(v15 + 1, p_shared_owners));
    v16 = (unint64_t *)&v9->__shared_weak_owners_;
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
    v3[1] = v3;
    v3[2] = v9;
  }
  do
    v18 = __ldaxr(p_shared_owners);
  while (__stlxr(v18 - 1, p_shared_owners));
  if (!v18)
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
LABEL_16:
  *a1 = v3;
  a1[1] = v9;
}

void sub_1CC5A42A0(void *a1)
{
  dispatch_queue_t *v1;

  __cxa_begin_catch(a1);
  dispatch_barrier_async_f(v1[3], v1, (dispatch_function_t)sub_1CC5A4984);
  __cxa_rethrow();
}

void sub_1CC5A42C0(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_1CC5A42FC(uint64_t *a1, uint64_t *a2)
{
  std::__sp_mut *sp_mut;
  uint64_t v5;
  uint64_t v6;

  sp_mut = std::__get_sp_mut(a1);
  std::__sp_mut::lock(sp_mut);
  v5 = *a1;
  *a1 = *a2;
  *a2 = v5;
  v6 = a1[1];
  a1[1] = a2[1];
  a2[1] = v6;
  std::__sp_mut::unlock(sp_mut);
}

void PRNGenerator::set(uint64_t *a1)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;

  std::mutex::lock((std::mutex *)&qword_1ECD3F1D8);
  v2 = a1[1];
  v8 = *a1;
  v9 = (std::__shared_weak_count *)v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  sub_1CC5A42FC(&qword_1ECD3F1C8, &v8);
  v5 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  std::mutex::unlock((std::mutex *)&qword_1ECD3F1D8);
}

void sub_1CC5A43F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  awd::AWDServerConnection::~AWDServerConnection((awd::AWDServerConnection *)&a9);
  std::mutex::unlock((std::mutex *)&qword_1ECD3F1D8);
  _Unwind_Resume(a1);
}

void PRNGenerator::destroy(PRNGenerator *this)
{
  uint64_t v1[2];

  v1[0] = 0;
  v1[1] = 0;
  PRNGenerator::set(v1);
}

void sub_1CC5A4444(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  awd::AWDServerConnection::~AWDServerConnection((awd::AWDServerConnection *)&a9);
  _Unwind_Resume(a1);
}

void PRNGenerator::PRNGenerator(PRNGenerator *this)
{
  NSObject *v2;
  NSObject *v3;

  v2 = dispatch_queue_create("PRNGenerator", 0);
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = v2;
  if (v2)
  {
    v3 = v2;
    dispatch_retain(v2);
    *((_QWORD *)this + 4) = 0;
    dispatch_release(v3);
  }
  else
  {
    *((_QWORD *)this + 4) = 0;
  }
  *(_QWORD *)this = &unk_1E886ABA8;
}

uint64_t PRNGenerator::generatePRN10000(PRNGenerator *this)
{
  NSObject *v1;
  char *v2;
  PRNGenerator *v4;
  _QWORD v5[6];
  _QWORD *v6;
  uint64_t block;
  uint64_t v8;
  uint64_t (*v9)(uint64_t);
  void *v10;
  unsigned int *v11;
  _QWORD *v12;
  unsigned int v13;

  v4 = this;
  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 0x40000000;
  v5[2] = sub_1CC5A488C;
  v5[3] = &unk_1E886BCB8;
  v5[4] = (char *)this + 8;
  v5[5] = &v4;
  v6 = v5;
  v2 = (char *)this + 24;
  v1 = *((_QWORD *)this + 3);
  if (*((_QWORD *)v2 + 1))
  {
    v13 = 0;
    block = MEMORY[0x1E0C809B0];
    v8 = 0x40000000;
    v9 = sub_1CC5A48D4;
    v10 = &unk_1E886BFF0;
    v11 = &v13;
    v12 = &v6;
    dispatch_async_and_wait(v1, &block);
  }
  else
  {
    v13 = 0;
    block = MEMORY[0x1E0C809B0];
    v8 = 0x40000000;
    v9 = sub_1CC5A48A0;
    v10 = &unk_1E886BF30;
    v11 = &v13;
    v12 = &v6;
    dispatch_sync(v1, &block);
  }
  return v13;
}

uint64_t sub_1CC5A4590(uint64_t a1)
{
  return sub_1CC5A4654(a1 + 40, 0, 9999);
}

uint64_t sub_1CC5A45A0(uint64_t a1)
{
  sub_1CC594A2C((_QWORD *)(a1 + 8));
  return a1;
}

void sub_1CC5A45C8(uint64_t a1)
{
  sub_1CC594A2C((_QWORD *)(a1 + 8));
  JUMPOUT(0x1D17AD544);
}

unsigned int *sub_1CC5A4600(unsigned int *result)
{
  uint64_t v1;
  int v2;
  int v3;

  v1 = 0;
  v2 = result[623] ^ result[396];
  if (v2 >= 0)
    v3 = 2 * v2;
  else
    v3 = (2 * v2) ^ 0x321161BF;
  *result = *result & 0x80000000 | v3 & 0x7FFFFFFF;
  while (!result[v1])
  {
    if (++v1 == 624)
    {
      *result = 0x80000000;
      return result;
    }
  }
  return result;
}

uint64_t sub_1CC5A4654(uint64_t a1, int a2, uint64_t a3)
{
  unsigned int v3;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;

  v3 = a3 - a2;
  if ((_DWORD)a3 != a2)
  {
    if (v3 == -1)
    {
      v12 = *(_QWORD *)(a1 + 2496);
      if (v12 == 624)
      {
        sub_1CC5A475C((int *)a1);
        v12 = *(_QWORD *)(a1 + 2496);
      }
      v13 = *(_DWORD *)(a1 + 4 * v12);
      *(_QWORD *)(a1 + 2496) = v12 + 1;
      v14 = ((v13 ^ (v13 >> 11)) << 7) & 0x9D2C5680 ^ v13 ^ (v13 >> 11);
      return ((v14 << 15) & 0xEFC60000 ^ v14 ^ (((v14 << 15) & 0xEFC60000 ^ v14) >> 18)) + a2;
    }
    else
    {
      v6 = 0xFFFFFFFF / (v3 + 1);
      if (~(v6 * (v3 + 1)) == v3)
        v7 = v6 + 1;
      else
        v7 = 0xFFFFFFFF / (v3 + 1);
      v8 = *(_QWORD *)(a1 + 2496);
      do
      {
        if (v8 == 624)
        {
          sub_1CC5A475C((int *)a1);
          v8 = *(_QWORD *)(a1 + 2496);
        }
        v9 = *(_DWORD *)(a1 + 4 * v8++);
        *(_QWORD *)(a1 + 2496) = v8;
        v10 = ((v9 ^ (v9 >> 11)) << 7) & 0x9D2C5680 ^ v9 ^ (v9 >> 11);
        v11 = ((v10 << 15) & 0xEFC60000 ^ v10 ^ (((v10 << 15) & 0xEFC60000 ^ v10) >> 18)) / v7;
      }
      while (v11 > v3);
      return v11 + a2;
    }
  }
  return a3;
}

int *sub_1CC5A475C(int *result)
{
  uint64_t v1;
  int v2;
  unsigned int v3;
  uint64_t v4;
  int v5;
  unsigned int v6;
  uint64_t v7;
  const float *v8;
  int8x16_t v9;
  int8x16_t v10;
  int8x16_t v11;
  int8x16_t v12;
  int8x16_t v13;
  int8x16_t v14;

  v1 = 0;
  v2 = *result;
  do
  {
    v3 = v2 & 0x80000000;
    v2 = result[v1 + 1];
    result[v1] = result[v1 + 397] ^ ((v2 & 0x7FFFFFFE | v3) >> 1) ^ (v2 << 31 >> 31) & 0x9908B0DF;
    ++v1;
  }
  while (v1 != 222);
  v4 = 0;
  v5 = result[222];
  do
  {
    v6 = v5 & 0x80000000;
    v5 = result[v4 + 223];
    result[v4 + 222] = result[v4 + 619] ^ ((v5 & 0x7FFFFFFE | v6) >> 1) ^ (v5 << 31 >> 31) & 0x9908B0DF;
    ++v4;
  }
  while (v4 != 5);
  v7 = 0;
  v8 = (const float *)(result + 227);
  v9 = (int8x16_t)vld1q_dup_f32(v8);
  v10.i64[0] = 0x8000000080000000;
  v10.i64[1] = 0x8000000080000000;
  v11 = (int8x16_t)vdupq_n_s32(0x7FFFFFFEu);
  v12.i64[0] = 0x100000001;
  v12.i64[1] = 0x100000001;
  v13 = (int8x16_t)vdupq_n_s32(0x9908B0DF);
  do
  {
    v14 = *(int8x16_t *)&result[v7 + 228];
    *(int8x16_t *)&result[v7 + 227] = veorq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)vorrq_s8(vandq_s8(v14, v11), vandq_s8(vextq_s8(v9, v14, 0xCuLL), v10)), 1uLL), veorq_s8(*(int8x16_t *)&result[v7], vbicq_s8(v13, (int8x16_t)vceqzq_s32((int32x4_t)vandq_s8(v14, v12)))));
    v7 += 4;
    v9 = v14;
  }
  while (v7 != 396);
  result[623] = result[396] ^ ((*result & 0x7FFFFFFE | result[623] & 0x80000000) >> 1) ^ (*result << 31 >> 31) & 0x9908B0DF;
  *((_QWORD *)result + 312) = 0;
  return result;
}

uint64_t sub_1CC5A488C(uint64_t a1)
{
  return (****(uint64_t (*****)(_QWORD))(a1 + 40))(**(_QWORD **)(a1 + 40));
}

uint64_t sub_1CC5A48A0(uint64_t a1)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)(a1 + 40) + 16))();
  **(_DWORD **)(a1 + 32) = result;
  return result;
}

uint64_t sub_1CC5A48D4(uint64_t a1)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)(a1 + 40) + 16))();
  **(_DWORD **)(a1 + 32) = result;
  return result;
}

void sub_1CC5A490C(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1D17AD544);
}

void sub_1CC5A4930(uint64_t a1)
{
  dispatch_barrier_async_f(*(dispatch_queue_t *)(*(_QWORD *)(a1 + 24) + 24), *(void **)(a1 + 24), (dispatch_function_t)sub_1CC5A4984);
}

uint64_t sub_1CC5A4944(uint64_t a1, uint64_t a2)
{
  if (sub_1CC59BE60(a2, (uint64_t)&unk_1E886AB28))
    return a1 + 24;
  else
    return 0;
}

uint64_t sub_1CC5A4984(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
  return result;
}

_QWORD *awd::AWDMetricSubmitter::create@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;

  v4 = operator new();
  sub_1CC5A4ADC((_QWORD *)v4, "AWDMetricSubmitter", QOS_CLASS_DEFAULT, "submitter");
  *(_OWORD *)(v4 + 40) = *(_OWORD *)a1;
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(v4 + 72) = 0;
  *(_QWORD *)(v4 + 64) = 0;
  *(_QWORD *)(v4 + 56) = v4 + 64;
  return sub_1CC5A4FE0(a2, (_QWORD *)v4);
}

void sub_1CC5A4A18(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1D17AD544](v1, 0x1020C40B3F491F8);
  _Unwind_Resume(a1);
}

__n128 awd::AWDMetricSubmitter::AWDMetricSubmitter(_QWORD *a1, __n128 *a2)
{
  _QWORD *v3;
  __n128 result;

  v3 = sub_1CC5A4ADC(a1, "AWDMetricSubmitter", QOS_CLASS_DEFAULT, "submitter");
  result = *a2;
  *(__n128 *)(v3 + 5) = *a2;
  a2->n128_u64[0] = 0;
  a2->n128_u64[1] = 0;
  v3[9] = 0;
  v3[8] = 0;
  v3[7] = v3 + 8;
  return result;
}

{
  _QWORD *v3;
  __n128 result;

  v3 = sub_1CC5A4ADC(a1, "AWDMetricSubmitter", QOS_CLASS_DEFAULT, "submitter");
  result = *a2;
  *(__n128 *)(v3 + 5) = *a2;
  a2->n128_u64[0] = 0;
  a2->n128_u64[1] = 0;
  v3[9] = 0;
  v3[8] = 0;
  v3[7] = v3 + 8;
  return result;
}

_QWORD *sub_1CC5A4ADC(_QWORD *a1, const char *a2, dispatch_qos_class_t a3, const char *a4)
{
  dispatch_object_t object;

  object = 0;
  sub_1CC59C088(a1, a2, a3, &object);
  if (object)
    dispatch_release(object);
  ctu::OsLogLogger::OsLogLogger((ctu::OsLogLogger *)(a1 + 4), "com.apple.awd.framework", a4);
  return a1;
}

void sub_1CC5A4B38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, dispatch_object_t object)
{
  _QWORD *v10;

  sub_1CC594A2C(v10);
  _Unwind_Resume(a1);
}

void awd::AWDMetricSubmitter::addMetric(_QWORD *a1, uint64_t a2, int a3, int a4, int a5, uint64_t a6)
{
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v9;
  NSObject *v10;
  NSObject *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  _QWORD v14[6];
  uint64_t v15;
  std::__shared_weak_count *v16;
  int v17;
  int v18;
  uint64_t v19;
  int v20;
  _QWORD block[6];

  v19 = a2;
  v20 = a3;
  v17 = a5;
  v18 = a4;
  v15 = 0;
  v16 = 0;
  v7 = (std::__shared_weak_count *)a1[6];
  if (!v7)
  {
    v9 = 0;
    goto LABEL_7;
  }
  v9 = std::__shared_weak_count::lock(v7);
  v16 = v9;
  if (!v9 || (v15 = a1[5]) == 0)
  {
LABEL_7:
    v11 = a1[4];
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(block[0]) = 0;
      _os_log_impl(&dword_1CC590000, v11, OS_LOG_TYPE_DEFAULT, "client.submitter:#E Unable to send metric because AWDServerFacade is not valid.", (uint8_t *)block, 2u);
    }
    if (v9)
      goto LABEL_13;
    return;
  }
  v14[0] = a6;
  v14[1] = a1;
  v14[2] = &v18;
  v14[3] = &v19;
  v14[4] = &v17;
  v14[5] = &v15;
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = sub_1CC5A5160;
  block[3] = &unk_1E886BCD8;
  block[4] = a1;
  block[5] = v14;
  v10 = a1[2];
  if (a1[3])
    dispatch_async_and_wait(v10, block);
  else
    dispatch_sync(v10, block);
  v9 = v16;
  if (v16)
  {
LABEL_13:
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
}

void awd::AWDMetricSubmitter::doneWithMetrics(_QWORD *a1, int a2, uint64_t a3, int a4)
{
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v9;
  _QWORD *v10;
  NSObject *v11;
  NSObject *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  xpc_object_t object;
  _QWORD *v16;
  std::__shared_weak_count *v17;
  uint8_t buf[4];
  int v19;
  __int16 v20;
  int v21;
  __int16 v22;
  int v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v16 = 0;
  v17 = 0;
  v5 = (std::__shared_weak_count *)a1[6];
  if (v5)
  {
    v9 = std::__shared_weak_count::lock(v5);
    v17 = v9;
    if (v9)
    {
      v10 = (_QWORD *)a1[5];
      v16 = v10;
      if (v10)
      {
        v11 = a1[4];
        if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 67109632;
          v19 = a3;
          v20 = 1024;
          v21 = HIDWORD(a3);
          v22 = 1024;
          v23 = a4;
          _os_log_impl(&dword_1CC590000, v11, OS_LOG_TYPE_INFO, "client.submitter:#I Sending done with metrics message for Trigger(cid=0x%x, trid=0x%x, sid=%u)", buf, 0x14u);
        }
        awd::AWDFinishedSubmissionMessage::AWDFinishedSubmissionMessage((uint64_t)buf, a2, a3, a4);
        awd::AWDFinishedSubmissionMessage::createXpcMessage((awd::AWDFinishedSubmissionMessage *)buf, &object);
        awd::AWDServerFacade::sendMessage(v10, &object);
        xpc_release(object);
        object = 0;
LABEL_11:
        p_shared_owners = (unint64_t *)&v9->__shared_owners_;
        do
          v14 = __ldaxr(p_shared_owners);
        while (__stlxr(v14 - 1, p_shared_owners));
        if (!v14)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
        return;
      }
    }
  }
  else
  {
    v9 = 0;
  }
  v12 = a1[4];
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1CC590000, v12, OS_LOG_TYPE_DEFAULT, "client.submitter:#E Unable to send finished submission message because AWDServerFacade is not valid.", buf, 2u);
  }
  if (v9)
    goto LABEL_11;
}

void sub_1CC5A4E50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object, char a11)
{
  if (a2)
    sub_1CC592AD0(exception_object);
  _Unwind_Resume(exception_object);
}

void awd::AWDMetricSubmitter::generateTrigger(_QWORD *a1, uint64_t a2, int a3, uint64_t a4)
{
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v9;
  _QWORD *v10;
  NSObject *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  xpc_object_t object;
  uint8_t buf[48];
  _QWORD *v16;
  std::__shared_weak_count *v17;

  v16 = 0;
  v17 = 0;
  v5 = (std::__shared_weak_count *)a1[6];
  if (v5)
  {
    v9 = std::__shared_weak_count::lock(v5);
    v17 = v9;
    if (v9)
    {
      v10 = (_QWORD *)a1[5];
      v16 = v10;
      if (v10)
      {
        awd::AWDTriggerMessage::AWDTriggerMessage((uint64_t)buf, a2, a4, a2, a3);
        awd::AWDTriggerMessage::createXpcMessage((awd::AWDTriggerMessage *)buf, &object);
        awd::AWDServerFacade::sendMessage(v10, &object);
        xpc_release(object);
        object = 0;
LABEL_9:
        p_shared_owners = (unint64_t *)&v9->__shared_owners_;
        do
          v13 = __ldaxr(p_shared_owners);
        while (__stlxr(v13 - 1, p_shared_owners));
        if (!v13)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
        return;
      }
    }
  }
  else
  {
    v9 = 0;
  }
  v11 = a1[4];
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1CC590000, v11, OS_LOG_TYPE_DEFAULT, "client.submitter:#E Unable to send trigger message because AWDServerFacade is not valid.", buf, 2u);
  }
  if (v9)
    goto LABEL_9;
}

void sub_1CC5A4FB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  xpc_release(object);
  awd::AWDServerConnection::~AWDServerConnection((awd::AWDServerConnection *)&a17);
  _Unwind_Resume(a1);
}

_QWORD *sub_1CC5A4FE0(_QWORD *a1, _QWORD *a2)
{
  _QWORD *v4;

  *a1 = a2;
  v4 = (_QWORD *)operator new();
  *v4 = &off_1E886BA60;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  sub_1CC59BD34((uint64_t)a1, a2, (uint64_t)a2);
  return a1;
}

void sub_1CC5A5044(void *a1)
{
  dispatch_queue_t *v1;

  __cxa_begin_catch(a1);
  dispatch_barrier_async_f(v1[2], v1, (dispatch_function_t)sub_1CC5A50F4);
  __cxa_rethrow();
}

void sub_1CC5A5064(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_1CC5A507C(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1D17AD544);
}

void sub_1CC5A50A0(uint64_t a1)
{
  dispatch_barrier_async_f(*(dispatch_queue_t *)(*(_QWORD *)(a1 + 24) + 16), *(void **)(a1 + 24), (dispatch_function_t)sub_1CC5A50F4);
}

uint64_t sub_1CC5A50B4(uint64_t a1, uint64_t a2)
{
  if (sub_1CC59BE60(a2, (uint64_t)&unk_1E886AB48))
    return a1 + 24;
  else
    return 0;
}

uint64_t sub_1CC5A50F4(uint64_t result)
{
  if (result)
  {
    sub_1CC5A5120(result);
    JUMPOUT(0x1D17AD544);
  }
  return result;
}

_QWORD *sub_1CC5A5120(uint64_t a1)
{
  std::__shared_weak_count *v2;

  sub_1CC598878(a1 + 56, *(_QWORD **)(a1 + 64));
  v2 = *(std::__shared_weak_count **)(a1 + 48);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  MEMORY[0x1D17AD2BC](a1 + 32);
  return sub_1CC594A2C((_QWORD *)a1);
}

void sub_1CC5A5160(uint64_t a1)
{
  unsigned int **v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  unsigned int *v5;
  int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  _QWORD *v14;
  xpc_object_t object;
  __n128 __p;
  uint64_t v17;
  uint8_t buf[8];
  __int16 v19;
  int v20;
  __int16 v21;
  unsigned int v22;
  __int16 v23;
  unsigned int v24;
  __int16 v25;
  int v26;
  void *v27;
  void *v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v1 = *(unsigned int ***)(a1 + 40);
  v2 = (uint64_t)*v1;
  v3 = **v1;
  v4 = *((_QWORD *)v1[1] + 4);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    v5 = v1[3];
    v6 = *v1[2];
    v7 = *v5;
    v8 = v5[1];
    LODWORD(v5) = v5[2];
    *(_DWORD *)buf = 67110144;
    *(_DWORD *)&buf[4] = v3;
    v19 = 1024;
    v20 = v6;
    v21 = 1024;
    v22 = v7;
    v23 = 1024;
    v24 = v8;
    v25 = 1024;
    v26 = (int)v5;
    _os_log_impl(&dword_1CC590000, v4, OS_LOG_TYPE_INFO, "client.submitter:#I Sending metric submission message for metric 0x%x, profid 0x%x, Trigger(cid=0x%x, trid=0x%x, sid=%u)", buf, 0x20u);
    v2 = (uint64_t)*v1;
  }
  v9 = v1[3];
  v10 = *v1[4];
  v11 = *v1[2];
  v12 = *(_QWORD *)v9;
  v13 = v9[2];
  v17 = 0;
  __p = 0uLL;
  sub_1CC59DDD0(&__p, *(const void **)(v2 + 16), *(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 24) - *(_QWORD *)(v2 + 16));
  awd::AWDSubmissionMessage::AWDSubmissionMessage((uint64_t)buf, v10, v3 | (v11 << 32), v12, v13, &__p);
  if (__p.n128_u64[0])
  {
    __p.n128_u64[1] = __p.n128_u64[0];
    operator delete((void *)__p.n128_u64[0]);
  }
  v14 = *(_QWORD **)v1[5];
  awd::AWDSubmissionMessage::createXpcMessage((const void **)buf, &object);
  awd::AWDServerFacade::sendMessage(v14, &object);
  xpc_release(object);
  object = 0;
  *(_QWORD *)buf = &off_1E886ADC8;
  if (v27)
  {
    v28 = v27;
    operator delete(v27);
  }
}

void sub_1CC5A52F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, xpc_object_t object, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18)
{
  if (a2)
    sub_1CC592AD0(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t awd::reflect::getUnpackedType(uint64_t result)
{
  if ((result - 15) >= 0xC)
    return result;
  else
    return (result - 14);
}

uint64_t awd::reflect::getPackedType(int a1)
{
  if ((a1 - 1) > 0x19)
    return 0;
  else
    return dword_1CC5C7D40[a1 - 1];
}

unint64_t awd::reflect::decodeTag(awd::reflect *this)
{
  return this & 7 | ((unint64_t)(this >> 3) << 32);
}

uint64_t awd::reflect::encodeTag(char a1, int a2)
{
  return a1 & 7 | (8 * a2);
}

uint64_t awd::reflect::getWireTypeForType(int a1)
{
  if ((a1 - 1) > 0x1A)
    return 0;
  else
    return byte_1CC5C7DA8[a1 - 1];
}

uint64_t awd::reflect::getDecodingType(uint64_t a1, int a2)
{
  uint64_t UnpackedType;

  if (awd::reflect::getWireTypeForType(a1) == a2)
    return a1;
  UnpackedType = awd::reflect::getUnpackedType(a1);
  if (awd::reflect::getWireTypeForType(UnpackedType) != a2)
  {
    if (a2 != 2)
      return 0;
    UnpackedType = awd::reflect::getPackedType(a1);
    if (!(_DWORD)UnpackedType)
      return 0;
  }
  return UnpackedType;
}

uint64_t awd::protobuf::skipField(wireless_diagnostics::google::protobuf::io::CodedInputStream *this, int a2)
{
  uint64_t result;
  char *v4;
  char *v5;
  unsigned int v6[2];

  result = 0;
  switch(a2)
  {
    case 0:
      *(_QWORD *)v6 = 0;
      v4 = (char *)*((_QWORD *)this + 1);
      if ((unint64_t)v4 >= *((_QWORD *)this + 2) || *v4 < 0)
        return wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint64Fallback(this, (unint64_t *)v6);
      *((_QWORD *)this + 1) = v4 + 1;
      return 1;
    case 1:
      *(_QWORD *)v6 = 0;
      return wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, (unint64_t *)v6);
    case 2:
      v6[0] = 0;
      v5 = (char *)*((_QWORD *)this + 1);
      if ((unint64_t)v5 >= *((_QWORD *)this + 2) || *v5 < 0)
      {
        result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v6);
        if (!(_DWORD)result)
          return result;
      }
      else
      {
        v6[0] = *v5;
        *((_QWORD *)this + 1) = v5 + 1;
      }
      return wireless_diagnostics::google::protobuf::io::CodedInputStream::Skip(this);
    case 5:
      v6[0] = 0;
      return wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback(this, v6);
    default:
      return result;
  }
}

uint64_t awd::protobuf::NumberConverter<(awd::reflect::Type)8>::decode(unsigned int a1)
{
  return -(a1 & 1) ^ (a1 >> 1);
}

uint64_t awd::protobuf::NumberConverter<(awd::reflect::Type)8>::encode(int a1)
{
  return (2 * a1) ^ (a1 >> 31);
}

unint64_t awd::protobuf::NumberConverter<(awd::reflect::Type)5>::decode(unint64_t a1)
{
  return -(uint64_t)(a1 & 1) ^ (a1 >> 1);
}

uint64_t awd::protobuf::NumberConverter<(awd::reflect::Type)5>::encode(uint64_t a1)
{
  return (2 * a1) ^ (a1 >> 63);
}

double awd::protobuf::NumberConverter<(awd::reflect::Type)1>::decode(uint64_t a1)
{
  return *(double *)&a1;
}

float awd::protobuf::NumberConverter<(awd::reflect::Type)2>::decode(int a1)
{
  return *(float *)&a1;
}

uint64_t awd::AWDFinishedSubmissionMessage::AWDFinishedSubmissionMessage(uint64_t result, int a2, uint64_t a3, int a4)
{
  *(_QWORD *)result = &off_1E886AEB8;
  *(_DWORD *)(result + 8) = a2;
  *(_QWORD *)(result + 12) = a3;
  *(_DWORD *)(result + 20) = a4;
  return result;
}

{
  *(_QWORD *)result = &off_1E886AEB8;
  *(_DWORD *)(result + 8) = a2;
  *(_QWORD *)(result + 12) = a3;
  *(_DWORD *)(result + 20) = a4;
  return result;
}

uint64_t awd::AWDFinishedSubmissionMessage::AWDFinishedSubmissionMessage(uint64_t a1, xpc_object_t *a2)
{
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = &off_1E886AEB8;
  if (MEMORY[0x1D17ADA60](*a2) == MEMORY[0x1E0C812F8])
  {
    *(_DWORD *)(a1 + 8) = xpc_dictionary_get_int64(*a2, "AWDMessageComponentId");
    *(_DWORD *)(a1 + 16) = xpc_dictionary_get_int64(*a2, "AWDMessageTriggerId");
    *(_DWORD *)(a1 + 20) = xpc_dictionary_get_int64(*a2, "AWDMessageSubmisssionId");
    *(_DWORD *)(a1 + 12) = xpc_dictionary_get_int64(*a2, "AWDMessageTriggeringComponentId");
  }
  return a1;
}

void awd::AWDFinishedSubmissionMessage::createXpcMessage(awd::AWDFinishedSubmissionMessage *this@<X0>, xpc_object_t *a2@<X8>)
{
  xpc_object_t v4;
  void *v5;

  v4 = xpc_dictionary_create(0, 0, 0);
  if (v4)
  {
    v5 = v4;
    xpc_dictionary_set_int64(v4, "AWDMessageType", 3);
    xpc_dictionary_set_int64(v5, "AWDMessageComponentId", *((unsigned int *)this + 2));
    xpc_dictionary_set_int64(v5, "AWDMessageTriggerId", *((unsigned int *)this + 4));
    xpc_dictionary_set_int64(v5, "AWDMessageSubmisssionId", *((unsigned int *)this + 5));
    xpc_dictionary_set_int64(v5, "AWDMessageTriggeringComponentId", *((unsigned int *)this + 3));
    *a2 = v5;
    if (MEMORY[0x1D17ADA60](v5) == MEMORY[0x1E0C812F8])
      xpc_retain(v5);
    else
      *a2 = xpc_null_create();
    xpc_release(v5);
  }
  else
  {
    *a2 = xpc_null_create();
  }
}

uint64_t awd::AWDFinishedSubmissionMessage::getComponentId(awd::AWDFinishedSubmissionMessage *this)
{
  return *((unsigned int *)this + 2);
}

uint64_t awd::AWDFinishedSubmissionMessage::getTrigger(awd::AWDFinishedSubmissionMessage *this)
{
  return *(_QWORD *)((char *)this + 12);
}

void sub_1CC5A5780()
{
  JUMPOUT(0x1D17AD544);
}

uint64_t awd::AWDControlMessage::AWDControlMessage(uint64_t result, int a2)
{
  *(_QWORD *)result = &off_1E886AD38;
  *(_DWORD *)(result + 8) = a2;
  return result;
}

{
  *(_QWORD *)result = &off_1E886AD38;
  *(_DWORD *)(result + 8) = a2;
  return result;
}

uint64_t awd::AWDControlMessage::AWDControlMessage(uint64_t a1, xpc_object_t *a2)
{
  *(_QWORD *)a1 = &off_1E886AD38;
  if (MEMORY[0x1D17ADA60](*a2) == MEMORY[0x1E0C812F8])
    *(_DWORD *)(a1 + 8) = xpc_dictionary_get_int64(*a2, "AWDMessageControlMessageType");
  return a1;
}

void awd::AWDControlMessage::createXpcMessage(awd::AWDControlMessage *this@<X0>, _QWORD *a2@<X8>)
{
  xpc_object_t v4;
  xpc_object_t v5;
  xpc_object_t v6;
  xpc_object_t v7;
  xpc_object_t v8;
  _QWORD *v9;
  const char *v10;
  xpc_object_t v11;
  xpc_object_t object;

  v4 = xpc_dictionary_create(0, 0, 0);
  v5 = v4;
  if (v4)
  {
    *a2 = v4;
  }
  else
  {
    v5 = xpc_null_create();
    *a2 = v5;
    if (!v5)
    {
      v6 = xpc_null_create();
      v5 = 0;
      goto LABEL_8;
    }
  }
  if (MEMORY[0x1D17ADA60](v5) == MEMORY[0x1E0C812F8])
  {
    xpc_retain(v5);
    goto LABEL_9;
  }
  v6 = xpc_null_create();
LABEL_8:
  *a2 = v6;
LABEL_9:
  xpc_release(v5);
  v11 = xpc_int64_create(7);
  if (!v11)
    v11 = xpc_null_create();
  v9 = a2;
  v10 = "AWDMessageType";
  sub_1CC5954D0((uint64_t)&v9, &v11, &object);
  xpc_release(object);
  object = 0;
  xpc_release(v11);
  v11 = 0;
  v7 = xpc_int64_create(*((int *)this + 2));
  if (!v7)
    v7 = xpc_null_create();
  v9 = a2;
  v10 = "AWDMessageControlMessageType";
  sub_1CC5954D0((uint64_t)&v9, &v7, &v8);
  xpc_release(v8);
  v8 = 0;
  xpc_release(v7);
}

uint64_t awd::AWDControlMessage::getControlMessageType(awd::AWDControlMessage *this)
{
  return *((unsigned int *)this + 2);
}

void sub_1CC5A598C()
{
  JUMPOUT(0x1D17AD544);
}

uint64_t awd::AWDPIILocationMessage::AWDPIILocationMessage(uint64_t a1, _QWORD *a2)
{
  _QWORD *v5;
  const char *v6;
  xpc_object_t object;

  *(_QWORD *)a1 = &off_1E886ADF0;
  if (MEMORY[0x1D17ADA60](*a2) == MEMORY[0x1E0C812F8])
  {
    v5 = a2;
    v6 = "AWDMessageComponentId";
    sub_1CC595210((uint64_t)&v5, &object);
    *(_DWORD *)(a1 + 8) = xpc::dyn_cast_or_default();
    xpc_release(object);
    v5 = a2;
    v6 = "AWDMessagePII";
    sub_1CC595210((uint64_t)&v5, &object);
    *(_BYTE *)(a1 + 12) = xpc::dyn_cast_or_default() != 0;
    xpc_release(object);
    v5 = a2;
    v6 = "AWDMessageLocKey";
    sub_1CC595210((uint64_t)&v5, &object);
    *(_BYTE *)(a1 + 13) = xpc::dyn_cast_or_default() != 0;
    xpc_release(object);
    v5 = a2;
    v6 = "AWDMessageShimKey";
    sub_1CC595210((uint64_t)&v5, &object);
    *(_BYTE *)(a1 + 14) = xpc::dyn_cast_or_default();
    xpc_release(object);
  }
  return a1;
}

void sub_1CC5A5AC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, xpc_object_t object)
{
  xpc_release(object);
  _Unwind_Resume(a1);
}

uint64_t awd::AWDPIILocationMessage::AWDPIILocationMessage(uint64_t result, char a2, char a3, char a4)
{
  *(_QWORD *)result = &off_1E886ADF0;
  *(_DWORD *)(result + 8) = 0;
  *(_BYTE *)(result + 12) = a2;
  *(_BYTE *)(result + 13) = a3;
  *(_BYTE *)(result + 14) = a4;
  return result;
}

{
  *(_QWORD *)result = &off_1E886ADF0;
  *(_DWORD *)(result + 8) = 0;
  *(_BYTE *)(result + 12) = a2;
  *(_BYTE *)(result + 13) = a3;
  *(_BYTE *)(result + 14) = a4;
  return result;
}

uint64_t awd::AWDPIILocationMessage::AWDPIILocationMessage(uint64_t result, int a2, char a3, char a4, char a5)
{
  *(_DWORD *)(result + 8) = a2;
  *(_QWORD *)result = &off_1E886ADF0;
  *(_BYTE *)(result + 12) = a3;
  *(_BYTE *)(result + 13) = a4;
  *(_BYTE *)(result + 14) = a5;
  return result;
}

{
  *(_DWORD *)(result + 8) = a2;
  *(_QWORD *)result = &off_1E886ADF0;
  *(_BYTE *)(result + 12) = a3;
  *(_BYTE *)(result + 13) = a4;
  *(_BYTE *)(result + 14) = a5;
  return result;
}

void awd::AWDPIILocationMessage::createXpcMessage(awd::AWDPIILocationMessage *this@<X0>, _QWORD *a2@<X8>)
{
  xpc_object_t v4;
  xpc_object_t v5;
  xpc_object_t v6;
  xpc_object_t v7;
  xpc_object_t v8;
  xpc_object_t v9;
  xpc_object_t v10;
  xpc_object_t v11;
  xpc_object_t v12;
  xpc_object_t v13;
  xpc_object_t object;
  _QWORD *v15;
  const char *v16;
  xpc_object_t v17;
  xpc_object_t v18;

  v4 = xpc_dictionary_create(0, 0, 0);
  v5 = v4;
  if (v4)
  {
    *a2 = v4;
  }
  else
  {
    v5 = xpc_null_create();
    *a2 = v5;
    if (!v5)
    {
      v6 = xpc_null_create();
      v5 = 0;
      goto LABEL_8;
    }
  }
  if (MEMORY[0x1D17ADA60](v5) == MEMORY[0x1E0C812F8])
  {
    xpc_retain(v5);
    goto LABEL_9;
  }
  v6 = xpc_null_create();
LABEL_8:
  *a2 = v6;
LABEL_9:
  xpc_release(v5);
  v17 = xpc_int64_create(8);
  if (!v17)
    v17 = xpc_null_create();
  v15 = a2;
  v16 = "AWDMessageType";
  sub_1CC5954D0((uint64_t)&v15, &v17, &v18);
  xpc_release(v18);
  v18 = 0;
  xpc_release(v17);
  v17 = 0;
  v13 = xpc_int64_create(*((unsigned int *)this + 2));
  if (!v13)
    v13 = xpc_null_create();
  v15 = a2;
  v16 = "AWDMessageComponentId";
  sub_1CC5954D0((uint64_t)&v15, &v13, &object);
  xpc_release(object);
  object = 0;
  xpc_release(v13);
  v13 = 0;
  v11 = xpc_int64_create(*((unsigned __int8 *)this + 12));
  if (!v11)
    v11 = xpc_null_create();
  v15 = a2;
  v16 = "AWDMessagePII";
  sub_1CC5954D0((uint64_t)&v15, &v11, &v12);
  xpc_release(v12);
  v12 = 0;
  xpc_release(v11);
  v11 = 0;
  v9 = xpc_int64_create(*((unsigned __int8 *)this + 13));
  if (!v9)
    v9 = xpc_null_create();
  v15 = a2;
  v16 = "AWDMessageLocKey";
  sub_1CC5954D0((uint64_t)&v15, &v9, &v10);
  xpc_release(v10);
  v10 = 0;
  xpc_release(v9);
  v9 = 0;
  v7 = xpc_int64_create(*((unsigned __int8 *)this + 14));
  if (!v7)
    v7 = xpc_null_create();
  v15 = a2;
  v16 = "AWDMessageShimKey";
  sub_1CC5954D0((uint64_t)&v15, &v7, &v8);
  xpc_release(v8);
  v8 = 0;
  xpc_release(v7);
}

uint64_t awd::AWDPIILocationMessage::getComponentId(awd::AWDPIILocationMessage *this)
{
  return *((unsigned int *)this + 2);
}

uint64_t awd::AWDPIILocationMessage::getCollectPII(awd::AWDPIILocationMessage *this)
{
  return *((unsigned __int8 *)this + 12);
}

uint64_t awd::AWDPIILocationMessage::getCollectLocation(awd::AWDPIILocationMessage *this)
{
  return *((unsigned __int8 *)this + 13);
}

uint64_t awd::AWDPIILocationMessage::getAnalyticsShimMode(awd::AWDPIILocationMessage *this)
{
  return *((unsigned __int8 *)this + 14);
}

void sub_1CC5A5E58()
{
  JUMPOUT(0x1D17AD544);
}

_QWORD *awd::AWDLocationUsedMessage::AWDLocationUsedMessage(_QWORD *this)
{
  *this = &off_1E886AE18;
  return this;
}

{
  *this = &off_1E886AE18;
  return this;
}

_QWORD *awd::AWDLocationUsedMessage::AWDLocationUsedMessage(_QWORD *result)
{
  *result = &off_1E886AE18;
  return result;
}

{
  *result = &off_1E886AE18;
  return result;
}

void awd::AWDLocationUsedMessage::createXpcMessage(xpc_object_t *a1@<X8>)
{
  xpc_object_t v3;
  void *v4;

  v3 = xpc_dictionary_create(0, 0, 0);
  if (v3)
  {
    v4 = v3;
    xpc_dictionary_set_int64(v3, "AWDMessageType", 9);
    *a1 = v4;
    if (MEMORY[0x1D17ADA60](v4) == MEMORY[0x1E0C812F8])
      xpc_retain(v4);
    else
      *a1 = xpc_null_create();
    xpc_release(v4);
  }
  else
  {
    *a1 = xpc_null_create();
  }
}

void sub_1CC5A5F44()
{
  JUMPOUT(0x1D17AD544);
}

uint64_t platform::getSubmissionPath@<X0>(platform *a1@<X0>, _QWORD *a2@<X8>)
{
  char *PlatformBaseDir;
  uint64_t result;
  char *v5;

  switch((int)a1)
  {
    case 2:
    case 3:
    case 4:
      PlatformBaseDir = (char *)platform::getPlatformBaseDir(a1);
      sub_1CC59E69C(a2, PlatformBaseDir);
      ctu::path_join_impl();
      result = ctu::path_join_impl();
      break;
    default:
      v5 = (char *)platform::getPlatformBaseDir(a1);
      sub_1CC59E69C(a2, v5);
      result = ctu::path_join_impl();
      break;
  }
  return result;
}

void sub_1CC5A6064(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t platform::getStagingPath@<X0>(platform *this@<X0>, _QWORD *a2@<X8>)
{
  char *PlatformBaseDir;

  PlatformBaseDir = (char *)platform::getPlatformBaseDir(this);
  sub_1CC59E69C(a2, PlatformBaseDir);
  return ctu::path_join_impl();
}

void sub_1CC5A60C8(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *platform::getPersistentPath@<X0>(platform *this@<X0>, _QWORD *a2@<X8>)
{
  char *PlatformBaseDir;

  PlatformBaseDir = (char *)platform::getPlatformBaseDir(this);
  return sub_1CC59E69C(a2, PlatformBaseDir);
}

uint64_t awd::AWDBasicConfigType::AWDBasicConfigType(uint64_t a1, int a2)
{
  ctu::OsLogLogger::OsLogLogger((ctu::OsLogLogger *)(a1 + 8), "com.apple.awd.framework", "config");
  *(_QWORD *)a1 = &unk_1E886AD88;
  *(_DWORD *)(a1 + 16) = a2;
  return a1;
}

void awd::AWDBasicConfigType::~AWDBasicConfigType(awd::AWDBasicConfigType *this)
{
  MEMORY[0x1D17AD2BC]((char *)this + 8);
}

const char *awd::asString(int a1)
{
  if (a1)
    return "?";
  else
    return "LoggingMetric";
}

uint64_t awd::AWDTimerMessage::AWDTimerMessage(uint64_t this, int a2)
{
  *(_QWORD *)this = &off_1E886ACD0;
  *(_DWORD *)(this + 8) = a2;
  return this;
}

{
  *(_QWORD *)this = &off_1E886ACD0;
  *(_DWORD *)(this + 8) = a2;
  return this;
}

uint64_t awd::AWDTimerMessage::AWDTimerMessage(uint64_t a1, xpc_object_t *a2)
{
  *(_QWORD *)a1 = &off_1E886ACD0;
  *(_DWORD *)(a1 + 8) = 0;
  if (MEMORY[0x1D17ADA60](*a2) == MEMORY[0x1E0C812F8])
    *(_DWORD *)(a1 + 8) = xpc_dictionary_get_int64(*a2, "AWDMessageTimerId");
  return a1;
}

void awd::AWDTimerMessage::createXpcMessage(awd::AWDTimerMessage *this@<X0>, xpc_object_t *a2@<X8>)
{
  xpc_object_t v4;
  void *v5;

  v4 = xpc_dictionary_create(0, 0, 0);
  if (v4)
  {
    v5 = v4;
    xpc_dictionary_set_int64(v4, "AWDMessageType", 13);
    xpc_dictionary_set_int64(v5, "AWDMessageTimerId", *((unsigned int *)this + 2));
    *a2 = v5;
    if (MEMORY[0x1D17ADA60](v5) == MEMORY[0x1E0C812F8])
      xpc_retain(v5);
    else
      *a2 = xpc_null_create();
    xpc_release(v5);
  }
  else
  {
    *a2 = xpc_null_create();
  }
}

uint64_t awd::AWDTimerMessage::getTimerId(awd::AWDTimerMessage *this)
{
  return *((unsigned int *)this + 2);
}

void sub_1CC5A62FC()
{
  JUMPOUT(0x1D17AD544);
}

void AWDServerConnector::create(_QWORD *a1@<X8>)
{
  AWDServerConnector *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  uint64_t v11;
  _QWORD *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  _QWORD v18[5];
  std::__shared_weak_count *v19;
  uint64_t v20;
  std::__shared_weak_count *v21;

  v3 = (AWDServerConnector *)operator new();
  AWDServerConnector::AWDServerConnector(v3);
  sub_1CC5A85E0(&v20, (uint64_t)v3);
  v4 = v21;
  *a1 = v20;
  a1[1] = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
    v7 = v21;
    if (v21)
    {
      v8 = (unint64_t *)&v21->__shared_owners_;
      do
        v9 = __ldaxr(v8);
      while (__stlxr(v9 - 1, v8));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
  v11 = *a1;
  v10 = (std::__shared_weak_count *)a1[1];
  v12 = (_QWORD *)(*a1 + 8);
  v18[0] = MEMORY[0x1E0C809B0];
  v18[1] = 1174405120;
  v18[2] = sub_1CC5A6470;
  v18[3] = &unk_1E886BCF8;
  v18[4] = v11;
  v19 = v10;
  if (v10)
  {
    v13 = (unint64_t *)&v10->__shared_owners_;
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  sub_1CC5A8710(v12, (uint64_t)v18);
  v15 = v19;
  if (v19)
  {
    v16 = (unint64_t *)&v19->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
}

void sub_1CC5A6448(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1D17AD544](v1, 0x10B3C40AFEB2338);
  _Unwind_Resume(a1);
}

uint64_t sub_1CC5A6470(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 32))(*(_QWORD *)(a1 + 32));
}

uint64_t sub_1CC5A6480(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(result + 40) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void sub_1CC5A64A4(uint64_t a1)
{
  awd::AWDServerConnection::~AWDServerConnection((awd::AWDServerConnection *)(a1 + 32));
}

void AWDSimpleServerFacade::create(_QWORD *a1@<X8>)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  uint64_t v11;
  _QWORD *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  _QWORD v18[5];
  std::__shared_weak_count *v19;
  uint64_t v20;
  std::__shared_weak_count *v21;

  v3 = operator new();
  AWDServerConnector::AWDServerConnector((AWDServerConnector *)v3);
  *(_QWORD *)v3 = off_1E886AC60;
  *(_DWORD *)(v3 + 72) = 0;
  *(_QWORD *)(v3 + 80) = 0;
  sub_1CC5A884C(&v20, v3);
  v4 = v21;
  *a1 = v20;
  a1[1] = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
    v7 = v21;
    if (v21)
    {
      v8 = (unint64_t *)&v21->__shared_owners_;
      do
        v9 = __ldaxr(v8);
      while (__stlxr(v9 - 1, v8));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
  v11 = *a1;
  v10 = (std::__shared_weak_count *)a1[1];
  v12 = (_QWORD *)(*a1 + 8);
  v18[0] = MEMORY[0x1E0C809B0];
  v18[1] = 1174405120;
  v18[2] = sub_1CC5A6644;
  v18[3] = &unk_1E886BD78;
  v18[4] = v11;
  v19 = v10;
  if (v10)
  {
    v13 = (unint64_t *)&v10->__shared_owners_;
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  sub_1CC5A8710(v12, (uint64_t)v18);
  v15 = v19;
  if (v19)
  {
    v16 = (unint64_t *)&v19->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
}

void sub_1CC5A65F8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1D17AD544](v1, 0x10B3C408CFE0061);
  _Unwind_Resume(a1);
}

void AWDSimpleServerFacade::AWDSimpleServerFacade(AWDSimpleServerFacade *this)
{
  uint64_t v1;

  AWDServerConnector::AWDServerConnector(this);
  *(_QWORD *)v1 = off_1E886AC60;
  *(_DWORD *)(v1 + 72) = 0;
  *(_QWORD *)(v1 + 80) = 0;
}

{
  uint64_t v1;

  AWDServerConnector::AWDServerConnector(this);
  *(_QWORD *)v1 = off_1E886AC60;
  *(_DWORD *)(v1 + 72) = 0;
  *(_QWORD *)(v1 + 80) = 0;
}

uint64_t sub_1CC5A6644(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 32))(*(_QWORD *)(a1 + 32));
}

uint64_t sub_1CC5A6654(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(result + 40) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void sub_1CC5A6678(uint64_t a1)
{
  awd::AWDServerConnection::~AWDServerConnection((awd::AWDServerConnection *)(a1 + 32));
}

void AWDServerConnector::AWDServerConnector(AWDServerConnector *this)
{
  void *__p;
  char v3;

  sub_1CC59E69C(&__p, "com.apple.awd.server_connector");
  ctu::XpcClient::XpcClient();
  if (v3 < 0)
    operator delete(__p);
  *(_QWORD *)this = off_1E886ABD0;
}

void sub_1CC5A66E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void AWDServerConnector::~AWDServerConnector(AWDServerConnector *this)
{
  xpc_object_t object;

  *(_QWORD *)this = off_1E886ABD0;
  object = xpc_null_create();
  ctu::XpcClient::setServer_sync();
  xpc_release(object);
  ctu::XpcClient::~XpcClient(this);
}

{
  AWDServerConnector::~AWDServerConnector(this);
  JUMPOUT(0x1D17AD544);
}

uint64_t AWDServerConnector::init_sync(AWDServerConnector *this)
{
  CFNotificationCenterRef DarwinNotifyCenter;
  __CFNotificationCenter *v3;
  _QWORD *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t *p_shared_weak_owners;
  unint64_t v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v16;
  std::__shared_weak_count *v17;

  DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
  if (DarwinNotifyCenter)
  {
    v3 = DarwinNotifyCenter;
    v4 = (_QWORD *)operator new();
    sub_1CC59C014(&v16, (_QWORD *)this + 1);
    v5 = v16;
    v6 = v17;
    if (v17)
    {
      p_shared_owners = (unint64_t *)&v17->__shared_owners_;
      do
        v8 = __ldxr(p_shared_owners);
      while (__stxr(v8 + 1, p_shared_owners));
      *v4 = v5;
      v4[1] = v6;
      p_shared_weak_owners = (unint64_t *)&v6->__shared_weak_owners_;
      do
        v10 = __ldxr(p_shared_weak_owners);
      while (__stxr(v10 + 1, p_shared_weak_owners));
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
    else
    {
      *v4 = v16;
      v4[1] = 0;
    }
    v12 = v17;
    if (v17)
    {
      v13 = (unint64_t *)&v17->__shared_owners_;
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 - 1, v13));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
    CFNotificationCenterAddObserver(v3, v4, (CFNotificationCallback)sub_1CC5A68EC, CFSTR("AWDD Started"), CFSTR("AWDD"), CFNotificationSuspensionBehaviorDeliverImmediately);
  }
  return (*(uint64_t (**)(AWDServerConnector *))(*(_QWORD *)this + 40))(this);
}

void sub_1CC5A68C8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1D17AD544](v1, 0x20C40A4A59CD2);
  _Unwind_Resume(a1);
}

void sub_1CC5A68EC(uint64_t a1, uint64_t *a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  _QWORD *v9;
  NSObject *v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  _QWORD *v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  __CFNotificationCenter *DarwinNotifyCenter;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  uint64_t v24;
  std::__shared_weak_count *v25;
  uint64_t v26;
  uint64_t v27;

  if (!a2)
    return;
  v3 = (std::__shared_weak_count *)a2[1];
  if (v3)
  {
    v4 = std::__shared_weak_count::lock(v3);
    v5 = v4;
    v23 = v4;
    if (v4)
    {
      v6 = *a2;
      if (*a2)
      {
        p_shared_owners = (unint64_t *)&v4->__shared_owners_;
        do
          v8 = __ldxr(p_shared_owners);
        while (__stxr(v8 + 1, p_shared_owners));
        sub_1CC59C014(&v24, (_QWORD *)(v6 + 8));
        v9 = (_QWORD *)operator new();
        *v9 = v6;
        v9[1] = v5;
        v10 = *(NSObject **)(v6 + 24);
        v11 = v24;
        v12 = v25;
        if (v25)
        {
          v13 = (unint64_t *)&v25->__shared_owners_;
          do
            v14 = __ldxr(v13);
          while (__stxr(v14 + 1, v13));
        }
        v15 = (_QWORD *)operator new();
        *v15 = v9;
        v15[1] = v11;
        v15[2] = v12;
        v26 = 0;
        v27 = 0;
        dispatch_async_f(v10, v15, (dispatch_function_t)sub_1CC5A8538);
        sub_1CC59C45C(&v26);
        sub_1CC59C45C(&v27);
        v16 = v25;
        if (v25)
        {
          v17 = (unint64_t *)&v25->__shared_owners_;
          do
            v18 = __ldaxr(v17);
          while (__stlxr(v18 - 1, v17));
          if (!v18)
          {
            ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
            std::__shared_weak_count::__release_weak(v16);
          }
        }
        v5 = v23;
        if (!v23)
          return;
LABEL_21:
        v21 = (unint64_t *)&v5->__shared_owners_;
        do
          v22 = __ldaxr(v21);
        while (__stlxr(v22 - 1, v21));
        if (!v22)
        {
          ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
          std::__shared_weak_count::__release_weak(v5);
        }
        return;
      }
    }
  }
  else
  {
    v5 = 0;
  }
  DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterRemoveObserver(DarwinNotifyCenter, a2, CFSTR("AWDD Started"), CFSTR("AWDD"));
  v20 = (std::__shared_weak_count *)a2[1];
  if (v20)
    std::__shared_weak_count::__release_weak(v20);
  MEMORY[0x1D17AD544](a2, 0x20C40A4A59CD2);
  if (v5)
    goto LABEL_21;
}

void sub_1CC5A6AB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  awd::AWDServerConnection::~AWDServerConnection((awd::AWDServerConnection *)&a9);
  _Unwind_Resume(a1);
}

void AWDServerConnector::handleServerError_sync(uint64_t a1, _QWORD *a2)
{
  xpc_object_t object;

  if (*a2 == MEMORY[0x1E0C81260] && MEMORY[0x1E0C81258] != MEMORY[0x1E0C81260])
  {
    object = xpc_null_create();
    ctu::XpcClient::setServer_sync();
    xpc_release(object);
  }
}

void sub_1CC5A6B30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
  xpc_release(object);
  _Unwind_Resume(a1);
}

void AWDServerConnector::initConnection_sync(dispatch_queue_t *this)
{
  void *mach_service;
  xpc_object_t object;

  mach_service = xpc_connection_create_mach_service("com.apple.awdd", this[3], 2uLL);
  if (!mach_service)
    mach_service = xpc_null_create();
  if (MEMORY[0x1D17ADA60](mach_service) == MEMORY[0x1E0C812E0])
  {
    object = mach_service;
    if (mach_service)
      xpc_retain(mach_service);
    else
      object = xpc_null_create();
    ctu::XpcClient::setServer_sync();
    xpc_release(object);
  }
  xpc_release(mach_service);
}

void sub_1CC5A6BF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
  void *v10;

  xpc_release(object);
  xpc_release(v10);
  _Unwind_Resume(a1);
}

void AWDServerConnector::send(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  xpc_object_t v8;
  xpc_object_t v9;
  xpc_object_t v10;
  void *v11;
  xpc_object_t v12;
  _QWORD *v13;
  xpc_object_t v14;
  NSObject *v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  _QWORD *v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  std::__shared_weak_count *v25;
  uint64_t v26;
  uint64_t v27;

  v6 = MEMORY[0x1D17ADA60](*a2);
  v7 = MEMORY[0x1E0C812F8];
  if (v6 != MEMORY[0x1E0C812F8])
  {
    v8 = xpc_dictionary_create(0, 0, 0);
    if (v8 || (v8 = xpc_null_create()) != 0)
    {
      if (MEMORY[0x1D17ADA60](v8) == v7)
      {
        xpc_retain(v8);
        v9 = v8;
      }
      else
      {
        v9 = xpc_null_create();
      }
    }
    else
    {
      v9 = xpc_null_create();
      v8 = 0;
    }
    xpc_release(v8);
    v10 = xpc_null_create();
    v11 = (void *)*a2;
    *a2 = v9;
    xpc_release(v11);
    xpc_release(v10);
  }
  v12 = (xpc_object_t)*a2;
  if (v12)
    xpc_retain(v12);
  else
    v12 = xpc_null_create();
  sub_1CC59C014(&v24, (_QWORD *)(a1 + 8));
  v13 = (_QWORD *)operator new();
  *v13 = a1;
  v13[1] = v12;
  v14 = xpc_null_create();
  v13[2] = a3;
  v15 = *(NSObject **)(a1 + 24);
  v16 = v24;
  v17 = v25;
  if (v25)
  {
    p_shared_owners = (unint64_t *)&v25->__shared_owners_;
    do
      v19 = __ldxr(p_shared_owners);
    while (__stxr(v19 + 1, p_shared_owners));
  }
  v20 = (_QWORD *)operator new();
  *v20 = v13;
  v20[1] = v16;
  v20[2] = v17;
  v26 = 0;
  v27 = 0;
  dispatch_async_f(v15, v20, (dispatch_function_t)sub_1CC5A897C);
  sub_1CC59C45C(&v26);
  sub_1CC59C45C(&v27);
  v21 = v25;
  if (v25)
  {
    v22 = (unint64_t *)&v25->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  xpc_release(v14);
}

void AWDServerConnector::send(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  xpc_object_t v10;
  xpc_object_t v11;
  xpc_object_t v12;
  void *v13;
  void *v14;
  _QWORD v15[6];
  xpc_object_t object;
  uint64_t v17;

  v8 = MEMORY[0x1D17ADA60](*a2);
  v9 = MEMORY[0x1E0C812F8];
  if (v8 != MEMORY[0x1E0C812F8])
  {
    v10 = xpc_dictionary_create(0, 0, 0);
    if (v10 || (v10 = xpc_null_create()) != 0)
    {
      if (MEMORY[0x1D17ADA60](v10) == v9)
      {
        xpc_retain(v10);
        v11 = v10;
      }
      else
      {
        v11 = xpc_null_create();
      }
    }
    else
    {
      v11 = xpc_null_create();
      v10 = 0;
    }
    xpc_release(v10);
    v12 = xpc_null_create();
    v13 = (void *)*a2;
    *a2 = v11;
    xpc_release(v13);
    xpc_release(v12);
  }
  v15[0] = MEMORY[0x1E0C809B0];
  v15[1] = 1174405120;
  v15[2] = sub_1CC5A6F90;
  v15[3] = &unk_1E886C160;
  v14 = (void *)*a2;
  v15[5] = a1;
  object = v14;
  if (v14)
    xpc_retain(v14);
  else
    object = xpc_null_create();
  v17 = a3;
  v15[4] = a4;
  sub_1CC5A8710((_QWORD *)(a1 + 8), (uint64_t)v15);
  xpc_release(object);
}

void sub_1CC5A6F90(uint64_t a1)
{
  uint64_t v2;
  _xpc_connection_s *v3;
  void *v4;
  NSObject *v5;
  _QWORD handler[5];
  xpc_object_t v7;
  xpc_object_t object;
  uint64_t v9;
  const char *v10;
  xpc_object_t v11;
  xpc_object_t v12;

  v2 = *(_QWORD *)(a1 + 40);
  if (MEMORY[0x1D17ADA60](*(_QWORD *)(v2 + 40)) == MEMORY[0x1E0C812E0])
  {
    v11 = xpc_int64_create(11);
    if (!v11)
      v11 = xpc_null_create();
    v9 = a1 + 48;
    v10 = "AWDMessageType";
    sub_1CC5954D0((uint64_t)&v9, &v11, &v12);
    xpc_release(v12);
    v12 = 0;
    xpc_release(v11);
    v11 = 0;
    v7 = xpc_string_create(*(const char **)(a1 + 56));
    if (!v7)
      v7 = xpc_null_create();
    v9 = a1 + 48;
    v10 = "ManageRequest";
    sub_1CC5954D0((uint64_t)&v9, &v7, &object);
    xpc_release(object);
    object = 0;
    xpc_release(v7);
    v7 = 0;
    v3 = *(_xpc_connection_s **)(v2 + 40);
    v4 = *(void **)(a1 + 48);
    v5 = *(NSObject **)(v2 + 24);
    handler[0] = MEMORY[0x1E0C809B0];
    handler[1] = 0x40000000;
    handler[2] = sub_1CC5A70F0;
    handler[3] = &unk_1E886C380;
    handler[4] = *(_QWORD *)(a1 + 32);
    xpc_connection_send_message_with_reply(v3, v4, v5, handler);
  }
  else
  {
    syslog(3, "Error! send: getServer_sync is NULL");
  }
}

void sub_1CC5A70F0(uint64_t a1, xpc_object_t object)
{
  uint64_t v2;
  xpc_object_t objecta;

  v2 = *(_QWORD *)(a1 + 32);
  objecta = object;
  if (object)
    xpc_retain(object);
  else
    objecta = xpc_null_create();
  (*(void (**)(uint64_t, xpc_object_t *))(v2 + 16))(v2, &objecta);
  xpc_release(objecta);
}

void sub_1CC5A714C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
  xpc_release(object);
  _Unwind_Resume(a1);
}

xpc_object_t sub_1CC5A7168(uint64_t a1, uint64_t a2)
{
  void *v3;
  xpc_object_t result;

  v3 = *(void **)(a2 + 48);
  *(_QWORD *)(a1 + 48) = v3;
  if (v3)
    return xpc_retain(v3);
  result = xpc_null_create();
  *(_QWORD *)(a1 + 48) = result;
  return result;
}

void sub_1CC5A71A4(uint64_t a1)
{
  xpc_release(*(xpc_object_t *)(a1 + 48));
  *(_QWORD *)(a1 + 48) = 0;
}

void AWDSimpleServerFacade::~AWDSimpleServerFacade(AWDSimpleServerFacade *this)
{
  const void *v2;

  *(_QWORD *)this = off_1E886AC60;
  v2 = (const void *)*((_QWORD *)this + 10);
  if (v2)
    _Block_release(v2);
  AWDServerConnector::~AWDServerConnector(this);
}

{
  AWDSimpleServerFacade::~AWDSimpleServerFacade(this);
  JUMPOUT(0x1D17AD544);
}

uint64_t AWDSimpleServerFacade::handleServerError_sync(uint64_t a1, xpc_object_t *a2)
{
  xpc_object_t v4;
  void **v5;
  void *__p[2];
  char v8;
  xpc_object_t v9;

  v4 = *a2;
  v9 = v4;
  if (v4)
  {
    xpc_retain(v4);
  }
  else
  {
    v4 = xpc_null_create();
    v9 = v4;
  }
  AWDServerConnector::handleServerError_sync(a1, &v9);
  xpc_release(v4);
  sub_1CC5A734C(a2, __p);
  if (v8 >= 0)
    v5 = __p;
  else
    v5 = (void **)__p[0];
  syslog(3, "GOT XPC ERROR: %s", (const char *)v5);
  if (v8 < 0)
    operator delete(__p[0]);
  return AWDSimpleServerFacade::setState_sync(a1, 2);
}

void sub_1CC5A7314(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1CC5A734C(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  char *v3;

  v3 = (char *)MEMORY[0x1D17AD9B8](*a1);
  sub_1CC59E69C(a2, v3);
  free(v3);
}

uint64_t AWDSimpleServerFacade::setState_sync(uint64_t result, uint64_t a2)
{
  uint64_t v3;

  if (*(_DWORD *)(result + 72) != (_DWORD)a2)
  {
    v3 = result;
    syslog(3, "AWDD STATE CHANGED FROM %d to %d", *(_DWORD *)(result + 72), a2);
    *(_DWORD *)(v3 + 72) = a2;
    result = *(_QWORD *)(v3 + 80);
    if (result)
      return (*(uint64_t (**)(uint64_t, uint64_t))(result + 16))(result, a2);
  }
  return result;
}

_DWORD *AWDSimpleServerFacade::handleAwddStarted_sync(_DWORD *this)
{
  int v1;

  v1 = this[18];
  if (!v1)
    return (_DWORD *)AWDSimpleServerFacade::setState_sync((uint64_t)this, 1);
  if (v1 == 2)
    return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)this + 40))(this);
  return this;
}

void AWDSimpleServerFacade::getCurrentConfig(uint64_t a1, uint64_t a2)
{
  _QWORD v4[6];
  xpc_object_t v5;

  v5 = xpc_null_create();
  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 0x40000000;
  v4[2] = sub_1CC5A74B8;
  v4[3] = &unk_1E886C3A8;
  v4[4] = a2;
  v4[5] = a1;
  AWDServerConnector::send(a1, &v5, (uint64_t)"CopyConfig", (uint64_t)v4);
  xpc_release(v5);
}

void sub_1CC5A749C(_Unwind_Exception *a1)
{
  uint64_t v1;

  xpc_release(*(xpc_object_t *)(v1 - 24));
  _Unwind_Resume(a1);
}

void sub_1CC5A74B8(uint64_t a1, xpc_object_t *a2)
{
  uint64_t v4;
  void **v5;
  xpc_object_t v6;
  uint64_t v7;
  uint64_t v8;
  xpc_object_t object;
  void *__p[2];
  char v11;

  v4 = *(_QWORD *)(a1 + 40);
  sub_1CC5A734C(a2, __p);
  if (v11 >= 0)
    v5 = __p;
  else
    v5 = (void **)__p[0];
  syslog(3, "GOT XPC REPLY: %s", (const char *)v5);
  if (v11 < 0)
    operator delete(__p[0]);
  v6 = *a2;
  v7 = MEMORY[0x1E0C812F8];
  if (v6 && MEMORY[0x1D17ADA60](v6) == v7)
    xpc_retain(v6);
  else
    v6 = xpc_null_create();
  if (MEMORY[0x1D17ADA60](v6) == v7)
    AWDSimpleServerFacade::setState_sync(v4, 1);
  v8 = *(_QWORD *)(a1 + 32);
  object = v6;
  if (v6)
    xpc_retain(v6);
  else
    object = xpc_null_create();
  (*(void (**)(uint64_t, xpc_object_t *))(v8 + 16))(v8, &object);
  xpc_release(object);
  object = 0;
  xpc_release(v6);
}

void sub_1CC5A75CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, xpc_object_t object, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  void *v17;

  xpc_release(object);
  xpc_release(v17);
  _Unwind_Resume(a1);
}

void AWDSimpleServerFacade::getConfigsAvailable(uint64_t a1, uint64_t a2)
{
  _QWORD v4[6];
  xpc_object_t v5;

  v5 = xpc_null_create();
  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 0x40000000;
  v4[2] = sub_1CC5A76BC;
  v4[3] = &unk_1E886C3D0;
  v4[4] = a2;
  v4[5] = a1;
  AWDServerConnector::send(a1, &v5, (uint64_t)"GetConfigsAvailable", (uint64_t)v4);
  xpc_release(v5);
}

void sub_1CC5A76A0(_Unwind_Exception *a1)
{
  uint64_t v1;

  xpc_release(*(xpc_object_t *)(v1 - 24));
  _Unwind_Resume(a1);
}

void sub_1CC5A76BC(uint64_t a1, xpc_object_t *a2)
{
  uint64_t v4;
  void **v5;
  xpc_object_t v6;
  uint64_t v7;
  uint64_t v8;
  xpc_object_t object;
  void *__p[2];
  char v11;

  v4 = *(_QWORD *)(a1 + 40);
  sub_1CC5A734C(a2, __p);
  if (v11 >= 0)
    v5 = __p;
  else
    v5 = (void **)__p[0];
  syslog(3, "GOT XPC REPLY: %s", (const char *)v5);
  if (v11 < 0)
    operator delete(__p[0]);
  v6 = *a2;
  v7 = MEMORY[0x1E0C812F8];
  if (v6 && MEMORY[0x1D17ADA60](v6) == v7)
    xpc_retain(v6);
  else
    v6 = xpc_null_create();
  if (MEMORY[0x1D17ADA60](v6) == v7)
    AWDSimpleServerFacade::setState_sync(v4, 1);
  v8 = *(_QWORD *)(a1 + 32);
  object = v6;
  if (v6)
    xpc_retain(v6);
  else
    object = xpc_null_create();
  (*(void (**)(uint64_t, xpc_object_t *))(v8 + 16))(v8, &object);
  xpc_release(object);
  object = 0;
  xpc_release(v6);
}

void sub_1CC5A77D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, xpc_object_t object, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  void *v17;

  xpc_release(object);
  xpc_release(v17);
  _Unwind_Resume(a1);
}

void AWDSimpleServerFacade::setConfig(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  xpc_object_t v8;
  xpc_object_t v9;
  xpc_object_t v10;
  const char *v11;
  _QWORD v12[6];
  xpc_object_t v13;
  xpc_object_t v14;
  xpc_object_t object;
  xpc_object_t *v16;
  const char *v17;
  xpc_object_t v18;
  xpc_object_t v19;
  xpc_object_t v20;

  v8 = xpc_dictionary_create(0, 0, 0);
  v9 = v8;
  if (v8)
  {
    v20 = v8;
  }
  else
  {
    v9 = xpc_null_create();
    v20 = v9;
    if (!v9)
    {
      v10 = xpc_null_create();
      v9 = 0;
      goto LABEL_8;
    }
  }
  if (MEMORY[0x1D17ADA60](v9) == MEMORY[0x1E0C812F8])
  {
    xpc_retain(v9);
    goto LABEL_9;
  }
  v10 = xpc_null_create();
LABEL_8:
  v20 = v10;
LABEL_9:
  xpc_release(v9);
  if (*(char *)(a2 + 23) >= 0)
    v11 = (const char *)a2;
  else
    v11 = *(const char **)a2;
  v18 = xpc_string_create(v11);
  if (!v18)
    v18 = xpc_null_create();
  v16 = &v20;
  v17 = "config";
  sub_1CC5954D0((uint64_t)&v16, &v18, &v19);
  xpc_release(v19);
  v19 = 0;
  xpc_release(v18);
  v18 = 0;
  v14 = xpc_int64_create(a3);
  if (!v14)
    v14 = xpc_null_create();
  v16 = &v20;
  v17 = "InvestigationId";
  sub_1CC5954D0((uint64_t)&v16, &v14, &object);
  xpc_release(object);
  object = 0;
  xpc_release(v14);
  v13 = v20;
  v14 = 0;
  if (v20)
    xpc_retain(v20);
  else
    v13 = xpc_null_create();
  v12[0] = MEMORY[0x1E0C809B0];
  v12[1] = 0x40000000;
  v12[2] = sub_1CC5A7A54;
  v12[3] = &unk_1E886C3F8;
  v12[4] = a4;
  v12[5] = a1;
  AWDServerConnector::send(a1, &v13, (uint64_t)"SetConfig", (uint64_t)v12);
  xpc_release(v13);
  v13 = 0;
  xpc_release(v20);
}

void sub_1CC5A7A04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, xpc_object_t object)
{
  uint64_t v15;

  xpc_release(object);
  xpc_release(*(xpc_object_t *)(v15 - 56));
  _Unwind_Resume(a1);
}

void sub_1CC5A7A54(uint64_t a1, xpc_object_t *a2)
{
  uint64_t v4;
  void **v5;
  xpc_object_t v6;
  uint64_t v7;
  uint64_t v8;
  xpc_object_t object;
  void *__p[2];
  char v11;

  v4 = *(_QWORD *)(a1 + 40);
  sub_1CC5A734C(a2, __p);
  if (v11 >= 0)
    v5 = __p;
  else
    v5 = (void **)__p[0];
  syslog(3, "GOT XPC REPLY: %s", (const char *)v5);
  if (v11 < 0)
    operator delete(__p[0]);
  v6 = *a2;
  v7 = MEMORY[0x1E0C812F8];
  if (v6 && MEMORY[0x1D17ADA60](v6) == v7)
    xpc_retain(v6);
  else
    v6 = xpc_null_create();
  if (MEMORY[0x1D17ADA60](v6) == v7)
    AWDSimpleServerFacade::setState_sync(v4, 1);
  v8 = *(_QWORD *)(a1 + 32);
  object = v6;
  if (v6)
    xpc_retain(v6);
  else
    object = xpc_null_create();
  (*(void (**)(uint64_t, xpc_object_t *))(v8 + 16))(v8, &object);
  xpc_release(object);
  object = 0;
  xpc_release(v6);
}

void sub_1CC5A7B68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, xpc_object_t object, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  void *v17;

  xpc_release(object);
  xpc_release(v17);
  _Unwind_Resume(a1);
}

void AWDSimpleServerFacade::setProperty(uint64_t a1, uint64_t *a2, BOOL a3)
{
  xpc_object_t v6;
  xpc_object_t v7;
  xpc_object_t v8;
  uint64_t *v9;
  _QWORD v10[5];
  xpc_object_t object;
  _QWORD v12[2];
  xpc_object_t v13;
  xpc_object_t v14;
  xpc_object_t v15;

  v6 = xpc_dictionary_create(0, 0, 0);
  v7 = v6;
  if (v6)
  {
    v15 = v6;
  }
  else
  {
    v7 = xpc_null_create();
    v15 = v7;
    if (!v7)
    {
      v8 = xpc_null_create();
      v7 = 0;
      goto LABEL_8;
    }
  }
  if (MEMORY[0x1D17ADA60](v7) == MEMORY[0x1E0C812F8])
  {
    xpc_retain(v7);
    goto LABEL_9;
  }
  v8 = xpc_null_create();
LABEL_8:
  v15 = v8;
LABEL_9:
  xpc_release(v7);
  v13 = xpc_BOOL_create(a3);
  if (!v13)
    v13 = xpc_null_create();
  if (*((char *)a2 + 23) >= 0)
    v9 = a2;
  else
    v9 = (uint64_t *)*a2;
  v12[0] = &v15;
  v12[1] = v9;
  sub_1CC5954D0((uint64_t)v12, &v13, &v14);
  xpc_release(v14);
  v14 = 0;
  xpc_release(v13);
  v13 = 0;
  object = v15;
  if (v15)
    xpc_retain(v15);
  else
    object = xpc_null_create();
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 0x40000000;
  v10[2] = sub_1CC5A7D80;
  v10[3] = &unk_1E886BE08;
  v10[4] = a1;
  AWDServerConnector::send(a1, &object, (uint64_t)"SetProperty", (uint64_t)v10);
  xpc_release(object);
  object = 0;
  xpc_release(v15);
}

void sub_1CC5A7D3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, xpc_object_t object)
{
  uint64_t v15;

  xpc_release(object);
  xpc_release(*(xpc_object_t *)(v15 - 40));
  _Unwind_Resume(a1);
}

void sub_1CC5A7D80(uint64_t a1, xpc_object_t *a2)
{
  uint64_t v3;
  void **v4;
  xpc_object_t v5;
  uint64_t v6;
  void *__p[2];
  char v8;

  v3 = *(_QWORD *)(a1 + 32);
  sub_1CC5A734C(a2, __p);
  if (v8 >= 0)
    v4 = __p;
  else
    v4 = (void **)__p[0];
  syslog(3, "GOT XPC REPLY: %s", (const char *)v4);
  if (v8 < 0)
    operator delete(__p[0]);
  v5 = *a2;
  v6 = MEMORY[0x1E0C812F8];
  if (v5 && MEMORY[0x1D17ADA60](v5) == v6)
    xpc_retain(v5);
  else
    v5 = xpc_null_create();
  if (MEMORY[0x1D17ADA60](v5) == v6)
    AWDSimpleServerFacade::setState_sync(v3, 1);
  xpc_release(v5);
}

void sub_1CC5A7E50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void AWDSimpleServerFacade::submitMetricsNow(AWDSimpleServerFacade *this)
{
  xpc_object_t v2;
  xpc_object_t v3;
  xpc_object_t v4;
  xpc_object_t v5;
  _QWORD *v6;
  xpc_object_t v7;
  NSObject *v8;
  xpc_object_t *v9;
  const char *v10;
  unint64_t *v11;
  unint64_t v12;
  _QWORD *v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  xpc_object_t v17;
  xpc_object_t v18;
  xpc_object_t v19;
  xpc_object_t object;
  xpc_object_t v21;
  xpc_object_t *v22;
  const char *v23;
  uint64_t v24;
  uint64_t v25;

  v2 = xpc_dictionary_create(0, 0, 0);
  v3 = v2;
  if (v2)
  {
    v21 = v2;
  }
  else
  {
    v3 = xpc_null_create();
    v21 = v3;
    if (!v3)
    {
      v4 = xpc_null_create();
      v3 = 0;
      goto LABEL_8;
    }
  }
  if (MEMORY[0x1D17ADA60](v3) == MEMORY[0x1E0C812F8])
  {
    xpc_retain(v3);
    goto LABEL_9;
  }
  v4 = xpc_null_create();
LABEL_8:
  v21 = v4;
LABEL_9:
  xpc_release(v3);
  v19 = xpc_int64_create(7);
  if (!v19)
    v19 = xpc_null_create();
  v22 = &v21;
  v23 = "AWDMessageType";
  sub_1CC5954D0((uint64_t)&v22, &v19, &object);
  xpc_release(object);
  object = 0;
  xpc_release(v19);
  v19 = 0;
  v17 = xpc_int64_create(3);
  if (!v17)
    v17 = xpc_null_create();
  v22 = &v21;
  v23 = "AWDMessageControlMessageType";
  sub_1CC5954D0((uint64_t)&v22, &v17, &v18);
  xpc_release(v18);
  v18 = 0;
  xpc_release(v17);
  v17 = 0;
  v5 = v21;
  if (v21)
    xpc_retain(v21);
  else
    v5 = xpc_null_create();
  sub_1CC59C014(&v22, (_QWORD *)this + 1);
  v6 = (_QWORD *)operator new();
  *v6 = this;
  v6[1] = v5;
  v7 = xpc_null_create();
  v8 = *((_QWORD *)this + 3);
  v9 = v22;
  v10 = v23;
  if (v23)
  {
    v11 = (unint64_t *)(v23 + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  v13 = (_QWORD *)operator new();
  *v13 = v6;
  v13[1] = v9;
  v13[2] = v10;
  v25 = 0;
  v24 = 0;
  dispatch_async_f(v8, v13, (dispatch_function_t)sub_1CC5A8B24);
  sub_1CC59C45C(&v24);
  sub_1CC59C45C(&v25);
  v14 = (std::__shared_weak_count *)v23;
  if (v23)
  {
    v15 = (unint64_t *)(v23 + 8);
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  xpc_release(v7);
  xpc_release(v21);
}

void AWDSimpleServerFacade::dumpLogs(AWDSimpleServerFacade *this)
{
  xpc_object_t v2;
  xpc_object_t v3;
  xpc_object_t v4;
  xpc_object_t v5;
  _QWORD *v6;
  xpc_object_t v7;
  NSObject *v8;
  xpc_object_t *v9;
  const char *v10;
  unint64_t *v11;
  unint64_t v12;
  _QWORD *v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  xpc_object_t v17;
  xpc_object_t v18;
  xpc_object_t v19;
  xpc_object_t object;
  xpc_object_t v21;
  xpc_object_t *v22;
  const char *v23;
  uint64_t v24;
  uint64_t v25;

  v2 = xpc_dictionary_create(0, 0, 0);
  v3 = v2;
  if (v2)
  {
    v21 = v2;
  }
  else
  {
    v3 = xpc_null_create();
    v21 = v3;
    if (!v3)
    {
      v4 = xpc_null_create();
      v3 = 0;
      goto LABEL_8;
    }
  }
  if (MEMORY[0x1D17ADA60](v3) == MEMORY[0x1E0C812F8])
  {
    xpc_retain(v3);
    goto LABEL_9;
  }
  v4 = xpc_null_create();
LABEL_8:
  v21 = v4;
LABEL_9:
  xpc_release(v3);
  v19 = xpc_int64_create(7);
  if (!v19)
    v19 = xpc_null_create();
  v22 = &v21;
  v23 = "AWDMessageType";
  sub_1CC5954D0((uint64_t)&v22, &v19, &object);
  xpc_release(object);
  object = 0;
  xpc_release(v19);
  v19 = 0;
  v17 = xpc_int64_create(7);
  if (!v17)
    v17 = xpc_null_create();
  v22 = &v21;
  v23 = "AWDMessageControlMessageType";
  sub_1CC5954D0((uint64_t)&v22, &v17, &v18);
  xpc_release(v18);
  v18 = 0;
  xpc_release(v17);
  v17 = 0;
  v5 = v21;
  if (v21)
    xpc_retain(v21);
  else
    v5 = xpc_null_create();
  sub_1CC59C014(&v22, (_QWORD *)this + 1);
  v6 = (_QWORD *)operator new();
  *v6 = this;
  v6[1] = v5;
  v7 = xpc_null_create();
  v8 = *((_QWORD *)this + 3);
  v9 = v22;
  v10 = v23;
  if (v23)
  {
    v11 = (unint64_t *)(v23 + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  v13 = (_QWORD *)operator new();
  *v13 = v6;
  v13[1] = v9;
  v13[2] = v10;
  v25 = 0;
  v24 = 0;
  dispatch_async_f(v8, v13, (dispatch_function_t)sub_1CC5A8DD8);
  sub_1CC59C45C(&v24);
  sub_1CC59C45C(&v25);
  v14 = (std::__shared_weak_count *)v23;
  if (v23)
  {
    v15 = (unint64_t *)(v23 + 8);
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  xpc_release(v7);
  xpc_release(v21);
}

void AWDSimpleServerFacade::setStateChangedCallback(uint64_t a1, void *aBlock)
{
  void *v3;
  void *v4;
  _QWORD v5[5];
  void *aBlocka;

  if (aBlock)
    v3 = _Block_copy(aBlock);
  else
    v3 = 0;
  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 1174405120;
  v5[2] = sub_1CC5A8460;
  v5[3] = &unk_1E886BE28;
  v5[4] = a1;
  if (v3)
    v4 = _Block_copy(v3);
  else
    v4 = 0;
  aBlocka = v4;
  sub_1CC5A8710((_QWORD *)(a1 + 8), (uint64_t)v5);
  if (aBlocka)
    _Block_release(aBlocka);
  if (v3)
    _Block_release(v3);
}

uint64_t sub_1CC5A8460(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  const void *v4;
  uint64_t result;

  v3 = *(_QWORD *)(a1 + 32);
  v2 = *(void **)(a1 + 40);
  if (v2)
    v2 = _Block_copy(v2);
  v4 = *(const void **)(v3 + 80);
  *(_QWORD *)(v3 + 80) = v2;
  if (v4)
    _Block_release(v4);
  result = *(_QWORD *)(a1 + 40);
  if (result)
    return (*(uint64_t (**)(uint64_t, _QWORD))(result + 16))(result, *(unsigned int *)(v3 + 72));
  return result;
}

void *sub_1CC5A84C0(uint64_t a1, uint64_t a2)
{
  void *result;

  result = *(void **)(a2 + 40);
  if (result)
    result = _Block_copy(result);
  *(_QWORD *)(a1 + 40) = result;
  return result;
}

void sub_1CC5A84F0(uint64_t a1)
{
  const void *v1;

  v1 = *(const void **)(a1 + 40);
  if (v1)
    _Block_release(v1);
}

uint64_t AWDSimpleServerFacade::initConnection_sync(dispatch_queue_t *this)
{
  AWDServerConnector::initConnection_sync(this);
  return AWDSimpleServerFacade::setState_sync((uint64_t)this, 0);
}

uint64_t *sub_1CC5A8538(awd::AWDServerConnection **a1)
{
  awd::AWDServerConnection *v1;
  awd::AWDServerConnection **v3;
  awd::AWDServerConnection *v4;

  v1 = *a1;
  v3 = a1;
  v4 = v1;
  (*(void (**)(_QWORD))(**(_QWORD **)v1 + 48))(*(_QWORD *)v1);
  sub_1CC5A859C(&v4);
  return sub_1CC59C45C((uint64_t *)&v3);
}

void sub_1CC5A8580(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, awd::AWDServerConnection *a10)
{
  sub_1CC5A859C(&a10);
  sub_1CC59C45C(&a9);
  _Unwind_Resume(a1);
}

awd::AWDServerConnection **sub_1CC5A859C(awd::AWDServerConnection **a1)
{
  awd::AWDServerConnection *v2;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    awd::AWDServerConnection::~AWDServerConnection(v2);
    MEMORY[0x1D17AD544]();
  }
  return a1;
}

uint64_t *sub_1CC5A85E0(uint64_t *a1, uint64_t a2)
{
  _QWORD *v4;
  _QWORD *v5;

  *a1 = a2;
  v4 = (_QWORD *)operator new();
  *v4 = &off_1E886B948;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = (uint64_t)v4;
  if (a2)
    v5 = (_QWORD *)(a2 + 8);
  else
    v5 = 0;
  sub_1CC59BD34((uint64_t)a1, v5, a2);
  return a1;
}

void sub_1CC5A864C(void *a1)
{
  dispatch_queue_t *v1;

  __cxa_begin_catch(a1);
  dispatch_barrier_async_f(v1[3], v1, (dispatch_function_t)sub_1CC5A86FC);
  __cxa_rethrow();
}

void sub_1CC5A866C(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_1CC5A8684(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1D17AD544);
}

void sub_1CC5A86A8(uint64_t a1)
{
  dispatch_barrier_async_f(*(dispatch_queue_t *)(*(_QWORD *)(a1 + 24) + 24), *(void **)(a1 + 24), (dispatch_function_t)sub_1CC5A86FC);
}

uint64_t sub_1CC5A86BC(uint64_t a1, uint64_t a2)
{
  if (sub_1CC59BE60(a2, (uint64_t)&unk_1E886AB68))
    return a1 + 24;
  else
    return 0;
}

uint64_t sub_1CC5A86FC(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 24))(result);
  return result;
}

void sub_1CC5A8710(_QWORD *a1, uint64_t a2)
{
  NSObject *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  _QWORD block[6];
  std::__shared_weak_count *v14;
  uint64_t v15;
  std::__shared_weak_count *v16;

  sub_1CC59C014(&v15, a1);
  v4 = a1[2];
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 1174405120;
  block[2] = sub_1CC5A8814;
  block[3] = &unk_1E886BE60;
  block[5] = v15;
  v14 = v16;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  block[4] = a2;
  dispatch_async(v4, block);
  v7 = v14;
  if (v14)
  {
    v8 = (unint64_t *)&v14->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  v10 = v16;
  if (v16)
  {
    v11 = (unint64_t *)&v16->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
}

uint64_t sub_1CC5A8814(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

uint64_t sub_1CC5A8820(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 48) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void sub_1CC5A8844(uint64_t a1)
{
  awd::AWDServerConnection::~AWDServerConnection((awd::AWDServerConnection *)(a1 + 40));
}

uint64_t *sub_1CC5A884C(uint64_t *a1, uint64_t a2)
{
  _QWORD *v4;
  _QWORD *v5;

  *a1 = a2;
  v4 = (_QWORD *)operator new();
  *v4 = &off_1E886B9B8;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = (uint64_t)v4;
  if (a2)
    v5 = (_QWORD *)(a2 + 8);
  else
    v5 = 0;
  sub_1CC59BD34((uint64_t)a1, v5, a2);
  return a1;
}

void sub_1CC5A88B8(void *a1)
{
  dispatch_queue_t *v1;

  __cxa_begin_catch(a1);
  dispatch_barrier_async_f(v1[3], v1, (dispatch_function_t)sub_1CC5A8968);
  __cxa_rethrow();
}

void sub_1CC5A88D8(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_1CC5A88F0(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1D17AD544);
}

void sub_1CC5A8914(uint64_t a1)
{
  dispatch_barrier_async_f(*(dispatch_queue_t *)(*(_QWORD *)(a1 + 24) + 24), *(void **)(a1 + 24), (dispatch_function_t)sub_1CC5A8968);
}

uint64_t sub_1CC5A8928(uint64_t a1, uint64_t a2)
{
  if (sub_1CC59BE60(a2, (uint64_t)&unk_1E886AB88))
    return a1 + 24;
  else
    return 0;
}

uint64_t sub_1CC5A8968(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 24))(result);
  return result;
}

uint64_t *sub_1CC5A897C(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t *v4;
  uint64_t v5;
  xpc_object_t v6;
  xpc_object_t v7;
  uint64_t v8;
  const char *v9;
  xpc_object_t object;
  xpc_object_t v11;

  v1 = *a1;
  v4 = a1;
  v5 = v1;
  v2 = *(_QWORD *)v1;
  if (MEMORY[0x1D17ADA60](*(_QWORD *)(*(_QWORD *)v1 + 40)) == MEMORY[0x1E0C812E0])
  {
    object = xpc_int64_create(11);
    if (!object)
      object = xpc_null_create();
    v8 = v1 + 8;
    v9 = "AWDMessageType";
    sub_1CC5954D0((uint64_t)&v8, &object, &v11);
    xpc_release(v11);
    v11 = 0;
    xpc_release(object);
    object = 0;
    v6 = xpc_string_create(*(const char **)(v1 + 16));
    if (!v6)
      v6 = xpc_null_create();
    v8 = v1 + 8;
    v9 = "ManageRequest";
    sub_1CC5954D0((uint64_t)&v8, &v6, &v7);
    xpc_release(v7);
    v7 = 0;
    xpc_release(v6);
    v6 = 0;
    xpc_connection_send_message(*(xpc_connection_t *)(v2 + 40), *(xpc_object_t *)(v1 + 8));
  }
  else
  {
    syslog(3, "Error! send: getServer_sync is NULL");
  }
  sub_1CC5A8AD0(&v5);
  return sub_1CC59C45C((uint64_t *)&v4);
}

void sub_1CC5A8AB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  sub_1CC5A8AD0(&a10);
  sub_1CC59C45C(&a9);
  _Unwind_Resume(a1);
}

uint64_t *sub_1CC5A8AD0(uint64_t *a1)
{
  uint64_t v2;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    xpc_release(*(xpc_object_t *)(v2 + 8));
    *(_QWORD *)(v2 + 8) = 0;
    MEMORY[0x1D17AD544](v2, 0xF0C4088EBFEECLL);
  }
  return a1;
}

uint64_t *sub_1CC5A8B24(_QWORD **a1)
{
  _QWORD *v1;
  uint64_t v2;
  _xpc_connection_s *v3;
  void *v4;
  NSObject *v5;
  _QWORD **v7;
  _QWORD *v8;
  _QWORD handler[5];

  v1 = *a1;
  v7 = a1;
  v8 = v1;
  v2 = *v1;
  if (MEMORY[0x1D17ADA60](*(_QWORD *)(*v1 + 40)) == MEMORY[0x1E0C812E0])
  {
    v3 = *(_xpc_connection_s **)(v2 + 40);
    v4 = (void *)v1[1];
    v5 = *(NSObject **)(v2 + 24);
    handler[0] = MEMORY[0x1E0C809B0];
    handler[1] = 0x40000000;
    handler[2] = sub_1CC5A8C40;
    handler[3] = &unk_1E886C418;
    handler[4] = v2;
    xpc_connection_send_message_with_reply(v3, v4, v5, handler);
  }
  else
  {
    syslog(3, "Error! send: getServer_sync is NULL");
  }
  sub_1CC5A8BEC((uint64_t *)&v8);
  return sub_1CC59C45C((uint64_t *)&v7);
}

void sub_1CC5A8BD0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  sub_1CC5A8BEC((uint64_t *)va1);
  sub_1CC59C45C((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_1CC5A8BEC(uint64_t *a1)
{
  uint64_t v2;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    xpc_release(*(xpc_object_t *)(v2 + 8));
    *(_QWORD *)(v2 + 8) = 0;
    MEMORY[0x1D17AD544](v2, 0xA0C40AFF93C70);
  }
  return a1;
}

void sub_1CC5A8C40(uint64_t a1, xpc_object_t object)
{
  xpc_object_t v2;
  uint64_t v3;
  xpc_object_t v4;
  char *v5;
  void **v6;
  uint64_t v7;
  xpc_object_t v8;
  void *__p[2];
  char v10;

  v2 = object;
  v3 = *(_QWORD *)(a1 + 32);
  if (object)
  {
    xpc_retain(object);
    v4 = v2;
  }
  else
  {
    v4 = xpc_null_create();
  }
  v5 = (char *)MEMORY[0x1D17AD9B8](v4);
  sub_1CC59E69C(__p, v5);
  free(v5);
  if (v10 >= 0)
    v6 = __p;
  else
    v6 = (void **)__p[0];
  syslog(3, "GOT XPC REPLY: %s", (const char *)v6);
  if (v10 < 0)
    operator delete(__p[0]);
  xpc_release(v4);
  v7 = MEMORY[0x1E0C812F8];
  if (v2)
  {
    xpc_retain(v2);
  }
  else
  {
    v2 = xpc_null_create();
    if (!v2)
    {
      v8 = xpc_null_create();
      v2 = 0;
      goto LABEL_16;
    }
  }
  if (MEMORY[0x1D17ADA60](v2) == v7)
  {
    xpc_retain(v2);
    v8 = v2;
  }
  else
  {
    v8 = xpc_null_create();
  }
LABEL_16:
  xpc_release(v2);
  if (MEMORY[0x1D17ADA60](v8) == v7)
    AWDSimpleServerFacade::setState_sync(v3, 1);
  xpc_release(v8);
}

void sub_1CC5A8D8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;

  if (a15 < 0)
    operator delete(__p);
  xpc_release(v15);
  _Unwind_Resume(a1);
}

uint64_t *sub_1CC5A8DD8(_QWORD **a1)
{
  _QWORD *v1;
  uint64_t v2;
  _xpc_connection_s *v3;
  void *v4;
  NSObject *v5;
  _QWORD **v7;
  _QWORD *v8;
  _QWORD handler[5];

  v1 = *a1;
  v7 = a1;
  v8 = v1;
  v2 = *v1;
  if (MEMORY[0x1D17ADA60](*(_QWORD *)(*v1 + 40)) == MEMORY[0x1E0C812E0])
  {
    v3 = *(_xpc_connection_s **)(v2 + 40);
    v4 = (void *)v1[1];
    v5 = *(NSObject **)(v2 + 24);
    handler[0] = MEMORY[0x1E0C809B0];
    handler[1] = 0x40000000;
    handler[2] = sub_1CC5A8EF4;
    handler[3] = &unk_1E886C438;
    handler[4] = v2;
    xpc_connection_send_message_with_reply(v3, v4, v5, handler);
  }
  else
  {
    syslog(3, "Error! send: getServer_sync is NULL");
  }
  sub_1CC5A8EA0((uint64_t *)&v8);
  return sub_1CC59C45C((uint64_t *)&v7);
}

void sub_1CC5A8E84(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  sub_1CC5A8EA0((uint64_t *)va1);
  sub_1CC59C45C((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_1CC5A8EA0(uint64_t *a1)
{
  uint64_t v2;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    xpc_release(*(xpc_object_t *)(v2 + 8));
    *(_QWORD *)(v2 + 8) = 0;
    MEMORY[0x1D17AD544](v2, 0xA0C40AFF93C70);
  }
  return a1;
}

void sub_1CC5A8EF4(uint64_t a1, xpc_object_t object)
{
  xpc_object_t v2;
  uint64_t v3;
  xpc_object_t v4;
  char *v5;
  void **v6;
  uint64_t v7;
  xpc_object_t v8;
  void *__p[2];
  char v10;

  v2 = object;
  v3 = *(_QWORD *)(a1 + 32);
  if (object)
  {
    xpc_retain(object);
    v4 = v2;
  }
  else
  {
    v4 = xpc_null_create();
  }
  v5 = (char *)MEMORY[0x1D17AD9B8](v4);
  sub_1CC59E69C(__p, v5);
  free(v5);
  if (v10 >= 0)
    v6 = __p;
  else
    v6 = (void **)__p[0];
  syslog(3, "GOT XPC REPLY: %s", (const char *)v6);
  if (v10 < 0)
    operator delete(__p[0]);
  xpc_release(v4);
  v7 = MEMORY[0x1E0C812F8];
  if (v2)
  {
    xpc_retain(v2);
  }
  else
  {
    v2 = xpc_null_create();
    if (!v2)
    {
      v8 = xpc_null_create();
      v2 = 0;
      goto LABEL_16;
    }
  }
  if (MEMORY[0x1D17ADA60](v2) == v7)
  {
    xpc_retain(v2);
    v8 = v2;
  }
  else
  {
    v8 = xpc_null_create();
  }
LABEL_16:
  xpc_release(v2);
  if (MEMORY[0x1D17ADA60](v8) == v7)
    AWDSimpleServerFacade::setState_sync(v3, 1);
  xpc_release(v8);
}

void sub_1CC5A9040(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;

  if (a15 < 0)
    operator delete(__p);
  xpc_release(v15);
  _Unwind_Resume(a1);
}

awd::AWDLoggingMetric *awd::AWDLoggingMetric::AWDLoggingMetric(awd::AWDLoggingMetric *this)
{
  dispatch_queue_t v2;
  uint64_t v3;
  void *v4;
  _QWORD aBlock[5];

  *(_QWORD *)awd::AWDBasicConfigType::AWDBasicConfigType((uint64_t)this, 0) = &off_1E886ACF8;
  v2 = dispatch_queue_create("com.apple.awd.AWDLoggingMetric", 0);
  v3 = MEMORY[0x1E0C809B0];
  *((_QWORD *)this + 3) = v2;
  aBlock[0] = v3;
  aBlock[1] = 0x40000000;
  aBlock[2] = sub_1CC5A9128;
  aBlock[3] = &unk_1E886BD28;
  aBlock[4] = this;
  v4 = _Block_copy(aBlock);
  *((_QWORD *)this + 7) = 0;
  *((_QWORD *)this + 6) = 0;
  *((_QWORD *)this + 4) = v4;
  *((_QWORD *)this + 5) = (char *)this + 48;
  return this;
}

void sub_1CC5A9128(uint64_t a1)
{
  NSObject *v1;
  uint8_t v2[16];

  v1 = *(NSObject **)(*(_QWORD *)(a1 + 32) + 8);
  if (os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v2 = 0;
    _os_log_impl(&dword_1CC590000, v1, OS_LOG_TYPE_DEFAULT, "logging-metric:#E Did not find a QueriableMetricCallbackBlockWithParameters for Logging.", v2, 2u);
  }
}

void awd::AWDLoggingMetric::~AWDLoggingMetric(awd::AWDLoggingMetric *this)
{
  char *v2;
  char *v3;
  char *v4;
  const void *v5;
  char *v6;
  char *v7;
  BOOL v8;
  const void *v9;
  NSObject *v10;

  *(_QWORD *)this = &off_1E886ACF8;
  v2 = (char *)this + 48;
  v3 = (char *)this + 40;
  v4 = (char *)*((_QWORD *)this + 5);
  if (v4 != (char *)this + 48)
  {
    do
    {
      v5 = (const void *)*((_QWORD *)v4 + 5);
      if (v5)
        CFRelease(v5);
      v6 = (char *)*((_QWORD *)v4 + 1);
      if (v6)
      {
        do
        {
          v7 = v6;
          v6 = *(char **)v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          v7 = (char *)*((_QWORD *)v4 + 2);
          v8 = *(_QWORD *)v7 == (_QWORD)v4;
          v4 = v7;
        }
        while (!v8);
      }
      v4 = v7;
    }
    while (v7 != v2);
  }
  sub_1CC598878((uint64_t)v3, *((_QWORD **)this + 6));
  v9 = (const void *)*((_QWORD *)this + 4);
  if (v9)
    _Block_release(v9);
  v10 = *((_QWORD *)this + 3);
  if (v10)
    dispatch_release(v10);
  awd::AWDBasicConfigType::~AWDBasicConfigType(this);
}

{
  awd::AWDLoggingMetric::~AWDLoggingMetric(this);
  JUMPOUT(0x1D17AD544);
}

const char *awd::AWDLoggingMetric::getName(awd::AWDLoggingMetric *this)
{
  return "AWDLoggingMetric";
}

void awd::AWDLoggingMetric::setConfiguration(uint64_t a1, uint64_t *a2)
{
  NSObject *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  _QWORD block[6];
  std::__shared_weak_count *v12;

  v3 = *(NSObject **)(a1 + 24);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 1174405120;
  block[2] = sub_1CC5A9334;
  block[3] = &unk_1E886BF50;
  v5 = *a2;
  v4 = (std::__shared_weak_count *)a2[1];
  block[4] = a1;
  block[5] = v5;
  v12 = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  dispatch_async(v3, block);
  v8 = v12;
  if (v12)
  {
    v9 = (unint64_t *)&v12->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_1CC5A9334(_QWORD *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8[2];

  v2 = a1[4];
  v3 = (std::__shared_weak_count *)a1[6];
  v8[0] = a1[5];
  v8[1] = (uint64_t)v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  awd::AWDLoggingMetric::setConfiguration_sync(v2, v8);
  if (v3)
  {
    v6 = (unint64_t *)&v3->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_1CC5A93C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  awd::AWDServerConnection::~AWDServerConnection((awd::AWDServerConnection *)&a9);
  _Unwind_Resume(a1);
}

void awd::AWDLoggingMetric::setConfiguration_sync(uint64_t a1, uint64_t *a2)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  __int128 v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  const __CFAllocator *v15;
  uint64_t v16;
  int v17;
  NSObject *v18;
  NSObject *v19;
  const char *v20;
  uint32_t v21;
  int v22;
  NSObject *v23;
  NSObject *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  const void **v28;
  size_t v29;
  CFTypeRef *v30;
  uint64_t i;
  uint64_t v32;
  int v33;
  NSObject *v34;
  std::string *v35;
  std::string *v36;
  std::string *v37;
  std::string *v38;
  uint64_t *v39;
  uint64_t *v40;
  uint64_t **v41;
  __int128 v42;
  uint64_t *v43;
  __int128 v44;
  std::string v45;
  std::string v46;
  unsigned int v47;
  uint64_t v48;
  std::__shared_weak_count *v49;
  uint8_t buf[8];
  __int16 v51;
  std::string *v52;
  __int16 v53;
  std::string *v54;
  uint64_t v55;

  v55 = *MEMORY[0x1E0C80C00];
  v4 = (std::__shared_weak_count *)a2[1];
  v48 = *a2;
  v49 = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  awd::AWDBasicConfigType::setConfiguration(a1, &v48);
  v8 = v49;
  if (v49)
  {
    v9 = (unint64_t *)&v49->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  v11 = *a2;
  if (*a2)
  {
    v12 = *(int *)(v11 + 16);
    if ((_DWORD)v12)
    {
      v13 = *(uint64_t **)(v11 + 8);
      v14 = &v13[v12];
      v41 = (uint64_t **)(a1 + 40);
      v15 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
      *(_QWORD *)&v7 = 67109120;
      v42 = v7;
      *(_QWORD *)&v7 = 67109634;
      v44 = v7;
      v40 = v14;
      do
      {
        v16 = *v13;
        v17 = *(_DWORD *)(*v13 + 132);
        if ((v17 & 1) != 0)
        {
          if ((v17 & 8) != 0)
          {
            v47 = *(_DWORD *)(v16 + 32);
            if ((v17 & 0x80) != 0)
            {
              v24 = *(NSObject **)(a1 + 8);
              if (os_log_type_enabled(v24, OS_LOG_TYPE_INFO))
              {
                *(_WORD *)buf = 0;
                _os_log_impl(&dword_1CC590000, v24, OS_LOG_TYPE_INFO, "logging-metric:#I Found Log in configuration", buf, 2u);
              }
              v25 = *(_QWORD *)(v16 + 72);
              if (!v25)
                v25 = *(_QWORD *)(awd::profile::Profile::default_instance_ + 72);
              v43 = (uint64_t *)&v40;
              v26 = *(unsigned int *)(v25 + 16);
              MEMORY[0x1E0C80A78]();
              v27 = (8 * v26 + 15) & 0xFFFFFFFF0;
              v28 = (const void **)((char *)&v40 - v27);
              if ((unint64_t)(8 * v26) >= 0x200)
                v29 = 512;
              else
                v29 = 8 * v26;
              bzero((char *)&v40 - v27, v29);
              MEMORY[0x1E0C80A78]();
              v30 = (CFTypeRef *)((char *)&v40 - v27);
              bzero(v30, v29);
              if ((int)v26 >= 1)
              {
                for (i = 0; i != v26; ++i)
                {
                  v32 = *(_QWORD *)(*(_QWORD *)(v25 + 8) + 8 * i);
                  sub_1CC59E69C(&v46, "No Key");
                  sub_1CC59E69C(&v45, (char *)&unk_1CC5C89B3);
                  v33 = *(_DWORD *)(v32 + 28);
                  if ((v33 & 1) != 0)
                  {
                    std::string::operator=(&v46, *(const std::string **)(v32 + 8));
                    v33 = *(_DWORD *)(v32 + 28);
                  }
                  if ((v33 & 2) != 0)
                    std::string::operator=(&v45, *(const std::string **)(v32 + 16));
                  v34 = *(NSObject **)(a1 + 8);
                  if (os_log_type_enabled(v34, OS_LOG_TYPE_INFO))
                  {
                    v35 = &v46;
                    if ((v46.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                      v35 = (std::string *)v46.__r_.__value_.__r.__words[0];
                    if ((v45.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                      v36 = &v45;
                    else
                      v36 = (std::string *)v45.__r_.__value_.__r.__words[0];
                    *(_DWORD *)buf = v44;
                    *(_DWORD *)&buf[4] = i;
                    v51 = 2080;
                    v52 = v35;
                    v53 = 2080;
                    v54 = v36;
                    _os_log_impl(&dword_1CC590000, v34, OS_LOG_TYPE_INFO, "logging-metric:#I Log's param #%d %s:%s", buf, 0x1Cu);
                  }
                  if ((v46.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                    v37 = &v46;
                  else
                    v37 = (std::string *)v46.__r_.__value_.__r.__words[0];
                  v28[i] = CFStringCreateWithCString(v15, (const char *)v37, 0x8000100u);
                  if ((v45.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                    v38 = &v45;
                  else
                    v38 = (std::string *)v45.__r_.__value_.__r.__words[0];
                  v30[i] = CFStringCreateWithCString(v15, (const char *)v38, 0x8000100u);
                  if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
                    operator delete(v45.__r_.__value_.__l.__data_);
                  if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0)
                    operator delete(v46.__r_.__value_.__l.__data_);
                }
              }
              v39 = (uint64_t *)CFDictionaryCreate(v15, v28, v30, (int)v26, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
              *(_QWORD *)buf = &v47;
              sub_1CC5A9C68(v41, &v47, (uint64_t)&unk_1CC5C8159, (_DWORD **)buf)[5] = v39;
              if ((int)v26 > 0)
              {
                do
                {
                  CFRelease(*v28);
                  CFRelease(*v30++);
                  ++v28;
                  --v26;
                }
                while (v26);
              }
              v14 = v40;
            }
            goto LABEL_54;
          }
          v22 = *(_DWORD *)(v16 + 8);
          v23 = *(NSObject **)(a1 + 8);
          if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = v42;
            *(_DWORD *)&buf[4] = v22;
            v19 = v23;
            v20 = "logging-metric:#E AWDLoggingMetric: Got profile 0x%x with no trigger id.";
            v21 = 8;
            goto LABEL_18;
          }
        }
        else
        {
          v18 = *(NSObject **)(a1 + 8);
          if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)buf = 0;
            v19 = v18;
            v20 = "logging-metric:#E AWDLoggingMetric: Got profile with no profile id.";
            v21 = 2;
LABEL_18:
            _os_log_impl(&dword_1CC590000, v19, OS_LOG_TYPE_DEFAULT, v20, buf, v21);
          }
        }
LABEL_54:
        ++v13;
      }
      while (v13 != v14);
    }
  }
}

void sub_1CC5A9868(_Unwind_Exception *a1)
{
  uint64_t v1;

  awd::AWDServerConnection::~AWDServerConnection((awd::AWDServerConnection *)(v1 - 144));
  _Unwind_Resume(a1);
}

uint64_t sub_1CC5A98B4(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 48) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void sub_1CC5A98D8(uint64_t a1)
{
  awd::AWDServerConnection::~AWDServerConnection((awd::AWDServerConnection *)(a1 + 40));
}

void awd::AWDLoggingMetric::registerQueriableMetricCallbackForLogging(uint64_t a1, uint64_t a2)
{
  NSObject *v2;
  _QWORD v3[6];

  v2 = *(NSObject **)(a1 + 24);
  v3[0] = MEMORY[0x1E0C809B0];
  v3[1] = 0x40000000;
  v3[2] = sub_1CC5A9938;
  v3[3] = &unk_1E886C018;
  v3[4] = a2;
  v3[5] = a1;
  dispatch_async(v2, v3);
}

void sub_1CC5A9938(uint64_t a1)
{
  void *v1;
  uint64_t v2;
  uint64_t v3;
  const void *v4;

  v3 = a1 + 32;
  v1 = *(void **)(a1 + 32);
  v2 = *(_QWORD *)(v3 + 8);
  if (v1)
    v1 = _Block_copy(v1);
  v4 = *(const void **)(v2 + 32);
  *(_QWORD *)(v2 + 32) = v1;
  if (v4)
    _Block_release(v4);
}

void awd::AWDLoggingMetric::trigger(uint64_t a1, uint64_t a2, int a3)
{
  NSObject *v3;
  _QWORD block[6];
  int v5;

  v3 = *(NSObject **)(a1 + 24);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = sub_1CC5A99D4;
  block[3] = &unk_1E886C098;
  block[4] = a1;
  block[5] = a2;
  v5 = a3;
  dispatch_async(v3, block);
}

void sub_1CC5A99D4(uint64_t a1)
{
  awd::AWDLoggingMetric::trigger_sync(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_DWORD *)(a1 + 48));
}

void awd::AWDLoggingMetric::trigger_sync(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v3;
  uint64_t v7;
  unsigned int v8;
  BOOL v9;
  uint64_t *v10;
  const void *v11;
  void *v12;
  CFDictionaryRef Copy;
  NSObject *global_queue;
  void *v15;
  _QWORD block[5];
  void *aBlock;
  CFDictionaryRef v18;
  uint64_t v19;
  int v20;

  v3 = *(_QWORD *)(a1 + 48);
  if (v3)
  {
    v7 = a1 + 48;
    do
    {
      v8 = *(_DWORD *)(v3 + 32);
      v9 = v8 >= HIDWORD(a2);
      if (v8 >= HIDWORD(a2))
        v10 = (uint64_t *)v3;
      else
        v10 = (uint64_t *)(v3 + 8);
      if (v9)
        v7 = v3;
      v3 = *v10;
    }
    while (*v10);
    if (v7 != a1 + 48 && *(_DWORD *)(v7 + 32) <= HIDWORD(a2))
    {
      v11 = *(const void **)(a1 + 32);
      if (v11)
        v12 = _Block_copy(v11);
      else
        v12 = 0;
      Copy = CFDictionaryCreateCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], *(CFDictionaryRef *)(v7 + 40));
      global_queue = dispatch_get_global_queue(0, 0);
      block[0] = MEMORY[0x1E0C809B0];
      block[1] = 1174405120;
      block[2] = sub_1CC5A9B44;
      block[3] = &unk_1E886C190;
      block[4] = a1;
      v19 = a2;
      v20 = a3;
      if (v12)
        v15 = _Block_copy(v12);
      else
        v15 = 0;
      aBlock = v15;
      v18 = Copy;
      dispatch_async(global_queue, block);
      if (aBlock)
        _Block_release(aBlock);
      if (v12)
        _Block_release(v12);
    }
  }
}

void sub_1CC5A9B28(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    _Block_release(v1);
  _Unwind_Resume(exception_object);
}

void sub_1CC5A9B44(uint64_t a1)
{
  NSObject *v2;
  int v3;
  int v4;
  int v5;
  uint64_t v6;
  _DWORD v7[2];
  __int16 v8;
  int v9;
  __int16 v10;
  int v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v2 = *(NSObject **)(*(_QWORD *)(a1 + 32) + 8);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
  {
    v3 = *(_DWORD *)(a1 + 56);
    v4 = *(_DWORD *)(a1 + 60);
    v5 = *(_DWORD *)(a1 + 64);
    v7[0] = 67109632;
    v7[1] = v3;
    v8 = 1024;
    v9 = v4;
    v10 = 1024;
    v11 = v5;
    _os_log_impl(&dword_1CC590000, v2, OS_LOG_TYPE_INFO, "logging-metric:#I Calling callback on Logging metric for Trigger(cid=0x%x, trid=0x%x, sid=%u)", (uint8_t *)v7, 0x14u);
  }
  v6 = *(_QWORD *)(a1 + 40);
  if (v6)
    (*(void (**)(uint64_t, _QWORD))(v6 + 16))(v6, *(_QWORD *)(a1 + 48));
  CFRelease(*(CFTypeRef *)(a1 + 48));
}

void *sub_1CC5A9C18(uint64_t a1, uint64_t a2)
{
  void *result;

  result = *(void **)(a2 + 40);
  if (result)
    result = _Block_copy(result);
  *(_QWORD *)(a1 + 40) = result;
  return result;
}

void sub_1CC5A9C48(uint64_t a1)
{
  const void *v1;

  v1 = *(const void **)(a1 + 40);
  if (v1)
    _Block_release(v1);
}

uint64_t **sub_1CC5A9C68(uint64_t **a1, unsigned int *a2, uint64_t a3, _DWORD **a4)
{
  uint64_t *v6;
  uint64_t **v7;
  unsigned int v8;
  uint64_t **v9;
  unsigned int v10;
  _DWORD *v11;

  v7 = a1 + 1;
  v6 = a1[1];
  if (v6)
  {
    v8 = *a2;
    while (1)
    {
      while (1)
      {
        v9 = (uint64_t **)v6;
        v10 = *((_DWORD *)v6 + 8);
        if (v8 >= v10)
          break;
        v6 = *v9;
        v7 = v9;
        if (!*v9)
          goto LABEL_10;
      }
      if (v10 >= v8)
        break;
      v6 = v9[1];
      if (!v6)
      {
        v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v9 = a1 + 1;
LABEL_10:
    v11 = operator new(0x30uLL);
    v11[8] = **a4;
    *((_QWORD *)v11 + 5) = 0;
    sub_1CC598AF0(a1, (uint64_t)v9, v7, (uint64_t *)v11);
    return (uint64_t **)v11;
  }
  return v9;
}

void AWDObserverConnection::createConfigurationDict(AWDObserverConnection *this@<X0>, xpc_object_t *a2@<X8>)
{
  xpc_object_t v4;
  AWDObserverConnection *v5;
  xpc_object_t v6;

  v5 = this;
  if (v5 && -[AWDObserverConnection count](v5, "count"))
  {
    sub_1CC5A9DE4(v5, &v6);
    v4 = v6;
    *a2 = v6;
    if (v4 && MEMORY[0x1D17ADA60](v4) == MEMORY[0x1E0C812F8])
      xpc_retain(v4);
    else
      *a2 = xpc_null_create();
    xpc_release(v4);
  }
  else
  {
    *a2 = xpc_null_create();
  }

}

void sub_1CC5A9DC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id a9)
{

  _Unwind_Resume(a1);
}

void sub_1CC5A9DE4(void *a1@<X0>, xpc_object_t *a2@<X8>)
{
  id v3;
  xpc_object_t v4;
  xpc_object_t v5;
  xpc_object_t v6;
  xpc_object_t v7;
  xpc_object_t v8;
  xpc_object_t v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t i;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t j;
  void *v18;
  void *v19;
  void *v20;
  xpc_object_t v21;
  xpc_object_t value[2];
  xpc_object_t v23;
  xpc_object_t object;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  xpc_object_t v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  _BYTE v34[128];
  _BYTE v35[128];
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  if (!v3)
    goto LABEL_4;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
    {
      v5 = xpc_array_create(0, 0);
      if (v5 || (v5 = xpc_null_create()) != 0)
      {
        if (MEMORY[0x1D17ADA60](v5) == MEMORY[0x1E0C812C8])
        {
          xpc_retain(v5);
          v6 = v5;
        }
        else
        {
          v6 = xpc_null_create();
        }
      }
      else
      {
        v6 = xpc_null_create();
        v5 = 0;
      }
      xpc_release(v5);
      v32 = 0u;
      v33 = 0u;
      v30 = 0u;
      v31 = 0u;
      v10 = v3;
      v11 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v30, v35, 16);
      if (v11)
      {
        v12 = *(_QWORD *)v31;
        do
        {
          for (i = 0; i != v11; ++i)
          {
            if (*(_QWORD *)v31 != v12)
              objc_enumerationMutation(v10);
            sub_1CC5A9DE4(value);
            xpc_array_append_value(v6, value[0]);
            xpc_release(value[0]);
          }
          v11 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v30, v35, 16);
        }
        while (v11);
      }

      *a2 = v6;
      if (v6)
        xpc_retain(v6);
      else
        *a2 = xpc_null_create();
      xpc_release(v6);
      goto LABEL_44;
    }
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) == 0)
      goto LABEL_4;
    v7 = xpc_dictionary_create(0, 0, 0);
    v8 = v7;
    if (v7)
    {
      v29 = v7;
    }
    else
    {
      v8 = xpc_null_create();
      v29 = v8;
      if (!v8)
      {
        v9 = xpc_null_create();
        v8 = 0;
        goto LABEL_32;
      }
    }
    if (MEMORY[0x1D17ADA60](v8) == MEMORY[0x1E0C812F8])
    {
      xpc_retain(v8);
LABEL_33:
      xpc_release(v8);
      v27 = 0u;
      v28 = 0u;
      v25 = 0u;
      v26 = 0u;
      v14 = v3;
      v15 = objc_msgSend(v14, "countByEnumeratingWithState:objects:count:", &v25, v34, 16);
      if (v15)
      {
        v16 = *(_QWORD *)v26;
        do
        {
          for (j = 0; j != v15; ++j)
          {
            if (*(_QWORD *)v26 != v16)
              objc_enumerationMutation(v14);
            v18 = *(void **)(*((_QWORD *)&v25 + 1) + 8 * j);
            objc_msgSend(v14, "objectForKey:", v18);
            v19 = (void *)objc_claimAutoreleasedReturnValue();
            sub_1CC5A9DE4(&v23);
            v20 = (void *)objc_msgSend(objc_retainAutorelease(v18), "UTF8String");
            value[0] = &v29;
            value[1] = v20;
            sub_1CC5954D0((uint64_t)value, &v23, &object);
            xpc_release(object);
            object = 0;
            xpc_release(v23);
            v23 = 0;

          }
          v15 = objc_msgSend(v14, "countByEnumeratingWithState:objects:count:", &v25, v34, 16);
        }
        while (v15);
      }

      v21 = v29;
      *a2 = v29;
      if (v21)
        xpc_retain(v21);
      else
        *a2 = xpc_null_create();
      xpc_release(v29);
      goto LABEL_44;
    }
    v9 = xpc_null_create();
LABEL_32:
    v29 = v9;
    goto LABEL_33;
  }
  v4 = xpc_string_create((const char *)objc_msgSend(objc_retainAutorelease(v3), "UTF8String"));
  *a2 = v4;
  if (!v4)
LABEL_4:
    *a2 = xpc_null_create();
LABEL_44:

}

void sub_1CC5AA190(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, xpc_object_t a9, uint64_t a10, xpc_object_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,xpc_object_t object)
{
  if (a2)
    sub_1CC592AD0(exception_object);
  _Unwind_Resume(exception_object);
}

void AWDObserverConnection::create(uint64_t *a1@<X8>)
{
  AWDObserverConnection *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t *v7;
  unint64_t v8;
  _QWORD *v9;
  NSObject *v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  _QWORD *v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  uint64_t v21;
  uint64_t v22;

  v3 = (AWDObserverConnection *)operator new();
  AWDObserverConnection::AWDObserverConnection(v3);
  sub_1CC5AB208(a1, (uint64_t)v3);
  v4 = *a1;
  v5 = a1[1];
  v6 = (_QWORD *)(*a1 + 8);
  if (v5)
  {
    v7 = (unint64_t *)(v5 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  sub_1CC59C014(&v19, v6);
  v9 = (_QWORD *)operator new();
  *v9 = v4;
  v9[1] = v5;
  v10 = *(NSObject **)(v4 + 24);
  v11 = v19;
  v12 = v20;
  if (v20)
  {
    p_shared_owners = (unint64_t *)&v20->__shared_owners_;
    do
      v14 = __ldxr(p_shared_owners);
    while (__stxr(v14 + 1, p_shared_owners));
  }
  v15 = (_QWORD *)operator new();
  *v15 = v9;
  v15[1] = v11;
  v15[2] = v12;
  v21 = 0;
  v22 = 0;
  dispatch_async_f(v10, v15, (dispatch_function_t)sub_1CC5AB338);
  sub_1CC59C45C(&v21);
  sub_1CC59C45C(&v22);
  v16 = v20;
  if (v20)
  {
    v17 = (unint64_t *)&v20->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
}

void sub_1CC5AA3C0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1D17AD544](v1, 0x10B3C40FB9ED22CLL);
  _Unwind_Resume(a1);
}

void AWDObserverConnection::AWDObserverConnection(AWDObserverConnection *this)
{
  _QWORD *v2;

  AWDServerConnector::AWDServerConnector(this);
  *v2 = off_1E886AC18;
  v2[9] = 0;
  *((_QWORD *)this + 10) = xpc_null_create();
  ctu::OsLogLogger::OsLogLogger((AWDObserverConnection *)((char *)this + 88), "com.apple.awd.framework", "observer");
}

void sub_1CC5AA448(_Unwind_Exception *a1)
{
  AWDServerConnector *v1;
  xpc_object_t *v2;
  xpc_object_t *v3;
  const void *v5;
  void *v6;

  v3 = v2;
  sub_1CC5AA48C(v3);
  v5 = (const void *)*((_QWORD *)v1 + 9);
  if (v5)
  {
    _Block_release(v5);
    v6 = (void *)*((_QWORD *)v1 + 9);
  }
  else
  {
    v6 = 0;
  }

  AWDServerConnector::~AWDServerConnector(v1);
  _Unwind_Resume(a1);
}

xpc_object_t *sub_1CC5AA48C(xpc_object_t *a1)
{
  xpc_release(*a1);
  *a1 = 0;
  return a1;
}

void AWDObserverConnection::~AWDObserverConnection(xpc_object_t *this)
{
  xpc_object_t v2;
  xpc_object_t v3;

  *this = off_1E886AC18;
  MEMORY[0x1D17AD2BC](this + 11);
  xpc_release(this[10]);
  this[10] = 0;
  v2 = this[9];
  if (v2)
  {
    _Block_release(v2);
    v3 = this[9];
  }
  else
  {
    v3 = 0;
  }

  AWDServerConnector::~AWDServerConnector((AWDServerConnector *)this);
}

{
  AWDObserverConnection::~AWDObserverConnection(this);
  JUMPOUT(0x1D17AD544);
}

void AWDObserverConnection::handleAwddStarted_sync(AWDObserverConnection *this)
{
  AWDServerConnector::handleAwddStarted_sync(this);
  AWDObserverConnection::sendConfiguration_sync(this);
}

void AWDObserverConnection::sendConfiguration_sync(AWDObserverConnection *this)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  unint64_t *p_shared_weak_owners;
  unint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  void *v8;
  unint64_t *v9;
  unint64_t v10;
  _QWORD v11[6];
  std::__shared_weak_count *v12;
  xpc_object_t object;
  uint64_t v14;
  std::__shared_weak_count *v15;

  sub_1CC59C014(&v14, (_QWORD *)this + 1);
  v3 = v14;
  v2 = v15;
  if (v15)
  {
    p_shared_weak_owners = (unint64_t *)&v15->__shared_weak_owners_;
    do
      v5 = __ldxr(p_shared_weak_owners);
    while (__stxr(v5 + 1, p_shared_weak_owners));
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v8 = (void *)*((_QWORD *)this + 10);
  object = v8;
  if (v8)
    xpc_retain(v8);
  else
    object = xpc_null_create();
  v11[0] = MEMORY[0x1E0C809B0];
  v11[1] = 3321888768;
  v11[2] = sub_1CC5AAE64;
  v11[3] = &unk_1E886BB68;
  v11[4] = this;
  v11[5] = v3;
  v12 = v2;
  if (v2)
  {
    v9 = (unint64_t *)&v2->__shared_weak_owners_;
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  AWDServerConnector::send((uint64_t)this, &object, (uint64_t)"Observe", (uint64_t)v11);
  xpc_release(object);
  object = 0;
  if (v12)
    std::__shared_weak_count::__release_weak(v12);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
}

void sub_1CC5AA694(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, xpc_object_t object)
{
  std::__shared_weak_count *v16;

  if (a15)
    std::__shared_weak_count::__release_weak(a15);
  xpc_release(object);
  if (v16)
    std::__shared_weak_count::__release_weak(v16);
  _Unwind_Resume(a1);
}

void AWDObserverConnection::handleMessage_sync(uint64_t a1, void **a2)
{
  void *v4;
  void *v5;

  if (*(_QWORD *)(a1 + 72))
  {
    if (MEMORY[0x1D17ADA60](*a2) == MEMORY[0x1E0C812F8])
    {
      v4 = (void *)MEMORY[0x1D17AD778]();
      sub_1CC5AA764(*a2);
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      (*(void (**)(void))(*(_QWORD *)(a1 + 72) + 16))();

      objc_autoreleasePoolPop(v4);
    }
  }
}

void sub_1CC5AA754(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

__CFString *sub_1CC5AA764(void *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v5;
  xpc_object_t v6;
  void *v7;
  id v8;
  void *v9;
  size_t count;
  void *v11;
  void *v12;
  xpc_object_t v13;
  size_t i;
  xpc_object_t value;
  void *v16;
  void *v18;
  const void *bytes_ptr;
  _QWORD v20[4];
  id v21;
  xpc_object_t object;
  uint64_t v23;
  xpc_object_t v24;
  size_t index;
  xpc_object_t v26;

  if (!a1)
  {
    objc_msgSend(MEMORY[0x1E0C99E38], "null");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    return (__CFString *)v5;
  }
  v2 = MEMORY[0x1D17ADA60]();
  if (v2 == MEMORY[0x1E0C81390])
  {
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", xpc_string_get_string_ptr(a1));
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    if (!v5)
      return CFSTR("<bad string>");
    return (__CFString *)v5;
  }
  v3 = MEMORY[0x1E0C812C8];
  if (v2 == MEMORY[0x1E0C812C8])
  {
    xpc_retain(a1);
    if (MEMORY[0x1D17ADA60](a1) == v3)
    {
      xpc_retain(a1);
      v6 = a1;
    }
    else
    {
      v6 = xpc_null_create();
    }
    xpc_release(a1);
    v9 = (void *)MEMORY[0x1E0C99DE8];
    if (MEMORY[0x1D17ADA60](v6) == v3)
      count = xpc_array_get_count(v6);
    else
      count = 0;
    objc_msgSend(v9, "arrayWithCapacity:", count);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    object = v6;
    if (v6)
      xpc_retain(v6);
    else
      object = xpc_null_create();
    sub_1CC596420(&v24, &object, 0);
    xpc_release(object);
    v26 = v6;
    if (v6)
      xpc_retain(v6);
    else
      v26 = xpc_null_create();
    if (MEMORY[0x1D17ADA60](v6) == v3)
      v12 = (void *)xpc_array_get_count(v6);
    else
      v12 = 0;
    sub_1CC596420(&object, &v26, v12);
    xpc_release(v26);
    v13 = v24;
    for (i = index; i != v23 || v24 != object; index = i)
    {
      value = xpc_array_get_value(v13, i);
      sub_1CC5AA764(value);
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v11, "addObject:", v16);

      v13 = v24;
      i = index + 1;
    }
    xpc_release(v13);
    xpc_release(v24);
    xpc_release(v6);
    return (__CFString *)v11;
  }
  else
  {
    if (v2 != MEMORY[0x1E0C812F8])
    {
      if (v2 == MEMORY[0x1E0C812D0])
      {
        objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", xpc_BOOL_get_value(a1));
        v5 = (void *)objc_claimAutoreleasedReturnValue();
      }
      else if (v2 == MEMORY[0x1E0C81328])
      {
        objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", xpc_int64_get_value(a1));
        v5 = (void *)objc_claimAutoreleasedReturnValue();
      }
      else if (v2 == MEMORY[0x1E0C81398])
      {
        objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLongLong:", xpc_uint64_get_value(a1));
        v5 = (void *)objc_claimAutoreleasedReturnValue();
      }
      else if (v2 == MEMORY[0x1E0C812E8])
      {
        v18 = (void *)MEMORY[0x1E0C99D50];
        bytes_ptr = xpc_data_get_bytes_ptr(a1);
        objc_msgSend(v18, "dataWithBytes:length:", bytes_ptr, xpc_data_get_length(a1));
        v5 = (void *)objc_claimAutoreleasedReturnValue();
      }
      else
      {
        if (v2 != MEMORY[0x1E0C81300])
          return CFSTR("<unknown type>");
        objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", xpc_double_get_value(a1));
        v5 = (void *)objc_claimAutoreleasedReturnValue();
      }
      return (__CFString *)v5;
    }
    objc_msgSend(MEMORY[0x1E0C99E08], "dictionaryWithCapacity:", xpc_dictionary_get_count(a1));
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v20[0] = MEMORY[0x1E0C809B0];
    v20[1] = 3221225472;
    v20[2] = sub_1CC5AB180;
    v20[3] = &unk_1E886C460;
    v8 = v7;
    v21 = v8;
    xpc_dictionary_apply(a1, v20);

    return (__CFString *)v8;
  }
}

void sub_1CC5AAB14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, xpc_object_t a14, uint64_t a15, xpc_object_t object)
{
  void *v16;

  _Unwind_Resume(a1);
}

void AWDObserverConnection::setStateChangedCallback(uint64_t a1, void *a2)
{
  id v3;
  _QWORD *v4;
  id v5;
  _QWORD v6[4];
  id v7;
  uint64_t v8;

  v3 = a2;
  v4 = (_QWORD *)(a1 + 8);
  v6[0] = MEMORY[0x1E0C809B0];
  v6[1] = 3221225472;
  v6[2] = sub_1CC5AAC34;
  v6[3] = &unk_1E886C250;
  v7 = v3;
  v8 = a1;
  v5 = v3;
  sub_1CC5A8710(v4, (uint64_t)v6);

}

void sub_1CC5AAC34(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  void *v3;
  void *v4;

  v1 = *(_QWORD *)(a1 + 40);
  v2 = _Block_copy(*(const void **)(a1 + 32));
  v3 = *(void **)(v1 + 72);
  *(_QWORD *)(v1 + 72) = v2;
  if (v3)
  {
    v4 = v3;
    _Block_release(v3);
    v3 = v4;
  }

}

void AWDObserverConnection::setObserverConfiguration(uint64_t a1, void *a2, void *a3)
{
  AWDObserverConnection *v5;
  id v6;
  void *v7;
  xpc_object_t v8;
  _QWORD *v9;
  id v10;
  _QWORD v11[4];
  id v12;
  uint64_t v13;
  xpc_object_t v14;
  xpc_object_t object;

  v5 = a2;
  v6 = a3;
  v7 = (void *)MEMORY[0x1D17AD778]();
  AWDObserverConnection::createConfigurationDict(v5, &object);
  v11[0] = MEMORY[0x1E0C809B0];
  v11[1] = 3321888768;
  v11[2] = sub_1CC5AAD90;
  v11[3] = &unk_1E886BB38;
  v8 = object;
  v13 = a1;
  v14 = object;
  if (object)
    xpc_retain(object);
  else
    v14 = xpc_null_create();
  v9 = (_QWORD *)(a1 + 8);
  v10 = v6;
  v12 = v10;
  sub_1CC5A8710(v9, (uint64_t)v11);

  xpc_release(v14);
  v14 = 0;
  xpc_release(v8);
  objc_autoreleasePoolPop(v7);

}

void sub_1CC5AAD6C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t sub_1CC5AAD90(uint64_t a1)
{
  AWDObserverConnection *v2;
  xpc_object_t v3;
  void *v4;

  v2 = *(AWDObserverConnection **)(a1 + 40);
  v3 = *(xpc_object_t *)(a1 + 48);
  if (v3)
    xpc_retain(*(xpc_object_t *)(a1 + 48));
  else
    v3 = xpc_null_create();
  v4 = (void *)*((_QWORD *)v2 + 10);
  *((_QWORD *)v2 + 10) = v3;
  xpc_release(v4);
  AWDObserverConnection::sendConfiguration_sync(v2);
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

xpc_object_t sub_1CC5AADFC(uint64_t a1, uint64_t a2)
{
  void *v3;
  xpc_object_t result;

  v3 = *(void **)(a2 + 48);
  *(_QWORD *)(a1 + 48) = v3;
  if (v3)
    return xpc_retain(v3);
  result = xpc_null_create();
  *(_QWORD *)(a1 + 48) = result;
  return result;
}

void sub_1CC5AAE38(uint64_t a1)
{
  xpc_release(*(xpc_object_t *)(a1 + 48));
  *(_QWORD *)(a1 + 48) = 0;
}

void sub_1CC5AAE64(_QWORD *a1, _QWORD *a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  void *v8;
  void *v9;
  uint64_t v10;
  NSObject *v11;
  const char *v12;
  NSObject *v13;
  os_log_type_t v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  xpc_object_t value;
  NSObject *v18;
  void *p_p;
  _QWORD v20[2];
  xpc_object_t v21;
  void *__p;
  char v23;
  xpc_object_t object;
  std::__shared_weak_count *v26;
  uint8_t buf[8];
  uint64_t v28;
  uint64_t v29;
  uint8_t v30[4];
  void *v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    v5 = a1[4];
    v6 = std::__shared_weak_count::lock(v3);
    v26 = v6;
    if (v6)
    {
      v7 = v6;
      if (!a1[5])
        goto LABEL_14;
      v8 = (void *)MEMORY[0x1D17AD778]();
      v9 = (void *)*a2;
      object = v9;
      v10 = MEMORY[0x1E0C812F8];
      if (v9 && MEMORY[0x1D17ADA60](v9) == v10)
        xpc_retain(v9);
      else
        object = xpc_null_create();
      if (MEMORY[0x1D17ADA60](*a2) != MEMORY[0x1E0C81350] && MEMORY[0x1D17ADA60](object) == v10)
      {
        value = xpc_dictionary_get_value(object, "error");
        v18 = *(NSObject **)(v5 + 88);
        if (value)
        {
          if (os_log_type_enabled(*(os_log_t *)(v5 + 88), OS_LOG_TYPE_DEFAULT))
          {
            v20[0] = &object;
            v20[1] = "error";
            sub_1CC595210((uint64_t)v20, &v21);
            *(_QWORD *)buf = 0;
            v28 = 0;
            v29 = 0;
            xpc::dyn_cast_or_default();
            if (SHIBYTE(v29) < 0)
              operator delete(*(void **)buf);
            p_p = &__p;
            if (v23 < 0)
              p_p = __p;
            *(_DWORD *)v30 = 136315138;
            v31 = p_p;
            _os_log_impl(&dword_1CC590000, v18, OS_LOG_TYPE_DEFAULT, "#E SetObserverConfiguration failed: %s", v30, 0xCu);
            if (v23 < 0)
              operator delete(__p);
            xpc_release(v21);
          }
          goto LABEL_13;
        }
        if (os_log_type_enabled(*(os_log_t *)(v5 + 88), OS_LOG_TYPE_INFO))
        {
          *(_WORD *)buf = 0;
          v12 = "#I SetObserverConfiguration configured successfully";
          v13 = v18;
          v14 = OS_LOG_TYPE_INFO;
          goto LABEL_12;
        }
      }
      else
      {
        v11 = *(NSObject **)(v5 + 88);
        if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          v12 = "#E XPC connection failure";
          v13 = v11;
          v14 = OS_LOG_TYPE_DEFAULT;
LABEL_12:
          _os_log_impl(&dword_1CC590000, v13, v14, v12, buf, 2u);
        }
      }
LABEL_13:
      xpc_release(object);
      objc_autoreleasePoolPop(v8);
LABEL_14:
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v16 = __ldaxr(p_shared_owners);
      while (__stlxr(v16 - 1, p_shared_owners));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
}

void sub_1CC5AB0DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, xpc_object_t object, uint64_t a13, uint64_t a14, uint64_t a15, xpc_object_t a16, char a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  sub_1CC592AD0(exception_object);
}

uint64_t sub_1CC5AB14C(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 48) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 16);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void sub_1CC5AB170(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

uint64_t sub_1CC5AB180(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v4;
  void *v5;
  void *v6;

  v4 = *(void **)(a1 + 32);
  sub_1CC5AA764(a3);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", a2);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "setObject:forKey:", v5, v6);

  return 1;
}

void sub_1CC5AB1EC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t *sub_1CC5AB208(uint64_t *a1, uint64_t a2)
{
  _QWORD *v4;
  _QWORD *v5;

  *a1 = a2;
  v4 = (_QWORD *)operator new();
  *v4 = &off_1E886B980;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = (uint64_t)v4;
  if (a2)
    v5 = (_QWORD *)(a2 + 8);
  else
    v5 = 0;
  sub_1CC59BD34((uint64_t)a1, v5, a2);
  return a1;
}

void sub_1CC5AB274(void *a1)
{
  dispatch_queue_t *v1;

  __cxa_begin_catch(a1);
  dispatch_barrier_async_f(v1[3], v1, (dispatch_function_t)sub_1CC5AB324);
  __cxa_rethrow();
}

void sub_1CC5AB294(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_1CC5AB2AC(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1D17AD544);
}

void sub_1CC5AB2D0(uint64_t a1)
{
  dispatch_barrier_async_f(*(dispatch_queue_t *)(*(_QWORD *)(a1 + 24) + 24), *(void **)(a1 + 24), (dispatch_function_t)sub_1CC5AB324);
}

uint64_t sub_1CC5AB2E4(uint64_t a1, uint64_t a2)
{
  if (sub_1CC59BE60(a2, (uint64_t)&unk_1E886AB78))
    return a1 + 24;
  else
    return 0;
}

uint64_t sub_1CC5AB324(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 24))(result);
  return result;
}

uint64_t *sub_1CC5AB338(awd::AWDServerConnection **a1)
{
  awd::AWDServerConnection *v1;
  awd::AWDServerConnection **v3;
  awd::AWDServerConnection *v4;

  v1 = *a1;
  v3 = a1;
  v4 = v1;
  (*(void (**)(_QWORD))(**(_QWORD **)v1 + 32))(*(_QWORD *)v1);
  sub_1CC5A859C(&v4);
  return sub_1CC59C45C((uint64_t *)&v3);
}

void sub_1CC5AB380(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, awd::AWDServerConnection *a10)
{
  sub_1CC5A859C(&a10);
  sub_1CC59C45C(&a9);
  _Unwind_Resume(a1);
}

void sub_1CC5AB80C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1CC5AB860(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1CC5AB9BC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t sub_1CC5AB9E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5, _QWORD *a6, uint64_t a7, _QWORD *a8)
{
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;

  *(_DWORD *)a1 = a4;
  *(_BYTE *)(a1 + 4) = 1;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = a2;
  awd::AWDTriggerFilter::AWDTriggerFilter(a1 + 24, a3, a4, a6);
  awd::AWDMetricBuffer::AWDMetricBuffer(a1 + 80, a4, a7);
  awd::SimpleMetricHelper::SimpleMetricHelper((awd::SimpleMetricHelper *)(a1 + 208), a4);
  *(_QWORD *)(a1 + 264) = *a6;
  v14 = a6[1];
  *(_QWORD *)(a1 + 272) = v14;
  if (v14)
  {
    v15 = (unint64_t *)(v14 + 16);
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  *(_QWORD *)(a1 + 280) = *a5;
  v17 = a5[1];
  *(_QWORD *)(a1 + 288) = v17;
  if (v17)
  {
    v18 = (unint64_t *)(v17 + 8);
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
  }
  *(_QWORD *)(a1 + 296) = 0;
  *(_QWORD *)(a1 + 304) = 0;
  *(_QWORD *)(a1 + 328) = 0;
  *(_QWORD *)(a1 + 336) = 0;
  *(_QWORD *)(a1 + 312) = 0;
  *(_QWORD *)(a1 + 320) = a1 + 328;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_OWORD *)(a1 + 360) = 0u;
  *(_OWORD *)(a1 + 376) = 0u;
  *(_OWORD *)(a1 + 392) = 0u;
  *(_QWORD *)(a1 + 408) = *a8;
  v20 = a8[1];
  *(_QWORD *)(a1 + 416) = v20;
  if (v20)
  {
    v21 = (unint64_t *)(v20 + 8);
    do
      v22 = __ldxr(v21);
    while (__stxr(v22 + 1, v21));
  }
  sub_1CC5ABC18(a1);
  return a1;
}

void sub_1CC5ABB54(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, awd::AWDServerConnection *a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12;
  awd::AWDMetricBuffer *v13;
  uint64_t v14;
  awd::AWDServerConnection *v15;
  uint64_t v16;
  void ***v17;
  uint64_t *v18;
  const void **v19;
  std::__shared_weak_count *v20;
  std::__shared_weak_count *v21;

  awd::AWDServerConnection::~AWDServerConnection(v15);
  sub_1CC5B05FC(v19);
  sub_1CC5B08B0((void ***)&a12);
  sub_1CC5AE37C(v18, 0);
  sub_1CC5B0860(v17, 0);
  v20 = *(std::__shared_weak_count **)(v12 + 352);
  if (v20)
    std::__shared_weak_count::__release_weak(v20);
  sub_1CC5B07DC(v16, *(_QWORD **)(v12 + 328));
  a12 = a9;
  sub_1CC5B0754((void ***)&a12);
  awd::AWDServerConnection::~AWDServerConnection(a10);
  v21 = *(std::__shared_weak_count **)(v12 + 272);
  if (v21)
    std::__shared_weak_count::__release_weak(v21);
  sub_1CC5ABE10(v14);
  awd::AWDMetricBuffer::~AWDMetricBuffer(v13);
  sub_1CC5ABE58(a11);
}

void sub_1CC5ABBF0()
{
  uint64_t v0;
  _Unwind_Exception *v1;
  NSObject *v2;
  NSObject *v3;

  v2 = *(NSObject **)(v0 + 8);
  if (v2)
  {
    dispatch_group_leave(v2);
    v3 = *(NSObject **)(v0 + 8);
    if (v3)
      dispatch_release(v3);
  }
  _Unwind_Resume(v1);
}

void sub_1CC5ABC18(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t *p_shared_weak_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  NSObject *global_queue;
  NSObject *v8;
  NSObject *v9;
  uint64_t v10;
  unint64_t v11;
  dispatch_time_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  _QWORD v17[5];
  std::__shared_weak_count *v18;
  _QWORD handler[4];
  dispatch_object_t object;

  v2 = (std::__shared_weak_count *)operator new(0x38uLL);
  v2->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  v2->__shared_weak_owners_ = 0;
  p_shared_weak_owners = (unint64_t *)&v2->__shared_weak_owners_;
  v2->__vftable = (std::__shared_weak_count_vtbl *)&off_1E886B868;
  v2[1].std::__shared_count = 0u;
  *(_OWORD *)&v2[1].__shared_weak_owners_ = 0u;
  v2[1].__shared_owners_ = (uint64_t)&v2[1].__shared_weak_owners_;
  do
    v5 = __ldxr(p_shared_weak_owners);
  while (__stxr(v5 + 1, p_shared_weak_owners));
  v6 = *(std::__shared_weak_count **)(a1 + 352);
  *(_QWORD *)(a1 + 344) = v2 + 1;
  *(_QWORD *)(a1 + 352) = v2;
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
  global_queue = dispatch_get_global_queue(0, 0);
  v8 = dispatch_source_create(MEMORY[0x1E0C80DD0], 0, 0, global_queue);
  v9 = v8;
  v10 = MEMORY[0x1E0C809B0];
  handler[0] = MEMORY[0x1E0C809B0];
  handler[1] = 1174405120;
  handler[2] = sub_1CC5ABE90;
  handler[3] = &unk_1E886BD48;
  object = v8;
  if (v8)
    dispatch_retain(v8);
  dispatch_source_set_event_handler(v9, handler);
  v17[0] = v10;
  v17[1] = 1174405120;
  v17[2] = nullsub_11;
  v17[3] = &unk_1E886BF80;
  v17[4] = v2 + 1;
  v18 = v2;
  do
    v11 = __ldxr(p_shared_owners);
  while (__stxr(v11 + 1, p_shared_owners));
  dispatch_source_set_cancel_handler(v9, v17);
  v12 = dispatch_time(0, 5000000000);
  dispatch_source_set_timer(v9, v12, 0xFFFFFFFFFFFFFFFFLL, 0xBEBC200uLL);
  dispatch_resume(v9);
  v13 = v18;
  if (v18)
  {
    v14 = (unint64_t *)&v18->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  if (object)
    dispatch_release(object);
  if (v9)
    dispatch_release(v9);
  do
    v16 = __ldaxr(p_shared_owners);
  while (__stlxr(v16 - 1, p_shared_owners));
  if (!v16)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
}

uint64_t sub_1CC5ABE10(uint64_t a1)
{
  void *v2;
  void **v4;

  v4 = (void **)(a1 + 32);
  sub_1CC59D564(&v4);
  v2 = *(void **)(a1 + 8);
  if (v2)
  {
    *(_QWORD *)(a1 + 16) = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_1CC5ABE58(uint64_t a1)
{
  std::__shared_weak_count *v2;

  sub_1CC5A165C(a1 + 32, *(_QWORD **)(a1 + 40));
  v2 = *(std::__shared_weak_count **)(a1 + 24);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  JUMPOUT(0x1D17AD2BCLL);
}

void sub_1CC5ABE90(uint64_t a1)
{
  dispatch_source_cancel(*(dispatch_source_t *)(a1 + 32));
}

void sub_1CC5ABE98(uint64_t a1, uint64_t a2)
{
  NSObject *v3;

  v3 = *(NSObject **)(a2 + 32);
  *(_QWORD *)(a1 + 32) = v3;
  if (v3)
    dispatch_retain(v3);
}

void sub_1CC5ABEB0(uint64_t a1)
{
  NSObject *v1;

  v1 = *(NSObject **)(a1 + 32);
  if (v1)
    dispatch_release(v1);
}

uint64_t sub_1CC5ABEC4(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(result + 40) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void sub_1CC5ABEE8(uint64_t a1)
{
  awd::AWDServerConnection::~AWDServerConnection((awd::AWDServerConnection *)(a1 + 32));
}

void sub_1CC5ABEF0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  const __CFAllocator *v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  CFNumberRef v11;
  uint64_t v12;
  const void *v13;
  uint64_t v14;
  CFNumberRef v15;
  uint64_t v16;
  int v17;
  CFNumberRef v18;
  uint64_t v19;
  uint64_t v20;
  CFNumberRef v21;
  uint64_t v22;
  int v23;
  CFNumberRef v24;
  uint64_t v25;
  uint64_t v26;
  CFNumberRef v27;
  uint64_t v28;
  uint64_t (*v29)(uint64_t);
  __int128 *v30;
  __int128 v31;
  void *v32;
  const void *v33;
  uint64_t (*v34)(uint64_t);
  char *v35;
  char *v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  char *v40;
  char *v41;
  char *v42;
  char *v43;
  uint64_t v44;
  const void *v45;
  char *v46;
  char *v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  char *v51;
  char *v52;
  char *v53;
  char *v54;
  uint64_t v55;
  _QWORD *v56;
  _QWORD *v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  char *v61;
  char *v62;
  char *v63;
  _QWORD *v64;
  _QWORD *v65;
  uint64_t v66;
  int64x2_t v67;
  char *v68;
  const void *v69;
  const void **v70;
  __int128 *v71;
  __int128 v72;
  const void *v73;
  const void *v74;
  const void **v75;
  const void **v76;
  char *v77;
  CFDictionaryRef v78;
  uint64_t v79;
  const void *v80;
  const void *v81;
  void *__p[2];
  uint64_t v84;
  const void *v85;
  void *v86;
  char *v87;
  char *v88;
  void *v89;
  char *v90;
  char *v91;
  int64x2_t v92;
  _QWORD v93[2];
  void *v94[2];
  uint64_t v95;
  const void *v96;
  const void *v97;
  __int128 __dst;
  uint64_t v99;
  const void *v100;
  const void *v101;
  _BYTE valuePtr[24];
  char *v103;
  _QWORD *v104;

  v2 = a1;
  v92 = 0uLL;
  v93[0] = 0;
  v89 = 0;
  v90 = 0;
  v91 = 0;
  v86 = 0;
  v87 = 0;
  v88 = 0;
  v3 = *(int *)(*(_QWORD *)a2 + 72);
  v4 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  if ((_DWORD)v3)
  {
    v5 = *(uint64_t **)(*(_QWORD *)a2 + 64);
    v6 = &v5[v3];
    v81 = (const void *)*MEMORY[0x1E0C9AE50];
    v80 = (const void *)*MEMORY[0x1E0C9AE40];
    while (1)
    {
      v7 = *v5;
      if ((~*(_DWORD *)(*v5 + 28) & 3) == 0)
        break;
LABEL_116:
      if (++v5 == v6)
      {
        v75 = (const void **)v86;
        v76 = (const void **)v89;
        v77 = v90;
        v2 = a1;
        goto LABEL_144;
      }
    }
    v8 = *(_QWORD *)(v7 + 16);
    if (!v8)
      v8 = *(_QWORD *)(awd::profile::ConfigurationParameter::default_instance_ + 16);
    v9 = *(_DWORD *)(v8 + 72);
    if ((v9 & 4) != 0)
    {
      v10 = *(unsigned int *)(v8 + 20);
      *(_QWORD *)&__dst = 0;
      *(_QWORD *)valuePtr = v10;
      v11 = CFNumberCreate(v4, kCFNumberLongLongType, valuePtr);
      if (v11)
      {
        v12 = __dst;
        *(_QWORD *)&__dst = v11;
        *(_QWORD *)valuePtr = v12;
        sub_1CC5B0660((const void **)valuePtr);
      }
      v13 = (const void *)__dst;
      *(_QWORD *)valuePtr = __dst;
      *(_QWORD *)&__dst = 0;
      sub_1CC5B0660((const void **)&__dst);
      v85 = v13;
      if (!v13)
        goto LABEL_39;
    }
    else if ((v9 & 8) != 0)
    {
      v14 = *(_QWORD *)(v8 + 24);
      *(_QWORD *)&__dst = 0;
      *(_QWORD *)valuePtr = v14;
      v15 = CFNumberCreate(v4, kCFNumberLongLongType, valuePtr);
      if (v15)
      {
        v16 = __dst;
        *(_QWORD *)&__dst = v15;
        *(_QWORD *)valuePtr = v16;
        sub_1CC5B0660((const void **)valuePtr);
      }
      v13 = (const void *)__dst;
      *(_QWORD *)valuePtr = __dst;
      *(_QWORD *)&__dst = 0;
      sub_1CC5B0660((const void **)&__dst);
      v85 = v13;
      if (!v13)
        goto LABEL_39;
    }
    else if ((v9 & 1) != 0)
    {
      v17 = *(_DWORD *)(v8 + 16);
      *(_QWORD *)&__dst = 0;
      *(_DWORD *)valuePtr = v17;
      v18 = CFNumberCreate(v4, kCFNumberIntType, valuePtr);
      if (v18)
      {
        v19 = __dst;
        *(_QWORD *)&__dst = v18;
        *(_QWORD *)valuePtr = v19;
        sub_1CC5B0660((const void **)valuePtr);
      }
      v13 = (const void *)__dst;
      *(_QWORD *)valuePtr = __dst;
      *(_QWORD *)&__dst = 0;
      sub_1CC5B0660((const void **)&__dst);
      v85 = v13;
      if (!v13)
        goto LABEL_39;
    }
    else if ((v9 & 2) != 0)
    {
      v20 = *(_QWORD *)(v8 + 8);
      *(_QWORD *)&__dst = 0;
      *(_QWORD *)valuePtr = v20;
      v21 = CFNumberCreate(v4, kCFNumberLongLongType, valuePtr);
      if (v21)
      {
        v22 = __dst;
        *(_QWORD *)&__dst = v21;
        *(_QWORD *)valuePtr = v22;
        sub_1CC5B0660((const void **)valuePtr);
      }
      v13 = (const void *)__dst;
      *(_QWORD *)valuePtr = __dst;
      *(_QWORD *)&__dst = 0;
      sub_1CC5B0660((const void **)&__dst);
      v85 = v13;
      if (!v13)
        goto LABEL_39;
    }
    else if ((v9 & 0x10) != 0)
    {
      v23 = *(_DWORD *)(v8 + 40);
      *(_QWORD *)&__dst = 0;
      *(_DWORD *)valuePtr = v23;
      v24 = CFNumberCreate(v4, kCFNumberFloatType, valuePtr);
      if (v24)
      {
        v25 = __dst;
        *(_QWORD *)&__dst = v24;
        *(_QWORD *)valuePtr = v25;
        sub_1CC5B0660((const void **)valuePtr);
      }
      v13 = (const void *)__dst;
      *(_QWORD *)valuePtr = __dst;
      *(_QWORD *)&__dst = 0;
      sub_1CC5B0660((const void **)&__dst);
      v85 = v13;
      if (!v13)
        goto LABEL_39;
    }
    else
    {
      if ((v9 & 0x20) == 0)
      {
        if ((v9 & 0x80) != 0)
        {
          if (*(_BYTE *)(v8 + 44))
            v69 = v81;
          else
            v69 = v80;
          *(_QWORD *)valuePtr = 0;
          v70 = sub_1CC5B0690((const void **)valuePtr);
          *(_QWORD *)&__dst = v69;
          *(_QWORD *)valuePtr = 0;
          sub_1CC5B0690(v70);
          v85 = v69;
          if (v69)
            CFRetain(v69);
          sub_1CC5B0690((const void **)&__dst);
        }
        else if ((v9 & 0x40) != 0)
        {
          v71 = *(__int128 **)(v8 + 48);
          if (*((char *)v71 + 23) < 0)
          {
            sub_1CC594AF4(v94, *(void **)v71, *((_QWORD *)v71 + 1));
          }
          else
          {
            v72 = *v71;
            v95 = *((_QWORD *)v71 + 2);
            *(_OWORD *)v94 = v72;
          }
          if (SHIBYTE(v95) < 0)
          {
            sub_1CC594AF4(&__dst, v94[0], (unint64_t)v94[1]);
          }
          else
          {
            __dst = *(_OWORD *)v94;
            v99 = v95;
          }
          v97 = 0;
          if (SHIBYTE(v99) < 0)
          {
            sub_1CC594AF4(valuePtr, (void *)__dst, *((unint64_t *)&__dst + 1));
          }
          else
          {
            *(_OWORD *)valuePtr = __dst;
            *(_QWORD *)&valuePtr[16] = v99;
          }
          v100 = 0;
          if (ctu::cf::convert_copy())
          {
            v73 = v97;
            v97 = v100;
            v101 = v73;
            sub_1CC5B06C0(&v101);
          }
          if ((valuePtr[23] & 0x80000000) != 0)
            operator delete(*(void **)valuePtr);
          v74 = v97;
          v96 = v97;
          v97 = 0;
          sub_1CC5B06C0(&v97);
          if (SHIBYTE(v99) < 0)
            operator delete((void *)__dst);
          v85 = v74;
          if (v74)
            CFRetain(v74);
          sub_1CC5B06C0(&v96);
          if (SHIBYTE(v95) < 0)
            operator delete(v94[0]);
        }
        else
        {
          v85 = 0;
        }
        goto LABEL_40;
      }
      v26 = *(_QWORD *)(v8 + 32);
      *(_QWORD *)&__dst = 0;
      *(_QWORD *)valuePtr = v26;
      v27 = CFNumberCreate(v4, kCFNumberDoubleType, valuePtr);
      if (v27)
      {
        v28 = __dst;
        *(_QWORD *)&__dst = v27;
        *(_QWORD *)valuePtr = v28;
        sub_1CC5B0660((const void **)valuePtr);
      }
      v13 = (const void *)__dst;
      *(_QWORD *)valuePtr = __dst;
      *(_QWORD *)&__dst = 0;
      sub_1CC5B0660((const void **)&__dst);
      v85 = v13;
      if (!v13)
      {
LABEL_39:
        sub_1CC5B0660((const void **)valuePtr);
LABEL_40:
        if (v85)
          v29 = sub_1CC5AC91C;
        else
          v29 = 0;
        if (v29)
        {
          v30 = *(__int128 **)(v7 + 8);
          if (*((char *)v30 + 23) < 0)
          {
            sub_1CC594AF4(__p, *(void **)v30, *((_QWORD *)v30 + 1));
          }
          else
          {
            v31 = *v30;
            v84 = *((_QWORD *)v30 + 2);
            *(_OWORD *)__p = v31;
          }
          if (SHIBYTE(v84) < 0)
          {
            sub_1CC594AF4(&__dst, __p[0], (unint64_t)__p[1]);
          }
          else
          {
            __dst = *(_OWORD *)__p;
            v99 = v84;
          }
          v100 = 0;
          if (SHIBYTE(v99) < 0)
          {
            sub_1CC594AF4(valuePtr, (void *)__dst, *((unint64_t *)&__dst + 1));
          }
          else
          {
            *(_OWORD *)valuePtr = __dst;
            *(_QWORD *)&valuePtr[16] = v99;
          }
          v101 = 0;
          if (ctu::cf::convert_copy())
          {
            v32 = (void *)v100;
            v100 = v101;
            v94[0] = v32;
            sub_1CC5B06C0((const void **)v94);
          }
          if ((valuePtr[23] & 0x80000000) != 0)
            operator delete(*(void **)valuePtr);
          v97 = v100;
          v100 = 0;
          sub_1CC5B06C0(&v100);
          if (SHIBYTE(v99) < 0)
            operator delete((void *)__dst);
          if (SHIBYTE(v84) < 0)
            operator delete(__p[0]);
          v33 = v97;
          if (v97)
            v34 = sub_1CC5AC914;
          else
            v34 = 0;
          if (v34)
          {
            v35 = v90;
            if (v90 >= v91)
            {
              v37 = (v90 - (_BYTE *)v89) >> 3;
              if ((unint64_t)(v37 + 1) >> 61)
                sub_1CC592ABC();
              v38 = (v91 - (_BYTE *)v89) >> 2;
              if (v38 <= v37 + 1)
                v38 = v37 + 1;
              if ((unint64_t)(v91 - (_BYTE *)v89) >= 0x7FFFFFFFFFFFFFF8)
                v39 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v39 = v38;
              if (v39)
                v40 = (char *)sub_1CC598F20((uint64_t)&v91, v39);
              else
                v40 = 0;
              v41 = &v40[8 * v37];
              *(_QWORD *)v41 = v33;
              v36 = v41 + 8;
              v43 = (char *)v89;
              v42 = v90;
              if (v90 != v89)
              {
                do
                {
                  v44 = *((_QWORD *)v42 - 1);
                  v42 -= 8;
                  *((_QWORD *)v41 - 1) = v44;
                  v41 -= 8;
                }
                while (v42 != v43);
                v42 = (char *)v89;
              }
              v89 = v41;
              v90 = v36;
              v91 = &v40[8 * v39];
              if (v42)
                operator delete(v42);
            }
            else
            {
              *(_QWORD *)v90 = v97;
              v36 = v35 + 8;
            }
            v90 = v36;
            v45 = v85;
            v46 = v87;
            if (v87 >= v88)
            {
              v48 = (v87 - (_BYTE *)v86) >> 3;
              if ((unint64_t)(v48 + 1) >> 61)
                sub_1CC592ABC();
              v49 = (v88 - (_BYTE *)v86) >> 2;
              if (v49 <= v48 + 1)
                v49 = v48 + 1;
              if ((unint64_t)(v88 - (_BYTE *)v86) >= 0x7FFFFFFFFFFFFFF8)
                v50 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v50 = v49;
              if (v50)
                v51 = (char *)sub_1CC598F20((uint64_t)&v88, v50);
              else
                v51 = 0;
              v52 = &v51[8 * v48];
              *(_QWORD *)v52 = v45;
              v47 = v52 + 8;
              v54 = (char *)v86;
              v53 = v87;
              if (v87 != v86)
              {
                do
                {
                  v55 = *((_QWORD *)v53 - 1);
                  v53 -= 8;
                  *((_QWORD *)v52 - 1) = v55;
                  v52 -= 8;
                }
                while (v53 != v54);
                v53 = (char *)v86;
              }
              v86 = v52;
              v87 = v47;
              v88 = &v51[8 * v50];
              if (v53)
                operator delete(v53);
            }
            else
            {
              *(_QWORD *)v87 = v85;
              v47 = v46 + 8;
            }
            v87 = v47;
            sub_1CC5AC924(&v92, &v97);
            v56 = (_QWORD *)v92.i64[1];
            if (v92.i64[1] >= v93[0])
            {
              v58 = (v92.i64[1] - v92.i64[0]) >> 3;
              if ((unint64_t)(v58 + 1) >> 61)
                sub_1CC592ABC();
              v59 = (v93[0] - v92.i64[0]) >> 2;
              if (v59 <= v58 + 1)
                v59 = v58 + 1;
              if (v93[0] - v92.i64[0] >= 0x7FFFFFFFFFFFFFF8uLL)
                v60 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v60 = v59;
              v104 = v93;
              if (v60)
                v61 = (char *)sub_1CC598F20((uint64_t)v93, v60);
              else
                v61 = 0;
              v62 = &v61[8 * v58];
              v63 = &v61[8 * v60];
              v103 = v63;
              *(_QWORD *)v62 = 0;
              *(_QWORD *)v62 = v85;
              v57 = v62 + 8;
              v85 = 0;
              *(_QWORD *)&valuePtr[16] = v62 + 8;
              v64 = (_QWORD *)v92.i64[1];
              v65 = (_QWORD *)v92.i64[0];
              if (v92.i64[1] == v92.i64[0])
              {
                v67 = vdupq_n_s64(v92.u64[1]);
              }
              else
              {
                do
                {
                  *((_QWORD *)v62 - 1) = 0;
                  v62 -= 8;
                  v66 = *--v64;
                  *(_QWORD *)v62 = v66;
                  *v64 = 0;
                }
                while (v64 != v65);
                v67 = v92;
                v57 = *(_QWORD **)&valuePtr[16];
                v63 = v103;
              }
              v92.i64[0] = (uint64_t)v62;
              v92.i64[1] = (uint64_t)v57;
              *(int64x2_t *)&valuePtr[8] = v67;
              v68 = (char *)v93[0];
              v93[0] = v63;
              v103 = v68;
              *(_QWORD *)valuePtr = v67.i64[0];
              sub_1CC5B0A8C((uint64_t)valuePtr);
            }
            else
            {
              *(_QWORD *)v92.i64[1] = 0;
              *v56 = v85;
              v57 = v56 + 1;
              v85 = 0;
            }
            v92.i64[1] = (uint64_t)v57;
          }
          sub_1CC5B06C0(&v97);
        }
        sub_1CC5B06F0(&v85);
        goto LABEL_116;
      }
    }
    CFRetain(v13);
    goto LABEL_39;
  }
  v77 = 0;
  v75 = 0;
  v76 = 0;
LABEL_144:
  v78 = CFDictionaryCreate(v4, v76, v75, (v77 - (char *)v76) >> 3, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v79 = *(_QWORD *)(v2 + 400);
  *(_QWORD *)(v2 + 400) = v78;
  *(_QWORD *)valuePtr = v79;
  sub_1CC5B05FC((const void **)valuePtr);
  if (v86)
  {
    v87 = (char *)v86;
    operator delete(v86);
  }
  if (v89)
  {
    v90 = (char *)v89;
    operator delete(v89);
  }
  *(_QWORD *)valuePtr = &v92;
  sub_1CC5B0A1C((void ***)valuePtr);
}

void sub_1CC5AC7BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21,void *a22,uint64_t a23,uint64_t a24,char *a25,char *a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,void *__p,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  uint64_t v37;

  sub_1CC5B06C0((const void **)(v37 - 184));
  if (*(char *)(v37 - 153) < 0)
    operator delete(*(void **)(v37 - 176));
  if (a37 < 0)
    operator delete(__p);
  if (a22)
    operator delete(a22);
  if (a25)
  {
    a26 = a25;
    operator delete(a25);
  }
  a25 = &a28;
  sub_1CC5B0A1C((void ***)&a25);
  _Unwind_Resume(a1);
}

uint64_t sub_1CC5AC914(uint64_t a1)
{
  return *(_QWORD *)a1;
}

uint64_t sub_1CC5AC91C(uint64_t a1)
{
  return *(_QWORD *)a1;
}

uint64_t sub_1CC5AC924(_QWORD *a1, CFTypeRef *a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t result;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  int64x2_t v21;
  char *v22;
  uint64_t v23;
  int64x2_t v24;
  char *v25;
  uint64_t v26;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD *)(v4 - 8);
  if (v7 >= v6)
  {
    v10 = (uint64_t)(v7 - *a1) >> 3;
    if ((unint64_t)(v10 + 1) >> 61)
      sub_1CC592ABC();
    v11 = v5 - *a1;
    v12 = v11 >> 2;
    if (v11 >> 2 <= (unint64_t)(v10 + 1))
      v12 = v10 + 1;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
      v13 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v13 = v12;
    v26 = v4;
    if (v13)
      v14 = (char *)sub_1CC598F20(v4, v13);
    else
      v14 = 0;
    v15 = &v14[8 * v10];
    v16 = &v14[8 * v13];
    v25 = v16;
    v17 = sub_1CC5B062C(v15, *a2);
    v9 = v17 + 1;
    v24.i64[1] = (uint64_t)(v17 + 1);
    v19 = (_QWORD *)*a1;
    v18 = (_QWORD *)a1[1];
    if (v18 == (_QWORD *)*a1)
    {
      v21 = vdupq_n_s64((unint64_t)v18);
    }
    else
    {
      do
      {
        *--v17 = 0;
        v20 = *--v18;
        *v17 = v20;
        *v18 = 0;
      }
      while (v18 != v19);
      v21 = *(int64x2_t *)a1;
      v9 = (_QWORD *)v24.i64[1];
      v16 = v25;
    }
    *a1 = v17;
    a1[1] = v9;
    v24 = v21;
    v22 = (char *)a1[2];
    a1[2] = v16;
    v25 = v22;
    v23 = v21.i64[0];
    result = sub_1CC5B0A8C((uint64_t)&v23);
  }
  else
  {
    result = (uint64_t)sub_1CC5B062C(*(_QWORD **)(v4 - 8), *a2);
    v9 = (_QWORD *)(v7 + 8);
  }
  a1[1] = v9;
  return result;
}

void sub_1CC5ACA44(uint64_t a1, uint64_t a2, char a3)
{
  awd::AWDTriggerFilter *v4;
  const void *v5;
  void *v6;
  NSObject *global_queue;
  void *v8;
  _QWORD block[4];
  void *aBlock;
  void *v11;
  void *v12;
  uint64_t v13;
  void *__p;
  void *v15;
  uint64_t v16;
  char *v17;
  char *v18;
  void *v19;
  _BYTE *v20;

  if (((a3 & 1) != 0 || !*(_BYTE *)(a1 + 4)) && *(_QWORD *)a2 && *(_QWORD *)(*(_QWORD *)a2 + 192))
  {
    v4 = (awd::AWDTriggerFilter *)(a1 + 24);
    awd::AWDTriggerFilter::getAllQueriableMetrics((awd::AWDTriggerFilter *)(a1 + 24), &v19);
    awd::AWDTriggerFilter::getAllTriggers(v4, &v17);
    v5 = *(const void **)(*(_QWORD *)a2 + 192);
    if (v5)
      v6 = _Block_copy(v5);
    else
      v6 = 0;
    global_queue = dispatch_get_global_queue(0, 0);
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 1174405120;
    block[2] = sub_1CC5AD3B0;
    block[3] = &unk_1E886C038;
    if (v6)
      v8 = _Block_copy(v6);
    else
      v8 = 0;
    aBlock = v8;
    v11 = 0;
    v12 = 0;
    v13 = 0;
    sub_1CC5B0AD8(&v11, v19, (uint64_t)v20, (v20 - (_BYTE *)v19) >> 2);
    __p = 0;
    v15 = 0;
    v16 = 0;
    sub_1CC5B0AD8(&__p, v17, (uint64_t)v18, (v18 - v17) >> 2);
    dispatch_async(global_queue, block);
    if (__p)
    {
      v15 = __p;
      operator delete(__p);
    }
    if (v11)
    {
      v12 = v11;
      operator delete(v11);
    }
    if (aBlock)
      _Block_release(aBlock);
    if (v6)
      _Block_release(v6);
    if (v17)
    {
      v18 = v17;
      operator delete(v17);
    }
    if (v19)
    {
      v20 = v19;
      operator delete(v19);
    }
  }
}

void sub_1CC5ACBC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *aBlock, void *__p, uint64_t a16)
{
  const void *v16;
  uint64_t v17;
  void *v19;
  void *v20;

  if (__p)
    operator delete(__p);
  if (aBlock)
    _Block_release(aBlock);
  if (v16)
    _Block_release(v16);
  v19 = *(void **)(v17 - 80);
  if (v19)
  {
    *(_QWORD *)(v17 - 72) = v19;
    operator delete(v19);
  }
  v20 = *(void **)(v17 - 56);
  if (v20)
  {
    *(_QWORD *)(v17 - 48) = v20;
    operator delete(v20);
  }
  _Unwind_Resume(exception_object);
}

const void **sub_1CC5ACC34(const void **result, uint64_t a2)
{
  const void *v3;
  void *v4;
  NSObject *global_queue;
  void *v6;
  _QWORD block[4];
  void *aBlock;
  const void *v9;
  const void *v10;

  if (!*((_BYTE *)result + 4) && *(_QWORD *)a2 && *(_QWORD *)(*(_QWORD *)a2 + 200))
  {
    sub_1CC5B0720(&v10, result + 50);
    v3 = *(const void **)(*(_QWORD *)a2 + 200);
    if (v3)
      v4 = _Block_copy(v3);
    else
      v4 = 0;
    global_queue = dispatch_get_global_queue(0, 0);
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 1174405120;
    block[2] = sub_1CC5AD588;
    block[3] = &unk_1E886C0B8;
    if (v4)
      v6 = _Block_copy(v4);
    else
      v6 = 0;
    aBlock = v6;
    v9 = v10;
    if (v10)
      CFRetain(v10);
    dispatch_async(global_queue, block);
    sub_1CC5B05FC(&v9);
    if (aBlock)
      _Block_release(aBlock);
    if (v4)
      _Block_release(v4);
    return sub_1CC5B05FC(&v10);
  }
  return result;
}

void sub_1CC5ACD58(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD *i;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  uint64_t v10;
  unint64_t *p_shared_owners;
  unint64_t v12;

  v3 = *(_QWORD **)(a1 + 296);
  for (i = *(_QWORD **)(a1 + 304); v3 != i; v3 += 2)
  {
    v7 = (std::__shared_weak_count *)v3[1];
    if (v7)
    {
      v8 = std::__shared_weak_count::lock(v7);
      if (v8)
      {
        v9 = v8;
        if (*v3)
        {
          v10 = *(_QWORD *)(*v3 + 184);
          if (v10)
            (*(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 16))(v10, a2, a3);
        }
        p_shared_owners = (unint64_t *)&v9->__shared_owners_;
        do
          v12 = __ldaxr(p_shared_owners);
        while (__stlxr(v12 - 1, p_shared_owners));
        if (!v12)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
      }
    }
  }
}

void sub_1CC5ACE14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  awd::AWDServerConnection::~AWDServerConnection((awd::AWDServerConnection *)&a9);
  _Unwind_Resume(a1);
}

void sub_1CC5ACE28(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t *v17;
  std::__shared_weak_count *v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  std::__shared_weak_count *v22;
  uint64_t *v23;
  uint64_t *v24;
  std::__shared_weak_count *v25;
  std::__shared_weak_count *v26;
  std::__shared_weak_count *v27;
  uint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  unsigned int **i;
  unint64_t v32;
  unsigned int ***v33;
  unsigned int **v34;
  unsigned int **v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  __n128 v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  __int128 v42;
  const awd::profile::ComponentConfiguration *v43;
  std::__shared_weak_count *v44;
  __n128 *v45;

  *(_BYTE *)(a1 + 4) = 0;
  v4 = *(NSObject **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v4)
  {
    dispatch_group_leave(v4);
    dispatch_release(v4);
  }
  v5 = *(std::__shared_weak_count **)(a2 + 8);
  v43 = *(const awd::profile::ComponentConfiguration **)a2;
  v44 = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  awd::AWDTriggerFilter::setConfiguration(a1 + 24, (uint64_t)&v43);
  v8 = v44;
  if (v44)
  {
    v9 = (unint64_t *)&v44->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  v11 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)&v42 = *(_QWORD *)a2;
  *((_QWORD *)&v42 + 1) = v11;
  if (v11)
  {
    v12 = (unint64_t *)(v11 + 8);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  awd::AWDMetricBuffer::setConfiguration(a1 + 80, &v42);
  v14 = (std::__shared_weak_count *)*((_QWORD *)&v42 + 1);
  if (*((_QWORD *)&v42 + 1))
  {
    v15 = (unint64_t *)(*((_QWORD *)&v42 + 1) + 8);
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  awd::SimpleMetricHelper::setConfiguration((awd::SimpleMetricHelper *)(a1 + 208), *(const awd::profile::ComponentConfiguration **)a2);
  sub_1CC5B07DC(a1 + 320, *(_QWORD **)(a1 + 328));
  *(_QWORD *)(a1 + 328) = 0;
  *(_QWORD *)(a1 + 336) = 0;
  *(_QWORD *)(a1 + 320) = a1 + 328;
  v17 = (uint64_t *)(a1 + 344);
  v40 = 0;
  v41 = 0;
  v18 = *(std::__shared_weak_count **)(a1 + 352);
  if (v18)
  {
    v41 = std::__shared_weak_count::lock(v18);
    if (v41 && (v19 = *v17, (v40 = v19) != 0))
    {
      v21 = *(_QWORD **)(v19 + 16);
      v20 = (_QWORD *)(v19 + 16);
      sub_1CC5B07DC((uint64_t)(v20 - 1), v21);
      *(v20 - 1) = v20;
      *v20 = 0;
      v20[1] = 0;
    }
    else
    {
      v22 = *(std::__shared_weak_count **)(a1 + 352);
      *v17 = 0;
      *(_QWORD *)(a1 + 352) = 0;
      if (v22)
        std::__shared_weak_count::__release_weak(v22);
    }
  }
  else
  {
    *v17 = 0;
    *(_QWORD *)(a1 + 352) = 0;
  }
  sub_1CC5ABEF0(a1, a2);
  v23 = *(uint64_t **)(a1 + 296);
  v24 = *(uint64_t **)(a1 + 304);
  while (v23 != v24)
  {
    v25 = (std::__shared_weak_count *)v23[1];
    if (v25)
    {
      v26 = std::__shared_weak_count::lock(v25);
      v39.n128_u64[1] = (unint64_t)v26;
      if (v26)
      {
        v27 = v26;
        v28 = *v23;
        v39.n128_u64[0] = v28;
        if (v28)
        {
          awd::ServerConnectionInfo::setComponentConfig_sync(v28, (uint64_t *)a2);
          sub_1CC5ACA44(a1, (uint64_t)&v39, 1);
          sub_1CC5ACC34((const void **)a1, (uint64_t)&v39);
        }
        v29 = (unint64_t *)&v27->__shared_owners_;
        do
          v30 = __ldaxr(v29);
        while (__stlxr(v30 - 1, v29));
        if (!v30)
        {
          ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
          std::__shared_weak_count::__release_weak(v27);
        }
      }
    }
    v23 += 2;
  }
  awd::SimpleMetricHelper::takeBufferedMetrics((__n128 *)(a1 + 208), &v39);
  v32 = v39.n128_u64[1];
  for (i = (unsigned int **)v39.n128_u64[0]; i != (unsigned int **)v32; ++i)
    sub_1CC5AD168((unsigned int *)a1, i);
  v33 = *(unsigned int ****)(a1 + 360);
  if (v33)
  {
    v34 = *v33;
    v35 = v33[1];
    while (v34 != v35)
      sub_1CC5AD168((unsigned int *)a1, v34++);
    sub_1CC5B0860((void ***)(a1 + 360), 0);
  }
  v45 = &v39;
  sub_1CC59D564((void ***)&v45);
  v36 = v41;
  if (v41)
  {
    v37 = (unint64_t *)&v41->__shared_owners_;
    do
      v38 = __ldaxr(v37);
    while (__stlxr(v38 - 1, v37));
    if (!v38)
    {
      ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
      std::__shared_weak_count::__release_weak(v36);
    }
  }
}

void sub_1CC5AD108(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  awd::AWDServerConnection::~AWDServerConnection((awd::AWDServerConnection *)va);
  _Unwind_Resume(a1);
}

void sub_1CC5AD168(unsigned int *a1, unsigned int **a2)
{
  uint64_t v4;
  awd::AWDTriggerFilter *v5;
  int shouldSubmitMetricAsTrigger;
  _BOOL4 shouldBufferMetric;
  NSObject *v8;
  uint64_t v9;
  uint64_t v10;
  void *p_p;
  _BOOL8 v12;
  _BOOL4 v13;
  unint64_t AWDTimestamp;
  NSObject *v15;
  int *v16;
  int v17;
  unint64_t v18;
  NSObject *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *__p;
  char v27;
  uint8_t buf[4];
  int v29;
  __int16 v30;
  uint64_t v31;
  __int16 v32;
  void *v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  v4 = **a2;
  v5 = (awd::AWDTriggerFilter *)(a1 + 6);
  shouldSubmitMetricAsTrigger = awd::AWDTriggerFilter::shouldSubmitMetricAsTrigger((awd::AWDTriggerFilter *)(a1 + 6), **a2);
  shouldBufferMetric = awd::AWDMetricBuffer::shouldBufferMetric((NSObject **)a1 + 10, v4);
  if (shouldBufferMetric || shouldSubmitMetricAsTrigger)
  {
    v8 = **((_QWORD **)a1 + 2);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      v9 = *((_QWORD *)*a2 + 2);
      v10 = *((_QWORD *)*a2 + 3);
      ctu::hex();
      p_p = &__p;
      if (v27 < 0)
        p_p = __p;
      *(_DWORD *)buf = 67109634;
      v29 = v4;
      v30 = 2048;
      v31 = v10 - v9;
      v32 = 2080;
      v33 = p_p;
      _os_log_impl(&dword_1CC590000, v8, OS_LOG_TYPE_INFO, "core:#I Got trigger metric 0x%x; Metric: %zd bytes [%s]",
        buf,
        0x1Cu);
      if (v27 < 0)
        operator delete(__p);
    }
    v12 = sub_1CC5ADAE8(a1, *a2);
    v13 = v12;
    if (shouldBufferMetric)
      awd::AWDMetricBuffer::buffer((NSObject **)a1 + 10, (uint64_t)a2);
    if (v13)
    {
      if (shouldSubmitMetricAsTrigger == 1
        || shouldSubmitMetricAsTrigger == 2 && (v12 = awd::AWDTriggerFilter::evaluateRandomSamplingForTrigger(v5, v4)))
      {
        AWDTimestamp = awd::getAWDTimestamp((awd *)v12);
        v15 = **((_QWORD **)a1 + 2);
        if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 67109120;
          v29 = v4;
          _os_log_impl(&dword_1CC590000, v15, OS_LOG_TYPE_INFO, "core:#I Sending a trigger for metric 0x%x", buf, 8u);
        }
        v16 = (int *)*((_QWORD *)a1 + 35);
        v17 = *v16 + 1;
        *v16 = v17;
        v18 = *a1 | (unint64_t)(v4 << 32);
        awd::AWDMetricBuffer::pushTriggerToDaemon((_QWORD *)a1 + 10, v18, v17, AWDTimestamp);
        sub_1CC5ADC30((uint64_t)a1, v18, v17);
      }
      else
      {
        v19 = **((_QWORD **)a1 + 2);
        if (os_log_type_enabled(v19, OS_LOG_TYPE_DEBUG))
          sub_1CC5C331C(v4, v19, v20, v21, v22, v23, v24, v25);
      }
    }
  }
}

void sub_1CC5AD3B0(uint64_t a1)
{
  sub_1CC5AD3C4((uint64_t *)(a1 + 32), a1 + 40, a1 + 64);
}

void sub_1CC5AD3C4(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  void *__p;
  void *v6;
  uint64_t v7;
  void *v8;
  void *v9;
  uint64_t v10;

  v4 = *a1;
  v9 = 0;
  v10 = 0;
  v8 = 0;
  sub_1CC5B0AD8(&v8, *(const void **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2);
  __p = 0;
  v6 = 0;
  v7 = 0;
  sub_1CC5B0AD8(&__p, *(const void **)a3, *(_QWORD *)(a3 + 8), (uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 2);
  (*(void (**)(uint64_t, void **, void **))(v4 + 16))(v4, &v8, &__p);
  if (__p)
  {
    v6 = __p;
    operator delete(__p);
  }
  if (v8)
  {
    v9 = v8;
    operator delete(v8);
  }
}

void sub_1CC5AD45C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  if (a12)
    operator delete(a12);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_1CC5AD490(_QWORD *a1, uint64_t a2)
{
  void *v4;

  v4 = *(void **)(a2 + 32);
  if (v4)
    v4 = _Block_copy(v4);
  a1[5] = 0;
  a1[4] = v4;
  a1[6] = 0;
  a1[7] = 0;
  sub_1CC5B0AD8(a1 + 5, *(const void **)(a2 + 40), *(_QWORD *)(a2 + 48), (uint64_t)(*(_QWORD *)(a2 + 48) - *(_QWORD *)(a2 + 40)) >> 2);
  a1[8] = 0;
  a1[9] = 0;
  a1[10] = 0;
  return sub_1CC5B0AD8(a1 + 8, *(const void **)(a2 + 64), *(_QWORD *)(a2 + 72), (uint64_t)(*(_QWORD *)(a2 + 72) - *(_QWORD *)(a2 + 64)) >> 2);
}

void sub_1CC5AD508(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void *v4;
  const void *v5;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 48) = v4;
    operator delete(v4);
  }
  v5 = *(const void **)(v1 + 32);
  if (v5)
    _Block_release(v5);
  _Unwind_Resume(exception_object);
}

void sub_1CC5AD53C(_QWORD *a1)
{
  void *v2;
  void *v3;
  const void *v4;

  v2 = (void *)a1[8];
  if (v2)
  {
    a1[9] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[5];
  if (v3)
  {
    a1[6] = v3;
    operator delete(v3);
  }
  v4 = (const void *)a1[4];
  if (v4)
    _Block_release(v4);
}

uint64_t sub_1CC5AD588(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

const void **sub_1CC5AD594(uint64_t a1, uint64_t a2)
{
  void *v4;

  v4 = *(void **)(a2 + 32);
  if (v4)
    v4 = _Block_copy(v4);
  *(_QWORD *)(a1 + 32) = v4;
  return sub_1CC5B0720((const void **)(a1 + 40), (const void **)(a2 + 40));
}

void sub_1CC5AD5D0(uint64_t a1)
{
  const void *v2;

  sub_1CC5B05FC((const void **)(a1 + 40));
  v2 = *(const void **)(a1 + 32);
  if (v2)
    _Block_release(v2);
}

void sub_1CC5AD604(unsigned int *a1, wireless_diagnostics::google::protobuf::MessageLite *a2)
{
  unsigned int *v3;
  unsigned int *v4;

  awd::SimpleMetricHelper::makeSimpleMetric((awd::SimpleMetricHelper *)(a1 + 52), a2, (awd::Metric **)&v4);
  if (v4)
  {
    sub_1CC5AD168(a1, &v4);
    v3 = v4;
    v4 = 0;
    if (v3)
      sub_1CC598A08((uint64_t)&v4, (uint64_t)v3);
  }
}

void sub_1CC5AD65C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  uint64_t v11;

  v11 = a10;
  a10 = 0;
  if (v11)
    sub_1CC598A08((uint64_t)&a10, v11);
  _Unwind_Resume(exception_object);
}

void sub_1CC5AD67C(unsigned int *a1, wireless_diagnostics::google::protobuf::MessageLite *a2, char a3)
{
  unsigned int *v4;
  unsigned int *v5;

  awd::SimpleMetricHelper::makeSimpleMetric((awd::SimpleMetricHelper *)(a1 + 52), a2, a3, (awd::Metric **)&v5);
  if (v5)
  {
    sub_1CC5AD168(a1, &v5);
    v4 = v5;
    v5 = 0;
    if (v4)
      sub_1CC598A08((uint64_t)&v5, (uint64_t)v4);
  }
}

void sub_1CC5AD6D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  uint64_t v11;

  v11 = a10;
  a10 = 0;
  if (v11)
    sub_1CC598A08((uint64_t)&a10, v11);
  _Unwind_Resume(exception_object);
}

void sub_1CC5AD6F4(unsigned int *a1, wireless_diagnostics::google::protobuf::MessageLite *a2, uint64_t a3)
{
  unsigned int *v4;
  unsigned int *v5;

  awd::SimpleMetricHelper::makeSimpleMetric((awd::SimpleMetricHelper *)(a1 + 52), a2, a3, (awd::Metric **)&v5);
  if (v5)
  {
    sub_1CC5AD168(a1, &v5);
    v4 = v5;
    v5 = 0;
    if (v4)
      sub_1CC598A08((uint64_t)&v5, (uint64_t)v4);
  }
}

void sub_1CC5AD74C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  uint64_t v11;

  v11 = a10;
  a10 = 0;
  if (v11)
    sub_1CC598A08((uint64_t)&a10, v11);
  _Unwind_Resume(exception_object);
}

void sub_1CC5AD76C(unsigned int *a1, wireless_diagnostics::google::protobuf::MessageLite *a2, uint64_t a3)
{
  unsigned int *v4;
  unsigned int *v5;

  awd::SimpleMetricHelper::makeSimpleMetric((awd::SimpleMetricHelper *)(a1 + 52), a2, a3, (awd::Metric **)&v5);
  if (v5)
  {
    sub_1CC5AD168(a1, &v5);
    v4 = v5;
    v5 = 0;
    if (v4)
      sub_1CC598A08((uint64_t)&v5, (uint64_t)v4);
  }
}

void sub_1CC5AD7C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  uint64_t v11;

  v11 = a10;
  a10 = 0;
  if (v11)
    sub_1CC598A08((uint64_t)&a10, v11);
  _Unwind_Resume(exception_object);
}

void sub_1CC5AD7E4(unsigned int *a1, wireless_diagnostics::google::protobuf::MessageLite *a2, uint64_t a3)
{
  unsigned int *v6;
  unsigned int *v7;
  void *__p[2];
  uint64_t v9;

  if (*(char *)(a3 + 23) < 0)
  {
    sub_1CC594AF4(__p, *(void **)a3, *(_QWORD *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)a3;
    v9 = *(_QWORD *)(a3 + 16);
  }
  awd::SimpleMetricHelper::makeSimpleMetric((awd::SimpleMetricHelper *)(a1 + 52), a2, (const std::string *)a3, (awd::Metric **)&v7);
  if (v7)
  {
    sub_1CC5AD168(a1, &v7);
    v6 = v7;
    v7 = 0;
    if (v6)
      sub_1CC598A08((uint64_t)&v7, (uint64_t)v6);
  }
  if (SHIBYTE(v9) < 0)
    operator delete(__p[0]);
}

void sub_1CC5AD88C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  uint64_t v17;

  v17 = a10;
  a10 = 0;
  if (v17)
    sub_1CC598A08((uint64_t)&a10, v17);
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1CC5AD8C4(uint64_t a1, unsigned int **a2)
{
  uint64_t **v4;
  uint64_t *v5;
  uint64_t v6;
  unint64_t v7;
  unsigned int **v8;
  unsigned int *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  unsigned int **v16;
  unsigned int *v17;
  NSObject *v18;
  uint64_t v19;
  __int128 v20;
  _QWORD *v21;
  char *v22;
  uint64_t *v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  if (*(_BYTE *)(a1 + 4))
  {
    v4 = (uint64_t **)(a1 + 360);
    v5 = *(uint64_t **)(a1 + 360);
    if (!v5)
    {
      v6 = operator new();
      *(_QWORD *)(v6 + 8) = 0;
      *(_QWORD *)(v6 + 16) = 0;
      *(_QWORD *)v6 = 0;
      *(_QWORD *)&v20 = 0;
      sub_1CC5B0860((void ***)(a1 + 360), (void **)v6);
      sub_1CC5B0860((void ***)&v20, 0);
      v5 = *v4;
    }
    v7 = v5[2];
    v8 = (unsigned int **)v5[1];
    if ((unint64_t)v8 >= v7)
    {
      v11 = ((uint64_t)v8 - *v5) >> 3;
      if ((unint64_t)(v11 + 1) >> 61)
        sub_1CC592ABC();
      v12 = v7 - *v5;
      v13 = v12 >> 2;
      if (v12 >> 2 <= (unint64_t)(v11 + 1))
        v13 = v11 + 1;
      if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
        v14 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v14 = v13;
      v23 = v5 + 2;
      if (v14)
        v15 = (char *)sub_1CC598F20((uint64_t)(v5 + 2), v14);
      else
        v15 = 0;
      v16 = (unsigned int **)&v15[8 * v11];
      *(_QWORD *)&v20 = v15;
      *((_QWORD *)&v20 + 1) = v16;
      v22 = &v15[8 * v14];
      v17 = *a2;
      *a2 = 0;
      *v16 = v17;
      v21 = v16 + 1;
      sub_1CC59F5AC(v5, &v20);
      v10 = (_QWORD *)v5[1];
      sub_1CC59DB1C((uint64_t)&v20);
    }
    else
    {
      v9 = *a2;
      *a2 = 0;
      *v8 = v9;
      v10 = v8 + 1;
      v5[1] = (uint64_t)v10;
    }
    v5[1] = (uint64_t)v10;
    v18 = **(NSObject ***)(a1 + 16);
    if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
    {
      v19 = ((*v4)[1] - **v4) >> 3;
      LODWORD(v20) = 134217984;
      *(_QWORD *)((char *)&v20 + 4) = v19;
      _os_log_impl(&dword_1CC590000, v18, OS_LOG_TYPE_INFO, "core:#I Configuration not ready yet; buffering a metric until we get it (%zd total buffered)",
        (uint8_t *)&v20,
        0xCu);
    }
  }
  else
  {
    sub_1CC5AD168((unsigned int *)a1, a2);
  }
}

void sub_1CC5ADACC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1CC59DB1C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

BOOL sub_1CC5ADAE8(unsigned int *a1, unsigned int *a2)
{
  unint64_t v2;
  int v5;
  int *v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int *v18;
  int *v19;
  _BYTE v20[4];
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  sub_1CC5ADE6C((uint64_t)a1, *a2, (uint64_t)v20);
  v5 = v20[0];
  if (v20[0])
  {
    awd::AWDTriggerFilter::profileIdForTriggerId((awd::AWDTriggerFilter *)(a1 + 6), HIDWORD(v21), (uint64_t)&v18);
    v6 = v18;
    v7 = v19;
    if (v18 != v19)
    {
      v8 = v21;
      v9 = v22;
      do
      {
        v2 = v2 & 0xFFFFFFFF00000000 | v9;
        awd::AWDMetricBuffer::pushMetricToDaemon((uint64_t)(a1 + 20), v8, v2, *v6++, *a1, (uint64_t)a2);
      }
      while (v6 != v7);
      v6 = v18;
    }
    if (v6)
    {
      v19 = v6;
      operator delete(v6);
    }
  }
  else
  {
    v10 = **((_QWORD **)a1 + 2);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
      sub_1CC5C3380((uint64_t)a2, v10, v11, v12, v13, v14, v15, v16);
  }
  return v5 == 0;
}

void sub_1CC5ADC0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  _Unwind_Resume(exception_object);
}

void sub_1CC5ADC30(uint64_t a1, unint64_t a2, unsigned int a3)
{
  unint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  NSObject *v9;
  uint64_t *v10;
  uint64_t *i;
  std::__shared_weak_count *v12;
  std::__shared_weak_count *v13;
  std::__shared_weak_count *v14;
  uint64_t v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  void *__p;
  _BYTE *v19;
  dispatch_object_t object;
  _BYTE buf[18];
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  object = dispatch_group_create();
  awd::AWDMetricBuffer::trigger((NSObject **)(a1 + 80), a2, a3, (uint64_t)&object);
  v6 = HIDWORD(a2);
  awd::AWDTriggerFilter::getQueriableMetricsForTrigger((awd::AWDTriggerFilter *)(a1 + 24), HIDWORD(a2), (uint64_t)&__p);
  v7 = __p;
  v8 = v19;
  v9 = **(NSObject ***)(a1 + 16);
  if (__p == v19)
  {
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
      sub_1CC5C33E8(SHIDWORD(a2), v9);
  }
  else if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 134218240;
    *(_QWORD *)&buf[4] = (v8 - v7) >> 2;
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = HIDWORD(a2);
    _os_log_impl(&dword_1CC590000, v9, OS_LOG_TYPE_INFO, "core:#I setExpectedMetricsForTrigger found %zd queriable metrics for trigger 0x%x", buf, 0x12u);
  }
  v10 = *(uint64_t **)(a1 + 296);
  for (i = *(uint64_t **)(a1 + 304); v10 != i; v10 += 2)
  {
    v12 = (std::__shared_weak_count *)v10[1];
    if (v12)
    {
      v13 = std::__shared_weak_count::lock(v12);
      *(_QWORD *)&buf[8] = v13;
      if (v13)
      {
        v14 = v13;
        v15 = *v10;
        *(_QWORD *)buf = v15;
        if (v15)
        {
          v6 = v6 & 0xFFFFFFFF00000000 | a3;
          sub_1CC5ADF48(a1, v15, a2, v6, &object, (unsigned int **)&__p);
        }
        p_shared_owners = (unint64_t *)&v14->__shared_owners_;
        do
          v17 = __ldaxr(p_shared_owners);
        while (__stlxr(v17 - 1, p_shared_owners));
        if (!v17)
        {
          ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
          std::__shared_weak_count::__release_weak(v14);
        }
      }
    }
  }
  awd::AWDMetricBuffer::finishSubmissionToDaemon(a1 + 80, a2, a3, *(_DWORD *)a1, &object);
  if (__p)
  {
    v19 = __p;
    operator delete(__p);
  }
  if (object)
    dispatch_release(object);
}

void sub_1CC5ADE20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, dispatch_object_t object, char a13)
{
  _Unwind_Resume(exception_object);
}

void sub_1CC5ADE6C(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  BOOL v8;
  uint64_t *v9;
  NSObject *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  int v18;
  uint64_t v19;

  v5 = *(_QWORD *)(a1 + 328);
  if (!v5)
    goto LABEL_12;
  v6 = a1 + 328;
  do
  {
    v7 = *(_DWORD *)(v5 + 32);
    v8 = v7 >= a2;
    if (v7 >= a2)
      v9 = (uint64_t *)v5;
    else
      v9 = (uint64_t *)(v5 + 8);
    if (v8)
      v6 = v5;
    v5 = *v9;
  }
  while (*v9);
  if (v6 != a1 + 328 && *(_DWORD *)(v6 + 32) <= a2)
  {
    v18 = *(_DWORD *)(v6 + 48);
    v19 = *(_QWORD *)(v6 + 40);
    sub_1CC5B0CB0((uint64_t **)(a1 + 320), (uint64_t *)v6);
    sub_1CC5B0824(v6 + 32);
    operator delete((void *)v6);
    *(_QWORD *)(a3 + 4) = v19;
    *(_DWORD *)(a3 + 12) = v18;
    v17 = 1;
  }
  else
  {
LABEL_12:
    v10 = **(NSObject ***)(a1 + 16);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
      sub_1CC5C3468(a2, v10, v11, v12, v13, v14, v15, v16);
    v17 = 0;
  }
  *(_BYTE *)a3 = v17;
}

void sub_1CC5ADF48(uint64_t a1, uint64_t a2, unint64_t a3, unsigned int a4, NSObject **a5, unsigned int **a6)
{
  NSObject *v10;
  NSObject *v11;
  void *__p[3];

  awd::ServerConnectionInfo::trigger_sync(a2, a3, a4, a6, (char **)__p);
  v10 = *a5;
  v11 = v10;
  if (v10)
    dispatch_retain(v10);
  sub_1CC5AE138(a1, a3, a4, &v11, (int **)__p);
  if (v10)
    dispatch_release(v10);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void sub_1CC5ADFE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  NSObject *v10;

  if (v10)
    dispatch_release(v10);
  sub_1CC5C34CC((uint64_t)&a10);
  _Unwind_Resume(a1);
}

void sub_1CC5AE000(uint64_t a1, unint64_t a2, unsigned int a3)
{
  unint64_t v6;
  int isMetricSetAsTrigger;
  os_log_t *v8;
  NSObject *v9;
  int v10;
  int v11;
  __int16 v12;
  int v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v6 = HIDWORD(a2);
  isMetricSetAsTrigger = awd::AWDTriggerFilter::isMetricSetAsTrigger((awd::AWDTriggerFilter *)(a1 + 24), HIDWORD(a2));
  v8 = *(os_log_t **)(a1 + 16);
  v9 = *v8;
  if (isMetricSetAsTrigger)
  {
    if (os_log_type_enabled(*v8, OS_LOG_TYPE_INFO))
    {
      v10 = 67109376;
      v11 = v6;
      v12 = 1024;
      v13 = a2;
      _os_log_impl(&dword_1CC590000, v9, OS_LOG_TYPE_INFO, "core:#I Got expected trigger 0x%x from component 0x%x", (uint8_t *)&v10, 0xEu);
    }
    sub_1CC5ADC30(a1, a2, a3);
  }
  else if (os_log_type_enabled(*v8, OS_LOG_TYPE_DEFAULT))
  {
    v10 = 67109376;
    v11 = v6;
    v12 = 1024;
    v13 = a2;
    _os_log_impl(&dword_1CC590000, v9, OS_LOG_TYPE_DEFAULT, "core:#E Got Unexpected trigger 0x%x from component 0x%x", (uint8_t *)&v10, 0xEu);
  }
}

void sub_1CC5AE138(uint64_t a1, uint64_t a2, int a3, NSObject **a4, int **a5)
{
  int *v10;
  int *v11;
  NSObject *v12;
  std::__shared_weak_count *v13;
  std::__shared_weak_count *v14;
  std::__shared_weak_count *v15;
  uint64_t v16;
  int *v17;
  int *v18;
  uint64_t **v19;
  NSObject *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  int v23;
  uint64_t v24;
  std::__shared_weak_count *v25;
  uint64_t v26;
  int v27;
  dispatch_object_t object;

  v10 = *a5;
  v11 = a5[1];
  if (*a5 != v11)
  {
    do
    {
      LODWORD(v24) = *v10;
      v26 = a2;
      v27 = a3;
      v12 = *a4;
      object = v12;
      if (v12)
        dispatch_retain(v12);
      sub_1CC5B0B50((uint64_t **)(a1 + 320), &v24, (uint64_t)&v26);
      if (object)
        dispatch_release(object);
      ++v10;
    }
    while (v10 != v11);
  }
  v13 = *(std::__shared_weak_count **)(a1 + 352);
  if (v13)
  {
    v14 = std::__shared_weak_count::lock(v13);
    v25 = v14;
    if (v14)
    {
      v15 = v14;
      v16 = *(_QWORD *)(a1 + 344);
      v24 = v16;
      if (!v16)
        goto LABEL_18;
      v17 = *a5;
      v18 = a5[1];
      if (*a5 == v18)
        goto LABEL_18;
      v19 = (uint64_t **)(v16 + 8);
      do
      {
        v23 = *v17;
        v26 = a2;
        v27 = a3;
        v20 = *a4;
        object = v20;
        if (v20)
          dispatch_retain(v20);
        sub_1CC5B0B50(v19, &v23, (uint64_t)&v26);
        if (object)
          dispatch_release(object);
        ++v17;
      }
      while (v17 != v18);
      v15 = v25;
      if (v25)
      {
LABEL_18:
        p_shared_owners = (unint64_t *)&v15->__shared_owners_;
        do
          v22 = __ldaxr(p_shared_owners);
        while (__stlxr(v22 - 1, p_shared_owners));
        if (!v22)
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
        }
      }
    }
  }
}

void sub_1CC5AE290(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, dispatch_object_t object)
{
  if (object)
    dispatch_release(object);
  awd::AWDServerConnection::~AWDServerConnection((awd::AWDServerConnection *)&a10);
  _Unwind_Resume(a1);
}

void sub_1CC5AE2C4(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t i;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  awd::ServerConnectionInfo *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;

  v2 = *(_QWORD *)(a1 + 296);
  for (i = *(_QWORD *)(a1 + 304); v2 != i; v2 += 16)
  {
    v5 = *(std::__shared_weak_count **)(v2 + 8);
    if (v5)
    {
      v6 = std::__shared_weak_count::lock(v5);
      if (v6)
      {
        v7 = v6;
        v8 = *(awd::ServerConnectionInfo **)v2;
        if (a2 == 1 && v8)
          awd::ServerConnectionInfo::handleNotificationTimer24h_sync(v8);
        p_shared_owners = (unint64_t *)&v7->__shared_owners_;
        do
          v10 = __ldaxr(p_shared_owners);
        while (__stlxr(v10 - 1, p_shared_owners));
        if (!v10)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
      }
    }
  }
}

void sub_1CC5AE368(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  awd::AWDServerConnection::~AWDServerConnection((awd::AWDServerConnection *)&a9);
  _Unwind_Resume(a1);
}

uint64_t *sub_1CC5AE37C(uint64_t *result, uint64_t a2)
{
  uint64_t v2;

  v2 = *result;
  *result = a2;
  if (v2)
  {
    sub_1CC5B10A4(v2 + 16, *(_QWORD **)(v2 + 24));
    JUMPOUT(0x1D17AD544);
  }
  return result;
}

void sub_1CC5AE3CC(uint64_t *a1@<X8>)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  __int128 v9;

  std::mutex::lock((std::mutex *)&qword_1ECD3F218);
  v2 = qword_1ECD3F1B8;
  if (!qword_1ECD3F1B8)
  {
    sub_1CC5AE4AC(&v9);
    sub_1CC5A40BC((uint64_t)&qword_1ECD3F1B8, &v9);
    v3 = (std::__shared_weak_count *)*((_QWORD *)&v9 + 1);
    if (*((_QWORD *)&v9 + 1))
    {
      v4 = (unint64_t *)(*((_QWORD *)&v9 + 1) + 8);
      do
        v5 = __ldaxr(v4);
      while (__stlxr(v5 - 1, v4));
      if (!v5)
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
    }
    v2 = qword_1ECD3F1B8;
  }
  v6 = qword_1ECD3F1C0;
  *a1 = v2;
  a1[1] = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  std::mutex::unlock((std::mutex *)&qword_1ECD3F218);
}

void sub_1CC5AE494(_Unwind_Exception *a1)
{
  std::mutex::unlock((std::mutex *)&qword_1ECD3F218);
  _Unwind_Resume(a1);
}

void sub_1CC5AE4AC(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  _QWORD *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  _QWORD v10[5];
  std::__shared_weak_count *v11;

  v2 = (_QWORD *)operator new();
  sub_1CC5AF3A0((uint64_t)v2);
  sub_1CC5B10F4(a1, v2);
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 1174405120;
  v10[2] = sub_1CC5AE604;
  v10[3] = &unk_1E886C1C0;
  v3 = (_QWORD *)*a1;
  v4 = (std::__shared_weak_count *)a1[1];
  v10[4] = *a1;
  v11 = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  sub_1CC5B1234(v3, (uint64_t)v10);
  v7 = v11;
  if (v11)
  {
    v8 = (unint64_t *)&v11->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

void sub_1CC5AE588(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1D17AD544](v1, 0x1030C4088B9B922);
  _Unwind_Resume(a1);
}

void sub_1CC5AE5AC(_QWORD *a1@<X8>)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  std::mutex::lock((std::mutex *)&qword_1ECD3F218);
  v2 = qword_1ECD3F1C0;
  *a1 = qword_1ECD3F1B8;
  a1[1] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  std::mutex::unlock((std::mutex *)&qword_1ECD3F218);
}

void sub_1CC5AE604(uint64_t a1)
{
  sub_1CC5AE60C(*(_QWORD **)(a1 + 32));
}

void sub_1CC5AE60C(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_weak_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  __int128 v13;

  sub_1CC5AF540(a1);
  sub_1CC5AF5A8(a1);
  v2 = (std::__shared_weak_count *)a1[12];
  v11 = a1[11];
  v12 = v2;
  if (v2)
  {
    p_shared_weak_owners = (unint64_t *)&v2->__shared_weak_owners_;
    do
      v4 = __ldxr(p_shared_weak_owners);
    while (__stxr(v4 + 1, p_shared_weak_owners));
  }
  awd::AWDMetricSubmitter::create((uint64_t)&v11, &v13);
  sub_1CC5A40BC((uint64_t)(a1 + 9), &v13);
  v5 = (std::__shared_weak_count *)*((_QWORD *)&v13 + 1);
  if (*((_QWORD *)&v13 + 1))
  {
    v6 = (unint64_t *)(*((_QWORD *)&v13 + 1) + 8);
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  if (v12)
    std::__shared_weak_count::__release_weak(v12);
  sCreateLazyAwdMetadataLoaderForXpcConversion();
  sub_1CC5A40BC((uint64_t)(a1 + 16), &v13);
  v8 = (std::__shared_weak_count *)*((_QWORD *)&v13 + 1);
  if (*((_QWORD *)&v13 + 1))
  {
    v9 = (unint64_t *)(*((_QWORD *)&v13 + 1) + 8);
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_1CC5AE704(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10)
    std::__shared_weak_count::__release_weak(a10);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1CC5AE71C(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(result + 40) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void sub_1CC5AE740(uint64_t a1)
{
  awd::AWDServerConnection::~AWDServerConnection((awd::AWDServerConnection *)(a1 + 32));
}

_DWORD *sub_1CC5AE748(uint64_t a1, unsigned int a2)
{
  uint64_t v3;
  uint64_t v4;
  int64x2_t *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  uint64_t *v16;
  char *v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  int64x2_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;
  unsigned int v28;
  uint64_t v29;
  int64x2_t v30;
  char *v31;
  uint64_t v32;

  v28 = a2;
  v3 = *(_QWORD *)(a1 + 104);
  v4 = *(_QWORD *)(a1 + 112);
  v5 = (int64x2_t *)(a1 + 104);
  if (v3 != v4)
  {
    while (**(_DWORD **)v3 != a2)
    {
      v3 += 8;
      if (v3 == v4)
        goto LABEL_7;
    }
  }
  if (v3 != v4)
    return *(_DWORD **)v3;
LABEL_7:
  v29 = a1 + 32;
  sub_1CC5AE930(&v29, a1 + 16, &v28, (_QWORD *)(a1 + 40), (uint64_t *)(a1 + 88), (uint64_t *)(a1 + 72), (uint64_t *)(a1 + 128), &v27);
  v7 = *(_QWORD *)(a1 + 120);
  v8 = *(uint64_t **)(a1 + 112);
  if ((unint64_t)v8 >= v7)
  {
    v11 = ((uint64_t)v8 - v5->i64[0]) >> 3;
    if ((unint64_t)(v11 + 1) >> 61)
      sub_1CC592ABC();
    v12 = v7 - v5->i64[0];
    v13 = v12 >> 2;
    if (v12 >> 2 <= (unint64_t)(v11 + 1))
      v13 = v11 + 1;
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
      v14 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v14 = v13;
    v32 = a1 + 120;
    if (v14)
      v15 = (char *)sub_1CC598F20(a1 + 120, v14);
    else
      v15 = 0;
    v16 = (uint64_t *)&v15[8 * v11];
    v17 = &v15[8 * v14];
    v31 = v17;
    v18 = v27;
    v27 = 0;
    *v16 = v18;
    v10 = v16 + 1;
    v30.i64[1] = (uint64_t)(v16 + 1);
    v20 = *(_QWORD **)(a1 + 104);
    v19 = *(_QWORD **)(a1 + 112);
    if (v19 == v20)
    {
      v22 = vdupq_n_s64((unint64_t)v19);
    }
    else
    {
      do
      {
        v21 = *--v19;
        *v19 = 0;
        *--v16 = v21;
      }
      while (v19 != v20);
      v22 = *v5;
      v10 = (_QWORD *)v30.i64[1];
      v17 = v31;
    }
    *(_QWORD *)(a1 + 104) = v16;
    *(_QWORD *)(a1 + 112) = v10;
    v30 = v22;
    v23 = *(char **)(a1 + 120);
    *(_QWORD *)(a1 + 120) = v17;
    v31 = v23;
    v29 = v22.i64[0];
    sub_1CC5B14AC((uint64_t)&v29);
  }
  else
  {
    v9 = v27;
    v27 = 0;
    *v8 = v9;
    v10 = v8 + 1;
  }
  *(_QWORD *)(a1 + 112) = v10;
  awd::AWDServerFacade::registerAs(*(awd::AWDServerFacade **)(a1 + 88), *(_DWORD *)(a1 + 56), v28, 1);
  v6 = *(_QWORD *)(*(_QWORD *)(a1 + 112) - 8);
  v24 = v27;
  v27 = 0;
  if (v24)
  {
    v25 = sub_1CC5B13AC(v24);
    MEMORY[0x1D17AD544](v25, 0x10F0C40B57F0170);
  }
  return (_DWORD *)v6;
}

void sub_1CC5AE918(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1CC5B1370((uint64_t *)va, 0);
  _Unwind_Resume(a1);
}

void sub_1CC5AE930(uint64_t *a1@<X0>, uint64_t a2@<X1>, unsigned int *a3@<X2>, _QWORD *a4@<X3>, uint64_t *a5@<X4>, uint64_t *a6@<X5>, uint64_t *a7@<X6>, uint64_t *a8@<X8>)
{
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *p_shared_weak_owners;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *p_shared_owners;
  unint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  _QWORD v32[2];
  uint64_t v33;
  std::__shared_weak_count *v34;
  uint64_t v35;
  std::__shared_weak_count *v36;

  v16 = operator new();
  v17 = v16;
  v18 = *a1;
  v19 = *a3;
  v20 = (std::__shared_weak_count *)a5[1];
  v35 = *a5;
  v36 = v20;
  if (v20)
  {
    p_shared_weak_owners = (unint64_t *)&v20->__shared_weak_owners_;
    do
      v22 = __ldxr(p_shared_weak_owners);
    while (__stxr(v22 + 1, p_shared_weak_owners));
  }
  v23 = (std::__shared_weak_count *)a6[1];
  v33 = *a6;
  v34 = v23;
  if (v23)
  {
    v24 = (unint64_t *)&v23->__shared_weak_owners_;
    do
      v25 = __ldxr(v24);
    while (__stxr(v25 + 1, v24));
  }
  v26 = *a7;
  v27 = (std::__shared_weak_count *)a7[1];
  v32[0] = v26;
  v32[1] = v27;
  if (v27)
  {
    p_shared_owners = (unint64_t *)&v27->__shared_owners_;
    do
      v29 = __ldxr(p_shared_owners);
    while (__stxr(v29 + 1, p_shared_owners));
  }
  sub_1CC5AB9E4(v16, v18, a2, v19, a4, &v35, (uint64_t)&v33, v32);
  *a8 = v17;
  if (v27)
  {
    v30 = (unint64_t *)&v27->__shared_owners_;
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  if (v34)
    std::__shared_weak_count::__release_weak(v34);
  if (v36)
    std::__shared_weak_count::__release_weak(v36);
}

void sub_1CC5AEA80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12, uint64_t a13, std::__shared_weak_count *a14)
{
  uint64_t v14;

  awd::AWDServerConnection::~AWDServerConnection((awd::AWDServerConnection *)&a9);
  if (a12)
    std::__shared_weak_count::__release_weak(a12);
  if (a14)
    std::__shared_weak_count::__release_weak(a14);
  MEMORY[0x1D17AD544](v14, 0x10F0C40B57F0170);
  _Unwind_Resume(a1);
}

void sub_1CC5AEAC4(uint64_t a1, int a2)
{
  int v2;
  NSObject *v5;
  uint64_t *v6;
  uint64_t *i;
  uint64_t v8;
  _DWORD v9[2];
  __int16 v10;
  int v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v2 = *(_DWORD *)(a1 + 56);
  if (v2 != a2)
  {
    v5 = *(NSObject **)(a1 + 32);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
      v9[0] = 67109376;
      v9[1] = v2;
      v10 = 1024;
      v11 = a2;
      _os_log_impl(&dword_1CC590000, v5, OS_LOG_TYPE_INFO, "core:#I DeviceConfigurationId changing from %d to %d; marking clients as needing config",
        (uint8_t *)v9,
        0xEu);
    }
    *(_DWORD *)(a1 + 56) = a2;
    v6 = *(uint64_t **)(a1 + 104);
    for (i = *(uint64_t **)(a1 + 112); v6 != i; *(_BYTE *)(v8 + 4) = 1)
      v8 = *v6++;
  }
}

void sub_1CC5AEBA4(_QWORD *a1, int a2, int a3, uint64_t *a4)
{
  uint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  NSObject *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  _QWORD *v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  uint64_t v23;
  uint64_t v24;

  v8 = *a4;
  v7 = a4[1];
  if (v7)
  {
    v9 = (unint64_t *)(v7 + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  sub_1CC59C014(&v21, a1);
  v11 = operator new();
  *(_QWORD *)v11 = a1;
  *(_DWORD *)(v11 + 8) = a2;
  *(_DWORD *)(v11 + 12) = a3;
  *(_QWORD *)(v11 + 16) = v8;
  *(_QWORD *)(v11 + 24) = v7;
  v12 = a1[2];
  v13 = v21;
  v14 = v22;
  if (v22)
  {
    p_shared_owners = (unint64_t *)&v22->__shared_owners_;
    do
      v16 = __ldxr(p_shared_owners);
    while (__stxr(v16 + 1, p_shared_owners));
  }
  v17 = (_QWORD *)operator new();
  *v17 = v11;
  v17[1] = v13;
  v17[2] = v14;
  v23 = 0;
  v24 = 0;
  dispatch_async_f(v12, v17, (dispatch_function_t)sub_1CC5B14FC);
  sub_1CC59C45C(&v23);
  sub_1CC59C45C(&v24);
  v18 = v22;
  if (v22)
  {
    v19 = (unint64_t *)&v22->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
}

void sub_1CC5AECD8(_QWORD *a1, int a2, unint64_t a3, unsigned int a4)
{
  _DWORD **v6;
  _DWORD **v7;
  _DWORD *v8;
  NSObject *v9;
  _DWORD v10[2];
  __int16 v11;
  int v12;
  __int16 v13;
  unsigned int v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v6 = (_DWORD **)a1[13];
  v7 = (_DWORD **)a1[14];
  if (v6 != v7)
  {
    while (**v6 != a2)
    {
      if (++v6 == v7)
        goto LABEL_8;
    }
  }
  if (v6 == v7 || (v8 = *v6) == 0)
  {
LABEL_8:
    v9 = a1[4];
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      v10[0] = 67109632;
      v10[1] = a3;
      v11 = 1024;
      v12 = HIDWORD(a3);
      v13 = 1024;
      v14 = a4;
      _os_log_impl(&dword_1CC590000, v9, OS_LOG_TYPE_DEFAULT, "core:#E Got Unexpected Trigger(cid=0x%x, trid=0x%x, sid=%u) (no component config!)", (uint8_t *)v10, 0x14u);
    }
  }
  else
  {
    sub_1CC5AE000((uint64_t)v8, a3, a4);
  }
}

void sub_1CC5AEE08(_QWORD *a1, int a2, uint64_t a3, int a4)
{
  uint64_t v8;
  NSObject *v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  _QWORD *v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  uint64_t v20;
  uint64_t v21;

  sub_1CC59C014(&v18, a1);
  v8 = operator new();
  *(_QWORD *)v8 = a1;
  *(_DWORD *)(v8 + 8) = a2;
  *(_QWORD *)(v8 + 12) = a3;
  *(_DWORD *)(v8 + 20) = a4;
  v9 = a1[2];
  v10 = v18;
  v11 = v19;
  if (v19)
  {
    p_shared_owners = (unint64_t *)&v19->__shared_owners_;
    do
      v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
  }
  v14 = (_QWORD *)operator new();
  *v14 = v8;
  v14[1] = v10;
  v14[2] = v11;
  v20 = 0;
  v21 = 0;
  dispatch_async_f(v9, v14, (dispatch_function_t)sub_1CC5B15F4);
  sub_1CC59C45C(&v20);
  sub_1CC59C45C(&v21);
  v15 = v19;
  if (v19)
  {
    v16 = (unint64_t *)&v19->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
}

void sub_1CC5AEF28(_QWORD *a1)
{
  _QWORD *v2;
  NSObject *v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  _QWORD *v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  uint64_t v15;

  sub_1CC59C014(&v12, a1);
  v2 = (_QWORD *)operator new();
  *v2 = a1;
  v3 = a1[2];
  v4 = v12;
  v5 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  v8 = (_QWORD *)operator new();
  *v8 = v2;
  v8[1] = v4;
  v8[2] = v5;
  v14 = 0;
  v15 = 0;
  dispatch_async_f(v3, v8, (dispatch_function_t)sub_1CC5B167C);
  sub_1CC59C45C(&v14);
  sub_1CC59C45C(&v15);
  v9 = v13;
  if (v13)
  {
    v10 = (unint64_t *)&v13->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
}

void sub_1CC5AF028(_QWORD *a1, int a2, char a3, char a4, char a5)
{
  uint64_t v10;
  NSObject *v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  _QWORD *v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  uint64_t v22;
  uint64_t v23;

  sub_1CC59C014(&v20, a1);
  v10 = operator new();
  *(_QWORD *)v10 = a1;
  *(_DWORD *)(v10 + 8) = a2;
  *(_BYTE *)(v10 + 12) = a3;
  *(_BYTE *)(v10 + 13) = a4;
  *(_BYTE *)(v10 + 14) = a5;
  v11 = a1[2];
  v12 = v20;
  v13 = v21;
  if (v21)
  {
    p_shared_owners = (unint64_t *)&v21->__shared_owners_;
    do
      v15 = __ldxr(p_shared_owners);
    while (__stxr(v15 + 1, p_shared_owners));
  }
  v16 = (_QWORD *)operator new();
  *v16 = v10;
  v16[1] = v12;
  v16[2] = v13;
  v22 = 0;
  v23 = 0;
  dispatch_async_f(v11, v16, (dispatch_function_t)sub_1CC5B18E4);
  sub_1CC59C45C(&v22);
  sub_1CC59C45C(&v23);
  v17 = v21;
  if (v21)
  {
    v18 = (unint64_t *)&v21->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
}

void sub_1CC5AF150(_QWORD *a1, xpc_object_t *a2, int a3)
{
  xpc_object_t v5;
  uint64_t v6;
  xpc_object_t v7;
  NSObject *v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  _QWORD *v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  uint64_t v19;
  uint64_t v20;

  v5 = *a2;
  if (*a2)
    xpc_retain(*a2);
  else
    v5 = xpc_null_create();
  sub_1CC59C014(&v17, a1);
  v6 = operator new();
  *(_QWORD *)v6 = a1;
  *(_QWORD *)(v6 + 8) = v5;
  v7 = xpc_null_create();
  *(_DWORD *)(v6 + 16) = a3;
  v8 = a1[2];
  v9 = v17;
  v10 = v18;
  if (v18)
  {
    p_shared_owners = (unint64_t *)&v18->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
  }
  v13 = (_QWORD *)operator new();
  *v13 = v6;
  v13[1] = v9;
  v13[2] = v10;
  v19 = 0;
  v20 = 0;
  dispatch_async_f(v8, v13, (dispatch_function_t)sub_1CC5B1A58);
  sub_1CC59C45C(&v19);
  sub_1CC59C45C(&v20);
  v14 = v18;
  if (v18)
  {
    v15 = (unint64_t *)&v18->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  xpc_release(v7);
}

void sub_1CC5AF298(_QWORD *a1, int a2)
{
  uint64_t v4;
  NSObject *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  _QWORD *v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  uint64_t v16;
  uint64_t v17;

  sub_1CC59C014(&v14, a1);
  v4 = operator new();
  *(_QWORD *)v4 = a1;
  *(_DWORD *)(v4 + 8) = a2;
  v5 = a1[2];
  v6 = v14;
  v7 = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  v10 = (_QWORD *)operator new();
  *v10 = v4;
  v10[1] = v6;
  v10[2] = v7;
  v16 = 0;
  v17 = 0;
  dispatch_async_f(v5, v10, (dispatch_function_t)sub_1CC5B1BD4);
  sub_1CC59C45C(&v16);
  sub_1CC59C45C(&v17);
  v11 = v15;
  if (v15)
  {
    v12 = (unint64_t *)&v15->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
}

uint64_t sub_1CC5AF3A0(uint64_t a1)
{
  _QWORD *v2;
  timeval v4;

  sub_1CC5AF450((_QWORD *)a1, "com.apple.awd.framework.core", QOS_CLASS_DEFAULT, "core");
  v2 = operator new(0x20uLL);
  v2[2] = 0;
  *v2 = &unk_1E886B910;
  v2[1] = 0;
  *((_DWORD *)v2 + 6) = 0;
  *(_QWORD *)(a1 + 40) = v2 + 3;
  *(_QWORD *)(a1 + 48) = v2;
  *(_DWORD *)(a1 + 56) = 0;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  gettimeofday(&v4, 0);
  **(_DWORD **)(a1 + 40) = v4.tv_sec;
  return a1;
}

_QWORD *sub_1CC5AF450(_QWORD *a1, const char *a2, dispatch_qos_class_t a3, const char *a4)
{
  dispatch_object_t object;

  object = 0;
  sub_1CC59C088(a1, a2, a3, &object);
  if (object)
    dispatch_release(object);
  ctu::OsLogLogger::OsLogLogger((ctu::OsLogLogger *)(a1 + 4), "com.apple.awd.framework", a4);
  return a1;
}

void sub_1CC5AF4A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, dispatch_object_t object)
{
  _QWORD *v10;

  sub_1CC594A2C(v10);
  _Unwind_Resume(a1);
}

_QWORD *sub_1CC5AF4D0(uint64_t a1)
{
  NSObject *v2;
  void **v4;

  awd::AWDServerConnection::~AWDServerConnection((awd::AWDServerConnection *)(a1 + 128));
  v4 = (void **)(a1 + 104);
  sub_1CC5B1D98(&v4);
  awd::AWDServerConnection::~AWDServerConnection((awd::AWDServerConnection *)(a1 + 88));
  awd::AWDServerConnection::~AWDServerConnection((awd::AWDServerConnection *)(a1 + 72));
  v2 = *(NSObject **)(a1 + 64);
  if (v2)
    dispatch_release(v2);
  awd::AWDServerConnection::~AWDServerConnection((awd::AWDServerConnection *)(a1 + 40));
  MEMORY[0x1D17AD2BC](a1 + 32);
  return sub_1CC594A2C((_QWORD *)a1);
}

void sub_1CC5AF540(_QWORD *a1)
{
  __CFNotificationCenter *DarwinNotifyCenter;
  NSObject *v3;

  DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
  if (DarwinNotifyCenter)
  {
    CFNotificationCenterAddObserver(DarwinNotifyCenter, a1, (CFNotificationCallback)sub_1CC5AF8BC, CFSTR("AWDD Started"), 0, CFNotificationSuspensionBehaviorDeliverImmediately);
    v3 = a1[4];
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
      sub_1CC5C34F0(v3);
  }
}

void sub_1CC5AF5A8(_QWORD *a1)
{
  __int128 v2;
  unint64_t *v3;
  unint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  _QWORD v23[5];
  __int128 v24;
  _QWORD v25[5];
  __int128 v26;
  _QWORD v27[5];
  __int128 v28;
  _QWORD v29[5];
  __int128 v30;
  _QWORD v31[5];
  __int128 v32;
  _QWORD v33[5];
  __int128 v34;
  __int128 v35;

  sub_1CC59C014(&v35, a1);
  v2 = v35;
  if (*((_QWORD *)&v35 + 1))
  {
    v3 = (unint64_t *)(*((_QWORD *)&v35 + 1) + 16);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
    v5 = (unint64_t *)(*((_QWORD *)&v2 + 1) + 8);
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 - 1, v5));
    if (!v6)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v2 + 1) + 16))(*((_QWORD *)&v2 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v2 + 1));
    }
  }
  v7 = MEMORY[0x1E0C809B0];
  v33[0] = MEMORY[0x1E0C809B0];
  v33[1] = 1174405120;
  v33[2] = sub_1CC5AF934;
  v33[3] = &unk_1E886BDA8;
  v33[4] = a1;
  v34 = v2;
  if (*((_QWORD *)&v2 + 1))
  {
    v8 = (unint64_t *)(*((_QWORD *)&v2 + 1) + 16);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  v31[0] = v7;
  v31[1] = 1174405120;
  v31[2] = sub_1CC5AFA84;
  v31[3] = &unk_1E886C488;
  v31[4] = a1;
  v32 = v2;
  if (*((_QWORD *)&v2 + 1))
  {
    v10 = (unint64_t *)(*((_QWORD *)&v2 + 1) + 16);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  v29[0] = v7;
  v29[1] = 1174405120;
  v29[2] = sub_1CC5AFB30;
  v29[3] = &unk_1E886BDD8;
  v29[4] = a1;
  v30 = v2;
  if (*((_QWORD *)&v2 + 1))
  {
    v12 = (unint64_t *)(*((_QWORD *)&v2 + 1) + 16);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  v27[0] = v7;
  v27[1] = 1174405120;
  v27[2] = sub_1CC5AFBB8;
  v27[3] = &unk_1E886C4B8;
  v27[4] = a1;
  v28 = v2;
  if (*((_QWORD *)&v2 + 1))
  {
    v14 = (unint64_t *)(*((_QWORD *)&v2 + 1) + 16);
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  v25[0] = v7;
  v25[1] = 1174405120;
  v25[2] = sub_1CC5AFC78;
  v25[3] = &unk_1E886C4E8;
  v25[4] = a1;
  v26 = v2;
  if (*((_QWORD *)&v2 + 1))
  {
    v16 = (unint64_t *)(*((_QWORD *)&v2 + 1) + 16);
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
  }
  v23[0] = v7;
  v23[1] = 1174405120;
  v23[2] = sub_1CC5AFD60;
  v23[3] = &unk_1E886BE90;
  v23[4] = a1;
  v24 = v2;
  if (*((_QWORD *)&v2 + 1))
  {
    v18 = (unint64_t *)(*((_QWORD *)&v2 + 1) + 16);
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
  }
  awd::AWDServerFacade::create(v33, v31, v29, v27, v25, v23, &v35);
  sub_1CC5A40BC((uint64_t)(a1 + 11), &v35);
  v20 = (std::__shared_weak_count *)*((_QWORD *)&v35 + 1);
  if (*((_QWORD *)&v35 + 1))
  {
    v21 = (unint64_t *)(*((_QWORD *)&v35 + 1) + 8);
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  if (*((_QWORD *)&v24 + 1))
    std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v24 + 1));
  if (*((_QWORD *)&v26 + 1))
    std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v26 + 1));
  if (*((_QWORD *)&v28 + 1))
    std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v28 + 1));
  if (*((_QWORD *)&v30 + 1))
    std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v30 + 1));
  if (*((_QWORD *)&v32 + 1))
    std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v32 + 1));
  if (*((_QWORD *)&v34 + 1))
    std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v34 + 1));
  if (*((_QWORD *)&v2 + 1))
    std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v2 + 1));
}

void sub_1CC5AF85C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,std::__shared_weak_count *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,std::__shared_weak_count *a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,std::__shared_weak_count *a36)
{
  std::__shared_weak_count *v36;
  uint64_t v37;
  std::__shared_weak_count *v39;
  std::__shared_weak_count *v40;

  if (a15)
    std::__shared_weak_count::__release_weak(a15);
  if (a22)
    std::__shared_weak_count::__release_weak(a22);
  if (a29)
    std::__shared_weak_count::__release_weak(a29);
  if (a36)
    std::__shared_weak_count::__release_weak(a36);
  v39 = *(std::__shared_weak_count **)(v37 - 112);
  if (v39)
    std::__shared_weak_count::__release_weak(v39);
  v40 = *(std::__shared_weak_count **)(v37 - 56);
  if (v40)
    std::__shared_weak_count::__release_weak(v40);
  if (v36)
    std::__shared_weak_count::__release_weak(v36);
  _Unwind_Resume(exception_object);
}

void sub_1CC5AF8BC()
{
  std::__shared_weak_count *v0;
  unint64_t *p_shared_owners;
  unint64_t v2;
  _QWORD *v3;
  std::__shared_weak_count *v4;

  sub_1CC5AE5AC(&v3);
  if (v3)
    sub_1CC5AFDF0(v3);
  v0 = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v2 = __ldaxr(p_shared_owners);
    while (__stlxr(v2 - 1, p_shared_owners));
    if (!v2)
    {
      ((void (*)(std::__shared_weak_count *))v0->__on_zero_shared)(v0);
      std::__shared_weak_count::__release_weak(v0);
    }
  }
}

void sub_1CC5AF934(_QWORD *a1, int a2, int a3, uint64_t *a4)
{
  std::__shared_weak_count *v5;
  _QWORD *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19[2];

  v5 = (std::__shared_weak_count *)a1[6];
  if (v5)
  {
    v9 = (_QWORD *)a1[4];
    v10 = std::__shared_weak_count::lock(v5);
    if (v10)
    {
      v11 = v10;
      if (a1[5])
      {
        v12 = *a4;
        v13 = (std::__shared_weak_count *)a4[1];
        v19[0] = v12;
        v19[1] = (uint64_t)v13;
        if (v13)
        {
          p_shared_owners = (unint64_t *)&v13->__shared_owners_;
          do
            v15 = __ldxr(p_shared_owners);
          while (__stxr(v15 + 1, p_shared_owners));
          sub_1CC5AEBA4(v9, a2, a3, v19);
          do
            v16 = __ldaxr(p_shared_owners);
          while (__stlxr(v16 - 1, p_shared_owners));
          if (!v16)
          {
            ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
            std::__shared_weak_count::__release_weak(v13);
          }
        }
        else
        {
          sub_1CC5AEBA4(v9, a2, a3, v19);
        }
      }
      v17 = (unint64_t *)&v11->__shared_owners_;
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
  }
}

uint64_t sub_1CC5AFA50(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 48) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 16);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void sub_1CC5AFA74(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void sub_1CC5AFA84(_QWORD *a1, int a2, uint64_t a3, int a4)
{
  std::__shared_weak_count *v5;
  _QWORD *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;

  v5 = (std::__shared_weak_count *)a1[6];
  if (v5)
  {
    v9 = (_QWORD *)a1[4];
    v10 = std::__shared_weak_count::lock(v5);
    if (v10)
    {
      v11 = v10;
      if (a1[5])
        sub_1CC5AEE08(v9, a2, a3, a4);
      p_shared_owners = (unint64_t *)&v11->__shared_owners_;
      do
        v13 = __ldaxr(p_shared_owners);
      while (__stlxr(v13 - 1, p_shared_owners));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
  }
}

void sub_1CC5AFB30(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  _QWORD *v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = (std::__shared_weak_count *)a1[6];
  if (v2)
  {
    v3 = (_QWORD *)a1[4];
    v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      v5 = v4;
      if (a1[5])
        sub_1CC5AEF28(v3);
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

void sub_1CC5AFBB8(_QWORD *a1, int a2, char a3, char a4, char a5)
{
  std::__shared_weak_count *v6;
  _QWORD *v11;
  std::__shared_weak_count *v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;

  v6 = (std::__shared_weak_count *)a1[6];
  if (v6)
  {
    v11 = (_QWORD *)a1[4];
    v12 = std::__shared_weak_count::lock(v6);
    if (v12)
    {
      v13 = v12;
      if (a1[5])
        sub_1CC5AF028(v11, a2, a3, a4, a5);
      p_shared_owners = (unint64_t *)&v13->__shared_owners_;
      do
        v15 = __ldaxr(p_shared_owners);
      while (__stlxr(v15 - 1, p_shared_owners));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
  }
}

void sub_1CC5AFC78(_QWORD *a1, xpc_object_t *a2, int a3)
{
  std::__shared_weak_count *v4;
  _QWORD *v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  xpc_object_t v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  xpc_object_t v13;

  v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    v7 = (_QWORD *)a1[4];
    v8 = std::__shared_weak_count::lock(v4);
    if (v8)
    {
      v9 = v8;
      if (a1[5])
      {
        v10 = *a2;
        v13 = v10;
        if (v10)
        {
          xpc_retain(v10);
        }
        else
        {
          v10 = xpc_null_create();
          v13 = v10;
        }
        sub_1CC5AF150(v7, &v13, a3);
        xpc_release(v10);
        v13 = 0;
      }
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v12 = __ldaxr(p_shared_owners);
      while (__stlxr(v12 - 1, p_shared_owners));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
  }
}

void sub_1CC5AFD60(_QWORD *a1, int a2)
{
  std::__shared_weak_count *v3;
  _QWORD *v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    v5 = (_QWORD *)a1[4];
    v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      v7 = v6;
      if (a1[5])
        sub_1CC5AF298(v5, a2);
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
}

void sub_1CC5AFDF0(_QWORD *a1)
{
  _QWORD *v2;
  NSObject *v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  _QWORD *v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  uint64_t v15;

  sub_1CC59C014(&v12, a1);
  v2 = (_QWORD *)operator new();
  *v2 = a1;
  v3 = a1[2];
  v4 = v12;
  v5 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  v8 = (_QWORD *)operator new();
  *v8 = v2;
  v8[1] = v4;
  v8[2] = v5;
  v14 = 0;
  v15 = 0;
  dispatch_async_f(v3, v8, (dispatch_function_t)sub_1CC5B1E0C);
  sub_1CC59C45C(&v14);
  sub_1CC59C45C(&v15);
  v9 = v13;
  if (v13)
  {
    v10 = (unint64_t *)&v13->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
}

uint64_t sub_1CC5AFEF0()
{
  return 1;
}

void sub_1CC5AFEF8(awd *a1, awd **a2)
{
  awd *v2;
  unint64_t AWDTimestamp;
  awd *v6;
  awd::Metric *v7;
  _QWORD *v8;
  NSObject *v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  _QWORD *v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  uint64_t v22;
  uint64_t v23;

  v2 = *a2;
  if (*a2)
  {
    if (!*((_QWORD *)v2 + 1))
    {
      AWDTimestamp = awd::getAWDTimestamp(a1);
      v6 = *a2;
      *((_QWORD *)v6 + 1) = AWDTimestamp;
      awd::maybeSetTimestamp(v6, v7);
      v2 = *a2;
    }
    *a2 = 0;
    sub_1CC59C014(&v20, a1);
    v8 = (_QWORD *)operator new();
    v19 = 0;
    *v8 = a1;
    v8[1] = v2;
    v9 = *((_QWORD *)a1 + 2);
    v10 = v20;
    v11 = v21;
    if (v21)
    {
      p_shared_owners = (unint64_t *)&v21->__shared_owners_;
      do
        v13 = __ldxr(p_shared_owners);
      while (__stxr(v13 + 1, p_shared_owners));
    }
    v14 = (_QWORD *)operator new();
    *v14 = v8;
    v14[1] = v10;
    v14[2] = v11;
    v22 = 0;
    v23 = 0;
    dispatch_async_f(v9, v14, (dispatch_function_t)sub_1CC5B1EC4);
    sub_1CC59C45C(&v22);
    sub_1CC59C45C(&v23);
    v15 = v21;
    if (v21)
    {
      v16 = (unint64_t *)&v21->__shared_owners_;
      do
        v17 = __ldaxr(v16);
      while (__stlxr(v17 - 1, v16));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
    }
    v18 = v19;
    v19 = 0;
    if (v18)
      sub_1CC598A08((uint64_t)&v19, v18);
  }
}

void sub_1CC5B0048(_QWORD *a1, int a2)
{
  uint64_t v4;
  NSObject *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  _QWORD *v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  uint64_t v16;
  uint64_t v17;

  sub_1CC59C014(&v14, a1);
  v4 = operator new();
  *(_QWORD *)v4 = a1;
  *(_DWORD *)(v4 + 8) = a2;
  v5 = a1[2];
  v6 = v14;
  v7 = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  v10 = (_QWORD *)operator new();
  *v10 = v4;
  v10[1] = v6;
  v10[2] = v7;
  v16 = 0;
  v17 = 0;
  dispatch_async_f(v5, v10, (dispatch_function_t)sub_1CC5B1F94);
  sub_1CC59C45C(&v16);
  sub_1CC59C45C(&v17);
  v11 = v15;
  if (v15)
  {
    v12 = (unint64_t *)&v15->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
}

void sub_1CC5B0150(_QWORD *a1, int a2, char a3)
{
  uint64_t v6;
  NSObject *v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  _QWORD *v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  uint64_t v18;
  uint64_t v19;

  sub_1CC59C014(&v16, a1);
  v6 = operator new();
  *(_QWORD *)v6 = a1;
  *(_DWORD *)(v6 + 8) = a2;
  *(_BYTE *)(v6 + 12) = a3;
  v7 = a1[2];
  v8 = v16;
  v9 = v17;
  if (v17)
  {
    p_shared_owners = (unint64_t *)&v17->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  v12 = (_QWORD *)operator new();
  *v12 = v6;
  v12[1] = v8;
  v12[2] = v9;
  v18 = 0;
  v19 = 0;
  dispatch_async_f(v7, v12, (dispatch_function_t)sub_1CC5B2028);
  sub_1CC59C45C(&v18);
  sub_1CC59C45C(&v19);
  v13 = v17;
  if (v17)
  {
    v14 = (unint64_t *)&v17->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
}

void sub_1CC5B0260(_QWORD *a1, int a2, uint64_t a3)
{
  uint64_t v6;
  NSObject *v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  _QWORD *v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  uint64_t v18;
  uint64_t v19;

  sub_1CC59C014(&v16, a1);
  v6 = operator new();
  *(_QWORD *)v6 = a1;
  *(_DWORD *)(v6 + 8) = a2;
  *(_QWORD *)(v6 + 16) = a3;
  v7 = a1[2];
  v8 = v16;
  v9 = v17;
  if (v17)
  {
    p_shared_owners = (unint64_t *)&v17->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  v12 = (_QWORD *)operator new();
  *v12 = v6;
  v12[1] = v8;
  v12[2] = v9;
  v18 = 0;
  v19 = 0;
  dispatch_async_f(v7, v12, (dispatch_function_t)sub_1CC5B20C0);
  sub_1CC59C45C(&v18);
  sub_1CC59C45C(&v19);
  v13 = v17;
  if (v17)
  {
    v14 = (unint64_t *)&v17->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
}

void sub_1CC5B0370(_QWORD *a1, int a2, uint64_t a3)
{
  uint64_t v6;
  NSObject *v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  _QWORD *v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  uint64_t v18;
  uint64_t v19;

  sub_1CC59C014(&v16, a1);
  v6 = operator new();
  *(_QWORD *)v6 = a1;
  *(_DWORD *)(v6 + 8) = a2;
  *(_QWORD *)(v6 + 16) = a3;
  v7 = a1[2];
  v8 = v16;
  v9 = v17;
  if (v17)
  {
    p_shared_owners = (unint64_t *)&v17->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  v12 = (_QWORD *)operator new();
  *v12 = v6;
  v12[1] = v8;
  v12[2] = v9;
  v18 = 0;
  v19 = 0;
  dispatch_async_f(v7, v12, (dispatch_function_t)sub_1CC5B2158);
  sub_1CC59C45C(&v18);
  sub_1CC59C45C(&v19);
  v13 = v17;
  if (v17)
  {
    v14 = (unint64_t *)&v17->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
}

void sub_1CC5B0480(_QWORD *a1, int a2, uint64_t *a3)
{
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  _QWORD *v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD v22[3];

  v22[2] = *MEMORY[0x1E0C80C00];
  v5 = *a3;
  v22[0] = a3[1];
  *(_QWORD *)((char *)v22 + 7) = *(uint64_t *)((char *)a3 + 15);
  v6 = *((_BYTE *)a3 + 23);
  a3[1] = 0;
  a3[2] = 0;
  *a3 = 0;
  sub_1CC59C014(&v18, a1);
  v7 = operator new();
  *(_QWORD *)v7 = a1;
  *(_DWORD *)(v7 + 8) = a2;
  v8 = v22[0];
  *(_QWORD *)(v7 + 16) = v5;
  *(_QWORD *)(v7 + 24) = v8;
  *(_QWORD *)(v7 + 31) = *(_QWORD *)((char *)v22 + 7);
  *(_BYTE *)(v7 + 39) = v6;
  v22[0] = 0;
  *(_QWORD *)((char *)v22 + 7) = 0;
  v9 = a1[2];
  v10 = v18;
  v11 = v19;
  if (v19)
  {
    p_shared_owners = (unint64_t *)&v19->__shared_owners_;
    do
      v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
  }
  v14 = (_QWORD *)operator new();
  *v14 = v7;
  v14[1] = v10;
  v14[2] = v11;
  v20 = 0;
  v21 = 0;
  dispatch_async_f(v9, v14, (dispatch_function_t)sub_1CC5B21F0);
  sub_1CC59C45C(&v20);
  sub_1CC59C45C(&v21);
  v15 = v19;
  if (v19)
  {
    v16 = (unint64_t *)&v19->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
}

void sub_1CC5B05EC(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_1CC592AD0(a1);
  _Unwind_Resume(a1);
}

const void **sub_1CC5B05FC(const void **a1)
{
  const void *v2;

  v2 = *a1;
  if (v2)
    CFRelease(v2);
  return a1;
}

_QWORD *sub_1CC5B062C(_QWORD *a1, CFTypeRef cf)
{
  *a1 = cf;
  if (cf)
    CFRetain(cf);
  return a1;
}

const void **sub_1CC5B0660(const void **a1)
{
  const void *v2;

  v2 = *a1;
  if (v2)
    CFRelease(v2);
  return a1;
}

const void **sub_1CC5B0690(const void **a1)
{
  const void *v2;

  v2 = *a1;
  if (v2)
    CFRelease(v2);
  return a1;
}

const void **sub_1CC5B06C0(const void **a1)
{
  const void *v2;

  v2 = *a1;
  if (v2)
    CFRelease(v2);
  return a1;
}

const void **sub_1CC5B06F0(const void **a1)
{
  const void *v2;

  v2 = *a1;
  if (v2)
    CFRelease(v2);
  return a1;
}

const void **sub_1CC5B0720(const void **a1, const void **a2)
{
  const void *v3;

  v3 = *a2;
  *a1 = *a2;
  if (v3)
    CFRetain(v3);
  return a1;
}

void sub_1CC5B0754(void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    sub_1CC5B0794((uint64_t *)v2);
    operator delete(**a1);
  }
}

void sub_1CC5B0794(uint64_t *a1)
{
  uint64_t v2;
  uint64_t i;
  std::__shared_weak_count *v4;

  v2 = *a1;
  for (i = a1[1]; i != v2; i -= 16)
  {
    v4 = *(std::__shared_weak_count **)(i - 8);
    if (v4)
      std::__shared_weak_count::__release_weak(v4);
  }
  a1[1] = v2;
}

void sub_1CC5B07DC(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    sub_1CC5B07DC(a1, *a2);
    sub_1CC5B07DC(a1, a2[1]);
    sub_1CC5B0824((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void sub_1CC5B0824(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;

  v2 = *(NSObject **)(a1 + 24);
  if (v2)
  {
    dispatch_group_leave(v2);
    v3 = *(NSObject **)(a1 + 24);
    if (v3)
      dispatch_release(v3);
  }
}

void ***sub_1CC5B0860(void ***result, void **a2)
{
  void **v2;
  void **v3;

  v2 = *result;
  *result = a2;
  if (v2)
  {
    v3 = v2;
    sub_1CC59D564(&v3);
    return (void ***)MEMORY[0x1D17AD544](v2, 0x20C40960023A9);
  }
  return result;
}

void sub_1CC5B08B0(void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 40;
        sub_1CC5B0934((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_1CC5B0934(uint64_t a1, uint64_t a2)
{
  xpc_release(*(xpc_object_t *)(a2 + 32));
  *(_QWORD *)(a2 + 32) = 0;
  if (*(char *)(a2 + 31) < 0)
    operator delete(*(void **)(a2 + 8));
}

void sub_1CC5B0978(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E886B868;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1CC5B0988(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E886B868;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1D17AD544);
}

void sub_1CC5B09B8(uint64_t a1)
{
  char v1;

  sub_1CC5B09E0((uint64_t)&v1, a1 + 24);
}

void sub_1CC5B09E0(uint64_t a1, uint64_t a2)
{
  sub_1CC5B07DC(a2 + 8, *(_QWORD **)(a2 + 16));
  if (*(_QWORD *)a2)
    dispatch_release(*(dispatch_object_t *)a2);
}

void sub_1CC5B0A1C(void ***a1)
{
  void **v1;
  const void **v2;
  const void **v4;
  void *v5;

  v1 = *a1;
  v2 = (const void **)**a1;
  if (v2)
  {
    v4 = (const void **)v1[1];
    v5 = v2;
    if (v4 != v2)
    {
      do
        v4 = sub_1CC5B06F0(v4 - 1);
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t sub_1CC5B0A8C(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 8;
    sub_1CC5B06F0((const void **)(i - 8));
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

_QWORD *sub_1CC5B0AD8(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = sub_1CC5A1C2C(result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1CC5B0B34(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *sub_1CC5B0B50(uint64_t **a1, _DWORD *a2, uint64_t a3)
{
  uint64_t **v6;
  void *v7;
  uint64_t *v8;
  uint64_t **v9;
  _QWORD v11[2];
  char v12;

  v6 = a1 + 1;
  v7 = operator new(0x40uLL);
  v11[0] = v7;
  v11[1] = v6;
  *((_DWORD *)v7 + 8) = *a2;
  *((_QWORD *)v7 + 5) = *(_QWORD *)a3;
  *((_DWORD *)v7 + 12) = *(_DWORD *)(a3 + 8);
  sub_1CC5B0C30((dispatch_group_t *)v7 + 7, (NSObject **)(a3 + 16));
  v12 = 1;
  v8 = a1[1];
  if (v8)
  {
    do
    {
      while (1)
      {
        v6 = (uint64_t **)v8;
        if (*((_DWORD *)v7 + 8) >= *((_DWORD *)v8 + 8))
          break;
        v8 = (uint64_t *)*v8;
        v9 = v6;
        if (!*v6)
          goto LABEL_8;
      }
      v8 = (uint64_t *)v8[1];
    }
    while (v8);
    v9 = v6 + 1;
  }
  else
  {
    v9 = v6;
  }
LABEL_8:
  sub_1CC598AF0(a1, (uint64_t)v6, v9, (uint64_t *)v7);
  v11[0] = 0;
  sub_1CC5B0C6C((uint64_t)v11, 0);
  return v7;
}

dispatch_group_t *sub_1CC5B0C30(dispatch_group_t *a1, NSObject **a2)
{
  NSObject *v3;

  v3 = *a2;
  *a1 = *a2;
  if (v3)
  {
    dispatch_retain(v3);
    if (*a1)
      dispatch_group_enter(*a1);
  }
  return a1;
}

void sub_1CC5B0C6C(uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      sub_1CC5B0824((uint64_t)v2 + 32);
    operator delete(v2);
  }
}

uint64_t *sub_1CC5B0CB0(uint64_t **a1, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;
  BOOL v5;
  uint64_t *v6;

  v2 = (uint64_t *)a2[1];
  if (v2)
  {
    do
    {
      v3 = v2;
      v2 = (uint64_t *)*v2;
    }
    while (v2);
  }
  else
  {
    v4 = a2;
    do
    {
      v3 = (uint64_t *)v4[2];
      v5 = *v3 == (_QWORD)v4;
      v4 = v3;
    }
    while (!v5);
  }
  if (*a1 == a2)
    *a1 = v3;
  v6 = a1[1];
  a1[2] = (uint64_t *)((char *)a1[2] - 1);
  sub_1CC5B0D20(v6, a2);
  return v3;
}

uint64_t *sub_1CC5B0D20(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t *v4;
  int v5;
  uint64_t **v6;
  uint64_t *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t *v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v2 = *a2;
  v3 = a2;
  if (*a2)
  {
    v4 = (uint64_t *)a2[1];
    if (!v4)
    {
      v3 = a2;
      goto LABEL_7;
    }
    do
    {
      v3 = v4;
      v4 = (uint64_t *)*v4;
    }
    while (v4);
  }
  v2 = v3[1];
  if (v2)
  {
LABEL_7:
    v5 = 0;
    *(_QWORD *)(v2 + 16) = v3[2];
    goto LABEL_8;
  }
  v5 = 1;
LABEL_8:
  v6 = (uint64_t **)v3[2];
  v7 = *v6;
  if (*v6 == v3)
  {
    *v6 = (uint64_t *)v2;
    if (v3 == result)
    {
      v7 = 0;
      result = (uint64_t *)v2;
    }
    else
    {
      v7 = v6[1];
    }
  }
  else
  {
    v6[1] = (uint64_t *)v2;
  }
  v8 = *((unsigned __int8 *)v3 + 24);
  if (v3 != a2)
  {
    v9 = a2[2];
    v3[2] = v9;
    *(_QWORD *)(v9 + 8 * (*(_QWORD *)a2[2] != (_QWORD)a2)) = v3;
    v11 = *a2;
    v10 = a2[1];
    *(_QWORD *)(v11 + 16) = v3;
    *v3 = v11;
    v3[1] = v10;
    if (v10)
      *(_QWORD *)(v10 + 16) = v3;
    *((_BYTE *)v3 + 24) = *((_BYTE *)a2 + 24);
    if (result == a2)
      result = v3;
  }
  if (!v8 || !result)
    return result;
  if (!v5)
  {
    *(_BYTE *)(v2 + 24) = 1;
    return result;
  }
  while (1)
  {
    v12 = v7[2];
    if (*(uint64_t **)v12 == v7)
      break;
    if (!*((_BYTE *)v7 + 24))
    {
      *((_BYTE *)v7 + 24) = 1;
      *(_BYTE *)(v12 + 24) = 0;
      v13 = *(uint64_t **)(v12 + 8);
      v14 = *v13;
      *(_QWORD *)(v12 + 8) = *v13;
      if (v14)
        *(_QWORD *)(v14 + 16) = v12;
      v13[2] = *(_QWORD *)(v12 + 16);
      *(_QWORD *)(*(_QWORD *)(v12 + 16) + 8 * (**(_QWORD **)(v12 + 16) != v12)) = v13;
      *v13 = v12;
      *(_QWORD *)(v12 + 16) = v13;
      if (result == (uint64_t *)*v7)
        result = v7;
      v7 = *(uint64_t **)(*v7 + 8);
    }
    v15 = (_QWORD *)*v7;
    if (*v7 && !*((_BYTE *)v15 + 24))
    {
      v16 = (uint64_t *)v7[1];
      if (!v16)
        goto LABEL_56;
LABEL_55:
      if (*((_BYTE *)v16 + 24))
      {
LABEL_56:
        *((_BYTE *)v15 + 24) = 1;
        *((_BYTE *)v7 + 24) = 0;
        v22 = v15[1];
        *v7 = v22;
        if (v22)
          *(_QWORD *)(v22 + 16) = v7;
        v15[2] = v7[2];
        *(_QWORD *)(v7[2] + 8 * (*(_QWORD *)v7[2] != (_QWORD)v7)) = v15;
        v15[1] = v7;
        v7[2] = (uint64_t)v15;
        v16 = v7;
      }
      else
      {
        v15 = v7;
      }
      v23 = v15[2];
      *((_BYTE *)v15 + 24) = *(_BYTE *)(v23 + 24);
      *(_BYTE *)(v23 + 24) = 1;
      *((_BYTE *)v16 + 24) = 1;
      v24 = *(uint64_t **)(v23 + 8);
      v25 = *v24;
      *(_QWORD *)(v23 + 8) = *v24;
      if (v25)
        *(_QWORD *)(v25 + 16) = v23;
      v24[2] = *(_QWORD *)(v23 + 16);
      *(_QWORD *)(*(_QWORD *)(v23 + 16) + 8 * (**(_QWORD **)(v23 + 16) != v23)) = v24;
      *v24 = v23;
      goto LABEL_72;
    }
    v16 = (uint64_t *)v7[1];
    if (v16 && !*((_BYTE *)v16 + 24))
      goto LABEL_55;
    *((_BYTE *)v7 + 24) = 0;
    v17 = (uint64_t *)v7[2];
    if (v17 == result)
    {
      v17 = result;
LABEL_53:
      *((_BYTE *)v17 + 24) = 1;
      return result;
    }
    if (!*((_BYTE *)v17 + 24))
      goto LABEL_53;
LABEL_49:
    v7 = *(uint64_t **)(v17[2] + 8 * (*(_QWORD *)v17[2] == (_QWORD)v17));
  }
  if (!*((_BYTE *)v7 + 24))
  {
    *((_BYTE *)v7 + 24) = 1;
    *(_BYTE *)(v12 + 24) = 0;
    v18 = v7[1];
    *(_QWORD *)v12 = v18;
    if (v18)
      *(_QWORD *)(v18 + 16) = v12;
    v7[2] = *(_QWORD *)(v12 + 16);
    *(_QWORD *)(*(_QWORD *)(v12 + 16) + 8 * (**(_QWORD **)(v12 + 16) != v12)) = v7;
    v7[1] = v12;
    *(_QWORD *)(v12 + 16) = v7;
    if (result == (uint64_t *)v12)
      result = v7;
    v7 = *(uint64_t **)v12;
  }
  v19 = (_QWORD *)*v7;
  if (*v7 && !*((_BYTE *)v19 + 24))
    goto LABEL_68;
  v20 = (uint64_t *)v7[1];
  if (!v20 || *((_BYTE *)v20 + 24))
  {
    *((_BYTE *)v7 + 24) = 0;
    v17 = (uint64_t *)v7[2];
    if (*((_BYTE *)v17 + 24))
      v21 = v17 == result;
    else
      v21 = 1;
    if (v21)
      goto LABEL_53;
    goto LABEL_49;
  }
  if (v19 && !*((_BYTE *)v19 + 24))
  {
LABEL_68:
    v20 = v7;
  }
  else
  {
    *((_BYTE *)v20 + 24) = 1;
    *((_BYTE *)v7 + 24) = 0;
    v26 = *v20;
    v7[1] = *v20;
    if (v26)
      *(_QWORD *)(v26 + 16) = v7;
    v20[2] = v7[2];
    *(_QWORD *)(v7[2] + 8 * (*(_QWORD *)v7[2] != (_QWORD)v7)) = v20;
    *v20 = (uint64_t)v7;
    v7[2] = (uint64_t)v20;
    v19 = v7;
  }
  v23 = v20[2];
  *((_BYTE *)v20 + 24) = *(_BYTE *)(v23 + 24);
  *(_BYTE *)(v23 + 24) = 1;
  *((_BYTE *)v19 + 24) = 1;
  v24 = *(uint64_t **)v23;
  v27 = *(_QWORD *)(*(_QWORD *)v23 + 8);
  *(_QWORD *)v23 = v27;
  if (v27)
    *(_QWORD *)(v27 + 16) = v23;
  v24[2] = *(_QWORD *)(v23 + 16);
  *(_QWORD *)(*(_QWORD *)(v23 + 16) + 8 * (**(_QWORD **)(v23 + 16) != v23)) = v24;
  v24[1] = v23;
LABEL_72:
  *(_QWORD *)(v23 + 16) = v24;
  return result;
}

void sub_1CC5B10A4(uint64_t a1, _QWORD *a2)
{
  void *v4;

  if (a2)
  {
    sub_1CC5B10A4(a1, *a2);
    sub_1CC5B10A4(a1, a2[1]);
    v4 = (void *)a2[5];
    if (v4)
    {
      a2[6] = v4;
      operator delete(v4);
    }
    operator delete(a2);
  }
}

_QWORD *sub_1CC5B10F4(_QWORD *a1, _QWORD *a2)
{
  _QWORD *v4;

  *a1 = a2;
  v4 = (_QWORD *)operator new();
  *v4 = &off_1E886BA98;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  sub_1CC59BD34((uint64_t)a1, a2, (uint64_t)a2);
  return a1;
}

void sub_1CC5B1158(void *a1)
{
  dispatch_queue_t *v1;

  __cxa_begin_catch(a1);
  dispatch_barrier_async_f(v1[2], v1, (dispatch_function_t)sub_1CC5B1208);
  __cxa_rethrow();
}

void sub_1CC5B1178(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_1CC5B1190(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1D17AD544);
}

void sub_1CC5B11B4(uint64_t a1)
{
  dispatch_barrier_async_f(*(dispatch_queue_t *)(*(_QWORD *)(a1 + 24) + 16), *(void **)(a1 + 24), (dispatch_function_t)sub_1CC5B1208);
}

uint64_t sub_1CC5B11C8(uint64_t a1, uint64_t a2)
{
  if (sub_1CC59BE60(a2, (uint64_t)&unk_1E886AB58))
    return a1 + 24;
  else
    return 0;
}

uint64_t sub_1CC5B1208(uint64_t result)
{
  if (result)
  {
    sub_1CC5AF4D0(result);
    JUMPOUT(0x1D17AD544);
  }
  return result;
}

void sub_1CC5B1234(_QWORD *a1, uint64_t a2)
{
  NSObject *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  _QWORD block[6];
  std::__shared_weak_count *v14;
  uint64_t v15;
  std::__shared_weak_count *v16;

  sub_1CC59C014(&v15, a1);
  v4 = a1[2];
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 1174405120;
  block[2] = sub_1CC5B1338;
  block[3] = &unk_1E886C520;
  block[5] = v15;
  v14 = v16;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  block[4] = a2;
  dispatch_async(v4, block);
  v7 = v14;
  if (v14)
  {
    v8 = (unint64_t *)&v14->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  v10 = v16;
  if (v16)
  {
    v11 = (unint64_t *)&v16->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
}

uint64_t sub_1CC5B1338(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

uint64_t sub_1CC5B1344(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 48) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void sub_1CC5B1368(uint64_t a1)
{
  awd::AWDServerConnection::~AWDServerConnection((awd::AWDServerConnection *)(a1 + 40));
}

uint64_t sub_1CC5B1370(uint64_t *a1, uint64_t a2)
{
  uint64_t result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    sub_1CC5B13AC(result);
    JUMPOUT(0x1D17AD544);
  }
  return result;
}

uint64_t sub_1CC5B13AC(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  void *v4;
  std::__shared_weak_count *v5;
  NSObject *v6;
  NSObject *v7;
  void **v9;

  awd::AWDServerConnection::~AWDServerConnection((awd::AWDServerConnection *)(a1 + 408));
  sub_1CC5B05FC((const void **)(a1 + 400));
  v9 = (void **)(a1 + 376);
  sub_1CC5B08B0(&v9);
  sub_1CC5AE37C((uint64_t *)(a1 + 368), 0);
  sub_1CC5B0860((void ***)(a1 + 360), 0);
  v2 = *(std::__shared_weak_count **)(a1 + 352);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  sub_1CC5B07DC(a1 + 320, *(_QWORD **)(a1 + 328));
  v9 = (void **)(a1 + 296);
  sub_1CC5B0754(&v9);
  awd::AWDServerConnection::~AWDServerConnection((awd::AWDServerConnection *)(a1 + 280));
  v3 = *(std::__shared_weak_count **)(a1 + 272);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  v9 = (void **)(a1 + 240);
  sub_1CC59D564(&v9);
  v4 = *(void **)(a1 + 216);
  if (v4)
  {
    *(_QWORD *)(a1 + 224) = v4;
    operator delete(v4);
  }
  awd::AWDMetricBuffer::~AWDMetricBuffer((awd::AWDMetricBuffer *)(a1 + 80));
  sub_1CC5A165C(a1 + 56, *(_QWORD **)(a1 + 64));
  v5 = *(std::__shared_weak_count **)(a1 + 48);
  if (v5)
    std::__shared_weak_count::__release_weak(v5);
  MEMORY[0x1D17AD2BC](a1 + 24);
  v6 = *(NSObject **)(a1 + 8);
  if (v6)
  {
    dispatch_group_leave(v6);
    v7 = *(NSObject **)(a1 + 8);
    if (v7)
      dispatch_release(v7);
  }
  return a1;
}

uint64_t sub_1CC5B14AC(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 8;
    sub_1CC5B1370((uint64_t *)(i - 8), 0);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t *sub_1CC5B14FC(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t *v6;
  uint64_t v7;

  v1 = *a1;
  v6 = a1;
  v7 = v1;
  v2 = *(_QWORD *)v1;
  sub_1CC5AEAC4(*(_QWORD *)v1, *(_DWORD *)(v1 + 8));
  v3 = *(uint64_t **)(v2 + 104);
  v4 = *(uint64_t **)(v2 + 112);
  if (v3 != v4)
  {
    while (*(_DWORD *)*v3 != *(_DWORD *)(v1 + 12))
    {
      if (++v3 == v4)
        goto LABEL_8;
    }
  }
  if (v3 != v4 && *v3)
    sub_1CC5ACE28(*v3, v1 + 16);
LABEL_8:
  sub_1CC5B15A8(&v7);
  return sub_1CC59C45C((uint64_t *)&v6);
}

void sub_1CC5B158C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  sub_1CC5B15A8(&a10);
  sub_1CC59C45C(&a9);
  _Unwind_Resume(a1);
}

uint64_t *sub_1CC5B15A8(uint64_t *a1)
{
  uint64_t v2;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    awd::AWDServerConnection::~AWDServerConnection((awd::AWDServerConnection *)(v2 + 16));
    MEMORY[0x1D17AD544](v2, 0x1020C404161829ELL);
  }
  return a1;
}

uint64_t *sub_1CC5B15F4(_QWORD ***a1)
{
  _QWORD **v1;
  _QWORD ***v3;

  v3 = a1;
  v1 = *a1;
  sub_1CC5AECD8(**a1, *((_DWORD *)v1 + 2), *(unint64_t *)((char *)v1 + 12), *((_DWORD *)v1 + 5));
  MEMORY[0x1D17AD544](v1, 0x1020C4024DAA5DELL);
  return sub_1CC59C45C((uint64_t *)&v3);
}

void sub_1CC5B1650(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  MEMORY[0x1D17AD544](v2, 0x1020C4024DAA5DELL);
  sub_1CC59C45C((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_1CC5B167C(_QWORD **a1)
{
  _QWORD **v1;
  _QWORD *v2;
  NSObject *v3;
  int **v4;
  int **i;
  NSObject *v6;
  int v7;
  _QWORD *v8;
  _QWORD *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  NSObject *v15;
  _QWORD **v17;
  uint8_t buf[4];
  int v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v17 = a1;
  v1 = (_QWORD **)*a1;
  v2 = (_QWORD *)**a1;
  v3 = v2[4];
  if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1CC590000, v3, OS_LOG_TYPE_INFO, "core:#I ==== BEGIN CLIENT STATE LOG ====", buf, 2u);
  }
  v4 = (int **)v2[13];
  for (i = (int **)v2[14]; v4 != i; ++v4)
  {
    v6 = v2[4];
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      v7 = **v4;
      *(_DWORD *)buf = 67109120;
      v19 = v7;
      _os_log_impl(&dword_1CC590000, v6, OS_LOG_TYPE_INFO, "core:#I Component is 0x%x", buf, 8u);
    }
    awd::AWDTriggerFilter::debugLog((NSObject **)*v4 + 3);
    awd::AWDMetricBuffer::debugLog((NSObject **)*v4 + 10);
    v8 = (_QWORD *)*((_QWORD *)*v4 + 37);
    v9 = (_QWORD *)*((_QWORD *)*v4 + 38);
    while (v8 != v9)
    {
      v10 = (std::__shared_weak_count *)v8[1];
      if (v10)
      {
        v11 = std::__shared_weak_count::lock(v10);
        if (v11)
        {
          v12 = v11;
          if (*v8)
            awd::AWDLoggingMetric::debugLog((awd::AWDLoggingMetric *)(*v8 + 48));
          p_shared_owners = (unint64_t *)&v12->__shared_owners_;
          do
            v14 = __ldaxr(p_shared_owners);
          while (__stlxr(v14 - 1, p_shared_owners));
          if (!v14)
          {
            ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
            std::__shared_weak_count::__release_weak(v12);
          }
        }
      }
      v8 += 2;
    }
  }
  v15 = v2[4];
  if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1CC590000, v15, OS_LOG_TYPE_INFO, "core:#I ==== END CLIENT STATE LOG ====", buf, 2u);
  }
  MEMORY[0x1D17AD544](v1, 0x20C4093837F09);
  return sub_1CC59C45C((uint64_t *)&v17);
}

void sub_1CC5B1888(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v4;
  va_list va;

  va_start(va, a4);
  MEMORY[0x1D17AD544](v4, 0x20C4093837F09);
  sub_1CC59C45C((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1CC5B18DC()
{
  JUMPOUT(0x1CC5B18D4);
}

uint64_t *sub_1CC5B18E4(_QWORD **a1)
{
  _QWORD *v1;
  _QWORD *v2;
  int v3;
  uint64_t *v4;
  uint64_t *v5;
  BOOL v6;
  NSObject *v7;
  _QWORD **v9;
  uint8_t buf[4];
  int v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v9 = a1;
  v1 = *a1;
  v2 = (_QWORD *)**a1;
  v3 = *((_DWORD *)*a1 + 2);
  v4 = (uint64_t *)v2[13];
  v5 = (uint64_t *)v2[14];
  v6 = v4 == v5;
  if (v3)
  {
    if (v4 != v5)
    {
      while (*(_DWORD *)*v4 != v3)
      {
        if (++v4 == v5)
          goto LABEL_12;
      }
    }
    if (v4 == v5 || !*v4)
    {
LABEL_12:
      v7 = v2[4];
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 67109120;
        v11 = v3;
        _os_log_impl(&dword_1CC590000, v7, OS_LOG_TYPE_DEFAULT, "core:#E Got Unexpected PII/Location callback for component 0x%x (no component config!)", buf, 8u);
      }
    }
    else
    {
      sub_1CC5ACD58(*v4, *((unsigned __int8 *)v1 + 12), *((unsigned __int8 *)v1 + 13));
    }
  }
  else
  {
    while (!v6)
    {
      sub_1CC5ACD58(*v4++, *((unsigned __int8 *)v1 + 12), *((unsigned __int8 *)v1 + 13));
      v6 = v4 == v5;
    }
  }
  MEMORY[0x1D17AD544](v1, 0x1020C4093AC423CLL);
  return sub_1CC59C45C((uint64_t *)&v9);
}

void sub_1CC5B1A28(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  MEMORY[0x1D17AD544](v2, 0x1020C4093AC423CLL);
  sub_1CC59C45C((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_1CC5B1A58(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  xpc_object_t value;
  xpc_object_t v4;
  NSObject *v5;
  int v6;
  uint64_t *v8;
  uint64_t v9;
  uint8_t buf[4];
  int v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v1 = *a1;
  v8 = a1;
  v9 = v1;
  v2 = *(_QWORD *)v1;
  value = xpc_dictionary_get_value(*(xpc_object_t *)(v1 + 8), "base");
  v4 = xpc_dictionary_get_value(*(xpc_object_t *)(v1 + 8), "component");
  if (value)
  {
    LazyMetadataLoader::setBaseMetadata(*(LazyMetadataLoader **)(v2 + 128), value);
  }
  else
  {
    v5 = *(NSObject **)(v2 + 32);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
      v6 = *(_DWORD *)(v1 + 16);
      *(_DWORD *)buf = 67109120;
      v11 = v6;
      _os_log_impl(&dword_1CC590000, v5, OS_LOG_TYPE_INFO, "core:#I CoreAnalytics shim: No baseline metadata returned (processing metric with cid 0x%x)", buf, 8u);
    }
  }
  LazyMetadataLoader::setMetadataForComponent(*(LazyMetadataLoader **)(v2 + 128), v4);
  sub_1CC5B1B80(&v9);
  return sub_1CC59C45C((uint64_t *)&v8);
}

void sub_1CC5B1B64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  sub_1CC5B1B80(&a10);
  sub_1CC59C45C(&a9);
  _Unwind_Resume(a1);
}

uint64_t *sub_1CC5B1B80(uint64_t *a1)
{
  uint64_t v2;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    xpc_release(*(xpc_object_t *)(v2 + 8));
    *(_QWORD *)(v2 + 8) = 0;
    MEMORY[0x1D17AD544](v2, 0x10A0C4036B0EFECLL);
  }
  return a1;
}

uint64_t *sub_1CC5B1BD4(_QWORD **a1)
{
  _QWORD *v1;
  _QWORD *v2;
  int **v3;
  int **i;
  int *v5;
  int v6;
  NSObject *v7;
  int v8;
  _QWORD **v10;
  uint8_t buf[4];
  int v12;
  __int16 v13;
  int v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v10 = a1;
  v1 = *a1;
  v2 = (_QWORD *)**a1;
  v3 = (int **)v2[13];
  for (i = (int **)v2[14]; v3 != i; ++v3)
  {
    v5 = *v3;
    v6 = **v3;
    if (v6 == 8 || v6 == 72 || v6 == 34)
    {
      v7 = v2[4];
      if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
      {
        v8 = *((_DWORD *)v1 + 2);
        *(_DWORD *)buf = 67109376;
        v12 = v8;
        v13 = 1024;
        v14 = v6;
        _os_log_impl(&dword_1CC590000, v7, OS_LOG_TYPE_INFO, "core:#I Timer(tid=0x%x) notification to clients of cid 0x%x", buf, 0xEu);
        v5 = *v3;
      }
      sub_1CC5AE2C4((uint64_t)v5, *((_DWORD *)v1 + 2));
    }
  }
  MEMORY[0x1D17AD544](v1, 0x1020C403A5D3213);
  return sub_1CC59C45C((uint64_t *)&v10);
}

void sub_1CC5B1D1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v4;
  va_list va;

  va_start(va, a4);
  MEMORY[0x1D17AD544](v4, 0x1020C403A5D3213);
  sub_1CC59C45C((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1CC5B1D48(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E886B910;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1CC5B1D5C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E886B910;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1D17AD544);
}

void sub_1CC5B1D98(void ***a1)
{
  void **v1;
  uint64_t *v2;
  uint64_t *v4;
  void *v5;

  v1 = *a1;
  v2 = (uint64_t *)**a1;
  if (v2)
  {
    v4 = (uint64_t *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
        sub_1CC5B1370(--v4, 0);
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t *sub_1CC5B1E0C(uint64_t **a1)
{
  uint64_t *v1;
  uint64_t v2;
  int **v3;
  int **v4;
  uint64_t **v6;

  v6 = a1;
  v1 = *a1;
  v2 = **a1;
  awd::AWDServerFacade::tryInitialize(*(awd::AWDServerFacade **)(v2 + 88));
  v3 = *(int ***)(v2 + 104);
  v4 = *(int ***)(v2 + 112);
  while (v3 != v4)
  {
    awd::AWDServerFacade::registerAs(*(awd::AWDServerFacade **)(v2 + 88), *(_DWORD *)(v2 + 56), **v3, *((_BYTE *)*v3 + 4));
    ++v3;
  }
  MEMORY[0x1D17AD544](v1, 0x20C4093837F09);
  return sub_1CC59C45C((uint64_t *)&v6);
}

void sub_1CC5B1E94(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  MEMORY[0x1D17AD544](v2, 0x20C4093837F09);
  sub_1CC59C45C((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_1CC5B1EC4(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  unsigned int ComponentForMetricId;
  _DWORD *v4;
  uint64_t *v6;
  uint64_t v7;

  v1 = *a1;
  v6 = a1;
  v7 = v1;
  v2 = *(_QWORD *)v1;
  ComponentForMetricId = awd::getComponentForMetricId((awd *)**(unsigned int **)(v1 + 8));
  v4 = sub_1CC5AE748(v2, ComponentForMetricId);
  sub_1CC5AD8C4((uint64_t)v4, (unsigned int **)(v1 + 8));
  sub_1CC5B1F3C(&v7);
  return sub_1CC59C45C((uint64_t *)&v6);
}

void sub_1CC5B1F20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  sub_1CC5B1F3C(&a10);
  sub_1CC59C45C(&a9);
  _Unwind_Resume(a1);
}

uint64_t *sub_1CC5B1F3C(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 8);
    *(_QWORD *)(v2 + 8) = 0;
    if (v3)
      sub_1CC598A08(v2 + 8, v3);
    MEMORY[0x1D17AD544](v2, 0x20C40A4A59CD2);
  }
  return a1;
}

uint64_t *sub_1CC5B1F94(uint64_t **a1)
{
  uint64_t *v1;
  uint64_t v2;
  unsigned int ComponentForMetricId;
  unsigned int *v4;
  uint64_t **v6;

  v6 = a1;
  v1 = *a1;
  v2 = **a1;
  ComponentForMetricId = awd::getComponentForMetricId((awd *)*((unsigned int *)*a1 + 2));
  v4 = sub_1CC5AE748(v2, ComponentForMetricId);
  sub_1CC5AD604(v4, (wireless_diagnostics::google::protobuf::MessageLite *)*((unsigned int *)v1 + 2));
  MEMORY[0x1D17AD544](v1, 0x1020C403A5D3213);
  return sub_1CC59C45C((uint64_t *)&v6);
}

void sub_1CC5B1FFC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  MEMORY[0x1D17AD544](v2, 0x1020C403A5D3213);
  sub_1CC59C45C((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_1CC5B2028(uint64_t **a1)
{
  uint64_t *v1;
  uint64_t v2;
  unsigned int ComponentForMetricId;
  unsigned int *v4;
  uint64_t **v6;

  v6 = a1;
  v1 = *a1;
  v2 = **a1;
  ComponentForMetricId = awd::getComponentForMetricId((awd *)*((unsigned int *)*a1 + 2));
  v4 = sub_1CC5AE748(v2, ComponentForMetricId);
  sub_1CC5AD67C(v4, (wireless_diagnostics::google::protobuf::MessageLite *)*((unsigned int *)v1 + 2), *((_BYTE *)v1 + 12));
  MEMORY[0x1D17AD544](v1, 0x1020C4034E03FFCLL);
  return sub_1CC59C45C((uint64_t *)&v6);
}

void sub_1CC5B2094(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  MEMORY[0x1D17AD544](v2, 0x1020C4034E03FFCLL);
  sub_1CC59C45C((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_1CC5B20C0(uint64_t **a1)
{
  uint64_t *v1;
  uint64_t v2;
  unsigned int ComponentForMetricId;
  unsigned int *v4;
  uint64_t **v6;

  v6 = a1;
  v1 = *a1;
  v2 = **a1;
  ComponentForMetricId = awd::getComponentForMetricId((awd *)*((unsigned int *)*a1 + 2));
  v4 = sub_1CC5AE748(v2, ComponentForMetricId);
  sub_1CC5AD6F4(v4, (wireless_diagnostics::google::protobuf::MessageLite *)*((unsigned int *)v1 + 2), v1[2]);
  MEMORY[0x1D17AD544](v1, 0x1020C40A122CEF7);
  return sub_1CC59C45C((uint64_t *)&v6);
}

void sub_1CC5B212C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  MEMORY[0x1D17AD544](v2, 0x1020C40A122CEF7);
  sub_1CC59C45C((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_1CC5B2158(uint64_t **a1)
{
  uint64_t *v1;
  uint64_t v2;
  unsigned int ComponentForMetricId;
  unsigned int *v4;
  uint64_t **v6;

  v6 = a1;
  v1 = *a1;
  v2 = **a1;
  ComponentForMetricId = awd::getComponentForMetricId((awd *)*((unsigned int *)*a1 + 2));
  v4 = sub_1CC5AE748(v2, ComponentForMetricId);
  sub_1CC5AD76C(v4, (wireless_diagnostics::google::protobuf::MessageLite *)*((unsigned int *)v1 + 2), v1[2]);
  MEMORY[0x1D17AD544](v1, 0x1020C40A122CEF7);
  return sub_1CC59C45C((uint64_t *)&v6);
}

void sub_1CC5B21C4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  MEMORY[0x1D17AD544](v2, 0x1020C40A122CEF7);
  sub_1CC59C45C((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_1CC5B21F0(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  unsigned int ComponentForMetricId;
  unsigned int *v4;
  uint64_t *v6;
  uint64_t v7;

  v1 = *a1;
  v6 = a1;
  v7 = v1;
  v2 = *(_QWORD *)v1;
  ComponentForMetricId = awd::getComponentForMetricId((awd *)*(unsigned int *)(v1 + 8));
  v4 = sub_1CC5AE748(v2, ComponentForMetricId);
  sub_1CC5AD7E4(v4, (wireless_diagnostics::google::protobuf::MessageLite *)*(unsigned int *)(v1 + 8), v1 + 16);
  sub_1CC5B2268(&v7);
  return sub_1CC59C45C((uint64_t *)&v6);
}

void sub_1CC5B224C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  sub_1CC5B2268(&a10);
  sub_1CC59C45C(&a9);
  _Unwind_Resume(a1);
}

uint64_t *sub_1CC5B2268(uint64_t *a1)
{
  uint64_t v2;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*(char *)(v2 + 39) < 0)
      operator delete(*(void **)(v2 + 16));
    MEMORY[0x1D17AD544](v2, 0x1032C40FADB2794);
  }
  return a1;
}

void sub_1CC5B22BC(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_debug_impl(a1, a2, OS_LOG_TYPE_DEBUG, a4, &a9, 8u);
}

uint64_t awd::profile::protobuf_ShutdownFile_AwdProfile_2eproto(awd::profile *this)
{
  uint64_t result;

  if (awd::profile::ProcessingRule::default_instance_)
    (*(void (**)(uint64_t))(*(_QWORD *)awd::profile::ProcessingRule::default_instance_ + 8))(awd::profile::ProcessingRule::default_instance_);
  if (awd::profile::BedfTreeNode::default_instance_)
    (*(void (**)(uint64_t))(*(_QWORD *)awd::profile::BedfTreeNode::default_instance_ + 8))(awd::profile::BedfTreeNode::default_instance_);
  if (awd::profile::BedfConfig::default_instance_)
    (*(void (**)(uint64_t))(*(_QWORD *)awd::profile::BedfConfig::default_instance_ + 8))(awd::profile::BedfConfig::default_instance_);
  if (awd::profile::Metric::default_instance_)
    (*(void (**)(uint64_t))(*(_QWORD *)awd::profile::Metric::default_instance_ + 8))(awd::profile::Metric::default_instance_);
  if (awd::profile::Profile::default_instance_)
    (*(void (**)(uint64_t))(*(_QWORD *)awd::profile::Profile::default_instance_ + 8))(awd::profile::Profile::default_instance_);
  if (awd::profile::LogParameter::default_instance_)
    (*(void (**)(uint64_t))(*(_QWORD *)awd::profile::LogParameter::default_instance_ + 8))(awd::profile::LogParameter::default_instance_);
  if (awd::profile::Log::default_instance_)
    (*(void (**)(uint64_t))(*(_QWORD *)awd::profile::Log::default_instance_ + 8))(awd::profile::Log::default_instance_);
  if (awd::profile::ConfigurationParameter::default_instance_)
    (*(void (**)(uint64_t))(*(_QWORD *)awd::profile::ConfigurationParameter::default_instance_ + 8))(awd::profile::ConfigurationParameter::default_instance_);
  if (awd::profile::ComponentConfiguration::default_instance_)
    (*(void (**)(uint64_t))(*(_QWORD *)awd::profile::ComponentConfiguration::default_instance_ + 8))(awd::profile::ComponentConfiguration::default_instance_);
  if (awd::profile::TimerSpec::default_instance_)
    (*(void (**)(uint64_t))(*(_QWORD *)awd::profile::TimerSpec::default_instance_ + 8))(awd::profile::TimerSpec::default_instance_);
  if (awd::profile::TypeVariant::default_instance_)
    (*(void (**)(uint64_t))(*(_QWORD *)awd::profile::TypeVariant::default_instance_ + 8))(awd::profile::TypeVariant::default_instance_);
  if (awd::profile::Condition::default_instance_)
    (*(void (**)(uint64_t))(*(_QWORD *)awd::profile::Condition::default_instance_ + 8))(awd::profile::Condition::default_instance_);
  if (awd::profile::ConditionClause::default_instance_)
    (*(void (**)(uint64_t))(*(_QWORD *)awd::profile::ConditionClause::default_instance_ + 8))(awd::profile::ConditionClause::default_instance_);
  if (awd::profile::TriggerSource::default_instance_)
    (*(void (**)(uint64_t))(*(_QWORD *)awd::profile::TriggerSource::default_instance_ + 8))(awd::profile::TriggerSource::default_instance_);
  if (awd::profile::TriggerProcessingRule::default_instance_)
    (*(void (**)(uint64_t))(*(_QWORD *)awd::profile::TriggerProcessingRule::default_instance_ + 8))(awd::profile::TriggerProcessingRule::default_instance_);
  if (awd::profile::AggregationSpec::default_instance_)
    (*(void (**)(uint64_t))(*(_QWORD *)awd::profile::AggregationSpec::default_instance_ + 8))(awd::profile::AggregationSpec::default_instance_);
  if (awd::profile::MetricFileSpec::default_instance_)
    (*(void (**)(uint64_t))(*(_QWORD *)awd::profile::MetricFileSpec::default_instance_ + 8))(awd::profile::MetricFileSpec::default_instance_);
  if (awd::profile::TaskingCriteria::default_instance_)
    (*(void (**)(uint64_t))(*(_QWORD *)awd::profile::TaskingCriteria::default_instance_ + 8))(awd::profile::TaskingCriteria::default_instance_);
  result = awd::profile::DeviceConfiguration::default_instance_;
  if (awd::profile::DeviceConfiguration::default_instance_)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)awd::profile::DeviceConfiguration::default_instance_ + 8))(awd::profile::DeviceConfiguration::default_instance_);
  return result;
}

double awd::profile::ProcessingRule::ProcessingRule(awd::profile::ProcessingRule *this)
{
  double result;

  *(_QWORD *)this = &off_1E886B250;
  *((_QWORD *)this + 6) = 0;
  *((_DWORD *)this + 11) = 0;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *((_BYTE *)this + 40) = 0;
  return result;
}

{
  double result;

  *(_QWORD *)this = &off_1E886B250;
  *((_QWORD *)this + 6) = 0;
  *((_DWORD *)this + 11) = 0;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *((_BYTE *)this + 40) = 0;
  return result;
}

double awd::profile::BedfTreeNode::BedfTreeNode(awd::profile::BedfTreeNode *this)
{
  double result;

  *(_QWORD *)this = &off_1E886B070;
  *((_QWORD *)this + 6) = 0;
  *((_QWORD *)this + 7) = 0;
  *(_QWORD *)&result = 0x100000000;
  *((_QWORD *)this + 1) = 0x100000000;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  return result;
}

{
  double result;

  *(_QWORD *)this = &off_1E886B070;
  *((_QWORD *)this + 6) = 0;
  *((_QWORD *)this + 7) = 0;
  *(_QWORD *)&result = 0x100000000;
  *((_QWORD *)this + 1) = 0x100000000;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  return result;
}

double awd::profile::BedfConfig::BedfConfig(awd::profile::BedfConfig *this)
{
  double result;

  *(_QWORD *)this = &off_1E886AF80;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *((_QWORD *)this + 5) = 0;
  return result;
}

{
  double result;

  *(_QWORD *)this = &off_1E886AF80;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *((_QWORD *)this + 5) = 0;
  return result;
}

double awd::profile::Metric::Metric(awd::profile::Metric *this)
{
  double result;

  *(_QWORD *)this = &off_1E886B688;
  *((_QWORD *)this + 9) = 0;
  *((_QWORD *)this + 10) = 0;
  *((_DWORD *)this + 22) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = 0;
  *((_DWORD *)this + 28) = 0;
  *((_QWORD *)this + 15) = 0;
  *((_DWORD *)this + 32) = 0;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *((_BYTE *)this + 40) = 0;
  *(_QWORD *)((char *)this + 44) = 0;
  *(_QWORD *)((char *)this + 60) = 0;
  *(_QWORD *)((char *)this + 52) = 0;
  return result;
}

{
  double result;

  *(_QWORD *)this = &off_1E886B688;
  *((_QWORD *)this + 9) = 0;
  *((_QWORD *)this + 10) = 0;
  *((_DWORD *)this + 22) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = 0;
  *((_DWORD *)this + 28) = 0;
  *((_QWORD *)this + 15) = 0;
  *((_DWORD *)this + 32) = 0;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *((_BYTE *)this + 40) = 0;
  *(_QWORD *)((char *)this + 44) = 0;
  *(_QWORD *)((char *)this + 60) = 0;
  *(_QWORD *)((char *)this + 52) = 0;
  return result;
}

double awd::profile::Profile::Profile(awd::profile::Profile *this)
{
  double result;

  *(_QWORD *)this = &off_1E886B700;
  *((_DWORD *)this + 28) = 0;
  *((_BYTE *)this + 116) = 0;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *((_DWORD *)this + 14) = 0;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *(_OWORD *)((char *)this + 92) = 0u;
  *((_QWORD *)this + 15) = MEMORY[0x1E0DE8338];
  *((_QWORD *)this + 16) = 0;
  return result;
}

{
  double result;

  *(_QWORD *)this = &off_1E886B700;
  *((_DWORD *)this + 28) = 0;
  *((_BYTE *)this + 116) = 0;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *((_DWORD *)this + 14) = 0;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *(_OWORD *)((char *)this + 92) = 0u;
  *((_QWORD *)this + 15) = MEMORY[0x1E0DE8338];
  *((_QWORD *)this + 16) = 0;
  return result;
}

_QWORD *awd::profile::LogParameter::LogParameter(_QWORD *this)
{
  uint64_t v1;

  v1 = MEMORY[0x1E0DE8338];
  *this = &off_1E886B0E8;
  this[1] = v1;
  this[2] = v1;
  this[3] = 0;
  return this;
}

{
  uint64_t v1;

  v1 = MEMORY[0x1E0DE8338];
  *this = &off_1E886B0E8;
  this[1] = v1;
  this[2] = v1;
  this[3] = 0;
  return this;
}

uint64_t awd::profile::Log::Log(uint64_t this)
{
  *(_QWORD *)(this + 8) = 0;
  *(_QWORD *)(this + 16) = 0;
  *(_QWORD *)this = &off_1E886B610;
  *(_DWORD *)(this + 24) = 0;
  *(_QWORD *)(this + 32) = 0;
  return this;
}

{
  *(_QWORD *)(this + 8) = 0;
  *(_QWORD *)(this + 16) = 0;
  *(_QWORD *)this = &off_1E886B610;
  *(_DWORD *)(this + 24) = 0;
  *(_QWORD *)(this + 32) = 0;
  return this;
}

_QWORD *awd::profile::ConfigurationParameter::ConfigurationParameter(_QWORD *this)
{
  uint64_t v1;

  v1 = MEMORY[0x1E0DE8338];
  *this = &off_1E886B598;
  this[1] = v1;
  this[2] = 0;
  this[3] = 0;
  return this;
}

{
  uint64_t v1;

  v1 = MEMORY[0x1E0DE8338];
  *this = &off_1E886B598;
  this[1] = v1;
  this[2] = 0;
  this[3] = 0;
  return this;
}

uint64_t awd::profile::ComponentConfiguration::ComponentConfiguration(uint64_t this)
{
  *(_QWORD *)(this + 8) = 0;
  *(_QWORD *)(this + 16) = 0;
  *(_QWORD *)this = &off_1E886B520;
  *(_DWORD *)(this + 24) = 0;
  *(_QWORD *)(this + 32) = 0;
  *(_QWORD *)(this + 40) = 0;
  *(_DWORD *)(this + 48) = 0;
  *(_QWORD *)(this + 88) = 0;
  *(_QWORD *)(this + 64) = 0;
  *(_QWORD *)(this + 72) = 0;
  *(_QWORD *)(this + 56) = 0;
  *(_DWORD *)(this + 80) = 0;
  return this;
}

{
  *(_QWORD *)(this + 8) = 0;
  *(_QWORD *)(this + 16) = 0;
  *(_QWORD *)this = &off_1E886B520;
  *(_DWORD *)(this + 24) = 0;
  *(_QWORD *)(this + 32) = 0;
  *(_QWORD *)(this + 40) = 0;
  *(_DWORD *)(this + 48) = 0;
  *(_QWORD *)(this + 88) = 0;
  *(_QWORD *)(this + 64) = 0;
  *(_QWORD *)(this + 72) = 0;
  *(_QWORD *)(this + 56) = 0;
  *(_DWORD *)(this + 80) = 0;
  return this;
}

uint64_t awd::profile::TimerSpec::TimerSpec(uint64_t this)
{
  *(_QWORD *)(this + 8) = 0;
  *(_QWORD *)(this + 16) = 0;
  *(_QWORD *)this = &off_1E886B7F0;
  *(_DWORD *)(this + 24) = 0;
  return this;
}

{
  *(_QWORD *)(this + 8) = 0;
  *(_QWORD *)(this + 16) = 0;
  *(_QWORD *)this = &off_1E886B7F0;
  *(_DWORD *)(this + 24) = 0;
  return this;
}

double awd::profile::TypeVariant::TypeVariant(awd::profile::TypeVariant *this)
{
  double result;
  uint64_t v2;

  *(_QWORD *)this = &off_1E886AFF8;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *((_DWORD *)this + 10) = 0;
  v2 = MEMORY[0x1E0DE8338];
  *((_BYTE *)this + 44) = 0;
  *((_QWORD *)this + 6) = v2;
  *((_QWORD *)this + 7) = v2;
  *((_QWORD *)this + 8) = 0;
  *((_DWORD *)this + 18) = 0;
  return result;
}

{
  double result;
  uint64_t v2;

  *(_QWORD *)this = &off_1E886AFF8;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *((_DWORD *)this + 10) = 0;
  v2 = MEMORY[0x1E0DE8338];
  *((_BYTE *)this + 44) = 0;
  *((_QWORD *)this + 6) = v2;
  *((_QWORD *)this + 7) = v2;
  *((_QWORD *)this + 8) = 0;
  *((_DWORD *)this + 18) = 0;
  return result;
}

uint64_t awd::profile::Condition::Condition(uint64_t this)
{
  uint64_t v1;

  *(_QWORD *)(this + 8) = 0;
  *(_QWORD *)(this + 16) = 0;
  *(_QWORD *)this = &off_1E886B778;
  *(_QWORD *)(this + 21) = 0;
  *(_QWORD *)(this + 32) = 0;
  *(_QWORD *)(this + 40) = 0;
  v1 = MEMORY[0x1E0DE8338];
  *(_QWORD *)(this + 48) = 0;
  *(_QWORD *)(this + 56) = v1;
  *(_BYTE *)(this + 29) = 0;
  *(_QWORD *)(this + 64) = 0;
  return this;
}

{
  uint64_t v1;

  *(_QWORD *)(this + 8) = 0;
  *(_QWORD *)(this + 16) = 0;
  *(_QWORD *)this = &off_1E886B778;
  *(_QWORD *)(this + 21) = 0;
  *(_QWORD *)(this + 32) = 0;
  *(_QWORD *)(this + 40) = 0;
  v1 = MEMORY[0x1E0DE8338];
  *(_QWORD *)(this + 48) = 0;
  *(_QWORD *)(this + 56) = v1;
  *(_BYTE *)(this + 29) = 0;
  *(_QWORD *)(this + 64) = 0;
  return this;
}

uint64_t awd::profile::ConditionClause::ConditionClause(uint64_t this)
{
  *(_QWORD *)(this + 8) = 0;
  *(_QWORD *)(this + 16) = 0;
  *(_QWORD *)this = &off_1E886B340;
  *(_DWORD *)(this + 24) = 0;
  *(_QWORD *)(this + 32) = 0;
  return this;
}

{
  *(_QWORD *)(this + 8) = 0;
  *(_QWORD *)(this + 16) = 0;
  *(_QWORD *)this = &off_1E886B340;
  *(_DWORD *)(this + 24) = 0;
  *(_QWORD *)(this + 32) = 0;
  return this;
}

double awd::profile::TriggerSource::TriggerSource(awd::profile::TriggerSource *this)
{
  double result;

  *(_QWORD *)this = &off_1E886B160;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *((_DWORD *)this + 10) = 0;
  *((_QWORD *)this + 6) = MEMORY[0x1E0DE8338];
  *((_QWORD *)this + 7) = 0;
  return result;
}

{
  double result;

  *(_QWORD *)this = &off_1E886B160;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *((_DWORD *)this + 10) = 0;
  *((_QWORD *)this + 6) = MEMORY[0x1E0DE8338];
  *((_QWORD *)this + 7) = 0;
  return result;
}

double awd::profile::TriggerProcessingRule::TriggerProcessingRule(awd::profile::TriggerProcessingRule *this)
{
  double result;

  *(_QWORD *)this = &off_1E886B4A8;
  *((_QWORD *)this + 6) = 0;
  *((_QWORD *)this + 7) = 0;
  *((_DWORD *)this + 16) = 0;
  *((_QWORD *)this + 9) = 0;
  *((_DWORD *)this + 20) = 0;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *((_DWORD *)this + 10) = 0;
  return result;
}

{
  double result;

  *(_QWORD *)this = &off_1E886B4A8;
  *((_QWORD *)this + 6) = 0;
  *((_QWORD *)this + 7) = 0;
  *((_DWORD *)this + 16) = 0;
  *((_QWORD *)this + 9) = 0;
  *((_DWORD *)this + 20) = 0;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *((_DWORD *)this + 10) = 0;
  return result;
}

uint64_t awd::profile::AggregationSpec::AggregationSpec(uint64_t this)
{
  uint64_t v1;

  *(_QWORD *)(this + 16) = 0;
  v1 = MEMORY[0x1E0DE8338];
  *(_QWORD *)this = &off_1E886B2C8;
  *(_QWORD *)(this + 8) = v1;
  *(_DWORD *)(this + 24) = 0;
  return this;
}

{
  uint64_t v1;

  *(_QWORD *)(this + 16) = 0;
  v1 = MEMORY[0x1E0DE8338];
  *(_QWORD *)this = &off_1E886B2C8;
  *(_QWORD *)(this + 8) = v1;
  *(_DWORD *)(this + 24) = 0;
  return this;
}

double awd::profile::MetricFileSpec::MetricFileSpec(awd::profile::MetricFileSpec *this)
{
  double result;

  *(_QWORD *)this = &off_1E886B1D8;
  *(_QWORD *)&result = 0x100000000;
  *((_QWORD *)this + 1) = 0x100000000;
  *((_DWORD *)this + 4) = 0;
  *((_BYTE *)this + 20) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = 0;
  return result;
}

{
  double result;

  *(_QWORD *)this = &off_1E886B1D8;
  *(_QWORD *)&result = 0x100000000;
  *((_QWORD *)this + 1) = 0x100000000;
  *((_DWORD *)this + 4) = 0;
  *((_BYTE *)this + 20) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = 0;
  return result;
}

_QWORD *awd::profile::TaskingCriteria::TaskingCriteria(_QWORD *this)
{
  *this = &off_1E886B3B8;
  this[1] = 0;
  this[2] = 0;
  this[3] = 0;
  return this;
}

{
  *this = &off_1E886B3B8;
  this[1] = 0;
  this[2] = 0;
  this[3] = 0;
  return this;
}

uint64_t awd::profile::DeviceConfiguration::DeviceConfiguration(uint64_t this)
{
  *(_QWORD *)(this + 8) = 0;
  *(_QWORD *)(this + 16) = 0;
  *(_QWORD *)this = &off_1E886B430;
  *(_DWORD *)(this + 24) = 0;
  *(_QWORD *)(this + 40) = 0;
  *(_QWORD *)(this + 48) = 0;
  *(_DWORD *)(this + 56) = 0;
  *(_QWORD *)(this + 80) = 0;
  *(_DWORD *)(this + 88) = 0;
  *(_QWORD *)(this + 96) = 0;
  *(_QWORD *)(this + 104) = 0;
  *(_DWORD *)(this + 112) = 0;
  *(_QWORD *)(this + 120) = 0;
  *(_QWORD *)(this + 128) = 0;
  *(_DWORD *)(this + 136) = 0;
  *(_DWORD *)(this + 168) = 0;
  *(_QWORD *)(this + 160) = 0;
  *(_QWORD *)(this + 176) = 0;
  *(_QWORD *)(this + 184) = 0;
  *(_DWORD *)(this + 192) = 0;
  *(_DWORD *)(this + 32) = 0;
  *(_BYTE *)(this + 36) = 0;
  *(_QWORD *)(this + 200) = 0;
  *(_QWORD *)(this + 64) = MEMORY[0x1E0DE8338];
  *(_QWORD *)(this + 72) = 0;
  *(_QWORD *)(this + 144) = 0;
  *(_QWORD *)(this + 152) = 0;
  *(_DWORD *)(this + 208) = 0;
  return this;
}

{
  *(_QWORD *)(this + 8) = 0;
  *(_QWORD *)(this + 16) = 0;
  *(_QWORD *)this = &off_1E886B430;
  *(_DWORD *)(this + 24) = 0;
  *(_QWORD *)(this + 40) = 0;
  *(_QWORD *)(this + 48) = 0;
  *(_DWORD *)(this + 56) = 0;
  *(_QWORD *)(this + 80) = 0;
  *(_DWORD *)(this + 88) = 0;
  *(_QWORD *)(this + 96) = 0;
  *(_QWORD *)(this + 104) = 0;
  *(_DWORD *)(this + 112) = 0;
  *(_QWORD *)(this + 120) = 0;
  *(_QWORD *)(this + 128) = 0;
  *(_DWORD *)(this + 136) = 0;
  *(_DWORD *)(this + 168) = 0;
  *(_QWORD *)(this + 160) = 0;
  *(_QWORD *)(this + 176) = 0;
  *(_QWORD *)(this + 184) = 0;
  *(_DWORD *)(this + 192) = 0;
  *(_DWORD *)(this + 32) = 0;
  *(_BYTE *)(this + 36) = 0;
  *(_QWORD *)(this + 200) = 0;
  *(_QWORD *)(this + 64) = MEMORY[0x1E0DE8338];
  *(_QWORD *)(this + 72) = 0;
  *(_QWORD *)(this + 144) = 0;
  *(_QWORD *)(this + 152) = 0;
  *(_DWORD *)(this + 208) = 0;
  return this;
}

void awd::profile::ProcessingRule::InitAsDefaultInstance(awd::profile::ProcessingRule *this, uint64_t a2, uint64_t a3, const char *a4)
{
  uint64_t v5;

  v5 = awd::profile::ProcessingRule::default_instance_;
  if (!awd::profile::ProcessingRule::default_instance_)
  {
    awd::profile::protobuf_AddDesc_AwdProfile_2eproto(this, a2, a3, a4);
    v5 = awd::profile::ProcessingRule::default_instance_;
  }
  *((_QWORD *)this + 4) = v5;
}

void awd::profile::BedfTreeNode::InitAsDefaultInstance(awd::profile::BedfTreeNode *this, uint64_t a2, uint64_t a3, const char *a4)
{
  uint64_t v5;
  awd::profile *v6;
  uint64_t v7;
  uint64_t v8;
  const char *v9;

  v5 = awd::profile::BedfTreeNode::default_instance_;
  if (awd::profile::BedfTreeNode::default_instance_)
  {
    *((_QWORD *)this + 2) = awd::profile::BedfTreeNode::default_instance_;
  }
  else
  {
    awd::profile::protobuf_AddDesc_AwdProfile_2eproto(this, a2, a3, a4);
    v5 = awd::profile::BedfTreeNode::default_instance_;
    *((_QWORD *)this + 2) = awd::profile::BedfTreeNode::default_instance_;
    if (!v5)
    {
      awd::profile::protobuf_AddDesc_AwdProfile_2eproto(v6, v7, v8, v9);
      v5 = awd::profile::BedfTreeNode::default_instance_;
    }
  }
  *((_QWORD *)this + 3) = v5;
}

void awd::profile::BedfConfig::InitAsDefaultInstance(awd::profile::BedfConfig *this, uint64_t a2, uint64_t a3, const char *a4)
{
  uint64_t v5;

  v5 = awd::profile::BedfTreeNode::default_instance_;
  if (!awd::profile::BedfTreeNode::default_instance_)
  {
    awd::profile::protobuf_AddDesc_AwdProfile_2eproto(this, a2, a3, a4);
    v5 = awd::profile::BedfTreeNode::default_instance_;
  }
  *((_QWORD *)this + 2) = v5;
}

void awd::profile::Profile::InitAsDefaultInstance(awd::profile::Profile *this, uint64_t a2, uint64_t a3, const char *a4)
{
  uint64_t v5;

  v5 = awd::profile::Log::default_instance_;
  if (!awd::profile::Log::default_instance_)
  {
    awd::profile::protobuf_AddDesc_AwdProfile_2eproto(this, a2, a3, a4);
    v5 = awd::profile::Log::default_instance_;
  }
  *((_QWORD *)this + 9) = v5;
}

void awd::profile::ConfigurationParameter::InitAsDefaultInstance(awd::profile::ConfigurationParameter *this, uint64_t a2, uint64_t a3, const char *a4)
{
  uint64_t v5;

  v5 = awd::profile::TypeVariant::default_instance_;
  if (!awd::profile::TypeVariant::default_instance_)
  {
    awd::profile::protobuf_AddDesc_AwdProfile_2eproto(this, a2, a3, a4);
    v5 = awd::profile::TypeVariant::default_instance_;
  }
  *((_QWORD *)this + 2) = v5;
}

void awd::profile::DeviceConfiguration::InitAsDefaultInstance(awd::profile::DeviceConfiguration *this, uint64_t a2, uint64_t a3, const char *a4)
{
  uint64_t v5;

  v5 = awd::profile::TaskingCriteria::default_instance_;
  if (!awd::profile::TaskingCriteria::default_instance_)
  {
    awd::profile::protobuf_AddDesc_AwdProfile_2eproto(this, a2, a3, a4);
    v5 = awd::profile::TaskingCriteria::default_instance_;
  }
  *((_QWORD *)this + 18) = v5;
}

BOOL awd::profile::RandomSource_IsValid(awd::profile *this)
{
  return (_DWORD)this == 0;
}

BOOL awd::profile::MetricFileType_IsValid(awd::profile *this)
{
  return ((_DWORD)this - 1) < 3;
}

BOOL awd::profile::AppleCareCategory_IsValid(awd::profile *this)
{
  return ((_DWORD)this - 1) < 2;
}

double awd::profile::ProcessingRule::SharedCtor(awd::profile::ProcessingRule *this)
{
  double result;

  *((_QWORD *)this + 6) = 0;
  *((_DWORD *)this + 11) = 0;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *((_BYTE *)this + 40) = 0;
  return result;
}

uint64_t awd::profile::ProcessingRule::default_instance(awd::profile::ProcessingRule *this, uint64_t a2, uint64_t a3, const char *a4)
{
  uint64_t result;

  result = awd::profile::ProcessingRule::default_instance_;
  if (!awd::profile::ProcessingRule::default_instance_)
  {
    awd::profile::protobuf_AddDesc_AwdProfile_2eproto(0, a2, a3, a4);
    return awd::profile::ProcessingRule::default_instance_;
  }
  return result;
}

awd::profile::ProcessingRule *awd::profile::ProcessingRule::ProcessingRule(awd::profile::ProcessingRule *this, const awd::profile::ProcessingRule *a2)
{
  *(_QWORD *)this = &off_1E886B250;
  *((_QWORD *)this + 6) = 0;
  *((_DWORD *)this + 11) = 0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *((_BYTE *)this + 40) = 0;
  awd::profile::ProcessingRule::MergeFrom(this, a2);
  return this;
}

void sub_1CC5B2A48(_Unwind_Exception *a1)
{
  wireless_diagnostics::google::protobuf::MessageLite *v1;

  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(v1);
  _Unwind_Resume(a1);
}

void awd::profile::ProcessingRule::MergeFrom(awd::profile::ProcessingRule *this, const awd::profile::ProcessingRule *a2)
{
  int v4;
  int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  char v10;
  uint64_t v11;
  const awd::profile::ProcessingRule *v12;
  _BYTE v13[48];

  if (a2 == this)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v13);
  }
  LOBYTE(v4) = *((_BYTE *)a2 + 52);
  if (!(_BYTE)v4)
    return;
  if ((*((_BYTE *)a2 + 52) & 1) != 0)
  {
    v6 = *((_DWORD *)a2 + 4);
    *((_DWORD *)this + 13) |= 1u;
    *((_DWORD *)this + 4) = v6;
    v4 = *((_DWORD *)a2 + 13);
    if ((v4 & 2) == 0)
    {
LABEL_6:
      if ((v4 & 4) == 0)
        goto LABEL_7;
      goto LABEL_15;
    }
  }
  else if ((*((_BYTE *)a2 + 52) & 2) == 0)
  {
    goto LABEL_6;
  }
  v7 = *((_QWORD *)a2 + 1);
  *((_DWORD *)this + 13) |= 2u;
  *((_QWORD *)this + 1) = v7;
  v4 = *((_DWORD *)a2 + 13);
  if ((v4 & 4) == 0)
  {
LABEL_7:
    if ((v4 & 8) == 0)
      goto LABEL_8;
    goto LABEL_16;
  }
LABEL_15:
  v8 = *((_QWORD *)a2 + 3);
  *((_DWORD *)this + 13) |= 4u;
  *((_QWORD *)this + 3) = v8;
  v4 = *((_DWORD *)a2 + 13);
  if ((v4 & 8) == 0)
  {
LABEL_8:
    if ((v4 & 0x10) == 0)
      goto LABEL_9;
LABEL_17:
    v10 = *((_BYTE *)a2 + 40);
    *((_DWORD *)this + 13) |= 0x10u;
    *((_BYTE *)this + 40) = v10;
    v4 = *((_DWORD *)a2 + 13);
    if ((v4 & 0x20) == 0)
    {
LABEL_10:
      if ((v4 & 0x40) == 0)
        return;
      goto LABEL_11;
    }
    goto LABEL_18;
  }
LABEL_16:
  v9 = *((_DWORD *)a2 + 5);
  *((_DWORD *)this + 13) |= 8u;
  *((_DWORD *)this + 5) = v9;
  v4 = *((_DWORD *)a2 + 13);
  if ((v4 & 0x10) != 0)
    goto LABEL_17;
LABEL_9:
  if ((v4 & 0x20) == 0)
    goto LABEL_10;
LABEL_18:
  *((_DWORD *)this + 13) |= 0x20u;
  v11 = *((_QWORD *)this + 4);
  if (!v11)
  {
    v11 = operator new();
    *(_QWORD *)v11 = &off_1E886B250;
    *(_QWORD *)(v11 + 48) = 0;
    *(_DWORD *)(v11 + 44) = 0;
    *(_OWORD *)(v11 + 8) = 0u;
    *(_OWORD *)(v11 + 24) = 0u;
    *(_BYTE *)(v11 + 40) = 0;
    *((_QWORD *)this + 4) = v11;
  }
  v12 = (const awd::profile::ProcessingRule *)*((_QWORD *)a2 + 4);
  if (!v12)
    v12 = *(const awd::profile::ProcessingRule **)(awd::profile::ProcessingRule::default_instance_ + 32);
  awd::profile::ProcessingRule::MergeFrom((awd::profile::ProcessingRule *)v11, v12);
  if ((*((_DWORD *)a2 + 13) & 0x40) != 0)
  {
LABEL_11:
    v5 = *((_DWORD *)a2 + 11);
    *((_DWORD *)this + 13) |= 0x40u;
    *((_DWORD *)this + 11) = v5;
  }
}

void sub_1CC5B2C04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void awd::profile::ProcessingRule::~ProcessingRule(awd::profile::ProcessingRule *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_1E886B250;
  if ((awd::profile::ProcessingRule *)awd::profile::ProcessingRule::default_instance_ != this)
  {
    v2 = *((_QWORD *)this + 4);
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  }
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

{
  awd::profile::ProcessingRule::~ProcessingRule(this);
  JUMPOUT(0x1D17AD544);
}

_QWORD *awd::profile::ProcessingRule::SharedDtor(_QWORD *this)
{
  if ((_QWORD *)awd::profile::ProcessingRule::default_instance_ != this)
  {
    this = (_QWORD *)this[4];
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

uint64_t awd::profile::ProcessingRule::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 48) = a2;
  return this;
}

double awd::profile::ProcessingRule::New(awd::profile::ProcessingRule *this)
{
  uint64_t v1;
  double result;

  v1 = operator new();
  *(_QWORD *)v1 = &off_1E886B250;
  *(_QWORD *)(v1 + 48) = 0;
  *(_DWORD *)(v1 + 44) = 0;
  result = 0.0;
  *(_OWORD *)(v1 + 8) = 0u;
  *(_OWORD *)(v1 + 24) = 0u;
  *(_BYTE *)(v1 + 40) = 0;
  return result;
}

uint64_t awd::profile::ProcessingRule::Clear(uint64_t this)
{
  uint64_t v1;
  char v2;

  v1 = this;
  v2 = *(_BYTE *)(this + 52);
  if (v2)
  {
    *(_BYTE *)(this + 40) = 0;
    *(_QWORD *)(this + 16) = 0;
    *(_QWORD *)(this + 24) = 0;
    *(_QWORD *)(this + 8) = 0;
    if ((v2 & 0x20) != 0)
    {
      this = *(_QWORD *)(this + 32);
      if (this)
        this = awd::profile::ProcessingRule::Clear((awd::profile::ProcessingRule *)this);
    }
    *(_DWORD *)(v1 + 44) = 0;
  }
  *(_DWORD *)(v1 + 52) = 0;
  return this;
}

uint64_t awd::profile::ProcessingRule::MergePartialFromCodedStream(awd::profile::ProcessingRule *this, wireless_diagnostics::google::protobuf::io::CodedInputStream *a2)
{
  unsigned int *v4;
  unint64_t *v5;
  unsigned int *v6;
  unsigned int *v7;
  char *v8;
  uint64_t TagFallback;
  int v10;
  unint64_t v11;
  unsigned __int8 *v12;
  unsigned __int8 *v13;
  unsigned __int8 *v14;
  unsigned __int8 *v15;
  unsigned __int8 *v16;
  int v17;
  uint64_t v18;
  char *v19;
  unint64_t v20;
  unsigned __int8 *v21;
  unint64_t v22;
  char *v23;
  int v24;
  int v25;
  int v26;
  BOOL v27;
  int v28;
  unsigned __int8 *v29;
  unsigned __int8 *v30;
  uint64_t result;
  unsigned __int8 *v32;
  unsigned __int8 *v33;
  unsigned int v34;
  unsigned __int8 *v35;
  unsigned int v36[2];

  v4 = (unsigned int *)((char *)this + 16);
  v5 = (unint64_t *)((char *)this + 8);
  v6 = (unsigned int *)((char *)this + 20);
  v7 = (unsigned int *)((char *)this + 44);
  while (2)
  {
    v8 = (char *)*((_QWORD *)a2 + 1);
    if ((unint64_t)v8 >= *((_QWORD *)a2 + 2) || *v8 < 0)
    {
      TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(a2);
      *((_DWORD *)a2 + 8) = TagFallback;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    else
    {
      TagFallback = *v8;
      *((_DWORD *)a2 + 8) = TagFallback;
      *((_QWORD *)a2 + 1) = v8 + 1;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    switch(TagFallback >> 3)
    {
      case 0x10u:
        v10 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_34;
        v12 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
        v11 = *((_QWORD *)a2 + 2);
        goto LABEL_10;
      case 0x11u:
        v10 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_34;
        v16 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
        v11 = *((_QWORD *)a2 + 2);
        goto LABEL_76;
      case 0x12u:
        v10 = TagFallback & 7;
        if (v10 != 2)
          goto LABEL_34;
        v17 = *((_DWORD *)this + 13);
        goto LABEL_22;
      case 0x13u:
        v10 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_34;
        v21 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
        v20 = *((_QWORD *)a2 + 2);
        goto LABEL_47;
      case 0x14u:
        v10 = TagFallback & 7;
        if (v10 == 1)
          goto LABEL_56;
        goto LABEL_34;
      case 0x15u:
        v10 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_34;
        v23 = (char *)*((_QWORD *)a2 + 1);
        v22 = *((_QWORD *)a2 + 2);
        goto LABEL_61;
      default:
        if (TagFallback >> 3 != 1)
        {
          v10 = TagFallback & 7;
LABEL_34:
          if (v10 == 4)
            return 1;
          if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(a2, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback) & 1) == 0)return 0;
          continue;
        }
        v10 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_34;
        v14 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
        v11 = *((_QWORD *)a2 + 2);
        if ((unint64_t)v14 >= v11 || (char)*v14 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v4);
          if (!(_DWORD)result)
            return result;
          v15 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
          v11 = *((_QWORD *)a2 + 2);
        }
        else
        {
          *v4 = *v14;
          v15 = v14 + 1;
          *((_QWORD *)a2 + 1) = v15;
        }
        *((_DWORD *)this + 13) |= 1u;
        if ((int)v11 - (int)v15 < 2 || *v15 != 128 || v15[1] != 1)
          continue;
        v12 = v15 + 2;
        *((_QWORD *)a2 + 1) = v12;
LABEL_10:
        if ((unint64_t)v12 >= v11 || (char)*v12 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint64Fallback(a2, v5);
          if (!(_DWORD)result)
            return result;
          v13 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
          v11 = *((_QWORD *)a2 + 2);
        }
        else
        {
          *v5 = *v12;
          v13 = v12 + 1;
          *((_QWORD *)a2 + 1) = v13;
        }
        *((_DWORD *)this + 13) |= 2u;
        if ((int)v11 - (int)v13 < 2 || *v13 != 136 || v13[1] != 1)
          continue;
        v16 = v13 + 2;
        *((_QWORD *)a2 + 1) = v16;
LABEL_76:
        v36[0] = 0;
        if ((unint64_t)v16 >= v11 || (char)*v16 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v36);
          if (!(_DWORD)result)
            return result;
          v34 = v36[0];
          v35 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
          v11 = *((_QWORD *)a2 + 2);
        }
        else
        {
          v34 = *v16;
          v35 = v16 + 1;
          *((_QWORD *)a2 + 1) = v35;
        }
        *((_BYTE *)this + 40) = v34 != 0;
        v17 = *((_DWORD *)this + 13) | 0x10;
        *((_DWORD *)this + 13) = v17;
        if ((int)v11 - (int)v35 < 2 || *v35 != 146 || v35[1] != 1)
          continue;
        *((_QWORD *)a2 + 1) = v35 + 2;
LABEL_22:
        *((_DWORD *)this + 13) = v17 | 0x20;
        v18 = *((_QWORD *)this + 4);
        if (!v18)
        {
          v18 = operator new();
          *(_QWORD *)v18 = &off_1E886B250;
          *(_QWORD *)(v18 + 48) = 0;
          *(_DWORD *)(v18 + 44) = 0;
          *(_OWORD *)(v18 + 8) = 0u;
          *(_OWORD *)(v18 + 24) = 0u;
          *(_BYTE *)(v18 + 40) = 0;
          *((_QWORD *)this + 4) = v18;
        }
        v36[0] = 0;
        v19 = (char *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v19 >= *((_QWORD *)a2 + 2) || *v19 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v36))return 0;
        }
        else
        {
          v36[0] = *v19;
          *((_QWORD *)a2 + 1) = v19 + 1;
        }
        v24 = *((_DWORD *)a2 + 14);
        v25 = *((_DWORD *)a2 + 15);
        *((_DWORD *)a2 + 14) = v24 + 1;
        if (v24 < v25)
        {
          wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(a2);
          if (awd::profile::ProcessingRule::MergePartialFromCodedStream((awd::profile::ProcessingRule *)v18, a2))
          {
            if (*((_BYTE *)a2 + 36))
            {
              wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(a2);
              v26 = *((_DWORD *)a2 + 14);
              v27 = __OFSUB__(v26, 1);
              v28 = v26 - 1;
              if (v28 < 0 == v27)
                *((_DWORD *)a2 + 14) = v28;
              v29 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
              v20 = *((_QWORD *)a2 + 2);
              if ((int)v20 - (int)v29 > 1 && *v29 == 152 && v29[1] == 1)
              {
                v21 = v29 + 2;
                *((_QWORD *)a2 + 1) = v21;
LABEL_47:
                if ((unint64_t)v21 >= v20 || (char)*v21 < 0)
                {
                  result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v6);
                  if (!(_DWORD)result)
                    return result;
                  v30 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
                  v20 = *((_QWORD *)a2 + 2);
                }
                else
                {
                  *v6 = *v21;
                  v30 = v21 + 1;
                  *((_QWORD *)a2 + 1) = v30;
                }
                *((_DWORD *)this + 13) |= 8u;
                if ((int)v20 - (int)v30 >= 2 && *v30 == 161 && v30[1] == 1)
                {
                  *((_QWORD *)a2 + 1) = v30 + 2;
LABEL_56:
                  *(_QWORD *)v36 = 0;
                  if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(a2, (unint64_t *)v36) & 1) == 0)return 0;
                  *((_QWORD *)this + 3) = *(_QWORD *)v36;
                  *((_DWORD *)this + 13) |= 4u;
                  v32 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
                  v22 = *((_QWORD *)a2 + 2);
                  if ((int)v22 - (int)v32 >= 2 && *v32 == 168 && v32[1] == 1)
                  {
                    v23 = (char *)(v32 + 2);
                    *((_QWORD *)a2 + 1) = v23;
LABEL_61:
                    if ((unint64_t)v23 >= v22 || *v23 < 0)
                    {
                      result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v7);
                      if (!(_DWORD)result)
                        return result;
                      v33 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
                      v22 = *((_QWORD *)a2 + 2);
                    }
                    else
                    {
                      *v7 = *v23;
                      v33 = (unsigned __int8 *)(v23 + 1);
                      *((_QWORD *)a2 + 1) = v33;
                    }
                    *((_DWORD *)this + 13) |= 0x40u;
                    if (v33 == (unsigned __int8 *)v22
                      && (*((_DWORD *)a2 + 11) || *((_DWORD *)a2 + 6) == *((_DWORD *)a2 + 10)))
                    {
                      *((_DWORD *)a2 + 8) = 0;
                      result = 1;
                      *((_BYTE *)a2 + 36) = 1;
                      return result;
                    }
                  }
                }
              }
              continue;
            }
          }
        }
        return 0;
    }
  }
}

uint64_t awd::profile::ProcessingRule::SerializeWithCachedSizes(uint64_t this, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a2, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  int v6;
  uint64_t v7;

  v5 = this;
  v6 = *(_DWORD *)(this + 52);
  if ((v6 & 1) != 0)
  {
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(unsigned int *)(this + 16), (uint64_t)a2, a4);
    v6 = *(_DWORD *)(v5 + 52);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 0x10) == 0)
        goto LABEL_4;
      goto LABEL_11;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt64((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x10, *(_QWORD *)(v5 + 8), (uint64_t)a2, a4);
  v6 = *(_DWORD *)(v5 + 52);
  if ((v6 & 0x10) == 0)
  {
LABEL_4:
    if ((v6 & 0x20) == 0)
      goto LABEL_5;
    goto LABEL_12;
  }
LABEL_11:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x11, *(unsigned __int8 *)(v5 + 40), (uint64_t)a2, a4);
  v6 = *(_DWORD *)(v5 + 52);
  if ((v6 & 0x20) == 0)
  {
LABEL_5:
    if ((v6 & 8) == 0)
      goto LABEL_6;
    goto LABEL_15;
  }
LABEL_12:
  v7 = *(_QWORD *)(v5 + 32);
  if (!v7)
    v7 = *(_QWORD *)(awd::profile::ProcessingRule::default_instance_ + 32);
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x12, v7, a2, a4);
  v6 = *(_DWORD *)(v5 + 52);
  if ((v6 & 8) == 0)
  {
LABEL_6:
    if ((v6 & 4) == 0)
      goto LABEL_7;
    goto LABEL_16;
  }
LABEL_15:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x13, *(unsigned int *)(v5 + 20), (uint64_t)a2, a4);
  v6 = *(_DWORD *)(v5 + 52);
  if ((v6 & 4) == 0)
  {
LABEL_7:
    if ((v6 & 0x40) == 0)
      return this;
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x15, *(unsigned int *)(v5 + 44), (uint64_t)a2, a4);
  }
LABEL_16:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x14, (uint64_t)a2, *(double *)(v5 + 24), a3);
  if ((*(_DWORD *)(v5 + 52) & 0x40) != 0)
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x15, *(unsigned int *)(v5 + 44), (uint64_t)a2, a4);
  return this;
}

uint64_t awd::profile::ProcessingRule::ByteSize(awd::profile::ProcessingRule *this)
{
  int v2;
  uint64_t v3;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v4;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v5;
  int v6;
  awd::profile::ProcessingRule *v7;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v8;
  int v9;
  int v10;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v11;
  int v12;

  LOBYTE(v2) = *((_BYTE *)this + 52);
  if (!(_BYTE)v2)
  {
    v3 = 0;
    goto LABEL_33;
  }
  if ((*((_BYTE *)this + 52) & 1) == 0)
  {
    LODWORD(v3) = 0;
    if ((*((_BYTE *)this + 52) & 2) == 0)
      goto LABEL_11;
    goto LABEL_10;
  }
  v4 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 4);
  if (v4 < 0x80)
  {
    LODWORD(v3) = 2;
    if ((v2 & 2) == 0)
      goto LABEL_11;
    goto LABEL_10;
  }
  LODWORD(v3) = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v4) + 1;
  v2 = *((_DWORD *)this + 13);
  if ((v2 & 2) != 0)
  {
LABEL_10:
    LODWORD(v3) = v3
                + wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize64(*((wireless_diagnostics::google::protobuf::io::CodedOutputStream **)this
                                                                                              + 1))
                + 2;
    v2 = *((_DWORD *)this + 13);
  }
LABEL_11:
  if ((v2 & 4) != 0)
    LODWORD(v3) = v3 + 10;
  if ((v2 & 8) != 0)
  {
    v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 5);
    if (v5 >= 0x80)
    {
      v6 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v5) + 2;
      v2 = *((_DWORD *)this + 13);
    }
    else
    {
      v6 = 3;
    }
    LODWORD(v3) = v6 + v3;
  }
  if ((v2 & 0x10) != 0)
    v3 = (v3 + 3);
  else
    v3 = v3;
  if ((v2 & 0x20) != 0)
  {
    v7 = (awd::profile::ProcessingRule *)*((_QWORD *)this + 4);
    if (!v7)
      v7 = *(awd::profile::ProcessingRule **)(awd::profile::ProcessingRule::default_instance_ + 32);
    v8 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)awd::profile::ProcessingRule::ByteSize(v7);
    v9 = (int)v8;
    if (v8 >= 0x80)
      v10 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v8);
    else
      v10 = 1;
    v3 = (v3 + v9 + v10 + 2);
    v2 = *((_DWORD *)this + 13);
  }
  if ((v2 & 0x40) != 0)
  {
    v11 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 11);
    if (v11 >= 0x80)
      v12 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v11) + 2;
    else
      v12 = 3;
    v3 = (v12 + v3);
  }
LABEL_33:
  *((_DWORD *)this + 12) = v3;
  return v3;
}

void awd::profile::ProcessingRule::CopyFrom(awd::profile::ProcessingRule *this, const awd::profile::ProcessingRule *a2)
{
  if (a2 != this)
  {
    (*(void (**)(awd::profile::ProcessingRule *))(*(_QWORD *)this + 32))(this);
    awd::profile::ProcessingRule::MergeFrom(this, a2);
  }
}

uint64_t awd::profile::ProcessingRule::IsInitialized(awd::profile::ProcessingRule *this)
{
  return 1;
}

double awd::profile::ProcessingRule::Swap(awd::profile::ProcessingRule *this, awd::profile::ProcessingRule *a2)
{
  int v2;
  uint64_t v3;
  double result;
  uint64_t v5;

  if (a2 != this)
  {
    v2 = *((_DWORD *)this + 4);
    *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
    *((_DWORD *)a2 + 4) = v2;
    v3 = *((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
    *((_QWORD *)a2 + 1) = v3;
    result = *((double *)this + 3);
    *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
    *((double *)a2 + 3) = result;
    LODWORD(v3) = *((_DWORD *)this + 5);
    *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
    *((_DWORD *)a2 + 5) = v3;
    LOBYTE(v3) = *((_BYTE *)this + 40);
    *((_BYTE *)this + 40) = *((_BYTE *)a2 + 40);
    *((_BYTE *)a2 + 40) = v3;
    v5 = *((_QWORD *)this + 4);
    *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
    *((_QWORD *)a2 + 4) = v5;
    LODWORD(v5) = *((_DWORD *)this + 11);
    *((_DWORD *)this + 11) = *((_DWORD *)a2 + 11);
    *((_DWORD *)a2 + 11) = v5;
    LODWORD(v5) = *((_DWORD *)this + 13);
    *((_DWORD *)this + 13) = *((_DWORD *)a2 + 13);
    *((_DWORD *)a2 + 13) = v5;
    LODWORD(v5) = *((_DWORD *)this + 12);
    *((_DWORD *)this + 12) = *((_DWORD *)a2 + 12);
    *((_DWORD *)a2 + 12) = v5;
  }
  return result;
}

_QWORD *awd::profile::ProcessingRule::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return sub_1CC59E69C(a1, "awd.profile.ProcessingRule");
}

BOOL awd::profile::BedfTreeNode_BedfNodeType_IsValid(awd::profile *this)
{
  return this < 4;
}

BOOL awd::profile::BedfTreeNode_BedfOperatorType_IsValid(awd::profile *this)
{
  return ((_DWORD)this - 1) < 0xC;
}

double awd::profile::BedfTreeNode::SharedCtor(awd::profile::BedfTreeNode *this)
{
  double result;

  *(_QWORD *)&result = 0x100000000;
  *((_QWORD *)this + 1) = 0x100000000;
  *((_QWORD *)this + 7) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 2) = 0;
  return result;
}

uint64_t awd::profile::BedfTreeNode::default_instance(awd::profile::BedfTreeNode *this, uint64_t a2, uint64_t a3, const char *a4)
{
  uint64_t result;

  result = awd::profile::BedfTreeNode::default_instance_;
  if (!awd::profile::BedfTreeNode::default_instance_)
  {
    awd::profile::protobuf_AddDesc_AwdProfile_2eproto(0, a2, a3, a4);
    return awd::profile::BedfTreeNode::default_instance_;
  }
  return result;
}

awd::profile::BedfTreeNode *awd::profile::BedfTreeNode::BedfTreeNode(awd::profile::BedfTreeNode *this, const awd::profile::BedfTreeNode *a2)
{
  *(_QWORD *)this = &off_1E886B070;
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 6) = 0;
  *((_QWORD *)this + 7) = 0;
  *((_QWORD *)this + 1) = 0x100000000;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 2) = 0;
  awd::profile::BedfTreeNode::MergeFrom(this, a2);
  return this;
}

void sub_1CC5B3674(_Unwind_Exception *a1)
{
  wireless_diagnostics::google::protobuf::MessageLite *v1;
  _QWORD *v2;
  _QWORD *v3;

  v3 = v2;
  if (*v3)
    MEMORY[0x1D17AD52C](*v3, 0x1000C8052888210);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(v1);
  _Unwind_Resume(a1);
}

void awd::profile::BedfTreeNode::MergeFrom(awd::profile::BedfTreeNode *this, const awd::profile::BedfTreeNode *a2)
{
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  awd::profile::BedfTreeNode *v9;
  const awd::profile::BedfTreeNode *v10;
  awd::profile::BedfTreeNode *v11;
  const awd::profile::BedfTreeNode *v12;
  int v13;
  _BYTE v14[48];

  if (a2 == this)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v14);
  }
  v4 = *((_DWORD *)a2 + 12);
  if (v4)
  {
    sub_1CC5C2EE8((_DWORD *)this + 10, *((_DWORD *)this + 12) + v4);
    memcpy((void *)(*((_QWORD *)this + 5) + 4 * *((int *)this + 12)), *((const void **)a2 + 5), 4 * *((int *)a2 + 12));
    *((_DWORD *)this + 12) += *((_DWORD *)a2 + 12);
  }
  LOBYTE(v5) = *((_BYTE *)a2 + 60);
  if ((_BYTE)v5)
  {
    if ((*((_BYTE *)a2 + 60) & 1) != 0)
    {
      v7 = *((_DWORD *)a2 + 2);
      *((_DWORD *)this + 15) |= 1u;
      *((_DWORD *)this + 2) = v7;
      v5 = *((_DWORD *)a2 + 15);
      if ((v5 & 2) == 0)
      {
LABEL_8:
        if ((v5 & 4) == 0)
          goto LABEL_9;
        goto LABEL_16;
      }
    }
    else if ((*((_BYTE *)a2 + 60) & 2) == 0)
    {
      goto LABEL_8;
    }
    v8 = *((_DWORD *)a2 + 3);
    *((_DWORD *)this + 15) |= 2u;
    *((_DWORD *)this + 3) = v8;
    v5 = *((_DWORD *)a2 + 15);
    if ((v5 & 4) == 0)
    {
LABEL_9:
      if ((v5 & 8) == 0)
        goto LABEL_10;
      goto LABEL_21;
    }
LABEL_16:
    *((_DWORD *)this + 15) |= 4u;
    v9 = (awd::profile::BedfTreeNode *)*((_QWORD *)this + 2);
    if (!v9)
    {
      v9 = (awd::profile::BedfTreeNode *)operator new();
      *(_QWORD *)v9 = &off_1E886B070;
      *((_QWORD *)v9 + 6) = 0;
      *((_QWORD *)v9 + 7) = 0;
      *((_QWORD *)v9 + 1) = 0x100000000;
      *((_QWORD *)v9 + 4) = 0;
      *((_QWORD *)v9 + 5) = 0;
      *((_QWORD *)v9 + 2) = 0;
      *((_QWORD *)v9 + 3) = 0;
      *((_QWORD *)this + 2) = v9;
    }
    v10 = (const awd::profile::BedfTreeNode *)*((_QWORD *)a2 + 2);
    if (!v10)
      v10 = *(const awd::profile::BedfTreeNode **)(awd::profile::BedfTreeNode::default_instance_ + 16);
    awd::profile::BedfTreeNode::MergeFrom(v9, v10);
    v5 = *((_DWORD *)a2 + 15);
    if ((v5 & 8) == 0)
    {
LABEL_10:
      if ((v5 & 0x10) == 0)
        goto LABEL_11;
      goto LABEL_26;
    }
LABEL_21:
    *((_DWORD *)this + 15) |= 8u;
    v11 = (awd::profile::BedfTreeNode *)*((_QWORD *)this + 3);
    if (!v11)
    {
      v11 = (awd::profile::BedfTreeNode *)operator new();
      *(_QWORD *)v11 = &off_1E886B070;
      *((_QWORD *)v11 + 6) = 0;
      *((_QWORD *)v11 + 7) = 0;
      *((_QWORD *)v11 + 1) = 0x100000000;
      *((_QWORD *)v11 + 4) = 0;
      *((_QWORD *)v11 + 5) = 0;
      *((_QWORD *)v11 + 2) = 0;
      *((_QWORD *)v11 + 3) = 0;
      *((_QWORD *)this + 3) = v11;
    }
    v12 = (const awd::profile::BedfTreeNode *)*((_QWORD *)a2 + 3);
    if (!v12)
      v12 = *(const awd::profile::BedfTreeNode **)(awd::profile::BedfTreeNode::default_instance_ + 24);
    awd::profile::BedfTreeNode::MergeFrom(v11, v12);
    v5 = *((_DWORD *)a2 + 15);
    if ((v5 & 0x10) == 0)
    {
LABEL_11:
      if ((v5 & 0x20) == 0)
        return;
      goto LABEL_12;
    }
LABEL_26:
    v13 = *((_DWORD *)a2 + 8);
    *((_DWORD *)this + 15) |= 0x10u;
    *((_DWORD *)this + 8) = v13;
    if ((*((_DWORD *)a2 + 15) & 0x20) == 0)
      return;
LABEL_12:
    v6 = *((_DWORD *)a2 + 9);
    *((_DWORD *)this + 15) |= 0x20u;
    *((_DWORD *)this + 9) = v6;
  }
}

void sub_1CC5B38CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void awd::profile::BedfTreeNode::~BedfTreeNode(awd::profile::BedfTreeNode *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_1E886B070;
  awd::profile::BedfTreeNode::SharedDtor(this);
  v2 = *((_QWORD *)this + 5);
  if (v2)
    MEMORY[0x1D17AD52C](v2, 0x1000C8052888210);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

{
  awd::profile::BedfTreeNode::~BedfTreeNode(this);
  JUMPOUT(0x1D17AD544);
}

_QWORD *awd::profile::BedfTreeNode::SharedDtor(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if ((_QWORD *)awd::profile::BedfTreeNode::default_instance_ != this)
  {
    v1 = this;
    v2 = this[2];
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
    this = (_QWORD *)v1[3];
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

uint64_t awd::profile::BedfTreeNode::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 56) = a2;
  return this;
}

double awd::profile::BedfTreeNode::New(awd::profile::BedfTreeNode *this)
{
  _QWORD *v1;
  double result;

  v1 = (_QWORD *)operator new();
  *v1 = &off_1E886B070;
  v1[6] = 0;
  v1[7] = 0;
  *(_QWORD *)&result = 0x100000000;
  v1[1] = 0x100000000;
  v1[4] = 0;
  v1[5] = 0;
  v1[2] = 0;
  v1[3] = 0;
  return result;
}

uint64_t awd::profile::BedfTreeNode::Clear(uint64_t this)
{
  uint64_t v1;
  int v2;

  v1 = this;
  LOBYTE(v2) = *(_BYTE *)(this + 60);
  if ((_BYTE)v2)
  {
    *(_QWORD *)(this + 8) = 0x100000000;
    if ((v2 & 4) != 0)
    {
      this = *(_QWORD *)(this + 16);
      if (this)
      {
        this = awd::profile::BedfTreeNode::Clear((awd::profile::BedfTreeNode *)this);
        v2 = *(_DWORD *)(v1 + 60);
      }
    }
    if ((v2 & 8) != 0)
    {
      this = *(_QWORD *)(v1 + 24);
      if (this)
        this = awd::profile::BedfTreeNode::Clear((awd::profile::BedfTreeNode *)this);
    }
    *(_QWORD *)(v1 + 32) = 0;
  }
  *(_DWORD *)(v1 + 48) = 0;
  *(_DWORD *)(v1 + 60) = 0;
  return this;
}

uint64_t awd::profile::BedfTreeNode::MergePartialFromCodedStream(awd::profile::BedfTreeNode *this, wireless_diagnostics::google::protobuf::io::CodedInputStream *a2)
{
  _DWORD *v4;
  char *v5;
  uint64_t TagFallback;
  int v7;
  char *v8;
  unsigned int v9;
  unint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  uint64_t result;
  _BYTE *v17;
  unsigned int v18;
  _BYTE *v19;
  awd::profile::BedfTreeNode *v20;
  char *v21;
  int v22;
  int v23;
  int v24;
  BOOL v25;
  int v26;
  _BYTE *v27;
  awd::profile::BedfTreeNode *v28;
  char *v29;
  int v30;
  int v31;
  int v32;
  int v33;
  char *v34;
  unsigned int v35;
  char *v36;
  unsigned int v37;
  char *v38;
  unsigned int v39;
  int v40;
  uint64_t v41;
  int v42;
  int v43;
  _BYTE *v44;
  unint64_t v45;
  unsigned int v46;
  uint64_t v47;
  unsigned int v48;

  v4 = (_DWORD *)((char *)this + 40);
  while (2)
  {
    v5 = (char *)*((_QWORD *)a2 + 1);
    if ((unint64_t)v5 >= *((_QWORD *)a2 + 2) || *v5 < 0)
    {
      TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(a2);
      *((_DWORD *)a2 + 8) = TagFallback;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    else
    {
      TagFallback = *v5;
      *((_DWORD *)a2 + 8) = TagFallback;
      *((_QWORD *)a2 + 1) = v5 + 1;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    switch(TagFallback >> 3)
    {
      case 1u:
        v7 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_26;
        v48 = 0;
        v8 = (char *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v8 >= *((_QWORD *)a2 + 2) || *v8 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v48);
          if (!(_DWORD)result)
            return result;
          v9 = v48;
        }
        else
        {
          v9 = *v8;
          *((_QWORD *)a2 + 1) = v8 + 1;
        }
        if (v9 <= 3)
        {
          *((_DWORD *)this + 15) |= 1u;
          *((_DWORD *)this + 2) = v9;
        }
        v17 = (_BYTE *)*((_QWORD *)a2 + 1);
        v10 = *((_QWORD *)a2 + 2);
        if ((unint64_t)v17 < v10 && *v17 == 16)
        {
          v11 = v17 + 1;
          *((_QWORD *)a2 + 1) = v11;
          goto LABEL_38;
        }
        continue;
      case 2u:
        v7 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_26;
        v11 = (char *)*((_QWORD *)a2 + 1);
        v10 = *((_QWORD *)a2 + 2);
LABEL_38:
        v48 = 0;
        if ((unint64_t)v11 >= v10 || *v11 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v48);
          if (!(_DWORD)result)
            return result;
          v18 = v48;
        }
        else
        {
          v18 = *v11;
          *((_QWORD *)a2 + 1) = v11 + 1;
        }
        if (v18 - 1 <= 0xB)
        {
          *((_DWORD *)this + 15) |= 2u;
          *((_DWORD *)this + 3) = v18;
        }
        v19 = (_BYTE *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v19 >= *((_QWORD *)a2 + 2) || *v19 != 26)
          continue;
        *((_QWORD *)a2 + 1) = v19 + 1;
LABEL_48:
        *((_DWORD *)this + 15) |= 4u;
        v20 = (awd::profile::BedfTreeNode *)*((_QWORD *)this + 2);
        if (!v20)
        {
          v20 = (awd::profile::BedfTreeNode *)operator new();
          *(_QWORD *)v20 = &off_1E886B070;
          *((_QWORD *)v20 + 6) = 0;
          *((_QWORD *)v20 + 7) = 0;
          *((_QWORD *)v20 + 1) = 0x100000000;
          *((_QWORD *)v20 + 4) = 0;
          *((_QWORD *)v20 + 5) = 0;
          *((_QWORD *)v20 + 2) = 0;
          *((_QWORD *)v20 + 3) = 0;
          *((_QWORD *)this + 2) = v20;
        }
        v48 = 0;
        v21 = (char *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v21 >= *((_QWORD *)a2 + 2) || *v21 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v48))return 0;
        }
        else
        {
          v48 = *v21;
          *((_QWORD *)a2 + 1) = v21 + 1;
        }
        v22 = *((_DWORD *)a2 + 14);
        v23 = *((_DWORD *)a2 + 15);
        *((_DWORD *)a2 + 14) = v22 + 1;
        if (v22 >= v23)
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(a2);
        if (!awd::profile::BedfTreeNode::MergePartialFromCodedStream(v20, a2) || !*((_BYTE *)a2 + 36))
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(a2);
        v24 = *((_DWORD *)a2 + 14);
        v25 = __OFSUB__(v24, 1);
        v26 = v24 - 1;
        if (v26 < 0 == v25)
          *((_DWORD *)a2 + 14) = v26;
        v27 = (_BYTE *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v27 >= *((_QWORD *)a2 + 2) || *v27 != 34)
          continue;
        *((_QWORD *)a2 + 1) = v27 + 1;
LABEL_62:
        *((_DWORD *)this + 15) |= 8u;
        v28 = (awd::profile::BedfTreeNode *)*((_QWORD *)this + 3);
        if (!v28)
        {
          v28 = (awd::profile::BedfTreeNode *)operator new();
          *(_QWORD *)v28 = &off_1E886B070;
          *((_QWORD *)v28 + 6) = 0;
          *((_QWORD *)v28 + 7) = 0;
          *((_QWORD *)v28 + 1) = 0x100000000;
          *((_QWORD *)v28 + 4) = 0;
          *((_QWORD *)v28 + 5) = 0;
          *((_QWORD *)v28 + 2) = 0;
          *((_QWORD *)v28 + 3) = 0;
          *((_QWORD *)this + 3) = v28;
        }
        v48 = 0;
        v29 = (char *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v29 >= *((_QWORD *)a2 + 2) || *v29 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v48))return 0;
        }
        else
        {
          v48 = *v29;
          *((_QWORD *)a2 + 1) = v29 + 1;
        }
        v30 = *((_DWORD *)a2 + 14);
        v31 = *((_DWORD *)a2 + 15);
        *((_DWORD *)a2 + 14) = v30 + 1;
        if (v30 < v31)
        {
          wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(a2);
          if (awd::profile::BedfTreeNode::MergePartialFromCodedStream(v28, a2))
          {
            if (*((_BYTE *)a2 + 36))
            {
              wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(a2);
              v32 = *((_DWORD *)a2 + 14);
              v25 = __OFSUB__(v32, 1);
              v33 = v32 - 1;
              if (v33 < 0 == v25)
                *((_DWORD *)a2 + 14) = v33;
              v34 = (char *)*((_QWORD *)a2 + 1);
              v12 = (char *)*((_QWORD *)a2 + 2);
              if (v34 < v12 && *v34 == 40)
              {
                v13 = v34 + 1;
                *((_QWORD *)a2 + 1) = v13;
LABEL_76:
                v48 = 0;
                if (v13 >= v12 || *v13 < 0)
                {
                  result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v48);
                  if (!(_DWORD)result)
                    return result;
                  v35 = v48;
                  v36 = (char *)*((_QWORD *)a2 + 1);
                  v12 = (char *)*((_QWORD *)a2 + 2);
                }
                else
                {
                  v35 = *v13;
                  v36 = v13 + 1;
                  *((_QWORD *)a2 + 1) = v36;
                }
                *((_DWORD *)this + 8) = v35;
                *((_DWORD *)this + 15) |= 0x10u;
                if (v36 < v12 && *v36 == 48)
                {
                  v14 = v36 + 1;
                  *((_QWORD *)a2 + 1) = v14;
LABEL_84:
                  v48 = 0;
                  if (v14 >= v12 || *v14 < 0)
                  {
                    result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v48);
                    if (!(_DWORD)result)
                      return result;
                    v37 = v48;
                    v38 = (char *)*((_QWORD *)a2 + 1);
                    v12 = (char *)*((_QWORD *)a2 + 2);
                  }
                  else
                  {
                    v37 = *v14;
                    v38 = v14 + 1;
                    *((_QWORD *)a2 + 1) = v38;
                  }
                  *((_DWORD *)this + 9) = v37;
                  *((_DWORD *)this + 15) |= 0x20u;
                  if (v38 < v12 && *v38 == 56)
                  {
                    do
                    {
                      v15 = v38 + 1;
                      *((_QWORD *)a2 + 1) = v15;
LABEL_92:
                      v48 = 0;
                      if (v15 >= v12 || *v15 < 0)
                      {
                        result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v48);
                        if (!(_DWORD)result)
                          return result;
                        v39 = v48;
                      }
                      else
                      {
                        v39 = *v15;
                        *((_QWORD *)a2 + 1) = v15 + 1;
                      }
                      v40 = *((_DWORD *)this + 12);
                      if (v40 == *((_DWORD *)this + 13))
                      {
                        sub_1CC5C2EE8(v4, v40 + 1);
                        v40 = *((_DWORD *)this + 12);
                      }
                      v41 = *((_QWORD *)this + 5);
                      *((_DWORD *)this + 12) = v40 + 1;
                      *(_DWORD *)(v41 + 4 * v40) = v39;
                      v42 = *((_DWORD *)this + 13) - *((_DWORD *)this + 12);
                      if (v42 >= 1)
                      {
                        v43 = v42 + 1;
                        do
                        {
                          v44 = (_BYTE *)*((_QWORD *)a2 + 1);
                          v45 = *((_QWORD *)a2 + 2);
                          if ((unint64_t)v44 >= v45 || *v44 != 56)
                            break;
                          *((_QWORD *)a2 + 1) = v44 + 1;
                          v48 = 0;
                          if ((unint64_t)(v44 + 1) >= v45 || (char)v44[1] < 0)
                          {
                            result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v48);
                            if (!(_DWORD)result)
                              return result;
                            v46 = v48;
                            v41 = *(_QWORD *)v4;
                          }
                          else
                          {
                            v46 = v44[1];
                            *((_QWORD *)a2 + 1) = v44 + 2;
                          }
                          v47 = *((int *)this + 12);
                          *((_DWORD *)this + 12) = v47 + 1;
                          *(_DWORD *)(v41 + 4 * v47) = v46;
                          --v43;
                        }
                        while (v43 > 1);
                      }
LABEL_109:
                      v38 = (char *)*((_QWORD *)a2 + 1);
                      v12 = (char *)*((_QWORD *)a2 + 2);
                    }
                    while (v38 < v12 && *v38 == 56);
                    if (v38 == v12 && (*((_DWORD *)a2 + 11) || *((_DWORD *)a2 + 6) == *((_DWORD *)a2 + 10)))
                    {
                      *((_DWORD *)a2 + 8) = 0;
                      result = 1;
                      *((_BYTE *)a2 + 36) = 1;
                      return result;
                    }
                  }
                }
              }
              continue;
            }
          }
        }
        return 0;
      case 3u:
        v7 = TagFallback & 7;
        if (v7 == 2)
          goto LABEL_48;
        goto LABEL_26;
      case 4u:
        v7 = TagFallback & 7;
        if (v7 == 2)
          goto LABEL_62;
        goto LABEL_26;
      case 5u:
        v7 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_26;
        v13 = (char *)*((_QWORD *)a2 + 1);
        v12 = (char *)*((_QWORD *)a2 + 2);
        goto LABEL_76;
      case 6u:
        v7 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_26;
        v14 = (char *)*((_QWORD *)a2 + 1);
        v12 = (char *)*((_QWORD *)a2 + 2);
        goto LABEL_84;
      case 7u:
        v7 = TagFallback & 7;
        if (v7 == 2)
        {
          result = sub_1CC5B40C8(a2, v4);
          if (!(_DWORD)result)
            return result;
          goto LABEL_109;
        }
        if ((TagFallback & 7) == 0)
        {
          v15 = (char *)*((_QWORD *)a2 + 1);
          v12 = (char *)*((_QWORD *)a2 + 2);
          goto LABEL_92;
        }
LABEL_26:
        if (v7 == 4)
          return 1;
        if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(a2, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback) & 1) == 0)return 0;
        continue;
      default:
        v7 = TagFallback & 7;
        goto LABEL_26;
    }
  }
}

uint64_t sub_1CC5B40C8(wireless_diagnostics::google::protobuf::io::CodedInputStream *this, _DWORD *a2)
{
  char *v4;
  uint64_t result;
  char *v6;
  unsigned int v7;
  int v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;

  v10 = 0;
  v4 = (char *)*((_QWORD *)this + 1);
  if ((unint64_t)v4 >= *((_QWORD *)this + 2) || *v4 < 0)
  {
    result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v10);
    if (!(_DWORD)result)
      return result;
  }
  else
  {
    v10 = *v4;
    *((_QWORD *)this + 1) = v4 + 1;
  }
  wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this);
  if ((int)wireless_diagnostics::google::protobuf::io::CodedInputStream::BytesUntilLimit(this) >= 1)
  {
    do
    {
      v11 = 0;
      v6 = (char *)*((_QWORD *)this + 1);
      if ((unint64_t)v6 >= *((_QWORD *)this + 2) || *v6 < 0)
      {
        result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v11);
        if (!(_DWORD)result)
          return result;
        v7 = v11;
      }
      else
      {
        v7 = *v6;
        *((_QWORD *)this + 1) = v6 + 1;
      }
      v8 = a2[2];
      if (v8 == a2[3])
      {
        sub_1CC5C2EE8(a2, v8 + 1);
        v8 = a2[2];
      }
      v9 = *(_QWORD *)a2;
      a2[2] = v8 + 1;
      *(_DWORD *)(v9 + 4 * v8) = v7;
    }
    while ((int)wireless_diagnostics::google::protobuf::io::CodedInputStream::BytesUntilLimit(this) > 0);
  }
  wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this);
  return 1;
}

uint64_t awd::profile::BedfTreeNode::SerializeWithCachedSizes(uint64_t this, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v5 = this;
  v6 = *(_DWORD *)(this + 60);
  if ((v6 & 1) != 0)
  {
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(unsigned int *)(this + 8), (uint64_t)a2, a4);
    v6 = *(_DWORD *)(v5 + 60);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0)
        goto LABEL_4;
      goto LABEL_14;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, *(unsigned int *)(v5 + 12), (uint64_t)a2, a4);
  v6 = *(_DWORD *)(v5 + 60);
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0)
      goto LABEL_5;
    goto LABEL_17;
  }
LABEL_14:
  v8 = *(_QWORD *)(v5 + 16);
  if (!v8)
    v8 = *(_QWORD *)(awd::profile::BedfTreeNode::default_instance_ + 16);
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, v8, a2, a4);
  v6 = *(_DWORD *)(v5 + 60);
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_20;
  }
LABEL_17:
  v9 = *(_QWORD *)(v5 + 24);
  if (!v9)
    v9 = *(_QWORD *)(awd::profile::BedfTreeNode::default_instance_ + 24);
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4, v9, a2, a4);
  v6 = *(_DWORD *)(v5 + 60);
  if ((v6 & 0x10) == 0)
  {
LABEL_6:
    if ((v6 & 0x20) == 0)
      goto LABEL_8;
    goto LABEL_7;
  }
LABEL_20:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5, *(unsigned int *)(v5 + 32), (uint64_t)a2, a4);
  if ((*(_DWORD *)(v5 + 60) & 0x20) != 0)
LABEL_7:
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)6, *(unsigned int *)(v5 + 36), (uint64_t)a2, a4);
LABEL_8:
  if (*(int *)(v5 + 48) >= 1)
  {
    v7 = 0;
    do
      this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)7, *(unsigned int *)(*(_QWORD *)(v5 + 40) + 4 * v7++), (uint64_t)a2, a4);
    while (v7 < *(int *)(v5 + 48));
  }
  return this;
}

uint64_t awd::profile::BedfTreeNode::ByteSize(awd::profile::BedfTreeNode *this)
{
  int v2;
  int v3;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v4;
  int v5;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v6;
  int v7;
  awd::profile::BedfTreeNode *v8;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v9;
  int v10;
  int v11;
  awd::profile::BedfTreeNode *v12;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v13;
  int v14;
  int v15;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v16;
  int v17;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v18;
  int v19;
  int v20;
  uint64_t v21;
  int v22;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v23;
  int v24;
  uint64_t result;

  LOBYTE(v2) = *((_BYTE *)this + 60);
  if (!(_BYTE)v2)
  {
    v3 = 0;
    goto LABEL_47;
  }
  if ((*((_BYTE *)this + 60) & 1) == 0)
  {
    v3 = 0;
    if ((*((_BYTE *)this + 60) & 2) == 0)
      goto LABEL_18;
    goto LABEL_12;
  }
  v4 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 2);
  if ((v4 & 0x80000000) != 0)
  {
    v5 = 10;
  }
  else if (v4 >= 0x80)
  {
    v5 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v4);
    v2 = *((_DWORD *)this + 15);
  }
  else
  {
    v5 = 1;
  }
  v3 = v5 + 1;
  if ((v2 & 2) != 0)
  {
LABEL_12:
    v6 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 3);
    if ((v6 & 0x80000000) != 0)
    {
      v7 = 11;
    }
    else if (v6 >= 0x80)
    {
      v7 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v6) + 1;
      v2 = *((_DWORD *)this + 15);
    }
    else
    {
      v7 = 2;
    }
    v3 += v7;
  }
LABEL_18:
  if ((v2 & 4) != 0)
  {
    v8 = (awd::profile::BedfTreeNode *)*((_QWORD *)this + 2);
    if (!v8)
      v8 = *(awd::profile::BedfTreeNode **)(awd::profile::BedfTreeNode::default_instance_ + 16);
    v9 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)awd::profile::BedfTreeNode::ByteSize(v8);
    v10 = (int)v9;
    if (v9 >= 0x80)
      v11 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v9);
    else
      v11 = 1;
    v3 += v10 + v11 + 1;
    v2 = *((_DWORD *)this + 15);
    if ((v2 & 8) == 0)
    {
LABEL_20:
      if ((v2 & 0x10) == 0)
        goto LABEL_21;
      goto LABEL_35;
    }
  }
  else if ((v2 & 8) == 0)
  {
    goto LABEL_20;
  }
  v12 = (awd::profile::BedfTreeNode *)*((_QWORD *)this + 3);
  if (!v12)
    v12 = *(awd::profile::BedfTreeNode **)(awd::profile::BedfTreeNode::default_instance_ + 24);
  v13 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)awd::profile::BedfTreeNode::ByteSize(v12);
  v14 = (int)v13;
  if (v13 >= 0x80)
    v15 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v13);
  else
    v15 = 1;
  v3 += v14 + v15 + 1;
  v2 = *((_DWORD *)this + 15);
  if ((v2 & 0x10) == 0)
  {
LABEL_21:
    if ((v2 & 0x20) == 0)
      goto LABEL_47;
    goto LABEL_41;
  }
LABEL_35:
  v16 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 8);
  if ((v16 & 0x80000000) != 0)
  {
    v17 = 11;
  }
  else if (v16 >= 0x80)
  {
    v17 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v16) + 1;
    v2 = *((_DWORD *)this + 15);
  }
  else
  {
    v17 = 2;
  }
  v3 += v17;
  if ((v2 & 0x20) != 0)
  {
LABEL_41:
    v18 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 9);
    if ((v18 & 0x80000000) != 0)
    {
      v19 = 11;
    }
    else if (v18 >= 0x80)
    {
      v19 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v18) + 1;
    }
    else
    {
      v19 = 2;
    }
    v3 += v19;
  }
LABEL_47:
  v20 = *((_DWORD *)this + 12);
  if (v20 < 1)
  {
    v22 = 0;
  }
  else
  {
    v21 = 0;
    v22 = 0;
    do
    {
      v23 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(*((_QWORD *)this + 5)
                                                                                             + 4 * v21);
      if ((v23 & 0x80000000) != 0)
      {
        v24 = 10;
      }
      else if (v23 >= 0x80)
      {
        v24 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v23);
        v20 = *((_DWORD *)this + 12);
      }
      else
      {
        v24 = 1;
      }
      v22 += v24;
      ++v21;
    }
    while (v21 < v20);
  }
  result = (v22 + v3 + v20);
  *((_DWORD *)this + 14) = result;
  return result;
}

void awd::profile::BedfTreeNode::CopyFrom(awd::profile::BedfTreeNode *this, const awd::profile::BedfTreeNode *a2)
{
  if (a2 != this)
  {
    (*(void (**)(awd::profile::BedfTreeNode *))(*(_QWORD *)this + 32))(this);
    awd::profile::BedfTreeNode::MergeFrom(this, a2);
  }
}

uint64_t awd::profile::BedfTreeNode::IsInitialized(awd::profile::BedfTreeNode *this)
{
  return 1;
}

double awd::profile::BedfTreeNode::Swap(awd::profile::BedfTreeNode *this, awd::profile::BedfTreeNode *a2)
{
  int v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  double result;
  uint64_t v8;

  if (a2 != this)
  {
    v2 = *((_DWORD *)this + 2);
    *((_DWORD *)this + 2) = *((_DWORD *)a2 + 2);
    *((_DWORD *)a2 + 2) = v2;
    v3 = *((_DWORD *)this + 3);
    *((_DWORD *)this + 3) = *((_DWORD *)a2 + 3);
    *((_DWORD *)a2 + 3) = v3;
    v4 = *((_QWORD *)this + 2);
    *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
    *((_QWORD *)a2 + 2) = v4;
    v5 = *((_QWORD *)this + 3);
    *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
    *((_QWORD *)a2 + 3) = v5;
    LODWORD(v5) = *((_DWORD *)this + 8);
    *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
    *((_DWORD *)a2 + 8) = v5;
    LODWORD(v5) = *((_DWORD *)this + 9);
    *((_DWORD *)this + 9) = *((_DWORD *)a2 + 9);
    *((_DWORD *)a2 + 9) = v5;
    v6 = *((_QWORD *)this + 5);
    *((_QWORD *)this + 5) = *((_QWORD *)a2 + 5);
    result = *((double *)a2 + 6);
    *((_QWORD *)a2 + 5) = v6;
    v8 = *((_QWORD *)this + 6);
    *((double *)this + 6) = result;
    *((_QWORD *)a2 + 6) = v8;
    LODWORD(v6) = *((_DWORD *)this + 15);
    *((_DWORD *)this + 15) = *((_DWORD *)a2 + 15);
    *((_DWORD *)a2 + 15) = v6;
    LODWORD(v6) = *((_DWORD *)this + 14);
    *((_DWORD *)this + 14) = *((_DWORD *)a2 + 14);
    *((_DWORD *)a2 + 14) = v6;
  }
  return result;
}

_QWORD *awd::profile::BedfTreeNode::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return sub_1CC59E69C(a1, "awd.profile.BedfTreeNode");
}

_QWORD *awd::profile::BedfConfig::SharedCtor(_QWORD *this)
{
  this[5] = 0;
  this[1] = 0;
  this[2] = 0;
  return this;
}

awd::profile::BedfConfig *awd::profile::BedfConfig::BedfConfig(awd::profile::BedfConfig *this, const awd::profile::BedfConfig *a2)
{
  *(_QWORD *)this = &off_1E886AF80;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *((_QWORD *)this + 5) = 0;
  awd::profile::BedfConfig::MergeFrom(this, a2);
  return this;
}

void sub_1CC5B4680(_Unwind_Exception *a1)
{
  wireless_diagnostics::google::protobuf::MessageLite *v1;
  uint64_t v3;

  v3 = *((_QWORD *)v1 + 3);
  if (v3)
    MEMORY[0x1D17AD52C](v3, 0x1000C8052888210);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(v1);
  _Unwind_Resume(a1);
}

void awd::profile::BedfConfig::MergeFrom(awd::profile::BedfConfig *this, const awd::profile::BedfConfig *a2)
{
  int v4;
  int v5;
  int v6;
  int v7;
  awd::profile::BedfTreeNode *v8;
  const awd::profile::BedfTreeNode *v9;
  _BYTE v10[48];

  if (a2 == this)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v10);
  }
  v4 = *((_DWORD *)a2 + 8);
  if (v4)
  {
    sub_1CC5C2EE8((_DWORD *)this + 6, *((_DWORD *)this + 8) + v4);
    memcpy((void *)(*((_QWORD *)this + 3) + 4 * *((int *)this + 8)), *((const void **)a2 + 3), 4 * *((int *)a2 + 8));
    *((_DWORD *)this + 8) += *((_DWORD *)a2 + 8);
  }
  LOBYTE(v5) = *((_BYTE *)a2 + 44);
  if ((_BYTE)v5)
  {
    if ((*((_BYTE *)a2 + 44) & 1) != 0)
    {
      v6 = *((_DWORD *)a2 + 2);
      *((_DWORD *)this + 11) |= 1u;
      *((_DWORD *)this + 2) = v6;
      v5 = *((_DWORD *)a2 + 11);
      if ((v5 & 2) == 0)
      {
LABEL_8:
        if ((v5 & 4) == 0)
          return;
        goto LABEL_12;
      }
    }
    else if ((*((_BYTE *)a2 + 44) & 2) == 0)
    {
      goto LABEL_8;
    }
    v7 = *((_DWORD *)a2 + 3);
    *((_DWORD *)this + 11) |= 2u;
    *((_DWORD *)this + 3) = v7;
    if ((*((_DWORD *)a2 + 11) & 4) == 0)
      return;
LABEL_12:
    *((_DWORD *)this + 11) |= 4u;
    v8 = (awd::profile::BedfTreeNode *)*((_QWORD *)this + 2);
    if (!v8)
    {
      v8 = (awd::profile::BedfTreeNode *)operator new();
      *(_QWORD *)v8 = &off_1E886B070;
      *((_QWORD *)v8 + 6) = 0;
      *((_QWORD *)v8 + 7) = 0;
      *((_QWORD *)v8 + 1) = 0x100000000;
      *((_QWORD *)v8 + 4) = 0;
      *((_QWORD *)v8 + 5) = 0;
      *((_QWORD *)v8 + 2) = 0;
      *((_QWORD *)v8 + 3) = 0;
      *((_QWORD *)this + 2) = v8;
    }
    v9 = (const awd::profile::BedfTreeNode *)*((_QWORD *)a2 + 2);
    if (!v9)
      v9 = *(const awd::profile::BedfTreeNode **)(awd::profile::BedfConfig::default_instance_ + 16);
    awd::profile::BedfTreeNode::MergeFrom(v8, v9);
  }
}

void sub_1CC5B481C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void awd::profile::BedfConfig::~BedfConfig(awd::profile::BedfConfig *this)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)this = &off_1E886AF80;
  if ((awd::profile::BedfConfig *)awd::profile::BedfConfig::default_instance_ != this)
  {
    v2 = *((_QWORD *)this + 2);
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  }
  v3 = *((_QWORD *)this + 3);
  if (v3)
    MEMORY[0x1D17AD52C](v3, 0x1000C8052888210);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

{
  awd::profile::BedfConfig::~BedfConfig(this);
  JUMPOUT(0x1D17AD544);
}

_QWORD *awd::profile::BedfConfig::SharedDtor(_QWORD *this)
{
  if ((_QWORD *)awd::profile::BedfConfig::default_instance_ != this)
  {
    this = (_QWORD *)this[2];
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

uint64_t awd::profile::BedfConfig::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 40) = a2;
  return this;
}

uint64_t awd::profile::BedfConfig::default_instance(awd::profile::BedfConfig *this, uint64_t a2, uint64_t a3, const char *a4)
{
  uint64_t result;

  result = awd::profile::BedfConfig::default_instance_;
  if (!awd::profile::BedfConfig::default_instance_)
  {
    awd::profile::protobuf_AddDesc_AwdProfile_2eproto(0, a2, a3, a4);
    return awd::profile::BedfConfig::default_instance_;
  }
  return result;
}

double awd::profile::BedfConfig::New(awd::profile::BedfConfig *this)
{
  uint64_t v1;
  double result;

  v1 = operator new();
  *(_QWORD *)v1 = &off_1E886AF80;
  result = 0.0;
  *(_OWORD *)(v1 + 8) = 0u;
  *(_OWORD *)(v1 + 24) = 0u;
  *(_QWORD *)(v1 + 40) = 0;
  return result;
}

uint64_t awd::profile::BedfConfig::Clear(uint64_t this)
{
  uint64_t v1;
  char v2;

  v1 = this;
  v2 = *(_BYTE *)(this + 44);
  if (v2)
  {
    *(_QWORD *)(this + 8) = 0;
    if ((v2 & 4) != 0)
    {
      this = *(_QWORD *)(this + 16);
      if (this)
        this = awd::profile::BedfTreeNode::Clear(this);
    }
  }
  *(_DWORD *)(v1 + 32) = 0;
  *(_DWORD *)(v1 + 44) = 0;
  return this;
}

uint64_t awd::profile::BedfConfig::MergePartialFromCodedStream(awd::profile::BedfConfig *this, wireless_diagnostics::google::protobuf::io::CodedInputStream *a2)
{
  _DWORD *v4;
  unsigned int *v5;
  unsigned int *v6;
  char *v7;
  uint64_t TagFallback;
  int v9;
  unint64_t v10;
  char *v11;
  _BYTE *v12;
  char *v13;
  int v14;
  char *v15;
  char *v16;
  uint64_t result;
  _BYTE *v18;
  awd::profile::BedfTreeNode *v19;
  char *v20;
  int v21;
  int v22;
  int v23;
  BOOL v24;
  int v25;
  char *v26;
  unsigned int v27;
  int v28;
  uint64_t v29;
  int v30;
  int v31;
  _BYTE *v32;
  unint64_t v33;
  unsigned int v34;
  uint64_t v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int v38;

  v4 = (_DWORD *)((char *)this + 24);
  v5 = (unsigned int *)((char *)this + 8);
  v6 = (unsigned int *)((char *)this + 12);
  while (2)
  {
    v7 = (char *)*((_QWORD *)a2 + 1);
    if ((unint64_t)v7 >= *((_QWORD *)a2 + 2) || *v7 < 0)
    {
      TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(a2);
      *((_DWORD *)a2 + 8) = TagFallback;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    else
    {
      TagFallback = *v7;
      *((_DWORD *)a2 + 8) = TagFallback;
      *((_QWORD *)a2 + 1) = v7 + 1;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    switch(TagFallback >> 3)
    {
      case 1u:
        v9 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_20;
        v11 = (char *)*((_QWORD *)a2 + 1);
        v10 = *((_QWORD *)a2 + 2);
        if ((unint64_t)v11 >= v10 || *v11 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v5);
          if (!(_DWORD)result)
            return result;
          v12 = (_BYTE *)*((_QWORD *)a2 + 1);
          v10 = *((_QWORD *)a2 + 2);
        }
        else
        {
          *v5 = *v11;
          v12 = v11 + 1;
          *((_QWORD *)a2 + 1) = v12;
        }
        *((_DWORD *)this + 11) |= 1u;
        if ((unint64_t)v12 < v10 && *v12 == 16)
        {
          v13 = v12 + 1;
          *((_QWORD *)a2 + 1) = v13;
          goto LABEL_30;
        }
        continue;
      case 2u:
        v9 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_20;
        v13 = (char *)*((_QWORD *)a2 + 1);
        v10 = *((_QWORD *)a2 + 2);
LABEL_30:
        if ((unint64_t)v13 >= v10 || *v13 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v6);
          if (!(_DWORD)result)
            return result;
          v18 = (_BYTE *)*((_QWORD *)a2 + 1);
          v10 = *((_QWORD *)a2 + 2);
        }
        else
        {
          *v6 = *v13;
          v18 = v13 + 1;
          *((_QWORD *)a2 + 1) = v18;
        }
        v14 = *((_DWORD *)this + 11) | 2;
        *((_DWORD *)this + 11) = v14;
        if ((unint64_t)v18 >= v10 || *v18 != 26)
          continue;
        *((_QWORD *)a2 + 1) = v18 + 1;
LABEL_38:
        *((_DWORD *)this + 11) = v14 | 4;
        v19 = (awd::profile::BedfTreeNode *)*((_QWORD *)this + 2);
        if (!v19)
        {
          v19 = (awd::profile::BedfTreeNode *)operator new();
          *(_QWORD *)v19 = &off_1E886B070;
          *((_QWORD *)v19 + 6) = 0;
          *((_QWORD *)v19 + 7) = 0;
          *((_QWORD *)v19 + 1) = 0x100000000;
          *((_QWORD *)v19 + 4) = 0;
          *((_QWORD *)v19 + 5) = 0;
          *((_QWORD *)v19 + 2) = 0;
          *((_QWORD *)v19 + 3) = 0;
          *((_QWORD *)this + 2) = v19;
        }
        v38 = 0;
        v20 = (char *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v20 >= *((_QWORD *)a2 + 2) || *v20 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v38))return 0;
        }
        else
        {
          v38 = *v20;
          *((_QWORD *)a2 + 1) = v20 + 1;
        }
        v21 = *((_DWORD *)a2 + 14);
        v22 = *((_DWORD *)a2 + 15);
        *((_DWORD *)a2 + 14) = v21 + 1;
        if (v21 < v22)
        {
          wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(a2);
          if (awd::profile::BedfTreeNode::MergePartialFromCodedStream(v19, a2))
          {
            if (*((_BYTE *)a2 + 36))
            {
              wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(a2);
              v23 = *((_DWORD *)a2 + 14);
              v24 = __OFSUB__(v23, 1);
              v25 = v23 - 1;
              if (v25 < 0 == v24)
                *((_DWORD *)a2 + 14) = v25;
              v26 = (char *)*((_QWORD *)a2 + 1);
              v15 = (char *)*((_QWORD *)a2 + 2);
              if (v26 < v15 && *v26 == 32)
              {
                do
                {
                  v16 = v26 + 1;
                  *((_QWORD *)a2 + 1) = v16;
LABEL_52:
                  v37 = 0;
                  if (v16 >= v15 || *v16 < 0)
                  {
                    result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v37);
                    if (!(_DWORD)result)
                      return result;
                    v27 = v37;
                  }
                  else
                  {
                    v27 = *v16;
                    *((_QWORD *)a2 + 1) = v16 + 1;
                  }
                  v28 = *((_DWORD *)this + 8);
                  if (v28 == *((_DWORD *)this + 9))
                  {
                    sub_1CC5C2EE8(v4, v28 + 1);
                    v28 = *((_DWORD *)this + 8);
                  }
                  v29 = *((_QWORD *)this + 3);
                  *((_DWORD *)this + 8) = v28 + 1;
                  *(_DWORD *)(v29 + 4 * v28) = v27;
                  v30 = *((_DWORD *)this + 9) - *((_DWORD *)this + 8);
                  if (v30 >= 1)
                  {
                    v31 = v30 + 1;
                    do
                    {
                      v32 = (_BYTE *)*((_QWORD *)a2 + 1);
                      v33 = *((_QWORD *)a2 + 2);
                      if ((unint64_t)v32 >= v33 || *v32 != 32)
                        break;
                      *((_QWORD *)a2 + 1) = v32 + 1;
                      v36 = 0;
                      if ((unint64_t)(v32 + 1) >= v33 || (char)v32[1] < 0)
                      {
                        result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v36);
                        if (!(_DWORD)result)
                          return result;
                        v34 = v36;
                        v29 = *(_QWORD *)v4;
                      }
                      else
                      {
                        v34 = v32[1];
                        *((_QWORD *)a2 + 1) = v32 + 2;
                      }
                      v35 = *((int *)this + 8);
                      *((_DWORD *)this + 8) = v35 + 1;
                      *(_DWORD *)(v29 + 4 * v35) = v34;
                      --v31;
                    }
                    while (v31 > 1);
                  }
LABEL_69:
                  v26 = (char *)*((_QWORD *)a2 + 1);
                  v15 = (char *)*((_QWORD *)a2 + 2);
                }
                while (v26 < v15 && *v26 == 32);
                if (v26 == v15 && (*((_DWORD *)a2 + 11) || *((_DWORD *)a2 + 6) == *((_DWORD *)a2 + 10)))
                {
                  *((_DWORD *)a2 + 8) = 0;
                  result = 1;
                  *((_BYTE *)a2 + 36) = 1;
                  return result;
                }
              }
              continue;
            }
          }
        }
        return 0;
      case 3u:
        v9 = TagFallback & 7;
        if (v9 != 2)
          goto LABEL_20;
        v14 = *((_DWORD *)this + 11);
        goto LABEL_38;
      case 4u:
        v9 = TagFallback & 7;
        if (v9 == 2)
        {
          result = sub_1CC5B40C8(a2, v4);
          if (!(_DWORD)result)
            return result;
          goto LABEL_69;
        }
        if ((TagFallback & 7) == 0)
        {
          v16 = (char *)*((_QWORD *)a2 + 1);
          v15 = (char *)*((_QWORD *)a2 + 2);
          goto LABEL_52;
        }
LABEL_20:
        if (v9 == 4)
          return 1;
        if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(a2, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback) & 1) == 0)return 0;
        continue;
      default:
        v9 = TagFallback & 7;
        goto LABEL_20;
    }
  }
}

uint64_t awd::profile::BedfConfig::SerializeWithCachedSizes(uint64_t this, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;

  v5 = this;
  v6 = *(_DWORD *)(this + 44);
  if ((v6 & 1) != 0)
  {
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(unsigned int *)(this + 8), (uint64_t)a2, a4);
    v6 = *(_DWORD *)(v5 + 44);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0)
        goto LABEL_10;
      goto LABEL_7;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, *(unsigned int *)(v5 + 12), (uint64_t)a2, a4);
  if ((*(_DWORD *)(v5 + 44) & 4) == 0)
    goto LABEL_10;
LABEL_7:
  v7 = *(_QWORD *)(v5 + 16);
  if (!v7)
    v7 = *(_QWORD *)(awd::profile::BedfConfig::default_instance_ + 16);
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, v7, a2, a4);
LABEL_10:
  if (*(int *)(v5 + 32) >= 1)
  {
    v8 = 0;
    do
      this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4, *(unsigned int *)(*(_QWORD *)(v5 + 24) + 4 * v8++), (uint64_t)a2, a4);
    while (v8 < *(int *)(v5 + 32));
  }
  return this;
}

uint64_t awd::profile::BedfConfig::ByteSize(awd::profile::BedfConfig *this)
{
  int v2;
  int v3;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v4;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v5;
  int v6;
  awd::profile::BedfTreeNode *v7;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v8;
  int v9;
  int v10;
  int v11;
  uint64_t v12;
  int v13;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v14;
  int v15;
  uint64_t result;

  LOBYTE(v2) = *((_BYTE *)this + 44);
  if (!(_BYTE)v2)
  {
    v3 = 0;
    goto LABEL_21;
  }
  if ((*((_BYTE *)this + 44) & 1) != 0)
  {
    v4 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 2);
    if (v4 >= 0x80)
    {
      v3 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v4) + 1;
      v2 = *((_DWORD *)this + 11);
      if ((v2 & 2) == 0)
        goto LABEL_14;
    }
    else
    {
      v3 = 2;
      if ((v2 & 2) == 0)
        goto LABEL_14;
    }
  }
  else
  {
    v3 = 0;
    if ((*((_BYTE *)this + 44) & 2) == 0)
      goto LABEL_14;
  }
  v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 3);
  if (v5 >= 0x80)
  {
    v6 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v5) + 1;
    v2 = *((_DWORD *)this + 11);
  }
  else
  {
    v6 = 2;
  }
  v3 += v6;
LABEL_14:
  if ((v2 & 4) != 0)
  {
    v7 = (awd::profile::BedfTreeNode *)*((_QWORD *)this + 2);
    if (!v7)
      v7 = *(awd::profile::BedfTreeNode **)(awd::profile::BedfConfig::default_instance_ + 16);
    v8 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)awd::profile::BedfTreeNode::ByteSize(v7);
    v9 = (int)v8;
    if (v8 >= 0x80)
      v10 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v8);
    else
      v10 = 1;
    v3 += v9 + v10 + 1;
  }
LABEL_21:
  v11 = *((_DWORD *)this + 8);
  if (v11 < 1)
  {
    v13 = 0;
  }
  else
  {
    v12 = 0;
    v13 = 0;
    do
    {
      v14 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(*((_QWORD *)this + 3)
                                                                                             + 4 * v12);
      if ((v14 & 0x80000000) != 0)
      {
        v15 = 10;
      }
      else if (v14 >= 0x80)
      {
        v15 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v14);
        v11 = *((_DWORD *)this + 8);
      }
      else
      {
        v15 = 1;
      }
      v13 += v15;
      ++v12;
    }
    while (v12 < v11);
  }
  result = (v13 + v3 + v11);
  *((_DWORD *)this + 10) = result;
  return result;
}

void awd::profile::BedfConfig::CopyFrom(awd::profile::BedfConfig *this, const awd::profile::BedfConfig *a2)
{
  if (a2 != this)
  {
    (*(void (**)(awd::profile::BedfConfig *))(*(_QWORD *)this + 32))(this);
    awd::profile::BedfConfig::MergeFrom(this, a2);
  }
}

uint64_t awd::profile::BedfConfig::IsInitialized(awd::profile::BedfConfig *this)
{
  return 1;
}

double awd::profile::BedfConfig::Swap(awd::profile::BedfConfig *this, awd::profile::BedfConfig *a2)
{
  int v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  double result;
  uint64_t v7;

  if (a2 != this)
  {
    v2 = *((_DWORD *)this + 2);
    *((_DWORD *)this + 2) = *((_DWORD *)a2 + 2);
    *((_DWORD *)a2 + 2) = v2;
    v3 = *((_DWORD *)this + 3);
    *((_DWORD *)this + 3) = *((_DWORD *)a2 + 3);
    *((_DWORD *)a2 + 3) = v3;
    v4 = *((_QWORD *)this + 2);
    *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
    *((_QWORD *)a2 + 2) = v4;
    v5 = *((_QWORD *)this + 3);
    *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
    result = *((double *)a2 + 4);
    *((_QWORD *)a2 + 3) = v5;
    v7 = *((_QWORD *)this + 4);
    *((double *)this + 4) = result;
    *((_QWORD *)a2 + 4) = v7;
    LODWORD(v5) = *((_DWORD *)this + 11);
    *((_DWORD *)this + 11) = *((_DWORD *)a2 + 11);
    *((_DWORD *)a2 + 11) = v5;
    LODWORD(v5) = *((_DWORD *)this + 10);
    *((_DWORD *)this + 10) = *((_DWORD *)a2 + 10);
    *((_DWORD *)a2 + 10) = v5;
  }
  return result;
}

_QWORD *awd::profile::BedfConfig::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return sub_1CC59E69C(a1, "awd.profile.BedfConfig");
}

double awd::profile::Metric::SharedCtor(awd::profile::Metric *this)
{
  double result;

  *((_DWORD *)this + 11) = 0;
  *((_QWORD *)this + 15) = 0;
  *((_DWORD *)this + 32) = 0;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *((_BYTE *)this + 40) = 0;
  return result;
}

awd::profile::Metric *awd::profile::Metric::Metric(awd::profile::Metric *this, const awd::profile::Metric *a2)
{
  *(_QWORD *)this = &off_1E886B688;
  *((_QWORD *)this + 9) = 0;
  *((_QWORD *)this + 10) = 0;
  *((_DWORD *)this + 22) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = 0;
  *((_DWORD *)this + 28) = 0;
  *((_QWORD *)this + 15) = 0;
  *((_DWORD *)this + 32) = 0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *((_BYTE *)this + 40) = 0;
  *(_QWORD *)((char *)this + 44) = 0;
  *(_QWORD *)((char *)this + 60) = 0;
  *(_QWORD *)((char *)this + 52) = 0;
  awd::profile::Metric::MergeFrom(this, a2);
  return this;
}

void sub_1CC5B51AC(_Unwind_Exception *a1)
{
  wireless_diagnostics::google::protobuf::MessageLite *v1;
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t *v5;

  v5 = v4;
  sub_1CC5C305C(v5);
  sub_1CC5C305C(v3);
  sub_1CC5C305C(v2);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(v1);
  _Unwind_Resume(a1);
}

void awd::profile::Metric::MergeFrom(awd::profile::Metric *this, const awd::profile::Metric *a2)
{
  uint64_t v4;
  const awd::profile::ProcessingRule *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  const awd::profile::BedfConfig *v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  const awd::profile::ConfigurationParameter *v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  awd::profile::ConfigurationParameter *v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  char v39;
  int v40;
  _BYTE v41[48];

  if (a2 == this)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v41);
  }
  wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((awd::profile::Metric *)((char *)this + 48));
  if (*((int *)a2 + 14) >= 1)
  {
    v4 = 0;
    do
    {
      v5 = *(const awd::profile::ProcessingRule **)(*((_QWORD *)a2 + 6) + 8 * v4);
      v6 = *((_DWORD *)this + 15);
      v7 = *((int *)this + 14);
      if ((int)v7 >= v6)
      {
        if (v6 == *((_DWORD *)this + 16))
        {
          wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((awd::profile::Metric *)((char *)this + 48));
          v6 = *((_DWORD *)this + 15);
        }
        *((_DWORD *)this + 15) = v6 + 1;
        v9 = operator new();
        *(_QWORD *)v9 = &off_1E886B250;
        *(_QWORD *)(v9 + 48) = 0;
        *(_DWORD *)(v9 + 44) = 0;
        *(_OWORD *)(v9 + 8) = 0u;
        *(_OWORD *)(v9 + 24) = 0u;
        *(_BYTE *)(v9 + 40) = 0;
        v10 = *((_QWORD *)this + 6);
        v11 = *((int *)this + 14);
        *((_DWORD *)this + 14) = v11 + 1;
        *(_QWORD *)(v10 + 8 * v11) = v9;
      }
      else
      {
        v8 = *((_QWORD *)this + 6);
        *((_DWORD *)this + 14) = v7 + 1;
        v9 = *(_QWORD *)(v8 + 8 * v7);
      }
      awd::profile::ProcessingRule::MergeFrom((awd::profile::ProcessingRule *)v9, v5);
      ++v4;
    }
    while (v4 < *((int *)a2 + 14));
  }
  wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((awd::profile::Metric *)((char *)this + 72));
  if (*((int *)a2 + 20) >= 1)
  {
    v12 = 0;
    do
    {
      v13 = *(const awd::profile::BedfConfig **)(*((_QWORD *)a2 + 9) + 8 * v12);
      v14 = *((_DWORD *)this + 21);
      v15 = *((int *)this + 20);
      if ((int)v15 >= v14)
      {
        if (v14 == *((_DWORD *)this + 22))
        {
          wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((awd::profile::Metric *)((char *)this + 72));
          v14 = *((_DWORD *)this + 21);
        }
        *((_DWORD *)this + 21) = v14 + 1;
        v17 = operator new();
        *(_QWORD *)v17 = &off_1E886AF80;
        *(_OWORD *)(v17 + 8) = 0u;
        *(_OWORD *)(v17 + 24) = 0u;
        *(_QWORD *)(v17 + 40) = 0;
        v18 = *((_QWORD *)this + 9);
        v19 = *((int *)this + 20);
        *((_DWORD *)this + 20) = v19 + 1;
        *(_QWORD *)(v18 + 8 * v19) = v17;
      }
      else
      {
        v16 = *((_QWORD *)this + 9);
        *((_DWORD *)this + 20) = v15 + 1;
        v17 = *(_QWORD *)(v16 + 8 * v15);
      }
      awd::profile::BedfConfig::MergeFrom((awd::profile::BedfConfig *)v17, v13);
      ++v12;
    }
    while (v12 < *((int *)a2 + 20));
  }
  wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((awd::profile::Metric *)((char *)this + 96));
  if (*((int *)a2 + 26) >= 1)
  {
    v20 = 0;
    v21 = MEMORY[0x1E0DE8338];
    do
    {
      v22 = *(const awd::profile::ConfigurationParameter **)(*((_QWORD *)a2 + 12) + 8 * v20);
      v23 = *((_DWORD *)this + 27);
      v24 = *((int *)this + 26);
      if ((int)v24 >= v23)
      {
        if (v23 == *((_DWORD *)this + 28))
        {
          wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((awd::profile::Metric *)((char *)this + 96));
          v23 = *((_DWORD *)this + 27);
        }
        *((_DWORD *)this + 27) = v23 + 1;
        v26 = (awd::profile::ConfigurationParameter *)operator new();
        *(_QWORD *)v26 = &off_1E886B598;
        *((_QWORD *)v26 + 1) = v21;
        *((_QWORD *)v26 + 2) = 0;
        *((_QWORD *)v26 + 3) = 0;
        v27 = *((_QWORD *)this + 12);
        v28 = *((int *)this + 26);
        *((_DWORD *)this + 26) = v28 + 1;
        *(_QWORD *)(v27 + 8 * v28) = v26;
      }
      else
      {
        v25 = *((_QWORD *)this + 12);
        *((_DWORD *)this + 26) = v24 + 1;
        v26 = *(awd::profile::ConfigurationParameter **)(v25 + 8 * v24);
      }
      awd::profile::ConfigurationParameter::MergeFrom(v26, v22);
      ++v20;
    }
    while (v20 < *((int *)a2 + 26));
  }
  v29 = *((_DWORD *)a2 + 32);
  if (!(_BYTE)v29)
    goto LABEL_37;
  if ((v29 & 1) != 0)
  {
    v32 = *((_DWORD *)a2 + 2);
    *((_DWORD *)this + 32) |= 1u;
    *((_DWORD *)this + 2) = v32;
    v29 = *((_DWORD *)a2 + 32);
    if ((v29 & 2) == 0)
    {
LABEL_30:
      if ((v29 & 4) == 0)
        goto LABEL_31;
      goto LABEL_45;
    }
  }
  else if ((v29 & 2) == 0)
  {
    goto LABEL_30;
  }
  v33 = *((_DWORD *)a2 + 3);
  *((_DWORD *)this + 32) |= 2u;
  *((_DWORD *)this + 3) = v33;
  v29 = *((_DWORD *)a2 + 32);
  if ((v29 & 4) == 0)
  {
LABEL_31:
    if ((v29 & 8) == 0)
      goto LABEL_32;
    goto LABEL_46;
  }
LABEL_45:
  v34 = *((_DWORD *)a2 + 4);
  *((_DWORD *)this + 32) |= 4u;
  *((_DWORD *)this + 4) = v34;
  v29 = *((_DWORD *)a2 + 32);
  if ((v29 & 8) == 0)
  {
LABEL_32:
    if ((v29 & 0x10) == 0)
      goto LABEL_33;
    goto LABEL_47;
  }
LABEL_46:
  v35 = *((_DWORD *)a2 + 5);
  *((_DWORD *)this + 32) |= 8u;
  *((_DWORD *)this + 5) = v35;
  v29 = *((_DWORD *)a2 + 32);
  if ((v29 & 0x10) == 0)
  {
LABEL_33:
    if ((v29 & 0x20) == 0)
      goto LABEL_34;
LABEL_48:
    v37 = *((_DWORD *)a2 + 7);
    *((_DWORD *)this + 32) |= 0x20u;
    *((_DWORD *)this + 7) = v37;
    v29 = *((_DWORD *)a2 + 32);
    if ((v29 & 0x40) == 0)
    {
LABEL_35:
      if ((v29 & 0x80) == 0)
        goto LABEL_37;
      goto LABEL_36;
    }
    goto LABEL_49;
  }
LABEL_47:
  v36 = *((_DWORD *)a2 + 6);
  *((_DWORD *)this + 32) |= 0x10u;
  *((_DWORD *)this + 6) = v36;
  v29 = *((_DWORD *)a2 + 32);
  if ((v29 & 0x20) != 0)
    goto LABEL_48;
LABEL_34:
  if ((v29 & 0x40) == 0)
    goto LABEL_35;
LABEL_49:
  v38 = *((_DWORD *)a2 + 8);
  *((_DWORD *)this + 32) |= 0x40u;
  *((_DWORD *)this + 8) = v38;
  v29 = *((_DWORD *)a2 + 32);
  if ((v29 & 0x80) != 0)
  {
LABEL_36:
    v30 = *((_DWORD *)a2 + 9);
    *((_DWORD *)this + 32) |= 0x80u;
    *((_DWORD *)this + 9) = v30;
    v29 = *((_DWORD *)a2 + 32);
  }
LABEL_37:
  if ((v29 & 0xFF00) == 0)
    return;
  if ((v29 & 0x100) != 0)
  {
    v39 = *((_BYTE *)a2 + 40);
    *((_DWORD *)this + 32) |= 0x100u;
    *((_BYTE *)this + 40) = v39;
    v29 = *((_DWORD *)a2 + 32);
    if ((v29 & 0x200) == 0)
    {
LABEL_40:
      if ((v29 & 0x1000) == 0)
        return;
      goto LABEL_41;
    }
  }
  else if ((v29 & 0x200) == 0)
  {
    goto LABEL_40;
  }
  v40 = *((_DWORD *)a2 + 11);
  *((_DWORD *)this + 32) |= 0x200u;
  *((_DWORD *)this + 11) = v40;
  if ((*((_DWORD *)a2 + 32) & 0x1000) == 0)
    return;
LABEL_41:
  v31 = *((_DWORD *)a2 + 30);
  *((_DWORD *)this + 32) |= 0x1000u;
  *((_DWORD *)this + 30) = v31;
}

void sub_1CC5B5668(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void awd::profile::Metric::~Metric(awd::profile::Metric *this)
{
  *(_QWORD *)this = &off_1E886B688;
  sub_1CC5C305C((uint64_t *)this + 12);
  sub_1CC5C305C((uint64_t *)this + 9);
  sub_1CC5C305C((uint64_t *)this + 6);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

{
  awd::profile::Metric::~Metric(this);
  JUMPOUT(0x1D17AD544);
}

uint64_t awd::profile::Metric::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 124) = a2;
  return this;
}

uint64_t awd::profile::Metric::default_instance(awd::profile::Metric *this, uint64_t a2, uint64_t a3, const char *a4)
{
  uint64_t result;

  result = awd::profile::Metric::default_instance_;
  if (!awd::profile::Metric::default_instance_)
  {
    awd::profile::protobuf_AddDesc_AwdProfile_2eproto(0, a2, a3, a4);
    return awd::profile::Metric::default_instance_;
  }
  return result;
}

double awd::profile::Metric::New(awd::profile::Metric *this)
{
  uint64_t v1;
  double result;

  v1 = operator new();
  *(_QWORD *)v1 = &off_1E886B688;
  *(_QWORD *)(v1 + 72) = 0;
  *(_QWORD *)(v1 + 80) = 0;
  *(_DWORD *)(v1 + 88) = 0;
  *(_QWORD *)(v1 + 96) = 0;
  *(_QWORD *)(v1 + 104) = 0;
  *(_DWORD *)(v1 + 112) = 0;
  *(_QWORD *)(v1 + 120) = 0;
  *(_DWORD *)(v1 + 128) = 0;
  result = 0.0;
  *(_OWORD *)(v1 + 8) = 0u;
  *(_OWORD *)(v1 + 24) = 0u;
  *(_BYTE *)(v1 + 40) = 0;
  *(_QWORD *)(v1 + 44) = 0;
  *(_QWORD *)(v1 + 60) = 0;
  *(_QWORD *)(v1 + 52) = 0;
  return result;
}

uint64_t awd::profile::Metric::Clear(uint64_t this)
{
  uint64_t v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1 = this;
  v2 = *(_DWORD *)(this + 128);
  if ((_BYTE)v2)
  {
    *(_OWORD *)(this + 24) = 0u;
    *(_OWORD *)(this + 8) = 0u;
  }
  if ((v2 & 0xFF00) != 0)
  {
    *(_BYTE *)(this + 40) = 0;
    *(_DWORD *)(this + 44) = 0;
    *(_DWORD *)(this + 120) = 0;
  }
  if (*(int *)(this + 56) >= 1)
  {
    v3 = 0;
    do
    {
      v4 = *(_QWORD *)(*(_QWORD *)(v1 + 48) + 8 * v3);
      this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 32))(v4);
      ++v3;
    }
    while (v3 < *(int *)(v1 + 56));
  }
  *(_DWORD *)(v1 + 56) = 0;
  if (*(int *)(v1 + 80) >= 1)
  {
    v5 = 0;
    do
    {
      v6 = *(_QWORD *)(*(_QWORD *)(v1 + 72) + 8 * v5);
      this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 32))(v6);
      ++v5;
    }
    while (v5 < *(int *)(v1 + 80));
  }
  *(_DWORD *)(v1 + 80) = 0;
  if (*(int *)(v1 + 104) >= 1)
  {
    v7 = 0;
    do
    {
      v8 = *(_QWORD *)(*(_QWORD *)(v1 + 96) + 8 * v7);
      this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 32))(v8);
      ++v7;
    }
    while (v7 < *(int *)(v1 + 104));
  }
  *(_DWORD *)(v1 + 104) = 0;
  *(_DWORD *)(v1 + 128) = 0;
  return this;
}

uint64_t awd::profile::Metric::MergePartialFromCodedStream(awd::profile::Metric *this, wireless_diagnostics::google::protobuf::io::CodedInputStream *a2)
{
  unsigned int *v4;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int *v8;
  unsigned __int8 *v9;
  uint64_t TagFallback;
  int v11;
  unint64_t v12;
  char *v13;
  _BYTE *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  char *v21;
  char *v22;
  char *v23;
  unint64_t v24;
  char *v25;
  uint64_t result;
  _BYTE *v27;
  unsigned int v28;
  _BYTE *v29;
  unsigned int v30;
  _BYTE *v31;
  _BYTE *v32;
  _BYTE *v33;
  unsigned int v34;
  _BYTE *v35;
  unsigned int v36;
  _BYTE *v37;
  unsigned int v38;
  _BYTE *v39;
  _BYTE *v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  int v48;
  int v49;
  int v50;
  BOOL v51;
  int v52;
  int v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  int v61;
  int v62;
  int v63;
  int v64;
  int v65;
  _BYTE *v66;
  int v67;
  uint64_t v68;
  uint64_t v69;
  awd::profile::ConfigurationParameter *v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  int v74;
  int v75;
  int v76;
  int v77;
  _BYTE *v78;
  wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *v79;
  wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *v80;
  unsigned int *v81;
  wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *v82;
  unsigned int v83;

  v4 = (unsigned int *)((char *)this + 12);
  v5 = (unsigned int *)((char *)this + 24);
  v6 = (unsigned int *)((char *)this + 28);
  v7 = (unsigned int *)((char *)this + 44);
  v79 = (awd::profile::Metric *)((char *)this + 48);
  v80 = (awd::profile::Metric *)((char *)this + 72);
  v81 = (unsigned int *)((char *)this + 8);
  v8 = (unsigned int *)((char *)this + 120);
  v82 = (awd::profile::Metric *)((char *)this + 96);
LABEL_2:
  while (1)
  {
    v9 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
    if ((unint64_t)v9 >= *((_QWORD *)a2 + 2) || (char)*v9 < 0)
      break;
    TagFallback = *v9;
    *((_DWORD *)a2 + 8) = TagFallback;
    *((_QWORD *)a2 + 1) = v9 + 1;
    if (!(_DWORD)TagFallback)
      return 1;
LABEL_7:
    switch(TagFallback >> 3)
    {
      case 1u:
        v11 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_38;
        v13 = (char *)*((_QWORD *)a2 + 1);
        v12 = *((_QWORD *)a2 + 2);
        if ((unint64_t)v13 >= v12 || *v13 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v81);
          if (!(_DWORD)result)
            return result;
          v14 = (_BYTE *)*((_QWORD *)a2 + 1);
          v12 = *((_QWORD *)a2 + 2);
        }
        else
        {
          *v81 = *v13;
          v14 = v13 + 1;
          *((_QWORD *)a2 + 1) = v14;
        }
        *((_DWORD *)this + 32) |= 1u;
        if ((unint64_t)v14 < v12 && *v14 == 16)
        {
          v15 = v14 + 1;
          *((_QWORD *)a2 + 1) = v15;
          goto LABEL_46;
        }
        continue;
      case 2u:
        v11 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_38;
        v15 = (char *)*((_QWORD *)a2 + 1);
        v12 = *((_QWORD *)a2 + 2);
LABEL_46:
        if ((unint64_t)v15 >= v12 || *v15 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v4);
          if (!(_DWORD)result)
            return result;
          v27 = (_BYTE *)*((_QWORD *)a2 + 1);
          v12 = *((_QWORD *)a2 + 2);
        }
        else
        {
          *v4 = *v15;
          v27 = v15 + 1;
          *((_QWORD *)a2 + 1) = v27;
        }
        *((_DWORD *)this + 32) |= 2u;
        if ((unint64_t)v27 >= v12 || *v27 != 24)
          continue;
        v16 = v27 + 1;
        *((_QWORD *)a2 + 1) = v16;
LABEL_54:
        v83 = 0;
        if ((unint64_t)v16 >= v12 || *v16 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v83);
          if (!(_DWORD)result)
            return result;
          v28 = v83;
          v29 = (_BYTE *)*((_QWORD *)a2 + 1);
          v12 = *((_QWORD *)a2 + 2);
        }
        else
        {
          v28 = *v16;
          v29 = v16 + 1;
          *((_QWORD *)a2 + 1) = v29;
        }
        *((_DWORD *)this + 4) = -(v28 & 1) ^ (v28 >> 1);
        *((_DWORD *)this + 32) |= 4u;
        if ((unint64_t)v29 >= v12 || *v29 != 32)
          continue;
        v17 = v29 + 1;
        *((_QWORD *)a2 + 1) = v17;
LABEL_62:
        v83 = 0;
        if ((unint64_t)v17 >= v12 || *v17 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v83);
          if (!(_DWORD)result)
            return result;
          v30 = v83;
          v31 = (_BYTE *)*((_QWORD *)a2 + 1);
          v12 = *((_QWORD *)a2 + 2);
        }
        else
        {
          v30 = *v17;
          v31 = v17 + 1;
          *((_QWORD *)a2 + 1) = v31;
        }
        *((_DWORD *)this + 5) = -(v30 & 1) ^ (v30 >> 1);
        *((_DWORD *)this + 32) |= 8u;
        if ((unint64_t)v31 >= v12 || *v31 != 40)
          continue;
        v18 = v31 + 1;
        *((_QWORD *)a2 + 1) = v18;
LABEL_70:
        if ((unint64_t)v18 >= v12 || *v18 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v5);
          if (!(_DWORD)result)
            return result;
          v32 = (_BYTE *)*((_QWORD *)a2 + 1);
          v12 = *((_QWORD *)a2 + 2);
        }
        else
        {
          *v5 = *v18;
          v32 = v18 + 1;
          *((_QWORD *)a2 + 1) = v32;
        }
        *((_DWORD *)this + 32) |= 0x10u;
        if ((unint64_t)v32 >= v12 || *v32 != 48)
          continue;
        v19 = v32 + 1;
        *((_QWORD *)a2 + 1) = v19;
LABEL_78:
        if ((unint64_t)v19 >= v12 || *v19 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v6);
          if (!(_DWORD)result)
            return result;
          v33 = (_BYTE *)*((_QWORD *)a2 + 1);
          v12 = *((_QWORD *)a2 + 2);
        }
        else
        {
          *v6 = *v19;
          v33 = v19 + 1;
          *((_QWORD *)a2 + 1) = v33;
        }
        *((_DWORD *)this + 32) |= 0x20u;
        if ((unint64_t)v33 >= v12 || *v33 != 56)
          continue;
        v20 = v33 + 1;
        *((_QWORD *)a2 + 1) = v20;
LABEL_86:
        v83 = 0;
        if ((unint64_t)v20 >= v12 || *v20 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v83);
          if (!(_DWORD)result)
            return result;
          v34 = v83;
          v35 = (_BYTE *)*((_QWORD *)a2 + 1);
          v12 = *((_QWORD *)a2 + 2);
        }
        else
        {
          v34 = *v20;
          v35 = v20 + 1;
          *((_QWORD *)a2 + 1) = v35;
        }
        *((_DWORD *)this + 8) = v34;
        *((_DWORD *)this + 32) |= 0x40u;
        if ((unint64_t)v35 >= v12 || *v35 != 64)
          continue;
        v21 = v35 + 1;
        *((_QWORD *)a2 + 1) = v21;
LABEL_94:
        v83 = 0;
        if ((unint64_t)v21 >= v12 || *v21 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v83);
          if (!(_DWORD)result)
            return result;
          v36 = v83;
          v37 = (_BYTE *)*((_QWORD *)a2 + 1);
          v12 = *((_QWORD *)a2 + 2);
        }
        else
        {
          v36 = *v21;
          v37 = v21 + 1;
          *((_QWORD *)a2 + 1) = v37;
        }
        *((_DWORD *)this + 9) = v36;
        *((_DWORD *)this + 32) |= 0x80u;
        if ((unint64_t)v37 >= v12 || *v37 != 72)
          continue;
        v22 = v37 + 1;
        *((_QWORD *)a2 + 1) = v22;
LABEL_102:
        v83 = 0;
        if ((unint64_t)v22 >= v12 || *v22 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v83);
          if (!(_DWORD)result)
            return result;
          v38 = v83;
          v39 = (_BYTE *)*((_QWORD *)a2 + 1);
          v12 = *((_QWORD *)a2 + 2);
        }
        else
        {
          v38 = *v22;
          v39 = v22 + 1;
          *((_QWORD *)a2 + 1) = v39;
        }
        *((_BYTE *)this + 40) = v38 != 0;
        *((_DWORD *)this + 32) |= 0x100u;
        if ((unint64_t)v39 >= v12 || *v39 != 80)
          continue;
        v23 = v39 + 1;
        *((_QWORD *)a2 + 1) = v23;
LABEL_110:
        if ((unint64_t)v23 >= v12 || *v23 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v7);
          if (!(_DWORD)result)
            return result;
          v40 = (_BYTE *)*((_QWORD *)a2 + 1);
          v12 = *((_QWORD *)a2 + 2);
        }
        else
        {
          *v7 = *v23;
          v40 = v23 + 1;
          *((_QWORD *)a2 + 1) = v40;
        }
        *((_DWORD *)this + 32) |= 0x200u;
        if ((unint64_t)v40 >= v12 || *v40 != 90)
          continue;
        break;
      case 3u:
        v11 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_38;
        v16 = (char *)*((_QWORD *)a2 + 1);
        v12 = *((_QWORD *)a2 + 2);
        goto LABEL_54;
      case 4u:
        v11 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_38;
        v17 = (char *)*((_QWORD *)a2 + 1);
        v12 = *((_QWORD *)a2 + 2);
        goto LABEL_62;
      case 5u:
        v11 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_38;
        v18 = (char *)*((_QWORD *)a2 + 1);
        v12 = *((_QWORD *)a2 + 2);
        goto LABEL_70;
      case 6u:
        v11 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_38;
        v19 = (char *)*((_QWORD *)a2 + 1);
        v12 = *((_QWORD *)a2 + 2);
        goto LABEL_78;
      case 7u:
        v11 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_38;
        v20 = (char *)*((_QWORD *)a2 + 1);
        v12 = *((_QWORD *)a2 + 2);
        goto LABEL_86;
      case 8u:
        v11 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_38;
        v21 = (char *)*((_QWORD *)a2 + 1);
        v12 = *((_QWORD *)a2 + 2);
        goto LABEL_94;
      case 9u:
        v11 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_38;
        v22 = (char *)*((_QWORD *)a2 + 1);
        v12 = *((_QWORD *)a2 + 2);
        goto LABEL_102;
      case 0xAu:
        v11 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_38;
        v23 = (char *)*((_QWORD *)a2 + 1);
        v12 = *((_QWORD *)a2 + 2);
        goto LABEL_110;
      case 0xBu:
        v11 = TagFallback & 7;
        if (v11 == 2)
          goto LABEL_118;
        goto LABEL_38;
      case 0xCu:
        v11 = TagFallback & 7;
        if (v11 == 2)
          goto LABEL_136;
        goto LABEL_38;
      case 0xDu:
        v11 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_38;
        v25 = (char *)*((_QWORD *)a2 + 1);
        v24 = *((_QWORD *)a2 + 2);
        goto LABEL_154;
      case 0xEu:
        v11 = TagFallback & 7;
        if (v11 != 2)
          goto LABEL_38;
        goto LABEL_162;
      default:
        v11 = TagFallback & 7;
LABEL_38:
        if (v11 == 4)
          return 1;
        if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(a2, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback) & 1) == 0)return 0;
        continue;
    }
    do
    {
      *((_QWORD *)a2 + 1) = v40 + 1;
LABEL_118:
      v41 = *((_DWORD *)this + 15);
      v42 = *((int *)this + 14);
      if ((int)v42 >= v41)
      {
        if (v41 == *((_DWORD *)this + 16))
        {
          wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve(v79);
          v41 = *((_DWORD *)this + 15);
        }
        *((_DWORD *)this + 15) = v41 + 1;
        v44 = operator new();
        *(_QWORD *)v44 = &off_1E886B250;
        *(_QWORD *)(v44 + 48) = 0;
        *(_DWORD *)(v44 + 44) = 0;
        *(_OWORD *)(v44 + 8) = 0u;
        *(_OWORD *)(v44 + 24) = 0u;
        *(_BYTE *)(v44 + 40) = 0;
        v45 = *((_QWORD *)this + 6);
        v46 = *((int *)this + 14);
        *((_DWORD *)this + 14) = v46 + 1;
        *(_QWORD *)(v45 + 8 * v46) = v44;
      }
      else
      {
        v43 = *((_QWORD *)this + 6);
        *((_DWORD *)this + 14) = v42 + 1;
        v44 = *(_QWORD *)(v43 + 8 * v42);
      }
      v83 = 0;
      v47 = (char *)*((_QWORD *)a2 + 1);
      if ((unint64_t)v47 >= *((_QWORD *)a2 + 2) || *v47 < 0)
      {
        if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v83))
          return 0;
      }
      else
      {
        v83 = *v47;
        *((_QWORD *)a2 + 1) = v47 + 1;
      }
      v48 = *((_DWORD *)a2 + 14);
      v49 = *((_DWORD *)a2 + 15);
      *((_DWORD *)a2 + 14) = v48 + 1;
      if (v48 >= v49)
        return 0;
      wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(a2);
      if (!awd::profile::ProcessingRule::MergePartialFromCodedStream((awd::profile::ProcessingRule *)v44, a2)|| !*((_BYTE *)a2 + 36))
      {
        return 0;
      }
      wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(a2);
      v50 = *((_DWORD *)a2 + 14);
      v51 = __OFSUB__(v50, 1);
      v52 = v50 - 1;
      if (v52 < 0 == v51)
        *((_DWORD *)a2 + 14) = v52;
      v40 = (_BYTE *)*((_QWORD *)a2 + 1);
      if ((unint64_t)v40 >= *((_QWORD *)a2 + 2))
        goto LABEL_2;
      v53 = *v40;
    }
    while (v53 == 90);
    if (v53 == 98)
    {
      do
      {
        *((_QWORD *)a2 + 1) = v40 + 1;
LABEL_136:
        v54 = *((_DWORD *)this + 21);
        v55 = *((int *)this + 20);
        if ((int)v55 >= v54)
        {
          if (v54 == *((_DWORD *)this + 22))
          {
            wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve(v80);
            v54 = *((_DWORD *)this + 21);
          }
          *((_DWORD *)this + 21) = v54 + 1;
          v57 = operator new();
          *(_QWORD *)v57 = &off_1E886AF80;
          *(_OWORD *)(v57 + 8) = 0u;
          *(_OWORD *)(v57 + 24) = 0u;
          *(_QWORD *)(v57 + 40) = 0;
          v58 = *((_QWORD *)this + 9);
          v59 = *((int *)this + 20);
          *((_DWORD *)this + 20) = v59 + 1;
          *(_QWORD *)(v58 + 8 * v59) = v57;
        }
        else
        {
          v56 = *((_QWORD *)this + 9);
          *((_DWORD *)this + 20) = v55 + 1;
          v57 = *(_QWORD *)(v56 + 8 * v55);
        }
        v83 = 0;
        v60 = (char *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v60 >= *((_QWORD *)a2 + 2) || *v60 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v83))return 0;
        }
        else
        {
          v83 = *v60;
          *((_QWORD *)a2 + 1) = v60 + 1;
        }
        v61 = *((_DWORD *)a2 + 14);
        v62 = *((_DWORD *)a2 + 15);
        *((_DWORD *)a2 + 14) = v61 + 1;
        if (v61 >= v62)
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(a2);
        if (!awd::profile::BedfConfig::MergePartialFromCodedStream((awd::profile::BedfConfig *)v57, a2)
          || !*((_BYTE *)a2 + 36))
        {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(a2);
        v63 = *((_DWORD *)a2 + 14);
        v51 = __OFSUB__(v63, 1);
        v64 = v63 - 1;
        if (v64 < 0 == v51)
          *((_DWORD *)a2 + 14) = v64;
        v40 = (_BYTE *)*((_QWORD *)a2 + 1);
        v24 = *((_QWORD *)a2 + 2);
        if ((unint64_t)v40 >= v24)
          goto LABEL_2;
        v65 = *v40;
      }
      while (v65 == 98);
      if (v65 == 104)
      {
        v25 = v40 + 1;
        *((_QWORD *)a2 + 1) = v25;
LABEL_154:
        if ((unint64_t)v25 < v24 && (*v25 & 0x80000000) == 0)
        {
          *v8 = *v25;
          v66 = v25 + 1;
          *((_QWORD *)a2 + 1) = v66;
          goto LABEL_159;
        }
        result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v8);
        if (!(_DWORD)result)
          return result;
        v66 = (_BYTE *)*((_QWORD *)a2 + 1);
        v24 = *((_QWORD *)a2 + 2);
LABEL_159:
        *((_DWORD *)this + 32) |= 0x1000u;
        if ((unint64_t)v66 < v24 && *v66 == 114)
        {
          do
          {
            *((_QWORD *)a2 + 1) = v66 + 1;
LABEL_162:
            v67 = *((_DWORD *)this + 27);
            v68 = *((int *)this + 26);
            if ((int)v68 >= v67)
            {
              if (v67 == *((_DWORD *)this + 28))
              {
                wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve(v82);
                v67 = *((_DWORD *)this + 27);
              }
              *((_DWORD *)this + 27) = v67 + 1;
              v70 = (awd::profile::ConfigurationParameter *)operator new();
              *(_QWORD *)v70 = &off_1E886B598;
              *((_QWORD *)v70 + 1) = MEMORY[0x1E0DE8338];
              *((_QWORD *)v70 + 2) = 0;
              *((_QWORD *)v70 + 3) = 0;
              v71 = *((_QWORD *)this + 12);
              v72 = *((int *)this + 26);
              *((_DWORD *)this + 26) = v72 + 1;
              *(_QWORD *)(v71 + 8 * v72) = v70;
            }
            else
            {
              v69 = *((_QWORD *)this + 12);
              *((_DWORD *)this + 26) = v68 + 1;
              v70 = *(awd::profile::ConfigurationParameter **)(v69 + 8 * v68);
            }
            v83 = 0;
            v73 = (char *)*((_QWORD *)a2 + 1);
            if ((unint64_t)v73 >= *((_QWORD *)a2 + 2) || *v73 < 0)
            {
              if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v83))return 0;
            }
            else
            {
              v83 = *v73;
              *((_QWORD *)a2 + 1) = v73 + 1;
            }
            v74 = *((_DWORD *)a2 + 14);
            v75 = *((_DWORD *)a2 + 15);
            *((_DWORD *)a2 + 14) = v74 + 1;
            if (v74 >= v75)
              return 0;
            wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(a2);
            if (!awd::profile::ConfigurationParameter::MergePartialFromCodedStream(v70, a2)
              || !*((_BYTE *)a2 + 36))
            {
              return 0;
            }
            wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(a2);
            v76 = *((_DWORD *)a2 + 14);
            v51 = __OFSUB__(v76, 1);
            v77 = v76 - 1;
            if (v77 < 0 == v51)
              *((_DWORD *)a2 + 14) = v77;
            v66 = (_BYTE *)*((_QWORD *)a2 + 1);
            v78 = (_BYTE *)*((_QWORD *)a2 + 2);
          }
          while (v66 < v78 && *v66 == 114);
          if (v66 == v78 && (*((_DWORD *)a2 + 11) || *((_DWORD *)a2 + 6) == *((_DWORD *)a2 + 10)))
          {
            *((_DWORD *)a2 + 8) = 0;
            result = 1;
            *((_BYTE *)a2 + 36) = 1;
            return result;
          }
        }
      }
    }
  }
  TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(a2);
  *((_DWORD *)a2 + 8) = TagFallback;
  if ((_DWORD)TagFallback)
    goto LABEL_7;
  return 1;
}

uint64_t awd::profile::Metric::SerializeWithCachedSizes(uint64_t this, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v5 = this;
  v6 = *(_DWORD *)(this + 128);
  if ((v6 & 1) != 0)
  {
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(unsigned int *)(this + 8), (uint64_t)a2, a4);
    v6 = *(_DWORD *)(v5 + 128);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0)
        goto LABEL_4;
      goto LABEL_26;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, *(unsigned int *)(v5 + 12), (uint64_t)a2, a4);
  v6 = *(_DWORD *)(v5 + 128);
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0)
      goto LABEL_5;
    goto LABEL_27;
  }
LABEL_26:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteSInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, *(unsigned int *)(v5 + 16), (uint64_t)a2, a4);
  v6 = *(_DWORD *)(v5 + 128);
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_28;
  }
LABEL_27:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteSInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4, *(unsigned int *)(v5 + 20), (uint64_t)a2, a4);
  v6 = *(_DWORD *)(v5 + 128);
  if ((v6 & 0x10) == 0)
  {
LABEL_6:
    if ((v6 & 0x20) == 0)
      goto LABEL_7;
    goto LABEL_29;
  }
LABEL_28:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5, *(unsigned int *)(v5 + 24), (uint64_t)a2, a4);
  v6 = *(_DWORD *)(v5 + 128);
  if ((v6 & 0x20) == 0)
  {
LABEL_7:
    if ((v6 & 0x40) == 0)
      goto LABEL_8;
    goto LABEL_30;
  }
LABEL_29:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)6, *(unsigned int *)(v5 + 28), (uint64_t)a2, a4);
  v6 = *(_DWORD *)(v5 + 128);
  if ((v6 & 0x40) == 0)
  {
LABEL_8:
    if ((v6 & 0x80) == 0)
      goto LABEL_9;
    goto LABEL_31;
  }
LABEL_30:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)7, *(unsigned int *)(v5 + 32), (uint64_t)a2, a4);
  v6 = *(_DWORD *)(v5 + 128);
  if ((v6 & 0x80) == 0)
  {
LABEL_9:
    if ((v6 & 0x100) == 0)
      goto LABEL_10;
    goto LABEL_32;
  }
LABEL_31:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)8, *(unsigned int *)(v5 + 36), (uint64_t)a2, a4);
  v6 = *(_DWORD *)(v5 + 128);
  if ((v6 & 0x100) == 0)
  {
LABEL_10:
    if ((v6 & 0x200) == 0)
      goto LABEL_12;
    goto LABEL_11;
  }
LABEL_32:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)9, *(unsigned __int8 *)(v5 + 40), (uint64_t)a2, a4);
  if ((*(_DWORD *)(v5 + 128) & 0x200) != 0)
LABEL_11:
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xA, *(unsigned int *)(v5 + 44), (uint64_t)a2, a4);
LABEL_12:
  if (*(int *)(v5 + 56) >= 1)
  {
    v7 = 0;
    do
      this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xB, *(_QWORD *)(*(_QWORD *)(v5 + 48) + 8 * v7++), a2, a4);
    while (v7 < *(int *)(v5 + 56));
  }
  if (*(int *)(v5 + 80) >= 1)
  {
    v8 = 0;
    do
      this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xC, *(_QWORD *)(*(_QWORD *)(v5 + 72) + 8 * v8++), a2, a4);
    while (v8 < *(int *)(v5 + 80));
  }
  if ((*(_BYTE *)(v5 + 129) & 0x10) != 0)
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xD, *(unsigned int *)(v5 + 120), (uint64_t)a2, a4);
  if (*(int *)(v5 + 104) >= 1)
  {
    v9 = 0;
    do
      this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xE, *(_QWORD *)(*(_QWORD *)(v5 + 96) + 8 * v9++), a2, a4);
    while (v9 < *(int *)(v5 + 104));
  }
  return this;
}

uint64_t awd::profile::Metric::ByteSize(awd::profile::Metric *this)
{
  int v2;
  int v3;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v4;
  int v5;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v6;
  int v7;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v8;
  int v9;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v10;
  int v11;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v12;
  int v13;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v14;
  int v15;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v16;
  int v17;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v18;
  int v19;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v20;
  int v21;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v22;
  int v23;
  int v24;
  int v25;
  uint64_t v26;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v27;
  int v28;
  int v29;
  int v30;
  int v31;
  uint64_t v32;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v33;
  int v34;
  int v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v39;
  int v40;
  int v41;

  v2 = *((_DWORD *)this + 32);
  if (!(_BYTE)v2)
  {
    v3 = 0;
    goto LABEL_49;
  }
  if ((v2 & 1) == 0)
  {
    v3 = 0;
    if ((v2 & 2) == 0)
      goto LABEL_14;
    goto LABEL_10;
  }
  v4 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 2);
  if (v4 >= 0x80)
  {
    v5 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v4);
    v2 = *((_DWORD *)this + 32);
  }
  else
  {
    v5 = 1;
  }
  v3 = v5 + 1;
  if ((v2 & 2) != 0)
  {
LABEL_10:
    v6 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 3);
    if (v6 >= 0x80)
    {
      v7 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v6);
      v2 = *((_DWORD *)this + 32);
    }
    else
    {
      v7 = 1;
    }
    v3 += v7 + 1;
  }
LABEL_14:
  if ((v2 & 4) != 0)
  {
    v8 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)((2 * *((_DWORD *)this + 4)) ^ (*((int *)this + 4) >> 31));
    if (v8 >= 0x80)
    {
      v9 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v8);
      v2 = *((_DWORD *)this + 32);
    }
    else
    {
      v9 = 1;
    }
    v3 += v9 + 1;
    if ((v2 & 8) == 0)
    {
LABEL_16:
      if ((v2 & 0x10) == 0)
        goto LABEL_17;
      goto LABEL_29;
    }
  }
  else if ((v2 & 8) == 0)
  {
    goto LABEL_16;
  }
  v10 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)((2 * *((_DWORD *)this + 5)) ^ (*((int *)this + 5) >> 31));
  if (v10 >= 0x80)
  {
    v11 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v10);
    v2 = *((_DWORD *)this + 32);
  }
  else
  {
    v11 = 1;
  }
  v3 += v11 + 1;
  if ((v2 & 0x10) == 0)
  {
LABEL_17:
    if ((v2 & 0x20) == 0)
      goto LABEL_18;
    goto LABEL_33;
  }
LABEL_29:
  v12 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 6);
  if (v12 >= 0x80)
  {
    v13 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v12);
    v2 = *((_DWORD *)this + 32);
  }
  else
  {
    v13 = 1;
  }
  v3 += v13 + 1;
  if ((v2 & 0x20) == 0)
  {
LABEL_18:
    if ((v2 & 0x40) == 0)
      goto LABEL_19;
    goto LABEL_37;
  }
LABEL_33:
  v14 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 7);
  if (v14 >= 0x80)
  {
    v15 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v14);
    v2 = *((_DWORD *)this + 32);
  }
  else
  {
    v15 = 1;
  }
  v3 += v15 + 1;
  if ((v2 & 0x40) == 0)
  {
LABEL_19:
    if ((v2 & 0x80) == 0)
      goto LABEL_49;
    goto LABEL_43;
  }
LABEL_37:
  v16 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 8);
  if ((v16 & 0x80000000) != 0)
  {
    v17 = 11;
  }
  else if (v16 >= 0x80)
  {
    v17 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v16) + 1;
    v2 = *((_DWORD *)this + 32);
  }
  else
  {
    v17 = 2;
  }
  v3 += v17;
  if ((v2 & 0x80) != 0)
  {
LABEL_43:
    v18 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 9);
    if ((v18 & 0x80000000) != 0)
    {
      v19 = 11;
    }
    else if (v18 >= 0x80)
    {
      v19 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v18) + 1;
      v2 = *((_DWORD *)this + 32);
    }
    else
    {
      v19 = 2;
    }
    v3 += v19;
  }
LABEL_49:
  if ((v2 & 0xFF00) != 0)
  {
    if ((v2 & 0x100) != 0)
      v3 += 2;
    if ((v2 & 0x200) != 0)
    {
      v20 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 11);
      if (v20 >= 0x80)
      {
        v21 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v20) + 1;
        v2 = *((_DWORD *)this + 32);
      }
      else
      {
        v21 = 2;
      }
      v3 += v21;
    }
    if ((v2 & 0x1000) != 0)
    {
      v22 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 30);
      if (v22 >= 0x80)
        v23 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v22) + 1;
      else
        v23 = 2;
      v3 += v23;
    }
  }
  v24 = *((_DWORD *)this + 14);
  v25 = v24 + v3;
  if (v24 >= 1)
  {
    v26 = 0;
    do
    {
      v27 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)awd::profile::ProcessingRule::ByteSize(*(awd::profile::ProcessingRule **)(*((_QWORD *)this + 6) + 8 * v26));
      v28 = (int)v27;
      if (v27 >= 0x80)
        v29 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v27);
      else
        v29 = 1;
      v25 += v28 + v29;
      ++v26;
    }
    while (v26 < *((int *)this + 14));
  }
  v30 = *((_DWORD *)this + 20);
  v31 = v30 + v25;
  if (v30 >= 1)
  {
    v32 = 0;
    do
    {
      v33 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)awd::profile::BedfConfig::ByteSize(*(awd::profile::BedfConfig **)(*((_QWORD *)this + 9) + 8 * v32));
      v34 = (int)v33;
      if (v33 >= 0x80)
        v35 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v33);
      else
        v35 = 1;
      v31 += v34 + v35;
      ++v32;
    }
    while (v32 < *((int *)this + 20));
  }
  v36 = *((_DWORD *)this + 26);
  v37 = (v36 + v31);
  if (v36 >= 1)
  {
    v38 = 0;
    do
    {
      v39 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)awd::profile::ConfigurationParameter::ByteSize(*(awd::profile::ConfigurationParameter **)(*((_QWORD *)this + 12) + 8 * v38));
      v40 = (int)v39;
      if (v39 >= 0x80)
        v41 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v39);
      else
        v41 = 1;
      v37 = (v40 + v37 + v41);
      ++v38;
    }
    while (v38 < *((int *)this + 26));
  }
  *((_DWORD *)this + 31) = v37;
  return v37;
}

void awd::profile::Metric::CopyFrom(awd::profile::Metric *this, const awd::profile::Metric *a2)
{
  if (a2 != this)
  {
    (*(void (**)(awd::profile::Metric *))(*(_QWORD *)this + 32))(this);
    awd::profile::Metric::MergeFrom(this, a2);
  }
}

uint64_t awd::profile::Metric::IsInitialized(awd::profile::Metric *this)
{
  return 1;
}

uint64_t awd::profile::Metric::Swap(uint64_t this, awd::profile::Metric *a2)
{
  _DWORD *v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;

  if (a2 != (awd::profile::Metric *)this)
  {
    v3 = (_DWORD *)this;
    v4 = *(_DWORD *)(this + 8);
    *(_DWORD *)(this + 8) = *((_DWORD *)a2 + 2);
    *((_DWORD *)a2 + 2) = v4;
    v5 = *(_DWORD *)(this + 12);
    *(_DWORD *)(this + 12) = *((_DWORD *)a2 + 3);
    *((_DWORD *)a2 + 3) = v5;
    v6 = *(_DWORD *)(this + 16);
    *(_DWORD *)(this + 16) = *((_DWORD *)a2 + 4);
    *((_DWORD *)a2 + 4) = v6;
    v7 = *(_DWORD *)(this + 20);
    *(_DWORD *)(this + 20) = *((_DWORD *)a2 + 5);
    *((_DWORD *)a2 + 5) = v7;
    v8 = *(_DWORD *)(this + 24);
    *(_DWORD *)(this + 24) = *((_DWORD *)a2 + 6);
    *((_DWORD *)a2 + 6) = v8;
    v9 = *(_DWORD *)(this + 28);
    *(_DWORD *)(this + 28) = *((_DWORD *)a2 + 7);
    *((_DWORD *)a2 + 7) = v9;
    v10 = *(_DWORD *)(this + 32);
    *(_DWORD *)(this + 32) = *((_DWORD *)a2 + 8);
    *((_DWORD *)a2 + 8) = v10;
    v11 = *(_DWORD *)(this + 36);
    *(_DWORD *)(this + 36) = *((_DWORD *)a2 + 9);
    *((_DWORD *)a2 + 9) = v11;
    LOBYTE(v11) = *(_BYTE *)(this + 40);
    *(_BYTE *)(this + 40) = *((_BYTE *)a2 + 40);
    *((_BYTE *)a2 + 40) = v11;
    v12 = *(_DWORD *)(this + 44);
    *(_DWORD *)(this + 44) = *((_DWORD *)a2 + 11);
    *((_DWORD *)a2 + 11) = v12;
    wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Swap();
    wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Swap();
    v13 = v3[30];
    v3[30] = *((_DWORD *)a2 + 30);
    *((_DWORD *)a2 + 30) = v13;
    this = wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Swap();
    v14 = v3[32];
    v3[32] = *((_DWORD *)a2 + 32);
    *((_DWORD *)a2 + 32) = v14;
    v15 = v3[31];
    v3[31] = *((_DWORD *)a2 + 31);
    *((_DWORD *)a2 + 31) = v15;
  }
  return this;
}

_QWORD *awd::profile::Metric::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return sub_1CC59E69C(a1, "awd.profile.Metric");
}

double awd::profile::Profile::SharedCtor(awd::profile::Profile *this)
{
  double result;

  result = 0.0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 4) = 0;
  *((_DWORD *)this + 28) = 0;
  *((_BYTE *)this + 116) = 0;
  *((_QWORD *)this + 9) = 0;
  *((_QWORD *)this + 10) = 0;
  *((_QWORD *)this + 8) = 0;
  *((_QWORD *)this + 15) = MEMORY[0x1E0DE8338];
  *((_QWORD *)this + 16) = 0;
  return result;
}

uint64_t awd::profile::Log::default_instance(awd::profile::Log *this, uint64_t a2, uint64_t a3, const char *a4)
{
  uint64_t result;

  result = awd::profile::Log::default_instance_;
  if (!awd::profile::Log::default_instance_)
  {
    awd::profile::protobuf_AddDesc_AwdProfile_2eproto(0, a2, a3, a4);
    return awd::profile::Log::default_instance_;
  }
  return result;
}

awd::profile::Profile *awd::profile::Profile::Profile(awd::profile::Profile *this, const awd::profile::Profile *a2)
{
  *(_QWORD *)this = &off_1E886B700;
  *(_OWORD *)((char *)this + 40) = 0u;
  *((_DWORD *)this + 28) = 0;
  *((_BYTE *)this + 116) = 0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *((_DWORD *)this + 14) = 0;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *(_OWORD *)((char *)this + 92) = 0u;
  *((_QWORD *)this + 15) = MEMORY[0x1E0DE8338];
  *((_QWORD *)this + 16) = 0;
  awd::profile::Profile::MergeFrom(this, a2);
  return this;
}

void sub_1CC5B6A90(_Unwind_Exception *a1)
{
  int *v1;
  uint64_t *v2;
  uint64_t *v3;

  sub_1CC5C30D4(v1 + 22);
  sub_1CC5C305C(v3);
  sub_1CC5C3154(v2);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite((wireless_diagnostics::google::protobuf::MessageLite *)v1);
  _Unwind_Resume(a1);
}

void awd::profile::Profile::MergeFrom(awd::profile::Profile *this, const awd::profile::Profile *a2)
{
  int v4;
  uint64_t v5;
  const awd::profile::Metric *v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  wireless_diagnostics::google::protobuf::internal::StringTypeHandlerBase *v13;
  uint64_t v14;
  const std::string *v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  std::string *v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  uint64_t v28;
  const awd::profile::Log *v29;
  int v30;
  int v31;
  int v32;
  int v33;
  char v34;
  const std::string *v35;
  std::string *v36;
  _BYTE v37[48];

  if (a2 == this)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v37);
  }
  v4 = *((_DWORD *)a2 + 6);
  if (v4)
  {
    sub_1CC5C2EE8((_DWORD *)this + 4, *((_DWORD *)this + 6) + v4);
    memcpy((void *)(*((_QWORD *)this + 2) + 4 * *((int *)this + 6)), *((const void **)a2 + 2), 4 * *((int *)a2 + 6));
    *((_DWORD *)this + 6) += *((_DWORD *)a2 + 6);
  }
  wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((awd::profile::Profile *)((char *)this + 40));
  if (*((int *)a2 + 12) >= 1)
  {
    v5 = 0;
    do
    {
      v6 = *(const awd::profile::Metric **)(*((_QWORD *)a2 + 5) + 8 * v5);
      v7 = *((_DWORD *)this + 13);
      v8 = *((int *)this + 12);
      if ((int)v8 >= v7)
      {
        if (v7 == *((_DWORD *)this + 14))
        {
          wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((awd::profile::Profile *)((char *)this + 40));
          v7 = *((_DWORD *)this + 13);
        }
        *((_DWORD *)this + 13) = v7 + 1;
        v10 = operator new();
        *(_QWORD *)v10 = &off_1E886B688;
        *(_QWORD *)(v10 + 72) = 0;
        *(_QWORD *)(v10 + 80) = 0;
        *(_DWORD *)(v10 + 88) = 0;
        *(_QWORD *)(v10 + 96) = 0;
        *(_QWORD *)(v10 + 104) = 0;
        *(_DWORD *)(v10 + 112) = 0;
        *(_QWORD *)(v10 + 120) = 0;
        *(_DWORD *)(v10 + 128) = 0;
        *(_BYTE *)(v10 + 40) = 0;
        *(_OWORD *)(v10 + 24) = 0u;
        *(_OWORD *)(v10 + 8) = 0u;
        *(_QWORD *)(v10 + 44) = 0;
        *(_QWORD *)(v10 + 60) = 0;
        *(_QWORD *)(v10 + 52) = 0;
        v11 = *((_QWORD *)this + 5);
        v12 = *((int *)this + 12);
        *((_DWORD *)this + 12) = v12 + 1;
        *(_QWORD *)(v11 + 8 * v12) = v10;
      }
      else
      {
        v9 = *((_QWORD *)this + 5);
        *((_DWORD *)this + 12) = v8 + 1;
        v10 = *(_QWORD *)(v9 + 8 * v8);
      }
      awd::profile::Metric::MergeFrom((awd::profile::Metric *)v10, v6);
      ++v5;
    }
    while (v5 < *((int *)a2 + 12));
  }
  v13 = (wireless_diagnostics::google::protobuf::internal::StringTypeHandlerBase *)wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((awd::profile::Profile *)((char *)this + 88));
  if (*((int *)a2 + 24) >= 1)
  {
    v14 = 0;
    do
    {
      v15 = *(const std::string **)(*((_QWORD *)a2 + 11) + 8 * v14);
      v16 = *((_DWORD *)this + 25);
      v17 = *((int *)this + 24);
      if ((int)v17 >= v16)
      {
        if (v16 == *((_DWORD *)this + 26))
        {
          v13 = (wireless_diagnostics::google::protobuf::internal::StringTypeHandlerBase *)wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((awd::profile::Profile *)((char *)this + 88));
          v16 = *((_DWORD *)this + 25);
        }
        *((_DWORD *)this + 25) = v16 + 1;
        v19 = (std::string *)wireless_diagnostics::google::protobuf::internal::StringTypeHandlerBase::New(v13);
        v20 = *((_QWORD *)this + 11);
        v21 = *((int *)this + 24);
        *((_DWORD *)this + 24) = v21 + 1;
        *(_QWORD *)(v20 + 8 * v21) = v19;
      }
      else
      {
        v18 = *((_QWORD *)this + 11);
        *((_DWORD *)this + 24) = v17 + 1;
        v19 = *(std::string **)(v18 + 8 * v17);
      }
      v13 = (wireless_diagnostics::google::protobuf::internal::StringTypeHandlerBase *)std::string::operator=(v19, v15);
      ++v14;
    }
    while (v14 < *((int *)a2 + 24));
  }
  v22 = *((_DWORD *)a2 + 33);
  if ((_BYTE)v22)
  {
    if ((v22 & 1) != 0)
    {
      v23 = *((_DWORD *)a2 + 2);
      *((_DWORD *)this + 33) |= 1u;
      *((_DWORD *)this + 2) = v23;
      v22 = *((_DWORD *)a2 + 33);
      if ((v22 & 2) == 0)
      {
LABEL_24:
        if ((v22 & 8) == 0)
          goto LABEL_25;
        goto LABEL_31;
      }
    }
    else if ((v22 & 2) == 0)
    {
      goto LABEL_24;
    }
    v24 = *((_DWORD *)a2 + 3);
    *((_DWORD *)this + 33) |= 2u;
    *((_DWORD *)this + 3) = v24;
    v22 = *((_DWORD *)a2 + 33);
    if ((v22 & 8) == 0)
    {
LABEL_25:
      if ((v22 & 0x10) == 0)
        goto LABEL_26;
      goto LABEL_32;
    }
LABEL_31:
    v25 = *((_DWORD *)a2 + 8);
    *((_DWORD *)this + 33) |= 8u;
    *((_DWORD *)this + 8) = v25;
    v22 = *((_DWORD *)a2 + 33);
    if ((v22 & 0x10) == 0)
    {
LABEL_26:
      if ((v22 & 0x20) == 0)
        goto LABEL_27;
      goto LABEL_33;
    }
LABEL_32:
    v26 = *((_DWORD *)a2 + 9);
    *((_DWORD *)this + 33) |= 0x10u;
    *((_DWORD *)this + 9) = v26;
    v22 = *((_DWORD *)a2 + 33);
    if ((v22 & 0x20) == 0)
    {
LABEL_27:
      if ((v22 & 0x80) == 0)
        goto LABEL_39;
      goto LABEL_34;
    }
LABEL_33:
    v27 = *((_DWORD *)a2 + 16);
    *((_DWORD *)this + 33) |= 0x20u;
    *((_DWORD *)this + 16) = v27;
    v22 = *((_DWORD *)a2 + 33);
    if ((v22 & 0x80) == 0)
      goto LABEL_39;
LABEL_34:
    *((_DWORD *)this + 33) |= 0x80u;
    v28 = *((_QWORD *)this + 9);
    if (!v28)
    {
      v28 = operator new();
      *(_QWORD *)(v28 + 8) = 0;
      *(_QWORD *)(v28 + 16) = 0;
      *(_QWORD *)v28 = &off_1E886B610;
      *(_DWORD *)(v28 + 24) = 0;
      *(_QWORD *)(v28 + 32) = 0;
      *((_QWORD *)this + 9) = v28;
    }
    v29 = (const awd::profile::Log *)*((_QWORD *)a2 + 9);
    if (!v29)
      v29 = *(const awd::profile::Log **)(awd::profile::Profile::default_instance_ + 72);
    awd::profile::Log::MergeFrom((awd::profile::Log *)v28, v29);
    v22 = *((_DWORD *)a2 + 33);
  }
LABEL_39:
  if ((v22 & 0xFF00) == 0)
    return;
  if ((v22 & 0x100) != 0)
  {
    v30 = *((_DWORD *)a2 + 17);
    *((_DWORD *)this + 33) |= 0x100u;
    *((_DWORD *)this + 17) = v30;
    v22 = *((_DWORD *)a2 + 33);
    if ((v22 & 0x200) == 0)
    {
LABEL_42:
      if ((v22 & 0x400) == 0)
        goto LABEL_43;
      goto LABEL_49;
    }
  }
  else if ((v22 & 0x200) == 0)
  {
    goto LABEL_42;
  }
  v31 = *((_DWORD *)a2 + 20);
  *((_DWORD *)this + 33) |= 0x200u;
  *((_DWORD *)this + 20) = v31;
  v22 = *((_DWORD *)a2 + 33);
  if ((v22 & 0x400) == 0)
  {
LABEL_43:
    if ((v22 & 0x800) == 0)
      goto LABEL_44;
    goto LABEL_50;
  }
LABEL_49:
  v32 = *((_DWORD *)a2 + 21);
  *((_DWORD *)this + 33) |= 0x400u;
  *((_DWORD *)this + 21) = v32;
  v22 = *((_DWORD *)a2 + 33);
  if ((v22 & 0x800) == 0)
  {
LABEL_44:
    if ((v22 & 0x2000) == 0)
      goto LABEL_45;
    goto LABEL_51;
  }
LABEL_50:
  v33 = *((_DWORD *)a2 + 28);
  *((_DWORD *)this + 33) |= 0x800u;
  *((_DWORD *)this + 28) = v33;
  v22 = *((_DWORD *)a2 + 33);
  if ((v22 & 0x2000) == 0)
  {
LABEL_45:
    if ((v22 & 0x4000) == 0)
      return;
    goto LABEL_52;
  }
LABEL_51:
  v34 = *((_BYTE *)a2 + 116);
  *((_DWORD *)this + 33) |= 0x2000u;
  *((_BYTE *)this + 116) = v34;
  if ((*((_DWORD *)a2 + 33) & 0x4000) == 0)
    return;
LABEL_52:
  v35 = (const std::string *)*((_QWORD *)a2 + 15);
  *((_DWORD *)this + 33) |= 0x4000u;
  v36 = (std::string *)*((_QWORD *)this + 15);
  if (v36 == (std::string *)MEMORY[0x1E0DE8338])
  {
    v36 = (std::string *)operator new();
    v36->__r_.__value_.__l.__size_ = 0;
    v36->__r_.__value_.__r.__words[2] = 0;
    v36->__r_.__value_.__r.__words[0] = 0;
    *((_QWORD *)this + 15) = v36;
  }
  std::string::operator=(v36, v35);
}

void sub_1CC5B6F40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void awd::profile::Profile::~Profile(awd::profile::Profile *this)
{
  int *v2;
  uint64_t v3;

  *(_QWORD *)this = &off_1E886B700;
  v2 = (int *)((char *)this + 88);
  awd::profile::Profile::SharedDtor(this);
  sub_1CC5C30D4(v2);
  sub_1CC5C305C((uint64_t *)this + 5);
  v3 = *((_QWORD *)this + 2);
  if (v3)
    MEMORY[0x1D17AD52C](v3, 0x1000C8052888210);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

{
  awd::profile::Profile::~Profile(this);
  JUMPOUT(0x1D17AD544);
}

_QWORD *awd::profile::Profile::SharedDtor(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  v1 = this;
  v2 = this[15];
  if (v2 != MEMORY[0x1E0DE8338] && v2 != 0)
  {
    if (*(char *)(v2 + 23) < 0)
      operator delete(*(void **)v2);
    this = (_QWORD *)MEMORY[0x1D17AD544](v2, 0x1012C40EC159624);
  }
  if ((_QWORD *)awd::profile::Profile::default_instance_ != v1)
  {
    this = (_QWORD *)v1[9];
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

uint64_t awd::profile::Profile::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 128) = a2;
  return this;
}

uint64_t awd::profile::Profile::default_instance(awd::profile::Profile *this, uint64_t a2, uint64_t a3, const char *a4)
{
  uint64_t result;

  result = awd::profile::Profile::default_instance_;
  if (!awd::profile::Profile::default_instance_)
  {
    awd::profile::protobuf_AddDesc_AwdProfile_2eproto(0, a2, a3, a4);
    return awd::profile::Profile::default_instance_;
  }
  return result;
}

double awd::profile::Profile::New(awd::profile::Profile *this)
{
  uint64_t v1;
  double result;

  v1 = operator new();
  *(_QWORD *)v1 = &off_1E886B700;
  *(_DWORD *)(v1 + 112) = 0;
  *(_BYTE *)(v1 + 116) = 0;
  result = 0.0;
  *(_OWORD *)(v1 + 8) = 0u;
  *(_OWORD *)(v1 + 24) = 0u;
  *(_OWORD *)(v1 + 40) = 0u;
  *(_DWORD *)(v1 + 56) = 0;
  *(_OWORD *)(v1 + 64) = 0u;
  *(_OWORD *)(v1 + 80) = 0u;
  *(_OWORD *)(v1 + 92) = 0u;
  *(_QWORD *)(v1 + 120) = MEMORY[0x1E0DE8338];
  *(_QWORD *)(v1 + 128) = 0;
  return result;
}

uint64_t awd::profile::Profile::Clear(awd::profile::Profile *this)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;

  v2 = *((_DWORD *)this + 33);
  if ((_BYTE)v2)
  {
    *((_QWORD *)this + 1) = 0;
    *((_QWORD *)this + 4) = 0;
    *((_DWORD *)this + 16) = 0;
    if ((v2 & 0x80) != 0)
    {
      v3 = *((_QWORD *)this + 9);
      if (v3)
      {
        if (*(int *)(v3 + 16) >= 1)
        {
          v4 = 0;
          do
          {
            v5 = *(_QWORD *)(*(_QWORD *)(v3 + 8) + 8 * v4);
            (*(void (**)(uint64_t))(*(_QWORD *)v5 + 32))(v5);
            ++v4;
          }
          while (v4 < *(int *)(v3 + 16));
        }
        *(_DWORD *)(v3 + 16) = 0;
        *(_DWORD *)(v3 + 36) = 0;
        v2 = *((_DWORD *)this + 33);
      }
    }
  }
  if ((v2 & 0xFF00) != 0)
  {
    *((_DWORD *)this + 17) = 0;
    *((_QWORD *)this + 10) = 0;
    *((_DWORD *)this + 28) = 0;
    *((_BYTE *)this + 116) = 0;
    if ((v2 & 0x4000) != 0)
    {
      v6 = *((_QWORD *)this + 15);
      if (v6 != MEMORY[0x1E0DE8338])
      {
        if (*(char *)(v6 + 23) < 0)
        {
          **(_BYTE **)v6 = 0;
          *(_QWORD *)(v6 + 8) = 0;
        }
        else
        {
          *(_BYTE *)v6 = 0;
          *(_BYTE *)(v6 + 23) = 0;
        }
      }
    }
  }
  *((_DWORD *)this + 6) = 0;
  if (*((int *)this + 12) >= 1)
  {
    v7 = 0;
    do
    {
      v8 = *(_QWORD *)(*((_QWORD *)this + 5) + 8 * v7);
      (*(void (**)(uint64_t))(*(_QWORD *)v8 + 32))(v8);
      ++v7;
    }
    while (v7 < *((int *)this + 12));
  }
  *((_DWORD *)this + 12) = 0;
  result = sub_1CC5C300C((uint64_t)this + 88);
  *((_DWORD *)this + 33) = 0;
  return result;
}

uint64_t awd::profile::Log::Clear(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = this;
  if (*(int *)(this + 16) >= 1)
  {
    v2 = 0;
    do
    {
      v3 = *(_QWORD *)(*(_QWORD *)(v1 + 8) + 8 * v2);
      this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 32))(v3);
      ++v2;
    }
    while (v2 < *(int *)(v1 + 16));
  }
  *(_DWORD *)(v1 + 16) = 0;
  *(_DWORD *)(v1 + 36) = 0;
  return this;
}

unsigned int *awd::profile::Profile::MergePartialFromCodedStream(unsigned int *this, wireless_diagnostics::google::protobuf::io::CodedInputStream *a2)
{
  uint64_t v3;
  _DWORD *v4;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int *v8;
  char *v9;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *v10;
  int v11;
  unint64_t v12;
  char *v13;
  _BYTE *v14;
  unsigned __int8 *v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  unint64_t v20;
  char *v21;
  char *v22;
  unsigned __int8 *v23;
  unsigned __int8 *v24;
  unint64_t v25;
  unsigned __int8 *v26;
  int v27;
  unsigned __int8 *v28;
  int v29;
  int v30;
  unsigned int v31;
  uint64_t v32;
  int v33;
  int v34;
  _BYTE *v35;
  unint64_t v36;
  unsigned int v37;
  uint64_t v38;
  _BYTE *v39;
  unsigned int v40;
  _BYTE *v41;
  unsigned int v42;
  _BYTE *v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  int v51;
  int v52;
  int v53;
  BOOL v54;
  int v55;
  int v56;
  uint64_t v57;
  char *v58;
  int v59;
  int v60;
  int v61;
  int v62;
  _BYTE *v63;
  _BYTE *v64;
  _BYTE *v65;
  unsigned __int8 *v66;
  unsigned __int8 *v67;
  int v68;
  int v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  int v73;
  unsigned int v74;
  unsigned __int8 *v75;
  _QWORD *v76;
  wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *v77;
  wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *v78;
  unsigned int *v79;
  unsigned int *v80;
  unsigned int *v81;
  unsigned int v82;

  v3 = (uint64_t)this;
  v4 = this + 4;
  v5 = this + 8;
  v78 = (wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(this + 10);
  v79 = this + 2;
  v6 = this + 17;
  v7 = this + 20;
  v8 = this + 21;
  v80 = this + 28;
  v81 = this + 3;
  v77 = (wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(this + 22);
LABEL_2:
  while (2)
  {
    v9 = (char *)*((_QWORD *)a2 + 1);
    if ((unint64_t)v9 >= *((_QWORD *)a2 + 2) || *v9 < 0)
    {
      this = (unsigned int *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(a2);
      v10 = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)this;
      *((_DWORD *)a2 + 8) = (_DWORD)this;
      if (!(_DWORD)this)
        return (unsigned int *)1;
    }
    else
    {
      v10 = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v9;
      *((_DWORD *)a2 + 8) = (_DWORD)v10;
      *((_QWORD *)a2 + 1) = v9 + 1;
      if (!(_DWORD)v10)
        return (unsigned int *)1;
    }
    switch(v10 >> 3)
    {
      case 1u:
        v11 = v10 & 7;
        if ((v10 & 7) != 0)
          goto LABEL_42;
        v13 = (char *)*((_QWORD *)a2 + 1);
        v12 = *((_QWORD *)a2 + 2);
        if ((unint64_t)v13 >= v12 || *v13 < 0)
        {
          this = (unsigned int *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v79);
          if (!(_DWORD)this)
            return this;
          v14 = (_BYTE *)*((_QWORD *)a2 + 1);
          v12 = *((_QWORD *)a2 + 2);
        }
        else
        {
          *v79 = *v13;
          v14 = v13 + 1;
          *((_QWORD *)a2 + 1) = v14;
        }
        *(_DWORD *)(v3 + 132) |= 1u;
        if ((unint64_t)v14 < v12 && *v14 == 24)
        {
          v15 = v14 + 1;
          *((_QWORD *)a2 + 1) = v15;
          goto LABEL_52;
        }
        continue;
      case 3u:
        v11 = v10 & 7;
        if ((v10 & 7) != 0)
          goto LABEL_42;
        v15 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
        v12 = *((_QWORD *)a2 + 2);
LABEL_52:
        if ((unint64_t)v15 >= v12 || (char)*v15 < 0)
        {
          this = (unsigned int *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v81);
          if (!(_DWORD)this)
            return this;
          v28 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
          v12 = *((_QWORD *)a2 + 2);
        }
        else
        {
          *v81 = *v15;
          v28 = v15 + 1;
          *((_QWORD *)a2 + 1) = v28;
        }
        *(_DWORD *)(v3 + 132) |= 2u;
        if ((unint64_t)v28 < v12)
        {
          v29 = *v28;
          goto LABEL_77;
        }
        continue;
      case 4u:
        v11 = v10 & 7;
        if (v11 != 2)
        {
          if ((v10 & 7) == 0)
          {
            v16 = (char *)*((_QWORD *)a2 + 1);
            v12 = *((_QWORD *)a2 + 2);
            goto LABEL_59;
          }
LABEL_42:
          if (v11 == 4)
            return (unsigned int *)1;
          this = (unsigned int *)wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(a2, v10);
          if ((this & 1) == 0)
            return 0;
          continue;
        }
        this = (unsigned int *)sub_1CC5B7D90(a2, v4);
        if (!(_DWORD)this)
          return this;
        while (1)
        {
          v28 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
          v12 = *((_QWORD *)a2 + 2);
          if ((unint64_t)v28 >= v12)
            goto LABEL_2;
          v29 = *v28;
          if (v29 == 40)
            break;
LABEL_77:
          if (v29 != 32)
            goto LABEL_2;
          v16 = (char *)(v28 + 1);
          *((_QWORD *)a2 + 1) = v16;
LABEL_59:
          v82 = 0;
          if ((unint64_t)v16 >= v12 || *v16 < 0)
          {
            this = (unsigned int *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v82);
            if (!(_DWORD)this)
              return 0;
          }
          else
          {
            v82 = *v16;
            *((_QWORD *)a2 + 1) = v16 + 1;
          }
          v30 = *(_DWORD *)(v3 + 24);
          if (v30 == *(_DWORD *)(v3 + 28))
          {
            this = sub_1CC5C2EE8(v4, v30 + 1);
            v30 = *(_DWORD *)(v3 + 24);
          }
          v31 = v82;
          v32 = *(_QWORD *)(v3 + 16);
          *(_DWORD *)(v3 + 24) = v30 + 1;
          *(_DWORD *)(v32 + 4 * v30) = v31;
          v33 = *(_DWORD *)(v3 + 28) - *(_DWORD *)(v3 + 24);
          if (v33 >= 1)
          {
            v34 = v33 + 1;
            do
            {
              v35 = (_BYTE *)*((_QWORD *)a2 + 1);
              v36 = *((_QWORD *)a2 + 2);
              if ((unint64_t)v35 >= v36 || *v35 != 32)
                break;
              *((_QWORD *)a2 + 1) = v35 + 1;
              if ((unint64_t)(v35 + 1) >= v36 || (char)v35[1] < 0)
              {
                this = (unsigned int *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v82);
                if (!(_DWORD)this)
                  return 0;
                v37 = v82;
                v32 = *(_QWORD *)v4;
              }
              else
              {
                v37 = v35[1];
                v82 = v37;
                *((_QWORD *)a2 + 1) = v35 + 2;
              }
              v38 = *(int *)(v3 + 24);
              *(_DWORD *)(v3 + 24) = v38 + 1;
              *(_DWORD *)(v32 + 4 * v38) = v37;
              --v34;
            }
            while (v34 > 1);
          }
        }
        v17 = (char *)(v28 + 1);
        *((_QWORD *)a2 + 1) = v17;
LABEL_80:
        if ((unint64_t)v17 >= v12 || *v17 < 0)
        {
          this = (unsigned int *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v5);
          if (!(_DWORD)this)
            return this;
          v39 = (_BYTE *)*((_QWORD *)a2 + 1);
          v12 = *((_QWORD *)a2 + 2);
        }
        else
        {
          *v5 = *v17;
          v39 = v17 + 1;
          *((_QWORD *)a2 + 1) = v39;
        }
        *(_DWORD *)(v3 + 132) |= 8u;
        if ((unint64_t)v39 >= v12 || *v39 != 48)
          continue;
        v18 = v39 + 1;
        *((_QWORD *)a2 + 1) = v18;
LABEL_88:
        v82 = 0;
        if ((unint64_t)v18 >= v12 || *v18 < 0)
        {
          this = (unsigned int *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v82);
          if (!(_DWORD)this)
            return this;
          v40 = v82;
          v41 = (_BYTE *)*((_QWORD *)a2 + 1);
          v12 = *((_QWORD *)a2 + 2);
        }
        else
        {
          v40 = *v18;
          v41 = v18 + 1;
          *((_QWORD *)a2 + 1) = v41;
        }
        *(_DWORD *)(v3 + 36) = v40;
        *(_DWORD *)(v3 + 132) |= 0x10u;
        if ((unint64_t)v41 >= v12 || *v41 != 56)
          continue;
        v19 = v41 + 1;
        *((_QWORD *)a2 + 1) = v19;
LABEL_96:
        v82 = 0;
        if ((unint64_t)v19 >= v12 || *v19 < 0)
        {
          this = (unsigned int *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v82);
          if (!(_DWORD)this)
            return this;
          v42 = v82;
          v43 = (_BYTE *)*((_QWORD *)a2 + 1);
          v12 = *((_QWORD *)a2 + 2);
        }
        else
        {
          v42 = *v19;
          v43 = v19 + 1;
          *((_QWORD *)a2 + 1) = v43;
        }
        *(_DWORD *)(v3 + 64) = v42;
        *(_DWORD *)(v3 + 132) |= 0x20u;
        if ((unint64_t)v43 >= v12 || *v43 != 66)
          continue;
        do
        {
          *((_QWORD *)a2 + 1) = v43 + 1;
LABEL_104:
          v44 = *(_DWORD *)(v3 + 52);
          v45 = *(int *)(v3 + 48);
          if ((int)v45 >= v44)
          {
            if (v44 == *(_DWORD *)(v3 + 56))
            {
              wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve(v78);
              v44 = *(_DWORD *)(v3 + 52);
            }
            *(_DWORD *)(v3 + 52) = v44 + 1;
            v47 = operator new();
            *(_QWORD *)v47 = &off_1E886B688;
            *(_QWORD *)(v47 + 72) = 0;
            *(_QWORD *)(v47 + 80) = 0;
            *(_DWORD *)(v47 + 88) = 0;
            *(_QWORD *)(v47 + 96) = 0;
            *(_QWORD *)(v47 + 104) = 0;
            *(_DWORD *)(v47 + 112) = 0;
            *(_QWORD *)(v47 + 120) = 0;
            *(_DWORD *)(v47 + 128) = 0;
            *(_BYTE *)(v47 + 40) = 0;
            *(_OWORD *)(v47 + 24) = 0u;
            *(_OWORD *)(v47 + 8) = 0u;
            *(_QWORD *)(v47 + 44) = 0;
            *(_QWORD *)(v47 + 60) = 0;
            *(_QWORD *)(v47 + 52) = 0;
            v48 = *(_QWORD *)(v3 + 40);
            v49 = *(int *)(v3 + 48);
            *(_DWORD *)(v3 + 48) = v49 + 1;
            *(_QWORD *)(v48 + 8 * v49) = v47;
          }
          else
          {
            v46 = *(_QWORD *)(v3 + 40);
            *(_DWORD *)(v3 + 48) = v45 + 1;
            v47 = *(_QWORD *)(v46 + 8 * v45);
          }
          v82 = 0;
          v50 = (char *)*((_QWORD *)a2 + 1);
          if ((unint64_t)v50 >= *((_QWORD *)a2 + 2) || *v50 < 0)
          {
            if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v82))return 0;
          }
          else
          {
            v82 = *v50;
            *((_QWORD *)a2 + 1) = v50 + 1;
          }
          v51 = *((_DWORD *)a2 + 14);
          v52 = *((_DWORD *)a2 + 15);
          *((_DWORD *)a2 + 14) = v51 + 1;
          if (v51 >= v52)
            return 0;
          wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(a2);
          if (!awd::profile::Metric::MergePartialFromCodedStream((awd::profile::Metric *)v47, a2)
            || !*((_BYTE *)a2 + 36))
          {
            return 0;
          }
          this = (unsigned int *)wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(a2);
          v53 = *((_DWORD *)a2 + 14);
          v54 = __OFSUB__(v53, 1);
          v55 = v53 - 1;
          if (v55 < 0 == v54)
            *((_DWORD *)a2 + 14) = v55;
          v43 = (_BYTE *)*((_QWORD *)a2 + 1);
          if ((unint64_t)v43 >= *((_QWORD *)a2 + 2))
            goto LABEL_2;
          v56 = *v43;
        }
        while (v56 == 66);
        if (v56 != 74)
          continue;
        *((_QWORD *)a2 + 1) = v43 + 1;
LABEL_122:
        *(_DWORD *)(v3 + 132) |= 0x80u;
        v57 = *(_QWORD *)(v3 + 72);
        if (!v57)
        {
          v57 = operator new();
          *(_QWORD *)(v57 + 8) = 0;
          *(_QWORD *)(v57 + 16) = 0;
          *(_QWORD *)v57 = &off_1E886B610;
          *(_DWORD *)(v57 + 24) = 0;
          *(_QWORD *)(v57 + 32) = 0;
          *(_QWORD *)(v3 + 72) = v57;
        }
        v82 = 0;
        v58 = (char *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v58 >= *((_QWORD *)a2 + 2) || *v58 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v82))return 0;
        }
        else
        {
          v82 = *v58;
          *((_QWORD *)a2 + 1) = v58 + 1;
        }
        v59 = *((_DWORD *)a2 + 14);
        v60 = *((_DWORD *)a2 + 15);
        *((_DWORD *)a2 + 14) = v59 + 1;
        if (v59 < v60)
        {
          wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(a2);
          if (awd::profile::Log::MergePartialFromCodedStream((awd::profile::Log *)v57, a2))
          {
            if (*((_BYTE *)a2 + 36))
            {
              this = (unsigned int *)wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(a2);
              v61 = *((_DWORD *)a2 + 14);
              v54 = __OFSUB__(v61, 1);
              v62 = v61 - 1;
              if (v62 < 0 == v54)
                *((_DWORD *)a2 + 14) = v62;
              v63 = (_BYTE *)*((_QWORD *)a2 + 1);
              v20 = *((_QWORD *)a2 + 2);
              if ((unint64_t)v63 < v20 && *v63 == 80)
              {
                v21 = v63 + 1;
                *((_QWORD *)a2 + 1) = v21;
LABEL_136:
                if ((unint64_t)v21 >= v20 || *v21 < 0)
                {
                  this = (unsigned int *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v6);
                  if (!(_DWORD)this)
                    return this;
                  v64 = (_BYTE *)*((_QWORD *)a2 + 1);
                  v20 = *((_QWORD *)a2 + 2);
                }
                else
                {
                  *v6 = *v21;
                  v64 = v21 + 1;
                  *((_QWORD *)a2 + 1) = v64;
                }
                *(_DWORD *)(v3 + 132) |= 0x100u;
                if ((unint64_t)v64 < v20 && *v64 == 88)
                {
                  v22 = v64 + 1;
                  *((_QWORD *)a2 + 1) = v22;
LABEL_144:
                  if ((unint64_t)v22 >= v20 || *v22 < 0)
                  {
                    this = (unsigned int *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v7);
                    if (!(_DWORD)this)
                      return this;
                    v65 = (_BYTE *)*((_QWORD *)a2 + 1);
                    v20 = *((_QWORD *)a2 + 2);
                  }
                  else
                  {
                    *v7 = *v22;
                    v65 = v22 + 1;
                    *((_QWORD *)a2 + 1) = v65;
                  }
                  *(_DWORD *)(v3 + 132) |= 0x200u;
                  if ((unint64_t)v65 < v20 && *v65 == 104)
                  {
                    v23 = v65 + 1;
                    *((_QWORD *)a2 + 1) = v23;
LABEL_152:
                    if ((unint64_t)v23 >= v20 || (char)*v23 < 0)
                    {
                      this = (unsigned int *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v8);
                      if (!(_DWORD)this)
                        return this;
                      v66 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
                      v20 = *((_QWORD *)a2 + 2);
                    }
                    else
                    {
                      *v8 = *v23;
                      v66 = v23 + 1;
                      *((_QWORD *)a2 + 1) = v66;
                    }
                    *(_DWORD *)(v3 + 132) |= 0x400u;
                    if ((int)v20 - (int)v66 >= 2 && *v66 == 160 && v66[1] == 1)
                    {
                      v24 = v66 + 2;
                      *((_QWORD *)a2 + 1) = v24;
LABEL_161:
                      if ((unint64_t)v24 >= v20 || (char)*v24 < 0)
                      {
                        this = (unsigned int *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v80);
                        if (!(_DWORD)this)
                          return this;
                        v67 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
                        v20 = *((_QWORD *)a2 + 2);
                      }
                      else
                      {
                        *v80 = *v24;
                        v67 = v24 + 1;
                        *((_QWORD *)a2 + 1) = v67;
                      }
                      *(_DWORD *)(v3 + 132) |= 0x800u;
                      if ((int)v20 - (int)v67 >= 2 && *v67 == 130 && v67[1] == 2)
                      {
                        while (1)
                        {
                          *((_QWORD *)a2 + 1) = v67 + 2;
LABEL_170:
                          v68 = *(_DWORD *)(v3 + 100);
                          v69 = *(_DWORD *)(v3 + 96);
                          if (v69 >= v68)
                          {
                            if (v68 == *(_DWORD *)(v3 + 104))
                            {
                              this = (unsigned int *)wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve(v77);
                              v68 = *(_DWORD *)(v3 + 100);
                            }
                            *(_DWORD *)(v3 + 100) = v68 + 1;
                            v70 = wireless_diagnostics::google::protobuf::internal::StringTypeHandlerBase::New((wireless_diagnostics::google::protobuf::internal::StringTypeHandlerBase *)this);
                            v71 = *(_QWORD *)(v3 + 88);
                            v72 = *(int *)(v3 + 96);
                            *(_DWORD *)(v3 + 96) = v72 + 1;
                            *(_QWORD *)(v71 + 8 * v72) = v70;
                          }
                          else
                          {
                            *(_DWORD *)(v3 + 96) = v69 + 1;
                          }
                          this = (unsigned int *)wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString();
                          if (!(_DWORD)this)
                            return this;
                          v67 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
                          v25 = *((_QWORD *)a2 + 2);
                          if ((int)v25 - (int)v67 < 2)
                            goto LABEL_2;
                          v73 = *v67;
                          if (v73 == 136)
                            break;
                          if (v73 != 130 || v67[1] != 2)
                            goto LABEL_2;
                        }
                        if (v67[1] == 2)
                        {
                          v26 = v67 + 2;
                          *((_QWORD *)a2 + 1) = v26;
LABEL_183:
                          v82 = 0;
                          if ((unint64_t)v26 >= v25 || (char)*v26 < 0)
                          {
                            this = (unsigned int *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v82);
                            if (!(_DWORD)this)
                              return this;
                            v74 = v82;
                            v75 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
                            v25 = *((_QWORD *)a2 + 2);
                          }
                          else
                          {
                            v74 = *v26;
                            v75 = v26 + 1;
                            *((_QWORD *)a2 + 1) = v75;
                          }
                          *(_BYTE *)(v3 + 116) = v74 != 0;
                          v27 = *(_DWORD *)(v3 + 132) | 0x2000;
                          *(_DWORD *)(v3 + 132) = v27;
                          if ((int)v25 - (int)v75 >= 2 && *v75 == 146 && v75[1] == 2)
                          {
                            *((_QWORD *)a2 + 1) = v75 + 2;
LABEL_192:
                            *(_DWORD *)(v3 + 132) = v27 | 0x4000;
                            if (*(_QWORD *)(v3 + 120) == MEMORY[0x1E0DE8338])
                            {
                              v76 = (_QWORD *)operator new();
                              v76[1] = 0;
                              v76[2] = 0;
                              *v76 = 0;
                              *(_QWORD *)(v3 + 120) = v76;
                            }
                            this = (unsigned int *)wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString();
                            if (!(_DWORD)this)
                              return this;
                            if (*((_QWORD *)a2 + 1) == *((_QWORD *)a2 + 2)
                              && (*((_DWORD *)a2 + 11) || *((_DWORD *)a2 + 6) == *((_DWORD *)a2 + 10)))
                            {
                              *((_DWORD *)a2 + 8) = 0;
                              this = (unsigned int *)1;
                              *((_BYTE *)a2 + 36) = 1;
                              return this;
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
              continue;
            }
          }
        }
        return 0;
      case 5u:
        v11 = v10 & 7;
        if ((v10 & 7) != 0)
          goto LABEL_42;
        v17 = (char *)*((_QWORD *)a2 + 1);
        v12 = *((_QWORD *)a2 + 2);
        goto LABEL_80;
      case 6u:
        v11 = v10 & 7;
        if ((v10 & 7) != 0)
          goto LABEL_42;
        v18 = (char *)*((_QWORD *)a2 + 1);
        v12 = *((_QWORD *)a2 + 2);
        goto LABEL_88;
      case 7u:
        v11 = v10 & 7;
        if ((v10 & 7) != 0)
          goto LABEL_42;
        v19 = (char *)*((_QWORD *)a2 + 1);
        v12 = *((_QWORD *)a2 + 2);
        goto LABEL_96;
      case 8u:
        v11 = v10 & 7;
        if (v11 == 2)
          goto LABEL_104;
        goto LABEL_42;
      case 9u:
        v11 = v10 & 7;
        if (v11 == 2)
          goto LABEL_122;
        goto LABEL_42;
      case 0xAu:
        v11 = v10 & 7;
        if ((v10 & 7) != 0)
          goto LABEL_42;
        v21 = (char *)*((_QWORD *)a2 + 1);
        v20 = *((_QWORD *)a2 + 2);
        goto LABEL_136;
      case 0xBu:
        v11 = v10 & 7;
        if ((v10 & 7) != 0)
          goto LABEL_42;
        v22 = (char *)*((_QWORD *)a2 + 1);
        v20 = *((_QWORD *)a2 + 2);
        goto LABEL_144;
      case 0xDu:
        v11 = v10 & 7;
        if ((v10 & 7) != 0)
          goto LABEL_42;
        v23 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
        v20 = *((_QWORD *)a2 + 2);
        goto LABEL_152;
      case 0x14u:
        v11 = v10 & 7;
        if ((v10 & 7) != 0)
          goto LABEL_42;
        v24 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
        v20 = *((_QWORD *)a2 + 2);
        goto LABEL_161;
      case 0x20u:
        v11 = v10 & 7;
        if (v11 == 2)
          goto LABEL_170;
        goto LABEL_42;
      case 0x21u:
        v11 = v10 & 7;
        if ((v10 & 7) != 0)
          goto LABEL_42;
        v26 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
        v25 = *((_QWORD *)a2 + 2);
        goto LABEL_183;
      case 0x22u:
        v11 = v10 & 7;
        if (v11 != 2)
          goto LABEL_42;
        v27 = *(_DWORD *)(v3 + 132);
        goto LABEL_192;
      default:
        v11 = v10 & 7;
        goto LABEL_42;
    }
  }
}

uint64_t sub_1CC5B7D90(wireless_diagnostics::google::protobuf::io::CodedInputStream *this, _DWORD *a2)
{
  char *v4;
  uint64_t result;
  char *v6;
  int v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;

  v11 = 0;
  v4 = (char *)*((_QWORD *)this + 1);
  if ((unint64_t)v4 >= *((_QWORD *)this + 2) || *v4 < 0)
  {
    result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v11);
    if (!(_DWORD)result)
      return result;
  }
  else
  {
    v11 = *v4;
    *((_QWORD *)this + 1) = v4 + 1;
  }
  wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this);
  if ((int)wireless_diagnostics::google::protobuf::io::CodedInputStream::BytesUntilLimit(this) >= 1)
  {
    do
    {
      v10 = 0;
      v6 = (char *)*((_QWORD *)this + 1);
      if ((unint64_t)v6 >= *((_QWORD *)this + 2) || *v6 < 0)
      {
        result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v10);
        if (!(_DWORD)result)
          return result;
      }
      else
      {
        v10 = *v6;
        *((_QWORD *)this + 1) = v6 + 1;
      }
      v7 = a2[2];
      if (v7 == a2[3])
      {
        sub_1CC5C2EE8(a2, v7 + 1);
        v7 = a2[2];
      }
      v8 = v10;
      v9 = *(_QWORD *)a2;
      a2[2] = v7 + 1;
      *(_DWORD *)(v9 + 4 * v7) = v8;
    }
    while ((int)wireless_diagnostics::google::protobuf::io::CodedInputStream::BytesUntilLimit(this) > 0);
  }
  wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this);
  return 1;
}

uint64_t awd::profile::Profile::SerializeWithCachedSizes(uint64_t this, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  uint64_t v13;

  v5 = this;
  v6 = *(_DWORD *)(this + 132);
  if ((v6 & 1) != 0)
  {
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(unsigned int *)(this + 8), (uint64_t)a2, a4);
    v6 = *(_DWORD *)(v5 + 132);
  }
  if ((v6 & 2) != 0)
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, *(unsigned int *)(v5 + 12), (uint64_t)a2, a4);
  if (*(int *)(v5 + 24) >= 1)
  {
    v7 = 0;
    do
      this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4, *(unsigned int *)(*(_QWORD *)(v5 + 16) + 4 * v7++), (uint64_t)a2, a4);
    while (v7 < *(int *)(v5 + 24));
  }
  v8 = *(_DWORD *)(v5 + 132);
  if ((v8 & 8) != 0)
  {
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5, *(unsigned int *)(v5 + 32), (uint64_t)a2, a4);
    v8 = *(_DWORD *)(v5 + 132);
    if ((v8 & 0x10) == 0)
    {
LABEL_10:
      if ((v8 & 0x20) == 0)
        goto LABEL_12;
      goto LABEL_11;
    }
  }
  else if ((v8 & 0x10) == 0)
  {
    goto LABEL_10;
  }
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)6, *(unsigned int *)(v5 + 36), (uint64_t)a2, a4);
  if ((*(_DWORD *)(v5 + 132) & 0x20) != 0)
LABEL_11:
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)7, *(unsigned int *)(v5 + 64), (uint64_t)a2, a4);
LABEL_12:
  if (*(int *)(v5 + 48) >= 1)
  {
    v9 = 0;
    do
      this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)8, *(_QWORD *)(*(_QWORD *)(v5 + 40) + 8 * v9++), a2, a4);
    while (v9 < *(int *)(v5 + 48));
  }
  v10 = *(_DWORD *)(v5 + 132);
  if ((v10 & 0x80) != 0)
  {
    v13 = *(_QWORD *)(v5 + 72);
    if (!v13)
      v13 = *(_QWORD *)(awd::profile::Profile::default_instance_ + 72);
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)9, v13, a2, a4);
    v10 = *(_DWORD *)(v5 + 132);
    if ((v10 & 0x100) == 0)
    {
LABEL_17:
      if ((v10 & 0x200) == 0)
        goto LABEL_18;
      goto LABEL_34;
    }
  }
  else if ((v10 & 0x100) == 0)
  {
    goto LABEL_17;
  }
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xA, *(unsigned int *)(v5 + 68), (uint64_t)a2, a4);
  v10 = *(_DWORD *)(v5 + 132);
  if ((v10 & 0x200) == 0)
  {
LABEL_18:
    if ((v10 & 0x400) == 0)
      goto LABEL_19;
    goto LABEL_35;
  }
LABEL_34:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xB, *(unsigned int *)(v5 + 80), (uint64_t)a2, a4);
  v10 = *(_DWORD *)(v5 + 132);
  if ((v10 & 0x400) == 0)
  {
LABEL_19:
    if ((v10 & 0x800) == 0)
      goto LABEL_21;
    goto LABEL_20;
  }
LABEL_35:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xD, *(unsigned int *)(v5 + 84), (uint64_t)a2, a4);
  if ((*(_DWORD *)(v5 + 132) & 0x800) != 0)
LABEL_20:
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x14, *(unsigned int *)(v5 + 112), (uint64_t)a2, a4);
LABEL_21:
  if (*(int *)(v5 + 96) >= 1)
  {
    v11 = 0;
    do
    {
      this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString();
      ++v11;
    }
    while (v11 < *(int *)(v5 + 96));
  }
  v12 = *(_DWORD *)(v5 + 132);
  if ((v12 & 0x2000) == 0)
  {
    if ((v12 & 0x4000) == 0)
      return this;
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString();
  }
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x21, *(unsigned __int8 *)(v5 + 116), (uint64_t)a2, a4);
  if ((*(_DWORD *)(v5 + 132) & 0x4000) != 0)
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString();
  return this;
}

uint64_t awd::profile::Profile::ByteSize(awd::profile::Profile *this)
{
  int v2;
  int v3;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v4;
  int v5;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v6;
  int v7;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v8;
  int v9;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v10;
  int v11;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v12;
  int v13;
  awd::profile::Log *v14;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v15;
  int v16;
  int v17;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v18;
  int v19;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v20;
  int v21;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v22;
  int v23;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v24;
  int v25;
  uint64_t v26;
  int v27;
  char v28;
  uint64_t v29;
  unint64_t v30;
  int v31;
  int v32;
  uint64_t v33;
  int v34;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v35;
  int v36;
  int v37;
  int v38;
  uint64_t v39;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v40;
  int v41;
  int v42;
  int v43;
  uint64_t v44;
  uint64_t i;
  uint64_t v46;
  int v47;
  char v48;
  uint64_t v49;
  unint64_t v50;
  int v51;

  v2 = *((_DWORD *)this + 33);
  if (!(_BYTE)v2)
  {
    v3 = 0;
    goto LABEL_41;
  }
  if ((v2 & 1) == 0)
  {
    v3 = 0;
    if ((v2 & 2) == 0)
      goto LABEL_14;
    goto LABEL_10;
  }
  v4 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 2);
  if (v4 >= 0x80)
  {
    v5 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v4);
    v2 = *((_DWORD *)this + 33);
  }
  else
  {
    v5 = 1;
  }
  v3 = v5 + 1;
  if ((v2 & 2) != 0)
  {
LABEL_10:
    v6 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 3);
    if (v6 >= 0x80)
    {
      v7 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v6);
      v2 = *((_DWORD *)this + 33);
    }
    else
    {
      v7 = 1;
    }
    v3 += v7 + 1;
  }
LABEL_14:
  if ((v2 & 8) != 0)
  {
    v8 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 8);
    if (v8 >= 0x80)
    {
      v9 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v8);
      v2 = *((_DWORD *)this + 33);
    }
    else
    {
      v9 = 1;
    }
    v3 += v9 + 1;
    if ((v2 & 0x10) == 0)
    {
LABEL_16:
      if ((v2 & 0x20) == 0)
        goto LABEL_17;
LABEL_29:
      v12 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 16);
      if ((v12 & 0x80000000) != 0)
      {
        v13 = 10;
      }
      else if (v12 >= 0x80)
      {
        v13 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v12);
        v2 = *((_DWORD *)this + 33);
      }
      else
      {
        v13 = 1;
      }
      v3 += v13 + 1;
      if ((v2 & 0x80) == 0)
        goto LABEL_41;
      goto LABEL_35;
    }
  }
  else if ((v2 & 0x10) == 0)
  {
    goto LABEL_16;
  }
  v10 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 9);
  if ((v10 & 0x80000000) != 0)
  {
    v11 = 10;
  }
  else if (v10 >= 0x80)
  {
    v11 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v10);
    v2 = *((_DWORD *)this + 33);
  }
  else
  {
    v11 = 1;
  }
  v3 += v11 + 1;
  if ((v2 & 0x20) != 0)
    goto LABEL_29;
LABEL_17:
  if ((v2 & 0x80) == 0)
    goto LABEL_41;
LABEL_35:
  v14 = (awd::profile::Log *)*((_QWORD *)this + 9);
  if (!v14)
    v14 = *(awd::profile::Log **)(awd::profile::Profile::default_instance_ + 72);
  v15 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)awd::profile::Log::ByteSize(v14);
  v16 = (int)v15;
  if (v15 >= 0x80)
    v17 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v15);
  else
    v17 = 1;
  v3 += v16 + v17 + 1;
  v2 = *((_DWORD *)this + 33);
LABEL_41:
  if ((v2 & 0xFF00) == 0)
    goto LABEL_75;
  if ((v2 & 0x100) != 0)
  {
    v18 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 17);
    if (v18 >= 0x80)
    {
      v19 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v18);
      v2 = *((_DWORD *)this + 33);
    }
    else
    {
      v19 = 1;
    }
    v3 += v19 + 1;
    if ((v2 & 0x200) == 0)
    {
LABEL_44:
      if ((v2 & 0x400) == 0)
        goto LABEL_45;
LABEL_55:
      v22 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 21);
      if (v22 >= 0x80)
      {
        v23 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v22) + 1;
        v2 = *((_DWORD *)this + 33);
      }
      else
      {
        v23 = 2;
      }
      v3 += v23;
      if ((v2 & 0x800) == 0)
        goto LABEL_63;
      goto LABEL_59;
    }
  }
  else if ((v2 & 0x200) == 0)
  {
    goto LABEL_44;
  }
  v20 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 20);
  if (v20 >= 0x80)
  {
    v21 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v20) + 1;
    v2 = *((_DWORD *)this + 33);
  }
  else
  {
    v21 = 2;
  }
  v3 += v21;
  if ((v2 & 0x400) != 0)
    goto LABEL_55;
LABEL_45:
  if ((v2 & 0x800) != 0)
  {
LABEL_59:
    v24 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 28);
    if (v24 >= 0x80)
    {
      v25 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v24) + 2;
      v2 = *((_DWORD *)this + 33);
    }
    else
    {
      v25 = 3;
    }
    v3 += v25;
  }
LABEL_63:
  if ((v2 & 0x2000) != 0)
    v3 += 3;
  if ((v2 & 0x4000) != 0)
  {
    v26 = *((_QWORD *)this + 15);
    v27 = *(unsigned __int8 *)(v26 + 23);
    v28 = v27;
    v29 = *(_QWORD *)(v26 + 8);
    if ((v27 & 0x80u) == 0)
      v30 = *(unsigned __int8 *)(v26 + 23);
    else
      v30 = v29;
    if (v30 >= 0x80)
    {
      v31 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v30);
      v27 = *(unsigned __int8 *)(v26 + 23);
      v29 = *(_QWORD *)(v26 + 8);
      v28 = *(_BYTE *)(v26 + 23);
    }
    else
    {
      v31 = 1;
    }
    if (v28 < 0)
      v27 = v29;
    v3 += v31 + v27 + 2;
  }
LABEL_75:
  v32 = *((_DWORD *)this + 6);
  if (v32 < 1)
  {
    v34 = 0;
  }
  else
  {
    v33 = 0;
    v34 = 0;
    do
    {
      v35 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(*((_QWORD *)this + 2)
                                                                                             + 4 * v33);
      if (v35 >= 0x80)
      {
        v36 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v35);
        v32 = *((_DWORD *)this + 6);
      }
      else
      {
        v36 = 1;
      }
      v34 += v36;
      ++v33;
    }
    while (v33 < v32);
  }
  v37 = *((_DWORD *)this + 12);
  v38 = v34 + v3 + v32 + v37;
  if (v37 >= 1)
  {
    v39 = 0;
    do
    {
      v40 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)awd::profile::Metric::ByteSize(*(awd::profile::Metric **)(*((_QWORD *)this + 5) + 8 * v39));
      v41 = (int)v40;
      if (v40 >= 0x80)
        v42 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v40);
      else
        v42 = 1;
      v38 += v41 + v42;
      ++v39;
    }
    while (v39 < *((int *)this + 12));
  }
  v43 = *((_DWORD *)this + 24);
  v44 = (v38 + 2 * v43);
  if (v43 >= 1)
  {
    for (i = 0; i < v43; ++i)
    {
      v46 = *(_QWORD *)(*((_QWORD *)this + 11) + 8 * i);
      v47 = *(unsigned __int8 *)(v46 + 23);
      v48 = v47;
      v49 = *(_QWORD *)(v46 + 8);
      if ((v47 & 0x80u) == 0)
        v50 = *(unsigned __int8 *)(v46 + 23);
      else
        v50 = v49;
      if (v50 >= 0x80)
      {
        v51 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v50);
        v47 = *(unsigned __int8 *)(v46 + 23);
        v49 = *(_QWORD *)(v46 + 8);
        v43 = *((_DWORD *)this + 24);
        v48 = *(_BYTE *)(v46 + 23);
      }
      else
      {
        v51 = 1;
      }
      if (v48 < 0)
        v47 = v49;
      v44 = (v51 + v44 + v47);
    }
  }
  *((_DWORD *)this + 32) = v44;
  return v44;
}

void awd::profile::Log::MergeFrom(awd::profile::Log *this, const awd::profile::Log *a2)
{
  uint64_t v4;
  uint64_t v5;
  const awd::profile::LogParameter *v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  awd::profile::LogParameter *v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE v13[48];

  if (a2 == this)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v13);
  }
  wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((awd::profile::Log *)((char *)this + 8));
  if (*((int *)a2 + 4) >= 1)
  {
    v4 = 0;
    v5 = MEMORY[0x1E0DE8338];
    do
    {
      v6 = *(const awd::profile::LogParameter **)(*((_QWORD *)a2 + 1) + 8 * v4);
      v7 = *((_DWORD *)this + 5);
      v8 = *((int *)this + 4);
      if ((int)v8 >= v7)
      {
        if (v7 == *((_DWORD *)this + 6))
        {
          wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((awd::profile::Log *)((char *)this + 8));
          v7 = *((_DWORD *)this + 5);
        }
        *((_DWORD *)this + 5) = v7 + 1;
        v10 = (awd::profile::LogParameter *)operator new();
        *(_QWORD *)v10 = &off_1E886B0E8;
        *((_QWORD *)v10 + 1) = v5;
        *((_QWORD *)v10 + 2) = v5;
        *((_QWORD *)v10 + 3) = 0;
        v11 = *((_QWORD *)this + 1);
        v12 = *((int *)this + 4);
        *((_DWORD *)this + 4) = v12 + 1;
        *(_QWORD *)(v11 + 8 * v12) = v10;
      }
      else
      {
        v9 = *((_QWORD *)this + 1);
        *((_DWORD *)this + 4) = v8 + 1;
        v10 = *(awd::profile::LogParameter **)(v9 + 8 * v8);
      }
      awd::profile::LogParameter::MergeFrom(v10, v6);
      ++v4;
    }
    while (v4 < *((int *)a2 + 4));
  }
}

void sub_1CC5B85DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void awd::profile::Profile::CopyFrom(awd::profile::Profile *this, const awd::profile::Profile *a2)
{
  if (a2 != this)
  {
    (*(void (**)(awd::profile::Profile *))(*(_QWORD *)this + 32))(this);
    awd::profile::Profile::MergeFrom(this, a2);
  }
}

uint64_t awd::profile::Profile::IsInitialized(awd::profile::Profile *this)
{
  return 1;
}

uint64_t awd::profile::Profile::Swap(uint64_t this, awd::profile::Profile *a2)
{
  uint64_t v3;
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;

  if (a2 != (awd::profile::Profile *)this)
  {
    v3 = this;
    v4 = *(_DWORD *)(this + 8);
    *(_DWORD *)(this + 8) = *((_DWORD *)a2 + 2);
    *((_DWORD *)a2 + 2) = v4;
    v5 = *(_DWORD *)(this + 12);
    *(_DWORD *)(this + 12) = *((_DWORD *)a2 + 3);
    *((_DWORD *)a2 + 3) = v5;
    v6 = *(_QWORD *)(this + 16);
    *(_QWORD *)(this + 16) = *((_QWORD *)a2 + 2);
    v7 = *((_QWORD *)a2 + 3);
    *((_QWORD *)a2 + 2) = v6;
    v8 = *(_QWORD *)(this + 24);
    *(_QWORD *)(this + 24) = v7;
    *((_QWORD *)a2 + 3) = v8;
    LODWORD(v6) = *(_DWORD *)(this + 32);
    *(_DWORD *)(this + 32) = *((_DWORD *)a2 + 8);
    *((_DWORD *)a2 + 8) = v6;
    LODWORD(v6) = *(_DWORD *)(this + 36);
    *(_DWORD *)(this + 36) = *((_DWORD *)a2 + 9);
    *((_DWORD *)a2 + 9) = v6;
    LODWORD(v6) = *(_DWORD *)(this + 64);
    *(_DWORD *)(this + 64) = *((_DWORD *)a2 + 16);
    *((_DWORD *)a2 + 16) = v6;
    wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Swap();
    v9 = *(_QWORD *)(v3 + 72);
    *(_QWORD *)(v3 + 72) = *((_QWORD *)a2 + 9);
    *((_QWORD *)a2 + 9) = v9;
    LODWORD(v9) = *(_DWORD *)(v3 + 68);
    *(_DWORD *)(v3 + 68) = *((_DWORD *)a2 + 17);
    *((_DWORD *)a2 + 17) = v9;
    LODWORD(v9) = *(_DWORD *)(v3 + 80);
    *(_DWORD *)(v3 + 80) = *((_DWORD *)a2 + 20);
    *((_DWORD *)a2 + 20) = v9;
    LODWORD(v9) = *(_DWORD *)(v3 + 84);
    *(_DWORD *)(v3 + 84) = *((_DWORD *)a2 + 21);
    *((_DWORD *)a2 + 21) = v9;
    LODWORD(v9) = *(_DWORD *)(v3 + 112);
    *(_DWORD *)(v3 + 112) = *((_DWORD *)a2 + 28);
    *((_DWORD *)a2 + 28) = v9;
    this = wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Swap();
    v10 = *(_BYTE *)(v3 + 116);
    *(_BYTE *)(v3 + 116) = *((_BYTE *)a2 + 116);
    *((_BYTE *)a2 + 116) = v10;
    v11 = *(_QWORD *)(v3 + 120);
    *(_QWORD *)(v3 + 120) = *((_QWORD *)a2 + 15);
    *((_QWORD *)a2 + 15) = v11;
    LODWORD(v11) = *(_DWORD *)(v3 + 132);
    *(_DWORD *)(v3 + 132) = *((_DWORD *)a2 + 33);
    *((_DWORD *)a2 + 33) = v11;
    LODWORD(v11) = *(_DWORD *)(v3 + 128);
    *(_DWORD *)(v3 + 128) = *((_DWORD *)a2 + 32);
    *((_DWORD *)a2 + 32) = v11;
  }
  return this;
}

_QWORD *awd::profile::Profile::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return sub_1CC59E69C(a1, "awd.profile.Profile");
}

_QWORD *awd::profile::LogParameter::SharedCtor(_QWORD *this)
{
  uint64_t v1;

  v1 = MEMORY[0x1E0DE8338];
  this[1] = MEMORY[0x1E0DE8338];
  this[2] = v1;
  this[3] = 0;
  return this;
}

awd::profile::LogParameter *awd::profile::LogParameter::LogParameter(awd::profile::LogParameter *this, const awd::profile::LogParameter *a2)
{
  uint64_t v3;

  v3 = MEMORY[0x1E0DE8338];
  *(_QWORD *)this = &off_1E886B0E8;
  *((_QWORD *)this + 1) = v3;
  *((_QWORD *)this + 2) = v3;
  *((_QWORD *)this + 3) = 0;
  awd::profile::LogParameter::MergeFrom(this, a2);
  return this;
}

void sub_1CC5B87F8(_Unwind_Exception *a1)
{
  wireless_diagnostics::google::protobuf::MessageLite *v1;

  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(v1);
  _Unwind_Resume(a1);
}

void awd::profile::LogParameter::MergeFrom(awd::profile::LogParameter *this, const awd::profile::LogParameter *a2)
{
  int v4;
  std::string *v5;
  const std::string *v6;
  std::string *v7;
  const std::string *v8;
  std::string *v9;
  _BYTE v10[48];

  if (a2 == this)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v10);
  }
  LOBYTE(v4) = *((_BYTE *)a2 + 28);
  if ((_BYTE)v4)
  {
    v5 = (std::string *)MEMORY[0x1E0DE8338];
    if ((*((_BYTE *)a2 + 28) & 1) != 0)
    {
      v6 = (const std::string *)*((_QWORD *)a2 + 1);
      *((_DWORD *)this + 7) |= 1u;
      v7 = (std::string *)*((_QWORD *)this + 1);
      if (v7 == v5)
      {
        v7 = (std::string *)operator new();
        v7->__r_.__value_.__l.__size_ = 0;
        v7->__r_.__value_.__r.__words[2] = 0;
        v7->__r_.__value_.__r.__words[0] = 0;
        *((_QWORD *)this + 1) = v7;
      }
      std::string::operator=(v7, v6);
      v4 = *((_DWORD *)a2 + 7);
    }
    if ((v4 & 2) != 0)
    {
      v8 = (const std::string *)*((_QWORD *)a2 + 2);
      *((_DWORD *)this + 7) |= 2u;
      v9 = (std::string *)*((_QWORD *)this + 2);
      if (v9 == v5)
      {
        v9 = (std::string *)operator new();
        v9->__r_.__value_.__l.__size_ = 0;
        v9->__r_.__value_.__r.__words[2] = 0;
        v9->__r_.__value_.__r.__words[0] = 0;
        *((_QWORD *)this + 2) = v9;
      }
      std::string::operator=(v9, v8);
    }
  }
}

void sub_1CC5B892C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void awd::profile::LogParameter::~LogParameter(awd::profile::LogParameter *this)
{
  *(_QWORD *)this = &off_1E886B0E8;
  awd::profile::LogParameter::SharedDtor((uint64_t)this);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

{
  *(_QWORD *)this = &off_1E886B0E8;
  awd::profile::LogParameter::SharedDtor((uint64_t)this);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

{
  *(_QWORD *)this = &off_1E886B0E8;
  awd::profile::LogParameter::SharedDtor((uint64_t)this);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
  JUMPOUT(0x1D17AD544);
}

uint64_t awd::profile::LogParameter::SharedDtor(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  v1 = this;
  v2 = *(_QWORD *)(this + 8);
  v3 = MEMORY[0x1E0DE8338];
  if (v2 != MEMORY[0x1E0DE8338] && v2 != 0)
  {
    if (*(char *)(v2 + 23) < 0)
      operator delete(*(void **)v2);
    this = MEMORY[0x1D17AD544](v2, 0x1012C40EC159624);
  }
  v5 = *(_QWORD *)(v1 + 16);
  if (v5 != v3 && v5 != 0)
  {
    if (*(char *)(v5 + 23) < 0)
      operator delete(*(void **)v5);
    JUMPOUT(0x1D17AD544);
  }
  return this;
}

uint64_t awd::profile::LogParameter::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 24) = a2;
  return this;
}

uint64_t awd::profile::LogParameter::default_instance(awd::profile::LogParameter *this, uint64_t a2, uint64_t a3, const char *a4)
{
  uint64_t result;

  result = awd::profile::LogParameter::default_instance_;
  if (!awd::profile::LogParameter::default_instance_)
  {
    awd::profile::protobuf_AddDesc_AwdProfile_2eproto(0, a2, a3, a4);
    return awd::profile::LogParameter::default_instance_;
  }
  return result;
}

_QWORD *awd::profile::LogParameter::New(awd::profile::LogParameter *this)
{
  _QWORD *result;
  uint64_t v2;

  result = (_QWORD *)operator new();
  v2 = MEMORY[0x1E0DE8338];
  *result = &off_1E886B0E8;
  result[1] = v2;
  result[2] = v2;
  result[3] = 0;
  return result;
}

uint64_t awd::profile::LogParameter::Clear(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  if (*(_BYTE *)(this + 28))
  {
    v1 = MEMORY[0x1E0DE8338];
    if ((*(_BYTE *)(this + 28) & 1) != 0)
    {
      v2 = *(_QWORD *)(this + 8);
      if (v2 != MEMORY[0x1E0DE8338])
      {
        if (*(char *)(v2 + 23) < 0)
        {
          **(_BYTE **)v2 = 0;
          *(_QWORD *)(v2 + 8) = 0;
        }
        else
        {
          *(_BYTE *)v2 = 0;
          *(_BYTE *)(v2 + 23) = 0;
        }
      }
    }
    if ((*(_BYTE *)(this + 28) & 2) != 0)
    {
      v3 = *(_QWORD *)(this + 16);
      if (v3 != v1)
      {
        if (*(char *)(v3 + 23) < 0)
        {
          **(_BYTE **)v3 = 0;
          *(_QWORD *)(v3 + 8) = 0;
        }
        else
        {
          *(_BYTE *)v3 = 0;
          *(_BYTE *)(v3 + 23) = 0;
        }
      }
    }
  }
  *(_DWORD *)(this + 28) = 0;
  return this;
}

uint64_t awd::profile::LogParameter::MergePartialFromCodedStream(awd::profile::LogParameter *this, wireless_diagnostics::google::protobuf::io::CodedInputStream *a2)
{
  uint64_t v4;
  char *v5;
  uint64_t TagFallback;
  int v7;
  _QWORD *v8;
  uint64_t result;
  _BYTE *v10;
  _QWORD *v11;

  v4 = MEMORY[0x1E0DE8338];
  do
  {
    while (1)
    {
      while (1)
      {
        v5 = (char *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v5 >= *((_QWORD *)a2 + 2) || *v5 < 0)
        {
          TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(a2);
          *((_DWORD *)a2 + 8) = TagFallback;
          if (!(_DWORD)TagFallback)
            return 1;
        }
        else
        {
          TagFallback = *v5;
          *((_DWORD *)a2 + 8) = TagFallback;
          *((_QWORD *)a2 + 1) = v5 + 1;
          if (!(_DWORD)TagFallback)
            return 1;
        }
        if (TagFallback >> 3 != 1)
          break;
        v7 = TagFallback & 7;
        if (v7 != 2)
          goto LABEL_26;
        *((_DWORD *)this + 7) |= 1u;
        if (*((_QWORD *)this + 1) == v4)
        {
          v8 = (_QWORD *)operator new();
          v8[1] = 0;
          v8[2] = 0;
          *v8 = 0;
          *((_QWORD *)this + 1) = v8;
        }
        result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString();
        if (!(_DWORD)result)
          return result;
        v10 = (_BYTE *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v10 < *((_QWORD *)a2 + 2) && *v10 == 18)
        {
          *((_QWORD *)a2 + 1) = v10 + 1;
          goto LABEL_18;
        }
      }
      if (TagFallback >> 3 != 2)
      {
        v7 = TagFallback & 7;
        goto LABEL_26;
      }
      v7 = TagFallback & 7;
      if (v7 == 2)
        break;
LABEL_26:
      if (v7 == 4)
        return 1;
      if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(a2, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback) & 1) == 0)return 0;
    }
LABEL_18:
    *((_DWORD *)this + 7) |= 2u;
    if (*((_QWORD *)this + 2) == v4)
    {
      v11 = (_QWORD *)operator new();
      v11[1] = 0;
      v11[2] = 0;
      *v11 = 0;
      *((_QWORD *)this + 2) = v11;
    }
    result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString();
    if (!(_DWORD)result)
      return result;
  }
  while (*((_QWORD *)a2 + 1) != *((_QWORD *)a2 + 2)
       || !*((_DWORD *)a2 + 11) && *((_DWORD *)a2 + 6) != *((_DWORD *)a2 + 10));
  *((_DWORD *)a2 + 8) = 0;
  result = 1;
  *((_BYTE *)a2 + 36) = 1;
  return result;
}

uint64_t awd::profile::LogParameter::SerializeWithCachedSizes(uint64_t this, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a2)
{
  uint64_t v2;
  int v3;

  v2 = this;
  v3 = *(_DWORD *)(this + 28);
  if ((v3 & 1) != 0)
  {
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString();
    v3 = *(_DWORD *)(v2 + 28);
  }
  if ((v3 & 2) != 0)
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString();
  return this;
}

uint64_t awd::profile::LogParameter::ByteSize(awd::profile::LogParameter *this)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  char v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  int v10;
  uint64_t v11;
  int v12;
  char v13;
  uint64_t v14;
  unint64_t v15;
  int v16;

  LOBYTE(v2) = *((_BYTE *)this + 28);
  if (!(_BYTE)v2)
  {
    v3 = 0;
    goto LABEL_24;
  }
  if ((*((_BYTE *)this + 28) & 1) == 0)
  {
    v3 = 0;
    if ((*((_BYTE *)this + 28) & 2) == 0)
      goto LABEL_24;
    goto LABEL_15;
  }
  v4 = *((_QWORD *)this + 1);
  v5 = *(unsigned __int8 *)(v4 + 23);
  v6 = v5;
  v7 = *(_QWORD *)(v4 + 8);
  if ((v5 & 0x80u) == 0)
    v8 = *(unsigned __int8 *)(v4 + 23);
  else
    v8 = v7;
  if (v8 >= 0x80)
  {
    v10 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v8);
    v5 = *(unsigned __int8 *)(v4 + 23);
    v7 = *(_QWORD *)(v4 + 8);
    v9 = v10 + 1;
    v2 = *((_DWORD *)this + 7);
    v6 = *(_BYTE *)(v4 + 23);
  }
  else
  {
    v9 = 2;
  }
  if (v6 < 0)
    v5 = v7;
  v3 = (v9 + v5);
  if ((v2 & 2) != 0)
  {
LABEL_15:
    v11 = *((_QWORD *)this + 2);
    v12 = *(unsigned __int8 *)(v11 + 23);
    v13 = v12;
    v14 = *(_QWORD *)(v11 + 8);
    if ((v12 & 0x80u) == 0)
      v15 = *(unsigned __int8 *)(v11 + 23);
    else
      v15 = v14;
    if (v15 >= 0x80)
    {
      v16 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v15);
      v12 = *(unsigned __int8 *)(v11 + 23);
      v14 = *(_QWORD *)(v11 + 8);
      v13 = *(_BYTE *)(v11 + 23);
    }
    else
    {
      v16 = 1;
    }
    if (v13 < 0)
      v12 = v14;
    v3 = (v3 + v16 + v12 + 1);
  }
LABEL_24:
  *((_DWORD *)this + 6) = v3;
  return v3;
}

void awd::profile::LogParameter::CopyFrom(awd::profile::LogParameter *this, const awd::profile::LogParameter *a2)
{
  if (a2 != this)
  {
    (*(void (**)(awd::profile::LogParameter *))(*(_QWORD *)this + 32))(this);
    awd::profile::LogParameter::MergeFrom(this, a2);
  }
}

uint64_t awd::profile::LogParameter::IsInitialized(awd::profile::LogParameter *this)
{
  return 1;
}

uint64_t awd::profile::LogParameter::Swap(uint64_t this, awd::profile::LogParameter *a2)
{
  uint64_t v2;
  uint64_t v3;

  if (a2 != (awd::profile::LogParameter *)this)
  {
    v2 = *(_QWORD *)(this + 8);
    *(_QWORD *)(this + 8) = *((_QWORD *)a2 + 1);
    *((_QWORD *)a2 + 1) = v2;
    v3 = *(_QWORD *)(this + 16);
    *(_QWORD *)(this + 16) = *((_QWORD *)a2 + 2);
    *((_QWORD *)a2 + 2) = v3;
    LODWORD(v3) = *(_DWORD *)(this + 28);
    *(_DWORD *)(this + 28) = *((_DWORD *)a2 + 7);
    *((_DWORD *)a2 + 7) = v3;
    LODWORD(v3) = *(_DWORD *)(this + 24);
    *(_DWORD *)(this + 24) = *((_DWORD *)a2 + 6);
    *((_DWORD *)a2 + 6) = v3;
  }
  return this;
}

_QWORD *awd::profile::LogParameter::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return sub_1CC59E69C(a1, "awd.profile.LogParameter");
}

uint64_t awd::profile::Log::SharedCtor(uint64_t this)
{
  *(_QWORD *)(this + 32) = 0;
  return this;
}

awd::profile::Log *awd::profile::Log::Log(awd::profile::Log *this, const awd::profile::Log *a2)
{
  *(_QWORD *)this = &off_1E886B610;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_DWORD *)this + 6) = 0;
  *((_QWORD *)this + 4) = 0;
  awd::profile::Log::MergeFrom(this, a2);
  return this;
}

void sub_1CC5B8F98(_Unwind_Exception *a1)
{
  wireless_diagnostics::google::protobuf::MessageLite *v1;
  uint64_t *v2;

  sub_1CC5C305C(v2);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(v1);
  _Unwind_Resume(a1);
}

void awd::profile::Log::~Log(awd::profile::Log *this)
{
  *(_QWORD *)this = &off_1E886B610;
  sub_1CC5C305C((uint64_t *)this + 1);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

{
  awd::profile::Log::~Log(this);
  JUMPOUT(0x1D17AD544);
}

uint64_t awd::profile::Log::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 32) = a2;
  return this;
}

uint64_t awd::profile::Log::New(awd::profile::Log *this)
{
  uint64_t result;

  result = operator new();
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)result = &off_1E886B610;
  *(_DWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 32) = 0;
  return result;
}

uint64_t awd::profile::Log::MergePartialFromCodedStream(awd::profile::Log *this, wireless_diagnostics::google::protobuf::io::CodedInputStream *a2)
{
  wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *v4;
  uint64_t v5;
  char *v6;
  uint64_t TagFallback;
  int v8;
  uint64_t v9;
  uint64_t v10;
  awd::profile::LogParameter *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  int v15;
  int v16;
  int v17;
  BOOL v18;
  int v19;
  _BYTE *v20;
  _BYTE *v21;
  uint64_t result;
  unsigned int v23;

  v4 = (awd::profile::Log *)((char *)this + 8);
  v5 = MEMORY[0x1E0DE8338];
  while (1)
  {
LABEL_2:
    v6 = (char *)*((_QWORD *)a2 + 1);
    if ((unint64_t)v6 >= *((_QWORD *)a2 + 2) || *v6 < 0)
    {
      TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(a2);
      *((_DWORD *)a2 + 8) = TagFallback;
    }
    else
    {
      TagFallback = *v6;
      *((_DWORD *)a2 + 8) = TagFallback;
      *((_QWORD *)a2 + 1) = v6 + 1;
    }
    if ((_DWORD)TagFallback == 10)
    {
      while (1)
      {
        v8 = *((_DWORD *)this + 5);
        v9 = *((int *)this + 4);
        if ((int)v9 >= v8)
        {
          if (v8 == *((_DWORD *)this + 6))
          {
            wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve(v4);
            v8 = *((_DWORD *)this + 5);
          }
          *((_DWORD *)this + 5) = v8 + 1;
          v11 = (awd::profile::LogParameter *)operator new();
          *(_QWORD *)v11 = &off_1E886B0E8;
          *((_QWORD *)v11 + 1) = v5;
          *((_QWORD *)v11 + 2) = v5;
          *((_QWORD *)v11 + 3) = 0;
          v12 = *((_QWORD *)this + 1);
          v13 = *((int *)this + 4);
          *((_DWORD *)this + 4) = v13 + 1;
          *(_QWORD *)(v12 + 8 * v13) = v11;
        }
        else
        {
          v10 = *((_QWORD *)this + 1);
          *((_DWORD *)this + 4) = v9 + 1;
          v11 = *(awd::profile::LogParameter **)(v10 + 8 * v9);
        }
        v23 = 0;
        v14 = (char *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v14 >= *((_QWORD *)a2 + 2) || *v14 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v23))return 0;
        }
        else
        {
          v23 = *v14;
          *((_QWORD *)a2 + 1) = v14 + 1;
        }
        v15 = *((_DWORD *)a2 + 14);
        v16 = *((_DWORD *)a2 + 15);
        *((_DWORD *)a2 + 14) = v15 + 1;
        if (v15 >= v16)
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(a2);
        if (!awd::profile::LogParameter::MergePartialFromCodedStream(v11, a2) || !*((_BYTE *)a2 + 36))
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(a2);
        v17 = *((_DWORD *)a2 + 14);
        v18 = __OFSUB__(v17, 1);
        v19 = v17 - 1;
        if (v19 < 0 == v18)
          *((_DWORD *)a2 + 14) = v19;
        v20 = (_BYTE *)*((_QWORD *)a2 + 1);
        v21 = (_BYTE *)*((_QWORD *)a2 + 2);
        if (v20 >= v21 || *v20 != 10)
        {
          if (v20 == v21 && (*((_DWORD *)a2 + 11) || *((_DWORD *)a2 + 6) == *((_DWORD *)a2 + 10)))
          {
            *((_DWORD *)a2 + 8) = 0;
            result = 1;
            *((_BYTE *)a2 + 36) = 1;
            return result;
          }
          goto LABEL_2;
        }
        *((_QWORD *)a2 + 1) = v20 + 1;
      }
    }
    if (!(_DWORD)TagFallback || (TagFallback & 7) == 4)
      return 1;
    if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(a2, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback) & 1) == 0)return 0;
  }
}

uint64_t awd::profile::Log::SerializeWithCachedSizes(uint64_t this, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  uint64_t v6;

  if (*(int *)(this + 16) >= 1)
  {
    v5 = this;
    v6 = 0;
    do
      this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(_QWORD *)(*(_QWORD *)(v5 + 8) + 8 * v6++), a2, a4);
    while (v6 < *(int *)(v5 + 16));
  }
  return this;
}

uint64_t awd::profile::Log::ByteSize(awd::profile::Log *this)
{
  uint64_t v2;
  uint64_t v3;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v4;
  int v5;
  int v6;

  v2 = *((unsigned int *)this + 4);
  if ((int)v2 >= 1)
  {
    v3 = 0;
    do
    {
      v4 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)awd::profile::LogParameter::ByteSize(*(awd::profile::LogParameter **)(*((_QWORD *)this + 1) + 8 * v3));
      v5 = (int)v4;
      if (v4 >= 0x80)
        v6 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v4);
      else
        v6 = 1;
      v2 = (v5 + v2 + v6);
      ++v3;
    }
    while (v3 < *((int *)this + 4));
  }
  *((_DWORD *)this + 8) = v2;
  return v2;
}

void awd::profile::Log::CopyFrom(awd::profile::Log *this, const awd::profile::Log *a2)
{
  if (a2 != this)
  {
    (*(void (**)(awd::profile::Log *))(*(_QWORD *)this + 32))(this);
    awd::profile::Log::MergeFrom(this, a2);
  }
}

uint64_t awd::profile::Log::IsInitialized(awd::profile::Log *this)
{
  return 1;
}

awd::profile::Log *awd::profile::Log::Swap(awd::profile::Log *this, awd::profile::Log *a2)
{
  awd::profile::Log *v3;
  int v4;
  int v5;

  if (a2 != this)
  {
    v3 = this;
    this = (awd::profile::Log *)wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Swap();
    v4 = *((_DWORD *)v3 + 9);
    *((_DWORD *)v3 + 9) = *((_DWORD *)a2 + 9);
    *((_DWORD *)a2 + 9) = v4;
    v5 = *((_DWORD *)v3 + 8);
    *((_DWORD *)v3 + 8) = *((_DWORD *)a2 + 8);
    *((_DWORD *)a2 + 8) = v5;
  }
  return this;
}

_QWORD *awd::profile::Log::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return sub_1CC59E69C(a1, "awd.profile.Log");
}

_QWORD *awd::profile::ConfigurationParameter::SharedCtor(_QWORD *this)
{
  this[1] = MEMORY[0x1E0DE8338];
  this[2] = 0;
  this[3] = 0;
  return this;
}

uint64_t awd::profile::TypeVariant::default_instance(awd::profile::TypeVariant *this, uint64_t a2, uint64_t a3, const char *a4)
{
  uint64_t result;

  result = awd::profile::TypeVariant::default_instance_;
  if (!awd::profile::TypeVariant::default_instance_)
  {
    awd::profile::protobuf_AddDesc_AwdProfile_2eproto(0, a2, a3, a4);
    return awd::profile::TypeVariant::default_instance_;
  }
  return result;
}

awd::profile::ConfigurationParameter *awd::profile::ConfigurationParameter::ConfigurationParameter(awd::profile::ConfigurationParameter *this, const awd::profile::ConfigurationParameter *a2)
{
  uint64_t v3;

  v3 = MEMORY[0x1E0DE8338];
  *(_QWORD *)this = &off_1E886B598;
  *((_QWORD *)this + 1) = v3;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  awd::profile::ConfigurationParameter::MergeFrom(this, a2);
  return this;
}

void sub_1CC5B94A8(_Unwind_Exception *a1)
{
  wireless_diagnostics::google::protobuf::MessageLite *v1;

  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(v1);
  _Unwind_Resume(a1);
}

void awd::profile::ConfigurationParameter::MergeFrom(awd::profile::ConfigurationParameter *this, const awd::profile::ConfigurationParameter *a2)
{
  int v4;
  const std::string *v5;
  std::string *v6;
  uint64_t v7;
  uint64_t v8;
  const awd::profile::TypeVariant *v9;
  _BYTE v10[48];

  if (a2 == this)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v10);
  }
  LOBYTE(v4) = *((_BYTE *)a2 + 28);
  if ((_BYTE)v4)
  {
    if ((*((_BYTE *)a2 + 28) & 1) != 0)
    {
      v5 = (const std::string *)*((_QWORD *)a2 + 1);
      *((_DWORD *)this + 7) |= 1u;
      v6 = (std::string *)*((_QWORD *)this + 1);
      if (v6 == (std::string *)MEMORY[0x1E0DE8338])
      {
        v6 = (std::string *)operator new();
        v6->__r_.__value_.__l.__size_ = 0;
        v6->__r_.__value_.__r.__words[2] = 0;
        v6->__r_.__value_.__r.__words[0] = 0;
        *((_QWORD *)this + 1) = v6;
      }
      std::string::operator=(v6, v5);
      v4 = *((_DWORD *)a2 + 7);
    }
    if ((v4 & 2) != 0)
    {
      *((_DWORD *)this + 7) |= 2u;
      v7 = *((_QWORD *)this + 2);
      if (!v7)
      {
        v7 = operator new();
        *(_QWORD *)v7 = &off_1E886AFF8;
        *(_OWORD *)(v7 + 8) = 0u;
        *(_OWORD *)(v7 + 24) = 0u;
        *(_DWORD *)(v7 + 40) = 0;
        v8 = MEMORY[0x1E0DE8338];
        *(_BYTE *)(v7 + 44) = 0;
        *(_QWORD *)(v7 + 48) = v8;
        *(_QWORD *)(v7 + 56) = v8;
        *(_QWORD *)(v7 + 64) = 0;
        *(_DWORD *)(v7 + 72) = 0;
        *((_QWORD *)this + 2) = v7;
      }
      v9 = (const awd::profile::TypeVariant *)*((_QWORD *)a2 + 2);
      if (!v9)
        v9 = *(const awd::profile::TypeVariant **)(awd::profile::ConfigurationParameter::default_instance_ + 16);
      awd::profile::TypeVariant::MergeFrom((awd::profile::TypeVariant *)v7, v9);
    }
  }
}

void sub_1CC5B9610(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void awd::profile::ConfigurationParameter::~ConfigurationParameter(awd::profile::ConfigurationParameter *this)
{
  *(_QWORD *)this = &off_1E886B598;
  awd::profile::ConfigurationParameter::SharedDtor(this);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

{
  *(_QWORD *)this = &off_1E886B598;
  awd::profile::ConfigurationParameter::SharedDtor(this);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

{
  *(_QWORD *)this = &off_1E886B598;
  awd::profile::ConfigurationParameter::SharedDtor(this);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
  JUMPOUT(0x1D17AD544);
}

_QWORD *awd::profile::ConfigurationParameter::SharedDtor(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  v1 = this;
  v2 = this[1];
  if (v2 != MEMORY[0x1E0DE8338] && v2 != 0)
  {
    if (*(char *)(v2 + 23) < 0)
      operator delete(*(void **)v2);
    this = (_QWORD *)MEMORY[0x1D17AD544](v2, 0x1012C40EC159624);
  }
  if ((_QWORD *)awd::profile::ConfigurationParameter::default_instance_ != v1)
  {
    this = (_QWORD *)v1[2];
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

uint64_t awd::profile::ConfigurationParameter::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 24) = a2;
  return this;
}

uint64_t awd::profile::ConfigurationParameter::default_instance(awd::profile::ConfigurationParameter *this, uint64_t a2, uint64_t a3, const char *a4)
{
  uint64_t result;

  result = awd::profile::ConfigurationParameter::default_instance_;
  if (!awd::profile::ConfigurationParameter::default_instance_)
  {
    awd::profile::protobuf_AddDesc_AwdProfile_2eproto(0, a2, a3, a4);
    return awd::profile::ConfigurationParameter::default_instance_;
  }
  return result;
}

_QWORD *awd::profile::ConfigurationParameter::New(awd::profile::ConfigurationParameter *this)
{
  _QWORD *result;
  uint64_t v2;

  result = (_QWORD *)operator new();
  v2 = MEMORY[0x1E0DE8338];
  *result = &off_1E886B598;
  result[1] = v2;
  result[2] = 0;
  result[3] = 0;
  return result;
}

uint64_t awd::profile::ConfigurationParameter::Clear(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = this;
  if (*(_BYTE *)(this + 28))
  {
    if ((*(_BYTE *)(this + 28) & 1) != 0)
    {
      v2 = *(_QWORD *)(this + 8);
      if (v2 != MEMORY[0x1E0DE8338])
      {
        if (*(char *)(v2 + 23) < 0)
        {
          **(_BYTE **)v2 = 0;
          *(_QWORD *)(v2 + 8) = 0;
        }
        else
        {
          *(_BYTE *)v2 = 0;
          *(_BYTE *)(v2 + 23) = 0;
        }
      }
    }
    if ((*(_BYTE *)(this + 28) & 2) != 0)
    {
      this = *(_QWORD *)(this + 16);
      if (this)
        this = awd::profile::TypeVariant::Clear(this);
    }
  }
  *(_DWORD *)(v1 + 28) = 0;
  return this;
}

uint64_t awd::profile::TypeVariant::Clear(uint64_t this)
{
  int v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_DWORD *)(this + 72);
  if ((_BYTE)v1)
  {
    *(_DWORD *)(this + 40) = 0;
    *(_OWORD *)(this + 24) = 0u;
    *(_OWORD *)(this + 8) = 0u;
    if ((v1 & 0x40) != 0)
    {
      v2 = *(_QWORD *)(this + 48);
      if (v2 != MEMORY[0x1E0DE8338])
      {
        if (*(char *)(v2 + 23) < 0)
        {
          **(_BYTE **)v2 = 0;
          *(_QWORD *)(v2 + 8) = 0;
        }
        else
        {
          *(_BYTE *)v2 = 0;
          *(_BYTE *)(v2 + 23) = 0;
        }
      }
    }
    *(_BYTE *)(this + 44) = 0;
    v1 = *(_DWORD *)(this + 72);
  }
  if ((v1 & 0xFF00) != 0)
  {
    if ((v1 & 0x100) != 0)
    {
      v3 = *(_QWORD *)(this + 56);
      if (v3 != MEMORY[0x1E0DE8338])
      {
        if (*(char *)(v3 + 23) < 0)
        {
          **(_BYTE **)v3 = 0;
          *(_QWORD *)(v3 + 8) = 0;
        }
        else
        {
          *(_BYTE *)v3 = 0;
          *(_BYTE *)(v3 + 23) = 0;
        }
      }
    }
    *(_DWORD *)(this + 64) = 0;
  }
  *(_DWORD *)(this + 72) = 0;
  return this;
}

uint64_t awd::profile::ConfigurationParameter::MergePartialFromCodedStream(awd::profile::ConfigurationParameter *this, wireless_diagnostics::google::protobuf::io::CodedInputStream *a2)
{
  uint64_t v4;
  char *v5;
  uint64_t TagFallback;
  int v7;
  _QWORD *v8;
  uint64_t result;
  _BYTE *v10;
  uint64_t v11;
  char *v12;
  int v13;
  int v14;
  int v15;
  BOOL v16;
  int v17;
  unsigned int v18;

  v4 = MEMORY[0x1E0DE8338];
  while (1)
  {
    while (1)
    {
      v5 = (char *)*((_QWORD *)a2 + 1);
      if ((unint64_t)v5 >= *((_QWORD *)a2 + 2) || *v5 < 0)
      {
        TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(a2);
        *((_DWORD *)a2 + 8) = TagFallback;
        if (!(_DWORD)TagFallback)
          return 1;
      }
      else
      {
        TagFallback = *v5;
        *((_DWORD *)a2 + 8) = TagFallback;
        *((_QWORD *)a2 + 1) = v5 + 1;
        if (!(_DWORD)TagFallback)
          return 1;
      }
      if (TagFallback >> 3 != 1)
        break;
      v7 = TagFallback & 7;
      if (v7 == 2)
      {
        *((_DWORD *)this + 7) |= 1u;
        if (*((_QWORD *)this + 1) == v4)
        {
          v8 = (_QWORD *)operator new();
          v8[1] = 0;
          v8[2] = 0;
          *v8 = 0;
          *((_QWORD *)this + 1) = v8;
        }
        result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString();
        if (!(_DWORD)result)
          return result;
        v10 = (_BYTE *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v10 < *((_QWORD *)a2 + 2) && *v10 == 18)
        {
          *((_QWORD *)a2 + 1) = v10 + 1;
          goto LABEL_18;
        }
      }
      else
      {
LABEL_24:
        if (v7 == 4)
          return 1;
        if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(a2, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback) & 1) == 0)return 0;
      }
    }
    if (TagFallback >> 3 != 2)
    {
      v7 = TagFallback & 7;
      goto LABEL_24;
    }
    v7 = TagFallback & 7;
    if (v7 != 2)
      goto LABEL_24;
LABEL_18:
    *((_DWORD *)this + 7) |= 2u;
    v11 = *((_QWORD *)this + 2);
    if (!v11)
    {
      v11 = operator new();
      *(_QWORD *)v11 = &off_1E886AFF8;
      *(_OWORD *)(v11 + 8) = 0u;
      *(_OWORD *)(v11 + 24) = 0u;
      *(_DWORD *)(v11 + 40) = 0;
      *(_BYTE *)(v11 + 44) = 0;
      *(_QWORD *)(v11 + 48) = v4;
      *(_QWORD *)(v11 + 56) = v4;
      *(_QWORD *)(v11 + 64) = 0;
      *(_DWORD *)(v11 + 72) = 0;
      *((_QWORD *)this + 2) = v11;
    }
    v18 = 0;
    v12 = (char *)*((_QWORD *)a2 + 1);
    if ((unint64_t)v12 >= *((_QWORD *)a2 + 2) || *v12 < 0)
    {
      if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v18))
        return 0;
    }
    else
    {
      v18 = *v12;
      *((_QWORD *)a2 + 1) = v12 + 1;
    }
    v13 = *((_DWORD *)a2 + 14);
    v14 = *((_DWORD *)a2 + 15);
    *((_DWORD *)a2 + 14) = v13 + 1;
    if (v13 >= v14)
      return 0;
    wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(a2);
    if (!awd::profile::TypeVariant::MergePartialFromCodedStream((awd::profile::TypeVariant *)v11, a2)
      || !*((_BYTE *)a2 + 36))
    {
      return 0;
    }
    wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(a2);
    v15 = *((_DWORD *)a2 + 14);
    v16 = __OFSUB__(v15, 1);
    v17 = v15 - 1;
    if (v17 < 0 == v16)
      *((_DWORD *)a2 + 14) = v17;
    if (*((_QWORD *)a2 + 1) == *((_QWORD *)a2 + 2)
      && (*((_DWORD *)a2 + 11) || *((_DWORD *)a2 + 6) == *((_DWORD *)a2 + 10)))
    {
      *((_DWORD *)a2 + 8) = 0;
      result = 1;
      *((_BYTE *)a2 + 36) = 1;
      return result;
    }
  }
}

uint64_t awd::profile::ConfigurationParameter::SerializeWithCachedSizes(uint64_t this, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  int v6;
  uint64_t v7;

  v5 = this;
  v6 = *(_DWORD *)(this + 28);
  if ((v6 & 1) != 0)
  {
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString();
    if ((*(_DWORD *)(v5 + 28) & 2) == 0)
      return this;
  }
  else if ((v6 & 2) == 0)
  {
    return this;
  }
  v7 = *(_QWORD *)(v5 + 16);
  if (!v7)
    v7 = *(_QWORD *)(awd::profile::ConfigurationParameter::default_instance_ + 16);
  return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, v7, a2, a4);
}

uint64_t awd::profile::ConfigurationParameter::ByteSize(awd::profile::ConfigurationParameter *this)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  char v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  int v10;
  awd::profile::TypeVariant *v11;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v12;
  int v13;
  int v14;

  LOBYTE(v2) = *((_BYTE *)this + 28);
  if (!(_BYTE)v2)
  {
    v3 = 0;
    goto LABEL_21;
  }
  if ((*((_BYTE *)this + 28) & 1) == 0)
  {
    v3 = 0;
    if ((*((_BYTE *)this + 28) & 2) == 0)
      goto LABEL_21;
    goto LABEL_15;
  }
  v4 = *((_QWORD *)this + 1);
  v5 = *(unsigned __int8 *)(v4 + 23);
  v6 = v5;
  v7 = *(_QWORD *)(v4 + 8);
  if ((v5 & 0x80u) == 0)
    v8 = *(unsigned __int8 *)(v4 + 23);
  else
    v8 = v7;
  if (v8 >= 0x80)
  {
    v10 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v8);
    v5 = *(unsigned __int8 *)(v4 + 23);
    v7 = *(_QWORD *)(v4 + 8);
    v9 = v10 + 1;
    v2 = *((_DWORD *)this + 7);
    v6 = *(_BYTE *)(v4 + 23);
  }
  else
  {
    v9 = 2;
  }
  if (v6 < 0)
    v5 = v7;
  v3 = (v9 + v5);
  if ((v2 & 2) != 0)
  {
LABEL_15:
    v11 = (awd::profile::TypeVariant *)*((_QWORD *)this + 2);
    if (!v11)
      v11 = *(awd::profile::TypeVariant **)(awd::profile::ConfigurationParameter::default_instance_ + 16);
    v12 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)awd::profile::TypeVariant::ByteSize(v11);
    v13 = (int)v12;
    if (v12 >= 0x80)
      v14 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v12);
    else
      v14 = 1;
    v3 = (v3 + v13 + v14 + 1);
  }
LABEL_21:
  *((_DWORD *)this + 6) = v3;
  return v3;
}

void awd::profile::TypeVariant::MergeFrom(awd::profile::TypeVariant *this, const awd::profile::TypeVariant *a2)
{
  int v4;
  char v5;
  const std::string *v6;
  std::string *v7;
  int v8;
  int v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  const std::string *v15;
  std::string *v16;
  _BYTE v17[48];

  if (a2 == this)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v17);
  }
  v4 = *((_DWORD *)a2 + 18);
  if (!(_BYTE)v4)
    goto LABEL_13;
  if ((v4 & 1) != 0)
  {
    v9 = *((_DWORD *)a2 + 4);
    *((_DWORD *)this + 18) |= 1u;
    *((_DWORD *)this + 4) = v9;
    v4 = *((_DWORD *)a2 + 18);
    if ((v4 & 2) == 0)
    {
LABEL_6:
      if ((v4 & 4) == 0)
        goto LABEL_7;
      goto LABEL_23;
    }
  }
  else if ((v4 & 2) == 0)
  {
    goto LABEL_6;
  }
  v10 = *((_QWORD *)a2 + 1);
  *((_DWORD *)this + 18) |= 2u;
  *((_QWORD *)this + 1) = v10;
  v4 = *((_DWORD *)a2 + 18);
  if ((v4 & 4) == 0)
  {
LABEL_7:
    if ((v4 & 8) == 0)
      goto LABEL_8;
    goto LABEL_24;
  }
LABEL_23:
  v11 = *((_DWORD *)a2 + 5);
  *((_DWORD *)this + 18) |= 4u;
  *((_DWORD *)this + 5) = v11;
  v4 = *((_DWORD *)a2 + 18);
  if ((v4 & 8) == 0)
  {
LABEL_8:
    if ((v4 & 0x10) == 0)
      goto LABEL_9;
    goto LABEL_25;
  }
LABEL_24:
  v12 = *((_QWORD *)a2 + 3);
  *((_DWORD *)this + 18) |= 8u;
  *((_QWORD *)this + 3) = v12;
  v4 = *((_DWORD *)a2 + 18);
  if ((v4 & 0x10) == 0)
  {
LABEL_9:
    if ((v4 & 0x20) == 0)
      goto LABEL_10;
LABEL_26:
    v14 = *((_QWORD *)a2 + 4);
    *((_DWORD *)this + 18) |= 0x20u;
    *((_QWORD *)this + 4) = v14;
    v4 = *((_DWORD *)a2 + 18);
    if ((v4 & 0x40) == 0)
    {
LABEL_11:
      if ((v4 & 0x80) == 0)
        goto LABEL_13;
      goto LABEL_12;
    }
    goto LABEL_27;
  }
LABEL_25:
  v13 = *((_DWORD *)a2 + 10);
  *((_DWORD *)this + 18) |= 0x10u;
  *((_DWORD *)this + 10) = v13;
  v4 = *((_DWORD *)a2 + 18);
  if ((v4 & 0x20) != 0)
    goto LABEL_26;
LABEL_10:
  if ((v4 & 0x40) == 0)
    goto LABEL_11;
LABEL_27:
  v15 = (const std::string *)*((_QWORD *)a2 + 6);
  *((_DWORD *)this + 18) |= 0x40u;
  v16 = (std::string *)*((_QWORD *)this + 6);
  if (v16 == (std::string *)MEMORY[0x1E0DE8338])
  {
    v16 = (std::string *)operator new();
    v16->__r_.__value_.__l.__size_ = 0;
    v16->__r_.__value_.__r.__words[2] = 0;
    v16->__r_.__value_.__r.__words[0] = 0;
    *((_QWORD *)this + 6) = v16;
  }
  std::string::operator=(v16, v15);
  v4 = *((_DWORD *)a2 + 18);
  if ((v4 & 0x80) != 0)
  {
LABEL_12:
    v5 = *((_BYTE *)a2 + 44);
    *((_DWORD *)this + 18) |= 0x80u;
    *((_BYTE *)this + 44) = v5;
    v4 = *((_DWORD *)a2 + 18);
  }
LABEL_13:
  if ((v4 & 0xFF00) != 0)
  {
    if ((v4 & 0x100) != 0)
    {
      v6 = (const std::string *)*((_QWORD *)a2 + 7);
      *((_DWORD *)this + 18) |= 0x100u;
      v7 = (std::string *)*((_QWORD *)this + 7);
      if (v7 == (std::string *)MEMORY[0x1E0DE8338])
      {
        v7 = (std::string *)operator new();
        v7->__r_.__value_.__l.__size_ = 0;
        v7->__r_.__value_.__r.__words[2] = 0;
        v7->__r_.__value_.__r.__words[0] = 0;
        *((_QWORD *)this + 7) = v7;
      }
      std::string::operator=(v7, v6);
      v4 = *((_DWORD *)a2 + 18);
    }
    if ((v4 & 0x200) != 0)
    {
      v8 = *((_DWORD *)a2 + 16);
      *((_DWORD *)this + 18) |= 0x200u;
      *((_DWORD *)this + 16) = v8;
    }
  }
}

void sub_1CC5B9ED8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void awd::profile::ConfigurationParameter::CopyFrom(awd::profile::ConfigurationParameter *this, const awd::profile::ConfigurationParameter *a2)
{
  if (a2 != this)
  {
    (*(void (**)(awd::profile::ConfigurationParameter *))(*(_QWORD *)this + 32))(this);
    awd::profile::ConfigurationParameter::MergeFrom(this, a2);
  }
}

uint64_t awd::profile::ConfigurationParameter::IsInitialized(awd::profile::ConfigurationParameter *this)
{
  return 1;
}

uint64_t awd::profile::ConfigurationParameter::Swap(uint64_t this, awd::profile::ConfigurationParameter *a2)
{
  uint64_t v2;
  uint64_t v3;

  if (a2 != (awd::profile::ConfigurationParameter *)this)
  {
    v2 = *(_QWORD *)(this + 8);
    *(_QWORD *)(this + 8) = *((_QWORD *)a2 + 1);
    *((_QWORD *)a2 + 1) = v2;
    v3 = *(_QWORD *)(this + 16);
    *(_QWORD *)(this + 16) = *((_QWORD *)a2 + 2);
    *((_QWORD *)a2 + 2) = v3;
    LODWORD(v3) = *(_DWORD *)(this + 28);
    *(_DWORD *)(this + 28) = *((_DWORD *)a2 + 7);
    *((_DWORD *)a2 + 7) = v3;
    LODWORD(v3) = *(_DWORD *)(this + 24);
    *(_DWORD *)(this + 24) = *((_DWORD *)a2 + 6);
    *((_DWORD *)a2 + 6) = v3;
  }
  return this;
}

_QWORD *awd::profile::ConfigurationParameter::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return sub_1CC59E69C(a1, "awd.profile.ConfigurationParameter");
}

double awd::profile::ComponentConfiguration::SharedCtor(awd::profile::ComponentConfiguration *this)
{
  double result;

  result = 0.0;
  *((_QWORD *)this + 7) = 0;
  *((_QWORD *)this + 11) = 0;
  return result;
}

awd::profile::ComponentConfiguration *awd::profile::ComponentConfiguration::ComponentConfiguration(awd::profile::ComponentConfiguration *this, const awd::profile::ComponentConfiguration *a2)
{
  *(_QWORD *)this = &off_1E886B520;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_DWORD *)this + 6) = 0;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = 0;
  *((_DWORD *)this + 12) = 0;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 8) = 0;
  *((_QWORD *)this + 9) = 0;
  *((_QWORD *)this + 7) = 0;
  *((_DWORD *)this + 20) = 0;
  awd::profile::ComponentConfiguration::MergeFrom(this, a2);
  return this;
}

void sub_1CC5BA03C(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t *v3;

  sub_1CC5C305C(v1 + 8);
  sub_1CC5C305C(v3);
  sub_1CC5C305C(v2);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite((wireless_diagnostics::google::protobuf::MessageLite *)v1);
  _Unwind_Resume(a1);
}

void awd::profile::ComponentConfiguration::MergeFrom(awd::profile::ComponentConfiguration *this, const awd::profile::ComponentConfiguration *a2)
{
  uint64_t v4;
  uint64_t v5;
  const awd::profile::Profile *v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  const awd::profile::TriggerSource *v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  const awd::profile::ConfigurationParameter *v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  awd::profile::ConfigurationParameter *v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  int v30;
  int v31;
  _BYTE v32[48];

  if (a2 == this)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v32);
  }
  wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((awd::profile::ComponentConfiguration *)((char *)this + 8));
  v4 = MEMORY[0x1E0DE8338];
  if (*((int *)a2 + 4) >= 1)
  {
    v5 = 0;
    do
    {
      v6 = *(const awd::profile::Profile **)(*((_QWORD *)a2 + 1) + 8 * v5);
      v7 = *((_DWORD *)this + 5);
      v8 = *((int *)this + 4);
      if ((int)v8 >= v7)
      {
        if (v7 == *((_DWORD *)this + 6))
        {
          wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((awd::profile::ComponentConfiguration *)((char *)this + 8));
          v7 = *((_DWORD *)this + 5);
        }
        *((_DWORD *)this + 5) = v7 + 1;
        v10 = operator new();
        *(_QWORD *)v10 = &off_1E886B700;
        *(_DWORD *)(v10 + 112) = 0;
        *(_BYTE *)(v10 + 116) = 0;
        *(_OWORD *)(v10 + 8) = 0u;
        *(_OWORD *)(v10 + 24) = 0u;
        *(_OWORD *)(v10 + 40) = 0u;
        *(_DWORD *)(v10 + 56) = 0;
        *(_OWORD *)(v10 + 64) = 0u;
        *(_OWORD *)(v10 + 80) = 0u;
        *(_OWORD *)(v10 + 92) = 0u;
        *(_QWORD *)(v10 + 120) = v4;
        *(_QWORD *)(v10 + 128) = 0;
        v11 = *((_QWORD *)this + 1);
        v12 = *((int *)this + 4);
        *((_DWORD *)this + 4) = v12 + 1;
        *(_QWORD *)(v11 + 8 * v12) = v10;
      }
      else
      {
        v9 = *((_QWORD *)this + 1);
        *((_DWORD *)this + 4) = v8 + 1;
        v10 = *(_QWORD *)(v9 + 8 * v8);
      }
      awd::profile::Profile::MergeFrom((awd::profile::Profile *)v10, v6);
      ++v5;
    }
    while (v5 < *((int *)a2 + 4));
  }
  wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((awd::profile::ComponentConfiguration *)((char *)this + 32));
  if (*((int *)a2 + 10) >= 1)
  {
    v13 = 0;
    do
    {
      v14 = *(const awd::profile::TriggerSource **)(*((_QWORD *)a2 + 4) + 8 * v13);
      v15 = *((_DWORD *)this + 11);
      v16 = *((int *)this + 10);
      if ((int)v16 >= v15)
      {
        if (v15 == *((_DWORD *)this + 12))
        {
          wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((awd::profile::ComponentConfiguration *)((char *)this + 32));
          v15 = *((_DWORD *)this + 11);
        }
        *((_DWORD *)this + 11) = v15 + 1;
        v18 = operator new();
        *(_QWORD *)v18 = &off_1E886B160;
        *(_OWORD *)(v18 + 8) = 0u;
        *(_OWORD *)(v18 + 24) = 0u;
        *(_DWORD *)(v18 + 40) = 0;
        *(_QWORD *)(v18 + 48) = v4;
        *(_QWORD *)(v18 + 56) = 0;
        v19 = *((_QWORD *)this + 4);
        v20 = *((int *)this + 10);
        *((_DWORD *)this + 10) = v20 + 1;
        *(_QWORD *)(v19 + 8 * v20) = v18;
      }
      else
      {
        v17 = *((_QWORD *)this + 4);
        *((_DWORD *)this + 10) = v16 + 1;
        v18 = *(_QWORD *)(v17 + 8 * v16);
      }
      awd::profile::TriggerSource::MergeFrom((awd::profile::TriggerSource *)v18, v14);
      ++v13;
    }
    while (v13 < *((int *)a2 + 10));
  }
  wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((awd::profile::ComponentConfiguration *)((char *)this + 64));
  if (*((int *)a2 + 18) >= 1)
  {
    v21 = 0;
    do
    {
      v22 = *(const awd::profile::ConfigurationParameter **)(*((_QWORD *)a2 + 8) + 8 * v21);
      v23 = *((_DWORD *)this + 19);
      v24 = *((int *)this + 18);
      if ((int)v24 >= v23)
      {
        if (v23 == *((_DWORD *)this + 20))
        {
          wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((awd::profile::ComponentConfiguration *)((char *)this + 64));
          v23 = *((_DWORD *)this + 19);
        }
        *((_DWORD *)this + 19) = v23 + 1;
        v26 = (awd::profile::ConfigurationParameter *)operator new();
        *(_QWORD *)v26 = &off_1E886B598;
        *((_QWORD *)v26 + 1) = v4;
        *((_QWORD *)v26 + 2) = 0;
        *((_QWORD *)v26 + 3) = 0;
        v27 = *((_QWORD *)this + 8);
        v28 = *((int *)this + 18);
        *((_DWORD *)this + 18) = v28 + 1;
        *(_QWORD *)(v27 + 8 * v28) = v26;
      }
      else
      {
        v25 = *((_QWORD *)this + 8);
        *((_DWORD *)this + 18) = v24 + 1;
        v26 = *(awd::profile::ConfigurationParameter **)(v25 + 8 * v24);
      }
      awd::profile::ConfigurationParameter::MergeFrom(v26, v22);
      ++v21;
    }
    while (v21 < *((int *)a2 + 18));
  }
  LOBYTE(v29) = *((_BYTE *)a2 + 92);
  if ((_BYTE)v29)
  {
    if ((*((_BYTE *)a2 + 92) & 1) != 0)
    {
      v30 = *((_DWORD *)a2 + 14);
      *((_DWORD *)this + 23) |= 1u;
      *((_DWORD *)this + 14) = v30;
      v29 = *((_DWORD *)a2 + 23);
    }
    if ((v29 & 0x10) != 0)
    {
      v31 = *((_DWORD *)a2 + 15);
      *((_DWORD *)this + 23) |= 0x10u;
      *((_DWORD *)this + 15) = v31;
    }
  }
}

void sub_1CC5BA3D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void awd::profile::ComponentConfiguration::~ComponentConfiguration(awd::profile::ComponentConfiguration *this)
{
  *(_QWORD *)this = &off_1E886B520;
  sub_1CC5C305C((uint64_t *)this + 8);
  sub_1CC5C305C((uint64_t *)this + 4);
  sub_1CC5C305C((uint64_t *)this + 1);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

{
  awd::profile::ComponentConfiguration::~ComponentConfiguration(this);
  JUMPOUT(0x1D17AD544);
}

uint64_t awd::profile::ComponentConfiguration::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 88) = a2;
  return this;
}

uint64_t awd::profile::ComponentConfiguration::default_instance(awd::profile::ComponentConfiguration *this, uint64_t a2, uint64_t a3, const char *a4)
{
  uint64_t result;

  result = awd::profile::ComponentConfiguration::default_instance_;
  if (!awd::profile::ComponentConfiguration::default_instance_)
  {
    awd::profile::protobuf_AddDesc_AwdProfile_2eproto(0, a2, a3, a4);
    return awd::profile::ComponentConfiguration::default_instance_;
  }
  return result;
}

uint64_t awd::profile::ComponentConfiguration::New(awd::profile::ComponentConfiguration *this)
{
  uint64_t result;

  result = operator new();
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)result = &off_1E886B520;
  *(_DWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)(result + 40) = 0;
  *(_DWORD *)(result + 48) = 0;
  *(_QWORD *)(result + 88) = 0;
  *(_QWORD *)(result + 64) = 0;
  *(_QWORD *)(result + 72) = 0;
  *(_QWORD *)(result + 56) = 0;
  *(_DWORD *)(result + 80) = 0;
  return result;
}

uint64_t awd::profile::ComponentConfiguration::Clear(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = this;
  if (*(_BYTE *)(this + 92))
    *(_QWORD *)(this + 56) = 0;
  if (*(int *)(this + 16) >= 1)
  {
    v2 = 0;
    do
    {
      v3 = *(_QWORD *)(*(_QWORD *)(v1 + 8) + 8 * v2);
      this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 32))(v3);
      ++v2;
    }
    while (v2 < *(int *)(v1 + 16));
  }
  *(_DWORD *)(v1 + 16) = 0;
  if (*(int *)(v1 + 40) >= 1)
  {
    v4 = 0;
    do
    {
      v5 = *(_QWORD *)(*(_QWORD *)(v1 + 32) + 8 * v4);
      this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 32))(v5);
      ++v4;
    }
    while (v4 < *(int *)(v1 + 40));
  }
  *(_DWORD *)(v1 + 40) = 0;
  if (*(int *)(v1 + 72) >= 1)
  {
    v6 = 0;
    do
    {
      v7 = *(_QWORD *)(*(_QWORD *)(v1 + 64) + 8 * v6);
      this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 32))(v7);
      ++v6;
    }
    while (v6 < *(int *)(v1 + 72));
  }
  *(_DWORD *)(v1 + 72) = 0;
  *(_DWORD *)(v1 + 92) = 0;
  return this;
}

uint64_t awd::profile::ComponentConfiguration::MergePartialFromCodedStream(awd::profile::ComponentConfiguration *this, wireless_diagnostics::google::protobuf::io::CodedInputStream *a2)
{
  wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *v4;
  wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *v5;
  wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *v6;
  unsigned int *v7;
  uint64_t v8;
  char *v9;
  uint64_t TagFallback;
  int v11;
  unsigned __int8 *v12;
  unint64_t v13;
  unsigned int v14;
  unsigned __int8 *v15;
  char *v16;
  unint64_t v17;
  uint64_t result;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  int v26;
  int v27;
  int v28;
  BOOL v29;
  int v30;
  int v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  int v39;
  int v40;
  int v41;
  int v42;
  int v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  awd::profile::ConfigurationParameter *v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  int v51;
  int v52;
  int v53;
  int v54;
  unsigned __int8 *v55;
  unsigned int v56;

  v4 = (awd::profile::ComponentConfiguration *)((char *)this + 8);
  v5 = (awd::profile::ComponentConfiguration *)((char *)this + 32);
  v6 = (awd::profile::ComponentConfiguration *)((char *)this + 64);
  v7 = (unsigned int *)((char *)this + 60);
  v8 = MEMORY[0x1E0DE8338];
LABEL_2:
  while (2)
  {
    v9 = (char *)*((_QWORD *)a2 + 1);
    if ((unint64_t)v9 >= *((_QWORD *)a2 + 2) || *v9 < 0)
    {
      TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(a2);
      *((_DWORD *)a2 + 8) = TagFallback;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    else
    {
      TagFallback = *v9;
      *((_DWORD *)a2 + 8) = TagFallback;
      *((_QWORD *)a2 + 1) = v9 + 1;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    switch(TagFallback >> 3)
    {
      case 1u:
        v11 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_22;
        v56 = 0;
        v12 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
        v13 = *((_QWORD *)a2 + 2);
        if ((unint64_t)v12 >= v13 || (char)*v12 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v56);
          if (!(_DWORD)result)
            return result;
          v14 = v56;
          v15 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
          v13 = *((_QWORD *)a2 + 2);
        }
        else
        {
          v14 = *v12;
          v15 = v12 + 1;
          *((_QWORD *)a2 + 1) = v15;
        }
        *((_DWORD *)this + 14) = v14;
        *((_DWORD *)this + 23) |= 1u;
        if ((unint64_t)v15 >= v13 || *v15 != 18)
          continue;
        goto LABEL_29;
      case 2u:
        v11 = TagFallback & 7;
        if (v11 != 2)
          goto LABEL_22;
LABEL_30:
        v19 = *((_DWORD *)this + 5);
        v20 = *((int *)this + 4);
        if ((int)v20 >= v19)
        {
          if (v19 == *((_DWORD *)this + 6))
          {
            wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve(v4);
            v19 = *((_DWORD *)this + 5);
          }
          *((_DWORD *)this + 5) = v19 + 1;
          v22 = operator new();
          *(_QWORD *)v22 = &off_1E886B700;
          *(_DWORD *)(v22 + 112) = 0;
          *(_BYTE *)(v22 + 116) = 0;
          *(_OWORD *)(v22 + 8) = 0u;
          *(_OWORD *)(v22 + 24) = 0u;
          *(_OWORD *)(v22 + 40) = 0u;
          *(_DWORD *)(v22 + 56) = 0;
          *(_OWORD *)(v22 + 64) = 0u;
          *(_OWORD *)(v22 + 80) = 0u;
          *(_OWORD *)(v22 + 92) = 0u;
          *(_QWORD *)(v22 + 120) = v8;
          *(_QWORD *)(v22 + 128) = 0;
          v23 = *((_QWORD *)this + 1);
          v24 = *((int *)this + 4);
          *((_DWORD *)this + 4) = v24 + 1;
          *(_QWORD *)(v23 + 8 * v24) = v22;
        }
        else
        {
          v21 = *((_QWORD *)this + 1);
          *((_DWORD *)this + 4) = v20 + 1;
          v22 = *(_QWORD *)(v21 + 8 * v20);
        }
        v56 = 0;
        v25 = (char *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v25 >= *((_QWORD *)a2 + 2) || *v25 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v56))return 0;
        }
        else
        {
          v56 = *v25;
          *((_QWORD *)a2 + 1) = v25 + 1;
        }
        v26 = *((_DWORD *)a2 + 14);
        v27 = *((_DWORD *)a2 + 15);
        *((_DWORD *)a2 + 14) = v26 + 1;
        if (v26 >= v27)
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(a2);
        if (!awd::profile::Profile::MergePartialFromCodedStream((unsigned int *)v22, a2)
          || !*((_BYTE *)a2 + 36))
        {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(a2);
        v28 = *((_DWORD *)a2 + 14);
        v29 = __OFSUB__(v28, 1);
        v30 = v28 - 1;
        if (v30 < 0 == v29)
          *((_DWORD *)a2 + 14) = v30;
        v15 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v15 >= *((_QWORD *)a2 + 2))
          continue;
        v31 = *v15;
        if (v31 == 18)
        {
LABEL_29:
          *((_QWORD *)a2 + 1) = v15 + 1;
          goto LABEL_30;
        }
        if (v31 != 26)
          continue;
        do
        {
          *((_QWORD *)a2 + 1) = v15 + 1;
LABEL_48:
          v32 = *((_DWORD *)this + 11);
          v33 = *((int *)this + 10);
          if ((int)v33 >= v32)
          {
            if (v32 == *((_DWORD *)this + 12))
            {
              wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve(v5);
              v32 = *((_DWORD *)this + 11);
            }
            *((_DWORD *)this + 11) = v32 + 1;
            v35 = operator new();
            *(_QWORD *)v35 = &off_1E886B160;
            *(_OWORD *)(v35 + 8) = 0u;
            *(_OWORD *)(v35 + 24) = 0u;
            *(_DWORD *)(v35 + 40) = 0;
            *(_QWORD *)(v35 + 48) = v8;
            *(_QWORD *)(v35 + 56) = 0;
            v36 = *((_QWORD *)this + 4);
            v37 = *((int *)this + 10);
            *((_DWORD *)this + 10) = v37 + 1;
            *(_QWORD *)(v36 + 8 * v37) = v35;
          }
          else
          {
            v34 = *((_QWORD *)this + 4);
            *((_DWORD *)this + 10) = v33 + 1;
            v35 = *(_QWORD *)(v34 + 8 * v33);
          }
          v56 = 0;
          v38 = (char *)*((_QWORD *)a2 + 1);
          if ((unint64_t)v38 >= *((_QWORD *)a2 + 2) || *v38 < 0)
          {
            if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v56))return 0;
          }
          else
          {
            v56 = *v38;
            *((_QWORD *)a2 + 1) = v38 + 1;
          }
          v39 = *((_DWORD *)a2 + 14);
          v40 = *((_DWORD *)a2 + 15);
          *((_DWORD *)a2 + 14) = v39 + 1;
          if (v39 >= v40)
            return 0;
          wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(a2);
          if (!awd::profile::TriggerSource::MergePartialFromCodedStream((awd::profile::TriggerSource *)v35, a2)|| !*((_BYTE *)a2 + 36))
          {
            return 0;
          }
          wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(a2);
          v41 = *((_DWORD *)a2 + 14);
          v29 = __OFSUB__(v41, 1);
          v42 = v41 - 1;
          if (v42 < 0 == v29)
            *((_DWORD *)a2 + 14) = v42;
          v15 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
          if ((unint64_t)v15 >= *((_QWORD *)a2 + 2))
            goto LABEL_2;
          v43 = *v15;
        }
        while (v43 == 26);
        if (v43 != 34)
          continue;
        do
        {
          *((_QWORD *)a2 + 1) = v15 + 1;
LABEL_66:
          v44 = *((_DWORD *)this + 19);
          v45 = *((int *)this + 18);
          if ((int)v45 >= v44)
          {
            if (v44 == *((_DWORD *)this + 20))
            {
              wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve(v6);
              v44 = *((_DWORD *)this + 19);
            }
            *((_DWORD *)this + 19) = v44 + 1;
            v47 = (awd::profile::ConfigurationParameter *)operator new();
            *(_QWORD *)v47 = &off_1E886B598;
            *((_QWORD *)v47 + 1) = v8;
            *((_QWORD *)v47 + 2) = 0;
            *((_QWORD *)v47 + 3) = 0;
            v48 = *((_QWORD *)this + 8);
            v49 = *((int *)this + 18);
            *((_DWORD *)this + 18) = v49 + 1;
            *(_QWORD *)(v48 + 8 * v49) = v47;
          }
          else
          {
            v46 = *((_QWORD *)this + 8);
            *((_DWORD *)this + 18) = v45 + 1;
            v47 = *(awd::profile::ConfigurationParameter **)(v46 + 8 * v45);
          }
          v56 = 0;
          v50 = (char *)*((_QWORD *)a2 + 1);
          if ((unint64_t)v50 >= *((_QWORD *)a2 + 2) || *v50 < 0)
          {
            if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v56))return 0;
          }
          else
          {
            v56 = *v50;
            *((_QWORD *)a2 + 1) = v50 + 1;
          }
          v51 = *((_DWORD *)a2 + 14);
          v52 = *((_DWORD *)a2 + 15);
          *((_DWORD *)a2 + 14) = v51 + 1;
          if (v51 >= v52)
            return 0;
          wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(a2);
          if (!awd::profile::ConfigurationParameter::MergePartialFromCodedStream(v47, a2)
            || !*((_BYTE *)a2 + 36))
          {
            return 0;
          }
          wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(a2);
          v53 = *((_DWORD *)a2 + 14);
          v29 = __OFSUB__(v53, 1);
          v54 = v53 - 1;
          if (v54 < 0 == v29)
            *((_DWORD *)a2 + 14) = v54;
          v15 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
          v17 = *((_QWORD *)a2 + 2);
        }
        while ((unint64_t)v15 < v17 && *v15 == 34);
        if ((int)v17 - (int)v15 < 2 || *v15 != 160 || v15[1] != 1)
          continue;
        v16 = (char *)(v15 + 2);
        *((_QWORD *)a2 + 1) = v16;
        goto LABEL_86;
      case 3u:
        v11 = TagFallback & 7;
        if (v11 == 2)
          goto LABEL_48;
        goto LABEL_22;
      case 4u:
        v11 = TagFallback & 7;
        if (v11 == 2)
          goto LABEL_66;
        goto LABEL_22;
      default:
        if (TagFallback >> 3 == 20)
        {
          v11 = TagFallback & 7;
          if ((TagFallback & 7) != 0)
            goto LABEL_22;
          v16 = (char *)*((_QWORD *)a2 + 1);
          v17 = *((_QWORD *)a2 + 2);
LABEL_86:
          if ((unint64_t)v16 >= v17 || *v16 < 0)
          {
            result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v7);
            if (!(_DWORD)result)
              return result;
            v55 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
            v17 = *((_QWORD *)a2 + 2);
          }
          else
          {
            *v7 = *v16;
            v55 = (unsigned __int8 *)(v16 + 1);
            *((_QWORD *)a2 + 1) = v55;
          }
          *((_DWORD *)this + 23) |= 0x10u;
          if (v55 == (unsigned __int8 *)v17 && (*((_DWORD *)a2 + 11) || *((_DWORD *)a2 + 6) == *((_DWORD *)a2 + 10)))
          {
            *((_DWORD *)a2 + 8) = 0;
            result = 1;
            *((_BYTE *)a2 + 36) = 1;
            return result;
          }
          continue;
        }
        v11 = TagFallback & 7;
LABEL_22:
        if (v11 != 4)
        {
          if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(a2, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback) & 1) == 0)return 0;
          continue;
        }
        return 1;
    }
  }
}

uint64_t awd::profile::ComponentConfiguration::SerializeWithCachedSizes(uint64_t this, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v5 = this;
  if ((*(_BYTE *)(this + 92) & 1) != 0)
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(unsigned int *)(this + 56), (uint64_t)a2, a4);
  if (*(int *)(v5 + 16) >= 1)
  {
    v6 = 0;
    do
      this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, *(_QWORD *)(*(_QWORD *)(v5 + 8) + 8 * v6++), a2, a4);
    while (v6 < *(int *)(v5 + 16));
  }
  if (*(int *)(v5 + 40) >= 1)
  {
    v7 = 0;
    do
      this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, *(_QWORD *)(*(_QWORD *)(v5 + 32) + 8 * v7++), a2, a4);
    while (v7 < *(int *)(v5 + 40));
  }
  if (*(int *)(v5 + 72) >= 1)
  {
    v8 = 0;
    do
      this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4, *(_QWORD *)(*(_QWORD *)(v5 + 64) + 8 * v8++), a2, a4);
    while (v8 < *(int *)(v5 + 72));
  }
  if ((*(_BYTE *)(v5 + 92) & 0x10) != 0)
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x14, *(unsigned int *)(v5 + 60), (uint64_t)a2, a4);
  return this;
}

uint64_t awd::profile::ComponentConfiguration::ByteSize(awd::profile::ComponentConfiguration *this)
{
  char v2;
  int v3;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v4;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v5;
  int v6;
  int v7;
  int v8;
  uint64_t v9;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v10;
  int v11;
  int v12;
  int v13;
  int v14;
  uint64_t v15;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v16;
  int v17;
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v22;
  int v23;
  int v24;

  v2 = *((_BYTE *)this + 92);
  if (!v2)
  {
    v3 = 0;
    goto LABEL_17;
  }
  if ((*((_BYTE *)this + 92) & 1) != 0)
  {
    v4 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 14);
    if ((v4 & 0x80000000) != 0)
    {
      v3 = 11;
      if ((v2 & 0x10) == 0)
        goto LABEL_17;
    }
    else if (v4 >= 0x80)
    {
      v3 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v4) + 1;
      if ((*((_DWORD *)this + 23) & 0x10) == 0)
        goto LABEL_17;
    }
    else
    {
      v3 = 2;
      if ((v2 & 0x10) == 0)
        goto LABEL_17;
    }
  }
  else
  {
    v3 = 0;
    if ((*((_BYTE *)this + 92) & 0x10) == 0)
      goto LABEL_17;
  }
  v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 15);
  if (v5 >= 0x80)
    v6 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v5) + 2;
  else
    v6 = 3;
  v3 += v6;
LABEL_17:
  v7 = *((_DWORD *)this + 4);
  v8 = v7 + v3;
  if (v7 >= 1)
  {
    v9 = 0;
    do
    {
      v10 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)awd::profile::Profile::ByteSize(*(awd::profile::Profile **)(*((_QWORD *)this + 1) + 8 * v9));
      v11 = (int)v10;
      if (v10 >= 0x80)
        v12 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v10);
      else
        v12 = 1;
      v8 += v11 + v12;
      ++v9;
    }
    while (v9 < *((int *)this + 4));
  }
  v13 = *((_DWORD *)this + 10);
  v14 = v13 + v8;
  if (v13 >= 1)
  {
    v15 = 0;
    do
    {
      v16 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)awd::profile::TriggerSource::ByteSize(*(awd::profile::TriggerSource **)(*((_QWORD *)this + 4) + 8 * v15));
      v17 = (int)v16;
      if (v16 >= 0x80)
        v18 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v16);
      else
        v18 = 1;
      v14 += v17 + v18;
      ++v15;
    }
    while (v15 < *((int *)this + 10));
  }
  v19 = *((_DWORD *)this + 18);
  v20 = (v19 + v14);
  if (v19 >= 1)
  {
    v21 = 0;
    do
    {
      v22 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)awd::profile::ConfigurationParameter::ByteSize(*(awd::profile::ConfigurationParameter **)(*((_QWORD *)this + 8) + 8 * v21));
      v23 = (int)v22;
      if (v22 >= 0x80)
        v24 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v22);
      else
        v24 = 1;
      v20 = (v23 + v20 + v24);
      ++v21;
    }
    while (v21 < *((int *)this + 18));
  }
  *((_DWORD *)this + 22) = v20;
  return v20;
}

void awd::profile::ComponentConfiguration::CopyFrom(awd::profile::ComponentConfiguration *this, const awd::profile::ComponentConfiguration *a2)
{
  if (a2 != this)
  {
    (*(void (**)(awd::profile::ComponentConfiguration *))(*(_QWORD *)this + 32))(this);
    awd::profile::ComponentConfiguration::MergeFrom(this, a2);
  }
}

uint64_t awd::profile::ComponentConfiguration::IsInitialized(awd::profile::ComponentConfiguration *this)
{
  return 1;
}

awd::profile::ComponentConfiguration *awd::profile::ComponentConfiguration::Swap(awd::profile::ComponentConfiguration *this, awd::profile::ComponentConfiguration *a2)
{
  awd::profile::ComponentConfiguration *v3;
  int v4;
  int v5;
  int v6;
  int v7;

  if (a2 != this)
  {
    v3 = this;
    v4 = *((_DWORD *)this + 14);
    *((_DWORD *)this + 14) = *((_DWORD *)a2 + 14);
    *((_DWORD *)a2 + 14) = v4;
    wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Swap();
    wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Swap();
    this = (awd::profile::ComponentConfiguration *)wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Swap();
    v5 = *((_DWORD *)v3 + 15);
    *((_DWORD *)v3 + 15) = *((_DWORD *)a2 + 15);
    *((_DWORD *)a2 + 15) = v5;
    v6 = *((_DWORD *)v3 + 23);
    *((_DWORD *)v3 + 23) = *((_DWORD *)a2 + 23);
    *((_DWORD *)a2 + 23) = v6;
    v7 = *((_DWORD *)v3 + 22);
    *((_DWORD *)v3 + 22) = *((_DWORD *)a2 + 22);
    *((_DWORD *)a2 + 22) = v7;
  }
  return this;
}

_QWORD *awd::profile::ComponentConfiguration::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return sub_1CC59E69C(a1, "awd.profile.ComponentConfiguration");
}

uint64_t awd::profile::TimerSpec::SharedCtor(uint64_t this)
{
  *(_QWORD *)(this + 8) = 0;
  *(_QWORD *)(this + 16) = 0;
  *(_DWORD *)(this + 24) = 0;
  return this;
}

awd::profile::TimerSpec *awd::profile::TimerSpec::TimerSpec(awd::profile::TimerSpec *this, const awd::profile::TimerSpec *a2)
{
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *(_QWORD *)this = &off_1E886B7F0;
  *((_DWORD *)this + 6) = 0;
  awd::profile::TimerSpec::MergeFrom(this, a2);
  return this;
}

void sub_1CC5BAFE4(_Unwind_Exception *a1)
{
  wireless_diagnostics::google::protobuf::MessageLite *v1;

  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(v1);
  _Unwind_Resume(a1);
}

void awd::profile::TimerSpec::MergeFrom(awd::profile::TimerSpec *this, const awd::profile::TimerSpec *a2)
{
  int v4;
  uint64_t v5;
  int v6;
  _BYTE v7[48];

  if (a2 == this)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v7);
  }
  LOBYTE(v4) = *((_BYTE *)a2 + 24);
  if ((_BYTE)v4)
  {
    if ((*((_BYTE *)a2 + 24) & 1) != 0)
    {
      v5 = *((_QWORD *)a2 + 1);
      *((_DWORD *)this + 6) |= 1u;
      *((_QWORD *)this + 1) = v5;
      v4 = *((_DWORD *)a2 + 6);
    }
    if ((v4 & 2) != 0)
    {
      v6 = *((_DWORD *)a2 + 4);
      *((_DWORD *)this + 6) |= 2u;
      *((_DWORD *)this + 4) = v6;
    }
  }
}

void sub_1CC5BB0A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void awd::profile::TimerSpec::~TimerSpec(awd::profile::TimerSpec *this)
{
  *(_QWORD *)this = &off_1E886B7F0;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

{
  *(_QWORD *)this = &off_1E886B7F0;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

{
  *(_QWORD *)this = &off_1E886B7F0;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
  JUMPOUT(0x1D17AD544);
}

uint64_t awd::profile::TimerSpec::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 20) = a2;
  return this;
}

uint64_t awd::profile::TimerSpec::default_instance(awd::profile::TimerSpec *this, uint64_t a2, uint64_t a3, const char *a4)
{
  uint64_t result;

  result = awd::profile::TimerSpec::default_instance_;
  if (!awd::profile::TimerSpec::default_instance_)
  {
    awd::profile::protobuf_AddDesc_AwdProfile_2eproto(0, a2, a3, a4);
    return awd::profile::TimerSpec::default_instance_;
  }
  return result;
}

uint64_t awd::profile::TimerSpec::New(awd::profile::TimerSpec *this)
{
  uint64_t result;

  result = operator new();
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)result = &off_1E886B7F0;
  *(_DWORD *)(result + 24) = 0;
  return result;
}

uint64_t awd::profile::TimerSpec::Clear(uint64_t this)
{
  if (*(_BYTE *)(this + 24))
  {
    *(_QWORD *)(this + 8) = 0;
    *(_DWORD *)(this + 16) = 0;
  }
  *(_DWORD *)(this + 24) = 0;
  return this;
}

uint64_t awd::profile::TimerSpec::MergePartialFromCodedStream(awd::profile::TimerSpec *this, wireless_diagnostics::google::protobuf::io::CodedInputStream *a2)
{
  unint64_t *v4;
  unsigned int *v5;
  char *v6;
  uint64_t TagFallback;
  int v8;
  unint64_t v9;
  char *v10;
  char *v11;
  _BYTE *v12;
  unsigned __int8 *v13;
  uint64_t result;

  v4 = (unint64_t *)((char *)this + 8);
  v5 = (unsigned int *)((char *)this + 16);
  while (1)
  {
    while (1)
    {
      v6 = (char *)*((_QWORD *)a2 + 1);
      if ((unint64_t)v6 >= *((_QWORD *)a2 + 2) || *v6 < 0)
      {
        TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(a2);
        *((_DWORD *)a2 + 8) = TagFallback;
        if (!(_DWORD)TagFallback)
          return 1;
      }
      else
      {
        TagFallback = *v6;
        *((_DWORD *)a2 + 8) = TagFallback;
        *((_QWORD *)a2 + 1) = v6 + 1;
        if (!(_DWORD)TagFallback)
          return 1;
      }
      if (TagFallback >> 3 != 1)
        break;
      v8 = TagFallback & 7;
      if ((TagFallback & 7) != 0)
        goto LABEL_16;
      v11 = (char *)*((_QWORD *)a2 + 1);
      v9 = *((_QWORD *)a2 + 2);
      if ((unint64_t)v11 >= v9 || *v11 < 0)
      {
        result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint64Fallback(a2, v4);
        if (!(_DWORD)result)
          return result;
        v12 = (_BYTE *)*((_QWORD *)a2 + 1);
        v9 = *((_QWORD *)a2 + 2);
      }
      else
      {
        *v4 = *v11;
        v12 = v11 + 1;
        *((_QWORD *)a2 + 1) = v12;
      }
      *((_DWORD *)this + 6) |= 1u;
      if ((unint64_t)v12 < v9 && *v12 == 16)
      {
        v10 = v12 + 1;
        *((_QWORD *)a2 + 1) = v10;
LABEL_24:
        if ((unint64_t)v10 >= v9 || *v10 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v5);
          if (!(_DWORD)result)
            return result;
          v13 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
          v9 = *((_QWORD *)a2 + 2);
        }
        else
        {
          *v5 = *v10;
          v13 = (unsigned __int8 *)(v10 + 1);
          *((_QWORD *)a2 + 1) = v13;
        }
        *((_DWORD *)this + 6) |= 2u;
        if (v13 == (unsigned __int8 *)v9 && (*((_DWORD *)a2 + 11) || *((_DWORD *)a2 + 6) == *((_DWORD *)a2 + 10)))
        {
          *((_DWORD *)a2 + 8) = 0;
          result = 1;
          *((_BYTE *)a2 + 36) = 1;
          return result;
        }
      }
    }
    if (TagFallback >> 3 == 2)
    {
      v8 = TagFallback & 7;
      if ((TagFallback & 7) == 0)
      {
        v10 = (char *)*((_QWORD *)a2 + 1);
        v9 = *((_QWORD *)a2 + 2);
        goto LABEL_24;
      }
    }
    else
    {
      v8 = TagFallback & 7;
    }
LABEL_16:
    if (v8 == 4)
      return 1;
    if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(a2, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback) & 1) == 0)return 0;
  }
}

uint64_t awd::profile::TimerSpec::SerializeWithCachedSizes(uint64_t this, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  int v6;

  v5 = this;
  v6 = *(_DWORD *)(this + 24);
  if ((v6 & 1) != 0)
  {
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt64((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(_QWORD *)(this + 8), (uint64_t)a2, a4);
    v6 = *(_DWORD *)(v5 + 24);
  }
  if ((v6 & 2) != 0)
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, *(unsigned int *)(v5 + 16), (uint64_t)a2, a4);
  return this;
}

uint64_t awd::profile::TimerSpec::ByteSize(wireless_diagnostics::google::protobuf::io::CodedOutputStream **this)
{
  uint64_t v2;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v3;
  int v4;

  if (*((_BYTE *)this + 24))
  {
    if (((_BYTE)this[3] & 1) != 0)
    {
      v2 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize64(this[1]) + 1;
      if (((_DWORD)this[3] & 2) == 0)
        goto LABEL_11;
    }
    else
    {
      v2 = 0;
      if (((_BYTE)this[3] & 2) == 0)
        goto LABEL_11;
    }
    v3 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 4);
    if (v3 >= 0x80)
      v4 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v3) + 1;
    else
      v4 = 2;
    v2 = (v4 + v2);
  }
  else
  {
    v2 = 0;
  }
LABEL_11:
  *((_DWORD *)this + 5) = v2;
  return v2;
}

void awd::profile::TimerSpec::CopyFrom(awd::profile::TimerSpec *this, const awd::profile::TimerSpec *a2)
{
  if (a2 != this)
  {
    (*(void (**)(awd::profile::TimerSpec *))(*(_QWORD *)this + 32))(this);
    awd::profile::TimerSpec::MergeFrom(this, a2);
  }
}

uint64_t awd::profile::TimerSpec::IsInitialized(awd::profile::TimerSpec *this)
{
  return 1;
}

uint64_t awd::profile::TimerSpec::Swap(uint64_t this, awd::profile::TimerSpec *a2)
{
  uint64_t v2;

  if (a2 != (awd::profile::TimerSpec *)this)
  {
    v2 = *(_QWORD *)(this + 8);
    *(_QWORD *)(this + 8) = *((_QWORD *)a2 + 1);
    *((_QWORD *)a2 + 1) = v2;
    LODWORD(v2) = *(_DWORD *)(this + 16);
    *(_DWORD *)(this + 16) = *((_DWORD *)a2 + 4);
    *((_DWORD *)a2 + 4) = v2;
    LODWORD(v2) = *(_DWORD *)(this + 24);
    *(_DWORD *)(this + 24) = *((_DWORD *)a2 + 6);
    *((_DWORD *)a2 + 6) = v2;
    LODWORD(v2) = *(_DWORD *)(this + 20);
    *(_DWORD *)(this + 20) = *((_DWORD *)a2 + 5);
    *((_DWORD *)a2 + 5) = v2;
  }
  return this;
}

_QWORD *awd::profile::TimerSpec::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return sub_1CC59E69C(a1, "awd.profile.TimerSpec");
}

double awd::profile::TypeVariant::SharedCtor(awd::profile::TypeVariant *this)
{
  double result;
  uint64_t v2;

  *((_DWORD *)this + 10) = 0;
  result = 0.0;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 8) = 0u;
  v2 = MEMORY[0x1E0DE8338];
  *((_BYTE *)this + 44) = 0;
  *((_QWORD *)this + 6) = v2;
  *((_QWORD *)this + 7) = v2;
  *((_QWORD *)this + 8) = 0;
  *((_DWORD *)this + 18) = 0;
  return result;
}

awd::profile::TypeVariant *awd::profile::TypeVariant::TypeVariant(awd::profile::TypeVariant *this, const awd::profile::TypeVariant *a2)
{
  uint64_t v3;

  *(_QWORD *)this = &off_1E886AFF8;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *((_DWORD *)this + 10) = 0;
  v3 = MEMORY[0x1E0DE8338];
  *((_BYTE *)this + 44) = 0;
  *((_QWORD *)this + 6) = v3;
  *((_QWORD *)this + 7) = v3;
  *((_QWORD *)this + 8) = 0;
  *((_DWORD *)this + 18) = 0;
  awd::profile::TypeVariant::MergeFrom(this, a2);
  return this;
}

void sub_1CC5BB568(_Unwind_Exception *a1)
{
  wireless_diagnostics::google::protobuf::MessageLite *v1;

  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(v1);
  _Unwind_Resume(a1);
}

void awd::profile::TypeVariant::~TypeVariant(awd::profile::TypeVariant *this)
{
  *(_QWORD *)this = &off_1E886AFF8;
  awd::profile::TypeVariant::SharedDtor((uint64_t)this);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

{
  *(_QWORD *)this = &off_1E886AFF8;
  awd::profile::TypeVariant::SharedDtor((uint64_t)this);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

{
  *(_QWORD *)this = &off_1E886AFF8;
  awd::profile::TypeVariant::SharedDtor((uint64_t)this);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
  JUMPOUT(0x1D17AD544);
}

uint64_t awd::profile::TypeVariant::SharedDtor(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  v1 = this;
  v2 = *(_QWORD *)(this + 48);
  v3 = MEMORY[0x1E0DE8338];
  if (v2 != MEMORY[0x1E0DE8338] && v2 != 0)
  {
    if (*(char *)(v2 + 23) < 0)
      operator delete(*(void **)v2);
    this = MEMORY[0x1D17AD544](v2, 0x1012C40EC159624);
  }
  v5 = *(_QWORD *)(v1 + 56);
  if (v5 != v3 && v5 != 0)
  {
    if (*(char *)(v5 + 23) < 0)
      operator delete(*(void **)v5);
    JUMPOUT(0x1D17AD544);
  }
  return this;
}

uint64_t awd::profile::TypeVariant::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 68) = a2;
  return this;
}

double awd::profile::TypeVariant::New(awd::profile::TypeVariant *this)
{
  uint64_t v1;
  double result;
  uint64_t v3;

  v1 = operator new();
  *(_QWORD *)v1 = &off_1E886AFF8;
  result = 0.0;
  *(_OWORD *)(v1 + 8) = 0u;
  *(_OWORD *)(v1 + 24) = 0u;
  *(_DWORD *)(v1 + 40) = 0;
  v3 = MEMORY[0x1E0DE8338];
  *(_BYTE *)(v1 + 44) = 0;
  *(_QWORD *)(v1 + 48) = v3;
  *(_QWORD *)(v1 + 56) = v3;
  *(_QWORD *)(v1 + 64) = 0;
  *(_DWORD *)(v1 + 72) = 0;
  return result;
}

uint64_t awd::profile::TypeVariant::MergePartialFromCodedStream(awd::profile::TypeVariant *this, wireless_diagnostics::google::protobuf::io::CodedInputStream *a2)
{
  unsigned int *v4;
  unint64_t *v5;
  uint64_t v6;
  char *v7;
  uint64_t TagFallback;
  int v9;
  unint64_t v10;
  char *v11;
  unsigned int v12;
  _BYTE *v13;
  char *v14;
  char *v15;
  char *v16;
  int v17;
  unint64_t v18;
  char *v19;
  int v20;
  unint64_t v21;
  char *v22;
  uint64_t result;
  uint64_t v24;
  _BYTE *v25;
  _BYTE *v26;
  _BYTE *v27;
  _BYTE *v28;
  _BYTE *v29;
  _QWORD *v30;
  _BYTE *v31;
  unsigned int v32;
  _BYTE *v33;
  _QWORD *v34;
  _BYTE *v35;
  int v36;
  unsigned int v37[2];

  v4 = (unsigned int *)((char *)this + 20);
  v5 = (unint64_t *)((char *)this + 24);
  v6 = MEMORY[0x1E0DE8338];
  while (2)
  {
    v7 = (char *)*((_QWORD *)a2 + 1);
    if ((unint64_t)v7 >= *((_QWORD *)a2 + 2) || *v7 < 0)
    {
      TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(a2);
      *((_DWORD *)a2 + 8) = TagFallback;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    else
    {
      TagFallback = *v7;
      *((_DWORD *)a2 + 8) = TagFallback;
      *((_QWORD *)a2 + 1) = v7 + 1;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    switch(TagFallback >> 3)
    {
      case 1u:
        v9 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_30;
        v37[0] = 0;
        v11 = (char *)*((_QWORD *)a2 + 1);
        v10 = *((_QWORD *)a2 + 2);
        if ((unint64_t)v11 >= v10 || *v11 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v37);
          if (!(_DWORD)result)
            return result;
          v12 = v37[0];
          v13 = (_BYTE *)*((_QWORD *)a2 + 1);
          v10 = *((_QWORD *)a2 + 2);
        }
        else
        {
          v12 = *v11;
          v13 = v11 + 1;
          *((_QWORD *)a2 + 1) = v13;
        }
        *((_DWORD *)this + 4) = v12;
        *((_DWORD *)this + 18) |= 1u;
        if ((unint64_t)v13 < v10 && *v13 == 16)
        {
          v14 = v13 + 1;
          *((_QWORD *)a2 + 1) = v14;
          goto LABEL_39;
        }
        continue;
      case 2u:
        v9 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_30;
        v14 = (char *)*((_QWORD *)a2 + 1);
        v10 = *((_QWORD *)a2 + 2);
LABEL_39:
        *(_QWORD *)v37 = 0;
        if ((unint64_t)v14 >= v10 || *v14 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint64Fallback(a2, (unint64_t *)v37);
          if (!(_DWORD)result)
            return result;
          v24 = *(_QWORD *)v37;
          v25 = (_BYTE *)*((_QWORD *)a2 + 1);
          v10 = *((_QWORD *)a2 + 2);
        }
        else
        {
          v24 = *v14;
          v25 = v14 + 1;
          *((_QWORD *)a2 + 1) = v25;
        }
        *((_QWORD *)this + 1) = v24;
        *((_DWORD *)this + 18) |= 2u;
        if ((unint64_t)v25 >= v10 || *v25 != 24)
          continue;
        v15 = v25 + 1;
        *((_QWORD *)a2 + 1) = v15;
LABEL_47:
        if ((unint64_t)v15 >= v10 || *v15 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v4);
          if (!(_DWORD)result)
            return result;
          v26 = (_BYTE *)*((_QWORD *)a2 + 1);
          v10 = *((_QWORD *)a2 + 2);
        }
        else
        {
          *v4 = *v15;
          v26 = v15 + 1;
          *((_QWORD *)a2 + 1) = v26;
        }
        *((_DWORD *)this + 18) |= 4u;
        if ((unint64_t)v26 >= v10 || *v26 != 32)
          continue;
        v16 = v26 + 1;
        *((_QWORD *)a2 + 1) = v16;
LABEL_55:
        if ((unint64_t)v16 >= v10 || *v16 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint64Fallback(a2, v5);
          if (!(_DWORD)result)
            return result;
          v27 = (_BYTE *)*((_QWORD *)a2 + 1);
          v10 = *((_QWORD *)a2 + 2);
        }
        else
        {
          *v5 = *v16;
          v27 = v16 + 1;
          *((_QWORD *)a2 + 1) = v27;
        }
        *((_DWORD *)this + 18) |= 8u;
        if ((unint64_t)v27 >= v10 || *v27 != 45)
          continue;
        *((_QWORD *)a2 + 1) = v27 + 1;
LABEL_63:
        v37[0] = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback(a2, v37) & 1) == 0)
          return 0;
        *((_DWORD *)this + 10) = v37[0];
        *((_DWORD *)this + 18) |= 0x10u;
        v28 = (_BYTE *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v28 >= *((_QWORD *)a2 + 2) || *v28 != 49)
          continue;
        *((_QWORD *)a2 + 1) = v28 + 1;
LABEL_67:
        *(_QWORD *)v37 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(a2, (unint64_t *)v37) & 1) != 0)
        {
          *((_QWORD *)this + 4) = *(_QWORD *)v37;
          v17 = *((_DWORD *)this + 18) | 0x20;
          *((_DWORD *)this + 18) = v17;
          v29 = (_BYTE *)*((_QWORD *)a2 + 1);
          if ((unint64_t)v29 < *((_QWORD *)a2 + 2) && *v29 == 58)
          {
            *((_QWORD *)a2 + 1) = v29 + 1;
LABEL_71:
            *((_DWORD *)this + 18) = v17 | 0x40;
            if (*((_QWORD *)this + 6) == v6)
            {
              v30 = (_QWORD *)operator new();
              v30[1] = 0;
              v30[2] = 0;
              *v30 = 0;
              *((_QWORD *)this + 6) = v30;
            }
            result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString();
            if (!(_DWORD)result)
              return result;
            v31 = (_BYTE *)*((_QWORD *)a2 + 1);
            v18 = *((_QWORD *)a2 + 2);
            if ((unint64_t)v31 < v18 && *v31 == 64)
            {
              v19 = v31 + 1;
              *((_QWORD *)a2 + 1) = v19;
LABEL_77:
              v37[0] = 0;
              if ((unint64_t)v19 >= v18 || *v19 < 0)
              {
                result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v37);
                if (!(_DWORD)result)
                  return result;
                v32 = v37[0];
                v33 = (_BYTE *)*((_QWORD *)a2 + 1);
                v18 = *((_QWORD *)a2 + 2);
              }
              else
              {
                v32 = *v19;
                v33 = v19 + 1;
                *((_QWORD *)a2 + 1) = v33;
              }
              *((_BYTE *)this + 44) = v32 != 0;
              v20 = *((_DWORD *)this + 18) | 0x80;
              *((_DWORD *)this + 18) = v20;
              if ((unint64_t)v33 < v18 && *v33 == 74)
              {
                *((_QWORD *)a2 + 1) = v33 + 1;
LABEL_85:
                *((_DWORD *)this + 18) = v20 | 0x100;
                if (*((_QWORD *)this + 7) == v6)
                {
                  v34 = (_QWORD *)operator new();
                  v34[1] = 0;
                  v34[2] = 0;
                  *v34 = 0;
                  *((_QWORD *)this + 7) = v34;
                }
                result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadBytes();
                if (!(_DWORD)result)
                  return result;
                v35 = (_BYTE *)*((_QWORD *)a2 + 1);
                v21 = *((_QWORD *)a2 + 2);
                if ((unint64_t)v35 < v21 && *v35 == 80)
                {
                  v22 = v35 + 1;
                  *((_QWORD *)a2 + 1) = v22;
LABEL_91:
                  v37[0] = 0;
                  if ((unint64_t)v22 >= v21 || (v36 = *v22, v36 < 0))
                  {
                    result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v37);
                    if (!(_DWORD)result)
                      return result;
                    if (v37[0])
                      goto LABEL_95;
                  }
                  else
                  {
                    *((_QWORD *)a2 + 1) = v22 + 1;
                    if ((_BYTE)v36)
                      goto LABEL_95;
                  }
                  *((_DWORD *)this + 18) |= 0x200u;
                  *((_DWORD *)this + 16) = 0;
LABEL_95:
                  if (*((_QWORD *)a2 + 1) == *((_QWORD *)a2 + 2)
                    && (*((_DWORD *)a2 + 11) || *((_DWORD *)a2 + 6) == *((_DWORD *)a2 + 10)))
                  {
                    *((_DWORD *)a2 + 8) = 0;
                    result = 1;
                    *((_BYTE *)a2 + 36) = 1;
                    return result;
                  }
                }
              }
            }
          }
          continue;
        }
        return 0;
      case 3u:
        v9 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_30;
        v15 = (char *)*((_QWORD *)a2 + 1);
        v10 = *((_QWORD *)a2 + 2);
        goto LABEL_47;
      case 4u:
        v9 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_30;
        v16 = (char *)*((_QWORD *)a2 + 1);
        v10 = *((_QWORD *)a2 + 2);
        goto LABEL_55;
      case 5u:
        v9 = TagFallback & 7;
        if (v9 == 5)
          goto LABEL_63;
        goto LABEL_30;
      case 6u:
        v9 = TagFallback & 7;
        if (v9 == 1)
          goto LABEL_67;
        goto LABEL_30;
      case 7u:
        v9 = TagFallback & 7;
        if (v9 != 2)
          goto LABEL_30;
        v17 = *((_DWORD *)this + 18);
        goto LABEL_71;
      case 8u:
        v9 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_30;
        v19 = (char *)*((_QWORD *)a2 + 1);
        v18 = *((_QWORD *)a2 + 2);
        goto LABEL_77;
      case 9u:
        v9 = TagFallback & 7;
        if (v9 != 2)
          goto LABEL_30;
        v20 = *((_DWORD *)this + 18);
        goto LABEL_85;
      case 0xAu:
        v9 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_30;
        v22 = (char *)*((_QWORD *)a2 + 1);
        v21 = *((_QWORD *)a2 + 2);
        goto LABEL_91;
      default:
        v9 = TagFallback & 7;
LABEL_30:
        if (v9 == 4)
          return 1;
        if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(a2, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback) & 1) == 0)return 0;
        continue;
    }
  }
}

uint64_t awd::profile::TypeVariant::SerializeWithCachedSizes(uint64_t this, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a2, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  int v6;

  v5 = this;
  v6 = *(_DWORD *)(this + 72);
  if ((v6 & 1) != 0)
  {
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(unsigned int *)(this + 16), (uint64_t)a2, a4);
    v6 = *(_DWORD *)(v5 + 72);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0)
        goto LABEL_4;
      goto LABEL_14;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteInt64((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, *(_QWORD *)(v5 + 8), (uint64_t)a2, a4);
  v6 = *(_DWORD *)(v5 + 72);
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0)
      goto LABEL_5;
    goto LABEL_15;
  }
LABEL_14:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, *(unsigned int *)(v5 + 20), (uint64_t)a2, a4);
  v6 = *(_DWORD *)(v5 + 72);
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_16;
  }
LABEL_15:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt64((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4, *(_QWORD *)(v5 + 24), (uint64_t)a2, a4);
  v6 = *(_DWORD *)(v5 + 72);
  if ((v6 & 0x10) == 0)
  {
LABEL_6:
    if ((v6 & 0x20) == 0)
      goto LABEL_7;
    goto LABEL_17;
  }
LABEL_16:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteFloat((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5, (uint64_t)a2, *(float *)(v5 + 40), a3);
  v6 = *(_DWORD *)(v5 + 72);
  if ((v6 & 0x20) == 0)
  {
LABEL_7:
    if ((v6 & 0x40) == 0)
      goto LABEL_8;
    goto LABEL_18;
  }
LABEL_17:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)6, (uint64_t)a2, *(double *)(v5 + 32), a3);
  v6 = *(_DWORD *)(v5 + 72);
  if ((v6 & 0x40) == 0)
  {
LABEL_8:
    if ((v6 & 0x80) == 0)
      goto LABEL_9;
    goto LABEL_19;
  }
LABEL_18:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString();
  v6 = *(_DWORD *)(v5 + 72);
  if ((v6 & 0x80) == 0)
  {
LABEL_9:
    if ((v6 & 0x100) == 0)
      goto LABEL_10;
    goto LABEL_20;
  }
LABEL_19:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)8, *(unsigned __int8 *)(v5 + 44), (uint64_t)a2, a4);
  v6 = *(_DWORD *)(v5 + 72);
  if ((v6 & 0x100) == 0)
  {
LABEL_10:
    if ((v6 & 0x200) == 0)
      return this;
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xA, *(unsigned int *)(v5 + 64), (uint64_t)a2, a4);
  }
LABEL_20:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBytes();
  if ((*(_DWORD *)(v5 + 72) & 0x200) != 0)
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xA, *(unsigned int *)(v5 + 64), (uint64_t)a2, a4);
  return this;
}

uint64_t awd::profile::TypeVariant::ByteSize(awd::profile::TypeVariant *this)
{
  int v2;
  int v3;
  uint64_t v4;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v5;
  int v6;
  uint64_t v7;
  int v8;
  char v9;
  uint64_t v10;
  unint64_t v11;
  int v12;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v13;
  int v14;
  uint64_t v15;
  int v16;
  char v17;
  uint64_t v18;
  unint64_t v19;
  int v20;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v21;
  int v22;

  v2 = *((_DWORD *)this + 18);
  if (!(_BYTE)v2)
  {
    v4 = 0;
    goto LABEL_37;
  }
  if ((v2 & 1) == 0)
  {
    v3 = 0;
    if ((v2 & 2) == 0)
      goto LABEL_14;
    goto LABEL_13;
  }
  v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 4);
  if ((v5 & 0x80000000) != 0)
  {
    v3 = 11;
    if ((v2 & 2) != 0)
      goto LABEL_13;
  }
  else
  {
    if (v5 >= 0x80)
    {
      v3 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v5) + 1;
      v2 = *((_DWORD *)this + 18);
      if ((v2 & 2) == 0)
        goto LABEL_14;
      goto LABEL_13;
    }
    v3 = 2;
    if ((v2 & 2) != 0)
    {
LABEL_13:
      v3 += wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize64(*((wireless_diagnostics::google::protobuf::io::CodedOutputStream **)this
                                                                                        + 1))
          + 1;
      v2 = *((_DWORD *)this + 18);
    }
  }
LABEL_14:
  if ((v2 & 4) != 0)
  {
    v13 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 5);
    if (v13 >= 0x80)
    {
      v14 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v13) + 1;
      v2 = *((_DWORD *)this + 18);
    }
    else
    {
      v14 = 2;
    }
    v3 += v14;
    if ((v2 & 8) == 0)
      goto LABEL_17;
    goto LABEL_16;
  }
  if ((v2 & 8) != 0)
  {
LABEL_16:
    v3 += wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize64(*((wireless_diagnostics::google::protobuf::io::CodedOutputStream **)this
                                                                                      + 3))
        + 1;
    v2 = *((_DWORD *)this + 18);
  }
LABEL_17:
  v6 = v3 + 5;
  if ((v2 & 0x10) == 0)
    v6 = v3;
  if ((v2 & 0x20) != 0)
    LODWORD(v4) = v6 + 9;
  else
    LODWORD(v4) = v6;
  if ((v2 & 0x40) != 0)
  {
    v7 = *((_QWORD *)this + 6);
    v8 = *(unsigned __int8 *)(v7 + 23);
    v9 = v8;
    v10 = *(_QWORD *)(v7 + 8);
    if ((v8 & 0x80u) == 0)
      v11 = *(unsigned __int8 *)(v7 + 23);
    else
      v11 = v10;
    if (v11 >= 0x80)
    {
      v12 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v11);
      v8 = *(unsigned __int8 *)(v7 + 23);
      v10 = *(_QWORD *)(v7 + 8);
      v2 = *((_DWORD *)this + 18);
      v9 = *(_BYTE *)(v7 + 23);
    }
    else
    {
      v12 = 1;
    }
    if (v9 < 0)
      v8 = v10;
    LODWORD(v4) = v4 + v12 + v8 + 1;
  }
  if ((v2 & 0x80) != 0)
    v4 = (v4 + 2);
  else
    v4 = v4;
LABEL_37:
  if ((v2 & 0xFF00) != 0)
  {
    if ((v2 & 0x100) != 0)
    {
      v15 = *((_QWORD *)this + 7);
      v16 = *(unsigned __int8 *)(v15 + 23);
      v17 = v16;
      v18 = *(_QWORD *)(v15 + 8);
      if ((v16 & 0x80u) == 0)
        v19 = *(unsigned __int8 *)(v15 + 23);
      else
        v19 = v18;
      if (v19 >= 0x80)
      {
        v20 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v19);
        v16 = *(unsigned __int8 *)(v15 + 23);
        v18 = *(_QWORD *)(v15 + 8);
        v2 = *((_DWORD *)this + 18);
        v17 = *(_BYTE *)(v15 + 23);
      }
      else
      {
        v20 = 1;
      }
      if (v17 < 0)
        v16 = v18;
      v4 = (v4 + v20 + v16 + 1);
    }
    if ((v2 & 0x200) != 0)
    {
      v21 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 16);
      if ((v21 & 0x80000000) != 0)
      {
        v22 = 11;
      }
      else if (v21 >= 0x80)
      {
        v22 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v21) + 1;
      }
      else
      {
        v22 = 2;
      }
      v4 = (v22 + v4);
    }
  }
  *((_DWORD *)this + 17) = v4;
  return v4;
}

void awd::profile::TypeVariant::CopyFrom(awd::profile::TypeVariant *this, const awd::profile::TypeVariant *a2)
{
  if (a2 != this)
  {
    (*(void (**)(awd::profile::TypeVariant *))(*(_QWORD *)this + 32))(this);
    awd::profile::TypeVariant::MergeFrom(this, a2);
  }
}

uint64_t awd::profile::TypeVariant::IsInitialized(awd::profile::TypeVariant *this)
{
  return 1;
}

double awd::profile::TypeVariant::Swap(awd::profile::TypeVariant *this, awd::profile::TypeVariant *a2)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  double result;
  uint64_t v7;
  uint64_t v8;

  if (a2 != this)
  {
    v2 = *((_DWORD *)this + 4);
    *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
    *((_DWORD *)a2 + 4) = v2;
    v3 = *((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
    *((_QWORD *)a2 + 1) = v3;
    LODWORD(v3) = *((_DWORD *)this + 5);
    *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
    *((_DWORD *)a2 + 5) = v3;
    v4 = *((_QWORD *)this + 3);
    *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
    *((_QWORD *)a2 + 3) = v4;
    v5 = *((_DWORD *)this + 10);
    *((_DWORD *)this + 10) = *((_DWORD *)a2 + 10);
    *((_DWORD *)a2 + 10) = v5;
    result = *((double *)this + 4);
    *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
    *((double *)a2 + 4) = result;
    v7 = *((_QWORD *)this + 6);
    *((_QWORD *)this + 6) = *((_QWORD *)a2 + 6);
    *((_QWORD *)a2 + 6) = v7;
    LOBYTE(v7) = *((_BYTE *)this + 44);
    *((_BYTE *)this + 44) = *((_BYTE *)a2 + 44);
    *((_BYTE *)a2 + 44) = v7;
    v8 = *((_QWORD *)this + 7);
    *((_QWORD *)this + 7) = *((_QWORD *)a2 + 7);
    *((_QWORD *)a2 + 7) = v8;
    LODWORD(v8) = *((_DWORD *)this + 16);
    *((_DWORD *)this + 16) = *((_DWORD *)a2 + 16);
    *((_DWORD *)a2 + 16) = v8;
    LODWORD(v8) = *((_DWORD *)this + 18);
    *((_DWORD *)this + 18) = *((_DWORD *)a2 + 18);
    *((_DWORD *)a2 + 18) = v8;
    LODWORD(v8) = *((_DWORD *)this + 17);
    *((_DWORD *)this + 17) = *((_DWORD *)a2 + 17);
    *((_DWORD *)a2 + 17) = v8;
  }
  return result;
}

_QWORD *awd::profile::TypeVariant::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return sub_1CC59E69C(a1, "awd.profile.TypeVariant");
}

uint64_t awd::profile::Condition::SharedCtor(uint64_t this)
{
  uint64_t v1;

  *(_QWORD *)(this + 8) = 0;
  *(_QWORD *)(this + 16) = 0;
  *(_QWORD *)(this + 21) = 0;
  v1 = MEMORY[0x1E0DE8338];
  *(_QWORD *)(this + 32) = 0;
  *(_QWORD *)(this + 40) = 0;
  *(_QWORD *)(this + 48) = 0;
  *(_QWORD *)(this + 56) = v1;
  *(_BYTE *)(this + 29) = 0;
  *(_QWORD *)(this + 64) = 0;
  return this;
}

awd::profile::Condition *awd::profile::Condition::Condition(awd::profile::Condition *this, const awd::profile::Condition *a2)
{
  uint64_t v3;

  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *(_QWORD *)this = &off_1E886B778;
  *(_QWORD *)((char *)this + 21) = 0;
  v3 = MEMORY[0x1E0DE8338];
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 6) = 0;
  *((_QWORD *)this + 7) = v3;
  *((_BYTE *)this + 29) = 0;
  *((_QWORD *)this + 8) = 0;
  awd::profile::Condition::MergeFrom(this, a2);
  return this;
}

void sub_1CC5BC190(_Unwind_Exception *a1)
{
  wireless_diagnostics::google::protobuf::MessageLite *v1;

  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(v1);
  _Unwind_Resume(a1);
}

void awd::profile::Condition::MergeFrom(awd::profile::Condition *this, const awd::profile::Condition *a2)
{
  int v4;
  int v5;
  int v6;
  int v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  const awd::profile::TypeVariant *v11;
  uint64_t v12;
  uint64_t v13;
  const awd::profile::TypeVariant *v14;
  uint64_t v15;
  uint64_t v16;
  const awd::profile::TypeVariant *v17;
  uint64_t v18;
  uint64_t v19;
  const awd::profile::TypeVariant *v20;
  const std::string *v21;
  std::string *v22;
  char v23;
  _BYTE v24[48];

  if (a2 == this)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v24);
  }
  v4 = *((_DWORD *)a2 + 17);
  if (!(_BYTE)v4)
    goto LABEL_37;
  if ((v4 & 1) != 0)
  {
    v5 = *((_DWORD *)a2 + 2);
    *((_DWORD *)this + 17) |= 1u;
    *((_DWORD *)this + 2) = v5;
    v4 = *((_DWORD *)a2 + 17);
    if ((v4 & 2) == 0)
    {
LABEL_6:
      if ((v4 & 4) == 0)
        goto LABEL_7;
      goto LABEL_15;
    }
  }
  else if ((v4 & 2) == 0)
  {
    goto LABEL_6;
  }
  v6 = *((_DWORD *)a2 + 3);
  *((_DWORD *)this + 17) |= 2u;
  *((_DWORD *)this + 3) = v6;
  v4 = *((_DWORD *)a2 + 17);
  if ((v4 & 4) == 0)
  {
LABEL_7:
    if ((v4 & 8) == 0)
      goto LABEL_8;
    goto LABEL_16;
  }
LABEL_15:
  v7 = *((_DWORD *)a2 + 6);
  *((_DWORD *)this + 17) |= 4u;
  *((_DWORD *)this + 6) = v7;
  v4 = *((_DWORD *)a2 + 17);
  if ((v4 & 8) == 0)
  {
LABEL_8:
    if ((v4 & 0x10) == 0)
      goto LABEL_9;
    goto LABEL_17;
  }
LABEL_16:
  v8 = *((_BYTE *)a2 + 28);
  *((_DWORD *)this + 17) |= 8u;
  *((_BYTE *)this + 28) = v8;
  v4 = *((_DWORD *)a2 + 17);
  if ((v4 & 0x10) == 0)
  {
LABEL_9:
    if ((v4 & 0x20) == 0)
      goto LABEL_10;
LABEL_22:
    *((_DWORD *)this + 17) |= 0x20u;
    v12 = *((_QWORD *)this + 4);
    if (!v12)
    {
      v12 = operator new();
      *(_QWORD *)v12 = &off_1E886AFF8;
      *(_OWORD *)(v12 + 8) = 0u;
      *(_OWORD *)(v12 + 24) = 0u;
      *(_DWORD *)(v12 + 40) = 0;
      v13 = MEMORY[0x1E0DE8338];
      *(_BYTE *)(v12 + 44) = 0;
      *(_QWORD *)(v12 + 48) = v13;
      *(_QWORD *)(v12 + 56) = v13;
      *(_QWORD *)(v12 + 64) = 0;
      *(_DWORD *)(v12 + 72) = 0;
      *((_QWORD *)this + 4) = v12;
    }
    v14 = (const awd::profile::TypeVariant *)*((_QWORD *)a2 + 4);
    if (!v14)
      v14 = *(const awd::profile::TypeVariant **)(awd::profile::Condition::default_instance_ + 32);
    awd::profile::TypeVariant::MergeFrom((awd::profile::TypeVariant *)v12, v14);
    v4 = *((_DWORD *)a2 + 17);
    if ((v4 & 0x40) == 0)
    {
LABEL_11:
      if ((v4 & 0x80) == 0)
        goto LABEL_37;
      goto LABEL_32;
    }
    goto LABEL_27;
  }
LABEL_17:
  *((_DWORD *)this + 17) |= 0x10u;
  v9 = *((_QWORD *)this + 2);
  if (!v9)
  {
    v9 = operator new();
    *(_QWORD *)v9 = &off_1E886AFF8;
    *(_OWORD *)(v9 + 8) = 0u;
    *(_OWORD *)(v9 + 24) = 0u;
    *(_DWORD *)(v9 + 40) = 0;
    v10 = MEMORY[0x1E0DE8338];
    *(_BYTE *)(v9 + 44) = 0;
    *(_QWORD *)(v9 + 48) = v10;
    *(_QWORD *)(v9 + 56) = v10;
    *(_QWORD *)(v9 + 64) = 0;
    *(_DWORD *)(v9 + 72) = 0;
    *((_QWORD *)this + 2) = v9;
  }
  v11 = (const awd::profile::TypeVariant *)*((_QWORD *)a2 + 2);
  if (!v11)
    v11 = *(const awd::profile::TypeVariant **)(awd::profile::Condition::default_instance_ + 16);
  awd::profile::TypeVariant::MergeFrom((awd::profile::TypeVariant *)v9, v11);
  v4 = *((_DWORD *)a2 + 17);
  if ((v4 & 0x20) != 0)
    goto LABEL_22;
LABEL_10:
  if ((v4 & 0x40) == 0)
    goto LABEL_11;
LABEL_27:
  *((_DWORD *)this + 17) |= 0x40u;
  v15 = *((_QWORD *)this + 5);
  if (!v15)
  {
    v15 = operator new();
    *(_QWORD *)v15 = &off_1E886AFF8;
    *(_OWORD *)(v15 + 8) = 0u;
    *(_OWORD *)(v15 + 24) = 0u;
    *(_DWORD *)(v15 + 40) = 0;
    v16 = MEMORY[0x1E0DE8338];
    *(_BYTE *)(v15 + 44) = 0;
    *(_QWORD *)(v15 + 48) = v16;
    *(_QWORD *)(v15 + 56) = v16;
    *(_QWORD *)(v15 + 64) = 0;
    *(_DWORD *)(v15 + 72) = 0;
    *((_QWORD *)this + 5) = v15;
  }
  v17 = (const awd::profile::TypeVariant *)*((_QWORD *)a2 + 5);
  if (!v17)
    v17 = *(const awd::profile::TypeVariant **)(awd::profile::Condition::default_instance_ + 40);
  awd::profile::TypeVariant::MergeFrom((awd::profile::TypeVariant *)v15, v17);
  v4 = *((_DWORD *)a2 + 17);
  if ((v4 & 0x80) != 0)
  {
LABEL_32:
    *((_DWORD *)this + 17) |= 0x80u;
    v18 = *((_QWORD *)this + 6);
    if (!v18)
    {
      v18 = operator new();
      *(_QWORD *)v18 = &off_1E886AFF8;
      *(_OWORD *)(v18 + 8) = 0u;
      *(_OWORD *)(v18 + 24) = 0u;
      *(_DWORD *)(v18 + 40) = 0;
      v19 = MEMORY[0x1E0DE8338];
      *(_BYTE *)(v18 + 44) = 0;
      *(_QWORD *)(v18 + 48) = v19;
      *(_QWORD *)(v18 + 56) = v19;
      *(_QWORD *)(v18 + 64) = 0;
      *(_DWORD *)(v18 + 72) = 0;
      *((_QWORD *)this + 6) = v18;
    }
    v20 = (const awd::profile::TypeVariant *)*((_QWORD *)a2 + 6);
    if (!v20)
      v20 = *(const awd::profile::TypeVariant **)(awd::profile::Condition::default_instance_ + 48);
    awd::profile::TypeVariant::MergeFrom((awd::profile::TypeVariant *)v18, v20);
    v4 = *((_DWORD *)a2 + 17);
  }
LABEL_37:
  if ((v4 & 0xFF00) != 0)
  {
    if ((v4 & 0x100) != 0)
    {
      v21 = (const std::string *)*((_QWORD *)a2 + 7);
      *((_DWORD *)this + 17) |= 0x100u;
      v22 = (std::string *)*((_QWORD *)this + 7);
      if (v22 == (std::string *)MEMORY[0x1E0DE8338])
      {
        v22 = (std::string *)operator new();
        v22->__r_.__value_.__l.__size_ = 0;
        v22->__r_.__value_.__r.__words[2] = 0;
        v22->__r_.__value_.__r.__words[0] = 0;
        *((_QWORD *)this + 7) = v22;
      }
      std::string::operator=(v22, v21);
      v4 = *((_DWORD *)a2 + 17);
    }
    if ((v4 & 0x200) != 0)
    {
      v23 = *((_BYTE *)a2 + 29);
      *((_DWORD *)this + 17) |= 0x200u;
      *((_BYTE *)this + 29) = v23;
    }
  }
}

void sub_1CC5BC53C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void awd::profile::Condition::~Condition(awd::profile::Condition *this)
{
  *(_QWORD *)this = &off_1E886B778;
  awd::profile::Condition::SharedDtor(this);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

{
  *(_QWORD *)this = &off_1E886B778;
  awd::profile::Condition::SharedDtor(this);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

{
  *(_QWORD *)this = &off_1E886B778;
  awd::profile::Condition::SharedDtor(this);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
  JUMPOUT(0x1D17AD544);
}

_QWORD *awd::profile::Condition::SharedDtor(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = this;
  v2 = this[7];
  if (v2 != MEMORY[0x1E0DE8338] && v2 != 0)
  {
    if (*(char *)(v2 + 23) < 0)
      operator delete(*(void **)v2);
    this = (_QWORD *)MEMORY[0x1D17AD544](v2, 0x1012C40EC159624);
  }
  if ((_QWORD *)awd::profile::Condition::default_instance_ != v1)
  {
    v4 = v1[2];
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    v5 = v1[4];
    if (v5)
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
    v6 = v1[5];
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
    this = (_QWORD *)v1[6];
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

uint64_t awd::profile::Condition::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 64) = a2;
  return this;
}

uint64_t awd::profile::Condition::default_instance(awd::profile::Condition *this, uint64_t a2, uint64_t a3, const char *a4)
{
  uint64_t result;

  result = awd::profile::Condition::default_instance_;
  if (!awd::profile::Condition::default_instance_)
  {
    awd::profile::protobuf_AddDesc_AwdProfile_2eproto(0, a2, a3, a4);
    return awd::profile::Condition::default_instance_;
  }
  return result;
}

uint64_t awd::profile::Condition::New(awd::profile::Condition *this)
{
  uint64_t result;
  uint64_t v2;

  result = operator new();
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)result = &off_1E886B778;
  *(_QWORD *)(result + 21) = 0;
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)(result + 40) = 0;
  v2 = MEMORY[0x1E0DE8338];
  *(_QWORD *)(result + 48) = 0;
  *(_QWORD *)(result + 56) = v2;
  *(_BYTE *)(result + 29) = 0;
  *(_QWORD *)(result + 64) = 0;
  return result;
}

uint64_t awd::profile::Condition::Clear(uint64_t this)
{
  uint64_t v1;
  int v2;
  uint64_t v3;

  v1 = this;
  v2 = *(_DWORD *)(this + 68);
  if ((_BYTE)v2)
  {
    *(_QWORD *)(this + 8) = 0;
    *(_DWORD *)(this + 24) = 0;
    *(_BYTE *)(this + 28) = 0;
    if ((v2 & 0x10) != 0)
    {
      this = *(_QWORD *)(this + 16);
      if (this)
      {
        this = awd::profile::TypeVariant::Clear(this);
        v2 = *(_DWORD *)(v1 + 68);
      }
    }
    if ((v2 & 0x20) != 0)
    {
      this = *(_QWORD *)(v1 + 32);
      if (this)
      {
        this = awd::profile::TypeVariant::Clear(this);
        v2 = *(_DWORD *)(v1 + 68);
      }
    }
    if ((v2 & 0x40) != 0)
    {
      this = *(_QWORD *)(v1 + 40);
      if (this)
      {
        this = awd::profile::TypeVariant::Clear(this);
        v2 = *(_DWORD *)(v1 + 68);
      }
    }
    if ((v2 & 0x80) != 0)
    {
      this = *(_QWORD *)(v1 + 48);
      if (this)
      {
        this = awd::profile::TypeVariant::Clear(this);
        v2 = *(_DWORD *)(v1 + 68);
      }
    }
  }
  if ((v2 & 0xFF00) != 0)
  {
    if ((v2 & 0x100) != 0)
    {
      v3 = *(_QWORD *)(v1 + 56);
      if (v3 != MEMORY[0x1E0DE8338])
      {
        if (*(char *)(v3 + 23) < 0)
        {
          **(_BYTE **)v3 = 0;
          *(_QWORD *)(v3 + 8) = 0;
        }
        else
        {
          *(_BYTE *)v3 = 0;
          *(_BYTE *)(v3 + 23) = 0;
        }
      }
    }
    *(_BYTE *)(v1 + 29) = 0;
  }
  *(_DWORD *)(v1 + 68) = 0;
  return this;
}

uint64_t awd::profile::Condition::MergePartialFromCodedStream(awd::profile::Condition *this, wireless_diagnostics::google::protobuf::io::CodedInputStream *a2)
{
  unsigned int *v4;
  unsigned int *v5;
  uint64_t v6;
  char *v7;
  uint64_t TagFallback;
  unsigned int v9;
  int v10;
  unint64_t v11;
  char *v12;
  _BYTE *v13;
  unint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  unint64_t v18;
  unsigned __int8 *v19;
  int v20;
  uint64_t result;
  _BYTE *v22;
  int v23;
  unsigned __int8 *v24;
  uint64_t v25;
  char *v26;
  int v27;
  int v28;
  int v29;
  BOOL v30;
  int v31;
  unsigned __int8 *v32;
  uint64_t v33;
  char *v34;
  int v35;
  int v36;
  int v37;
  int v38;
  unsigned __int8 *v39;
  _QWORD *v40;
  unsigned __int8 *v41;
  unsigned int v42;
  unsigned __int8 *v43;
  uint64_t v44;
  char *v45;
  int v46;
  int v47;
  int v48;
  int v49;
  unsigned __int8 *v50;
  uint64_t v51;
  char *v52;
  int v53;
  int v54;
  int v55;
  int v56;
  unsigned __int8 *v57;
  unsigned int v58;
  unsigned __int8 *v59;
  unsigned int v60;

  v4 = (unsigned int *)((char *)this + 8);
  v5 = (unsigned int *)((char *)this + 12);
  v6 = MEMORY[0x1E0DE8338];
  while (2)
  {
    v7 = (char *)*((_QWORD *)a2 + 1);
    if ((unint64_t)v7 >= *((_QWORD *)a2 + 2) || *v7 < 0)
    {
      TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(a2);
      *((_DWORD *)a2 + 8) = TagFallback;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    else
    {
      TagFallback = *v7;
      *((_DWORD *)a2 + 8) = TagFallback;
      *((_QWORD *)a2 + 1) = v7 + 1;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    v9 = TagFallback >> 3;
    switch(TagFallback >> 3)
    {
      case 1u:
        v10 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_32;
        v12 = (char *)*((_QWORD *)a2 + 1);
        v11 = *((_QWORD *)a2 + 2);
        if ((unint64_t)v12 >= v11 || *v12 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v4);
          if (!(_DWORD)result)
            return result;
          v13 = (_BYTE *)*((_QWORD *)a2 + 1);
          v11 = *((_QWORD *)a2 + 2);
        }
        else
        {
          *v4 = *v12;
          v13 = v12 + 1;
          *((_QWORD *)a2 + 1) = v13;
        }
        *((_DWORD *)this + 17) |= 1u;
        if ((unint64_t)v13 < v11 && *v13 == 16)
        {
          v16 = v13 + 1;
          *((_QWORD *)a2 + 1) = v16;
          goto LABEL_40;
        }
        continue;
      case 2u:
        v10 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_32;
        v16 = (char *)*((_QWORD *)a2 + 1);
        v11 = *((_QWORD *)a2 + 2);
LABEL_40:
        if ((unint64_t)v16 >= v11 || *v16 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v5);
          if (!(_DWORD)result)
            return result;
          v22 = (_BYTE *)*((_QWORD *)a2 + 1);
          v11 = *((_QWORD *)a2 + 2);
        }
        else
        {
          *v5 = *v16;
          v22 = v16 + 1;
          *((_QWORD *)a2 + 1) = v22;
        }
        *((_DWORD *)this + 17) |= 2u;
        if ((unint64_t)v22 >= v11 || *v22 != 24)
          continue;
        v17 = v22 + 1;
        *((_QWORD *)a2 + 1) = v17;
LABEL_48:
        v60 = 0;
        if ((unint64_t)v17 < v11)
        {
          v23 = *v17;
          if ((v23 & 0x80000000) == 0)
          {
            *((_QWORD *)a2 + 1) = v17 + 1;
            if ((_BYTE)v23)
              goto LABEL_52;
LABEL_51:
            *((_DWORD *)this + 17) |= 4u;
            *((_DWORD *)this + 6) = 0;
            goto LABEL_52;
          }
        }
        result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v60);
        if (!(_DWORD)result)
          return result;
        if (!v60)
          goto LABEL_51;
LABEL_52:
        v24 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
        if (*((_DWORD *)a2 + 4) - (int)v24 < 2 || *v24 != 130 || v24[1] != 1)
          continue;
        *((_QWORD *)a2 + 1) = v24 + 2;
LABEL_56:
        *((_DWORD *)this + 17) |= 0x20u;
        v25 = *((_QWORD *)this + 4);
        if (!v25)
        {
          v25 = operator new();
          *(_QWORD *)v25 = &off_1E886AFF8;
          *(_OWORD *)(v25 + 8) = 0u;
          *(_OWORD *)(v25 + 24) = 0u;
          *(_DWORD *)(v25 + 40) = 0;
          *(_BYTE *)(v25 + 44) = 0;
          *(_QWORD *)(v25 + 48) = v6;
          *(_QWORD *)(v25 + 56) = v6;
          *(_QWORD *)(v25 + 64) = 0;
          *(_DWORD *)(v25 + 72) = 0;
          *((_QWORD *)this + 4) = v25;
        }
        v60 = 0;
        v26 = (char *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v26 >= *((_QWORD *)a2 + 2) || *v26 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v60))return 0;
        }
        else
        {
          v60 = *v26;
          *((_QWORD *)a2 + 1) = v26 + 1;
        }
        v27 = *((_DWORD *)a2 + 14);
        v28 = *((_DWORD *)a2 + 15);
        *((_DWORD *)a2 + 14) = v27 + 1;
        if (v27 >= v28)
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(a2);
        if (!awd::profile::TypeVariant::MergePartialFromCodedStream((awd::profile::TypeVariant *)v25, a2)
          || !*((_BYTE *)a2 + 36))
        {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(a2);
        v29 = *((_DWORD *)a2 + 14);
        v30 = __OFSUB__(v29, 1);
        v31 = v29 - 1;
        if (v31 < 0 == v30)
          *((_DWORD *)a2 + 14) = v31;
        v32 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
        if (*((_DWORD *)a2 + 4) - (int)v32 <= 1 || *v32 != 138 || v32[1] != 1)
          continue;
        *((_QWORD *)a2 + 1) = v32 + 2;
LABEL_71:
        *((_DWORD *)this + 17) |= 0x40u;
        v33 = *((_QWORD *)this + 5);
        if (!v33)
        {
          v33 = operator new();
          *(_QWORD *)v33 = &off_1E886AFF8;
          *(_OWORD *)(v33 + 8) = 0u;
          *(_OWORD *)(v33 + 24) = 0u;
          *(_DWORD *)(v33 + 40) = 0;
          *(_BYTE *)(v33 + 44) = 0;
          *(_QWORD *)(v33 + 48) = v6;
          *(_QWORD *)(v33 + 56) = v6;
          *(_QWORD *)(v33 + 64) = 0;
          *(_DWORD *)(v33 + 72) = 0;
          *((_QWORD *)this + 5) = v33;
        }
        v60 = 0;
        v34 = (char *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v34 >= *((_QWORD *)a2 + 2) || *v34 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v60))return 0;
        }
        else
        {
          v60 = *v34;
          *((_QWORD *)a2 + 1) = v34 + 1;
        }
        v35 = *((_DWORD *)a2 + 14);
        v36 = *((_DWORD *)a2 + 15);
        *((_DWORD *)a2 + 14) = v35 + 1;
        if (v35 >= v36)
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(a2);
        if (!awd::profile::TypeVariant::MergePartialFromCodedStream((awd::profile::TypeVariant *)v33, a2)
          || !*((_BYTE *)a2 + 36))
        {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(a2);
        v37 = *((_DWORD *)a2 + 14);
        v30 = __OFSUB__(v37, 1);
        v38 = v37 - 1;
        if (v38 < 0 == v30)
          *((_DWORD *)a2 + 14) = v38;
        v39 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
        if (*((_DWORD *)a2 + 4) - (int)v39 <= 1 || *v39 != 146 || v39[1] != 1)
          continue;
        *((_QWORD *)a2 + 1) = v39 + 2;
LABEL_89:
        *((_DWORD *)this + 17) |= 0x100u;
        if (*((_QWORD *)this + 7) == v6)
        {
          v40 = (_QWORD *)operator new();
          v40[1] = 0;
          v40[2] = 0;
          *v40 = 0;
          *((_QWORD *)this + 7) = v40;
        }
        result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString();
        if (!(_DWORD)result)
          return result;
        v41 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
        v18 = *((_QWORD *)a2 + 2);
        if ((int)v18 - (int)v41 < 2 || *v41 != 152 || v41[1] != 1)
          continue;
        v19 = v41 + 2;
        *((_QWORD *)a2 + 1) = v19;
LABEL_96:
        v60 = 0;
        if ((unint64_t)v19 >= v18 || (char)*v19 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v60);
          if (!(_DWORD)result)
            return result;
          v42 = v60;
          v43 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
          v18 = *((_QWORD *)a2 + 2);
        }
        else
        {
          v42 = *v19;
          v43 = v19 + 1;
          *((_QWORD *)a2 + 1) = v43;
        }
        *((_BYTE *)this + 28) = v42 != 0;
        v20 = *((_DWORD *)this + 17) | 8;
        *((_DWORD *)this + 17) = v20;
        if ((int)v18 - (int)v43 < 2 || *v43 != 162 || v43[1] != 1)
          continue;
        *((_QWORD *)a2 + 1) = v43 + 2;
LABEL_105:
        *((_DWORD *)this + 17) = v20 | 0x10;
        v44 = *((_QWORD *)this + 2);
        if (!v44)
        {
          v44 = operator new();
          *(_QWORD *)v44 = &off_1E886AFF8;
          *(_OWORD *)(v44 + 8) = 0u;
          *(_OWORD *)(v44 + 24) = 0u;
          *(_DWORD *)(v44 + 40) = 0;
          *(_BYTE *)(v44 + 44) = 0;
          *(_QWORD *)(v44 + 48) = v6;
          *(_QWORD *)(v44 + 56) = v6;
          *(_QWORD *)(v44 + 64) = 0;
          *(_DWORD *)(v44 + 72) = 0;
          *((_QWORD *)this + 2) = v44;
        }
        v60 = 0;
        v45 = (char *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v45 >= *((_QWORD *)a2 + 2) || *v45 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v60))return 0;
        }
        else
        {
          v60 = *v45;
          *((_QWORD *)a2 + 1) = v45 + 1;
        }
        v46 = *((_DWORD *)a2 + 14);
        v47 = *((_DWORD *)a2 + 15);
        *((_DWORD *)a2 + 14) = v46 + 1;
        if (v46 >= v47)
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(a2);
        if (!awd::profile::TypeVariant::MergePartialFromCodedStream((awd::profile::TypeVariant *)v44, a2)
          || !*((_BYTE *)a2 + 36))
        {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(a2);
        v48 = *((_DWORD *)a2 + 14);
        v30 = __OFSUB__(v48, 1);
        v49 = v48 - 1;
        if (v49 < 0 == v30)
          *((_DWORD *)a2 + 14) = v49;
        v50 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
        if (*((_DWORD *)a2 + 4) - (int)v50 <= 1 || *v50 != 130 || v50[1] != 2)
          continue;
        *((_QWORD *)a2 + 1) = v50 + 2;
        goto LABEL_120;
      case 3u:
        v10 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_32;
        v17 = (char *)*((_QWORD *)a2 + 1);
        v11 = *((_QWORD *)a2 + 2);
        goto LABEL_48;
      case 4u:
      case 5u:
      case 6u:
      case 7u:
      case 8u:
      case 9u:
      case 0xAu:
      case 0xBu:
      case 0xCu:
      case 0xDu:
      case 0xEu:
      case 0xFu:
        goto LABEL_16;
      case 0x10u:
        v10 = TagFallback & 7;
        if (v10 == 2)
          goto LABEL_56;
        goto LABEL_32;
      case 0x11u:
        v10 = TagFallback & 7;
        if (v10 == 2)
          goto LABEL_71;
        goto LABEL_32;
      case 0x12u:
        v10 = TagFallback & 7;
        if (v10 == 2)
          goto LABEL_89;
        goto LABEL_32;
      case 0x13u:
        v10 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_32;
        v19 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
        v18 = *((_QWORD *)a2 + 2);
        goto LABEL_96;
      case 0x14u:
        v10 = TagFallback & 7;
        if (v10 != 2)
          goto LABEL_32;
        v20 = *((_DWORD *)this + 17);
        goto LABEL_105;
      default:
        if (v9 != 32)
        {
          if (v9 == 33)
          {
            v10 = TagFallback & 7;
            if ((TagFallback & 7) == 0)
            {
              v15 = (char *)*((_QWORD *)a2 + 1);
              v14 = *((_QWORD *)a2 + 2);
              goto LABEL_135;
            }
          }
          else
          {
LABEL_16:
            v10 = TagFallback & 7;
          }
LABEL_32:
          if (v10 == 4)
            return 1;
          if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(a2, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback) & 1) == 0)return 0;
          continue;
        }
        v10 = TagFallback & 7;
        if (v10 != 2)
          goto LABEL_32;
LABEL_120:
        *((_DWORD *)this + 17) |= 0x80u;
        v51 = *((_QWORD *)this + 6);
        if (!v51)
        {
          v51 = operator new();
          *(_QWORD *)v51 = &off_1E886AFF8;
          *(_OWORD *)(v51 + 8) = 0u;
          *(_OWORD *)(v51 + 24) = 0u;
          *(_DWORD *)(v51 + 40) = 0;
          *(_BYTE *)(v51 + 44) = 0;
          *(_QWORD *)(v51 + 48) = v6;
          *(_QWORD *)(v51 + 56) = v6;
          *(_QWORD *)(v51 + 64) = 0;
          *(_DWORD *)(v51 + 72) = 0;
          *((_QWORD *)this + 6) = v51;
        }
        v60 = 0;
        v52 = (char *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v52 >= *((_QWORD *)a2 + 2) || *v52 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v60))return 0;
        }
        else
        {
          v60 = *v52;
          *((_QWORD *)a2 + 1) = v52 + 1;
        }
        v53 = *((_DWORD *)a2 + 14);
        v54 = *((_DWORD *)a2 + 15);
        *((_DWORD *)a2 + 14) = v53 + 1;
        if (v53 < v54)
        {
          wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(a2);
          if (awd::profile::TypeVariant::MergePartialFromCodedStream((awd::profile::TypeVariant *)v51, a2))
          {
            if (*((_BYTE *)a2 + 36))
            {
              wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(a2);
              v55 = *((_DWORD *)a2 + 14);
              v30 = __OFSUB__(v55, 1);
              v56 = v55 - 1;
              if (v56 < 0 == v30)
                *((_DWORD *)a2 + 14) = v56;
              v57 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
              v14 = *((_QWORD *)a2 + 2);
              if ((int)v14 - (int)v57 > 1 && *v57 == 136 && v57[1] == 2)
              {
                v15 = (char *)(v57 + 2);
                *((_QWORD *)a2 + 1) = v15;
LABEL_135:
                v60 = 0;
                if ((unint64_t)v15 >= v14 || *v15 < 0)
                {
                  result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v60);
                  if (!(_DWORD)result)
                    return result;
                  v58 = v60;
                  v59 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
                  v14 = *((_QWORD *)a2 + 2);
                }
                else
                {
                  v58 = *v15;
                  v59 = (unsigned __int8 *)(v15 + 1);
                  *((_QWORD *)a2 + 1) = v59;
                }
                *((_BYTE *)this + 29) = v58 != 0;
                *((_DWORD *)this + 17) |= 0x200u;
                if (v59 == (unsigned __int8 *)v14
                  && (*((_DWORD *)a2 + 11) || *((_DWORD *)a2 + 6) == *((_DWORD *)a2 + 10)))
                {
                  *((_DWORD *)a2 + 8) = 0;
                  result = 1;
                  *((_BYTE *)a2 + 36) = 1;
                  return result;
                }
              }
              continue;
            }
          }
        }
        return 0;
    }
  }
}

uint64_t awd::profile::Condition::SerializeWithCachedSizes(uint64_t this, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = this;
  v6 = *(_DWORD *)(this + 68);
  if ((v6 & 1) != 0)
  {
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(unsigned int *)(this + 8), (uint64_t)a2, a4);
    v6 = *(_DWORD *)(v5 + 68);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0)
        goto LABEL_4;
      goto LABEL_14;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, *(unsigned int *)(v5 + 12), (uint64_t)a2, a4);
  v6 = *(_DWORD *)(v5 + 68);
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 0x20) == 0)
      goto LABEL_5;
    goto LABEL_15;
  }
LABEL_14:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, *(unsigned int *)(v5 + 24), (uint64_t)a2, a4);
  v6 = *(_DWORD *)(v5 + 68);
  if ((v6 & 0x20) == 0)
  {
LABEL_5:
    if ((v6 & 0x40) == 0)
      goto LABEL_6;
    goto LABEL_18;
  }
LABEL_15:
  v7 = *(_QWORD *)(v5 + 32);
  if (!v7)
    v7 = *(_QWORD *)(awd::profile::Condition::default_instance_ + 32);
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x10, v7, a2, a4);
  v6 = *(_DWORD *)(v5 + 68);
  if ((v6 & 0x40) == 0)
  {
LABEL_6:
    if ((v6 & 0x100) == 0)
      goto LABEL_7;
    goto LABEL_21;
  }
LABEL_18:
  v8 = *(_QWORD *)(v5 + 40);
  if (!v8)
    v8 = *(_QWORD *)(awd::profile::Condition::default_instance_ + 40);
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x11, v8, a2, a4);
  v6 = *(_DWORD *)(v5 + 68);
  if ((v6 & 0x100) == 0)
  {
LABEL_7:
    if ((v6 & 8) == 0)
      goto LABEL_8;
    goto LABEL_22;
  }
LABEL_21:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString();
  v6 = *(_DWORD *)(v5 + 68);
  if ((v6 & 8) == 0)
  {
LABEL_8:
    if ((v6 & 0x10) == 0)
      goto LABEL_9;
    goto LABEL_23;
  }
LABEL_22:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x13, *(unsigned __int8 *)(v5 + 28), (uint64_t)a2, a4);
  v6 = *(_DWORD *)(v5 + 68);
  if ((v6 & 0x10) == 0)
  {
LABEL_9:
    if ((v6 & 0x80) == 0)
      goto LABEL_10;
    goto LABEL_26;
  }
LABEL_23:
  v9 = *(_QWORD *)(v5 + 16);
  if (!v9)
    v9 = *(_QWORD *)(awd::profile::Condition::default_instance_ + 16);
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x14, v9, a2, a4);
  v6 = *(_DWORD *)(v5 + 68);
  if ((v6 & 0x80) == 0)
  {
LABEL_10:
    if ((v6 & 0x200) == 0)
      return this;
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x21, *(unsigned __int8 *)(v5 + 29), (uint64_t)a2, a4);
  }
LABEL_26:
  v10 = *(_QWORD *)(v5 + 48);
  if (!v10)
    v10 = *(_QWORD *)(awd::profile::Condition::default_instance_ + 48);
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x20, v10, a2, a4);
  if ((*(_DWORD *)(v5 + 68) & 0x200) != 0)
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x21, *(unsigned __int8 *)(v5 + 29), (uint64_t)a2, a4);
  return this;
}

uint64_t awd::profile::Condition::ByteSize(awd::profile::Condition *this)
{
  int v2;
  uint64_t v3;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v4;
  int v5;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v6;
  int v7;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v8;
  int v9;
  awd::profile::TypeVariant *v10;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v11;
  int v12;
  int v13;
  awd::profile::TypeVariant *v14;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v15;
  int v16;
  int v17;
  awd::profile::TypeVariant *v18;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v19;
  int v20;
  int v21;
  awd::profile::TypeVariant *v22;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v23;
  int v24;
  int v25;
  uint64_t v26;
  int v27;
  char v28;
  uint64_t v29;
  unint64_t v30;
  int v31;

  v2 = *((_DWORD *)this + 17);
  if (!(_BYTE)v2)
  {
    v3 = 0;
    goto LABEL_53;
  }
  if ((v2 & 1) == 0)
  {
    LODWORD(v3) = 0;
    if ((v2 & 2) == 0)
      goto LABEL_14;
    goto LABEL_10;
  }
  v4 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 2);
  if (v4 >= 0x80)
  {
    v5 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v4);
    v2 = *((_DWORD *)this + 17);
  }
  else
  {
    v5 = 1;
  }
  LODWORD(v3) = v5 + 1;
  if ((v2 & 2) != 0)
  {
LABEL_10:
    v6 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 3);
    if (v6 >= 0x80)
    {
      v7 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v6);
      v2 = *((_DWORD *)this + 17);
    }
    else
    {
      v7 = 1;
    }
    LODWORD(v3) = v3 + v7 + 1;
  }
LABEL_14:
  if ((v2 & 4) != 0)
  {
    v8 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 6);
    if ((v8 & 0x80000000) != 0)
    {
      v9 = 10;
    }
    else if (v8 >= 0x80)
    {
      v9 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v8);
      v2 = *((_DWORD *)this + 17);
    }
    else
    {
      v9 = 1;
    }
    LODWORD(v3) = v3 + v9 + 1;
  }
  if ((v2 & 8) != 0)
    v3 = (v3 + 3);
  else
    v3 = v3;
  if ((v2 & 0x10) != 0)
  {
    v10 = (awd::profile::TypeVariant *)*((_QWORD *)this + 2);
    if (!v10)
      v10 = *(awd::profile::TypeVariant **)(awd::profile::Condition::default_instance_ + 16);
    v11 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)awd::profile::TypeVariant::ByteSize(v10);
    v12 = (int)v11;
    if (v11 >= 0x80)
      v13 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v11);
    else
      v13 = 1;
    v3 = (v3 + v12 + v13 + 2);
    v2 = *((_DWORD *)this + 17);
    if ((v2 & 0x20) == 0)
    {
LABEL_26:
      if ((v2 & 0x40) == 0)
        goto LABEL_27;
      goto LABEL_41;
    }
  }
  else if ((v2 & 0x20) == 0)
  {
    goto LABEL_26;
  }
  v14 = (awd::profile::TypeVariant *)*((_QWORD *)this + 4);
  if (!v14)
    v14 = *(awd::profile::TypeVariant **)(awd::profile::Condition::default_instance_ + 32);
  v15 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)awd::profile::TypeVariant::ByteSize(v14);
  v16 = (int)v15;
  if (v15 >= 0x80)
    v17 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v15);
  else
    v17 = 1;
  v3 = (v3 + v16 + v17 + 2);
  v2 = *((_DWORD *)this + 17);
  if ((v2 & 0x40) == 0)
  {
LABEL_27:
    if ((v2 & 0x80) == 0)
      goto LABEL_53;
    goto LABEL_47;
  }
LABEL_41:
  v18 = (awd::profile::TypeVariant *)*((_QWORD *)this + 5);
  if (!v18)
    v18 = *(awd::profile::TypeVariant **)(awd::profile::Condition::default_instance_ + 40);
  v19 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)awd::profile::TypeVariant::ByteSize(v18);
  v20 = (int)v19;
  if (v19 >= 0x80)
    v21 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v19);
  else
    v21 = 1;
  v3 = (v3 + v20 + v21 + 2);
  v2 = *((_DWORD *)this + 17);
  if ((v2 & 0x80) != 0)
  {
LABEL_47:
    v22 = (awd::profile::TypeVariant *)*((_QWORD *)this + 6);
    if (!v22)
      v22 = *(awd::profile::TypeVariant **)(awd::profile::Condition::default_instance_ + 48);
    v23 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)awd::profile::TypeVariant::ByteSize(v22);
    v24 = (int)v23;
    if (v23 >= 0x80)
      v25 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v23);
    else
      v25 = 1;
    v3 = (v3 + v24 + v25 + 2);
    v2 = *((_DWORD *)this + 17);
  }
LABEL_53:
  if ((v2 & 0xFF00) != 0)
  {
    if ((v2 & 0x100) != 0)
    {
      v26 = *((_QWORD *)this + 7);
      v27 = *(unsigned __int8 *)(v26 + 23);
      v28 = v27;
      v29 = *(_QWORD *)(v26 + 8);
      if ((v27 & 0x80u) == 0)
        v30 = *(unsigned __int8 *)(v26 + 23);
      else
        v30 = v29;
      if (v30 >= 0x80)
      {
        v31 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v30);
        v27 = *(unsigned __int8 *)(v26 + 23);
        v29 = *(_QWORD *)(v26 + 8);
        v2 = *((_DWORD *)this + 17);
        v28 = *(_BYTE *)(v26 + 23);
      }
      else
      {
        v31 = 1;
      }
      if (v28 < 0)
        v27 = v29;
      LODWORD(v3) = v3 + v31 + v27 + 2;
    }
    if ((v2 & 0x200) != 0)
      v3 = (v3 + 3);
    else
      v3 = v3;
  }
  *((_DWORD *)this + 16) = v3;
  return v3;
}

void awd::profile::Condition::CopyFrom(awd::profile::Condition *this, const awd::profile::Condition *a2)
{
  if (a2 != this)
  {
    (*(void (**)(awd::profile::Condition *))(*(_QWORD *)this + 32))(this);
    awd::profile::Condition::MergeFrom(this, a2);
  }
}

uint64_t awd::profile::Condition::IsInitialized(awd::profile::Condition *this)
{
  return 1;
}

uint64_t awd::profile::Condition::Swap(uint64_t this, awd::profile::Condition *a2)
{
  int v2;
  int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (a2 != (awd::profile::Condition *)this)
  {
    v2 = *(_DWORD *)(this + 8);
    *(_DWORD *)(this + 8) = *((_DWORD *)a2 + 2);
    *((_DWORD *)a2 + 2) = v2;
    v3 = *(_DWORD *)(this + 12);
    *(_DWORD *)(this + 12) = *((_DWORD *)a2 + 3);
    *((_DWORD *)a2 + 3) = v3;
    v4 = *(_DWORD *)(this + 24);
    *(_DWORD *)(this + 24) = *((_DWORD *)a2 + 6);
    *((_DWORD *)a2 + 6) = v4;
    LOBYTE(v4) = *(_BYTE *)(this + 28);
    *(_BYTE *)(this + 28) = *((_BYTE *)a2 + 28);
    *((_BYTE *)a2 + 28) = v4;
    v5 = *(_QWORD *)(this + 16);
    *(_QWORD *)(this + 16) = *((_QWORD *)a2 + 2);
    *((_QWORD *)a2 + 2) = v5;
    v6 = *(_QWORD *)(this + 32);
    *(_QWORD *)(this + 32) = *((_QWORD *)a2 + 4);
    *((_QWORD *)a2 + 4) = v6;
    v7 = *(_QWORD *)(this + 40);
    *(_QWORD *)(this + 40) = *((_QWORD *)a2 + 5);
    *((_QWORD *)a2 + 5) = v7;
    v8 = *(_QWORD *)(this + 48);
    *(_QWORD *)(this + 48) = *((_QWORD *)a2 + 6);
    *((_QWORD *)a2 + 6) = v8;
    v9 = *(_QWORD *)(this + 56);
    *(_QWORD *)(this + 56) = *((_QWORD *)a2 + 7);
    *((_QWORD *)a2 + 7) = v9;
    LOBYTE(v9) = *(_BYTE *)(this + 29);
    *(_BYTE *)(this + 29) = *((_BYTE *)a2 + 29);
    *((_BYTE *)a2 + 29) = v9;
    LODWORD(v9) = *(_DWORD *)(this + 68);
    *(_DWORD *)(this + 68) = *((_DWORD *)a2 + 17);
    *((_DWORD *)a2 + 17) = v9;
    LODWORD(v9) = *(_DWORD *)(this + 64);
    *(_DWORD *)(this + 64) = *((_DWORD *)a2 + 16);
    *((_DWORD *)a2 + 16) = v9;
  }
  return this;
}

_QWORD *awd::profile::Condition::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return sub_1CC59E69C(a1, "awd.profile.Condition");
}

uint64_t awd::profile::ConditionClause::SharedCtor(uint64_t this)
{
  *(_QWORD *)(this + 32) = 0;
  return this;
}

awd::profile::ConditionClause *awd::profile::ConditionClause::ConditionClause(awd::profile::ConditionClause *this, const awd::profile::ConditionClause *a2)
{
  *(_QWORD *)this = &off_1E886B340;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_DWORD *)this + 6) = 0;
  *((_QWORD *)this + 4) = 0;
  awd::profile::ConditionClause::MergeFrom(this, a2);
  return this;
}

void sub_1CC5BD678(_Unwind_Exception *a1)
{
  wireless_diagnostics::google::protobuf::MessageLite *v1;
  uint64_t *v2;

  sub_1CC5C305C(v2);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(v1);
  _Unwind_Resume(a1);
}

void awd::profile::ConditionClause::MergeFrom(awd::profile::ConditionClause *this, const awd::profile::ConditionClause *a2)
{
  uint64_t v4;
  uint64_t v5;
  const awd::profile::Condition *v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE v13[48];

  if (a2 == this)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v13);
  }
  wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((awd::profile::ConditionClause *)((char *)this + 8));
  if (*((int *)a2 + 4) >= 1)
  {
    v4 = 0;
    v5 = MEMORY[0x1E0DE8338];
    do
    {
      v6 = *(const awd::profile::Condition **)(*((_QWORD *)a2 + 1) + 8 * v4);
      v7 = *((_DWORD *)this + 5);
      v8 = *((int *)this + 4);
      if ((int)v8 >= v7)
      {
        if (v7 == *((_DWORD *)this + 6))
        {
          wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((awd::profile::ConditionClause *)((char *)this + 8));
          v7 = *((_DWORD *)this + 5);
        }
        *((_DWORD *)this + 5) = v7 + 1;
        v10 = operator new();
        *(_QWORD *)(v10 + 8) = 0;
        *(_QWORD *)(v10 + 16) = 0;
        *(_QWORD *)v10 = &off_1E886B778;
        *(_QWORD *)(v10 + 21) = 0;
        *(_QWORD *)(v10 + 32) = 0;
        *(_QWORD *)(v10 + 40) = 0;
        *(_QWORD *)(v10 + 48) = 0;
        *(_QWORD *)(v10 + 56) = v5;
        *(_BYTE *)(v10 + 29) = 0;
        *(_QWORD *)(v10 + 64) = 0;
        v11 = *((_QWORD *)this + 1);
        v12 = *((int *)this + 4);
        *((_DWORD *)this + 4) = v12 + 1;
        *(_QWORD *)(v11 + 8 * v12) = v10;
      }
      else
      {
        v9 = *((_QWORD *)this + 1);
        *((_DWORD *)this + 4) = v8 + 1;
        v10 = *(_QWORD *)(v9 + 8 * v8);
      }
      awd::profile::Condition::MergeFrom((awd::profile::Condition *)v10, v6);
      ++v4;
    }
    while (v4 < *((int *)a2 + 4));
  }
}

void sub_1CC5BD804(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void awd::profile::ConditionClause::~ConditionClause(awd::profile::ConditionClause *this)
{
  *(_QWORD *)this = &off_1E886B340;
  sub_1CC5C305C((uint64_t *)this + 1);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

{
  awd::profile::ConditionClause::~ConditionClause(this);
  JUMPOUT(0x1D17AD544);
}

uint64_t awd::profile::ConditionClause::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 32) = a2;
  return this;
}

uint64_t awd::profile::ConditionClause::default_instance(awd::profile::ConditionClause *this, uint64_t a2, uint64_t a3, const char *a4)
{
  uint64_t result;

  result = awd::profile::ConditionClause::default_instance_;
  if (!awd::profile::ConditionClause::default_instance_)
  {
    awd::profile::protobuf_AddDesc_AwdProfile_2eproto(0, a2, a3, a4);
    return awd::profile::ConditionClause::default_instance_;
  }
  return result;
}

uint64_t awd::profile::ConditionClause::New(awd::profile::ConditionClause *this)
{
  uint64_t result;

  result = operator new();
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)result = &off_1E886B340;
  *(_DWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 32) = 0;
  return result;
}

uint64_t awd::profile::ConditionClause::Clear(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = this;
  if (*(int *)(this + 16) >= 1)
  {
    v2 = 0;
    do
    {
      v3 = *(_QWORD *)(*(_QWORD *)(v1 + 8) + 8 * v2);
      this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 32))(v3);
      ++v2;
    }
    while (v2 < *(int *)(v1 + 16));
  }
  *(_DWORD *)(v1 + 16) = 0;
  *(_DWORD *)(v1 + 36) = 0;
  return this;
}

uint64_t awd::profile::ConditionClause::MergePartialFromCodedStream(awd::profile::ConditionClause *this, wireless_diagnostics::google::protobuf::io::CodedInputStream *a2)
{
  wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *v4;
  uint64_t v5;
  char *v6;
  uint64_t TagFallback;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  int v15;
  int v16;
  int v17;
  BOOL v18;
  int v19;
  _BYTE *v20;
  _BYTE *v21;
  uint64_t result;
  unsigned int v23;

  v4 = (awd::profile::ConditionClause *)((char *)this + 8);
  v5 = MEMORY[0x1E0DE8338];
  while (1)
  {
LABEL_2:
    v6 = (char *)*((_QWORD *)a2 + 1);
    if ((unint64_t)v6 >= *((_QWORD *)a2 + 2) || *v6 < 0)
    {
      TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(a2);
      *((_DWORD *)a2 + 8) = TagFallback;
    }
    else
    {
      TagFallback = *v6;
      *((_DWORD *)a2 + 8) = TagFallback;
      *((_QWORD *)a2 + 1) = v6 + 1;
    }
    if ((_DWORD)TagFallback == 10)
    {
      while (1)
      {
        v8 = *((_DWORD *)this + 5);
        v9 = *((int *)this + 4);
        if ((int)v9 >= v8)
        {
          if (v8 == *((_DWORD *)this + 6))
          {
            wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve(v4);
            v8 = *((_DWORD *)this + 5);
          }
          *((_DWORD *)this + 5) = v8 + 1;
          v11 = operator new();
          *(_QWORD *)(v11 + 8) = 0;
          *(_QWORD *)(v11 + 16) = 0;
          *(_QWORD *)v11 = &off_1E886B778;
          *(_QWORD *)(v11 + 21) = 0;
          *(_QWORD *)(v11 + 32) = 0;
          *(_QWORD *)(v11 + 40) = 0;
          *(_QWORD *)(v11 + 48) = 0;
          *(_QWORD *)(v11 + 56) = v5;
          *(_BYTE *)(v11 + 29) = 0;
          *(_QWORD *)(v11 + 64) = 0;
          v12 = *((_QWORD *)this + 1);
          v13 = *((int *)this + 4);
          *((_DWORD *)this + 4) = v13 + 1;
          *(_QWORD *)(v12 + 8 * v13) = v11;
        }
        else
        {
          v10 = *((_QWORD *)this + 1);
          *((_DWORD *)this + 4) = v9 + 1;
          v11 = *(_QWORD *)(v10 + 8 * v9);
        }
        v23 = 0;
        v14 = (char *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v14 >= *((_QWORD *)a2 + 2) || *v14 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v23))return 0;
        }
        else
        {
          v23 = *v14;
          *((_QWORD *)a2 + 1) = v14 + 1;
        }
        v15 = *((_DWORD *)a2 + 14);
        v16 = *((_DWORD *)a2 + 15);
        *((_DWORD *)a2 + 14) = v15 + 1;
        if (v15 >= v16)
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(a2);
        if (!awd::profile::Condition::MergePartialFromCodedStream((awd::profile::Condition *)v11, a2)
          || !*((_BYTE *)a2 + 36))
        {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(a2);
        v17 = *((_DWORD *)a2 + 14);
        v18 = __OFSUB__(v17, 1);
        v19 = v17 - 1;
        if (v19 < 0 == v18)
          *((_DWORD *)a2 + 14) = v19;
        v20 = (_BYTE *)*((_QWORD *)a2 + 1);
        v21 = (_BYTE *)*((_QWORD *)a2 + 2);
        if (v20 >= v21 || *v20 != 10)
        {
          if (v20 == v21 && (*((_DWORD *)a2 + 11) || *((_DWORD *)a2 + 6) == *((_DWORD *)a2 + 10)))
          {
            *((_DWORD *)a2 + 8) = 0;
            result = 1;
            *((_BYTE *)a2 + 36) = 1;
            return result;
          }
          goto LABEL_2;
        }
        *((_QWORD *)a2 + 1) = v20 + 1;
      }
    }
    if (!(_DWORD)TagFallback || (TagFallback & 7) == 4)
      return 1;
    if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(a2, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback) & 1) == 0)return 0;
  }
}

uint64_t awd::profile::ConditionClause::SerializeWithCachedSizes(uint64_t this, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  uint64_t v6;

  if (*(int *)(this + 16) >= 1)
  {
    v5 = this;
    v6 = 0;
    do
      this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(_QWORD *)(*(_QWORD *)(v5 + 8) + 8 * v6++), a2, a4);
    while (v6 < *(int *)(v5 + 16));
  }
  return this;
}

uint64_t awd::profile::ConditionClause::ByteSize(awd::profile::ConditionClause *this)
{
  uint64_t v2;
  uint64_t v3;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v4;
  int v5;
  int v6;

  v2 = *((unsigned int *)this + 4);
  if ((int)v2 >= 1)
  {
    v3 = 0;
    do
    {
      v4 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)awd::profile::Condition::ByteSize(*(awd::profile::Condition **)(*((_QWORD *)this + 1) + 8 * v3));
      v5 = (int)v4;
      if (v4 >= 0x80)
        v6 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v4);
      else
        v6 = 1;
      v2 = (v5 + v2 + v6);
      ++v3;
    }
    while (v3 < *((int *)this + 4));
  }
  *((_DWORD *)this + 8) = v2;
  return v2;
}

void awd::profile::ConditionClause::CopyFrom(awd::profile::ConditionClause *this, const awd::profile::ConditionClause *a2)
{
  if (a2 != this)
  {
    (*(void (**)(awd::profile::ConditionClause *))(*(_QWORD *)this + 32))(this);
    awd::profile::ConditionClause::MergeFrom(this, a2);
  }
}

uint64_t awd::profile::ConditionClause::IsInitialized(awd::profile::ConditionClause *this)
{
  return 1;
}

awd::profile::ConditionClause *awd::profile::ConditionClause::Swap(awd::profile::ConditionClause *this, awd::profile::ConditionClause *a2)
{
  awd::profile::ConditionClause *v3;
  int v4;
  int v5;

  if (a2 != this)
  {
    v3 = this;
    this = (awd::profile::ConditionClause *)wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Swap();
    v4 = *((_DWORD *)v3 + 9);
    *((_DWORD *)v3 + 9) = *((_DWORD *)a2 + 9);
    *((_DWORD *)a2 + 9) = v4;
    v5 = *((_DWORD *)v3 + 8);
    *((_DWORD *)v3 + 8) = *((_DWORD *)a2 + 8);
    *((_DWORD *)a2 + 8) = v5;
  }
  return this;
}

_QWORD *awd::profile::ConditionClause::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return sub_1CC59E69C(a1, "awd.profile.ConditionClause");
}

_QWORD *awd::profile::TriggerSource::SharedCtor(_QWORD *this)
{
  this[1] = 0;
  this[2] = 0;
  this[6] = MEMORY[0x1E0DE8338];
  this[7] = 0;
  return this;
}

awd::profile::TriggerSource *awd::profile::TriggerSource::TriggerSource(awd::profile::TriggerSource *this, const awd::profile::TriggerSource *a2)
{
  *(_QWORD *)this = &off_1E886B160;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *((_DWORD *)this + 10) = 0;
  *((_QWORD *)this + 6) = MEMORY[0x1E0DE8338];
  *((_QWORD *)this + 7) = 0;
  awd::profile::TriggerSource::MergeFrom(this, a2);
  return this;
}

void sub_1CC5BDD98(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_1CC5C305C(v1 + 3);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite((wireless_diagnostics::google::protobuf::MessageLite *)v1);
  _Unwind_Resume(a1);
}

void awd::profile::TriggerSource::MergeFrom(awd::profile::TriggerSource *this, const awd::profile::TriggerSource *a2)
{
  uint64_t v4;
  const awd::profile::ConditionClause *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  uint64_t v14;
  int v15;
  const std::string *v16;
  std::string *v17;
  _BYTE v18[48];

  if (a2 == this)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v18);
  }
  wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((awd::profile::TriggerSource *)((char *)this + 24));
  if (*((int *)a2 + 8) >= 1)
  {
    v4 = 0;
    do
    {
      v5 = *(const awd::profile::ConditionClause **)(*((_QWORD *)a2 + 3) + 8 * v4);
      v6 = *((_DWORD *)this + 9);
      v7 = *((int *)this + 8);
      if ((int)v7 >= v6)
      {
        if (v6 == *((_DWORD *)this + 10))
        {
          wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((awd::profile::TriggerSource *)((char *)this + 24));
          v6 = *((_DWORD *)this + 9);
        }
        *((_DWORD *)this + 9) = v6 + 1;
        v9 = operator new();
        *(_QWORD *)(v9 + 8) = 0;
        *(_QWORD *)(v9 + 16) = 0;
        *(_QWORD *)v9 = &off_1E886B340;
        *(_DWORD *)(v9 + 24) = 0;
        *(_QWORD *)(v9 + 32) = 0;
        v10 = *((_QWORD *)this + 3);
        v11 = *((int *)this + 8);
        *((_DWORD *)this + 8) = v11 + 1;
        *(_QWORD *)(v10 + 8 * v11) = v9;
      }
      else
      {
        v8 = *((_QWORD *)this + 3);
        *((_DWORD *)this + 8) = v7 + 1;
        v9 = *(_QWORD *)(v8 + 8 * v7);
      }
      awd::profile::ConditionClause::MergeFrom((awd::profile::ConditionClause *)v9, v5);
      ++v4;
    }
    while (v4 < *((int *)a2 + 8));
  }
  LOBYTE(v12) = *((_BYTE *)a2 + 60);
  if ((_BYTE)v12)
  {
    if ((*((_BYTE *)a2 + 60) & 1) != 0)
    {
      v13 = *((_DWORD *)a2 + 4);
      *((_DWORD *)this + 15) |= 1u;
      *((_DWORD *)this + 4) = v13;
      v12 = *((_DWORD *)a2 + 15);
      if ((v12 & 2) == 0)
      {
LABEL_14:
        if ((v12 & 4) == 0)
          goto LABEL_15;
        goto LABEL_19;
      }
    }
    else if ((*((_BYTE *)a2 + 60) & 2) == 0)
    {
      goto LABEL_14;
    }
    v14 = *((_QWORD *)a2 + 1);
    *((_DWORD *)this + 15) |= 2u;
    *((_QWORD *)this + 1) = v14;
    v12 = *((_DWORD *)a2 + 15);
    if ((v12 & 4) == 0)
    {
LABEL_15:
      if ((v12 & 0x10) == 0)
        return;
      goto LABEL_20;
    }
LABEL_19:
    v15 = *((_DWORD *)a2 + 5);
    *((_DWORD *)this + 15) |= 4u;
    *((_DWORD *)this + 5) = v15;
    if ((*((_DWORD *)a2 + 15) & 0x10) == 0)
      return;
LABEL_20:
    v16 = (const std::string *)*((_QWORD *)a2 + 6);
    *((_DWORD *)this + 15) |= 0x10u;
    v17 = (std::string *)*((_QWORD *)this + 6);
    if (v17 == (std::string *)MEMORY[0x1E0DE8338])
    {
      v17 = (std::string *)operator new();
      v17->__r_.__value_.__l.__size_ = 0;
      v17->__r_.__value_.__r.__words[2] = 0;
      v17->__r_.__value_.__r.__words[0] = 0;
      *((_QWORD *)this + 6) = v17;
    }
    std::string::operator=(v17, v16);
  }
}

void sub_1CC5BDFC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void awd::profile::TriggerSource::~TriggerSource(awd::profile::TriggerSource *this)
{
  uint64_t *v2;

  *(_QWORD *)this = &off_1E886B160;
  v2 = (uint64_t *)((char *)this + 24);
  awd::profile::TriggerSource::SharedDtor((uint64_t)this);
  sub_1CC5C305C(v2);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

{
  awd::profile::TriggerSource::~TriggerSource(this);
  JUMPOUT(0x1D17AD544);
}

uint64_t awd::profile::TriggerSource::SharedDtor(uint64_t this)
{
  uint64_t v1;

  v1 = *(_QWORD *)(this + 48);
  if (v1 != MEMORY[0x1E0DE8338] && v1 != 0)
  {
    if (*(char *)(v1 + 23) < 0)
      operator delete(*(void **)v1);
    JUMPOUT(0x1D17AD544);
  }
  return this;
}

uint64_t awd::profile::TriggerSource::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 56) = a2;
  return this;
}

uint64_t awd::profile::TriggerSource::default_instance(awd::profile::TriggerSource *this, uint64_t a2, uint64_t a3, const char *a4)
{
  uint64_t result;

  result = awd::profile::TriggerSource::default_instance_;
  if (!awd::profile::TriggerSource::default_instance_)
  {
    awd::profile::protobuf_AddDesc_AwdProfile_2eproto(0, a2, a3, a4);
    return awd::profile::TriggerSource::default_instance_;
  }
  return result;
}

double awd::profile::TriggerSource::New(awd::profile::TriggerSource *this)
{
  uint64_t v1;
  double result;

  v1 = operator new();
  *(_QWORD *)v1 = &off_1E886B160;
  result = 0.0;
  *(_OWORD *)(v1 + 8) = 0u;
  *(_OWORD *)(v1 + 24) = 0u;
  *(_DWORD *)(v1 + 40) = 0;
  *(_QWORD *)(v1 + 48) = MEMORY[0x1E0DE8338];
  *(_QWORD *)(v1 + 56) = 0;
  return result;
}

uint64_t awd::profile::TriggerSource::Clear(uint64_t this)
{
  uint64_t v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = this;
  v2 = *(_BYTE *)(this + 60);
  if (v2)
  {
    *(_QWORD *)(this + 8) = 0;
    *(_QWORD *)(this + 16) = 0;
    if ((v2 & 0x10) != 0)
    {
      v3 = *(_QWORD *)(this + 48);
      if (v3 != MEMORY[0x1E0DE8338])
      {
        if (*(char *)(v3 + 23) < 0)
        {
          **(_BYTE **)v3 = 0;
          *(_QWORD *)(v3 + 8) = 0;
        }
        else
        {
          *(_BYTE *)v3 = 0;
          *(_BYTE *)(v3 + 23) = 0;
        }
      }
    }
  }
  if (*(int *)(this + 32) >= 1)
  {
    v4 = 0;
    do
    {
      v5 = *(_QWORD *)(*(_QWORD *)(v1 + 24) + 8 * v4);
      this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 32))(v5);
      ++v4;
    }
    while (v4 < *(int *)(v1 + 32));
  }
  *(_DWORD *)(v1 + 32) = 0;
  *(_DWORD *)(v1 + 60) = 0;
  return this;
}

uint64_t awd::profile::TriggerSource::MergePartialFromCodedStream(awd::profile::TriggerSource *this, wireless_diagnostics::google::protobuf::io::CodedInputStream *a2)
{
  unint64_t *v4;
  unsigned int *v5;
  unsigned int *v6;
  wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *v7;
  uint64_t v8;
  char *v9;
  uint64_t TagFallback;
  unsigned int v11;
  int v12;
  _QWORD *v13;
  uint64_t result;
  unint64_t v15;
  char *v16;
  unsigned __int8 *v17;
  char *v18;
  _BYTE *v19;
  _BYTE *v20;
  unsigned __int8 *v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  int v29;
  int v30;
  int v31;
  BOOL v32;
  int v33;
  int v34;
  unsigned int v35;

  v4 = (unint64_t *)((char *)this + 8);
  v5 = (unsigned int *)((char *)this + 16);
  v6 = (unsigned int *)((char *)this + 20);
  v7 = (awd::profile::TriggerSource *)((char *)this + 24);
  v8 = MEMORY[0x1E0DE8338];
  while (1)
  {
    while (1)
    {
LABEL_2:
      v9 = (char *)*((_QWORD *)a2 + 1);
      if ((unint64_t)v9 >= *((_QWORD *)a2 + 2) || *v9 < 0)
      {
        TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(a2);
        *((_DWORD *)a2 + 8) = TagFallback;
        if (!(_DWORD)TagFallback)
          return 1;
      }
      else
      {
        TagFallback = *v9;
        *((_DWORD *)a2 + 8) = TagFallback;
        *((_QWORD *)a2 + 1) = v9 + 1;
        if (!(_DWORD)TagFallback)
          return 1;
      }
      v11 = TagFallback >> 3;
      if (TagFallback >> 3 <= 2)
        break;
      if (v11 == 3)
      {
        v12 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_32;
        v17 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
        v15 = *((_QWORD *)a2 + 2);
        goto LABEL_48;
      }
      if (v11 == 16)
      {
        v12 = TagFallback & 7;
        if (v12 != 2)
          goto LABEL_32;
        goto LABEL_57;
      }
      if (v11 != 32)
      {
LABEL_31:
        v12 = TagFallback & 7;
        goto LABEL_32;
      }
      v12 = TagFallback & 7;
      if (v12 == 2)
        goto LABEL_12;
LABEL_32:
      if (v12 == 4)
        return 1;
      if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(a2, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback) & 1) == 0)return 0;
    }
    if (v11 != 1)
    {
      if (v11 != 2)
        goto LABEL_31;
      v12 = TagFallback & 7;
      if ((TagFallback & 7) != 0)
        goto LABEL_32;
      v16 = (char *)*((_QWORD *)a2 + 1);
      v15 = *((_QWORD *)a2 + 2);
      goto LABEL_40;
    }
    v12 = TagFallback & 7;
    if ((TagFallback & 7) != 0)
      goto LABEL_32;
    v18 = (char *)*((_QWORD *)a2 + 1);
    v15 = *((_QWORD *)a2 + 2);
    if ((unint64_t)v18 >= v15 || *v18 < 0)
    {
      result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint64Fallback(a2, v4);
      if (!(_DWORD)result)
        return result;
      v19 = (_BYTE *)*((_QWORD *)a2 + 1);
      v15 = *((_QWORD *)a2 + 2);
    }
    else
    {
      *v4 = *v18;
      v19 = v18 + 1;
      *((_QWORD *)a2 + 1) = v19;
    }
    *((_DWORD *)this + 15) |= 2u;
    if ((unint64_t)v19 < v15 && *v19 == 16)
    {
      v16 = v19 + 1;
      *((_QWORD *)a2 + 1) = v16;
LABEL_40:
      if ((unint64_t)v16 >= v15 || *v16 < 0)
      {
        result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v5);
        if (!(_DWORD)result)
          return result;
        v20 = (_BYTE *)*((_QWORD *)a2 + 1);
        v15 = *((_QWORD *)a2 + 2);
      }
      else
      {
        *v5 = *v16;
        v20 = v16 + 1;
        *((_QWORD *)a2 + 1) = v20;
      }
      *((_DWORD *)this + 15) |= 1u;
      if ((unint64_t)v20 < v15 && *v20 == 24)
      {
        v17 = v20 + 1;
        *((_QWORD *)a2 + 1) = v17;
LABEL_48:
        if ((unint64_t)v17 >= v15 || (char)*v17 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v6);
          if (!(_DWORD)result)
            return result;
          v21 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
          v15 = *((_QWORD *)a2 + 2);
        }
        else
        {
          *v6 = *v17;
          v21 = v17 + 1;
          *((_QWORD *)a2 + 1) = v21;
        }
        *((_DWORD *)this + 15) |= 4u;
        if ((int)v15 - (int)v21 >= 2 && *v21 == 130 && v21[1] == 1)
        {
          do
          {
            *((_QWORD *)a2 + 1) = v21 + 2;
LABEL_57:
            v22 = *((_DWORD *)this + 9);
            v23 = *((int *)this + 8);
            if ((int)v23 >= v22)
            {
              if (v22 == *((_DWORD *)this + 10))
              {
                wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve(v7);
                v22 = *((_DWORD *)this + 9);
              }
              *((_DWORD *)this + 9) = v22 + 1;
              v25 = operator new();
              *(_QWORD *)(v25 + 8) = 0;
              *(_QWORD *)(v25 + 16) = 0;
              *(_QWORD *)v25 = &off_1E886B340;
              *(_DWORD *)(v25 + 24) = 0;
              *(_QWORD *)(v25 + 32) = 0;
              v26 = *((_QWORD *)this + 3);
              v27 = *((int *)this + 8);
              *((_DWORD *)this + 8) = v27 + 1;
              *(_QWORD *)(v26 + 8 * v27) = v25;
            }
            else
            {
              v24 = *((_QWORD *)this + 3);
              *((_DWORD *)this + 8) = v23 + 1;
              v25 = *(_QWORD *)(v24 + 8 * v23);
            }
            v35 = 0;
            v28 = (char *)*((_QWORD *)a2 + 1);
            if ((unint64_t)v28 >= *((_QWORD *)a2 + 2) || *v28 < 0)
            {
              if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v35))return 0;
            }
            else
            {
              v35 = *v28;
              *((_QWORD *)a2 + 1) = v28 + 1;
            }
            v29 = *((_DWORD *)a2 + 14);
            v30 = *((_DWORD *)a2 + 15);
            *((_DWORD *)a2 + 14) = v29 + 1;
            if (v29 >= v30)
              return 0;
            wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(a2);
            if (!awd::profile::ConditionClause::MergePartialFromCodedStream((awd::profile::ConditionClause *)v25, a2)|| !*((_BYTE *)a2 + 36))
            {
              return 0;
            }
            wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(a2);
            v31 = *((_DWORD *)a2 + 14);
            v32 = __OFSUB__(v31, 1);
            v33 = v31 - 1;
            if (v33 < 0 == v32)
              *((_DWORD *)a2 + 14) = v33;
            v21 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
            if (*((_DWORD *)a2 + 4) - (int)v21 <= 1 || *v21 != 130)
              goto LABEL_2;
            v34 = v21[1];
          }
          while (v34 == 1);
          if (v34 == 2)
          {
            *((_QWORD *)a2 + 1) = v21 + 2;
LABEL_12:
            *((_DWORD *)this + 15) |= 0x10u;
            if (*((_QWORD *)this + 6) == v8)
            {
              v13 = (_QWORD *)operator new();
              v13[1] = 0;
              v13[2] = 0;
              *v13 = 0;
              *((_QWORD *)this + 6) = v13;
            }
            result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString();
            if (!(_DWORD)result)
              return result;
            if (*((_QWORD *)a2 + 1) == *((_QWORD *)a2 + 2)
              && (*((_DWORD *)a2 + 11) || *((_DWORD *)a2 + 6) == *((_DWORD *)a2 + 10)))
            {
              break;
            }
          }
        }
      }
    }
  }
  *((_DWORD *)a2 + 8) = 0;
  result = 1;
  *((_BYTE *)a2 + 36) = 1;
  return result;
}

uint64_t awd::profile::TriggerSource::SerializeWithCachedSizes(uint64_t this, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  int v6;
  uint64_t v7;

  v5 = this;
  v6 = *(_DWORD *)(this + 60);
  if ((v6 & 2) != 0)
  {
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt64((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(_QWORD *)(this + 8), (uint64_t)a2, a4);
    v6 = *(_DWORD *)(v5 + 60);
    if ((v6 & 1) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0)
        goto LABEL_5;
      goto LABEL_4;
    }
  }
  else if ((v6 & 1) == 0)
  {
    goto LABEL_3;
  }
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, *(unsigned int *)(v5 + 16), (uint64_t)a2, a4);
  if ((*(_DWORD *)(v5 + 60) & 4) != 0)
LABEL_4:
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, *(unsigned int *)(v5 + 20), (uint64_t)a2, a4);
LABEL_5:
  if (*(int *)(v5 + 32) >= 1)
  {
    v7 = 0;
    do
      this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x10, *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v7++), a2, a4);
    while (v7 < *(int *)(v5 + 32));
  }
  if ((*(_BYTE *)(v5 + 60) & 0x10) != 0)
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString();
  return this;
}

uint64_t awd::profile::TriggerSource::ByteSize(awd::profile::TriggerSource *this)
{
  int v2;
  int v3;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v4;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v5;
  int v6;
  uint64_t v7;
  int v8;
  char v9;
  uint64_t v10;
  unint64_t v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v16;
  int v17;
  int v18;

  LOBYTE(v2) = *((_BYTE *)this + 60);
  if (!(_BYTE)v2)
  {
    v3 = 0;
    goto LABEL_27;
  }
  if ((*((_BYTE *)this + 60) & 1) == 0)
  {
    v3 = 0;
    if ((*((_BYTE *)this + 60) & 2) == 0)
      goto LABEL_11;
    goto LABEL_10;
  }
  v4 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 4);
  if (v4 >= 0x80)
  {
    v3 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v4) + 1;
    v2 = *((_DWORD *)this + 15);
    if ((v2 & 2) == 0)
      goto LABEL_11;
    goto LABEL_10;
  }
  v3 = 2;
  if ((v2 & 2) != 0)
  {
LABEL_10:
    v3 += wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize64(*((wireless_diagnostics::google::protobuf::io::CodedOutputStream **)this
                                                                                      + 1))
        + 1;
    v2 = *((_DWORD *)this + 15);
  }
LABEL_11:
  if ((v2 & 4) != 0)
  {
    v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 5);
    if (v5 >= 0x80)
    {
      v6 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v5) + 1;
      v2 = *((_DWORD *)this + 15);
    }
    else
    {
      v6 = 2;
    }
    v3 += v6;
    if ((v2 & 0x10) == 0)
      goto LABEL_27;
  }
  else if ((v2 & 0x10) == 0)
  {
    goto LABEL_27;
  }
  v7 = *((_QWORD *)this + 6);
  v8 = *(unsigned __int8 *)(v7 + 23);
  v9 = v8;
  v10 = *(_QWORD *)(v7 + 8);
  if ((v8 & 0x80u) == 0)
    v11 = *(unsigned __int8 *)(v7 + 23);
  else
    v11 = v10;
  if (v11 >= 0x80)
  {
    v12 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v11);
    v8 = *(unsigned __int8 *)(v7 + 23);
    v10 = *(_QWORD *)(v7 + 8);
    v9 = *(_BYTE *)(v7 + 23);
  }
  else
  {
    v12 = 1;
  }
  if (v9 < 0)
    v8 = v10;
  v3 += v12 + v8 + 2;
LABEL_27:
  v13 = *((_DWORD *)this + 8);
  v14 = (v3 + 2 * v13);
  if (v13 >= 1)
  {
    v15 = 0;
    do
    {
      v16 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)awd::profile::ConditionClause::ByteSize(*(awd::profile::ConditionClause **)(*((_QWORD *)this + 3) + 8 * v15));
      v17 = (int)v16;
      if (v16 >= 0x80)
        v18 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v16);
      else
        v18 = 1;
      v14 = (v17 + v14 + v18);
      ++v15;
    }
    while (v15 < *((int *)this + 8));
  }
  *((_DWORD *)this + 14) = v14;
  return v14;
}

void awd::profile::TriggerSource::CopyFrom(awd::profile::TriggerSource *this, const awd::profile::TriggerSource *a2)
{
  if (a2 != this)
  {
    (*(void (**)(awd::profile::TriggerSource *))(*(_QWORD *)this + 32))(this);
    awd::profile::TriggerSource::MergeFrom(this, a2);
  }
}

uint64_t awd::profile::TriggerSource::IsInitialized(awd::profile::TriggerSource *this)
{
  return 1;
}

uint64_t awd::profile::TriggerSource::Swap(uint64_t this, awd::profile::TriggerSource *a2)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;

  if (a2 != (awd::profile::TriggerSource *)this)
  {
    v3 = this;
    v4 = *(_DWORD *)(this + 16);
    *(_DWORD *)(this + 16) = *((_DWORD *)a2 + 4);
    *((_DWORD *)a2 + 4) = v4;
    v5 = *(_QWORD *)(this + 8);
    *(_QWORD *)(this + 8) = *((_QWORD *)a2 + 1);
    *((_QWORD *)a2 + 1) = v5;
    LODWORD(v5) = *(_DWORD *)(this + 20);
    *(_DWORD *)(this + 20) = *((_DWORD *)a2 + 5);
    *((_DWORD *)a2 + 5) = v5;
    this = wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Swap();
    v6 = *(_QWORD *)(v3 + 48);
    *(_QWORD *)(v3 + 48) = *((_QWORD *)a2 + 6);
    *((_QWORD *)a2 + 6) = v6;
    LODWORD(v6) = *(_DWORD *)(v3 + 60);
    *(_DWORD *)(v3 + 60) = *((_DWORD *)a2 + 15);
    *((_DWORD *)a2 + 15) = v6;
    LODWORD(v6) = *(_DWORD *)(v3 + 56);
    *(_DWORD *)(v3 + 56) = *((_DWORD *)a2 + 14);
    *((_DWORD *)a2 + 14) = v6;
  }
  return this;
}

_QWORD *awd::profile::TriggerSource::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return sub_1CC59E69C(a1, "awd.profile.TriggerSource");
}

uint64_t awd::profile::TriggerProcessingRule::SharedCtor(uint64_t this)
{
  *(_QWORD *)(this + 72) = 0;
  *(_DWORD *)(this + 80) = 0;
  return this;
}

awd::profile::TriggerProcessingRule *awd::profile::TriggerProcessingRule::TriggerProcessingRule(awd::profile::TriggerProcessingRule *this, const awd::profile::TriggerProcessingRule *a2)
{
  *(_QWORD *)this = &off_1E886B4A8;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *((_QWORD *)this + 6) = 0;
  *((_QWORD *)this + 7) = 0;
  *((_DWORD *)this + 16) = 0;
  *((_QWORD *)this + 9) = 0;
  *((_DWORD *)this + 20) = 0;
  *((_DWORD *)this + 10) = 0;
  awd::profile::TriggerProcessingRule::MergeFrom(this, a2);
  return this;
}

void sub_1CC5BE9F0(_Unwind_Exception *a1)
{
  wireless_diagnostics::google::protobuf::MessageLite *v1;
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t *v5;

  v5 = v4;
  sub_1CC5C305C(v5);
  sub_1CC5C305C(v3);
  sub_1CC5C3154(v2);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(v1);
  _Unwind_Resume(a1);
}

void awd::profile::TriggerProcessingRule::MergeFrom(awd::profile::TriggerProcessingRule *this, const awd::profile::TriggerProcessingRule *a2)
{
  int v4;
  uint64_t v5;
  const awd::profile::ConditionClause *v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  const awd::profile::ConditionClause *v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  _BYTE v22[48];

  if (a2 == this)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v22);
  }
  v4 = *((_DWORD *)a2 + 4);
  if (v4)
  {
    sub_1CC5C2EE8((_DWORD *)this + 2, *((_DWORD *)this + 4) + v4);
    memcpy((void *)(*((_QWORD *)this + 1) + 4 * *((int *)this + 4)), *((const void **)a2 + 1), 4 * *((int *)a2 + 4));
    *((_DWORD *)this + 4) += *((_DWORD *)a2 + 4);
  }
  wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((awd::profile::TriggerProcessingRule *)((char *)this + 24));
  if (*((int *)a2 + 8) >= 1)
  {
    v5 = 0;
    do
    {
      v6 = *(const awd::profile::ConditionClause **)(*((_QWORD *)a2 + 3) + 8 * v5);
      v7 = *((_DWORD *)this + 9);
      v8 = *((int *)this + 8);
      if ((int)v8 >= v7)
      {
        if (v7 == *((_DWORD *)this + 10))
        {
          wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((awd::profile::TriggerProcessingRule *)((char *)this + 24));
          v7 = *((_DWORD *)this + 9);
        }
        *((_DWORD *)this + 9) = v7 + 1;
        v10 = operator new();
        *(_QWORD *)(v10 + 8) = 0;
        *(_QWORD *)(v10 + 16) = 0;
        *(_QWORD *)v10 = &off_1E886B340;
        *(_DWORD *)(v10 + 24) = 0;
        *(_QWORD *)(v10 + 32) = 0;
        v11 = *((_QWORD *)this + 3);
        v12 = *((int *)this + 8);
        *((_DWORD *)this + 8) = v12 + 1;
        *(_QWORD *)(v11 + 8 * v12) = v10;
      }
      else
      {
        v9 = *((_QWORD *)this + 3);
        *((_DWORD *)this + 8) = v8 + 1;
        v10 = *(_QWORD *)(v9 + 8 * v8);
      }
      awd::profile::ConditionClause::MergeFrom((awd::profile::ConditionClause *)v10, v6);
      ++v5;
    }
    while (v5 < *((int *)a2 + 8));
  }
  wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((awd::profile::TriggerProcessingRule *)((char *)this + 48));
  if (*((int *)a2 + 14) >= 1)
  {
    v13 = 0;
    do
    {
      v14 = *(const awd::profile::ConditionClause **)(*((_QWORD *)a2 + 6) + 8 * v13);
      v15 = *((_DWORD *)this + 15);
      v16 = *((int *)this + 14);
      if ((int)v16 >= v15)
      {
        if (v15 == *((_DWORD *)this + 16))
        {
          wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((awd::profile::TriggerProcessingRule *)((char *)this + 48));
          v15 = *((_DWORD *)this + 15);
        }
        *((_DWORD *)this + 15) = v15 + 1;
        v18 = operator new();
        *(_QWORD *)(v18 + 8) = 0;
        *(_QWORD *)(v18 + 16) = 0;
        *(_QWORD *)v18 = &off_1E886B340;
        *(_DWORD *)(v18 + 24) = 0;
        *(_QWORD *)(v18 + 32) = 0;
        v19 = *((_QWORD *)this + 6);
        v20 = *((int *)this + 14);
        *((_DWORD *)this + 14) = v20 + 1;
        *(_QWORD *)(v19 + 8 * v20) = v18;
      }
      else
      {
        v17 = *((_QWORD *)this + 6);
        *((_DWORD *)this + 14) = v16 + 1;
        v18 = *(_QWORD *)(v17 + 8 * v16);
      }
      awd::profile::ConditionClause::MergeFrom((awd::profile::ConditionClause *)v18, v14);
      ++v13;
    }
    while (v13 < *((int *)a2 + 14));
  }
  if ((*((_BYTE *)a2 + 80) & 1) != 0)
  {
    v21 = *((_DWORD *)a2 + 18);
    *((_DWORD *)this + 20) |= 1u;
    *((_DWORD *)this + 18) = v21;
  }
}

void sub_1CC5BECA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void awd::profile::TriggerProcessingRule::~TriggerProcessingRule(awd::profile::TriggerProcessingRule *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_1E886B4A8;
  sub_1CC5C305C((uint64_t *)this + 6);
  sub_1CC5C305C((uint64_t *)this + 3);
  v2 = *((_QWORD *)this + 1);
  if (v2)
    MEMORY[0x1D17AD52C](v2, 0x1000C8052888210);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

{
  awd::profile::TriggerProcessingRule::~TriggerProcessingRule(this);
  JUMPOUT(0x1D17AD544);
}

uint64_t awd::profile::TriggerProcessingRule::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 76) = a2;
  return this;
}

uint64_t awd::profile::TriggerProcessingRule::default_instance(awd::profile::TriggerProcessingRule *this, uint64_t a2, uint64_t a3, const char *a4)
{
  uint64_t result;

  result = awd::profile::TriggerProcessingRule::default_instance_;
  if (!awd::profile::TriggerProcessingRule::default_instance_)
  {
    awd::profile::protobuf_AddDesc_AwdProfile_2eproto(0, a2, a3, a4);
    return awd::profile::TriggerProcessingRule::default_instance_;
  }
  return result;
}

double awd::profile::TriggerProcessingRule::New(awd::profile::TriggerProcessingRule *this)
{
  uint64_t v1;
  double result;

  v1 = operator new();
  *(_QWORD *)v1 = &off_1E886B4A8;
  *(_QWORD *)(v1 + 48) = 0;
  *(_QWORD *)(v1 + 56) = 0;
  *(_DWORD *)(v1 + 64) = 0;
  *(_QWORD *)(v1 + 72) = 0;
  *(_DWORD *)(v1 + 80) = 0;
  result = 0.0;
  *(_OWORD *)(v1 + 8) = 0u;
  *(_OWORD *)(v1 + 24) = 0u;
  *(_DWORD *)(v1 + 40) = 0;
  return result;
}

uint64_t awd::profile::TriggerProcessingRule::Clear(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = this;
  if (*(_BYTE *)(this + 80))
    *(_DWORD *)(this + 72) = 0;
  *(_DWORD *)(this + 16) = 0;
  if (*(int *)(this + 32) >= 1)
  {
    v2 = 0;
    do
    {
      v3 = *(_QWORD *)(*(_QWORD *)(v1 + 24) + 8 * v2);
      this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 32))(v3);
      ++v2;
    }
    while (v2 < *(int *)(v1 + 32));
  }
  *(_DWORD *)(v1 + 32) = 0;
  if (*(int *)(v1 + 56) >= 1)
  {
    v4 = 0;
    do
    {
      v5 = *(_QWORD *)(*(_QWORD *)(v1 + 48) + 8 * v4);
      this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 32))(v5);
      ++v4;
    }
    while (v4 < *(int *)(v1 + 56));
  }
  *(_DWORD *)(v1 + 56) = 0;
  *(_DWORD *)(v1 + 80) = 0;
  return this;
}

uint64_t awd::profile::TriggerProcessingRule::MergePartialFromCodedStream(awd::profile::TriggerProcessingRule *this, wireless_diagnostics::google::protobuf::io::CodedInputStream *a2)
{
  _DWORD *v4;
  unsigned int *v5;
  wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *v6;
  wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *v7;
  char *v8;
  uint64_t TagFallback;
  int v10;
  unint64_t v11;
  char *v12;
  _BYTE *v13;
  unint64_t v14;
  char *v15;
  uint64_t result;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  int v24;
  int v25;
  int v26;
  BOOL v27;
  int v28;
  int v29;
  int v30;
  unsigned int v31;
  uint64_t v32;
  int v33;
  int v34;
  _BYTE *v35;
  unint64_t v36;
  unsigned int v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  int v46;
  int v47;
  int v48;
  int v49;
  _BYTE *v50;
  unsigned int v51;
  unsigned int v52;
  unsigned int v53;

  v4 = (_DWORD *)((char *)this + 8);
  v5 = (unsigned int *)((char *)this + 72);
  v6 = (awd::profile::TriggerProcessingRule *)((char *)this + 48);
  v7 = (awd::profile::TriggerProcessingRule *)((char *)this + 24);
LABEL_2:
  while (2)
  {
    v8 = (char *)*((_QWORD *)a2 + 1);
    if ((unint64_t)v8 >= *((_QWORD *)a2 + 2) || *v8 < 0)
    {
      TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(a2);
      *((_DWORD *)a2 + 8) = TagFallback;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    else
    {
      TagFallback = *v8;
      *((_DWORD *)a2 + 8) = TagFallback;
      *((_QWORD *)a2 + 1) = v8 + 1;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    switch(TagFallback >> 3)
    {
      case 1u:
        v10 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_19;
        v12 = (char *)*((_QWORD *)a2 + 1);
        v11 = *((_QWORD *)a2 + 2);
        if ((unint64_t)v12 >= v11 || *v12 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v5);
          if (!(_DWORD)result)
            return result;
          v13 = (_BYTE *)*((_QWORD *)a2 + 1);
          v11 = *((_QWORD *)a2 + 2);
        }
        else
        {
          *v5 = *v12;
          v13 = v12 + 1;
          *((_QWORD *)a2 + 1) = v13;
        }
        *((_DWORD *)this + 20) |= 1u;
        if ((unint64_t)v13 >= v11 || *v13 != 18)
          continue;
        goto LABEL_28;
      case 2u:
        v10 = TagFallback & 7;
        if (v10 != 2)
          goto LABEL_19;
        while (2)
        {
          v17 = *((_DWORD *)this + 15);
          v18 = *((int *)this + 14);
          if ((int)v18 >= v17)
          {
            if (v17 == *((_DWORD *)this + 16))
            {
              wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve(v6);
              v17 = *((_DWORD *)this + 15);
            }
            *((_DWORD *)this + 15) = v17 + 1;
            v20 = operator new();
            *(_QWORD *)(v20 + 8) = 0;
            *(_QWORD *)(v20 + 16) = 0;
            *(_QWORD *)v20 = &off_1E886B340;
            *(_DWORD *)(v20 + 24) = 0;
            *(_QWORD *)(v20 + 32) = 0;
            v21 = *((_QWORD *)this + 6);
            v22 = *((int *)this + 14);
            *((_DWORD *)this + 14) = v22 + 1;
            *(_QWORD *)(v21 + 8 * v22) = v20;
          }
          else
          {
            v19 = *((_QWORD *)this + 6);
            *((_DWORD *)this + 14) = v18 + 1;
            v20 = *(_QWORD *)(v19 + 8 * v18);
          }
          v52 = 0;
          v23 = (char *)*((_QWORD *)a2 + 1);
          if ((unint64_t)v23 >= *((_QWORD *)a2 + 2) || *v23 < 0)
          {
            if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v52))return 0;
          }
          else
          {
            v52 = *v23;
            *((_QWORD *)a2 + 1) = v23 + 1;
          }
          v24 = *((_DWORD *)a2 + 14);
          v25 = *((_DWORD *)a2 + 15);
          *((_DWORD *)a2 + 14) = v24 + 1;
          if (v24 >= v25)
            return 0;
          wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(a2);
          if (!awd::profile::ConditionClause::MergePartialFromCodedStream((awd::profile::ConditionClause *)v20, a2)|| !*((_BYTE *)a2 + 36))
          {
            return 0;
          }
          wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(a2);
          v26 = *((_DWORD *)a2 + 14);
          v27 = __OFSUB__(v26, 1);
          v28 = v26 - 1;
          if (v28 < 0 == v27)
            *((_DWORD *)a2 + 14) = v28;
          v13 = (_BYTE *)*((_QWORD *)a2 + 1);
          v14 = *((_QWORD *)a2 + 2);
          if ((unint64_t)v13 < v14)
          {
            v29 = *v13;
            if (v29 == 18)
            {
LABEL_28:
              *((_QWORD *)a2 + 1) = v13 + 1;
              continue;
            }
            goto LABEL_45;
          }
          goto LABEL_2;
        }
      case 3u:
        v10 = TagFallback & 7;
        if (v10 == 2)
        {
          result = sub_1CC5B7D90(a2, v4);
          if (!(_DWORD)result)
            return result;
          while (1)
          {
            v13 = (_BYTE *)*((_QWORD *)a2 + 1);
            v14 = *((_QWORD *)a2 + 2);
            if ((unint64_t)v13 >= v14)
              goto LABEL_2;
            v29 = *v13;
            if (v29 == 34)
              break;
LABEL_45:
            if (v29 != 24)
              goto LABEL_2;
            v15 = v13 + 1;
            *((_QWORD *)a2 + 1) = v15;
LABEL_47:
            v51 = 0;
            if ((unint64_t)v15 >= v14 || *v15 < 0)
            {
              if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v51))return 0;
            }
            else
            {
              v51 = *v15;
              *((_QWORD *)a2 + 1) = v15 + 1;
            }
            v30 = *((_DWORD *)this + 4);
            if (v30 == *((_DWORD *)this + 5))
            {
              sub_1CC5C2EE8(v4, v30 + 1);
              v30 = *((_DWORD *)this + 4);
            }
            v31 = v51;
            v32 = *((_QWORD *)this + 1);
            *((_DWORD *)this + 4) = v30 + 1;
            *(_DWORD *)(v32 + 4 * v30) = v31;
            v33 = *((_DWORD *)this + 5) - *((_DWORD *)this + 4);
            if (v33 >= 1)
            {
              v34 = v33 + 1;
              do
              {
                v35 = (_BYTE *)*((_QWORD *)a2 + 1);
                v36 = *((_QWORD *)a2 + 2);
                if ((unint64_t)v35 >= v36 || *v35 != 24)
                  break;
                *((_QWORD *)a2 + 1) = v35 + 1;
                if ((unint64_t)(v35 + 1) >= v36 || (char)v35[1] < 0)
                {
                  if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v51))return 0;
                  v37 = v51;
                  v32 = *(_QWORD *)v4;
                }
                else
                {
                  v37 = v35[1];
                  v51 = v37;
                  *((_QWORD *)a2 + 1) = v35 + 2;
                }
                v38 = *((int *)this + 4);
                *((_DWORD *)this + 4) = v38 + 1;
                *(_DWORD *)(v32 + 4 * v38) = v37;
                --v34;
              }
              while (v34 > 1);
            }
          }
          do
          {
            *((_QWORD *)a2 + 1) = v13 + 1;
LABEL_66:
            v39 = *((_DWORD *)this + 9);
            v40 = *((int *)this + 8);
            if ((int)v40 >= v39)
            {
              if (v39 == *((_DWORD *)this + 10))
              {
                wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve(v7);
                v39 = *((_DWORD *)this + 9);
              }
              *((_DWORD *)this + 9) = v39 + 1;
              v42 = operator new();
              *(_QWORD *)(v42 + 8) = 0;
              *(_QWORD *)(v42 + 16) = 0;
              *(_QWORD *)v42 = &off_1E886B340;
              *(_DWORD *)(v42 + 24) = 0;
              *(_QWORD *)(v42 + 32) = 0;
              v43 = *((_QWORD *)this + 3);
              v44 = *((int *)this + 8);
              *((_DWORD *)this + 8) = v44 + 1;
              *(_QWORD *)(v43 + 8 * v44) = v42;
            }
            else
            {
              v41 = *((_QWORD *)this + 3);
              *((_DWORD *)this + 8) = v40 + 1;
              v42 = *(_QWORD *)(v41 + 8 * v40);
            }
            v53 = 0;
            v45 = (char *)*((_QWORD *)a2 + 1);
            if ((unint64_t)v45 >= *((_QWORD *)a2 + 2) || *v45 < 0)
            {
              if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v53))return 0;
            }
            else
            {
              v53 = *v45;
              *((_QWORD *)a2 + 1) = v45 + 1;
            }
            v46 = *((_DWORD *)a2 + 14);
            v47 = *((_DWORD *)a2 + 15);
            *((_DWORD *)a2 + 14) = v46 + 1;
            if (v46 >= v47)
              return 0;
            wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(a2);
            if (!awd::profile::ConditionClause::MergePartialFromCodedStream((awd::profile::ConditionClause *)v42, a2)|| !*((_BYTE *)a2 + 36))
            {
              return 0;
            }
            wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(a2);
            v48 = *((_DWORD *)a2 + 14);
            v27 = __OFSUB__(v48, 1);
            v49 = v48 - 1;
            if (v49 < 0 == v27)
              *((_DWORD *)a2 + 14) = v49;
            v13 = (_BYTE *)*((_QWORD *)a2 + 1);
            v50 = (_BYTE *)*((_QWORD *)a2 + 2);
          }
          while (v13 < v50 && *v13 == 34);
          if (v13 == v50 && (*((_DWORD *)a2 + 11) || *((_DWORD *)a2 + 6) == *((_DWORD *)a2 + 10)))
          {
            *((_DWORD *)a2 + 8) = 0;
            result = 1;
            *((_BYTE *)a2 + 36) = 1;
            return result;
          }
          continue;
        }
        if ((TagFallback & 7) == 0)
        {
          v15 = (char *)*((_QWORD *)a2 + 1);
          v14 = *((_QWORD *)a2 + 2);
          goto LABEL_47;
        }
LABEL_19:
        if (v10 != 4)
        {
          if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(a2, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback) & 1) == 0)return 0;
          continue;
        }
        return 1;
      case 4u:
        v10 = TagFallback & 7;
        if (v10 != 2)
          goto LABEL_19;
        goto LABEL_66;
      default:
        v10 = TagFallback & 7;
        goto LABEL_19;
    }
  }
}

uint64_t awd::profile::TriggerProcessingRule::SerializeWithCachedSizes(uint64_t this, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v5 = this;
  if ((*(_BYTE *)(this + 80) & 1) != 0)
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(unsigned int *)(this + 72), (uint64_t)a2, a4);
  if (*(int *)(v5 + 56) >= 1)
  {
    v6 = 0;
    do
      this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, *(_QWORD *)(*(_QWORD *)(v5 + 48) + 8 * v6++), a2, a4);
    while (v6 < *(int *)(v5 + 56));
  }
  if (*(int *)(v5 + 16) >= 1)
  {
    v7 = 0;
    do
      this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, *(unsigned int *)(*(_QWORD *)(v5 + 8) + 4 * v7++), (uint64_t)a2, a4);
    while (v7 < *(int *)(v5 + 16));
  }
  if (*(int *)(v5 + 32) >= 1)
  {
    v8 = 0;
    do
      this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4, *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v8++), a2, a4);
    while (v8 < *(int *)(v5 + 32));
  }
  return this;
}

uint64_t awd::profile::TriggerProcessingRule::ByteSize(awd::profile::TriggerProcessingRule *this)
{
  int v2;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v3;
  int v4;
  uint64_t v5;
  int v6;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v7;
  int v8;
  int v9;
  int v10;
  uint64_t v11;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v12;
  int v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v18;
  int v19;
  int v20;

  if ((*((_BYTE *)this + 80) & 1) != 0)
  {
    v3 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 18);
    if (v3 >= 0x80)
      v2 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v3) + 1;
    else
      v2 = 2;
  }
  else
  {
    v2 = 0;
  }
  v4 = *((_DWORD *)this + 4);
  if (v4 < 1)
  {
    v6 = 0;
  }
  else
  {
    v5 = 0;
    v6 = 0;
    do
    {
      v7 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(*((_QWORD *)this + 1)
                                                                                            + 4 * v5);
      if (v7 >= 0x80)
      {
        v8 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v7);
        v4 = *((_DWORD *)this + 4);
      }
      else
      {
        v8 = 1;
      }
      v6 += v8;
      ++v5;
    }
    while (v5 < v4);
  }
  v9 = *((_DWORD *)this + 8);
  v10 = v6 + v9 + v2 + v4;
  if (v9 >= 1)
  {
    v11 = 0;
    do
    {
      v12 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)awd::profile::ConditionClause::ByteSize(*(awd::profile::ConditionClause **)(*((_QWORD *)this + 3) + 8 * v11));
      v13 = (int)v12;
      if (v12 >= 0x80)
        v14 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v12);
      else
        v14 = 1;
      v10 += v13 + v14;
      ++v11;
    }
    while (v11 < *((int *)this + 8));
  }
  v15 = *((_DWORD *)this + 14);
  v16 = (v15 + v10);
  if (v15 >= 1)
  {
    v17 = 0;
    do
    {
      v18 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)awd::profile::ConditionClause::ByteSize(*(awd::profile::ConditionClause **)(*((_QWORD *)this + 6) + 8 * v17));
      v19 = (int)v18;
      if (v18 >= 0x80)
        v20 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v18);
      else
        v20 = 1;
      v16 = (v19 + v16 + v20);
      ++v17;
    }
    while (v17 < *((int *)this + 14));
  }
  *((_DWORD *)this + 19) = v16;
  return v16;
}

void awd::profile::TriggerProcessingRule::CopyFrom(awd::profile::TriggerProcessingRule *this, const awd::profile::TriggerProcessingRule *a2)
{
  if (a2 != this)
  {
    (*(void (**)(awd::profile::TriggerProcessingRule *))(*(_QWORD *)this + 32))(this);
    awd::profile::TriggerProcessingRule::MergeFrom(this, a2);
  }
}

uint64_t awd::profile::TriggerProcessingRule::IsInitialized(awd::profile::TriggerProcessingRule *this)
{
  return 1;
}

uint64_t awd::profile::TriggerProcessingRule::Swap(uint64_t this, awd::profile::TriggerProcessingRule *a2)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;

  if (a2 != (awd::profile::TriggerProcessingRule *)this)
  {
    v3 = this;
    v4 = *(_DWORD *)(this + 72);
    *(_DWORD *)(this + 72) = *((_DWORD *)a2 + 18);
    *((_DWORD *)a2 + 18) = v4;
    v5 = *(_QWORD *)(this + 8);
    *(_QWORD *)(this + 8) = *((_QWORD *)a2 + 1);
    v6 = *((_QWORD *)a2 + 2);
    *((_QWORD *)a2 + 1) = v5;
    v7 = *(_QWORD *)(this + 16);
    *(_QWORD *)(this + 16) = v6;
    *((_QWORD *)a2 + 2) = v7;
    wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Swap();
    this = wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Swap();
    v8 = *(_DWORD *)(v3 + 80);
    *(_DWORD *)(v3 + 80) = *((_DWORD *)a2 + 20);
    *((_DWORD *)a2 + 20) = v8;
    v9 = *(_DWORD *)(v3 + 76);
    *(_DWORD *)(v3 + 76) = *((_DWORD *)a2 + 19);
    *((_DWORD *)a2 + 19) = v9;
  }
  return this;
}

_QWORD *awd::profile::TriggerProcessingRule::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return sub_1CC59E69C(a1, "awd.profile.TriggerProcessingRule");
}

uint64_t awd::profile::AggregationSpec::SharedCtor(uint64_t this)
{
  *(_QWORD *)(this + 16) = 0;
  *(_QWORD *)(this + 8) = MEMORY[0x1E0DE8338];
  *(_DWORD *)(this + 24) = 0;
  return this;
}

awd::profile::AggregationSpec *awd::profile::AggregationSpec::AggregationSpec(awd::profile::AggregationSpec *this, const awd::profile::AggregationSpec *a2)
{
  uint64_t v3;

  *((_QWORD *)this + 2) = 0;
  v3 = MEMORY[0x1E0DE8338];
  *(_QWORD *)this = &off_1E886B2C8;
  *((_QWORD *)this + 1) = v3;
  *((_DWORD *)this + 6) = 0;
  awd::profile::AggregationSpec::MergeFrom(this, a2);
  return this;
}

void sub_1CC5BF768(_Unwind_Exception *a1)
{
  wireless_diagnostics::google::protobuf::MessageLite *v1;

  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(v1);
  _Unwind_Resume(a1);
}

void awd::profile::AggregationSpec::MergeFrom(awd::profile::AggregationSpec *this, const awd::profile::AggregationSpec *a2)
{
  int v4;
  int v5;
  const std::string *v6;
  std::string *v7;
  _BYTE v8[48];

  if (a2 == this)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v8);
  }
  LOBYTE(v4) = *((_BYTE *)a2 + 24);
  if ((_BYTE)v4)
  {
    if ((*((_BYTE *)a2 + 24) & 1) != 0)
    {
      v5 = *((_DWORD *)a2 + 4);
      *((_DWORD *)this + 6) |= 1u;
      *((_DWORD *)this + 4) = v5;
      v4 = *((_DWORD *)a2 + 6);
    }
    if ((v4 & 2) != 0)
    {
      v6 = (const std::string *)*((_QWORD *)a2 + 1);
      *((_DWORD *)this + 6) |= 2u;
      v7 = (std::string *)*((_QWORD *)this + 1);
      if (v7 == (std::string *)MEMORY[0x1E0DE8338])
      {
        v7 = (std::string *)operator new();
        v7->__r_.__value_.__l.__size_ = 0;
        v7->__r_.__value_.__r.__words[2] = 0;
        v7->__r_.__value_.__r.__words[0] = 0;
        *((_QWORD *)this + 1) = v7;
      }
      std::string::operator=(v7, v6);
    }
  }
}

void sub_1CC5BF860(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void awd::profile::AggregationSpec::~AggregationSpec(awd::profile::AggregationSpec *this)
{
  *(_QWORD *)this = &off_1E886B2C8;
  awd::profile::AggregationSpec::SharedDtor((uint64_t)this);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

{
  *(_QWORD *)this = &off_1E886B2C8;
  awd::profile::AggregationSpec::SharedDtor((uint64_t)this);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

{
  *(_QWORD *)this = &off_1E886B2C8;
  awd::profile::AggregationSpec::SharedDtor((uint64_t)this);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
  JUMPOUT(0x1D17AD544);
}

uint64_t awd::profile::AggregationSpec::SharedDtor(uint64_t this)
{
  uint64_t v1;

  v1 = *(_QWORD *)(this + 8);
  if (v1 != MEMORY[0x1E0DE8338] && v1 != 0)
  {
    if (*(char *)(v1 + 23) < 0)
      operator delete(*(void **)v1);
    JUMPOUT(0x1D17AD544);
  }
  return this;
}

uint64_t awd::profile::AggregationSpec::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 20) = a2;
  return this;
}

uint64_t awd::profile::AggregationSpec::default_instance(awd::profile::AggregationSpec *this, uint64_t a2, uint64_t a3, const char *a4)
{
  uint64_t result;

  result = awd::profile::AggregationSpec::default_instance_;
  if (!awd::profile::AggregationSpec::default_instance_)
  {
    awd::profile::protobuf_AddDesc_AwdProfile_2eproto(0, a2, a3, a4);
    return awd::profile::AggregationSpec::default_instance_;
  }
  return result;
}

uint64_t awd::profile::AggregationSpec::New(awd::profile::AggregationSpec *this)
{
  uint64_t result;
  uint64_t v2;

  result = operator new();
  *(_QWORD *)(result + 16) = 0;
  v2 = MEMORY[0x1E0DE8338];
  *(_QWORD *)result = &off_1E886B2C8;
  *(_QWORD *)(result + 8) = v2;
  *(_DWORD *)(result + 24) = 0;
  return result;
}

uint64_t awd::profile::AggregationSpec::Clear(uint64_t this)
{
  char v1;
  uint64_t v2;

  v1 = *(_BYTE *)(this + 24);
  if (v1)
  {
    *(_DWORD *)(this + 16) = 0;
    if ((v1 & 2) != 0)
    {
      v2 = *(_QWORD *)(this + 8);
      if (v2 != MEMORY[0x1E0DE8338])
      {
        if (*(char *)(v2 + 23) < 0)
        {
          **(_BYTE **)v2 = 0;
          *(_QWORD *)(v2 + 8) = 0;
        }
        else
        {
          *(_BYTE *)v2 = 0;
          *(_BYTE *)(v2 + 23) = 0;
        }
      }
    }
  }
  *(_DWORD *)(this + 24) = 0;
  return this;
}

uint64_t awd::profile::AggregationSpec::MergePartialFromCodedStream(awd::profile::AggregationSpec *this, wireless_diagnostics::google::protobuf::io::CodedInputStream *a2)
{
  unsigned int *v4;
  uint64_t v5;
  char *v6;
  uint64_t TagFallback;
  int v8;
  int v9;
  unint64_t v10;
  char *v11;
  _BYTE *v12;
  _QWORD *v13;
  uint64_t result;

  v4 = (unsigned int *)((char *)this + 16);
  v5 = MEMORY[0x1E0DE8338];
  while (1)
  {
    while (1)
    {
      while (1)
      {
        v6 = (char *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v6 >= *((_QWORD *)a2 + 2) || *v6 < 0)
        {
          TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(a2);
          *((_DWORD *)a2 + 8) = TagFallback;
          if (!(_DWORD)TagFallback)
            return 1;
        }
        else
        {
          TagFallback = *v6;
          *((_DWORD *)a2 + 8) = TagFallback;
          *((_QWORD *)a2 + 1) = v6 + 1;
          if (!(_DWORD)TagFallback)
            return 1;
        }
        if (TagFallback >> 3 != 1)
          break;
        v8 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_16;
        v11 = (char *)*((_QWORD *)a2 + 1);
        v10 = *((_QWORD *)a2 + 2);
        if ((unint64_t)v11 >= v10 || *v11 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v4);
          if (!(_DWORD)result)
            return result;
          v12 = (_BYTE *)*((_QWORD *)a2 + 1);
          v10 = *((_QWORD *)a2 + 2);
        }
        else
        {
          *v4 = *v11;
          v12 = v11 + 1;
          *((_QWORD *)a2 + 1) = v12;
        }
        v9 = *((_DWORD *)this + 6) | 1;
        *((_DWORD *)this + 6) = v9;
        if ((unint64_t)v12 < v10 && *v12 == 18)
        {
          *((_QWORD *)a2 + 1) = v12 + 1;
          goto LABEL_24;
        }
      }
      if (TagFallback >> 3 != 2)
        break;
      v8 = TagFallback & 7;
      if (v8 != 2)
        goto LABEL_16;
      v9 = *((_DWORD *)this + 6);
LABEL_24:
      *((_DWORD *)this + 6) = v9 | 2;
      if (*((_QWORD *)this + 1) == v5)
      {
        v13 = (_QWORD *)operator new();
        v13[1] = 0;
        v13[2] = 0;
        *v13 = 0;
        *((_QWORD *)this + 1) = v13;
      }
      result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString();
      if (!(_DWORD)result)
        return result;
      if (*((_QWORD *)a2 + 1) == *((_QWORD *)a2 + 2)
        && (*((_DWORD *)a2 + 11) || *((_DWORD *)a2 + 6) == *((_DWORD *)a2 + 10)))
      {
        *((_DWORD *)a2 + 8) = 0;
        result = 1;
        *((_BYTE *)a2 + 36) = 1;
        return result;
      }
    }
    v8 = TagFallback & 7;
LABEL_16:
    if (v8 == 4)
      return 1;
    if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(a2, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback) & 1) == 0)return 0;
  }
}

uint64_t awd::profile::AggregationSpec::SerializeWithCachedSizes(uint64_t this, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v4;
  int v5;

  v4 = this;
  v5 = *(_DWORD *)(this + 24);
  if ((v5 & 1) != 0)
  {
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(unsigned int *)(this + 16), (uint64_t)a2, a4);
    v5 = *(_DWORD *)(v4 + 24);
  }
  if ((v5 & 2) != 0)
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString();
  return this;
}

uint64_t awd::profile::AggregationSpec::ByteSize(awd::profile::AggregationSpec *this)
{
  char v2;
  uint64_t v3;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v4;
  uint64_t v5;
  int v6;
  char v7;
  uint64_t v8;
  unint64_t v9;
  int v10;

  v2 = *((_BYTE *)this + 24);
  if (v2)
  {
    if ((*((_BYTE *)this + 24) & 1) != 0)
    {
      v4 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 4);
      if (v4 >= 0x80)
      {
        v3 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v4) + 1;
        if ((*((_DWORD *)this + 6) & 2) == 0)
          goto LABEL_19;
      }
      else
      {
        v3 = 2;
        if ((v2 & 2) == 0)
          goto LABEL_19;
      }
    }
    else
    {
      v3 = 0;
      if ((*((_BYTE *)this + 24) & 2) == 0)
        goto LABEL_19;
    }
    v5 = *((_QWORD *)this + 1);
    v6 = *(unsigned __int8 *)(v5 + 23);
    v7 = v6;
    v8 = *(_QWORD *)(v5 + 8);
    if ((v6 & 0x80u) == 0)
      v9 = *(unsigned __int8 *)(v5 + 23);
    else
      v9 = v8;
    if (v9 >= 0x80)
    {
      v10 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v9);
      v6 = *(unsigned __int8 *)(v5 + 23);
      v8 = *(_QWORD *)(v5 + 8);
      v7 = *(_BYTE *)(v5 + 23);
    }
    else
    {
      v10 = 1;
    }
    if (v7 < 0)
      v6 = v8;
    v3 = (v3 + v10 + v6 + 1);
  }
  else
  {
    v3 = 0;
  }
LABEL_19:
  *((_DWORD *)this + 5) = v3;
  return v3;
}

void awd::profile::AggregationSpec::CopyFrom(awd::profile::AggregationSpec *this, const awd::profile::AggregationSpec *a2)
{
  if (a2 != this)
  {
    (*(void (**)(awd::profile::AggregationSpec *))(*(_QWORD *)this + 32))(this);
    awd::profile::AggregationSpec::MergeFrom(this, a2);
  }
}

uint64_t awd::profile::AggregationSpec::IsInitialized(awd::profile::AggregationSpec *this)
{
  return 1;
}

uint64_t awd::profile::AggregationSpec::Swap(uint64_t this, awd::profile::AggregationSpec *a2)
{
  int v2;
  uint64_t v3;

  if (a2 != (awd::profile::AggregationSpec *)this)
  {
    v2 = *(_DWORD *)(this + 16);
    *(_DWORD *)(this + 16) = *((_DWORD *)a2 + 4);
    *((_DWORD *)a2 + 4) = v2;
    v3 = *(_QWORD *)(this + 8);
    *(_QWORD *)(this + 8) = *((_QWORD *)a2 + 1);
    *((_QWORD *)a2 + 1) = v3;
    LODWORD(v3) = *(_DWORD *)(this + 24);
    *(_DWORD *)(this + 24) = *((_DWORD *)a2 + 6);
    *((_DWORD *)a2 + 6) = v3;
    LODWORD(v3) = *(_DWORD *)(this + 20);
    *(_DWORD *)(this + 20) = *((_DWORD *)a2 + 5);
    *((_DWORD *)a2 + 5) = v3;
  }
  return this;
}

_QWORD *awd::profile::AggregationSpec::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return sub_1CC59E69C(a1, "awd.profile.AggregationSpec");
}

double awd::profile::MetricFileSpec::SharedCtor(awd::profile::MetricFileSpec *this)
{
  double result;

  *(_QWORD *)&result = 0x100000000;
  *((_QWORD *)this + 1) = 0x100000000;
  *((_DWORD *)this + 4) = 0;
  *((_BYTE *)this + 20) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = 0;
  return result;
}

awd::profile::MetricFileSpec *awd::profile::MetricFileSpec::MetricFileSpec(awd::profile::MetricFileSpec *this, const awd::profile::MetricFileSpec *a2)
{
  *(_QWORD *)this = &off_1E886B1D8;
  *((_QWORD *)this + 1) = 0x100000000;
  *((_DWORD *)this + 4) = 0;
  *((_BYTE *)this + 20) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = 0;
  awd::profile::MetricFileSpec::MergeFrom(this, a2);
  return this;
}

void sub_1CC5BFE40(_Unwind_Exception *a1)
{
  wireless_diagnostics::google::protobuf::MessageLite *v1;

  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(v1);
  _Unwind_Resume(a1);
}

void awd::profile::MetricFileSpec::MergeFrom(awd::profile::MetricFileSpec *this, const awd::profile::MetricFileSpec *a2)
{
  int v4;
  uint64_t v5;
  int v6;
  int v7;
  int v8;
  char v9;
  _BYTE v10[48];

  if (a2 == this)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v10);
  }
  LOBYTE(v4) = *((_BYTE *)a2 + 36);
  if ((_BYTE)v4)
  {
    if ((*((_BYTE *)a2 + 36) & 1) != 0)
    {
      v6 = *((_DWORD *)a2 + 2);
      *((_DWORD *)this + 9) |= 1u;
      *((_DWORD *)this + 2) = v6;
      v4 = *((_DWORD *)a2 + 9);
      if ((v4 & 2) == 0)
      {
LABEL_6:
        if ((v4 & 4) == 0)
          goto LABEL_7;
        goto LABEL_13;
      }
    }
    else if ((*((_BYTE *)a2 + 36) & 2) == 0)
    {
      goto LABEL_6;
    }
    v7 = *((_DWORD *)a2 + 3);
    *((_DWORD *)this + 9) |= 2u;
    *((_DWORD *)this + 3) = v7;
    v4 = *((_DWORD *)a2 + 9);
    if ((v4 & 4) == 0)
    {
LABEL_7:
      if ((v4 & 8) == 0)
        goto LABEL_8;
      goto LABEL_14;
    }
LABEL_13:
    v8 = *((_DWORD *)a2 + 4);
    *((_DWORD *)this + 9) |= 4u;
    *((_DWORD *)this + 4) = v8;
    v4 = *((_DWORD *)a2 + 9);
    if ((v4 & 8) == 0)
    {
LABEL_8:
      if ((v4 & 0x10) == 0)
        return;
      goto LABEL_9;
    }
LABEL_14:
    v9 = *((_BYTE *)a2 + 20);
    *((_DWORD *)this + 9) |= 8u;
    *((_BYTE *)this + 20) = v9;
    if ((*((_DWORD *)a2 + 9) & 0x10) == 0)
      return;
LABEL_9:
    v5 = *((_QWORD *)a2 + 3);
    *((_DWORD *)this + 9) |= 0x10u;
    *((_QWORD *)this + 3) = v5;
  }
}

void sub_1CC5BFF64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void awd::profile::MetricFileSpec::~MetricFileSpec(awd::profile::MetricFileSpec *this)
{
  *(_QWORD *)this = &off_1E886B1D8;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

{
  *(_QWORD *)this = &off_1E886B1D8;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

{
  *(_QWORD *)this = &off_1E886B1D8;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
  JUMPOUT(0x1D17AD544);
}

uint64_t awd::profile::MetricFileSpec::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 32) = a2;
  return this;
}

uint64_t awd::profile::MetricFileSpec::default_instance(awd::profile::MetricFileSpec *this, uint64_t a2, uint64_t a3, const char *a4)
{
  uint64_t result;

  result = awd::profile::MetricFileSpec::default_instance_;
  if (!awd::profile::MetricFileSpec::default_instance_)
  {
    awd::profile::protobuf_AddDesc_AwdProfile_2eproto(0, a2, a3, a4);
    return awd::profile::MetricFileSpec::default_instance_;
  }
  return result;
}

double awd::profile::MetricFileSpec::New(awd::profile::MetricFileSpec *this)
{
  uint64_t v1;
  double result;

  v1 = operator new();
  *(_QWORD *)v1 = &off_1E886B1D8;
  *(_QWORD *)&result = 0x100000000;
  *(_QWORD *)(v1 + 8) = 0x100000000;
  *(_DWORD *)(v1 + 16) = 0;
  *(_BYTE *)(v1 + 20) = 0;
  *(_QWORD *)(v1 + 24) = 0;
  *(_QWORD *)(v1 + 32) = 0;
  return result;
}

uint64_t awd::profile::MetricFileSpec::Clear(uint64_t this)
{
  if (*(_BYTE *)(this + 36))
  {
    *(_QWORD *)(this + 8) = 0x100000000;
    *(_DWORD *)(this + 16) = 0;
    *(_BYTE *)(this + 20) = 0;
    *(_QWORD *)(this + 24) = 0;
  }
  *(_DWORD *)(this + 36) = 0;
  return this;
}

uint64_t awd::profile::MetricFileSpec::MergePartialFromCodedStream(awd::profile::MetricFileSpec *this, wireless_diagnostics::google::protobuf::io::CodedInputStream *a2)
{
  unsigned int *v4;
  unsigned int *v5;
  unint64_t *v6;
  char *v7;
  uint64_t TagFallback;
  int v9;
  unint64_t v10;
  char *v11;
  _BYTE *v12;
  unint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  unsigned __int8 *v17;
  unsigned int v18;
  _BYTE *v19;
  _BYTE *v20;
  unsigned int v21;
  unsigned __int8 *v22;
  unsigned __int8 *v23;
  uint64_t result;
  unsigned int v25;
  unsigned int v26;

  v4 = (unsigned int *)((char *)this + 8);
  v5 = (unsigned int *)((char *)this + 16);
  v6 = (unint64_t *)((char *)this + 24);
  while (2)
  {
    v7 = (char *)*((_QWORD *)a2 + 1);
    if ((unint64_t)v7 >= *((_QWORD *)a2 + 2) || *v7 < 0)
    {
      TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(a2);
      *((_DWORD *)a2 + 8) = TagFallback;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    else
    {
      TagFallback = *v7;
      *((_DWORD *)a2 + 8) = TagFallback;
      *((_QWORD *)a2 + 1) = v7 + 1;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    switch(TagFallback >> 3)
    {
      case 1u:
        v9 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_22;
        v11 = (char *)*((_QWORD *)a2 + 1);
        v10 = *((_QWORD *)a2 + 2);
        if ((unint64_t)v11 >= v10 || *v11 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v4);
          if (!(_DWORD)result)
            return result;
          v12 = (_BYTE *)*((_QWORD *)a2 + 1);
          v10 = *((_QWORD *)a2 + 2);
        }
        else
        {
          *v4 = *v11;
          v12 = v11 + 1;
          *((_QWORD *)a2 + 1) = v12;
        }
        *((_DWORD *)this + 9) |= 1u;
        if ((unint64_t)v12 < v10 && *v12 == 16)
        {
          v15 = v12 + 1;
          *((_QWORD *)a2 + 1) = v15;
          goto LABEL_30;
        }
        continue;
      case 2u:
        v9 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_22;
        v15 = (char *)*((_QWORD *)a2 + 1);
        v10 = *((_QWORD *)a2 + 2);
LABEL_30:
        v26 = 0;
        if ((unint64_t)v15 >= v10 || *v15 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v26);
          if (!(_DWORD)result)
            return result;
          v18 = v26;
        }
        else
        {
          v18 = *v15;
          *((_QWORD *)a2 + 1) = v15 + 1;
        }
        if (v18 - 1 <= 2)
        {
          *((_DWORD *)this + 9) |= 2u;
          *((_DWORD *)this + 3) = v18;
        }
        v19 = (_BYTE *)*((_QWORD *)a2 + 1);
        v13 = *((_QWORD *)a2 + 2);
        if ((unint64_t)v19 >= v13 || *v19 != 24)
          continue;
        v16 = v19 + 1;
        *((_QWORD *)a2 + 1) = v16;
LABEL_40:
        if ((unint64_t)v16 >= v13 || *v16 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v5);
          if (!(_DWORD)result)
            return result;
          v20 = (_BYTE *)*((_QWORD *)a2 + 1);
          v13 = *((_QWORD *)a2 + 2);
        }
        else
        {
          *v5 = *v16;
          v20 = v16 + 1;
          *((_QWORD *)a2 + 1) = v20;
        }
        *((_DWORD *)this + 9) |= 4u;
        if ((unint64_t)v20 >= v13 || *v20 != 32)
          continue;
        v17 = v20 + 1;
        *((_QWORD *)a2 + 1) = v17;
LABEL_48:
        v25 = 0;
        if ((unint64_t)v17 >= v13 || (char)*v17 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v25);
          if (!(_DWORD)result)
            return result;
          v21 = v25;
          v22 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
          v13 = *((_QWORD *)a2 + 2);
        }
        else
        {
          v21 = *v17;
          v22 = v17 + 1;
          *((_QWORD *)a2 + 1) = v22;
        }
        *((_BYTE *)this + 20) = v21 != 0;
        *((_DWORD *)this + 9) |= 8u;
        if ((int)v13 - (int)v22 < 2 || *v22 != 128 || v22[1] != 1)
          continue;
        v14 = (char *)(v22 + 2);
        *((_QWORD *)a2 + 1) = v14;
        goto LABEL_57;
      case 3u:
        v9 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_22;
        v16 = (char *)*((_QWORD *)a2 + 1);
        v13 = *((_QWORD *)a2 + 2);
        goto LABEL_40;
      case 4u:
        v9 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_22;
        v17 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
        v13 = *((_QWORD *)a2 + 2);
        goto LABEL_48;
      default:
        if (TagFallback >> 3 == 16)
        {
          v9 = TagFallback & 7;
          if ((TagFallback & 7) != 0)
            goto LABEL_22;
          v14 = (char *)*((_QWORD *)a2 + 1);
          v13 = *((_QWORD *)a2 + 2);
LABEL_57:
          if ((unint64_t)v14 >= v13 || *v14 < 0)
          {
            result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint64Fallback(a2, v6);
            if (!(_DWORD)result)
              return result;
            v23 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
            v13 = *((_QWORD *)a2 + 2);
          }
          else
          {
            *v6 = *v14;
            v23 = (unsigned __int8 *)(v14 + 1);
            *((_QWORD *)a2 + 1) = v23;
          }
          *((_DWORD *)this + 9) |= 0x10u;
          if (v23 == (unsigned __int8 *)v13 && (*((_DWORD *)a2 + 11) || *((_DWORD *)a2 + 6) == *((_DWORD *)a2 + 10)))
          {
            *((_DWORD *)a2 + 8) = 0;
            result = 1;
            *((_BYTE *)a2 + 36) = 1;
            return result;
          }
          continue;
        }
        v9 = TagFallback & 7;
LABEL_22:
        if (v9 != 4)
        {
          if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(a2, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback) & 1) == 0)return 0;
          continue;
        }
        return 1;
    }
  }
}

uint64_t awd::profile::MetricFileSpec::SerializeWithCachedSizes(uint64_t this, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  int v6;

  v5 = this;
  v6 = *(_DWORD *)(this + 36);
  if ((v6 & 1) != 0)
  {
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(unsigned int *)(this + 8), (uint64_t)a2, a4);
    v6 = *(_DWORD *)(v5 + 36);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0)
        goto LABEL_4;
      goto LABEL_9;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, *(unsigned int *)(v5 + 12), (uint64_t)a2, a4);
  v6 = *(_DWORD *)(v5 + 36);
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0)
      goto LABEL_5;
    goto LABEL_10;
  }
LABEL_9:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, *(unsigned int *)(v5 + 16), (uint64_t)a2, a4);
  v6 = *(_DWORD *)(v5 + 36);
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0)
      return this;
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt64((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x10, *(_QWORD *)(v5 + 24), (uint64_t)a2, a4);
  }
LABEL_10:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4, *(unsigned __int8 *)(v5 + 20), (uint64_t)a2, a4);
  if ((*(_DWORD *)(v5 + 36) & 0x10) != 0)
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt64((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x10, *(_QWORD *)(v5 + 24), (uint64_t)a2, a4);
  return this;
}

uint64_t awd::profile::MetricFileSpec::ByteSize(awd::profile::MetricFileSpec *this)
{
  int v2;
  uint64_t v3;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v4;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v5;
  int v6;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v7;
  int v8;

  LOBYTE(v2) = *((_BYTE *)this + 36);
  if (!(_BYTE)v2)
  {
    v3 = 0;
    goto LABEL_26;
  }
  if ((*((_BYTE *)this + 36) & 1) == 0)
  {
    LODWORD(v3) = 0;
    if ((*((_BYTE *)this + 36) & 2) == 0)
      goto LABEL_16;
LABEL_10:
    v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 3);
    if ((v5 & 0x80000000) != 0)
    {
      v6 = 11;
    }
    else if (v5 >= 0x80)
    {
      v6 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v5) + 1;
      v2 = *((_DWORD *)this + 9);
    }
    else
    {
      v6 = 2;
    }
    LODWORD(v3) = v6 + v3;
    goto LABEL_16;
  }
  v4 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 2);
  if (v4 < 0x80)
  {
    LODWORD(v3) = 2;
    if ((v2 & 2) == 0)
      goto LABEL_16;
    goto LABEL_10;
  }
  LODWORD(v3) = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v4) + 1;
  v2 = *((_DWORD *)this + 9);
  if ((v2 & 2) != 0)
    goto LABEL_10;
LABEL_16:
  if ((v2 & 4) != 0)
  {
    v7 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 4);
    if (v7 >= 0x80)
    {
      v8 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v7) + 1;
      v2 = *((_DWORD *)this + 9);
    }
    else
    {
      v8 = 2;
    }
    LODWORD(v3) = v8 + v3;
  }
  if ((v2 & 8) != 0)
    v3 = (v3 + 2);
  else
    v3 = v3;
  if ((v2 & 0x10) != 0)
    v3 = v3
       + wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize64(*((wireless_diagnostics::google::protobuf::io::CodedOutputStream **)this + 3))
       + 2;
LABEL_26:
  *((_DWORD *)this + 8) = v3;
  return v3;
}

void awd::profile::MetricFileSpec::CopyFrom(awd::profile::MetricFileSpec *this, const awd::profile::MetricFileSpec *a2)
{
  if (a2 != this)
  {
    (*(void (**)(awd::profile::MetricFileSpec *))(*(_QWORD *)this + 32))(this);
    awd::profile::MetricFileSpec::MergeFrom(this, a2);
  }
}

uint64_t awd::profile::MetricFileSpec::IsInitialized(awd::profile::MetricFileSpec *this)
{
  return 1;
}

uint64_t awd::profile::MetricFileSpec::Swap(uint64_t this, awd::profile::MetricFileSpec *a2)
{
  int v2;
  int v3;
  int v4;
  uint64_t v5;

  if (a2 != (awd::profile::MetricFileSpec *)this)
  {
    v2 = *(_DWORD *)(this + 8);
    *(_DWORD *)(this + 8) = *((_DWORD *)a2 + 2);
    *((_DWORD *)a2 + 2) = v2;
    v3 = *(_DWORD *)(this + 12);
    *(_DWORD *)(this + 12) = *((_DWORD *)a2 + 3);
    *((_DWORD *)a2 + 3) = v3;
    v4 = *(_DWORD *)(this + 16);
    *(_DWORD *)(this + 16) = *((_DWORD *)a2 + 4);
    *((_DWORD *)a2 + 4) = v4;
    LOBYTE(v4) = *(_BYTE *)(this + 20);
    *(_BYTE *)(this + 20) = *((_BYTE *)a2 + 20);
    *((_BYTE *)a2 + 20) = v4;
    v5 = *(_QWORD *)(this + 24);
    *(_QWORD *)(this + 24) = *((_QWORD *)a2 + 3);
    *((_QWORD *)a2 + 3) = v5;
    LODWORD(v5) = *(_DWORD *)(this + 36);
    *(_DWORD *)(this + 36) = *((_DWORD *)a2 + 9);
    *((_DWORD *)a2 + 9) = v5;
    LODWORD(v5) = *(_DWORD *)(this + 32);
    *(_DWORD *)(this + 32) = *((_DWORD *)a2 + 8);
    *((_DWORD *)a2 + 8) = v5;
  }
  return this;
}

_QWORD *awd::profile::MetricFileSpec::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return sub_1CC59E69C(a1, "awd.profile.MetricFileSpec");
}

BOOL awd::profile::TaskingCriteria_BuildType_IsValid(awd::profile *this)
{
  return ((_DWORD)this - 1) < 4;
}

uint64_t awd::profile::TaskingCriteria::SharedCtor(uint64_t this)
{
  *(_QWORD *)(this + 24) = 0;
  return this;
}

awd::profile::TaskingCriteria *awd::profile::TaskingCriteria::TaskingCriteria(awd::profile::TaskingCriteria *this, const awd::profile::TaskingCriteria *a2)
{
  *(_QWORD *)this = &off_1E886B3B8;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  awd::profile::TaskingCriteria::MergeFrom(this, a2);
  return this;
}

void sub_1CC5C06A0(_Unwind_Exception *a1)
{
  wireless_diagnostics::google::protobuf::MessageLite *v1;
  _QWORD *v2;
  _QWORD *v3;

  v3 = v2;
  if (*v3)
    MEMORY[0x1D17AD52C](*v3, 0x1000C8052888210);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(v1);
  _Unwind_Resume(a1);
}

void awd::profile::TaskingCriteria::MergeFrom(awd::profile::TaskingCriteria *this, const awd::profile::TaskingCriteria *a2)
{
  int v4;
  _BYTE v5[48];

  if (a2 == this)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v5);
  }
  v4 = *((_DWORD *)a2 + 4);
  if (v4)
  {
    sub_1CC5C2EE8((_DWORD *)this + 2, *((_DWORD *)this + 4) + v4);
    memcpy((void *)(*((_QWORD *)this + 1) + 4 * *((int *)this + 4)), *((const void **)a2 + 1), 4 * *((int *)a2 + 4));
    *((_DWORD *)this + 4) += *((_DWORD *)a2 + 4);
  }
}

void sub_1CC5C0784(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void awd::profile::TaskingCriteria::~TaskingCriteria(awd::profile::TaskingCriteria *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_1E886B3B8;
  v2 = *((_QWORD *)this + 1);
  if (v2)
    MEMORY[0x1D17AD52C](v2, 0x1000C8052888210);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

{
  awd::profile::TaskingCriteria::~TaskingCriteria(this);
  JUMPOUT(0x1D17AD544);
}

uint64_t awd::profile::TaskingCriteria::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 24) = a2;
  return this;
}

uint64_t awd::profile::TaskingCriteria::default_instance(awd::profile::TaskingCriteria *this, uint64_t a2, uint64_t a3, const char *a4)
{
  uint64_t result;

  result = awd::profile::TaskingCriteria::default_instance_;
  if (!awd::profile::TaskingCriteria::default_instance_)
  {
    awd::profile::protobuf_AddDesc_AwdProfile_2eproto(0, a2, a3, a4);
    return awd::profile::TaskingCriteria::default_instance_;
  }
  return result;
}

_QWORD *awd::profile::TaskingCriteria::New(awd::profile::TaskingCriteria *this)
{
  _QWORD *result;

  result = (_QWORD *)operator new();
  *result = &off_1E886B3B8;
  result[1] = 0;
  result[2] = 0;
  result[3] = 0;
  return result;
}

uint64_t awd::profile::TaskingCriteria::Clear(uint64_t this)
{
  *(_DWORD *)(this + 16) = 0;
  *(_DWORD *)(this + 28) = 0;
  return this;
}

uint64_t awd::profile::TaskingCriteria::MergePartialFromCodedStream(awd::profile::TaskingCriteria *this, wireless_diagnostics::google::protobuf::io::CodedInputStream *a2)
{
  _DWORD *v4;
  char *v5;
  uint64_t TagFallback;
  int v7;
  char *v8;
  char *v9;
  unsigned int v10;
  int v11;
  uint64_t v12;
  char *v13;
  uint64_t result;
  unsigned int v15;

  v4 = (_DWORD *)((char *)this + 8);
  while (1)
  {
    while (1)
    {
      v5 = (char *)*((_QWORD *)a2 + 1);
      if ((unint64_t)v5 >= *((_QWORD *)a2 + 2) || *v5 < 0)
      {
        TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(a2);
        *((_DWORD *)a2 + 8) = TagFallback;
        if (!(_DWORD)TagFallback)
          return 1;
      }
      else
      {
        TagFallback = *v5;
        *((_DWORD *)a2 + 8) = TagFallback;
        *((_QWORD *)a2 + 1) = v5 + 1;
        if (!(_DWORD)TagFallback)
          return 1;
      }
      v7 = TagFallback & 7;
      if ((TagFallback & 0xFFFFFFF8) == 8)
        break;
LABEL_10:
      if (v7 == 4)
        return 1;
      if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(a2, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback) & 1) == 0)return 0;
    }
    if ((TagFallback & 7) != 0)
      break;
    v9 = (char *)*((_QWORD *)a2 + 1);
    v8 = (char *)*((_QWORD *)a2 + 2);
    while (1)
    {
      v15 = 0;
      if (v9 >= v8 || *v9 < 0)
      {
        result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v15);
        if (!(_DWORD)result)
          return result;
        v10 = v15;
      }
      else
      {
        v10 = *v9;
        *((_QWORD *)a2 + 1) = v9 + 1;
      }
      if (v10 - 1 <= 3)
      {
        v11 = *((_DWORD *)this + 4);
        if (v11 == *((_DWORD *)this + 5))
        {
          sub_1CC5C2EE8(v4, v11 + 1);
          v11 = *((_DWORD *)this + 4);
        }
        v12 = *((_QWORD *)this + 1);
        *((_DWORD *)this + 4) = v11 + 1;
        *(_DWORD *)(v12 + 4 * v11) = v10;
      }
LABEL_25:
      v13 = (char *)*((_QWORD *)a2 + 1);
      v8 = (char *)*((_QWORD *)a2 + 2);
      if (v13 >= v8 || *v13 != 8)
        break;
      v9 = v13 + 1;
      *((_QWORD *)a2 + 1) = v9;
    }
    if (v13 == v8 && (*((_DWORD *)a2 + 11) || *((_DWORD *)a2 + 6) == *((_DWORD *)a2 + 10)))
    {
      *((_DWORD *)a2 + 8) = 0;
      result = 1;
      *((_BYTE *)a2 + 36) = 1;
      return result;
    }
  }
  if (v7 != 2)
    goto LABEL_10;
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadPackedEnumNoInline();
  if ((_DWORD)result)
    goto LABEL_25;
  return result;
}

uint64_t awd::profile::TaskingCriteria::SerializeWithCachedSizes(uint64_t this, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  uint64_t v6;

  if (*(int *)(this + 16) >= 1)
  {
    v5 = this;
    v6 = 0;
    do
      this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(unsigned int *)(*(_QWORD *)(v5 + 8) + 4 * v6++), (uint64_t)a2, a4);
    while (v6 < *(int *)(v5 + 16));
  }
  return this;
}

uint64_t awd::profile::TaskingCriteria::ByteSize(awd::profile::TaskingCriteria *this)
{
  int v2;
  uint64_t v3;
  int v4;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v5;
  int v6;
  uint64_t result;

  v2 = *((_DWORD *)this + 4);
  if (v2 < 1)
  {
    v4 = 0;
  }
  else
  {
    v3 = 0;
    v4 = 0;
    do
    {
      v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(*((_QWORD *)this + 1)
                                                                                            + 4 * v3);
      if ((v5 & 0x80000000) != 0)
      {
        v6 = 10;
      }
      else if (v5 >= 0x80)
      {
        v6 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v5);
        v2 = *((_DWORD *)this + 4);
      }
      else
      {
        v6 = 1;
      }
      v4 += v6;
      ++v3;
    }
    while (v3 < v2);
  }
  result = (v2 + v4);
  *((_DWORD *)this + 6) = result;
  return result;
}

void awd::profile::TaskingCriteria::CopyFrom(awd::profile::TaskingCriteria *this, const awd::profile::TaskingCriteria *a2)
{
  if (a2 != this)
  {
    (*(void (**)(awd::profile::TaskingCriteria *))(*(_QWORD *)this + 32))(this);
    awd::profile::TaskingCriteria::MergeFrom(this, a2);
  }
}

uint64_t awd::profile::TaskingCriteria::IsInitialized(awd::profile::TaskingCriteria *this)
{
  return 1;
}

double awd::profile::TaskingCriteria::Swap(awd::profile::TaskingCriteria *this, awd::profile::TaskingCriteria *a2)
{
  uint64_t v2;
  double result;
  uint64_t v4;

  if (a2 != this)
  {
    v2 = *((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
    result = *((double *)a2 + 2);
    *((_QWORD *)a2 + 1) = v2;
    v4 = *((_QWORD *)this + 2);
    *((double *)this + 2) = result;
    *((_QWORD *)a2 + 2) = v4;
    LODWORD(v2) = *((_DWORD *)this + 7);
    *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
    *((_DWORD *)a2 + 7) = v2;
    LODWORD(v2) = *((_DWORD *)this + 6);
    *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
    *((_DWORD *)a2 + 6) = v2;
  }
  return result;
}

_QWORD *awd::profile::TaskingCriteria::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return sub_1CC59E69C(a1, "awd.profile.TaskingCriteria");
}

BOOL awd::profile::DeviceConfiguration_ConfigType_IsValid(awd::profile *this)
{
  return this < 4;
}

uint64_t awd::profile::DeviceConfiguration::SharedCtor(uint64_t this)
{
  *(_DWORD *)(this + 32) = 0;
  *(_BYTE *)(this + 36) = 0;
  *(_QWORD *)(this + 200) = 0;
  *(_QWORD *)(this + 64) = MEMORY[0x1E0DE8338];
  *(_QWORD *)(this + 144) = 0;
  *(_DWORD *)(this + 208) = 0;
  return this;
}

awd::profile::DeviceConfiguration *awd::profile::DeviceConfiguration::DeviceConfiguration(awd::profile::DeviceConfiguration *this, const awd::profile::DeviceConfiguration *a2)
{
  *((_QWORD *)this + 1) = 0;
  *(_QWORD *)this = &off_1E886B430;
  *((_QWORD *)this + 2) = 0;
  *((_DWORD *)this + 6) = 0;
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 6) = 0;
  *((_DWORD *)this + 14) = 0;
  *((_QWORD *)this + 9) = 0;
  *((_QWORD *)this + 10) = 0;
  *((_DWORD *)this + 22) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = 0;
  *((_DWORD *)this + 28) = 0;
  *((_QWORD *)this + 15) = 0;
  *((_QWORD *)this + 16) = 0;
  *((_DWORD *)this + 34) = 0;
  *((_QWORD *)this + 19) = 0;
  *((_DWORD *)this + 42) = 0;
  *((_QWORD *)this + 22) = 0;
  *((_QWORD *)this + 20) = 0;
  *((_QWORD *)this + 23) = 0;
  *((_DWORD *)this + 48) = 0;
  *((_DWORD *)this + 8) = 0;
  *((_BYTE *)this + 36) = 0;
  *((_QWORD *)this + 25) = 0;
  *((_QWORD *)this + 8) = MEMORY[0x1E0DE8338];
  *((_QWORD *)this + 18) = 0;
  *((_DWORD *)this + 52) = 0;
  awd::profile::DeviceConfiguration::MergeFrom(this, a2);
  return this;
}

void sub_1CC5C0D2C(_Unwind_Exception *a1)
{
  wireless_diagnostics::google::protobuf::MessageLite *v1;
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;

  v9 = v6;
  sub_1CC5C305C(v9);
  sub_1CC5C305C(v8);
  sub_1CC5C305C(v7);
  sub_1CC5C305C(v5);
  sub_1CC5C305C(v4);
  sub_1CC5C305C(v3);
  sub_1CC5C305C(v2);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(v1);
  _Unwind_Resume(a1);
}

void awd::profile::DeviceConfiguration::MergeFrom(awd::profile::DeviceConfiguration *this, const awd::profile::DeviceConfiguration *a2)
{
  uint64_t v4;
  const awd::profile::ComponentConfiguration *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  const awd::profile::TimerSpec *v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  const awd::profile::MetricFileSpec *v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  const awd::profile::TriggerSource *v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  const awd::profile::TriggerProcessingRule *v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  const awd::profile::AggregationSpec *v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  const awd::profile::DeviceConfiguration *v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  awd::profile::DeviceConfiguration *v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  int v63;
  char v64;
  int v65;
  const std::string *v66;
  std::string *v67;
  awd::profile::TaskingCriteria *v68;
  const awd::profile::TaskingCriteria *v69;
  _BYTE v70[48];

  if (a2 == this)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v70);
  }
  wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((awd::profile::DeviceConfiguration *)((char *)this + 8));
  if (*((int *)a2 + 4) >= 1)
  {
    v4 = 0;
    do
    {
      v5 = *(const awd::profile::ComponentConfiguration **)(*((_QWORD *)a2 + 1) + 8 * v4);
      v6 = *((_DWORD *)this + 5);
      v7 = *((int *)this + 4);
      if ((int)v7 >= v6)
      {
        if (v6 == *((_DWORD *)this + 6))
        {
          wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((awd::profile::DeviceConfiguration *)((char *)this + 8));
          v6 = *((_DWORD *)this + 5);
        }
        *((_DWORD *)this + 5) = v6 + 1;
        v9 = operator new();
        *(_QWORD *)(v9 + 8) = 0;
        *(_QWORD *)(v9 + 16) = 0;
        *(_QWORD *)v9 = &off_1E886B520;
        *(_DWORD *)(v9 + 24) = 0;
        *(_QWORD *)(v9 + 32) = 0;
        *(_QWORD *)(v9 + 40) = 0;
        *(_DWORD *)(v9 + 48) = 0;
        *(_QWORD *)(v9 + 88) = 0;
        *(_QWORD *)(v9 + 64) = 0;
        *(_QWORD *)(v9 + 72) = 0;
        *(_QWORD *)(v9 + 56) = 0;
        *(_DWORD *)(v9 + 80) = 0;
        v10 = *((_QWORD *)this + 1);
        v11 = *((int *)this + 4);
        *((_DWORD *)this + 4) = v11 + 1;
        *(_QWORD *)(v10 + 8 * v11) = v9;
      }
      else
      {
        v8 = *((_QWORD *)this + 1);
        *((_DWORD *)this + 4) = v7 + 1;
        v9 = *(_QWORD *)(v8 + 8 * v7);
      }
      awd::profile::ComponentConfiguration::MergeFrom((awd::profile::ComponentConfiguration *)v9, v5);
      ++v4;
    }
    while (v4 < *((int *)a2 + 4));
  }
  wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((awd::profile::DeviceConfiguration *)((char *)this + 40));
  if (*((int *)a2 + 12) >= 1)
  {
    v12 = 0;
    do
    {
      v13 = *(const awd::profile::TimerSpec **)(*((_QWORD *)a2 + 5) + 8 * v12);
      v14 = *((_DWORD *)this + 13);
      v15 = *((int *)this + 12);
      if ((int)v15 >= v14)
      {
        if (v14 == *((_DWORD *)this + 14))
        {
          wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((awd::profile::DeviceConfiguration *)((char *)this + 40));
          v14 = *((_DWORD *)this + 13);
        }
        *((_DWORD *)this + 13) = v14 + 1;
        v17 = operator new();
        *(_QWORD *)(v17 + 8) = 0;
        *(_QWORD *)(v17 + 16) = 0;
        *(_QWORD *)v17 = &off_1E886B7F0;
        *(_DWORD *)(v17 + 24) = 0;
        v18 = *((_QWORD *)this + 5);
        v19 = *((int *)this + 12);
        *((_DWORD *)this + 12) = v19 + 1;
        *(_QWORD *)(v18 + 8 * v19) = v17;
      }
      else
      {
        v16 = *((_QWORD *)this + 5);
        *((_DWORD *)this + 12) = v15 + 1;
        v17 = *(_QWORD *)(v16 + 8 * v15);
      }
      awd::profile::TimerSpec::MergeFrom((awd::profile::TimerSpec *)v17, v13);
      ++v12;
    }
    while (v12 < *((int *)a2 + 12));
  }
  wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((awd::profile::DeviceConfiguration *)((char *)this + 72));
  if (*((int *)a2 + 20) >= 1)
  {
    v20 = 0;
    do
    {
      v21 = *(const awd::profile::MetricFileSpec **)(*((_QWORD *)a2 + 9) + 8 * v20);
      v22 = *((_DWORD *)this + 21);
      v23 = *((int *)this + 20);
      if ((int)v23 >= v22)
      {
        if (v22 == *((_DWORD *)this + 22))
        {
          wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((awd::profile::DeviceConfiguration *)((char *)this + 72));
          v22 = *((_DWORD *)this + 21);
        }
        *((_DWORD *)this + 21) = v22 + 1;
        v25 = operator new();
        *(_QWORD *)v25 = &off_1E886B1D8;
        *(_QWORD *)(v25 + 8) = 0x100000000;
        *(_DWORD *)(v25 + 16) = 0;
        *(_BYTE *)(v25 + 20) = 0;
        *(_QWORD *)(v25 + 24) = 0;
        *(_QWORD *)(v25 + 32) = 0;
        v26 = *((_QWORD *)this + 9);
        v27 = *((int *)this + 20);
        *((_DWORD *)this + 20) = v27 + 1;
        *(_QWORD *)(v26 + 8 * v27) = v25;
      }
      else
      {
        v24 = *((_QWORD *)this + 9);
        *((_DWORD *)this + 20) = v23 + 1;
        v25 = *(_QWORD *)(v24 + 8 * v23);
      }
      awd::profile::MetricFileSpec::MergeFrom((awd::profile::MetricFileSpec *)v25, v21);
      ++v20;
    }
    while (v20 < *((int *)a2 + 20));
  }
  wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((awd::profile::DeviceConfiguration *)((char *)this + 96));
  if (*((int *)a2 + 26) >= 1)
  {
    v28 = 0;
    v29 = MEMORY[0x1E0DE8338];
    do
    {
      v30 = *(const awd::profile::TriggerSource **)(*((_QWORD *)a2 + 12) + 8 * v28);
      v31 = *((_DWORD *)this + 27);
      v32 = *((int *)this + 26);
      if ((int)v32 >= v31)
      {
        if (v31 == *((_DWORD *)this + 28))
        {
          wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((awd::profile::DeviceConfiguration *)((char *)this + 96));
          v31 = *((_DWORD *)this + 27);
        }
        *((_DWORD *)this + 27) = v31 + 1;
        v34 = operator new();
        *(_QWORD *)v34 = &off_1E886B160;
        *(_OWORD *)(v34 + 8) = 0u;
        *(_OWORD *)(v34 + 24) = 0u;
        *(_DWORD *)(v34 + 40) = 0;
        *(_QWORD *)(v34 + 48) = v29;
        *(_QWORD *)(v34 + 56) = 0;
        v35 = *((_QWORD *)this + 12);
        v36 = *((int *)this + 26);
        *((_DWORD *)this + 26) = v36 + 1;
        *(_QWORD *)(v35 + 8 * v36) = v34;
      }
      else
      {
        v33 = *((_QWORD *)this + 12);
        *((_DWORD *)this + 26) = v32 + 1;
        v34 = *(_QWORD *)(v33 + 8 * v32);
      }
      awd::profile::TriggerSource::MergeFrom((awd::profile::TriggerSource *)v34, v30);
      ++v28;
    }
    while (v28 < *((int *)a2 + 26));
  }
  wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((awd::profile::DeviceConfiguration *)((char *)this + 120));
  if (*((int *)a2 + 32) >= 1)
  {
    v37 = 0;
    do
    {
      v38 = *(const awd::profile::TriggerProcessingRule **)(*((_QWORD *)a2 + 15) + 8 * v37);
      v39 = *((_DWORD *)this + 33);
      v40 = *((int *)this + 32);
      if ((int)v40 >= v39)
      {
        if (v39 == *((_DWORD *)this + 34))
        {
          wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((awd::profile::DeviceConfiguration *)((char *)this + 120));
          v39 = *((_DWORD *)this + 33);
        }
        *((_DWORD *)this + 33) = v39 + 1;
        v42 = operator new();
        *(_QWORD *)v42 = &off_1E886B4A8;
        *(_QWORD *)(v42 + 48) = 0;
        *(_QWORD *)(v42 + 56) = 0;
        *(_DWORD *)(v42 + 64) = 0;
        *(_QWORD *)(v42 + 72) = 0;
        *(_DWORD *)(v42 + 80) = 0;
        *(_OWORD *)(v42 + 8) = 0u;
        *(_OWORD *)(v42 + 24) = 0u;
        *(_DWORD *)(v42 + 40) = 0;
        v43 = *((_QWORD *)this + 15);
        v44 = *((int *)this + 32);
        *((_DWORD *)this + 32) = v44 + 1;
        *(_QWORD *)(v43 + 8 * v44) = v42;
      }
      else
      {
        v41 = *((_QWORD *)this + 15);
        *((_DWORD *)this + 32) = v40 + 1;
        v42 = *(_QWORD *)(v41 + 8 * v40);
      }
      awd::profile::TriggerProcessingRule::MergeFrom((awd::profile::TriggerProcessingRule *)v42, v38);
      ++v37;
    }
    while (v37 < *((int *)a2 + 32));
  }
  wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((awd::profile::DeviceConfiguration *)((char *)this + 152));
  if (*((int *)a2 + 40) >= 1)
  {
    v45 = 0;
    v46 = MEMORY[0x1E0DE8338];
    do
    {
      v47 = *(const awd::profile::AggregationSpec **)(*((_QWORD *)a2 + 19) + 8 * v45);
      v48 = *((_DWORD *)this + 41);
      v49 = *((int *)this + 40);
      if ((int)v49 >= v48)
      {
        if (v48 == *((_DWORD *)this + 42))
        {
          wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((awd::profile::DeviceConfiguration *)((char *)this + 152));
          v48 = *((_DWORD *)this + 41);
        }
        *((_DWORD *)this + 41) = v48 + 1;
        v51 = operator new();
        *(_QWORD *)(v51 + 8) = v46;
        *(_QWORD *)(v51 + 16) = 0;
        *(_QWORD *)v51 = &off_1E886B2C8;
        *(_DWORD *)(v51 + 24) = 0;
        v52 = *((_QWORD *)this + 19);
        v53 = *((int *)this + 40);
        *((_DWORD *)this + 40) = v53 + 1;
        *(_QWORD *)(v52 + 8 * v53) = v51;
      }
      else
      {
        v50 = *((_QWORD *)this + 19);
        *((_DWORD *)this + 40) = v49 + 1;
        v51 = *(_QWORD *)(v50 + 8 * v49);
      }
      awd::profile::AggregationSpec::MergeFrom((awd::profile::AggregationSpec *)v51, v47);
      ++v45;
    }
    while (v45 < *((int *)a2 + 40));
  }
  wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((awd::profile::DeviceConfiguration *)((char *)this + 176));
  if (*((int *)a2 + 46) >= 1)
  {
    v54 = 0;
    do
    {
      v55 = *(const awd::profile::DeviceConfiguration **)(*((_QWORD *)a2 + 22) + 8 * v54);
      v56 = *((_DWORD *)this + 47);
      v57 = *((int *)this + 46);
      if ((int)v57 >= v56)
      {
        if (v56 == *((_DWORD *)this + 48))
        {
          wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((awd::profile::DeviceConfiguration *)((char *)this + 176));
          v56 = *((_DWORD *)this + 47);
        }
        *((_DWORD *)this + 47) = v56 + 1;
        v59 = (awd::profile::DeviceConfiguration *)sub_1CC5C2F80();
        v60 = *((_QWORD *)this + 22);
        v61 = *((int *)this + 46);
        *((_DWORD *)this + 46) = v61 + 1;
        *(_QWORD *)(v60 + 8 * v61) = v59;
      }
      else
      {
        v58 = *((_QWORD *)this + 22);
        *((_DWORD *)this + 46) = v57 + 1;
        v59 = *(awd::profile::DeviceConfiguration **)(v58 + 8 * v57);
      }
      awd::profile::DeviceConfiguration::MergeFrom(v59, v55);
      ++v54;
    }
    while (v54 < *((int *)a2 + 46));
  }
  v62 = *((_DWORD *)a2 + 52);
  if (!(_BYTE)v62)
    goto LABEL_64;
  if ((v62 & 1) != 0)
  {
    v63 = *((_DWORD *)a2 + 8);
    *((_DWORD *)this + 52) |= 1u;
    *((_DWORD *)this + 8) = v63;
    v62 = *((_DWORD *)a2 + 52);
    if ((v62 & 8) == 0)
    {
LABEL_62:
      if ((v62 & 0x10) == 0)
        goto LABEL_63;
      goto LABEL_68;
    }
  }
  else if ((v62 & 8) == 0)
  {
    goto LABEL_62;
  }
  v64 = *((_BYTE *)a2 + 36);
  *((_DWORD *)this + 52) |= 8u;
  *((_BYTE *)this + 36) = v64;
  v62 = *((_DWORD *)a2 + 52);
  if ((v62 & 0x10) != 0)
  {
LABEL_68:
    v65 = *((_DWORD *)a2 + 50);
    *((_DWORD *)this + 52) |= 0x10u;
    *((_DWORD *)this + 50) = v65;
    v62 = *((_DWORD *)a2 + 52);
    if ((v62 & 0x20) != 0)
      goto LABEL_69;
LABEL_64:
    if ((v62 & 0x200) == 0)
      return;
    goto LABEL_72;
  }
LABEL_63:
  if ((v62 & 0x20) == 0)
    goto LABEL_64;
LABEL_69:
  v66 = (const std::string *)*((_QWORD *)a2 + 8);
  *((_DWORD *)this + 52) |= 0x20u;
  v67 = (std::string *)*((_QWORD *)this + 8);
  if (v67 == (std::string *)MEMORY[0x1E0DE8338])
  {
    v67 = (std::string *)operator new();
    v67->__r_.__value_.__l.__size_ = 0;
    v67->__r_.__value_.__r.__words[2] = 0;
    v67->__r_.__value_.__r.__words[0] = 0;
    *((_QWORD *)this + 8) = v67;
  }
  std::string::operator=(v67, v66);
  if ((*((_DWORD *)a2 + 52) & 0x200) != 0)
  {
LABEL_72:
    *((_DWORD *)this + 52) |= 0x200u;
    v68 = (awd::profile::TaskingCriteria *)*((_QWORD *)this + 18);
    if (!v68)
    {
      v68 = (awd::profile::TaskingCriteria *)operator new();
      *(_QWORD *)v68 = &off_1E886B3B8;
      *((_QWORD *)v68 + 1) = 0;
      *((_QWORD *)v68 + 2) = 0;
      *((_QWORD *)v68 + 3) = 0;
      *((_QWORD *)this + 18) = v68;
    }
    v69 = (const awd::profile::TaskingCriteria *)*((_QWORD *)a2 + 18);
    if (!v69)
      v69 = *(const awd::profile::TaskingCriteria **)(awd::profile::DeviceConfiguration::default_instance_ + 144);
    awd::profile::TaskingCriteria::MergeFrom(v68, v69);
  }
}

void sub_1CC5C1530(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void awd::profile::DeviceConfiguration::~DeviceConfiguration(awd::profile::DeviceConfiguration *this)
{
  uint64_t *v2;

  *(_QWORD *)this = &off_1E886B430;
  v2 = (uint64_t *)((char *)this + 176);
  awd::profile::DeviceConfiguration::SharedDtor(this);
  sub_1CC5C305C(v2);
  sub_1CC5C305C((uint64_t *)this + 19);
  sub_1CC5C305C((uint64_t *)this + 15);
  sub_1CC5C305C((uint64_t *)this + 12);
  sub_1CC5C305C((uint64_t *)this + 9);
  sub_1CC5C305C((uint64_t *)this + 5);
  sub_1CC5C305C((uint64_t *)this + 1);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

{
  awd::profile::DeviceConfiguration::~DeviceConfiguration(this);
  JUMPOUT(0x1D17AD544);
}

_QWORD *awd::profile::DeviceConfiguration::SharedDtor(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  v1 = this;
  v2 = this[8];
  if (v2 != MEMORY[0x1E0DE8338] && v2 != 0)
  {
    if (*(char *)(v2 + 23) < 0)
      operator delete(*(void **)v2);
    this = (_QWORD *)MEMORY[0x1D17AD544](v2, 0x1012C40EC159624);
  }
  if ((_QWORD *)awd::profile::DeviceConfiguration::default_instance_ != v1)
  {
    this = (_QWORD *)v1[18];
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

uint64_t awd::profile::DeviceConfiguration::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 204) = a2;
  return this;
}

uint64_t awd::profile::DeviceConfiguration::default_instance(awd::profile::DeviceConfiguration *this, uint64_t a2, uint64_t a3, const char *a4)
{
  uint64_t result;

  result = awd::profile::DeviceConfiguration::default_instance_;
  if (!awd::profile::DeviceConfiguration::default_instance_)
  {
    awd::profile::protobuf_AddDesc_AwdProfile_2eproto(0, a2, a3, a4);
    return awd::profile::DeviceConfiguration::default_instance_;
  }
  return result;
}

uint64_t awd::profile::DeviceConfiguration::New(awd::profile::DeviceConfiguration *this)
{
  uint64_t result;

  result = operator new();
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)result = &off_1E886B430;
  *(_DWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 40) = 0;
  *(_QWORD *)(result + 48) = 0;
  *(_DWORD *)(result + 56) = 0;
  *(_QWORD *)(result + 80) = 0;
  *(_DWORD *)(result + 88) = 0;
  *(_QWORD *)(result + 96) = 0;
  *(_QWORD *)(result + 104) = 0;
  *(_DWORD *)(result + 112) = 0;
  *(_QWORD *)(result + 120) = 0;
  *(_QWORD *)(result + 128) = 0;
  *(_DWORD *)(result + 136) = 0;
  *(_DWORD *)(result + 168) = 0;
  *(_QWORD *)(result + 160) = 0;
  *(_QWORD *)(result + 176) = 0;
  *(_QWORD *)(result + 184) = 0;
  *(_DWORD *)(result + 192) = 0;
  *(_DWORD *)(result + 32) = 0;
  *(_BYTE *)(result + 36) = 0;
  *(_QWORD *)(result + 200) = 0;
  *(_QWORD *)(result + 64) = MEMORY[0x1E0DE8338];
  *(_QWORD *)(result + 72) = 0;
  *(_QWORD *)(result + 144) = 0;
  *(_QWORD *)(result + 152) = 0;
  *(_DWORD *)(result + 208) = 0;
  return result;
}

uint64_t awd::profile::DeviceConfiguration::Clear(uint64_t this)
{
  uint64_t v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v1 = this;
  v2 = *(_BYTE *)(this + 208);
  if (v2)
  {
    *(_DWORD *)(this + 32) = 0;
    *(_BYTE *)(this + 36) = 0;
    *(_DWORD *)(this + 200) = 0;
    if ((v2 & 0x20) != 0)
    {
      v3 = *(_QWORD *)(this + 64);
      if (v3 != MEMORY[0x1E0DE8338])
      {
        if (*(char *)(v3 + 23) < 0)
        {
          **(_BYTE **)v3 = 0;
          *(_QWORD *)(v3 + 8) = 0;
        }
        else
        {
          *(_BYTE *)v3 = 0;
          *(_BYTE *)(v3 + 23) = 0;
        }
      }
    }
  }
  if ((*(_BYTE *)(this + 209) & 2) != 0)
  {
    v4 = *(_QWORD *)(this + 144);
    if (v4)
    {
      *(_DWORD *)(v4 + 16) = 0;
      *(_DWORD *)(v4 + 28) = 0;
    }
  }
  if (*(int *)(this + 16) >= 1)
  {
    v5 = 0;
    do
    {
      v6 = *(_QWORD *)(*(_QWORD *)(v1 + 8) + 8 * v5);
      this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 32))(v6);
      ++v5;
    }
    while (v5 < *(int *)(v1 + 16));
  }
  *(_DWORD *)(v1 + 16) = 0;
  if (*(int *)(v1 + 48) >= 1)
  {
    v7 = 0;
    do
    {
      v8 = *(_QWORD *)(*(_QWORD *)(v1 + 40) + 8 * v7);
      this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 32))(v8);
      ++v7;
    }
    while (v7 < *(int *)(v1 + 48));
  }
  *(_DWORD *)(v1 + 48) = 0;
  if (*(int *)(v1 + 80) >= 1)
  {
    v9 = 0;
    do
    {
      v10 = *(_QWORD *)(*(_QWORD *)(v1 + 72) + 8 * v9);
      this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 32))(v10);
      ++v9;
    }
    while (v9 < *(int *)(v1 + 80));
  }
  *(_DWORD *)(v1 + 80) = 0;
  if (*(int *)(v1 + 104) >= 1)
  {
    v11 = 0;
    do
    {
      v12 = *(_QWORD *)(*(_QWORD *)(v1 + 96) + 8 * v11);
      this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 32))(v12);
      ++v11;
    }
    while (v11 < *(int *)(v1 + 104));
  }
  *(_DWORD *)(v1 + 104) = 0;
  if (*(int *)(v1 + 128) >= 1)
  {
    v13 = 0;
    do
    {
      v14 = *(_QWORD *)(*(_QWORD *)(v1 + 120) + 8 * v13);
      this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 32))(v14);
      ++v13;
    }
    while (v13 < *(int *)(v1 + 128));
  }
  *(_DWORD *)(v1 + 128) = 0;
  if (*(int *)(v1 + 160) >= 1)
  {
    v15 = 0;
    do
    {
      v16 = *(_QWORD *)(*(_QWORD *)(v1 + 152) + 8 * v15);
      this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 32))(v16);
      ++v15;
    }
    while (v15 < *(int *)(v1 + 160));
  }
  *(_DWORD *)(v1 + 160) = 0;
  if (*(int *)(v1 + 184) >= 1)
  {
    v17 = 0;
    do
    {
      v18 = *(_QWORD *)(*(_QWORD *)(v1 + 176) + 8 * v17);
      this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v18 + 32))(v18);
      ++v17;
    }
    while (v17 < *(int *)(v1 + 184));
  }
  *(_DWORD *)(v1 + 184) = 0;
  *(_DWORD *)(v1 + 208) = 0;
  return this;
}

uint64_t awd::profile::DeviceConfiguration::MergePartialFromCodedStream(awd::profile::DeviceConfiguration *this, wireless_diagnostics::google::protobuf::io::CodedInputStream *a2)
{
  wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *v4;
  wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *v5;
  wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *v6;
  wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *v7;
  wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *v8;
  char *v9;
  uint64_t TagFallback;
  int v11;
  char *v12;
  unint64_t v13;
  unsigned int v14;
  _BYTE *v15;
  char *v16;
  unint64_t v17;
  int v18;
  unint64_t v19;
  char *v20;
  uint64_t result;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  int v29;
  int v30;
  int v31;
  BOOL v32;
  int v33;
  int v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  int v42;
  int v43;
  int v44;
  int v45;
  int v46;
  unsigned int v47;
  _BYTE *v48;
  _QWORD *v49;
  _BYTE *v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  int v58;
  int v59;
  int v60;
  int v61;
  int v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  int v70;
  int v71;
  int v72;
  int v73;
  int v74;
  int v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  int v82;
  int v83;
  int v84;
  int v85;
  int v86;
  awd::profile::TaskingCriteria *v87;
  char *v88;
  int v89;
  int v90;
  int v91;
  int v92;
  _BYTE *v93;
  unsigned int v94;
  unsigned __int8 *v95;
  int v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  char *v102;
  int v103;
  int v104;
  int v105;
  int v106;
  unint64_t v107;
  int v108;
  uint64_t v109;
  uint64_t v110;
  awd::profile::DeviceConfiguration *v111;
  uint64_t v112;
  uint64_t v113;
  char *v114;
  int v115;
  int v116;
  int v117;
  int v118;
  unsigned __int8 *v119;
  wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *v120;
  wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *v121;
  unsigned int v122;

  v4 = (awd::profile::DeviceConfiguration *)((char *)this + 40);
  v5 = (awd::profile::DeviceConfiguration *)((char *)this + 72);
  v6 = (awd::profile::DeviceConfiguration *)((char *)this + 96);
  v7 = (awd::profile::DeviceConfiguration *)((char *)this + 120);
  v8 = (awd::profile::DeviceConfiguration *)((char *)this + 152);
  v120 = (awd::profile::DeviceConfiguration *)((char *)this + 176);
  v121 = (awd::profile::DeviceConfiguration *)((char *)this + 8);
  while (1)
  {
LABEL_2:
    v9 = (char *)*((_QWORD *)a2 + 1);
    if ((unint64_t)v9 < *((_QWORD *)a2 + 2) && (*v9 & 0x80000000) == 0)
    {
      TagFallback = *v9;
      *((_DWORD *)a2 + 8) = TagFallback;
      *((_QWORD *)a2 + 1) = v9 + 1;
      if (!(_DWORD)TagFallback)
        return 1;
      goto LABEL_7;
    }
    TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(a2);
    *((_DWORD *)a2 + 8) = TagFallback;
    if (!(_DWORD)TagFallback)
      return 1;
LABEL_7:
    switch(TagFallback >> 3)
    {
      case 1u:
        v11 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_34;
        v122 = 0;
        v12 = (char *)*((_QWORD *)a2 + 1);
        v13 = *((_QWORD *)a2 + 2);
        if ((unint64_t)v12 >= v13 || *v12 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v122);
          if (!(_DWORD)result)
            return result;
          v14 = v122;
          v15 = (_BYTE *)*((_QWORD *)a2 + 1);
          v13 = *((_QWORD *)a2 + 2);
        }
        else
        {
          v14 = *v12;
          v15 = v12 + 1;
          *((_QWORD *)a2 + 1) = v15;
        }
        *((_DWORD *)this + 8) = v14;
        *((_DWORD *)this + 52) |= 1u;
        if ((unint64_t)v15 >= v13 || *v15 != 18)
          continue;
        goto LABEL_41;
      case 2u:
        v11 = TagFallback & 7;
        if (v11 != 2)
          goto LABEL_34;
LABEL_42:
        v22 = *((_DWORD *)this + 5);
        v23 = *((int *)this + 4);
        if ((int)v23 >= v22)
        {
          if (v22 == *((_DWORD *)this + 6))
          {
            wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve(v121);
            v22 = *((_DWORD *)this + 5);
          }
          *((_DWORD *)this + 5) = v22 + 1;
          v25 = operator new();
          *(_QWORD *)(v25 + 8) = 0;
          *(_QWORD *)(v25 + 16) = 0;
          *(_QWORD *)v25 = &off_1E886B520;
          *(_DWORD *)(v25 + 24) = 0;
          *(_QWORD *)(v25 + 32) = 0;
          *(_QWORD *)(v25 + 40) = 0;
          *(_DWORD *)(v25 + 48) = 0;
          *(_QWORD *)(v25 + 88) = 0;
          *(_QWORD *)(v25 + 64) = 0;
          *(_QWORD *)(v25 + 72) = 0;
          *(_QWORD *)(v25 + 56) = 0;
          *(_DWORD *)(v25 + 80) = 0;
          v26 = *((_QWORD *)this + 1);
          v27 = *((int *)this + 4);
          *((_DWORD *)this + 4) = v27 + 1;
          *(_QWORD *)(v26 + 8 * v27) = v25;
        }
        else
        {
          v24 = *((_QWORD *)this + 1);
          *((_DWORD *)this + 4) = v23 + 1;
          v25 = *(_QWORD *)(v24 + 8 * v23);
        }
        v122 = 0;
        v28 = (char *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v28 >= *((_QWORD *)a2 + 2) || *v28 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v122))return 0;
        }
        else
        {
          v122 = *v28;
          *((_QWORD *)a2 + 1) = v28 + 1;
        }
        v29 = *((_DWORD *)a2 + 14);
        v30 = *((_DWORD *)a2 + 15);
        *((_DWORD *)a2 + 14) = v29 + 1;
        if (v29 >= v30)
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(a2);
        if (!awd::profile::ComponentConfiguration::MergePartialFromCodedStream((awd::profile::ComponentConfiguration *)v25, a2)|| !*((_BYTE *)a2 + 36))
        {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(a2);
        v31 = *((_DWORD *)a2 + 14);
        v32 = __OFSUB__(v31, 1);
        v33 = v31 - 1;
        if (v33 < 0 == v32)
          *((_DWORD *)a2 + 14) = v33;
        v15 = (_BYTE *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v15 >= *((_QWORD *)a2 + 2))
          continue;
        v34 = *v15;
        if (v34 == 18)
        {
LABEL_41:
          *((_QWORD *)a2 + 1) = v15 + 1;
          goto LABEL_42;
        }
        if (v34 != 26)
          continue;
        do
        {
          *((_QWORD *)a2 + 1) = v15 + 1;
LABEL_60:
          v35 = *((_DWORD *)this + 13);
          v36 = *((int *)this + 12);
          if ((int)v36 >= v35)
          {
            if (v35 == *((_DWORD *)this + 14))
            {
              wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve(v4);
              v35 = *((_DWORD *)this + 13);
            }
            *((_DWORD *)this + 13) = v35 + 1;
            v38 = operator new();
            *(_QWORD *)(v38 + 8) = 0;
            *(_QWORD *)(v38 + 16) = 0;
            *(_QWORD *)v38 = &off_1E886B7F0;
            *(_DWORD *)(v38 + 24) = 0;
            v39 = *((_QWORD *)this + 5);
            v40 = *((int *)this + 12);
            *((_DWORD *)this + 12) = v40 + 1;
            *(_QWORD *)(v39 + 8 * v40) = v38;
          }
          else
          {
            v37 = *((_QWORD *)this + 5);
            *((_DWORD *)this + 12) = v36 + 1;
            v38 = *(_QWORD *)(v37 + 8 * v36);
          }
          v122 = 0;
          v41 = (char *)*((_QWORD *)a2 + 1);
          if ((unint64_t)v41 >= *((_QWORD *)a2 + 2) || *v41 < 0)
          {
            if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v122))return 0;
          }
          else
          {
            v122 = *v41;
            *((_QWORD *)a2 + 1) = v41 + 1;
          }
          v42 = *((_DWORD *)a2 + 14);
          v43 = *((_DWORD *)a2 + 15);
          *((_DWORD *)a2 + 14) = v42 + 1;
          if (v42 >= v43)
            return 0;
          wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(a2);
          if (!awd::profile::TimerSpec::MergePartialFromCodedStream((awd::profile::TimerSpec *)v38, a2)
            || !*((_BYTE *)a2 + 36))
          {
            return 0;
          }
          wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(a2);
          v44 = *((_DWORD *)a2 + 14);
          v32 = __OFSUB__(v44, 1);
          v45 = v44 - 1;
          if (v45 < 0 == v32)
            *((_DWORD *)a2 + 14) = v45;
          v15 = (_BYTE *)*((_QWORD *)a2 + 1);
          v17 = *((_QWORD *)a2 + 2);
          if ((unint64_t)v15 >= v17)
            goto LABEL_2;
          v46 = *v15;
        }
        while (v46 == 26);
        if (v46 != 32)
          continue;
        v16 = v15 + 1;
        *((_QWORD *)a2 + 1) = v16;
LABEL_78:
        v122 = 0;
        if ((unint64_t)v16 >= v17 || *v16 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v122);
          if (!(_DWORD)result)
            return result;
          v47 = v122;
          v48 = (_BYTE *)*((_QWORD *)a2 + 1);
          v17 = *((_QWORD *)a2 + 2);
        }
        else
        {
          v47 = *v16;
          v48 = v16 + 1;
          *((_QWORD *)a2 + 1) = v48;
        }
        *((_BYTE *)this + 36) = v47 != 0;
        v18 = *((_DWORD *)this + 52) | 8;
        *((_DWORD *)this + 52) = v18;
        if ((unint64_t)v48 >= v17 || *v48 != 42)
          continue;
        *((_QWORD *)a2 + 1) = v48 + 1;
LABEL_86:
        *((_DWORD *)this + 52) = v18 | 0x20;
        if (*((_QWORD *)this + 8) == MEMORY[0x1E0DE8338])
        {
          v49 = (_QWORD *)operator new();
          v49[1] = 0;
          v49[2] = 0;
          *v49 = 0;
          *((_QWORD *)this + 8) = v49;
        }
        result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString();
        if (!(_DWORD)result)
          return result;
        v50 = (_BYTE *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v50 >= *((_QWORD *)a2 + 2) || *v50 != 50)
          continue;
        do
        {
          *((_QWORD *)a2 + 1) = v50 + 1;
LABEL_92:
          v51 = *((_DWORD *)this + 21);
          v52 = *((int *)this + 20);
          if ((int)v52 >= v51)
          {
            if (v51 == *((_DWORD *)this + 22))
            {
              wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve(v5);
              v51 = *((_DWORD *)this + 21);
            }
            *((_DWORD *)this + 21) = v51 + 1;
            v54 = operator new();
            *(_QWORD *)v54 = &off_1E886B1D8;
            *(_QWORD *)(v54 + 8) = 0x100000000;
            *(_DWORD *)(v54 + 16) = 0;
            *(_BYTE *)(v54 + 20) = 0;
            *(_QWORD *)(v54 + 24) = 0;
            *(_QWORD *)(v54 + 32) = 0;
            v55 = *((_QWORD *)this + 9);
            v56 = *((int *)this + 20);
            *((_DWORD *)this + 20) = v56 + 1;
            *(_QWORD *)(v55 + 8 * v56) = v54;
          }
          else
          {
            v53 = *((_QWORD *)this + 9);
            *((_DWORD *)this + 20) = v52 + 1;
            v54 = *(_QWORD *)(v53 + 8 * v52);
          }
          v122 = 0;
          v57 = (char *)*((_QWORD *)a2 + 1);
          if ((unint64_t)v57 >= *((_QWORD *)a2 + 2) || *v57 < 0)
          {
            if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v122))return 0;
          }
          else
          {
            v122 = *v57;
            *((_QWORD *)a2 + 1) = v57 + 1;
          }
          v58 = *((_DWORD *)a2 + 14);
          v59 = *((_DWORD *)a2 + 15);
          *((_DWORD *)a2 + 14) = v58 + 1;
          if (v58 >= v59)
            return 0;
          wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(a2);
          if (!awd::profile::MetricFileSpec::MergePartialFromCodedStream((awd::profile::MetricFileSpec *)v54, a2)|| !*((_BYTE *)a2 + 36))
          {
            return 0;
          }
          wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(a2);
          v60 = *((_DWORD *)a2 + 14);
          v32 = __OFSUB__(v60, 1);
          v61 = v60 - 1;
          if (v61 < 0 == v32)
            *((_DWORD *)a2 + 14) = v61;
          v50 = (_BYTE *)*((_QWORD *)a2 + 1);
          if ((unint64_t)v50 >= *((_QWORD *)a2 + 2))
            goto LABEL_2;
          v62 = *v50;
        }
        while (v62 == 50);
        if (v62 != 58)
          continue;
        do
        {
          *((_QWORD *)a2 + 1) = v50 + 1;
LABEL_110:
          v63 = *((_DWORD *)this + 27);
          v64 = *((int *)this + 26);
          if ((int)v64 >= v63)
          {
            if (v63 == *((_DWORD *)this + 28))
            {
              wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve(v6);
              v63 = *((_DWORD *)this + 27);
            }
            *((_DWORD *)this + 27) = v63 + 1;
            v66 = operator new();
            *(_QWORD *)v66 = &off_1E886B160;
            *(_OWORD *)(v66 + 8) = 0u;
            *(_OWORD *)(v66 + 24) = 0u;
            *(_DWORD *)(v66 + 40) = 0;
            *(_QWORD *)(v66 + 48) = MEMORY[0x1E0DE8338];
            *(_QWORD *)(v66 + 56) = 0;
            v67 = *((_QWORD *)this + 12);
            v68 = *((int *)this + 26);
            *((_DWORD *)this + 26) = v68 + 1;
            *(_QWORD *)(v67 + 8 * v68) = v66;
          }
          else
          {
            v65 = *((_QWORD *)this + 12);
            *((_DWORD *)this + 26) = v64 + 1;
            v66 = *(_QWORD *)(v65 + 8 * v64);
          }
          v122 = 0;
          v69 = (char *)*((_QWORD *)a2 + 1);
          if ((unint64_t)v69 >= *((_QWORD *)a2 + 2) || *v69 < 0)
          {
            if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v122))return 0;
          }
          else
          {
            v122 = *v69;
            *((_QWORD *)a2 + 1) = v69 + 1;
          }
          v70 = *((_DWORD *)a2 + 14);
          v71 = *((_DWORD *)a2 + 15);
          *((_DWORD *)a2 + 14) = v70 + 1;
          if (v70 >= v71)
            return 0;
          wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(a2);
          if (!awd::profile::TriggerSource::MergePartialFromCodedStream((awd::profile::TriggerSource *)v66, a2)|| !*((_BYTE *)a2 + 36))
          {
            return 0;
          }
          wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(a2);
          v72 = *((_DWORD *)a2 + 14);
          v32 = __OFSUB__(v72, 1);
          v73 = v72 - 1;
          if (v73 < 0 == v32)
            *((_DWORD *)a2 + 14) = v73;
          v50 = (_BYTE *)*((_QWORD *)a2 + 1);
          if ((unint64_t)v50 >= *((_QWORD *)a2 + 2))
            goto LABEL_2;
          v74 = *v50;
        }
        while (v74 == 58);
        if (v74 != 66)
          continue;
        do
        {
          *((_QWORD *)a2 + 1) = v50 + 1;
LABEL_128:
          v75 = *((_DWORD *)this + 33);
          v76 = *((int *)this + 32);
          if ((int)v76 >= v75)
          {
            if (v75 == *((_DWORD *)this + 34))
            {
              wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve(v7);
              v75 = *((_DWORD *)this + 33);
            }
            *((_DWORD *)this + 33) = v75 + 1;
            v78 = operator new();
            *(_QWORD *)v78 = &off_1E886B4A8;
            *(_QWORD *)(v78 + 48) = 0;
            *(_QWORD *)(v78 + 56) = 0;
            *(_DWORD *)(v78 + 64) = 0;
            *(_QWORD *)(v78 + 72) = 0;
            *(_DWORD *)(v78 + 80) = 0;
            *(_OWORD *)(v78 + 8) = 0u;
            *(_OWORD *)(v78 + 24) = 0u;
            *(_DWORD *)(v78 + 40) = 0;
            v79 = *((_QWORD *)this + 15);
            v80 = *((int *)this + 32);
            *((_DWORD *)this + 32) = v80 + 1;
            *(_QWORD *)(v79 + 8 * v80) = v78;
          }
          else
          {
            v77 = *((_QWORD *)this + 15);
            *((_DWORD *)this + 32) = v76 + 1;
            v78 = *(_QWORD *)(v77 + 8 * v76);
          }
          v122 = 0;
          v81 = (char *)*((_QWORD *)a2 + 1);
          if ((unint64_t)v81 >= *((_QWORD *)a2 + 2) || *v81 < 0)
          {
            if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v122))return 0;
          }
          else
          {
            v122 = *v81;
            *((_QWORD *)a2 + 1) = v81 + 1;
          }
          v82 = *((_DWORD *)a2 + 14);
          v83 = *((_DWORD *)a2 + 15);
          *((_DWORD *)a2 + 14) = v82 + 1;
          if (v82 >= v83)
            return 0;
          wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(a2);
          if (!awd::profile::TriggerProcessingRule::MergePartialFromCodedStream((awd::profile::TriggerProcessingRule *)v78, a2)|| !*((_BYTE *)a2 + 36))
          {
            return 0;
          }
          wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(a2);
          v84 = *((_DWORD *)a2 + 14);
          v32 = __OFSUB__(v84, 1);
          v85 = v84 - 1;
          if (v85 < 0 == v32)
            *((_DWORD *)a2 + 14) = v85;
          v50 = (_BYTE *)*((_QWORD *)a2 + 1);
          if ((unint64_t)v50 >= *((_QWORD *)a2 + 2))
            goto LABEL_2;
          v86 = *v50;
        }
        while (v86 == 66);
        if (v86 != 74)
          continue;
        *((_QWORD *)a2 + 1) = v50 + 1;
LABEL_146:
        *((_DWORD *)this + 52) |= 0x200u;
        v87 = (awd::profile::TaskingCriteria *)*((_QWORD *)this + 18);
        if (!v87)
        {
          v87 = (awd::profile::TaskingCriteria *)operator new();
          *(_QWORD *)v87 = &off_1E886B3B8;
          *((_QWORD *)v87 + 1) = 0;
          *((_QWORD *)v87 + 2) = 0;
          *((_QWORD *)v87 + 3) = 0;
          *((_QWORD *)this + 18) = v87;
        }
        v122 = 0;
        v88 = (char *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v88 >= *((_QWORD *)a2 + 2) || *v88 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v122))return 0;
        }
        else
        {
          v122 = *v88;
          *((_QWORD *)a2 + 1) = v88 + 1;
        }
        v89 = *((_DWORD *)a2 + 14);
        v90 = *((_DWORD *)a2 + 15);
        *((_DWORD *)a2 + 14) = v89 + 1;
        if (v89 >= v90)
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(a2);
        if (!awd::profile::TaskingCriteria::MergePartialFromCodedStream(v87, a2) || !*((_BYTE *)a2 + 36))
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(a2);
        v91 = *((_DWORD *)a2 + 14);
        v32 = __OFSUB__(v91, 1);
        v92 = v91 - 1;
        if (v92 < 0 == v32)
          *((_DWORD *)a2 + 14) = v92;
        v93 = (_BYTE *)*((_QWORD *)a2 + 1);
        v19 = *((_QWORD *)a2 + 2);
        if ((unint64_t)v93 < v19 && *v93 == 80)
        {
          v20 = v93 + 1;
          *((_QWORD *)a2 + 1) = v20;
LABEL_160:
          v122 = 0;
          if ((unint64_t)v20 >= v19 || *v20 < 0)
          {
            result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v122);
            if (!(_DWORD)result)
              return result;
            v94 = v122;
          }
          else
          {
            v94 = *v20;
            *((_QWORD *)a2 + 1) = v20 + 1;
          }
          if (v94 <= 3)
          {
            *((_DWORD *)this + 52) |= 0x10u;
            *((_DWORD *)this + 50) = v94;
          }
          v95 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
          if ((unint64_t)v95 < *((_QWORD *)a2 + 2) && *v95 == 90)
          {
            do
            {
              *((_QWORD *)a2 + 1) = v95 + 1;
LABEL_170:
              v96 = *((_DWORD *)this + 41);
              v97 = *((int *)this + 40);
              if ((int)v97 >= v96)
              {
                if (v96 == *((_DWORD *)this + 42))
                {
                  wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve(v8);
                  v96 = *((_DWORD *)this + 41);
                }
                *((_DWORD *)this + 41) = v96 + 1;
                v99 = operator new();
                *(_QWORD *)(v99 + 16) = 0;
                *(_QWORD *)v99 = &off_1E886B2C8;
                *(_QWORD *)(v99 + 8) = MEMORY[0x1E0DE8338];
                *(_DWORD *)(v99 + 24) = 0;
                v100 = *((_QWORD *)this + 19);
                v101 = *((int *)this + 40);
                *((_DWORD *)this + 40) = v101 + 1;
                *(_QWORD *)(v100 + 8 * v101) = v99;
              }
              else
              {
                v98 = *((_QWORD *)this + 19);
                *((_DWORD *)this + 40) = v97 + 1;
                v99 = *(_QWORD *)(v98 + 8 * v97);
              }
              v122 = 0;
              v102 = (char *)*((_QWORD *)a2 + 1);
              if ((unint64_t)v102 >= *((_QWORD *)a2 + 2) || *v102 < 0)
              {
                if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v122))return 0;
              }
              else
              {
                v122 = *v102;
                *((_QWORD *)a2 + 1) = v102 + 1;
              }
              v103 = *((_DWORD *)a2 + 14);
              v104 = *((_DWORD *)a2 + 15);
              *((_DWORD *)a2 + 14) = v103 + 1;
              if (v103 >= v104)
                return 0;
              wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(a2);
              if (!awd::profile::AggregationSpec::MergePartialFromCodedStream((awd::profile::AggregationSpec *)v99, a2)|| !*((_BYTE *)a2 + 36))
              {
                return 0;
              }
              wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(a2);
              v105 = *((_DWORD *)a2 + 14);
              v32 = __OFSUB__(v105, 1);
              v106 = v105 - 1;
              if (v106 < 0 == v32)
                *((_DWORD *)a2 + 14) = v106;
              v95 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
              v107 = *((_QWORD *)a2 + 2);
            }
            while ((unint64_t)v95 < v107 && *v95 == 90);
            if ((int)v107 - (int)v95 >= 2 && *v95 == 130 && v95[1] == 1)
            {
              do
              {
                *((_QWORD *)a2 + 1) = v95 + 2;
LABEL_190:
                v108 = *((_DWORD *)this + 47);
                v109 = *((int *)this + 46);
                if ((int)v109 >= v108)
                {
                  if (v108 == *((_DWORD *)this + 48))
                  {
                    wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve(v120);
                    v108 = *((_DWORD *)this + 47);
                  }
                  *((_DWORD *)this + 47) = v108 + 1;
                  v111 = (awd::profile::DeviceConfiguration *)sub_1CC5C2F80();
                  v112 = *((_QWORD *)this + 22);
                  v113 = *((int *)this + 46);
                  *((_DWORD *)this + 46) = v113 + 1;
                  *(_QWORD *)(v112 + 8 * v113) = v111;
                }
                else
                {
                  v110 = *((_QWORD *)this + 22);
                  *((_DWORD *)this + 46) = v109 + 1;
                  v111 = *(awd::profile::DeviceConfiguration **)(v110 + 8 * v109);
                }
                v122 = 0;
                v114 = (char *)*((_QWORD *)a2 + 1);
                if ((unint64_t)v114 >= *((_QWORD *)a2 + 2) || *v114 < 0)
                {
                  if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v122))return 0;
                }
                else
                {
                  v122 = *v114;
                  *((_QWORD *)a2 + 1) = v114 + 1;
                }
                v115 = *((_DWORD *)a2 + 14);
                v116 = *((_DWORD *)a2 + 15);
                *((_DWORD *)a2 + 14) = v115 + 1;
                if (v115 >= v116)
                  return 0;
                wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(a2);
                if (!awd::profile::DeviceConfiguration::MergePartialFromCodedStream(v111, a2)
                  || !*((_BYTE *)a2 + 36))
                {
                  return 0;
                }
                wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(a2);
                v117 = *((_DWORD *)a2 + 14);
                v32 = __OFSUB__(v117, 1);
                v118 = v117 - 1;
                if (v118 < 0 == v32)
                  *((_DWORD *)a2 + 14) = v118;
                v95 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
                v119 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
              }
              while ((int)v119 - (int)v95 > 1 && *v95 == 130 && v95[1] == 1);
              if (v95 == v119 && (*((_DWORD *)a2 + 11) || *((_DWORD *)a2 + 6) == *((_DWORD *)a2 + 10)))
              {
                *((_DWORD *)a2 + 8) = 0;
                result = 1;
                *((_BYTE *)a2 + 36) = 1;
                return result;
              }
            }
          }
        }
        break;
      case 3u:
        v11 = TagFallback & 7;
        if (v11 == 2)
          goto LABEL_60;
        goto LABEL_34;
      case 4u:
        v11 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_34;
        v16 = (char *)*((_QWORD *)a2 + 1);
        v17 = *((_QWORD *)a2 + 2);
        goto LABEL_78;
      case 5u:
        v11 = TagFallback & 7;
        if (v11 != 2)
          goto LABEL_34;
        v18 = *((_DWORD *)this + 52);
        goto LABEL_86;
      case 6u:
        v11 = TagFallback & 7;
        if (v11 == 2)
          goto LABEL_92;
        goto LABEL_34;
      case 7u:
        v11 = TagFallback & 7;
        if (v11 == 2)
          goto LABEL_110;
        goto LABEL_34;
      case 8u:
        v11 = TagFallback & 7;
        if (v11 == 2)
          goto LABEL_128;
        goto LABEL_34;
      case 9u:
        v11 = TagFallback & 7;
        if (v11 == 2)
          goto LABEL_146;
        goto LABEL_34;
      case 0xAu:
        v11 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_34;
        v20 = (char *)*((_QWORD *)a2 + 1);
        v19 = *((_QWORD *)a2 + 2);
        goto LABEL_160;
      case 0xBu:
        v11 = TagFallback & 7;
        if (v11 == 2)
          goto LABEL_170;
        goto LABEL_34;
      case 0x10u:
        v11 = TagFallback & 7;
        if (v11 != 2)
          goto LABEL_34;
        goto LABEL_190;
      default:
        v11 = TagFallback & 7;
LABEL_34:
        if (v11 == 4)
          return 1;
        if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(a2, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback) & 1) == 0)return 0;
        continue;
    }
  }
}

uint64_t awd::profile::DeviceConfiguration::SerializeWithCachedSizes(uint64_t this, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v5 = this;
  if ((*(_BYTE *)(this + 208) & 1) != 0)
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(unsigned int *)(this + 32), (uint64_t)a2, a4);
  if (*(int *)(v5 + 16) >= 1)
  {
    v6 = 0;
    do
      this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, *(_QWORD *)(*(_QWORD *)(v5 + 8) + 8 * v6++), a2, a4);
    while (v6 < *(int *)(v5 + 16));
  }
  if (*(int *)(v5 + 48) >= 1)
  {
    v7 = 0;
    do
      this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, *(_QWORD *)(*(_QWORD *)(v5 + 40) + 8 * v7++), a2, a4);
    while (v7 < *(int *)(v5 + 48));
  }
  v8 = *(_DWORD *)(v5 + 208);
  if ((v8 & 8) != 0)
  {
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4, *(unsigned __int8 *)(v5 + 36), (uint64_t)a2, a4);
    v8 = *(_DWORD *)(v5 + 208);
  }
  if ((v8 & 0x20) != 0)
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString();
  if (*(int *)(v5 + 80) >= 1)
  {
    v9 = 0;
    do
      this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)6, *(_QWORD *)(*(_QWORD *)(v5 + 72) + 8 * v9++), a2, a4);
    while (v9 < *(int *)(v5 + 80));
  }
  if (*(int *)(v5 + 104) >= 1)
  {
    v10 = 0;
    do
      this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)7, *(_QWORD *)(*(_QWORD *)(v5 + 96) + 8 * v10++), a2, a4);
    while (v10 < *(int *)(v5 + 104));
  }
  if (*(int *)(v5 + 128) >= 1)
  {
    v11 = 0;
    do
      this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)8, *(_QWORD *)(*(_QWORD *)(v5 + 120) + 8 * v11++), a2, a4);
    while (v11 < *(int *)(v5 + 128));
  }
  v12 = *(_DWORD *)(v5 + 208);
  if ((v12 & 0x200) != 0)
  {
    v13 = *(_QWORD *)(v5 + 144);
    if (!v13)
      v13 = *(_QWORD *)(awd::profile::DeviceConfiguration::default_instance_ + 144);
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)9, v13, a2, a4);
    v12 = *(_DWORD *)(v5 + 208);
  }
  if ((v12 & 0x10) != 0)
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xA, *(unsigned int *)(v5 + 200), (uint64_t)a2, a4);
  if (*(int *)(v5 + 160) >= 1)
  {
    v14 = 0;
    do
      this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xB, *(_QWORD *)(*(_QWORD *)(v5 + 152) + 8 * v14++), a2, a4);
    while (v14 < *(int *)(v5 + 160));
  }
  if (*(int *)(v5 + 184) >= 1)
  {
    v15 = 0;
    do
      this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x10, *(_QWORD *)(*(_QWORD *)(v5 + 176) + 8 * v15++), a2, a4);
    while (v15 < *(int *)(v5 + 184));
  }
  return this;
}

uint64_t awd::profile::DeviceConfiguration::ByteSize(awd::profile::DeviceConfiguration *this)
{
  int v2;
  int v3;
  int v4;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v5;
  int v6;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v7;
  int v8;
  uint64_t v9;
  int v10;
  char v11;
  uint64_t v12;
  unint64_t v13;
  int v14;
  awd::profile::TaskingCriteria *v15;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v16;
  int v17;
  int v18;
  int v19;
  int v20;
  uint64_t v21;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v22;
  int v23;
  int v24;
  int v25;
  int v26;
  uint64_t v27;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v28;
  int v29;
  int v30;
  int v31;
  int v32;
  uint64_t v33;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v34;
  int v35;
  int v36;
  int v37;
  int v38;
  uint64_t v39;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v40;
  int v41;
  int v42;
  int v43;
  int v44;
  uint64_t v45;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v46;
  int v47;
  int v48;
  int v49;
  int v50;
  uint64_t v51;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v52;
  int v53;
  int v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v58;
  int v59;
  int v60;

  v2 = *((_DWORD *)this + 52);
  if (!(_BYTE)v2)
  {
    v4 = 0;
    if ((v2 & 0x200) == 0)
      goto LABEL_40;
    goto LABEL_34;
  }
  if ((v2 & 1) != 0)
  {
    v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 8);
    if ((v5 & 0x80000000) != 0)
    {
      v6 = 10;
    }
    else if (v5 >= 0x80)
    {
      v6 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v5);
      v2 = *((_DWORD *)this + 52);
    }
    else
    {
      v6 = 1;
    }
    v3 = v6 + 1;
  }
  else
  {
    v3 = 0;
  }
  if ((v2 & 8) != 0)
    v4 = v3 + 2;
  else
    v4 = v3;
  if ((v2 & 0x10) != 0)
  {
    v7 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 50);
    if ((v7 & 0x80000000) != 0)
    {
      v8 = 10;
    }
    else if (v7 >= 0x80)
    {
      v8 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v7);
      v2 = *((_DWORD *)this + 52);
    }
    else
    {
      v8 = 1;
    }
    v4 += v8 + 1;
    if ((v2 & 0x20) == 0)
    {
LABEL_17:
      if ((v2 & 0x200) == 0)
        goto LABEL_40;
      goto LABEL_34;
    }
  }
  else if ((v2 & 0x20) == 0)
  {
    goto LABEL_17;
  }
  v9 = *((_QWORD *)this + 8);
  v10 = *(unsigned __int8 *)(v9 + 23);
  v11 = v10;
  v12 = *(_QWORD *)(v9 + 8);
  if ((v10 & 0x80u) == 0)
    v13 = *(unsigned __int8 *)(v9 + 23);
  else
    v13 = v12;
  if (v13 >= 0x80)
  {
    v14 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v13);
    v10 = *(unsigned __int8 *)(v9 + 23);
    v12 = *(_QWORD *)(v9 + 8);
    v2 = *((_DWORD *)this + 52);
    v11 = *(_BYTE *)(v9 + 23);
  }
  else
  {
    v14 = 1;
  }
  if (v11 < 0)
    v10 = v12;
  v4 += v14 + v10 + 1;
  if ((v2 & 0x200) != 0)
  {
LABEL_34:
    v15 = (awd::profile::TaskingCriteria *)*((_QWORD *)this + 18);
    if (!v15)
      v15 = *(awd::profile::TaskingCriteria **)(awd::profile::DeviceConfiguration::default_instance_ + 144);
    v16 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)awd::profile::TaskingCriteria::ByteSize(v15);
    v17 = (int)v16;
    if (v16 >= 0x80)
      v18 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v16);
    else
      v18 = 1;
    v4 += v17 + v18 + 1;
  }
LABEL_40:
  v19 = *((_DWORD *)this + 4);
  v20 = v19 + v4;
  if (v19 >= 1)
  {
    v21 = 0;
    do
    {
      v22 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)awd::profile::ComponentConfiguration::ByteSize(*(awd::profile::ComponentConfiguration **)(*((_QWORD *)this + 1) + 8 * v21));
      v23 = (int)v22;
      if (v22 >= 0x80)
        v24 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v22);
      else
        v24 = 1;
      v20 += v23 + v24;
      ++v21;
    }
    while (v21 < *((int *)this + 4));
  }
  v25 = *((_DWORD *)this + 12);
  v26 = v25 + v20;
  if (v25 >= 1)
  {
    v27 = 0;
    do
    {
      v28 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)awd::profile::TimerSpec::ByteSize(*(wireless_diagnostics::google::protobuf::io::CodedOutputStream ***)(*((_QWORD *)this + 5) + 8 * v27));
      v29 = (int)v28;
      if (v28 >= 0x80)
        v30 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v28);
      else
        v30 = 1;
      v26 += v29 + v30;
      ++v27;
    }
    while (v27 < *((int *)this + 12));
  }
  v31 = *((_DWORD *)this + 20);
  v32 = v31 + v26;
  if (v31 >= 1)
  {
    v33 = 0;
    do
    {
      v34 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)awd::profile::MetricFileSpec::ByteSize(*(awd::profile::MetricFileSpec **)(*((_QWORD *)this + 9) + 8 * v33));
      v35 = (int)v34;
      if (v34 >= 0x80)
        v36 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v34);
      else
        v36 = 1;
      v32 += v35 + v36;
      ++v33;
    }
    while (v33 < *((int *)this + 20));
  }
  v37 = *((_DWORD *)this + 26);
  v38 = v37 + v32;
  if (v37 >= 1)
  {
    v39 = 0;
    do
    {
      v40 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)awd::profile::TriggerSource::ByteSize(*(awd::profile::TriggerSource **)(*((_QWORD *)this + 12) + 8 * v39));
      v41 = (int)v40;
      if (v40 >= 0x80)
        v42 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v40);
      else
        v42 = 1;
      v38 += v41 + v42;
      ++v39;
    }
    while (v39 < *((int *)this + 26));
  }
  v43 = *((_DWORD *)this + 32);
  v44 = v43 + v38;
  if (v43 >= 1)
  {
    v45 = 0;
    do
    {
      v46 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)awd::profile::TriggerProcessingRule::ByteSize(*(awd::profile::TriggerProcessingRule **)(*((_QWORD *)this + 15) + 8 * v45));
      v47 = (int)v46;
      if (v46 >= 0x80)
        v48 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v46);
      else
        v48 = 1;
      v44 += v47 + v48;
      ++v45;
    }
    while (v45 < *((int *)this + 32));
  }
  v49 = *((_DWORD *)this + 40);
  v50 = v49 + v44;
  if (v49 >= 1)
  {
    v51 = 0;
    do
    {
      v52 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)awd::profile::AggregationSpec::ByteSize(*(awd::profile::AggregationSpec **)(*((_QWORD *)this + 19) + 8 * v51));
      v53 = (int)v52;
      if (v52 >= 0x80)
        v54 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v52);
      else
        v54 = 1;
      v50 += v53 + v54;
      ++v51;
    }
    while (v51 < *((int *)this + 40));
  }
  v55 = *((_DWORD *)this + 46);
  v56 = (v50 + 2 * v55);
  if (v55 >= 1)
  {
    v57 = 0;
    do
    {
      v58 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)awd::profile::DeviceConfiguration::ByteSize(*(awd::profile::DeviceConfiguration **)(*((_QWORD *)this + 22) + 8 * v57));
      v59 = (int)v58;
      if (v58 >= 0x80)
        v60 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v58);
      else
        v60 = 1;
      v56 = (v59 + v56 + v60);
      ++v57;
    }
    while (v57 < *((int *)this + 46));
  }
  *((_DWORD *)this + 51) = v56;
  return v56;
}

void awd::profile::DeviceConfiguration::CopyFrom(awd::profile::DeviceConfiguration *this, const awd::profile::DeviceConfiguration *a2)
{
  if (a2 != this)
  {
    (*(void (**)(awd::profile::DeviceConfiguration *))(*(_QWORD *)this + 32))(this);
    awd::profile::DeviceConfiguration::MergeFrom(this, a2);
  }
}

uint64_t awd::profile::DeviceConfiguration::IsInitialized(awd::profile::DeviceConfiguration *this)
{
  return 1;
}

awd::profile::DeviceConfiguration *awd::profile::DeviceConfiguration::Swap(awd::profile::DeviceConfiguration *this, awd::profile::DeviceConfiguration *a2)
{
  awd::profile::DeviceConfiguration *v3;
  int v4;
  char v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;

  if (a2 != this)
  {
    v3 = this;
    v4 = *((_DWORD *)this + 8);
    *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
    *((_DWORD *)a2 + 8) = v4;
    wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Swap();
    wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Swap();
    v5 = *((_BYTE *)v3 + 36);
    *((_BYTE *)v3 + 36) = *((_BYTE *)a2 + 36);
    *((_BYTE *)a2 + 36) = v5;
    v6 = *((_DWORD *)v3 + 50);
    *((_DWORD *)v3 + 50) = *((_DWORD *)a2 + 50);
    *((_DWORD *)a2 + 50) = v6;
    v7 = *((_QWORD *)v3 + 8);
    *((_QWORD *)v3 + 8) = *((_QWORD *)a2 + 8);
    *((_QWORD *)a2 + 8) = v7;
    wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Swap();
    wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Swap();
    wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Swap();
    v8 = *((_QWORD *)v3 + 18);
    *((_QWORD *)v3 + 18) = *((_QWORD *)a2 + 18);
    *((_QWORD *)a2 + 18) = v8;
    wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Swap();
    this = (awd::profile::DeviceConfiguration *)wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Swap();
    v9 = *((_DWORD *)v3 + 52);
    *((_DWORD *)v3 + 52) = *((_DWORD *)a2 + 52);
    *((_DWORD *)a2 + 52) = v9;
    v10 = *((_DWORD *)v3 + 51);
    *((_DWORD *)v3 + 51) = *((_DWORD *)a2 + 51);
    *((_DWORD *)a2 + 51) = v10;
  }
  return this;
}

_QWORD *awd::profile::DeviceConfiguration::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return sub_1CC59E69C(a1, "awd.profile.DeviceConfiguration");
}

uint64_t sub_1CC5C2E50(uint64_t a1)
{
  return *(unsigned int *)(a1 + 48);
}

uint64_t sub_1CC5C2E58(uint64_t a1)
{
  return *(unsigned int *)(a1 + 56);
}

uint64_t sub_1CC5C2E60(uint64_t a1)
{
  return *(unsigned int *)(a1 + 40);
}

uint64_t sub_1CC5C2E68(uint64_t a1)
{
  return *(unsigned int *)(a1 + 124);
}

uint64_t sub_1CC5C2E70(uint64_t a1)
{
  return *(unsigned int *)(a1 + 128);
}

uint64_t sub_1CC5C2E78(uint64_t a1)
{
  return *(unsigned int *)(a1 + 24);
}

uint64_t sub_1CC5C2E80(uint64_t a1)
{
  return *(unsigned int *)(a1 + 32);
}

uint64_t sub_1CC5C2E88(uint64_t a1)
{
  return *(unsigned int *)(a1 + 24);
}

uint64_t sub_1CC5C2E90(uint64_t a1)
{
  return *(unsigned int *)(a1 + 88);
}

uint64_t sub_1CC5C2E98(uint64_t a1)
{
  return *(unsigned int *)(a1 + 20);
}

uint64_t sub_1CC5C2EA0(uint64_t a1)
{
  return *(unsigned int *)(a1 + 68);
}

uint64_t sub_1CC5C2EA8(uint64_t a1)
{
  return *(unsigned int *)(a1 + 64);
}

uint64_t sub_1CC5C2EB0(uint64_t a1)
{
  return *(unsigned int *)(a1 + 32);
}

uint64_t sub_1CC5C2EB8(uint64_t a1)
{
  return *(unsigned int *)(a1 + 56);
}

uint64_t sub_1CC5C2EC0(uint64_t a1)
{
  return *(unsigned int *)(a1 + 76);
}

uint64_t sub_1CC5C2EC8(uint64_t a1)
{
  return *(unsigned int *)(a1 + 20);
}

uint64_t sub_1CC5C2ED0(uint64_t a1)
{
  return *(unsigned int *)(a1 + 32);
}

uint64_t sub_1CC5C2ED8(uint64_t a1)
{
  return *(unsigned int *)(a1 + 24);
}

uint64_t sub_1CC5C2EE0(uint64_t a1)
{
  return *(unsigned int *)(a1 + 204);
}

_DWORD *sub_1CC5C2EE8(_DWORD *result, int a2)
{
  int v2;
  _DWORD *v3;
  const void *v4;
  int v5;

  v2 = result[3];
  if (v2 < a2)
  {
    v3 = result;
    v4 = *(const void **)result;
    v5 = 2 * v2;
    if (v5 <= a2)
      v5 = a2;
    if (v5 <= 4)
      v5 = 4;
    result[3] = v5;
    result = (_DWORD *)operator new[]();
    *(_QWORD *)v3 = result;
    if (v4)
    {
      memcpy(result, v4, 4 * (int)v3[2]);
      JUMPOUT(0x1D17AD52CLL);
    }
  }
  return result;
}

uint64_t sub_1CC5C2F80()
{
  uint64_t result;

  result = operator new();
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)result = &off_1E886B430;
  *(_DWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 40) = 0;
  *(_QWORD *)(result + 48) = 0;
  *(_DWORD *)(result + 56) = 0;
  *(_QWORD *)(result + 80) = 0;
  *(_DWORD *)(result + 88) = 0;
  *(_QWORD *)(result + 96) = 0;
  *(_QWORD *)(result + 104) = 0;
  *(_DWORD *)(result + 112) = 0;
  *(_QWORD *)(result + 120) = 0;
  *(_QWORD *)(result + 128) = 0;
  *(_DWORD *)(result + 136) = 0;
  *(_DWORD *)(result + 168) = 0;
  *(_QWORD *)(result + 160) = 0;
  *(_QWORD *)(result + 176) = 0;
  *(_QWORD *)(result + 184) = 0;
  *(_DWORD *)(result + 192) = 0;
  *(_DWORD *)(result + 32) = 0;
  *(_BYTE *)(result + 36) = 0;
  *(_QWORD *)(result + 200) = 0;
  *(_QWORD *)(result + 64) = MEMORY[0x1E0DE8338];
  *(_QWORD *)(result + 72) = 0;
  *(_QWORD *)(result + 144) = 0;
  *(_QWORD *)(result + 152) = 0;
  *(_DWORD *)(result + 208) = 0;
  return result;
}

uint64_t sub_1CC5C300C(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;

  if (*(int *)(result + 8) >= 1)
  {
    v1 = 0;
    do
    {
      v2 = *(_QWORD *)(*(_QWORD *)result + 8 * v1);
      if (*(char *)(v2 + 23) < 0)
      {
        **(_BYTE **)v2 = 0;
        *(_QWORD *)(v2 + 8) = 0;
      }
      else
      {
        *(_BYTE *)v2 = 0;
        *(_BYTE *)(v2 + 23) = 0;
      }
      ++v1;
    }
    while (v1 < *(int *)(result + 8));
  }
  *(_DWORD *)(result + 8) = 0;
  return result;
}

uint64_t sub_1CC5C305C(uint64_t *a1)
{
  int v2;
  uint64_t i;
  uint64_t v4;
  uint64_t result;

  v2 = *((_DWORD *)a1 + 3);
  if (v2 >= 1)
  {
    for (i = 0; i < v2; ++i)
    {
      v4 = *(_QWORD *)(*a1 + 8 * i);
      if (v4)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
        v2 = *((_DWORD *)a1 + 3);
      }
    }
  }
  result = *a1;
  if (*a1)
    JUMPOUT(0x1D17AD52CLL);
  return result;
}

uint64_t sub_1CC5C30D4(int *a1)
{
  uint64_t v2;
  uint64_t result;

  if (a1[3] >= 1)
  {
    v2 = 0;
    do
    {
      wireless_diagnostics::google::protobuf::internal::StringTypeHandlerBase::Delete();
      ++v2;
    }
    while (v2 < a1[3]);
  }
  result = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
    JUMPOUT(0x1D17AD52CLL);
  return result;
}

void sub_1CC5C3140()
{
  JUMPOUT(0x1D17AD52CLL);
}

uint64_t sub_1CC5C3154(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result)
    sub_1CC5C3140();
  return result;
}

void sub_1CC5C3168(uint64_t a1, NSObject *a2)
{
  int v2;
  _DWORD v3[2];
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  v2 = *(_DWORD *)(a1 + 48);
  v3[0] = 67109120;
  v3[1] = v2;
  _os_log_debug_impl(&dword_1CC590000, a2, OS_LOG_TYPE_DEBUG, "server.conn:#D Calling callback on metric: 0x%x", (uint8_t *)v3, 8u);
}

void sub_1CC5C31E0(uint64_t a1)
{
  std::__shared_weak_count *v1;

  sub_1CC59A330(a1);
  sub_1CC59A328(v1);
}

void sub_1CC5C31FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_1CC59DBA0(&dword_1CC590000, MEMORY[0x1E0C81028], a3, "metric.buffer:#D Deleted old metrics. State of the buffer after the delete (should be correct): ", a5, a6, a7, a8, 0);
}

void sub_1CC5C3234(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_1CC59DBA0(&dword_1CC590000, MEMORY[0x1E0C81028], a3, "metric.buffer:#D Added a new metricContainer into buffer. State of the buffer after the add (may have too many metrics): ", a5, a6, a7, a8, 0);
}

void sub_1CC5C326C(void *a1, uint64_t a2, int a3)
{
  _DWORD v4[2];
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  __cxa_begin_catch(a1);
  if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
  {
    v4[0] = 67109120;
    v4[1] = a3;
    _os_log_impl(&dword_1CC590000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "metric.buffer:#E Not able to buffer metric 0x%x", (uint8_t *)v4, 8u);
  }
  __cxa_end_catch();
}

void sub_1CC5C331C(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_1CC5B22BC(&dword_1CC590000, a2, a3, "core:#D Dropping trigger for metric 0x%x", a5, a6, a7, a8, 0);
  sub_1CC5B22CC();
}

void sub_1CC5C3380(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_1CC5B22BC(&dword_1CC590000, a2, a3, "core:#D sendExpectedMetric did not find a submission id queue for metric 0x%x", a5, a6, a7, a8, 0);
  sub_1CC5B22CC();
}

void sub_1CC5C33E8(int a1, NSObject *a2)
{
  int v2;
  uint64_t v3;
  __int16 v4;
  int v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  v2 = 134218240;
  v3 = 0;
  v4 = 1024;
  v5 = a1;
  _os_log_debug_impl(&dword_1CC590000, a2, OS_LOG_TYPE_DEBUG, "core:#D setExpectedMetricsForTrigger found %zd queriable metrics for trigger 0x%x", (uint8_t *)&v2, 0x12u);
}

void sub_1CC5C3468(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_1CC5B22BC(&dword_1CC590000, a2, a3, "core:#D sendExpectedMetric did not find a submission id queue for metric 0x%x", a5, a6, a7, a8, 0);
  sub_1CC5B22CC();
}

void sub_1CC5C34CC(uint64_t a1)
{
  void *v2;

  v2 = *(void **)a1;
  if (v2)
  {
    *(_QWORD *)(a1 + 8) = v2;
    operator delete(v2);
  }
}

void sub_1CC5C34F0(os_log_t log)
{
  uint8_t v1[16];

  *(_WORD *)v1 = 0;
  _os_log_debug_impl(&dword_1CC590000, log, OS_LOG_TYPE_DEBUG, "core:#D Added an observer of AWDD startup notification", v1, 2u);
  sub_1CC5B22CC();
}

void sub_1CC5C352C(uint64_t a1)
{
  std::__shared_weak_count *v1;

  sub_1CC59A330(a1);
  std::__shared_weak_count::__release_weak(v1);
}

CFDictionaryRef CFDictionaryCreate(CFAllocatorRef allocator, const void **keys, const void **values, CFIndex numValues, const CFDictionaryKeyCallBacks *keyCallBacks, const CFDictionaryValueCallBacks *valueCallBacks)
{
  return (CFDictionaryRef)MEMORY[0x1E0C98530](allocator, keys, values, numValues, keyCallBacks, valueCallBacks);
}

CFDictionaryRef CFDictionaryCreateCopy(CFAllocatorRef allocator, CFDictionaryRef theDict)
{
  return (CFDictionaryRef)MEMORY[0x1E0C98538](allocator, theDict);
}

void CFNotificationCenterAddObserver(CFNotificationCenterRef center, const void *observer, CFNotificationCallback callBack, CFStringRef name, const void *object, CFNotificationSuspensionBehavior suspensionBehavior)
{
  MEMORY[0x1E0C988B0](center, observer, callBack, name, object, suspensionBehavior);
}

CFNotificationCenterRef CFNotificationCenterGetDarwinNotifyCenter(void)
{
  return (CFNotificationCenterRef)MEMORY[0x1E0C988B8]();
}

void CFNotificationCenterRemoveObserver(CFNotificationCenterRef center, const void *observer, CFNotificationName name, const void *object)
{
  MEMORY[0x1E0C98900](center, observer, name, object);
}

CFNumberRef CFNumberCreate(CFAllocatorRef allocator, CFNumberType theType, const void *valuePtr)
{
  return (CFNumberRef)MEMORY[0x1E0C98928](allocator, theType, valuePtr);
}

void CFRelease(CFTypeRef cf)
{
  MEMORY[0x1E0C98BC0](cf);
}

CFTypeRef CFRetain(CFTypeRef cf)
{
  return (CFTypeRef)MEMORY[0x1E0C98BD0](cf);
}

CFStringRef CFStringCreateWithCString(CFAllocatorRef alloc, const char *cStr, CFStringEncoding encoding)
{
  return (CFStringRef)MEMORY[0x1E0C98FD0](alloc, cStr, *(_QWORD *)&encoding);
}

void *__cdecl _Block_copy(const void *aBlock)
{
  return (void *)MEMORY[0x1E0C80928](aBlock);
}

void _Block_release(const void *aBlock)
{
  MEMORY[0x1E0C80958](aBlock);
}

void _Unwind_Resume(_Unwind_Exception *exception_object)
{
  MEMORY[0x1E0C80A20](exception_object);
}

uint64_t sConvertMetricToXpc()
{
  return MEMORY[0x1E0DDD070]();
}

uint64_t sCreateAwdMetadataLoaderForXpcConversion(void)
{
  return MEMORY[0x1E0DDD078]();
}

uint64_t sCreateLazyAwdMetadataLoaderForXpcConversion(void)
{
  return MEMORY[0x1E0DDD080]();
}

uint64_t LazyMetadataLoader::setBaseMetadata(LazyMetadataLoader *this, void *a2)
{
  return MEMORY[0x1E0DDD088](this, a2);
}

uint64_t LazyMetadataLoader::setMetadataForComponent(LazyMetadataLoader *this, void *a2)
{
  return MEMORY[0x1E0DDD090](this, a2);
}

uint64_t wireless_diagnostics::google::protobuf::MessageLite::ParseFromArray(wireless_diagnostics::google::protobuf::MessageLite *this, const void *a2)
{
  return MEMORY[0x1E0DE8200](this, a2);
}

void wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(wireless_diagnostics::google::protobuf::MessageLite *this)
{
  MEMORY[0x1E0DE8210](this);
}

uint64_t wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(wireless_diagnostics::google::protobuf::io::CodedInputStream *this)
{
  return MEMORY[0x1E0DE8230](this);
}

uint64_t wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(wireless_diagnostics::google::protobuf::io::CodedInputStream *this, unsigned int *a2)
{
  return MEMORY[0x1E0DE8238](this, a2);
}

uint64_t wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint64Fallback(wireless_diagnostics::google::protobuf::io::CodedInputStream *this, unint64_t *a2)
{
  return MEMORY[0x1E0DE8240](this, a2);
}

uint64_t wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback(wireless_diagnostics::google::protobuf::io::CodedInputStream *this, unsigned int *a2)
{
  return MEMORY[0x1E0DE8250](this, a2);
}

uint64_t wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(wireless_diagnostics::google::protobuf::io::CodedInputStream *this, unint64_t *a2)
{
  return MEMORY[0x1E0DE8258](this, a2);
}

uint64_t wireless_diagnostics::google::protobuf::io::CodedInputStream::Skip(wireless_diagnostics::google::protobuf::io::CodedInputStream *this)
{
  return MEMORY[0x1E0DE8260](this);
}

uint64_t wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(wireless_diagnostics::google::protobuf::io::CodedInputStream *this)
{
  return MEMORY[0x1E0DE8270](this);
}

uint64_t wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(wireless_diagnostics::google::protobuf::io::CodedInputStream *this)
{
  return MEMORY[0x1E0DE8278](this);
}

void wireless_diagnostics::google::protobuf::io::CodedInputStream::~CodedInputStream(wireless_diagnostics::google::protobuf::io::CodedInputStream *this)
{
  MEMORY[0x1E0DE8280](this);
}

uint64_t wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize64(wireless_diagnostics::google::protobuf::io::CodedOutputStream *this)
{
  return MEMORY[0x1E0DE8298](this);
}

uint64_t wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(wireless_diagnostics::google::protobuf::io::CodedOutputStream *this)
{
  return MEMORY[0x1E0DE82B8](this);
}

uint64_t wireless_diagnostics::google::protobuf::io::CodedOutputStream::WriteVarint64ToArray(wireless_diagnostics::google::protobuf::io::CodedOutputStream *this, uint64_t a2, unsigned __int8 *a3)
{
  return MEMORY[0x1E0DE82C0](this, a2, a3);
}

uint64_t wireless_diagnostics::google::protobuf::io::CodedOutputStream::WriteVarint32FallbackToArray(wireless_diagnostics::google::protobuf::io::CodedOutputStream *this, uint64_t a2, unsigned __int8 *a3)
{
  return MEMORY[0x1E0DE82C8](this, a2, a3);
}

uint64_t wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage()
{
  return MEMORY[0x1E0DE82E0]();
}

void wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage(wireless_diagnostics::google::protobuf::internal::LogMessage *this)
{
  MEMORY[0x1E0DE82E8](this);
}

uint64_t wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<()
{
  return MEMORY[0x1E0DE82F0]();
}

uint64_t wireless_diagnostics::google::protobuf::internal::OnShutdown(wireless_diagnostics::google::protobuf::internal *this, void (*a2)(void))
{
  return MEMORY[0x1E0DE82F8](this, a2);
}

uint64_t wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=()
{
  return MEMORY[0x1E0DE8300]();
}

uint64_t wireless_diagnostics::google::protobuf::internal::VerifyVersion(wireless_diagnostics::google::protobuf::internal *this, uint64_t a2, uint64_t a3, const char *a4)
{
  return MEMORY[0x1E0DE8340](this, a2, a3, a4);
}

uint64_t wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString()
{
  return MEMORY[0x1E0DE8348]();
}

uint64_t wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBytes()
{
  return MEMORY[0x1E0DE8350]();
}

uint64_t wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteFloat(wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, uint64_t a2, float a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  return MEMORY[0x1E0DE8358](this, a2, a4, a3);
}

uint64_t wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteInt32(wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, uint64_t a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  return MEMORY[0x1E0DE8360](this, a2, a3, a4);
}

uint64_t wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteInt64(wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, uint64_t a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  return MEMORY[0x1E0DE8368](this, a2, a3, a4);
}

uint64_t wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble(wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, uint64_t a2, double a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  return MEMORY[0x1E0DE8370](this, a2, a4, a3);
}

uint64_t wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteSInt32(wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, uint64_t a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  return MEMORY[0x1E0DE8378](this, a2, a3, a4);
}

uint64_t wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString()
{
  return MEMORY[0x1E0DE8380]();
}

uint64_t wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32(wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, uint64_t a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  return MEMORY[0x1E0DE8388](this, a2, a3, a4);
}

uint64_t wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt64(wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, uint64_t a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  return MEMORY[0x1E0DE8390](this, a2, a3, a4);
}

uint64_t wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage(wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, uint64_t a2, const wireless_diagnostics::google::protobuf::MessageLite *a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  return MEMORY[0x1E0DE83A8](this, a2, a3, a4);
}

uint64_t wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadPackedEnumNoInline()
{
  return MEMORY[0x1E0DE83B0]();
}

uint64_t wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadBytes()
{
  return MEMORY[0x1E0DE83B8]();
}

uint64_t wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, wireless_diagnostics::google::protobuf::io::CodedInputStream *a2)
{
  return MEMORY[0x1E0DE83C0](this, a2);
}

uint64_t wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool(wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, uint64_t a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  return MEMORY[0x1E0DE83C8](this, a2, a3, a4);
}

uint64_t wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum(wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, uint64_t a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  return MEMORY[0x1E0DE83D0](this, a2, a3, a4);
}

uint64_t wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Swap()
{
  return MEMORY[0x1E0DE83E0]();
}

uint64_t wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve(wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *this)
{
  return MEMORY[0x1E0DE83E8](this);
}

uint64_t wireless_diagnostics::google::protobuf::internal::StringTypeHandlerBase::New(wireless_diagnostics::google::protobuf::internal::StringTypeHandlerBase *this)
{
  return MEMORY[0x1E0DE83F0](this);
}

uint64_t wireless_diagnostics::google::protobuf::internal::StringTypeHandlerBase::Delete()
{
  return MEMORY[0x1E0DE83F8]();
}

uint64_t PB::Writer::Writer(PB::Writer *this)
{
  return MEMORY[0x1E0D82FF0](this);
}

void PB::Writer::~Writer(PB::Writer *this)
{
  MEMORY[0x1E0D82FF8](this);
}

uint64_t ctu::OsLogLogger::OsLogLogger(ctu::OsLogLogger *this, const char *a2, const char *a3)
{
  return MEMORY[0x1E0DE3730](this, a2, a3);
}

void ctu::OsLogLogger::~OsLogLogger(ctu::OsLogLogger *this)
{
  MEMORY[0x1E0DE3748](this);
}

uint64_t ctu::path_join_impl()
{
  return MEMORY[0x1E0DE3798]();
}

uint64_t ctu::XpcClientHelper::setServer_internal()
{
  return MEMORY[0x1E0DE37A8]();
}

uint64_t ctu::XpcClientHelper::setServer()
{
  return MEMORY[0x1E0DE37B0]();
}

void ctu::XpcClientHelper::~XpcClientHelper(ctu::XpcClientHelper *this)
{
  MEMORY[0x1E0DE37B8](this);
}

uint64_t ctu::cf::convert_copy()
{
  return MEMORY[0x1E0DE3870]();
}

uint64_t ctu::hex()
{
  return MEMORY[0x1E0DE3988]();
}

uint64_t ctu::hex(ctu *this)
{
  return MEMORY[0x1E0DE3990](this);
}

uint64_t ctu::Clock::now_in_nanoseconds(ctu::Clock *this)
{
  return MEMORY[0x1E0DE39A8](this);
}

uint64_t ctu::XpcClient::setServer_sync()
{
  return MEMORY[0x1E0DE3A00]();
}

uint64_t ctu::XpcClient::XpcClient()
{
  return MEMORY[0x1E0DE3A08]();
}

void ctu::XpcClient::~XpcClient(ctu::XpcClient *this)
{
  MEMORY[0x1E0DE3A18](this);
}

uint64_t xpc::dyn_cast_or_default()
{
  return MEMORY[0x1E0DE3A80]();
}

{
  return MEMORY[0x1E0DE3A90]();
}

{
  return MEMORY[0x1E0DE3AA0]();
}

{
  return MEMORY[0x1E0DE3AA8]();
}

{
  return MEMORY[0x1E0DE3AB8]();
}

uint64_t wireless_diagnostics::google::protobuf::MessageLite::SerializeToArray(wireless_diagnostics::google::protobuf::MessageLite *this, void *a2)
{
  return MEMORY[0x1E0DE8400](this, a2);
}

uint64_t wireless_diagnostics::google::protobuf::MessageLite::SerializeToString()
{
  return MEMORY[0x1E0DE8408]();
}

uint64_t wireless_diagnostics::google::protobuf::io::CodedInputStream::BytesUntilLimit(wireless_diagnostics::google::protobuf::io::CodedInputStream *this)
{
  return MEMORY[0x1E0DE8418](this);
}

uint64_t std::stringbuf::str()
{
  return MEMORY[0x1E0DE41F0]();
}

const std::locale::facet *__cdecl std::locale::use_facet(const std::locale *this, std::locale::id *a2)
{
  return (const std::locale::facet *)MEMORY[0x1E0DE4248](this, a2);
}

std::locale std::ios_base::getloc(const std::ios_base *this)
{
  return (std::locale)MEMORY[0x1E0DE4258](this);
}

std::logic_error *__cdecl std::logic_error::logic_error(std::logic_error *this, const char *a2)
{
  return (std::logic_error *)MEMORY[0x1E0DE4288](this, a2);
}

std::runtime_error *__cdecl std::runtime_error::runtime_error(std::runtime_error *this, const char *a2)
{
  return (std::runtime_error *)MEMORY[0x1E0DE4308](this, a2);
}

std::bad_array_new_length *__cdecl std::bad_array_new_length::bad_array_new_length(std::bad_array_new_length *this)
{
  return (std::bad_array_new_length *)MEMORY[0x1E0DE4388](this);
}

std::__sp_mut *__cdecl std::__get_sp_mut(const void *a1)
{
  return (std::__sp_mut *)MEMORY[0x1E0DE43E0](a1);
}

std::string *__cdecl std::string::append(std::string *this, const std::string::value_type *__s)
{
  return (std::string *)MEMORY[0x1E0DE4420](this, __s);
}

std::string *__cdecl std::string::append(std::string *this, const std::string::value_type *__s, std::string::size_type __n)
{
  return (std::string *)MEMORY[0x1E0DE4428](this, __s, __n);
}

std::string *__cdecl std::string::insert(std::string *this, std::string::size_type __pos, const std::string::value_type *__s)
{
  return (std::string *)MEMORY[0x1E0DE4468](this, __pos, __s);
}

std::string *__cdecl std::string::operator=(std::string *this, const std::string *__str)
{
  return (std::string *)MEMORY[0x1E0DE44D8](this, __str);
}

uint64_t std::ostream::sentry::sentry()
{
  return MEMORY[0x1E0DE46B0]();
}

uint64_t std::ostream::sentry::~sentry()
{
  return MEMORY[0x1E0DE46B8]();
}

uint64_t std::ostream::~ostream()
{
  return MEMORY[0x1E0DE46C8]();
}

uint64_t std::ostream::operator<<()
{
  return MEMORY[0x1E0DE4708]();
}

uint64_t std::streambuf::basic_streambuf()
{
  return MEMORY[0x1E0DE47E0]();
}

uint64_t std::streambuf::~streambuf()
{
  return MEMORY[0x1E0DE47E8]();
}

void std::__shared_weak_count::__release_weak(std::__shared_weak_count *this)
{
  MEMORY[0x1E0DE48F0](this);
}

std::__shared_weak_count *__cdecl std::__shared_weak_count::lock(std::__shared_weak_count *this)
{
  return (std::__shared_weak_count *)MEMORY[0x1E0DE48F8](this);
}

void std::__shared_weak_count::~__shared_weak_count(std::__shared_weak_count *this)
{
  MEMORY[0x1E0DE4900](this);
}

void std::mutex::lock(std::mutex *this)
{
  MEMORY[0x1E0DE4AA0](this);
}

void std::mutex::unlock(std::mutex *this)
{
  MEMORY[0x1E0DE4AA8](this);
}

uint64_t std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>()
{
  return MEMORY[0x1E0DE4B00]();
}

void std::locale::~locale(std::locale *this)
{
  MEMORY[0x1E0DE4B98](this);
}

void std::__sp_mut::lock(std::__sp_mut *this)
{
  MEMORY[0x1E0DE4C38](this);
}

void std::__sp_mut::unlock(std::__sp_mut *this)
{
  MEMORY[0x1E0DE4C40](this);
}

void std::ios_base::__set_badbit_and_consider_rethrow(std::ios_base *this)
{
  MEMORY[0x1E0DE4C50](this);
}

void std::ios_base::init(std::ios_base *this, void *__sb)
{
  MEMORY[0x1E0DE4C68](this, __sb);
}

void std::ios_base::clear(std::ios_base *this, std::ios_base::iostate __state)
{
  MEMORY[0x1E0DE4C80](this, *(_QWORD *)&__state);
}

uint64_t std::ios::~ios()
{
  return MEMORY[0x1E0DE4D28]();
}

std::string *__cdecl std::to_string(std::string *__return_ptr retstr, unsigned int __val)
{
  return (std::string *)MEMORY[0x1E0DE4D60](retstr, *(_QWORD *)&__val);
}

void std::terminate(void)
{
  MEMORY[0x1E0DE4E18]();
}

uint64_t operator delete[]()
{
  return off_1E886A120();
}

void operator delete(void *__p)
{
  off_1E886A128(__p);
}

uint64_t operator delete()
{
  return off_1E886A130();
}

uint64_t operator new[]()
{
  return off_1E886A138();
}

void *__cdecl operator new(size_t __sz)
{
  return (void *)off_1E886A140(__sz);
}

uint64_t operator new()
{
  return off_1E886A148();
}

void *__cxa_allocate_exception(size_t thrown_size)
{
  return (void *)MEMORY[0x1E0DE5068](thrown_size);
}

void *__cxa_begin_catch(void *a1)
{
  return (void *)MEMORY[0x1E0DE5080](a1);
}

void __cxa_end_catch(void)
{
  MEMORY[0x1E0DE5098]();
}

void __cxa_free_exception(void *a1)
{
  MEMORY[0x1E0DE50A0](a1);
}

void __cxa_rethrow(void)
{
  MEMORY[0x1E0DE50D0]();
}

void __cxa_throw(void *a1, struct type_info *lptinfo, void (*a3)(void *))
{
  MEMORY[0x1E0DE50D8](a1, lptinfo, a3);
}

void _os_log_debug_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x1E0C81020](dso, log, type, format, buf, *(_QWORD *)&size);
}

void _os_log_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x1E0C81048](dso, log, type, format, buf, *(_QWORD *)&size);
}

void bzero(void *a1, size_t a2)
{
  MEMORY[0x1E0C81758](a1, a2);
}

void dispatch_after(dispatch_time_t when, dispatch_queue_t queue, dispatch_block_t block)
{
  MEMORY[0x1E0C82BC8](when, queue, block);
}

void dispatch_async(dispatch_queue_t queue, dispatch_block_t block)
{
  MEMORY[0x1E0C82C00](queue, block);
}

void dispatch_async_and_wait(dispatch_queue_t queue, dispatch_block_t block)
{
  MEMORY[0x1E0C82C08](queue, block);
}

void dispatch_async_f(dispatch_queue_t queue, void *context, dispatch_function_t work)
{
  MEMORY[0x1E0C82C18](queue, context, work);
}

void dispatch_barrier_async_f(dispatch_queue_t queue, void *context, dispatch_function_t work)
{
  MEMORY[0x1E0C82C40](queue, context, work);
}

dispatch_queue_global_t dispatch_get_global_queue(intptr_t identifier, uintptr_t flags)
{
  return (dispatch_queue_global_t)MEMORY[0x1E0C82D00](identifier, flags);
}

dispatch_group_t dispatch_group_create(void)
{
  return (dispatch_group_t)MEMORY[0x1E0C82D20]();
}

void dispatch_group_enter(dispatch_group_t group)
{
  MEMORY[0x1E0C82D28](group);
}

void dispatch_group_leave(dispatch_group_t group)
{
  MEMORY[0x1E0C82D30](group);
}

void dispatch_group_notify_f(dispatch_group_t group, dispatch_queue_t queue, void *context, dispatch_function_t work)
{
  MEMORY[0x1E0C82D40](group, queue, context, work);
}

dispatch_queue_attr_t dispatch_queue_attr_make_with_qos_class(dispatch_queue_attr_t attr, dispatch_qos_class_t qos_class, int relative_priority)
{
  return (dispatch_queue_attr_t)MEMORY[0x1E0C82E38](attr, *(_QWORD *)&qos_class, *(_QWORD *)&relative_priority);
}

dispatch_queue_t dispatch_queue_create(const char *label, dispatch_queue_attr_t attr)
{
  return (dispatch_queue_t)MEMORY[0x1E0C82E48](label, attr);
}

dispatch_queue_t dispatch_queue_create_with_target_V2(const char *label, dispatch_queue_attr_t attr, dispatch_queue_t target)
{
  return (dispatch_queue_t)MEMORY[0x1E0C82E50](label, attr, target);
}

void dispatch_release(dispatch_object_t object)
{
  MEMORY[0x1E0C82E98](object);
}

void dispatch_resume(dispatch_object_t object)
{
  MEMORY[0x1E0C82EA0](object);
}

void dispatch_retain(dispatch_object_t object)
{
  MEMORY[0x1E0C82EA8](object);
}

void dispatch_source_cancel(dispatch_source_t source)
{
  MEMORY[0x1E0C82F10](source);
}

dispatch_source_t dispatch_source_create(dispatch_source_type_t type, uintptr_t handle, uintptr_t mask, dispatch_queue_t queue)
{
  return (dispatch_source_t)MEMORY[0x1E0C82F20](type, handle, mask, queue);
}

void dispatch_source_set_cancel_handler(dispatch_source_t source, dispatch_block_t handler)
{
  MEMORY[0x1E0C82F48](source, handler);
}

void dispatch_source_set_event_handler(dispatch_source_t source, dispatch_block_t handler)
{
  MEMORY[0x1E0C82F58](source, handler);
}

void dispatch_source_set_timer(dispatch_source_t source, dispatch_time_t start, uint64_t interval, uint64_t leeway)
{
  MEMORY[0x1E0C82F78](source, start, interval, leeway);
}

void dispatch_sync(dispatch_queue_t queue, dispatch_block_t block)
{
  MEMORY[0x1E0C82F90](queue, block);
}

dispatch_time_t dispatch_time(dispatch_time_t when, int64_t delta)
{
  return MEMORY[0x1E0C82FB8](when, delta);
}

int fflush(FILE *a1)
{
  return MEMORY[0x1E0C83370](a1);
}

void free(void *a1)
{
  MEMORY[0x1E0C834A8](a1);
}

pid_t getpid(void)
{
  return MEMORY[0x1E0C83760]();
}

int gettimeofday(timeval *a1, void *a2)
{
  return MEMORY[0x1E0C83820](a1, a2);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return (void *)MEMORY[0x1E0C84088](__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return (void *)MEMORY[0x1E0C84098](__dst, __src, __len);
}

void *__cdecl memset(void *__b, int __c, size_t __len)
{
  return (void *)MEMORY[0x1E0C840B0](__b, *(_QWORD *)&__c, __len);
}

id objc_alloc(Class a1)
{
  return (id)MEMORY[0x1E0DE7BA8](a1);
}

uint64_t objc_alloc_init()
{
  return MEMORY[0x1E0DE7BB8]();
}

void objc_autoreleasePoolPop(void *context)
{
  MEMORY[0x1E0DE7BD8](context);
}

void *objc_autoreleasePoolPush(void)
{
  return (void *)MEMORY[0x1E0DE7BE0]();
}

id objc_autoreleaseReturnValue(id a1)
{
  return (id)MEMORY[0x1E0DE7BE8](a1);
}

uint64_t objc_claimAutoreleasedReturnValue()
{
  return MEMORY[0x1E0DE7BF8]();
}

void objc_enumerationMutation(id obj)
{
  MEMORY[0x1E0DE7C90](obj);
}

id objc_msgSendSuper2(objc_super *a1, SEL a2, ...)
{
  return (id)MEMORY[0x1E0DE7D30](a1, a2);
}

uint64_t objc_opt_class()
{
  return MEMORY[0x1E0DE7D38]();
}

uint64_t objc_opt_isKindOfClass()
{
  return MEMORY[0x1E0DE7D40]();
}

uint64_t objc_opt_respondsToSelector()
{
  return MEMORY[0x1E0DE7D50]();
}

void objc_release(id a1)
{
  MEMORY[0x1E0DE7D78](a1);
}

id objc_retain(id a1)
{
  return (id)MEMORY[0x1E0DE7E50](a1);
}

id objc_retainAutorelease(id a1)
{
  return (id)MEMORY[0x1E0DE7E58](a1);
}

id objc_retainBlock(id a1)
{
  return (id)MEMORY[0x1E0DE7E70](a1);
}

void objc_storeStrong(id *location, id obj)
{
  MEMORY[0x1E0DE7FB0](location, obj);
}

BOOL os_log_type_enabled(os_log_t oslog, os_log_type_t type)
{
  return MEMORY[0x1E0C84780](oslog, type);
}

int pthread_mutex_lock(pthread_mutex_t *a1)
{
  return MEMORY[0x1E0C84E28](a1);
}

int pthread_mutex_unlock(pthread_mutex_t *a1)
{
  return MEMORY[0x1E0C84E38](a1);
}

int strcmp(const char *__s1, const char *__s2)
{
  return MEMORY[0x1E0C85520](__s1, __s2);
}

size_t strlen(const char *__s)
{
  return MEMORY[0x1E0C85578](__s);
}

void syslog(int a1, const char *a2, ...)
{
  MEMORY[0x1E0C857D0](*(_QWORD *)&a1, a2);
}

void xpc_array_append_value(xpc_object_t xarray, xpc_object_t value)
{
  MEMORY[0x1E0C85DE0](xarray, value);
}

BOOL xpc_array_apply(xpc_object_t xarray, xpc_array_applier_t applier)
{
  return MEMORY[0x1E0C85DF8](xarray, applier);
}

xpc_object_t xpc_array_create(xpc_object_t *objects, size_t count)
{
  return (xpc_object_t)MEMORY[0x1E0C85E00](objects, count);
}

size_t xpc_array_get_count(xpc_object_t xarray)
{
  return MEMORY[0x1E0C85E30](xarray);
}

xpc_object_t xpc_array_get_value(xpc_object_t xarray, size_t index)
{
  return (xpc_object_t)MEMORY[0x1E0C85E90](xarray, index);
}

xpc_object_t xpc_BOOL_create(BOOL value)
{
  return (xpc_object_t)MEMORY[0x1E0C85EF0](value);
}

BOOL xpc_BOOL_get_value(xpc_object_t xBOOL)
{
  return MEMORY[0x1E0C85F00](xBOOL);
}

xpc_connection_t xpc_connection_create_mach_service(const char *name, dispatch_queue_t targetq, uint64_t flags)
{
  return (xpc_connection_t)MEMORY[0x1E0C85FB0](name, targetq, flags);
}

void xpc_connection_resume(xpc_connection_t connection)
{
  MEMORY[0x1E0C86018](connection);
}

void xpc_connection_send_barrier(xpc_connection_t connection, dispatch_block_t barrier)
{
  MEMORY[0x1E0C86020](connection, barrier);
}

void xpc_connection_send_message(xpc_connection_t connection, xpc_object_t message)
{
  MEMORY[0x1E0C86030](connection, message);
}

void xpc_connection_send_message_with_reply(xpc_connection_t connection, xpc_object_t message, dispatch_queue_t replyq, xpc_handler_t handler)
{
  MEMORY[0x1E0C86038](connection, message, replyq, handler);
}

void xpc_connection_set_event_handler(xpc_connection_t connection, xpc_handler_t handler)
{
  MEMORY[0x1E0C86080](connection, handler);
}

void xpc_connection_set_target_queue(xpc_connection_t connection, dispatch_queue_t targetq)
{
  MEMORY[0x1E0C860C8](connection, targetq);
}

char *__cdecl xpc_copy_description(xpc_object_t object)
{
  return (char *)MEMORY[0x1E0C86108](object);
}

xpc_object_t xpc_data_create(const void *bytes, size_t length)
{
  return (xpc_object_t)MEMORY[0x1E0C86178](bytes, length);
}

const void *__cdecl xpc_data_get_bytes_ptr(xpc_object_t xdata)
{
  return (const void *)MEMORY[0x1E0C86198](xdata);
}

size_t xpc_data_get_length(xpc_object_t xdata)
{
  return MEMORY[0x1E0C861A8](xdata);
}

BOOL xpc_dictionary_apply(xpc_object_t xdict, xpc_dictionary_applier_t applier)
{
  return MEMORY[0x1E0C861F0](xdict, applier);
}

xpc_object_t xpc_dictionary_create(const char *const *keys, xpc_object_t *values, size_t count)
{
  return (xpc_object_t)MEMORY[0x1E0C86208](keys, values, count);
}

size_t xpc_dictionary_get_count(xpc_object_t xdict)
{
  return MEMORY[0x1E0C86270](xdict);
}

const void *__cdecl xpc_dictionary_get_data(xpc_object_t xdict, const char *key, size_t *length)
{
  return (const void *)MEMORY[0x1E0C86278](xdict, key, length);
}

int64_t xpc_dictionary_get_int64(xpc_object_t xdict, const char *key)
{
  return MEMORY[0x1E0C862A0](xdict, key);
}

xpc_object_t xpc_dictionary_get_value(xpc_object_t xdict, const char *key)
{
  return (xpc_object_t)MEMORY[0x1E0C862E0](xdict, key);
}

void xpc_dictionary_set_data(xpc_object_t xdict, const char *key, const void *bytes, size_t length)
{
  MEMORY[0x1E0C86330](xdict, key, bytes, length);
}

void xpc_dictionary_set_int64(xpc_object_t xdict, const char *key, int64_t value)
{
  MEMORY[0x1E0C86360](xdict, key, value);
}

void xpc_dictionary_set_value(xpc_object_t xdict, const char *key, xpc_object_t value)
{
  MEMORY[0x1E0C863B8](xdict, key, value);
}

double xpc_double_get_value(xpc_object_t xdouble)
{
  double result;

  MEMORY[0x1E0C863E0](xdouble);
  return result;
}

xpc_type_t xpc_get_type(xpc_object_t object)
{
  return (xpc_type_t)MEMORY[0x1E0C86520](object);
}

xpc_object_t xpc_int64_create(int64_t value)
{
  return (xpc_object_t)MEMORY[0x1E0C86568](value);
}

int64_t xpc_int64_get_value(xpc_object_t xint)
{
  return MEMORY[0x1E0C86570](xint);
}

xpc_object_t xpc_null_create(void)
{
  return (xpc_object_t)MEMORY[0x1E0C86628]();
}

void xpc_release(xpc_object_t object)
{
  MEMORY[0x1E0C86658](object);
}

xpc_object_t xpc_retain(xpc_object_t object)
{
  return (xpc_object_t)MEMORY[0x1E0C86660](object);
}

xpc_object_t xpc_string_create(const char *string)
{
  return (xpc_object_t)MEMORY[0x1E0C86720](string);
}

const char *__cdecl xpc_string_get_string_ptr(xpc_object_t xstring)
{
  return (const char *)MEMORY[0x1E0C86758](xstring);
}

uint64_t xpc_uint64_get_value(xpc_object_t xuint)
{
  return MEMORY[0x1E0C867B8](xuint);
}

