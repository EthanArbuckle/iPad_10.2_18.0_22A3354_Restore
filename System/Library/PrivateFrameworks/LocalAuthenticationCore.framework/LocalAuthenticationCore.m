BOOL LACPolicyIsLocationBasedPolicy(uint64_t a1)
{
  return (unint64_t)(a1 - 1025) < 2;
}

__CFString *NSLocalizedStringFromLACBiometryType(uint64_t a1)
{
  __CFString *v1;

  switch(a1)
  {
    case 4:
      +[LACLocalization opticID](LACLocalization, "opticID");
      v1 = (__CFString *)objc_claimAutoreleasedReturnValue();
      break;
    case 2:
      +[LACLocalization faceID](LACLocalization, "faceID");
      v1 = (__CFString *)objc_claimAutoreleasedReturnValue();
      break;
    case 1:
      +[LACLocalization touchID](LACLocalization, "touchID");
      v1 = (__CFString *)objc_claimAutoreleasedReturnValue();
      break;
    default:
      v1 = &stru_2510C57B8;
      break;
  }
  return v1;
}

id getBKSAlternateSystemAppClass()
{
  void *v0;
  id v1;
  _QWORD v3[5];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2050000000;
  v0 = (void *)getBKSAlternateSystemAppClass_softClass;
  v7 = getBKSAlternateSystemAppClass_softClass;
  if (!getBKSAlternateSystemAppClass_softClass)
  {
    v3[0] = MEMORY[0x24BDAC760];
    v3[1] = 3221225472;
    v3[2] = __getBKSAlternateSystemAppClass_block_invoke;
    v3[3] = &unk_2510C0B58;
    v3[4] = &v4;
    __getBKSAlternateSystemAppClass_block_invoke((uint64_t)v3);
    v0 = (void *)v5[3];
  }
  v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_2409E0A98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getBKSAlternateSystemAppClass_block_invoke(uint64_t a1)
{
  Class result;

  if (!BackBoardServicesLibraryCore_frameworkLibrary)
    BackBoardServicesLibraryCore_frameworkLibrary = _sl_dlopen();
  result = objc_getClass("BKSAlternateSystemApp");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  getBKSAlternateSystemAppClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

void sub_2409E1CD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  id *v15;

  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_2409E1E50(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_2409E265C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_2409E2B3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_2409E2D58(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void sub_2409E4FEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id location)
{
  id *v21;

  objc_destroyWeak(v21);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_2409E5358(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id location)
{
  id *v21;

  objc_destroyWeak(v21);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_2409E7000(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 88));
  _Unwind_Resume(a1);
}

void sub_2409E71C4(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_2409E7690(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void OUTLINED_FUNCTION_0(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 0x16u);
}

void sub_2409E7F40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_2409E8208(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

id getSFAuthenticationManagerClass()
{
  void *v0;
  id v1;
  _QWORD v3[5];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2050000000;
  v0 = (void *)getSFAuthenticationManagerClass_softClass;
  v7 = getSFAuthenticationManagerClass_softClass;
  if (!getSFAuthenticationManagerClass_softClass)
  {
    v3[0] = MEMORY[0x24BDAC760];
    v3[1] = 3221225472;
    v3[2] = __getSFAuthenticationManagerClass_block_invoke;
    v3[3] = &unk_2510C0B58;
    v3[4] = &v4;
    __getSFAuthenticationManagerClass_block_invoke((uint64_t)v3);
    v0 = (void *)v5[3];
  }
  v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_2409E8644(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_2409E8EC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_2409E91A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_2409E93B4(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 64), 8);
  _Unwind_Resume(a1);
}

void sub_2409E9888(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

id getSFAuthenticationOptionsClass()
{
  void *v0;
  id v1;
  _QWORD v3[5];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2050000000;
  v0 = (void *)getSFAuthenticationOptionsClass_softClass;
  v7 = getSFAuthenticationOptionsClass_softClass;
  if (!getSFAuthenticationOptionsClass_softClass)
  {
    v3[0] = MEMORY[0x24BDAC760];
    v3[1] = 3221225472;
    v3[2] = __getSFAuthenticationOptionsClass_block_invoke;
    v3[3] = &unk_2510C0B58;
    v3[4] = &v4;
    __getSFAuthenticationOptionsClass_block_invoke((uint64_t)v3);
    v0 = (void *)v5[3];
  }
  v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_2409E9C1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getSFAuthenticationManagerClass_block_invoke(uint64_t a1)
{
  Class result;

  if (!SharingLibraryCore_frameworkLibrary)
    SharingLibraryCore_frameworkLibrary = _sl_dlopen();
  result = objc_getClass("SFAuthenticationManager");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  getSFAuthenticationManagerClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

Class __getSFAuthenticationDeviceClass_block_invoke(uint64_t a1)
{
  Class result;

  if (!SharingLibraryCore_frameworkLibrary)
    SharingLibraryCore_frameworkLibrary = _sl_dlopen();
  result = objc_getClass("SFAuthenticationDevice");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  getSFAuthenticationDeviceClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

Class __getSFAuthenticationOptionsClass_block_invoke(uint64_t a1)
{
  Class result;

  if (!SharingLibraryCore_frameworkLibrary)
    SharingLibraryCore_frameworkLibrary = _sl_dlopen();
  result = objc_getClass("SFAuthenticationOptions");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  getSFAuthenticationOptionsClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

void sub_2409EA474(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 80), 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy_(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose_(uint64_t a1)
{

}

void sub_2409EADC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  id *v15;

  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_2409EB6A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location)
{
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

id getTUCallCenterClass()
{
  void *v0;
  id v1;
  _QWORD v3[5];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2050000000;
  v0 = (void *)getTUCallCenterClass_softClass;
  v7 = getTUCallCenterClass_softClass;
  if (!getTUCallCenterClass_softClass)
  {
    v3[0] = MEMORY[0x24BDAC760];
    v3[1] = 3221225472;
    v3[2] = __getTUCallCenterClass_block_invoke;
    v3[3] = &unk_2510C0B58;
    v3[4] = &v4;
    __getTUCallCenterClass_block_invoke((uint64_t)v3);
    v0 = (void *)v5[3];
  }
  v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_2409EB75C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id getTUUIXPCClientConnectionClass()
{
  void *v0;
  id v1;
  _QWORD v3[5];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2050000000;
  v0 = (void *)getTUUIXPCClientConnectionClass_softClass;
  v7 = getTUUIXPCClientConnectionClass_softClass;
  if (!getTUUIXPCClientConnectionClass_softClass)
  {
    v3[0] = MEMORY[0x24BDAC760];
    v3[1] = 3221225472;
    v3[2] = __getTUUIXPCClientConnectionClass_block_invoke;
    v3[3] = &unk_2510C0B58;
    v3[4] = &v4;
    __getTUUIXPCClientConnectionClass_block_invoke((uint64_t)v3);
    v0 = (void *)v5[3];
  }
  v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_2409EB814(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_2409EB8C4(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_2409EBC30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  id *v15;

  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_2409EBF98(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

Class __getTUCallCenterClass_block_invoke(uint64_t a1)
{
  Class result;

  if (!TelephonyUtilitiesLibraryCore_frameworkLibrary)
    TelephonyUtilitiesLibraryCore_frameworkLibrary = _sl_dlopen();
  result = objc_getClass("TUCallCenter");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  getTUCallCenterClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

Class __getTUUIXPCClientConnectionClass_block_invoke(uint64_t a1)
{
  Class result;

  if (!TelephonyUtilitiesLibraryCore_frameworkLibrary)
    TelephonyUtilitiesLibraryCore_frameworkLibrary = _sl_dlopen();
  result = objc_getClass("TUUIXPCClientConnection");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  getTUUIXPCClientConnectionClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

void OUTLINED_FUNCTION_0_0(void *a1, uint64_t a2, os_log_t log, const char *a4, ...)
{
  va_list va;

  va_start(va, a4);
  _os_log_error_impl(a1, log, OS_LOG_TYPE_ERROR, a4, (uint8_t *)va, 0x16u);
}

id getUNMutableNotificationContentClass()
{
  void *v0;
  id v1;
  _QWORD v3[5];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2050000000;
  v0 = (void *)getUNMutableNotificationContentClass_softClass;
  v7 = getUNMutableNotificationContentClass_softClass;
  if (!getUNMutableNotificationContentClass_softClass)
  {
    v3[0] = MEMORY[0x24BDAC760];
    v3[1] = 3221225472;
    v3[2] = __getUNMutableNotificationContentClass_block_invoke;
    v3[3] = &unk_2510C0B58;
    v3[4] = &v4;
    __getUNMutableNotificationContentClass_block_invoke((uint64_t)v3);
    v0 = (void *)v5[3];
  }
  v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_2409ECA00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id getUNNotificationActionClass()
{
  void *v0;
  id v1;
  _QWORD v3[5];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2050000000;
  v0 = (void *)getUNNotificationActionClass_softClass;
  v7 = getUNNotificationActionClass_softClass;
  if (!getUNNotificationActionClass_softClass)
  {
    v3[0] = MEMORY[0x24BDAC760];
    v3[1] = 3221225472;
    v3[2] = __getUNNotificationActionClass_block_invoke;
    v3[3] = &unk_2510C0B58;
    v3[4] = &v4;
    __getUNNotificationActionClass_block_invoke((uint64_t)v3);
    v0 = (void *)v5[3];
  }
  v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_2409ECAB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id getUNNotificationCategoryClass()
{
  void *v0;
  id v1;
  _QWORD v3[5];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2050000000;
  v0 = (void *)getUNNotificationCategoryClass_softClass;
  v7 = getUNNotificationCategoryClass_softClass;
  if (!getUNNotificationCategoryClass_softClass)
  {
    v3[0] = MEMORY[0x24BDAC760];
    v3[1] = 3221225472;
    v3[2] = __getUNNotificationCategoryClass_block_invoke;
    v3[3] = &unk_2510C0B58;
    v3[4] = &v4;
    __getUNNotificationCategoryClass_block_invoke((uint64_t)v3);
    v0 = (void *)v5[3];
  }
  v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_2409ECB70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id getUNNotificationIconClass()
{
  void *v0;
  id v1;
  _QWORD v3[5];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2050000000;
  v0 = (void *)getUNNotificationIconClass_softClass;
  v7 = getUNNotificationIconClass_softClass;
  if (!getUNNotificationIconClass_softClass)
  {
    v3[0] = MEMORY[0x24BDAC760];
    v3[1] = 3221225472;
    v3[2] = __getUNNotificationIconClass_block_invoke;
    v3[3] = &unk_2510C0B58;
    v3[4] = &v4;
    __getUNNotificationIconClass_block_invoke((uint64_t)v3);
    v0 = (void *)v5[3];
  }
  v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_2409ECC28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id getUNNotificationRequestClass()
{
  void *v0;
  id v1;
  _QWORD v3[5];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2050000000;
  v0 = (void *)getUNNotificationRequestClass_softClass;
  v7 = getUNNotificationRequestClass_softClass;
  if (!getUNNotificationRequestClass_softClass)
  {
    v3[0] = MEMORY[0x24BDAC760];
    v3[1] = 3221225472;
    v3[2] = __getUNNotificationRequestClass_block_invoke;
    v3[3] = &unk_2510C0B58;
    v3[4] = &v4;
    __getUNNotificationRequestClass_block_invoke((uint64_t)v3);
    v0 = (void *)v5[3];
  }
  v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_2409ECCE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id getUNTimeIntervalNotificationTriggerClass()
{
  void *v0;
  id v1;
  _QWORD v3[5];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2050000000;
  v0 = (void *)getUNTimeIntervalNotificationTriggerClass_softClass;
  v7 = getUNTimeIntervalNotificationTriggerClass_softClass;
  if (!getUNTimeIntervalNotificationTriggerClass_softClass)
  {
    v3[0] = MEMORY[0x24BDAC760];
    v3[1] = 3221225472;
    v3[2] = __getUNTimeIntervalNotificationTriggerClass_block_invoke;
    v3[3] = &unk_2510C0B58;
    v3[4] = &v4;
    __getUNTimeIntervalNotificationTriggerClass_block_invoke((uint64_t)v3);
    v0 = (void *)v5[3];
  }
  v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_2409ECD98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id getUNUserNotificationCenterClass()
{
  void *v0;
  id v1;
  _QWORD v3[5];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2050000000;
  v0 = (void *)getUNUserNotificationCenterClass_softClass;
  v7 = getUNUserNotificationCenterClass_softClass;
  if (!getUNUserNotificationCenterClass_softClass)
  {
    v3[0] = MEMORY[0x24BDAC760];
    v3[1] = 3221225472;
    v3[2] = __getUNUserNotificationCenterClass_block_invoke;
    v3[3] = &unk_2510C0B58;
    v3[4] = &v4;
    __getUNUserNotificationCenterClass_block_invoke((uint64_t)v3);
    v0 = (void *)v5[3];
  }
  v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_2409ECE50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getUNMutableNotificationContentClass_block_invoke(uint64_t a1)
{
  Class result;

  if (!UserNotificationsLibraryCore_frameworkLibrary)
    UserNotificationsLibraryCore_frameworkLibrary = _sl_dlopen();
  result = objc_getClass("UNMutableNotificationContent");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  getUNMutableNotificationContentClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

Class __getUNNotificationActionClass_block_invoke(uint64_t a1)
{
  Class result;

  if (!UserNotificationsLibraryCore_frameworkLibrary)
    UserNotificationsLibraryCore_frameworkLibrary = _sl_dlopen();
  result = objc_getClass("UNNotificationAction");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  getUNNotificationActionClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

Class __getUNNotificationCategoryClass_block_invoke(uint64_t a1)
{
  Class result;

  if (!UserNotificationsLibraryCore_frameworkLibrary)
    UserNotificationsLibraryCore_frameworkLibrary = _sl_dlopen();
  result = objc_getClass("UNNotificationCategory");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  getUNNotificationCategoryClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

Class __getUNNotificationIconClass_block_invoke(uint64_t a1)
{
  Class result;

  if (!UserNotificationsLibraryCore_frameworkLibrary)
    UserNotificationsLibraryCore_frameworkLibrary = _sl_dlopen();
  result = objc_getClass("UNNotificationIcon");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  getUNNotificationIconClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

Class __getUNNotificationRequestClass_block_invoke(uint64_t a1)
{
  Class result;

  if (!UserNotificationsLibraryCore_frameworkLibrary)
    UserNotificationsLibraryCore_frameworkLibrary = _sl_dlopen();
  result = objc_getClass("UNNotificationRequest");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  getUNNotificationRequestClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

Class __getUNTimeIntervalNotificationTriggerClass_block_invoke(uint64_t a1)
{
  Class result;

  if (!UserNotificationsLibraryCore_frameworkLibrary)
    UserNotificationsLibraryCore_frameworkLibrary = _sl_dlopen();
  result = objc_getClass("UNTimeIntervalNotificationTrigger");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  getUNTimeIntervalNotificationTriggerClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

Class __getUNUserNotificationCenterClass_block_invoke(uint64_t a1)
{
  Class result;

  if (!UserNotificationsLibraryCore_frameworkLibrary)
    UserNotificationsLibraryCore_frameworkLibrary = _sl_dlopen();
  result = objc_getClass("UNUserNotificationCenter");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  getUNUserNotificationCenterClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

void sub_2409EE060(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  __destructor_8_s0_s8_s16((id *)va);
  _Unwind_Resume(a1);
}

void __destructor_8_s0_s8_s16(id *a1)
{

}

void sub_2409EE370(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

const __CFString *NSStringFromLADTOEventRawValue(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 2)
    return CFSTR("LADTOEventRawValueRatchetStateDidChange");
  else
    return off_2510C1298[a1 - 1];
}

void sub_2409EEB18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__0(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__0(uint64_t a1)
{

}

void sub_2409EEF48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_2409EF2E8(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_2409EF5BC(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 64));
  _Unwind_Resume(a1);
}

void OUTLINED_FUNCTION_0_1(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  NSObject *v9;

  _os_log_error_impl(a1, v9, OS_LOG_TYPE_ERROR, a4, &a9, 0xEu);
}

void sub_2409EFCB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  id *v15;

  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_2409F011C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id location)
{
  id *v21;

  objc_destroyWeak(v21);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_2409F06BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location)
{
  id *v17;

  objc_destroyWeak(v17);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_2409F08E4(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 72));
  _Unwind_Resume(a1);
}

void sub_2409F0A80(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_2409F19D4(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void sub_2409F1B54(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_2409F1E0C(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void sub_2409F1F18(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_2409F20C4(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_2409F2744(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_2409F2B54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void BiometricKitNotificationCallback(uint64_t a1, void *a2, void *a3)
{
  id v4;
  id v5;
  NSObject *v6;
  NSObject *v7;
  NSObject *v8;
  NSObject *v9;
  _QWORD v10[4];
  NSObject *v11;
  _QWORD block[4];
  NSObject *v13;
  uint8_t buf[4];
  id v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  v4 = a2;
  v5 = a3;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
  {
    LACLogBiometry();
    v6 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138543362;
      v15 = v5;
      _os_log_impl(&dword_2409DC000, v6, OS_LOG_TYPE_DEFAULT, "BK notification received: %{public}@", buf, 0xCu);
    }

    if ((objc_msgSend(v5, "isEqualToString:", CFSTR("com.apple.BiometricKit.enrollmentChanged")) & 1) != 0)
    {
      objc_msgSend(v4, "workQueue");
      v7 = objc_claimAutoreleasedReturnValue();
      block[0] = MEMORY[0x24BDAC760];
      block[1] = 3221225472;
      block[2] = __BiometricKitNotificationCallback_block_invoke;
      block[3] = &unk_2510C0B30;
      v13 = v4;
      dispatch_async(v7, block);

      v8 = v13;
    }
    else
    {
      if (!objc_msgSend(v5, "isEqualToString:", CFSTR("com.apple.BiometricKit.generalLockoutStateChanged")))goto LABEL_10;
      objc_msgSend(v4, "workQueue");
      v9 = objc_claimAutoreleasedReturnValue();
      v10[0] = MEMORY[0x24BDAC760];
      v10[1] = 3221225472;
      v10[2] = __BiometricKitNotificationCallback_block_invoke_2;
      v10[3] = &unk_2510C0B30;
      v11 = v4;
      dispatch_async(v9, v10);

      v8 = v11;
    }
  }
  else
  {
    LACLogBiometry();
    v8 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_FAULT))
      BiometricKitNotificationCallback_cold_1(v8);
  }

LABEL_10:
}

void sub_2409F3390(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_2409F3A34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v12;
  va_list va;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  va_list va1;

  va_start(va1, a11);
  va_start(va, a11);
  v12 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  v18 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__1(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__1(uint64_t a1)
{

}

const __CFString *NSStringFromBKOperationEndReason(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 3)
    return CFSTR("Unknown");
  else
    return off_2510C1688[a1 - 1];
}

const __CFString *NSStringFromBKOperationState(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 4)
    return CFSTR("Unknown");
  else
    return off_2510C16A8[a1 - 1];
}

const __CFString *NSStringFromBKLockoutState(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 6)
    return CFSTR("Unknown");
  else
    return off_2510C16D0[a1 - 1];
}

const __CFString *NSStringFromBKMatchFailReason(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 6)
    return CFSTR("Unknown");
  else
    return off_2510C1708[a1 - 1];
}

const __CFString *NSStringFromBKDevice(uint64_t a1)
{
  const __CFString *v1;

  v1 = CFSTR("Unknown");
  if (a1 == 1)
    v1 = CFSTR("BKDeviceTypeTouchID");
  if (a1 == 2)
    return CFSTR("BKDeviceTypePearl");
  else
    return v1;
}

uint64_t LACEventFromBKDevice(uint64_t a1)
{
  uint64_t *v1;

  if (a1 == 1)
  {
    v1 = &LACEventTouchID;
    return *v1;
  }
  if (a1 == 2)
  {
    v1 = &LACEventPearl;
    return *v1;
  }
  return -1;
}

uint64_t LACEventFromBiometryType(uint64_t a1)
{
  uint64_t *v1;

  switch(a1)
  {
    case 4:
      v1 = &LACEventOyster;
      return *v1;
    case 2:
      v1 = &LACEventPearl;
      return *v1;
    case 1:
      v1 = &LACEventTouchID;
      return *v1;
  }
  return -1;
}

Class __getBKDeviceManagerClass_block_invoke(uint64_t a1)
{
  Class result;

  if (!BiometricKitLibraryCore_frameworkLibrary)
    BiometricKitLibraryCore_frameworkLibrary = _sl_dlopen();
  result = objc_getClass("BKDeviceManager");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  getBKDeviceManagerClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

Class __getBKDeviceClass_block_invoke(uint64_t a1)
{
  Class result;

  if (!BiometricKitLibraryCore_frameworkLibrary)
    BiometricKitLibraryCore_frameworkLibrary = _sl_dlopen();
  result = objc_getClass("BKDevice");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  getBKDeviceClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

void OUTLINED_FUNCTION_0_2(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 0xCu);
}

const __CFString *NSStringFromLACDTORatchetStateRawValue(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 3)
    return CFSTR("LACDTORatchetStateRawValueNotStarted");
  else
    return off_2510C1740[a1 - 1];
}

void sub_2409F5DB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location)
{
  id *v17;

  objc_destroyWeak(v17);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

const __CFString *NSStringFromLACCompanionType(uint64_t a1)
{
  const __CFString *v1;

  v1 = &stru_2510C57B8;
  if (a1 == 1)
    v1 = CFSTR("Watch");
  if (a1 == 2)
    return CFSTR("Mac");
  else
    return v1;
}

const __CFString *NSStringFromLACKeyBagState(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 4)
    return CFSTR("Unknown");
  else
    return off_2510C1788[a1 - 1];
}

void sub_2409F7BE8(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_2409F8768(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void sub_2409F8890(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

uint64_t LACDTOLostModeFetchStrategyFromRequest(void *a1)
{
  id v1;
  void *v2;
  int v3;
  void *v4;
  void *v5;
  void *v6;
  int v7;
  void *v8;
  void *v9;
  uint64_t v10;
  void *v12;
  int v13;

  v1 = a1;
  if (LACPolicyIsLocationBasedPolicy(objc_msgSend(v1, "policy"))
    && objc_msgSend(v1, "isDTOEnabled")
    && (objc_msgSend(v1, "biometryWatchdogPack"),
        v2 = (void *)objc_claimAutoreleasedReturnValue(),
        v3 = objc_msgSend(v2, "isBarking"),
        v2,
        v3))
  {
    objc_msgSend(v1, "options");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD16E0], "numberWithInteger:", 1061);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "objectForKey:", v5);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v7 = objc_msgSend(v6, "BOOLValue");

    objc_msgSend(v1, "biometryWatchdogPack");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = v8;
    if (v7)
      objc_msgSend(v8, "biometryWatchdogGlobal");
    else
      objc_msgSend(v8, "biometryWatchdogDTO");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    v13 = objc_msgSend(v12, "isBarking");

    v10 = v13 ^ 1u;
  }
  else
  {
    v10 = 1;
  }

  return v10;
}

const __CFString *NSStringFromLACDTOLostModeFetchStrategy(uint64_t a1)
{
  if (a1)
    return CFSTR("Skip");
  else
    return CFSTR("BestEffort");
}

void OUTLINED_FUNCTION_5(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 8u);
}

void sub_2409F9834(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  id *v15;

  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_2409FB0CC(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void sub_2409FB240(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void sub_2409FB484(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  id *v15;

  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

double LACDTOLostModeStateMaxAgeSeconds(uint64_t a1)
{
  void *v1;
  double v2;
  double v3;

  __44__LACFlags_valueForFlagCompanionMockDevices__block_invoke(a1, CFSTR("LA.dto.lostModeEnabledMaxAgeSeconds"), &unk_2510F6B08);
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "doubleValue");
  v3 = v2;

  return v3;
}

void sub_2409FC3E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  id *v15;

  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_2409FC724(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_2409FCAF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_2409FD0A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  id *v15;

  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

id getAKDeviceListRequestContextClass()
{
  void *v0;
  id v1;
  _QWORD v3[5];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2050000000;
  v0 = (void *)getAKDeviceListRequestContextClass_softClass;
  v7 = getAKDeviceListRequestContextClass_softClass;
  if (!getAKDeviceListRequestContextClass_softClass)
  {
    v3[0] = MEMORY[0x24BDAC760];
    v3[1] = 3221225472;
    v3[2] = __getAKDeviceListRequestContextClass_block_invoke;
    v3[3] = &unk_2510C0B58;
    v3[4] = &v4;
    __getAKDeviceListRequestContextClass_block_invoke((uint64_t)v3);
    v0 = (void *)v5[3];
  }
  v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_2409FD600(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id getAKAccountManagerClass()
{
  void *v0;
  id v1;
  _QWORD v3[5];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2050000000;
  v0 = (void *)getAKAccountManagerClass_softClass;
  v7 = getAKAccountManagerClass_softClass;
  if (!getAKAccountManagerClass_softClass)
  {
    v3[0] = MEMORY[0x24BDAC760];
    v3[1] = 3221225472;
    v3[2] = __getAKAccountManagerClass_block_invoke;
    v3[3] = &unk_2510C0B58;
    v3[4] = &v4;
    __getAKAccountManagerClass_block_invoke((uint64_t)v3);
    v0 = (void *)v5[3];
  }
  v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_2409FD6B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id getAKAppleIDAuthenticationControllerClass()
{
  void *v0;
  id v1;
  _QWORD v3[5];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2050000000;
  v0 = (void *)getAKAppleIDAuthenticationControllerClass_softClass;
  v7 = getAKAppleIDAuthenticationControllerClass_softClass;
  if (!getAKAppleIDAuthenticationControllerClass_softClass)
  {
    v3[0] = MEMORY[0x24BDAC760];
    v3[1] = 3221225472;
    v3[2] = __getAKAppleIDAuthenticationControllerClass_block_invoke;
    v3[3] = &unk_2510C0B58;
    v3[4] = &v4;
    __getAKAppleIDAuthenticationControllerClass_block_invoke((uint64_t)v3);
    v0 = (void *)v5[3];
  }
  v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_2409FD770(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getAKDeviceListRequestContextClass_block_invoke(uint64_t a1)
{
  Class result;

  if (!AuthKitLibraryCore_frameworkLibrary)
    AuthKitLibraryCore_frameworkLibrary = _sl_dlopen();
  result = objc_getClass("AKDeviceListRequestContext");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  getAKDeviceListRequestContextClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

Class __getAKAccountManagerClass_block_invoke(uint64_t a1)
{
  Class result;

  if (!AuthKitLibraryCore_frameworkLibrary)
    AuthKitLibraryCore_frameworkLibrary = _sl_dlopen();
  result = objc_getClass("AKAccountManager");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  getAKAccountManagerClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

Class __getAKAppleIDAuthenticationControllerClass_block_invoke(uint64_t a1)
{
  Class result;

  if (!AuthKitLibraryCore_frameworkLibrary)
    AuthKitLibraryCore_frameworkLibrary = _sl_dlopen();
  result = objc_getClass("AKAppleIDAuthenticationController");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  getAKAppleIDAuthenticationControllerClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

const __CFString *NSStringFromLACPasscodeType(unint64_t a1)
{
  if (a1 > 3)
    return CFSTR("Unknown");
  else
    return off_2510C1AB0[a1];
}

uint64_t LACPasscodeTypeLength(uint64_t a1)
{
  uint64_t v1;

  v1 = 6;
  if (a1 != 1)
    v1 = 0x7FFFFFFFFFFFFFFFLL;
  if (a1)
    return v1;
  else
    return 4;
}

const __CFString *NSStringFromLACPolicy(uint64_t a1)
{
  uint64_t v1;
  const __CFString *result;

  v1 = a1 - 1003;
  result = CFSTR("LACPolicyAccessoryAuthorization");
  switch(v1)
  {
    case 0:
      result = CFSTR("LACPolicyHumanPresence");
      break;
    case 1:
      result = CFSTR("LACPolicyStockholm");
      break;
    case 2:
      result = CFSTR("LACPolicyOslo");
      break;
    case 3:
      result = CFSTR("LACPolicyOsloWithPIN");
      break;
    case 4:
      result = CFSTR("LACPolicyTouchIDEnrollment");
      break;
    case 5:
      result = CFSTR("LACPolicyBiometricUserIdentification");
      break;
    case 6:
      result = CFSTR("LACPolicyTokenAuthentication");
      break;
    case 7:
      result = CFSTR("LACPolicySoftwareUpdate");
      break;
    case 8:
      result = CFSTR("LACPolicyUserAuthenticationWithPasscodeRecovery");
      break;
    case 9:
      result = CFSTR("LACPolicyContinuityUnlock");
      break;
    case 10:
      result = CFSTR("LACPolicyTrustComputer");
      break;
    case 11:
      result = CFSTR("LACPolicyBoot");
      break;
    case 12:
      result = CFSTR("LACPolicyDoublePressBypass");
      break;
    case 13:
      result = CFSTR("LACPolicyPrague");
      break;
    case 14:
      result = CFSTR("LACPolicyPragueWithPIN");
      break;
    case 15:
      result = CFSTR("LACPolicyMarzipan");
      break;
    case 16:
      result = CFSTR("LACPolicyMarzipanWithPIN");
      break;
    case 17:
      result = CFSTR("LACPolicyPraguePrerequisite");
      break;
    case 18:
      return result;
    case 19:
      result = CFSTR("LACPolicyIDV");
      break;
    case 20:
      result = CFSTR("LACPolicyDeviceOwner");
      break;
    case 21:
      result = CFSTR("LACPolicyDeveloperModeControl");
      break;
    case 22:
      result = CFSTR("LACPolicyLocationBasedDeviceOwnerAuthentication");
      break;
    case 23:
      result = CFSTR("LACPolicyLocationBasedDeviceOwnerAuthenticationWithBiometricRatchet");
      break;
    case 24:
      result = CFSTR("LACPolicyDeviceAdminAuthentication");
      break;
    default:
      switch((unint64_t)CFSTR("LACPolicyAccessoryAuthorization"))
      {
        case 1uLL:
          result = CFSTR("LACPolicyDeviceOwnerAuthenticationWithBiometrics");
          break;
        case 2uLL:
          result = CFSTR("LACPolicyDeviceOwnerAuthentication");
          break;
        case 3uLL:
          result = CFSTR("LACPolicyDeviceOwnerAuthenticationWithCompanion");
          break;
        case 4uLL:
          result = CFSTR("LACPolicyDeviceOwnerAuthenticationWithBiometricsOrCompanion");
          break;
        case 5uLL:
          result = CFSTR("LACPolicyDeviceOwnerAuthenticationWithWristDetection");
          break;
        default:
          result = CFSTR("<UNKNOWN>");
          break;
      }
      break;
  }
  return result;
}

void sub_2409FE690(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void soft_CRIsSelfRepairedComponent(uint64_t a1)
{
  void (*CRIsSelfRepairedComponentSymbolLoc)(uint64_t);
  LACDTOSensorRepairStateProviderCRAdapter *v3;
  SEL v4;

  CRIsSelfRepairedComponentSymbolLoc = (void (*)(uint64_t))getCRIsSelfRepairedComponentSymbolLoc();
  if (CRIsSelfRepairedComponentSymbolLoc)
  {
    CRIsSelfRepairedComponentSymbolLoc(a1);
  }
  else
  {
    v3 = (LACDTOSensorRepairStateProviderCRAdapter *)soft_CRIsSelfRepairedComponent_cold_1();
    -[LACDTOSensorRepairStateProviderCRAdapter .cxx_destruct](v3, v4);
  }
}

uint64_t getCRIsSelfRepairedComponentSymbolLoc()
{
  uint64_t v0;
  _QWORD v2[5];
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;

  v3 = 0;
  v4 = &v3;
  v5 = 0x2020000000;
  v0 = getCRIsSelfRepairedComponentSymbolLoc_ptr;
  v6 = getCRIsSelfRepairedComponentSymbolLoc_ptr;
  if (!getCRIsSelfRepairedComponentSymbolLoc_ptr)
  {
    v2[0] = MEMORY[0x24BDAC760];
    v2[1] = 3221225472;
    v2[2] = __getCRIsSelfRepairedComponentSymbolLoc_block_invoke;
    v2[3] = &unk_2510C0B58;
    v2[4] = &v3;
    __getCRIsSelfRepairedComponentSymbolLoc_block_invoke((uint64_t)v2);
    v0 = v4[3];
  }
  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_2409FEBC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void *__getCRIsSelfRepairedComponentSymbolLoc_block_invoke(uint64_t a1)
{
  void *v2;
  void *result;
  void *v4;

  if (CoreRepairCoreLibraryCore_frameworkLibrary)
  {
    v2 = (void *)CoreRepairCoreLibraryCore_frameworkLibrary;
  }
  else
  {
    CoreRepairCoreLibraryCore_frameworkLibrary = _sl_dlopen();
    v2 = (void *)CoreRepairCoreLibraryCore_frameworkLibrary;
    if (!CoreRepairCoreLibraryCore_frameworkLibrary)
    {
      v4 = (void *)abort_report_np();
      free(v4);
    }
  }
  result = dlsym(v2, "CRIsSelfRepairedComponent");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  getCRIsSelfRepairedComponentSymbolLoc_ptr = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

const __CFString *NSStringFromLACEnvironmentMechanismApprovalState(uint64_t a1)
{
  if ((unint64_t)(a1 + 1) > 2)
    return &stru_2510C57B8;
  else
    return off_2510C1B88[a1 + 1];
}

void OUTLINED_FUNCTION_0_3(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 2u);
}

void sub_240A00140(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_240A0070C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location)
{
  id *v17;

  objc_destroyWeak(v17);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void OUTLINED_FUNCTION_0_4(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_debug_impl(a1, a2, OS_LOG_TYPE_DEBUG, a4, &a9, 0xCu);
}

const __CFString *NSStringFromLACDTOLocationPrewarmResult(uint64_t a1)
{
  if (a1)
    return CFSTR("Skipped");
  else
    return CFSTR("Completed");
}

void sub_240A01C8C(_Unwind_Exception *a1)
{
  id *v1;
  id *v2;
  uint64_t v3;

  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v3 - 72));
  _Unwind_Resume(a1);
}

id getAKAccountManagerClass_0()
{
  void *v0;
  id v1;
  _QWORD v3[5];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2050000000;
  v0 = (void *)getAKAccountManagerClass_softClass_0;
  v7 = getAKAccountManagerClass_softClass_0;
  if (!getAKAccountManagerClass_softClass_0)
  {
    v3[0] = MEMORY[0x24BDAC760];
    v3[1] = 3221225472;
    v3[2] = __getAKAccountManagerClass_block_invoke_0;
    v3[3] = &unk_2510C0B58;
    v3[4] = &v4;
    __getAKAccountManagerClass_block_invoke_0((uint64_t)v3);
    v0 = (void *)v5[3];
  }
  v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_240A01D60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_240A02090(_Unwind_Exception *a1)
{
  id *v1;
  id *v2;
  uint64_t v3;

  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v3 - 72));
  _Unwind_Resume(a1);
}

id getCLLocationManagerClass()
{
  void *v0;
  id v1;
  _QWORD v3[5];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2050000000;
  v0 = (void *)getCLLocationManagerClass_softClass;
  v7 = getCLLocationManagerClass_softClass;
  if (!getCLLocationManagerClass_softClass)
  {
    v3[0] = MEMORY[0x24BDAC760];
    v3[1] = 3221225472;
    v3[2] = __getCLLocationManagerClass_block_invoke;
    v3[3] = &unk_2510C0B58;
    v3[4] = &v4;
    __getCLLocationManagerClass_block_invoke((uint64_t)v3);
    v0 = (void *)v5[3];
  }
  v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_240A02164(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getAKAccountManagerClass_block_invoke_0(uint64_t a1)
{
  Class result;

  if (!AuthKitLibraryCore_frameworkLibrary_0)
    AuthKitLibraryCore_frameworkLibrary_0 = _sl_dlopen();
  result = objc_getClass("AKAccountManager");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  getAKAccountManagerClass_softClass_0 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

Class __getCLLocationManagerClass_block_invoke(uint64_t a1)
{
  Class result;

  if (!CoreLocationLibraryCore_frameworkLibrary)
    CoreLocationLibraryCore_frameworkLibrary = _sl_dlopen();
  result = objc_getClass("CLLocationManager");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  getCLLocationManagerClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

__CFString *NSStringFromLACLightweightUIMode(unint64_t a1)
{
  if (a1 < 3)
    return off_2510C1CF0[a1];
  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("unknown mode: %d"), a1);
  return (__CFString *)(id)objc_claimAutoreleasedReturnValue();
}

uint64_t LACLightweightUIModeFromOptions(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  uint64_t v4;
  void *v5;

  v1 = a1;
  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithInteger:", 1087);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "objectForKeyedSubscript:", v2);
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  if (v3)
  {
    v4 = objc_msgSend(v3, "integerValue");
  }
  else
  {
    objc_msgSend(v1, "objectForKeyedSubscript:", &unk_2510F6B50);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v4 = objc_msgSend(v5, "BOOLValue");

  }
  return v4;
}

void sub_240A04904(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_240A049DC(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 24));
  _Unwind_Resume(a1);
}

void sub_240A04BEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_240A0512C(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 128), 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__2(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__2(uint64_t a1)
{

}

void LACDarwinNotificationCenterCallBack(uint64_t a1, void *a2, uint64_t a3)
{
  id v4;

  v4 = a2;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    objc_msgSend(v4, "_notifyObserversAboutNotification:", a3);

}

void sub_240A05348(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id LACLogACM()
{
  if (LACLogACM_onceToken != -1)
    dispatch_once(&LACLogACM_onceToken, &__block_literal_global_9);
  return (id)LACLogACM___logObj;
}

id LACLogAlertUI()
{
  if (LACLogAlertUI_onceToken != -1)
    dispatch_once(&LACLogAlertUI_onceToken, &__block_literal_global_3_0);
  return (id)LACLogAlertUI___logObj;
}

id LACLogBiometry()
{
  if (LACLogBiometry_onceToken != -1)
    dispatch_once(&LACLogBiometry_onceToken, &__block_literal_global_5_0);
  return (id)LACLogBiometry___logObj;
}

id LACLogContext()
{
  if (LACLogContext_onceToken != -1)
    dispatch_once(&LACLogContext_onceToken, &__block_literal_global_7_1);
  return (id)LACLogContext___logObj;
}

id LACLogDefault()
{
  if (LACLogDefault_onceToken != -1)
    dispatch_once(&LACLogDefault_onceToken, &__block_literal_global_9_1);
  return (id)LACLogDefault___logObj;
}

id LACLogEnvironment()
{
  if (LACLogEnvironment_onceToken != -1)
    dispatch_once(&LACLogEnvironment_onceToken, &__block_literal_global_11_0);
  return (id)LACLogEnvironment___logObj;
}

id LACLogFaceIDUI()
{
  if (LACLogFaceIDUI_onceToken != -1)
    dispatch_once(&LACLogFaceIDUI_onceToken, &__block_literal_global_13_0);
  return (id)LACLogFaceIDUI___logObj;
}

id LACLogGestalt()
{
  if (LACLogGestalt_onceToken != -1)
    dispatch_once(&LACLogGestalt_onceToken, &__block_literal_global_15_0);
  return (id)LACLogGestalt___logObj;
}

id LACLogKeybag()
{
  if (LACLogKeybag_onceToken != -1)
    dispatch_once(&LACLogKeybag_onceToken, &__block_literal_global_17);
  return (id)LACLogKeybag___logObj;
}

id LACLogNotifications()
{
  if (LACLogNotifications_onceToken != -1)
    dispatch_once(&LACLogNotifications_onceToken, &__block_literal_global_19);
  return (id)LACLogNotifications___logObj;
}

id LACLogPasscodeService()
{
  if (LACLogPasscodeService_onceToken != -1)
    dispatch_once(&LACLogPasscodeService_onceToken, &__block_literal_global_21_0);
  return (id)LACLogPasscodeService___logObj;
}

id LACLogProcessor()
{
  if (LACLogProcessor_onceToken != -1)
    dispatch_once(&LACLogProcessor_onceToken, &__block_literal_global_23);
  return (id)LACLogProcessor___logObj;
}

id LACLogSharedMode()
{
  if (LACLogSharedMode_onceToken != -1)
    dispatch_once(&LACLogSharedMode_onceToken, &__block_literal_global_25);
  return (id)LACLogSharedMode___logObj;
}

id LACLogStorage()
{
  if (LACLogStorage_onceToken != -1)
    dispatch_once(&LACLogStorage_onceToken, &__block_literal_global_27);
  return (id)LACLogStorage___logObj;
}

id LACLogTask()
{
  if (LACLogTask_onceToken != -1)
    dispatch_once(&LACLogTask_onceToken, &__block_literal_global_29);
  return (id)LACLogTask___logObj;
}

id LACLogTests()
{
  if (LACLogTests_onceToken != -1)
    dispatch_once(&LACLogTests_onceToken, &__block_literal_global_31);
  return (id)LACLogTests___logObj;
}

id LACLogTouchIDUI()
{
  if (LACLogTouchIDUI_onceToken != -1)
    dispatch_once(&LACLogTouchIDUI_onceToken, &__block_literal_global_33);
  return (id)LACLogTouchIDUI___logObj;
}

id LACLogUI()
{
  if (LACLogUI_onceToken != -1)
    dispatch_once(&LACLogUI_onceToken, &__block_literal_global_35);
  return (id)LACLogUI___logObj;
}

id LACLogWatch()
{
  if (LACLogWatch_onceToken != -1)
    dispatch_once(&LACLogWatch_onceToken, &__block_literal_global_37);
  return (id)LACLogWatch___logObj;
}

id LACLogDTO()
{
  if (LACLogDTO_onceToken != -1)
    dispatch_once(&LACLogDTO_onceToken, &__block_literal_global_39);
  return (id)LACLogDTO___logObj;
}

id LACLogDTOClient()
{
  if (LACLogDTOClient_onceToken != -1)
    dispatch_once(&LACLogDTOClient_onceToken, &__block_literal_global_41);
  return (id)LACLogDTOClient___logObj;
}

id LACLogDTOEnvironment()
{
  if (LACLogDTOEnvironment_onceToken != -1)
    dispatch_once(&LACLogDTOEnvironment_onceToken, &__block_literal_global_43);
  return (id)LACLogDTOEnvironment___logObj;
}

id LACLogDTOEvaluation()
{
  if (LACLogDTOEvaluation_onceToken != -1)
    dispatch_once(&LACLogDTOEvaluation_onceToken, &__block_literal_global_45);
  return (id)LACLogDTOEvaluation___logObj;
}

id LACLogDTOEvent()
{
  if (LACLogDTOEvent_onceToken != -1)
    dispatch_once(&LACLogDTOEvent_onceToken, &__block_literal_global_47);
  return (id)LACLogDTOEvent___logObj;
}

id LACLogDTOFeature()
{
  if (LACLogDTOFeature_onceToken != -1)
    dispatch_once(&LACLogDTOFeature_onceToken, &__block_literal_global_49);
  return (id)LACLogDTOFeature___logObj;
}

id LACLogDTOLocation()
{
  if (LACLogDTOLocation_onceToken != -1)
    dispatch_once(&LACLogDTOLocation_onceToken, &__block_literal_global_51);
  return (id)LACLogDTOLocation___logObj;
}

id LACLogDTOLostMode()
{
  if (LACLogDTOLostMode_onceToken != -1)
    dispatch_once(&LACLogDTOLostMode_onceToken, &__block_literal_global_53);
  return (id)LACLogDTOLostMode___logObj;
}

id LACLogDTONotifications()
{
  if (LACLogDTONotifications_onceToken != -1)
    dispatch_once(&LACLogDTONotifications_onceToken, &__block_literal_global_55);
  return (id)LACLogDTONotifications___logObj;
}

id LACLogDTOProcessor()
{
  if (LACLogDTOProcessor_onceToken != -1)
    dispatch_once(&LACLogDTOProcessor_onceToken, &__block_literal_global_57);
  return (id)LACLogDTOProcessor___logObj;
}

id LACLogDTOSensor()
{
  if (LACLogDTOSensor_onceToken != -1)
    dispatch_once(&LACLogDTOSensor_onceToken, &__block_literal_global_59);
  return (id)LACLogDTOSensor___logObj;
}

id LACLogDTOState()
{
  if (LACLogDTOState_onceToken != -1)
    dispatch_once(&LACLogDTOState_onceToken, &__block_literal_global_61);
  return (id)LACLogDTOState___logObj;
}

id LACLogDTOStorage()
{
  if (LACLogDTOStorage_onceToken != -1)
    dispatch_once(&LACLogDTOStorage_onceToken, &__block_literal_global_63);
  return (id)LACLogDTOStorage___logObj;
}

id LACLogDTOTimers()
{
  if (LACLogDTOTimers_onceToken != -1)
    dispatch_once(&LACLogDTOTimers_onceToken, &__block_literal_global_65);
  return (id)LACLogDTOTimers___logObj;
}

id LACLogDTOUI()
{
  if (LACLogDTOUI_onceToken != -1)
    dispatch_once(&LACLogDTOUI_onceToken, &__block_literal_global_67);
  return (id)LACLogDTOUI___logObj;
}

id LACLogABM()
{
  if (LACLogABM_onceToken != -1)
    dispatch_once(&LACLogABM_onceToken, &__block_literal_global_69);
  return (id)LACLogABM___logObj;
}

id LACLogPreboard()
{
  if (LACLogPreboard_onceToken != -1)
    dispatch_once(&LACLogPreboard_onceToken, &__block_literal_global_71);
  return (id)LACLogPreboard___logObj;
}

id NSStringFromLACSharedModePolicyTraits(uint64_t a1)
{
  id v2;
  void *v3;
  const __CFString *v4;
  void *v5;

  v2 = objc_alloc_init(MEMORY[0x24BDBCEB8]);
  v3 = v2;
  if ((a1 & 1) != 0)
  {
    objc_msgSend(v2, "addObject:", CFSTR("faceIDAuthenticationDisabled"));
    if ((a1 & 2) == 0)
      goto LABEL_3;
LABEL_6:
    v4 = CFSTR("opticIDAuthenticationDisabled");
    goto LABEL_7;
  }
  if ((a1 & 2) != 0)
    goto LABEL_6;
LABEL_3:
  if (a1)
    goto LABEL_8;
  v4 = CFSTR("default");
LABEL_7:
  objc_msgSend(v3, "addObject:", v4);
LABEL_8:
  if (!objc_msgSend(v3, "count"))
    objc_msgSend(v3, "addObject:", CFSTR("invalid"));
  objc_msgSend(v3, "componentsJoinedByString:", CFSTR(","));
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  return v5;
}

id getRTRoutineManagerClass()
{
  void *v0;
  id v1;
  _QWORD v3[5];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2050000000;
  v0 = (void *)getRTRoutineManagerClass_softClass;
  v7 = getRTRoutineManagerClass_softClass;
  if (!getRTRoutineManagerClass_softClass)
  {
    v3[0] = MEMORY[0x24BDAC760];
    v3[1] = 3221225472;
    v3[2] = __getRTRoutineManagerClass_block_invoke;
    v3[3] = &unk_2510C0B58;
    v3[4] = &v4;
    __getRTRoutineManagerClass_block_invoke((uint64_t)v3);
    v0 = (void *)v5[3];
  }
  v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_240A06FB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_240A07274(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_240A074D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  id *v15;

  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

Class __getRTRoutineManagerClass_block_invoke(uint64_t a1)
{
  Class result;

  if (!CoreRoutineLibraryCore_frameworkLibrary)
    CoreRoutineLibraryCore_frameworkLibrary = _sl_dlopen();
  result = objc_getClass("RTRoutineManager");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  getRTRoutineManagerClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

void sub_240A07960(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__3(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__3(uint64_t a1)
{

}

void sub_240A07B4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_240A07D08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_240A07EC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_240A08080(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_240A0823C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_240A08D30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  id *v15;

  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_240A09D64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_240A0A020(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_list va;

  va_start(va, a14);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__4(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__4(uint64_t a1)
{

}

void sub_240A0A3C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location)
{
  id *v17;

  objc_destroyWeak(v17);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_240A0A70C(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

uint64_t NSStringFromLACAuthenticationPriority(uint64_t a1)
{
  const __CFString *v1;

  if ((unint64_t)(a1 - 1) > 3)
    v1 = CFSTR("Lowest");
  else
    v1 = off_2510C2150[a1 - 1];
  return objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("%@(%d)"), v1, a1);
}

double LACDTBiometryWatchdogGlobalFallbackTime(uint64_t a1)
{
  void *v1;
  double v2;
  double v3;

  __44__LACFlags_valueForFlagCompanionMockDevices__block_invoke(a1, CFSTR("LA.dto.optionUseShortExpirationTimerMs"), &unk_2510F6B68);
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "doubleValue");
  v3 = v2 / 1000.0;

  return v3;
}

void sub_240A0D6A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__5(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__5(uint64_t a1)
{

}

void sub_240A0DA4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_240A0DBFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

const __CFString *NSStringFromLACDTOSensorRepairFlag(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 2)
    return CFSTR("Unknown");
  else
    return off_2510C2210[a1 - 1];
}

void sub_240A0EFD8(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void sub_240A0F1A4(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

BOOL LACDarwinNotificationsEqual(const __CFString *a1, const __CFString *a2)
{
  return CFStringCompare(a1, a2, 0) == kCFCompareEqualTo;
}

void sub_240A0F884(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void sub_240A0F9EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_240A0FBAC(_Unwind_Exception *a1)
{
  uint64_t v1;

  objc_destroyWeak((id *)(v1 - 40));
  _Unwind_Resume(a1);
}

void sub_240A0FD34(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 24));
  _Unwind_Resume(a1);
}

void sub_240A10760(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_240A118A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34)
{
  _Block_object_dispose(&a34, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__6(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__6(uint64_t a1)
{

}

void sub_240A11BB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,id location)
{
  id *v25;

  objc_destroyWeak(v25);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_240A11EA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_240A12290(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_240A1248C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_240A128EC(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void sub_240A12B9C(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 24));
  _Unwind_Resume(a1);
}

void sub_240A12CBC(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_240A135B0(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 56));
  _Unwind_Resume(a1);
}

void sub_240A13AE8(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_240A13D7C(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_240A13FC8(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_240A144B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  id *v15;

  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_240A145F0(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_240A148F8(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

uint64_t getBYSetupAssistantNeedsToRunSymbolLoc()
{
  uint64_t v0;
  _QWORD v2[5];
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;

  v3 = 0;
  v4 = &v3;
  v5 = 0x2020000000;
  v0 = getBYSetupAssistantNeedsToRunSymbolLoc_ptr;
  v6 = getBYSetupAssistantNeedsToRunSymbolLoc_ptr;
  if (!getBYSetupAssistantNeedsToRunSymbolLoc_ptr)
  {
    v2[0] = MEMORY[0x24BDAC760];
    v2[1] = 3221225472;
    v2[2] = __getBYSetupAssistantNeedsToRunSymbolLoc_block_invoke;
    v2[3] = &unk_2510C0B58;
    v2[4] = &v3;
    __getBYSetupAssistantNeedsToRunSymbolLoc_block_invoke((uint64_t)v2);
    v0 = v4[3];
  }
  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_240A15084(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void *__getBYSetupAssistantNeedsToRunSymbolLoc_block_invoke(uint64_t a1)
{
  void *v2;
  void *result;
  void *v4;

  if (SetupAssistantLibraryCore_frameworkLibrary)
  {
    v2 = (void *)SetupAssistantLibraryCore_frameworkLibrary;
  }
  else
  {
    SetupAssistantLibraryCore_frameworkLibrary = _sl_dlopen();
    v2 = (void *)SetupAssistantLibraryCore_frameworkLibrary;
    if (!SetupAssistantLibraryCore_frameworkLibrary)
    {
      v4 = (void *)abort_report_np();
      free(v4);
    }
  }
  result = dlsym(v2, "BYSetupAssistantNeedsToRun");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  getBYSetupAssistantNeedsToRunSymbolLoc_ptr = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

void sub_240A1631C(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 56));
  _Unwind_Resume(a1);
}

void sub_240A1656C(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 24));
  _Unwind_Resume(a1);
}

void sub_240A173C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_240A175E4(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void sub_240A17A2C(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void sub_240A17C64(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void sub_240A1801C(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void sub_240A18498(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void sub_240A1869C(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void sub_240A18848(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_240A18BCC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, id location)
{
  id *v18;

  objc_destroyWeak(v18);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_240A18D20(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_240A18F14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, id location)
{
  id *v18;

  objc_destroyWeak(v18);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_240A19068(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_240A19288(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  id *v16;
  uint64_t v17;

  objc_destroyWeak(v16);
  _Block_object_dispose(&a16, 8);
  objc_destroyWeak((id *)(v17 - 56));
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__7(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__7(uint64_t a1)
{

}

void sub_240A1944C(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_240A195DC(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_240A19D80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void OUTLINED_FUNCTION_0_6(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_fault_impl(a1, a2, OS_LOG_TYPE_FAULT, a4, &a9, 2u);
}

void sub_240A1BA8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__8(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__8(uint64_t a1)
{

}

void sub_240A1D070(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_240A1D280(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_240A1D694(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

const __CFString *NSStringFromLACUserInterfaceRequestIdentifier(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 4)
    return CFSTR("Unknown");
  else
    return off_2510C2BB8[a1 - 1];
}

uint64_t key path getter for LACOnenessSessionProviderAKS.isSessionActive : LACOnenessSessionProviderAKS@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 112))();
  *a2 = result;
  return result;
}

uint64_t key path setter for LACOnenessSessionProviderAKS.isSessionActive : LACOnenessSessionProviderAKS(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(uint64_t);
  uint64_t v3;

  v2 = *(uint64_t (**)(uint64_t))(**(_QWORD **)a2 + 120);
  v3 = swift_retain();
  return v2(v3);
}

uint64_t LACOnenessSessionProviderAKS.isSessionActive.getter()
{
  uint64_t v0;
  uint64_t v1;

  if (*(_QWORD *)(v0 + 16))
  {
    v1 = *(_QWORD *)(v0 + 16);
  }
  else
  {
    v1 = closure #1 in LACOnenessSessionProviderAKS.isSessionActive.getter(v0);
    *(_QWORD *)(v0 + 16) = v1;
    swift_retain();
    swift_release();
  }
  swift_retain();
  return v1;
}

uint64_t closure #1 in LACOnenessSessionProviderAKS.isSessionActive.getter(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  char *v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v25;
  char *v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  id v32;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for OS_dispatch_queue.SchedulerOptions?);
  MEMORY[0x24BDAC7A8](v2);
  v28 = (char *)&v25 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Publishers.RemoveDuplicates<CurrentValueSubject<Bool?, Never>>);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v25 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.CompactMap<Publishers.RemoveDuplicates<CurrentValueSubject<Bool?, Never>>, Bool>);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.HandleEvents<Publishers.Share<Publishers.CompactMap<Publishers.RemoveDuplicates<CurrentValueSubject<Bool?, Never>>, Bool>>>);
  v30 = *(_QWORD *)(v27 - 8);
  MEMORY[0x24BDAC7A8](v27);
  v25 = (char *)&v25 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Publishers.ReceiveOn<Publishers.HandleEvents<Publishers.Share<Publishers.CompactMap<Publishers.RemoveDuplicates<CurrentValueSubject<Bool?, Never>>, Bool>>>, OS_dispatch_queue>);
  v31 = *(_QWORD *)(v29 - 8);
  MEMORY[0x24BDAC7A8](v29);
  v26 = (char *)&v25 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32 = *(id *)(a1 + 40);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CurrentValueSubject<Bool?, Never>);
  lazy protocol witness table accessor for type CurrentValueSubject<Bool?, Never> and conformance CurrentValueSubject<A, B>((unint64_t *)&lazy protocol witness table cache variable for type CurrentValueSubject<Bool?, Never> and conformance CurrentValueSubject<A, B>, (uint64_t *)&demangling cache variable for type metadata for CurrentValueSubject<Bool?, Never>, MEMORY[0x24BDB9D10]);
  lazy protocol witness table accessor for type Bool? and conformance <A> A?();
  Publisher<>.removeDuplicates()();
  lazy protocol witness table accessor for type CurrentValueSubject<Bool?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type Publishers.RemoveDuplicates<CurrentValueSubject<Bool?, Never>> and conformance Publishers.RemoveDuplicates<A>, (uint64_t *)&demangling cache variable for type metadata for Publishers.RemoveDuplicates<CurrentValueSubject<Bool?, Never>>, MEMORY[0x24BDB9658]);
  Publisher.compactMap<A>(_:)();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  lazy protocol witness table accessor for type CurrentValueSubject<Bool?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type Publishers.CompactMap<Publishers.RemoveDuplicates<CurrentValueSubject<Bool?, Never>>, Bool> and conformance Publishers.CompactMap<A, B>, &demangling cache variable for type metadata for Publishers.CompactMap<Publishers.RemoveDuplicates<CurrentValueSubject<Bool?, Never>>, Bool>, MEMORY[0x24BDB94C8]);
  v14 = (void *)Publisher.share()();
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  v32 = v14;
  swift_allocObject();
  swift_weakInit();
  swift_allocObject();
  swift_weakInit();
  swift_retain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.Share<Publishers.CompactMap<Publishers.RemoveDuplicates<CurrentValueSubject<Bool?, Never>>, Bool>>);
  lazy protocol witness table accessor for type CurrentValueSubject<Bool?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type Publishers.Share<Publishers.CompactMap<Publishers.RemoveDuplicates<CurrentValueSubject<Bool?, Never>>, Bool>> and conformance Publishers.Share<A>, &demangling cache variable for type metadata for Publishers.Share<Publishers.CompactMap<Publishers.RemoveDuplicates<CurrentValueSubject<Bool?, Never>>, Bool>>, MEMORY[0x24BDB97C8]);
  v15 = v25;
  Publisher.handleEvents(receiveSubscription:receiveOutput:receiveCompletion:receiveCancel:receiveRequest:)();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  v32 = *(id *)(a1 + 24);
  v16 = v32;
  v17 = type metadata accessor for OS_dispatch_queue.SchedulerOptions();
  v18 = (uint64_t)v28;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(v28, 1, 1, v17);
  type metadata accessor for OS_dispatch_queue();
  lazy protocol witness table accessor for type CurrentValueSubject<Bool?, Never> and conformance CurrentValueSubject<A, B>((unint64_t *)&lazy protocol witness table cache variable for type Publishers.HandleEvents<Publishers.Share<Publishers.CompactMap<Publishers.RemoveDuplicates<CurrentValueSubject<Bool?, Never>>, Bool>>> and conformance Publishers.HandleEvents<A>, &demangling cache variable for type metadata for Publishers.HandleEvents<Publishers.Share<Publishers.CompactMap<Publishers.RemoveDuplicates<CurrentValueSubject<Bool?, Never>>, Bool>>>, MEMORY[0x24BDB9568]);
  lazy protocol witness table accessor for type LACPolicy and conformance LACPolicy((unint64_t *)&lazy protocol witness table cache variable for type OS_dispatch_queue and conformance OS_dispatch_queue, (uint64_t (*)(uint64_t))type metadata accessor for OS_dispatch_queue, MEMORY[0x24BEE5670]);
  v19 = v16;
  v21 = v26;
  v20 = v27;
  Publisher.receive<A>(on:options:)();
  outlined destroy of OS_dispatch_queue.SchedulerOptions?(v18);

  (*(void (**)(char *, uint64_t))(v30 + 8))(v15, v20);
  lazy protocol witness table accessor for type CurrentValueSubject<Bool?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type Publishers.ReceiveOn<Publishers.HandleEvents<Publishers.Share<Publishers.CompactMap<Publishers.RemoveDuplicates<CurrentValueSubject<Bool?, Never>>, Bool>>>, OS_dispatch_queue> and conformance Publishers.ReceiveOn<A, B>, (uint64_t *)&demangling cache variable for type metadata for Publishers.ReceiveOn<Publishers.HandleEvents<Publishers.Share<Publishers.CompactMap<Publishers.RemoveDuplicates<CurrentValueSubject<Bool?, Never>>, Bool>>>, OS_dispatch_queue>, MEMORY[0x24BDB9A08]);
  v22 = v29;
  v23 = Publisher.eraseToAnyPublisher()();
  (*(void (**)(char *, uint64_t))(v31 + 8))(v21, v22);
  return v23;
}

_BYTE *closure #1 in closure #1 in LACOnenessSessionProviderAKS.isSessionActive.getter@<X0>(_BYTE *result@<X0>, _BYTE *a2@<X8>)
{
  *a2 = *result;
  return result;
}

uint64_t closure #2 in closure #1 in LACOnenessSessionProviderAKS.isSessionActive.getter()
{
  uint64_t result;

  swift_beginAccess();
  result = swift_weakLoadStrong();
  if (result)
  {
    LACOnenessSessionProviderAKS.start()();
    return swift_release();
  }
  return result;
}

uint64_t LACOnenessSessionProviderAKS.start()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  id v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  id v10;
  _QWORD aBlock[6];

  v1 = type metadata accessor for LACLogger();
  MEMORY[0x24BDAC7A8](v1);
  v3 = (char *)aBlock - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(_QWORD *)(v0 + 32))
  {
    v4 = LACLogABM();
    Logger.init(_:)();
    LOBYTE(aBlock[0]) = 2;
    v5 = 0xD00000000000002BLL;
    v6 = 0x8000000240A82F50;
  }
  else
  {
    LACOnenessSessionProviderAKS.fetchCurrentState()();
    v7 = swift_allocObject();
    swift_weakInit();
    aBlock[4] = partial apply for closure #1 in LACOnenessSessionProviderAKS.start();
    aBlock[5] = v7;
    aBlock[0] = MEMORY[0x24BDAC760];
    aBlock[1] = 1107296256;
    aBlock[2] = thunk for @escaping @callee_guaranteed (@unowned AKSEventType, @guaranteed CFDictionaryRef?) -> ();
    aBlock[3] = &block_descriptor;
    v8 = _Block_copy(aBlock);
    swift_release();
    v9 = AKSEventsRegister();
    _Block_release(v8);
    *(_QWORD *)(v0 + 32) = v9;
    v10 = LACLogABM();
    Logger.init(_:)();
    LOBYTE(aBlock[0]) = 2;
    v6 = 0x8000000240A82F20;
    v5 = 0xD000000000000025;
  }
  LACLogger.log(level:_:)((LocalAuthenticationCore::LACLogger::Level)aBlock, *(Swift::String *)&v5);
  return outlined destroy of LACLogger((uint64_t)v3);
}

uint64_t closure #3 in closure #1 in LACOnenessSessionProviderAKS.isSessionActive.getter()
{
  uint64_t result;

  swift_beginAccess();
  result = swift_weakLoadStrong();
  if (result)
  {
    LACOnenessSessionProviderAKS.stop()();
    return swift_release();
  }
  return result;
}

uint64_t LACOnenessSessionProviderAKS.stop()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  id v4;
  unint64_t v5;
  char *v6;
  unint64_t v7;
  id v8;
  uint64_t v10;
  char v11;
  char v12;

  v1 = type metadata accessor for LACLogger();
  MEMORY[0x24BDAC7A8](v1);
  v3 = (char *)&v10 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(_QWORD *)(v0 + 32))
  {
    AKSEventsUnregister();
    v4 = LACLogABM();
    Logger.init(_:)();
    v11 = 2;
    v5 = 0x8000000240A82ED0;
    v6 = &v11;
    v7 = 0xD000000000000027;
  }
  else
  {
    v8 = LACLogABM();
    Logger.init(_:)();
    v12 = 2;
    v7 = 0xD00000000000002BLL;
    v5 = 0x8000000240A82EA0;
    v6 = &v12;
  }
  LACLogger.log(level:_:)((LocalAuthenticationCore::LACLogger::Level)v6, *(Swift::String *)&v7);
  return outlined destroy of LACLogger((uint64_t)v3);
}

uint64_t LACOnenessSessionProviderAKS.isSessionActive.setter(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = a1;
  return swift_release();
}

uint64_t (*LACOnenessSessionProviderAKS.isSessionActive.modify(uint64_t *a1))(_QWORD *a1)
{
  uint64_t v1;

  a1[1] = v1;
  *a1 = LACOnenessSessionProviderAKS.isSessionActive.getter();
  return LACOnenessSessionProviderAKS.isSessionActive.modify;
}

uint64_t LACOnenessSessionProviderAKS.isSessionActive.modify(_QWORD *a1)
{
  *(_QWORD *)(a1[1] + 16) = *a1;
  return swift_release();
}

_QWORD *LACOnenessSessionProviderAKS.__allocating_init(replyQueue:)(uint64_t a1)
{
  _QWORD *v2;

  v2 = (_QWORD *)swift_allocObject();
  v2[2] = 0;
  v2[4] = 0;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CurrentValueSubject<Bool?, Never>);
  swift_allocObject();
  v2[5] = CurrentValueSubject.init(_:)();
  v2[3] = a1;
  return v2;
}

_QWORD *LACOnenessSessionProviderAKS.init(replyQueue:)(uint64_t a1)
{
  _QWORD *v1;

  v1[2] = 0;
  v1[4] = 0;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CurrentValueSubject<Bool?, Never>);
  swift_allocObject();
  v1[5] = CurrentValueSubject.init(_:)();
  v1[3] = a1;
  return v1;
}

uint64_t __swift_instantiateConcreteTypeFromMangledName(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result < 0)
  {
    result = MEMORY[0x2426875FC]((char *)a1 + (int)result, -(result >> 32), 0, 0);
    *a1 = result;
  }
  return result;
}

uint64_t LACOnenessSessionProviderAKS.deinit()
{
  uint64_t v0;

  swift_release();

  swift_release();
  return v0;
}

uint64_t LACOnenessSessionProviderAKS.__deallocating_deinit()
{
  uint64_t v0;

  swift_release();

  swift_release();
  return swift_deallocClassInstance();
}

uint64_t protocol witness for LACOnenessSessionProviding.isSessionActive.getter in conformance LACOnenessSessionProviderAKS()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 112))();
}

uint64_t LACOnenessSessionProviderAKS.fetchCurrentState()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  char *v5;
  id v6;
  Swift::String v7;
  unsigned int v8;
  id v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  Swift::String v13;
  Swift::String v15;

  v0 = type metadata accessor for LACLogger();
  v1 = MEMORY[0x24BDAC7A8](v0);
  v3 = (char *)&v15 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v1);
  v5 = (char *)&v15 - v4;
  v6 = LACLogABM();
  Logger.init(_:)();
  LOBYTE(v15._countAndFlagsBits) = 2;
  v7._object = (void *)0x8000000240A82F80;
  v7._countAndFlagsBits = 0xD00000000000001CLL;
  LACLogger.log(level:_:)((LocalAuthenticationCore::LACLogger::Level)&v15, v7);
  outlined destroy of LACLogger((uint64_t)v5);
  v8 = objc_msgSend((id)objc_opt_self(), sel_isOnenessAssertionActive);
  v9 = LACLogABM();
  Logger.init(_:)();
  v15._countAndFlagsBits = 0;
  v15._object = (void *)0xE000000000000000;
  _StringGuts.grow(_:)(33);
  swift_bridgeObjectRelease();
  v15._countAndFlagsBits = 0xD00000000000001FLL;
  v15._object = (void *)0x8000000240A82FA0;
  if (v8)
    v10 = 1702195828;
  else
    v10 = 0x65736C6166;
  if (v8)
    v11 = 0xE400000000000000;
  else
    v11 = 0xE500000000000000;
  v12 = v11;
  String.append(_:)(*(Swift::String *)&v10);
  swift_bridgeObjectRelease();
  v13 = v15;
  LOBYTE(v15._countAndFlagsBits) = 2;
  LACLogger.log(level:_:)((LocalAuthenticationCore::LACLogger::Level)&v15, v13);
  swift_bridgeObjectRelease();
  outlined destroy of LACLogger((uint64_t)v3);
  LOBYTE(v15._countAndFlagsBits) = v8;
  swift_retain();
  CurrentValueSubject.send(_:)();
  return swift_release();
}

uint64_t closure #1 in LACOnenessSessionProviderAKS.start()()
{
  uint64_t result;

  swift_beginAccess();
  result = swift_weakLoadStrong();
  if (result)
  {
    LACOnenessSessionProviderAKS.fetchCurrentState()();
    return swift_release();
  }
  return result;
}

void thunk for @escaping @callee_guaranteed (@unowned AKSEventType, @guaranteed CFDictionaryRef?) -> ()(uint64_t a1, uint64_t a2, void *a3)
{
  void (*v5)(uint64_t, void *);
  id v6;

  v5 = *(void (**)(uint64_t, void *))(a1 + 32);
  swift_retain();
  v6 = a3;
  v5(a2, a3);
  swift_release();

}

uint64_t default argument 3 of LACOnenessControllerPendingRequest.init(request:configuration:completion:state:)()
{
  return 0;
}

uint64_t type metadata accessor for LACOnenessSessionProviderAKS()
{
  return objc_opt_self();
}

uint64_t method lookup function for LACOnenessSessionProviderAKS()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of LACOnenessSessionProviderAKS.isSessionActive.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 112))();
}

uint64_t dispatch thunk of LACOnenessSessionProviderAKS.isSessionActive.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 120))();
}

uint64_t dispatch thunk of LACOnenessSessionProviderAKS.isSessionActive.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 128))();
}

uint64_t dispatch thunk of LACOnenessSessionProviderAKS.__allocating_init(replyQueue:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 184))();
}

void type metadata accessor for LACStorageKey(uint64_t a1)
{
  type metadata accessor for LACStorageKey(a1, &lazy cache variable for type metadata for LACStorageKey);
}

void type metadata accessor for LACStorageDomain(uint64_t a1)
{
  type metadata accessor for LACStorageKey(a1, &lazy cache variable for type metadata for LACStorageDomain);
}

void type metadata accessor for LACPreboardUseCase(uint64_t a1)
{
  type metadata accessor for LACStorageKey(a1, &lazy cache variable for type metadata for LACPreboardUseCase);
}

void type metadata accessor for LACAuthUIPresentationStyle(uint64_t a1)
{
  type metadata accessor for LACStorageKey(a1, &lazy cache variable for type metadata for LACAuthUIPresentationStyle);
}

void type metadata accessor for LACRatchetUIState(uint64_t a1)
{
  type metadata accessor for LACStorageKey(a1, &lazy cache variable for type metadata for LACRatchetUIState);
}

void type metadata accessor for LACPolicy(uint64_t a1)
{
  type metadata accessor for LACStorageKey(a1, &lazy cache variable for type metadata for LACPolicy);
}

NSNumber protocol witness for _ObjectiveCBridgeable._bridgeToObjectiveC() in conformance LACStorageKey()
{
  return Int._bridgeToObjectiveC()();
}

uint64_t protocol witness for static _ObjectiveCBridgeable._unconditionallyBridgeFromObjectiveC(_:) in conformance LACStorageKey@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = static Int._unconditionallyBridgeFromObjectiveC(_:)();
  *a1 = result;
  return result;
}

uint64_t protocol witness for static _ObjectiveCBridgeable._forceBridgeFromObjectiveC(_:result:) in conformance LACPreboardUseCase(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  char v5;
  uint64_t v6;
  char v7;

  v6 = 0;
  v7 = 1;
  result = MEMORY[0x2426865C4](a1, &v6);
  v4 = v6;
  v5 = v7;
  if (v7)
    v4 = 0;
  *(_QWORD *)a2 = v4;
  *(_BYTE *)(a2 + 8) = v5;
  return result;
}

uint64_t protocol witness for static _ObjectiveCBridgeable._conditionallyBridgeFromObjectiveC(_:result:) in conformance LACPreboardUseCase(uint64_t a1, uint64_t a2)
{
  char v3;

  v3 = static Int._conditionallyBridgeFromObjectiveC(_:result:)();
  *(_QWORD *)a2 = 0;
  *(_BYTE *)(a2 + 8) = 1;
  return v3 & 1;
}

uint64_t protocol witness for _HasCustomAnyHashableRepresentation._toCustomAnyHashable() in conformance LACPreboardUseCase()
{
  lazy protocol witness table accessor for type LACPolicy and conformance LACPolicy(&lazy protocol witness table cache variable for type LACPreboardUseCase and conformance LACPreboardUseCase, (uint64_t (*)(uint64_t))type metadata accessor for LACPreboardUseCase, (uint64_t)&protocol conformance descriptor for LACPreboardUseCase);
  lazy protocol witness table accessor for type LACPolicy and conformance LACPolicy(&lazy protocol witness table cache variable for type LACPreboardUseCase and conformance LACPreboardUseCase, (uint64_t (*)(uint64_t))type metadata accessor for LACPreboardUseCase, (uint64_t)&protocol conformance descriptor for LACPreboardUseCase);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()();
}

_QWORD *protocol witness for RawRepresentable.init(rawValue:) in conformance LACStorageKey@<X0>(_QWORD *result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *result;
  *(_BYTE *)(a2 + 8) = 0;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance LACStorageKey(_QWORD *a1@<X8>)
{
  _QWORD *v1;

  *a1 = *v1;
}

uint64_t protocol witness for _HasCustomAnyHashableRepresentation._toCustomAnyHashable() in conformance LACStorageKey()
{
  lazy protocol witness table accessor for type LACPolicy and conformance LACPolicy(&lazy protocol witness table cache variable for type LACStorageKey and conformance LACStorageKey, (uint64_t (*)(uint64_t))type metadata accessor for LACStorageKey, (uint64_t)&protocol conformance descriptor for LACStorageKey);
  lazy protocol witness table accessor for type LACPolicy and conformance LACPolicy(&lazy protocol witness table cache variable for type LACStorageKey and conformance LACStorageKey, (uint64_t (*)(uint64_t))type metadata accessor for LACStorageKey, (uint64_t)&protocol conformance descriptor for LACStorageKey);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()();
}

uint64_t protocol witness for _HasCustomAnyHashableRepresentation._toCustomAnyHashable() in conformance LACPolicy()
{
  lazy protocol witness table accessor for type LACPolicy and conformance LACPolicy(&lazy protocol witness table cache variable for type LACPolicy and conformance LACPolicy, (uint64_t (*)(uint64_t))type metadata accessor for LACPolicy, (uint64_t)&protocol conformance descriptor for LACPolicy);
  lazy protocol witness table accessor for type LACPolicy and conformance LACPolicy((unint64_t *)&lazy protocol witness table cache variable for type LACPolicy and conformance LACPolicy, (uint64_t (*)(uint64_t))type metadata accessor for LACPolicy, (uint64_t)&protocol conformance descriptor for LACPolicy);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()();
}

uint64_t base witness table accessor for RawRepresentable in LACPolicy()
{
  return lazy protocol witness table accessor for type LACPolicy and conformance LACPolicy(&lazy protocol witness table cache variable for type LACPolicy and conformance LACPolicy, (uint64_t (*)(uint64_t))type metadata accessor for LACPolicy, (uint64_t)&protocol conformance descriptor for LACPolicy);
}

uint64_t base witness table accessor for _HasCustomAnyHashableRepresentation in LACPolicy()
{
  return lazy protocol witness table accessor for type LACPolicy and conformance LACPolicy(&lazy protocol witness table cache variable for type LACPolicy and conformance LACPolicy, (uint64_t (*)(uint64_t))type metadata accessor for LACPolicy, (uint64_t)&protocol conformance descriptor for LACPolicy);
}

uint64_t lazy protocol witness table accessor for type LACPolicy and conformance LACPolicy(unint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = a2(255);
    result = MEMORY[0x242687614](a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t protocol witness for _HasCustomAnyHashableRepresentation._toCustomAnyHashable() in conformance LACPolicyOption()
{
  lazy protocol witness table accessor for type LACPolicy and conformance LACPolicy(&lazy protocol witness table cache variable for type LACPolicyOption and conformance LACPolicyOption, (uint64_t (*)(uint64_t))type metadata accessor for LACPolicyOption, (uint64_t)&protocol conformance descriptor for LACPolicyOption);
  lazy protocol witness table accessor for type LACPolicy and conformance LACPolicy(lazy protocol witness table cache variable for type LACPolicyOption and conformance LACPolicyOption, (uint64_t (*)(uint64_t))type metadata accessor for LACPolicyOption, (uint64_t)&protocol conformance descriptor for LACPolicyOption);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()();
}

uint64_t protocol witness for _HasCustomAnyHashableRepresentation._toCustomAnyHashable() in conformance LACStorageDomain()
{
  lazy protocol witness table accessor for type LACPolicy and conformance LACPolicy(&lazy protocol witness table cache variable for type LACStorageDomain and conformance LACStorageDomain, (uint64_t (*)(uint64_t))type metadata accessor for LACStorageDomain, (uint64_t)&protocol conformance descriptor for LACStorageDomain);
  lazy protocol witness table accessor for type LACPolicy and conformance LACPolicy(&lazy protocol witness table cache variable for type LACStorageDomain and conformance LACStorageDomain, (uint64_t (*)(uint64_t))type metadata accessor for LACStorageDomain, (uint64_t)&protocol conformance descriptor for LACStorageDomain);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()();
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance LACStorageKey()
{
  return Int.hashValue.getter();
}

void protocol witness for Hashable.hash(into:) in conformance LACStorageKey()
{
  Swift::UInt *v0;

  Hasher._combine(_:)(*v0);
}

uint64_t protocol witness for Hashable._rawHashValue(seed:) in conformance LACStorageKey()
{
  return static Hasher._hash(seed:_:)();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance LACStorageKey(_QWORD *a1, _QWORD *a2)
{
  return *a1 == *a2;
}

uint64_t base witness table accessor for Equatable in LACPolicy()
{
  return lazy protocol witness table accessor for type LACPolicy and conformance LACPolicy(&lazy protocol witness table cache variable for type LACPolicy and conformance LACPolicy, (uint64_t (*)(uint64_t))type metadata accessor for LACPolicy, (uint64_t)&protocol conformance descriptor for LACPolicy);
}

uint64_t base witness table accessor for RawRepresentable in LACPreboardUseCase()
{
  return lazy protocol witness table accessor for type LACPolicy and conformance LACPolicy(&lazy protocol witness table cache variable for type LACPreboardUseCase and conformance LACPreboardUseCase, (uint64_t (*)(uint64_t))type metadata accessor for LACPreboardUseCase, (uint64_t)&protocol conformance descriptor for LACPreboardUseCase);
}

uint64_t base witness table accessor for _HasCustomAnyHashableRepresentation in LACPreboardUseCase()
{
  return lazy protocol witness table accessor for type LACPolicy and conformance LACPolicy(&lazy protocol witness table cache variable for type LACPreboardUseCase and conformance LACPreboardUseCase, (uint64_t (*)(uint64_t))type metadata accessor for LACPreboardUseCase, (uint64_t)&protocol conformance descriptor for LACPreboardUseCase);
}

uint64_t base witness table accessor for Equatable in LACPreboardUseCase()
{
  return lazy protocol witness table accessor for type LACPolicy and conformance LACPolicy(&lazy protocol witness table cache variable for type LACPreboardUseCase and conformance LACPreboardUseCase, (uint64_t (*)(uint64_t))type metadata accessor for LACPreboardUseCase, (uint64_t)&protocol conformance descriptor for LACPreboardUseCase);
}

uint64_t base witness table accessor for RawRepresentable in LACStorageDomain()
{
  return lazy protocol witness table accessor for type LACPolicy and conformance LACPolicy(&lazy protocol witness table cache variable for type LACStorageDomain and conformance LACStorageDomain, (uint64_t (*)(uint64_t))type metadata accessor for LACStorageDomain, (uint64_t)&protocol conformance descriptor for LACStorageDomain);
}

uint64_t base witness table accessor for _HasCustomAnyHashableRepresentation in LACStorageDomain()
{
  return lazy protocol witness table accessor for type LACPolicy and conformance LACPolicy(&lazy protocol witness table cache variable for type LACStorageDomain and conformance LACStorageDomain, (uint64_t (*)(uint64_t))type metadata accessor for LACStorageDomain, (uint64_t)&protocol conformance descriptor for LACStorageDomain);
}

uint64_t base witness table accessor for Equatable in LACStorageDomain()
{
  return lazy protocol witness table accessor for type LACPolicy and conformance LACPolicy(&lazy protocol witness table cache variable for type LACStorageDomain and conformance LACStorageDomain, (uint64_t (*)(uint64_t))type metadata accessor for LACStorageDomain, (uint64_t)&protocol conformance descriptor for LACStorageDomain);
}

uint64_t base witness table accessor for RawRepresentable in LACStorageKey()
{
  return lazy protocol witness table accessor for type LACPolicy and conformance LACPolicy(&lazy protocol witness table cache variable for type LACStorageKey and conformance LACStorageKey, (uint64_t (*)(uint64_t))type metadata accessor for LACStorageKey, (uint64_t)&protocol conformance descriptor for LACStorageKey);
}

uint64_t base witness table accessor for _HasCustomAnyHashableRepresentation in LACStorageKey()
{
  return lazy protocol witness table accessor for type LACPolicy and conformance LACPolicy(&lazy protocol witness table cache variable for type LACStorageKey and conformance LACStorageKey, (uint64_t (*)(uint64_t))type metadata accessor for LACStorageKey, (uint64_t)&protocol conformance descriptor for LACStorageKey);
}

uint64_t base witness table accessor for Equatable in LACStorageKey()
{
  return lazy protocol witness table accessor for type LACPolicy and conformance LACPolicy(&lazy protocol witness table cache variable for type LACStorageKey and conformance LACStorageKey, (uint64_t (*)(uint64_t))type metadata accessor for LACStorageKey, (uint64_t)&protocol conformance descriptor for LACStorageKey);
}

uint64_t __swift_instantiateConcreteTypeFromMangledNameAbstract(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result < 0)
  {
    result = MEMORY[0x242687608](255, (char *)a1 + (int)result, -(result >> 32), 0, 0);
    *a1 = result;
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Bool? and conformance <A> A?()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = lazy protocol witness table cache variable for type Bool? and conformance <A> A?;
  if (!lazy protocol witness table cache variable for type Bool? and conformance <A> A?)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Bool?);
    v2 = MEMORY[0x24BEE1340];
    result = MEMORY[0x242687614](MEMORY[0x24BEE4AB8], v1, &v2);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Bool? and conformance <A> A?);
  }
  return result;
}

uint64_t sub_240A203B0()
{
  swift_weakDestroy();
  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in closure #1 in LACOnenessSessionProviderAKS.isSessionActive.getter()
{
  return closure #2 in closure #1 in LACOnenessSessionProviderAKS.isSessionActive.getter();
}

uint64_t partial apply for closure #3 in closure #1 in LACOnenessSessionProviderAKS.isSessionActive.getter()
{
  return closure #3 in closure #1 in LACOnenessSessionProviderAKS.isSessionActive.getter();
}

unint64_t type metadata accessor for OS_dispatch_queue()
{
  unint64_t result;

  result = lazy cache variable for type metadata for OS_dispatch_queue;
  if (!lazy cache variable for type metadata for OS_dispatch_queue)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
  }
  return result;
}

uint64_t outlined destroy of OS_dispatch_queue.SchedulerOptions?(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for OS_dispatch_queue.SchedulerOptions?);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t lazy protocol witness table accessor for type CurrentValueSubject<Bool?, Never> and conformance CurrentValueSubject<A, B>(unint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    result = MEMORY[0x242687614](a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t outlined destroy of LACLogger(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for LACLogger();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t partial apply for closure #1 in LACOnenessSessionProviderAKS.start()()
{
  return closure #1 in LACOnenessSessionProviderAKS.start()();
}

uint64_t block_copy_helper(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper()
{
  return swift_release();
}

void type metadata accessor for LACPolicyOption(uint64_t a1)
{
  type metadata accessor for LACStorageKey(a1, (unint64_t *)&lazy cache variable for type metadata for LACPolicyOption);
}

void type metadata accessor for LACStorageKey(uint64_t a1, unint64_t *a2)
{
  unint64_t ForeignTypeMetadata;
  uint64_t v4;

  if (!*a2)
  {
    ForeignTypeMetadata = swift_getForeignTypeMetadata();
    if (!v4)
      atomic_store(ForeignTypeMetadata, a2);
  }
}

uint64_t base witness table accessor for RawRepresentable in LACPolicyOption()
{
  return lazy protocol witness table accessor for type LACPolicy and conformance LACPolicy((unint64_t *)&lazy protocol witness table cache variable for type LACPolicyOption and conformance LACPolicyOption, (uint64_t (*)(uint64_t))type metadata accessor for LACPolicyOption, (uint64_t)&protocol conformance descriptor for LACPolicyOption);
}

uint64_t base witness table accessor for _HasCustomAnyHashableRepresentation in LACPolicyOption()
{
  return lazy protocol witness table accessor for type LACPolicy and conformance LACPolicy((unint64_t *)&lazy protocol witness table cache variable for type LACPolicyOption and conformance LACPolicyOption, (uint64_t (*)(uint64_t))type metadata accessor for LACPolicyOption, (uint64_t)&protocol conformance descriptor for LACPolicyOption);
}

uint64_t base witness table accessor for Equatable in LACPolicyOption()
{
  return lazy protocol witness table accessor for type LACPolicy and conformance LACPolicy((unint64_t *)&lazy protocol witness table cache variable for type LACPolicyOption and conformance LACPolicyOption, (uint64_t (*)(uint64_t))type metadata accessor for LACPolicyOption, (uint64_t)&protocol conformance descriptor for LACPolicyOption);
}

void LACOnenessSessionProviderDummy.isSessionActiveSubject.setter()
{
  swift_deletedMethodError();
  __break(1u);
}

uint64_t LACPreboardUseCaseProviderAMFI.completeCurrentUseCase(success:)(char a1)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 16) = a1;
  return swift_task_switch();
}

uint64_t LACPreboardUseCaseProviderAMFI.completeCurrentUseCase(success:)()
{
  uint64_t v0;

  objc_msgSend((id)objc_opt_self(), sel_completeCurrentBootModeWithSuccess_, *(unsigned __int8 *)(v0 + 16));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t LACPreboardUseCaseProviderAMFI.deinit()
{
  uint64_t v0;

  return v0;
}

uint64_t LACPreboardUseCaseProviderAMFI.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t LACPreboardUseCaseProviderAMFI.__allocating_init()()
{
  return swift_allocObject();
}

uint64_t LACPreboardUseCaseProviderAMFI.init()()
{
  uint64_t v0;

  return v0;
}

uint64_t protocol witness for LACPreboardUseCaseProviding.completeCurrentUseCase(success:) in conformance LACPreboardUseCaseProviderAMFI(char a1)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 16) = a1;
  return swift_task_switch();
}

uint64_t specialized LACPreboardUseCaseProviderAMFI.preboardUseCase.getter()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  id v3;
  id v4;
  Swift::String v5;
  Swift::String v6;
  _QWORD v8[2];
  Swift::String v9;

  v0 = type metadata accessor for LACLogger();
  MEMORY[0x24BDAC7A8](v0);
  v2 = (char *)v8 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = objc_msgSend((id)objc_opt_self(), sel_txmSecurityBootMode);
  v4 = LACLogPreboard();
  Logger.init(_:)();
  v9._countAndFlagsBits = 0;
  v9._object = (void *)0xE000000000000000;
  _StringGuts.grow(_:)(16);
  swift_bridgeObjectRelease();
  strcpy((char *)&v9, "TXM boot mode ");
  HIBYTE(v9._object) = -18;
  v8[1] = v3;
  v5._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v5);
  swift_bridgeObjectRelease();
  v6 = v9;
  LOBYTE(v9._countAndFlagsBits) = 2;
  LACLogger.log(level:_:)((LocalAuthenticationCore::LACLogger::Level)&v9, v6);
  swift_bridgeObjectRelease();
  outlined destroy of LACLogger((uint64_t)v2);
  if (v3)
    return -1;
  else
    return (uint64_t)objc_msgSend((id)objc_opt_self(), sel_useCase);
}

uint64_t type metadata accessor for LACPreboardUseCaseProviderAMFI()
{
  return objc_opt_self();
}

uint64_t method lookup function for LACPreboardUseCaseProviderAMFI()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of LACPreboardUseCaseProviderAMFI.__allocating_init()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 80))();
}

id LACUserDefaultsPersistentStore.__allocating_init(suiteName:)(uint64_t a1, uint64_t a2)
{
  swift_allocObject();
  return LACUserDefaultsPersistentStore.init(suiteName:)(a1, a2);
}

id LACUserDefaultsPersistentStore.init(suiteName:)(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  id v5;
  void *v6;
  id v7;
  void *v8;
  objc_super v10;

  swift_defaultActor_initialize();
  if (!a2)
  {
    v8 = (void *)objc_opt_self();
    swift_retain();
    goto LABEL_5;
  }
  v5 = objc_allocWithZone(MEMORY[0x24BDBCF50]);
  swift_retain();
  v6 = (void *)MEMORY[0x2426863FC](a1, a2);
  swift_bridgeObjectRelease();
  v7 = objc_msgSend(v5, sel_initWithSuiteName_, v6);

  if (!v7)
  {
    v8 = (void *)objc_opt_self();
LABEL_5:
    v7 = objc_msgSend(v8, sel_standardUserDefaults);
  }
  v2[14] = v7;
  swift_release();
  v10.receiver = v2;
  v10.super_class = (Class)type metadata accessor for LACUserDefaultsPersistentStore();
  return objc_msgSendSuper2(&v10, sel_init);
}

uint64_t type metadata accessor for LACUserDefaultsPersistentStore()
{
  return objc_opt_self();
}

uint64_t LACUserDefaultsPersistentStore.data(forKey:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  return swift_task_switch();
}

uint64_t LACUserDefaultsPersistentStore.data(forKey:)()
{
  uint64_t v0;
  void *v1;
  void *v2;
  id v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;

  v1 = *(void **)(*(_QWORD *)(v0 + 32) + 112);
  v2 = (void *)MEMORY[0x2426863FC](*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
  v3 = objc_msgSend(v1, sel_dataForKey_, v2);

  if (v3)
  {
    v4 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    v6 = v5;

  }
  else
  {
    v4 = 0;
    v6 = 0xF000000000000000;
  }
  return (*(uint64_t (**)(uint64_t, unint64_t))(v0 + 8))(v4, v6);
}

uint64_t @objc closure #1 in LACUserDefaultsPersistentStore.data(forKey:)(int a1, void *aBlock, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;

  v3[2] = a3;
  v3[3] = _Block_copy(aBlock);
  v3[4] = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v3[5] = v4;
  swift_retain();
  return swift_task_switch();
}

uint64_t @objc closure #1 in LACUserDefaultsPersistentStore.data(forKey:)()
{
  uint64_t v0;
  void *v1;
  void *v2;
  id v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  NSData v7;
  void (**v8)(_QWORD, _QWORD, _QWORD);

  v1 = *(void **)(*(_QWORD *)(v0 + 16) + 112);
  v2 = (void *)MEMORY[0x2426863FC](*(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40));
  v3 = objc_msgSend(v1, sel_dataForKey_, v2);

  if (v3)
  {
    v4 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    v6 = v5;

    swift_release();
    swift_bridgeObjectRelease();
    v7.super.isa = Data._bridgeToObjectiveC()().super.isa;
    outlined consume of Data._Representation(v4, v6);
  }
  else
  {
    swift_release();
    swift_bridgeObjectRelease();
    v7.super.isa = 0;
  }
  v8 = *(void (***)(_QWORD, _QWORD, _QWORD))(v0 + 24);
  ((void (**)(_QWORD, Class, _QWORD))v8)[2](v8, v7.super.isa, 0);

  _Block_release(v8);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t LACUserDefaultsPersistentStore.setData(_:forKey:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v5;

  v5[5] = a4;
  v5[6] = v4;
  v5[3] = a2;
  v5[4] = a3;
  v5[2] = a1;
  return swift_task_switch();
}

uint64_t LACUserDefaultsPersistentStore.setData(_:forKey:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  Class isa;
  void *v5;

  v1 = *(_QWORD *)(v0 + 40);
  v2 = *(_QWORD *)(v0 + 32);
  v3 = *(void **)(*(_QWORD *)(v0 + 48) + 112);
  isa = Data._bridgeToObjectiveC()().super.isa;
  v5 = (void *)MEMORY[0x2426863FC](v2, v1);
  objc_msgSend(v3, sel_setObject_forKey_, isa, v5);

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t @objc closure #1 in LACUserDefaultsPersistentStore.setData(_:forKey:)(void *a1, void *a2, void *aBlock, uint64_t a4)
{
  _QWORD *v4;
  id v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v4[2] = a4;
  v4[3] = _Block_copy(aBlock);
  v7 = a1;
  v8 = a2;
  swift_retain();
  v9 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  v11 = v10;

  v4[4] = v9;
  v4[5] = v11;
  v12 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v14 = v13;

  v4[6] = v12;
  v4[7] = v14;
  return swift_task_switch();
}

uint64_t @objc closure #1 in LACUserDefaultsPersistentStore.setData(_:forKey:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void (**v5)(_QWORD, _QWORD);
  void *v6;
  Class isa;
  void *v8;

  v1 = *(_QWORD *)(v0 + 48);
  v2 = *(_QWORD *)(v0 + 56);
  v4 = *(_QWORD *)(v0 + 32);
  v3 = *(_QWORD *)(v0 + 40);
  v5 = *(void (***)(_QWORD, _QWORD))(v0 + 24);
  v6 = *(void **)(*(_QWORD *)(v0 + 16) + 112);
  isa = Data._bridgeToObjectiveC()().super.isa;
  v8 = (void *)MEMORY[0x2426863FC](v1, v2);
  objc_msgSend(v6, sel_setObject_forKey_, isa, v8);

  swift_release();
  swift_bridgeObjectRelease();
  outlined consume of Data._Representation(v4, v3);
  v5[2](v5, 0);
  _Block_release(v5);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t LACUserDefaultsPersistentStore.removeObject(forKey:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  return swift_task_switch();
}

uint64_t LACUserDefaultsPersistentStore.removeObject(forKey:)()
{
  uint64_t v0;
  void *v1;
  void *v2;

  v1 = *(void **)(*(_QWORD *)(v0 + 32) + 112);
  v2 = (void *)MEMORY[0x2426863FC](*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
  objc_msgSend(v1, sel_removeObjectForKey_, v2);

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t @objc closure #1 in LACUserDefaultsPersistentStore.removeObject(forKey:)(int a1, void *aBlock, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;

  v3[2] = a3;
  v3[3] = _Block_copy(aBlock);
  v3[4] = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v3[5] = v4;
  swift_retain();
  return swift_task_switch();
}

uint64_t @objc closure #1 in LACUserDefaultsPersistentStore.removeObject(forKey:)()
{
  uint64_t v0;
  void (**v1)(_QWORD, _QWORD);
  void *v2;
  void *v3;

  v1 = *(void (***)(_QWORD, _QWORD))(v0 + 24);
  v2 = *(void **)(*(_QWORD *)(v0 + 16) + 112);
  v3 = (void *)MEMORY[0x2426863FC](*(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40));
  objc_msgSend(v2, sel_removeObjectForKey_, v3);

  swift_release();
  swift_bridgeObjectRelease();
  v1[2](v1, 0);
  _Block_release(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void LACUserDefaultsPersistentStore.__allocating_init()()
{
  swift_allocObject();
  swift_defaultActor_initialize();
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

void LACUserDefaultsPersistentStore.init()()
{
  swift_defaultActor_initialize();
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

uint64_t LACUserDefaultsPersistentStore.deinit()
{
  uint64_t v0;

  swift_defaultActor_destroy();
  return v0;
}

uint64_t LACUserDefaultsPersistentStore.__deallocating_deinit()
{
  uint64_t v0;

  swift_defaultActor_destroy();
  return swift_defaultActor_deallocate();
}

uint64_t LACUserDefaultsPersistentStore.unownedExecutor.getter()
{
  uint64_t v0;

  return v0;
}

uint64_t protocol witness for Actor.unownedExecutor.getter in conformance LACUserDefaultsPersistentStore()
{
  uint64_t v0;

  return v0;
}

uint64_t method lookup function for LACUserDefaultsPersistentStore()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of LACUserDefaultsPersistentStore.__allocating_init(suiteName:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 96))();
}

uint64_t dispatch thunk of LACUserDefaultsPersistentStore.data(forKey:)(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  int *v6;
  _QWORD *v7;
  uint64_t (*v9)(uint64_t, uint64_t);

  v6 = *(int **)((*MEMORY[0x24BEE4EA0] & *v2) + 0x68);
  v9 = (uint64_t (*)(uint64_t, uint64_t))((char *)v6 + *v6);
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v7;
  *v7 = v3;
  v7[1] = dispatch thunk of LACUserDefaultsPersistentStore.data(forKey:);
  return v9(a1, a2);
}

{
  uint64_t *v2;
  uint64_t v6;

  v6 = *v2;
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(a1, a2);
}

uint64_t dispatch thunk of LACUserDefaultsPersistentStore.setData(_:forKey:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  int *v10;
  _QWORD *v11;
  uint64_t (*v13)(uint64_t, uint64_t, uint64_t, uint64_t);

  v10 = *(int **)((*MEMORY[0x24BEE4EA0] & *v4) + 0x70);
  v13 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))((char *)v10 + *v10);
  v11 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v5 + 16) = v11;
  *v11 = v5;
  v11[1] = dispatch thunk of LACUserDefaultsPersistentStore.setData(_:forKey:);
  return v13(a1, a2, a3, a4);
}

uint64_t dispatch thunk of LACUserDefaultsPersistentStore.removeObject(forKey:)(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  int *v6;
  _QWORD *v7;
  uint64_t (*v9)(uint64_t, uint64_t);

  v6 = *(int **)((*MEMORY[0x24BEE4EA0] & *v2) + 0x78);
  v9 = (uint64_t (*)(uint64_t, uint64_t))((char *)v6 + *v6);
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v7;
  *v7 = v3;
  v7[1] = dispatch thunk of LACUserDefaultsPersistentStore.removeObject(forKey:);
  return v9(a1, a2);
}

uint64_t dispatch thunk of LACUserDefaultsPersistentStore.removeObject(forKey:)()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t partial apply for @objc closure #1 in LACUserDefaultsPersistentStore.removeObject(forKey:)()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  _QWORD *v5;

  v2 = v0[2];
  v3 = (void *)v0[3];
  v4 = v0[4];
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v5;
  *v5 = v1;
  v5[1] = dispatch thunk of LACUserDefaultsPersistentStore.removeObject(forKey:);
  return ((uint64_t (*)(int, void *, uint64_t))((char *)&async function pointer to @objc closure #1 in LACUserDefaultsPersistentStore.removeObject(forKey:)
                                                       + async function pointer to @objc closure #1 in LACUserDefaultsPersistentStore.removeObject(forKey:)))(v2, v3, v4);
}

uint64_t _sIeghH_IeAgH_TRTA()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int *v4;
  _QWORD *v5;

  v2 = v0[2];
  v3 = v0[3];
  v4 = (int *)v0[4];
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v5;
  *v5 = v1;
  v5[1] = dispatch thunk of LACUserDefaultsPersistentStore.setData(_:forKey:);
  return ((uint64_t (*)(uint64_t, uint64_t, int *))((char *)&_sIeghH_IeAgH_TRTu + _sIeghH_IeAgH_TRTu))(v2, v3, v4);
}

uint64_t _sIeAgH_ytIeAgHr_TRTA(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  int *v6;
  _QWORD *v7;

  v4 = v1[2];
  v5 = v1[3];
  v6 = (int *)v1[4];
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = dispatch thunk of LACUserDefaultsPersistentStore.setData(_:forKey:);
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, int *))((char *)&_sIeAgH_ytIeAgHr_TRTu
                                                                   + _sIeAgH_ytIeAgHr_TRTu))(a1, v4, v5, v6);
}

uint64_t sub_240A217C0()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 32));
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for @objc closure #1 in LACUserDefaultsPersistentStore.setData(_:forKey:)()
{
  _QWORD *v0;
  uint64_t v1;
  void *v2;
  void *v3;
  uint64_t v4;
  void *v5;
  _QWORD *v6;

  v2 = (void *)v0[2];
  v3 = (void *)v0[3];
  v5 = (void *)v0[4];
  v4 = v0[5];
  v6 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v6;
  *v6 = v1;
  v6[1] = dispatch thunk of LACUserDefaultsPersistentStore.setData(_:forKey:);
  return ((uint64_t (*)(void *, void *, void *, uint64_t))((char *)&async function pointer to @objc closure #1 in LACUserDefaultsPersistentStore.setData(_:forKey:)
                                                                  + async function pointer to @objc closure #1 in LACUserDefaultsPersistentStore.setData(_:forKey:)))(v2, v3, v5, v4);
}

uint64_t outlined consume of Data._Representation(uint64_t a1, unint64_t a2)
{
  uint64_t result;

  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2)
      return result;
    swift_release();
  }
  return swift_release();
}

uint64_t objectdestroyTm()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 24));
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for @objc closure #1 in LACUserDefaultsPersistentStore.data(forKey:)()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  _QWORD *v5;

  v2 = v0[2];
  v3 = (void *)v0[3];
  v4 = v0[4];
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v5;
  *v5 = v1;
  v5[1] = dispatch thunk of LACUserDefaultsPersistentStore.setData(_:forKey:);
  return ((uint64_t (*)(int, void *, uint64_t))((char *)&async function pointer to @objc closure #1 in LACUserDefaultsPersistentStore.data(forKey:)
                                                       + async function pointer to @objc closure #1 in LACUserDefaultsPersistentStore.data(forKey:)))(v2, v3, v4);
}

uint64_t objectdestroy_7Tm()
{
  swift_unknownObjectRelease();
  swift_release();
  return swift_deallocObject();
}

uint64_t SerialTask.__allocating_init()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = swift_allocObject();
  v1 = v0 + OBJC_IVAR____TtC23LocalAuthenticationCore10SerialTask_continuation;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<()>.Continuation);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(v1, 1, 1, v2);
  SerialTask.start()();
  return v0;
}

uint64_t SerialTask.init()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0 + OBJC_IVAR____TtC23LocalAuthenticationCore10SerialTask_continuation;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<()>.Continuation);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(v1, 1, 1, v2);
  SerialTask.start()();
  return v0;
}

uint64_t SerialTask.deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v8;

  v1 = v0;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<()>.Continuation);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = v1 + OBJC_IVAR____TtC23LocalAuthenticationCore10SerialTask_continuation;
  swift_beginAccess();
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v6, 1, v2))
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, v6, v2);
    AsyncStream.Continuation.finish()();
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  }
  outlined destroy of AsyncStream<()>.Continuation?(v6, &demangling cache variable for type metadata for AsyncStream<()>.Continuation?);
  return v1;
}

uint64_t SerialTask.__deallocating_deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v8;

  v1 = v0;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<()>.Continuation);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = v1 + OBJC_IVAR____TtC23LocalAuthenticationCore10SerialTask_continuation;
  swift_beginAccess();
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v6, 1, v2))
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, v6, v2);
    AsyncStream.Continuation.finish()();
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  }
  outlined destroy of AsyncStream<()>.Continuation?(v6, &demangling cache variable for type metadata for AsyncStream<()>.Continuation?);
  return swift_deallocClassInstance();
}

uint64_t SerialTask.add(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD v20[3];

  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<()>.Continuation);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<()>.Continuation?);
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<()>.Continuation.YieldResult?);
  MEMORY[0x24BDAC7A8](v12);
  v14 = (char *)v20 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = v2 + OBJC_IVAR____TtC23LocalAuthenticationCore10SerialTask_continuation;
  swift_beginAccess();
  outlined init with copy of AsyncStream<()>.Continuation?(v15, (uint64_t)v11);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v11, 1, v5))
  {
    outlined destroy of AsyncStream<()>.Continuation?((uint64_t)v11, &demangling cache variable for type metadata for AsyncStream<()>.Continuation?);
    v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<()>.Continuation.YieldResult);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(v14, 1, 1, v16);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v6 + 16))(v8, v11, v5);
    outlined destroy of AsyncStream<()>.Continuation?((uint64_t)v11, &demangling cache variable for type metadata for AsyncStream<()>.Continuation?);
    v17 = swift_allocObject();
    *(_QWORD *)(v17 + 16) = a1;
    *(_QWORD *)(v17 + 24) = a2;
    v20[1] = &async function pointer to partial apply for thunk for @escaping @callee_guaranteed @async () -> ();
    v20[2] = v17;
    swift_retain();
    AsyncStream.Continuation.yield(_:)();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<()>.Continuation.YieldResult);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 56))(v14, 0, 1, v18);
  }
  return outlined destroy of AsyncStream<()>.Continuation?((uint64_t)v14, &demangling cache variable for type metadata for AsyncStream<()>.Continuation.YieldResult?);
}

uint64_t thunk for @escaping @callee_guaranteed @async () -> ()(uint64_t a1, int *a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t (*v5)(void);

  v5 = (uint64_t (*)(void))((char *)a2 + *a2);
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v3;
  *v3 = v2;
  v3[1] = dispatch thunk of LACUserDefaultsPersistentStore.setData(_:forKey:);
  return v5();
}

uint64_t SerialTask.start()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v18;
  char *v19;

  v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x24BDAC7A8](v0);
  v19 = (char *)&v18 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<()>.Continuation.BufferingPolicy);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v18 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<()>);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  v9 = MEMORY[0x24BDAC7A8](v6);
  v10 = (char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v18 - v11;
  swift_allocObject();
  swift_weakInit();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for ());
  (*(void (**)(char *, _QWORD, uint64_t))(v3 + 104))(v5, *MEMORY[0x24BEE6A10], v2);
  AsyncStream.init(_:bufferingPolicy:_:)();
  swift_release();
  v13 = type metadata accessor for TaskPriority();
  v14 = (uint64_t)v19;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v19, 1, 1, v13);
  (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v10, v12, v6);
  v15 = (*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  v16 = swift_allocObject();
  *(_QWORD *)(v16 + 16) = 0;
  *(_QWORD *)(v16 + 24) = 0;
  (*(void (**)(unint64_t, char *, uint64_t))(v7 + 32))(v16 + v15, v10, v6);
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5(v14, (uint64_t)&async function pointer to partial apply for closure #2 in SerialTask.start(), v16);
  swift_release();
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v12, v6);
}

uint64_t outlined init with copy of AsyncStream<()>.Continuation?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<()>.Continuation?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of AsyncStream<()>.Continuation?(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = __swift_instantiateConcreteTypeFromMangledName(a2);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_240A2214C()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed @async () -> ()(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int *v4;
  _QWORD *v5;

  v4 = *(int **)(v1 + 16);
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = dispatch thunk of LACUserDefaultsPersistentStore.setData(_:forKey:);
  return ((uint64_t (*)(uint64_t, int *))((char *)&async function pointer to thunk for @escaping @callee_guaranteed @async () -> ()
                                                 + async function pointer to thunk for @escaping @callee_guaranteed @async () -> ()))(a1, v4);
}

uint64_t ObjC metadata update function for SerialTask()
{
  return type metadata accessor for SerialTask();
}

uint64_t type metadata accessor for SerialTask()
{
  uint64_t result;

  result = type metadata singleton initialization cache for SerialTask;
  if (!type metadata singleton initialization cache for SerialTask)
    return swift_getSingletonMetadata();
  return result;
}

void type metadata completion function for SerialTask()
{
  unint64_t v0;

  type metadata accessor for AsyncStream<()>.Continuation?();
  if (v0 <= 0x3F)
    swift_updateClassMetadata2();
}

uint64_t method lookup function for SerialTask()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of SerialTask.__allocating_init()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 112))();
}

uint64_t dispatch thunk of SerialTask.add(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 120))();
}

void type metadata accessor for AsyncStream<()>.Continuation?()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for AsyncStream<()>.Continuation?)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for AsyncStream<()>.Continuation);
    v0 = type metadata accessor for Optional();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for AsyncStream<()>.Continuation?);
  }
}

uint64_t sub_240A22308()
{
  swift_weakDestroy();
  return swift_deallocObject();
}

uint64_t closure #1 in SerialTask.start()(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE v10[24];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<()>.Continuation?);
  MEMORY[0x24BDAC7A8](v2);
  v4 = &v10[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  swift_beginAccess();
  result = swift_weakLoadStrong();
  if (result)
  {
    v6 = result;
    v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<()>.Continuation);
    v8 = *(_QWORD *)(v7 - 8);
    (*(void (**)(_BYTE *, uint64_t, uint64_t))(v8 + 16))(v4, a1, v7);
    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v8 + 56))(v4, 0, 1, v7);
    v9 = v6 + OBJC_IVAR____TtC23LocalAuthenticationCore10SerialTask_continuation;
    swift_beginAccess();
    outlined assign with take of AsyncStream<()>.Continuation?((uint64_t)v4, v9);
    swift_endAccess();
    return swift_release();
  }
  return result;
}

uint64_t partial apply for closure #1 in SerialTask.start()(uint64_t a1)
{
  return closure #1 in SerialTask.start()(a1);
}

uint64_t closure #2 in SerialTask.start()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;

  v4[4] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<()>.Iterator);
  v4[5] = v5;
  v4[6] = *(_QWORD *)(v5 - 8);
  v4[7] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t closure #2 in SerialTask.start()()
{
  uint64_t v0;
  _QWORD *v1;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<()>);
  AsyncStream.makeAsyncIterator()();
  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 64) = v1;
  *v1 = v0;
  v1[1] = closure #2 in SerialTask.start();
  return AsyncStream.Iterator.next(isolation:)();
}

{
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  int *v1;
  _QWORD *v2;
  uint64_t (*v4)(void);

  v1 = *(int **)(v0 + 16);
  *(_QWORD *)(v0 + 72) = v1;
  if (v1)
  {
    *(_QWORD *)(v0 + 80) = *(_QWORD *)(v0 + 24);
    v4 = (uint64_t (*)(void))((char *)v1 + *v1);
    v2 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 88) = v2;
    *v2 = v0;
    v2[1] = closure #2 in SerialTask.start();
    return v4();
  }
  else
  {
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 48) + 8))(*(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 40));
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v1 = *v0;
  v2 = *(_QWORD *)(*v0 + 72);
  v3 = *v0;
  swift_task_dealloc();
  _sxRi_zRi0_zlyytIsegHr_SgWOe(v2);
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 64) = v4;
  *v4 = v3;
  v4[1] = closure #2 in SerialTask.start();
  return AsyncStream.Iterator.next(isolation:)();
}

uint64_t sub_240A226BC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<()>);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  swift_unknownObjectRelease();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in SerialTask.start()(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v4 = *(unsigned __int8 *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<()>)
                                      - 8)
                          + 80);
  v5 = *(_QWORD *)(v1 + 16);
  v6 = *(_QWORD *)(v1 + 24);
  v7 = v1 + ((v4 + 32) & ~v4);
  v8 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v8;
  *v8 = v2;
  v8[1] = dispatch thunk of LACUserDefaultsPersistentStore.removeObject(forKey:);
  return closure #2 in SerialTask.start()(a1, v5, v6, v7);
}

uint64_t _sxRi_zRi0_zlyytIsegHr_SgWOe(uint64_t result)
{
  if (result)
    return swift_release();
  return result;
}

uint64_t outlined assign with take of AsyncStream<()>.Continuation?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<()>.Continuation?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

BOOL LACOnenessSessionMonitorModel.isMonitoring.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + OBJC_IVAR____TtC23LocalAuthenticationCore29LACOnenessSessionMonitorModel_sessionSubscription) != 0;
}

id LACOnenessSessionMonitorModel.isOnenessActive.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  id v4;
  void *v5;
  id v6;
  id v7;
  uint64_t v8;
  void *v9;
  void *v10;
  Swift::String v11;
  Swift::String v12;
  id v13;
  Swift::String v15;

  v1 = type metadata accessor for LACLogger();
  MEMORY[0x24BDAC7A8](v1);
  v3 = (char *)&v15 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = objc_msgSend((id)objc_opt_self(), sel_isCompanionSessionActive);
  if (!v4)
    return (id)*(unsigned __int8 *)(v0
                                  + OBJC_IVAR____TtC23LocalAuthenticationCore29LACOnenessSessionMonitorModel__isOnenessActive);
  v5 = v4;
  v6 = LACLogABM();
  Logger.init(_:)();
  v15._countAndFlagsBits = 0;
  v15._object = (void *)0xE000000000000000;
  _StringGuts.grow(_:)(45);
  swift_bridgeObjectRelease();
  v15._countAndFlagsBits = 0xD00000000000002BLL;
  v15._object = (void *)0x8000000240A835A0;
  v7 = objc_msgSend(v5, sel_description);
  v8 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v10 = v9;

  v11._countAndFlagsBits = v8;
  v11._object = v10;
  String.append(_:)(v11);
  swift_bridgeObjectRelease();
  v12 = v15;
  LOBYTE(v15._countAndFlagsBits) = 2;
  LACLogger.log(level:_:)((LocalAuthenticationCore::LACLogger::Level)&v15, v12);
  swift_bridgeObjectRelease();
  outlined destroy of LACLogger((uint64_t)v3);
  v13 = objc_msgSend(v5, sel_BOOLValue);

  return v13;
}

uint64_t LACOnenessSessionMonitorModel.handleSessionUpdate()()
{
  char *v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  void *v8;
  uint64_t v9;
  void *v10;
  id v11;
  char *v12;
  _QWORD v14[2];
  uint64_t v15;
  uint64_t v16;
  _QWORD aBlock[6];

  v1 = type metadata accessor for DispatchWorkItemFlags();
  v15 = *(_QWORD *)(v1 - 8);
  MEMORY[0x24BDAC7A8](v1);
  v3 = (char *)v14 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for DispatchQoS();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14[1] = *(_QWORD *)&v0[OBJC_IVAR____TtC23LocalAuthenticationCore29LACOnenessSessionMonitorModel_replyQueue];
  v8 = *(void **)&v0[OBJC_IVAR____TtC23LocalAuthenticationCore29LACOnenessSessionMonitorModel_observers];
  v9 = swift_allocObject();
  *(_QWORD *)(v9 + 16) = v8;
  *(_QWORD *)(v9 + 24) = v0;
  aBlock[4] = partial apply for closure #1 in LACOnenessSessionMonitorModel.handleSessionUpdate();
  aBlock[5] = v9;
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
  aBlock[3] = &block_descriptor_18;
  v10 = _Block_copy(aBlock);
  v11 = v8;
  v12 = v0;
  static DispatchQoS.unspecified.getter();
  v16 = MEMORY[0x24BEE4AF8];
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type CurrentValueSubject<Bool?, Never> and conformance CurrentValueSubject<A, B>((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags], MEMORY[0x24BEE12C8]);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x242686654](0, v7, v3, v10);
  _Block_release(v10);

  (*(void (**)(char *, uint64_t))(v15 + 8))(v3, v1);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  return swift_release();
}

id LACOnenessSessionMonitorModel.__allocating_init(sessionProvider:replyQueue:)(uint64_t a1, void *a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;

  v5 = *(_QWORD *)(a1 + 24);
  v6 = *(_QWORD *)(a1 + 32);
  v7 = __swift_mutable_project_boxed_opaque_existential_1(a1, v5);
  v8 = specialized LACOnenessSessionMonitorModel.__allocating_init(sessionProvider:replyQueue:)(v7, a2, v2, v5, v6);

  __swift_destroy_boxed_opaque_existential_1(a1);
  return v8;
}

uint64_t __swift_mutable_project_boxed_opaque_existential_1(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  if ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) & 0x20000) != 0)
  {
    swift_makeBoxUnique();
    return v2;
  }
  return result;
}

id LACOnenessSessionMonitorModel.init(sessionProvider:replyQueue:)(uint64_t a1, void *a2)
{
  _BYTE *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  id v11;
  uint64_t v13;

  v5 = *(_QWORD *)(a1 + 24);
  v6 = *(_QWORD *)(a1 + 32);
  v7 = __swift_mutable_project_boxed_opaque_existential_1(a1, v5);
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)&v13 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v10 + 16))(v9);
  v11 = specialized LACOnenessSessionMonitorModel.init(sessionProvider:replyQueue:)((uint64_t)v9, a2, v2, v5, v6);

  __swift_destroy_boxed_opaque_existential_1(a1);
  return v11;
}

Swift::Void __swiftcall LACOnenessSessionMonitorModel.start()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  id v5;
  Swift::String v6;
  uint64_t v7;
  id v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  uint64_t v16;
  char v17;
  char v18;
  uint64_t v19;
  char v20;

  v1 = v0;
  v2 = type metadata accessor for LACLogger();
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)&v16 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = LACLogABM();
  Logger.init(_:)();
  v20 = 2;
  v6._object = (void *)0x8000000240A83340;
  v6._countAndFlagsBits = 0xD000000000000020;
  LACLogger.log(level:_:)((LocalAuthenticationCore::LACLogger::Level)&v20, v6);
  outlined destroy of LACLogger((uint64_t)v4);
  v7 = OBJC_IVAR____TtC23LocalAuthenticationCore29LACOnenessSessionMonitorModel_sessionSubscription;
  if (*(_QWORD *)(v0 + OBJC_IVAR____TtC23LocalAuthenticationCore29LACOnenessSessionMonitorModel_sessionSubscription))
  {
    v8 = LACLogABM();
    Logger.init(_:)();
    v17 = 2;
    v9 = 0xD000000000000026;
    v10 = 0x8000000240A833A0;
    v11 = &v17;
  }
  else
  {
    v12 = *(_QWORD *)(v0 + OBJC_IVAR____TtC23LocalAuthenticationCore29LACOnenessSessionMonitorModel_sessionProvider + 24);
    v13 = *(_QWORD *)(v0 + OBJC_IVAR____TtC23LocalAuthenticationCore29LACOnenessSessionMonitorModel_sessionProvider + 32);
    __swift_project_boxed_opaque_existential_1((_QWORD *)(v0 + OBJC_IVAR____TtC23LocalAuthenticationCore29LACOnenessSessionMonitorModel_sessionProvider), v12);
    v19 = (*(uint64_t (**)(uint64_t, uint64_t))(v13 + 8))(v12, v13);
    swift_allocObject();
    swift_unknownObjectWeakInit();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AnyPublisher<Bool, Never>);
    lazy protocol witness table accessor for type CurrentValueSubject<Bool?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type AnyPublisher<Bool, Never> and conformance AnyPublisher<A, B>, (uint64_t *)&demangling cache variable for type metadata for AnyPublisher<Bool, Never>, MEMORY[0x24BDB9AF8]);
    v14 = Publisher<>.sink(receiveValue:)();
    swift_release();
    swift_release();
    *(_QWORD *)(v1 + v7) = v14;
    swift_release();
    v15 = LACLogABM();
    Logger.init(_:)();
    v18 = 2;
    v9 = 0xD000000000000021;
    v10 = 0x8000000240A83370;
    v11 = &v18;
  }
  LACLogger.log(level:_:)((LocalAuthenticationCore::LACLogger::Level)v11, *(Swift::String *)&v9);
  outlined destroy of LACLogger((uint64_t)v4);
}

void closure #1 in LACOnenessSessionMonitorModel.start()(char *a1, uint64_t a2)
{
  char v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  int v6;

  v2 = *a1;
  v3 = a2 + 16;
  swift_beginAccess();
  v4 = MEMORY[0x242687740](v3);
  if (v4)
  {
    v5 = (_BYTE *)v4;
    v6 = LACOnenessSessionMonitorModel.isOnenessActive.getter() & 1;
    v5[OBJC_IVAR____TtC23LocalAuthenticationCore29LACOnenessSessionMonitorModel__isOnenessActive] = v2;
    if (v6 != (LACOnenessSessionMonitorModel.isOnenessActive.getter() & 1))
      LACOnenessSessionMonitorModel.handleSessionUpdate()();

  }
}

Swift::Void __swiftcall LACOnenessSessionMonitorModel.stop()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  id v4;
  Swift::String v5;
  id v6;
  Swift::String v7;
  uint64_t v8;
  char v9;
  char v10;

  v1 = type metadata accessor for LACLogger();
  MEMORY[0x24BDAC7A8](v1);
  v3 = (char *)&v8 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(_QWORD *)(v0 + OBJC_IVAR____TtC23LocalAuthenticationCore29LACOnenessSessionMonitorModel_sessionSubscription))
  {
    *(_QWORD *)(v0 + OBJC_IVAR____TtC23LocalAuthenticationCore29LACOnenessSessionMonitorModel_sessionSubscription) = 0;
    AnyCancellable.cancel()();
    v4 = LACLogABM();
    Logger.init(_:)();
    v9 = 2;
    v5._object = (void *)0x8000000240A83410;
    v5._countAndFlagsBits = 0xD000000000000020;
    LACLogger.log(level:_:)((LocalAuthenticationCore::LACLogger::Level)&v9, v5);
    swift_release();
  }
  else
  {
    v6 = LACLogABM();
    Logger.init(_:)();
    v10 = 2;
    v7._countAndFlagsBits = 0xD000000000000032;
    v7._object = (void *)0x8000000240A833D0;
    LACLogger.log(level:_:)((LocalAuthenticationCore::LACLogger::Level)&v10, v7);
  }
  outlined destroy of LACLogger((uint64_t)v3);
}

uint64_t LACOnenessSessionMonitorModel.add(_:)(uint64_t a1)
{
  return LACOnenessSessionMonitorModel.add(_:)(a1, (uint64_t)&unk_2510C2F80, (uint64_t)partial apply for closure #1 in LACOnenessSessionMonitorModel.add(_:), (uint64_t)&block_descriptor_0);
}

uint64_t thunk for @escaping @callee_guaranteed @Sendable () -> ()(uint64_t a1)
{
  void (*v1)(uint64_t);
  uint64_t v2;

  v1 = *(void (**)(uint64_t))(a1 + 32);
  v2 = swift_retain();
  v1(v2);
  return swift_release();
}

uint64_t LACOnenessSessionMonitorModel.remove(_:)(uint64_t a1)
{
  return LACOnenessSessionMonitorModel.add(_:)(a1, (uint64_t)&unk_2510C2FA8, (uint64_t)partial apply for closure #1 in LACOnenessSessionMonitorModel.remove(_:), (uint64_t)&block_descriptor_11);
}

uint64_t LACOnenessSessionMonitorModel.add(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD aBlock[6];

  v8 = type metadata accessor for DispatchWorkItemFlags();
  v20 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for DispatchQoS();
  v11 = *(_QWORD *)(v19 - 8);
  MEMORY[0x24BDAC7A8](v19);
  v13 = (char *)&v18 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = *(_QWORD *)(v4 + OBJC_IVAR____TtC23LocalAuthenticationCore29LACOnenessSessionMonitorModel_replyQueue);
  v14 = swift_allocObject();
  swift_unknownObjectWeakInit();
  v15 = swift_allocObject();
  *(_QWORD *)(v15 + 16) = v14;
  *(_QWORD *)(v15 + 24) = a1;
  aBlock[4] = a3;
  aBlock[5] = v15;
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
  aBlock[3] = a4;
  v16 = _Block_copy(aBlock);
  swift_retain();
  swift_unknownObjectRetain();
  static DispatchQoS.unspecified.getter();
  v21 = MEMORY[0x24BEE4AF8];
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type CurrentValueSubject<Bool?, Never> and conformance CurrentValueSubject<A, B>((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags], MEMORY[0x24BEE12C8]);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x242686654](0, v13, v10, v16);
  _Block_release(v16);
  (*(void (**)(char *, uint64_t))(v20 + 8))(v10, v8);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v19);
  swift_release();
  return swift_release();
}

void closure #1 in LACOnenessSessionMonitorModel.add(_:)(uint64_t a1, uint64_t a2, SEL *a3)
{
  uint64_t v5;
  uint64_t v6;
  void *v7;
  id v8;

  v5 = a1 + 16;
  swift_beginAccess();
  v6 = MEMORY[0x242687740](v5);
  if (v6)
  {
    v7 = (void *)v6;
    v8 = *(id *)(v6 + OBJC_IVAR____TtC23LocalAuthenticationCore29LACOnenessSessionMonitorModel_observers);

    objc_msgSend(v8, *a3, a2);
  }
}

void @objc LACOnenessSessionMonitorModel.add(_:)(void *a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t))
{
  id v7;

  swift_unknownObjectRetain();
  v7 = a1;
  a4(a3);
  swift_unknownObjectRelease();

}

id LACOnenessSessionMonitorModel.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

void LACOnenessSessionMonitorModel.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

id LACOnenessSessionMonitorModel.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

void *closure #1 in LACOnenessSessionMonitorModel.handleSessionUpdate()(void *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  id v9;
  unint64_t v10;
  uint64_t v11;
  void *result;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  Swift::String v17;
  Swift::String v18;
  Swift::String v19;
  void *v20;
  id v21;
  Swift::String v22;
  id v23;
  void *v24;
  id v25;
  char *v26;
  id v27;
  char *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  void *v34;
  Swift::String v35;
  Swift::String v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  char *v41;
  void *v42;
  void *v43;
  unint64_t v44;
  id v45;
  uint64_t v46;
  void *v47;
  Swift::String v48;
  Swift::String v49;

  v4 = type metadata accessor for LACLogger();
  v5 = MEMORY[0x24BDAC7A8](v4);
  v41 = (char *)&v38 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v38 - v7;
  v9 = objc_msgSend(a1, sel_allObjects);
  v46 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LACOnenessSessionMonitorObserver);
  v10 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v10 >> 62)
  {
    swift_bridgeObjectRetain();
    v11 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v11)
      goto LABEL_3;
    return (void *)swift_bridgeObjectRelease();
  }
  v11 = *(_QWORD *)((v10 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (!v11)
    return (void *)swift_bridgeObjectRelease();
LABEL_3:
  result = (void *)objc_opt_self();
  v45 = result;
  if (v11 >= 1)
  {
    v13 = 0;
    v43 = (void *)0x8000000240A83550;
    v44 = v10 & 0xC000000000000001;
    v42 = (void *)0x8000000240A83580;
    v39 = OBJC_IVAR____TtC23LocalAuthenticationCore29LACOnenessSessionMonitorModel__isOnenessActive;
    v40 = (void *)0x8000000240A835A0;
    while (1)
    {
      if (v44)
      {
        v20 = (void *)MEMORY[0x24268672C](v13, v10);
      }
      else
      {
        v20 = *(void **)(v10 + 8 * v13 + 32);
        swift_unknownObjectRetain();
      }
      v21 = LACLogABM();
      Logger.init(_:)();
      v49._countAndFlagsBits = 0;
      v49._object = (void *)0xE000000000000000;
      _StringGuts.grow(_:)(61);
      v22._countAndFlagsBits = 0xD000000000000024;
      v22._object = v43;
      String.append(_:)(v22);
      v23 = objc_msgSend(v45, sel_isCompanionSessionActive);
      if (v23)
      {
        v24 = v23;
        v25 = LACLogABM();
        v47 = v20;
        v26 = v41;
        Logger.init(_:)();
        v48._countAndFlagsBits = 0;
        v48._object = (void *)0xE000000000000000;
        _StringGuts.grow(_:)(45);
        swift_bridgeObjectRelease();
        v48._countAndFlagsBits = 0xD00000000000002BLL;
        v48._object = v40;
        v27 = objc_msgSend(v24, sel_description);
        v28 = v8;
        v29 = v11;
        v30 = v10;
        v31 = a2;
        v32 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        v34 = v33;

        v35._countAndFlagsBits = v32;
        a2 = v31;
        v10 = v30;
        v11 = v29;
        v8 = v28;
        v35._object = v34;
        String.append(_:)(v35);
        swift_bridgeObjectRelease();
        v36 = v48;
        LOBYTE(v48._countAndFlagsBits) = 2;
        LACLogger.log(level:_:)((LocalAuthenticationCore::LACLogger::Level)&v48, v36);
        swift_bridgeObjectRelease();
        v37 = (uint64_t)v26;
        v20 = v47;
        outlined destroy of LACLogger(v37);
        LOBYTE(v34) = objc_msgSend(v24, sel_BOOLValue);

        if ((v34 & 1) != 0)
          goto LABEL_14;
      }
      else if ((*(_BYTE *)(a2 + v39) & 1) != 0)
      {
LABEL_14:
        v14 = 0xE400000000000000;
        v15 = 1702195828;
        goto LABEL_6;
      }
      v14 = 0xE500000000000000;
      v15 = 0x65736C6166;
LABEL_6:
      ++v13;
      v16 = v14;
      String.append(_:)(*(Swift::String *)&v15);
      swift_bridgeObjectRelease();
      v17._countAndFlagsBits = 0xD000000000000015;
      v17._object = v42;
      String.append(_:)(v17);
      v48._countAndFlagsBits = (uint64_t)v20;
      swift_unknownObjectRetain();
      v18._countAndFlagsBits = String.init<A>(describing:)();
      String.append(_:)(v18);
      swift_bridgeObjectRelease();
      v19 = v49;
      LOBYTE(v49._countAndFlagsBits) = 2;
      LACLogger.log(level:_:)((LocalAuthenticationCore::LACLogger::Level)&v49, v19);
      swift_bridgeObjectRelease();
      outlined destroy of LACLogger((uint64_t)v8);
      objc_msgSend(v20, sel_onenessSessionMonitorDidUpdate_, a2);
      swift_unknownObjectRelease();
      if (v11 == v13)
        return (void *)swift_bridgeObjectRelease();
    }
  }
  __break(1u);
  return result;
}

id specialized LACOnenessSessionMonitorModel.init(sessionProvider:replyQueue:)(uint64_t a1, void *a2, _BYTE *a3, uint64_t a4, uint64_t a5)
{
  objc_class *ObjectType;
  uint64_t *boxed_opaque_existential_1;
  void *v12;
  char *v13;
  id v14;
  id v15;
  id v16;
  objc_super v18;
  uint64_t v19[5];

  ObjectType = (objc_class *)swift_getObjectType();
  v19[3] = a4;
  v19[4] = a5;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v19);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(a4 - 8) + 32))(boxed_opaque_existential_1, a1, a4);
  a3[OBJC_IVAR____TtC23LocalAuthenticationCore29LACOnenessSessionMonitorModel__isOnenessActive] = 0;
  *(_QWORD *)&a3[OBJC_IVAR____TtC23LocalAuthenticationCore29LACOnenessSessionMonitorModel_sessionSubscription] = 0;
  v12 = (void *)objc_opt_self();
  v13 = a3;
  v14 = objc_msgSend(v12, sel_weakObjectsHashTable);
  *(_QWORD *)&v13[OBJC_IVAR____TtC23LocalAuthenticationCore29LACOnenessSessionMonitorModel_observers] = v14;
  outlined init with copy of LACOnenessSessionProviding((uint64_t)v19, (uint64_t)&v13[OBJC_IVAR____TtC23LocalAuthenticationCore29LACOnenessSessionMonitorModel_sessionProvider]);
  *(_QWORD *)&v13[OBJC_IVAR____TtC23LocalAuthenticationCore29LACOnenessSessionMonitorModel_replyQueue] = a2;
  v15 = a2;

  v18.receiver = v13;
  v18.super_class = ObjectType;
  v16 = objc_msgSendSuper2(&v18, sel_init);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v19);
  return v16;
}

id specialized LACOnenessSessionMonitorModel.__allocating_init(sessionProvider:replyQueue:)(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  char *v11;
  Class v12;
  _BYTE *v13;
  uint64_t v15;

  v9 = *(_QWORD *)(a4 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v11 = (char *)&v15 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = objc_allocWithZone(v12);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a1, a4);
  return specialized LACOnenessSessionMonitorModel.init(sessionProvider:replyQueue:)((uint64_t)v11, a2, v13, a4, a5);
}

uint64_t __swift_destroy_boxed_opaque_existential_1(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 24) - 8);
  if ((*(_BYTE *)(v1 + 82) & 2) != 0)
    return swift_release();
  else
    return (*(uint64_t (**)(void))(v1 + 8))();
}

_QWORD *__swift_project_boxed_opaque_existential_1(_QWORD *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) & 0x20000) != 0)
    return (_QWORD *)(*result
                    + ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) + 16) & ~(unint64_t)*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80)));
  return result;
}

uint64_t sub_240A23B90()
{
  swift_unknownObjectWeakDestroy();
  return swift_deallocObject();
}

void partial apply for closure #1 in LACOnenessSessionMonitorModel.start()(char *a1)
{
  uint64_t v1;

  closure #1 in LACOnenessSessionMonitorModel.start()(a1, v1);
}

void partial apply for closure #1 in LACOnenessSessionMonitorModel.add(_:)()
{
  uint64_t v0;

  closure #1 in LACOnenessSessionMonitorModel.add(_:)(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), (SEL *)&selRef_addObject_);
}

uint64_t block_copy_helper_0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_0()
{
  return swift_release();
}

unint64_t lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags;
  if (!lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags)
  {
    v1 = type metadata accessor for DispatchWorkItemFlags();
    result = MEMORY[0x242687614](MEMORY[0x24BEE5468], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags);
  }
  return result;
}

uint64_t objectdestroy_3Tm()
{
  swift_release();
  swift_unknownObjectRelease();
  return swift_deallocObject();
}

void partial apply for closure #1 in LACOnenessSessionMonitorModel.remove(_:)()
{
  uint64_t v0;

  closure #1 in LACOnenessSessionMonitorModel.add(_:)(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), (SEL *)&selRef_removeObject_);
}

uint64_t type metadata accessor for LACOnenessSessionMonitorModel()
{
  return objc_opt_self();
}

uint64_t method lookup function for LACOnenessSessionMonitorModel()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of LACOnenessSessionMonitorModel.__allocating_init(sessionProvider:replyQueue:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 120))();
}

uint64_t sub_240A23CC4()
{
  uint64_t v0;

  return swift_deallocObject();
}

void *partial apply for closure #1 in LACOnenessSessionMonitorModel.handleSessionUpdate()()
{
  uint64_t v0;

  return closure #1 in LACOnenessSessionMonitorModel.handleSessionUpdate()(*(void **)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t *__swift_allocate_boxed_opaque_existential_1(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;

  v1 = a1;
  if ((*(_BYTE *)(*(_QWORD *)(a1[3] - 8) + 82) & 2) != 0)
  {
    *a1 = swift_allocBox();
    return (uint64_t *)v2;
  }
  return v1;
}

uint64_t outlined init with copy of LACOnenessSessionProviding(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v3;
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t LACPersistentStore.object<A>(forKey:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  _QWORD *v7;

  v7[21] = a6;
  v7[22] = v6;
  v7[19] = a3;
  v7[20] = a5;
  v7[17] = a1;
  v7[18] = a2;
  return swift_task_switch();
}

uint64_t LACPersistentStore.object<A>(forKey:)()
{
  _QWORD *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v1 = (void *)v0[22];
  v2 = MEMORY[0x2426863FC](v0[18], v0[19]);
  v0[23] = v2;
  v0[7] = v0 + 15;
  v0[2] = v0;
  v0[3] = LACPersistentStore.object<A>(forKey:);
  v3 = swift_continuation_init();
  v0[10] = MEMORY[0x24BDAC760];
  v4 = v0 + 10;
  v4[1] = 0x40000000;
  v4[2] = @objc completion handler block implementation for <A><A1>@escaping @callee_unowned @convention(block) (@unowned NSData?, @unowned NSError?) -> () with result type Data?;
  v4[3] = &block_descriptor_1;
  v4[4] = v3;
  objc_msgSend(v1, sel_dataForKey_completion_, v2, v4);
  return swift_continuation_await();
}

{
  uint64_t v0;

  *(_QWORD *)(*(_QWORD *)v0 + 192) = *(_QWORD *)(*(_QWORD *)v0 + 48);
  return swift_task_switch();
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(v0 + 120);
  v1 = *(_QWORD *)(v0 + 128);

  if (v1 >> 60 == 15)
  {
    v3 = 1;
  }
  else
  {
    type metadata accessor for JSONDecoder();
    swift_allocObject();
    JSONDecoder.init()();
    dispatch thunk of JSONDecoder.decode<A>(_:from:)();
    outlined consume of Data?(v2, v1);
    swift_release();
    v3 = 0;
  }
  (*(void (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(v0 + 160) - 8) + 56))(*(_QWORD *)(v0 + 136), v3, 1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  void *v1;

  v1 = *(void **)(v0 + 184);
  swift_willThrow();

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t @objc completion handler block implementation for <A><A1>@escaping @callee_unowned @convention(block) (@unowned NSData?, @unowned NSError?) -> () with result type Data?(uint64_t a1, void *a2, void *a3)
{
  uint64_t v3;
  _QWORD *v5;
  id v6;
  id v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  _QWORD v12[2];

  v3 = *(_QWORD *)(a1 + 32);
  if (a3)
  {
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
    swift_allocError();
    *v5 = a3;
    v6 = a3;
    return swift_continuation_throwingResumeWithError();
  }
  else
  {
    if (a2)
    {
      v8 = a2;
      v9 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
      v11 = v10;

    }
    else
    {
      v9 = 0;
      v11 = 0xF000000000000000;
    }
    v12[0] = v9;
    v12[1] = v11;
    outlined init with take of Data?((uint64_t)v12, *(_QWORD *)(*(_QWORD *)(v3 + 64) + 40));
    return swift_continuation_throwingResume();
  }
}

uint64_t outlined consume of Data?(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15)
    return outlined consume of Data._Representation(a1, a2);
  return a1;
}

uint64_t LACPersistentStore.set<A>(object:for:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  _QWORD *v7;

  v7[19] = a6;
  v7[20] = v6;
  v7[17] = a3;
  v7[18] = a5;
  v7[15] = a1;
  v7[16] = a2;
  return swift_task_switch();
}

uint64_t LACPersistentStore.set<A>(object:for:)()
{
  _QWORD *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  Class isa;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  type metadata accessor for JSONEncoder();
  swift_allocObject();
  JSONEncoder.init()();
  v0[21] = dispatch thunk of JSONEncoder.encode<A>(_:)();
  v0[22] = v1;
  v2 = (void *)v0[20];
  v4 = v0[16];
  v3 = v0[17];
  swift_release();
  isa = Data._bridgeToObjectiveC()().super.isa;
  v0[23] = isa;
  v6 = MEMORY[0x2426863FC](v4, v3);
  v0[24] = v6;
  v0[2] = v0;
  v0[3] = LACPersistentStore.set<A>(object:for:);
  v7 = swift_continuation_init();
  v0[10] = MEMORY[0x24BDAC760];
  v8 = v0 + 10;
  v8[1] = 0x40000000;
  v8[2] = @objc completion handler block implementation for <A><A1>@escaping @callee_unowned @convention(block) (@unowned NSError?) -> () with result type ();
  v8[3] = &block_descriptor_2;
  v8[4] = v7;
  objc_msgSend(v2, sel_setData_forKey_completion_, isa, v6, v8);
  return swift_continuation_await();
}

{
  uint64_t v0;

  *(_QWORD *)(*(_QWORD *)v0 + 200) = *(_QWORD *)(*(_QWORD *)v0 + 48);
  return swift_task_switch();
}

{
  uint64_t v0;
  void *v1;
  void *v2;

  v1 = *(void **)(v0 + 184);
  v2 = *(void **)(v0 + 192);
  outlined consume of Data._Representation(*(_QWORD *)(v0 + 168), *(_QWORD *)(v0 + 176));

  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  void *v1;
  unint64_t v2;
  void *v3;
  uint64_t v4;

  v1 = *(void **)(v0 + 192);
  v2 = *(_QWORD *)(v0 + 176);
  v3 = *(void **)(v0 + 184);
  v4 = *(_QWORD *)(v0 + 168);
  swift_willThrow();
  outlined consume of Data._Representation(v4, v2);

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t @objc completion handler block implementation for <A><A1>@escaping @callee_unowned @convention(block) (@unowned NSError?) -> () with result type ()(uint64_t a1, void *a2)
{
  _QWORD *v3;
  id v4;

  if (!a2)
    return swift_continuation_throwingResume();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
  swift_allocError();
  *v3 = a2;
  v4 = a2;
  return swift_continuation_throwingResumeWithError();
}

uint64_t outlined init with take of Data?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Data?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t LACDTOMutablePendingPolicyEvaluation.identifier.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC23LocalAuthenticationCore36LACDTOMutablePendingPolicyEvaluation_identifier);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t LACDTOMutablePendingPolicyEvaluation.isInvalidated.getter()
{
  uint64_t v0;
  unsigned __int8 *v1;

  v1 = (unsigned __int8 *)(v0
                         + OBJC_IVAR____TtC23LocalAuthenticationCore36LACDTOMutablePendingPolicyEvaluation_isInvalidated);
  swift_beginAccess();
  return *v1;
}

uint64_t LACDTOMutablePendingPolicyEvaluation.isInvalidated.setter(char a1)
{
  uint64_t v1;
  _BYTE *v3;
  uint64_t result;

  v3 = (_BYTE *)(v1 + OBJC_IVAR____TtC23LocalAuthenticationCore36LACDTOMutablePendingPolicyEvaluation_isInvalidated);
  result = swift_beginAccess();
  *v3 = a1;
  return result;
}

uint64_t (*LACDTOMutablePendingPolicyEvaluation.isInvalidated.modify())()
{
  swift_beginAccess();
  return LACDTOMutablePendingPolicyEvaluation.callbackReason.modify;
}

uint64_t LACDTOMutablePendingPolicyEvaluation.callbackReason.getter()
{
  return LACDTOMutablePendingPolicyEvaluation.callbackReason.getter(&OBJC_IVAR____TtC23LocalAuthenticationCore36LACDTOMutablePendingPolicyEvaluation_callbackReason);
}

uint64_t LACDTOMutablePendingPolicyEvaluation.callbackReason.setter(uint64_t a1, uint64_t a2)
{
  return LACDTOMutablePendingPolicyEvaluation.callbackReason.setter(a1, a2, &OBJC_IVAR____TtC23LocalAuthenticationCore36LACDTOMutablePendingPolicyEvaluation_callbackReason);
}

uint64_t (*LACDTOMutablePendingPolicyEvaluation.callbackReason.modify())()
{
  swift_beginAccess();
  return LACDTOMutablePendingPolicyEvaluation.callbackReason.modify;
}

uint64_t LACDTOMutablePendingPolicyEvaluation.callbackURL.getter@<X0>(uint64_t a1@<X8>)
{
  return LACDTOMutablePendingPolicyEvaluation.callbackURL.getter(&OBJC_IVAR____TtC23LocalAuthenticationCore36LACDTOMutablePendingPolicyEvaluation_callbackURL, &demangling cache variable for type metadata for URL?, a1);
}

uint64_t LACDTOMutablePendingPolicyEvaluation.callbackURL.setter(uint64_t a1)
{
  return LACDTOMutablePendingPolicyEvaluation.callbackURL.setter(a1, &OBJC_IVAR____TtC23LocalAuthenticationCore36LACDTOMutablePendingPolicyEvaluation_callbackURL, &demangling cache variable for type metadata for URL?);
}

uint64_t key path setter for LACDTOMutablePendingPolicyEvaluation.callbackURL : LACDTOMutablePendingPolicyEvaluation(uint64_t a1, _QWORD **a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v8;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of URL?(a1, (uint64_t)v6, &demangling cache variable for type metadata for URL?);
  return (*(uint64_t (**)(char *))((*MEMORY[0x24BEE4EA0] & **a2) + 0xC0))(v6);
}

uint64_t (*LACDTOMutablePendingPolicyEvaluation.callbackURL.modify())()
{
  swift_beginAccess();
  return LACDTOMutablePendingPolicyEvaluation.callbackURL.modify;
}

id @objc LACDTOMutablePendingPolicyEvaluation.callbackURL.getter(uint64_t a1, uint64_t a2, uint64_t *a3, _QWORD *a4, uint64_t (*a5)(_QWORD), uint64_t (*a6)(void))
{
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v19;

  v11 = __swift_instantiateConcreteTypeFromMangledName(a3);
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)&v19 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = a1 + *a4;
  swift_beginAccess();
  outlined init with copy of URL?(v14, (uint64_t)v13, a3);
  v15 = a5(0);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = 0;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v13, 1, v15) != 1)
  {
    v17 = (void *)a6();
    (*(void (**)(char *, uint64_t))(v16 + 8))(v13, v15);
  }
  return v17;
}

uint64_t LACDTOMutablePendingPolicyEvaluation.notificationScheduledAt.getter@<X0>(uint64_t a1@<X8>)
{
  return LACDTOMutablePendingPolicyEvaluation.callbackURL.getter(&OBJC_IVAR____TtC23LocalAuthenticationCore36LACDTOMutablePendingPolicyEvaluation_notificationScheduledAt, &demangling cache variable for type metadata for Date?, a1);
}

uint64_t LACDTOMutablePendingPolicyEvaluation.callbackURL.getter@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v6;

  v6 = v3 + *a1;
  swift_beginAccess();
  return outlined init with copy of URL?(v6, a3, a2);
}

void @objc LACDTOMutablePendingPolicyEvaluation.callbackURL.setter(void *a1, uint64_t a2, uint64_t a3, uint64_t *a4, void (*a5)(uint64_t), uint64_t (*a6)(_QWORD), _QWORD *a7)
{
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  uint64_t v20;

  v13 = __swift_instantiateConcreteTypeFromMangledName(a4);
  MEMORY[0x24BDAC7A8](v13);
  v15 = (char *)&v20 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a3)
  {
    a5(a3);
    v16 = a6(0);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(v15, 0, 1, v16);
  }
  else
  {
    v17 = a6(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(v15, 1, 1, v17);
  }
  v18 = (uint64_t)a1 + *a7;
  swift_beginAccess();
  v19 = a1;
  outlined assign with take of URL?((uint64_t)v15, v18, a4);
  swift_endAccess();

}

uint64_t LACDTOMutablePendingPolicyEvaluation.notificationScheduledAt.setter(uint64_t a1)
{
  return LACDTOMutablePendingPolicyEvaluation.callbackURL.setter(a1, &OBJC_IVAR____TtC23LocalAuthenticationCore36LACDTOMutablePendingPolicyEvaluation_notificationScheduledAt, &demangling cache variable for type metadata for Date?);
}

uint64_t LACDTOMutablePendingPolicyEvaluation.callbackURL.setter(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v6;

  v6 = v3 + *a2;
  swift_beginAccess();
  outlined assign with take of URL?(a1, v6, a3);
  return swift_endAccess();
}

uint64_t outlined assign with take of URL?(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 40))(a2, a1, v5);
  return a2;
}

uint64_t key path setter for LACDTOMutablePendingPolicyEvaluation.notificationScheduledAt : LACDTOMutablePendingPolicyEvaluation(uint64_t a1, _QWORD **a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v8;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of URL?(a1, (uint64_t)v6, &demangling cache variable for type metadata for Date?);
  return (*(uint64_t (**)(char *))((*MEMORY[0x24BEE4EA0] & **a2) + 0xD8))(v6);
}

uint64_t (*LACDTOMutablePendingPolicyEvaluation.notificationScheduledAt.modify())()
{
  swift_beginAccess();
  return LACDTOMutablePendingPolicyEvaluation.callbackReason.modify;
}

uint64_t LACDTOMutablePendingPolicyEvaluation.coolOffStarted.getter@<X0>(uint64_t a1@<X8>)
{
  return LACDTOMutablePendingPolicyEvaluation.callbackURL.getter(&OBJC_IVAR____TtC23LocalAuthenticationCore36LACDTOMutablePendingPolicyEvaluation_coolOffStarted, &demangling cache variable for type metadata for Date?, a1);
}

uint64_t LACDTOMutablePendingPolicyEvaluation.coolOffStarted.setter(uint64_t a1)
{
  return LACDTOMutablePendingPolicyEvaluation.callbackURL.setter(a1, &OBJC_IVAR____TtC23LocalAuthenticationCore36LACDTOMutablePendingPolicyEvaluation_coolOffStarted, &demangling cache variable for type metadata for Date?);
}

uint64_t key path setter for LACDTOMutablePendingPolicyEvaluation.coolOffStarted : LACDTOMutablePendingPolicyEvaluation(uint64_t a1, _QWORD **a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v8;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of URL?(a1, (uint64_t)v6, &demangling cache variable for type metadata for Date?);
  return (*(uint64_t (**)(char *))((*MEMORY[0x24BEE4EA0] & **a2) + 0xF0))(v6);
}

uint64_t (*LACDTOMutablePendingPolicyEvaluation.coolOffStarted.modify())()
{
  swift_beginAccess();
  return LACDTOMutablePendingPolicyEvaluation.callbackReason.modify;
}

id @objc LACDTOMutablePendingPolicyEvaluation.callbackReason.getter(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;

  v3 = (uint64_t *)(a1 + *a3);
  swift_beginAccess();
  v4 = v3[1];
  if (!v4)
    return 0;
  v5 = *v3;
  swift_bridgeObjectRetain();
  v6 = (void *)MEMORY[0x2426863FC](v5, v4);
  swift_bridgeObjectRelease();
  return v6;
}

uint64_t LACDTOMutablePendingPolicyEvaluation.ratchetUUID.getter()
{
  return LACDTOMutablePendingPolicyEvaluation.callbackReason.getter(&OBJC_IVAR____TtC23LocalAuthenticationCore36LACDTOMutablePendingPolicyEvaluation_ratchetUUID);
}

uint64_t LACDTOMutablePendingPolicyEvaluation.callbackReason.getter(_QWORD *a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;

  v2 = (uint64_t *)(v1 + *a1);
  swift_beginAccess();
  v3 = *v2;
  swift_bridgeObjectRetain();
  return v3;
}

uint64_t @objc LACDTOMutablePendingPolicyEvaluation.callbackReason.setter(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;

  if (a3)
  {
    v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v8 = v7;
  }
  else
  {
    v6 = 0;
    v8 = 0;
  }
  v9 = (uint64_t *)(a1 + *a4);
  swift_beginAccess();
  *v9 = v6;
  v9[1] = v8;
  return swift_bridgeObjectRelease();
}

uint64_t LACDTOMutablePendingPolicyEvaluation.ratchetUUID.setter(uint64_t a1, uint64_t a2)
{
  return LACDTOMutablePendingPolicyEvaluation.callbackReason.setter(a1, a2, &OBJC_IVAR____TtC23LocalAuthenticationCore36LACDTOMutablePendingPolicyEvaluation_ratchetUUID);
}

uint64_t LACDTOMutablePendingPolicyEvaluation.callbackReason.setter(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  _QWORD *v6;

  v6 = (_QWORD *)(v3 + *a3);
  swift_beginAccess();
  *v6 = a1;
  v6[1] = a2;
  return swift_bridgeObjectRelease();
}

uint64_t (*LACDTOMutablePendingPolicyEvaluation.ratchetUUID.modify())()
{
  swift_beginAccess();
  return LACDTOMutablePendingPolicyEvaluation.callbackReason.modify;
}

uint64_t LACDTOMutablePendingPolicyEvaluation.hasNotifiedUserAboutCompletion.getter()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char v12;
  void (*v13)(char *, uint64_t);
  uint64_t v15;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  MEMORY[0x24BDAC7A8](v1);
  v3 = (char *)&v15 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for Date();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = MEMORY[0x24BDAC7A8](v6);
  v11 = (char *)&v15 - v10;
  (*(void (**)(uint64_t))((*MEMORY[0x24BEE4EA0] & *v0) + 0xD0))(v9);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v3, 1, v4) == 1)
  {
    outlined destroy of AsyncStream<()>.Continuation?((uint64_t)v3, &demangling cache variable for type metadata for Date?);
    v12 = 0;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v11, v3, v4);
    static Date.now.getter();
    v12 = static Date.< infix(_:_:)();
    v13 = *(void (**)(char *, uint64_t))(v5 + 8);
    v13(v8, v4);
    v13(v11, v4);
  }
  return v12 & 1;
}

id LACDTOMutablePendingPolicyEvaluation.__allocating_init(identifier:)(uint64_t a1, uint64_t a2)
{
  objc_class *v2;
  _BYTE *v5;
  _QWORD *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  void (*v11)(char *, uint64_t, uint64_t, uint64_t);
  _QWORD *v12;
  _QWORD *v13;
  objc_super v15;

  v5 = objc_allocWithZone(v2);
  v5[OBJC_IVAR____TtC23LocalAuthenticationCore36LACDTOMutablePendingPolicyEvaluation_isInvalidated] = 0;
  v6 = &v5[OBJC_IVAR____TtC23LocalAuthenticationCore36LACDTOMutablePendingPolicyEvaluation_callbackReason];
  *v6 = 0;
  v6[1] = 0;
  v7 = &v5[OBJC_IVAR____TtC23LocalAuthenticationCore36LACDTOMutablePendingPolicyEvaluation_callbackURL];
  v8 = type metadata accessor for URL();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(v7, 1, 1, v8);
  v9 = &v5[OBJC_IVAR____TtC23LocalAuthenticationCore36LACDTOMutablePendingPolicyEvaluation_notificationScheduledAt];
  v10 = type metadata accessor for Date();
  v11 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56);
  v11(v9, 1, 1, v10);
  v11(&v5[OBJC_IVAR____TtC23LocalAuthenticationCore36LACDTOMutablePendingPolicyEvaluation_coolOffStarted], 1, 1, v10);
  v12 = &v5[OBJC_IVAR____TtC23LocalAuthenticationCore36LACDTOMutablePendingPolicyEvaluation_ratchetUUID];
  *v12 = 0;
  v12[1] = 0;
  v13 = &v5[OBJC_IVAR____TtC23LocalAuthenticationCore36LACDTOMutablePendingPolicyEvaluation_identifier];
  *v13 = a1;
  v13[1] = a2;
  v15.receiver = v5;
  v15.super_class = v2;
  return objc_msgSendSuper2(&v15, sel_init);
}

id LACDTOMutablePendingPolicyEvaluation.init(identifier:)(uint64_t a1, uint64_t a2)
{
  _BYTE *v2;
  _QWORD *v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, uint64_t, uint64_t, uint64_t);
  _QWORD *v11;
  _QWORD *v12;
  objc_super v14;

  v2[OBJC_IVAR____TtC23LocalAuthenticationCore36LACDTOMutablePendingPolicyEvaluation_isInvalidated] = 0;
  v5 = &v2[OBJC_IVAR____TtC23LocalAuthenticationCore36LACDTOMutablePendingPolicyEvaluation_callbackReason];
  *v5 = 0;
  v5[1] = 0;
  v6 = &v2[OBJC_IVAR____TtC23LocalAuthenticationCore36LACDTOMutablePendingPolicyEvaluation_callbackURL];
  v7 = type metadata accessor for URL();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v6, 1, 1, v7);
  v8 = &v2[OBJC_IVAR____TtC23LocalAuthenticationCore36LACDTOMutablePendingPolicyEvaluation_notificationScheduledAt];
  v9 = type metadata accessor for Date();
  v10 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56);
  v10(v8, 1, 1, v9);
  v10(&v2[OBJC_IVAR____TtC23LocalAuthenticationCore36LACDTOMutablePendingPolicyEvaluation_coolOffStarted], 1, 1, v9);
  v11 = &v2[OBJC_IVAR____TtC23LocalAuthenticationCore36LACDTOMutablePendingPolicyEvaluation_ratchetUUID];
  *v11 = 0;
  v11[1] = 0;
  v12 = &v2[OBJC_IVAR____TtC23LocalAuthenticationCore36LACDTOMutablePendingPolicyEvaluation_identifier];
  *v12 = a1;
  v12[1] = a2;
  v14.receiver = v2;
  v14.super_class = (Class)type metadata accessor for LACDTOMutablePendingPolicyEvaluation();
  return objc_msgSendSuper2(&v14, sel_init);
}

uint64_t type metadata accessor for LACDTOMutablePendingPolicyEvaluation()
{
  uint64_t result;

  result = type metadata singleton initialization cache for LACDTOMutablePendingPolicyEvaluation;
  if (!type metadata singleton initialization cache for LACDTOMutablePendingPolicyEvaluation)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t LACDTOMutablePendingPolicyEvaluation.isNotificationScheduled(for:)(char *a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char v29;
  void (*v30)(char *, char *, uint64_t);
  uint64_t v31;
  uint64_t result;
  uint64_t v33;
  char *v34;
  void (*v35)(char *, char *, uint64_t);
  void (*v36)(char *, char *, uint64_t);
  char *v37;
  char *v38;
  uint64_t v39;
  char *v40;
  void (*v41)(char *, uint64_t);
  char *v42;
  uint64_t v43;
  char *v44;
  char *v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  char *v50;
  char *v51;
  char *v52;
  uint64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  char *v57;
  char *v58;
  char *v59;

  v58 = a1;
  v56 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (lower: Date, upper: Date));
  v2 = MEMORY[0x24BDAC7A8](v56);
  v55 = (char *)&v48 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v48 - v4;
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ClosedRange<Date>);
  v7 = MEMORY[0x24BDAC7A8](v6);
  v59 = (char *)&v48 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = MEMORY[0x24BDAC7A8](v7);
  v54 = (char *)&v48 - v10;
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v48 - v11;
  v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  MEMORY[0x24BDAC7A8](v13);
  v15 = (char *)&v48 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for Date();
  v17 = *(_QWORD *)(v16 - 8);
  v18 = MEMORY[0x24BDAC7A8](v16);
  v57 = (char *)&v48 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = MEMORY[0x24BDAC7A8](v18);
  v22 = (char *)&v48 - v21;
  v23 = MEMORY[0x24BDAC7A8](v20);
  v25 = (char *)&v48 - v24;
  v26 = MEMORY[0x24BDAC7A8](v23);
  v28 = (char *)&v48 - v27;
  (*(void (**)(uint64_t))((*MEMORY[0x24BEE4EA0] & *v1) + 0xD0))(v26);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16) == 1)
  {
    outlined destroy of AsyncStream<()>.Continuation?((uint64_t)v15, &demangling cache variable for type metadata for Date?);
    v29 = 0;
    return v29 & 1;
  }
  v52 = v12;
  v53 = v6;
  v30 = *(void (**)(char *, char *, uint64_t))(v17 + 32);
  v30(v28, v15, v16);
  Date.addingTimeInterval(_:)();
  Date.addingTimeInterval(_:)();
  v31 = lazy protocol witness table accessor for type LACPolicy and conformance LACPolicy(&lazy protocol witness table cache variable for type Date and conformance Date, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], MEMORY[0x24BDCE948]);
  result = dispatch thunk of static Comparable.<= infix(_:_:)();
  if ((result & 1) != 0)
  {
    v49 = v28;
    v50 = v25;
    v33 = v56;
    v34 = &v5[*(int *)(v56 + 48)];
    v35 = v30;
    v36 = *(void (**)(char *, char *, uint64_t))(v17 + 16);
    v36(v5, v25, v16);
    v51 = v22;
    v36(v34, v22, v16);
    v37 = v55;
    v38 = &v55[*(int *)(v33 + 48)];
    v36(v55, v5, v16);
    v36(v38, v34, v16);
    v48 = v31;
    v39 = (uint64_t)v54;
    v35(v54, v37, v16);
    v40 = v38;
    v41 = *(void (**)(char *, uint64_t))(v17 + 8);
    v41(v40, v16);
    v42 = &v37[*(int *)(v33 + 48)];
    v35(v37, v5, v16);
    v35(v42, v34, v16);
    v35((char *)(v39 + *(int *)(v53 + 36)), v42, v16);
    v41(v37, v16);
    v43 = (uint64_t)v52;
    outlined init with take of ClosedRange<Date>(v39, (uint64_t)v52);
    v44 = v58;
    LOBYTE(v42) = dispatch thunk of static Comparable.>= infix(_:_:)();
    v45 = v57;
    v46 = v44;
    v47 = (uint64_t)v59;
    v36(v57, v46, v16);
    outlined init with copy of URL?(v43, v47, &demangling cache variable for type metadata for ClosedRange<Date>);
    if ((v42 & 1) != 0)
      v29 = dispatch thunk of static Comparable.<= infix(_:_:)();
    else
      v29 = 0;
    outlined destroy of AsyncStream<()>.Continuation?(v47, &demangling cache variable for type metadata for ClosedRange<Date>);
    v41(v45, v16);
    outlined destroy of AsyncStream<()>.Continuation?(v43, &demangling cache variable for type metadata for ClosedRange<Date>);
    v41(v51, v16);
    v41(v50, v16);
    v41(v49, v16);
    return v29 & 1;
  }
  __break(1u);
  return result;
}

uint64_t outlined init with take of ClosedRange<Date>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ClosedRange<Date>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

id LACDTOMutablePendingPolicyEvaluation.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

void LACDTOMutablePendingPolicyEvaluation.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

uint64_t LACDTOMutablePendingPolicyEvaluation.CodingKeys.stringValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_240A25A80 + 4 * byte_240A7CC70[a1]))(0xD000000000000017, 0x8000000240A83740);
}

uint64_t sub_240A25A80()
{
  return 0x696669746E656469;
}

uint64_t sub_240A25A9C()
{
  return 0x696C61766E497369;
}

uint64_t sub_240A25AC0()
{
  return 0x6B6361626C6C6163;
}

uint64_t sub_240A25AF4()
{
  return 0x5366664F6C6F6F63;
}

uint64_t sub_240A25B18()
{
  return 0x5574656863746172;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance LACDTOMutablePendingPolicyEvaluation.CodingKeys(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance LACDTOMutablePendingPolicyEvaluation.CodingKeys()
{
  unsigned __int8 *v0;
  Swift::UInt v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance LACDTOMutablePendingPolicyEvaluation.CodingKeys()
{
  unsigned __int8 *v0;

  Hasher._combine(_:)(*v0);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance LACDTOMutablePendingPolicyEvaluation.CodingKeys()
{
  unsigned __int8 *v0;
  Swift::UInt v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance LACDTOMutablePendingPolicyEvaluation.CodingKeys()
{
  unsigned __int8 *v0;

  return LACDTOMutablePendingPolicyEvaluation.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance LACDTOMutablePendingPolicyEvaluation.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = specialized LACDTOMutablePendingPolicyEvaluation.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CodingKey.intValue.getter in conformance LACDTOMutablePendingPolicyEvaluation.CodingKeys()
{
  return 0;
}

void protocol witness for CodingKey.init(intValue:) in conformance LACDTOMutablePendingPolicyEvaluation.CodingKeys(_BYTE *a1@<X8>)
{
  *a1 = 7;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance LACDTOMutablePendingPolicyEvaluation.CodingKeys()
{
  lazy protocol witness table accessor for type LACDTOMutablePendingPolicyEvaluation.CodingKeys and conformance LACDTOMutablePendingPolicyEvaluation.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance LACDTOMutablePendingPolicyEvaluation.CodingKeys()
{
  lazy protocol witness table accessor for type LACDTOMutablePendingPolicyEvaluation.CodingKeys and conformance LACDTOMutablePendingPolicyEvaluation.CodingKeys();
  return CodingKey.debugDescription.getter();
}

id LACDTOMutablePendingPolicyEvaluation.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for LACDTOMutablePendingPolicyEvaluation();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t LACDTOMutablePendingPolicyEvaluation.encode(to:)(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  _QWORD *v20;
  void (*v21)(uint64_t);
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  char *v32;
  uint64_t v33;
  char v34;
  char v35;
  char v36;
  char v37;
  char v38;
  char v39;
  char v40;

  v2 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  v5 = MEMORY[0x24BDAC7A8](v4);
  v32 = (char *)&v30 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v30 - v7;
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)&v30 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<LACDTOMutablePendingPolicyEvaluation.CodingKeys>);
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x24BDAC7A8](v12);
  v15 = (char *)&v30 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type LACDTOMutablePendingPolicyEvaluation.CodingKeys and conformance LACDTOMutablePendingPolicyEvaluation.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v40 = 0;
  v16 = v33;
  v17 = KeyedEncodingContainer.encode(_:forKey:)();
  if (v16)
    return (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v15, v12);
  (*(void (**)(uint64_t))((*MEMORY[0x24BEE4EA0] & *v2) + 0x88))(v17);
  v39 = 1;
  v19 = KeyedEncodingContainer.encode(_:forKey:)();
  v20 = (_QWORD *)MEMORY[0x24BEE4EA0];
  v21 = *(void (**)(uint64_t))((*MEMORY[0x24BEE4EA0] & *v2) + 0xA0);
  v31 = v2;
  v21(v19);
  v38 = 2;
  v33 = v12;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  v30 = v13;
  v22 = swift_bridgeObjectRelease();
  v23 = v31;
  (*(void (**)(uint64_t))((*v20 & *v31) + 0xB8))(v22);
  v37 = 3;
  type metadata accessor for URL();
  lazy protocol witness table accessor for type LACPolicy and conformance LACPolicy(&lazy protocol witness table cache variable for type URL and conformance URL, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], MEMORY[0x24BDCDAE0]);
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  v24 = outlined destroy of AsyncStream<()>.Continuation?((uint64_t)v11, &demangling cache variable for type metadata for URL?);
  (*(void (**)(uint64_t))((*v20 & *v23) + 0xD0))(v24);
  v36 = 4;
  type metadata accessor for Date();
  lazy protocol witness table accessor for type LACPolicy and conformance LACPolicy(&lazy protocol witness table cache variable for type Date and conformance Date, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], MEMORY[0x24BDCE920]);
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  v25 = outlined destroy of AsyncStream<()>.Continuation?((uint64_t)v8, &demangling cache variable for type metadata for Date?);
  v26 = (uint64_t)v32;
  v27 = (_QWORD *)MEMORY[0x24BEE4EA0];
  (*(void (**)(uint64_t))((*MEMORY[0x24BEE4EA0] & *v31) + 0xE8))(v25);
  v35 = 5;
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  v28 = outlined destroy of AsyncStream<()>.Continuation?(v26, &demangling cache variable for type metadata for Date?);
  (*(void (**)(uint64_t))((*v27 & *v31) + 0x100))(v28);
  v34 = 6;
  v29 = v33;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v30 + 8))(v15, v29);
  return swift_bridgeObjectRelease();
}

unint64_t lazy protocol witness table accessor for type LACDTOMutablePendingPolicyEvaluation.CodingKeys and conformance LACDTOMutablePendingPolicyEvaluation.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type LACDTOMutablePendingPolicyEvaluation.CodingKeys and conformance LACDTOMutablePendingPolicyEvaluation.CodingKeys;
  if (!lazy protocol witness table cache variable for type LACDTOMutablePendingPolicyEvaluation.CodingKeys and conformance LACDTOMutablePendingPolicyEvaluation.CodingKeys)
  {
    result = MEMORY[0x242687614](&protocol conformance descriptor for LACDTOMutablePendingPolicyEvaluation.CodingKeys, &unk_2510BFE30);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LACDTOMutablePendingPolicyEvaluation.CodingKeys and conformance LACDTOMutablePendingPolicyEvaluation.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type LACDTOMutablePendingPolicyEvaluation.CodingKeys and conformance LACDTOMutablePendingPolicyEvaluation.CodingKeys;
  if (!lazy protocol witness table cache variable for type LACDTOMutablePendingPolicyEvaluation.CodingKeys and conformance LACDTOMutablePendingPolicyEvaluation.CodingKeys)
  {
    result = MEMORY[0x242687614](&protocol conformance descriptor for LACDTOMutablePendingPolicyEvaluation.CodingKeys, &unk_2510BFE30);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LACDTOMutablePendingPolicyEvaluation.CodingKeys and conformance LACDTOMutablePendingPolicyEvaluation.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type LACDTOMutablePendingPolicyEvaluation.CodingKeys and conformance LACDTOMutablePendingPolicyEvaluation.CodingKeys;
  if (!lazy protocol witness table cache variable for type LACDTOMutablePendingPolicyEvaluation.CodingKeys and conformance LACDTOMutablePendingPolicyEvaluation.CodingKeys)
  {
    result = MEMORY[0x242687614](&protocol conformance descriptor for LACDTOMutablePendingPolicyEvaluation.CodingKeys, &unk_2510BFE30);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LACDTOMutablePendingPolicyEvaluation.CodingKeys and conformance LACDTOMutablePendingPolicyEvaluation.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type LACDTOMutablePendingPolicyEvaluation.CodingKeys and conformance LACDTOMutablePendingPolicyEvaluation.CodingKeys;
  if (!lazy protocol witness table cache variable for type LACDTOMutablePendingPolicyEvaluation.CodingKeys and conformance LACDTOMutablePendingPolicyEvaluation.CodingKeys)
  {
    result = MEMORY[0x242687614](&protocol conformance descriptor for LACDTOMutablePendingPolicyEvaluation.CodingKeys, &unk_2510BFE30);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LACDTOMutablePendingPolicyEvaluation.CodingKeys and conformance LACDTOMutablePendingPolicyEvaluation.CodingKeys);
  }
  return result;
}

id LACDTOMutablePendingPolicyEvaluation.__allocating_init(from:)(_QWORD *a1)
{
  objc_class *v1;
  id v3;

  v3 = objc_allocWithZone(v1);
  return LACDTOMutablePendingPolicyEvaluation.init(from:)(a1);
}

id LACDTOMutablePendingPolicyEvaluation.init(from:)(_QWORD *a1)
{
  _BYTE *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t *v11;
  char *v12;
  uint64_t v13;
  void (*v14)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  void (*v17)(void);
  _QWORD *v18;
  char *v19;
  uint64_t v20;
  _BYTE *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v27;
  uint64_t *v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  objc_class *v47;
  id v48;
  uint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  _BYTE *v53;
  char *v54;
  uint64_t v55;
  char *v56;
  _QWORD *v57;
  _QWORD *v58;
  uint64_t v59;
  uint64_t *v60;
  uint64_t v61;
  _BYTE *v62;
  objc_super v63;
  char v64;
  char v65;
  char v66;
  uint64_t v67;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  v4 = MEMORY[0x24BDAC7A8](v3);
  v50 = (char *)&v49 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v4);
  v51 = (char *)&v49 - v6;
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  MEMORY[0x24BDAC7A8](v7);
  v54 = (char *)&v49 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v55 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<LACDTOMutablePendingPolicyEvaluation.CodingKeys>);
  v52 = *(_QWORD *)(v55 - 8);
  MEMORY[0x24BDAC7A8](v55);
  v10 = (char *)&v49 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v53 = &v1[OBJC_IVAR____TtC23LocalAuthenticationCore36LACDTOMutablePendingPolicyEvaluation_isInvalidated];
  v1[OBJC_IVAR____TtC23LocalAuthenticationCore36LACDTOMutablePendingPolicyEvaluation_isInvalidated] = 0;
  v11 = (uint64_t *)&v1[OBJC_IVAR____TtC23LocalAuthenticationCore36LACDTOMutablePendingPolicyEvaluation_callbackReason];
  *v11 = 0;
  v11[1] = 0;
  v60 = v11;
  v12 = &v1[OBJC_IVAR____TtC23LocalAuthenticationCore36LACDTOMutablePendingPolicyEvaluation_callbackURL];
  v13 = type metadata accessor for URL();
  v14 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56);
  v59 = (uint64_t)v12;
  v14(v12, 1, 1, v13);
  v15 = (uint64_t)&v1[OBJC_IVAR____TtC23LocalAuthenticationCore36LACDTOMutablePendingPolicyEvaluation_notificationScheduledAt];
  v16 = type metadata accessor for Date();
  v17 = *(void (**)(void))(*(_QWORD *)(v16 - 8) + 56);
  v67 = v15;
  ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v17)(v15, 1, 1, v16);
  v62 = &v1[OBJC_IVAR____TtC23LocalAuthenticationCore36LACDTOMutablePendingPolicyEvaluation_coolOffStarted];
  v17();
  v18 = &v1[OBJC_IVAR____TtC23LocalAuthenticationCore36LACDTOMutablePendingPolicyEvaluation_ratchetUUID];
  *v18 = 0;
  v18[1] = 0;
  v57 = v18;
  v58 = a1;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type LACDTOMutablePendingPolicyEvaluation.CodingKeys and conformance LACDTOMutablePendingPolicyEvaluation.CodingKeys();
  v19 = v1;
  v56 = v10;
  v20 = v61;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v20)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v58);
    v25 = v59;
    v48 = v57;
    swift_bridgeObjectRelease();
    outlined destroy of AsyncStream<()>.Continuation?(v25, &demangling cache variable for type metadata for URL?);
    outlined destroy of AsyncStream<()>.Continuation?(v67, &demangling cache variable for type metadata for Date?);
    outlined destroy of AsyncStream<()>.Continuation?((uint64_t)v62, &demangling cache variable for type metadata for Date?);

    swift_bridgeObjectRelease();
    type metadata accessor for LACDTOMutablePendingPolicyEvaluation();
    swift_deallocPartialClassInstance();
  }
  else
  {
    v21 = v53;
    v22 = (uint64_t)v54;
    v61 = v13;
    v49 = v16;
    v66 = 0;
    v23 = v55;
    v24 = KeyedDecodingContainer.decode(_:forKey:)();
    v27 = v19;
    v28 = (uint64_t *)&v19[OBJC_IVAR____TtC23LocalAuthenticationCore36LACDTOMutablePendingPolicyEvaluation_identifier];
    *v28 = v24;
    v28[1] = v29;
    v66 = 1;
    v30 = KeyedDecodingContainer.decode(_:forKey:)();
    swift_beginAccess();
    *v21 = v30 & 1;
    v65 = 2;
    v31 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    v32 = v60;
    v33 = v31;
    v35 = v34;
    swift_beginAccess();
    *v32 = v33;
    v32[1] = v35;
    swift_bridgeObjectRelease();
    v64 = 3;
    lazy protocol witness table accessor for type LACPolicy and conformance LACPolicy(&lazy protocol witness table cache variable for type URL and conformance URL, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], MEMORY[0x24BDCDB10]);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    v36 = v59;
    swift_beginAccess();
    outlined assign with take of URL?(v22, v36, &demangling cache variable for type metadata for URL?);
    swift_endAccess();
    v64 = 4;
    lazy protocol witness table accessor for type LACPolicy and conformance LACPolicy((unint64_t *)&lazy protocol witness table cache variable for type Date and conformance Date, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], MEMORY[0x24BDCE960]);
    v37 = (uint64_t)v51;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    v38 = v67;
    swift_beginAccess();
    outlined assign with take of URL?(v37, v38, &demangling cache variable for type metadata for Date?);
    swift_endAccess();
    v64 = 5;
    v39 = (uint64_t)v50;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    v40 = (uint64_t)v62;
    swift_beginAccess();
    outlined assign with take of URL?(v39, v40, &demangling cache variable for type metadata for Date?);
    swift_endAccess();
    v64 = 6;
    v41 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    v42 = v52;
    v43 = v41;
    v45 = v44;
    v46 = v57;
    swift_beginAccess();
    *v46 = v43;
    v46[1] = v45;

    swift_bridgeObjectRelease();
    v47 = (objc_class *)type metadata accessor for LACDTOMutablePendingPolicyEvaluation();
    v63.receiver = v27;
    v63.super_class = v47;
    v48 = objc_msgSendSuper2(&v63, sel_init);
    (*(void (**)(char *, uint64_t))(v42 + 8))(v56, v23);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v58);
  }
  return v48;
}

uint64_t protocol witness for Decodable.init(from:) in conformance LACDTOMutablePendingPolicyEvaluation@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t result;

  result = (*(uint64_t (**)(void))(v1 + 312))();
  if (!v2)
    *a1 = result;
  return result;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance LACDTOMutablePendingPolicyEvaluation()
{
  _QWORD **v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & **v0) + 0x130))();
}

uint64_t LACDTOMutablePendingPolicyEvaluation.description.getter()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  objc_class *v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  Swift::String v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  char v22;
  BOOL v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  void *v32;
  Swift::String v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  void *v39;
  Swift::String v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  void *v45;
  Swift::String v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void *v50;
  void *v51;
  Swift::String v52;
  uint64_t v53;
  uint64_t v54;
  void (*v55)(uint64_t);
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t (*v59)(uint64_t, uint64_t, uint64_t);
  int v60;
  uint64_t v61;
  void *v62;
  uint64_t v63;
  char *v64;
  uint64_t result;
  void *v66;
  Class isa;
  id v68;
  void *v69;
  Swift::String v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  _QWORD v79[2];
  objc_super v80;

  v1 = v0;
  v75 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  v2 = MEMORY[0x24BDAC7A8](v75);
  v73 = (char *)&v73 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = MEMORY[0x24BDAC7A8](v2);
  v76 = (char *)&v73 - v5;
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v73 - v6;
  v74 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  MEMORY[0x24BDAC7A8](v74);
  v9 = (char *)&v73 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
  v10 = swift_allocObject();
  *(_OWORD *)(v10 + 16) = xmmword_240A7CEB0;
  v11 = (objc_class *)type metadata accessor for LACDTOMutablePendingPolicyEvaluation();
  v80.receiver = v0;
  v80.super_class = v11;
  v12 = objc_msgSendSuper2(&v80, sel_description);
  v13 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v15 = v14;

  *(_QWORD *)(v10 + 32) = v13;
  *(_QWORD *)(v10 + 40) = v15;
  strcpy((char *)v79, "identifier: ");
  BYTE5(v79[1]) = 0;
  HIWORD(v79[1]) = -5120;
  v16 = *(_QWORD *)((char *)v1
                  + OBJC_IVAR____TtC23LocalAuthenticationCore36LACDTOMutablePendingPolicyEvaluation_identifier);
  v17 = *(void **)((char *)v1
                 + OBJC_IVAR____TtC23LocalAuthenticationCore36LACDTOMutablePendingPolicyEvaluation_identifier
                 + 8);
  swift_bridgeObjectRetain();
  v18._countAndFlagsBits = v16;
  v18._object = v17;
  String.append(_:)(v18);
  swift_bridgeObjectRelease();
  v19 = v79[1];
  *(_QWORD *)(v10 + 48) = v79[0];
  *(_QWORD *)(v10 + 56) = v19;
  v79[0] = 0;
  v79[1] = 0xE000000000000000;
  _StringGuts.grow(_:)(17);
  v20 = swift_bridgeObjectRelease();
  v79[0] = 0x696C61766E497369;
  v79[1] = 0xEF203A6465746164;
  v21 = (_QWORD *)MEMORY[0x24BEE4EA0];
  v22 = (*(uint64_t (**)(uint64_t))((*MEMORY[0x24BEE4EA0] & *v1) + 0x88))(v20);
  v23 = (v22 & 1) == 0;
  if ((v22 & 1) != 0)
    v24 = 1702195828;
  else
    v24 = 0x65736C6166;
  if (v23)
    v25 = 0xE500000000000000;
  else
    v25 = 0xE400000000000000;
  v26 = v25;
  String.append(_:)(*(Swift::String *)&v24);
  v27 = swift_bridgeObjectRelease();
  v28 = v79[1];
  *(_QWORD *)(v10 + 64) = v79[0];
  *(_QWORD *)(v10 + 72) = v28;
  v79[0] = 0x203A64697575;
  v79[1] = 0xE600000000000000;
  v77 = (*(uint64_t (**)(uint64_t))((*v21 & *v1) + 0x100))(v27);
  v78 = v29;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for String?);
  v30 = Optional.debugDescription.getter();
  v32 = v31;
  swift_bridgeObjectRelease();
  v33._countAndFlagsBits = v30;
  v33._object = v32;
  String.append(_:)(v33);
  swift_bridgeObjectRelease();
  v34 = v79[1];
  *(_QWORD *)(v10 + 80) = v79[0];
  *(_QWORD *)(v10 + 88) = v34;
  v79[0] = 0;
  v79[1] = 0xE000000000000000;
  _StringGuts.grow(_:)(18);
  v35 = swift_bridgeObjectRelease();
  v79[0] = 0xD000000000000010;
  v79[1] = 0x8000000240A83650;
  v77 = (*(uint64_t (**)(uint64_t))((*v21 & *v1) + 0xA0))(v35);
  v78 = v36;
  v37 = Optional.debugDescription.getter();
  v39 = v38;
  swift_bridgeObjectRelease();
  v40._countAndFlagsBits = v37;
  v40._object = v39;
  String.append(_:)(v40);
  v41 = swift_bridgeObjectRelease();
  v42 = v79[1];
  *(_QWORD *)(v10 + 96) = v79[0];
  *(_QWORD *)(v10 + 104) = v42;
  strcpy((char *)v79, "callbackURL: ");
  HIWORD(v79[1]) = -4864;
  (*(void (**)(uint64_t))((*v21 & *v1) + 0xB8))(v41);
  v43 = Optional.debugDescription.getter();
  v45 = v44;
  outlined destroy of AsyncStream<()>.Continuation?((uint64_t)v9, &demangling cache variable for type metadata for URL?);
  v46._countAndFlagsBits = v43;
  v46._object = v45;
  String.append(_:)(v46);
  swift_bridgeObjectRelease();
  v47 = v79[1];
  *(_QWORD *)(v10 + 112) = v79[0];
  *(_QWORD *)(v10 + 120) = v47;
  v79[0] = 0;
  v79[1] = 0xE000000000000000;
  _StringGuts.grow(_:)(27);
  v48 = swift_bridgeObjectRelease();
  v79[0] = 0xD000000000000019;
  v79[1] = 0x8000000240A83670;
  (*(void (**)(uint64_t))((*v21 & *v1) + 0xD0))(v48);
  v49 = Optional.debugDescription.getter();
  v51 = v50;
  outlined destroy of AsyncStream<()>.Continuation?((uint64_t)v7, &demangling cache variable for type metadata for Date?);
  v52._countAndFlagsBits = v49;
  v52._object = v51;
  String.append(_:)(v52);
  swift_bridgeObjectRelease();
  v53 = v79[1];
  *(_QWORD *)(v10 + 128) = v79[0];
  *(_QWORD *)(v10 + 136) = v53;
  v79[0] = 0;
  v79[1] = 0xE000000000000000;
  _StringGuts.grow(_:)(18);
  v54 = swift_bridgeObjectRelease();
  v79[0] = 0xD000000000000010;
  v79[1] = 0x8000000240A83690;
  v55 = *(void (**)(uint64_t))((*v21 & *v1) + 0xE8);
  v56 = (uint64_t)v76;
  v55(v54);
  v57 = type metadata accessor for Date();
  v58 = *(_QWORD *)(v57 - 8);
  v59 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v58 + 48);
  v60 = v59(v56, 1, v57);
  v61 = outlined destroy of AsyncStream<()>.Continuation?(v56, &demangling cache variable for type metadata for Date?);
  if (v60 == 1)
  {
    v62 = (void *)0xE300000000000000;
    v63 = 7104878;
LABEL_11:
    v70._countAndFlagsBits = v63;
    v70._object = v62;
    String.append(_:)(v70);
    swift_bridgeObjectRelease();
    v71 = v79[1];
    *(_QWORD *)(v10 + 144) = v79[0];
    *(_QWORD *)(v10 + 152) = v71;
    v79[0] = v10;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [String]);
    lazy protocol witness table accessor for type [String] and conformance [A]();
    v72 = BidirectionalCollection<>.joined(separator:)();
    swift_bridgeObjectRelease();
    return v72;
  }
  v64 = v73;
  v55(v61);
  result = v59((uint64_t)v64, 1, v57);
  if ((_DWORD)result != 1)
  {
    v66 = (void *)objc_opt_self();
    isa = Date._bridgeToObjectiveC()().super.isa;
    (*(void (**)(char *, uint64_t))(v58 + 8))(v64, v57);
    v68 = objc_msgSend(v66, sel_localizedStringFromDate_dateStyle_timeStyle_, isa, 0, 3);

    v63 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v62 = v69;

    goto LABEL_11;
  }
  __break(1u);
  return result;
}

unint64_t lazy protocol witness table accessor for type [String] and conformance [A]()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type [String] and conformance [A];
  if (!lazy protocol witness table cache variable for type [String] and conformance [A])
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract((uint64_t *)&demangling cache variable for type metadata for [String]);
    result = MEMORY[0x242687614](MEMORY[0x24BEE12B0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [String] and conformance [A]);
  }
  return result;
}

uint64_t LACDTOMutablePendingPolicyEvaluation.isEqual(_:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  id v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  id v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char v52;
  _QWORD *v53;
  id v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unsigned int (*v60)(uint64_t, uint64_t, uint64_t);
  uint64_t v61;
  uint64_t v62;
  uint64_t *v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  char *v67;
  char v68;
  void (*v69)(char *, uint64_t);
  uint64_t v70;
  uint64_t v71;
  id v72;
  void *v73;
  uint64_t v74;
  uint64_t v75;
  void (*v76)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v77;
  uint64_t v78;
  unsigned int (*v79)(uint64_t, uint64_t, uint64_t);
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  void (*v84)(char *, uint64_t);
  uint64_t v85;
  id v86;
  void *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t result;
  uint64_t v95;
  char *v96;
  char v97;
  void (*v98)(char *, uint64_t);
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  id v102;
  void *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  char v107;
  uint64_t v108;
  char *v109;
  uint64_t v110;
  uint64_t v111;
  _QWORD *v112;
  uint64_t v113;
  id v114;
  char *v115;
  char *v116;
  uint64_t v117;
  uint64_t v118;
  char *v119;
  char *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  id v126;
  _BYTE v127[24];
  uint64_t v128;

  v3 = type metadata accessor for Date();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v115 = (char *)&v108 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v124 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Date?, Date?));
  v6 = MEMORY[0x24BDAC7A8](v124);
  v8 = (char *)&v108 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v121 = (uint64_t)&v108 - v9;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  v11 = MEMORY[0x24BDAC7A8](v10);
  v113 = (uint64_t)&v108 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = MEMORY[0x24BDAC7A8](v11);
  v118 = (uint64_t)&v108 - v14;
  v15 = MEMORY[0x24BDAC7A8](v13);
  v116 = (char *)&v108 - v16;
  v17 = MEMORY[0x24BDAC7A8](v15);
  v117 = (uint64_t)&v108 - v18;
  v19 = MEMORY[0x24BDAC7A8](v17);
  v120 = (char *)&v108 - v20;
  MEMORY[0x24BDAC7A8](v19);
  v122 = (uint64_t)&v108 - v21;
  v125 = type metadata accessor for URL();
  v22 = *(_QWORD *)(v125 - 8);
  MEMORY[0x24BDAC7A8](v125);
  v119 = (char *)&v108 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (URL?, URL?));
  MEMORY[0x24BDAC7A8](v24);
  v26 = (char *)&v108 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  v28 = MEMORY[0x24BDAC7A8](v27);
  v123 = (uint64_t)&v108 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = MEMORY[0x24BDAC7A8](v28);
  v32 = (char *)&v108 - v31;
  MEMORY[0x24BDAC7A8](v30);
  v34 = (char *)&v108 - v33;
  outlined init with copy of URL?(a1, (uint64_t)v127, &demangling cache variable for type metadata for Any?);
  if (!v128)
  {
    outlined destroy of AsyncStream<()>.Continuation?((uint64_t)v127, &demangling cache variable for type metadata for Any?);
    return 0;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LACDTOPendingPolicyEvaluation);
  if ((swift_dynamicCast() & 1) == 0)
    return 0;
  v110 = v4;
  v109 = v8;
  v111 = v3;
  v112 = v1;
  v36 = *(_QWORD *)((char *)v1
                  + OBJC_IVAR____TtC23LocalAuthenticationCore36LACDTOMutablePendingPolicyEvaluation_identifier);
  v35 = *(_QWORD *)((char *)v1
                  + OBJC_IVAR____TtC23LocalAuthenticationCore36LACDTOMutablePendingPolicyEvaluation_identifier
                  + 8);
  v114 = v126;
  v37 = objc_msgSend(v126, sel_identifier);
  v38 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v40 = v39;

  if (v36 == v38 && v35 == v40)
  {
    v41 = swift_bridgeObjectRelease();
  }
  else
  {
    v42 = _stringCompareWithSmolCheck(_:_:expecting:)();
    v41 = swift_bridgeObjectRelease();
    if ((v42 & 1) == 0)
      goto LABEL_50;
  }
  v43 = (*(uint64_t (**)(uint64_t))((*MEMORY[0x24BEE4EA0] & *v112) + 0xA0))(v41);
  v45 = v44;
  v46 = objc_msgSend(v114, sel_callbackReason);
  if (!v46)
  {
    v51 = v111;
    if (!v45)
      goto LABEL_20;
    goto LABEL_15;
  }
  v47 = v46;
  v48 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v50 = v49;

  if (!v45)
  {
    v51 = v111;
    if (v50)
    {
LABEL_18:
      swift_unknownObjectRelease();
      swift_bridgeObjectRelease();
      return 0;
    }
    goto LABEL_20;
  }
  v51 = v111;
  if (!v50)
  {
LABEL_15:
    swift_unknownObjectRelease();
LABEL_16:
    swift_bridgeObjectRelease();
    return 0;
  }
  if (v43 == v48 && v45 == v50)
  {
    swift_bridgeObjectRelease();
    v46 = (id)swift_bridgeObjectRelease();
  }
  else
  {
    v52 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    v46 = (id)swift_bridgeObjectRelease();
    if ((v52 & 1) == 0)
      goto LABEL_50;
  }
LABEL_20:
  v53 = v112;
  (*(void (**)(id))((*MEMORY[0x24BEE4EA0] & *v112) + 0xB8))(v46);
  v54 = objc_msgSend(v114, sel_callbackURL);
  if (v54)
  {
    v55 = v54;
    static URL._unconditionallyBridgeFromObjectiveC(_:)();

    v56 = 0;
  }
  else
  {
    v56 = 1;
  }
  v57 = v125;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v22 + 56))(v32, v56, 1, v125);
  v58 = (uint64_t)&v26[*(int *)(v24 + 48)];
  outlined init with copy of URL?((uint64_t)v34, (uint64_t)v26, &demangling cache variable for type metadata for URL?);
  v59 = v57;
  outlined init with copy of URL?((uint64_t)v32, v58, &demangling cache variable for type metadata for URL?);
  v60 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v22 + 48);
  if (v60((uint64_t)v26, 1, v59) == 1)
  {
    outlined destroy of AsyncStream<()>.Continuation?((uint64_t)v32, &demangling cache variable for type metadata for URL?);
    outlined destroy of AsyncStream<()>.Continuation?((uint64_t)v34, &demangling cache variable for type metadata for URL?);
    if (v60(v58, 1, v59) == 1)
    {
      v61 = outlined destroy of AsyncStream<()>.Continuation?((uint64_t)v26, &demangling cache variable for type metadata for URL?);
      goto LABEL_30;
    }
LABEL_28:
    v63 = (uint64_t *)&demangling cache variable for type metadata for (URL?, URL?);
    v64 = (uint64_t)v26;
LABEL_49:
    outlined destroy of AsyncStream<()>.Continuation?(v64, v63);
    goto LABEL_50;
  }
  v62 = v123;
  outlined init with copy of URL?((uint64_t)v26, v123, &demangling cache variable for type metadata for URL?);
  if (v60(v58, 1, v59) == 1)
  {
    outlined destroy of AsyncStream<()>.Continuation?((uint64_t)v32, &demangling cache variable for type metadata for URL?);
    outlined destroy of AsyncStream<()>.Continuation?((uint64_t)v34, &demangling cache variable for type metadata for URL?);
    (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v62, v59);
    goto LABEL_28;
  }
  v65 = v53;
  v66 = v62;
  v67 = v119;
  (*(void (**)(char *, uint64_t, uint64_t))(v22 + 32))(v119, v58, v59);
  lazy protocol witness table accessor for type LACPolicy and conformance LACPolicy((unint64_t *)&lazy protocol witness table cache variable for type URL and conformance URL, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], MEMORY[0x24BDCDB00]);
  v68 = dispatch thunk of static Equatable.== infix(_:_:)();
  v69 = *(void (**)(char *, uint64_t))(v22 + 8);
  v69(v67, v59);
  outlined destroy of AsyncStream<()>.Continuation?((uint64_t)v32, &demangling cache variable for type metadata for URL?);
  outlined destroy of AsyncStream<()>.Continuation?((uint64_t)v34, &demangling cache variable for type metadata for URL?);
  v70 = v66;
  v53 = v65;
  v51 = v111;
  v69((char *)v70, v59);
  v61 = outlined destroy of AsyncStream<()>.Continuation?((uint64_t)v26, &demangling cache variable for type metadata for URL?);
  if ((v68 & 1) == 0)
    goto LABEL_50;
LABEL_30:
  v71 = v122;
  (*(void (**)(uint64_t))((*MEMORY[0x24BEE4EA0] & *v53) + 0xD0))(v61);
  v72 = objc_msgSend(v114, sel_notificationScheduledAt);
  if (v72)
  {
    v73 = v72;
    v74 = (uint64_t)v120;
    static Date._unconditionallyBridgeFromObjectiveC(_:)();

    v75 = v110;
    v76 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v110 + 56);
    v76(v74, 0, 1, v51);
  }
  else
  {
    v75 = v110;
    v76 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v110 + 56);
    v74 = (uint64_t)v120;
    v76((uint64_t)v120, 1, 1, v51);
  }
  v77 = v121;
  v78 = v121 + *(int *)(v124 + 48);
  outlined init with copy of URL?(v71, v121, &demangling cache variable for type metadata for Date?);
  outlined init with copy of URL?(v74, v78, &demangling cache variable for type metadata for Date?);
  v79 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v75 + 48);
  if (v79(v77, 1, v51) == 1)
  {
    outlined destroy of AsyncStream<()>.Continuation?(v74, &demangling cache variable for type metadata for Date?);
    outlined destroy of AsyncStream<()>.Continuation?(v71, &demangling cache variable for type metadata for Date?);
    if (v79(v78, 1, v51) == 1)
    {
      v80 = outlined destroy of AsyncStream<()>.Continuation?(v77, &demangling cache variable for type metadata for Date?);
      goto LABEL_40;
    }
    goto LABEL_38;
  }
  v81 = v117;
  outlined init with copy of URL?(v77, v117, &demangling cache variable for type metadata for Date?);
  if (v79(v78, 1, v51) == 1)
  {
    outlined destroy of AsyncStream<()>.Continuation?(v74, &demangling cache variable for type metadata for Date?);
    outlined destroy of AsyncStream<()>.Continuation?(v71, &demangling cache variable for type metadata for Date?);
    (*(void (**)(uint64_t, uint64_t))(v110 + 8))(v81, v51);
LABEL_38:
    v63 = &demangling cache variable for type metadata for (Date?, Date?);
    v64 = v77;
    goto LABEL_49;
  }
  v82 = v110;
  v83 = v115;
  (*(void (**)(char *, uint64_t, uint64_t))(v110 + 32))(v115, v78, v51);
  lazy protocol witness table accessor for type LACPolicy and conformance LACPolicy(&lazy protocol witness table cache variable for type Date and conformance Date, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], MEMORY[0x24BDCE958]);
  LODWORD(v125) = dispatch thunk of static Equatable.== infix(_:_:)();
  v84 = *(void (**)(char *, uint64_t))(v82 + 8);
  v84(v83, v51);
  outlined destroy of AsyncStream<()>.Continuation?(v74, &demangling cache variable for type metadata for Date?);
  outlined destroy of AsyncStream<()>.Continuation?(v122, &demangling cache variable for type metadata for Date?);
  v84((char *)v81, v51);
  v80 = outlined destroy of AsyncStream<()>.Continuation?(v77, &demangling cache variable for type metadata for Date?);
  if ((v125 & 1) == 0)
  {
LABEL_50:
    swift_unknownObjectRelease();
    return 0;
  }
LABEL_40:
  v85 = (uint64_t)v116;
  (*(void (**)(uint64_t))((*MEMORY[0x24BEE4EA0] & *v53) + 0xE8))(v80);
  v86 = objc_msgSend(v114, sel_coolOffStarted);
  if (v86)
  {
    v87 = v86;
    v88 = v118;
    static Date._unconditionallyBridgeFromObjectiveC(_:)();

    v89 = 0;
  }
  else
  {
    v89 = 1;
    v88 = v118;
  }
  v76(v88, v89, 1, v51);
  v90 = (uint64_t)v109;
  v91 = (uint64_t)&v109[*(int *)(v124 + 48)];
  outlined init with copy of URL?(v85, (uint64_t)v109, &demangling cache variable for type metadata for Date?);
  outlined init with copy of URL?(v88, v91, &demangling cache variable for type metadata for Date?);
  if (v79(v90, 1, v51) == 1)
  {
    outlined destroy of AsyncStream<()>.Continuation?(v88, &demangling cache variable for type metadata for Date?);
    outlined destroy of AsyncStream<()>.Continuation?(v85, &demangling cache variable for type metadata for Date?);
    if (v79(v91, 1, v51) == 1)
    {
      v92 = outlined destroy of AsyncStream<()>.Continuation?((uint64_t)v109, &demangling cache variable for type metadata for Date?);
      goto LABEL_54;
    }
    goto LABEL_48;
  }
  v93 = v113;
  outlined init with copy of URL?(v90, v113, &demangling cache variable for type metadata for Date?);
  if (v79(v91, 1, v51) == 1)
  {
    outlined destroy of AsyncStream<()>.Continuation?(v118, &demangling cache variable for type metadata for Date?);
    outlined destroy of AsyncStream<()>.Continuation?(v85, &demangling cache variable for type metadata for Date?);
    (*(void (**)(uint64_t, uint64_t))(v110 + 8))(v93, v51);
LABEL_48:
    v63 = &demangling cache variable for type metadata for (Date?, Date?);
    v64 = (uint64_t)v109;
    goto LABEL_49;
  }
  v95 = v110;
  v96 = v115;
  (*(void (**)(char *, uint64_t, uint64_t))(v110 + 32))(v115, v91, v51);
  lazy protocol witness table accessor for type LACPolicy and conformance LACPolicy(&lazy protocol witness table cache variable for type Date and conformance Date, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], MEMORY[0x24BDCE958]);
  v97 = dispatch thunk of static Equatable.== infix(_:_:)();
  v98 = *(void (**)(char *, uint64_t))(v95 + 8);
  v98(v96, v51);
  outlined destroy of AsyncStream<()>.Continuation?(v118, &demangling cache variable for type metadata for Date?);
  outlined destroy of AsyncStream<()>.Continuation?(v85, &demangling cache variable for type metadata for Date?);
  v98((char *)v93, v51);
  v92 = outlined destroy of AsyncStream<()>.Continuation?(v90, &demangling cache variable for type metadata for Date?);
  if ((v97 & 1) == 0)
    goto LABEL_50;
LABEL_54:
  v99 = (*(uint64_t (**)(uint64_t))((*MEMORY[0x24BEE4EA0] & *v53) + 0x100))(v92);
  v101 = v100;
  v102 = objc_msgSend(v114, sel_ratchetUUID);
  if (!v102)
  {
    if (!v101)
      goto LABEL_62;
    goto LABEL_18;
  }
  v103 = v102;
  v104 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v106 = v105;

  if (!v101)
  {
    swift_unknownObjectRelease();
    if (!v106)
      return 1;
    goto LABEL_16;
  }
  if (!v106)
    goto LABEL_18;
  if (v99 == v104 && v101 == v106)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_62:
    swift_unknownObjectRelease();
    return 1;
  }
  v107 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  result = 0;
  if ((v107 & 1) != 0)
    return 1;
  return result;
}

uint64_t outlined init with copy of URL?(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_240A27CF0@<X0>(_QWORD **a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & **a1) + 0x88))();
  *a2 = result & 1;
  return result;
}

uint64_t sub_240A27D34(unsigned __int8 *a1, _QWORD **a2)
{
  return (*(uint64_t (**)(_QWORD))((*MEMORY[0x24BEE4EA0] & **a2) + 0x90))(*a1);
}

uint64_t sub_240A27D70@<X0>(_QWORD **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  uint64_t v4;

  result = (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & **a1) + 0xA0))();
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t sub_240A27DB0(uint64_t *a1, _QWORD **a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t, uint64_t);

  v2 = *a1;
  v3 = a1[1];
  v4 = *(uint64_t (**)(uint64_t, uint64_t))((*MEMORY[0x24BEE4EA0] & **a2) + 0xA8);
  swift_bridgeObjectRetain();
  return v4(v2, v3);
}

uint64_t sub_240A27E04(_QWORD **a1)
{
  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & **a1) + 0xB8))();
}

uint64_t sub_240A27E40(_QWORD **a1)
{
  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & **a1) + 0xD0))();
}

uint64_t sub_240A27E7C(_QWORD **a1)
{
  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & **a1) + 0xE8))();
}

uint64_t sub_240A27EB8@<X0>(_QWORD **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  uint64_t v4;

  result = (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & **a1) + 0x100))();
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t sub_240A27EF8(uint64_t *a1, _QWORD **a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t, uint64_t);

  v2 = *a1;
  v3 = a1[1];
  v4 = *(uint64_t (**)(uint64_t, uint64_t))((*MEMORY[0x24BEE4EA0] & **a2) + 0x108);
  swift_bridgeObjectRetain();
  return v4(v2, v3);
}

uint64_t ObjC metadata update function for LACDTOMutablePendingPolicyEvaluation()
{
  return type metadata accessor for LACDTOMutablePendingPolicyEvaluation();
}

void type metadata completion function for LACDTOMutablePendingPolicyEvaluation()
{
  unint64_t v0;
  unint64_t v1;

  type metadata accessor for URL?(319, &lazy cache variable for type metadata for URL?, (void (*)(uint64_t))MEMORY[0x24BDCDAC0]);
  if (v0 <= 0x3F)
  {
    type metadata accessor for URL?(319, &lazy cache variable for type metadata for Date?, (void (*)(uint64_t))MEMORY[0x24BDCE900]);
    if (v1 <= 0x3F)
      swift_updateClassMetadata2();
  }
}

uint64_t method lookup function for LACDTOMutablePendingPolicyEvaluation()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of LACDTOMutablePendingPolicyEvaluation.isInvalidated.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x88))();
}

uint64_t dispatch thunk of LACDTOMutablePendingPolicyEvaluation.isInvalidated.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x90))();
}

uint64_t dispatch thunk of LACDTOMutablePendingPolicyEvaluation.isInvalidated.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x98))();
}

uint64_t dispatch thunk of LACDTOMutablePendingPolicyEvaluation.callbackReason.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xA0))();
}

uint64_t dispatch thunk of LACDTOMutablePendingPolicyEvaluation.callbackReason.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xA8))();
}

uint64_t dispatch thunk of LACDTOMutablePendingPolicyEvaluation.callbackReason.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xB0))();
}

uint64_t dispatch thunk of LACDTOMutablePendingPolicyEvaluation.callbackURL.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xB8))();
}

uint64_t dispatch thunk of LACDTOMutablePendingPolicyEvaluation.callbackURL.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xC0))();
}

uint64_t dispatch thunk of LACDTOMutablePendingPolicyEvaluation.callbackURL.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xC8))();
}

uint64_t dispatch thunk of LACDTOMutablePendingPolicyEvaluation.notificationScheduledAt.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xD0))();
}

uint64_t dispatch thunk of LACDTOMutablePendingPolicyEvaluation.notificationScheduledAt.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xD8))();
}

uint64_t dispatch thunk of LACDTOMutablePendingPolicyEvaluation.notificationScheduledAt.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xE0))();
}

uint64_t dispatch thunk of LACDTOMutablePendingPolicyEvaluation.coolOffStarted.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xE8))();
}

uint64_t dispatch thunk of LACDTOMutablePendingPolicyEvaluation.coolOffStarted.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xF0))();
}

uint64_t dispatch thunk of LACDTOMutablePendingPolicyEvaluation.coolOffStarted.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xF8))();
}

uint64_t dispatch thunk of LACDTOMutablePendingPolicyEvaluation.ratchetUUID.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x100))();
}

uint64_t dispatch thunk of LACDTOMutablePendingPolicyEvaluation.ratchetUUID.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x108))();
}

uint64_t dispatch thunk of LACDTOMutablePendingPolicyEvaluation.ratchetUUID.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x110))();
}

uint64_t dispatch thunk of LACDTOMutablePendingPolicyEvaluation.hasNotifiedUserAboutCompletion.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x118))();
}

uint64_t dispatch thunk of LACDTOMutablePendingPolicyEvaluation.__allocating_init(identifier:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 288))();
}

uint64_t dispatch thunk of LACDTOMutablePendingPolicyEvaluation.isNotificationScheduled(for:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x128))();
}

uint64_t dispatch thunk of LACDTOMutablePendingPolicyEvaluation.encode(to:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x130))();
}

uint64_t dispatch thunk of LACDTOMutablePendingPolicyEvaluation.__allocating_init(from:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 312))();
}

void type metadata accessor for URL?(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  unint64_t v4;
  uint64_t v5;

  if (!*a2)
  {
    a3(255);
    v4 = type metadata accessor for Optional();
    if (!v5)
      atomic_store(v4, a2);
  }
}

_BYTE *__swift_memcpy1_1(_BYTE *result, _BYTE *a2)
{
  *result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for LACDTOMutablePendingPolicyEvaluation.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFA)
    goto LABEL_17;
  if (a2 + 6 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 6) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 6;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 6;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 6;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 7;
  v8 = v6 - 7;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for LACDTOMutablePendingPolicyEvaluation.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 6 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 6) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFA)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF9)
    return ((uint64_t (*)(void))((char *)&loc_240A283DC + 4 * byte_240A7CC7C[v4]))();
  *a1 = a2 + 6;
  return ((uint64_t (*)(void))((char *)sub_240A28410 + 4 * byte_240A7CC77[v4]))();
}

uint64_t sub_240A28410(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_240A28418(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x240A28420);
  return result;
}

uint64_t sub_240A2842C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x240A28434);
  *(_BYTE *)result = a2 + 6;
  return result;
}

uint64_t sub_240A28438(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_240A28440(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t getEnumTag for LACDTOMutablePendingPolicyEvaluation.CodingKeys(unsigned __int8 *a1)
{
  return *a1;
}

_BYTE *destructiveInjectEnumTag for LACDTOMutablePendingPolicyEvaluation.CodingKeys(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

void *type metadata accessor for LACDTOMutablePendingPolicyEvaluation.CodingKeys()
{
  return &unk_2510BFE30;
}

uint64_t specialized LACDTOMutablePendingPolicyEvaluation.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v3;
  char v6;

  v3 = a1 == 0x696669746E656469 && a2 == 0xEA00000000007265;
  if (v3 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x696C61766E497369 && a2 == 0xED00006465746164
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x6B6361626C6C6163 && a2 == 0xEE006E6F73616552
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x6B6361626C6C6163 && a2 == 0xEB000000004C5255
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0xD000000000000017 && a2 == 0x8000000240A83740
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x5366664F6C6F6F63 && a2 == 0xEE00646574726174
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0x5574656863746172 && a2 == 0xEB00000000444955)
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 6;
    else
      return 7;
  }
}

uint64_t dispatch thunk of LACOnenessSessionProviding.isSessionActive.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of LACPreboardUPPManaging.teamName.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of LACPreboardUPPManaging.installUPP(request:storage:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v9;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);

  v11 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))(**(int **)(a4 + 16) + *(_QWORD *)(a4 + 16));
  v9 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 16) = v9;
  *v9 = v4;
  v9[1] = dispatch thunk of LACUserDefaultsPersistentStore.removeObject(forKey:);
  return v11(a1, a2, a3, a4);
}

id LACPreboardUPPManager.uppProfile.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  void *v5;
  id v6;
  id v7;
  Swift::String v8;
  void *v9;
  id v10;
  uint64_t v12;
  char v13;

  v1 = v0;
  v2 = type metadata accessor for LACLogger();
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)&v12 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = *(void **)(v1 + 16);
  v6 = v5;
  if (v5 == (void *)1)
  {
    v6 = objc_msgSend((id)objc_opt_self(), sel_getUPPProfile);
    if (!v6)
    {
      v7 = LACLogPreboard();
      Logger.init(_:)();
      v13 = 3;
      v8._object = (void *)0x8000000240A83930;
      v8._countAndFlagsBits = 0xD00000000000001BLL;
      LACLogger.log(level:_:)((LocalAuthenticationCore::LACLogger::Level)&v13, v8);
      outlined destroy of LACLogger((uint64_t)v4);
    }
    v9 = *(void **)(v1 + 16);
    *(_QWORD *)(v1 + 16) = v6;
    v10 = v6;
    outlined consume of LACPreboardUPPProfile??(v9);
  }
  outlined copy of LACPreboardUPPProfile??(v5);
  return v6;
}

void *LACPreboardUPPManager.teamName.getter()
{
  id v0;
  void *v1;
  id v2;

  v0 = LACPreboardUPPManager.uppProfile.getter();
  v1 = v0;
  if (v0)
  {
    v2 = objc_msgSend(v0, sel_teamName);

    v1 = (void *)static String._unconditionallyBridgeFromObjectiveC(_:)();
  }
  return v1;
}

uint64_t LACPreboardUPPManager.__allocating_init()()
{
  uint64_t result;

  result = swift_allocObject();
  *(_QWORD *)(result + 16) = 1;
  return result;
}

uint64_t LACPreboardUPPManager.init()()
{
  uint64_t v0;
  uint64_t result;

  result = v0;
  *(_QWORD *)(v0 + 16) = 1;
  return result;
}

uint64_t LACPreboardUPPManager.installUPP(request:storage:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  v3[27] = a2;
  v3[28] = v2;
  v3[26] = a1;
  type metadata accessor for LACLogger();
  v3[29] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t LACPreboardUPPManager.installUPP(request:storage:)()
{
  uint64_t v0;
  id v1;
  void *v2;
  void *v3;
  id v4;
  uint64_t v5;
  id v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  Class isa;
  uint64_t v13;
  _QWORD *v14;
  void *v16;
  void *v17;
  uint64_t v18;
  id v19;
  Swift::String v20;
  id v21;
  uint64_t v22;
  void *v23;
  unsigned int v24;
  void *v25;
  void *v26;
  id v27;
  uint64_t (*v28)(void);
  id v29;
  void *v30;
  void *v31;
  char v32;
  uint64_t v33;

  v33 = *MEMORY[0x24BDAC8D0];
  v1 = LACPreboardUPPManager.uppProfile.getter();
  *(_QWORD *)(v0 + 240) = v1;
  if (!v1)
  {
    v16 = (void *)objc_opt_self();
    v17 = (void *)MEMORY[0x2426863FC](0x20676E697373694DLL, 0xEF656C69666F7270);
    objc_msgSend(v16, sel_errorWithCode_debugDescription_, -1000, v17);

    swift_willThrow();
LABEL_14:
    swift_task_dealloc();
    v28 = *(uint64_t (**)(void))(v0 + 8);
    return v28();
  }
  v2 = v1;
  v3 = *(void **)(v0 + 208);
  swift_getObjectType();
  if (objc_msgSend((id)swift_getObjCClassFromMetadata(), sel_isKeyAvailable_operation_, objc_msgSend(v3, sel_key), 4))
  {
    v4 = objc_msgSend(v2, sel_teamID);
    if (!v4)
    {
      v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v4 = (id)MEMORY[0x2426863FC](v5);
      swift_bridgeObjectRelease();
    }
    v6 = objc_msgSend((id)objc_opt_self(), sel_createUPPControlForTeamID_, v4);

    if (v6)
    {
      v8 = *(_QWORD *)(v0 + 208);
      v7 = *(void **)(v0 + 216);
      v9 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
      v11 = v10;

      *(_QWORD *)(v0 + 248) = v9;
      *(_QWORD *)(v0 + 256) = v11;
      isa = Data._bridgeToObjectiveC()().super.isa;
      *(_QWORD *)(v0 + 264) = isa;
      *(_QWORD *)(v0 + 56) = v0 + 120;
      *(_QWORD *)(v0 + 16) = v0;
      *(_QWORD *)(v0 + 24) = LACPreboardUPPManager.installUPP(request:storage:);
      v13 = swift_continuation_init();
      *(_QWORD *)(v0 + 80) = MEMORY[0x24BDAC760];
      v14 = (_QWORD *)(v0 + 80);
      v14[1] = 0x40000000;
      v14[2] = @objc completion handler block implementation for @escaping @callee_unowned @convention(block) (@unowned Swift.AnyObject?, @unowned NSError?) -> () with result type Any;
      v14[3] = &block_descriptor_2;
      v14[4] = v13;
      objc_msgSend(v7, sel_setObject_forRequest_connection_completionHandler_, isa, v8, 0, v14);
      return swift_continuation_await();
    }
    v30 = (void *)objc_opt_self();
    v31 = (void *)MEMORY[0x2426863FC](0xD00000000000001DLL, 0x8000000240A83860);
    objc_msgSend(v30, sel_errorWithCode_debugDescription_, -1000, v31);

    swift_willThrow();
    goto LABEL_14;
  }
  v18 = *(_QWORD *)(v0 + 232);
  v19 = LACLogPreboard();
  Logger.init(_:)();
  v32 = 3;
  v20._countAndFlagsBits = 0xD000000000000022;
  v20._object = (void *)0x8000000240A83830;
  LACLogger.log(level:_:)((LocalAuthenticationCore::LACLogger::Level)&v32, v20);
  outlined destroy of LACLogger(v18);
  v21 = objc_msgSend(*(id *)(v0 + 240), sel_uuid);
  if (!v21)
  {
    v22 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v21 = (id)MEMORY[0x2426863FC](v22);
    swift_bridgeObjectRelease();
  }
  v23 = (void *)objc_opt_self();
  *(_QWORD *)(v0 + 200) = 0;
  v24 = objc_msgSend(v23, sel_installProfileWithUUID_signature_error_, v21, 0, v0 + 200);

  v25 = *(void **)(v0 + 200);
  v26 = *(void **)(v0 + 240);
  if (!v24)
  {
    v29 = v25;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    outlined consume of Data?(0, 0xF000000000000000);

    goto LABEL_14;
  }
  v27 = v25;
  outlined consume of Data?(0, 0xF000000000000000);

  swift_task_dealloc();
  v28 = *(uint64_t (**)(void))(v0 + 8);
  return v28();
}

{
  uint64_t v0;

  *(_QWORD *)(*(_QWORD *)v0 + 272) = *(_QWORD *)(*(_QWORD *)v0 + 48);
  return swift_task_switch();
}

{
  uint64_t v0;
  int v1;
  unint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  id v7;
  uint64_t v8;
  Class isa;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  unsigned int v14;
  void *v15;
  id v16;
  uint64_t (*v17)(void);
  id v18;

  outlined init with take of Any((_OWORD *)(v0 + 120), (_OWORD *)(v0 + 152));
  v1 = swift_dynamicCast();
  v2 = *(_QWORD *)(v0 + 256);
  v3 = *(void **)(v0 + 264);
  v4 = *(_QWORD *)(v0 + 248);
  if (!v1)
  {
    v10 = *(void **)(v0 + 240);

    v11 = (void *)objc_opt_self();
    v12 = (void *)MEMORY[0x2426863FC](0xD000000000000024, 0x8000000240A838A0);
    objc_msgSend(v11, sel_errorWithCode_debugDescription_, -1000, v12);

    swift_willThrow();
    outlined consume of Data._Representation(v4, v2);
LABEL_11:

    swift_task_dealloc();
    v17 = *(uint64_t (**)(void))(v0 + 8);
    return v17();
  }
  outlined consume of Data._Representation(*(_QWORD *)(v0 + 248), *(_QWORD *)(v0 + 256));
  v5 = *(_QWORD *)(v0 + 184);
  v6 = *(_QWORD *)(v0 + 192);

  v7 = objc_msgSend(*(id *)(v0 + 240), sel_uuid);
  if (!v7)
  {
    v8 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v7 = (id)MEMORY[0x2426863FC](v8);
    swift_bridgeObjectRelease();
  }
  if (v6 >> 60 == 15)
  {
    isa = 0;
  }
  else
  {
    outlined copy of Data._Representation(v5, v6);
    isa = Data._bridgeToObjectiveC()().super.isa;
    outlined consume of Data?(v5, v6);
  }
  v13 = (void *)objc_opt_self();
  *(_QWORD *)(v0 + 200) = 0;
  v14 = objc_msgSend(v13, sel_installProfileWithUUID_signature_error_, v7, isa, v0 + 200);

  v15 = *(void **)(v0 + 200);
  v10 = *(void **)(v0 + 240);
  if (!v14)
  {
    v18 = v15;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    outlined consume of Data?(v5, v6);
    goto LABEL_11;
  }
  v16 = v15;
  outlined consume of Data?(v5, v6);

  swift_task_dealloc();
  v17 = *(uint64_t (**)(void))(v0 + 8);
  return v17();
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  unint64_t v3;
  void *v4;

  v1 = *(void **)(v0 + 264);
  v2 = *(_QWORD *)(v0 + 248);
  v3 = *(_QWORD *)(v0 + 256);
  v4 = *(void **)(v0 + 240);
  swift_willThrow();
  outlined consume of Data._Representation(v2, v3);

  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t @objc completion handler block implementation for @escaping @callee_unowned @convention(block) (@unowned Swift.AnyObject?, @unowned NSError?) -> () with result type Any(uint64_t result, uint64_t a2, void *a3)
{
  uint64_t v3;
  _QWORD *v5;
  id v6;
  _OWORD *v8;
  __int128 v9;
  uint64_t ObjectType;

  v3 = *(_QWORD *)(result + 32);
  if (a3)
  {
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
    swift_allocError();
    *v5 = a3;
    v6 = a3;
    return swift_continuation_throwingResumeWithError();
  }
  else if (a2)
  {
    ObjectType = swift_getObjectType();
    *(_QWORD *)&v9 = a2;
    v8 = *(_OWORD **)(*(_QWORD *)(v3 + 64) + 40);
    swift_unknownObjectRetain();
    outlined init with take of Any(&v9, v8);
    return swift_continuation_throwingResume();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t LACPreboardUPPManager.deinit()
{
  uint64_t v0;

  outlined consume of LACPreboardUPPProfile??(*(id *)(v0 + 16));
  return v0;
}

uint64_t LACPreboardUPPManager.__deallocating_deinit()
{
  uint64_t v0;

  outlined consume of LACPreboardUPPProfile??(*(id *)(v0 + 16));
  return swift_deallocClassInstance();
}

void *protocol witness for LACPreboardUPPManaging.teamName.getter in conformance LACPreboardUPPManager()
{
  id v0;
  void *v1;
  id v2;

  v0 = LACPreboardUPPManager.uppProfile.getter();
  v1 = v0;
  if (v0)
  {
    v2 = objc_msgSend(v0, sel_teamName);

    v1 = (void *)static String._unconditionallyBridgeFromObjectiveC(_:)();
  }
  return v1;
}

uint64_t protocol witness for LACPreboardUPPManaging.installUPP(request:storage:) in conformance LACPreboardUPPManager(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;

  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = dispatch thunk of LACUserDefaultsPersistentStore.removeObject(forKey:);
  return LACPreboardUPPManager.installUPP(request:storage:)(a1, a2);
}

uint64_t outlined copy of Data._Representation(uint64_t a1, unint64_t a2)
{
  uint64_t result;

  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2)
      return result;
    swift_retain();
  }
  return swift_retain();
}

_OWORD *outlined init with take of Any(_OWORD *a1, _OWORD *a2)
{
  __int128 v2;

  v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return a2;
}

void outlined consume of LACPreboardUPPProfile??(id a1)
{
  if (a1 != (id)1)

}

uint64_t type metadata accessor for LACPreboardUPPManager()
{
  return objc_opt_self();
}

uint64_t method lookup function for LACPreboardUPPManager()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of LACPreboardUPPManager.__allocating_init()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 88))();
}

id outlined copy of LACPreboardUPPProfile??(id result)
{
  if (result != (id)1)
    return result;
  return result;
}

id LACDTOEnvironmentProvider.__allocating_init(locationProvider:featureController:ratchetStateProvider:lostModeController:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  objc_class *v4;
  char *v9;
  objc_super v11;

  v9 = (char *)objc_allocWithZone(v4);
  *(_QWORD *)&v9[OBJC_IVAR____TtC23LocalAuthenticationCore25LACDTOEnvironmentProvider_locationProvider] = a1;
  *(_QWORD *)&v9[OBJC_IVAR____TtC23LocalAuthenticationCore25LACDTOEnvironmentProvider_featureController] = a2;
  *(_QWORD *)&v9[OBJC_IVAR____TtC23LocalAuthenticationCore25LACDTOEnvironmentProvider_ratchetStateProvider] = a3;
  *(_QWORD *)&v9[OBJC_IVAR____TtC23LocalAuthenticationCore25LACDTOEnvironmentProvider_lostModeController] = a4;
  v11.receiver = v9;
  v11.super_class = v4;
  return objc_msgSendSuper2(&v11, sel_init);
}

id LACDTOEnvironmentProvider.init(locationProvider:featureController:ratchetStateProvider:lostModeController:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  char *v4;
  objc_super v6;

  *(_QWORD *)&v4[OBJC_IVAR____TtC23LocalAuthenticationCore25LACDTOEnvironmentProvider_locationProvider] = a1;
  *(_QWORD *)&v4[OBJC_IVAR____TtC23LocalAuthenticationCore25LACDTOEnvironmentProvider_featureController] = a2;
  *(_QWORD *)&v4[OBJC_IVAR____TtC23LocalAuthenticationCore25LACDTOEnvironmentProvider_ratchetStateProvider] = a3;
  *(_QWORD *)&v4[OBJC_IVAR____TtC23LocalAuthenticationCore25LACDTOEnvironmentProvider_lostModeController] = a4;
  v6.receiver = v4;
  v6.super_class = (Class)type metadata accessor for LACDTOEnvironmentProvider();
  return objc_msgSendSuper2(&v6, sel_init);
}

uint64_t type metadata accessor for LACDTOEnvironmentProvider()
{
  return objc_opt_self();
}

uint64_t LACDTOEnvironmentProvider.fetchEnvironment(policy:options:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  id v13;
  Swift::String v14;
  id v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  _QWORD *v19;
  void *v20;
  _QWORD aBlock[6];

  v5 = v4;
  v10 = type metadata accessor for LACLogger();
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)aBlock - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = LACLogDTOEnvironment();
  Logger.init(_:)();
  LOBYTE(aBlock[0]) = 2;
  v14._object = (void *)0x8000000240A83950;
  v14._countAndFlagsBits = 0xD00000000000001CLL;
  LACLogger.log(level:_:)((LocalAuthenticationCore::LACLogger::Level)aBlock, v14);
  outlined destroy of LACLogger((uint64_t)v12);
  v15 = objc_msgSend((id)objc_opt_self(), sel_environmentUpdateWillStart);
  objc_msgSend(v15, sel_send);

  v16 = swift_allocObject();
  *(_QWORD *)(v16 + 16) = a3;
  *(_QWORD *)(v16 + 24) = a4;
  v17 = *(void **)(v5 + OBJC_IVAR____TtC23LocalAuthenticationCore25LACDTOEnvironmentProvider_featureController);
  v18 = swift_allocObject();
  swift_unknownObjectWeakInit();
  v19 = (_QWORD *)swift_allocObject();
  v19[2] = v18;
  v19[3] = partial apply for closure #1 in LACDTOEnvironmentProvider.fetchEnvironment(policy:options:completion:);
  v19[4] = v16;
  v19[5] = a1;
  v19[6] = a2;
  aBlock[4] = partial apply for closure #1 in LACDTOEnvironmentProvider.performFetchEnvironment(policy:options:completion:);
  aBlock[5] = v19;
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed (@guaranteed LACDTOFeatureState) -> ();
  aBlock[3] = &block_descriptor_3;
  v20 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_release();
  objc_msgSend(v17, sel_fetchStateWithCompletion_, v20);
  _Block_release(v20);
  return swift_release();
}

uint64_t closure #1 in LACDTOEnvironmentProvider.fetchEnvironment(policy:options:completion:)(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t))
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  id v9;
  id v10;
  char v11;
  Swift::String v12;
  Swift::String v13;
  Swift::String v14;
  uint64_t v16;
  Swift::String v17;
  char v18;

  v6 = type metadata accessor for LACLogger();
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = objc_msgSend((id)objc_opt_self(), sel_environmentUpdateDidFinish);
  objc_msgSend(v9, sel_send);

  v10 = LACLogDTOEnvironment();
  Logger.init(_:)();
  if (a2)
    v11 = 3;
  else
    v11 = 2;
  v18 = v11;
  v17._countAndFlagsBits = 0;
  v17._object = (void *)0xE000000000000000;
  _StringGuts.grow(_:)(43);
  swift_bridgeObjectRelease();
  v17._countAndFlagsBits = 0xD000000000000021;
  v17._object = (void *)0x8000000240A83B50;
  v16 = a1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LACDTOEnvironment?);
  v12._countAndFlagsBits = Optional.debugDescription.getter();
  String.append(_:)(v12);
  swift_bridgeObjectRelease();
  v13._countAndFlagsBits = 0x3D727265202CLL;
  v13._object = (void *)0xE600000000000000;
  String.append(_:)(v13);
  v16 = a2;
  __swift_instantiateConcreteTypeFromMangledName(demangling cache variable for type metadata for Error?);
  v14._countAndFlagsBits = Optional.debugDescription.getter();
  String.append(_:)(v14);
  swift_bridgeObjectRelease();
  LACLogger.log(level:_:)((LocalAuthenticationCore::LACLogger::Level)&v18, v17);
  swift_bridgeObjectRelease();
  outlined destroy of LACLogger((uint64_t)v8);
  return a3(a1, a2);
}

uint64_t sub_240A29AF0()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in LACDTOEnvironmentProvider.fetchEnvironment(policy:options:completion:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return closure #1 in LACDTOEnvironmentProvider.fetchEnvironment(policy:options:completion:)(a1, a2, *(uint64_t (**)(uint64_t, uint64_t))(v2 + 16));
}

uint64_t sub_240A29B1C()
{
  swift_unknownObjectWeakDestroy();
  return swift_deallocObject();
}

void thunk for @escaping @callee_unowned @convention(block) (@unowned LACDTOEnvironment?, @unowned NSError?) -> ()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  id v6;

  if (a2)
    v5 = _convertErrorToNSError(_:)();
  else
    v5 = 0;
  v6 = (id)v5;
  (*(void (**)(uint64_t, uint64_t))(a3 + 16))(a3, a1);

}

id LACDTOEnvironmentProvider.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

void LACDTOEnvironmentProvider.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

id LACDTOEnvironmentProvider.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for LACDTOEnvironmentProvider();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

void closure #1 in LACDTOEnvironmentProvider.performFetchEnvironment(policy:options:completion:)(void *a1, uint64_t a2, void (*a3)(id, _QWORD), uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11;
  uint64_t v12;
  char *v13;
  void *v14;
  uint64_t v15;
  _QWORD *v16;
  void *v17;
  id v18;
  id v19;
  _QWORD aBlock[6];

  v11 = a2 + 16;
  swift_beginAccess();
  v12 = MEMORY[0x242687740](v11);
  if (v12)
  {
    v13 = (char *)v12;
    if (objc_msgSend(a1, sel_isEnabled))
    {
      v14 = *(void **)&v13[OBJC_IVAR____TtC23LocalAuthenticationCore25LACDTOEnvironmentProvider_ratchetStateProvider];
      v15 = swift_allocObject();
      swift_unknownObjectWeakInit();
      v16 = (_QWORD *)swift_allocObject();
      v16[2] = v15;
      v16[3] = a3;
      v16[4] = a4;
      v16[5] = a5;
      v16[6] = a6;
      v16[7] = a1;
      aBlock[4] = partial apply for closure #1 in closure #1 in LACDTOEnvironmentProvider.performFetchEnvironment(policy:options:completion:);
      aBlock[5] = v16;
      aBlock[0] = MEMORY[0x24BDAC760];
      aBlock[1] = 1107296256;
      aBlock[2] = thunk for @escaping @callee_guaranteed (@guaranteed LACDTORatchetStateComposite?, @guaranteed Error?) -> ();
      aBlock[3] = &block_descriptor_17;
      v17 = _Block_copy(aBlock);
      swift_unknownObjectRetain();
      swift_retain();
      swift_bridgeObjectRetain();
      swift_unknownObjectRetain();
      swift_release();
      objc_msgSend(v14, sel_ratchetStateCompositeWithCompletion_, v17);
      _Block_release(v17);

      swift_unknownObjectRelease();
    }
    else
    {
      v18 = objc_msgSend((id)objc_opt_self(), sel_nullInstance);
      objc_msgSend(v18, sel_setFeatureState_, a1);
      v19 = v18;
      a3(v18, 0);

    }
  }
}

uint64_t sub_240A29F18()
{
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in LACDTOEnvironmentProvider.performFetchEnvironment(policy:options:completion:)(uint64_t a1)
{
  return partial apply for closure #1 in LACDTOEnvironmentProvider.performFetchEnvironment(policy:options:completion:)(a1, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))closure #1 in LACDTOEnvironmentProvider.performFetchEnvironment(policy:options:completion:));
}

void closure #1 in closure #1 in LACDTOEnvironmentProvider.performFetchEnvironment(policy:options:completion:)(void *a1, uint64_t a2, uint64_t a3, void (*a4)(_QWORD, uint64_t), uint64_t a5, uint64_t a6, uint64_t a7, void *a8)
{
  uint64_t v15;
  uint64_t v16;
  char *v17;
  id v18;
  id v19;
  void *v20;
  uint64_t v21;
  _QWORD *v22;
  void *v23;
  char *v24;
  _QWORD aBlock[6];

  v15 = a3 + 16;
  swift_beginAccess();
  v16 = MEMORY[0x242687740](v15);
  if (v16)
  {
    v17 = (char *)v16;
    if (a2)
    {
      a4(0, a2);
    }
    else
    {
      if (!a1)
      {
        __break(1u);
        return;
      }
      type metadata accessor for LACDTOMutableLostModeFetchRequest(0, &lazy cache variable for type metadata for LACDTOMutableLostModeFetchRequest);
      v18 = a1;
      swift_unknownObjectRetain();
      swift_bridgeObjectRetain();
      v19 = LACDTOMutableLostModeFetchRequest.init(policy:options:featureState:ratchetState:)(a6, a7, a8, v18);
      v20 = *(void **)&v17[OBJC_IVAR____TtC23LocalAuthenticationCore25LACDTOEnvironmentProvider_lostModeController];
      v21 = swift_allocObject();
      swift_unknownObjectWeakInit();
      v22 = (_QWORD *)swift_allocObject();
      v22[2] = v21;
      v22[3] = a4;
      v22[4] = a5;
      v22[5] = a8;
      aBlock[4] = partial apply for closure #1 in closure #1 in closure #1 in LACDTOEnvironmentProvider.performFetchEnvironment(policy:options:completion:);
      aBlock[5] = v22;
      aBlock[0] = MEMORY[0x24BDAC760];
      aBlock[1] = 1107296256;
      aBlock[2] = thunk for @escaping @callee_guaranteed (@guaranteed LACDTOLocationState) -> ();
      aBlock[3] = &block_descriptor_24;
      v23 = _Block_copy(aBlock);
      swift_unknownObjectRetain();
      swift_unknownObjectRetain();
      v24 = (char *)v19;
      swift_retain();
      swift_release();
      objc_msgSend(v20, sel_fetchLostMode_completion_, v24, v23);
      _Block_release(v23);

      swift_unknownObjectRelease();
      v17 = v24;
    }

  }
}

id LACDTOMutableLostModeFetchRequest.init(policy:options:featureState:ratchetState:)(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v7;
  Class isa;
  id v9;
  id v10;

  v7 = objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), sel_init);
  objc_msgSend(v7, sel_setPolicy_, a1);
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v7, sel_setOptions_, isa);

  objc_msgSend(v7, sel_setIsDTOEnabled_, objc_msgSend(a3, sel_isEnabled));
  v9 = objc_msgSend(a4, sel_ratchetState);
  objc_msgSend(v7, sel_setRatchetState_, v9);

  v10 = objc_msgSend(a4, sel_watchdogs);
  objc_msgSend(v7, sel_setBiometryWatchdogPack_, v10);

  swift_unknownObjectRelease();
  return v7;
}

uint64_t closure #1 in closure #1 in closure #1 in LACDTOEnvironmentProvider.performFetchEnvironment(policy:options:completion:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t result;
  void *v11;
  void *v12;
  uint64_t v13;
  _QWORD *v14;
  void *v15;
  id v16;
  _QWORD aBlock[6];

  v9 = a2 + 16;
  swift_beginAccess();
  result = MEMORY[0x242687740](v9);
  if (result)
  {
    v11 = (void *)result;
    v12 = *(void **)(result + OBJC_IVAR____TtC23LocalAuthenticationCore25LACDTOEnvironmentProvider_locationProvider);
    v13 = swift_allocObject();
    swift_unknownObjectWeakInit();
    v14 = (_QWORD *)swift_allocObject();
    v14[2] = v13;
    v14[3] = a3;
    v14[4] = a4;
    v14[5] = a5;
    v14[6] = a1;
    aBlock[4] = partial apply for closure #1 in closure #1 in closure #1 in closure #1 in LACDTOEnvironmentProvider.performFetchEnvironment(policy:options:completion:);
    aBlock[5] = v14;
    aBlock[0] = MEMORY[0x24BDAC760];
    aBlock[1] = 1107296256;
    aBlock[2] = thunk for @escaping @callee_guaranteed (@guaranteed LACDTOLocationState) -> ();
    aBlock[3] = &block_descriptor_31;
    v15 = _Block_copy(aBlock);
    swift_unknownObjectRetain();
    swift_retain();
    swift_unknownObjectRetain();
    v16 = a1;
    swift_release();
    objc_msgSend(v12, sel_checkIsInFamiliarLocationWithCompletion_, v15);
    _Block_release(v15);

    return swift_unknownObjectRelease();
  }
  return result;
}

uint64_t closure #1 in closure #1 in closure #1 in closure #1 in LACDTOEnvironmentProvider.performFetchEnvironment(policy:options:completion:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6)
{
  uint64_t v11;
  uint64_t result;
  void *v13;
  void *v14;
  uint64_t v15;
  _QWORD *v16;
  void *v17;
  id v18;
  id v19;
  _QWORD aBlock[6];

  v11 = a2 + 16;
  swift_beginAccess();
  result = MEMORY[0x242687740](v11);
  if (result)
  {
    v13 = (void *)result;
    v14 = *(void **)(result + OBJC_IVAR____TtC23LocalAuthenticationCore25LACDTOEnvironmentProvider_ratchetStateProvider);
    v15 = swift_allocObject();
    swift_unknownObjectWeakInit();
    v16 = (_QWORD *)swift_allocObject();
    v16[2] = v15;
    v16[3] = a3;
    v16[4] = a4;
    v16[5] = a5;
    v16[6] = a1;
    v16[7] = a6;
    aBlock[4] = partial apply for closure #1 in closure #1 in closure #1 in closure #1 in closure #1 in LACDTOEnvironmentProvider.performFetchEnvironment(policy:options:completion:);
    aBlock[5] = v16;
    aBlock[0] = MEMORY[0x24BDAC760];
    aBlock[1] = 1107296256;
    aBlock[2] = thunk for @escaping @callee_guaranteed (@guaranteed LACDTORatchetStateComposite?, @guaranteed Error?) -> ();
    aBlock[3] = &block_descriptor_38;
    v17 = _Block_copy(aBlock);
    swift_unknownObjectRetain();
    swift_retain();
    swift_unknownObjectRetain();
    v18 = a1;
    v19 = a6;
    swift_release();
    objc_msgSend(v14, sel_ratchetStateCompositeWithCompletion_, v17);
    _Block_release(v17);

    return swift_unknownObjectRelease();
  }
  return result;
}

void closure #1 in closure #1 in closure #1 in closure #1 in closure #1 in LACDTOEnvironmentProvider.performFetchEnvironment(policy:options:completion:)(void *a1, uint64_t a2, uint64_t a3, void (*a4)(id, uint64_t), uint64_t a5, uint64_t a6, void *a7, void *a8)
{
  uint64_t v13;
  void *v14;
  id v15;
  id v16;
  id v17;
  uint64_t v18;
  id v19;

  v13 = a3 + 16;
  swift_beginAccess();
  v14 = (void *)MEMORY[0x242687740](v13);

  if (v14)
  {
    if (a2)
    {
      a4(0, a2);
    }
    else if (a1)
    {
      type metadata accessor for LACDTOMutableLostModeFetchRequest(0, &lazy cache variable for type metadata for LACDTOMutableEnvironment);
      v15 = a1;
      v16 = a8;
      v17 = a7;
      v18 = swift_unknownObjectRetain();
      v19 = LACDTOMutableEnvironment.init(featureState:locationState:lostModeState:stateComposite:)(v18, v17, v16, v15);
      a4(v19, 0);

    }
    else
    {
      __break(1u);
    }
  }
}

id LACDTOMutableEnvironment.init(featureState:locationState:lostModeState:stateComposite:)(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v8;
  id v9;
  id v10;
  id v11;

  v8 = objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), sel_init);
  objc_msgSend(v8, sel_setConfirmed_, 1);
  v9 = objc_msgSend(a4, sel_watchdogs);
  objc_msgSend(v8, sel_setBiometryWatchdogPack_, v9);

  objc_msgSend(v8, sel_setFeatureState_, a1);
  objc_msgSend(v8, sel_setLocationState_, a2);
  objc_msgSend(v8, sel_setLostModeState_, a3);
  v10 = objc_msgSend(a4, sel_ratchetState);
  objc_msgSend(v8, sel_setRatchetState_, v10);

  v11 = objc_msgSend(a4, sel_gracePeriodState);
  objc_msgSend(v8, sel_setGracePeriodState_, v11);

  swift_unknownObjectRelease();
  return v8;
}

void thunk for @escaping @callee_guaranteed (@guaranteed LACDTORatchetStateComposite?, @guaranteed Error?) -> ()(uint64_t a1, void *a2, void *a3)
{
  void (*v5)(void *, void *);
  id v6;
  id v7;

  v5 = *(void (**)(void *, void *))(a1 + 32);
  swift_retain();
  v7 = a2;
  v6 = a3;
  v5(a2, a3);
  swift_release();

}

void thunk for @escaping @callee_guaranteed (@guaranteed LACDTOLocationState) -> ()(uint64_t a1, void *a2)
{
  void (*v3)(void);
  id v4;

  v3 = *(void (**)(void))(a1 + 32);
  swift_retain();
  v4 = a2;
  v3();
  swift_release();

}

uint64_t thunk for @escaping @callee_guaranteed (@guaranteed LACDTOFeatureState) -> ()(uint64_t a1)
{
  void (*v1)(uint64_t);
  uint64_t v2;

  v1 = *(void (**)(uint64_t))(a1 + 32);
  swift_retain();
  v2 = swift_unknownObjectRetain();
  v1(v2);
  swift_release();
  return swift_unknownObjectRelease();
}

uint64_t block_copy_helper_1(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_1()
{
  return swift_release();
}

uint64_t method lookup function for LACDTOEnvironmentProvider()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of LACDTOEnvironmentProvider.__allocating_init(locationProvider:featureController:ratchetStateProvider:lostModeController:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 112))();
}

uint64_t dispatch thunk of LACDTOEnvironmentProvider.fetchEnvironment(policy:options:completion:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x78))();
}

uint64_t sub_240A2A8F8()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject();
}

void partial apply for thunk for @escaping @callee_unowned @convention(block) (@unowned LACDTOEnvironment?, @unowned NSError?) -> ()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  thunk for @escaping @callee_unowned @convention(block) (@unowned LACDTOEnvironment?, @unowned NSError?) -> ()(a1, a2, *(_QWORD *)(v2 + 16));
}

uint64_t sub_240A2A924()
{
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #1 in LACDTOEnvironmentProvider.performFetchEnvironment(policy:options:completion:)(uint64_t a1, uint64_t a2)
{
  return partial apply for closure #1 in closure #1 in LACDTOEnvironmentProvider.performFetchEnvironment(policy:options:completion:)(a1, a2, (uint64_t (*)(uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))closure #1 in closure #1 in LACDTOEnvironmentProvider.performFetchEnvironment(policy:options:completion:));
}

uint64_t sub_240A2A96C()
{
  swift_release();
  swift_release();
  swift_unknownObjectRelease();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #1 in closure #1 in LACDTOEnvironmentProvider.performFetchEnvironment(policy:options:completion:)(void *a1)
{
  uint64_t *v1;

  return closure #1 in closure #1 in closure #1 in LACDTOEnvironmentProvider.performFetchEnvironment(policy:options:completion:)(a1, v1[2], v1[3], v1[4], v1[5]);
}

uint64_t sub_240A2A9AC()
{
  uint64_t v0;

  swift_release();
  swift_release();
  swift_unknownObjectRelease();

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #1 in closure #1 in closure #1 in LACDTOEnvironmentProvider.performFetchEnvironment(policy:options:completion:)(uint64_t a1)
{
  return partial apply for closure #1 in LACDTOEnvironmentProvider.performFetchEnvironment(policy:options:completion:)(a1, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))closure #1 in closure #1 in closure #1 in closure #1 in LACDTOEnvironmentProvider.performFetchEnvironment(policy:options:completion:));
}

uint64_t partial apply for closure #1 in LACDTOEnvironmentProvider.performFetchEnvironment(policy:options:completion:)(uint64_t a1, uint64_t (*a2)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  _QWORD *v2;

  return a2(a1, v2[2], v2[3], v2[4], v2[5], v2[6]);
}

uint64_t sub_240A2AA08()
{
  uint64_t v0;

  swift_release();
  swift_release();
  swift_unknownObjectRelease();

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #1 in closure #1 in closure #1 in closure #1 in LACDTOEnvironmentProvider.performFetchEnvironment(policy:options:completion:)(uint64_t a1, uint64_t a2)
{
  return partial apply for closure #1 in closure #1 in LACDTOEnvironmentProvider.performFetchEnvironment(policy:options:completion:)(a1, a2, (uint64_t (*)(uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))closure #1 in closure #1 in closure #1 in closure #1 in closure #1 in LACDTOEnvironmentProvider.performFetchEnvironment(policy:options:completion:));
}

uint64_t partial apply for closure #1 in closure #1 in LACDTOEnvironmentProvider.performFetchEnvironment(policy:options:completion:)(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  _QWORD *v3;

  return a3(a1, a2, v3[2], v3[3], v3[4], v3[5], v3[6], v3[7]);
}

uint64_t type metadata accessor for LACDTOMutableLostModeFetchRequest(uint64_t a1, unint64_t *a2)
{
  uint64_t result;

  result = *a2;
  if (!*a2)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, a2);
  }
  return result;
}

unint64_t specialized Dictionary.init(dictionaryLiteral:)(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t result;
  char v9;
  uint64_t *v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;

  if (!*(_QWORD *)(a1 + 16))
  {
    v2 = (_QWORD *)MEMORY[0x24BEE4B00];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, [Int : Any]>);
  v2 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  v4 = (uint64_t *)(a1 + 48);
  while (1)
  {
    v5 = *(v4 - 2);
    v6 = *(v4 - 1);
    v7 = *v4;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    result = specialized __RawDictionaryStorage.find<A>(_:)(v5, v6);
    if ((v9 & 1) != 0)
      break;
    *(_QWORD *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v10 = (uint64_t *)(v2[6] + 16 * result);
    *v10 = v5;
    v10[1] = v6;
    *(_QWORD *)(v2[7] + 8 * result) = v7;
    v11 = v2[2];
    v12 = __OFADD__(v11, 1);
    v13 = v11 + 1;
    if (v12)
      goto LABEL_11;
    v2[2] = v13;
    v4 += 3;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t result;
  char v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  _OWORD v15[2];
  uint64_t v16;
  __int128 v17;

  if (!*(_QWORD *)(a1 + 16))
  {
    v3 = (_QWORD *)MEMORY[0x24BEE4B00];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _DictionaryStorage<AnyHashable, Any>);
  v2 = static _DictionaryStorage.allocate(capacity:)();
  v3 = (_QWORD *)v2;
  v4 = *(_QWORD *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  v5 = v2 + 64;
  v6 = a1 + 32;
  swift_retain();
  while (1)
  {
    outlined init with copy of URL?(v6, (uint64_t)v15, &demangling cache variable for type metadata for (AnyHashable, Any));
    result = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v15);
    if ((v8 & 1) != 0)
      break;
    *(_QWORD *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v9 = v3[6] + 40 * result;
    v10 = v15[0];
    v11 = v15[1];
    *(_QWORD *)(v9 + 32) = v16;
    *(_OWORD *)v9 = v10;
    *(_OWORD *)(v9 + 16) = v11;
    result = (unint64_t)outlined init with take of Any(&v17, (_OWORD *)(v3[7] + 32 * result));
    v12 = v3[2];
    v13 = __OFADD__(v12, 1);
    v14 = v12 + 1;
    if (v13)
      goto LABEL_11;
    v3[2] = v14;
    v6 += 72;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  return specialized Dictionary.init(dictionaryLiteral:)(a1, &demangling cache variable for type metadata for (UUID, LACOnenessAuthenticatorPendingRequest), (uint64_t *)&demangling cache variable for type metadata for _DictionaryStorage<UUID, LACOnenessAuthenticatorPendingRequest>);
}

{
  return specialized Dictionary.init(dictionaryLiteral:)(a1, (uint64_t *)&demangling cache variable for type metadata for (UUID, LACOnenessControllerPendingRequest), &demangling cache variable for type metadata for _DictionaryStorage<UUID, LACOnenessControllerPendingRequest>);
}

{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t result;
  char v10;
  uint64_t *v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;

  if (!*(_QWORD *)(a1 + 16))
  {
    v3 = (_QWORD *)MEMORY[0x24BEE4B00];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
  v2 = static _DictionaryStorage.allocate(capacity:)();
  v3 = (_QWORD *)v2;
  v4 = *(_QWORD *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  v5 = v2 + 64;
  v6 = a1 + 32;
  swift_retain();
  while (1)
  {
    outlined init with copy of URL?(v6, (uint64_t)&v15, &demangling cache variable for type metadata for (String, Any));
    v7 = v15;
    v8 = v16;
    result = specialized __RawDictionaryStorage.find<A>(_:)(v15, v16);
    if ((v10 & 1) != 0)
      break;
    *(_QWORD *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v11 = (uint64_t *)(v3[6] + 16 * result);
    *v11 = v7;
    v11[1] = v8;
    result = (unint64_t)outlined init with take of Any(&v17, (_OWORD *)(v3[7] + 32 * result));
    v12 = v3[2];
    v13 = __OFADD__(v12, 1);
    v14 = v12 + 1;
    if (v13)
      goto LABEL_11;
    v3[2] = v14;
    v6 += 48;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  _QWORD *v2;
  uint64_t v3;
  void **v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  id v8;
  unint64_t result;
  char v10;
  uint64_t *v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;

  if (!*(_QWORD *)(a1 + 16))
  {
    v2 = (_QWORD *)MEMORY[0x24BEE4B00];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _DictionaryStorage<String, LACDTOMutablePendingPolicyEvaluation>);
  v2 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  v4 = (void **)(a1 + 48);
  while (1)
  {
    v5 = (uint64_t)*(v4 - 2);
    v6 = (uint64_t)*(v4 - 1);
    v7 = *v4;
    swift_bridgeObjectRetain();
    v8 = v7;
    result = specialized __RawDictionaryStorage.find<A>(_:)(v5, v6);
    if ((v10 & 1) != 0)
      break;
    *(_QWORD *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v11 = (uint64_t *)(v2[6] + 16 * result);
    *v11 = v5;
    v11[1] = v6;
    *(_QWORD *)(v2[7] + 8 * result) = v8;
    v12 = v2[2];
    v13 = __OFADD__(v12, 1);
    v14 = v12 + 1;
    if (v13)
      goto LABEL_11;
    v2[2] = v14;
    v4 += 3;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  uint64_t v1;
  _QWORD *v3;
  uint64_t i;
  uint64_t v5;
  unint64_t result;
  char v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Int, Any>);
    v3 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
    for (i = a1 + 32; ; i += 40)
    {
      outlined init with copy of URL?(i, (uint64_t)&v11, &demangling cache variable for type metadata for (Int, Any));
      v5 = v11;
      result = specialized __RawDictionaryStorage.find<A>(_:)(v11);
      if ((v7 & 1) != 0)
        break;
      *(_QWORD *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
      *(_QWORD *)(v3[6] + 8 * result) = v5;
      result = (unint64_t)outlined init with take of Any(&v12, (_OWORD *)(v3[7] + 32 * result));
      v8 = v3[2];
      v9 = __OFADD__(v8, 1);
      v10 = v8 + 1;
      if (v9)
        goto LABEL_10;
      v3[2] = v10;
      if (!--v1)
        return (unint64_t)v3;
    }
    __break(1u);
LABEL_10:
    __break(1u);
  }
  else
  {
    return MEMORY[0x24BEE4B00];
  }
  return result;
}

unint64_t specialized Dictionary.init(dictionaryLiteral:)(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t result;
  char v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  _QWORD v26[2];

  v6 = __swift_instantiateConcreteTypeFromMangledName(a2);
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!*(_QWORD *)(a1 + 16))
  {
    v11 = (_QWORD *)MEMORY[0x24BEE4B00];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(a3);
  v10 = static _DictionaryStorage.allocate(capacity:)();
  v11 = (_QWORD *)v10;
  v12 = *(_QWORD *)(a1 + 16);
  if (!v12)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v11;
  }
  v13 = *(int *)(v6 + 48);
  v14 = v10 + 64;
  v15 = (*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  v26[1] = a1;
  v16 = a1 + v15;
  v17 = *(_QWORD *)(v7 + 72);
  swift_retain();
  while (1)
  {
    outlined init with copy of URL?(v16, (uint64_t)v9, a2);
    result = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v9);
    if ((v19 & 1) != 0)
      break;
    v20 = result;
    *(_QWORD *)(v14 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v21 = v11[6];
    v22 = type metadata accessor for UUID();
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(*(_QWORD *)(v22 - 8) + 32))(v21 + *(_QWORD *)(*(_QWORD *)(v22 - 8) + 72) * v20, v9, v22);
    *(_QWORD *)(v11[7] + 8 * v20) = *(_QWORD *)&v9[v13];
    v23 = v11[2];
    v24 = __OFADD__(v23, 1);
    v25 = v23 + 1;
    if (v24)
      goto LABEL_11;
    v11[2] = v25;
    v16 += v17;
    if (!--v12)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t LACOnenessAuthenticationProviderDummy.delegate.getter()
{
  swift_beginAccess();
  return swift_unknownObjectRetain();
}

uint64_t LACOnenessAuthenticationProviderDummy.delegate.setter(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = (_QWORD *)(v1 + OBJC_IVAR____TtC23LocalAuthenticationCore37LACOnenessAuthenticationProviderDummy_delegate);
  swift_beginAccess();
  *v3 = a1;
  return swift_unknownObjectRelease();
}

uint64_t (*LACOnenessAuthenticationProviderDummy.delegate.modify())()
{
  swift_beginAccess();
  return LACDTOMutablePendingPolicyEvaluation.callbackURL.modify;
}

BOOL LACOnenessAuthenticationProviderDummy.isAvailable.getter()
{
  id v0;
  id v1;

  v0 = objc_msgSend((id)objc_opt_self(), sel_isCompanionSessionActive);
  v1 = v0;
  if (v0)

  return v1 != 0;
}

uint64_t LACOnenessAuthenticationProviderDummy.domainState(for:completion:)(uint64_t a1, void (*a2)(void), uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  Class isa;
  id v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t inited;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  __int128 v31;
  uint64_t v32;
  void (*v33)(void);

  v5 = type metadata accessor for String.Encoding();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v31 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for UUID();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v31 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (objc_msgSend((id)objc_opt_self(), sel_isCompanionDeviceMocked))
  {
    UUID.init()();
    UUID.uuidString.getter();
    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
    static String.Encoding.utf8.getter();
    v13 = String.data(using:allowLossyConversion:)();
    v15 = v14;
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    if (v15 >> 60 == 15)
    {
      isa = 0;
    }
    else
    {
      outlined copy of Data._Representation(v13, v15);
      isa = Data._bridgeToObjectiveC()().super.isa;
      outlined consume of Data?(v13, v15);
    }
    v18 = objc_msgSend((id)objc_opt_self(), sel_createHashForDomainState_, isa);

    if (v18)
    {
      v19 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
      v21 = v20;

      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, [Int : Any])>);
      inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_240A7D040;
      *(_QWORD *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
      *(_QWORD *)(inited + 40) = v23;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, Any)>);
      v24 = swift_initStackObject();
      v31 = xmmword_240A7D050;
      v33 = a2;
      v32 = a3;
      *(_QWORD *)(v24 + 32) = 2;
      *(_OWORD *)(v24 + 16) = xmmword_240A7D050;
      *(_QWORD *)(v24 + 64) = MEMORY[0x24BEE1328];
      *(_BYTE *)(v24 + 40) = 1;
      v25 = specialized Dictionary.init(dictionaryLiteral:)(v24);
      swift_setDeallocating();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, Any));
      swift_arrayDestroy();
      *(_QWORD *)(inited + 48) = v25;
      *(_QWORD *)(inited + 56) = static String._unconditionallyBridgeFromObjectiveC(_:)();
      *(_QWORD *)(inited + 64) = v26;
      v27 = swift_initStackObject();
      *(_QWORD *)(v27 + 32) = 2;
      *(_OWORD *)(v27 + 16) = v31;
      *(_QWORD *)(v27 + 64) = MEMORY[0x24BDCDDE8];
      *(_QWORD *)(v27 + 40) = v19;
      *(_QWORD *)(v27 + 48) = v21;
      v28 = specialized Dictionary.init(dictionaryLiteral:)(v27);
      swift_setDeallocating();
      outlined copy of Data._Representation(v19, v21);
      swift_arrayDestroy();
      *(_QWORD *)(inited + 72) = v28;
      v29 = specialized Dictionary.init(dictionaryLiteral:)(inited);
      v30 = specialized _dictionaryUpCast<A, B, C, D>(_:)(v29);
      swift_bridgeObjectRelease();
      ((void (*)(uint64_t, _QWORD))v33)(v30, 0);
      swift_bridgeObjectRelease();
      outlined consume of Data._Representation(v19, v21);
    }
    else
    {
      specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
      a2();
      swift_bridgeObjectRelease();
    }
    return outlined consume of Data?(v13, v15);
  }
  else
  {
    specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
    a2();
    return swift_bridgeObjectRelease();
  }
}

uint64_t specialized _dictionaryUpCast<A, B, C, D>(_:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t result;
  int64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  int64_t v15;
  int64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char v22;
  unint64_t v23;
  BOOL v24;
  uint64_t v25;
  int64_t v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  _OWORD v35[2];
  _OWORD v36[2];

  if (*(_QWORD *)(a1 + 16))
  {
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _DictionaryStorage<AnyHashable, Any>);
    v2 = static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    v2 = MEMORY[0x24BEE4B00];
  }
  v27 = a1 + 64;
  v3 = -1 << *(_BYTE *)(a1 + 32);
  if (-v3 < 64)
    v4 = ~(-1 << -(char)v3);
  else
    v4 = -1;
  v5 = v4 & *(_QWORD *)(a1 + 64);
  v26 = (unint64_t)(63 - v3) >> 6;
  v6 = v2 + 64;
  swift_bridgeObjectRetain();
  result = swift_retain();
  v8 = 0;
  while (1)
  {
    if (v5)
    {
      v11 = __clz(__rbit64(v5));
      v5 &= v5 - 1;
      v12 = v11 | (v8 << 6);
      goto LABEL_28;
    }
    v13 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }
    if (v13 >= v26)
      goto LABEL_37;
    v14 = *(_QWORD *)(v27 + 8 * v13);
    v15 = v8 + 1;
    if (!v14)
    {
      v15 = v8 + 2;
      if (v8 + 2 >= v26)
        goto LABEL_37;
      v14 = *(_QWORD *)(v27 + 8 * v15);
      if (!v14)
      {
        v15 = v8 + 3;
        if (v8 + 3 >= v26)
          goto LABEL_37;
        v14 = *(_QWORD *)(v27 + 8 * v15);
        if (!v14)
        {
          v15 = v8 + 4;
          if (v8 + 4 >= v26)
            goto LABEL_37;
          v14 = *(_QWORD *)(v27 + 8 * v15);
          if (!v14)
            break;
        }
      }
    }
LABEL_27:
    v5 = (v14 - 1) & v14;
    v12 = __clz(__rbit64(v14)) + (v15 << 6);
    v8 = v15;
LABEL_28:
    v17 = (_QWORD *)(*(_QWORD *)(a1 + 48) + 16 * v12);
    v18 = v17[1];
    *(_QWORD *)&v36[0] = *v17;
    *((_QWORD *)&v36[0] + 1) = v18;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_dynamicCast();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Int : Any]);
    swift_dynamicCast();
    v32 = v28;
    v33 = v29;
    v34 = v30;
    outlined init with take of Any(&v31, v35);
    v28 = v32;
    v29 = v33;
    v30 = v34;
    outlined init with take of Any(v35, v36);
    outlined init with take of Any(v36, &v32);
    result = AnyHashable._rawHashValue(seed:)(*(_QWORD *)(v2 + 40));
    v19 = -1 << *(_BYTE *)(v2 + 32);
    v20 = result & ~v19;
    v21 = v20 >> 6;
    if (((-1 << v20) & ~*(_QWORD *)(v6 + 8 * (v20 >> 6))) != 0)
    {
      v9 = __clz(__rbit64((-1 << v20) & ~*(_QWORD *)(v6 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v22 = 0;
      v23 = (unint64_t)(63 - v19) >> 6;
      do
      {
        if (++v21 == v23 && (v22 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        v24 = v21 == v23;
        if (v21 == v23)
          v21 = 0;
        v22 |= v24;
        v25 = *(_QWORD *)(v6 + 8 * v21);
      }
      while (v25 == -1);
      v9 = __clz(__rbit64(~v25)) + (v21 << 6);
    }
    *(_QWORD *)(v6 + ((v9 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v9;
    v10 = *(_QWORD *)(v2 + 48) + 40 * v9;
    *(_OWORD *)v10 = v28;
    *(_OWORD *)(v10 + 16) = v29;
    *(_QWORD *)(v10 + 32) = v30;
    result = (uint64_t)outlined init with take of Any(&v32, (_OWORD *)(*(_QWORD *)(v2 + 56) + 32 * v9));
    ++*(_QWORD *)(v2 + 16);
  }
  v16 = v8 + 5;
  if (v8 + 5 >= v26)
  {
LABEL_37:
    swift_release();
    outlined consume of [String : [Int : Any]].Iterator._Variant();
    return v2;
  }
  v14 = *(_QWORD *)(v27 + 8 * v16);
  if (v14)
  {
    v15 = v8 + 5;
    goto LABEL_27;
  }
  while (1)
  {
    v15 = v16 + 1;
    if (__OFADD__(v16, 1))
      break;
    if (v15 >= v26)
      goto LABEL_37;
    v14 = *(_QWORD *)(v27 + 8 * v15);
    ++v16;
    if (v14)
      goto LABEL_27;
  }
LABEL_39:
  __break(1u);
  return result;
}

id LACOnenessAuthenticationProviderDummy.__allocating_init(replyQueue:)(uint64_t a1)
{
  objc_class *v1;
  char *v3;
  objc_super v5;

  v3 = (char *)objc_allocWithZone(v1);
  *(_QWORD *)&v3[OBJC_IVAR____TtC23LocalAuthenticationCore37LACOnenessAuthenticationProviderDummy_delegate] = 0;
  *(_QWORD *)&v3[OBJC_IVAR____TtC23LocalAuthenticationCore37LACOnenessAuthenticationProviderDummy_replyQueue] = a1;
  v5.receiver = v3;
  v5.super_class = v1;
  return objc_msgSendSuper2(&v5, sel_init);
}

id LACOnenessAuthenticationProviderDummy.init(replyQueue:)(uint64_t a1)
{
  char *v1;
  objc_class *ObjectType;
  objc_super v5;

  ObjectType = (objc_class *)swift_getObjectType();
  *(_QWORD *)&v1[OBJC_IVAR____TtC23LocalAuthenticationCore37LACOnenessAuthenticationProviderDummy_delegate] = 0;
  *(_QWORD *)&v1[OBJC_IVAR____TtC23LocalAuthenticationCore37LACOnenessAuthenticationProviderDummy_replyQueue] = a1;
  v5.receiver = v1;
  v5.super_class = ObjectType;
  return objc_msgSendSuper2(&v5, sel_init);
}

uint64_t LACOnenessAuthenticationProviderDummy.authenticateClient(_:withAcmContext:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v8;

  v3 = type metadata accessor for UUID();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  UUID.init()();
  (*(void (**)(uint64_t, char *, uint64_t))(v4 + 16))(a1, v6, v3);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v4 + 56))(a1, 0, 1, v3);
  $defer #1 () in LACOnenessAuthenticationProviderDummy.authenticateClient(_:withAcmContext:)(v1, (uint64_t)v6);
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

void $defer #1 () in LACOnenessAuthenticationProviderDummy.authenticateClient(_:withAcmContext:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void *v17;
  _QWORD v18[2];
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD aBlock[6];

  v4 = type metadata accessor for DispatchWorkItemFlags();
  v21 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DispatchQoS();
  v19 = *(_QWORD *)(v7 - 8);
  v20 = v7;
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for UUID();
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(_QWORD *)(v11 + 64);
  MEMORY[0x24BDAC7A8](v10);
  v13 = objc_msgSend((id)objc_opt_self(), sel_isCompanionSessionActive);

  if (!v13)
  {
    v18[1] = *(_QWORD *)(a1 + OBJC_IVAR____TtC23LocalAuthenticationCore37LACOnenessAuthenticationProviderDummy_replyQueue);
    v14 = swift_allocObject();
    swift_unknownObjectWeakInit();
    (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))((char *)v18 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), a2, v10);
    v15 = (*(unsigned __int8 *)(v11 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
    v16 = swift_allocObject();
    *(_QWORD *)(v16 + 16) = v14;
    (*(void (**)(unint64_t, char *, uint64_t))(v11 + 32))(v16 + v15, (char *)v18 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), v10);
    aBlock[4] = partial apply for closure #1 in $defer #1 () in LACOnenessAuthenticationProviderDummy.authenticateClient(_:withAcmContext:);
    aBlock[5] = v16;
    aBlock[0] = MEMORY[0x24BDAC760];
    aBlock[1] = 1107296256;
    aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
    aBlock[3] = &block_descriptor_4;
    v17 = _Block_copy(aBlock);
    swift_retain();
    static DispatchQoS.unspecified.getter();
    v22 = MEMORY[0x24BEE4AF8];
    lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
    lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]();
    dispatch thunk of SetAlgebra.init<A>(_:)();
    MEMORY[0x242686654](0, v9, v6, v17);
    _Block_release(v17);
    (*(void (**)(char *, uint64_t))(v21 + 8))(v6, v4);
    (*(void (**)(char *, uint64_t))(v19 + 8))(v9, v20);
    swift_release();
    swift_release();
  }
}

void LACOnenessAuthenticationProviderDummy.cancelAuthentication(with:)()
{
  uint64_t v0;
  uint64_t v1;
  id v2;
  void **v3;
  void *v4;
  Class isa;
  void *v6;
  void *v7;
  id v8;
  void *v9;

  v1 = v0;
  v2 = objc_msgSend((id)objc_opt_self(), sel_isCompanionSessionActive);

  if (v2)
  {
    v3 = (void **)(v0 + OBJC_IVAR____TtC23LocalAuthenticationCore37LACOnenessAuthenticationProviderDummy_delegate);
    swift_beginAccess();
    v4 = *v3;
    if (v4)
    {
      swift_unknownObjectRetain();
      isa = UUID._bridgeToObjectiveC()().super.isa;
      v6 = (void *)objc_opt_self();
      v7 = (void *)MEMORY[0x2426863FC](0xD00000000000001CLL, 0x8000000240A83B80);
      v8 = objc_msgSend(v6, sel_errorWithCode_debugDescription_, -4, v7);

      v9 = (void *)_convertErrorToNSError(_:)();
      objc_msgSend(v4, sel_authenticationProvider_didFailAuthenticationWithID_error_, v1, isa, v9);

      swift_unknownObjectRelease();
    }
  }
}

id LACOnenessAuthenticationProviderDummy.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

void LACOnenessAuthenticationProviderDummy.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

id LACOnenessAuthenticationProviderDummy.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

void closure #1 in $defer #1 () in LACOnenessAuthenticationProviderDummy.authenticateClient(_:withAcmContext:)(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  uint64_t v3;
  void *v4;
  void **v5;
  void *v6;
  uint64_t v7;
  void *v8;
  Class isa;
  void *v10;
  void *v11;
  id v12;
  void *v13;

  v1 = a1 + 16;
  swift_beginAccess();
  v2 = (void *)MEMORY[0x242687740](v1);

  if (v2)
  {
    swift_beginAccess();
    v3 = MEMORY[0x242687740](v1);
    if (v3)
    {
      v4 = (void *)v3;
      v5 = (void **)(v3 + OBJC_IVAR____TtC23LocalAuthenticationCore37LACOnenessAuthenticationProviderDummy_delegate);
      swift_beginAccess();
      v6 = *v5;
      if (v6)
      {
        swift_unknownObjectRetain();

        swift_beginAccess();
        v7 = MEMORY[0x242687740](v1);
        if (v7)
        {
          v8 = (void *)v7;
          isa = UUID._bridgeToObjectiveC()().super.isa;
          v10 = (void *)objc_opt_self();
          v11 = (void *)MEMORY[0x2426863FC](0xD000000000000026, 0x8000000240A83CD0);
          v12 = objc_msgSend(v10, sel_errorWithCode_debugDescription_, -1, v11);

          v13 = (void *)_convertErrorToNSError(_:)();
          objc_msgSend(v6, sel_authenticationProvider_didFailAuthenticationWithID_error_, v8, isa, v13);

          swift_unknownObjectRelease();
        }
        else
        {
          __break(1u);
        }
      }
      else
      {

      }
    }
  }
}

uint64_t type metadata accessor for LACOnenessAuthenticationProviderDummy()
{
  return objc_opt_self();
}

uint64_t method lookup function for LACOnenessAuthenticationProviderDummy()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of LACOnenessAuthenticationProviderDummy.__allocating_init(replyQueue:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 96))();
}

void specialized LACOnenessAuthenticationProviderDummy.domainState(for:completion:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  objc_class *v10;
  unint64_t v11;
  unint64_t v12;
  Class isa;
  id v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t inited;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  Class v26;
  Class v27;
  Class v28;
  __int128 v29;
  Class v30;

  v2 = type metadata accessor for String.Encoding();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v29 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for UUID();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (objc_msgSend((id)objc_opt_self(), sel_isCompanionDeviceMocked))
  {
    UUID.init()();
    UUID.uuidString.getter();
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    static String.Encoding.utf8.getter();
    v10 = (objc_class *)String.data(using:allowLossyConversion:)();
    v12 = v11;
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    if (v12 >> 60 == 15)
    {
      isa = 0;
    }
    else
    {
      outlined copy of Data._Representation((uint64_t)v10, v12);
      isa = Data._bridgeToObjectiveC()().super.isa;
      outlined consume of Data?((uint64_t)v10, v12);
    }
    v14 = objc_msgSend((id)objc_opt_self(), sel_createHashForDomainState_, isa);

    if (v14)
    {
      v15 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
      v17 = v16;

      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, [Int : Any])>);
      inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_240A7D040;
      *(_QWORD *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
      *(_QWORD *)(inited + 40) = v19;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, Any)>);
      v20 = swift_initStackObject();
      v29 = xmmword_240A7D050;
      v30 = v10;
      *(_QWORD *)(v20 + 32) = 2;
      *(_OWORD *)(v20 + 16) = xmmword_240A7D050;
      *(_QWORD *)(v20 + 64) = MEMORY[0x24BEE1328];
      *(_BYTE *)(v20 + 40) = 1;
      v21 = specialized Dictionary.init(dictionaryLiteral:)(v20);
      swift_setDeallocating();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, Any));
      swift_arrayDestroy();
      *(_QWORD *)(inited + 48) = v21;
      *(_QWORD *)(inited + 56) = static String._unconditionallyBridgeFromObjectiveC(_:)();
      *(_QWORD *)(inited + 64) = v22;
      v23 = swift_initStackObject();
      *(_QWORD *)(v23 + 32) = 2;
      *(_OWORD *)(v23 + 16) = v29;
      *(_QWORD *)(v23 + 64) = MEMORY[0x24BDCDDE8];
      *(_QWORD *)(v23 + 40) = v15;
      *(_QWORD *)(v23 + 48) = v17;
      v24 = specialized Dictionary.init(dictionaryLiteral:)(v23);
      swift_setDeallocating();
      outlined copy of Data._Representation(v15, v17);
      swift_arrayDestroy();
      *(_QWORD *)(inited + 72) = v24;
      v25 = specialized Dictionary.init(dictionaryLiteral:)(inited);
      specialized _dictionaryUpCast<A, B, C, D>(_:)(v25);
      swift_bridgeObjectRelease();
      v26 = Dictionary._bridgeToObjectiveC()().super.isa;
      (*(void (**)(uint64_t, Class, _QWORD))(a1 + 16))(a1, v26, 0);
      swift_bridgeObjectRelease();

      outlined consume of Data._Representation(v15, v17);
      v27 = v30;
    }
    else
    {
      specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
      v28 = Dictionary._bridgeToObjectiveC()().super.isa;
      (*(void (**)(uint64_t, Class, _QWORD))(a1 + 16))(a1, v28, 0);
      swift_bridgeObjectRelease();

      v27 = v10;
    }
    outlined consume of Data?((uint64_t)v27, v12);
  }
  else
  {
    specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
    v30 = Dictionary._bridgeToObjectiveC()().super.isa;
    (*(void (**)(uint64_t, Class, _QWORD))(a1 + 16))(a1, v30, 0);
    swift_bridgeObjectRelease();

  }
}

uint64_t sub_240A2CAF4()
{
  swift_unknownObjectWeakDestroy();
  return swift_deallocObject();
}

uint64_t sub_240A2CB18()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v1 = type metadata accessor for UUID();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  return swift_deallocObject();
}

void partial apply for closure #1 in $defer #1 () in LACOnenessAuthenticationProviderDummy.authenticateClient(_:withAcmContext:)()
{
  uint64_t v0;

  type metadata accessor for UUID();
  closure #1 in $defer #1 () in LACOnenessAuthenticationProviderDummy.authenticateClient(_:withAcmContext:)(*(_QWORD *)(v0 + 16));
}

uint64_t block_copy_helper_2(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_2()
{
  return swift_release();
}

unint64_t lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A];
  if (!lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A])
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
    result = MEMORY[0x242687614](MEMORY[0x24BEE12C8], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A]);
  }
  return result;
}

char *LACOnenessAuthenticatorModel.mockedAuthProvider.getter()
{
  char *v0;
  uint64_t v1;
  char *v2;
  void *v3;
  objc_class *v4;
  char *v5;
  id v6;
  char *v7;
  char *v8;
  char *v9;
  objc_super v11;

  v1 = OBJC_IVAR____TtC23LocalAuthenticationCore28LACOnenessAuthenticatorModel____lazy_storage___mockedAuthProvider;
  if (*(_QWORD *)&v0[OBJC_IVAR____TtC23LocalAuthenticationCore28LACOnenessAuthenticatorModel____lazy_storage___mockedAuthProvider])
  {
    v2 = *(char **)&v0[OBJC_IVAR____TtC23LocalAuthenticationCore28LACOnenessAuthenticatorModel____lazy_storage___mockedAuthProvider];
  }
  else
  {
    v3 = *(void **)&v0[OBJC_IVAR____TtC23LocalAuthenticationCore28LACOnenessAuthenticatorModel_replyQueue];
    v4 = (objc_class *)type metadata accessor for LACOnenessAuthenticationProviderDummy();
    v5 = (char *)objc_allocWithZone(v4);
    *(_QWORD *)&v5[OBJC_IVAR____TtC23LocalAuthenticationCore37LACOnenessAuthenticationProviderDummy_delegate] = 0;
    *(_QWORD *)&v5[OBJC_IVAR____TtC23LocalAuthenticationCore37LACOnenessAuthenticationProviderDummy_replyQueue] = v3;
    v11.receiver = v5;
    v11.super_class = v4;
    v6 = v3;
    v7 = (char *)objc_msgSendSuper2(&v11, sel_init);
    v8 = &v7[OBJC_IVAR____TtC23LocalAuthenticationCore37LACOnenessAuthenticationProviderDummy_delegate];
    swift_beginAccess();
    *(_QWORD *)v8 = v0;
    swift_unknownObjectRelease();
    *(_QWORD *)&v0[v1] = v7;
    v9 = v0;
    v2 = v7;
    swift_unknownObjectRelease();
  }
  swift_unknownObjectRetain();
  return v2;
}

char *LACOnenessAuthenticatorModel.__allocating_init(authenticationProvider:clientInfoProvider:replyQueue:)(uint64_t a1, uint64_t a2, void *a3)
{
  objc_class *v3;
  id v7;

  v7 = objc_allocWithZone(v3);
  return LACOnenessAuthenticatorModel.init(authenticationProvider:clientInfoProvider:replyQueue:)(a1, a2, a3);
}

char *LACOnenessAuthenticatorModel.init(authenticationProvider:clientInfoProvider:replyQueue:)(uint64_t a1, uint64_t a2, void *a3)
{
  char *v3;
  char *v4;
  objc_class *ObjectType;
  uint64_t v9;
  char *v10;
  id v11;
  char *v12;
  void *v13;
  char *v14;
  id v15;
  char *v16;
  objc_super v18;

  v4 = v3;
  ObjectType = (objc_class *)swift_getObjectType();
  *(_QWORD *)&v4[OBJC_IVAR____TtC23LocalAuthenticationCore28LACOnenessAuthenticatorModel____lazy_storage___mockedAuthProvider] = 0;
  v9 = OBJC_IVAR____TtC23LocalAuthenticationCore28LACOnenessAuthenticatorModel_pendingSessions;
  v10 = v4;
  *(_QWORD *)&v4[v9] = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  *(_QWORD *)&v10[OBJC_IVAR____TtC23LocalAuthenticationCore28LACOnenessAuthenticatorModel_authProvider] = a1;
  *(_QWORD *)&v10[OBJC_IVAR____TtC23LocalAuthenticationCore28LACOnenessAuthenticatorModel_clientInfoProvider] = a2;
  *(_QWORD *)&v10[OBJC_IVAR____TtC23LocalAuthenticationCore28LACOnenessAuthenticatorModel_replyQueue] = a3;
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  v11 = a3;

  v18.receiver = v10;
  v18.super_class = ObjectType;
  v12 = (char *)objc_msgSendSuper2(&v18, sel_init);
  v13 = *(void **)&v12[OBJC_IVAR____TtC23LocalAuthenticationCore28LACOnenessAuthenticatorModel_authProvider];
  v14 = v12;
  objc_msgSend(v13, sel_setDelegate_, v14);
  v15 = objc_msgSend((id)objc_opt_self(), sel_sharedInstance);
  v16 = v14;
  objc_msgSend(v15, sel_addObserver_notification_, v16, CFSTR("com.apple.LocalAuthentication.GlobalDomainDidChange"));

  swift_unknownObjectRelease();
  swift_unknownObjectRelease();

  return v16;
}

id LACOnenessAuthenticatorModel.__deallocating_deinit()
{
  void *v0;
  objc_class *ObjectType;
  id v2;
  objc_super v4;

  ObjectType = (objc_class *)swift_getObjectType();
  v2 = objc_msgSend((id)objc_opt_self(), sel_sharedInstance);
  objc_msgSend(v2, sel_removeObserver_, v0);

  v4.receiver = v0;
  v4.super_class = ObjectType;
  return objc_msgSendSuper2(&v4, sel_dealloc);
}

uint64_t LACOnenessAuthenticatorModel.isAvailable.getter()
{
  uint64_t v0;
  void *v1;
  id v2;
  id v3;
  id v4;
  char *v5;

  v1 = (void *)objc_opt_self();
  v2 = objc_msgSend(v1, sel_isCompanionSessionActive);

  if (v2)
    return 1;
  v4 = objc_msgSend(v1, sel_isCompanionSessionActive);

  if (v4)
  {
    v5 = LACOnenessAuthenticatorModel.mockedAuthProvider.getter();
  }
  else
  {
    v5 = *(char **)(v0 + OBJC_IVAR____TtC23LocalAuthenticationCore28LACOnenessAuthenticatorModel_authProvider);
    swift_unknownObjectRetain();
  }
  v3 = objc_msgSend(v5, sel_isAvailable);
  swift_unknownObjectRelease();
  return (uint64_t)v3;
}

uint64_t LACOnenessAuthenticatorModel.domainState(for:completion:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  id v7;
  char *v8;
  void *v9;
  _QWORD v11[6];

  v7 = objc_msgSend((id)objc_opt_self(), sel_isCompanionSessionActive);

  if (v7)
  {
    v8 = LACOnenessAuthenticatorModel.mockedAuthProvider.getter();
  }
  else
  {
    v8 = *(char **)(v3 + OBJC_IVAR____TtC23LocalAuthenticationCore28LACOnenessAuthenticatorModel_authProvider);
    swift_unknownObjectRetain();
  }
  v11[4] = a2;
  v11[5] = a3;
  v11[0] = MEMORY[0x24BDAC760];
  v11[1] = 1107296256;
  v11[2] = thunk for @escaping @callee_guaranteed (@guaranteed [AnyHashable : Any]?, @guaranteed Error?) -> ();
  v11[3] = &block_descriptor_5;
  v9 = _Block_copy(v11);
  swift_retain();
  swift_release();
  objc_msgSend(v8, sel_domainStateForRequest_completion_, a1, v9);
  _Block_release(v9);
  return swift_unknownObjectRelease();
}

uint64_t block_copy_helper_3(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_3()
{
  return swift_release();
}

void LACOnenessAuthenticatorModel.authenticateRequest(_:completion:)(void *a1, void (*a2)(_QWORD, id), uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  id v25;
  void *v26;
  unint64_t v27;
  id v28;
  id v29;
  Class isa;
  id v31;
  char *v32;
  id v33;
  Swift::String v34;
  Swift::String v35;
  Swift::String v36;
  void *v37;
  void *v38;
  id v39;
  id v40;
  id v41;
  uint64_t v42;
  Swift::String v43;
  void *v44;
  void *v45;
  id v46;
  id v47;
  void (*v48)(_QWORD, id);
  uint64_t v49;
  uint64_t v50;
  Class v51;
  id v52;
  uint64_t v53;
  void (*v54)(char *, uint64_t, uint64_t);
  uint64_t v55;
  char *v56;
  void (*v57)(uint64_t, char *, uint64_t);
  char *v58;
  uint64_t v59;
  id v60;
  _QWORD *v61;
  uint64_t *v62;
  char isUniquelyReferenced_nonNull_native;
  void (*v64)(uint64_t, uint64_t);
  id v65;
  uint64_t v66;
  Swift::String v67;
  Swift::String v68;
  Swift::String v69;
  Swift::String v70;
  Swift::String v71;
  id v72;
  uint64_t v73;
  Swift::String v74;
  Swift::String v75;
  Swift::String v76;
  void *v77;
  void *v78;
  id v79;
  id v80;
  char *v81;
  char *v82;
  id v83;
  void (*v84)(_QWORD, id);
  uint64_t v85;
  uint64_t v86;
  char *v87;
  char *v88;
  id v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  uint64_t v94;
  uint64_t v95;
  Swift::String v96;

  v6 = type metadata accessor for LACLogger();
  v7 = MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v81 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = MEMORY[0x24BDAC7A8](v7);
  v12 = (char *)&v81 - v11;
  MEMORY[0x24BDAC7A8](v10);
  v14 = (char *)&v81 - v13;
  v15 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  MEMORY[0x24BDAC7A8](v15);
  v17 = (char *)&v81 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for UUID();
  v91 = *(_QWORD *)(v18 - 8);
  v19 = MEMORY[0x24BDAC7A8](v18);
  v87 = (char *)&v81 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = MEMORY[0x24BDAC7A8](v19);
  v90 = (char *)&v81 - v22;
  MEMORY[0x24BDAC7A8](v21);
  v24 = (char *)&v81 - v23;
  v25 = objc_msgSend(a1, sel_externalizedContext);
  if (!v25)
  {
    v33 = LACLogABM();
    Logger.init(_:)();
    v96._countAndFlagsBits = 0;
    v96._object = (void *)0xE000000000000000;
    _StringGuts.grow(_:)(33);
    swift_bridgeObjectRelease();
    v96._countAndFlagsBits = 0xD000000000000018;
    v96._object = (void *)0x8000000240A83D30;
    LODWORD(v95) = objc_msgSend(a1, sel_identifier);
    v34._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v34);
    swift_bridgeObjectRelease();
    v35._countAndFlagsBits = 0x6C696E20736920;
    v35._object = (void *)0xE700000000000000;
    String.append(_:)(v35);
    v36 = v96;
    LOBYTE(v96._countAndFlagsBits) = 3;
    LACLogger.log(level:_:)((LocalAuthenticationCore::LACLogger::Level)&v96, v36);
    swift_bridgeObjectRelease();
    outlined destroy of LACLogger((uint64_t)v9);
    v37 = (void *)objc_opt_self();
    v38 = (void *)MEMORY[0x2426863FC](0xD000000000000013, 0x8000000240A83D50);
    v39 = objc_msgSend(v37, sel_errorWithCode_debugDescription_, -1000, v38);

    v40 = v39;
    a2(0, v39);

    return;
  }
  v26 = v25;
  v88 = v12;
  v82 = v24;
  v86 = v18;
  v92 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  v93 = v27;

  v28 = objc_msgSend(a1, sel_client);
  if (v28)
  {
    v29 = v28;
    swift_getObjectType();
    isa = (Class)objc_msgSend(a1, sel_options);
    v84 = a2;
    v85 = a3;
    v83 = a1;
    v81 = v14;
    if (isa)
    {
      static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

      isa = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
    }
    v89 = objc_msgSend((id)swift_getObjCClassFromMetadata(), sel_infoForXPCClient_evaluationOptions_, v29, isa);

    v31 = objc_msgSend((id)objc_opt_self(), sel_isCompanionSessionActive);
    if (v31)
    {
      v32 = LACOnenessAuthenticatorModel.mockedAuthProvider.getter();
    }
    else
    {
      v32 = *(char **)(v94 + OBJC_IVAR____TtC23LocalAuthenticationCore28LACOnenessAuthenticatorModel_authProvider);
      swift_unknownObjectRetain();
    }
    v48 = v84;
    v49 = v85;
    v50 = v91;
    v51 = Data._bridgeToObjectiveC()().super.isa;
    v52 = objc_msgSend(v32, sel_authenticateClient_withAcmContext_, v89, v51);

    swift_unknownObjectRelease();
    if (v52)
    {
      v53 = (uint64_t)v90;
      static UUID._unconditionallyBridgeFromObjectiveC(_:)();

      v54 = *(void (**)(char *, uint64_t, uint64_t))(v50 + 32);
      v55 = v86;
      v54(v17, v53, v86);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v50 + 56))(v17, 0, 1, v55);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v50 + 48))(v17, 1, v55) != 1)
      {
        v56 = v82;
        v54(v82, (uint64_t)v17, v55);
        v57 = *(void (**)(uint64_t, char *, uint64_t))(v50 + 16);
        v57(v53, v56, v55);
        v58 = v87;
        v57((uint64_t)v87, v56, v55);
        type metadata accessor for LACOnenessAuthenticatorPendingRequest();
        v59 = swift_allocObject();
        v54((char *)(v59 + OBJC_IVAR____TtC23LocalAuthenticationCore37LACOnenessAuthenticatorPendingRequest_identifier), (uint64_t)v58, v55);
        v60 = v83;
        *(_QWORD *)(v59 + OBJC_IVAR____TtC23LocalAuthenticationCore37LACOnenessAuthenticatorPendingRequest_request) = v83;
        v61 = (_QWORD *)(v59
                       + OBJC_IVAR____TtC23LocalAuthenticationCore37LACOnenessAuthenticatorPendingRequest_completion);
        *v61 = v48;
        v61[1] = v49;
        v62 = (uint64_t *)(v94 + OBJC_IVAR____TtC23LocalAuthenticationCore28LACOnenessAuthenticatorModel_pendingSessions);
        swift_beginAccess();
        swift_unknownObjectRetain();
        swift_retain();
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        v95 = *v62;
        *v62 = 0x8000000000000000;
        specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v59, v53, isUniquelyReferenced_nonNull_native, (void (*)(uint64_t))specialized _NativeDictionary.copy(), (uint64_t *)&demangling cache variable for type metadata for _DictionaryStorage<UUID, LACOnenessAuthenticatorPendingRequest>);
        *v62 = v95;
        swift_bridgeObjectRelease();
        v64 = *(void (**)(uint64_t, uint64_t))(v50 + 8);
        v64(v53, v55);
        swift_endAccess();
        v65 = LACLogABM();
        v66 = (uint64_t)v81;
        Logger.init(_:)();
        v96._countAndFlagsBits = 0;
        v96._object = (void *)0xE000000000000000;
        _StringGuts.grow(_:)(54);
        v67._countAndFlagsBits = 0xD000000000000025;
        v67._object = (void *)0x8000000240A83DD0;
        String.append(_:)(v67);
        lazy protocol witness table accessor for type LACPolicy and conformance LACPolicy((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEAB8]);
        v68._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v68);
        swift_bridgeObjectRelease();
        v69._countAndFlagsBits = 0x71657220726F6620;
        v69._object = (void *)0xED00002074736575;
        String.append(_:)(v69);
        LODWORD(v95) = objc_msgSend(v60, sel_identifier);
        v70._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v70);
        swift_bridgeObjectRelease();
        v71 = v96;
        LOBYTE(v96._countAndFlagsBits) = 2;
        LACLogger.log(level:_:)((LocalAuthenticationCore::LACLogger::Level)&v96, v71);
        outlined consume of Data._Representation(v92, v93);
        swift_unknownObjectRelease();

        swift_bridgeObjectRelease();
        outlined destroy of LACLogger(v66);
        v64((uint64_t)v56, v55);
        return;
      }
    }
    else
    {
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v50 + 56))(v17, 1, 1, v86);
    }
    outlined destroy of AsyncStream<()>.Continuation?((uint64_t)v17, (uint64_t *)&demangling cache variable for type metadata for UUID?);
    v72 = LACLogABM();
    v73 = (uint64_t)v88;
    Logger.init(_:)();
    v96._countAndFlagsBits = 0;
    v96._object = (void *)0xE000000000000000;
    _StringGuts.grow(_:)(56);
    v74._countAndFlagsBits = 0xD000000000000036;
    v74._object = (void *)0x8000000240A83D90;
    String.append(_:)(v74);
    LODWORD(v95) = objc_msgSend(v83, sel_identifier);
    v75._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v75);
    swift_bridgeObjectRelease();
    v76 = v96;
    LOBYTE(v96._countAndFlagsBits) = 3;
    LACLogger.log(level:_:)((LocalAuthenticationCore::LACLogger::Level)&v96, v76);
    swift_bridgeObjectRelease();
    outlined destroy of LACLogger(v73);
    v77 = (void *)objc_opt_self();
    v78 = (void *)MEMORY[0x2426863FC](0xD000000000000026, 0x8000000240A83CD0);
    v79 = objc_msgSend(v77, sel_errorWithCode_debugDescription_, -1000, v78);

    v80 = v79;
    v48(0, v79);
    swift_unknownObjectRelease();

  }
  else
  {
    v41 = LACLogABM();
    v42 = (uint64_t)v88;
    Logger.init(_:)();
    LOBYTE(v96._countAndFlagsBits) = 3;
    v43._countAndFlagsBits = 0xD000000000000013;
    v43._object = (void *)0x8000000240A83D70;
    LACLogger.log(level:_:)((LocalAuthenticationCore::LACLogger::Level)&v96, v43);
    outlined destroy of LACLogger(v42);
    v44 = (void *)objc_opt_self();
    v45 = (void *)MEMORY[0x2426863FC](0xD000000000000013, 0x8000000240A83D70);
    v46 = objc_msgSend(v44, sel_errorWithCode_debugDescription_, -1000, v45);

    v47 = v46;
    a2(0, v46);

  }
  outlined consume of Data._Representation(v92, v93);
}

uint64_t LACOnenessAuthenticatorPendingRequest.__allocating_init(identifier:request:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;

  v8 = swift_allocObject();
  v9 = v8 + OBJC_IVAR____TtC23LocalAuthenticationCore37LACOnenessAuthenticatorPendingRequest_identifier;
  v10 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v9, a1, v10);
  *(_QWORD *)(v8 + OBJC_IVAR____TtC23LocalAuthenticationCore37LACOnenessAuthenticatorPendingRequest_request) = a2;
  v11 = (_QWORD *)(v8 + OBJC_IVAR____TtC23LocalAuthenticationCore37LACOnenessAuthenticatorPendingRequest_completion);
  *v11 = a3;
  v11[1] = a4;
  return v8;
}

uint64_t type metadata accessor for LACOnenessAuthenticatorPendingRequest()
{
  uint64_t result;

  result = type metadata singleton initialization cache for LACOnenessAuthenticatorPendingRequest;
  if (!type metadata singleton initialization cache for LACOnenessAuthenticatorPendingRequest)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t LACOnenessAuthenticatorModel.cancelAuthentication(for:)(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  id v18;
  Swift::String v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  id v24;
  Swift::String v25;
  Swift::String v26;
  Swift::String v27;
  id v28;
  char *v29;
  uint64_t v30;
  Class isa;
  Swift::String v32;

  v2 = v1;
  v4 = type metadata accessor for LACLogger();
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v32 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: UUID, value: LACOnenessAuthenticatorPendingRequest)?);
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)&v32 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (key: UUID, value: LACOnenessAuthenticatorPendingRequest));
  v11 = *(_QWORD *)(v10 - 8);
  v12 = MEMORY[0x24BDAC7A8](v10);
  v14 = (char *)&v32 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v12);
  v16 = (char *)&v32 - v15;
  swift_beginAccess();
  swift_unknownObjectRetain();
  v17 = swift_bridgeObjectRetain();
  specialized Sequence.first(where:)(v17, a1, (uint64_t)v9);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10) == 1)
  {
    outlined destroy of AsyncStream<()>.Continuation?((uint64_t)v9, &demangling cache variable for type metadata for (key: UUID, value: LACOnenessAuthenticatorPendingRequest)?);
    v18 = LACLogABM();
    Logger.init(_:)();
    LOBYTE(v32._countAndFlagsBits) = 3;
    v19._object = (void *)0x8000000240A83E00;
    v19._countAndFlagsBits = 0xD00000000000001BLL;
    LACLogger.log(level:_:)((LocalAuthenticationCore::LACLogger::Level)&v32, v19);
    return outlined destroy of LACLogger((uint64_t)v6);
  }
  else
  {
    v21 = *(int *)(v10 + 48);
    v22 = type metadata accessor for UUID();
    v23 = *(_QWORD *)(v22 - 8);
    (*(void (**)(char *, char *, uint64_t))(v23 + 32))(v16, v9, v22);
    *(_QWORD *)&v16[v21] = *(_QWORD *)&v9[v21];
    v24 = LACLogABM();
    Logger.init(_:)();
    v32._countAndFlagsBits = 0;
    v32._object = (void *)0xE000000000000000;
    _StringGuts.grow(_:)(52);
    v25._countAndFlagsBits = 0xD000000000000032;
    v25._object = (void *)0x8000000240A83E20;
    String.append(_:)(v25);
    lazy protocol witness table accessor for type LACPolicy and conformance LACPolicy((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEAB8]);
    v26._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v26);
    swift_bridgeObjectRelease();
    v27 = v32;
    LOBYTE(v32._countAndFlagsBits) = 2;
    LACLogger.log(level:_:)((LocalAuthenticationCore::LACLogger::Level)&v32, v27);
    swift_bridgeObjectRelease();
    outlined destroy of LACLogger((uint64_t)v6);
    v28 = objc_msgSend((id)objc_opt_self(), sel_isCompanionSessionActive);

    if (v28)
    {
      v29 = LACOnenessAuthenticatorModel.mockedAuthProvider.getter();
    }
    else
    {
      v29 = *(char **)(v2 + OBJC_IVAR____TtC23LocalAuthenticationCore28LACOnenessAuthenticatorModel_authProvider);
      swift_unknownObjectRetain();
    }
    v30 = *(int *)(v10 + 48);
    (*(void (**)(char *, char *, uint64_t))(v23 + 16))(v14, v16, v22);
    *(_QWORD *)&v14[v30] = *(_QWORD *)&v16[v21];
    isa = UUID._bridgeToObjectiveC()().super.isa;
    (*(void (**)(char *, uint64_t))(v23 + 8))(v14, v22);
    objc_msgSend(v29, sel_cancelAuthenticationWithID_, isa);
    swift_unknownObjectRelease();

    return outlined destroy of AsyncStream<()>.Continuation?((uint64_t)v16, (uint64_t *)&demangling cache variable for type metadata for (key: UUID, value: LACOnenessAuthenticatorPendingRequest));
  }
}

uint64_t specialized Sequence.first(where:)@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t result;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t i;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(char *, unint64_t, uint64_t);
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int64_t v39;
  char *v40;
  char *v41;
  char *v42;
  id v43;
  uint64_t v44;
  uint64_t v45;
  int64_t v46;

  v37 = a3;
  v43 = a2;
  v45 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (key: UUID, value: LACOnenessAuthenticatorPendingRequest));
  v36 = *(_QWORD *)(v45 - 8);
  v4 = MEMORY[0x24BDAC7A8](v45);
  v42 = (char *)&v35 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = MEMORY[0x24BDAC7A8](v4);
  v40 = (char *)&v35 - v7;
  MEMORY[0x24BDAC7A8](v6);
  v41 = (char *)&v35 - v8;
  v9 = *(_QWORD *)(a1 + 64);
  v38 = a1 + 64;
  v10 = 1 << *(_BYTE *)(a1 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & v9;
  v39 = (unint64_t)(v10 + 63) >> 6;
  v44 = a1;
  result = swift_bridgeObjectRetain();
  v14 = 0;
  v15 = (uint64_t)v40;
  if (!v12)
    goto LABEL_5;
LABEL_4:
  v16 = __clz(__rbit64(v12));
  v12 &= v12 - 1;
  v46 = v14;
  for (i = v16 | (v14 << 6); ; i = __clz(__rbit64(v19)) + (v20 << 6))
  {
    v22 = v44;
    v23 = *(_QWORD *)(v44 + 48);
    v24 = type metadata accessor for UUID();
    v25 = *(_QWORD *)(v24 - 8);
    v26 = *(void (**)(char *, unint64_t, uint64_t))(v25 + 16);
    v27 = (uint64_t)v41;
    v26(v41, v23 + *(_QWORD *)(v25 + 72) * i, v24);
    v28 = *(_QWORD *)(*(_QWORD *)(v22 + 56) + 8 * i);
    v29 = v45;
    *(_QWORD *)(v27 + *(int *)(v45 + 48)) = v28;
    outlined init with take of (key: UUID, value: LACOnenessAuthenticatorPendingRequest)?(v27, v15, (uint64_t *)&demangling cache variable for type metadata for (key: UUID, value: LACOnenessAuthenticatorPendingRequest));
    v30 = *(int *)(v29 + 48);
    v31 = v42;
    v26(v42, v15, v24);
    v32 = *(_QWORD *)(v15 + v30);
    *(_QWORD *)&v31[v30] = v32;
    v33 = *(void **)(v32 + OBJC_IVAR____TtC23LocalAuthenticationCore37LACOnenessAuthenticatorPendingRequest_request);
    swift_retain();
    LODWORD(v28) = objc_msgSend(v33, sel_identifier);
    LODWORD(v30) = objc_msgSend(v43, sel_identifier);
    (*(void (**)(char *, uint64_t))(v25 + 8))(v31, v24);
    if ((_DWORD)v28 == (_DWORD)v30)
    {
      swift_release();
      v34 = v37;
      outlined init with take of (key: UUID, value: LACOnenessAuthenticatorPendingRequest)?(v15, v37, (uint64_t *)&demangling cache variable for type metadata for (key: UUID, value: LACOnenessAuthenticatorPendingRequest));
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v36 + 56))(v34, 0, 1, v45);
      return swift_unknownObjectRelease();
    }
    result = outlined destroy of AsyncStream<()>.Continuation?(v15, (uint64_t *)&demangling cache variable for type metadata for (key: UUID, value: LACOnenessAuthenticatorPendingRequest));
    v14 = v46;
    if (v12)
      goto LABEL_4;
LABEL_5:
    v18 = v14 + 1;
    if (__OFADD__(v14, 1))
      break;
    if (v18 >= v39)
      goto LABEL_25;
    v19 = *(_QWORD *)(v38 + 8 * v18);
    v20 = v14 + 1;
    if (v19)
      goto LABEL_20;
    v20 = v14 + 2;
    if (v14 + 2 >= v39)
      goto LABEL_25;
    v19 = *(_QWORD *)(v38 + 8 * v20);
    if (v19)
      goto LABEL_20;
    v20 = v14 + 3;
    if (v14 + 3 >= v39)
      goto LABEL_25;
    v19 = *(_QWORD *)(v38 + 8 * v20);
    if (v19)
      goto LABEL_20;
    v20 = v14 + 4;
    if (v14 + 4 >= v39)
      goto LABEL_25;
    v19 = *(_QWORD *)(v38 + 8 * v20);
    if (v19)
      goto LABEL_20;
    v21 = v14 + 5;
    if (v14 + 5 >= v39)
    {
LABEL_25:
      swift_release();
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v36 + 56))(v37, 1, 1, v45);
      return swift_unknownObjectRelease();
    }
    v19 = *(_QWORD *)(v38 + 8 * v21);
    if (!v19)
    {
      while (1)
      {
        v20 = v21 + 1;
        if (__OFADD__(v21, 1))
          goto LABEL_28;
        if (v20 >= v39)
          goto LABEL_25;
        v19 = *(_QWORD *)(v38 + 8 * v20);
        ++v21;
        if (v19)
          goto LABEL_20;
      }
    }
    v20 = v14 + 5;
LABEL_20:
    v12 = (v19 - 1) & v19;
    v46 = v20;
  }
  __break(1u);
LABEL_28:
  __break(1u);
  return result;
}

id LACOnenessAuthenticatorModel.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

void LACOnenessAuthenticatorModel.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

char *LACOnenessAuthenticatorModel.notificationCenter(_:didReceive:)(uint64_t a1, const __CFString *a2)
{
  char *result;

  result = (char *)LACDarwinNotificationsEqual(a2, CFSTR("com.apple.LocalAuthentication.GlobalDomainDidChange"));
  if ((_DWORD)result)
    return LACOnenessAuthenticatorModel.simulateAuthenticationSuccess()();
  return result;
}

char *LACOnenessAuthenticatorModel.simulateAuthenticationSuccess()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *result;
  char *v22;
  uint64_t v23;
  unint64_t v24;
  id v25;
  Swift::String v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  __int128 v37;
  int64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void (*v49)(char *, char *, uint64_t);
  id v50;
  void *v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  Class isa;
  Class v56;
  Class v57;
  id v58;
  os_log_type_t v59;
  NSObject *v60;
  os_log_type_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  id v67;
  char *v68;
  char *v69;
  unint64_t v70;
  uint64_t v71;
  void *v72;
  char *v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  unint64_t v81;
  char *v82;
  unint64_t v83;
  uint64_t v84;
  unint64_t v85;
  __int128 v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  id v90;
  char *v91;
  uint64_t v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  int64_t v102;
  char *v103;
  char *v104;
  char *v105;
  uint64_t v106;
  unint64_t v107;
  uint64_t v108;
  uint64_t v109;
  char *v110;
  uint64_t v111;
  unint64_t v112;
  unint64_t v113;
  uint64_t v114;
  uint64_t aBlock[6];

  v1 = v0;
  v98 = type metadata accessor for DispatchWorkItemFlags();
  v97 = *(_QWORD *)(v98 - 8);
  MEMORY[0x24BDAC7A8](v98);
  v96 = (char *)&v80 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v95 = type metadata accessor for DispatchQoS();
  v94 = *(_QWORD *)(v95 - 8);
  MEMORY[0x24BDAC7A8](v95);
  v93 = (char *)&v80 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for UUID();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x24BDAC7A8](v4);
  v91 = (char *)&v80 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v92 = v7;
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v80 - v8;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: UUID, value: LACOnenessAuthenticatorPendingRequest)?);
  v11 = MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)&v80 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v11);
  v15 = (char *)&v80 - v14;
  v16 = type metadata accessor for LACLogger();
  v17 = MEMORY[0x24BDAC7A8](v16);
  v109 = (uint64_t)&v80 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v17);
  v20 = (char *)&v80 - v19;
  v90 = (id)objc_opt_self();
  result = (char *)objc_msgSend(v90, sel_companionAuthentication);
  if (result)
  {
    v22 = result;
    v99 = v5;
    v23 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    v107 = v24;
    v108 = v23;

    v25 = LACLogABM();
    Logger.init(_:)();
    v103 = v9;
    LOBYTE(aBlock[0]) = 1;
    v26._countAndFlagsBits = 0xD00000000000002ELL;
    v27 = v99;
    v26._object = (void *)0x8000000240A84130;
    LACLogger.log(level:_:)((LocalAuthenticationCore::LACLogger::Level)aBlock, v26);
    outlined destroy of LACLogger((uint64_t)v20);
    v88 = v1;
    v28 = (uint64_t *)(v1 + OBJC_IVAR____TtC23LocalAuthenticationCore28LACOnenessAuthenticatorModel_pendingSessions);
    swift_beginAccess();
    v29 = *v28;
    v30 = *(_QWORD *)(*v28 + 64);
    v89 = *v28 + 64;
    v31 = 1 << *(_BYTE *)(v29 + 32);
    v32 = v103;
    v33 = -1;
    if (v31 < 64)
      v33 = ~(-1 << v31);
    v34 = v33 & v30;
    v87 = OBJC_IVAR____TtC23LocalAuthenticationCore28LACOnenessAuthenticatorModel_replyQueue;
    v84 = OBJC_IVAR____TtC23LocalAuthenticationCore28LACOnenessAuthenticatorModel_authProvider;
    v35 = (unint64_t)(v31 + 63) >> 6;
    v81 = v35 - 1;
    result = (char *)swift_bridgeObjectRetain();
    v36 = 0;
    v102 = v35;
    v83 = v35 - 5;
    v110 = result;
    v82 = result + 104;
    v106 = MEMORY[0x24BEE4AD8] + 8;
    *(_QWORD *)&v37 = 136315138;
    v86 = v37;
    v85 = 0x8000000240A84160;
    v105 = v13;
    v104 = v15;
    if (v34)
      goto LABEL_25;
LABEL_7:
    v38 = v36 + 1;
    if (__OFADD__(v36, 1))
    {
      __break(1u);
      return result;
    }
    if (v38 >= v102)
    {
      v41 = v36;
    }
    else
    {
      v39 = *(_QWORD *)(v89 + 8 * v38);
      if (v39)
      {
LABEL_10:
        v34 = (v39 - 1) & v39;
        v40 = __clz(__rbit64(v39)) + (v38 << 6);
        v36 = v38;
        goto LABEL_26;
      }
      v41 = v36 + 1;
      if ((uint64_t)(v36 + 2) < v102)
      {
        v39 = *(_QWORD *)(v89 + 8 * (v36 + 2));
        if (v39)
        {
          v38 = v36 + 2;
          goto LABEL_10;
        }
        v41 = v36 + 2;
        if ((uint64_t)(v36 + 3) < v102)
        {
          v39 = *(_QWORD *)(v89 + 8 * (v36 + 3));
          if (v39)
          {
            v38 = v36 + 3;
            goto LABEL_10;
          }
          v38 = v36 + 4;
          v41 = v36 + 3;
          if ((uint64_t)(v36 + 4) < v102)
          {
            v39 = *(_QWORD *)(v89 + 8 * v38);
            if (v39)
              goto LABEL_10;
            while (v83 != v36)
            {
              v39 = *(_QWORD *)&v82[8 * v36++];
              if (v39)
              {
                v38 = v36 + 4;
                goto LABEL_10;
              }
            }
            v41 = v81;
          }
        }
      }
    }
    v42 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (key: UUID, value: LACOnenessAuthenticatorPendingRequest));
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v42 - 8) + 56))(v13, 1, 1, v42);
    v34 = 0;
    v36 = v41;
    while (1)
    {
      outlined init with take of (key: UUID, value: LACOnenessAuthenticatorPendingRequest)?((uint64_t)v13, (uint64_t)v15, &demangling cache variable for type metadata for (key: UUID, value: LACOnenessAuthenticatorPendingRequest)?);
      v47 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (key: UUID, value: LACOnenessAuthenticatorPendingRequest));
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v47 - 8) + 48))(v15, 1, v47) == 1)
      {
        swift_release();
        return (char *)outlined consume of Data._Representation(v108, v107);
      }
      v113 = v36;
      v48 = *(_QWORD *)&v15[*(int *)(v47 + 48)];
      v49 = *(void (**)(char *, char *, uint64_t))(v27 + 32);
      v49(v32, v15, v4);
      v50 = objc_msgSend(*(id *)(v48 + OBJC_IVAR____TtC23LocalAuthenticationCore37LACOnenessAuthenticatorPendingRequest_request), sel_externalizedContext);
      if (!v50)
        break;
      v51 = v50;
      v52 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
      v54 = v53;

      specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
      isa = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      v56 = Data._bridgeToObjectiveC()().super.isa;
      v111 = v52;
      v112 = v54;
      v57 = Data._bridgeToObjectiveC()().super.isa;
      LODWORD(v52) = MKBVerifyPasswordWithContext();

      if (!(_DWORD)v52)
      {
        v64 = v88;
        v65 = *(_QWORD *)(v88 + v87);
        v66 = swift_allocObject();
        swift_unknownObjectWeakInit();
        v67 = objc_msgSend(v90, sel_isCompanionSessionActive);

        v101 = v65;
        if (v67)
        {
          v68 = LACOnenessAuthenticatorModel.mockedAuthProvider.getter();
        }
        else
        {
          v68 = *(char **)(v64 + v84);
          swift_unknownObjectRetain();
        }
        v69 = v91;
        (*(void (**)(char *, char *, uint64_t))(v27 + 16))(v91, v103, v4);
        v70 = (*(unsigned __int8 *)(v27 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v27 + 80);
        v71 = swift_allocObject();
        *(_QWORD *)(v71 + 16) = v66;
        *(_QWORD *)(v71 + 24) = v68;
        v49((char *)(v71 + v70), v69, v4);
        aBlock[4] = (uint64_t)partial apply for closure #1 in LACOnenessAuthenticatorModel.simulateAuthenticationSuccess();
        aBlock[5] = v71;
        aBlock[0] = MEMORY[0x24BDAC760];
        aBlock[1] = 1107296256;
        aBlock[2] = (uint64_t)thunk for @escaping @callee_guaranteed @Sendable () -> ();
        aBlock[3] = (uint64_t)&block_descriptor_28;
        v72 = _Block_copy(aBlock);
        swift_retain();
        swift_unknownObjectRetain();
        v73 = v93;
        static DispatchQoS.unspecified.getter();
        v114 = MEMORY[0x24BEE4AF8];
        lazy protocol witness table accessor for type LACPolicy and conformance LACPolicy((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, (uint64_t (*)(uint64_t))MEMORY[0x24BEE5458], MEMORY[0x24BEE5468]);
        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
        lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]();
        v74 = v96;
        v100 = v66;
        v75 = v4;
        v76 = v98;
        dispatch thunk of SetAlgebra.init<A>(_:)();
        MEMORY[0x242686654](0, v73, v74, v72);
        outlined consume of Data._Representation(v111, v112);
        _Block_release(v72);
        swift_unknownObjectRelease();
        swift_release();
        v77 = v74;
        v32 = v103;
        v78 = v76;
        v4 = v75;
        (*(void (**)(char *, uint64_t))(v97 + 8))(v77, v78);
        v79 = v73;
        v27 = v99;
        (*(void (**)(char *, uint64_t))(v94 + 8))(v79, v95);
        (*(void (**)(char *, uint64_t))(v27 + 8))(v32, v75);
        swift_release();
        result = (char *)swift_release();
        v13 = v105;
        v15 = v104;
LABEL_37:
        v36 = v113;
        if (!v34)
          goto LABEL_7;
        goto LABEL_25;
      }
      v58 = LACLogABM();
      Logger.init(_:)();
      v59 = static os_log_type_t.info.getter();
      v60 = Logger.logObject.getter();
      v61 = v59;
      if (os_log_type_enabled(v60, v59))
      {
        v62 = swift_slowAlloc();
        v63 = swift_slowAlloc();
        aBlock[0] = v63;
        *(_DWORD *)v62 = v86;
        *(_QWORD *)(v62 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000001CLL, v85, aBlock);
        _os_log_impl(&dword_2409DC000, v60, v61, "%s", (uint8_t *)v62, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x2426876B0](v63, -1, -1);
        MEMORY[0x2426876B0](v62, -1, -1);
      }

      outlined consume of Data._Representation(v111, v112);
      swift_release();
      v13 = v105;
      v15 = v104;
      v36 = v113;
      outlined destroy of LACLogger(v109);
      result = (char *)(*(uint64_t (**)(char *, uint64_t))(v27 + 8))(v32, v4);
      if (!v34)
        goto LABEL_7;
LABEL_25:
      v43 = __clz(__rbit64(v34));
      v34 &= v34 - 1;
      v40 = v43 | (v36 << 6);
LABEL_26:
      v44 = v110;
      (*(void (**)(char *, unint64_t, uint64_t))(v27 + 16))(v13, *((_QWORD *)v110 + 6) + *(_QWORD *)(v27 + 72) * v40, v4);
      v45 = *((_QWORD *)v44 + 7);
      v46 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (key: UUID, value: LACOnenessAuthenticatorPendingRequest));
      *(_QWORD *)&v13[*(int *)(v46 + 48)] = *(_QWORD *)(v45 + 8 * v40);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v46 - 8) + 56))(v13, 0, 1, v46);
      swift_retain();
    }
    swift_release();
    result = (char *)(*(uint64_t (**)(char *, uint64_t))(v27 + 8))(v32, v4);
    goto LABEL_37;
  }
  return result;
}

uint64_t LACOnenessAuthenticatorModel.authenticationProvider(_:didStartAuthenticationWith:)(uint64_t a1, uint64_t a2)
{
  return specialized LACOnenessAuthenticatorModel.authenticationProvider(_:didStartAuthenticationWith:)(a2);
}

uint64_t LACOnenessAuthenticatorModel.authenticationProvider(_:didCompleteAuthenticationWith:)(uint64_t a1, uint64_t a2)
{
  return specialized LACOnenessAuthenticatorModel.authenticationProvider(_:didCompleteAuthenticationWith:)(a2);
}

uint64_t closure #1 in LACOnenessAuthenticatorModel.authenticationProvider(_:didCompleteAuthenticationWith:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  unint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  id v21;
  Swift::String v22;
  Swift::String v23;
  Swift::String v24;
  void (*v25)(void);
  id v27;
  Swift::String v28;
  Swift::String v29;
  Swift::String v30;
  Swift::String v31;
  uint64_t v32;
  Swift::String v33;
  Swift::String v34;

  v4 = type metadata accessor for LACLogger();
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v32 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for UUID();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)&v32 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = a1 + 16;
  swift_beginAccess();
  v12 = MEMORY[0x242687740](a1 + 16);
  if (!v12)
    goto LABEL_8;
  v13 = (char *)v12;
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, a2, v7);
  v14 = &v13[OBJC_IVAR____TtC23LocalAuthenticationCore28LACOnenessAuthenticatorModel_pendingSessions];
  swift_beginAccess();
  v15 = *(_QWORD *)v14;
  if (!*(_QWORD *)(v15 + 16) || (v16 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v10), (v17 & 1) == 0))
  {
    swift_endAccess();

    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
LABEL_8:
    v27 = LACLogABM();
    Logger.init(_:)();
    v34._countAndFlagsBits = 0;
    v34._object = (void *)0xE000000000000000;
    _StringGuts.grow(_:)(95);
    v28._countAndFlagsBits = 0xD00000000000002FLL;
    v28._object = (void *)0x8000000240A84090;
    String.append(_:)(v28);
    lazy protocol witness table accessor for type LACPolicy and conformance LACPolicy((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEAB8]);
    v29._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v29);
    swift_bridgeObjectRelease();
    v30._object = (void *)0x8000000240A84060;
    v30._countAndFlagsBits = 0xD00000000000002ELL;
    String.append(_:)(v30);
    v31 = v34;
    LOBYTE(v34._countAndFlagsBits) = 3;
    LACLogger.log(level:_:)((LocalAuthenticationCore::LACLogger::Level)&v34, v31);
    swift_bridgeObjectRelease();
    return outlined destroy of LACLogger((uint64_t)v6);
  }
  v18 = *(_QWORD *)(*(_QWORD *)(v15 + 56) + 8 * v16);
  swift_endAccess();
  swift_retain();

  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  swift_beginAccess();
  v19 = MEMORY[0x242687740](v11);
  if (v19)
  {
    v20 = (void *)v19;
    swift_beginAccess();
    specialized Dictionary._Variant.removeValue(forKey:)(a2);
    swift_endAccess();

    swift_release();
  }
  v21 = LACLogABM();
  Logger.init(_:)();
  v33._countAndFlagsBits = 0;
  v33._object = (void *)0xE000000000000000;
  _StringGuts.grow(_:)(62);
  v22._countAndFlagsBits = 0xD00000000000003CLL;
  v22._object = (void *)0x8000000240A840C0;
  String.append(_:)(v22);
  lazy protocol witness table accessor for type LACPolicy and conformance LACPolicy((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEAB8]);
  v23._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v23);
  swift_bridgeObjectRelease();
  v24 = v33;
  LOBYTE(v33._countAndFlagsBits) = 2;
  LACLogger.log(level:_:)((LocalAuthenticationCore::LACLogger::Level)&v33, v24);
  swift_bridgeObjectRelease();
  outlined destroy of LACLogger((uint64_t)v6);
  v25 = *(void (**)(void))(v18
                         + OBJC_IVAR____TtC23LocalAuthenticationCore37LACOnenessAuthenticatorPendingRequest_completion);
  swift_retain();
  specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  v25();
  swift_release();
  swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t @objc LACOnenessAuthenticatorModel.authenticationProvider(_:didStartAuthenticationWith:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(char *))
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  id v11;
  uint64_t v13;

  v7 = type metadata accessor for UUID();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)&v13 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();
  swift_unknownObjectRetain();
  v11 = a1;
  a5(v10);
  swift_unknownObjectRelease();

  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
}

uint64_t LACOnenessAuthenticatorModel.authenticationProvider(_:didFailAuthenticationWith:error:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return specialized LACOnenessAuthenticatorModel.authenticationProvider(_:didFailAuthenticationWith:error:)(a2, a3);
}

uint64_t closure #1 in LACOnenessAuthenticatorModel.authenticationProvider(_:didFailAuthenticationWith:error:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  unint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  id v25;
  Swift::String v26;
  Swift::String v27;
  Swift::String v28;
  uint64_t v29;
  Swift::String v30;
  void (*v31)(_QWORD, uint64_t);
  id v33;
  Swift::String v34;
  Swift::String v35;
  Swift::String v36;
  Swift::String v37;
  Swift::String v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  Swift::String v42;
  Swift::String v43;

  v40 = a3;
  v5 = type metadata accessor for LACLogger();
  v6 = MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v39 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v10 = (char *)&v39 - v9;
  v11 = type metadata accessor for UUID();
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x24BDAC7A8](v11);
  v14 = (char *)&v39 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = a1 + 16;
  swift_beginAccess();
  v16 = MEMORY[0x242687740](a1 + 16);
  if (!v16)
    goto LABEL_8;
  v17 = (char *)v16;
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v14, a2, v11);
  v18 = &v17[OBJC_IVAR____TtC23LocalAuthenticationCore28LACOnenessAuthenticatorModel_pendingSessions];
  swift_beginAccess();
  v19 = *(_QWORD *)v18;
  if (!*(_QWORD *)(v19 + 16) || (v20 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v14), (v21 & 1) == 0))
  {
    swift_endAccess();

    (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
LABEL_8:
    v33 = LACLogABM();
    Logger.init(_:)();
    v43._countAndFlagsBits = 0;
    v43._object = (void *)0xE000000000000000;
    _StringGuts.grow(_:)(108);
    v34._object = (void *)0x8000000240A84030;
    v34._countAndFlagsBits = 0xD00000000000002DLL;
    String.append(_:)(v34);
    lazy protocol witness table accessor for type LACPolicy and conformance LACPolicy((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEAB8]);
    v35._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v35);
    swift_bridgeObjectRelease();
    v36._countAndFlagsBits = 0x7265206874697720;
    v36._object = (void *)0xED0000203A726F72;
    String.append(_:)(v36);
    v42._countAndFlagsBits = v40;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
    _print_unlocked<A, B>(_:_:)();
    v37._countAndFlagsBits = 0xD00000000000002ELL;
    v37._object = (void *)0x8000000240A84060;
    String.append(_:)(v37);
    v38 = v43;
    LOBYTE(v43._countAndFlagsBits) = 3;
    LACLogger.log(level:_:)((LocalAuthenticationCore::LACLogger::Level)&v43, v38);
    swift_bridgeObjectRelease();
    return outlined destroy of LACLogger((uint64_t)v10);
  }
  v22 = *(_QWORD *)(*(_QWORD *)(v19 + 56) + 8 * v20);
  swift_endAccess();
  swift_retain();

  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  swift_beginAccess();
  v23 = MEMORY[0x242687740](v15);
  if (v23)
  {
    v24 = (void *)v23;
    swift_beginAccess();
    specialized Dictionary._Variant.removeValue(forKey:)(a2);
    swift_endAccess();

    swift_release();
  }
  v25 = LACLogABM();
  Logger.init(_:)();
  v42._countAndFlagsBits = 0;
  v42._object = (void *)0xE000000000000000;
  _StringGuts.grow(_:)(62);
  v26._object = (void *)0x8000000240A84030;
  v26._countAndFlagsBits = 0xD00000000000002DLL;
  String.append(_:)(v26);
  lazy protocol witness table accessor for type LACPolicy and conformance LACPolicy((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEAB8]);
  v27._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v27);
  swift_bridgeObjectRelease();
  v28._countAndFlagsBits = 0x7265206874697720;
  v28._object = (void *)0xED0000203A726F72;
  String.append(_:)(v28);
  v29 = v40;
  v41 = v40;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
  _print_unlocked<A, B>(_:_:)();
  v30 = v42;
  LOBYTE(v42._countAndFlagsBits) = 2;
  LACLogger.log(level:_:)((LocalAuthenticationCore::LACLogger::Level)&v42, v30);
  swift_bridgeObjectRelease();
  outlined destroy of LACLogger((uint64_t)v8);
  v31 = *(void (**)(_QWORD, uint64_t))(v22
                                               + OBJC_IVAR____TtC23LocalAuthenticationCore37LACOnenessAuthenticatorPendingRequest_completion);
  swift_retain();
  v31(0, v29);
  swift_release();
  return swift_release();
}

uint64_t LACOnenessAuthenticatorPendingRequest.identifier.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + OBJC_IVAR____TtC23LocalAuthenticationCore37LACOnenessAuthenticatorPendingRequest_identifier;
  v4 = type metadata accessor for UUID();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t LACOnenessAuthenticatorPendingRequest.request.getter()
{
  return swift_unknownObjectRetain();
}

uint64_t LACOnenessAuthenticatorPendingRequest.completion.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC23LocalAuthenticationCore37LACOnenessAuthenticatorPendingRequest_completion);
  swift_retain();
  return v1;
}

uint64_t LACOnenessAuthenticatorPendingRequest.init(identifier:request:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;

  v9 = v4 + OBJC_IVAR____TtC23LocalAuthenticationCore37LACOnenessAuthenticatorPendingRequest_identifier;
  v10 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v9, a1, v10);
  *(_QWORD *)(v4 + OBJC_IVAR____TtC23LocalAuthenticationCore37LACOnenessAuthenticatorPendingRequest_request) = a2;
  v11 = (_QWORD *)(v4 + OBJC_IVAR____TtC23LocalAuthenticationCore37LACOnenessAuthenticatorPendingRequest_completion);
  *v11 = a3;
  v11[1] = a4;
  return v4;
}

uint64_t LACOnenessAuthenticatorPendingRequest.deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0 + OBJC_IVAR____TtC23LocalAuthenticationCore37LACOnenessAuthenticatorPendingRequest_identifier;
  v2 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  swift_unknownObjectRelease();
  swift_release();
  return v0;
}

uint64_t LACOnenessAuthenticatorPendingRequest.__deallocating_deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0 + OBJC_IVAR____TtC23LocalAuthenticationCore37LACOnenessAuthenticatorPendingRequest_identifier;
  v2 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  swift_unknownObjectRelease();
  swift_release();
  return swift_deallocClassInstance();
}

void closure #1 in LACOnenessAuthenticatorModel.simulateAuthenticationSuccess()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;

  v4 = a1 + 16;
  swift_beginAccess();
  v5 = MEMORY[0x242687740](v4);
  if (v5)
  {
    v6 = (void *)v5;
    specialized LACOnenessAuthenticatorModel.authenticationProvider(_:didCompleteAuthenticationWith:)(a3);

  }
}

uint64_t specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  uint64_t v12;
  uint64_t result;
  int64_t v14;
  unint64_t v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  _QWORD *v22;
  unint64_t v23;
  int64_t v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  char v31;
  unint64_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _OWORD v37[2];
  __int128 v38;
  __int128 v39;
  uint64_t v40;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _DictionaryStorage<AnyHashable, Any>);
  v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_41;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  v36 = v5 + 64;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v11 = (unint64_t)(v8 + 63) >> 6;
  v12 = v6 + 64;
  result = swift_retain();
  v14 = 0;
  while (1)
  {
    if (v10)
    {
      v19 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v20 = v19 | (v14 << 6);
      goto LABEL_22;
    }
    v21 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v21 >= v11)
      break;
    v22 = (_QWORD *)(v5 + 64);
    v23 = *(_QWORD *)(v36 + 8 * v21);
    ++v14;
    if (!v23)
    {
      v14 = v21 + 1;
      if (v21 + 1 >= v11)
        goto LABEL_34;
      v23 = *(_QWORD *)(v36 + 8 * v14);
      if (!v23)
      {
        v24 = v21 + 2;
        if (v24 >= v11)
        {
LABEL_34:
          swift_release();
          if ((a2 & 1) == 0)
            goto LABEL_41;
          goto LABEL_37;
        }
        v23 = *(_QWORD *)(v36 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            v14 = v24 + 1;
            if (__OFADD__(v24, 1))
              goto LABEL_43;
            if (v14 >= v11)
              goto LABEL_34;
            v23 = *(_QWORD *)(v36 + 8 * v14);
            ++v24;
            if (v23)
              goto LABEL_21;
          }
        }
        v14 = v24;
      }
    }
LABEL_21:
    v10 = (v23 - 1) & v23;
    v20 = __clz(__rbit64(v23)) + (v14 << 6);
LABEL_22:
    v25 = *(_QWORD *)(v5 + 48) + 40 * v20;
    if ((a2 & 1) != 0)
    {
      v26 = *(_OWORD *)v25;
      v27 = *(_OWORD *)(v25 + 16);
      v40 = *(_QWORD *)(v25 + 32);
      v38 = v26;
      v39 = v27;
      outlined init with take of Any((_OWORD *)(*(_QWORD *)(v5 + 56) + 32 * v20), v37);
    }
    else
    {
      outlined init with copy of AnyHashable(v25, (uint64_t)&v38);
      outlined init with copy of Any(*(_QWORD *)(v5 + 56) + 32 * v20, (uint64_t)v37);
    }
    result = AnyHashable._rawHashValue(seed:)(*(_QWORD *)(v7 + 40));
    v28 = -1 << *(_BYTE *)(v7 + 32);
    v29 = result & ~v28;
    v30 = v29 >> 6;
    if (((-1 << v29) & ~*(_QWORD *)(v12 + 8 * (v29 >> 6))) != 0)
    {
      v15 = __clz(__rbit64((-1 << v29) & ~*(_QWORD *)(v12 + 8 * (v29 >> 6)))) | v29 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v31 = 0;
      v32 = (unint64_t)(63 - v28) >> 6;
      do
      {
        if (++v30 == v32 && (v31 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        v33 = v30 == v32;
        if (v30 == v32)
          v30 = 0;
        v31 |= v33;
        v34 = *(_QWORD *)(v12 + 8 * v30);
      }
      while (v34 == -1);
      v15 = __clz(__rbit64(~v34)) + (v30 << 6);
    }
    *(_QWORD *)(v12 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
    v16 = *(_QWORD *)(v7 + 48) + 40 * v15;
    v17 = v38;
    v18 = v39;
    *(_QWORD *)(v16 + 32) = v40;
    *(_OWORD *)v16 = v17;
    *(_OWORD *)(v16 + 16) = v18;
    result = (uint64_t)outlined init with take of Any(v37, (_OWORD *)(*(_QWORD *)(v7 + 56) + 32 * v15));
    ++*(_QWORD *)(v7 + 16);
  }
  swift_release();
  v22 = (_QWORD *)(v5 + 64);
  if ((a2 & 1) == 0)
    goto LABEL_41;
LABEL_37:
  v35 = 1 << *(_BYTE *)(v5 + 32);
  if (v35 >= 64)
    bzero(v22, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v22 = -1 << v35;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_41:
  result = swift_release();
  *v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  unint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  _OWORD *v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char v28;
  unint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  int64_t v33;
  _QWORD *v34;
  _OWORD v35[2];

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
  v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  v7 = v6;
  if (*(_QWORD *)(v5 + 16))
  {
    v8 = 1 << *(_BYTE *)(v5 + 32);
    v34 = (_QWORD *)(v5 + 64);
    if (v8 < 64)
      v9 = ~(-1 << v8);
    else
      v9 = -1;
    v10 = v9 & *(_QWORD *)(v5 + 64);
    v33 = (unint64_t)(v8 + 63) >> 6;
    v11 = v6 + 64;
    result = swift_retain();
    v13 = 0;
    while (1)
    {
      if (v10)
      {
        v16 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        v17 = v16 | (v13 << 6);
      }
      else
      {
        v18 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
LABEL_40:
          __break(1u);
LABEL_41:
          __break(1u);
          return result;
        }
        if (v18 >= v33)
          goto LABEL_34;
        v19 = v34[v18];
        ++v13;
        if (!v19)
        {
          v13 = v18 + 1;
          if (v18 + 1 >= v33)
            goto LABEL_34;
          v19 = v34[v13];
          if (!v19)
          {
            v20 = v18 + 2;
            if (v20 >= v33)
            {
LABEL_34:
              swift_release();
              v3 = v2;
              if ((a2 & 1) != 0)
              {
                v32 = 1 << *(_BYTE *)(v5 + 32);
                if (v32 >= 64)
                  bzero(v34, ((unint64_t)(v32 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v34 = -1 << v32;
                *(_QWORD *)(v5 + 16) = 0;
              }
              break;
            }
            v19 = v34[v20];
            if (!v19)
            {
              while (1)
              {
                v13 = v20 + 1;
                if (__OFADD__(v20, 1))
                  goto LABEL_41;
                if (v13 >= v33)
                  goto LABEL_34;
                v19 = v34[v13];
                ++v20;
                if (v19)
                  goto LABEL_21;
              }
            }
            v13 = v20;
          }
        }
LABEL_21:
        v10 = (v19 - 1) & v19;
        v17 = __clz(__rbit64(v19)) + (v13 << 6);
      }
      v21 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v17);
      v23 = *v21;
      v22 = v21[1];
      v24 = (_OWORD *)(*(_QWORD *)(v5 + 56) + 32 * v17);
      if ((a2 & 1) != 0)
      {
        outlined init with take of Any(v24, v35);
      }
      else
      {
        outlined init with copy of Any((uint64_t)v24, (uint64_t)v35);
        swift_bridgeObjectRetain();
      }
      Hasher.init(_seed:)();
      String.hash(into:)();
      result = Hasher._finalize()();
      v25 = -1 << *(_BYTE *)(v7 + 32);
      v26 = result & ~v25;
      v27 = v26 >> 6;
      if (((-1 << v26) & ~*(_QWORD *)(v11 + 8 * (v26 >> 6))) != 0)
      {
        v14 = __clz(__rbit64((-1 << v26) & ~*(_QWORD *)(v11 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v28 = 0;
        v29 = (unint64_t)(63 - v25) >> 6;
        do
        {
          if (++v27 == v29 && (v28 & 1) != 0)
          {
            __break(1u);
            goto LABEL_40;
          }
          v30 = v27 == v29;
          if (v27 == v29)
            v27 = 0;
          v28 |= v30;
          v31 = *(_QWORD *)(v11 + 8 * v27);
        }
        while (v31 == -1);
        v14 = __clz(__rbit64(~v31)) + (v27 << 6);
      }
      *(_QWORD *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
      v15 = (_QWORD *)(*(_QWORD *)(v7 + 48) + 16 * v14);
      *v15 = v23;
      v15[1] = v22;
      result = (uint64_t)outlined init with take of Any(v35, (_OWORD *)(*(_QWORD *)(v7 + 56) + 32 * v14));
      ++*(_QWORD *)(v7 + 16);
    }
  }
  result = swift_release();
  *v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  _QWORD *v22;
  unint64_t v23;
  int64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  id v33;
  uint64_t v34;
  uint64_t *v35;
  int64_t v36;
  uint64_t v37;
  char v38;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _DictionaryStorage<String, LACDTOMutablePendingPolicyEvaluation>);
  v38 = a2;
  v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_40;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  v37 = v5 + 64;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v35 = v2;
  v36 = (unint64_t)(v8 + 63) >> 6;
  v11 = v6 + 64;
  result = swift_retain();
  v13 = 0;
  while (1)
  {
    if (v10)
    {
      v19 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v20 = v19 | (v13 << 6);
      goto LABEL_31;
    }
    v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v21 >= v36)
      break;
    v22 = (_QWORD *)(v5 + 64);
    v23 = *(_QWORD *)(v37 + 8 * v21);
    ++v13;
    if (!v23)
    {
      v13 = v21 + 1;
      if (v21 + 1 >= v36)
        goto LABEL_33;
      v23 = *(_QWORD *)(v37 + 8 * v13);
      if (!v23)
      {
        v24 = v21 + 2;
        if (v24 >= v36)
        {
LABEL_33:
          swift_release();
          v3 = v35;
          if ((v38 & 1) == 0)
            goto LABEL_40;
          goto LABEL_36;
        }
        v23 = *(_QWORD *)(v37 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            v13 = v24 + 1;
            if (__OFADD__(v24, 1))
              goto LABEL_42;
            if (v13 >= v36)
              goto LABEL_33;
            v23 = *(_QWORD *)(v37 + 8 * v13);
            ++v24;
            if (v23)
              goto LABEL_30;
          }
        }
        v13 = v24;
      }
    }
LABEL_30:
    v10 = (v23 - 1) & v23;
    v20 = __clz(__rbit64(v23)) + (v13 << 6);
LABEL_31:
    v29 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v20);
    v31 = *v29;
    v30 = v29[1];
    v32 = *(void **)(*(_QWORD *)(v5 + 56) + 8 * v20);
    if ((v38 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      v33 = v32;
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    result = Hasher._finalize()();
    v14 = -1 << *(_BYTE *)(v7 + 32);
    v15 = result & ~v14;
    v16 = v15 >> 6;
    if (((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      v17 = __clz(__rbit64((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v25 = 0;
      v26 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        v27 = v16 == v26;
        if (v16 == v26)
          v16 = 0;
        v25 |= v27;
        v28 = *(_QWORD *)(v11 + 8 * v16);
      }
      while (v28 == -1);
      v17 = __clz(__rbit64(~v28)) + (v16 << 6);
    }
    *(_QWORD *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    v18 = (_QWORD *)(*(_QWORD *)(v7 + 48) + 16 * v17);
    *v18 = v31;
    v18[1] = v30;
    *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v17) = v32;
    ++*(_QWORD *)(v7 + 16);
  }
  swift_release();
  v3 = v35;
  v22 = (_QWORD *)(v5 + 64);
  if ((v38 & 1) == 0)
    goto LABEL_40;
LABEL_36:
  v34 = 1 << *(_BYTE *)(v5 + 32);
  if (v34 >= 64)
    bzero(v22, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v22 = -1 << v34;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_40:
  result = swift_release();
  *v3 = v7;
  return result;
}

uint64_t specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(uint64_t a1, int a2, uint64_t *a3)
{
  uint64_t *v3;
  uint64_t *v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t result;
  int64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  int64_t v24;
  _QWORD *v25;
  unint64_t v26;
  int64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  char v34;
  unint64_t v35;
  BOOL v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  int64_t v41;
  _QWORD *v42;
  uint64_t i;
  int v44;

  v5 = v3;
  v7 = type metadata accessor for UUID();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)&v39 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *v3;
  __swift_instantiateConcreteTypeFromMangledName(a3);
  v44 = a2;
  v12 = static _DictionaryStorage.resize(original:capacity:move:)();
  v13 = v12;
  if (!*(_QWORD *)(v11 + 16))
    goto LABEL_41;
  v14 = 1 << *(_BYTE *)(v11 + 32);
  v15 = *(_QWORD *)(v11 + 64);
  v42 = (_QWORD *)(v11 + 64);
  if (v14 < 64)
    v16 = ~(-1 << v14);
  else
    v16 = -1;
  v17 = v16 & v15;
  v40 = v3;
  v41 = (unint64_t)(v14 + 63) >> 6;
  v18 = v12 + 64;
  result = swift_retain();
  v20 = 0;
  for (i = v11; ; v11 = i)
  {
    if (v17)
    {
      v22 = __clz(__rbit64(v17));
      v17 &= v17 - 1;
      v23 = v22 | (v20 << 6);
      goto LABEL_22;
    }
    v24 = v20 + 1;
    if (__OFADD__(v20, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v24 >= v41)
      break;
    v25 = v42;
    v26 = v42[v24];
    ++v20;
    if (!v26)
    {
      v20 = v24 + 1;
      if (v24 + 1 >= v41)
        goto LABEL_34;
      v26 = v42[v20];
      if (!v26)
      {
        v27 = v24 + 2;
        if (v27 >= v41)
        {
LABEL_34:
          swift_release();
          v5 = v40;
          if ((v44 & 1) == 0)
            goto LABEL_41;
          goto LABEL_37;
        }
        v26 = v42[v27];
        if (!v26)
        {
          while (1)
          {
            v20 = v27 + 1;
            if (__OFADD__(v27, 1))
              goto LABEL_43;
            if (v20 >= v41)
              goto LABEL_34;
            v26 = v42[v20];
            ++v27;
            if (v26)
              goto LABEL_21;
          }
        }
        v20 = v27;
      }
    }
LABEL_21:
    v17 = (v26 - 1) & v26;
    v23 = __clz(__rbit64(v26)) + (v20 << 6);
LABEL_22:
    v28 = *(_QWORD *)(v8 + 72);
    v29 = *(_QWORD *)(v11 + 48) + v28 * v23;
    if ((v44 & 1) != 0)
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v8 + 32))(v10, v29, v7);
      v30 = *(_QWORD *)(*(_QWORD *)(v11 + 56) + 8 * v23);
    }
    else
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v8 + 16))(v10, v29, v7);
      v30 = *(_QWORD *)(*(_QWORD *)(v11 + 56) + 8 * v23);
      swift_retain();
    }
    lazy protocol witness table accessor for type LACPolicy and conformance LACPolicy((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEA88]);
    result = dispatch thunk of Hashable._rawHashValue(seed:)();
    v31 = -1 << *(_BYTE *)(v13 + 32);
    v32 = result & ~v31;
    v33 = v32 >> 6;
    if (((-1 << v32) & ~*(_QWORD *)(v18 + 8 * (v32 >> 6))) != 0)
    {
      v21 = __clz(__rbit64((-1 << v32) & ~*(_QWORD *)(v18 + 8 * (v32 >> 6)))) | v32 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v34 = 0;
      v35 = (unint64_t)(63 - v31) >> 6;
      do
      {
        if (++v33 == v35 && (v34 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        v36 = v33 == v35;
        if (v33 == v35)
          v33 = 0;
        v34 |= v36;
        v37 = *(_QWORD *)(v18 + 8 * v33);
      }
      while (v37 == -1);
      v21 = __clz(__rbit64(~v37)) + (v33 << 6);
    }
    *(_QWORD *)(v18 + ((v21 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v21;
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v8 + 32))(*(_QWORD *)(v13 + 48) + v28 * v21, v10, v7);
    *(_QWORD *)(*(_QWORD *)(v13 + 56) + 8 * v21) = v30;
    ++*(_QWORD *)(v13 + 16);
  }
  swift_release();
  v5 = v40;
  v25 = v42;
  if ((v44 & 1) == 0)
    goto LABEL_41;
LABEL_37:
  v38 = 1 << *(_BYTE *)(v11 + 32);
  if (v38 >= 64)
    bzero(v25, ((unint64_t)(v38 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v25 = -1 << v38;
  *(_QWORD *)(v11 + 16) = 0;
LABEL_41:
  result = swift_release();
  *v5 = v13;
  return result;
}

_OWORD *specialized _NativeDictionary.setValue(_:forKey:isUnique:)(_OWORD *a1, uint64_t a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  _QWORD *v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  _BOOL8 v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  _QWORD *v16;
  _OWORD *v17;
  _OWORD *result;
  unint64_t v19;
  char v20;
  _BYTE v21[40];

  v4 = (_QWORD **)v3;
  v8 = (_QWORD *)*v3;
  v10 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  v11 = v8[2];
  v12 = (v9 & 1) == 0;
  v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
  }
  else
  {
    v14 = v9;
    v15 = v8[3];
    if (v15 >= v13 && (a3 & 1) != 0)
    {
LABEL_7:
      v16 = *v4;
      if ((v14 & 1) != 0)
      {
LABEL_8:
        v17 = (_OWORD *)(v16[7] + 32 * v10);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v17);
        return outlined init with take of Any(a1, v17);
      }
      goto LABEL_11;
    }
    if (v15 >= v13 && (a3 & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v13, a3 & 1);
    v19 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
    if ((v14 & 1) == (v20 & 1))
    {
      v10 = v19;
      v16 = *v4;
      if ((v14 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      outlined init with copy of AnyHashable(a2, (uint64_t)v21);
      return specialized _NativeDictionary._insert(at:key:value:)(v10, (uint64_t)v21, a1, v16);
    }
  }
  result = (_OWORD *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, uint64_t a2, char a3)
{
  return specialized _NativeDictionary.setValue(_:forKey:isUnique:)(a1, a2, a3, (void (*)(uint64_t))specialized _NativeDictionary.copy(), &demangling cache variable for type metadata for _DictionaryStorage<UUID, LACOnenessControllerPendingRequest>);
}

uint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, uint64_t a2, char a3, void (*a4)(uint64_t), uint64_t *a5)
{
  _QWORD *v5;
  _QWORD **v7;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  _QWORD *v14;
  char v15;
  unint64_t v16;
  uint64_t v17;
  _BOOL8 v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t result;
  unint64_t v25;
  char v26;
  uint64_t *v27;
  uint64_t v28;

  v27 = a5;
  v28 = a1;
  v7 = (_QWORD **)v5;
  v10 = type metadata accessor for UUID();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)&v27 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = (_QWORD *)*v5;
  v16 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  v17 = v14[2];
  v18 = (v15 & 1) == 0;
  v19 = v17 + v18;
  if (__OFADD__(v17, v18))
  {
    __break(1u);
    goto LABEL_14;
  }
  v20 = v15;
  v21 = v14[3];
  if (v21 >= v19 && (a3 & 1) != 0)
  {
LABEL_7:
    v22 = *v7;
    if ((v20 & 1) != 0)
    {
LABEL_8:
      v23 = v22[7];
      result = swift_release();
      *(_QWORD *)(v23 + 8 * v16) = v28;
      return result;
    }
    goto LABEL_11;
  }
  if (v21 >= v19 && (a3 & 1) == 0)
  {
    a4(v19);
    goto LABEL_7;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v19, a3 & 1, v27);
  v25 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  if ((v20 & 1) != (v26 & 1))
  {
LABEL_14:
    result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  v16 = v25;
  v22 = *v7;
  if ((v20 & 1) != 0)
    goto LABEL_8;
LABEL_11:
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, a2, v10);
  return specialized _NativeDictionary._insert(at:key:value:)(v16, (uint64_t)v13, v28, v22);
}

_OWORD *specialized _NativeDictionary.setValue(_:forKey:isUnique:)(_OWORD *a1, uint64_t a2, uint64_t a3, char a4)
{
  _QWORD *v4;
  _QWORD **v5;
  _QWORD *v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  _OWORD *v19;
  _OWORD *result;
  unint64_t v21;
  char v22;

  v5 = (_QWORD **)v4;
  v10 = (_QWORD *)*v4;
  v12 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  v13 = v10[2];
  v14 = (v11 & 1) == 0;
  v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
  }
  else
  {
    v16 = v11;
    v17 = v10[3];
    if (v17 >= v15 && (a4 & 1) != 0)
    {
LABEL_7:
      v18 = *v5;
      if ((v16 & 1) != 0)
      {
LABEL_8:
        v19 = (_OWORD *)(v18[7] + 32 * v12);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v19);
        return outlined init with take of Any(a1, v19);
      }
      goto LABEL_11;
    }
    if (v17 >= v15 && (a4 & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v15, a4 & 1);
    v21 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
    if ((v16 & 1) == (v22 & 1))
    {
      v12 = v21;
      v18 = *v5;
      if ((v16 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      specialized _NativeDictionary._insert(at:key:value:)(v12, a2, a3, a1, v18);
      return (_OWORD *)swift_bridgeObjectRetain();
    }
  }
  result = (_OWORD *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

void specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  char v21;
  uint64_t *v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;

  v5 = v4;
  v10 = *v4;
  v12 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  v13 = *(_QWORD *)(v10 + 16);
  v14 = (v11 & 1) == 0;
  v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v16 = v11;
  v17 = *(_QWORD *)(v10 + 24);
  if (v17 >= v15 && (a4 & 1) != 0)
    goto LABEL_7;
  if (v17 >= v15 && (a4 & 1) == 0)
  {
    specialized _NativeDictionary.copy()();
LABEL_7:
    v18 = (_QWORD *)*v5;
    if ((v16 & 1) != 0)
    {
LABEL_8:
      v19 = v18[7];

      *(_QWORD *)(v19 + 8 * v12) = a1;
      return;
    }
LABEL_11:
    v18[(v12 >> 6) + 8] |= 1 << v12;
    v22 = (uint64_t *)(v18[6] + 16 * v12);
    *v22 = a2;
    v22[1] = a3;
    *(_QWORD *)(v18[7] + 8 * v12) = a1;
    v23 = v18[2];
    v24 = __OFADD__(v23, 1);
    v25 = v23 + 1;
    if (!v24)
    {
      v18[2] = v25;
      swift_bridgeObjectRetain();
      return;
    }
    goto LABEL_14;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v15, a4 & 1);
  v20 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  if ((v16 & 1) == (v21 & 1))
  {
    v12 = v20;
    v18 = (_QWORD *)*v5;
    if ((v16 & 1) != 0)
      goto LABEL_8;
    goto LABEL_11;
  }
LABEL_15:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
}

_OWORD *specialized _NativeDictionary._insert(at:key:value:)(unint64_t a1, uint64_t a2, _OWORD *a3, _QWORD *a4)
{
  uint64_t v5;
  __int128 v6;
  _OWORD *result;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;

  a4[(a1 >> 6) + 8] |= 1 << a1;
  v5 = a4[6] + 40 * a1;
  v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)v5 = *(_OWORD *)a2;
  *(_OWORD *)(v5 + 16) = v6;
  *(_QWORD *)(v5 + 32) = *(_QWORD *)(a2 + 32);
  result = outlined init with take of Any(a3, (_OWORD *)(a4[7] + 32 * a1));
  v8 = a4[2];
  v9 = __OFADD__(v8, 1);
  v10 = v8 + 1;
  if (v9)
    __break(1u);
  else
    a4[2] = v10;
  return result;
}

uint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;

  a4[(a1 >> 6) + 8] |= 1 << a1;
  v8 = a4[6];
  v9 = type metadata accessor for UUID();
  result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v8 + *(_QWORD *)(*(_QWORD *)(v9 - 8) + 72) * a1, a2, v9);
  *(_QWORD *)(a4[7] + 8 * a1) = a3;
  v11 = a4[2];
  v12 = __OFADD__(v11, 1);
  v13 = v11 + 1;
  if (v12)
    __break(1u);
  else
    a4[2] = v13;
  return result;
}

_OWORD *specialized _NativeDictionary._insert(at:key:value:)(unint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4, _QWORD *a5)
{
  _QWORD *v6;
  _OWORD *result;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;

  a5[(a1 >> 6) + 8] |= 1 << a1;
  v6 = (_QWORD *)(a5[6] + 16 * a1);
  *v6 = a2;
  v6[1] = a3;
  result = outlined init with take of Any(a4, (_OWORD *)(a5[7] + 32 * a1));
  v8 = a5[2];
  v9 = __OFADD__(v8, 1);
  v10 = v8 + 1;
  if (v9)
    __break(1u);
  else
    a5[2] = v10;
  return result;
}

void specialized LACOnenessAuthenticatorModel.authenticateRequest(_:completion:)(void *a1, uint64_t a2, void (**a3)(_QWORD, _QWORD, _QWORD))
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  id v25;
  void *v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  id v30;
  id v31;
  Class isa;
  id v33;
  id v34;
  char *v35;
  id v36;
  Swift::String v37;
  Swift::String v38;
  Swift::String v39;
  void *v40;
  void *v41;
  id v42;
  id v43;
  void *v44;
  id v45;
  uint64_t v46;
  Swift::String v47;
  void *v48;
  void *v49;
  id v50;
  id v51;
  void *v52;
  void (**v53)(_QWORD, _QWORD, _QWORD);
  Class v54;
  id v55;
  uint64_t v56;
  uint64_t v57;
  void (*v58)(char *, uint64_t, uint64_t);
  uint64_t v59;
  char *v60;
  void (*v61)(uint64_t, char *, uint64_t);
  char *v62;
  uint64_t v63;
  id v64;
  void (**v65)(uint64_t, uint64_t);
  void (*v66)(uint64_t, uint64_t);
  uint64_t v67;
  uint64_t *v68;
  char isUniquelyReferenced_nonNull_native;
  void (*v70)(uint64_t, uint64_t);
  uint64_t v71;
  id v72;
  uint64_t v73;
  Swift::String v74;
  char *v75;
  Swift::String v76;
  Swift::String v77;
  Swift::String v78;
  Swift::String v79;
  id v80;
  uint64_t v81;
  Swift::String v82;
  Swift::String v83;
  Swift::String v84;
  void *v85;
  void *v86;
  id v87;
  id v88;
  void *v89;
  char *v90;
  id v91;
  id v92;
  void (**v93)(_QWORD, _QWORD, _QWORD);
  char *v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  char *v98;
  char *v99;
  char *v100;
  uint64_t v101;
  uint64_t v102;
  Swift::String v103;

  v101 = a2;
  v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  MEMORY[0x24BDAC7A8](v5);
  v99 = (char *)&v90 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for UUID();
  v8 = *(_QWORD *)(v7 - 8);
  v9 = MEMORY[0x24BDAC7A8](v7);
  v98 = (char *)&v90 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = MEMORY[0x24BDAC7A8](v9);
  v13 = (char *)&v90 - v12;
  MEMORY[0x24BDAC7A8](v11);
  v15 = (char *)&v90 - v14;
  v16 = type metadata accessor for LACLogger();
  v17 = MEMORY[0x24BDAC7A8](v16);
  v19 = (char *)&v90 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = MEMORY[0x24BDAC7A8](v17);
  v100 = (char *)&v90 - v21;
  MEMORY[0x24BDAC7A8](v20);
  v23 = (char *)&v90 - v22;
  v24 = swift_allocObject();
  *(_QWORD *)(v24 + 16) = a3;
  _Block_copy(a3);
  v25 = objc_msgSend(a1, sel_externalizedContext);
  if (!v25)
  {
    v36 = LACLogABM();
    Logger.init(_:)();
    v103._countAndFlagsBits = 0;
    v103._object = (void *)0xE000000000000000;
    _StringGuts.grow(_:)(33);
    swift_bridgeObjectRelease();
    v103._countAndFlagsBits = 0xD000000000000018;
    v103._object = (void *)0x8000000240A83D30;
    LODWORD(v102) = objc_msgSend(a1, sel_identifier);
    v37._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v37);
    swift_bridgeObjectRelease();
    v38._countAndFlagsBits = 0x6C696E20736920;
    v38._object = (void *)0xE700000000000000;
    String.append(_:)(v38);
    v39 = v103;
    LOBYTE(v103._countAndFlagsBits) = 3;
    LACLogger.log(level:_:)((LocalAuthenticationCore::LACLogger::Level)&v103, v39);
    swift_bridgeObjectRelease();
    outlined destroy of LACLogger((uint64_t)v23);
    v40 = (void *)objc_opt_self();
    v41 = (void *)MEMORY[0x2426863FC](0xD000000000000013, 0x8000000240A83D50);
    v42 = objc_msgSend(v40, sel_errorWithCode_debugDescription_, -1000, v41);

    v43 = v42;
    v44 = (void *)_convertErrorToNSError(_:)();
    ((void (**)(_QWORD, _QWORD, void *))a3)[2](a3, 0, v44);
    swift_release();

    return;
  }
  v26 = v25;
  v94 = v15;
  v95 = v13;
  v97 = v8;
  v90 = v19;
  v27 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  v29 = v28;

  v30 = objc_msgSend(a1, sel_client);
  if (v30)
  {
    v31 = v30;
    swift_getObjectType();
    isa = (Class)objc_msgSend(a1, sel_options);
    v96 = v24;
    v92 = a1;
    v93 = a3;
    if (isa)
    {
      static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

      isa = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
    }
    v33 = objc_msgSend((id)swift_getObjCClassFromMetadata(), sel_infoForXPCClient_evaluationOptions_, v31, isa);

    v34 = objc_msgSend((id)objc_opt_self(), sel_isCompanionSessionActive);
    if (v34)
    {
      v35 = LACOnenessAuthenticatorModel.mockedAuthProvider.getter();
    }
    else
    {
      v35 = *(char **)(v101 + OBJC_IVAR____TtC23LocalAuthenticationCore28LACOnenessAuthenticatorModel_authProvider);
      swift_unknownObjectRetain();
    }
    v53 = v93;
    v54 = Data._bridgeToObjectiveC()().super.isa;
    v55 = objc_msgSend(v35, sel_authenticateClient_withAcmContext_, v33, v54);

    swift_unknownObjectRelease();
    v91 = v33;
    if (v55)
    {
      v56 = (uint64_t)v95;
      static UUID._unconditionallyBridgeFromObjectiveC(_:)();

      v57 = v97;
      v58 = *(void (**)(char *, uint64_t, uint64_t))(v97 + 32);
      v59 = (uint64_t)v99;
      v58(v99, v56, v7);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v57 + 56))(v59, 0, 1, v7);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v57 + 48))(v59, 1, v7) != 1)
      {
        v60 = v94;
        v58(v94, v59, v7);
        v61 = *(void (**)(uint64_t, char *, uint64_t))(v57 + 16);
        v61(v56, v60, v7);
        v62 = v98;
        v61((uint64_t)v98, v60, v7);
        type metadata accessor for LACOnenessAuthenticatorPendingRequest();
        v63 = swift_allocObject();
        v58((char *)(v63 + OBJC_IVAR____TtC23LocalAuthenticationCore37LACOnenessAuthenticatorPendingRequest_identifier), (uint64_t)v62, v7);
        v64 = v92;
        *(_QWORD *)(v63 + OBJC_IVAR____TtC23LocalAuthenticationCore37LACOnenessAuthenticatorPendingRequest_request) = v92;
        v65 = (void (**)(uint64_t, uint64_t))(v63
                                                     + OBJC_IVAR____TtC23LocalAuthenticationCore37LACOnenessAuthenticatorPendingRequest_completion);
        v66 = (void (*)(uint64_t, uint64_t))v96;
        *v65 = partial apply for thunk for @escaping @callee_unowned @convention(block) (@unowned NSDictionary?, @unowned NSError?) -> ();
        v65[1] = v66;
        v67 = v7;
        v68 = (uint64_t *)(v101 + OBJC_IVAR____TtC23LocalAuthenticationCore28LACOnenessAuthenticatorModel_pendingSessions);
        swift_beginAccess();
        swift_unknownObjectRetain();
        swift_retain();
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        v102 = *v68;
        *v68 = 0x8000000000000000;
        specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v63, v56, isUniquelyReferenced_nonNull_native, (void (*)(uint64_t))specialized _NativeDictionary.copy(), (uint64_t *)&demangling cache variable for type metadata for _DictionaryStorage<UUID, LACOnenessAuthenticatorPendingRequest>);
        *v68 = v102;
        swift_bridgeObjectRelease();
        v70 = *(void (**)(uint64_t, uint64_t))(v57 + 8);
        v71 = v67;
        v70(v56, v67);
        swift_endAccess();
        v72 = LACLogABM();
        v73 = (uint64_t)v90;
        Logger.init(_:)();
        v103._countAndFlagsBits = 0;
        v103._object = (void *)0xE000000000000000;
        _StringGuts.grow(_:)(54);
        v74._countAndFlagsBits = 0xD000000000000025;
        v74._object = (void *)0x8000000240A83DD0;
        String.append(_:)(v74);
        lazy protocol witness table accessor for type LACPolicy and conformance LACPolicy((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEAB8]);
        v75 = v94;
        v76._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v76);
        swift_bridgeObjectRelease();
        v77._countAndFlagsBits = 0x71657220726F6620;
        v77._object = (void *)0xED00002074736575;
        String.append(_:)(v77);
        LODWORD(v102) = objc_msgSend(v64, sel_identifier);
        v78._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v78);
        swift_bridgeObjectRelease();
        v79 = v103;
        LOBYTE(v103._countAndFlagsBits) = 2;
        LACLogger.log(level:_:)((LocalAuthenticationCore::LACLogger::Level)&v103, v79);
        outlined consume of Data._Representation(v27, v29);
        swift_unknownObjectRelease();

        swift_bridgeObjectRelease();
        outlined destroy of LACLogger(v73);
        v70((uint64_t)v75, v71);
        goto LABEL_15;
      }
    }
    else
    {
      v59 = (uint64_t)v99;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v97 + 56))(v99, 1, 1, v7);
    }
    outlined destroy of AsyncStream<()>.Continuation?(v59, (uint64_t *)&demangling cache variable for type metadata for UUID?);
    v80 = LACLogABM();
    v81 = (uint64_t)v100;
    Logger.init(_:)();
    v103._countAndFlagsBits = 0;
    v103._object = (void *)0xE000000000000000;
    _StringGuts.grow(_:)(56);
    v82._countAndFlagsBits = 0xD000000000000036;
    v82._object = (void *)0x8000000240A83D90;
    String.append(_:)(v82);
    LODWORD(v102) = objc_msgSend(v92, sel_identifier);
    v83._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v83);
    swift_bridgeObjectRelease();
    v84 = v103;
    LOBYTE(v103._countAndFlagsBits) = 3;
    LACLogger.log(level:_:)((LocalAuthenticationCore::LACLogger::Level)&v103, v84);
    swift_bridgeObjectRelease();
    outlined destroy of LACLogger(v81);
    v85 = (void *)objc_opt_self();
    v86 = (void *)MEMORY[0x2426863FC](0xD000000000000026, 0x8000000240A83CD0);
    v87 = objc_msgSend(v85, sel_errorWithCode_debugDescription_, -1000, v86);

    v88 = v87;
    v89 = (void *)_convertErrorToNSError(_:)();
    ((void (**)(_QWORD, _QWORD, void *))v53)[2](v53, 0, v89);
    swift_unknownObjectRelease();

    outlined consume of Data._Representation(v27, v29);
    goto LABEL_15;
  }
  v45 = LACLogABM();
  v46 = (uint64_t)v100;
  Logger.init(_:)();
  LOBYTE(v103._countAndFlagsBits) = 3;
  v47._countAndFlagsBits = 0xD000000000000013;
  v47._object = (void *)0x8000000240A83D70;
  LACLogger.log(level:_:)((LocalAuthenticationCore::LACLogger::Level)&v103, v47);
  outlined destroy of LACLogger(v46);
  v48 = (void *)objc_opt_self();
  v49 = (void *)MEMORY[0x2426863FC](0xD000000000000013, 0x8000000240A83D70);
  v50 = objc_msgSend(v48, sel_errorWithCode_debugDescription_, -1000, v49);

  v51 = v50;
  v52 = (void *)_convertErrorToNSError(_:)();
  ((void (**)(_QWORD, _QWORD, void *))a3)[2](a3, 0, v52);

  outlined consume of Data._Representation(v27, v29);
LABEL_15:
  swift_release();
}

uint64_t specialized LACOnenessAuthenticatorModel.authenticationProvider(_:didStartAuthenticationWith:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  id v6;
  uint64_t *v7;
  uint64_t v8;
  unint64_t v9;
  char v10;
  uint64_t v11;
  unsigned int v12;
  Swift::String v13;
  _QWORD v16[3];
  Swift::String v17;

  v3 = type metadata accessor for LACLogger();
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v16[-1] - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = LACLogABM();
  Logger.init(_:)();
  v16[0] = 0;
  v16[1] = 0xE000000000000000;
  _StringGuts.grow(_:)(49);
  swift_bridgeObjectRelease();
  v17._countAndFlagsBits = 0xD00000000000002FLL;
  v17._object = (void *)0x8000000240A84100;
  v7 = (uint64_t *)(v1 + OBJC_IVAR____TtC23LocalAuthenticationCore28LACOnenessAuthenticatorModel_pendingSessions);
  swift_beginAccess();
  v8 = *v7;
  if (*(_QWORD *)(v8 + 16) && (v9 = specialized __RawDictionaryStorage.find<A>(_:)(a1), (v10 & 1) != 0))
  {
    v11 = *(_QWORD *)(*(_QWORD *)(v8 + 56) + 8 * v9);
    swift_endAccess();
    v12 = objc_msgSend(*(id *)(v11+ OBJC_IVAR____TtC23LocalAuthenticationCore37LACOnenessAuthenticatorPendingRequest_request), sel_identifier);
  }
  else
  {
    swift_endAccess();
    v12 = 0;
  }
  LODWORD(v16[0]) = v12;
  v13._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v13);
  swift_bridgeObjectRelease();
  LOBYTE(v16[0]) = 2;
  LACLogger.log(level:_:)((LocalAuthenticationCore::LACLogger::Level)v16, v17);
  swift_bridgeObjectRelease();
  return outlined destroy of LACLogger((uint64_t)v5);
}

uint64_t specialized LACOnenessAuthenticatorModel.authenticationProvider(_:didCompleteAuthenticationWith:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void *v17;
  _QWORD v19[2];
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD aBlock[6];

  v2 = v1;
  v4 = type metadata accessor for DispatchWorkItemFlags();
  v22 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DispatchQoS();
  v20 = *(_QWORD *)(v7 - 8);
  v21 = v7;
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for UUID();
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(_QWORD *)(v11 + 64);
  MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)v19 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19[1] = *(_QWORD *)(v2 + OBJC_IVAR____TtC23LocalAuthenticationCore28LACOnenessAuthenticatorModel_replyQueue);
  v14 = swift_allocObject();
  swift_unknownObjectWeakInit();
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, a1, v10);
  v15 = (*(unsigned __int8 *)(v11 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
  v16 = swift_allocObject();
  *(_QWORD *)(v16 + 16) = v14;
  (*(void (**)(unint64_t, char *, uint64_t))(v11 + 32))(v16 + v15, v13, v10);
  aBlock[4] = partial apply for closure #1 in LACOnenessAuthenticatorModel.authenticationProvider(_:didCompleteAuthenticationWith:);
  aBlock[5] = v16;
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
  aBlock[3] = &block_descriptor_21;
  v17 = _Block_copy(aBlock);
  swift_retain();
  static DispatchQoS.unspecified.getter();
  v23 = MEMORY[0x24BEE4AF8];
  lazy protocol witness table accessor for type LACPolicy and conformance LACPolicy((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, (uint64_t (*)(uint64_t))MEMORY[0x24BEE5458], MEMORY[0x24BEE5468]);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x242686654](0, v9, v6, v17);
  _Block_release(v17);
  (*(void (**)(char *, uint64_t))(v22 + 8))(v6, v4);
  (*(void (**)(char *, uint64_t))(v20 + 8))(v9, v21);
  swift_release();
  return swift_release();
}

uint64_t specialized LACOnenessAuthenticatorModel.authenticationProvider(_:didFailAuthenticationWith:error:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  void *v19;
  void *v20;
  id v21;
  _QWORD v23[2];
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD aBlock[6];

  v3 = v2;
  v23[0] = a2;
  v5 = type metadata accessor for DispatchWorkItemFlags();
  v26 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DispatchQoS();
  v24 = *(_QWORD *)(v8 - 8);
  v25 = v8;
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for UUID();
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(_QWORD *)(v12 + 64);
  MEMORY[0x24BDAC7A8](v11);
  v14 = (char *)v23 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23[1] = *(_QWORD *)(v3 + OBJC_IVAR____TtC23LocalAuthenticationCore28LACOnenessAuthenticatorModel_replyQueue);
  v15 = swift_allocObject();
  swift_unknownObjectWeakInit();
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v14, a1, v11);
  v16 = (*(unsigned __int8 *)(v12 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
  v17 = (v13 + v16 + 7) & 0xFFFFFFFFFFFFFFF8;
  v18 = swift_allocObject();
  *(_QWORD *)(v18 + 16) = v15;
  (*(void (**)(unint64_t, char *, uint64_t))(v12 + 32))(v18 + v16, v14, v11);
  v19 = (void *)v23[0];
  *(_QWORD *)(v18 + v17) = v23[0];
  aBlock[4] = partial apply for closure #1 in LACOnenessAuthenticatorModel.authenticationProvider(_:didFailAuthenticationWith:error:);
  aBlock[5] = v18;
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
  aBlock[3] = &block_descriptor_14;
  v20 = _Block_copy(aBlock);
  swift_retain();
  v21 = v19;
  static DispatchQoS.unspecified.getter();
  v27 = MEMORY[0x24BEE4AF8];
  lazy protocol witness table accessor for type LACPolicy and conformance LACPolicy((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, (uint64_t (*)(uint64_t))MEMORY[0x24BEE5458], MEMORY[0x24BEE5468]);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x242686654](0, v10, v7, v20);
  _Block_release(v20);
  (*(void (**)(char *, uint64_t))(v26 + 8))(v7, v5);
  (*(void (**)(char *, uint64_t))(v24 + 8))(v10, v25);
  swift_release();
  return swift_release();
}

uint64_t type metadata accessor for LACOnenessAuthenticatorModel()
{
  return objc_opt_self();
}

uint64_t method lookup function for LACOnenessAuthenticatorModel()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of LACOnenessAuthenticatorModel.__allocating_init(authenticationProvider:clientInfoProvider:replyQueue:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 120))();
}

uint64_t ObjC metadata update function for LACOnenessAuthenticatorPendingRequest()
{
  return type metadata accessor for LACOnenessAuthenticatorPendingRequest();
}

uint64_t type metadata completion function for LACOnenessAuthenticatorPendingRequest()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    result = swift_updateClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t method lookup function for LACOnenessAuthenticatorPendingRequest()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of LACOnenessAuthenticatorPendingRequest.__allocating_init(identifier:request:completion:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 104))();
}

uint64_t sub_240A32240()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject();
}

void partial apply for thunk for @escaping @callee_unowned @convention(block) (@unowned NSDictionary?, @unowned NSError?) -> ()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  thunk for @escaping @callee_unowned @convention(block) (@unowned NSDictionary?, @unowned NSError?) -> ()(a1, a2, *(_QWORD *)(v2 + 16));
}

uint64_t outlined init with copy of Any(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t outlined init with copy of AnyHashable(uint64_t a1, uint64_t a2)
{
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(MEMORY[0x24BEE23D0] - 8) + 16))(a2, a1);
  return a2;
}

uint64_t sub_240A322E4()
{
  swift_unknownObjectWeakDestroy();
  return swift_deallocObject();
}

uint64_t sub_240A32308()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;

  v1 = type metadata accessor for UUID();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = (*(_QWORD *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in LACOnenessAuthenticatorModel.authenticationProvider(_:didFailAuthenticationWith:error:)()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;

  v1 = *(_QWORD *)(type metadata accessor for UUID() - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  return closure #1 in LACOnenessAuthenticatorModel.authenticationProvider(_:didFailAuthenticationWith:error:)(*(_QWORD *)(v0 + 16), v0 + v2, *(_QWORD *)(v0 + ((*(_QWORD *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFF8)));
}

uint64_t sub_240A323DC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v1 = type metadata accessor for UUID();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in LACOnenessAuthenticatorModel.authenticationProvider(_:didCompleteAuthenticationWith:)()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for UUID() - 8) + 80);
  return closure #1 in LACOnenessAuthenticatorModel.authenticationProvider(_:didCompleteAuthenticationWith:)(*(_QWORD *)(v0 + 16), v0 + ((v1 + 24) & ~v1));
}

uint64_t sub_240A32480()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v1 = type metadata accessor for UUID();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  swift_release();
  swift_unknownObjectRelease();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  return swift_deallocObject();
}

void partial apply for closure #1 in LACOnenessAuthenticatorModel.simulateAuthenticationSuccess()()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for UUID() - 8) + 80);
  closure #1 in LACOnenessAuthenticatorModel.simulateAuthenticationSuccess()(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), v0 + ((v1 + 32) & ~v1));
}

uint64_t outlined init with take of (key: UUID, value: LACOnenessAuthenticatorPendingRequest)?(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

id LACOnenessControllerModel.isFeatureEnabled.getter()
{
  return LACOnenessControllerModel.isFeatureEnabled.getter((SEL *)&selRef_featureFlagApproveByMacEnabled);
}

id LACOnenessControllerModel.isFailureUIEnabled.getter()
{
  return LACOnenessControllerModel.isFeatureEnabled.getter((SEL *)&selRef_featureFlagApproveByMacFailureUIEnabled);
}

id LACOnenessControllerModel.isFeatureEnabled.getter(SEL *a1)
{
  id v2;
  id v3;

  v2 = objc_msgSend((id)objc_opt_self(), sel_sharedInstance);
  v3 = objc_msgSend(v2, *a1);

  return v3;
}

id LACOnenessControllerModel.__allocating_init(authenticator:sessionMonitor:uiPresenter:replyQueue:)(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  objc_class *v4;
  id v9;

  v9 = objc_allocWithZone(v4);
  return LACOnenessControllerModel.init(authenticator:sessionMonitor:uiPresenter:replyQueue:)(a1, a2, a3, a4);
}

id LACOnenessControllerModel.init(authenticator:sessionMonitor:uiPresenter:replyQueue:)(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  char *v4;
  char *v5;
  objc_class *ObjectType;
  uint64_t v11;
  char *v12;
  id v13;
  id v14;
  objc_super v16;

  v5 = v4;
  ObjectType = (objc_class *)swift_getObjectType();
  v11 = OBJC_IVAR____TtC23LocalAuthenticationCore25LACOnenessControllerModel_pendingRequests;
  v12 = v5;
  *(_QWORD *)&v5[v11] = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  *(_QWORD *)&v12[OBJC_IVAR____TtC23LocalAuthenticationCore25LACOnenessControllerModel_authenticator] = a1;
  *(_QWORD *)&v12[OBJC_IVAR____TtC23LocalAuthenticationCore25LACOnenessControllerModel_sessionMonitor] = a2;
  *(_QWORD *)&v12[OBJC_IVAR____TtC23LocalAuthenticationCore25LACOnenessControllerModel_uiPresenter] = a3;
  *(_QWORD *)&v12[OBJC_IVAR____TtC23LocalAuthenticationCore25LACOnenessControllerModel_replyQueue] = a4;
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  v13 = a4;

  v16.receiver = v12;
  v16.super_class = ObjectType;
  v14 = objc_msgSendSuper2(&v16, sel_init);
  objc_msgSend((id)swift_unknownObjectRetain(), sel_addObserver_, v14);
  swift_unknownObjectRelease();

  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();

  return v14;
}

id LACOnenessControllerModel.isSessionActive.getter()
{
  uint64_t v0;

  return objc_msgSend(*(id *)(v0 + OBJC_IVAR____TtC23LocalAuthenticationCore25LACOnenessControllerModel_sessionMonitor), sel_isSessionActive);
}

void LACOnenessControllerModel.domainState(for:completion:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  void *v5;
  void *v6;
  _QWORD v7[6];

  v5 = *(void **)(v3 + OBJC_IVAR____TtC23LocalAuthenticationCore25LACOnenessControllerModel_authenticator);
  v7[4] = a2;
  v7[5] = a3;
  v7[0] = MEMORY[0x24BDAC760];
  v7[1] = 1107296256;
  v7[2] = thunk for @escaping @callee_guaranteed (@guaranteed [AnyHashable : Any]?, @guaranteed Error?) -> ();
  v7[3] = &block_descriptor_6;
  v6 = _Block_copy(v7);
  swift_retain();
  swift_release();
  objc_msgSend(v5, sel_domainStateForRequest_completion_, a1, v6);
  _Block_release(v6);
}

uint64_t block_copy_helper_4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_4()
{
  return swift_release();
}

uint64_t LACOnenessControllerModel.canProcessRequest(_:)(void *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  void *v10;
  id v11;
  uint64_t result;
  id v13;
  unsigned int v14;
  id v15;
  Swift::String v16;
  Swift::String v17;
  unint64_t v18;
  const char *v19;
  id v20;
  Swift::String v21;
  Swift::String v22;
  id v23;
  Swift::String v24;
  unint64_t v25;
  Swift::String v26;
  _BYTE v27[12];
  unsigned int v28;
  Swift::String v29;

  v3 = type metadata accessor for LACLogger();
  MEMORY[0x24BDAC7A8](v3);
  v5 = &v27[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v6 = type metadata accessor for DispatchPredicate();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = &v27[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v10 = *(void **)(v1 + OBJC_IVAR____TtC23LocalAuthenticationCore25LACOnenessControllerModel_replyQueue);
  *v9 = v10;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v7 + 104))(v9, *MEMORY[0x24BEE5610], v6);
  v11 = v10;
  LOBYTE(v10) = _dispatchPreconditionTest(_:)();
  result = (*(uint64_t (**)(_QWORD *, uint64_t))(v7 + 8))(v9, v6);
  if ((v10 & 1) != 0)
  {
    v13 = objc_msgSend((id)objc_opt_self(), sel_sharedInstance);
    v14 = objc_msgSend(v13, sel_featureFlagApproveByMacEnabled);

    if (v14)
    {
      if (objc_msgSend(*(id *)(v1+ OBJC_IVAR____TtC23LocalAuthenticationCore25LACOnenessControllerModel_authenticator), sel_isAvailable))
      {
        if ((objc_msgSend(*(id *)(v1+ OBJC_IVAR____TtC23LocalAuthenticationCore25LACOnenessControllerModel_sessionMonitor), sel_isSessionActive) & 1) != 0)return 1;
        v23 = LACLogABM();
        Logger.init(_:)();
        v29._countAndFlagsBits = 0;
        v29._object = (void *)0xE000000000000000;
        _StringGuts.grow(_:)(49);
        swift_bridgeObjectRelease();
        v29._countAndFlagsBits = 0xD00000000000001ALL;
        v29._object = (void *)0x8000000240A84180;
        v28 = objc_msgSend(a1, sel_identifier);
        v24._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v24);
        swift_bridgeObjectRelease();
        v18 = 0xD000000000000015;
        v19 = " - session not active";
      }
      else
      {
        v20 = LACLogABM();
        Logger.init(_:)();
        v29._countAndFlagsBits = 0;
        v29._object = (void *)0xE000000000000000;
        _StringGuts.grow(_:)(58);
        v21._object = (void *)0x8000000240A84180;
        v21._countAndFlagsBits = 0xD00000000000001ALL;
        String.append(_:)(v21);
        v28 = objc_msgSend(a1, sel_identifier);
        v22._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v22);
        swift_bridgeObjectRelease();
        v18 = 0xD00000000000001ELL;
        v19 = " - authenticator not available";
      }
    }
    else
    {
      v15 = LACLogABM();
      Logger.init(_:)();
      v29._countAndFlagsBits = 0;
      v29._object = (void *)0xE000000000000000;
      _StringGuts.grow(_:)(52);
      v16._object = (void *)0x8000000240A84180;
      v16._countAndFlagsBits = 0xD00000000000001ALL;
      String.append(_:)(v16);
      v28 = objc_msgSend(a1, sel_identifier);
      v17._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v17);
      swift_bridgeObjectRelease();
      v18 = 0xD000000000000018;
      v19 = " - feature flag disabled";
    }
    v25 = (unint64_t)(v19 - 32) | 0x8000000000000000;
    String.append(_:)(*(Swift::String *)&v18);
    v26 = v29;
    LOBYTE(v29._countAndFlagsBits) = 2;
    LACLogger.log(level:_:)((LocalAuthenticationCore::LACLogger::Level)&v29, v26);
    swift_bridgeObjectRelease();
    outlined destroy of LACLogger((uint64_t)v5);
    return 0;
  }
  else
  {
    __break(1u);
  }
  return result;
}

void LACOnenessControllerModel.processRequest(_:configuration:completion:)(void *a1, void *a2, void (*a3)(void), void (*a4)(void))
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  void *v17;
  id v18;
  uint64_t v19;
  id v20;
  void (*v21)(void);
  id v22;
  void (**v23)(void);
  uint64_t v24;
  uint64_t *v25;
  char isUniquelyReferenced_nonNull_native;
  id v27;
  uint64_t v28;
  Swift::String v29;
  Swift::String v30;
  Swift::String v31;
  Swift::String v32;
  Swift::String v33;
  id v34;
  id v35;
  char *v36;
  void (*v37)(void);
  void (*v38)(void);
  uint64_t v39;
  Swift::String v40;

  v37 = a3;
  v38 = a4;
  v35 = a2;
  v6 = type metadata accessor for LACLogger();
  MEMORY[0x24BDAC7A8](v6);
  v36 = (char *)&v35 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for UUID();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v35 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for DispatchPredicate();
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x24BDAC7A8](v12);
  v15 = (id *)((char *)&v35 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  v16 = v4;
  v17 = *(void **)(v4 + OBJC_IVAR____TtC23LocalAuthenticationCore25LACOnenessControllerModel_replyQueue);
  *v15 = v17;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v13 + 104))(v15, *MEMORY[0x24BEE5610], v12);
  v18 = v17;
  LOBYTE(v17) = _dispatchPreconditionTest(_:)();
  (*(void (**)(_QWORD *, uint64_t))(v13 + 8))(v15, v12);
  if ((v17 & 1) != 0)
  {
    if ((LACOnenessControllerModel.canProcessRequest(_:)(a1) & 1) != 0)
    {
      type metadata accessor for LACOnenessControllerPendingRequest();
      v19 = swift_allocObject();
      swift_unknownObjectRetain();
      v20 = v35;
      v21 = v38;
      swift_retain();
      UUID.init()();
      *(_BYTE *)(v19 + OBJC_IVAR____TtC23LocalAuthenticationCore34LACOnenessControllerPendingRequest_isOnenessProcessed) = 0;
      *(_QWORD *)(v19
                + OBJC_IVAR____TtC23LocalAuthenticationCore34LACOnenessControllerPendingRequest_companionAuthenticationResult) = 0;
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(v19 + OBJC_IVAR____TtC23LocalAuthenticationCore34LACOnenessControllerPendingRequest____lazy_storage___contextID, 1, 1, v8);
      *(_QWORD *)(v19 + OBJC_IVAR____TtC23LocalAuthenticationCore34LACOnenessControllerPendingRequest_request) = a1;
      swift_unknownObjectRetain();
      v22 = objc_msgSend(v20, sel_nextProcessor);
      *(_QWORD *)(v19 + OBJC_IVAR____TtC23LocalAuthenticationCore34LACOnenessControllerPendingRequest_nextProcessor) = v22;
      v23 = (void (**)(void))(v19
                            + OBJC_IVAR____TtC23LocalAuthenticationCore34LACOnenessControllerPendingRequest_completion);
      *v23 = v37;
      v23[1] = v21;
      *(_BYTE *)(v19 + OBJC_IVAR____TtC23LocalAuthenticationCore34LACOnenessControllerPendingRequest_state) = 0;
      swift_unknownObjectRelease();

      v24 = v19 + OBJC_IVAR____TtC23LocalAuthenticationCore34LACOnenessControllerPendingRequest_id;
      (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, v19 + OBJC_IVAR____TtC23LocalAuthenticationCore34LACOnenessControllerPendingRequest_id, v8);
      v25 = (uint64_t *)(v16 + OBJC_IVAR____TtC23LocalAuthenticationCore25LACOnenessControllerModel_pendingRequests);
      swift_beginAccess();
      swift_retain();
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v39 = *v25;
      *v25 = 0x8000000000000000;
      specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v19, (uint64_t)v11, isUniquelyReferenced_nonNull_native);
      *v25 = v39;
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
      swift_endAccess();
      v27 = LACLogABM();
      v28 = (uint64_t)v36;
      Logger.init(_:)();
      v40._countAndFlagsBits = 0;
      v40._object = (void *)0xE000000000000000;
      _StringGuts.grow(_:)(61);
      v29._object = (void *)0x8000000240A84200;
      v29._countAndFlagsBits = 0xD00000000000001CLL;
      String.append(_:)(v29);
      lazy protocol witness table accessor for type LACPolicy and conformance LACPolicy((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEAB8]);
      v30._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v30);
      swift_bridgeObjectRelease();
      v31._countAndFlagsBits = 0xD00000000000001DLL;
      v31._object = (void *)0x8000000240A84220;
      String.append(_:)(v31);
      LODWORD(v39) = objc_msgSend(a1, sel_identifier);
      v32._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v32);
      swift_bridgeObjectRelease();
      v33 = v40;
      LOBYTE(v40._countAndFlagsBits) = 2;
      LACLogger.log(level:_:)((LocalAuthenticationCore::LACLogger::Level)&v40, v33);
      swift_bridgeObjectRelease();
      outlined destroy of LACLogger(v28);
      LACOnenessControllerModel.processAndEvaluateRequest(with:)(v24);
      swift_release();
    }
    else
    {
      v34 = objc_msgSend((id)objc_opt_self(), sel_resultWithNext_, a1, v35);
      v37();

    }
  }
  else
  {
    __break(1u);
  }
}

uint64_t LACOnenessControllerPendingRequest.__allocating_init(request:configuration:completion:state:)(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  _QWORD *v14;

  v10 = swift_allocObject();
  UUID.init()();
  *(_BYTE *)(v10 + OBJC_IVAR____TtC23LocalAuthenticationCore34LACOnenessControllerPendingRequest_isOnenessProcessed) = 0;
  *(_QWORD *)(v10
            + OBJC_IVAR____TtC23LocalAuthenticationCore34LACOnenessControllerPendingRequest_companionAuthenticationResult) = 0;
  v11 = v10 + OBJC_IVAR____TtC23LocalAuthenticationCore34LACOnenessControllerPendingRequest____lazy_storage___contextID;
  v12 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v11, 1, 1, v12);
  *(_QWORD *)(v10 + OBJC_IVAR____TtC23LocalAuthenticationCore34LACOnenessControllerPendingRequest_request) = a1;
  swift_unknownObjectRetain();
  v13 = objc_msgSend(a2, sel_nextProcessor);

  *(_QWORD *)(v10 + OBJC_IVAR____TtC23LocalAuthenticationCore34LACOnenessControllerPendingRequest_nextProcessor) = v13;
  v14 = (_QWORD *)(v10 + OBJC_IVAR____TtC23LocalAuthenticationCore34LACOnenessControllerPendingRequest_completion);
  *v14 = a3;
  v14[1] = a4;
  *(_BYTE *)(v10 + OBJC_IVAR____TtC23LocalAuthenticationCore34LACOnenessControllerPendingRequest_state) = a5;
  swift_unknownObjectRelease();
  return v10;
}

uint64_t type metadata accessor for LACOnenessControllerPendingRequest()
{
  uint64_t result;

  result = type metadata singleton initialization cache for LACOnenessControllerPendingRequest;
  if (!type metadata singleton initialization cache for LACOnenessControllerPendingRequest)
    return swift_getSingletonMetadata();
  return result;
}

void LACOnenessControllerModel.processAndEvaluateRequest(with:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  void *v11;
  id v12;
  uint64_t *v13;
  uint64_t v14;
  unint64_t v15;
  char v16;
  uint64_t v17;
  id v18;
  Swift::String v19;
  Swift::String v20;
  id v21;
  void *v22;
  uint64_t v23;
  unint64_t v24;
  char v25;
  id v26;
  Swift::String v27;
  Swift::String v28;
  Swift::String v29;
  Swift::String v30;
  id v31;
  Swift::String v32;
  id v33;
  uint64_t v34;
  Swift::String v35;
  Swift::String v36;
  Swift::String v37;
  void *v38;
  void *v39;
  id v40;
  void *v41;
  void *v42;
  id v43;
  uint64_t v44;
  Swift::String v45[2];
  __int128 v46;
  __int128 v47;

  v2 = v1;
  v4 = type metadata accessor for LACLogger();
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v44 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DispatchPredicate();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (uint64_t *)((char *)&v44 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  v11 = *(void **)(v2 + OBJC_IVAR____TtC23LocalAuthenticationCore25LACOnenessControllerModel_replyQueue);
  *v10 = v11;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v8 + 104))(v10, *MEMORY[0x24BEE5610], v7);
  v12 = v11;
  LOBYTE(v11) = _dispatchPreconditionTest(_:)();
  (*(void (**)(_QWORD *, uint64_t))(v8 + 8))(v10, v7);
  if ((v11 & 1) == 0)
  {
    __break(1u);
    return;
  }
  v13 = (uint64_t *)(v2 + OBJC_IVAR____TtC23LocalAuthenticationCore25LACOnenessControllerModel_pendingRequests);
  swift_beginAccess();
  v14 = *v13;
  if (!*(_QWORD *)(v14 + 16) || (v15 = specialized __RawDictionaryStorage.find<A>(_:)(a1), (v16 & 1) == 0))
  {
    swift_endAccess();
    v26 = LACLogABM();
    Logger.init(_:)();
    v45[0]._countAndFlagsBits = 0;
    v45[0]._object = (void *)0xE000000000000000;
    _StringGuts.grow(_:)(51);
    v27._object = (void *)0x8000000240A84820;
    v27._countAndFlagsBits = 0xD000000000000018;
    String.append(_:)(v27);
    type metadata accessor for UUID();
    lazy protocol witness table accessor for type LACPolicy and conformance LACPolicy((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEAB8]);
    v28._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v28);
    swift_bridgeObjectRelease();
    v29._countAndFlagsBits = 0xD000000000000019;
    v29._object = (void *)0x8000000240A84600;
    String.append(_:)(v29);
    v30 = v45[0];
    LOBYTE(v45[0]._countAndFlagsBits) = 2;
    LACLogger.log(level:_:)((LocalAuthenticationCore::LACLogger::Level)v45, v30);
    swift_bridgeObjectRelease();
    outlined destroy of LACLogger((uint64_t)v6);
    return;
  }
  v17 = *(_QWORD *)(*(_QWORD *)(v14 + 56) + 8 * v15);
  swift_endAccess();
  swift_retain();
  v18 = LACLogABM();
  Logger.init(_:)();
  v45[0]._countAndFlagsBits = 0;
  v45[0]._object = (void *)0xE000000000000000;
  _StringGuts.grow(_:)(24);
  swift_bridgeObjectRelease();
  v45[0]._countAndFlagsBits = 0xD000000000000016;
  v45[0]._object = (void *)0x8000000240A84840;
  type metadata accessor for UUID();
  lazy protocol witness table accessor for type LACPolicy and conformance LACPolicy((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEAB8]);
  v19._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v19);
  swift_bridgeObjectRelease();
  v20 = v45[0];
  LOBYTE(v45[0]._countAndFlagsBits) = 0;
  LACLogger.log(level:_:)((LocalAuthenticationCore::LACLogger::Level)v45, v20);
  swift_bridgeObjectRelease();
  outlined destroy of LACLogger((uint64_t)v6);
  if (objc_msgSend(*(id *)(v2 + OBJC_IVAR____TtC23LocalAuthenticationCore25LACOnenessControllerModel_sessionMonitor), sel_isSessionActive))
  {
    v21 = objc_msgSend(*(id *)(v17 + OBJC_IVAR____TtC23LocalAuthenticationCore34LACOnenessControllerPendingRequest_request), sel_options);
    if (v21)
    {
      v22 = v21;
      v23 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

      v44 = 1084;
      type metadata accessor for LACPolicyOption(0);
      lazy protocol witness table accessor for type LACPolicy and conformance LACPolicy(&lazy protocol witness table cache variable for type LACPolicyOption and conformance LACPolicyOption, (uint64_t (*)(uint64_t))type metadata accessor for LACPolicyOption, (uint64_t)&protocol conformance descriptor for LACPolicyOption);
      AnyHashable.init<A>(_:)();
      if (*(_QWORD *)(v23 + 16) && (v24 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v45), (v25 & 1) != 0))
      {
        outlined init with copy of Any(*(_QWORD *)(v23 + 56) + 32 * v24, (uint64_t)&v46);
      }
      else
      {
        v46 = 0u;
        v47 = 0u;
      }
      swift_bridgeObjectRelease();
      outlined destroy of AnyHashable((uint64_t)v45);
      if (*((_QWORD *)&v47 + 1))
      {
        if (swift_dynamicCast() && (v45[0]._countAndFlagsBits & 1) != 0)
        {
          v33 = LACLogABM();
          Logger.init(_:)();
          v45[0]._countAndFlagsBits = 0;
          v45[0]._object = (void *)0xE000000000000000;
          _StringGuts.grow(_:)(43);
          swift_bridgeObjectRelease();
          v45[0]._countAndFlagsBits = 0xD000000000000011;
          v45[0]._object = (void *)0x8000000240A848A0;
          v34 = v17 + OBJC_IVAR____TtC23LocalAuthenticationCore34LACOnenessControllerPendingRequest_id;
          v35._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
          String.append(_:)(v35);
          swift_bridgeObjectRelease();
          v36._object = (void *)0x8000000240A848C0;
          v36._countAndFlagsBits = 0xD000000000000018;
          String.append(_:)(v36);
          v37 = v45[0];
          LOBYTE(v45[0]._countAndFlagsBits) = 2;
          LACLogger.log(level:_:)((LocalAuthenticationCore::LACLogger::Level)v45, v37);
          swift_bridgeObjectRelease();
          outlined destroy of LACLogger((uint64_t)v6);
          v38 = (void *)objc_opt_self();
          v39 = (void *)MEMORY[0x2426863FC](0xD000000000000053, 0x8000000240A848E0);
          v40 = objc_msgSend(v38, sel_errorWithCode_subcode_debugDescription_, -1, 33, v39);

          v41 = (void *)objc_opt_self();
          v42 = (void *)_convertErrorToNSError(_:)();
          v43 = objc_msgSend(v41, sel_resultWithFailure_, v42);

          LACOnenessControllerModel.finishRequestProcessing(with:result:)(v34, v43);
          swift_release();

          return;
        }
        goto LABEL_18;
      }
    }
    else
    {
      v46 = 0u;
      v47 = 0u;
    }
    outlined destroy of AsyncStream<()>.Continuation?((uint64_t)&v46, &demangling cache variable for type metadata for Any?);
LABEL_18:
    LACOnenessControllerModel.preflightAndEvaluateRequest(with:)(v17 + OBJC_IVAR____TtC23LocalAuthenticationCore34LACOnenessControllerPendingRequest_id);
    goto LABEL_19;
  }
  v31 = LACLogABM();
  Logger.init(_:)();
  LOBYTE(v45[0]._countAndFlagsBits) = 2;
  v32._countAndFlagsBits = 0xD000000000000036;
  v32._object = (void *)0x8000000240A84860;
  LACLogger.log(level:_:)((LocalAuthenticationCore::LACLogger::Level)v45, v32);
  outlined destroy of LACLogger((uint64_t)v6);
  LACOnenessControllerModel.finishRequestProcessing(with:result:)(v17 + OBJC_IVAR____TtC23LocalAuthenticationCore34LACOnenessControllerPendingRequest_id, 0);
LABEL_19:
  swift_release();
}

void LACOnenessControllerModel.postProcessRequest(_:result:completion:)(void *a1, void *a2, void (*a3)(id), uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  id v13;
  id v14;
  unsigned int v15;
  id v16;
  void *v17;
  uint64_t v18;
  unint64_t v19;
  char v20;
  id v21;
  Swift::String v22;
  Swift::String v23;
  unint64_t v24;
  const char *v25;
  unint64_t v26;
  Swift::String v27;
  id v28;
  Swift::String v29;
  Swift::String v30;
  id v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  _QWORD *v36;
  void *v37;
  id v38;
  _QWORD v39[2];
  Swift::String aBlock;
  void (*v41)(uint64_t, void *);
  void *v42;
  uint64_t (*v43)();
  _QWORD *v44;
  __int128 v45;
  __int128 v46;

  v5 = v4;
  v10 = type metadata accessor for LACLogger();
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)v39 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = LACOnenessControllerModel.postProcessRequest(_:result:)(a1, a2);
  v14 = objc_msgSend((id)objc_opt_self(), sel_sharedInstance);
  v15 = objc_msgSend(v14, sel_featureFlagApproveByMacFailureUIEnabled);

  if (!v15)
  {
    v21 = LACLogABM();
    Logger.init(_:)();
    aBlock._countAndFlagsBits = 0;
    aBlock._object = (void *)0xE000000000000000;
    _StringGuts.grow(_:)(69);
    v22._object = (void *)0x8000000240A84240;
    v22._countAndFlagsBits = 0xD00000000000002DLL;
    String.append(_:)(v22);
    LODWORD(v45) = objc_msgSend(a1, sel_identifier);
    v23._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v23);
    swift_bridgeObjectRelease();
    v24 = 0xD000000000000016;
    v25 = ". Feature not enabled.";
LABEL_7:
    v26 = (unint64_t)(v25 - 32) | 0x8000000000000000;
    String.append(_:)(*(Swift::String *)&v24);
    v27 = aBlock;
    LOBYTE(aBlock._countAndFlagsBits) = 2;
    LACLogger.log(level:_:)((LocalAuthenticationCore::LACLogger::Level)&aBlock, v27);
    swift_bridgeObjectRelease();
    outlined destroy of LACLogger((uint64_t)v12);
LABEL_19:
    a3(v13);
    goto LABEL_20;
  }
  v16 = objc_msgSend(a1, sel_options);
  if (!v16)
  {
    v45 = 0u;
    v46 = 0u;
LABEL_14:
    outlined destroy of AsyncStream<()>.Continuation?((uint64_t)&v45, &demangling cache variable for type metadata for Any?);
    goto LABEL_15;
  }
  v17 = v16;
  v18 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  v39[1] = 1039;
  AnyHashable.init<A>(_:)();
  if (*(_QWORD *)(v18 + 16) && (v19 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&aBlock), (v20 & 1) != 0))
  {
    outlined init with copy of Any(*(_QWORD *)(v18 + 56) + 32 * v19, (uint64_t)&v45);
  }
  else
  {
    v45 = 0u;
    v46 = 0u;
  }
  swift_bridgeObjectRelease();
  outlined destroy of AnyHashable((uint64_t)&aBlock);
  if (!*((_QWORD *)&v46 + 1))
    goto LABEL_14;
  if (swift_dynamicCast() && (aBlock._countAndFlagsBits & 1) != 0)
  {
    v28 = LACLogABM();
    Logger.init(_:)();
    aBlock._countAndFlagsBits = 0;
    aBlock._object = (void *)0xE000000000000000;
    _StringGuts.grow(_:)(70);
    v29._object = (void *)0x8000000240A84240;
    v29._countAndFlagsBits = 0xD00000000000002DLL;
    String.append(_:)(v29);
    LODWORD(v45) = objc_msgSend(a1, sel_identifier);
    v30._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v30);
    swift_bridgeObjectRelease();
    v24 = 0xD000000000000017;
    v25 = ". No failure UI option.";
    goto LABEL_7;
  }
LABEL_15:
  v31 = objc_msgSend(v13, sel_error);
  if (!v31)
    goto LABEL_19;
  v32 = v31;
  v33 = (void *)objc_opt_self();
  v34 = (void *)_convertErrorToNSError(_:)();
  LODWORD(v33) = objc_msgSend(v33, sel_error_hasCode_subcode_, v34, -1, 33);

  if (!(_DWORD)v33)
  {

    goto LABEL_19;
  }
  v35 = *(void **)(v5 + OBJC_IVAR____TtC23LocalAuthenticationCore25LACOnenessControllerModel_uiPresenter);
  v36 = (_QWORD *)swift_allocObject();
  v36[2] = a3;
  v36[3] = a4;
  v36[4] = v13;
  v43 = partial apply for closure #1 in LACOnenessControllerModel.postProcessRequest(_:result:completion:);
  v44 = v36;
  aBlock._countAndFlagsBits = MEMORY[0x24BDAC760];
  aBlock._object = (void *)1107296256;
  v41 = thunk for @escaping @callee_guaranteed (@guaranteed Error?) -> ();
  v42 = &block_descriptor_3;
  v37 = _Block_copy(&aBlock);
  swift_retain();
  v38 = v13;
  swift_release();
  objc_msgSend(v35, sel_presentUIForIdentifier_request_completion_, 3, a1, v37);
  _Block_release(v37);

  v13 = v32;
LABEL_20:

}

id LACOnenessControllerModel.postProcessRequest(_:result:)(void *a1, void *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  void *v13;
  uint64_t v14;
  void (*v15)(_QWORD *, uint64_t, uint64_t);
  id v16;
  uint64_t (*v17)(_QWORD *, uint64_t);
  id result;
  uint64_t v19;
  uint64_t v20;
  id v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  id v25;
  id v26;
  uint64_t v27;
  Swift::String v28;
  Swift::String v29;
  id v30;
  uint64_t v31;
  void *v32;
  void *v33;
  Swift::String v34;
  Swift::String v35;
  id v36;
  uint64_t v37;
  Swift::String v38;
  Swift::String v39;
  void *v40;
  uint64_t v41;
  char *v42;
  char *v43;
  void *v44;
  Swift::String v45;
  unsigned int v46;

  v44 = a2;
  v4 = type metadata accessor for LACLogger();
  v5 = MEMORY[0x24BDAC7A8](v4);
  v43 = (char *)&v41 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v41 - v7;
  v9 = type metadata accessor for DispatchPredicate();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v12 = (uint64_t *)((char *)&v41 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  v13 = *(void **)(v2 + OBJC_IVAR____TtC23LocalAuthenticationCore25LACOnenessControllerModel_replyQueue);
  *v12 = v13;
  v14 = *MEMORY[0x24BEE5610];
  v15 = *(void (**)(_QWORD *, uint64_t, uint64_t))(v10 + 104);
  v15(v12, v14, v9);
  v16 = v13;
  LOBYTE(v13) = _dispatchPreconditionTest(_:)();
  v17 = *(uint64_t (**)(_QWORD *, uint64_t))(v10 + 8);
  result = (id)v17(v12, v9);
  if ((v13 & 1) == 0)
  {
    __break(1u);
LABEL_10:
    __break(1u);
    return result;
  }
  v42 = v8;
  swift_beginAccess();
  swift_unknownObjectRetain();
  v19 = swift_bridgeObjectRetain();
  v20 = specialized Sequence.first(where:)(v19, a1);
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  if (!v20)
  {
    v36 = LACLogABM();
    v37 = (uint64_t)v43;
    Logger.init(_:)();
    v45._countAndFlagsBits = 0;
    v45._object = (void *)0xE000000000000000;
    _StringGuts.grow(_:)(30);
    swift_bridgeObjectRelease();
    v45._countAndFlagsBits = 0xD00000000000001CLL;
    v45._object = (void *)0x8000000240A846B0;
    v46 = objc_msgSend(a1, sel_identifier);
    v38._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v38);
    swift_bridgeObjectRelease();
    v39 = v45;
    LOBYTE(v45._countAndFlagsBits) = 2;
    LACLogger.log(level:_:)((LocalAuthenticationCore::LACLogger::Level)&v45, v39);
    swift_bridgeObjectRelease();
    outlined destroy of LACLogger(v37);
    return v44;
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v20 + 152))(3);
  *v12 = v16;
  v15(v12, v14, v9);
  v21 = v16;
  v22 = _dispatchPreconditionTest(_:)();
  result = (id)v17(v12, v9);
  if ((v22 & 1) == 0)
    goto LABEL_10;
  v23 = v20 + OBJC_IVAR____TtC23LocalAuthenticationCore34LACOnenessControllerPendingRequest_id;
  swift_beginAccess();
  specialized Dictionary._Variant.removeValue(forKey:)(v23);
  swift_endAccess();
  v24 = swift_release();
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v20 + 168))(v24) & 1) != 0)
  {
    v25 = specialized LACOnenessControllerModel.mapResult(_:for:)(v44, v20);
    v26 = LACLogABM();
    v27 = (uint64_t)v42;
    Logger.init(_:)();
    v45._countAndFlagsBits = 0;
    v45._object = (void *)0xE000000000000000;
    _StringGuts.grow(_:)(43);
    swift_bridgeObjectRelease();
    v45._countAndFlagsBits = 0xD000000000000019;
    v45._object = (void *)0x8000000240A846D0;
    type metadata accessor for UUID();
    lazy protocol witness table accessor for type LACPolicy and conformance LACPolicy((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEAB8]);
    v28._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v28);
    swift_bridgeObjectRelease();
    v29._countAndFlagsBits = 0x6572206874697720;
    v29._object = (void *)0xEE00203A746C7573;
    String.append(_:)(v29);
    v30 = objc_msgSend(v25, sel_debugDescription);
    v31 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v33 = v32;

    v34._countAndFlagsBits = v31;
    v34._object = v33;
    String.append(_:)(v34);
    swift_bridgeObjectRelease();
    v35 = v45;
    LOBYTE(v45._countAndFlagsBits) = 2;
    LACLogger.log(level:_:)((LocalAuthenticationCore::LACLogger::Level)&v45, v35);
    swift_release();
    swift_bridgeObjectRelease();
    outlined destroy of LACLogger(v27);
    return v25;
  }
  else
  {
    v40 = v44;
    swift_release();
    return v40;
  }
}

void thunk for @escaping @callee_guaranteed (@guaranteed Error?) -> ()(uint64_t a1, void *a2)
{
  void (*v3)(void *);
  id v4;

  v3 = *(void (**)(void *))(a1 + 32);
  swift_retain();
  v4 = a2;
  v3(a2);
  swift_release();

}

void @objc LACOnenessControllerModel.processRequest(_:configuration:completion:)(void *a1, int a2, uint64_t a3, void *a4, void *aBlock, void (*a6)(uint64_t, id, id, void *))
{
  void *v10;
  id v11;
  id v12;

  v10 = _Block_copy(aBlock);
  _Block_copy(v10);
  swift_unknownObjectRetain();
  v11 = a4;
  v12 = a1;
  a6(a3, v11, v12, v10);
  _Block_release(v10);
  _Block_release(v10);
  swift_unknownObjectRelease();

}

Swift::Void __swiftcall LACOnenessControllerModel.cancelAllRequests()()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;

  v0 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  MEMORY[0x24BDAC7A8](v0);
  v2 = (char *)&v4 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for UUID();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 56))(v2, 1, 1, v3);
  LACOnenessControllerModel.cancelPendingRequests(contextID:)((unint64_t)v2);
  outlined destroy of AsyncStream<()>.Continuation?((uint64_t)v2, (uint64_t *)&demangling cache variable for type metadata for UUID?);
}

uint64_t LACOnenessControllerModel.cancelPendingRequests(contextID:)(unint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  char *v20;
  char *v21;
  char v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  id v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  void *v35;
  Swift::String v36;
  Swift::String v37;
  Swift::String v38;
  Swift::String v39;
  uint64_t result;
  __int128 v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  id v45;
  uint64_t v46;
  Swift::String v47;
  Swift::String v48;
  Swift::String v49;
  Swift::String v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  id v54;
  uint64_t v55;
  uint64_t v56;
  Swift::String v57;
  Swift::String v58;
  Swift::String v59;
  id v60;
  void *v61;
  void *v62;
  id v63;
  id v64;
  Swift::String v65;
  uint64_t countAndFlagsBits;
  void *object;
  os_log_type_t v68;
  NSObject *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  id v73;
  uint64_t v74;
  Swift::String v75;
  Swift::String v76;
  _QWORD v77[2];
  __int128 v78;
  _QWORD *v79;
  void *v80;
  void *v81;
  void *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  char *v87;
  void *v88;
  uint64_t v89;
  char *v90;
  unint64_t v91;
  uint64_t v92;
  Swift::String v93;

  v91 = a1;
  v2 = type metadata accessor for LACLogger();
  v3 = MEMORY[0x24BDAC7A8](v2);
  v90 = (char *)v77 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = MEMORY[0x24BDAC7A8](v3);
  v89 = (uint64_t)v77 - v6;
  v7 = MEMORY[0x24BDAC7A8](v5);
  v86 = (char *)v77 - v8;
  MEMORY[0x24BDAC7A8](v7);
  v87 = (char *)v77 - v9;
  v88 = (void *)__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  MEMORY[0x24BDAC7A8](v88);
  v11 = (char *)v77 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for UUID();
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x24BDAC7A8](v12);
  v15 = (char *)v77 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for DispatchPredicate();
  v17 = *(_QWORD *)(v16 - 8);
  MEMORY[0x24BDAC7A8](v16);
  v19 = (_QWORD *)((char *)v77 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  v79 = v1;
  v20 = *(char **)((char *)v1 + OBJC_IVAR____TtC23LocalAuthenticationCore25LACOnenessControllerModel_replyQueue);
  *v19 = v20;
  (*(void (**)(_QWORD *, _QWORD, unint64_t))(v17 + 104))(v19, *MEMORY[0x24BEE5610], v16);
  v21 = v20;
  v22 = _dispatchPreconditionTest(_:)();
  (*(void (**)(_QWORD *, unint64_t))(v17 + 8))(v19, v16);
  if ((v22 & 1) != 0)
  {
    outlined init with copy of UUID?(v91, (uint64_t)v11);
    v20 = (char *)v12;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12) == 1)
    {
      outlined destroy of AsyncStream<()>.Continuation?((uint64_t)v11, (uint64_t *)&demangling cache variable for type metadata for UUID?);
      v19 = v79;
      swift_beginAccess();
      v23 = swift_bridgeObjectRetain();
      v16 = (unint64_t)specialized _copyCollectionToContiguousArray<A>(_:)(v23);
      swift_bridgeObjectRelease();
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v15, v11, v12);
      v19 = v79;
      v24 = (_QWORD *)((char *)v79 + OBJC_IVAR____TtC23LocalAuthenticationCore25LACOnenessControllerModel_pendingRequests);
      v25 = swift_beginAccess();
      v26 = *v24;
      MEMORY[0x24BDAC7A8](v25);
      v77[-2] = v15;
      swift_bridgeObjectRetain();
      v16 = specialized Sequence.filter(_:)((uint64_t)partial apply for closure #1 in LACOnenessControllerModel.cancelPendingRequests(contextID:), (uint64_t)&v77[-4], v26);
      (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
    }
    if (!(v16 >> 62))
    {
      v27 = *(_QWORD *)((v16 & 0xFFFFFFFFFFFFF8) + 0x10);
      goto LABEL_7;
    }
  }
  else
  {
    __break(1u);
  }
  swift_bridgeObjectRetain();
  v27 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
LABEL_7:
  if (v27)
  {
    v28 = LACLogABM();
    v29 = (uint64_t)v87;
    Logger.init(_:)();
    v93._countAndFlagsBits = 0;
    v93._object = (void *)0xE000000000000000;
    _StringGuts.grow(_:)(41);
    swift_bridgeObjectRelease();
    v93._countAndFlagsBits = 0xD000000000000015;
    v93._object = (void *)0x8000000240A844B0;
    v30 = swift_bridgeObjectRetain();
    v31 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay23LocalAuthenticationCore34LACOnenessControllerPendingRequestCG_10Foundation4UUIDVs5NeverOTg504_s23de6Core25gh14ModelC21canceli89Requests019_CCCEE7302AA4D596C7M12F88F5FCDE1199contextIDy10Foundation4UUIDVSg_tFAiA0deH7J54Ccfu0_33_4bca0753572ee3da89037ac25afc2adfAlITf3nnnpk_nTf1cn_n(v30);
    swift_bridgeObjectRelease();
    v32 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay10Foundation4UUIDVG_SSs5NeverOTg5209_s23LocalAuthenticationCore25LACOnenessControllerModelC21cancelPendingRequests019_CCCEE7302AA4D596C7M12F88F5FCDE1199contextIDy10Foundation4UUIDVSg_tFSSAIcfu1_33_1c557c3b35e20eb8a5b3b4e6dbadb78cAISSTf3nnnpk_nTf1cn_n(v31);
    swift_bridgeObjectRelease();
    v92 = v32;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [String]);
    lazy protocol witness table accessor for type [String] and conformance [A]();
    v33 = BidirectionalCollection<>.joined(separator:)();
    v35 = v34;
    swift_bridgeObjectRelease();
    v36._countAndFlagsBits = v33;
    v36._object = v35;
    String.append(_:)(v36);
    swift_bridgeObjectRelease();
    v37._countAndFlagsBits = 0xD000000000000010;
    v37._object = (void *)0x8000000240A844D0;
    String.append(_:)(v37);
    v38._countAndFlagsBits = Optional.debugDescription.getter();
    String.append(_:)(v38);
    swift_bridgeObjectRelease();
    v39 = v93;
    LOBYTE(v93._countAndFlagsBits) = 0;
    LACLogger.log(level:_:)((LocalAuthenticationCore::LACLogger::Level)&v93, v39);
    swift_bridgeObjectRelease();
    result = outlined destroy of LACLogger(v29);
    if (v27 < 1)
    {
      __break(1u);
    }
    else
    {
      v42 = 0;
      v43 = v16;
      v91 = v16 & 0xC000000000000001;
      v84 = -4;
      v85 = OBJC_IVAR____TtC23LocalAuthenticationCore25LACOnenessControllerModel_authenticator;
      v88 = (void *)0x8000000240A844F0;
      v82 = (void *)0x8000000240A84560;
      v83 = 0xD000000000000014;
      v80 = (void *)0x8000000240A84520;
      v81 = (void *)0x8000000240A84580;
      *(_QWORD *)&v41 = 136315138;
      v78 = v41;
      v77[1] = MEMORY[0x24BEE4AD8] + 8;
      v87 = v20;
      v44 = v27;
      do
      {
        if (v91)
        {
          v52 = MEMORY[0x24268672C](v42, v43);
        }
        else
        {
          v52 = *(_QWORD *)(v43 + 8 * v42 + 32);
          swift_retain();
        }
        v53 = (*(unsigned __int8 (**)(void))(*(_QWORD *)v52 + 144))();
        if ((v53 - 2) < 2)
        {
          v45 = LACLogABM();
          v46 = (uint64_t)v90;
          Logger.init(_:)();
          v93._countAndFlagsBits = 0;
          v93._object = (void *)0xE000000000000000;
          _StringGuts.grow(_:)(58);
          v47._countAndFlagsBits = 0x3A74736575716552;
          v47._object = (void *)0xE900000000000020;
          String.append(_:)(v47);
          lazy protocol witness table accessor for type LACPolicy and conformance LACPolicy((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEAB8]);
          v48._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
          String.append(_:)(v48);
          swift_bridgeObjectRelease();
          v49._countAndFlagsBits = 0xD00000000000002FLL;
          v49._object = v88;
          String.append(_:)(v49);
          v50 = v93;
          LOBYTE(v93._countAndFlagsBits) = 2;
          LACLogger.log(level:_:)((LocalAuthenticationCore::LACLogger::Level)&v93, v50);
          swift_release();
          swift_bridgeObjectRelease();
          v51 = v44;
          outlined destroy of LACLogger(v46);
        }
        else
        {
          if (v53)
          {
            v64 = LACLogABM();
            Logger.init(_:)();
            v93._countAndFlagsBits = 0;
            v93._object = (void *)0xE000000000000000;
            _StringGuts.grow(_:)(50);
            swift_bridgeObjectRelease();
            v93._countAndFlagsBits = 0xD000000000000030;
            v93._object = v80;
            lazy protocol witness table accessor for type LACPolicy and conformance LACPolicy((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEAB8]);
            v65._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
            String.append(_:)(v65);
            swift_bridgeObjectRelease();
            countAndFlagsBits = v93._countAndFlagsBits;
            object = v93._object;
            v68 = static os_log_type_t.default.getter();
            swift_bridgeObjectRetain_n();
            v69 = Logger.logObject.getter();
            if (os_log_type_enabled(v69, v68))
            {
              v70 = swift_slowAlloc();
              v71 = swift_slowAlloc();
              v93._countAndFlagsBits = v71;
              *(_DWORD *)v70 = v78;
              swift_bridgeObjectRetain();
              *(_QWORD *)(v70 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(countAndFlagsBits, (unint64_t)object, &v93._countAndFlagsBits);
              swift_bridgeObjectRelease_n();
              _os_log_impl(&dword_2409DC000, v69, v68, "%s", (uint8_t *)v70, 0xCu);
              swift_arrayDestroy();
              v72 = v71;
              v19 = v79;
              MEMORY[0x2426876B0](v72, -1, -1);
              MEMORY[0x2426876B0](v70, -1, -1);
              swift_bridgeObjectRelease();

            }
            else
            {

              swift_bridgeObjectRelease_n();
            }
            outlined destroy of LACLogger(v89);
            objc_msgSend(*(id *)((char *)v19 + v85), sel_cancelAuthenticationForRequest_, *(_QWORD *)(v52 + OBJC_IVAR____TtC23LocalAuthenticationCore34LACOnenessControllerPendingRequest_request));
            swift_release();
          }
          else
          {
            v54 = LACLogABM();
            v55 = (uint64_t)v86;
            Logger.init(_:)();
            v93._countAndFlagsBits = 0;
            v93._object = (void *)0xE000000000000000;
            _StringGuts.grow(_:)(43);
            swift_bridgeObjectRelease();
            v93._countAndFlagsBits = v83;
            v93._object = v82;
            v56 = v52 + OBJC_IVAR____TtC23LocalAuthenticationCore34LACOnenessControllerPendingRequest_id;
            lazy protocol witness table accessor for type LACPolicy and conformance LACPolicy((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEAB8]);
            v57._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
            String.append(_:)(v57);
            swift_bridgeObjectRelease();
            v58._countAndFlagsBits = 0xD000000000000015;
            v58._object = v81;
            String.append(_:)(v58);
            v59 = v93;
            LOBYTE(v93._countAndFlagsBits) = 2;
            LACLogger.log(level:_:)((LocalAuthenticationCore::LACLogger::Level)&v93, v59);
            swift_bridgeObjectRelease();
            outlined destroy of LACLogger(v55);
            v60 = objc_msgSend((id)objc_opt_self(), sel_errorWithCode_, v84);
            v61 = (void *)objc_opt_self();
            v62 = (void *)_convertErrorToNSError(_:)();
            v63 = objc_msgSend(v61, sel_resultWithFailure_, v62);

            LACOnenessControllerModel.finishRequestProcessing(with:result:)(v56, v63);
            swift_release();

          }
          v51 = v44;
        }
        ++v42;
      }
      while (v51 != v42);
      return swift_bridgeObjectRelease();
    }
  }
  else
  {
    swift_bridgeObjectRelease();
    v73 = LACLogABM();
    v74 = (uint64_t)v86;
    Logger.init(_:)();
    v93._countAndFlagsBits = 0;
    v93._object = (void *)0xE000000000000000;
    _StringGuts.grow(_:)(39);
    swift_bridgeObjectRelease();
    v93._countAndFlagsBits = 0xD000000000000025;
    v93._object = (void *)0x8000000240A845A0;
    v75._countAndFlagsBits = Optional.debugDescription.getter();
    String.append(_:)(v75);
    swift_bridgeObjectRelease();
    v76 = v93;
    LOBYTE(v93._countAndFlagsBits) = 0;
    LACLogger.log(level:_:)((LocalAuthenticationCore::LACLogger::Level)&v93, v76);
    swift_bridgeObjectRelease();
    return outlined destroy of LACLogger(v74);
  }
  return result;
}

uint64_t LACOnenessControllerModel.cancelRequests(forContextID:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)&v8 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for UUID();
  v6 = *(_QWORD *)(v5 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v4, a1, v5);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v6 + 56))(v4, 0, 1, v5);
  LACOnenessControllerModel.cancelPendingRequests(contextID:)((unint64_t)v4);
  return outlined destroy of AsyncStream<()>.Continuation?((uint64_t)v4, (uint64_t *)&demangling cache variable for type metadata for UUID?);
}

id LACOnenessControllerModel.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

void LACOnenessControllerModel.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

id LACOnenessControllerModel.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t LACOnenessControllerModel.handleSessionUpdate()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  void *v12;
  id v13;
  uint64_t result;
  id v15;
  void *v16;
  unsigned int v17;
  BOOL v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  Swift::String v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  Swift::String v26;

  v1 = v0;
  v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)&v25 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for LACLogger();
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)&v25 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DispatchPredicate();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (uint64_t *)((char *)&v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  v12 = *(void **)(v1 + OBJC_IVAR____TtC23LocalAuthenticationCore25LACOnenessControllerModel_replyQueue);
  *v11 = v12;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v9 + 104))(v11, *MEMORY[0x24BEE5610], v8);
  v13 = v12;
  LOBYTE(v12) = _dispatchPreconditionTest(_:)();
  result = (*(uint64_t (**)(_QWORD *, uint64_t))(v9 + 8))(v11, v8);
  if ((v12 & 1) != 0)
  {
    v15 = LACLogABM();
    Logger.init(_:)();
    v26._countAndFlagsBits = 0;
    v26._object = (void *)0xE000000000000000;
    _StringGuts.grow(_:)(41);
    swift_bridgeObjectRelease();
    v26._countAndFlagsBits = 0xD000000000000027;
    v26._object = (void *)0x8000000240A84480;
    v16 = *(void **)(v1 + OBJC_IVAR____TtC23LocalAuthenticationCore25LACOnenessControllerModel_sessionMonitor);
    v17 = objc_msgSend(v16, sel_isSessionActive);
    v18 = v17 == 0;
    if (v17)
      v19 = 1702195828;
    else
      v19 = 0x65736C6166;
    if (v18)
      v20 = 0xE500000000000000;
    else
      v20 = 0xE400000000000000;
    v21 = v20;
    String.append(_:)(*(Swift::String *)&v19);
    swift_bridgeObjectRelease();
    v22 = v26;
    LOBYTE(v26._countAndFlagsBits) = 2;
    LACLogger.log(level:_:)((LocalAuthenticationCore::LACLogger::Level)&v26, v22);
    swift_bridgeObjectRelease();
    outlined destroy of LACLogger((uint64_t)v7);
    result = (uint64_t)objc_msgSend(v16, sel_isSessionActive);
    if ((result & 1) == 0)
    {
      v23 = v1 + OBJC_IVAR____TtC23LocalAuthenticationCore25LACOnenessControllerModel_pendingRequests;
      result = swift_beginAccess();
      if (*(_QWORD *)(*(_QWORD *)v23 + 16))
      {
        v24 = type metadata accessor for UUID();
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 56))(v4, 1, 1, v24);
        LACOnenessControllerModel.cancelPendingRequests(contextID:)((unint64_t)v4);
        return outlined destroy of AsyncStream<()>.Continuation?((uint64_t)v4, (uint64_t *)&demangling cache variable for type metadata for UUID?);
      }
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t closure #1 in LACOnenessControllerModel.cancelPendingRequests(contextID:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v8;

  v2 = type metadata accessor for UUID();
  v3 = *(_QWORD *)(v2 - 8);
  v4 = MEMORY[0x24BDAC7A8](v2);
  v6 = (char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(uint64_t))(**(_QWORD **)a1 + 216))(v4);
  LOBYTE(a1) = static UUID.== infix(_:_:)();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
  return a1 & 1;
}

uint64_t specialized Sequence.filter(_:)(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t (*v5)(uint64_t *);
  int64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t i;
  unint64_t v14;
  int64_t v15;
  char v16;
  uint64_t v17;
  int64_t v18;
  uint64_t v19;
  uint64_t v20;

  v5 = (uint64_t (*)(uint64_t *))result;
  v6 = 0;
  v20 = MEMORY[0x24BEE4AF8];
  v7 = *(_QWORD *)(a3 + 64);
  v17 = a3 + 64;
  v8 = 1 << *(_BYTE *)(a3 + 32);
  v9 = -1;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  v10 = v9 & v7;
  v18 = (unint64_t)(v8 + 63) >> 6;
  if ((v9 & v7) != 0)
    goto LABEL_6;
LABEL_7:
  if (__OFADD__(v6++, 1))
  {
    __break(1u);
    goto LABEL_31;
  }
  if (v6 >= v18)
    goto LABEL_29;
  v14 = *(_QWORD *)(v17 + 8 * v6);
  if (v14)
    goto LABEL_19;
  v15 = v6 + 1;
  if (v6 + 1 >= v18)
  {
LABEL_29:
    swift_release();
    return v20;
  }
  v14 = *(_QWORD *)(v17 + 8 * v15);
  if (!v14)
  {
    v15 = v6 + 2;
    if (v6 + 2 >= v18)
      goto LABEL_29;
    v14 = *(_QWORD *)(v17 + 8 * v15);
    if (!v14)
    {
      v15 = v6 + 3;
      if (v6 + 3 >= v18)
        goto LABEL_29;
      v14 = *(_QWORD *)(v17 + 8 * v15);
      if (!v14)
      {
        v15 = v6 + 4;
        if (v6 + 4 < v18)
        {
          v14 = *(_QWORD *)(v17 + 8 * v15);
          if (v14)
            goto LABEL_18;
          while (1)
          {
            v6 = v15 + 1;
            if (__OFADD__(v15, 1))
              break;
            if (v6 >= v18)
              goto LABEL_29;
            v14 = *(_QWORD *)(v17 + 8 * v6);
            ++v15;
            if (v14)
              goto LABEL_19;
          }
LABEL_31:
          __break(1u);
          return result;
        }
        goto LABEL_29;
      }
    }
  }
LABEL_18:
  v6 = v15;
LABEL_19:
  v10 = (v14 - 1) & v14;
  for (i = __clz(__rbit64(v14)) + (v6 << 6); ; i = v11 | (v6 << 6))
  {
    v19 = *(_QWORD *)(*(_QWORD *)(a3 + 56) + 8 * i);
    swift_retain();
    v16 = v5(&v19);
    if (v3)
      break;
    if ((v16 & 1) != 0)
    {
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      result = specialized ContiguousArray._endMutation()();
      if (!v10)
        goto LABEL_7;
    }
    else
    {
      result = swift_release();
      if (!v10)
        goto LABEL_7;
    }
LABEL_6:
    v11 = __clz(__rbit64(v10));
    v10 &= v10 - 1;
  }
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay23LocalAuthenticationCore34LACOnenessControllerPendingRequestCG_10Foundation4UUIDVs5NeverOTg504_s23de6Core25gh14ModelC21canceli89Requests019_CCCEE7302AA4D596C7M12F88F5FCDE119LL9contextIDy10Foundation4UUIDVSg_tFAiA0deH7J54Ccfu0_33_4bca0753572ee3da89037ac25afc2adfAlITf3nnnpk_nTf1cn_n(unint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  _QWORD v16[2];
  unint64_t v17;
  uint64_t v18;

  v2 = v1;
  v4 = type metadata accessor for UUID();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1 >> 62)
    goto LABEL_15;
  v8 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    v9 = MEMORY[0x24BEE4AF8];
    if (!v8)
      return v9;
    v18 = MEMORY[0x24BEE4AF8];
    result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v8 & ~(v8 >> 63), 0);
    if (v8 < 0)
      break;
    v11 = 0;
    v9 = v18;
    v16[1] = v2;
    v17 = a1 & 0xC000000000000001;
    v2 = a1;
    while (v8 != v11)
    {
      if (v17)
      {
        v12 = MEMORY[0x24268672C](v11, a1);
      }
      else
      {
        v12 = *(_QWORD *)(a1 + 8 * v11 + 32);
        swift_retain();
      }
      v13 = v12 + OBJC_IVAR____TtC23LocalAuthenticationCore34LACOnenessControllerPendingRequest_id;
      swift_beginAccess();
      (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v13, v4);
      swift_release();
      v18 = v9;
      v15 = *(_QWORD *)(v9 + 16);
      v14 = *(_QWORD *)(v9 + 24);
      if (v15 >= v14 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v14 > 1, v15 + 1, 1);
        v9 = v18;
      }
      ++v11;
      *(_QWORD *)(v9 + 16) = v15 + 1;
      (*(void (**)(unint64_t, char *, uint64_t))(v5 + 32))(v9+ ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))+ *(_QWORD *)(v5 + 72) * v15, v7, v4);
      a1 = v2;
      if (v8 == v11)
        return v9;
    }
    __break(1u);
LABEL_15:
    swift_bridgeObjectRetain();
    v8 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  __break(1u);
  return result;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay10Foundation4UUIDVG_SSs5NeverOTg5209_s23LocalAuthenticationCore25LACOnenessControllerModelC21cancelPendingRequests019_CCCEE7302AA4D596C7M12F88F5FCDE119LL9contextIDy10Foundation4UUIDVSg_tFSSAIcfu1_33_1c557c3b35e20eb8a5b3b4e6dbadb78cAISSTf3nnnpk_nTf1cn_n(uint64_t a1)
{
  int64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v14;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = MEMORY[0x24BEE4AF8];
  if (v1)
  {
    v14 = MEMORY[0x24BEE4AF8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v1, 0);
    v2 = v14;
    v4 = *(_QWORD *)(type metadata accessor for UUID() - 8);
    v5 = a1 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
    v6 = *(_QWORD *)(v4 + 72);
    do
    {
      v7 = UUID.uuidString.getter();
      v9 = v8;
      v11 = *(_QWORD *)(v14 + 16);
      v10 = *(_QWORD *)(v14 + 24);
      if (v11 >= v10 >> 1)
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v10 > 1, v11 + 1, 1);
      *(_QWORD *)(v14 + 16) = v11 + 1;
      v12 = v14 + 16 * v11;
      *(_QWORD *)(v12 + 32) = v7;
      *(_QWORD *)(v12 + 40) = v9;
      v5 += v6;
      --v1;
    }
    while (v1);
  }
  return v2;
}

uint64_t LACOnenessControllerModel.authenticateRequest(with:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  void *v11;
  id v12;
  uint64_t result;
  uint64_t *v14;
  uint64_t v15;
  unint64_t v16;
  char v17;
  uint64_t v18;
  void (*v19)(uint64_t);
  id v20;
  Swift::String v21;
  Swift::String v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  id v28;
  Swift::String v29;
  Swift::String v30;
  Swift::String v31;
  Swift::String v32;
  Swift::String aBlock;
  uint64_t (*v34)(uint64_t, uint64_t, void *);
  void *v35;
  void (*v36)(uint64_t, uint64_t);
  uint64_t v37;

  v2 = v1;
  v4 = type metadata accessor for LACLogger();
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&aBlock - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DispatchPredicate();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (uint64_t *)((char *)&aBlock._countAndFlagsBits - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  v11 = *(void **)(v2 + OBJC_IVAR____TtC23LocalAuthenticationCore25LACOnenessControllerModel_replyQueue);
  *v10 = v11;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v8 + 104))(v10, *MEMORY[0x24BEE5610], v7);
  v12 = v11;
  LOBYTE(v11) = _dispatchPreconditionTest(_:)();
  result = (*(uint64_t (**)(_QWORD *, uint64_t))(v8 + 8))(v10, v7);
  if ((v11 & 1) != 0)
  {
    v14 = (uint64_t *)(v2 + OBJC_IVAR____TtC23LocalAuthenticationCore25LACOnenessControllerModel_pendingRequests);
    swift_beginAccess();
    v15 = *v14;
    if (*(_QWORD *)(v15 + 16) && (v16 = specialized __RawDictionaryStorage.find<A>(_:)(a1), (v17 & 1) != 0))
    {
      v18 = *(_QWORD *)(*(_QWORD *)(v15 + 56) + 8 * v16);
      swift_endAccess();
      v19 = *(void (**)(uint64_t))(*(_QWORD *)v18 + 152);
      swift_retain();
      v19(1);
      v20 = LACLogABM();
      Logger.init(_:)();
      aBlock._countAndFlagsBits = 0;
      aBlock._object = (void *)0xE000000000000000;
      _StringGuts.grow(_:)(29);
      swift_bridgeObjectRelease();
      aBlock._countAndFlagsBits = 0xD00000000000001BLL;
      aBlock._object = (void *)0x8000000240A84AE0;
      type metadata accessor for UUID();
      lazy protocol witness table accessor for type LACPolicy and conformance LACPolicy((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEAB8]);
      v21._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v21);
      swift_bridgeObjectRelease();
      v22 = aBlock;
      LOBYTE(aBlock._countAndFlagsBits) = 0;
      LACLogger.log(level:_:)((LocalAuthenticationCore::LACLogger::Level)&aBlock, v22);
      swift_bridgeObjectRelease();
      outlined destroy of LACLogger((uint64_t)v6);
      v23 = *(void **)(v2 + OBJC_IVAR____TtC23LocalAuthenticationCore25LACOnenessControllerModel_authenticator);
      v24 = *(_QWORD *)(v18 + OBJC_IVAR____TtC23LocalAuthenticationCore34LACOnenessControllerPendingRequest_request);
      v25 = swift_allocObject();
      swift_unknownObjectWeakInit();
      v26 = swift_allocObject();
      *(_QWORD *)(v26 + 16) = v25;
      *(_QWORD *)(v26 + 24) = v18;
      v36 = partial apply for closure #1 in LACOnenessControllerModel.authenticateRequest(with:);
      v37 = v26;
      aBlock._countAndFlagsBits = MEMORY[0x24BDAC760];
      aBlock._object = (void *)1107296256;
      v34 = thunk for @escaping @callee_guaranteed (@guaranteed [AnyHashable : Any]?, @guaranteed Error?) -> ();
      v35 = &block_descriptor_55;
      v27 = _Block_copy(&aBlock);
      swift_retain();
      swift_unknownObjectRetain();
      swift_release();
      objc_msgSend(v23, sel_authenticateRequest_completion_, v24, v27);
      _Block_release(v27);
      swift_release();
      return swift_unknownObjectRelease();
    }
    else
    {
      swift_endAccess();
      v28 = LACLogABM();
      Logger.init(_:)();
      aBlock._countAndFlagsBits = 0;
      aBlock._object = (void *)0xE000000000000000;
      _StringGuts.grow(_:)(56);
      v29._countAndFlagsBits = 0xD00000000000001DLL;
      v29._object = (void *)0x8000000240A84AC0;
      String.append(_:)(v29);
      type metadata accessor for UUID();
      lazy protocol witness table accessor for type LACPolicy and conformance LACPolicy((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEAB8]);
      v30._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v30);
      swift_bridgeObjectRelease();
      v31._object = (void *)0x8000000240A84600;
      v31._countAndFlagsBits = 0xD000000000000019;
      String.append(_:)(v31);
      v32 = aBlock;
      LOBYTE(aBlock._countAndFlagsBits) = 2;
      LACLogger.log(level:_:)((LocalAuthenticationCore::LACLogger::Level)&aBlock, v32);
      swift_bridgeObjectRelease();
      return outlined destroy of LACLogger((uint64_t)v6);
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

void closure #1 in LACOnenessControllerModel.authenticateRequest(with:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  void *v6;
  void *v7;
  id v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  void *v12;
  void *v13;
  id v14;
  void (*v15)(uint64_t);
  uint64_t v16;
  uint64_t v17;

  v5 = a3 + 16;
  if (a2)
  {
    v6 = (void *)objc_opt_self();
    v7 = (void *)_convertErrorToNSError(_:)();
    v8 = objc_msgSend(v6, sel_errorWithCode_underlyingError_, -1, v7);

    swift_beginAccess();
    v9 = MEMORY[0x242687740](v5);
    if (v9)
    {
      v10 = (void *)v9;
      v11 = a4 + OBJC_IVAR____TtC23LocalAuthenticationCore34LACOnenessControllerPendingRequest_id;
      v12 = (void *)objc_opt_self();
      v13 = (void *)_convertErrorToNSError(_:)();
      v14 = objc_msgSend(v12, sel_resultWithFailure_, v13);

      LACOnenessControllerModel.finishRequestProcessing(with:result:)(v11, v14);
    }
  }
  else
  {
    v15 = *(void (**)(uint64_t))(*(_QWORD *)a4 + 200);
    v16 = swift_bridgeObjectRetain();
    v15(v16);
    swift_beginAccess();
    v17 = MEMORY[0x242687740](v5);
    if (!v17)
      return;
    v8 = (id)v17;
    LACOnenessControllerModel.finishRequestProcessing(with:result:)(a4 + OBJC_IVAR____TtC23LocalAuthenticationCore34LACOnenessControllerPendingRequest_id, 0);
  }

}

void LACOnenessControllerModel.finishRequestProcessing(with:result:)(uint64_t a1, void *a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  void *v12;
  id v13;
  uint64_t *v14;
  uint64_t v15;
  unint64_t v16;
  char v17;
  uint64_t v18;
  id v19;
  Swift::String v20;
  Swift::String v21;
  void (*v22)(id);
  id v23;
  id v24;
  Swift::String v25;
  Swift::String v26;
  Swift::String v27;
  Swift::String v28;
  void (*v29)(void);
  void *v30;
  uint64_t v31;
  id v32;
  uint64_t v33;
  Swift::String v34;

  v5 = type metadata accessor for LACLogger();
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)&v33 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DispatchPredicate();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (uint64_t *)((char *)&v33 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  v12 = *(void **)(v2 + OBJC_IVAR____TtC23LocalAuthenticationCore25LACOnenessControllerModel_replyQueue);
  *v11 = v12;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v9 + 104))(v11, *MEMORY[0x24BEE5610], v8);
  v13 = v12;
  LOBYTE(v12) = _dispatchPreconditionTest(_:)();
  (*(void (**)(_QWORD *, uint64_t))(v9 + 8))(v11, v8);
  if ((v12 & 1) != 0)
  {
    v14 = (uint64_t *)(v2 + OBJC_IVAR____TtC23LocalAuthenticationCore25LACOnenessControllerModel_pendingRequests);
    swift_beginAccess();
    v15 = *v14;
    if (*(_QWORD *)(v15 + 16) && (v16 = specialized __RawDictionaryStorage.find<A>(_:)(a1), (v17 & 1) != 0))
    {
      v18 = *(_QWORD *)(*(_QWORD *)(v15 + 56) + 8 * v16);
      swift_endAccess();
      swift_retain();
      v19 = LACLogABM();
      Logger.init(_:)();
      v34._countAndFlagsBits = 0;
      v34._object = (void *)0xE000000000000000;
      _StringGuts.grow(_:)(37);
      swift_bridgeObjectRelease();
      v34._countAndFlagsBits = 0xD000000000000023;
      v34._object = (void *)0x8000000240A84620;
      type metadata accessor for UUID();
      lazy protocol witness table accessor for type LACPolicy and conformance LACPolicy((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEAB8]);
      v20._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v20);
      swift_bridgeObjectRelease();
      v21 = v34;
      LOBYTE(v34._countAndFlagsBits) = 0;
      LACLogger.log(level:_:)((LocalAuthenticationCore::LACLogger::Level)&v34, v21);
      swift_bridgeObjectRelease();
      outlined destroy of LACLogger((uint64_t)v7);
      (*(void (**)(uint64_t))(*(_QWORD *)v18 + 152))(2);
      if (a2)
      {
        v22 = *(void (**)(id))(v18
                                        + OBJC_IVAR____TtC23LocalAuthenticationCore34LACOnenessControllerPendingRequest_completion);
        v23 = a2;
        swift_retain();
        v22(v23);

        swift_release();
        swift_release();
      }
      else
      {
        v29 = *(void (**)(void))(v18
                               + OBJC_IVAR____TtC23LocalAuthenticationCore34LACOnenessControllerPendingRequest_completion);
        v30 = (void *)objc_opt_self();
        v31 = *(_QWORD *)(v18 + OBJC_IVAR____TtC23LocalAuthenticationCore34LACOnenessControllerPendingRequest_request);
        swift_retain();
        v32 = objc_msgSend(v30, sel_resultWithNext_, v31);
        v29();
        swift_release();
        swift_release();

      }
    }
    else
    {
      swift_endAccess();
      v24 = LACLogABM();
      Logger.init(_:)();
      v34._countAndFlagsBits = 0;
      v34._object = (void *)0xE000000000000000;
      _StringGuts.grow(_:)(64);
      v25._countAndFlagsBits = 0xD000000000000025;
      v25._object = (void *)0x8000000240A845D0;
      String.append(_:)(v25);
      type metadata accessor for UUID();
      lazy protocol witness table accessor for type LACPolicy and conformance LACPolicy((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEAB8]);
      v26._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v26);
      swift_bridgeObjectRelease();
      v27._object = (void *)0x8000000240A84600;
      v27._countAndFlagsBits = 0xD000000000000019;
      String.append(_:)(v27);
      v28 = v34;
      LOBYTE(v34._countAndFlagsBits) = 2;
      LACLogger.log(level:_:)((LocalAuthenticationCore::LACLogger::Level)&v34, v28);
      swift_bridgeObjectRelease();
      outlined destroy of LACLogger((uint64_t)v7);
    }
  }
  else
  {
    __break(1u);
  }
}

void LACOnenessControllerModel.preflightAndEvaluateRequest(with:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  void *v14;
  id v15;
  uint64_t *v16;
  uint64_t v17;
  unint64_t v18;
  char v19;
  uint64_t v20;
  id v21;
  Swift::String v22;
  Swift::String v23;
  id v24;
  void *v25;
  uint64_t v26;
  unint64_t v27;
  char v28;
  id v29;
  Swift::String v30;
  Swift::String v31;
  Swift::String v32;
  Swift::String v33;
  id v34;
  Swift::String v35;
  Swift::String v36;
  Swift::String v37;
  Swift::String v38;
  void (*v39)(void);
  void *v40;
  uint64_t v41;
  id v42;
  uint64_t v43;
  id v44;
  id v45;
  void *v46;
  unint64_t v47;
  char isUniquelyReferenced_nonNull_native;
  Class isa;
  void *v50;
  void *v51;
  id v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  unint64_t v56;
  char *v57;
  void *v58;
  _QWORD v59[2];
  uint64_t v60;
  uint64_t v61;
  char *v62;
  Swift::String aBlock;
  void (*v64)(uint64_t, void *);
  void *v65;
  void (*v66)(void *);
  char *v67;
  unint64_t v68;
  _OWORD v69[2];
  __int128 v70;
  __int128 v71;

  v2 = v1;
  v4 = type metadata accessor for UUID();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_QWORD *)(v5 + 64);
  MEMORY[0x24BDAC7A8](v4);
  v62 = (char *)v59 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for LACLogger();
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)v59 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for DispatchPredicate();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v13 = (_QWORD *)((char *)v59 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  v14 = *(void **)(v2 + OBJC_IVAR____TtC23LocalAuthenticationCore25LACOnenessControllerModel_replyQueue);
  *v13 = v14;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v11 + 104))(v13, *MEMORY[0x24BEE5610], v10);
  v15 = v14;
  LOBYTE(v14) = _dispatchPreconditionTest(_:)();
  (*(void (**)(_QWORD *, uint64_t))(v11 + 8))(v13, v10);
  if ((v14 & 1) == 0)
  {
    __break(1u);
    return;
  }
  v16 = (uint64_t *)(v2 + OBJC_IVAR____TtC23LocalAuthenticationCore25LACOnenessControllerModel_pendingRequests);
  swift_beginAccess();
  v17 = *v16;
  if (!*(_QWORD *)(v17 + 16) || (v18 = specialized __RawDictionaryStorage.find<A>(_:)(a1), (v19 & 1) == 0))
  {
    swift_endAccess();
    v29 = LACLogABM();
    Logger.init(_:)();
    aBlock._countAndFlagsBits = 0;
    aBlock._object = (void *)0xE000000000000000;
    _StringGuts.grow(_:)(53);
    v30._countAndFlagsBits = 0xD00000000000001ALL;
    v30._object = (void *)0x8000000240A84940;
    String.append(_:)(v30);
    lazy protocol witness table accessor for type LACPolicy and conformance LACPolicy((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEAB8]);
    v31._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v31);
    swift_bridgeObjectRelease();
    v32._countAndFlagsBits = 0xD000000000000019;
    v32._object = (void *)0x8000000240A84600;
    String.append(_:)(v32);
    v33 = aBlock;
    LOBYTE(aBlock._countAndFlagsBits) = 2;
    LACLogger.log(level:_:)((LocalAuthenticationCore::LACLogger::Level)&aBlock, v33);
    swift_bridgeObjectRelease();
    outlined destroy of LACLogger((uint64_t)v9);
    return;
  }
  v20 = *(_QWORD *)(*(_QWORD *)(v17 + 56) + 8 * v18);
  swift_endAccess();
  swift_retain();
  v21 = LACLogABM();
  Logger.init(_:)();
  aBlock._countAndFlagsBits = 0;
  aBlock._object = (void *)0xE000000000000000;
  _StringGuts.grow(_:)(26);
  swift_bridgeObjectRelease();
  aBlock._countAndFlagsBits = 0xD000000000000018;
  aBlock._object = (void *)0x8000000240A84960;
  v59[1] = lazy protocol witness table accessor for type LACPolicy and conformance LACPolicy((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEAB8]);
  v22._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v22);
  swift_bridgeObjectRelease();
  v23 = aBlock;
  LOBYTE(aBlock._countAndFlagsBits) = 0;
  LACLogger.log(level:_:)((LocalAuthenticationCore::LACLogger::Level)&aBlock, v23);
  swift_bridgeObjectRelease();
  outlined destroy of LACLogger((uint64_t)v9);
  (*(void (**)(uint64_t))(*(_QWORD *)v20 + 176))(1);
  v61 = OBJC_IVAR____TtC23LocalAuthenticationCore34LACOnenessControllerPendingRequest_request;
  v24 = objc_msgSend(*(id *)(v20 + OBJC_IVAR____TtC23LocalAuthenticationCore34LACOnenessControllerPendingRequest_request), sel_options);
  if (v24)
  {
    v25 = v24;
    v26 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

    *(_QWORD *)&v69[0] = 1000;
    type metadata accessor for LACPolicyOption(0);
    lazy protocol witness table accessor for type LACPolicy and conformance LACPolicy(&lazy protocol witness table cache variable for type LACPolicyOption and conformance LACPolicyOption, (uint64_t (*)(uint64_t))type metadata accessor for LACPolicyOption, (uint64_t)&protocol conformance descriptor for LACPolicyOption);
    AnyHashable.init<A>(_:)();
    if (*(_QWORD *)(v26 + 16)
      && (v27 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&aBlock), (v28 & 1) != 0))
    {
      outlined init with copy of Any(*(_QWORD *)(v26 + 56) + 32 * v27, (uint64_t)&v70);
    }
    else
    {
      v70 = 0u;
      v71 = 0u;
    }
    swift_bridgeObjectRelease();
    outlined destroy of AnyHashable((uint64_t)&aBlock);
    if (*((_QWORD *)&v71 + 1))
    {
      if (swift_dynamicCast() && (aBlock._countAndFlagsBits & 1) != 0)
      {
        v34 = LACLogABM();
        Logger.init(_:)();
        aBlock._countAndFlagsBits = 0;
        aBlock._object = (void *)0xE000000000000000;
        _StringGuts.grow(_:)(54);
        v35._object = (void *)0x8000000240A849A0;
        v35._countAndFlagsBits = 0xD000000000000017;
        String.append(_:)(v35);
        v36._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v36);
        swift_bridgeObjectRelease();
        v37._countAndFlagsBits = 0xD00000000000001DLL;
        v37._object = (void *)0x8000000240A849C0;
        String.append(_:)(v37);
        v38 = aBlock;
        LOBYTE(aBlock._countAndFlagsBits) = 2;
        LACLogger.log(level:_:)((LocalAuthenticationCore::LACLogger::Level)&aBlock, v38);
        swift_bridgeObjectRelease();
        outlined destroy of LACLogger((uint64_t)v9);
        v39 = *(void (**)(void))(v20
                               + OBJC_IVAR____TtC23LocalAuthenticationCore34LACOnenessControllerPendingRequest_completion);
        v40 = (void *)objc_opt_self();
        v41 = *(_QWORD *)(v20 + v61);
        swift_retain();
        v42 = objc_msgSend(v40, sel_resultWithNext_, v41);
        v39();
        swift_release();
        swift_release();

        return;
      }
      goto LABEL_16;
    }
  }
  else
  {
    v70 = 0u;
    v71 = 0u;
  }
  outlined destroy of AsyncStream<()>.Continuation?((uint64_t)&v70, &demangling cache variable for type metadata for Any?);
LABEL_16:
  v43 = MEMORY[0x24BEE1328];
  v44 = objc_msgSend(*(id *)(v20 + v61), sel_shallowCopy);
  v45 = objc_msgSend(v44, sel_options);
  v60 = a1;
  if (v45)
  {
    v46 = v45;
    v47 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  }
  else
  {
    v47 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  }
  *(_QWORD *)&v70 = 1000;
  AnyHashable.init<A>(_:)();
  *((_QWORD *)&v71 + 1) = v43;
  LOBYTE(v70) = 1;
  outlined init with take of Any(&v70, v69);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v68 = v47;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v69, (uint64_t)&aBlock, isUniquelyReferenced_nonNull_native);
  swift_bridgeObjectRelease();
  outlined destroy of AnyHashable((uint64_t)&aBlock);
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v44, sel_updateOptions_, isa);

  v50 = *(void **)(v20 + OBJC_IVAR____TtC23LocalAuthenticationCore34LACOnenessControllerPendingRequest_nextProcessor);
  v51 = (void *)objc_opt_self();
  swift_unknownObjectRetain();
  v52 = objc_msgSend(v51, sel_defaultConfiguration);
  v53 = swift_allocObject();
  swift_unknownObjectWeakInit();
  v54 = v20;
  v55 = v62;
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v62, v60, v4);
  v56 = (*(unsigned __int8 *)(v5 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v57 = (char *)swift_allocObject();
  *((_QWORD *)v57 + 2) = v53;
  *((_QWORD *)v57 + 3) = v44;
  *((_QWORD *)v57 + 4) = v54;
  (*(void (**)(char *, char *, uint64_t))(v5 + 32))(&v57[v56], v55, v4);
  v66 = partial apply for closure #1 in LACOnenessControllerModel.preflightAndEvaluateRequest(with:);
  v67 = v57;
  aBlock._countAndFlagsBits = MEMORY[0x24BDAC760];
  aBlock._object = (void *)1107296256;
  v64 = thunk for @escaping @callee_guaranteed (@guaranteed LACDTOLocationState) -> ();
  v65 = &block_descriptor_39;
  v58 = _Block_copy(&aBlock);
  swift_retain();
  swift_unknownObjectRetain();
  swift_release();
  objc_msgSend(v50, sel_processRequest_configuration_completion_, v44, v52, v58);
  swift_unknownObjectRelease();
  _Block_release(v58);
  swift_release();
  swift_unknownObjectRelease();

}

void closure #1 in LACOnenessControllerModel.preflightAndEvaluateRequest(with:)(void *a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  void *v15;
  void *v16;
  Swift::String v17;
  void *v18;
  id v19;
  uint64_t v20;
  void *v21;
  void *v22;
  id v23;
  void *v24;
  unsigned __int8 v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(uint64_t, uint64_t, uint64_t (*)(uint64_t));
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  void (*v33)(uint64_t, uint64_t, uint64_t (*)(uint64_t));
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int v37;
  unint64_t v38;
  unint64_t v39;

  v10 = type metadata accessor for UUID();
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(_QWORD *)(v11 + 64);
  MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)&v33 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  v14 = MEMORY[0x242687740](a2 + 16);
  if (v14)
  {
    v15 = (void *)v14;
    if (objc_msgSend(a1, sel_rawValue) == (id)1)
    {
      v16 = (void *)objc_opt_self();
      v38 = 0;
      v39 = 0xE000000000000000;
      _StringGuts.grow(_:)(29);
      swift_bridgeObjectRelease();
      v38 = 0xD00000000000001BLL;
      v39 = 0x8000000240A849E0;
      v37 = objc_msgSend(a3, sel_identifier);
      v17._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v17);
      swift_bridgeObjectRelease();
      v18 = (void *)MEMORY[0x2426863FC](v38, v39);
      swift_bridgeObjectRelease();
      v19 = objc_msgSend(v16, sel_errorWithCode_debugDescription_, -1000, v18);

      v20 = a4 + OBJC_IVAR____TtC23LocalAuthenticationCore34LACOnenessControllerPendingRequest_id;
      v21 = (void *)objc_opt_self();
      v22 = (void *)_convertErrorToNSError(_:)();
      v23 = objc_msgSend(v21, sel_resultWithFailure_, v22);

      LACOnenessControllerModel.finishRequestProcessing(with:result:)(v20, v23);
      v15 = v23;
    }
    else
    {
      v35 = (uint64_t)a3;
      v36 = a4;
      v24 = *(void **)(a4 + OBJC_IVAR____TtC23LocalAuthenticationCore34LACOnenessControllerPendingRequest_nextProcessor);
      v25 = objc_msgSend(v24, sel_respondsToSelector_, sel_postProcessRequest_result_completion_);
      v34 = (uint64_t)a1;
      if ((v25 & 1) != 0)
      {
        v26 = swift_allocObject();
        *(_QWORD *)(v26 + 16) = v24;
        v27 = swift_allocObject();
        *(_QWORD *)(v27 + 16) = partial apply;
        *(_QWORD *)(v27 + 24) = v26;
        swift_unknownObjectRetain();
        v28 = (void (*)(uint64_t, uint64_t, uint64_t (*)(uint64_t)))partial apply for thunk for @escaping @callee_guaranteed (@unowned LACEvaluationRequest, @unowned LACEvaluationResult, @unowned @escaping @callee_unowned @convention(block) (@unowned LACEvaluationResult) -> ()) -> ();
      }
      else
      {
        v28 = (void (*)(uint64_t, uint64_t, uint64_t (*)(uint64_t)))closure #1 in closure #1 in LACOnenessControllerModel.preflightAndEvaluateRequest(with:);
      }
      v33 = v28;
      v29 = swift_allocObject();
      swift_unknownObjectWeakInit();
      (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))((char *)&v33 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), a5, v10);
      v30 = (*(unsigned __int8 *)(v11 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
      v31 = (v12 + v30 + 7) & 0xFFFFFFFFFFFFFFF8;
      v32 = swift_allocObject();
      (*(void (**)(unint64_t, char *, uint64_t))(v11 + 32))(v32 + v30, v13, v10);
      *(_QWORD *)(v32 + v31) = v29;
      *(_QWORD *)(v32 + ((v31 + 15) & 0xFFFFFFFFFFFFFFF8)) = v36;
      swift_retain();
      swift_retain();
      v33(v35, v34, (uint64_t (*)(uint64_t))partial apply for closure #2 in closure #1 in LACOnenessControllerModel.preflightAndEvaluateRequest(with:));
      swift_release();
      swift_release();
      swift_release();
    }

  }
}

uint64_t closure #1 in closure #1 in LACOnenessControllerModel.preflightAndEvaluateRequest(with:)(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  return a3(a2);
}

void closure #2 in closure #1 in LACOnenessControllerModel.preflightAndEvaluateRequest(with:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  id v17;
  void *countAndFlagsBits;
  void *v19;
  id v20;
  void *v21;
  uint64_t v22;
  void *v23;
  char v24;
  uint64_t v25;
  void *v26;
  char v27;
  uint64_t v28;
  void *v29;
  id v30;
  Swift::String v31;
  Swift::String v32;
  Swift::String v33;
  uint64_t v34;
  id v35;
  Swift::String v36;
  Swift::String v37;
  id v38;
  uint64_t v39;
  void *v40;
  void *v41;
  Swift::String v42;
  Swift::String v43;
  uint64_t v44;
  id v45;
  Swift::String v46;
  Swift::String v47;
  Swift::String v48;
  id v49;
  uint64_t v50;
  void *v51;
  void *v52;
  Swift::String v53;
  Swift::String v54;
  uint64_t v55;
  id v56;
  Swift::String v57;
  Swift::String v58;
  Swift::String v59;
  id v60;
  uint64_t v61;
  void *v62;
  void *v63;
  Swift::String v64;
  Swift::String v65;
  void *v66;
  uint64_t v67;
  void *v68;
  id v69;
  void *v70;
  uint64_t v71;
  Swift::String v72;
  Swift::String v73;
  Swift::String v74;

  v7 = type metadata accessor for LACLogger();
  v8 = MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)&v71 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = MEMORY[0x24BDAC7A8](v8);
  v13 = (char *)&v71 - v12;
  MEMORY[0x24BDAC7A8](v11);
  v15 = (char *)&v71 - v14;
  v16 = a3 + 16;
  v17 = objc_msgSend(a1, sel_error);
  if (!v17
    || (v74._countAndFlagsBits = (uint64_t)v17,
        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error),
        type metadata accessor for NSError(),
        (swift_dynamicCast() & 1) == 0))
  {
    v30 = LACLogABM();
    Logger.init(_:)();
    v74._countAndFlagsBits = 0;
    v74._object = (void *)0xE000000000000000;
    _StringGuts.grow(_:)(47);
    swift_bridgeObjectRelease();
    v74._countAndFlagsBits = 0xD000000000000017;
    v74._object = (void *)0x8000000240A84A00;
    type metadata accessor for UUID();
    lazy protocol witness table accessor for type LACPolicy and conformance LACPolicy((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEAB8]);
    v31._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v31);
    swift_bridgeObjectRelease();
    v32._object = (void *)0x8000000240A84A20;
    v32._countAndFlagsBits = 0xD000000000000016;
    String.append(_:)(v32);
    v33 = v74;
    LOBYTE(v74._countAndFlagsBits) = 2;
    LACLogger.log(level:_:)((LocalAuthenticationCore::LACLogger::Level)&v74, v33);
    swift_bridgeObjectRelease();
    outlined destroy of LACLogger((uint64_t)v15);
    swift_beginAccess();
    v34 = MEMORY[0x242687740](v16);
    if (!v34)
      return;
    v20 = (id)v34;
    LACOnenessControllerModel.finishRequestProcessing(with:result:)(a4 + OBJC_IVAR____TtC23LocalAuthenticationCore34LACOnenessControllerPendingRequest_id, a1);
    goto LABEL_12;
  }
  countAndFlagsBits = (void *)v73._countAndFlagsBits;
  v19 = (void *)objc_opt_self();
  v20 = countAndFlagsBits;
  v21 = (void *)_convertErrorToNSError(_:)();

  LODWORD(v19) = objc_msgSend(v19, sel_error_hasCode_, v21, -1004);
  if ((_DWORD)v19)
  {
    swift_beginAccess();
    v22 = MEMORY[0x242687740](v16);
    if (v22
      && (v23 = (void *)v22,
          v24 = specialized LACOnenessControllerModel.isContinuityUnlockAvailable(nonInteractiveError:)(v20),
          v23,
          (v24 & 1) != 0))
    {
      swift_beginAccess();
      v25 = MEMORY[0x242687740](v16);
      if (v25)
      {
        v26 = (void *)v25;
        v27 = specialized LACOnenessControllerModel.isRequestSatisfiable(with:)(v20);

        if ((v27 & 1) != 0)
        {
          swift_beginAccess();
          v28 = MEMORY[0x242687740](v16);
          if (v28)
          {
            v29 = (void *)v28;
            LACOnenessControllerModel.authenticateRequest(with:)(a4 + OBJC_IVAR____TtC23LocalAuthenticationCore34LACOnenessControllerPendingRequest_id);
LABEL_16:

            goto LABEL_12;
          }
          goto LABEL_12;
        }
      }
      v56 = LACLogABM();
      Logger.init(_:)();
      v72._countAndFlagsBits = 0;
      v72._object = (void *)0xE000000000000000;
      _StringGuts.grow(_:)(59);
      v57._countAndFlagsBits = 0xD00000000000002FLL;
      v57._object = (void *)0x8000000240A84A90;
      String.append(_:)(v57);
      type metadata accessor for UUID();
      lazy protocol witness table accessor for type LACPolicy and conformance LACPolicy((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEAB8]);
      v58._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v58);
      swift_bridgeObjectRelease();
      v59._countAndFlagsBits = 0x203A726F72726520;
      v59._object = (void *)0xE800000000000000;
      String.append(_:)(v59);
      v60 = objc_msgSend(v20, sel_description);
      v61 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v63 = v62;

      v64._countAndFlagsBits = v61;
      v64._object = v63;
      String.append(_:)(v64);
      swift_bridgeObjectRelease();
      v65 = v72;
      LOBYTE(v72._countAndFlagsBits) = 2;
      LACLogger.log(level:_:)((LocalAuthenticationCore::LACLogger::Level)&v72, v65);
      swift_bridgeObjectRelease();
      outlined destroy of LACLogger((uint64_t)v13);
      swift_beginAccess();
      v55 = MEMORY[0x242687740](v16);
      if (!v55)
        goto LABEL_12;
    }
    else
    {
      v45 = LACLogABM();
      Logger.init(_:)();
      v73._countAndFlagsBits = 0;
      v73._object = (void *)0xE000000000000000;
      _StringGuts.grow(_:)(57);
      v46._countAndFlagsBits = 0xD00000000000002DLL;
      v46._object = (void *)0x8000000240A84A60;
      String.append(_:)(v46);
      type metadata accessor for UUID();
      lazy protocol witness table accessor for type LACPolicy and conformance LACPolicy((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEAB8]);
      v47._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v47);
      swift_bridgeObjectRelease();
      v48._countAndFlagsBits = 0x203A726F72726520;
      v48._object = (void *)0xE800000000000000;
      String.append(_:)(v48);
      v49 = objc_msgSend(v20, sel_description);
      v50 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v52 = v51;

      v53._countAndFlagsBits = v50;
      v53._object = v52;
      String.append(_:)(v53);
      swift_bridgeObjectRelease();
      v54 = v73;
      LOBYTE(v73._countAndFlagsBits) = 2;
      LACLogger.log(level:_:)((LocalAuthenticationCore::LACLogger::Level)&v73, v54);
      swift_bridgeObjectRelease();
      outlined destroy of LACLogger((uint64_t)v10);
      swift_beginAccess();
      v55 = MEMORY[0x242687740](v16);
      if (!v55)
        goto LABEL_12;
    }
    v66 = (void *)v55;
    v67 = a4 + OBJC_IVAR____TtC23LocalAuthenticationCore34LACOnenessControllerPendingRequest_id;
    v68 = (void *)objc_opt_self();
    v69 = v20;
    v70 = (void *)_convertErrorToNSError(_:)();
    v20 = objc_msgSend(v68, sel_resultWithFailure_, v70);

    LACOnenessControllerModel.finishRequestProcessing(with:result:)(v67, v20);
    goto LABEL_12;
  }
  v35 = LACLogABM();
  Logger.init(_:)();
  v74._countAndFlagsBits = 0;
  v74._object = (void *)0xE000000000000000;
  _StringGuts.grow(_:)(49);
  swift_bridgeObjectRelease();
  v74._countAndFlagsBits = 0xD000000000000017;
  v74._object = (void *)0x8000000240A84A00;
  type metadata accessor for UUID();
  lazy protocol witness table accessor for type LACPolicy and conformance LACPolicy((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEAB8]);
  v36._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v36);
  swift_bridgeObjectRelease();
  v37._object = (void *)0x8000000240A84A40;
  v37._countAndFlagsBits = 0xD000000000000016;
  String.append(_:)(v37);
  v38 = objc_msgSend(v20, sel_description);
  v39 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v41 = v40;

  v42._countAndFlagsBits = v39;
  v42._object = v41;
  String.append(_:)(v42);
  swift_bridgeObjectRelease();
  v43 = v74;
  LOBYTE(v74._countAndFlagsBits) = 2;
  LACLogger.log(level:_:)((LocalAuthenticationCore::LACLogger::Level)&v74, v43);
  swift_bridgeObjectRelease();
  outlined destroy of LACLogger((uint64_t)v15);
  swift_beginAccess();
  v44 = MEMORY[0x242687740](v16);
  if (v44)
  {
    v29 = (void *)v44;
    LACOnenessControllerModel.finishRequestProcessing(with:result:)(a4 + OBJC_IVAR____TtC23LocalAuthenticationCore34LACOnenessControllerPendingRequest_id, a1);
    goto LABEL_16;
  }
LABEL_12:

}

BOOL static LACOnenessControllerPendingRequest.State.== infix(_:_:)(char a1, char a2)
{
  return a1 == a2;
}

void LACOnenessControllerPendingRequest.State.hash(into:)(uint64_t a1, unsigned __int8 a2)
{
  Hasher._combine(_:)(a2);
}

Swift::Int LACOnenessControllerPendingRequest.State.hashValue.getter(unsigned __int8 a1)
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a1);
  return Hasher._finalize()();
}

uint64_t LACOnenessControllerPendingRequest.id.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + OBJC_IVAR____TtC23LocalAuthenticationCore34LACOnenessControllerPendingRequest_id;
  v4 = type metadata accessor for UUID();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t LACOnenessControllerPendingRequest.completion.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC23LocalAuthenticationCore34LACOnenessControllerPendingRequest_completion);
  swift_retain();
  return v1;
}

uint64_t LACOnenessControllerPendingRequest.nextProcessor.getter()
{
  return swift_unknownObjectRetain();
}

uint64_t LACOnenessControllerPendingRequest.request.getter()
{
  return swift_unknownObjectRetain();
}

uint64_t LACOnenessControllerPendingRequest.state.getter()
{
  uint64_t v0;
  unsigned __int8 *v1;

  v1 = (unsigned __int8 *)(v0 + OBJC_IVAR____TtC23LocalAuthenticationCore34LACOnenessControllerPendingRequest_state);
  swift_beginAccess();
  return *v1;
}

uint64_t LACOnenessControllerPendingRequest.state.setter(char a1)
{
  uint64_t v1;
  _BYTE *v3;
  uint64_t result;

  v3 = (_BYTE *)(v1 + OBJC_IVAR____TtC23LocalAuthenticationCore34LACOnenessControllerPendingRequest_state);
  result = swift_beginAccess();
  *v3 = a1;
  return result;
}

uint64_t (*LACOnenessControllerPendingRequest.state.modify())()
{
  swift_beginAccess();
  return LACDTOMutablePendingPolicyEvaluation.callbackReason.modify;
}

uint64_t LACOnenessControllerPendingRequest.isOnenessProcessed.getter()
{
  uint64_t v0;
  unsigned __int8 *v1;

  v1 = (unsigned __int8 *)(v0
                         + OBJC_IVAR____TtC23LocalAuthenticationCore34LACOnenessControllerPendingRequest_isOnenessProcessed);
  swift_beginAccess();
  return *v1;
}

uint64_t LACOnenessControllerPendingRequest.isOnenessProcessed.setter(char a1)
{
  uint64_t v1;
  _BYTE *v3;
  uint64_t result;

  v3 = (_BYTE *)(v1 + OBJC_IVAR____TtC23LocalAuthenticationCore34LACOnenessControllerPendingRequest_isOnenessProcessed);
  result = swift_beginAccess();
  *v3 = a1;
  return result;
}

uint64_t (*LACOnenessControllerPendingRequest.isOnenessProcessed.modify())()
{
  swift_beginAccess();
  return LACDTOMutablePendingPolicyEvaluation.callbackReason.modify;
}

uint64_t LACOnenessControllerPendingRequest.companionAuthenticationResult.getter()
{
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

uint64_t LACOnenessControllerPendingRequest.companionAuthenticationResult.setter(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = (_QWORD *)(v1
                + OBJC_IVAR____TtC23LocalAuthenticationCore34LACOnenessControllerPendingRequest_companionAuthenticationResult);
  swift_beginAccess();
  *v3 = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*LACOnenessControllerPendingRequest.companionAuthenticationResult.modify())()
{
  swift_beginAccess();
  return LACDTOMutablePendingPolicyEvaluation.callbackURL.modify;
}

uint64_t key path setter for LACOnenessControllerPendingRequest.contextID : LACOnenessControllerPendingRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v9;

  v4 = type metadata accessor for UUID();
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v7 + 16))(v6, a1);
  return (*(uint64_t (**)(char *))(**(_QWORD **)a2 + 224))(v6);
}

uint64_t LACOnenessControllerPendingRequest.contextID.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE v13[24];

  v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  v4 = MEMORY[0x24BDAC7A8](v3);
  v6 = &v13[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v4);
  v8 = &v13[-v7];
  v9 = v1 + OBJC_IVAR____TtC23LocalAuthenticationCore34LACOnenessControllerPendingRequest____lazy_storage___contextID;
  swift_beginAccess();
  outlined init with copy of UUID?(v9, (uint64_t)v8);
  v10 = type metadata accessor for UUID();
  v11 = *(_QWORD *)(v10 - 8);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v11 + 48))(v8, 1, v10) != 1)
    return (*(uint64_t (**)(uint64_t, _BYTE *, uint64_t))(v11 + 32))(a1, v8, v10);
  outlined destroy of AsyncStream<()>.Continuation?((uint64_t)v8, (uint64_t *)&demangling cache variable for type metadata for UUID?);
  closure #1 in LACOnenessControllerPendingRequest.contextID.getter(v1, a1);
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v11 + 16))(v6, a1, v10);
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v6, 0, 1, v10);
  swift_beginAccess();
  outlined assign with take of UUID?((uint64_t)v6, v9);
  return swift_endAccess();
}

uint64_t closure #1 in LACOnenessControllerPendingRequest.contextID.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  id v11;
  void *v12;
  void (*v13)(char *, char *, uint64_t);
  uint64_t v15;

  v4 = type metadata accessor for UUID();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v15 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = objc_msgSend(*(id *)(a1 + OBJC_IVAR____TtC23LocalAuthenticationCore34LACOnenessControllerPendingRequest_request), sel_contextID);
  if (v11)
  {
    v12 = v11;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    v13 = *(void (**)(char *, char *, uint64_t))(v5 + 32);
    v13(v10, v7, v4);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v5 + 56))(v10, 0, 1, v4);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v10, 1, v4) != 1)
      return ((uint64_t (*)(uint64_t, char *, uint64_t))v13)(a2, v10, v4);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56))(v10, 1, 1, v4);
  }
  UUID.init()();
  return outlined destroy of AsyncStream<()>.Continuation?((uint64_t)v10, (uint64_t *)&demangling cache variable for type metadata for UUID?);
}

uint64_t LACOnenessControllerPendingRequest.contextID.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for UUID();
  v7 = *(_QWORD *)(v6 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 32))(v5, a1, v6);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v5, 0, 1, v6);
  v8 = v1 + OBJC_IVAR____TtC23LocalAuthenticationCore34LACOnenessControllerPendingRequest____lazy_storage___contextID;
  swift_beginAccess();
  outlined assign with take of UUID?((uint64_t)v5, v8);
  return swift_endAccess();
}

void (*LACOnenessControllerPendingRequest.contextID.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  size_t v7;
  void *v8;

  v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[6] = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  v3[7] = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v5 = type metadata accessor for UUID();
  v3[8] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v3[9] = v6;
  v7 = *(_QWORD *)(v6 + 64);
  v3[10] = malloc(v7);
  v8 = malloc(v7);
  v3[11] = v8;
  LACOnenessControllerPendingRequest.contextID.getter((uint64_t)v8);
  return LACOnenessControllerPendingRequest.contextID.modify;
}

void LACOnenessControllerPendingRequest.contextID.modify(uint64_t a1, char a2)
{
  _QWORD *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v2 = *(_QWORD **)a1;
  v4 = *(void **)(*(_QWORD *)a1 + 80);
  v3 = *(void **)(*(_QWORD *)a1 + 88);
  if ((a2 & 1) != 0)
  {
    v5 = v2[8];
    v6 = v2[9];
    v8 = v2[6];
    v7 = (void *)v2[7];
    (*(void (**)(_QWORD, _QWORD, uint64_t))(v6 + 16))(v2[10], v2[11], v5);
    (*(void (**)(void *, void *, uint64_t))(v6 + 32))(v7, v4, v5);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v6 + 56))(v7, 0, 1, v5);
    v9 = v8 + OBJC_IVAR____TtC23LocalAuthenticationCore34LACOnenessControllerPendingRequest____lazy_storage___contextID;
    swift_beginAccess();
    outlined assign with take of UUID?((uint64_t)v7, v9);
    swift_endAccess();
    (*(void (**)(void *, uint64_t))(v6 + 8))(v3, v5);
  }
  else
  {
    v10 = v2[8];
    v11 = v2[9];
    v12 = v2[6];
    v7 = (void *)v2[7];
    (*(void (**)(void *, _QWORD, uint64_t))(v11 + 32))(v7, v2[11], v10);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v7, 0, 1, v10);
    v13 = v12
        + OBJC_IVAR____TtC23LocalAuthenticationCore34LACOnenessControllerPendingRequest____lazy_storage___contextID;
    swift_beginAccess();
    outlined assign with take of UUID?((uint64_t)v7, v13);
    swift_endAccess();
  }
  free(v3);
  free(v4);
  free(v7);
  free(v2);
}

uint64_t LACOnenessControllerPendingRequest.init(request:configuration:completion:state:)(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v6;

  v6 = specialized LACOnenessControllerPendingRequest.init(request:configuration:completion:state:)(a1, a2, a3, a4, a5);
  swift_unknownObjectRelease();

  return v6;
}

uint64_t LACOnenessControllerPendingRequest.deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0 + OBJC_IVAR____TtC23LocalAuthenticationCore34LACOnenessControllerPendingRequest_id;
  v2 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  swift_release();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  outlined destroy of AsyncStream<()>.Continuation?(v0 + OBJC_IVAR____TtC23LocalAuthenticationCore34LACOnenessControllerPendingRequest____lazy_storage___contextID, (uint64_t *)&demangling cache variable for type metadata for UUID?);
  return v0;
}

uint64_t LACOnenessControllerPendingRequest.__deallocating_deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0 + OBJC_IVAR____TtC23LocalAuthenticationCore34LACOnenessControllerPendingRequest_id;
  v2 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  swift_release();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  outlined destroy of AsyncStream<()>.Continuation?(v0 + OBJC_IVAR____TtC23LocalAuthenticationCore34LACOnenessControllerPendingRequest____lazy_storage___contextID, (uint64_t *)&demangling cache variable for type metadata for UUID?);
  return swift_deallocClassInstance();
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  Swift::Int v4;

  v2 = v1;
  v4 = AnyHashable._rawHashValue(seed:)(*(_QWORD *)(v2 + 40));
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v4);
}

{
  uint64_t v2;

  v2 = static Hasher._hash(seed:_:)();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v2);
}

{
  uint64_t v2;

  type metadata accessor for UUID();
  lazy protocol witness table accessor for type LACPolicy and conformance LACPolicy((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEA88]);
  v2 = dispatch thunk of Hashable._rawHashValue(seed:)();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v2);
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(uint64_t a1, uint64_t a2)
{
  Swift::Int v4;

  Hasher.init(_seed:)();
  String.hash(into:)();
  v4 = Hasher._finalize()();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, a2, v4);
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v6;
  char v7;
  _BYTE v9[40];

  v3 = -1 << *(_BYTE *)(v2 + 32);
  v4 = a2 & ~v3;
  if (((*(_QWORD *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) != 0)
  {
    v6 = ~v3;
    do
    {
      outlined init with copy of AnyHashable(*(_QWORD *)(v2 + 48) + 40 * v4, (uint64_t)v9);
      v7 = MEMORY[0x2426866F0](v9, a1);
      outlined destroy of AnyHashable((uint64_t)v9);
      if ((v7 & 1) != 0)
        break;
      v4 = (v4 + 1) & v6;
    }
    while (((*(_QWORD *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) != 0);
  }
  return v4;
}

{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t result;
  uint64_t v7;
  uint64_t v8;

  v4 = v2 + 64;
  v5 = -1 << *(_BYTE *)(v2 + 32);
  result = a2 & ~v5;
  if (((*(_QWORD *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0)
  {
    v7 = *(_QWORD *)(v2 + 48);
    if (*(_QWORD *)(v7 + 8 * result) != a1)
    {
      v8 = ~v5;
      for (result = (result + 1) & v8;
            ((*(_QWORD *)(v4 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0;
            result = (result + 1) & v8)
      {
        if (*(_QWORD *)(v7 + 8 * result) == a1)
          break;
      }
    }
  }
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(char *, unint64_t, uint64_t);
  char v14;
  _QWORD v16[2];

  v3 = v2;
  v16[1] = a1;
  v5 = type metadata accessor for UUID();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = -1 << *(_BYTE *)(v3 + 32);
  v10 = a2 & ~v9;
  if (((*(_QWORD *)(v3 + 64 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0)
  {
    v11 = ~v9;
    v12 = *(_QWORD *)(v6 + 72);
    v13 = *(void (**)(char *, unint64_t, uint64_t))(v6 + 16);
    do
    {
      v13(v8, *(_QWORD *)(v3 + 48) + v12 * v10, v5);
      lazy protocol witness table accessor for type LACPolicy and conformance LACPolicy((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEA98]);
      v14 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
      if ((v14 & 1) != 0)
        break;
      v10 = (v10 + 1) & v11;
    }
    while (((*(_QWORD *)(v3 + 64 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0);
  }
  return v10;
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v9;
  _QWORD *v10;
  BOOL v11;
  uint64_t v12;
  _QWORD *v13;
  BOOL v14;

  v4 = v3 + 64;
  v5 = -1 << *(_BYTE *)(v3 + 32);
  v6 = a3 & ~v5;
  if (((*(_QWORD *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0)
  {
    v9 = *(_QWORD *)(v3 + 48);
    v10 = (_QWORD *)(v9 + 16 * v6);
    v11 = *v10 == a1 && v10[1] == a2;
    if (!v11 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    {
      v12 = ~v5;
      do
      {
        v6 = (v6 + 1) & v12;
        if (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
          break;
        v13 = (_QWORD *)(v9 + 16 * v6);
        v14 = *v13 == a1 && v13[1] == a2;
      }
      while (!v14 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0);
    }
  }
  return v6;
}

uint64_t specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

uint64_t specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 17;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8])
      memmove(v13, v14, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[16 * v8] || v13 >= &v14[16 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3, _QWORD *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  size_t v14;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  unint64_t v22;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
LABEL_35:
        __break(1u);
        goto LABEL_36;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (!v9)
  {
    v13 = (_QWORD *)MEMORY[0x24BEE4AF8];
    goto LABEL_19;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UUID>);
  v10 = *(_QWORD *)(type metadata accessor for UUID() - 8);
  v11 = *(_QWORD *)(v10 + 72);
  v12 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  v13 = (_QWORD *)swift_allocObject();
  v14 = _swift_stdlib_malloc_size(v13);
  if (!v11)
  {
    __break(1u);
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  if (v14 - v12 == 0x8000000000000000 && v11 == -1)
    goto LABEL_34;
  v13[2] = v8;
  v13[3] = 2 * ((uint64_t)(v14 - v12) / v11);
LABEL_19:
  v16 = *(_QWORD *)(type metadata accessor for UUID() - 8);
  v17 = (*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80);
  v18 = (char *)v13 + v17;
  v19 = (char *)a4 + v17;
  if ((a1 & 1) != 0)
  {
    if (v13 < a4 || v18 >= &v19[*(_QWORD *)(v16 + 72) * v8])
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v13 != a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    a4[2] = 0;
    goto LABEL_32;
  }
  v20 = *(_QWORD *)(v16 + 72) * v8;
  v21 = &v18[v20];
  v22 = (unint64_t)&v19[v20];
  if (v19 >= v21 || (unint64_t)v18 >= v22)
  {
    swift_arrayInitWithCopy();
LABEL_32:
    swift_release();
    return (uint64_t)v13;
  }
LABEL_36:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized Sequence.first(where:)(uint64_t a1, void *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  uint64_t result;
  int64_t j;
  unint64_t v11;
  unint64_t i;
  int64_t v13;
  unint64_t v14;
  int64_t v15;
  uint64_t v16;
  void *v17;
  unsigned int v18;

  v4 = a1 + 64;
  v5 = 1 << *(_BYTE *)(a1 + 32);
  v6 = -1;
  if (v5 < 64)
    v6 = ~(-1 << v5);
  v7 = v6 & *(_QWORD *)(a1 + 64);
  v8 = (unint64_t)(v5 + 63) >> 6;
  result = swift_bridgeObjectRetain();
  j = 0;
  if (!v7)
    goto LABEL_5;
LABEL_4:
  v11 = __clz(__rbit64(v7));
  v7 &= v7 - 1;
  for (i = v11 | (j << 6); ; i = __clz(__rbit64(v14)) + (j << 6))
  {
    v16 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8 * i);
    v17 = *(void **)(v16 + OBJC_IVAR____TtC23LocalAuthenticationCore34LACOnenessControllerPendingRequest_request);
    swift_retain();
    v18 = objc_msgSend(v17, sel_identifier);
    if (v18 == objc_msgSend(a2, sel_identifier))
    {
      swift_release();
      return v16;
    }
    result = swift_release();
    if (v7)
      goto LABEL_4;
LABEL_5:
    v13 = j + 1;
    if (__OFADD__(j, 1))
      break;
    if (v13 >= v8)
      goto LABEL_24;
    v14 = *(_QWORD *)(v4 + 8 * v13);
    ++j;
    if (v14)
      goto LABEL_19;
    j = v13 + 1;
    if (v13 + 1 >= v8)
      goto LABEL_24;
    v14 = *(_QWORD *)(v4 + 8 * j);
    if (v14)
      goto LABEL_19;
    j = v13 + 2;
    if (v13 + 2 >= v8)
      goto LABEL_24;
    v14 = *(_QWORD *)(v4 + 8 * j);
    if (v14)
      goto LABEL_19;
    j = v13 + 3;
    if (v13 + 3 >= v8)
      goto LABEL_24;
    v14 = *(_QWORD *)(v4 + 8 * j);
    if (v14)
      goto LABEL_19;
    v15 = v13 + 4;
    if (v15 >= v8)
    {
LABEL_24:
      swift_release();
      return 0;
    }
    v14 = *(_QWORD *)(v4 + 8 * v15);
    for (j = v15; !v14; ++v15)
    {
      j = v15 + 1;
      if (__OFADD__(v15, 1))
        goto LABEL_27;
      if (j >= v8)
        goto LABEL_24;
      v14 = *(_QWORD *)(v4 + 8 * j);
    }
LABEL_19:
    v7 = (v14 - 1) & v14;
  }
  __break(1u);
LABEL_27:
  __break(1u);
  return result;
}

uint64_t specialized LACOnenessControllerPendingRequest.init(request:configuration:completion:state:)(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v5;
  uint64_t v11;
  uint64_t v12;
  id v13;
  _QWORD *v14;

  UUID.init()();
  *(_BYTE *)(v5 + OBJC_IVAR____TtC23LocalAuthenticationCore34LACOnenessControllerPendingRequest_isOnenessProcessed) = 0;
  *(_QWORD *)(v5
            + OBJC_IVAR____TtC23LocalAuthenticationCore34LACOnenessControllerPendingRequest_companionAuthenticationResult) = 0;
  v11 = v5 + OBJC_IVAR____TtC23LocalAuthenticationCore34LACOnenessControllerPendingRequest____lazy_storage___contextID;
  v12 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v11, 1, 1, v12);
  *(_QWORD *)(v5 + OBJC_IVAR____TtC23LocalAuthenticationCore34LACOnenessControllerPendingRequest_request) = a1;
  swift_unknownObjectRetain();
  v13 = objc_msgSend(a2, sel_nextProcessor);
  *(_QWORD *)(v5 + OBJC_IVAR____TtC23LocalAuthenticationCore34LACOnenessControllerPendingRequest_nextProcessor) = v13;
  v14 = (_QWORD *)(v5 + OBJC_IVAR____TtC23LocalAuthenticationCore34LACOnenessControllerPendingRequest_completion);
  *v14 = a3;
  v14[1] = a4;
  *(_BYTE *)(v5 + OBJC_IVAR____TtC23LocalAuthenticationCore34LACOnenessControllerPendingRequest_state) = a5;
  return v5;
}

uint64_t outlined destroy of AnyHashable(uint64_t a1)
{
  (*(void (**)(void))(*(_QWORD *)(MEMORY[0x24BEE23D0] - 8) + 8))();
  return a1;
}

uint64_t outlined init with copy of UUID?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined assign with take of UUID?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

unint64_t lazy protocol witness table accessor for type LACOnenessControllerPendingRequest.State and conformance LACOnenessControllerPendingRequest.State()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type LACOnenessControllerPendingRequest.State and conformance LACOnenessControllerPendingRequest.State;
  if (!lazy protocol witness table cache variable for type LACOnenessControllerPendingRequest.State and conformance LACOnenessControllerPendingRequest.State)
  {
    result = MEMORY[0x242687614](&protocol conformance descriptor for LACOnenessControllerPendingRequest.State, &type metadata for LACOnenessControllerPendingRequest.State);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LACOnenessControllerPendingRequest.State and conformance LACOnenessControllerPendingRequest.State);
  }
  return result;
}

uint64_t sub_240A38EB0@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 144))();
  *a2 = result;
  return result;
}

uint64_t sub_240A38EE0(unsigned __int8 *a1, uint64_t a2)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)a2 + 152))(*a1);
}

uint64_t sub_240A38F0C@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 168))();
  *a2 = result & 1;
  return result;
}

uint64_t sub_240A38F40(unsigned __int8 *a1, uint64_t a2)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)a2 + 176))(*a1);
}

uint64_t sub_240A38F6C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 192))();
  *a2 = result;
  return result;
}

uint64_t sub_240A38F9C(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(uint64_t);
  uint64_t v3;

  v2 = *(uint64_t (**)(uint64_t))(**(_QWORD **)a2 + 200);
  v3 = swift_bridgeObjectRetain();
  return v2(v3);
}

uint64_t sub_240A38FCC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(_QWORD **)a1 + 216))();
}

uint64_t type metadata accessor for LACOnenessControllerModel()
{
  return objc_opt_self();
}

uint64_t method lookup function for LACOnenessControllerModel()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of LACOnenessControllerModel.__allocating_init(authenticator:sessionMonitor:uiPresenter:replyQueue:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 120))();
}

uint64_t ObjC metadata update function for LACOnenessControllerPendingRequest()
{
  return type metadata accessor for LACOnenessControllerPendingRequest();
}

void type metadata completion function for LACOnenessControllerPendingRequest()
{
  unint64_t v0;
  unint64_t v1;

  type metadata accessor for UUID();
  if (v0 <= 0x3F)
  {
    type metadata accessor for UUID?();
    if (v1 <= 0x3F)
      swift_updateClassMetadata2();
  }
}

uint64_t method lookup function for LACOnenessControllerPendingRequest()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of LACOnenessControllerPendingRequest.state.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 144))();
}

uint64_t dispatch thunk of LACOnenessControllerPendingRequest.state.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 152))();
}

uint64_t dispatch thunk of LACOnenessControllerPendingRequest.state.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 160))();
}

uint64_t dispatch thunk of LACOnenessControllerPendingRequest.isOnenessProcessed.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 168))();
}

uint64_t dispatch thunk of LACOnenessControllerPendingRequest.isOnenessProcessed.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 176))();
}

uint64_t dispatch thunk of LACOnenessControllerPendingRequest.isOnenessProcessed.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 184))();
}

uint64_t dispatch thunk of LACOnenessControllerPendingRequest.companionAuthenticationResult.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 192))();
}

uint64_t dispatch thunk of LACOnenessControllerPendingRequest.companionAuthenticationResult.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 200))();
}

uint64_t dispatch thunk of LACOnenessControllerPendingRequest.companionAuthenticationResult.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 208))();
}

uint64_t dispatch thunk of LACOnenessControllerPendingRequest.contextID.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 216))();
}

uint64_t dispatch thunk of LACOnenessControllerPendingRequest.contextID.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 224))();
}

uint64_t dispatch thunk of LACOnenessControllerPendingRequest.contextID.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 232))();
}

uint64_t dispatch thunk of LACOnenessControllerPendingRequest.__allocating_init(request:configuration:completion:state:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 240))();
}

void type metadata accessor for UUID?()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for UUID?)
  {
    type metadata accessor for UUID();
    v0 = type metadata accessor for Optional();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for UUID?);
  }
}

uint64_t getEnumTagSinglePayload for LACOnenessControllerPendingRequest.State(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFD)
    goto LABEL_17;
  if (a2 + 3 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 3) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 3;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 3;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 3;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 4;
  v8 = v6 - 4;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for LACOnenessControllerPendingRequest.State(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_240A392C8 + 4 * byte_240A7D1A5[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_240A392FC + 4 * byte_240A7D1A0[v4]))();
}

uint64_t sub_240A392FC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_240A39304(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x240A3930CLL);
  return result;
}

uint64_t sub_240A39318(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x240A39320);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_240A39324(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_240A3932C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for LACOnenessControllerPendingRequest.State()
{
  return &type metadata for LACOnenessControllerPendingRequest.State;
}

void specialized LACOnenessControllerModel.processRequest(_:configuration:completion:)(void *a1, void *a2, uint64_t a3, void (**a4)(_QWORD, _QWORD))
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  id v20;
  uint64_t v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  id v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t *v28;
  char isUniquelyReferenced_nonNull_native;
  id v30;
  uint64_t v31;
  Swift::String v32;
  Swift::String v33;
  Swift::String v34;
  Swift::String v35;
  Swift::String v36;
  id v37;
  _QWORD v38[3];
  id v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  Swift::String v43;

  v39 = a2;
  v7 = type metadata accessor for LACLogger();
  MEMORY[0x24BDAC7A8](v7);
  v41 = (char *)v38 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v40 = type metadata accessor for UUID();
  v9 = *(_QWORD *)(v40 - 8);
  MEMORY[0x24BDAC7A8](v40);
  v11 = (char *)v38 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for DispatchPredicate();
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x24BDAC7A8](v12);
  v15 = (_QWORD *)((char *)v38 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  v16 = swift_allocObject();
  v17 = a3;
  v18 = *(void **)(a3 + OBJC_IVAR____TtC23LocalAuthenticationCore25LACOnenessControllerModel_replyQueue);
  v19 = v16;
  *(_QWORD *)(v16 + 16) = a4;
  *v15 = v18;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v13 + 104))(v15, *MEMORY[0x24BEE5610], v12);
  _Block_copy(a4);
  v20 = v18;
  LOBYTE(v18) = _dispatchPreconditionTest(_:)();
  (*(void (**)(_QWORD *, uint64_t))(v13 + 8))(v15, v12);
  if ((v18 & 1) != 0)
  {
    if ((LACOnenessControllerModel.canProcessRequest(_:)(a1) & 1) != 0)
    {
      type metadata accessor for LACOnenessControllerPendingRequest();
      v21 = swift_allocObject();
      swift_unknownObjectRetain();
      v22 = v39;
      v23 = v19;
      v38[2] = v19;
      swift_retain();
      UUID.init()();
      *(_BYTE *)(v21 + OBJC_IVAR____TtC23LocalAuthenticationCore34LACOnenessControllerPendingRequest_isOnenessProcessed) = 0;
      *(_QWORD *)(v21
                + OBJC_IVAR____TtC23LocalAuthenticationCore34LACOnenessControllerPendingRequest_companionAuthenticationResult) = 0;
      v24 = v40;
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(v21 + OBJC_IVAR____TtC23LocalAuthenticationCore34LACOnenessControllerPendingRequest____lazy_storage___contextID, 1, 1, v40);
      *(_QWORD *)(v21 + OBJC_IVAR____TtC23LocalAuthenticationCore34LACOnenessControllerPendingRequest_request) = a1;
      swift_unknownObjectRetain();
      v25 = objc_msgSend(v22, sel_nextProcessor);
      *(_QWORD *)(v21 + OBJC_IVAR____TtC23LocalAuthenticationCore34LACOnenessControllerPendingRequest_nextProcessor) = v25;
      v26 = (_QWORD *)(v21 + OBJC_IVAR____TtC23LocalAuthenticationCore34LACOnenessControllerPendingRequest_completion);
      *v26 = thunk for @escaping @callee_unowned @convention(block) (@unowned LACEvaluationResult) -> ()partial apply;
      v26[1] = v23;
      *(_BYTE *)(v21 + OBJC_IVAR____TtC23LocalAuthenticationCore34LACOnenessControllerPendingRequest_state) = 0;
      swift_unknownObjectRelease();

      v27 = v21 + OBJC_IVAR____TtC23LocalAuthenticationCore34LACOnenessControllerPendingRequest_id;
      (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, v21 + OBJC_IVAR____TtC23LocalAuthenticationCore34LACOnenessControllerPendingRequest_id, v24);
      v38[1] = v17;
      v28 = (uint64_t *)(v17 + OBJC_IVAR____TtC23LocalAuthenticationCore25LACOnenessControllerModel_pendingRequests);
      swift_beginAccess();
      swift_retain();
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v42 = *v28;
      *v28 = 0x8000000000000000;
      specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v21, (uint64_t)v11, isUniquelyReferenced_nonNull_native);
      *v28 = v42;
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v24);
      swift_endAccess();
      v30 = LACLogABM();
      v31 = (uint64_t)v41;
      Logger.init(_:)();
      v43._countAndFlagsBits = 0;
      v43._object = (void *)0xE000000000000000;
      _StringGuts.grow(_:)(61);
      v32._object = (void *)0x8000000240A84200;
      v32._countAndFlagsBits = 0xD00000000000001CLL;
      String.append(_:)(v32);
      lazy protocol witness table accessor for type LACPolicy and conformance LACPolicy((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEAB8]);
      v33._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v33);
      swift_bridgeObjectRelease();
      v34._countAndFlagsBits = 0xD00000000000001DLL;
      v34._object = (void *)0x8000000240A84220;
      String.append(_:)(v34);
      LODWORD(v42) = objc_msgSend(a1, sel_identifier);
      v35._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v35);
      swift_bridgeObjectRelease();
      v36 = v43;
      LOBYTE(v43._countAndFlagsBits) = 2;
      LACLogger.log(level:_:)((LocalAuthenticationCore::LACLogger::Level)&v43, v36);
      swift_bridgeObjectRelease();
      outlined destroy of LACLogger(v31);
      LACOnenessControllerModel.processAndEvaluateRequest(with:)(v27);
      swift_release();
      swift_release();
    }
    else
    {
      v37 = objc_msgSend((id)objc_opt_self(), sel_resultWithNext_, a1);
      ((void (**)(_QWORD, id))a4)[2](a4, v37);
      swift_release();

    }
  }
  else
  {
    __break(1u);
  }
}

uint64_t specialized LACOnenessControllerModel.mapValue(_:for:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char isUniquelyReferenced_nonNull_native;
  _OWORD v7[2];
  __int128 v8;
  uint64_t v9;
  _BYTE v10[40];

  v3 = (*(uint64_t (**)(void))(*(_QWORD *)a2 + 192))();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  if (v3)
  {
    v4 = MEMORY[0x24BEE1768];
    AnyHashable.init<A>(_:)();
    v9 = v4;
    *(_QWORD *)&v8 = 2;
    outlined init with take of Any(&v8, v7);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v7, (uint64_t)v10, isUniquelyReferenced_nonNull_native);
    swift_bridgeObjectRelease();
    outlined destroy of AnyHashable((uint64_t)v10);
  }
  return a1;
}

id specialized LACOnenessControllerModel.isRequestSatisfiable(with:)(uint64_t a1, void *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  void *v10;
  void *v11;
  id v12;
  id v13;
  id v14;
  Swift::String v15;
  Swift::String v16;
  Swift::String v17;
  id v18;
  uint64_t v19;
  void *v20;
  void *v21;
  Swift::String v22;
  Swift::String v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  Swift::String v27;
  id v28;
  Swift::String v29;
  Swift::String v30;
  Swift::String v32;

  v4 = type metadata accessor for LACLogger();
  v5 = MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v32 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5);
  v9 = (char *)&v32 - v8;
  v10 = (void *)objc_opt_self();
  v11 = (void *)MEMORY[0x2426863FC](a1, a2);
  v12 = objc_msgSend(v10, sel_mechanismTreeFromSerializedTree_, v11);

  if (v12)
  {
    v13 = objc_msgSend(v12, sel_isSatisfiableWithValue_, 13);
    v14 = LACLogABM();
    Logger.init(_:)();
    v32._countAndFlagsBits = 0;
    v32._object = (void *)0xE000000000000000;
    _StringGuts.grow(_:)(63);
    v15._object = (void *)0x8000000240A847C0;
    v15._countAndFlagsBits = 0xD000000000000011;
    String.append(_:)(v15);
    v16._countAndFlagsBits = a1;
    v16._object = a2;
    String.append(_:)(v16);
    v17._countAndFlagsBits = 0xD000000000000013;
    v17._object = (void *)0x8000000240A847E0;
    String.append(_:)(v17);
    v18 = objc_msgSend(v12, sel_description);
    v19 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v21 = v20;

    v22._countAndFlagsBits = v19;
    v22._object = v21;
    String.append(_:)(v22);
    swift_bridgeObjectRelease();
    v23._countAndFlagsBits = 0xD000000000000015;
    v23._object = (void *)0x8000000240A84800;
    String.append(_:)(v23);
    if ((_DWORD)v13)
      v24 = 1702195828;
    else
      v24 = 0x65736C6166;
    if ((_DWORD)v13)
      v25 = 0xE400000000000000;
    else
      v25 = 0xE500000000000000;
    v26 = v25;
    String.append(_:)(*(Swift::String *)&v24);
    swift_bridgeObjectRelease();
    v27 = v32;
    LOBYTE(v32._countAndFlagsBits) = 2;
    LACLogger.log(level:_:)((LocalAuthenticationCore::LACLogger::Level)&v32, v27);

    swift_bridgeObjectRelease();
  }
  else
  {
    v28 = LACLogABM();
    Logger.init(_:)();
    v32._countAndFlagsBits = 0;
    v32._object = (void *)0xE000000000000000;
    _StringGuts.grow(_:)(24);
    swift_bridgeObjectRelease();
    v32._countAndFlagsBits = 0xD000000000000016;
    v32._object = (void *)0x8000000240A847A0;
    v29._countAndFlagsBits = a1;
    v29._object = a2;
    String.append(_:)(v29);
    v30 = v32;
    LOBYTE(v32._countAndFlagsBits) = 2;
    LACLogger.log(level:_:)((LocalAuthenticationCore::LACLogger::Level)&v32, v30);
    swift_bridgeObjectRelease();
    v13 = 0;
    v9 = v7;
  }
  outlined destroy of LACLogger((uint64_t)v9);
  return v13;
}

uint64_t specialized LACOnenessControllerModel.isRequestSatisfiable(with:)(void *a1)
{
  id v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  char v6;
  unsigned __int8 v7;
  uint64_t v9;
  void *v10;
  __int128 v11;
  __int128 v12;

  v1 = objc_msgSend(a1, sel_userInfo);
  v2 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  if (!*(_QWORD *)(v2 + 16) || (v5 = specialized __RawDictionaryStorage.find<A>(_:)(v3, v4), (v6 & 1) == 0))
  {
    v11 = 0u;
    v12 = 0u;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_7;
  }
  outlined init with copy of Any(*(_QWORD *)(v2 + 56) + 32 * v5, (uint64_t)&v11);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!*((_QWORD *)&v12 + 1))
  {
LABEL_7:
    outlined destroy of AsyncStream<()>.Continuation?((uint64_t)&v11, &demangling cache variable for type metadata for Any?);
    goto LABEL_8;
  }
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_8:
    v7 = 0;
    return v7 & 1;
  }
  v7 = specialized LACOnenessControllerModel.isRequestSatisfiable(with:)(v9, v10);
  swift_bridgeObjectRelease();
  return v7 & 1;
}

uint64_t specialized LACOnenessControllerModel.isContinuityUnlockAvailable(nonInteractiveError:)(void *a1)
{
  id v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  char v6;
  uint64_t v7;
  char v8;
  uint64_t v10;
  __int128 v11;
  __int128 v12;

  v1 = objc_msgSend(a1, sel_userInfo);
  v2 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  if (!*(_QWORD *)(v2 + 16) || (v5 = specialized __RawDictionaryStorage.find<A>(_:)(v3, v4), (v6 & 1) == 0))
  {
    v11 = 0u;
    v12 = 0u;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_7;
  }
  outlined init with copy of Any(*(_QWORD *)(v2 + 56) + 32 * v5, (uint64_t)&v11);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!*((_QWORD *)&v12 + 1))
  {
LABEL_7:
    outlined destroy of AsyncStream<()>.Continuation?((uint64_t)&v11, &demangling cache variable for type metadata for Any?);
    goto LABEL_8;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Int]);
  if (!swift_dynamicCast())
  {
LABEL_8:
    v7 = MEMORY[0x24BEE4AF8];
    goto LABEL_9;
  }
  v7 = v10;
LABEL_9:
  v8 = specialized Sequence<>.contains(_:)(13, v7);
  swift_bridgeObjectRelease();
  return v8 & 1;
}

id specialized LACOnenessControllerModel.mapError(_:for:)(void *a1)
{
  void *v2;
  void *v3;
  unsigned int v4;
  void *v5;
  id v6;
  id v7;
  void *v9;
  id v10;
  void *v11;

  v2 = (void *)objc_opt_self();
  v3 = (void *)_convertErrorToNSError(_:)();
  v4 = objc_msgSend(v2, sel_error_hasCode_, v3, -1004);

  if (!v4)
  {
    v7 = a1;
    return a1;
  }
  v5 = (void *)_convertErrorToNSError(_:)();
  if ((specialized LACOnenessControllerModel.isRequestSatisfiable(with:)(v5) & 1) != 0)
  {
    if ((specialized LACOnenessControllerModel.isContinuityUnlockAvailable(nonInteractiveError:)(v5) & 1) != 0)
    {
      v6 = a1;

      return a1;
    }
    v11 = (void *)MEMORY[0x2426863FC](0xD000000000000041, 0x8000000240A84750);
    v10 = objc_msgSend(v2, sel_errorWithCode_debugDescription_, -11, v11);

  }
  else
  {
    v9 = (void *)MEMORY[0x2426863FC](0xD000000000000059, 0x8000000240A846F0);
    v10 = objc_msgSend(v2, sel_errorWithCode_subcode_debugDescription_, -1, 33, v9);

  }
  return v10;
}

id specialized LACOnenessControllerModel.mapResult(_:for:)(void *a1, uint64_t a2)
{
  void *v3;
  void *v4;
  id v5;
  void *v6;
  id v7;
  void *v8;
  Class isa;
  void *v12;
  char v13;

  LACEvaluationResult.resultWithAssociatedValue.getter((uint64_t)&v12);
  v3 = v12;
  if (!v13)
  {
    v8 = (void *)objc_opt_self();
    specialized LACOnenessControllerModel.mapValue(_:for:)((uint64_t)v3, a2);
    outlined consume of LACEvaluationResultWithAssociatedValue(v3, 0);
    isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    v7 = objc_msgSend(v8, sel_resultWithSuccess_, isa);

    return v7;
  }
  if (v13 == 1)
  {
    v4 = (void *)objc_opt_self();
    v5 = specialized LACOnenessControllerModel.mapError(_:for:)(v3);
    v6 = (void *)_convertErrorToNSError(_:)();

    v7 = objc_msgSend(v4, sel_resultWithFailure_, v6);
    outlined consume of LACEvaluationResultWithAssociatedValue(v3, 1);
    return v7;
  }
  outlined consume of LACEvaluationResultWithAssociatedValue(v12, 2);
  return a1;
}

void specialized LACOnenessControllerModel.postProcessRequest(_:result:completion:)(void *a1, void *a2, uint64_t a3, void (**a4)(_QWORD, _QWORD))
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  id v12;
  id v13;
  unsigned int v14;
  id v15;
  void *v16;
  uint64_t v17;
  unint64_t v18;
  char v19;
  id v20;
  Swift::String v21;
  Swift::String v22;
  unint64_t v23;
  const char *v24;
  unint64_t v25;
  Swift::String v26;
  id v27;
  Swift::String v28;
  Swift::String v29;
  id v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  _QWORD *v35;
  void *v36;
  id v37;
  _QWORD v38[2];
  Swift::String aBlock;
  void (*v40)(uint64_t, void *);
  void *v41;
  uint64_t (*v42)();
  _QWORD *v43;
  __int128 v44;
  __int128 v45;

  v8 = type metadata accessor for LACLogger();
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)v38 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = swift_allocObject();
  *(_QWORD *)(v11 + 16) = a4;
  _Block_copy(a4);
  v12 = LACOnenessControllerModel.postProcessRequest(_:result:)(a1, a2);
  v13 = objc_msgSend((id)objc_opt_self(), sel_sharedInstance);
  v14 = objc_msgSend(v13, sel_featureFlagApproveByMacFailureUIEnabled);

  if (!v14)
  {
    v20 = LACLogABM();
    Logger.init(_:)();
    aBlock._countAndFlagsBits = 0;
    aBlock._object = (void *)0xE000000000000000;
    _StringGuts.grow(_:)(69);
    v21._object = (void *)0x8000000240A84240;
    v21._countAndFlagsBits = 0xD00000000000002DLL;
    String.append(_:)(v21);
    LODWORD(v44) = objc_msgSend(a1, sel_identifier);
    v22._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v22);
    swift_bridgeObjectRelease();
    v23 = 0xD000000000000016;
    v24 = ". Feature not enabled.";
LABEL_7:
    v25 = (unint64_t)(v24 - 32) | 0x8000000000000000;
    String.append(_:)(*(Swift::String *)&v23);
    v26 = aBlock;
    LOBYTE(aBlock._countAndFlagsBits) = 2;
    LACLogger.log(level:_:)((LocalAuthenticationCore::LACLogger::Level)&aBlock, v26);
    swift_bridgeObjectRelease();
    outlined destroy of LACLogger((uint64_t)v10);
LABEL_19:
    ((void (**)(_QWORD, id))a4)[2](a4, v12);
    swift_release();
    goto LABEL_20;
  }
  v15 = objc_msgSend(a1, sel_options);
  if (!v15)
  {
    v44 = 0u;
    v45 = 0u;
LABEL_14:
    outlined destroy of AsyncStream<()>.Continuation?((uint64_t)&v44, &demangling cache variable for type metadata for Any?);
    goto LABEL_15;
  }
  v16 = v15;
  v17 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  v38[1] = 1039;
  AnyHashable.init<A>(_:)();
  if (*(_QWORD *)(v17 + 16) && (v18 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&aBlock), (v19 & 1) != 0))
  {
    outlined init with copy of Any(*(_QWORD *)(v17 + 56) + 32 * v18, (uint64_t)&v44);
  }
  else
  {
    v44 = 0u;
    v45 = 0u;
  }
  swift_bridgeObjectRelease();
  outlined destroy of AnyHashable((uint64_t)&aBlock);
  if (!*((_QWORD *)&v45 + 1))
    goto LABEL_14;
  if (swift_dynamicCast() && (aBlock._countAndFlagsBits & 1) != 0)
  {
    v27 = LACLogABM();
    Logger.init(_:)();
    aBlock._countAndFlagsBits = 0;
    aBlock._object = (void *)0xE000000000000000;
    _StringGuts.grow(_:)(70);
    v28._object = (void *)0x8000000240A84240;
    v28._countAndFlagsBits = 0xD00000000000002DLL;
    String.append(_:)(v28);
    LODWORD(v44) = objc_msgSend(a1, sel_identifier);
    v29._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v29);
    swift_bridgeObjectRelease();
    v23 = 0xD000000000000017;
    v24 = ". No failure UI option.";
    goto LABEL_7;
  }
LABEL_15:
  v30 = objc_msgSend(v12, sel_error);
  if (!v30)
    goto LABEL_19;
  v31 = v30;
  v32 = (void *)objc_opt_self();
  v33 = (void *)_convertErrorToNSError(_:)();
  LODWORD(v32) = objc_msgSend(v32, sel_error_hasCode_subcode_, v33, -1, 33);

  if (!(_DWORD)v32)
  {

    goto LABEL_19;
  }
  v34 = *(void **)(a3 + OBJC_IVAR____TtC23LocalAuthenticationCore25LACOnenessControllerModel_uiPresenter);
  v35 = (_QWORD *)swift_allocObject();
  v35[2] = partial apply for thunk for @escaping @callee_unowned @convention(block) (@unowned LACEvaluationResult) -> ();
  v35[3] = v11;
  v35[4] = v12;
  v42 = partial apply for closure #1 in LACOnenessControllerModel.postProcessRequest(_:result:completion:);
  v43 = v35;
  aBlock._countAndFlagsBits = MEMORY[0x24BDAC760];
  aBlock._object = (void *)1107296256;
  v40 = thunk for @escaping @callee_guaranteed (@guaranteed Error?) -> ();
  v41 = &block_descriptor_20;
  v36 = _Block_copy(&aBlock);
  swift_retain();
  v37 = v12;
  swift_release();
  objc_msgSend(v34, sel_presentUIForIdentifier_request_completion_, 3, a1, v36);
  _Block_release(v36);
  swift_release();

  v12 = v31;
LABEL_20:

}

uint64_t sub_240A3A574()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject();
}

uint64_t partial apply for thunk for @escaping @callee_unowned @convention(block) (@unowned LACEvaluationResult) -> ()(uint64_t a1)
{
  uint64_t v1;

  return thunk for @escaping @callee_unowned @convention(block) (@unowned LACEvaluationResult) -> ()(a1, *(_QWORD *)(v1 + 16));
}

uint64_t objectdestroyTm_0()
{
  uint64_t v0;

  swift_release();

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in LACOnenessControllerModel.postProcessRequest(_:result:completion:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(_QWORD))(v0 + 16))(*(_QWORD *)(v0 + 32));
}

uint64_t partial apply for closure #1 in LACOnenessControllerModel.cancelPendingRequests(contextID:)(uint64_t a1)
{
  return closure #1 in LACOnenessControllerModel.cancelPendingRequests(contextID:)(a1) & 1;
}

void outlined consume of LACEvaluationResultWithAssociatedValue(void *a1, char a2)
{
  switch(a2)
  {
    case 2:
      swift_unknownObjectRelease();
      break;
    case 1:

      break;
    case 0:
      swift_bridgeObjectRelease();
      break;
  }
}

uint64_t sub_240A3A640()
{
  swift_unknownObjectWeakDestroy();
  return swift_deallocObject();
}

uint64_t sub_240A3A664()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v1 = type metadata accessor for UUID();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  swift_release();
  swift_unknownObjectRelease();
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  return swift_deallocObject();
}

void partial apply for closure #1 in LACOnenessControllerModel.preflightAndEvaluateRequest(with:)(void *a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for UUID() - 8) + 80);
  closure #1 in LACOnenessControllerModel.preflightAndEvaluateRequest(with:)(a1, *(_QWORD *)(v1 + 16), *(void **)(v1 + 24), *(_QWORD *)(v1 + 32), v1 + ((v3 + 40) & ~v3));
}

uint64_t sub_240A3A72C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = type metadata accessor for UUID();
  (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 8))(v0+ ((*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80)), v1);
  swift_release();
  swift_release();
  return swift_deallocObject();
}

void partial apply for closure #2 in closure #1 in LACOnenessControllerModel.preflightAndEvaluateRequest(with:)(void *a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;

  v3 = *(_QWORD *)(type metadata accessor for UUID() - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v5 = (*(_QWORD *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  closure #2 in closure #1 in LACOnenessControllerModel.preflightAndEvaluateRequest(with:)(a1, v1 + v4, *(_QWORD *)(v1 + v5), *(_QWORD *)(v1 + ((v5 + 15) & 0xFFFFFFFFFFFFF8)));
}

uint64_t sub_240A3A814()
{
  swift_unknownObjectRelease();
  return swift_deallocObject();
}

id partial apply(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return objc_msgSend(*(id *)(v3 + 16), sel_postProcessRequest_result_completion_, a1, a2, a3);
}

uint64_t sub_240A3A854()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@unowned LACEvaluationRequest, @unowned LACEvaluationResult, @unowned @escaping @callee_unowned @convention(block) (@unowned LACEvaluationResult) -> ()) -> ()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  return thunk for @escaping @callee_guaranteed (@unowned LACEvaluationRequest, @unowned LACEvaluationResult, @unowned @escaping @callee_unowned @convention(block) (@unowned LACEvaluationResult) -> ()) -> ()(a1, a2, a3, a4, *(void (**)(uint64_t, uint64_t, void *))(v4 + 16));
}

unint64_t type metadata accessor for NSError()
{
  unint64_t result;

  result = lazy cache variable for type metadata for NSError;
  if (!lazy cache variable for type metadata for NSError)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for NSError);
  }
  return result;
}

uint64_t sub_240A3A8BC()
{
  swift_release();
  swift_release();
  return swift_deallocObject();
}

void partial apply for closure #1 in LACOnenessControllerModel.authenticateRequest(with:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  closure #1 in LACOnenessControllerModel.authenticateRequest(with:)(a1, a2, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24));
}

id LACOnenessAuthenticator.isAvailable.getter()
{
  void *v0;
  id v1;

  v1 = objc_msgSend(objc_msgSend(v0, sel_model), sel_isAvailable);
  swift_unknownObjectRelease();
  return v1;
}

uint64_t LACOnenessAuthenticator.domainState(for:completion:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return LACOnenessAuthenticator.domainState(for:completion:)(a1, a2, a3, (uint64_t)&block_descriptor_7, (SEL *)&selRef_domainStateForRequest_completion_);
}

uint64_t block_copy_helper_5(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_5()
{
  return swift_release();
}

uint64_t LACOnenessAuthenticator.authenticateRequest(_:completion:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return LACOnenessAuthenticator.domainState(for:completion:)(a1, a2, a3, (uint64_t)&block_descriptor_3_0, (SEL *)&selRef_authenticateRequest_completion_);
}

uint64_t LACOnenessAuthenticator.domainState(for:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, SEL *a5)
{
  void *v5;
  id v11;
  void *v12;
  _QWORD v14[6];

  v11 = objc_msgSend(v5, sel_model);
  v14[4] = a2;
  v14[5] = a3;
  v14[0] = MEMORY[0x24BDAC760];
  v14[1] = 1107296256;
  v14[2] = thunk for @escaping @callee_guaranteed (@guaranteed [AnyHashable : Any]?, @guaranteed Error?) -> ();
  v14[3] = a4;
  v12 = _Block_copy(v14);
  swift_retain();
  swift_release();
  objc_msgSend(v11, *a5, a1, v12);
  _Block_release(v12);
  return swift_unknownObjectRelease();
}

uint64_t LACOnenessAuthenticator.cancelAuthentication(for:)(uint64_t a1)
{
  void *v1;

  objc_msgSend(objc_msgSend(v1, sel_model), sel_cancelAuthenticationForRequest_, a1);
  return swift_unknownObjectRelease();
}

char *LACOnenessAuthenticator.makeModel(withClientInfoProvider:)(uint64_t a1)
{
  void *v1;
  id v3;
  id v4;
  id v5;

  v3 = objc_msgSend(v1, sel_authenticationProvider);
  swift_unknownObjectRetain();
  v4 = objc_msgSend(v1, sel_replyQueue);
  v5 = objc_allocWithZone((Class)type metadata accessor for LACOnenessAuthenticatorModel());
  return LACOnenessAuthenticatorModel.init(authenticationProvider:clientInfoProvider:replyQueue:)((uint64_t)v3, a1, v4);
}

uint64_t sub_240A3AF08()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject();
}

uint64_t LACPreboardUseCaseProvider.provider.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE v7[40];
  _QWORD v8[3];
  uint64_t v9;
  _UNKNOWN **v10;

  v3 = v1 + 16;
  swift_beginAccess();
  outlined init with copy of URL?(v3, (uint64_t)v8, &demangling cache variable for type metadata for LACPreboardUseCaseProviding??);
  if (v9 == 1)
  {
    outlined destroy of AsyncStream<()>.Continuation?((uint64_t)v8, &demangling cache variable for type metadata for LACPreboardUseCaseProviding??);
    v4 = type metadata accessor for LACPreboardUseCaseProviderAMFI();
    v5 = swift_allocObject();
    v9 = v4;
    v10 = &protocol witness table for LACPreboardUseCaseProviderAMFI;
    v8[0] = v5;
    outlined init with copy of URL?((uint64_t)v8, (uint64_t)v7, &demangling cache variable for type metadata for LACPreboardUseCaseProviding?);
    swift_beginAccess();
    outlined assign with take of LACPreboardUseCaseProviding??((uint64_t)v7, v3);
    swift_endAccess();
  }
  return outlined init with take of LACPreboardUseCaseProviding?((uint64_t)v8, a1);
}

uint64_t outlined assign with take of LACPreboardUseCaseProviding??(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LACPreboardUseCaseProviding??);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with take of LACPreboardUseCaseProviding?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LACPreboardUseCaseProviding?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t key path setter for LACPreboardUseCaseProvider.provider : LACPreboardUseCaseProvider(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  _BYTE v5[40];
  _BYTE v6[40];

  outlined init with copy of URL?(a1, (uint64_t)v6, &demangling cache variable for type metadata for LACPreboardUseCaseProviding?);
  v3 = *a2;
  outlined init with take of LACPreboardUseCaseProviding?((uint64_t)v6, (uint64_t)v5);
  swift_beginAccess();
  outlined assign with take of LACPreboardUseCaseProviding??((uint64_t)v5, v3 + 16);
  return swift_endAccess();
}

uint64_t LACPreboardUseCaseProvider.provider.setter(uint64_t a1)
{
  uint64_t v1;
  _BYTE v3[40];

  outlined init with take of LACPreboardUseCaseProviding?(a1, (uint64_t)v3);
  swift_beginAccess();
  outlined assign with take of LACPreboardUseCaseProviding??((uint64_t)v3, v1 + 16);
  return swift_endAccess();
}

void (*LACPreboardUseCaseProvider.provider.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = malloc(0x98uLL);
  *a1 = v3;
  v3[18] = v1;
  LACPreboardUseCaseProvider.provider.getter((uint64_t)v3);
  return LACPreboardUseCaseProvider.provider.modify;
}

void LACPreboardUseCaseProvider.provider.modify(uint64_t *a1, char a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = (_QWORD *)*a1;
  v3 = *a1 + 40;
  v4 = *a1 + 80;
  if ((a2 & 1) != 0)
  {
    v5 = v2[18];
    outlined init with copy of URL?(*a1, v3, &demangling cache variable for type metadata for LACPreboardUseCaseProviding?);
    outlined init with take of LACPreboardUseCaseProviding?(v3, v4);
    swift_beginAccess();
    outlined assign with take of LACPreboardUseCaseProviding??(v4, v5 + 16);
    swift_endAccess();
    outlined destroy of AsyncStream<()>.Continuation?((uint64_t)v2, &demangling cache variable for type metadata for LACPreboardUseCaseProviding?);
  }
  else
  {
    v6 = v2[18];
    outlined init with take of LACPreboardUseCaseProviding?(*a1, v3);
    swift_beginAccess();
    outlined assign with take of LACPreboardUseCaseProviding??(v3, v6 + 16);
    swift_endAccess();
  }
  free(v2);
}

double LACPreboardUseCaseProvider.__allocating_init()()
{
  uint64_t v0;
  double result;

  v0 = swift_allocObject();
  *(_QWORD *)(v0 + 24) = 0;
  *(_QWORD *)(v0 + 32) = 0;
  *(_QWORD *)(v0 + 16) = 0;
  *(_QWORD *)&result = 1;
  *(_OWORD *)(v0 + 40) = xmmword_240A7D340;
  return result;
}

double LACPreboardUseCaseProvider.init()()
{
  uint64_t v0;
  double result;

  *(_QWORD *)(v0 + 16) = 0;
  *(_QWORD *)(v0 + 24) = 0;
  *(_QWORD *)(v0 + 32) = 0;
  *(_QWORD *)&result = 1;
  *(_OWORD *)(v0 + 40) = xmmword_240A7D340;
  return result;
}

void LACPreboardUseCaseProvider.preboardUseCase.getter()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  id v5;
  id v6;
  uint64_t v7;
  id v8;
  Swift::String v9;
  Swift::String v10;
  id v11;
  Swift::String v12;
  _QWORD v13[2];
  Swift::String v14;
  uint64_t v15;
  _QWORD v16[3];
  uint64_t v17;
  uint64_t v18;

  v0 = type metadata accessor for LACLogger();
  MEMORY[0x24BDAC7A8](v0);
  v2 = (char *)v13 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  LACPreboardUseCaseProvider.provider.getter((uint64_t)&v14);
  if (v15)
  {
    outlined init with take of LACPreboardUseCaseProviding((__int128 *)&v14._countAndFlagsBits, (uint64_t)v16);
    v3 = v17;
    v4 = v18;
    __swift_project_boxed_opaque_existential_1(v16, v17);
    if ((*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8))(v3, v4) == -1
      && (v5 = objc_msgSend((id)objc_opt_self(), sel_sharedInstance),
          v6 = objc_msgSend(v5, sel_valueForFlagPreboardMode),
          v5,
          v6)
      && (v7 = (uint64_t)objc_msgSend(v6, sel_integerValue), v6, v7 >= -1)
      && v7 <= 4)
    {
      v8 = LACLogPreboard();
      Logger.init(_:)();
      v14._countAndFlagsBits = 0;
      v14._object = (void *)0xE000000000000000;
      _StringGuts.grow(_:)(25);
      swift_bridgeObjectRelease();
      v14._countAndFlagsBits = 0xD000000000000017;
      v14._object = (void *)0x8000000240A84B40;
      v13[1] = v7;
      v9._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v9);
      swift_bridgeObjectRelease();
      v10 = v14;
      LOBYTE(v14._countAndFlagsBits) = 2;
      LACLogger.log(level:_:)((LocalAuthenticationCore::LACLogger::Level)&v14, v10);
      swift_bridgeObjectRelease();
      outlined destroy of LACLogger((uint64_t)v2);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v16);
    }
    else
    {
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v16);
    }
  }
  else
  {
    outlined destroy of AsyncStream<()>.Continuation?((uint64_t)&v14, &demangling cache variable for type metadata for LACPreboardUseCaseProviding?);
    v11 = LACLogPreboard();
    Logger.init(_:)();
    LOBYTE(v16[0]) = 3;
    v12._object = (void *)0x8000000240A84B20;
    v12._countAndFlagsBits = 0xD000000000000014;
    LACLogger.log(level:_:)((LocalAuthenticationCore::LACLogger::Level)v16, v12);
    outlined destroy of LACLogger((uint64_t)v2);
  }
}

uint64_t outlined init with take of LACPreboardUseCaseProviding(__int128 *a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;

  v2 = *a1;
  v3 = a1[1];
  *(_QWORD *)(a2 + 32) = *((_QWORD *)a1 + 4);
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + 16) = v3;
  return a2;
}

uint64_t LACPreboardUseCaseProvider.completeCurrentUseCase(success:)(char a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 96) = v1;
  *(_BYTE *)(v2 + 120) = a1;
  return swift_task_switch();
}

uint64_t LACPreboardUseCaseProvider.completeCurrentUseCase(success:)()
{
  uint64_t v0;
  id v1;
  id v2;
  uint64_t (*v3)(void);
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  void *v8;
  void *v9;
  uint64_t (*v10)(_QWORD, uint64_t, uint64_t);

  v1 = objc_msgSend((id)objc_opt_self(), sel_sharedInstance);
  v2 = objc_msgSend(v1, sel_valueForFlagPreboardMode);

  if (v2)
  {
    objc_msgSend((id)objc_opt_self(), sel_setPreboardMode_, 0);
    v3 = *(uint64_t (**)(void))(v0 + 8);
    return v3();
  }
  LACPreboardUseCaseProvider.provider.getter(v0 + 56);
  if (!*(_QWORD *)(v0 + 80))
  {
    outlined destroy of AsyncStream<()>.Continuation?(v0 + 56, &demangling cache variable for type metadata for LACPreboardUseCaseProviding?);
    v8 = (void *)objc_opt_self();
    v9 = (void *)MEMORY[0x2426863FC](0xD000000000000014, 0x8000000240A84B20);
    objc_msgSend(v8, sel_errorWithCode_debugDescription_, -1020, v9);

    swift_willThrow();
    v3 = *(uint64_t (**)(void))(v0 + 8);
    return v3();
  }
  outlined init with take of LACPreboardUseCaseProviding((__int128 *)(v0 + 56), v0 + 16);
  v5 = *(_QWORD *)(v0 + 40);
  v6 = *(_QWORD *)(v0 + 48);
  __swift_project_boxed_opaque_existential_1((_QWORD *)(v0 + 16), v5);
  v10 = (uint64_t (*)(_QWORD, uint64_t, uint64_t))(**(int **)(v6 + 16) + *(_QWORD *)(v6 + 16));
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 104) = v7;
  *v7 = v0;
  v7[1] = LACPreboardUseCaseProvider.completeCurrentUseCase(success:);
  return v10(*(unsigned __int8 *)(v0 + 120), v5, v6);
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 112) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;

  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;

  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t LACPreboardUseCaseProvider.deinit()
{
  uint64_t v0;

  outlined destroy of AsyncStream<()>.Continuation?(v0 + 16, &demangling cache variable for type metadata for LACPreboardUseCaseProviding??);
  return v0;
}

uint64_t LACPreboardUseCaseProvider.__deallocating_deinit()
{
  uint64_t v0;

  outlined destroy of AsyncStream<()>.Continuation?(v0 + 16, &demangling cache variable for type metadata for LACPreboardUseCaseProviding??);
  return swift_deallocClassInstance();
}

void protocol witness for LACPreboardUseCaseProviding.preboardUseCase.getter in conformance LACPreboardUseCaseProvider()
{
  LACPreboardUseCaseProvider.preboardUseCase.getter();
}

uint64_t protocol witness for LACPreboardUseCaseProviding.completeCurrentUseCase(success:) in conformance LACPreboardUseCaseProvider(char a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = *v1;
  v5 = swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *(_QWORD *)v5 = v2;
  *(_QWORD *)(v5 + 8) = dispatch thunk of LACUserDefaultsPersistentStore.removeObject(forKey:);
  *(_QWORD *)(v5 + 96) = v4;
  *(_BYTE *)(v5 + 120) = a1;
  return swift_task_switch();
}

uint64_t sub_240A3B8E8@<X0>(uint64_t a1@<X8>)
{
  return LACPreboardUseCaseProvider.provider.getter(a1);
}

uint64_t type metadata accessor for LACPreboardUseCaseProvider()
{
  return objc_opt_self();
}

uint64_t method lookup function for LACPreboardUseCaseProvider()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of LACPreboardUseCaseProvider.__allocating_init()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 88))();
}

uint64_t static LACGlobalDomain.companionAuthentication.getter()
{
  id v0;
  id v1;
  uint64_t v2;

  v0 = objc_msgSend((id)objc_opt_self(), sel_sharedInstance);
  v1 = objc_msgSend(v0, sel_valueForFlagOnenessSessionAuthentication);

  if (!v1)
    return 0;
  v2 = static Data._unconditionallyBridgeFromObjectiveC(_:)();

  return v2;
}

id static LACGlobalDomain.isCompanionSessionActive.getter()
{
  return static LACGlobalDomain.isCompanionSessionActive.getter((SEL *)&selRef_valueForFlagOnenessSessionActive);
}

uint64_t static LACGlobalDomain.isCompanionSessionActive.setter(void *a1)
{
  return specialized static LACGlobalDomain.isCompanionSessionActive.setter(a1, (SEL *)&selRef_flagOnenessSessionActiveKey);
}

id static LACGlobalDomain.isCompanionDeviceMocked.getter()
{
  id v0;
  id v1;
  id v2;

  v0 = objc_msgSend((id)objc_opt_self(), sel_sharedInstance);
  v1 = objc_msgSend(v0, sel_valueForFlagCompanionMockDevices);

  if (!v1)
    return 0;
  v2 = objc_msgSend(v1, sel_BOOLValue);

  return v2;
}

uint64_t static LACGlobalDomain.isCompanionDeviceMocked.setter(char a1)
{
  return static LACGlobalDomain.isCompanionDeviceMocked.setter(a1, (SEL *)&selRef_flagCompanionMockDevicesKey);
}

id static LACGlobalDomain.preboardMode.getter()
{
  return static LACGlobalDomain.isCompanionSessionActive.getter((SEL *)&selRef_valueForFlagPreboardMode);
}

uint64_t static LACGlobalDomain.preboardMode.setter(void *a1)
{
  return specialized static LACGlobalDomain.isCompanionSessionActive.setter(a1, (SEL *)&selRef_flagPreboardModeKey);
}

id static LACGlobalDomain.isDTOStrictModeEnabled.getter()
{
  id v0;
  id v1;

  v0 = objc_msgSend((id)objc_opt_self(), sel_sharedInstance);
  v1 = objc_msgSend(v0, sel_valueForFlagDTOStrictModeEnabled);

  return v1;
}

uint64_t @objc static LACGlobalDomain.isCompanionDeviceMocked.setter(uint64_t a1, uint64_t a2, char a3, SEL *a4)
{
  id v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v11[4];

  v11[3] = MEMORY[0x24BEE1328];
  LOBYTE(v11[0]) = a3;
  v5 = objc_msgSend((id)objc_opt_self(), sel_sharedInstance, v11[0]);
  v6 = objc_msgSend(v5, *a4);

  v7 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v9 = v8;

  specialized static LACGlobalDomain.setObject(_:forKey:)((uint64_t)v11, v7, v9);
  swift_bridgeObjectRelease();
  return outlined destroy of Any?((uint64_t)v11);
}

uint64_t static LACGlobalDomain.isDTOStrictModeEnabled.setter(char a1)
{
  return static LACGlobalDomain.isCompanionDeviceMocked.setter(a1, (SEL *)&selRef_flagDTOStrictModeEnabledKey);
}

uint64_t static LACGlobalDomain.isCompanionDeviceMocked.setter(char a1, SEL *a2)
{
  id v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[4];

  v9[3] = MEMORY[0x24BEE1328];
  LOBYTE(v9[0]) = a1;
  v3 = objc_msgSend((id)objc_opt_self(), sel_sharedInstance, v9[0]);
  v4 = objc_msgSend(v3, *a2);

  v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v7 = v6;

  specialized static LACGlobalDomain.setObject(_:forKey:)((uint64_t)v9, v5, v7);
  swift_bridgeObjectRelease();
  return outlined destroy of Any?((uint64_t)v9);
}

id static LACGlobalDomain.isSharedModeActive.getter()
{
  return static LACGlobalDomain.isCompanionSessionActive.getter((SEL *)&selRef_valueForFlagSharedModeActive);
}

uint64_t static LACGlobalDomain.isSharedModeActive.setter(void *a1)
{
  return specialized static LACGlobalDomain.isCompanionSessionActive.setter(a1, (SEL *)&selRef_flagSharedModeActiveKey);
}

id @objc static LACGlobalDomain.isCompanionSessionActive.getter(uint64_t a1, uint64_t a2, SEL *a3)
{
  id v4;
  id v5;

  v4 = objc_msgSend((id)objc_opt_self(), sel_sharedInstance);
  v5 = objc_msgSend(v4, *a3);

  return v5;
}

id static LACGlobalDomain.sharedModeLatency.getter()
{
  return static LACGlobalDomain.isCompanionSessionActive.getter((SEL *)&selRef_valueForFlagSharedModeLatency);
}

id static LACGlobalDomain.isCompanionSessionActive.getter(SEL *a1)
{
  id v2;
  id v3;

  v2 = objc_msgSend((id)objc_opt_self(), sel_sharedInstance);
  v3 = objc_msgSend(v2, *a1);

  return v3;
}

uint64_t static LACGlobalDomain.sharedModeLatency.setter(void *a1)
{
  return specialized static LACGlobalDomain.isCompanionSessionActive.setter(a1, (SEL *)&selRef_flagSharedModeLatencyKey);
}

uint64_t static LACGlobalDomain.osVariantAllowsDomainOverrides.getter()
{
  return os_variant_allows_internal_security_policies();
}

LACGlobalDomain __swiftcall LACGlobalDomain.init()()
{
  return (LACGlobalDomain)objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), sel_init);
}

id LACGlobalDomain.init()()
{
  objc_super v1;

  v1.super_class = (Class)LACGlobalDomain;
  return objc_msgSendSuper2(&v1, sel_init);
}

void specialized static LACGlobalDomain.setObject(_:forKey:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v6;
  id v7;
  uint64_t v8;
  id v9;
  unint64_t v10;
  char isUniquelyReferenced_nonNull_native;
  id v12;
  Class isa;
  id v14;
  unint64_t v15;
  _OWORD v16[2];
  __int128 v17;
  uint64_t v18;
  unint64_t v19;

  v6 = (void *)objc_opt_self();
  v7 = objc_msgSend(v6, sel_standardUserDefaults);
  v8 = *MEMORY[0x24BDD0D70];
  v9 = objc_msgSend(v7, sel_persistentDomainForName_, *MEMORY[0x24BDD0D70]);

  if (v9)
  {
    v10 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  }
  else
  {
    v10 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  }
  v19 = v10;
  outlined init with copy of Any?(a1, (uint64_t)&v17);
  if (v18)
  {
    outlined init with take of Any(&v17, v16);
    swift_bridgeObjectRetain();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v15 = v10;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v16, a2, a3, isUniquelyReferenced_nonNull_native);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRetain();
    outlined destroy of Any?((uint64_t)&v17);
    specialized Dictionary._Variant.removeValue(forKey:)(a2, a3, v16);
    swift_bridgeObjectRelease();
    outlined destroy of Any?((uint64_t)v16);
  }
  v12 = objc_msgSend(v6, sel_standardUserDefaults, v15);
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v12, sel_setPersistentDomain_forName_, isa, v8);

  v14 = objc_msgSend(v6, sel_standardUserDefaults);
  objc_msgSend(v14, sel_synchronize);

}

uint64_t specialized static LACGlobalDomain.companionAuthentication.setter(uint64_t a1, unint64_t a2)
{
  void *v4;
  id v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v11;
  __int128 v12;

  if (a2 >> 60 == 15)
  {
    v11 = 0u;
    v12 = 0u;
  }
  else
  {
    *((_QWORD *)&v12 + 1) = MEMORY[0x24BDCDDE8];
    *(_QWORD *)&v11 = a1;
    *((_QWORD *)&v11 + 1) = a2;
  }
  v4 = (void *)objc_opt_self();
  outlined copy of Data?(a1, a2);
  v5 = objc_msgSend(v4, sel_sharedInstance, v11);
  v6 = objc_msgSend(v5, sel_flagOnenessSessionAuthenticationKey);

  v7 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v9 = v8;

  specialized static LACGlobalDomain.setObject(_:forKey:)((uint64_t)&v11, v7, v9);
  outlined consume of Data?(a1, a2);
  swift_bridgeObjectRelease();
  return outlined destroy of Any?((uint64_t)&v11);
}

uint64_t outlined destroy of Any?(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t specialized static LACGlobalDomain.isCompanionSessionActive.setter(void *a1, SEL *a2)
{
  void *v4;
  id v5;
  id v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v12;
  __int128 v13;

  if (a1)
  {
    *((_QWORD *)&v13 + 1) = type metadata accessor for LACDTOMutableLostModeFetchRequest(0, &lazy cache variable for type metadata for NSNumber);
    *(_QWORD *)&v12 = a1;
  }
  else
  {
    v12 = 0u;
    v13 = 0u;
  }
  v4 = (void *)objc_opt_self();
  v5 = a1;
  v6 = objc_msgSend(v4, sel_sharedInstance, (_QWORD)v12);
  v7 = objc_msgSend(v6, *a2);

  v8 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v10 = v9;

  specialized static LACGlobalDomain.setObject(_:forKey:)((uint64_t)&v12, v8, v10);
  swift_bridgeObjectRelease();

  return outlined destroy of Any?((uint64_t)&v12);
}

uint64_t type metadata accessor for LACGlobalDomain(uint64_t a1)
{
  return type metadata accessor for LACDTOMutableLostModeFetchRequest(a1, &lazy cache variable for type metadata for LACGlobalDomain);
}

uint64_t outlined init with copy of Any?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined copy of Data?(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15)
    return outlined copy of Data._Representation(a1, a2);
  return a1;
}

id LACOnenessSessionMonitor.isMonitoring.getter()
{
  return LACOnenessSessionMonitor.isMonitoring.getter((SEL *)&selRef_isMonitoring);
}

id @objc LACOnenessSessionMonitor.isMonitoring.getter(void *a1, uint64_t a2, SEL *a3)
{
  id v4;
  id v5;

  v4 = a1;
  v5 = objc_msgSend(objc_msgSend(v4, sel_model), *a3);

  swift_unknownObjectRelease();
  return v5;
}

id LACOnenessSessionMonitor.isSessionActive.getter()
{
  return LACOnenessSessionMonitor.isMonitoring.getter((SEL *)&selRef_isSessionActive);
}

id LACOnenessSessionMonitor.isMonitoring.getter(SEL *a1)
{
  void *v1;
  id v2;

  v2 = objc_msgSend(objc_msgSend(v1, sel_model), *a1);
  swift_unknownObjectRelease();
  return v2;
}

Swift::Void __swiftcall LACOnenessSessionMonitor.start()()
{
  LACOnenessSessionMonitor.start()((SEL *)&selRef_startMonitoring);
}

Swift::Void __swiftcall LACOnenessSessionMonitor.stop()()
{
  LACOnenessSessionMonitor.start()((SEL *)&selRef_stopMonitoring);
}

uint64_t LACOnenessSessionMonitor.start()(SEL *a1)
{
  void *v1;

  objc_msgSend(objc_msgSend(v1, sel_model), *a1);
  return swift_unknownObjectRelease();
}

uint64_t @objc LACOnenessSessionMonitor.start()(void *a1, uint64_t a2, SEL *a3)
{
  id v4;

  v4 = a1;
  objc_msgSend(objc_msgSend(v4, sel_model), *a3);

  return swift_unknownObjectRelease();
}

uint64_t LACOnenessSessionMonitor.add(_:)(uint64_t a1)
{
  return LACOnenessSessionMonitor.add(_:)(a1, (SEL *)&selRef_addObserver_);
}

uint64_t LACOnenessSessionMonitor.remove(_:)(uint64_t a1)
{
  return LACOnenessSessionMonitor.add(_:)(a1, (SEL *)&selRef_removeObserver_);
}

uint64_t LACOnenessSessionMonitor.add(_:)(uint64_t a1, SEL *a2)
{
  void *v2;

  objc_msgSend(objc_msgSend(v2, sel_model), *a2, a1);
  return swift_unknownObjectRelease();
}

uint64_t @objc LACOnenessSessionMonitor.add(_:)(void *a1, uint64_t a2, uint64_t a3, SEL *a4)
{
  id v7;

  swift_unknownObjectRetain();
  v7 = a1;
  objc_msgSend(objc_msgSend(v7, sel_model), *a4, a3);
  swift_unknownObjectRelease();

  return swift_unknownObjectRelease();
}

id LACOnenessSessionMonitor.makeModel()()
{
  void *v0;
  id v1;
  _QWORD *v2;
  id v3;
  _BYTE *v4;
  id v5;

  v1 = objc_msgSend(v0, sel_replyQueue);
  type metadata accessor for LACOnenessSessionProviderAKS();
  v2 = (_QWORD *)swift_allocObject();
  v2[2] = 0;
  v2[4] = 0;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CurrentValueSubject<Bool?, Never>);
  swift_allocObject();
  v2[5] = CurrentValueSubject.init(_:)();
  v2[3] = v1;
  swift_retain();
  v3 = objc_msgSend(v0, sel_replyQueue);
  v4 = objc_allocWithZone((Class)type metadata accessor for LACOnenessSessionMonitorModel());
  v5 = specialized LACOnenessSessionMonitorModel.init(sessionProvider:replyQueue:)((uint64_t)v2, v3, v4);
  swift_release();

  return v5;
}

id specialized LACOnenessSessionMonitorModel.init(sessionProvider:replyQueue:)(uint64_t a1, void *a2, _BYTE *a3)
{
  objc_class *ObjectType;
  void *v7;
  char *v8;
  id v9;
  id v10;
  id v11;
  objc_super v13;
  _QWORD v14[5];

  ObjectType = (objc_class *)swift_getObjectType();
  v14[3] = type metadata accessor for LACOnenessSessionProviderAKS();
  v14[4] = &protocol witness table for LACOnenessSessionProviderAKS;
  v14[0] = a1;
  a3[OBJC_IVAR____TtC23LocalAuthenticationCore29LACOnenessSessionMonitorModel__isOnenessActive] = 0;
  *(_QWORD *)&a3[OBJC_IVAR____TtC23LocalAuthenticationCore29LACOnenessSessionMonitorModel_sessionSubscription] = 0;
  v7 = (void *)objc_opt_self();
  v8 = a3;
  v9 = objc_msgSend(v7, sel_weakObjectsHashTable);
  *(_QWORD *)&v8[OBJC_IVAR____TtC23LocalAuthenticationCore29LACOnenessSessionMonitorModel_observers] = v9;
  outlined init with copy of LACOnenessSessionProviding((uint64_t)v14, (uint64_t)&v8[OBJC_IVAR____TtC23LocalAuthenticationCore29LACOnenessSessionMonitorModel_sessionProvider]);
  *(_QWORD *)&v8[OBJC_IVAR____TtC23LocalAuthenticationCore29LACOnenessSessionMonitorModel_replyQueue] = a2;
  v10 = a2;

  v13.receiver = v8;
  v13.super_class = ObjectType;
  v11 = objc_msgSendSuper2(&v13, sel_init);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v14);
  return v11;
}

uint64_t dispatch thunk of LACPreboardLaunching.launchPreboard()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t (*v7)(uint64_t, uint64_t);

  v7 = (uint64_t (*)(uint64_t, uint64_t))(**(int **)(a2 + 8) + *(_QWORD *)(a2 + 8));
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = dispatch thunk of LACUserDefaultsPersistentStore.removeObject(forKey:);
  return v7(a1, a2);
}

void LACEvaluationResult.resultWithAssociatedValue.getter(uint64_t a1@<X8>)
{
  void *v1;
  id v3;
  id v4;
  uint64_t v5;
  char v6;
  id v7;
  id v8;
  void *v9;

  v3 = objc_msgSend(v1, sel_rawValue);
  if (v3)
  {
    if (v3 == (id)1)
    {
      v4 = objc_msgSend(v1, sel_request);
      if (v4)
      {
        v5 = (uint64_t)v4;
        v6 = 2;
LABEL_10:
        *(_QWORD *)a1 = v5;
        *(_BYTE *)(a1 + 8) = v6;
        return;
      }
    }
    else if (v3 == (id)2)
    {
      v8 = objc_msgSend(v1, sel_value);
      if (v8)
      {
        v9 = v8;
        v5 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

        v6 = 0;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v7 = objc_msgSend(v1, sel_error);
    if (v7)
    {
      v5 = (uint64_t)v7;
      v6 = 1;
      goto LABEL_10;
    }
  }
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t initializeBufferWithCopyOfBuffer for LACEvaluationResultWithAssociatedValue(uint64_t a1, uint64_t a2)
{
  id v3;
  char v4;

  v3 = *(id *)a2;
  v4 = *(_BYTE *)(a2 + 8);
  outlined copy of LACEvaluationResultWithAssociatedValue(*(id *)a2, v4);
  *(_QWORD *)a1 = v3;
  *(_BYTE *)(a1 + 8) = v4;
  return a1;
}

id outlined copy of LACEvaluationResultWithAssociatedValue(id result, char a2)
{
  switch(a2)
  {
    case 2:
      return (id)swift_unknownObjectRetain();
    case 1:
      return result;
    case 0:
      return (id)swift_bridgeObjectRetain();
  }
  return result;
}

void destroy for LACEvaluationResultWithAssociatedValue(uint64_t a1)
{
  outlined consume of LACEvaluationResultWithAssociatedValue(*(void **)a1, *(_BYTE *)(a1 + 8));
}

uint64_t assignWithCopy for LACEvaluationResultWithAssociatedValue(uint64_t a1, uint64_t a2)
{
  id v3;
  char v4;
  void *v5;
  char v6;

  v3 = *(id *)a2;
  v4 = *(_BYTE *)(a2 + 8);
  outlined copy of LACEvaluationResultWithAssociatedValue(*(id *)a2, v4);
  v5 = *(void **)a1;
  *(_QWORD *)a1 = v3;
  v6 = *(_BYTE *)(a1 + 8);
  *(_BYTE *)(a1 + 8) = v4;
  outlined consume of LACEvaluationResultWithAssociatedValue(v5, v6);
  return a1;
}

uint64_t __swift_memcpy9_8(uint64_t result, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  *(_BYTE *)(result + 8) = *((_BYTE *)a2 + 8);
  *(_QWORD *)result = v2;
  return result;
}

uint64_t assignWithTake for LACEvaluationResultWithAssociatedValue(uint64_t a1, uint64_t a2)
{
  char v3;
  void *v4;
  char v5;

  v3 = *(_BYTE *)(a2 + 8);
  v4 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v5 = *(_BYTE *)(a1 + 8);
  *(_BYTE *)(a1 + 8) = v3;
  outlined consume of LACEvaluationResultWithAssociatedValue(v4, v5);
  return a1;
}

uint64_t getEnumTagSinglePayload for LACEvaluationResultWithAssociatedValue(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFE && *(_BYTE *)(a1 + 9))
    return (*(_DWORD *)a1 + 254);
  v3 = *(unsigned __int8 *)(a1 + 8);
  if (v3 <= 2)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for LACEvaluationResultWithAssociatedValue(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_BYTE *)(result + 8) = 0;
    *(_QWORD *)result = a2 - 254;
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 9) = 1;
  }
  else
  {
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 9) = 0;
    if (a2)
      *(_BYTE *)(result + 8) = -(char)a2;
  }
  return result;
}

uint64_t getEnumTag for LACEvaluationResultWithAssociatedValue(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 8);
}

uint64_t destructiveInjectEnumTag for LACEvaluationResultWithAssociatedValue(uint64_t result, char a2)
{
  *(_BYTE *)(result + 8) = a2;
  return result;
}

ValueMetadata *type metadata accessor for LACEvaluationResultWithAssociatedValue()
{
  return &type metadata for LACEvaluationResultWithAssociatedValue;
}

uint64_t LACACMContextProvider.externalizedContext.getter()
{
  uint64_t v0;
  id v1;
  void *v2;
  uint64_t v3;

  v1 = objc_msgSend(*(id *)(v0 + 16), sel_externalizedContext);
  if (!v1)
    return 0;
  v2 = v1;
  v3 = static Data._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

uint64_t LACACMContextProvider.__allocating_init()()
{
  uint64_t v0;
  id v1;

  v0 = swift_allocObject();
  v1 = objc_msgSend(objc_allocWithZone((Class)LACACMHelper), sel_initAndCreateContext);
  if (v1)
  {
    *(_QWORD *)(v0 + 16) = v1;
  }
  else
  {
    swift_deallocPartialClassInstance();
    return 0;
  }
  return v0;
}

uint64_t LACACMContextProvider.init()()
{
  uint64_t v0;
  id v1;

  v1 = objc_msgSend(objc_allocWithZone((Class)LACACMHelper), sel_initAndCreateContext);
  if (v1)
  {
    *(_QWORD *)(v0 + 16) = v1;
  }
  else
  {
    type metadata accessor for LACACMContextProvider();
    swift_deallocPartialClassInstance();
    return 0;
  }
  return v0;
}

uint64_t type metadata accessor for LACACMContextProvider()
{
  return objc_opt_self();
}

uint64_t LACACMContextProvider.deinit()
{
  uint64_t v0;

  return v0;
}

uint64_t LACACMContextProvider.__deallocating_deinit()
{
  uint64_t v0;

  return swift_deallocClassInstance();
}

uint64_t protocol witness for LACACMContextProviding.externalizedContext.getter in conformance LACACMContextProvider()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 88))();
}

uint64_t dispatch thunk of LACACMContextProviding.externalizedContext.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t method lookup function for LACACMContextProvider()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of LACACMContextProvider.externalizedContext.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 88))();
}

uint64_t dispatch thunk of LACACMContextProvider.__allocating_init()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 96))();
}

uint64_t dispatch thunk of LACPreboardUseCaseProviding.preboardUseCase.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of LACPreboardUseCaseProviding.completeCurrentUseCase(success:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v7;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);

  v9 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(**(int **)(a3 + 16) + *(_QWORD *)(a3 + 16));
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v7;
  *v7 = v3;
  v7[1] = dispatch thunk of LACUserDefaultsPersistentStore.removeObject(forKey:);
  return v9(a1, a2, a3);
}

uint64_t LACOnenessSessionProviderDummy.isSessionActive.getter()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  id v13;
  id v15;
  uint64_t v16;

  v1 = v0;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for OS_dispatch_queue.SchedulerOptions?);
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)&v15 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.ReceiveOn<Publishers.Share<CurrentValueSubject<Bool, Never>>, OS_dispatch_queue>);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (v0[2])
  {
    v9 = v0[2];
  }
  else
  {
    v16 = v0[4];
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CurrentValueSubject<Bool, Never>);
    lazy protocol witness table accessor for type CurrentValueSubject<Bool?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type CurrentValueSubject<Bool, Never> and conformance CurrentValueSubject<A, B>, &demangling cache variable for type metadata for CurrentValueSubject<Bool, Never>, MEMORY[0x24BDB9D10]);
    v10 = Publisher.share()();
    v15 = (id)v0[3];
    v11 = v15;
    v16 = v10;
    v12 = type metadata accessor for OS_dispatch_queue.SchedulerOptions();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v4, 1, 1, v12);
    v13 = v11;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.Share<CurrentValueSubject<Bool, Never>>);
    type metadata accessor for OS_dispatch_queue();
    lazy protocol witness table accessor for type CurrentValueSubject<Bool?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type Publishers.Share<CurrentValueSubject<Bool, Never>> and conformance Publishers.Share<A>, &demangling cache variable for type metadata for Publishers.Share<CurrentValueSubject<Bool, Never>>, MEMORY[0x24BDB97C8]);
    lazy protocol witness table accessor for type OS_dispatch_queue and conformance OS_dispatch_queue();
    Publisher.receive<A>(on:options:)();
    outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)v4);

    swift_release();
    lazy protocol witness table accessor for type CurrentValueSubject<Bool?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type Publishers.ReceiveOn<Publishers.Share<CurrentValueSubject<Bool, Never>>, OS_dispatch_queue> and conformance Publishers.ReceiveOn<A, B>, &demangling cache variable for type metadata for Publishers.ReceiveOn<Publishers.Share<CurrentValueSubject<Bool, Never>>, OS_dispatch_queue>, MEMORY[0x24BDB9A08]);
    v9 = Publisher.eraseToAnyPublisher()();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    v1[2] = v9;
    swift_retain();
    swift_release();
  }
  swift_retain();
  return v9;
}

unint64_t lazy protocol witness table accessor for type OS_dispatch_queue and conformance OS_dispatch_queue()
{
  unint64_t result;
  unint64_t v1;

  result = lazy protocol witness table cache variable for type OS_dispatch_queue and conformance OS_dispatch_queue;
  if (!lazy protocol witness table cache variable for type OS_dispatch_queue and conformance OS_dispatch_queue)
  {
    v1 = type metadata accessor for OS_dispatch_queue();
    result = MEMORY[0x242687614](MEMORY[0x24BEE5670], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type OS_dispatch_queue and conformance OS_dispatch_queue);
  }
  return result;
}

uint64_t LACOnenessSessionProviderDummy.isSessionActive.setter(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = a1;
  return swift_release();
}

uint64_t (*LACOnenessSessionProviderDummy.isSessionActive.modify(uint64_t *a1))(_QWORD *a1)
{
  uint64_t v1;

  a1[1] = v1;
  *a1 = LACOnenessSessionProviderDummy.isSessionActive.getter();
  return LACOnenessSessionProviderAKS.isSessionActive.modify;
}

_QWORD *LACOnenessSessionProviderDummy.__allocating_init(replyQueue:)(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;

  v2 = (_QWORD *)swift_allocObject();
  v2[2] = 0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CurrentValueSubject<Bool, Never>);
  swift_allocObject();
  v3 = CurrentValueSubject.init(_:)();
  v2[3] = a1;
  v2[4] = v3;
  return v2;
}

_QWORD *LACOnenessSessionProviderDummy.init(replyQueue:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v3;

  v1[2] = 0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CurrentValueSubject<Bool, Never>);
  swift_allocObject();
  v3 = CurrentValueSubject.init(_:)();
  v1[3] = a1;
  v1[4] = v3;
  return v1;
}

uint64_t LACOnenessSessionProviderDummy.deinit()
{
  uint64_t v0;

  swift_release();

  swift_release();
  return v0;
}

uint64_t LACOnenessSessionProviderDummy.__deallocating_deinit()
{
  uint64_t v0;

  swift_release();

  swift_release();
  return swift_deallocClassInstance();
}

uint64_t protocol witness for LACOnenessSessionProviding.isSessionActive.getter in conformance LACOnenessSessionProviderDummy()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 104))();
}

uint64_t sub_240A3D498@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 104))();
  *a2 = result;
  return result;
}

uint64_t sub_240A3D4C8(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(uint64_t);
  uint64_t v3;

  v2 = *(uint64_t (**)(uint64_t))(**(_QWORD **)a2 + 112);
  v3 = swift_retain();
  return v2(v3);
}

uint64_t type metadata accessor for LACOnenessSessionProviderDummy()
{
  return objc_opt_self();
}

uint64_t method lookup function for LACOnenessSessionProviderDummy()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of LACOnenessSessionProviderDummy.isSessionActive.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 104))();
}

uint64_t dispatch thunk of LACOnenessSessionProviderDummy.isSessionActive.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 112))();
}

uint64_t dispatch thunk of LACOnenessSessionProviderDummy.isSessionActive.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 120))();
}

uint64_t dispatch thunk of LACOnenessSessionProviderDummy.__allocating_init(replyQueue:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 152))();
}

void thunk for @escaping @callee_unowned @convention(block) (@unowned NSDictionary?, @unowned NSError?) -> ()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  NSDictionary v5;
  uint64_t v6;
  id v7;

  if (!a1)
  {
    v5.super.isa = 0;
    if (a2)
      goto LABEL_3;
LABEL_5:
    v6 = 0;
    goto LABEL_6;
  }
  v5.super.isa = Dictionary._bridgeToObjectiveC()().super.isa;
  if (!a2)
    goto LABEL_5;
LABEL_3:
  v6 = _convertErrorToNSError(_:)();
LABEL_6:
  v7 = (id)v6;
  (*(void (**)(uint64_t, Class))(a3 + 16))(a3, v5.super.isa);

}

uint64_t thunk for @escaping @callee_guaranteed (@unowned LACEvaluationRequest, @unowned LACEvaluationResult, @unowned @escaping @callee_unowned @convention(block) (@unowned LACEvaluationResult) -> ()) -> ()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t, uint64_t, void *))
{
  void *v8;
  _QWORD v10[6];

  v10[4] = a3;
  v10[5] = a4;
  v10[0] = MEMORY[0x24BDAC760];
  v10[1] = 1107296256;
  v10[2] = thunk for @escaping @callee_guaranteed (@guaranteed LACDTOLocationState) -> ();
  v10[3] = &block_descriptor_25;
  v8 = _Block_copy(v10);
  swift_retain();
  a5(a1, a2, v8);
  _Block_release(v8);
  return swift_release();
}

id LACOnenessController.isSessionActive.getter()
{
  void *v0;
  id v1;

  v1 = objc_msgSend(objc_msgSend(v0, sel_model), sel_isSessionActive);
  swift_unknownObjectRelease();
  return v1;
}

uint64_t LACOnenessController.domainState(for:completion:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v3;
  id v7;
  void *v8;
  _QWORD v10[6];

  v7 = objc_msgSend(v3, sel_model);
  v10[4] = a2;
  v10[5] = a3;
  v10[0] = MEMORY[0x24BDAC760];
  v10[1] = 1107296256;
  v10[2] = thunk for @escaping @callee_guaranteed (@guaranteed [AnyHashable : Any]?, @guaranteed Error?) -> ();
  v10[3] = &block_descriptor_8;
  v8 = _Block_copy(v10);
  swift_retain();
  swift_release();
  objc_msgSend(v7, sel_domainStateForRequest_completion_, a1, v8);
  _Block_release(v8);
  return swift_unknownObjectRelease();
}

uint64_t block_copy_helper_6(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_6()
{
  return swift_release();
}

id LACOnenessController.canProcessRequest(_:)(uint64_t a1)
{
  void *v1;
  id v2;

  v2 = objc_msgSend(objc_msgSend(v1, sel_model), sel_canProcessRequest_, a1);
  swift_unknownObjectRelease();
  return v2;
}

uint64_t LACOnenessController.processRequest(_:configuration:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void *v4;
  id v9;
  void *v10;
  _QWORD v12[6];

  v9 = objc_msgSend(v4, sel_model);
  v12[4] = a3;
  v12[5] = a4;
  v12[0] = MEMORY[0x24BDAC760];
  v12[1] = 1107296256;
  v12[2] = thunk for @escaping @callee_guaranteed (@guaranteed LACDTOLocationState) -> ();
  v12[3] = &block_descriptor_3_1;
  v10 = _Block_copy(v12);
  swift_retain();
  swift_release();
  objc_msgSend(v9, sel_processRequest_configuration_completion_, a1, a2, v10);
  _Block_release(v10);
  return swift_unknownObjectRelease();
}

uint64_t LACOnenessController.postProcessRequest(_:result:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void *v4;
  void *v5;
  id v10;
  void *v11;
  _QWORD v13[6];

  v5 = v4;
  v10 = objc_msgSend(v5, sel_model);
  if ((objc_msgSend(v10, sel_respondsToSelector_, sel_postProcessRequest_result_completion_) & 1) == 0)
    return swift_unknownObjectRelease();
  v13[4] = a3;
  v13[5] = a4;
  v13[0] = MEMORY[0x24BDAC760];
  v13[1] = 1107296256;
  v13[2] = thunk for @escaping @callee_guaranteed (@guaranteed LACDTOLocationState) -> ();
  v13[3] = &block_descriptor_6_0;
  v11 = _Block_copy(v13);
  swift_retain();
  objc_msgSend(v10, sel_postProcessRequest_result_completion_, a1, a2, v11);
  _Block_release(v11);
  swift_unknownObjectRelease();
  return swift_release();
}

Swift::Void __swiftcall LACOnenessController.cancelAllRequests()()
{
  void *v0;

  objc_msgSend(objc_msgSend(v0, sel_model), sel_cancelAllRequests);
  swift_unknownObjectRelease();
}

void LACOnenessController.cancelRequests(forContextID:)()
{
  void *v0;
  id v1;
  Class isa;

  v1 = objc_msgSend(v0, sel_model);
  isa = UUID._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v1, sel_cancelRequestsForContextID_, isa);
  swift_unknownObjectRelease();

}

id LACOnenessController.makeModel()()
{
  void *v0;
  id v1;
  id v2;
  id v3;
  id v4;
  id v5;

  v1 = objc_msgSend(v0, sel_authenticator);
  v2 = objc_msgSend(v0, sel_sessionMonitor);
  v3 = objc_msgSend(v0, sel_uiPresenter);
  v4 = objc_msgSend(v0, sel_replyQueue);
  v5 = objc_allocWithZone((Class)type metadata accessor for LACOnenessControllerModel());
  return LACOnenessControllerModel.init(authenticator:sessionMonitor:uiPresenter:replyQueue:)((uint64_t)v1, (uint64_t)v2, (uint64_t)v3, v4);
}

uint64_t sub_240A3E218()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject();
}

uint64_t static LACLogger.abm.getter()
{
  id v0;

  v0 = LACLogABM();
  return Logger.init(_:)();
}

Swift::Void __swiftcall LACLogger.log(_:)(Swift::String a1)
{
  char v1;

  v1 = 2;
  LACLogger.log(level:_:)((LocalAuthenticationCore::LACLogger::Level)&v1, a1);
}

uint64_t static LACLogger.preboard.getter()
{
  id v0;

  v0 = LACLogPreboard();
  return Logger.init(_:)();
}

Swift::Void __swiftcall LACLogger.error(_:)(Swift::String a1)
{
  char v1;

  v1 = 3;
  LACLogger.log(level:_:)((LocalAuthenticationCore::LACLogger::Level)&v1, a1);
}

uint64_t static LACLogger.dtoEnvironment.getter()
{
  id v0;

  v0 = LACLogDTOEnvironment();
  return Logger.init(_:)();
}

Swift::Void __swiftcall LACLogger.log(level:_:)(LocalAuthenticationCore::LACLogger::Level level, Swift::String _)
{
  uint64_t v2;
  unsigned __int8 *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v3 = (unsigned __int8 *)level;
  v4 = type metadata accessor for Logger();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = *v3;
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))((char *)&v8 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v2, v4);
  __asm { BR              X9 }
}

uint64_t sub_240A3E3F0()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  os_log_type_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v6 = static os_log_type_t.debug.getter();
  swift_bridgeObjectRetain_n();
  v7 = Logger.logObject.getter();
  v8 = v6;
  if (os_log_type_enabled(v7, v6))
  {
    v9 = (uint8_t *)swift_slowAlloc();
    v10 = swift_slowAlloc();
    *(_QWORD *)(v5 - 104) = v0;
    v11 = v4;
    v12 = v10;
    *(_QWORD *)(v5 - 88) = v10;
    *(_DWORD *)v9 = 136315138;
    swift_bridgeObjectRetain();
    *(_QWORD *)(v5 - 96) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v11, v2, (uint64_t *)(v5 - 88));
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_2409DC000, v7, v8, "%s", v9, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x2426876B0](v12, -1, -1);
    MEMORY[0x2426876B0](v9, -1, -1);

    return (*(uint64_t (**)(uint64_t, _QWORD))(v3 + 8))(v1, *(_QWORD *)(v5 - 104));
  }
  else
  {

    swift_bridgeObjectRelease_n();
    return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(v1, v0);
  }
}

Swift::Void __swiftcall LACLogger.info(_:)(Swift::String a1)
{
  char v1;

  v1 = 1;
  LACLogger.log(level:_:)((LocalAuthenticationCore::LACLogger::Level)&v1, a1);
}

Swift::Void __swiftcall LACLogger.debug(_:)(Swift::String a1)
{
  char v1;

  v1 = 0;
  LACLogger.log(level:_:)((LocalAuthenticationCore::LACLogger::Level)&v1, a1);
}

uint64_t static LACLogger.default.getter()
{
  id v0;

  v0 = LACLogDefault();
  return Logger.init(_:)();
}

uint64_t static LACLogger.ui.getter()
{
  id v0;

  v0 = LACLogUI();
  return Logger.init(_:)();
}

uint64_t static LACLogger.processor.getter()
{
  id v0;

  v0 = LACLogProcessor();
  return Logger.init(_:)();
}

uint64_t static LACLogger.dtoUI.getter()
{
  id v0;

  v0 = LACLogDTOUI();
  return Logger.init(_:)();
}

uint64_t static LACLogger.dtoEvaluation.getter()
{
  id v0;

  v0 = LACLogDTOEvaluation();
  return Logger.init(_:)();
}

BOOL static LACLogger.Level.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

void LACLogger.Level.hash(into:)()
{
  unsigned __int8 *v0;

  Hasher._combine(_:)(*v0);
}

Swift::Int LACLogger.Level.hashValue.getter()
{
  unsigned __int8 *v0;
  Swift::UInt v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t serialize(_:at:)(uint64_t result, _BYTE **a2)
{
  _BYTE *v2;

  v2 = *a2;
  *v2 = result;
  *a2 = v2 + 1;
  return result;
}

uint64_t closure #1 in osLogInternal(_:log:type:)(uint64_t (**a1)(uint64_t, uint64_t, uint64_t), uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*a1)(a2, a3, a4);
}

uint64_t implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t closure #1 in OSLogArguments.append(_:)(uint64_t *a1, uint64_t a2, uint64_t *a3, uint64_t (*a4)(void))
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t result;

  v6 = a4();
  getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v6, v7, a3);
  v8 = *a1 + 8;
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  result = swift_bridgeObjectRelease();
  *a1 = v8;
  return result;
}

uint64_t getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12[3];
  uint64_t ObjectType;

  v6 = specialized _StringGuts._deconstructUTF8<A>(scratch:)(v12, 0, 0, 1, a1, a2);
  v7 = v12[0];
  if (v6)
  {
    v8 = v6;
    ObjectType = swift_getObjectType();
    v12[0] = v8;
    v9 = *a3;
    if (*a3)
    {
      outlined init with copy of Any((uint64_t)v12, *a3);
      *a3 = v9 + 32;
    }
  }
  else
  {
    ObjectType = MEMORY[0x24BEE2520];
    v12[0] = a1;
    v12[1] = a2;
    v10 = *a3;
    if (*a3)
    {
      outlined init with copy of Any((uint64_t)v12, *a3);
      *a3 = v10 + 32;
    }
    swift_bridgeObjectRetain();
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v12);
  return v7;
}

uint64_t specialized _StringGuts._deconstructUTF8<A>(scratch:)(uint64_t *a1, char *__dst, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  uint64_t v8;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  _QWORD __src[2];

  if ((a6 & 0x2000000000000000) != 0)
  {
    if ((a4 & 1) == 0)
    {
      if (__dst)
      {
        v11 = HIBYTE(a6) & 0xF;
        if (a3 - (uint64_t)__dst > v11)
        {
          __src[0] = a5;
          __src[1] = a6 & 0xFFFFFFFFFFFFFFLL;
          if (__src >= (_QWORD *)&__dst[v11] || (char *)__src + v11 <= __dst)
          {
            memcpy(__dst, __src, HIBYTE(a6) & 0xF);
            UnsafeMutableRawBufferPointer.subscript.setter();
            result = 0;
            *a1 = (uint64_t)__dst;
            return result;
          }
          goto LABEL_17;
        }
      }
    }
LABEL_13:
    result = _StringGuts._allocateForDeconstruct()(a5, a6);
    *a1 = v12;
    return result;
  }
  if ((a6 & 0x1000000000000000) != 0)
    goto LABEL_13;
  if ((a5 & 0x1000000000000000) != 0)
  {
    v8 = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
    goto LABEL_5;
  }
  v8 = _StringObject.sharedUTF8.getter();
  if (!v8)
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
LABEL_17:
    result = _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
LABEL_5:
  *a1 = v8;
  if ((a6 & 0x8000000000000000) != 0)
    return 0;
  else
    return swift_unknownObjectRetain();
}

uint64_t _StringGuts._allocateForDeconstruct()(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;

  v2 = specialized _copyCollectionToContiguousArray<A>(_:)(a1, a2);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v2 + 16) + 1, 1, (char *)v2);
  v4 = *(_QWORD *)(v2 + 16);
  v3 = *(_QWORD *)(v2 + 24);
  if (v4 >= v3 >> 1)
    v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v3 > 1, v4 + 1, 1, (char *)v2);
  *(_QWORD *)(v2 + 16) = v4 + 1;
  *(_BYTE *)(v2 + 32 + v4) = 0;
  return v2;
}

uint64_t specialized _copyCollectionToContiguousArray<A>(_:)(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  char v6;
  uint64_t result;

  if ((a2 & 0x1000000000000000) != 0)
    goto LABEL_10;
  if ((a2 & 0x2000000000000000) != 0)
    v2 = HIBYTE(a2) & 0xF;
  else
    v2 = a1 & 0xFFFFFFFFFFFFLL;
  if (v2)
  {
    while (1)
    {
      v3 = specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(v2, 0);
      if (v2 < 0)
        break;
      v4 = v3;
      v5 = _StringGuts.copyUTF8(into:)();
      if ((v6 & 1) != 0)
        goto LABEL_14;
      if (v5 == v2)
        return (uint64_t)v4;
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
LABEL_10:
      v2 = String.UTF8View._foreignCount()();
      if (!v2)
        return MEMORY[0x24BEE4AF8];
    }
    _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
LABEL_14:
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    return MEMORY[0x24BEE4AF8];
  }
  return result;
}

uint64_t specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * v11 - 64;
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[v8])
      memmove(v12, v13, v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[v8] || v12 >= &v13[v8])
  {
    memcpy(v12, v13, v8);
LABEL_28:
    swift_bridgeObjectRelease();
    return (uint64_t)v10;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

_BYTE **closure #1 in OSLogArguments.append(_:)(_BYTE **result, uint64_t a2, uint64_t a3, char a4)
{
  _BYTE *v4;

  v4 = *result;
  *v4 = a4;
  *result = v4 + 1;
  return result;
}

unint64_t lazy protocol witness table accessor for type LACLogger.Level and conformance LACLogger.Level()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type LACLogger.Level and conformance LACLogger.Level;
  if (!lazy protocol witness table cache variable for type LACLogger.Level and conformance LACLogger.Level)
  {
    result = MEMORY[0x242687614](&protocol conformance descriptor for LACLogger.Level, &type metadata for LACLogger.Level);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LACLogger.Level and conformance LACLogger.Level);
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for LACLogger(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for Logger();
  return (**(uint64_t (***)(uint64_t, uint64_t, uint64_t))(v4 - 8))(a1, a2, v4);
}

uint64_t destroy for LACLogger(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for Logger();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
}

uint64_t initializeWithCopy for LACLogger(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for Logger();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, a2, v4);
  return a1;
}

uint64_t assignWithCopy for LACLogger(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for Logger();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 24))(a1, a2, v4);
  return a1;
}

uint64_t initializeWithTake for LACLogger(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for Logger();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a1, a2, v4);
  return a1;
}

uint64_t assignWithTake for LACLogger(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for Logger();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a1, a2, v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for LACLogger()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_240A3EFB4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for Logger();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for LACLogger()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_240A3EFFC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for Logger();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, a2, v4);
}

uint64_t type metadata accessor for LACLogger()
{
  uint64_t result;

  result = type metadata singleton initialization cache for LACLogger;
  if (!type metadata singleton initialization cache for LACLogger)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t type metadata completion function for LACLogger()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for Logger();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for LACLogger.Level(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_240A3F12C + 4 * byte_240A7D5E9[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_240A3F160 + 4 * byte_240A7D5E4[v4]))();
}

uint64_t sub_240A3F160(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_240A3F168(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x240A3F170);
  return result;
}

uint64_t sub_240A3F17C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x240A3F184);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_240A3F188(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_240A3F190(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for LACLogger.Level()
{
  return &type metadata for LACLogger.Level;
}

uint64_t _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = type metadata accessor for TaskPriority();
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, 1, v6) != 1)
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
    if (!*(_QWORD *)(a3 + 16))
      goto LABEL_5;
    goto LABEL_3;
  }
  outlined destroy of TaskPriority?(a1);
  if (*(_QWORD *)(a3 + 16))
  {
LABEL_3:
    swift_getObjectType();
    swift_unknownObjectRetain();
    dispatch thunk of Actor.unownedExecutor.getter();
    swift_unknownObjectRelease();
  }
LABEL_5:
  v8 = swift_allocObject();
  *(_QWORD *)(v8 + 16) = a2;
  *(_QWORD *)(v8 + 24) = a3;
  return swift_task_create();
}

uint64_t LACRatchetFlowManager.showCoolOffSheet(options:presentationCompletion:sheetCompletion:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)&v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(v7, 1, 1, v8);
  v9 = swift_allocObject();
  swift_unknownObjectWeakInit();
  v10 = swift_allocObject();
  *(_QWORD *)(v10 + 16) = 0;
  *(_QWORD *)(v10 + 24) = 0;
  *(_QWORD *)(v10 + 32) = v9;
  *(_OWORD *)(v10 + 40) = xmmword_240A7D340;
  *(_QWORD *)(v10 + 56) = a2;
  *(_QWORD *)(v10 + 64) = a3;
  outlined copy of (@escaping @callee_guaranteed (@guaranteed Error?) -> ())?(a2);
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v7, (uint64_t)&async function pointer to partial apply for closure #1 in LACRatchetFlowManager.transition(to:with:style:completion:), v10);
  return swift_release();
}

uint64_t sub_240A3F404()
{
  swift_unknownObjectWeakDestroy();
  return swift_deallocObject();
}

void thunk for @escaping @callee_unowned @convention(block) (@unowned NSError?) -> ()(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  id v4;

  if (a1)
    v3 = _convertErrorToNSError(_:)();
  else
    v3 = 0;
  v4 = (id)v3;
  (*(void (**)(uint64_t))(a2 + 16))(a2);

}

uint64_t LACRatchetFlowManager.dismiss(completion:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v11;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v6, 1, 1, v7);
  v8 = swift_allocObject();
  swift_unknownObjectWeakInit();
  v9 = (_QWORD *)swift_allocObject();
  v9[2] = 0;
  v9[3] = 0;
  v9[4] = v8;
  v9[5] = a1;
  v9[6] = a2;
  outlined copy of (@escaping @callee_guaranteed (@guaranteed Error?) -> ())?(a1);
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v6, (uint64_t)&async function pointer to partial apply for closure #1 in LACRatchetFlowManager.dismiss(completion:), (uint64_t)v9);
  return swift_release();
}

uint64_t closure #1 in LACRatchetFlowManager.dismiss(completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;

  v6[6] = a5;
  v6[7] = a6;
  v6[5] = a4;
  return swift_task_switch();
}

uint64_t closure #1 in LACRatchetFlowManager.dismiss(completion:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  void (*v6)(_QWORD);

  v1 = *(_QWORD *)(v0 + 40) + 16;
  swift_beginAccess();
  v2 = MEMORY[0x242687740](v1);
  *(_QWORD *)(v0 + 64) = v2;
  if (v2)
  {
    v3 = v2;
    v4 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 72) = v4;
    *v4 = v0;
    v4[1] = closure #1 in LACRatchetFlowManager.dismiss(completion:);
    v4[23] = v3;
    return swift_task_switch();
  }
  else
  {
    v6 = *(void (**)(_QWORD))(v0 + 48);
    if (v6)
      v6(0);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(*v1 + 80) = v0;
  swift_task_dealloc();
  if (!v0)

  return swift_task_switch();
}

{
  uint64_t v0;
  void (*v1)(_QWORD);

  v1 = *(void (**)(_QWORD))(v0 + 48);
  if (v1)
    v1(0);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  void (*v3)(void *);
  id v4;

  v1 = *(_QWORD *)(v0 + 48);

  v2 = *(void **)(v0 + 80);
  if (v1)
  {
    v3 = *(void (**)(void *))(v0 + 48);
    v4 = v2;
    v3(v2);

  }
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t LACRatchetFlowManager.dismiss()()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 184) = v0;
  return swift_task_switch();
}

{
  uint64_t v0;
  id v1;
  unsigned int v2;
  id v3;
  void *v4;
  id v5;
  void *v6;
  Class isa;

  v1 = objc_msgSend(*(id *)(v0 + 184), sel_presenter);
  if (v1)
  {
    v2 = objc_msgSend(v1, sel_isPresented);
    swift_unknownObjectRelease();
    if (v2)
    {
      v3 = objc_msgSend(*(id *)(v0 + 184), sel_presenter);
      *(_QWORD *)(v0 + 192) = v3;
      if (v3)
      {
        v4 = v3;
        *(_QWORD *)(v0 + 80) = v0;
        *(_QWORD *)(v0 + 88) = LACRatchetFlowManager.dismiss();
        *(_QWORD *)(v0 + 176) = swift_continuation_init();
        *(_QWORD *)(v0 + 144) = MEMORY[0x24BDAC760];
        *(_QWORD *)(v0 + 152) = 0x40000000;
        *(_QWORD *)(v0 + 160) = @objc completion handler block implementation for <A><A1>@escaping @callee_unowned @convention(block) (@unowned NSError?) -> () with result type ();
        *(_QWORD *)(v0 + 168) = &block_descriptor_34;
        objc_msgSend(v4, sel_dismissAnimated_completion_, 1, v0 + 144);
        return swift_continuation_await();
      }
      v5 = objc_msgSend(*(id *)(v0 + 184), sel_uiManager);
      *(_QWORD *)(v0 + 208) = v5;
      if (v5)
      {
        v6 = v5;
        specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
        isa = Dictionary._bridgeToObjectiveC()().super.isa;
        *(_QWORD *)(v0 + 216) = isa;
        swift_bridgeObjectRelease();
        *(_QWORD *)(v0 + 16) = v0;
        *(_QWORD *)(v0 + 24) = LACRatchetFlowManager.dismiss();
        *(_QWORD *)(v0 + 176) = swift_continuation_init();
        *(_QWORD *)(v0 + 144) = MEMORY[0x24BDAC760];
        *(_QWORD *)(v0 + 152) = 0x40000000;
        *(_QWORD *)(v0 + 160) = @objc completion handler block implementation for <A><A1>@escaping @callee_unowned @convention(block) (@unowned NSError?) -> () with result type ();
        *(_QWORD *)(v0 + 168) = &block_descriptor_9;
        objc_msgSend(v6, sel_transitionToState_withOptions_completion_, 0, isa, v0 + 144);
        return swift_continuation_await();
      }
    }
  }
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;

  *(_QWORD *)(*(_QWORD *)v0 + 200) = *(_QWORD *)(*(_QWORD *)v0 + 112);
  return swift_task_switch();
}

{
  uint64_t v0;
  id v1;
  Class isa;
  uint64_t v3;
  _QWORD *v4;

  swift_unknownObjectRelease();
  v1 = objc_msgSend(*(id *)(v0 + 184), sel_uiManager);
  *(_QWORD *)(v0 + 208) = v1;
  if (!v1)
    return (*(uint64_t (**)(void))(v0 + 8))();
  specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  *(_QWORD *)(v0 + 216) = isa;
  swift_bridgeObjectRelease();
  *(_QWORD *)(v0 + 16) = v0;
  *(_QWORD *)(v0 + 24) = LACRatchetFlowManager.dismiss();
  v3 = swift_continuation_init();
  *(_QWORD *)(v0 + 144) = MEMORY[0x24BDAC760];
  v4 = (_QWORD *)(v0 + 144);
  v4[1] = 0x40000000;
  v4[2] = @objc completion handler block implementation for <A><A1>@escaping @callee_unowned @convention(block) (@unowned NSError?) -> () with result type ();
  v4[3] = &block_descriptor_9;
  v4[4] = v3;
  objc_msgSend(v1, sel_transitionToState_withOptions_completion_, 0, isa, v4);
  return swift_continuation_await();
}

{
  uint64_t v0;

  *(_QWORD *)(*(_QWORD *)v0 + 224) = *(_QWORD *)(*(_QWORD *)v0 + 48);
  return swift_task_switch();
}

{
  uint64_t v0;
  void *v1;

  v1 = *(void **)(v0 + 216);
  swift_unknownObjectRelease();

  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;

  swift_willThrow();
  swift_unknownObjectRelease();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  void *v1;

  v1 = *(void **)(v0 + 216);
  swift_willThrow();

  swift_unknownObjectRelease();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t closure #1 in LACRatchetFlowManager.transition(to:with:style:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;

  v8[8] = a7;
  v8[9] = a8;
  v8[6] = a5;
  v8[7] = a6;
  v8[5] = a4;
  return swift_task_switch();
}

uint64_t closure #1 in LACRatchetFlowManager.transition(to:with:style:completion:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  void (*v8)(_QWORD);

  v1 = *(_QWORD *)(v0 + 40) + 16;
  swift_beginAccess();
  v2 = MEMORY[0x242687740](v1);
  *(_QWORD *)(v0 + 80) = v2;
  if (v2)
  {
    v3 = v2;
    v4 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
    *(_QWORD *)(v0 + 88) = v4;
    v5 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 96) = v5;
    *v5 = v0;
    v5[1] = closure #1 in LACRatchetFlowManager.transition(to:with:style:completion:);
    v6 = *(_QWORD *)(v0 + 48);
    v5[57] = *(_QWORD *)(v0 + 56);
    v5[58] = v3;
    v5[55] = v6;
    v5[56] = v4;
    return swift_task_switch();
  }
  else
  {
    v8 = *(void (**)(_QWORD))(v0 + 64);
    if (v8)
      v8(0);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void *v3;

  v2 = *v1;
  *(_QWORD *)(*v1 + 104) = v0;
  swift_task_dealloc();
  if (!v0)
  {
    v3 = *(void **)(v2 + 80);
    swift_bridgeObjectRelease();

  }
  return swift_task_switch();
}

{
  uint64_t v0;
  void (*v1)(_QWORD);

  v1 = *(void (**)(_QWORD))(v0 + 64);
  if (v1)
    v1(0);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  void *v3;
  void (*v4)(void *);
  id v5;

  v1 = *(void **)(v0 + 80);
  v2 = *(_QWORD *)(v0 + 64);
  swift_bridgeObjectRelease();

  v3 = *(void **)(v0 + 104);
  if (v2)
  {
    v4 = *(void (**)(void *))(v0 + 64);
    v5 = v3;
    v4(v3);

  }
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t partial apply for closure #1 in LACRatchetFlowManager.transition(to:with:style:completion:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  __int128 v5;
  __int128 v6;

  v5 = *(_OWORD *)(v0 + 48);
  v6 = *(_OWORD *)(v0 + 32);
  v2 = *(_QWORD *)(v0 + 64);
  v3 = swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v3;
  *(_QWORD *)v3 = v1;
  *(_QWORD *)(v3 + 8) = dispatch thunk of LACUserDefaultsPersistentStore.setData(_:forKey:);
  *(_QWORD *)(v3 + 72) = v2;
  *(_OWORD *)(v3 + 56) = v5;
  *(_OWORD *)(v3 + 40) = v6;
  return swift_task_switch();
}

uint64_t outlined copy of (@escaping @callee_guaranteed (@guaranteed Error?) -> ())?(uint64_t result)
{
  if (result)
    return swift_retain();
  return result;
}

uint64_t partial apply for closure #1 in LACRatchetFlowManager.dismiss(completion:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  __int128 v5;

  v5 = *(_OWORD *)(v0 + 32);
  v2 = *(_QWORD *)(v0 + 48);
  v3 = swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v3;
  *(_QWORD *)v3 = v1;
  *(_QWORD *)(v3 + 8) = dispatch thunk of LACUserDefaultsPersistentStore.setData(_:forKey:);
  *(_QWORD *)(v3 + 56) = v2;
  *(_OWORD *)(v3 + 40) = v5;
  return swift_task_switch();
}

uint64_t objectdestroy_7Tm_0()
{
  uint64_t v0;

  swift_unknownObjectRelease();
  swift_release();
  if (*(_QWORD *)(v0 + 40))
    swift_release();
  return swift_deallocObject();
}

uint64_t sub_240A40240()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject();
}

void partial apply for thunk for @escaping @callee_unowned @convention(block) (@unowned NSError?) -> ()(uint64_t a1)
{
  uint64_t v1;

  thunk for @escaping @callee_unowned @convention(block) (@unowned NSError?) -> ()(a1, *(_QWORD *)(v1 + 16));
}

uint64_t objectdestroy_2Tm()
{
  uint64_t v0;

  swift_unknownObjectRelease();
  swift_release();
  if (*(_QWORD *)(v0 + 56))
    swift_release();
  return swift_deallocObject();
}

uint64_t closure #1 in LACRatchetFlowManager.transition(to:with:style:completion:)partial apply()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  __int128 v5;
  __int128 v6;

  v5 = *(_OWORD *)(v0 + 48);
  v6 = *(_OWORD *)(v0 + 32);
  v2 = *(_QWORD *)(v0 + 64);
  v3 = swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v3;
  *(_QWORD *)v3 = v1;
  *(_QWORD *)(v3 + 8) = dispatch thunk of LACUserDefaultsPersistentStore.removeObject(forKey:);
  *(_QWORD *)(v3 + 72) = v2;
  *(_OWORD *)(v3 + 56) = v5;
  *(_OWORD *)(v3 + 40) = v6;
  return swift_task_switch();
}

uint64_t partial apply for thunk for @escaping @callee_unowned @convention(block) () -> ()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)(v0 + 16) + 16))();
}

uint64_t LACRatchetFlowManager.transition(to:with:style:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;

  v4[57] = a3;
  v4[58] = v3;
  v4[55] = a1;
  v4[56] = a2;
  return swift_task_switch();
}

uint64_t LACRatchetFlowManager.transition(to:with:style:)()
{
  uint64_t v0;
  id v1;
  unsigned int v2;
  id v3;
  id v4;
  id v5;
  id v6;
  void *v7;
  uint64_t v8;
  NSDictionary v9;
  void *v10;
  id v11;
  id v12;
  void *v13;
  uint64_t v14;
  void *v15;
  id v16;
  void *v17;
  id v19;
  id v20;

  v1 = objc_msgSend(*(id *)(v0 + 464), sel_presenter);
  if (v1)
  {
    v2 = objc_msgSend(v1, sel_isPresented);
    swift_unknownObjectRelease();
    if (v2)
    {
      v3 = objc_msgSend(*(id *)(v0 + 464), sel_presenter);
      if (v3)
      {
        v4 = *(id *)(v0 + 456);
        v5 = objc_msgSend(v3, sel_presentationStyle);
        swift_unknownObjectRelease();
        if (v5 == v4)
        {
          v6 = objc_msgSend(*(id *)(v0 + 464), sel_uiManager);
          *(_QWORD *)(v0 + 528) = v6;
          if (v6)
          {
            v7 = v6;
            v8 = *(_QWORD *)(v0 + 440);
            v9.super.isa = Dictionary._bridgeToObjectiveC()().super.isa;
            *(NSDictionary *)(v0 + 536) = v9;
            *(_QWORD *)(v0 + 80) = v0;
            *(_QWORD *)(v0 + 88) = LACRatchetFlowManager.transition(to:with:style:);
            *(_QWORD *)(v0 + 432) = swift_continuation_init();
            *(_QWORD *)(v0 + 400) = MEMORY[0x24BDAC760];
            *(_QWORD *)(v0 + 408) = 0x40000000;
            v10 = &block_descriptor_47;
LABEL_9:
            *(_QWORD *)(v0 + 416) = @objc completion handler block implementation for <A><A1>@escaping @callee_unowned @convention(block) (@unowned NSError?) -> () with result type ();
            *(_QWORD *)(v0 + 424) = v10;
            objc_msgSend(v7, sel_transitionToState_withOptions_completion_, v8, v9.super.isa, v0 + 400);
            return swift_continuation_await();
          }
          return (*(uint64_t (**)(void))(v0 + 8))();
        }
      }
      v16 = objc_msgSend(*(id *)(v0 + 464), sel_presenter);
      *(_QWORD *)(v0 + 472) = v16;
      if (v16)
      {
        v17 = v16;
        *(_QWORD *)(v0 + 208) = v0;
        *(_QWORD *)(v0 + 216) = LACRatchetFlowManager.transition(to:with:style:);
        *(_QWORD *)(v0 + 432) = swift_continuation_init();
        *(_QWORD *)(v0 + 400) = MEMORY[0x24BDAC760];
        *(_QWORD *)(v0 + 408) = 0x40000000;
        *(_QWORD *)(v0 + 416) = @objc completion handler block implementation for <A><A1>@escaping @callee_unowned @convention(block) (@unowned NSError?) -> () with result type ();
        *(_QWORD *)(v0 + 424) = &block_descriptor_46;
        objc_msgSend(v17, sel_dismissAnimated_completion_, 1, v0 + 400);
        return swift_continuation_await();
      }
      v19 = objc_msgSend(*(id *)(v0 + 464), sel_uiManager);
      *(_QWORD *)(v0 + 488) = v19;
      if (v19)
      {
        v7 = v19;
        v8 = *(_QWORD *)(v0 + 440);
        v9.super.isa = Dictionary._bridgeToObjectiveC()().super.isa;
        *(NSDictionary *)(v0 + 496) = v9;
        *(_QWORD *)(v0 + 336) = v0;
        *(_QWORD *)(v0 + 344) = LACRatchetFlowManager.transition(to:with:style:);
        *(_QWORD *)(v0 + 432) = swift_continuation_init();
        *(_QWORD *)(v0 + 400) = MEMORY[0x24BDAC760];
        *(_QWORD *)(v0 + 408) = 0x40000000;
        v10 = &block_descriptor_45;
        goto LABEL_9;
      }
      v20 = objc_msgSend(*(id *)(v0 + 464), sel_presenter);
      *(_QWORD *)(v0 + 512) = v20;
      if (!v20)
        return (*(uint64_t (**)(void))(v0 + 8))();
      v13 = v20;
      v14 = *(_QWORD *)(v0 + 456);
      *(_QWORD *)(v0 + 272) = v0;
      *(_QWORD *)(v0 + 280) = LACRatchetFlowManager.transition(to:with:style:);
      *(_QWORD *)(v0 + 432) = swift_continuation_init();
      *(_QWORD *)(v0 + 400) = MEMORY[0x24BDAC760];
      *(_QWORD *)(v0 + 408) = 0x40000000;
      v15 = &block_descriptor_44;
LABEL_12:
      *(_QWORD *)(v0 + 416) = @objc completion handler block implementation for <A><A1>@escaping @callee_unowned @convention(block) (@unowned NSError?) -> () with result type ();
      *(_QWORD *)(v0 + 424) = v15;
      objc_msgSend(v13, sel_presentWithStyle_animated_completion_, v14, 1, v0 + 400);
      return swift_continuation_await();
    }
  }
  v11 = objc_msgSend(*(id *)(v0 + 464), sel_uiManager);
  *(_QWORD *)(v0 + 552) = v11;
  if (v11)
  {
    v7 = v11;
    v8 = *(_QWORD *)(v0 + 440);
    v9.super.isa = Dictionary._bridgeToObjectiveC()().super.isa;
    *(NSDictionary *)(v0 + 560) = v9;
    *(_QWORD *)(v0 + 144) = v0;
    *(_QWORD *)(v0 + 152) = LACRatchetFlowManager.transition(to:with:style:);
    *(_QWORD *)(v0 + 432) = swift_continuation_init();
    *(_QWORD *)(v0 + 400) = MEMORY[0x24BDAC760];
    *(_QWORD *)(v0 + 408) = 0x40000000;
    v10 = &block_descriptor_43;
    goto LABEL_9;
  }
  v12 = objc_msgSend(*(id *)(v0 + 464), sel_presenter);
  *(_QWORD *)(v0 + 576) = v12;
  if (v12)
  {
    v13 = v12;
    v14 = *(_QWORD *)(v0 + 456);
    *(_QWORD *)(v0 + 16) = v0;
    *(_QWORD *)(v0 + 24) = LACRatchetFlowManager.transition(to:with:style:);
    *(_QWORD *)(v0 + 432) = swift_continuation_init();
    *(_QWORD *)(v0 + 400) = MEMORY[0x24BDAC760];
    *(_QWORD *)(v0 + 408) = 0x40000000;
    v15 = &block_descriptor_41;
    goto LABEL_12;
  }
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;

  *(_QWORD *)(*(_QWORD *)v0 + 480) = *(_QWORD *)(*(_QWORD *)v0 + 240);
  return swift_task_switch();
}

{
  uint64_t v0;
  id v1;
  void *v2;
  uint64_t v3;
  Class isa;
  id v5;
  void *v6;
  uint64_t v7;

  swift_unknownObjectRelease();
  v1 = objc_msgSend(*(id *)(v0 + 464), sel_uiManager);
  *(_QWORD *)(v0 + 488) = v1;
  if (v1)
  {
    v2 = v1;
    v3 = *(_QWORD *)(v0 + 440);
    isa = Dictionary._bridgeToObjectiveC()().super.isa;
    *(_QWORD *)(v0 + 496) = isa;
    *(_QWORD *)(v0 + 336) = v0;
    *(_QWORD *)(v0 + 344) = LACRatchetFlowManager.transition(to:with:style:);
    *(_QWORD *)(v0 + 432) = swift_continuation_init();
    *(_QWORD *)(v0 + 400) = MEMORY[0x24BDAC760];
    *(_QWORD *)(v0 + 408) = 0x40000000;
    *(_QWORD *)(v0 + 416) = @objc completion handler block implementation for <A><A1>@escaping @callee_unowned @convention(block) (@unowned NSError?) -> () with result type ();
    *(_QWORD *)(v0 + 424) = &block_descriptor_45;
    objc_msgSend(v2, sel_transitionToState_withOptions_completion_, v3, isa, v0 + 400);
    return swift_continuation_await();
  }
  v5 = objc_msgSend(*(id *)(v0 + 464), sel_presenter);
  *(_QWORD *)(v0 + 512) = v5;
  if (v5)
  {
    v6 = v5;
    v7 = *(_QWORD *)(v0 + 456);
    *(_QWORD *)(v0 + 272) = v0;
    *(_QWORD *)(v0 + 280) = LACRatchetFlowManager.transition(to:with:style:);
    *(_QWORD *)(v0 + 432) = swift_continuation_init();
    *(_QWORD *)(v0 + 400) = MEMORY[0x24BDAC760];
    *(_QWORD *)(v0 + 408) = 0x40000000;
    *(_QWORD *)(v0 + 416) = @objc completion handler block implementation for <A><A1>@escaping @callee_unowned @convention(block) (@unowned NSError?) -> () with result type ();
    *(_QWORD *)(v0 + 424) = &block_descriptor_44;
    objc_msgSend(v6, sel_presentWithStyle_animated_completion_, v7, 1, v0 + 400);
    return swift_continuation_await();
  }
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;

  *(_QWORD *)(*(_QWORD *)v0 + 504) = *(_QWORD *)(*(_QWORD *)v0 + 368);
  return swift_task_switch();
}

{
  uint64_t v0;
  void *v1;
  id v2;
  uint64_t v3;

  v1 = *(void **)(v0 + 496);
  swift_unknownObjectRelease();

  v2 = objc_msgSend(*(id *)(v0 + 464), sel_presenter);
  *(_QWORD *)(v0 + 512) = v2;
  if (!v2)
    return (*(uint64_t (**)(void))(v0 + 8))();
  v3 = *(_QWORD *)(v0 + 456);
  *(_QWORD *)(v0 + 272) = v0;
  *(_QWORD *)(v0 + 280) = LACRatchetFlowManager.transition(to:with:style:);
  *(_QWORD *)(v0 + 432) = swift_continuation_init();
  *(_QWORD *)(v0 + 400) = MEMORY[0x24BDAC760];
  *(_QWORD *)(v0 + 408) = 0x40000000;
  *(_QWORD *)(v0 + 416) = @objc completion handler block implementation for <A><A1>@escaping @callee_unowned @convention(block) (@unowned NSError?) -> () with result type ();
  *(_QWORD *)(v0 + 424) = &block_descriptor_44;
  objc_msgSend(v2, sel_presentWithStyle_animated_completion_, v3, 1, v0 + 400);
  return swift_continuation_await();
}

{
  uint64_t v0;

  *(_QWORD *)(*(_QWORD *)v0 + 520) = *(_QWORD *)(*(_QWORD *)v0 + 304);
  return swift_task_switch();
}

{
  uint64_t v0;

  swift_unknownObjectRelease();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;

  *(_QWORD *)(*(_QWORD *)v0 + 544) = *(_QWORD *)(*(_QWORD *)v0 + 112);
  return swift_task_switch();
}

{
  uint64_t v0;

  swift_unknownObjectRelease();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;

  *(_QWORD *)(*(_QWORD *)v0 + 568) = *(_QWORD *)(*(_QWORD *)v0 + 176);
  return swift_task_switch();
}

{
  uint64_t v0;
  void *v1;
  id v2;
  uint64_t v3;

  v1 = *(void **)(v0 + 560);
  swift_unknownObjectRelease();

  v2 = objc_msgSend(*(id *)(v0 + 464), sel_presenter);
  *(_QWORD *)(v0 + 576) = v2;
  if (!v2)
    return (*(uint64_t (**)(void))(v0 + 8))();
  v3 = *(_QWORD *)(v0 + 456);
  *(_QWORD *)(v0 + 16) = v0;
  *(_QWORD *)(v0 + 24) = LACRatchetFlowManager.transition(to:with:style:);
  *(_QWORD *)(v0 + 432) = swift_continuation_init();
  *(_QWORD *)(v0 + 400) = MEMORY[0x24BDAC760];
  *(_QWORD *)(v0 + 408) = 0x40000000;
  *(_QWORD *)(v0 + 416) = @objc completion handler block implementation for <A><A1>@escaping @callee_unowned @convention(block) (@unowned NSError?) -> () with result type ();
  *(_QWORD *)(v0 + 424) = &block_descriptor_41;
  objc_msgSend(v2, sel_presentWithStyle_animated_completion_, v3, 1, v0 + 400);
  return swift_continuation_await();
}

{
  uint64_t v0;

  *(_QWORD *)(*(_QWORD *)v0 + 584) = *(_QWORD *)(*(_QWORD *)v0 + 48);
  return swift_task_switch();
}

{
  uint64_t v0;

  swift_unknownObjectRelease();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  void *v1;

  v1 = *(void **)(v0 + 560);
  swift_willThrow();

  swift_unknownObjectRelease();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;

  swift_willThrow();
  swift_unknownObjectRelease();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;

  swift_willThrow();
  swift_unknownObjectRelease();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  void *v1;

  v1 = *(void **)(v0 + 496);
  swift_willThrow();

  swift_unknownObjectRelease();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;

  swift_willThrow();
  swift_unknownObjectRelease();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  void *v1;

  v1 = *(void **)(v0 + 536);
  swift_willThrow();

  swift_unknownObjectRelease();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t outlined destroy of TaskPriority?(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5(uint64_t a1, int *a2)
{
  uint64_t v2;
  _QWORD *v4;
  uint64_t (*v6)(uint64_t);

  v6 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v4;
  *v4 = v2;
  v4[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TQ0_;
  return v6(a1);
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TQ0_()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_240A410A0()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TA(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int *v4;
  _QWORD *v5;

  v4 = *(int **)(v1 + 16);
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = dispatch thunk of LACUserDefaultsPersistentStore.removeObject(forKey:);
  return ((uint64_t (*)(uint64_t, int *))((char *)&_sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5Tu
                                                 + _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5Tu))(a1, v4);
}

uint64_t LACPreboardStorageRequest.identifier.getter()
{
  uint64_t v0;

  return *(unsigned int *)(v0 + OBJC_IVAR____TtC23LocalAuthenticationCore25LACPreboardStorageRequest_identifier);
}

uint64_t LACPreboardStorageRequest.acl.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC23LocalAuthenticationCore25LACPreboardStorageRequest_acl);
  outlined copy of Data?(v1, *(_QWORD *)(v0 + OBJC_IVAR____TtC23LocalAuthenticationCore25LACPreboardStorageRequest_acl + 8));
  return v1;
}

uint64_t LACPreboardStorageRequest.client.getter()
{
  return swift_unknownObjectRetain();
}

uint64_t LACPreboardStorageRequest.contextID.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of UUID?(v1 + OBJC_IVAR____TtC23LocalAuthenticationCore25LACPreboardStorageRequest_contextID, a1);
}

uint64_t LACPreboardStorageRequest.domain.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + OBJC_IVAR____TtC23LocalAuthenticationCore25LACPreboardStorageRequest_domain);
}

uint64_t LACPreboardStorageRequest.key.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + OBJC_IVAR____TtC23LocalAuthenticationCore25LACPreboardStorageRequest_key);
}

id LACPreboardStorageRequest.__allocating_init(for:contextID:)(void *a1, uint64_t a2)
{
  objc_class *v2;
  id v5;

  v5 = objc_allocWithZone(v2);
  return LACPreboardStorageRequest.init(for:contextID:)(a1, a2);
}

id LACPreboardStorageRequest.init(for:contextID:)(id result, uint64_t a2)
{
  char *v2;
  int v3;
  id v5;
  void *v6;
  char *v7;
  id v8;
  id v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  objc_super v14;

  *(_OWORD *)&v2[OBJC_IVAR____TtC23LocalAuthenticationCore25LACPreboardStorageRequest_acl] = xmmword_240A7D6A0;
  v3 = static LACPreboardStorageRequest.identifier + 1;
  if (static LACPreboardStorageRequest.identifier == -1)
  {
    __break(1u);
  }
  else
  {
    v5 = result;
    ++static LACPreboardStorageRequest.identifier;
    *(_DWORD *)&v2[OBJC_IVAR____TtC23LocalAuthenticationCore25LACPreboardStorageRequest_identifier] = v3;
    v6 = (void *)objc_opt_self();
    v7 = v2;
    v8 = objc_msgSend(v6, sel_currentConnection);
    v9 = objc_msgSend(objc_allocWithZone((Class)LACXPCClient), sel_initWithConnection_, v8);

    *(_QWORD *)&v7[OBJC_IVAR____TtC23LocalAuthenticationCore25LACPreboardStorageRequest_client] = v9;
    v10 = &v7[OBJC_IVAR____TtC23LocalAuthenticationCore25LACPreboardStorageRequest_contextID];
    v11 = type metadata accessor for UUID();
    v12 = *(_QWORD *)(v11 - 8);
    (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v10, a2, v11);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v10, 0, 1, v11);
    *(_QWORD *)&v7[OBJC_IVAR____TtC23LocalAuthenticationCore25LACPreboardStorageRequest_domain] = 0;
    *(_QWORD *)&v7[OBJC_IVAR____TtC23LocalAuthenticationCore25LACPreboardStorageRequest_key] = v5;

    v14.receiver = v7;
    v14.super_class = (Class)type metadata accessor for LACPreboardStorageRequest();
    v13 = objc_msgSendSuper2(&v14, sel_init);
    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(a2, v11);
    return v13;
  }
  return result;
}

uint64_t type metadata accessor for LACPreboardStorageRequest()
{
  uint64_t result;

  result = type metadata singleton initialization cache for LACPreboardStorageRequest;
  if (!type metadata singleton initialization cache for LACPreboardStorageRequest)
    return swift_getSingletonMetadata();
  return result;
}

id LACPreboardStorageRequest.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

void LACPreboardStorageRequest.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

id LACPreboardStorageRequest.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for LACPreboardStorageRequest();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t ObjC metadata update function for LACPreboardStorageRequest()
{
  return type metadata accessor for LACPreboardStorageRequest();
}

void type metadata completion function for LACPreboardStorageRequest()
{
  unint64_t v0;

  type metadata accessor for UUID?();
  if (v0 <= 0x3F)
    swift_updateClassMetadata2();
}

uint64_t method lookup function for LACPreboardStorageRequest()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of LACPreboardStorageRequest.__allocating_init(for:contextID:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 128))();
}

uint64_t outlined destroy of UUID?(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t LACPreboardController.contextProvider.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  _BYTE v6[24];
  uint64_t v7;

  v3 = v1 + OBJC_IVAR____TtC23LocalAuthenticationCore21LACPreboardController____lazy_storage___contextProvider;
  swift_beginAccess();
  outlined init with copy of URL?(v3, (uint64_t)v6, (uint64_t *)&demangling cache variable for type metadata for LACACMContextProviding??);
  if (v7 != 1)
    return outlined init with take of LACACMContextProviding?((uint64_t)v6, a1);
  v4 = outlined destroy of AsyncStream<()>.Continuation?((uint64_t)v6, (uint64_t *)&demangling cache variable for type metadata for LACACMContextProviding??);
  (*(void (**)(uint64_t))(**(_QWORD **)(v1
                                                + OBJC_IVAR____TtC23LocalAuthenticationCore21LACPreboardController_contextProviderFactory)
                                  + 88))(v4);
  outlined init with copy of URL?(a1, (uint64_t)v6, &demangling cache variable for type metadata for LACACMContextProviding?);
  swift_beginAccess();
  outlined assign with take of LACACMContextProviding??((uint64_t)v6, v3);
  return swift_endAccess();
}

id LACPreboardController.launchDispatchQueue.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  id v10;
  void *v11;
  void *v12;
  id v13;
  _QWORD v15[4];

  v1 = v0;
  v2 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)v15 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for OS_dispatch_queue.Attributes();
  MEMORY[0x24BDAC7A8](v6);
  v7 = type metadata accessor for DispatchQoS();
  MEMORY[0x24BDAC7A8](v7);
  v8 = OBJC_IVAR____TtC23LocalAuthenticationCore21LACPreboardController____lazy_storage___launchDispatchQueue;
  v9 = *(void **)(v0
                + OBJC_IVAR____TtC23LocalAuthenticationCore21LACPreboardController____lazy_storage___launchDispatchQueue);
  if (v9)
  {
    v10 = *(id *)(v0
                + OBJC_IVAR____TtC23LocalAuthenticationCore21LACPreboardController____lazy_storage___launchDispatchQueue);
  }
  else
  {
    v15[2] = type metadata accessor for OS_dispatch_queue();
    static DispatchQoS.userInitiated.getter();
    v15[3] = MEMORY[0x24BEE4AF8];
    v15[1] = lazy protocol witness table accessor for type LACPolicy and conformance LACPolicy(&lazy protocol witness table cache variable for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes, (uint64_t (*)(uint64_t))MEMORY[0x24BEE5688], MEMORY[0x24BEE5698]);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [OS_dispatch_queue.Attributes]);
    lazy protocol witness table accessor for type CurrentValueSubject<Bool?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type [OS_dispatch_queue.Attributes] and conformance [A], &demangling cache variable for type metadata for [OS_dispatch_queue.Attributes], MEMORY[0x24BEE12C8]);
    dispatch thunk of SetAlgebra.init<A>(_:)();
    (*(void (**)(char *, _QWORD, uint64_t))(v3 + 104))(v5, *MEMORY[0x24BEE5750], v2);
    v11 = (void *)OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
    v12 = *(void **)(v0 + v8);
    *(_QWORD *)(v1 + v8) = v11;
    v10 = v11;

    v9 = 0;
  }
  v13 = v9;
  return v10;
}

char *LACPreboardController.__allocating_init(contextProviderFactory:launcher:passcodeVerifier:secureStorage:uppManager:useCaseProvider:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  objc_class *v6;
  id v13;
  char *v14;

  v13 = objc_allocWithZone(v6);
  v14 = specialized LACPreboardController.init(contextProviderFactory:launcher:passcodeVerifier:secureStorage:uppManager:useCaseProvider:)(a1, a2, a3, a4, a5, a6);
  swift_release();
  swift_unknownObjectRelease();
  return v14;
}

char *LACPreboardController.init(contextProviderFactory:launcher:passcodeVerifier:secureStorage:uppManager:useCaseProvider:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  char *v6;

  v6 = specialized LACPreboardController.init(contextProviderFactory:launcher:passcodeVerifier:secureStorage:uppManager:useCaseProvider:)(a1, a2, a3, a4, a5, a6);
  swift_release();
  swift_unknownObjectRelease();
  return v6;
}

id LACPreboardController.isFeatureSupported.getter()
{
  id v0;
  id v1;

  v0 = objc_msgSend((id)objc_opt_self(), sel_sharedInstance);
  v1 = objc_msgSend(v0, sel_featureFlagPreboardEnabled);

  return v1;
}

id LACPreboardController.isRequired.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  char *v6;
  void *v7;
  id v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  Swift::String v14;
  Swift::String v15;
  id v16;
  id v17;
  id v18;
  Swift::String v19;
  id v20;
  _QWORD v22[2];
  Swift::String v23;

  v1 = type metadata accessor for LACLogger();
  v2 = MEMORY[0x24BDAC7A8](v1);
  v4 = (char *)v22 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v2);
  v6 = (char *)v22 - v5;
  v7 = (void *)objc_opt_self();
  v8 = objc_msgSend(v7, sel_sharedInstance);
  v9 = objc_msgSend(v8, sel_featureFlagPreboardEnabled);

  if (v9)
  {
    v10 = *(_QWORD *)(v0 + OBJC_IVAR____TtC23LocalAuthenticationCore21LACPreboardController_useCaseProvider + 24);
    v11 = *(_QWORD *)(v0 + OBJC_IVAR____TtC23LocalAuthenticationCore21LACPreboardController_useCaseProvider + 32);
    __swift_project_boxed_opaque_existential_1((_QWORD *)(v0 + OBJC_IVAR____TtC23LocalAuthenticationCore21LACPreboardController_useCaseProvider), v10);
    v12 = (*(uint64_t (**)(uint64_t, uint64_t))(v11 + 8))(v10, v11);
    v13 = LACLogPreboard();
    Logger.init(_:)();
    v23._countAndFlagsBits = 0xD000000000000015;
    v23._object = (void *)0x8000000240A85260;
    v22[1] = v12;
    v14._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v14);
    swift_bridgeObjectRelease();
    v15 = v23;
    LOBYTE(v23._countAndFlagsBits) = 2;
    LACLogger.log(level:_:)((LocalAuthenticationCore::LACLogger::Level)&v23, v15);
    swift_bridgeObjectRelease();
    outlined destroy of LACLogger((uint64_t)v6);
    if (v12 == 4)
    {
      v16 = objc_msgSend(v7, sel_sharedInstance);
      v17 = objc_msgSend(v16, sel_featureFlagPreboardDeveloperModeEnabled);
LABEL_8:
      v20 = v17;

      return v20;
    }
    if (v12 == 3)
    {
      v16 = objc_msgSend(v7, sel_sharedInstance);
      v17 = objc_msgSend(v16, sel_featureFlagPreboardUPPEnabled);
      goto LABEL_8;
    }
  }
  else
  {
    v18 = LACLogPreboard();
    Logger.init(_:)();
    v23._countAndFlagsBits = 0;
    v23._object = (void *)0xE000000000000000;
    _StringGuts.grow(_:)(29);
    swift_bridgeObjectRelease();
    LOBYTE(v23._countAndFlagsBits) = 2;
    v19._countAndFlagsBits = 0xD000000000000025;
    v19._object = (void *)0x8000000240A85230;
    LACLogger.log(level:_:)((LocalAuthenticationCore::LACLogger::Level)&v23, v19);
    outlined destroy of LACLogger((uint64_t)v4);
  }
  return 0;
}

uint64_t LACPreboardController.useCase.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC23LocalAuthenticationCore21LACPreboardController_useCaseProvider + 24);
  v2 = *(_QWORD *)(v0 + OBJC_IVAR____TtC23LocalAuthenticationCore21LACPreboardController_useCaseProvider + 32);
  __swift_project_boxed_opaque_existential_1((_QWORD *)(v0 + OBJC_IVAR____TtC23LocalAuthenticationCore21LACPreboardController_useCaseProvider), v1);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v2);
}

Swift::String_optional __swiftcall LACPreboardController.uppTeamName()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  Swift::String_optional result;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC23LocalAuthenticationCore21LACPreboardController_uppManager + 24);
  v2 = *(_QWORD *)(v0 + OBJC_IVAR____TtC23LocalAuthenticationCore21LACPreboardController_uppManager + 32);
  __swift_project_boxed_opaque_existential_1((_QWORD *)(v0 + OBJC_IVAR____TtC23LocalAuthenticationCore21LACPreboardController_uppManager), v1);
  v3 = (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v2);
  result.value._object = v4;
  result.value._countAndFlagsBits = v3;
  return result;
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> LACPreboardController.launchPreboard()()
{
  void *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  id v16;
  dispatch_semaphore_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  NSObject *v21;
  uint64_t v22;
  void (*v23)(char *, uint64_t);
  char v24;
  char *v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  id v29;
  Swift::String v30;
  _QWORD *v31;
  char *v32;
  id v33;
  char *v34;
  void *v35;
  unsigned __int8 v36;
  id v37;
  id v38;
  Swift::String v39;
  uint64_t v40;
  void (*v41)(char *, uint64_t, uint64_t);
  uint64_t v42;
  id v43;
  NSObject *v44;
  uint64_t v45;
  void *v46;
  char v47;

  v2 = v0;
  v3 = type metadata accessor for LACLogger();
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v40 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for DispatchTime();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = MEMORY[0x24BDAC7A8](v6);
  v10 = (char *)&v40 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v8);
  v12 = (char *)&v40 - v11;
  v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x24BDAC7A8](v13);
  v15 = (char *)&v40 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = LACPreboardController.launchDispatchQueue.getter();
  v46 = v2;
  OS_dispatch_queue.sync<A>(execute:)();

  if (v47 == 1)
  {
    v45 = v1;
    v17 = dispatch_semaphore_create(0);
    v18 = type metadata accessor for TaskPriority();
    v41 = *(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 56);
    v42 = v18;
    v41(v15, 1, 1);
    v19 = v7;
    v20 = (_QWORD *)swift_allocObject();
    v20[2] = 0;
    v20[3] = 0;
    v20[4] = v2;
    v20[5] = v17;
    v43 = v2;
    v21 = v17;
    v22 = _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v15, (uint64_t)&async function pointer to partial apply for closure #2 in LACPreboardController.launchPreboard(), (uint64_t)v20);
    static DispatchTime.now()();
    MEMORY[0x242686390](v10, 1.0);
    v23 = *(void (**)(char *, uint64_t))(v19 + 8);
    v23(v10, v6);
    v44 = v21;
    v24 = MEMORY[0x24268666C](v12);
    v25 = v12;
    v26 = v22;
    v27 = v43;
    v23(v25, v6);
    v28 = MEMORY[0x24BEE4AE0];
    if ((v24 & 1) != 0)
    {
      v29 = LACLogPreboard();
      Logger.init(_:)();
      v47 = 2;
      v30._countAndFlagsBits = 0xD00000000000002ALL;
      v30._object = (void *)0x8000000240A852C0;
      LACLogger.log(level:_:)((LocalAuthenticationCore::LACLogger::Level)&v47, v30);
      outlined destroy of LACLogger((uint64_t)v5);
      MEMORY[0x2426865AC](v26, v28 + 8, MEMORY[0x24BEE4078], MEMORY[0x24BEE40A8]);
      ((void (*)(char *, uint64_t, uint64_t, uint64_t))v41)(v15, 1, 1, v42);
      v31 = (_QWORD *)swift_allocObject();
      v31[2] = 0;
      v31[3] = 0;
      v31[4] = v27;
      v32 = v27;
      _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v15, (uint64_t)&async function pointer to partial apply for closure #3 in LACPreboardController.launchPreboard(), (uint64_t)v31);
      swift_release();
      v33 = specialized static LACPreboardErrorBuilder.error(code:message:)(2, 0xD000000000000013, 0x8000000240A852F0);
      v34 = &v32[OBJC_IVAR____TtC23LocalAuthenticationCore21LACPreboardController_launchResult];
      v35 = *(void **)&v32[OBJC_IVAR____TtC23LocalAuthenticationCore21LACPreboardController_launchResult];
      *(_QWORD *)v34 = v33;
      v36 = v34[8];
      v34[8] = 1;
      outlined consume of Result<(), Error>?(v35, v36);
    }
    v37 = LACPreboardController.launchDispatchQueue.getter();
    MEMORY[0x24BDAC7A8](v37);
    *(&v40 - 2) = (uint64_t)v27;
    OS_dispatch_queue.sync<A>(execute:)();

    swift_release();
  }
  else
  {
    v38 = LACLogPreboard();
    Logger.init(_:)();
    v47 = 2;
    v39._object = (void *)0x8000000240A85280;
    v39._countAndFlagsBits = 0xD00000000000001FLL;
    LACLogger.log(level:_:)((LocalAuthenticationCore::LACLogger::Level)&v47, v39);
    outlined destroy of LACLogger((uint64_t)v5);
    specialized static LACPreboardErrorBuilder.error(code:message:)(1, 0xD00000000000001FLL, 0x8000000240A852A0);
    swift_willThrow();
  }
}

uint64_t closure #2 in LACPreboardController.launchPreboard()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  _QWORD *v6;

  v5[5] = a4;
  v5[6] = a5;
  type metadata accessor for LACLogger();
  v5[7] = swift_task_alloc();
  v6 = (_QWORD *)swift_task_alloc();
  v5[8] = v6;
  *v6 = v5;
  v6[1] = closure #2 in LACPreboardController.launchPreboard();
  return LACPreboardController.launchPreboard()();
}

uint64_t closure #2 in LACPreboardController.launchPreboard()()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 72) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  unsigned __int8 v3;

  v1 = *(_QWORD *)(v0 + 40) + OBJC_IVAR____TtC23LocalAuthenticationCore21LACPreboardController_launchResult;
  v2 = *(void **)v1;
  *(_QWORD *)v1 = 0;
  v3 = *(_BYTE *)(v1 + 8);
  *(_BYTE *)(v1 + 8) = 0;
  outlined consume of Result<(), Error>?(v2, v3);
  OS_dispatch_semaphore.signal()();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  id v4;
  Swift::String v5;
  Swift::String v6;
  Swift::String v7;
  void *v8;
  uint64_t v9;
  void *v10;
  unsigned __int8 v11;
  _QWORD v13[2];

  v1 = *(_QWORD *)(v0 + 72);
  v2 = *(_QWORD *)(v0 + 56);
  v3 = *(_QWORD *)(v0 + 40);
  v4 = LACLogPreboard();
  Logger.init(_:)();
  v13[0] = 0;
  v13[1] = 0xE000000000000000;
  _StringGuts.grow(_:)(49);
  *(_QWORD *)(v0 + 16) = 0;
  *(_QWORD *)(v0 + 24) = 0xE000000000000000;
  v5._countAndFlagsBits = 0xD00000000000001FLL;
  v5._object = (void *)0x8000000240A85910;
  String.append(_:)(v5);
  *(_QWORD *)(v0 + 32) = v1;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
  _print_unlocked<A, B>(_:_:)();
  v6._object = (void *)0x8000000240A85930;
  v6._countAndFlagsBits = 0xD000000000000010;
  String.append(_:)(v6);
  v7._countAndFlagsBits = *(_QWORD *)(v0 + 16);
  v8 = *(void **)(v0 + 24);
  LOBYTE(v13[0]) = 2;
  v7._object = v8;
  LACLogger.log(level:_:)((LocalAuthenticationCore::LACLogger::Level)v13, v7);
  swift_bridgeObjectRelease();
  outlined destroy of LACLogger(v2);
  v9 = v3 + OBJC_IVAR____TtC23LocalAuthenticationCore21LACPreboardController_launchResult;
  v10 = *(void **)(v3 + OBJC_IVAR____TtC23LocalAuthenticationCore21LACPreboardController_launchResult);
  *(_QWORD *)v9 = v1;
  v11 = *(_BYTE *)(v9 + 8);
  *(_BYTE *)(v9 + 8) = 1;
  outlined consume of Result<(), Error>?(v10, v11);
  OS_dispatch_semaphore.signal()();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t LACPreboardController.launchPreboard()()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = v0;
  type metadata accessor for LACLogger();
  *(_QWORD *)(v1 + 24) = swift_task_alloc();
  return swift_task_switch();
}

{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v6;
  id v7;
  Swift::String v8;
  _QWORD *v9;
  uint64_t (*v10)(uint64_t, uint64_t);
  char v11;

  if ((LACPreboardController.isRequired.getter() & 1) != 0)
  {
    v1 = (_QWORD *)(v0[2] + OBJC_IVAR____TtC23LocalAuthenticationCore21LACPreboardController_launcher);
    v2 = v1[3];
    v3 = v1[4];
    __swift_project_boxed_opaque_existential_1(v1, v2);
    v10 = (uint64_t (*)(uint64_t, uint64_t))(**(int **)(v3 + 8) + *(_QWORD *)(v3 + 8));
    v4 = (_QWORD *)swift_task_alloc();
    v0[4] = v4;
    *v4 = v0;
    v4[1] = LACPreboardController.launchPreboard();
    return v10(v2, v3);
  }
  else
  {
    v6 = v0[3];
    v7 = LACLogPreboard();
    Logger.init(_:)();
    v11 = 2;
    v8._object = (void *)0x8000000240A85310;
    v8._countAndFlagsBits = 0xD000000000000039;
    LACLogger.log(level:_:)((LocalAuthenticationCore::LACLogger::Level)&v11, v8);
    outlined destroy of LACLogger(v6);
    v9 = (_QWORD *)swift_task_alloc();
    v0[6] = v9;
    *v9 = v0;
    v9[1] = LACPreboardController.launchPreboard();
    return LACPreboardController.terminate()();
  }
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  _QWORD *v3;

  v2 = *v1;
  *(_QWORD *)(v2 + 40) = v0;
  swift_task_dealloc();
  if (!v0)
    return swift_task_switch();
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 56) = v3;
  *v3 = v2;
  v3[1] = LACPreboardController.launchPreboard();
  return LACPreboardController.terminate()();
}

{
  uint64_t v0;
  uint64_t v1;
  id v2;
  Swift::String v3;
  char v5;

  v1 = *(_QWORD *)(v0 + 24);
  v2 = LACLogPreboard();
  Logger.init(_:)();
  v5 = 2;
  v3._object = (void *)0x8000000240A85370;
  v3._countAndFlagsBits = 0xD000000000000013;
  LACLogger.log(level:_:)((LocalAuthenticationCore::LACLogger::Level)&v5, v3);
  outlined destroy of LACLogger(v1);
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  swift_task_dealloc();
  if (!v0)
    return swift_task_switch();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

{
  uint64_t v0;

  specialized static LACPreboardErrorBuilder.error(code:message:)(2, 0xD000000000000015, 0x8000000240A85350);
  swift_willThrow();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 64) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;

  swift_willThrow();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;

  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t closure #3 in LACPreboardController.launchPreboard()()
{
  uint64_t v0;
  _QWORD *v1;

  type metadata accessor for LACLogger();
  *(_QWORD *)(v0 + 16) = swift_task_alloc();
  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 24) = v1;
  *v1 = v0;
  v1[1] = closure #3 in LACPreboardController.launchPreboard();
  return LACPreboardController.terminate()();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(v2 + 32) = v0;
  swift_task_dealloc();
  if (v0)
    return swift_task_switch();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  id v3;
  Swift::String v4;
  char v6;

  v1 = *(void **)(v0 + 32);
  v2 = *(_QWORD *)(v0 + 16);
  v3 = LACLogPreboard();
  Logger.init(_:)();
  v6 = 2;
  v4._object = (void *)0x8000000240A858F0;
  v4._countAndFlagsBits = 0xD000000000000014;
  LACLogger.log(level:_:)((LocalAuthenticationCore::LACLogger::Level)&v6, v4);

  outlined destroy of LACLogger(v2);
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t LACPreboardController.terminate()()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = v0;
  type metadata accessor for LACLogger();
  *(_QWORD *)(v1 + 24) = swift_task_alloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  id v1;
  unsigned int v2;
  _QWORD *v3;
  uint64_t v5;
  id v6;
  Swift::String v7;
  char v8;

  v1 = objc_msgSend((id)objc_opt_self(), sel_sharedInstance);
  v2 = objc_msgSend(v1, sel_featureFlagPreboardEnabled);

  if (v2)
  {
    v3 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 32) = v3;
    *v3 = v0;
    v3[1] = LACPreboardController.terminate();
    return LACPreboardController.finishPreboard(success:reason:)(0, 0xD000000000000016, 0x8000000240A853D0);
  }
  else
  {
    v5 = *(_QWORD *)(v0 + 24);
    v6 = LACLogPreboard();
    Logger.init(_:)();
    v8 = 2;
    v7._countAndFlagsBits = 0xD00000000000003CLL;
    v7._object = (void *)0x8000000240A85390;
    LACLogger.log(level:_:)((LocalAuthenticationCore::LACLogger::Level)&v8, v7);
    outlined destroy of LACLogger(v5);
    specialized static LACPreboardErrorBuilder.error(code:message:)(2, 0xD000000000000015, 0x8000000240A85350);
    swift_willThrow();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  swift_task_dealloc();
  if (!v0)
    return swift_task_switch();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

{
  uint64_t v0;
  uint64_t v1;
  id v2;
  Swift::String v3;
  char v5;

  v1 = *(_QWORD *)(v0 + 24);
  v2 = LACLogPreboard();
  Logger.init(_:)();
  v5 = 2;
  v3._object = (void *)0x8000000240A853F0;
  v3._countAndFlagsBits = 0xD000000000000013;
  LACLogger.log(level:_:)((LocalAuthenticationCore::LACLogger::Level)&v5, v3);
  outlined destroy of LACLogger(v1);
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void closure #4 in LACPreboardController.launchPreboard()(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  int v3;
  int v4;
  unsigned __int8 v5;
  void *v6;

  v1 = a1 + OBJC_IVAR____TtC23LocalAuthenticationCore21LACPreboardController_launchResult;
  v2 = *(void **)(a1 + OBJC_IVAR____TtC23LocalAuthenticationCore21LACPreboardController_launchResult);
  v3 = *(unsigned __int8 *)(a1 + OBJC_IVAR____TtC23LocalAuthenticationCore21LACPreboardController_launchResult + 8);
  if (v3 == 255)
  {
    specialized static LACPreboardErrorBuilder.error(code:message:)(2, 0xD000000000000017, 0x8000000240A858D0);
    v6 = *(void **)v1;
    v5 = *(_BYTE *)(v1 + 8);
    v4 = 1;
  }
  else
  {
    v4 = v3 & 1;
    v5 = *(_BYTE *)(a1 + OBJC_IVAR____TtC23LocalAuthenticationCore21LACPreboardController_launchResult + 8);
    v6 = *(void **)(a1 + OBJC_IVAR____TtC23LocalAuthenticationCore21LACPreboardController_launchResult);
  }
  *(_QWORD *)v1 = 0;
  *(_BYTE *)(v1 + 8) = -1;
  outlined copy of Result<(), Error>?(v2, v3);
  outlined consume of Result<(), Error>?(v6, v5);
  if (v4)
    swift_willThrow();
}

uint64_t @objc closure #1 in LACPreboardController.launchPreboard()(const void *a1, void *a2)
{
  _QWORD *v2;
  _QWORD *v4;

  v2[2] = a2;
  v2[3] = _Block_copy(a1);
  a2;
  v4 = (_QWORD *)swift_task_alloc();
  v2[4] = v4;
  *v4 = v2;
  v4[1] = @objc closure #1 in LACPreboardController.launchPreboard();
  return LACPreboardController.launchPreboard()();
}

uint64_t @objc closure #1 in LACPreboardController.launchPreboard()()
{
  void *v0;
  uint64_t *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;

  v2 = *(void **)(*v1 + 16);
  v3 = *v1;
  swift_task_dealloc();

  v4 = *(_QWORD *)(v3 + 24);
  if (v0)
  {
    v5 = (void *)_convertErrorToNSError(_:)();

    (*(void (**)(uint64_t, void *))(v4 + 16))(v4, v5);
  }
  else
  {
    (*(void (**)(_QWORD, _QWORD))(v4 + 16))(*(_QWORD *)(v3 + 24), 0);
  }
  _Block_release(*(const void **)(v3 + 24));
  return (*(uint64_t (**)(void))(v3 + 8))();
}

uint64_t LACPreboardController.enableCurrentUseCase(withPasscode:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;

  v3[20] = a2;
  v3[21] = v2;
  v3[19] = a1;
  v4 = type metadata accessor for String.Encoding();
  v3[22] = v4;
  v3[23] = *(_QWORD *)(v4 - 8);
  v3[24] = swift_task_alloc();
  type metadata accessor for LACLogger();
  v3[25] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t LACPreboardController.enableCurrentUseCase(withPasscode:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  id v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  Swift::String v7;
  Swift::String v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  id v16;
  Swift::String v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  id v21;
  Swift::String v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  id v29;
  Swift::String v30;
  uint64_t v31;
  id v32;
  Swift::String v33;
  uint64_t v34;
  unint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  _QWORD *v43;
  uint64_t countAndFlagsBits;
  uint64_t v45;
  Swift::String v46;
  uint64_t v47;
  uint64_t v48;
  Swift::String v49;

  v1 = *(_QWORD *)(v0 + 200);
  v2 = *(_QWORD *)(v0 + 168);
  v3 = LACLogPreboard();
  Logger.init(_:)();
  _StringGuts.grow(_:)(41);
  swift_bridgeObjectRelease();
  v49._countAndFlagsBits = 0xD000000000000027;
  v49._object = (void *)0x8000000240A85410;
  v4 = (_QWORD *)(v2 + OBJC_IVAR____TtC23LocalAuthenticationCore21LACPreboardController_useCaseProvider);
  v5 = *(_QWORD *)(v2 + OBJC_IVAR____TtC23LocalAuthenticationCore21LACPreboardController_useCaseProvider + 24);
  v6 = *(_QWORD *)(v2 + OBJC_IVAR____TtC23LocalAuthenticationCore21LACPreboardController_useCaseProvider + 32);
  __swift_project_boxed_opaque_existential_1((_QWORD *)(v2 + OBJC_IVAR____TtC23LocalAuthenticationCore21LACPreboardController_useCaseProvider), v5);
  *(_QWORD *)(v0 + 136) = (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(v5, v6);
  v7._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v7);
  swift_bridgeObjectRelease();
  v8 = v49;
  LOBYTE(v49._countAndFlagsBits) = 2;
  LACLogger.log(level:_:)((LocalAuthenticationCore::LACLogger::Level)&v49, v8);
  swift_bridgeObjectRelease();
  outlined destroy of LACLogger(v1);
  if ((LACPreboardController.isRequired.getter() & 1) == 0)
  {
    v20 = *(_QWORD *)(v0 + 200);
    v21 = LACLogPreboard();
    Logger.init(_:)();
    LOBYTE(v49._countAndFlagsBits) = 2;
    v22._countAndFlagsBits = 0xD000000000000041;
    v22._object = (void *)0x8000000240A85440;
    LACLogger.log(level:_:)((LocalAuthenticationCore::LACLogger::Level)&v49, v22);
    outlined destroy of LACLogger(v20);
    v18 = 0xD000000000000015;
    v19 = 0x8000000240A85350;
    goto LABEL_5;
  }
  v10 = *(_QWORD *)(v0 + 184);
  v9 = *(_QWORD *)(v0 + 192);
  v11 = *(_QWORD *)(v0 + 176);
  static String.Encoding.utf8.getter();
  v12 = String.data(using:allowLossyConversion:)();
  v14 = v13;
  *(_QWORD *)(v0 + 208) = v12;
  *(_QWORD *)(v0 + 216) = v13;
  (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v9, v11);
  if (v14 >> 60 == 15)
  {
    v15 = *(_QWORD *)(v0 + 200);
    v16 = LACLogPreboard();
    Logger.init(_:)();
    LOBYTE(v49._countAndFlagsBits) = 2;
    v17._countAndFlagsBits = 0xD000000000000019;
    v17._object = (void *)0x8000000240A85490;
    LACLogger.log(level:_:)((LocalAuthenticationCore::LACLogger::Level)&v49, v17);
    outlined destroy of LACLogger(v15);
    v18 = 0xD000000000000019;
    v19 = 0x8000000240A85490;
LABEL_5:
    specialized static LACPreboardErrorBuilder.error(code:message:)(2, v18, v19);
    swift_willThrow();
LABEL_6:
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  LACPreboardController.contextProvider.getter(v0 + 56);
  if (!*(_QWORD *)(v0 + 80))
  {
    v31 = *(_QWORD *)(v0 + 200);
    outlined destroy of AsyncStream<()>.Continuation?(v0 + 56, &demangling cache variable for type metadata for LACACMContextProviding?);
    v32 = LACLogPreboard();
    Logger.init(_:)();
    LOBYTE(v49._countAndFlagsBits) = 2;
    v33._countAndFlagsBits = 0xD000000000000020;
    v33._object = (void *)0x8000000240A854B0;
    LACLogger.log(level:_:)((LocalAuthenticationCore::LACLogger::Level)&v49, v33);
    outlined destroy of LACLogger(v31);
    specialized static LACPreboardErrorBuilder.error(code:message:)(2, 0xD00000000000001DLL, 0x8000000240A854E0);
    swift_willThrow();
    outlined consume of Data?(v12, v14);
    goto LABEL_6;
  }
  outlined init with take of LACPreboardUseCaseProviding((__int128 *)(v0 + 56), v0 + 16);
  v24 = *(_QWORD *)(v0 + 40);
  v25 = *(_QWORD *)(v0 + 48);
  __swift_project_boxed_opaque_existential_1((_QWORD *)(v0 + 16), v24);
  v26 = (*(uint64_t (**)(uint64_t, uint64_t))(v25 + 8))(v24, v25);
  *(_QWORD *)(v0 + 224) = v26;
  *(_QWORD *)(v0 + 232) = v27;
  if (v27 >> 60 == 15)
  {
    v28 = *(_QWORD *)(v0 + 200);
    v29 = LACLogPreboard();
    Logger.init(_:)();
    LOBYTE(v49._countAndFlagsBits) = 2;
    v30._countAndFlagsBits = 0xD000000000000022;
    v30._object = (void *)0x8000000240A85500;
    LACLogger.log(level:_:)((LocalAuthenticationCore::LACLogger::Level)&v49, v30);
    outlined destroy of LACLogger(v28);
    specialized static LACPreboardErrorBuilder.error(code:message:)(2, 0xD000000000000021, 0x8000000240A85530);
    swift_willThrow();
    outlined consume of Data?(v12, v14);
    __swift_destroy_boxed_opaque_existential_1(v0 + 16);
    goto LABEL_6;
  }
  v34 = v26;
  v35 = v27;
  v36 = (_QWORD *)(*(_QWORD *)(v0 + 168)
                 + OBJC_IVAR____TtC23LocalAuthenticationCore21LACPreboardController_passcodeVerifier);
  v38 = v36[3];
  v37 = v36[4];
  __swift_project_boxed_opaque_existential_1(v36, v38);
  (*(void (**)(uint64_t, unint64_t, uint64_t, unint64_t, uint64_t, uint64_t))(v37 + 8))(v12, v14, v34, v35, v38, v37);
  v39 = v4[3];
  v40 = v4[4];
  __swift_project_boxed_opaque_existential_1(v4, v39);
  v41 = (*(uint64_t (**)(uint64_t, uint64_t))(v40 + 8))(v39, v40);
  if (v41 == 4)
  {
    v42 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 240) = v42;
    *v42 = v0;
    v42[1] = LACPreboardController.enableCurrentUseCase(withPasscode:);
    return LACPreboardController.setEnvironmentVariable()();
  }
  else if (v41 == 3)
  {
    v43 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 256) = v43;
    *v43 = v0;
    v43[1] = LACPreboardController.enableCurrentUseCase(withPasscode:);
    return LACPreboardController.installProfile()();
  }
  else
  {
    v49._countAndFlagsBits = 0;
    v49._object = (void *)0xE000000000000000;
    if (v41 == -1)
    {
      _StringGuts.grow(_:)(24);
      countAndFlagsBits = v49._countAndFlagsBits;
      *(_QWORD *)(v0 + 120) = v49._object;
      v45 = v0 + 120;
    }
    else
    {
      _StringGuts.grow(_:)(24);
      countAndFlagsBits = v49._countAndFlagsBits;
      *(_QWORD *)(v0 + 104) = v49._object;
      v45 = v0 + 104;
    }
    *(_QWORD *)(v45 - 8) = countAndFlagsBits;
    v46._object = (void *)0x8000000240A855A0;
    v46._countAndFlagsBits = 0xD000000000000016;
    String.append(_:)(v46);
    v47 = v4[3];
    v48 = v4[4];
    __swift_project_boxed_opaque_existential_1(v4, v47);
    *(_QWORD *)(v45 + 24) = (*(uint64_t (**)(uint64_t, uint64_t))(v48 + 8))(v47, v48);
    type metadata accessor for LACPreboardUseCase(0);
    _print_unlocked<A, B>(_:_:)();
    return _assertionFailure(_:_:file:line:flags:)();
  }
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  _QWORD *v4;

  v2 = *v1;
  *(_QWORD *)(v2 + 248) = v0;
  swift_task_dealloc();
  if (v0)
    return swift_task_switch();
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 272) = v4;
  *v4 = v2;
  v4[1] = LACPreboardController.enableCurrentUseCase(withPasscode:);
  return LACPreboardController.finishPreboard(success:reason:)(1, 0xD000000000000025, 0x8000000240A855C0);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  _QWORD *v4;

  v2 = *v1;
  *(_QWORD *)(v2 + 264) = v0;
  swift_task_dealloc();
  if (v0)
    return swift_task_switch();
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 272) = v4;
  *v4 = v2;
  v4[1] = LACPreboardController.enableCurrentUseCase(withPasscode:);
  return LACPreboardController.finishPreboard(success:reason:)(1, 0xD000000000000025, 0x8000000240A855C0);
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 280) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  Swift::String v7;
  char v9;

  v2 = *(_QWORD *)(v0 + 224);
  v1 = *(_QWORD *)(v0 + 232);
  v4 = *(_QWORD *)(v0 + 208);
  v3 = *(_QWORD *)(v0 + 216);
  v5 = *(_QWORD *)(v0 + 200);
  v6 = LACLogPreboard();
  Logger.init(_:)();
  v9 = 2;
  v7._object = (void *)0x8000000240A855F0;
  v7._countAndFlagsBits = 0xD000000000000012;
  LACLogger.log(level:_:)((LocalAuthenticationCore::LACLogger::Level)&v9, v7);
  outlined consume of Data?(v2, v1);
  outlined consume of Data?(v4, v3);
  outlined destroy of LACLogger(v5);
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v0 + 224);
  v1 = *(_QWORD *)(v0 + 232);
  outlined consume of Data?(*(_QWORD *)(v0 + 208), *(_QWORD *)(v0 + 216));
  outlined consume of Data?(v2, v1);
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v0 + 224);
  v1 = *(_QWORD *)(v0 + 232);
  outlined consume of Data?(*(_QWORD *)(v0 + 208), *(_QWORD *)(v0 + 216));
  outlined consume of Data?(v2, v1);
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v0 + 224);
  v1 = *(_QWORD *)(v0 + 232);
  outlined consume of Data?(*(_QWORD *)(v0 + 208), *(_QWORD *)(v0 + 216));
  outlined consume of Data?(v2, v1);
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t LACPreboardController.setEnvironmentVariable()()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 200) = v0;
  type metadata accessor for LACLogger();
  *(_QWORD *)(v1 + 208) = swift_task_alloc();
  return swift_task_switch();
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id v5;
  uint64_t v6;
  void *v7;
  Class isa;
  uint64_t v9;

  v1 = v0[25];
  v2 = *(_QWORD *)(v1 + OBJC_IVAR____TtC23LocalAuthenticationCore21LACPreboardController_useCaseProvider + 24);
  v3 = *(_QWORD *)(v1 + OBJC_IVAR____TtC23LocalAuthenticationCore21LACPreboardController_useCaseProvider + 32);
  __swift_project_boxed_opaque_existential_1((_QWORD *)(v1 + OBJC_IVAR____TtC23LocalAuthenticationCore21LACPreboardController_useCaseProvider), v2);
  v4 = (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(v2, v3);
  v5 = LACPreboardController.storageRequest(for:)(v4);
  v0[27] = v5;
  v0[28] = specialized Data.init<A>(_:)((uint64_t)&outlined read-only object #0 of LACPreboardController.setEnvironmentVariable());
  v0[29] = v6;
  v7 = *(void **)(v1 + OBJC_IVAR____TtC23LocalAuthenticationCore21LACPreboardController_secureStorage);
  isa = Data._bridgeToObjectiveC()().super.isa;
  v0[30] = isa;
  v0[7] = v0 + 15;
  v0[2] = v0;
  v0[3] = LACPreboardController.setEnvironmentVariable();
  v9 = swift_continuation_init();
  v0[10] = MEMORY[0x24BDAC760];
  v0[11] = 0x40000000;
  v0[12] = @objc completion handler block implementation for @escaping @callee_unowned @convention(block) (@unowned Swift.AnyObject?, @unowned NSError?) -> () with result type Any;
  v0[13] = &block_descriptor_10;
  v0[14] = v9;
  objc_msgSend(v7, sel_setObject_forRequest_connection_completionHandler_, isa, v5, 0, v0 + 10);
  return swift_continuation_await();
}

{
  uint64_t v0;

  *(_QWORD *)(*(_QWORD *)v0 + 248) = *(_QWORD *)(*(_QWORD *)v0 + 48);
  return swift_task_switch();
}

{
  uint64_t v0;
  unint64_t v1;
  void *v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  id v6;
  Swift::String v7;
  char v9;

  v1 = *(_QWORD *)(v0 + 232);
  v2 = *(void **)(v0 + 240);
  v4 = *(void **)(v0 + 216);
  v3 = *(_QWORD *)(v0 + 224);
  v5 = *(_QWORD *)(v0 + 208);
  __swift_destroy_boxed_opaque_existential_1(v0 + 120);

  v6 = LACLogPreboard();
  Logger.init(_:)();
  v9 = 2;
  v7._object = (void *)0x8000000240A857E0;
  v7._countAndFlagsBits = 0xD000000000000022;
  LACLogger.log(level:_:)((LocalAuthenticationCore::LACLogger::Level)&v9, v7);
  outlined consume of Data._Representation(v3, v1);

  outlined destroy of LACLogger(v5);
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  void *v1;
  void *v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  id v7;
  Swift::String v8;
  Swift::String v9;
  void *v10;
  unint64_t v11;
  Swift::String v12;
  uint64_t v14;
  unint64_t v15;

  v2 = *(void **)(v0 + 240);
  v1 = *(void **)(v0 + 248);
  v4 = *(_QWORD *)(v0 + 224);
  v3 = *(_QWORD *)(v0 + 232);
  v5 = *(_QWORD *)(v0 + 208);
  v6 = *(void **)(v0 + 216);
  swift_willThrow();
  outlined consume of Data._Representation(v4, v3);

  v7 = LACLogPreboard();
  Logger.init(_:)();
  v14 = 0;
  v15 = 0xE000000000000000;
  _StringGuts.grow(_:)(46);
  *(_QWORD *)(v0 + 152) = 0;
  *(_QWORD *)(v0 + 160) = 0xE000000000000000;
  v8._countAndFlagsBits = 0xD00000000000002CLL;
  v8._object = (void *)0x8000000240A857B0;
  String.append(_:)(v8);
  *(_QWORD *)(v0 + 184) = v1;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
  _print_unlocked<A, B>(_:_:)();
  v9._countAndFlagsBits = *(_QWORD *)(v0 + 152);
  v10 = *(void **)(v0 + 160);
  LOBYTE(v14) = 2;
  v9._object = v10;
  LACLogger.log(level:_:)((LocalAuthenticationCore::LACLogger::Level)&v14, v9);
  swift_bridgeObjectRelease();
  outlined destroy of LACLogger(v5);
  v14 = 0;
  v15 = 0xE000000000000000;
  _StringGuts.grow(_:)(46);
  v11 = v15;
  *(_QWORD *)(v0 + 168) = v14;
  *(_QWORD *)(v0 + 176) = v11;
  v12._countAndFlagsBits = 0xD00000000000002CLL;
  v12._object = (void *)0x8000000240A857B0;
  String.append(_:)(v12);
  *(_QWORD *)(v0 + 192) = v1;
  _print_unlocked<A, B>(_:_:)();
  specialized static LACPreboardErrorBuilder.error(code:message:)(1, *(_QWORD *)(v0 + 168), *(_QWORD *)(v0 + 176));
  swift_bridgeObjectRelease();
  swift_willThrow();

  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t LACPreboardController.installProfile()()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 64) = v0;
  type metadata accessor for LACLogger();
  *(_QWORD *)(v1 + 72) = swift_task_alloc();
  return swift_task_switch();
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t (*v11)(id, uint64_t, uint64_t, uint64_t);

  v1 = v0[8];
  v2 = *(_QWORD *)(v1 + OBJC_IVAR____TtC23LocalAuthenticationCore21LACPreboardController_useCaseProvider + 24);
  v3 = *(_QWORD *)(v1 + OBJC_IVAR____TtC23LocalAuthenticationCore21LACPreboardController_useCaseProvider + 32);
  __swift_project_boxed_opaque_existential_1((_QWORD *)(v1 + OBJC_IVAR____TtC23LocalAuthenticationCore21LACPreboardController_useCaseProvider), v2);
  v4 = (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(v2, v3);
  v5 = LACPreboardController.storageRequest(for:)(v4);
  v0[10] = v5;
  v6 = *(_QWORD *)(v1 + OBJC_IVAR____TtC23LocalAuthenticationCore21LACPreboardController_uppManager + 24);
  v7 = *(_QWORD *)(v1 + OBJC_IVAR____TtC23LocalAuthenticationCore21LACPreboardController_uppManager + 32);
  __swift_project_boxed_opaque_existential_1((_QWORD *)(v1 + OBJC_IVAR____TtC23LocalAuthenticationCore21LACPreboardController_uppManager), v6);
  v8 = *(_QWORD *)(v1 + OBJC_IVAR____TtC23LocalAuthenticationCore21LACPreboardController_secureStorage);
  v11 = (uint64_t (*)(id, uint64_t, uint64_t, uint64_t))(**(int **)(v7 + 16) + *(_QWORD *)(v7 + 16));
  v9 = (_QWORD *)swift_task_alloc();
  v0[11] = v9;
  *v9 = v0;
  v9[1] = LACPreboardController.installProfile();
  return v11(v5, v8, v6, v7);
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 96) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  id v3;
  Swift::String v4;
  char v6;

  v2 = *(_QWORD *)(v0 + 72);
  v1 = *(void **)(v0 + 80);
  v3 = LACLogPreboard();
  Logger.init(_:)();
  v6 = 2;
  v4._object = (void *)0x8000000240A85850;
  v4._countAndFlagsBits = 0xD000000000000015;
  LACLogger.log(level:_:)((LocalAuthenticationCore::LACLogger::Level)&v6, v4);

  outlined destroy of LACLogger(v2);
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  id v3;
  Swift::String v4;
  Swift::String v5;
  void *v6;
  unint64_t v7;
  Swift::String v8;
  uint64_t v10;
  unint64_t v11;

  v1 = *(void **)(v0 + 96);
  v2 = *(_QWORD *)(v0 + 72);

  v3 = LACLogPreboard();
  Logger.init(_:)();
  v10 = 0;
  v11 = 0xE000000000000000;
  _StringGuts.grow(_:)(33);
  *(_QWORD *)(v0 + 16) = 0;
  *(_QWORD *)(v0 + 24) = 0xE000000000000000;
  v4._countAndFlagsBits = 0xD00000000000001FLL;
  v4._object = (void *)0x8000000240A85830;
  String.append(_:)(v4);
  *(_QWORD *)(v0 + 48) = v1;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
  _print_unlocked<A, B>(_:_:)();
  v5._countAndFlagsBits = *(_QWORD *)(v0 + 16);
  v6 = *(void **)(v0 + 24);
  LOBYTE(v10) = 2;
  v5._object = v6;
  LACLogger.log(level:_:)((LocalAuthenticationCore::LACLogger::Level)&v10, v5);
  swift_bridgeObjectRelease();
  outlined destroy of LACLogger(v2);
  v10 = 0;
  v11 = 0xE000000000000000;
  _StringGuts.grow(_:)(33);
  v7 = v11;
  *(_QWORD *)(v0 + 32) = v10;
  *(_QWORD *)(v0 + 40) = v7;
  v8._countAndFlagsBits = 0xD00000000000001FLL;
  v8._object = (void *)0x8000000240A85830;
  String.append(_:)(v8);
  *(_QWORD *)(v0 + 56) = v1;
  _print_unlocked<A, B>(_:_:)();
  specialized static LACPreboardErrorBuilder.error(code:message:)(3, *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40));
  swift_bridgeObjectRelease();
  swift_willThrow();

  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t LACPreboardController.finishPreboard(success:reason:)(char a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)(v4 + 48) = a3;
  *(_QWORD *)(v4 + 56) = v3;
  *(_QWORD *)(v4 + 40) = a2;
  *(_BYTE *)(v4 + 96) = a1;
  type metadata accessor for LACLogger();
  *(_QWORD *)(v4 + 64) = swift_task_alloc();
  *(_QWORD *)(v4 + 72) = swift_task_alloc();
  return swift_task_switch();
}

uint64_t LACPreboardController.finishPreboard(success:reason:)()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  id v6;
  Swift::String v7;
  Swift::String v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  Swift::String v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t (*v17)(_QWORD, uint64_t, uint64_t);
  Swift::String v18;

  v1 = *(_QWORD *)(v0 + 72);
  v2 = *(void **)(v0 + 48);
  v3 = *(_QWORD *)(v0 + 56);
  v4 = *(_QWORD *)(v0 + 40);
  v5 = *(unsigned __int8 *)(v0 + 96);
  v6 = LACLogPreboard();
  Logger.init(_:)();
  _StringGuts.grow(_:)(46);
  swift_bridgeObjectRelease();
  v18._countAndFlagsBits = 0xD000000000000020;
  v18._object = (void *)0x8000000240A85870;
  v7._countAndFlagsBits = v4;
  v7._object = v2;
  String.append(_:)(v7);
  v8._countAndFlagsBits = 0x7373656363757320;
  v8._object = (void *)0xEA0000000000203ALL;
  String.append(_:)(v8);
  if (v5)
    v9 = 1702195828;
  else
    v9 = 0x65736C6166;
  if (v5)
    v10 = 0xE400000000000000;
  else
    v10 = 0xE500000000000000;
  v11 = v10;
  String.append(_:)(*(Swift::String *)&v9);
  swift_bridgeObjectRelease();
  v12 = v18;
  LOBYTE(v18._countAndFlagsBits) = 2;
  LACLogger.log(level:_:)((LocalAuthenticationCore::LACLogger::Level)&v18, v12);
  swift_bridgeObjectRelease();
  outlined destroy of LACLogger(v1);
  v13 = *(_QWORD *)(v3 + OBJC_IVAR____TtC23LocalAuthenticationCore21LACPreboardController_useCaseProvider + 24);
  v14 = *(_QWORD *)(v3 + OBJC_IVAR____TtC23LocalAuthenticationCore21LACPreboardController_useCaseProvider + 32);
  __swift_project_boxed_opaque_existential_1((_QWORD *)(v3 + OBJC_IVAR____TtC23LocalAuthenticationCore21LACPreboardController_useCaseProvider), v13);
  v17 = (uint64_t (*)(_QWORD, uint64_t, uint64_t))(**(int **)(v14 + 16) + *(_QWORD *)(v14 + 16));
  v15 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 80) = v15;
  *v15 = v0;
  v15[1] = LACPreboardController.finishPreboard(success:reason:);
  return v17(*(unsigned __int8 *)(v0 + 96), v13, v14);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(v2 + 88) = v0;
  swift_task_dealloc();
  if (v0)
    return swift_task_switch();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  id v3;
  Swift::String v4;
  Swift::String v5;
  void *v6;
  _QWORD v8[3];

  v1 = *(_QWORD *)(v0 + 88);
  v2 = *(_QWORD *)(v0 + 64);
  v3 = LACLogPreboard();
  Logger.init(_:)();
  v8[0] = 0;
  v8[1] = 0xE000000000000000;
  _StringGuts.grow(_:)(43);
  *(_QWORD *)(v0 + 16) = 0;
  *(_QWORD *)(v0 + 24) = 0xE000000000000000;
  v4._object = (void *)0x8000000240A858A0;
  v4._countAndFlagsBits = 0xD000000000000029;
  String.append(_:)(v4);
  *(_QWORD *)(v0 + 32) = v1;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
  _print_unlocked<A, B>(_:_:)();
  v5._countAndFlagsBits = *(_QWORD *)(v0 + 16);
  v6 = *(void **)(v0 + 24);
  LOBYTE(v8[0]) = 3;
  v5._object = v6;
  LACLogger.log(level:_:)((LocalAuthenticationCore::LACLogger::Level)v8, v5);
  swift_bridgeObjectRelease();
  outlined destroy of LACLogger(v2);
  swift_willThrow();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t @objc closure #1 in LACPreboardController.enableCurrentUseCase(withPasscode:)(int a1, void *aBlock, void *a3)
{
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v3[2] = a3;
  v3[3] = _Block_copy(aBlock);
  v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v7 = v6;
  v3[4] = v6;
  a3;
  v8 = (_QWORD *)swift_task_alloc();
  v3[5] = v8;
  *v8 = v3;
  v8[1] = @objc closure #1 in LACPreboardController.enableCurrentUseCase(withPasscode:);
  return LACPreboardController.enableCurrentUseCase(withPasscode:)(v5, v7);
}

uint64_t @objc closure #1 in LACPreboardController.enableCurrentUseCase(withPasscode:)()
{
  void *v0;
  uint64_t *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;

  v2 = *(void **)(*v1 + 16);
  v3 = *v1;
  swift_task_dealloc();

  swift_bridgeObjectRelease();
  v4 = *(_QWORD *)(v3 + 24);
  if (v0)
  {
    v5 = (void *)_convertErrorToNSError(_:)();

    (*(void (**)(uint64_t, void *))(v4 + 16))(v4, v5);
  }
  else
  {
    (*(void (**)(_QWORD, _QWORD))(v4 + 16))(*(_QWORD *)(v3 + 24), 0);
  }
  _Block_release(*(const void **)(v3 + 24));
  return (*(uint64_t (**)(void))(v3 + 8))();
}

uint64_t @objc closure #1 in LACPreboardController.terminate()(const void *a1, void *a2)
{
  _QWORD *v2;
  _QWORD *v4;

  v2[2] = a2;
  v2[3] = _Block_copy(a1);
  a2;
  v4 = (_QWORD *)swift_task_alloc();
  v2[4] = v4;
  *v4 = v2;
  v4[1] = @objc closure #1 in LACPreboardController.terminate();
  return LACPreboardController.terminate()();
}

id LACPreboardController.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

void LACPreboardController.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

id LACPreboardController.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t LACPreboardController.acmContext(for:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int (*v26)(uint64_t, uint64_t, uint64_t);
  uint64_t v27;
  char *v28;
  char v29;
  void (*v30)(char *, uint64_t);
  void *v32;
  void *v33;
  _QWORD v34[2];
  uint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  _QWORD v40[3];
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;

  v3 = v1;
  v43 = a1;
  v4 = type metadata accessor for UUID();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v38 = (char *)v34 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (UUID?, UUID?));
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)v34 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  v11 = MEMORY[0x24BDAC7A8](v10);
  v39 = (uint64_t)v34 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v11);
  v14 = (char *)v34 - v13;
  LACPreboardController.contextProvider.getter((uint64_t)v40);
  v15 = v41;
  if (v41)
  {
    v36 = v5;
    v37 = v9;
    v34[1] = v2;
    v16 = v42;
    v17 = __swift_project_boxed_opaque_existential_1(v40, v41);
    v18 = *(_QWORD *)(v15 - 8);
    MEMORY[0x24BDAC7A8](v17);
    v20 = (char *)v34 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *))(v18 + 16))(v20);
    outlined destroy of AsyncStream<()>.Continuation?((uint64_t)v40, &demangling cache variable for type metadata for LACACMContextProviding?);
    v35 = (*(uint64_t (**)(uint64_t, uint64_t))(v16 + 8))(v15, v16);
    v22 = v21;
    (*(void (**)(char *, uint64_t))(v18 + 8))(v20, v15);
    if (v22 >> 60 != 15)
    {
      v23 = v36;
      (*(void (**)(char *, uint64_t, uint64_t))(v36 + 16))(v14, v3 + OBJC_IVAR____TtC23LocalAuthenticationCore21LACPreboardController_uuid, v4);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v23 + 56))(v14, 0, 1, v4);
      v24 = (uint64_t)v37;
      v25 = (uint64_t)&v37[*(int *)(v7 + 48)];
      outlined init with copy of URL?((uint64_t)v14, (uint64_t)v37, (uint64_t *)&demangling cache variable for type metadata for UUID?);
      outlined init with copy of URL?(v43, v25, (uint64_t *)&demangling cache variable for type metadata for UUID?);
      v26 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v23 + 48);
      if (v26(v24, 1, v4) == 1)
      {
        outlined destroy of AsyncStream<()>.Continuation?((uint64_t)v14, (uint64_t *)&demangling cache variable for type metadata for UUID?);
        if (v26(v25, 1, v4) == 1)
        {
          outlined destroy of AsyncStream<()>.Continuation?(v24, (uint64_t *)&demangling cache variable for type metadata for UUID?);
          return v35;
        }
      }
      else
      {
        v27 = v39;
        outlined init with copy of URL?(v24, v39, (uint64_t *)&demangling cache variable for type metadata for UUID?);
        if (v26(v25, 1, v4) != 1)
        {
          v28 = v38;
          (*(void (**)(char *, uint64_t, uint64_t))(v23 + 32))(v38, v25, v4);
          lazy protocol witness table accessor for type LACPolicy and conformance LACPolicy((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEA98]);
          v29 = dispatch thunk of static Equatable.== infix(_:_:)();
          v30 = *(void (**)(char *, uint64_t))(v23 + 8);
          v30(v28, v4);
          outlined destroy of AsyncStream<()>.Continuation?((uint64_t)v14, (uint64_t *)&demangling cache variable for type metadata for UUID?);
          v30((char *)v27, v4);
          outlined destroy of AsyncStream<()>.Continuation?(v24, (uint64_t *)&demangling cache variable for type metadata for UUID?);
          if ((v29 & 1) != 0)
            return v35;
          goto LABEL_12;
        }
        outlined destroy of AsyncStream<()>.Continuation?((uint64_t)v14, (uint64_t *)&demangling cache variable for type metadata for UUID?);
        (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v27, v4);
      }
      outlined destroy of AsyncStream<()>.Continuation?(v24, (uint64_t *)&demangling cache variable for type metadata for (UUID?, UUID?));
LABEL_12:
      outlined consume of Data?(v35, v22);
    }
  }
  else
  {
    outlined destroy of AsyncStream<()>.Continuation?((uint64_t)v40, &demangling cache variable for type metadata for LACACMContextProviding?);
  }
  v32 = (void *)objc_opt_self();
  v33 = (void *)MEMORY[0x2426863FC](0x63204D4341206F4ELL, 0xEE00747865746E6FLL);
  objc_msgSend(v32, sel_errorWithCode_debugDescription_, -1000, v33);

  return swift_willThrow();
}

uint64_t LACPreboardController.bundleID(for:)()
{
  return 0;
}

id LACPreboardController.storageRequest(for:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t *v7;
  void *v8;
  id v9;
  id result;
  Swift::String v11;
  _QWORD v12[4];

  v3 = type metadata accessor for UUID();
  MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1 == 4)
  {
    v7 = &LACStorageKeyDeveloperMode;
LABEL_5:
    v8 = (void *)*v7;
    (*(void (**)(char *, uint64_t))(v4 + 16))(v6, v1 + OBJC_IVAR____TtC23LocalAuthenticationCore21LACPreboardController_uuid);
    v9 = objc_allocWithZone((Class)type metadata accessor for LACPreboardStorageRequest());
    return LACPreboardStorageRequest.init(for:contextID:)(v8, (uint64_t)v6);
  }
  if (a1 == 3)
  {
    v7 = &LACStorageKeyUPP;
    goto LABEL_5;
  }
  v12[2] = 0;
  v12[3] = 0xE000000000000000;
  _StringGuts.grow(_:)(31);
  v11._object = (void *)0x8000000240A85810;
  v11._countAndFlagsBits = 0xD00000000000001DLL;
  String.append(_:)(v11);
  v12[1] = a1;
  type metadata accessor for LACPreboardUseCase(0);
  _print_unlocked<A, B>(_:_:)();
  result = (id)_assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

_BYTE *closure #1 in Data.init<A>(_:)@<X0>(_BYTE *result@<X0>, _BYTE *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if (!result)
    goto LABEL_4;
  v4 = a2 - result;
  if (a2 == result)
  {
    result = 0;
LABEL_4:
    v5 = 0xC000000000000000;
    goto LABEL_5;
  }
  if (v4 <= 14)
  {
    result = (_BYTE *)specialized Data.InlineData.init(_:)(result, a2);
    v5 = v7 & 0xFFFFFFFFFFFFFFLL;
  }
  else if ((unint64_t)v4 >= 0x7FFFFFFF)
  {
    result = (_BYTE *)specialized Data.LargeSlice.init(_:)((uint64_t)result, (uint64_t)a2);
    v5 = v8 | 0x8000000000000000;
  }
  else
  {
    result = (_BYTE *)specialized Data.InlineSlice.init(_:)((uint64_t)result, (uint64_t)a2);
    v5 = v6 | 0x4000000000000000;
  }
LABEL_5:
  *a3 = result;
  a3[1] = v5;
  return result;
}

char *specialized LACPreboardController.init(contextProviderFactory:launcher:passcodeVerifier:secureStorage:uppManager:useCaseProvider:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  void *v6;
  void *v7;
  objc_class *ObjectType;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  objc_super v20;

  v7 = v6;
  ObjectType = (objc_class *)swift_getObjectType();
  v15 = v7;
  UUID.init()();
  v16 = &v15[OBJC_IVAR____TtC23LocalAuthenticationCore21LACPreboardController____lazy_storage___contextProvider];
  *((_QWORD *)v16 + 1) = 0;
  *((_QWORD *)v16 + 2) = 0;
  *(_QWORD *)v16 = 0;
  *(_OWORD *)(v16 + 24) = xmmword_240A7D340;
  v17 = &v15[OBJC_IVAR____TtC23LocalAuthenticationCore21LACPreboardController_launchResult];
  *(_QWORD *)v17 = 0;
  v17[8] = -1;
  *(_QWORD *)&v15[OBJC_IVAR____TtC23LocalAuthenticationCore21LACPreboardController____lazy_storage___launchDispatchQueue] = 0;
  *(_QWORD *)&v15[OBJC_IVAR____TtC23LocalAuthenticationCore21LACPreboardController_contextProviderFactory] = a1;
  outlined init with copy of LACOnenessSessionProviding(a2, (uint64_t)&v15[OBJC_IVAR____TtC23LocalAuthenticationCore21LACPreboardController_launcher]);
  outlined init with copy of LACOnenessSessionProviding(a3, (uint64_t)&v15[OBJC_IVAR____TtC23LocalAuthenticationCore21LACPreboardController_passcodeVerifier]);
  *(_QWORD *)&v15[OBJC_IVAR____TtC23LocalAuthenticationCore21LACPreboardController_secureStorage] = a4;
  outlined init with copy of LACOnenessSessionProviding(a5, (uint64_t)&v15[OBJC_IVAR____TtC23LocalAuthenticationCore21LACPreboardController_uppManager]);
  outlined init with copy of LACOnenessSessionProviding(a6, (uint64_t)&v15[OBJC_IVAR____TtC23LocalAuthenticationCore21LACPreboardController_useCaseProvider]);
  swift_retain();
  swift_unknownObjectRetain();

  v20.receiver = v15;
  v20.super_class = ObjectType;
  v18 = (char *)objc_msgSendSuper2(&v20, sel_init);
  objc_msgSend(*(id *)&v18[OBJC_IVAR____TtC23LocalAuthenticationCore21LACPreboardController_secureStorage], sel_setDelegate_, v18);
  __swift_destroy_boxed_opaque_existential_1(a6);
  __swift_destroy_boxed_opaque_existential_1(a5);
  __swift_destroy_boxed_opaque_existential_1(a3);
  __swift_destroy_boxed_opaque_existential_1(a2);
  return v18;
}

void partial apply for closure #1 in LACPreboardController.launchPreboard()(BOOL *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  int v4;
  void *v5;

  v3 = *(_QWORD *)(v1 + 16) + OBJC_IVAR____TtC23LocalAuthenticationCore21LACPreboardController_launchResult;
  v4 = *(unsigned __int8 *)(v3 + 8);
  if (v4 == 255)
  {
    v5 = *(void **)v3;
    *(_QWORD *)v3 = 0;
    *(_BYTE *)(v3 + 8) = 0;
    outlined consume of Result<(), Error>?(v5, 0xFFu);
  }
  *a1 = v4 == 255;
}

uint64_t sub_240A45754()
{
  uint64_t v0;

  swift_unknownObjectRelease();

  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in LACPreboardController.launchPreboard()(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v4 = v1[2];
  v5 = v1[3];
  v7 = v1[4];
  v6 = v1[5];
  v8 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v8;
  *v8 = v2;
  v8[1] = dispatch thunk of LACUserDefaultsPersistentStore.removeObject(forKey:);
  return closure #2 in LACPreboardController.launchPreboard()(a1, v4, v5, v7, v6);
}

uint64_t sub_240A45800()
{
  uint64_t v0;

  swift_unknownObjectRelease();

  return swift_deallocObject();
}

uint64_t partial apply for closure #3 in LACPreboardController.launchPreboard()()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = dispatch thunk of LACUserDefaultsPersistentStore.setData(_:forKey:);
  return closure #3 in LACPreboardController.launchPreboard()();
}

void outlined consume of Result<(), Error>?(void *a1, unsigned __int8 a2)
{
  if (a2 != 255)
    outlined consume of Result<(), Error>(a1, a2 & 1);
}

void outlined consume of Result<(), Error>(id a1, char a2)
{
  if ((a2 & 1) != 0)

}

void partial apply for closure #4 in LACPreboardController.launchPreboard()()
{
  uint64_t v0;

  closure #4 in LACPreboardController.launchPreboard()(*(_QWORD *)(v0 + 16));
}

uint64_t ObjC metadata update function for LACPreboardController()
{
  return type metadata accessor for LACPreboardController();
}

uint64_t type metadata accessor for LACPreboardController()
{
  uint64_t result;

  result = type metadata singleton initialization cache for LACPreboardController;
  if (!type metadata singleton initialization cache for LACPreboardController)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t type metadata completion function for LACPreboardController()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    result = swift_updateClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t method lookup function for LACPreboardController()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of LACPreboardController.__allocating_init(contextProviderFactory:launcher:passcodeVerifier:secureStorage:uppManager:useCaseProvider:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 160))();
}

uint64_t partial apply for @objc closure #1 in LACPreboardController.terminate()()
{
  uint64_t v0;
  uint64_t v1;
  const void *v2;
  void *v3;
  _QWORD *v4;

  v2 = *(const void **)(v0 + 16);
  v3 = *(void **)(v0 + 24);
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v4;
  *v4 = v1;
  v4[1] = dispatch thunk of LACUserDefaultsPersistentStore.setData(_:forKey:);
  return ((uint64_t (*)(const void *, void *))((char *)&async function pointer to @objc closure #1 in LACPreboardController.terminate()
                                                       + async function pointer to @objc closure #1 in LACPreboardController.terminate()))(v2, v3);
}

uint64_t sub_240A45A4C()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 24));
  return swift_deallocObject();
}

uint64_t partial apply for @objc closure #1 in LACPreboardController.enableCurrentUseCase(withPasscode:)()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  void *v4;
  _QWORD *v5;

  v2 = v0[2];
  v3 = (void *)v0[3];
  v4 = (void *)v0[4];
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v5;
  *v5 = v1;
  v5[1] = dispatch thunk of LACUserDefaultsPersistentStore.setData(_:forKey:);
  return ((uint64_t (*)(int, void *, void *))((char *)&async function pointer to @objc closure #1 in LACPreboardController.enableCurrentUseCase(withPasscode:)
                                                      + async function pointer to @objc closure #1 in LACPreboardController.enableCurrentUseCase(withPasscode:)))(v2, v3, v4);
}

uint64_t objectdestroy_18Tm()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));

  return swift_deallocObject();
}

uint64_t partial apply for @objc closure #1 in LACPreboardController.launchPreboard()()
{
  uint64_t v0;
  uint64_t v1;
  const void *v2;
  void *v3;
  _QWORD *v4;

  v2 = *(const void **)(v0 + 16);
  v3 = *(void **)(v0 + 24);
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v4;
  *v4 = v1;
  v4[1] = dispatch thunk of LACUserDefaultsPersistentStore.setData(_:forKey:);
  return ((uint64_t (*)(const void *, void *))((char *)&async function pointer to @objc closure #1 in LACPreboardController.launchPreboard()
                                                       + async function pointer to @objc closure #1 in LACPreboardController.launchPreboard()))(v2, v3);
}

uint64_t specialized Data.InlineData.init(_:)(_BYTE *__src, _BYTE *a2)
{
  unint64_t v2;
  _BYTE __dst[14];
  char v5;
  uint64_t v6;

  v6 = *MEMORY[0x24BDAC8D0];
  if (__src)
    v2 = a2 - __src;
  else
    v2 = 0;
  if ((v2 & 0x8000000000000000) != 0)
  {
    __break(1u);
LABEL_11:
    __break(1u);
  }
  if (v2 > 0xFF)
    goto LABEL_11;
  memset(__dst, 0, sizeof(__dst));
  v5 = v2;
  if (__src && a2 != __src)
    memcpy(__dst, __src, a2 - __src);
  return *(_QWORD *)__dst;
}

uint64_t specialized Data.LargeSlice.init(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  if (a1)
    v2 = a2 - a1;
  else
    v2 = 0;
  type metadata accessor for __DataStorage();
  swift_allocObject();
  result = __DataStorage.init(bytes:length:)();
  if (v2 < 0)
  {
    __break(1u);
  }
  else
  {
    type metadata accessor for Data.RangeReference();
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = v2;
  }
  return result;
}

uint64_t specialized Data.InlineSlice.init(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  if (a1)
    v2 = a2 - a1;
  else
    v2 = 0;
  type metadata accessor for __DataStorage();
  swift_allocObject();
  result = __DataStorage.init(bytes:length:)();
  if (v2 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v2 > 0x7FFFFFFF)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  if ((v2 & 0x80000000) == 0)
    return v2 << 32;
LABEL_10:
  __break(1u);
  return result;
}

uint64_t specialized Data.init<A>(_:)(uint64_t a1)
{
  _QWORD *v2;
  _BYTE *v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v7;
  _QWORD v8[3];
  uint64_t v9;
  uint64_t v10;

  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UInt8]);
  v10 = lazy protocol witness table accessor for type CurrentValueSubject<Bool?, Never> and conformance CurrentValueSubject<A, B>((unint64_t *)&lazy protocol witness table cache variable for type [UInt8] and conformance <A> [A], &demangling cache variable for type metadata for [UInt8], MEMORY[0x24BDCFBE0]);
  v8[0] = a1;
  v2 = __swift_project_boxed_opaque_existential_1(v8, v9);
  v3 = (_BYTE *)(*v2 + 32);
  v4 = &v3[*(_QWORD *)(*v2 + 16)];
  swift_bridgeObjectRetain();
  closure #1 in Data.init<A>(_:)(v3, v4, &v7);
  v5 = v7;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v8);
  return v5;
}

uint64_t outlined assign with take of LACACMContextProviding??(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for LACACMContextProviding??);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with take of LACACMContextProviding?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LACACMContextProviding?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

id outlined copy of Result<(), Error>?(id result, unsigned __int8 a2)
{
  if (a2 != 255)
    return outlined copy of Result<(), Error>(result, a2 & 1);
  return result;
}

id outlined copy of Result<(), Error>(id result, char a2)
{
  if ((a2 & 1) != 0)
    return result;
  return result;
}

uint64_t thunk for @escaping @callee_unowned @convention(block) (@unowned LACEvaluationResult) -> ()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 16))(a2, a1);
}

uint64_t specialized Sequence<>.contains(_:)(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t i;
  uint64_t v4;
  _BOOL8 v5;
  BOOL v6;

  v2 = *(_QWORD *)(a2 + 16);
  if (!v2)
    return 0;
  if (*(_QWORD *)(a2 + 32) == result)
    return 1;
  if (v2 == 1)
    return 0;
  for (i = 5; ; ++i)
  {
    v4 = i - 3;
    if (__OFADD__(i - 4, 1))
      break;
    v6 = *(_QWORD *)(a2 + 8 * i) == result;
    v5 = v6;
    v6 = v6 || v4 == v2;
    if (v6)
      return v5;
  }
  __break(1u);
  return result;
}

uint64_t LACEvaluationRequestCompoundProcessor.processors.getter()
{
  return swift_bridgeObjectRetain();
}

id LACEvaluationRequestCompoundProcessor.__allocating_init(processors:)(uint64_t a1)
{
  objc_class *v1;
  char *v3;
  char *v4;
  objc_super v6;

  v3 = (char *)objc_allocWithZone(v1);
  *(_QWORD *)&v3[OBJC_IVAR____TtC23LocalAuthenticationCore37LACEvaluationRequestCompoundProcessor_nextProcessor] = 0;
  v4 = &v3[OBJC_IVAR____TtC23LocalAuthenticationCore37LACEvaluationRequestCompoundProcessor_currentProcessorIndex];
  *(_QWORD *)v4 = 0;
  v4[8] = 1;
  *(_QWORD *)&v3[OBJC_IVAR____TtC23LocalAuthenticationCore37LACEvaluationRequestCompoundProcessor_involvedProcessorIndices] = MEMORY[0x24BEE4AF8];
  *(_QWORD *)&v3[OBJC_IVAR____TtC23LocalAuthenticationCore37LACEvaluationRequestCompoundProcessor_processors] = a1;
  v6.receiver = v3;
  v6.super_class = v1;
  return objc_msgSendSuper2(&v6, sel_init);
}

id LACEvaluationRequestCompoundProcessor.init(processors:)(uint64_t a1)
{
  char *v1;
  objc_class *ObjectType;
  char *v4;
  objc_super v6;

  ObjectType = (objc_class *)swift_getObjectType();
  *(_QWORD *)&v1[OBJC_IVAR____TtC23LocalAuthenticationCore37LACEvaluationRequestCompoundProcessor_nextProcessor] = 0;
  v4 = &v1[OBJC_IVAR____TtC23LocalAuthenticationCore37LACEvaluationRequestCompoundProcessor_currentProcessorIndex];
  *(_QWORD *)v4 = 0;
  v4[8] = 1;
  *(_QWORD *)&v1[OBJC_IVAR____TtC23LocalAuthenticationCore37LACEvaluationRequestCompoundProcessor_involvedProcessorIndices] = MEMORY[0x24BEE4AF8];
  *(_QWORD *)&v1[OBJC_IVAR____TtC23LocalAuthenticationCore37LACEvaluationRequestCompoundProcessor_processors] = a1;
  v6.receiver = v1;
  v6.super_class = ObjectType;
  return objc_msgSendSuper2(&v6, sel_init);
}

uint64_t LACEvaluationRequestCompoundProcessor.canProcessRequest(_:)()
{
  return 1;
}

void LACEvaluationRequestCompoundProcessor.processRequest(_:configuration:completion:)(void *a1, id a2, void (*a3)(void), uint64_t a4)
{
  char *v4;
  char *v5;
  unint64_t v10;
  id v11;
  id v12;
  uint64_t v13;
  void *v14;
  void *v15;
  Swift::String v16;
  void *v17;
  Swift::String v18;
  void *v19;
  id v20;
  void *v21;
  void *v22;
  uint64_t v23;
  id v24;
  id v25;

  v5 = v4;
  if (v4[OBJC_IVAR____TtC23LocalAuthenticationCore37LACEvaluationRequestCompoundProcessor_currentProcessorIndex + 8] == 1)
  {
    v10 = *(_QWORD *)&v5[OBJC_IVAR____TtC23LocalAuthenticationCore37LACEvaluationRequestCompoundProcessor_processors];
    if (v10 >> 62)
    {
      swift_bridgeObjectRetain();
      v23 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (v23)
        goto LABEL_4;
    }
    else if (*(_QWORD *)((v10 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
LABEL_4:
      v11 = objc_msgSend(a2, sel_nextProcessor);
      *(_QWORD *)&v5[OBJC_IVAR____TtC23LocalAuthenticationCore37LACEvaluationRequestCompoundProcessor_nextProcessor] = v11;
      swift_unknownObjectRelease();
      LACEvaluationRequestCompoundProcessor.processRequest(_:subProcessorIndex:completion:)(a1, 0, a3, a4);
      return;
    }
    v25 = objc_msgSend((id)objc_opt_self(), sel_resultWithNext_, a1);
    a3();

  }
  else
  {
    _StringGuts.grow(_:)(17);
    swift_bridgeObjectRelease();
    v12 = objc_msgSend(v4, sel_description);
    v13 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v15 = v14;

    v16._countAndFlagsBits = v13;
    v16._object = v15;
    String.append(_:)(v16);
    swift_bridgeObjectRelease();
    v17 = (void *)objc_opt_self();
    v18._countAndFlagsBits = 0x7973756220;
    v18._object = (void *)0xE500000000000000;
    String.append(_:)(v18);
    v19 = (void *)MEMORY[0x2426863FC](0x6F737365636F7250, 0xEA00000000002072);
    swift_bridgeObjectRelease();
    v20 = objc_msgSend(v17, sel_errorWithCode_debugDescription_, -1000, v19);

    v21 = (void *)objc_opt_self();
    v22 = (void *)_convertErrorToNSError(_:)();
    v24 = objc_msgSend(v21, sel_resultWithFailure_, v22);

    ((void (*)(id))a3)(v24);
  }
}

void LACEvaluationRequestCompoundProcessor.processRequest(_:subProcessorIndex:completion:)(void *a1, uint64_t a2, void (*a3)(void), uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  unint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v17;
  unint64_t v18;
  id v19;
  id v20;
  uint64_t v21;
  _QWORD *v22;
  void *v23;
  id v24;
  Swift::String v25;
  Swift::String v26;
  id v27;
  uint64_t v28;
  void *v29;
  void *v30;
  Swift::String v31;
  Swift::String v32;
  _QWORD *v33;
  id v34;
  Swift::String aBlock;
  void (*v36)(uint64_t, void *);
  void *v37;
  uint64_t (*v38)();
  _QWORD *v39;
  unsigned int v40;

  v5 = v4;
  v10 = type metadata accessor for LACLogger();
  MEMORY[0x24BDAC7A8](v10);
  v12 = (id *)((char *)&v34 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  v13 = *(_QWORD *)(v4 + OBJC_IVAR____TtC23LocalAuthenticationCore37LACEvaluationRequestCompoundProcessor_processors);
  if (!(v13 >> 62))
  {
    v14 = *(_QWORD **)((v13 & 0xFFFFFFFFFFFFF8) + 0x10);
    if ((uint64_t)v14 > a2)
      goto LABEL_3;
LABEL_14:
    v34 = objc_msgSend((id)objc_opt_self(), sel_resultWithNext_, a1);
    a3();

    return;
  }
  swift_bridgeObjectRetain();
  v14 = (_QWORD *)_CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if ((uint64_t)v14 <= a2)
    goto LABEL_14;
LABEL_3:
  v15 = v5 + OBJC_IVAR____TtC23LocalAuthenticationCore37LACEvaluationRequestCompoundProcessor_currentProcessorIndex;
  *(_QWORD *)v15 = a2;
  *(_BYTE *)(v15 + 8) = 0;
  if ((v13 & 0xC000000000000001) != 0)
  {
    v14 = (_QWORD *)MEMORY[0x24268672C](a2, v13);
LABEL_7:
    if (!objc_msgSend(v14, sel_canProcessRequest_, a1))
    {
      v24 = LACLogDefault();
      Logger.init(_:)();
      aBlock._countAndFlagsBits = 0;
      aBlock._object = (void *)0xE000000000000000;
      _StringGuts.grow(_:)(44);
      swift_bridgeObjectRelease();
      aBlock._countAndFlagsBits = 0xD000000000000024;
      aBlock._object = (void *)0x8000000240A85A60;
      v40 = objc_msgSend(a1, sel_identifier);
      v25._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v25);
      swift_bridgeObjectRelease();
      v26._countAndFlagsBits = 544825888;
      v26._object = (void *)0xE400000000000000;
      String.append(_:)(v26);
      v27 = objc_msgSend(v14, sel_description);
      v28 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v30 = v29;

      v31._countAndFlagsBits = v28;
      v31._object = v30;
      String.append(_:)(v31);
      swift_bridgeObjectRelease();
      v32 = aBlock;
      LOBYTE(aBlock._countAndFlagsBits) = 2;
      LACLogger.log(level:_:)((LocalAuthenticationCore::LACLogger::Level)&aBlock, v32);
      swift_bridgeObjectRelease();
      outlined destroy of LACLogger((uint64_t)v12);
      LACEvaluationRequestCompoundProcessor.processRequest(_:subProcessorIndex:completion:)(a1, a2 + 1, a3, a4);
      swift_unknownObjectRelease();
      return;
    }
    v13 = v5 + OBJC_IVAR____TtC23LocalAuthenticationCore37LACEvaluationRequestCompoundProcessor_involvedProcessorIndices;
    swift_beginAccess();
    v12 = *(_QWORD **)v13;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(_QWORD *)v13 = v12;
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      goto LABEL_9;
    goto LABEL_18;
  }
  if (a2 < 0)
  {
    __break(1u);
  }
  else if (*(_QWORD *)((v13 & 0xFFFFFFFFFFFFF8) + 0x10) > (unint64_t)a2)
  {
    v14 = *(_QWORD **)(v13 + 8 * a2 + 32);
    swift_unknownObjectRetain();
    goto LABEL_7;
  }
  __break(1u);
LABEL_18:
  v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v12[2] + 1, 1, v12);
  *(_QWORD *)v13 = v12;
LABEL_9:
  v18 = v12[2];
  v17 = v12[3];
  v19 = (id)(v18 + 1);
  if (v18 >= v17 >> 1)
  {
    v34 = (id)(v18 + 1);
    v33 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v17 > 1), v18 + 1, 1, v12);
    v19 = v34;
    v12 = v33;
    *(_QWORD *)v13 = v33;
  }
  v12[2] = v19;
  v12[v18 + 4] = a2;
  swift_endAccess();
  v20 = objc_msgSend(objc_allocWithZone((Class)LACProcessingConfiguration), sel_initWithNextProcessor_, LACEvaluationRequestCompoundProcessor.nextProcessor(after:)(a2));
  v21 = swift_allocObject();
  swift_unknownObjectWeakInit();
  v22 = (_QWORD *)swift_allocObject();
  v22[2] = v21;
  v22[3] = a3;
  v22[4] = a4;
  v22[5] = a2;
  v38 = closure #1 in LACEvaluationRequestCompoundProcessor.processRequest(_:subProcessorIndex:completion:)partial apply;
  v39 = v22;
  aBlock._countAndFlagsBits = MEMORY[0x24BDAC760];
  aBlock._object = (void *)1107296256;
  v36 = thunk for @escaping @callee_guaranteed (@guaranteed LACDTOLocationState) -> ();
  v37 = &block_descriptor_39_0;
  v23 = _Block_copy(&aBlock);
  swift_retain();
  swift_release();
  objc_msgSend(v14, sel_processRequest_configuration_completion_, a1, v20, v23);
  _Block_release(v23);
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();

}

uint64_t LACEvaluationRequestCompoundProcessor.postProcessRequest(_:result:completion:)(uint64_t a1, uint64_t a2, void (*a3)(uint64_t), uint64_t a4)
{
  uint64_t v4;
  unint64_t v10;
  uint64_t v11;

  if ((*(_BYTE *)(v4
                 + OBJC_IVAR____TtC23LocalAuthenticationCore37LACEvaluationRequestCompoundProcessor_currentProcessorIndex
                 + 8) & 1) != 0)
    return ((uint64_t (*)(uint64_t))a3)(a2);
  v10 = *(_QWORD *)(v4
                  + OBJC_IVAR____TtC23LocalAuthenticationCore37LACEvaluationRequestCompoundProcessor_currentProcessorIndex);
  v11 = swift_allocObject();
  swift_unknownObjectWeakInit();
  swift_retain();
  specialized LACEvaluationRequestCompoundProcessor.postProcessRequest(_:result:subProcessorIndex:completion:)(a1, a2, v10, v4, v11, a3, a4);
  swift_release();
  return swift_release();
}

uint64_t sub_240A468B4()
{
  swift_unknownObjectWeakDestroy();
  return swift_deallocObject();
}

void closure #1 in LACEvaluationRequestCompoundProcessor.postProcessRequest(_:result:completion:)(uint64_t a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  _QWORD *v12;
  id v13;
  Swift::String v14;
  _BYTE v15[24];

  v6 = type metadata accessor for LACLogger();
  MEMORY[0x24BDAC7A8](v6);
  v8 = &v15[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  swift_beginAccess();
  v9 = MEMORY[0x242687740](a2 + 16);
  if (v9)
  {
    v10 = (char *)v9;
    v11 = v9 + OBJC_IVAR____TtC23LocalAuthenticationCore37LACEvaluationRequestCompoundProcessor_currentProcessorIndex;
    *(_QWORD *)v11 = 0;
    *(_BYTE *)(v11 + 8) = 1;
    v12 = (_QWORD *)(v9
                   + OBJC_IVAR____TtC23LocalAuthenticationCore37LACEvaluationRequestCompoundProcessor_involvedProcessorIndices);
    swift_beginAccess();
    *v12 = MEMORY[0x24BEE4AF8];
    swift_bridgeObjectRelease();
    *(_QWORD *)&v10[OBJC_IVAR____TtC23LocalAuthenticationCore37LACEvaluationRequestCompoundProcessor_nextProcessor] = 0;
    swift_unknownObjectRelease();
    a3(a1);

  }
  else
  {
    v13 = LACLogProcessor();
    Logger.init(_:)();
    v15[0] = 3;
    v14._object = (void *)0x8000000240A85B30;
    v14._countAndFlagsBits = 0xD000000000000056;
    LACLogger.log(level:_:)((LocalAuthenticationCore::LACLogger::Level)v15, v14);
    outlined destroy of LACLogger((uint64_t)v8);
  }
}

uint64_t LACEvaluationRequestCompoundProcessor.postProcessRequest(_:result:subProcessorIndex:completion:)(uint64_t result, uint64_t a2, unint64_t a3, uint64_t (*a4)(uint64_t), uint64_t a5)
{
  uint64_t v5;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t *v13;
  uint64_t v14;
  _QWORD *v15;
  void *v16;
  _QWORD aBlock[6];

  if ((a3 & 0x8000000000000000) != 0)
    return a4(a2);
  v10 = result;
  v11 = *(_QWORD *)(v5 + OBJC_IVAR____TtC23LocalAuthenticationCore37LACEvaluationRequestCompoundProcessor_processors);
  if ((v11 & 0xC000000000000001) != 0)
  {
    v12 = (void *)MEMORY[0x24268672C](a3);
  }
  else
  {
    if (*(_QWORD *)((v11 & 0xFFFFFFFFFFFFF8) + 0x10) <= a3)
    {
      __break(1u);
      return result;
    }
    v12 = *(void **)(v11 + 8 * a3 + 32);
    swift_unknownObjectRetain();
  }
  if (((objc_msgSend(v12, sel_canProcessRequest_, v10) & 1) != 0
     || (v13 = (uint64_t *)(v5
                         + OBJC_IVAR____TtC23LocalAuthenticationCore37LACEvaluationRequestCompoundProcessor_involvedProcessorIndices),
         swift_beginAccess(),
         (specialized Sequence<>.contains(_:)(a3, *v13) & 1) != 0))
    && (objc_msgSend(v12, sel_respondsToSelector_, sel_postProcessRequest_result_completion_) & 1) != 0)
  {
    v14 = swift_allocObject();
    swift_unknownObjectWeakInit();
    v15 = (_QWORD *)swift_allocObject();
    v15[2] = v14;
    v15[3] = v10;
    v15[4] = a3;
    v15[5] = a4;
    v15[6] = a5;
    aBlock[4] = partial apply for closure #1 in LACEvaluationRequestCompoundProcessor.postProcessRequest(_:result:subProcessorIndex:completion:);
    aBlock[5] = v15;
    aBlock[0] = MEMORY[0x24BDAC760];
    aBlock[1] = 1107296256;
    aBlock[2] = thunk for @escaping @callee_guaranteed (@guaranteed LACDTOLocationState) -> ();
    aBlock[3] = &block_descriptor_31_0;
    v16 = _Block_copy(aBlock);
    swift_unknownObjectRetain();
    swift_retain();
    swift_unknownObjectRetain();
    swift_retain();
    swift_retain();
    objc_msgSend(v12, sel_postProcessRequest_result_completion_, v10, a2, v16);
    _Block_release(v16);
    swift_unknownObjectRelease_n();
    swift_release();
    swift_release();
    return swift_release();
  }
  else
  {
    LACEvaluationRequestCompoundProcessor.postProcessRequest(_:result:subProcessorIndex:completion:)(v10, a2, a3 - 1, a4, a5);
    return swift_unknownObjectRelease();
  }
}

id LACEvaluationRequestCompoundProcessor.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

void LACEvaluationRequestCompoundProcessor.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

id LACEvaluationRequestCompoundProcessor.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t LACEvaluationRequestCompoundProcessor.nextProcessor(after:)(uint64_t a1)
{
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  Swift::Int v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  Class isa;
  id v18;
  uint64_t result;
  uint64_t v20;

  v5 = a1 + 1;
  if (__OFADD__(a1, 1))
  {
    __break(1u);
  }
  else
  {
    v2 = *(_QWORD *)(v1 + OBJC_IVAR____TtC23LocalAuthenticationCore37LACEvaluationRequestCompoundProcessor_processors);
    v4 = v2 >> 62;
    if (!(v2 >> 62))
    {
      v6 = *(_QWORD *)((v2 & 0xFFFFFFFFFFFFF8) + 0x10);
      if ((uint64_t)v6 >= v5)
        goto LABEL_4;
      goto LABEL_34;
    }
  }
  swift_bridgeObjectRetain();
  v6 = _CocoaArrayWrapper.endIndex.getter();
  result = swift_bridgeObjectRelease();
  if ((uint64_t)v6 >= v5)
  {
    swift_bridgeObjectRetain();
    v20 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v20 >= v5)
    {
LABEL_4:
      if ((v5 & 0x8000000000000000) == 0)
      {
        if (v4)
        {
          swift_bridgeObjectRetain();
          v7 = _CocoaArrayWrapper.endIndex.getter();
          swift_bridgeObjectRelease();
        }
        else
        {
          v7 = *(_QWORD *)((v2 & 0xFFFFFFFFFFFFF8) + 0x10);
        }
        if (v7 >= (uint64_t)v6)
        {
          if ((v6 & 0x8000000000000000) == 0)
          {
            if ((v2 & 0xC000000000000001) != 0 && v5 != v6)
            {
              if (v5 >= v6)
              {
                __break(1u);
                goto LABEL_40;
              }
              v8 = v5;
              do
              {
                __swift_instantiateConcreteTypeFromMangledName(demangling cache variable for type metadata for LACEvaluationRequestProcessor);
                _ArrayBuffer._typeCheckSlowPath(_:)(v8++);
              }
              while (v6 != v8);
            }
            if (v4)
            {
              swift_bridgeObjectRetain();
              v7 = _CocoaArrayWrapper.subscript.getter();
              v3 = v9;
              v5 = v10;
              v6 = v11;
              swift_bridgeObjectRelease();
              if ((v6 & 1) != 0)
                goto LABEL_20;
            }
            else
            {
              v7 = v2 & 0xFFFFFFFFFFFFFF8;
              v3 = (v2 & 0xFFFFFFFFFFFFFF8) + 32;
              v6 = (2 * v6) | 1;
              swift_bridgeObjectRetain();
              if ((v6 & 1) != 0)
              {
LABEL_20:
                type metadata accessor for __ContiguousArrayStorageBase();
                swift_unknownObjectRetain_n();
                v13 = swift_dynamicCastClass();
                if (!v13)
                {
                  swift_unknownObjectRelease();
                  v13 = MEMORY[0x24BEE4AF8];
                }
                v14 = *(_QWORD *)(v13 + 16);
                swift_release();
                if (!__OFSUB__(v6 >> 1, v5))
                {
                  if (v14 == (v6 >> 1) - v5)
                  {
                    v12 = swift_dynamicCastClass();
                    if (!v12)
                    {
                      swift_unknownObjectRelease();
                      v12 = MEMORY[0x24BEE4AF8];
                    }
LABEL_26:
                    swift_unknownObjectRelease();
                    if (!*(_QWORD *)(v1
                                    + OBJC_IVAR____TtC23LocalAuthenticationCore37LACEvaluationRequestCompoundProcessor_nextProcessor))
                    {
LABEL_29:
                      v16 = (void *)objc_opt_self();
                      __swift_instantiateConcreteTypeFromMangledName(demangling cache variable for type metadata for LACEvaluationRequestProcessor);
                      isa = Array._bridgeToObjectiveC()().super.isa;
                      swift_bridgeObjectRelease();
                      v18 = objc_msgSend(v16, sel_makeProcessorWithSubprocessors_, isa);

                      return (uint64_t)v18;
                    }
                    v15 = swift_unknownObjectRetain_n();
                    MEMORY[0x2426864F8](v15);
                    if (*(_QWORD *)((v12 & 0xFFFFFFFFFFFFFF8) + 0x10) < *(_QWORD *)((v12 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
                    {
LABEL_28:
                      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
                      specialized Array._endMutation()();
                      swift_unknownObjectRelease();
                      goto LABEL_29;
                    }
LABEL_38:
                    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
                    goto LABEL_28;
                  }
                  goto LABEL_41;
                }
LABEL_40:
                __break(1u);
LABEL_41:
                swift_unknownObjectRelease();
              }
            }
            v12 = specialized _copyCollectionToContiguousArray<A>(_:)(v7, v3, v5, v6);
            goto LABEL_26;
          }
LABEL_37:
          __break(1u);
          goto LABEL_38;
        }
LABEL_36:
        __break(1u);
        goto LABEL_37;
      }
LABEL_35:
      __break(1u);
      goto LABEL_36;
    }
    __break(1u);
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  __break(1u);
  return result;
}

void closure #1 in LACEvaluationRequestCompoundProcessor.processRequest(_:subProcessorIndex:completion:)(void *a1, uint64_t a2, void (*a3)(void), uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  void *v14;
  id v15;
  id v16;
  Swift::String v17;
  uint64_t v18;

  v10 = type metadata accessor for LACLogger();
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)&v18 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  v13 = MEMORY[0x242687740](a2 + 16);
  if (v13)
  {
    v14 = (void *)v13;
    if (objc_msgSend(a1, sel_rawValue) == (id)1
      && (v15 = objc_msgSend(a1, sel_request)) != 0)
    {
      if (__OFADD__(a5, 1))
      {
        __break(1u);
      }
      else
      {
        LACEvaluationRequestCompoundProcessor.processRequest(_:subProcessorIndex:completion:)(v15, a5 + 1, a3, a4);

        swift_unknownObjectRelease();
      }
    }
    else
    {
      ((void (*)(void *))a3)(a1);

    }
  }
  else
  {
    v16 = LACLogProcessor();
    Logger.init(_:)();
    HIBYTE(v18) = 3;
    v17._object = (void *)0x8000000240A85A90;
    v17._countAndFlagsBits = 0xD000000000000051;
    LACLogger.log(level:_:)((LocalAuthenticationCore::LACLogger::Level)((char *)&v18 + 7), v17);
    outlined destroy of LACLogger((uint64_t)v12);
  }
}

void closure #1 in LACEvaluationRequestCompoundProcessor.postProcessRequest(_:result:subProcessorIndex:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t), uint64_t a6)
{
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  void *v16;
  id v17;
  Swift::String v18;
  uint64_t v19;

  v12 = type metadata accessor for LACLogger();
  MEMORY[0x24BDAC7A8](v12);
  v14 = (char *)&v19 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  v15 = MEMORY[0x242687740](a2 + 16);
  if (v15)
  {
    if (__OFSUB__(a4, 1))
    {
      __break(1u);
    }
    else
    {
      v16 = (void *)v15;
      LACEvaluationRequestCompoundProcessor.postProcessRequest(_:result:subProcessorIndex:completion:)(a3, a1, a4 - 1, a5, a6);

    }
  }
  else
  {
    v17 = LACLogProcessor();
    Logger.init(_:)();
    HIBYTE(v19) = 3;
    v18._object = (void *)0x8000000240A85B30;
    v18._countAndFlagsBits = 0xD000000000000056;
    LACLogger.log(level:_:)((LocalAuthenticationCore::LACLogger::Level)((char *)&v19 + 7), v18);
    outlined destroy of LACLogger((uint64_t)v14);
  }
}

_QWORD *specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 25;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 3);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v13 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[v8 + 4])
          memmove(v13, a4 + 4, 8 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (char *)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

char *specialized _ArrayBuffer._copyContents(subRange:initializing:)(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v4;
  char *v5;
  size_t v6;
  char *v7;
  char *result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = (char *)(a4 + 8 * a1 + 32);
    v6 = 8 * v4;
    v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void specialized LACEvaluationRequestCompoundProcessor.processRequest(_:subProcessorIndex:completion:)(void *a1, uint64_t a2, uint64_t a3, void (**a4)(_QWORD, _QWORD))
{
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  id v19;
  uint64_t v20;
  _QWORD *v21;
  void *v22;
  id v23;
  Swift::String v24;
  Swift::String v25;
  id v26;
  uint64_t v27;
  void *v28;
  void *v29;
  Swift::String v30;
  Swift::String v31;
  id v32;
  _QWORD *v33;
  unint64_t v34;
  Swift::String aBlock;
  void (*v36)(uint64_t, void *);
  void *v37;
  void (*v38)(void *);
  _QWORD *v39;
  unsigned int v40;

  v8 = type metadata accessor for LACLogger();
  MEMORY[0x24BDAC7A8](v8);
  v10 = (unint64_t *)((char *)&v34 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  v11 = swift_allocObject();
  *(_QWORD *)(v11 + 16) = a4;
  v12 = *(_QWORD *)(a3 + OBJC_IVAR____TtC23LocalAuthenticationCore37LACEvaluationRequestCompoundProcessor_processors);
  if (v12 >> 62)
  {
    _Block_copy(a4);
    _Block_copy(a4);
    swift_bridgeObjectRetain();
    v13 = (_QWORD *)_CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if ((uint64_t)v13 > a2)
    {
LABEL_3:
      v14 = a3 + OBJC_IVAR____TtC23LocalAuthenticationCore37LACEvaluationRequestCompoundProcessor_currentProcessorIndex;
      *(_QWORD *)v14 = a2;
      *(_BYTE *)(v14 + 8) = 0;
      if ((v12 & 0xC000000000000001) == 0)
      {
        if (a2 < 0)
        {
          __break(1u);
        }
        else if (*(_QWORD *)((v12 & 0xFFFFFFFFFFFFF8) + 0x10) > (unint64_t)a2)
        {
          v13 = *(_QWORD **)(v12 + 8 * a2 + 32);
          swift_unknownObjectRetain();
          goto LABEL_7;
        }
        __break(1u);
        goto LABEL_19;
      }
      v13 = (_QWORD *)MEMORY[0x24268672C](a2, v12);
LABEL_7:
      if (!objc_msgSend(v13, sel_canProcessRequest_, a1))
      {
        v23 = LACLogDefault();
        Logger.init(_:)();
        aBlock._countAndFlagsBits = 0;
        aBlock._object = (void *)0xE000000000000000;
        _StringGuts.grow(_:)(44);
        swift_bridgeObjectRelease();
        aBlock._countAndFlagsBits = 0xD000000000000024;
        aBlock._object = (void *)0x8000000240A85A60;
        v40 = objc_msgSend(a1, sel_identifier);
        v24._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v24);
        swift_bridgeObjectRelease();
        v25._countAndFlagsBits = 544825888;
        v25._object = (void *)0xE400000000000000;
        String.append(_:)(v25);
        v26 = objc_msgSend(v13, sel_description);
        v27 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        v29 = v28;

        v30._countAndFlagsBits = v27;
        v30._object = v29;
        String.append(_:)(v30);
        swift_bridgeObjectRelease();
        v31 = aBlock;
        LOBYTE(aBlock._countAndFlagsBits) = 2;
        LACLogger.log(level:_:)((LocalAuthenticationCore::LACLogger::Level)&aBlock, v31);
        swift_bridgeObjectRelease();
        outlined destroy of LACLogger((uint64_t)v10);
        _Block_copy(a4);
        specialized LACEvaluationRequestCompoundProcessor.processRequest(_:subProcessorIndex:completion:)(a1, a2 + 1, a3, a4);
        _Block_release(a4);
        swift_release();
        swift_unknownObjectRelease();
LABEL_13:
        _Block_release(a4);
        return;
      }
      v12 = a3
          + OBJC_IVAR____TtC23LocalAuthenticationCore37LACEvaluationRequestCompoundProcessor_involvedProcessorIndices;
      swift_beginAccess();
      v10 = *(_QWORD **)v12;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      *(_QWORD *)v12 = v10;
      if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      {
LABEL_9:
        v17 = v10[2];
        v16 = v10[3];
        v18 = v17 + 1;
        if (v17 >= v16 >> 1)
        {
          v34 = v17 + 1;
          v33 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v16 > 1), v17 + 1, 1, v10);
          v18 = v34;
          v10 = v33;
          *(_QWORD *)v12 = v33;
        }
        v10[2] = v18;
        v10[v17 + 4] = a2;
        swift_endAccess();
        v19 = objc_msgSend(objc_allocWithZone((Class)LACProcessingConfiguration), sel_initWithNextProcessor_, LACEvaluationRequestCompoundProcessor.nextProcessor(after:)(a2));
        v20 = swift_allocObject();
        swift_unknownObjectWeakInit();
        v21 = (_QWORD *)swift_allocObject();
        v21[2] = v20;
        v21[3] = thunk for @escaping @callee_unowned @convention(block) (@unowned LACEvaluationResult) -> ()partial apply;
        v21[4] = v11;
        v21[5] = a2;
        v38 = partial apply for closure #1 in LACEvaluationRequestCompoundProcessor.processRequest(_:subProcessorIndex:completion:);
        v39 = v21;
        aBlock._countAndFlagsBits = MEMORY[0x24BDAC760];
        aBlock._object = (void *)1107296256;
        v36 = thunk for @escaping @callee_guaranteed (@guaranteed LACDTOLocationState) -> ();
        v37 = &block_descriptor_11;
        v22 = _Block_copy(&aBlock);
        swift_retain();
        swift_release();
        objc_msgSend(v13, sel_processRequest_configuration_completion_, a1, v19, v22);
        _Block_release(v22);
        swift_release();
        swift_unknownObjectRelease();
        swift_unknownObjectRelease();

        goto LABEL_13;
      }
LABEL_19:
      v10 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v10[2] + 1, 1, v10);
      *(_QWORD *)v12 = v10;
      goto LABEL_9;
    }
  }
  else
  {
    v13 = *(_QWORD **)((v12 & 0xFFFFFFFFFFFFF8) + 0x10);
    _Block_copy(a4);
    _Block_copy(a4);
    if ((uint64_t)v13 > a2)
      goto LABEL_3;
  }
  v32 = objc_msgSend((id)objc_opt_self(), sel_resultWithNext_, a1);
  ((void (**)(_QWORD, id))a4)[2](a4, v32);
  swift_release();

  _Block_release(a4);
}

void specialized LACEvaluationRequestCompoundProcessor.processRequest(_:configuration:completion:)(void *a1, void *a2, char *a3, void *aBlock)
{
  unint64_t v8;
  uint64_t v9;
  id v10;
  id v11;
  uint64_t v12;
  void *v13;
  void *v14;
  Swift::String v15;
  void *v16;
  Swift::String v17;
  void *v18;
  id v19;
  void *v20;
  void *v21;
  id v22;
  uint64_t v23;
  id v24;

  if (a3[OBJC_IVAR____TtC23LocalAuthenticationCore37LACEvaluationRequestCompoundProcessor_currentProcessorIndex + 8] != 1)
  {
    _Block_copy(aBlock);
    _StringGuts.grow(_:)(17);
    swift_bridgeObjectRelease();
    v11 = objc_msgSend(a3, sel_description);
    v12 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v14 = v13;

    v15._countAndFlagsBits = v12;
    v15._object = v14;
    String.append(_:)(v15);
    swift_bridgeObjectRelease();
    v16 = (void *)objc_opt_self();
    v17._countAndFlagsBits = 0x7973756220;
    v17._object = (void *)0xE500000000000000;
    String.append(_:)(v17);
    v18 = (void *)MEMORY[0x2426863FC](0x6F737365636F7250, 0xEA00000000002072);
    swift_bridgeObjectRelease();
    v19 = objc_msgSend(v16, sel_errorWithCode_debugDescription_, -1000, v18);

    v20 = (void *)objc_opt_self();
    v21 = (void *)_convertErrorToNSError(_:)();
    v22 = objc_msgSend(v20, sel_resultWithFailure_, v21);

    (*((void (**)(void *, id))aBlock + 2))(aBlock, v22);
    goto LABEL_8;
  }
  v8 = *(_QWORD *)&a3[OBJC_IVAR____TtC23LocalAuthenticationCore37LACEvaluationRequestCompoundProcessor_processors];
  if (v8 >> 62)
  {
    _Block_copy(aBlock);
    swift_bridgeObjectRetain();
    v23 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v23)
      goto LABEL_4;
LABEL_7:
    v24 = objc_msgSend((id)objc_opt_self(), sel_resultWithNext_, a1);
    (*((void (**)(void *, id))aBlock + 2))(aBlock, v24);

    goto LABEL_8;
  }
  v9 = *(_QWORD *)((v8 & 0xFFFFFFFFFFFFF8) + 0x10);
  _Block_copy(aBlock);
  if (!v9)
    goto LABEL_7;
LABEL_4:
  v10 = objc_msgSend(a2, sel_nextProcessor);
  *(_QWORD *)&a3[OBJC_IVAR____TtC23LocalAuthenticationCore37LACEvaluationRequestCompoundProcessor_nextProcessor] = v10;
  swift_unknownObjectRelease();
  _Block_copy(aBlock);
  specialized LACEvaluationRequestCompoundProcessor.processRequest(_:subProcessorIndex:completion:)(a1, 0, (uint64_t)a3, (void (**)(_QWORD, _QWORD))aBlock);
  _Block_release(aBlock);
LABEL_8:
  _Block_release(aBlock);
}

_QWORD *specialized LACEvaluationRequestCompoundProcessor.postProcessRequest(_:result:subProcessorIndex:completion:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, void (*a6)(uint64_t), uint64_t a7)
{
  _QWORD *result;
  _QWORD *v15;
  uint64_t v16;
  void *v17;
  uint64_t *v18;
  uint64_t v19;
  _QWORD *v20;
  void *v21;
  _QWORD aBlock[6];

  result = (_QWORD *)swift_allocObject();
  v15 = result;
  result[2] = a5;
  result[3] = a6;
  result[4] = a7;
  if ((a3 & 0x8000000000000000) != 0)
  {
    swift_retain_n();
    swift_retain_n();
    closure #1 in LACEvaluationRequestCompoundProcessor.postProcessRequest(_:result:completion:)(a2, a5, a6);
    swift_release();
    swift_release();
    goto LABEL_11;
  }
  v16 = *(_QWORD *)(a4 + OBJC_IVAR____TtC23LocalAuthenticationCore37LACEvaluationRequestCompoundProcessor_processors);
  if ((v16 & 0xC000000000000001) != 0)
  {
    swift_retain_n();
    swift_retain_n();
    v17 = (void *)MEMORY[0x24268672C](a3, v16);
    goto LABEL_5;
  }
  if (*(_QWORD *)((v16 & 0xFFFFFFFFFFFFF8) + 0x10) > a3)
  {
    v17 = *(void **)(v16 + 8 * a3 + 32);
    swift_retain_n();
    swift_retain_n();
    swift_unknownObjectRetain();
LABEL_5:
    if ((objc_msgSend(v17, sel_canProcessRequest_, a1) & 1) == 0
      && (v18 = (uint64_t *)(a4
                          + OBJC_IVAR____TtC23LocalAuthenticationCore37LACEvaluationRequestCompoundProcessor_involvedProcessorIndices),
          swift_beginAccess(),
          (specialized Sequence<>.contains(_:)(a3, *v18) & 1) == 0)
      || (objc_msgSend(v17, sel_respondsToSelector_, sel_postProcessRequest_result_completion_) & 1) == 0)
    {
      swift_retain();
      swift_retain();
      specialized LACEvaluationRequestCompoundProcessor.postProcessRequest(_:result:subProcessorIndex:completion:)(a1, a2, a3 - 1, a4, a5, a6, a7);
      swift_release();
      swift_unknownObjectRelease();
      swift_release_n();
      swift_release_n();
LABEL_12:
      swift_release();
      return (_QWORD *)swift_release();
    }
    v19 = swift_allocObject();
    swift_unknownObjectWeakInit();
    v20 = (_QWORD *)swift_allocObject();
    v20[2] = v19;
    v20[3] = a1;
    v20[4] = a3;
    v20[5] = partial apply for closure #1 in LACEvaluationRequestCompoundProcessor.postProcessRequest(_:result:completion:);
    v20[6] = v15;
    aBlock[4] = partial apply for closure #1 in LACEvaluationRequestCompoundProcessor.postProcessRequest(_:result:subProcessorIndex:completion:);
    aBlock[5] = v20;
    aBlock[0] = MEMORY[0x24BDAC760];
    aBlock[1] = 1107296256;
    aBlock[2] = thunk for @escaping @callee_guaranteed (@guaranteed LACDTOLocationState) -> ();
    aBlock[3] = &block_descriptor_23;
    v21 = _Block_copy(aBlock);
    swift_unknownObjectRetain();
    swift_retain();
    swift_unknownObjectRetain();
    swift_retain();
    swift_retain();
    objc_msgSend(v17, sel_postProcessRequest_result_completion_, a1, a2, v21);
    _Block_release(v21);
    swift_release();
    swift_release();
    swift_release();
    swift_unknownObjectRelease_n();
    swift_release();
    swift_release();
LABEL_11:
    swift_release();
    goto LABEL_12;
  }
  __break(1u);
  return result;
}

uint64_t type metadata accessor for LACEvaluationRequestCompoundProcessor()
{
  return objc_opt_self();
}

uint64_t method lookup function for LACEvaluationRequestCompoundProcessor()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of LACEvaluationRequestCompoundProcessor.__allocating_init(processors:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 112))();
}

uint64_t sub_240A48164()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject();
}

uint64_t _sSo19LACEvaluationResultCIeyBy_ABIegg_TRTA_0()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)(v0 + 16) + 16))();
}

uint64_t sub_240A48198()
{
  return objectdestroy_12Tm();
}

void partial apply for closure #1 in LACEvaluationRequestCompoundProcessor.processRequest(_:subProcessorIndex:completion:)(void *a1)
{
  uint64_t v1;

  closure #1 in LACEvaluationRequestCompoundProcessor.processRequest(_:subProcessorIndex:completion:)(a1, *(_QWORD *)(v1 + 16), *(void (**)(void))(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40));
}

uint64_t block_copy_helper_7(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_7()
{
  return swift_release();
}

uint64_t sub_240A481C4()
{
  return objectdestroy_12Tm();
}

void partial apply for closure #1 in LACEvaluationRequestCompoundProcessor.postProcessRequest(_:result:completion:)(uint64_t a1)
{
  uint64_t v1;

  closure #1 in LACEvaluationRequestCompoundProcessor.postProcessRequest(_:result:completion:)(a1, *(_QWORD *)(v1 + 16), *(void (**)(uint64_t))(v1 + 24));
}

uint64_t objectdestroy_19Tm()
{
  swift_release();
  swift_unknownObjectRelease();
  swift_release();
  return swift_deallocObject();
}

void partial apply for closure #1 in LACEvaluationRequestCompoundProcessor.postProcessRequest(_:result:subProcessorIndex:completion:)(uint64_t a1)
{
  uint64_t v1;

  closure #1 in LACEvaluationRequestCompoundProcessor.postProcessRequest(_:result:subProcessorIndex:completion:)(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(uint64_t (**)(uint64_t))(v1 + 40), *(_QWORD *)(v1 + 48));
}

uint64_t sub_240A48228()
{
  return objectdestroy_12Tm();
}

uint64_t objectdestroy_12Tm()
{
  swift_release();
  swift_release();
  return swift_deallocObject();
}

Swift::Bool __swiftcall LACMechanismTree.isSatisfiable(withValue:)(Swift::Int withValue)
{
  void *v1;
  id v3;
  unint64_t v4;
  uint64_t v5;
  unsigned __int8 v6;
  id v7;
  unint64_t v8;
  id v9;
  char v10;

  v3 = objc_msgSend(v1, sel_children);
  type metadata accessor for LACMechanismTree();
  v4 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v4 >> 62)
  {
    swift_bridgeObjectRetain();
    v5 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    v5 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  swift_bridgeObjectRelease();
  if (v5)
  {
    v6 = objc_msgSend(v1, sel_isAnd);
    v7 = objc_msgSend(v1, sel_children);
    v8 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    v9 = v1;
    v10 = specialized Sequence.reduce<A>(_:_:)(v6, v8, v9, withValue);
    swift_bridgeObjectRelease();

  }
  else
  {
    v10 = objc_msgSend(v1, sel_value) == (id)withValue;
  }
  return v10 & 1;
}

unint64_t type metadata accessor for LACMechanismTree()
{
  unint64_t result;

  result = lazy cache variable for type metadata for LACMechanismTree;
  if (!lazy cache variable for type metadata for LACMechanismTree)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for LACMechanismTree);
  }
  return result;
}

uint64_t static LACMechanismTree.make(from:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = 0;
  return static LACMechanismTree.parse(tree:index:)(a1, a2, &v3);
}

uint64_t static LACMechanismTree.parse(tree:index:)(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t *v3;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  void *v10;
  BOOL v11;
  uint64_t v12;
  void *v13;
  void *v14;
  id v15;
  char v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned __int8 *v23;
  unsigned __int8 *v24;
  char v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  id v32;
  id v33;
  uint64_t v34;
  unsigned __int8 *v35;
  unsigned int v36;
  uint64_t v37;
  id v38;
  id v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  id v45;
  id v46;
  uint64_t v47;
  unsigned __int8 *v48;
  unsigned int v49;
  uint64_t v50;
  uint64_t v51;
  unsigned __int8 *v52;
  unsigned int v53;
  uint64_t v54;
  Swift::String v55;
  char v56;
  char v57;
  void *v58;
  id v59;
  uint64_t v60;
  id v61;
  Class isa;
  id v63;
  char v64;
  _QWORD v65[3];
  uint64_t v66;
  unint64_t v67;
  unint64_t v68;

  v3 = a3;
  v6 = MEMORY[0x24BEE4AF8];
  v66 = 0;
  v67 = 0xE000000000000000;
  v68 = MEMORY[0x24BEE4AF8];
  v7 = *a3;
  if (v7 >= String.count.getter())
  {
    LOBYTE(v3) = 0;
LABEL_112:
    swift_bridgeObjectRelease();
    v8 = v6 >> 62;
    if (v6 >> 62)
    {
LABEL_121:
      swift_bridgeObjectRetain();
      v58 = (void *)_CocoaArrayWrapper.endIndex.getter();
      if (v58)
      {
LABEL_114:
        if ((v6 & 0xC000000000000001) != 0)
        {
          v59 = (id)MEMORY[0x24268672C](0, v6);
        }
        else
        {
          if (!*(_QWORD *)((v6 & 0xFFFFFFFFFFFFF8) + 0x10))
          {
            __break(1u);
            goto LABEL_125;
          }
          v59 = *(id *)(v6 + 32);
        }
        v58 = v59;
        swift_bridgeObjectRelease();
        if (!v8)
        {
          if (*(_QWORD *)((v6 & 0xFFFFFFFFFFFFF8) + 0x10) == 1)
          {
LABEL_119:
            swift_bridgeObjectRelease();
            return (uint64_t)v58;
          }
LABEL_126:
          v61 = objc_allocWithZone((Class)LACMechanismTree);
          type metadata accessor for LACMechanismTree();
          isa = Array._bridgeToObjectiveC()().super.isa;
          swift_bridgeObjectRelease();
          v63 = objc_msgSend(v61, sel_initWithChildren_isAndNode_, isa, v3 & 1);

          return (uint64_t)v63;
        }
LABEL_125:
        swift_bridgeObjectRetain();
        v60 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        if (v60 == 1)
          goto LABEL_119;
        goto LABEL_126;
      }
    }
    else
    {
      v58 = *(void **)((v6 & 0xFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      if (v58)
        goto LABEL_114;
    }
    swift_bridgeObjectRelease_n();
    return (uint64_t)v58;
  }
  v64 = 0;
  v8 = 0;
  while (1)
  {
    String.index(_:offsetBy:)();
    v9 = String.subscript.getter();
    v11 = v9 == 40 && v10 == (void *)0xE100000000000000;
    if (v11 || (v12 = v9, v13 = v10, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
    {
      swift_bridgeObjectRelease();
      *v3 = v7 + 1;
      v14 = (void *)static LACMechanismTree.parse(tree:index:)(a1, a2, v3);
      if (v14)
      {
        v15 = v14;
        MEMORY[0x2426864F8]();
        if (*(_QWORD *)((v68 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v68 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();

      }
      v16 = 0;
      goto LABEL_13;
    }
    if (v12 == 41 && v13 == (void *)0xE100000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      break;
    if (v12 == 124 && v13 == (void *)0xE100000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      v28 = v66;
      v27 = v67;
      v29 = HIBYTE(v67) & 0xF;
      if ((v67 & 0x2000000000000000) == 0)
        v29 = v66 & 0xFFFFFFFFFFFFLL;
      if (!v29 || (swift_bridgeObjectRetain(), v30 = specialized FixedWidthInteger.init(_:)(v28, v27), (v31 & 1) != 0))
      {
        swift_bridgeObjectRelease();
      }
      else
      {
        v32 = objc_msgSend(objc_allocWithZone((Class)LACMechanismTree), sel_initWithValue_, v30);
        swift_bridgeObjectRelease();
        if (v32)
        {
          v33 = v32;
          MEMORY[0x2426864F8]();
          if (*(_QWORD *)((v68 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v68 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized Array._endMutation()();

        }
      }
      v16 = 0;
      v64 = 0;
      v66 = 0;
      v67 = 0xE000000000000000;
    }
    else
    {
      if (v12 == 38 && v13 == (void *)0xE100000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        v41 = v66;
        v40 = v67;
        v42 = HIBYTE(v67) & 0xF;
        if ((v67 & 0x2000000000000000) == 0)
          v42 = v66 & 0xFFFFFFFFFFFFLL;
        if (!v42
          || (swift_bridgeObjectRetain(), v43 = specialized FixedWidthInteger.init(_:)(v41, v40), (v44 & 1) != 0))
        {
          swift_bridgeObjectRelease();
        }
        else
        {
          v45 = objc_msgSend(objc_allocWithZone((Class)LACMechanismTree), sel_initWithValue_, v43);
          swift_bridgeObjectRelease();
          if (v45)
          {
            v46 = v45;
            MEMORY[0x2426864F8]();
            if (*(_QWORD *)((v68 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v68 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
              specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
            specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
            specialized Array._endMutation()();

          }
        }
        v16 = 0;
        v66 = 0;
        v67 = 0xE000000000000000;
        *v3 = v7 + 1;
        v64 = 1;
        goto LABEL_13;
      }
      v55._countAndFlagsBits = v12;
      v55._object = v13;
      String.append(_:)(v55);
      swift_bridgeObjectRelease();
      v16 = 0;
    }
    *v3 = v7 + 1;
LABEL_13:
    v7 = *v3;
    v17 = String.count.getter();
    if ((v16 & 1) != 0 || v7 >= v17)
    {
      v6 = v68;
      LOBYTE(v3) = v64;
      goto LABEL_112;
    }
  }
  result = swift_bridgeObjectRelease();
  v19 = v66;
  v6 = v67;
  v20 = HIBYTE(v67) & 0xF;
  v21 = v66 & 0xFFFFFFFFFFFFLL;
  if ((v67 & 0x2000000000000000) != 0)
    v22 = HIBYTE(v67) & 0xF;
  else
    v22 = v66 & 0xFFFFFFFFFFFFLL;
  if (!v22)
    goto LABEL_105;
  if ((v67 & 0x1000000000000000) != 0)
  {
    swift_bridgeObjectRetain();
    v26 = (uint64_t)specialized _parseInteger<A, B>(ascii:radix:)(v19, v6, 10);
    v57 = v56;
    swift_bridgeObjectRelease();
    if ((v57 & 1) != 0)
      goto LABEL_105;
    goto LABEL_72;
  }
  if ((v67 & 0x2000000000000000) == 0)
  {
    if ((v66 & 0x1000000000000000) != 0)
      v23 = (unsigned __int8 *)((v67 & 0xFFFFFFFFFFFFFFFLL) + 32);
    else
      v23 = (unsigned __int8 *)_StringObject.sharedUTF8.getter();
    v24 = specialized closure #1 in FixedWidthInteger.init<A>(_:radix:)(v23, v21, 10);
    if ((v25 & 1) == 0)
    {
      v26 = (uint64_t)v24;
      goto LABEL_72;
    }
LABEL_105:
    swift_bridgeObjectRelease();
LABEL_106:
    v66 = 0;
    v67 = 0xE000000000000000;
    if (__OFADD__(*v3, 1))
    {
      __break(1u);
      goto LABEL_121;
    }
    ++*v3;
    v16 = 1;
    goto LABEL_13;
  }
  v65[0] = v66;
  v65[1] = v67 & 0xFFFFFFFFFFFFFFLL;
  if (v66 == 43)
  {
    if (!v20)
      goto LABEL_129;
    if (v20 == 1)
      goto LABEL_109;
    if ((BYTE1(v66) - 48) <= 9u)
    {
      v26 = (BYTE1(v66) - 48);
      if (v20 == 2)
        goto LABEL_70;
      if ((BYTE2(v66) - 48) <= 9u)
      {
        v26 = 10 * (BYTE1(v66) - 48) + (BYTE2(v66) - 48);
        v34 = v20 - 3;
        if (v20 != 3)
        {
          v35 = (unsigned __int8 *)v65 + 3;
          while (1)
          {
            v36 = *v35 - 48;
            if (v36 > 9)
              goto LABEL_65;
            v37 = 10 * v26;
            if ((unsigned __int128)(v26 * (__int128)10) >> 64 != (10 * v26) >> 63)
              goto LABEL_65;
            v26 = v37 + v36;
            if (__OFADD__(v37, v36))
              goto LABEL_65;
            LOBYTE(v20) = 0;
            ++v35;
            if (!--v34)
              goto LABEL_71;
          }
        }
        goto LABEL_70;
      }
    }
LABEL_65:
    v26 = 0;
    LOBYTE(v20) = 1;
    goto LABEL_71;
  }
  if (v66 != 45)
  {
    if (!v20 || (v66 - 48) > 9u)
      goto LABEL_65;
    v26 = (v66 - 48);
    if (v20 == 1)
    {
LABEL_70:
      LOBYTE(v20) = 0;
      goto LABEL_71;
    }
    if ((BYTE1(v66) - 48) <= 9u)
    {
      v26 = 10 * (v66 - 48) + (BYTE1(v66) - 48);
      v47 = v20 - 2;
      if (v20 != 2)
      {
        v48 = (unsigned __int8 *)v65 + 2;
        while (1)
        {
          v49 = *v48 - 48;
          if (v49 > 9)
            goto LABEL_65;
          v50 = 10 * v26;
          if ((unsigned __int128)(v26 * (__int128)10) >> 64 != (10 * v26) >> 63)
            goto LABEL_65;
          v26 = v50 + v49;
          if (__OFADD__(v50, v49))
            goto LABEL_65;
          LOBYTE(v20) = 0;
          ++v48;
          if (!--v47)
            goto LABEL_71;
        }
      }
      goto LABEL_70;
    }
    goto LABEL_65;
  }
  if (v20)
  {
    if (v20 != 1)
    {
      if ((BYTE1(v66) - 48) > 9u)
        goto LABEL_65;
      if (v20 == 2)
      {
        LOBYTE(v20) = 0;
        v26 = -(uint64_t)(BYTE1(v66) - 48);
        goto LABEL_71;
      }
      if ((BYTE2(v66) - 48) > 9u)
        goto LABEL_65;
      v26 = -10 * (BYTE1(v66) - 48) - (BYTE2(v66) - 48);
      v51 = v20 - 3;
      if (v20 != 3)
      {
        v52 = (unsigned __int8 *)v65 + 3;
        while (1)
        {
          v53 = *v52 - 48;
          if (v53 > 9)
            goto LABEL_65;
          v54 = 10 * v26;
          if ((unsigned __int128)(v26 * (__int128)10) >> 64 != (10 * v26) >> 63)
            goto LABEL_65;
          v26 = v54 - v53;
          if (__OFSUB__(v54, v53))
            goto LABEL_65;
          LOBYTE(v20) = 0;
          ++v52;
          if (!--v51)
            goto LABEL_71;
        }
      }
      goto LABEL_70;
    }
LABEL_109:
    v26 = 0;
LABEL_71:
    if ((v20 & 1) != 0)
      goto LABEL_105;
LABEL_72:
    v38 = objc_msgSend(objc_allocWithZone((Class)LACMechanismTree), sel_initWithValue_, v26);
    swift_bridgeObjectRelease();
    if (v38)
    {
      v39 = v38;
      MEMORY[0x2426864F8]();
      if (*(_QWORD *)((v68 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v68 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      v6 = (unint64_t)&v68;
      specialized Array._endMutation()();

    }
    goto LABEL_106;
  }
  __break(1u);
LABEL_129:
  __break(1u);
  return result;
}

uint64_t specialized FixedWidthInteger.init(_:)(uint64_t result, unint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 *v6;
  uint64_t v7;
  char v8;
  char v9;
  uint64_t v10;
  unsigned __int8 *v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 *v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  unsigned __int8 *v19;
  unsigned int v20;
  uint64_t v21;
  char v22;
  _QWORD v23[3];

  v3 = HIBYTE(a2) & 0xF;
  v4 = result & 0xFFFFFFFFFFFFLL;
  if ((a2 & 0x2000000000000000) != 0)
    v5 = v3;
  else
    v5 = result & 0xFFFFFFFFFFFFLL;
  if (!v5)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  if ((a2 & 0x1000000000000000) == 0)
  {
    if ((a2 & 0x2000000000000000) == 0)
    {
      if ((result & 0x1000000000000000) != 0)
        v6 = (unsigned __int8 *)((a2 & 0xFFFFFFFFFFFFFFFLL) + 32);
      else
        v6 = (unsigned __int8 *)_StringObject.sharedUTF8.getter();
      v7 = (uint64_t)specialized closure #1 in FixedWidthInteger.init<A>(_:radix:)(v6, v4, 10);
      v9 = v8 & 1;
      goto LABEL_37;
    }
    v23[0] = result;
    v23[1] = a2 & 0xFFFFFFFFFFFFFFLL;
    if (result == 43)
    {
      if (!v3)
        goto LABEL_50;
      if (v3 == 1 || (BYTE1(result) - 48) > 9u)
        goto LABEL_34;
      v7 = (BYTE1(result) - 48);
      v14 = v3 - 2;
      if (v14)
      {
        v15 = (unsigned __int8 *)v23 + 2;
        while (1)
        {
          v16 = *v15 - 48;
          if (v16 > 9)
            goto LABEL_34;
          v17 = 10 * v7;
          if ((unsigned __int128)(v7 * (__int128)10) >> 64 != (10 * v7) >> 63)
            goto LABEL_34;
          v7 = v17 + v16;
          if (__OFADD__(v17, v16))
            goto LABEL_34;
          v9 = 0;
          ++v15;
          if (!--v14)
            goto LABEL_37;
        }
      }
    }
    else
    {
      if (result == 45)
      {
        if (v3)
        {
          if (v3 != 1 && (BYTE1(result) - 48) <= 9u)
          {
            v7 = -(uint64_t)(BYTE1(result) - 48);
            v10 = v3 - 2;
            if (v10)
            {
              v11 = (unsigned __int8 *)v23 + 2;
              while (1)
              {
                v12 = *v11 - 48;
                if (v12 > 9)
                  goto LABEL_34;
                v13 = 10 * v7;
                if ((unsigned __int128)(v7 * (__int128)10) >> 64 != (10 * v7) >> 63)
                  goto LABEL_34;
                v7 = v13 - v12;
                if (__OFSUB__(v13, v12))
                  goto LABEL_34;
                v9 = 0;
                ++v11;
                if (!--v10)
                  goto LABEL_37;
              }
            }
            goto LABEL_36;
          }
LABEL_34:
          v7 = 0;
          v9 = 1;
          goto LABEL_37;
        }
        __break(1u);
LABEL_50:
        __break(1u);
        return result;
      }
      if (!v3 || (result - 48) > 9u)
        goto LABEL_34;
      v7 = (result - 48);
      v18 = v3 - 1;
      if (v18)
      {
        v19 = (unsigned __int8 *)v23 + 1;
        while (1)
        {
          v20 = *v19 - 48;
          if (v20 > 9)
            goto LABEL_34;
          v21 = 10 * v7;
          if ((unsigned __int128)(v7 * (__int128)10) >> 64 != (10 * v7) >> 63)
            goto LABEL_34;
          v7 = v21 + v20;
          if (__OFADD__(v21, v20))
            goto LABEL_34;
          v9 = 0;
          ++v19;
          if (!--v18)
            goto LABEL_37;
        }
      }
    }
LABEL_36:
    v9 = 0;
    goto LABEL_37;
  }
  v7 = (uint64_t)specialized _parseInteger<A, B>(ascii:radix:)(result, a2, 10);
  v9 = v22;
LABEL_37:
  swift_bridgeObjectRelease();
  if ((v9 & 1) != 0)
    return 0;
  else
    return v7;
}

_QWORD *specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;
  size_t v5;

  if (a2 <= a1)
    v2 = a1;
  else
    v2 = a2;
  if (!v2)
    return (_QWORD *)MEMORY[0x24BEE4AF8];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
  v4 = (_QWORD *)swift_allocObject();
  v5 = _swift_stdlib_malloc_size(v4);
  v4[2] = a1;
  v4[3] = 2 * v5 - 64;
  return v4;
}

uint64_t _StringGuts._slowEnsureMatchingEncoding(_:)(unint64_t a1, uint64_t a2, uint64_t a3)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;

  v3 = a1;
  v4 = (unsigned __int16)a1 >> 14;
  if ((a3 & 0x1000000000000000) == 0 || (a2 & 0x800000000000000) != 0)
  {
    v10 = String.UTF16View.index(_:offsetBy:)();
    v11 = v10 + (v4 << 16);
    v12 = v10 & 0xFFFFFFFFFFFFFFFCLL | v3 & 3;
    v13 = v11 & 0xFFFFFFFFFFFF0000;
    if (!v4)
      v13 = v12;
    return v13 | 4;
  }
  else
  {
    v5 = MEMORY[0x2426864A4](15, a1 >> 16);
    v6 = v5 + (v4 << 16);
    v7 = v5 & 0xFFFFFFFFFFFFFFFCLL | v3 & 3;
    v8 = v6 & 0xFFFFFFFFFFFF0000;
    if (!v4)
      v8 = v7;
    return v8 | 8;
  }
}

unsigned __int8 *specialized _parseInteger<A, B>(ascii:radix:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unsigned __int8 *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unsigned __int8 *v11;
  uint64_t v13;
  uint64_t v14;

  v13 = a1;
  v14 = a2;
  swift_bridgeObjectRetain();
  v5 = String.init<A>(_:)();
  v6 = v4;
  if ((v4 & 0x1000000000000000) == 0)
  {
    if ((v4 & 0x2000000000000000) == 0)
      goto LABEL_3;
LABEL_6:
    v8 = HIBYTE(v6) & 0xF;
    v13 = v5;
    v14 = v6 & 0xFFFFFFFFFFFFFFLL;
    v7 = (unsigned __int8 *)&v13;
    goto LABEL_7;
  }
  v5 = static String._copying(_:)();
  v10 = v9;
  swift_bridgeObjectRelease();
  v6 = v10;
  if ((v10 & 0x2000000000000000) != 0)
    goto LABEL_6;
LABEL_3:
  if ((v5 & 0x1000000000000000) != 0)
  {
    v7 = (unsigned __int8 *)((v6 & 0xFFFFFFFFFFFFFFFLL) + 32);
    v8 = v5 & 0xFFFFFFFFFFFFLL;
  }
  else
  {
    v7 = (unsigned __int8 *)_StringObject.sharedUTF8.getter();
  }
LABEL_7:
  v11 = specialized closure #1 in FixedWidthInteger.init<A>(_:radix:)(v7, v8, a3);
  swift_bridgeObjectRelease();
  return v11;
}

unsigned __int8 *specialized closure #1 in FixedWidthInteger.init<A>(_:radix:)(unsigned __int8 *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  unsigned __int8 v6;
  unsigned __int8 v7;
  unsigned __int8 v8;
  uint64_t v9;
  unsigned __int8 *i;
  unsigned int v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 v15;
  unsigned __int8 v16;
  unsigned __int8 v17;
  unsigned __int8 *v18;
  unsigned int v19;
  char v20;
  uint64_t v21;
  unsigned __int8 v22;
  unsigned __int8 v23;
  unsigned __int8 v24;
  uint64_t v25;
  unsigned int v26;
  char v27;
  uint64_t v28;

  v3 = a2;
  v4 = *result;
  if (v4 != 43)
  {
    if (v4 == 45)
    {
      if (a2 >= 1)
      {
        v5 = a2 - 1;
        if (a2 != 1)
        {
          v6 = a3 + 48;
          v7 = a3 + 55;
          v8 = a3 + 87;
          if (a3 > 10)
          {
            v6 = 58;
          }
          else
          {
            v8 = 97;
            v7 = 65;
          }
          if (result)
          {
            v9 = 0;
            for (i = result + 1; ; ++i)
            {
              v11 = *i;
              if (v11 < 0x30 || v11 >= v6)
              {
                if (v11 < 0x41 || v11 >= v7)
                {
                  if (v11 < 0x61 || v11 >= v8)
                    return 0;
                  v12 = -87;
                }
                else
                {
                  v12 = -55;
                }
              }
              else
              {
                v12 = -48;
              }
              v13 = v9 * a3;
              if ((unsigned __int128)(v9 * (__int128)a3) >> 64 != (v9 * a3) >> 63)
                return 0;
              v9 = v13 - (v11 + v12);
              if (__OFSUB__(v13, (v11 + v12)))
                return 0;
              if (!--v5)
                return (unsigned __int8 *)v9;
            }
          }
          return 0;
        }
        return 0;
      }
      __break(1u);
      goto LABEL_65;
    }
    if (a2)
    {
      v22 = a3 + 48;
      v23 = a3 + 55;
      v24 = a3 + 87;
      if (a3 > 10)
      {
        v22 = 58;
      }
      else
      {
        v24 = 97;
        v23 = 65;
      }
      if (result)
      {
        v25 = 0;
        do
        {
          v26 = *result;
          if (v26 < 0x30 || v26 >= v22)
          {
            if (v26 < 0x41 || v26 >= v23)
            {
              if (v26 < 0x61 || v26 >= v24)
                return 0;
              v27 = -87;
            }
            else
            {
              v27 = -55;
            }
          }
          else
          {
            v27 = -48;
          }
          v28 = v25 * a3;
          if ((unsigned __int128)(v25 * (__int128)a3) >> 64 != (v25 * a3) >> 63)
            return 0;
          v25 = v28 + (v26 + v27);
          if (__OFADD__(v28, (v26 + v27)))
            return 0;
          ++result;
          --v3;
        }
        while (v3);
        return (unsigned __int8 *)(v28 + (v26 + v27));
      }
      return 0;
    }
    return 0;
  }
  if (a2 < 1)
  {
LABEL_65:
    __break(1u);
    return result;
  }
  v14 = a2 - 1;
  if (a2 == 1)
    return 0;
  v15 = a3 + 48;
  v16 = a3 + 55;
  v17 = a3 + 87;
  if (a3 > 10)
  {
    v15 = 58;
  }
  else
  {
    v17 = 97;
    v16 = 65;
  }
  if (!result)
    return 0;
  v9 = 0;
  v18 = result + 1;
  do
  {
    v19 = *v18;
    if (v19 < 0x30 || v19 >= v15)
    {
      if (v19 < 0x41 || v19 >= v16)
      {
        if (v19 < 0x61 || v19 >= v17)
          return 0;
        v20 = -87;
      }
      else
      {
        v20 = -55;
      }
    }
    else
    {
      v20 = -48;
    }
    v21 = v9 * a3;
    if ((unsigned __int128)(v9 * (__int128)a3) >> 64 != (v9 * a3) >> 63)
      return 0;
    v9 = v21 + (v19 + v20);
    if (__OFADD__(v21, (v19 + v20)))
      return 0;
    ++v18;
    --v14;
  }
  while (v14);
  return (unsigned __int8 *)v9;
}

uint64_t static String._copying(_:)()
{
  unint64_t v0;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;

  v0 = String.subscript.getter();
  v4 = static String._copying(_:)(v0, v1, v2, v3);
  swift_bridgeObjectRelease();
  return v4;
}

uint64_t static String._copying(_:)(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD v14[3];

  if ((a4 & 0x1000000000000000) != 0)
  {
    v9 = specialized Collection.count.getter(a1, a2, a3, a4);
    if (v9)
    {
      v10 = v9;
      v11 = specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(v9, 0);
      v12 = specialized Sequence._copySequenceContents(initializing:)((unint64_t)v14, (uint64_t)(v11 + 4), v10, a1, a2, a3, a4);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      if (v12 != v10)
      {
        __break(1u);
        goto LABEL_9;
      }
    }
    else
    {
      v11 = (_QWORD *)MEMORY[0x24BEE4AF8];
    }
    v13 = MEMORY[0x242686450](v11 + 4, v11[2]);
    swift_release();
    return v13;
  }
  else
  {
    if ((a4 & 0x2000000000000000) == 0)
    {
      if ((a3 & 0x1000000000000000) != 0)
LABEL_12:
        JUMPOUT(0x242686450);
LABEL_9:
      _StringObject.sharedUTF8.getter();
      goto LABEL_12;
    }
    v14[0] = a3;
    v14[1] = a4 & 0xFFFFFFFFFFFFFFLL;
    return MEMORY[0x242686450]((char *)v14 + (a1 >> 16), (a2 >> 16) - (a1 >> 16));
  }
}

unint64_t specialized Collection.count.getter(unint64_t result, unint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;

  v7 = result;
  v8 = (a3 >> 59) & 1;
  if ((a4 & 0x1000000000000000) == 0)
    LOBYTE(v8) = 1;
  v9 = 4 << v8;
  if ((result & 0xC) == 4 << v8)
  {
    result = _StringGuts._slowEnsureMatchingEncoding(_:)(result, a3, a4);
    v7 = result;
  }
  if ((a2 & 0xC) == v9)
  {
    result = _StringGuts._slowEnsureMatchingEncoding(_:)(a2, a3, a4);
    a2 = result;
    if ((a4 & 0x1000000000000000) == 0)
      return (a2 >> 16) - (v7 >> 16);
  }
  else if ((a4 & 0x1000000000000000) == 0)
  {
    return (a2 >> 16) - (v7 >> 16);
  }
  v10 = HIBYTE(a4) & 0xF;
  if ((a4 & 0x2000000000000000) == 0)
    v10 = a3 & 0xFFFFFFFFFFFFLL;
  if (v10 < v7 >> 16)
  {
    __break(1u);
  }
  else if (v10 >= a2 >> 16)
  {
    return String.UTF8View._foreignDistance(from:to:)();
  }
  __break(1u);
  return result;
}

unint64_t specialized Sequence._copySequenceContents(initializing:)(unint64_t result, uint64_t a2, uint64_t a3, unint64_t a4, unint64_t a5, unint64_t a6, unint64_t a7)
{
  _QWORD *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  char v19;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v26;
  unint64_t v27;
  _QWORD v28[2];

  v9 = (_QWORD *)result;
  if (!a2)
    goto LABEL_5;
  if (!a3)
  {
    v12 = a4;
    v11 = 0;
    goto LABEL_33;
  }
  if (a3 < 0)
    goto LABEL_36;
  v10 = a5 >> 14;
  v27 = a4 >> 14;
  if (a4 >> 14 == a5 >> 14)
  {
LABEL_5:
    v11 = 0;
    v12 = a4;
LABEL_33:
    *v9 = a4;
    v9[1] = a5;
    v9[2] = a6;
    v9[3] = a7;
    v9[4] = v12;
    return v11;
  }
  v11 = 0;
  v14 = (a6 >> 59) & 1;
  if ((a7 & 0x1000000000000000) == 0)
    LOBYTE(v14) = 1;
  v15 = 4 << v14;
  v21 = (a7 & 0xFFFFFFFFFFFFFFFLL) + 32;
  v22 = a7 & 0xFFFFFFFFFFFFFFLL;
  v16 = HIBYTE(a7) & 0xF;
  if ((a7 & 0x2000000000000000) == 0)
    v16 = a6 & 0xFFFFFFFFFFFFLL;
  v23 = v16;
  v26 = a3 - 1;
  v12 = a4;
  while (1)
  {
    v17 = v12 & 0xC;
    result = v12;
    if (v17 == v15)
      result = _StringGuts._slowEnsureMatchingEncoding(_:)(v12, a6, a7);
    if (result >> 14 < v27 || result >> 14 >= v10)
      break;
    if ((a7 & 0x1000000000000000) != 0)
    {
      result = String.UTF8View._foreignSubscript(position:)();
      v19 = result;
      if (v17 != v15)
        goto LABEL_23;
    }
    else
    {
      v18 = result >> 16;
      if ((a7 & 0x2000000000000000) != 0)
      {
        v28[0] = a6;
        v28[1] = v22;
        v19 = *((_BYTE *)v28 + v18);
        if (v17 != v15)
          goto LABEL_23;
      }
      else
      {
        result = v21;
        if ((a6 & 0x1000000000000000) == 0)
          result = _StringObject.sharedUTF8.getter();
        v19 = *(_BYTE *)(result + v18);
        if (v17 != v15)
        {
LABEL_23:
          if ((a7 & 0x1000000000000000) == 0)
            goto LABEL_24;
          goto LABEL_27;
        }
      }
    }
    result = _StringGuts._slowEnsureMatchingEncoding(_:)(v12, a6, a7);
    v12 = result;
    if ((a7 & 0x1000000000000000) == 0)
    {
LABEL_24:
      v12 = (v12 & 0xFFFFFFFFFFFF0000) + 65540;
      goto LABEL_29;
    }
LABEL_27:
    if (v23 <= v12 >> 16)
      goto LABEL_35;
    v12 = String.UTF8View._foreignIndex(after:)();
LABEL_29:
    *(_BYTE *)(a2 + v11) = v19;
    if (v26 == v11)
    {
      v11 = a3;
      goto LABEL_33;
    }
    ++v11;
    if (v10 == v12 >> 14)
      goto LABEL_33;
  }
  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
  return result;
}

uint64_t specialized Sequence.reduce<A>(_:_:)(unsigned __int8 a1, unint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  void *v11;
  BOOL v12;
  uint64_t v13;

  if (a2 >> 62)
    goto LABEL_17;
  v7 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  while (v7)
  {
    v8 = 4;
    v9 = 0;
    if ((a2 & 0xC000000000000001) != 0)
    {
LABEL_4:
      v10 = (id)MEMORY[0x24268672C](v9, a2);
      goto LABEL_6;
    }
    while (1)
    {
      v10 = *(id *)(a2 + 8 * v8);
LABEL_6:
      v11 = v10;
      v12 = __OFADD__(v9, 1);
      v13 = v9 + 1;
      if (v12)
        break;
      if (objc_msgSend(a3, sel_isAnd))
      {
        if ((a1 & 1) != 0)
          goto LABEL_12;

        a1 = 0;
      }
      else
      {
        if ((a1 & 1) == 0)
        {
LABEL_12:
          a1 = objc_msgSend(v11, sel_isSatisfiableWithValue_, a4);

          goto LABEL_13;
        }

        a1 = 1;
      }
LABEL_13:
      if (v13 == v7)
        goto LABEL_18;
      v9 = ++v8 - 4;
      if ((a2 & 0xC000000000000001) != 0)
        goto LABEL_4;
    }
    __break(1u);
LABEL_17:
    swift_bridgeObjectRetain();
    v7 = _CocoaArrayWrapper.endIndex.getter();
  }
LABEL_18:
  swift_bridgeObjectRelease();
  return a1 & 1;
}

id static LACPreboardErrorBuilder.variableSetError(with:)(uint64_t a1, unint64_t a2)
{
  return specialized static LACPreboardErrorBuilder.error(code:message:)(1, a1, a2);
}

id static LACPreboardErrorBuilder.genericError(with:)(uint64_t a1, unint64_t a2)
{
  return specialized static LACPreboardErrorBuilder.error(code:message:)(2, a1, a2);
}

id static LACPreboardErrorBuilder.notSupportedError()()
{
  return specialized static LACPreboardErrorBuilder.error(code:message:)(2, 0xD000000000000015, 0x8000000240A85350);
}

id static LACPreboardErrorBuilder.profileInstallError(with:)(uint64_t a1, unint64_t a2)
{
  return specialized static LACPreboardErrorBuilder.error(code:message:)(3, a1, a2);
}

id static LACPreboardErrorBuilder.passcodeVerificationError(with:)(uint64_t a1, unint64_t a2)
{
  return specialized static LACPreboardErrorBuilder.error(code:message:)(0, a1, a2);
}

id @objc static LACPreboardErrorBuilder.passcodeVerificationError(with:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  unint64_t v5;
  unint64_t v6;
  id v7;
  void *v8;

  if (a3)
  {
    a3 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v6 = v5;
  }
  else
  {
    v6 = 0;
  }
  v7 = specialized static LACPreboardErrorBuilder.error(code:message:)(*a4, a3, v6);
  swift_bridgeObjectRelease();
  v8 = (void *)_convertErrorToNSError(_:)();

  return v8;
}

id static LACPreboardErrorBuilder.genericError(with:)(unint64_t a1)
{
  return specialized static LACPreboardErrorBuilder.error(code:underlyingError:)(2, a1);
}

id LACPreboardErrorBuilder.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

id LACPreboardErrorBuilder.init()()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  return objc_msgSendSuper2(&v2, sel_init);
}

id LACPreboardErrorBuilder.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

id specialized static LACPreboardErrorBuilder.error(code:message:)(uint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t inited;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  NSDictionary v12;
  id v13;

  v3 = a3;
  if (a3)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
    inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_240A7D050;
    *(_QWORD *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
    *(_QWORD *)(inited + 40) = v7;
    *(_QWORD *)(inited + 72) = MEMORY[0x24BEE0D00];
    *(_QWORD *)(inited + 48) = a2;
    *(_QWORD *)(inited + 56) = v3;
    swift_bridgeObjectRetain();
    v3 = specialized Dictionary.init(dictionaryLiteral:)(inited);
  }
  v8 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v10 = v9;
  swift_bridgeObjectRetain();
  v11 = (void *)MEMORY[0x2426863FC](v8, v10);
  swift_bridgeObjectRelease();
  if (v3)
  {
    v12.super.isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
  }
  else
  {
    v12.super.isa = 0;
  }
  v13 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDD1540]), sel_initWithDomain_code_userInfo_, v11, a1, v12.super.isa);
  swift_bridgeObjectRelease();

  return v13;
}

BOOL specialized static LACPreboardErrorBuilder.hasCode(_:code:)(uint64_t a1, id a2)
{
  void *v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v10;
  id v12;

  v3 = (void *)_convertErrorToNSError(_:)();
  v4 = objc_msgSend(v3, sel_domain);
  v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v7 = v6;

  if (v5 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v7 == v8)
  {
    swift_bridgeObjectRelease_n();
  }
  else
  {
    v10 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v10 & 1) == 0)
    {

      return 0;
    }
  }
  v12 = objc_msgSend(v3, sel_code);

  return v12 == a2;
}

id specialized static LACPreboardErrorBuilder.error(code:underlyingError:)(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  uint64_t inited;
  uint64_t v5;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  NSDictionary v11;
  id v12;
  uint64_t v14;

  v2 = a2;
  if (a2)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
    inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_240A7D050;
    *(_QWORD *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
    *(_QWORD *)(inited + 40) = v5;
    swift_getErrorValue();
    *(_QWORD *)(inited + 72) = v14;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(inited + 48));
    (*(void (**)(uint64_t *))(*(_QWORD *)(v14 - 8) + 16))(boxed_opaque_existential_1);
    v2 = specialized Dictionary.init(dictionaryLiteral:)(inited);
  }
  v7 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v9 = v8;
  swift_bridgeObjectRetain();
  v10 = (void *)MEMORY[0x2426863FC](v7, v9);
  swift_bridgeObjectRelease();
  if (v2)
  {
    v11.super.isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
  }
  else
  {
    v11.super.isa = 0;
  }
  v12 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDD1540]), sel_initWithDomain_code_userInfo_, v10, a1, v11.super.isa);
  swift_bridgeObjectRelease();

  return v12;
}

uint64_t type metadata accessor for LACPreboardErrorBuilder()
{
  return objc_opt_self();
}

id static LACEvaluationRequestProcessorFactory.makeProcessor(withSubprocessors:)(uint64_t a1)
{
  objc_class *v2;
  char *v3;
  char *v4;
  objc_super v6;

  v2 = (objc_class *)type metadata accessor for LACEvaluationRequestCompoundProcessor();
  v3 = (char *)objc_allocWithZone(v2);
  *(_QWORD *)&v3[OBJC_IVAR____TtC23LocalAuthenticationCore37LACEvaluationRequestCompoundProcessor_nextProcessor] = 0;
  v4 = &v3[OBJC_IVAR____TtC23LocalAuthenticationCore37LACEvaluationRequestCompoundProcessor_currentProcessorIndex];
  *(_QWORD *)v4 = 0;
  v4[8] = 1;
  *(_QWORD *)&v3[OBJC_IVAR____TtC23LocalAuthenticationCore37LACEvaluationRequestCompoundProcessor_involvedProcessorIndices] = MEMORY[0x24BEE4AF8];
  *(_QWORD *)&v3[OBJC_IVAR____TtC23LocalAuthenticationCore37LACEvaluationRequestCompoundProcessor_processors] = a1;
  v6.receiver = v3;
  v6.super_class = v2;
  swift_bridgeObjectRetain();
  return objc_msgSendSuper2(&v6, sel_init);
}

uint64_t protocol witness for LACPreboardLaunching.launchPreboard() in conformance LACPreboardLauncher()
{
  void **v0;
  _QWORD *v1;
  void *v2;
  uint64_t v3;
  _QWORD *v4;

  v2 = *v0;
  v1[2] = v1;
  v1[3] = protocol witness for LACPreboardLaunching.launchPreboard() in conformance LACPreboardLauncher;
  v3 = swift_continuation_init();
  v1[10] = MEMORY[0x24BDAC760];
  v4 = v1 + 10;
  v4[1] = 0x40000000;
  v4[2] = @objc completion handler block implementation for <A><A1>@escaping @callee_unowned @convention(block) (@unowned NSError?) -> () with result type ();
  v4[3] = &block_descriptor_12;
  v4[4] = v3;
  objc_msgSend(v2, sel_launchPreboardWithCompletion_, v4);
  return swift_continuation_await();
}

{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  if (*(_QWORD *)(v1 + 48))
    swift_willThrow();
  return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t LACPreboardPasscodeVerifier.__allocating_init()()
{
  return swift_allocObject();
}

uint64_t LACPreboardPasscodeVerifier.init()()
{
  uint64_t v0;

  return v0;
}

void LACPreboardPasscodeVerifier.verifyPasscode(_:in:)()
{
  specialized LACPreboardPasscodeVerifier.verifyPasscode(_:in:)();
}

uint64_t LACPreboardPasscodeVerifier.deinit()
{
  uint64_t v0;

  return v0;
}

uint64_t LACPreboardPasscodeVerifier.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

void protocol witness for LACPreboardPasscodeVerifying.verifyPasscode(_:in:) in conformance LACPreboardPasscodeVerifier()
{
  specialized LACPreboardPasscodeVerifier.verifyPasscode(_:in:)();
}

void specialized LACPreboardPasscodeVerifier.verifyPasscode(_:in:)()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  Class isa;
  Class v4;
  Class v5;
  int v6;
  id v7;
  Swift::String v8;
  Swift::String v9;
  Swift::String v10;
  uint64_t v11;
  int v12;
  Swift::String v13;

  v0 = type metadata accessor for LACLogger();
  MEMORY[0x24BDAC7A8](v0);
  v2 = (char *)&v11 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v4 = Data._bridgeToObjectiveC()().super.isa;
  v5 = Data._bridgeToObjectiveC()().super.isa;
  v6 = MKBVerifyPasswordWithContext();

  if (v6)
  {
    v7 = LACLogPreboard();
    Logger.init(_:)();
    v13._countAndFlagsBits = 0;
    v13._object = (void *)0xE000000000000000;
    _StringGuts.grow(_:)(42);
    swift_bridgeObjectRelease();
    v13._countAndFlagsBits = 0xD000000000000028;
    v13._object = (void *)0x8000000240A85C30;
    v12 = v6;
    v8._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v8);
    swift_bridgeObjectRelease();
    v9 = v13;
    LOBYTE(v13._countAndFlagsBits) = 2;
    LACLogger.log(level:_:)((LocalAuthenticationCore::LACLogger::Level)&v13, v9);
    swift_bridgeObjectRelease();
    outlined destroy of LACLogger((uint64_t)v2);
    v13._countAndFlagsBits = 0;
    v13._object = (void *)0xE000000000000000;
    _StringGuts.grow(_:)(33);
    swift_bridgeObjectRelease();
    v13._countAndFlagsBits = 0xD00000000000001FLL;
    v13._object = (void *)0x8000000240A85C60;
    v12 = v6;
    v10._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v10);
    swift_bridgeObjectRelease();
    specialized static LACPreboardErrorBuilder.error(code:message:)(0, v13._countAndFlagsBits, (unint64_t)v13._object);
    swift_bridgeObjectRelease();
    swift_willThrow();
  }
}

uint64_t dispatch thunk of LACPreboardPasscodeVerifying.verifyPasscode(_:in:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 8))();
}

uint64_t type metadata accessor for LACPreboardPasscodeVerifier()
{
  return objc_opt_self();
}

uint64_t method lookup function for LACPreboardPasscodeVerifier()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of LACPreboardPasscodeVerifier.__allocating_init()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 80))();
}

uint64_t static LACLocalization.faceID()()
{
  Swift::String v1;

  v1._countAndFlagsBits = 0;
  v1._object = (void *)0xE000000000000000;
  return specialized static LACLocalization.localizedString(key:value:tableSuffix:)(0x44495F45434146, (void *)0xE700000000000000, v1);
}

uint64_t static LACLocalization.touchID()()
{
  Swift::String v1;

  v1._countAndFlagsBits = 0;
  v1._object = (void *)0xE000000000000000;
  return specialized static LACLocalization.localizedString(key:value:tableSuffix:)(0x44495F4843554F54, (void *)0xE800000000000000, v1);
}

uint64_t static LACLocalization.opticID()()
{
  Swift::String v1;

  v1._countAndFlagsBits = 0;
  v1._object = (void *)0xE000000000000000;
  return specialized static LACLocalization.localizedString(key:value:tableSuffix:)(0x44495F434954504FLL, (void *)0xE800000000000000, v1);
}

id @objc static LACLocalization.faceID()(int a1, int a2, uint64_t a3, void *a4)
{
  uint64_t v6;
  void *v7;
  Swift::String v9;

  v9._countAndFlagsBits = 0;
  v9._object = (void *)0xE000000000000000;
  v6 = specialized static LACLocalization.localizedString(key:value:tableSuffix:)(a3, a4, v9);
  v7 = (void *)MEMORY[0x2426863FC](v6);
  swift_bridgeObjectRelease();
  return v7;
}

void one-time initialization function for ratchetTableSuffix()
{
  static LACLocalization.ratchetTableSuffix = 0x74656863746152;
  unk_25707A060 = 0xE700000000000000;
}

uint64_t static LACLocalization.dtoErrorPasscodeNotSet()()
{
  return static LACLocalization.dtoErrorPasscodeNotSet()(0xD00000000000001ALL, (void *)0x8000000240A85C80);
}

uint64_t static LACLocalization.dtoErrorBiometryNotEnrolled()()
{
  return static LACLocalization.dtoErrorPasscodeNotSet()(0xD00000000000001FLL, (void *)0x8000000240A85CA0);
}

uint64_t static LACLocalization.dtoErrorDeviceTypeNotSupported()()
{
  return static LACLocalization.dtoErrorPasscodeNotSet()(0xD000000000000023, (void *)0x8000000240A85CC0);
}

uint64_t static LACLocalization.dtoErrorPasscodeNotSet()(uint64_t a1, void *a2)
{
  if (one-time initialization token for ratchetTableSuffix != -1)
    swift_once();
  return specialized static LACLocalization.localizedString(key:value:tableSuffix:)(a1, a2, (Swift::String)static LACLocalization.ratchetTableSuffix);
}

id @objc static LACLocalization.dtoErrorPasscodeNotSet()(int a1, int a2, uint64_t a3, void *a4)
{
  uint64_t v6;
  void *v7;

  if (one-time initialization token for ratchetTableSuffix != -1)
    swift_once();
  v6 = specialized static LACLocalization.localizedString(key:value:tableSuffix:)(a3, a4, (Swift::String)static LACLocalization.ratchetTableSuffix);
  v7 = (void *)MEMORY[0x2426863FC](v6);
  swift_bridgeObjectRelease();
  return v7;
}

uint64_t NSBundle.Sentinel.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

id one-time initialization function for current()
{
  uint64_t ObjCClassFromMetadata;
  id result;

  type metadata accessor for NSBundle.Sentinel();
  ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  result = objc_msgSend((id)objc_opt_self(), sel_bundleForClass_, ObjCClassFromMetadata);
  static NSBundle.current = (uint64_t)result;
  return result;
}

uint64_t specialized static LACLocalization.localizedString(key:value:tableSuffix:)(uint64_t a1, void *a2, Swift::String a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  id v9;
  Swift::String v10;
  Swift::String_optional v11;
  Swift::String v12;
  uint64_t countAndFlagsBits;
  Swift::String v15;

  v5 = HIBYTE(a3._object) & 0xF;
  if (((uint64_t)a3._object & 0x2000000000000000) == 0)
    v5 = a3._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
  if (v5)
  {
    String.append(_:)(a3);
    v6 = 45;
    v7 = 0xE100000000000000;
  }
  else
  {
    v6 = 0;
    v7 = 0xE000000000000000;
  }
  v8 = v7;
  String.append(_:)(*(Swift::String *)&v6);
  swift_bridgeObjectRelease();
  if (one-time initialization token for current != -1)
    swift_once();
  v9 = (id)static NSBundle.current;
  v15._object = (void *)0xE000000000000000;
  v10._countAndFlagsBits = a1;
  v10._object = a2;
  v11.value._countAndFlagsBits = 0x617A696C61636F4CLL;
  v11.value._object = (void *)0xEB00000000656C62;
  v12._countAndFlagsBits = 0;
  v12._object = (void *)0xE000000000000000;
  v15._countAndFlagsBits = 0;
  countAndFlagsBits = NSLocalizedString(_:tableName:bundle:value:comment:)(v10, v11, (NSBundle)v9, v12, v15)._countAndFlagsBits;
  swift_bridgeObjectRelease();

  return countAndFlagsBits;
}

id specialized static LACLocalization.dtoSecurityDelayEndedText(_:duration:)(uint64_t a1, uint64_t a2, double a3)
{
  id v6;
  id result;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  Swift::String v17;

  if (a3 <= 0.0)
  {
    swift_bridgeObjectRetain();
    return (id)a1;
  }
  v6 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDD14F8]), sel_init);
  objc_msgSend(v6, sel_setUnitsStyle_, 3);
  result = objc_msgSend(v6, sel_stringFromTimeInterval_, a3);
  if (result)
  {
    v8 = result;
    v9 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v11 = v10;

    if (one-time initialization token for ratchetTableSuffix != -1)
      swift_once();
    v12 = static LACLocalization.ratchetTableSuffix;
    v13 = (void *)unk_25707A060;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
    v14 = swift_allocObject();
    *(_OWORD *)(v14 + 16) = xmmword_240A7D040;
    v15 = MEMORY[0x24BEE0D00];
    *(_QWORD *)(v14 + 56) = MEMORY[0x24BEE0D00];
    v16 = lazy protocol witness table accessor for type String and conformance String();
    *(_QWORD *)(v14 + 32) = a1;
    *(_QWORD *)(v14 + 40) = a2;
    *(_QWORD *)(v14 + 96) = v15;
    *(_QWORD *)(v14 + 104) = v16;
    *(_QWORD *)(v14 + 64) = v16;
    *(_QWORD *)(v14 + 72) = v9;
    *(_QWORD *)(v14 + 80) = v11;
    swift_bridgeObjectRetain();
    v17._countAndFlagsBits = v12;
    v17._object = v13;
    specialized static LACLocalization.localizedString(key:value:tableSuffix:)(0xD00000000000001DLL, (void *)0x8000000240A85D60, v17);
    swift_bridgeObjectRetain();
    a1 = String.init(format:_:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return (id)a1;
  }
  __break(1u);
  return result;
}

uint64_t type metadata accessor for NSBundle.Sentinel()
{
  return objc_opt_self();
}

unint64_t lazy protocol witness table accessor for type String and conformance String()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type String and conformance String;
  if (!lazy protocol witness table cache variable for type String and conformance String)
  {
    result = MEMORY[0x242687614](MEMORY[0x24BDCFB50], MEMORY[0x24BEE0D00]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String and conformance String);
  }
  return result;
}

unint64_t static LACDTOPendingPolicyEvaluationStore.storeKey.getter()
{
  return 0xD000000000000012;
}

uint64_t LACDTOPendingPolicyEvaluationStore.pendingEvaluationsDict.setter(uint64_t a1)
{
  _QWORD *v1;
  uint64_t ObjectType;
  uint64_t v4;
  char v5;
  char v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  void (*v12)(void *, _QWORD *);
  _QWORD *v13;

  ObjectType = swift_getObjectType();
  v4 = *(_QWORD *)((char *)v1
                 + OBJC_IVAR____TtC23LocalAuthenticationCore34LACDTOPendingPolicyEvaluationStore_pendingEvaluationsDict);
  *(_QWORD *)((char *)v1
            + OBJC_IVAR____TtC23LocalAuthenticationCore34LACDTOPendingPolicyEvaluationStore_pendingEvaluationsDict) = a1;
  swift_bridgeObjectRetain();
  specialized static Dictionary<>.== infix(_:_:)(v4, a1);
  v6 = v5;
  v7 = swift_bridgeObjectRelease();
  if ((v6 & 1) != 0)
    return swift_bridgeObjectRelease();
  v9 = (*(uint64_t (**)(uint64_t))((*MEMORY[0x24BEE4EA0] & *v1) + 0x88))(v7);
  v10 = *(_QWORD *)((char *)v1 + OBJC_IVAR____TtC23LocalAuthenticationCore34LACDTOPendingPolicyEvaluationStore_taskGroup);
  v11 = (_QWORD *)swift_allocObject();
  v11[2] = v1;
  v11[3] = v9;
  v11[4] = ObjectType;
  v12 = *(void (**)(void *, _QWORD *))(*(_QWORD *)v10 + 120);
  v13 = v1;
  v12(&closure #1 in LACDTOPendingPolicyEvaluationStore.persist()partial apply, v11);
  swift_bridgeObjectRelease();
  return swift_release();
}

_QWORD *LACDTOPendingPolicyEvaluationStore.pendingEvaluations.getter()
{
  uint64_t v0;
  _QWORD *v1;

  v0 = swift_bridgeObjectRetain();
  v1 = specialized _copyCollectionToContiguousArray<A>(_:)(v0, (uint64_t (*)(uint64_t *, _QWORD *, uint64_t, uint64_t))specialized Sequence._copySequenceContents(initializing:));
  swift_bridgeObjectRelease();
  return v1;
}

id LACDTOPendingPolicyEvaluationStore.__allocating_init(persistentStore:workQueue:)(uint64_t a1, void *a2)
{
  objc_class *v2;
  objc_class *v3;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  id v13;
  id v14;
  objc_super v16;

  v3 = v2;
  v6 = (char *)objc_allocWithZone(v2);
  v7 = OBJC_IVAR____TtC23LocalAuthenticationCore34LACDTOPendingPolicyEvaluationStore_taskGroup;
  type metadata accessor for SerialTask();
  v8 = swift_allocObject();
  v9 = v8 + OBJC_IVAR____TtC23LocalAuthenticationCore10SerialTask_continuation;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<()>.Continuation);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(v9, 1, 1, v10);
  v11 = v6;
  SerialTask.start()();
  *(_QWORD *)&v6[v7] = v8;
  v12 = OBJC_IVAR____TtC23LocalAuthenticationCore34LACDTOPendingPolicyEvaluationStore_pendingEvaluationsDict;
  *(_QWORD *)&v11[v12] = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  *(_QWORD *)&v11[OBJC_IVAR____TtC23LocalAuthenticationCore34LACDTOPendingPolicyEvaluationStore_store] = a1;
  *(_QWORD *)&v11[OBJC_IVAR____TtC23LocalAuthenticationCore34LACDTOPendingPolicyEvaluationStore_workQueue] = a2;
  swift_unknownObjectRetain();
  v13 = a2;

  v16.receiver = v11;
  v16.super_class = v3;
  v14 = objc_msgSendSuper2(&v16, sel_init);
  swift_unknownObjectRelease();

  return v14;
}

id LACDTOPendingPolicyEvaluationStore.init(persistentStore:workQueue:)(uint64_t a1, void *a2)
{
  id v3;

  v3 = specialized LACDTOPendingPolicyEvaluationStore.init(persistentStore:workQueue:)(a1, a2);
  swift_unknownObjectRelease();

  return v3;
}

uint64_t LACDTOPendingPolicyEvaluationStore.loadPersistedEvaluations(completion:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v11;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v6, 1, 1, v7);
  v8 = swift_allocObject();
  swift_unknownObjectWeakInit();
  v9 = (_QWORD *)swift_allocObject();
  v9[2] = 0;
  v9[3] = 0;
  v9[4] = v8;
  v9[5] = a1;
  v9[6] = a2;
  swift_retain();
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v6, (uint64_t)&async function pointer to partial apply for closure #1 in LACDTOPendingPolicyEvaluationStore.loadPersistedEvaluations(completion:), (uint64_t)v9);
  return swift_release();
}

uint64_t closure #1 in LACDTOPendingPolicyEvaluationStore.loadPersistedEvaluations(completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;

  v6[26] = a5;
  v6[27] = a6;
  v6[25] = a4;
  v7 = type metadata accessor for DispatchWorkItemFlags();
  v6[28] = v7;
  v6[29] = *(_QWORD *)(v7 - 8);
  v6[30] = swift_task_alloc();
  v8 = type metadata accessor for DispatchQoS();
  v6[31] = v8;
  v6[32] = *(_QWORD *)(v8 - 8);
  v6[33] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t closure #1 in LACDTOPendingPolicyEvaluationStore.loadPersistedEvaluations(completion:)()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  int *v3;
  _QWORD *v4;
  uint64_t (*v6)(void);

  v1 = *(_QWORD *)(v0 + 200) + 16;
  swift_beginAccess();
  v2 = (_QWORD *)MEMORY[0x242687740](v1);
  *(_QWORD *)(v0 + 272) = v2;
  if (v2)
  {
    v3 = *(int **)((*MEMORY[0x24BEE4EA0] & *v2) + 0xA0);
    v6 = (uint64_t (*)(void))((char *)v3 + *v3);
    v4 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 280) = v4;
    *v4 = v0;
    v4[1] = closure #1 in LACDTOPendingPolicyEvaluationStore.loadPersistedEvaluations(completion:);
    return v6();
  }
  else
  {
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  _QWORD *v12;
  void *v13;
  uint64_t v15;
  uint64_t v16;

  v1 = v0[25] + 16;
  swift_beginAccess();
  v2 = MEMORY[0x242687740](v1);
  if (v2)
  {
    v3 = (void *)v2;
    v4 = v0[36];
    v5 = v0[33];
    v6 = v0[30];
    v15 = v0[32];
    v16 = v0[31];
    v8 = v0[28];
    v7 = v0[29];
    v10 = v0[26];
    v9 = v0[27];
    v11 = objc_retain(*(id *)(v2
                            + OBJC_IVAR____TtC23LocalAuthenticationCore34LACDTOPendingPolicyEvaluationStore_workQueue));

    v12 = (_QWORD *)swift_allocObject();
    v12[2] = v10;
    v12[3] = v9;
    v12[4] = v4;
    v0[12] = partial apply for closure #1 in closure #1 in LACDTOPendingPolicyEvaluationStore.loadPersistedEvaluations(completion:);
    v0[13] = v12;
    v0[8] = MEMORY[0x24BDAC760];
    v0[9] = 1107296256;
    v0[10] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
    v0[11] = &block_descriptor_62;
    v13 = _Block_copy(v0 + 8);
    swift_retain();
    static DispatchQoS.unspecified.getter();
    v0[24] = MEMORY[0x24BEE4AF8];
    lazy protocol witness table accessor for type LACPolicy and conformance LACPolicy((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, (uint64_t (*)(uint64_t))MEMORY[0x24BEE5458], MEMORY[0x24BEE5468]);
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
    lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]();
    dispatch thunk of SetAlgebra.init<A>(_:)();
    MEMORY[0x242686654](0, v5, v6, v13);
    _Block_release(v13);

    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v8);
    (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v5, v16);
    swift_release();
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  swift_task_dealloc();
  swift_task_dealloc();
  return ((uint64_t (*)(void))v0[1])();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  _QWORD *v11;
  void *v12;
  id v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v1 = *(_QWORD *)(v0 + 200);

  swift_beginAccess();
  v2 = MEMORY[0x242687740](v1 + 16);
  if (v2)
  {
    v3 = (void *)v2;
    v4 = *(void **)(v0 + 296);
    v5 = *(_QWORD *)(v0 + 264);
    v6 = *(_QWORD *)(v0 + 240);
    v16 = *(_QWORD *)(v0 + 256);
    v17 = *(_QWORD *)(v0 + 248);
    v7 = *(_QWORD *)(v0 + 224);
    v15 = *(_QWORD *)(v0 + 232);
    v8 = *(_QWORD *)(v0 + 208);
    v9 = *(_QWORD *)(v0 + 216);
    v10 = objc_retain(*(id *)(v2
                            + OBJC_IVAR____TtC23LocalAuthenticationCore34LACDTOPendingPolicyEvaluationStore_workQueue));

    v11 = (_QWORD *)swift_allocObject();
    v11[2] = v8;
    v11[3] = v9;
    v11[4] = v4;
    *(_QWORD *)(v0 + 48) = partial apply for closure #2 in closure #1 in LACDTOPendingPolicyEvaluationStore.loadPersistedEvaluations(completion:);
    *(_QWORD *)(v0 + 56) = v11;
    *(_QWORD *)(v0 + 16) = MEMORY[0x24BDAC760];
    *(_QWORD *)(v0 + 24) = 1107296256;
    *(_QWORD *)(v0 + 32) = thunk for @escaping @callee_guaranteed @Sendable () -> ();
    *(_QWORD *)(v0 + 40) = &block_descriptor_13;
    v12 = _Block_copy((const void *)(v0 + 16));
    swift_retain();
    v13 = v4;
    static DispatchQoS.unspecified.getter();
    *(_QWORD *)(v0 + 184) = MEMORY[0x24BEE4AF8];
    lazy protocol witness table accessor for type LACPolicy and conformance LACPolicy((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, (uint64_t (*)(uint64_t))MEMORY[0x24BEE5458], MEMORY[0x24BEE5468]);
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
    lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]();
    dispatch thunk of SetAlgebra.init<A>(_:)();
    MEMORY[0x242686654](0, v5, v6, v12);
    _Block_release(v12);

    (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v6, v7);
    (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v5, v17);
    swift_release();
  }
  else
  {

  }
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t closure #1 in LACDTOPendingPolicyEvaluationStore.loadPersistedEvaluations(completion:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;

  v3 = *v2;
  *(_QWORD *)(v3 + 288) = a1;
  *(_QWORD *)(v3 + 296) = v1;
  swift_task_dealloc();
  if (!v1)

  return swift_task_switch();
}

void thunk for @escaping @callee_unowned @convention(block) (@unowned NSArray?, @unowned NSError?) -> ()(objc_class *a1, uint64_t a2, uint64_t a3)
{
  Class isa;
  uint64_t v6;
  id v7;

  isa = a1;
  if (a1)
  {
    type metadata accessor for LACDTOMutablePendingPolicyEvaluation();
    isa = Array._bridgeToObjectiveC()().super.isa;
  }
  if (a2)
    v6 = _convertErrorToNSError(_:)();
  else
    v6 = 0;
  v7 = (id)v6;
  (*(void (**)(uint64_t, Class))(a3 + 16))(a3, isa);

}

uint64_t LACDTOPendingPolicyEvaluationStore.load()()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 24) = v0;
  type metadata accessor for LACLogger();
  *(_QWORD *)(v1 + 32) = swift_task_alloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  id v2;
  Swift::String v3;
  uint64_t ObjectType;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  char v9;

  v1 = *(_QWORD *)(v0 + 32);
  v2 = LACLogDTOEvaluation();
  Logger.init(_:)();
  v9 = 0;
  v3._countAndFlagsBits = 0xD00000000000001BLL;
  v3._object = (void *)0x8000000240A85D80;
  LACLogger.log(level:_:)((LocalAuthenticationCore::LACLogger::Level)&v9, v3);
  outlined destroy of LACLogger(v1);
  ObjectType = swift_getObjectType();
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 40) = v5;
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [LACDTOMutablePendingPolicyEvaluation]);
  v7 = lazy protocol witness table accessor for type [LACDTOMutablePendingPolicyEvaluation] and conformance <A> [A]((unint64_t *)&lazy protocol witness table cache variable for type [LACDTOMutablePendingPolicyEvaluation] and conformance <A> [A], &lazy protocol witness table cache variable for type LACDTOMutablePendingPolicyEvaluation and conformance LACDTOMutablePendingPolicyEvaluation, (uint64_t)&protocol conformance descriptor for LACDTOMutablePendingPolicyEvaluation, MEMORY[0x24BEE12D0]);
  *v5 = v0;
  v5[1] = LACDTOPendingPolicyEvaluationStore.load();
  return LACPersistentStore.object<A>(forKey:)(v0 + 16, 0xD000000000000012, 0x8000000240A83060, ObjectType, v6, v7);
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 48) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  id v3;
  uint64_t v4;
  Swift::String v5;
  Swift::String v6;
  _QWORD v8[2];

  v1 = *(_QWORD *)(v0 + 16);
  if (v1)
  {
    v2 = *(_QWORD *)(v0 + 32);
    v3 = LACLogDTOEvaluation();
    Logger.init(_:)();
    _StringGuts.grow(_:)(29);
    swift_bridgeObjectRelease();
    v8[0] = 0xD000000000000000;
    v8[1] = 0x8000000240A85DA0;
    v4 = type metadata accessor for LACDTOMutablePendingPolicyEvaluation();
    v5._countAndFlagsBits = MEMORY[0x24268651C](v1, v4);
    String.append(_:)(v5);
    swift_bridgeObjectRelease();
    v6._countAndFlagsBits = 0xD00000000000001BLL;
    v6._object = (void *)0x8000000240A85DA0;
    LACLogger.log(level:_:)((LocalAuthenticationCore::LACLogger::Level)v8, v6);
    swift_bridgeObjectRelease();
    outlined destroy of LACLogger(v2);
  }
  else
  {
    v1 = MEMORY[0x24BEE4AF8];
  }
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v1);
}

{
  uint64_t v0;

  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t @objc closure #1 in LACDTOPendingPolicyEvaluationStore.load()(const void *a1, void *a2)
{
  _QWORD *v2;
  _QWORD *v4;

  v2[2] = a2;
  v2[3] = _Block_copy(a1);
  a2;
  v4 = (_QWORD *)swift_task_alloc();
  v2[4] = v4;
  *v4 = v2;
  v4[1] = @objc closure #1 in LACDTOPendingPolicyEvaluationStore.load();
  return LACDTOPendingPolicyEvaluationStore.load()();
}

uint64_t @objc closure #1 in LACDTOPendingPolicyEvaluationStore.load()()
{
  void *v0;
  uint64_t *v1;
  void *v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  Class isa;
  void *v8;
  void (**v9)(_QWORD, _QWORD, _QWORD);

  v2 = v0;
  v3 = *v1;
  v4 = *(void **)(*v1 + 16);
  v5 = *v1;
  swift_task_dealloc();

  if (v0)
  {
    v6 = _convertErrorToNSError(_:)();

    isa = 0;
    v8 = (void *)v6;
  }
  else
  {
    type metadata accessor for LACDTOMutablePendingPolicyEvaluation();
    isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    v6 = 0;
    v8 = isa;
  }
  v9 = *(void (***)(_QWORD, _QWORD, _QWORD))(v3 + 24);
  ((void (**)(_QWORD, Class, uint64_t))v9)[2](v9, isa, v6);

  _Block_release(v9);
  return (*(uint64_t (**)(void))(v5 + 8))();
}

Swift::Void __swiftcall LACDTOPendingPolicyEvaluationStore.persistEvaluations()()
{
  _QWORD *v0;
  uint64_t ObjectType;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  void (*v5)(void *, _QWORD *);
  _QWORD *v6;

  ObjectType = swift_getObjectType();
  v2 = (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x88))();
  v3 = *(_QWORD *)((char *)v0 + OBJC_IVAR____TtC23LocalAuthenticationCore34LACDTOPendingPolicyEvaluationStore_taskGroup);
  v4 = (_QWORD *)swift_allocObject();
  v4[2] = v0;
  v4[3] = v2;
  v4[4] = ObjectType;
  v5 = *(void (**)(void *, _QWORD *))(*(_QWORD *)v3 + 120);
  v6 = v0;
  v5(&async function pointer to partial apply for closure #1 in LACDTOPendingPolicyEvaluationStore.persist(), v4);
  swift_release();
}

uint64_t LACDTOPendingPolicyEvaluationStore.addPendingEvaluation(_:)(char *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char isUniquelyReferenced_nonNull_native;

  v2 = v1;
  v4 = *(_QWORD *)&a1[OBJC_IVAR____TtC23LocalAuthenticationCore36LACDTOMutablePendingPolicyEvaluation_identifier];
  v5 = *(_QWORD *)&a1[OBJC_IVAR____TtC23LocalAuthenticationCore36LACDTOMutablePendingPolicyEvaluation_identifier + 8];
  v6 = *(_QWORD *)(v2
                 + OBJC_IVAR____TtC23LocalAuthenticationCore34LACDTOPendingPolicyEvaluationStore_pendingEvaluationsDict);
  swift_bridgeObjectRetain();
  v7 = a1;
  swift_bridgeObjectRetain();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)v7, v4, v5, isUniquelyReferenced_nonNull_native);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return LACDTOPendingPolicyEvaluationStore.pendingEvaluationsDict.setter(v6);
}

void *LACDTOPendingPolicyEvaluationStore.pendingEvaluation(withIdentifier:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v6;
  char v7;
  void *v8;
  id v9;

  v3 = *(_QWORD *)(v2
                 + OBJC_IVAR____TtC23LocalAuthenticationCore34LACDTOPendingPolicyEvaluationStore_pendingEvaluationsDict);
  if (!*(_QWORD *)(v3 + 16))
    return 0;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v6 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2);
  if ((v7 & 1) != 0)
  {
    v8 = *(void **)(*(_QWORD *)(v3 + 56) + 8 * v6);
    v9 = v8;
  }
  else
  {
    v8 = 0;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8;
}

Swift::Void __swiftcall LACDTOPendingPolicyEvaluationStore.removePendingEvaluation(with:)(Swift::String with)
{
  uint64_t v1;
  void *object;
  uint64_t countAndFlagsBits;
  uint64_t v4;

  object = with._object;
  countAndFlagsBits = with._countAndFlagsBits;
  v4 = *(_QWORD *)(v1
                 + OBJC_IVAR____TtC23LocalAuthenticationCore34LACDTOPendingPolicyEvaluationStore_pendingEvaluationsDict);
  swift_bridgeObjectRetain();

  LACDTOPendingPolicyEvaluationStore.pendingEvaluationsDict.setter(v4);
}

id LACDTOPendingPolicyEvaluationStore.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

void LACDTOPendingPolicyEvaluationStore.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

id LACDTOPendingPolicyEvaluationStore.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for LACDTOPendingPolicyEvaluationStore();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t closure #1 in LACDTOPendingPolicyEvaluationStore.persist()(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;

  v2[6] = a1;
  v2[7] = a2;
  type metadata accessor for LACLogger();
  v2[8] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t closure #1 in LACDTOPendingPolicyEvaluationStore.persist()()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t ObjectType;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v1 = v0[7];
  ObjectType = swift_getObjectType();
  v0[4] = v1;
  v3 = (_QWORD *)swift_task_alloc();
  v0[9] = v3;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [LACDTOMutablePendingPolicyEvaluation]);
  v5 = lazy protocol witness table accessor for type [LACDTOMutablePendingPolicyEvaluation] and conformance <A> [A](&lazy protocol witness table cache variable for type [LACDTOMutablePendingPolicyEvaluation] and conformance <A> [A], &lazy protocol witness table cache variable for type LACDTOMutablePendingPolicyEvaluation and conformance LACDTOMutablePendingPolicyEvaluation, (uint64_t)&protocol conformance descriptor for LACDTOMutablePendingPolicyEvaluation, MEMORY[0x24BEE12A0]);
  *v3 = v0;
  v3[1] = closure #1 in LACDTOPendingPolicyEvaluationStore.persist();
  return LACPersistentStore.set<A>(object:for:)((uint64_t)(v0 + 4), 0xD000000000000012, 0x8000000240A83060, ObjectType, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 80) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  id v2;
  uint64_t v3;
  Swift::String v4;
  Swift::String v5;
  _QWORD v7[2];

  v1 = *(_QWORD *)(v0 + 56);
  v2 = LACLogDTOEvaluation();
  Logger.init(_:)();
  _StringGuts.grow(_:)(32);
  swift_bridgeObjectRelease();
  v7[0] = 0xD000000000000000;
  v7[1] = 0x8000000240A85EE0;
  v3 = type metadata accessor for LACDTOMutablePendingPolicyEvaluation();
  v4._countAndFlagsBits = MEMORY[0x24268651C](v1, v3);
  String.append(_:)(v4);
  swift_bridgeObjectRelease();
  v5._countAndFlagsBits = 0xD00000000000001ELL;
  v5._object = (void *)0x8000000240A85EE0;
  LACLogger.log(level:_:)((LocalAuthenticationCore::LACLogger::Level)v7, v5);
  swift_bridgeObjectRelease();
  outlined destroy of LACLogger(*(_QWORD *)(v0 + 64));
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  void *v1;
  id v2;
  Swift::String v3;
  Swift::String v4;
  void *v5;
  _QWORD v7[2];

  v1 = *(void **)(v0 + 80);
  v2 = LACLogDTOEvaluation();
  Logger.init(_:)();
  v7[0] = 0;
  v7[1] = 0xE000000000000000;
  _StringGuts.grow(_:)(51);
  *(_QWORD *)(v0 + 16) = 0;
  *(_QWORD *)(v0 + 24) = 0xE000000000000000;
  v3._object = (void *)0x8000000240A85EA0;
  v3._countAndFlagsBits = 0xD000000000000031;
  String.append(_:)(v3);
  *(_QWORD *)(v0 + 40) = v1;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
  _print_unlocked<A, B>(_:_:)();
  v4._countAndFlagsBits = *(_QWORD *)(v0 + 16);
  v5 = *(void **)(v0 + 24);
  LOBYTE(v7[0]) = 2;
  v4._object = v5;
  LACLogger.log(level:_:)((LocalAuthenticationCore::LACLogger::Level)v7, v4);
  swift_bridgeObjectRelease();

  outlined destroy of LACLogger(*(_QWORD *)(v0 + 64));
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void specialized static Dictionary<>.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  unint64_t v10;
  unint64_t v11;
  int64_t v12;
  unint64_t v13;
  int64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  id v19;
  unint64_t v20;
  char v21;
  char v22;
  id v23;
  char v24;

  if (a1 == a2 || *(_QWORD *)(a1 + 16) != *(_QWORD *)(a2 + 16))
    return;
  v4 = 0;
  v5 = a1 + 64;
  v6 = 1 << *(_BYTE *)(a1 + 32);
  v7 = -1;
  if (v6 < 64)
    v7 = ~(-1 << v6);
  v8 = v7 & *(_QWORD *)(a1 + 64);
  v9 = (unint64_t)(v6 + 63) >> 6;
  while (1)
  {
    if (v8)
    {
      v10 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      v11 = v10 | (v4 << 6);
      goto LABEL_24;
    }
    v12 = v4 + 1;
    if (__OFADD__(v4, 1))
    {
      __break(1u);
      goto LABEL_31;
    }
    if (v12 >= v9)
      return;
    v13 = *(_QWORD *)(v5 + 8 * v12);
    ++v4;
    if (!v13)
    {
      v4 = v12 + 1;
      if (v12 + 1 >= v9)
        return;
      v13 = *(_QWORD *)(v5 + 8 * v4);
      if (!v13)
      {
        v4 = v12 + 2;
        if (v12 + 2 >= v9)
          return;
        v13 = *(_QWORD *)(v5 + 8 * v4);
        if (!v13)
        {
          v4 = v12 + 3;
          if (v12 + 3 >= v9)
            return;
          v13 = *(_QWORD *)(v5 + 8 * v4);
          if (!v13)
            break;
        }
      }
    }
LABEL_23:
    v8 = (v13 - 1) & v13;
    v11 = __clz(__rbit64(v13)) + (v4 << 6);
LABEL_24:
    v15 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 16 * v11);
    v16 = *v15;
    v17 = v15[1];
    v18 = *(void **)(*(_QWORD *)(a1 + 56) + 8 * v11);
    swift_bridgeObjectRetain();
    v19 = v18;
    v20 = specialized __RawDictionaryStorage.find<A>(_:)(v16, v17);
    v22 = v21;
    swift_bridgeObjectRelease();
    if ((v22 & 1) == 0)
    {

      return;
    }
    type metadata accessor for LACDTOMutablePendingPolicyEvaluation();
    v23 = *(id *)(*(_QWORD *)(a2 + 56) + 8 * v20);
    v24 = static NSObject.== infix(_:_:)();

    if ((v24 & 1) == 0)
      return;
  }
  v14 = v12 + 4;
  if (v14 >= v9)
    return;
  v13 = *(_QWORD *)(v5 + 8 * v14);
  if (v13)
  {
    v4 = v14;
    goto LABEL_23;
  }
  while (1)
  {
    v4 = v14 + 1;
    if (__OFADD__(v14, 1))
      break;
    if (v4 >= v9)
      return;
    v13 = *(_QWORD *)(v5 + 8 * v4);
    ++v14;
    if (v13)
      goto LABEL_23;
  }
LABEL_31:
  __break(1u);
}

uint64_t _sIeghH_IeAgH_TR(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t (*v6)(void);

  v6 = (uint64_t (*)(void))((char *)a3 + *a3);
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v4;
  *v4 = v3;
  v4[1] = dispatch thunk of LACUserDefaultsPersistentStore.setData(_:forKey:);
  return v6();
}

uint64_t _sIeAgH_ytIeAgHr_TR(uint64_t a1, uint64_t a2, uint64_t a3, int *a4)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t (*v7)(void);

  v7 = (uint64_t (*)(void))((char *)a4 + *a4);
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 16) = v5;
  *v5 = v4;
  v5[1] = dispatch thunk of LACUserDefaultsPersistentStore.setData(_:forKey:);
  return v7();
}

uint64_t _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgmq5(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = type metadata accessor for TaskPriority();
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, 1, v6) != 1)
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
    if (!*(_QWORD *)(a3 + 16))
      goto LABEL_5;
    goto LABEL_3;
  }
  outlined destroy of TaskPriority?(a1);
  if (*(_QWORD *)(a3 + 16))
  {
LABEL_3:
    swift_getObjectType();
    swift_unknownObjectRetain();
    dispatch thunk of Actor.unownedExecutor.getter();
    swift_unknownObjectRelease();
  }
LABEL_5:
  v8 = swift_allocObject();
  *(_QWORD *)(v8 + 16) = a2;
  *(_QWORD *)(v8 + 24) = a3;
  return swift_task_create();
}

uint64_t specialized Dictionary._Variant.removeValue(forKey:)(uint64_t a1)
{
  return specialized Dictionary._Variant.removeValue(forKey:)(a1, (uint64_t *)&demangling cache variable for type metadata for _DictionaryStorage<UUID, LACOnenessAuthenticatorPendingRequest>);
}

{
  return specialized Dictionary._Variant.removeValue(forKey:)(a1, &demangling cache variable for type metadata for _DictionaryStorage<UUID, LACOnenessControllerPendingRequest>);
}

uint64_t specialized Dictionary._Variant.removeValue(forKey:)(uint64_t a1, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t *v4;
  unint64_t v6;
  char v7;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;

  v4 = v2;
  swift_bridgeObjectRetain();
  v6 = specialized __RawDictionaryStorage.find<A>(_:)(a1);
  LOBYTE(a1) = v7;
  swift_bridgeObjectRelease();
  if ((a1 & 1) == 0)
    return 0;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v9 = *v4;
  v14 = *v4;
  *v4 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    specialized _NativeDictionary.copy()(a2);
    v9 = v14;
  }
  v10 = *(_QWORD *)(v9 + 48);
  v11 = type metadata accessor for UUID();
  (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(v10 + *(_QWORD *)(*(_QWORD *)(v11 - 8) + 72) * v6, v11);
  v12 = *(_QWORD *)(*(_QWORD *)(v9 + 56) + 8 * v6);
  specialized _NativeDictionary._delete(at:)(v6, v9);
  *v4 = v9;
  swift_bridgeObjectRelease();
  return v12;
}

double specialized Dictionary._Variant.removeValue(forKey:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t *v3;
  uint64_t *v4;
  unint64_t v8;
  char v9;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v11;
  double result;
  uint64_t v13;

  v4 = v3;
  swift_bridgeObjectRetain();
  v8 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2);
  LOBYTE(a2) = v9;
  swift_bridgeObjectRelease();
  if ((a2 & 1) != 0)
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v11 = *v4;
    v13 = *v4;
    *v4 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      specialized _NativeDictionary.copy()();
      v11 = v13;
    }
    swift_bridgeObjectRelease();
    outlined init with take of Any((_OWORD *)(*(_QWORD *)(v11 + 56) + 32 * v8), a3);
    specialized _NativeDictionary._delete(at:)(v8, v11);
    *v4 = v11;
    swift_bridgeObjectRelease();
  }
  else
  {
    result = 0.0;
    *a3 = 0u;
    a3[1] = 0u;
  }
  return result;
}

uint64_t specialized Dictionary._Variant.removeValue(forKey:)(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  unint64_t v6;
  char v7;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v3 = v2;
  swift_bridgeObjectRetain();
  v6 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2);
  LOBYTE(a2) = v7;
  swift_bridgeObjectRelease();
  if ((a2 & 1) == 0)
    return 0;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v9 = *v3;
  v12 = *v3;
  *v3 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    specialized _NativeDictionary.copy()();
    v9 = v12;
  }
  swift_bridgeObjectRelease();
  v10 = *(_QWORD *)(*(_QWORD *)(v9 + 56) + 8 * v6);
  specialized _NativeDictionary._delete(at:)(v6, v9);
  *v3 = v9;
  swift_bridgeObjectRelease();
  return v10;
}

unint64_t specialized _NativeDictionary._delete(at:)(int64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t result;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  void (*v33)(char *, unint64_t, uint64_t);
  unint64_t v34;
  uint64_t v35;

  v4 = type metadata accessor for UUID();
  v35 = *(_QWORD *)(v4 - 8);
  result = MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v32 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = a2 + 64;
  v9 = -1 << *(_BYTE *)(a2 + 32);
  v10 = (a1 + 1) & ~v9;
  if (((1 << v10) & *(_QWORD *)(a2 + 64 + 8 * (v10 >> 6))) != 0)
  {
    v11 = ~v9;
    result = _HashTable.previousHole(before:)();
    if ((*(_QWORD *)(v8 + 8 * (v10 >> 6)) & (1 << v10)) != 0)
    {
      v34 = (result + 1) & v11;
      v12 = *(_QWORD *)(v35 + 72);
      v33 = *(void (**)(char *, unint64_t, uint64_t))(v35 + 16);
      v13 = v11;
      do
      {
        v14 = v8;
        v15 = v12;
        v16 = v12 * v10;
        v17 = v13;
        v33(v7, *(_QWORD *)(a2 + 48) + v12 * v10, v4);
        lazy protocol witness table accessor for type LACPolicy and conformance LACPolicy((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEA88]);
        v18 = dispatch thunk of Hashable._rawHashValue(seed:)();
        result = (*(uint64_t (**)(char *, uint64_t))(v35 + 8))(v7, v4);
        v13 = v17;
        v19 = v18 & v17;
        if (a1 >= (uint64_t)v34)
        {
          if (v19 >= v34 && a1 >= (uint64_t)v19)
          {
LABEL_16:
            v22 = *(_QWORD *)(a2 + 48);
            result = v22 + v15 * a1;
            v8 = v14;
            if (v15 * a1 < v16 || (v12 = v15, result >= v22 + v16 + v15))
            {
              result = swift_arrayInitWithTakeFrontToBack();
LABEL_21:
              v13 = v17;
              v12 = v15;
            }
            else if (v15 * a1 != v16)
            {
              result = swift_arrayInitWithTakeBackToFront();
              goto LABEL_21;
            }
            v23 = *(_QWORD *)(a2 + 56);
            v24 = (_QWORD *)(v23 + 8 * a1);
            v25 = (_QWORD *)(v23 + 8 * v10);
            if (a1 != v10 || (a1 = v10, v24 >= v25 + 1))
            {
              *v24 = *v25;
              a1 = v10;
            }
            goto LABEL_5;
          }
        }
        else if (v19 >= v34 || a1 >= (uint64_t)v19)
        {
          goto LABEL_16;
        }
        v8 = v14;
        v12 = v15;
LABEL_5:
        v10 = (v10 + 1) & v13;
      }
      while (((*(_QWORD *)(v8 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0);
    }
    v26 = (uint64_t *)(v8 + 8 * ((unint64_t)a1 >> 6));
    v27 = *v26;
    v28 = (-1 << a1) - 1;
  }
  else
  {
    v26 = (uint64_t *)(v8 + 8 * ((unint64_t)a1 >> 6));
    v28 = *v26;
    v27 = (-1 << a1) - 1;
  }
  *v26 = v28 & v27;
  v29 = *(_QWORD *)(a2 + 16);
  v30 = __OFSUB__(v29, 1);
  v31 = v29 - 1;
  if (v30)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v31;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t specialized _NativeDictionary._delete(at:)(unint64_t result, uint64_t a2)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  __int128 v9;
  Swift::Int v10;
  unint64_t v11;
  uint64_t v12;
  _OWORD *v13;
  _OWORD *v14;
  uint64_t v15;
  _OWORD *v16;
  _OWORD *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = _HashTable.previousHole(before:)();
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      do
      {
        Hasher.init(_seed:)();
        swift_bridgeObjectRetain();
        String.hash(into:)();
        v10 = Hasher._finalize()();
        result = swift_bridgeObjectRelease();
        v11 = v10 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v11 < v8)
            goto LABEL_5;
        }
        else if (v11 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v11)
        {
LABEL_11:
          v12 = *(_QWORD *)(a2 + 48);
          v13 = (_OWORD *)(v12 + 16 * v3);
          v14 = (_OWORD *)(v12 + 16 * v6);
          if (v3 != v6 || v13 >= v14 + 1)
            *v13 = *v14;
          v15 = *(_QWORD *)(a2 + 56);
          v16 = (_OWORD *)(v15 + 32 * v3);
          v17 = (_OWORD *)(v15 + 32 * v6);
          if (v3 != v6 || (v3 = v6, v16 >= v17 + 2))
          {
            v9 = v17[1];
            *v16 = *v17;
            v16[1] = v9;
            v3 = v6;
          }
        }
LABEL_5:
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v18 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v19 = *v18;
    v20 = (-1 << v3) - 1;
  }
  else
  {
    v18 = (uint64_t *)(v4 + 8 * (result >> 6));
    v20 = *v18;
    v19 = (-1 << result) - 1;
  }
  *v18 = v20 & v19;
  v21 = *(_QWORD *)(a2 + 16);
  v22 = __OFSUB__(v21, 1);
  v23 = v21 - 1;
  if (v22)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v23;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  Swift::Int v9;
  unint64_t v10;
  uint64_t v11;
  _OWORD *v12;
  _OWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = _HashTable.previousHole(before:)();
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      do
      {
        Hasher.init(_seed:)();
        swift_bridgeObjectRetain();
        String.hash(into:)();
        v9 = Hasher._finalize()();
        result = swift_bridgeObjectRelease();
        v10 = v9 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v10 < v8)
            goto LABEL_5;
        }
        else if (v10 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v10)
        {
LABEL_11:
          v11 = *(_QWORD *)(a2 + 48);
          v12 = (_OWORD *)(v11 + 16 * v3);
          v13 = (_OWORD *)(v11 + 16 * v6);
          if (v3 != v6 || v12 >= v13 + 1)
            *v12 = *v13;
          v14 = *(_QWORD *)(a2 + 56);
          v15 = (_QWORD *)(v14 + 8 * v3);
          v16 = (_QWORD *)(v14 + 8 * v6);
          if (v3 != v6 || (v3 = v6, v15 >= v16 + 1))
          {
            *v15 = *v16;
            v3 = v6;
          }
        }
LABEL_5:
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v17 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v18 = *v17;
    v19 = (-1 << v3) - 1;
  }
  else
  {
    v17 = (uint64_t *)(v4 + 8 * (result >> 6));
    v19 = *v17;
    v18 = (-1 << result) - 1;
  }
  *v17 = v19 & v18;
  v20 = *(_QWORD *)(a2 + 16);
  v21 = __OFSUB__(v20, 1);
  v22 = v20 - 1;
  if (v21)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v22;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

void *specialized _NativeDictionary.copy()()
{
  return specialized _NativeDictionary.copy()((uint64_t *)&demangling cache variable for type metadata for _DictionaryStorage<UUID, LACOnenessAuthenticatorPendingRequest>);
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  _OWORD v24[2];
  _OWORD v25[2];
  uint64_t v26;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _DictionaryStorage<AnyHashable, Any>);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v21 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v21 >= v13)
      goto LABEL_26;
    v22 = *(_QWORD *)(v6 + 8 * v21);
    ++v9;
    if (!v22)
    {
      v9 = v21 + 1;
      if (v21 + 1 >= v13)
        goto LABEL_26;
      v22 = *(_QWORD *)(v6 + 8 * v9);
      if (!v22)
        break;
    }
LABEL_25:
    v12 = (v22 - 1) & v22;
    v15 = __clz(__rbit64(v22)) + (v9 << 6);
LABEL_12:
    v16 = 40 * v15;
    outlined init with copy of AnyHashable(*(_QWORD *)(v2 + 48) + 40 * v15, (uint64_t)v25);
    v17 = 32 * v15;
    outlined init with copy of Any(*(_QWORD *)(v2 + 56) + v17, (uint64_t)v24);
    v18 = *(_QWORD *)(v4 + 48) + v16;
    v19 = v25[0];
    v20 = v25[1];
    *(_QWORD *)(v18 + 32) = v26;
    *(_OWORD *)v18 = v19;
    *(_OWORD *)(v18 + 16) = v20;
    result = outlined init with take of Any(v24, (_OWORD *)(*(_QWORD *)(v4 + 56) + v17));
  }
  v23 = v21 + 2;
  if (v23 >= v13)
    goto LABEL_26;
  v22 = *(_QWORD *)(v6 + 8 * v23);
  if (v22)
  {
    v9 = v23;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v23 + 1;
    if (__OFADD__(v23, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v22 = *(_QWORD *)(v6 + 8 * v9);
    ++v23;
    if (v22)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  return specialized _NativeDictionary.copy()(&demangling cache variable for type metadata for _DictionaryStorage<UUID, LACOnenessControllerPendingRequest>);
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  uint64_t *v25;
  _OWORD v26[2];

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
    result = (void *)swift_release();
LABEL_28:
    *v1 = v4;
    return result;
  }
  v25 = v1;
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v22 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      v9 = v22 + 1;
      if (v22 + 1 >= v13)
        goto LABEL_26;
      v23 = *(_QWORD *)(v6 + 8 * v9);
      if (!v23)
        break;
    }
LABEL_25:
    v12 = (v23 - 1) & v23;
    v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v19 = *v17;
    v18 = v17[1];
    v20 = 32 * v15;
    outlined init with copy of Any(*(_QWORD *)(v2 + 56) + 32 * v15, (uint64_t)v26);
    v21 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v21 = v19;
    v21[1] = v18;
    outlined init with take of Any(v26, (_OWORD *)(*(_QWORD *)(v4 + 56) + v20));
    result = (void *)swift_bridgeObjectRetain();
  }
  v24 = v22 + 2;
  if (v24 >= v13)
  {
LABEL_26:
    result = (void *)swift_release();
    v1 = v25;
    goto LABEL_28;
  }
  v23 = *(_QWORD *)(v6 + 8 * v24);
  if (v23)
  {
    v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v9);
    ++v24;
    if (v23)
      goto LABEL_25;
  }
LABEL_30:
  __break(1u);
  return result;
}

void *specialized _NativeDictionary.copy()(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *result;
  unint64_t v11;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  int64_t v28;

  v3 = type metadata accessor for UUID();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(a1);
  v26 = v1;
  v7 = *v1;
  v8 = static _DictionaryStorage.copy(original:)();
  v9 = v8;
  if (!*(_QWORD *)(v7 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v26 = v9;
    return result;
  }
  result = (void *)(v8 + 64);
  v11 = (unint64_t)((1 << *(_BYTE *)(v9 + 32)) + 63) >> 6;
  if (v9 != v7 || (unint64_t)result >= v7 + 64 + 8 * v11)
    result = memmove(result, (const void *)(v7 + 64), 8 * v11);
  v27 = v7 + 64;
  v13 = 0;
  *(_QWORD *)(v9 + 16) = *(_QWORD *)(v7 + 16);
  v14 = 1 << *(_BYTE *)(v7 + 32);
  v15 = -1;
  if (v14 < 64)
    v15 = ~(-1 << v14);
  v16 = v15 & *(_QWORD *)(v7 + 64);
  v28 = (unint64_t)(v14 + 63) >> 6;
  while (1)
  {
    if (v16)
    {
      v17 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      v18 = v17 | (v13 << 6);
      goto LABEL_12;
    }
    v22 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v22 >= v28)
      goto LABEL_26;
    v23 = *(_QWORD *)(v27 + 8 * v22);
    ++v13;
    if (!v23)
    {
      v13 = v22 + 1;
      if (v22 + 1 >= v28)
        goto LABEL_26;
      v23 = *(_QWORD *)(v27 + 8 * v13);
      if (!v23)
        break;
    }
LABEL_25:
    v16 = (v23 - 1) & v23;
    v18 = __clz(__rbit64(v23)) + (v13 << 6);
LABEL_12:
    v19 = *(_QWORD *)(v4 + 72) * v18;
    (*(void (**)(char *, unint64_t, uint64_t))(v4 + 16))(v6, *(_QWORD *)(v7 + 48) + v19, v3);
    v20 = 8 * v18;
    v21 = *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v18);
    (*(void (**)(unint64_t, char *, uint64_t))(v4 + 32))(*(_QWORD *)(v9 + 48) + v19, v6, v3);
    *(_QWORD *)(*(_QWORD *)(v9 + 56) + v20) = v21;
    result = (void *)swift_retain();
  }
  v24 = v22 + 2;
  if (v24 >= v28)
    goto LABEL_26;
  v23 = *(_QWORD *)(v27 + 8 * v24);
  if (v23)
  {
    v13 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    v13 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v13 >= v28)
      goto LABEL_26;
    v23 = *(_QWORD *)(v27 + 8 * v13);
    ++v24;
    if (v23)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

id specialized _NativeDictionary.copy()()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  _QWORD *v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _DictionaryStorage<String, LACDTOMutablePendingPolicyEvaluation>);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (id)swift_release();
    *v1 = v4;
    return result;
  }
  result = (id)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v22 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      v9 = v22 + 1;
      if (v22 + 1 >= v13)
        goto LABEL_26;
      v23 = *(_QWORD *)(v6 + 8 * v9);
      if (!v23)
        break;
    }
LABEL_25:
    v12 = (v23 - 1) & v23;
    v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (_QWORD *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v18 = v17[1];
    v19 = 8 * v15;
    v20 = *(void **)(*(_QWORD *)(v2 + 56) + v19);
    v21 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v21 = *v17;
    v21[1] = v18;
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v19) = v20;
    swift_bridgeObjectRetain();
    result = v20;
  }
  v24 = v22 + 2;
  if (v24 >= v13)
    goto LABEL_26;
  v23 = *(_QWORD *)(v6 + 8 * v24);
  if (v23)
  {
    v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v9);
    ++v24;
    if (v23)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

_QWORD *specialized _copyCollectionToContiguousArray<A>(_:)(uint64_t a1)
{
  return specialized _copyCollectionToContiguousArray<A>(_:)(a1, (uint64_t (*)(uint64_t *, _QWORD *, uint64_t, uint64_t))specialized Sequence._copySequenceContents(initializing:));
}

uint64_t specialized _copyCollectionToContiguousArray<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v8;
  _QWORD *v9;
  int64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t result;

  v4 = a4 >> 1;
  v5 = (a4 >> 1) - a3;
  if (!__OFSUB__(a4 >> 1, a3))
  {
    if (!v5)
      return MEMORY[0x24BEE4AF8];
    v8 = v5;
    if (v5 <= 0)
    {
      v9 = (_QWORD *)MEMORY[0x24BEE4AF8];
      if (v4 != a3)
      {
LABEL_7:
        if (v5 < 0)
          goto LABEL_19;
        v12 = a2 + 8 * a3;
        if (v12 < (unint64_t)&v9[v8 + 4] && (unint64_t)(v9 + 4) < v12 + v8 * 8)
          goto LABEL_19;
        __swift_instantiateConcreteTypeFromMangledName(demangling cache variable for type metadata for LACEvaluationRequestProcessor);
        swift_arrayInitWithCopy();
        return (uint64_t)v9;
      }
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
      v9 = (_QWORD *)swift_allocObject();
      v10 = _swift_stdlib_malloc_size(v9);
      v11 = v10 - 32;
      if (v10 < 32)
        v11 = v10 - 25;
      v9[2] = v5;
      v9[3] = (2 * (v11 >> 3)) | 1;
      if (v4 != a3)
        goto LABEL_7;
    }
    __break(1u);
  }
  __break(1u);
LABEL_19:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

_QWORD *specialized _copyCollectionToContiguousArray<A>(_:)(uint64_t a1, uint64_t (*a2)(uint64_t *, _QWORD *, uint64_t, uint64_t))
{
  uint64_t v2;
  _QWORD *v5;
  int64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
    return (_QWORD *)MEMORY[0x24BEE4AF8];
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  v5 = (_QWORD *)swift_allocObject();
  v6 = _swift_stdlib_malloc_size(v5);
  v7 = v6 - 32;
  if (v6 < 32)
    v7 = v6 - 25;
  v5[2] = v2;
  v5[3] = (2 * (v7 >> 3)) | 1;
  v8 = a2(&v10, v5 + 4, v2, a1);
  swift_bridgeObjectRetain();
  outlined consume of [String : [Int : Any]].Iterator._Variant();
  if (v8 != v2)
  {
    __break(1u);
    return (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  return v5;
}

uint64_t specialized Sequence._copySequenceContents(initializing:)(uint64_t result, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;

  v5 = (_QWORD *)result;
  v6 = a4 + 64;
  v7 = -1 << *(_BYTE *)(a4 + 32);
  if (-v7 < 64)
    v8 = ~(-1 << -(char)v7);
  else
    v8 = -1;
  v9 = v8 & *(_QWORD *)(a4 + 64);
  if (!a2)
  {
    v12 = 0;
    v10 = 0;
LABEL_38:
    *v5 = a4;
    v5[1] = v6;
    v5[2] = ~v7;
    v5[3] = v12;
    v5[4] = v9;
    return v10;
  }
  v10 = a3;
  if (!a3)
  {
    v12 = 0;
    goto LABEL_38;
  }
  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  v11 = a2;
  v12 = 0;
  v13 = 0;
  v14 = (unint64_t)(63 - v7) >> 6;
  if (!v9)
    goto LABEL_9;
LABEL_8:
  v15 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  v16 = v15 | (v12 << 6);
  while (1)
  {
    ++v13;
    *v11 = *(_QWORD *)(*(_QWORD *)(a4 + 56) + 8 * v16);
    if (v13 == v10)
    {
      swift_retain();
      goto LABEL_38;
    }
    ++v11;
    result = swift_retain();
    if (v9)
      goto LABEL_8;
LABEL_9:
    v17 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_40;
    }
    if (v17 >= v14)
      goto LABEL_33;
    v18 = *(_QWORD *)(v6 + 8 * v17);
    if (!v18)
      break;
LABEL_18:
    v9 = (v18 - 1) & v18;
    v16 = __clz(__rbit64(v18)) + (v17 << 6);
    v12 = v17;
  }
  v12 += 2;
  if (v17 + 1 >= v14)
  {
    v9 = 0;
    v12 = v17;
    goto LABEL_37;
  }
  v18 = *(_QWORD *)(v6 + 8 * v12);
  if (v18)
    goto LABEL_14;
  v19 = v17 + 2;
  if (v17 + 2 >= v14)
    goto LABEL_33;
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
    goto LABEL_17;
  v12 = v17 + 3;
  if (v17 + 3 >= v14)
  {
    v9 = 0;
    v12 = v17 + 2;
    goto LABEL_37;
  }
  v18 = *(_QWORD *)(v6 + 8 * v12);
  if (v18)
  {
LABEL_14:
    v17 = v12;
    goto LABEL_18;
  }
  v19 = v17 + 4;
  if (v17 + 4 >= v14)
  {
LABEL_33:
    v9 = 0;
LABEL_37:
    v10 = v13;
    goto LABEL_38;
  }
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
  {
LABEL_17:
    v17 = v19;
    goto LABEL_18;
  }
  while (1)
  {
    v17 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v17 >= v14)
    {
      v9 = 0;
      v12 = v14 - 1;
      goto LABEL_37;
    }
    v18 = *(_QWORD *)(v6 + 8 * v17);
    ++v19;
    if (v18)
      goto LABEL_18;
  }
LABEL_41:
  __break(1u);
  return result;
}

_QWORD *specialized Sequence._copySequenceContents(initializing:)(_QWORD *result, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  void *v20;
  id v21;

  v5 = result;
  v6 = a4 + 64;
  v7 = -1 << *(_BYTE *)(a4 + 32);
  if (-v7 < 64)
    v8 = ~(-1 << -(char)v7);
  else
    v8 = -1;
  v9 = v8 & *(_QWORD *)(a4 + 64);
  if (!a2)
  {
    v12 = 0;
    v10 = 0;
LABEL_38:
    *v5 = a4;
    v5[1] = v6;
    v5[2] = ~v7;
    v5[3] = v12;
    v5[4] = v9;
    return (_QWORD *)v10;
  }
  v10 = a3;
  if (!a3)
  {
    v12 = 0;
    goto LABEL_38;
  }
  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  v11 = a2;
  v12 = 0;
  v13 = 0;
  v14 = (unint64_t)(63 - v7) >> 6;
  if (!v9)
    goto LABEL_9;
LABEL_8:
  v15 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  v16 = v15 | (v12 << 6);
  while (1)
  {
    ++v13;
    v20 = *(void **)(*(_QWORD *)(a4 + 56) + 8 * v16);
    *v11 = v20;
    if (v13 == v10)
    {
      v21 = v20;
      goto LABEL_38;
    }
    ++v11;
    result = v20;
    if (v9)
      goto LABEL_8;
LABEL_9:
    v17 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_40;
    }
    if (v17 >= v14)
      goto LABEL_33;
    v18 = *(_QWORD *)(v6 + 8 * v17);
    if (!v18)
      break;
LABEL_18:
    v9 = (v18 - 1) & v18;
    v16 = __clz(__rbit64(v18)) + (v17 << 6);
    v12 = v17;
  }
  v12 += 2;
  if (v17 + 1 >= v14)
  {
    v9 = 0;
    v12 = v17;
    goto LABEL_37;
  }
  v18 = *(_QWORD *)(v6 + 8 * v12);
  if (v18)
    goto LABEL_14;
  v19 = v17 + 2;
  if (v17 + 2 >= v14)
    goto LABEL_33;
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
    goto LABEL_17;
  v12 = v17 + 3;
  if (v17 + 3 >= v14)
  {
    v9 = 0;
    v12 = v17 + 2;
    goto LABEL_37;
  }
  v18 = *(_QWORD *)(v6 + 8 * v12);
  if (v18)
  {
LABEL_14:
    v17 = v12;
    goto LABEL_18;
  }
  v19 = v17 + 4;
  if (v17 + 4 >= v14)
  {
LABEL_33:
    v9 = 0;
LABEL_37:
    v10 = v13;
    goto LABEL_38;
  }
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
  {
LABEL_17:
    v17 = v19;
    goto LABEL_18;
  }
  while (1)
  {
    v17 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v17 >= v14)
    {
      v9 = 0;
      v12 = v14 - 1;
      goto LABEL_37;
    }
    v18 = *(_QWORD *)(v6 + 8 * v17);
    ++v19;
    if (v18)
      goto LABEL_18;
  }
LABEL_41:
  __break(1u);
  return result;
}

id specialized LACDTOPendingPolicyEvaluationStore.init(persistentStore:workQueue:)(uint64_t a1, void *a2)
{
  char *v2;
  char *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  id v12;
  objc_super v14;

  v3 = v2;
  v6 = OBJC_IVAR____TtC23LocalAuthenticationCore34LACDTOPendingPolicyEvaluationStore_taskGroup;
  type metadata accessor for SerialTask();
  v7 = swift_allocObject();
  v8 = v7 + OBJC_IVAR____TtC23LocalAuthenticationCore10SerialTask_continuation;
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<()>.Continuation);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(v8, 1, 1, v9);
  v10 = v3;
  SerialTask.start()();
  *(_QWORD *)&v3[v6] = v7;
  v11 = OBJC_IVAR____TtC23LocalAuthenticationCore34LACDTOPendingPolicyEvaluationStore_pendingEvaluationsDict;
  *(_QWORD *)&v10[v11] = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  *(_QWORD *)&v10[OBJC_IVAR____TtC23LocalAuthenticationCore34LACDTOPendingPolicyEvaluationStore_store] = a1;
  *(_QWORD *)&v10[OBJC_IVAR____TtC23LocalAuthenticationCore34LACDTOPendingPolicyEvaluationStore_workQueue] = a2;
  swift_unknownObjectRetain();
  v12 = a2;

  v14.receiver = v10;
  v14.super_class = (Class)type metadata accessor for LACDTOPendingPolicyEvaluationStore();
  return objc_msgSendSuper2(&v14, sel_init);
}

uint64_t sub_240A4E304()
{
  swift_unknownObjectWeakDestroy();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in LACDTOPendingPolicyEvaluationStore.loadPersistedEvaluations(completion:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = v1[5];
  v8 = v1[6];
  v9 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v9;
  *v9 = v2;
  v9[1] = dispatch thunk of LACUserDefaultsPersistentStore.setData(_:forKey:);
  return closure #1 in LACDTOPendingPolicyEvaluationStore.loadPersistedEvaluations(completion:)(a1, v4, v5, v6, v7, v8);
}

uint64_t partial apply for closure #1 in LACDTOPendingPolicyEvaluationStore.persist()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v2 = *(_QWORD *)(v0 + 16);
  v3 = *(_QWORD *)(v0 + 24);
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v4;
  *v4 = v1;
  v4[1] = dispatch thunk of LACUserDefaultsPersistentStore.setData(_:forKey:);
  return closure #1 in LACDTOPendingPolicyEvaluationStore.persist()(v2, v3);
}

uint64_t type metadata accessor for LACDTOPendingPolicyEvaluationStore()
{
  return objc_opt_self();
}

uint64_t method lookup function for LACDTOPendingPolicyEvaluationStore()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of LACDTOPendingPolicyEvaluationStore.pendingEvaluations.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x88))();
}

uint64_t dispatch thunk of LACDTOPendingPolicyEvaluationStore.__allocating_init(persistentStore:workQueue:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 144))();
}

uint64_t dispatch thunk of LACDTOPendingPolicyEvaluationStore.loadPersistedEvaluations(completion:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x98))();
}

uint64_t dispatch thunk of LACDTOPendingPolicyEvaluationStore.load()()
{
  _QWORD *v0;
  uint64_t v1;
  int *v2;
  _QWORD *v3;
  uint64_t (*v5)(void);

  v2 = *(int **)((*MEMORY[0x24BEE4EA0] & *v0) + 0xA0);
  v5 = (uint64_t (*)(void))((char *)v2 + *v2);
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = dispatch thunk of LACDTOPendingPolicyEvaluationStore.load();
  return v5();
}

uint64_t dispatch thunk of LACDTOPendingPolicyEvaluationStore.load()(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v4;

  v4 = *v1;
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t))(v4 + 8))(a1);
}

uint64_t dispatch thunk of LACDTOPendingPolicyEvaluationStore.persistEvaluations()()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xA8))();
}

uint64_t dispatch thunk of LACDTOPendingPolicyEvaluationStore.addPendingEvaluation(_:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xB0))();
}

uint64_t dispatch thunk of LACDTOPendingPolicyEvaluationStore.pendingEvaluation(withIdentifier:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xB8))();
}

uint64_t dispatch thunk of LACDTOPendingPolicyEvaluationStore.removePendingEvaluation(with:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xC0))();
}

uint64_t sub_240A4E5A8()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));

  return swift_deallocObject();
}

uint64_t partial apply for @objc closure #1 in LACDTOPendingPolicyEvaluationStore.load()()
{
  uint64_t v0;
  uint64_t v1;
  const void *v2;
  void *v3;
  _QWORD *v4;

  v2 = *(const void **)(v0 + 16);
  v3 = *(void **)(v0 + 24);
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v4;
  *v4 = v1;
  v4[1] = dispatch thunk of LACUserDefaultsPersistentStore.setData(_:forKey:);
  return ((uint64_t (*)(const void *, void *))((char *)&async function pointer to @objc closure #1 in LACDTOPendingPolicyEvaluationStore.load()
                                                       + async function pointer to @objc closure #1 in LACDTOPendingPolicyEvaluationStore.load()))(v2, v3);
}

uint64_t sub_240A4E640()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tgq5TA(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int *v4;
  _QWORD *v5;

  v4 = *(int **)(v1 + 16);
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = dispatch thunk of LACUserDefaultsPersistentStore.removeObject(forKey:);
  return ((uint64_t (*)(uint64_t, int *))((char *)&_sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tgq5Tu
                                                 + _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tgq5Tu))(a1, v4);
}

uint64_t sub_240A4E6D4()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject();
}

void partial apply for thunk for @escaping @callee_unowned @convention(block) (@unowned NSArray?, @unowned NSError?) -> ()(objc_class *a1, uint64_t a2)
{
  uint64_t v2;

  thunk for @escaping @callee_unowned @convention(block) (@unowned NSArray?, @unowned NSError?) -> ()(a1, a2, *(_QWORD *)(v2 + 16));
}

uint64_t objectdestroy_2Tm_0()
{
  swift_unknownObjectRelease();
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t closure #1 in LACDTOPendingPolicyEvaluationStore.loadPersistedEvaluations(completion:)partial apply(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = v1[5];
  v8 = v1[6];
  v9 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v9;
  *v9 = v2;
  v9[1] = dispatch thunk of LACUserDefaultsPersistentStore.removeObject(forKey:);
  return closure #1 in LACDTOPendingPolicyEvaluationStore.loadPersistedEvaluations(completion:)(a1, v4, v5, v6, v7, v8);
}

uint64_t objectdestroy_8Tm()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t lazy protocol witness table accessor for type [LACDTOMutablePendingPolicyEvaluation] and conformance <A> [A](unint64_t *a1, unint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;

  result = *a1;
  if (!result)
  {
    v9 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [LACDTOMutablePendingPolicyEvaluation]);
    v10 = lazy protocol witness table accessor for type LACPolicy and conformance LACPolicy(a2, (uint64_t (*)(uint64_t))type metadata accessor for LACDTOMutablePendingPolicyEvaluation, a3);
    result = MEMORY[0x242687614](a4, v9, &v10);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_240A4E86C()
{
  return objectdestroy_54Tm((void (*)(_QWORD))MEMORY[0x24BEE4CA0]);
}

uint64_t partial apply for closure #2 in closure #1 in LACDTOPendingPolicyEvaluationStore.loadPersistedEvaluations(completion:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(_QWORD, _QWORD))(v0 + 16))(0, *(_QWORD *)(v0 + 32));
}

uint64_t block_copy_helper_8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_8()
{
  return swift_release();
}

uint64_t sub_240A4E8BC()
{
  return objectdestroy_54Tm((void (*)(_QWORD))MEMORY[0x24BEE4BC0]);
}

uint64_t objectdestroy_54Tm(void (*a1)(_QWORD))
{
  uint64_t v1;

  swift_release();
  a1(*(_QWORD *)(v1 + 32));
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #1 in LACDTOPendingPolicyEvaluationStore.loadPersistedEvaluations(completion:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(_QWORD, _QWORD))(v0 + 16))(*(_QWORD *)(v0 + 32), 0);
}

uint64_t LACPreboardACMContextProviderFactory.__allocating_init()()
{
  return swift_allocObject();
}

uint64_t LACPreboardACMContextProviderFactory.init()()
{
  uint64_t v0;

  return v0;
}

double LACPreboardACMContextProviderFactory.makeProvider()@<D0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  id v4;
  double result;

  v2 = type metadata accessor for LACACMContextProvider();
  v3 = swift_allocObject();
  v4 = objc_msgSend(objc_allocWithZone((Class)LACACMHelper), sel_initAndCreateContext);
  if (v4)
  {
    *(_QWORD *)(v3 + 16) = v4;
    *(_QWORD *)(a1 + 24) = v2;
    *(_QWORD *)(a1 + 32) = &protocol witness table for LACACMContextProvider;
    *(_QWORD *)a1 = v3;
  }
  else
  {
    swift_deallocPartialClassInstance();
    *(_QWORD *)(a1 + 32) = 0;
    result = 0.0;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
  }
  return result;
}

uint64_t LACPreboardACMContextProviderFactory.deinit()
{
  uint64_t v0;

  return v0;
}

uint64_t LACPreboardACMContextProviderFactory.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for LACPreboardACMContextProviderFactory()
{
  return objc_opt_self();
}

uint64_t method lookup function for LACPreboardACMContextProviderFactory()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of LACPreboardACMContextProviderFactory.__allocating_init()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 80))();
}

uint64_t dispatch thunk of LACPreboardACMContextProviderFactory.makeProvider()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 88))();
}

uint64_t acm_explicit_bzero(void *a1, rsize_t __n)
{
  return memset_s(a1, __n, 0, __n);
}

uint64_t acm_get_mem()
{
  return _allocatedMem_0;
}

void *acm_mem_alloc_data(size_t size)
{
  void *result;

  result = malloc_type_calloc(1uLL, size, 0xCB62F0E9uLL);
  if (result)
    _allocatedMem_2 += size;
  return result;
}

void acm_mem_free_data(void *a1, rsize_t __n)
{
  uint64_t v4;

  if (a1)
  {
    memset_s(a1, __n, 0, __n);
    free(a1);
    v4 = _allocatedMem_2 - __n;
    if (_allocatedMem_2 < __n)
      v4 = 0;
    _allocatedMem_2 = v4;
  }
}

void *acm_mem_alloc(size_t size)
{
  void *result;

  result = malloc_type_calloc(1uLL, size, 0xDB9956F0uLL);
  if (result)
    _allocatedMem_3 += size;
  return result;
}

void acm_mem_free(void *a1, rsize_t __n)
{
  uint64_t v4;

  if (a1)
  {
    memset_s(a1, __n, 0, __n);
    free(a1);
    v4 = _allocatedMem_3 - __n;
    if (_allocatedMem_3 < __n)
      v4 = 0;
    _allocatedMem_3 = v4;
  }
}

const char *acm_mem_alloc_info(const char *result, const void *a2, uint64_t a3, const char *a4, int a5, const char *a6)
{
  const char *v6;
  const char *v7;
  const char *v8;

  if (a2)
    _allocatedMem_0 += a3;
  if (gACMLoggingLevel <= 0x1Eu)
  {
    v6 = "NULL";
    if (result)
      v7 = result;
    else
      v7 = "NULL";
    if (a4)
      v8 = a4;
    else
      v8 = "NULL";
    if (a6)
      v6 = a6;
    return (const char *)printf("%s: %s: mem: type=%s ptr=%p size=%u (total=%u raw=%u data=%u types=%u) %s:%d (%s).\n", "ACM", "acm_mem_alloc_info", v7, a2, a3, _allocatedMem_0, 0, _allocatedMem_2, _allocatedMem_3, v8, a5, v6);
  }
  return result;
}

const char *acm_mem_free_info(const char *result, const void *a2, unint64_t a3, const char *a4, int a5, const char *a6)
{
  uint64_t v6;
  const char *v7;
  const char *v8;
  const char *v9;

  if (a2)
  {
    v6 = _allocatedMem_0 - a3;
    if (_allocatedMem_0 < a3)
      v6 = 0;
    _allocatedMem_0 = v6;
  }
  if (gACMLoggingLevel <= 0x1Eu)
  {
    v7 = "NULL";
    if (result)
      v8 = result;
    else
      v8 = "NULL";
    if (a4)
      v9 = a4;
    else
      v9 = "NULL";
    if (a6)
      v7 = a6;
    return (const char *)printf("%s: %s: mem: type=%s ptr=%p size=%u (total=%u raw=%u data=%u types=%u) %s:%d (%s).\n", "ACM", "acm_mem_free_info", v8, a2, a3, _allocatedMem_0, 0, _allocatedMem_2, _allocatedMem_3, v9, a5, v7);
  }
  return result;
}

uint64_t GetSerializedVerifyPolicySize(uint64_t a1, char *__s1, uint64_t a3, uint64_t a4, _DWORD *a5, unsigned int a6, _QWORD *a7)
{
  uint64_t result;
  size_t v12;
  size_t v13;
  unsigned int v14;

  v14 = 0;
  result = 4294967293;
  if (a1 && __s1 && a7)
  {
    v12 = strnlen(__s1, 0x81uLL);
    if (v12 > 0x80)
    {
      return 4294967293;
    }
    else
    {
      v13 = v12;
      result = getLengthOfParameters(a5, a6, &v14);
      if (!(_DWORD)result)
        *a7 = v13 + v14 + 26;
    }
  }
  return result;
}

uint64_t getLengthOfParameters(_DWORD *a1, unsigned int a2, _DWORD *a3)
{
  int v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  uint64_t v11;
  unsigned int v12;

  if (gACMLoggingLevel <= 0xAu)
    printf("%s: %s: called.\n", "ACM", "getLengthOfParameters");
  if (a3)
  {
    *a3 = 0;
    v6 = 0;
    if (a2)
    {
      v7 = a2;
      while (1)
      {
        v8 = checkParameter(a1);
        if ((_DWORD)v8)
          break;
        v9 = v6 + 8;
        v10 = a1[4];
        v6 += v10 + 8;
        if (__CFADD__(v10, v9))
          goto LABEL_10;
        a1 += 6;
        if (!--v7)
          goto LABEL_9;
      }
      v11 = v8;
      v12 = 70;
    }
    else
    {
LABEL_9:
      v11 = 0;
      *a3 = v6;
      v12 = 10;
    }
  }
  else
  {
LABEL_10:
    v12 = 70;
    v11 = 4294967293;
  }
  if (v12 >= gACMLoggingLevel)
    printf("%s: %s: returning, err = %ld.\n", "ACM", "getLengthOfParameters", (int)v11);
  return v11;
}

uint64_t SerializeVerifyPolicy(_OWORD *a1, char *__s1, char a3, uint64_t a4, _DWORD *a5, unsigned int a6, _OWORD *a7, size_t *a8)
{
  uint64_t result;
  int v15;
  size_t v17;
  size_t v18;
  char *v19;
  size_t v20;
  unint64_t v21;

  v21 = 0;
  result = 4294967293;
  if (a1)
  {
    if (__s1)
    {
      if (a8)
      {
        if (a7)
        {
          if (a6 <= 0xA && (a5 != 0) == (a6 != 0))
          {
            v15 = a4;
            result = GetSerializedVerifyPolicySize((uint64_t)a1, __s1, 0, a4, a5, a6, &v21);
            if (!(_DWORD)result)
            {
              if (*a8 < v21)
                return 4294967293;
              *a7 = *a1;
              v17 = strnlen(__s1, 0x81uLL);
              if (v17 > 0x80)
              {
                return 4294967293;
              }
              else
              {
                v18 = v17;
                memcpy(a7 + 1, __s1, v17 + 1);
                v19 = (char *)a7 + v18;
                v19[17] = a3;
                *(_DWORD *)(v19 + 18) = v15;
                v20 = v18 + 22;
                result = serializeParameters((uint64_t)a5, a6, (uint64_t)a7, (uint64_t *)&v20);
                if (!(_DWORD)result)
                  *a8 = v20;
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t serializeParameters(uint64_t a1, int a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v6;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  size_t v14;
  void *__src[2];
  size_t __n;

  LODWORD(v6) = a2;
  if (gACMLoggingLevel <= 0xAu)
    printf("%s: %s: called.\n", "ACM", "serializeParameters");
  v8 = 70;
  v9 = 4294967293;
  if (a3 && a4)
  {
    v10 = *a4;
    *(_DWORD *)(a3 + v10) = v6;
    v11 = v10 + 4;
    if ((_DWORD)v6)
    {
      v6 = v6;
      while (1)
      {
        *(_OWORD *)__src = *(_OWORD *)a1;
        __n = *(_QWORD *)(a1 + 16);
        v12 = checkParameter(__src);
        if ((_DWORD)v12)
          break;
        v13 = (_DWORD *)(a3 + v11);
        v14 = __n;
        *v13 = __src[0];
        v13[1] = v14;
        v11 += 8;
        if ((_DWORD)v14)
        {
          memcpy((void *)(a3 + v11), __src[1], v14);
          v11 += v14;
        }
        a1 += 24;
        if (!--v6)
          goto LABEL_11;
      }
      v9 = v12;
      v8 = 70;
    }
    else
    {
LABEL_11:
      v9 = 0;
      *a4 = v11;
      v8 = 10;
    }
  }
  if (v8 >= gACMLoggingLevel)
    printf("%s: %s: returning, err = %ld.\n", "ACM", "serializeParameters", (int)v9);
  return v9;
}

uint64_t DeserializeVerifyPolicy(uint64_t a1, unint64_t a2, _OWORD *a3, _QWORD *a4, BOOL *a5, _DWORD *a6, _QWORD *a7, _DWORD *a8)
{
  uint64_t v8;
  unint64_t v9;
  unint64_t v17;
  unint64_t v18;
  void *v19;
  BOOL *v20;
  BOOL v21;
  _DWORD *v22;
  int v23;
  unint64_t v25;
  _QWORD *v26;
  unsigned int v27;
  unsigned int *v28;
  unint64_t v29;

  v28 = 0;
  v27 = 0;
  v8 = 4294967293;
  v9 = a2 - 16;
  if (a2 >= 0x10 && a1 && a3 && a4 && a5 && a6 && a7 && a8)
  {
    *a3 = *(_OWORD *)a1;
    v17 = strnlen((const char *)(a1 + 16), a2 - 16);
    if (v17 > 0x80 || v9 <= v17)
      return 4294967293;
    v26 = a4;
    v18 = v17 + 1;
    v19 = acm_mem_alloc_data(v17 + 1);
    acm_mem_alloc_info("<data>", v19, v17 + 1, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/LibSerialization.c", 349, "DeserializeVerifyPolicy");
    if (!v19)
      return 4294967292;
    memcpy(v19, (const void *)(a1 + 16), v17 + 1);
    v29 = v17 + 17;
    if (v17 + 17 == a2 || (v20 = a5, v21 = *(_BYTE *)(a1 + v17 + 17) != 0, v29 = v17 + 18, a2 - (v17 + 18) < 4))
    {
      v8 = 4294967293;
    }
    else
    {
      v25 = v17 + 1;
      v22 = a8;
      v23 = *(_DWORD *)(a1 + v17 + 18);
      v29 = v17 + 22;
      v8 = deserializeParameters(a1, a2, &v29, &v28, &v27);
      if (!(_DWORD)v8)
      {
        *v26 = v19;
        *v20 = v21;
        *a6 = v23;
        *a7 = v28;
        *v22 = v27;
        return v8;
      }
      v18 = v25;
    }
    acm_mem_free_info("<data>", v19, v18, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/LibSerialization.c", 378, "DeserializeVerifyPolicy");
    acm_mem_free_data(v19, v18);
    if (v28)
      Util_SafeDeallocParameters(v28, v27);
  }
  return v8;
}

uint64_t deserializeParameters(uint64_t a1, unint64_t a2, unint64_t *a3, _QWORD *a4, _DWORD *a5)
{
  __objc2_prot_list **p_prots;
  unsigned int v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  size_t v20;
  uint64_t v21;
  void *v22;
  _QWORD *v24;
  _DWORD *v25;
  unint64_t *v26;
  int v27;

  p_prots = &OBJC_PROTOCOL___LACPersistentStore.prots;
  if (gACMLoggingLevel <= 0xAu)
    printf("%s: %s: called.\n", "ACM", "deserializeParameters");
  v11 = 70;
  v12 = 4294967293;
  if (!a1 || !a3 || !a4 || !a5)
    goto LABEL_25;
  v13 = *a3;
  if (a2 <= *a3)
  {
    LODWORD(v14) = 0;
LABEL_23:
    v16 = 0;
LABEL_24:
    v12 = 0;
    *a4 = v16;
    *a5 = v14;
    v11 = 10;
    *a3 = v13;
    goto LABEL_25;
  }
  if (a2 - *a3 < 4 || (v14 = *(unsigned int *)(a1 + v13), v14 > 0xA))
  {
    v11 = 70;
    v12 = 4294967293;
    goto LABEL_25;
  }
  v13 += 4;
  if (!(_DWORD)v14)
    goto LABEL_23;
  v27 = v14;
  v15 = 24 * v14;
  v16 = (char *)acm_mem_alloc(24 * v14);
  acm_mem_alloc_info("array of ACMParameter", v16, v15, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/LibSerialization.c", 194, "deserializeParameters");
  if (!v16)
  {
    v11 = 70;
    v12 = 4294967292;
    goto LABEL_25;
  }
  v24 = a4;
  v25 = a5;
  v26 = a3;
  v17 = 0;
  while (1)
  {
    v18 = &v16[v17];
    *(_QWORD *)&v16[v17 + 8] = 0;
    if (a2 - v13 < 8
      || (*(_DWORD *)v18 = *(_DWORD *)(a1 + v13), a2 - (v13 + 4) < 4)
      || (v19 = &v16[v17],
          v20 = *(unsigned int *)(a1 + v13 + 4),
          *(_DWORD *)&v16[v17 + 16] = v20,
          v13 += 8,
          a2 - v13 < v20))
    {
      v11 = 70;
      v12 = 4294967293;
      goto LABEL_31;
    }
    v21 = checkParameter(&v16[v17]);
    if ((_DWORD)v21)
    {
      v12 = v21;
      v11 = 70;
      goto LABEL_31;
    }
    if ((_DWORD)v20)
      break;
LABEL_20:
    v17 += 24;
    if (v15 == v17)
    {
      p_prots = (__objc2_prot_list **)(&OBJC_PROTOCOL___LACPersistentStore + 16);
      a5 = v25;
      a3 = v26;
      a4 = v24;
      LODWORD(v14) = v27;
      goto LABEL_24;
    }
  }
  v22 = acm_mem_alloc_data(v20);
  acm_mem_alloc_info("<data>", v22, v20, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/LibSerialization.c", 212, "deserializeParameters");
  *((_QWORD *)v18 + 1) = v22;
  if (v22)
  {
    memcpy(v22, (const void *)(a1 + v13), *((unsigned int *)v19 + 4));
    v13 += *((unsigned int *)v19 + 4);
    goto LABEL_20;
  }
  v11 = 70;
  v12 = 4294967292;
LABEL_31:
  p_prots = (__objc2_prot_list **)(&OBJC_PROTOCOL___LACPersistentStore + 16);
LABEL_25:
  if (v11 >= *((unsigned __int8 *)p_prots + 3472))
    printf("%s: %s: returning, err = %ld.\n", "ACM", "deserializeParameters", (int)v12);
  return v12;
}

uint64_t GetSerializedVerifyAclConstraintSize(int a1, uint64_t a2, uint64_t a3, unsigned int a4, uint64_t a5, unsigned int a6, uint64_t a7, uint64_t a8, _DWORD *a9, unsigned int a10, _QWORD *a11)
{
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;

  v18 = 0;
  result = 4294967293;
  if (a3)
  {
    if (a11)
    {
      if (a10 <= 0xA && (a9 != 0) == (a10 != 0))
      {
        result = getLengthOfParameters(a9, a10, &v18);
        if (!(_DWORD)result)
        {
          v15 = 29;
          if (a1 == 32)
            v15 = 33;
          v16 = v15 + a4;
          if (a1 == 32)
            v17 = a6;
          else
            v17 = 0;
          *a11 = v16 + v17 + v18;
        }
      }
    }
  }
  return result;
}

uint64_t SerializeVerifyAclConstraint(int a1, _OWORD *a2, const void *a3, unsigned int a4, const void *a5, unsigned int a6, char a7, int a8, _DWORD *a9, unsigned int a10, uint64_t a11, _QWORD *a12)
{
  uint64_t result;
  BOOL v14;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v28;
  uint64_t v30;
  unsigned int v31;

  if (!a3)
    return 4294967293;
  result = 4294967293;
  if (a12)
    v14 = a11 == 0;
  else
    v14 = 1;
  if (!v14 && a10 <= 0xA && (a9 != 0) == (a10 != 0))
  {
    v31 = 0;
    result = getLengthOfParameters(a9, a10, &v31);
    if (!(_DWORD)result)
    {
      v21 = 29;
      if (a1 == 32)
        v21 = 33;
      v22 = v21 + a4;
      if (a1 == 32)
        v23 = a6;
      else
        v23 = 0;
      if (*a12 < v22 + v23 + (unint64_t)v31)
      {
        return 4294967293;
      }
      else
      {
        v28 = a8;
        if (a2)
        {
          *(_OWORD *)a11 = *a2;
        }
        else
        {
          *(_QWORD *)a11 = 0;
          *(_QWORD *)(a11 + 8) = 0;
        }
        *(_DWORD *)(a11 + 16) = a4;
        memcpy((void *)(a11 + 20), a3, a4);
        v24 = a4 + 20;
        if (a1 == 32)
        {
          *(_DWORD *)(a11 + v24) = a6;
          v25 = a4 + 24;
          memcpy((void *)(a11 + v25), a5, a6);
          v24 = v25 + a6;
        }
        v26 = a11 + v24;
        *(_BYTE *)v26 = a7;
        *(_DWORD *)(v26 + 1) = v28;
        v30 = v24 + 5;
        result = serializeParameters((uint64_t)a9, a10, a11, &v30);
        if (!(_DWORD)result)
          *a12 = v30;
      }
    }
  }
  return result;
}

uint64_t DeserializeVerifyAclConstraint(int a1, uint64_t a2, unsigned int a3, _OWORD *a4, _QWORD *a5, _DWORD *a6, size_t *a7, _DWORD *a8, BOOL *a9, _DWORD *a10, _QWORD *a11, _DWORD *a12)
{
  uint64_t v12;
  unint64_t v16;
  unint64_t v20;
  void *v21;
  unint64_t v22;
  size_t v23;
  unint64_t v24;
  void *v25;
  BOOL v26;
  int v27;
  int v28;
  unint64_t v30;
  _QWORD *v31;
  unsigned int v32;
  unsigned int *v33;
  unint64_t v34;

  v33 = 0;
  v34 = 0;
  v32 = 0;
  v12 = 4294967293;
  if (a2 && a4 && a5 && a6 && a9 && a10 && a11 && a12 && a3 >= 0x10)
  {
    v16 = a3;
    *a4 = *(_OWORD *)a2;
    v34 = 16;
    if ((a3 & 0xFFFFFFFC) == 0x10)
    {
      v12 = 4294967293;
    }
    else
    {
      v20 = *(unsigned int *)(a2 + 16);
      v34 = 20;
      v21 = acm_mem_alloc_data(v20);
      acm_mem_alloc_info("<data>", v21, v20, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/LibSerialization.c", 532, "DeserializeVerifyAclConstraint");
      if (v21)
      {
        if (v16 - 20 < v20)
          goto LABEL_24;
        memcpy(v21, (const void *)(a2 + 20), v20);
        v22 = v20 + 20;
        v34 = v20 + 20;
        v31 = a5;
        if (a1 != 32)
        {
          v25 = 0;
          LODWORD(v23) = 0;
          goto LABEL_19;
        }
        if (v16 - v22 < 4)
        {
LABEL_24:
          v25 = 0;
          LODWORD(v23) = 0;
        }
        else
        {
          v23 = *(unsigned int *)(a2 + v22);
          v24 = v20 + 24;
          v34 = v20 + 24;
          v25 = acm_mem_alloc_data(v23);
          acm_mem_alloc_info("<data>", v25, v23, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/LibSerialization.c", 544, "DeserializeVerifyAclConstraint");
          if (!v25)
          {
            v12 = 4294967292;
LABEL_26:
            acm_mem_free_info("<data>", v21, v20, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/LibSerialization.c", 580, "DeserializeVerifyAclConstraint");
            acm_mem_free_data(v21, v20);
            if (v25)
            {
              acm_mem_free_info("<data>", v25, v23, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/LibSerialization.c", 583, "DeserializeVerifyAclConstraint");
              acm_mem_free_data(v25, v23);
            }
            goto LABEL_30;
          }
          if (v16 - v24 >= v23)
          {
            memcpy(v25, (const void *)(a2 + v24), v23);
            v22 = v24 + v23;
            v34 = v24 + v23;
LABEL_19:
            if (v22 != v16)
            {
              v26 = *(_BYTE *)(a2 + v22) != 0;
              v34 = v22 + 1;
              if (v16 - (v22 + 1) >= 4)
              {
                v30 = v20;
                v27 = v23;
                v23 = (size_t)v25;
                v28 = *(_DWORD *)(a2 + v22 + 1);
                v34 = v22 + 5;
                v12 = deserializeParameters(a2, v16, &v34, &v33, &v32);
                if (!(_DWORD)v12)
                {
                  *v31 = v21;
                  *a7 = v23;
                  *a8 = v27;
                  *a6 = v30;
                  *a9 = v26;
                  *a10 = v28;
                  *a11 = v33;
                  *a12 = v32;
                  return v12;
                }
                v25 = (void *)v23;
                LODWORD(v23) = v27;
                v20 = v30;
                goto LABEL_26;
              }
            }
          }
        }
        v12 = 4294967293;
        goto LABEL_26;
      }
      v12 = 4294967292;
    }
  }
LABEL_30:
  if (v33)
    Util_SafeDeallocParameters(v33, v32);
  return v12;
}

uint64_t GetSerializedProcessAclSize(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4, unsigned int a5, uint64_t a6, _DWORD *a7, unsigned int a8, _QWORD *a9)
{
  uint64_t result;
  unsigned int v12;

  v12 = 0;
  result = 4294967293;
  if (a2 && a3 && a9 && a8 <= 0xA && (a7 != 0) == (a8 != 0))
  {
    result = getLengthOfParameters(a7, a8, &v12);
    if (!(_DWORD)result)
      *a9 = a3 + (unint64_t)a5 + v12 + 36;
  }
  return result;
}

uint64_t SerializeProcessAcl(_OWORD *a1, const void *a2, unsigned int a3, const void *a4, unsigned int a5, uint64_t a6, _DWORD *a7, unsigned int a8, uint64_t a9, unint64_t *a10)
{
  uint64_t result;
  BOOL v15;
  int v17;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;

  v23 = 0;
  result = 4294967293;
  if (a2 && a3)
  {
    v15 = !a10 || a9 == 0;
    if (!v15 && a8 <= 0xA && (a7 != 0) == (a8 != 0))
    {
      v17 = a6;
      result = GetSerializedProcessAclSize(4294967293, (uint64_t)a2, a3, (uint64_t)a4, a5, a6, a7, a8, &v23);
      if (!(_DWORD)result)
      {
        if (*a10 < v23)
        {
          return 4294967293;
        }
        else
        {
          if (a1)
          {
            *(_OWORD *)a9 = *a1;
          }
          else
          {
            *(_QWORD *)a9 = 0;
            *(_QWORD *)(a9 + 8) = 0;
          }
          *(_DWORD *)(a9 + 16) = a3;
          memcpy((void *)(a9 + 20), a2, a3);
          *(_DWORD *)(a9 + a3 + 20) = a5;
          v21 = a3 + 24;
          if (a5)
          {
            memcpy((void *)(a9 + v21), a4, a5);
            v21 += a5;
          }
          *(_DWORD *)(a9 + v21) = v17;
          v22 = v21 + 4;
          result = serializeParameters((uint64_t)a7, a8, a9, (uint64_t *)&v22);
          if (!(_DWORD)result)
            *a10 = v22;
        }
      }
    }
  }
  return result;
}

uint64_t DeserializeProcessAcl(uint64_t a1, unsigned int a2, _OWORD *a3, _QWORD *a4, _DWORD *a5, _QWORD *a6, unsigned int *a7, _DWORD *a8, _QWORD *a9, _DWORD *a10)
{
  uint64_t v10;
  _QWORD *v11;
  _DWORD *v12;
  _QWORD *v13;
  unsigned int *v14;
  _DWORD *v15;
  unint64_t v17;
  unint64_t v18;
  void *v19;
  size_t v20;
  unint64_t v21;
  _QWORD *v22;
  unsigned int *v23;
  _DWORD *v24;
  size_t v25;
  void *v26;
  void *v27;
  void *v28;
  _DWORD *v29;
  int v30;
  void *v32;
  _DWORD *v33;
  _QWORD *v34;
  unint64_t v35;
  void *v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int *v39;
  unint64_t v40;

  v39 = 0;
  v40 = 0;
  v38 = 0;
  v10 = 4294967293;
  if (a1)
  {
    if (a3)
    {
      v11 = a4;
      if (a4)
      {
        v12 = a5;
        if (a5)
        {
          v13 = a6;
          if (a6)
          {
            v14 = a7;
            if (a7)
            {
              v15 = a8;
              if (a8)
              {
                if (a9 && a10 && a2 >= 0x10)
                {
                  v17 = a2;
                  *a3 = *(_OWORD *)a1;
                  v40 = 16;
                  if ((a2 & 0xFFFFFFFC) == 0x10)
                  {
                    v10 = 4294967293;
                  }
                  else
                  {
                    v18 = *(unsigned int *)(a1 + 16);
                    v40 = 20;
                    v19 = acm_mem_alloc_data(v18);
                    acm_mem_alloc_info("<data>", v19, v18, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/LibSerialization.c", 722, "DeserializeProcessAcl");
                    if (v19)
                    {
                      if (v17 - 20 < v18
                        || (memcpy(v19, (const void *)(a1 + 20), v18), v40 = v18 + 20, v17 - (v18 + 20) < 4))
                      {
                        v32 = 0;
                        v37 = 0;
                        v10 = 4294967293;
                      }
                      else
                      {
                        v20 = *(unsigned int *)(a1 + v18 + 20);
                        v21 = v18 + 24;
                        v40 = v18 + 24;
                        v37 = v20;
                        if (!(_DWORD)v20)
                        {
                          v36 = 0;
                          goto LABEL_20;
                        }
                        v33 = v12;
                        v34 = v11;
                        v22 = v13;
                        v23 = v14;
                        v24 = v15;
                        v25 = v20;
                        v26 = acm_mem_alloc_data(v20);
                        acm_mem_alloc_info("<data>", v26, v25, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/LibSerialization.c", 734, "DeserializeProcessAcl");
                        if (v26)
                        {
                          v27 = v26;
                          v11 = v34;
                          if (v17 - v21 >= v25)
                          {
                            v36 = v27;
                            memcpy(v27, (const void *)(a1 + v21), v25);
                            v21 += v25;
                            v40 = v21;
                            v15 = v24;
                            v14 = v23;
                            v13 = v22;
                            v12 = v33;
LABEL_20:
                            if (v17 - v21 < 4)
                            {
                              v10 = 4294967293;
                            }
                            else
                            {
                              v35 = v18;
                              v28 = v19;
                              v29 = v15;
                              v30 = *(_DWORD *)(a1 + v21);
                              v40 = v21 + 4;
                              v10 = deserializeParameters(a1, v17, &v40, &v39, &v38);
                              if (!(_DWORD)v10)
                              {
                                *v11 = v28;
                                *v12 = v35;
                                *v13 = v36;
                                *v14 = v37;
                                *v29 = v30;
                                *a9 = v39;
                                *a10 = v38;
                                return v10;
                              }
                              v19 = v28;
                              v18 = v35;
                            }
                            v32 = v36;
                            goto LABEL_32;
                          }
                          v10 = 4294967293;
                          v32 = v27;
                        }
                        else
                        {
                          v32 = 0;
                          v10 = 4294967292;
                        }
                      }
LABEL_32:
                      acm_mem_free_info("<data>", v19, v18, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/LibSerialization.c", 763, "DeserializeProcessAcl");
                      acm_mem_free_data(v19, v18);
                      if (v32)
                      {
                        acm_mem_free_info("<data>", v32, v37, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/LibSerialization.c", 766, "DeserializeProcessAcl");
                        acm_mem_free_data(v32, v37);
                      }
                      goto LABEL_34;
                    }
                    v10 = 4294967292;
                  }
                }
              }
            }
          }
        }
      }
    }
  }
LABEL_34:
  if (v39)
    Util_SafeDeallocParameters(v39, v38);
  return v10;
}

uint64_t GetSerializedRequirementSize(_DWORD *a1, uint64_t *a2)
{
  uint64_t result;
  int v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;

  v12 = 0;
  result = 4294967293;
  if (!a1)
    return result;
  if (!a2)
    return result;
  v5 = *a1;
  if (*a1 > 0x1Cu)
    return result;
  if (((1 << v5) & 0x1FFCFF4E) != 0)
  {
    result = 0;
    *a2 = a1[3] + 16;
    return result;
  }
  if (((1 << v5) & 0x30) == 0)
  {
    if (v5 != 7)
      return result;
    *a2 = 24;
    v9 = a1[5];
    if ((_DWORD)v9)
    {
      v10 = a1 + 6;
      v11 = 24;
      do
      {
        result = GetSerializedRequirementSize(*v10, &v12);
        if ((_DWORD)result)
          break;
        v11 += v12;
        *a2 = v11;
        ++v10;
        --v9;
      }
      while (v9);
      return result;
    }
    return 0;
  }
  *a2 = 20;
  v6 = a1[4];
  if (!(_DWORD)v6)
    return 0;
  v7 = a1 + 5;
  v8 = 20;
  while (1)
  {
    result = GetSerializedRequirementSize(*v7, &v12);
    if ((_DWORD)result)
      break;
    v8 += v12;
    *a2 = v8;
    ++v7;
    if (!--v6)
      return 0;
  }
  return result;
}

uint64_t SerializeRequirement(_DWORD *a1, _OWORD *a2, uint64_t *a3)
{
  uint64_t result;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;

  v12 = 0;
  result = 4294967293;
  if (a1)
  {
    if (a2)
    {
      if (a3)
      {
        result = GetSerializedRequirementSize(a1, (uint64_t *)&v12);
        if (!(_DWORD)result)
        {
          if (v12 > *a3)
            return 4294967293;
          *a2 = *(_OWORD *)a1;
          v7 = *a1;
          result = 4294967293;
          if (*a1 <= 0x1Cu)
          {
            if (((1 << v7) & 0x1FFCFF4E) != 0)
            {
              memcpy(a2 + 1, a1 + 4, a1[3]);
              v8 = a1[3] + 16;
LABEL_9:
              result = 0;
              *a3 = v8;
              return result;
            }
            if (((1 << v7) & 0x30) != 0)
            {
              *((_DWORD *)a2 + 4) = a1[4];
              if (!a1[4])
              {
                v8 = 20;
                goto LABEL_9;
              }
              v9 = 0;
              v8 = 20;
              while (1)
              {
                v11 = *a3 - v8;
                result = SerializeRequirement(*(_QWORD *)&a1[2 * v9 + 5], (char *)a2 + v8, &v11);
                if ((_DWORD)result)
                  break;
                v8 += v11;
                if (++v9 >= (unint64_t)a1[4])
                  goto LABEL_9;
              }
            }
            else if (v7 == 7)
            {
              *((_QWORD *)a2 + 2) = *((_QWORD *)a1 + 2);
              if (!a1[5])
              {
                v8 = 24;
                goto LABEL_9;
              }
              v10 = 0;
              v8 = 24;
              while (1)
              {
                v11 = *a3 - v8;
                result = SerializeRequirement(*(_QWORD *)&a1[2 * v10 + 6], (char *)a2 + v8, &v11);
                if ((_DWORD)result)
                  break;
                v8 += v11;
                if (++v10 >= (unint64_t)a1[5])
                  goto LABEL_9;
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t DeserializeRequirement(unsigned int *a1, unint64_t a2, void **a3, size_t *a4)
{
  uint64_t v4;
  unsigned int v9;
  size_t v10;
  uint64_t v11;
  uint64_t v13;
  _OWORD *v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  _OWORD *v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *__dst;

  __dst = 0;
  v4 = 4294967293;
  if (a1)
  {
    if (a2 >= 0x10)
    {
      if (a3)
      {
        if (a4)
        {
          v9 = *a1;
          if (v9 <= 0x1C)
          {
            if (((1 << v9) & 0x1FFCFF4E) != 0)
            {
              v10 = a1[3] + 16;
              if (v10 > a2)
                goto LABEL_36;
              v11 = Util_AllocRequirement(v9, 0, &__dst);
              if (!(_DWORD)v11)
              {
                if (__dst)
                {
                  memcpy(__dst, a1, v10);
LABEL_11:
                  v4 = 0;
                  *a4 = v10;
                  *a3 = __dst;
                  return v4;
                }
                return 4294967292;
              }
              goto LABEL_35;
            }
            if (((1 << v9) & 0x30) != 0)
            {
              v13 = a1[4];
              if (8 * v13 + 20 > a2)
                goto LABEL_36;
              v11 = Util_AllocRequirement(v9, v13, &__dst);
              if ((_DWORD)v11)
                goto LABEL_35;
              v14 = __dst;
              if (!__dst)
                return 4294967292;
              if (*((_DWORD *)__dst + 3) == 84)
              {
                v15 = *(_OWORD *)a1;
                *((_DWORD *)__dst + 4) = a1[4];
                *v14 = v15;
                *((_DWORD *)__dst + 3) = 84;
                if (!a1[4])
                {
                  v10 = 20;
                  goto LABEL_11;
                }
                v16 = 0;
                v10 = 20;
                while (1)
                {
                  v21 = 0;
                  v22 = 0;
                  v11 = DeserializeRequirement((char *)a1 + v10, a2 - v10, &v22, &v21);
                  if ((_DWORD)v11)
                    goto LABEL_35;
                  *(_QWORD *)((char *)__dst + 8 * v16 + 20) = v22;
                  v10 += v21;
                  if (++v16 >= (unint64_t)a1[4])
                    goto LABEL_11;
                }
              }
              goto LABEL_39;
            }
            if (v9 == 7)
            {
              v17 = a1[5];
              if (8 * v17 + 24 <= a2)
              {
                v11 = Util_AllocRequirement(7, v17, &__dst);
                if (!(_DWORD)v11)
                {
                  v18 = __dst;
                  if (!__dst)
                    return 4294967292;
                  if (*((_DWORD *)__dst + 3) != 88)
                  {
LABEL_39:
                    v4 = 4294967291;
                    goto LABEL_36;
                  }
                  v19 = *(_OWORD *)a1;
                  *((_QWORD *)__dst + 2) = *((_QWORD *)a1 + 2);
                  *v18 = v19;
                  *((_DWORD *)__dst + 3) = 88;
                  if (!a1[5])
                  {
                    v10 = 24;
                    goto LABEL_11;
                  }
                  v20 = 0;
                  v10 = 24;
                  while (1)
                  {
                    v21 = 0;
                    v22 = 0;
                    v11 = DeserializeRequirement((char *)a1 + v10, a2 - v10, &v22, &v21);
                    if ((_DWORD)v11)
                      break;
                    *((_QWORD *)__dst + v20 + 3) = v22;
                    v10 += v21;
                    if (++v20 >= (unint64_t)a1[5])
                      goto LABEL_11;
                  }
                }
LABEL_35:
                v4 = v11;
              }
            }
          }
        }
      }
    }
  }
LABEL_36:
  if (__dst)
    Util_DeallocRequirement((int *)__dst);
  return v4;
}

uint64_t GetSerializedCredentialSize(_DWORD *a1, _QWORD *a2)
{
  uint64_t result;

  result = 4294967293;
  if (a1 && a2 && *a1 <= 0x17u && ((1 << *a1) & 0xFFF7FE) != 0)
  {
    result = 0;
    *a2 = a1[7] + 32;
  }
  return result;
}

uint64_t SerializeCredential(unsigned int *__src, void *__dst, size_t *a3)
{
  uint64_t result;
  unsigned int v6;
  size_t v8;

  result = 4294967293;
  if (__src && __dst && a3)
  {
    v6 = *__src;
    if (*__src <= 0x17 && ((1 << *__src) & 0xFFF7FE) != 0)
    {
      v8 = __src[7] + 32;
      if (v8 <= *a3 && v6 <= 0x17 && ((1 << v6) & 0xFFF7FE) != 0)
      {
        memcpy(__dst, __src, v8);
        result = 0;
        *a3 = __src[7] + 32;
      }
    }
  }
  return result;
}

uint64_t DeserializeCredential(unsigned int *a1, unint64_t a2, void **a3, _QWORD *a4)
{
  uint64_t v4;
  unsigned int v8;
  uint64_t v10;
  void *__dst;

  __dst = 0;
  v4 = 4294967293;
  if (a2 >= 0x20 && a1 && a3 && a4)
  {
    v8 = *a1;
    v10 = a1[7];
    switch(*a1)
    {
      case 1u:
        if ((_DWORD)v10 == 28)
          goto LABEL_7;
        return v4;
      case 2u:
        if ((_DWORD)v10 == 136)
          goto LABEL_7;
        return v4;
      case 3u:
        if ((_DWORD)v10 == 305)
          goto LABEL_7;
        return v4;
      case 4u:
      case 5u:
      case 6u:
      case 8u:
      case 0xEu:
      case 0x10u:
      case 0x13u:
      case 0x16u:
      case 0x17u:
        if (!(_DWORD)v10)
          goto LABEL_7;
        return v4;
      case 7u:
        if ((_DWORD)v10 == 56)
          goto LABEL_7;
        return v4;
      case 9u:
        if ((_DWORD)v10 == 24)
          goto LABEL_7;
        return v4;
      case 0xAu:
        if ((_DWORD)v10 == 52)
          goto LABEL_7;
        return v4;
      case 0xCu:
      case 0xFu:
        if ((_DWORD)v10 == 8)
          goto LABEL_7;
        return v4;
      case 0xDu:
      case 0x15u:
        if ((_DWORD)v10 == 132)
          goto LABEL_7;
        return v4;
      case 0x11u:
        if ((_DWORD)v10 == 81)
          goto LABEL_7;
        return v4;
      case 0x12u:
        if ((_DWORD)v10 == 20)
          goto LABEL_7;
        return v4;
      case 0x14u:
        if ((_DWORD)v10 != 32)
          return v4;
LABEL_7:
        v4 = Util_AllocCredential(*a1, &__dst);
        if ((_DWORD)v4)
        {
          if (__dst)
          {
LABEL_16:
            Util_DeallocCredential(__dst);
            return v4;
          }
        }
        else
        {
          if (__dst)
          {
            if (*((_DWORD *)__dst + 1) > 3u || *((_DWORD *)__dst + 2) > 0x50u)
            {
              v4 = 4294967293;
            }
            else
            {
              v4 = 4294967293;
              if (v8 <= 0x17 && ((1 << v8) & 0xFFF7FE) != 0 && v10 + 32 <= a2)
              {
                memcpy(__dst, a1, v10 + 32);
                v4 = 0;
                *a3 = __dst;
                *a4 = v10 + 32;
                return v4;
              }
            }
            goto LABEL_16;
          }
          v4 = 4294967292;
        }
        break;
      default:
        return v4;
    }
  }
  return v4;
}

uint64_t CopyCredential(uint64_t a1, void **a2)
{
  uint64_t v2;
  void *__dst;

  __dst = 0;
  v2 = 4294967293;
  if (a1 && a2)
  {
    v2 = Util_AllocCredential(*(_DWORD *)a1, &__dst);
    if ((_DWORD)v2)
    {
      if (__dst)
        Util_DeallocCredential(__dst);
    }
    else if (__dst)
    {
      memcpy(__dst, (const void *)a1, *(unsigned int *)(a1 + 28) + 32);
      v2 = 0;
      *a2 = __dst;
    }
    else
    {
      return 4294967292;
    }
  }
  return v2;
}

uint64_t CompareCredentials(_QWORD *__s1, _QWORD *__s2, _BYTE *a3)
{
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v6;
  uint64_t v7;
  size_t v8;
  _BOOL4 isNullOrEqualMem2;
  char *v13;
  char *v14;
  size_t v21;
  uint64_t v22;

  v3 = 4294967293;
  if (__s1)
  {
    v4 = __s2;
    if (__s2)
    {
      if (a3)
      {
        v6 = __s1;
        if (*(_DWORD *)__s1 == *(_DWORD *)__s2)
        {
          v7 = *((unsigned int *)__s1 + 7);
          if ((_DWORD)v7 == *((_DWORD *)__s2 + 7))
          {
            v3 = 4294967293;
            switch(*(_DWORD *)__s1)
            {
              case 1:
                if (*__s1 != *__s2 || __s1[1] != __s2[1] || __s1[2] != __s2[2] || __s1[3] != __s2[3])
                  break;
                v13 = (char *)__s1 + 44;
                v14 = (char *)__s2 + 44;
                goto LABEL_74;
              case 2:
                if (*((_DWORD *)__s1 + 8) != *((_DWORD *)__s2 + 8))
                  break;
                v8 = *((unsigned int *)__s1 + 9);
                if ((_DWORD)v8 != *((_DWORD *)__s2 + 9))
                  break;
                __s2 += 5;
                __s1 += 5;
                goto LABEL_8;
              case 3:
                if (*__s1 != *__s2 || __s1[1] != __s2[1] || __s1[2] != __s2[2] || __s1[3] != __s2[3])
                  break;
                v13 = (char *)(__s1 + 13);
                v14 = (char *)(__s2 + 13);
                goto LABEL_74;
              case 4:
              case 5:
              case 6:
              case 8:
              case 0xC:
              case 0xE:
              case 0xF:
              case 0x10:
              case 0x11:
              case 0x12:
              case 0x13:
              case 0x16:
              case 0x17:
                v8 = v7 + 32;
                goto LABEL_8;
              case 7:
                if (*__s1 != *__s2 || __s1[1] != __s2[1] || __s1[2] != __s2[2] || __s1[3] != __s2[3])
                  break;
                isNullOrEqualMem2 = _isNullOrEqualMem2((unint64_t)(__s1 + 4), 0x20uLL, (unint64_t)(__s2 + 4), 32);
                if (!isNullOrEqualMem2)
                  goto LABEL_100;
                v13 = (char *)(v6 + 8);
                v14 = (char *)(v4 + 8);
                v21 = 24;
                v22 = 24;
                goto LABEL_103;
              case 9:
                if (*__s1 != *__s2 || __s1[1] != __s2[1] || __s1[2] != __s2[2] || __s1[3] != __s2[3])
                  break;
                v13 = (char *)(__s1 + 5);
                v14 = (char *)(__s2 + 5);
                goto LABEL_74;
              case 0xA:
                if (*__s1 != *__s2 || __s1[1] != __s2[1] || __s1[2] != __s2[2] || __s1[3] != __s2[3])
                  break;
                isNullOrEqualMem2 = _isNullOrEqualMem2((unint64_t)__s1 + 36, 0x10uLL, (unint64_t)__s2 + 36, 16);
                if (!isNullOrEqualMem2)
                  goto LABEL_100;
                v13 = (char *)v6 + 52;
                v14 = (char *)v4 + 52;
LABEL_74:
                v21 = 16;
                v22 = 16;
                goto LABEL_103;
              case 0xD:
                v8 = *((unsigned int *)__s1 + 8);
                if ((_DWORD)v8 != *((_DWORD *)__s2 + 8))
                  break;
                __s2 = (_QWORD *)((char *)__s2 + 36);
                __s1 = (_QWORD *)((char *)__s1 + 36);
LABEL_8:
                LOBYTE(isNullOrEqualMem2) = memcmp(__s1, __s2, v8) == 0;
                goto LABEL_100;
              case 0x14:
                if (*__s1 != *__s2 || __s1[1] != __s2[1] || __s1[2] != __s2[2] || __s1[3] != __s2[3])
                  break;
                v14 = (char *)(__s2 + 4);
                v13 = (char *)(__s1 + 4);
                v21 = 32;
                v22 = 32;
                goto LABEL_103;
              case 0x15:
                if (*__s1 != *__s2 || __s1[1] != __s2[1] || __s1[2] != __s2[2] || __s1[3] != __s2[3])
                  break;
                v13 = (char *)__s1 + 36;
                v14 = (char *)__s2 + 36;
                v21 = 128;
                v22 = 128;
LABEL_103:
                LOBYTE(isNullOrEqualMem2) = _isNullOrEqualMem2((unint64_t)v13, v21, (unint64_t)v14, v22);
                goto LABEL_100;
              default:
                return v3;
            }
          }
        }
        LOBYTE(isNullOrEqualMem2) = 0;
LABEL_100:
        v3 = 0;
        *a3 = isNullOrEqualMem2;
      }
    }
  }
  return v3;
}

BOOL _isNullOrEqualMem2(unint64_t __s1, size_t __n, unint64_t __s2, uint64_t a4)
{
  _BOOL8 result;
  BOOL v6;
  BOOL v7;

  if (__n != a4)
    return 0;
  if (!(__s1 | __s2))
    return 1;
  result = 0;
  v6 = __s1 == 0;
  if (__s2)
  {
    v7 = 1;
  }
  else
  {
    v6 = 0;
    v7 = __s1 == 0;
  }
  if (v7 && !v6)
    return memcmp((const void *)__s1, (const void *)__s2, __n) == 0;
  return result;
}

uint64_t GetSerializedAddCredentialSize(uint64_t a1, _DWORD *a2, int a3, _QWORD *a4)
{
  BOOL v4;
  char v5;
  uint64_t result;

  if (a1)
    v4 = 1;
  else
    v4 = a3 == 2;
  v5 = !v4;
  result = 4294967293;
  if (a4 && a2 && (v5 & 1) == 0 && *a2 <= 0x17u && ((1 << *a2) & 0xFFF7FE) != 0)
  {
    result = 0;
    *a4 = a2[7] + 52;
  }
  return result;
}

uint64_t SerializeAddCredential(_OWORD *a1, unsigned int *__src, int a3, uint64_t a4, _QWORD *a5)
{
  BOOL v6;
  char v7;
  uint64_t result;
  size_t v12;
  uint64_t v13;

  if (a1)
    v6 = 1;
  else
    v6 = a3 == 2;
  v7 = !v6;
  result = 4294967293;
  if (a5)
  {
    if (a4)
    {
      if (__src)
      {
        if ((v7 & 1) == 0)
        {
          result = 4294967293;
          if (*__src <= 0x17 && ((1 << *__src) & 0xFFF7FE) != 0 && *a5 >= (unint64_t)__src[7] + 52)
          {
            if (a1)
            {
              *(_OWORD *)a4 = *a1;
            }
            else
            {
              *(_QWORD *)a4 = 0;
              *(_QWORD *)(a4 + 8) = 0;
            }
            v13 = *a5 - 16;
            result = SerializeCredential(__src, (void *)(a4 + 16), (size_t *)&v13);
            if (!(_DWORD)result)
            {
              v12 = v13;
              *(_DWORD *)(v13 + a4 + 16) = a3;
              *a5 = v12 + 20;
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t DeserializeAddCredential(uint64_t a1, unint64_t a2, _OWORD *a3, _QWORD *a4, _DWORD *a5)
{
  uint64_t v5;
  uint64_t v10;
  _DWORD *v12;
  uint64_t v13;

  v12 = 0;
  v13 = 0;
  v5 = 4294967293;
  if (a1 && a2 >= 0x34 && a3 && a4 && a5)
  {
    *a3 = *(_OWORD *)a1;
    v10 = DeserializeCredential((unsigned int *)(a1 + 16), a2 - 16, (void **)&v12, &v13);
    if ((_DWORD)v10)
    {
      v5 = v10;
    }
    else if (a2 - (v13 + 16) >= 4)
    {
      v5 = 0;
      *a5 = *(_DWORD *)(a1 + v13 + 16);
      *a4 = v12;
      return v5;
    }
  }
  if (v12)
    Util_DeallocCredential(v12);
  return v5;
}

uint64_t DeserializeAddCredentialType(uint64_t a1, unint64_t a2, _DWORD *a3)
{
  uint64_t result;

  result = 4294967293;
  if (a2 >= 0x34 && a1)
  {
    if (a3)
    {
      result = 0;
      *a3 = *(_DWORD *)(a1 + 16);
    }
  }
  return result;
}

uint64_t GetSerializedRemoveCredentialSize(uint64_t a1, _DWORD *a2, int a3, _QWORD *a4)
{
  BOOL v4;
  char v5;
  uint64_t result;

  if (a1)
    v4 = 1;
  else
    v4 = a3 == 2;
  v5 = !v4;
  result = 4294967293;
  if (a4 && a2 && (v5 & 1) == 0 && *a2 <= 0x17u && ((1 << *a2) & 0xFFF7FE) != 0)
  {
    result = 0;
    *a4 = a2[7] + 52;
  }
  return result;
}

uint64_t GetSerializedReplacePassphraseCredentialSize(uint64_t a1, _DWORD *a2, int a3, _QWORD *a4)
{
  BOOL v4;
  char v5;
  uint64_t result;

  if (a1)
    v4 = 1;
  else
    v4 = a3 == 2;
  v5 = !v4;
  result = 4294967293;
  if (a4 && a2 && (v5 & 1) == 0 && *a2 <= 0x17u && ((1 << *a2) & 0xFFF7FE) != 0)
  {
    result = 0;
    *a4 = a2[7] + 52;
  }
  return result;
}

uint64_t SerializeCredentialList(unsigned int **a1, unsigned int a2, unsigned int *a3, _QWORD *a4)
{
  size_t v4;
  size_t v5;
  BOOL v6;
  unsigned int **v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int *v14;
  uint64_t result;
  size_t v16[9];

  if (a2)
    v6 = a1 == 0;
  else
    v6 = 0;
  if (v6 || a3 == 0 || a4 == 0)
    return 4294967293;
  v16[7] = v4;
  v16[8] = v5;
  *a3 = a2;
  if (a2)
  {
    v11 = a1;
    v12 = a2;
    v13 = 4;
    while (1)
    {
      v14 = *v11;
      if (!*v11)
        return 4294967293;
      v16[0] = *a4 - v13;
      result = SerializeCredential(v14, (char *)a3 + v13, v16);
      if ((_DWORD)result)
        return result;
      v13 += v16[0];
      ++v11;
      if (!--v12)
        goto LABEL_18;
    }
  }
  else
  {
    v13 = 4;
LABEL_18:
    result = 0;
    *a4 = v13;
  }
  return result;
}

uint64_t DeserializeCredentialList(unsigned int *a1, uint64_t a2, _QWORD *a3, _DWORD *a4)
{
  uint64_t v4;
  uint64_t v8;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;

  v15 = 0;
  v4 = 4294967293;
  if (a1)
  {
    if (a3)
    {
      if (a4)
      {
        v8 = *a1;
        if (v8 <= 0x3E8)
        {
          if ((_DWORD)v8)
          {
            v10 = (char *)acm_mem_alloc(8 * v8);
            acm_mem_alloc_info("array of ACMCredentialRef", v10, 8 * v8, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/LibSerialization.c", 1778, "DeserializeCredentialList");
            if (v10)
            {
              v11 = 0;
              v12 = 4;
              while (1)
              {
                v13 = DeserializeCredential((unsigned int *)((char *)a1 + v12), a2 - v12, (void **)&v10[v11], &v15);
                if ((_DWORD)v13)
                  break;
                v12 += v15;
                v11 += 8;
                if (8 * v8 == v11)
                  goto LABEL_12;
              }
              v4 = v13;
              DeallocCredentialList((_DWORD **)v10, v8);
            }
            else
            {
              return 4294967292;
            }
          }
          else
          {
            v10 = 0;
LABEL_12:
            v4 = 0;
            *a4 = v8;
            *a3 = v10;
          }
        }
      }
    }
  }
  return v4;
}

void DeallocCredentialList(_DWORD **a1, unsigned int a2)
{
  uint64_t v3;
  _DWORD **v4;
  uint64_t v5;
  unint64_t v6;

  if (a1)
  {
    v3 = a2;
    if (a2)
    {
      v4 = a1;
      v5 = a2;
      do
      {
        if (*v4)
        {
          Util_DeallocCredential(*v4);
          *v4 = 0;
        }
        ++v4;
        --v5;
      }
      while (v5);
    }
    v6 = 8 * v3;
    acm_mem_free_info("array of ACMCredentialRef", a1, v6, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/LibSerialization.c", 1816, "DeallocCredentialList");
    acm_mem_free(a1, v6);
  }
}

uint64_t GetSerializedGetContextPropertySize(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t result;

  if (!a3)
    return 4294967293;
  result = 0;
  *a3 = 20;
  return result;
}

__n128 SerializeGetContextProperty(__n128 *a1, unsigned __int32 a2, __n128 *a3, _QWORD *a4)
{
  __n128 result;

  if (a1 && a3 && a4 && *a4 >= 0x14uLL)
  {
    result = *a1;
    *a3 = *a1;
    a3[1].n128_u32[0] = a2;
    *a4 = 20;
  }
  return result;
}

uint64_t DeserializeGetContextProperty(uint64_t a1, unint64_t a2, _OWORD *a3, _DWORD *a4)
{
  uint64_t result;

  result = 4294967293;
  if (a2 >= 0x10 && a1 && a3 && a4)
  {
    *a3 = *(_OWORD *)a1;
    if ((a2 & 0xFFFFFFFFFFFFFFFCLL) != 0x10)
    {
      result = 0;
      *a4 = *(_DWORD *)(a1 + 16);
    }
  }
  return result;
}

uint64_t LibSer_GetAclAuthMethod_GetSize(uint64_t a1, _QWORD *a2)
{
  uint64_t result;

  if (!a2)
    return 4294967293;
  result = 0;
  *a2 = 16;
  return result;
}

__n128 LibSer_GetAclAuthMethod_Serialize(__n128 *a1, __n128 *a2, _QWORD *a3)
{
  __n128 result;

  if (a1 && a2 && a3 && *a3 >= 0x10uLL)
  {
    result = *a1;
    *a2 = *a1;
    *a3 = 16;
  }
  return result;
}

__n128 LibSer_GetAclAuthMethod_Deserialize(__n128 *a1, unint64_t a2, __n128 *a3)
{
  __n128 result;

  if (a2 >= 0x10 && a1)
  {
    if (a3)
    {
      result = *a1;
      *a3 = *a1;
    }
  }
  return result;
}

uint64_t LibSer_ContextCredentialGetProperty_GetSize(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t result;

  if (!a4)
    return 4294967293;
  result = 0;
  *a4 = 24;
  return result;
}

__n128 LibSer_ContextCredentialGetProperty_Serialize(__n128 *a1, unsigned __int32 a2, unsigned __int32 a3, __n128 *a4, _QWORD *a5)
{
  __n128 result;

  if (a1 && a4 && a5 && *a5 >= 0x18uLL)
  {
    result = *a1;
    *a4 = *a1;
    a4[1].n128_u32[0] = a2;
    a4[1].n128_u32[1] = a3;
    *a5 = 24;
  }
  return result;
}

__n128 LibSer_ContextCredentialGetProperty_Deserialize(__n128 *a1, unint64_t a2, __n128 *a3, _DWORD *a4, _DWORD *a5)
{
  __n128 result;

  if (a2 >= 0x18 && a1 && a3 && a4)
  {
    if (a5)
    {
      result = *a1;
      *a3 = *a1;
      *a4 = a1[1].n128_u32[0];
      *a5 = a1[1].n128_u32[1];
    }
  }
  return result;
}

uint64_t LibSer_GlobalContextCredentialGetProperty_GetSize(_QWORD *a1)
{
  uint64_t result;

  if (!a1)
    return 4294967293;
  result = 0;
  *a1 = 8;
  return result;
}

uint64_t LibSer_GlobalContextCredentialGetProperty_Serialize(int a1, int a2, _DWORD *a3, _QWORD *a4)
{
  uint64_t result;

  result = 4294967293;
  if (a3 && a4 && *a4 >= 8uLL)
  {
    result = 0;
    *a3 = a1;
    a3[1] = a2;
    *a4 = 8;
  }
  return result;
}

uint64_t LibSer_GlobalContextCredentialGetProperty_Deserialize(_DWORD *a1, unint64_t a2, _DWORD *a3, _DWORD *a4)
{
  uint64_t result;

  result = 4294967293;
  if (a2 >= 8 && a1 && a3)
  {
    if (a4)
    {
      result = 0;
      *a3 = *a1;
      *a4 = a1[1];
    }
  }
  return result;
}

uint64_t LibSer_RemoveCredentialByType_GetSize(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t result;

  if (!a4)
    return 4294967293;
  result = 0;
  *a4 = 24;
  return result;
}

__n128 LibSer_RemoveCredentialByType_Serialize(__n128 *a1, unsigned __int32 a2, unsigned __int32 a3, __n128 *a4, _QWORD *a5)
{
  __n128 result;

  if (a1 && a4 && a5 && *a5 >= 0x18uLL)
  {
    result = *a1;
    *a4 = *a1;
    a4[1].n128_u32[0] = a2;
    a4[1].n128_u32[1] = a3;
    *a5 = 24;
  }
  return result;
}

__n128 LibSer_RemoveCredentialByType_Deserialize(__n128 *a1, unint64_t a2, __n128 *a3, _DWORD *a4, _DWORD *a5)
{
  __n128 result;

  if (a2 >= 0x18 && a1 && a3 && a4)
  {
    if (a5)
    {
      result = *a1;
      *a3 = *a1;
      *a4 = a1[1].n128_u32[0];
      *a5 = a1[1].n128_u32[1];
    }
  }
  return result;
}

uint64_t LibSer_DeleteContext_GetSize(uint64_t a1, _QWORD *a2)
{
  uint64_t result;

  if (!a2)
    return 4294967293;
  result = 0;
  *a2 = 16;
  return result;
}

__n128 LibSer_DeleteContext_Serialize(__n128 *a1, __n128 *a2, _QWORD *a3)
{
  __n128 result;

  if (a1 && a2 && a3 && *a3 >= 0x10uLL)
  {
    result = *a1;
    *a2 = *a1;
    *a3 = 16;
  }
  return result;
}

__n128 LibSer_DeleteContext_Deserialize(__n128 *a1, unint64_t a2, __n128 *a3)
{
  __n128 result;

  if (a2 >= 0x10 && a1)
  {
    if (a3)
    {
      result = *a1;
      *a3 = *a1;
    }
  }
  return result;
}

uint64_t LibSer_StorageAnyCmd_DeserializeCommonFields(uint64_t a1, unint64_t a2, _OWORD *a3, _DWORD *a4)
{
  uint64_t result;

  result = 4294967293;
  if (a1 && a2 >= 0x14)
  {
    if (a3)
      *a3 = *(_OWORD *)a1;
    result = 0;
    if (a4)
      *a4 = *(_DWORD *)(a1 + 16);
  }
  return result;
}

uint64_t LibSer_StorageSetData_GetSize(uint64_t a1, _DWORD *a2, unsigned int a3, _QWORD *a4)
{
  uint64_t result;
  unsigned int v7;

  v7 = 0;
  if (!a4)
    return 4294967291;
  result = getLengthOfParameters(a2, a3, &v7);
  if (!(_DWORD)result)
    *a4 = a1 + v7 + 28;
  return result;
}

uint64_t LibSer_StorageSetData_Serialize(_OWORD *a1, int a2, const void *a3, size_t a4, _DWORD *a5, unsigned int a6, uint64_t a7, size_t *a8)
{
  uint64_t result;
  size_t v17;
  unsigned int v18;

  result = 4294967293;
  if (a1)
  {
    if (a2)
    {
      if (a7)
      {
        if (a8)
        {
          v18 = 0;
          result = getLengthOfParameters(a5, a6, &v18);
          if (!(_DWORD)result)
          {
            if (*a8 < a4 + v18 + 28)
            {
              return 4294967293;
            }
            else
            {
              *(_OWORD *)a7 = *a1;
              *(_DWORD *)(a7 + 16) = a2;
              *(_DWORD *)(a7 + 20) = a4;
              memcpy((void *)(a7 + 24), a3, a4);
              v17 = a4 + 24;
              result = serializeParameters((uint64_t)a5, a6, a7, (uint64_t *)&v17);
              if (!(_DWORD)result)
                *a8 = v17;
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t LibSer_StorageSetData_Deserialize(uint64_t a1, unint64_t a2, _OWORD *a3, _DWORD *a4, _QWORD *a5, _QWORD *a6, _QWORD *a7, _DWORD *a8)
{
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v14[3];

  v10 = 4294967293;
  if (a1 && a2 >= 0x18 && a6 && a3 && a4 && a5 && a7 && a8)
  {
    v14[1] = v8;
    v14[2] = v9;
    *a3 = *(_OWORD *)a1;
    *a4 = *(_DWORD *)(a1 + 16);
    v11 = *(unsigned int *)(a1 + 20);
    v14[0] = 24;
    *a6 = v11;
    if ((_DWORD)v11)
    {
      v12 = v11 + 24;
      if (v12 > a2)
        return 4294967293;
      *a5 = a1 + 24;
      v14[0] = v12;
    }
    else
    {
      *a5 = 0;
    }
    return deserializeParameters(a1, a2, v14, a7, a8);
  }
  return v10;
}

uint64_t LibSer_StorageGetData_GetSize(_DWORD *a1, unsigned int a2, _QWORD *a3)
{
  uint64_t result;
  unsigned int v5;

  v5 = 0;
  if (!a3)
    return 4294967291;
  result = getLengthOfParameters(a1, a2, &v5);
  if (!(_DWORD)result)
    *a3 = v5 + 25;
  return result;
}

uint64_t LibSer_StorageGetData_Serialize(_OWORD *a1, int a2, char a3, _DWORD *a4, unsigned int a5, uint64_t a6, _QWORD *a7)
{
  uint64_t result;
  uint64_t v15;
  unsigned int v16;

  result = 4294967293;
  if (a1)
  {
    if (a2)
    {
      if (a6)
      {
        if (a7)
        {
          v16 = 0;
          result = getLengthOfParameters(a4, a5, &v16);
          if (!(_DWORD)result)
          {
            if (*a7 < (unint64_t)v16 + 25)
            {
              return 4294967293;
            }
            else
            {
              *(_OWORD *)a6 = *a1;
              *(_DWORD *)(a6 + 16) = a2;
              *(_BYTE *)(a6 + 20) = a3;
              v15 = 21;
              result = serializeParameters((uint64_t)a4, a5, a6, &v15);
              if (!(_DWORD)result)
                *a7 = v15;
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t LibSer_StorageGetData_Deserialize(uint64_t a1, unint64_t a2, _OWORD *a3, _DWORD *a4, BOOL *a5, _QWORD *a6, _DWORD *a7)
{
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v11[3];

  v9 = 4294967293;
  if (a1 && a2 >= 0x15 && a3 && a4 && a5)
  {
    v11[1] = v7;
    v11[2] = v8;
    *a3 = *(_OWORD *)a1;
    *a4 = *(_DWORD *)(a1 + 16);
    *a5 = *(_BYTE *)(a1 + 20) != 0;
    v11[0] = 21;
    return deserializeParameters(a1, a2, v11, a6, a7);
  }
  return v9;
}

uint64_t LibSer_GetUnlockSecret_GetSize(_DWORD *a1, unsigned int a2, _QWORD *a3)
{
  uint64_t result;
  unsigned int v5;

  v5 = 0;
  if (!a3)
    return 4294967291;
  result = getLengthOfParameters(a1, a2, &v5);
  if (!(_DWORD)result)
    *a3 = v5 + 20;
  return result;
}

uint64_t LibSer_GetUnlockSecret_Serialize(_OWORD *a1, _DWORD *a2, unsigned int a3, _OWORD *a4, _QWORD *a5)
{
  uint64_t result;
  uint64_t v11;
  unsigned int v12;

  result = 4294967293;
  if (a1)
  {
    if (a4)
    {
      if (a5)
      {
        v12 = 0;
        result = getLengthOfParameters(a2, a3, &v12);
        if (!(_DWORD)result)
        {
          if (*a5 < (unint64_t)v12 + 20)
          {
            return 4294967293;
          }
          else
          {
            *a4 = *a1;
            v11 = 16;
            result = serializeParameters((uint64_t)a2, a3, (uint64_t)a4, &v11);
            if (!(_DWORD)result)
              *a5 = v11;
          }
        }
      }
    }
  }
  return result;
}

uint64_t LibSer_GetUnlockSecret_Deserialize(_OWORD *a1, unint64_t a2, _OWORD *a3, _QWORD *a4, _DWORD *a5)
{
  unint64_t v5;
  unint64_t v6;
  uint64_t result;
  unint64_t v9[3];

  if (!a1)
    return 4294967293;
  result = 4294967293;
  if (a2 >= 0x10 && a3 && a4)
  {
    if (a5)
    {
      v9[1] = v5;
      v9[2] = v6;
      *a3 = *a1;
      v9[0] = 16;
      return deserializeParameters((uint64_t)a1, a2, v9, a4, a5);
    }
  }
  return result;
}

uint64_t LibSer_GetUnlockSecretResponse_GetSize(uint64_t a1, _QWORD *a2)
{
  uint64_t result;

  if (!a2)
    return 4294967291;
  result = 0;
  *a2 = a1 + 1;
  return result;
}

uint64_t LibSer_GetUnlockSecretResponse_Serialize(void *__src, size_t __n, char a3, _BYTE *a4, _QWORD *a5)
{
  uint64_t result;
  size_t v9;

  result = 4294967293;
  if (__src && __n && a4 && a5)
  {
    v9 = __n + 1;
    if (*a5 < __n + 1)
    {
      return 4294967293;
    }
    else
    {
      *a4 = a3;
      memcpy(a4 + 1, __src, __n);
      result = 0;
      *a5 = v9;
    }
  }
  return result;
}

uint64_t LibSer_GetUnlockSecretResponse_Deserialize(_BYTE *a1, uint64_t a2, _QWORD *a3, _QWORD *a4, _BYTE *a5)
{
  uint64_t result;

  result = 4294967293;
  if (a2 && a5 && a1 && a3)
  {
    if (a4)
    {
      result = 0;
      *a5 = *a1;
      *a3 = a1 + 1;
      *a4 = a2 - 1;
    }
  }
  return result;
}

uint64_t LibSer_SEPControl_GetSize(uint64_t a1, _DWORD *a2, unsigned int a3, _QWORD *a4)
{
  uint64_t result;
  unsigned int v7;

  v7 = 0;
  if (!a4)
    return 4294967291;
  result = getLengthOfParameters(a2, a3, &v7);
  if (!(_DWORD)result)
    *a4 = a1 + v7 + 24;
  return result;
}

uint64_t LibSer_SEPControl_Serialize(_OWORD *a1, _DWORD *a2, unsigned int a3, const void *a4, size_t a5, uint64_t a6, _QWORD *a7)
{
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;

  result = 4294967293;
  if (a6)
  {
    if (a7)
    {
      v18 = 0;
      result = getLengthOfParameters(a2, a3, &v18);
      if (!(_DWORD)result)
      {
        if (*a7 < a5 + v18 + 24)
        {
          return 4294967293;
        }
        else
        {
          if (a1)
          {
            *(_OWORD *)a6 = *a1;
          }
          else
          {
            *(_QWORD *)a6 = 0;
            *(_QWORD *)(a6 + 8) = 0;
          }
          v17 = 16;
          result = serializeParameters((uint64_t)a2, a3, a6, &v17);
          if (!(_DWORD)result)
          {
            v15 = v17;
            *(_DWORD *)(a6 + v17) = a5;
            v16 = v15 + 4;
            memcpy((void *)(a6 + v15 + 4), a4, a5);
            result = 0;
            *a7 = v16 + a5;
          }
        }
      }
    }
  }
  return result;
}

uint64_t LibSer_SEPControl_Deserialize(_OWORD *a1, unint64_t a2, _OWORD *a3, _QWORD *a4, _DWORD *a5, unint64_t *a6, _QWORD *a7)
{
  uint64_t result;
  unint64_t v11;
  unint64_t v12;

  if (!a1)
    return 4294967293;
  result = 4294967293;
  if (a2 >= 0x18 && a7 && a3 && a4 && a5 && a6)
  {
    *a3 = *a1;
    v12 = 16;
    result = deserializeParameters((uint64_t)a1, a2, &v12, a4, a5);
    if (!(_DWORD)result)
    {
      v11 = (unint64_t)a1 + v12 + 4;
      *a7 = *(unsigned int *)((char *)a1 + v12);
      *a6 = v11;
    }
  }
  return result;
}

uint64_t LibSer_SEPControlResponse_GetSize(uint64_t a1, _QWORD *a2)
{
  uint64_t result;

  if (!a2)
    return 4294967291;
  result = 0;
  *a2 = a1 + 4;
  return result;
}

uint64_t LibSer_SEPControlResponse_Serialize(void *__src, size_t __n, _DWORD *a3, uint64_t *a4)
{
  uint64_t result;
  uint64_t v8;

  result = 4294967293;
  if (a3 && a4)
  {
    v8 = __n + 4;
    if (*a4 < __n + 4)
    {
      return 4294967293;
    }
    else
    {
      *a3 = __n;
      if (__src)
        memcpy(a3 + 1, __src, __n);
      else
        v8 = 4;
      result = 0;
      *a4 = v8;
    }
  }
  return result;
}

uint64_t LibSer_SEPControlResponse_Deserialize(unsigned int *a1, unint64_t a2, _QWORD *a3, _QWORD *a4)
{
  uint64_t result;
  _DWORD *v6;
  unsigned int v7;

  if (!a1)
    return 4294967293;
  result = 4294967293;
  if (a2 >= 4 && a3 && a4)
  {
    result = 0;
    v7 = *a1;
    v6 = a1 + 1;
    *a4 = v7;
    if (!v7)
      v6 = 0;
    *a3 = v6;
  }
  return result;
}

uint64_t checkParameter(_DWORD *a1)
{
  if (!a1)
    return 4294967293;
  switch(*a1)
  {
    case 0:
    case 0xC:
      if (a1[4])
        return 4294967293;
      break;
    case 1:
    case 4:
    case 5:
    case 0xA:
      if (a1[4] != 4)
        return 4294967293;
      break;
    case 2:
    case 6:
    case 7:
      if (a1[4] != 16)
        return 4294967293;
      break;
    case 3:
      if ((a1[4] - 1001) < 0xFFFFFC18)
        return 4294967293;
      break;
    case 8:
    case 9:
      if (a1[4] != 1)
        return 4294967293;
      break;
    case 0xB:
      if (a1[4] > 0x400u)
        return 4294967293;
      break;
    default:
      return 4294967293;
  }
  return 0;
}

uint64_t LibCall_ACMKernelControl_Block(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  size_t v4;
  size_t v5;
  const void *v6;
  const void *v7;
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t, uint64_t, _QWORD, char *, size_t, uint64_t, uint64_t);
  uint64_t v13;
  _BYTE *v14;
  unsigned int v15;
  uint64_t v17;
  _BYTE v18[8192];
  uint64_t v19;

  v1 = MEMORY[0x24BDAC7A8](a1);
  v3 = v2;
  v5 = v4;
  v7 = v6;
  v9 = v8;
  v11 = v10;
  v12 = (uint64_t (*)(uint64_t, uint64_t, _QWORD, char *, size_t, uint64_t, uint64_t))v1;
  v19 = *MEMORY[0x24BDAC8D0];
  if (gACMLoggingLevel <= 0xAu)
    printf("%s: %s: called.\n", "ACM", "LibCall_ACMKernelControl_Block");
  v17 = 0x2000;
  v13 = LibCall_ACMKernelControl(v12, v11, v9, v7, v5, (uint64_t)v18, (uint64_t)&v17);
  if (v3)
  {
    if (v17)
      v14 = v18;
    else
      v14 = 0;
    (*(void (**)(uint64_t, _BYTE *))(v3 + 16))(v3, v14);
  }
  if ((_DWORD)v13)
    v15 = 70;
  else
    v15 = 10;
  if (v15 >= gACMLoggingLevel)
    printf("%s: %s: returning, err = %ld.\n", "ACM", "LibCall_ACMKernelControl_Block", (int)v13);
  return v13;
}

uint64_t LibCall_ACMSEPControl_Block(uint64_t (*a1)(uint64_t, uint64_t, _QWORD, char *, uint64_t, unsigned int *, unint64_t *), uint64_t a2, const void *a3, size_t a4, uint64_t a5, _DWORD *a6, unsigned int a7, uint64_t a8)
{
  uint64_t v16;
  _BYTE *v17;
  unsigned int v18;
  size_t v20;
  _BYTE v21[1024];
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  if (gACMLoggingLevel <= 0xAu)
    printf("%s: %s: called.\n", "ACM", "LibCall_ACMSEPControl_Block");
  v20 = 1024;
  v16 = LibCall_ACMSEPControl(a1, a2, a3, a4, a5, a6, a7, v21, &v20);
  if (a8)
  {
    if (v20)
      v17 = v21;
    else
      v17 = 0;
    (*(void (**)(uint64_t, _BYTE *))(a8 + 16))(a8, v17);
  }
  if ((_DWORD)v16)
    v18 = 70;
  else
    v18 = 10;
  if (v18 >= gACMLoggingLevel)
    printf("%s: %s: returning, err = %ld.\n", "ACM", "LibCall_ACMSEPControl_Block", (int)v16);
  return v16;
}

uint64_t LibCall_ACMGlobalContextCredentialGetProperty_Block(uint64_t result, uint64_t a2, int a3, int a4, uint64_t a5)
{
  uint64_t (*v9)(uint64_t, uint64_t, _QWORD, int *, uint64_t, _BYTE *, uint64_t *);
  uint64_t v10;
  _BYTE *v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  _BYTE v16[256];
  uint64_t v17;

  v9 = (uint64_t (*)(uint64_t, uint64_t, _QWORD, int *, uint64_t, _BYTE *, uint64_t *))result;
  v17 = *MEMORY[0x24BDAC8D0];
  if (gACMLoggingLevel <= 0xAu)
    result = printf("%s: %s: called.\n", "ACM", "LibCall_ACMGlobalContextCredentialGetProperty_Block");
  v14 = 256;
  if (v9)
  {
    v13 = 8;
    result = LibSer_GlobalContextCredentialGetProperty_Serialize(a3, a4, &v15, &v13);
    if ((_DWORD)result)
    {
LABEL_7:
      v10 = result;
      goto LABEL_8;
    }
    if (v13 == 8)
    {
      result = v9(a2, 27, 0, &v15, 8, v16, &v14);
      goto LABEL_7;
    }
    v10 = 4294967291;
  }
  else
  {
    v10 = 4294967293;
  }
LABEL_8:
  if (a5)
  {
    if (v14)
      v11 = v16;
    else
      v11 = 0;
    result = (*(uint64_t (**)(uint64_t, uint64_t, _BYTE *))(a5 + 16))(a5, v10, v11);
  }
  if ((_DWORD)v10)
    v12 = 70;
  else
    v12 = 10;
  if (v12 >= gACMLoggingLevel)
    return printf("%s: %s: returning, err = %ld.\n", "ACM", "LibCall_ACMGlobalContextCredentialGetProperty_Block", (int)v10);
  return result;
}

uint64_t LibCall_ACMContextVerifyPolicy_Block(uint64_t (*a1)(uint64_t, uint64_t, _QWORD, _OWORD *, size_t, unsigned int *, unint64_t *), uint64_t a2, _OWORD *a3, char *a4, uint64_t a5)
{
  return LibCall_ACMContextVerifyPolicyWithPreflight_Block(a1, a2, a3, a4, 0, a5);
}

uint64_t LibCall_ACMContextVerifyPolicyWithPreflight_Block(uint64_t (*a1)(uint64_t, uint64_t, _QWORD, _OWORD *, size_t, unsigned int *, unint64_t *), uint64_t a2, _OWORD *a3, char *__s1, uint64_t a5, uint64_t a6)
{
  unsigned int v12;
  uint64_t v13;
  int *v14;
  BOOL v16;
  int *v17;

  if (gACMLoggingLevel <= 0xAu)
    printf("%s: %s: called.\n", "ACM", "LibCall_ACMContextVerifyPolicyWithPreflight_Block");
  v17 = 0;
  v16 = 0;
  v12 = 70;
  v13 = 4294967293;
  if (a3 && __s1 && a6)
  {
    v13 = LibCall_ACMContextVerifyPolicyEx(a1, a2, a3, __s1, a5, 0, 0, 0, &v16, &v17);
    v14 = v17;
    if (!(_DWORD)v13)
    {
      (*(void (**)(uint64_t, BOOL, int *))(a6 + 16))(a6, v16, v17);
      v14 = v17;
    }
    if (v14)
      Util_DeallocRequirement(v14);
    if ((_DWORD)v13)
      v12 = 70;
    else
      v12 = 10;
  }
  if (v12 >= gACMLoggingLevel)
    printf("%s: %s: returning, err = %ld.\n", "ACM", "LibCall_ACMContextVerifyPolicyWithPreflight_Block", (int)v13);
  return v13;
}

int *LibCall_ACMContextVerifyPolicyEx_Block(uint64_t (*a1)(uint64_t, uint64_t, _QWORD, _OWORD *, size_t, unsigned int *, unint64_t *), uint64_t a2, _OWORD *a3, char *__s1, uint64_t a5, _DWORD *a6, unsigned int a7, uint64_t a8, uint64_t a9)
{
  _BOOL8 v17;
  int *v18;
  uint64_t v19;
  int *result;
  BOOL v21;
  int *v22;

  if (gACMLoggingLevel <= 0xAu)
    printf("%s: %s: called.\n", "ACM", "LibCall_ACMContextVerifyPolicyEx_Block");
  v17 = 0;
  v18 = 0;
  v22 = 0;
  v21 = 0;
  v19 = 4294967293;
  if (a3 && __s1 && a9)
  {
    v19 = LibCall_ACMContextVerifyPolicyEx(a1, a2, a3, __s1, a5, a6, a7, a8, &v21, &v22);
    v18 = v22;
    v17 = v21;
  }
  (*(void (**)(uint64_t, uint64_t, _BOOL8, int *))(a9 + 16))(a9, v19, v17, v18);
  result = v22;
  if (v22)
    result = (int *)Util_DeallocRequirement(v22);
  if (gACMLoggingLevel <= 0xAu)
    return (int *)printf("%s: %s: returning.\n", "ACM", "LibCall_ACMContextVerifyPolicyEx_Block");
  return result;
}

uint64_t LibCall_ACMGlobalContextVerifyPolicy_Block(uint64_t (*a1)(uint64_t, uint64_t, _QWORD, _OWORD *, size_t, unsigned int *, unint64_t *), uint64_t a2, char *a3, uint64_t a4, _DWORD *a5, unsigned int a6, uint64_t a7)
{
  uint64_t result;
  int v15[2];

  if (gACMLoggingLevel <= 0xAu)
    printf("%s: %s: called.\n", "ACM", "LibCall_ACMGlobalContextVerifyPolicy_Block");
  *(_QWORD *)v15 = 0;
  result = LibCall_ACMContextCreate((uint64_t (*)(uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, _BYTE *, uint64_t *))a1, a2, v15, 0, 1);
  if ((_DWORD)result)
  {
    if (a7)
      result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD))(a7 + 16))(a7, result, 0, 0);
  }
  else
  {
    result = (uint64_t)LibCall_ACMContextVerifyPolicyEx_Block(a1, a2, *(_OWORD **)v15, a3, a4, a5, a6, 0xFFFFFFFFLL, a7);
  }
  if (*(_QWORD *)v15)
    result = LibCall_ACMContextDelete((void (*)(uint64_t, uint64_t, _QWORD, void *, uint64_t, _QWORD, _QWORD))a1, a2, *(void **)v15, 1);
  if (gACMLoggingLevel <= 0xAu)
    return printf("%s: %s: returning.\n", "ACM", "LibCall_ACMGlobalContextVerifyPolicy_Block");
  return result;
}

uint64_t LibCall_ACMGetEnvironmentVariable_Block(uint64_t (*a1)(uint64_t, uint64_t, _QWORD, int *, uint64_t, uint64_t, uint64_t), uint64_t a2, int a3, uint64_t a4)
{
  void *v8;
  uint64_t v9;
  void *v10;
  _BYTE *v11;
  unsigned int v12;
  uint64_t v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  if (gACMLoggingLevel <= 0xAu)
    printf("%s: %s: called.\n", "ACM", "LibCall_ACMGetEnvironmentVariable_Block");
  v14 = 128;
  if (!a4)
  {
    v12 = 70;
    v9 = 4294967293;
    goto LABEL_17;
  }
  if (a3 == 36)
  {
    v8 = acm_mem_alloc_data(0x800uLL);
    acm_mem_alloc_info("<data>", v8, 2048, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/LibCallBlock.c", 162, "LibCall_ACMGetEnvironmentVariable_Block");
    if (!v8)
    {
      v12 = 70;
      v9 = 4294967292;
      goto LABEL_17;
    }
    v14 = 2048;
    v9 = LibCall_ACMGetEnvironmentVariable(a1, a2, 36, (uint64_t)v8, (uint64_t)&v14);
    if (!(_DWORD)v9)
    {
      if (v14)
        v10 = v8;
      else
        v10 = 0;
      (*(void (**)(uint64_t, void *))(a4 + 16))(a4, v10);
      acm_mem_free_info("<data>", v8, 0x800uLL, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/LibCallBlock.c", 176, "LibCall_ACMGetEnvironmentVariable_Block");
      acm_mem_free_data(v8, 0x800uLL);
LABEL_16:
      v12 = 10;
      goto LABEL_17;
    }
    acm_mem_free_info("<data>", v8, 0x800uLL, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/LibCallBlock.c", 176, "LibCall_ACMGetEnvironmentVariable_Block");
    acm_mem_free_data(v8, 0x800uLL);
  }
  else
  {
    v9 = LibCall_ACMGetEnvironmentVariable(a1, a2, a3, (uint64_t)v15, (uint64_t)&v14);
    if (!(_DWORD)v9)
    {
      if (v14)
        v11 = v15;
      else
        v11 = 0;
      (*(void (**)(uint64_t, _BYTE *))(a4 + 16))(a4, v11);
      goto LABEL_16;
    }
  }
  v12 = 70;
LABEL_17:
  if (v12 >= gACMLoggingLevel)
    printf("%s: %s: returning, err = %ld.\n", "ACM", "LibCall_ACMGetEnvironmentVariable_Block", (int)v9);
  return v9;
}

uint64_t LibCall_ACMTRMLoadState_Block(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, uint64_t, uint64_t);
  uint64_t v7;
  _BYTE *v8;
  unsigned int v9;
  uint64_t v11;
  _BYTE v12[8192];
  uint64_t v13;

  v1 = MEMORY[0x24BDAC7A8](a1);
  v3 = v2;
  v5 = v4;
  v6 = (uint64_t (*)(uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, uint64_t, uint64_t))v1;
  v13 = *MEMORY[0x24BDAC8D0];
  if (gACMLoggingLevel <= 0xAu)
    printf("%s: %s: called.\n", "ACM", "LibCall_ACMTRMLoadState_Block");
  v11 = 0x2000;
  if (v3)
  {
    v7 = LibCall_ACMTRMLoadState(v6, v5, (uint64_t)v12, (uint64_t)&v11);
    if ((_DWORD)v7)
    {
      v9 = 70;
    }
    else
    {
      if (v11)
        v8 = v12;
      else
        v8 = 0;
      (*(void (**)(uint64_t, _BYTE *))(v3 + 16))(v3, v8);
      v9 = 10;
    }
  }
  else
  {
    v9 = 70;
    v7 = 4294967293;
  }
  if (v9 >= gACMLoggingLevel)
    printf("%s: %s: returning, err = %ld.\n", "ACM", "LibCall_ACMTRMLoadState_Block", (int)v7);
  return v7;
}

uint64_t LibCall_ACMContextUnloadToImage_Block(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  _BYTE v8[4096];
  uint64_t v9;

  v1 = MEMORY[0x24BDAC7A8](a1);
  v3 = v2;
  v4 = v1;
  v9 = *MEMORY[0x24BDAC8D0];
  if (gACMLoggingLevel <= 0xAu)
    printf("%s: %s: called.\n", "ACM", "LibCall_ACMContextUnloadToImage_Block");
  if (v3)
  {
    v5 = LibCall_ACMContextUnloadToImage(v4);
    if ((_DWORD)v5)
    {
      v6 = 70;
    }
    else
    {
      (*(void (**)(uint64_t, _BYTE *))(v3 + 16))(v3, v8);
      v6 = 10;
    }
  }
  else
  {
    v6 = 70;
    v5 = 4294967293;
  }
  if (v6 >= gACMLoggingLevel)
    printf("%s: %s: returning, err = %ld.\n", "ACM", "LibCall_ACMContextUnloadToImage_Block", (int)v5);
  return v5;
}

uint64_t LibCall_ACMGetAclAuthMethod_Block(uint64_t result, uint64_t a2, __n128 *a3, uint64_t a4)
{
  void (*v7)(uint64_t, uint64_t, _QWORD, __n128 *, uint64_t, _BYTE *, uint64_t *, __n128);
  __n128 AclAuthMethod_Serialize;
  int v9;
  uint64_t v10;
  uint64_t v11;
  __n128 v12;
  _BYTE v13[256];
  uint64_t v14;

  v7 = (void (*)(uint64_t, uint64_t, _QWORD, __n128 *, uint64_t, _BYTE *, uint64_t *, __n128))result;
  v14 = *MEMORY[0x24BDAC8D0];
  if (gACMLoggingLevel <= 0xAu)
    result = printf("%s: %s: called.\n", "ACM", "LibCall_ACMGetAclAuthMethod_Block");
  v11 = 256;
  if (v7 && a3 && a4)
  {
    v10 = 16;
    AclAuthMethod_Serialize = LibSer_GetAclAuthMethod_Serialize(a3, &v12, &v10);
    if (!v9 && v10 == 16)
      v7(a2, 31, 0, &v12, 16, v13, &v11, AclAuthMethod_Serialize);
    goto LABEL_9;
  }
  if (a4)
LABEL_9:
    result = (*(uint64_t (**)(uint64_t))(a4 + 16))(a4);
  if (gACMLoggingLevel <= 0xAu)
    return printf("%s: %s: returning.\n", "ACM", "LibCall_ACMGetAclAuthMethod_Block");
  return result;
}

uint64_t LibCall_ACMContextVerifyAclConstraint(uint64_t a1, uint64_t a2, _OWORD *a3, const void *a4, uint64_t a5, unsigned __int8 a6, _DWORD *a7, unsigned int a8, unsigned int a9, uint64_t a10)
{
  return verifyAclConstraintForOperationCommandInternal(a1, a2, 0xBu, a3, a4, a5, 0, 0, a6, a7, a8, a9, a10);
}

uint64_t verifyAclConstraintForOperationCommandInternal(uint64_t result, uint64_t a2, unsigned __int8 a3, _OWORD *a4, const void *a5, uint64_t a6, const void *a7, unsigned int a8, unsigned __int8 a9, _DWORD *a10, unsigned int a11, unsigned int a12, uint64_t a13)
{
  uint64_t (*v20)(uint64_t, uint64_t, _QWORD, void *, size_t, unsigned int *, unint64_t *);
  uint64_t v21;
  int *v22;
  _BOOL8 v23;
  BOOL v24;
  int *v25;

  v20 = (uint64_t (*)(uint64_t, uint64_t, _QWORD, void *, size_t, unsigned int *, unint64_t *))result;
  if (gACMLoggingLevel <= 0xAu)
    result = printf("%s: %s: called.\n", "ACM", "verifyAclConstraintForOperationCommandInternal");
  v25 = 0;
  v24 = 0;
  if (a4 && a5 && a6 && a13)
  {
    v21 = verifyAclConstraintInternal(v20, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, &v24, &v25);
    v22 = v25;
    v23 = v24;
  }
  else
  {
    if (!a13)
      goto LABEL_10;
    v22 = 0;
    v23 = 0;
    v21 = 4294967293;
  }
  (*(void (**)(uint64_t, uint64_t, _BOOL8, int *))(a13 + 16))(a13, v21, v23, v22);
  result = (uint64_t)v25;
  if (v25)
    result = Util_DeallocRequirement(v25);
LABEL_10:
  if (gACMLoggingLevel <= 0xAu)
    return printf("%s: %s: returning.\n", "ACM", "verifyAclConstraintForOperationCommandInternal");
  return result;
}

uint64_t LibCall_ACMContextVerifyAclConstraintForOperation(uint64_t a1, uint64_t a2, _OWORD *a3, const void *a4, uint64_t a5, const void *a6, unsigned int a7, unsigned __int8 a8, _DWORD *a9, unsigned int a10, unsigned int a11, uint64_t a12)
{
  return verifyAclConstraintForOperationCommandInternal(a1, a2, 0x20u, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
}

uint64_t Util_GetBitCount(uint64_t a1)
{
  uint8x8_t v1;

  v1 = (uint8x8_t)vcnt_s8((int8x8_t)a1);
  v1.i16[0] = vaddlv_u8(v1);
  return v1.u32[0];
}

BOOL Util_isNullOrZeroMemory(_BYTE *a1, uint64_t a2)
{
  if (!a1)
    return 1;
  if (*a1)
    return 0;
  return memcmp(a1, a1 + 1, a2 - 1) == 0;
}

BOOL Util_isNonNullEqualMemory(void *__s1, size_t __n, void *__s2, uint64_t a4)
{
  _BOOL8 result;

  if (__n != a4)
    return 0;
  result = 0;
  if (__s1)
  {
    if (__s2)
      return memcmp(__s1, __s2, __n) == 0;
  }
  return result;
}

char *Util_hexDumpToStrHelper(char *result, unint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t v4;
  _BYTE *v5;
  char v6;

  if (!result && a2)
    Util_hexDumpToStrHelper_cold_1();
  if (!a3 && a4)
    Util_hexDumpToStrHelper_cold_2();
  if (a2 >= a4)
    v4 = a4;
  else
    v4 = a2;
  if (v4)
  {
    v5 = (_BYTE *)(a3 + 1);
    do
    {
      *(v5 - 1) = a0123456789abcd[(unint64_t)*result >> 4];
      v6 = *result++;
      *v5 = a0123456789abcd[v6 & 0xF];
      v5 += 2;
      --v4;
    }
    while (v4);
  }
  return result;
}

uint64_t Util_WriteToBuffer(uint64_t a1, size_t a2, _QWORD *a3, void *__src, size_t __n)
{
  uint64_t v10;
  size_t v11;
  uint64_t v12;
  unsigned int v13;

  if (gACMLoggingLevel <= 0xAu)
    printf("%s: %s: called.\n", "ACM", "Util_WriteToBuffer");
  if (a3)
  {
    v10 = *a3;
    v11 = *a3 + __n;
    if (!__CFADD__(*a3, __n))
    {
      if (a1 && v11 > a2)
      {
        v12 = 4294967276;
        goto LABEL_19;
      }
      if (!a1 || !__src || !__n)
        goto LABEL_12;
      if (!__CFADD__(a1, v10))
      {
        memcpy((void *)(a1 + v10), __src, __n);
LABEL_12:
        v12 = 0;
        *a3 = v11;
        v13 = 10;
        goto LABEL_13;
      }
    }
    v12 = 4294967291;
  }
  else
  {
    v12 = 4294967293;
  }
LABEL_19:
  v13 = 70;
LABEL_13:
  if (v13 >= gACMLoggingLevel)
    printf("%s: %s: returning, err = %ld.\n", "ACM", "Util_WriteToBuffer", (int)v12);
  return v12;
}

uint64_t Util_ReadFromBuffer(uint64_t a1, size_t a2, _QWORD *a3, void *__dst, size_t __n)
{
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  size_t v13;

  if (gACMLoggingLevel <= 0xAu)
    printf("%s: %s: called.\n", "ACM", "Util_ReadFromBuffer");
  v10 = 4294967293;
  v11 = 70;
  if (a1 && a3)
  {
    v12 = *a3;
    v13 = *a3 + __n;
    if (!__CFADD__(*a3, __n))
    {
      if (v13 > a2)
      {
        v10 = 4294967276;
        goto LABEL_17;
      }
      if (!__dst || !__n)
        goto LABEL_11;
      if (!__CFADD__(a1, v12))
      {
        memcpy(__dst, (const void *)(a1 + v12), __n);
LABEL_11:
        v10 = 0;
        *a3 = v13;
        v11 = 10;
        goto LABEL_12;
      }
    }
    v10 = 4294967291;
LABEL_17:
    v11 = 70;
  }
LABEL_12:
  if (v11 >= gACMLoggingLevel)
    printf("%s: %s: returning, err = %ld.\n", "ACM", "Util_ReadFromBuffer", (int)v10);
  return v10;
}

unint64_t Util_KeybagLockStateToEnvVar(unsigned int a1)
{
  unint64_t v1;

  v1 = 0x2010103020201uLL >> (8 * a1);
  if (a1 >= 7)
    LOBYTE(v1) = 1;
  return v1 & 3;
}

void Util_SafeDeallocParameters(unsigned int *a1, unsigned int a2)
{
  uint64_t v3;
  unsigned int *v4;
  uint64_t v5;
  void *v6;
  unint64_t v7;

  if (a1)
  {
    v3 = a2;
    if (a2)
    {
      v4 = a1 + 4;
      v5 = a2;
      do
      {
        v6 = (void *)*((_QWORD *)v4 - 1);
        if (v6)
        {
          v7 = *v4;
          acm_mem_free_info("<data>", *((const void **)v4 - 1), v7, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/CommonUtil.c", 118, "Util_SafeDeallocParameters");
          acm_mem_free_data(v6, v7);
        }
        v4 += 6;
        --v5;
      }
      while (v5);
    }
    acm_mem_free_info("array of ACMParameter", a1, 24 * v3, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/CommonUtil.c", 121, "Util_SafeDeallocParameters");
    acm_mem_free(a1, 24 * v3);
  }
}

uint64_t Util_DeallocCredential(_DWORD *a1)
{
  uint64_t v2;
  unsigned int v3;
  const char *v4;
  rsize_t v5;
  const void *v6;
  unint64_t v7;
  int v8;

  if (gACMLoggingLevel <= 0xAu)
    printf("%s: %s: called.\n", "ACM", "Util_DeallocCredential");
  if (a1)
  {
    v2 = 4294967293;
    v3 = 70;
    switch(*a1)
    {
      case 1:
        v4 = "ACMCredential - ACMCredentialDataPasscodeValidated";
        v5 = 60;
        v6 = a1;
        v7 = 60;
        v8 = 144;
        goto LABEL_6;
      case 2:
        v4 = "ACMCredential - ACMCredentialDataPassphraseEntered";
        v5 = 168;
        v6 = a1;
        v7 = 168;
        v8 = 136;
        goto LABEL_6;
      case 3:
        v4 = "ACMCredential - ACMCredentialDataBiometryMatched";
        v5 = 337;
        v6 = a1;
        v7 = 337;
        v8 = 140;
        goto LABEL_6;
      case 4:
      case 5:
      case 6:
      case 8:
      case 0xE:
      case 0x10:
      case 0x13:
      case 0x16:
      case 0x17:
        v4 = "ACMCredential";
        v5 = 32;
        v6 = a1;
        v7 = 32;
        v8 = 189;
        goto LABEL_6;
      case 7:
        v4 = "ACMCredential - ACMCredentialDataUserOutputDisplayed";
        v5 = 88;
        v6 = a1;
        v7 = 88;
        v8 = 152;
        goto LABEL_6;
      case 9:
        v4 = "ACMCredential - ACMCredentialDataContinuityUnlock";
        v5 = 56;
        v6 = a1;
        v7 = 56;
        v8 = 156;
        goto LABEL_6;
      case 0xA:
        v4 = "ACMCredential - ACMCredentialDataPasscodeValidated2";
        v5 = 84;
        v6 = a1;
        v7 = 84;
        v8 = 148;
        goto LABEL_6;
      case 0xC:
      case 0xF:
        v4 = "ACMCredential - ACMCredentialDataKextDenyList";
        v5 = 40;
        v6 = a1;
        v7 = 40;
        v8 = 161;
        goto LABEL_6;
      case 0xD:
        v4 = "ACMCredential - ACMCredentialDataPassphraseExtractable";
        v5 = 164;
        v6 = a1;
        v7 = 164;
        v8 = 132;
        goto LABEL_6;
      case 0x11:
        v4 = "ACMCredential - ACMCredentialDataSecureIntent";
        v5 = 113;
        v6 = a1;
        v7 = 113;
        v8 = 165;
        goto LABEL_6;
      case 0x12:
        v4 = "ACMCredential - ACMCredentialDataBiometryMatchAttempted";
        v5 = 52;
        v6 = a1;
        v7 = 52;
        v8 = 169;
        goto LABEL_6;
      case 0x14:
        v4 = "ACMCredential - ACMCredentialDataAP";
        v5 = 64;
        v6 = a1;
        v7 = 64;
        v8 = 173;
        goto LABEL_6;
      case 0x15:
        v4 = "ACMCredential - ACMCredentialDataSignature";
        v5 = 164;
        v6 = a1;
        v7 = 164;
        v8 = 177;
LABEL_6:
        acm_mem_free_info(v4, v6, v7, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/CommonUtil.c", v8, "Util_DeallocCredential");
        acm_mem_free(a1, v5);
        v2 = 0;
        v3 = 10;
        break;
      default:
        break;
    }
  }
  else
  {
    v2 = 4294967293;
    v3 = 70;
  }
  if (v3 >= gACMLoggingLevel)
    printf("%s: %s: returning, err = %ld.\n", "ACM", "Util_DeallocCredential", (int)v2);
  return v2;
}

uint64_t Util_AllocCredential(int a1, _QWORD *a2)
{
  uint64_t result;
  _DWORD *v5;
  int v6;
  const char *v7;
  const void *v8;
  int v9;

  if (!a2)
    return 4294967293;
  result = 4294967293;
  switch(a1)
  {
    case 1:
      v5 = acm_mem_alloc(0x3CuLL);
      acm_mem_alloc_info("ACMCredential - ACMCredentialDataPasscodeValidated", v5, 60, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/CommonUtil.c", 226, "Util_AllocCredential");
      v6 = 28;
      goto LABEL_4;
    case 2:
      v5 = acm_mem_alloc(0xA8uLL);
      acm_mem_alloc_info("ACMCredential - ACMCredentialDataPassphraseEntered", v5, 168, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/CommonUtil.c", 216, "Util_AllocCredential");
      v6 = 136;
      goto LABEL_4;
    case 3:
      v5 = acm_mem_alloc(0x151uLL);
      acm_mem_alloc_info("ACMCredential - ACMCredentialDataBiometryMatched", v5, 337, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/CommonUtil.c", 221, "Util_AllocCredential");
      v6 = 305;
      goto LABEL_4;
    case 4:
    case 5:
    case 6:
    case 8:
    case 14:
    case 16:
    case 19:
    case 22:
    case 23:
      v5 = acm_mem_alloc(0x20uLL);
      acm_mem_alloc_info("ACMCredential", v5, 32, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/CommonUtil.c", 280, "Util_AllocCredential");
      v6 = 0;
      goto LABEL_4;
    case 7:
      v5 = acm_mem_alloc(0x58uLL);
      acm_mem_alloc_info("ACMCredential - ACMCredentialDataUserOutputDisplayed", v5, 88, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/CommonUtil.c", 236, "Util_AllocCredential");
      v6 = 56;
      goto LABEL_4;
    case 9:
      v5 = acm_mem_alloc(0x38uLL);
      acm_mem_alloc_info("ACMCredential - ACMCredentialDataContinuityUnlock", v5, 56, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/CommonUtil.c", 241, "Util_AllocCredential");
      v6 = 24;
      goto LABEL_4;
    case 10:
      v5 = acm_mem_alloc(0x54uLL);
      acm_mem_alloc_info("ACMCredential - ACMCredentialDataPasscodeValidated2", v5, 84, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/CommonUtil.c", 231, "Util_AllocCredential");
      v6 = 52;
      goto LABEL_4;
    case 12:
    case 15:
      v5 = acm_mem_alloc(0x28uLL);
      acm_mem_alloc_info("ACMCredential - ACMCredentialDataKextDenyList", v5, 40, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/CommonUtil.c", 247, "Util_AllocCredential");
      v6 = 8;
      goto LABEL_4;
    case 13:
      v5 = acm_mem_alloc(0xA4uLL);
      v7 = "ACMCredential - ACMCredentialDataPassphraseExtractable";
      v8 = v5;
      v9 = 211;
      goto LABEL_18;
    case 17:
      v5 = acm_mem_alloc(0x71uLL);
      acm_mem_alloc_info("ACMCredential - ACMCredentialDataSecureIntent", v5, 113, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/CommonUtil.c", 252, "Util_AllocCredential");
      v6 = 81;
      goto LABEL_4;
    case 18:
      v5 = acm_mem_alloc(0x34uLL);
      acm_mem_alloc_info("ACMCredential - ACMCredentialDataBiometryMatchAttempted", v5, 52, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/CommonUtil.c", 257, "Util_AllocCredential");
      v6 = 20;
      goto LABEL_4;
    case 20:
      v5 = acm_mem_alloc(0x40uLL);
      acm_mem_alloc_info("ACMCredential - ACMCredentialDataAP", v5, 64, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/CommonUtil.c", 262, "Util_AllocCredential");
      v6 = 32;
      goto LABEL_4;
    case 21:
      v5 = acm_mem_alloc(0xA4uLL);
      v7 = "ACMCredential - ACMCredentialDataSignature";
      v8 = v5;
      v9 = 267;
LABEL_18:
      acm_mem_alloc_info(v7, v8, 164, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/CommonUtil.c", v9, "Util_AllocCredential");
      v6 = 132;
LABEL_4:
      if (v5)
      {
        result = 0;
        *v5 = a1;
        v5[1] = 1;
        v5[7] = v6;
        v5[3] = -1;
        *a2 = v5;
      }
      else
      {
        result = 4294967292;
      }
      break;
    default:
      return result;
  }
  return result;
}

uint64_t Util_AllocRequirement(int a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v6;
  unsigned int v7;
  _DWORD *v8;
  int v9;
  const char *v11;
  const void *v12;
  int v13;
  const char *v14;
  const void *v15;
  int v16;

  if (gACMLoggingLevel <= 0xAu)
    printf("%s: %s: called.\n", "ACM", "Util_AllocRequirement");
  if (a3)
  {
    v6 = 4294967293;
    v7 = 70;
    switch(a1)
    {
      case 1:
        v8 = acm_mem_alloc(0x14uLL);
        v11 = "ACMRequirement - ACMRequirementDataPasscodeValidated";
        v12 = v8;
        v13 = 338;
        goto LABEL_49;
      case 2:
        v8 = acm_mem_alloc(0x14uLL);
        v11 = "ACMRequirement - ACMRequirementDataPassphraseEntered";
        v12 = v8;
        v13 = 343;
        goto LABEL_49;
      case 3:
        v8 = acm_mem_alloc(0xACuLL);
        acm_mem_alloc_info("ACMRequirement - ACMRequirementDataBiometryMatched", v8, 172, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/CommonUtil.c", 348, "Util_AllocRequirement");
        v9 = 156;
        if (!v8)
          goto LABEL_50;
        goto LABEL_6;
      case 4:
        if ((unint64_t)(a2 - 11) < 0xFFFFFFFFFFFFFFF6)
          goto LABEL_53;
        v8 = acm_mem_alloc(0x64uLL);
        v14 = "ACMRequirement - ACMRequirementDataOr";
        v15 = v8;
        v16 = 406;
        goto LABEL_28;
      case 5:
        if ((unint64_t)(a2 - 11) < 0xFFFFFFFFFFFFFFF6)
          goto LABEL_53;
        v8 = acm_mem_alloc(0x64uLL);
        v14 = "ACMRequirement - ACMRequirementDataAnd";
        v15 = v8;
        v16 = 398;
LABEL_28:
        acm_mem_alloc_info(v14, v15, 100, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/CommonUtil.c", v16, "Util_AllocRequirement");
        v9 = 84;
        if (!v8)
          goto LABEL_50;
        goto LABEL_6;
      case 6:
      case 9:
      case 10:
      case 11:
      case 12:
      case 14:
      case 15:
      case 18:
      case 19:
      case 22:
      case 23:
      case 27:
      case 28:
        v8 = acm_mem_alloc(0x10uLL);
        acm_mem_alloc_info("ACMRequirement", v8, 16, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/CommonUtil.c", 333, "Util_AllocRequirement");
        v9 = 0;
        if (v8)
          goto LABEL_6;
        goto LABEL_50;
      case 7:
        if ((unint64_t)(a2 - 11) < 0xFFFFFFFFFFFFFFF6)
          goto LABEL_53;
        v8 = acm_mem_alloc(0x68uLL);
        acm_mem_alloc_info("ACMRequirement - ACMRequirementDataKofN", v8, 104, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/CommonUtil.c", 391, "Util_AllocRequirement");
        v9 = 88;
        if (!v8)
          goto LABEL_50;
        goto LABEL_6;
      case 8:
        v8 = acm_mem_alloc(0x410uLL);
        acm_mem_alloc_info("ACMRequirement - ACMRequirementDataAccessGroups", v8, 1040, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/CommonUtil.c", 378, "Util_AllocRequirement");
        v9 = 1024;
        if (!v8)
          goto LABEL_50;
        goto LABEL_6;
      case 13:
        v8 = acm_mem_alloc(0x30uLL);
        acm_mem_alloc_info("ACMRequirement - ACMRequirementDataUserOutputDisplayed", v8, 48, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/CommonUtil.c", 363, "Util_AllocRequirement");
        v9 = 32;
        if (!v8)
          goto LABEL_50;
        goto LABEL_6;
      case 16:
      case 17:
        break;
      case 20:
        v8 = acm_mem_alloc(0x14uLL);
        v11 = "ACMRequirement - ACMRequirementDataSecureIntent";
        v12 = v8;
        v13 = 353;
        goto LABEL_49;
      case 21:
        v8 = acm_mem_alloc(0x14uLL);
        v11 = "ACMRequirement - ACMRequirementDataBiometryMatchAttempted";
        v12 = v8;
        v13 = 358;
LABEL_49:
        acm_mem_alloc_info(v11, v12, 20, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/CommonUtil.c", v13, "Util_AllocRequirement");
        v9 = 4;
        if (!v8)
          goto LABEL_50;
        goto LABEL_6;
      case 24:
        v8 = acm_mem_alloc(0x434uLL);
        acm_mem_alloc_info("ACMRequirement - ACMRequirementDataAP", v8, 1076, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/CommonUtil.c", 368, "Util_AllocRequirement");
        v9 = 1060;
        if (!v8)
          goto LABEL_50;
        goto LABEL_6;
      case 25:
        v8 = acm_mem_alloc(0x3BuLL);
        acm_mem_alloc_info("ACMRequirement - ACMRequirementDataKeyRef", v8, 59, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/CommonUtil.c", 373, "Util_AllocRequirement");
        v9 = 43;
        if (!v8)
          goto LABEL_50;
        goto LABEL_6;
      case 26:
        v8 = acm_mem_alloc(0x2CuLL);
        acm_mem_alloc_info("ACMRequirement - ACMRequirementDataRatchet", v8, 44, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/CommonUtil.c", 384, "Util_AllocRequirement");
        v9 = 28;
        if (!v8)
        {
LABEL_50:
          v6 = 4294967292;
          goto LABEL_54;
        }
LABEL_6:
        *v8 = a1;
        *(_QWORD *)(v8 + 1) = 0x100000001;
        v8[3] = v9;
        if ((a1 & 0xFFFFFFFE) == 4)
        {
          v8[4] = a2;
        }
        else if (a1 == 1000)
        {
          v8[13] = a2;
        }
        else if (a1 == 7)
        {
          v8[5] = a2;
        }
        v6 = 0;
        *a3 = v8;
        v7 = 10;
        break;
      default:
        switch(a1)
        {
          case 1000:
            if ((unint64_t)(a2 - 11) < 0xFFFFFFFFFFFFFFF6)
              goto LABEL_53;
            v8 = acm_mem_alloc(0x88uLL);
            acm_mem_alloc_info("ACMRequirement - ACMRequirementDataKofNWithAttributes", v8, 136, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/CommonUtil.c", 414, "Util_AllocRequirement");
            v9 = 120;
            if (!v8)
              goto LABEL_50;
            goto LABEL_6;
          case 1001:
            v8 = acm_mem_alloc(0xB8uLL);
            acm_mem_alloc_info("ACMRequirement - ACMRequirementDataBiometryMatchedWithAttributes", v8, 184, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/CommonUtil.c", 419, "Util_AllocRequirement");
            v9 = 168;
            if (!v8)
              goto LABEL_50;
            goto LABEL_6;
          case 1002:
            v8 = acm_mem_alloc(0x14uLL);
            v11 = "ACMRequirement - ACMRequirementDataPushButtonWithAttributes";
            v12 = v8;
            v13 = 424;
            goto LABEL_49;
          case 1003:
            v8 = acm_mem_alloc(0x14uLL);
            v11 = "ACMRequirement - ACMRequirementDataSecureStateWithAttributes";
            v12 = v8;
            v13 = 429;
            goto LABEL_49;
          case 1004:
            v8 = acm_mem_alloc(0x20uLL);
            acm_mem_alloc_info("ACMRequirement - ACMRequirementDataPasscodeValidatedWithAttributes", v8, 32, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/CommonUtil.c", 434, "Util_AllocRequirement");
            v9 = 16;
            if (!v8)
              goto LABEL_50;
            goto LABEL_6;
          default:
            goto LABEL_17;
        }
    }
  }
  else
  {
LABEL_53:
    v6 = 4294967293;
LABEL_54:
    v7 = 70;
  }
LABEL_17:
  if (v7 >= gACMLoggingLevel)
    printf("%s: %s: returning, err = %ld.\n", "ACM", "Util_AllocRequirement", (int)v6);
  return v6;
}

uint64_t Util_CreateRequirement(int a1, uint64_t a2)
{
  uint64_t v5;

  if (gACMLoggingLevel <= 0xAu)
    printf("%s: %s: called.\n", "ACM", "Util_CreateRequirement");
  v5 = 0;
  Util_AllocRequirement(a1, a2, &v5);
  if (gACMLoggingLevel <= 0xAu)
    printf("%s: %s: returning.\n", "ACM", "Util_CreateRequirement");
  return v5;
}

uint64_t Util_DeallocRequirement(int *a1)
{
  int v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unsigned int v8;
  const char *v9;
  rsize_t v10;
  int *v11;
  unint64_t v12;
  int v13;

  if (gACMLoggingLevel <= 0xAu)
    printf("%s: %s: called.\n", "ACM", "Util_DeallocRequirement");
  if (!a1)
  {
    v7 = 4294967293;
    v8 = 70;
    goto LABEL_28;
  }
  v2 = *a1;
  if (*a1 > 6)
  {
    if (v2 == 7)
    {
      if (a1[5])
      {
        v6 = 0;
        do
          Util_DeallocRequirement(*(_QWORD *)&a1[2 * v6++ + 6]);
        while (v6 < a1[5]);
      }
    }
    else
    {
      if (v2 != 1000)
        goto LABEL_25;
      if (a1[13])
      {
        v4 = 0;
        do
          Util_DeallocRequirement(*(_QWORD *)&a1[2 * v4++ + 14]);
        while (v4 < a1[13]);
      }
    }
  }
  else if (v2 == 4)
  {
    if (a1[4])
    {
      v5 = 0;
      do
        Util_DeallocRequirement(*(_QWORD *)&a1[2 * v5++ + 5]);
      while (v5 < a1[4]);
    }
  }
  else
  {
    if (v2 != 5)
      goto LABEL_25;
    if (a1[4])
    {
      v3 = 0;
      do
        Util_DeallocRequirement(*(_QWORD *)&a1[2 * v3++ + 5]);
      while (v3 < a1[4]);
    }
  }
  v2 = *a1;
LABEL_25:
  v7 = 4294967293;
  v8 = 70;
  switch(v2)
  {
    case 1:
      v9 = "ACMRequirement - ACMRequirementDataPasscodeValidated";
      v10 = 20;
      v11 = a1;
      v12 = 20;
      v13 = 542;
      goto LABEL_27;
    case 2:
      v9 = "ACMRequirement - ACMRequirementDataPassphraseEntered";
      v10 = 20;
      v11 = a1;
      v12 = 20;
      v13 = 546;
      goto LABEL_27;
    case 3:
      v9 = "ACMRequirement - ACMRequirementDataBiometryMatched";
      v10 = 172;
      v11 = a1;
      v12 = 172;
      v13 = 550;
      goto LABEL_27;
    case 4:
      v9 = "ACMRequirement - ACMRequirementDataOr";
      v10 = 100;
      v11 = a1;
      v12 = 100;
      v13 = 595;
      goto LABEL_27;
    case 5:
      v9 = "ACMRequirement - ACMRequirementDataAnd";
      v10 = 100;
      v11 = a1;
      v12 = 100;
      v13 = 589;
      goto LABEL_27;
    case 6:
    case 9:
    case 10:
    case 11:
    case 12:
    case 14:
    case 15:
    case 18:
    case 19:
    case 22:
    case 23:
    case 27:
    case 28:
      v9 = "ACMRequirement";
      v10 = 16;
      v11 = a1;
      v12 = 16;
      v13 = 538;
      goto LABEL_27;
    case 7:
      v9 = "ACMRequirement - ACMRequirementDataKofN";
      v10 = 104;
      v11 = a1;
      v12 = 104;
      v13 = 584;
      goto LABEL_27;
    case 8:
      v9 = "ACMRequirement - ACMRequirementDataAccessGroups";
      v10 = 1040;
      v11 = a1;
      v12 = 1040;
      v13 = 574;
      goto LABEL_27;
    case 13:
      v9 = "ACMRequirement - ACMRequirementDataUserOutputDisplayed";
      v10 = 48;
      v11 = a1;
      v12 = 48;
      v13 = 562;
      goto LABEL_27;
    case 16:
    case 17:
      break;
    case 20:
      v9 = "ACMRequirement - ACMRequirementDataSecureIntent";
      v10 = 20;
      v11 = a1;
      v12 = 20;
      v13 = 554;
      goto LABEL_27;
    case 21:
      v9 = "ACMRequirement - ACMRequirementDataBiometryMatchAttempted";
      v10 = 20;
      v11 = a1;
      v12 = 20;
      v13 = 558;
      goto LABEL_27;
    case 24:
      v9 = "ACMRequirement - ACMRequirementDataAP";
      v10 = 1076;
      v11 = a1;
      v12 = 1076;
      v13 = 566;
      goto LABEL_27;
    case 25:
      v9 = "ACMRequirement - ACMRequirementDataKeyRef";
      v10 = 59;
      v11 = a1;
      v12 = 59;
      v13 = 570;
      goto LABEL_27;
    case 26:
      v9 = "ACMRequirement - ACMRequirementDataRatchet";
      v10 = 44;
      v11 = a1;
      v12 = 44;
      v13 = 579;
LABEL_27:
      acm_mem_free_info(v9, v11, v12, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/CommonUtil.c", v13, "Util_DeallocRequirement");
      acm_mem_free(a1, v10);
      v7 = 0;
      v8 = 10;
      break;
    default:
      switch(v2)
      {
        case 1000:
          v9 = "ACMRequirement - ACMRequirementDataKofNWithAttributes";
          v10 = 136;
          v11 = a1;
          v12 = 136;
          v13 = 601;
          goto LABEL_27;
        case 1001:
          v9 = "ACMRequirement - ACMRequirementDataBiometryMatchedWithAttributes";
          v10 = 184;
          v11 = a1;
          v12 = 184;
          v13 = 605;
          goto LABEL_27;
        case 1002:
          v9 = "ACMRequirement - ACMRequirementDataPushButtonWithAttributes";
          v10 = 20;
          v11 = a1;
          v12 = 20;
          v13 = 609;
          goto LABEL_27;
        case 1003:
          v9 = "ACMRequirement - ACMRequirementDataSecureStateWithAttributes";
          v10 = 20;
          v11 = a1;
          v12 = 20;
          v13 = 613;
          goto LABEL_27;
        case 1004:
          v9 = "ACMRequirement - ACMRequirementDataPasscodeValidatedWithAttributes";
          v10 = 32;
          v11 = a1;
          v12 = 32;
          v13 = 617;
          goto LABEL_27;
        default:
          goto LABEL_28;
      }
  }
LABEL_28:
  if (v8 >= gACMLoggingLevel)
    printf("%s: %s: returning, err = %ld.\n", "ACM", "Util_DeallocRequirement", (int)v7);
  return v7;
}

void Util_hexDumpToStrHelper_cold_1()
{
  __assert_rtn("Util_hexDumpToStrHelper", "CommonUtil.c", 32, "src || !srcLen");
}

void Util_hexDumpToStrHelper_cold_2()
{
  __assert_rtn("Util_hexDumpToStrHelper", "CommonUtil.c", 33, "dst || !dstCapacity");
}

uint64_t ACMContextCreate(uint64_t *a1)
{
  uint64_t v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t v6;
  uint8_t buf[4];
  const char *v8;
  __int16 v9;
  const char *v10;
  __int16 v11;
  uint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  if (_logLevel <= 0xAu && os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315394;
    v8 = "ACMLib";
    v9 = 2080;
    v10 = "ACMContextCreate";
    _os_log_impl(&dword_2409DC000, MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO, "%s: %s: called.\n", buf, 0x16u);
  }
  v6 = 0;
  v2 = LibCall_ACMContextCreate((uint64_t (*)(uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, _BYTE *, uint64_t *))ioKitTransport, (uint64_t)&v6, a1, &_logLevel, 1);
  if ((_DWORD)v2)
  {
    updateLogLevelFromKext();
    v3 = 70;
  }
  else
  {
    v3 = 10;
    if (a1 && _logLevel <= 0x28u)
    {
      if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO))
      {
        v4 = *a1;
        if (*a1)
          LODWORD(v4) = *(_DWORD *)(v4 + 16);
        *(_DWORD *)buf = 136315650;
        v8 = "ACMLib";
        v9 = 2080;
        v10 = "ACMContextCreate";
        v11 = 1024;
        LODWORD(v12) = v4;
        _os_log_impl(&dword_2409DC000, MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO, "%s: %s: CS[%u] created.\n", buf, 0x1Cu);
      }
      v3 = 10;
    }
  }
  if (v3 >= _logLevel && os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315650;
    v8 = "ACMLib";
    v9 = 2080;
    v10 = "ACMContextCreate";
    v11 = 2048;
    v12 = (int)v2;
    _os_log_impl(&dword_2409DC000, MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO, "%s: %s: returning, err = %ld.\n", buf, 0x20u);
  }
  return v2;
}

uint64_t ioKitTransport(uint64_t *a1, int a2, char a3, const void *a4, size_t a5, void *a6, size_t *a7)
{
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  int v18;
  const char *v19;
  __int16 v20;
  const char *v21;
  __int16 v22;
  uint64_t v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  if (_logLevel <= 0xAu && os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO))
  {
    v18 = 136315394;
    v19 = "ACMLib";
    v20 = 2080;
    v21 = "ioKitTransport";
    _os_log_impl(&dword_2409DC000, MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO, "%s: %s: called.\n", (uint8_t *)&v18, 0x16u);
  }
  if (a1)
  {
    v14 = init();
    v15 = 70;
    if ((_DWORD)v14)
    {
      v16 = v14;
    }
    else
    {
      v16 = performCommand(*a1, a2, a3, a4, a5, a6, a7);
      if ((_DWORD)v16)
        v15 = 70;
      else
        v15 = 10;
    }
  }
  else
  {
    v15 = 70;
    v16 = 4294967293;
  }
  if (v15 >= _logLevel && os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO))
  {
    v18 = 136315650;
    v19 = "ACMLib";
    v20 = 2080;
    v21 = "ioKitTransport";
    v22 = 2048;
    v23 = (int)v16;
    _os_log_impl(&dword_2409DC000, MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO, "%s: %s: returning, err = %ld.\n", (uint8_t *)&v18, 0x20u);
  }
  return v16;
}

_DWORD *ACMContextCreateWithExternalForm(_OWORD *a1, uint64_t a2)
{
  _DWORD *v4;
  int v5;
  unsigned int v6;
  uint64_t v8;
  uint8_t buf[4];
  const char *v10;
  __int16 v11;
  const char *v12;
  __int16 v13;
  _DWORD *v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  if (_logLevel <= 0xAu && os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315394;
    v10 = "ACMLib";
    v11 = 2080;
    v12 = "ACMContextCreateWithExternalForm";
    _os_log_impl(&dword_2409DC000, MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO, "%s: %s: called.\n", buf, 0x16u);
  }
  v8 = 0;
  v4 = LibCall_ACMContextCreateWithExternalForm((uint64_t (*)(uint64_t, uint64_t, _QWORD, _OWORD *, uint64_t, _QWORD *, uint64_t *))ioKitTransport, (uint64_t)&v8, a1, a2, &_logLevel, 1);
  if (v4)
  {
    if (_logLevel <= 0x28u && os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO))
    {
      v5 = v4[4];
      *(_DWORD *)buf = 136315650;
      v10 = "ACMLib";
      v11 = 2080;
      v12 = "ACMContextCreateWithExternalForm";
      v13 = 1024;
      LODWORD(v14) = v5;
      _os_log_impl(&dword_2409DC000, MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO, "%s: %s: CS[%u] acquired.\n", buf, 0x1Cu);
    }
    v6 = 30;
  }
  else
  {
    updateLogLevelFromKext();
    v6 = 70;
  }
  if (v6 >= _logLevel && os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315650;
    v10 = "ACMLib";
    v11 = 2080;
    v12 = "ACMContextCreateWithExternalForm";
    v13 = 2048;
    v14 = v4;
    _os_log_impl(&dword_2409DC000, MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO, "%s: %s: returning, -> ctx = %p.\n", buf, 0x20u);
  }
  return v4;
}

uint64_t ACMContextDelete(_DWORD *a1, int a2)
{
  unsigned int v4;
  int v5;
  const char *v6;
  uint64_t v7;
  unsigned int v8;
  _DWORD *v10;
  uint8_t buf[4];
  const char *v12;
  __int16 v13;
  const char *v14;
  __int16 v15;
  _QWORD v16[3];

  v16[2] = *MEMORY[0x24BDAC8D0];
  v4 = _logLevel;
  if (_logLevel <= 0xAu && os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315394;
    v12 = "ACMLib";
    v13 = 2080;
    v14 = "ACMContextDelete";
    _os_log_impl(&dword_2409DC000, MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO, "%s: %s: called.\n", buf, 0x16u);
    v4 = _logLevel;
  }
  if (a1 && v4 <= 0x28 && os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO))
  {
    v5 = a1[4];
    v6 = "deleted";
    *(_DWORD *)buf = 136315906;
    v12 = "ACMLib";
    v14 = "ACMContextDelete";
    v13 = 2080;
    if (a2)
      v6 = "destroyed";
    v15 = 1024;
    LODWORD(v16[0]) = v5;
    WORD2(v16[0]) = 2080;
    *(_QWORD *)((char *)v16 + 6) = v6;
    _os_log_impl(&dword_2409DC000, MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO, "%s: %s: CS[%u] %s.\n", buf, 0x26u);
  }
  v10 = a1;
  v7 = LibCall_ACMContextDelete((void (*)(uint64_t, uint64_t, _QWORD, void *, uint64_t, _QWORD, _QWORD))ioKitTransport, (uint64_t)&v10, a1, a2);
  if ((_DWORD)v7)
    v8 = 70;
  else
    v8 = 10;
  if (v8 >= _logLevel && os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315650;
    v12 = "ACMLib";
    v13 = 2080;
    v14 = "ACMContextDelete";
    v15 = 2048;
    v16[0] = (int)v7;
    _os_log_impl(&dword_2409DC000, MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO, "%s: %s: returning, err = %ld.\n", buf, 0x20u);
  }
  return v7;
}

void ACMContextGetExternalForm(const void *a1, uint64_t a2)
{
  int v4;
  const char *v5;
  __int16 v6;
  const char *v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  if (_logLevel <= 0xAu && os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO))
  {
    v4 = 136315394;
    v5 = "ACMLib";
    v6 = 2080;
    v7 = "ACMContextGetExternalForm";
    _os_log_impl(&dword_2409DC000, MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO, "%s: %s: called.\n", (uint8_t *)&v4, 0x16u);
  }
  if (!a1 || !a2 || init() || performCommand((uint64_t)a1, 19, 0, a1, 0x10uLL, 0, 0))
    (*(void (**)(uint64_t, _QWORD, _QWORD))(a2 + 16))(a2, 0, 0);
  else
    (*(void (**)(uint64_t, const void *, uint64_t))(a2 + 16))(a2, a1, 16);
  if (_logLevel <= 0xAu && os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO))
  {
    v4 = 136315394;
    v5 = "ACMLib";
    v6 = 2080;
    v7 = "ACMContextGetExternalForm";
    _os_log_impl(&dword_2409DC000, MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO, "%s: %s: returning.\n", (uint8_t *)&v4, 0x16u);
  }
}

uint64_t init()
{
  uint64_t v0;
  mach_port_t v1;
  const __CFDictionary *v2;
  io_service_t MatchingService;
  io_object_t v4;
  unsigned int v5;
  int v7;
  const char *v8;
  __int16 v9;
  const char *v10;
  __int16 v11;
  uint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  if (_logLevel <= 0xAu && os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO))
  {
    v7 = 136315394;
    v8 = "ACMLib";
    v9 = 2080;
    v10 = "init";
    _os_log_impl(&dword_2409DC000, MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO, "%s: %s: called.\n", (uint8_t *)&v7, 0x16u);
  }
  if ((_initialized & 1) != 0)
  {
    v0 = 0;
  }
  else
  {
    v1 = *MEMORY[0x24BDD8B20];
    v2 = IOServiceMatching("AppleCredentialManager");
    MatchingService = IOServiceGetMatchingService(v1, v2);
    if (!MatchingService)
    {
      v5 = 70;
      v0 = 4294967291;
      goto LABEL_10;
    }
    v4 = MatchingService;
    v0 = IOServiceOpen(MatchingService, *MEMORY[0x24BDAEC58], 0, (io_connect_t *)&_connect);
    if ((_DWORD)v0)
    {
      v5 = 70;
      goto LABEL_10;
    }
    IOObjectRelease(v4);
    _initialized = 1;
  }
  v5 = 10;
LABEL_10:
  if (v5 >= _logLevel && os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO))
  {
    v7 = 136315650;
    v8 = "ACMLib";
    v9 = 2080;
    v10 = "init";
    v11 = 2048;
    v12 = (int)v0;
    _os_log_impl(&dword_2409DC000, MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO, "%s: %s: returning, err = %ld.\n", (uint8_t *)&v7, 0x20u);
  }
  return v0;
}

uint64_t performCommand(uint64_t a1, int a2, char a3, const void *a4, size_t a5, void *a6, size_t *a7)
{
  _BYTE *v14;
  void *v15;
  size_t v16;
  uint64_t v17;
  uint64_t v18;
  rsize_t v19;
  unsigned int v20;
  size_t v22;
  size_t inputStructCnt;
  uint8_t buf[4];
  const char *v25;
  __int16 v26;
  const char *v27;
  __int16 v28;
  _BYTE v29[10];
  __int16 v30;
  int v31;
  __int16 v32;
  int v33;
  uint64_t v34;

  v34 = *MEMORY[0x24BDAC8D0];
  if (_logLevel <= 0xAu && os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315394;
    v25 = "ACMLib";
    v26 = 2080;
    v27 = "performCommand";
    _os_log_impl(&dword_2409DC000, MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO, "%s: %s: called.\n", buf, 0x16u);
  }
  inputStructCnt = 0;
  v14 = LibCall_BuildCommand(a2, 0, a3, a4, a5, &inputStructCnt);
  if (v14)
  {
    v15 = v14;
    if (!a6 && a7)
    {
      v18 = 4294967293;
    }
    else
    {
      if (a7)
        v16 = *a7;
      else
        v16 = 0;
      v22 = v16;
      v17 = IOConnectCallStructMethod(_connect, 0, v14, inputStructCnt, a6, &v22);
      v18 = v17;
      if (a1)
        LODWORD(a1) = *(_DWORD *)(a1 + 16);
      if ((_DWORD)v17)
      {
        if (_logLevel <= 0x46u && os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 136316418;
          v25 = "ACMLib";
          v26 = 2080;
          v27 = "performCommand";
          v28 = 1024;
          *(_DWORD *)v29 = a2;
          *(_WORD *)&v29[4] = 1024;
          *(_DWORD *)&v29[6] = a1;
          v30 = 1024;
          v31 = v18;
          v32 = 1024;
          v33 = v18;
          _os_log_impl(&dword_2409DC000, MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO, "%s: %s: cmd(%u) on CS[%u] -> err 0x%x (%d).\n", buf, 0x2Eu);
        }
      }
      else
      {
        if (_logLevel <= 0x28u && os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 136315906;
          v25 = "ACMLib";
          v26 = 2080;
          v27 = "performCommand";
          v28 = 1024;
          *(_DWORD *)v29 = a2;
          *(_WORD *)&v29[4] = 1024;
          *(_DWORD *)&v29[6] = a1;
          _os_log_impl(&dword_2409DC000, MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO, "%s: %s: cmd(%u) on CS[%u] -> ok.\n", buf, 0x22u);
        }
        v18 = 0;
        if (a7)
          *a7 = v22;
      }
    }
    v19 = inputStructCnt;
    acm_mem_free_info("<data>", v15, inputStructCnt, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/ACMLib/ACMLib.c", 134, "performCommand");
    acm_mem_free_data(v15, v19);
    if ((_DWORD)v18)
      v20 = 70;
    else
      v20 = 10;
  }
  else
  {
    v20 = 70;
    v18 = 4294967291;
  }
  if (v20 >= _logLevel && os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315650;
    v25 = "ACMLib";
    v26 = 2080;
    v27 = "performCommand";
    v28 = 2048;
    *(_QWORD *)v29 = (int)v18;
    _os_log_impl(&dword_2409DC000, MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO, "%s: %s: returning, err = %ld.\n", buf, 0x20u);
  }
  return v18;
}

uint64_t ACMContextAddCredential(_OWORD *a1, unsigned int *a2)
{
  int v5;
  const char *v6;
  __int16 v7;
  const char *v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  if (_logLevel <= 0xAu && os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO))
  {
    v5 = 136315394;
    v6 = "ACMLib";
    v7 = 2080;
    v8 = "ACMContextAddCredential";
    _os_log_impl(&dword_2409DC000, MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO, "%s: %s: called.\n", (uint8_t *)&v5, 0x16u);
  }
  return ACMContextAddCredentialWithScope(a1, a2, 1);
}

uint64_t ACMContextAddCredentialWithScope(_OWORD *a1, unsigned int *a2, int a3)
{
  BOOL v6;
  char v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t SerializedAddCredentialSize;
  size_t v11;
  void *v12;
  uint64_t v13;
  rsize_t v14;
  size_t size;
  uint8_t buf[4];
  const char *v18;
  __int16 v19;
  const char *v20;
  __int16 v21;
  uint64_t v22;
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  if (_logLevel <= 0xAu && os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315394;
    v18 = "ACMLib";
    v19 = 2080;
    v20 = "ACMContextAddCredentialWithScope";
    _os_log_impl(&dword_2409DC000, MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO, "%s: %s: called.\n", buf, 0x16u);
  }
  size = 0;
  if (a1)
    v6 = 1;
  else
    v6 = a3 == 2;
  v7 = !v6;
  v8 = 70;
  v9 = 4294967293;
  if (a2 && (v7 & 1) == 0)
  {
    SerializedAddCredentialSize = init();
    if ((_DWORD)SerializedAddCredentialSize
      || (SerializedAddCredentialSize = GetSerializedAddCredentialSize((uint64_t)a1, a2, a3, &size),
          (_DWORD)SerializedAddCredentialSize))
    {
      v9 = SerializedAddCredentialSize;
      v8 = 70;
    }
    else
    {
      v11 = size;
      v12 = acm_mem_alloc_data(size);
      acm_mem_alloc_info("<data>", v12, v11, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/ACMLib/ACMLib.c", 325, "ACMContextAddCredentialWithScope");
      if (v12)
      {
        v13 = SerializeAddCredential(a1, a2, a3, (uint64_t)v12, &size);
        if (!(_DWORD)v13)
          v13 = performCommand((uint64_t)a1, 5, 0, v12, size, 0, 0);
        v9 = v13;
        v14 = size;
        acm_mem_free_info("<data>", v12, size, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/ACMLib/ACMLib.c", 338, "ACMContextAddCredentialWithScope");
        acm_mem_free_data(v12, v14);
        if ((_DWORD)v9)
          v8 = 70;
        else
          v8 = 10;
      }
      else
      {
        v8 = 70;
        v9 = 4294967292;
      }
    }
  }
  if (v8 >= _logLevel && os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315650;
    v18 = "ACMLib";
    v19 = 2080;
    v20 = "ACMContextAddCredentialWithScope";
    v21 = 2048;
    v22 = (int)v9;
    _os_log_impl(&dword_2409DC000, MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO, "%s: %s: returning, err = %ld.\n", buf, 0x20u);
  }
  return v9;
}

uint64_t ACMContextRemoveCredentialsByType(_OWORD *a1, int a2)
{
  int v5;
  const char *v6;
  __int16 v7;
  const char *v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  if (_logLevel <= 0xAu && os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO))
  {
    v5 = 136315394;
    v6 = "ACMLib";
    v7 = 2080;
    v8 = "ACMContextRemoveCredentialsByType";
    _os_log_impl(&dword_2409DC000, MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO, "%s: %s: called.\n", (uint8_t *)&v5, 0x16u);
  }
  return ACMContextRemoveCredentialsByTypeAndScope(a1, a2, 1);
}

uint64_t ACMContextRemoveCredentialsByTypeAndScope(_OWORD *a1, int a2, int a3)
{
  uint64_t v6;
  _OWORD *v7;
  uint64_t v8;
  unsigned int v9;
  int v11;
  const char *v12;
  __int16 v13;
  const char *v14;
  __int16 v15;
  uint64_t v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  if (_logLevel <= 0xAu && os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO))
  {
    v11 = 136315394;
    v12 = "ACMLib";
    v13 = 2080;
    v14 = "ACMContextRemoveCredentialsByTypeAndScope";
    _os_log_impl(&dword_2409DC000, MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO, "%s: %s: called.\n", (uint8_t *)&v11, 0x16u);
  }
  if (a1 || a3 == 2)
  {
    v6 = init();
    if ((_DWORD)v6)
    {
      v8 = v6;
      v9 = 70;
    }
    else
    {
      v7 = acm_mem_alloc_data(0x18uLL);
      acm_mem_alloc_info("<data>", v7, 24, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/ACMLib/ACMLib.c", 386, "ACMContextRemoveCredentialsByTypeAndScope");
      if (v7)
      {
        if (a1)
        {
          *v7 = *a1;
        }
        else
        {
          *(_QWORD *)v7 = 0;
          *((_QWORD *)v7 + 1) = 0;
        }
        *((_DWORD *)v7 + 4) = a2;
        *((_DWORD *)v7 + 5) = a3;
        v8 = performCommand((uint64_t)a1, 9, 0, v7, 0x18uLL, 0, 0);
        acm_mem_free_info("<data>", v7, 0x18uLL, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/ACMLib/ACMLib.c", 407, "ACMContextRemoveCredentialsByTypeAndScope");
        acm_mem_free_data(v7, 0x18uLL);
        if ((_DWORD)v8)
          v9 = 70;
        else
          v9 = 10;
      }
      else
      {
        v9 = 70;
        v8 = 4294967292;
      }
    }
  }
  else
  {
    v9 = 70;
    v8 = 4294967293;
  }
  if (v9 >= _logLevel && os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO))
  {
    v11 = 136315650;
    v12 = "ACMLib";
    v13 = 2080;
    v14 = "ACMContextRemoveCredentialsByTypeAndScope";
    v15 = 2048;
    v16 = (int)v8;
    _os_log_impl(&dword_2409DC000, MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO, "%s: %s: returning, err = %ld.\n", (uint8_t *)&v11, 0x20u);
  }
  return v8;
}

uint64_t ACMContextRemoveCredentialsByValue(uint64_t a1, _DWORD *a2)
{
  int v5;
  const char *v6;
  __int16 v7;
  const char *v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  if (_logLevel <= 0xAu && os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO))
  {
    v5 = 136315394;
    v6 = "ACMLib";
    v7 = 2080;
    v8 = "ACMContextRemoveCredentialsByValue";
    _os_log_impl(&dword_2409DC000, MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO, "%s: %s: called.\n", (uint8_t *)&v5, 0x16u);
  }
  return ACMContextRemoveCredentialsByValueAndScope(a1, a2, 1);
}

uint64_t ACMContextRemoveCredentialsByValueAndScope(uint64_t a1, _DWORD *a2, uint64_t a3)
{
  BOOL v6;
  char v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  size_t v11;
  void *v12;
  uint64_t v13;
  rsize_t v14;
  size_t size;
  uint8_t buf[4];
  const char *v18;
  __int16 v19;
  const char *v20;
  __int16 v21;
  uint64_t v22;
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  if (_logLevel <= 0xAu && os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315394;
    v18 = "ACMLib";
    v19 = 2080;
    v20 = "ACMContextRemoveCredentialsByValueAndScope";
    _os_log_impl(&dword_2409DC000, MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO, "%s: %s: called.\n", buf, 0x16u);
  }
  size = 0;
  if (a1)
    v6 = 1;
  else
    v6 = (_DWORD)a3 == 2;
  v7 = !v6;
  v8 = 70;
  v9 = 4294967293;
  if (a2 && (v7 & 1) == 0)
  {
    v10 = init();
    if ((_DWORD)v10 || (v10 = GetSerializedRemoveCredentialSize(a1, a2, a3, &size), (_DWORD)v10))
    {
      v9 = v10;
      v8 = 70;
    }
    else
    {
      v11 = size;
      v12 = acm_mem_alloc_data(size);
      acm_mem_alloc_info("<data>", v12, v11, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/ACMLib/ACMLib.c", 457, "ACMContextRemoveCredentialsByValueAndScope");
      if (v12)
      {
        v13 = SerializeRemoveCredential(a1, a2, a3, v12, &size);
        if (!(_DWORD)v13)
          v13 = performCommand(a1, 6, 0, v12, size, 0, 0);
        v9 = v13;
        v14 = size;
        acm_mem_free_info("<data>", v12, size, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/ACMLib/ACMLib.c", 470, "ACMContextRemoveCredentialsByValueAndScope");
        acm_mem_free_data(v12, v14);
        if ((_DWORD)v9)
          v8 = 70;
        else
          v8 = 10;
      }
      else
      {
        v8 = 70;
        v9 = 4294967292;
      }
    }
  }
  if (v8 >= _logLevel && os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315650;
    v18 = "ACMLib";
    v19 = 2080;
    v20 = "ACMContextRemoveCredentialsByValueAndScope";
    v21 = 2048;
    v22 = (int)v9;
    _os_log_impl(&dword_2409DC000, MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO, "%s: %s: returning, err = %ld.\n", buf, 0x20u);
  }
  return v9;
}

uint64_t ACMContextContainsCredentialType(_OWORD *a1, int a2)
{
  int v5;
  const char *v6;
  __int16 v7;
  const char *v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  if (_logLevel <= 0xAu && os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO))
  {
    v5 = 136315394;
    v6 = "ACMLib";
    v7 = 2080;
    v8 = "ACMContextContainsCredentialType";
    _os_log_impl(&dword_2409DC000, MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO, "%s: %s: called.\n", (uint8_t *)&v5, 0x16u);
  }
  return ACMContextContainsCredentialTypeEx(a1, a2, 0);
}

uint64_t ACMContextContainsCredentialTypeEx(_OWORD *a1, int a2, int a3)
{
  uint64_t v6;
  _DWORD *v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  size_t v13;
  int v14;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  const char *v18;
  __int16 v19;
  uint64_t v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  if (_logLevel <= 0xAu && os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315394;
    v16 = "ACMLib";
    v17 = 2080;
    v18 = "ACMContextContainsCredentialTypeEx";
    _os_log_impl(&dword_2409DC000, MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO, "%s: %s: called.\n", buf, 0x16u);
  }
  v14 = 0;
  v13 = 4;
  if (a1)
  {
    v6 = init();
    if ((_DWORD)v6)
    {
      v11 = v6;
      v8 = 70;
    }
    else
    {
      v7 = acm_mem_alloc_data(0x18uLL);
      acm_mem_alloc_info("<data>", v7, 24, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/ACMLib/ACMLib.c", 576, "ACMContextContainsCredentialTypeEx");
      v8 = 70;
      if (v7)
      {
        *(_OWORD *)v7 = *a1;
        v7[4] = a2;
        v7[5] = a3;
        v9 = performCommand((uint64_t)a1, 4, 0, v7, 0x18uLL, &v14, &v13);
        if (v14)
          v10 = 0;
        else
          v10 = -7;
        if (v9)
          v11 = v9;
        else
          v11 = v10;
        acm_mem_free_info("<data>", v7, 0x18uLL, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/ACMLib/ACMLib.c", 590, "ACMContextContainsCredentialTypeEx");
        acm_mem_free_data(v7, 0x18uLL);
        if ((_DWORD)v11)
          v8 = 70;
        else
          v8 = 10;
      }
      else
      {
        v11 = 4294967292;
      }
    }
  }
  else
  {
    v8 = 70;
    v11 = 4294967293;
  }
  if (v8 >= _logLevel && os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315650;
    v16 = "ACMLib";
    v17 = 2080;
    v18 = "ACMContextContainsCredentialTypeEx";
    v19 = 2048;
    v20 = (int)v11;
    _os_log_impl(&dword_2409DC000, MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO, "%s: %s: returning, err = %ld.\n", buf, 0x20u);
  }
  return v11;
}

uint64_t ACMGlobalContextAddCredential(unsigned int *a1)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int v4;
  _DWORD *v6;
  uint8_t buf[4];
  const char *v8;
  __int16 v9;
  const char *v10;
  __int16 v11;
  uint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  if (_logLevel <= 0xAu && os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315394;
    v8 = "ACMLib";
    v9 = 2080;
    v10 = "ACMGlobalContextAddCredential";
    _os_log_impl(&dword_2409DC000, MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO, "%s: %s: called.\n", buf, 0x16u);
  }
  v6 = 0;
  if (a1)
  {
    v2 = ACMContextCreate((uint64_t *)&v6);
    if (!(_DWORD)v2)
      v2 = ACMContextAddCredentialWithScope(v6, a1, 2);
    v3 = v2;
    if (v6)
      ACMContextDelete(v6, 1);
    if ((_DWORD)v3)
      v4 = 70;
    else
      v4 = 10;
  }
  else
  {
    v4 = 70;
    v3 = 4294967293;
  }
  if (v4 >= _logLevel && os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315650;
    v8 = "ACMLib";
    v9 = 2080;
    v10 = "ACMGlobalContextAddCredential";
    v11 = 2048;
    v12 = (int)v3;
    _os_log_impl(&dword_2409DC000, MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO, "%s: %s: returning, err = %ld.\n", buf, 0x20u);
  }
  return v3;
}

uint64_t ACMGlobalContextRemoveCredentialsByType(int a1)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int v4;
  _DWORD *v6;
  uint8_t buf[4];
  const char *v8;
  __int16 v9;
  const char *v10;
  __int16 v11;
  uint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  if (_logLevel <= 0xAu && os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315394;
    v8 = "ACMLib";
    v9 = 2080;
    v10 = "ACMGlobalContextRemoveCredentialsByType";
    _os_log_impl(&dword_2409DC000, MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO, "%s: %s: called.\n", buf, 0x16u);
  }
  v6 = 0;
  v2 = ACMContextCreate((uint64_t *)&v6);
  if (!(_DWORD)v2)
    v2 = ACMContextRemoveCredentialsByTypeAndScope(v6, a1, 2);
  v3 = v2;
  if (v6)
    ACMContextDelete(v6, 1);
  if ((_DWORD)v3)
    v4 = 70;
  else
    v4 = 10;
  if (v4 >= _logLevel && os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315650;
    v8 = "ACMLib";
    v9 = 2080;
    v10 = "ACMGlobalContextRemoveCredentialsByType";
    v11 = 2048;
    v12 = (int)v3;
    _os_log_impl(&dword_2409DC000, MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO, "%s: %s: returning, err = %ld.\n", buf, 0x20u);
  }
  return v3;
}

uint64_t ACMContextRemovePassphraseCredentialsByPurposeAndScope(_OWORD *a1, int a2, int a3)
{
  uint64_t v6;
  _OWORD *v7;
  uint64_t v8;
  unsigned int v9;
  int v11;
  const char *v12;
  __int16 v13;
  const char *v14;
  __int16 v15;
  uint64_t v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  if (_logLevel <= 0xAu && os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO))
  {
    v11 = 136315394;
    v12 = "ACMLib";
    v13 = 2080;
    v14 = "ACMContextRemovePassphraseCredentialsByPurposeAndScope";
    _os_log_impl(&dword_2409DC000, MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO, "%s: %s: called.\n", (uint8_t *)&v11, 0x16u);
  }
  if (a1 || a3 == 2)
  {
    v6 = init();
    if ((_DWORD)v6)
    {
      v8 = v6;
      v9 = 70;
    }
    else
    {
      v7 = acm_mem_alloc_data(0x18uLL);
      acm_mem_alloc_info("<data>", v7, 24, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/ACMLib/ACMLib.c", 492, "ACMContextRemovePassphraseCredentialsByPurposeAndScope");
      if (v7)
      {
        if (a1)
        {
          *v7 = *a1;
        }
        else
        {
          *(_QWORD *)v7 = 0;
          *((_QWORD *)v7 + 1) = 0;
        }
        *((_DWORD *)v7 + 4) = a2;
        *((_DWORD *)v7 + 5) = a3;
        v8 = performCommand((uint64_t)a1, 16, 0, v7, 0x18uLL, 0, 0);
        acm_mem_free_info("<data>", v7, 0x18uLL, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/ACMLib/ACMLib.c", 513, "ACMContextRemovePassphraseCredentialsByPurposeAndScope");
        acm_mem_free_data(v7, 0x18uLL);
        if ((_DWORD)v8)
          v9 = 70;
        else
          v9 = 10;
      }
      else
      {
        v9 = 70;
        v8 = 4294967292;
      }
    }
  }
  else
  {
    v9 = 70;
    v8 = 4294967293;
  }
  if (v9 >= _logLevel && os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO))
  {
    v11 = 136315650;
    v12 = "ACMLib";
    v13 = 2080;
    v14 = "ACMContextRemovePassphraseCredentialsByPurposeAndScope";
    v15 = 2048;
    v16 = (int)v8;
    _os_log_impl(&dword_2409DC000, MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO, "%s: %s: returning, err = %ld.\n", (uint8_t *)&v11, 0x20u);
  }
  return v8;
}

uint64_t ACMContextReplacePassphraseCredentialsWithScope(uint64_t a1, _DWORD *a2, uint64_t a3)
{
  BOOL v6;
  char v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t SerializedReplacePassphraseCredentialSize;
  size_t v11;
  void *v12;
  uint64_t v13;
  rsize_t v14;
  size_t size;
  uint8_t buf[4];
  const char *v18;
  __int16 v19;
  const char *v20;
  __int16 v21;
  uint64_t v22;
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  if (_logLevel <= 0xAu && os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315394;
    v18 = "ACMLib";
    v19 = 2080;
    v20 = "ACMContextReplacePassphraseCredentialsWithScope";
    _os_log_impl(&dword_2409DC000, MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO, "%s: %s: called.\n", buf, 0x16u);
  }
  size = 0;
  if (a1)
    v6 = 1;
  else
    v6 = (_DWORD)a3 == 2;
  v7 = !v6;
  v8 = 70;
  v9 = 4294967293;
  if (a2 && (v7 & 1) == 0)
  {
    SerializedReplacePassphraseCredentialSize = init();
    if ((_DWORD)SerializedReplacePassphraseCredentialSize
      || (SerializedReplacePassphraseCredentialSize = GetSerializedReplacePassphraseCredentialSize(a1, a2, a3, &size),
          (_DWORD)SerializedReplacePassphraseCredentialSize))
    {
      v9 = SerializedReplacePassphraseCredentialSize;
      v8 = 70;
    }
    else
    {
      v11 = size;
      v12 = acm_mem_alloc_data(size);
      acm_mem_alloc_info("<data>", v12, v11, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/ACMLib/ACMLib.c", 538, "ACMContextReplacePassphraseCredentialsWithScope");
      if (v12)
      {
        v13 = SerializeReplacePassphraseCredential(a1, a2, a3, v12, &size);
        if (!(_DWORD)v13)
          v13 = performCommand(a1, 15, 0, v12, size, 0, 0);
        v9 = v13;
        bzero(v12, size);
        v14 = size;
        acm_mem_free_info("<data>", v12, size, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/ACMLib/ACMLib.c", 552, "ACMContextReplacePassphraseCredentialsWithScope");
        acm_mem_free_data(v12, v14);
        if ((_DWORD)v9)
          v8 = 70;
        else
          v8 = 10;
      }
      else
      {
        v8 = 70;
        v9 = 4294967292;
      }
    }
  }
  if (v8 >= _logLevel && os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315650;
    v18 = "ACMLib";
    v19 = 2080;
    v20 = "ACMContextReplacePassphraseCredentialsWithScope";
    v21 = 2048;
    v22 = (int)v9;
    _os_log_impl(&dword_2409DC000, MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO, "%s: %s: returning, err = %ld.\n", buf, 0x20u);
  }
  return v9;
}

uint64_t ACMContextContainsPassphraseCredentialWithPurpose(_OWORD *a1, int a2, int a3)
{
  uint64_t v6;
  _DWORD *v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  size_t v13;
  int v14;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  const char *v18;
  __int16 v19;
  uint64_t v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  if (_logLevel <= 0xAu && os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315394;
    v16 = "ACMLib";
    v17 = 2080;
    v18 = "ACMContextContainsPassphraseCredentialWithPurpose";
    _os_log_impl(&dword_2409DC000, MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO, "%s: %s: called.\n", buf, 0x16u);
  }
  v14 = 0;
  v13 = 4;
  if (a1)
  {
    v6 = init();
    if ((_DWORD)v6)
    {
      v11 = v6;
      v8 = 70;
    }
    else
    {
      v7 = acm_mem_alloc_data(0x18uLL);
      acm_mem_alloc_info("<data>", v7, 24, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/ACMLib/ACMLib.c", 614, "ACMContextContainsPassphraseCredentialWithPurpose");
      v8 = 70;
      if (v7)
      {
        *(_OWORD *)v7 = *a1;
        v7[4] = a2;
        v7[5] = a3;
        v9 = performCommand((uint64_t)a1, 13, 0, v7, 0x18uLL, &v14, &v13);
        if (v14)
          v10 = 0;
        else
          v10 = -7;
        if (v9)
          v11 = v9;
        else
          v11 = v10;
        acm_mem_free_info("<data>", v7, 0x18uLL, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/ACMLib/ACMLib.c", 628, "ACMContextContainsPassphraseCredentialWithPurpose");
        acm_mem_free_data(v7, 0x18uLL);
        if ((_DWORD)v11)
          v8 = 70;
        else
          v8 = 10;
      }
      else
      {
        v11 = 4294967292;
      }
    }
  }
  else
  {
    v8 = 70;
    v11 = 4294967293;
  }
  if (v8 >= _logLevel && os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315650;
    v16 = "ACMLib";
    v17 = 2080;
    v18 = "ACMContextContainsPassphraseCredentialWithPurpose";
    v19 = 2048;
    v20 = (int)v11;
    _os_log_impl(&dword_2409DC000, MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO, "%s: %s: returning, err = %ld.\n", buf, 0x20u);
  }
  return v11;
}

uint64_t ACMContextVerifyPolicy(_OWORD *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  unsigned int v7;
  _OWORD *v9;
  uint8_t buf[4];
  const char *v11;
  __int16 v12;
  const char *v13;
  __int16 v14;
  uint64_t v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  if (_logLevel <= 0xAu && os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315394;
    v11 = "ACMLib";
    v12 = 2080;
    v13 = "ACMContextVerifyPolicy";
    _os_log_impl(&dword_2409DC000, MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO, "%s: %s: called.\n", buf, 0x16u);
  }
  v9 = a1;
  v6 = LibCall_ACMContextVerifyPolicy_Block((uint64_t (*)(uint64_t, uint64_t, _QWORD, _OWORD *, size_t, unsigned int *, unint64_t *))ioKitTransport, (uint64_t)&v9, a1, a2, a3);
  if ((_DWORD)v6)
    v7 = 70;
  else
    v7 = 10;
  if (v7 >= _logLevel && os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315650;
    v11 = "ACMLib";
    v12 = 2080;
    v13 = "ACMContextVerifyPolicy";
    v14 = 2048;
    v15 = (int)v6;
    _os_log_impl(&dword_2409DC000, MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO, "%s: %s: returning, err = %ld.\n", buf, 0x20u);
  }
  return v6;
}

uint64_t ACMContextVerifyPolicyWithPreflight(_OWORD *a1, char *__s1, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  unsigned int v9;
  _OWORD *v11;
  uint8_t buf[4];
  const char *v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  uint64_t v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  if (_logLevel <= 0xAu && os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315394;
    v13 = "ACMLib";
    v14 = 2080;
    v15 = "ACMContextVerifyPolicyWithPreflight";
    _os_log_impl(&dword_2409DC000, MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO, "%s: %s: called.\n", buf, 0x16u);
  }
  v11 = a1;
  v8 = LibCall_ACMContextVerifyPolicyWithPreflight_Block((uint64_t (*)(uint64_t, uint64_t, _QWORD, _OWORD *, size_t, unsigned int *, unint64_t *))ioKitTransport, (uint64_t)&v11, a1, __s1, a3, a4);
  if ((_DWORD)v8)
    v9 = 70;
  else
    v9 = 10;
  if (v9 >= _logLevel && os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315650;
    v13 = "ACMLib";
    v14 = 2080;
    v15 = "ACMContextVerifyPolicyWithPreflight";
    v16 = 2048;
    v17 = (int)v8;
    _os_log_impl(&dword_2409DC000, MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO, "%s: %s: returning, err = %ld.\n", buf, 0x20u);
  }
  return v8;
}

void ACMContextVerifyPolicyEx(_OWORD *a1, char *__s1, uint64_t a3, _DWORD *a4, unsigned int a5, uint64_t a6, uint64_t a7)
{
  _OWORD *v14;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  const char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  if (_logLevel <= 0xAu && os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315394;
    v16 = "ACMLib";
    v17 = 2080;
    v18 = "ACMContextVerifyPolicyEx";
    _os_log_impl(&dword_2409DC000, MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO, "%s: %s: called.\n", buf, 0x16u);
  }
  v14 = a1;
  LibCall_ACMContextVerifyPolicyEx_Block((uint64_t (*)(uint64_t, uint64_t, _QWORD, _OWORD *, size_t, unsigned int *, unint64_t *))ioKitTransport, (uint64_t)&v14, a1, __s1, a3, a4, a5, a6, a7);
  if (_logLevel <= 0xAu && os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315394;
    v16 = "ACMLib";
    v17 = 2080;
    v18 = "ACMContextVerifyPolicyEx";
    _os_log_impl(&dword_2409DC000, MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO, "%s: %s: returning.\n", buf, 0x16u);
  }
}

void ACMGlobalContextVerifyPolicy(char *a1, uint64_t a2, _DWORD *a3, unsigned int a4, uint64_t a5)
{
  uint64_t v10;
  int v11[2];
  uint8_t buf[4];
  const char *v13;
  __int16 v14;
  const char *v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  if (_logLevel <= 0xAu && os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315394;
    v13 = "ACMLib";
    v14 = 2080;
    v15 = "ACMGlobalContextVerifyPolicy";
    _os_log_impl(&dword_2409DC000, MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO, "%s: %s: called.\n", buf, 0x16u);
  }
  *(_QWORD *)v11 = 0;
  v10 = ACMContextCreate((uint64_t *)v11);
  if ((_DWORD)v10)
  {
    if (a5)
      (*(void (**)(uint64_t, uint64_t, _QWORD, _QWORD))(a5 + 16))(a5, v10, 0, 0);
  }
  else
  {
    ACMContextVerifyPolicyEx(*(_OWORD **)v11, a1, a2, a3, a4, 0xFFFFFFFFLL, a5);
  }
  if (*(_QWORD *)v11)
    ACMContextDelete(*(_DWORD **)v11, 1);
  if (_logLevel <= 0xAu && os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315394;
    v13 = "ACMLib";
    v14 = 2080;
    v15 = "ACMGlobalContextVerifyPolicy";
    _os_log_impl(&dword_2409DC000, MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO, "%s: %s: returning.\n", buf, 0x16u);
  }
}

uint64_t ACMContextVerifyAclConstraint(_OWORD *a1, const void *a2, uint64_t a3, unsigned __int8 a4, _DWORD *a5, unsigned int a6, unsigned int a7, uint64_t a8)
{
  _OWORD *v9;

  v9 = a1;
  return LibCall_ACMContextVerifyAclConstraint((uint64_t)ioKitTransport, (uint64_t)&v9, a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t ACMContextVerifyAclConstraintForOperation(_OWORD *a1, const void *a2, uint64_t a3, const void *a4, unsigned int a5, unsigned __int8 a6, _DWORD *a7, unsigned int a8, unsigned int a9, uint64_t a10)
{
  _OWORD *v11;

  v11 = a1;
  return LibCall_ACMContextVerifyAclConstraintForOperation((uint64_t)ioKitTransport, (uint64_t)&v11, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10);
}

uint64_t ACMContextGetTrackingNumber(uint64_t result)
{
  if (result)
    return *(unsigned int *)(result + 16);
  return result;
}

uint64_t ACMParseAclAndCopyConstraintCharacteristics(const void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t SerializedProcessAclSize;
  size_t v8;
  void *v9;
  uint64_t v10;
  size_t v11;
  void *v12;
  uint64_t v13;
  void *v14;
  rsize_t v15;
  rsize_t v16;
  unsigned int v17;
  size_t __n;
  size_t size;
  uint8_t buf[4];
  const char *v22;
  __int16 v23;
  const char *v24;
  __int16 v25;
  uint64_t v26;
  uint64_t v27;

  v27 = *MEMORY[0x24BDAC8D0];
  __n = 4096;
  size = 0;
  if (_logLevel <= 0xAu && os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315394;
    v22 = "ACMLib";
    v23 = 2080;
    v24 = "ACMParseAclAndCopyConstraintCharacteristics";
    _os_log_impl(&dword_2409DC000, MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO, "%s: %s: called.\n", buf, 0x16u);
  }
  v6 = 4294967293;
  if (!a1 || !a2 || !a3)
    goto LABEL_28;
  SerializedProcessAclSize = init();
  if ((_DWORD)SerializedProcessAclSize
    || (SerializedProcessAclSize = GetSerializedProcessAclSize(0, (uint64_t)a1, a2, 0, 0, 0, 0, 0, &size),
        (_DWORD)SerializedProcessAclSize))
  {
    v6 = SerializedProcessAclSize;
LABEL_28:
    (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t))(a3 + 16))(a3, v6, 0, 4096);
    goto LABEL_19;
  }
  v8 = size;
  v9 = acm_mem_alloc_data(size);
  acm_mem_alloc_info("<data>", v9, v8, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/ACMLib/ACMLib.c", 744, "ACMParseAclAndCopyConstraintCharacteristics");
  if (!v9)
  {
    v6 = 4294967292;
    goto LABEL_28;
  }
  v10 = SerializeProcessAcl(0, a1, a2, 0, 0, 0, 0, 0, (uint64_t)v9, &size);
  if ((_DWORD)v10)
  {
    v6 = v10;
    v12 = 0;
    v14 = 0;
    v11 = 4096;
    goto LABEL_15;
  }
  v11 = 4096;
  v12 = acm_mem_alloc_data(0x1000uLL);
  acm_mem_alloc_info("<data>", v12, 4096, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/ACMLib/ACMLib.c", 750, "ACMParseAclAndCopyConstraintCharacteristics");
  if (!v12)
  {
    v14 = 0;
LABEL_31:
    v6 = 4294967292;
    goto LABEL_15;
  }
  v13 = performCommand(0, 20, 0, v9, size, v12, &__n);
  v11 = __n;
  if ((_DWORD)v13)
  {
    v6 = v13;
    v14 = 0;
    goto LABEL_15;
  }
  v14 = acm_mem_alloc_data(__n);
  acm_mem_alloc_info("<data>", v14, v11, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/ACMLib/ACMLib.c", 756, "ACMParseAclAndCopyConstraintCharacteristics");
  v11 = __n;
  if (!v14)
    goto LABEL_31;
  memcpy(v14, v12, __n);
  v6 = 0;
  v11 = __n;
LABEL_15:
  (*(void (**)(uint64_t, uint64_t, void *, size_t))(a3 + 16))(a3, v6, v14, v11);
  v15 = size;
  acm_mem_free_info("<data>", v9, size, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/ACMLib/ACMLib.c", 767, "ACMParseAclAndCopyConstraintCharacteristics");
  acm_mem_free_data(v9, v15);
  if (v12)
  {
    acm_mem_free_info("<data>", v12, 0x1000uLL, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/ACMLib/ACMLib.c", 770, "ACMParseAclAndCopyConstraintCharacteristics");
    acm_mem_free_data(v12, 0x1000uLL);
  }
  if (v14)
  {
    v16 = __n;
    acm_mem_free_info("<data>", v14, __n, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/ACMLib/ACMLib.c", 773, "ACMParseAclAndCopyConstraintCharacteristics");
    acm_mem_free_data(v14, v16);
  }
LABEL_19:
  if ((_DWORD)v6)
    v17 = 70;
  else
    v17 = 10;
  if (v17 >= _logLevel && os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315650;
    v22 = "ACMLib";
    v23 = 2080;
    v24 = "ACMParseAclAndCopyConstraintCharacteristics";
    v25 = 2048;
    v26 = (int)v6;
    _os_log_impl(&dword_2409DC000, MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO, "%s: %s: returning, err = %ld.\n", buf, 0x20u);
  }
  return v6;
}

uint64_t ACMCredentialGetProperty(int *a1, int a2, uint64_t a3)
{
  unsigned int v6;
  uint64_t v7;
  uint64_t v9;
  int *v10;
  uint8_t buf[4];
  const char *v12;
  __int16 v13;
  const char *v14;
  __int16 v15;
  uint64_t v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  if (_logLevel <= 0xAu && os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315394;
    v12 = "ACMLib";
    v13 = 2080;
    v14 = "ACMCredentialGetProperty";
    _os_log_impl(&dword_2409DC000, MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO, "%s: %s: called.\n", buf, 0x16u);
  }
  v9 = 0;
  v10 = 0;
  v6 = 70;
  v7 = 4294967293;
  if (a1 && a3)
  {
    v7 = LibCall_ACMCredentialGetPropertyData(a1, a2, &v10, &v9);
    if ((_DWORD)v7)
    {
      v6 = 70;
    }
    else
    {
      (*(void (**)(uint64_t, int *, uint64_t))(a3 + 16))(a3, v10, v9);
      v6 = 10;
    }
  }
  if (v6 >= _logLevel && os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315650;
    v12 = "ACMLib";
    v13 = 2080;
    v14 = "ACMCredentialGetProperty";
    v15 = 2048;
    v16 = (int)v7;
    _os_log_impl(&dword_2409DC000, MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO, "%s: %s: returning, err = %ld.\n", buf, 0x20u);
  }
  return v7;
}

void ACMRequirementGetSubrequirements(int *a1, uint64_t a2)
{
  int v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  int v8;
  const char *v9;
  __int16 v10;
  const char *v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  if (_logLevel <= 0xAu && os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO))
  {
    v8 = 136315394;
    v9 = "ACMLib";
    v10 = 2080;
    v11 = "ACMRequirementGetSubrequirements";
    _os_log_impl(&dword_2409DC000, MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO, "%s: %s: called.\n", (uint8_t *)&v8, 0x16u);
  }
  if (a1 && a2)
  {
    v4 = *a1;
    if (*a1 == 4)
    {
      if (a1[4])
      {
        v6 = 0;
        do
          (*(void (**)(uint64_t, _QWORD))(a2 + 16))(a2, *(_QWORD *)&a1[2 * v6++ + 5]);
        while (v6 < a1[4]);
      }
    }
    else if (v4 == 5)
    {
      if (a1[4])
      {
        v7 = 0;
        do
          (*(void (**)(uint64_t, _QWORD))(a2 + 16))(a2, *(_QWORD *)&a1[2 * v7++ + 5]);
        while (v7 < a1[4]);
      }
    }
    else if (v4 == 7 && a1[5])
    {
      v5 = 0;
      do
        (*(void (**)(uint64_t, _QWORD))(a2 + 16))(a2, *(_QWORD *)&a1[2 * v5++ + 6]);
      while (v5 < a1[5]);
    }
  }
  if (_logLevel <= 0xAu && os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO))
  {
    v8 = 136315394;
    v9 = "ACMLib";
    v10 = 2080;
    v11 = "ACMRequirementGetSubrequirements";
    _os_log_impl(&dword_2409DC000, MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO, "%s: %s: returning.\n", (uint8_t *)&v8, 0x16u);
  }
}

uint64_t ACMRequirementGetProperty(int *a1, int a2, uint64_t a3)
{
  unsigned int v6;
  uint64_t v7;
  unint64_t v9;
  int *v10;
  uint8_t buf[4];
  const char *v12;
  __int16 v13;
  const char *v14;
  __int16 v15;
  uint64_t v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  if (_logLevel <= 0xAu && os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315394;
    v12 = "ACMLib";
    v13 = 2080;
    v14 = "ACMRequirementGetProperty";
    _os_log_impl(&dword_2409DC000, MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO, "%s: %s: called.\n", buf, 0x16u);
  }
  v9 = 0;
  v10 = 0;
  v6 = 70;
  v7 = 4294967293;
  if (a1 && a3)
  {
    v7 = LibCall_ACMRequirementGetPropertyData(a1, a2, &v10, &v9);
    if ((_DWORD)v7)
    {
      v6 = 70;
    }
    else
    {
      (*(void (**)(uint64_t, int *, unint64_t))(a3 + 16))(a3, v10, v9);
      v6 = 10;
    }
  }
  if (v6 >= _logLevel && os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315650;
    v12 = "ACMLib";
    v13 = 2080;
    v14 = "ACMRequirementGetProperty";
    v15 = 2048;
    v16 = (int)v7;
    _os_log_impl(&dword_2409DC000, MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO, "%s: %s: returning, err = %ld.\n", buf, 0x20u);
  }
  return v7;
}

uint64_t ACMRequirementGetProperties(int *a1, uint64_t a2)
{
  uint64_t v4;
  unsigned int v5;
  int v6;
  int v8;
  const char *v9;
  __int16 v10;
  const char *v11;
  __int16 v12;
  uint64_t v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  if (_logLevel <= 0xAu && os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO))
  {
    v8 = 136315394;
    v9 = "ACMLib";
    v10 = 2080;
    v11 = "ACMRequirementGetProperties";
    _os_log_impl(&dword_2409DC000, MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO, "%s: %s: called.\n", (uint8_t *)&v8, 0x16u);
  }
  v4 = 4294967293;
  v5 = 70;
  if (a1 && a2)
  {
    (*(void (**)(uint64_t, uint64_t, int *, uint64_t))(a2 + 16))(a2, 1, a1, 4);
    (*(void (**)(uint64_t, uint64_t, int *, uint64_t))(a2 + 16))(a2, 2, a1 + 1, 4);
    (*(void (**)(uint64_t, uint64_t, int *, uint64_t))(a2 + 16))(a2, 3, a1 + 2, 4);
    v4 = 0;
    v6 = *a1;
    v5 = 10;
    switch(*a1)
    {
      case 1:
        goto LABEL_10;
      case 2:
        (*(void (**)(uint64_t, uint64_t, int *, uint64_t))(a2 + 16))(a2, 200, a1 + 4, 4);
        goto LABEL_13;
      case 3:
        (*(void (**)(uint64_t, uint64_t, int *, uint64_t))(a2 + 16))(a2, 100, a1 + 4, 4);
        (*(void (**)(uint64_t, uint64_t, int *, uint64_t))(a2 + 16))(a2, 300, a1 + 5, 8);
        (*(void (**)(uint64_t, uint64_t, int *, uint64_t))(a2 + 16))(a2, 302, a1 + 9, 8);
        (*(void (**)(uint64_t, uint64_t, int *, uint64_t))(a2 + 16))(a2, 301, a1 + 13, 8);
        goto LABEL_13;
      case 4:
      case 5:
      case 6:
        break;
      case 7:
        (*(void (**)(uint64_t, uint64_t, int *, uint64_t))(a2 + 16))(a2, 700, a1 + 4, 4);
        goto LABEL_13;
      default:
        if (v6 != 20 && v6 != 21)
          break;
LABEL_10:
        (*(void (**)(uint64_t, uint64_t, int *, uint64_t))(a2 + 16))(a2, 100, a1 + 4, 4);
LABEL_13:
        v4 = 0;
        v5 = 10;
        break;
    }
  }
  if (v5 >= _logLevel && os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO))
  {
    v8 = 136315650;
    v9 = "ACMLib";
    v10 = 2080;
    v11 = "ACMRequirementGetProperties";
    v12 = 2048;
    v13 = (int)v4;
    _os_log_impl(&dword_2409DC000, MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO, "%s: %s: returning, err = %ld.\n", (uint8_t *)&v8, 0x20u);
  }
  return v4;
}

void ACMGetAclAuthMethod(__n128 *a1, uint64_t a2)
{
  __n128 *v4;
  uint8_t buf[4];
  const char *v6;
  __int16 v7;
  const char *v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  if (_logLevel <= 0xAu && os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315394;
    v6 = "ACMLib";
    v7 = 2080;
    v8 = "ACMGetAclAuthMethod";
    _os_log_impl(&dword_2409DC000, MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO, "%s: %s: called.\n", buf, 0x16u);
  }
  v4 = a1;
  LibCall_ACMGetAclAuthMethod_Block((uint64_t)ioKitTransport, (uint64_t)&v4, a1, a2);
  if (_logLevel <= 0xAu && os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315394;
    v6 = "ACMLib";
    v7 = 2080;
    v8 = "ACMGetAclAuthMethod";
    _os_log_impl(&dword_2409DC000, MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO, "%s: %s: returning.\n", buf, 0x16u);
  }
}

uint64_t ACMSetEnvironmentVariable(int a1, const void *a2, size_t a3)
{
  uint64_t v6;
  unsigned int v7;
  uint64_t v9;
  uint8_t buf[4];
  const char *v11;
  __int16 v12;
  const char *v13;
  __int16 v14;
  uint64_t v15;
  __int16 v16;
  int v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  if (_logLevel <= 0xAu && os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315394;
    v11 = "ACMLib";
    v12 = 2080;
    v13 = "ACMSetEnvironmentVariable";
    _os_log_impl(&dword_2409DC000, MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO, "%s: %s: called.\n", buf, 0x16u);
  }
  v9 = 0;
  v6 = LibCall_ACMSetEnvironmentVariable((uint64_t (*)(uint64_t, uint64_t, _QWORD, char *, size_t, _QWORD, _QWORD))ioKitTransport, (uint64_t)&v9, a1, 0, 0, 0, a2, a3);
  if ((_DWORD)v6)
    v7 = 70;
  else
    v7 = 10;
  if (v7 >= _logLevel && os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315906;
    v11 = "ACMLib";
    v12 = 2080;
    v13 = "ACMSetEnvironmentVariable";
    v14 = 2048;
    v15 = (int)v6;
    v16 = 1024;
    v17 = a1;
    _os_log_impl(&dword_2409DC000, MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO, "%s: %s: returning, err = %ld, var=%u.\n", buf, 0x26u);
  }
  return v6;
}

uint64_t ACMSetEnvironmentVariableWithAccessPolicy(int a1, _OWORD *a2, _OWORD *a3, uint64_t a4, const void *a5, size_t a6)
{
  uint64_t v12;
  unsigned int v13;
  uint64_t v15;
  uint8_t buf[4];
  const char *v17;
  __int16 v18;
  const char *v19;
  __int16 v20;
  uint64_t v21;
  __int16 v22;
  int v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  if (_logLevel <= 0xAu && os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315394;
    v17 = "ACMLib";
    v18 = 2080;
    v19 = "ACMSetEnvironmentVariableWithAccessPolicy";
    _os_log_impl(&dword_2409DC000, MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO, "%s: %s: called.\n", buf, 0x16u);
  }
  v15 = 0;
  v12 = LibCall_ACMSetEnvironmentVariable((uint64_t (*)(uint64_t, uint64_t, _QWORD, char *, size_t, _QWORD, _QWORD))ioKitTransport, (uint64_t)&v15, a1, a2, a3, a4, a5, a6);
  if ((_DWORD)v12)
    v13 = 70;
  else
    v13 = 10;
  if (v13 >= _logLevel && os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315906;
    v17 = "ACMLib";
    v18 = 2080;
    v19 = "ACMSetEnvironmentVariableWithAccessPolicy";
    v20 = 2048;
    v21 = (int)v12;
    v22 = 1024;
    v23 = a1;
    _os_log_impl(&dword_2409DC000, MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO, "%s: %s: returning, err = %ld, var=%u.\n", buf, 0x26u);
  }
  return v12;
}

uint64_t ACMGetEnvironmentVariable(int a1, uint64_t a2)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t v7;
  uint8_t buf[4];
  const char *v9;
  __int16 v10;
  const char *v11;
  __int16 v12;
  uint64_t v13;
  __int16 v14;
  int v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  if (_logLevel <= 0xAu && os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315394;
    v9 = "ACMLib";
    v10 = 2080;
    v11 = "ACMGetEnvironmentVariable";
    _os_log_impl(&dword_2409DC000, MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO, "%s: %s: called.\n", buf, 0x16u);
  }
  v7 = 0;
  v4 = LibCall_ACMGetEnvironmentVariable_Block((uint64_t (*)(uint64_t, uint64_t, _QWORD, int *, uint64_t, uint64_t, uint64_t))ioKitTransport, (uint64_t)&v7, a1, a2);
  if ((_DWORD)v4)
    v5 = 70;
  else
    v5 = 10;
  if (v5 >= _logLevel && os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315906;
    v9 = "ACMLib";
    v10 = 2080;
    v11 = "ACMGetEnvironmentVariable";
    v12 = 2048;
    v13 = (int)v4;
    v14 = 1024;
    v15 = a1;
    _os_log_impl(&dword_2409DC000, MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO, "%s: %s: returning, err = %ld, var=%u.\n", buf, 0x26u);
  }
  return v4;
}

uint64_t ACMKernelControl(int a1)
{
  uint64_t v2;
  unsigned int v3;
  uint8_t buf[4];
  const char *v6;
  __int16 v7;
  const char *v8;
  __int16 v9;
  uint64_t v10;
  __int16 v11;
  int v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  if (_logLevel <= 0xAu && os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315394;
    v6 = "ACMLib";
    v7 = 2080;
    v8 = "ACMKernelControl";
    _os_log_impl(&dword_2409DC000, MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO, "%s: %s: called.\n", buf, 0x16u);
  }
  v2 = LibCall_ACMKernelControl_Block((uint64_t)ioKitTransport);
  if ((_DWORD)v2)
    v3 = 70;
  else
    v3 = 10;
  if (v3 >= _logLevel && os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315906;
    v6 = "ACMLib";
    v7 = 2080;
    v8 = "ACMKernelControl";
    v9 = 2048;
    v10 = (int)v2;
    v11 = 1024;
    v12 = a1;
    _os_log_impl(&dword_2409DC000, MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO, "%s: %s: returning, err = %ld, code=%u.\n", buf, 0x26u);
  }
  return v2;
}

uint64_t ACMSEPControl(const void *a1, size_t a2, uint64_t a3)
{
  uint64_t v4;

  v4 = 0;
  return LibCall_ACMSEPControl_Block((uint64_t (*)(uint64_t, uint64_t, _QWORD, char *, uint64_t, unsigned int *, unint64_t *))ioKitTransport, (uint64_t)&v4, a1, a2, 0, 0, 0, a3);
}

uint64_t ACMSEPControlEx(uint64_t a1, _DWORD *a2, unsigned int a3, const void *a4, size_t a5, uint64_t a6)
{
  uint64_t v7;

  v7 = 0;
  return LibCall_ACMSEPControl_Block((uint64_t (*)(uint64_t, uint64_t, _QWORD, char *, uint64_t, unsigned int *, unint64_t *))ioKitTransport, (uint64_t)&v7, a4, a5, a1, a2, a3, a6);
}

void ACMGlobalContextCredentialGetProperty(int a1, int a2, uint64_t a3)
{
  uint64_t v6;
  uint8_t buf[4];
  const char *v8;
  __int16 v9;
  const char *v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  if (_logLevel <= 0xAu && os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315394;
    v8 = "ACMLib";
    v9 = 2080;
    v10 = "ACMGlobalContextCredentialGetProperty";
    _os_log_impl(&dword_2409DC000, MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO, "%s: %s: called.\n", buf, 0x16u);
  }
  v6 = 0;
  LibCall_ACMGlobalContextCredentialGetProperty_Block((uint64_t)ioKitTransport, (uint64_t)&v6, a1, a2, a3);
  if (_logLevel <= 0xAu && os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315394;
    v8 = "ACMLib";
    v9 = 2080;
    v10 = "ACMGlobalContextCredentialGetProperty";
    _os_log_impl(&dword_2409DC000, MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO, "%s: %s: returning.\n", buf, 0x16u);
  }
}

void ACMContextCredentialGetProperty(__n128 *a1, unsigned __int32 a2, unsigned __int32 a3, uint64_t a4)
{
  uint64_t v8;
  __n128 *v9;
  uint64_t v10;
  uint8_t v11[4];
  const char *v12;
  __int16 v13;
  const char *v14;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  const char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  if (_logLevel <= 0xAu && os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315394;
    v16 = "ACMLib";
    v17 = 2080;
    v18 = "ACMContextCredentialGetProperty";
    _os_log_impl(&dword_2409DC000, MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO, "%s: %s: called.\n", buf, 0x16u);
  }
  v10 = 256;
  if (a4)
  {
    v9 = a1;
    v8 = LibCall_ACMContextCredentialGetProperty((uint64_t (*)(uint64_t, uint64_t, _QWORD, __n128 *, uint64_t, uint64_t, uint64_t, __n128))ioKitTransport, (uint64_t)&v9, a1, a2, a3, (uint64_t)buf, (uint64_t)&v10);
    (*(void (**)(uint64_t, uint64_t, uint8_t *, uint64_t))(a4 + 16))(a4, v8, buf, v10);
  }
  if (_logLevel <= 0xAu && os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)v11 = 136315394;
    v12 = "ACMLib";
    v13 = 2080;
    v14 = "ACMContextCredentialGetProperty";
    _os_log_impl(&dword_2409DC000, MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO, "%s: %s: returning.\n", v11, 0x16u);
  }
}

uint64_t ACMContextSetData(_OWORD *a1, int a2, const void *a3, size_t a4)
{
  uint64_t v8;
  unsigned int v9;
  int v11;
  const char *v12;
  __int16 v13;
  const char *v14;
  __int16 v15;
  uint64_t v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  if (_logLevel <= 0xAu && os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO))
  {
    v11 = 136315394;
    v12 = "ACMLib";
    v13 = 2080;
    v14 = "ACMContextSetData";
    _os_log_impl(&dword_2409DC000, MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO, "%s: %s: called.\n", (uint8_t *)&v11, 0x16u);
  }
  v8 = ACMContextSetDataEx(a1, a2, 0, 0, a3, a4);
  if ((_DWORD)v8)
    v9 = 70;
  else
    v9 = 10;
  if (v9 >= _logLevel && os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO))
  {
    v11 = 136315650;
    v12 = "ACMLib";
    v13 = 2080;
    v14 = "ACMContextSetData";
    v15 = 2048;
    v16 = (int)v8;
    _os_log_impl(&dword_2409DC000, MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO, "%s: %s: returning, err = %ld.\n", (uint8_t *)&v11, 0x20u);
  }
  return v8;
}

uint64_t ACMContextSetDataEx(_OWORD *a1, int a2, _DWORD *a3, unsigned int a4, const void *a5, size_t a6)
{
  uint64_t v12;
  unsigned int v13;
  _OWORD *v15;
  uint8_t buf[4];
  const char *v17;
  __int16 v18;
  const char *v19;
  __int16 v20;
  uint64_t v21;
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  if (_logLevel <= 0xAu && os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315394;
    v17 = "ACMLib";
    v18 = 2080;
    v19 = "ACMContextSetDataEx";
    _os_log_impl(&dword_2409DC000, MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO, "%s: %s: called.\n", buf, 0x16u);
  }
  v15 = a1;
  v12 = LibCall_ACMContextSetData((uint64_t (*)(uint64_t, uint64_t, _QWORD, void *, size_t, _QWORD, _QWORD))ioKitTransport, (uint64_t)&v15, a1, a2, a3, a4, a5, a6);
  if ((_DWORD)v12)
    v13 = 70;
  else
    v13 = 10;
  if (v13 >= _logLevel && os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315650;
    v17 = "ACMLib";
    v18 = 2080;
    v19 = "ACMContextSetDataEx";
    v20 = 2048;
    v21 = (int)v12;
    _os_log_impl(&dword_2409DC000, MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO, "%s: %s: returning, err = %ld.\n", buf, 0x20u);
  }
  return v12;
}

uint64_t ACMContextGetData(_OWORD *a1, int a2, uint64_t a3)
{
  uint64_t Data;
  unsigned int v7;
  int v9;
  const char *v10;
  __int16 v11;
  const char *v12;
  __int16 v13;
  uint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  if (_logLevel <= 0xAu && os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO))
  {
    v9 = 136315394;
    v10 = "ACMLib";
    v11 = 2080;
    v12 = "ACMContextGetData";
    _os_log_impl(&dword_2409DC000, MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO, "%s: %s: called.\n", (uint8_t *)&v9, 0x16u);
  }
  Data = ACMContextGetDataEx(a1, a2, 0, 0, a3);
  if ((_DWORD)Data)
    v7 = 70;
  else
    v7 = 10;
  if (v7 >= _logLevel && os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO))
  {
    v9 = 136315650;
    v10 = "ACMLib";
    v11 = 2080;
    v12 = "ACMContextGetData";
    v13 = 2048;
    v14 = (int)Data;
    _os_log_impl(&dword_2409DC000, MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO, "%s: %s: returning, err = %ld.\n", (uint8_t *)&v9, 0x20u);
  }
  return Data;
}

uint64_t ACMContextGetDataEx(_OWORD *a1, int a2, _DWORD *a3, unsigned int a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  rsize_t v15;
  unsigned int v16;
  _OWORD *v18;
  _OWORD *v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int size;
  int size_4;
  const char *v24;
  __int16 v25;
  const char *v26;
  __int16 v27;
  uint64_t v28;
  uint64_t v29;

  v29 = *MEMORY[0x24BDAC8D0];
  if (_logLevel <= 0xAu && os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO))
  {
    size_4 = 136315394;
    v24 = "ACMLib";
    v25 = 2080;
    v26 = "ACMContextGetDataEx";
    _os_log_impl(&dword_2409DC000, MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO, "%s: %s: called.\n", (uint8_t *)&size_4, 0x16u);
  }
  size = 0;
  v20 = 0;
  v21 = 4;
  v19 = a1;
  v10 = LibCall_ACMContextGetData((uint64_t (*)(uint64_t, uint64_t, _QWORD, void *, size_t, uint64_t, uint64_t))ioKitTransport, (uint64_t)&v19, a1, a2, 1, a3, a4, (uint64_t)&size, (uint64_t)&v21);
  if (!(_DWORD)v10)
  {
    v11 = size;
    if (size)
    {
      v12 = acm_mem_alloc_data(size);
      acm_mem_alloc_info("<data>", v12, v11, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/ACMLib/ACMLib.c", 1199, "ACMContextGetDataEx");
      if (!v12)
      {
        v16 = 70;
        v14 = 4294967292;
        goto LABEL_15;
      }
      v20 = size;
      v18 = a1;
      v13 = LibCall_ACMContextGetData((uint64_t (*)(uint64_t, uint64_t, _QWORD, void *, size_t, uint64_t, uint64_t))ioKitTransport, (uint64_t)&v18, a1, a2, 0, a3, a4, (uint64_t)v12, (uint64_t)&v20);
      v14 = v13;
      if (a5 && !(_DWORD)v13)
        (*(void (**)(uint64_t, void *, uint64_t))(a5 + 16))(a5, v12, v20);
      v15 = size;
      acm_mem_free_info("<data>", v12, size, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/ACMLib/ACMLib.c", 1213, "ACMContextGetDataEx");
      acm_mem_free_data(v12, v15);
      if ((_DWORD)v14)
        goto LABEL_11;
    }
    else if (a5)
    {
      (*(void (**)(uint64_t, _QWORD, _QWORD))(a5 + 16))(a5, 0, 0);
    }
    v14 = 0;
    v16 = 10;
    goto LABEL_15;
  }
  v14 = v10;
LABEL_11:
  v16 = 70;
LABEL_15:
  if (v16 >= _logLevel && os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO))
  {
    size_4 = 136315650;
    v24 = "ACMLib";
    v25 = 2080;
    v26 = "ACMContextGetDataEx";
    v27 = 2048;
    v28 = (int)v14;
    _os_log_impl(&dword_2409DC000, MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO, "%s: %s: returning, err = %ld.\n", (uint8_t *)&size_4, 0x20u);
  }
  return v14;
}

uint64_t ACMContextGetDataProperty(_OWORD *a1, unsigned __int16 a2, unsigned __int16 a3, uint64_t a4)
{
  uint64_t Data;
  unsigned int v9;
  int v11;
  const char *v12;
  __int16 v13;
  const char *v14;
  __int16 v15;
  uint64_t v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  if (_logLevel <= 0xAu && os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO))
  {
    v11 = 136315394;
    v12 = "ACMLib";
    v13 = 2080;
    v14 = "ACMContextGetDataProperty";
    _os_log_impl(&dword_2409DC000, MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO, "%s: %s: called.\n", (uint8_t *)&v11, 0x16u);
  }
  Data = ACMContextGetData(a1, a2 | (a3 << 16), a4);
  if ((_DWORD)Data)
    v9 = 70;
  else
    v9 = 10;
  if (v9 >= _logLevel && os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO))
  {
    v11 = 136315650;
    v12 = "ACMLib";
    v13 = 2080;
    v14 = "ACMContextGetDataProperty";
    v15 = 2048;
    v16 = (int)Data;
    _os_log_impl(&dword_2409DC000, MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO, "%s: %s: returning, err = %ld.\n", (uint8_t *)&v11, 0x20u);
  }
  return Data;
}

uint64_t ACMContextGetInfo(__int128 *a1, int a2, _QWORD *a3)
{
  uint64_t v6;
  unsigned int v7;
  __int128 *v9;
  uint8_t buf[4];
  const char *v11;
  __int16 v12;
  const char *v13;
  __int16 v14;
  uint64_t v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  if (_logLevel <= 0xAu && os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315394;
    v11 = "ACMLib";
    v12 = 2080;
    v13 = "ACMContextGetInfo";
    _os_log_impl(&dword_2409DC000, MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO, "%s: %s: called.\n", buf, 0x16u);
  }
  v9 = a1;
  v6 = LibCall_ACMContextGetInfo((uint64_t (*)(uint64_t, uint64_t, _QWORD, int *, uint64_t, _OWORD *, unint64_t *))ioKitTransport, (uint64_t)&v9, a1, a2, a3);
  if ((_DWORD)v6)
    v7 = 70;
  else
    v7 = 10;
  if (v7 >= _logLevel && os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315650;
    v11 = "ACMLib";
    v12 = 2080;
    v13 = "ACMContextGetInfo";
    v14 = 2048;
    v15 = (int)v6;
    _os_log_impl(&dword_2409DC000, MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO, "%s: %s: returning, err = %ld.\n", buf, 0x20u);
  }
  return v6;
}

uint64_t ACMPing()
{
  uint64_t v1;

  v1 = 0;
  return LibCall_ACMPing((uint64_t (*)(uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))ioKitTransport, (uint64_t)&v1, 29);
}

void updateLogLevelFromKext()
{
  unsigned __int8 v0;
  unsigned int v1;
  uint32_t outputCnt;
  uint64_t output;
  uint8_t buf[4];
  const char *v5;
  __int16 v6;
  const char *v7;
  __int16 v8;
  int v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  if (_logLevel <= 0xAu && os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315394;
    v5 = "ACMLib";
    v6 = 2080;
    v7 = "updateLogLevelFromKext";
    _os_log_impl(&dword_2409DC000, MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO, "%s: %s: called.\n", buf, 0x16u);
  }
  output = 0;
  outputCnt = 1;
  if (IOConnectCallScalarMethod(_connect, 2u, 0, 0, &output, &outputCnt))
    goto LABEL_8;
  v0 = output;
  v1 = output;
  _logLevel = output;
  if (output <= 0x1EuLL && os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315650;
    v5 = "ACMLib";
    v6 = 2080;
    v7 = "updateLogLevelFromKext";
    v8 = 1024;
    v9 = v0;
    _os_log_impl(&dword_2409DC000, MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO, "%s: %s: log level set to %d.\n", buf, 0x1Cu);
LABEL_8:
    v1 = _logLevel;
  }
  if (v1 <= 0xA && os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315394;
    v5 = "ACMLib";
    v6 = 2080;
    v7 = "updateLogLevelFromKext";
    _os_log_impl(&dword_2409DC000, MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO, "%s: %s: returning.\n", buf, 0x16u);
  }
}

_BYTE *LibCall_BuildCommand(char a1, char a2, char a3, const void *a4, size_t a5, _QWORD *a6)
{
  _BYTE *v12;
  BOOL v13;

  if (gACMLoggingLevel <= 0xAu)
    printf("%s: %s: called.\n", "ACM", "LibCall_BuildCommand");
  v12 = 0;
  if (a5)
    v13 = a4 == 0;
  else
    v13 = 0;
  if (!v13 && a6)
  {
    if (a5 >= 0xFFFFFFFFFFFFFFF8)
    {
      v12 = 0;
    }
    else
    {
      v12 = acm_mem_alloc_data(a5 + 8);
      acm_mem_alloc_info("<data>", v12, a5 + 8, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/LibCall.c", 22, "LibCall_BuildCommand");
      if (v12)
      {
        *a6 = a5 + 8;
        *(_DWORD *)v12 = 1396920900;
        v12[4] = a1;
        v12[5] = a2;
        v12[6] = a3;
        if (a5)
          memcpy(v12 + 8, a4, a5);
      }
    }
  }
  if (gACMLoggingLevel <= 0xAu)
    printf("%s: %s: returning.\n", "ACM", "LibCall_BuildCommand");
  return v12;
}

uint64_t LibCall_ACMContextCreate(uint64_t (*a1)(uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, _BYTE *, uint64_t *), uint64_t a2, _QWORD *a3, _BYTE *a4, int a5)
{
  unsigned int v10;
  uint64_t v11;
  _DWORD *v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  int v16;
  uint64_t v18;
  _BYTE v19[21];
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  if (gACMLoggingLevel <= 0xAu)
    printf("%s: %s: called.\n", "ACM", "LibCall_ACMContextCreate");
  v10 = 70;
  v11 = 4294967293;
  if (!a1 || !a3)
    goto LABEL_25;
  v12 = acm_mem_alloc(0x14uLL);
  acm_mem_alloc_info("ACMHandleWithPayload", v12, 20, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/LibCall.c", 50, "LibCall_ACMContextCreate");
  if (!v12)
  {
    v10 = 70;
    v11 = 4294967292;
    goto LABEL_25;
  }
  memset(v19, 0, sizeof(v19));
  if (a5)
  {
    v18 = 21;
    v13 = a1(a2, 36, 0, 0, 0, v19, &v18);
    if (!(_DWORD)v13)
    {
      if (v18 != 21)
      {
        v11 = 4294967291;
        goto LABEL_23;
      }
      v11 = 0;
      goto LABEL_20;
    }
    v11 = v13;
    if ((_DWORD)v13 != -3)
    {
LABEL_23:
      acm_mem_free_info("ACMHandleWithPayload", v12, 0x14uLL, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/LibCall.c", 89, "LibCall_ACMContextCreate");
      acm_mem_free(v12, 0x14uLL);
      v10 = 70;
      goto LABEL_25;
    }
  }
  v18 = 17;
  v14 = a1(a2, 1, 0, 0, 0, v19, &v18);
  if (v18 == 17)
    v15 = 0;
  else
    v15 = -5;
  if (v14)
    v11 = v14;
  else
    v11 = v15;
  if (!v14 && v18 == 17)
  {
LABEL_20:
    v16 = *(_DWORD *)&v19[17];
    *(_OWORD *)v12 = *(_OWORD *)v19;
    v12[4] = v16;
    *a3 = v12;
    if (a4)
      *a4 = v19[16];
  }
  if ((_DWORD)v11)
    goto LABEL_23;
  v10 = 10;
LABEL_25:
  if (v10 >= gACMLoggingLevel)
    printf("%s: %s: returning, err = %ld.\n", "ACM", "LibCall_ACMContextCreate", (int)v11);
  return v11;
}

_DWORD *LibCall_ACMContextCreateWithExternalForm(uint64_t (*a1)(uint64_t, uint64_t, _QWORD, _OWORD *, uint64_t, _QWORD *, uint64_t *), uint64_t a2, _OWORD *a3, uint64_t a4, _BYTE *a5, int a6)
{
  _DWORD *v12;
  unsigned int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  uint64_t v20;
  _QWORD v21[2];

  if (gACMLoggingLevel <= 0xAu)
    printf("%s: %s: called.\n", "ACM", "LibCall_ACMContextCreateWithExternalForm");
  v12 = 0;
  v13 = 70;
  v14 = -3;
  if (a1 && a3 && a4 == 16)
  {
    memset(v21, 0, 9);
    if (a6)
    {
      v20 = 9;
      v15 = a1(a2, 37, 0, a3, 16, v21, &v20);
      if (!v15)
      {
        if (v20 == 9)
        {
          v14 = 0;
          goto LABEL_19;
        }
        v14 = -5;
        goto LABEL_28;
      }
      v14 = v15;
      if (v15 != -3)
        goto LABEL_28;
    }
    v20 = 5;
    v16 = a1(a2, 18, 0, a3, 16, v21, &v20);
    if (v20 == 5)
      v17 = 0;
    else
      v17 = -5;
    if (v16)
      v14 = v16;
    else
      v14 = v17;
    if (!v16 && v20 == 5)
    {
LABEL_19:
      if (LODWORD(v21[0]))
      {
        v12 = acm_mem_alloc(0x14uLL);
        acm_mem_alloc_info("ACMHandleWithPayload", v12, 20, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/LibCall.c", 128, "LibCall_ACMContextCreateWithExternalForm");
        if (!v12)
        {
          v13 = 70;
          v14 = -4;
          goto LABEL_31;
        }
        v18 = *(_DWORD *)((char *)v21 + 5);
        *(_OWORD *)v12 = *a3;
        v12[4] = v18;
        if (a5)
          *a5 = BYTE4(v21[0]);
        if (v14)
        {
          acm_mem_free_info("ACMHandleWithPayload", v12, 0x14uLL, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/LibCall.c", 147, "LibCall_ACMContextCreateWithExternalForm");
          acm_mem_free(v12, 0x14uLL);
LABEL_29:
          v13 = 70;
          goto LABEL_31;
        }
      }
      else
      {
        v12 = 0;
      }
      goto LABEL_30;
    }
LABEL_28:
    v12 = 0;
    if (v14)
      goto LABEL_29;
LABEL_30:
    v14 = 0;
    v13 = 10;
  }
LABEL_31:
  if (v13 >= gACMLoggingLevel)
    printf("%s: %s: returning, err = %ld.\n", "ACM", "LibCall_ACMContextCreateWithExternalForm", v14);
  return v12;
}

uint64_t LibCall_ACMContextDelete(void (*a1)(uint64_t, uint64_t, _QWORD, void *, uint64_t, _QWORD, _QWORD), uint64_t a2, void *a3, int a4)
{
  uint64_t v8;
  unsigned int v9;

  if (gACMLoggingLevel <= 0xAu)
    printf("%s: %s: called.\n", "ACM", "LibCall_ACMContextDelete");
  if (a1 && a3)
  {
    if (a4)
      a1(a2, 2, 0, a3, 16, 0, 0);
    goto LABEL_7;
  }
  if (a3)
  {
LABEL_7:
    acm_mem_free_info("ACMHandleWithPayload", a3, 0x14uLL, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/LibCall.c", 172, "LibCall_ACMContextDelete");
    acm_mem_free(a3, 0x14uLL);
    v8 = 0;
    v9 = 10;
    goto LABEL_8;
  }
  v9 = 70;
  v8 = 4294967293;
LABEL_8:
  if (v9 >= gACMLoggingLevel)
    printf("%s: %s: returning, err = %ld.\n", "ACM", "LibCall_ACMContextDelete", (int)v8);
  return v8;
}

uint64_t LibCall_ACMContexAddCredentialWithScope(uint64_t (*a1)(uint64_t, uint64_t, _QWORD, void *, size_t, _QWORD, _QWORD), uint64_t a2, _OWORD *a3, unsigned int *a4, int a5)
{
  BOOL v10;
  char v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t SerializedAddCredentialSize;
  size_t v15;
  void *v16;
  uint64_t v17;
  rsize_t v18;
  size_t size;

  if (gACMLoggingLevel <= 0xAu)
    printf("%s: %s: called.\n", "ACM", "LibCall_ACMContexAddCredentialWithScope");
  size = 0;
  if (a3)
    v10 = 1;
  else
    v10 = a5 == 2;
  v11 = !v10;
  v12 = 70;
  v13 = 4294967293;
  if (a4 && (v11 & 1) == 0)
  {
    SerializedAddCredentialSize = GetSerializedAddCredentialSize((uint64_t)a3, a4, a5, &size);
    if ((_DWORD)SerializedAddCredentialSize)
    {
      v13 = SerializedAddCredentialSize;
      v12 = 70;
    }
    else
    {
      v15 = size;
      v16 = acm_mem_alloc_data(size);
      acm_mem_alloc_info("<data>", v16, v15, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/LibCall.c", 192, "LibCall_ACMContexAddCredentialWithScope");
      if (v16)
      {
        v17 = SerializeAddCredential(a3, a4, a5, (uint64_t)v16, &size);
        if (!(_DWORD)v17)
          v17 = a1(a2, 5, 0, v16, size, 0, 0);
        v13 = v17;
        v18 = size;
        acm_mem_free_info("<data>", v16, size, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/LibCall.c", 203, "LibCall_ACMContexAddCredentialWithScope");
        acm_mem_free_data(v16, v18);
        if ((_DWORD)v13)
          v12 = 70;
        else
          v12 = 10;
      }
      else
      {
        v12 = 70;
        v13 = 4294967292;
      }
    }
  }
  if (v12 >= gACMLoggingLevel)
    printf("%s: %s: returning, err = %ld.\n", "ACM", "LibCall_ACMContexAddCredentialWithScope", (int)v13);
  return v13;
}

uint64_t LibCall_ACMContexRemoveCredentialsByTypeAndScope(uint64_t (*a1)(uint64_t, uint64_t, _QWORD, _OWORD *, uint64_t, _QWORD, _QWORD), uint64_t a2, _OWORD *a3, int a4, int a5)
{
  _OWORD *v10;
  uint64_t v11;
  unsigned int v12;

  if (gACMLoggingLevel <= 0xAu)
    printf("%s: %s: called.\n", "ACM", "LibCall_ACMContexRemoveCredentialsByTypeAndScope");
  if (a3 || a5 == 2)
  {
    v10 = acm_mem_alloc_data(0x18uLL);
    acm_mem_alloc_info("<data>", v10, 24, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/LibCall.c", 217, "LibCall_ACMContexRemoveCredentialsByTypeAndScope");
    if (v10)
    {
      if (a3)
      {
        *v10 = *a3;
      }
      else
      {
        *(_QWORD *)v10 = 0;
        *((_QWORD *)v10 + 1) = 0;
      }
      *((_DWORD *)v10 + 4) = a4;
      *((_DWORD *)v10 + 5) = a5;
      v11 = a1(a2, 9, 0, v10, 24, 0, 0);
      acm_mem_free_info("<data>", v10, 0x18uLL, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/LibCall.c", 233, "LibCall_ACMContexRemoveCredentialsByTypeAndScope");
      acm_mem_free_data(v10, 0x18uLL);
      if ((_DWORD)v11)
        v12 = 70;
      else
        v12 = 10;
    }
    else
    {
      v12 = 70;
      v11 = 4294967292;
    }
  }
  else
  {
    v12 = 70;
    v11 = 4294967293;
  }
  if (v12 >= gACMLoggingLevel)
    printf("%s: %s: returning, err = %ld.\n", "ACM", "LibCall_ACMContexRemoveCredentialsByTypeAndScope", (int)v11);
  return v11;
}

uint64_t LibCall_ACMContextRemoveCredentialsByValueAndScope(uint64_t (*a1)(uint64_t, uint64_t, _QWORD, void *, size_t, _QWORD, _QWORD), uint64_t a2, uint64_t a3, _DWORD *a4, uint64_t a5)
{
  BOOL v10;
  char v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  size_t v15;
  void *v16;
  uint64_t v17;
  rsize_t v18;
  size_t size;

  if (gACMLoggingLevel <= 0xAu)
    printf("%s: %s: called.\n", "ACM", "LibCall_ACMContextRemoveCredentialsByValueAndScope");
  size = 0;
  if (a3)
    v10 = 1;
  else
    v10 = (_DWORD)a5 == 2;
  v11 = !v10;
  v12 = 70;
  v13 = 4294967293;
  if (a4 && (v11 & 1) == 0)
  {
    v14 = GetSerializedRemoveCredentialSize(a3, a4, a5, &size);
    if ((_DWORD)v14)
    {
      v13 = v14;
      v12 = 70;
    }
    else
    {
      v15 = size;
      v16 = acm_mem_alloc_data(size);
      acm_mem_alloc_info("<data>", v16, v15, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/LibCall.c", 251, "LibCall_ACMContextRemoveCredentialsByValueAndScope");
      if (v16)
      {
        v17 = SerializeRemoveCredential(a3, a4, a5, v16, &size);
        if (!(_DWORD)v17)
          v17 = a1(a2, 6, 0, v16, size, 0, 0);
        v13 = v17;
        v18 = size;
        acm_mem_free_info("<data>", v16, size, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/LibCall.c", 264, "LibCall_ACMContextRemoveCredentialsByValueAndScope");
        acm_mem_free_data(v16, v18);
        if ((_DWORD)v13)
          v12 = 70;
        else
          v12 = 10;
      }
      else
      {
        v12 = 70;
        v13 = 4294967292;
      }
    }
  }
  if (v12 >= gACMLoggingLevel)
    printf("%s: %s: returning, err = %ld.\n", "ACM", "LibCall_ACMContextRemoveCredentialsByValueAndScope", (int)v13);
  return v13;
}

uint64_t LibCall_ACMContextVerifyPolicyAndCopyRequirementEx(uint64_t (*a1)(uint64_t, uint64_t, _QWORD, _OWORD *, size_t, unsigned int *, unint64_t *), uint64_t a2, _OWORD *a3, char *__s1, uint64_t a5, _DWORD *a6, unsigned int a7, uint64_t a8, BOOL *a9, _QWORD *a10)
{
  unsigned int v18;
  uint64_t v19;
  uint64_t SerializedVerifyPolicySize;
  size_t v21;
  _OWORD *v22;
  uint64_t v23;
  unsigned int *v24;
  uint64_t v25;
  unint64_t v26;
  rsize_t v27;
  size_t v29;
  void *v30;
  unint64_t v31;
  size_t v32;
  size_t size;

  if (gACMLoggingLevel <= 0xAu)
    printf("%s: %s: called.\n", "ACM", "LibCall_ACMContextVerifyPolicyAndCopyRequirementEx");
  v32 = 0;
  size = 0;
  v30 = 0;
  v31 = 4096;
  v18 = 70;
  v19 = 4294967293;
  v29 = 0;
  if (a1 && a3 && __s1 && a9)
  {
    if ((a6 != 0) != (a7 != 0))
    {
      v18 = 70;
      v19 = 4294967293;
    }
    else
    {
      SerializedVerifyPolicySize = GetSerializedVerifyPolicySize((uint64_t)a3, __s1, a5, a8, a6, a7, &size);
      if ((_DWORD)SerializedVerifyPolicySize)
      {
        v19 = SerializedVerifyPolicySize;
        v18 = 70;
      }
      else
      {
        v21 = size;
        v22 = acm_mem_alloc_data(size);
        acm_mem_alloc_info("<data>", v22, v21, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/LibCall.c", 293, "LibCall_ACMContextVerifyPolicyAndCopyRequirementEx");
        if (v22)
        {
          v32 = size;
          v23 = SerializeVerifyPolicy(a3, __s1, a5, a8, a6, a7, v22, &v32);
          if ((_DWORD)v23)
          {
            v19 = v23;
            v24 = 0;
          }
          else
          {
            v24 = (unsigned int *)acm_mem_alloc_data(0x1000uLL);
            acm_mem_alloc_info("<data>", v24, 4096, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/LibCall.c", 300, "LibCall_ACMContextVerifyPolicyAndCopyRequirementEx");
            if (v24)
            {
              v25 = a1(a2, 3, 0, v22, v32, v24, &v31);
              if ((_DWORD)v25)
              {
                v19 = v25;
              }
              else
              {
                v26 = v31 - 4;
                if (v31 < 4)
                {
                  v19 = 4294967291;
                }
                else
                {
                  *a9 = *v24 != 0;
                  if (a10)
                  {
                    v19 = DeserializeRequirement(v24 + 1, v26, &v30, &v29);
                    if (!(_DWORD)v19)
                      *a10 = v30;
                  }
                  else
                  {
                    v19 = 0;
                  }
                }
              }
            }
            else
            {
              v19 = 4294967292;
            }
          }
          v27 = size;
          acm_mem_free_info("<data>", v22, size, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/LibCall.c", 324, "LibCall_ACMContextVerifyPolicyAndCopyRequirementEx");
          acm_mem_free_data(v22, v27);
          if (v24)
          {
            acm_mem_free_info("<data>", v24, 0x1000uLL, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/LibCall.c", 327, "LibCall_ACMContextVerifyPolicyAndCopyRequirementEx");
            acm_mem_free_data(v24, 0x1000uLL);
          }
          if ((_DWORD)v19)
            v18 = 70;
          else
            v18 = 10;
        }
        else
        {
          v18 = 70;
          v19 = 4294967292;
        }
      }
    }
  }
  if (v18 >= gACMLoggingLevel)
    printf("%s: %s: returning, err = %ld.\n", "ACM", "LibCall_ACMContextVerifyPolicyAndCopyRequirementEx", (int)v19);
  return v19;
}

uint64_t LibCall_ACMRequirementDelete(uint64_t a1, int *a2)
{
  unsigned int v4;
  uint64_t v5;

  if (gACMLoggingLevel <= 0xAu)
    printf("%s: %s: called.\n", "ACM", "LibCall_ACMRequirementDelete");
  v4 = 70;
  v5 = 4294967293;
  if (a1 && a2)
  {
    v5 = Util_DeallocRequirement(a2);
    if ((_DWORD)v5)
      v4 = 70;
    else
      v4 = 10;
  }
  if (v4 >= gACMLoggingLevel)
    printf("%s: %s: returning, err = %ld.\n", "ACM", "LibCall_ACMRequirementDelete", (int)v5);
  return v5;
}

uint64_t LibCall_ACMKernelControl(uint64_t (*a1)(uint64_t, uint64_t, _QWORD, char *, size_t, uint64_t, uint64_t), uint64_t a2, int a3, const void *a4, size_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t (*v13)(uint64_t, uint64_t, _QWORD, char *, size_t, uint64_t, uint64_t);
  BOOL v14;
  _DWORD *v15;
  _DWORD *v16;
  uint64_t v17;
  unsigned int v18;
  _QWORD v20[2];

  v13 = a1;
  v20[1] = *MEMORY[0x24BDAC8D0];
  if (gACMLoggingLevel <= 0xAu)
    a1 = (uint64_t (*)(uint64_t, uint64_t, _QWORD, char *, size_t, uint64_t, uint64_t))printf("%s: %s: called.\n", "ACM", "LibCall_ACMKernelControl");
  if (!v13)
    goto LABEL_16;
  v14 = a5 != 0;
  if (a4)
    v14 = a5 - 4097 < 0xFFFFFFFFFFFFF000;
  if (v14)
  {
LABEL_16:
    v18 = 70;
    v17 = 4294967293;
  }
  else
  {
    v20[0] = v20;
    MEMORY[0x24BDAC7A8](a1);
    v15 = (_DWORD *)((char *)v20 - ((a5 + 19) & 0xFFFFFFFFFFFFFFF0));
    *v15 = a3;
    v16 = v15 + 1;
    if (a5)
    {
      memcpy(v15 + 1, a4, a5);
      v16 = (_DWORD *)((char *)v16 + a5);
    }
    if (v16 != (_DWORD *)((char *)v15 + a5 + 4))
      LibCall_ACMKernelControl_cold_1();
    v17 = v13(a2, 26, 0, (char *)v20 - ((a5 + 19) & 0xFFFFFFFFFFFFFFF0), a5 + 4, a6, a7);
    if ((_DWORD)v17)
      v18 = 70;
    else
      v18 = 10;
  }
  if (v18 >= gACMLoggingLevel)
    printf("%s: %s: returning, err = %ld.\n", "ACM", "LibCall_ACMKernelControl", (int)v17);
  return v17;
}

_DWORD *LibCall_ACMCredentialDelete(_DWORD *a1)
{
  if (a1)
    return (_DWORD *)Util_DeallocCredential(a1);
  return a1;
}

unsigned int *LibCall_ACMCredentialGetType(unsigned int *result)
{
  if (result)
    return (unsigned int *)*result;
  return result;
}

uint64_t LibCall_ACMCredentialSetProperty(int *a1, int a2, _OWORD *__src, size_t __n)
{
  int v4;
  uint64_t result;
  int v7;
  _OWORD *v8;
  BOOL v9;
  _BOOL4 v10;
  __int128 v11;
  _BOOL4 v13;
  void *v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;

  if (!a1)
    return 4294967293;
  v4 = __n;
  if ((__src != 0) != (__n != 0))
    return 4294967293;
  result = 4294967293;
  if (a2 > 399)
  {
    if (a2 > 601)
    {
      if (a2 <= 801)
      {
        if (a2 != 602)
        {
          if (a2 == 701)
          {
            if (__n <= 0x80 && *a1 == 13)
            {
              a1[8] = __n;
              v14 = a1 + 9;
LABEL_118:
              memcpy(v14, __src, __n);
              return 0;
            }
          }
          else if (a2 == 801 && __n == 16 && *a1 == 17)
          {
            result = 0;
            *((_OWORD *)a1 + 2) = *__src;
          }
          return result;
        }
        v13 = *a1 == 12 || *a1 == 15;
        if (__n != 4 || !v13)
          return result;
LABEL_79:
        result = 0;
        a1[9] = *(_DWORD *)__src;
        return result;
      }
      if (a2 == 802)
      {
        if (__n != 65 || *a1 != 17)
          return result;
        result = 0;
        *((_OWORD *)a1 + 3) = *__src;
        v11 = __src[1];
        v16 = __src[2];
        v17 = __src[3];
        *((_BYTE *)a1 + 112) = *((_BYTE *)__src + 64);
        *((_OWORD *)a1 + 5) = v16;
        *((_OWORD *)a1 + 6) = v17;
        goto LABEL_92;
      }
      if (a2 != 901)
      {
        if (a2 == 1001 && __n <= 0x80 && *a1 == 21)
        {
          memcpy(a1 + 9, __src, __n);
          result = 0;
          a1[8] = v4;
        }
        return result;
      }
      if (__n != 32 || *a1 != 20)
        return result;
    }
    else
    {
      if (a2 > 501)
      {
        switch(a2)
        {
          case 502:
            if (__n == 16 && *a1 == 10)
            {
LABEL_102:
              result = 0;
              *(_OWORD *)(a1 + 13) = *__src;
            }
            break;
          case 503:
            if (__n == 16 && *a1 == 10)
            {
              result = 0;
              v15 = *__src;
LABEL_99:
              *(_OWORD *)(a1 + 17) = v15;
            }
            break;
          case 601:
            v9 = *a1 == 12 || *a1 == 15;
            v10 = v9;
            if (__n == 4 && v10)
            {
LABEL_64:
              result = 0;
              a1[8] = *(_DWORD *)__src;
            }
            break;
        }
        return result;
      }
      if (a2 != 400)
      {
        if (a2 != 401)
        {
          if (a2 == 501 && __n == 16 && *a1 == 10)
          {
LABEL_16:
            result = 0;
            *(_OWORD *)(a1 + 9) = *__src;
          }
          return result;
        }
        if (__n != 24 || *a1 != 7)
          return result;
        result = 0;
        v11 = *__src;
        *((_QWORD *)a1 + 10) = *((_QWORD *)__src + 2);
LABEL_92:
        *((_OWORD *)a1 + 4) = v11;
        return result;
      }
      if (__n != 32 || *a1 != 7)
        return result;
    }
    result = 0;
    v18 = __src[1];
    *((_OWORD *)a1 + 2) = *__src;
    *((_OWORD *)a1 + 3) = v18;
    return result;
  }
  if (a2 > 199)
  {
    switch(a2)
    {
      case 300:
        if (__n == 16 && *a1 == 3)
          goto LABEL_16;
        break;
      case 301:
        if (__n == 32 && *a1 == 3)
        {
          result = 0;
          v15 = *__src;
          *(_OWORD *)(a1 + 21) = __src[1];
          goto LABEL_99;
        }
        break;
      case 302:
        if (__n == 16 && *a1 == 3)
          goto LABEL_102;
        break;
      case 303:
        if (__n == 65 && *a1 == 3)
        {
          result = 0;
          *(_OWORD *)(a1 + 30) = *__src;
          v19 = __src[1];
          v20 = __src[2];
          v21 = __src[3];
          *((_BYTE *)a1 + 184) = *((_BYTE *)__src + 64);
          *(_OWORD *)(a1 + 42) = v21;
          *(_OWORD *)(a1 + 38) = v20;
          *(_OWORD *)(a1 + 34) = v19;
        }
        break;
      case 304:
        if (__n == 16 && *a1 == 3)
        {
          result = 0;
          *(_OWORD *)((char *)a1 + 185) = *__src;
        }
        break;
      case 305:
        if (__n == 4 && *a1 == 3)
        {
          result = 0;
          *(int *)((char *)a1 + 201) = *(_DWORD *)__src;
        }
        break;
      case 306:
        if (__n <= 0x80 && *a1 == 3)
        {
          memcpy((char *)a1 + 209, __src, __n);
          result = 0;
          *(int *)((char *)a1 + 205) = v4;
        }
        break;
      default:
        if (a2 == 200)
        {
          if (__n <= 0x80 && *a1 == 2)
          {
            a1[9] = __n;
            v14 = a1 + 10;
            goto LABEL_118;
          }
        }
        else if (a2 == 201 && __n == 4 && *a1 == 2)
        {
          goto LABEL_64;
        }
        break;
    }
    return result;
  }
  if (a2 > 100)
  {
    if (a2 == 101)
    {
      if (__n == 4)
      {
        switch(*a1)
        {
          case 1:
          case 3:
          case 9:
          case 10:
            goto LABEL_64;
          case 2:
          case 4:
          case 5:
          case 6:
          case 7:
          case 8:
            return result;
          default:
            if (*a1 == 18)
              goto LABEL_64;
            break;
        }
      }
      return result;
    }
    if (a2 != 102 || __n != 4 || *a1 != 1)
      return result;
    goto LABEL_79;
  }
  if (a2 == 5)
  {
    if (__n == 4)
    {
      result = 0;
      a1[3] = *(_DWORD *)__src;
    }
  }
  else if (a2 == 100 && __n == 16)
  {
    v7 = *a1;
    if (*a1 > 8)
    {
      if (v7 == 9)
      {
        v8 = a1 + 10;
        a1[9] = 16;
      }
      else
      {
        if (v7 != 18)
          return result;
        v8 = a1 + 9;
      }
    }
    else if (v7 == 1)
    {
      v8 = a1 + 11;
      a1[10] = 16;
    }
    else
    {
      if (v7 != 3)
        return result;
      v8 = a1 + 26;
      a1[25] = 16;
    }
    result = 0;
    *v8 = *__src;
  }
  return result;
}

uint64_t LibCall_ACMCredentialGetPropertyData(int *a1, int a2, int **a3, uint64_t *a4)
{
  uint64_t result;
  int *v8;
  int *v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  int *v15;
  int *v16;
  int *v17;
  int v18;
  _BOOL4 isNullOrZeroMemory;
  BOOL v20;
  int *v21;
  uint64_t v22;
  int *v23;

  result = 4294967293;
  if (!a1 || !a3 || !a4)
    return result;
  if (a2 > 399)
  {
    if (a2 > 601)
    {
      if (a2 > 801)
      {
        if (a2 == 802)
        {
          if (*a1 != 17)
            return result;
          v11 = a1 + 12;
LABEL_87:
          v12 = 65;
          v13 = v11;
          v14 = 65;
        }
        else
        {
          if (a2 != 901)
          {
            if (a2 != 1001 || *a1 != 21)
              return result;
            v15 = a1 + 9;
            if (Util_isNullOrZeroMemory((_BYTE *)a1 + 36, 128))
            {
              v15 = 0;
              v10 = 0;
            }
            else
            {
              v10 = a1[8];
            }
            result = 0;
            *a3 = v15;
LABEL_99:
            *a4 = v10;
            return result;
          }
          if (*a1 != 20)
            return result;
          v11 = a1 + 8;
          v12 = 32;
          v13 = v11;
          v14 = 32;
        }
      }
      else
      {
        if (a2 == 602)
        {
          if (*a1 != 15 && *a1 != 12)
            return result;
          goto LABEL_61;
        }
        if (a2 == 701)
        {
          if (*a1 != 13)
            return result;
          result = 0;
          *a3 = a1 + 9;
          v10 = a1[8];
          goto LABEL_99;
        }
        if (a2 != 801 || *a1 != 17)
          return result;
        v11 = a1 + 8;
        v12 = 16;
        v13 = v11;
        v14 = 16;
      }
      isNullOrZeroMemory = Util_isNullOrZeroMemory(v13, v14);
      result = 0;
      v20 = !isNullOrZeroMemory;
      if (isNullOrZeroMemory)
        v21 = 0;
      else
        v21 = (int *)v11;
      if (v20)
        v22 = v12;
      else
        v22 = 0;
      *a3 = v21;
      *a4 = v22;
      return result;
    }
    if (a2 > 501)
    {
      if (a2 == 502)
      {
        if (*a1 != 10)
          return result;
        v9 = a1 + 13;
      }
      else
      {
        if (a2 != 503)
        {
          if (a2 != 601 || *a1 != 15 && *a1 != 12)
            return result;
          goto LABEL_77;
        }
        if (*a1 != 10)
          return result;
        v9 = a1 + 17;
      }
LABEL_68:
      *a3 = v9;
      result = Util_isNullOrZeroMemory(v9, 16);
      if ((_DWORD)result)
      {
        result = 0;
        *a4 = 0;
        *a3 = 0;
        return result;
      }
LABEL_70:
      v10 = 16;
      goto LABEL_99;
    }
    if (a2 == 400)
    {
      if (*a1 != 7)
        return result;
      result = 0;
      v16 = a1 + 8;
LABEL_84:
      *a3 = v16;
      v10 = 32;
      goto LABEL_99;
    }
    if (a2 == 401)
    {
      if (*a1 != 7)
        return result;
      result = 0;
      *a3 = a1 + 16;
      v10 = 24;
      goto LABEL_99;
    }
    if (a2 != 501 || *a1 != 10)
      return result;
LABEL_15:
    v9 = a1 + 9;
    goto LABEL_68;
  }
  if (a2 > 199)
  {
    switch(a2)
    {
      case 300:
        if (*a1 == 3)
        {
          result = 0;
          v8 = a1 + 9;
          goto LABEL_50;
        }
        break;
      case 301:
        if (*a1 == 3)
        {
          result = 0;
          v16 = a1 + 17;
          goto LABEL_84;
        }
        break;
      case 302:
        if (*a1 == 3)
        {
          result = 0;
          v8 = a1 + 13;
          goto LABEL_50;
        }
        break;
      case 303:
        if (*a1 == 3)
        {
          v11 = a1 + 30;
          goto LABEL_87;
        }
        break;
      case 304:
        if (*a1 == 3)
        {
          result = 0;
          v8 = (int *)((char *)a1 + 185);
LABEL_50:
          *a3 = v8;
          goto LABEL_70;
        }
        break;
      case 305:
        if (*a1 == 3)
        {
          result = 0;
          v17 = (int *)((char *)a1 + 201);
          goto LABEL_97;
        }
        break;
      case 306:
        if (*a1 == 3)
        {
          result = 0;
          v10 = *(unsigned int *)((char *)a1 + 205);
          v23 = (int *)((char *)a1 + 209);
          if (!*(int *)((char *)a1 + 205))
            v23 = 0;
          *a3 = v23;
          goto LABEL_99;
        }
        break;
      default:
        if (a2 == 200)
        {
          if (*a1 == 2)
          {
            result = 0;
            *a3 = a1 + 10;
            v10 = a1[9];
            goto LABEL_99;
          }
        }
        else if (a2 == 201 && *a1 == 2)
        {
          goto LABEL_77;
        }
        break;
    }
    return result;
  }
  if (a2 > 99)
  {
    if (a2 != 100)
    {
      if (a2 != 101)
      {
        if (a2 != 102 || *a1 != 1)
          return result;
LABEL_61:
        result = 0;
        v17 = a1 + 9;
        goto LABEL_97;
      }
      if (*a1 > 0x12 || ((1 << *a1) & 0x4060A) == 0)
        return result;
LABEL_77:
      result = 0;
      v17 = a1 + 8;
LABEL_97:
      *a3 = v17;
LABEL_98:
      v10 = 4;
      goto LABEL_99;
    }
    v18 = *a1;
    if (*a1 <= 8)
    {
      if (v18 == 1)
      {
        v9 = a1 + 11;
      }
      else
      {
        if (v18 != 3)
          return result;
        v9 = a1 + 26;
      }
      goto LABEL_68;
    }
    if (v18 == 9)
    {
      v9 = a1 + 10;
      goto LABEL_68;
    }
    if (v18 != 18)
      return result;
    goto LABEL_15;
  }
  switch(a2)
  {
    case 1:
      result = 0;
      *a3 = a1 + 4;
      v10 = 8;
      goto LABEL_99;
    case 2:
      result = 0;
      v17 = a1 + 6;
      goto LABEL_97;
    case 3:
      result = 0;
      *a3 = a1;
      goto LABEL_98;
    case 4:
      result = 0;
      v17 = a1 + 1;
      goto LABEL_97;
    case 5:
      result = 0;
      v17 = a1 + 3;
      goto LABEL_97;
    default:
      return result;
  }
  return result;
}

unsigned int *LibCall_ACMRequirementGetType(unsigned int *result)
{
  if (result)
    return (unsigned int *)*result;
  return result;
}

uint64_t LibCall_ACMRequirementGetState(uint64_t result)
{
  if (result)
    return *(unsigned int *)(result + 4);
  return result;
}

uint64_t LibCall_ACMRequirementGetPriority(uint64_t result)
{
  if (result)
    return *(unsigned int *)(result + 8);
  return result;
}

uint64_t LibCall_ACMRequirementGetPropertyData(int *a1, int a2, int **a3, unint64_t *a4)
{
  uint64_t v4;
  int *v7;
  int *v8;
  int *v9;
  unint64_t v10;
  _DWORD *v11;
  BOOL v12;
  int v13;

  v4 = 4294967293;
  if (!a1 || !a3 || !a4)
    return v4;
  v4 = 4294967293;
  if (a2 > 399)
  {
    if (a2 > 600)
    {
      if (a2 == 601)
      {
        if (*a1 == 26)
        {
          if (a1[3] >= 0x1C)
          {
            v7 = a1 + 7;
LABEL_45:
            *a3 = v7;
            v10 = 16;
            goto LABEL_72;
          }
          return 4294967282;
        }
        return 4294967293;
      }
      if (a2 != 602)
      {
        if (a2 != 700)
          return v4;
        if (*a1 == 7)
        {
LABEL_28:
          v8 = a1 + 4;
          goto LABEL_58;
        }
        return 4294967293;
      }
      if (*a1 != 26)
        return 4294967293;
      if (a1[3] < 0x1C)
        return 4294967282;
      *a3 = a1 + 4;
      v10 = 8;
    }
    else
    {
      if (a2 == 400)
      {
        if (*a1 == 13)
        {
          v9 = a1 + 4;
LABEL_64:
          *a3 = v9;
          v10 = 32;
          goto LABEL_72;
        }
        return 4294967293;
      }
      if (a2 != 500)
      {
        if (a2 != 600)
          return v4;
        if (*a1 == 26)
        {
          if (a1[3] >= 0x1C)
          {
            v8 = a1 + 6;
LABEL_58:
            *a3 = v8;
            goto LABEL_59;
          }
          return 4294967282;
        }
        return 4294967293;
      }
      if (*a1 != 25)
        return 4294967293;
      *a3 = a1 + 4;
      v10 = 43;
    }
LABEL_72:
    v4 = 0;
    *a4 = v10;
    return v4;
  }
  if (a2 > 99)
  {
    switch(a2)
    {
      case 300:
        if (*a1 != 3)
          return 4294967293;
        v7 = a1 + 5;
        goto LABEL_45;
      case 301:
        if (*a1 != 3)
          return 4294967293;
        v9 = a1 + 13;
        goto LABEL_64;
      case 302:
        if (*a1 != 3)
          return 4294967293;
        v7 = a1 + 9;
        goto LABEL_45;
      case 303:
        if (*a1 != 3)
          return 4294967293;
        v10 = 0;
        v11 = a1 + 21;
        break;
      case 304:
        if (*a1 != 3)
          return 4294967293;
        if (a1[3] < 0x9C)
          return 4294967282;
        v8 = a1 + 41;
        goto LABEL_58;
      case 305:
        if (*a1 != 3)
          return 4294967293;
        if (a1[3] < 0x9C)
          return 4294967282;
        v8 = a1 + 42;
        goto LABEL_58;
      case 306:
        if (*a1 != 24)
          return 4294967293;
        *a3 = a1 + 5;
        v10 = a1[4];
        goto LABEL_72;
      case 307:
        if (*a1 != 24)
          return 4294967293;
        v9 = a1 + 261;
        goto LABEL_64;
      default:
        if (a2 == 100)
        {
          v13 = *a1;
          if (*a1 > 19)
          {
            if (v13 == 20 || v13 == 21)
              goto LABEL_28;
          }
          else if (v13 == 1 || v13 == 3)
          {
            goto LABEL_28;
          }
          return v4;
        }
        if (a2 != 200)
          return v4;
        if (*a1 != 2)
          return 4294967293;
        goto LABEL_28;
    }
    while (!Util_isNullOrZeroMemory((_BYTE *)v11 + v10, 16))
    {
      v12 = v10 >= 0x40;
      v10 += 16;
      if (v12)
      {
        v10 = 80;
        goto LABEL_71;
      }
    }
    if (!v10)
      v11 = 0;
LABEL_71:
    *a3 = v11;
    goto LABEL_72;
  }
  switch(a2)
  {
    case 1:
      *a3 = a1;
LABEL_59:
      v10 = 4;
      goto LABEL_72;
    case 2:
      v8 = a1 + 1;
      goto LABEL_58;
    case 3:
      v8 = a1 + 2;
      goto LABEL_58;
  }
  return v4;
}

uint64_t LibCall_ACMPing(uint64_t (*a1)(uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD), uint64_t a2, uint64_t a3)
{
  unsigned int v6;
  uint64_t v7;

  if (gACMLoggingLevel <= 0xAu)
    printf("%s: %s: called.\n", "ACM", "LibCall_ACMPing");
  v6 = 70;
  if (a1 && ((_DWORD)a3 == 47 || (_DWORD)a3 == 29))
  {
    v7 = a1(a2, a3, 0, 0, 0, 0, 0);
    if ((_DWORD)v7)
      v6 = 70;
    else
      v6 = 10;
  }
  else
  {
    v7 = 4294967293;
  }
  if (v6 >= gACMLoggingLevel)
    printf("%s: %s: returning, err = %ld.\n", "ACM", "LibCall_ACMPing", (int)v7);
  return v7;
}

uint64_t LibCall_ACMKernDoubleClickNotify(uint64_t (*a1)(uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD), uint64_t a2)
{
  unsigned int v4;
  uint64_t v5;

  if (gACMLoggingLevel <= 0xAu)
    printf("%s: %s: called.\n", "ACM", "LibCall_ACMKernDoubleClickNotify");
  v4 = 70;
  if (a1)
  {
    v5 = a1(a2, 28, 0, 0, 0, 0, 0);
    if ((_DWORD)v5)
      v4 = 70;
    else
      v4 = 10;
  }
  else
  {
    v5 = 4294967293;
  }
  if (v4 >= gACMLoggingLevel)
    printf("%s: %s: returning, err = %ld.\n", "ACM", "LibCall_ACMKernDoubleClickNotify", (int)v5);
  return v5;
}

uint64_t LibCall_ACMContextCredentialGetProperty(uint64_t (*a1)(uint64_t, uint64_t, _QWORD, __n128 *, uint64_t, uint64_t, uint64_t, __n128), uint64_t a2, __n128 *a3, unsigned __int32 a4, unsigned __int32 a5, uint64_t a6, uint64_t a7)
{
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  __n128 Property_Serialize;
  uint64_t v19;
  __n128 v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  if (gACMLoggingLevel <= 0xAu)
    printf("%s: %s: called.\n", "ACM", "LibCall_ACMContextCredentialGetProperty");
  v14 = 70;
  v15 = 4294967293;
  if (a1)
  {
    if (a3)
    {
      v15 = 4294967293;
      if (a6)
      {
        if (a7)
        {
          v19 = 24;
          Property_Serialize = LibSer_ContextCredentialGetProperty_Serialize(a3, a4, a5, &v20, &v19);
          if ((_DWORD)v16)
          {
            v15 = v16;
          }
          else if (v19 == 24)
          {
            v15 = a1(a2, 33, 0, &v20, 24, a6, a7, Property_Serialize);
            if (!(_DWORD)v15)
            {
              v14 = 10;
              goto LABEL_11;
            }
          }
          else
          {
            v15 = 4294967291;
          }
          v14 = 70;
        }
      }
    }
  }
LABEL_11:
  if (v14 >= gACMLoggingLevel)
    printf("%s: %s: returning, err = %ld.\n", "ACM", "LibCall_ACMContextCredentialGetProperty", (int)v15);
  return v15;
}

uint64_t LibCall_ACMGlobalContextCredentialGetProperty(uint64_t (*a1)(uint64_t, uint64_t, _QWORD, int *, uint64_t, uint64_t, uint64_t), uint64_t a2, int a3, int a4, uint64_t a5, uint64_t a6)
{
  unsigned int v12;
  uint64_t v13;
  uint64_t Property_Serialize;
  uint64_t v16;
  int v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  if (gACMLoggingLevel <= 0xAu)
    printf("%s: %s: called.\n", "ACM", "LibCall_ACMGlobalContextCredentialGetProperty");
  v12 = 70;
  v13 = 4294967293;
  if (a1 && a5 && a6)
  {
    v16 = 8;
    Property_Serialize = LibSer_GlobalContextCredentialGetProperty_Serialize(a3, a4, &v17, &v16);
    if ((_DWORD)Property_Serialize)
    {
      v13 = Property_Serialize;
    }
    else if (v16 == 8)
    {
      v13 = a1(a2, 27, 0, &v17, 8, a5, a6);
      if (!(_DWORD)v13)
      {
        v12 = 10;
        goto LABEL_10;
      }
    }
    else
    {
      v13 = 4294967291;
    }
    v12 = 70;
  }
LABEL_10:
  if (v12 >= gACMLoggingLevel)
    printf("%s: %s: returning, err = %ld.\n", "ACM", "LibCall_ACMGlobalContextCredentialGetProperty", (int)v13);
  return v13;
}

uint64_t LibCall_ACMContextVerifyPolicyEx(uint64_t (*a1)(uint64_t, uint64_t, _QWORD, _OWORD *, size_t, unsigned int *, unint64_t *), uint64_t a2, _OWORD *a3, char *__s1, uint64_t a5, _DWORD *a6, unsigned int a7, uint64_t a8, BOOL *a9, int **a10)
{
  uint64_t v18;
  uint64_t SerializedVerifyPolicySize;
  size_t v20;
  _OWORD *v21;
  uint64_t v22;
  unsigned int *v23;
  uint64_t v24;
  unint64_t v25;
  rsize_t v26;
  unsigned int v27;
  size_t v29;
  int *v30;
  unint64_t v31;
  size_t size;

  if (gACMLoggingLevel <= 0xAu)
    printf("%s: %s: called.\n", "ACM", "LibCall_ACMContextVerifyPolicyEx");
  v31 = 4096;
  size = 0;
  v29 = 0;
  v30 = 0;
  v18 = 4294967293;
  if (!a3 || !__s1 || !a9)
  {
LABEL_18:
    if (!(_DWORD)v18)
      goto LABEL_21;
    goto LABEL_19;
  }
  SerializedVerifyPolicySize = GetSerializedVerifyPolicySize((uint64_t)a3, __s1, a5, a8, a6, a7, &size);
  if (!(_DWORD)SerializedVerifyPolicySize)
  {
    v20 = size;
    v21 = acm_mem_alloc_data(size);
    acm_mem_alloc_info("<data>", v21, v20, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/LibCall.c", 1257, "LibCall_ACMContextVerifyPolicyEx");
    if (v21)
    {
      v22 = SerializeVerifyPolicy(a3, __s1, a5, a8, a6, a7, v21, &size);
      if ((_DWORD)v22)
      {
        v18 = v22;
        v23 = 0;
      }
      else
      {
        v23 = (unsigned int *)acm_mem_alloc_data(0x1000uLL);
        acm_mem_alloc_info("<data>", v23, 4096, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/LibCall.c", 1263, "LibCall_ACMContextVerifyPolicyEx");
        if (v23)
        {
          v24 = a1(a2, 3, 0, v21, size, v23, &v31);
          if ((_DWORD)v24)
          {
            v18 = v24;
          }
          else
          {
            v25 = v31 - 4;
            if (v31 < 4)
            {
              v18 = 4294967291;
            }
            else
            {
              *a9 = *v23 != 0;
              if (a10)
              {
                v18 = DeserializeRequirement(v23 + 1, v25, (void **)&v30, &v29);
                if (!(_DWORD)v18)
                  *a10 = v30;
              }
              else
              {
                v18 = 0;
              }
            }
          }
        }
        else
        {
          v18 = 4294967292;
        }
      }
      v26 = size;
      acm_mem_free_info("<data>", v21, size, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/LibCall.c", 1288, "LibCall_ACMContextVerifyPolicyEx");
      acm_mem_free_data(v21, v26);
      if (v23)
      {
        acm_mem_free_info("<data>", v23, 0x1000uLL, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/LibCall.c", 1291, "LibCall_ACMContextVerifyPolicyEx");
        acm_mem_free_data(v23, 0x1000uLL);
      }
    }
    else
    {
      v18 = 4294967292;
    }
    goto LABEL_18;
  }
  v18 = SerializedVerifyPolicySize;
LABEL_19:
  if (v30)
    Util_DeallocRequirement(v30);
LABEL_21:
  if ((_DWORD)v18)
    v27 = 70;
  else
    v27 = 10;
  if (v27 >= gACMLoggingLevel)
    printf("%s: %s: returning, err = %ld.\n", "ACM", "LibCall_ACMContextVerifyPolicyEx", (int)v18);
  return v18;
}

uint64_t LibCall_ACMGlobalContextVerifyPolicyEx(uint64_t (*a1)(uint64_t, uint64_t, _QWORD, _OWORD *, size_t, unsigned int *, unint64_t *), uint64_t a2, char *a3, uint64_t a4, _DWORD *a5, unsigned int a6, BOOL *a7, int **a8)
{
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  int v20[2];

  if (gACMLoggingLevel <= 0xAu)
    printf("%s: %s: called.\n", "ACM", "LibCall_ACMGlobalContextVerifyPolicyEx");
  *(_QWORD *)v20 = 0;
  v16 = LibCall_ACMContextCreate((uint64_t (*)(uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, _BYTE *, uint64_t *))a1, a2, v20, 0, 1);
  if (!(_DWORD)v16)
    v16 = LibCall_ACMContextVerifyPolicyEx(a1, a2, *(_OWORD **)v20, a3, a4, a5, a6, 0xFFFFFFFFLL, a7, a8);
  v17 = v16;
  if (*(_QWORD *)v20)
    LibCall_ACMContextDelete((void (*)(uint64_t, uint64_t, _QWORD, void *, uint64_t, _QWORD, _QWORD))a1, a2, *(void **)v20, 1);
  if ((_DWORD)v17)
    v18 = 70;
  else
    v18 = 10;
  if (v18 >= gACMLoggingLevel)
    printf("%s: %s: returning, err = %ld.\n", "ACM", "LibCall_ACMGlobalContextVerifyPolicyEx", (int)v17);
  return v17;
}

uint64_t LibCall_ACMGetEnvironmentVariable(uint64_t (*a1)(uint64_t, uint64_t, _QWORD, int *, uint64_t, uint64_t, uint64_t), uint64_t a2, int a3, uint64_t a4, uint64_t a5)
{
  unsigned int v9;
  uint64_t v10;
  int v12;

  v12 = a3;
  if (gACMLoggingLevel <= 0xAu)
    printf("%s: %s: called.\n", "ACM", "LibCall_ACMGetEnvironmentVariable");
  v9 = 70;
  v10 = 4294967293;
  if (a1 && a4 && a5)
  {
    v10 = a1(a2, 25, 0, &v12, 4, a4, a5);
    if ((_DWORD)v10)
      v9 = 70;
    else
      v9 = 10;
  }
  if (v9 >= gACMLoggingLevel)
    printf("%s: %s: returning, err = %ld.\n", "ACM", "LibCall_ACMGetEnvironmentVariable", (int)v10);
  return v10;
}

uint64_t LibCall_ACMSetEnvironmentVariable(uint64_t (*a1)(uint64_t, uint64_t, _QWORD, char *, size_t, _QWORD, _QWORD), uint64_t a2, int a3, _OWORD *a4, _OWORD *a5, uint64_t a6, const void *a7, size_t a8)
{
  uint64_t (*v15)(uint64_t, uint64_t, _QWORD, char *, size_t, _QWORD, _QWORD);
  BOOL v16;
  char *v17;
  uint64_t v18;
  unsigned int v19;
  _QWORD v21[2];

  v15 = a1;
  v21[1] = *MEMORY[0x24BDAC8D0];
  if (gACMLoggingLevel <= 0xAu)
    a1 = (uint64_t (*)(uint64_t, uint64_t, _QWORD, char *, size_t, _QWORD, _QWORD))printf("%s: %s: called.\n", "ACM", "LibCall_ACMSetEnvironmentVariable");
  if (v15 && a6 == 16 * (a5 != 0) && (a7 ? (v16 = a8 - 129 < 0xFFFFFFFFFFFFFF80) : (v16 = a8 != 0), !v16))
  {
    MEMORY[0x24BDAC7A8](a1);
    v17 = (char *)v21 - ((a8 + 59) & 0xFFFFFFFFFFFFFFF0);
    *(_DWORD *)v17 = a3;
    *((_DWORD *)v17 + 1) = 2;
    *((_DWORD *)v17 + 2) = a8;
    *(_OWORD *)(v17 + 12) = 0u;
    *(_OWORD *)(v17 + 28) = 0u;
    if (a4)
      *(_OWORD *)(v17 + 12) = *a4;
    if (a5)
      *(_OWORD *)(v17 + 28) = *a5;
    if (a8)
      memcpy(v17 + 44, a7, a8);
    v18 = v15(a2, 44, 0, (char *)v21 - ((a8 + 59) & 0xFFFFFFFFFFFFFFF0), a8 + 44, 0, 0);
    if ((_DWORD)v18)
      v19 = 70;
    else
      v19 = 10;
  }
  else
  {
    v19 = 70;
    v18 = 4294967293;
  }
  if (v19 >= gACMLoggingLevel)
    printf("%s: %s: returning, err = %ld.\n", "ACM", "LibCall_ACMSetEnvironmentVariable", (int)v18);
  return v18;
}

uint64_t LibCall_ACMTRMLoadState(uint64_t (*a1)(uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, uint64_t, uint64_t), uint64_t a2, uint64_t a3, uint64_t a4)
{
  unsigned int v8;
  uint64_t v9;

  if (gACMLoggingLevel <= 0xAu)
    printf("%s: %s: called.\n", "ACM", "LibCall_ACMTRMLoadState");
  v8 = 70;
  v9 = 4294967293;
  if (a1 && a3 && a4)
  {
    v9 = a1(a2, 38, 0, 0, 0, a3, a4);
    if ((_DWORD)v9)
      v8 = 70;
    else
      v8 = 10;
  }
  if (v8 >= gACMLoggingLevel)
    printf("%s: %s: returning, err = %ld.\n", "ACM", "LibCall_ACMTRMLoadState", (int)v9);
  return v9;
}

uint64_t LibCall_ACMTRMSaveState(uint64_t (*a1)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, _QWORD, _QWORD), uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  BOOL v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;

  if (gACMLoggingLevel <= 0xAu)
    printf("%s: %s: called.\n", "ACM", "LibCall_ACMTRMSaveState");
  if (a1)
  {
    v10 = (unint64_t)(a4 - 8193) < 0xFFFFFFFFFFFFE000;
    if (!a3)
      v10 = a4 != 0;
    v11 = 70;
    if (!v10)
    {
      if (a5)
        v12 = 43;
      else
        v12 = 39;
      v13 = a1(a2, v12, 0, a3, a4, 0, 0);
      if ((_DWORD)v13)
        v11 = 70;
      else
        v11 = 10;
      goto LABEL_13;
    }
  }
  else
  {
    v11 = 70;
  }
  v13 = 4294967293;
LABEL_13:
  if (v11 >= gACMLoggingLevel)
    printf("%s: %s: returning, err = %ld.\n", "ACM", "LibCall_ACMTRMSaveState", (int)v13);
  return v13;
}

uint64_t LibCall_ACMContextLoadFromImage(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(uint64_t, uint64_t, _QWORD, char *, uint64_t, _OWORD *, unint64_t *);
  unsigned int v11;
  uint64_t v12;
  _DWORD *v13;
  uint64_t v14;
  int v15;
  unint64_t v17;
  _OWORD v18[17];
  uint64_t v19;
  char v20;
  _BYTE v21[3];
  __int16 v22;
  uint64_t v23;

  v1 = MEMORY[0x24BDAC7A8](a1);
  v3 = v2;
  v5 = v4;
  v7 = v6;
  v9 = v8;
  v10 = (uint64_t (*)(uint64_t, uint64_t, _QWORD, char *, uint64_t, _OWORD *, unint64_t *))v1;
  v23 = *MEMORY[0x24BDAC8D0];
  if (gACMLoggingLevel <= 0xAu)
    printf("%s: %s: called.\n", "ACM", "LibCall_ACMContextLoadFromImage");
  v11 = 70;
  v12 = 4294967293;
  if (v10 && v7 && (unint64_t)(v5 - 4097) >= 0xFFFFFFFFFFFFF000)
  {
    v13 = acm_mem_alloc(0x14uLL);
    acm_mem_alloc_info("ACMHandleWithPayload", v13, 20, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/LibCall.c", 1447, "LibCall_ACMContextLoadFromImage");
    if (v13)
    {
      bzero(v21, 0x1005uLL);
      v20 = 1;
      *(_WORD *)&v21[1] = 6;
      v22 = v5;
      __memcpy_chk();
      memset(v18, 0, sizeof(v18));
      v19 = 0;
      v17 = 280;
      v14 = v10(v9, 48, 0, &v20, 4102, v18, &v17);
      if ((_DWORD)v14)
      {
        v12 = v14;
      }
      else if (v17 < 0x18)
      {
        v12 = 4294967291;
      }
      else
      {
        if (LOBYTE(v18[0]))
        {
          v12 = 0;
          v15 = DWORD1(v18[1]);
          *(_OWORD *)v13 = *(_OWORD *)((char *)v18 + 4);
          v13[4] = v15;
          *v3 = v13;
          v11 = 10;
          goto LABEL_11;
        }
        v12 = 4294967280;
      }
      acm_mem_free_info("ACMHandleWithPayload", v13, 0x14uLL, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/LibCall.c", 1508, "LibCall_ACMContextLoadFromImage");
      acm_mem_free(v13, 0x14uLL);
      v11 = 70;
    }
    else
    {
      v11 = 70;
      v12 = 4294967292;
    }
  }
LABEL_11:
  if (v11 >= gACMLoggingLevel)
    printf("%s: %s: returning, err = %ld.\n", "ACM", "LibCall_ACMContextLoadFromImage", (int)v12);
  return v12;
}

uint64_t LibCall_ACMContextUnloadToImage(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  void *v5;
  __int128 *v6;
  __int128 *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(uint64_t, uint64_t, _QWORD, int *, uint64_t, _BYTE *, int *);
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  int v16[2];
  _BYTE v17[2];
  unsigned __int16 v18;
  size_t __n;
  int v20;
  __int128 v21;
  uint64_t v22;

  v1 = MEMORY[0x24BDAC7A8](a1);
  v3 = v2;
  v5 = v4;
  v7 = v6;
  v9 = v8;
  v10 = (uint64_t (*)(uint64_t, uint64_t, _QWORD, int *, uint64_t, _BYTE *, int *))v1;
  v22 = *MEMORY[0x24BDAC8D0];
  if (gACMLoggingLevel <= 0xAu)
    printf("%s: %s: called.\n", "ACM", "LibCall_ACMContextUnloadToImage");
  v11 = 70;
  v12 = 4294967293;
  if (v10 && v5 && v3)
  {
    v21 = 0uLL;
    v20 = 1310721;
    if (v7)
      v21 = *v7;
    else
      v21 = 0uLL;
    bzero(v17, 0x1106uLL);
    *(_QWORD *)v16 = 4358;
    v13 = v10(v9, 49, 0, &v20, 20, v17, v16);
    if ((_DWORD)v13)
    {
      v12 = v13;
LABEL_18:
      v11 = 70;
      goto LABEL_14;
    }
    if (*(_QWORD *)v16 < 6uLL)
    {
      v11 = 70;
      v12 = 4294967291;
    }
    else
    {
      if (v17[0])
      {
        v15 = v18;
        v12 = Util_ReadFromBuffer((uint64_t)v17, *(size_t *)v16, &v15, v5, (unsigned __int16)__n);
        if (!(_DWORD)v12)
        {
          *v3 = v15 - v18;
          v11 = 10;
          goto LABEL_14;
        }
        goto LABEL_18;
      }
      v11 = 70;
      v12 = 4294967280;
    }
  }
LABEL_14:
  if (v11 >= gACMLoggingLevel)
    printf("%s: %s: returning, err = %ld.\n", "ACM", "LibCall_ACMContextUnloadToImage", (int)v12);
  return v12;
}

uint64_t LibCall_ACMContextSetData(uint64_t (*a1)(uint64_t, uint64_t, _QWORD, void *, size_t, _QWORD, _QWORD), uint64_t a2, _OWORD *a3, int a4, _DWORD *a5, unsigned int a6, const void *a7, size_t a8)
{
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  size_t v19;
  void *v20;
  uint64_t v21;
  rsize_t v22;
  size_t size;

  if (gACMLoggingLevel <= 0xAu)
    printf("%s: %s: called.\n", "ACM", "LibCall_ACMContextSetData");
  size = 0;
  v16 = 70;
  v17 = 4294967293;
  if (a1 && a3)
  {
    if ((a7 != 0) != (a8 != 0))
    {
      v16 = 70;
      v17 = 4294967293;
    }
    else if (a8 > 0xE00)
    {
      v16 = 70;
      v17 = 4294967276;
    }
    else
    {
      v18 = LibSer_StorageSetData_GetSize(a8, a5, a6, &size);
      if ((_DWORD)v18)
      {
        v17 = v18;
        v16 = 70;
      }
      else
      {
        v19 = size;
        v20 = acm_mem_alloc_data(size);
        acm_mem_alloc_info("<data>", v20, v19, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/LibCall.c", 1593, "LibCall_ACMContextSetData");
        if (v20)
        {
          v21 = LibSer_StorageSetData_Serialize(a3, a4, a7, a8, a5, a6, (uint64_t)v20, &size);
          if (!(_DWORD)v21)
            v21 = a1(a2, 40, 0, v20, size, 0, 0);
          v17 = v21;
          v22 = size;
          acm_mem_free_info("<data>", v20, size, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/LibCall.c", 1605, "LibCall_ACMContextSetData");
          acm_mem_free_data(v20, v22);
          if ((_DWORD)v17)
            v16 = 70;
          else
            v16 = 10;
        }
        else
        {
          v16 = 70;
          v17 = 4294967292;
        }
      }
    }
  }
  if (v16 >= gACMLoggingLevel)
    printf("%s: %s: returning, err = %ld.\n", "ACM", "LibCall_ACMContextSetData", (int)v17);
  return v17;
}

uint64_t LibCall_ACMContextGetData(uint64_t (*a1)(uint64_t, uint64_t, _QWORD, void *, size_t, uint64_t, uint64_t), uint64_t a2, _OWORD *a3, int a4, char a5, _DWORD *a6, unsigned int a7, uint64_t a8, uint64_t a9)
{
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  size_t v21;
  void *v22;
  uint64_t Data_Serialize;
  rsize_t v24;
  uint64_t v26;
  size_t size;

  if (gACMLoggingLevel <= 0xAu)
  {
    v16 = a8;
    printf("%s: %s: called.\n", "ACM", "LibCall_ACMContextGetData");
    a8 = v16;
  }
  size = 0;
  v17 = 70;
  v18 = 4294967293;
  if (a1)
  {
    v26 = a2;
    if (a3)
    {
      v18 = 4294967293;
      if (a8)
      {
        if (a9)
        {
          v19 = a8;
          v20 = LibSer_StorageGetData_GetSize(a6, a7, &size);
          if ((_DWORD)v20)
          {
            v18 = v20;
            v17 = 70;
          }
          else
          {
            v21 = size;
            v22 = acm_mem_alloc_data(size);
            acm_mem_alloc_info("<data>", v22, v21, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/LibCall.c", 1628, "LibCall_ACMContextGetData");
            if (v22)
            {
              Data_Serialize = LibSer_StorageGetData_Serialize(a3, a4, a5, a6, a7, (uint64_t)v22, &size);
              if (!(_DWORD)Data_Serialize)
                Data_Serialize = a1(v26, 41, 0, v22, size, v19, a9);
              v18 = Data_Serialize;
              v24 = size;
              acm_mem_free_info("<data>", v22, size, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/LibCall.c", 1640, "LibCall_ACMContextGetData");
              acm_mem_free_data(v22, v24);
              if ((_DWORD)v18)
                v17 = 70;
              else
                v17 = 10;
            }
            else
            {
              v17 = 70;
              v18 = 4294967292;
            }
          }
        }
      }
    }
  }
  if (v17 >= gACMLoggingLevel)
    printf("%s: %s: returning, err = %ld.\n", "ACM", "LibCall_ACMContextGetData", (int)v18);
  return v18;
}

uint64_t LibCall_ACMPublishTrustedAccessories(uint64_t (*a1)(uint64_t, uint64_t, _QWORD, char *, size_t, _QWORD, _QWORD), uint64_t a2, const void *a3, size_t a4)
{
  uint64_t (*v7)(uint64_t, uint64_t, _QWORD, char *, size_t, _QWORD, _QWORD);
  BOOL v8;
  char v9;
  unsigned int v10;
  uint64_t v11;
  _DWORD *v12;
  _QWORD v14[2];

  v7 = a1;
  v14[1] = *MEMORY[0x24BDAC8D0];
  if (gACMLoggingLevel <= 0xAu)
    a1 = (uint64_t (*)(uint64_t, uint64_t, _QWORD, char *, size_t, _QWORD, _QWORD))printf("%s: %s: called.\n", "ACM", "LibCall_ACMPublishTrustedAccessories");
  if (v7)
  {
    if (a3)
      v8 = 1;
    else
      v8 = a4 == 0;
    v9 = !v8;
    v10 = 70;
    v11 = 4294967293;
    if ((a4 & 0xF) == 0 && a4 <= 0x100 && (v9 & 1) == 0)
    {
      MEMORY[0x24BDAC7A8](a1);
      v12 = (_DWORD *)((char *)v14 - ((a4 + 23) & 0xFFFFFFFFFFFFFFF0));
      *v12 = 1;
      v12[1] = a4;
      if (a4)
        memcpy(v12 + 2, a3, a4);
      v11 = v7(a2, 45, 0, (char *)v14 - ((a4 + 23) & 0xFFFFFFFFFFFFFFF0), a4 + 8, 0, 0);
      if ((_DWORD)v11)
        v10 = 70;
      else
        v10 = 10;
    }
  }
  else
  {
    v10 = 70;
    v11 = 4294967293;
  }
  if (v10 >= gACMLoggingLevel)
    printf("%s: %s: returning, err = %ld.\n", "ACM", "LibCall_ACMPublishTrustedAccessories", (int)v11);
  return v11;
}

uint64_t LibCall_ACMContextGetInfo(uint64_t (*a1)(uint64_t, uint64_t, _QWORD, int *, uint64_t, _OWORD *, unint64_t *), uint64_t a2, __int128 *a3, int a4, _QWORD *a5)
{
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v14;
  _OWORD v15[9];
  int v16;
  __int128 v17;
  int v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  if (gACMLoggingLevel <= 0xAu)
    printf("%s: %s: called.\n", "ACM", "LibCall_ACMContextGetInfo");
  v10 = 70;
  v11 = 4294967293;
  if (a3 && a1 && a5)
  {
    v16 = 1;
    v18 = a4;
    v17 = *a3;
    memset(v15, 0, 140);
    v14 = 140;
    v12 = a1(a2, 46, 0, &v16, 24, v15, &v14);
    if ((_DWORD)v12)
    {
      v11 = v12;
    }
    else if (v14 < 0xC)
    {
      v11 = 4294967291;
    }
    else
    {
      if (LODWORD(v15[0]))
      {
        v11 = 0;
        *a5 = *(_QWORD *)((char *)v15 + 4);
        v10 = 10;
        goto LABEL_10;
      }
      v11 = 4294967281;
    }
    v10 = 70;
  }
LABEL_10:
  if (v10 >= gACMLoggingLevel)
    printf("%s: %s: returning, err = %ld.\n", "ACM", "LibCall_ACMContextGetInfo", (int)v11);
  return v11;
}

uint64_t verifyAclConstraintInternal(uint64_t (*a1)(uint64_t, uint64_t, _QWORD, void *, size_t, unsigned int *, unint64_t *), uint64_t a2, uint64_t a3, _OWORD *a4, const void *a5, uint64_t a6, const void *a7, unsigned int a8, unsigned __int8 a9, _DWORD *a10, unsigned int a11, unsigned int a12, BOOL *a13, int **a14)
{
  uint64_t v20;
  uint64_t SerializedVerifyAclConstraintSize;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  unsigned int *v25;
  uint64_t v26;
  unint64_t v27;
  rsize_t v28;
  unsigned int v29;
  size_t v33;
  int *v34;
  unint64_t v35;
  size_t v36;

  if (gACMLoggingLevel <= 0xAu)
    printf("%s: %s: called.\n", "ACM", "verifyAclConstraintInternal");
  v36 = 0;
  v34 = 0;
  v35 = 4096;
  v33 = 0;
  v20 = 4294967293;
  if (!a4 || !a5 || !a6 || !a13)
  {
LABEL_19:
    if (!(_DWORD)v20)
      goto LABEL_22;
    goto LABEL_20;
  }
  SerializedVerifyAclConstraintSize = GetSerializedVerifyAclConstraintSize(a3, (uint64_t)a4, (uint64_t)a5, a6, (uint64_t)a7, a8, a9, a12, a10, a11, &v36);
  if (!(_DWORD)SerializedVerifyAclConstraintSize)
  {
    v22 = v36;
    v23 = acm_mem_alloc_data(v36);
    acm_mem_alloc_info("<data>", v23, v22, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/LibCall.c", 1929, "verifyAclConstraintInternal");
    if (v23)
    {
      v24 = SerializeVerifyAclConstraint(a3, a4, a5, a6, a7, a8, a9, a12, a10, a11, (uint64_t)v23, &v36);
      if ((_DWORD)v24)
      {
        v20 = v24;
        v25 = 0;
      }
      else
      {
        v25 = (unsigned int *)acm_mem_alloc_data(0x1000uLL);
        acm_mem_alloc_info("<data>", v25, 4096, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/LibCall.c", 1935, "verifyAclConstraintInternal");
        if (v25)
        {
          v26 = a1(a2, a3, 0, v23, v36, v25, &v35);
          if ((_DWORD)v26)
          {
            v20 = v26;
          }
          else
          {
            v27 = v35 - 4;
            if (v35 < 4)
            {
              v20 = 4294967291;
            }
            else
            {
              *a13 = *v25 != 0;
              if (a14)
              {
                v20 = DeserializeRequirement(v25 + 1, v27, (void **)&v34, &v33);
                if (!(_DWORD)v20)
                  *a14 = v34;
              }
              else
              {
                v20 = 0;
              }
            }
          }
        }
        else
        {
          v20 = 4294967292;
        }
      }
      v28 = v36;
      acm_mem_free_info("<data>", v23, v36, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/LibCall.c", 1958, "verifyAclConstraintInternal");
      acm_mem_free_data(v23, v28);
      if (v25)
      {
        acm_mem_free_info("<data>", v25, 0x1000uLL, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/LibCall.c", 1961, "verifyAclConstraintInternal");
        acm_mem_free_data(v25, 0x1000uLL);
      }
    }
    else
    {
      v20 = 4294967292;
    }
    goto LABEL_19;
  }
  v20 = SerializedVerifyAclConstraintSize;
LABEL_20:
  if (v34)
    Util_DeallocRequirement(v34);
LABEL_22:
  if ((_DWORD)v20)
    v29 = 70;
  else
    v29 = 10;
  if (v29 >= gACMLoggingLevel)
    printf("%s: %s: returning, err = %ld.\n", "ACM", "verifyAclConstraintInternal", (int)v20);
  return v20;
}

uint64_t LibCall_ACMSecContextProcessAcl(uint64_t (*a1)(uint64_t, uint64_t, _QWORD, char *, uint64_t, int *, uint64_t *), uint64_t a2, _OWORD *a3, unsigned __int8 *a4, uint64_t a5, unsigned __int8 *a6, uint64_t a7, _DWORD *a8, unsigned int a9, unsigned int a10, _DWORD *a11, BOOL *a12)
{
  return processAclCommandInternal(a1, a2, 12, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, 0, 0);
}

uint64_t processAclCommandInternal(uint64_t (*a1)(uint64_t, uint64_t, _QWORD, char *, uint64_t, int *, uint64_t *), uint64_t a2, int a3, _OWORD *a4, unsigned __int8 *a5, uint64_t a6, unsigned __int8 *a7, uint64_t a8, _DWORD *a9, unsigned int a10, unsigned int a11, _DWORD *a12, BOOL *a13, _QWORD *a14, unint64_t *a15)
{
  unsigned int v19;
  uint64_t v20;
  unsigned __int8 *v21;
  uint64_t v22;
  unsigned __int8 *v23;
  unsigned int v24;
  uint64_t v25;
  BOOL v26;
  int v27;
  uint64_t SerializedProcessAclSize;
  uint64_t v29;
  void *v30;
  _DWORD *v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  void *v35;
  rsize_t v36;
  unsigned int v37;
  int v39;
  unint64_t v44;
  size_t v45;

  v19 = gACMLoggingLevel;
  if (gACMLoggingLevel <= 0xAu)
  {
    printf("%s: %s: called.\n", "ACM", "processAclCommandInternal");
    v19 = gACMLoggingLevel;
  }
  if (v19 <= 0x14)
  {
    printf("%s: %s: command = %u.\n", "ACM", "processAclCommandInternal", a3);
    v19 = gACMLoggingLevel;
    if (gACMLoggingLevel <= 0x14u)
    {
      printf("%s: %s: context = %p.\n", "ACM", "processAclCommandInternal", a4);
      v19 = gACMLoggingLevel;
      if (gACMLoggingLevel <= 0x14u)
      {
        printf("%s: %s: acl = %p, aclLength = %zu.\n", "ACM", "processAclCommandInternal", a5, a6);
        v19 = gACMLoggingLevel;
        if (gACMLoggingLevel <= 0x14u)
        {
          printf("%s: %s (len=%u): acl:", "ACM", "processAclCommandInternal", a6);
          v19 = gACMLoggingLevel;
        }
      }
    }
  }
  if (a6)
  {
    v20 = a6;
    v21 = a5;
    do
    {
      if (v19 <= 0x14)
      {
        printf("%02x ", *v21);
        v19 = gACMLoggingLevel;
      }
      ++v21;
      --v20;
    }
    while (v20);
  }
  if (v19 < 0x15)
  {
    putchar(10);
    v19 = gACMLoggingLevel;
    if (gACMLoggingLevel <= 0x14u)
    {
      printf("%s: %s: operation = %p, operationLength = %zu.\n", "ACM", "processAclCommandInternal", a7, a8);
      v19 = gACMLoggingLevel;
      if (gACMLoggingLevel <= 0x14u)
      {
        printf("%s: %s (len=%u): operation:", "ACM", "processAclCommandInternal", a8);
        v19 = gACMLoggingLevel;
      }
    }
  }
  v39 = a3;
  if (a8)
  {
    v22 = a8;
    v23 = a7;
    do
    {
      if (v19 <= 0x14)
      {
        printf("%02x ", *v23);
        v19 = gACMLoggingLevel;
      }
      ++v23;
      --v22;
    }
    while (v22);
  }
  if (v19 < 0x15)
  {
    putchar(10);
    if (gACMLoggingLevel <= 0x14u)
    {
      printf("%s: %s: parameters = %p, parameterCount = %u.\n", "ACM", "processAclCommandInternal", a9, a10);
      if (gACMLoggingLevel <= 0x14u)
      {
        printf("%s: %s: maxGlobalCredentialAge = %u.\n", "ACM", "processAclCommandInternal", a11);
        if (gACMLoggingLevel <= 0x14u)
        {
          printf("%s: %s: constraintState = %p.\n", "ACM", "processAclCommandInternal", a12);
          if (gACMLoggingLevel <= 0x14u)
            printf("%s: %s: requirePasscode = %p.\n", "ACM", "processAclCommandInternal", a13);
        }
      }
    }
  }
  if (a7 || a9 || a12)
  {
    if (a5)
      v26 = a6 == 0;
    else
      v26 = 1;
    v27 = v26;
    v24 = 70;
    v25 = 4294967293;
    if (!a7)
      goto LABEL_79;
    if (!a8)
      goto LABEL_79;
    if (v27)
      goto LABEL_79;
    v24 = 70;
    v25 = 4294967293;
    if ((a9 != 0) != (a10 != 0) || !a12)
      goto LABEL_79;
    v45 = 0;
    v44 = 4096;
    if (gACMLoggingLevel <= 0xAu)
      printf("%s: %s: called.\n", "ACM", "processAclInternal");
    SerializedProcessAclSize = GetSerializedProcessAclSize((uint64_t)a4, (uint64_t)a5, a6, (uint64_t)a7, a8, a11, a9, a10, &v45);
    if ((_DWORD)SerializedProcessAclSize)
    {
      v25 = SerializedProcessAclSize;
      v37 = 70;
      goto LABEL_74;
    }
    v29 = v45;
    v30 = acm_mem_alloc_data(v45);
    acm_mem_alloc_info("<data>", v30, v29, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/LibCall.c", 1776, "processAclInternal");
    if (!v30)
    {
      v37 = 70;
      v25 = 4294967292;
      goto LABEL_74;
    }
    v44 = 4096;
    v31 = acm_mem_alloc_data(0x1000uLL);
    acm_mem_alloc_info("<data>", v31, 4096, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/LibCall.c", 1780, "processAclInternal");
    if (!v31)
    {
      v35 = 0;
      v34 = 0;
      v25 = 4294967292;
      goto LABEL_68;
    }
    v32 = SerializeProcessAcl(a4, a5, a6, a7, a8, a11, a9, a10, (uint64_t)v30, &v45);
    if ((_DWORD)v32 || (v32 = a1(a2, v39, 0, (char *)v30, v45, v31, (uint64_t *)&v44), (_DWORD)v32))
    {
      v25 = v32;
      v34 = 0;
      v35 = 0;
      goto LABEL_67;
    }
    v33 = v44;
    if (v44 >= 8)
    {
      *a12 = *v31;
      if (a13)
        *a13 = v31[1] != 0;
      v25 = 0;
      v34 = 0;
      if (v39 != 30 || !a14)
      {
        v35 = 0;
        goto LABEL_67;
      }
      v35 = 0;
      if (!a15)
      {
LABEL_67:
        acm_mem_free_info("<data>", v31, 0x1000uLL, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/LibCall.c", 1817, "processAclInternal");
        acm_mem_free_data(v31, 0x1000uLL);
LABEL_68:
        v36 = v45;
        acm_mem_free_info("<data>", v30, v45, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/LibCall.c", 1821, "processAclInternal");
        acm_mem_free_data(v30, v36);
        if ((_DWORD)v25 && v35)
        {
          acm_mem_free_info("<data>", v35, v34, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/LibCall.c", 1825, "processAclInternal");
          acm_mem_free_data(v35, v34);
          v37 = 70;
        }
        else if ((_DWORD)v25)
        {
          v37 = 70;
        }
        else
        {
          v37 = 10;
        }
LABEL_74:
        if (v37 >= gACMLoggingLevel)
          printf("%s: %s: returning, err = %ld.\n", "ACM", "processAclInternal", (int)v25);
        goto LABEL_76;
      }
      if (v33 >= 0xC)
      {
        v34 = v31[2];
        if ((_DWORD)v34)
        {
          if (v33 >= v34 + 12)
          {
            v35 = acm_mem_alloc_data(v31[2]);
            acm_mem_alloc_info("<data>", v35, v34, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/LibCall.c", 1805, "processAclInternal");
            if (v35)
            {
              memcpy(v35, v31 + 3, v34);
              v25 = 0;
              *a14 = v35;
              *a15 = v34;
            }
            else
            {
              v25 = 4294967292;
            }
            goto LABEL_67;
          }
          goto LABEL_84;
        }
        v34 = 0;
        v35 = 0;
        v25 = 0;
        goto LABEL_67;
      }
    }
    v34 = 0;
LABEL_84:
    v35 = 0;
    v25 = 4294967291;
    goto LABEL_67;
  }
  if (a4)
  {
    v24 = 70;
    v25 = 4294967293;
    goto LABEL_79;
  }
  v24 = 70;
  v25 = 4294967293;
  if (a5 && a13 && a6)
  {
    v25 = aclRequiresPasscodeInternal(a1, a2, a5, a6, a13);
LABEL_76:
    if ((_DWORD)v25)
      v24 = 70;
    else
      v24 = 10;
  }
LABEL_79:
  if (v24 >= gACMLoggingLevel)
    printf("%s: %s: returning, err = %ld.\n", "ACM", "processAclCommandInternal", (int)v25);
  return v25;
}

uint64_t LibCall_ACMSecContextProcessAclAndCopyAuthMethod(uint64_t (*a1)(uint64_t, uint64_t, _QWORD, char *, uint64_t, int *, uint64_t *), uint64_t a2, _OWORD *a3, unsigned __int8 *a4, uint64_t a5, unsigned __int8 *a6, uint64_t a7, _DWORD *a8, unsigned int a9, unsigned int a10, _DWORD *a11, BOOL *a12, _QWORD *a13, unint64_t *a14)
{
  return processAclCommandInternal(a1, a2, 30, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14);
}

uint64_t LibCall_ACMSecContextVerifyAclConstraintAndCopyRequirement(uint64_t (*a1)(uint64_t, uint64_t, _QWORD, void *, size_t, unsigned int *, unint64_t *), uint64_t a2, _OWORD *a3, const void *a4, uint64_t a5, const void *a6, unsigned int a7, unsigned __int8 a8, _DWORD *a9, unsigned int a10, unsigned int a11, BOOL *a12, int **a13)
{
  unsigned int v21;
  uint64_t v22;

  if (gACMLoggingLevel <= 0xAu)
    printf("%s: %s: called.\n", "ACM", "LibCall_ACMSecContextVerifyAclConstraintAndCopyRequirement");
  v21 = 70;
  v22 = 4294967293;
  if (a3)
  {
    if (a4)
    {
      if (a5)
      {
        v21 = 70;
        v22 = 4294967293;
        if ((a9 != 0) == (a10 != 0))
        {
          if (a12)
          {
            v22 = verifyAclConstraintInternal(a1, a2, 11, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13);
            if ((_DWORD)v22)
              v21 = 70;
            else
              v21 = 10;
          }
        }
      }
    }
  }
  if (v21 >= gACMLoggingLevel)
    printf("%s: %s: returning, err = %ld.\n", "ACM", "LibCall_ACMSecContextVerifyAclConstraintAndCopyRequirement", (int)v22);
  return v22;
}

uint64_t LibCall_ACMSecCredentialProviderEnrollmentStateChangedForUser(uint64_t (*a1)(uint64_t, uint64_t, _QWORD, char *, uint64_t, _QWORD, _QWORD), uint64_t a2, const void *a3, unsigned int a4, _OWORD *a5, uint64_t a6, int a7, _OWORD *a8, uint64_t a9)
{
  uint64_t (*v16)(uint64_t, uint64_t, _QWORD, char *, uint64_t, _QWORD, _QWORD);
  BOOL v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  size_t v21;
  char *v22;
  _QWORD v24[2];

  v16 = a1;
  v24[1] = *MEMORY[0x24BDAC8D0];
  if (gACMLoggingLevel <= 0xAu)
    a1 = (uint64_t (*)(uint64_t, uint64_t, _QWORD, char *, uint64_t, _QWORD, _QWORD))printf("%s: %s: called.\n", "ACM", "LibCall_ACMSecCredentialProviderEnrollmentStateChangedForUser");
  v17 = a4 - 113 < 0xFFFFFF90;
  if (!a3)
    v17 = a4 != 0;
  if (v17)
  {
    v18 = 70;
    v19 = 4294967293;
  }
  else
  {
    v18 = 70;
    v19 = 4294967293;
    if (a8)
    {
      if (a9 == 16)
      {
        v19 = 4294967293;
        if (a5)
        {
          if (a6 == 16)
          {
            v20 = a4 + 36;
            MEMORY[0x24BDAC7A8](a1);
            v22 = (char *)v24 - ((v21 + 51) & 0x1FFFFFFF0);
            *(_DWORD *)v22 = a7;
            *(_OWORD *)(v22 + 4) = *a8;
            *(_OWORD *)(v22 + 20) = *a5;
            if (a3)
              memcpy(v22 + 36, a3, v21);
            v19 = v16(a2, 14, 0, v22, v20, 0, 0);
            if ((_DWORD)v19)
              v18 = 70;
            else
              v18 = 10;
          }
        }
      }
    }
  }
  if (v18 >= gACMLoggingLevel)
    printf("%s: %s: returning, err = %ld.\n", "ACM", "LibCall_ACMSecCredentialProviderEnrollmentStateChangedForUser", (int)v19);
  return v19;
}

uint64_t LibCall_ACMSecSetBuiltinBiometry(uint64_t (*a1)(uint64_t, uint64_t, _QWORD, char *, size_t, _QWORD, _QWORD), uint64_t a2, char a3)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  char v9;

  v9 = a3;
  if (gACMLoggingLevel <= 0xAu)
    printf("%s: %s: called.\n", "ACM", "LibCall_ACMSecSetBuiltinBiometry");
  v5 = LibCall_ACMSetEnvironmentVariable(a1, a2, 30, 0, 0, 0, &v9, 1uLL);
  v6 = v5;
  if ((_DWORD)v5)
    v7 = 70;
  else
    v7 = 10;
  if (v7 >= gACMLoggingLevel)
    printf("%s: %s: returning, err = %ld.\n", "ACM", "LibCall_ACMSecSetBuiltinBiometry", (int)v5);
  return v6;
}

uint64_t LibCall_ACMSecSetBiometryAvailability(uint64_t (*a1)(uint64_t, uint64_t, _QWORD, int *, uint64_t, uint64_t, uint64_t), uint64_t a2, char a3, int a4)
{
  uint64_t v8;
  unsigned int v9;
  char v10;
  uint64_t v11;
  char v13;
  unint64_t v14;
  char v15;

  if (gACMLoggingLevel <= 0xAu)
    printf("%s: %s: called.\n", "ACM", "LibCall_ACMSecSetBiometryAvailability");
  v15 = 0;
  v14 = 1;
  v13 = 0;
  v8 = LibCall_ACMGetEnvironmentVariable(a1, a2, 6, (uint64_t)&v15, (uint64_t)&v14);
  if ((_DWORD)v8)
  {
    v11 = v8;
    v9 = 70;
  }
  else
  {
    v9 = 70;
    if (v14 > 1)
    {
      v11 = 4294967291;
    }
    else
    {
      v10 = v15 & ~a3;
      if (a4)
        v10 = v15 | a3;
      v13 = v10;
      v11 = LibCall_ACMSetEnvironmentVariable((uint64_t (*)(uint64_t, uint64_t, _QWORD, char *, size_t, _QWORD, _QWORD))a1, a2, 6, 0, 0, 0, &v13, 1uLL);
      if ((_DWORD)v11)
        v9 = 70;
      else
        v9 = 10;
    }
  }
  if (v9 >= gACMLoggingLevel)
    printf("%s: %s: returning, err = %ld.\n", "ACM", "LibCall_ACMSecSetBiometryAvailability", (int)v11);
  return v11;
}

uint64_t LibCall_ACMSecContextGetUnlockSecret(uint64_t (*a1)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD), uint64_t a2, _OWORD *a3, _DWORD *a4, unsigned int a5, void *a6, size_t *a7, _BYTE *a8)
{
  unsigned int v16;
  uint64_t v17;
  uint64_t UnlockSecret_Serialize;
  size_t v19;
  char v21;
  size_t __n;
  void *__src;
  uint64_t v24;
  uint64_t v25;
  _BYTE v26[129];
  _OWORD v27[4];
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  if (gACMLoggingLevel <= 0xAu)
    printf("%s: %s: called.\n", "ACM", "LibCall_ACMSecContextGetUnlockSecret");
  memset(v27, 0, sizeof(v27));
  v25 = 64;
  v24 = 129;
  if (!a3)
    goto LABEL_18;
  v16 = 70;
  v17 = 4294967293;
  if (!a6 || !a7 || !a8)
    goto LABEL_14;
  if ((a4 != 0) != (a5 != 0))
  {
LABEL_18:
    v16 = 70;
    v17 = 4294967293;
    goto LABEL_14;
  }
  UnlockSecret_Serialize = LibSer_GetUnlockSecret_Serialize(a3, a4, a5, v27, &v25);
  if ((_DWORD)UnlockSecret_Serialize
    || (UnlockSecret_Serialize = a1(a2, 50, 0, v27, v25, v26, &v24), (_DWORD)UnlockSecret_Serialize)
    || (__n = 0,
        __src = 0,
        v21 = 0,
        UnlockSecret_Serialize = LibSer_GetUnlockSecretResponse_Deserialize(v26, v24, &__src, &__n, &v21),
        (_DWORD)UnlockSecret_Serialize))
  {
    v17 = UnlockSecret_Serialize;
  }
  else
  {
    v19 = __n;
    if (*a7 < __n)
    {
      v17 = 4294967276;
    }
    else
    {
      if (__src)
      {
        memcpy(a6, __src, __n);
        v17 = 0;
        *a7 = v19;
        *a8 = v21;
        v16 = 10;
        goto LABEL_14;
      }
      v17 = 4294967291;
    }
  }
  v16 = 70;
LABEL_14:
  if (v16 >= gACMLoggingLevel)
    printf("%s: %s: returning, err = %ld.\n", "ACM", "LibCall_ACMSecContextGetUnlockSecret", (int)v17);
  return v17;
}

uint64_t LibCall_ACMSEPControl(uint64_t (*a1)(uint64_t, uint64_t, _QWORD, char *, uint64_t, unsigned int *, unint64_t *), uint64_t a2, const void *a3, size_t a4, uint64_t a5, _DWORD *a6, unsigned int a7, void *a8, size_t *a9)
{
  BOOL v16;
  uint64_t Size;
  uint64_t v18;
  uint64_t v19;
  _OWORD *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  void *v26;
  size_t v27;
  uint64_t v29;
  void *v30;
  size_t v31;
  const void *v32;
  unint64_t v33;
  uint64_t v34;
  unsigned int v35[256];
  uint64_t v36;

  v30 = a8;
  v36 = *MEMORY[0x24BDAC8D0];
  if (gACMLoggingLevel <= 0xAu)
    printf("%s: %s: called.\n", "ACM", "LibCall_ACMSEPControl");
  v33 = 1024;
  v34 = 0;
  if (!a1)
    goto LABEL_17;
  v16 = a4 - 4097 < 0xFFFFFFFFFFFFF000;
  if (!a3)
    v16 = a4 != 0;
  if (v16)
  {
LABEL_17:
    v25 = 70;
    v24 = 4294967293;
    goto LABEL_21;
  }
  Size = LibSer_SEPControl_GetSize(a4, a6, a7, &v34);
  if ((_DWORD)Size)
  {
LABEL_18:
    v24 = Size;
LABEL_25:
    v25 = 70;
    goto LABEL_21;
  }
  v18 = a5;
  v19 = a2;
  v20 = (_OWORD *)MEMORY[0x24BDAC7A8](v18);
  v22 = (char *)&v29 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = LibSer_SEPControl_Serialize(v20, a6, a7, a3, a4, (uint64_t)v22, &v34);
  if ((_DWORD)v23)
  {
    v24 = v23;
    goto LABEL_20;
  }
  v24 = a1(v19, 51, 0, v22, v34, v35, &v33);
  if ((_DWORD)v24)
  {
LABEL_20:
    v25 = 70;
    goto LABEL_21;
  }
  v25 = 10;
  v26 = v30;
  if (!v30 || !a9)
    goto LABEL_21;
  v31 = 0;
  v32 = 0;
  Size = LibSer_SEPControlResponse_Deserialize(v35, v33, &v32, &v31);
  if ((_DWORD)Size)
    goto LABEL_18;
  v27 = v31;
  if (*a9 < v31)
  {
    v24 = 4294967276;
    goto LABEL_25;
  }
  if (v32)
    memcpy(v26, v32, v31);
  v24 = 0;
  *a9 = v27;
  v25 = 10;
LABEL_21:
  if (v25 >= gACMLoggingLevel)
    printf("%s: %s: returning, err = %ld.\n", "ACM", "LibCall_ACMSEPControl", (int)v24);
  return v24;
}

uint64_t aclRequiresPasscodeInternal(uint64_t (*a1)(uint64_t, uint64_t, _QWORD, char *, uint64_t, int *, uint64_t *), uint64_t a2, const void *a3, unsigned int a4, _BYTE *a5)
{
  size_t v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  v19 = 0;
  v18 = 4;
  v10 = a4;
  v11 = a4 + 4;
  MEMORY[0x24BDAC7A8](a1);
  v12 = (unsigned int *)((char *)&v17 - ((v10 + 19) & 0x1FFFFFFF0));
  if (gACMLoggingLevel <= 0xAu)
    printf("%s: %s: called.\n", "ACM", "aclRequiresPasscodeInternal");
  v13 = 70;
  v14 = 4294967293;
  if (a3 && a5)
  {
    *v12 = a4;
    memcpy(v12 + 1, a3, v10);
    v15 = a1(a2, 17, 0, (char *)&v17 - ((v10 + 19) & 0x1FFFFFFF0), v11, &v19, &v18);
    if ((_DWORD)v15)
    {
      v14 = v15;
      v13 = 70;
    }
    else if (v18 == 4)
    {
      v14 = 0;
      *a5 = 1;
      v13 = 10;
    }
    else
    {
      v13 = 70;
      v14 = 4294967291;
    }
  }
  if (v13 >= gACMLoggingLevel)
    printf("%s: %s: returning, err = %ld.\n", "ACM", "aclRequiresPasscodeInternal", (int)v14);
  return v14;
}

void LibCall_ACMKernelControl_cold_1()
{
  __assert_rtn("LibCall_ACMKernelControl", "LibCall.c", 373, "commandCursor == commandBuffer + sizeof(commandBuffer)");
}

uint64_t lib_platform_rng()
{
  uint64_t v0;

  v0 = ccrng();
  REQUIRE_func(v0 != 0, 22, "/Library/Caches/com.apple.xbs/Sources/AppleKeyStore_libs/platform/platform_lib.c");
  REQUIRE_func(0, 23, "/Library/Caches/com.apple.xbs/Sources/AppleKeyStore_libs/platform/platform_lib.c");
  return v0;
}

uint64_t lib_platform_read_random(uint64_t a1, unsigned int a2)
{
  unsigned int (*v4)(uint64_t, _QWORD, uint64_t);
  uint64_t v5;
  _BOOL8 v6;

  v4 = *(unsigned int (**)(uint64_t, _QWORD, uint64_t))platform_rng();
  v5 = platform_rng();
  v6 = v4(v5, a2, a1) == 0;
  return REQUIRE_func(v6, 31, "/Library/Caches/com.apple.xbs/Sources/AppleKeyStore_libs/platform/platform_lib.c");
}

uint64_t rfc3394_wrap(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, void *, uint64_t *, uint64_t *, uint64_t), uint64_t *a5, unint64_t a6, _QWORD *a7, unint64_t *a8)
{
  uint64_t v14;
  size_t v15;
  uint64_t v16;
  size_t v17;
  uint64_t v18;
  unint64_t v19;
  BOOL v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  unint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v36;
  unint64_t v37;
  _QWORD *v38;
  uint64_t *v39;
  unint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  _OWORD __s[4];
  uint64_t v45;

  v41 = a1;
  v42 = a3;
  v45 = *MEMORY[0x24BDAC8D0];
  memset(__s, 0, sizeof(__s));
  v14 = ccaes_cbc_encrypt_mode();
  MEMORY[0x24BDAC7A8](v14);
  v43 = (char *)&v36 - v15;
  bzero((char *)&v36 - v15, v15);
  MEMORY[0x24BDAC7A8](v16);
  bzero((char *)&v36 - v17, v17);
  v18 = 0xFFFFFFFFLL;
  if (HIDWORD(a6) || (a6 - 40) < 0xFFFFFFE0)
    goto LABEL_30;
  v39 = &v36;
  v40 = a8;
  v38 = a7;
  if (!a4)
  {
    v20 = (a2 & 0xFFFFFFFFFFFFFFF7) == 0x10 || a2 == 32;
    if (!v20 || !a8 || *a8 < a6 + 8)
    {
      memset_s(__s, 0x40uLL, 0, 0x40uLL);
      goto LABEL_31;
    }
    v37 = a6 + 8;
    cccbc_init();
    goto LABEL_15;
  }
  if (a8)
  {
    v19 = *v40;
    v37 = a6 + 8;
    if (v19 >= a6 + 8)
    {
LABEL_15:
      v21 = 0;
      v22 = a6 >> 3;
      if (a6 >> 3 <= 1)
        v23 = 1;
      else
        v23 = v22;
      do
      {
        v24 = *a5++;
        *((_QWORD *)&__s[v21++] + 1) = v24;
      }
      while (v23 != v21);
      v25 = 0;
      *(_QWORD *)&__s[0] = v42;
      v26 = 1;
      v41 = v22;
      do
      {
        v42 = v25;
        v27 = 0;
        v28 = (uint64_t *)__s;
        do
        {
          if (a4)
          {
            if ((a4(1, &firebloom_null_iv, v28, v28, 16) & 1) == 0)
              goto LABEL_6;
          }
          else
          {
            cccbc_clear_iv();
            firebloom_cbc_update_f();
          }
          v29 = *v28;
          v28 += 2;
          v30 = v29 ^ bswap64(v26 + v27++);
          *(_QWORD *)&__s[v27 % v22] = v30;
        }
        while (v23 != v27);
        v25 = v42 + 1;
        v26 += v41;
      }
      while (v42 != 5);
      v31 = v38;
      *v38 = *(_QWORD *)&__s[0];
      v32 = v31 + 1;
      v33 = (uint64_t *)__s + 1;
      do
      {
        v34 = *v33;
        v33 += 2;
        *v32++ = v34;
        --v23;
      }
      while (v23);
      v18 = 0;
      *v40 = v37 & 0xFFFFFFF8;
LABEL_30:
      memset_s(__s, 0x40uLL, 0, 0x40uLL);
      if (a4)
        return v18;
LABEL_31:
      cc_clear();
      return v18;
    }
  }
LABEL_6:
  memset_s(__s, 0x40uLL, 0, 0x40uLL);
  return 0xFFFFFFFFLL;
}

uint64_t rfc3394_wrap_legacy(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t (*a4)(uint64_t, void *, uint64_t *, uint64_t *, uint64_t), uint64_t *a5, unsigned int a6, _QWORD *a7, _DWORD *a8)
{
  uint64_t v9;
  unint64_t v11;

  v11 = *a8;
  v9 = rfc3394_wrap(a1, a2, a3, a4, a5, a6, a7, &v11);
  REQUIRE_func(HIDWORD(v11) == 0, 171, "/Library/Caches/com.apple.xbs/Sources/AppleKeyStore_libs/aeskeywrap.c");
  *a8 = v11;
  return v9;
}

uint64_t rfc3394_unwrap(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(_QWORD, void *, unint64_t *, unint64_t *, uint64_t), _QWORD *a5, unint64_t a6, _QWORD *a7, _QWORD *a8)
{
  uint64_t v14;
  size_t v15;
  uint64_t v16;
  size_t v17;
  uint64_t v18;
  unsigned int v19;
  BOOL v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  int v27;
  unint64_t *v28;
  int v29;
  unsigned int v30;
  BOOL v31;
  _QWORD *v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t *v40;
  _QWORD *v41;
  unint64_t *v42;
  uint64_t v43;
  unint64_t v44;
  _QWORD *v45;
  char *v46;
  _OWORD __s[4];
  uint64_t v48;

  v45 = a5;
  v43 = a1;
  v48 = *MEMORY[0x24BDAC8D0];
  memset(__s, 0, sizeof(__s));
  v14 = ccaes_cbc_decrypt_mode();
  MEMORY[0x24BDAC7A8](v14);
  v46 = (char *)&v37 - v15;
  bzero((char *)&v37 - v15, v15);
  MEMORY[0x24BDAC7A8](v16);
  bzero((char *)&v37 - v17, v17);
  v18 = 0xFFFFFFFFLL;
  if (HIDWORD(a6))
    goto LABEL_33;
  v39 = a3;
  v19 = a6 >> 3;
  if ((a6 >> 3) - 6 < 0xFFFFFFFC)
    goto LABEL_33;
  v40 = &v37;
  v41 = a8;
  v38 = a7;
  v44 = a6;
  if (!a4)
  {
    v20 = (a2 & 0xFFFFFFFFFFFFFFF7) == 0x10 || a2 == 32;
    if (!v20 || !a8 || *a8 < a6 - 8)
    {
      memset_s(__s, 0x40uLL, 0, 0x40uLL);
      goto LABEL_34;
    }
    cccbc_init();
    goto LABEL_15;
  }
  if (a8 && *v41 >= v44 - 8)
  {
LABEL_15:
    *(_QWORD *)&__s[0] = *v45;
    v21 = v19 - 1;
    if (v19 != 1)
    {
      v22 = (_QWORD *)__s + 1;
      v23 = v45 + 1;
      v24 = v19 - 1;
      do
      {
        v25 = *v23++;
        *v22 = v25;
        v22 += 2;
        --v24;
      }
      while (v24);
    }
    v26 = 6 * v19 - 6;
    LODWORD(v43) = 1 - v19;
    v27 = 5;
    v42 = (unint64_t *)&__s[v19 - 2];
    do
    {
      LODWORD(v45) = v27;
      if (v44 >= 0x10)
      {
        v28 = v42;
        v29 = v21;
        v30 = v26;
        do
        {
          *v28 = *(_QWORD *)&__s[v29 % v21] ^ bswap64(v30);
          if (a4)
          {
            if ((a4(0, &firebloom_null_iv, v28, v28, 16) & 1) == 0)
              goto LABEL_6;
          }
          else
          {
            cccbc_clear_iv();
            firebloom_cbc_update_f();
          }
          --v30;
          v28 -= 2;
          v31 = __OFSUB__(v29--, 1);
        }
        while (!((v29 < 0) ^ v31 | (v29 == 0)));
      }
      v27 = (_DWORD)v45 - 1;
      v26 += v43;
    }
    while ((_DWORD)v45);
    if (*(_QWORD *)&__s[0] == v39)
    {
      v32 = v38;
      if ((_DWORD)v21)
      {
        v33 = (uint64_t *)__s + 1;
        v34 = v21;
        do
        {
          v35 = *v33;
          v33 += 2;
          *v32++ = v35;
          --v34;
        }
        while (v34);
      }
      v18 = 0;
      *v41 = (8 * v21);
    }
    else
    {
      v18 = 0xFFFFFFFFLL;
    }
LABEL_33:
    memset_s(__s, 0x40uLL, 0, 0x40uLL);
    if (a4)
      return v18;
LABEL_34:
    cc_clear();
    return v18;
  }
LABEL_6:
  memset_s(__s, 0x40uLL, 0, 0x40uLL);
  return 0xFFFFFFFFLL;
}

uint64_t rfc3394_unwrap_legacy(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t (*a4)(_QWORD, void *, unint64_t *, unint64_t *, uint64_t), _QWORD *a5, unsigned int a6, _QWORD *a7, _DWORD *a8)
{
  uint64_t v9;
  uint64_t v11;

  v11 = *a8;
  v9 = rfc3394_unwrap(a1, a2, a3, a4, a5, a6, a7, &v11);
  REQUIRE_func(HIDWORD(v11) == 0, 261, "/Library/Caches/com.apple.xbs/Sources/AppleKeyStore_libs/aeskeywrap.c");
  *a8 = v11;
  return v9;
}

uint64_t rfc3394_wrapped_size_legacy(unsigned int a1, _DWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  BOOL v4;
  int v5;

  v2 = a1 + 15;
  v3 = v2 << 31 >> 31;
  v4 = v3 != v2 || v3 < 0;
  v5 = v4;
  if (!v4)
    *a2 = v3 & 0xFFFFFFF8;
  return v5 ^ 1u;
}

uint64_t rfc3394_wrapped_size(unint64_t a1, unint64_t *a2)
{
  uint64_t v2;
  BOOL v3;
  int v4;

  v2 = a1 >= 0xFFFFFFFFFFFFFFF1;
  v3 = v2 << 63 >> 63 != v2 || v2 << 63 >> 63 == -1;
  v4 = v3;
  if (!v3)
    *a2 = (a1 + 15) & 0xFFFFFFFFFFFFFFF8;
  return v4 ^ 1u;
}

BOOL rfc3394_unwrapped_size_legacy(unsigned int a1, unsigned int *a2)
{
  unsigned int v2;
  _BOOL8 result;

  v2 = a1 - 8;
  result = a1 > 7;
  *a2 = v2;
  return result;
}

BOOL rfc3394_unwrapped_size(unint64_t a1, unint64_t *a2)
{
  unint64_t v2;
  _BOOL8 result;

  v2 = a1 - 8;
  result = a1 > 7;
  *a2 = v2;
  return result;
}

uint64_t aks_fv_new_vek(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  mach_port_t aks_client_connection;
  mach_port_t v15;
  uint64_t v16;
  __int128 v18;
  __int128 v19;
  size_t v20;
  uint64_t input[2];
  _BYTE __s[4096];
  _QWORD v23[2];

  v1 = MEMORY[0x24BDAC7A8](a1);
  v3 = v2;
  v5 = v4;
  v7 = v6;
  v9 = v8;
  v11 = v10;
  v12 = v1;
  v23[0] = *MEMORY[0x24BDAC8D0];
  bzero(__s, 0x1000uLL);
  *(_QWORD *)&v19 = __s;
  *((_QWORD *)&v19 + 1) = v23;
  v20 = 4096;
  v13 = 3758097090;
  if (v7 && v5)
  {
    aks_client_connection = get_aks_client_connection();
    if (!aks_client_connection)
    {
      fprintf((FILE *)*MEMORY[0x24BDAC8E8], "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_fv_new_vek", ":", 179, "", 0, "", "");
      v13 = 3758097084;
      goto LABEL_16;
    }
    v15 = aks_client_connection;
    if (!ccder_blob_encode_body_tl()
      || !der_utils_encode_fv_data(&v19, v9)
      || !der_utils_encode_fv_data(&v19, v11)
      || !der_utils_encode_fv_params(&v19, v12)
      || !ccder_blob_encode_tl())
    {
      goto LABEL_14;
    }
    input[0] = *((_QWORD *)&v19 + 1);
    input[1] = (uint64_t)v23 - *((_QWORD *)&v19 + 1);
    v16 = IOConnectCallMethod(v15, 0x4Au, input, 2u, 0, 0, 0, 0, __s, &v20);
    if ((_DWORD)v16)
    {
      v13 = v16;
      goto LABEL_16;
    }
    *(_QWORD *)&v18 = __s;
    *((_QWORD *)&v18 + 1) = &__s[v20];
    if (!ccder_blob_decode_range() || !der_utils_decode_fv_data(&v18, 0, v5))
      goto LABEL_14;
    if (!v3)
    {
      v13 = 0;
      goto LABEL_16;
    }
    v13 = 0;
    if ((der_utils_decode_fv_key(&v18, 0, v3) & 1) == 0)
LABEL_14:
      v13 = 3758097098;
  }
LABEL_16:
  memset_s(__s, 0x1000uLL, 0, 0x1000uLL);
  return v13;
}

uint64_t get_aks_client_connection()
{
  uint64_t result;

  if (get_aks_client_dispatch_queue_onceToken != -1)
    dispatch_once(&get_aks_client_dispatch_queue_onceToken, &__block_literal_global_168);
  dispatch_sync((dispatch_queue_t)get_aks_client_dispatch_queue_connection_queue, &__block_literal_global_150);
  result = get_aks_client_connection_connection;
  if (!get_aks_client_connection_connection)
  {
    syslog(3, "failed to open connection to %s\n", "AppleKeyStore");
    return get_aks_client_connection_connection;
  }
  return result;
}

unint64_t _aks_save_file(char *a1, const void *a2, size_t a3)
{
  unint64_t v3;
  int v6;
  int v7;
  ssize_t v8;
  int *v10;
  char *v11;
  int *v12;
  char *v13;

  v3 = (unint64_t)a1;
  if (a1)
  {
    v6 = open_dprotected_np(a1, 1793, 4, 0, 384);
    if (v6 == -1)
    {
      v10 = __error();
      v11 = strerror(*v10);
      syslog(3, "could not create file: %s (%s)\n", (const char *)v3, v11);
      return 0;
    }
    else
    {
      v7 = v6;
      v8 = write(v6, a2, a3);
      v3 = v8 != -1;
      if (v8 == -1)
      {
        v12 = __error();
        v13 = strerror(*v12);
        syslog(3, "failed to write restore bag to disk %s\n", v13);
      }
      close(v7);
    }
  }
  return v3;
}

const char *_aks_load_file(char *a1, _QWORD *a2, off_t *a3)
{
  const char *v3;
  off_t st_size;
  int v7;
  int v8;
  void *v9;
  void *v10;
  int *v12;
  char *v13;
  stat v14;

  v3 = a1;
  memset(&v14, 0, sizeof(v14));
  if (a1)
  {
    if (!stat(a1, &v14))
    {
      st_size = v14.st_size;
      v7 = open(v3, 0);
      if (v7 == -1)
      {
        v12 = __error();
        v13 = strerror(*v12);
        syslog(3, "could not open file: %s (%s)\n", v3, v13);
      }
      else
      {
        v8 = v7;
        v9 = calloc(st_size, 1uLL);
        v3 = (const char *)(v9 != 0);
        if (!v9)
        {
LABEL_7:
          close(v8);
          return v3;
        }
        v10 = v9;
        if (read(v8, v9, st_size) == st_size)
        {
          *a2 = v10;
          *a3 = st_size;
          goto LABEL_7;
        }
        close(v8);
        free(v10);
      }
    }
    return 0;
  }
  return v3;
}

uint64_t aks_delete_xart_leak(unsigned int a1, const void *a2)
{
  mach_port_t aks_client_connection;
  uint64_t input[2];

  input[1] = *MEMORY[0x24BDAC8D0];
  input[0] = a1;
  aks_client_connection = get_aks_client_connection();
  if (aks_client_connection)
    return IOConnectCallMethod(aks_client_connection, 0x6Cu, input, 1u, a2, 0x10uLL, 0, 0, 0, 0);
  fprintf((FILE *)*MEMORY[0x24BDAC8E8], "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_delete_xart_leak", ":", 268, "", 0, "", "");
  return 3758097084;
}

char *_iterate_path(char *result, uint64_t a2, uint64_t a3)
{
  FTS *v5;
  FTSENT *v6;
  FTSENT *v7;
  int fts_info;
  char *v9[3];

  v9[2] = *(char **)MEMORY[0x24BDAC8D0];
  if (result)
  {
    v9[0] = result;
    v9[1] = 0;
    result = (char *)fts_open(v9, 84, 0);
    if (result)
    {
      v5 = (FTS *)result;
      v6 = fts_read((FTS *)result);
      if (v6)
      {
        v7 = v6;
        do
        {
          fts_info = v7->fts_info;
          if (fts_info != 6)
          {
            if (fts_info == 1)
            {
              if (a2)
              {
                if (((*(uint64_t (**)(uint64_t, FTSENT *))(a2 + 16))(a2, v7) & 1) == 0)
                  fts_set(v5, v7, 4);
              }
            }
            else if (a3 && fts_info == 8)
            {
              (*(void (**)(uint64_t, FTSENT *))(a3 + 16))(a3, v7);
            }
          }
          v7 = fts_read(v5);
        }
        while (v7);
      }
      return (char *)fts_close(v5);
    }
  }
  return result;
}

char *aks_dump_path(char *result, int a2)
{
  const char *v3;
  _QWORD v4[4];
  int v5;
  _QWORD v6[4];
  int v7;
  char v8[1024];
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  if (result)
  {
    v3 = result;
    bzero(v8, 0x400uLL);
    result = realpath_DARWIN_EXTSN(v3, v8);
    if (result)
    {
      v6[0] = MEMORY[0x24BDAC760];
      v6[1] = 0x40000000;
      v6[2] = __aks_dump_path_block_invoke;
      v6[3] = &__block_descriptor_tmp;
      v7 = a2;
      v4[0] = MEMORY[0x24BDAC760];
      v4[1] = 0x40000000;
      v4[2] = __aks_dump_path_block_invoke_2;
      v4[3] = &__block_descriptor_tmp_126;
      v5 = a2;
      return _iterate_path(v8, (uint64_t)v6, (uint64_t)v4);
    }
  }
  return result;
}

uint64_t __aks_dump_path_block_invoke(uint64_t a1, uint64_t a2)
{
  int path_class;
  int v5;

  path_class = _get_path_class(*(const char **)(a2 + 48));
  v5 = *(_DWORD *)(a1 + 32);
  if (v5 == -1 || path_class == v5)
    printf(" dir: %s %i\n", *(const char **)(a2 + 48), path_class);
  return 1;
}

uint64_t _get_path_class(const char *a1)
{
  int v1;
  int v2;
  uint64_t v3;

  v1 = open_dprotected_np(a1, 0, 0, 1);
  if (v1 == -1)
    return 0xFFFFFFFFLL;
  v2 = v1;
  v3 = fcntl(v1, 63);
  if ((v2 & 0x80000000) == 0)
    close(v2);
  return v3;
}

uint64_t __aks_dump_path_block_invoke_2(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  int v5;

  result = _get_path_class(*(const char **)(a2 + 48));
  v5 = *(_DWORD *)(a1 + 32);
  if (v5 == -1 || (_DWORD)result == v5)
    return printf("file: %s %i\n", *(const char **)(a2 + 48), result);
  return result;
}

uint64_t aks_fs_supports_enhanced_apfs()
{
  io_registry_entry_t v0;
  io_object_t v1;
  CFTypeRef CFProperty;
  _BOOL4 v3;
  unsigned int v4;
  size_t __len;
  char __big[1024];
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  v0 = IORegistryEntryFromPath(*MEMORY[0x24BDD8B20], "IODeviceTree:/filesystems");
  if (v0)
  {
    v1 = v0;
    CFProperty = IORegistryEntryCreateCFProperty(v0, CFSTR("e-apfs"), (CFAllocatorRef)*MEMORY[0x24BDBD240], 0);
    v3 = CFProperty != 0;
    if (CFProperty)
      CFRelease(CFProperty);
    IOObjectRelease(v1);
  }
  else
  {
    v3 = 0;
  }
  __len = 1023;
  bzero(__big, 0x400uLL);
  if ((_aks_check_apfs_shared_datavolume_bootarg_init & 1) == 0)
  {
    if (!sysctlbyname("kern.bootargs", __big, &__len, 0, 0) && strnstr(__big, "-apfs_shared_datavolume", __len))
      _aks_check_apfs_shared_datavolume_bootarg_value = 1;
    _aks_check_apfs_shared_datavolume_bootarg_init = 1;
  }
  v4 = _aks_check_apfs_shared_datavolume_bootarg_value;
  fprintf((FILE *)*MEMORY[0x24BDAC8E8], "%s%s:%s%s%s%s%u:%s%u:%s ioreg: %d, boot_arg: %d%s\n", "aks", "", "", "", "aks_fs_supports_enhanced_apfs", ":", 437, "", 0, "", v3, _aks_check_apfs_shared_datavolume_bootarg_value, "");
  return v3 | v4;
}

uint64_t aks_fs_status(const char *a1)
{
  char __str[1024];
  char v4[1024];
  uint64_t v5;

  v5 = *MEMORY[0x24BDAC8D0];
  bzero(v4, 0x400uLL);
  bzero(__str, 0x400uLL);
  if (realpath_DARWIN_EXTSN(a1, v4))
  {
    snprintf(__str, 0x400uLL, "%s/mobile", v4);
    aks_fs_status_with_map(v4, (uint64_t)&sharedPathMap, 35);
    if ((aks_fs_supports_enhanced_apfs() & 1) == 0)
      aks_fs_status_with_map(__str, (uint64_t)&userPathMap, 72);
  }
  return 0;
}

void aks_fs_status_with_map(const char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  stat v7;
  char __str[1024];
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  bzero(__str, 0x400uLL);
  memset(&v7, 0, sizeof(v7));
  if (a3)
  {
    v6 = a2 + 16;
    do
    {
      snprintf(__str, 0x400uLL, "%s%s", a1, *(const char **)(v6 - 16));
      if (stat(__str, &v7))
      {
        printf("stat failed: %s\n");
      }
      else
      {
        _get_path_class(__str);
        printf("%s: mode=%o, u/g=%i:%i class=%i%s\n");
      }
      v6 += 48;
      --a3;
    }
    while (a3);
  }
}

uint64_t aks_user_fs_status(const char *a1)
{
  char v3[1024];
  uint64_t v4;

  v4 = *MEMORY[0x24BDAC8D0];
  bzero(v3, 0x400uLL);
  if (realpath_DARWIN_EXTSN(a1, v3))
    aks_fs_status_with_map(v3, (uint64_t)&userPathMap, 72);
  return 0;
}

const char *aks_show_allowlist()
{
  puts("shared allow list:");
  aks_show_allowlist_with_map("<var>", (uint64_t)&sharedPathMap, 35);
  puts("user allow list:");
  return aks_show_allowlist_with_map("<user>", (uint64_t)&userPathMap, 72);
}

const char *aks_show_allowlist_with_map(const char *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  const char *v4;
  const char **v5;
  const char **v6;
  char v7;

  if (a3)
  {
    v3 = a3;
    v4 = result;
    v5 = (const char **)(a2 + 16);
    v6 = (const char **)(a2 + 16);
    do
    {
      v7 = *(_BYTE *)v6;
      v6 += 6;
      if ((v7 & 1) != 0)
        result = (const char *)printf("%s%s\n", v4, *(v5 - 2));
      v5 = v6;
      --v3;
    }
    while (v3);
  }
  return result;
}

uint64_t aks_fv_new_kek(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  mach_port_t aks_client_connection;
  mach_port_t v13;
  uint64_t v14;
  __int128 v16;
  __int128 v17;
  size_t v18;
  uint64_t input[3];
  _BYTE __s[4096];
  uint64_t v21;

  v1 = MEMORY[0x24BDAC7A8](a1);
  v3 = v2;
  v5 = v4;
  v7 = v6;
  v9 = v8;
  v10 = v1;
  v21 = *MEMORY[0x24BDAC8D0];
  bzero(__s, 0x1000uLL);
  *(_QWORD *)&v17 = __s;
  *((_QWORD *)&v17 + 1) = &v21;
  v18 = 4096;
  v11 = 3758097090;
  if (v5 && v3)
  {
    aks_client_connection = get_aks_client_connection();
    if (aks_client_connection)
    {
      v13 = aks_client_connection;
      if (!ccder_blob_encode_body_tl()
        || !der_utils_encode_fv_data(&v17, v7)
        || !der_utils_encode_fv_params(&v17, v10)
        || !ccder_blob_encode_tl())
      {
        goto LABEL_10;
      }
      input[0] = v9;
      input[1] = *((_QWORD *)&v17 + 1);
      input[2] = (uint64_t)&v21 - *((_QWORD *)&v17 + 1);
      v14 = IOConnectCallMethod(v13, 0x4Cu, input, 3u, 0, 0, 0, 0, __s, &v18);
      if ((_DWORD)v14)
      {
        v11 = v14;
        goto LABEL_12;
      }
      *(_QWORD *)&v16 = __s;
      *((_QWORD *)&v16 + 1) = &__s[v18];
      if (!ccder_blob_decode_range() || (v11 = 0, (der_utils_decode_fv_data(&v16, 0, v3) & 1) == 0))
LABEL_10:
        v11 = 3758097098;
    }
    else
    {
      fprintf((FILE *)*MEMORY[0x24BDAC8E8], "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_fv_new_kek", ":", 508, "", 0, "", "");
      v11 = 3758097084;
    }
  }
LABEL_12:
  memset_s(__s, 0x1000uLL, 0, 0x1000uLL);
  return v11;
}

uint64_t aks_fv_new_sibling_vek(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  mach_port_t aks_client_connection;
  mach_port_t v13;
  uint64_t v14;
  __int128 v16;
  __int128 v17;
  size_t v18;
  uint64_t input[2];
  _BYTE __s[4096];
  uint64_t v21;

  v1 = MEMORY[0x24BDAC7A8](a1);
  v3 = v2;
  v5 = v4;
  v7 = v6;
  v9 = v8;
  v10 = v1;
  v21 = *MEMORY[0x24BDAC8D0];
  bzero(__s, 0x1000uLL);
  *(_QWORD *)&v17 = __s;
  *((_QWORD *)&v17 + 1) = &v21;
  v18 = 4096;
  v11 = 3758097090;
  if (v7 && v5)
  {
    aks_client_connection = get_aks_client_connection();
    if (!aks_client_connection)
    {
      fprintf((FILE *)*MEMORY[0x24BDAC8E8], "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_fv_new_sibling_vek", ":", 543, "", 0, "", "");
      v11 = 3758097084;
      goto LABEL_15;
    }
    v13 = aks_client_connection;
    if (!ccder_blob_encode_body_tl()
      || !der_utils_encode_fv_data(&v17, v9)
      || !der_utils_encode_fv_params(&v17, v10)
      || !ccder_blob_encode_tl())
    {
      goto LABEL_13;
    }
    input[0] = *((_QWORD *)&v17 + 1);
    input[1] = (uint64_t)&v21 - *((_QWORD *)&v17 + 1);
    v14 = IOConnectCallMethod(v13, 0x63u, input, 2u, 0, 0, 0, 0, __s, &v18);
    if ((_DWORD)v14)
    {
      v11 = v14;
      goto LABEL_15;
    }
    *(_QWORD *)&v16 = __s;
    *((_QWORD *)&v16 + 1) = &__s[v18];
    if (!ccder_blob_decode_range() || !der_utils_decode_fv_data(&v16, 0, v5))
      goto LABEL_13;
    if (!v3)
    {
      v11 = 0;
      goto LABEL_15;
    }
    v11 = 0;
    if ((der_utils_decode_fv_key(&v16, 0, v3) & 1) == 0)
LABEL_13:
      v11 = 3758097098;
  }
LABEL_15:
  memset_s(__s, 0x1000uLL, 0, 0x1000uLL);
  return v11;
}

uint64_t aks_fv_rewrap_kek(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  mach_port_t aks_client_connection;
  mach_port_t v15;
  uint64_t v16;
  __int128 v18;
  __int128 v19;
  size_t v20;
  uint64_t input[2];
  _BYTE __s[4096];
  _QWORD v23[2];

  v1 = MEMORY[0x24BDAC7A8](a1);
  v3 = v2;
  v5 = v4;
  v7 = v6;
  v9 = v8;
  v11 = v10;
  v12 = v1;
  v23[0] = *MEMORY[0x24BDAC8D0];
  bzero(__s, 0x1000uLL);
  *(_QWORD *)&v19 = __s;
  *((_QWORD *)&v19 + 1) = v23;
  v20 = 4096;
  v13 = 3758097090;
  if (v9 && v7 && v5 && v3)
  {
    aks_client_connection = get_aks_client_connection();
    if (aks_client_connection)
    {
      v15 = aks_client_connection;
      if (!der_utils_encode_fv_data(&v19, v5)
        || !ccder_blob_encode_body_tl()
        || !der_utils_encode_fv_data(&v19, v9)
        || !der_utils_encode_fv_data(&v19, v11)
        || !der_utils_encode_fv_params(&v19, v12)
        || !ccder_blob_encode_tl())
      {
        goto LABEL_14;
      }
      input[0] = *((_QWORD *)&v19 + 1);
      input[1] = (uint64_t)v23 - *((_QWORD *)&v19 + 1);
      v16 = IOConnectCallMethod(v15, 0x4Du, input, 2u, 0, 0, 0, 0, __s, &v20);
      if ((_DWORD)v16)
      {
        v13 = v16;
        goto LABEL_16;
      }
      *(_QWORD *)&v18 = __s;
      *((_QWORD *)&v18 + 1) = &__s[v20];
      if (!ccder_blob_decode_range() || (v13 = 0, (der_utils_decode_fv_data(&v18, 0, v3) & 1) == 0))
LABEL_14:
        v13 = 3758097098;
    }
    else
    {
      fprintf((FILE *)*MEMORY[0x24BDAC8E8], "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_fv_rewrap_kek", ":", 582, "", 0, "", "");
      v13 = 3758097084;
    }
  }
LABEL_16:
  memset_s(__s, 0x1000uLL, 0, 0x1000uLL);
  return v13;
}

uint64_t aks_fv_set_protection(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  mach_port_t aks_client_connection;
  mach_port_t v16;
  uint64_t v17;
  uint64_t *v19;
  __int128 v20;
  __int128 v21;
  size_t v22;
  uint64_t input[4];
  _BYTE __s[4096];
  _QWORD v25[2];

  v1 = MEMORY[0x24BDAC7A8](a1);
  v19 = v2;
  v4 = v3;
  v6 = v5;
  v8 = v7;
  v10 = v9;
  v12 = v11;
  v13 = v1;
  v25[0] = *MEMORY[0x24BDAC8D0];
  v14 = 3758097098;
  bzero(__s, 0x1000uLL);
  *(_QWORD *)&v21 = __s;
  *((_QWORD *)&v21 + 1) = v25;
  v22 = 4096;
  aks_client_connection = get_aks_client_connection();
  if (!aks_client_connection)
  {
    fprintf((FILE *)*MEMORY[0x24BDAC8E8], "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_fv_set_protection", ":", 616, "", 0, "", "");
    v14 = 3758097084;
    goto LABEL_14;
  }
  v16 = aks_client_connection;
  if (der_utils_encode_fv_data(&v21, v4)
    && der_utils_encode_fv_data(&v21, v6)
    && der_utils_encode_fv_data(&v21, v8)
    && der_utils_encode_fv_params(&v21, v13)
    && ccder_blob_encode_tl())
  {
    input[0] = v12;
    input[1] = v10;
    input[2] = *((_QWORD *)&v21 + 1);
    input[3] = (uint64_t)v25 - *((_QWORD *)&v21 + 1);
    v17 = IOConnectCallMethod(v16, 0x54u, input, 4u, 0, 0, 0, 0, __s, &v22);
    if ((_DWORD)v17)
    {
      v14 = v17;
      goto LABEL_14;
    }
    *(_QWORD *)&v20 = __s;
    *((_QWORD *)&v20 + 1) = &__s[v22];
    if (!v22)
      goto LABEL_13;
    if (!ccder_blob_decode_range())
      goto LABEL_14;
    if (!v19)
    {
LABEL_13:
      v14 = 0;
      goto LABEL_14;
    }
    v14 = 0;
    if ((der_utils_decode_fv_data(&v20, 0, v19) & 1) == 0)
      v14 = 3758097098;
  }
LABEL_14:
  memset_s(__s, 0x1000uLL, 0, 0x1000uLL);
  return v14;
}

uint64_t aks_fv_unwrap_vek_with_acm(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  mach_port_t aks_client_connection;
  mach_port_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v20;
  __int128 v21;
  size_t v22;
  uint64_t input[3];
  _BYTE __s[4096];
  _QWORD v25[2];

  v1 = MEMORY[0x24BDAC7A8](a1);
  v3 = v2;
  v5 = v4;
  v7 = v6;
  v9 = v8;
  v11 = v10;
  v13 = v12;
  v14 = v1;
  v25[0] = *MEMORY[0x24BDAC8D0];
  bzero(__s, 0x1000uLL);
  *(_QWORD *)&v21 = __s;
  *((_QWORD *)&v21 + 1) = v25;
  v22 = 4096;
  if (!v7)
  {
    v18 = 3758097090;
    goto LABEL_15;
  }
  aks_client_connection = get_aks_client_connection();
  if (!aks_client_connection)
  {
    fprintf((FILE *)*MEMORY[0x24BDAC8E8], "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_fv_unwrap_vek_with_acm", ":", 653, "", 0, "", "");
    v18 = 3758097084;
    goto LABEL_15;
  }
  v16 = aks_client_connection;
  if (!der_utils_encode_fv_data(&v21, v5)
    || !der_utils_encode_fv_data(&v21, v7)
    || !der_utils_encode_fv_data(&v21, v9)
    || !der_utils_encode_fv_data(&v21, v11)
    || !der_utils_encode_fv_params(&v21, v14)
    || !ccder_blob_encode_tl())
  {
    goto LABEL_13;
  }
  input[0] = *((_QWORD *)&v21 + 1);
  input[1] = (uint64_t)v25 - *((_QWORD *)&v21 + 1);
  input[2] = v13;
  v17 = IOConnectCallMethod(v16, 0x4Bu, input, 3u, 0, 0, 0, 0, __s, &v22);
  if ((_DWORD)v17)
  {
    v18 = v17;
    goto LABEL_15;
  }
  *(_QWORD *)&v20 = __s;
  *((_QWORD *)&v20 + 1) = &__s[v22];
  if (!ccder_blob_decode_range())
    goto LABEL_13;
  if (!v3)
  {
    v18 = 0;
    goto LABEL_15;
  }
  v18 = 0;
  if ((der_utils_decode_fv_key(&v20, 0, v3) & 1) == 0)
LABEL_13:
    v18 = 3758097098;
LABEL_15:
  memset_s(__s, 0x1000uLL, 0, 0x1000uLL);
  return v18;
}

uint64_t aks_fv_unwrap_vek_with_opts(uint64_t a1)
{
  return aks_fv_unwrap_vek_with_acm(a1);
}

void aks_gather_stats(const char *a1, char a2)
{
  char *v4;
  char *v5;
  uint64_t i;
  char *v7;
  uint64_t k;
  char *v9;
  uint64_t j;
  _QWORD v11[5];
  char v12[1024];
  statfs v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  if (a1)
  {
    bzero(&v13, 0x878uLL);
    bzero(v12, 0x400uLL);
    if (realpath_DARWIN_EXTSN(a1, v12))
    {
      v4 = (char *)malloc(0x818uLL);
      memset_s(v4, 0x818uLL, 0, 0x818uLL);
      v11[0] = MEMORY[0x24BDAC760];
      v11[1] = 0x40000000;
      v11[2] = __aks_gather_stats_block_invoke_2;
      v11[3] = &__block_descriptor_tmp_139;
      v11[4] = v4;
      _iterate_path(v12, (uint64_t)&__block_literal_global_14, (uint64_t)v11);
      if (!statfs(v12, &v13))
      {
        if ((a2 & 1) != 0)
          printf("Free Blocks:%lld blocks of size:%d\n");
        else
          printf("%lld,%d\n");
      }
      v5 = v4 + 340;
      for (i = 1; i != 5; ++i)
      {
        if ((a2 & 1) != 0)
        {
          v9 = &v4[296 * i];
          printf("%s:\n\tNum files:\t%u,\n\tNum hardlinks:\t%u,\n\tNum compressed:\t%u,\n\tTotal Size:\t%lld,\n\tMin File Size:\t%lld,\n\tMax File Size:\t%lld,\n", class_names[i], *(_DWORD *)v9, *((_DWORD *)v9 + 2), *((_DWORD *)v9 + 1), *((_QWORD *)v9 + 2), *((_QWORD *)v9 + 3), *((_QWORD *)v9 + 4));
          printf("\tSize Distribution:");
          printf("%i", *((_DWORD *)v9 + 10));
          for (j = 0; j != 252; j += 4)
          {
            putchar(44);
            printf("%i", *(_DWORD *)&v5[j]);
          }
        }
        else
        {
          v7 = &v4[296 * i];
          printf("%i,%u,%u,%u,%lld,%lld,%lld,", i, *(_DWORD *)v7, *((_DWORD *)v7 + 2), *((_DWORD *)v7 + 1), *((_QWORD *)v7 + 2), *((_QWORD *)v7 + 3), *((_QWORD *)v7 + 4));
          printf("%i", *((_DWORD *)v7 + 10));
          for (k = 0; k != 252; k += 4)
          {
            putchar(44);
            printf("%i", *(_DWORD *)&v5[k]);
          }
        }
        putchar(10);
        v5 += 296;
      }
      free(v4);
    }
  }
}

uint64_t __aks_gather_stats_block_invoke()
{
  return 1;
}

uint64_t __aks_gather_stats_block_invoke_2(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  int64_t v6;
  uint64_t v7;
  uint64_t v8;
  int64_t *v9;
  int64_t v10;
  uint64_t v11;
  int64_t *v12;
  int64_t v13;
  int64_t v14;
  BOOL v15;
  unint64_t v16;

  result = _get_path_class(*(const char **)(a2 + 48));
  if ((result - 7) >= 0xFFFFFFFA)
  {
    v5 = *(_QWORD *)(a2 + 96);
    v6 = *(_QWORD *)(v5 + 96);
    v7 = *(_QWORD *)(a1 + 32);
    ++*(_DWORD *)(v7 + 296 * result);
    if (*(unsigned __int16 *)(v5 + 6) >= 2u)
      ++*(_DWORD *)(v7 + 296 * result + 8);
    if ((*(_BYTE *)(v5 + 116) & 0x20) != 0)
      ++*(_DWORD *)(v7 + 296 * result + 4);
    v8 = v7 + 296 * result;
    v10 = *(_QWORD *)(v8 + 32);
    v9 = (int64_t *)(v8 + 32);
    *(v9 - 2) += v6;
    if (v6 > v10)
      *v9 = v6;
    v11 = v7 + 296 * result;
    v14 = *(_QWORD *)(v11 + 24);
    v12 = (int64_t *)(v11 + 24);
    v13 = v14;
    if (v14)
      v15 = v6 < v13;
    else
      v15 = 1;
    if (v15)
      *v12 = v6;
    if (v6)
      v16 = v7 + 296 * result + 4 * (63 - __clz(v6));
    else
      v16 = v7 + 296 * result;
    ++*(_DWORD *)(v16 + 40);
  }
  return result;
}

uint64_t aks_kext_set_options(unsigned int a1, uint64_t a2)
{
  mach_port_t aks_client_connection;
  uint32_t outputCnt;
  uint64_t output;
  uint64_t input[4];

  input[3] = *MEMORY[0x24BDAC8D0];
  input[0] = 1;
  input[1] = a1;
  input[2] = a2;
  output = 0;
  outputCnt = 1;
  aks_client_connection = get_aks_client_connection();
  if (aks_client_connection)
    return IOConnectCallMethod(aks_client_connection, 0x56u, input, 3u, 0, 0, &output, &outputCnt, 0, 0);
  fprintf((FILE *)*MEMORY[0x24BDAC8E8], "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_kext_set_options", ":", 820, "", 0, "", "");
  return 3758097084;
}

uint64_t aks_kext_get_options(unsigned int a1, uint64_t *a2)
{
  uint64_t v2;
  mach_port_t aks_client_connection;
  uint32_t outputCnt;
  uint64_t output;
  uint64_t input[4];

  input[3] = *MEMORY[0x24BDAC8D0];
  v2 = 3758097084;
  if (!a2)
    return 3758097090;
  input[0] = 0;
  input[1] = a1;
  input[2] = 0;
  output = 0;
  outputCnt = 1;
  aks_client_connection = get_aks_client_connection();
  if (aks_client_connection)
  {
    v2 = IOConnectCallMethod(aks_client_connection, 0x56u, input, 3u, 0, 0, &output, &outputCnt, 0, 0);
    if (!(_DWORD)v2)
      *a2 = output;
  }
  else
  {
    fprintf((FILE *)*MEMORY[0x24BDAC8E8], "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_kext_get_options", ":", 841, "", 0, "", "");
  }
  return v2;
}

uint64_t aks_internal_state()
{
  mach_port_t aks_client_connection;

  aks_client_connection = get_aks_client_connection();
  if (aks_client_connection)
    return IOConnectCallMethod(aks_client_connection, 0x10u, 0, 0, 0, 0, 0, 0, 0, 0);
  fprintf((FILE *)*MEMORY[0x24BDAC8E8], "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_internal_state", ":", 857, "", 0, "", "");
  return 3758097084;
}

uint64_t aks_run_internal_test(unsigned int a1)
{
  mach_port_t aks_client_connection;
  uint64_t input[2];

  input[1] = *MEMORY[0x24BDAC8D0];
  aks_client_connection = get_aks_client_connection();
  if (aks_client_connection)
  {
    input[0] = a1;
    return IOConnectCallMethod(aks_client_connection, 0x86u, input, 1u, 0, 0, 0, 0, 0, 0);
  }
  else
  {
    fprintf((FILE *)*MEMORY[0x24BDAC8E8], "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_run_internal_test", ":", 871, "", 0, "", "");
    return 3758097084;
  }
}

uint64_t aks_stash_escrow(uint64_t a1)
{
  int v1;
  _DWORD *v2;
  _DWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  int v6;
  int v7;
  const void *v8;
  const void *v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  int v16;
  mach_port_t aks_client_connection;
  uint64_t v18;
  void *v19;
  size_t __count;
  uint64_t input[4];
  _BYTE __src[32768];
  uint64_t v24;

  v1 = MEMORY[0x24BDAC7A8](a1);
  v3 = v2;
  v5 = v4;
  v7 = v6;
  v9 = v8;
  v11 = v10;
  v13 = v12;
  v15 = v14;
  v16 = v1;
  v24 = *MEMORY[0x24BDAC8D0];
  bzero(__src, 0x8000uLL);
  __count = 0x8000;
  aks_client_connection = get_aks_client_connection();
  if (aks_client_connection)
  {
    input[0] = v16;
    input[1] = v15;
    input[2] = v13;
    input[3] = v11;
    if (!v15 || (v18 = 3758097090, v5) && v3)
    {
      v18 = IOConnectCallMethod(aks_client_connection, 0x36u, input, 4u, v9, v7, 0, 0, __src, &__count);
      if (!(_DWORD)v18 && v15)
      {
        v19 = calloc(__count, 1uLL);
        *v5 = v19;
        if (v19)
        {
          memcpy(v19, __src, __count);
          v18 = 0;
          *v3 = __count;
        }
        else
        {
          v18 = 3758097085;
        }
      }
    }
  }
  else
  {
    v18 = 3758097084;
    fprintf((FILE *)*MEMORY[0x24BDAC8E8], "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_stash_escrow", ":", 890, "", 0, "", "");
  }
  memset_s(__src, 0x8000uLL, 0, 0x8000uLL);
  return v18;
}

void __get_aks_client_connection_block_invoke()
{
  if (!get_aks_client_connection_connection)
    get_aks_client_connection_connection = _copy_aks_client_connection("IOService:/IOResources/AppleKeyStore", "AppleKeyStore");
}

uint64_t get_akstest_client_connection()
{
  uint64_t result;

  if (get_aks_client_dispatch_queue_onceToken != -1)
    dispatch_once(&get_aks_client_dispatch_queue_onceToken, &__block_literal_global_168);
  dispatch_sync((dispatch_queue_t)get_aks_client_dispatch_queue_connection_queue, &__block_literal_global_154);
  result = get_akstest_client_connection_connection;
  if (!get_akstest_client_connection_connection)
  {
    syslog(3, "failed to open connection to %s\n", "AppleKeyStoreTest");
    return get_akstest_client_connection_connection;
  }
  return result;
}

void __get_akstest_client_connection_block_invoke()
{
  if (!get_akstest_client_connection_connection)
    get_akstest_client_connection_connection = _copy_aks_client_connection("IOService:/IOResources/AppleKeyStoreTest", "AppleKeyStoreTest");
}

uint64_t akstest_new_key(mach_port_t a1, const void *a2, uint64_t a3, unsigned int a4, uint64_t a5, uint64_t a6, _DWORD *a7)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  size_t v19;
  uint32_t outputCnt;
  unsigned int outputStruct[256];
  uint64_t output;
  uint64_t input[3];

  input[2] = *MEMORY[0x24BDAC8D0];
  input[0] = a4;
  input[1] = a3;
  output = 0;
  outputCnt = 1;
  bzero(outputStruct, 0x400uLL);
  v19 = 1024;
  v11 = IOConnectCallMethod(a1, 0xFu, input, 2u, a2, 0x10uLL, &output, &outputCnt, outputStruct, &v19);
  if ((_DWORD)v11)
    return v11;
  v17 = 3758097084;
  if (outputCnt == 1)
  {
    *a7 = output;
    if (aks_unpack_data(outputStruct, v19, 3u, v12, v13, v14, v15, v16, a5))
      return 3758097084;
    else
      return 0;
  }
  return v17;
}

uint64_t akstest_new_ekwk(mach_port_t a1, const void *a2, uint64_t a3, unsigned int a4, uint64_t a5, uint64_t a6, _DWORD *a7, uint64_t a8, uint64_t a9, _DWORD *a10, uint64_t a11, uint64_t a12, _DWORD *a13)
{
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  size_t v26;
  uint32_t outputCnt;
  unsigned int outputStruct[256];
  uint64_t output;
  uint64_t v30;
  uint64_t v31;
  uint64_t input[3];

  input[2] = *MEMORY[0x24BDAC8D0];
  input[0] = a4;
  input[1] = a3;
  output = 0;
  v30 = 0;
  v31 = 0;
  outputCnt = 3;
  bzero(outputStruct, 0x400uLL);
  v26 = 1024;
  v17 = IOConnectCallMethod(a1, 0x13u, input, 2u, a2, 0x10uLL, &output, &outputCnt, outputStruct, &v26);
  if ((_DWORD)v17)
    return v17;
  v23 = 3758097084;
  if (outputCnt == 3)
  {
    v24 = v30;
    *a7 = output;
    *a10 = v24;
    *a13 = v31;
    if (aks_unpack_data(outputStruct, v26, 5u, v18, v19, v20, v21, v22, a5))
      return 3758097084;
    else
      return 0;
  }
  return v23;
}

uint64_t akstest_new_ek(mach_port_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, size_t *a8)
{
  uint64_t v11;
  unsigned int inputStructCnt[3];
  uint64_t input[2];

  input[1] = *MEMORY[0x24BDAC8D0];
  input[0] = a3;
  memset(inputStructCnt, 0, sizeof(inputStructCnt));
  aks_pack_data((char **)&inputStructCnt[1], inputStructCnt, 2, a4, a5, a6, (uint64_t)a7, (uint64_t)a8, a2);
  v11 = IOConnectCallMethod(a1, 0x14u, input, 1u, *(const void **)&inputStructCnt[1], (int)inputStructCnt[0], 0, 0, a7, a8);
  free(*(void **)&inputStructCnt[1]);
  return v11;
}

uint64_t akstest_rewrap_ek(mach_port_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned int a9, uint64_t a10, uint64_t a11, unsigned int a12, void *outputStruct, size_t *a14, _DWORD *a15)
{
  uint64_t v16;
  uint64_t v17;
  uint32_t outputCnt;
  unsigned int inputStructCnt[3];
  uint64_t output;
  uint64_t input[5];

  input[4] = *MEMORY[0x24BDAC8D0];
  input[0] = a3;
  input[1] = a6;
  input[2] = a9;
  input[3] = a12;
  output = 0;
  outputCnt = 1;
  memset(inputStructCnt, 0, sizeof(inputStructCnt));
  aks_pack_data((char **)&inputStructCnt[1], inputStructCnt, 4, a4, a5, a6, a7, a8, a2);
  v16 = IOConnectCallMethod(a1, 0x15u, input, 4u, *(const void **)&inputStructCnt[1], (int)inputStructCnt[0], &output, &outputCnt, outputStruct, a14);
  if ((_DWORD)v16)
  {
    v17 = v16;
  }
  else if (outputCnt == 1)
  {
    v17 = 0;
    *a15 = output;
  }
  else
  {
    v17 = 3758097084;
  }
  free(*(void **)&inputStructCnt[1]);
  return v17;
}

uint64_t akstest_unwrap_key(mach_port_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned int a6, uint64_t a7)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  size_t outputStructCnt;
  unsigned int inputStructCnt[3];
  unsigned int outputStruct[256];
  uint64_t input[3];

  input[2] = *MEMORY[0x24BDAC8D0];
  input[0] = a3;
  input[1] = a6;
  memset(inputStructCnt, 0, sizeof(inputStructCnt));
  bzero(outputStruct, 0x400uLL);
  outputStructCnt = 1024;
  aks_pack_data((char **)&inputStructCnt[1], inputStructCnt, 2, v10, v11, v12, v13, v14, a2);
  v15 = IOConnectCallMethod(a1, 0x10u, input, 2u, *(const void **)&inputStructCnt[1], (int)inputStructCnt[0], 0, 0, outputStruct, &outputStructCnt);
  if ((_DWORD)v15)
  {
    v21 = v15;
  }
  else if (aks_unpack_data(outputStruct, outputStructCnt, 2u, v16, v17, v18, v19, v20, a7))
  {
    v21 = 3758097084;
  }
  else
  {
    v21 = 0;
  }
  free(*(void **)&inputStructCnt[1]);
  return v21;
}

uint64_t akstest_unwrap_ek(mach_port_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned int a6, uint64_t a7, uint64_t a8, unsigned int a9, uint64_t a10)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  size_t v25;
  unsigned int inputStructCnt[3];
  unsigned int outputStruct[256];
  uint64_t input[4];

  input[3] = *MEMORY[0x24BDAC8D0];
  input[0] = a3;
  input[1] = a6;
  input[2] = a9;
  memset(inputStructCnt, 0, sizeof(inputStructCnt));
  bzero(outputStruct, 0x400uLL);
  v25 = 1024;
  aks_pack_data((char **)&inputStructCnt[1], inputStructCnt, 3, v12, v13, v14, v15, v16, a2);
  v17 = IOConnectCallMethod(a1, 0x17u, input, 3u, *(const void **)&inputStructCnt[1], (int)inputStructCnt[0], 0, 0, outputStruct, &v25);
  if ((_DWORD)v17)
  {
    v23 = v17;
  }
  else if (aks_unpack_data(outputStruct, v25, 2u, v18, v19, v20, v21, v22, a10))
  {
    v23 = 3758097084;
  }
  else
  {
    v23 = 0;
  }
  free(*(void **)&inputStructCnt[1]);
  return v23;
}

uint64_t akstest_check_class(mach_port_t a1, void *inputStruct, unsigned int a3)
{
  uint64_t input[2];

  input[1] = *MEMORY[0x24BDAC8D0];
  input[0] = a3;
  return IOConnectCallMethod(a1, 0x11u, input, 1u, inputStruct, 0x10uLL, 0, 0, 0, 0);
}

uint64_t akstest_last_user(mach_port_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unsigned int inputStructCnt[3];
  uint64_t input[2];

  input[1] = *MEMORY[0x24BDAC8D0];
  input[0] = a2;
  memset(inputStructCnt, 0, sizeof(inputStructCnt));
  aks_pack_data((char **)&inputStructCnt[1], inputStructCnt, 1, a4, a5, a6, a7, a8, a3);
  v9 = IOConnectCallMethod(a1, 0x12u, input, 1u, *(const void **)&inputStructCnt[1], (int)inputStructCnt[0], 0, 0, 0, 0);
  free(*(void **)&inputStructCnt[1]);
  return v9;
}

uint64_t aks_get_internal_info_for_key(uint64_t a1)
{
  int v1;
  size_t *v2;
  size_t *v3;
  _QWORD *v4;
  _QWORD *v5;
  const void *v6;
  const void *v7;
  mach_port_t aks_client_connection;
  size_t v9;
  uint64_t v10;
  size_t v11;
  void *v12;
  uint64_t v13;
  size_t __count;
  _BYTE __src[32768];
  uint64_t input[2];

  v1 = MEMORY[0x24BDAC7A8](a1);
  v3 = v2;
  v5 = v4;
  v7 = v6;
  input[1] = *MEMORY[0x24BDAC8D0];
  input[0] = v1;
  bzero(__src, 0x8000uLL);
  __count = 0x8000;
  aks_client_connection = get_aks_client_connection();
  if (aks_client_connection)
  {
    if (v7)
      v9 = 18;
    else
      v9 = 0;
    v10 = IOConnectCallMethod(aks_client_connection, 0x5Du, input, 1u, v7, v9, 0, 0, __src, &__count);
    v11 = __count;
    if ((_DWORD)v10)
    {
      v13 = v10;
    }
    else if (__count - 32769 < 0xFFFFFFFFFFFF8000)
    {
      v13 = 3758097090;
    }
    else
    {
      v12 = calloc(__count, 1uLL);
      *v5 = v12;
      v11 = __count;
      if (v12)
      {
        *v3 = __count;
        memcpy(v12, __src, v11);
        v13 = 0;
        v11 = __count;
      }
      else
      {
        v13 = 3758097085;
      }
    }
  }
  else
  {
    v13 = 3758097084;
    fprintf((FILE *)*MEMORY[0x24BDAC8E8], "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_get_internal_info_for_key", ":", 1246, "", 0, "", "");
    v11 = 0x8000;
  }
  memset_s(__src, v11, 0, v11);
  return v13;
}

dispatch_queue_t __get_aks_client_dispatch_queue_block_invoke()
{
  dispatch_queue_t result;

  result = dispatch_queue_create("aks-client-queue", 0);
  get_aks_client_dispatch_queue_connection_queue = (uint64_t)result;
  return result;
}

uint64_t _copy_aks_client_connection(char *path, const char *a2)
{
  mach_port_t v3;
  io_service_t v4;
  task_port_t *v5;
  io_object_t v6;
  kern_return_t v7;
  const __CFDictionary *v8;
  io_service_t MatchingService;
  io_object_t v10;
  uint64_t result;
  kern_return_t v12;
  io_connect_t connect;

  connect = 0;
  v3 = *MEMORY[0x24BDD8B20];
  v4 = IORegistryEntryFromPath(*MEMORY[0x24BDD8B20], path);
  v5 = (task_port_t *)MEMORY[0x24BDAEC58];
  if (!v4 || (v6 = v4, v7 = IOServiceOpen(v4, *MEMORY[0x24BDAEC58], 0, &connect), IOObjectRelease(v6), v7))
  {
    v8 = IOServiceMatching(a2);
    MatchingService = IOServiceGetMatchingService(v3, v8);
    if (MatchingService)
    {
      v10 = MatchingService;
      IOServiceOpen(MatchingService, *v5, 0, &connect);
      IOObjectRelease(v10);
    }
  }
  result = connect;
  if (connect)
  {
    v12 = IOConnectCallMethod(connect, 0, 0, 0, 0, 0, 0, 0, 0, 0);
    result = connect;
    if (v12)
    {
      IOServiceClose(connect);
      return 0;
    }
  }
  return result;
}

uint64_t sizeof_backup_bag()
{
  ccder_sizeof_implicit_uint64();
  ccder_sizeof_raw_octet_string();
  ccder_sizeof_raw_octet_string();
  ccder_sizeof_implicit_uint64();
  return ccder_sizeof();
}

uint64_t encode_backup_bag(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3;
  uint64_t result;
  uint64_t v6;

  v6 = a2 + a3;
  if (!ccder_blob_encode_implicit_uint64()
    || !ccder_blob_encode_body_tl()
    || !ccder_blob_encode_body_tl()
    || !ccder_blob_encode_body_tl()
    || !ccder_blob_encode_implicit_uint64())
  {
    return 4294967273;
  }
  v3 = ccder_blob_encode_tl();
  result = 4294967273;
  if (v3)
  {
    if (a2 == v6)
      return 0;
    else
      return 4294967273;
  }
  return result;
}

uint64_t decode_backup_bag(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  int v4;
  uint64_t result;
  __int128 v6;

  *(_QWORD *)&v6 = a1;
  *((_QWORD *)&v6 + 1) = a1 + a2;
  if (!ccder_blob_decode_range()
    || !der_utils_decode_implicit_uint64(&v6, 0x8000000000000000, a3)
    || !der_utils_decode_implicit_raw_octet_string_copy(&v6, 0x8000000000000001, (uint64_t)(a3 + 1), 16)
    || !der_utils_decode_implicit_raw_octet_string_copy(&v6, 0x8000000000000002, (uint64_t)(a3 + 3), 40)
    || !der_utils_decode_implicit_raw_octet_string_copy(&v6, 0x8000000000000003, (uint64_t)(a3 + 8), 16))
  {
    return 4294967277;
  }
  v4 = der_utils_decode_implicit_uint64(&v6, 0x8000000000000004, a3 + 10);
  result = 4294967277;
  if (v4)
  {
    if ((_QWORD)v6 == *((_QWORD *)&v6 + 1))
      return 0;
    else
      return 4294967277;
  }
  return result;
}

uint64_t wrap_backup_bag(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v12;
  _OWORD __s[2];
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  memset(__s, 0, sizeof(__s));
  v12 = 40;
  *(_QWORD *)a4 = 0;
  uuid_copy((unsigned __int8 *)(a4 + 8), (const unsigned __int8 *)(a1 + 32));
  *(_QWORD *)(a4 + 80) = 1;
  platform_read_random(a4 + 64, 0x10u);
  v8 = ccsha256_di();
  if (firebloom_ccpbkdf2_hmac(v8, a3, a2, 16, a4 + 64, *(_QWORD *)(a4 + 80), 32, __s))
  {
    v10 = 4294967286;
  }
  else
  {
    v9 = rfc3394_wrap_legacy((uint64_t)__s, 0x20u, 0xA6A6A6A6A6A6A6A6, 0, (uint64_t *)a1, 0x20u, (_QWORD *)(a4 + 24), &v12);
    if ((_DWORD)v9)
    {
      v10 = v9;
    }
    else if (v12 == 40)
    {
      v10 = 0;
    }
    else
    {
      v10 = 4294967286;
    }
  }
  memset_s(__s, 0x20uLL, 0, 0x20uLL);
  return v10;
}

uint64_t unwrap_backup_bag(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v12;
  _OWORD __s[2];
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  memset(__s, 0, sizeof(__s));
  v12 = 32;
  if (*(_QWORD *)a1)
  {
    v10 = 4294967284;
  }
  else
  {
    v8 = ccsha256_di();
    if (firebloom_ccpbkdf2_hmac(v8, a3, a2, 16, a1 + 64, *(_QWORD *)(a1 + 80), 32, __s))
      goto LABEL_9;
    v9 = rfc3394_unwrap_legacy((uint64_t)__s, 0x20u, 0xA6A6A6A6A6A6A6A6, 0, (_QWORD *)(a1 + 24), 0x28u, (_QWORD *)a4, &v12);
    if ((_DWORD)v9)
    {
      v10 = v9;
      goto LABEL_8;
    }
    if (v12 != 32)
    {
LABEL_9:
      v10 = 4294967286;
    }
    else
    {
      cccurve25519_make_pub();
      if (uuid_compare((const unsigned __int8 *)(a1 + 8), (const unsigned __int8 *)(a4 + 32)))
        v10 = 4294967272;
      else
        v10 = 0;
    }
  }
LABEL_8:
  memset_s(__s, 0x20uLL, 0, 0x20uLL);
  return v10;
}

uint64_t aks_stash_create_for_bag_and_kek(uint64_t a1)
{
  int v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  int v12;
  uint64_t v13;
  mach_port_t aks_client_connection;
  mach_port_t v15;
  __int128 v17;
  uint64_t input[7];
  _BYTE v19[4096];
  uint64_t v20;

  v1 = MEMORY[0x24BDAC7A8](a1);
  v3 = v2;
  v5 = v4;
  v7 = v6;
  v9 = v8;
  v11 = v10;
  v12 = v1;
  v20 = *MEMORY[0x24BDAC8D0];
  v13 = 3758097098;
  bzero(v19, 0x1000uLL);
  *(_QWORD *)&v17 = v19;
  *((_QWORD *)&v17 + 1) = &v20;
  aks_client_connection = get_aks_client_connection();
  if (aks_client_connection)
  {
    v15 = aks_client_connection;
    if (der_utils_encode_fv_data(&v17, v3) && ccder_blob_encode_tl())
    {
      input[0] = v12;
      input[1] = v11;
      input[2] = v7;
      input[3] = v5;
      input[4] = v9;
      input[5] = *((_QWORD *)&v17 + 1);
      input[6] = (uint64_t)&v20 - *((_QWORD *)&v17 + 1);
      return IOConnectCallMethod(v15, 0x21u, input, 7u, 0, 0, 0, 0, 0, 0);
    }
  }
  else
  {
    fprintf((FILE *)*MEMORY[0x24BDAC8E8], "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_stash_create_for_bag_and_kek", ":", 50, "", 0, "", "");
    return 3758097084;
  }
  return v13;
}

uint64_t aks_stash_create(uint64_t a1)
{
  return aks_stash_create_for_bag_and_kek(a1);
}

uint64_t aks_stash_load(int a1)
{
  return _aks_stash_load(a1, 0, 0);
}

uint64_t _aks_stash_load(int a1, unsigned int a2, BOOL *a3)
{
  mach_port_t aks_client_connection;
  uint64_t result;
  uint32_t outputCnt;
  uint64_t output;
  uint64_t input[3];

  input[2] = *MEMORY[0x24BDAC8D0];
  aks_client_connection = get_aks_client_connection();
  if (aks_client_connection)
  {
    input[0] = a1;
    input[1] = a2;
    output = 0;
    outputCnt = 1;
    result = IOConnectCallMethod(aks_client_connection, 0x22u, input, 2u, 0, 0, &output, &outputCnt, 0, 0);
    if (!(_DWORD)result)
    {
      result = 0;
      if (a3)
        *a3 = output != 0;
    }
  }
  else
  {
    fprintf((FILE *)*MEMORY[0x24BDAC8E8], "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "_aks_stash_load", ":", 77, "", 0, "", "");
    return 3758097084;
  }
  return result;
}

uint64_t aks_stash_verify(int a1, _BYTE *a2)
{
  uint64_t result;
  BOOL v4;

  v4 = 0;
  if (!a2)
    return _aks_stash_load(a1, 1u, &v4);
  *a2 = 0;
  result = _aks_stash_load(a1, 1u, &v4);
  if (!(_DWORD)result)
    *a2 = v4;
  return result;
}

uint64_t aks_stash_destroy()
{
  mach_port_t aks_client_connection;

  aks_client_connection = get_aks_client_connection();
  if (aks_client_connection)
    return IOConnectCallMethod(aks_client_connection, 0x25u, 0, 0, 0, 0, 0, 0, 0, 0);
  fprintf((FILE *)*MEMORY[0x24BDAC8E8], "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_stash_destroy", ":", 125, "", 0, "", "");
  return 3758097084;
}

uint64_t aks_stash_commit(int a1)
{
  mach_port_t aks_client_connection;
  uint64_t input[2];

  input[1] = *MEMORY[0x24BDAC8D0];
  aks_client_connection = get_aks_client_connection();
  if (aks_client_connection)
  {
    input[0] = a1;
    return IOConnectCallMethod(aks_client_connection, 0x24u, input, 1u, 0, 0, 0, 0, 0, 0);
  }
  else
  {
    fprintf((FILE *)*MEMORY[0x24BDAC8E8], "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_stash_commit", ":", 138, "", 0, "", "");
    return 3758097084;
  }
}

uint64_t aks_stash_enable(int a1)
{
  mach_port_t aks_client_connection;
  uint64_t input[2];

  input[1] = *MEMORY[0x24BDAC8D0];
  aks_client_connection = get_aks_client_connection();
  if (aks_client_connection)
  {
    input[0] = a1;
    return IOConnectCallMethod(aks_client_connection, 0x33u, input, 1u, 0, 0, 0, 0, 0, 0);
  }
  else
  {
    fprintf((FILE *)*MEMORY[0x24BDAC8E8], "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_stash_enable", ":", 154, "", 0, "", "");
    return 3758097084;
  }
}

uint64_t aks_stash_persist(int a1)
{
  mach_port_t aks_client_connection;
  uint64_t input[2];

  input[1] = *MEMORY[0x24BDAC8D0];
  aks_client_connection = get_aks_client_connection();
  if (aks_client_connection)
  {
    input[0] = a1;
    return IOConnectCallMethod(aks_client_connection, 0x35u, input, 1u, 0, 0, 0, 0, 0, 0);
  }
  else
  {
    fprintf((FILE *)*MEMORY[0x24BDAC8E8], "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_stash_persist", ":", 170, "", 0, "", "");
    return 3758097084;
  }
}

uint64_t aks_prederived_free(void **a1)
{
  if (!a1)
    return 0xFFFFFFFFLL;
  if (*(_DWORD *)a1 != 1634431856)
    return 0xFFFFFFFFLL;
  free(a1[1]);
  free(a1);
  return 0;
}

uint64_t aks_prederived_create(int a1, uint64_t a2, unint64_t a3, int a4, void ***a5)
{
  void *v9;
  void *v10;
  int v11;
  uint64_t v12;
  void **v14;

  v14 = 0;
  if (!a2 && a3)
    return 0xFFFFFFFFLL;
  if (_aks_prederived_create_ctx(a4, &v14) || (v9 = calloc(0x20uLL, 1uLL)) == 0)
  {
    v12 = 0xFFFFFFFFLL;
  }
  else
  {
    v10 = v9;
    v11 = _aks_prederive_passcode(v14, a2, a3, (uint64_t)v9);
    v12 = 0xFFFFFFFFLL;
    if (a3 <= 0x7FFFFFFE
      && !v11
      && !_set_prederived_configuration(a1, a2, a3, (uint64_t)v10, (uint64_t)v14))
    {
      v12 = 0;
      if (a5)
      {
        *a5 = v14;
        v14 = 0;
      }
    }
    memset_s(v10, 0x20uLL, 0, 0x20uLL);
    free(v10);
  }
  if (v14)
    aks_prederived_free(v14);
  return v12;
}

uint64_t _aks_prederived_create_ctx(int a1, _QWORD *a2)
{
  uint64_t result;
  _DWORD *v6;
  _DWORD *v7;
  void *v8;
  int v9;
  void *v10;

  if ((a1 - 1) > 2 || a2 == 0)
    return 0xFFFFFFFFLL;
  v6 = calloc(0x20uLL, 1uLL);
  if (!v6)
    return 0xFFFFFFFFLL;
  v7 = v6;
  *((_QWORD *)v6 + 2) = 20;
  v8 = calloc(0x14uLL, 1uLL);
  *((_QWORD *)v7 + 1) = v8;
  if (!v8)
  {
LABEL_19:
    free(v7);
    return 0xFFFFFFFFLL;
  }
  *v7 = 1634431856;
  v7[6] = a1;
  result = CCRandomCopyBytes();
  if ((_DWORD)result)
  {
    v10 = (void *)*((_QWORD *)v7 + 1);
    if (v10)
      free(v10);
    goto LABEL_19;
  }
  if (a1 == 3)
    v9 = 2000;
  else
    v9 = 10000000;
  if (a1 == 2)
    v9 = 1000;
  v7[1] = v9;
  *a2 = v7;
  return result;
}

uint64_t _aks_prederive_passcode(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;

  if (!a1)
    return 0xFFFFFFFFLL;
  if (*a1 != 1634431856 || !a2 && a3)
    return 0xFFFFFFFFLL;
  result = 0xFFFFFFFFLL;
  if (a4 && (a1[6] - 4) >= 0xFFFFFFFD)
  {
    ccsha256_di();
    if (ccpbkdf2_hmac())
      return 0xFFFFFFFFLL;
    else
      return 0;
  }
  return result;
}

uint64_t _set_prederived_configuration(int a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  mach_port_t aks_client_connection;
  mach_port_t v12;
  void *v14;
  rsize_t __n;
  void *__s;
  uint64_t input[4];

  input[3] = *MEMORY[0x24BDAC8D0];
  __n = 0;
  __s = 0;
  v10 = 3758097090;
  v14 = 0;
  if ((a2 || !a3) && a4 && a5)
  {
    aks_client_connection = get_aks_client_connection();
    if (aks_client_connection)
    {
      v12 = aks_client_connection;
      if (!encode_list_add_data(&v14, (uint64_t)der_key_config_prederived_salt, *(_QWORD *)(a5 + 8))
        && !encode_list_add_data(&v14, (uint64_t)der_key_config_prederived_passcode, a4)
        && !encode_list_add_number(&v14, (uint64_t)der_key_config_prederived_iterations, *(unsigned int *)(a5 + 4))&& !encode_list_add_number(&v14, (uint64_t)der_key_config_prederived_type, *(unsigned int *)(a5 + 24))&& (a3 < 1 || !encode_list_add_data(&v14, (uint64_t)der_key_passcode, a2))&& !encode_list_is_empty(&v14)&& !encode_list_dict(&v14, &__s, &__n))
      {
        input[0] = a1;
        input[1] = (uint64_t)__s;
        input[2] = __n;
        v10 = IOConnectCallMethod(v12, 0x1Eu, input, 3u, 0, 0, 0, 0, 0, 0);
      }
    }
    else
    {
      fprintf((FILE *)*MEMORY[0x24BDAC8E8], "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "_set_prederived_configuration", ":", 218, "", 0, "", "");
      v10 = 3758097084;
    }
  }
  encode_list_free(&v14);
  if (__s)
  {
    memset_s(__s, __n, 0, __n);
    free(__s);
  }
  return v10;
}

uint64_t aks_prederived_is_enabled(uint64_t a1)
{
  int v1;
  uint64_t *v2;
  uint64_t *v3;
  int v4;
  uint64_t result;
  uint64_t v6;
  mach_port_t aks_client_connection;
  mach_port_t v8;
  CFMutableDictionaryRef Mutable;
  uint64_t v10;
  const void *v11;
  void *v12;
  int v13;
  size_t v14[2];
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  void *v20;
  __int128 v21;
  __int128 v22;
  uint64_t input;
  _BYTE outputStruct[32768];
  uint64_t v25;

  v1 = MEMORY[0x24BDAC7A8](a1);
  v25 = *MEMORY[0x24BDAC8D0];
  if (!v2)
    return 0;
  v3 = v2;
  v4 = v1;
  result = (uint64_t)calloc(0x20uLL, 1uLL);
  if (!result)
    return result;
  v6 = result;
  *(_DWORD *)result = 1634431856;
  aks_client_connection = get_aks_client_connection();
  if (!aks_client_connection)
  {
    fprintf((FILE *)*MEMORY[0x24BDAC8E8], "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "_get_prederived_configuration", ":", 384, "", 0, "", "");
LABEL_16:
    aks_prederived_free((void **)v6);
    return 0;
  }
  v8 = aks_client_connection;
  bzero(outputStruct, 0x8000uLL);
  v14[0] = 0x8000;
  input = v4;
  if (IOConnectCallMethod(v8, 0x1Fu, &input, 1u, 0, 0, 0, 0, outputStruct, v14) || v14[0] > 0x8000)
    goto LABEL_16;
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
  v16 = 0u;
  v18 = 0u;
  v19 = 0;
  v15 = 0u;
  v21 = 0u;
  v22 = 0u;
  v14[1] = (size_t)der_key_config_prederived_salt;
  v17 = (unint64_t)der_key_config_prederived_iterations;
  v20 = der_key_config_prederived_type;
  der_dict_iterate();
  v10 = ccder_decode_tl();
  if (v10)
  {
    v11 = (const void *)v10;
    v12 = calloc(*(_QWORD *)(v6 + 16), 1uLL);
    *(_QWORD *)(v6 + 8) = v12;
    if (!v12)
    {
      v13 = 0;
      if (!Mutable)
        goto LABEL_11;
      goto LABEL_10;
    }
    memcpy(v12, v11, *(_QWORD *)(v6 + 16));
    *(_DWORD *)(v6 + 4) = der_get_number();
    *(_DWORD *)(v6 + 24) = der_get_number();
  }
  v13 = 1;
  if (Mutable)
LABEL_10:
    CFRelease(Mutable);
LABEL_11:
  if (!v13 || !*(_QWORD *)(v6 + 16))
    goto LABEL_16;
  *v3 = v6;
  return 1;
}

uint64_t aks_prederived_unlock_keybag(int a1, uint64_t a2, int a3, _DWORD *a4)
{
  BOOL v4;
  BOOL v5;
  uint64_t v7;
  _OWORD v9[2];
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  memset(v9, 0, sizeof(v9));
  if (a3)
    v4 = a2 == 0;
  else
    v4 = 0;
  v5 = v4 || a4 == 0;
  if (v5 || *a4 != 1634431856 || _aks_prederive_passcode(a4, a2, a3, (uint64_t)v9))
    v7 = 0xFFFFFFFFLL;
  else
    v7 = aks_unlock_bag(a1, (uint64_t)v9, 32);
  memset_s(v9, 0x20uLL, 0, 0x20uLL);
  return v7;
}

uint64_t aks_unlock_bag(int a1, uint64_t a2, int a3)
{
  mach_port_t aks_client_connection;
  uint64_t input[4];

  input[3] = *MEMORY[0x24BDAC8D0];
  aks_client_connection = get_aks_client_connection();
  if (aks_client_connection)
  {
    input[0] = a1;
    input[1] = a2;
    input[2] = a3;
    return IOConnectCallMethod(aks_client_connection, 0xCu, input, 3u, 0, 0, 0, 0, 0, 0);
  }
  else
  {
    fprintf((FILE *)*MEMORY[0x24BDAC8E8], "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_unlock_bag", ":", 807, "", 0, "", "");
    return 3758097084;
  }
}

uint64_t aks_prederived_change_secret(int a1, uint64_t a2, int a3, uint64_t a4, int a5, void ***a6)
{
  void **v7;
  int v11;
  void **v12;
  int v13;
  uint64_t v14;
  void **v16;
  _OWORD v17[2];
  _OWORD __s[2];
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  memset(__s, 0, sizeof(__s));
  memset(v17, 0, sizeof(v17));
  v16 = 0;
  if (!a6)
    goto LABEL_17;
  v7 = *a6;
  if (!*a6 || *(_DWORD *)v7 != 1634431856 || !a2 && a3)
    goto LABEL_17;
  if (!a4 && a5 || _aks_prederive_passcode(*a6, a2, a3, (uint64_t)__s))
    goto LABEL_17;
  v11 = _aks_prederived_create_ctx(*((_DWORD *)v7 + 6), &v16);
  v12 = v16;
  if (v11 || (v13 = _aks_prederive_passcode(v16, a4, a5, (uint64_t)v17), v12 = v16, v13))
  {
LABEL_15:
    if (v12)
      aks_prederived_free(v12);
LABEL_17:
    v14 = 0xFFFFFFFFLL;
    goto LABEL_13;
  }
  if (_set_prederived_configuration(a1, (uint64_t)__s, 32, (uint64_t)v17, (uint64_t)v16))
  {
    v12 = v16;
    goto LABEL_15;
  }
  aks_prederived_free(v7);
  v14 = 0;
  *a6 = v16;
LABEL_13:
  memset_s(__s, 0x20uLL, 0, 0x20uLL);
  memset_s(v17, 0x20uLL, 0, 0x20uLL);
  return v14;
}

uint64_t aks_create_bag(uint64_t a1, int a2, unsigned int a3, _DWORD *a4)
{
  return _create_bag(a1, a2, 0, 0, a3, -1, a4);
}

uint64_t _create_bag(uint64_t a1, int a2, uint64_t a3, int a4, unsigned int a5, int a6, _DWORD *a7)
{
  uint64_t v14;
  mach_port_t aks_client_connection;
  uint32_t outputCnt;
  uint64_t output;
  uint64_t input[7];

  input[6] = *MEMORY[0x24BDAC8D0];
  v14 = 3758097084;
  aks_client_connection = get_aks_client_connection();
  if (aks_client_connection)
  {
    if (a7)
    {
      input[0] = a5;
      input[1] = a6;
      input[2] = a1;
      input[3] = a2;
      input[4] = a3;
      input[5] = a4;
      output = 0;
      outputCnt = 1;
      v14 = IOConnectCallMethod(aks_client_connection, 2u, input, 6u, 0, 0, &output, &outputCnt, 0, 0);
      if (!(_DWORD)v14)
        *a7 = output;
    }
    else
    {
      return 3758097090;
    }
  }
  else
  {
    fprintf((FILE *)*MEMORY[0x24BDAC8E8], "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "_create_bag", ":", 187, "", 0, "", "");
  }
  return v14;
}

uint64_t aks_create_escrow_bag(uint64_t a1, int a2, int a3, _DWORD *a4)
{
  return _create_bag(a1, a2, 0, 0, 2u, a3, a4);
}

uint64_t aks_create_escrow_bag_with_auth(uint64_t a1, int a2, uint64_t a3, int a4, int a5, _DWORD *a6)
{
  return _create_bag(a3, a4, a1, a2, 2u, a5, a6);
}

uint64_t aks_create_sync_bag(uint64_t a1, int a2, int a3, _DWORD *a4)
{
  return _create_bag(a1, a2, 0, 0, 0x8000002u, a3, a4);
}

uint64_t aks_create_sync_bag_with_auth(uint64_t a1, int a2, uint64_t a3, int a4, int a5, _DWORD *a6)
{
  return _create_bag(a3, a4, a1, a2, 0x8000002u, a5, a6);
}

uint64_t aks_invalidate_sync_bags()
{
  mach_port_t aks_client_connection;

  aks_client_connection = get_aks_client_connection();
  if (aks_client_connection)
    return IOConnectCallMethod(aks_client_connection, 0x42u, 0, 0, 0, 0, 0, 0, 0, 0);
  fprintf((FILE *)*MEMORY[0x24BDAC8E8], "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_invalidate_sync_bags", ":", 544, "", 0, "", "");
  return 3758097084;
}

uint64_t aks_unlock_with_sync_bag(const void *a1, int a2, uint64_t a3, int a4, int a5)
{
  uint64_t v10;
  mach_port_t aks_client_connection;
  uint64_t input[4];

  input[3] = *MEMORY[0x24BDAC8D0];
  v10 = 3758097084;
  aks_client_connection = get_aks_client_connection();
  if (aks_client_connection)
  {
    if (a1)
    {
      input[0] = a5;
      input[1] = a3;
      input[2] = a4;
      return IOConnectCallMethod(aks_client_connection, 0x43u, input, 3u, a1, a2, 0, 0, 0, 0);
    }
    else
    {
      return 3758097090;
    }
  }
  else
  {
    fprintf((FILE *)*MEMORY[0x24BDAC8E8], "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_unlock_with_sync_bag", ":", 557, "", 0, "", "");
  }
  return v10;
}

uint64_t aks_load_bag(const void *a1, int a2, _DWORD *a3)
{
  uint64_t v6;
  mach_port_t aks_client_connection;
  uint32_t outputCnt;
  uint64_t output[2];

  output[1] = *MEMORY[0x24BDAC8D0];
  v6 = 3758097084;
  aks_client_connection = get_aks_client_connection();
  if (aks_client_connection)
  {
    v6 = 3758097090;
    if (a1)
    {
      if (a3)
      {
        output[0] = 0;
        outputCnt = 1;
        v6 = IOConnectCallMethod(aks_client_connection, 6u, 0, 0, a1, a2, output, &outputCnt, 0, 0);
        if (!(_DWORD)v6)
          *a3 = output[0];
      }
    }
  }
  else
  {
    fprintf((FILE *)*MEMORY[0x24BDAC8E8], "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_load_bag", ":", 574, "", 0, "", "");
  }
  return v6;
}

uint64_t aks_invalidate_bag(const void *a1, int a2)
{
  uint64_t v4;
  mach_port_t aks_client_connection;

  v4 = 3758097084;
  aks_client_connection = get_aks_client_connection();
  if (aks_client_connection)
  {
    if (a1)
      return IOConnectCallMethod(aks_client_connection, 0x57u, 0, 0, a1, a2, 0, 0, 0, 0);
    return 3758097090;
  }
  else
  {
    fprintf((FILE *)*MEMORY[0x24BDAC8E8], "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_invalidate_bag", ":", 596, "", 0, "", "");
  }
  return v4;
}

uint64_t aks_unload_bag(int a1)
{
  mach_port_t aks_client_connection;
  uint64_t input[2];

  input[1] = *MEMORY[0x24BDAC8D0];
  aks_client_connection = get_aks_client_connection();
  if (aks_client_connection)
  {
    input[0] = a1;
    return IOConnectCallMethod(aks_client_connection, 4u, input, 1u, 0, 0, 0, 0, 0, 0);
  }
  else
  {
    fprintf((FILE *)*MEMORY[0x24BDAC8E8], "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_unload_bag", ":", 612, "", 0, "", "");
    return 3758097084;
  }
}

uint64_t aks_unload_session_bags(int a1)
{
  mach_port_t aks_client_connection;
  uint64_t input[2];

  input[1] = *MEMORY[0x24BDAC8D0];
  aks_client_connection = get_aks_client_connection();
  if (aks_client_connection)
  {
    input[0] = a1;
    return IOConnectCallMethod(aks_client_connection, 0x37u, input, 1u, 0, 0, 0, 0, 0, 0);
  }
  else
  {
    fprintf((FILE *)*MEMORY[0x24BDAC8E8], "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_unload_session_bags", ":", 629, "", 0, "", "");
    return 3758097084;
  }
}

uint64_t aks_save_bag(uint64_t a1)
{
  int v1;
  _DWORD *v2;
  _DWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  int v6;
  mach_port_t aks_client_connection;
  mach_port_t v8;
  uint64_t result;
  void *v10;
  size_t __count;
  uint64_t input;
  _BYTE __src[32768];
  uint64_t v14;

  v1 = MEMORY[0x24BDAC7A8](a1);
  v3 = v2;
  v5 = v4;
  v6 = v1;
  v14 = *MEMORY[0x24BDAC8D0];
  aks_client_connection = get_aks_client_connection();
  if (aks_client_connection)
  {
    v8 = aks_client_connection;
    result = 3758097090;
    if (v5)
    {
      if (v3)
      {
        bzero(__src, 0x8000uLL);
        __count = 0x8000;
        input = v6;
        result = IOConnectCallMethod(v8, 3u, &input, 1u, 0, 0, 0, 0, __src, &__count);
        if (!(_DWORD)result)
        {
          v10 = calloc(__count, 1uLL);
          *v5 = v10;
          if (v10)
          {
            memcpy(v10, __src, __count);
            result = 0;
            *v3 = __count;
          }
          else
          {
            return 3758097085;
          }
        }
      }
    }
  }
  else
  {
    fprintf((FILE *)*MEMORY[0x24BDAC8E8], "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_save_bag", ":", 646, "", 0, "", "");
    return 3758097084;
  }
  return result;
}

uint64_t aks_change_secret_opts(int a1, uint64_t a2, int a3, uint64_t a4, int a5, uint64_t a6, int a7, uint64_t a8, int a9, unsigned __int8 a10, unsigned int a11, unsigned int a12, _DWORD *a13)
{
  mach_port_t aks_client_connection;
  uint64_t result;
  uint32_t outputCnt;
  uint64_t output;
  uint64_t input[13];

  input[12] = *MEMORY[0x24BDAC8D0];
  aks_client_connection = get_aks_client_connection();
  if (aks_client_connection)
  {
    input[0] = a1;
    input[1] = a11;
    input[2] = a10;
    input[3] = a2;
    input[4] = a3;
    input[5] = a4;
    input[6] = a5;
    input[7] = a6;
    input[8] = a7;
    input[9] = a8;
    input[10] = a9;
    input[11] = a12;
    output = 0;
    outputCnt = 1;
    result = IOConnectCallMethod(aks_client_connection, 0xFu, input, 0xCu, 0, 0, &output, &outputCnt, 0, 0);
    if (a13)
    {
      if (!(_DWORD)result)
        *a13 = output;
    }
  }
  else
  {
    fprintf((FILE *)*MEMORY[0x24BDAC8E8], "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_change_secret_opts", ":", 678, "", 0, "", "");
    return 3758097084;
  }
  return result;
}

uint64_t aks_change_secret_se(int a1, uint64_t a2, int a3, uint64_t a4, int a5, uint64_t a6, int a7, uint64_t a8, int a9, unsigned __int8 a10, unsigned int a11, _DWORD *a12)
{
  return aks_change_secret_opts(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, 0, a12);
}

uint64_t aks_change_secret(int a1, uint64_t a2, int a3, uint64_t a4, int a5, unsigned int a6, _DWORD *a7)
{
  return aks_change_secret_opts(a1, a2, a3, a4, a5, 0, 0, 0, 0, 0xFFu, a6, 0, a7);
}

uint64_t aks_get_bag_uuid(int a1, _OWORD *a2)
{
  uint64_t v4;
  mach_port_t aks_client_connection;
  size_t v7;
  uint64_t input;
  __int128 outputStruct;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  v4 = 3758097084;
  v7 = 16;
  aks_client_connection = get_aks_client_connection();
  if (aks_client_connection)
  {
    if (a2)
    {
      outputStruct = 0uLL;
      input = a1;
      v4 = IOConnectCallMethod(aks_client_connection, 0x17u, &input, 1u, 0, 0, 0, 0, &outputStruct, &v7);
      if (!(_DWORD)v4)
        *a2 = outputStruct;
    }
    else
    {
      return 3758097090;
    }
  }
  else
  {
    fprintf((FILE *)*MEMORY[0x24BDAC8E8], "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_get_bag_uuid", ":", 729, "", 0, "", "");
  }
  return v4;
}

uint64_t aks_copy_volume_cookie(int a1, _QWORD *a2, size_t *a3)
{
  return aks_copy_volume_cookie_persona(a1, (uint64_t)&UUID_NULL, a2, a3);
}

uint64_t aks_copy_volume_cookie_persona(int a1, uint64_t a2, _QWORD *a3, size_t *a4)
{
  mach_port_t aks_client_connection;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  mach_port_t v15;
  uint64_t v16;
  void *v17;
  unsigned int inputStructCnt[3];
  size_t __count;
  uint64_t input;
  _OWORD __src[2];
  __int16 v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v23 = 0;
  memset(__src, 0, sizeof(__src));
  __count = 34;
  memset(inputStructCnt, 0, sizeof(inputStructCnt));
  aks_client_connection = get_aks_client_connection();
  if (aks_client_connection)
  {
    v14 = 3758097090;
    if (a3 && a4)
    {
      v15 = aks_client_connection;
      input = a1;
      aks_pack_data((char **)&inputStructCnt[1], inputStructCnt, 1, v9, v10, v11, v12, v13, a2);
      if (*(_QWORD *)&inputStructCnt[1])
      {
        v16 = IOConnectCallMethod(v15, 0x44u, &input, 1u, *(const void **)&inputStructCnt[1], (int)inputStructCnt[0], 0, 0, __src, &__count);
        if ((_DWORD)v16)
        {
          v14 = v16;
        }
        else
        {
          v17 = calloc(__count, 1uLL);
          *a3 = v17;
          v14 = 3758097085;
          if (v17)
          {
            memcpy(v17, __src, __count);
            v14 = 0;
            *a4 = __count;
          }
        }
      }
      else
      {
        v14 = 3758097085;
      }
    }
  }
  else
  {
    fprintf((FILE *)*MEMORY[0x24BDAC8E8], "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_copy_volume_cookie_persona", ":", 760, "", 0, "", "");
    v14 = 3758097084;
  }
  free(*(void **)&inputStructCnt[1]);
  return v14;
}

uint64_t aks_lock_bag(int a1)
{
  mach_port_t aks_client_connection;
  uint64_t input[2];

  input[1] = *MEMORY[0x24BDAC8D0];
  aks_client_connection = get_aks_client_connection();
  if (aks_client_connection)
  {
    input[0] = a1;
    return IOConnectCallMethod(aks_client_connection, 0xDu, input, 1u, 0, 0, 0, 0, 0, 0);
  }
  else
  {
    fprintf((FILE *)*MEMORY[0x24BDAC8E8], "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_lock_bag", ":", 790, "", 0, "", "");
    return 3758097084;
  }
}

uint64_t aks_get_lock_state(int a1, _DWORD *a2)
{
  uint64_t v4;
  mach_port_t aks_client_connection;
  uint32_t outputCnt;
  uint64_t output;
  uint64_t input[2];

  input[1] = *MEMORY[0x24BDAC8D0];
  v4 = 3758097084;
  aks_client_connection = get_aks_client_connection();
  if (aks_client_connection)
  {
    if (a2)
    {
      output = 0;
      input[0] = a1;
      outputCnt = 1;
      v4 = IOConnectCallMethod(aks_client_connection, 7u, input, 1u, 0, 0, &output, &outputCnt, 0, 0);
      if (!(_DWORD)v4)
        *a2 = output;
    }
    else
    {
      return 3758097090;
    }
  }
  else
  {
    fprintf((FILE *)*MEMORY[0x24BDAC8E8], "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_get_lock_state", ":", 824, "", 0, "", "");
  }
  return v4;
}

uint64_t aks_wrap_key(const void *a1, int a2, int a3, int a4, void *a5, int *a6, _DWORD *a7)
{
  uint64_t v14;
  mach_port_t aks_client_connection;
  uint64_t v16;
  size_t v18;
  uint32_t outputCnt;
  uint64_t output;
  uint64_t input[3];

  input[2] = *MEMORY[0x24BDAC8D0];
  v14 = 3758097084;
  aks_client_connection = get_aks_client_connection();
  if (aks_client_connection)
  {
    v14 = 3758097090;
    if (a1 && a5 && a6)
    {
      input[0] = a4;
      input[1] = a3;
      output = 0;
      outputCnt = 1;
      v18 = *a6;
      v16 = IOConnectCallMethod(aks_client_connection, 0xAu, input, 2u, a1, a2, &output, &outputCnt, a5, &v18);
      if ((_DWORD)v16)
      {
        return v16;
      }
      else
      {
        *a6 = v18;
        v14 = 0;
        if (a7)
          *a7 = output;
      }
    }
  }
  else
  {
    fprintf((FILE *)*MEMORY[0x24BDAC8E8], "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_wrap_key", ":", 848, "", 0, "", "");
  }
  return v14;
}

uint64_t aks_unwrap_key(const void *a1, int a2, int a3, int a4, void *a5, int *a6)
{
  uint64_t v12;
  mach_port_t aks_client_connection;
  size_t v15;
  uint64_t input[3];

  input[2] = *MEMORY[0x24BDAC8D0];
  v12 = 3758097084;
  aks_client_connection = get_aks_client_connection();
  if (aks_client_connection)
  {
    v12 = 3758097090;
    if (a1)
    {
      if (a5)
      {
        if (a6)
        {
          input[0] = a4;
          input[1] = a3;
          v15 = *a6;
          v12 = IOConnectCallMethod(aks_client_connection, 0xBu, input, 2u, a1, a2, 0, 0, a5, &v15);
          if (!(_DWORD)v12)
            *a6 = v15;
        }
      }
    }
  }
  else
  {
    fprintf((FILE *)*MEMORY[0x24BDAC8E8], "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_unwrap_key", ":", 877, "", 0, "", "");
  }
  return v12;
}

uint64_t aks_rewrap_key_for_backup(const void *a1, int a2, int a3, int a4, uint64_t a5, unsigned int a6, void *a7)
{
  uint64_t v14;
  mach_port_t aks_client_connection;
  size_t v17;
  uint64_t input[5];

  input[4] = *MEMORY[0x24BDAC8D0];
  v14 = 3758097084;
  aks_client_connection = get_aks_client_connection();
  if (aks_client_connection)
  {
    v14 = 3758097090;
    if (a1 && a7)
    {
      input[0] = a3;
      input[1] = a4;
      input[2] = a5;
      input[3] = a6;
      v17 = 108;
      return IOConnectCallMethod(aks_client_connection, 0x18u, input, 4u, a1, a2, 0, 0, a7, &v17);
    }
  }
  else
  {
    fprintf((FILE *)*MEMORY[0x24BDAC8E8], "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_rewrap_key_for_backup", ":", 901, "", 0, "", "");
  }
  return v14;
}

uint64_t aks_get_system(int a1, _DWORD *a2)
{
  uint64_t v4;
  mach_port_t aks_client_connection;
  uint32_t outputCnt;
  uint64_t output;
  uint64_t input[2];

  input[1] = *MEMORY[0x24BDAC8D0];
  v4 = 3758097084;
  aks_client_connection = get_aks_client_connection();
  if (aks_client_connection)
  {
    if (a2)
    {
      output = 0;
      input[0] = a1;
      outputCnt = 1;
      v4 = IOConnectCallMethod(aks_client_connection, 0xEu, input, a1 != 0, 0, 0, &output, &outputCnt, 0, 0);
      if (!(_DWORD)v4)
        *a2 = output;
    }
    else
    {
      return 3758097090;
    }
  }
  else
  {
    fprintf((FILE *)*MEMORY[0x24BDAC8E8], "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_get_system", ":", 922, "", 0, "", "");
  }
  return v4;
}

uint64_t aks_set_system_with_passcode(int a1, int a2, uint64_t a3, int a4)
{
  mach_port_t aks_client_connection;
  uint64_t input[5];

  input[4] = *MEMORY[0x24BDAC8D0];
  aks_client_connection = get_aks_client_connection();
  if (aks_client_connection)
  {
    input[0] = a1;
    input[1] = a2;
    input[2] = a3;
    input[3] = a4;
    return IOConnectCallMethod(aks_client_connection, 5u, input, 4u, 0, 0, 0, 0, 0, 0);
  }
  else
  {
    fprintf((FILE *)*MEMORY[0x24BDAC8E8], "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_set_system_with_passcode", ":", 950, "", 0, "", "");
    return 3758097084;
  }
}

uint64_t aks_set_system(int a1, int a2)
{
  return aks_set_system_with_passcode(a1, a2, 0, 0);
}

uint64_t aks_set_keybag_for_volume(int a1, uint64_t a2, unsigned int a3)
{
  return aks_set_keybag_for_volume_with_cookie_persona(a1, a2, a3);
}

uint64_t aks_set_keybag_for_volume_with_cookie(int a1, uint64_t a2, unsigned int a3)
{
  return aks_set_keybag_for_volume_with_cookie_persona(a1, a2, a3);
}

uint64_t aks_set_keybag_for_volume_with_cookie_persona(int a1, uint64_t a2, unsigned int a3)
{
  uint64_t v6;
  mach_port_t aks_client_connection;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  mach_port_t v13;
  void *v14;
  unsigned int inputStructCnt[3];
  uint64_t input[3];

  input[2] = *MEMORY[0x24BDAC8D0];
  v6 = 3758097084;
  memset(inputStructCnt, 0, sizeof(inputStructCnt));
  aks_client_connection = get_aks_client_connection();
  if (aks_client_connection)
  {
    v13 = aks_client_connection;
    input[0] = a1;
    input[1] = a3;
    aks_pack_data((char **)&inputStructCnt[1], inputStructCnt, 3, v8, v9, v10, v11, v12, a2);
    if (*(_QWORD *)&inputStructCnt[1])
    {
      v6 = IOConnectCallMethod(v13, 0x41u, input, 2u, *(const void **)&inputStructCnt[1], (int)inputStructCnt[0], 0, 0, 0, 0);
      v14 = *(void **)&inputStructCnt[1];
    }
    else
    {
      v14 = 0;
      v6 = 3758097085;
    }
  }
  else
  {
    fprintf((FILE *)*MEMORY[0x24BDAC8E8], "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_set_keybag_for_volume_with_cookie_persona", ":", 987, "", 0, "", "");
    v14 = 0;
  }
  free(v14);
  return v6;
}

uint64_t aks_backup_enable_volume(uint64_t a1)
{
  uint64_t v1;
  size_t *v2;
  size_t *v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  mach_port_t aks_client_connection;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  mach_port_t v18;
  uint64_t v19;
  void *v20;
  size_t __count;
  unsigned int inputStructCnt[3];
  uint64_t input[2];
  _BYTE __src[32768];
  uint64_t v26;

  v1 = MEMORY[0x24BDAC7A8](a1);
  v3 = v2;
  v5 = v4;
  v7 = v6;
  v9 = v8;
  v10 = v1;
  v26 = *MEMORY[0x24BDAC8D0];
  v11 = 3758097085;
  memset(inputStructCnt, 0, sizeof(inputStructCnt));
  bzero(__src, 0x8000uLL);
  __count = 0x8000;
  aks_client_connection = get_aks_client_connection();
  if (aks_client_connection)
  {
    v18 = aks_client_connection;
    input[0] = v9;
    input[1] = v7;
    aks_pack_data((char **)&inputStructCnt[1], inputStructCnt, 1, v13, v14, v15, v16, v17, v10);
    if (*(_QWORD *)&inputStructCnt[1])
    {
      v19 = IOConnectCallMethod(v18, 0x6Eu, input, 2u, *(const void **)&inputStructCnt[1], (int)inputStructCnt[0], 0, 0, __src, &__count);
      if ((_DWORD)v19)
      {
        v11 = v19;
      }
      else
      {
        v20 = calloc(__count, 1uLL);
        *v5 = v20;
        if (v20)
        {
          memcpy(v20, __src, __count);
          v11 = 0;
          *v3 = __count;
        }
      }
    }
  }
  else
  {
    fprintf((FILE *)*MEMORY[0x24BDAC8E8], "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_backup_enable_volume", ":", 1014, "", 0, "", "");
    v11 = 3758097084;
  }
  free(*(void **)&inputStructCnt[1]);
  return v11;
}

uint64_t aks_backup_disable_volume(uint64_t a1)
{
  uint64_t v2;
  mach_port_t aks_client_connection;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  mach_port_t v9;
  char *v10;
  int v12;
  char *v13;

  v2 = 3758097084;
  v13 = 0;
  v12 = 0;
  aks_client_connection = get_aks_client_connection();
  if (aks_client_connection)
  {
    v9 = aks_client_connection;
    aks_pack_data(&v13, (unsigned int *)&v12, 1, v4, v5, v6, v7, v8, a1);
    if (v13)
    {
      v2 = IOConnectCallMethod(v9, 0x6Fu, 0, 0, v13, v12, 0, 0, 0, 0);
      v10 = v13;
    }
    else
    {
      v10 = 0;
      v2 = 3758097085;
    }
  }
  else
  {
    fprintf((FILE *)*MEMORY[0x24BDAC8E8], "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_backup_disable_volume", ":", 1044, "", 0, "", "");
    v10 = 0;
  }
  free(v10);
  return v2;
}

uint64_t aks_backup_copy_current_bag_uuid(uint64_t a1, void *a2)
{
  uint64_t v4;
  mach_port_t aks_client_connection;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  mach_port_t v11;
  char *v12;
  size_t v14;
  int v15;
  char *v16;

  v4 = 3758097084;
  v16 = 0;
  v15 = 0;
  v14 = 16;
  aks_client_connection = get_aks_client_connection();
  if (aks_client_connection)
  {
    v11 = aks_client_connection;
    aks_pack_data(&v16, (unsigned int *)&v15, 1, v6, v7, v8, v9, v10, a1);
    if (v16)
    {
      v4 = IOConnectCallMethod(v11, 0x70u, 0, 0, v16, v15, 0, 0, a2, &v14);
      v12 = v16;
    }
    else
    {
      v12 = 0;
      v4 = 3758097085;
    }
  }
  else
  {
    fprintf((FILE *)*MEMORY[0x24BDAC8E8], "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_backup_copy_current_bag_uuid", ":", 1066, "", 0, "", "");
    v12 = 0;
  }
  free(v12);
  return v4;
}

uint64_t aks_backup_rewrap_key(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, unsigned int a6, void *a7)
{
  uint64_t v13;
  mach_port_t aks_client_connection;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  mach_port_t v20;
  void *v21;
  size_t v23;
  unsigned int inputStructCnt[3];
  uint64_t input[4];

  input[3] = *MEMORY[0x24BDAC8D0];
  v13 = 3758097084;
  memset(inputStructCnt, 0, sizeof(inputStructCnt));
  aks_client_connection = get_aks_client_connection();
  if (aks_client_connection)
  {
    v20 = aks_client_connection;
    v21 = 0;
    v13 = 3758097090;
    if (a2 && a7)
    {
      input[0] = a4;
      input[1] = a5;
      input[2] = a6;
      aks_pack_data((char **)&inputStructCnt[1], inputStructCnt, 2, v15, v16, v17, v18, v19, a1);
      v23 = 108;
      v13 = IOConnectCallMethod(v20, 0x71u, input, 3u, *(const void **)&inputStructCnt[1], (int)inputStructCnt[0], 0, 0, a7, &v23);
      v21 = *(void **)&inputStructCnt[1];
    }
  }
  else
  {
    fprintf((FILE *)*MEMORY[0x24BDAC8E8], "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_backup_rewrap_key", ":", 1087, "", 0, "", "");
    v21 = 0;
  }
  free(v21);
  return v13;
}

uint64_t aks_backup_rewrap_ek(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7, unsigned int a8, void *outputStruct)
{
  uint64_t v15;
  mach_port_t aks_client_connection;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  mach_port_t v22;
  void *v23;
  size_t v25;
  unsigned int inputStructCnt[3];
  uint64_t input[4];

  input[3] = *MEMORY[0x24BDAC8D0];
  v15 = 3758097084;
  memset(inputStructCnt, 0, sizeof(inputStructCnt));
  aks_client_connection = get_aks_client_connection();
  if (aks_client_connection)
  {
    v22 = aks_client_connection;
    v23 = 0;
    v15 = 3758097090;
    if (a2 && a4 && outputStruct)
    {
      input[0] = a6;
      input[1] = a7;
      input[2] = a8;
      aks_pack_data((char **)&inputStructCnt[1], inputStructCnt, 3, v17, v18, v19, v20, v21, a1);
      v25 = 108;
      v15 = IOConnectCallMethod(v22, 0x71u, input, 3u, *(const void **)&inputStructCnt[1], (int)inputStructCnt[0], 0, 0, outputStruct, &v25);
      v23 = *(void **)&inputStructCnt[1];
    }
  }
  else
  {
    fprintf((FILE *)*MEMORY[0x24BDAC8E8], "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_backup_rewrap_ek", ":", 1113, "", 0, "", "");
    v23 = 0;
  }
  free(v23);
  return v15;
}

uint64_t aks_backup_unwrap_bag(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _OWORD *a5)
{
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  _OWORD v13[5];
  uint64_t v14;
  __int128 __s;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v17 = 0u;
  v18 = 0u;
  __s = 0u;
  v16 = 0u;
  v14 = 0;
  memset(v13, 0, sizeof(v13));
  v8 = decode_backup_bag(a1, a2, v13);
  if ((_DWORD)v8)
  {
    v9 = v8;
  }
  else
  {
    v9 = unwrap_backup_bag((uint64_t)v13, a3, a4, (uint64_t)&__s);
    if (!(_DWORD)v9)
    {
      v10 = v16;
      *a5 = __s;
      a5[1] = v10;
      v11 = v18;
      a5[2] = v17;
      a5[3] = v11;
    }
  }
  memset_s(v13, 0x58uLL, 0, 0x58uLL);
  memset_s(&__s, 0x40uLL, 0, 0x40uLL);
  return err_sks_to_aks(v9);
}

uint64_t aks_backup_copy_bag_uuid(uint64_t a1, uint64_t a2, unsigned __int8 *a3)
{
  uint64_t v4;
  _OWORD v6[5];
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  v7 = 0;
  memset(v6, 0, sizeof(v6));
  v4 = decode_backup_bag(a1, a2, v6);
  if (!(_DWORD)v4)
    uuid_copy(a3, (const unsigned __int8 *)v6 + 8);
  memset_s(v6, 0x58uLL, 0, 0x58uLL);
  return err_sks_to_aks(v4);
}

uint64_t aks_backup_unwrap_key(__int128 *a1, _QWORD *a2, unsigned int a3, _QWORD *a4, _QWORD *a5)
{
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  unsigned int v10;
  int __s;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  v6 = a1[1];
  v12 = *a1;
  v13 = v6;
  v7 = a1[3];
  v14 = a1[2];
  v15 = v7;
  v10 = *a5;
  __s = 1;
  v8 = unwrap_data((uint64_t)&__s, 0, 0, a2, a3, a4, &v10);
  *a5 = v10;
  memset_s(&__s, 0x44uLL, 0, 0x44uLL);
  return err_sks_to_aks(v8);
}

uint64_t aks_kc_backup_unwrap_key(uint64_t a1, const void *a2, size_t a3, void *a4, size_t *a5)
{
  uint64_t v10;
  mach_port_t aks_client_connection;
  uint64_t input[3];

  input[2] = *MEMORY[0x24BDAC8D0];
  v10 = 3758097084;
  aks_client_connection = get_aks_client_connection();
  if (aks_client_connection)
  {
    v10 = 3758097090;
    if (a2 && a4)
    {
      input[0] = a1;
      input[1] = 64;
      return IOConnectCallMethod(aks_client_connection, 0x82u, input, 2u, a2, a3, 0, 0, a4, a5);
    }
  }
  else
  {
    fprintf((FILE *)*MEMORY[0x24BDAC8E8], "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_kc_backup_unwrap_key", ":", 1193, "", 0, "", "");
  }
  return v10;
}

uint64_t aks_kc_backup_wrap_key(int a1, const void *a2, size_t a3, void *a4, size_t *a5)
{
  uint64_t v10;
  mach_port_t aks_client_connection;
  uint64_t input[2];

  input[1] = *MEMORY[0x24BDAC8D0];
  v10 = 3758097084;
  aks_client_connection = get_aks_client_connection();
  if (aks_client_connection)
  {
    v10 = 3758097090;
    if (a2 && a4)
    {
      input[0] = a1;
      return IOConnectCallMethod(aks_client_connection, 0x81u, input, 1u, a2, a3, 0, 0, a4, a5);
    }
  }
  else
  {
    fprintf((FILE *)*MEMORY[0x24BDAC8E8], "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_kc_backup_wrap_key", ":", 1212, "", 0, "", "");
  }
  return v10;
}

uint64_t aks_kc_backup_get_handle(int a1, _DWORD *a2)
{
  uint64_t v4;
  mach_port_t aks_client_connection;
  uint32_t outputCnt;
  uint64_t output;
  uint64_t input[2];

  input[1] = *MEMORY[0x24BDAC8D0];
  v4 = 3758097084;
  aks_client_connection = get_aks_client_connection();
  if (aks_client_connection)
  {
    if (a2)
    {
      output = 0;
      input[0] = a1;
      outputCnt = 1;
      v4 = IOConnectCallMethod(aks_client_connection, 0x83u, input, 1u, 0, 0, &output, &outputCnt, 0, 0);
      if (!(_DWORD)v4)
        *a2 = output;
    }
    else
    {
      return 3758097090;
    }
  }
  else
  {
    fprintf((FILE *)*MEMORY[0x24BDAC8E8], "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_kc_backup_get_handle", ":", 1231, "", 0, "", "");
  }
  return v4;
}

uint64_t aks_kc_backup_get_uuid(int a1, unsigned __int8 *a2)
{
  uint64_t v4;
  mach_port_t aks_client_connection;
  uint64_t v6;
  size_t v8;
  unsigned __int8 src[8];
  uint64_t v10;
  uint64_t input[2];

  input[1] = *MEMORY[0x24BDAC8D0];
  v4 = 3758097084;
  aks_client_connection = get_aks_client_connection();
  if (aks_client_connection)
  {
    if (a2)
    {
      v10 = 0;
      input[0] = a1;
      v8 = 16;
      *(_QWORD *)src = 0;
      v6 = IOConnectCallMethod(aks_client_connection, 0x84u, input, 1u, 0, 0, 0, 0, src, &v8);
      if ((_DWORD)v6)
      {
        return v6;
      }
      else if (v8 == 16)
      {
        uuid_copy(a2, src);
        return 0;
      }
      else
      {
        return 3758604298;
      }
    }
    else
    {
      return 3758097090;
    }
  }
  else
  {
    fprintf((FILE *)*MEMORY[0x24BDAC8E8], "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_kc_backup_get_uuid", ":", 1253, "", 0, "", "");
  }
  return v4;
}

uint64_t aks_kc_backup_open_keybag(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4, int *a5, _OWORD *a6)
{
  int v7;
  int v9;
  int v11;
  FILE **v12;
  FILE *v13;
  uint64_t bag;
  int is_enabled;
  int v16;
  uint64_t v17;

  if (a5)
  {
    v7 = a4;
    v9 = a2;
    *a5 = -1;
    v11 = aks_backup_unwrap_bag((uint64_t)a1, a2, a3, a4, a6);
    v12 = (FILE **)MEMORY[0x24BDAC8E8];
    v13 = (FILE *)*MEMORY[0x24BDAC8E8];
    if (!v11)
    {
      fprintf(v13, "%s%s:%s%s%s%s%u:%s%u:%s Unwrapped DER backup bag%s\n", "aks", "", "", "", "aks_kc_backup_open_keybag", ":", 1302, "", 0, "", "");
      v17 = 0;
      goto LABEL_9;
    }
    fprintf(v13, "%s%s:%s%s%s%s%u:%s%u:%s Failed to unwrap backup bag as DER: 0x%08x%s\n", "aks", "", "", "", "aks_kc_backup_open_keybag", ":", 1290, "", 0, "", v11, "");
    bag = aks_load_bag(a1, v9, a5);
    if ((_DWORD)bag)
    {
      v17 = bag;
      fprintf(*v12, "%s%s:%s%s%s%s%u:%s%u:%s Failed to load in-kernel backup bag: 0x%08x%s\n", "aks", "", "", "", "aks_kc_backup_open_keybag", ":", 1292, "", 0, "", bag, "");
    }
    else
    {
      is_enabled = aks_prederived_is_enabled(*a5);
      v16 = *a5;
      if (is_enabled)
      {
        v17 = aks_prederived_unlock_keybag(v16, a3, v7, 0);
        if (!(_DWORD)v17)
          goto LABEL_9;
        fprintf(*v12, "%s%s:%s%s%s%s%u:%s%u:%s Failed to unlock in-kernel backup bag with prederived secret: 0x%08x%s\n", "aks", "", "", "", "aks_kc_backup_open_keybag", ":");
      }
      else
      {
        v17 = aks_unlock_bag(v16, a3, v7);
        if (!(_DWORD)v17)
          goto LABEL_9;
        fprintf(*v12, "%s%s:%s%s%s%s%u:%s%u:%s Failed to unlock in-kernel backup bag: 0x%08x%s\n", "aks", "", "", "", "aks_kc_backup_open_keybag", ":");
      }
    }
  }
  else
  {
    v17 = 3758097090;
  }
  if (*a5 != -1)
  {
    aks_unload_bag(*a5);
    *a5 = -1;
  }
LABEL_9:
  aks_prederived_free(0);
  return v17;
}

uint64_t aks_keybag_persona_create(int a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  mach_port_t aks_client_connection;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  mach_port_t v15;
  char *v16;
  int v18;
  char *v19;
  uint64_t input[4];

  input[3] = *MEMORY[0x24BDAC8D0];
  v8 = 3758097084;
  v19 = 0;
  v18 = 0;
  aks_client_connection = get_aks_client_connection();
  if (aks_client_connection)
  {
    v15 = aks_client_connection;
    input[0] = a1;
    input[1] = a2;
    input[2] = a3;
    aks_pack_data(&v19, (unsigned int *)&v18, 1, v10, v11, v12, v13, v14, a4);
    if (v19)
    {
      v8 = IOConnectCallMethod(v15, 0x60u, input, 3u, v19, v18, 0, 0, 0, 0);
      v16 = v19;
    }
    else
    {
      v16 = 0;
      v8 = 3758097085;
    }
  }
  else
  {
    fprintf((FILE *)*MEMORY[0x24BDAC8E8], "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_keybag_persona_create", ":", 1324, "", 0, "", "");
    v16 = 0;
  }
  free(v16);
  return v8;
}

uint64_t aks_keybag_persona_create_with_flags(int a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5)
{
  uint64_t v10;
  mach_port_t aks_client_connection;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  mach_port_t v17;
  void *v18;
  unsigned int inputStructCnt[3];
  uint64_t input[5];

  input[4] = *MEMORY[0x24BDAC8D0];
  v10 = 3758097084;
  memset(inputStructCnt, 0, sizeof(inputStructCnt));
  aks_client_connection = get_aks_client_connection();
  if (aks_client_connection)
  {
    v17 = aks_client_connection;
    input[0] = a1;
    input[1] = a2;
    input[2] = a3;
    input[3] = a5;
    aks_pack_data((char **)&inputStructCnt[1], inputStructCnt, 1, v12, v13, v14, v15, v16, a4);
    if (*(_QWORD *)&inputStructCnt[1])
    {
      v10 = IOConnectCallMethod(v17, 0x75u, input, 4u, *(const void **)&inputStructCnt[1], (int)inputStructCnt[0], 0, 0, 0, 0);
      v18 = *(void **)&inputStructCnt[1];
    }
    else
    {
      v18 = 0;
      v10 = 3758097085;
    }
  }
  else
  {
    fprintf((FILE *)*MEMORY[0x24BDAC8E8], "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_keybag_persona_create_with_flags", ":", 1346, "", 0, "", "");
    v18 = 0;
  }
  free(v18);
  return v10;
}

uint64_t aks_keybag_persona_list(uint64_t a1)
{
  int v1;
  size_t *v2;
  size_t *v3;
  _QWORD *v4;
  _QWORD *v5;
  int v6;
  uint64_t v7;
  mach_port_t aks_client_connection;
  uint64_t v9;
  void *v10;
  size_t v11;
  size_t __count;
  uint64_t input;
  _BYTE __src[8192];
  uint64_t v16;

  v1 = MEMORY[0x24BDAC7A8](a1);
  v3 = v2;
  v5 = v4;
  v6 = v1;
  v16 = *MEMORY[0x24BDAC8D0];
  bzero(__src, 0x2000uLL);
  __count = 0x2000;
  input = v6;
  v7 = 3758097090;
  if (v5 && v3)
  {
    aks_client_connection = get_aks_client_connection();
    if (aks_client_connection)
    {
      v9 = IOConnectCallMethod(aks_client_connection, 0x61u, &input, 1u, 0, 0, 0, 0, __src, &__count);
      if ((_DWORD)v9)
      {
        v7 = v9;
      }
      else
      {
        if (__count)
        {
          v10 = calloc(__count, 1uLL);
          *v5 = v10;
          if (!v10)
          {
            v7 = 3758097085;
            goto LABEL_10;
          }
          memcpy(v10, __src, __count);
          v11 = __count;
        }
        else
        {
          v11 = 0;
          *v5 = 0;
        }
        v7 = 0;
        *v3 = v11;
      }
    }
    else
    {
      fprintf((FILE *)*MEMORY[0x24BDAC8E8], "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_keybag_persona_list", ":", 1372, "", 0, "", "");
      v7 = 3758097084;
    }
  }
LABEL_10:
  memset_s(__src, 0x2000uLL, 0, 0x2000uLL);
  return v7;
}

uint64_t aks_keybag_persona_delete(int a1, uint64_t a2)
{
  uint64_t v4;
  mach_port_t aks_client_connection;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  mach_port_t v11;
  char *v12;
  int v14;
  char *v15;
  uint64_t input[2];

  input[1] = *MEMORY[0x24BDAC8D0];
  v4 = 3758097084;
  v15 = 0;
  v14 = 0;
  aks_client_connection = get_aks_client_connection();
  if (aks_client_connection)
  {
    v11 = aks_client_connection;
    input[0] = a1;
    aks_pack_data(&v15, (unsigned int *)&v14, 1, v6, v7, v8, v9, v10, a2);
    if (v15)
    {
      v4 = IOConnectCallMethod(v11, 0x62u, input, 1u, v15, v14, 0, 0, 0, 0);
      v12 = v15;
    }
    else
    {
      v12 = 0;
      v4 = 3758097085;
    }
  }
  else
  {
    fprintf((FILE *)*MEMORY[0x24BDAC8E8], "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_keybag_persona_delete", ":", 1394, "", 0, "", "");
    v12 = 0;
  }
  free(v12);
  return v4;
}

uint64_t aks_auth_token_create(int a1, uint64_t a2, int a3, unsigned int a4, void *a5, size_t *a6)
{
  uint64_t v12;
  mach_port_t aks_client_connection;
  uint64_t input[5];

  input[4] = *MEMORY[0x24BDAC8D0];
  v12 = 3758097084;
  aks_client_connection = get_aks_client_connection();
  if (aks_client_connection)
  {
    v12 = 3758097090;
    if (a5 && a6)
    {
      input[0] = a1;
      input[1] = a4;
      input[2] = a2;
      input[3] = a3;
      return IOConnectCallMethod(aks_client_connection, 0x26u, input, 4u, 0, 0, 0, 0, a5, a6);
    }
  }
  else
  {
    fprintf((FILE *)*MEMORY[0x24BDAC8E8], "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_auth_token_create", ":", 1415, "", 0, "", "");
  }
  return v12;
}

uint64_t aks_set_configuration(int a1, uint64_t a2, uint64_t a3, const __CFDictionary *a4)
{
  uint64_t v7;
  mach_port_t aks_client_connection;
  mach_port_t v9;
  CFTypeID TypeID;
  CFTypeID v11;
  CFTypeID v12;
  CFTypeID v13;
  CFTypeID v14;
  CFTypeID v15;
  CFTypeID v16;
  CFTypeID v17;
  CFTypeID v18;
  void *v20;
  rsize_t __n;
  void *__s;
  uint64_t input[4];

  input[3] = *MEMORY[0x24BDAC8D0];
  __n = 0;
  __s = 0;
  v7 = 3758097090;
  v20 = 0;
  aks_client_connection = get_aks_client_connection();
  if (aks_client_connection)
  {
    v9 = aks_client_connection;
    TypeID = CFNumberGetTypeID();
    if (!_copy_cf_key(a4, CFSTR("GracePeriod"), TypeID, (uint64_t)der_key_config_graceperiod, &v20))
    {
      v11 = CFNumberGetTypeID();
      if (!_copy_cf_key(a4, CFSTR("BackOffDelay"), v11, (uint64_t)der_key_config_backoff_delay, &v20))
      {
        v12 = CFNumberGetTypeID();
        if (!_copy_cf_key(a4, CFSTR("MaxUnlockAttempts"), v12, (uint64_t)der_key_config_max_unlock_attempts, &v20))
        {
          v13 = CFNumberGetTypeID();
          if (!_copy_cf_key(a4, CFSTR("EscrowPasscodePeriod"), v13, (uint64_t)der_key_config_escrow_passcode_period, &v20))
          {
            v14 = CFNumberGetTypeID();
            if (!_copy_cf_key(a4, CFSTR("EscrowTokenPeriod"), v14, (uint64_t)der_key_config_escrow_token_period, &v20))
            {
              v15 = CFDataGetTypeID();
              if (!_copy_cf_key(a4, CFSTR("UserUUID"), v15, (uint64_t)der_key_config_user_uuid, &v20))
              {
                v16 = CFDataGetTypeID();
                if (!_copy_cf_key(a4, CFSTR("BindKEKToKB"), v16, (uint64_t)der_key_config_bind_kek, &v20))
                {
                  v17 = CFBooleanGetTypeID();
                  if (!_copy_cf_key(a4, CFSTR("InactivityRebootEnabled"), v17, (uint64_t)der_key_inactivity_reboot_enabled, &v20))
                  {
                    v18 = CFBooleanGetTypeID();
                    if (!_copy_cf_key(a4, CFSTR("OnenessAutomaticMode"), v18, (uint64_t)der_key_oneness_automatic_mode, &v20)&& !encode_list_is_empty(&v20)&& (!a2 || !encode_list_add_data(&v20, (uint64_t)der_key_passcode, a2))&& !encode_list_dict(&v20, &__s, &__n))
                    {
                      input[0] = a1;
                      input[1] = (uint64_t)__s;
                      input[2] = __n;
                      v7 = IOConnectCallMethod(v9, 0x1Eu, input, 3u, 0, 0, 0, 0, 0, 0);
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  else
  {
    fprintf((FILE *)*MEMORY[0x24BDAC8E8], "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_set_configuration", ":", 1488, "", 0, "", "");
    v7 = 3758097084;
  }
  encode_list_free(&v20);
  if (__s)
  {
    memset_s(__s, __n, 0, __n);
    free(__s);
  }
  return v7;
}

uint64_t _copy_cf_key(const __CFDictionary *a1, const void *a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  uint64_t result;
  const UInt8 *BytePtr;
  uint64_t v10;
  void *value;

  value = 0;
  result = CFDictionaryGetValueIfPresent(a1, a2, (const void **)&value);
  if ((_DWORD)result)
  {
    if (CFGetTypeID(value) == a3)
    {
      if (CFNumberGetTypeID() == a3)
      {
        v10 = 0;
        if (!CFNumberGetValue((CFNumberRef)value, kCFNumberSInt64Type, &v10)
          || encode_list_add_number(a5, a4, v10))
        {
          return 0xFFFFFFFFLL;
        }
        return 0;
      }
      if (CFBooleanGetTypeID() == a3)
      {
        CFBooleanGetValue((CFBooleanRef)value);
        if (encode_list_add_BOOL(a5, a4))
          return 0xFFFFFFFFLL;
      }
      else
      {
        if (CFDataGetTypeID() != a3)
          return 0xFFFFFFFFLL;
        BytePtr = CFDataGetBytePtr((CFDataRef)value);
        CFDataGetLength((CFDataRef)value);
        if (encode_list_add_data(a5, a4, (uint64_t)BytePtr))
          return 0xFFFFFFFFLL;
      }
      return 0;
    }
    return 0xFFFFFFFFLL;
  }
  return result;
}

uint64_t aks_get_configuration(uint64_t a1)
{
  int v1;
  __CFDictionary **v2;
  __CFDictionary **v3;
  int v4;
  uint64_t v5;
  mach_port_t aks_client_connection;
  mach_port_t v7;
  uint64_t v8;
  __CFDictionary *Mutable;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  CFTypeID TypeID;
  CFTypeID v19;
  CFTypeID v20;
  CFTypeID v21;
  CFTypeID v22;
  CFTypeID v23;
  CFTypeID v24;
  CFTypeID v25;
  CFTypeID v26;
  CFTypeID v27;
  CFTypeID v28;
  CFTypeID v29;
  CFTypeID v30;
  CFTypeID v31;
  CFTypeID v32;
  char number;
  const void *v34;
  const void *v35;
  const void *v36;
  const void *v37;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  __CFDictionary **v46;
  size_t v47[2];
  _QWORD v48[74];
  uint64_t input;
  _BYTE outputStruct[32768];
  uint64_t v51;

  v1 = MEMORY[0x24BDAC7A8](a1);
  v3 = v2;
  v4 = v1;
  v51 = *MEMORY[0x24BDAC8D0];
  v5 = 3758097084;
  aks_client_connection = get_aks_client_connection();
  if (aks_client_connection)
  {
    if (v3)
    {
      v7 = aks_client_connection;
      bzero(outputStruct, 0x8000uLL);
      v47[0] = 0x8000;
      input = v4;
      v8 = IOConnectCallMethod(v7, 0x1Fu, &input, 1u, 0, 0, 0, 0, outputStruct, v47);
      if ((_DWORD)v8)
      {
        return v8;
      }
      else if (v47[0] > 0x8000)
      {
        return 3758604298;
      }
      else
      {
        Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
        bzero(v48, 0x250uLL);
        v47[1] = (size_t)der_key_config_graceperiod;
        v48[4] = der_key_config_backoff_delay;
        v48[9] = der_key_config_max_unlock_attempts;
        v48[14] = der_key_config_escrow_passcode_period;
        v48[19] = der_key_config_escrow_token_period;
        v48[24] = der_key_config_flags;
        v48[29] = der_key_config_user_uuid;
        v48[34] = der_key_config_group_uuid;
        v48[39] = der_key_config_recovery_iterations;
        v48[44] = der_key_config_recovery_flags;
        v48[49] = der_key_config_recovery_target_iterations;
        v48[54] = der_key_memento_supported;
        v48[59] = der_key_memento_blob_exists;
        v48[64] = der_key_config_memento_passcode_generation;
        v48[69] = der_key_config_passcode_generation;
        der_dict_iterate();
        v10 = v48[0];
        v11 = v48[5];
        v12 = v48[10];
        v13 = v48[15];
        v14 = v48[20];
        v15 = v48[25];
        v16 = v48[30];
        v46 = v3;
        v17 = v48[35];
        v39 = v48[40];
        v40 = v48[45];
        v41 = v48[50];
        v42 = v48[55];
        v43 = v48[60];
        v44 = v48[65];
        v45 = v48[70];
        TypeID = CFNumberGetTypeID();
        _set_cf_key(Mutable, CFSTR("GracePeriod"), TypeID, v10);
        v19 = CFNumberGetTypeID();
        _set_cf_key(Mutable, CFSTR("BackOffDelay"), v19, v11);
        v20 = CFNumberGetTypeID();
        _set_cf_key(Mutable, CFSTR("MaxUnlockAttempts"), v20, v12);
        v21 = CFNumberGetTypeID();
        _set_cf_key(Mutable, CFSTR("EscrowPasscodePeriod"), v21, v13);
        v22 = CFNumberGetTypeID();
        _set_cf_key(Mutable, CFSTR("EscrowTokenPeriod"), v22, v14);
        v23 = CFNumberGetTypeID();
        _set_cf_key(Mutable, CFSTR("ConfigFlags"), v23, v15);
        v24 = CFDataGetTypeID();
        _set_cf_key(Mutable, CFSTR("UserUUID"), v24, v16);
        v25 = CFDataGetTypeID();
        _set_cf_key(Mutable, CFSTR("GroupUUID"), v25, v17);
        v26 = CFNumberGetTypeID();
        _set_cf_key(Mutable, CFSTR("RecoveryIterations"), v26, v39);
        v27 = CFNumberGetTypeID();
        _set_cf_key(Mutable, CFSTR("RecoveryFlags"), v27, v40);
        v28 = CFNumberGetTypeID();
        _set_cf_key(Mutable, CFSTR("RecoveryTargetIterations"), v28, v41);
        v29 = CFBooleanGetTypeID();
        _set_cf_key(Mutable, CFSTR("MementoSupported"), v29, v42);
        v30 = CFBooleanGetTypeID();
        _set_cf_key(Mutable, CFSTR("MementoBlobExists"), v30, v43);
        v31 = CFNumberGetTypeID();
        _set_cf_key(Mutable, CFSTR("MementoPasscodeGeneration"), v31, v44);
        v32 = CFNumberGetTypeID();
        _set_cf_key(Mutable, CFSTR("PasscodeGeneration"), v32, v45);
        number = der_get_number();
        v34 = (const void *)*MEMORY[0x24BDBD268];
        v35 = (const void *)*MEMORY[0x24BDBD270];
        if ((number & 2) != 0)
          v36 = (const void *)*MEMORY[0x24BDBD270];
        else
          v36 = (const void *)*MEMORY[0x24BDBD268];
        CFDictionarySetValue(Mutable, CFSTR("InactivityRebootEnabled"), v36);
        if ((number & 8) != 0)
          v37 = v35;
        else
          v37 = v34;
        CFDictionarySetValue(Mutable, CFSTR("OnenessAutomaticMode"), v37);
        v5 = 0;
        *v46 = Mutable;
      }
    }
    else
    {
      return 3758097090;
    }
  }
  else
  {
    fprintf((FILE *)*MEMORY[0x24BDAC8E8], "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_get_configuration", ":", 1556, "", 0, "", "");
  }
  return v5;
}

void _set_cf_key(__CFDictionary *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  CFNumberRef v7;
  int v8;
  const void **v9;
  const UInt8 *v10;
  CFNumberRef v11;
  CFIndex valuePtr;

  if (a4)
  {
    if (CFNumberGetTypeID() == a3)
    {
      valuePtr = der_get_number();
      v7 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], kCFNumberSInt64Type, &valuePtr);
      if (!v7)
        return;
LABEL_12:
      v11 = v7;
      CFDictionaryAddValue(a1, a2, v7);
      CFRelease(v11);
      return;
    }
    if (CFBooleanGetTypeID() == a3)
    {
      v8 = der_get_BOOL();
      v9 = (const void **)MEMORY[0x24BDBD270];
      if (!v8)
        v9 = (const void **)MEMORY[0x24BDBD268];
      CFDictionaryAddValue(a1, a2, *v9);
    }
    else if (CFDataGetTypeID() == a3)
    {
      valuePtr = 0;
      v10 = (const UInt8 *)ccder_decode_tl();
      if (v10)
      {
        v7 = CFDataCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], v10, valuePtr);
        goto LABEL_12;
      }
    }
  }
}

uint64_t aks_assert_hold(int a1, unsigned int a2, uint64_t a3)
{
  mach_port_t aks_client_connection;
  uint64_t input[4];

  input[3] = *MEMORY[0x24BDAC8D0];
  input[0] = a2;
  input[1] = a3;
  input[2] = a1;
  aks_client_connection = get_aks_client_connection();
  if (aks_client_connection)
    return IOConnectCallMethod(aks_client_connection, 0x1Au, input, 3u, 0, 0, 0, 0, 0, 0);
  fprintf((FILE *)*MEMORY[0x24BDAC8E8], "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_assert_hold", ":", 1654, "", 0, "", "");
  return 3758097084;
}

uint64_t aks_assert_drop(int a1, unsigned int a2)
{
  mach_port_t aks_client_connection;
  uint64_t input[3];

  input[2] = *MEMORY[0x24BDAC8D0];
  input[0] = a2;
  input[1] = a1;
  aks_client_connection = get_aks_client_connection();
  if (aks_client_connection)
    return IOConnectCallMethod(aks_client_connection, 0x1Bu, input, 2u, 0, 0, 0, 0, 0, 0);
  fprintf((FILE *)*MEMORY[0x24BDAC8E8], "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_assert_drop", ":", 1672, "", 0, "", "");
  return 3758097084;
}

uint64_t aks_assert_promote(int a1, unsigned int a2)
{
  mach_port_t aks_client_connection;
  uint64_t input[3];

  input[2] = *MEMORY[0x24BDAC8D0];
  aks_client_connection = get_aks_client_connection();
  if (aks_client_connection)
  {
    input[0] = a2;
    input[1] = a1;
    return IOConnectCallMethod(aks_client_connection, 0x64u, input, 2u, 0, 0, 0, 0, 0, 0);
  }
  else
  {
    fprintf((FILE *)*MEMORY[0x24BDAC8E8], "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_assert_promote", ":", 1687, "", 0, "", "");
    return 3758097084;
  }
}

uint64_t aks_oneness_heartbeat(int a1)
{
  mach_port_t aks_client_connection;
  uint64_t input[2];

  input[1] = *MEMORY[0x24BDAC8D0];
  input[0] = a1;
  aks_client_connection = get_aks_client_connection();
  if (aks_client_connection)
    return IOConnectCallMethod(aks_client_connection, 0x91u, input, 1u, 0, 0, 0, 0, 0, 0);
  fprintf((FILE *)*MEMORY[0x24BDAC8E8], "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_oneness_heartbeat", ":", 1707, "", 0, "", "");
  return 3758097084;
}

uint64_t aks_assert_consume(int a1)
{
  mach_port_t aks_client_connection;
  uint64_t input[2];

  input[1] = *MEMORY[0x24BDAC8D0];
  input[0] = a1;
  aks_client_connection = get_aks_client_connection();
  if (aks_client_connection)
    return IOConnectCallMethod(aks_client_connection, 0x65u, input, 1u, 0, 0, 0, 0, 0, 0);
  fprintf((FILE *)*MEMORY[0x24BDAC8E8], "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_assert_consume", ":", 1722, "", 0, "", "");
  return 3758097084;
}

uint64_t aks_recover_with_escrow_bag(int a1, uint64_t a2)
{
  mach_port_t aks_client_connection;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  mach_port_t v10;
  uint64_t v11;
  void *v12;
  int v14;
  void *v15;
  uint64_t input[4];

  input[3] = *MEMORY[0x24BDAC8D0];
  v15 = 0;
  v14 = 0;
  aks_client_connection = get_aks_client_connection();
  if (aks_client_connection)
  {
    v10 = aks_client_connection;
    aks_pack_data((char **)&v15, (unsigned int *)&v14, 3, v5, v6, v7, v8, v9, a2);
    input[0] = a1;
    input[1] = (uint64_t)v15;
    input[2] = v14;
    v11 = IOConnectCallMethod(v10, 0x12u, input, 3u, 0, 0, 0, 0, 0, 0);
    v12 = v15;
  }
  else
  {
    fprintf((FILE *)*MEMORY[0x24BDAC8E8], "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_recover_with_escrow_bag", ":", 1739, "", 0, "", "");
    v12 = 0;
    v11 = 3758097084;
  }
  free(v12);
  return v11;
}

uint64_t aks_fdr_hmac_data(uint64_t a1)
{
  uint64_t v1;
  _DWORD *v2;
  _DWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  int v6;
  int v7;
  const void *v8;
  uint64_t v9;
  mach_port_t aks_client_connection;
  uint64_t v11;
  void *v12;
  size_t __count;
  _BYTE __src[32768];
  uint64_t v16;

  v1 = MEMORY[0x24BDAC7A8](a1);
  v3 = v2;
  v5 = v4;
  v7 = v6;
  v8 = (const void *)v1;
  v16 = *MEMORY[0x24BDAC8D0];
  v9 = 3758097090;
  bzero(__src, 0x8000uLL);
  __count = 0x8000;
  aks_client_connection = get_aks_client_connection();
  if (aks_client_connection)
  {
    if (v8 && v5 && v3)
    {
      v11 = IOConnectCallMethod(aks_client_connection, 0x29u, 0, 0, v8, v7, 0, 0, __src, &__count);
      if ((_DWORD)v11)
      {
        v9 = v11;
      }
      else
      {
        v12 = calloc(__count, 1uLL);
        *v5 = v12;
        if (v12)
        {
          memcpy(v12, __src, __count);
          v9 = 0;
          *v3 = __count;
        }
        else
        {
          v9 = 3758097085;
        }
      }
    }
  }
  else
  {
    fprintf((FILE *)*MEMORY[0x24BDAC8E8], "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_fdr_hmac_data", ":", 1758, "", 0, "", "");
    v9 = 3758097084;
  }
  memset_s(__src, 0x8000uLL, 0, 0x8000uLL);
  return v9;
}

uint64_t aks_generation(int a1, unsigned int a2, _DWORD *a3)
{
  mach_port_t aks_client_connection;
  uint64_t result;
  uint32_t outputCnt;
  uint64_t output;
  uint64_t input[3];

  input[2] = *MEMORY[0x24BDAC8D0];
  aks_client_connection = get_aks_client_connection();
  if (aks_client_connection)
  {
    input[0] = a1;
    input[1] = a2;
    output = 0;
    outputCnt = 1;
    result = IOConnectCallMethod(aks_client_connection, 0x28u, input, 2u, 0, 0, &output, &outputCnt, 0, 0);
    if (a3)
    {
      if (!(_DWORD)result)
        *a3 = output;
    }
  }
  else
  {
    fprintf((FILE *)*MEMORY[0x24BDAC8E8], "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_generation", ":", 1781, "", 0, "", "");
    return 3758097084;
  }
  return result;
}

uint64_t _aks_verify_password(int a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned int a6)
{
  uint64_t v9;
  mach_port_t aks_client_connection;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  mach_port_t v16;
  const char *v17;
  void *v18;
  int v20;
  void *v21;
  uint64_t input[5];

  input[4] = *MEMORY[0x24BDAC8D0];
  v9 = 3758097084;
  v21 = 0;
  v20 = 0;
  aks_client_connection = get_aks_client_connection();
  if (aks_client_connection)
  {
    v16 = aks_client_connection;
    if (a2)
      v17 = a2;
    else
      v17 = "";
    aks_pack_data((char **)&v21, (unsigned int *)&v20, 2, v11, v12, v13, v14, v15, (uint64_t)v17);
    if (v21)
    {
      input[0] = a1;
      input[1] = a6;
      input[2] = (uint64_t)v21;
      input[3] = v20;
      v9 = IOConnectCallMethod(v16, 0x2Au, input, 4u, 0, 0, 0, 0, 0, 0);
      v18 = v21;
    }
    else
    {
      v18 = 0;
      v9 = 3758097085;
    }
  }
  else
  {
    fprintf((FILE *)*MEMORY[0x24BDAC8E8], "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "_aks_verify_password", ":", 1807, "", 0, "", "");
    v18 = 0;
  }
  free(v18);
  return v9;
}

uint64_t aks_verify_password(int a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return _aks_verify_password(a1, a2, a3, a4, a5, 0);
}

uint64_t aks_verify_password_memento(int a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return _aks_verify_password(a1, a2, a3, a4, a5, 1u);
}

uint64_t aks_register_for_notifications()
{
  if (get_aks_client_connection())
    JUMPOUT(0x242686A8CLL);
  fprintf((FILE *)*MEMORY[0x24BDAC8E8], "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_register_for_notifications", ":", 1840, "", 0, "", "");
  return 3758097084;
}

uint64_t aks_create_signing_key(int a1, int a2, _QWORD *a3, size_t *a4)
{
  uint64_t result;
  mach_port_t aks_client_connection;
  void *v8;
  size_t __count;
  uint64_t input[2];
  _OWORD __src[16];
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  __count = 256;
  input[0] = a1;
  input[1] = a2;
  result = 3758097090;
  if (a3 && a4)
  {
    aks_client_connection = get_aks_client_connection();
    if (aks_client_connection)
    {
      memset(__src, 0, sizeof(__src));
      result = IOConnectCallMethod(aks_client_connection, 0x31u, input, 2u, 0, 0, 0, 0, __src, &__count);
      if (!(_DWORD)result)
      {
        if (__count > 0x100)
        {
          return 3758604298;
        }
        else
        {
          v8 = calloc(__count, 1uLL);
          *a3 = v8;
          if (v8)
          {
            memcpy(v8, __src, __count);
            result = 0;
            *a4 = __count;
          }
          else
          {
            return 3758097085;
          }
        }
      }
    }
    else
    {
      fprintf((FILE *)*MEMORY[0x24BDAC8E8], "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_create_signing_key", ":", 1859, "", 0, "", "");
      return 3758097084;
    }
  }
  return result;
}

uint64_t aks_create_signing_key_with_params(uint64_t a1)
{
  int v1;
  const void *v2;
  size_t v3;
  _QWORD *v4;
  size_t *v5;
  int v6;
  uint64_t result;
  size_t *v8;
  _QWORD *v9;
  size_t v10;
  const void *v11;
  mach_port_t aks_client_connection;
  mach_port_t v13;
  void *v14;
  size_t __count;
  uint64_t input[2];
  _BYTE __src[32768];
  uint64_t v18;

  v1 = MEMORY[0x24BDAC7A8](a1);
  v18 = *MEMORY[0x24BDAC8D0];
  __count = 0x8000;
  input[0] = v1;
  input[1] = v6;
  result = 3758097090;
  if (v4)
  {
    v8 = v5;
    if (v5)
    {
      v9 = v4;
      v10 = v3;
      v11 = v2;
      aks_client_connection = get_aks_client_connection();
      if (aks_client_connection)
      {
        v13 = aks_client_connection;
        bzero(__src, 0x8000uLL);
        result = IOConnectCallMethod(v13, 0x31u, input, 2u, v11, v10, 0, 0, __src, &__count);
        if (!(_DWORD)result)
        {
          if (__count > 0x8000)
          {
            return 3758604298;
          }
          else
          {
            v14 = calloc(__count, 1uLL);
            *v9 = v14;
            if (v14)
            {
              memcpy(v14, __src, __count);
              result = 0;
              *v8 = __count;
            }
            else
            {
              return 3758097085;
            }
          }
        }
      }
      else
      {
        fprintf((FILE *)*MEMORY[0x24BDAC8E8], "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_create_signing_key_with_params", ":", 1881, "", 0, "", "");
        return 3758097084;
      }
    }
  }
  return result;
}

uint64_t aks_obliterate_signing_keys(uint64_t a1)
{
  return remote_session_operate(a1);
}

uint64_t remote_session_operate(uint64_t a1)
{
  int v1;
  size_t *v2;
  size_t *v3;
  _QWORD *v4;
  _QWORD *v5;
  uint32_t v6;
  uint32_t v7;
  uint64_t v8;
  uint64_t v9;
  mach_port_t aks_client_connection;
  mach_port_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  size_t v15;
  size_t __count;
  uint64_t input[3];
  _BYTE __src[15360];
  uint64_t v20;

  v1 = MEMORY[0x24BDAC7A8](a1);
  v3 = v2;
  v5 = v4;
  v7 = v6;
  v20 = *MEMORY[0x24BDAC8D0];
  __count = 15360;
  input[0] = v1;
  input[1] = v8;
  input[2] = v9;
  aks_client_connection = get_aks_client_connection();
  if (aks_client_connection)
  {
    v11 = aks_client_connection;
    bzero(__src, 0x3C00uLL);
    v12 = IOConnectCallMethod(v11, v7, input, 3u, 0, 0, 0, 0, __src, &__count);
    if ((_DWORD)v12)
    {
      return v12;
    }
    else if (__count > 0x3C00)
    {
      return 3758604298;
    }
    else
    {
      v13 = 0;
      if (v5 && v3)
      {
        if (__count)
        {
          v14 = calloc(__count, 1uLL);
          *v5 = v14;
          if (!v14)
            return 3758097085;
          memcpy(v14, __src, __count);
          v15 = __count;
        }
        else
        {
          v15 = 0;
        }
        v13 = 0;
        *v3 = v15;
      }
    }
  }
  else
  {
    v13 = 3758097084;
    fprintf((FILE *)*MEMORY[0x24BDAC8E8], "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "remote_session_operate", ":", 2017, "", 0, "", "");
  }
  return v13;
}

uint64_t aks_sign_signing_key(int a1, int a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6, uint64_t a7, _QWORD *a8, size_t *a9)
{
  uint64_t v9;
  mach_port_t aks_client_connection;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  mach_port_t v18;
  uint64_t v19;
  void *v20;
  unsigned int inputStructCnt[3];
  size_t __count;
  uint64_t input[3];
  _OWORD __src[16];
  uint64_t v26;

  v26 = *MEMORY[0x24BDAC8D0];
  memset(__src, 0, sizeof(__src));
  __count = 256;
  memset(inputStructCnt, 0, sizeof(inputStructCnt));
  input[0] = a1;
  input[1] = a2;
  v9 = 3758097090;
  input[2] = a5;
  if (a8 && a9)
  {
    aks_client_connection = get_aks_client_connection();
    if (aks_client_connection)
    {
      v18 = aks_client_connection;
      aks_pack_data((char **)&inputStructCnt[1], inputStructCnt, 2, v13, v14, v15, v16, v17, a3);
      if (*(_QWORD *)&inputStructCnt[1])
      {
        v19 = IOConnectCallMethod(v18, 0x32u, input, 3u, *(const void **)&inputStructCnt[1], (int)inputStructCnt[0], 0, 0, __src, &__count);
        if ((_DWORD)v19)
        {
          v9 = v19;
        }
        else if (__count > 0x100)
        {
          v9 = 3758604298;
        }
        else
        {
          v20 = calloc(__count, 1uLL);
          *a8 = v20;
          v9 = 3758097085;
          if (v20)
          {
            memcpy(v20, __src, __count);
            v9 = 0;
            *a9 = __count;
          }
        }
      }
      else
      {
        v9 = 3758097085;
      }
    }
    else
    {
      fprintf((FILE *)*MEMORY[0x24BDAC8E8], "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_sign_signing_key", ":", 1911, "", 0, "", "");
      v9 = 3758097084;
    }
  }
  free(*(void **)&inputStructCnt[1]);
  return v9;
}

uint64_t aks_remote_session(int a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, _DWORD *a9)
{
  uint64_t v10;
  mach_port_t aks_client_connection;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  mach_port_t v17;
  uint64_t v18;
  uint32_t outputCnt;
  unsigned int inputStructCnt[3];
  uint64_t output;
  uint64_t input[3];

  input[2] = *MEMORY[0x24BDAC8D0];
  v10 = 3758097084;
  input[0] = a2;
  input[1] = a1;
  output = 0;
  outputCnt = 1;
  memset(inputStructCnt, 0, sizeof(inputStructCnt));
  aks_client_connection = get_aks_client_connection();
  if (aks_client_connection)
  {
    v17 = aks_client_connection;
    aks_pack_data((char **)&inputStructCnt[1], inputStructCnt, 3, v12, v13, v14, v15, v16, a3);
    if (*(_QWORD *)&inputStructCnt[1])
    {
      v18 = IOConnectCallMethod(v17, 0x2Cu, input, 2u, *(const void **)&inputStructCnt[1], (int)inputStructCnt[0], &output, &outputCnt, 0, 0);
      v10 = v18;
      if (a9 && !(_DWORD)v18)
        *a9 = output;
    }
    else
    {
      v10 = 3758097085;
    }
  }
  else
  {
    fprintf((FILE *)*MEMORY[0x24BDAC8E8], "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_remote_session", ":", 1938, "", 0, "", "");
  }
  free(*(void **)&inputStructCnt[1]);
  return v10;
}

uint64_t aks_validate_local_key(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  int v8;
  uint64_t v11;
  void *v12;
  rsize_t __smax;
  rsize_t __n;
  uint64_t v16;
  void *v17;
  void *__s;
  __int128 v19;

  v17 = 0;
  __s = 0;
  v4 = 3758097084;
  __n = 0;
  v16 = 0;
  v5 = 3758097090;
  __smax = 0;
  if (!a3 || !a4)
    goto LABEL_12;
  v8 = -536870212;
  *(_QWORD *)&v19 = a3;
  *((_QWORD *)&v19 + 1) = a3 + a4;
  if (!(a3 + a4))
    goto LABEL_19;
  v16 = 0;
  if ((ccder_blob_decode_range() & 1) == 0)
  {
    v8 = -536870198;
LABEL_19:
    syslog(3, "error parsing signing key: %d", v8);
    v5 = 3758097084;
LABEL_12:
    v12 = __s;
    v4 = v5;
    goto LABEL_13;
  }
  der_utils_decode_implicit_uint64(&v19, 0x8000000000000001, &v16);
  if (v16)
  {
    v5 = remote_session_operate(a1);
    if ((_DWORD)v5)
      syslog(3, "error: validating v1 local signing key failed: %d");
    goto LABEL_12;
  }
  v11 = aks_create_signing_key(a1, 11, &__s, &__n);
  if ((_DWORD)v11)
  {
    v5 = v11;
    syslog(3, "error: validating (create) v0 local signing key failed: %d", v11);
    goto LABEL_12;
  }
  v12 = __s;
  if (__s && __n)
  {
    v5 = aks_sign_signing_key(a1, a2, a3, a4, 11, (uint64_t)__s, __n, &v17, &__smax);
    if ((_DWORD)v5)
      syslog(3, "error: validating (sign) v0 local signing key failed: %d");
    goto LABEL_12;
  }
LABEL_13:
  if (v12)
  {
    memset_s(v12, __n, 0, __n);
    free(__s);
  }
  if (v17)
  {
    memset_s(v17, __smax, 0, __smax);
    free(v17);
  }
  return v4;
}

uint64_t aks_remote_session_step(uint64_t a1)
{
  return remote_session_operate(a1);
}

uint64_t aks_remote_peer_setup(uint64_t a1)
{
  return remote_session_operate(a1);
}

uint64_t aks_remote_peer_setup_with_acm(uint64_t a1)
{
  return remote_session_operate(a1);
}

uint64_t aks_remote_peer_confirm(uint64_t a1)
{
  return remote_session_operate(a1);
}

uint64_t aks_remote_session_token(uint64_t a1)
{
  return remote_session_operate(a1);
}

uint64_t aks_drain_backup_keys(uint64_t a1)
{
  int v1;
  _DWORD *v2;
  _DWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  int v6;
  mach_port_t aks_client_connection;
  mach_port_t v8;
  uint64_t result;
  void *v10;
  size_t __count;
  uint64_t input[2];
  _BYTE __src[32768];
  uint64_t v14;

  v1 = MEMORY[0x24BDAC7A8](a1);
  v3 = v2;
  v5 = v4;
  v6 = v1;
  v14 = *MEMORY[0x24BDAC8D0];
  aks_client_connection = get_aks_client_connection();
  if (aks_client_connection)
  {
    v8 = aks_client_connection;
    result = 3758097090;
    if (v5)
    {
      if (v3)
      {
        bzero(__src, 0x8000uLL);
        __count = 0x8000;
        input[0] = v6;
        input[1] = 0;
        result = IOConnectCallMethod(v8, 0x14u, input, 2u, 0, 0, 0, 0, __src, &__count);
        if (!(_DWORD)result)
        {
          if (__count)
          {
            v10 = calloc(__count, 1uLL);
            *v5 = v10;
            if (v10)
            {
              memcpy(v10, __src, __count);
              result = 0;
              *v3 = __count;
            }
            else
            {
              return 3758097085;
            }
          }
          else
          {
            return 3758097136;
          }
        }
      }
    }
  }
  else
  {
    fprintf((FILE *)*MEMORY[0x24BDAC8E8], "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_drain_backup_keys", ":", 2072, "", 0, "", "");
    return 3758097084;
  }
  return result;
}

uint64_t aks_drain_backup_keys_info(uint64_t a1)
{
  int v1;
  size_t *v2;
  size_t *v3;
  _QWORD *v4;
  _QWORD *v5;
  int v6;
  mach_port_t aks_client_connection;
  mach_port_t v8;
  uint64_t result;
  void *v10;
  size_t __count;
  uint64_t input[2];
  _BYTE __src[32768];
  uint64_t v14;

  v1 = MEMORY[0x24BDAC7A8](a1);
  v3 = v2;
  v5 = v4;
  v6 = v1;
  v14 = *MEMORY[0x24BDAC8D0];
  aks_client_connection = get_aks_client_connection();
  if (aks_client_connection)
  {
    v8 = aks_client_connection;
    result = 3758097090;
    if (v5)
    {
      if (v3)
      {
        bzero(__src, 0x8000uLL);
        __count = 0x8000;
        input[0] = v6;
        input[1] = 1;
        result = IOConnectCallMethod(v8, 0x14u, input, 2u, 0, 0, 0, 0, __src, &__count);
        if (!(_DWORD)result)
        {
          if (__count)
          {
            if (__ROR8__(0xEF7BDEF7BDEF7BDFLL * __count, 2) > 0x210842108421084uLL)
            {
              return 3758604298;
            }
            else
            {
              v10 = calloc(__count, 1uLL);
              *v5 = v10;
              if (v10)
              {
                memcpy(v10, __src, __count);
                result = 0;
                *v3 = __count / 0x7C;
              }
              else
              {
                return 3758097085;
              }
            }
          }
          else
          {
            return 3758097136;
          }
        }
      }
    }
  }
  else
  {
    fprintf((FILE *)*MEMORY[0x24BDAC8E8], "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_drain_backup_keys_info", ":", 2100, "", 0, "", "");
    return 3758097084;
  }
  return result;
}

uint64_t aks_clear_backup_bag(int a1)
{
  mach_port_t aks_client_connection;
  uint64_t input[2];

  input[1] = *MEMORY[0x24BDAC8D0];
  aks_client_connection = get_aks_client_connection();
  if (aks_client_connection)
  {
    input[0] = a1;
    return IOConnectCallMethod(aks_client_connection, 0x16u, input, 1u, 0, 0, 0, 0, 0, 0);
  }
  else
  {
    fprintf((FILE *)*MEMORY[0x24BDAC8E8], "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_clear_backup_bag", ":", 2129, "", 0, "", "");
    return 3758097084;
  }
}

uint64_t aks_set_backup_bag(uint64_t a1)
{
  int v1;
  _DWORD *v2;
  _DWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  int v12;
  mach_port_t aks_client_connection;
  mach_port_t v14;
  _BYTE *outputStruct;
  size_t *p_count;
  uint64_t v17;
  uint64_t result;
  void *v19;
  size_t __count;
  uint64_t input[5];
  _BYTE __src[32768];
  uint64_t v23;

  v1 = MEMORY[0x24BDAC7A8](a1);
  v3 = v2;
  v5 = v4;
  v7 = v6;
  v9 = v8;
  v11 = v10;
  v12 = v1;
  v23 = *MEMORY[0x24BDAC8D0];
  aks_client_connection = get_aks_client_connection();
  if (!aks_client_connection)
  {
    fprintf((FILE *)*MEMORY[0x24BDAC8E8], "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_set_backup_bag", ":", 2146, "", 0, "", "");
    return 3758097084;
  }
  v14 = aks_client_connection;
  if (v5)
  {
    if (!v3)
      return 3758097090;
    outputStruct = __src;
    p_count = &__count;
    v17 = 1;
  }
  else
  {
    p_count = 0;
    outputStruct = 0;
    v17 = 0;
  }
  bzero(__src, 0x8000uLL);
  __count = 0x8000;
  input[0] = v12;
  input[1] = v11;
  input[2] = v17;
  input[3] = v9;
  input[4] = v7;
  result = IOConnectCallMethod(v14, 0x15u, input, 5u, 0, 0, 0, 0, outputStruct, p_count);
  if (v5 && !(_DWORD)result)
  {
    v19 = calloc(__count, 1uLL);
    *v5 = v19;
    if (v19)
    {
      memcpy(v19, __src, __count);
      result = 0;
      *v3 = __count;
    }
    else
    {
      return 3758097085;
    }
  }
  return result;
}

uint64_t aks_make_public_backup_bag(int a1, _DWORD *a2)
{
  uint64_t v4;
  mach_port_t aks_client_connection;
  uint32_t outputCnt;
  uint64_t output;
  uint64_t input[2];

  input[1] = *MEMORY[0x24BDAC8D0];
  v4 = 3758097084;
  aks_client_connection = get_aks_client_connection();
  if (aks_client_connection)
  {
    if (a2)
    {
      output = 0;
      input[0] = a1;
      outputCnt = 1;
      v4 = IOConnectCallMethod(aks_client_connection, 0x52u, input, 1u, 0, 0, &output, &outputCnt, 0, 0);
      if (!(_DWORD)v4)
        *a2 = output;
    }
    else
    {
      return 3758097090;
    }
  }
  else
  {
    fprintf((FILE *)*MEMORY[0x24BDAC8E8], "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_make_public_backup_bag", ":", 2178, "", 0, "", "");
  }
  return v4;
}

uint64_t aks_remote_session_reset(uint64_t a1)
{
  return remote_session_operate(a1);
}

uint64_t aks_remote_session_reset_all()
{
  return remote_session_operate(0);
}

uint64_t aks_get_device_state()
{
  return _get_device_state();
}

uint64_t _get_device_state()
{
  int v0;
  uint64_t v1;
  uint64_t v2;
  uint32_t v3;
  uint32_t v4;
  uint64_t v5;
  mach_port_t aks_client_connection;
  mach_port_t v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  int v12[2];
  __int128 __s;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  int v18;
  _BYTE outputStruct[4096];
  uint64_t input[2];

  v0 = MEMORY[0x24BDAC7A8]();
  v2 = v1;
  v4 = v3;
  input[1] = *MEMORY[0x24BDAC8D0];
  input[0] = v0;
  *(_QWORD *)v12 = 4096;
  v5 = 3758097084;
  v18 = 0;
  v16 = 0u;
  v17 = 0u;
  v14 = 0u;
  v15 = 0u;
  __s = 0u;
  aks_client_connection = get_aks_client_connection();
  if (aks_client_connection)
  {
    if (v2)
    {
      v7 = aks_client_connection;
      bzero(outputStruct, 0x1000uLL);
      v8 = IOConnectCallMethod(v7, v4, input, 1u, 0, 0, 0, 0, outputStruct, (size_t *)v12);
      if ((_DWORD)v8)
      {
        return v8;
      }
      else
      {
        v5 = 0;
        if (!decode_extended_state((uint64_t)outputStruct, v12[0], (char *)&__s))
        {
          v9 = v16;
          *(_OWORD *)(v2 + 32) = v15;
          *(_OWORD *)(v2 + 48) = v9;
          *(_WORD *)(v2 + 64) = v17;
          v10 = v14;
          *(_OWORD *)v2 = __s;
          *(_OWORD *)(v2 + 16) = v10;
        }
      }
    }
    else
    {
      return 3758097090;
    }
  }
  else
  {
    fprintf((FILE *)*MEMORY[0x24BDAC8E8], "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "_get_device_state", ":", 2224, "", 0, "", "");
  }
  return v5;
}

uint64_t aks_get_extended_device_state()
{
  return _get_device_state();
}

uint64_t aks_remote_peer_get_state(uint64_t a1)
{
  int v1;
  _DWORD *v2;
  _DWORD *v3;
  size_t v4;
  size_t v5;
  const void *v6;
  const void *v7;
  uint64_t v8;
  mach_port_t aks_client_connection;
  mach_port_t v10;
  uint64_t v11;
  size_t v13[2];
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  void *v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  uint64_t input;
  _BYTE outputStruct[4096];
  uint64_t v27;

  v1 = MEMORY[0x24BDAC7A8](a1);
  v3 = v2;
  v5 = v4;
  v7 = v6;
  v27 = *MEMORY[0x24BDAC8D0];
  v8 = 3758097084;
  v13[0] = 4096;
  input = v1;
  aks_client_connection = get_aks_client_connection();
  if (aks_client_connection)
  {
    if (v3)
    {
      v10 = aks_client_connection;
      bzero(outputStruct, 0x1000uLL);
      memset_s(v3, 0x10uLL, 0, 0x10uLL);
      v11 = IOConnectCallMethod(v10, 0x39u, &input, 1u, v7, v5, 0, 0, outputStruct, v13);
      if ((_DWORD)v11)
      {
        return v11;
      }
      else
      {
        v18 = 0;
        v22 = 0u;
        v14 = 0u;
        v15 = 0u;
        v17 = 0u;
        v20 = 0u;
        v21 = 0u;
        v23 = 0u;
        v24 = 0;
        v13[1] = (size_t)der_key_peer_unlock_token_status;
        v16 = (unint64_t)der_key_peer_unwrapped_escrow_record_status;
        v19 = der_key_peer_wrapped_escrow_record_status;
        *(_QWORD *)&v22 = der_key_peer_flags;
        der_dict_iterate();
        *v3 = der_get_number();
        v3[1] = der_get_number();
        v3[2] = der_get_number();
        v8 = 0;
        v3[3] = der_get_number();
      }
    }
    else
    {
      return 3758097090;
    }
  }
  else
  {
    fprintf((FILE *)*MEMORY[0x24BDAC8E8], "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_remote_peer_get_state", ":", 2255, "", 0, "", "");
  }
  return v8;
}

uint64_t aks_remote_peer_drop(int a1, const void *a2, size_t a3)
{
  mach_port_t aks_client_connection;
  uint64_t input[2];

  input[1] = *MEMORY[0x24BDAC8D0];
  input[0] = a1;
  aks_client_connection = get_aks_client_connection();
  if (aks_client_connection)
    return IOConnectCallMethod(aks_client_connection, 0x3Au, input, 1u, a2, a3, 0, 0, 0, 0);
  fprintf((FILE *)*MEMORY[0x24BDAC8E8], "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_remote_peer_drop", ":", 2292, "", 0, "", "");
  return 3758097084;
}

uint64_t aks_lock_device(int a1, int a2)
{
  mach_port_t aks_client_connection;
  uint32_t v4;
  uint64_t input[2];

  input[1] = *MEMORY[0x24BDAC8D0];
  input[0] = a1;
  aks_client_connection = get_aks_client_connection();
  if (aks_client_connection)
  {
    if (a2)
      v4 = 32;
    else
      v4 = 8;
    return IOConnectCallMethod(aks_client_connection, v4, input, 1u, 0, 0, 0, 0, 0, 0);
  }
  else
  {
    fprintf((FILE *)*MEMORY[0x24BDAC8E8], "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_lock_device", ":", 2307, "", 0, "", "");
    return 3758097084;
  }
}

uint64_t aks_lock_cx(int a1)
{
  mach_port_t aks_client_connection;
  uint64_t input[2];

  input[1] = *MEMORY[0x24BDAC8D0];
  input[0] = a1;
  aks_client_connection = get_aks_client_connection();
  if (aks_client_connection)
    return IOConnectCallMethod(aks_client_connection, 0x8Du, input, 1u, 0, 0, 0, 0, 0, 0);
  fprintf((FILE *)*MEMORY[0x24BDAC8E8], "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_lock_cx", ":", 2327, "", 0, "", "");
  return 3758097084;
}

uint64_t aks_unlock_device(int a1, uint64_t a2, int a3)
{
  mach_port_t aks_client_connection;
  uint64_t input[4];

  input[3] = *MEMORY[0x24BDAC8D0];
  input[0] = a1;
  input[1] = a2;
  input[2] = a3;
  aks_client_connection = get_aks_client_connection();
  if (aks_client_connection)
    return IOConnectCallMethod(aks_client_connection, 9u, input, 3u, 0, 0, 0, 0, 0, 0);
  fprintf((FILE *)*MEMORY[0x24BDAC8E8], "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_unlock_device", ":", 2342, "", 0, "", "");
  return 3758097084;
}

uint64_t aks_obliterate_class_d()
{
  mach_port_t aks_client_connection;

  aks_client_connection = get_aks_client_connection();
  if (aks_client_connection)
    return IOConnectCallMethod(aks_client_connection, 0x13u, 0, 0, 0, 0, 0, 0, 0, 0);
  fprintf((FILE *)*MEMORY[0x24BDAC8E8], "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_obliterate_class_d", ":", 2355, "", 0, "", "");
  return 3758097084;
}

uint64_t aks_migrate_s_key(int a1, unsigned int a2, uint64_t a3, unsigned int a4, const void *a5, int a6)
{
  mach_port_t aks_client_connection;
  uint64_t input[5];

  input[4] = *MEMORY[0x24BDAC8D0];
  aks_client_connection = get_aks_client_connection();
  if (aks_client_connection)
  {
    input[0] = a1;
    input[1] = a2;
    input[2] = a3;
    input[3] = a4;
    return IOConnectCallMethod(aks_client_connection, 0x3Fu, input, 4u, a5, a6, 0, 0, 0, 0);
  }
  else
  {
    fprintf((FILE *)*MEMORY[0x24BDAC8E8], "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_migrate_s_key", ":", 2367, "", 0, "", "");
    return 3758097084;
  }
}

uint64_t aks_smartcard_register(int a1, uint64_t a2, uint64_t a3, unsigned int a4, const void *a5, size_t a6, _QWORD *a7, size_t *a8)
{
  mach_port_t aks_client_connection;
  mach_port_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  size_t v17;
  size_t __count;
  _BYTE __src[2048];
  uint64_t input[5];

  input[4] = *MEMORY[0x24BDAC8D0];
  input[0] = a1;
  input[1] = a4;
  input[2] = a2;
  input[3] = a3;
  __count = 2048;
  aks_client_connection = get_aks_client_connection();
  if (aks_client_connection)
  {
    v13 = aks_client_connection;
    bzero(__src, 0x800uLL);
    v14 = IOConnectCallMethod(v13, 0x3Bu, input, 4u, a5, a6, 0, 0, __src, &__count);
    if ((_DWORD)v14)
    {
      return v14;
    }
    else if (__count > 0x800)
    {
      return 3758604298;
    }
    else
    {
      v15 = 0;
      if (a7 && a8)
      {
        if (__count)
        {
          v16 = calloc(__count, 1uLL);
          *a7 = v16;
          if (!v16)
            return 3758097085;
          memcpy(v16, __src, __count);
          v17 = __count;
        }
        else
        {
          v17 = 0;
        }
        v15 = 0;
        *a8 = v17;
      }
    }
  }
  else
  {
    v15 = 3758097084;
    fprintf((FILE *)*MEMORY[0x24BDAC8E8], "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_smartcard_register", ":", 2388, "", 0, "", "");
  }
  return v15;
}

uint64_t aks_smartcard_unregister(int a1)
{
  mach_port_t aks_client_connection;
  uint64_t input[2];

  input[1] = *MEMORY[0x24BDAC8D0];
  input[0] = a1;
  aks_client_connection = get_aks_client_connection();
  if (aks_client_connection)
    return IOConnectCallMethod(aks_client_connection, 0x3Cu, input, 1u, 0, 0, 0, 0, 0, 0);
  fprintf((FILE *)*MEMORY[0x24BDAC8E8], "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_smartcard_unregister", ":", 2412, "", 0, "", "");
  return 3758097084;
}

uint64_t aks_smartcard_request_unlock(int a1, const void *a2, size_t a3, _QWORD *a4, size_t *a5)
{
  mach_port_t aks_client_connection;
  mach_port_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  size_t v14;
  size_t __count;
  _BYTE __src[2048];
  uint64_t input[2];

  input[1] = *MEMORY[0x24BDAC8D0];
  input[0] = a1;
  __count = 2048;
  aks_client_connection = get_aks_client_connection();
  if (aks_client_connection)
  {
    v10 = aks_client_connection;
    bzero(__src, 0x800uLL);
    v11 = IOConnectCallMethod(v10, 0x3Du, input, 1u, a2, a3, 0, 0, __src, &__count);
    if ((_DWORD)v11)
    {
      return v11;
    }
    else if (__count > 0x800)
    {
      return 3758604298;
    }
    else
    {
      v12 = 0;
      if (a4 && a5)
      {
        if (__count)
        {
          v13 = calloc(__count, 1uLL);
          *a4 = v13;
          if (!v13)
            return 3758097085;
          memcpy(v13, __src, __count);
          v14 = __count;
        }
        else
        {
          v14 = 0;
        }
        v12 = 0;
        *a5 = v14;
      }
    }
  }
  else
  {
    v12 = 3758097084;
    fprintf((FILE *)*MEMORY[0x24BDAC8E8], "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_smartcard_request_unlock", ":", 2429, "", 0, "", "");
  }
  return v12;
}

uint64_t aks_smartcard_unlock(int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, _QWORD *a6, size_t *a7)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  mach_port_t aks_client_connection;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  size_t v19;
  size_t __count;
  unsigned int inputStructCnt[3];
  _BYTE __src[2048];
  uint64_t input[2];

  input[1] = *MEMORY[0x24BDAC8D0];
  input[0] = a1;
  memset(inputStructCnt, 0, sizeof(inputStructCnt));
  bzero(__src, 0x800uLL);
  __count = 2048;
  aks_pack_data((char **)&inputStructCnt[1], inputStructCnt, 2, v10, v11, v12, v13, v14, a2);
  if (!*(_QWORD *)&inputStructCnt[1])
  {
    v17 = 3758097085;
    goto LABEL_12;
  }
  aks_client_connection = get_aks_client_connection();
  if (!aks_client_connection)
  {
    fprintf((FILE *)*MEMORY[0x24BDAC8E8], "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_smartcard_unlock", ":", 2460, "", 0, "", "");
    v17 = 3758097084;
    goto LABEL_12;
  }
  v16 = IOConnectCallMethod(aks_client_connection, 0x3Eu, input, 1u, *(const void **)&inputStructCnt[1], (int)inputStructCnt[0], 0, 0, __src, &__count);
  if ((_DWORD)v16)
  {
    v17 = v16;
    goto LABEL_12;
  }
  if (__count > 0x800)
  {
    v17 = 3758604298;
    goto LABEL_12;
  }
  v17 = 0;
  if (a6 && a7)
  {
    if (!__count)
    {
      v19 = 0;
      goto LABEL_11;
    }
    v18 = calloc(__count, 1uLL);
    *a6 = v18;
    v17 = 3758097085;
    if (v18)
    {
      memcpy(v18, __src, __count);
      v19 = __count;
LABEL_11:
      v17 = 0;
      *a7 = v19;
    }
  }
LABEL_12:
  free(*(void **)&inputStructCnt[1]);
  return v17;
}

uint64_t aks_smartcard_get_sc_usk(unint64_t a1, uint64_t a2, uint64_t *a3, _QWORD *a4)
{
  uint64_t result;

  result = 0xFFFFFFFFLL;
  if (a3 && a4)
  {
    if (aks_smartcard_get_foo((uint64_t)der_key_sc_enc_sc_usk, 0, a1, a2, a3, a4))
      return 0xFFFFFFFFLL;
    else
      return 0;
  }
  return result;
}

uint64_t aks_smartcard_get_foo(uint64_t a1, int a2, unint64_t a3, uint64_t a4, uint64_t *a5, _QWORD *a6)
{
  uint64_t result;
  uint64_t number;
  uint64_t v11;
  uint64_t v12;

  result = 0xFFFFFFFFLL;
  if (a6 && a3 && a4 && a5 && a3 + a4 > a3)
  {
    der_dict_iterate();
    if (a2)
    {
      if (*a6 == 8)
      {
        number = der_get_number();
        result = 0;
        *a5 = number;
        return result;
      }
      return 0xFFFFFFFFLL;
    }
    v11 = ccder_decode_tl();
    if (!v11)
      return 0xFFFFFFFFLL;
    v12 = v11;
    result = 0;
    *a5 = v12;
    *a6 = 0;
  }
  return result;
}

uint64_t aks_smartcard_get_ec_pub(unint64_t a1, uint64_t a2, uint64_t *a3, _QWORD *a4)
{
  uint64_t result;

  result = 0xFFFFFFFFLL;
  if (a3 && a4)
  {
    if (aks_smartcard_get_foo((uint64_t)der_key_sc_auth_eph_pub, 0, a1, a2, a3, a4))
      return 0xFFFFFFFFLL;
    else
      return 0;
  }
  return result;
}

uint64_t aks_smartcard_get_mode(unint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;

  v5 = 8;
  if (!a3)
    return 0xFFFFFFFFLL;
  v6 = 0;
  result = aks_smartcard_get_foo((uint64_t)der_key_sc_auth_mode, 1, a1, a2, &v6, &v5);
  if ((_DWORD)result)
    return 0xFFFFFFFFLL;
  *a3 = v6;
  return result;
}

uint64_t aks_smartcard_get_version(unint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;

  v5 = 8;
  if (!a3)
    return 0xFFFFFFFFLL;
  v6 = 0;
  result = aks_smartcard_get_foo((uint64_t)der_key_sc_auth_version, 1, a1, a2, &v6, &v5);
  if ((_DWORD)result)
    return 0xFFFFFFFFLL;
  *a3 = v6;
  return result;
}

uint64_t aks_se_fail(int a1)
{
  mach_port_t aks_client_connection;
  uint64_t input[2];

  input[1] = *MEMORY[0x24BDAC8D0];
  input[0] = a1;
  aks_client_connection = get_aks_client_connection();
  if (aks_client_connection)
    return IOConnectCallMethod(aks_client_connection, 0x47u, input, 1u, 0, 0, 0, 0, 0, 0);
  fprintf((FILE *)*MEMORY[0x24BDAC8E8], "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_se_fail", ":", 2589, "", 0, "", "");
  return 3758097084;
}

uint64_t aks_se_set_healthy(int a1)
{
  mach_port_t aks_client_connection;
  uint64_t input[2];

  input[1] = *MEMORY[0x24BDAC8D0];
  input[0] = a1;
  aks_client_connection = get_aks_client_connection();
  if (aks_client_connection)
    return IOConnectCallMethod(aks_client_connection, 0x49u, input, 1u, 0, 0, 0, 0, 0, 0);
  fprintf((FILE *)*MEMORY[0x24BDAC8E8], "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_se_set_healthy", ":", 2605, "", 0, "", "");
  return 3758097084;
}

uint64_t aks_se_set_secret(int a1, uint64_t a2, uint64_t a3)
{
  return __aks_se_set_secret(a1, a2, a3, 0x45u);
}

uint64_t __aks_se_set_secret(int a1, uint64_t a2, uint64_t a3, uint32_t a4)
{
  mach_port_t aks_client_connection;
  uint64_t input[4];

  input[3] = *MEMORY[0x24BDAC8D0];
  input[0] = a1;
  input[1] = a2;
  input[2] = a3;
  aks_client_connection = get_aks_client_connection();
  if (aks_client_connection)
    return IOConnectCallMethod(aks_client_connection, a4, input, 3u, 0, 0, 0, 0, 0, 0);
  fprintf((FILE *)*MEMORY[0x24BDAC8E8], "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "__aks_se_set_secret", ":", 2621, "", 0, "", "");
  return 3758097084;
}

uint64_t aks_se_set_secret_memento(int a1, uint64_t a2, uint64_t a3)
{
  return __aks_se_set_secret(a1, a2, a3, 0x8Cu);
}

uint64_t aks_se_recover(int a1, uint64_t a2, uint64_t a3)
{
  mach_port_t aks_client_connection;
  uint64_t input[4];

  input[3] = *MEMORY[0x24BDAC8D0];
  input[0] = a1;
  input[1] = a2;
  input[2] = a3;
  aks_client_connection = get_aks_client_connection();
  if (aks_client_connection)
    return IOConnectCallMethod(aks_client_connection, 0x46u, input, 3u, 0, 0, 0, 0, 0, 0);
  fprintf((FILE *)*MEMORY[0x24BDAC8E8], "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_se_recover", ":", 2649, "", 0, "", "");
  return 3758097084;
}

uint64_t aks_change_secret_epilogue(int a1, uint64_t a2, uint64_t a3)
{
  mach_port_t aks_client_connection;
  uint64_t input[4];

  input[3] = *MEMORY[0x24BDAC8D0];
  input[0] = a1;
  input[1] = a2;
  input[2] = a3;
  aks_client_connection = get_aks_client_connection();
  if (aks_client_connection)
    return IOConnectCallMethod(aks_client_connection, 0x69u, input, 3u, 0, 0, 0, 0, 0, 0);
  fprintf((FILE *)*MEMORY[0x24BDAC8E8], "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_change_secret_epilogue", ":", 2665, "", 0, "", "");
  return 3758097084;
}

uint64_t aks_se_get_reset_token_for_memento_secret(uint64_t a1)
{
  int v1;
  _BYTE *v2;
  _BYTE *v3;
  uint64_t v4;
  uint64_t v5;
  mach_port_t aks_client_connection;
  uint64_t v7;
  unint64_t number;
  uint64_t v9;
  rsize_t __n[2];
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  _BYTE __s[4096];
  uint64_t input[4];

  v1 = MEMORY[0x24BDAC7A8](a1);
  v3 = v2;
  input[3] = *MEMORY[0x24BDAC8D0];
  input[0] = v1;
  input[1] = v4;
  input[2] = v5;
  bzero(__s, 0x1000uLL);
  __n[0] = 4096;
  aks_client_connection = get_aks_client_connection();
  if (!aks_client_connection)
  {
    v9 = 3758097084;
    fprintf((FILE *)*MEMORY[0x24BDAC8E8], "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_se_get_reset_token_for_memento_secret", ":", 2683, "", 0, "", "");
    goto LABEL_10;
  }
  v7 = IOConnectCallMethod(aks_client_connection, 0x48u, input, 3u, 0, 0, 0, 0, __s, __n);
  if ((_DWORD)v7)
  {
    v9 = v7;
    goto LABEL_10;
  }
  if (__n[0] - 4097 < 0xFFFFFFFFFFFFF000)
  {
    v9 = 3758604298;
    goto LABEL_10;
  }
  v16 = 0;
  v15 = 0u;
  v13 = 0u;
  v12 = 0u;
  __n[1] = (rsize_t)der_key_config_se_reset_token;
  v14 = (unint64_t)der_key_config_se_slot;
  der_dict_iterate();
  if ((_QWORD)v12)
  {
    ccder_decode_tl();
LABEL_9:
    v9 = 0;
    goto LABEL_10;
  }
  if (!*((_QWORD *)&v14 + 1))
    goto LABEL_9;
  number = der_get_number();
  if (number > 0xFF)
    goto LABEL_9;
  v9 = 0;
  *v3 = number;
LABEL_10:
  memset_s(__s, __n[0], 0, __n[0]);
  return v9;
}

uint64_t aks_se_get_reset_token(uint64_t a1)
{
  return aks_se_get_reset_token_for_memento_secret(a1);
}

uint64_t aks_se_set_nonce(int a1, const void *a2, size_t a3)
{
  mach_port_t aks_client_connection;
  size_t v6;
  uint64_t input[2];

  input[1] = *MEMORY[0x24BDAC8D0];
  input[0] = a1;
  aks_client_connection = get_aks_client_connection();
  if (aks_client_connection)
  {
    if (a2)
      v6 = a3;
    else
      v6 = 0;
    return IOConnectCallMethod(aks_client_connection, 0x58u, input, 1u, a2, v6, 0, 0, 0, 0);
  }
  else
  {
    fprintf((FILE *)*MEMORY[0x24BDAC8E8], "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_se_set_nonce", ":", 2737, "", 0, "", "");
    return 3758097084;
  }
}

uint64_t aks_se_get_reset_sig(uint64_t a1)
{
  int v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  mach_port_t aks_client_connection;
  uint64_t v12;
  _BYTE *v13;
  int v14;
  void *v15;
  size_t v16;
  size_t __n;
  int __s;
  char v20;
  _BYTE v21[3];
  uint64_t input[2];

  v1 = MEMORY[0x24BDAC7A8](a1);
  v3 = v2;
  v5 = v4;
  v7 = v6;
  v9 = v8;
  input[1] = *MEMORY[0x24BDAC8D0];
  input[0] = v1;
  bzero(&__s, 0x1000uLL);
  __n = 4096;
  v10 = 3758097090;
  if (v9)
  {
    if (v7)
    {
      v10 = 3758097090;
      if (v5)
      {
        if (v3)
        {
          aks_client_connection = get_aks_client_connection();
          if (aks_client_connection)
          {
            v12 = IOConnectCallMethod(aks_client_connection, 0x5Au, input, 1u, 0, 0, 0, 0, &__s, &__n);
            if ((_DWORD)v12)
            {
              v10 = v12;
            }
            else if (__n - 4097 < 0xFFFFFFFFFFFFF005)
            {
              v10 = 3758604298;
            }
            else
            {
              v13 = calloc(5uLL, 1uLL);
              *v5 = v13;
              if (v13)
              {
                *v3 = 5;
                v14 = __s;
                v13[4] = v20;
                *(_DWORD *)v13 = v14;
                v15 = calloc(__n - 5, 1uLL);
                *v9 = v15;
                v10 = 3758097085;
                if (v15)
                {
                  v16 = __n;
                  *v7 = __n - 5;
                  memcpy(v15, v21, v16);
                  v10 = 0;
                }
              }
              else
              {
                v10 = 3758097085;
              }
            }
          }
          else
          {
            fprintf((FILE *)*MEMORY[0x24BDAC8E8], "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_se_get_reset_sig", ":", 2759, "", 0, "", "");
            v10 = 3758097084;
          }
        }
      }
    }
  }
  memset_s(&__s, __n, 0, __n);
  return v10;
}

uint64_t aks_se_get_reset_pubkey(uint64_t a1)
{
  int v1;
  size_t *v2;
  size_t *v3;
  _QWORD *v4;
  _QWORD *v5;
  size_t v6;
  uint64_t v7;
  mach_port_t aks_client_connection;
  uint64_t v9;
  void *v10;
  size_t __count;
  _BYTE __src[4096];
  uint64_t input[2];

  v1 = MEMORY[0x24BDAC7A8](a1);
  v3 = v2;
  v5 = v4;
  input[1] = *MEMORY[0x24BDAC8D0];
  input[0] = v1;
  v6 = 4096;
  bzero(__src, 0x1000uLL);
  __count = 4096;
  v7 = 3758097090;
  if (v5 && v3)
  {
    aks_client_connection = get_aks_client_connection();
    if (aks_client_connection)
    {
      v9 = IOConnectCallMethod(aks_client_connection, 0x59u, input, 1u, 0, 0, 0, 0, __src, &__count);
      v6 = __count;
      if ((_DWORD)v9)
      {
        v7 = v9;
      }
      else if (__count - 4097 < 0xFFFFFFFFFFFFF000)
      {
        v7 = 3758604298;
      }
      else
      {
        v10 = calloc(__count, 1uLL);
        *v5 = v10;
        v6 = __count;
        if (v10)
        {
          *v3 = __count;
          memcpy(v10, __src, v6);
          v7 = 0;
          v6 = __count;
        }
        else
        {
          v7 = 3758097085;
        }
      }
    }
    else
    {
      fprintf((FILE *)*MEMORY[0x24BDAC8E8], "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_se_get_reset_pubkey", ":", 2791, "", 0, "", "");
      v6 = 4096;
      v7 = 3758097084;
    }
  }
  memset_s(__src, v6, 0, v6);
  return v7;
}

uint64_t aks_se_delete_reset_token(int a1)
{
  mach_port_t aks_client_connection;
  uint64_t input[2];

  input[1] = *MEMORY[0x24BDAC8D0];
  input[0] = a1;
  aks_client_connection = get_aks_client_connection();
  if (aks_client_connection)
    return IOConnectCallMethod(aks_client_connection, 0x5Bu, input, 1u, 0, 0, 0, 0, 0, 0);
  fprintf((FILE *)*MEMORY[0x24BDAC8E8], "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_se_delete_reset_token", ":", 2815, "", 0, "", "");
  return 3758097084;
}

uint64_t aks_se_support_in_rm(unsigned int a1)
{
  mach_port_t aks_client_connection;
  uint64_t input[2];

  input[1] = *MEMORY[0x24BDAC8D0];
  input[0] = a1;
  aks_client_connection = get_aks_client_connection();
  if (aks_client_connection)
    return IOConnectCallMethod(aks_client_connection, 0x5Eu, input, 1u, 0, 0, 0, 0, 0, 0);
  fprintf((FILE *)*MEMORY[0x24BDAC8E8], "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_se_support_in_rm", ":", 2832, "", 0, "", "");
  return 3758097084;
}

uint64_t aks_se_support_in_rm_is_set(BOOL *a1)
{
  mach_port_t aks_client_connection;
  uint64_t result;
  uint32_t outputCnt;
  uint64_t output[2];

  output[1] = *MEMORY[0x24BDAC8D0];
  output[0] = 0;
  outputCnt = 1;
  aks_client_connection = get_aks_client_connection();
  if (aks_client_connection)
  {
    result = IOConnectCallMethod(aks_client_connection, 0x6Bu, 0, 0, 0, 0, output, &outputCnt, 0, 0);
    if (a1)
    {
      if (!(_DWORD)result)
        *a1 = output[0] != 0;
    }
  }
  else
  {
    fprintf((FILE *)*MEMORY[0x24BDAC8E8], "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_se_support_in_rm_is_set", ":", 2848, "", 0, "", "");
    return 3758097084;
  }
  return result;
}

uint64_t aks_se_stage_stash()
{
  mach_port_t aks_client_connection;

  aks_client_connection = get_aks_client_connection();
  if (aks_client_connection)
    return IOConnectCallMethod(aks_client_connection, 0x5Fu, 0, 0, 0, 0, 0, 0, 0, 0);
  fprintf((FILE *)*MEMORY[0x24BDAC8E8], "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_se_stage_stash", ":", 2865, "", 0, "", "");
  return 3758097084;
}

uint64_t aks_fv_lock_volume_bag()
{
  return aks_fv_set_protection(0);
}

uint64_t aks_fv_unwrap_vek(uint64_t a1)
{
  return aks_fv_unwrap_vek_with_acm(a1);
}

uint64_t aks_fv_get_blob_state(uint64_t a1)
{
  uint64_t v1;
  _DWORD *v2;
  _DWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  mach_port_t aks_client_connection;
  mach_port_t v9;
  uint64_t v10;
  __int128 v12;
  int v13[2];
  _BYTE __s[4096];
  uint64_t v15;

  v1 = MEMORY[0x24BDAC7A8](a1);
  v3 = v2;
  v5 = v4;
  v6 = v1;
  v15 = *MEMORY[0x24BDAC8D0];
  bzero(__s, 0x1000uLL);
  *(_QWORD *)&v12 = __s;
  *((_QWORD *)&v12 + 1) = &v15;
  *(_QWORD *)v13 = 4096;
  v7 = 3758097090;
  if (v5 && v3)
  {
    aks_client_connection = get_aks_client_connection();
    if (aks_client_connection)
    {
      v9 = aks_client_connection;
      if (der_utils_encode_fv_data(&v12, v5) && der_utils_encode_fv_params(&v12, v6))
      {
        v7 = 3758097098;
        if (ccder_blob_encode_tl())
        {
          v10 = IOConnectCallMethod(v9, 0x55u, 0, 0, *((const void **)&v12 + 1), (size_t)&v15 - *((_QWORD *)&v12 + 1), 0, 0, __s, (size_t *)v13);
          if (!(_DWORD)v10)
            v10 = decode_fv_blob_state((uint64_t)__s, *(uint64_t *)v13, v3);
          v7 = v10;
        }
      }
      else
      {
        v7 = 3758097098;
      }
    }
    else
    {
      fprintf((FILE *)*MEMORY[0x24BDAC8E8], "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_fv_get_blob_state", ":", 2900, "", 0, "", "");
      v7 = 3758097084;
    }
  }
  memset_s(__s, 0x1000uLL, 0, 0x1000uLL);
  return v7;
}

uint64_t aks_fv_get_last_known_gp_state(__int128 *a1)
{
  uint64_t v1;
  __int128 v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char v7;

  v7 = 0;
  v5 = &v7;
  v6 = 1;
  v3 = 0uLL;
  v4 = 0;
  if (a1)
  {
    v3 = *a1;
    v4 = *((_QWORD *)a1 + 2);
    v1 = *((_QWORD *)&v3 + 1) | 0x10;
  }
  else
  {
    v1 = 16;
  }
  *((_QWORD *)&v3 + 1) = v1;
  return aks_fv_get_blob_state((uint64_t)&v3);
}

uint64_t aks_fv_get_size(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  mach_port_t aks_client_connection;
  mach_port_t v8;
  __int128 v10;
  uint32_t outputCnt;
  _BYTE __s[4096];
  uint64_t output;
  uint64_t input[2];

  v1 = MEMORY[0x24BDAC7A8](a1);
  v3 = v2;
  v4 = v1;
  input[1] = *MEMORY[0x24BDAC8D0];
  v5 = 3758097098;
  output = 0;
  input[0] = v6;
  outputCnt = 1;
  bzero(__s, 0x1000uLL);
  *(_QWORD *)&v10 = __s;
  *((_QWORD *)&v10 + 1) = &output;
  if (v3)
  {
    aks_client_connection = get_aks_client_connection();
    if (aks_client_connection)
    {
      v8 = aks_client_connection;
      if (der_utils_encode_fv_params(&v10, v4))
      {
        if (ccder_blob_encode_tl())
        {
          v5 = IOConnectCallMethod(v8, 0x4Eu, input, 1u, *((const void **)&v10 + 1), (size_t)&input[-1] - *((_QWORD *)&v10 + 1), &output, &outputCnt, 0, 0);
          if (!(_DWORD)v5)
            *v3 = output;
        }
      }
    }
    else
    {
      fprintf((FILE *)*MEMORY[0x24BDAC8E8], "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_fv_get_size", ":", 2943, "", 0, "", "");
      v5 = 3758097084;
    }
  }
  else
  {
    v5 = 3758097090;
  }
  memset_s(__s, 0x1000uLL, 0, 0x1000uLL);
  return v5;
}

uint64_t aks_fv_import(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  mach_port_t aks_client_connection;
  mach_port_t v12;
  uint64_t v13;
  __int128 v15;
  __int128 v16;
  size_t v17;
  _BYTE __s[4096];
  uint64_t input[2];

  v1 = MEMORY[0x24BDAC7A8](a1);
  v3 = v2;
  v5 = v4;
  v7 = v6;
  v8 = v1;
  input[1] = *MEMORY[0x24BDAC8D0];
  input[0] = v9;
  bzero(__s, 0x1000uLL);
  *(_QWORD *)&v16 = __s;
  *((_QWORD *)&v16 + 1) = input;
  v17 = 4096;
  v10 = 3758097090;
  if (v7 && v5)
  {
    aks_client_connection = get_aks_client_connection();
    if (!aks_client_connection)
    {
      fprintf((FILE *)*MEMORY[0x24BDAC8E8], "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_fv_import", ":", 2971, "", 0, "", "");
      v10 = 3758097084;
      goto LABEL_14;
    }
    v12 = aks_client_connection;
    if (!ccder_blob_encode_body_tl()
      || !der_utils_encode_fv_data(&v16, v7)
      || !der_utils_encode_fv_params(&v16, v8)
      || !ccder_blob_encode_tl())
    {
      goto LABEL_12;
    }
    v13 = IOConnectCallMethod(v12, 0x4Fu, input, 1u, *((const void **)&v16 + 1), (size_t)input - *((_QWORD *)&v16 + 1), 0, 0, __s, &v17);
    if ((_DWORD)v13)
    {
      v10 = v13;
      goto LABEL_14;
    }
    *(_QWORD *)&v15 = __s;
    *((_QWORD *)&v15 + 1) = &__s[v17];
    if (!ccder_blob_decode_range())
      goto LABEL_12;
    if (!v3)
    {
      v10 = 0;
      goto LABEL_14;
    }
    v10 = 0;
    if ((der_utils_decode_fv_data(&v15, 0, v3) & 1) == 0)
LABEL_12:
      v10 = 3758097098;
  }
LABEL_14:
  memset_s(__s, 0x1000uLL, 0, 0x1000uLL);
  return v10;
}

uint64_t aks_fv_get_verifier_size()
{
  return aks_fv_get_size(0);
}

uint64_t aks_fv_get_access_token_size()
{
  return aks_fv_get_size(0);
}

uint64_t aks_fv_new_verifier()
{
  return aks_fv_new_kek(0);
}

uint64_t aks_fv_rewrap_verifier()
{
  return aks_fv_rewrap_kek(0);
}

uint64_t aks_fv_new_access_token()
{
  _QWORD v1[3];

  v1[0] = 0;
  v1[1] = 2;
  v1[2] = 0;
  return aks_fv_new_vek((uint64_t)v1);
}

uint64_t aks_fv_new_unbound_access_token(char a1)
{
  uint64_t v1;
  _QWORD v3[3];

  v1 = 130;
  if ((a1 & 6) == 0)
    v1 = 2;
  v3[0] = 0;
  v3[1] = v1;
  v3[2] = 0;
  return aks_fv_new_vek((uint64_t)v3);
}

uint64_t aks_fv_bind_access_token()
{
  return aks_fv_set_protection(0);
}

uint64_t aks_fv_is_access_token_unbound(uint64_t a1, BOOL *a2)
{
  uint64_t result;
  _QWORD v4[3];
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  memset(v4, 0, sizeof(v4));
  v10 = 0;
  v8 = 0u;
  v9 = 0u;
  v6 = 0u;
  v7 = 0u;
  v5 = 0u;
  if (!a2)
    return 3758097090;
  result = aks_fv_get_blob_state((uint64_t)v4);
  if (!(_DWORD)result)
  {
    if ((_DWORD)v5 == 1)
    {
      result = 0;
      *a2 = (DWORD1(v7) & 0x8000000) != 0;
    }
    else
    {
      return 3758604312;
    }
  }
  return result;
}

uint64_t aks_fv_load_access_token_as_system_keychain()
{
  return aks_fv_set_protection(0);
}

uint64_t aks_fv_verify_user_opts()
{
  return aks_fv_unwrap_vek_with_acm(0);
}

uint64_t aks_fv_grant_ownership(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v13;
  __int128 v14;
  _BYTE v15[4096];
  _BYTE v16[4096];
  uint64_t v17;

  v1 = MEMORY[0x24BDAC7A8](a1);
  v3 = v2;
  v5 = v4;
  v7 = v6;
  v9 = v8;
  v10 = v1;
  v17 = *MEMORY[0x24BDAC8D0];
  v11 = 3758097098;
  bzero(v16, 0x1000uLL);
  bzero(v15, 0x1000uLL);
  *(_QWORD *)&v14 = v16;
  *((_QWORD *)&v14 + 1) = &v17;
  *(_QWORD *)&v13 = v15;
  *((_QWORD *)&v13 + 1) = v16;
  if (der_utils_encode_fv_data(&v14, v9)
    && der_utils_encode_fv_data(&v14, v7)
    && ccder_blob_encode_tl()
    && der_utils_encode_fv_data(&v13, v5)
    && der_utils_encode_fv_data(&v13, v3)
    && ccder_blob_encode_tl())
  {
    return aks_fv_set_protection(v10);
  }
  return v11;
}

uint64_t aks_fv_owners_exist(uint64_t a1)
{
  return aks_fv_set_protection(a1);
}

uint64_t aks_fv_remove_external_kek_group(uint64_t a1)
{
  _QWORD v2[4];

  v2[3] = a1;
  memset(v2, 0, 24);
  return aks_fv_set_protection((uint64_t)v2);
}

uint64_t aks_fv_sidp_status(uint64_t a1)
{
  uint64_t v1;
  _BYTE *v2;
  _BYTE *v3;
  _BYTE *v4;
  _BYTE *v5;
  uint64_t v6;
  uint64_t result;
  _BYTE v8[16384];
  uint64_t v9;

  v1 = MEMORY[0x24BDAC7A8](a1);
  v3 = v2;
  v5 = v4;
  v6 = v1;
  v9 = *MEMORY[0x24BDAC8D0];
  bzero(v8, 0x4000uLL);
  result = aks_fv_set_protection(v6);
  if (!(_DWORD)result)
  {
    if (ccder_decode_sequence_tl() && ccder_decode_tl())
    {
      __memcpy_chk();
      if (v5)
        *v5 = 0;
      if (v3)
        *v3 = 0;
      return 0;
    }
    else
    {
      return 3758097084;
    }
  }
  return result;
}

uint64_t aks_fv_stash_kek()
{
  return aks_fv_set_protection(0);
}

uint64_t aks_fv_stash_kek_with_secret(int a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = 8;
  if (a1)
    v1 = 12;
  v4 = 0;
  v5 = v1;
  v6 = 0;
  v2 = aks_fv_set_protection((uint64_t)&v4);
  syslog(6, "aks_fv_prot_cmd_stash_kek(%llu) = %d", v5, v2);
  return v2;
}

uint64_t aks_fv_commit_stashed_kek()
{
  uint64_t v0;

  v0 = aks_fv_set_protection(0);
  syslog(6, "aks_fv_prot_cmd_stash_commit = %d", v0);
  return v0;
}

uint64_t aks_fv_destroy_stashed_kek()
{
  uint64_t v0;

  v0 = aks_fv_set_protection(0);
  syslog(6, "aks_fv_prot_cmd_stash_destroy = %d", v0);
  return v0;
}

uint64_t aks_fv_verify_user()
{
  return aks_fv_unwrap_vek_with_acm(0);
}

uint64_t aks_fv_delete_verifier()
{
  return aks_fv_set_protection(0);
}

uint64_t aks_absinthe_collection(uint64_t a1)
{
  unsigned int v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  const char *v6;
  const char *v7;
  uint64_t v8;
  mach_port_t aks_client_connection;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  mach_port_t v15;
  const char *v16;
  uint64_t v17;
  void *v18;
  unsigned int inputStructCnt[3];
  size_t __count;
  _BYTE __src[32768];
  uint64_t input[2];

  v1 = MEMORY[0x24BDAC7A8](a1);
  v3 = v2;
  v5 = v4;
  v7 = v6;
  input[1] = *MEMORY[0x24BDAC8D0];
  v8 = 3758097084;
  input[0] = v1;
  bzero(__src, 0x8000uLL);
  __count = 0x8000;
  memset(inputStructCnt, 0, sizeof(inputStructCnt));
  if (v5)
  {
    aks_client_connection = get_aks_client_connection();
    if (aks_client_connection)
    {
      v15 = aks_client_connection;
      if (v7)
        v16 = v7;
      else
        v16 = "";
      aks_pack_data((char **)&inputStructCnt[1], inputStructCnt, 2, v10, v11, v12, v13, v14, (uint64_t)v16);
      v17 = IOConnectCallMethod(v15, 0x50u, input, 1u, *(const void **)&inputStructCnt[1], (int)inputStructCnt[0], 0, 0, __src, &__count);
      if ((_DWORD)v17)
      {
        v8 = v17;
      }
      else
      {
        v18 = calloc(__count, 1uLL);
        *v5 = v18;
        if (v18)
        {
          memcpy(v18, __src, __count);
          v8 = 0;
          *v3 = (int)__count;
        }
        else
        {
          v8 = 3758097085;
        }
      }
    }
    else
    {
      fprintf((FILE *)*MEMORY[0x24BDAC8E8], "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_absinthe_collection", ":", 3220, "", 0, "", "");
    }
  }
  else
  {
    v8 = 3758097090;
  }
  memset_s(__src, 0x8000uLL, 0, 0x8000uLL);
  free(*(void **)&inputStructCnt[1]);
  return v8;
}

uint64_t aks_absinthe_generate(unsigned int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, size_t *a7)
{
  uint64_t v7;
  mach_port_t aks_client_connection;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  mach_port_t v17;
  size_t v19;
  int v20;
  char *v21;
  uint64_t input[2];

  input[1] = *MEMORY[0x24BDAC8D0];
  v21 = 0;
  input[0] = a1;
  v20 = 0;
  v7 = 3758097090;
  if (a2 && a6 && a7)
  {
    aks_client_connection = get_aks_client_connection();
    if (aks_client_connection)
    {
      v17 = aks_client_connection;
      aks_pack_data(&v21, (unsigned int *)&v20, 2, v12, v13, v14, v15, v16, a2);
      v19 = *a7;
      v7 = IOConnectCallMethod(v17, 0x51u, input, 1u, v21, v20, 0, 0, a6, &v19);
      if (!(_DWORD)v7)
        *a7 = (int)v19;
    }
    else
    {
      fprintf((FILE *)*MEMORY[0x24BDAC8E8], "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_absinthe_generate", ":", 3253, "", 0, "", "");
      v7 = 3758097084;
    }
  }
  free(v21);
  return v7;
}

uint64_t aks_drop_auxiliary_auth_by_uid(unsigned int a1)
{
  mach_port_t aks_client_connection;
  uint64_t input[3];

  input[2] = *MEMORY[0x24BDAC8D0];
  input[0] = 0;
  input[1] = a1;
  aks_client_connection = get_aks_client_connection();
  if (aks_client_connection)
    return IOConnectCallMethod(aks_client_connection, 0x53u, input, 2u, 0, 0, 0, 0, 0, 0);
  fprintf((FILE *)*MEMORY[0x24BDAC8E8], "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_drop_auxiliary_auth_by_uid", ":", 3280, "", 0, "", "");
  return 3758097084;
}

uint64_t aks_drop_auxiliary_auth_by_handle(int a1)
{
  mach_port_t aks_client_connection;
  uint64_t input[3];

  input[2] = *MEMORY[0x24BDAC8D0];
  input[0] = 1;
  input[1] = a1;
  aks_client_connection = get_aks_client_connection();
  if (aks_client_connection)
    return IOConnectCallMethod(aks_client_connection, 0x53u, input, 2u, 0, 0, 0, 0, 0, 0);
  fprintf((FILE *)*MEMORY[0x24BDAC8E8], "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_drop_auxiliary_auth_by_handle", ":", 3296, "", 0, "", "");
  return 3758097084;
}

uint64_t aks_lower_iteration_count()
{
  mach_port_t aks_client_connection;

  aks_client_connection = get_aks_client_connection();
  if (aks_client_connection)
    return IOConnectCallMethod(aks_client_connection, 0x5Cu, 0, 0, 0, 0, 0, 0, 0, 0);
  fprintf((FILE *)*MEMORY[0x24BDAC8E8], "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_lower_iteration_count", ":", 3310, "", 0, "", "");
  return 3758097084;
}

uint64_t aks_se_secret_drop(int a1)
{
  mach_port_t aks_client_connection;
  uint64_t input[2];

  input[1] = *MEMORY[0x24BDAC8D0];
  input[0] = a1;
  aks_client_connection = get_aks_client_connection();
  if (aks_client_connection)
    return IOConnectCallMethod(aks_client_connection, 0x6Au, input, 1u, 0, 0, 0, 0, 0, 0);
  fprintf((FILE *)*MEMORY[0x24BDAC8E8], "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_se_secret_drop", ":", 3326, "", 0, "", "");
  return 3758097084;
}

uint64_t aks_get_current_sep_measurement(uint64_t a1, uint64_t a2)
{
  if (a1 && a2 && !aks_get_internal_info_for_key(0xFFFFFFFFLL))
    der_dict_get_data((uint64_t)der_key_sep_measurement);
  free(0);
  return 3758097084;
}

uint64_t aks_get_internal_info(uint64_t a1)
{
  return aks_get_internal_info_for_key(a1);
}

uint64_t aks_get_seconds_since_passcode_change(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  time_t v4;
  time_t v5;
  uint64_t v7;
  uint64_t v8;
  void *v9;

  v3 = 3758097084;
  v8 = 0;
  v9 = 0;
  v7 = 0;
  if (!aks_get_internal_info_for_key(a1)
    && der_dict_get_number((uint64_t)der_key_passcode_change_time, (uint64_t)v9, (uint64_t)v9 + v8, (uint64_t)&v7))
  {
    if (a2)
    {
      v4 = time(0);
      v3 = 0;
      v5 = v4 - v7;
      if (v4 <= v7)
        v5 = 0;
      *a2 = v5;
    }
    else
    {
      v3 = 0;
    }
  }
  free(v9);
  return v3;
}

uint64_t aks_get_internal_state(uint64_t a1)
{
  int v1;
  char *v2;
  char *v3;
  uint64_t v4;
  mach_port_t aks_client_connection;
  uint64_t v6;
  rsize_t v7;
  rsize_t __n;
  _BYTE __s[4096];
  uint64_t input[2];

  v1 = MEMORY[0x24BDAC7A8](a1);
  v3 = v2;
  input[1] = *MEMORY[0x24BDAC8D0];
  v4 = 3758097090;
  input[0] = v1;
  bzero(__s, 0x1000uLL);
  __n = 4096;
  aks_client_connection = get_aks_client_connection();
  if (!aks_client_connection)
  {
    fprintf((FILE *)*MEMORY[0x24BDAC8E8], "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_get_internal_state", ":", 3405, "", 0, "", "");
    v4 = 3758097084;
    goto LABEL_11;
  }
  if (!v3)
  {
LABEL_11:
    v7 = 4096;
    goto LABEL_9;
  }
  v6 = IOConnectCallMethod(aks_client_connection, 0x8Eu, input, 1u, 0, 0, 0, 0, __s, &__n);
  v7 = __n;
  if ((_DWORD)v6)
  {
    v4 = v6;
  }
  else if (__n - 4097 >= 0xFFFFFFFFFFFFF000)
  {
    if (decode_extended_state((uint64_t)__s, __n, v3))
      v4 = 3758097090;
    else
      v4 = 0;
    v7 = __n;
  }
LABEL_9:
  memset_s(__s, v7, 0, v7);
  return v4;
}

uint64_t aks_fairplay_wrap(const void *a1, size_t a2, void *a3, size_t *a4)
{
  uint64_t result;
  mach_port_t aks_client_connection;
  size_t v10;
  uint64_t input[2];

  input[1] = *MEMORY[0x24BDAC8D0];
  input[0] = 266;
  result = 3758097090;
  if (a3 && a4)
  {
    aks_client_connection = get_aks_client_connection();
    if (aks_client_connection)
    {
      v10 = *a4;
      result = IOConnectCallMethod(aks_client_connection, 0x68u, input, 1u, a1, a2, 0, 0, a3, &v10);
      if (!(_DWORD)result)
        *a4 = (int)v10;
    }
    else
    {
      fprintf((FILE *)*MEMORY[0x24BDAC8E8], "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_fairplay_wrap", ":", 3431, "", 0, "", "");
      return 3758097084;
    }
  }
  return result;
}

uint64_t _fairplay_generate_csk_internal(unsigned int a1, const void *a2, size_t a3, void *a4, size_t *a5)
{
  uint64_t result;
  mach_port_t aks_client_connection;
  size_t v11;
  uint64_t input[2];

  input[1] = *MEMORY[0x24BDAC8D0];
  input[0] = ((unint64_t)a1 << 8) | 1;
  result = 3758097090;
  if (a4 && a5)
  {
    aks_client_connection = get_aks_client_connection();
    if (aks_client_connection)
    {
      v11 = *a5;
      result = IOConnectCallMethod(aks_client_connection, 0x68u, input, 1u, a2, a3, 0, 0, a4, &v11);
      if (!(_DWORD)result)
        *a5 = (int)v11;
    }
    else
    {
      fprintf((FILE *)*MEMORY[0x24BDAC8E8], "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "_fairplay_generate_csk_internal", ":", 3455, "", 0, "", "");
      return 3758097084;
    }
  }
  return result;
}

uint64_t aks_fairplay_generate_csk(const void *a1, size_t a2, void *a3, size_t *a4)
{
  return _fairplay_generate_csk_internal(0, a1, a2, a3, a4);
}

uint64_t aks_fairplay_generate_csk_v1(const void *a1, size_t a2, void *a3, size_t *a4)
{
  return _fairplay_generate_csk_internal(1u, a1, a2, a3, a4);
}

uint64_t aks_bak_get_beacon_internal(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  size_t v6;
  size_t v7;
  const void *v8;
  const void *v9;
  uint64_t v10;
  mach_port_t aks_client_connection;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  size_t v16;
  uint64_t input[2];
  _BYTE __s[16384];
  __int128 v19;
  _BYTE v20[28];
  uint64_t v21;

  v1 = MEMORY[0x24BDAC7A8](a1);
  v3 = v2;
  v5 = v4;
  v7 = v6;
  v9 = v8;
  v10 = v1;
  v21 = *MEMORY[0x24BDAC8D0];
  v19 = 0u;
  memset(v20, 0, sizeof(v20));
  bzero(__s, 0x4000uLL);
  v16 = 0x4000;
  input[0] = 1;
  input[1] = v10;
  aks_client_connection = get_aks_client_connection();
  if (aks_client_connection)
  {
    v12 = IOConnectCallMethod(aks_client_connection, 0x87u, input, 2u, v9, v7, 0, 0, __s, &v16);
    if ((_DWORD)v12)
    {
      v14 = v12;
    }
    else
    {
      __memcpy_chk();
      *v3 = 44;
      v13 = calloc(0x2CuLL, 1uLL);
      *v5 = v13;
      if (v13)
      {
        __memcpy_chk();
        v14 = 0;
      }
      else
      {
        v14 = 3758097085;
      }
    }
  }
  else
  {
    v14 = 3758097084;
    fprintf((FILE *)*MEMORY[0x24BDAC8E8], "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_bak_get_beacon_internal", ":", 3491, "", 0, "", "");
  }
  memset_s(__s, 0x4000uLL, 0, 0x4000uLL);
  return v14;
}

uint64_t aks_bak_get_beacon(int a1, unsigned int a2)
{
  uint64_t beacon_internal;

  beacon_internal = aks_bak_get_beacon_internal(a1 ^ 1u | ((unint64_t)a2 << 16));
  if ((_DWORD)beacon_internal)
    return beacon_internal;
  else
    return 3758604312;
}

uint64_t aks_bak_get_swizzler_internal(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  mach_port_t aks_client_connection;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  __int128 v14;
  __int128 v15;
  _OWORD *v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  size_t v25;
  _BYTE __s[16384];
  _QWORD v27[6];
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  int v37;
  uint64_t input[3];

  v1 = MEMORY[0x24BDAC7A8](a1);
  v3 = v2;
  v5 = v4;
  v7 = v6;
  v9 = v8;
  input[2] = *MEMORY[0x24BDAC8D0];
  input[0] = 2;
  input[1] = v1;
  v37 = 0;
  v35 = 0u;
  v36 = 0u;
  v33 = 0u;
  v34 = 0u;
  v31 = 0u;
  v32 = 0u;
  v29 = 0u;
  v30 = 0u;
  v28 = 0u;
  memset(v27, 0, sizeof(v27));
  bzero(__s, 0x4000uLL);
  v25 = 0x4000;
  aks_client_connection = get_aks_client_connection();
  if (aks_client_connection)
  {
    v11 = IOConnectCallMethod(aks_client_connection, 0x87u, input, 2u, 0, 0, 0, 0, __s, &v25);
    if ((_DWORD)v11)
    {
      v12 = v11;
    }
    else
    {
      v12 = 3758097085;
      __memcpy_chk();
      v13 = calloc(0x28uLL, 1uLL);
      *v9 = v13;
      if (v13)
      {
        *v7 = 40;
        v14 = *(_OWORD *)&v27[1];
        v15 = *(_OWORD *)&v27[3];
        v13[4] = v27[5];
        *(_OWORD *)v13 = v14;
        *((_OWORD *)v13 + 1) = v15;
        v16 = calloc(0x91uLL, 1uLL);
        *v5 = v16;
        if (v16)
        {
          v12 = 0;
          *v3 = 145;
          v17 = v29;
          *v16 = v28;
          v16[1] = v17;
          v18 = v30;
          v19 = v31;
          v20 = v33;
          v16[4] = v32;
          v16[5] = v20;
          v16[2] = v18;
          v16[3] = v19;
          v21 = v34;
          v22 = v35;
          v23 = v36;
          *((_BYTE *)v16 + 144) = v37;
          v16[7] = v22;
          v16[8] = v23;
          v16[6] = v21;
        }
      }
    }
  }
  else
  {
    fprintf((FILE *)*MEMORY[0x24BDAC8E8], "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_bak_get_swizzler_internal", ":", 3551, "", 0, "", "");
    v12 = 3758097084;
  }
  memset_s(__s, 0x4000uLL, 0, 0x4000uLL);
  memset_s(v27, 0xC4uLL, 0, 0xC4uLL);
  return v12;
}

uint64_t aks_bak_get_swizzler()
{
  return aks_bak_get_swizzler_internal(0);
}

uint64_t aks_test_stashed_kek(uint64_t a1)
{
  mach_port_t akstest_client_connection;

  akstest_client_connection = get_akstest_client_connection();
  if (akstest_client_connection)
    return IOConnectCallMethod(akstest_client_connection, 0xCu, 0, 0, *(const void **)a1, *(_QWORD *)(a1 + 8), 0, 0, 0, 0);
  else
    return 3758097084;
}

uint64_t aks_get_dsme_key(uint64_t a1)
{
  uint64_t v1;
  size_t *v2;
  size_t *v3;
  _QWORD *v4;
  mach_port_t aks_client_connection;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  size_t v9;
  size_t __count;
  _BYTE __src[16384];
  uint64_t v13;

  v1 = MEMORY[0x24BDAC7A8](a1);
  v3 = v2;
  v4 = (_QWORD *)v1;
  v13 = *MEMORY[0x24BDAC8D0];
  bzero(__src, 0x4000uLL);
  __count = 0x4000;
  aks_client_connection = get_aks_client_connection();
  if (aks_client_connection)
  {
    v6 = 3758097090;
    if (v4 && v3)
    {
      v7 = IOConnectCallMethod(aks_client_connection, 0x96u, 0, 0, 0, 0, 0, 0, __src, &__count);
      if ((_DWORD)v7)
      {
        v6 = v7;
      }
      else
      {
        v8 = calloc(__count, 1uLL);
        *v4 = v8;
        if (v8)
        {
          v9 = __count;
          *v3 = __count;
          memcpy(v8, __src, v9);
          v6 = 0;
        }
        else
        {
          v6 = 3758097085;
        }
      }
    }
  }
  else
  {
    fprintf((FILE *)*MEMORY[0x24BDAC8E8], "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_get_dsme_key", ":", 3600, "", 0, "", "");
    v6 = 3758097084;
  }
  memset_s(__src, 0x4000uLL, 0, 0x4000uLL);
  return v6;
}

BOOL aks_bag_in_xart(uint64_t a1, uint64_t a2)
{
  return a2 == 4 || a2 == 32;
}

uint64_t aks_prewarm_sps()
{
  mach_port_t aks_client_connection;

  aks_client_connection = get_aks_client_connection();
  if (aks_client_connection)
    return IOConnectCallMethod(aks_client_connection, 0x73u, 0, 0, 0, 0, 0, 0, 0, 0);
  fprintf((FILE *)*MEMORY[0x24BDAC8E8], "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_prewarm_sps", ":", 3627, "", 0, "", "");
  return 3758097084;
}

uint64_t aks_sealed_hashes_set(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v4;
  mach_port_t aks_client_connection;
  mach_port_t v6;
  uint64_t v7;
  size_t v8;
  uint64_t v9;
  char *v10;
  _QWORD v12[2];

  v12[1] = *MEMORY[0x24BDAC8D0];
  v4 = 4294967285;
  if (a3 && a4 <= 0x30)
  {
    v4 = 3758097084;
    aks_client_connection = get_aks_client_connection();
    if (aks_client_connection)
    {
      v6 = aks_client_connection;
      ccder_sizeof_raw_octet_string();
      ccder_sizeof_uint64();
      ccder_sizeof_raw_octet_string();
      v7 = ccder_sizeof();
      v8 = v7;
      MEMORY[0x24BDAC7A8](v7);
      v10 = (char *)v12 - v9;
      bzero((char *)v12 - v9, v8);
      ccder_encode_raw_octet_string();
      ccder_encode_uint64();
      ccder_encode_raw_octet_string();
      if ((char *)ccder_encode_constructed_tl() == v10)
        return IOConnectCallMethod(v6, 0x72u, 0, 0, v10, v8, 0, 0, 0, 0);
      else
        return 3758097090;
    }
    else
    {
      fprintf((FILE *)*MEMORY[0x24BDAC8E8], "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_sealed_hashes_set", ":", 3644, "", 0, "", "");
    }
  }
  return v4;
}

uint64_t aks_measure_and_seal_cryptex_manifest(const void *a1, size_t a2)
{
  mach_port_t aks_client_connection;

  aks_client_connection = get_aks_client_connection();
  if (aks_client_connection)
    return IOConnectCallMethod(aks_client_connection, 0x90u, 0, 0, a1, a2, 0, 0, 0, 0);
  fprintf((FILE *)*MEMORY[0x24BDAC8E8], "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_measure_and_seal_cryptex_manifest", ":", 3674, "", 0, "", "");
  return 3758097084;
}

uint64_t aks_seal_cryptex_manifest_lock()
{
  mach_port_t aks_client_connection;

  aks_client_connection = get_aks_client_connection();
  if (aks_client_connection)
    return IOConnectCallMethod(aks_client_connection, 0x95u, 0, 0, 0, 0, 0, 0, 0, 0);
  fprintf((FILE *)*MEMORY[0x24BDAC8E8], "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_seal_cryptex_manifest_lock", ":", 3688, "", 0, "", "");
  return 3758097084;
}

uint64_t aks_lkgp_recover(int a1, uint64_t a2, uint64_t a3)
{
  mach_port_t aks_client_connection;
  uint64_t input[4];

  input[3] = *MEMORY[0x24BDAC8D0];
  input[0] = a1;
  input[1] = a2;
  input[2] = a3;
  aks_client_connection = get_aks_client_connection();
  if (aks_client_connection)
    return IOConnectCallMethod(aks_client_connection, 0x85u, input, 3u, 0, 0, 0, 0, 0, 0);
  fprintf((FILE *)*MEMORY[0x24BDAC8E8], "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_lkgp_recover", ":", 3704, "", 0, "", "");
  return 3758097084;
}

uint64_t aks_memento_efface_blob(int a1)
{
  mach_port_t aks_client_connection;
  uint64_t input[2];

  input[1] = *MEMORY[0x24BDAC8D0];
  input[0] = a1;
  aks_client_connection = get_aks_client_connection();
  if (aks_client_connection)
    return IOConnectCallMethod(aks_client_connection, 0x8Au, input, 1u, 0, 0, 0, 0, 0, 0);
  fprintf((FILE *)*MEMORY[0x24BDAC8E8], "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_memento_efface_blob", ":", 3720, "", 0, "", "");
  return 3758097084;
}

uint64_t aks_memento_get_state(uint64_t a1)
{
  int v1;
  _BYTE *v2;
  _BYTE *v3;
  mach_port_t aks_client_connection;
  uint64_t v5;
  rsize_t v6;
  uint64_t v7;
  rsize_t __n;
  _BYTE __s[4096];
  uint64_t input[2];

  v1 = MEMORY[0x24BDAC7A8](a1);
  v3 = v2;
  input[1] = *MEMORY[0x24BDAC8D0];
  input[0] = v1;
  bzero(__s, 0x1000uLL);
  __n = 4096;
  aks_client_connection = get_aks_client_connection();
  if (aks_client_connection)
  {
    v5 = IOConnectCallMethod(aks_client_connection, 0x8Bu, input, 1u, 0, 0, 0, 0, __s, &__n);
    v6 = __n;
    if ((_DWORD)v5)
    {
      v7 = v5;
    }
    else
    {
      v7 = 3758097090;
      if (__n - 4097 >= 0xFFFFFFFFFFFFF000)
      {
        if (decode_memento_state((uint64_t)__s, __n, v3))
          v7 = 3758097090;
        else
          v7 = 0;
        v6 = __n;
      }
    }
  }
  else
  {
    fprintf((FILE *)*MEMORY[0x24BDAC8E8], "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_memento_get_state", ":", 3738, "", 0, "", "");
    v7 = 3758097084;
    v6 = 4096;
  }
  memset_s(__s, v6, 0, v6);
  return v7;
}

uint64_t aks_set_jcop_supports_updated_kud_policy()
{
  mach_port_t aks_client_connection;
  uint64_t input;

  aks_client_connection = get_aks_client_connection();
  if (aks_client_connection)
    return IOConnectCallMethod(aks_client_connection, 0x89u, &input, 0, 0, 0, 0, 0, 0, 0);
  fprintf((FILE *)*MEMORY[0x24BDAC8E8], "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_set_jcop_supports_updated_kud_policy", ":", 3758, "", 0, "", "");
  return 3758097084;
}

uint64_t aks_set_cx_window(uint64_t a1)
{
  mach_port_t aks_client_connection;
  uint64_t input[2];

  input[1] = *MEMORY[0x24BDAC8D0];
  input[0] = a1;
  aks_client_connection = get_aks_client_connection();
  if (aks_client_connection)
    return IOConnectCallMethod(aks_client_connection, 0x97u, input, 1u, 0, 0, 0, 0, 0, 0);
  fprintf((FILE *)*MEMORY[0x24BDAC8E8], "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_set_cx_window", ":", 3774, "", 0, "", "");
  return 3758097084;
}

uint64_t aks_get_cx_window(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  mach_port_t aks_client_connection;
  mach_port_t v4;
  uint64_t result;
  size_t v6;
  _QWORD outputStruct[513];

  v1 = MEMORY[0x24BDAC7A8](a1);
  outputStruct[512] = *MEMORY[0x24BDAC8D0];
  v6 = 4096;
  if (!v1)
    return 4294967285;
  v2 = (_QWORD *)v1;
  aks_client_connection = get_aks_client_connection();
  if (aks_client_connection)
  {
    v4 = aks_client_connection;
    bzero(outputStruct, 0x1000uLL);
    result = IOConnectCallMethod(v4, 0x98u, 0, 0, 0, 0, 0, 0, outputStruct, &v6);
    if (!(_DWORD)result)
    {
      if (v6 == 8)
      {
        result = 0;
        *v2 = outputStruct[0];
      }
      else
      {
        return 3758604298;
      }
    }
  }
  else
  {
    fprintf((FILE *)*MEMORY[0x24BDAC8E8], "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_get_cx_window", ":", 3791, "", 0, "", "");
    return 3758097084;
  }
  return result;
}

uint64_t get_aks_log_pid()
{
  return 0;
}

uint64_t compress_uuid()
{
  ccsha256_di();
  ccdigest();
  return 0;
}

unint64_t time_seconds_to_abs_interval(unsigned int a1)
{
  mach_timebase_info info;

  info = 0;
  mach_timebase_info(&info);
  return 1000000000 * info.denom * (unint64_t)a1 / info.numer;
}

unint64_t time_absolute_to_nanoseconds(uint64_t a1)
{
  mach_timebase_info info;

  info = 0;
  mach_timebase_info(&info);
  return (unint64_t)info.numer * a1 / info.denom;
}

uint64_t get_usec_time()
{
  mach_timebase_info info;

  info = 0;
  mach_timebase_info(&info);
  return mach_continuous_time() * info.numer / info.denom / 0x3E8;
}

__darwin_time_t get_clock_time()
{
  timeval v1;

  v1.tv_sec = 0;
  *(_QWORD *)&v1.tv_usec = 0;
  gettimeofday(&v1, 0);
  return v1.tv_sec;
}

uint64_t ipc_seconds_to_microsecond_interval(uint64_t a1)
{
  return 1000000 * a1;
}

unint64_t ipc_microseconds_to_seconds(uint64_t a1)
{
  return (a1 + 999999) / 0xF4240uLL;
}

_QWORD *circular_queue_init(unsigned int a1, unsigned int a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  _QWORD *v6;
  size_t v7;
  void *v8;

  v2 = a1 + 1;
  v3 = v2 << 31 >> 31;
  if (v3 != v2 || v3 < 0)
  {
    fprintf((FILE *)*MEMORY[0x24BDAC8E8], "%s%s:%s%s%s%s%u:%s%u:%s overflow%s\n", "aks", "", "", "", "circular_queue_init", ":", 341, "", 0, "", "");
    return 0;
  }
  else
  {
    v5 = calloc(0x20uLL, 1uLL);
    v6 = v5;
    if (v5)
    {
      v5[1] = 0;
      v7 = (v3 & 0x1FFFFFFFFLL) * a2;
      *(_DWORD *)v5 = a2;
      *((_DWORD *)v5 + 1) = v2;
      v8 = calloc(v7, 1uLL);
      v6[2] = v7;
      v6[3] = v8;
    }
  }
  return v6;
}

uint64_t circular_queue_size(_DWORD *a1)
{
  unsigned int v2;
  unsigned int v3;
  uint64_t result;

  v3 = a1[2];
  v2 = a1[3];
  result = v2 - v3;
  if (v2 < v3)
    return (result + a1[1]);
  return result;
}

uint64_t circular_queue_enqueue(unsigned int *a1, const void *a2)
{
  unsigned int v3;
  unsigned int v4;

  v3 = a1[3];
  v4 = (v3 + 1) % a1[1];
  memcpy((void *)(*((_QWORD *)a1 + 3) + *a1 * v3), a2, *a1);
  a1[3] = v4;
  if (v4 == a1[2])
    a1[2] = (v4 + 1) % a1[1];
  return 0;
}

uint64_t circular_queue_dequeue(unsigned int *a1, void *__dst)
{
  unsigned int v2;
  uint64_t result;

  v2 = a1[2];
  if (v2 == a1[3])
    return 0xFFFFFFFFLL;
  if (__dst)
  {
    memcpy(__dst, (const void *)(*((_QWORD *)a1 + 3) + *a1 * v2), *a1);
    v2 = a1[2];
  }
  memset_s((void *)(*((_QWORD *)a1 + 3) + *a1 * v2), *a1, 0, *a1);
  result = 0;
  a1[2] = (a1[2] + 1) % a1[1];
  return result;
}

uint64_t circular_queue_peek(unsigned int *a1, void *__dst)
{
  unsigned int v2;

  v2 = a1[2];
  if (v2 == a1[3])
    return 0xFFFFFFFFLL;
  memcpy(__dst, (const void *)(*((_QWORD *)a1 + 3) + *a1 * v2), *a1);
  return 0;
}

uint64_t circular_queue_dequeue_all(int *a1, _QWORD *a2, unsigned int *a3)
{
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  char *v10;
  char *v11;
  unsigned int v12;
  unsigned int v13;
  const void *v14;
  size_t v15;
  uint64_t result;
  unsigned int v17;
  unsigned int v18;
  int v19;

  v7 = a1[2];
  v6 = a1[3];
  v8 = v6 - v7;
  if (v6 < v7)
    v8 += a1[1];
  if (!v8)
    return 0;
  v9 = *a1 * v8;
  v10 = (char *)calloc(v9, 1uLL);
  if (!v10)
    return 0xFFFFFFFFLL;
  v11 = v10;
  v12 = a1[2];
  v13 = a1[3];
  if (v13 <= v12)
  {
    if (v12 <= v13)
      goto LABEL_13;
    v17 = a1[1] - v12;
    memcpy(v10, (const void *)(*((_QWORD *)a1 + 3) + *a1 * v12), *a1 * v17);
    if (v8 <= v17)
      goto LABEL_13;
    v10 = &v11[*a1 * v17];
    v14 = (const void *)*((_QWORD *)a1 + 3);
    v15 = *a1 * (v8 - v17);
  }
  else
  {
    v14 = (const void *)(*((_QWORD *)a1 + 3) + *a1 * v12);
    v15 = *a1 * v8;
  }
  memcpy(v10, v14, v15);
LABEL_13:
  v18 = a1[1];
  v19 = *a1;
  a1[2] = (a1[2] + v8) % v18;
  memset_s(*((void **)a1 + 3), v19 * v18, 0, v19 * v18);
  result = 0;
  *a2 = v11;
  *a3 = v9;
  return result;
}

uint64_t circular_queue_clear(uint64_t a1)
{
  rsize_t v1;

  *(_QWORD *)(a1 + 8) = 0;
  v1 = (*(_DWORD *)a1 * *(_DWORD *)(a1 + 4));
  return memset_s(*(void **)(a1 + 24), v1, 0, v1);
}

void circular_queue_free(void *a1)
{
  rsize_t v2;

  *((_QWORD *)a1 + 1) = 0;
  v2 = (*(_DWORD *)a1 * *((_DWORD *)a1 + 1));
  memset_s(*((void **)a1 + 3), v2, 0, v2);
  memset_s(*((void **)a1 + 3), *((_QWORD *)a1 + 2), 0, *((_QWORD *)a1 + 2));
  free(*((void **)a1 + 3));
  memset_s(a1, 0x20uLL, 0, 0x20uLL);
  free(a1);
}

uint64_t class_gen_get(unsigned int a1)
{
  return (a1 >> 5) & 1;
}

BOOL persona_uuid_is_valid(uint8x16_t *a1)
{
  int8x16_t v1;
  int8x16_t v2;
  int8x16_t v3;

  v1 = (int8x16_t)vmovl_high_u8(*a1);
  v2 = (int8x16_t)vmovl_u8(*(uint8x8_t *)a1->i8);
  v3 = (int8x16_t)vmovl_u16((uint16x4_t)vorr_s8(vorr_s8(*(int8x8_t *)v2.i8, *(int8x8_t *)v1.i8), vorr_s8((int8x8_t)*(_OWORD *)&vextq_s8(v2, v2, 8uLL), (int8x8_t)*(_OWORD *)&vextq_s8(v1, v1, 8uLL))));
  return vorr_s8(*(int8x8_t *)v3.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v3, v3, 8uLL)) != 0;
}

BOOL is_non_zero(unsigned __int8 *a1, uint64_t a2)
{
  int v2;
  int v3;

  if (!a2)
    return 0;
  v2 = 0;
  do
  {
    v3 = *a1++;
    v2 |= v3;
    --a2;
  }
  while (a2);
  return v2 != 0;
}

_DWORD *pfk_params_is_valid(_DWORD *result)
{
  if (result)
    return (_DWORD *)(*result != 0);
  return result;
}

uint64_t class_gen_set(char a1, int a2)
{
  return a1 & 0x1F | (32 * a2);
}

uint64_t class_persona_get(unsigned int a1)
{
  return (a1 >> 6) & 1;
}

uint64_t class_persona_unset(int a1)
{
  return a1 & 0xFFFFFFBF;
}

uint64_t class_persona_set(int a1)
{
  return a1 | 0x40u;
}

uint64_t keychain_key(char a1)
{
  char v1;

  v1 = a1 & 0x1F;
  if ((a1 & 0x1Fu) >= 0x14)
    v1 = -1;
  return ((a1 & 0x1Fu) < 0x14) & (0xC3FC0u >> v1);
}

uint64_t class_id_get(char a1)
{
  if ((a1 & 0x1Fu) > 0x13)
    return 0xFFFFFFFFLL;
  else
    return a1 & 0x1F;
}

uint64_t fs_class_key(char a1)
{
  unsigned int v1;

  v1 = a1 & 0x1F;
  if (v1 > 0x13)
    v1 = -1;
  return (v1 < 0x12) & (0x2E03Eu >> v1);
}

uint64_t keystore_type(char a1)
{
  return a1 & 0xF;
}

BOOL store_type_equal(int a1, int a2)
{
  return ((a2 ^ a1) & 0xF) == 0;
}

uint64_t memcmp_c()
{
  return cc_cmp_safe();
}

uint64_t dump_bytes_internal(const char *a1, uint64_t a2, unint64_t a3)
{
  unint64_t v3;
  const char *v4;
  FILE **v5;
  unint64_t v6;
  FILE **v7;
  uint64_t v8;
  unsigned __int8 *v9;
  char *v10;
  uint64_t v11;
  int v12;
  unint64_t v15;
  char __str[16];
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  char v24;
  uint64_t v25;

  v3 = a3;
  v4 = a1;
  v25 = *MEMORY[0x24BDAC8D0];
  v24 = 0;
  v22 = 0u;
  v23 = 0u;
  v20 = 0u;
  v21 = 0u;
  v18 = 0u;
  v19 = 0u;
  *(_OWORD *)__str = 0u;
  v17 = 0u;
  v5 = (FILE **)MEMORY[0x24BDAC8E8];
  if (a3 >= 0x41)
  {
    fprintf((FILE *)*MEMORY[0x24BDAC8E8], "%s%s:%s%s%s%s%u:%s%u:%s %sdump %s (len = %zd)%s%s\n", "aks", "", "", "", "dump_bytes_internal", ":", 786, "", 0, "", "", a1, a3, "", "");
    v4 = "";
  }
  else if (!a3)
  {
    return memset_s(__str, 0x81uLL, 0, 0x81uLL);
  }
  v6 = 0;
  v15 = v3;
  do
  {
    v7 = v5;
    if (v3 - v6 >= 0x40)
      v8 = 64;
    else
      v8 = v3 - v6;
    if (v8)
    {
      v9 = (unsigned __int8 *)(a2 + v6);
      v10 = __str;
      v11 = v8;
      do
      {
        v12 = *v9++;
        snprintf(v10, 3uLL, "%02x", v12);
        v10 += 2;
        --v11;
      }
      while (v11);
    }
    v5 = v7;
    fprintf(*v7, "%s%s:%s%s%s%s%u:%s%u:%s %s%s%s[%04zu,%04zu): %s%s%s%s\n", "aks", "", "", "", "dump_bytes_internal", ":", 796, "", 0, "", "", v4, "", v6, v8 + v6, "", __str,
      "",
      "");
    v6 += v8;
    v3 = v15;
  }
  while (v6 < v15);
  return memset_s(__str, 0x81uLL, 0, 0x81uLL);
}

_BYTE *bytes_to_str_hint(unsigned __int8 *a1, unint64_t a2)
{
  uint64_t v2;
  char *v4;
  uint64_t v5;
  int v6;

  if (a2 >= 0x10)
    v2 = 16;
  else
    v2 = a2;
  if (v2)
  {
    v4 = bytes_to_str_hint_buf;
    v5 = v2;
    do
    {
      v6 = *a1++;
      snprintf(v4, 3uLL, "%02x", v6);
      v4 += 2;
      --v5;
    }
    while (v5);
  }
  bytes_to_str_hint_buf[2 * v2] = 0;
  return bytes_to_str_hint_buf;
}

uint64_t get_kcv(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  _OWORD __s[2];
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  memset(__s, 0, sizeof(__s));
  if (a4 == 3)
  {
    ccsha256_di();
    cchmac();
    v5 = 0;
    *(_WORD *)a3 = __s[0];
    *(_BYTE *)(a3 + 2) = BYTE2(__s[0]);
  }
  else
  {
    v5 = 0xFFFFFFFFLL;
  }
  memset_s(__s, 0x20uLL, 0, 0x20uLL);
  return v5;
}

uint64_t print_kcv(const char *a1, uint64_t a2, uint64_t a3)
{
  __int16 v5;
  char v6;

  v6 = 0;
  v5 = 0;
  get_kcv(a2, a3, (uint64_t)&v5, 3);
  return dump_bytes_internal(a1, (uint64_t)&v5, 3uLL);
}

char *byte_swap_val(char *result, unint64_t a2)
{
  unint64_t v2;
  char *v3;
  char v4;

  if (a2 >= 2)
  {
    v2 = a2 >> 1;
    v3 = &result[a2 - 1];
    do
    {
      v4 = *result;
      *result++ = *v3;
      *v3-- = v4;
      --v2;
    }
    while (v2);
  }
  return result;
}

uint64_t ascii_hex_to_bytes(unsigned __int8 *a1, unint64_t a2, _QWORD *a3, unint64_t *a4)
{
  uint64_t v5;
  unsigned __int8 *v6;
  unint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  _BYTE *v12;
  int v13;
  unsigned int v14;
  unsigned int v15;
  char v16;
  char v17;
  char v18;
  int v19;
  unsigned int v20;
  unsigned int v21;
  char v22;
  char v23;

  v5 = 0xFFFFFFFFLL;
  if ((a2 & 1) == 0)
  {
    v6 = a1;
    if (a1)
    {
      if (a3 && a4)
      {
        v9 = a2 >> 1;
        v10 = calloc(a2 >> 1, 1uLL);
        if (v10)
        {
          if (a2 >= 2)
          {
            if (v9 <= 1)
              v11 = 1;
            else
              v11 = a2 >> 1;
            v12 = v10;
            do
            {
              v13 = *v6;
              v14 = v13 - 48;
              v15 = v13 - 97;
              if ((v13 - 65) >= 6)
                v16 = -1;
              else
                v16 = v13 - 55;
              v17 = v13 - 87;
              if (v15 > 5)
                v17 = v16;
              if (v14 < 0xA)
                v17 = v14;
              v18 = 16 * v17;
              v19 = v6[1];
              v20 = v19 - 48;
              v21 = v19 - 97;
              if ((v19 - 65) >= 6)
                v22 = -1;
              else
                v22 = v19 - 55;
              v23 = v19 - 87;
              if (v21 > 5)
                v23 = v22;
              if (v20 < 0xA)
                v23 = v20;
              *v12++ = v23 | v18;
              v6 += 2;
              --v11;
            }
            while (v11);
          }
          v5 = 0;
          *a3 = v10;
          *a4 = v9;
        }
        else
        {
          return 4294967279;
        }
      }
    }
  }
  return v5;
}

uint64_t err_sks_to_aks(uint64_t result)
{
  if ((_DWORD)result == 0 || result >= 0xFFFFFFDA)
    return dword_240A7E9F0[(int)result + 38];
  return result;
}

uint64_t fv_init_cred_from_secret(_QWORD *a1, uint64_t a2, char a3)
{
  uint64_t result;
  size_t v7;
  void *v8;
  const void *v9;

  memset_s(a1, 0x10uLL, 0, 0x10uLL);
  if ((a3 & 1) != 0)
    return 4294967285;
  if (a2 && *(_QWORD *)a2 && (v7 = *(_QWORD *)(a2 + 8)) != 0)
  {
    v8 = calloc(v7, 1uLL);
    if (v8)
    {
      *a1 = v8;
      v9 = *(const void **)a2;
      a1[1] = *(_QWORD *)(a2 + 8);
      memcpy(v8, v9, *(_QWORD *)(a2 + 8));
      return 0;
    }
    else
    {
      return 4294967279;
    }
  }
  else
  {
    result = 0;
    *a1 = 0;
    a1[1] = 0;
  }
  return result;
}

uint64_t REQUIRE_func(uint64_t result, int a2, const char *a3)
{
  if ((result & 1) == 0)
  {
    fprintf((FILE *)*MEMORY[0x24BDAC8E8], "%s%s:%s%s%s%s%u:%s%u:%s failed REQUIRE condition (%s:%d)\n%s\n", "aks", "", "", "", "REQUIRE_func", ":", 1047, "", 0, "", a3, a2, "");
    abort();
  }
  return result;
}

uint64_t generate_wrapping_key_curve25519(__int128 *a1, __int128 *a2)
{
  __int128 v4;
  __int128 v5;
  int __s;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _OWORD v14[2];
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  memset(v14, 0, sizeof(v14));
  platform_read_random((uint64_t)v14, 0x20u);
  cccurve25519_make_pub();
  v8 = 0u;
  v9 = 0u;
  __s = 0x1000000;
  v4 = a2[1];
  v10 = *a2;
  v11 = v4;
  v5 = a1[1];
  v12 = *a1;
  v13 = v5;
  cccurve25519();
  ccsha256_di();
  ccdigest();
  memset_s(&__s, 0x64uLL, 0, 0x64uLL);
  memset_s(v14, 0x20uLL, 0, 0x20uLL);
  return 0;
}

uint64_t wrap_data(int *a1, uint64_t (*a2)(uint64_t, void *, uint64_t *, uint64_t *, uint64_t), char a3, uint64_t *a4, unsigned int a5, uint64_t a6, unsigned int *a7)
{
  uint64_t v8;
  int v14;
  unsigned int v15;
  _OWORD *v18;
  unsigned int v19;
  uint64_t (*v20)(uint64_t, void *, uint64_t *, uint64_t *, uint64_t);
  uint64_t *v21;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 *v26;
  _QWORD *v27;
  int v29;
  unsigned int v30;
  _OWORD __s[2];
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;

  v36 = *MEMORY[0x24BDAC8D0];
  v30 = 0;
  v34 = 0u;
  v35 = 0u;
  v32 = 0u;
  v33 = 0u;
  memset(__s, 0, sizeof(__s));
  v8 = 0xFFFFFFFFLL;
  if (!a6 || !a7)
    goto LABEL_40;
  if (!a1)
  {
LABEL_14:
    if (a2)
    {
      if (rfc3394_wrapped_size_legacy(a5, &v30))
      {
        if (*a7 < v30)
          goto LABEL_40;
        v18 = 0;
        v19 = 0;
        v20 = a2;
        v21 = a4;
        goto LABEL_38;
      }
    }
    else
    {
      if ((a3 & 4) != 0)
      {
        if ((a5 & 0xF) != 0 || *a7 < a5)
          goto LABEL_40;
        v30 = a5;
        ccaes_cbc_encrypt_mode();
        firebloom_cbc_one_shot_f();
LABEL_39:
        v8 = 0;
        *a7 = v30;
        goto LABEL_40;
      }
      if (rfc3394_wrapped_size_legacy(a5, &v30))
      {
        if (*a7 < v30)
          goto LABEL_40;
        if ((a3 & 8) != 0)
        {
          ccsha256_di();
          cchkdf();
          v18 = __s;
        }
        else
        {
          v18 = a1 + 2;
        }
        v19 = 32;
        v20 = 0;
        v21 = a4;
LABEL_38:
        if (rfc3394_wrap_legacy((uint64_t)v18, v19, 0xA6A6A6A6A6A6A6A6, v20, v21, a5, (_QWORD *)a6, &v30))goto LABEL_40;
        goto LABEL_39;
      }
    }
    v8 = 4294967285;
    if ((a3 & 8) == 0)
      goto LABEL_42;
    goto LABEL_41;
  }
  v14 = *a1;
  if ((*a1 - 1) >= 2)
  {
    if (v14)
      goto LABEL_40;
    goto LABEL_14;
  }
  if ((a3 & 4) != 0)
    v15 = 64;
  else
    v15 = 72;
  v30 = v15;
  if (!a2 && a5 == 32 && *a7 >= v15)
  {
    if (v14 == 1)
    {
      generate_wrapping_key_curve25519((__int128 *)(a1 + 9), &v32);
    }
    else
    {
      v23 = *(_OWORD *)(a1 + 5);
      v32 = *(_OWORD *)(a1 + 1);
      v33 = v23;
      v24 = *(_OWORD *)(a1 + 13);
      v34 = *(_OWORD *)(a1 + 9);
      v35 = v24;
    }
    if ((a3 & 0x80) == 0)
    {
      v25 = v33;
      *(_OWORD *)a6 = v32;
      *(_OWORD *)(a6 + 16) = v25;
      if ((a3 & 4) != 0)
      {
        ccaes_cbc_encrypt_mode();
        firebloom_cbc_one_shot_f();
        goto LABEL_34;
      }
      v29 = 40;
      if ((a3 & 8) != 0)
      {
        ccsha256_di();
        cchkdf();
        v27 = (_QWORD *)(a6 + 32);
        v26 = __s;
      }
      else
      {
        v26 = &v34;
        v27 = (_QWORD *)(a6 + 32);
      }
      if (!rfc3394_wrap_legacy((uint64_t)v26, 0x20u, 0xA6A6A6A6A6A6A6A6, 0, a4, 0x20u, v27, &v29))
      {
LABEL_34:
        v8 = 0;
        *a7 = v15;
        if ((a3 & 8) == 0)
          goto LABEL_42;
        goto LABEL_41;
      }
    }
  }
LABEL_40:
  if ((a3 & 8) != 0)
LABEL_41:
    memset_s(__s, 0x20uLL, 0, 0x20uLL);
LABEL_42:
  memset_s(&v32, 0x40uLL, 0, 0x40uLL);
  return v8;
}

uint64_t generate_unwrap_shared_key_curve25519(__int128 *a1, uint64_t a2, __int128 *a3)
{
  __int128 v3;
  __int128 v4;
  int __s;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v8 = 0u;
  v7 = 0u;
  v3 = a1[1];
  v9 = *a1;
  v10 = v3;
  v4 = a3[1];
  v11 = *a3;
  __s = 0x1000000;
  v12 = v4;
  cccurve25519();
  ccsha256_di();
  ccdigest();
  memset_s(&__s, 0x64uLL, 0, 0x64uLL);
  return 0;
}

uint64_t unwrap_data(uint64_t a1, uint64_t (*a2)(_QWORD, void *, unint64_t *, unint64_t *, uint64_t), char a3, _QWORD *a4, unsigned int a5, _QWORD *a6, unsigned int *a7)
{
  uint64_t v8;
  _OWORD *v15;
  unsigned int v16;
  uint64_t (*v17)(_QWORD, void *, unint64_t *, unint64_t *, uint64_t);
  _QWORD *v18;
  _OWORD *v19;
  int v21;
  unsigned int v22;
  _OWORD __s[2];
  _OWORD v24[2];
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v22 = 0;
  memset(v24, 0, sizeof(v24));
  v8 = 0xFFFFFFFFLL;
  if (a4 && a5)
  {
    if (!a1)
      goto LABEL_6;
    if (*(_DWORD *)a1 != 1)
    {
      if (!*(_DWORD *)a1)
      {
LABEL_6:
        if (a5 <= 0x28)
        {
          if (a2)
          {
            if (rfc3394_unwrapped_size_legacy(a5, &v22) && *a7 >= v22)
            {
              v15 = 0;
              v16 = 0;
              v17 = a2;
              goto LABEL_30;
            }
          }
          else if ((a3 & 4) != 0)
          {
            if ((a5 & 0xF) == 0 && *a7 >= a5)
            {
              v22 = a5;
              ccaes_cbc_decrypt_mode();
              firebloom_cbc_one_shot_f();
LABEL_31:
              v8 = 0;
              *a7 = v22;
              goto LABEL_35;
            }
          }
          else if (rfc3394_unwrapped_size_legacy(a5, &v22) && *a7 >= v22)
          {
            if ((a3 & 8) != 0)
            {
              ccsha256_di();
              cchkdf();
              v15 = v24;
            }
            else
            {
              v15 = (_OWORD *)(a1 + 8);
            }
            v16 = 32;
            v17 = 0;
LABEL_30:
            if (!rfc3394_unwrap_legacy((uint64_t)v15, v16, 0xA6A6A6A6A6A6A6A6, v17, a4, a5, a6, &v22))
              goto LABEL_31;
            goto LABEL_40;
          }
        }
LABEL_38:
        v8 = 4294967285;
        goto LABEL_35;
      }
LABEL_22:
      v8 = 0xFFFFFFFFLL;
      goto LABEL_35;
    }
    v22 = 32;
    if (*a7 < 0x20)
      goto LABEL_38;
    memset(__s, 0, sizeof(__s));
    if ((a3 & 4) != 0)
    {
      if (a5 != 64)
        goto LABEL_38;
      generate_unwrap_shared_key_curve25519((__int128 *)a4, a1 + 4, (__int128 *)(a1 + 36));
      ccaes_cbc_decrypt_mode();
      firebloom_cbc_one_shot_f();
    }
    else
    {
      if (a5 != 72)
        goto LABEL_38;
      generate_unwrap_shared_key_curve25519((__int128 *)a4, a1 + 4, (__int128 *)(a1 + 36));
      if (a3 < 0)
        goto LABEL_22;
      v21 = 32;
      if ((a3 & 8) != 0)
      {
        ccsha256_di();
        cchkdf();
        v18 = a4 + 4;
        v19 = v24;
      }
      else
      {
        v18 = a4 + 4;
        v19 = __s;
      }
      if (rfc3394_unwrap_legacy((uint64_t)v19, 0x20u, 0xA6A6A6A6A6A6A6A6, 0, v18, 0x28u, a6, &v21))
      {
        memset_s(__s, 0x20uLL, 0, 0x20uLL);
LABEL_40:
        v8 = 4294967277;
        goto LABEL_35;
      }
    }
    memset_s(__s, 0x20uLL, 0, 0x20uLL);
    v8 = 0;
    *a7 = 32;
  }
LABEL_35:
  if ((a3 & 8) != 0)
    memset_s(v24, 0x20uLL, 0, 0x20uLL);
  return v8;
}

uint64_t firebloom_export_pub_key(uint64_t a1, _QWORD *a2, size_t *a3)
{
  size_t v5;
  void *v6;
  void *v7;
  uint64_t result;

  v5 = ((unint64_t)(cczp_bitlen() + 7) >> 2) | 1;
  v6 = calloc(v5, 1uLL);
  if (!v6)
    return 4294967279;
  v7 = v6;
  ccec_export_pub();
  result = 0;
  *a2 = v7;
  *a3 = v5;
  return result;
}

unint64_t firebloom_cp_prime_size()
{
  return (unint64_t)(cczp_bitlen() + 7) >> 3;
}

unint64_t firebloom_sign_max_size()
{
  return (((unint64_t)(cczp_bitlen() + 7) >> 2) & 0x3FFFFFFFFFFFFFFELL) + 9;
}

unint64_t firebloom_ec_export_pub_size()
{
  return ((unint64_t)(cczp_bitlen() + 7) >> 2) | 1;
}

unint64_t firebloom_ec_compact_export_pub_size()
{
  return (unint64_t)(cczp_bitlen() + 7) >> 3;
}

uint64_t firebloom_cbc_one_shot_f()
{
  return cccbc_one_shot();
}

uint64_t firebloom_ecb_one_shot_f()
{
  return ccecb_one_shot();
}

uint64_t firebloom_cbc_update_f()
{
  return cccbc_update();
}

BOOL firebloom_ec_import()
{
  return !ccec_import_pub() && ccn_read_uint() == 0;
}

uint64_t firebloom_ec_export()
{
  ccn_write_uint_padded();
  return 1;
}

uint64_t dict_find_params_cb(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  unint64_t v10;
  _BOOL4 v11;
  char v12;
  char v13;
  _QWORD *v14;

  if (*(_QWORD *)(a5 + 8) >= *(_QWORD *)a5)
  {
    v13 = 0;
  }
  else
  {
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = der_equal(*(const void **)(*(_QWORD *)(a5 + 24) + v9), *(_QWORD *)(*(_QWORD *)(a5 + 24) + v9)+ *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a5 + 24) + v9) + 1)+ 2, a1);
      if (v11)
        break;
      ++v10;
      v9 += 40;
      if (v10 >= *(_QWORD *)a5)
        goto LABEL_10;
    }
    v14 = (_QWORD *)(*(_QWORD *)(a5 + 24) + v9);
    if (v14[1])
    {
      v12 = 0;
      *(_BYTE *)(a5 + 16) = 1;
    }
    else
    {
      ++*(_QWORD *)(a5 + 8);
      v14[1] = a3;
      v14[2] = a3 + a4;
      v14[3] = a3;
      v14[4] = a3 + a4;
      v12 = 1;
    }
LABEL_10:
    v13 = v12 | !v11;
  }
  return v13 & 1;
}

BOOL der_key_equal(unsigned __int8 *a1, const void *a2)
{
  return der_equal(a1, (uint64_t)&a1[a1[1] + 2], a2);
}

BOOL der_equal(const void *a1, uint64_t a2, const void *a3)
{
  size_t v5;

  v5 = der_get_sizeof((uint64_t)a1);
  return v5 == der_get_sizeof((uint64_t)a3) && memcmp(a1, a3, v5) == 0;
}

uint64_t der_get_sizeof(uint64_t a1)
{
  if (ccder_blob_decode_tag() && ccder_blob_decode_len())
    return a1 - a1;
  else
    return 0;
}

uint64_t der_dict_iterate()
{
  uint64_t result;

  result = ccder_blob_decode_range();
  if ((_DWORD)result)
  {
    if (ccder_blob_decode_sequence_tl())
    {
      result = ccder_blob_decode_tl();
      if ((_DWORD)result)
        return 0;
    }
    else
    {
      return 1;
    }
  }
  return result;
}

uint64_t der_dict_find_value(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  if (a1)
  {
    der_dict_iterate();
    if (a2)
    {
      if (a3)
      {
        *a2 = 0;
        *a3 = 0;
      }
    }
  }
  return 0;
}

BOOL _dict_find_value_cb(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _BOOL4 v8;

  v8 = der_equal(*(const void **)a5, *(_QWORD *)a5 + *(unsigned __int8 *)(*(_QWORD *)a5 + 1) + 2, a1);
  if (v8)
  {
    *(_BYTE *)(a5 + 24) = 1;
    *(_QWORD *)(a5 + 8) = a3;
    *(_QWORD *)(a5 + 16) = a3 + a4;
  }
  return !v8;
}

uint64_t der_dict_get_number(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a4)
    return 0;
  if (result)
  {
    der_dict_iterate();
    return 0;
  }
  return result;
}

uint64_t der_get_number()
{
  ccder_blob_decode_tl();
  return 0;
}

uint64_t der_dict_get_data(uint64_t result)
{
  if (result)
  {
    der_dict_iterate();
    return 0;
  }
  return result;
}

double der_utils_decode_implicit_raw_octet_string(__int128 *a1, uint64_t a2, _DWORD *a3, _QWORD *a4)
{
  double result;
  __int128 v8;

  v8 = *a1;
  if (ccder_blob_decode_range())
  {
    *a4 = 0;
    *a3 = 0;
    result = *(double *)&v8;
    *a1 = v8;
  }
  return result;
}

uint64_t der_array_iterate(uint64_t a1, uint64_t a2, unsigned int (*a3)(uint64_t, _QWORD, uint64_t), uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;

  *(_QWORD *)&v12 = a1;
  *((_QWORD *)&v12 + 1) = a2;
  v6 = ccder_blob_decode_range();
  if ((_DWORD)v6)
  {
    v11 = 0;
    v7 = v12;
    if (der_utils_decode_tl(&v12, &v10, &v11))
    {
      do
      {
        v8 = v12 + v11;
        if (!a3(v7, v12 + v11 - v7, a4))
          break;
        *(_QWORD *)&v12 = v8;
        v7 = v8;
      }
      while ((der_utils_decode_tl(&v12, &v10, &v11) & 1) != 0);
    }
  }
  return v6;
}

uint64_t der_utils_decode_tl(__int128 *a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t result;
  __int128 v7;

  v7 = *a1;
  result = ccder_blob_decode_tag();
  if ((_DWORD)result)
  {
    result = ccder_blob_decode_len();
    if ((_DWORD)result)
    {
      *a1 = v7;
      *a2 = 0;
      *a3 = 0;
      return 1;
    }
  }
  return result;
}

uint64_t der_get_BOOL()
{
  ccder_blob_decode_tl();
  return 0;
}

uint64_t encode_list_free(void **a1)
{
  void *v2;
  void *v3;

  if (!a1)
    return 0xFFFFFFFFLL;
  while (1)
  {
    v2 = *a1;
    if (!*a1)
      break;
    v3 = (void *)*((_QWORD *)v2 + 1);
    *a1 = *(void **)v2;
    if (v3)
    {
      memset_s(v3, *((_QWORD *)v2 + 2), 0, *((_QWORD *)v2 + 2));
      free(*((void **)v2 + 1));
    }
    memset_s(v2, 0x18uLL, 0, 0x18uLL);
    free(v2);
  }
  return 0;
}

uint64_t encode_list_remove_key(_QWORD *a1, unsigned __int8 *a2)
{
  _QWORD **v2;
  uint64_t result;
  uint64_t v4;
  _QWORD *i;
  void *v6;

  if (!a1)
    return 0xFFFFFFFFLL;
  v2 = (_QWORD **)a1;
  result = (uint64_t)_encode_list_find_key(a1, a2);
  if (result)
  {
    v4 = result;
    for (i = *v2; i != (_QWORD *)result; i = (_QWORD *)*i)
      v2 = (_QWORD **)i;
    *v2 = *(_QWORD **)result;
    v6 = *(void **)(result + 8);
    if (v6)
    {
      memset_s(v6, *(_QWORD *)(v4 + 16), 0, *(_QWORD *)(v4 + 16));
      free(*(void **)(v4 + 8));
    }
    memset_s((void *)v4, 0x18uLL, 0, 0x18uLL);
    free((void *)v4);
    return 0;
  }
  return result;
}

_QWORD *_encode_list_find_key(_QWORD *a1, unsigned __int8 *a2)
{
  _QWORD *v2;
  const void *v5;

  if (!a1)
    return 0;
  v2 = (_QWORD *)*a1;
  if (*a1)
  {
    do
    {
      v5 = (const void *)v2[1];
      if (ccder_blob_decode_sequence_tl() && der_equal(a2, (uint64_t)&a2[a2[1] + 2], v5))
        break;
      v2 = (_QWORD *)*v2;
    }
    while (v2);
  }
  return v2;
}

uint64_t encode_list_get_data(_QWORD *a1, unsigned __int8 *a2, int a3, _QWORD *a4, _QWORD *a5)
{
  _QWORD *key;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v15;

  key = _encode_list_find_key(a1, a2);
  if (!key)
    return 0;
  v9 = 1;
  if (a4)
  {
    if (a5)
    {
      v10 = key[1] + key[2];
      *(_QWORD *)&v15 = key[1];
      *((_QWORD *)&v15 + 1) = v10;
      v9 = ccder_blob_decode_sequence_tl();
      if ((_DWORD)v9)
      {
        if (der_utils_decode_implicit_raw_octet_string_copy(&v15, 12, 0, 0))
        {
          v11 = v15;
          if (ccder_blob_decode_tag())
          {
            if (ccder_blob_decode_len())
            {
              v13 = 0;
              v12 = v15;
              if (a3)
              {
                v13 = (v15 - v11);
                v12 = v11;
              }
              *a4 = v12;
              *a5 = v13;
            }
          }
        }
      }
    }
  }
  return v9;
}

uint64_t der_utils_decode_implicit_raw_octet_string_copy(__int128 *a1, uint64_t a2, uint64_t a3, int a4)
{
  __int128 v8;

  v8 = *a1;
  if ((ccder_blob_decode_range() & 1) == 0 || a3 && a4)
    return 0;
  *a1 = v8;
  return 1;
}

uint64_t encode_list_cstr_get_data(_QWORD *a1, char *__s, void *a3, size_t a4)
{
  unsigned __int8 *v7;
  uint64_t result;
  void *__src;
  uint64_t v10;
  _BYTE v11[2];
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  _BYTE v18[31];
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  memset(v18, 0, sizeof(v18));
  v17 = 0u;
  v16 = 0u;
  v15 = 0u;
  v14 = 0u;
  v13 = 0u;
  v12 = 0u;
  v11[0] = 12;
  v11[1] = strlen(__s);
  v7 = (unsigned __int8 *)der_key_validate((uint64_t)v11);
  result = 0xFFFFFFFFLL;
  if (a3 && v7)
  {
    __memcpy_chk();
    __src = 0;
    v10 = 0;
    if (encode_list_get_data(a1, v7, 0, &__src, &v10))
    {
      if (v10 == a4)
      {
        memcpy(a3, __src, a4);
        return 0;
      }
      else
      {
        return 4294967277;
      }
    }
    else
    {
      return 4294967293;
    }
  }
  return result;
}

uint64_t der_key_validate(uint64_t a1)
{
  if ((ccder_blob_decode_tl() & 1) == 0)
  {
    fprintf((FILE *)*MEMORY[0x24BDAC8E8], "%s%s:%s%s%s%s%u:%s%u:%s bad 1%s\n", "aks", "", "", "", "der_key_validate");
    return 0;
  }
  return a1;
}

uint64_t encode_list_get_number(_QWORD *a1, unsigned __int8 *a2, uint64_t *a3)
{
  uint64_t data;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;

  v7 = 0;
  v8 = 0;
  data = encode_list_get_data(a1, a2, 1, &v7, &v8);
  v5 = data;
  if (a3 && (_DWORD)data)
    *a3 = der_get_number();
  return v5;
}

uint64_t encode_list_get_BOOL(_QWORD *a1, unsigned __int8 *a2, _BYTE *a3)
{
  uint64_t data;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;

  v7 = 0;
  v8 = 0;
  data = encode_list_get_data(a1, a2, 1, &v7, &v8);
  v5 = data;
  if (a3 && (_DWORD)data)
    *a3 = der_get_BOOL();
  return v5;
}

uint64_t encode_list_merge_dict(uint64_t a1)
{
  if (a1)
    return der_dict_iterate() - 1;
  else
    return 4294967285;
}

uint64_t _merge_dict_cb(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  unsigned __int8 *v8;
  uint64_t v9;

  v8 = (unsigned __int8 *)der_key_validate(a1);
  if (v8)
  {
    v9 = (uint64_t)v8;
    if (!encode_list_remove_key(a5, v8) && !encode_list_add_der(a5, v9, a3, a3 + a4))
      return 1;
  }
  fprintf((FILE *)*MEMORY[0x24BDAC8E8], "%s%s:%s%s%s%s%u:%s%u:%s fail%s\n", "aks", "", "", "", "_merge_dict_cb", ":", 647, "", 0, "", "");
  return 0;
}

uint64_t encode_list_dict(_QWORD *a1, _QWORD *a2, size_t *a3)
{
  uint64_t v3;
  _QWORD *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  rsize_t v11;
  void *v12;
  void *v13;
  _QWORD *v14;
  _OWORD *v15;
  size_t v16;
  char *v17;
  void *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v22;
  char v23;
  char *v25;
  char *v26;

  v3 = 0xFFFFFFFFLL;
  if (a1)
  {
    if (a2)
    {
      if (a3)
      {
        v7 = (_QWORD *)*a1;
        if (*a1)
        {
          v8 = 0;
          v9 = 0;
          v10 = 0;
          do
          {
            v10 += v7[2];
            v7 = (_QWORD *)*v7;
            v9 -= 16;
            --v8;
          }
          while (v7);
          if (v8 >= 0xF000000000000001 && (v11 = -v9, (v12 = calloc(-v9, 1uLL)) != 0))
          {
            v13 = v12;
            v14 = (_QWORD *)*a1;
            if (*a1)
            {
              v15 = v12;
              do
              {
                *v15++ = *(_OWORD *)(v14 + 1);
                v14 = (_QWORD *)*v14;
              }
              while (v14);
            }
            qsort(v12, -(uint64_t)v8, 0x10uLL, (int (__cdecl *)(const void *, const void *))_qsort_compare);
            v16 = ccder_sizeof();
            v17 = (char *)calloc(v16, 1uLL);
            v18 = v17;
            if (v17)
            {
              v25 = v17;
              v26 = &v17[v16];
              v19 = v8 - 1;
              v20 = (uint64_t)v13 - v9 - 8;
              while (!__CFADD__(v19++, 1))
              {
                v22 = v20 - 16;
                v23 = ccder_blob_encode_body();
                v20 = v22;
                if ((v23 & 1) == 0)
                  goto LABEL_16;
              }
              if (!ccder_blob_encode_tl() || v25 != v26)
              {
LABEL_16:
                v3 = 0xFFFFFFFFLL;
                goto LABEL_20;
              }
              v3 = 0;
              *a2 = v18;
              *a3 = v16;
              v18 = 0;
            }
            else
            {
              v3 = 4294967279;
            }
LABEL_20:
            memset_s(v13, v11, 0, v11);
            free(v13);
            if (v18)
            {
              memset_s(v18, v16, 0, v16);
              free(v18);
            }
          }
          else
          {
            return 0xFFFFFFFFLL;
          }
        }
      }
    }
  }
  return v3;
}

uint64_t encode_list_add_der(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  size_t v6;
  char *v7;
  char *v8;
  int v9;
  char *v10;
  int v11;
  char *v12;
  _QWORD *v14;
  _QWORD *v15;
  char *v16;
  char *v17;

  result = 0xFFFFFFFFLL;
  if (a1 && a2 && a3 && a4)
  {
    if (der_get_sizeof(a3) <= (unint64_t)(a4 - a3))
    {
      v6 = ccder_sizeof();
      v7 = (char *)calloc(v6, 1uLL);
      if (!v7)
        return 4294967279;
      v8 = v7;
      v16 = &v7[v6];
      if (ccder_blob_encode_body())
      {
        v9 = ccder_blob_encode_body();
        v10 = v16;
        if (!v9)
          v10 = 0;
        v17 = v10;
        v11 = ccder_blob_encode_tl();
        v12 = v17;
        if (!v11)
          v12 = 0;
        if (v12 && v12 == v8)
        {
          v14 = calloc(0x18uLL, 1uLL);
          if (v14)
          {
            v15 = v14;
            result = 0;
            v15[1] = v8;
            v15[2] = v6;
            *v15 = *a1;
            *a1 = v15;
            return result;
          }
        }
      }
      memset_s(v8, v6, 0, v6);
      free(v8);
    }
    return 0xFFFFFFFFLL;
  }
  return result;
}

uint64_t encode_list_add_key(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return encode_list_add_der(a1, a2, a3, a3 + *(unsigned __int8 *)(a3 + 1) + 2);
}

uint64_t encode_list_add_data(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  size_t v5;
  char *v6;
  char *v7;
  int v8;
  char *v9;
  int v10;
  char *v11;
  BOOL v12;
  _QWORD *v13;
  _QWORD *v14;
  char *v15;
  char *v16;

  result = 0xFFFFFFFFLL;
  if (a1 && a2 && a3)
  {
    ccder_sizeof();
    v5 = ccder_sizeof();
    v6 = (char *)calloc(v5, 1uLL);
    if (v6)
    {
      v7 = v6;
      v15 = &v6[v5];
      if (!ccder_blob_encode_body() || !ccder_blob_encode_tl())
        goto LABEL_19;
      v8 = ccder_blob_encode_body();
      v9 = v15;
      if (!v8)
        v9 = 0;
      v16 = v9;
      v10 = ccder_blob_encode_tl();
      v11 = v16;
      if (!v10)
        v11 = 0;
      v12 = v11 && v11 == v7;
      if (v12 && (v13 = calloc(0x18uLL, 1uLL)) != 0)
      {
        v14 = v13;
        result = 0;
        v14[1] = v7;
        v14[2] = v5;
        *v14 = *a1;
        *a1 = v14;
      }
      else
      {
LABEL_19:
        memset_s(v7, v5, 0, v5);
        free(v7);
        return 0xFFFFFFFFLL;
      }
    }
    else
    {
      return 4294967279;
    }
  }
  return result;
}

uint64_t encode_list_cstr_add_data(_QWORD *a1, char *__s, uint64_t a3)
{
  uint64_t v5;
  uint64_t result;
  _BYTE v7[2];
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _BYTE v14[31];
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  memset(v14, 0, sizeof(v14));
  v13 = 0u;
  v12 = 0u;
  v11 = 0u;
  v10 = 0u;
  v9 = 0u;
  v8 = 0u;
  v7[0] = 12;
  v7[1] = strlen(__s);
  v5 = der_key_validate((uint64_t)v7);
  result = 4294967285;
  if (a3)
  {
    if (v5)
    {
      __memcpy_chk();
      return encode_list_add_data(a1, v5, a3);
    }
  }
  return result;
}

uint64_t encode_list_add_BOOL(_QWORD *a1, uint64_t a2)
{
  uint64_t result;
  size_t v4;
  char *v5;
  char *v6;
  int v7;
  char *v8;
  int v9;
  char *v10;
  BOOL v11;
  _QWORD *v12;
  _QWORD *v13;
  char *v14;
  char *v15;

  result = 0xFFFFFFFFLL;
  if (a1 && a2)
  {
    ccder_sizeof();
    v4 = ccder_sizeof();
    v5 = (char *)calloc(v4, 1uLL);
    if (v5)
    {
      v6 = v5;
      v14 = &v5[v4];
      if (!ccder_blob_encode_body() || !ccder_blob_encode_tl())
        goto LABEL_18;
      v7 = ccder_blob_encode_body();
      v8 = v14;
      if (!v7)
        v8 = 0;
      v15 = v8;
      v9 = ccder_blob_encode_tl();
      v10 = v15;
      if (!v9)
        v10 = 0;
      v11 = v10 && v10 == v6;
      if (v11 && (v12 = calloc(0x18uLL, 1uLL)) != 0)
      {
        v13 = v12;
        result = 0;
        v13[1] = v6;
        v13[2] = v4;
        *v13 = *a1;
        *a1 = v13;
      }
      else
      {
LABEL_18:
        memset_s(v6, v4, 0, v4);
        free(v6);
        return 0xFFFFFFFFLL;
      }
    }
    else
    {
      return 4294967279;
    }
  }
  return result;
}

uint64_t encode_list_add_number(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  size_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  int v16;
  char *v17;
  int v18;
  char *v19;
  BOOL v20;
  _QWORD *v21;
  _QWORD *v22;
  char *v23;
  char *v24;
  _QWORD v25[2];

  v3 = a3;
  v25[1] = *MEMORY[0x24BDAC8D0];
  v5 = HIBYTE(a3);
  if ((HIBYTE(a3) + 1) > 1u)
  {
    v10 = 8;
  }
  else
  {
    v6 = 9;
    v7 = 48;
    v8 = 1;
    while ((unint64_t)(v6 - 2) >= 2)
    {
      v9 = a3 >> v7;
      --v6;
      v7 -= 8;
      if ((_DWORD)v5 != v9)
      {
        v8 = v6 - 1;
        goto LABEL_8;
      }
    }
    v6 = 2;
LABEL_8:
    if ((((a3 >> (8 * v8 - 8)) ^ v5) & 0x80) != 0)
      v10 = v6;
    else
      v10 = v8;
  }
  v25[0] = 0;
  result = 0xFFFFFFFFLL;
  if (a1 && a2)
  {
    ccder_sizeof();
    v12 = ccder_sizeof();
    v13 = (char *)calloc(v12, 1uLL);
    if (v13)
    {
      v14 = v13;
      v15 = v10;
      do
      {
        *((_BYTE *)v25 + v15 - 1) = v3;
        v3 >>= 8;
        --v15;
      }
      while (v15);
      v23 = &v13[v12];
      if ((ccder_blob_encode_body() & 1) == 0 || !ccder_blob_encode_tl())
        goto LABEL_30;
      v16 = ccder_blob_encode_body();
      v17 = v23;
      if (!v16)
        v17 = 0;
      v24 = v17;
      v18 = ccder_blob_encode_tl();
      v19 = v24;
      if (!v18)
        v19 = 0;
      v20 = v19 && v19 == v14;
      if (v20 && (v21 = calloc(0x18uLL, 1uLL)) != 0)
      {
        v22 = v21;
        result = 0;
        v22[1] = v14;
        v22[2] = v12;
        *v22 = *a1;
        *a1 = v22;
      }
      else
      {
LABEL_30:
        memset_s(v14, v12, 0, v12);
        free(v14);
        return 0xFFFFFFFFLL;
      }
    }
    else
    {
      return 4294967279;
    }
  }
  return result;
}

uint64_t encode_list_add_string(_QWORD *a1, uint64_t a2, char *__s)
{
  uint64_t result;
  size_t v5;
  char *v6;
  char *v7;
  int v8;
  char *v9;
  int v10;
  char *v11;
  BOOL v12;
  _QWORD *v13;
  _QWORD *v14;
  char *v15;
  char *v16;

  result = 0xFFFFFFFFLL;
  if (a1 && a2 && __s)
  {
    strlen(__s);
    ccder_sizeof();
    v5 = ccder_sizeof();
    v6 = (char *)calloc(v5, 1uLL);
    if (v6)
    {
      v7 = v6;
      v15 = &v6[v5];
      if (!ccder_blob_encode_body() || !ccder_blob_encode_tl())
        goto LABEL_19;
      v8 = ccder_blob_encode_body();
      v9 = v15;
      if (!v8)
        v9 = 0;
      v16 = v9;
      v10 = ccder_blob_encode_tl();
      v11 = v16;
      if (!v10)
        v11 = 0;
      v12 = v11 && v11 == v7;
      if (v12 && (v13 = calloc(0x18uLL, 1uLL)) != 0)
      {
        v14 = v13;
        result = 0;
        v14[1] = v7;
        v14[2] = v5;
        *v14 = *a1;
        *a1 = v14;
      }
      else
      {
LABEL_19:
        memset_s(v7, v5, 0, v5);
        free(v7);
        return 0xFFFFFFFFLL;
      }
    }
    else
    {
      return 4294967279;
    }
  }
  return result;
}

uint64_t encode_list_add_list(_QWORD *a1, uint64_t a2, _QWORD *a3)
{
  char *v3;
  uint64_t v4;
  size_t v5;
  char *v7;
  int v8;
  char *v9;
  int v10;
  char *v11;
  BOOL v12;
  _QWORD *v13;
  char *v15;
  void *__s;
  rsize_t __n;
  char *v18;
  char *v19;

  v3 = 0;
  __s = 0;
  __n = 0;
  v4 = 0xFFFFFFFFLL;
  if (a1 && a2)
  {
    v5 = 0;
    if (a3)
    {
      if (encode_list_dict(a3, &__s, &__n))
      {
        v3 = 0;
        v5 = 0;
      }
      else
      {
        v5 = ccder_sizeof();
        v7 = (char *)calloc(v5, 1uLL);
        v3 = v7;
        if (v7)
        {
          v15 = &v7[v5];
          if (!ccder_blob_encode_body())
            goto LABEL_23;
          v18 = v3;
          v19 = v15;
          v8 = ccder_blob_encode_body();
          v9 = v19;
          if (!v8)
            v9 = 0;
          v18 = v3;
          v19 = v9;
          v10 = ccder_blob_encode_tl();
          v11 = v19;
          if (!v10)
            v11 = 0;
          v12 = v11 && v11 == v3;
          if (v12 && (v13 = calloc(0x18uLL, 1uLL)) != 0)
          {
            v4 = 0;
            v13[1] = v3;
            v13[2] = v5;
            *v13 = *a1;
            *a1 = v13;
            v3 = 0;
          }
          else
          {
LABEL_23:
            v4 = 0xFFFFFFFFLL;
          }
        }
        else
        {
          v4 = 4294967279;
        }
      }
    }
  }
  else
  {
    v5 = 0;
  }
  if (__s)
  {
    memset_s(__s, __n, 0, __n);
    free(__s);
  }
  if (v3)
  {
    memset_s(v3, v5, 0, v5);
    free(v3);
  }
  return v4;
}

BOOL encode_list_is_empty(_QWORD *a1)
{
  return *a1 == 0;
}

uint64_t ccder_sizeof_fv_data()
{
  return ccder_sizeof();
}

uint64_t ccder_sizeof_fv_key()
{
  uint64_t v0;

  v0 = ccder_sizeof();
  return ccder_sizeof() + v0;
}

uint64_t der_utils_encode_fv_key(__int128 *a1, uint64_t a2)
{
  uint64_t result;
  __int128 v4;

  v4 = *a1;
  if (a2)
  {
    result = ccder_blob_encode_body_tl();
    if (!(_DWORD)result)
      return result;
    if ((ccder_blob_encode_body_tl() & 1) == 0)
      return 0;
  }
  else if (!ccder_blob_encode_body_tl() || (ccder_blob_encode_tl() & 1) == 0)
  {
    return 0;
  }
  *a1 = v4;
  return 1;
}

uint64_t der_utils_decode_fv_key(__int128 *a1, int a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  int v7;
  unsigned int v8;
  uint64_t result;
  int v10;
  __int128 v11;
  int *v12;
  uint64_t v13;
  __int128 v14;

  v6 = *(_QWORD *)a3;
  v5 = *(_QWORD *)(a3 + 8);
  v7 = *(_DWORD *)(a3 + 20);
  v11 = *a1;
  if (a2)
  {
    v14 = *a1;
    v12 = 0;
    v13 = 0;
    if ((ccder_blob_decode_range() & 1) == 0)
      return 0;
    v6 = (uint64_t)v12;
    v8 = v13 - (_DWORD)v12;
    v11 = v14;
  }
  else
  {
    LODWORD(v14) = v5;
    result = der_utils_decode_implicit_raw_octet_string_copy_len(&v11, 4, v6, &v14);
    if (!(_DWORD)result)
      return result;
    v8 = v14;
  }
  v14 = v11;
  v12 = 0;
  v13 = 0;
  if ((ccder_blob_decode_range() & 1) == 0)
    return 0;
  v11 = v14;
  if ((v13 - (_DWORD)v12) > 4)
    return 0;
  v10 = *v12;
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v8;
  *(_DWORD *)(a3 + 16) = v10;
  *(_DWORD *)(a3 + 20) = v7;
  *a1 = v11;
  return 1;
}

uint64_t der_utils_decode_implicit_raw_octet_string_copy_len(__int128 *a1, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  __int128 v8;

  v8 = *a1;
  if ((ccder_blob_decode_range() & 1) == 0)
    return 0;
  if (a3)
  {
    if (a4)
      *a4 = 0;
  }
  *a1 = v8;
  return 1;
}

uint64_t der_utils_encode_fv_data(__int128 *a1, uint64_t a2)
{
  uint64_t result;
  __int128 v4;

  v4 = *a1;
  if (a2)
  {
    if ((ccder_blob_encode_body_tl() & 1) == 0)
      return 0;
  }
  else
  {
    result = ccder_blob_encode_tl();
    if (!(_DWORD)result)
      return result;
  }
  *a1 = v4;
  return 1;
}

uint64_t der_utils_decode_fv_data(__int128 *a1, int a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  unsigned int v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;

  v6 = *a3;
  v5 = a3[1];
  v9 = *a1;
  if (a2)
  {
    v12 = *a1;
    v10 = 0;
    v11 = 0;
    result = ccder_blob_decode_range();
    if (!(_DWORD)result)
      return result;
    v6 = v10;
    v8 = v11 - v10;
    v9 = v12;
  }
  else
  {
    LODWORD(v12) = v5;
    result = der_utils_decode_implicit_raw_octet_string_copy_len(&v9, 4, v6, &v12);
    if (!(_DWORD)result)
      return result;
    v8 = v12;
  }
  *a3 = v6;
  a3[1] = v8;
  *a1 = v9;
  return 1;
}

uint64_t der_utils_encode_fv_params(__int128 *a1, uint64_t a2)
{
  uint64_t result;
  __int128 v4;

  v4 = *a1;
  if (a2)
  {
    if ((ccder_blob_encode_body_tl() & 1) == 0)
      return 0;
  }
  else
  {
    result = ccder_blob_encode_tl();
    if (!(_DWORD)result)
      return result;
  }
  *a1 = v4;
  return 1;
}

uint64_t der_utils_decode_fv_params(__int128 *a1)
{
  __int128 v3;

  v3 = *a1;
  if ((ccder_blob_decode_range() & 1) == 0)
    return 0;
  *a1 = v3;
  return 1;
}

uint64_t encode_extended_state(unsigned int *a1, int a2, _QWORD *a3, _DWORD *a4)
{
  uint64_t v8;
  uint64_t v10;
  size_t v11;
  void *v12;

  v12 = 0;
  if (encode_list_add_number(&v12, (uint64_t)der_key_state_state, *a1)
    || encode_list_add_number(&v12, (uint64_t)der_key_state_lock_state, a1[1])
    || encode_list_add_number(&v12, (uint64_t)der_key_state_backoff, *((_QWORD *)a1 + 1))
    || encode_list_add_number(&v12, (uint64_t)der_key_state_failed_attempts, a1[4])
    || encode_list_add_number(&v12, (uint64_t)der_key_state_generation_state, a1[5])
    || encode_list_add_number(&v12, (uint64_t)der_key_state_recovery_countdown, *(_QWORD *)((char *)a1 + 26))|| encode_list_add_number(&v12, (uint64_t)der_key_state_more_state, *(_QWORD *)((char *)a1 + 34))|| encode_list_add_number(&v12, (uint64_t)der_key_keybag_handle, *(int *)((char *)a1 + 42))|| encode_list_add_number(&v12, (uint64_t)der_key_config_max_unlock_attempts, *(unsigned int *)((char *)a1 + 46))|| encode_list_add_data(&v12, (uint64_t)der_key_config_user_uuid, (uint64_t)a1 + 50)|| a2&& (encode_list_add_number(&v12, (uint64_t)der_key_state_assertion_set, *((char *)a1 + 66))|| encode_list_add_number(&v12, (uint64_t)der_key_state_grace_period_enabled, *((char *)a1 + 67))|| encode_list_add_number(&v12, (uint64_t)der_key_lock_time, *(_QWORD *)(a1 + 17))|| encode_list_add_number(&v12, (uint64_t)der_key_cx_window, *(_QWORD *)(a1 + 19)))|| (v10 = 0, v11 = 0, encode_list_dict(&v12, &v10, &v11)))
  {
    v8 = 0xFFFFFFFFLL;
  }
  else
  {
    v8 = 0;
    *a3 = v10;
    *a4 = v11;
  }
  encode_list_free(&v12);
  return v8;
}

uint64_t decode_extended_state(uint64_t a1, int a2, char *__s)
{
  uint64_t result;
  uint64_t number;
  _QWORD v7[57];
  __int128 v8;
  void *v9;
  void *v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  result = 0xFFFFFFFFLL;
  if (a2 && a1)
  {
    if (__s)
    {
      memset_s(__s, 0x54uLL, 0, 0x54uLL);
      bzero(v7, 0x228uLL);
      v7[4] = der_key_state_lock_state;
      v7[9] = der_key_state_backoff;
      v7[14] = der_key_state_failed_attempts;
      v7[19] = der_key_state_generation_state;
      v7[24] = der_key_state_assertion_set;
      v7[29] = der_key_state_grace_period_enabled;
      v7[34] = der_key_state_recovery_countdown;
      v7[39] = der_key_state_more_state;
      v7[44] = der_key_keybag_handle;
      v7[49] = der_key_config_max_unlock_attempts;
      v7[54] = der_key_config_user_uuid;
      v9 = der_key_lock_time;
      v10 = der_key_cx_window;
      der_dict_iterate();
      *(_DWORD *)__s = der_get_number();
      *((_DWORD *)__s + 1) = der_get_number();
      *((_QWORD *)__s + 1) = der_get_number();
      *((_DWORD *)__s + 4) = der_get_number();
      *((_DWORD *)__s + 5) = der_get_number();
      *(_QWORD *)(__s + 26) = der_get_number();
      *(_QWORD *)(__s + 34) = der_get_number();
      *(_DWORD *)(__s + 42) = der_get_number();
      *(_DWORD *)(__s + 46) = der_get_number();
      der_utils_decode_implicit_raw_octet_string_copy(&v8, 4, (uint64_t)(__s + 50), 16);
      __s[66] = der_get_number();
      __s[67] = der_get_number();
      *(_QWORD *)(__s + 68) = der_get_number();
      number = der_get_number();
      result = 0;
      *(_QWORD *)(__s + 76) = number;
    }
  }
  return result;
}

uint64_t decode_memento_state(uint64_t a1, int a2, _BYTE *__s)
{
  uint64_t result;
  int number;

  result = 0xFFFFFFFFLL;
  if (a2 && a1 && __s)
  {
    memset_s(__s, 0x10uLL, 0, 0x10uLL);
    if (der_dict_iterate())
    {
      *__s = der_get_number();
      *((_DWORD *)__s + 1) = der_get_number();
      *((_DWORD *)__s + 2) = der_get_number();
      number = der_get_number();
      result = 0;
      *((_DWORD *)__s + 3) = number;
    }
    else
    {
      return 0xFFFFFFFFLL;
    }
  }
  return result;
}

uint64_t decode_primary_identity_state(uint64_t a1, int a2, void *__s, void *a4, uint64_t a5)
{
  uint64_t result;
  __int128 v10[2];
  __int128 v11;
  uint64_t v12;
  void *v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  result = 0xFFFFFFFFLL;
  if (a2 && a1 && __s && a4)
  {
    memset_s(__s, 0x10uLL, 0, 0x10uLL);
    memset_s(a4, 0x10uLL, 0, 0x10uLL);
    v12 = 0;
    v10[0] = 0u;
    v11 = 0u;
    v14 = 0u;
    v15 = 0u;
    v10[1] = (unint64_t)der_key_group_uuid;
    v13 = der_key_uuid;
    der_dict_iterate();
    if (der_utils_decode_implicit_raw_octet_string_copy(v10, 4, (uint64_t)__s, 16)
      && der_utils_decode_implicit_raw_octet_string_copy((__int128 *)((char *)&v11 + 8), 4, (uint64_t)a4, 16))
    {
      return der_utils_decode_implicit_raw_octet_string_copy(&v15, 4, a5, 16) - 1;
    }
    else
    {
      return 0xFFFFFFFFLL;
    }
  }
  return result;
}

uint64_t decode_fv_blob_state(uint64_t a1, uint64_t a2, _DWORD *__s)
{
  uint64_t result;
  int v6;
  int number;
  __int128 v8;
  uint64_t v9;
  void *v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  void *v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  void *v22;
  __int128 v23;
  __int128 v24;
  void *v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  void *v29;
  __int128 v30;
  __int128 v31;
  void *v32;
  uint64_t v33;
  __int128 v34;
  uint64_t v35;
  void *v36;
  __int128 v37;
  __int128 v38;
  void *v39;
  uint64_t v40;
  __int128 v41;
  uint64_t v42;
  void *v43;
  __int128 v44;
  __int128 v45;
  uint64_t v46;

  v46 = *MEMORY[0x24BDAC8D0];
  result = 0xFFFFFFFFLL;
  if (a2 && a1 && __s)
  {
    memset_s(__s, 0x58uLL, 0, 0x58uLL);
    v24 = 0u;
    v26 = 0;
    v27 = 0u;
    v28 = 0;
    v30 = 0u;
    v31 = 0u;
    v33 = 0;
    v34 = 0u;
    v35 = 0;
    v37 = 0u;
    v38 = 0u;
    v40 = 0;
    v41 = 0u;
    v42 = 0;
    v44 = 0u;
    v45 = 0u;
    v8 = 0u;
    v9 = 0;
    v11 = 0u;
    v12 = 0u;
    v13 = 0u;
    v14 = 0u;
    v15 = 0;
    v17 = 0u;
    v18 = 0u;
    v19 = 0u;
    v20 = 0u;
    v21 = 0;
    v23 = 0u;
    v10 = der_key_id;
    *(_QWORD *)&v13 = der_key_flags;
    v16 = der_key_version;
    *(_QWORD *)&v19 = der_key_state_reserved;
    v22 = der_key_state_failed_attempts;
    v25 = der_key_state_failed_attempts_other;
    v29 = der_key_config_max_unlock_attempts;
    v32 = der_key_state_backoff;
    v36 = der_key_state_backoff_other;
    v39 = der_key_config_capabilities;
    v43 = der_key_state_refcount;
    der_dict_iterate();
    *__s = der_get_number();
    if (der_utils_decode_implicit_raw_octet_string_copy((__int128 *)((char *)&v8 + 8), 4, (uint64_t)(__s + 1), 16)&& der_utils_decode_implicit_raw_octet_string_copy(&v12, 4, (uint64_t)(__s + 5), 16)&& (__s[9] = der_get_number(), __s[10] = der_get_number(), __s[11] = der_get_number(), __s[12] = der_get_number(), __s[15] = der_get_number(), __s[13] = der_get_number(), __s[14] = der_get_number(), der_utils_decode_implicit_raw_octet_string_copy_partial((__int128 *)((char *)&v20 + 8))))
    {
      v6 = __s[9];
      if ((v6 & 0x400) != 0)
      {
        *((_QWORD *)__s + 9) = der_get_number();
        v6 = __s[9];
      }
      if ((v6 & 0x800) != 0)
      {
        number = der_get_number();
        result = 0;
        __s[20] = number;
      }
      else
      {
        return 0;
      }
    }
    else
    {
      return 0xFFFFFFFFLL;
    }
  }
  return result;
}

uint64_t der_utils_decode_implicit_raw_octet_string_copy_partial(__int128 *a1)
{
  uint64_t v2;
  __int128 v4;

  v4 = *a1;
  v2 = ccder_blob_decode_range();
  if ((v2 & 1) != 0)
    *a1 = v4;
  return v2;
}

uint64_t encode_pfk_params_public(int *a1, _QWORD *a2, _DWORD *a3)
{
  uint64_t v3;
  int v7;
  uint64_t v9;
  size_t v10;
  void *v11;

  v11 = 0;
  v3 = 4294967273;
  if (a2 && a3)
  {
    if (a1 && (v7 = *a1) != 0)
    {
      if ((v7 & 1) != 0)
      {
        encode_list_cstr_add_data(&v11, "persona_uuid", (uint64_t)(a1 + 1));
        v7 = *a1;
      }
      if ((v7 & 2) != 0)
        encode_list_cstr_add_data(&v11, "volume_uuid", (uint64_t)(a1 + 5));
      v9 = 0;
      v10 = 0;
      if (!encode_list_dict(&v11, &v9, &v10))
      {
        v3 = 0;
        *a2 = v9;
        *a3 = v10;
      }
    }
    else
    {
      v3 = 0;
      *a2 = 0;
      *a3 = 0;
    }
  }
  encode_list_free(&v11);
  return v3;
}

uint64_t decode_pfk_params_internal(uint64_t a1, uint64_t a2, char *__s)
{
  uint64_t v3;
  void *v6;

  v6 = 0;
  v3 = 0xFFFFFFFFLL;
  if (a2 && a1 && __s)
  {
    memset_s(__s, 0x24uLL, 0, 0x24uLL);
    if (der_dict_iterate())
    {
      if (!encode_list_cstr_get_data(&v6, "volume_uuid", __s + 20, 0x10uLL))
        *(_DWORD *)__s |= 2u;
      v3 = 0;
      if (!encode_list_cstr_get_data(&v6, "persona_uuid", __s + 4, 0x10uLL))
        *(_DWORD *)__s |= 1u;
    }
    else
    {
      v3 = 0xFFFFFFFFLL;
    }
  }
  encode_list_free(&v6);
  return v3;
}

uint64_t encode_fv_params_internal(uint64_t a1, _QWORD *a2, _DWORD *a3)
{
  uint64_t v3;
  uint64_t v8;
  size_t v9;
  void *v10;

  v10 = 0;
  v3 = 4294967273;
  if (a2 && a3)
  {
    if (a1)
    {
      if (!encode_list_cstr_add_data(&v10, "options", a1)
        && !encode_list_cstr_add_data(&v10, "kc", a1 + 8))
      {
        v8 = 0;
        v9 = 0;
        if (!encode_list_dict(&v10, &v8, &v9))
        {
          v3 = 0;
          *a2 = v8;
          *a3 = v9;
        }
      }
    }
    else
    {
      v3 = 0;
      *a2 = 0;
      *a3 = 0;
    }
  }
  encode_list_free(&v10);
  return v3;
}

uint64_t decode_fv_params_internal(uint64_t a1, uint64_t a2, char *__s)
{
  uint64_t v3;
  void *v6;

  v6 = 0;
  v3 = 0xFFFFFFFFLL;
  if (a2 && a1 && __s)
  {
    memset_s(__s, 0x10uLL, 0, 0x10uLL);
    if (der_dict_iterate())
    {
      encode_list_cstr_get_data(&v6, "options", __s, 8uLL);
      encode_list_cstr_get_data(&v6, "kc", __s + 8, 4uLL);
      v3 = 0;
    }
    else
    {
      v3 = 0xFFFFFFFFLL;
    }
  }
  encode_list_free(&v6);
  return v3;
}

uint64_t ref_key_op_der_to_enum(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v4;

  result = 0;
  v4 = *MEMORY[0x24BDAC8D0];
  if (a1 && a2)
  {
    if (der_key_op)
      der_dict_iterate();
    return 0;
  }
  return result;
}

uint64_t der_utils_decode_implicit_raw_octet_string_alloc(__int128 *a1, uint64_t a2, uint64_t *a3, _DWORD *a4)
{
  uint64_t result;
  __int128 v8;

  v8 = *a1;
  if ((ccder_blob_decode_range() & 1) == 0)
    return 0;
  if (a3 && a4)
  {
    result = (uint64_t)calloc(0, 1uLL);
    if (!result)
      return result;
    *a3 = result;
    *a4 = 0;
  }
  *a1 = v8;
  return 1;
}

uint64_t der_utils_decode_implicit_uint64(__int128 *a1, uint64_t a2, _QWORD *a3)
{
  uint64_t result;
  __int128 v6;

  if (a3)
    *a3 = 0;
  v6 = *a1;
  result = ccder_blob_decode_range();
  if ((_DWORD)result)
  {
    if (ccn_read_uint())
    {
      return 0;
    }
    else
    {
      *a1 = v6;
      if (a3)
        *a3 = 0;
      return 1;
    }
  }
  return result;
}

uint64_t _qsort_compare(const void **a1, void **a2)
{
  int v2;
  void *__s2;
  const void *v5;

  v5 = *a1;
  __s2 = *a2;
  if (!ccder_blob_decode_sequence_tl()
    || !ccder_blob_decode_sequence_tl()
    || !ccder_blob_decode_tag()
    || !ccder_blob_decode_len()
    || !v5
    || !ccder_blob_decode_tag()
    || !ccder_blob_decode_len()
    || !__s2)
  {
    return 4294967293;
  }
  v2 = memcmp(v5, __s2, 0);
  if (v2 > 0)
    return 1;
  else
    return ((v2 < 0) << 31 >> 31);
}

uint64_t platform_get_measurement()
{
  REQUIRE_func(&lib_platform_callbacks != 0, 36, "/Library/Caches/com.apple.xbs/Sources/AppleKeyStore_libs/platform/platform.c");
  return 4294967284;
}

uint64_t platform_rng()
{
  REQUIRE_func(&lib_platform_callbacks != 0, 62, "/Library/Caches/com.apple.xbs/Sources/AppleKeyStore_libs/platform/platform.c");
  REQUIRE_func(lib_platform_rng != 0, 63, "/Library/Caches/com.apple.xbs/Sources/AppleKeyStore_libs/platform/platform.c");
  return lib_platform_rng();
}

uint64_t platform_read_random(uint64_t a1, unsigned int a2)
{
  REQUIRE_func(&lib_platform_callbacks != 0, 70, "/Library/Caches/com.apple.xbs/Sources/AppleKeyStore_libs/platform/platform.c");
  REQUIRE_func(lib_platform_read_random != 0, 71, "/Library/Caches/com.apple.xbs/Sources/AppleKeyStore_libs/platform/platform.c");
  return lib_platform_read_random(a1, a2);
}

uint64_t platform_pka_get_pub_key(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  REQUIRE_func(&lib_platform_callbacks != 0, 78, "/Library/Caches/com.apple.xbs/Sources/AppleKeyStore_libs/platform/platform.c");
  REQUIRE_func(0, 79, "/Library/Caches/com.apple.xbs/Sources/AppleKeyStore_libs/platform/platform.c");
  return MEMORY[0](a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t platform_pka_ecdh(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  REQUIRE_func(&lib_platform_callbacks != 0, 86, "/Library/Caches/com.apple.xbs/Sources/AppleKeyStore_libs/platform/platform.c");
  REQUIRE_func(0, 87, "/Library/Caches/com.apple.xbs/Sources/AppleKeyStore_libs/platform/platform.c");
  return MEMORY[0](a1, a2, a3, a4, a5, a6, a7, a8, a9, a10);
}

uint64_t platform_pka_sign(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  REQUIRE_func(&lib_platform_callbacks != 0, 94, "/Library/Caches/com.apple.xbs/Sources/AppleKeyStore_libs/platform/platform.c");
  REQUIRE_func(0, 95, "/Library/Caches/com.apple.xbs/Sources/AppleKeyStore_libs/platform/platform.c");
  return MEMORY[0](a1, a2, a3, a4, a5, a6, a7, a8, a9, a10);
}

uint64_t platform_pka_sika_attest(unsigned int a1, unsigned int a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  REQUIRE_func(&lib_platform_callbacks != 0, 106, "/Library/Caches/com.apple.xbs/Sources/AppleKeyStore_libs/platform/platform.c");
  REQUIRE_func(0, 107, "/Library/Caches/com.apple.xbs/Sources/AppleKeyStore_libs/platform/platform.c");
  return MEMORY[0](a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15);
}

uint64_t platform_pka_shared_encrypt(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, unsigned int a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  REQUIRE_func(&lib_platform_callbacks != 0, 115, "/Library/Caches/com.apple.xbs/Sources/AppleKeyStore_libs/platform/platform.c");
  REQUIRE_func(0, 116, "/Library/Caches/com.apple.xbs/Sources/AppleKeyStore_libs/platform/platform.c");
  return MEMORY[0](a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13);
}

uint64_t platform_ref_key_hw_crypt(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  REQUIRE_func(&lib_platform_callbacks != 0, 123, "/Library/Caches/com.apple.xbs/Sources/AppleKeyStore_libs/platform/platform.c");
  REQUIRE_func(0, 124, "/Library/Caches/com.apple.xbs/Sources/AppleKeyStore_libs/platform/platform.c");
  return MEMORY[0](a1, a2, a3, a4, a5);
}

uint64_t platform_ref_key_hw_crypt_clear_cache()
{
  REQUIRE_func(&lib_platform_callbacks != 0, 131, "/Library/Caches/com.apple.xbs/Sources/AppleKeyStore_libs/platform/platform.c");
  REQUIRE_func(0, 132, "/Library/Caches/com.apple.xbs/Sources/AppleKeyStore_libs/platform/platform.c");
  return MEMORY[0]();
}

uint64_t platform_get_device_id(uint64_t a1, uint64_t a2)
{
  REQUIRE_func(&lib_platform_callbacks != 0, 139, "/Library/Caches/com.apple.xbs/Sources/AppleKeyStore_libs/platform/platform.c");
  REQUIRE_func(0, 140, "/Library/Caches/com.apple.xbs/Sources/AppleKeyStore_libs/platform/platform.c");
  return MEMORY[0](a1, a2);
}

uint64_t platform_get_aon_security(uint64_t a1)
{
  REQUIRE_func(&lib_platform_callbacks != 0, 147, "/Library/Caches/com.apple.xbs/Sources/AppleKeyStore_libs/platform/platform.c");
  REQUIRE_func(0, 148, "/Library/Caches/com.apple.xbs/Sources/AppleKeyStore_libs/platform/platform.c");
  return MEMORY[0](a1);
}

uint64_t platform_get_att_sep_chip_rev(uint64_t a1)
{
  REQUIRE_func(&lib_platform_callbacks != 0, 155, "/Library/Caches/com.apple.xbs/Sources/AppleKeyStore_libs/platform/platform.c");
  REQUIRE_func(0, 156, "/Library/Caches/com.apple.xbs/Sources/AppleKeyStore_libs/platform/platform.c");
  return MEMORY[0](a1);
}

uint64_t platform_get_chip_id(uint64_t a1)
{
  REQUIRE_func(&lib_platform_callbacks != 0, 163, "/Library/Caches/com.apple.xbs/Sources/AppleKeyStore_libs/platform/platform.c");
  REQUIRE_func(0, 164, "/Library/Caches/com.apple.xbs/Sources/AppleKeyStore_libs/platform/platform.c");
  return MEMORY[0](a1);
}

uint64_t platform_get_ecid(uint64_t a1)
{
  REQUIRE_func(&lib_platform_callbacks != 0, 171, "/Library/Caches/com.apple.xbs/Sources/AppleKeyStore_libs/platform/platform.c");
  REQUIRE_func(0, 172, "/Library/Caches/com.apple.xbs/Sources/AppleKeyStore_libs/platform/platform.c");
  return MEMORY[0](a1);
}

uint64_t platform_get_board_id(uint64_t a1)
{
  REQUIRE_func(&lib_platform_callbacks != 0, 179, "/Library/Caches/com.apple.xbs/Sources/AppleKeyStore_libs/platform/platform.c");
  REQUIRE_func(0, 180, "/Library/Caches/com.apple.xbs/Sources/AppleKeyStore_libs/platform/platform.c");
  return MEMORY[0](a1);
}

uint64_t platform_get_fuse_bits(uint64_t a1)
{
  REQUIRE_func(&lib_platform_callbacks != 0, 187, "/Library/Caches/com.apple.xbs/Sources/AppleKeyStore_libs/platform/platform.c");
  REQUIRE_func(0, 188, "/Library/Caches/com.apple.xbs/Sources/AppleKeyStore_libs/platform/platform.c");
  return MEMORY[0](a1);
}

uint64_t platform_get_att_board_and_chip_id(uint64_t a1)
{
  REQUIRE_func(&lib_platform_callbacks != 0, 195, "/Library/Caches/com.apple.xbs/Sources/AppleKeyStore_libs/platform/platform.c");
  REQUIRE_func(0, 196, "/Library/Caches/com.apple.xbs/Sources/AppleKeyStore_libs/platform/platform.c");
  return MEMORY[0](a1);
}

uint64_t aks_get_pad_size(int a1)
{
  return -a1 & 3;
}

char *aks_copy_packed_data(_DWORD *a1, const void *a2, int a3)
{
  char *v3;
  int v5;
  size_t v6;
  int __s;

  v3 = (char *)(a1 + 1);
  if (a2)
  {
    *a1 = a3;
    memcpy(a1 + 1, a2, a3);
    v3 += a3;
    v5 = -a3;
    v6 = -a3 & 3;
    if ((v5 & 3) != 0)
    {
      __s = 0;
      memset_s(&__s, 4uLL, 0, 4uLL);
      memcpy(v3, &__s, v6);
      v3 += v6;
    }
  }
  else
  {
    *a1 = 0;
  }
  return v3;
}

char *aks_pack_data(char **a1, unsigned int *a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  unsigned int v12;
  int v13;
  uint64_t *v14;
  char *result;
  char *v16;
  int v17;
  uint64_t v18;
  const void **v19;
  const void *v20;
  uint64_t *v21;
  const void **v22;

  v21 = &a9;
  v12 = 4;
  if (a3)
  {
    v13 = a3;
    do
    {
      v14 = v21;
      v21 += 2;
      v12 += *((_DWORD *)v14 + 2) + (-*((_DWORD *)v14 + 2) & 3) + 4;
      --v13;
    }
    while (v13);
  }
  result = (char *)calloc(1uLL, v12);
  v16 = result;
  v22 = (const void **)&a9;
  v17 = 0;
  if (a3)
  {
    v18 = 4;
    do
    {
      v19 = v22;
      v20 = *v22;
      v22 += 2;
      result = aks_copy_packed_data(&v16[v18], v20, *((_DWORD *)v19 + 2));
      v18 = result - v16;
      ++v17;
    }
    while (a3 != v17);
  }
  *(_DWORD *)v16 = v17;
  *a1 = v16;
  *a2 = v12;
  return result;
}

uint64_t aks_unpack_data(unsigned int *a1, unint64_t a2, unsigned int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  unsigned int v9;
  char *v11;
  void **v12;
  void *v13;
  char *v14;
  size_t v15;
  unsigned int v16;
  size_t *v17;
  void **v19;

  if (a2 < 4)
    return 0xFFFFFFFFLL;
  v9 = a3;
  if (*a1 >= a3)
  {
    v19 = (void **)&a9;
    if (!a3)
      return 0;
    v11 = (char *)(a1 + 1);
    while (1)
    {
      v12 = v19;
      v13 = *v19;
      v19 += 2;
      v16 = *(_DWORD *)v11;
      v14 = v11 + 4;
      v15 = v16;
      if (v16 > a2)
        break;
      if (v13)
      {
        v17 = (size_t *)v12[1];
        if (*v17 < v15)
          return 0xFFFFFFFFLL;
        memcpy(v13, v14, v15);
        *v17 = v15;
      }
      v11 = &v14[v15];
      if (!--v9)
        return 0;
    }
  }
  return 0xFFFFFFFFLL;
}

void BiometricKitNotificationCallback_cold_1(os_log_t log)
{
  uint8_t v1[16];

  *(_WORD *)v1 = 0;
  _os_log_fault_impl(&dword_2409DC000, log, OS_LOG_TYPE_FAULT, "Unexpected notification parameters", v1, 2u);
}

uint64_t soft_CRIsSelfRepairedComponent_cold_1()
{
  uint64_t v0;

  dlerror();
  v0 = abort_report_np();
  return __35__LACMobileGestalt_deviceHasFaceID__block_invoke_cold_1(v0);
}

uint64_t dispatch thunk of JSONDecoder.decode<A>(_:from:)()
{
  return MEMORY[0x24BDCB220]();
}

uint64_t JSONDecoder.init()()
{
  return MEMORY[0x24BDCB260]();
}

uint64_t type metadata accessor for JSONDecoder()
{
  return MEMORY[0x24BDCB268]();
}

uint64_t dispatch thunk of JSONEncoder.encode<A>(_:)()
{
  return MEMORY[0x24BDCB3B8]();
}

uint64_t JSONEncoder.init()()
{
  return MEMORY[0x24BDCB400]();
}

uint64_t type metadata accessor for JSONEncoder()
{
  return MEMORY[0x24BDCB410]();
}

uint64_t __DataStorage.init(bytes:length:)()
{
  return MEMORY[0x24BDCBBB0]();
}

uint64_t type metadata accessor for __DataStorage()
{
  return MEMORY[0x24BDCBC10]();
}

Swift::String __swiftcall NSLocalizedString(_:tableName:bundle:value:comment:)(Swift::String _, Swift::String_optional tableName, NSBundle bundle, Swift::String value, Swift::String comment)
{
  uint64_t v5;
  void *v6;
  Swift::String result;

  v5 = MEMORY[0x24BDCC6D8](_._countAndFlagsBits, _._object, tableName.value._countAndFlagsBits, tableName.value._object, bundle.super.isa, value._countAndFlagsBits, value._object, comment._countAndFlagsBits);
  result._object = v6;
  result._countAndFlagsBits = v5;
  return result;
}

uint64_t _convertErrorToNSError(_:)()
{
  return MEMORY[0x24BDCD2F0]();
}

uint64_t _convertNSErrorToError(_:)()
{
  return MEMORY[0x24BDCD2F8]();
}

uint64_t static URL._unconditionallyBridgeFromObjectiveC(_:)()
{
  return MEMORY[0x24BDCD9C0]();
}

uint64_t type metadata accessor for URL()
{
  return MEMORY[0x24BDCDAC0]();
}

uint64_t type metadata accessor for Data.RangeReference()
{
  return MEMORY[0x24BDCDC10]();
}

NSData __swiftcall Data._bridgeToObjectiveC()()
{
  return (NSData)MEMORY[0x24BDCDCA0]();
}

uint64_t static Data._unconditionallyBridgeFromObjectiveC(_:)()
{
  return MEMORY[0x24BDCDCE0]();
}

uint64_t Date.addingTimeInterval(_:)()
{
  return MEMORY[0x24BDCE468]();
}

NSDate __swiftcall Date._bridgeToObjectiveC()()
{
  return (NSDate)MEMORY[0x24BDCE5D8]();
}

uint64_t static Date.< infix(_:_:)()
{
  return MEMORY[0x24BDCE5F0]();
}

uint64_t static Date._unconditionallyBridgeFromObjectiveC(_:)()
{
  return MEMORY[0x24BDCE878]();
}

uint64_t static Date.now.getter()
{
  return MEMORY[0x24BDCE880]();
}

uint64_t type metadata accessor for Date()
{
  return MEMORY[0x24BDCE900]();
}

uint64_t UUID.uuidString.getter()
{
  return MEMORY[0x24BDCE9B0]();
}

NSUUID __swiftcall UUID._bridgeToObjectiveC()()
{
  return (NSUUID)MEMORY[0x24BDCE9D0]();
}

uint64_t static UUID.== infix(_:_:)()
{
  return MEMORY[0x24BDCE9E0]();
}

uint64_t static UUID._unconditionallyBridgeFromObjectiveC(_:)()
{
  return MEMORY[0x24BDCE9F8]();
}

uint64_t UUID.init()()
{
  return MEMORY[0x24BDCEA40]();
}

uint64_t type metadata accessor for UUID()
{
  return MEMORY[0x24BDCEA58]();
}

uint64_t Logger.logObject.getter()
{
  return MEMORY[0x24BEE78A8]();
}

uint64_t type metadata accessor for Logger()
{
  return MEMORY[0x24BEE78D8]();
}

uint64_t Logger.init(_:)()
{
  return MEMORY[0x24BEE78E8]();
}

Swift::Void __swiftcall AnyCancellable.cancel()()
{
  MEMORY[0x24BDB9B50]();
}

uint64_t CurrentValueSubject.send(_:)()
{
  return MEMORY[0x24BDB9CC0]();
}

uint64_t CurrentValueSubject.init(_:)()
{
  return MEMORY[0x24BDB9D00]();
}

uint64_t Publisher.eraseToAnyPublisher()()
{
  return MEMORY[0x24BDB9F20]();
}

uint64_t Publisher.compactMap<A>(_:)()
{
  return MEMORY[0x24BDB9F30]();
}

uint64_t Publisher.handleEvents(receiveSubscription:receiveOutput:receiveCompletion:receiveCancel:receiveRequest:)()
{
  return MEMORY[0x24BDB9F38]();
}

uint64_t Publisher.share()()
{
  return MEMORY[0x24BDBA010]();
}

uint64_t Publisher.receive<A>(on:options:)()
{
  return MEMORY[0x24BDBA090]();
}

uint64_t Publisher<>.removeDuplicates()()
{
  return MEMORY[0x24BDBA0E8]();
}

uint64_t Publisher<>.sink(receiveValue:)()
{
  return MEMORY[0x24BDBA110]();
}

uint64_t type metadata accessor for DispatchWorkItemFlags()
{
  return MEMORY[0x24BEE5458]();
}

uint64_t static DispatchQoS.unspecified.getter()
{
  return MEMORY[0x24BEE54C8]();
}

uint64_t static DispatchQoS.userInitiated.getter()
{
  return MEMORY[0x24BEE54D0]();
}

uint64_t type metadata accessor for DispatchQoS()
{
  return MEMORY[0x24BEE5500]();
}

uint64_t static DispatchTime.now()()
{
  return MEMORY[0x24BEE5570]();
}

uint64_t type metadata accessor for DispatchTime()
{
  return MEMORY[0x24BEE5590]();
}

uint64_t type metadata accessor for DispatchPredicate()
{
  return MEMORY[0x24BEE5618]();
}

uint64_t + infix(_:_:)()
{
  return MEMORY[0x24BEE5628]();
}

uint64_t _dispatchPreconditionTest(_:)()
{
  return MEMORY[0x24BEE5648]();
}

NSDictionary __swiftcall Dictionary._bridgeToObjectiveC()()
{
  return (NSDictionary)MEMORY[0x24BDCF808]();
}

uint64_t static Dictionary._unconditionallyBridgeFromObjectiveC(_:)()
{
  return MEMORY[0x24BDCF830]();
}

uint64_t dispatch thunk of Hashable._rawHashValue(seed:)()
{
  return MEMORY[0x24BEE0610]();
}

uint64_t BidirectionalCollection<>.joined(separator:)()
{
  return MEMORY[0x24BEE07D0]();
}

uint64_t dispatch thunk of static Comparable.>= infix(_:_:)()
{
  return MEMORY[0x24BEE07E8]();
}

uint64_t dispatch thunk of static Comparable.<= infix(_:_:)()
{
  return MEMORY[0x24BEE07F0]();
}

uint64_t dispatch thunk of static Equatable.== infix(_:_:)()
{
  return MEMORY[0x24BEE0980]();
}

NSString __swiftcall String._bridgeToObjectiveC()()
{
  return (NSString)MEMORY[0x24BDCF9E0]();
}

uint64_t static String._unconditionallyBridgeFromObjectiveC(_:)()
{
  return MEMORY[0x24BDCFA28]();
}

uint64_t String.data(using:allowLossyConversion:)()
{
  return MEMORY[0x24BDCFA38]();
}

uint64_t String.init(format:_:)()
{
  return MEMORY[0x24BDCFA78]();
}

uint64_t static String.Encoding.utf8.getter()
{
  return MEMORY[0x24BDCFAC8]();
}

uint64_t type metadata accessor for String.Encoding()
{
  return MEMORY[0x24BDCFAF8]();
}

uint64_t String.init<A>(describing:)()
{
  return MEMORY[0x24BEE09F0]();
}

uint64_t static String._uncheckedFromUTF8(_:)()
{
  return MEMORY[0x24BEE0AD8]();
}

uint64_t String.hash(into:)()
{
  return MEMORY[0x24BEE0B20]();
}

uint64_t String.count.getter()
{
  return MEMORY[0x24BEE0B68]();
}

uint64_t String.index(_:offsetBy:)()
{
  return MEMORY[0x24BEE0B88]();
}

Swift::Void __swiftcall String.append(_:)(Swift::String a1)
{
  MEMORY[0x24BEE0BC0](a1._countAndFlagsBits, a1._object);
}

Swift::Int __swiftcall String.UTF8View._foreignCount()()
{
  return MEMORY[0x24BEE0C10]();
}

uint64_t String.UTF8View._foreignIndex(after:)()
{
  return MEMORY[0x24BEE0C18]();
}

uint64_t String.UTF8View._foreignIndex(_:offsetBy:)()
{
  return MEMORY[0x24BEE0C30]();
}

uint64_t String.UTF8View._foreignDistance(from:to:)()
{
  return MEMORY[0x24BEE0C38]();
}

uint64_t String.UTF8View._foreignSubscript(position:)()
{
  return MEMORY[0x24BEE0C40]();
}

uint64_t String.UTF16View.index(_:offsetBy:)()
{
  return MEMORY[0x24BEE0CA0]();
}

uint64_t String.subscript.getter()
{
  return MEMORY[0x24BEE0D98]();
}

{
  return MEMORY[0x24BEE0DE0]();
}

uint64_t String.init<A>(_:)()
{
  return MEMORY[0x24BEE0DD0]();
}

uint64_t specialized Array._makeUniqueAndReserveCapacityIfNotUnique()()
{
  return MEMORY[0x24BEE1110]();
}

NSArray __swiftcall Array._bridgeToObjectiveC()()
{
  return (NSArray)MEMORY[0x24BDCFBA8]();
}

uint64_t static Array._unconditionallyBridgeFromObjectiveC(_:)()
{
  return MEMORY[0x24BDCFBC8]();
}

uint64_t Array.description.getter()
{
  return MEMORY[0x24BEE1120]();
}

uint64_t specialized Array._endMutation()()
{
  return MEMORY[0x24BEE1128]();
}

uint64_t specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)()
{
  return MEMORY[0x24BEE1160]();
}

uint64_t specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)()
{
  return MEMORY[0x24BEE11B8]();
}

uint64_t dispatch thunk of Actor.unownedExecutor.getter()
{
  return MEMORY[0x24BEE6800]();
}

uint64_t TaskPriority.rawValue.getter()
{
  return MEMORY[0x24BEE6988]();
}

uint64_t type metadata accessor for TaskPriority()
{
  return MEMORY[0x24BEE6990]();
}

uint64_t AsyncStream.Continuation.yield(_:)()
{
  return MEMORY[0x24BEE6A30]();
}

Swift::Void __swiftcall AsyncStream.Continuation.finish()()
{
  MEMORY[0x24BEE6A38]();
}

uint64_t AsyncStream.makeAsyncIterator()()
{
  return MEMORY[0x24BEE6A50]();
}

uint64_t AsyncStream.Iterator.next(isolation:)()
{
  return MEMORY[0x24BEE6A58]();
}

uint64_t AsyncStream.init(_:bufferingPolicy:_:)()
{
  return MEMORY[0x24BEE6AA0]();
}

Swift::Void __swiftcall Task.cancel()()
{
  MEMORY[0x24BEE6AD0]();
}

NSNumber __swiftcall Int._bridgeToObjectiveC()()
{
  return (NSNumber)MEMORY[0x24BDCFD28]();
}

uint64_t static Int._forceBridgeFromObjectiveC(_:result:)()
{
  return MEMORY[0x24BDCFD30]();
}

uint64_t static Int._conditionallyBridgeFromObjectiveC(_:result:)()
{
  return MEMORY[0x24BDCFD38]();
}

uint64_t static Int._unconditionallyBridgeFromObjectiveC(_:)()
{
  return MEMORY[0x24BDCFD40]();
}

uint64_t Int.hashValue.getter()
{
  return MEMORY[0x24BEE1758]();
}

uint64_t static os_log_type_t.info.getter()
{
  return MEMORY[0x24BEE78F0]();
}

uint64_t static os_log_type_t.debug.getter()
{
  return MEMORY[0x24BEE7908]();
}

uint64_t static os_log_type_t.error.getter()
{
  return MEMORY[0x24BEE7910]();
}

uint64_t static os_log_type_t.default.getter()
{
  return MEMORY[0x24BEE7928]();
}

uint64_t type metadata accessor for OS_dispatch_queue.Attributes()
{
  return MEMORY[0x24BEE5688]();
}

uint64_t type metadata accessor for OS_dispatch_queue.SchedulerOptions()
{
  return MEMORY[0x24BEE56F0]();
}

uint64_t type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency()
{
  return MEMORY[0x24BEE5760]();
}

uint64_t OS_dispatch_queue.sync<A>(execute:)()
{
  return MEMORY[0x24BEE5780]();
}

uint64_t OS_dispatch_queue.async(group:qos:flags:execute:)()
{
  return MEMORY[0x24BEE5790]();
}

uint64_t OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)()
{
  return MEMORY[0x24BEE57A0]();
}

uint64_t OS_dispatch_semaphore.wait(timeout:)()
{
  return MEMORY[0x24BEE5918]();
}

Swift::Int __swiftcall OS_dispatch_semaphore.signal()()
{
  return MEMORY[0x24BEE5928]();
}

uint64_t static NSObject.== infix(_:_:)()
{
  return MEMORY[0x24BEE5BC0]();
}

uint64_t Optional.debugDescription.getter()
{
  return MEMORY[0x24BEE1C58]();
}

uint64_t type metadata accessor for Optional()
{
  return MEMORY[0x24BEE1C68]();
}

uint64_t UnsafeMutableRawBufferPointer.copyMemory(from:)()
{
  return MEMORY[0x24BEE1F00]();
}

uint64_t UnsafeMutableRawBufferPointer.subscript.setter()
{
  return MEMORY[0x24BEE1F48]();
}

uint64_t _bridgeAnyObjectToAny(_:)()
{
  return MEMORY[0x24BEE20A8]();
}

uint64_t dispatch thunk of SetAlgebra.init<A>(_:)()
{
  return MEMORY[0x24BEE22C0]();
}

uint64_t _HashTable.previousHole(before:)()
{
  return MEMORY[0x24BEE22D0]();
}

Swift::Int __swiftcall AnyHashable._rawHashValue(seed:)(Swift::Int seed)
{
  return MEMORY[0x24BEE23A0](seed);
}

uint64_t static AnyHashable.== infix(_:_:)()
{
  return MEMORY[0x24BEE23A8]();
}

uint64_t AnyHashable.init<A>(_:)()
{
  return MEMORY[0x24BEE23E8]();
}

Swift::Void __swiftcall _StringGuts.grow(_:)(Swift::Int a1)
{
  MEMORY[0x24BEE2510](a1);
}

uint64_t _StringGuts.copyUTF8(into:)()
{
  return MEMORY[0x24BEE2518]();
}

Swift::Void __swiftcall _ArrayBuffer._typeCheckSlowPath(_:)(Swift::Int a1)
{
  MEMORY[0x24BEE2648](a1);
}

uint64_t specialized _ArrayBuffer._getElementSlowPath(_:)()
{
  return MEMORY[0x24BEE2658]();
}

uint64_t _StringObject.sharedUTF8.getter()
{
  return MEMORY[0x24BEE2838]();
}

uint64_t specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()()
{
  return MEMORY[0x24BEE2908]();
}

uint64_t specialized ContiguousArray._endMutation()()
{
  return MEMORY[0x24BEE2938]();
}

uint64_t specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)()
{
  return MEMORY[0x24BEE2980]();
}

uint64_t specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)()
{
  return MEMORY[0x24BEE2988]();
}

uint64_t _print_unlocked<A, B>(_:_:)()
{
  return MEMORY[0x24BEE2BE0]();
}

uint64_t _assertionFailure(_:_:file:line:flags:)()
{
  return MEMORY[0x24BEE2F40]();
}

{
  return MEMORY[0x24BEE2F48]();
}

uint64_t _CocoaArrayWrapper.endIndex.getter()
{
  return MEMORY[0x24BEE3068]();
}

uint64_t _CocoaArrayWrapper.subscript.getter()
{
  return MEMORY[0x24BEE3070]();
}

uint64_t static _DictionaryStorage.copy(original:)()
{
  return MEMORY[0x24BEE3080]();
}

uint64_t static _DictionaryStorage.resize(original:capacity:move:)()
{
  return MEMORY[0x24BEE3088]();
}

uint64_t static _DictionaryStorage.allocate(capacity:)()
{
  return MEMORY[0x24BEE3098]();
}

uint64_t _fatalErrorMessage(_:_:file:line:flags:)()
{
  return MEMORY[0x24BEE30B0]();
}

uint64_t _SwiftNewtypeWrapper<>._toCustomAnyHashable()()
{
  return MEMORY[0x24BEE31D0]();
}

uint64_t KeyedDecodingContainer.decodeIfPresent(_:forKey:)()
{
  return MEMORY[0x24BEE32D8]();
}

uint64_t KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)()
{
  return MEMORY[0x24BEE3308]();
}

uint64_t KeyedDecodingContainer.decode(_:forKey:)()
{
  return MEMORY[0x24BEE3350]();
}

{
  return MEMORY[0x24BEE3358]();
}

uint64_t KeyedEncodingContainer.encodeIfPresent(_:forKey:)()
{
  return MEMORY[0x24BEE3428]();
}

uint64_t KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)()
{
  return MEMORY[0x24BEE3458]();
}

uint64_t KeyedEncodingContainer.encode(_:forKey:)()
{
  return MEMORY[0x24BEE34A0]();
}

{
  return MEMORY[0x24BEE34A8]();
}

uint64_t dispatch thunk of CustomStringConvertible.description.getter()
{
  return MEMORY[0x24BEE3568]();
}

uint64_t _stringCompareWithSmolCheck(_:_:expecting:)()
{
  return MEMORY[0x24BEE3A30]();
}

uint64_t type metadata accessor for __ContiguousArrayStorageBase()
{
  return MEMORY[0x24BEE3B98]();
}

uint64_t KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)()
{
  return MEMORY[0x24BEE3ED8]();
}

uint64_t static Hasher._hash(seed:_:)()
{
  return MEMORY[0x24BEE42D8]();
}

uint64_t Hasher.init(_seed:)()
{
  return MEMORY[0x24BEE42E0]();
}

Swift::Void __swiftcall Hasher._combine(_:)(Swift::UInt a1)
{
  MEMORY[0x24BEE42F8](a1);
}

Swift::Int __swiftcall Hasher._finalize()()
{
  return MEMORY[0x24BEE4328]();
}

uint64_t dispatch thunk of Decoder.container<A>(keyedBy:)()
{
  return MEMORY[0x24BEE4608]();
}

uint64_t dispatch thunk of Encoder.container<A>(keyedBy:)()
{
  return MEMORY[0x24BEE4638]();
}

uint64_t CodingKey.description.getter()
{
  return MEMORY[0x24BEE4A08]();
}

uint64_t CodingKey.debugDescription.getter()
{
  return MEMORY[0x24BEE4A10]();
}

uint64_t AKSEventsRegister()
{
  return MEMORY[0x24BE07878]();
}

uint64_t AKSEventsUnregister()
{
  return MEMORY[0x24BE07880]();
}

uint64_t AMFIArmSecurityBootMode()
{
  return MEMORY[0x24BE08688]();
}

uint64_t AMFICompleteSecurityBootMode()
{
  return MEMORY[0x24BE08690]();
}

uint64_t AMFIDeveloperModeCommit()
{
  return MEMORY[0x24BE08698]();
}

uint64_t AMFIGetSecurityBootMode()
{
  return MEMORY[0x24BE086A0]();
}

uint64_t AMFIGetSecurityBootModeArmed()
{
  return MEMORY[0x24BE086A8]();
}

uint64_t AMFIProfileCommitProfile()
{
  return MEMORY[0x24BE086B8]();
}

uint64_t AMFIProfileGetScheduledProfile()
{
  return MEMORY[0x24BE086C0]();
}

uint64_t AMFIProfileSetTrustWithOptions()
{
  return MEMORY[0x24BE086C8]();
}

uint64_t CCRandomCopyBytes()
{
  return MEMORY[0x24BDAC2C8]();
}

CFTypeID CFBooleanGetTypeID(void)
{
  return MEMORY[0x24BDBBA18]();
}

Boolean CFBooleanGetValue(CFBooleanRef BOOLean)
{
  return MEMORY[0x24BDBBA20](BOOLean);
}

CFDataRef CFDataCreate(CFAllocatorRef allocator, const UInt8 *bytes, CFIndex length)
{
  return (CFDataRef)MEMORY[0x24BDBBC98](allocator, bytes, length);
}

const UInt8 *__cdecl CFDataGetBytePtr(CFDataRef theData)
{
  return (const UInt8 *)MEMORY[0x24BDBBCE0](theData);
}

CFIndex CFDataGetLength(CFDataRef theData)
{
  return MEMORY[0x24BDBBCF8](theData);
}

CFTypeID CFDataGetTypeID(void)
{
  return MEMORY[0x24BDBBD08]();
}

void CFDictionaryAddValue(CFMutableDictionaryRef theDict, const void *key, const void *value)
{
  MEMORY[0x24BDBBDB0](theDict, key, value);
}

CFMutableDictionaryRef CFDictionaryCreateMutable(CFAllocatorRef allocator, CFIndex capacity, const CFDictionaryKeyCallBacks *keyCallBacks, const CFDictionaryValueCallBacks *valueCallBacks)
{
  return (CFMutableDictionaryRef)MEMORY[0x24BDBBDF0](allocator, capacity, keyCallBacks, valueCallBacks);
}

Boolean CFDictionaryGetValueIfPresent(CFDictionaryRef theDict, const void *key, const void **value)
{
  return MEMORY[0x24BDBBE38](theDict, key, value);
}

void CFDictionarySetValue(CFMutableDictionaryRef theDict, const void *key, const void *value)
{
  MEMORY[0x24BDBBE60](theDict, key, value);
}

Boolean CFEqual(CFTypeRef cf1, CFTypeRef cf2)
{
  return MEMORY[0x24BDBBE68](cf1, cf2);
}

CFTypeID CFGetTypeID(CFTypeRef cf)
{
  return MEMORY[0x24BDBBEF8](cf);
}

void CFNotificationCenterAddObserver(CFNotificationCenterRef center, const void *observer, CFNotificationCallback callBack, CFStringRef name, const void *object, CFNotificationSuspensionBehavior suspensionBehavior)
{
  MEMORY[0x24BDBC040](center, observer, callBack, name, object, suspensionBehavior);
}

CFNotificationCenterRef CFNotificationCenterGetDarwinNotifyCenter(void)
{
  return (CFNotificationCenterRef)MEMORY[0x24BDBC050]();
}

void CFNotificationCenterPostNotification(CFNotificationCenterRef center, CFNotificationName name, const void *object, CFDictionaryRef userInfo, Boolean deliverImmediately)
{
  MEMORY[0x24BDBC070](center, name, object, userInfo, deliverImmediately);
}

void CFNotificationCenterRemoveEveryObserver(CFNotificationCenterRef center, const void *observer)
{
  MEMORY[0x24BDBC080](center, observer);
}

void CFNotificationCenterRemoveObserver(CFNotificationCenterRef center, const void *observer, CFNotificationName name, const void *object)
{
  MEMORY[0x24BDBC088](center, observer, name, object);
}

CFNumberRef CFNumberCreate(CFAllocatorRef allocator, CFNumberType theType, const void *valuePtr)
{
  return (CFNumberRef)MEMORY[0x24BDBC0A0](allocator, theType, valuePtr);
}

CFTypeID CFNumberGetTypeID(void)
{
  return MEMORY[0x24BDBC118]();
}

Boolean CFNumberGetValue(CFNumberRef number, CFNumberType theType, void *valuePtr)
{
  return MEMORY[0x24BDBC130](number, theType, valuePtr);
}

void CFRelease(CFTypeRef cf)
{
  MEMORY[0x24BDBC298](cf);
}

CFComparisonResult CFStringCompare(CFStringRef theString1, CFStringRef theString2, CFStringCompareFlags compareOptions)
{
  return MEMORY[0x24BDBC4D0](theString1, theString2, compareOptions);
}

kern_return_t IOConnectCallMethod(mach_port_t connection, uint32_t selector, const uint64_t *input, uint32_t inputCnt, const void *inputStruct, size_t inputStructCnt, uint64_t *output, uint32_t *outputCnt, void *outputStruct, size_t *outputStructCnt)
{
  return MEMORY[0x24BDD7EF8](*(_QWORD *)&connection, *(_QWORD *)&selector, input, *(_QWORD *)&inputCnt, inputStruct, inputStructCnt, output, outputCnt);
}

kern_return_t IOConnectCallScalarMethod(mach_port_t connection, uint32_t selector, const uint64_t *input, uint32_t inputCnt, uint64_t *output, uint32_t *outputCnt)
{
  return MEMORY[0x24BDD7F00](*(_QWORD *)&connection, *(_QWORD *)&selector, input, *(_QWORD *)&inputCnt, output, outputCnt);
}

kern_return_t IOConnectCallStructMethod(mach_port_t connection, uint32_t selector, const void *inputStruct, size_t inputStructCnt, void *outputStruct, size_t *outputStructCnt)
{
  return MEMORY[0x24BDD7F08](*(_QWORD *)&connection, *(_QWORD *)&selector, inputStruct, inputStructCnt, outputStruct, outputStructCnt);
}

kern_return_t IOConnectSetNotificationPort(io_connect_t connect, uint32_t type, mach_port_t port, uintptr_t reference)
{
  return MEMORY[0x24BDD7F40](*(_QWORD *)&connect, *(_QWORD *)&type, *(_QWORD *)&port, reference);
}

kern_return_t IOObjectRelease(io_object_t object)
{
  return MEMORY[0x24BDD86F8](*(_QWORD *)&object);
}

CFTypeRef IORegistryEntryCreateCFProperty(io_registry_entry_t entry, CFStringRef key, CFAllocatorRef allocator, IOOptionBits options)
{
  return (CFTypeRef)MEMORY[0x24BDD88B0](*(_QWORD *)&entry, key, allocator, *(_QWORD *)&options);
}

io_registry_entry_t IORegistryEntryFromPath(mach_port_t mainPort, const io_string_t path)
{
  return MEMORY[0x24BDD88C0](*(_QWORD *)&mainPort, path);
}

kern_return_t IOServiceClose(io_connect_t connect)
{
  return MEMORY[0x24BDD8970](*(_QWORD *)&connect);
}

io_service_t IOServiceGetMatchingService(mach_port_t mainPort, CFDictionaryRef matching)
{
  return MEMORY[0x24BDD8988](*(_QWORD *)&mainPort, matching);
}

CFMutableDictionaryRef IOServiceMatching(const char *name)
{
  return (CFMutableDictionaryRef)MEMORY[0x24BDD89A8](name);
}

kern_return_t IOServiceOpen(io_service_t service, task_port_t owningTask, uint32_t type, io_connect_t *connect)
{
  return MEMORY[0x24BDD89B8](*(_QWORD *)&service, *(_QWORD *)&owningTask, *(_QWORD *)&type, connect);
}

uint64_t MGCopyAnswer()
{
  return MEMORY[0x24BED8448]();
}

uint64_t MGGetBoolAnswer()
{
  return MEMORY[0x24BED8470]();
}

uint64_t MGGetSInt32Answer()
{
  return MEMORY[0x24BED8490]();
}

uint64_t MGIsQuestionValid()
{
  return MEMORY[0x24BED84D0]();
}

uint64_t MKBGetDeviceLockState()
{
  return MEMORY[0x24BE67168]();
}

uint64_t MKBUserTypeDeviceMode()
{
  return MEMORY[0x24BE671E8]();
}

uint64_t MKBVerifyPasswordWithContext()
{
  return MEMORY[0x24BE671F8]();
}

const char *__cdecl NSGetSizeAndAlignment(const char *typePtr, NSUInteger *sizep, NSUInteger *alignp)
{
  return (const char *)MEMORY[0x24BDBCAA0](typePtr, sizep, alignp);
}

NSString *__cdecl NSStringFromClass(Class aClass)
{
  return (NSString *)MEMORY[0x24BDD1240](aClass);
}

NSString *__cdecl NSStringFromSelector(SEL aSelector)
{
  return (NSString *)MEMORY[0x24BDD1268](aSelector);
}

uint64_t SecAccessControlCopyData()
{
  return MEMORY[0x24BDE8788]();
}

uint64_t SecAccessControlCreateFromData()
{
  return MEMORY[0x24BDE8798]();
}

SecAccessControlRef SecAccessControlCreateWithFlags(CFAllocatorRef allocator, CFTypeRef protection, SecAccessControlCreateFlags flags, CFErrorRef *error)
{
  return (SecAccessControlRef)MEMORY[0x24BDE87A0](allocator, protection, flags, error);
}

uint64_t SecAccessControlGetConstraints()
{
  return MEMORY[0x24BDE87B0]();
}

uint64_t SecAccessControlGetRequirePassword()
{
  return MEMORY[0x24BDE87B8]();
}

uint64_t TCCAccessPreflightWithAuditToken()
{
  return MEMORY[0x24BEB37A0]();
}

void *__cdecl _Block_copy(const void *aBlock)
{
  return (void *)MEMORY[0x24BDAC720](aBlock);
}

void _Block_object_dispose(const void *a1, const int a2)
{
  MEMORY[0x24BDAC730](a1, *(_QWORD *)&a2);
}

void _Block_release(const void *aBlock)
{
  MEMORY[0x24BDAC738](aBlock);
}

void _Unwind_Resume(_Unwind_Exception *exception_object)
{
  MEMORY[0x24BDAC780](exception_object);
}

void __assert_rtn(const char *a1, const char *a2, int a3, const char *a4)
{
  MEMORY[0x24BDAC7A0](a1, a2, *(_QWORD *)&a3, a4);
}

int *__error(void)
{
  return (int *)MEMORY[0x24BDAC7D0]();
}

uint64_t __memcpy_chk()
{
  return MEMORY[0x24BDAC848]();
}

uint64_t _os_feature_enabled_impl()
{
  return MEMORY[0x24BDACB60]();
}

void _os_log_debug_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x24BDACB68](dso, log, type, format, buf, *(_QWORD *)&size);
}

void _os_log_error_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x24BDACB80](dso, log, type, format, buf, *(_QWORD *)&size);
}

void _os_log_fault_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x24BDACB88](dso, log, type, format, buf, *(_QWORD *)&size);
}

void _os_log_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x24BDACB90](dso, log, type, format, buf, *(_QWORD *)&size);
}

void _os_signpost_emit_with_name_impl(void *dso, os_log_t log, os_signpost_type_t type, os_signpost_id_t spid, const char *name, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x24BDACC10](dso, log, type, spid, name, format, buf, *(_QWORD *)&size);
}

uint64_t _sl_dlopen()
{
  return MEMORY[0x24BEAE670]();
}

uint64_t _swift_stdlib_reportUnimplementedInitializer()
{
  return MEMORY[0x24BEE4B38]();
}

void abort(void)
{
  MEMORY[0x24BDAD008]();
}

uint64_t abort_report_np()
{
  return MEMORY[0x24BDAD010]();
}

void bzero(void *a1, size_t a2)
{
  MEMORY[0x24BDAD320](a1, a2);
}

void *__cdecl calloc(size_t __count, size_t __size)
{
  return (void *)MEMORY[0x24BDAD328](__count, __size);
}

uint64_t cc_clear()
{
  return MEMORY[0x24BDAD348]();
}

uint64_t cc_cmp_safe()
{
  return MEMORY[0x24BDAD350]();
}

uint64_t ccaes_cbc_decrypt_mode()
{
  return MEMORY[0x24BDAD358]();
}

uint64_t ccaes_cbc_encrypt_mode()
{
  return MEMORY[0x24BDAD360]();
}

uint64_t cccbc_clear_iv()
{
  return MEMORY[0x24BDAD398]();
}

uint64_t cccbc_init()
{
  return MEMORY[0x24BDAD3A0]();
}

uint64_t cccbc_one_shot()
{
  return MEMORY[0x24BDAD3A8]();
}

uint64_t cccbc_update()
{
  return MEMORY[0x24BDAD3B8]();
}

uint64_t cccurve25519()
{
  return MEMORY[0x24BDAD3E0]();
}

uint64_t cccurve25519_make_pub()
{
  return MEMORY[0x24BDAD3F0]();
}

uint64_t ccder_blob_decode_len()
{
  return MEMORY[0x24BDAD408]();
}

uint64_t ccder_blob_decode_range()
{
  return MEMORY[0x24BDAD418]();
}

uint64_t ccder_blob_decode_sequence_tl()
{
  return MEMORY[0x24BDAD420]();
}

uint64_t ccder_blob_decode_tag()
{
  return MEMORY[0x24BDAD428]();
}

uint64_t ccder_blob_decode_tl()
{
  return MEMORY[0x24BDAD430]();
}

uint64_t ccder_blob_encode_body()
{
  return MEMORY[0x24BDAD440]();
}

uint64_t ccder_blob_encode_body_tl()
{
  return MEMORY[0x24BDAD448]();
}

uint64_t ccder_blob_encode_implicit_raw_octet_string()
{
  return MEMORY[0x24BDAD450]();
}

uint64_t ccder_blob_encode_implicit_uint64()
{
  return MEMORY[0x24BDAD458]();
}

uint64_t ccder_blob_encode_tl()
{
  return MEMORY[0x24BDAD460]();
}

uint64_t ccder_decode_sequence_tl()
{
  return MEMORY[0x24BDAD480]();
}

uint64_t ccder_decode_tl()
{
  return MEMORY[0x24BDAD490]();
}

uint64_t ccder_encode_constructed_tl()
{
  return MEMORY[0x24BDAD4B0]();
}

uint64_t ccder_encode_raw_octet_string()
{
  return MEMORY[0x24BDAD4C8]();
}

uint64_t ccder_encode_uint64()
{
  return MEMORY[0x24BDAD4D8]();
}

uint64_t ccder_sizeof()
{
  return MEMORY[0x24BDAD4E0]();
}

uint64_t ccder_sizeof_implicit_uint64()
{
  return MEMORY[0x24BDAD4F0]();
}

uint64_t ccder_sizeof_raw_octet_string()
{
  return MEMORY[0x24BDAD510]();
}

uint64_t ccder_sizeof_uint64()
{
  return MEMORY[0x24BDAD520]();
}

uint64_t ccdigest()
{
  return MEMORY[0x24BDAD538]();
}

uint64_t ccec_export_pub()
{
  return MEMORY[0x24BDAD5B0]();
}

uint64_t ccec_import_pub()
{
  return MEMORY[0x24BDAD5D0]();
}

uint64_t ccecb_one_shot()
{
  return MEMORY[0x24BDAD620]();
}

uint64_t cchkdf()
{
  return MEMORY[0x24BDAD690]();
}

uint64_t cchmac()
{
  return MEMORY[0x24BDAD6A8]();
}

uint64_t ccn_read_uint()
{
  return MEMORY[0x24BDAD720]();
}

uint64_t ccn_write_uint_padded()
{
  return MEMORY[0x24BDAD730]();
}

uint64_t ccpbkdf2_hmac()
{
  return MEMORY[0x24BDAD750]();
}

uint64_t ccrng()
{
  return MEMORY[0x24BDAD758]();
}

uint64_t ccsha256_di()
{
  return MEMORY[0x24BDAD828]();
}

uint64_t cczp_bitlen()
{
  return MEMORY[0x24BDAD928]();
}

int close(int a1)
{
  return MEMORY[0x24BDAD9D8](*(_QWORD *)&a1);
}

void dispatch_activate(dispatch_object_t object)
{
  MEMORY[0x24BDADC58](object);
}

void dispatch_after(dispatch_time_t when, dispatch_queue_t queue, dispatch_block_t block)
{
  MEMORY[0x24BDADC60](when, queue, block);
}

void dispatch_assert_queue_V2(dispatch_queue_t queue)
{
  MEMORY[0x24BDADCA8](queue);
}

void dispatch_async(dispatch_queue_t queue, dispatch_block_t block)
{
  MEMORY[0x24BDADCC0](queue, block);
}

dispatch_block_t dispatch_block_create(dispatch_block_flags_t flags, dispatch_block_t block)
{
  return (dispatch_block_t)MEMORY[0x24BDADD18](flags, block);
}

intptr_t dispatch_block_wait(dispatch_block_t block, dispatch_time_t timeout)
{
  return MEMORY[0x24BDADD40](block, timeout);
}

dispatch_group_t dispatch_group_create(void)
{
  return (dispatch_group_t)MEMORY[0x24BDADDC8]();
}

void dispatch_group_enter(dispatch_group_t group)
{
  MEMORY[0x24BDADDD0](group);
}

void dispatch_group_leave(dispatch_group_t group)
{
  MEMORY[0x24BDADDD8](group);
}

void dispatch_group_notify(dispatch_group_t group, dispatch_queue_t queue, dispatch_block_t block)
{
  MEMORY[0x24BDADDE0](group, queue, block);
}

void dispatch_once(dispatch_once_t *predicate, dispatch_block_t block)
{
  MEMORY[0x24BDADE98](predicate, block);
}

dispatch_queue_attr_t dispatch_queue_attr_make_with_qos_class(dispatch_queue_attr_t attr, dispatch_qos_class_t qos_class, int relative_priority)
{
  return (dispatch_queue_attr_t)MEMORY[0x24BDADEC8](attr, *(_QWORD *)&qos_class, *(_QWORD *)&relative_priority);
}

dispatch_queue_t dispatch_queue_create(const char *label, dispatch_queue_attr_t attr)
{
  return (dispatch_queue_t)MEMORY[0x24BDADED0](label, attr);
}

dispatch_semaphore_t dispatch_semaphore_create(intptr_t value)
{
  return (dispatch_semaphore_t)MEMORY[0x24BDADF28](value);
}

void dispatch_source_cancel(dispatch_source_t source)
{
  MEMORY[0x24BDADF68](source);
}

dispatch_source_t dispatch_source_create(dispatch_source_type_t type, uintptr_t handle, uintptr_t mask, dispatch_queue_t queue)
{
  return (dispatch_source_t)MEMORY[0x24BDADF70](type, handle, mask, queue);
}

void dispatch_source_set_event_handler(dispatch_source_t source, dispatch_block_t handler)
{
  MEMORY[0x24BDADFB0](source, handler);
}

void dispatch_source_set_timer(dispatch_source_t source, dispatch_time_t start, uint64_t interval, uint64_t leeway)
{
  MEMORY[0x24BDADFD0](source, start, interval, leeway);
}

intptr_t dispatch_source_testcancel(dispatch_source_t source)
{
  return MEMORY[0x24BDADFD8](source);
}

void dispatch_sync(dispatch_queue_t queue, dispatch_block_t block)
{
  MEMORY[0x24BDADFE8](queue, block);
}

dispatch_time_t dispatch_time(dispatch_time_t when, int64_t delta)
{
  return MEMORY[0x24BDADFF8](when, delta);
}

char *dlerror(void)
{
  return (char *)MEMORY[0x24BDAE068]();
}

void *__cdecl dlsym(void *__handle, const char *__symbol)
{
  return (void *)MEMORY[0x24BDAE088](__handle, __symbol);
}

int fcntl(int a1, int a2, ...)
{
  return MEMORY[0x24BDAE2E8](*(_QWORD *)&a1, *(_QWORD *)&a2);
}

int fprintf(FILE *a1, const char *a2, ...)
{
  return MEMORY[0x24BDAE428](a1, a2);
}

void free(void *a1)
{
  MEMORY[0x24BDAE450](a1);
}

int fts_close(FTS *a1)
{
  return MEMORY[0x24BDAE550](a1);
}

FTS *__cdecl fts_open(char *const *a1, int a2, int (__cdecl *a3)(const FTSENT **, const FTSENT **))
{
  return (FTS *)MEMORY[0x24BDAE558](a1, *(_QWORD *)&a2, a3);
}

FTSENT *__cdecl fts_read(FTS *a1)
{
  return (FTSENT *)MEMORY[0x24BDAE568](a1);
}

int fts_set(FTS *a1, FTSENT *a2, int a3)
{
  return MEMORY[0x24BDAE570](a1, a2, *(_QWORD *)&a3);
}

uid_t geteuid(void)
{
  return MEMORY[0x24BDAE5F8]();
}

pid_t getpid(void)
{
  return MEMORY[0x24BDAE6D0]();
}

int gettimeofday(timeval *a1, void *a2)
{
  return MEMORY[0x24BDAE780](a1, a2);
}

uint64_t mach_continuous_time(void)
{
  return MEMORY[0x24BDAEB48]();
}

kern_return_t mach_timebase_info(mach_timebase_info_t info)
{
  return MEMORY[0x24BDAEC68](info);
}

void *__cdecl malloc(size_t __size)
{
  return (void *)MEMORY[0x24BDAED08](__size);
}

size_t malloc_size(const void *ptr)
{
  return MEMORY[0x24BDAED60](ptr);
}

void *__cdecl malloc_type_calloc(size_t count, size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x24BDAED70](count, size, type_id);
}

void *__cdecl malloc_type_malloc(size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x24BDAED78](size, type_id);
}

int memcmp(const void *__s1, const void *__s2, size_t __n)
{
  return MEMORY[0x24BDAEE78](__s1, __s2, __n);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return (void *)MEMORY[0x24BDAEE80](__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return (void *)MEMORY[0x24BDAEE98](__dst, __src, __len);
}

errno_t memset_s(void *__s, rsize_t __smax, int __c, rsize_t __n)
{
  return MEMORY[0x24BDAEEC8](__s, __smax, *(_QWORD *)&__c, __n);
}

id objc_alloc(Class a1)
{
  return (id)MEMORY[0x24BEDCF68](a1);
}

id objc_allocWithZone(Class a1)
{
  return (id)MEMORY[0x24BEDCF78](a1);
}

uint64_t objc_alloc_init()
{
  return MEMORY[0x24BEDCF88]();
}

id objc_autorelease(id a1)
{
  return (id)MEMORY[0x24BEDCFA8](a1);
}

id objc_autoreleaseReturnValue(id a1)
{
  return (id)MEMORY[0x24BEDCFD0](a1);
}

uint64_t objc_claimAutoreleasedReturnValue()
{
  return MEMORY[0x24BEDCFE8]();
}

void objc_copyWeak(id *to, id *from)
{
  MEMORY[0x24BEDD030](to, from);
}

void objc_destroyWeak(id *location)
{
  MEMORY[0x24BEDD038](location);
}

void objc_enumerationMutation(id obj)
{
  MEMORY[0x24BEDD068](obj);
}

void objc_exception_throw(id exception)
{
  MEMORY[0x24BEDD078](exception);
}

Class objc_getClass(const char *name)
{
  return (Class)MEMORY[0x24BEDD088](name);
}

id objc_initWeak(id *location, id val)
{
  return (id)MEMORY[0x24BEDD0C0](location, val);
}

id objc_loadWeakRetained(id *location)
{
  return (id)MEMORY[0x24BEDD0E8](location);
}

id objc_msgSend(id a1, SEL a2, ...)
{
  return (id)MEMORY[0x24BEDD108](a1, a2);
}

id objc_msgSendSuper2(objc_super *a1, SEL a2, ...)
{
  return (id)MEMORY[0x24BEDD120](a1, a2);
}

uint64_t objc_opt_class()
{
  return MEMORY[0x24BEDD130]();
}

uint64_t objc_opt_isKindOfClass()
{
  return MEMORY[0x24BEDD138]();
}

uint64_t objc_opt_new()
{
  return MEMORY[0x24BEDD148]();
}

uint64_t objc_opt_respondsToSelector()
{
  return MEMORY[0x24BEDD160]();
}

uint64_t objc_opt_self()
{
  return MEMORY[0x24BEDD168]();
}

void objc_release(id a1)
{
  MEMORY[0x24BEDD188](a1);
}

id objc_retain(id a1)
{
  return (id)MEMORY[0x24BEDD2A0](a1);
}

id objc_retainAutorelease(id a1)
{
  return (id)MEMORY[0x24BEDD2A8](a1);
}

id objc_retainAutoreleaseReturnValue(id a1)
{
  return (id)MEMORY[0x24BEDD2B0](a1);
}

id objc_retainAutoreleasedReturnValue(id a1)
{
  return (id)MEMORY[0x24BEDD2B8](a1);
}

id objc_retainBlock(id a1)
{
  return (id)MEMORY[0x24BEDD2C0](a1);
}

void objc_storeStrong(id *location, id obj)
{
  MEMORY[0x24BEDD410](location, obj);
}

id objc_storeWeak(id *location, id obj)
{
  return (id)MEMORY[0x24BEDD420](location, obj);
}

int open(const char *a1, int a2, ...)
{
  return MEMORY[0x24BDAF228](a1, *(_QWORD *)&a2);
}

int open_dprotected_np(const char *a1, int a2, int a3, int a4, ...)
{
  return MEMORY[0x24BDAF230](a1, *(_QWORD *)&a2, *(_QWORD *)&a3, *(_QWORD *)&a4);
}

os_log_t os_log_create(const char *subsystem, const char *category)
{
  return (os_log_t)MEMORY[0x24BDAF368](subsystem, category);
}

BOOL os_log_type_enabled(os_log_t oslog, os_log_type_t type)
{
  return MEMORY[0x24BDAF398](oslog, type);
}

BOOL os_signpost_enabled(os_log_t log)
{
  return MEMORY[0x24BDAF400](log);
}

void os_unfair_lock_lock(os_unfair_lock_t lock)
{
  MEMORY[0x24BDAF460](lock);
}

void os_unfair_lock_unlock(os_unfair_lock_t lock)
{
  MEMORY[0x24BDAF488](lock);
}

uint64_t os_variant_allows_internal_security_policies()
{
  return MEMORY[0x24BDAF4B0]();
}

int printf(const char *a1, ...)
{
  return MEMORY[0x24BDAF6A8](a1);
}

int putchar(int a1)
{
  return MEMORY[0x24BDAF9F0](*(_QWORD *)&a1);
}

int puts(const char *a1)
{
  return MEMORY[0x24BDAF9F8](a1);
}

void qsort(void *__base, size_t __nel, size_t __width, int (__cdecl *__compar)(const void *, const void *))
{
  MEMORY[0x24BDAFA18](__base, __nel, __width, __compar);
}

ssize_t read(int a1, void *a2, size_t a3)
{
  return MEMORY[0x24BDAFA80](*(_QWORD *)&a1, a2, a3);
}

char *__cdecl realpath_DARWIN_EXTSN(const char *a1, char *a2)
{
  return (char *)MEMORY[0x24BDAFAC0](a1, a2);
}

uint64_t reboot3()
{
  return MEMORY[0x24BDAFAD0]();
}

int snprintf(char *__str, size_t __size, const char *__format, ...)
{
  return MEMORY[0x24BDAFE40](__str, __size, __format);
}

int stat(const char *a1, stat *a2)
{
  return MEMORY[0x24BDAFEA8](a1, a2);
}

int statfs(const char *a1, statfs *a2)
{
  return MEMORY[0x24BDAFEB0](a1, a2);
}

char *__cdecl strerror(int __errnum)
{
  return (char *)MEMORY[0x24BDAFF18](*(_QWORD *)&__errnum);
}

size_t strlen(const char *__s)
{
  return MEMORY[0x24BDAFF40](__s);
}

size_t strnlen(const char *__s1, size_t __n)
{
  return MEMORY[0x24BDAFF80](__s1, __n);
}

char *__cdecl strnstr(const char *__big, const char *__little, size_t __len)
{
  return (char *)MEMORY[0x24BDAFF88](__big, __little, __len);
}

uint64_t swift_allocBox()
{
  return MEMORY[0x24BEE4B58]();
}

uint64_t swift_allocError()
{
  return MEMORY[0x24BEE4B68]();
}

uint64_t swift_allocObject()
{
  return MEMORY[0x24BEE4B70]();
}

uint64_t swift_arrayDestroy()
{
  return MEMORY[0x24BEE4B98]();
}

uint64_t swift_arrayInitWithCopy()
{
  return MEMORY[0x24BEE4BA0]();
}

uint64_t swift_arrayInitWithTakeBackToFront()
{
  return MEMORY[0x24BEE4BA8]();
}

uint64_t swift_arrayInitWithTakeFrontToBack()
{
  return MEMORY[0x24BEE4BB0]();
}

uint64_t swift_beginAccess()
{
  return MEMORY[0x24BEE4BB8]();
}

uint64_t swift_bridgeObjectRelease()
{
  return MEMORY[0x24BEE4BC0]();
}

uint64_t swift_bridgeObjectRelease_n()
{
  return MEMORY[0x24BEE4BC8]();
}

uint64_t swift_bridgeObjectRetain()
{
  return MEMORY[0x24BEE4BD0]();
}

uint64_t swift_bridgeObjectRetain_n()
{
  return MEMORY[0x24BEE4BD8]();
}

uint64_t swift_continuation_await()
{
  return MEMORY[0x24BEE71B8]();
}

uint64_t swift_continuation_init()
{
  return MEMORY[0x24BEE71C0]();
}

uint64_t swift_continuation_throwingResume()
{
  return MEMORY[0x24BEE71D0]();
}

uint64_t swift_continuation_throwingResumeWithError()
{
  return MEMORY[0x24BEE71D8]();
}

uint64_t swift_deallocClassInstance()
{
  return MEMORY[0x24BEE4C00]();
}

uint64_t swift_deallocObject()
{
  return MEMORY[0x24BEE4C10]();
}

uint64_t swift_deallocPartialClassInstance()
{
  return MEMORY[0x24BEE4C18]();
}

uint64_t swift_defaultActor_deallocate()
{
  return MEMORY[0x24BEE71E0]();
}

uint64_t swift_defaultActor_destroy()
{
  return MEMORY[0x24BEE71E8]();
}

uint64_t swift_defaultActor_initialize()
{
  return MEMORY[0x24BEE71F0]();
}

uint64_t swift_deletedMethodError()
{
  return MEMORY[0x24BEE4C28]();
}

uint64_t swift_dynamicCast()
{
  return MEMORY[0x24BEE4C38]();
}

uint64_t swift_dynamicCastClass()
{
  return MEMORY[0x24BEE4C40]();
}

uint64_t swift_endAccess()
{
  return MEMORY[0x24BEE4C98]();
}

uint64_t swift_errorRelease()
{
  return MEMORY[0x24BEE4CA0]();
}

uint64_t swift_errorRetain()
{
  return MEMORY[0x24BEE4CA8]();
}

uint64_t swift_getEnumTagSinglePayloadGeneric()
{
  return MEMORY[0x24BEE4D10]();
}

uint64_t swift_getErrorValue()
{
  return MEMORY[0x24BEE4D18]();
}

uint64_t swift_getForeignTypeMetadata()
{
  return MEMORY[0x24BEE4D40]();
}

uint64_t swift_getObjCClassFromMetadata()
{
  return MEMORY[0x24BEE4DA0]();
}

uint64_t swift_getObjCClassMetadata()
{
  return MEMORY[0x24BEE4DB0]();
}

uint64_t swift_getObjectType()
{
  return MEMORY[0x24BEE4DB8]();
}

uint64_t swift_getSingletonMetadata()
{
  return MEMORY[0x24BEE4DD0]();
}

uint64_t swift_getTypeByMangledNameInContext2()
{
  return MEMORY[0x24BEE4E10]();
}

uint64_t swift_getTypeByMangledNameInContextInMetadataState2()
{
  return MEMORY[0x24BEE4E18]();
}

uint64_t swift_getWitnessTable()
{
  return MEMORY[0x24BEE4E20]();
}

uint64_t swift_initStackObject()
{
  return MEMORY[0x24BEE4E48]();
}

uint64_t swift_initStructMetadata()
{
  return MEMORY[0x24BEE4E58]();
}

uint64_t swift_isUniquelyReferenced_nonNull_native()
{
  return MEMORY[0x24BEE4E98]();
}

uint64_t swift_lookUpClassMethod()
{
  return MEMORY[0x24BEE4EA8]();
}

uint64_t swift_makeBoxUnique()
{
  return MEMORY[0x24BEE4EB0]();
}

uint64_t swift_once()
{
  return MEMORY[0x24BEE4EC8]();
}

uint64_t swift_release()
{
  return MEMORY[0x24BEE4EF8]();
}

uint64_t swift_release_n()
{
  return MEMORY[0x24BEE4F00]();
}

uint64_t swift_retain()
{
  return MEMORY[0x24BEE4F08]();
}

uint64_t swift_retain_n()
{
  return MEMORY[0x24BEE4F10]();
}

uint64_t swift_setDeallocating()
{
  return MEMORY[0x24BEE4F30]();
}

uint64_t swift_slowAlloc()
{
  return MEMORY[0x24BEE4F38]();
}

uint64_t swift_slowDealloc()
{
  return MEMORY[0x24BEE4F40]();
}

uint64_t swift_storeEnumTagSinglePayloadGeneric()
{
  return MEMORY[0x24BEE4F60]();
}

uint64_t swift_task_alloc()
{
  return MEMORY[0x24BEE7228]();
}

uint64_t swift_task_create()
{
  return MEMORY[0x24BEE7230]();
}

uint64_t swift_task_dealloc()
{
  return MEMORY[0x24BEE7238]();
}

uint64_t swift_task_switch()
{
  return MEMORY[0x24BEE7278]();
}

uint64_t swift_unknownObjectRelease()
{
  return MEMORY[0x24BEE4F70]();
}

uint64_t swift_unknownObjectRelease_n()
{
  return MEMORY[0x24BEE4F78]();
}

uint64_t swift_unknownObjectRetain()
{
  return MEMORY[0x24BEE4F80]();
}

uint64_t swift_unknownObjectRetain_n()
{
  return MEMORY[0x24BEE4F88]();
}

uint64_t swift_unknownObjectWeakDestroy()
{
  return MEMORY[0x24BEE4FC8]();
}

uint64_t swift_unknownObjectWeakInit()
{
  return MEMORY[0x24BEE4FD0]();
}

uint64_t swift_unknownObjectWeakLoadStrong()
{
  return MEMORY[0x24BEE4FD8]();
}

uint64_t swift_updateClassMetadata2()
{
  return MEMORY[0x24BEE5008]();
}

uint64_t swift_weakDestroy()
{
  return MEMORY[0x24BEE5028]();
}

uint64_t swift_weakInit()
{
  return MEMORY[0x24BEE5030]();
}

uint64_t swift_weakLoadStrong()
{
  return MEMORY[0x24BEE5038]();
}

uint64_t swift_willThrow()
{
  return MEMORY[0x24BEE5050]();
}

int sysctlbyname(const char *a1, void *a2, size_t *a3, void *a4, size_t a5)
{
  return MEMORY[0x24BDB0100](a1, a2, a3, a4, a5);
}

void syslog(int a1, const char *a2, ...)
{
  MEMORY[0x24BDB0128](*(_QWORD *)&a1, a2);
}

kern_return_t task_info(task_name_t target_task, task_flavor_t flavor, task_info_t task_info_out, mach_msg_type_number_t *task_info_outCnt)
{
  return MEMORY[0x24BDB0180](*(_QWORD *)&target_task, *(_QWORD *)&flavor, task_info_out, task_info_outCnt);
}

kern_return_t task_name_for_pid(mach_port_name_t target_tport, int pid, mach_port_name_t *tn)
{
  return MEMORY[0x24BDB0190](*(_QWORD *)&target_tport, *(_QWORD *)&pid, tn);
}

time_t time(time_t *a1)
{
  return MEMORY[0x24BDB0240](a1);
}

int timingsafe_bcmp(const void *__b1, const void *__b2, size_t __len)
{
  return MEMORY[0x24BDB0260](__b1, __b2, __len);
}

int uuid_compare(const uuid_t uu1, const uuid_t uu2)
{
  return MEMORY[0x24BDB0308](uu1, uu2);
}

void uuid_copy(uuid_t dst, const uuid_t src)
{
  MEMORY[0x24BDB0310](dst, src);
}

void uuid_unparse(const uuid_t uu, uuid_string_t out)
{
  MEMORY[0x24BDB0338](uu, out);
}

ssize_t write(int __fd, const void *__buf, size_t __nbyte)
{
  return MEMORY[0x24BDB0558](*(_QWORD *)&__fd, __buf, __nbyte);
}

const char *__cdecl xpc_dictionary_get_string(xpc_object_t xdict, const char *key)
{
  return (const char *)MEMORY[0x24BDB0950](xdict, key);
}

void xpc_set_event_stream_handler(const char *stream, dispatch_queue_t targetq, xpc_handler_t handler)
{
  MEMORY[0x24BDB0B58](stream, targetq, handler);
}

